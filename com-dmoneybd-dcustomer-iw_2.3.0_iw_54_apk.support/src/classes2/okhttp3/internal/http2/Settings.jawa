record `okhttp3.internal.http2.Settings` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.http2.Settings.set` @AccessFlag PRIVATE;
  `int`[] `okhttp3.internal.http2.Settings.values` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2de0d0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2de0d6.  v0:= 10I;
  #L2de0da.  v0:= new `int`[v0];
  #L2de0de.  v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] := v0 @kind object;
  #L2de0e2.  return @kind void;
}
procedure `void` `a`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2de0f4.  v0:= 0I;
  #L2de0f6.  v2.`okhttp3.internal.http2.Settings.set` @type ^`int` := v0;
  #L2de0fa.  v1:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L2de0fe.  call `fill`(v1, v0) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L2de104.  return @kind void;
}
procedure `int` `b`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.b:(I)I` @AccessFlag  {
    temp;
    v0;

  #L2ddfb4.  v0:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L2ddfb8.  v2:= v0[v2];
  #L2ddfbc.  return v2;
}
procedure `int` `c`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.c:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2ddfd0.  v0:= v2.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L2ddfd4.  v0:= v0 ^& 2;
  #L2ddfd8.  if v0 == 0 then goto L2ddfe8;
  #L2ddfdc.  v0:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L2ddfe0.  v1:= 1I;
  #L2ddfe2.  v0:= v0[v1];
  #L2ddfe6.  goto L2ddfea;
  #L2ddfe8.  v0:= -1I;
  #L2ddfea.  return v0;
}
procedure `int` `d`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.d:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2ddffc.  v0:= v2.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L2de000.  v0:= v0 ^& 128;
  #L2de004.  if v0 == 0 then goto L2de014;
  #L2de008.  v0:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L2de00c.  v1:= 7I;
  #L2de00e.  v0:= v0[v1];
  #L2de012.  goto L2de01a;
  #L2de014.  v0:= 65535I;
  #L2de01a.  return v0;
}
procedure `int` `e`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.e:(I)I` @AccessFlag  {
    temp;
    v0;

  #L2de02c.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L2de030.  v0:= v0 ^& 16;
  #L2de034.  if v0 == 0 then goto L2de042;
  #L2de038.  v2:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L2de03c.  v0:= 4I;
  #L2de03e.  v2:= v2[v0];
  #L2de042.  return v2;
}
procedure `int` `f`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.f:(I)I` @AccessFlag  {
    temp;
    v0;

  #L2de054.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L2de058.  v0:= v0 ^& 32;
  #L2de05c.  if v0 == 0 then goto L2de06a;
  #L2de060.  v2:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L2de064.  v0:= 5I;
  #L2de066.  v2:= v2[v0];
  #L2de06a.  return v2;
}
procedure `boolean` `g`(`okhttp3.internal.http2.Settings` v2 @kind this, `int` v3 ) @signature `Lokhttp3/internal/http2/Settings;.g:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2ddf8c.  v0:= 1I;
  #L2ddf8e.  v3:= v0 ^< v3 @kind int;
  #L2ddf92.  v1:= v2.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L2ddf96.  v3:= v3 ^& v1 @kind int;
  #L2ddf98.  if v3 == 0 then goto L2ddf9e;
  #L2ddf9c.  goto L2ddfa0;
  #L2ddf9e.  v0:= 0I;
  #L2ddfa0.  return v0;
}
procedure `void` `h`(`okhttp3.internal.http2.Settings` v2 @kind this, `okhttp3.internal.http2.Settings` v3 @kind object) @signature `Lokhttp3/internal/http2/Settings;.h:(Lokhttp3/internal/http2/Settings;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2de118.  v0:= 0I;
  #L2de11a.  v1:= 10I;
  #L2de11e.  if v0 >= v1 then goto L2de144;
  #L2de122.  call temp:= `g`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.g:(I)Z` @kind virtual;
  #L2de128.  v1:= temp;
  #L2de12a.  if v1 != 0 then goto L2de130;
  #L2de12e.  goto L2de13e;
  #L2de130.  call temp:= `b`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.b:(I)I` @kind virtual;
  #L2de136.  v1:= temp;
  #L2de138.  call temp:= `i`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Settings;.i:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L2de13e.  v0:= v0 + 1;
  #L2de142.  goto L2de11a;
  #L2de144.  return @kind void;
}
procedure `okhttp3.internal.http2.Settings` `i`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lokhttp3/internal/http2/Settings;.i:(II)Lokhttp3/internal/http2/Settings;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2de09c.  if v4 < 0 then goto L2de0be;
  #L2de0a0.  v0:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L2de0a4.  v1:= length @variable v0;
  #L2de0a6.  if v4 < v1 then goto L2de0ac;
  #L2de0aa.  goto L2de0be;
  #L2de0ac.  v1:= 1I;
  #L2de0ae.  v1:= v1 ^< v4 @kind int;
  #L2de0b0.  v2:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L2de0b4.  v1:= v1 ^| v2 @kind int;
  #L2de0b6.  v3.`okhttp3.internal.http2.Settings.set` @type ^`int` := v1;
  #L2de0ba.  v0[v4]:= v5;
  #L2de0be.  return v3 @kind object;
}
procedure `int` `j`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.j:()I` @AccessFlag  {
    temp;
    v0;

  #L2de07c.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L2de080.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L2de086.  v0:= temp;
  #L2de088.  return v0;
}
