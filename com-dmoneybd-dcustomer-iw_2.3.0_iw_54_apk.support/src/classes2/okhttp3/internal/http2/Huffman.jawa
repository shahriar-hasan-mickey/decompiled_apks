record `okhttp3.internal.http2.Huffman` @kind class @AccessFlag  {
  `okhttp3.internal.http2.Huffman$Node` `okhttp3.internal.http2.Huffman.root` @AccessFlag PRIVATE_FINAL;
}
global `int`[] `@@okhttp3.internal.http2.Huffman.CODES` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@okhttp3.internal.http2.Huffman.CODE_LENGTHS` @AccessFlag PRIVATE_STATIC_FINAL;
global `okhttp3.internal.http2.Huffman` `@@okhttp3.internal.http2.Huffman.INSTANCE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Huffman;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2dd82c.  v0:= 256I;
  #L2dd830.  v1:= new `int`[v0];
  #L2dd834.  goto L2dd85c;
  #L2dd83a.  `@@okhttp3.internal.http2.Huffman.CODES` @type ^`int`[] := v1 @kind object;
  #L2dd83e.  v0:= new `byte`[v0];
  #L2dd842.  goto L2ddc64;
  #L2dd848.  `@@okhttp3.internal.http2.Huffman.CODE_LENGTHS` @type ^`byte`[] := v0 @kind object;
  #L2dd84c.  v0:= new `okhttp3.internal.http2.Huffman`;
  #L2dd850.  call `<init>`(v0) @signature `Lokhttp3/internal/http2/Huffman;.<init>:()V` @kind direct;
  #L2dd856.  `@@okhttp3.internal.http2.Huffman.INSTANCE` @type ^`okhttp3.internal.http2.Huffman` := v0 @kind object;
  #L2dd85a.  return @kind void;
  #L2dd85c.  v1:= (8184I, 8388568I, 268435426I, 268435427I, 268435428I, 268435429I, 268435430I, 268435431I, 268435432I, 16777194I, 1073741820I, 268435433I, 268435434I, 1073741821I, 268435435I, 268435436I, 268435437I, 268435438I, 268435439I, 268435440I, 268435441I, 268435442I, 1073741822I, 268435443I, 268435444I, 268435445I, 268435446I, 268435447I, 268435448I, 268435449I, 268435450I, 268435451I, 20I, 1016I, 1017I, 4090I, 8185I, 21I, 248I, 2042I, 1018I, 1019I, 249I, 2043I, 250I, 22I, 23I, 24I, 0I, 1I, 2I, 25I, 26I, 27I, 28I, 29I, 30I, 31I, 92I, 251I, 32764I, 32I, 4091I, 1020I, 8186I, 33I, 93I, 94I, 95I, 96I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 252I, 115I, 253I, 8187I, 524272I, 8188I, 16380I, 34I, 32765I, 3I, 35I, 4I, 36I, 5I, 37I, 38I, 39I, 6I, 116I, 117I, 40I, 41I, 42I, 7I, 43I, 118I, 44I, 8I, 9I, 45I, 119I, 120I, 121I, 122I, 123I, 32766I, 2044I, 16381I, 8189I, 268435452I, 1048550I, 4194258I, 1048551I, 1048552I, 4194259I, 4194260I, 4194261I, 8388569I, 4194262I, 8388570I, 8388571I, 8388572I, 8388573I, 8388574I, 16777195I, 8388575I, 16777196I, 16777197I, 4194263I, 8388576I, 16777198I, 8388577I, 8388578I, 8388579I, 8388580I, 2097116I, 4194264I, 8388581I, 4194265I, 8388582I, 8388583I, 16777199I, 4194266I, 2097117I, 1048553I, 4194267I, 4194268I, 8388584I, 8388585I, 2097118I, 8388586I, 4194269I, 4194270I, 16777200I, 2097119I, 4194271I, 8388587I, 8388588I, 2097120I, 2097121I, 4194272I, 2097122I, 8388589I, 4194273I, 8388590I, 8388591I, 1048554I, 4194274I, 4194275I, 4194276I, 8388592I, 4194277I, 4194278I, 8388593I, 67108832I, 67108833I, 1048555I, 524273I, 4194279I, 8388594I, 4194280I, 33554412I, 67108834I, 67108835I, 67108836I, 134217694I, 134217695I, 67108837I, 16777201I, 33554413I, 524274I, 2097123I, 67108838I, 134217696I, 134217697I, 67108839I, 134217698I, 16777202I, 2097124I, 2097125I, 67108840I, 67108841I, 268435453I, 134217699I, 134217700I, 134217701I, 1048556I, 16777203I, 1048557I, 2097126I, 4194281I, 2097127I, 2097128I, 8388595I, 4194282I, 4194283I, 33554414I, 33554415I, 16777204I, 16777205I, 67108842I, 8388596I, 67108843I, 134217702I, 67108844I, 67108845I, 134217703I, 134217704I, 134217705I, 134217706I, 134217707I, 268435454I, 134217708I, 134217709I, 134217710I, 134217711I, 134217712I, 67108846I) @kind object;
  #L2ddc63.  goto L2dd83a;
  #L2ddc64.  v0:= (13I, 23I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 24I, 30I, 28I, 28I, 30I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 30I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 6I, 10I, 10I, 12I, 13I, 6I, 8I, 11I, 10I, 10I, 8I, 11I, 8I, 6I, 6I, 6I, 5I, 5I, 5I, 6I, 6I, 6I, 6I, 6I, 6I, 6I, 7I, 8I, 15I, 6I, 12I, 10I, 13I, 6I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 8I, 7I, 8I, 13I, 19I, 13I, 14I, 6I, 15I, 5I, 6I, 5I, 6I, 5I, 6I, 6I, 6I, 5I, 7I, 7I, 6I, 6I, 6I, 5I, 6I, 7I, 6I, 5I, 5I, 6I, 7I, 7I, 7I, 7I, 7I, 15I, 11I, 14I, 13I, 28I, 20I, 22I, 20I, 20I, 22I, 22I, 22I, 23I, 22I, 23I, 23I, 23I, 23I, 23I, 24I, 23I, 24I, 24I, 22I, 23I, 24I, 23I, 23I, 23I, 23I, 21I, 22I, 23I, 22I, 23I, 23I, 24I, 22I, 21I, 20I, 22I, 22I, 23I, 23I, 21I, 23I, 22I, 22I, 24I, 21I, 22I, 23I, 23I, 21I, 21I, 22I, 21I, 23I, 22I, 23I, 23I, 20I, 22I, 22I, 22I, 23I, 22I, 22I, 23I, 26I, 26I, 20I, 19I, 22I, 23I, 22I, 25I, 26I, 26I, 26I, 27I, 27I, 26I, 24I, 25I, 19I, 21I, 26I, 27I, 27I, 26I, 27I, 24I, 21I, 21I, 26I, 26I, 28I, 27I, 27I, 27I, 20I, 24I, 20I, 21I, 22I, 21I, 21I, 23I, 22I, 22I, 25I, 25I, 24I, 24I, 26I, 23I, 26I, 27I, 26I, 26I, 27I, 27I, 27I, 27I, 27I, 28I, 27I, 27I, 27I, 27I, 27I, 26I) @kind object;
  #L2ddd6b.  goto L2dd848;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Huffman` v1 @kind this) @signature `Lokhttp3/internal/http2/Huffman;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L2ddd7c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ddd82.  v0:= new `okhttp3.internal.http2.Huffman$Node`;
  #L2ddd86.  call `<init>`(v0) @signature `Lokhttp3/internal/http2/Huffman$Node;.<init>:()V` @kind direct;
  #L2ddd8c.  v1.`okhttp3.internal.http2.Huffman.root` @type ^`okhttp3.internal.http2.Huffman$Node` := v0 @kind object;
  #L2ddd90.  call `buildTree`(v1) @signature `Lokhttp3/internal/http2/Huffman;.buildTree:()V` @kind direct;
  #L2ddd96.  return @kind void;
}
procedure `void` `addCode`(`okhttp3.internal.http2.Huffman` v4 @kind this, `int` v5 , `int` v6 , `byte` v7 ) @signature `Lokhttp3/internal/http2/Huffman;.addCode:(IIB)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2ddda8.  v0:= new `okhttp3.internal.http2.Huffman$Node`;
  #L2dddac.  call `<init>`(v0, v5, v7) @signature `Lokhttp3/internal/http2/Huffman$Node;.<init>:(II)V` @kind direct;
  #L2dddb2.  v5:= v4.`okhttp3.internal.http2.Huffman.root` @type ^`okhttp3.internal.http2.Huffman$Node` @kind object;
  #L2dddb6.  v1:= 8I;
  #L2dddba.  if v7 <= v1 then goto L2dde04;
  #L2dddbe.  v7:= v7 + -8;
  #L2dddc2.  v7:= (`byte`) v7 @kind i2b;
  #L2dddc4.  v1:= v6 ^>> v7 @kind int;
  #L2dddc8.  v1:= v1 ^& 255;
  #L2dddcc.  v2:= v5.`okhttp3.internal.http2.Huffman$Node.a` @type ^`okhttp3.internal.http2.Huffman$Node`[] @kind object;
  #L2dddd0.  if v2 == 0 then goto L2dddf4;
  #L2dddd4.  v3:= v2[v1] @kind object;
  #L2dddd8.  if v3 != 0 then goto L2dddea;
  #L2ddddc.  v3:= new `okhttp3.internal.http2.Huffman$Node`;
  #L2ddde0.  call `<init>`(v3) @signature `Lokhttp3/internal/http2/Huffman$Node;.<init>:()V` @kind direct;
  #L2ddde6.  v2[v1]:= v3 @kind object;
  #L2dddea.  v5:= v5.`okhttp3.internal.http2.Huffman$Node.a` @type ^`okhttp3.internal.http2.Huffman$Node`[] @kind object;
  #L2dddee.  v5:= v5[v1] @kind object;
  #L2dddf2.  goto L2dddb6;
  #L2dddf4.  v5:= new `java.lang.IllegalStateException`;
  #L2dddf8.  v6:= "invalid dictionary: prefix not unique" @kind object;
  #L2dddfc.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2dde02.  throw v5;
  #L2dde04.  v1:= v1 - v7 @kind int;
  #L2dde06.  v6:= v6 ^< v1 @kind int;
  #L2dde08.  v6:= v6 ^& 255;
  #L2dde0c.  v7:= 1I;
  #L2dde0e.  v7:= v7 ^< v1 @kind int;
  #L2dde10.  v1:= v6;
  #L2dde12.  v2:= v6 + v7 @kind int;
  #L2dde16.  if v1 >= v2 then goto L2dde28;
  #L2dde1a.  v2:= v5.`okhttp3.internal.http2.Huffman$Node.a` @type ^`okhttp3.internal.http2.Huffman$Node`[] @kind object;
  #L2dde1e.  v2[v1]:= v0 @kind object;
  #L2dde22.  v1:= v1 + 1;
  #L2dde26.  goto L2dde12;
  #L2dde28.  return @kind void;
}
procedure `void` `buildTree`(`okhttp3.internal.http2.Huffman` v3 @kind this) @signature `Lokhttp3/internal/http2/Huffman;.buildTree:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2dde3c.  v0:= 0I;
  #L2dde3e.  v1:= `@@okhttp3.internal.http2.Huffman.CODE_LENGTHS` @type ^`byte`[] @kind object;
  #L2dde42.  v2:= length @variable v1;
  #L2dde44.  if v0 >= v2 then goto L2dde60;
  #L2dde48.  v2:= `@@okhttp3.internal.http2.Huffman.CODES` @type ^`int`[] @kind object;
  #L2dde4c.  v2:= v2[v0];
  #L2dde50.  v1:= v1[v0] @kind byte;
  #L2dde54.  call `addCode`(v3, v0, v2, v1) @signature `Lokhttp3/internal/http2/Huffman;.addCode:(IIB)V` @kind direct;
  #L2dde5a.  v0:= v0 + 1;
  #L2dde5e.  goto L2dde3e;
  #L2dde60.  return @kind void;
}
procedure `okhttp3.internal.http2.Huffman` `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2dd814.  v0:= `@@okhttp3.internal.http2.Huffman.INSTANCE` @type ^`okhttp3.internal.http2.Huffman` @kind object;
  #L2dd818.  return v0 @kind object;
}
procedure `byte`[] `a`(`okhttp3.internal.http2.Huffman` v6 @kind this, `byte`[] v7 @kind object) @signature `Lokhttp3/internal/http2/Huffman;.a:([B)[B` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2dd6f8.  v0:= new `java.io.ByteArrayOutputStream`;
  #L2dd6fc.  call `<init>`(v0) @signature `Ljava/io/ByteArrayOutputStream;.<init>:()V` @kind direct;
  #L2dd702.  v1:= v6.`okhttp3.internal.http2.Huffman.root` @type ^`okhttp3.internal.http2.Huffman$Node` @kind object;
  #L2dd706.  v2:= 0I;
  #L2dd708.  v3:= 0I;
  #L2dd70a.  v4:= 0I;
  #L2dd70c.  v5:= length @variable v7;
  #L2dd70e.  if v2 >= v5 then goto L2dd76a;
  #L2dd712.  v5:= v7[v2] @kind byte;
  #L2dd716.  v5:= v5 ^& 255;
  #L2dd71a.  v3:= v3 ^< 8;
  #L2dd71e.  v3:= v3 ^| v5 @kind int;
  #L2dd720.  v4:= v4 + 8;
  #L2dd724.  v5:= 8I;
  #L2dd728.  if v4 < v5 then goto L2dd764;
  #L2dd72c.  v5:= v4 + -8;
  #L2dd730.  v5:= v3 ^>> v5 @kind int;
  #L2dd734.  v5:= v5 ^& 255;
  #L2dd738.  v1:= v1.`okhttp3.internal.http2.Huffman$Node.a` @type ^`okhttp3.internal.http2.Huffman$Node`[] @kind object;
  #L2dd73c.  v1:= v1[v5] @kind object;
  #L2dd740.  v5:= v1.`okhttp3.internal.http2.Huffman$Node.a` @type ^`okhttp3.internal.http2.Huffman$Node`[] @kind object;
  #L2dd744.  if v5 != 0 then goto L2dd75e;
  #L2dd748.  v5:= v1.`okhttp3.internal.http2.Huffman$Node.b` @type ^`int`;
  #L2dd74c.  call `write`(v0, v5) @signature `Ljava/io/ByteArrayOutputStream;.write:(I)V` @kind virtual;
  #L2dd752.  v1:= v1.`okhttp3.internal.http2.Huffman$Node.c` @type ^`int`;
  #L2dd756.  v4:= v4 - v1 @kind int;
  #L2dd758.  v1:= v6.`okhttp3.internal.http2.Huffman.root` @type ^`okhttp3.internal.http2.Huffman$Node` @kind object;
  #L2dd75c.  goto L2dd724;
  #L2dd75e.  v4:= v4 + -8;
  #L2dd762.  goto L2dd724;
  #L2dd764.  v2:= v2 + 1;
  #L2dd768.  goto L2dd70c;
  #L2dd76a.  if v4 <= 0 then goto L2dd7aa;
  #L2dd76e.  v7:= v4 - 8;
  #L2dd772.  v7:= v3 ^< v7 @kind int;
  #L2dd776.  v7:= v7 ^& 255;
  #L2dd77a.  v1:= v1.`okhttp3.internal.http2.Huffman$Node.a` @type ^`okhttp3.internal.http2.Huffman$Node`[] @kind object;
  #L2dd77e.  v7:= v1[v7] @kind object;
  #L2dd782.  v1:= v7.`okhttp3.internal.http2.Huffman$Node.a` @type ^`okhttp3.internal.http2.Huffman$Node`[] @kind object;
  #L2dd786.  if v1 != 0 then goto L2dd7aa;
  #L2dd78a.  v1:= v7.`okhttp3.internal.http2.Huffman$Node.c` @type ^`int`;
  #L2dd78e.  if v1 <= v4 then goto L2dd794;
  #L2dd792.  goto L2dd7aa;
  #L2dd794.  v1:= v7.`okhttp3.internal.http2.Huffman$Node.b` @type ^`int`;
  #L2dd798.  call `write`(v0, v1) @signature `Ljava/io/ByteArrayOutputStream;.write:(I)V` @kind virtual;
  #L2dd79e.  v7:= v7.`okhttp3.internal.http2.Huffman$Node.c` @type ^`int`;
  #L2dd7a2.  v4:= v4 - v7 @kind int;
  #L2dd7a4.  v1:= v6.`okhttp3.internal.http2.Huffman.root` @type ^`okhttp3.internal.http2.Huffman$Node` @kind object;
  #L2dd7a8.  goto L2dd76a;
  #L2dd7aa.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L2dd7b0.  v7:= temp @kind object;
  #L2dd7b2.  return v7 @kind object;
}
procedure `void` `b`(`okhttp3.internal.http2.Huffman` v7 @kind this, `okio.ByteString` v8 @kind object, `okio.BufferedSink` v9 @kind object) @signature `Lokhttp3/internal/http2/Huffman;.b:(Lokio/ByteString;Lokio/BufferedSink;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2dde74.  v0:= 0I;
  #L2dde76.  v1:= 0L;
  #L2dde7a.  v2:= v1 @kind wide;
  #L2dde7c.  v1:= 0I;
  #L2dde7e.  call temp:= `size`(v8) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L2dde84.  v4:= temp;
  #L2dde86.  v5:= 255I;
  #L2dde8a.  if v0 >= v4 then goto L2dded0;
  #L2dde8e.  call temp:= `getByte`(v8, v0) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L2dde94.  v4:= temp;
  #L2dde96.  v4:= v4 ^& v5 @kind int;
  #L2dde98.  v5:= `@@okhttp3.internal.http2.Huffman.CODES` @type ^`int`[] @kind object;
  #L2dde9c.  v5:= v5[v4];
  #L2ddea0.  v6:= `@@okhttp3.internal.http2.Huffman.CODE_LENGTHS` @type ^`byte`[] @kind object;
  #L2ddea4.  v4:= v6[v4] @kind byte;
  #L2ddea8.  v2:= v2 ^< v4 @kind long;
  #L2ddeaa.  v5:= (`long`) v5 @kind i2l;
  #L2ddeac.  v2:= v2 ^| v5 @kind long;
  #L2ddeae.  v1:= v1 + v4 @kind int;
  #L2ddeb0.  v4:= 8I;
  #L2ddeb4.  if v1 < v4 then goto L2ddeca;
  #L2ddeb8.  v1:= v1 + -8;
  #L2ddebc.  v4:= v2 ^> v1 @kind long;
  #L2ddec0.  v5:= (`int`) v4 @kind l2i;
  #L2ddec2.  call temp:= `writeByte`(v9, v5) @signature `Lokio/BufferedSink;.writeByte:(I)Lokio/BufferedSink;` @kind interface;
  #L2ddec8.  goto L2ddeb0;
  #L2ddeca.  v0:= v0 + 1;
  #L2ddece.  goto L2dde7e;
  #L2dded0.  if v1 <= 0 then goto L2ddeea;
  #L2dded4.  v8:= v1 - 8;
  #L2dded8.  v2:= v2 ^< v8 @kind long;
  #L2ddeda.  v8:= v5 ^>> v1 @kind int;
  #L2ddede.  v0:= (`long`) v8 @kind i2l;
  #L2ddee0.  v0:= v0 ^| v2 @kind long;
  #L2ddee2.  v8:= (`int`) v0 @kind l2i;
  #L2ddee4.  call temp:= `writeByte`(v9, v8) @signature `Lokio/BufferedSink;.writeByte:(I)Lokio/BufferedSink;` @kind interface;
  #L2ddeea.  return @kind void;
}
procedure `int` `c`(`okhttp3.internal.http2.Huffman` v5 @kind this, `okio.ByteString` v6 @kind object) @signature `Lokhttp3/internal/http2/Huffman;.c:(Lokio/ByteString;)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2dd7c4.  v0:= 0L;
  #L2dd7c8.  v2:= 0I;
  #L2dd7ca.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L2dd7d0.  v3:= temp;
  #L2dd7d2.  if v2 >= v3 then goto L2dd7f4;
  #L2dd7d6.  call temp:= `getByte`(v6, v2) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L2dd7dc.  v3:= temp;
  #L2dd7de.  v3:= v3 ^& 255;
  #L2dd7e2.  v4:= `@@okhttp3.internal.http2.Huffman.CODE_LENGTHS` @type ^`byte`[] @kind object;
  #L2dd7e6.  v3:= v4[v3] @kind byte;
  #L2dd7ea.  v3:= (`long`) v3 @kind i2l;
  #L2dd7ec.  v0:= v0 + v3 @kind long;
  #L2dd7ee.  v2:= v2 + 1;
  #L2dd7f2.  goto L2dd7ca;
  #L2dd7f4.  v2:= 7L;
  #L2dd7f8.  v0:= v0 + v2 @kind long;
  #L2dd7fa.  v6:= 3I;
  #L2dd7fc.  v0:= v0 ^> v6 @kind long;
  #L2dd7fe.  v6:= (`int`) v0 @kind l2i;
  #L2dd800.  return v6;
}
