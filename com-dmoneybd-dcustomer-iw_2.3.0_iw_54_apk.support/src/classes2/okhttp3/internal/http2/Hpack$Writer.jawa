record `okhttp3.internal.http2.Hpack$Writer` @kind class @AccessFlag FINAL {
  `int` `okhttp3.internal.http2.Hpack$Writer.a` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.b` @AccessFlag ;
  `okhttp3.internal.http2.Header`[] `okhttp3.internal.http2.Hpack$Writer.c` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.d` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.e` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Hpack$Writer.f` @AccessFlag ;
  `okio.Buffer` `okhttp3.internal.http2.Hpack$Writer.out` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.useCompression` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http2.Hpack$Writer.SETTINGS_HEADER_TABLE_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Hpack$Writer.SETTINGS_HEADER_TABLE_SIZE_LIMIT` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v1 @kind this, `int` v2 , `boolean` v3 , `okio.Buffer` v4 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2d8a68.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d8a6e.  v0:= 2147483647I;
  #L2d8a74.  v1.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v0;
  #L2d8a78.  v0:= 8I;
  #L2d8a7c.  v0:= new `okhttp3.internal.http2.Header`[v0];
  #L2d8a80.  v1.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`okhttp3.internal.http2.Header`[] := v0 @kind object;
  #L2d8a84.  v0:= length @variable v0;
  #L2d8a86.  v0:= v0 + -1;
  #L2d8a8a.  v1.`okhttp3.internal.http2.Hpack$Writer.d` @type ^`int` := v0;
  #L2d8a8e.  v0:= 0I;
  #L2d8a90.  v1.`okhttp3.internal.http2.Hpack$Writer.e` @type ^`int` := v0;
  #L2d8a94.  v1.`okhttp3.internal.http2.Hpack$Writer.f` @type ^`int` := v0;
  #L2d8a98.  v1.`okhttp3.internal.http2.Hpack$Writer.a` @type ^`int` := v2;
  #L2d8a9c.  v1.`okhttp3.internal.http2.Hpack$Writer.b` @type ^`int` := v2;
  #L2d8aa0.  v1.`okhttp3.internal.http2.Hpack$Writer.useCompression` @type ^`boolean` := v3 @kind boolean;
  #L2d8aa4.  v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` := v4 @kind object;
  #L2d8aa8.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this, `okio.Buffer` v3 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(Lokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2d8abc.  v0:= 4096I;
  #L2d8ac0.  v1:= 1I;
  #L2d8ac2.  call `<init>`(v2, v0, v1, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;)V` @kind direct;
  #L2d8ac8.  return @kind void;
}
procedure `void` `adjustDynamicTableByteCount`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.adjustDynamicTableByteCount:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2d8adc.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.b` @type ^`int`;
  #L2d8ae0.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.f` @type ^`int`;
  #L2d8ae4.  if v0 >= v1 then goto L2d8afc;
  #L2d8ae8.  if v0 != 0 then goto L2d8af4;
  #L2d8aec.  call `clearDynamicTable`(v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @kind direct;
  #L2d8af2.  goto L2d8afc;
  #L2d8af4.  v1:= v1 - v0 @kind int;
  #L2d8af6.  call temp:= `evictToRecoverBytes`(v2, v1) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @kind direct;
  #L2d8afc.  return @kind void;
}
procedure `void` `clearDynamicTable`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2d8b10.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8b14.  v1:= 0I;
  #L2d8b16.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L2d8b1c.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8b20.  v0:= length @variable v0;
  #L2d8b22.  v0:= v0 + -1;
  #L2d8b26.  v2.`okhttp3.internal.http2.Hpack$Writer.d` @type ^`int` := v0;
  #L2d8b2a.  v0:= 0I;
  #L2d8b2c.  v2.`okhttp3.internal.http2.Hpack$Writer.e` @type ^`int` := v0;
  #L2d8b30.  v2.`okhttp3.internal.http2.Hpack$Writer.f` @type ^`int` := v0;
  #L2d8b34.  return @kind void;
}
procedure `int` `evictToRecoverBytes`(`okhttp3.internal.http2.Hpack$Writer` v4 @kind this, `int` v5 ) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2d89c8.  v0:= 0I;
  #L2d89ca.  if v5 <= 0 then goto L2d8a56;
  #L2d89ce.  v1:= v4.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d89d2.  v1:= length @variable v1;
  #L2d89d4.  v1:= v1 + -1;
  #L2d89d8.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.d` @type ^`int`;
  #L2d89dc.  if v1 < v2 then goto L2d8a1a;
  #L2d89e0.  if v5 <= 0 then goto L2d8a1a;
  #L2d89e4.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d89e8.  v3:= v2[v1] @kind object;
  #L2d89ec.  v3:= v3.`okhttp3.internal.http2.Header.a` @type ^`int`;
  #L2d89f0.  v5:= v5 - v3 @kind int;
  #L2d89f2.  v3:= v4.`okhttp3.internal.http2.Hpack$Writer.f` @type ^`int`;
  #L2d89f6.  v2:= v2[v1] @kind object;
  #L2d89fa.  v2:= v2.`okhttp3.internal.http2.Header.a` @type ^`int`;
  #L2d89fe.  v3:= v3 - v2 @kind int;
  #L2d8a00.  v4.`okhttp3.internal.http2.Hpack$Writer.f` @type ^`int` := v3;
  #L2d8a04.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.e` @type ^`int`;
  #L2d8a08.  v2:= v2 + -1;
  #L2d8a0c.  v4.`okhttp3.internal.http2.Hpack$Writer.e` @type ^`int` := v2;
  #L2d8a10.  v0:= v0 + 1;
  #L2d8a14.  v1:= v1 + -1;
  #L2d8a18.  goto L2d89d8;
  #L2d8a1a.  v5:= v4.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8a1e.  v1:= v2 + 1;
  #L2d8a22.  v2:= v2 + 1;
  #L2d8a26.  v2:= v2 + v0 @kind int;
  #L2d8a28.  v3:= v4.`okhttp3.internal.http2.Hpack$Writer.e` @type ^`int`;
  #L2d8a2c.  call `arraycopy`(v5, v1, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d8a32.  v5:= v4.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8a36.  v1:= v4.`okhttp3.internal.http2.Hpack$Writer.d` @type ^`int`;
  #L2d8a3a.  v2:= v1 + 1;
  #L2d8a3e.  v1:= v1 + 1;
  #L2d8a42.  v1:= v1 + v0 @kind int;
  #L2d8a44.  v3:= 0I;
  #L2d8a46.  call `fill`(v5, v2, v1, v3) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L2d8a4c.  v5:= v4.`okhttp3.internal.http2.Hpack$Writer.d` @type ^`int`;
  #L2d8a50.  v5:= v5 + v0 @kind int;
  #L2d8a52.  v4.`okhttp3.internal.http2.Hpack$Writer.d` @type ^`int` := v5;
  #L2d8a56.  return v0;
}
procedure `void` `insertIntoDynamicTable`(`okhttp3.internal.http2.Hpack$Writer` v6 @kind this, `okhttp3.internal.http2.Header` v7 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2d8b48.  v0:= v7.`okhttp3.internal.http2.Header.a` @type ^`int`;
  #L2d8b4c.  v1:= v6.`okhttp3.internal.http2.Hpack$Writer.b` @type ^`int`;
  #L2d8b50.  if v0 <= v1 then goto L2d8b5c;
  #L2d8b54.  call `clearDynamicTable`(v6) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @kind direct;
  #L2d8b5a.  return @kind void;
  #L2d8b5c.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.f` @type ^`int`;
  #L2d8b60.  v2:= v2 + v0 @kind int;
  #L2d8b62.  v2:= v2 - v1 @kind int;
  #L2d8b64.  call temp:= `evictToRecoverBytes`(v6, v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @kind direct;
  #L2d8b6a.  v1:= v6.`okhttp3.internal.http2.Hpack$Writer.e` @type ^`int`;
  #L2d8b6e.  v1:= v1 + 1;
  #L2d8b72.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8b76.  v3:= length @variable v2;
  #L2d8b78.  if v1 <= v3 then goto L2d8ba4;
  #L2d8b7c.  v1:= length @variable v2;
  #L2d8b7e.  v1:= v1 * 2;
  #L2d8b82.  v1:= new `okhttp3.internal.http2.Header`[v1];
  #L2d8b86.  v3:= 0I;
  #L2d8b88.  v4:= length @variable v2;
  #L2d8b8a.  v5:= length @variable v2;
  #L2d8b8c.  call `arraycopy`(v2, v3, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d8b92.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8b96.  v2:= length @variable v2;
  #L2d8b98.  v2:= v2 + -1;
  #L2d8b9c.  v6.`okhttp3.internal.http2.Hpack$Writer.d` @type ^`int` := v2;
  #L2d8ba0.  v6.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`okhttp3.internal.http2.Header`[] := v1 @kind object;
  #L2d8ba4.  v1:= v6.`okhttp3.internal.http2.Hpack$Writer.d` @type ^`int`;
  #L2d8ba8.  v2:= v1 + -1;
  #L2d8bac.  v6.`okhttp3.internal.http2.Hpack$Writer.d` @type ^`int` := v2;
  #L2d8bb0.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8bb4.  v2[v1]:= v7 @kind object;
  #L2d8bb8.  v7:= v6.`okhttp3.internal.http2.Hpack$Writer.e` @type ^`int`;
  #L2d8bbc.  v7:= v7 + 1;
  #L2d8bc0.  v6.`okhttp3.internal.http2.Hpack$Writer.e` @type ^`int` := v7;
  #L2d8bc4.  v7:= v6.`okhttp3.internal.http2.Hpack$Writer.f` @type ^`int`;
  #L2d8bc8.  v7:= v7 + v0 @kind int;
  #L2d8bca.  v6.`okhttp3.internal.http2.Hpack$Writer.f` @type ^`int` := v7;
  #L2d8bce.  return @kind void;
}
procedure `void` `a`(`okhttp3.internal.http2.Hpack$Writer` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Hpack$Writer;.a:(I)V` @AccessFlag  {
    temp;
    v0;

  #L2d8be0.  v1.`okhttp3.internal.http2.Hpack$Writer.a` @type ^`int` := v2;
  #L2d8be4.  v0:= 16384I;
  #L2d8be8.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2d8bee.  v2:= temp;
  #L2d8bf0.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.b` @type ^`int`;
  #L2d8bf4.  if v0 != v2 then goto L2d8bfa;
  #L2d8bf8.  return @kind void;
  #L2d8bfa.  if v2 >= v0 then goto L2d8c0e;
  #L2d8bfe.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L2d8c02.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2d8c08.  v0:= temp;
  #L2d8c0a.  v1.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v0;
  #L2d8c0e.  v0:= 1I;
  #L2d8c10.  v1.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` := v0 @kind boolean;
  #L2d8c14.  v1.`okhttp3.internal.http2.Hpack$Writer.b` @type ^`int` := v2;
  #L2d8c18.  call `adjustDynamicTableByteCount`(v1) @signature `Lokhttp3/internal/http2/Hpack$Writer;.adjustDynamicTableByteCount:()V` @kind direct;
  #L2d8c1e.  return @kind void;
}
procedure `void` `b`(`okhttp3.internal.http2.Hpack$Writer` v3 @kind this, `okio.ByteString` v4 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.b:(Lokio/ByteString;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2d8c30.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.useCompression` @type ^`boolean` @kind boolean;
  #L2d8c34.  v1:= 127I;
  #L2d8c38.  if v0 == 0 then goto L2d8c86;
  #L2d8c3c.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L2d8c42.  v0:= temp @kind object;
  #L2d8c44.  call temp:= `c`(v0, v4) @signature `Lokhttp3/internal/http2/Huffman;.c:(Lokio/ByteString;)I` @kind virtual;
  #L2d8c4a.  v0:= temp;
  #L2d8c4c.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L2d8c52.  v2:= temp;
  #L2d8c54.  if v0 >= v2 then goto L2d8c86;
  #L2d8c58.  v0:= new `okio.Buffer`;
  #L2d8c5c.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L2d8c62.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L2d8c68.  v2:= temp @kind object;
  #L2d8c6a.  call `b`(v2, v4, v0) @signature `Lokhttp3/internal/http2/Huffman;.b:(Lokio/ByteString;Lokio/BufferedSink;)V` @kind virtual;
  #L2d8c70.  call temp:= `readByteString`(v0) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L2d8c76.  v4:= temp @kind object;
  #L2d8c78.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L2d8c7e.  v0:= temp;
  #L2d8c80.  v2:= 128I;
  #L2d8c84.  goto L2d8c90;
  #L2d8c86.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L2d8c8c.  v0:= temp;
  #L2d8c8e.  v2:= 0I;
  #L2d8c90.  call `d`(v3, v0, v1, v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.d:(III)V` @kind virtual;
  #L2d8c96.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L2d8c9a.  call temp:= `write`(v0, v4) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L2d8ca0.  return @kind void;
}
procedure `void` `c`(`okhttp3.internal.http2.Hpack$Writer` v13 @kind this, `java.util.List` v14 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.c:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L2d8cb4.  v0:= v13.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` @kind boolean;
  #L2d8cb8.  v1:= 0I;
  #L2d8cba.  if v0 == 0 then goto L2d8cf0;
  #L2d8cbe.  v0:= v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L2d8cc2.  v2:= v13.`okhttp3.internal.http2.Hpack$Writer.b` @type ^`int`;
  #L2d8cc6.  v3:= 32I;
  #L2d8cca.  v4:= 31I;
  #L2d8cce.  if v0 >= v2 then goto L2d8cd8;
  #L2d8cd2.  call `d`(v13, v0, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.d:(III)V` @kind virtual;
  #L2d8cd8.  v13.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` := v1 @kind boolean;
  #L2d8cdc.  v0:= 2147483647I;
  #L2d8ce2.  v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v0;
  #L2d8ce6.  v0:= v13.`okhttp3.internal.http2.Hpack$Writer.b` @type ^`int`;
  #L2d8cea.  call `d`(v13, v0, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.d:(III)V` @kind virtual;
  #L2d8cf0.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2d8cf6.  v0:= temp;
  #L2d8cf8.  v2:= 0I;
  #L2d8cfa.  if v2 >= v0 then goto L2d8e80;
  #L2d8cfe.  call temp:= `get`(v14, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2d8d04.  v3:= temp @kind object;
  #L2d8d06.  v3:= (`okhttp3.internal.http2.Header`) v3 @kind object;
  #L2d8d0a.  v4:= v3.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L2d8d0e.  call temp:= `toAsciiLowercase`(v4) @signature `Lokio/ByteString;.toAsciiLowercase:()Lokio/ByteString;` @kind virtual;
  #L2d8d14.  v4:= temp @kind object;
  #L2d8d16.  v5:= v3.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L2d8d1a.  v6:= `@@okhttp3.internal.http2.Hpack.b` @type ^`java.util.Map` @kind object;
  #L2d8d1e.  call temp:= `get`(v6, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2d8d24.  v6:= temp @kind object;
  #L2d8d26.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L2d8d2a.  v7:= -1I;
  #L2d8d2c.  v8:= 1I;
  #L2d8d2e.  if v6 == 0 then goto L2d8d8e;
  #L2d8d32.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2d8d38.  v6:= temp;
  #L2d8d3a.  v6:= v6 + v8 @kind int;
  #L2d8d3c.  if v6 <= v8 then goto L2d8d88;
  #L2d8d40.  v9:= 8I;
  #L2d8d44.  if v6 >= v9 then goto L2d8d88;
  #L2d8d48.  v9:= `@@okhttp3.internal.http2.Hpack.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8d4c.  v10:= v6 + -1;
  #L2d8d50.  v10:= v9[v10] @kind object;
  #L2d8d54.  v10:= v10.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L2d8d58.  call temp:= `equal`(v10, v5) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2d8d5e.  v10:= temp;
  #L2d8d60.  if v10 == 0 then goto L2d8d68;
  #L2d8d64.  v9:= v6;
  #L2d8d66.  goto L2d8d92;
  #L2d8d68.  v9:= v9[v6] @kind object;
  #L2d8d6c.  v9:= v9.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L2d8d70.  call temp:= `equal`(v9, v5) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2d8d76.  v9:= temp;
  #L2d8d78.  if v9 == 0 then goto L2d8d88;
  #L2d8d7c.  v9:= v6 + 1;
  #L2d8d80.  v12:= v9;
  #L2d8d82.  v9:= v6;
  #L2d8d84.  v6:= v12;
  #L2d8d86.  goto L2d8d92;
  #L2d8d88.  v9:= v6;
  #L2d8d8a.  v6:= -1I;
  #L2d8d8c.  goto L2d8d92;
  #L2d8d8e.  v6:= -1I;
  #L2d8d90.  v9:= -1I;
  #L2d8d92.  if v6 != v7 then goto L2d8e00;
  #L2d8d96.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.d` @type ^`int`;
  #L2d8d9a.  v10:= v10 + v8 @kind int;
  #L2d8d9c.  v8:= v13.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8da0.  v8:= length @variable v8;
  #L2d8da2.  if v10 >= v8 then goto L2d8e00;
  #L2d8da6.  v11:= v13.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8daa.  v11:= v11[v10] @kind object;
  #L2d8dae.  v11:= v11.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L2d8db2.  call temp:= `equal`(v11, v4) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2d8db8.  v11:= temp;
  #L2d8dba.  if v11 == 0 then goto L2d8dfa;
  #L2d8dbe.  v11:= v13.`okhttp3.internal.http2.Hpack$Writer.c` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8dc2.  v11:= v11[v10] @kind object;
  #L2d8dc6.  v11:= v11.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L2d8dca.  call temp:= `equal`(v11, v5) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2d8dd0.  v11:= temp;
  #L2d8dd2.  if v11 == 0 then goto L2d8de6;
  #L2d8dd6.  v6:= v13.`okhttp3.internal.http2.Hpack$Writer.d` @type ^`int`;
  #L2d8dda.  v10:= v10 - v6 @kind int;
  #L2d8ddc.  v6:= `@@okhttp3.internal.http2.Hpack.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8de0.  v6:= length @variable v6;
  #L2d8de2.  v6:= v6 + v10 @kind int;
  #L2d8de4.  goto L2d8e00;
  #L2d8de6.  if v9 != v7 then goto L2d8dfa;
  #L2d8dea.  v9:= v13.`okhttp3.internal.http2.Hpack$Writer.d` @type ^`int`;
  #L2d8dee.  v9:= v10 - v9 @kind int;
  #L2d8df2.  v11:= `@@okhttp3.internal.http2.Hpack.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8df6.  v11:= length @variable v11;
  #L2d8df8.  v9:= v9 + v11 @kind int;
  #L2d8dfa.  v10:= v10 + 1;
  #L2d8dfe.  goto L2d8da2;
  #L2d8e00.  if v6 == v7 then goto L2d8e14;
  #L2d8e04.  v3:= 127I;
  #L2d8e08.  v4:= 128I;
  #L2d8e0c.  call `d`(v13, v6, v3, v4) @signature `Lokhttp3/internal/http2/Hpack$Writer;.d:(III)V` @kind virtual;
  #L2d8e12.  goto L2d8e78;
  #L2d8e14.  v6:= 64I;
  #L2d8e18.  if v9 != v7 then goto L2d8e3a;
  #L2d8e1c.  v7:= v13.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L2d8e20.  call temp:= `writeByte`(v7, v6) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2d8e26.  call `b`(v13, v4) @signature `Lokhttp3/internal/http2/Hpack$Writer;.b:(Lokio/ByteString;)V` @kind virtual;
  #L2d8e2c.  call `b`(v13, v5) @signature `Lokhttp3/internal/http2/Hpack$Writer;.b:(Lokio/ByteString;)V` @kind virtual;
  #L2d8e32.  call `insertIntoDynamicTable`(v13, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @kind direct;
  #L2d8e38.  goto L2d8e78;
  #L2d8e3a.  v7:= `@@okhttp3.internal.http2.Header.PSEUDO_PREFIX` @type ^`okio.ByteString` @kind object;
  #L2d8e3e.  call temp:= `startsWith`(v4, v7) @signature `Lokio/ByteString;.startsWith:(Lokio/ByteString;)Z` @kind virtual;
  #L2d8e44.  v7:= temp;
  #L2d8e46.  if v7 == 0 then goto L2d8e6c;
  #L2d8e4a.  v7:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L2d8e4e.  call temp:= `equals`(v7, v4) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2d8e54.  v4:= temp;
  #L2d8e56.  if v4 != 0 then goto L2d8e6c;
  #L2d8e5a.  v3:= 15I;
  #L2d8e5e.  call `d`(v13, v9, v3, v1) @signature `Lokhttp3/internal/http2/Hpack$Writer;.d:(III)V` @kind virtual;
  #L2d8e64.  call `b`(v13, v5) @signature `Lokhttp3/internal/http2/Hpack$Writer;.b:(Lokio/ByteString;)V` @kind virtual;
  #L2d8e6a.  goto L2d8e78;
  #L2d8e6c.  v4:= 63I;
  #L2d8e70.  call `d`(v13, v9, v4, v6) @signature `Lokhttp3/internal/http2/Hpack$Writer;.d:(III)V` @kind virtual;
  #L2d8e76.  goto L2d8e2c;
  #L2d8e78.  v2:= v2 + 1;
  #L2d8e7c.  goto L2d8cfa;
  #L2d8e80.  return @kind void;
}
procedure `void` `d`(`okhttp3.internal.http2.Hpack$Writer` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lokhttp3/internal/http2/Hpack$Writer;.d:(III)V` @AccessFlag  {
    temp;
    v0;

  #L2d8e94.  if v2 >= v3 then goto L2d8ea6;
  #L2d8e98.  v3:= v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L2d8e9c.  v2:= v2 ^| v4 @kind int;
  #L2d8e9e.  call temp:= `writeByte`(v3, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2d8ea4.  return @kind void;
  #L2d8ea6.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L2d8eaa.  v4:= v4 ^| v3 @kind int;
  #L2d8eac.  call temp:= `writeByte`(v0, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2d8eb2.  v2:= v2 - v3 @kind int;
  #L2d8eb4.  v3:= 128I;
  #L2d8eb8.  if v2 < v3 then goto L2d8ed2;
  #L2d8ebc.  v4:= v2 ^& 127;
  #L2d8ec0.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L2d8ec4.  v3:= v3 ^| v4 @kind int;
  #L2d8ec6.  call temp:= `writeByte`(v0, v3) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2d8ecc.  v2:= v2 ^>> 7;
  #L2d8ed0.  goto L2d8eb4;
  #L2d8ed2.  v3:= v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L2d8ed6.  goto L2d8e9e;
}
