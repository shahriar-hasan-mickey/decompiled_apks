record `okhttp3.internal.cache.CacheStrategy$Factory` @kind class @AccessFlag PUBLIC {
  `long` `okhttp3.internal.cache.CacheStrategy$Factory.a` @AccessFlag FINAL;
  `int` `okhttp3.internal.cache.CacheStrategy$Factory.ageSeconds` @AccessFlag PRIVATE;
  `okhttp3.Request` `okhttp3.internal.cache.CacheStrategy$Factory.b` @AccessFlag FINAL;
  `okhttp3.Response` `okhttp3.internal.cache.CacheStrategy$Factory.c` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.internal.cache.CacheStrategy$Factory.etag` @AccessFlag PRIVATE;
  `java.util.Date` `okhttp3.internal.cache.CacheStrategy$Factory.expires` @AccessFlag PRIVATE;
  `java.util.Date` `okhttp3.internal.cache.CacheStrategy$Factory.lastModified` @AccessFlag PRIVATE;
  `java.lang.String` `okhttp3.internal.cache.CacheStrategy$Factory.lastModifiedString` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.cache.CacheStrategy$Factory.receivedResponseMillis` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.cache.CacheStrategy$Factory.sentRequestMillis` @AccessFlag PRIVATE;
  `java.util.Date` `okhttp3.internal.cache.CacheStrategy$Factory.servedDate` @AccessFlag PRIVATE;
  `java.lang.String` `okhttp3.internal.cache.CacheStrategy$Factory.servedDateString` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.internal.cache.CacheStrategy$Factory` v3 @kind this, `long` v4 , `okhttp3.Request` v6 @kind object, `okhttp3.Response` v7 @kind object) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.<init>:(JLokhttp3/Request;Lokhttp3/Response;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2d25f4.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d25fa.  v0:= -1I;
  #L2d25fc.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.ageSeconds` @type ^`int` := v0;
  #L2d2600.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.a` @type ^`long` := v4 @kind wide;
  #L2d2604.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.b` @type ^`okhttp3.Request` := v6 @kind object;
  #L2d2608.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.c` @type ^`okhttp3.Response` := v7 @kind object;
  #L2d260c.  if v7 == 0 then goto L2d26e8;
  #L2d2610.  call temp:= `sentRequestAtMillis`(v7) @signature `Lokhttp3/Response;.sentRequestAtMillis:()J` @kind virtual;
  #L2d2616.  v4:= temp @kind wide;
  #L2d2618.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.sentRequestMillis` @type ^`long` := v4 @kind wide;
  #L2d261c.  call temp:= `receivedResponseAtMillis`(v7) @signature `Lokhttp3/Response;.receivedResponseAtMillis:()J` @kind virtual;
  #L2d2622.  v4:= temp @kind wide;
  #L2d2624.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.receivedResponseMillis` @type ^`long` := v4 @kind wide;
  #L2d2628.  call temp:= `headers`(v7) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L2d262e.  v4:= temp @kind object;
  #L2d2630.  v5:= 0I;
  #L2d2632.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L2d2638.  v6:= temp;
  #L2d263a.  if v5 >= v6 then goto L2d26e8;
  #L2d263e.  call temp:= `name`(v4, v5) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L2d2644.  v7:= temp @kind object;
  #L2d2646.  call temp:= `value`(v4, v5) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L2d264c.  v1:= temp @kind object;
  #L2d264e.  v2:= "Date" @kind object;
  #L2d2652.  call temp:= `equalsIgnoreCase`(v2, v7) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2d2658.  v2:= temp;
  #L2d265a.  if v2 == 0 then goto L2d2670;
  #L2d265e.  call temp:= `parse`(v1) @signature `Lokhttp3/internal/http/HttpDate;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L2d2664.  v7:= temp @kind object;
  #L2d2666.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.servedDate` @type ^`java.util.Date` := v7 @kind object;
  #L2d266a.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.servedDateString` @type ^`java.lang.String` := v1 @kind object;
  #L2d266e.  goto L2d26e2;
  #L2d2670.  v2:= "Expires" @kind object;
  #L2d2674.  call temp:= `equalsIgnoreCase`(v2, v7) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2d267a.  v2:= temp;
  #L2d267c.  if v2 == 0 then goto L2d268e;
  #L2d2680.  call temp:= `parse`(v1) @signature `Lokhttp3/internal/http/HttpDate;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L2d2686.  v7:= temp @kind object;
  #L2d2688.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.expires` @type ^`java.util.Date` := v7 @kind object;
  #L2d268c.  goto L2d26e2;
  #L2d268e.  v2:= "Last-Modified" @kind object;
  #L2d2692.  call temp:= `equalsIgnoreCase`(v2, v7) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2d2698.  v2:= temp;
  #L2d269a.  if v2 == 0 then goto L2d26b0;
  #L2d269e.  call temp:= `parse`(v1) @signature `Lokhttp3/internal/http/HttpDate;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L2d26a4.  v7:= temp @kind object;
  #L2d26a6.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.lastModified` @type ^`java.util.Date` := v7 @kind object;
  #L2d26aa.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.lastModifiedString` @type ^`java.lang.String` := v1 @kind object;
  #L2d26ae.  goto L2d26e2;
  #L2d26b0.  v2:= "ETag" @kind object;
  #L2d26b4.  call temp:= `equalsIgnoreCase`(v2, v7) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2d26ba.  v2:= temp;
  #L2d26bc.  if v2 == 0 then goto L2d26c6;
  #L2d26c0.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.etag` @type ^`java.lang.String` := v1 @kind object;
  #L2d26c4.  goto L2d26e2;
  #L2d26c6.  v2:= "Age" @kind object;
  #L2d26ca.  call temp:= `equalsIgnoreCase`(v2, v7) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2d26d0.  v7:= temp;
  #L2d26d2.  if v7 == 0 then goto L2d26e2;
  #L2d26d6.  call temp:= `parseSeconds`(v1, v0) @signature `Lokhttp3/internal/http/HttpHeaders;.parseSeconds:(Ljava/lang/String;I)I` @kind static;
  #L2d26dc.  v7:= temp;
  #L2d26de.  v3.`okhttp3.internal.cache.CacheStrategy$Factory.ageSeconds` @type ^`int` := v7;
  #L2d26e2.  v5:= v5 + 1;
  #L2d26e6.  goto L2d263a;
  #L2d26e8.  return @kind void;
}
procedure `long` `cacheResponseAge`(`okhttp3.internal.cache.CacheStrategy$Factory` v9 @kind this) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.cacheResponseAge:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2d2208.  v0:= v9.`okhttp3.internal.cache.CacheStrategy$Factory.servedDate` @type ^`java.util.Date` @kind object;
  #L2d220c.  v1:= 0L;
  #L2d2210.  if v0 == 0 then goto L2d222a;
  #L2d2214.  v3:= v9.`okhttp3.internal.cache.CacheStrategy$Factory.receivedResponseMillis` @type ^`long` @kind wide;
  #L2d2218.  call temp:= `getTime`(v0) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L2d221e.  v5:= temp @kind wide;
  #L2d2220.  v3:= v3 - v5 @kind long;
  #L2d2222.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L2d2228.  v1:= temp @kind wide;
  #L2d222a.  v0:= v9.`okhttp3.internal.cache.CacheStrategy$Factory.ageSeconds` @type ^`int`;
  #L2d222e.  v3:= -1I;
  #L2d2230.  if v0 == v3 then goto L2d224a;
  #L2d2234.  v3:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2d2238.  v4:= (`long`) v0 @kind i2l;
  #L2d223a.  call temp:= `toMillis`(v3, v4) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L2d2240.  v3:= temp @kind wide;
  #L2d2242.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L2d2248.  v1:= temp @kind wide;
  #L2d224a.  v3:= v9.`okhttp3.internal.cache.CacheStrategy$Factory.receivedResponseMillis` @type ^`long` @kind wide;
  #L2d224e.  v5:= v9.`okhttp3.internal.cache.CacheStrategy$Factory.sentRequestMillis` @type ^`long` @kind wide;
  #L2d2252.  v5:= v3 - v5 @kind long;
  #L2d2256.  v7:= v9.`okhttp3.internal.cache.CacheStrategy$Factory.a` @type ^`long` @kind wide;
  #L2d225a.  v7:= v7 - v3 @kind long;
  #L2d225c.  v1:= v1 + v5 @kind long;
  #L2d225e.  v1:= v1 + v7 @kind long;
  #L2d2260.  return v1 @kind wide;
}
procedure `long` `computeFreshnessLifetime`(`okhttp3.internal.cache.CacheStrategy$Factory` v7 @kind this) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.computeFreshnessLifetime:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2d2274.  v0:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.c` @type ^`okhttp3.Response` @kind object;
  #L2d2278.  call temp:= `cacheControl`(v0) @signature `Lokhttp3/Response;.cacheControl:()Lokhttp3/CacheControl;` @kind virtual;
  #L2d227e.  v0:= temp @kind object;
  #L2d2280.  call temp:= `maxAgeSeconds`(v0) @signature `Lokhttp3/CacheControl;.maxAgeSeconds:()I` @kind virtual;
  #L2d2286.  v1:= temp;
  #L2d2288.  v2:= -1I;
  #L2d228a.  if v1 == v2 then goto L2d22a6;
  #L2d228e.  v1:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2d2292.  call temp:= `maxAgeSeconds`(v0) @signature `Lokhttp3/CacheControl;.maxAgeSeconds:()I` @kind virtual;
  #L2d2298.  v0:= temp;
  #L2d229a.  v2:= (`long`) v0 @kind i2l;
  #L2d229c.  call temp:= `toMillis`(v1, v2) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L2d22a2.  v0:= temp @kind wide;
  #L2d22a4.  return v0 @kind wide;
  #L2d22a6.  v0:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.expires` @type ^`java.util.Date` @kind object;
  #L2d22aa.  v1:= 0L;
  #L2d22ae.  if v0 == 0 then goto L2d22e2;
  #L2d22b2.  v0:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.servedDate` @type ^`java.util.Date` @kind object;
  #L2d22b6.  if v0 == 0 then goto L2d22c4;
  #L2d22ba.  call temp:= `getTime`(v0) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L2d22c0.  v3:= temp @kind wide;
  #L2d22c2.  goto L2d22c8;
  #L2d22c4.  v3:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.receivedResponseMillis` @type ^`long` @kind wide;
  #L2d22c8.  v0:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.expires` @type ^`java.util.Date` @kind object;
  #L2d22cc.  call temp:= `getTime`(v0) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L2d22d2.  v5:= temp @kind wide;
  #L2d22d4.  v5:= v5 - v3 @kind long;
  #L2d22d6.  v0:= lcmp(v5, v1);
  #L2d22da.  if v0 <= 0 then goto L2d22e0;
  #L2d22de.  v1:= v5 @kind wide;
  #L2d22e0.  return v1 @kind wide;
  #L2d22e2.  v0:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.lastModified` @type ^`java.util.Date` @kind object;
  #L2d22e6.  if v0 == 0 then goto L2d233e;
  #L2d22ea.  v0:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.c` @type ^`okhttp3.Response` @kind object;
  #L2d22ee.  call temp:= `request`(v0) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2d22f4.  v0:= temp @kind object;
  #L2d22f6.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2d22fc.  v0:= temp @kind object;
  #L2d22fe.  call temp:= `query`(v0) @signature `Lokhttp3/HttpUrl;.query:()Ljava/lang/String;` @kind virtual;
  #L2d2304.  v0:= temp @kind object;
  #L2d2306.  if v0 != 0 then goto L2d233e;
  #L2d230a.  v0:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.servedDate` @type ^`java.util.Date` @kind object;
  #L2d230e.  if v0 == 0 then goto L2d231c;
  #L2d2312.  call temp:= `getTime`(v0) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L2d2318.  v3:= temp @kind wide;
  #L2d231a.  goto L2d2320;
  #L2d231c.  v3:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.sentRequestMillis` @type ^`long` @kind wide;
  #L2d2320.  v0:= v7.`okhttp3.internal.cache.CacheStrategy$Factory.lastModified` @type ^`java.util.Date` @kind object;
  #L2d2324.  call temp:= `getTime`(v0) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L2d232a.  v5:= temp @kind wide;
  #L2d232c.  v3:= v3 - v5 @kind long;
  #L2d232e.  v0:= lcmp(v3, v1);
  #L2d2332.  if v0 <= 0 then goto L2d233e;
  #L2d2336.  v0:= 10L;
  #L2d233a.  v1:= v3 / v0 @kind long;
  #L2d233e.  return v1 @kind wide;
}
procedure `okhttp3.internal.cache.CacheStrategy` `getCandidate`(`okhttp3.internal.cache.CacheStrategy$Factory` v13 @kind this) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.getCandidate:()Lokhttp3/internal/cache/CacheStrategy;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L2d2398.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.c` @type ^`okhttp3.Response` @kind object;
  #L2d239c.  v1:= 0I;
  #L2d239e.  if v0 != 0 then goto L2d23b2;
  #L2d23a2.  v0:= new `okhttp3.internal.cache.CacheStrategy`;
  #L2d23a6.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.b` @type ^`okhttp3.Request` @kind object;
  #L2d23aa.  call `<init>`(v0, v2, v1) @signature `Lokhttp3/internal/cache/CacheStrategy;.<init>:(Lokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L2d23b0.  return v0 @kind object;
  #L2d23b2.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.b` @type ^`okhttp3.Request` @kind object;
  #L2d23b6.  call temp:= `isHttps`(v0) @signature `Lokhttp3/Request;.isHttps:()Z` @kind virtual;
  #L2d23bc.  v0:= temp;
  #L2d23be.  if v0 == 0 then goto L2d23e2;
  #L2d23c2.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.c` @type ^`okhttp3.Response` @kind object;
  #L2d23c6.  call temp:= `handshake`(v0) @signature `Lokhttp3/Response;.handshake:()Lokhttp3/Handshake;` @kind virtual;
  #L2d23cc.  v0:= temp @kind object;
  #L2d23ce.  if v0 != 0 then goto L2d23e2;
  #L2d23d2.  v0:= new `okhttp3.internal.cache.CacheStrategy`;
  #L2d23d6.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.b` @type ^`okhttp3.Request` @kind object;
  #L2d23da.  call `<init>`(v0, v2, v1) @signature `Lokhttp3/internal/cache/CacheStrategy;.<init>:(Lokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L2d23e0.  return v0 @kind object;
  #L2d23e2.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.c` @type ^`okhttp3.Response` @kind object;
  #L2d23e6.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.b` @type ^`okhttp3.Request` @kind object;
  #L2d23ea.  call temp:= `isCacheable`(v0, v2) @signature `Lokhttp3/internal/cache/CacheStrategy;.isCacheable:(Lokhttp3/Response;Lokhttp3/Request;)Z` @kind static;
  #L2d23f0.  v0:= temp;
  #L2d23f2.  if v0 != 0 then goto L2d2406;
  #L2d23f6.  v0:= new `okhttp3.internal.cache.CacheStrategy`;
  #L2d23fa.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.b` @type ^`okhttp3.Request` @kind object;
  #L2d23fe.  call `<init>`(v0, v2, v1) @signature `Lokhttp3/internal/cache/CacheStrategy;.<init>:(Lokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L2d2404.  return v0 @kind object;
  #L2d2406.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.b` @type ^`okhttp3.Request` @kind object;
  #L2d240a.  call temp:= `cacheControl`(v0) @signature `Lokhttp3/Request;.cacheControl:()Lokhttp3/CacheControl;` @kind virtual;
  #L2d2410.  v0:= temp @kind object;
  #L2d2412.  call temp:= `noCache`(v0) @signature `Lokhttp3/CacheControl;.noCache:()Z` @kind virtual;
  #L2d2418.  v2:= temp;
  #L2d241a.  if v2 != 0 then goto L2d25d2;
  #L2d241e.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.b` @type ^`okhttp3.Request` @kind object;
  #L2d2422.  call temp:= `hasConditions`(v2) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.hasConditions:(Lokhttp3/Request;)Z` @kind static;
  #L2d2428.  v2:= temp;
  #L2d242a.  if v2 == 0 then goto L2d2432;
  #L2d242e.  goto L2d25d2;
  #L2d2432.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.c` @type ^`okhttp3.Response` @kind object;
  #L2d2436.  call temp:= `cacheControl`(v2) @signature `Lokhttp3/Response;.cacheControl:()Lokhttp3/CacheControl;` @kind virtual;
  #L2d243c.  v2:= temp @kind object;
  #L2d243e.  call temp:= `cacheResponseAge`(v13) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.cacheResponseAge:()J` @kind direct;
  #L2d2444.  v3:= temp @kind wide;
  #L2d2446.  call temp:= `computeFreshnessLifetime`(v13) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.computeFreshnessLifetime:()J` @kind direct;
  #L2d244c.  v5:= temp @kind wide;
  #L2d244e.  call temp:= `maxAgeSeconds`(v0) @signature `Lokhttp3/CacheControl;.maxAgeSeconds:()I` @kind virtual;
  #L2d2454.  v7:= temp;
  #L2d2456.  v8:= -1I;
  #L2d2458.  if v7 == v8 then goto L2d247a;
  #L2d245c.  v7:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2d2460.  call temp:= `maxAgeSeconds`(v0) @signature `Lokhttp3/CacheControl;.maxAgeSeconds:()I` @kind virtual;
  #L2d2466.  v9:= temp;
  #L2d2468.  v9:= (`long`) v9 @kind i2l;
  #L2d246a.  call temp:= `toMillis`(v7, v9) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L2d2470.  v9:= temp @kind wide;
  #L2d2472.  call temp:= `min`(v5, v9) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2d2478.  v5:= temp @kind wide;
  #L2d247a.  call temp:= `minFreshSeconds`(v0) @signature `Lokhttp3/CacheControl;.minFreshSeconds:()I` @kind virtual;
  #L2d2480.  v7:= temp;
  #L2d2482.  v9:= 0L;
  #L2d2486.  if v7 == v8 then goto L2d24a2;
  #L2d248a.  v7:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2d248e.  call temp:= `minFreshSeconds`(v0) @signature `Lokhttp3/CacheControl;.minFreshSeconds:()I` @kind virtual;
  #L2d2494.  v11:= temp;
  #L2d2496.  v11:= (`long`) v11 @kind i2l;
  #L2d2498.  call temp:= `toMillis`(v7, v11) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L2d249e.  v11:= temp @kind wide;
  #L2d24a0.  goto L2d24a4;
  #L2d24a2.  v11:= v9 @kind wide;
  #L2d24a4.  call temp:= `mustRevalidate`(v2) @signature `Lokhttp3/CacheControl;.mustRevalidate:()Z` @kind virtual;
  #L2d24aa.  v7:= temp;
  #L2d24ac.  if v7 != 0 then goto L2d24d2;
  #L2d24b0.  call temp:= `maxStaleSeconds`(v0) @signature `Lokhttp3/CacheControl;.maxStaleSeconds:()I` @kind virtual;
  #L2d24b6.  v7:= temp;
  #L2d24b8.  if v7 == v8 then goto L2d24d2;
  #L2d24bc.  v7:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2d24c0.  call temp:= `maxStaleSeconds`(v0) @signature `Lokhttp3/CacheControl;.maxStaleSeconds:()I` @kind virtual;
  #L2d24c6.  v0:= temp;
  #L2d24c8.  v8:= (`long`) v0 @kind i2l;
  #L2d24ca.  call temp:= `toMillis`(v7, v8) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L2d24d0.  v9:= temp @kind wide;
  #L2d24d2.  call temp:= `noCache`(v2) @signature `Lokhttp3/CacheControl;.noCache:()Z` @kind virtual;
  #L2d24d8.  v0:= temp;
  #L2d24da.  if v0 != 0 then goto L2d2544;
  #L2d24de.  v11:= v11 + v3 @kind long;
  #L2d24e0.  v9:= v9 + v5 @kind long;
  #L2d24e2.  v0:= lcmp(v11, v9);
  #L2d24e6.  if v0 >= 0 then goto L2d2544;
  #L2d24ea.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.c` @type ^`okhttp3.Response` @kind object;
  #L2d24ee.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L2d24f4.  v0:= temp @kind object;
  #L2d24f6.  v2:= "Warning" @kind object;
  #L2d24fa.  v7:= lcmp(v11, v5);
  #L2d24fe.  if v7 < 0 then goto L2d250c;
  #L2d2502.  v5:= "110 HttpURLConnection \"Response is stale\"" @kind object;
  #L2d2506.  call temp:= `addHeader`(v0, v2, v5) @signature `Lokhttp3/Response$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2d250c.  v5:= 86400000L;
  #L2d2512.  v7:= lcmp(v3, v5);
  #L2d2516.  if v7 <= 0 then goto L2d2530;
  #L2d251a.  call temp:= `isFreshnessLifetimeHeuristic`(v13) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.isFreshnessLifetimeHeuristic:()Z` @kind direct;
  #L2d2520.  v3:= temp;
  #L2d2522.  if v3 == 0 then goto L2d2530;
  #L2d2526.  v3:= "113 HttpURLConnection \"Heuristic expiration\"" @kind object;
  #L2d252a.  call temp:= `addHeader`(v0, v2, v3) @signature `Lokhttp3/Response$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2d2530.  v2:= new `okhttp3.internal.cache.CacheStrategy`;
  #L2d2534.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L2d253a.  v0:= temp @kind object;
  #L2d253c.  call `<init>`(v2, v1, v0) @signature `Lokhttp3/internal/cache/CacheStrategy;.<init>:(Lokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L2d2542.  return v2 @kind object;
  #L2d2544.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.etag` @type ^`java.lang.String` @kind object;
  #L2d2548.  v2:= "If-Modified-Since" @kind object;
  #L2d254c.  if v0 == 0 then goto L2d2556;
  #L2d2550.  v2:= "If-None-Match" @kind object;
  #L2d2554.  goto L2d2570;
  #L2d2556.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.lastModified` @type ^`java.util.Date` @kind object;
  #L2d255a.  if v0 == 0 then goto L2d2564;
  #L2d255e.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.lastModifiedString` @type ^`java.lang.String` @kind object;
  #L2d2562.  goto L2d2570;
  #L2d2564.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.servedDate` @type ^`java.util.Date` @kind object;
  #L2d2568.  if v0 == 0 then goto L2d25c2;
  #L2d256c.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.servedDateString` @type ^`java.lang.String` @kind object;
  #L2d2570.  v1:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.b` @type ^`okhttp3.Request` @kind object;
  #L2d2574.  call temp:= `headers`(v1) @signature `Lokhttp3/Request;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L2d257a.  v1:= temp @kind object;
  #L2d257c.  call temp:= `newBuilder`(v1) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L2d2582.  v1:= temp @kind object;
  #L2d2584.  v3:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L2d2588.  call `addLenient`(v3, v1, v2, v0) @signature `Lokhttp3/internal/Internal;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L2d258e.  v0:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.b` @type ^`okhttp3.Request` @kind object;
  #L2d2592.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Request;.newBuilder:()Lokhttp3/Request$Builder;` @kind virtual;
  #L2d2598.  v0:= temp @kind object;
  #L2d259a.  call temp:= `build`(v1) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L2d25a0.  v1:= temp @kind object;
  #L2d25a2.  call temp:= `headers`(v0, v1) @signature `Lokhttp3/Request$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d25a8.  v0:= temp @kind object;
  #L2d25aa.  call temp:= `build`(v0) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L2d25b0.  v0:= temp @kind object;
  #L2d25b2.  v1:= new `okhttp3.internal.cache.CacheStrategy`;
  #L2d25b6.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.c` @type ^`okhttp3.Response` @kind object;
  #L2d25ba.  call `<init>`(v1, v0, v2) @signature `Lokhttp3/internal/cache/CacheStrategy;.<init>:(Lokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L2d25c0.  return v1 @kind object;
  #L2d25c2.  v0:= new `okhttp3.internal.cache.CacheStrategy`;
  #L2d25c6.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.b` @type ^`okhttp3.Request` @kind object;
  #L2d25ca.  call `<init>`(v0, v2, v1) @signature `Lokhttp3/internal/cache/CacheStrategy;.<init>:(Lokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L2d25d0.  return v0 @kind object;
  #L2d25d2.  v0:= new `okhttp3.internal.cache.CacheStrategy`;
  #L2d25d6.  v2:= v13.`okhttp3.internal.cache.CacheStrategy$Factory.b` @type ^`okhttp3.Request` @kind object;
  #L2d25da.  call `<init>`(v0, v2, v1) @signature `Lokhttp3/internal/cache/CacheStrategy;.<init>:(Lokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L2d25e0.  return v0 @kind object;
}
procedure `boolean` `hasConditions`(`okhttp3.Request` v1 @kind object) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.hasConditions:(Lokhttp3/Request;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2d2190.  v0:= "If-Modified-Since" @kind object;
  #L2d2194.  call temp:= `header`(v1, v0) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2d219a.  v0:= temp @kind object;
  #L2d219c.  if v0 != 0 then goto L2d21b6;
  #L2d21a0.  v0:= "If-None-Match" @kind object;
  #L2d21a4.  call temp:= `header`(v1, v0) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2d21aa.  v1:= temp @kind object;
  #L2d21ac.  if v1 == 0 then goto L2d21b2;
  #L2d21b0.  goto L2d21b6;
  #L2d21b2.  v1:= 0I;
  #L2d21b4.  goto L2d21b8;
  #L2d21b6.  v1:= 1I;
  #L2d21b8.  return v1;
}
procedure `boolean` `isFreshnessLifetimeHeuristic`(`okhttp3.internal.cache.CacheStrategy$Factory` v2 @kind this) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.isFreshnessLifetimeHeuristic:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2d21cc.  v0:= v2.`okhttp3.internal.cache.CacheStrategy$Factory.c` @type ^`okhttp3.Response` @kind object;
  #L2d21d0.  call temp:= `cacheControl`(v0) @signature `Lokhttp3/Response;.cacheControl:()Lokhttp3/CacheControl;` @kind virtual;
  #L2d21d6.  v0:= temp @kind object;
  #L2d21d8.  call temp:= `maxAgeSeconds`(v0) @signature `Lokhttp3/CacheControl;.maxAgeSeconds:()I` @kind virtual;
  #L2d21de.  v0:= temp;
  #L2d21e0.  v1:= -1I;
  #L2d21e2.  if v0 != v1 then goto L2d21f2;
  #L2d21e6.  v0:= v2.`okhttp3.internal.cache.CacheStrategy$Factory.expires` @type ^`java.util.Date` @kind object;
  #L2d21ea.  if v0 != 0 then goto L2d21f2;
  #L2d21ee.  v0:= 1I;
  #L2d21f0.  goto L2d21f4;
  #L2d21f2.  v0:= 0I;
  #L2d21f4.  return v0;
}
procedure `okhttp3.internal.cache.CacheStrategy` `get`(`okhttp3.internal.cache.CacheStrategy$Factory` v2 @kind this) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.get:()Lokhttp3/internal/cache/CacheStrategy;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d2350.  call temp:= `getCandidate`(v2) @signature `Lokhttp3/internal/cache/CacheStrategy$Factory;.getCandidate:()Lokhttp3/internal/cache/CacheStrategy;` @kind direct;
  #L2d2356.  v0:= temp @kind object;
  #L2d2358.  v1:= v0.`okhttp3.internal.cache.CacheStrategy.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L2d235c.  if v1 == 0 then goto L2d2384;
  #L2d2360.  v1:= v2.`okhttp3.internal.cache.CacheStrategy$Factory.b` @type ^`okhttp3.Request` @kind object;
  #L2d2364.  call temp:= `cacheControl`(v1) @signature `Lokhttp3/Request;.cacheControl:()Lokhttp3/CacheControl;` @kind virtual;
  #L2d236a.  v1:= temp @kind object;
  #L2d236c.  call temp:= `onlyIfCached`(v1) @signature `Lokhttp3/CacheControl;.onlyIfCached:()Z` @kind virtual;
  #L2d2372.  v1:= temp;
  #L2d2374.  if v1 == 0 then goto L2d2384;
  #L2d2378.  v0:= new `okhttp3.internal.cache.CacheStrategy`;
  #L2d237c.  v1:= 0I;
  #L2d237e.  call `<init>`(v0, v1, v1) @signature `Lokhttp3/internal/cache/CacheStrategy;.<init>:(Lokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L2d2384.  return v0 @kind object;
}
