record `okhttp3.internal.http1.Http1Codec$FixedLengthSink` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$FixedLengthSink.a` @AccessFlag FINAL_SYNTHETIC;
  `long` `okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @AccessFlag PRIVATE;
  `okio.ForwardingTimeout` `okhttp3.internal.http1.Http1Codec$FixedLengthSink.timeout` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v1 @kind this, `okhttp3.internal.http1.Http1Codec` v2 @kind object, `long` v3 ) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.<init>:(Lokhttp3/internal/http1/Http1Codec;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2d74d8.  v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.a` @type ^`okhttp3.internal.http1.Http1Codec` := v2 @kind object;
  #L2d74dc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d74e2.  v0:= new `okio.ForwardingTimeout`;
  #L2d74e6.  v2:= v2.`okhttp3.internal.http1.Http1Codec.d` @type ^`okio.BufferedSink` @kind object;
  #L2d74ea.  call temp:= `timeout`(v2) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L2d74f0.  v2:= temp @kind object;
  #L2d74f2.  call `<init>`(v0, v2) @signature `Lokio/ForwardingTimeout;.<init>:(Lokio/Timeout;)V` @kind direct;
  #L2d74f8.  v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.timeout` @type ^`okio.ForwardingTimeout` := v0 @kind object;
  #L2d74fc.  v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` := v3 @kind wide;
  #L2d7500.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v5 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d7514.  v0:= v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @type ^`boolean` @kind boolean;
  #L2d7518.  if v0 == 0 then goto L2d751e;
  #L2d751c.  return @kind void;
  #L2d751e.  v0:= 1I;
  #L2d7520.  v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @type ^`boolean` := v0 @kind boolean;
  #L2d7524.  v0:= v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` @kind wide;
  #L2d7528.  v2:= 0L;
  #L2d752c.  v4:= lcmp(v0, v2);
  #L2d7530.  if v4 > 0 then goto L2d754e;
  #L2d7534.  v0:= v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.a` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2d7538.  v1:= v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L2d753c.  call `a`(v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec;.a:(Lokio/ForwardingTimeout;)V` @kind virtual;
  #L2d7542.  v0:= v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.a` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2d7546.  v1:= 3I;
  #L2d7548.  v0.`okhttp3.internal.http1.Http1Codec.e` @type ^`int` := v1;
  #L2d754c.  return @kind void;
  #L2d754e.  v0:= new `java.net.ProtocolException`;
  #L2d7552.  v1:= "unexpected end of stream" @kind object;
  #L2d7556.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d755c.  throw v0;
}
procedure `void` `flush`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d7570.  v0:= v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @type ^`boolean` @kind boolean;
  #L2d7574.  if v0 == 0 then goto L2d757a;
  #L2d7578.  return @kind void;
  #L2d757a.  v0:= v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.a` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2d757e.  v0:= v0.`okhttp3.internal.http1.Http1Codec.d` @type ^`okio.BufferedSink` @kind object;
  #L2d7582.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L2d7588.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d74c0.  v0:= v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L2d74c4.  return v0 @kind object;
}
procedure `void` `write`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2d759c.  v0:= v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @type ^`boolean` @kind boolean;
  #L2d75a0.  if v0 != 0 then goto L2d7620;
  #L2d75a4.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L2d75aa.  v1:= temp @kind wide;
  #L2d75ac.  v3:= 0L;
  #L2d75b0.  v5:= v9 @kind wide;
  #L2d75b2.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokhttp3/internal/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2d75b8.  v0:= v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` @kind wide;
  #L2d75bc.  v2:= lcmp(v9, v0);
  #L2d75c0.  if v2 > 0 then goto L2d75de;
  #L2d75c4.  v0:= v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.a` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2d75c8.  v0:= v0.`okhttp3.internal.http1.Http1Codec.d` @type ^`okio.BufferedSink` @kind object;
  #L2d75cc.  call `write`(v0, v8, v9) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L2d75d2.  v0:= v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` @kind wide;
  #L2d75d6.  v0:= v0 - v9 @kind long;
  #L2d75d8.  v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` := v0 @kind wide;
  #L2d75dc.  return @kind void;
  #L2d75de.  v8:= new `java.net.ProtocolException`;
  #L2d75e2.  v0:= new `java.lang.StringBuilder`;
  #L2d75e6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d75ec.  v1:= "expected " @kind object;
  #L2d75f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d75f6.  v1:= v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` @kind wide;
  #L2d75fa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d7600.  v1:= " bytes but received " @kind object;
  #L2d7604.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d760a.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d7610.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d7616.  v9:= temp @kind object;
  #L2d7618.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d761e.  throw v8;
  #L2d7620.  v8:= new `java.lang.IllegalStateException`;
  #L2d7624.  v9:= "closed" @kind object;
  #L2d7628.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d762e.  throw v8;
}
