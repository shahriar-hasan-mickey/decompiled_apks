record `okhttp3.internal.platform.OptionalMethod` @kind class @AccessFlag  {
  `java.lang.String` `okhttp3.internal.platform.OptionalMethod.methodName` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class`[] `okhttp3.internal.platform.OptionalMethod.methodParams` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `okhttp3.internal.platform.OptionalMethod.returnType` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.platform.OptionalMethod` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2deb10.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2deb16.  v0.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` := v1 @kind object;
  #L2deb1a.  v0.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` := v2 @kind object;
  #L2deb1e.  v0.`okhttp3.internal.platform.OptionalMethod.methodParams` @type ^`java.lang.Class`[] := v3 @kind object;
  #L2deb22.  return @kind void;
}
procedure `java.lang.reflect.Method` `getMethod`(`okhttp3.internal.platform.OptionalMethod` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2dea78.  v0:= v3.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L2dea7c.  v1:= 0I;
  #L2dea7e.  if v0 == 0 then goto L2deab2;
  #L2dea82.  v2:= v3.`okhttp3.internal.platform.OptionalMethod.methodParams` @type ^`java.lang.Class`[] @kind object;
  #L2dea86.  call temp:= `getPublicMethod`(v4, v0, v2) @signature `Lokhttp3/internal/platform/OptionalMethod;.getPublicMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L2dea8c.  v4:= temp @kind object;
  #L2dea8e.  if v4 == 0 then goto L2deab0;
  #L2dea92.  v0:= v3.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` @kind object;
  #L2dea96.  if v0 == 0 then goto L2deab0;
  #L2dea9a.  call temp:= `getReturnType`(v4) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L2deaa0.  v2:= temp @kind object;
  #L2deaa2.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L2deaa8.  v0:= temp;
  #L2deaaa.  if v0 != 0 then goto L2deab0;
  #L2deaae.  goto L2deab2;
  #L2deab0.  v1:= v4 @kind object;
  #L2deab2.  return v1 @kind object;
}
procedure `java.lang.reflect.Method` `getPublicMethod`(`java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.getPublicMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2deac4.  v0:= 0I;
  #L2deac6.  call temp:= `getMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L2deacc.  v1:= temp @kind object;
  #L2deace.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L2dead4.  v2:= temp;
  #L2dead6.  v2:= v2 ^& 1;
  #L2deada.  if v2 != 0 then goto L2deae0;
  #L2deade.  goto L2deae2;
  #L2deae0.  v0:= v1 @kind object;
  #L2deae2.  return v0 @kind object;
  catch `java.lang.NoSuchMethodException` @[L2deac6..L2deace] goto L2deae2;
  catch `java.lang.NoSuchMethodException` @[L2deace..L2dead6] goto L2deae0;
}
procedure `java.lang.Object` `invoke`(`okhttp3.internal.platform.OptionalMethod` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2de8cc.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2de8d2.  v0:= temp @kind object;
  #L2de8d4.  call temp:= `getMethod`(v3, v0) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L2de8da.  v0:= temp @kind object;
  #L2de8dc.  if v0 == 0 then goto L2de920;
  #L2de8e0.  call temp:= `invoke`(v0, v4, v5) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2de8e6.  v4:= temp @kind object;
  #L2de8e8.  return v4 @kind object;
  #L2de8ea.  v4:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L2de8ec.  v5:= new `java.lang.AssertionError`;
  #L2de8f0.  v1:= new `java.lang.StringBuilder`;
  #L2de8f4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2de8fa.  v2:= "Unexpectedly could not call: " @kind object;
  #L2de8fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2de904.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2de90a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2de910.  v0:= temp @kind object;
  #L2de912.  call `<init>`(v5, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2de918.  call temp:= `initCause`(v5, v4) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L2de91e.  throw v5;
  #L2de920.  v5:= new `java.lang.AssertionError`;
  #L2de924.  v0:= new `java.lang.StringBuilder`;
  #L2de928.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2de92e.  v1:= "Method " @kind object;
  #L2de932.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2de938.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L2de93c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2de942.  v1:= " not supported for object " @kind object;
  #L2de946.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2de94c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2de952.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2de958.  v4:= temp @kind object;
  #L2de95a.  call `<init>`(v5, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2de960.  throw v5;
  catch `java.lang.IllegalAccessException` @[L2de8e0..L2de8e8] goto L2de8ea;
}
procedure `java.lang.Object` `invokeOptional`(`okhttp3.internal.platform.OptionalMethod` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptional:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2de984.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2de98a.  v0:= temp @kind object;
  #L2de98c.  call temp:= `getMethod`(v2, v0) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L2de992.  v0:= temp @kind object;
  #L2de994.  v1:= 0I;
  #L2de996.  if v0 != 0 then goto L2de99c;
  #L2de99a.  return v1 @kind object;
  #L2de99c.  call temp:= `invoke`(v0, v3, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2de9a2.  v3:= temp @kind object;
  #L2de9a4.  return v3 @kind object;
  #L2de9a6.  return v1 @kind object;
  catch `java.lang.IllegalAccessException` @[L2de99c..L2de9a4] goto L2de9a6;
}
procedure `java.lang.Object` `invokeOptionalWithoutCheckedException`(`okhttp3.internal.platform.OptionalMethod` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptionalWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2de9c8.  call temp:= `invokeOptional`(v1, v2, v3) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptional:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2de9ce.  v2:= temp @kind object;
  #L2de9d0.  return v2 @kind object;
  #L2de9d2.  v2:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L2de9d4.  call temp:= `getTargetException`(v2) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L2de9da.  v2:= temp @kind object;
  #L2de9dc.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L2de9e0.  if v3 == 0 then goto L2de9ea;
  #L2de9e4.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L2de9e8.  throw v2;
  #L2de9ea.  v3:= new `java.lang.AssertionError`;
  #L2de9ee.  v0:= "Unexpected exception" @kind object;
  #L2de9f2.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2de9f8.  call temp:= `initCause`(v3, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L2de9fe.  throw v3;
  catch `java.lang.reflect.InvocationTargetException` @[L2de9c8..L2de9d0] goto L2de9d2;
}
procedure `java.lang.Object` `invokeWithoutCheckedException`(`okhttp3.internal.platform.OptionalMethod` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2dea20.  call temp:= `invoke`(v1, v2, v3) @signature `Lokhttp3/internal/platform/OptionalMethod;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2dea26.  v2:= temp @kind object;
  #L2dea28.  return v2 @kind object;
  #L2dea2a.  v2:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L2dea2c.  call temp:= `getTargetException`(v2) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L2dea32.  v2:= temp @kind object;
  #L2dea34.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L2dea38.  if v3 == 0 then goto L2dea42;
  #L2dea3c.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L2dea40.  throw v2;
  #L2dea42.  v3:= new `java.lang.AssertionError`;
  #L2dea46.  v0:= "Unexpected exception" @kind object;
  #L2dea4a.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2dea50.  call temp:= `initCause`(v3, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L2dea56.  throw v3;
  catch `java.lang.reflect.InvocationTargetException` @[L2dea20..L2dea28] goto L2dea2a;
}
procedure `boolean` `isSupported`(`okhttp3.internal.platform.OptionalMethod` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.isSupported:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L2de8a0.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2de8a6.  v1:= temp @kind object;
  #L2de8a8.  call temp:= `getMethod`(v0, v1) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L2de8ae.  v1:= temp @kind object;
  #L2de8b0.  if v1 == 0 then goto L2de8b8;
  #L2de8b4.  v1:= 1I;
  #L2de8b6.  goto L2de8ba;
  #L2de8b8.  v1:= 0I;
  #L2de8ba.  return v1;
}
