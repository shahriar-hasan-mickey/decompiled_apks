record `okhttp3.internal.http.HttpCodec` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `int` `@@okhttp3.internal.http.HttpCodec.DISCARD_STREAM_TIMEOUT_MILLIS` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `cancel`() @signature `Lokhttp3/internal/http/HttpCodec;.cancel:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `okio.Sink` `createRequestBody`(`okhttp3.Request` v0 @kind object, `long` v1 ) @signature `Lokhttp3/internal/http/HttpCodec;.createRequestBody:(Lokhttp3/Request;J)Lokio/Sink;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `finishRequest`() @signature `Lokhttp3/internal/http/HttpCodec;.finishRequest:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `flushRequest`() @signature `Lokhttp3/internal/http/HttpCodec;.flushRequest:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `okhttp3.ResponseBody` `openResponseBody`(`okhttp3.Response` v0 @kind object) @signature `Lokhttp3/internal/http/HttpCodec;.openResponseBody:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`(`boolean` v0 ) @signature `Lokhttp3/internal/http/HttpCodec;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `writeRequestHeaders`(`okhttp3.Request` v0 @kind object) @signature `Lokhttp3/internal/http/HttpCodec;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
