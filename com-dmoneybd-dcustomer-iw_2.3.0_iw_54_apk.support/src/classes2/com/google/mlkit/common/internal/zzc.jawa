record `com.google.mlkit.common.internal.zzc` @kind class @AccessFlag FINAL_SYNTHETIC extends `com.google.firebase.components.ComponentFactory` @kind interface {
}
global `com.google.firebase.components.ComponentFactory` `@@com.google.mlkit.common.internal.zzc.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/mlkit/common/internal/zzc;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L23ba58.  v0:= new `com.google.mlkit.common.internal.zzc`;
  #L23ba5c.  call `<init>`(v0) @signature `Lcom/google/mlkit/common/internal/zzc;.<init>:()V` @kind direct;
  #L23ba62.  `@@com.google.mlkit.common.internal.zzc.a` @type ^`com.google.firebase.components.ComponentFactory` := v0 @kind object;
  #L23ba66.  return @kind void;
}
procedure `void` `<init>`(`com.google.mlkit.common.internal.zzc` v0 @kind this) @signature `Lcom/google/mlkit/common/internal/zzc;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L23ba78.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23ba7e.  return @kind void;
}
procedure `java.lang.Object` `create`(`com.google.mlkit.common.internal.zzc` v2 @kind this, `com.google.firebase.components.ComponentContainer` v3 @kind object) @signature `Lcom/google/mlkit/common/internal/zzc;.create:(Lcom/google/firebase/components/ComponentContainer;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L23ba30.  v0:= new `com.google.mlkit.common.sdkinternal.ExecutorSelector`;
  #L23ba34.  v1:= constclass @type ^`com.google.mlkit.common.sdkinternal.MlKitThreadPool` @kind object;
  #L23ba38.  call temp:= `getProvider`(v3, v1) @signature `Lcom/google/firebase/components/ComponentContainer;.getProvider:(Ljava/lang/Class;)Lcom/google/firebase/inject/Provider;` @kind interface;
  #L23ba3e.  v3:= temp @kind object;
  #L23ba40.  call `<init>`(v0, v3) @signature `Lcom/google/mlkit/common/sdkinternal/ExecutorSelector;.<init>:(Lcom/google/firebase/inject/Provider;)V` @kind direct;
  #L23ba46.  return v0 @kind object;
}
