record `com.google.mlkit.common.sdkinternal.zza` @kind class @AccessFlag FINAL_SYNTHETIC extends `java.util.concurrent.ThreadFactory` @kind interface {
}
global `java.util.concurrent.ThreadFactory` `@@com.google.mlkit.common.sdkinternal.zza.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/mlkit/common/sdkinternal/zza;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L240f30.  v0:= new `com.google.mlkit.common.sdkinternal.zza`;
  #L240f34.  call `<init>`(v0) @signature `Lcom/google/mlkit/common/sdkinternal/zza;.<init>:()V` @kind direct;
  #L240f3a.  `@@com.google.mlkit.common.sdkinternal.zza.a` @type ^`java.util.concurrent.ThreadFactory` := v0 @kind object;
  #L240f3e.  return @kind void;
}
procedure `void` `<init>`(`com.google.mlkit.common.sdkinternal.zza` v0 @kind this) @signature `Lcom/google/mlkit/common/sdkinternal/zza;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L240f50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L240f56.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`com.google.mlkit.common.sdkinternal.zza` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lcom/google/mlkit/common/sdkinternal/zza;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L240f08.  v0:= new `java.lang.Thread`;
  #L240f0c.  v1:= "MlKitCleaner" @kind object;
  #L240f10.  call `<init>`(v0, v3, v1) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L240f16.  v3:= 1I;
  #L240f18.  call `setDaemon`(v0, v3) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L240f1e.  return v0 @kind object;
}
