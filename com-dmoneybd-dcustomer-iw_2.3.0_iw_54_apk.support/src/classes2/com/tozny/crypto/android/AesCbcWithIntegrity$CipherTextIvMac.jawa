record `com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac` @kind class @AccessFlag PUBLIC {
  `byte`[] `com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.cipherText` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.iv` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.mac` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2c74d4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c74da.  v0:= ":" @kind object;
  #L2c74de.  call temp:= `split`(v3, v0) @signature `Ljava/lang/String;.split:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L2c74e4.  v3:= temp @kind object;
  #L2c74e6.  v0:= length @variable v3;
  #L2c74e8.  v1:= 3I;
  #L2c74ea.  if v0 != v1 then goto L2c7526;
  #L2c74ee.  v0:= 0I;
  #L2c74f0.  v0:= v3[v0] @kind object;
  #L2c74f4.  v1:= 2I;
  #L2c74f6.  call temp:= `decode`(v0, v1) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L2c74fc.  v0:= temp @kind object;
  #L2c74fe.  v2.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.iv` @type ^`byte`[] := v0 @kind object;
  #L2c7502.  v0:= 1I;
  #L2c7504.  v0:= v3[v0] @kind object;
  #L2c7508.  call temp:= `decode`(v0, v1) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L2c750e.  v0:= temp @kind object;
  #L2c7510.  v2.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.mac` @type ^`byte`[] := v0 @kind object;
  #L2c7514.  v3:= v3[v1] @kind object;
  #L2c7518.  call temp:= `decode`(v3, v1) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L2c751e.  v3:= temp @kind object;
  #L2c7520.  v2.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.cipherText` @type ^`byte`[] := v3 @kind object;
  #L2c7524.  return @kind void;
  #L2c7526.  v3:= new `java.lang.IllegalArgumentException`;
  #L2c752a.  v0:= "Cannot parse iv:ciphertext:mac" @kind object;
  #L2c752e.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c7534.  throw v3;
}
procedure `void` `<init>`(`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;.<init>:([B[B[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2c7484.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c748a.  v0:= length @variable v4;
  #L2c748c.  v0:= new `byte`[v0];
  #L2c7490.  v3.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.cipherText` @type ^`byte`[] := v0 @kind object;
  #L2c7494.  v1:= length @variable v4;
  #L2c7496.  v2:= 0I;
  #L2c7498.  call `arraycopy`(v4, v2, v0, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2c749e.  v4:= length @variable v5;
  #L2c74a0.  v4:= new `byte`[v4];
  #L2c74a4.  v3.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.iv` @type ^`byte`[] := v4 @kind object;
  #L2c74a8.  v0:= length @variable v5;
  #L2c74aa.  call `arraycopy`(v5, v2, v4, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2c74b0.  v4:= length @variable v6;
  #L2c74b2.  v4:= new `byte`[v4];
  #L2c74b6.  v3.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.mac` @type ^`byte`[] := v4 @kind object;
  #L2c74ba.  v5:= length @variable v6;
  #L2c74bc.  call `arraycopy`(v6, v2, v4, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2c74c2.  return @kind void;
}
procedure `byte`[] `ivCipherConcat`(`byte`[] v3 @kind object, `byte`[] v4 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;.ivCipherConcat:([B[B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2c7390.  v0:= length @variable v3;
  #L2c7392.  v1:= length @variable v4;
  #L2c7394.  v0:= v0 + v1 @kind int;
  #L2c7396.  v0:= new `byte`[v0];
  #L2c739a.  v1:= length @variable v3;
  #L2c739c.  v2:= 0I;
  #L2c739e.  call `arraycopy`(v3, v2, v0, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2c73a4.  v3:= length @variable v3;
  #L2c73a6.  v1:= length @variable v4;
  #L2c73a8.  call `arraycopy`(v4, v2, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2c73ae.  return v0 @kind object;
}
procedure `boolean` `equals`(`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c72c8.  v0:= 1I;
  #L2c72ca.  if v4 != v5 then goto L2c72d0;
  #L2c72ce.  return v0;
  #L2c72d0.  v1:= 0I;
  #L2c72d2.  if v5 != 0 then goto L2c72d8;
  #L2c72d6.  return v1;
  #L2c72d8.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2c72de.  v2:= temp @kind object;
  #L2c72e0.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2c72e6.  v3:= temp @kind object;
  #L2c72e8.  if v2 == v3 then goto L2c72ee;
  #L2c72ec.  return v1;
  #L2c72ee.  v5:= (`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac`) v5 @kind object;
  #L2c72f2.  v2:= v4.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.cipherText` @type ^`byte`[] @kind object;
  #L2c72f6.  v3:= v5.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.cipherText` @type ^`byte`[] @kind object;
  #L2c72fa.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([B[B)Z` @kind static;
  #L2c7300.  v2:= temp;
  #L2c7302.  if v2 != 0 then goto L2c7308;
  #L2c7306.  return v1;
  #L2c7308.  v2:= v4.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.iv` @type ^`byte`[] @kind object;
  #L2c730c.  v3:= v5.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.iv` @type ^`byte`[] @kind object;
  #L2c7310.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([B[B)Z` @kind static;
  #L2c7316.  v2:= temp;
  #L2c7318.  if v2 != 0 then goto L2c731e;
  #L2c731c.  return v1;
  #L2c731e.  v2:= v4.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.mac` @type ^`byte`[] @kind object;
  #L2c7322.  v5:= v5.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.mac` @type ^`byte`[] @kind object;
  #L2c7326.  call temp:= `equals`(v2, v5) @signature `Ljava/util/Arrays;.equals:([B[B)Z` @kind static;
  #L2c732c.  v5:= temp;
  #L2c732e.  if v5 != 0 then goto L2c7334;
  #L2c7332.  return v1;
  #L2c7334.  return v0;
}
procedure `byte`[] `getCipherText`(`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac` v1 @kind this) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;.getCipherText:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c7348.  v0:= v1.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.cipherText` @type ^`byte`[] @kind object;
  #L2c734c.  return v0 @kind object;
}
procedure `byte`[] `getIv`(`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac` v1 @kind this) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;.getIv:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c7360.  v0:= v1.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.iv` @type ^`byte`[] @kind object;
  #L2c7364.  return v0 @kind object;
}
procedure `byte`[] `getMac`(`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac` v1 @kind this) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;.getMac:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c7378.  v0:= v1.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.mac` @type ^`byte`[] @kind object;
  #L2c737c.  return v0 @kind object;
}
procedure `int` `hashCode`(`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac` v3 @kind this) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c73c0.  v0:= v3.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.cipherText` @type ^`byte`[] @kind object;
  #L2c73c4.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L2c73ca.  v0:= temp;
  #L2c73cc.  v1:= 31I;
  #L2c73d0.  v0:= v0 + v1 @kind int;
  #L2c73d2.  v0:= v0 * 31;
  #L2c73d6.  v2:= v3.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.iv` @type ^`byte`[] @kind object;
  #L2c73da.  call temp:= `hashCode`(v2) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L2c73e0.  v2:= temp;
  #L2c73e2.  v0:= v0 + v2 @kind int;
  #L2c73e4.  v0:= v0 * 31;
  #L2c73e8.  v1:= v3.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.mac` @type ^`byte`[] @kind object;
  #L2c73ec.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L2c73f2.  v1:= temp;
  #L2c73f4.  v0:= v0 + v1 @kind int;
  #L2c73f6.  return v0;
}
procedure `java.lang.String` `toString`(`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac` v4 @kind this) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c7408.  v0:= v4.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.iv` @type ^`byte`[] @kind object;
  #L2c740c.  v1:= 2I;
  #L2c740e.  call temp:= `encodeToString`(v0, v1) @signature `Landroid/util/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L2c7414.  v0:= temp @kind object;
  #L2c7416.  v2:= v4.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.cipherText` @type ^`byte`[] @kind object;
  #L2c741a.  call temp:= `encodeToString`(v2, v1) @signature `Landroid/util/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L2c7420.  v2:= temp @kind object;
  #L2c7422.  v3:= v4.`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac.mac` @type ^`byte`[] @kind object;
  #L2c7426.  call temp:= `encodeToString`(v3, v1) @signature `Landroid/util/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L2c742c.  v1:= temp @kind object;
  #L2c742e.  v3:= new `java.lang.StringBuilder`;
  #L2c7432.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c7438.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c743e.  v0:= ":" @kind object;
  #L2c7442.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c7448.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c744e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c7454.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c745a.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c7460.  v0:= temp @kind object;
  #L2c7462.  v1:= 0I;
  #L2c7464.  v1:= new `java.lang.Object`[v1];
  #L2c7468.  call temp:= `format`(v0, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2c746e.  v0:= temp @kind object;
  #L2c7470.  return v0 @kind object;
}
