record `com.tozny.crypto.android.AesCbcWithIntegrity` @kind class @AccessFlag PUBLIC {
}
global `int` `@@com.tozny.crypto.android.AesCbcWithIntegrity.AES_KEY_LENGTH_BITS` @AccessFlag PRIVATE_STATIC_FINAL;
global `boolean` `@@com.tozny.crypto.android.AesCbcWithIntegrity.ALLOW_BROKEN_PRNG` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.tozny.crypto.android.AesCbcWithIntegrity.BASE64_FLAGS` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String` `@@com.tozny.crypto.android.AesCbcWithIntegrity.CIPHER` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.tozny.crypto.android.AesCbcWithIntegrity.CIPHER_TRANSFORMATION` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.tozny.crypto.android.AesCbcWithIntegrity.HMAC_ALGORITHM` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.tozny.crypto.android.AesCbcWithIntegrity.HMAC_KEY_LENGTH_BITS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.tozny.crypto.android.AesCbcWithIntegrity.IV_LENGTH_BYTES` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.tozny.crypto.android.AesCbcWithIntegrity.PBE_ALGORITHM` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.tozny.crypto.android.AesCbcWithIntegrity.PBE_ITERATION_COUNT` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.tozny.crypto.android.AesCbcWithIntegrity.PBE_SALT_LENGTH_BITS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicBoolean` `@@com.tozny.crypto.android.AesCbcWithIntegrity.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2c8350.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L2c8354.  v1:= 0I;
  #L2c8356.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L2c835c.  `@@com.tozny.crypto.android.AesCbcWithIntegrity.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L2c8360.  return @kind void;
}
procedure `void` `<init>`(`com.tozny.crypto.android.AesCbcWithIntegrity` v0 @kind this) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2c8374.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c837a.  return @kind void;
}
procedure `boolean` `constantTimeEq`(`byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.constantTimeEq:([B[B)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2c7e8c.  v0:= length @variable v5;
  #L2c7e8e.  v1:= length @variable v6;
  #L2c7e90.  v2:= 0I;
  #L2c7e92.  if v0 == v1 then goto L2c7e98;
  #L2c7e96.  return v2;
  #L2c7e98.  v0:= 0I;
  #L2c7e9a.  v1:= 0I;
  #L2c7e9c.  v3:= length @variable v5;
  #L2c7e9e.  if v0 >= v3 then goto L2c7eb4;
  #L2c7ea2.  v3:= v5[v0] @kind byte;
  #L2c7ea6.  v4:= v6[v0] @kind byte;
  #L2c7eaa.  v3:= v3 ^~ v4 @kind int;
  #L2c7eac.  v1:= v1 ^| v3 @kind int;
  #L2c7eae.  v0:= v0 + 1;
  #L2c7eb2.  goto L2c7e9c;
  #L2c7eb4.  if v1 != 0 then goto L2c7eba;
  #L2c7eb8.  v2:= 1I;
  #L2c7eba.  return v2;
}
procedure `byte`[] `copyOfRange`(`byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.copyOfRange:([BII)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2c7ecc.  v4:= v4 - v3 @kind int;
  #L2c7ece.  v0:= new `byte`[v4];
  #L2c7ed2.  v1:= 0I;
  #L2c7ed4.  call `arraycopy`(v2, v3, v0, v1, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2c7eda.  return v0 @kind object;
}
procedure `byte`[] `decrypt`(`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac` v4 @kind object, `com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys` v5 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.decrypt:(Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c7eec.  call temp:= `getIv`(v4) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;.getIv:()[B` @kind virtual;
  #L2c7ef2.  v0:= temp @kind object;
  #L2c7ef4.  call temp:= `getCipherText`(v4) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;.getCipherText:()[B` @kind virtual;
  #L2c7efa.  v1:= temp @kind object;
  #L2c7efc.  call temp:= `ivCipherConcat`(v0, v1) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;.ivCipherConcat:([B[B)[B` @kind static;
  #L2c7f02.  v0:= temp @kind object;
  #L2c7f04.  call temp:= `getIntegrityKey`(v5) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;.getIntegrityKey:()Ljavax/crypto/SecretKey;` @kind virtual;
  #L2c7f0a.  v1:= temp @kind object;
  #L2c7f0c.  call temp:= `generateMac`(v0, v1) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.generateMac:([BLjavax/crypto/SecretKey;)[B` @kind static;
  #L2c7f12.  v0:= temp @kind object;
  #L2c7f14.  call temp:= `getMac`(v4) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;.getMac:()[B` @kind virtual;
  #L2c7f1a.  v1:= temp @kind object;
  #L2c7f1c.  call temp:= `constantTimeEq`(v0, v1) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.constantTimeEq:([B[B)Z` @kind static;
  #L2c7f22.  v0:= temp;
  #L2c7f24.  if v0 == 0 then goto L2c7f68;
  #L2c7f28.  v0:= "AES/CBC/PKCS5Padding" @kind object;
  #L2c7f2c.  call temp:= `getInstance`(v0) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L2c7f32.  v0:= temp @kind object;
  #L2c7f34.  v1:= 2I;
  #L2c7f36.  call temp:= `getConfidentialityKey`(v5) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;.getConfidentialityKey:()Ljavax/crypto/SecretKey;` @kind virtual;
  #L2c7f3c.  v5:= temp @kind object;
  #L2c7f3e.  v2:= new `javax.crypto.spec.IvParameterSpec`;
  #L2c7f42.  call temp:= `getIv`(v4) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;.getIv:()[B` @kind virtual;
  #L2c7f48.  v3:= temp @kind object;
  #L2c7f4a.  call `<init>`(v2, v3) @signature `Ljavax/crypto/spec/IvParameterSpec;.<init>:([B)V` @kind direct;
  #L2c7f50.  call `init`(v0, v1, v5, v2) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L2c7f56.  call temp:= `getCipherText`(v4) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;.getCipherText:()[B` @kind virtual;
  #L2c7f5c.  v4:= temp @kind object;
  #L2c7f5e.  call temp:= `doFinal`(v0, v4) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L2c7f64.  v4:= temp @kind object;
  #L2c7f66.  return v4 @kind object;
  #L2c7f68.  v4:= new `java.security.GeneralSecurityException`;
  #L2c7f6c.  v5:= "MAC stored in civ does not match computed MAC." @kind object;
  #L2c7f70.  call `<init>`(v4, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c7f76.  throw v4;
}
procedure `java.lang.String` `decryptString`(`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac` v1 @kind object, `com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys` v2 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.decryptString:(Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2c82d4.  v0:= "UTF-8" @kind object;
  #L2c82d8.  call temp:= `decryptString`(v1, v2, v0) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.decryptString:(Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L2c82de.  v1:= temp @kind object;
  #L2c82e0.  return v1 @kind object;
}
procedure `java.lang.String` `decryptString`(`com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac` v1 @kind object, `com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.decryptString:(Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2c82f4.  v0:= new `java.lang.String`;
  #L2c82f8.  call temp:= `decrypt`(v1, v2) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.decrypt:(Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;)[B` @kind static;
  #L2c82fe.  v1:= temp @kind object;
  #L2c8300.  call `<init>`(v0, v1, v3) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L2c8306.  return v0 @kind object;
}
procedure `com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac` `encrypt`(`java.lang.String` v1 @kind object, `com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys` v2 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.encrypt:(Ljava/lang/String;Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;)Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2c8094.  v0:= "UTF-8" @kind object;
  #L2c8098.  call temp:= `encrypt`(v1, v2, v0) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.encrypt:(Ljava/lang/String;Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;Ljava/lang/String;)Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;` @kind static;
  #L2c809e.  v1:= temp @kind object;
  #L2c80a0.  return v1 @kind object;
}
procedure `com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac` `encrypt`(`java.lang.String` v0 @kind object, `com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.encrypt:(Ljava/lang/String;Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;Ljava/lang/String;)Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2c80b4.  call temp:= `getBytes`(v0, v2) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L2c80ba.  v0:= temp @kind object;
  #L2c80bc.  call temp:= `encrypt`(v0, v1) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.encrypt:([BLcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;)Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;` @kind static;
  #L2c80c2.  v0:= temp @kind object;
  #L2c80c4.  return v0 @kind object;
}
procedure `com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac` `encrypt`(`byte`[] v4 @kind object, `com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys` v5 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.encrypt:([BLcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;)Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c8020.  call temp:= `generateIv`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.generateIv:()[B` @kind static;
  #L2c8026.  v0:= temp @kind object;
  #L2c8028.  v1:= "AES/CBC/PKCS5Padding" @kind object;
  #L2c802c.  call temp:= `getInstance`(v1) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L2c8032.  v1:= temp @kind object;
  #L2c8034.  call temp:= `getConfidentialityKey`(v5) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;.getConfidentialityKey:()Ljavax/crypto/SecretKey;` @kind virtual;
  #L2c803a.  v2:= temp @kind object;
  #L2c803c.  v3:= new `javax.crypto.spec.IvParameterSpec`;
  #L2c8040.  call `<init>`(v3, v0) @signature `Ljavax/crypto/spec/IvParameterSpec;.<init>:([B)V` @kind direct;
  #L2c8046.  v0:= 1I;
  #L2c8048.  call `init`(v1, v0, v2, v3) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L2c804e.  call temp:= `getIV`(v1) @signature `Ljavax/crypto/Cipher;.getIV:()[B` @kind virtual;
  #L2c8054.  v0:= temp @kind object;
  #L2c8056.  call temp:= `doFinal`(v1, v4) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L2c805c.  v4:= temp @kind object;
  #L2c805e.  call temp:= `ivCipherConcat`(v0, v4) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;.ivCipherConcat:([B[B)[B` @kind static;
  #L2c8064.  v1:= temp @kind object;
  #L2c8066.  call temp:= `getIntegrityKey`(v5) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;.getIntegrityKey:()Ljavax/crypto/SecretKey;` @kind virtual;
  #L2c806c.  v5:= temp @kind object;
  #L2c806e.  call temp:= `generateMac`(v1, v5) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.generateMac:([BLjavax/crypto/SecretKey;)[B` @kind static;
  #L2c8074.  v5:= temp @kind object;
  #L2c8076.  v1:= new `com.tozny.crypto.android.AesCbcWithIntegrity$CipherTextIvMac`;
  #L2c807a.  call `<init>`(v1, v4, v0, v5) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$CipherTextIvMac;.<init>:([B[B[B)V` @kind direct;
  #L2c8080.  return v1 @kind object;
}
procedure `void` `fixPrng`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.fixPrng:()V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2c838c.  v0:= `@@com.tozny.crypto.android.AesCbcWithIntegrity.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L2c8390.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L2c8396.  v1:= temp;
  #L2c8398.  if v1 != 0 then goto L2c83c6;
  #L2c839c.  v1:= constclass @type ^`com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes` @kind object;
  #L2c83a0.  @monitorenter v1
  #L2c83a2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L2c83a8.  v2:= temp;
  #L2c83aa.  if v2 != 0 then goto L2c83bc;
  #L2c83ae.  call `apply`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes;.apply:()V` @kind static;
  #L2c83b4.  v2:= 1I;
  #L2c83b6.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L2c83bc.  @monitorexit v1
  #L2c83be.  goto L2c83c6;
  #L2c83c0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c83c2.  @monitorexit v1
  #L2c83c4.  throw v0;
  #L2c83c6.  return @kind void;
  catch `java.lang.Throwable` @[L2c83a2..L2c83c4] goto L2c83c0;
}
procedure `byte`[] `generateIv`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.generateIv:()[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2c7f88.  v0:= 16I;
  #L2c7f8c.  call temp:= `randomBytes`(v0) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.randomBytes:(I)[B` @kind static;
  #L2c7f92.  v0:= temp @kind object;
  #L2c7f94.  return v0 @kind object;
}
procedure `com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys` `generateKey`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.generateKey:()Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c80d8.  call `fixPrng`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.fixPrng:()V` @kind static;
  #L2c80de.  v0:= "AES" @kind object;
  #L2c80e2.  call temp:= `getInstance`(v0) @signature `Ljavax/crypto/KeyGenerator;.getInstance:(Ljava/lang/String;)Ljavax/crypto/KeyGenerator;` @kind static;
  #L2c80e8.  v0:= temp @kind object;
  #L2c80ea.  v1:= 128I;
  #L2c80ee.  call `init`(v0, v1) @signature `Ljavax/crypto/KeyGenerator;.init:(I)V` @kind virtual;
  #L2c80f4.  call temp:= `generateKey`(v0) @signature `Ljavax/crypto/KeyGenerator;.generateKey:()Ljavax/crypto/SecretKey;` @kind virtual;
  #L2c80fa.  v0:= temp @kind object;
  #L2c80fc.  v1:= 32I;
  #L2c8100.  call temp:= `randomBytes`(v1) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.randomBytes:(I)[B` @kind static;
  #L2c8106.  v1:= temp @kind object;
  #L2c8108.  v2:= new `javax.crypto.spec.SecretKeySpec`;
  #L2c810c.  v3:= "HmacSHA256" @kind object;
  #L2c8110.  call `<init>`(v2, v1, v3) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L2c8116.  v1:= new `com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys`;
  #L2c811a.  call `<init>`(v1, v0, v2) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;.<init>:(Ljavax/crypto/SecretKey;Ljavax/crypto/SecretKey;)V` @kind direct;
  #L2c8120.  return v1 @kind object;
}
procedure `com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys` `generateKeyFromPassword`(`java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.generateKeyFromPassword:(Ljava/lang/String;Ljava/lang/String;)Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2c81e0.  v0:= 10000I;
  #L2c81e4.  call temp:= `generateKeyFromPassword`(v1, v2, v0) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.generateKeyFromPassword:(Ljava/lang/String;Ljava/lang/String;I)Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;` @kind static;
  #L2c81ea.  v1:= temp @kind object;
  #L2c81ec.  return v1 @kind object;
}
procedure `com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys` `generateKeyFromPassword`(`java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object, `int` v3 ) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.generateKeyFromPassword:(Ljava/lang/String;Ljava/lang/String;I)Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2c8200.  v0:= 2I;
  #L2c8202.  call temp:= `decode`(v2, v0) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L2c8208.  v2:= temp @kind object;
  #L2c820a.  call temp:= `generateKeyFromPassword`(v1, v2, v3) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.generateKeyFromPassword:(Ljava/lang/String;[BI)Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;` @kind static;
  #L2c8210.  v1:= temp @kind object;
  #L2c8212.  return v1 @kind object;
}
procedure `com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys` `generateKeyFromPassword`(`java.lang.String` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.generateKeyFromPassword:(Ljava/lang/String;[B)Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2c8134.  v0:= 10000I;
  #L2c8138.  call temp:= `generateKeyFromPassword`(v1, v2, v0) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.generateKeyFromPassword:(Ljava/lang/String;[BI)Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;` @kind static;
  #L2c813e.  v1:= temp @kind object;
  #L2c8140.  return v1 @kind object;
}
procedure `com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys` `generateKeyFromPassword`(`java.lang.String` v2 @kind object, `byte`[] v3 @kind object, `int` v4 ) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.generateKeyFromPassword:(Ljava/lang/String;[BI)Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2c8154.  call `fixPrng`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.fixPrng:()V` @kind static;
  #L2c815a.  v0:= new `javax.crypto.spec.PBEKeySpec`;
  #L2c815e.  call temp:= `toCharArray`(v2) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L2c8164.  v2:= temp @kind object;
  #L2c8166.  v1:= 384I;
  #L2c816a.  call `<init>`(v0, v2, v3, v4, v1) @signature `Ljavax/crypto/spec/PBEKeySpec;.<init>:([C[BII)V` @kind direct;
  #L2c8170.  v2:= "PBKDF2WithHmacSHA1" @kind object;
  #L2c8174.  call temp:= `getInstance`(v2) @signature `Ljavax/crypto/SecretKeyFactory;.getInstance:(Ljava/lang/String;)Ljavax/crypto/SecretKeyFactory;` @kind static;
  #L2c817a.  v2:= temp @kind object;
  #L2c817c.  call temp:= `generateSecret`(v2, v0) @signature `Ljavax/crypto/SecretKeyFactory;.generateSecret:(Ljava/security/spec/KeySpec;)Ljavax/crypto/SecretKey;` @kind virtual;
  #L2c8182.  v2:= temp @kind object;
  #L2c8184.  call temp:= `getEncoded`(v2) @signature `Ljavax/crypto/SecretKey;.getEncoded:()[B` @kind interface;
  #L2c818a.  v2:= temp @kind object;
  #L2c818c.  v3:= 0I;
  #L2c818e.  v4:= 16I;
  #L2c8192.  call temp:= `copyOfRange`(v2, v3, v4) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.copyOfRange:([BII)[B` @kind static;
  #L2c8198.  v3:= temp @kind object;
  #L2c819a.  v0:= 48I;
  #L2c819e.  call temp:= `copyOfRange`(v2, v4, v0) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.copyOfRange:([BII)[B` @kind static;
  #L2c81a4.  v2:= temp @kind object;
  #L2c81a6.  v4:= new `javax.crypto.spec.SecretKeySpec`;
  #L2c81aa.  v0:= "AES" @kind object;
  #L2c81ae.  call `<init>`(v4, v3, v0) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L2c81b4.  v3:= new `javax.crypto.spec.SecretKeySpec`;
  #L2c81b8.  v0:= "HmacSHA256" @kind object;
  #L2c81bc.  call `<init>`(v3, v2, v0) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L2c81c2.  v2:= new `com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys`;
  #L2c81c6.  call `<init>`(v2, v4, v3) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;.<init>:(Ljavax/crypto/SecretKey;Ljavax/crypto/SecretKey;)V` @kind direct;
  #L2c81cc.  return v2 @kind object;
}
procedure `byte`[] `generateMac`(`byte`[] v1 @kind object, `javax.crypto.SecretKey` v2 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.generateMac:([BLjavax/crypto/SecretKey;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2c7fa8.  v0:= "HmacSHA256" @kind object;
  #L2c7fac.  call temp:= `getInstance`(v0) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L2c7fb2.  v0:= temp @kind object;
  #L2c7fb4.  call `init`(v0, v2) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L2c7fba.  call temp:= `doFinal`(v0, v1) @signature `Ljavax/crypto/Mac;.doFinal:([B)[B` @kind virtual;
  #L2c7fc0.  v1:= temp @kind object;
  #L2c7fc2.  return v1 @kind object;
}
procedure `byte`[] `generateSalt`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.generateSalt:()[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2c7fd4.  v0:= 128I;
  #L2c7fd8.  call temp:= `randomBytes`(v0) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.randomBytes:(I)[B` @kind static;
  #L2c7fde.  v0:= temp @kind object;
  #L2c7fe0.  return v0 @kind object;
}
procedure `java.lang.String` `keyString`(`com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys` v0 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.keyString:(Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2c8318.  call temp:= `toString`(v0) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c831e.  v0:= temp @kind object;
  #L2c8320.  return v0 @kind object;
}
procedure `com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys` `keys`(`java.lang.String` v6 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.keys:(Ljava/lang/String;)Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2c8224.  v0:= ":" @kind object;
  #L2c8228.  call temp:= `split`(v6, v0) @signature `Ljava/lang/String;.split:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L2c822e.  v6:= temp @kind object;
  #L2c8230.  v0:= length @variable v6;
  #L2c8232.  v1:= 2I;
  #L2c8234.  if v0 != v1 then goto L2c82b2;
  #L2c8238.  v0:= 0I;
  #L2c823a.  v2:= v6[v0] @kind object;
  #L2c823e.  call temp:= `decode`(v2, v1) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L2c8244.  v2:= temp @kind object;
  #L2c8246.  v3:= length @variable v2;
  #L2c8248.  v4:= 16I;
  #L2c824c.  if v3 != v4 then goto L2c82a2;
  #L2c8250.  v3:= 1I;
  #L2c8252.  v6:= v6[v3] @kind object;
  #L2c8256.  call temp:= `decode`(v6, v1) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L2c825c.  v6:= temp @kind object;
  #L2c825e.  v1:= length @variable v6;
  #L2c8260.  v3:= 32I;
  #L2c8264.  if v1 != v3 then goto L2c8292;
  #L2c8268.  v1:= new `com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys`;
  #L2c826c.  v3:= new `javax.crypto.spec.SecretKeySpec`;
  #L2c8270.  v4:= length @variable v2;
  #L2c8272.  v5:= "AES" @kind object;
  #L2c8276.  call `<init>`(v3, v2, v0, v4, v5) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BIILjava/lang/String;)V` @kind direct;
  #L2c827c.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L2c8280.  v2:= "HmacSHA256" @kind object;
  #L2c8284.  call `<init>`(v0, v6, v2) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L2c828a.  call `<init>`(v1, v3, v0) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$SecretKeys;.<init>:(Ljavax/crypto/SecretKey;Ljavax/crypto/SecretKey;)V` @kind direct;
  #L2c8290.  return v1 @kind object;
  #L2c8292.  v6:= new `java.security.InvalidKeyException`;
  #L2c8296.  v0:= "Base64 decoded key is not 256 bytes" @kind object;
  #L2c829a.  call `<init>`(v6, v0) @signature `Ljava/security/InvalidKeyException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c82a0.  throw v6;
  #L2c82a2.  v6:= new `java.security.InvalidKeyException`;
  #L2c82a6.  v0:= "Base64 decoded key is not 128 bytes" @kind object;
  #L2c82aa.  call `<init>`(v6, v0) @signature `Ljava/security/InvalidKeyException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c82b0.  throw v6;
  #L2c82b2.  v6:= new `java.lang.IllegalArgumentException`;
  #L2c82b6.  v0:= "Cannot parse aesKey:hmacKey" @kind object;
  #L2c82ba.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c82c0.  throw v6;
}
procedure `byte`[] `randomBytes`(`int` v1 ) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.randomBytes:(I)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2c7ff4.  call `fixPrng`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.fixPrng:()V` @kind static;
  #L2c7ffa.  v0:= new `java.security.SecureRandom`;
  #L2c7ffe.  call `<init>`(v0) @signature `Ljava/security/SecureRandom;.<init>:()V` @kind direct;
  #L2c8004.  v1:= new `byte`[v1];
  #L2c8008.  call `nextBytes`(v0, v1) @signature `Ljava/security/SecureRandom;.nextBytes:([B)V` @kind virtual;
  #L2c800e.  return v1 @kind object;
}
procedure `java.lang.String` `saltString`(`byte`[] v1 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity;.saltString:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2c8334.  v0:= 2I;
  #L2c8336.  call temp:= `encodeToString`(v1, v0) @signature `Landroid/util/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L2c833c.  v1:= temp @kind object;
  #L2c833e.  return v1 @kind object;
}
