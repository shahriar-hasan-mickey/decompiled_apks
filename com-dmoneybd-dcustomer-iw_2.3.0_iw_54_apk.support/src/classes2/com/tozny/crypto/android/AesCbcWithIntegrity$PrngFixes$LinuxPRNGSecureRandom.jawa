record `com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom` @kind class @AccessFlag PUBLIC extends `java.security.SecureRandomSpi` @kind class {
  `boolean` `com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.mSeeded` @AccessFlag PRIVATE;
}
global `java.io.File` `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.URANDOM_FILE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object` `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.sLock` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.io.DataInputStream` `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.sUrandomIn` @AccessFlag PRIVATE_STATIC;
global `java.io.OutputStream` `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.sUrandomOut` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2c76a0.  v0:= new `java.io.File`;
  #L2c76a4.  v1:= "/dev/urandom" @kind object;
  #L2c76a8.  call `<init>`(v0, v1) @signature `Ljava/io/File;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c76ae.  `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.URANDOM_FILE` @type ^`java.io.File` := v0 @kind object;
  #L2c76b2.  v0:= new `java.lang.Object`;
  #L2c76b6.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c76bc.  `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.sLock` @type ^`java.lang.Object` := v0 @kind object;
  #L2c76c0.  return @kind void;
}
procedure `void` `<init>`(`com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom` v0 @kind this) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2c76d4.  call `<init>`(v0) @signature `Ljava/security/SecureRandomSpi;.<init>:()V` @kind direct;
  #L2c76da.  return @kind void;
}
procedure `java.io.DataInputStream` `getUrandomInputStream`(`com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom` v5 @kind this) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom;.getUrandomInputStream:()Ljava/io/DataInputStream;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2c75ac.  v0:= `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.sLock` @type ^`java.lang.Object` @kind object;
  #L2c75b0.  @monitorenter v0
  #L2c75b2.  v1:= `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.sUrandomIn` @type ^`java.io.DataInputStream` @kind object;
  #L2c75b6.  if v1 != 0 then goto L2c7616;
  #L2c75ba.  v1:= new `java.io.DataInputStream`;
  #L2c75be.  v2:= new `java.io.FileInputStream`;
  #L2c75c2.  v3:= `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.URANDOM_FILE` @type ^`java.io.File` @kind object;
  #L2c75c6.  call `<init>`(v2, v3) @signature `Ljava/io/FileInputStream;.<init>:(Ljava/io/File;)V` @kind direct;
  #L2c75cc.  call `<init>`(v1, v2) @signature `Ljava/io/DataInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L2c75d2.  `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.sUrandomIn` @type ^`java.io.DataInputStream` := v1 @kind object;
  #L2c75d6.  goto L2c7616;
  #L2c75d8.  v1:= Exception @type ^`java.io.IOException` @kind object;
  #L2c75da.  v2:= new `java.lang.SecurityException`;
  #L2c75de.  v3:= new `java.lang.StringBuilder`;
  #L2c75e2.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c75e8.  v4:= "Failed to open " @kind object;
  #L2c75ec.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c75f2.  v4:= `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.URANDOM_FILE` @type ^`java.io.File` @kind object;
  #L2c75f6.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c75fc.  v4:= " for reading" @kind object;
  #L2c7600.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c7606.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c760c.  v3:= temp @kind object;
  #L2c760e.  call `<init>`(v2, v3, v1) @signature `Ljava/lang/SecurityException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L2c7614.  throw v2;
  #L2c7616.  v1:= `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.sUrandomIn` @type ^`java.io.DataInputStream` @kind object;
  #L2c761a.  @monitorexit v0
  #L2c761c.  return v1 @kind object;
  #L2c761e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c7620.  @monitorexit v0
  #L2c7622.  throw v1;
  catch `java.lang.Throwable` @[L2c75b2..L2c75b6] goto L2c761e;
  catch `java.io.IOException` @[L2c75ba..L2c75d6] goto L2c75d8;
  catch `java.lang.Throwable` @[L2c75ba..L2c75d6] goto L2c761e;
  catch `java.lang.Throwable` @[L2c75da..L2c7622] goto L2c761e;
}
procedure `java.io.OutputStream` `getUrandomOutputStream`(`com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom` v3 @kind this) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom;.getUrandomOutputStream:()Ljava/io/OutputStream;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2c7654.  v0:= `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.sLock` @type ^`java.lang.Object` @kind object;
  #L2c7658.  @monitorenter v0
  #L2c765a.  v1:= `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.sUrandomOut` @type ^`java.io.OutputStream` @kind object;
  #L2c765e.  if v1 != 0 then goto L2c7674;
  #L2c7662.  v1:= new `java.io.FileOutputStream`;
  #L2c7666.  v2:= `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.URANDOM_FILE` @type ^`java.io.File` @kind object;
  #L2c766a.  call `<init>`(v1, v2) @signature `Ljava/io/FileOutputStream;.<init>:(Ljava/io/File;)V` @kind direct;
  #L2c7670.  `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.sUrandomOut` @type ^`java.io.OutputStream` := v1 @kind object;
  #L2c7674.  v1:= `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.sUrandomOut` @type ^`java.io.OutputStream` @kind object;
  #L2c7678.  @monitorexit v0
  #L2c767a.  return v1 @kind object;
  #L2c767c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c767e.  @monitorexit v0
  #L2c7680.  throw v1;
  catch `java.lang.Throwable` @[L2c765a..L2c7680] goto L2c767c;
}
procedure `byte`[] `engineGenerateSeed`(`com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom` v0 @kind this, `int` v1 ) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom;.engineGenerateSeed:(I)[B` @AccessFlag PROTECTED {
    temp;

  #L2c7590.  v1:= new `byte`[v1];
  #L2c7594.  call `engineNextBytes`(v0, v1) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom;.engineNextBytes:([B)V` @kind virtual;
  #L2c759a.  return v1 @kind object;
}
procedure `void` `engineNextBytes`(`com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom` v3 @kind this, `byte`[] v4 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom;.engineNextBytes:([B)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L2c76ec.  v0:= v3.`com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.mSeeded` @type ^`boolean` @kind boolean;
  #L2c76f0.  if v0 != 0 then goto L2c7702;
  #L2c76f4.  call temp:= `a`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes;.a:()[B` @kind static;
  #L2c76fa.  v0:= temp @kind object;
  #L2c76fc.  call `engineSetSeed`(v3, v0) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom;.engineSetSeed:([B)V` @kind virtual;
  #L2c7702.  v0:= `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.sLock` @type ^`java.lang.Object` @kind object;
  #L2c7706.  @monitorenter v0
  #L2c7708.  call temp:= `getUrandomInputStream`(v3) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom;.getUrandomInputStream:()Ljava/io/DataInputStream;` @kind direct;
  #L2c770e.  v1:= temp @kind object;
  #L2c7710.  @monitorexit v0
  #L2c7712.  @monitorenter v1
  #L2c7714.  call `readFully`(v1, v4) @signature `Ljava/io/DataInputStream;.readFully:([B)V` @kind virtual;
  #L2c771a.  @monitorexit v1
  #L2c771c.  return @kind void;
  #L2c771e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c7720.  @monitorexit v1
  #L2c7722.  throw v4;
  #L2c7724.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c7726.  @monitorexit v0
  #L2c7728.  throw v4;
  #L2c772a.  v4:= Exception @type ^`java.io.IOException` @kind object;
  #L2c772c.  v0:= new `java.lang.SecurityException`;
  #L2c7730.  v1:= new `java.lang.StringBuilder`;
  #L2c7734.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c773a.  v2:= "Failed to read from " @kind object;
  #L2c773e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c7744.  v2:= `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.URANDOM_FILE` @type ^`java.io.File` @kind object;
  #L2c7748.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c774e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c7754.  v1:= temp @kind object;
  #L2c7756.  call `<init>`(v0, v1, v4) @signature `Ljava/lang/SecurityException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L2c775c.  throw v0;
  catch `java.io.IOException` @[L2c7702..L2c7708] goto L2c772a;
  catch `java.lang.Throwable` @[L2c7708..L2c7712] goto L2c7724;
  catch `java.io.IOException` @[L2c7712..L2c7714] goto L2c772a;
  catch `java.lang.Throwable` @[L2c7714..L2c7722] goto L2c771e;
  catch `java.io.IOException` @[L2c7722..L2c7724] goto L2c772a;
  catch `java.lang.Throwable` @[L2c7726..L2c7728] goto L2c7724;
  catch `java.io.IOException` @[L2c7728..L2c772a] goto L2c772a;
}
procedure `void` `engineSetSeed`(`com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom` v3 @kind this, `byte`[] v4 @kind object) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom;.engineSetSeed:([B)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L2c77b4.  v0:= 1I;
  #L2c77b6.  v1:= `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.sLock` @type ^`java.lang.Object` @kind object;
  #L2c77ba.  @monitorenter v1
  #L2c77bc.  call temp:= `getUrandomOutputStream`(v3) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom;.getUrandomOutputStream:()Ljava/io/OutputStream;` @kind direct;
  #L2c77c2.  v2:= temp @kind object;
  #L2c77c4.  @monitorexit v1
  #L2c77c6.  call `write`(v2, v4) @signature `Ljava/io/OutputStream;.write:([B)V` @kind virtual;
  #L2c77cc.  call `flush`(v2) @signature `Ljava/io/OutputStream;.flush:()V` @kind virtual;
  #L2c77d2.  v3.`com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.mSeeded` @type ^`boolean` := v0 @kind boolean;
  #L2c77d6.  goto L2c781c;
  #L2c77d8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c77da.  @monitorexit v1
  #L2c77dc.  throw v4;
  #L2c77de.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c77e0.  goto L2c781e;
  #L2c77e2.  v4:= constclass @type ^`com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes` @kind object;
  #L2c77e6.  call temp:= `getSimpleName`(v4) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L2c77ec.  v4:= temp @kind object;
  #L2c77ee.  v1:= new `java.lang.StringBuilder`;
  #L2c77f2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c77f8.  v2:= "Failed to mix seed into " @kind object;
  #L2c77fc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c7802.  v2:= `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.URANDOM_FILE` @type ^`java.io.File` @kind object;
  #L2c7806.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c780c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c7812.  v1:= temp @kind object;
  #L2c7814.  call temp:= `w`(v4, v1) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2c781a.  goto L2c77d2;
  #L2c781c.  return @kind void;
  #L2c781e.  v3.`com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandom.mSeeded` @type ^`boolean` := v0 @kind boolean;
  #L2c7822.  goto L2c7826;
  #L2c7824.  throw v4;
  #L2c7826.  goto L2c7824;
  catch `java.io.IOException` @[L2c77b6..L2c77bc] goto L2c77e2;
  catch `java.lang.Throwable` @[L2c77b6..L2c77bc] goto L2c77de;
  catch `java.lang.Throwable` @[L2c77bc..L2c77c6] goto L2c77d8;
  catch `java.io.IOException` @[L2c77c6..L2c77d2] goto L2c77e2;
  catch `java.lang.Throwable` @[L2c77c6..L2c77d2] goto L2c77de;
  catch `java.lang.Throwable` @[L2c77da..L2c77dc] goto L2c77d8;
  catch `java.io.IOException` @[L2c77dc..L2c77de] goto L2c77e2;
  catch `java.lang.Throwable` @[L2c77dc..L2c77de] goto L2c77de;
  catch `java.lang.Throwable` @[L2c77e2..L2c781a] goto L2c77de;
}
