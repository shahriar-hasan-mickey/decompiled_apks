record `com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes` @kind class @AccessFlag PUBLIC_FINAL {
}
global `byte`[] `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes.BUILD_FINGERPRINT_AND_DEVICE_SERIAL` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes.VERSION_CODE_JELLY_BEAN` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes.VERSION_CODE_JELLY_BEAN_MR2` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2c79dc.  call temp:= `getBuildFingerprintAndDeviceSerial`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes;.getBuildFingerprintAndDeviceSerial:()[B` @kind static;
  #L2c79e2.  v0:= temp @kind object;
  #L2c79e4.  `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes.BUILD_FINGERPRINT_AND_DEVICE_SERIAL` @type ^`byte`[] := v0 @kind object;
  #L2c79e8.  return @kind void;
}
procedure `void` `<init>`(`com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes` v0 @kind this) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2c79fc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c7a02.  return @kind void;
}
procedure `byte`[] `a`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes;.a:()[B` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L2c7874.  call temp:= `generateSeed`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes;.generateSeed:()[B` @kind static;
  #L2c787a.  v0:= temp @kind object;
  #L2c787c.  return v0 @kind object;
}
procedure `void` `apply`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes;.apply:()V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2c7a14.  call `applyOpenSSLFix`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes;.applyOpenSSLFix:()V` @kind static;
  #L2c7a1a.  call `installLinuxPRNGSecureRandom`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes;.installLinuxPRNGSecureRandom:()V` @kind static;
  #L2c7a20.  return @kind void;
}
procedure `void` `applyOpenSSLFix`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes;.applyOpenSSLFix:()V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2c7a34.  v0:= "org.apache.harmony.xnet.provider.jsse.NativeCrypto" @kind object;
  #L2c7a38.  v1:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2c7a3c.  v2:= 16I;
  #L2c7a40.  if v1 < v2 then goto L2c7b2a;
  #L2c7a44.  v2:= 18I;
  #L2c7a48.  if v1 <= v2 then goto L2c7a4e;
  #L2c7a4c.  goto L2c7b2a;
  #L2c7a4e.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L2c7a54.  v1:= temp @kind object;
  #L2c7a56.  v2:= "RAND_seed" @kind object;
  #L2c7a5a.  v3:= 1I;
  #L2c7a5c.  v4:= new `java.lang.Class`[v3];
  #L2c7a60.  v5:= constclass @type ^`byte`[] @kind object;
  #L2c7a64.  v6:= 0I;
  #L2c7a66.  v4[v6]:= v5 @kind object;
  #L2c7a6a.  call temp:= `getMethod`(v1, v2, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L2c7a70.  v1:= temp @kind object;
  #L2c7a72.  v2:= new `java.lang.Object`[v3];
  #L2c7a76.  call temp:= `generateSeed`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes;.generateSeed:()[B` @kind static;
  #L2c7a7c.  v4:= temp @kind object;
  #L2c7a7e.  v2[v6]:= v4 @kind object;
  #L2c7a82.  v4:= 0I;
  #L2c7a84.  call temp:= `invoke`(v1, v4, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2c7a8a.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L2c7a90.  v0:= temp @kind object;
  #L2c7a92.  v1:= "RAND_load_file" @kind object;
  #L2c7a96.  v2:= 2I;
  #L2c7a98.  v5:= new `java.lang.Class`[v2];
  #L2c7a9c.  v7:= constclass @type ^`java.lang.String` @kind object;
  #L2c7aa0.  v5[v6]:= v7 @kind object;
  #L2c7aa4.  v7:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L2c7aa8.  v5[v3]:= v7 @kind object;
  #L2c7aac.  call temp:= `getMethod`(v0, v1, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L2c7ab2.  v0:= temp @kind object;
  #L2c7ab4.  v1:= new `java.lang.Object`[v2];
  #L2c7ab8.  v2:= "/dev/urandom" @kind object;
  #L2c7abc.  v1[v6]:= v2 @kind object;
  #L2c7ac0.  v2:= 1024I;
  #L2c7ac4.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2c7aca.  v5:= temp @kind object;
  #L2c7acc.  v1[v3]:= v5 @kind object;
  #L2c7ad0.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2c7ad6.  v0:= temp @kind object;
  #L2c7ad8.  v0:= (`java.lang.Integer`) v0 @kind object;
  #L2c7adc.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2c7ae2.  v0:= temp;
  #L2c7ae4.  if v0 != v2 then goto L2c7aea;
  #L2c7ae8.  return @kind void;
  #L2c7aea.  v1:= new `java.io.IOException`;
  #L2c7aee.  v2:= new `java.lang.StringBuilder`;
  #L2c7af2.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c7af8.  v3:= "Unexpected number of bytes read from Linux PRNG: " @kind object;
  #L2c7afc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c7b02.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c7b08.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c7b0e.  v0:= temp @kind object;
  #L2c7b10.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c7b16.  throw v1;
  #L2c7b18.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L2c7b1a.  v1:= new `java.lang.SecurityException`;
  #L2c7b1e.  v2:= "Failed to seed OpenSSL PRNG" @kind object;
  #L2c7b22.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/SecurityException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L2c7b28.  throw v1;
  #L2c7b2a.  return @kind void;
  catch `java.lang.Exception` @[L2c7a4e..L2c7b18] goto L2c7b18;
}
procedure `byte`[] `generateSeed`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes;.generateSeed:()[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c7890.  v0:= new `java.io.ByteArrayOutputStream`;
  #L2c7894.  call `<init>`(v0) @signature `Ljava/io/ByteArrayOutputStream;.<init>:()V` @kind direct;
  #L2c789a.  v1:= new `java.io.DataOutputStream`;
  #L2c789e.  call `<init>`(v1, v0) @signature `Ljava/io/DataOutputStream;.<init>:(Ljava/io/OutputStream;)V` @kind direct;
  #L2c78a4.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L2c78aa.  v2:= temp @kind wide;
  #L2c78ac.  call `writeLong`(v1, v2) @signature `Ljava/io/DataOutputStream;.writeLong:(J)V` @kind virtual;
  #L2c78b2.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L2c78b8.  v2:= temp @kind wide;
  #L2c78ba.  call `writeLong`(v1, v2) @signature `Ljava/io/DataOutputStream;.writeLong:(J)V` @kind virtual;
  #L2c78c0.  call temp:= `myPid`() @signature `Landroid/os/Process;.myPid:()I` @kind static;
  #L2c78c6.  v2:= temp;
  #L2c78c8.  call `writeInt`(v1, v2) @signature `Ljava/io/DataOutputStream;.writeInt:(I)V` @kind virtual;
  #L2c78ce.  call temp:= `myUid`() @signature `Landroid/os/Process;.myUid:()I` @kind static;
  #L2c78d4.  v2:= temp;
  #L2c78d6.  call `writeInt`(v1, v2) @signature `Ljava/io/DataOutputStream;.writeInt:(I)V` @kind virtual;
  #L2c78dc.  v2:= `@@com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes.BUILD_FINGERPRINT_AND_DEVICE_SERIAL` @type ^`byte`[] @kind object;
  #L2c78e0.  call `write`(v1, v2) @signature `Ljava/io/DataOutputStream;.write:([B)V` @kind virtual;
  #L2c78e6.  call `close`(v1) @signature `Ljava/io/DataOutputStream;.close:()V` @kind virtual;
  #L2c78ec.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L2c78f2.  v0:= temp @kind object;
  #L2c78f4.  return v0 @kind object;
  #L2c78f6.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L2c78f8.  v1:= new `java.lang.SecurityException`;
  #L2c78fc.  v2:= "Failed to generate seed" @kind object;
  #L2c7900.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/SecurityException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L2c7906.  throw v1;
  catch `java.io.IOException` @[L2c7890..L2c78f4] goto L2c78f6;
}
procedure `byte`[] `getBuildFingerprintAndDeviceSerial`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes;.getBuildFingerprintAndDeviceSerial:()[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2c7928.  v0:= new `java.lang.StringBuilder`;
  #L2c792c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c7932.  v1:= `@@android.os.Build.FINGERPRINT` @type ^`java.lang.String` @kind object;
  #L2c7936.  if v1 == 0 then goto L2c7940;
  #L2c793a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c7940.  call temp:= `getDeviceSerialNumber`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes;.getDeviceSerialNumber:()Ljava/lang/String;` @kind static;
  #L2c7946.  v1:= temp @kind object;
  #L2c7948.  if v1 == 0 then goto L2c7952;
  #L2c794c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c7952.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c7958.  v0:= temp @kind object;
  #L2c795a.  v1:= "UTF-8" @kind object;
  #L2c795e.  call temp:= `getBytes`(v0, v1) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L2c7964.  v0:= temp @kind object;
  #L2c7966.  return v0 @kind object;
  #L2c7968.  v0:= new `java.lang.RuntimeException`;
  #L2c796c.  v1:= "UTF-8 encoding not supported" @kind object;
  #L2c7970.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c7976.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[L2c7952..L2c7966] goto L2c7968;
}
procedure `java.lang.String` `getDeviceSerialNumber`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes;.getDeviceSerialNumber:()Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2c7998.  v0:= 0I;
  #L2c799a.  v1:= constclass @type ^`android.os.Build` @kind object;
  #L2c799e.  v2:= "SERIAL" @kind object;
  #L2c79a2.  call temp:= `getField`(v1, v2) @signature `Ljava/lang/Class;.getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L2c79a8.  v1:= temp @kind object;
  #L2c79aa.  call temp:= `get`(v1, v0) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2c79b0.  v1:= temp @kind object;
  #L2c79b2.  v1:= (`java.lang.String`) v1 @kind object;
  #L2c79b6.  return v1 @kind object;
  #L2c79b8.  return v0 @kind object;
  catch `java.lang.Exception` @[L2c799a..L2c79b6] goto L2c79b8;
}
procedure `void` `installLinuxPRNGSecureRandom`() @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes;.installLinuxPRNGSecureRandom:()V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2c7b4c.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2c7b50.  v1:= 18I;
  #L2c7b54.  if v0 <= v1 then goto L2c7b5a;
  #L2c7b58.  return @kind void;
  #L2c7b5a.  v0:= "SecureRandom.SHA1PRNG" @kind object;
  #L2c7b5e.  call temp:= `getProviders`(v0) @signature `Ljava/security/Security;.getProviders:(Ljava/lang/String;)[Ljava/security/Provider;` @kind static;
  #L2c7b64.  v0:= temp @kind object;
  #L2c7b66.  v1:= constclass @type ^`java.security.Security` @kind object;
  #L2c7b6a.  @monitorenter v1
  #L2c7b6c.  v2:= 1I;
  #L2c7b6e.  if v0 == 0 then goto L2c7ba6;
  #L2c7b72.  v3:= length @variable v0;
  #L2c7b74.  if v3 < v2 then goto L2c7ba6;
  #L2c7b78.  v3:= 0I;
  #L2c7b7a.  v0:= v0[v3] @kind object;
  #L2c7b7e.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2c7b84.  v0:= temp @kind object;
  #L2c7b86.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L2c7b8c.  v0:= temp @kind object;
  #L2c7b8e.  v3:= constclass @type ^`com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandomProvider` @kind object;
  #L2c7b92.  call temp:= `getSimpleName`(v3) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L2c7b98.  v3:= temp @kind object;
  #L2c7b9a.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2c7ba0.  v0:= temp;
  #L2c7ba2.  if v0 != 0 then goto L2c7bb6;
  #L2c7ba6.  v0:= new `com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandomProvider`;
  #L2c7baa.  call `<init>`(v0) @signature `Lcom/tozny/crypto/android/AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandomProvider;.<init>:()V` @kind direct;
  #L2c7bb0.  call temp:= `insertProviderAt`(v0, v2) @signature `Ljava/security/Security;.insertProviderAt:(Ljava/security/Provider;I)I` @kind static;
  #L2c7bb6.  v0:= new `java.security.SecureRandom`;
  #L2c7bba.  call `<init>`(v0) @signature `Ljava/security/SecureRandom;.<init>:()V` @kind direct;
  #L2c7bc0.  call temp:= `getProvider`(v0) @signature `Ljava/security/SecureRandom;.getProvider:()Ljava/security/Provider;` @kind virtual;
  #L2c7bc6.  v2:= temp @kind object;
  #L2c7bc8.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2c7bce.  v2:= temp @kind object;
  #L2c7bd0.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L2c7bd6.  v2:= temp @kind object;
  #L2c7bd8.  v3:= constclass @type ^`com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandomProvider` @kind object;
  #L2c7bdc.  call temp:= `getSimpleName`(v3) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L2c7be2.  v3:= temp @kind object;
  #L2c7be4.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2c7bea.  v2:= temp;
  #L2c7bec.  if v2 == 0 then goto L2c7c82;
  #L2c7bf0.  v0:= 0I;
  #L2c7bf2.  v2:= "SHA1PRNG" @kind object;
  #L2c7bf6.  call temp:= `getInstance`(v2) @signature `Ljava/security/SecureRandom;.getInstance:(Ljava/lang/String;)Ljava/security/SecureRandom;` @kind static;
  #L2c7bfc.  v0:= temp @kind object;
  #L2c7bfe.  goto L2c7c10;
  #L2c7c00.  v2:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L2c7c02.  v3:= new `java.lang.SecurityException`;
  #L2c7c06.  v4:= "SHA1PRNG not available" @kind object;
  #L2c7c0a.  call `<init>`(v3, v4, v2) @signature `Ljava/lang/SecurityException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L2c7c10.  call temp:= `getProvider`(v0) @signature `Ljava/security/SecureRandom;.getProvider:()Ljava/security/Provider;` @kind virtual;
  #L2c7c16.  v2:= temp @kind object;
  #L2c7c18.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2c7c1e.  v2:= temp @kind object;
  #L2c7c20.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L2c7c26.  v2:= temp @kind object;
  #L2c7c28.  v3:= constclass @type ^`com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes$LinuxPRNGSecureRandomProvider` @kind object;
  #L2c7c2c.  call temp:= `getSimpleName`(v3) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L2c7c32.  v3:= temp @kind object;
  #L2c7c34.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2c7c3a.  v2:= temp;
  #L2c7c3c.  if v2 == 0 then goto L2c7c44;
  #L2c7c40.  @monitorexit v1
  #L2c7c42.  return @kind void;
  #L2c7c44.  v2:= new `java.lang.SecurityException`;
  #L2c7c48.  v3:= new `java.lang.StringBuilder`;
  #L2c7c4c.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c7c52.  v4:= "SecureRandom.getInstance(\"SHA1PRNG\") backed by wrong Provider: " @kind object;
  #L2c7c56.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c7c5c.  call temp:= `getProvider`(v0) @signature `Ljava/security/SecureRandom;.getProvider:()Ljava/security/Provider;` @kind virtual;
  #L2c7c62.  v0:= temp @kind object;
  #L2c7c64.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2c7c6a.  v0:= temp @kind object;
  #L2c7c6c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c7c72.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c7c78.  v0:= temp @kind object;
  #L2c7c7a.  call `<init>`(v2, v0) @signature `Ljava/lang/SecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c7c80.  throw v2;
  #L2c7c82.  v2:= new `java.lang.SecurityException`;
  #L2c7c86.  v3:= new `java.lang.StringBuilder`;
  #L2c7c8a.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c7c90.  v4:= "new SecureRandom() backed by wrong Provider: " @kind object;
  #L2c7c94.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c7c9a.  call temp:= `getProvider`(v0) @signature `Ljava/security/SecureRandom;.getProvider:()Ljava/security/Provider;` @kind virtual;
  #L2c7ca0.  v0:= temp @kind object;
  #L2c7ca2.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2c7ca8.  v0:= temp @kind object;
  #L2c7caa.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c7cb0.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c7cb6.  v0:= temp @kind object;
  #L2c7cb8.  call `<init>`(v2, v0) @signature `Ljava/lang/SecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c7cbe.  throw v2;
  #L2c7cc0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c7cc2.  @monitorexit v1
  #L2c7cc4.  throw v0;
  catch `java.lang.Throwable` @[L2c7b72..L2c7bec] goto L2c7cc0;
  catch `java.security.NoSuchAlgorithmException` @[L2c7bf2..L2c7bfe] goto L2c7c00;
  catch `java.lang.Throwable` @[L2c7bf2..L2c7bfe] goto L2c7cc0;
  catch `java.lang.Throwable` @[L2c7c02..L2c7cc4] goto L2c7cc0;
}
