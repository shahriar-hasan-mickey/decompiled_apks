record `dagger.internal.Preconditions` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`dagger.internal.Preconditions` v0 @kind this) @signature `Ldagger/internal/Preconditions;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2cb57c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2cb582.  return @kind void;
}
procedure `void` `checkBuilderRequirement`(`java.lang.Object` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Ldagger/internal/Preconditions;.checkBuilderRequirement:(Ljava/lang/Object;Ljava/lang/Class;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2cb594.  if v1 == 0 then goto L2cb59a;
  #L2cb598.  return @kind void;
  #L2cb59a.  v1:= new `java.lang.IllegalStateException`;
  #L2cb59e.  v0:= new `java.lang.StringBuilder`;
  #L2cb5a2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2cb5a8.  call temp:= `getCanonicalName`(v2) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L2cb5ae.  v2:= temp @kind object;
  #L2cb5b0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cb5b6.  v2:= " must be set" @kind object;
  #L2cb5ba.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cb5c0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2cb5c6.  v2:= temp @kind object;
  #L2cb5c8.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cb5ce.  throw v1;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2cb4b4.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2cb4ba.  return v0 @kind object;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2cb4cc.  if v0 == 0 then goto L2cb4d2;
  #L2cb4d0.  return v0 @kind object;
  #L2cb4d2.  v0:= new `java.lang.NullPointerException`;
  #L2cb4d6.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cb4dc.  throw v0;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2cb4f0.  if v2 != 0 then goto L2cb56a;
  #L2cb4f4.  v2:= "%s" @kind object;
  #L2cb4f8.  call temp:= `contains`(v3, v2) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L2cb4fe.  v0:= temp;
  #L2cb500.  if v0 == 0 then goto L2cb55a;
  #L2cb504.  call temp:= `indexOf`(v3, v2) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L2cb50a.  v0:= temp;
  #L2cb50c.  call temp:= `lastIndexOf`(v3, v2) @signature `Ljava/lang/String;.lastIndexOf:(Ljava/lang/String;)I` @kind virtual;
  #L2cb512.  v1:= temp;
  #L2cb514.  if v0 != v1 then goto L2cb54a;
  #L2cb518.  v0:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L2cb51c.  if v0 == 0 then goto L2cb52e;
  #L2cb520.  v4:= (`java.lang.Class`) v4 @kind object;
  #L2cb524.  call temp:= `getCanonicalName`(v4) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L2cb52a.  v4:= temp @kind object;
  #L2cb52c.  goto L2cb536;
  #L2cb52e.  call temp:= `valueOf`(v4) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2cb534.  v4:= temp @kind object;
  #L2cb536.  v0:= new `java.lang.NullPointerException`;
  #L2cb53a.  call temp:= `replace`(v3, v2, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L2cb540.  v2:= temp @kind object;
  #L2cb542.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cb548.  throw v0;
  #L2cb54a.  v2:= new `java.lang.IllegalArgumentException`;
  #L2cb54e.  v3:= "errorMessageTemplate has more than one format specifier" @kind object;
  #L2cb552.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cb558.  throw v2;
  #L2cb55a.  v2:= new `java.lang.IllegalArgumentException`;
  #L2cb55e.  v3:= "errorMessageTemplate has no format specifiers" @kind object;
  #L2cb562.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cb568.  throw v2;
  #L2cb56a.  return v2 @kind object;
}
