record `dagger.internal.DaggerCollections` @kind class @AccessFlag PUBLIC_FINAL {
}
global `int` `@@dagger.internal.DaggerCollections.MAX_POWER_OF_TWO` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`dagger.internal.DaggerCollections` v0 @kind this) @signature `Ldagger/internal/DaggerCollections;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2cacc0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2cacc6.  return @kind void;
}
procedure `java.util.HashSet` `a`(`int` v1 ) @signature `Ldagger/internal/DaggerCollections;.a:(I)Ljava/util/HashSet;` @AccessFlag STATIC {
    temp;
    v0;

  #L2cac4c.  v0:= new `java.util.HashSet`;
  #L2cac50.  call temp:= `calculateInitialCapacity`(v1) @signature `Ldagger/internal/DaggerCollections;.calculateInitialCapacity:(I)I` @kind static;
  #L2cac56.  v1:= temp;
  #L2cac58.  call `<init>`(v0, v1) @signature `Ljava/util/HashSet;.<init>:(I)V` @kind direct;
  #L2cac5e.  return v0 @kind object;
}
procedure `int` `calculateInitialCapacity`(`int` v1 ) @signature `Ldagger/internal/DaggerCollections;.calculateInitialCapacity:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2cac0c.  v0:= 3I;
  #L2cac0e.  if v1 >= v0 then goto L2cac18;
  #L2cac12.  v1:= v1 + 1;
  #L2cac16.  return v1;
  #L2cac18.  v0:= 2.0F;
  #L2cac1c.  if v1 >= v0 then goto L2cac32;
  #L2cac20.  v1:= (`float`) v1 @kind i2f;
  #L2cac22.  v0:= 0.75F;
  #L2cac26.  v1:= v1 / v0 @kind float;
  #L2cac28.  v0:= 1.0F;
  #L2cac2c.  v1:= v1 + v0 @kind float;
  #L2cac2e.  v1:= (`int`) v1 @kind f2i;
  #L2cac30.  return v1;
  #L2cac32.  v1:= 2147483647I;
  #L2cac38.  return v1;
}
procedure `boolean` `hasDuplicates`(`java.util.List` v3 @kind object) @signature `Ldagger/internal/DaggerCollections;.hasDuplicates:(Ljava/util/List;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2cabc8.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2cabce.  v0:= temp;
  #L2cabd0.  v1:= 0I;
  #L2cabd2.  v2:= 2I;
  #L2cabd4.  if v0 >= v2 then goto L2cabda;
  #L2cabd8.  return v1;
  #L2cabda.  v0:= new `java.util.HashSet`;
  #L2cabde.  call `<init>`(v0, v3) @signature `Ljava/util/HashSet;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L2cabe4.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2cabea.  v3:= temp;
  #L2cabec.  call temp:= `size`(v0) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L2cabf2.  v0:= temp;
  #L2cabf4.  if v3 == v0 then goto L2cabfa;
  #L2cabf8.  v1:= 1I;
  #L2cabfa.  return v1;
}
procedure `java.util.LinkedHashMap` `newLinkedHashMapWithExpectedSize`(`int` v1 ) @signature `Ldagger/internal/DaggerCollections;.newLinkedHashMapWithExpectedSize:(I)Ljava/util/LinkedHashMap;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2cac70.  v0:= new `java.util.LinkedHashMap`;
  #L2cac74.  call temp:= `calculateInitialCapacity`(v1) @signature `Ldagger/internal/DaggerCollections;.calculateInitialCapacity:(I)I` @kind static;
  #L2cac7a.  v1:= temp;
  #L2cac7c.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(I)V` @kind direct;
  #L2cac82.  return v0 @kind object;
}
procedure `java.util.List` `presizedList`(`int` v1 ) @signature `Ldagger/internal/DaggerCollections;.presizedList:(I)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2cac94.  if v1 != 0 then goto L2caca2;
  #L2cac98.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L2cac9e.  v1:= temp @kind object;
  #L2caca0.  return v1 @kind object;
  #L2caca2.  v0:= new `java.util.ArrayList`;
  #L2caca6.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2cacac.  return v0 @kind object;
}
