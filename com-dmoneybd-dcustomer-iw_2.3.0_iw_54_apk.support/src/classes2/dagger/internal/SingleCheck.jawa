record `dagger.internal.SingleCheck` @kind class @AccessFlag PUBLIC_FINAL extends `javax.inject.Provider` @kind interface {
  `java.lang.Object` `dagger.internal.SingleCheck.instance` @AccessFlag PRIVATE_VOLATILE;
  `javax.inject.Provider` `dagger.internal.SingleCheck.provider` @AccessFlag PRIVATE_VOLATILE;
}
global `java.lang.Object` `@@dagger.internal.SingleCheck.UNINITIALIZED` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ldagger/internal/SingleCheck;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2cba84.  v0:= new `java.lang.Object`;
  #L2cba88.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2cba8e.  `@@dagger.internal.SingleCheck.UNINITIALIZED` @type ^`java.lang.Object` := v0 @kind object;
  #L2cba92.  return @kind void;
}
procedure `void` `<init>`(`dagger.internal.SingleCheck` v1 @kind this, `javax.inject.Provider` v2 @kind object) @signature `Ldagger/internal/SingleCheck;.<init>:(Ljavax/inject/Provider;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L2cbaa4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2cbaaa.  v0:= `@@dagger.internal.SingleCheck.UNINITIALIZED` @type ^`java.lang.Object` @kind object;
  #L2cbaae.  v1.`dagger.internal.SingleCheck.instance` @type ^`java.lang.Object` := v0 @kind object;
  #L2cbab2.  v1.`dagger.internal.SingleCheck.provider` @type ^`javax.inject.Provider` := v2 @kind object;
  #L2cbab6.  return @kind void;
}
procedure `javax.inject.Provider` `provider`(`javax.inject.Provider` v1 @kind object) @signature `Ldagger/internal/SingleCheck;.provider:(Ljavax/inject/Provider;)Ljavax/inject/Provider;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2cba48.  v0:= instanceof @variable v1 @type ^`dagger.internal.SingleCheck` @kind boolean;
  #L2cba4c.  if v0 != 0 then goto L2cba72;
  #L2cba50.  v0:= instanceof @variable v1 @type ^`dagger.internal.DoubleCheck` @kind boolean;
  #L2cba54.  if v0 == 0 then goto L2cba5a;
  #L2cba58.  goto L2cba72;
  #L2cba5a.  v0:= new `dagger.internal.SingleCheck`;
  #L2cba5e.  call temp:= `checkNotNull`(v1) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2cba64.  v1:= temp @kind object;
  #L2cba66.  v1:= (`javax.inject.Provider`) v1 @kind object;
  #L2cba6a.  call `<init>`(v0, v1) @signature `Ldagger/internal/SingleCheck;.<init>:(Ljavax/inject/Provider;)V` @kind direct;
  #L2cba70.  return v0 @kind object;
  #L2cba72.  return v1 @kind object;
}
procedure `java.lang.Object` `get`(`dagger.internal.SingleCheck` v2 @kind this) @signature `Ldagger/internal/SingleCheck;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2cba08.  v0:= v2.`dagger.internal.SingleCheck.instance` @type ^`java.lang.Object` @kind object;
  #L2cba0c.  v1:= `@@dagger.internal.SingleCheck.UNINITIALIZED` @type ^`java.lang.Object` @kind object;
  #L2cba10.  if v0 != v1 then goto L2cba34;
  #L2cba14.  v0:= v2.`dagger.internal.SingleCheck.provider` @type ^`javax.inject.Provider` @kind object;
  #L2cba18.  if v0 != 0 then goto L2cba22;
  #L2cba1c.  v0:= v2.`dagger.internal.SingleCheck.instance` @type ^`java.lang.Object` @kind object;
  #L2cba20.  goto L2cba34;
  #L2cba22.  call temp:= `get`(v0) @signature `Ljavax/inject/Provider;.get:()Ljava/lang/Object;` @kind interface;
  #L2cba28.  v0:= temp @kind object;
  #L2cba2a.  v2.`dagger.internal.SingleCheck.instance` @type ^`java.lang.Object` := v0 @kind object;
  #L2cba2e.  v1:= 0I;
  #L2cba30.  v2.`dagger.internal.SingleCheck.provider` @type ^`javax.inject.Provider` := v1 @kind object;
  #L2cba34.  return v0 @kind object;
}
