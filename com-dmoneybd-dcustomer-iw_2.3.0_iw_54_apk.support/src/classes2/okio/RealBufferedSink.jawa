record `okio.RealBufferedSink` @kind class @AccessFlag FINAL extends `okio.BufferedSink` @kind interface {
  `boolean` `okio.RealBufferedSink.a` @AccessFlag ;
  `okio.Buffer` `okio.RealBufferedSink.buffer` @AccessFlag PUBLIC_FINAL;
  `okio.Sink` `okio.RealBufferedSink.sink` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`okio.RealBufferedSink` v1 @kind this, `okio.Sink` v2 @kind object) @signature `Lokio/RealBufferedSink;.<init>:(Lokio/Sink;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2e4b08.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2e4b0e.  v0:= new `okio.Buffer`;
  #L2e4b12.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L2e4b18.  v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` := v0 @kind object;
  #L2e4b1c.  if v2 == 0 then goto L2e4b26;
  #L2e4b20.  v1.`okio.RealBufferedSink.sink` @type ^`okio.Sink` := v2 @kind object;
  #L2e4b24.  return @kind void;
  #L2e4b26.  v2:= new `java.lang.NullPointerException`;
  #L2e4b2a.  v0:= "sink == null" @kind object;
  #L2e4b2e.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e4b34.  throw v2;
}
procedure `okio.Buffer` `buffer`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e45e8.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e45ec.  return v0 @kind object;
}
procedure `void` `close`(`okio.RealBufferedSink` v7 @kind this) @signature `Lokio/RealBufferedSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2e4b48.  v0:= v7.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e4b4c.  if v0 == 0 then goto L2e4b52;
  #L2e4b50.  return @kind void;
  #L2e4b52.  v0:= 0I;
  #L2e4b54.  v1:= v7.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e4b58.  v2:= v1.`okio.Buffer.b` @type ^`long` @kind wide;
  #L2e4b5c.  v4:= 0L;
  #L2e4b60.  v6:= lcmp(v2, v4);
  #L2e4b64.  if v6 <= 0 then goto L2e4b76;
  #L2e4b68.  v4:= v7.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L2e4b6c.  call `write`(v4, v1, v2) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L2e4b72.  goto L2e4b76;
  #L2e4b74.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e4b76.  v1:= v7.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L2e4b7a.  call `close`(v1) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L2e4b80.  goto L2e4b8a;
  #L2e4b82.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e4b84.  if v0 != 0 then goto L2e4b8a;
  #L2e4b88.  v0:= v1 @kind object;
  #L2e4b8a.  v1:= 1I;
  #L2e4b8c.  v7.`okio.RealBufferedSink.a` @type ^`boolean` := v1 @kind boolean;
  #L2e4b90.  if v0 == 0 then goto L2e4b9a;
  #L2e4b94.  call `sneakyRethrow`(v0) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @kind static;
  #L2e4b9a.  return @kind void;
  catch `java.lang.Throwable` @[L2e4b54..L2e4b72] goto L2e4b74;
  catch `java.lang.Throwable` @[L2e4b76..L2e4b80] goto L2e4b82;
}
procedure `okio.BufferedSink` `emit`(`okio.RealBufferedSink` v5 @kind this) @signature `Lokio/RealBufferedSink;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2e4600.  v0:= v5.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e4604.  if v0 != 0 then goto L2e4630;
  #L2e4608.  v0:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e460c.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L2e4612.  v0:= temp @kind wide;
  #L2e4614.  v2:= 0L;
  #L2e4618.  v4:= lcmp(v0, v2);
  #L2e461c.  if v4 <= 0 then goto L2e462e;
  #L2e4620.  v2:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L2e4624.  v3:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e4628.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L2e462e.  return v5 @kind object;
  #L2e4630.  v0:= new `java.lang.IllegalStateException`;
  #L2e4634.  v1:= "closed" @kind object;
  #L2e4638.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e463e.  throw v0;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.RealBufferedSink` v5 @kind this) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2e4650.  v0:= v5.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e4654.  if v0 != 0 then goto L2e4680;
  #L2e4658.  v0:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e465c.  call temp:= `completeSegmentByteCount`(v0) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @kind virtual;
  #L2e4662.  v0:= temp @kind wide;
  #L2e4664.  v2:= 0L;
  #L2e4668.  v4:= lcmp(v0, v2);
  #L2e466c.  if v4 <= 0 then goto L2e467e;
  #L2e4670.  v2:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L2e4674.  v3:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e4678.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L2e467e.  return v5 @kind object;
  #L2e4680.  v0:= new `java.lang.IllegalStateException`;
  #L2e4684.  v1:= "closed" @kind object;
  #L2e4688.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e468e.  throw v0;
}
procedure `void` `flush`(`okio.RealBufferedSink` v6 @kind this) @signature `Lokio/RealBufferedSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2e4bc4.  v0:= v6.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e4bc8.  if v0 != 0 then goto L2e4bf6;
  #L2e4bcc.  v0:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e4bd0.  v1:= v0.`okio.Buffer.b` @type ^`long` @kind wide;
  #L2e4bd4.  v3:= 0L;
  #L2e4bd8.  v5:= lcmp(v1, v3);
  #L2e4bdc.  if v5 <= 0 then goto L2e4bea;
  #L2e4be0.  v3:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L2e4be4.  call `write`(v3, v0, v1) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L2e4bea.  v0:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L2e4bee.  call `flush`(v0) @signature `Lokio/Sink;.flush:()V` @kind interface;
  #L2e4bf4.  return @kind void;
  #L2e4bf6.  v0:= new `java.lang.IllegalStateException`;
  #L2e4bfa.  v1:= "closed" @kind object;
  #L2e4bfe.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e4c04.  throw v0;
}
procedure `boolean` `isOpen`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e44dc.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e44e0.  v0:= v0 ^~ 1;
  #L2e44e4.  return v0;
}
procedure `java.io.OutputStream` `outputStream`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e4534.  v0:= new `okio.RealBufferedSink$1`;
  #L2e4538.  call `<init>`(v0, v1) @signature `Lokio/RealBufferedSink$1;.<init>:(Lokio/RealBufferedSink;)V` @kind direct;
  #L2e453e.  return v0 @kind object;
}
procedure `okio.Timeout` `timeout`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e4ae8.  v0:= v1.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L2e4aec.  call temp:= `timeout`(v0) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L2e4af2.  v0:= temp @kind object;
  #L2e4af4.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.RealBufferedSink` v2 @kind this) @signature `Lokio/RealBufferedSink;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2e4550.  v0:= new `java.lang.StringBuilder`;
  #L2e4554.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2e455a.  v1:= "buffer(" @kind object;
  #L2e455e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e4564.  v1:= v2.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L2e4568.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e456e.  v1:= ")" @kind object;
  #L2e4572.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e4578.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2e457e.  v0:= temp @kind object;
  #L2e4580.  return v0 @kind object;
}
procedure `int` `write`(`okio.RealBufferedSink` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Lokio/RealBufferedSink;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e44f8.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e44fc.  if v0 != 0 then goto L2e4514;
  #L2e4500.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e4504.  call temp:= `write`(v0, v2) @signature `Lokio/Buffer;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L2e450a.  v2:= temp;
  #L2e450c.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e4512.  return v2;
  #L2e4514.  v2:= new `java.lang.IllegalStateException`;
  #L2e4518.  v0:= "closed" @kind object;
  #L2e451c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e4522.  throw v2;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/RealBufferedSink;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e4718.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e471c.  if v0 != 0 then goto L2e4734;
  #L2e4720.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e4724.  call temp:= `write`(v0, v2) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L2e472a.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e4730.  v2:= temp @kind object;
  #L2e4732.  return v2 @kind object;
  #L2e4734.  v2:= new `java.lang.IllegalStateException`;
  #L2e4738.  v0:= "closed" @kind object;
  #L2e473c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e4742.  throw v2;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v5 @kind this, `okio.Source` v6 @kind object, `long` v7 ) @signature `Lokio/RealBufferedSink;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2e4754.  v0:= 0L;
  #L2e4758.  v2:= lcmp(v7, v0);
  #L2e475c.  if v2 <= 0 then goto L2e478e;
  #L2e4760.  v0:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e4764.  call temp:= `read`(v6, v0, v7) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L2e476a.  v0:= temp @kind wide;
  #L2e476c.  v2:= -1L;
  #L2e4770.  v4:= lcmp(v0, v2);
  #L2e4774.  if v4 == 0 then goto L2e4782;
  #L2e4778.  v7:= v7 - v0 @kind long;
  #L2e477a.  call temp:= `emitCompleteSegments`(v5) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e4780.  goto L2e4754;
  #L2e4782.  v6:= new `java.io.EOFException`;
  #L2e4786.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L2e478c.  throw v6;
  #L2e478e.  return v5 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v1 @kind this, `byte`[] v2 @kind object) @signature `Lokio/RealBufferedSink;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e46a0.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e46a4.  if v0 != 0 then goto L2e46bc;
  #L2e46a8.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e46ac.  call temp:= `write`(v0, v2) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L2e46b2.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e46b8.  v2:= temp @kind object;
  #L2e46ba.  return v2 @kind object;
  #L2e46bc.  v2:= new `java.lang.IllegalStateException`;
  #L2e46c0.  v0:= "closed" @kind object;
  #L2e46c4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e46ca.  throw v2;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/RealBufferedSink;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e46dc.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e46e0.  if v0 != 0 then goto L2e46f8;
  #L2e46e4.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e46e8.  call temp:= `write`(v0, v2, v3, v4) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L2e46ee.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e46f4.  v2:= temp @kind object;
  #L2e46f6.  return v2 @kind object;
  #L2e46f8.  v2:= new `java.lang.IllegalStateException`;
  #L2e46fc.  v3:= "closed" @kind object;
  #L2e4700.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e4706.  throw v2;
}
procedure `void` `write`(`okio.RealBufferedSink` v1 @kind this, `okio.Buffer` v2 @kind object, `long` v3 ) @signature `Lokio/RealBufferedSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e4c18.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e4c1c.  if v0 != 0 then goto L2e4c32;
  #L2e4c20.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e4c24.  call `write`(v0, v2, v3) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L2e4c2a.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e4c30.  return @kind void;
  #L2e4c32.  v2:= new `java.lang.IllegalStateException`;
  #L2e4c36.  v3:= "closed" @kind object;
  #L2e4c3a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e4c40.  throw v2;
}
procedure `long` `writeAll`(`okio.RealBufferedSink` v7 @kind this, `okio.Source` v8 @kind object) @signature `Lokio/RealBufferedSink;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2e4594.  if v8 == 0 then goto L2e45c4;
  #L2e4598.  v0:= 0L;
  #L2e459c.  v2:= v7.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e45a0.  v3:= 8192L;
  #L2e45a4.  call temp:= `read`(v8, v2, v3) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L2e45aa.  v2:= temp @kind wide;
  #L2e45ac.  v4:= -1L;
  #L2e45b0.  v6:= lcmp(v2, v4);
  #L2e45b4.  if v6 == 0 then goto L2e45c2;
  #L2e45b8.  v0:= v0 + v2 @kind long;
  #L2e45ba.  call temp:= `emitCompleteSegments`(v7) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e45c0.  goto L2e459c;
  #L2e45c2.  return v0 @kind wide;
  #L2e45c4.  v8:= new `java.lang.IllegalArgumentException`;
  #L2e45c8.  v0:= "source == null" @kind object;
  #L2e45cc.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e45d2.  goto L2e45d6;
  #L2e45d4.  throw v8;
  #L2e45d6.  goto L2e45d4;
}
procedure `okio.BufferedSink` `writeByte`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e47a0.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e47a4.  if v0 != 0 then goto L2e47bc;
  #L2e47a8.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e47ac.  call temp:= `writeByte`(v0, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2e47b2.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e47b8.  v2:= temp @kind object;
  #L2e47ba.  return v2 @kind object;
  #L2e47bc.  v2:= new `java.lang.IllegalStateException`;
  #L2e47c0.  v0:= "closed" @kind object;
  #L2e47c4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e47ca.  throw v2;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e47dc.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e47e0.  if v0 != 0 then goto L2e47f8;
  #L2e47e4.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e47e8.  call temp:= `writeDecimalLong`(v0, v2) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L2e47ee.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e47f4.  v2:= temp @kind object;
  #L2e47f6.  return v2 @kind object;
  #L2e47f8.  v2:= new `java.lang.IllegalStateException`;
  #L2e47fc.  v3:= "closed" @kind object;
  #L2e4800.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e4806.  throw v2;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e4818.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e481c.  if v0 != 0 then goto L2e4834;
  #L2e4820.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e4824.  call temp:= `writeHexadecimalUnsignedLong`(v0, v2) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L2e482a.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e4830.  v2:= temp @kind object;
  #L2e4832.  return v2 @kind object;
  #L2e4834.  v2:= new `java.lang.IllegalStateException`;
  #L2e4838.  v3:= "closed" @kind object;
  #L2e483c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e4842.  throw v2;
}
procedure `okio.BufferedSink` `writeInt`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e4854.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e4858.  if v0 != 0 then goto L2e4870;
  #L2e485c.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e4860.  call temp:= `writeInt`(v0, v2) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L2e4866.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e486c.  v2:= temp @kind object;
  #L2e486e.  return v2 @kind object;
  #L2e4870.  v2:= new `java.lang.IllegalStateException`;
  #L2e4874.  v0:= "closed" @kind object;
  #L2e4878.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e487e.  throw v2;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e4890.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e4894.  if v0 != 0 then goto L2e48ac;
  #L2e4898.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e489c.  call temp:= `writeIntLe`(v0, v2) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L2e48a2.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e48a8.  v2:= temp @kind object;
  #L2e48aa.  return v2 @kind object;
  #L2e48ac.  v2:= new `java.lang.IllegalStateException`;
  #L2e48b0.  v0:= "closed" @kind object;
  #L2e48b4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e48ba.  throw v2;
}
procedure `okio.BufferedSink` `writeLong`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e48cc.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e48d0.  if v0 != 0 then goto L2e48e8;
  #L2e48d4.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e48d8.  call temp:= `writeLong`(v0, v2) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L2e48de.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e48e4.  v2:= temp @kind object;
  #L2e48e6.  return v2 @kind object;
  #L2e48e8.  v2:= new `java.lang.IllegalStateException`;
  #L2e48ec.  v3:= "closed" @kind object;
  #L2e48f0.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e48f6.  throw v2;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e4908.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e490c.  if v0 != 0 then goto L2e4924;
  #L2e4910.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e4914.  call temp:= `writeLongLe`(v0, v2) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L2e491a.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e4920.  v2:= temp @kind object;
  #L2e4922.  return v2 @kind object;
  #L2e4924.  v2:= new `java.lang.IllegalStateException`;
  #L2e4928.  v3:= "closed" @kind object;
  #L2e492c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e4932.  throw v2;
}
procedure `okio.BufferedSink` `writeShort`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e4944.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e4948.  if v0 != 0 then goto L2e4960;
  #L2e494c.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e4950.  call temp:= `writeShort`(v0, v2) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L2e4956.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e495c.  v2:= temp @kind object;
  #L2e495e.  return v2 @kind object;
  #L2e4960.  v2:= new `java.lang.IllegalStateException`;
  #L2e4964.  v0:= "closed" @kind object;
  #L2e4968.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e496e.  throw v2;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e4980.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e4984.  if v0 != 0 then goto L2e499c;
  #L2e4988.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e498c.  call temp:= `writeShortLe`(v0, v2) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L2e4992.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e4998.  v2:= temp @kind object;
  #L2e499a.  return v2 @kind object;
  #L2e499c.  v2:= new `java.lang.IllegalStateException`;
  #L2e49a0.  v0:= "closed" @kind object;
  #L2e49a4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e49aa.  throw v2;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.nio.charset.Charset` v5 @kind object) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e49bc.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e49c0.  if v0 != 0 then goto L2e49d8;
  #L2e49c4.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e49c8.  call temp:= `writeString`(v0, v2, v3, v4, v5) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L2e49ce.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e49d4.  v2:= temp @kind object;
  #L2e49d6.  return v2 @kind object;
  #L2e49d8.  v2:= new `java.lang.IllegalStateException`;
  #L2e49dc.  v3:= "closed" @kind object;
  #L2e49e0.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e49e6.  throw v2;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object, `java.nio.charset.Charset` v3 @kind object) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e49f8.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e49fc.  if v0 != 0 then goto L2e4a14;
  #L2e4a00.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e4a04.  call temp:= `writeString`(v0, v2, v3) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L2e4a0a.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e4a10.  v2:= temp @kind object;
  #L2e4a12.  return v2 @kind object;
  #L2e4a14.  v2:= new `java.lang.IllegalStateException`;
  #L2e4a18.  v3:= "closed" @kind object;
  #L2e4a1c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e4a22.  throw v2;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e4a34.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e4a38.  if v0 != 0 then goto L2e4a50;
  #L2e4a3c.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e4a40.  call temp:= `writeUtf8`(v0, v2) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L2e4a46.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e4a4c.  v2:= temp @kind object;
  #L2e4a4e.  return v2 @kind object;
  #L2e4a50.  v2:= new `java.lang.IllegalStateException`;
  #L2e4a54.  v0:= "closed" @kind object;
  #L2e4a58.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e4a5e.  throw v2;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e4a70.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e4a74.  if v0 != 0 then goto L2e4a8c;
  #L2e4a78.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e4a7c.  call temp:= `writeUtf8`(v0, v2, v3, v4) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L2e4a82.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e4a88.  v2:= temp @kind object;
  #L2e4a8a.  return v2 @kind object;
  #L2e4a8c.  v2:= new `java.lang.IllegalStateException`;
  #L2e4a90.  v3:= "closed" @kind object;
  #L2e4a94.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e4a9a.  throw v2;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e4aac.  v0:= v1.`okio.RealBufferedSink.a` @type ^`boolean` @kind boolean;
  #L2e4ab0.  if v0 != 0 then goto L2e4ac8;
  #L2e4ab4.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2e4ab8.  call temp:= `writeUtf8CodePoint`(v0, v2) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L2e4abe.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2e4ac4.  v2:= temp @kind object;
  #L2e4ac6.  return v2 @kind object;
  #L2e4ac8.  v2:= new `java.lang.IllegalStateException`;
  #L2e4acc.  v0:= "closed" @kind object;
  #L2e4ad0.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e4ad6.  throw v2;
}
