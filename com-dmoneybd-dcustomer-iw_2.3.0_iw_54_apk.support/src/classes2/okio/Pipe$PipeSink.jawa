record `okio.Pipe$PipeSink` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `okio.Timeout` `okio.Pipe$PipeSink.a` @AccessFlag FINAL;
  `okio.Pipe` `okio.Pipe$PipeSink.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.Pipe$PipeSink` v0 @kind this, `okio.Pipe` v1 @kind object) @signature `Lokio/Pipe$PipeSink;.<init>:(Lokio/Pipe;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2e3fd4.  v0.`okio.Pipe$PipeSink.b` @type ^`okio.Pipe` := v1 @kind object;
  #L2e3fd8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2e3fde.  v1:= new `okio.Timeout`;
  #L2e3fe2.  call `<init>`(v1) @signature `Lokio/Timeout;.<init>:()V` @kind direct;
  #L2e3fe8.  v0.`okio.Pipe$PipeSink.a` @type ^`okio.Timeout` := v1 @kind object;
  #L2e3fec.  return @kind void;
}
procedure `void` `close`(`okio.Pipe$PipeSink` v6 @kind this) @signature `Lokio/Pipe$PipeSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2e4000.  v0:= v6.`okio.Pipe$PipeSink.b` @type ^`okio.Pipe` @kind object;
  #L2e4004.  v0:= v0.`okio.Pipe.b` @type ^`okio.Buffer` @kind object;
  #L2e4008.  @monitorenter v0
  #L2e400a.  v1:= v6.`okio.Pipe$PipeSink.b` @type ^`okio.Pipe` @kind object;
  #L2e400e.  v2:= v1.`okio.Pipe.c` @type ^`boolean` @kind boolean;
  #L2e4012.  if v2 == 0 then goto L2e401a;
  #L2e4016.  @monitorexit v0
  #L2e4018.  return @kind void;
  #L2e401a.  v2:= v1.`okio.Pipe.d` @type ^`boolean` @kind boolean;
  #L2e401e.  if v2 == 0 then goto L2e404c;
  #L2e4022.  v1:= v1.`okio.Pipe.b` @type ^`okio.Buffer` @kind object;
  #L2e4026.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L2e402c.  v1:= temp @kind wide;
  #L2e402e.  v3:= 0L;
  #L2e4032.  v5:= lcmp(v1, v3);
  #L2e4036.  if v5 > 0 then goto L2e403c;
  #L2e403a.  goto L2e404c;
  #L2e403c.  v1:= new `java.io.IOException`;
  #L2e4040.  v2:= "source is closed" @kind object;
  #L2e4044.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e404a.  throw v1;
  #L2e404c.  v1:= v6.`okio.Pipe$PipeSink.b` @type ^`okio.Pipe` @kind object;
  #L2e4050.  v2:= 1I;
  #L2e4052.  v1.`okio.Pipe.c` @type ^`boolean` := v2 @kind boolean;
  #L2e4056.  v1:= v1.`okio.Pipe.b` @type ^`okio.Buffer` @kind object;
  #L2e405a.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L2e4060.  @monitorexit v0
  #L2e4062.  return @kind void;
  #L2e4064.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e4066.  @monitorexit v0
  #L2e4068.  throw v1;
  catch `java.lang.Throwable` @[L2e400a..L2e4068] goto L2e4064;
}
procedure `void` `flush`(`okio.Pipe$PipeSink` v6 @kind this) @signature `Lokio/Pipe$PipeSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2e4088.  v0:= v6.`okio.Pipe$PipeSink.b` @type ^`okio.Pipe` @kind object;
  #L2e408c.  v0:= v0.`okio.Pipe.b` @type ^`okio.Buffer` @kind object;
  #L2e4090.  @monitorenter v0
  #L2e4092.  v1:= v6.`okio.Pipe$PipeSink.b` @type ^`okio.Pipe` @kind object;
  #L2e4096.  v2:= v1.`okio.Pipe.c` @type ^`boolean` @kind boolean;
  #L2e409a.  if v2 != 0 then goto L2e40d4;
  #L2e409e.  v2:= v1.`okio.Pipe.d` @type ^`boolean` @kind boolean;
  #L2e40a2.  if v2 == 0 then goto L2e40d0;
  #L2e40a6.  v1:= v1.`okio.Pipe.b` @type ^`okio.Buffer` @kind object;
  #L2e40aa.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L2e40b0.  v1:= temp @kind wide;
  #L2e40b2.  v3:= 0L;
  #L2e40b6.  v5:= lcmp(v1, v3);
  #L2e40ba.  if v5 > 0 then goto L2e40c0;
  #L2e40be.  goto L2e40d0;
  #L2e40c0.  v1:= new `java.io.IOException`;
  #L2e40c4.  v2:= "source is closed" @kind object;
  #L2e40c8.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e40ce.  throw v1;
  #L2e40d0.  @monitorexit v0
  #L2e40d2.  return @kind void;
  #L2e40d4.  v1:= new `java.lang.IllegalStateException`;
  #L2e40d8.  v2:= "closed" @kind object;
  #L2e40dc.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e40e2.  throw v1;
  #L2e40e4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e40e6.  @monitorexit v0
  #L2e40e8.  throw v1;
  catch `java.lang.Throwable` @[L2e4092..L2e40e8] goto L2e40e4;
}
procedure `okio.Timeout` `timeout`(`okio.Pipe$PipeSink` v1 @kind this) @signature `Lokio/Pipe$PipeSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e3fbc.  v0:= v1.`okio.Pipe$PipeSink.a` @type ^`okio.Timeout` @kind object;
  #L2e3fc0.  return v0 @kind object;
}
procedure `void` `write`(`okio.Pipe$PipeSink` v8 @kind this, `okio.Buffer` v9 @kind object, `long` v10 ) @signature `Lokio/Pipe$PipeSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2e4108.  v0:= v8.`okio.Pipe$PipeSink.b` @type ^`okio.Pipe` @kind object;
  #L2e410c.  v0:= v0.`okio.Pipe.b` @type ^`okio.Buffer` @kind object;
  #L2e4110.  @monitorenter v0
  #L2e4112.  v1:= v8.`okio.Pipe$PipeSink.b` @type ^`okio.Pipe` @kind object;
  #L2e4116.  v1:= v1.`okio.Pipe.c` @type ^`boolean` @kind boolean;
  #L2e411a.  if v1 != 0 then goto L2e41a0;
  #L2e411e.  v1:= 0L;
  #L2e4122.  v3:= lcmp(v10, v1);
  #L2e4126.  if v3 <= 0 then goto L2e419c;
  #L2e412a.  v3:= v8.`okio.Pipe$PipeSink.b` @type ^`okio.Pipe` @kind object;
  #L2e412e.  v4:= v3.`okio.Pipe.d` @type ^`boolean` @kind boolean;
  #L2e4132.  if v4 != 0 then goto L2e418c;
  #L2e4136.  v4:= v3.`okio.Pipe.a` @type ^`long` @kind wide;
  #L2e413a.  v3:= v3.`okio.Pipe.b` @type ^`okio.Buffer` @kind object;
  #L2e413e.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L2e4144.  v6:= temp @kind wide;
  #L2e4146.  v4:= v4 - v6 @kind long;
  #L2e4148.  v3:= lcmp(v4, v1);
  #L2e414c.  if v3 != 0 then goto L2e4164;
  #L2e4150.  v1:= v8.`okio.Pipe$PipeSink.a` @type ^`okio.Timeout` @kind object;
  #L2e4154.  v2:= v8.`okio.Pipe$PipeSink.b` @type ^`okio.Pipe` @kind object;
  #L2e4158.  v2:= v2.`okio.Pipe.b` @type ^`okio.Buffer` @kind object;
  #L2e415c.  call `waitUntilNotified`(v1, v2) @signature `Lokio/Timeout;.waitUntilNotified:(Ljava/lang/Object;)V` @kind virtual;
  #L2e4162.  goto L2e411e;
  #L2e4164.  call temp:= `min`(v4, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2e416a.  v1:= temp @kind wide;
  #L2e416c.  v3:= v8.`okio.Pipe$PipeSink.b` @type ^`okio.Pipe` @kind object;
  #L2e4170.  v3:= v3.`okio.Pipe.b` @type ^`okio.Buffer` @kind object;
  #L2e4174.  call `write`(v3, v9, v1) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L2e417a.  v10:= v10 - v1 @kind long;
  #L2e417c.  v1:= v8.`okio.Pipe$PipeSink.b` @type ^`okio.Pipe` @kind object;
  #L2e4180.  v1:= v1.`okio.Pipe.b` @type ^`okio.Buffer` @kind object;
  #L2e4184.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L2e418a.  goto L2e411e;
  #L2e418c.  v9:= new `java.io.IOException`;
  #L2e4190.  v10:= "source is closed" @kind object;
  #L2e4194.  call `<init>`(v9, v10) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e419a.  throw v9;
  #L2e419c.  @monitorexit v0
  #L2e419e.  return @kind void;
  #L2e41a0.  v9:= new `java.lang.IllegalStateException`;
  #L2e41a4.  v10:= "closed" @kind object;
  #L2e41a8.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e41ae.  throw v9;
  #L2e41b0.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e41b2.  @monitorexit v0
  #L2e41b4.  goto L2e41b8;
  #L2e41b6.  throw v9;
  #L2e41b8.  goto L2e41b6;
  catch `java.lang.Throwable` @[L2e4112..L2e41b4] goto L2e41b0;
}
