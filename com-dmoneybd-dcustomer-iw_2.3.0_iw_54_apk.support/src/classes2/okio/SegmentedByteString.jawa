record `okio.SegmentedByteString` @kind class @AccessFlag FINAL extends `okio.ByteString` @kind class {
  `byte`[][] `okio.SegmentedByteString.e` @AccessFlag FINAL_TRANSIENT;
  `int`[] `okio.SegmentedByteString.f` @AccessFlag FINAL_TRANSIENT;
}
procedure `void` `<init>`(`okio.SegmentedByteString` v7 @kind this, `okio.Buffer` v8 @kind object, `int` v9 ) @signature `Lokio/SegmentedByteString;.<init>:(Lokio/Buffer;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2e5410.  v0:= 0I;
  #L2e5412.  call `<init>`(v7, v0) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L2e5418.  v1:= v8.`okio.Buffer.b` @type ^`long` @kind wide;
  #L2e541c.  v5:= (`long`) v9 @kind i2l;
  #L2e541e.  v3:= 0L;
  #L2e5422.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2e5428.  v0:= v8.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L2e542c.  v1:= 0I;
  #L2e542e.  v2:= 0I;
  #L2e5430.  v3:= 0I;
  #L2e5432.  if v2 >= v9 then goto L2e5460;
  #L2e5436.  v4:= v0.`okio.Segment.c` @type ^`int`;
  #L2e543a.  v5:= v0.`okio.Segment.b` @type ^`int`;
  #L2e543e.  if v4 == v5 then goto L2e5450;
  #L2e5442.  v4:= v4 - v5 @kind int;
  #L2e5444.  v2:= v2 + v4 @kind int;
  #L2e5446.  v3:= v3 + 1;
  #L2e544a.  v0:= v0.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L2e544e.  goto L2e5432;
  #L2e5450.  v8:= new `java.lang.AssertionError`;
  #L2e5454.  v9:= "s.limit == s.pos" @kind object;
  #L2e5458.  call `<init>`(v8, v9) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2e545e.  throw v8;
  #L2e5460.  v0:= new `byte`[][v3];
  #L2e5464.  v7.`okio.SegmentedByteString.e` @type ^`byte`[][] := v0 @kind object;
  #L2e5468.  v3:= v3 * 2;
  #L2e546c.  v0:= new `int`[v3];
  #L2e5470.  v7.`okio.SegmentedByteString.f` @type ^`int`[] := v0 @kind object;
  #L2e5474.  v8:= v8.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L2e5478.  v0:= 0I;
  #L2e547a.  if v1 >= v9 then goto L2e54bc;
  #L2e547e.  v2:= v7.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L2e5482.  v3:= v8.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L2e5486.  v2[v0]:= v3 @kind object;
  #L2e548a.  v3:= v8.`okio.Segment.c` @type ^`int`;
  #L2e548e.  v4:= v8.`okio.Segment.b` @type ^`int`;
  #L2e5492.  v3:= v3 - v4 @kind int;
  #L2e5494.  v1:= v1 + v3 @kind int;
  #L2e5496.  if v1 <= v9 then goto L2e549c;
  #L2e549a.  v1:= v9;
  #L2e549c.  v3:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L2e54a0.  v3[v0]:= v1;
  #L2e54a4.  v2:= length @variable v2;
  #L2e54a6.  v2:= v2 + v0 @kind int;
  #L2e54a8.  v3[v2]:= v4;
  #L2e54ac.  v2:= 1I;
  #L2e54ae.  v8.`okio.Segment.d` @type ^`boolean` := v2 @kind boolean;
  #L2e54b2.  v0:= v0 + 1;
  #L2e54b6.  v8:= v8.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L2e54ba.  goto L2e547a;
  #L2e54bc.  return @kind void;
}
procedure `int` `segment`(`okio.SegmentedByteString` v3 @kind this, `int` v4 ) @signature `Lokio/SegmentedByteString;.segment:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2e5130.  v0:= v3.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L2e5134.  v1:= v3.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L2e5138.  v1:= length @variable v1;
  #L2e513a.  v4:= v4 + 1;
  #L2e513e.  v2:= 0I;
  #L2e5140.  call temp:= `binarySearch`(v0, v2, v1, v4) @signature `Ljava/util/Arrays;.binarySearch:([IIII)I` @kind static;
  #L2e5146.  v4:= temp;
  #L2e5148.  if v4 < 0 then goto L2e514e;
  #L2e514c.  goto L2e5152;
  #L2e514e.  v4:= v4 ^~ -1;
  #L2e5152.  return v4;
}
procedure `okio.ByteString` `toByteString`(`okio.SegmentedByteString` v2 @kind this) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2e53ec.  v0:= new `okio.ByteString`;
  #L2e53f0.  call temp:= `toByteArray`(v2) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @kind virtual;
  #L2e53f6.  v1:= temp @kind object;
  #L2e53f8.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L2e53fe.  return v0 @kind object;
}
procedure `java.lang.Object` `writeReplace`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2e5188.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e518e.  v0:= temp @kind object;
  #L2e5190.  return v0 @kind object;
}
procedure `java.nio.ByteBuffer` `asByteBuffer`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.asByteBuffer:()Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e527c.  call temp:= `toByteArray`(v1) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @kind virtual;
  #L2e5282.  v0:= temp @kind object;
  #L2e5284.  call temp:= `wrap`(v0) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L2e528a.  v0:= temp @kind object;
  #L2e528c.  call temp:= `asReadOnlyBuffer`(v0) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L2e5292.  v0:= temp @kind object;
  #L2e5294.  return v0 @kind object;
}
procedure `byte`[] `b`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.b:()[B` @AccessFlag  {
    temp;
    v0;

  #L2e5004.  call temp:= `toByteArray`(v1) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @kind virtual;
  #L2e500a.  v0:= temp @kind object;
  #L2e500c.  return v0 @kind object;
}
procedure `java.lang.String` `base64`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.base64:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e51a4.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e51aa.  v0:= temp @kind object;
  #L2e51ac.  call temp:= `base64`(v0) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L2e51b2.  v0:= temp @kind object;
  #L2e51b4.  return v0 @kind object;
}
procedure `java.lang.String` `base64Url`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.base64Url:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e51c8.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e51ce.  v0:= temp @kind object;
  #L2e51d0.  call temp:= `base64Url`(v0) @signature `Lokio/ByteString;.base64Url:()Ljava/lang/String;` @kind virtual;
  #L2e51d6.  v0:= temp @kind object;
  #L2e51d8.  return v0 @kind object;
}
procedure `void` `c`(`okio.SegmentedByteString` v11 @kind this, `okio.Buffer` v12 @kind object) @signature `Lokio/SegmentedByteString;.c:(Lokio/Buffer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2e5534.  v0:= v11.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L2e5538.  v0:= length @variable v0;
  #L2e553a.  v1:= 0I;
  #L2e553c.  v2:= 0I;
  #L2e553e.  if v1 >= v0 then goto L2e559a;
  #L2e5542.  v3:= v11.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L2e5546.  v4:= v0 + v1 @kind int;
  #L2e554a.  v7:= v3[v4];
  #L2e554e.  v3:= v3[v1];
  #L2e5552.  v4:= new `okio.Segment`;
  #L2e5556.  v5:= v11.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L2e555a.  v6:= v5[v1] @kind object;
  #L2e555e.  v5:= v7 + v3 @kind int;
  #L2e5562.  v8:= v5 - v2 @kind int;
  #L2e5566.  v9:= 1I;
  #L2e5568.  v10:= 0I;
  #L2e556a.  v5:= v4 @kind object;
  #L2e556c.  call `<init>`(v5, v6, v7, v8, v9, v10) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @kind direct;
  #L2e5572.  v2:= v12.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L2e5576.  if v2 != 0 then goto L2e5588;
  #L2e557a.  v4.`okio.Segment.g` @type ^`okio.Segment` := v4 @kind object;
  #L2e557e.  v4.`okio.Segment.f` @type ^`okio.Segment` := v4 @kind object;
  #L2e5582.  v12.`okio.Buffer.a` @type ^`okio.Segment` := v4 @kind object;
  #L2e5586.  goto L2e5592;
  #L2e5588.  v2:= v2.`okio.Segment.g` @type ^`okio.Segment` @kind object;
  #L2e558c.  call temp:= `push`(v2, v4) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L2e5592.  v1:= v1 + 1;
  #L2e5596.  v2:= v3;
  #L2e5598.  goto L2e553e;
  #L2e559a.  v0:= v12.`okio.Buffer.b` @type ^`long` @kind wide;
  #L2e559e.  v2:= (`long`) v2 @kind i2l;
  #L2e55a0.  v0:= v0 + v2 @kind long;
  #L2e55a2.  v12.`okio.Buffer.b` @type ^`long` := v0 @kind wide;
  #L2e55a6.  return @kind void;
}
procedure `boolean` `equals`(`okio.SegmentedByteString` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lokio/SegmentedByteString;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e4e08.  v0:= 1I;
  #L2e4e0a.  if v5 != v4 then goto L2e4e10;
  #L2e4e0e.  return v0;
  #L2e4e10.  v1:= instanceof @variable v5 @type ^`okio.ByteString` @kind boolean;
  #L2e4e14.  v2:= 0I;
  #L2e4e16.  if v1 == 0 then goto L2e4e48;
  #L2e4e1a.  v5:= (`okio.ByteString`) v5 @kind object;
  #L2e4e1e.  call temp:= `size`(v5) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L2e4e24.  v1:= temp;
  #L2e4e26.  call temp:= `size`(v4) @signature `Lokio/SegmentedByteString;.size:()I` @kind virtual;
  #L2e4e2c.  v3:= temp;
  #L2e4e2e.  if v1 != v3 then goto L2e4e48;
  #L2e4e32.  call temp:= `size`(v4) @signature `Lokio/SegmentedByteString;.size:()I` @kind virtual;
  #L2e4e38.  v1:= temp;
  #L2e4e3a.  call temp:= `rangeEquals`(v4, v2, v5, v2, v1) @signature `Lokio/SegmentedByteString;.rangeEquals:(ILokio/ByteString;II)Z` @kind virtual;
  #L2e4e40.  v5:= temp;
  #L2e4e42.  if v5 == 0 then goto L2e4e48;
  #L2e4e46.  goto L2e4e4a;
  #L2e4e48.  v0:= 0I;
  #L2e4e4a.  return v0;
}
procedure `byte` `getByte`(`okio.SegmentedByteString` v7 @kind this, `int` v8 ) @signature `Lokio/SegmentedByteString;.getByte:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2e4f98.  v0:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L2e4f9c.  v1:= v7.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L2e4fa0.  v1:= length @variable v1;
  #L2e4fa2.  v1:= v1 + -1;
  #L2e4fa6.  v0:= v0[v1];
  #L2e4faa.  v1:= (`long`) v0 @kind i2l;
  #L2e4fac.  v3:= (`long`) v8 @kind i2l;
  #L2e4fae.  v5:= 1L;
  #L2e4fb2.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2e4fb8.  call temp:= `segment`(v7, v8) @signature `Lokio/SegmentedByteString;.segment:(I)I` @kind direct;
  #L2e4fbe.  v0:= temp;
  #L2e4fc0.  if v0 != 0 then goto L2e4fc8;
  #L2e4fc4.  v1:= 0I;
  #L2e4fc6.  goto L2e4fd4;
  #L2e4fc8.  v1:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L2e4fcc.  v2:= v0 + -1;
  #L2e4fd0.  v1:= v1[v2];
  #L2e4fd4.  v2:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L2e4fd8.  v3:= v7.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L2e4fdc.  v4:= length @variable v3;
  #L2e4fde.  v4:= v4 + v0 @kind int;
  #L2e4fe0.  v2:= v2[v4];
  #L2e4fe4.  v0:= v3[v0] @kind object;
  #L2e4fe8.  v8:= v8 - v1 @kind int;
  #L2e4fea.  v8:= v8 + v2 @kind int;
  #L2e4fec.  v8:= v0[v8] @kind byte;
  #L2e4ff0.  return v8;
}
procedure `int` `hashCode`(`okio.SegmentedByteString` v8 @kind this) @signature `Lokio/SegmentedByteString;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2e507c.  v0:= v8.`okio.ByteString.c` @type ^`int`;
  #L2e5080.  if v0 == 0 then goto L2e5086;
  #L2e5084.  return v0;
  #L2e5086.  v0:= v8.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L2e508a.  v0:= length @variable v0;
  #L2e508c.  v1:= 0I;
  #L2e508e.  v2:= 1I;
  #L2e5090.  v2:= 0I;
  #L2e5092.  v3:= 1I;
  #L2e5094.  if v1 >= v0 then goto L2e50d2;
  #L2e5098.  v4:= v8.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L2e509c.  v4:= v4[v1] @kind object;
  #L2e50a0.  v5:= v8.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L2e50a4.  v6:= v0 + v1 @kind int;
  #L2e50a8.  v6:= v5[v6];
  #L2e50ac.  v5:= v5[v1];
  #L2e50b0.  v2:= v5 - v2 @kind int;
  #L2e50b4.  v2:= v2 + v6 @kind int;
  #L2e50b6.  if v6 >= v2 then goto L2e50ca;
  #L2e50ba.  v3:= v3 * 31;
  #L2e50be.  v7:= v4[v6] @kind byte;
  #L2e50c2.  v3:= v3 + v7 @kind int;
  #L2e50c4.  v6:= v6 + 1;
  #L2e50c8.  goto L2e50b6;
  #L2e50ca.  v1:= v1 + 1;
  #L2e50ce.  v2:= v5;
  #L2e50d0.  goto L2e5094;
  #L2e50d2.  v8.`okio.ByteString.c` @type ^`int` := v3;
  #L2e50d6.  return v3;
}
procedure `java.lang.String` `hex`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.hex:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e51ec.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e51f2.  v0:= temp @kind object;
  #L2e51f4.  call temp:= `hex`(v0) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L2e51fa.  v0:= temp @kind object;
  #L2e51fc.  return v0 @kind object;
}
procedure `okio.ByteString` `hmacSha1`(`okio.SegmentedByteString` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/SegmentedByteString;.hmacSha1:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e52a8.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e52ae.  v0:= temp @kind object;
  #L2e52b0.  call temp:= `hmacSha1`(v0, v2) @signature `Lokio/ByteString;.hmacSha1:(Lokio/ByteString;)Lokio/ByteString;` @kind virtual;
  #L2e52b6.  v2:= temp @kind object;
  #L2e52b8.  return v2 @kind object;
}
procedure `okio.ByteString` `hmacSha256`(`okio.SegmentedByteString` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/SegmentedByteString;.hmacSha256:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e52cc.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e52d2.  v0:= temp @kind object;
  #L2e52d4.  call temp:= `hmacSha256`(v0, v2) @signature `Lokio/ByteString;.hmacSha256:(Lokio/ByteString;)Lokio/ByteString;` @kind virtual;
  #L2e52da.  v2:= temp @kind object;
  #L2e52dc.  return v2 @kind object;
}
procedure `int` `indexOf`(`okio.SegmentedByteString` v1 @kind this, `byte`[] v2 @kind object, `int` v3 ) @signature `Lokio/SegmentedByteString;.indexOf:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e50e8.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e50ee.  v0:= temp @kind object;
  #L2e50f0.  call temp:= `indexOf`(v0, v2, v3) @signature `Lokio/ByteString;.indexOf:([BI)I` @kind virtual;
  #L2e50f6.  v2:= temp;
  #L2e50f8.  return v2;
}
procedure `int` `lastIndexOf`(`okio.SegmentedByteString` v1 @kind this, `byte`[] v2 @kind object, `int` v3 ) @signature `Lokio/SegmentedByteString;.lastIndexOf:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e510c.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e5112.  v0:= temp @kind object;
  #L2e5114.  call temp:= `lastIndexOf`(v0, v2, v3) @signature `Lokio/ByteString;.lastIndexOf:([BI)I` @kind virtual;
  #L2e511a.  v2:= temp;
  #L2e511c.  return v2;
}
procedure `okio.ByteString` `md5`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.md5:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e52f0.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e52f6.  v0:= temp @kind object;
  #L2e52f8.  call temp:= `md5`(v0) @signature `Lokio/ByteString;.md5:()Lokio/ByteString;` @kind virtual;
  #L2e52fe.  v0:= temp @kind object;
  #L2e5300.  return v0 @kind object;
}
procedure `boolean` `rangeEquals`(`okio.SegmentedByteString` v7 @kind this, `int` v8 , `okio.ByteString` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lokio/SegmentedByteString;.rangeEquals:(ILokio/ByteString;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2e4f00.  v0:= 0I;
  #L2e4f02.  if v8 < 0 then goto L2e4f84;
  #L2e4f06.  call temp:= `size`(v7) @signature `Lokio/SegmentedByteString;.size:()I` @kind virtual;
  #L2e4f0c.  v1:= temp;
  #L2e4f0e.  v1:= v1 - v11 @kind int;
  #L2e4f10.  if v8 <= v1 then goto L2e4f16;
  #L2e4f14.  goto L2e4f84;
  #L2e4f16.  call temp:= `segment`(v7, v8) @signature `Lokio/SegmentedByteString;.segment:(I)I` @kind direct;
  #L2e4f1c.  v1:= temp;
  #L2e4f1e.  if v11 <= 0 then goto L2e4f80;
  #L2e4f22.  if v1 != 0 then goto L2e4f2a;
  #L2e4f26.  v2:= 0I;
  #L2e4f28.  goto L2e4f36;
  #L2e4f2a.  v2:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L2e4f2e.  v3:= v1 + -1;
  #L2e4f32.  v2:= v2[v3];
  #L2e4f36.  v3:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L2e4f3a.  v3:= v3[v1];
  #L2e4f3e.  v3:= v3 - v2 @kind int;
  #L2e4f40.  v3:= v3 + v2 @kind int;
  #L2e4f42.  v3:= v3 - v8 @kind int;
  #L2e4f44.  call temp:= `min`(v11, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2e4f4a.  v3:= temp;
  #L2e4f4c.  v4:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L2e4f50.  v5:= v7.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L2e4f54.  v6:= length @variable v5;
  #L2e4f56.  v6:= v6 + v1 @kind int;
  #L2e4f58.  v4:= v4[v6];
  #L2e4f5c.  v2:= v8 - v2 @kind int;
  #L2e4f60.  v2:= v2 + v4 @kind int;
  #L2e4f62.  v4:= v5[v1] @kind object;
  #L2e4f66.  call temp:= `rangeEquals`(v9, v10, v4, v2, v3) @signature `Lokio/ByteString;.rangeEquals:(I[BII)Z` @kind virtual;
  #L2e4f6c.  v2:= temp;
  #L2e4f6e.  if v2 != 0 then goto L2e4f74;
  #L2e4f72.  return v0;
  #L2e4f74.  v8:= v8 + v3 @kind int;
  #L2e4f76.  v10:= v10 + v3 @kind int;
  #L2e4f78.  v11:= v11 - v3 @kind int;
  #L2e4f7a.  v1:= v1 + 1;
  #L2e4f7e.  goto L2e4f1e;
  #L2e4f80.  v8:= 1I;
  #L2e4f82.  return v8;
  #L2e4f84.  return v0;
}
procedure `boolean` `rangeEquals`(`okio.SegmentedByteString` v7 @kind this, `int` v8 , `byte`[] v9 @kind object, `int` v10 , `int` v11 ) @signature `Lokio/SegmentedByteString;.rangeEquals:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2e4e5c.  v0:= 0I;
  #L2e4e5e.  if v8 < 0 then goto L2e4eec;
  #L2e4e62.  call temp:= `size`(v7) @signature `Lokio/SegmentedByteString;.size:()I` @kind virtual;
  #L2e4e68.  v1:= temp;
  #L2e4e6a.  v1:= v1 - v11 @kind int;
  #L2e4e6c.  if v8 > v1 then goto L2e4eec;
  #L2e4e70.  if v10 < 0 then goto L2e4eec;
  #L2e4e74.  v1:= length @variable v9;
  #L2e4e76.  v1:= v1 - v11 @kind int;
  #L2e4e78.  if v10 <= v1 then goto L2e4e7e;
  #L2e4e7c.  goto L2e4eec;
  #L2e4e7e.  call temp:= `segment`(v7, v8) @signature `Lokio/SegmentedByteString;.segment:(I)I` @kind direct;
  #L2e4e84.  v1:= temp;
  #L2e4e86.  if v11 <= 0 then goto L2e4ee8;
  #L2e4e8a.  if v1 != 0 then goto L2e4e92;
  #L2e4e8e.  v2:= 0I;
  #L2e4e90.  goto L2e4e9e;
  #L2e4e92.  v2:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L2e4e96.  v3:= v1 + -1;
  #L2e4e9a.  v2:= v2[v3];
  #L2e4e9e.  v3:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L2e4ea2.  v3:= v3[v1];
  #L2e4ea6.  v3:= v3 - v2 @kind int;
  #L2e4ea8.  v3:= v3 + v2 @kind int;
  #L2e4eaa.  v3:= v3 - v8 @kind int;
  #L2e4eac.  call temp:= `min`(v11, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2e4eb2.  v3:= temp;
  #L2e4eb4.  v4:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L2e4eb8.  v5:= v7.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L2e4ebc.  v6:= length @variable v5;
  #L2e4ebe.  v6:= v6 + v1 @kind int;
  #L2e4ec0.  v4:= v4[v6];
  #L2e4ec4.  v2:= v8 - v2 @kind int;
  #L2e4ec8.  v2:= v2 + v4 @kind int;
  #L2e4eca.  v4:= v5[v1] @kind object;
  #L2e4ece.  call temp:= `arrayRangeEquals`(v4, v2, v9, v10, v3) @signature `Lokio/Util;.arrayRangeEquals:([BI[BII)Z` @kind static;
  #L2e4ed4.  v2:= temp;
  #L2e4ed6.  if v2 != 0 then goto L2e4edc;
  #L2e4eda.  return v0;
  #L2e4edc.  v8:= v8 + v3 @kind int;
  #L2e4ede.  v10:= v10 + v3 @kind int;
  #L2e4ee0.  v11:= v11 - v3 @kind int;
  #L2e4ee2.  v1:= v1 + 1;
  #L2e4ee6.  goto L2e4e86;
  #L2e4ee8.  v8:= 1I;
  #L2e4eea.  return v8;
  #L2e4eec.  return v0;
}
procedure `okio.ByteString` `sha1`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.sha1:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e5314.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e531a.  v0:= temp @kind object;
  #L2e531c.  call temp:= `sha1`(v0) @signature `Lokio/ByteString;.sha1:()Lokio/ByteString;` @kind virtual;
  #L2e5322.  v0:= temp @kind object;
  #L2e5324.  return v0 @kind object;
}
procedure `okio.ByteString` `sha256`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.sha256:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e5338.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e533e.  v0:= temp @kind object;
  #L2e5340.  call temp:= `sha256`(v0) @signature `Lokio/ByteString;.sha256:()Lokio/ByteString;` @kind virtual;
  #L2e5346.  v0:= temp @kind object;
  #L2e5348.  return v0 @kind object;
}
procedure `int` `size`(`okio.SegmentedByteString` v2 @kind this) @signature `Lokio/SegmentedByteString;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2e5164.  v0:= v2.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L2e5168.  v1:= v2.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L2e516c.  v1:= length @variable v1;
  #L2e516e.  v1:= v1 + -1;
  #L2e5172.  v0:= v0[v1];
  #L2e5176.  return v0;
}
procedure `java.lang.String` `string`(`okio.SegmentedByteString` v1 @kind this, `java.nio.charset.Charset` v2 @kind object) @signature `Lokio/SegmentedByteString;.string:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e5210.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e5216.  v0:= temp @kind object;
  #L2e5218.  call temp:= `string`(v0, v2) @signature `Lokio/ByteString;.string:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L2e521e.  v2:= temp @kind object;
  #L2e5220.  return v2 @kind object;
}
procedure `okio.ByteString` `substring`(`okio.SegmentedByteString` v1 @kind this, `int` v2 ) @signature `Lokio/SegmentedByteString;.substring:(I)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e535c.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e5362.  v0:= temp @kind object;
  #L2e5364.  call temp:= `substring`(v0, v2) @signature `Lokio/ByteString;.substring:(I)Lokio/ByteString;` @kind virtual;
  #L2e536a.  v2:= temp @kind object;
  #L2e536c.  return v2 @kind object;
}
procedure `okio.ByteString` `substring`(`okio.SegmentedByteString` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lokio/SegmentedByteString;.substring:(II)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e5380.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e5386.  v0:= temp @kind object;
  #L2e5388.  call temp:= `substring`(v0, v2, v3) @signature `Lokio/ByteString;.substring:(II)Lokio/ByteString;` @kind virtual;
  #L2e538e.  v2:= temp @kind object;
  #L2e5390.  return v2 @kind object;
}
procedure `okio.ByteString` `toAsciiLowercase`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.toAsciiLowercase:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e53a4.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e53aa.  v0:= temp @kind object;
  #L2e53ac.  call temp:= `toAsciiLowercase`(v0) @signature `Lokio/ByteString;.toAsciiLowercase:()Lokio/ByteString;` @kind virtual;
  #L2e53b2.  v0:= temp @kind object;
  #L2e53b4.  return v0 @kind object;
}
procedure `okio.ByteString` `toAsciiUppercase`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.toAsciiUppercase:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e53c8.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e53ce.  v0:= temp @kind object;
  #L2e53d0.  call temp:= `toAsciiUppercase`(v0) @signature `Lokio/ByteString;.toAsciiUppercase:()Lokio/ByteString;` @kind virtual;
  #L2e53d6.  v0:= temp @kind object;
  #L2e53d8.  return v0 @kind object;
}
procedure `byte`[] `toByteArray`(`okio.SegmentedByteString` v8 @kind this) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2e5020.  v0:= v8.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L2e5024.  v1:= v8.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L2e5028.  v2:= length @variable v1;
  #L2e502a.  v2:= v2 + -1;
  #L2e502e.  v0:= v0[v2];
  #L2e5032.  v0:= new `byte`[v0];
  #L2e5036.  v1:= length @variable v1;
  #L2e5038.  v2:= 0I;
  #L2e503a.  v3:= 0I;
  #L2e503c.  if v2 >= v1 then goto L2e506a;
  #L2e5040.  v4:= v8.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L2e5044.  v5:= v1 + v2 @kind int;
  #L2e5048.  v5:= v4[v5];
  #L2e504c.  v4:= v4[v2];
  #L2e5050.  v6:= v8.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L2e5054.  v6:= v6[v2] @kind object;
  #L2e5058.  v7:= v4 - v3 @kind int;
  #L2e505c.  call `arraycopy`(v6, v5, v0, v3, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2e5062.  v2:= v2 + 1;
  #L2e5066.  v3:= v4;
  #L2e5068.  goto L2e503c;
  #L2e506a.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e5234.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e523a.  v0:= temp @kind object;
  #L2e523c.  call temp:= `toString`(v0) @signature `Lokio/ByteString;.toString:()Ljava/lang/String;` @kind virtual;
  #L2e5242.  v0:= temp @kind object;
  #L2e5244.  return v0 @kind object;
}
procedure `java.lang.String` `utf8`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.utf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e5258.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2e525e.  v0:= temp @kind object;
  #L2e5260.  call temp:= `utf8`(v0) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L2e5266.  v0:= temp @kind object;
  #L2e5268.  return v0 @kind object;
}
procedure `void` `write`(`okio.SegmentedByteString` v6 @kind this, `java.io.OutputStream` v7 @kind object) @signature `Lokio/SegmentedByteString;.write:(Ljava/io/OutputStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2e54d0.  if v7 == 0 then goto L2e550e;
  #L2e54d4.  v0:= v6.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L2e54d8.  v0:= length @variable v0;
  #L2e54da.  v1:= 0I;
  #L2e54dc.  v2:= 0I;
  #L2e54de.  if v1 >= v0 then goto L2e550c;
  #L2e54e2.  v3:= v6.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L2e54e6.  v4:= v0 + v1 @kind int;
  #L2e54ea.  v4:= v3[v4];
  #L2e54ee.  v3:= v3[v1];
  #L2e54f2.  v5:= v6.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L2e54f6.  v5:= v5[v1] @kind object;
  #L2e54fa.  v2:= v3 - v2 @kind int;
  #L2e54fe.  call `write`(v7, v5, v4, v2) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L2e5504.  v1:= v1 + 1;
  #L2e5508.  v2:= v3;
  #L2e550a.  goto L2e54de;
  #L2e550c.  return @kind void;
  #L2e550e.  v7:= new `java.lang.IllegalArgumentException`;
  #L2e5512.  v0:= "out == null" @kind object;
  #L2e5516.  call `<init>`(v7, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e551c.  goto L2e5520;
  #L2e551e.  throw v7;
  #L2e5520.  goto L2e551e;
}
