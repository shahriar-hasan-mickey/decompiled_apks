record `okio.Buffer$2` @kind class @AccessFlag  extends `java.io.InputStream` @kind class {
  `okio.Buffer` `okio.Buffer$2.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.Buffer$2` v0 @kind this, `okio.Buffer` v1 @kind object) @signature `Lokio/Buffer$2;.<init>:(Lokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2e1bf0.  v0.`okio.Buffer$2.a` @type ^`okio.Buffer` := v1 @kind object;
  #L2e1bf4.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L2e1bfa.  return @kind void;
}
procedure `int` `available`(`okio.Buffer$2` v4 @kind this) @signature `Lokio/Buffer$2;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e1b34.  v0:= v4.`okio.Buffer$2.a` @type ^`okio.Buffer` @kind object;
  #L2e1b38.  v0:= v0.`okio.Buffer.b` @type ^`long` @kind wide;
  #L2e1b3c.  v2:= 2147483647L;
  #L2e1b42.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2e1b48.  v0:= temp @kind wide;
  #L2e1b4a.  v1:= (`int`) v0 @kind l2i;
  #L2e1b4c.  return v1;
}
procedure `void` `close`(`okio.Buffer$2` v0 @kind this) @signature `Lokio/Buffer$2;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L2e1c0c.  return @kind void;
}
procedure `int` `read`(`okio.Buffer$2` v6 @kind this) @signature `Lokio/Buffer$2;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2e1b60.  v0:= v6.`okio.Buffer$2.a` @type ^`okio.Buffer` @kind object;
  #L2e1b64.  v1:= v0.`okio.Buffer.b` @type ^`long` @kind wide;
  #L2e1b68.  v3:= 0L;
  #L2e1b6c.  v5:= lcmp(v1, v3);
  #L2e1b70.  if v5 <= 0 then goto L2e1b82;
  #L2e1b74.  call temp:= `readByte`(v0) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2e1b7a.  v0:= temp;
  #L2e1b7c.  v0:= v0 ^& 255;
  #L2e1b80.  return v0;
  #L2e1b82.  v0:= -1I;
  #L2e1b84.  return v0;
}
procedure `int` `read`(`okio.Buffer$2` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/Buffer$2;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e1b98.  v0:= v1.`okio.Buffer$2.a` @type ^`okio.Buffer` @kind object;
  #L2e1b9c.  call temp:= `read`(v0, v2, v3, v4) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L2e1ba2.  v2:= temp;
  #L2e1ba4.  return v2;
}
procedure `java.lang.String` `toString`(`okio.Buffer$2` v2 @kind this) @signature `Lokio/Buffer$2;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2e1bb8.  v0:= new `java.lang.StringBuilder`;
  #L2e1bbc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2e1bc2.  v1:= v2.`okio.Buffer$2.a` @type ^`okio.Buffer` @kind object;
  #L2e1bc6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e1bcc.  v1:= ".inputStream()" @kind object;
  #L2e1bd0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e1bd6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2e1bdc.  v0:= temp @kind object;
  #L2e1bde.  return v0 @kind object;
}
