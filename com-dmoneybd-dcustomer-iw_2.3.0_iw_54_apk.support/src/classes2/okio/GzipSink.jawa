record `okio.GzipSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Sink` @kind interface {
  `boolean` `okio.GzipSink.closed` @AccessFlag PRIVATE;
  `java.util.zip.CRC32` `okio.GzipSink.crc` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Deflater` `okio.GzipSink.deflater` @AccessFlag PRIVATE_FINAL;
  `okio.DeflaterSink` `okio.GzipSink.deflaterSink` @AccessFlag PRIVATE_FINAL;
  `okio.BufferedSink` `okio.GzipSink.sink` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.GzipSink` v3 @kind this, `okio.Sink` v4 @kind object) @signature `Lokio/GzipSink;.<init>:(Lokio/Sink;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2e265c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2e2662.  v0:= new `java.util.zip.CRC32`;
  #L2e2666.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L2e266c.  v3.`okio.GzipSink.crc` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L2e2670.  if v4 == 0 then goto L2e26a8;
  #L2e2674.  v0:= new `java.util.zip.Deflater`;
  #L2e2678.  v1:= -1I;
  #L2e267a.  v2:= 1I;
  #L2e267c.  call `<init>`(v0, v1, v2) @signature `Ljava/util/zip/Deflater;.<init>:(IZ)V` @kind direct;
  #L2e2682.  v3.`okio.GzipSink.deflater` @type ^`java.util.zip.Deflater` := v0 @kind object;
  #L2e2686.  call temp:= `buffer`(v4) @signature `Lokio/Okio;.buffer:(Lokio/Sink;)Lokio/BufferedSink;` @kind static;
  #L2e268c.  v4:= temp @kind object;
  #L2e268e.  v3.`okio.GzipSink.sink` @type ^`okio.BufferedSink` := v4 @kind object;
  #L2e2692.  v1:= new `okio.DeflaterSink`;
  #L2e2696.  call `<init>`(v1, v4, v0) @signature `Lokio/DeflaterSink;.<init>:(Lokio/BufferedSink;Ljava/util/zip/Deflater;)V` @kind direct;
  #L2e269c.  v3.`okio.GzipSink.deflaterSink` @type ^`okio.DeflaterSink` := v1 @kind object;
  #L2e26a0.  call `writeHeader`(v3) @signature `Lokio/GzipSink;.writeHeader:()V` @kind direct;
  #L2e26a6.  return @kind void;
  #L2e26a8.  v4:= new `java.lang.IllegalArgumentException`;
  #L2e26ac.  v0:= "sink == null" @kind object;
  #L2e26b0.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e26b6.  throw v4;
}
procedure `void` `updateCrc`(`okio.GzipSink` v4 @kind this, `okio.Buffer` v5 @kind object, `long` v6 ) @signature `Lokio/GzipSink;.updateCrc:(Lokio/Buffer;J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e2770.  v5:= v5.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L2e2774.  v0:= 0L;
  #L2e2778.  v2:= lcmp(v6, v0);
  #L2e277c.  if v2 <= 0 then goto L2e27b2;
  #L2e2780.  v0:= v5.`okio.Segment.c` @type ^`int`;
  #L2e2784.  v1:= v5.`okio.Segment.b` @type ^`int`;
  #L2e2788.  v0:= v0 - v1 @kind int;
  #L2e278a.  v0:= (`long`) v0 @kind i2l;
  #L2e278c.  call temp:= `min`(v6, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2e2792.  v0:= temp @kind wide;
  #L2e2794.  v1:= (`int`) v0 @kind l2i;
  #L2e2796.  v0:= v4.`okio.GzipSink.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L2e279a.  v2:= v5.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L2e279e.  v3:= v5.`okio.Segment.b` @type ^`int`;
  #L2e27a2.  call `update`(v0, v2, v3, v1) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L2e27a8.  v0:= (`long`) v1 @kind i2l;
  #L2e27aa.  v6:= v6 - v0 @kind long;
  #L2e27ac.  v5:= v5.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L2e27b0.  goto L2e2774;
  #L2e27b2.  return @kind void;
}
procedure `void` `writeFooter`(`okio.GzipSink` v3 @kind this) @signature `Lokio/GzipSink;.writeFooter:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2e282c.  v0:= v3.`okio.GzipSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L2e2830.  v1:= v3.`okio.GzipSink.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L2e2834.  call temp:= `getValue`(v1) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L2e283a.  v1:= temp @kind wide;
  #L2e283c.  v2:= (`int`) v1 @kind l2i;
  #L2e283e.  call temp:= `writeIntLe`(v0, v2) @signature `Lokio/BufferedSink;.writeIntLe:(I)Lokio/BufferedSink;` @kind interface;
  #L2e2844.  v0:= v3.`okio.GzipSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L2e2848.  v1:= v3.`okio.GzipSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L2e284c.  call temp:= `getBytesRead`(v1) @signature `Ljava/util/zip/Deflater;.getBytesRead:()J` @kind virtual;
  #L2e2852.  v1:= temp @kind wide;
  #L2e2854.  v2:= (`int`) v1 @kind l2i;
  #L2e2856.  call temp:= `writeIntLe`(v0, v2) @signature `Lokio/BufferedSink;.writeIntLe:(I)Lokio/BufferedSink;` @kind interface;
  #L2e285c.  return @kind void;
}
procedure `void` `writeHeader`(`okio.GzipSink` v2 @kind this) @signature `Lokio/GzipSink;.writeHeader:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2e2870.  v0:= v2.`okio.GzipSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L2e2874.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSink;.buffer:()Lokio/Buffer;` @kind interface;
  #L2e287a.  v0:= temp @kind object;
  #L2e287c.  v1:= 8075I;
  #L2e2880.  call temp:= `writeShort`(v0, v1) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L2e2886.  v1:= 8I;
  #L2e288a.  call temp:= `writeByte`(v0, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2e2890.  v1:= 0I;
  #L2e2892.  call temp:= `writeByte`(v0, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2e2898.  call temp:= `writeInt`(v0, v1) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L2e289e.  call temp:= `writeByte`(v0, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2e28a4.  call temp:= `writeByte`(v0, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2e28aa.  return @kind void;
}
procedure `void` `close`(`okio.GzipSink` v2 @kind this) @signature `Lokio/GzipSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2e26c8.  v0:= v2.`okio.GzipSink.closed` @type ^`boolean` @kind boolean;
  #L2e26cc.  if v0 == 0 then goto L2e26d2;
  #L2e26d0.  return @kind void;
  #L2e26d2.  v0:= 0I;
  #L2e26d4.  v1:= v2.`okio.GzipSink.deflaterSink` @type ^`okio.DeflaterSink` @kind object;
  #L2e26d8.  call `a`(v1) @signature `Lokio/DeflaterSink;.a:()V` @kind virtual;
  #L2e26de.  call `writeFooter`(v2) @signature `Lokio/GzipSink;.writeFooter:()V` @kind direct;
  #L2e26e4.  goto L2e26e8;
  #L2e26e6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e26e8.  v1:= v2.`okio.GzipSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L2e26ec.  call `end`(v1) @signature `Ljava/util/zip/Deflater;.end:()V` @kind virtual;
  #L2e26f2.  goto L2e26fc;
  #L2e26f4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e26f6.  if v0 != 0 then goto L2e26fc;
  #L2e26fa.  v0:= v1 @kind object;
  #L2e26fc.  v1:= v2.`okio.GzipSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L2e2700.  call `close`(v1) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L2e2706.  goto L2e2710;
  #L2e2708.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e270a.  if v0 != 0 then goto L2e2710;
  #L2e270e.  v0:= v1 @kind object;
  #L2e2710.  v1:= 1I;
  #L2e2712.  v2.`okio.GzipSink.closed` @type ^`boolean` := v1 @kind boolean;
  #L2e2716.  if v0 == 0 then goto L2e2720;
  #L2e271a.  call `sneakyRethrow`(v0) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @kind static;
  #L2e2720.  return @kind void;
  catch `java.lang.Throwable` @[L2e26d4..L2e26e4] goto L2e26e6;
  catch `java.lang.Throwable` @[L2e26e8..L2e26f2] goto L2e26f4;
  catch `java.lang.Throwable` @[L2e26fc..L2e2706] goto L2e2708;
}
procedure `java.util.zip.Deflater` `deflater`(`okio.GzipSink` v1 @kind this) @signature `Lokio/GzipSink;.deflater:()Ljava/util/zip/Deflater;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e2624.  v0:= v1.`okio.GzipSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L2e2628.  return v0 @kind object;
}
procedure `void` `flush`(`okio.GzipSink` v1 @kind this) @signature `Lokio/GzipSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e2754.  v0:= v1.`okio.GzipSink.deflaterSink` @type ^`okio.DeflaterSink` @kind object;
  #L2e2758.  call `flush`(v0) @signature `Lokio/DeflaterSink;.flush:()V` @kind virtual;
  #L2e275e.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okio.GzipSink` v1 @kind this) @signature `Lokio/GzipSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e263c.  v0:= v1.`okio.GzipSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L2e2640.  call temp:= `timeout`(v0) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L2e2646.  v0:= temp @kind object;
  #L2e2648.  return v0 @kind object;
}
procedure `void` `write`(`okio.GzipSink` v3 @kind this, `okio.Buffer` v4 @kind object, `long` v5 ) @signature `Lokio/GzipSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2e27c4.  v0:= 0L;
  #L2e27c8.  v2:= lcmp(v5, v0);
  #L2e27cc.  if v2 < 0 then goto L2e27ec;
  #L2e27d0.  v2:= lcmp(v5, v0);
  #L2e27d4.  if v2 != 0 then goto L2e27da;
  #L2e27d8.  return @kind void;
  #L2e27da.  call `updateCrc`(v3, v4, v5) @signature `Lokio/GzipSink;.updateCrc:(Lokio/Buffer;J)V` @kind direct;
  #L2e27e0.  v0:= v3.`okio.GzipSink.deflaterSink` @type ^`okio.DeflaterSink` @kind object;
  #L2e27e4.  call `write`(v0, v4, v5) @signature `Lokio/DeflaterSink;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L2e27ea.  return @kind void;
  #L2e27ec.  v4:= new `java.lang.IllegalArgumentException`;
  #L2e27f0.  v0:= new `java.lang.StringBuilder`;
  #L2e27f4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2e27fa.  v1:= "byteCount < 0: " @kind object;
  #L2e27fe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e2804.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e280a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2e2810.  v5:= temp @kind object;
  #L2e2812.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e2818.  throw v4;
}
