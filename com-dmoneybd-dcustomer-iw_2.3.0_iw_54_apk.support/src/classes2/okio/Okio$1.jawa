record `okio.Okio$1` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `okio.Timeout` `okio.Okio$1.a` @AccessFlag FINAL_SYNTHETIC;
  `java.io.OutputStream` `okio.Okio$1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.Okio$1` v0 @kind this, `okio.Timeout` v1 @kind object, `java.io.OutputStream` v2 @kind object) @signature `Lokio/Okio$1;.<init>:(Lokio/Timeout;Ljava/io/OutputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2e32e4.  v0.`okio.Okio$1.a` @type ^`okio.Timeout` := v1 @kind object;
  #L2e32e8.  v0.`okio.Okio$1.b` @type ^`java.io.OutputStream` := v2 @kind object;
  #L2e32ec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2e32f2.  return @kind void;
}
procedure `void` `close`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e3304.  v0:= v1.`okio.Okio$1.b` @type ^`java.io.OutputStream` @kind object;
  #L2e3308.  call `close`(v0) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L2e330e.  return @kind void;
}
procedure `void` `flush`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e3320.  v0:= v1.`okio.Okio$1.b` @type ^`java.io.OutputStream` @kind object;
  #L2e3324.  call `flush`(v0) @signature `Ljava/io/OutputStream;.flush:()V` @kind virtual;
  #L2e332a.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e32cc.  v0:= v1.`okio.Okio$1.a` @type ^`okio.Timeout` @kind object;
  #L2e32d0.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Okio$1` v2 @kind this) @signature `Lokio/Okio$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2e3288.  v0:= new `java.lang.StringBuilder`;
  #L2e328c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2e3292.  v1:= "sink(" @kind object;
  #L2e3296.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e329c.  v1:= v2.`okio.Okio$1.b` @type ^`java.io.OutputStream` @kind object;
  #L2e32a0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e32a6.  v1:= ")" @kind object;
  #L2e32aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e32b0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2e32b6.  v0:= temp @kind object;
  #L2e32b8.  return v0 @kind object;
}
procedure `void` `write`(`okio.Okio$1` v6 @kind this, `okio.Buffer` v7 @kind object, `long` v8 ) @signature `Lokio/Okio$1;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2e333c.  v0:= v7.`okio.Buffer.b` @type ^`long` @kind wide;
  #L2e3340.  v2:= 0L;
  #L2e3344.  v4:= v8 @kind wide;
  #L2e3346.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2e334c.  v0:= 0L;
  #L2e3350.  v2:= lcmp(v8, v0);
  #L2e3354.  if v2 <= 0 then goto L2e33c2;
  #L2e3358.  v0:= v6.`okio.Okio$1.a` @type ^`okio.Timeout` @kind object;
  #L2e335c.  call `throwIfReached`(v0) @signature `Lokio/Timeout;.throwIfReached:()V` @kind virtual;
  #L2e3362.  v0:= v7.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L2e3366.  v1:= v0.`okio.Segment.c` @type ^`int`;
  #L2e336a.  v2:= v0.`okio.Segment.b` @type ^`int`;
  #L2e336e.  v1:= v1 - v2 @kind int;
  #L2e3370.  v1:= (`long`) v1 @kind i2l;
  #L2e3372.  call temp:= `min`(v8, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2e3378.  v1:= temp @kind wide;
  #L2e337a.  v2:= (`int`) v1 @kind l2i;
  #L2e337c.  v1:= v6.`okio.Okio$1.b` @type ^`java.io.OutputStream` @kind object;
  #L2e3380.  v3:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L2e3384.  v4:= v0.`okio.Segment.b` @type ^`int`;
  #L2e3388.  call `write`(v1, v3, v4, v2) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L2e338e.  v1:= v0.`okio.Segment.b` @type ^`int`;
  #L2e3392.  v1:= v1 + v2 @kind int;
  #L2e3394.  v0.`okio.Segment.b` @type ^`int` := v1;
  #L2e3398.  v2:= (`long`) v2 @kind i2l;
  #L2e339a.  v8:= v8 - v2 @kind long;
  #L2e339c.  v4:= v7.`okio.Buffer.b` @type ^`long` @kind wide;
  #L2e33a0.  v4:= v4 - v2 @kind long;
  #L2e33a2.  v7.`okio.Buffer.b` @type ^`long` := v4 @kind wide;
  #L2e33a6.  v2:= v0.`okio.Segment.c` @type ^`int`;
  #L2e33aa.  if v1 != v2 then goto L2e334c;
  #L2e33ae.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L2e33b4.  v1:= temp @kind object;
  #L2e33b6.  v7.`okio.Buffer.a` @type ^`okio.Segment` := v1 @kind object;
  #L2e33ba.  call `a`(v0) @signature `Lokio/SegmentPool;.a:(Lokio/Segment;)V` @kind static;
  #L2e33c0.  goto L2e334c;
  #L2e33c2.  return @kind void;
}
