record `okio.Segment` @kind class @AccessFlag FINAL {
  `byte`[] `okio.Segment.a` @AccessFlag FINAL;
  `int` `okio.Segment.b` @AccessFlag ;
  `int` `okio.Segment.c` @AccessFlag ;
  `boolean` `okio.Segment.d` @AccessFlag ;
  `boolean` `okio.Segment.e` @AccessFlag ;
  `okio.Segment` `okio.Segment.f` @AccessFlag ;
  `okio.Segment` `okio.Segment.g` @AccessFlag ;
}
procedure `void` `<init>`(`okio.Segment` v1 @kind this) @signature `Lokio/Segment;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L50d3fc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50d402.  v0:= 8192I;
  #L50d406.  v0:= new `byte`[v0];
  #L50d40a.  v1.`okio.Segment.a` @type ^`byte`[] := v0 @kind object;
  #L50d40e.  v0:= 1I;
  #L50d410.  v1.`okio.Segment.e` @type ^`boolean` := v0 @kind boolean;
  #L50d414.  v0:= 0I;
  #L50d416.  v1.`okio.Segment.d` @type ^`boolean` := v0 @kind boolean;
  #L50d41a.  return @kind void;
}
procedure `void` `<init>`(`okio.Segment` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `boolean` v4 , `boolean` v5 ) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L50d42c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50d432.  v0.`okio.Segment.a` @type ^`byte`[] := v1 @kind object;
  #L50d436.  v0.`okio.Segment.b` @type ^`int` := v2;
  #L50d43a.  v0.`okio.Segment.c` @type ^`int` := v3;
  #L50d43e.  v0.`okio.Segment.d` @type ^`boolean` := v4 @kind boolean;
  #L50d442.  v0.`okio.Segment.e` @type ^`boolean` := v5 @kind boolean;
  #L50d446.  return @kind void;
}
procedure `okio.Segment` `a`(`okio.Segment` v7 @kind this) @signature `Lokio/Segment;.a:()Lokio/Segment;` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L50d310.  v0:= 1I;
  #L50d312.  v7.`okio.Segment.d` @type ^`boolean` := v0 @kind boolean;
  #L50d316.  v0:= new `okio.Segment`;
  #L50d31a.  v2:= v7.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50d31e.  v3:= v7.`okio.Segment.b` @type ^`int`;
  #L50d322.  v4:= v7.`okio.Segment.c` @type ^`int`;
  #L50d326.  v5:= 1I;
  #L50d328.  v6:= 0I;
  #L50d32a.  v1:= v0 @kind object;
  #L50d32c.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @kind direct;
  #L50d332.  return v0 @kind object;
}
procedure `okio.Segment` `b`(`okio.Segment` v7 @kind this) @signature `Lokio/Segment;.b:()Lokio/Segment;` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L50d3c0.  v6:= new `okio.Segment`;
  #L50d3c4.  v0:= v7.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50d3c8.  call temp:= `clone`(v0) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L50d3ce.  v0:= temp @kind object;
  #L50d3d0.  v1:= v0 @kind object;
  #L50d3d2.  v1:= (`byte`[]) v1 @kind object;
  #L50d3d6.  v2:= v7.`okio.Segment.b` @type ^`int`;
  #L50d3da.  v3:= v7.`okio.Segment.c` @type ^`int`;
  #L50d3de.  v4:= 0I;
  #L50d3e0.  v5:= 1I;
  #L50d3e2.  v0:= v6 @kind object;
  #L50d3e4.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @kind direct;
  #L50d3ea.  return v6 @kind object;
}
procedure `void` `compact`(`okio.Segment` v4 @kind this) @signature `Lokio/Segment;.compact:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50d458.  v0:= v4.`okio.Segment.g` @type ^`okio.Segment` @kind object;
  #L50d45c.  if v0 == v4 then goto L50d4a8;
  #L50d460.  v1:= v0.`okio.Segment.e` @type ^`boolean` @kind boolean;
  #L50d464.  if v1 != 0 then goto L50d46a;
  #L50d468.  return @kind void;
  #L50d46a.  v1:= v4.`okio.Segment.c` @type ^`int`;
  #L50d46e.  v2:= v4.`okio.Segment.b` @type ^`int`;
  #L50d472.  v1:= v1 - v2 @kind int;
  #L50d474.  v2:= v0.`okio.Segment.c` @type ^`int`;
  #L50d478.  v2:= v2 - 8192;
  #L50d47c.  v3:= v0.`okio.Segment.d` @type ^`boolean` @kind boolean;
  #L50d480.  if v3 == 0 then goto L50d488;
  #L50d484.  v3:= 0I;
  #L50d486.  goto L50d48c;
  #L50d488.  v3:= v0.`okio.Segment.b` @type ^`int`;
  #L50d48c.  v2:= v2 + v3 @kind int;
  #L50d48e.  if v1 <= v2 then goto L50d494;
  #L50d492.  return @kind void;
  #L50d494.  call `writeTo`(v4, v0, v1) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L50d49a.  call temp:= `pop`(v4) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L50d4a0.  call `a`(v4) @signature `Lokio/SegmentPool;.a:(Lokio/Segment;)V` @kind static;
  #L50d4a6.  return @kind void;
  #L50d4a8.  v0:= new `java.lang.IllegalStateException`;
  #L50d4ac.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L50d4b2.  throw v0;
}
procedure `okio.Segment` `pop`(`okio.Segment` v4 @kind this) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50d2a8.  v0:= v4.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L50d2ac.  v1:= 0I;
  #L50d2ae.  if v0 == v4 then goto L50d2b6;
  #L50d2b2.  v2:= v0 @kind object;
  #L50d2b4.  goto L50d2b8;
  #L50d2b6.  v2:= v1 @kind object;
  #L50d2b8.  v3:= v4.`okio.Segment.g` @type ^`okio.Segment` @kind object;
  #L50d2bc.  v3.`okio.Segment.f` @type ^`okio.Segment` := v0 @kind object;
  #L50d2c0.  v0:= v4.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L50d2c4.  v0.`okio.Segment.g` @type ^`okio.Segment` := v3 @kind object;
  #L50d2c8.  v4.`okio.Segment.f` @type ^`okio.Segment` := v1 @kind object;
  #L50d2cc.  v4.`okio.Segment.g` @type ^`okio.Segment` := v1 @kind object;
  #L50d2d0.  return v2 @kind object;
}
procedure `okio.Segment` `push`(`okio.Segment` v1 @kind this, `okio.Segment` v2 @kind object) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50d2e4.  v2.`okio.Segment.g` @type ^`okio.Segment` := v1 @kind object;
  #L50d2e8.  v0:= v1.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L50d2ec.  v2.`okio.Segment.f` @type ^`okio.Segment` := v0 @kind object;
  #L50d2f0.  v0:= v1.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L50d2f4.  v0.`okio.Segment.g` @type ^`okio.Segment` := v2 @kind object;
  #L50d2f8.  v1.`okio.Segment.f` @type ^`okio.Segment` := v2 @kind object;
  #L50d2fc.  return v2 @kind object;
}
procedure `okio.Segment` `split`(`okio.Segment` v5 @kind this, `int` v6 ) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50d344.  if v6 <= 0 then goto L50d3a4;
  #L50d348.  v0:= v5.`okio.Segment.c` @type ^`int`;
  #L50d34c.  v1:= v5.`okio.Segment.b` @type ^`int`;
  #L50d350.  v0:= v0 - v1 @kind int;
  #L50d352.  if v6 > v0 then goto L50d3a4;
  #L50d356.  v0:= 1024I;
  #L50d35a.  if v6 < v0 then goto L50d368;
  #L50d35e.  call temp:= `a`(v5) @signature `Lokio/Segment;.a:()Lokio/Segment;` @kind virtual;
  #L50d364.  v0:= temp @kind object;
  #L50d366.  goto L50d384;
  #L50d368.  call temp:= `b`() @signature `Lokio/SegmentPool;.b:()Lokio/Segment;` @kind static;
  #L50d36e.  v0:= temp @kind object;
  #L50d370.  v1:= v5.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50d374.  v2:= v5.`okio.Segment.b` @type ^`int`;
  #L50d378.  v3:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50d37c.  v4:= 0I;
  #L50d37e.  call `arraycopy`(v1, v2, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L50d384.  v1:= v0.`okio.Segment.b` @type ^`int`;
  #L50d388.  v1:= v1 + v6 @kind int;
  #L50d38a.  v0.`okio.Segment.c` @type ^`int` := v1;
  #L50d38e.  v1:= v5.`okio.Segment.b` @type ^`int`;
  #L50d392.  v1:= v1 + v6 @kind int;
  #L50d394.  v5.`okio.Segment.b` @type ^`int` := v1;
  #L50d398.  v6:= v5.`okio.Segment.g` @type ^`okio.Segment` @kind object;
  #L50d39c.  call temp:= `push`(v6, v0) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L50d3a2.  return v0 @kind object;
  #L50d3a4.  v6:= new `java.lang.IllegalArgumentException`;
  #L50d3a8.  call `<init>`(v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L50d3ae.  throw v6;
}
procedure `void` `writeTo`(`okio.Segment` v4 @kind this, `okio.Segment` v5 @kind object, `int` v6 ) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50d4c4.  v0:= v5.`okio.Segment.e` @type ^`boolean` @kind boolean;
  #L50d4c8.  if v0 == 0 then goto L50d558;
  #L50d4cc.  v0:= v5.`okio.Segment.c` @type ^`int`;
  #L50d4d0.  v1:= v0 + v6 @kind int;
  #L50d4d4.  v2:= 8192I;
  #L50d4d8.  if v1 <= v2 then goto L50d52c;
  #L50d4dc.  v1:= v5.`okio.Segment.d` @type ^`boolean` @kind boolean;
  #L50d4e0.  if v1 != 0 then goto L50d520;
  #L50d4e4.  v1:= v0 + v6 @kind int;
  #L50d4e8.  v3:= v5.`okio.Segment.b` @type ^`int`;
  #L50d4ec.  v1:= v1 - v3 @kind int;
  #L50d4ee.  if v1 > v2 then goto L50d514;
  #L50d4f2.  v1:= v5.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50d4f6.  v0:= v0 - v3 @kind int;
  #L50d4f8.  v2:= 0I;
  #L50d4fa.  call `arraycopy`(v1, v3, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L50d500.  v0:= v5.`okio.Segment.c` @type ^`int`;
  #L50d504.  v1:= v5.`okio.Segment.b` @type ^`int`;
  #L50d508.  v0:= v0 - v1 @kind int;
  #L50d50a.  v5.`okio.Segment.c` @type ^`int` := v0;
  #L50d50e.  v5.`okio.Segment.b` @type ^`int` := v2;
  #L50d512.  goto L50d52c;
  #L50d514.  v5:= new `java.lang.IllegalArgumentException`;
  #L50d518.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L50d51e.  throw v5;
  #L50d520.  v5:= new `java.lang.IllegalArgumentException`;
  #L50d524.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L50d52a.  throw v5;
  #L50d52c.  v0:= v4.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50d530.  v1:= v4.`okio.Segment.b` @type ^`int`;
  #L50d534.  v2:= v5.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50d538.  v3:= v5.`okio.Segment.c` @type ^`int`;
  #L50d53c.  call `arraycopy`(v0, v1, v2, v3, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L50d542.  v0:= v5.`okio.Segment.c` @type ^`int`;
  #L50d546.  v0:= v0 + v6 @kind int;
  #L50d548.  v5.`okio.Segment.c` @type ^`int` := v0;
  #L50d54c.  v5:= v4.`okio.Segment.b` @type ^`int`;
  #L50d550.  v5:= v5 + v6 @kind int;
  #L50d552.  v4.`okio.Segment.b` @type ^`int` := v5;
  #L50d556.  return @kind void;
  #L50d558.  v5:= new `java.lang.IllegalArgumentException`;
  #L50d55c.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L50d562.  throw v5;
}
