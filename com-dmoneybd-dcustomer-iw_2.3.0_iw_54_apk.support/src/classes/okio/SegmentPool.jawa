record `okio.SegmentPool` @kind class @AccessFlag FINAL {
}
global `okio.Segment` `@@okio.SegmentPool.a` @AccessFlag STATIC;
global `long` `@@okio.SegmentPool.b` @AccessFlag STATIC;
procedure `void` `<init>`(`okio.SegmentPool` v0 @kind this) @signature `Lokio/SegmentPool;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L50d204.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50d20a.  return @kind void;
}
procedure `void` `a`(`okio.Segment` v10 @kind object) @signature `Lokio/SegmentPool;.a:(Lokio/Segment;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L50d21c.  v0:= v10.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L50d220.  if v0 != 0 then goto L50d280;
  #L50d224.  v0:= v10.`okio.Segment.g` @type ^`okio.Segment` @kind object;
  #L50d228.  if v0 != 0 then goto L50d280;
  #L50d22c.  v0:= v10.`okio.Segment.d` @type ^`boolean` @kind boolean;
  #L50d230.  if v0 == 0 then goto L50d236;
  #L50d234.  return @kind void;
  #L50d236.  v0:= constclass @type ^`okio.SegmentPool` @kind object;
  #L50d23a.  @monitorenter v0
  #L50d23c.  v1:= `@@okio.SegmentPool.b` @type ^`long` @kind wide;
  #L50d240.  v3:= 8192L;
  #L50d244.  v5:= v1 + v3 @kind long;
  #L50d248.  v7:= 65536L;
  #L50d24e.  v9:= lcmp(v5, v7);
  #L50d252.  if v9 <= 0 then goto L50d25a;
  #L50d256.  @monitorexit v0
  #L50d258.  return @kind void;
  #L50d25a.  v1:= v1 + v3 @kind long;
  #L50d25c.  `@@okio.SegmentPool.b` @type ^`long` := v1 @kind wide;
  #L50d260.  v1:= `@@okio.SegmentPool.a` @type ^`okio.Segment` @kind object;
  #L50d264.  v10.`okio.Segment.f` @type ^`okio.Segment` := v1 @kind object;
  #L50d268.  v1:= 0I;
  #L50d26a.  v10.`okio.Segment.c` @type ^`int` := v1;
  #L50d26e.  v10.`okio.Segment.b` @type ^`int` := v1;
  #L50d272.  `@@okio.SegmentPool.a` @type ^`okio.Segment` := v10 @kind object;
  #L50d276.  @monitorexit v0
  #L50d278.  return @kind void;
  #L50d27a.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50d27c.  @monitorexit v0
  #L50d27e.  throw v10;
  #L50d280.  v10:= new `java.lang.IllegalArgumentException`;
  #L50d284.  call `<init>`(v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L50d28a.  throw v10;
  catch `java.lang.Throwable` @[L50d23c..L50d27e] goto L50d27a;
}
procedure `okio.Segment` `b`() @signature `Lokio/SegmentPool;.b:()Lokio/Segment;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L50d19c.  v0:= constclass @type ^`okio.SegmentPool` @kind object;
  #L50d1a0.  @monitorenter v0
  #L50d1a2.  v1:= `@@okio.SegmentPool.a` @type ^`okio.Segment` @kind object;
  #L50d1a6.  if v1 == 0 then goto L50d1ca;
  #L50d1aa.  v2:= v1.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L50d1ae.  `@@okio.SegmentPool.a` @type ^`okio.Segment` := v2 @kind object;
  #L50d1b2.  v2:= 0I;
  #L50d1b4.  v1.`okio.Segment.f` @type ^`okio.Segment` := v2 @kind object;
  #L50d1b8.  v2:= `@@okio.SegmentPool.b` @type ^`long` @kind wide;
  #L50d1bc.  v4:= 8192L;
  #L50d1c0.  v2:= v2 - v4 @kind long;
  #L50d1c2.  `@@okio.SegmentPool.b` @type ^`long` := v2 @kind wide;
  #L50d1c6.  @monitorexit v0
  #L50d1c8.  return v1 @kind object;
  #L50d1ca.  @monitorexit v0
  #L50d1cc.  v0:= new `okio.Segment`;
  #L50d1d0.  call `<init>`(v0) @signature `Lokio/Segment;.<init>:()V` @kind direct;
  #L50d1d6.  return v0 @kind object;
  #L50d1d8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50d1da.  @monitorexit v0
  #L50d1dc.  throw v1;
  catch `java.lang.Throwable` @[L50d1a2..L50d1cc] goto L50d1d8;
  catch `java.lang.Throwable` @[L50d1da..L50d1dc] goto L50d1d8;
}
