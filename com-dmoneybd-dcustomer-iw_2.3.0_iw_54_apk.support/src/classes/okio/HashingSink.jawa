record `okio.HashingSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.ForwardingSink` @kind class {
  `javax.crypto.Mac` `okio.HashingSink.mac` @AccessFlag PRIVATE_FINAL;
  `java.security.MessageDigest` `okio.HashingSink.messageDigest` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.HashingSink` v0 @kind this, `okio.Sink` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L50bf98.  call `<init>`(v0, v1) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L50bf9e.  call temp:= `getInstance`(v2) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L50bfa4.  v1:= temp @kind object;
  #L50bfa6.  v0.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` := v1 @kind object;
  #L50bfaa.  v1:= 0I;
  #L50bfac.  v0.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` := v1 @kind object;
  #L50bfb0.  return @kind void;
  #L50bfb2.  v1:= new `java.lang.AssertionError`;
  #L50bfb6.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L50bfbc.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[L50bf9e..L50bfb0] goto L50bfb2;
}
procedure `void` `<init>`(`okio.HashingSink` v1 @kind this, `okio.Sink` v2 @kind object, `okio.ByteString` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Lokio/ByteString;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L50bfe0.  call `<init>`(v1, v2) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L50bfe6.  call temp:= `getInstance`(v4) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L50bfec.  v2:= temp @kind object;
  #L50bfee.  v1.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` := v2 @kind object;
  #L50bff2.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L50bff6.  call temp:= `toByteArray`(v3) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L50bffc.  v3:= temp @kind object;
  #L50bffe.  call `<init>`(v0, v3, v4) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L50c004.  call `init`(v2, v0) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L50c00a.  v2:= 0I;
  #L50c00c.  v1.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` := v2 @kind object;
  #L50c010.  return @kind void;
  #L50c012.  v2:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L50c014.  v3:= new `java.lang.IllegalArgumentException`;
  #L50c018.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L50c01e.  throw v3;
  #L50c020.  v2:= new `java.lang.AssertionError`;
  #L50c024.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L50c02a.  throw v2;
  catch `java.security.NoSuchAlgorithmException` @[L50bfe6..L50c010] goto L50c020;
  catch `java.security.InvalidKeyException` @[L50bfe6..L50c010] goto L50c012;
}
procedure `okio.HashingSink` `hmacSha1`(`okio.Sink` v2 @kind object, `okio.ByteString` v3 @kind object) @signature `Lokio/HashingSink;.hmacSha1:(Lokio/Sink;Lokio/ByteString;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L50beb8.  v0:= new `okio.HashingSink`;
  #L50bebc.  v1:= "HmacSHA1" @kind object;
  #L50bec0.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L50bec6.  return v0 @kind object;
}
procedure `okio.HashingSink` `hmacSha256`(`okio.Sink` v2 @kind object, `okio.ByteString` v3 @kind object) @signature `Lokio/HashingSink;.hmacSha256:(Lokio/Sink;Lokio/ByteString;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L50bed8.  v0:= new `okio.HashingSink`;
  #L50bedc.  v1:= "HmacSHA256" @kind object;
  #L50bee0.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L50bee6.  return v0 @kind object;
}
procedure `okio.HashingSink` `hmacSha512`(`okio.Sink` v2 @kind object, `okio.ByteString` v3 @kind object) @signature `Lokio/HashingSink;.hmacSha512:(Lokio/Sink;Lokio/ByteString;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L50bef8.  v0:= new `okio.HashingSink`;
  #L50befc.  v1:= "HmacSHA512" @kind object;
  #L50bf00.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L50bf06.  return v0 @kind object;
}
procedure `okio.HashingSink` `md5`(`okio.Sink` v2 @kind object) @signature `Lokio/HashingSink;.md5:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L50bf18.  v0:= new `okio.HashingSink`;
  #L50bf1c.  v1:= "MD5" @kind object;
  #L50bf20.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L50bf26.  return v0 @kind object;
}
procedure `okio.HashingSink` `sha1`(`okio.Sink` v2 @kind object) @signature `Lokio/HashingSink;.sha1:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L50bf38.  v0:= new `okio.HashingSink`;
  #L50bf3c.  v1:= "SHA-1" @kind object;
  #L50bf40.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L50bf46.  return v0 @kind object;
}
procedure `okio.HashingSink` `sha256`(`okio.Sink` v2 @kind object) @signature `Lokio/HashingSink;.sha256:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L50bf58.  v0:= new `okio.HashingSink`;
  #L50bf5c.  v1:= "SHA-256" @kind object;
  #L50bf60.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L50bf66.  return v0 @kind object;
}
procedure `okio.HashingSink` `sha512`(`okio.Sink` v2 @kind object) @signature `Lokio/HashingSink;.sha512:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L50bf78.  v0:= new `okio.HashingSink`;
  #L50bf7c.  v1:= "SHA-512" @kind object;
  #L50bf80.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L50bf86.  return v0 @kind object;
}
procedure `okio.ByteString` `hash`(`okio.HashingSink` v1 @kind this) @signature `Lokio/HashingSink;.hash:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50be80.  v0:= v1.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L50be84.  if v0 == 0 then goto L50be92;
  #L50be88.  call temp:= `digest`(v0) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L50be8e.  v0:= temp @kind object;
  #L50be90.  goto L50be9e;
  #L50be92.  v0:= v1.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` @kind object;
  #L50be96.  call temp:= `doFinal`(v0) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L50be9c.  v0:= temp @kind object;
  #L50be9e.  call temp:= `of`(v0) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L50bea4.  v0:= temp @kind object;
  #L50bea6.  return v0 @kind object;
}
procedure `void` `write`(`okio.HashingSink` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokio/HashingSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L50c04c.  v0:= v8.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50c050.  v2:= 0L;
  #L50c054.  v4:= v9 @kind wide;
  #L50c056.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L50c05c.  v0:= v8.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L50c060.  v1:= 0L;
  #L50c064.  v3:= lcmp(v1, v9);
  #L50c068.  if v3 >= 0 then goto L50c0ba;
  #L50c06c.  v3:= v9 - v1 @kind long;
  #L50c070.  v5:= v0.`okio.Segment.c` @type ^`int`;
  #L50c074.  v6:= v0.`okio.Segment.b` @type ^`int`;
  #L50c078.  v5:= v5 - v6 @kind int;
  #L50c07a.  v5:= (`long`) v5 @kind i2l;
  #L50c07c.  call temp:= `min`(v3, v5) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L50c082.  v3:= temp @kind wide;
  #L50c084.  v4:= (`int`) v3 @kind l2i;
  #L50c086.  v3:= v7.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L50c08a.  if v3 == 0 then goto L50c09e;
  #L50c08e.  v5:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50c092.  v6:= v0.`okio.Segment.b` @type ^`int`;
  #L50c096.  call `update`(v3, v5, v6, v4) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L50c09c.  goto L50c0b0;
  #L50c09e.  v3:= v7.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` @kind object;
  #L50c0a2.  v5:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50c0a6.  v6:= v0.`okio.Segment.b` @type ^`int`;
  #L50c0aa.  call `update`(v3, v5, v6, v4) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L50c0b0.  v3:= (`long`) v4 @kind i2l;
  #L50c0b2.  v1:= v1 + v3 @kind long;
  #L50c0b4.  v0:= v0.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L50c0b8.  goto L50c064;
  #L50c0ba.  call `write`(v7, v8, v9) @signature `Lokio/ForwardingSink;.write:(Lokio/Buffer;J)V` @kind super;
  #L50c0c0.  return @kind void;
}
