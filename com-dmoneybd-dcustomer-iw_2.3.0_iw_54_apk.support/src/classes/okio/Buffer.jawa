record `okio.Buffer` @kind class @AccessFlag PUBLIC_FINAL extends `okio.BufferedSource` @kind interface, `okio.BufferedSink` @kind interface, `java.lang.Cloneable` @kind interface, `java.nio.channels.ByteChannel` @kind interface {
  `okio.Segment` `okio.Buffer.a` @AccessFlag ;
  `long` `okio.Buffer.b` @AccessFlag ;
}
global `byte`[] `@@okio.Buffer.DIGITS` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Buffer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L50aa74.  v0:= 16I;
  #L50aa78.  v0:= new `byte`[v0];
  #L50aa7c.  goto L50aa88;
  #L50aa82.  `@@okio.Buffer.DIGITS` @type ^`byte`[] := v0 @kind object;
  #L50aa86.  return @kind void;
  #L50aa88.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L50aa9f.  goto L50aa82;
}
procedure `void` `<init>`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L50aab0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50aab6.  return @kind void;
}
procedure `okio.ByteString` `digest`(`okio.Buffer` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50a604.  call temp:= `getInstance`(v5) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L50a60a.  v5:= temp @kind object;
  #L50a60c.  v0:= v4.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L50a610.  if v0 == 0 then goto L50a64e;
  #L50a614.  v1:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50a618.  v2:= v0.`okio.Segment.b` @type ^`int`;
  #L50a61c.  v0:= v0.`okio.Segment.c` @type ^`int`;
  #L50a620.  v0:= v0 - v2 @kind int;
  #L50a622.  call `update`(v5, v1, v2, v0) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L50a628.  v0:= v4.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L50a62c.  v0:= v0.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L50a630.  v1:= v4.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L50a634.  if v0 == v1 then goto L50a64e;
  #L50a638.  v1:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50a63c.  v2:= v0.`okio.Segment.b` @type ^`int`;
  #L50a640.  v3:= v0.`okio.Segment.c` @type ^`int`;
  #L50a644.  v3:= v3 - v2 @kind int;
  #L50a646.  call `update`(v5, v1, v2, v3) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L50a64c.  goto L50a62c;
  #L50a64e.  call temp:= `digest`(v5) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L50a654.  v5:= temp @kind object;
  #L50a656.  call temp:= `of`(v5) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L50a65c.  v5:= temp @kind object;
  #L50a65e.  return v5 @kind object;
  #L50a660.  v5:= new `java.lang.AssertionError`;
  #L50a664.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L50a66a.  goto L50a66e;
  #L50a66c.  throw v5;
  #L50a66e.  goto L50a66c;
  catch `java.security.NoSuchAlgorithmException` @[L50a604..L50a65e] goto L50a660;
}
procedure `okio.ByteString` `hmac`(`okio.Buffer` v3 @kind this, `java.lang.String` v4 @kind object, `okio.ByteString` v5 @kind object) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L50a690.  call temp:= `getInstance`(v4) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L50a696.  v0:= temp @kind object;
  #L50a698.  v1:= new `javax.crypto.spec.SecretKeySpec`;
  #L50a69c.  call temp:= `toByteArray`(v5) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L50a6a2.  v5:= temp @kind object;
  #L50a6a4.  call `<init>`(v1, v5, v4) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L50a6aa.  call `init`(v0, v1) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L50a6b0.  v4:= v3.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L50a6b4.  if v4 == 0 then goto L50a6f2;
  #L50a6b8.  v5:= v4.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50a6bc.  v1:= v4.`okio.Segment.b` @type ^`int`;
  #L50a6c0.  v4:= v4.`okio.Segment.c` @type ^`int`;
  #L50a6c4.  v4:= v4 - v1 @kind int;
  #L50a6c6.  call `update`(v0, v5, v1, v4) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L50a6cc.  v4:= v3.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L50a6d0.  v4:= v4.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L50a6d4.  v5:= v3.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L50a6d8.  if v4 == v5 then goto L50a6f2;
  #L50a6dc.  v5:= v4.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50a6e0.  v1:= v4.`okio.Segment.b` @type ^`int`;
  #L50a6e4.  v2:= v4.`okio.Segment.c` @type ^`int`;
  #L50a6e8.  v2:= v2 - v1 @kind int;
  #L50a6ea.  call `update`(v0, v5, v1, v2) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L50a6f0.  goto L50a6d0;
  #L50a6f2.  call temp:= `doFinal`(v0) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L50a6f8.  v4:= temp @kind object;
  #L50a6fa.  call temp:= `of`(v4) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L50a700.  v4:= temp @kind object;
  #L50a702.  return v4 @kind object;
  #L50a704.  v4:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L50a706.  v5:= new `java.lang.IllegalArgumentException`;
  #L50a70a.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L50a710.  throw v5;
  #L50a712.  v4:= new `java.lang.AssertionError`;
  #L50a716.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L50a71c.  goto L50a720;
  #L50a71e.  throw v4;
  #L50a720.  goto L50a71e;
  catch `java.security.NoSuchAlgorithmException` @[L50a690..L50a702] goto L50a712;
  catch `java.security.InvalidKeyException` @[L50a690..L50a702] goto L50a704;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v5 @kind this, `okio.Segment` v6 @kind object, `int` v7 , `okio.ByteString` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L507d30.  v0:= v6.`okio.Segment.c` @type ^`int`;
  #L507d34.  v1:= v6.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L507d38.  if v9 >= v10 then goto L507d76;
  #L507d3c.  if v7 != v0 then goto L507d58;
  #L507d40.  v6:= v6.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L507d44.  v7:= v6.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L507d48.  v0:= v6.`okio.Segment.b` @type ^`int`;
  #L507d4c.  v1:= v6.`okio.Segment.c` @type ^`int`;
  #L507d50.  v4:= v1;
  #L507d52.  v1:= v7 @kind object;
  #L507d54.  v7:= v0;
  #L507d56.  v0:= v4;
  #L507d58.  v2:= v1[v7] @kind byte;
  #L507d5c.  call temp:= `getByte`(v8, v9) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L507d62.  v3:= temp;
  #L507d64.  if v2 == v3 then goto L507d6c;
  #L507d68.  v6:= 0I;
  #L507d6a.  return v6;
  #L507d6c.  v7:= v7 + 1;
  #L507d70.  v9:= v9 + 1;
  #L507d74.  goto L507d38;
  #L507d76.  v6:= 1I;
  #L507d78.  return v6;
}
procedure `void` `readFrom`(`okio.Buffer` v4 @kind this, `java.io.InputStream` v5 @kind object, `long` v6 , `boolean` v8 ) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50ab2c.  if v5 == 0 then goto L50aba4;
  #L50ab30.  v0:= 0L;
  #L50ab34.  v2:= lcmp(v6, v0);
  #L50ab38.  if v2 > 0 then goto L50ab44;
  #L50ab3c.  if v8 == 0 then goto L50ab42;
  #L50ab40.  goto L50ab44;
  #L50ab42.  return @kind void;
  #L50ab44.  v0:= 1I;
  #L50ab46.  call temp:= `c`(v4, v0) @signature `Lokio/Buffer;.c:(I)Lokio/Segment;` @kind virtual;
  #L50ab4c.  v0:= temp @kind object;
  #L50ab4e.  v1:= v0.`okio.Segment.c` @type ^`int`;
  #L50ab52.  v1:= v1 - 8192;
  #L50ab56.  v1:= (`long`) v1 @kind i2l;
  #L50ab58.  call temp:= `min`(v6, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L50ab5e.  v1:= temp @kind wide;
  #L50ab60.  v2:= (`int`) v1 @kind l2i;
  #L50ab62.  v1:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50ab66.  v3:= v0.`okio.Segment.c` @type ^`int`;
  #L50ab6a.  call temp:= `read`(v5, v1, v3, v2) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L50ab70.  v1:= temp;
  #L50ab72.  v2:= -1I;
  #L50ab74.  if v1 != v2 then goto L50ab8a;
  #L50ab78.  if v8 == 0 then goto L50ab7e;
  #L50ab7c.  return @kind void;
  #L50ab7e.  v5:= new `java.io.EOFException`;
  #L50ab82.  call `<init>`(v5) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L50ab88.  throw v5;
  #L50ab8a.  v2:= v0.`okio.Segment.c` @type ^`int`;
  #L50ab8e.  v2:= v2 + v1 @kind int;
  #L50ab90.  v0.`okio.Segment.c` @type ^`int` := v2;
  #L50ab94.  v2:= v4.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50ab98.  v0:= (`long`) v1 @kind i2l;
  #L50ab9a.  v2:= v2 + v0 @kind long;
  #L50ab9c.  v4.`okio.Buffer.b` @type ^`long` := v2 @kind wide;
  #L50aba0.  v6:= v6 - v0 @kind long;
  #L50aba2.  goto L50ab30;
  #L50aba4.  v5:= new `java.lang.IllegalArgumentException`;
  #L50aba8.  v6:= "in == null" @kind object;
  #L50abac.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50abb2.  goto L50abb6;
  #L50abb4.  throw v5;
  #L50abb6.  goto L50abb4;
}
procedure `java.lang.String` `a`(`okio.Buffer` v6 @kind this, `long` v7 ) @signature `Lokio/Buffer;.a:(J)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L5087d0.  v0:= 1L;
  #L5087d4.  v2:= 0L;
  #L5087d8.  v4:= lcmp(v7, v2);
  #L5087dc.  if v4 <= 0 then goto L508808;
  #L5087e0.  v2:= v7 - v0 @kind long;
  #L5087e4.  call temp:= `getByte`(v6, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L5087ea.  v4:= temp;
  #L5087ec.  v5:= 13I;
  #L5087f0.  if v4 != v5 then goto L508808;
  #L5087f4.  call temp:= `readUtf8`(v6, v2) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L5087fa.  v7:= temp @kind object;
  #L5087fc.  v0:= 2L;
  #L508800.  call `skip`(v6, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L508806.  return v7 @kind object;
  #L508808.  call temp:= `readUtf8`(v6, v7) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L50880e.  v7:= temp @kind object;
  #L508810.  goto L508800;
}
procedure `int` `b`(`okio.Buffer` v17 @kind this, `okio.Options` v18 @kind object, `boolean` v19 ) @signature `Lokio/Buffer;.b:(Lokio/Options;Z)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L5083c8.  v0:= v18 @kind object;
  #L5083cc.  v1:= v17 @kind object;
  #L5083d0.  v2:= v1.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L5083d4.  v3:= -2I;
  #L5083d6.  if v2 != 0 then goto L5083ee;
  #L5083da.  if v19 == 0 then goto L5083e0;
  #L5083de.  return v3;
  #L5083e0.  v2:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L5083e4.  call temp:= `indexOf`(v0, v2) @signature `Ljava/util/AbstractList;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L5083ea.  v0:= temp;
  #L5083ec.  return v0;
  #L5083ee.  v4:= v2.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L5083f2.  v5:= v2.`okio.Segment.b` @type ^`int`;
  #L5083f6.  v6:= v2.`okio.Segment.c` @type ^`int`;
  #L5083fa.  v0:= v0.`okio.Options.b` @type ^`int`[] @kind object;
  #L5083fe.  v7:= 0I;
  #L508400.  v8:= -1I;
  #L508402.  v10:= v2 @kind object;
  #L508404.  v9:= 0I;
  #L508406.  v11:= -1I;
  #L508408.  v12:= v9 + 1;
  #L50840c.  v9:= v0[v9];
  #L508410.  v13:= v12 + 1;
  #L508414.  v12:= v0[v12];
  #L508418.  if v12 == v8 then goto L50841e;
  #L50841c.  v11:= v12;
  #L50841e.  if v10 != 0 then goto L508424;
  #L508422.  goto L508472;
  #L508424.  v12:= 0I;
  #L508426.  if v9 >= 0 then goto L5084b2;
  #L50842a.  v9:= v9 * -1;
  #L50842e.  v14:= v13 + v9 @kind int;
  #L508432.  v9:= v5 + 1;
  #L508436.  v5:= v4[v5] @kind byte;
  #L50843a.  v5:= v5 ^& 255;
  #L50843e.  v15:= v13 + 1;
  #L508442.  v13:= v0[v13];
  #L508446.  if v5 == v13 then goto L50844c;
  #L50844a.  return v11;
  #L50844c.  if v15 != v14 then goto L508454;
  #L508450.  v5:= 1I;
  #L508452.  goto L508456;
  #L508454.  v5:= 0I;
  #L508456.  if v9 != v6 then goto L50848c;
  #L50845a.  v4:= v10.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L50845e.  v6:= v4.`okio.Segment.b` @type ^`int`;
  #L508462.  v9:= v4.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L508466.  v10:= v4.`okio.Segment.c` @type ^`int`;
  #L50846a.  if v4 != v2 then goto L508480;
  #L50846e.  if v5 != 0 then goto L50847a;
  #L508472.  if v19 == 0 then goto L508478;
  #L508476.  return v3;
  #L508478.  return v11;
  #L50847a.  v4:= v9 @kind object;
  #L50847c.  v9:= v12 @kind object;
  #L50847e.  goto L508498;
  #L508480.  v16:= v9 @kind object;
  #L508484.  v9:= v4 @kind object;
  #L508486.  v4:= v16 @kind object;
  #L50848a.  goto L508498;
  #L50848c.  v16:= v10 @kind object;
  #L508490.  v10:= v6;
  #L508492.  v6:= v9;
  #L508494.  v9:= v16 @kind object;
  #L508498.  if v5 == 0 then goto L5084a8;
  #L50849c.  v5:= v0[v15];
  #L5084a0.  v3:= v6;
  #L5084a2.  v6:= v10;
  #L5084a4.  v10:= v9 @kind object;
  #L5084a6.  goto L5084f4;
  #L5084a8.  v5:= v6;
  #L5084aa.  v6:= v10;
  #L5084ac.  v13:= v15;
  #L5084ae.  v10:= v9 @kind object;
  #L5084b0.  goto L508432;
  #L5084b2.  v14:= v5 + 1;
  #L5084b6.  v5:= v4[v5] @kind byte;
  #L5084ba.  v5:= v5 ^& 255;
  #L5084be.  v15:= v13 + v9 @kind int;
  #L5084c2.  if v13 != v15 then goto L5084c8;
  #L5084c6.  return v11;
  #L5084c8.  v3:= v0[v13];
  #L5084cc.  if v5 != v3 then goto L508502;
  #L5084d0.  v13:= v13 + v9 @kind int;
  #L5084d2.  v5:= v0[v13];
  #L5084d6.  if v14 != v6 then goto L5084f2;
  #L5084da.  v10:= v10.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L5084de.  v3:= v10.`okio.Segment.b` @type ^`int`;
  #L5084e2.  v4:= v10.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L5084e6.  v6:= v10.`okio.Segment.c` @type ^`int`;
  #L5084ea.  if v10 != v2 then goto L5084f4;
  #L5084ee.  v10:= v12 @kind object;
  #L5084f0.  goto L5084f4;
  #L5084f2.  v3:= v14;
  #L5084f4.  if v5 < 0 then goto L5084fa;
  #L5084f8.  return v5;
  #L5084fa.  v9:= -v5 @kind int;
  #L5084fc.  v5:= v3;
  #L5084fe.  v3:= -2I;
  #L508500.  goto L508408;
  #L508502.  v13:= v13 + 1;
  #L508506.  v3:= -2I;
  #L508508.  goto L5084c2;
}
procedure `okio.Buffer` `buffer`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L5094ac.  return v0 @kind object;
}
procedure `okio.Segment` `c`(`okio.Buffer` v3 @kind this, `int` v4 ) @signature `Lokio/Buffer;.c:(I)Lokio/Segment;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L50a8f4.  v0:= 1I;
  #L50a8f6.  if v4 < v0 then goto L50a948;
  #L50a8fa.  v0:= 8192I;
  #L50a8fe.  if v4 > v0 then goto L50a948;
  #L50a902.  v1:= v3.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L50a906.  if v1 != 0 then goto L50a920;
  #L50a90a.  call temp:= `b`() @signature `Lokio/SegmentPool;.b:()Lokio/Segment;` @kind static;
  #L50a910.  v4:= temp @kind object;
  #L50a912.  v3.`okio.Buffer.a` @type ^`okio.Segment` := v4 @kind object;
  #L50a916.  v4.`okio.Segment.g` @type ^`okio.Segment` := v4 @kind object;
  #L50a91a.  v4.`okio.Segment.f` @type ^`okio.Segment` := v4 @kind object;
  #L50a91e.  return v4 @kind object;
  #L50a920.  v1:= v1.`okio.Segment.g` @type ^`okio.Segment` @kind object;
  #L50a924.  v2:= v1.`okio.Segment.c` @type ^`int`;
  #L50a928.  v2:= v2 + v4 @kind int;
  #L50a92a.  if v2 > v0 then goto L50a936;
  #L50a92e.  v4:= v1.`okio.Segment.e` @type ^`boolean` @kind boolean;
  #L50a932.  if v4 != 0 then goto L50a946;
  #L50a936.  call temp:= `b`() @signature `Lokio/SegmentPool;.b:()Lokio/Segment;` @kind static;
  #L50a93c.  v4:= temp @kind object;
  #L50a93e.  call temp:= `push`(v1, v4) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L50a944.  v1:= temp @kind object;
  #L50a946.  return v1 @kind object;
  #L50a948.  v4:= new `java.lang.IllegalArgumentException`;
  #L50a94c.  call `<init>`(v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L50a952.  throw v4;
}
procedure `void` `clear`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L50aac8.  v0:= v2.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50aacc.  call `skip`(v2, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L50aad2.  return @kind void;
  #L50aad4.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L50aad6.  v1:= new `java.lang.AssertionError`;
  #L50aada.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L50aae0.  throw v1;
  catch `java.io.EOFException` @[L50aac8..L50aad2] goto L50aad4;
}
procedure `java.lang.Object` `clone`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L5085d0.  call temp:= `clone`(v1) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @kind virtual;
  #L5085d6.  v0:= temp @kind object;
  #L5085d8.  return v0 @kind object;
}
procedure `okio.Buffer` `clone`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L5094c0.  v0:= new `okio.Buffer`;
  #L5094c4.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L5094ca.  v1:= v6.`okio.Buffer.b` @type ^`long` @kind wide;
  #L5094ce.  v3:= 0L;
  #L5094d2.  v5:= lcmp(v1, v3);
  #L5094d6.  if v5 != 0 then goto L5094dc;
  #L5094da.  return v0 @kind object;
  #L5094dc.  v1:= v6.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L5094e0.  call temp:= `a`(v1) @signature `Lokio/Segment;.a:()Lokio/Segment;` @kind virtual;
  #L5094e6.  v1:= temp @kind object;
  #L5094e8.  v0.`okio.Buffer.a` @type ^`okio.Segment` := v1 @kind object;
  #L5094ec.  v1.`okio.Segment.g` @type ^`okio.Segment` := v1 @kind object;
  #L5094f0.  v1.`okio.Segment.f` @type ^`okio.Segment` := v1 @kind object;
  #L5094f4.  v1:= v6.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L5094f8.  v1:= v1.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L5094fc.  v2:= v6.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L509500.  if v1 == v2 then goto L50951c;
  #L509504.  v2:= v0.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L509508.  v2:= v2.`okio.Segment.g` @type ^`okio.Segment` @kind object;
  #L50950c.  call temp:= `a`(v1) @signature `Lokio/Segment;.a:()Lokio/Segment;` @kind virtual;
  #L509512.  v3:= temp @kind object;
  #L509514.  call temp:= `push`(v2, v3) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L50951a.  goto L5094f8;
  #L50951c.  v1:= v6.`okio.Buffer.b` @type ^`long` @kind wide;
  #L509520.  v0.`okio.Buffer.b` @type ^`long` := v1 @kind wide;
  #L509524.  return v0 @kind object;
}
procedure `void` `close`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L50ab04.  return @kind void;
}
procedure `long` `completeSegmentByteCount`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L5089d0.  v0:= v5.`okio.Buffer.b` @type ^`long` @kind wide;
  #L5089d4.  v2:= 0L;
  #L5089d8.  v4:= lcmp(v0, v2);
  #L5089dc.  if v4 != 0 then goto L5089e2;
  #L5089e0.  return v2 @kind wide;
  #L5089e2.  v2:= v5.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L5089e6.  v2:= v2.`okio.Segment.g` @type ^`okio.Segment` @kind object;
  #L5089ea.  v3:= v2.`okio.Segment.c` @type ^`int`;
  #L5089ee.  v4:= 8192I;
  #L5089f2.  if v3 >= v4 then goto L508a08;
  #L5089f6.  v4:= v2.`okio.Segment.e` @type ^`boolean` @kind boolean;
  #L5089fa.  if v4 == 0 then goto L508a08;
  #L5089fe.  v2:= v2.`okio.Segment.b` @type ^`int`;
  #L508a02.  v3:= v3 - v2 @kind int;
  #L508a04.  v2:= (`long`) v3 @kind i2l;
  #L508a06.  v0:= v0 - v2 @kind long;
  #L508a08.  return v0 @kind wide;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v6 @kind this, `java.io.OutputStream` v7 @kind object) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L509538.  v4:= v6.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50953c.  v2:= 0L;
  #L509540.  v0:= v6 @kind object;
  #L509542.  v1:= v7 @kind object;
  #L509544.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @kind virtual;
  #L50954a.  v7:= temp @kind object;
  #L50954c.  return v7 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v8 @kind this, `java.io.OutputStream` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L509560.  if v9 == 0 then goto L5095e2;
  #L509564.  v0:= v8.`okio.Buffer.b` @type ^`long` @kind wide;
  #L509568.  v2:= v10 @kind wide;
  #L50956a.  v4:= v12 @kind wide;
  #L50956c.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L509572.  v0:= 0L;
  #L509576.  v2:= lcmp(v12, v0);
  #L50957a.  if v2 != 0 then goto L509580;
  #L50957e.  return v8 @kind object;
  #L509580.  v2:= v8.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L509584.  v3:= v2.`okio.Segment.c` @type ^`int`;
  #L509588.  v4:= v2.`okio.Segment.b` @type ^`int`;
  #L50958c.  v5:= v3 - v4 @kind int;
  #L509590.  v5:= (`long`) v5 @kind i2l;
  #L509592.  v7:= lcmp(v10, v5);
  #L509596.  if v7 < 0 then goto L5095a6;
  #L50959a.  v3:= v3 - v4 @kind int;
  #L50959c.  v3:= (`long`) v3 @kind i2l;
  #L50959e.  v10:= v10 - v3 @kind long;
  #L5095a0.  v2:= v2.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L5095a4.  goto L509584;
  #L5095a6.  v3:= lcmp(v12, v0);
  #L5095aa.  if v3 <= 0 then goto L5095e0;
  #L5095ae.  v3:= v2.`okio.Segment.b` @type ^`int`;
  #L5095b2.  v3:= (`long`) v3 @kind i2l;
  #L5095b4.  v3:= v3 + v10 @kind long;
  #L5095b6.  v10:= (`int`) v3 @kind l2i;
  #L5095b8.  v11:= v2.`okio.Segment.c` @type ^`int`;
  #L5095bc.  v11:= v11 - v10 @kind int;
  #L5095be.  v3:= (`long`) v11 @kind i2l;
  #L5095c0.  call temp:= `min`(v3, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L5095c6.  v3:= temp @kind wide;
  #L5095c8.  v11:= (`int`) v3 @kind l2i;
  #L5095ca.  v3:= v2.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L5095ce.  call `write`(v9, v3, v10, v11) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L5095d4.  v10:= (`long`) v11 @kind i2l;
  #L5095d6.  v12:= v12 - v10 @kind long;
  #L5095d8.  v2:= v2.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L5095dc.  v10:= v0 @kind wide;
  #L5095de.  goto L5095a6;
  #L5095e0.  return v8 @kind object;
  #L5095e2.  v9:= new `java.lang.IllegalArgumentException`;
  #L5095e6.  v10:= "out == null" @kind object;
  #L5095ea.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5095f0.  goto L5095f4;
  #L5095f2.  throw v9;
  #L5095f4.  goto L5095f2;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v8 @kind this, `okio.Buffer` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L509608.  if v9 == 0 then goto L5096c2;
  #L50960c.  v0:= v8.`okio.Buffer.b` @type ^`long` @kind wide;
  #L509610.  v2:= v10 @kind wide;
  #L509612.  v4:= v12 @kind wide;
  #L509614.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L50961a.  v0:= 0L;
  #L50961e.  v2:= lcmp(v12, v0);
  #L509622.  if v2 != 0 then goto L509628;
  #L509626.  return v8 @kind object;
  #L509628.  v2:= v9.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50962c.  v2:= v2 + v12 @kind long;
  #L50962e.  v9.`okio.Buffer.b` @type ^`long` := v2 @kind wide;
  #L509632.  v2:= v8.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L509636.  v3:= v2.`okio.Segment.c` @type ^`int`;
  #L50963a.  v4:= v2.`okio.Segment.b` @type ^`int`;
  #L50963e.  v5:= v3 - v4 @kind int;
  #L509642.  v5:= (`long`) v5 @kind i2l;
  #L509644.  v7:= lcmp(v10, v5);
  #L509648.  if v7 < 0 then goto L509658;
  #L50964c.  v3:= v3 - v4 @kind int;
  #L50964e.  v3:= (`long`) v3 @kind i2l;
  #L509650.  v10:= v10 - v3 @kind long;
  #L509652.  v2:= v2.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L509656.  goto L509636;
  #L509658.  v3:= lcmp(v12, v0);
  #L50965c.  if v3 <= 0 then goto L5096c0;
  #L509660.  call temp:= `a`(v2) @signature `Lokio/Segment;.a:()Lokio/Segment;` @kind virtual;
  #L509666.  v3:= temp @kind object;
  #L509668.  v4:= v3.`okio.Segment.b` @type ^`int`;
  #L50966c.  v4:= (`long`) v4 @kind i2l;
  #L50966e.  v4:= v4 + v10 @kind long;
  #L509670.  v10:= (`int`) v4 @kind l2i;
  #L509672.  v3.`okio.Segment.b` @type ^`int` := v10;
  #L509676.  v11:= (`int`) v12 @kind l2i;
  #L509678.  v10:= v10 + v11 @kind int;
  #L50967a.  v11:= v3.`okio.Segment.c` @type ^`int`;
  #L50967e.  call temp:= `min`(v10, v11) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L509684.  v10:= temp;
  #L509686.  v3.`okio.Segment.c` @type ^`int` := v10;
  #L50968a.  v10:= v9.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L50968e.  if v10 != 0 then goto L5096a0;
  #L509692.  v3.`okio.Segment.g` @type ^`okio.Segment` := v3 @kind object;
  #L509696.  v3.`okio.Segment.f` @type ^`okio.Segment` := v3 @kind object;
  #L50969a.  v9.`okio.Buffer.a` @type ^`okio.Segment` := v3 @kind object;
  #L50969e.  goto L5096aa;
  #L5096a0.  v10:= v10.`okio.Segment.g` @type ^`okio.Segment` @kind object;
  #L5096a4.  call temp:= `push`(v10, v3) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L5096aa.  v10:= v3.`okio.Segment.c` @type ^`int`;
  #L5096ae.  v11:= v3.`okio.Segment.b` @type ^`int`;
  #L5096b2.  v10:= v10 - v11 @kind int;
  #L5096b4.  v10:= (`long`) v10 @kind i2l;
  #L5096b6.  v12:= v12 - v10 @kind long;
  #L5096b8.  v2:= v2.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L5096bc.  v10:= v0 @kind wide;
  #L5096be.  goto L509658;
  #L5096c0.  return v8 @kind object;
  #L5096c2.  v9:= new `java.lang.IllegalArgumentException`;
  #L5096c6.  v10:= "out == null" @kind object;
  #L5096ca.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5096d0.  goto L5096d4;
  #L5096d2.  throw v9;
  #L5096d4.  goto L5096d2;
}
procedure `okio.BufferedSink` `emit`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;

  #L50a3b4.  return v0 @kind object;
}
procedure `okio.Buffer` `emitCompleteSegments`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L5096e8.  return v0 @kind object;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L50a3c8.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @kind virtual;
  #L50a3ce.  v0:= temp @kind object;
  #L50a3d0.  return v0 @kind object;
}
procedure `boolean` `equals`(`okio.Buffer` v13 @kind this, `java.lang.Object` v14 @kind object) @signature `Lokio/Buffer;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L507b7c.  v0:= 1I;
  #L507b7e.  if v13 != v14 then goto L507b84;
  #L507b82.  return v0;
  #L507b84.  v1:= instanceof @variable v14 @type ^`okio.Buffer` @kind boolean;
  #L507b88.  v2:= 0I;
  #L507b8a.  if v1 != 0 then goto L507b90;
  #L507b8e.  return v2;
  #L507b90.  v14:= (`okio.Buffer`) v14 @kind object;
  #L507b94.  v3:= v13.`okio.Buffer.b` @type ^`long` @kind wide;
  #L507b98.  v5:= v14.`okio.Buffer.b` @type ^`long` @kind wide;
  #L507b9c.  v1:= lcmp(v3, v5);
  #L507ba0.  if v1 == 0 then goto L507ba6;
  #L507ba4.  return v2;
  #L507ba6.  v5:= 0L;
  #L507baa.  v1:= lcmp(v3, v5);
  #L507bae.  if v1 != 0 then goto L507bb4;
  #L507bb2.  return v0;
  #L507bb4.  v1:= v13.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L507bb8.  v14:= v14.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L507bbc.  v3:= v1.`okio.Segment.b` @type ^`int`;
  #L507bc0.  v4:= v14.`okio.Segment.b` @type ^`int`;
  #L507bc4.  v7:= v13.`okio.Buffer.b` @type ^`long` @kind wide;
  #L507bc8.  v9:= lcmp(v5, v7);
  #L507bcc.  if v9 >= 0 then goto L507c3e;
  #L507bd0.  v7:= v1.`okio.Segment.c` @type ^`int`;
  #L507bd4.  v7:= v7 - v3 @kind int;
  #L507bd6.  v8:= v14.`okio.Segment.c` @type ^`int`;
  #L507bda.  v8:= v8 - v4 @kind int;
  #L507bdc.  call temp:= `min`(v7, v8) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L507be2.  v7:= temp;
  #L507be4.  v7:= (`long`) v7 @kind i2l;
  #L507be6.  v9:= 0I;
  #L507be8.  v10:= (`long`) v9 @kind i2l;
  #L507bea.  v12:= lcmp(v10, v7);
  #L507bee.  if v12 >= 0 then goto L507c1a;
  #L507bf2.  v10:= v1.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L507bf6.  v11:= v3 + 1;
  #L507bfa.  v3:= v10[v3] @kind byte;
  #L507bfe.  v10:= v14.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L507c02.  v12:= v4 + 1;
  #L507c06.  v4:= v10[v4] @kind byte;
  #L507c0a.  if v3 == v4 then goto L507c10;
  #L507c0e.  return v2;
  #L507c10.  v9:= v9 + 1;
  #L507c14.  v3:= v11;
  #L507c16.  v4:= v12;
  #L507c18.  goto L507be8;
  #L507c1a.  v9:= v1.`okio.Segment.c` @type ^`int`;
  #L507c1e.  if v3 != v9 then goto L507c2a;
  #L507c22.  v1:= v1.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L507c26.  v3:= v1.`okio.Segment.b` @type ^`int`;
  #L507c2a.  v9:= v14.`okio.Segment.c` @type ^`int`;
  #L507c2e.  if v4 != v9 then goto L507c3a;
  #L507c32.  v14:= v14.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L507c36.  v4:= v14.`okio.Segment.b` @type ^`int`;
  #L507c3a.  v5:= v5 + v7 @kind long;
  #L507c3c.  goto L507bc4;
  #L507c3e.  return v0;
}
procedure `boolean` `exhausted`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.exhausted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L507c50.  v0:= v5.`okio.Buffer.b` @type ^`long` @kind wide;
  #L507c54.  v2:= 0L;
  #L507c58.  v4:= lcmp(v0, v2);
  #L507c5c.  if v4 != 0 then goto L507c64;
  #L507c60.  v0:= 1I;
  #L507c62.  goto L507c66;
  #L507c64.  v0:= 0I;
  #L507c66.  return v0;
}
procedure `void` `flush`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L50ab18.  return @kind void;
}
procedure `byte` `getByte`(`okio.Buffer` v6 @kind this, `long` v7 ) @signature `Lokio/Buffer;.getByte:(J)B` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L507db0.  v0:= v6.`okio.Buffer.b` @type ^`long` @kind wide;
  #L507db4.  v4:= 1L;
  #L507db8.  v2:= v7 @kind wide;
  #L507dba.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L507dc0.  v0:= v6.`okio.Buffer.b` @type ^`long` @kind wide;
  #L507dc4.  v2:= v0 - v7 @kind long;
  #L507dc8.  v4:= lcmp(v2, v7);
  #L507dcc.  if v4 <= 0 then goto L507dfe;
  #L507dd0.  v0:= v6.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L507dd4.  v1:= v0.`okio.Segment.c` @type ^`int`;
  #L507dd8.  v2:= v0.`okio.Segment.b` @type ^`int`;
  #L507ddc.  v1:= v1 - v2 @kind int;
  #L507dde.  v3:= (`long`) v1 @kind i2l;
  #L507de0.  v1:= lcmp(v7, v3);
  #L507de4.  if v1 >= 0 then goto L507df6;
  #L507de8.  v0:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L507dec.  v8:= (`int`) v7 @kind l2i;
  #L507dee.  v2:= v2 + v8 @kind int;
  #L507df0.  v7:= v0[v2] @kind byte;
  #L507df4.  return v7;
  #L507df6.  v7:= v7 - v3 @kind long;
  #L507df8.  v0:= v0.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L507dfc.  goto L507dd4;
  #L507dfe.  v7:= v7 - v0 @kind long;
  #L507e00.  v0:= v6.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L507e04.  v0:= v0.`okio.Segment.g` @type ^`okio.Segment` @kind object;
  #L507e08.  v1:= v0.`okio.Segment.c` @type ^`int`;
  #L507e0c.  v2:= v0.`okio.Segment.b` @type ^`int`;
  #L507e10.  v1:= v1 - v2 @kind int;
  #L507e12.  v3:= (`long`) v1 @kind i2l;
  #L507e14.  v7:= v7 + v3 @kind long;
  #L507e16.  v3:= 0L;
  #L507e1a.  v1:= lcmp(v7, v3);
  #L507e1e.  if v1 < 0 then goto L507e04;
  #L507e22.  v0:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L507e26.  v8:= (`int`) v7 @kind l2i;
  #L507e28.  v2:= v2 + v8 @kind int;
  #L507e2a.  v7:= v0[v2] @kind byte;
  #L507e2e.  return v7;
}
procedure `int` `hashCode`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L507f58.  v0:= v5.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L507f5c.  if v0 != 0 then goto L507f64;
  #L507f60.  v0:= 0I;
  #L507f62.  return v0;
  #L507f64.  v1:= 1I;
  #L507f66.  v2:= v0.`okio.Segment.b` @type ^`int`;
  #L507f6a.  v3:= v0.`okio.Segment.c` @type ^`int`;
  #L507f6e.  if v2 >= v3 then goto L507f86;
  #L507f72.  v1:= v1 * 31;
  #L507f76.  v4:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L507f7a.  v4:= v4[v2] @kind byte;
  #L507f7e.  v1:= v1 + v4 @kind int;
  #L507f80.  v2:= v2 + 1;
  #L507f84.  goto L507f6e;
  #L507f86.  v0:= v0.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L507f8a.  v2:= v5.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L507f8e.  if v0 != v2 then goto L507f66;
  #L507f92.  return v1;
}
procedure `okio.ByteString` `hmacSha1`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.hmacSha1:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50a744.  v0:= "HmacSHA1" @kind object;
  #L50a748.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L50a74e.  v2:= temp @kind object;
  #L50a750.  return v2 @kind object;
}
procedure `okio.ByteString` `hmacSha256`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.hmacSha256:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50a764.  v0:= "HmacSHA256" @kind object;
  #L50a768.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L50a76e.  v2:= temp @kind object;
  #L50a770.  return v2 @kind object;
}
procedure `okio.ByteString` `hmacSha512`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.hmacSha512:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50a784.  v0:= "HmacSHA512" @kind object;
  #L50a788.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L50a78e.  v2:= temp @kind object;
  #L50a790.  return v2 @kind object;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 ) @signature `Lokio/Buffer;.indexOf:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L508a1c.  v2:= 0L;
  #L508a20.  v4:= 9223372036854775807L;
  #L508a2a.  v0:= v6 @kind object;
  #L508a2c.  v1:= v7;
  #L508a2e.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L508a34.  v0:= temp @kind wide;
  #L508a36.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 , `long` v8 ) @signature `Lokio/Buffer;.indexOf:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L508a48.  v4:= 9223372036854775807L;
  #L508a52.  v0:= v6 @kind object;
  #L508a54.  v1:= v7;
  #L508a56.  v2:= v8 @kind wide;
  #L508a58.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L508a5e.  v7:= temp @kind wide;
  #L508a60.  return v7 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v15 @kind this, `byte` v16 , `long` v17 , `long` v19 ) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L508a74.  v0:= v15 @kind object;
  #L508a76.  v1:= 0L;
  #L508a7a.  v3:= lcmp(v17, v1);
  #L508a7e.  if v3 < 0 then goto L508b72;
  #L508a82.  v3:= lcmp(v19, v17);
  #L508a86.  if v3 < 0 then goto L508b72;
  #L508a8a.  v3:= v0.`okio.Buffer.b` @type ^`long` @kind wide;
  #L508a8e.  v5:= lcmp(v19, v3);
  #L508a92.  if v5 <= 0 then goto L508a9a;
  #L508a96.  v5:= v3 @kind wide;
  #L508a98.  goto L508a9e;
  #L508a9a.  v5:= v19 @kind wide;
  #L508a9e.  v7:= -1L;
  #L508aa2.  v9:= lcmp(v17, v5);
  #L508aa6.  if v9 != 0 then goto L508aac;
  #L508aaa.  return v7 @kind wide;
  #L508aac.  v9:= v0.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L508ab0.  if v9 != 0 then goto L508ab6;
  #L508ab4.  return v7 @kind wide;
  #L508ab6.  v10:= v3 - v17 @kind long;
  #L508aba.  v12:= lcmp(v10, v17);
  #L508abe.  if v12 >= 0 then goto L508ade;
  #L508ac2.  v1:= lcmp(v3, v17);
  #L508ac6.  if v1 <= 0 then goto L508afe;
  #L508aca.  v9:= v9.`okio.Segment.g` @type ^`okio.Segment` @kind object;
  #L508ace.  v1:= v9.`okio.Segment.c` @type ^`int`;
  #L508ad2.  v2:= v9.`okio.Segment.b` @type ^`int`;
  #L508ad6.  v1:= v1 - v2 @kind int;
  #L508ad8.  v1:= (`long`) v1 @kind i2l;
  #L508ada.  v3:= v3 - v1 @kind long;
  #L508adc.  goto L508ac2;
  #L508ade.  v3:= v9.`okio.Segment.c` @type ^`int`;
  #L508ae2.  v4:= v9.`okio.Segment.b` @type ^`int`;
  #L508ae6.  v3:= v3 - v4 @kind int;
  #L508ae8.  v3:= (`long`) v3 @kind i2l;
  #L508aea.  v3:= v3 + v1 @kind long;
  #L508aec.  v10:= lcmp(v3, v17);
  #L508af0.  if v10 >= 0 then goto L508afc;
  #L508af4.  v9:= v9.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L508af8.  v1:= v3 @kind wide;
  #L508afa.  goto L508ade;
  #L508afc.  v3:= v1 @kind wide;
  #L508afe.  v1:= v17 @kind wide;
  #L508b02.  v10:= lcmp(v3, v5);
  #L508b06.  if v10 >= 0 then goto L508b70;
  #L508b0a.  v10:= v9.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L508b0e.  v11:= v9.`okio.Segment.c` @type ^`int`;
  #L508b12.  v11:= (`long`) v11 @kind i2l;
  #L508b14.  v13:= v9.`okio.Segment.b` @type ^`int`;
  #L508b18.  v13:= (`long`) v13 @kind i2l;
  #L508b1a.  v13:= v13 + v5 @kind long;
  #L508b1c.  v13:= v13 - v3 @kind long;
  #L508b1e.  call temp:= `min`(v11, v13) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L508b24.  v11:= temp @kind wide;
  #L508b26.  v12:= (`int`) v11 @kind l2i;
  #L508b28.  v11:= v9.`okio.Segment.b` @type ^`int`;
  #L508b2c.  v13:= (`long`) v11 @kind i2l;
  #L508b2e.  v13:= v13 + v1 @kind long;
  #L508b30.  v13:= v13 - v3 @kind long;
  #L508b32.  v1:= (`int`) v13 @kind l2i;
  #L508b34.  if v1 >= v12 then goto L508b56;
  #L508b38.  v2:= v10[v1] @kind byte;
  #L508b3c.  v11:= v16;
  #L508b40.  if v2 != v11 then goto L508b50;
  #L508b44.  v2:= v9.`okio.Segment.b` @type ^`int`;
  #L508b48.  v1:= v1 - v2 @kind int;
  #L508b4a.  v1:= (`long`) v1 @kind i2l;
  #L508b4c.  v1:= v1 + v3 @kind long;
  #L508b4e.  return v1 @kind wide;
  #L508b50.  v1:= v1 + 1;
  #L508b54.  goto L508b34;
  #L508b56.  v11:= v16;
  #L508b5a.  v1:= v9.`okio.Segment.c` @type ^`int`;
  #L508b5e.  v2:= v9.`okio.Segment.b` @type ^`int`;
  #L508b62.  v1:= v1 - v2 @kind int;
  #L508b64.  v1:= (`long`) v1 @kind i2l;
  #L508b66.  v3:= v3 + v1 @kind long;
  #L508b68.  v9:= v9.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L508b6c.  v1:= v3 @kind wide;
  #L508b6e.  goto L508b02;
  #L508b70.  return v7 @kind wide;
  #L508b72.  v1:= new `java.lang.IllegalArgumentException`;
  #L508b76.  v2:= 3I;
  #L508b78.  v2:= new `java.lang.Object`[v2];
  #L508b7c.  v3:= 0I;
  #L508b7e.  v4:= v0.`okio.Buffer.b` @type ^`long` @kind wide;
  #L508b82.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L508b88.  v4:= temp @kind object;
  #L508b8a.  v2[v3]:= v4 @kind object;
  #L508b8e.  call temp:= `valueOf`(v17) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L508b94.  v3:= temp @kind object;
  #L508b96.  v4:= 1I;
  #L508b98.  v2[v4]:= v3 @kind object;
  #L508b9c.  v3:= 2I;
  #L508b9e.  call temp:= `valueOf`(v19) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L508ba4.  v4:= temp @kind object;
  #L508ba6.  v2[v3]:= v4 @kind object;
  #L508baa.  v3:= "size=%s fromIndex=%s toIndex=%s" @kind object;
  #L508bae.  call temp:= `format`(v3, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L508bb4.  v2:= temp @kind object;
  #L508bb6.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L508bbc.  goto L508bc0;
  #L508bbe.  throw v1;
  #L508bc0.  goto L508bbe;
}
procedure `long` `indexOf`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L508bd4.  v0:= 0L;
  #L508bd8.  call temp:= `indexOf`(v2, v3, v0) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @kind virtual;
  #L508bde.  v0:= temp @kind wide;
  #L508be0.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v18 @kind this, `okio.ByteString` v19 @kind object, `long` v20 ) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L508bf4.  v6:= v18 @kind object;
  #L508bf8.  call temp:= `size`(v19) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L508bfe.  v0:= temp;
  #L508c00.  if v0 == 0 then goto L508d40;
  #L508c04.  v0:= 0L;
  #L508c08.  v2:= lcmp(v20, v0);
  #L508c0c.  if v2 < 0 then goto L508d30;
  #L508c10.  v2:= v6.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L508c14.  v7:= -1L;
  #L508c18.  if v2 != 0 then goto L508c1e;
  #L508c1c.  return v7 @kind wide;
  #L508c1e.  v3:= v6.`okio.Buffer.b` @type ^`long` @kind wide;
  #L508c22.  v9:= v3 - v20 @kind long;
  #L508c26.  v5:= lcmp(v9, v20);
  #L508c2a.  if v5 >= 0 then goto L508c4a;
  #L508c2e.  v0:= lcmp(v3, v20);
  #L508c32.  if v0 <= 0 then goto L508c6a;
  #L508c36.  v2:= v2.`okio.Segment.g` @type ^`okio.Segment` @kind object;
  #L508c3a.  v0:= v2.`okio.Segment.c` @type ^`int`;
  #L508c3e.  v1:= v2.`okio.Segment.b` @type ^`int`;
  #L508c42.  v0:= v0 - v1 @kind int;
  #L508c44.  v0:= (`long`) v0 @kind i2l;
  #L508c46.  v3:= v3 - v0 @kind long;
  #L508c48.  goto L508c2e;
  #L508c4a.  v3:= v2.`okio.Segment.c` @type ^`int`;
  #L508c4e.  v4:= v2.`okio.Segment.b` @type ^`int`;
  #L508c52.  v3:= v3 - v4 @kind int;
  #L508c54.  v3:= (`long`) v3 @kind i2l;
  #L508c56.  v3:= v3 + v0 @kind long;
  #L508c58.  v5:= lcmp(v3, v20);
  #L508c5c.  if v5 >= 0 then goto L508c68;
  #L508c60.  v2:= v2.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L508c64.  v0:= v3 @kind wide;
  #L508c66.  goto L508c4a;
  #L508c68.  v3:= v0 @kind wide;
  #L508c6a.  v0:= 0I;
  #L508c6c.  v9:= v19 @kind object;
  #L508c70.  call temp:= `getByte`(v9, v0) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L508c76.  v10:= temp;
  #L508c78.  call temp:= `size`(v19) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L508c7e.  v11:= temp;
  #L508c80.  v0:= v6.`okio.Buffer.b` @type ^`long` @kind wide;
  #L508c84.  v12:= (`long`) v11 @kind i2l;
  #L508c86.  v0:= v0 - v12 @kind long;
  #L508c88.  v12:= 1L;
  #L508c8c.  v12:= v12 + v0 @kind long;
  #L508c8e.  v0:= v20 @kind wide;
  #L508c92.  v14:= v2 @kind object;
  #L508c94.  v15:= v3 @kind wide;
  #L508c96.  v2:= lcmp(v15, v12);
  #L508c9a.  if v2 >= 0 then goto L508d2c;
  #L508c9e.  v5:= v14.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L508ca2.  v2:= v14.`okio.Segment.c` @type ^`int`;
  #L508ca6.  v2:= (`long`) v2 @kind i2l;
  #L508ca8.  v4:= v14.`okio.Segment.b` @type ^`int`;
  #L508cac.  v7:= (`long`) v4 @kind i2l;
  #L508cae.  v7:= v7 + v12 @kind long;
  #L508cb0.  v7:= v7 - v15 @kind long;
  #L508cb2.  call temp:= `min`(v2, v7) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L508cb8.  v2:= temp @kind wide;
  #L508cba.  v7:= (`int`) v2 @kind l2i;
  #L508cbc.  v2:= v14.`okio.Segment.b` @type ^`int`;
  #L508cc0.  v2:= (`long`) v2 @kind i2l;
  #L508cc2.  v2:= v2 + v0 @kind long;
  #L508cc4.  v2:= v2 - v15 @kind long;
  #L508cc6.  v0:= (`int`) v2 @kind l2i;
  #L508cc8.  v8:= v0;
  #L508cca.  if v8 >= v7 then goto L508d12;
  #L508cce.  v0:= v5[v8] @kind byte;
  #L508cd2.  if v0 != v10 then goto L508d04;
  #L508cd6.  v2:= v8 + 1;
  #L508cda.  v4:= 1I;
  #L508cdc.  v0:= v18 @kind object;
  #L508ce0.  v1:= v14 @kind object;
  #L508ce2.  v3:= v19 @kind object;
  #L508ce6.  v17:= v5 @kind object;
  #L508cea.  v5:= v11;
  #L508cec.  call temp:= `rangeEquals`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L508cf2.  v0:= temp;
  #L508cf4.  if v0 == 0 then goto L508d08;
  #L508cf8.  v0:= v14.`okio.Segment.b` @type ^`int`;
  #L508cfc.  v8:= v8 - v0 @kind int;
  #L508cfe.  v0:= (`long`) v8 @kind i2l;
  #L508d00.  v0:= v0 + v15 @kind long;
  #L508d02.  return v0 @kind wide;
  #L508d04.  v17:= v5 @kind object;
  #L508d08.  v8:= v8 + 1;
  #L508d0c.  v5:= v17 @kind object;
  #L508d10.  goto L508cca;
  #L508d12.  v0:= v14.`okio.Segment.c` @type ^`int`;
  #L508d16.  v1:= v14.`okio.Segment.b` @type ^`int`;
  #L508d1a.  v0:= v0 - v1 @kind int;
  #L508d1c.  v0:= (`long`) v0 @kind i2l;
  #L508d1e.  v15:= v15 + v0 @kind long;
  #L508d20.  v14:= v14.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L508d24.  v0:= v15 @kind wide;
  #L508d26.  v7:= -1L;
  #L508d2a.  goto L508c96;
  #L508d2c.  v0:= v7 @kind wide;
  #L508d2e.  return v0 @kind wide;
  #L508d30.  v0:= new `java.lang.IllegalArgumentException`;
  #L508d34.  v1:= "fromIndex < 0" @kind object;
  #L508d38.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L508d3e.  throw v0;
  #L508d40.  v0:= new `java.lang.IllegalArgumentException`;
  #L508d44.  v1:= "bytes is empty" @kind object;
  #L508d48.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L508d4e.  goto L508d52;
  #L508d50.  throw v0;
  #L508d52.  goto L508d50;
}
procedure `long` `indexOfElement`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L508d64.  v0:= 0L;
  #L508d68.  call temp:= `indexOfElement`(v2, v3, v0) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @kind virtual;
  #L508d6e.  v0:= temp @kind wide;
  #L508d70.  return v0 @kind wide;
}
procedure `long` `indexOfElement`(`okio.Buffer` v11 @kind this, `okio.ByteString` v12 @kind object, `long` v13 ) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L508d84.  v0:= 0L;
  #L508d88.  v2:= lcmp(v13, v0);
  #L508d8c.  if v2 < 0 then goto L508ecc;
  #L508d90.  v2:= v11.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L508d94.  v3:= -1L;
  #L508d98.  if v2 != 0 then goto L508d9e;
  #L508d9c.  return v3 @kind wide;
  #L508d9e.  v5:= v11.`okio.Buffer.b` @type ^`long` @kind wide;
  #L508da2.  v7:= v5 - v13 @kind long;
  #L508da6.  v9:= lcmp(v7, v13);
  #L508daa.  if v9 >= 0 then goto L508dca;
  #L508dae.  v0:= lcmp(v5, v13);
  #L508db2.  if v0 <= 0 then goto L508dea;
  #L508db6.  v2:= v2.`okio.Segment.g` @type ^`okio.Segment` @kind object;
  #L508dba.  v0:= v2.`okio.Segment.c` @type ^`int`;
  #L508dbe.  v1:= v2.`okio.Segment.b` @type ^`int`;
  #L508dc2.  v0:= v0 - v1 @kind int;
  #L508dc4.  v0:= (`long`) v0 @kind i2l;
  #L508dc6.  v5:= v5 - v0 @kind long;
  #L508dc8.  goto L508dae;
  #L508dca.  v5:= v2.`okio.Segment.c` @type ^`int`;
  #L508dce.  v6:= v2.`okio.Segment.b` @type ^`int`;
  #L508dd2.  v5:= v5 - v6 @kind int;
  #L508dd4.  v5:= (`long`) v5 @kind i2l;
  #L508dd6.  v5:= v5 + v0 @kind long;
  #L508dd8.  v7:= lcmp(v5, v13);
  #L508ddc.  if v7 >= 0 then goto L508de8;
  #L508de0.  v2:= v2.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L508de4.  v0:= v5 @kind wide;
  #L508de6.  goto L508dca;
  #L508de8.  v5:= v0 @kind wide;
  #L508dea.  call temp:= `size`(v12) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L508df0.  v0:= temp;
  #L508df2.  v1:= 2I;
  #L508df4.  v7:= 0I;
  #L508df6.  if v0 != v1 then goto L508e66;
  #L508dfa.  call temp:= `getByte`(v12, v7) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L508e00.  v0:= temp;
  #L508e02.  v1:= 1I;
  #L508e04.  call temp:= `getByte`(v12, v1) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L508e0a.  v12:= temp;
  #L508e0c.  v7:= v11.`okio.Buffer.b` @type ^`long` @kind wide;
  #L508e10.  v1:= lcmp(v5, v7);
  #L508e14.  if v1 >= 0 then goto L508eca;
  #L508e18.  v1:= v2.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L508e1c.  v7:= v2.`okio.Segment.b` @type ^`int`;
  #L508e20.  v7:= (`long`) v7 @kind i2l;
  #L508e22.  v7:= v7 + v13 @kind long;
  #L508e24.  v7:= v7 - v5 @kind long;
  #L508e26.  v13:= (`int`) v7 @kind l2i;
  #L508e28.  v14:= v2.`okio.Segment.c` @type ^`int`;
  #L508e2c.  if v13 >= v14 then goto L508e50;
  #L508e30.  v7:= v1[v13] @kind byte;
  #L508e34.  if v7 == v0 then goto L508e44;
  #L508e38.  if v7 != v12 then goto L508e3e;
  #L508e3c.  goto L508e44;
  #L508e3e.  v13:= v13 + 1;
  #L508e42.  goto L508e2c;
  #L508e44.  v12:= v2.`okio.Segment.b` @type ^`int`;
  #L508e48.  v13:= v13 - v12 @kind int;
  #L508e4a.  v12:= (`long`) v13 @kind i2l;
  #L508e4c.  v12:= v12 + v5 @kind long;
  #L508e4e.  return v12 @kind wide;
  #L508e50.  v13:= v2.`okio.Segment.c` @type ^`int`;
  #L508e54.  v14:= v2.`okio.Segment.b` @type ^`int`;
  #L508e58.  v13:= v13 - v14 @kind int;
  #L508e5a.  v13:= (`long`) v13 @kind i2l;
  #L508e5c.  v5:= v5 + v13 @kind long;
  #L508e5e.  v2:= v2.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L508e62.  v13:= v5 @kind wide;
  #L508e64.  goto L508e0c;
  #L508e66.  call temp:= `b`(v12) @signature `Lokio/ByteString;.b:()[B` @kind virtual;
  #L508e6c.  v12:= temp @kind object;
  #L508e6e.  v0:= v11.`okio.Buffer.b` @type ^`long` @kind wide;
  #L508e72.  v8:= lcmp(v5, v0);
  #L508e76.  if v8 >= 0 then goto L508eca;
  #L508e7a.  v0:= v2.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L508e7e.  v1:= v2.`okio.Segment.b` @type ^`int`;
  #L508e82.  v8:= (`long`) v1 @kind i2l;
  #L508e84.  v8:= v8 + v13 @kind long;
  #L508e86.  v8:= v8 - v5 @kind long;
  #L508e88.  v13:= (`int`) v8 @kind l2i;
  #L508e8a.  v14:= v2.`okio.Segment.c` @type ^`int`;
  #L508e8e.  if v13 >= v14 then goto L508eb4;
  #L508e92.  v1:= v0[v13] @kind byte;
  #L508e96.  v8:= length @variable v12;
  #L508e98.  v9:= 0I;
  #L508e9a.  if v9 >= v8 then goto L508eae;
  #L508e9e.  v10:= v12[v9] @kind byte;
  #L508ea2.  if v1 != v10 then goto L508ea8;
  #L508ea6.  goto L508e44;
  #L508ea8.  v9:= v9 + 1;
  #L508eac.  goto L508e9a;
  #L508eae.  v13:= v13 + 1;
  #L508eb2.  goto L508e8e;
  #L508eb4.  v13:= v2.`okio.Segment.c` @type ^`int`;
  #L508eb8.  v14:= v2.`okio.Segment.b` @type ^`int`;
  #L508ebc.  v13:= v13 - v14 @kind int;
  #L508ebe.  v13:= (`long`) v13 @kind i2l;
  #L508ec0.  v5:= v5 + v13 @kind long;
  #L508ec2.  v2:= v2.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L508ec6.  v13:= v5 @kind wide;
  #L508ec8.  goto L508e6e;
  #L508eca.  return v3 @kind wide;
  #L508ecc.  v12:= new `java.lang.IllegalArgumentException`;
  #L508ed0.  v13:= "fromIndex < 0" @kind object;
  #L508ed4.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L508eda.  goto L508ede;
  #L508edc.  throw v12;
  #L508ede.  goto L508edc;
}
procedure `java.io.InputStream` `inputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.inputStream:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L508598.  v0:= new `okio.Buffer$2`;
  #L50859c.  call `<init>`(v0, v1) @signature `Lokio/Buffer$2;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L5085a2.  return v0 @kind object;
}
procedure `boolean` `isOpen`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L507c78.  v0:= 1I;
  #L507c7a.  return v0;
}
procedure `okio.ByteString` `md5`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.md5:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50a7a4.  v0:= "MD5" @kind object;
  #L50a7a8.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L50a7ae.  v0:= temp @kind object;
  #L50a7b0.  return v0 @kind object;
}
procedure `java.io.OutputStream` `outputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5085b4.  v0:= new `okio.Buffer$1`;
  #L5085b8.  call `<init>`(v0, v1) @signature `Lokio/Buffer$1;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L5085be.  return v0 @kind object;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v6 @kind this, `long` v7 , `okio.ByteString` v9 @kind object) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L507c8c.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L507c92.  v5:= temp;
  #L507c94.  v4:= 0I;
  #L507c96.  v0:= v6 @kind object;
  #L507c98.  v1:= v7 @kind wide;
  #L507c9a.  v3:= v9 @kind object;
  #L507c9c.  call temp:= `rangeEquals`(v0, v1, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @kind virtual;
  #L507ca2.  v7:= temp;
  #L507ca4.  return v7;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v6 @kind this, `long` v7 , `okio.ByteString` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L507cb8.  v0:= 0I;
  #L507cba.  v1:= 0L;
  #L507cbe.  v3:= lcmp(v7, v1);
  #L507cc2.  if v3 < 0 then goto L507d1c;
  #L507cc6.  if v10 < 0 then goto L507d1c;
  #L507cca.  if v11 < 0 then goto L507d1c;
  #L507cce.  v1:= v6.`okio.Buffer.b` @type ^`long` @kind wide;
  #L507cd2.  v1:= v1 - v7 @kind long;
  #L507cd4.  v3:= (`long`) v11 @kind i2l;
  #L507cd6.  v5:= lcmp(v1, v3);
  #L507cda.  if v5 < 0 then goto L507d1c;
  #L507cde.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L507ce4.  v1:= temp;
  #L507ce6.  v1:= v1 - v10 @kind int;
  #L507ce8.  if v1 >= v11 then goto L507cee;
  #L507cec.  goto L507d1c;
  #L507cee.  v1:= 0I;
  #L507cf0.  if v1 >= v11 then goto L507d18;
  #L507cf4.  v2:= (`long`) v1 @kind i2l;
  #L507cf6.  v2:= v2 + v7 @kind long;
  #L507cf8.  call temp:= `getByte`(v6, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L507cfe.  v2:= temp;
  #L507d00.  v3:= v10 + v1 @kind int;
  #L507d04.  call temp:= `getByte`(v9, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L507d0a.  v3:= temp;
  #L507d0c.  if v2 == v3 then goto L507d12;
  #L507d10.  return v0;
  #L507d12.  v1:= v1 + 1;
  #L507d16.  goto L507cf0;
  #L507d18.  v7:= 1I;
  #L507d1a.  return v7;
  #L507d1c.  return v0;
}
procedure `int` `read`(`okio.Buffer` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lokio/Buffer;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L508040.  v0:= v6.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L508044.  if v0 != 0 then goto L50804c;
  #L508048.  v7:= -1I;
  #L50804a.  return v7;
  #L50804c.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L508052.  v1:= temp;
  #L508054.  v2:= v0.`okio.Segment.c` @type ^`int`;
  #L508058.  v3:= v0.`okio.Segment.b` @type ^`int`;
  #L50805c.  v2:= v2 - v3 @kind int;
  #L50805e.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L508064.  v1:= temp;
  #L508066.  v2:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50806a.  v3:= v0.`okio.Segment.b` @type ^`int`;
  #L50806e.  call temp:= `put`(v7, v2, v3, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L508074.  v7:= v0.`okio.Segment.b` @type ^`int`;
  #L508078.  v7:= v7 + v1 @kind int;
  #L50807a.  v0.`okio.Segment.b` @type ^`int` := v7;
  #L50807e.  v2:= v6.`okio.Buffer.b` @type ^`long` @kind wide;
  #L508082.  v4:= (`long`) v1 @kind i2l;
  #L508084.  v2:= v2 - v4 @kind long;
  #L508086.  v6.`okio.Buffer.b` @type ^`long` := v2 @kind wide;
  #L50808a.  v2:= v0.`okio.Segment.c` @type ^`int`;
  #L50808e.  if v7 != v2 then goto L5080a4;
  #L508092.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L508098.  v7:= temp @kind object;
  #L50809a.  v6.`okio.Buffer.a` @type ^`okio.Segment` := v7 @kind object;
  #L50809e.  call `a`(v0) @signature `Lokio/SegmentPool;.a:(Lokio/Segment;)V` @kind static;
  #L5080a4.  return v1;
}
procedure `int` `read`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object) @signature `Lokio/Buffer;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L507fa4.  v0:= length @variable v3;
  #L507fa6.  v1:= 0I;
  #L507fa8.  call temp:= `read`(v2, v3, v1, v0) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L507fae.  v3:= temp;
  #L507fb0.  return v3;
}
procedure `int` `read`(`okio.Buffer` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/Buffer;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L507fc4.  v0:= length @variable v8;
  #L507fc6.  v1:= (`long`) v0 @kind i2l;
  #L507fc8.  v3:= (`long`) v9 @kind i2l;
  #L507fca.  v5:= (`long`) v10 @kind i2l;
  #L507fcc.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L507fd2.  v0:= v7.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L507fd6.  if v0 != 0 then goto L507fde;
  #L507fda.  v8:= -1I;
  #L507fdc.  return v8;
  #L507fde.  v1:= v0.`okio.Segment.c` @type ^`int`;
  #L507fe2.  v2:= v0.`okio.Segment.b` @type ^`int`;
  #L507fe6.  v1:= v1 - v2 @kind int;
  #L507fe8.  call temp:= `min`(v10, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L507fee.  v10:= temp;
  #L507ff0.  v1:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L507ff4.  v2:= v0.`okio.Segment.b` @type ^`int`;
  #L507ff8.  call `arraycopy`(v1, v2, v8, v9, v10) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L507ffe.  v8:= v0.`okio.Segment.b` @type ^`int`;
  #L508002.  v8:= v8 + v10 @kind int;
  #L508004.  v0.`okio.Segment.b` @type ^`int` := v8;
  #L508008.  v1:= v7.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50800c.  v3:= (`long`) v10 @kind i2l;
  #L50800e.  v1:= v1 - v3 @kind long;
  #L508010.  v7.`okio.Buffer.b` @type ^`long` := v1 @kind wide;
  #L508014.  v9:= v0.`okio.Segment.c` @type ^`int`;
  #L508018.  if v8 != v9 then goto L50802e;
  #L50801c.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L508022.  v8:= temp @kind object;
  #L508024.  v7.`okio.Buffer.a` @type ^`okio.Segment` := v8 @kind object;
  #L508028.  call `a`(v0) @signature `Lokio/SegmentPool;.a:(Lokio/Segment;)V` @kind static;
  #L50802e.  return v10;
}
procedure `long` `read`(`okio.Buffer` v5 @kind this, `okio.Buffer` v6 @kind object, `long` v7 ) @signature `Lokio/Buffer;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L508ef0.  if v6 == 0 then goto L508f52;
  #L508ef4.  v0:= 0L;
  #L508ef8.  v2:= lcmp(v7, v0);
  #L508efc.  if v2 < 0 then goto L508f24;
  #L508f00.  v2:= v5.`okio.Buffer.b` @type ^`long` @kind wide;
  #L508f04.  v4:= lcmp(v2, v0);
  #L508f08.  if v4 != 0 then goto L508f12;
  #L508f0c.  v6:= -1L;
  #L508f10.  return v6 @kind wide;
  #L508f12.  v0:= lcmp(v7, v2);
  #L508f16.  if v0 <= 0 then goto L508f1c;
  #L508f1a.  v7:= v2 @kind wide;
  #L508f1c.  call `write`(v6, v5, v7) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L508f22.  return v7 @kind wide;
  #L508f24.  v6:= new `java.lang.IllegalArgumentException`;
  #L508f28.  v0:= new `java.lang.StringBuilder`;
  #L508f2c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L508f32.  v1:= "byteCount < 0: " @kind object;
  #L508f36.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L508f3c.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L508f42.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L508f48.  v7:= temp @kind object;
  #L508f4a.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L508f50.  throw v6;
  #L508f52.  v6:= new `java.lang.IllegalArgumentException`;
  #L508f56.  v7:= "sink == null" @kind object;
  #L508f5a.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L508f60.  throw v6;
}
procedure `long` `readAll`(`okio.Buffer` v5 @kind this, `okio.Sink` v6 @kind object) @signature `Lokio/Buffer;.readAll:(Lokio/Sink;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L508f74.  v0:= v5.`okio.Buffer.b` @type ^`long` @kind wide;
  #L508f78.  v2:= 0L;
  #L508f7c.  v4:= lcmp(v0, v2);
  #L508f80.  if v4 <= 0 then goto L508f8a;
  #L508f84.  call `write`(v6, v5, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L508f8a.  return v0 @kind wide;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readAndWriteUnsafe:()Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50a304.  v0:= new `okio.Buffer$UnsafeCursor`;
  #L50a308.  call `<init>`(v0) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @kind direct;
  #L50a30e.  call temp:= `readAndWriteUnsafe`(v1, v0) @signature `Lokio/Buffer;.readAndWriteUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind virtual;
  #L50a314.  v0:= temp @kind object;
  #L50a316.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe`(`okio.Buffer` v1 @kind this, `okio.Buffer$UnsafeCursor` v2 @kind object) @signature `Lokio/Buffer;.readAndWriteUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50a328.  v0:= v2.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L50a32c.  if v0 != 0 then goto L50a33c;
  #L50a330.  v2.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v1 @kind object;
  #L50a334.  v0:= 1I;
  #L50a336.  v2.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` := v0 @kind boolean;
  #L50a33a.  return v2 @kind object;
  #L50a33c.  v2:= new `java.lang.IllegalStateException`;
  #L50a340.  v0:= "already attached to a buffer" @kind object;
  #L50a344.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50a34a.  throw v2;
}
procedure `byte` `readByte`(`okio.Buffer` v9 @kind this) @signature `Lokio/Buffer;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L507e40.  v0:= v9.`okio.Buffer.b` @type ^`long` @kind wide;
  #L507e44.  v2:= 0L;
  #L507e48.  v4:= lcmp(v0, v2);
  #L507e4c.  if v4 == 0 then goto L507e90;
  #L507e50.  v2:= v9.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L507e54.  v3:= v2.`okio.Segment.b` @type ^`int`;
  #L507e58.  v4:= v2.`okio.Segment.c` @type ^`int`;
  #L507e5c.  v5:= v2.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L507e60.  v6:= v3 + 1;
  #L507e64.  v3:= v5[v3] @kind byte;
  #L507e68.  v7:= 1L;
  #L507e6c.  v0:= v0 - v7 @kind long;
  #L507e6e.  v9.`okio.Buffer.b` @type ^`long` := v0 @kind wide;
  #L507e72.  if v6 != v4 then goto L507e8a;
  #L507e76.  call temp:= `pop`(v2) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L507e7c.  v0:= temp @kind object;
  #L507e7e.  v9.`okio.Buffer.a` @type ^`okio.Segment` := v0 @kind object;
  #L507e82.  call `a`(v2) @signature `Lokio/SegmentPool;.a:(Lokio/Segment;)V` @kind static;
  #L507e88.  goto L507e8e;
  #L507e8a.  v2.`okio.Segment.b` @type ^`int` := v6;
  #L507e8e.  return v3;
  #L507e90.  v0:= new `java.lang.IllegalStateException`;
  #L507e94.  v1:= "size == 0" @kind object;
  #L507e98.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L507e9e.  throw v0;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L507eb0.  v0:= v2.`okio.Buffer.b` @type ^`long` @kind wide;
  #L507eb4.  call temp:= `readByteArray`(v2, v0) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L507eba.  v0:= temp @kind object;
  #L507ebc.  return v0 @kind object;
  #L507ebe.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L507ec0.  v1:= new `java.lang.AssertionError`;
  #L507ec4.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L507eca.  throw v1;
  catch `java.io.EOFException` @[L507eb0..L507ebc] goto L507ebe;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v6 @kind this, `long` v7 ) @signature `Lokio/Buffer;.readByteArray:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L507eec.  v0:= v6.`okio.Buffer.b` @type ^`long` @kind wide;
  #L507ef0.  v2:= 0L;
  #L507ef4.  v4:= v7 @kind wide;
  #L507ef6.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L507efc.  v0:= 2147483647L;
  #L507f02.  v2:= lcmp(v7, v0);
  #L507f06.  if v2 > 0 then goto L507f18;
  #L507f0a.  v8:= (`int`) v7 @kind l2i;
  #L507f0c.  v7:= new `byte`[v8];
  #L507f10.  call `readFully`(v6, v7) @signature `Lokio/Buffer;.readFully:([B)V` @kind virtual;
  #L507f16.  return v7 @kind object;
  #L507f18.  v0:= new `java.lang.IllegalArgumentException`;
  #L507f1c.  v1:= new `java.lang.StringBuilder`;
  #L507f20.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L507f26.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L507f2a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L507f30.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L507f36.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L507f3c.  v7:= temp @kind object;
  #L507f3e.  call `<init>`(v0, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L507f44.  throw v0;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50a7c4.  v0:= new `okio.ByteString`;
  #L50a7c8.  call temp:= `readByteArray`(v2) @signature `Lokio/Buffer;.readByteArray:()[B` @kind virtual;
  #L50a7ce.  v1:= temp @kind object;
  #L50a7d0.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L50a7d6.  return v0 @kind object;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.readByteString:(J)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50a7e8.  v0:= new `okio.ByteString`;
  #L50a7ec.  call temp:= `readByteArray`(v1, v2) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L50a7f2.  v2:= temp @kind object;
  #L50a7f4.  call `<init>`(v0, v2) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L50a7fa.  return v0 @kind object;
}
procedure `long` `readDecimalLong`(`okio.Buffer` v17 @kind this) @signature `Lokio/Buffer;.readDecimalLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L508f9c.  v0:= v17 @kind object;
  #L508fa0.  v1:= v0.`okio.Buffer.b` @type ^`long` @kind wide;
  #L508fa4.  v3:= 0L;
  #L508fa8.  v5:= lcmp(v1, v3);
  #L508fac.  if v5 == 0 then goto L509128;
  #L508fb0.  v1:= -922337203685477580L;
  #L508fba.  v5:= -7L;
  #L508fbe.  v7:= 0I;
  #L508fc0.  v8:= 0I;
  #L508fc2.  v9:= 0I;
  #L508fc4.  v10:= v0.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L508fc8.  v11:= v10.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L508fcc.  v12:= v10.`okio.Segment.b` @type ^`int`;
  #L508fd0.  v13:= v10.`okio.Segment.c` @type ^`int`;
  #L508fd4.  if v12 >= v13 then goto L5090da;
  #L508fd8.  v15:= v11[v12] @kind byte;
  #L508fdc.  v14:= 48I;
  #L508fe0.  if v15 < v14 then goto L509074;
  #L508fe4.  v14:= 57I;
  #L508fe8.  if v15 > v14 then goto L509074;
  #L508fec.  v14:= v15 - 48;
  #L508ff0.  v16:= lcmp(v3, v1);
  #L508ff4.  if v16 < 0 then goto L50901a;
  #L508ff8.  v16:= lcmp(v3, v1);
  #L508ffc.  if v16 != 0 then goto L50900c;
  #L509000.  v1:= (`long`) v14 @kind i2l;
  #L509002.  v16:= lcmp(v1, v5);
  #L509006.  if v16 >= 0 then goto L50900c;
  #L50900a.  goto L50901a;
  #L50900c.  v1:= 10L;
  #L509010.  v3:= v3 * v1 @kind long;
  #L509014.  v1:= (`long`) v14 @kind i2l;
  #L509016.  v3:= v3 + v1 @kind long;
  #L509018.  goto L509088;
  #L50901a.  v1:= new `okio.Buffer`;
  #L50901e.  call `<init>`(v1) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L509024.  call temp:= `writeDecimalLong`(v1, v3) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L50902a.  v1:= temp @kind object;
  #L50902c.  call temp:= `writeByte`(v1, v15) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L509032.  v1:= temp @kind object;
  #L509034.  if v8 != 0 then goto L50903e;
  #L509038.  call temp:= `readByte`(v1) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L50903e.  v2:= new `java.lang.NumberFormatException`;
  #L509042.  v3:= new `java.lang.StringBuilder`;
  #L509046.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50904c.  v4:= "Number too large: " @kind object;
  #L509050.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509056.  call temp:= `readUtf8`(v1) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L50905c.  v1:= temp @kind object;
  #L50905e.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509064.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50906a.  v1:= temp @kind object;
  #L50906c.  call `<init>`(v2, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L509072.  throw v2;
  #L509074.  v1:= 45I;
  #L509078.  if v15 != v1 then goto L50909c;
  #L50907c.  if v7 != 0 then goto L50909c;
  #L509080.  v1:= 1L;
  #L509084.  v5:= v5 - v1 @kind long;
  #L509086.  v8:= 1I;
  #L509088.  v12:= v12 + 1;
  #L50908c.  v7:= v7 + 1;
  #L509090.  v1:= -922337203685477580L;
  #L50909a.  goto L508fd4;
  #L50909c.  if v7 == 0 then goto L5090a4;
  #L5090a0.  v9:= 1I;
  #L5090a2.  goto L5090da;
  #L5090a4.  v1:= new `java.lang.NumberFormatException`;
  #L5090a8.  v2:= new `java.lang.StringBuilder`;
  #L5090ac.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5090b2.  v3:= "Expected leading [0-9] or '-' character but was 0x" @kind object;
  #L5090b6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5090bc.  call temp:= `toHexString`(v15) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L5090c2.  v3:= temp @kind object;
  #L5090c4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5090ca.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L5090d0.  v2:= temp @kind object;
  #L5090d2.  call `<init>`(v1, v2) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5090d8.  throw v1;
  #L5090da.  if v12 != v13 then goto L5090f2;
  #L5090de.  call temp:= `pop`(v10) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L5090e4.  v1:= temp @kind object;
  #L5090e6.  v0.`okio.Buffer.a` @type ^`okio.Segment` := v1 @kind object;
  #L5090ea.  call `a`(v10) @signature `Lokio/SegmentPool;.a:(Lokio/Segment;)V` @kind static;
  #L5090f0.  goto L5090f6;
  #L5090f2.  v10.`okio.Segment.b` @type ^`int` := v12;
  #L5090f6.  if v9 != 0 then goto L509112;
  #L5090fa.  v1:= v0.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L5090fe.  if v1 != 0 then goto L509104;
  #L509102.  goto L509112;
  #L509104.  v1:= -922337203685477580L;
  #L50910e.  goto L508fc4;
  #L509112.  v1:= v0.`okio.Buffer.b` @type ^`long` @kind wide;
  #L509116.  v5:= (`long`) v7 @kind i2l;
  #L509118.  v1:= v1 - v5 @kind long;
  #L50911a.  v0.`okio.Buffer.b` @type ^`long` := v1 @kind wide;
  #L50911e.  if v8 == 0 then goto L509124;
  #L509122.  goto L509126;
  #L509124.  v3:= -v3 @kind long;
  #L509126.  return v3 @kind wide;
  #L509128.  v1:= new `java.lang.IllegalStateException`;
  #L50912c.  v2:= "size == 0" @kind object;
  #L509130.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L509136.  goto L50913a;
  #L509138.  throw v1;
  #L50913a.  goto L509138;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v3 @kind this, `java.io.InputStream` v4 @kind object) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L5096fc.  v0:= 9223372036854775807L;
  #L509706.  v2:= 1I;
  #L509708.  call `readFrom`(v3, v4, v0, v2) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L50970e.  return v3 @kind object;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v3 @kind this, `java.io.InputStream` v4 @kind object, `long` v5 ) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L509720.  v0:= 0L;
  #L509724.  v2:= lcmp(v5, v0);
  #L509728.  if v2 < 0 then goto L509736;
  #L50972c.  v0:= 0I;
  #L50972e.  call `readFrom`(v3, v4, v5, v0) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L509734.  return v3 @kind object;
  #L509736.  v4:= new `java.lang.IllegalArgumentException`;
  #L50973a.  v0:= new `java.lang.StringBuilder`;
  #L50973e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L509744.  v1:= "byteCount < 0: " @kind object;
  #L509748.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50974e.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L509754.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50975a.  v5:= temp @kind object;
  #L50975c.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L509762.  throw v4;
}
procedure `void` `readFully`(`okio.Buffer` v3 @kind this, `okio.Buffer` v4 @kind object, `long` v5 ) @signature `Lokio/Buffer;.readFully:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50ac04.  v0:= v3.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50ac08.  v2:= lcmp(v0, v5);
  #L50ac0c.  if v2 < 0 then goto L50ac18;
  #L50ac10.  call `write`(v4, v3, v5) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L50ac16.  return @kind void;
  #L50ac18.  call `write`(v4, v3, v0) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L50ac1e.  v4:= new `java.io.EOFException`;
  #L50ac22.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L50ac28.  throw v4;
}
procedure `void` `readFully`(`okio.Buffer` v3 @kind this, `byte`[] v4 @kind object) @signature `Lokio/Buffer;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50abc8.  v0:= 0I;
  #L50abca.  v1:= length @variable v4;
  #L50abcc.  if v0 >= v1 then goto L50abf2;
  #L50abd0.  v1:= length @variable v4;
  #L50abd2.  v1:= v1 - v0 @kind int;
  #L50abd4.  call temp:= `read`(v3, v4, v0, v1) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L50abda.  v1:= temp;
  #L50abdc.  v2:= -1I;
  #L50abde.  if v1 == v2 then goto L50abe6;
  #L50abe2.  v0:= v0 + v1 @kind int;
  #L50abe4.  goto L50abca;
  #L50abe6.  v4:= new `java.io.EOFException`;
  #L50abea.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L50abf0.  throw v4;
  #L50abf2.  return @kind void;
}
procedure `long` `readHexadecimalUnsignedLong`(`okio.Buffer` v15 @kind this) @signature `Lokio/Buffer;.readHexadecimalUnsignedLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L50914c.  v0:= v15.`okio.Buffer.b` @type ^`long` @kind wide;
  #L509150.  v2:= 0L;
  #L509154.  v4:= lcmp(v0, v2);
  #L509158.  if v4 == 0 then goto L5092a4;
  #L50915c.  v0:= 0I;
  #L50915e.  v4:= v2 @kind wide;
  #L509160.  v1:= 0I;
  #L509162.  v6:= v15.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L509166.  v7:= v6.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50916a.  v8:= v6.`okio.Segment.b` @type ^`int`;
  #L50916e.  v9:= v6.`okio.Segment.c` @type ^`int`;
  #L509172.  if v8 >= v9 then goto L50926e;
  #L509176.  v10:= v7[v8] @kind byte;
  #L50917a.  v11:= 48I;
  #L50917e.  if v10 < v11 then goto L509190;
  #L509182.  v11:= 57I;
  #L509186.  if v10 > v11 then goto L509190;
  #L50918a.  v11:= v10 + -48;
  #L50918e.  goto L5091c0;
  #L509190.  v11:= 97I;
  #L509194.  if v10 < v11 then goto L5091aa;
  #L509198.  v11:= 102I;
  #L50919c.  if v10 > v11 then goto L5091aa;
  #L5091a0.  v11:= v10 + -97;
  #L5091a4.  v11:= v11 + 10;
  #L5091a8.  goto L5091c0;
  #L5091aa.  v11:= 65I;
  #L5091ae.  if v10 < v11 then goto L509230;
  #L5091b2.  v11:= 70I;
  #L5091b6.  if v10 > v11 then goto L509230;
  #L5091ba.  v11:= v10 + -65;
  #L5091be.  goto L5091a4;
  #L5091c0.  v12:= -3.105036184601418E231D;
  #L5091c4.  v12:= v12 ^& v4 @kind long;
  #L5091c6.  v14:= lcmp(v12, v2);
  #L5091ca.  if v14 != 0 then goto L5091e0;
  #L5091ce.  v10:= 4I;
  #L5091d0.  v4:= v4 ^< v10 @kind long;
  #L5091d2.  v10:= (`long`) v11 @kind i2l;
  #L5091d4.  v4:= v4 ^| v10 @kind long;
  #L5091d6.  v8:= v8 + 1;
  #L5091da.  v0:= v0 + 1;
  #L5091de.  goto L509172;
  #L5091e0.  v0:= new `okio.Buffer`;
  #L5091e4.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L5091ea.  call temp:= `writeHexadecimalUnsignedLong`(v0, v4) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L5091f0.  v0:= temp @kind object;
  #L5091f2.  call temp:= `writeByte`(v0, v10) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L5091f8.  v0:= temp @kind object;
  #L5091fa.  v1:= new `java.lang.NumberFormatException`;
  #L5091fe.  v2:= new `java.lang.StringBuilder`;
  #L509202.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L509208.  v3:= "Number too large: " @kind object;
  #L50920c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509212.  call temp:= `readUtf8`(v0) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L509218.  v0:= temp @kind object;
  #L50921a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509220.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L509226.  v0:= temp @kind object;
  #L509228.  call `<init>`(v1, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50922e.  throw v1;
  #L509230.  if v0 == 0 then goto L509238;
  #L509234.  v1:= 1I;
  #L509236.  goto L50926e;
  #L509238.  v0:= new `java.lang.NumberFormatException`;
  #L50923c.  v1:= new `java.lang.StringBuilder`;
  #L509240.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L509246.  v2:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L50924a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509250.  call temp:= `toHexString`(v10) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L509256.  v2:= temp @kind object;
  #L509258.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50925e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L509264.  v1:= temp @kind object;
  #L509266.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50926c.  throw v0;
  #L50926e.  if v8 != v9 then goto L509286;
  #L509272.  call temp:= `pop`(v6) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L509278.  v7:= temp @kind object;
  #L50927a.  v15.`okio.Buffer.a` @type ^`okio.Segment` := v7 @kind object;
  #L50927e.  call `a`(v6) @signature `Lokio/SegmentPool;.a:(Lokio/Segment;)V` @kind static;
  #L509284.  goto L50928a;
  #L509286.  v6.`okio.Segment.b` @type ^`int` := v8;
  #L50928a.  if v1 != 0 then goto L509296;
  #L50928e.  v6:= v15.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L509292.  if v6 != 0 then goto L509162;
  #L509296.  v1:= v15.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50929a.  v6:= (`long`) v0 @kind i2l;
  #L50929c.  v1:= v1 - v6 @kind long;
  #L50929e.  v15.`okio.Buffer.b` @type ^`long` := v1 @kind wide;
  #L5092a2.  return v4 @kind wide;
  #L5092a4.  v0:= new `java.lang.IllegalStateException`;
  #L5092a8.  v1:= "size == 0" @kind object;
  #L5092ac.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5092b2.  goto L5092b6;
  #L5092b4.  throw v0;
  #L5092b6.  goto L5092b4;
}
procedure `int` `readInt`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L5080b8.  v0:= v10.`okio.Buffer.b` @type ^`long` @kind wide;
  #L5080bc.  v2:= 4L;
  #L5080c0.  v4:= lcmp(v0, v2);
  #L5080c4.  if v4 < 0 then goto L50818c;
  #L5080c8.  v4:= v10.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L5080cc.  v5:= v4.`okio.Segment.b` @type ^`int`;
  #L5080d0.  v6:= v4.`okio.Segment.c` @type ^`int`;
  #L5080d4.  v7:= v6 - v5 @kind int;
  #L5080d8.  v8:= 4I;
  #L5080da.  if v7 >= v8 then goto L508122;
  #L5080de.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L5080e4.  v0:= temp;
  #L5080e6.  v0:= v0 ^& 255;
  #L5080ea.  v0:= v0 ^< 24;
  #L5080ee.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L5080f4.  v1:= temp;
  #L5080f6.  v1:= v1 ^& 255;
  #L5080fa.  v1:= v1 ^< 16;
  #L5080fe.  v0:= v0 ^| v1 @kind int;
  #L508100.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L508106.  v1:= temp;
  #L508108.  v1:= v1 ^& 255;
  #L50810c.  v1:= v1 ^< 8;
  #L508110.  v0:= v0 ^| v1 @kind int;
  #L508112.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L508118.  v1:= temp;
  #L50811a.  v1:= v1 ^& 255;
  #L50811e.  v0:= v0 ^| v1 @kind int;
  #L508120.  return v0;
  #L508122.  v7:= v4.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L508126.  v8:= v5 + 1;
  #L50812a.  v5:= v7[v5] @kind byte;
  #L50812e.  v5:= v5 ^& 255;
  #L508132.  v5:= v5 ^< 24;
  #L508136.  v9:= v8 + 1;
  #L50813a.  v8:= v7[v8] @kind byte;
  #L50813e.  v8:= v8 ^& 255;
  #L508142.  v8:= v8 ^< 16;
  #L508146.  v5:= v5 ^| v8 @kind int;
  #L508148.  v8:= v9 + 1;
  #L50814c.  v9:= v7[v9] @kind byte;
  #L508150.  v9:= v9 ^& 255;
  #L508154.  v9:= v9 ^< 8;
  #L508158.  v5:= v5 ^| v9 @kind int;
  #L50815a.  v9:= v8 + 1;
  #L50815e.  v7:= v7[v8] @kind byte;
  #L508162.  v7:= v7 ^& 255;
  #L508166.  v5:= v5 ^| v7 @kind int;
  #L508168.  v0:= v0 - v2 @kind long;
  #L50816a.  v10.`okio.Buffer.b` @type ^`long` := v0 @kind wide;
  #L50816e.  if v9 != v6 then goto L508186;
  #L508172.  call temp:= `pop`(v4) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L508178.  v0:= temp @kind object;
  #L50817a.  v10.`okio.Buffer.a` @type ^`okio.Segment` := v0 @kind object;
  #L50817e.  call `a`(v4) @signature `Lokio/SegmentPool;.a:(Lokio/Segment;)V` @kind static;
  #L508184.  goto L50818a;
  #L508186.  v4.`okio.Segment.b` @type ^`int` := v9;
  #L50818a.  return v5;
  #L50818c.  v0:= new `java.lang.IllegalStateException`;
  #L508190.  v1:= new `java.lang.StringBuilder`;
  #L508194.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50819a.  v2:= "size < 4: " @kind object;
  #L50819e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5081a4.  v2:= v10.`okio.Buffer.b` @type ^`long` @kind wide;
  #L5081a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L5081ae.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L5081b4.  v1:= temp @kind object;
  #L5081b6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5081bc.  throw v0;
}
procedure `int` `readIntLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readIntLe:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5081d0.  call temp:= `readInt`(v1) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L5081d6.  v0:= temp;
  #L5081d8.  call temp:= `reverseBytesInt`(v0) @signature `Lokio/Util;.reverseBytesInt:(I)I` @kind static;
  #L5081de.  v0:= temp;
  #L5081e0.  return v0;
}
procedure `long` `readLong`(`okio.Buffer` v16 @kind this) @signature `Lokio/Buffer;.readLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L5092c8.  v0:= v16 @kind object;
  #L5092cc.  v1:= v0.`okio.Buffer.b` @type ^`long` @kind wide;
  #L5092d0.  v3:= 8L;
  #L5092d4.  v5:= lcmp(v1, v3);
  #L5092d8.  if v5 < 0 then goto L5093e2;
  #L5092dc.  v5:= v0.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L5092e0.  v6:= v5.`okio.Segment.b` @type ^`int`;
  #L5092e4.  v7:= v5.`okio.Segment.c` @type ^`int`;
  #L5092e8.  v8:= v7 - v6 @kind int;
  #L5092ec.  v9:= 32I;
  #L5092f0.  v10:= 8I;
  #L5092f4.  if v8 >= v10 then goto L509320;
  #L5092f8.  call temp:= `readInt`(v16) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L5092fe.  v1:= temp;
  #L509300.  v1:= (`long`) v1 @kind i2l;
  #L509302.  v3:= 4294967295L;
  #L50930c.  v1:= v1 ^& v3 @kind long;
  #L50930e.  v1:= v1 ^< v9 @kind long;
  #L509310.  call temp:= `readInt`(v16) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L509316.  v5:= temp;
  #L509318.  v5:= (`long`) v5 @kind i2l;
  #L50931a.  v3:= v3 ^& v5 @kind long;
  #L50931c.  v1:= v1 ^| v3 @kind long;
  #L50931e.  return v1 @kind wide;
  #L509320.  v8:= v5.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L509324.  v11:= v6 + 1;
  #L509328.  v6:= v8[v6] @kind byte;
  #L50932c.  v12:= (`long`) v6 @kind i2l;
  #L50932e.  v14:= 255L;
  #L509332.  v12:= v12 ^& v14 @kind long;
  #L509334.  v6:= 56I;
  #L509338.  v12:= v12 ^< v6 @kind long;
  #L50933a.  v6:= v11 + 1;
  #L50933e.  v11:= v8[v11] @kind byte;
  #L509342.  v3:= (`long`) v11 @kind i2l;
  #L509344.  v3:= v3 ^& v14 @kind long;
  #L509346.  v11:= 48I;
  #L50934a.  v3:= v3 ^< v11 @kind long;
  #L50934c.  v3:= v3 ^| v12 @kind long;
  #L50934e.  v11:= v6 + 1;
  #L509352.  v6:= v8[v6] @kind byte;
  #L509356.  v12:= (`long`) v6 @kind i2l;
  #L509358.  v12:= v12 ^& v14 @kind long;
  #L50935a.  v6:= 40I;
  #L50935e.  v12:= v12 ^< v6 @kind long;
  #L509360.  v3:= v3 ^| v12 @kind long;
  #L509362.  v6:= v11 + 1;
  #L509366.  v11:= v8[v11] @kind byte;
  #L50936a.  v11:= (`long`) v11 @kind i2l;
  #L50936c.  v11:= v11 ^& v14 @kind long;
  #L50936e.  v11:= v11 ^< v9 @kind long;
  #L509370.  v3:= v3 ^| v11 @kind long;
  #L509372.  v9:= v6 + 1;
  #L509376.  v6:= v8[v6] @kind byte;
  #L50937a.  v11:= (`long`) v6 @kind i2l;
  #L50937c.  v11:= v11 ^& v14 @kind long;
  #L50937e.  v6:= 24I;
  #L509382.  v11:= v11 ^< v6 @kind long;
  #L509384.  v3:= v3 ^| v11 @kind long;
  #L509386.  v6:= v9 + 1;
  #L50938a.  v9:= v8[v9] @kind byte;
  #L50938e.  v11:= (`long`) v9 @kind i2l;
  #L509390.  v11:= v11 ^& v14 @kind long;
  #L509392.  v9:= 16I;
  #L509396.  v11:= v11 ^< v9 @kind long;
  #L509398.  v3:= v3 ^| v11 @kind long;
  #L50939a.  v9:= v6 + 1;
  #L50939e.  v6:= v8[v6] @kind byte;
  #L5093a2.  v11:= (`long`) v6 @kind i2l;
  #L5093a4.  v11:= v11 ^& v14 @kind long;
  #L5093a6.  v10:= v11 ^< v10 @kind long;
  #L5093aa.  v3:= v3 ^| v10 @kind long;
  #L5093ac.  v6:= v9 + 1;
  #L5093b0.  v8:= v8[v9] @kind byte;
  #L5093b4.  v8:= (`long`) v8 @kind i2l;
  #L5093b6.  v8:= v8 ^& v14 @kind long;
  #L5093b8.  v3:= v3 ^| v8 @kind long;
  #L5093ba.  v8:= 8L;
  #L5093be.  v1:= v1 - v8 @kind long;
  #L5093c0.  v0.`okio.Buffer.b` @type ^`long` := v1 @kind wide;
  #L5093c4.  if v6 != v7 then goto L5093dc;
  #L5093c8.  call temp:= `pop`(v5) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L5093ce.  v1:= temp @kind object;
  #L5093d0.  v0.`okio.Buffer.a` @type ^`okio.Segment` := v1 @kind object;
  #L5093d4.  call `a`(v5) @signature `Lokio/SegmentPool;.a:(Lokio/Segment;)V` @kind static;
  #L5093da.  goto L5093e0;
  #L5093dc.  v5.`okio.Segment.b` @type ^`int` := v6;
  #L5093e0.  return v3 @kind wide;
  #L5093e2.  v1:= new `java.lang.IllegalStateException`;
  #L5093e6.  v2:= new `java.lang.StringBuilder`;
  #L5093ea.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5093f0.  v3:= "size < 8: " @kind object;
  #L5093f4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5093fa.  v3:= v0.`okio.Buffer.b` @type ^`long` @kind wide;
  #L5093fe.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L509404.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50940a.  v2:= temp @kind object;
  #L50940c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L509412.  throw v1;
}
procedure `long` `readLongLe`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readLongLe:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L509424.  call temp:= `readLong`(v2) @signature `Lokio/Buffer;.readLong:()J` @kind virtual;
  #L50942a.  v0:= temp @kind wide;
  #L50942c.  call temp:= `reverseBytesLong`(v0) @signature `Lokio/Util;.reverseBytesLong:(J)J` @kind static;
  #L509432.  v0:= temp @kind wide;
  #L509434.  return v0 @kind wide;
}
procedure `short` `readShort`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L50a97c.  v0:= v10.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50a980.  v2:= 2L;
  #L50a984.  v4:= lcmp(v0, v2);
  #L50a988.  if v4 < 0 then goto L50aa0c;
  #L50a98c.  v4:= v10.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L50a990.  v5:= v4.`okio.Segment.b` @type ^`int`;
  #L50a994.  v6:= v4.`okio.Segment.c` @type ^`int`;
  #L50a998.  v7:= v6 - v5 @kind int;
  #L50a99c.  v8:= 2I;
  #L50a99e.  if v7 >= v8 then goto L50a9c4;
  #L50a9a2.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L50a9a8.  v0:= temp;
  #L50a9aa.  v0:= v0 ^& 255;
  #L50a9ae.  v0:= v0 ^< 8;
  #L50a9b2.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L50a9b8.  v1:= temp;
  #L50a9ba.  v1:= v1 ^& 255;
  #L50a9be.  v0:= v0 ^| v1 @kind int;
  #L50a9c0.  v0:= (`short`) v0 @kind i2s;
  #L50a9c2.  return v0;
  #L50a9c4.  v7:= v4.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50a9c8.  v8:= v5 + 1;
  #L50a9cc.  v5:= v7[v5] @kind byte;
  #L50a9d0.  v5:= v5 ^& 255;
  #L50a9d4.  v5:= v5 ^< 8;
  #L50a9d8.  v9:= v8 + 1;
  #L50a9dc.  v7:= v7[v8] @kind byte;
  #L50a9e0.  v7:= v7 ^& 255;
  #L50a9e4.  v5:= v5 ^| v7 @kind int;
  #L50a9e6.  v0:= v0 - v2 @kind long;
  #L50a9e8.  v10.`okio.Buffer.b` @type ^`long` := v0 @kind wide;
  #L50a9ec.  if v9 != v6 then goto L50aa04;
  #L50a9f0.  call temp:= `pop`(v4) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L50a9f6.  v0:= temp @kind object;
  #L50a9f8.  v10.`okio.Buffer.a` @type ^`okio.Segment` := v0 @kind object;
  #L50a9fc.  call `a`(v4) @signature `Lokio/SegmentPool;.a:(Lokio/Segment;)V` @kind static;
  #L50aa02.  goto L50aa08;
  #L50aa04.  v4.`okio.Segment.b` @type ^`int` := v9;
  #L50aa08.  v0:= (`short`) v5 @kind i2s;
  #L50aa0a.  return v0;
  #L50aa0c.  v0:= new `java.lang.IllegalStateException`;
  #L50aa10.  v1:= new `java.lang.StringBuilder`;
  #L50aa14.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50aa1a.  v2:= "size < 2: " @kind object;
  #L50aa1e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50aa24.  v2:= v10.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50aa28.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L50aa2e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50aa34.  v1:= temp @kind object;
  #L50aa36.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50aa3c.  throw v0;
}
procedure `short` `readShortLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readShortLe:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50aa50.  call temp:= `readShort`(v1) @signature `Lokio/Buffer;.readShort:()S` @kind virtual;
  #L50aa56.  v0:= temp;
  #L50aa58.  call temp:= `reverseBytesShort`(v0) @signature `Lokio/Util;.reverseBytesShort:(S)S` @kind static;
  #L50aa5e.  v0:= temp;
  #L50aa60.  return v0;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v6 @kind this, `long` v7 , `java.nio.charset.Charset` v9 @kind object) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L508628.  v0:= v6.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50862c.  v2:= 0L;
  #L508630.  v4:= v7 @kind wide;
  #L508632.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L508638.  if v9 == 0 then goto L508700;
  #L50863c.  v0:= 2147483647L;
  #L508642.  v2:= lcmp(v7, v0);
  #L508646.  if v2 > 0 then goto L5086d2;
  #L50864a.  v0:= 0L;
  #L50864e.  v2:= lcmp(v7, v0);
  #L508652.  if v2 != 0 then goto L50865c;
  #L508656.  v7:= "" @kind object;
  #L50865a.  return v7 @kind object;
  #L50865c.  v0:= v6.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L508660.  v1:= v0.`okio.Segment.b` @type ^`int`;
  #L508664.  v1:= (`long`) v1 @kind i2l;
  #L508666.  v1:= v1 + v7 @kind long;
  #L508668.  v3:= v0.`okio.Segment.c` @type ^`int`;
  #L50866c.  v3:= (`long`) v3 @kind i2l;
  #L50866e.  v5:= lcmp(v1, v3);
  #L508672.  if v5 <= 0 then goto L50868a;
  #L508676.  v0:= new `java.lang.String`;
  #L50867a.  call temp:= `readByteArray`(v6, v7) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L508680.  v7:= temp @kind object;
  #L508682.  call `<init>`(v0, v7, v9) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L508688.  return v0 @kind object;
  #L50868a.  v1:= new `java.lang.String`;
  #L50868e.  v2:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L508692.  v3:= v0.`okio.Segment.b` @type ^`int`;
  #L508696.  v4:= (`int`) v7 @kind l2i;
  #L508698.  call `<init>`(v1, v2, v3, v4, v9) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L50869e.  v9:= v0.`okio.Segment.b` @type ^`int`;
  #L5086a2.  v2:= (`long`) v9 @kind i2l;
  #L5086a4.  v2:= v2 + v7 @kind long;
  #L5086a6.  v9:= (`int`) v2 @kind l2i;
  #L5086a8.  v0.`okio.Segment.b` @type ^`int` := v9;
  #L5086ac.  v2:= v6.`okio.Buffer.b` @type ^`long` @kind wide;
  #L5086b0.  v2:= v2 - v7 @kind long;
  #L5086b2.  v6.`okio.Buffer.b` @type ^`long` := v2 @kind wide;
  #L5086b6.  v7:= v0.`okio.Segment.c` @type ^`int`;
  #L5086ba.  if v9 != v7 then goto L5086d0;
  #L5086be.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L5086c4.  v7:= temp @kind object;
  #L5086c6.  v6.`okio.Buffer.a` @type ^`okio.Segment` := v7 @kind object;
  #L5086ca.  call `a`(v0) @signature `Lokio/SegmentPool;.a:(Lokio/Segment;)V` @kind static;
  #L5086d0.  return v1 @kind object;
  #L5086d2.  v9:= new `java.lang.IllegalArgumentException`;
  #L5086d6.  v0:= new `java.lang.StringBuilder`;
  #L5086da.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5086e0.  v1:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L5086e4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5086ea.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L5086f0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L5086f6.  v7:= temp @kind object;
  #L5086f8.  call `<init>`(v9, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5086fe.  throw v9;
  #L508700.  v7:= new `java.lang.IllegalArgumentException`;
  #L508704.  v8:= "charset == null" @kind object;
  #L508708.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50870e.  throw v7;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Lokio/Buffer;.readString:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5085ec.  v0:= v2.`okio.Buffer.b` @type ^`long` @kind wide;
  #L5085f0.  call temp:= `readString`(v2, v0, v3) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L5085f6.  v3:= temp @kind object;
  #L5085f8.  return v3 @kind object;
  #L5085fa.  v3:= Exception @type ^`java.io.EOFException` @kind object;
  #L5085fc.  v0:= new `java.lang.AssertionError`;
  #L508600.  call `<init>`(v0, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L508606.  throw v0;
  catch `java.io.EOFException` @[L5085ec..L5085f8] goto L5085fa;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readUnsafe:()Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50a35c.  v0:= new `okio.Buffer$UnsafeCursor`;
  #L50a360.  call `<init>`(v0) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @kind direct;
  #L50a366.  call temp:= `readUnsafe`(v1, v0) @signature `Lokio/Buffer;.readUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind virtual;
  #L50a36c.  v0:= temp @kind object;
  #L50a36e.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe`(`okio.Buffer` v1 @kind this, `okio.Buffer$UnsafeCursor` v2 @kind object) @signature `Lokio/Buffer;.readUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50a380.  v0:= v2.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L50a384.  if v0 != 0 then goto L50a394;
  #L50a388.  v2.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v1 @kind object;
  #L50a38c.  v0:= 0I;
  #L50a38e.  v2.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` := v0 @kind boolean;
  #L50a392.  return v2 @kind object;
  #L50a394.  v2:= new `java.lang.IllegalStateException`;
  #L50a398.  v0:= "already attached to a buffer" @kind object;
  #L50a39c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50a3a2.  throw v2;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v3 @kind this) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L508720.  v0:= v3.`okio.Buffer.b` @type ^`long` @kind wide;
  #L508724.  v2:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L508728.  call temp:= `readString`(v3, v0, v2) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L50872e.  v0:= temp @kind object;
  #L508730.  return v0 @kind object;
  #L508732.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L508734.  v1:= new `java.lang.AssertionError`;
  #L508738.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L50873e.  throw v1;
  catch `java.io.EOFException` @[L508720..L508730] goto L508732;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L508760.  v0:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L508764.  call temp:= `readString`(v1, v2, v0) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L50876a.  v2:= temp @kind object;
  #L50876c.  return v2 @kind object;
}
procedure `int` `readUtf8CodePoint`(`okio.Buffer` v12 @kind this) @signature `Lokio/Buffer;.readUtf8CodePoint:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L5081f4.  v0:= v12.`okio.Buffer.b` @type ^`long` @kind wide;
  #L5081f8.  v2:= 0L;
  #L5081fc.  v4:= lcmp(v0, v2);
  #L508200.  if v4 == 0 then goto L50834e;
  #L508204.  call temp:= `getByte`(v12, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L50820a.  v0:= temp;
  #L50820c.  v1:= v0 ^& 128;
  #L508210.  v2:= 1I;
  #L508212.  v3:= 128I;
  #L508216.  v4:= 65533I;
  #L50821c.  if v1 != 0 then goto L50822c;
  #L508220.  v1:= v0 ^& 127;
  #L508224.  v5:= 0I;
  #L508226.  v5:= 1I;
  #L508228.  v6:= 0I;
  #L50822a.  goto L508272;
  #L50822c.  v1:= v0 ^& 224;
  #L508230.  v5:= 192I;
  #L508234.  if v1 != v5 then goto L508244;
  #L508238.  v1:= v0 ^& 31;
  #L50823c.  v5:= 2I;
  #L50823e.  v6:= 128I;
  #L508242.  goto L508272;
  #L508244.  v1:= v0 ^& 240;
  #L508248.  v5:= 224I;
  #L50824c.  if v1 != v5 then goto L50825c;
  #L508250.  v1:= v0 ^& 15;
  #L508254.  v5:= 3I;
  #L508256.  v6:= 2048I;
  #L50825a.  goto L508272;
  #L50825c.  v1:= v0 ^& 248;
  #L508260.  v5:= 240I;
  #L508264.  if v1 != v5 then goto L508342;
  #L508268.  v1:= v0 ^& 7;
  #L50826c.  v5:= 4I;
  #L50826e.  v6:= 65536I;
  #L508272.  v7:= v12.`okio.Buffer.b` @type ^`long` @kind wide;
  #L508276.  v9:= (`long`) v5 @kind i2l;
  #L508278.  v11:= lcmp(v7, v9);
  #L50827c.  if v11 < 0 then goto L5082de;
  #L508280.  if v2 >= v5 then goto L5082ae;
  #L508284.  v7:= (`long`) v2 @kind i2l;
  #L508286.  call temp:= `getByte`(v12, v7) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L50828c.  v0:= temp;
  #L50828e.  v11:= v0 ^& 192;
  #L508292.  if v11 != v3 then goto L5082a6;
  #L508296.  v1:= v1 ^< 6;
  #L50829a.  v0:= v0 ^& 63;
  #L50829e.  v1:= v1 ^| v0 @kind int;
  #L5082a0.  v2:= v2 + 1;
  #L5082a4.  goto L508280;
  #L5082a6.  call `skip`(v12, v7) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L5082ac.  return v4;
  #L5082ae.  call `skip`(v12, v9) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L5082b4.  v0:= 1114111I;
  #L5082ba.  if v1 <= v0 then goto L5082c0;
  #L5082be.  return v4;
  #L5082c0.  v0:= 55296I;
  #L5082c6.  if v1 < v0 then goto L5082d6;
  #L5082ca.  v0:= 57343I;
  #L5082d0.  if v1 > v0 then goto L5082d6;
  #L5082d4.  return v4;
  #L5082d6.  if v1 >= v6 then goto L5082dc;
  #L5082da.  return v4;
  #L5082dc.  return v1;
  #L5082de.  v1:= new `java.io.EOFException`;
  #L5082e2.  v2:= new `java.lang.StringBuilder`;
  #L5082e6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5082ec.  v3:= "size < " @kind object;
  #L5082f0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5082f6.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L5082fc.  v3:= ": " @kind object;
  #L508300.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L508306.  v3:= v12.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50830a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L508310.  v3:= " (to read code point prefixed 0x" @kind object;
  #L508314.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50831a.  call temp:= `toHexString`(v0) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L508320.  v0:= temp @kind object;
  #L508322.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L508328.  v0:= ")" @kind object;
  #L50832c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L508332.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L508338.  v0:= temp @kind object;
  #L50833a.  call `<init>`(v1, v0) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L508340.  throw v1;
  #L508342.  v0:= 1L;
  #L508346.  call `skip`(v12, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L50834c.  return v4;
  #L50834e.  v0:= new `java.io.EOFException`;
  #L508352.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L508358.  goto L50835c;
  #L50835a.  throw v0;
  #L50835c.  goto L50835a;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.readUtf8Line:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L508780.  v0:= 10I;
  #L508784.  call temp:= `indexOf`(v5, v0) @signature `Lokio/Buffer;.indexOf:(B)J` @kind virtual;
  #L50878a.  v0:= temp @kind wide;
  #L50878c.  v2:= -1L;
  #L508790.  v4:= lcmp(v0, v2);
  #L508794.  if v4 != 0 then goto L5087b6;
  #L508798.  v0:= v5.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50879c.  v2:= 0L;
  #L5087a0.  v4:= lcmp(v0, v2);
  #L5087a4.  if v4 == 0 then goto L5087b2;
  #L5087a8.  call temp:= `readUtf8`(v5, v0) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L5087ae.  v0:= temp @kind object;
  #L5087b0.  goto L5087b4;
  #L5087b2.  v0:= 0I;
  #L5087b4.  return v0 @kind object;
  #L5087b6.  call temp:= `a`(v5, v0) @signature `Lokio/Buffer;.a:(J)Ljava/lang/String;` @kind virtual;
  #L5087bc.  v0:= temp @kind object;
  #L5087be.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readUtf8LineStrict:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L508824.  v0:= 9223372036854775807L;
  #L50882e.  call temp:= `readUtf8LineStrict`(v2, v0) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @kind virtual;
  #L508834.  v0:= temp @kind object;
  #L508836.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v10 @kind this, `long` v11 ) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L508848.  v0:= 0L;
  #L50884c.  v2:= lcmp(v11, v0);
  #L508850.  if v2 < 0 then goto L50896c;
  #L508854.  v0:= 1L;
  #L508858.  v2:= 9223372036854775807L;
  #L508862.  v4:= lcmp(v11, v2);
  #L508866.  if v4 != 0 then goto L50886c;
  #L50886a.  goto L508870;
  #L50886c.  v2:= v11 + v0 @kind long;
  #L508870.  v5:= 10I;
  #L508874.  v6:= 0L;
  #L508878.  v4:= v10 @kind object;
  #L50887a.  v8:= v2 @kind wide;
  #L50887c.  call temp:= `indexOf`(v4, v5, v6, v8) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L508882.  v4:= temp @kind wide;
  #L508884.  v6:= -1L;
  #L508888.  v8:= lcmp(v4, v6);
  #L50888c.  if v8 == 0 then goto L50889a;
  #L508890.  call temp:= `a`(v10, v4) @signature `Lokio/Buffer;.a:(J)Ljava/lang/String;` @kind virtual;
  #L508896.  v11:= temp @kind object;
  #L508898.  return v11 @kind object;
  #L50889a.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L5088a0.  v4:= temp @kind wide;
  #L5088a2.  v6:= lcmp(v2, v4);
  #L5088a6.  if v6 >= 0 then goto L5088d8;
  #L5088aa.  v0:= v2 - v0 @kind long;
  #L5088ae.  call temp:= `getByte`(v10, v0) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L5088b4.  v0:= temp;
  #L5088b6.  v1:= 13I;
  #L5088ba.  if v0 != v1 then goto L5088d8;
  #L5088be.  call temp:= `getByte`(v10, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L5088c4.  v0:= temp;
  #L5088c6.  v1:= 10I;
  #L5088ca.  if v0 != v1 then goto L5088d8;
  #L5088ce.  call temp:= `a`(v10, v2) @signature `Lokio/Buffer;.a:(J)Ljava/lang/String;` @kind virtual;
  #L5088d4.  v11:= temp @kind object;
  #L5088d6.  return v11 @kind object;
  #L5088d8.  v6:= new `okio.Buffer`;
  #L5088dc.  call `<init>`(v6) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L5088e2.  v2:= 0L;
  #L5088e6.  v0:= 32L;
  #L5088ea.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L5088f0.  v4:= temp @kind wide;
  #L5088f2.  call temp:= `min`(v0, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L5088f8.  v4:= temp @kind wide;
  #L5088fa.  v0:= v10 @kind object;
  #L5088fc.  v1:= v6 @kind object;
  #L5088fe.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L508904.  v0:= new `java.io.EOFException`;
  #L508908.  v1:= new `java.lang.StringBuilder`;
  #L50890c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L508912.  v2:= "\\n not found: limit=" @kind object;
  #L508916.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50891c.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L508922.  v2:= temp @kind wide;
  #L508924.  call temp:= `min`(v2, v11) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L50892a.  v11:= temp @kind wide;
  #L50892c.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L508932.  v11:= " content=" @kind object;
  #L508936.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50893c.  call temp:= `readByteString`(v6) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L508942.  v11:= temp @kind object;
  #L508944.  call temp:= `hex`(v11) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L50894a.  v11:= temp @kind object;
  #L50894c.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L508952.  v11:= 8230I;
  #L508956.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L50895c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L508962.  v11:= temp @kind object;
  #L508964.  call `<init>`(v0, v11) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50896a.  throw v0;
  #L50896c.  v0:= new `java.lang.IllegalArgumentException`;
  #L508970.  v1:= new `java.lang.StringBuilder`;
  #L508974.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50897a.  v2:= "limit < 0: " @kind object;
  #L50897e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L508984.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L50898a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L508990.  v11:= temp @kind object;
  #L508992.  call `<init>`(v0, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L508998.  throw v0;
}
procedure `boolean` `request`(`okio.Buffer` v3 @kind this, `long` v4 ) @signature `Lokio/Buffer;.request:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L507d8c.  v0:= v3.`okio.Buffer.b` @type ^`long` @kind wide;
  #L507d90.  v2:= lcmp(v0, v4);
  #L507d94.  if v2 < 0 then goto L507d9c;
  #L507d98.  v4:= 1I;
  #L507d9a.  goto L507d9e;
  #L507d9c.  v4:= 0I;
  #L507d9e.  return v4;
}
procedure `void` `require`(`okio.Buffer` v3 @kind this, `long` v4 ) @signature `Lokio/Buffer;.require:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50ac3c.  v0:= v3.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50ac40.  v2:= lcmp(v0, v4);
  #L50ac44.  if v2 < 0 then goto L50ac4a;
  #L50ac48.  return @kind void;
  #L50ac4a.  v4:= new `java.io.EOFException`;
  #L50ac4e.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L50ac54.  throw v4;
}
procedure `int` `select`(`okio.Buffer` v3 @kind this, `okio.Options` v4 @kind object) @signature `Lokio/Buffer;.select:(Lokio/Options;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L508370.  v0:= 0I;
  #L508372.  call temp:= `b`(v3, v4, v0) @signature `Lokio/Buffer;.b:(Lokio/Options;Z)I` @kind virtual;
  #L508378.  v0:= temp;
  #L50837a.  v1:= -1I;
  #L50837c.  if v0 != v1 then goto L508382;
  #L508380.  return v1;
  #L508382.  v4:= v4.`okio.Options.a` @type ^`okio.ByteString`[] @kind object;
  #L508386.  v4:= v4[v0] @kind object;
  #L50838a.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L508390.  v4:= temp;
  #L508392.  v1:= (`long`) v4 @kind i2l;
  #L508394.  call `skip`(v3, v1) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L50839a.  return v0;
  #L50839c.  v4:= new `java.lang.AssertionError`;
  #L5083a0.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L5083a6.  throw v4;
  catch `java.io.EOFException` @[L508394..L50839a] goto L50839c;
}
procedure `okio.ByteString` `sha1`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha1:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50a80c.  v0:= "SHA-1" @kind object;
  #L50a810.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L50a816.  v0:= temp @kind object;
  #L50a818.  return v0 @kind object;
}
procedure `okio.ByteString` `sha256`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha256:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50a82c.  v0:= "SHA-256" @kind object;
  #L50a830.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L50a836.  v0:= temp @kind object;
  #L50a838.  return v0 @kind object;
}
procedure `okio.ByteString` `sha512`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha512:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50a84c.  v0:= "SHA-512" @kind object;
  #L50a850.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L50a856.  v0:= temp @kind object;
  #L50a858.  return v0 @kind object;
}
procedure `long` `size`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.size:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L509448.  v0:= v2.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50944c.  return v0 @kind wide;
}
procedure `void` `skip`(`okio.Buffer` v6 @kind this, `long` v7 ) @signature `Lokio/Buffer;.skip:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L50ac68.  v0:= 0L;
  #L50ac6c.  v2:= lcmp(v7, v0);
  #L50ac70.  if v2 <= 0 then goto L50acd6;
  #L50ac74.  v0:= v6.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L50ac78.  if v0 == 0 then goto L50acca;
  #L50ac7c.  v1:= v0.`okio.Segment.c` @type ^`int`;
  #L50ac80.  v0:= v0.`okio.Segment.b` @type ^`int`;
  #L50ac84.  v1:= v1 - v0 @kind int;
  #L50ac86.  v0:= (`long`) v1 @kind i2l;
  #L50ac88.  call temp:= `min`(v7, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L50ac8e.  v0:= temp @kind wide;
  #L50ac90.  v1:= (`int`) v0 @kind l2i;
  #L50ac92.  v2:= v6.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50ac96.  v4:= (`long`) v1 @kind i2l;
  #L50ac98.  v2:= v2 - v4 @kind long;
  #L50ac9a.  v6.`okio.Buffer.b` @type ^`long` := v2 @kind wide;
  #L50ac9e.  v7:= v7 - v4 @kind long;
  #L50aca0.  v0:= v6.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L50aca4.  v2:= v0.`okio.Segment.b` @type ^`int`;
  #L50aca8.  v2:= v2 + v1 @kind int;
  #L50acaa.  v0.`okio.Segment.b` @type ^`int` := v2;
  #L50acae.  v1:= v0.`okio.Segment.c` @type ^`int`;
  #L50acb2.  if v2 != v1 then goto L50ac68;
  #L50acb6.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L50acbc.  v1:= temp @kind object;
  #L50acbe.  v6.`okio.Buffer.a` @type ^`okio.Segment` := v1 @kind object;
  #L50acc2.  call `a`(v0) @signature `Lokio/SegmentPool;.a:(Lokio/Segment;)V` @kind static;
  #L50acc8.  goto L50ac68;
  #L50acca.  v7:= new `java.io.EOFException`;
  #L50acce.  call `<init>`(v7) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L50acd4.  throw v7;
  #L50acd6.  return @kind void;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50a86c.  v0:= v5.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50a870.  v2:= 2147483647L;
  #L50a876.  v4:= lcmp(v0, v2);
  #L50a87a.  if v4 > 0 then goto L50a88a;
  #L50a87e.  v1:= (`int`) v0 @kind l2i;
  #L50a880.  call temp:= `snapshot`(v5, v1) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @kind virtual;
  #L50a886.  v0:= temp @kind object;
  #L50a888.  return v0 @kind object;
  #L50a88a.  v0:= new `java.lang.IllegalArgumentException`;
  #L50a88e.  v1:= new `java.lang.StringBuilder`;
  #L50a892.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50a898.  v2:= "size > Integer.MAX_VALUE: " @kind object;
  #L50a89c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a8a2.  v2:= v5.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50a8a6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a8ac.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50a8b2.  v1:= temp @kind object;
  #L50a8b4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50a8ba.  throw v0;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50a8cc.  if v2 != 0 then goto L50a8d6;
  #L50a8d0.  v2:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L50a8d4.  return v2 @kind object;
  #L50a8d6.  v0:= new `okio.SegmentedByteString`;
  #L50a8da.  call `<init>`(v0, v1, v2) @signature `Lokio/SegmentedByteString;.<init>:(Lokio/Buffer;I)V` @kind direct;
  #L50a8e0.  return v0 @kind object;
}
procedure `okio.Timeout` `timeout`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50a964.  v0:= `@@okio.Timeout.NONE` @type ^`okio.Timeout` @kind object;
  #L50a968.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5089ac.  call temp:= `snapshot`(v1) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @kind virtual;
  #L5089b2.  v0:= temp @kind object;
  #L5089b4.  call temp:= `toString`(v0) @signature `Lokio/ByteString;.toString:()Ljava/lang/String;` @kind virtual;
  #L5089ba.  v0:= temp @kind object;
  #L5089bc.  return v0 @kind object;
}
procedure `int` `write`(`okio.Buffer` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lokio/Buffer;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L50851c.  if v7 == 0 then goto L508572;
  #L508520.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L508526.  v0:= temp;
  #L508528.  v1:= v0;
  #L50852a.  if v1 <= 0 then goto L508564;
  #L50852e.  v2:= 1I;
  #L508530.  call temp:= `c`(v6, v2) @signature `Lokio/Buffer;.c:(I)Lokio/Segment;` @kind virtual;
  #L508536.  v2:= temp @kind object;
  #L508538.  v3:= v2.`okio.Segment.c` @type ^`int`;
  #L50853c.  v3:= v3 - 8192;
  #L508540.  call temp:= `min`(v1, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L508546.  v3:= temp;
  #L508548.  v4:= v2.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50854c.  v5:= v2.`okio.Segment.c` @type ^`int`;
  #L508550.  call temp:= `get`(v7, v4, v5, v3) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L508556.  v1:= v1 - v3 @kind int;
  #L508558.  v4:= v2.`okio.Segment.c` @type ^`int`;
  #L50855c.  v4:= v4 + v3 @kind int;
  #L50855e.  v2.`okio.Segment.c` @type ^`int` := v4;
  #L508562.  goto L50852a;
  #L508564.  v1:= v6.`okio.Buffer.b` @type ^`long` @kind wide;
  #L508568.  v3:= (`long`) v0 @kind i2l;
  #L50856a.  v1:= v1 + v3 @kind long;
  #L50856c.  v6.`okio.Buffer.b` @type ^`long` := v1 @kind wide;
  #L508570.  return v0;
  #L508572.  v7:= new `java.lang.IllegalArgumentException`;
  #L508576.  v0:= "source == null" @kind object;
  #L50857a.  call `<init>`(v7, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L508580.  goto L508584;
  #L508582.  throw v7;
  #L508584.  goto L508582;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50982c.  if v2 == 0 then goto L509838;
  #L509830.  call `c`(v2, v1) @signature `Lokio/ByteString;.c:(Lokio/Buffer;)V` @kind virtual;
  #L509836.  return v1 @kind object;
  #L509838.  v2:= new `java.lang.IllegalArgumentException`;
  #L50983c.  v0:= "byteString == null" @kind object;
  #L509840.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L509846.  throw v2;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L509774.  if v3 == 0 then goto L509786;
  #L509778.  v0:= 0I;
  #L50977a.  v1:= length @variable v3;
  #L50977c.  call temp:= `write`(v2, v3, v0, v1) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L509782.  v3:= temp @kind object;
  #L509784.  return v3 @kind object;
  #L509786.  v3:= new `java.lang.IllegalArgumentException`;
  #L50978a.  v0:= "source == null" @kind object;
  #L50978e.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L509794.  throw v3;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v9 @kind this, `byte`[] v10 @kind object, `int` v11 , `int` v12 ) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L5097a8.  if v10 == 0 then goto L509808;
  #L5097ac.  v0:= length @variable v10;
  #L5097ae.  v1:= (`long`) v0 @kind i2l;
  #L5097b0.  v3:= (`long`) v11 @kind i2l;
  #L5097b2.  v7:= (`long`) v12 @kind i2l;
  #L5097b4.  v5:= v7 @kind wide;
  #L5097b6.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L5097bc.  v12:= v12 + v11 @kind int;
  #L5097be.  if v11 >= v12 then goto L5097fc;
  #L5097c2.  v0:= 1I;
  #L5097c4.  call temp:= `c`(v9, v0) @signature `Lokio/Buffer;.c:(I)Lokio/Segment;` @kind virtual;
  #L5097ca.  v0:= temp @kind object;
  #L5097cc.  v1:= v12 - v11 @kind int;
  #L5097d0.  v2:= v0.`okio.Segment.c` @type ^`int`;
  #L5097d4.  v2:= v2 - 8192;
  #L5097d8.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L5097de.  v1:= temp;
  #L5097e0.  v2:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L5097e4.  v3:= v0.`okio.Segment.c` @type ^`int`;
  #L5097e8.  call `arraycopy`(v10, v11, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5097ee.  v11:= v11 + v1 @kind int;
  #L5097f0.  v2:= v0.`okio.Segment.c` @type ^`int`;
  #L5097f4.  v2:= v2 + v1 @kind int;
  #L5097f6.  v0.`okio.Segment.c` @type ^`int` := v2;
  #L5097fa.  goto L5097be;
  #L5097fc.  v10:= v9.`okio.Buffer.b` @type ^`long` @kind wide;
  #L509800.  v10:= v10 + v7 @kind long;
  #L509802.  v9.`okio.Buffer.b` @type ^`long` := v10 @kind wide;
  #L509806.  return v9 @kind object;
  #L509808.  v10:= new `java.lang.IllegalArgumentException`;
  #L50980c.  v11:= "source == null" @kind object;
  #L509810.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L509816.  goto L50981a;
  #L509818.  throw v10;
  #L50981a.  goto L509818;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `okio.ByteString` v1 @kind object) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50a41c.  call temp:= `write`(v0, v1) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L50a422.  v1:= temp @kind object;
  #L50a424.  return v1 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v5 @kind this, `okio.Source` v6 @kind object, `long` v7 ) @signature `Lokio/Buffer;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50a438.  v0:= 0L;
  #L50a43c.  v2:= lcmp(v7, v0);
  #L50a440.  if v2 <= 0 then goto L50a468;
  #L50a444.  call temp:= `read`(v6, v5, v7) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L50a44a.  v0:= temp @kind wide;
  #L50a44c.  v2:= -1L;
  #L50a450.  v4:= lcmp(v0, v2);
  #L50a454.  if v4 == 0 then goto L50a45c;
  #L50a458.  v7:= v7 - v0 @kind long;
  #L50a45a.  goto L50a438;
  #L50a45c.  v6:= new `java.io.EOFException`;
  #L50a460.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L50a466.  throw v6;
  #L50a468.  return v5 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `byte`[] v1 @kind object) @signature `Lokio/Buffer;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50a3e4.  call temp:= `write`(v0, v1) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L50a3ea.  v1:= temp @kind object;
  #L50a3ec.  return v1 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lokio/Buffer;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50a400.  call temp:= `write`(v0, v1, v2, v3) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L50a406.  v1:= temp @kind object;
  #L50a408.  return v1 @kind object;
}
procedure `void` `write`(`okio.Buffer` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L50ace8.  if v8 == 0 then goto L50ae02;
  #L50acec.  if v8 == v7 then goto L50adf2;
  #L50acf0.  v0:= v8.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50acf4.  v2:= 0L;
  #L50acf8.  v4:= v9 @kind wide;
  #L50acfa.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L50ad00.  v0:= 0L;
  #L50ad04.  v2:= lcmp(v9, v0);
  #L50ad08.  if v2 <= 0 then goto L50adf0;
  #L50ad0c.  v0:= v8.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L50ad10.  v1:= v0.`okio.Segment.c` @type ^`int`;
  #L50ad14.  v2:= v0.`okio.Segment.b` @type ^`int`;
  #L50ad18.  v1:= v1 - v2 @kind int;
  #L50ad1a.  v1:= (`long`) v1 @kind i2l;
  #L50ad1c.  v3:= lcmp(v9, v1);
  #L50ad20.  if v3 >= 0 then goto L50ad94;
  #L50ad24.  v1:= v7.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L50ad28.  if v1 == 0 then goto L50ad32;
  #L50ad2c.  v1:= v1.`okio.Segment.g` @type ^`okio.Segment` @kind object;
  #L50ad30.  goto L50ad34;
  #L50ad32.  v1:= 0I;
  #L50ad34.  if v1 == 0 then goto L50ad86;
  #L50ad38.  v2:= v1.`okio.Segment.e` @type ^`boolean` @kind boolean;
  #L50ad3c.  if v2 == 0 then goto L50ad86;
  #L50ad40.  v2:= v1.`okio.Segment.c` @type ^`int`;
  #L50ad44.  v2:= (`long`) v2 @kind i2l;
  #L50ad46.  v2:= v2 + v9 @kind long;
  #L50ad48.  v4:= v1.`okio.Segment.d` @type ^`boolean` @kind boolean;
  #L50ad4c.  if v4 == 0 then goto L50ad54;
  #L50ad50.  v4:= 0I;
  #L50ad52.  goto L50ad58;
  #L50ad54.  v4:= v1.`okio.Segment.b` @type ^`int`;
  #L50ad58.  v4:= (`long`) v4 @kind i2l;
  #L50ad5a.  v2:= v2 - v4 @kind long;
  #L50ad5c.  v4:= 8192L;
  #L50ad60.  v6:= lcmp(v2, v4);
  #L50ad64.  if v6 > 0 then goto L50ad86;
  #L50ad68.  v2:= (`int`) v9 @kind l2i;
  #L50ad6a.  call `writeTo`(v0, v1, v2) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L50ad70.  v0:= v8.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50ad74.  v0:= v0 - v9 @kind long;
  #L50ad76.  v8.`okio.Buffer.b` @type ^`long` := v0 @kind wide;
  #L50ad7a.  v0:= v7.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50ad7e.  v0:= v0 + v9 @kind long;
  #L50ad80.  v7.`okio.Buffer.b` @type ^`long` := v0 @kind wide;
  #L50ad84.  return @kind void;
  #L50ad86.  v1:= (`int`) v9 @kind l2i;
  #L50ad88.  call temp:= `split`(v0, v1) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @kind virtual;
  #L50ad8e.  v0:= temp @kind object;
  #L50ad90.  v8.`okio.Buffer.a` @type ^`okio.Segment` := v0 @kind object;
  #L50ad94.  v0:= v8.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L50ad98.  v1:= v0.`okio.Segment.c` @type ^`int`;
  #L50ad9c.  v2:= v0.`okio.Segment.b` @type ^`int`;
  #L50ada0.  v1:= v1 - v2 @kind int;
  #L50ada2.  v1:= (`long`) v1 @kind i2l;
  #L50ada4.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L50adaa.  v3:= temp @kind object;
  #L50adac.  v8.`okio.Buffer.a` @type ^`okio.Segment` := v3 @kind object;
  #L50adb0.  v3:= v7.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L50adb4.  if v3 != 0 then goto L50adc6;
  #L50adb8.  v7.`okio.Buffer.a` @type ^`okio.Segment` := v0 @kind object;
  #L50adbc.  v0.`okio.Segment.g` @type ^`okio.Segment` := v0 @kind object;
  #L50adc0.  v0.`okio.Segment.f` @type ^`okio.Segment` := v0 @kind object;
  #L50adc4.  goto L50add8;
  #L50adc6.  v3:= v3.`okio.Segment.g` @type ^`okio.Segment` @kind object;
  #L50adca.  call temp:= `push`(v3, v0) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L50add0.  v0:= temp @kind object;
  #L50add2.  call `compact`(v0) @signature `Lokio/Segment;.compact:()V` @kind virtual;
  #L50add8.  v3:= v8.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50addc.  v3:= v3 - v1 @kind long;
  #L50adde.  v8.`okio.Buffer.b` @type ^`long` := v3 @kind wide;
  #L50ade2.  v3:= v7.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50ade6.  v3:= v3 + v1 @kind long;
  #L50ade8.  v7.`okio.Buffer.b` @type ^`long` := v3 @kind wide;
  #L50adec.  v9:= v9 - v1 @kind long;
  #L50adee.  goto L50ad00;
  #L50adf0.  return @kind void;
  #L50adf2.  v8:= new `java.lang.IllegalArgumentException`;
  #L50adf6.  v9:= "source == this" @kind object;
  #L50adfa.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50ae00.  throw v8;
  #L50ae02.  v8:= new `java.lang.IllegalArgumentException`;
  #L50ae06.  v9:= "source == null" @kind object;
  #L50ae0a.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50ae10.  goto L50ae14;
  #L50ae12.  throw v8;
  #L50ae14.  goto L50ae12;
}
procedure `long` `writeAll`(`okio.Buffer` v7 @kind this, `okio.Source` v8 @kind object) @signature `Lokio/Buffer;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L509460.  if v8 == 0 then goto L509486;
  #L509464.  v0:= 0L;
  #L509468.  v2:= 8192L;
  #L50946c.  call temp:= `read`(v8, v7, v2) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L509472.  v2:= temp @kind wide;
  #L509474.  v4:= -1L;
  #L509478.  v6:= lcmp(v2, v4);
  #L50947c.  if v6 == 0 then goto L509484;
  #L509480.  v0:= v0 + v2 @kind long;
  #L509482.  goto L509468;
  #L509484.  return v0 @kind wide;
  #L509486.  v8:= new `java.lang.IllegalArgumentException`;
  #L50948a.  v0:= "source == null" @kind object;
  #L50948e.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L509494.  goto L509498;
  #L509496.  throw v8;
  #L509498.  goto L509496;
}
procedure `okio.Buffer` `writeByte`(`okio.Buffer` v4 @kind this, `int` v5 ) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L509858.  v0:= 1I;
  #L50985a.  call temp:= `c`(v4, v0) @signature `Lokio/Buffer;.c:(I)Lokio/Segment;` @kind virtual;
  #L509860.  v0:= temp @kind object;
  #L509862.  v1:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L509866.  v2:= v0.`okio.Segment.c` @type ^`int`;
  #L50986a.  v3:= v2 + 1;
  #L50986e.  v0.`okio.Segment.c` @type ^`int` := v3;
  #L509872.  v5:= (`byte`) v5 @kind i2b;
  #L509874.  v1[v2]:= v5 @kind byte;
  #L509878.  v0:= v4.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50987c.  v2:= 1L;
  #L509880.  v0:= v0 + v2 @kind long;
  #L509882.  v4.`okio.Buffer.b` @type ^`long` := v0 @kind wide;
  #L509886.  return v4 @kind object;
}
procedure `okio.BufferedSink` `writeByte`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50a47c.  call temp:= `writeByte`(v0, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L50a482.  v1:= temp @kind object;
  #L50a484.  return v1 @kind object;
}
procedure `okio.Buffer` `writeDecimalLong`(`okio.Buffer` v11 @kind this, `long` v12 ) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L509898.  v0:= 0L;
  #L50989c.  v2:= lcmp(v12, v0);
  #L5098a0.  if v2 != 0 then goto L5098b2;
  #L5098a4.  v12:= 48I;
  #L5098a8.  call temp:= `writeByte`(v11, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L5098ae.  v12:= temp @kind object;
  #L5098b0.  return v12 @kind object;
  #L5098b2.  v2:= 0I;
  #L5098b4.  v3:= 1I;
  #L5098b6.  v4:= lcmp(v12, v0);
  #L5098ba.  if v4 >= 0 then goto L5098d8;
  #L5098be.  v12:= -v12 @kind long;
  #L5098c0.  v2:= lcmp(v12, v0);
  #L5098c4.  if v2 >= 0 then goto L5098d6;
  #L5098c8.  v12:= "-9223372036854775808" @kind object;
  #L5098cc.  call temp:= `writeUtf8`(v11, v12) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L5098d2.  v12:= temp @kind object;
  #L5098d4.  return v12 @kind object;
  #L5098d6.  v2:= 1I;
  #L5098d8.  v4:= 100000000L;
  #L5098de.  v6:= 10L;
  #L5098e2.  v8:= lcmp(v12, v4);
  #L5098e6.  if v8 >= 0 then goto L509970;
  #L5098ea.  v4:= 10000L;
  #L5098ee.  v8:= lcmp(v12, v4);
  #L5098f2.  if v8 >= 0 then goto L50992c;
  #L5098f6.  v4:= 100L;
  #L5098fa.  v8:= lcmp(v12, v4);
  #L5098fe.  if v8 >= 0 then goto L509914;
  #L509902.  v4:= lcmp(v12, v6);
  #L509906.  if v4 >= 0 then goto L50990e;
  #L50990a.  goto L509a60;
  #L50990e.  v3:= 2I;
  #L509910.  goto L509a60;
  #L509914.  v3:= 1000L;
  #L509918.  v5:= lcmp(v12, v3);
  #L50991c.  if v5 >= 0 then goto L509926;
  #L509920.  v3:= 3I;
  #L509922.  goto L509a60;
  #L509926.  v3:= 4I;
  #L509928.  goto L509a60;
  #L50992c.  v3:= 1000000L;
  #L509932.  v5:= lcmp(v12, v3);
  #L509936.  if v5 >= 0 then goto L509954;
  #L50993a.  v3:= 100000L;
  #L509940.  v5:= lcmp(v12, v3);
  #L509944.  if v5 >= 0 then goto L50994e;
  #L509948.  v3:= 5I;
  #L50994a.  goto L509a60;
  #L50994e.  v3:= 6I;
  #L509950.  goto L509a60;
  #L509954.  v3:= 10000000L;
  #L50995a.  v5:= lcmp(v12, v3);
  #L50995e.  if v5 >= 0 then goto L509968;
  #L509962.  v3:= 7I;
  #L509964.  goto L509a60;
  #L509968.  v3:= 8I;
  #L50996c.  goto L509a60;
  #L509970.  v3:= 1000000000000L;
  #L50997a.  v5:= lcmp(v12, v3);
  #L50997e.  if v5 >= 0 then goto L5099cc;
  #L509982.  v3:= 10000000000L;
  #L50998c.  v5:= lcmp(v12, v3);
  #L509990.  if v5 >= 0 then goto L5099ae;
  #L509994.  v3:= 1000000000L;
  #L50999a.  v5:= lcmp(v12, v3);
  #L50999e.  if v5 >= 0 then goto L5099a8;
  #L5099a2.  v3:= 9I;
  #L5099a6.  goto L509a60;
  #L5099a8.  v3:= 10I;
  #L5099ac.  goto L509a60;
  #L5099ae.  v3:= 100000000000L;
  #L5099b8.  v5:= lcmp(v12, v3);
  #L5099bc.  if v5 >= 0 then goto L5099c6;
  #L5099c0.  v3:= 11I;
  #L5099c4.  goto L509a60;
  #L5099c6.  v3:= 12I;
  #L5099ca.  goto L509a60;
  #L5099cc.  v3:= 1000000000000000L;
  #L5099d6.  v5:= lcmp(v12, v3);
  #L5099da.  if v5 >= 0 then goto L509a14;
  #L5099de.  v3:= 10000000000000L;
  #L5099e8.  v5:= lcmp(v12, v3);
  #L5099ec.  if v5 >= 0 then goto L5099f6;
  #L5099f0.  v3:= 13I;
  #L5099f4.  goto L509a60;
  #L5099f6.  v3:= 100000000000000L;
  #L509a00.  v5:= lcmp(v12, v3);
  #L509a04.  if v5 >= 0 then goto L509a0e;
  #L509a08.  v3:= 14I;
  #L509a0c.  goto L509a60;
  #L509a0e.  v3:= 15I;
  #L509a12.  goto L509a60;
  #L509a14.  v3:= 100000000000000000L;
  #L509a1e.  v5:= lcmp(v12, v3);
  #L509a22.  if v5 >= 0 then goto L509a44;
  #L509a26.  v3:= 10000000000000000L;
  #L509a30.  v5:= lcmp(v12, v3);
  #L509a34.  if v5 >= 0 then goto L509a3e;
  #L509a38.  v3:= 16I;
  #L509a3c.  goto L509a60;
  #L509a3e.  v3:= 17I;
  #L509a42.  goto L509a60;
  #L509a44.  v3:= 1000000000000000000L;
  #L509a4e.  v5:= lcmp(v12, v3);
  #L509a52.  if v5 >= 0 then goto L509a5c;
  #L509a56.  v3:= 18I;
  #L509a5a.  goto L509a60;
  #L509a5c.  v3:= 19I;
  #L509a60.  if v2 == 0 then goto L509a68;
  #L509a64.  v3:= v3 + 1;
  #L509a68.  call temp:= `c`(v11, v3) @signature `Lokio/Buffer;.c:(I)Lokio/Segment;` @kind virtual;
  #L509a6e.  v4:= temp @kind object;
  #L509a70.  v5:= v4.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L509a74.  v8:= v4.`okio.Segment.c` @type ^`int`;
  #L509a78.  v8:= v8 + v3 @kind int;
  #L509a7a.  v9:= lcmp(v12, v0);
  #L509a7e.  if v9 == 0 then goto L509a9c;
  #L509a82.  v9:= v12 %% v6 @kind long;
  #L509a86.  v10:= (`int`) v9 @kind l2i;
  #L509a88.  v8:= v8 + -1;
  #L509a8c.  v9:= `@@okio.Buffer.DIGITS` @type ^`byte`[] @kind object;
  #L509a90.  v9:= v9[v10] @kind byte;
  #L509a94.  v5[v8]:= v9 @kind byte;
  #L509a98.  v12:= v12 / v6 @kind long;
  #L509a9a.  goto L509a7a;
  #L509a9c.  if v2 == 0 then goto L509aac;
  #L509aa0.  v8:= v8 + -1;
  #L509aa4.  v12:= 45I;
  #L509aa8.  v5[v8]:= v12 @kind byte;
  #L509aac.  v12:= v4.`okio.Segment.c` @type ^`int`;
  #L509ab0.  v12:= v12 + v3 @kind int;
  #L509ab2.  v4.`okio.Segment.c` @type ^`int` := v12;
  #L509ab6.  v12:= v11.`okio.Buffer.b` @type ^`long` @kind wide;
  #L509aba.  v0:= (`long`) v3 @kind i2l;
  #L509abc.  v12:= v12 + v0 @kind long;
  #L509abe.  v11.`okio.Buffer.b` @type ^`long` := v12 @kind wide;
  #L509ac2.  return v11 @kind object;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50a498.  call temp:= `writeDecimalLong`(v0, v1) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L50a49e.  v1:= temp @kind object;
  #L50a4a0.  return v1 @kind object;
}
procedure `okio.Buffer` `writeHexadecimalUnsignedLong`(`okio.Buffer` v9 @kind this, `long` v10 ) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L509ad4.  v0:= 0L;
  #L509ad8.  v2:= lcmp(v10, v0);
  #L509adc.  if v2 != 0 then goto L509aee;
  #L509ae0.  v10:= 48I;
  #L509ae4.  call temp:= `writeByte`(v9, v10) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L509aea.  v10:= temp @kind object;
  #L509aec.  return v10 @kind object;
  #L509aee.  call temp:= `highestOneBit`(v10) @signature `Ljava/lang/Long;.highestOneBit:(J)J` @kind static;
  #L509af4.  v0:= temp @kind wide;
  #L509af6.  call temp:= `numberOfTrailingZeros`(v0) @signature `Ljava/lang/Long;.numberOfTrailingZeros:(J)I` @kind static;
  #L509afc.  v0:= temp;
  #L509afe.  v1:= 4I;
  #L509b00.  v0:= v0 / v1 @kind int;
  #L509b02.  v0:= v0 + 1;
  #L509b06.  call temp:= `c`(v9, v0) @signature `Lokio/Buffer;.c:(I)Lokio/Segment;` @kind virtual;
  #L509b0c.  v2:= temp @kind object;
  #L509b0e.  v3:= v2.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L509b12.  v4:= v2.`okio.Segment.c` @type ^`int`;
  #L509b16.  v5:= v4 + v0 @kind int;
  #L509b1a.  v5:= v5 + -1;
  #L509b1e.  if v5 < v4 then goto L509b3e;
  #L509b22.  v6:= `@@okio.Buffer.DIGITS` @type ^`byte`[] @kind object;
  #L509b26.  v7:= 15L;
  #L509b2a.  v7:= v7 ^& v10 @kind long;
  #L509b2c.  v8:= (`int`) v7 @kind l2i;
  #L509b2e.  v6:= v6[v8] @kind byte;
  #L509b32.  v3[v5]:= v6 @kind byte;
  #L509b36.  v10:= v10 ^>> v1 @kind long;
  #L509b38.  v5:= v5 + -1;
  #L509b3c.  goto L509b1e;
  #L509b3e.  v10:= v2.`okio.Segment.c` @type ^`int`;
  #L509b42.  v10:= v10 + v0 @kind int;
  #L509b44.  v2.`okio.Segment.c` @type ^`int` := v10;
  #L509b48.  v10:= v9.`okio.Buffer.b` @type ^`long` @kind wide;
  #L509b4c.  v0:= (`long`) v0 @kind i2l;
  #L509b4e.  v10:= v10 + v0 @kind long;
  #L509b50.  v9.`okio.Buffer.b` @type ^`long` := v10 @kind wide;
  #L509b54.  return v9 @kind object;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50a4b4.  call temp:= `writeHexadecimalUnsignedLong`(v0, v1) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L50a4ba.  v1:= temp @kind object;
  #L50a4bc.  return v1 @kind object;
}
procedure `okio.Buffer` `writeInt`(`okio.Buffer` v5 @kind this, `int` v6 ) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L509b68.  v0:= 4I;
  #L509b6a.  call temp:= `c`(v5, v0) @signature `Lokio/Buffer;.c:(I)Lokio/Segment;` @kind virtual;
  #L509b70.  v0:= temp @kind object;
  #L509b72.  v1:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L509b76.  v2:= v0.`okio.Segment.c` @type ^`int`;
  #L509b7a.  v3:= v2 + 1;
  #L509b7e.  v4:= v6 ^>> 24;
  #L509b82.  v4:= v4 ^& 255;
  #L509b86.  v4:= (`byte`) v4 @kind i2b;
  #L509b88.  v1[v2]:= v4 @kind byte;
  #L509b8c.  v2:= v3 + 1;
  #L509b90.  v4:= v6 ^>> 16;
  #L509b94.  v4:= v4 ^& 255;
  #L509b98.  v4:= (`byte`) v4 @kind i2b;
  #L509b9a.  v1[v3]:= v4 @kind byte;
  #L509b9e.  v3:= v2 + 1;
  #L509ba2.  v4:= v6 ^>> 8;
  #L509ba6.  v4:= v4 ^& 255;
  #L509baa.  v4:= (`byte`) v4 @kind i2b;
  #L509bac.  v1[v2]:= v4 @kind byte;
  #L509bb0.  v2:= v3 + 1;
  #L509bb4.  v6:= v6 ^& 255;
  #L509bb8.  v6:= (`byte`) v6 @kind i2b;
  #L509bba.  v1[v3]:= v6 @kind byte;
  #L509bbe.  v0.`okio.Segment.c` @type ^`int` := v2;
  #L509bc2.  v0:= v5.`okio.Buffer.b` @type ^`long` @kind wide;
  #L509bc6.  v2:= 4L;
  #L509bca.  v0:= v0 + v2 @kind long;
  #L509bcc.  v5.`okio.Buffer.b` @type ^`long` := v0 @kind wide;
  #L509bd0.  return v5 @kind object;
}
procedure `okio.BufferedSink` `writeInt`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50a4d0.  call temp:= `writeInt`(v0, v1) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L50a4d6.  v1:= temp @kind object;
  #L50a4d8.  return v1 @kind object;
}
procedure `okio.Buffer` `writeIntLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L509be4.  call temp:= `reverseBytesInt`(v1) @signature `Lokio/Util;.reverseBytesInt:(I)I` @kind static;
  #L509bea.  v1:= temp;
  #L509bec.  call temp:= `writeInt`(v0, v1) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L509bf2.  v1:= temp @kind object;
  #L509bf4.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50a4ec.  call temp:= `writeIntLe`(v0, v1) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L50a4f2.  v1:= temp @kind object;
  #L50a4f4.  return v1 @kind object;
}
procedure `okio.Buffer` `writeLong`(`okio.Buffer` v9 @kind this, `long` v10 ) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L509c08.  v0:= 8I;
  #L509c0c.  call temp:= `c`(v9, v0) @signature `Lokio/Buffer;.c:(I)Lokio/Segment;` @kind virtual;
  #L509c12.  v1:= temp @kind object;
  #L509c14.  v2:= v1.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L509c18.  v3:= v1.`okio.Segment.c` @type ^`int`;
  #L509c1c.  v4:= v3 + 1;
  #L509c20.  v5:= 56I;
  #L509c24.  v5:= v10 ^>> v5 @kind long;
  #L509c28.  v7:= 255L;
  #L509c2c.  v5:= v5 ^& v7 @kind long;
  #L509c2e.  v6:= (`int`) v5 @kind l2i;
  #L509c30.  v5:= (`byte`) v6 @kind i2b;
  #L509c32.  v2[v3]:= v5 @kind byte;
  #L509c36.  v3:= v4 + 1;
  #L509c3a.  v5:= 48I;
  #L509c3e.  v5:= v10 ^>> v5 @kind long;
  #L509c42.  v5:= v5 ^& v7 @kind long;
  #L509c44.  v6:= (`int`) v5 @kind l2i;
  #L509c46.  v5:= (`byte`) v6 @kind i2b;
  #L509c48.  v2[v4]:= v5 @kind byte;
  #L509c4c.  v4:= v3 + 1;
  #L509c50.  v5:= 40I;
  #L509c54.  v5:= v10 ^>> v5 @kind long;
  #L509c58.  v5:= v5 ^& v7 @kind long;
  #L509c5a.  v6:= (`int`) v5 @kind l2i;
  #L509c5c.  v5:= (`byte`) v6 @kind i2b;
  #L509c5e.  v2[v3]:= v5 @kind byte;
  #L509c62.  v3:= v4 + 1;
  #L509c66.  v5:= 32I;
  #L509c6a.  v5:= v10 ^>> v5 @kind long;
  #L509c6e.  v5:= v5 ^& v7 @kind long;
  #L509c70.  v6:= (`int`) v5 @kind l2i;
  #L509c72.  v5:= (`byte`) v6 @kind i2b;
  #L509c74.  v2[v4]:= v5 @kind byte;
  #L509c78.  v4:= v3 + 1;
  #L509c7c.  v5:= 24I;
  #L509c80.  v5:= v10 ^>> v5 @kind long;
  #L509c84.  v5:= v5 ^& v7 @kind long;
  #L509c86.  v6:= (`int`) v5 @kind l2i;
  #L509c88.  v5:= (`byte`) v6 @kind i2b;
  #L509c8a.  v2[v3]:= v5 @kind byte;
  #L509c8e.  v3:= v4 + 1;
  #L509c92.  v5:= 16I;
  #L509c96.  v5:= v10 ^>> v5 @kind long;
  #L509c9a.  v5:= v5 ^& v7 @kind long;
  #L509c9c.  v6:= (`int`) v5 @kind l2i;
  #L509c9e.  v5:= (`byte`) v6 @kind i2b;
  #L509ca0.  v2[v4]:= v5 @kind byte;
  #L509ca4.  v4:= v3 + 1;
  #L509ca8.  v5:= v10 ^>> v0 @kind long;
  #L509cac.  v5:= v5 ^& v7 @kind long;
  #L509cae.  v0:= (`int`) v5 @kind l2i;
  #L509cb0.  v0:= (`byte`) v0 @kind i2b;
  #L509cb2.  v2[v3]:= v0 @kind byte;
  #L509cb6.  v0:= v4 + 1;
  #L509cba.  v10:= v10 ^& v7 @kind long;
  #L509cbc.  v11:= (`int`) v10 @kind l2i;
  #L509cbe.  v10:= (`byte`) v11 @kind i2b;
  #L509cc0.  v2[v4]:= v10 @kind byte;
  #L509cc4.  v1.`okio.Segment.c` @type ^`int` := v0;
  #L509cc8.  v10:= v9.`okio.Buffer.b` @type ^`long` @kind wide;
  #L509ccc.  v0:= 8L;
  #L509cd0.  v10:= v10 + v0 @kind long;
  #L509cd2.  v9.`okio.Buffer.b` @type ^`long` := v10 @kind wide;
  #L509cd6.  return v9 @kind object;
}
procedure `okio.BufferedSink` `writeLong`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50a508.  call temp:= `writeLong`(v0, v1) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L50a50e.  v1:= temp @kind object;
  #L50a510.  return v1 @kind object;
}
procedure `okio.Buffer` `writeLongLe`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L509ce8.  call temp:= `reverseBytesLong`(v1) @signature `Lokio/Util;.reverseBytesLong:(J)J` @kind static;
  #L509cee.  v1:= temp @kind wide;
  #L509cf0.  call temp:= `writeLong`(v0, v1) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L509cf6.  v1:= temp @kind object;
  #L509cf8.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50a524.  call temp:= `writeLongLe`(v0, v1) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L50a52a.  v1:= temp @kind object;
  #L50a52c.  return v1 @kind object;
}
procedure `okio.Buffer` `writeShort`(`okio.Buffer` v5 @kind this, `int` v6 ) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L509d0c.  v0:= 2I;
  #L509d0e.  call temp:= `c`(v5, v0) @signature `Lokio/Buffer;.c:(I)Lokio/Segment;` @kind virtual;
  #L509d14.  v0:= temp @kind object;
  #L509d16.  v1:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L509d1a.  v2:= v0.`okio.Segment.c` @type ^`int`;
  #L509d1e.  v3:= v2 + 1;
  #L509d22.  v4:= v6 ^>> 8;
  #L509d26.  v4:= v4 ^& 255;
  #L509d2a.  v4:= (`byte`) v4 @kind i2b;
  #L509d2c.  v1[v2]:= v4 @kind byte;
  #L509d30.  v2:= v3 + 1;
  #L509d34.  v6:= v6 ^& 255;
  #L509d38.  v6:= (`byte`) v6 @kind i2b;
  #L509d3a.  v1[v3]:= v6 @kind byte;
  #L509d3e.  v0.`okio.Segment.c` @type ^`int` := v2;
  #L509d42.  v0:= v5.`okio.Buffer.b` @type ^`long` @kind wide;
  #L509d46.  v2:= 2L;
  #L509d4a.  v0:= v0 + v2 @kind long;
  #L509d4c.  v5.`okio.Buffer.b` @type ^`long` := v0 @kind wide;
  #L509d50.  return v5 @kind object;
}
procedure `okio.BufferedSink` `writeShort`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50a540.  call temp:= `writeShort`(v0, v1) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L50a546.  v1:= temp @kind object;
  #L50a548.  return v1 @kind object;
}
procedure `okio.Buffer` `writeShortLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L509d64.  v1:= (`short`) v1 @kind i2s;
  #L509d66.  call temp:= `reverseBytesShort`(v1) @signature `Lokio/Util;.reverseBytesShort:(S)S` @kind static;
  #L509d6c.  v1:= temp;
  #L509d6e.  call temp:= `writeShort`(v0, v1) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L509d74.  v1:= temp @kind object;
  #L509d76.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50a55c.  call temp:= `writeShortLe`(v0, v1) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L50a562.  v1:= temp @kind object;
  #L50a564.  return v1 @kind object;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.nio.charset.Charset` v5 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L509d88.  if v2 == 0 then goto L509e9e;
  #L509d8c.  if v3 < 0 then goto L509e70;
  #L509d90.  if v4 < v3 then goto L509e32;
  #L509d94.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L509d9a.  v0:= temp;
  #L509d9c.  if v4 > v0 then goto L509dec;
  #L509da0.  if v5 == 0 then goto L509ddc;
  #L509da4.  v0:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L509da8.  call temp:= `equals`(v5, v0) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L509dae.  v0:= temp;
  #L509db0.  if v0 == 0 then goto L509dbe;
  #L509db4.  call temp:= `writeUtf8`(v1, v2, v3, v4) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L509dba.  v2:= temp @kind object;
  #L509dbc.  return v2 @kind object;
  #L509dbe.  call temp:= `substring`(v2, v3, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L509dc4.  v2:= temp @kind object;
  #L509dc6.  call temp:= `getBytes`(v2, v5) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L509dcc.  v2:= temp @kind object;
  #L509dce.  v3:= 0I;
  #L509dd0.  v4:= length @variable v2;
  #L509dd2.  call temp:= `write`(v1, v2, v3, v4) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L509dd8.  v2:= temp @kind object;
  #L509dda.  return v2 @kind object;
  #L509ddc.  v2:= new `java.lang.IllegalArgumentException`;
  #L509de0.  v3:= "charset == null" @kind object;
  #L509de4.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L509dea.  throw v2;
  #L509dec.  v3:= new `java.lang.IllegalArgumentException`;
  #L509df0.  v5:= new `java.lang.StringBuilder`;
  #L509df4.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L509dfa.  v0:= "endIndex > string.length: " @kind object;
  #L509dfe.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509e04.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L509e0a.  v4:= " > " @kind object;
  #L509e0e.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509e14.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L509e1a.  v2:= temp;
  #L509e1c.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L509e22.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L509e28.  v2:= temp @kind object;
  #L509e2a.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L509e30.  throw v3;
  #L509e32.  v2:= new `java.lang.IllegalArgumentException`;
  #L509e36.  v5:= new `java.lang.StringBuilder`;
  #L509e3a.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L509e40.  v0:= "endIndex < beginIndex: " @kind object;
  #L509e44.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509e4a.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L509e50.  v4:= " < " @kind object;
  #L509e54.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509e5a.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L509e60.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L509e66.  v3:= temp @kind object;
  #L509e68.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L509e6e.  throw v2;
  #L509e70.  v2:= new `java.lang.IllegalAccessError`;
  #L509e74.  v4:= new `java.lang.StringBuilder`;
  #L509e78.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L509e7e.  v5:= "beginIndex < 0: " @kind object;
  #L509e82.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L509e88.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L509e8e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L509e94.  v3:= temp @kind object;
  #L509e96.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalAccessError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L509e9c.  throw v2;
  #L509e9e.  v2:= new `java.lang.IllegalArgumentException`;
  #L509ea2.  v3:= "string == null" @kind object;
  #L509ea6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L509eac.  throw v2;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object, `java.nio.charset.Charset` v4 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L509ec0.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L509ec6.  v0:= temp;
  #L509ec8.  v1:= 0I;
  #L509eca.  call temp:= `writeString`(v2, v3, v1, v0, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L509ed0.  v3:= temp @kind object;
  #L509ed2.  return v3 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `int` v3 , `java.nio.charset.Charset` v4 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50a578.  call temp:= `writeString`(v0, v1, v2, v3, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L50a57e.  v1:= temp @kind object;
  #L50a580.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object, `java.nio.charset.Charset` v2 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50a594.  call temp:= `writeString`(v0, v1, v2) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L50a59a.  v1:= temp @kind object;
  #L50a59c.  return v1 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v2 @kind this, `java.io.OutputStream` v3 @kind object) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L509ee4.  v0:= v2.`okio.Buffer.b` @type ^`long` @kind wide;
  #L509ee8.  call temp:= `writeTo`(v2, v3, v0) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @kind virtual;
  #L509eee.  v3:= temp @kind object;
  #L509ef0.  return v3 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v7 @kind this, `java.io.OutputStream` v8 @kind object, `long` v9 ) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L509f04.  if v8 == 0 then goto L509f84;
  #L509f08.  v0:= v7.`okio.Buffer.b` @type ^`long` @kind wide;
  #L509f0c.  v2:= 0L;
  #L509f10.  v4:= v9 @kind wide;
  #L509f12.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L509f18.  v0:= v7.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L509f1c.  v1:= 0L;
  #L509f20.  v3:= lcmp(v9, v1);
  #L509f24.  if v3 <= 0 then goto L509f82;
  #L509f28.  v1:= v0.`okio.Segment.c` @type ^`int`;
  #L509f2c.  v2:= v0.`okio.Segment.b` @type ^`int`;
  #L509f30.  v1:= v1 - v2 @kind int;
  #L509f32.  v1:= (`long`) v1 @kind i2l;
  #L509f34.  call temp:= `min`(v9, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L509f3a.  v1:= temp @kind wide;
  #L509f3c.  v2:= (`int`) v1 @kind l2i;
  #L509f3e.  v1:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L509f42.  v3:= v0.`okio.Segment.b` @type ^`int`;
  #L509f46.  call `write`(v8, v1, v3, v2) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L509f4c.  v1:= v0.`okio.Segment.b` @type ^`int`;
  #L509f50.  v1:= v1 + v2 @kind int;
  #L509f52.  v0.`okio.Segment.b` @type ^`int` := v1;
  #L509f56.  v3:= v7.`okio.Buffer.b` @type ^`long` @kind wide;
  #L509f5a.  v5:= (`long`) v2 @kind i2l;
  #L509f5c.  v3:= v3 - v5 @kind long;
  #L509f5e.  v7.`okio.Buffer.b` @type ^`long` := v3 @kind wide;
  #L509f62.  v9:= v9 - v5 @kind long;
  #L509f64.  v2:= v0.`okio.Segment.c` @type ^`int`;
  #L509f68.  if v1 != v2 then goto L509f1c;
  #L509f6c.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L509f72.  v1:= temp @kind object;
  #L509f74.  v7.`okio.Buffer.a` @type ^`okio.Segment` := v1 @kind object;
  #L509f78.  call `a`(v0) @signature `Lokio/SegmentPool;.a:(Lokio/Segment;)V` @kind static;
  #L509f7e.  v0:= v1 @kind object;
  #L509f80.  goto L509f1c;
  #L509f82.  return v7 @kind object;
  #L509f84.  v8:= new `java.lang.IllegalArgumentException`;
  #L509f88.  v9:= "out == null" @kind object;
  #L509f8c.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L509f92.  goto L509f96;
  #L509f94.  throw v8;
  #L509f96.  goto L509f94;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L509fa8.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L509fae.  v0:= temp;
  #L509fb0.  v1:= 0I;
  #L509fb2.  call temp:= `writeUtf8`(v2, v3, v1, v0) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L509fb8.  v3:= temp @kind object;
  #L509fba.  return v3 @kind object;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v7 @kind this, `java.lang.String` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L509fcc.  if v8 == 0 then goto L50a204;
  #L509fd0.  if v9 < 0 then goto L50a1d6;
  #L509fd4.  if v10 < v9 then goto L50a198;
  #L509fd8.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L509fde.  v0:= temp;
  #L509fe0.  if v10 > v0 then goto L50a152;
  #L509fe4.  if v9 >= v10 then goto L50a150;
  #L509fe8.  call temp:= `charAt`(v8, v9) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L509fee.  v0:= temp;
  #L509ff0.  v1:= 128I;
  #L509ff4.  if v0 >= v1 then goto L50a064;
  #L509ff8.  v2:= 1I;
  #L509ffa.  call temp:= `c`(v7, v2) @signature `Lokio/Buffer;.c:(I)Lokio/Segment;` @kind virtual;
  #L50a000.  v2:= temp @kind object;
  #L50a002.  v3:= v2.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L50a006.  v4:= v2.`okio.Segment.c` @type ^`int`;
  #L50a00a.  v4:= v4 - v9 @kind int;
  #L50a00c.  v5:= v4 - 8192;
  #L50a010.  call temp:= `min`(v10, v5) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L50a016.  v5:= temp;
  #L50a018.  v6:= v9 + 1;
  #L50a01c.  v9:= v9 + v4 @kind int;
  #L50a01e.  v0:= (`byte`) v0 @kind i2b;
  #L50a020.  v3[v9]:= v0 @kind byte;
  #L50a024.  if v6 >= v5 then goto L50a046;
  #L50a028.  call temp:= `charAt`(v8, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L50a02e.  v9:= temp;
  #L50a030.  if v9 < v1 then goto L50a036;
  #L50a034.  goto L50a046;
  #L50a036.  v0:= v6 + 1;
  #L50a03a.  v6:= v6 + v4 @kind int;
  #L50a03c.  v9:= (`byte`) v9 @kind i2b;
  #L50a03e.  v3[v6]:= v9 @kind byte;
  #L50a042.  v6:= v0;
  #L50a044.  goto L50a024;
  #L50a046.  v4:= v4 + v6 @kind int;
  #L50a048.  v9:= v2.`okio.Segment.c` @type ^`int`;
  #L50a04c.  v4:= v4 - v9 @kind int;
  #L50a04e.  v9:= v9 + v4 @kind int;
  #L50a050.  v2.`okio.Segment.c` @type ^`int` := v9;
  #L50a054.  v0:= v7.`okio.Buffer.b` @type ^`long` @kind wide;
  #L50a058.  v2:= (`long`) v4 @kind i2l;
  #L50a05a.  v0:= v0 + v2 @kind long;
  #L50a05c.  v7.`okio.Buffer.b` @type ^`long` := v0 @kind wide;
  #L50a060.  v9:= v6;
  #L50a062.  goto L509fe4;
  #L50a064.  v2:= 2048I;
  #L50a068.  if v0 >= v2 then goto L50a08c;
  #L50a06c.  v2:= v0 ^> 6;
  #L50a070.  v2:= v2 ^| 192;
  #L50a074.  call temp:= `writeByte`(v7, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L50a07a.  v0:= v0 ^& 63;
  #L50a07e.  v0:= v0 ^| v1 @kind int;
  #L50a080.  call temp:= `writeByte`(v7, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L50a086.  v9:= v9 + 1;
  #L50a08a.  goto L509fe4;
  #L50a08c.  v2:= 55296I;
  #L50a092.  v3:= 63I;
  #L50a096.  if v0 < v2 then goto L50a138;
  #L50a09a.  v2:= 57343I;
  #L50a0a0.  if v0 <= v2 then goto L50a0a6;
  #L50a0a4.  goto L50a138;
  #L50a0a6.  v4:= v9 + 1;
  #L50a0aa.  if v4 >= v10 then goto L50a0b8;
  #L50a0ae.  call temp:= `charAt`(v8, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L50a0b4.  v5:= temp;
  #L50a0b6.  goto L50a0ba;
  #L50a0b8.  v5:= 0I;
  #L50a0ba.  v6:= 56319I;
  #L50a0c0.  if v0 > v6 then goto L50a12c;
  #L50a0c4.  v6:= 56320I;
  #L50a0ca.  if v5 < v6 then goto L50a12c;
  #L50a0ce.  if v5 <= v2 then goto L50a0d4;
  #L50a0d2.  goto L50a12c;
  #L50a0d4.  v2:= 65536I;
  #L50a0d8.  v4:= -55297I;
  #L50a0de.  v0:= v0 ^& v4 @kind int;
  #L50a0e0.  v0:= v0 ^< 10;
  #L50a0e4.  v4:= -56321I;
  #L50a0ea.  v4:= v4 ^& v5 @kind int;
  #L50a0ec.  v0:= v0 ^| v4 @kind int;
  #L50a0ee.  v0:= v0 + v2 @kind int;
  #L50a0f0.  v2:= v0 ^> 18;
  #L50a0f4.  v2:= v2 ^| 240;
  #L50a0f8.  call temp:= `writeByte`(v7, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L50a0fe.  v2:= v0 ^> 12;
  #L50a102.  v2:= v2 ^& v3 @kind int;
  #L50a104.  v2:= v2 ^| v1 @kind int;
  #L50a106.  call temp:= `writeByte`(v7, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L50a10c.  v2:= v0 ^> 6;
  #L50a110.  v2:= v2 ^& v3 @kind int;
  #L50a112.  v2:= v2 ^| v1 @kind int;
  #L50a114.  call temp:= `writeByte`(v7, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L50a11a.  v0:= v0 ^& v3 @kind int;
  #L50a11c.  v0:= v0 ^| v1 @kind int;
  #L50a11e.  call temp:= `writeByte`(v7, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L50a124.  v9:= v9 + 2;
  #L50a128.  goto L509fe4;
  #L50a12c.  call temp:= `writeByte`(v7, v3) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L50a132.  v9:= v4;
  #L50a134.  goto L509fe4;
  #L50a138.  v2:= v0 ^> 12;
  #L50a13c.  v2:= v2 ^| 224;
  #L50a140.  call temp:= `writeByte`(v7, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L50a146.  v2:= v0 ^> 6;
  #L50a14a.  v2:= v2 ^& v3 @kind int;
  #L50a14c.  v2:= v2 ^| v1 @kind int;
  #L50a14e.  goto L50a074;
  #L50a150.  return v7 @kind object;
  #L50a152.  v9:= new `java.lang.IllegalArgumentException`;
  #L50a156.  v0:= new `java.lang.StringBuilder`;
  #L50a15a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50a160.  v1:= "endIndex > string.length: " @kind object;
  #L50a164.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a16a.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a170.  v10:= " > " @kind object;
  #L50a174.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a17a.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L50a180.  v8:= temp;
  #L50a182.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a188.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50a18e.  v8:= temp @kind object;
  #L50a190.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50a196.  throw v9;
  #L50a198.  v8:= new `java.lang.IllegalArgumentException`;
  #L50a19c.  v0:= new `java.lang.StringBuilder`;
  #L50a1a0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50a1a6.  v1:= "endIndex < beginIndex: " @kind object;
  #L50a1aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a1b0.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a1b6.  v10:= " < " @kind object;
  #L50a1ba.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a1c0.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a1c6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50a1cc.  v9:= temp @kind object;
  #L50a1ce.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50a1d4.  throw v8;
  #L50a1d6.  v8:= new `java.lang.IllegalArgumentException`;
  #L50a1da.  v10:= new `java.lang.StringBuilder`;
  #L50a1de.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50a1e4.  v0:= "beginIndex < 0: " @kind object;
  #L50a1e8.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a1ee.  call temp:= `append`(v10, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a1f4.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50a1fa.  v9:= temp @kind object;
  #L50a1fc.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50a202.  throw v8;
  #L50a204.  v8:= new `java.lang.IllegalArgumentException`;
  #L50a208.  v9:= "string == null" @kind object;
  #L50a20c.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50a212.  goto L50a216;
  #L50a214.  throw v8;
  #L50a216.  goto L50a214;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50a5b0.  call temp:= `writeUtf8`(v0, v1) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L50a5b6.  v1:= temp @kind object;
  #L50a5b8.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50a5cc.  call temp:= `writeUtf8`(v0, v1, v2, v3) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L50a5d2.  v1:= temp @kind object;
  #L50a5d4.  return v1 @kind object;
}
procedure `okio.Buffer` `writeUtf8CodePoint`(`okio.Buffer` v3 @kind this, `int` v4 ) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50a228.  v0:= 128I;
  #L50a22c.  if v4 >= v0 then goto L50a238;
  #L50a230.  call temp:= `writeByte`(v3, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L50a236.  goto L50a2b6;
  #L50a238.  v1:= 2048I;
  #L50a23c.  v2:= 63I;
  #L50a240.  if v4 >= v1 then goto L50a258;
  #L50a244.  v1:= v4 ^> 6;
  #L50a248.  v1:= v1 ^| 192;
  #L50a24c.  call temp:= `writeByte`(v3, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L50a252.  v4:= v4 ^& v2 @kind int;
  #L50a254.  v4:= v4 ^| v0 @kind int;
  #L50a256.  goto L50a230;
  #L50a258.  v1:= 65536I;
  #L50a25c.  if v4 >= v1 then goto L50a286;
  #L50a260.  v1:= 55296I;
  #L50a266.  if v4 < v1 then goto L50a27c;
  #L50a26a.  v1:= 57343I;
  #L50a270.  if v4 > v1 then goto L50a27c;
  #L50a274.  call temp:= `writeByte`(v3, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L50a27a.  goto L50a2b6;
  #L50a27c.  v1:= v4 ^> 12;
  #L50a280.  v1:= v1 ^| 224;
  #L50a284.  goto L50a2a6;
  #L50a286.  v1:= 1114111I;
  #L50a28c.  if v4 > v1 then goto L50a2b8;
  #L50a290.  v1:= v4 ^> 18;
  #L50a294.  v1:= v1 ^| 240;
  #L50a298.  call temp:= `writeByte`(v3, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L50a29e.  v1:= v4 ^> 12;
  #L50a2a2.  v1:= v1 ^& v2 @kind int;
  #L50a2a4.  v1:= v1 ^| v0 @kind int;
  #L50a2a6.  call temp:= `writeByte`(v3, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L50a2ac.  v1:= v4 ^> 6;
  #L50a2b0.  v1:= v1 ^& v2 @kind int;
  #L50a2b2.  v1:= v1 ^| v0 @kind int;
  #L50a2b4.  goto L50a24c;
  #L50a2b6.  return v3 @kind object;
  #L50a2b8.  v0:= new `java.lang.IllegalArgumentException`;
  #L50a2bc.  v1:= new `java.lang.StringBuilder`;
  #L50a2c0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50a2c6.  v2:= "Unexpected code point: " @kind object;
  #L50a2ca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a2d0.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L50a2d6.  v4:= temp @kind object;
  #L50a2d8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50a2de.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50a2e4.  v4:= temp @kind object;
  #L50a2e6.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50a2ec.  goto L50a2f0;
  #L50a2ee.  throw v0;
  #L50a2f0.  goto L50a2ee;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50a5e8.  call temp:= `writeUtf8CodePoint`(v0, v1) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L50a5ee.  v1:= temp @kind object;
  #L50a5f0.  return v1 @kind object;
}
