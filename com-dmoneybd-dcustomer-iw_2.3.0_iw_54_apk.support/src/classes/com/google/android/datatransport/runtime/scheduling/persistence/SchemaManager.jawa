record `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` @kind class @AccessFlag FINAL extends `android.database.sqlite.SQLiteOpenHelper` @kind class {
  `boolean` `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.configured` @AccessFlag PRIVATE;
  `int` `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.schemaVersion` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.CREATE_CONTEXTS_SQL_V1` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.CREATE_CONTEXT_BACKEND_PRIORITY_INDEX_V1` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.CREATE_EVENTS_SQL_V1` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.CREATE_EVENT_BACKEND_INDEX_V1` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.CREATE_EVENT_METADATA_SQL_V1` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.CREATE_PAYLOADS_TABLE_V4` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.DROP_CONTEXTS_SQL` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.DROP_EVENTS_SQL` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.DROP_EVENT_METADATA_SQL` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.DROP_PAYLOADS_SQL` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.INCREMENTAL_MIGRATIONS` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATE_TO_V1` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATE_TO_V2` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATE_TO_V3` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATE_TO_V4` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.a` @AccessFlag STATIC;
procedure `void` `<clinit>`() @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3b204c.  call temp:= `lambdaFactory$`() @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager$$Lambda$1;.lambdaFactory$:()Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager$Migration;` @kind static;
  #L3b2052.  v0:= temp @kind object;
  #L3b2054.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATE_TO_V1` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v0 @kind object;
  #L3b2058.  call temp:= `lambdaFactory$`() @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager$$Lambda$2;.lambdaFactory$:()Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager$Migration;` @kind static;
  #L3b205e.  v1:= temp @kind object;
  #L3b2060.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATE_TO_V2` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v1 @kind object;
  #L3b2064.  call temp:= `lambdaFactory$`() @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager$$Lambda$3;.lambdaFactory$:()Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager$Migration;` @kind static;
  #L3b206a.  v2:= temp @kind object;
  #L3b206c.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATE_TO_V3` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v2 @kind object;
  #L3b2070.  call temp:= `lambdaFactory$`() @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager$$Lambda$4;.lambdaFactory$:()Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager$Migration;` @kind static;
  #L3b2076.  v3:= temp @kind object;
  #L3b2078.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATE_TO_V4` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v3 @kind object;
  #L3b207c.  v4:= 4I;
  #L3b207e.  v4:= new `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration`[v4];
  #L3b2082.  v5:= 0I;
  #L3b2084.  v4[v5]:= v0 @kind object;
  #L3b2088.  v0:= 1I;
  #L3b208a.  v4[v0]:= v1 @kind object;
  #L3b208e.  v0:= 2I;
  #L3b2090.  v4[v0]:= v2 @kind object;
  #L3b2094.  v0:= 3I;
  #L3b2096.  v4[v0]:= v3 @kind object;
  #L3b209a.  call temp:= `asList`(v4) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L3b20a0.  v0:= temp @kind object;
  #L3b20a2.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.INCREMENTAL_MIGRATIONS` @type ^`java.util.List` := v0 @kind object;
  #L3b20a6.  return @kind void;
}
procedure `void` `<init>`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v1 @kind this, `android.content.Context` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.<init>:(Landroid/content/Context;Ljava/lang/String;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3b20b8.  v0:= 0I;
  #L3b20ba.  call `<init>`(v1, v2, v3, v0, v4) @signature `Landroid/database/sqlite/SQLiteOpenHelper;.<init>:(Landroid/content/Context;Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;I)V` @kind direct;
  #L3b20c0.  v2:= 0I;
  #L3b20c2.  v1.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.configured` @type ^`boolean` := v2 @kind boolean;
  #L3b20c6.  v1.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.schemaVersion` @type ^`int` := v4;
  #L3b20ca.  return @kind void;
}
procedure `void` `a`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.a:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L3b20fc.  v0:= "CREATE TABLE events (_id INTEGER PRIMARY KEY, context_id INTEGER NOT NULL, transport_name TEXT NOT NULL, timestamp_ms INTEGER NOT NULL, uptime_ms INTEGER NOT NULL, payload BLOB NOT NULL, code INTEGER, num_attempts INTEGER NOT NULL,FOREIGN KEY (context_id) REFERENCES transport_contexts(_id) ON DELETE CASCADE)" @kind object;
  #L3b2100.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L3b2106.  v0:= "CREATE TABLE event_metadata (_id INTEGER PRIMARY KEY, event_id INTEGER NOT NULL, name TEXT NOT NULL, value TEXT NOT NULL,FOREIGN KEY (event_id) REFERENCES events(_id) ON DELETE CASCADE)" @kind object;
  #L3b210a.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L3b2110.  v0:= "CREATE TABLE transport_contexts (_id INTEGER PRIMARY KEY, backend_name TEXT NOT NULL, priority INTEGER NOT NULL, next_request_ms INTEGER NOT NULL)" @kind object;
  #L3b2114.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L3b211a.  v0:= "CREATE INDEX events_backend_id on events(context_id)" @kind object;
  #L3b211e.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L3b2124.  v0:= "CREATE UNIQUE INDEX contexts_backend_priority on transport_contexts(backend_name, priority)" @kind object;
  #L3b2128.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L3b212e.  return @kind void;
}
procedure `void` `b`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.b:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L3b2140.  v0:= "ALTER TABLE transport_contexts ADD COLUMN extras BLOB" @kind object;
  #L3b2144.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L3b214a.  v0:= "CREATE UNIQUE INDEX contexts_backend_priority_extras on transport_contexts(backend_name, priority, extras)" @kind object;
  #L3b214e.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L3b2154.  v0:= "DROP INDEX contexts_backend_priority" @kind object;
  #L3b2158.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L3b215e.  return @kind void;
}
procedure `void` `c`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.c:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L3b2170.  v0:= "ALTER TABLE events ADD COLUMN payload_encoding TEXT" @kind object;
  #L3b2174.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L3b217a.  return @kind void;
}
procedure `void` `d`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.d:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L3b218c.  v0:= "ALTER TABLE events ADD COLUMN inline BOOLEAN NOT NULL DEFAULT 1" @kind object;
  #L3b2190.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L3b2196.  v0:= "DROP TABLE IF EXISTS event_payloads" @kind object;
  #L3b219a.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L3b21a0.  v0:= "CREATE TABLE event_payloads (sequence_num INTEGER NOT NULL, event_id INTEGER NOT NULL, bytes BLOB NOT NULL,FOREIGN KEY (event_id) REFERENCES events(_id) ON DELETE CASCADE,PRIMARY KEY (sequence_num, event_id))" @kind object;
  #L3b21a4.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L3b21aa.  return @kind void;
}
procedure `void` `ensureConfigured`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v1 @kind this, `android.database.sqlite.SQLiteDatabase` v2 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.ensureConfigured:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3b20dc.  v0:= v1.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.configured` @type ^`boolean` @kind boolean;
  #L3b20e0.  if v0 != 0 then goto L3b20ea;
  #L3b20e4.  call `onConfigure`(v1, v2) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onConfigure:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind virtual;
  #L3b20ea.  return @kind void;
}
procedure `void` `onCreate`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v1 @kind this, `android.database.sqlite.SQLiteDatabase` v2 @kind object, `int` v3 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onCreate:(Landroid/database/sqlite/SQLiteDatabase;I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3b221c.  call `ensureConfigured`(v1, v2) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.ensureConfigured:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind direct;
  #L3b2222.  v0:= 0I;
  #L3b2224.  call `upgrade`(v1, v2, v0, v3) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.upgrade:(Landroid/database/sqlite/SQLiteDatabase;II)V` @kind direct;
  #L3b222a.  return @kind void;
}
procedure `void` `upgrade`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v3 @kind this, `android.database.sqlite.SQLiteDatabase` v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.upgrade:(Landroid/database/sqlite/SQLiteDatabase;II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3b22b4.  v0:= `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.INCREMENTAL_MIGRATIONS` @type ^`java.util.List` @kind object;
  #L3b22b8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3b22be.  v1:= temp;
  #L3b22c0.  if v6 > v1 then goto L3b22e6;
  #L3b22c4.  if v5 >= v6 then goto L3b22e4;
  #L3b22c8.  v0:= `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.INCREMENTAL_MIGRATIONS` @type ^`java.util.List` @kind object;
  #L3b22cc.  call temp:= `get`(v0, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3b22d2.  v0:= temp @kind object;
  #L3b22d4.  v0:= (`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration`) v0 @kind object;
  #L3b22d8.  call `upgrade`(v0, v4) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager$Migration;.upgrade:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind interface;
  #L3b22de.  v5:= v5 + 1;
  #L3b22e2.  goto L3b22c4;
  #L3b22e4.  return @kind void;
  #L3b22e6.  v4:= new `java.lang.IllegalArgumentException`;
  #L3b22ea.  v1:= new `java.lang.StringBuilder`;
  #L3b22ee.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b22f4.  v2:= "Migration from " @kind object;
  #L3b22f8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b22fe.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b2304.  v5:= " to " @kind object;
  #L3b2308.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b230e.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b2314.  v5:= " was requested, but cannot be performed. Only " @kind object;
  #L3b2318.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b231e.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3b2324.  v5:= temp;
  #L3b2326.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b232c.  v5:= " migrations are provided" @kind object;
  #L3b2330.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b2336.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b233c.  v5:= temp @kind object;
  #L3b233e.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b2344.  goto L3b2348;
  #L3b2346.  throw v4;
  #L3b2348.  goto L3b2346;
}
procedure `void` `onConfigure`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v3 @kind this, `android.database.sqlite.SQLiteDatabase` v4 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onConfigure:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b21bc.  v0:= 1I;
  #L3b21be.  v3.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.configured` @type ^`boolean` := v0 @kind boolean;
  #L3b21c2.  v1:= 0I;
  #L3b21c4.  v1:= new `java.lang.String`[v1];
  #L3b21c8.  v2:= "PRAGMA busy_timeout=0;" @kind object;
  #L3b21cc.  call temp:= `rawQuery`(v4, v2, v1) @signature `Landroid/database/sqlite/SQLiteDatabase;.rawQuery:(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;` @kind virtual;
  #L3b21d2.  v1:= temp @kind object;
  #L3b21d4.  call `close`(v1) @signature `Landroid/database/Cursor;.close:()V` @kind interface;
  #L3b21da.  v1:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L3b21de.  v2:= 16I;
  #L3b21e2.  if v1 < v2 then goto L3b21ec;
  #L3b21e6.  call `setForeignKeyConstraintsEnabled`(v4, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.setForeignKeyConstraintsEnabled:(Z)V` @kind virtual;
  #L3b21ec.  return @kind void;
}
procedure `void` `onCreate`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v1 @kind this, `android.database.sqlite.SQLiteDatabase` v2 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onCreate:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2200.  v0:= v1.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.schemaVersion` @type ^`int`;
  #L3b2204.  call `onCreate`(v1, v2, v0) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onCreate:(Landroid/database/sqlite/SQLiteDatabase;I)V` @kind direct;
  #L3b220a.  return @kind void;
}
procedure `void` `onDowngrade`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v0 @kind this, `android.database.sqlite.SQLiteDatabase` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onDowngrade:(Landroid/database/sqlite/SQLiteDatabase;II)V` @AccessFlag PUBLIC {
    temp;

  #L3b223c.  v2:= "DROP TABLE events" @kind object;
  #L3b2240.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L3b2246.  v2:= "DROP TABLE event_metadata" @kind object;
  #L3b224a.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L3b2250.  v2:= "DROP TABLE transport_contexts" @kind object;
  #L3b2254.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L3b225a.  v2:= "DROP TABLE IF EXISTS event_payloads" @kind object;
  #L3b225e.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L3b2264.  call `onCreate`(v0, v1, v3) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onCreate:(Landroid/database/sqlite/SQLiteDatabase;I)V` @kind direct;
  #L3b226a.  return @kind void;
}
procedure `void` `onOpen`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v0 @kind this, `android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onOpen:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC {
    temp;

  #L3b227c.  call `ensureConfigured`(v0, v1) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.ensureConfigured:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind direct;
  #L3b2282.  return @kind void;
}
procedure `void` `onUpgrade`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v0 @kind this, `android.database.sqlite.SQLiteDatabase` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onUpgrade:(Landroid/database/sqlite/SQLiteDatabase;II)V` @AccessFlag PUBLIC {
    temp;

  #L3b2294.  call `ensureConfigured`(v0, v1) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.ensureConfigured:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind direct;
  #L3b229a.  call `upgrade`(v0, v1, v2, v3) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.upgrade:(Landroid/database/sqlite/SQLiteDatabase;II)V` @kind direct;
  #L3b22a0.  return @kind void;
}
