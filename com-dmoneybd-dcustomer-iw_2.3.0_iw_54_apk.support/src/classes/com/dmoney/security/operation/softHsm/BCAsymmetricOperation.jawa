record `com.dmoney.security.operation.softHsm.BCAsymmetricOperation` @kind class @AccessFlag PUBLIC extends `com.dmoney.security.operation.interfaces.IAsymmetricOperation` @kind interface {
}
procedure `void` `<init>`(`com.dmoney.security.operation.softHsm.BCAsymmetricOperation` v0 @kind this) @signature `Lcom/dmoney/security/operation/softHsm/BCAsymmetricOperation;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2c9198.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c919e.  return @kind void;
}
procedure `byte`[] `DoAsymetricDryptography`(`com.dmoney.security.operation.softHsm.BCAsymmetricOperation` v2 @kind this, `byte`[] v3 @kind object, `java.security.Key` v4 @kind object, `boolean` v5 ) @signature `Lcom/dmoney/security/operation/softHsm/BCAsymmetricOperation;.DoAsymetricDryptography:([BLjava/security/Key;Z)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2c9094.  call temp:= `getInstance`() @signature `Lcom/dmoney/security/config/Configuration;.getInstance:()Lcom/dmoney/security/config/Configuration;` @kind static;
  #L2c909a.  v0:= temp @kind object;
  #L2c909c.  call temp:= `getAsyMetricMechanism`(v0) @signature `Lcom/dmoney/security/config/Configuration;.getAsyMetricMechanism:()Ljava/lang/String;` @kind virtual;
  #L2c90a2.  v0:= temp @kind object;
  #L2c90a4.  v1:= `@@com.dmoney.security.config.Configuration.PROVIDER` @type ^`java.lang.String` @kind object;
  #L2c90a8.  call temp:= `getInstance`(v0, v1) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L2c90ae.  v0:= temp @kind object;
  #L2c90b0.  if v5 == 0 then goto L2c90b8;
  #L2c90b4.  v5:= 1I;
  #L2c90b6.  goto L2c90ba;
  #L2c90b8.  v5:= 2I;
  #L2c90ba.  call `init`(v0, v5, v4) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L2c90c0.  call temp:= `doFinal`(v0, v3) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L2c90c6.  v3:= temp @kind object;
  #L2c90c8.  return v3 @kind object;
}
procedure `byte`[] `Decrypt`(`com.dmoney.security.operation.softHsm.BCAsymmetricOperation` v2 @kind this, `byte`[] v3 @kind object, `byte`[] v4 @kind object) @signature `Lcom/dmoney/security/operation/softHsm/BCAsymmetricOperation;.Decrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c9048.  call temp:= `getInstance`() @signature `Lcom/dmoney/security/config/Configuration;.getInstance:()Lcom/dmoney/security/config/Configuration;` @kind static;
  #L2c904e.  v0:= temp @kind object;
  #L2c9050.  call temp:= `getAsymetricKeyAlgo`(v0) @signature `Lcom/dmoney/security/config/Configuration;.getAsymetricKeyAlgo:()Ljava/lang/String;` @kind virtual;
  #L2c9056.  v0:= temp @kind object;
  #L2c9058.  v1:= `@@com.dmoney.security.config.Configuration.PROVIDER` @type ^`java.lang.String` @kind object;
  #L2c905c.  call temp:= `getInstance`(v0, v1) @signature `Ljava/security/KeyFactory;.getInstance:(Ljava/lang/String;Ljava/lang/String;)Ljava/security/KeyFactory;` @kind static;
  #L2c9062.  v0:= temp @kind object;
  #L2c9064.  v1:= new `java.security.spec.PKCS8EncodedKeySpec`;
  #L2c9068.  call `<init>`(v1, v4) @signature `Ljava/security/spec/PKCS8EncodedKeySpec;.<init>:([B)V` @kind direct;
  #L2c906e.  call temp:= `generatePrivate`(v0, v1) @signature `Ljava/security/KeyFactory;.generatePrivate:(Ljava/security/spec/KeySpec;)Ljava/security/PrivateKey;` @kind virtual;
  #L2c9074.  v4:= temp @kind object;
  #L2c9076.  v0:= 0I;
  #L2c9078.  call temp:= `DoAsymetricDryptography`(v2, v3, v4, v0) @signature `Lcom/dmoney/security/operation/softHsm/BCAsymmetricOperation;.DoAsymetricDryptography:([BLjava/security/Key;Z)[B` @kind direct;
  #L2c907e.  v3:= temp @kind object;
  #L2c9080.  return v3 @kind object;
}
procedure `byte`[] `Encrypt`(`com.dmoney.security.operation.softHsm.BCAsymmetricOperation` v2 @kind this, `byte`[] v3 @kind object, `byte`[] v4 @kind object) @signature `Lcom/dmoney/security/operation/softHsm/BCAsymmetricOperation;.Encrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c90dc.  call temp:= `getInstance`() @signature `Lcom/dmoney/security/config/Configuration;.getInstance:()Lcom/dmoney/security/config/Configuration;` @kind static;
  #L2c90e2.  v0:= temp @kind object;
  #L2c90e4.  call temp:= `getAsymetricKeyAlgo`(v0) @signature `Lcom/dmoney/security/config/Configuration;.getAsymetricKeyAlgo:()Ljava/lang/String;` @kind virtual;
  #L2c90ea.  v0:= temp @kind object;
  #L2c90ec.  v1:= `@@com.dmoney.security.config.Configuration.PROVIDER` @type ^`java.lang.String` @kind object;
  #L2c90f0.  call temp:= `getInstance`(v0, v1) @signature `Ljava/security/KeyFactory;.getInstance:(Ljava/lang/String;Ljava/lang/String;)Ljava/security/KeyFactory;` @kind static;
  #L2c90f6.  v0:= temp @kind object;
  #L2c90f8.  v1:= new `java.security.spec.X509EncodedKeySpec`;
  #L2c90fc.  call `<init>`(v1, v4) @signature `Ljava/security/spec/X509EncodedKeySpec;.<init>:([B)V` @kind direct;
  #L2c9102.  call temp:= `generatePublic`(v0, v1) @signature `Ljava/security/KeyFactory;.generatePublic:(Ljava/security/spec/KeySpec;)Ljava/security/PublicKey;` @kind virtual;
  #L2c9108.  v4:= temp @kind object;
  #L2c910a.  v0:= 1I;
  #L2c910c.  call temp:= `DoAsymetricDryptography`(v2, v3, v4, v0) @signature `Lcom/dmoney/security/operation/softHsm/BCAsymmetricOperation;.DoAsymetricDryptography:([BLjava/security/Key;Z)[B` @kind direct;
  #L2c9112.  v3:= temp @kind object;
  #L2c9114.  return v3 @kind object;
}
procedure `byte`[] `Sign`(`com.dmoney.security.operation.softHsm.BCAsymmetricOperation` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/dmoney/security/operation/softHsm/BCAsymmetricOperation;.Sign:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c9128.  call temp:= `getInstance`() @signature `Lcom/dmoney/security/config/Configuration;.getInstance:()Lcom/dmoney/security/config/Configuration;` @kind static;
  #L2c912e.  v0:= temp @kind object;
  #L2c9130.  call temp:= `getDigitalSignatureAlgo`(v0) @signature `Lcom/dmoney/security/config/Configuration;.getDigitalSignatureAlgo:()Ljava/lang/String;` @kind virtual;
  #L2c9136.  v0:= temp @kind object;
  #L2c9138.  v1:= `@@com.dmoney.security.config.Configuration.PROVIDER` @type ^`java.lang.String` @kind object;
  #L2c913c.  call temp:= `getInstance`(v0, v1) @signature `Ljava/security/Signature;.getInstance:(Ljava/lang/String;Ljava/lang/String;)Ljava/security/Signature;` @kind static;
  #L2c9142.  v0:= temp @kind object;
  #L2c9144.  call temp:= `getInstance`() @signature `Lcom/dmoney/security/config/Configuration;.getInstance:()Lcom/dmoney/security/config/Configuration;` @kind static;
  #L2c914a.  v1:= temp @kind object;
  #L2c914c.  call temp:= `getAsymetricKeyAlgo`(v1) @signature `Lcom/dmoney/security/config/Configuration;.getAsymetricKeyAlgo:()Ljava/lang/String;` @kind virtual;
  #L2c9152.  v1:= temp @kind object;
  #L2c9154.  v2:= `@@com.dmoney.security.config.Configuration.PROVIDER` @type ^`java.lang.String` @kind object;
  #L2c9158.  call temp:= `getInstance`(v1, v2) @signature `Ljava/security/KeyFactory;.getInstance:(Ljava/lang/String;Ljava/lang/String;)Ljava/security/KeyFactory;` @kind static;
  #L2c915e.  v1:= temp @kind object;
  #L2c9160.  v2:= new `java.security.spec.PKCS8EncodedKeySpec`;
  #L2c9164.  call `<init>`(v2, v5) @signature `Ljava/security/spec/PKCS8EncodedKeySpec;.<init>:([B)V` @kind direct;
  #L2c916a.  call temp:= `generatePrivate`(v1, v2) @signature `Ljava/security/KeyFactory;.generatePrivate:(Ljava/security/spec/KeySpec;)Ljava/security/PrivateKey;` @kind virtual;
  #L2c9170.  v5:= temp @kind object;
  #L2c9172.  call `initSign`(v0, v5) @signature `Ljava/security/Signature;.initSign:(Ljava/security/PrivateKey;)V` @kind virtual;
  #L2c9178.  call `update`(v0, v4) @signature `Ljava/security/Signature;.update:([B)V` @kind virtual;
  #L2c917e.  call temp:= `sign`(v0) @signature `Ljava/security/Signature;.sign:()[B` @kind virtual;
  #L2c9184.  v4:= temp @kind object;
  #L2c9186.  return v4 @kind object;
}
procedure `boolean` `Verify`(`com.dmoney.security.operation.softHsm.BCAsymmetricOperation` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/dmoney/security/operation/softHsm/BCAsymmetricOperation;.Verify:([B[B[B)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c8fd8.  call temp:= `getInstance`() @signature `Lcom/dmoney/security/config/Configuration;.getInstance:()Lcom/dmoney/security/config/Configuration;` @kind static;
  #L2c8fde.  v0:= temp @kind object;
  #L2c8fe0.  call temp:= `getDigitalSignatureAlgo`(v0) @signature `Lcom/dmoney/security/config/Configuration;.getDigitalSignatureAlgo:()Ljava/lang/String;` @kind virtual;
  #L2c8fe6.  v0:= temp @kind object;
  #L2c8fe8.  v1:= `@@com.dmoney.security.config.Configuration.PROVIDER` @type ^`java.lang.String` @kind object;
  #L2c8fec.  call temp:= `getInstance`(v0, v1) @signature `Ljava/security/Signature;.getInstance:(Ljava/lang/String;Ljava/lang/String;)Ljava/security/Signature;` @kind static;
  #L2c8ff2.  v0:= temp @kind object;
  #L2c8ff4.  call temp:= `getInstance`() @signature `Lcom/dmoney/security/config/Configuration;.getInstance:()Lcom/dmoney/security/config/Configuration;` @kind static;
  #L2c8ffa.  v1:= temp @kind object;
  #L2c8ffc.  call temp:= `getAsymetricKeyAlgo`(v1) @signature `Lcom/dmoney/security/config/Configuration;.getAsymetricKeyAlgo:()Ljava/lang/String;` @kind virtual;
  #L2c9002.  v1:= temp @kind object;
  #L2c9004.  v2:= `@@com.dmoney.security.config.Configuration.PROVIDER` @type ^`java.lang.String` @kind object;
  #L2c9008.  call temp:= `getInstance`(v1, v2) @signature `Ljava/security/KeyFactory;.getInstance:(Ljava/lang/String;Ljava/lang/String;)Ljava/security/KeyFactory;` @kind static;
  #L2c900e.  v1:= temp @kind object;
  #L2c9010.  v2:= new `java.security.spec.X509EncodedKeySpec`;
  #L2c9014.  call `<init>`(v2, v6) @signature `Ljava/security/spec/X509EncodedKeySpec;.<init>:([B)V` @kind direct;
  #L2c901a.  call temp:= `generatePublic`(v1, v2) @signature `Ljava/security/KeyFactory;.generatePublic:(Ljava/security/spec/KeySpec;)Ljava/security/PublicKey;` @kind virtual;
  #L2c9020.  v6:= temp @kind object;
  #L2c9022.  call `initVerify`(v0, v6) @signature `Ljava/security/Signature;.initVerify:(Ljava/security/PublicKey;)V` @kind virtual;
  #L2c9028.  call `update`(v0, v4) @signature `Ljava/security/Signature;.update:([B)V` @kind virtual;
  #L2c902e.  call temp:= `verify`(v0, v5) @signature `Ljava/security/Signature;.verify:([B)Z` @kind virtual;
  #L2c9034.  v4:= temp;
  #L2c9036.  return v4;
}
