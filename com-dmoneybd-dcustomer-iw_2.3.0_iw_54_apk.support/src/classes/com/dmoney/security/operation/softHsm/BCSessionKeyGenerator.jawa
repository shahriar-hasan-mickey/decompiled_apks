record `com.dmoney.security.operation.softHsm.BCSessionKeyGenerator` @kind class @AccessFlag PUBLIC extends `com.dmoney.security.operation.interfaces.ISessionKeyGenerator` @kind interface {
}
procedure `void` `<init>`(`com.dmoney.security.operation.softHsm.BCSessionKeyGenerator` v0 @kind this) @signature `Lcom/dmoney/security/operation/softHsm/BCSessionKeyGenerator;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2c97f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c97f6.  return @kind void;
}
procedure `byte`[] `GenerateMACKey`(`com.dmoney.security.operation.softHsm.BCSessionKeyGenerator` v2 @kind this) @signature `Lcom/dmoney/security/operation/softHsm/BCSessionKeyGenerator;.GenerateMACKey:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c9740.  call temp:= `getInstance`() @signature `Lcom/dmoney/security/config/Configuration;.getInstance:()Lcom/dmoney/security/config/Configuration;` @kind static;
  #L2c9746.  v0:= temp @kind object;
  #L2c9748.  call temp:= `getHMACKeyAlgo`(v0) @signature `Lcom/dmoney/security/config/Configuration;.getHMACKeyAlgo:()Ljava/lang/String;` @kind virtual;
  #L2c974e.  v0:= temp @kind object;
  #L2c9750.  v1:= "BC" @kind object;
  #L2c9754.  call temp:= `getInstance`(v0, v1) @signature `Ljavax/crypto/KeyGenerator;.getInstance:(Ljava/lang/String;Ljava/lang/String;)Ljavax/crypto/KeyGenerator;` @kind static;
  #L2c975a.  v0:= temp @kind object;
  #L2c975c.  call temp:= `getInstance`() @signature `Lcom/dmoney/security/config/Configuration;.getInstance:()Lcom/dmoney/security/config/Configuration;` @kind static;
  #L2c9762.  v1:= temp @kind object;
  #L2c9764.  call temp:= `getSymetricKeyLength`(v1) @signature `Lcom/dmoney/security/config/Configuration;.getSymetricKeyLength:()I` @kind virtual;
  #L2c976a.  v1:= temp;
  #L2c976c.  v1:= v1 * 8;
  #L2c9770.  call `init`(v0, v1) @signature `Ljavax/crypto/KeyGenerator;.init:(I)V` @kind virtual;
  #L2c9776.  call temp:= `generateKey`(v0) @signature `Ljavax/crypto/KeyGenerator;.generateKey:()Ljavax/crypto/SecretKey;` @kind virtual;
  #L2c977c.  v0:= temp @kind object;
  #L2c977e.  call temp:= `getEncoded`(v0) @signature `Ljavax/crypto/SecretKey;.getEncoded:()[B` @kind interface;
  #L2c9784.  v0:= temp @kind object;
  #L2c9786.  return v0 @kind object;
}
procedure `byte`[] `GenerateSecretKey`(`com.dmoney.security.operation.softHsm.BCSessionKeyGenerator` v2 @kind this) @signature `Lcom/dmoney/security/operation/softHsm/BCSessionKeyGenerator;.GenerateSecretKey:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c9798.  call temp:= `getInstance`() @signature `Lcom/dmoney/security/config/Configuration;.getInstance:()Lcom/dmoney/security/config/Configuration;` @kind static;
  #L2c979e.  v0:= temp @kind object;
  #L2c97a0.  call temp:= `getSymetricKeyAlgo`(v0) @signature `Lcom/dmoney/security/config/Configuration;.getSymetricKeyAlgo:()Ljava/lang/String;` @kind virtual;
  #L2c97a6.  v0:= temp @kind object;
  #L2c97a8.  v1:= "BC" @kind object;
  #L2c97ac.  call temp:= `getInstance`(v0, v1) @signature `Ljavax/crypto/KeyGenerator;.getInstance:(Ljava/lang/String;Ljava/lang/String;)Ljavax/crypto/KeyGenerator;` @kind static;
  #L2c97b2.  v0:= temp @kind object;
  #L2c97b4.  call temp:= `getInstance`() @signature `Lcom/dmoney/security/config/Configuration;.getInstance:()Lcom/dmoney/security/config/Configuration;` @kind static;
  #L2c97ba.  v1:= temp @kind object;
  #L2c97bc.  call temp:= `getSymetricKeyLength`(v1) @signature `Lcom/dmoney/security/config/Configuration;.getSymetricKeyLength:()I` @kind virtual;
  #L2c97c2.  v1:= temp;
  #L2c97c4.  v1:= v1 * 8;
  #L2c97c8.  call `init`(v0, v1) @signature `Ljavax/crypto/KeyGenerator;.init:(I)V` @kind virtual;
  #L2c97ce.  call temp:= `generateKey`(v0) @signature `Ljavax/crypto/KeyGenerator;.generateKey:()Ljavax/crypto/SecretKey;` @kind virtual;
  #L2c97d4.  v0:= temp @kind object;
  #L2c97d6.  call temp:= `getEncoded`(v0) @signature `Ljavax/crypto/SecretKey;.getEncoded:()[B` @kind interface;
  #L2c97dc.  v0:= temp @kind object;
  #L2c97de.  return v0 @kind object;
}
