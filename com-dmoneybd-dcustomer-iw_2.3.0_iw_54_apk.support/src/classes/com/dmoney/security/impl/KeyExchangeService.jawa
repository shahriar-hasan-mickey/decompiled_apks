record `com.dmoney.security.impl.KeyExchangeService` @kind class @AccessFlag PUBLIC extends `com.dmoney.security.interfaces.IKeyExchangeService` @kind interface {
  `com.dmoney.security.operation.interfaces.IOperator` `com.dmoney.security.impl.KeyExchangeService.a` @AccessFlag ;
}
procedure `void` `<init>`(`com.dmoney.security.impl.KeyExchangeService` v1 @kind this) @signature `Lcom/dmoney/security/impl/KeyExchangeService;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2c1f44.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c1f4a.  call temp:= `GetOperator`() @signature `Lcom/dmoney/security/operation/factory/OperatorFactory;.GetOperator:()Lcom/dmoney/security/operation/interfaces/IOperator;` @kind static;
  #L2c1f50.  v0:= temp @kind object;
  #L2c1f52.  v1.`com.dmoney.security.impl.KeyExchangeService.a` @type ^`com.dmoney.security.operation.interfaces.IOperator` := v0 @kind object;
  #L2c1f56.  return @kind void;
}
procedure `void` `<init>`(`com.dmoney.security.impl.KeyExchangeService` v0 @kind this, `com.dmoney.security.operation.interfaces.IOperator` v1 @kind object) @signature `Lcom/dmoney/security/impl/KeyExchangeService;.<init>:(Lcom/dmoney/security/operation/interfaces/IOperator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2c1f68.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c1f6e.  v0.`com.dmoney.security.impl.KeyExchangeService.a` @type ^`com.dmoney.security.operation.interfaces.IOperator` := v1 @kind object;
  #L2c1f72.  return @kind void;
}
procedure `com.dmoney.security.model.servicemodels.responses.AcceptSessionKeyForKeyExchangeResponse` `AcceptSessionKey`(`com.dmoney.security.impl.KeyExchangeService` v9 @kind this, `com.dmoney.security.model.servicemodels.requests.AcceptSessionKeyForKeyExchangeRequest` v10 @kind object) @signature `Lcom/dmoney/security/impl/KeyExchangeService;.AcceptSessionKey:(Lcom/dmoney/security/model/servicemodels/requests/AcceptSessionKeyForKeyExchangeRequest;)Lcom/dmoney/security/model/servicemodels/responses/AcceptSessionKeyForKeyExchangeResponse;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2c198c.  v0:= new `com.dmoney.security.model.servicemodels.responses.AcceptSessionKeyForKeyExchangeResponse`;
  #L2c1990.  call `<init>`(v0) @signature `Lcom/dmoney/security/model/servicemodels/responses/AcceptSessionKeyForKeyExchangeResponse;.<init>:()V` @kind direct;
  #L2c1996.  v1:= v9.`com.dmoney.security.impl.KeyExchangeService.a` @type ^`com.dmoney.security.operation.interfaces.IOperator` @kind object;
  #L2c199a.  call temp:= `GetKeyStore`(v1) @signature `Lcom/dmoney/security/operation/interfaces/IOperator;.GetKeyStore:()Lcom/dmoney/security/operation/interfaces/IKeyStore;` @kind interface;
  #L2c19a0.  v1:= temp @kind object;
  #L2c19a2.  call temp:= `getClientId`(v10) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getClientId:()Ljava/lang/String;` @kind virtual;
  #L2c19a8.  v2:= temp @kind object;
  #L2c19aa.  call temp:= `GetKeyInfoByIdentity`(v1, v2) @signature `Lcom/dmoney/security/operation/interfaces/IKeyStore;.GetKeyInfoByIdentity:(Ljava/lang/String;)Lcom/dmoney/security/operation/model/KeyStoreModel;` @kind interface;
  #L2c19b0.  v2:= temp @kind object;
  #L2c19b2.  call temp:= `getPublicKey`(v2) @signature `Lcom/dmoney/security/operation/model/KeyStoreModel;.getPublicKey:()[B` @kind virtual;
  #L2c19b8.  v2:= temp @kind object;
  #L2c19ba.  call temp:= `getServerId`(v10) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getServerId:()Ljava/lang/String;` @kind virtual;
  #L2c19c0.  v3:= temp @kind object;
  #L2c19c2.  call temp:= `GetKeyInfoByIdentity`(v1, v3) @signature `Lcom/dmoney/security/operation/interfaces/IKeyStore;.GetKeyInfoByIdentity:(Ljava/lang/String;)Lcom/dmoney/security/operation/model/KeyStoreModel;` @kind interface;
  #L2c19c8.  v3:= temp @kind object;
  #L2c19ca.  call temp:= `getPrivateKey`(v3) @signature `Lcom/dmoney/security/operation/model/KeyStoreModel;.getPrivateKey:()[B` @kind virtual;
  #L2c19d0.  v3:= temp @kind object;
  #L2c19d2.  v4:= v9.`com.dmoney.security.impl.KeyExchangeService.a` @type ^`com.dmoney.security.operation.interfaces.IOperator` @kind object;
  #L2c19d6.  call temp:= `GetAsymmetricOperation`(v4) @signature `Lcom/dmoney/security/operation/interfaces/IOperator;.GetAsymmetricOperation:()Lcom/dmoney/security/operation/interfaces/IAsymmetricOperation;` @kind interface;
  #L2c19dc.  v4:= temp @kind object;
  #L2c19de.  call temp:= `getRandomNumber`(v10) @signature `Lcom/dmoney/security/model/servicemodels/requests/AcceptSessionKeyForKeyExchangeRequest;.getRandomNumber:()Ljava/lang/String;` @kind virtual;
  #L2c19e4.  v5:= temp @kind object;
  #L2c19e6.  v6:= 2I;
  #L2c19e8.  call temp:= `decode`(v5, v6) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L2c19ee.  v5:= temp @kind object;
  #L2c19f0.  call temp:= `getSignatureForRandom`(v10) @signature `Lcom/dmoney/security/model/servicemodels/requests/AcceptSessionKeyForKeyExchangeRequest;.getSignatureForRandom:()Ljava/lang/String;` @kind virtual;
  #L2c19f6.  v7:= temp @kind object;
  #L2c19f8.  call temp:= `decode`(v7, v6) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L2c19fe.  v7:= temp @kind object;
  #L2c1a00.  call temp:= `Verify`(v4, v5, v7, v2) @signature `Lcom/dmoney/security/operation/interfaces/IAsymmetricOperation;.Verify:([B[B[B)Z` @kind interface;
  #L2c1a06.  call temp:= `getEncryptedMACKey`(v10) @signature `Lcom/dmoney/security/model/servicemodels/requests/AcceptSessionKeyForKeyExchangeRequest;.getEncryptedMACKey:()Ljava/lang/String;` @kind virtual;
  #L2c1a0c.  v2:= temp @kind object;
  #L2c1a0e.  call temp:= `decode`(v2, v6) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L2c1a14.  v2:= temp @kind object;
  #L2c1a16.  call temp:= `Decrypt`(v4, v2, v3) @signature `Lcom/dmoney/security/operation/interfaces/IAsymmetricOperation;.Decrypt:([B[B)[B` @kind interface;
  #L2c1a1c.  v2:= temp @kind object;
  #L2c1a1e.  call temp:= `getEncryptedSessionKey`(v10) @signature `Lcom/dmoney/security/model/servicemodels/requests/AcceptSessionKeyForKeyExchangeRequest;.getEncryptedSessionKey:()Ljava/lang/String;` @kind virtual;
  #L2c1a24.  v5:= temp @kind object;
  #L2c1a26.  call temp:= `decode`(v5, v6) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L2c1a2c.  v5:= temp @kind object;
  #L2c1a2e.  call temp:= `Decrypt`(v4, v5, v3) @signature `Lcom/dmoney/security/operation/interfaces/IAsymmetricOperation;.Decrypt:([B[B)[B` @kind interface;
  #L2c1a34.  v5:= temp @kind object;
  #L2c1a36.  v7:= new `com.dmoney.security.operation.model.SessionKeyModel`;
  #L2c1a3a.  call `<init>`(v7) @signature `Lcom/dmoney/security/operation/model/SessionKeyModel;.<init>:()V` @kind direct;
  #L2c1a40.  call temp:= `getClientId`(v10) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getClientId:()Ljava/lang/String;` @kind virtual;
  #L2c1a46.  v8:= temp @kind object;
  #L2c1a48.  call `setIdentity`(v7, v8) @signature `Lcom/dmoney/security/operation/model/SessionKeyModel;.setIdentity:(Ljava/lang/String;)V` @kind virtual;
  #L2c1a4e.  call `setMacKey`(v7, v2) @signature `Lcom/dmoney/security/operation/model/SessionKeyModel;.setMacKey:([B)V` @kind virtual;
  #L2c1a54.  call `setSecretKey`(v7, v5) @signature `Lcom/dmoney/security/operation/model/SessionKeyModel;.setSecretKey:([B)V` @kind virtual;
  #L2c1a5a.  call temp:= `AddSessionKeyByIdentity`(v1, v7) @signature `Lcom/dmoney/security/operation/interfaces/IKeyStore;.AddSessionKeyByIdentity:(Lcom/dmoney/security/operation/model/SessionKeyModel;)Z` @kind interface;
  #L2c1a60.  call temp:= `getRandomNumber`(v10) @signature `Lcom/dmoney/security/model/servicemodels/requests/AcceptSessionKeyForKeyExchangeRequest;.getRandomNumber:()Ljava/lang/String;` @kind virtual;
  #L2c1a66.  v1:= temp @kind object;
  #L2c1a68.  call temp:= `decode`(v1, v6) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L2c1a6e.  v1:= temp @kind object;
  #L2c1a70.  call temp:= `Sign`(v4, v1, v3) @signature `Lcom/dmoney/security/operation/interfaces/IAsymmetricOperation;.Sign:([B[B)[B` @kind interface;
  #L2c1a76.  v1:= temp @kind object;
  #L2c1a78.  call temp:= `getRandomNumber`(v10) @signature `Lcom/dmoney/security/model/servicemodels/requests/AcceptSessionKeyForKeyExchangeRequest;.getRandomNumber:()Ljava/lang/String;` @kind virtual;
  #L2c1a7e.  v10:= temp @kind object;
  #L2c1a80.  call `setRandomNumber`(v0, v10) @signature `Lcom/dmoney/security/model/servicemodels/responses/AcceptSessionKeyForKeyExchangeResponse;.setRandomNumber:(Ljava/lang/String;)V` @kind virtual;
  #L2c1a86.  call temp:= `encodeToString`(v1, v6) @signature `Landroid/util/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L2c1a8c.  v10:= temp @kind object;
  #L2c1a8e.  call `setSignatureForRandom`(v0, v10) @signature `Lcom/dmoney/security/model/servicemodels/responses/AcceptSessionKeyForKeyExchangeResponse;.setSignatureForRandom:(Ljava/lang/String;)V` @kind virtual;
  #L2c1a94.  return v0 @kind object;
}
procedure `com.dmoney.security.model.servicemodels.responses.ConfirmKeyExchengeResponse` `ConfirmKeyExchenge`(`com.dmoney.security.impl.KeyExchangeService` v2 @kind this, `com.dmoney.security.model.servicemodels.requests.ConfirmKeyExchengeRequest` v3 @kind object) @signature `Lcom/dmoney/security/impl/KeyExchangeService;.ConfirmKeyExchenge:(Lcom/dmoney/security/model/servicemodels/requests/ConfirmKeyExchengeRequest;)Lcom/dmoney/security/model/servicemodels/responses/ConfirmKeyExchengeResponse;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c1aa8.  v0:= new `com.dmoney.security.model.servicemodels.responses.ConfirmKeyExchengeResponse`;
  #L2c1aac.  call `<init>`(v0) @signature `Lcom/dmoney/security/model/servicemodels/responses/ConfirmKeyExchengeResponse;.<init>:()V` @kind direct;
  #L2c1ab2.  call temp:= `isConfirmed`(v3) @signature `Lcom/dmoney/security/model/servicemodels/requests/ConfirmKeyExchengeRequest;.isConfirmed:()Z` @kind virtual;
  #L2c1ab8.  v1:= temp;
  #L2c1aba.  if v1 != 0 then goto L2c1ad8;
  #L2c1abe.  v1:= v2.`com.dmoney.security.impl.KeyExchangeService.a` @type ^`com.dmoney.security.operation.interfaces.IOperator` @kind object;
  #L2c1ac2.  call temp:= `GetKeyStore`(v1) @signature `Lcom/dmoney/security/operation/interfaces/IOperator;.GetKeyStore:()Lcom/dmoney/security/operation/interfaces/IKeyStore;` @kind interface;
  #L2c1ac8.  v1:= temp @kind object;
  #L2c1aca.  call temp:= `getClientId`(v3) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getClientId:()Ljava/lang/String;` @kind virtual;
  #L2c1ad0.  v3:= temp @kind object;
  #L2c1ad2.  call temp:= `RemoveSessionKeyByIdentity`(v1, v3) @signature `Lcom/dmoney/security/operation/interfaces/IKeyStore;.RemoveSessionKeyByIdentity:(Ljava/lang/String;)Z` @kind interface;
  #L2c1ad8.  return v0 @kind object;
}
procedure `com.dmoney.security.model.servicemodels.responses.ExtractNFCKeyResponse` `ExtractNFCKey`(`com.dmoney.security.impl.KeyExchangeService` v6 @kind this, `com.dmoney.security.model.servicemodels.requests.ExtractNFCKeyRequest` v7 @kind object) @signature `Lcom/dmoney/security/impl/KeyExchangeService;.ExtractNFCKey:(Lcom/dmoney/security/model/servicemodels/requests/ExtractNFCKeyRequest;)Lcom/dmoney/security/model/servicemodels/responses/ExtractNFCKeyResponse;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2c1aec.  if v7 == 0 then goto L2c1afe;
  #L2c1af0.  call temp:= `getEncryptedNFCSecretKey`(v7) @signature `Lcom/dmoney/security/model/servicemodels/requests/ExtractNFCKeyRequest;.getEncryptedNFCSecretKey:()Ljava/lang/String;` @kind virtual;
  #L2c1af6.  v0:= temp @kind object;
  #L2c1af8.  if v0 == 0 then goto L2c1afe;
  #L2c1afc.  goto L2c1b16;
  #L2c1afe.  v0:= new `java.lang.IllegalArgumentException`;
  #L2c1b02.  v1:= "Invalid request model." @kind object;
  #L2c1b06.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c1b0c.  throw v0;
  #L2c1b0e.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L2c1b10.  call `printStackTrace`(v0) @signature `Ljava/lang/IllegalArgumentException;.printStackTrace:()V` @kind virtual;
  #L2c1b16.  call temp:= `GetOperator`() @signature `Lcom/dmoney/security/operation/factory/OperatorFactory;.GetOperator:()Lcom/dmoney/security/operation/interfaces/IOperator;` @kind static;
  #L2c1b1c.  v0:= temp @kind object;
  #L2c1b1e.  call temp:= `GetKeyStore`(v0) @signature `Lcom/dmoney/security/operation/interfaces/IOperator;.GetKeyStore:()Lcom/dmoney/security/operation/interfaces/IKeyStore;` @kind interface;
  #L2c1b24.  v0:= temp @kind object;
  #L2c1b26.  v1:= v6.`com.dmoney.security.impl.KeyExchangeService.a` @type ^`com.dmoney.security.operation.interfaces.IOperator` @kind object;
  #L2c1b2a.  call temp:= `GetSymmetricOperation`(v1) @signature `Lcom/dmoney/security/operation/interfaces/IOperator;.GetSymmetricOperation:()Lcom/dmoney/security/operation/interfaces/ISymmetricOperation;` @kind interface;
  #L2c1b30.  v1:= temp @kind object;
  #L2c1b32.  call temp:= `getClientType`(v7) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getClientType:()Ljava/lang/String;` @kind virtual;
  #L2c1b38.  v2:= temp @kind object;
  #L2c1b3a.  if v2 == 0 then goto L2c1b68;
  #L2c1b3e.  call temp:= `getClientType`(v7) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getClientType:()Ljava/lang/String;` @kind virtual;
  #L2c1b44.  v2:= temp @kind object;
  #L2c1b46.  v3:= "" @kind object;
  #L2c1b4a.  if v2 == v3 then goto L2c1b68;
  #L2c1b4e.  call temp:= `getClientType`(v7) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getClientType:()Ljava/lang/String;` @kind virtual;
  #L2c1b54.  v2:= temp @kind object;
  #L2c1b56.  v3:= "dmoney-customer-wallet" @kind object;
  #L2c1b5a.  if v2 != v3 then goto L2c1b68;
  #L2c1b5e.  call temp:= `getClientType`(v7) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getClientType:()Ljava/lang/String;` @kind virtual;
  #L2c1b64.  v2:= temp @kind object;
  #L2c1b66.  goto L2c1b70;
  #L2c1b68.  call temp:= `getClientId`(v7) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getClientId:()Ljava/lang/String;` @kind virtual;
  #L2c1b6e.  v2:= temp @kind object;
  #L2c1b70.  call temp:= `GetSessionKeyByIdentity`(v0, v2) @signature `Lcom/dmoney/security/operation/interfaces/IKeyStore;.GetSessionKeyByIdentity:(Ljava/lang/String;)Lcom/dmoney/security/operation/model/SessionKeyModel;` @kind interface;
  #L2c1b76.  v0:= temp @kind object;
  #L2c1b78.  if v0 == 0 then goto L2c1b8a;
  #L2c1b7c.  call temp:= `getSecretKey`(v0) @signature `Lcom/dmoney/security/operation/model/SessionKeyModel;.getSecretKey:()[B` @kind virtual;
  #L2c1b82.  v3:= temp @kind object;
  #L2c1b84.  if v3 == 0 then goto L2c1b8a;
  #L2c1b88.  goto L2c1bc0;
  #L2c1b8a.  v3:= new `java.lang.IllegalArgumentException`;
  #L2c1b8e.  v4:= new `java.lang.StringBuilder`;
  #L2c1b92.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c1b98.  v5:= "Failed to get key info from database by Client ID: " @kind object;
  #L2c1b9c.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1ba2.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1ba8.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c1bae.  v2:= temp @kind object;
  #L2c1bb0.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c1bb6.  throw v3;
  #L2c1bb8.  v2:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L2c1bba.  call `printStackTrace`(v2) @signature `Ljava/lang/IllegalArgumentException;.printStackTrace:()V` @kind virtual;
  #L2c1bc0.  v2:= new `com.dmoney.security.model.servicemodels.responses.ExtractNFCKeyResponse`;
  #L2c1bc4.  call `<init>`(v2) @signature `Lcom/dmoney/security/model/servicemodels/responses/ExtractNFCKeyResponse;.<init>:()V` @kind direct;
  #L2c1bca.  call temp:= `getEncryptedNFCSecretKey`(v7) @signature `Lcom/dmoney/security/model/servicemodels/requests/ExtractNFCKeyRequest;.getEncryptedNFCSecretKey:()Ljava/lang/String;` @kind virtual;
  #L2c1bd0.  v7:= temp @kind object;
  #L2c1bd2.  v3:= 2I;
  #L2c1bd4.  call temp:= `decode`(v7, v3) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L2c1bda.  v7:= temp @kind object;
  #L2c1bdc.  call temp:= `getSecretKey`(v0) @signature `Lcom/dmoney/security/operation/model/SessionKeyModel;.getSecretKey:()[B` @kind virtual;
  #L2c1be2.  v0:= temp @kind object;
  #L2c1be4.  call temp:= `Decrypt`(v1, v7, v0) @signature `Lcom/dmoney/security/operation/interfaces/ISymmetricOperation;.Decrypt:([B[B)[B` @kind interface;
  #L2c1bea.  v7:= temp @kind object;
  #L2c1bec.  call temp:= `encodeToString`(v7, v3) @signature `Landroid/util/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L2c1bf2.  v7:= temp @kind object;
  #L2c1bf4.  call `setNfcChipSecretKey`(v2, v7) @signature `Lcom/dmoney/security/model/servicemodels/responses/ExtractNFCKeyResponse;.setNfcChipSecretKey:(Ljava/lang/String;)V` @kind virtual;
  #L2c1bfa.  return v2 @kind object;
  catch `java.lang.IllegalArgumentException` @[L2c1afe..L2c1b0e] goto L2c1b0e;
  catch `java.lang.IllegalArgumentException` @[L2c1b8a..L2c1bb8] goto L2c1bb8;
}
procedure `com.dmoney.security.model.servicemodels.responses.GenerateSessionKeyForKeyExchangeResponse` `GenerateSessionKey`(`com.dmoney.security.impl.KeyExchangeService` v10 @kind this, `com.dmoney.security.model.servicemodels.requests.GenerateSessionKeyForKeyExchangeRequest` v11 @kind object) @signature `Lcom/dmoney/security/impl/KeyExchangeService;.GenerateSessionKey:(Lcom/dmoney/security/model/servicemodels/requests/GenerateSessionKeyForKeyExchangeRequest;)Lcom/dmoney/security/model/servicemodels/responses/GenerateSessionKeyForKeyExchangeResponse;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2c1c28.  v0:= new `com.dmoney.security.model.servicemodels.responses.GenerateSessionKeyForKeyExchangeResponse`;
  #L2c1c2c.  call `<init>`(v0) @signature `Lcom/dmoney/security/model/servicemodels/responses/GenerateSessionKeyForKeyExchangeResponse;.<init>:()V` @kind direct;
  #L2c1c32.  v1:= v10.`com.dmoney.security.impl.KeyExchangeService.a` @type ^`com.dmoney.security.operation.interfaces.IOperator` @kind object;
  #L2c1c36.  call temp:= `GetSessionKeyGenerator`(v1) @signature `Lcom/dmoney/security/operation/interfaces/IOperator;.GetSessionKeyGenerator:()Lcom/dmoney/security/operation/interfaces/ISessionKeyGenerator;` @kind interface;
  #L2c1c3c.  v1:= temp @kind object;
  #L2c1c3e.  call temp:= `GenerateSecretKey`(v1) @signature `Lcom/dmoney/security/operation/interfaces/ISessionKeyGenerator;.GenerateSecretKey:()[B` @kind interface;
  #L2c1c44.  v2:= temp @kind object;
  #L2c1c46.  call temp:= `GenerateMACKey`(v1) @signature `Lcom/dmoney/security/operation/interfaces/ISessionKeyGenerator;.GenerateMACKey:()[B` @kind interface;
  #L2c1c4c.  v1:= temp @kind object;
  #L2c1c4e.  v3:= v10.`com.dmoney.security.impl.KeyExchangeService.a` @type ^`com.dmoney.security.operation.interfaces.IOperator` @kind object;
  #L2c1c52.  call temp:= `GetKeyStore`(v3) @signature `Lcom/dmoney/security/operation/interfaces/IOperator;.GetKeyStore:()Lcom/dmoney/security/operation/interfaces/IKeyStore;` @kind interface;
  #L2c1c58.  v3:= temp @kind object;
  #L2c1c5a.  call temp:= `getServerId`(v11) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getServerId:()Ljava/lang/String;` @kind virtual;
  #L2c1c60.  v4:= temp @kind object;
  #L2c1c62.  call temp:= `GetKeyInfoByIdentity`(v3, v4) @signature `Lcom/dmoney/security/operation/interfaces/IKeyStore;.GetKeyInfoByIdentity:(Ljava/lang/String;)Lcom/dmoney/security/operation/model/KeyStoreModel;` @kind interface;
  #L2c1c68.  v4:= temp @kind object;
  #L2c1c6a.  call temp:= `getPublicKey`(v4) @signature `Lcom/dmoney/security/operation/model/KeyStoreModel;.getPublicKey:()[B` @kind virtual;
  #L2c1c70.  v4:= temp @kind object;
  #L2c1c72.  call temp:= `getClientId`(v11) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getClientId:()Ljava/lang/String;` @kind virtual;
  #L2c1c78.  v5:= temp @kind object;
  #L2c1c7a.  call temp:= `GetKeyInfoByIdentity`(v3, v5) @signature `Lcom/dmoney/security/operation/interfaces/IKeyStore;.GetKeyInfoByIdentity:(Ljava/lang/String;)Lcom/dmoney/security/operation/model/KeyStoreModel;` @kind interface;
  #L2c1c80.  v5:= temp @kind object;
  #L2c1c82.  call temp:= `getPrivateKey`(v5) @signature `Lcom/dmoney/security/operation/model/KeyStoreModel;.getPrivateKey:()[B` @kind virtual;
  #L2c1c88.  v5:= temp @kind object;
  #L2c1c8a.  v6:= v10.`com.dmoney.security.impl.KeyExchangeService.a` @type ^`com.dmoney.security.operation.interfaces.IOperator` @kind object;
  #L2c1c8e.  call temp:= `GetAsymmetricOperation`(v6) @signature `Lcom/dmoney/security/operation/interfaces/IOperator;.GetAsymmetricOperation:()Lcom/dmoney/security/operation/interfaces/IAsymmetricOperation;` @kind interface;
  #L2c1c94.  v6:= temp @kind object;
  #L2c1c96.  call temp:= `Encrypt`(v6, v2, v4) @signature `Lcom/dmoney/security/operation/interfaces/IAsymmetricOperation;.Encrypt:([B[B)[B` @kind interface;
  #L2c1c9c.  v7:= temp @kind object;
  #L2c1c9e.  call temp:= `Encrypt`(v6, v1, v4) @signature `Lcom/dmoney/security/operation/interfaces/IAsymmetricOperation;.Encrypt:([B[B)[B` @kind interface;
  #L2c1ca4.  v4:= temp @kind object;
  #L2c1ca6.  v8:= v10.`com.dmoney.security.impl.KeyExchangeService.a` @type ^`com.dmoney.security.operation.interfaces.IOperator` @kind object;
  #L2c1caa.  call temp:= `GetRandGenerator`(v8) @signature `Lcom/dmoney/security/operation/interfaces/IOperator;.GetRandGenerator:()Lcom/dmoney/security/operation/interfaces/IRandGenerator;` @kind interface;
  #L2c1cb0.  v8:= temp @kind object;
  #L2c1cb2.  v9:= 10I;
  #L2c1cb6.  call temp:= `GenerateRand`(v8, v9) @signature `Lcom/dmoney/security/operation/interfaces/IRandGenerator;.GenerateRand:(I)[B` @kind interface;
  #L2c1cbc.  v8:= temp @kind object;
  #L2c1cbe.  call temp:= `Sign`(v6, v8, v5) @signature `Lcom/dmoney/security/operation/interfaces/IAsymmetricOperation;.Sign:([B[B)[B` @kind interface;
  #L2c1cc4.  v5:= temp @kind object;
  #L2c1cc6.  v6:= new `com.dmoney.security.operation.model.SessionKeyModel`;
  #L2c1cca.  call `<init>`(v6) @signature `Lcom/dmoney/security/operation/model/SessionKeyModel;.<init>:()V` @kind direct;
  #L2c1cd0.  call temp:= `getClientId`(v11) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getClientId:()Ljava/lang/String;` @kind virtual;
  #L2c1cd6.  v11:= temp @kind object;
  #L2c1cd8.  call `setIdentity`(v6, v11) @signature `Lcom/dmoney/security/operation/model/SessionKeyModel;.setIdentity:(Ljava/lang/String;)V` @kind virtual;
  #L2c1cde.  call `setMacKey`(v6, v1) @signature `Lcom/dmoney/security/operation/model/SessionKeyModel;.setMacKey:([B)V` @kind virtual;
  #L2c1ce4.  call `setSecretKey`(v6, v2) @signature `Lcom/dmoney/security/operation/model/SessionKeyModel;.setSecretKey:([B)V` @kind virtual;
  #L2c1cea.  call temp:= `AddSessionKeyByIdentity`(v3, v6) @signature `Lcom/dmoney/security/operation/interfaces/IKeyStore;.AddSessionKeyByIdentity:(Lcom/dmoney/security/operation/model/SessionKeyModel;)Z` @kind interface;
  #L2c1cf0.  v11:= 2I;
  #L2c1cf2.  call temp:= `encodeToString`(v4, v11) @signature `Landroid/util/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L2c1cf8.  v1:= temp @kind object;
  #L2c1cfa.  call `setEncryptedMACKey`(v0, v1) @signature `Lcom/dmoney/security/model/servicemodels/responses/GenerateSessionKeyForKeyExchangeResponse;.setEncryptedMACKey:(Ljava/lang/String;)V` @kind virtual;
  #L2c1d00.  call temp:= `encodeToString`(v7, v11) @signature `Landroid/util/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L2c1d06.  v1:= temp @kind object;
  #L2c1d08.  call `setEncryptedSessionKey`(v0, v1) @signature `Lcom/dmoney/security/model/servicemodels/responses/GenerateSessionKeyForKeyExchangeResponse;.setEncryptedSessionKey:(Ljava/lang/String;)V` @kind virtual;
  #L2c1d0e.  call temp:= `encodeToString`(v8, v11) @signature `Landroid/util/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L2c1d14.  v1:= temp @kind object;
  #L2c1d16.  call `setRandomNumber`(v0, v1) @signature `Lcom/dmoney/security/model/servicemodels/responses/GenerateSessionKeyForKeyExchangeResponse;.setRandomNumber:(Ljava/lang/String;)V` @kind virtual;
  #L2c1d1c.  call temp:= `encodeToString`(v5, v11) @signature `Landroid/util/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L2c1d22.  v11:= temp @kind object;
  #L2c1d24.  call `setSignatureForRandom`(v0, v11) @signature `Lcom/dmoney/security/model/servicemodels/responses/GenerateSessionKeyForKeyExchangeResponse;.setSignatureForRandom:(Ljava/lang/String;)V` @kind virtual;
  #L2c1d2a.  return v0 @kind object;
}
procedure `com.dmoney.security.model.servicemodels.responses.GetNFCKeyResponse` `GetNFCKey`(`com.dmoney.security.impl.KeyExchangeService` v7 @kind this, `com.dmoney.security.model.servicemodels.requests.GetNFCKeyRequest` v8 @kind object) @signature `Lcom/dmoney/security/impl/KeyExchangeService;.GetNFCKey:(Lcom/dmoney/security/model/servicemodels/requests/GetNFCKeyRequest;)Lcom/dmoney/security/model/servicemodels/responses/GetNFCKeyResponse;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2c1d3c.  call temp:= `GetOperator`() @signature `Lcom/dmoney/security/operation/factory/OperatorFactory;.GetOperator:()Lcom/dmoney/security/operation/interfaces/IOperator;` @kind static;
  #L2c1d42.  v0:= temp @kind object;
  #L2c1d44.  call temp:= `GetKeyStore`(v0) @signature `Lcom/dmoney/security/operation/interfaces/IOperator;.GetKeyStore:()Lcom/dmoney/security/operation/interfaces/IKeyStore;` @kind interface;
  #L2c1d4a.  v0:= temp @kind object;
  #L2c1d4c.  v1:= v7.`com.dmoney.security.impl.KeyExchangeService.a` @type ^`com.dmoney.security.operation.interfaces.IOperator` @kind object;
  #L2c1d50.  call temp:= `GetSymmetricOperation`(v1) @signature `Lcom/dmoney/security/operation/interfaces/IOperator;.GetSymmetricOperation:()Lcom/dmoney/security/operation/interfaces/ISymmetricOperation;` @kind interface;
  #L2c1d56.  v1:= temp @kind object;
  #L2c1d58.  call temp:= `getClientType`(v8) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getClientType:()Ljava/lang/String;` @kind virtual;
  #L2c1d5e.  v2:= temp @kind object;
  #L2c1d60.  if v2 == 0 then goto L2c1d8e;
  #L2c1d64.  call temp:= `getClientType`(v8) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getClientType:()Ljava/lang/String;` @kind virtual;
  #L2c1d6a.  v2:= temp @kind object;
  #L2c1d6c.  v3:= "" @kind object;
  #L2c1d70.  if v2 == v3 then goto L2c1d8e;
  #L2c1d74.  call temp:= `getClientType`(v8) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getClientType:()Ljava/lang/String;` @kind virtual;
  #L2c1d7a.  v2:= temp @kind object;
  #L2c1d7c.  v3:= "dmoney-customer-wallet" @kind object;
  #L2c1d80.  if v2 != v3 then goto L2c1d8e;
  #L2c1d84.  call temp:= `getClientType`(v8) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getClientType:()Ljava/lang/String;` @kind virtual;
  #L2c1d8a.  v2:= temp @kind object;
  #L2c1d8c.  goto L2c1d96;
  #L2c1d8e.  call temp:= `getClientId`(v8) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getClientId:()Ljava/lang/String;` @kind virtual;
  #L2c1d94.  v2:= temp @kind object;
  #L2c1d96.  call temp:= `GetSessionKeyByIdentity`(v0, v2) @signature `Lcom/dmoney/security/operation/interfaces/IKeyStore;.GetSessionKeyByIdentity:(Ljava/lang/String;)Lcom/dmoney/security/operation/model/SessionKeyModel;` @kind interface;
  #L2c1d9c.  v3:= temp @kind object;
  #L2c1d9e.  if v3 == 0 then goto L2c1db0;
  #L2c1da2.  call temp:= `getSecretKey`(v3) @signature `Lcom/dmoney/security/operation/model/SessionKeyModel;.getSecretKey:()[B` @kind virtual;
  #L2c1da8.  v4:= temp @kind object;
  #L2c1daa.  if v4 == 0 then goto L2c1db0;
  #L2c1dae.  goto L2c1de6;
  #L2c1db0.  v4:= new `java.lang.IllegalArgumentException`;
  #L2c1db4.  v5:= new `java.lang.StringBuilder`;
  #L2c1db8.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c1dbe.  v6:= "Failed to get key info from database by Client ID: " @kind object;
  #L2c1dc2.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1dc8.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1dce.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c1dd4.  v2:= temp @kind object;
  #L2c1dd6.  call `<init>`(v4, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c1ddc.  throw v4;
  #L2c1dde.  v2:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L2c1de0.  call `printStackTrace`(v2) @signature `Ljava/lang/IllegalArgumentException;.printStackTrace:()V` @kind virtual;
  #L2c1de6.  v2:= new `java.lang.StringBuilder`;
  #L2c1dea.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c1df0.  v4:= "DM-CEK-V" @kind object;
  #L2c1df4.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1dfa.  call temp:= `getVersion`(v8) @signature `Lcom/dmoney/security/model/servicemodels/requests/GetNFCKeyRequest;.getVersion:()I` @kind virtual;
  #L2c1e00.  v4:= temp;
  #L2c1e02.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1e08.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c1e0e.  v2:= temp @kind object;
  #L2c1e10.  call temp:= `GetKeyInfoByIdentity`(v0, v2) @signature `Lcom/dmoney/security/operation/interfaces/IKeyStore;.GetKeyInfoByIdentity:(Ljava/lang/String;)Lcom/dmoney/security/operation/model/KeyStoreModel;` @kind interface;
  #L2c1e16.  v0:= temp @kind object;
  #L2c1e18.  if v0 == 0 then goto L2c1e2a;
  #L2c1e1c.  call temp:= `getSecretKey`(v0) @signature `Lcom/dmoney/security/operation/model/KeyStoreModel;.getSecretKey:()[B` @kind virtual;
  #L2c1e22.  v2:= temp @kind object;
  #L2c1e24.  if v2 == 0 then goto L2c1e2a;
  #L2c1e28.  goto L2c1e68;
  #L2c1e2a.  v2:= new `java.lang.IllegalArgumentException`;
  #L2c1e2e.  v4:= new `java.lang.StringBuilder`;
  #L2c1e32.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c1e38.  v5:= "Failed to get NFC Secret key info from database by Client ID: " @kind object;
  #L2c1e3c.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1e42.  call temp:= `getClientId`(v8) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getClientId:()Ljava/lang/String;` @kind virtual;
  #L2c1e48.  v8:= temp @kind object;
  #L2c1e4a.  call temp:= `append`(v4, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c1e50.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c1e56.  v8:= temp @kind object;
  #L2c1e58.  call `<init>`(v2, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c1e5e.  throw v2;
  #L2c1e60.  v8:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L2c1e62.  call `printStackTrace`(v8) @signature `Ljava/lang/IllegalArgumentException;.printStackTrace:()V` @kind virtual;
  #L2c1e68.  v8:= new `com.dmoney.security.model.servicemodels.responses.GetNFCKeyResponse`;
  #L2c1e6c.  call `<init>`(v8) @signature `Lcom/dmoney/security/model/servicemodels/responses/GetNFCKeyResponse;.<init>:()V` @kind direct;
  #L2c1e72.  call temp:= `getSecretKey`(v0) @signature `Lcom/dmoney/security/operation/model/KeyStoreModel;.getSecretKey:()[B` @kind virtual;
  #L2c1e78.  v0:= temp @kind object;
  #L2c1e7a.  call temp:= `getSecretKey`(v3) @signature `Lcom/dmoney/security/operation/model/SessionKeyModel;.getSecretKey:()[B` @kind virtual;
  #L2c1e80.  v2:= temp @kind object;
  #L2c1e82.  call temp:= `Encrypt`(v1, v0, v2) @signature `Lcom/dmoney/security/operation/interfaces/ISymmetricOperation;.Encrypt:([B[B)[B` @kind interface;
  #L2c1e88.  v0:= temp @kind object;
  #L2c1e8a.  v1:= 2I;
  #L2c1e8c.  call temp:= `encodeToString`(v0, v1) @signature `Landroid/util/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L2c1e92.  v0:= temp @kind object;
  #L2c1e94.  call `setEncryptedNFCSecretKey`(v8, v0) @signature `Lcom/dmoney/security/model/servicemodels/responses/GetNFCKeyResponse;.setEncryptedNFCSecretKey:(Ljava/lang/String;)V` @kind virtual;
  #L2c1e9a.  return v8 @kind object;
  catch `java.lang.IllegalArgumentException` @[L2c1db0..L2c1dde] goto L2c1dde;
  catch `java.lang.IllegalArgumentException` @[L2c1e2a..L2c1e60] goto L2c1e60;
}
procedure `com.dmoney.security.model.servicemodels.responses.VerifySessionKeyForKeyExchangeResponse` `VerifySessionKey`(`com.dmoney.security.impl.KeyExchangeService` v5 @kind this, `com.dmoney.security.model.servicemodels.requests.VerifySessionKeyForKeyExchangeRequest` v6 @kind object) @signature `Lcom/dmoney/security/impl/KeyExchangeService;.VerifySessionKey:(Lcom/dmoney/security/model/servicemodels/requests/VerifySessionKeyForKeyExchangeRequest;)Lcom/dmoney/security/model/servicemodels/responses/VerifySessionKeyForKeyExchangeResponse;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2c1ec8.  v0:= new `com.dmoney.security.model.servicemodels.responses.VerifySessionKeyForKeyExchangeResponse`;
  #L2c1ecc.  call `<init>`(v0) @signature `Lcom/dmoney/security/model/servicemodels/responses/VerifySessionKeyForKeyExchangeResponse;.<init>:()V` @kind direct;
  #L2c1ed2.  v1:= v5.`com.dmoney.security.impl.KeyExchangeService.a` @type ^`com.dmoney.security.operation.interfaces.IOperator` @kind object;
  #L2c1ed6.  call temp:= `GetKeyStore`(v1) @signature `Lcom/dmoney/security/operation/interfaces/IOperator;.GetKeyStore:()Lcom/dmoney/security/operation/interfaces/IKeyStore;` @kind interface;
  #L2c1edc.  v1:= temp @kind object;
  #L2c1ede.  call temp:= `getServerId`(v6) @signature `Lcom/dmoney/security/model/servicemodels/requests/ClientServerRequest;.getServerId:()Ljava/lang/String;` @kind virtual;
  #L2c1ee4.  v2:= temp @kind object;
  #L2c1ee6.  call temp:= `GetKeyInfoByIdentity`(v1, v2) @signature `Lcom/dmoney/security/operation/interfaces/IKeyStore;.GetKeyInfoByIdentity:(Ljava/lang/String;)Lcom/dmoney/security/operation/model/KeyStoreModel;` @kind interface;
  #L2c1eec.  v1:= temp @kind object;
  #L2c1eee.  call temp:= `getPublicKey`(v1) @signature `Lcom/dmoney/security/operation/model/KeyStoreModel;.getPublicKey:()[B` @kind virtual;
  #L2c1ef4.  v1:= temp @kind object;
  #L2c1ef6.  v2:= v5.`com.dmoney.security.impl.KeyExchangeService.a` @type ^`com.dmoney.security.operation.interfaces.IOperator` @kind object;
  #L2c1efa.  call temp:= `GetAsymmetricOperation`(v2) @signature `Lcom/dmoney/security/operation/interfaces/IOperator;.GetAsymmetricOperation:()Lcom/dmoney/security/operation/interfaces/IAsymmetricOperation;` @kind interface;
  #L2c1f00.  v2:= temp @kind object;
  #L2c1f02.  call temp:= `getRandomNumber`(v6) @signature `Lcom/dmoney/security/model/servicemodels/requests/VerifySessionKeyForKeyExchangeRequest;.getRandomNumber:()Ljava/lang/String;` @kind virtual;
  #L2c1f08.  v3:= temp @kind object;
  #L2c1f0a.  v4:= 2I;
  #L2c1f0c.  call temp:= `decode`(v3, v4) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L2c1f12.  v3:= temp @kind object;
  #L2c1f14.  call temp:= `getSignatureForRandom`(v6) @signature `Lcom/dmoney/security/model/servicemodels/requests/VerifySessionKeyForKeyExchangeRequest;.getSignatureForRandom:()Ljava/lang/String;` @kind virtual;
  #L2c1f1a.  v6:= temp @kind object;
  #L2c1f1c.  call temp:= `decode`(v6, v4) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L2c1f22.  v6:= temp @kind object;
  #L2c1f24.  call temp:= `Verify`(v2, v3, v6, v1) @signature `Lcom/dmoney/security/operation/interfaces/IAsymmetricOperation;.Verify:([B[B[B)Z` @kind interface;
  #L2c1f2a.  v6:= temp;
  #L2c1f2c.  call `setVerificationStatus`(v0, v6) @signature `Lcom/dmoney/security/model/servicemodels/responses/VerifySessionKeyForKeyExchangeResponse;.setVerificationStatus:(Z)V` @kind virtual;
  #L2c1f32.  return v0 @kind object;
}
