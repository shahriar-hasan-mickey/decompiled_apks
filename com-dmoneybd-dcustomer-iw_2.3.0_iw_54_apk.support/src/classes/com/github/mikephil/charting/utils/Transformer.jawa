record `com.github.mikephil.charting.utils.Transformer` @kind class @AccessFlag PUBLIC {
  `float`[] `com.github.mikephil.charting.utils.Transformer.a` @AccessFlag ;
  `android.graphics.Matrix` `com.github.mikephil.charting.utils.Transformer.mMBuffer1` @AccessFlag PRIVATE;
  `android.graphics.Matrix` `com.github.mikephil.charting.utils.Transformer.mMBuffer2` @AccessFlag PRIVATE;
  `android.graphics.Matrix` `com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @AccessFlag PROTECTED;
  `android.graphics.Matrix` `com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @AccessFlag PROTECTED;
  `android.graphics.Matrix` `com.github.mikephil.charting.utils.Transformer.mPixelToValueMatrixBuffer` @AccessFlag PROTECTED;
  `com.github.mikephil.charting.utils.ViewPortHandler` `com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @AccessFlag PROTECTED;
  `float`[] `com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesBubble` @AccessFlag PROTECTED;
  `float`[] `com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesCandle` @AccessFlag PROTECTED;
  `float`[] `com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesLine` @AccessFlag PROTECTED;
  `float`[] `com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesScatter` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`com.github.mikephil.charting.utils.Transformer` v2 @kind this, `com.github.mikephil.charting.utils.ViewPortHandler` v3 @kind object) @signature `Lcom/github/mikephil/charting/utils/Transformer;.<init>:(Lcom/github/mikephil/charting/utils/ViewPortHandler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3a579c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a57a2.  v0:= new `android.graphics.Matrix`;
  #L3a57a6.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L3a57ac.  v2.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` := v0 @kind object;
  #L3a57b0.  v0:= new `android.graphics.Matrix`;
  #L3a57b4.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L3a57ba.  v2.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` := v0 @kind object;
  #L3a57be.  v0:= 1I;
  #L3a57c0.  v1:= new `float`[v0];
  #L3a57c4.  v2.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesScatter` @type ^`float`[] := v1 @kind object;
  #L3a57c8.  v1:= new `float`[v0];
  #L3a57cc.  v2.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesBubble` @type ^`float`[] := v1 @kind object;
  #L3a57d0.  v1:= new `float`[v0];
  #L3a57d4.  v2.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesLine` @type ^`float`[] := v1 @kind object;
  #L3a57d8.  v0:= new `float`[v0];
  #L3a57dc.  v2.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesCandle` @type ^`float`[] := v0 @kind object;
  #L3a57e0.  v0:= new `android.graphics.Matrix`;
  #L3a57e4.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L3a57ea.  v2.`com.github.mikephil.charting.utils.Transformer.mPixelToValueMatrixBuffer` @type ^`android.graphics.Matrix` := v0 @kind object;
  #L3a57ee.  v0:= 2I;
  #L3a57f0.  v0:= new `float`[v0];
  #L3a57f4.  v2.`com.github.mikephil.charting.utils.Transformer.a` @type ^`float`[] := v0 @kind object;
  #L3a57f8.  v0:= new `android.graphics.Matrix`;
  #L3a57fc.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L3a5802.  v2.`com.github.mikephil.charting.utils.Transformer.mMBuffer1` @type ^`android.graphics.Matrix` := v0 @kind object;
  #L3a5806.  v0:= new `android.graphics.Matrix`;
  #L3a580a.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L3a5810.  v2.`com.github.mikephil.charting.utils.Transformer.mMBuffer2` @type ^`android.graphics.Matrix` := v0 @kind object;
  #L3a5814.  v2.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` := v3 @kind object;
  #L3a5818.  return @kind void;
}
procedure `float`[] `generateTransformedValuesBubble`(`com.github.mikephil.charting.utils.Transformer` v4 @kind this, `com.github.mikephil.charting.interfaces.datasets.IBubbleDataSet` v5 @kind object, `float` v6 , `int` v7 , `int` v8 ) @signature `Lcom/github/mikephil/charting/utils/Transformer;.generateTransformedValuesBubble:(Lcom/github/mikephil/charting/interfaces/datasets/IBubbleDataSet;FII)[F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a5540.  v8:= v8 - v7 @kind int;
  #L3a5542.  v8:= v8 + 1;
  #L3a5546.  v8:= v8 * 2;
  #L3a554a.  v0:= v4.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesBubble` @type ^`float`[] @kind object;
  #L3a554e.  v0:= length @variable v0;
  #L3a5550.  if v0 == v8 then goto L3a555c;
  #L3a5554.  v0:= new `float`[v8];
  #L3a5558.  v4.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesBubble` @type ^`float`[] := v0 @kind object;
  #L3a555c.  v0:= v4.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesBubble` @type ^`float`[] @kind object;
  #L3a5560.  v1:= 0I;
  #L3a5562.  if v1 >= v8 then goto L3a55ae;
  #L3a5566.  v2:= v1 / 2;
  #L3a556a.  v2:= v2 + v7 @kind int;
  #L3a556c.  call temp:= `getEntryForIndex`(v5, v2) @signature `Lcom/github/mikephil/charting/interfaces/datasets/IDataSet;.getEntryForIndex:(I)Lcom/github/mikephil/charting/data/Entry;` @kind interface;
  #L3a5572.  v2:= temp @kind object;
  #L3a5574.  if v2 == 0 then goto L3a559a;
  #L3a5578.  call temp:= `getX`(v2) @signature `Lcom/github/mikephil/charting/data/Entry;.getX:()F` @kind virtual;
  #L3a557e.  v3:= temp;
  #L3a5580.  v0[v1]:= v3;
  #L3a5584.  v3:= v1 + 1;
  #L3a5588.  call temp:= `getY`(v2) @signature `Lcom/github/mikephil/charting/data/BaseEntry;.getY:()F` @kind virtual;
  #L3a558e.  v2:= temp;
  #L3a5590.  v2:= v2 * v6 @kind float;
  #L3a5594.  v0[v3]:= v2;
  #L3a5598.  goto L3a55a8;
  #L3a559a.  v2:= 0I;
  #L3a559c.  v0[v1]:= v2;
  #L3a55a0.  v3:= v1 + 1;
  #L3a55a4.  v0[v3]:= v2;
  #L3a55a8.  v1:= v1 + 2;
  #L3a55ac.  goto L3a5562;
  #L3a55ae.  call temp:= `getValueToPixelMatrix`(v4) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValueToPixelMatrix:()Landroid/graphics/Matrix;` @kind virtual;
  #L3a55b4.  v5:= temp @kind object;
  #L3a55b6.  call `mapPoints`(v5, v0) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L3a55bc.  return v0 @kind object;
}
procedure `float`[] `generateTransformedValuesCandle`(`com.github.mikephil.charting.utils.Transformer` v3 @kind this, `com.github.mikephil.charting.interfaces.datasets.ICandleDataSet` v4 @kind object, `float` v5 , `float` v6 , `int` v7 , `int` v8 ) @signature `Lcom/github/mikephil/charting/utils/Transformer;.generateTransformedValuesCandle:(Lcom/github/mikephil/charting/interfaces/datasets/ICandleDataSet;FFII)[F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a55d0.  v8:= v8 - v7 @kind int;
  #L3a55d2.  v8:= (`float`) v8 @kind i2f;
  #L3a55d4.  v8:= v8 * v5 @kind float;
  #L3a55d8.  v5:= 1.0F;
  #L3a55dc.  v8:= v8 + v5 @kind float;
  #L3a55de.  v5:= (`int`) v8 @kind f2i;
  #L3a55e0.  v5:= v5 * 2;
  #L3a55e4.  v8:= v3.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesCandle` @type ^`float`[] @kind object;
  #L3a55e8.  v8:= length @variable v8;
  #L3a55ea.  if v8 == v5 then goto L3a55f6;
  #L3a55ee.  v8:= new `float`[v5];
  #L3a55f2.  v3.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesCandle` @type ^`float`[] := v8 @kind object;
  #L3a55f6.  v8:= v3.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesCandle` @type ^`float`[] @kind object;
  #L3a55fa.  v0:= 0I;
  #L3a55fc.  if v0 >= v5 then goto L3a564c;
  #L3a5600.  v1:= v0 / 2;
  #L3a5604.  v1:= v1 + v7 @kind int;
  #L3a5606.  call temp:= `getEntryForIndex`(v4, v1) @signature `Lcom/github/mikephil/charting/interfaces/datasets/IDataSet;.getEntryForIndex:(I)Lcom/github/mikephil/charting/data/Entry;` @kind interface;
  #L3a560c.  v1:= temp @kind object;
  #L3a560e.  v1:= (`com.github.mikephil.charting.data.CandleEntry`) v1 @kind object;
  #L3a5612.  if v1 == 0 then goto L3a5638;
  #L3a5616.  call temp:= `getX`(v1) @signature `Lcom/github/mikephil/charting/data/Entry;.getX:()F` @kind virtual;
  #L3a561c.  v2:= temp;
  #L3a561e.  v8[v0]:= v2;
  #L3a5622.  v2:= v0 + 1;
  #L3a5626.  call temp:= `getHigh`(v1) @signature `Lcom/github/mikephil/charting/data/CandleEntry;.getHigh:()F` @kind virtual;
  #L3a562c.  v1:= temp;
  #L3a562e.  v1:= v1 * v6 @kind float;
  #L3a5632.  v8[v2]:= v1;
  #L3a5636.  goto L3a5646;
  #L3a5638.  v1:= 0I;
  #L3a563a.  v8[v0]:= v1;
  #L3a563e.  v2:= v0 + 1;
  #L3a5642.  v8[v2]:= v1;
  #L3a5646.  v0:= v0 + 2;
  #L3a564a.  goto L3a55fc;
  #L3a564c.  call temp:= `getValueToPixelMatrix`(v3) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValueToPixelMatrix:()Landroid/graphics/Matrix;` @kind virtual;
  #L3a5652.  v4:= temp @kind object;
  #L3a5654.  call `mapPoints`(v4, v8) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L3a565a.  return v8 @kind object;
}
procedure `float`[] `generateTransformedValuesLine`(`com.github.mikephil.charting.utils.Transformer` v3 @kind this, `com.github.mikephil.charting.interfaces.datasets.ILineDataSet` v4 @kind object, `float` v5 , `float` v6 , `int` v7 , `int` v8 ) @signature `Lcom/github/mikephil/charting/utils/Transformer;.generateTransformedValuesLine:(Lcom/github/mikephil/charting/interfaces/datasets/ILineDataSet;FFII)[F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a566c.  v8:= v8 - v7 @kind int;
  #L3a566e.  v8:= (`float`) v8 @kind i2f;
  #L3a5670.  v8:= v8 * v5 @kind float;
  #L3a5674.  v5:= (`int`) v8 @kind f2i;
  #L3a5676.  v5:= v5 + 1;
  #L3a567a.  v5:= v5 * 2;
  #L3a567e.  v8:= v3.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesLine` @type ^`float`[] @kind object;
  #L3a5682.  v8:= length @variable v8;
  #L3a5684.  if v8 == v5 then goto L3a5690;
  #L3a5688.  v8:= new `float`[v5];
  #L3a568c.  v3.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesLine` @type ^`float`[] := v8 @kind object;
  #L3a5690.  v8:= v3.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesLine` @type ^`float`[] @kind object;
  #L3a5694.  v0:= 0I;
  #L3a5696.  if v0 >= v5 then goto L3a56e2;
  #L3a569a.  v1:= v0 / 2;
  #L3a569e.  v1:= v1 + v7 @kind int;
  #L3a56a0.  call temp:= `getEntryForIndex`(v4, v1) @signature `Lcom/github/mikephil/charting/interfaces/datasets/IDataSet;.getEntryForIndex:(I)Lcom/github/mikephil/charting/data/Entry;` @kind interface;
  #L3a56a6.  v1:= temp @kind object;
  #L3a56a8.  if v1 == 0 then goto L3a56ce;
  #L3a56ac.  call temp:= `getX`(v1) @signature `Lcom/github/mikephil/charting/data/Entry;.getX:()F` @kind virtual;
  #L3a56b2.  v2:= temp;
  #L3a56b4.  v8[v0]:= v2;
  #L3a56b8.  v2:= v0 + 1;
  #L3a56bc.  call temp:= `getY`(v1) @signature `Lcom/github/mikephil/charting/data/BaseEntry;.getY:()F` @kind virtual;
  #L3a56c2.  v1:= temp;
  #L3a56c4.  v1:= v1 * v6 @kind float;
  #L3a56c8.  v8[v2]:= v1;
  #L3a56cc.  goto L3a56dc;
  #L3a56ce.  v1:= 0I;
  #L3a56d0.  v8[v0]:= v1;
  #L3a56d4.  v2:= v0 + 1;
  #L3a56d8.  v8[v2]:= v1;
  #L3a56dc.  v0:= v0 + 2;
  #L3a56e0.  goto L3a5696;
  #L3a56e2.  call temp:= `getValueToPixelMatrix`(v3) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValueToPixelMatrix:()Landroid/graphics/Matrix;` @kind virtual;
  #L3a56e8.  v4:= temp @kind object;
  #L3a56ea.  call `mapPoints`(v4, v8) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L3a56f0.  return v8 @kind object;
}
procedure `float`[] `generateTransformedValuesScatter`(`com.github.mikephil.charting.utils.Transformer` v3 @kind this, `com.github.mikephil.charting.interfaces.datasets.IScatterDataSet` v4 @kind object, `float` v5 , `float` v6 , `int` v7 , `int` v8 ) @signature `Lcom/github/mikephil/charting/utils/Transformer;.generateTransformedValuesScatter:(Lcom/github/mikephil/charting/interfaces/datasets/IScatterDataSet;FFII)[F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a5704.  v8:= v8 - v7 @kind int;
  #L3a5706.  v8:= (`float`) v8 @kind i2f;
  #L3a5708.  v8:= v8 * v5 @kind float;
  #L3a570c.  v5:= 1.0F;
  #L3a5710.  v8:= v8 + v5 @kind float;
  #L3a5712.  v5:= (`int`) v8 @kind f2i;
  #L3a5714.  v5:= v5 * 2;
  #L3a5718.  v8:= v3.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesScatter` @type ^`float`[] @kind object;
  #L3a571c.  v8:= length @variable v8;
  #L3a571e.  if v8 == v5 then goto L3a572a;
  #L3a5722.  v8:= new `float`[v5];
  #L3a5726.  v3.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesScatter` @type ^`float`[] := v8 @kind object;
  #L3a572a.  v8:= v3.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesScatter` @type ^`float`[] @kind object;
  #L3a572e.  v0:= 0I;
  #L3a5730.  if v0 >= v5 then goto L3a577c;
  #L3a5734.  v1:= v0 / 2;
  #L3a5738.  v1:= v1 + v7 @kind int;
  #L3a573a.  call temp:= `getEntryForIndex`(v4, v1) @signature `Lcom/github/mikephil/charting/interfaces/datasets/IDataSet;.getEntryForIndex:(I)Lcom/github/mikephil/charting/data/Entry;` @kind interface;
  #L3a5740.  v1:= temp @kind object;
  #L3a5742.  if v1 == 0 then goto L3a5768;
  #L3a5746.  call temp:= `getX`(v1) @signature `Lcom/github/mikephil/charting/data/Entry;.getX:()F` @kind virtual;
  #L3a574c.  v2:= temp;
  #L3a574e.  v8[v0]:= v2;
  #L3a5752.  v2:= v0 + 1;
  #L3a5756.  call temp:= `getY`(v1) @signature `Lcom/github/mikephil/charting/data/BaseEntry;.getY:()F` @kind virtual;
  #L3a575c.  v1:= temp;
  #L3a575e.  v1:= v1 * v6 @kind float;
  #L3a5762.  v8[v2]:= v1;
  #L3a5766.  goto L3a5776;
  #L3a5768.  v1:= 0I;
  #L3a576a.  v8[v0]:= v1;
  #L3a576e.  v2:= v0 + 1;
  #L3a5772.  v8[v2]:= v1;
  #L3a5776.  v0:= v0 + 2;
  #L3a577a.  goto L3a5730;
  #L3a577c.  call temp:= `getValueToPixelMatrix`(v3) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValueToPixelMatrix:()Landroid/graphics/Matrix;` @kind virtual;
  #L3a5782.  v4:= temp @kind object;
  #L3a5784.  call `mapPoints`(v4, v8) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L3a578a.  return v8 @kind object;
}
procedure `android.graphics.Matrix` `getOffsetMatrix`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getOffsetMatrix:()Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a5440.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L3a5444.  return v0 @kind object;
}
procedure `com.github.mikephil.charting.utils.MPPointD` `getPixelForValues`(`com.github.mikephil.charting.utils.Transformer` v2 @kind this, `float` v3 , `float` v4 ) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getPixelForValues:(FF)Lcom/github/mikephil/charting/utils/MPPointD;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a54dc.  v0:= v2.`com.github.mikephil.charting.utils.Transformer.a` @type ^`float`[] @kind object;
  #L3a54e0.  v1:= 0I;
  #L3a54e2.  v0[v1]:= v3;
  #L3a54e6.  v3:= 1I;
  #L3a54e8.  v0[v3]:= v4;
  #L3a54ec.  call `pointValuesToPixel`(v2, v0) @signature `Lcom/github/mikephil/charting/utils/Transformer;.pointValuesToPixel:([F)V` @kind virtual;
  #L3a54f2.  v4:= v2.`com.github.mikephil.charting.utils.Transformer.a` @type ^`float`[] @kind object;
  #L3a54f6.  v0:= v4[v1];
  #L3a54fa.  v0:= (`double`) v0 @kind f2d;
  #L3a54fc.  v3:= v4[v3];
  #L3a5500.  v3:= (`double`) v3 @kind f2d;
  #L3a5502.  call temp:= `getInstance`(v0, v3) @signature `Lcom/github/mikephil/charting/utils/MPPointD;.getInstance:(DD)Lcom/github/mikephil/charting/utils/MPPointD;` @kind static;
  #L3a5508.  v3:= temp @kind object;
  #L3a550a.  return v3 @kind object;
}
procedure `android.graphics.Matrix` `getPixelToValueMatrix`(`com.github.mikephil.charting.utils.Transformer` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getPixelToValueMatrix:()Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a5458.  call temp:= `getValueToPixelMatrix`(v2) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValueToPixelMatrix:()Landroid/graphics/Matrix;` @kind virtual;
  #L3a545e.  v0:= temp @kind object;
  #L3a5460.  v1:= v2.`com.github.mikephil.charting.utils.Transformer.mMBuffer2` @type ^`android.graphics.Matrix` @kind object;
  #L3a5464.  call temp:= `invert`(v0, v1) @signature `Landroid/graphics/Matrix;.invert:(Landroid/graphics/Matrix;)Z` @kind virtual;
  #L3a546a.  v0:= v2.`com.github.mikephil.charting.utils.Transformer.mMBuffer2` @type ^`android.graphics.Matrix` @kind object;
  #L3a546e.  return v0 @kind object;
}
procedure `android.graphics.Matrix` `getValueMatrix`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValueMatrix:()Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a5480.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L3a5484.  return v0 @kind object;
}
procedure `android.graphics.Matrix` `getValueToPixelMatrix`(`com.github.mikephil.charting.utils.Transformer` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValueToPixelMatrix:()Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a5498.  v0:= v2.`com.github.mikephil.charting.utils.Transformer.mMBuffer1` @type ^`android.graphics.Matrix` @kind object;
  #L3a549c.  v1:= v2.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L3a54a0.  call `set`(v0, v1) @signature `Landroid/graphics/Matrix;.set:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L3a54a6.  v0:= v2.`com.github.mikephil.charting.utils.Transformer.mMBuffer1` @type ^`android.graphics.Matrix` @kind object;
  #L3a54aa.  v1:= v2.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L3a54ae.  v1:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L3a54b2.  call temp:= `postConcat`(v0, v1) @signature `Landroid/graphics/Matrix;.postConcat:(Landroid/graphics/Matrix;)Z` @kind virtual;
  #L3a54b8.  v0:= v2.`com.github.mikephil.charting.utils.Transformer.mMBuffer1` @type ^`android.graphics.Matrix` @kind object;
  #L3a54bc.  v1:= v2.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L3a54c0.  call temp:= `postConcat`(v0, v1) @signature `Landroid/graphics/Matrix;.postConcat:(Landroid/graphics/Matrix;)Z` @kind virtual;
  #L3a54c6.  v0:= v2.`com.github.mikephil.charting.utils.Transformer.mMBuffer1` @type ^`android.graphics.Matrix` @kind object;
  #L3a54ca.  return v0 @kind object;
}
procedure `com.github.mikephil.charting.utils.MPPointD` `getValuesByTouchPoint`(`com.github.mikephil.charting.utils.Transformer` v2 @kind this, `float` v3 , `float` v4 ) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValuesByTouchPoint:(FF)Lcom/github/mikephil/charting/utils/MPPointD;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a551c.  v0:= 0L;
  #L3a5520.  call temp:= `getInstance`(v0, v0) @signature `Lcom/github/mikephil/charting/utils/MPPointD;.getInstance:(DD)Lcom/github/mikephil/charting/utils/MPPointD;` @kind static;
  #L3a5526.  v0:= temp @kind object;
  #L3a5528.  call `getValuesByTouchPoint`(v2, v3, v4, v0) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValuesByTouchPoint:(FFLcom/github/mikephil/charting/utils/MPPointD;)V` @kind virtual;
  #L3a552e.  return v0 @kind object;
}
procedure `void` `getValuesByTouchPoint`(`com.github.mikephil.charting.utils.Transformer` v2 @kind this, `float` v3 , `float` v4 , `com.github.mikephil.charting.utils.MPPointD` v5 @kind object) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValuesByTouchPoint:(FFLcom/github/mikephil/charting/utils/MPPointD;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a582c.  v0:= v2.`com.github.mikephil.charting.utils.Transformer.a` @type ^`float`[] @kind object;
  #L3a5830.  v1:= 0I;
  #L3a5832.  v0[v1]:= v3;
  #L3a5836.  v3:= 1I;
  #L3a5838.  v0[v3]:= v4;
  #L3a583c.  call `pixelsToValue`(v2, v0) @signature `Lcom/github/mikephil/charting/utils/Transformer;.pixelsToValue:([F)V` @kind virtual;
  #L3a5842.  v4:= v2.`com.github.mikephil.charting.utils.Transformer.a` @type ^`float`[] @kind object;
  #L3a5846.  v0:= v4[v1];
  #L3a584a.  v0:= (`double`) v0 @kind f2d;
  #L3a584c.  v5.`com.github.mikephil.charting.utils.MPPointD.x` @type ^`double` := v0 @kind wide;
  #L3a5850.  v3:= v4[v3];
  #L3a5854.  v3:= (`double`) v3 @kind f2d;
  #L3a5856.  v5.`com.github.mikephil.charting.utils.MPPointD.y` @type ^`double` := v3 @kind wide;
  #L3a585a.  return @kind void;
}
procedure `void` `pathValueToPixel`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this, `android.graphics.Path` v2 @kind object) @signature `Lcom/github/mikephil/charting/utils/Transformer;.pathValueToPixel:(Landroid/graphics/Path;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a586c.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L3a5870.  call `transform`(v2, v0) @signature `Landroid/graphics/Path;.transform:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L3a5876.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L3a587a.  call temp:= `getMatrixTouch`(v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMatrixTouch:()Landroid/graphics/Matrix;` @kind virtual;
  #L3a5880.  v0:= temp @kind object;
  #L3a5882.  call `transform`(v2, v0) @signature `Landroid/graphics/Path;.transform:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L3a5888.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L3a588c.  call `transform`(v2, v0) @signature `Landroid/graphics/Path;.transform:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L3a5892.  return @kind void;
}
procedure `void` `pathValuesToPixel`(`com.github.mikephil.charting.utils.Transformer` v2 @kind this, `java.util.List` v3 @kind object) @signature `Lcom/github/mikephil/charting/utils/Transformer;.pathValuesToPixel:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a58a4.  v0:= 0I;
  #L3a58a6.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3a58ac.  v1:= temp;
  #L3a58ae.  if v0 >= v1 then goto L3a58ca;
  #L3a58b2.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3a58b8.  v1:= temp @kind object;
  #L3a58ba.  v1:= (`android.graphics.Path`) v1 @kind object;
  #L3a58be.  call `pathValueToPixel`(v2, v1) @signature `Lcom/github/mikephil/charting/utils/Transformer;.pathValueToPixel:(Landroid/graphics/Path;)V` @kind virtual;
  #L3a58c4.  v0:= v0 + 1;
  #L3a58c8.  goto L3a58a6;
  #L3a58ca.  return @kind void;
}
procedure `void` `pixelsToValue`(`com.github.mikephil.charting.utils.Transformer` v2 @kind this, `float`[] v3 @kind object) @signature `Lcom/github/mikephil/charting/utils/Transformer;.pixelsToValue:([F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a58dc.  v0:= v2.`com.github.mikephil.charting.utils.Transformer.mPixelToValueMatrixBuffer` @type ^`android.graphics.Matrix` @kind object;
  #L3a58e0.  call `reset`(v0) @signature `Landroid/graphics/Matrix;.reset:()V` @kind virtual;
  #L3a58e6.  v1:= v2.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L3a58ea.  call temp:= `invert`(v1, v0) @signature `Landroid/graphics/Matrix;.invert:(Landroid/graphics/Matrix;)Z` @kind virtual;
  #L3a58f0.  call `mapPoints`(v0, v3) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L3a58f6.  v1:= v2.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L3a58fa.  call temp:= `getMatrixTouch`(v1) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMatrixTouch:()Landroid/graphics/Matrix;` @kind virtual;
  #L3a5900.  v1:= temp @kind object;
  #L3a5902.  call temp:= `invert`(v1, v0) @signature `Landroid/graphics/Matrix;.invert:(Landroid/graphics/Matrix;)Z` @kind virtual;
  #L3a5908.  call `mapPoints`(v0, v3) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L3a590e.  v1:= v2.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L3a5912.  call temp:= `invert`(v1, v0) @signature `Landroid/graphics/Matrix;.invert:(Landroid/graphics/Matrix;)Z` @kind virtual;
  #L3a5918.  call `mapPoints`(v0, v3) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L3a591e.  return @kind void;
}
procedure `void` `pointValuesToPixel`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this, `float`[] v2 @kind object) @signature `Lcom/github/mikephil/charting/utils/Transformer;.pointValuesToPixel:([F)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a5930.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L3a5934.  call `mapPoints`(v0, v2) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L3a593a.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L3a593e.  call temp:= `getMatrixTouch`(v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMatrixTouch:()Landroid/graphics/Matrix;` @kind virtual;
  #L3a5944.  v0:= temp @kind object;
  #L3a5946.  call `mapPoints`(v0, v2) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L3a594c.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L3a5950.  call `mapPoints`(v0, v2) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L3a5956.  return @kind void;
}
procedure `void` `prepareMatrixOffset`(`com.github.mikephil.charting.utils.Transformer` v3 @kind this, `boolean` v4 ) @signature `Lcom/github/mikephil/charting/utils/Transformer;.prepareMatrixOffset:(Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a5968.  v0:= v3.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L3a596c.  call `reset`(v0) @signature `Landroid/graphics/Matrix;.reset:()V` @kind virtual;
  #L3a5972.  if v4 != 0 then goto L3a59a8;
  #L3a5976.  v4:= v3.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L3a597a.  v0:= v3.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L3a597e.  call temp:= `offsetLeft`(v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetLeft:()F` @kind virtual;
  #L3a5984.  v0:= temp;
  #L3a5986.  v1:= v3.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L3a598a.  call temp:= `getChartHeight`(v1) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getChartHeight:()F` @kind virtual;
  #L3a5990.  v1:= temp;
  #L3a5992.  v2:= v3.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L3a5996.  call temp:= `offsetBottom`(v2) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetBottom:()F` @kind virtual;
  #L3a599c.  v2:= temp;
  #L3a599e.  v1:= v1 - v2 @kind float;
  #L3a59a0.  call temp:= `postTranslate`(v4, v0, v1) @signature `Landroid/graphics/Matrix;.postTranslate:(FF)Z` @kind virtual;
  #L3a59a6.  goto L3a59de;
  #L3a59a8.  v4:= v3.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L3a59ac.  v0:= v3.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L3a59b0.  call temp:= `offsetLeft`(v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetLeft:()F` @kind virtual;
  #L3a59b6.  v0:= temp;
  #L3a59b8.  v1:= v3.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L3a59bc.  call temp:= `offsetTop`(v1) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetTop:()F` @kind virtual;
  #L3a59c2.  v1:= temp;
  #L3a59c4.  v1:= -v1 @kind float;
  #L3a59c6.  call `setTranslate`(v4, v0, v1) @signature `Landroid/graphics/Matrix;.setTranslate:(FF)V` @kind virtual;
  #L3a59cc.  v4:= v3.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L3a59d0.  v0:= 1.0F;
  #L3a59d4.  v1:= -1.0F;
  #L3a59d8.  call temp:= `postScale`(v4, v0, v1) @signature `Landroid/graphics/Matrix;.postScale:(FF)Z` @kind virtual;
  #L3a59de.  return @kind void;
}
procedure `void` `prepareMatrixValuePx`(`com.github.mikephil.charting.utils.Transformer` v2 @kind this, `float` v3 , `float` v4 , `float` v5 , `float` v6 ) @signature `Lcom/github/mikephil/charting/utils/Transformer;.prepareMatrixValuePx:(FFFF)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a59f0.  v0:= v2.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L3a59f4.  call temp:= `contentWidth`(v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.contentWidth:()F` @kind virtual;
  #L3a59fa.  v0:= temp;
  #L3a59fc.  v0:= v0 / v4 @kind float;
  #L3a59fe.  v4:= v2.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L3a5a02.  call temp:= `contentHeight`(v4) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.contentHeight:()F` @kind virtual;
  #L3a5a08.  v4:= temp;
  #L3a5a0a.  v4:= v4 / v5 @kind float;
  #L3a5a0c.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Float;.isInfinite:(F)Z` @kind static;
  #L3a5a12.  v5:= temp;
  #L3a5a14.  v1:= 0I;
  #L3a5a16.  if v5 == 0 then goto L3a5a1c;
  #L3a5a1a.  v0:= 0I;
  #L3a5a1c.  call temp:= `isInfinite`(v4) @signature `Ljava/lang/Float;.isInfinite:(F)Z` @kind static;
  #L3a5a22.  v5:= temp;
  #L3a5a24.  if v5 == 0 then goto L3a5a2a;
  #L3a5a28.  v4:= 0I;
  #L3a5a2a.  v5:= v2.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L3a5a2e.  call `reset`(v5) @signature `Landroid/graphics/Matrix;.reset:()V` @kind virtual;
  #L3a5a34.  v5:= v2.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L3a5a38.  v3:= -v3 @kind float;
  #L3a5a3a.  v6:= -v6 @kind float;
  #L3a5a3c.  call temp:= `postTranslate`(v5, v3, v6) @signature `Landroid/graphics/Matrix;.postTranslate:(FF)Z` @kind virtual;
  #L3a5a42.  v3:= v2.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L3a5a46.  v4:= -v4 @kind float;
  #L3a5a48.  call temp:= `postScale`(v3, v0, v4) @signature `Landroid/graphics/Matrix;.postScale:(FF)Z` @kind virtual;
  #L3a5a4e.  return @kind void;
}
procedure `void` `rectToPixelPhase`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this, `android.graphics.RectF` v2 @kind object, `float` v3 ) @signature `Lcom/github/mikephil/charting/utils/Transformer;.rectToPixelPhase:(Landroid/graphics/RectF;F)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a5a60.  v0:= v2.`android.graphics.RectF.top` @type ^`float`;
  #L3a5a64.  v0:= v0 * v3 @kind float;
  #L3a5a68.  v2.`android.graphics.RectF.top` @type ^`float` := v0;
  #L3a5a6c.  v0:= v2.`android.graphics.RectF.bottom` @type ^`float`;
  #L3a5a70.  v0:= v0 * v3 @kind float;
  #L3a5a74.  v2.`android.graphics.RectF.bottom` @type ^`float` := v0;
  #L3a5a78.  v3:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L3a5a7c.  call temp:= `mapRect`(v3, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L3a5a82.  v3:= v1.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L3a5a86.  call temp:= `getMatrixTouch`(v3) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMatrixTouch:()Landroid/graphics/Matrix;` @kind virtual;
  #L3a5a8c.  v3:= temp @kind object;
  #L3a5a8e.  call temp:= `mapRect`(v3, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L3a5a94.  v3:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L3a5a98.  call temp:= `mapRect`(v3, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L3a5a9e.  return @kind void;
}
procedure `void` `rectToPixelPhaseHorizontal`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this, `android.graphics.RectF` v2 @kind object, `float` v3 ) @signature `Lcom/github/mikephil/charting/utils/Transformer;.rectToPixelPhaseHorizontal:(Landroid/graphics/RectF;F)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a5ab0.  v0:= v2.`android.graphics.RectF.left` @type ^`float`;
  #L3a5ab4.  v0:= v0 * v3 @kind float;
  #L3a5ab8.  v2.`android.graphics.RectF.left` @type ^`float` := v0;
  #L3a5abc.  v0:= v2.`android.graphics.RectF.right` @type ^`float`;
  #L3a5ac0.  v0:= v0 * v3 @kind float;
  #L3a5ac4.  v2.`android.graphics.RectF.right` @type ^`float` := v0;
  #L3a5ac8.  v3:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L3a5acc.  call temp:= `mapRect`(v3, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L3a5ad2.  v3:= v1.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L3a5ad6.  call temp:= `getMatrixTouch`(v3) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMatrixTouch:()Landroid/graphics/Matrix;` @kind virtual;
  #L3a5adc.  v3:= temp @kind object;
  #L3a5ade.  call temp:= `mapRect`(v3, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L3a5ae4.  v3:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L3a5ae8.  call temp:= `mapRect`(v3, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L3a5aee.  return @kind void;
}
procedure `void` `rectValueToPixel`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this, `android.graphics.RectF` v2 @kind object) @signature `Lcom/github/mikephil/charting/utils/Transformer;.rectValueToPixel:(Landroid/graphics/RectF;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a5b00.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L3a5b04.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L3a5b0a.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L3a5b0e.  call temp:= `getMatrixTouch`(v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMatrixTouch:()Landroid/graphics/Matrix;` @kind virtual;
  #L3a5b14.  v0:= temp @kind object;
  #L3a5b16.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L3a5b1c.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L3a5b20.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L3a5b26.  return @kind void;
}
procedure `void` `rectValueToPixelHorizontal`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this, `android.graphics.RectF` v2 @kind object) @signature `Lcom/github/mikephil/charting/utils/Transformer;.rectValueToPixelHorizontal:(Landroid/graphics/RectF;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a5b38.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L3a5b3c.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L3a5b42.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L3a5b46.  call temp:= `getMatrixTouch`(v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMatrixTouch:()Landroid/graphics/Matrix;` @kind virtual;
  #L3a5b4c.  v0:= temp @kind object;
  #L3a5b4e.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L3a5b54.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L3a5b58.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L3a5b5e.  return @kind void;
}
procedure `void` `rectValueToPixelHorizontal`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this, `android.graphics.RectF` v2 @kind object, `float` v3 ) @signature `Lcom/github/mikephil/charting/utils/Transformer;.rectValueToPixelHorizontal:(Landroid/graphics/RectF;F)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a5b70.  v0:= v2.`android.graphics.RectF.left` @type ^`float`;
  #L3a5b74.  v0:= v0 * v3 @kind float;
  #L3a5b78.  v2.`android.graphics.RectF.left` @type ^`float` := v0;
  #L3a5b7c.  v0:= v2.`android.graphics.RectF.right` @type ^`float`;
  #L3a5b80.  v0:= v0 * v3 @kind float;
  #L3a5b84.  v2.`android.graphics.RectF.right` @type ^`float` := v0;
  #L3a5b88.  v3:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L3a5b8c.  call temp:= `mapRect`(v3, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L3a5b92.  v3:= v1.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L3a5b96.  call temp:= `getMatrixTouch`(v3) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMatrixTouch:()Landroid/graphics/Matrix;` @kind virtual;
  #L3a5b9c.  v3:= temp @kind object;
  #L3a5b9e.  call temp:= `mapRect`(v3, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L3a5ba4.  v3:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L3a5ba8.  call temp:= `mapRect`(v3, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L3a5bae.  return @kind void;
}
procedure `void` `rectValuesToPixel`(`com.github.mikephil.charting.utils.Transformer` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lcom/github/mikephil/charting/utils/Transformer;.rectValuesToPixel:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a5bc0.  call temp:= `getValueToPixelMatrix`(v3) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValueToPixelMatrix:()Landroid/graphics/Matrix;` @kind virtual;
  #L3a5bc6.  v0:= temp @kind object;
  #L3a5bc8.  v1:= 0I;
  #L3a5bca.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3a5bd0.  v2:= temp;
  #L3a5bd2.  if v1 >= v2 then goto L3a5bee;
  #L3a5bd6.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3a5bdc.  v2:= temp @kind object;
  #L3a5bde.  v2:= (`android.graphics.RectF`) v2 @kind object;
  #L3a5be2.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L3a5be8.  v1:= v1 + 1;
  #L3a5bec.  goto L3a5bca;
  #L3a5bee.  return @kind void;
}
