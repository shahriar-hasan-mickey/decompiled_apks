record `com.github.mikephil.charting.animation.Easing$22` @kind class @AccessFlag FINAL extends `com.github.mikephil.charting.animation.Easing$EasingFunction` @kind interface {
}
procedure `void` `<init>`(`com.github.mikephil.charting.animation.Easing$22` v0 @kind this) @signature `Lcom/github/mikephil/charting/animation/Easing$22;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L383e9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L383ea2.  return @kind void;
}
procedure `float` `getInterpolation`(`com.github.mikephil.charting.animation.Easing$22` v9 @kind this, `float` v10 ) @signature `Lcom/github/mikephil/charting/animation/Easing$22;.getInterpolation:(F)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L383dbc.  v0:= 0I;
  #L383dbe.  v1:= fcmpl(v10, v0);
  #L383dc2.  if v1 != 0 then goto L383dc8;
  #L383dc6.  return v0;
  #L383dc8.  v0:= 2.0F;
  #L383dcc.  v10:= v10 * v0 @kind float;
  #L383dd0.  v1:= 1.0F;
  #L383dd4.  v0:= fcmpl(v10, v0);
  #L383dd8.  if v0 != 0 then goto L383dde;
  #L383ddc.  return v1;
  #L383dde.  v0:= 1074673892I;
  #L383de4.  v2:= 1033022812I;
  #L383dea.  v3:= 1.0D;
  #L383dee.  call temp:= `asin`(v3) @signature `Ljava/lang/Math;.asin:(D)D` @kind static;
  #L383df4.  v3:= temp @kind wide;
  #L383df6.  v3:= (`float`) v3 @kind d2f;
  #L383df8.  v3:= v3 * v2 @kind float;
  #L383dfc.  v2:= 1086918619I;
  #L383e02.  v4:= 2.0D;
  #L383e06.  v6:= fcmpg(v10, v1);
  #L383e0a.  if v6 >= 0 then goto L383e4c;
  #L383e0e.  v6:= -0.5F;
  #L383e12.  v7:= 10.0F;
  #L383e16.  v10:= v10 - v1 @kind float;
  #L383e18.  v7:= v7 * v10 @kind float;
  #L383e1c.  v7:= (`double`) v7 @kind f2d;
  #L383e1e.  call temp:= `pow`(v4, v7) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L383e24.  v4:= temp @kind wide;
  #L383e26.  v4:= (`float`) v4 @kind d2f;
  #L383e28.  v10:= v10 * v1 @kind float;
  #L383e2c.  v10:= v10 - v3 @kind float;
  #L383e2e.  v10:= v10 * v2 @kind float;
  #L383e32.  v10:= v10 * v0 @kind float;
  #L383e36.  v0:= (`double`) v10 @kind f2d;
  #L383e38.  call temp:= `sin`(v0) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L383e3e.  v0:= temp @kind wide;
  #L383e40.  v10:= (`float`) v0 @kind d2f;
  #L383e42.  v4:= v4 * v10 @kind float;
  #L383e46.  v4:= v4 * v6 @kind float;
  #L383e4a.  return v4;
  #L383e4c.  v6:= 0.5F;
  #L383e50.  v7:= -10.0F;
  #L383e54.  v10:= v10 - v1 @kind float;
  #L383e56.  v7:= v7 * v10 @kind float;
  #L383e5a.  v7:= (`double`) v7 @kind f2d;
  #L383e5c.  call temp:= `pow`(v4, v7) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L383e62.  v4:= temp @kind wide;
  #L383e64.  v4:= (`float`) v4 @kind d2f;
  #L383e66.  v4:= v4 * v6 @kind float;
  #L383e6a.  v10:= v10 * v1 @kind float;
  #L383e6e.  v10:= v10 - v3 @kind float;
  #L383e70.  v10:= v10 * v2 @kind float;
  #L383e74.  v10:= v10 * v0 @kind float;
  #L383e78.  v2:= (`double`) v10 @kind f2d;
  #L383e7a.  call temp:= `sin`(v2) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L383e80.  v2:= temp @kind wide;
  #L383e82.  v10:= (`float`) v2 @kind d2f;
  #L383e84.  v4:= v4 * v10 @kind float;
  #L383e88.  v4:= v4 + v1 @kind float;
  #L383e8a.  return v4;
}
