record `okhttp3.Cache$2` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface {
  `java.util.Iterator` `okhttp3.Cache$2.a` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.Cache$2.b` @AccessFlag ;
  `boolean` `okhttp3.Cache$2.c` @AccessFlag ;
  `okhttp3.Cache` `okhttp3.Cache$2.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.Cache$2` v0 @kind this, `okhttp3.Cache` v1 @kind object) @signature `Lokhttp3/Cache$2;.<init>:(Lokhttp3/Cache;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f71b0.  v0.`okhttp3.Cache$2.d` @type ^`okhttp3.Cache` := v1 @kind object;
  #L4f71b4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f71ba.  v1:= v1.`okhttp3.Cache.b` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L4f71be.  call temp:= `snapshots`(v1) @signature `Lokhttp3/internal/cache/DiskLruCache;.snapshots:()Ljava/util/Iterator;` @kind virtual;
  #L4f71c4.  v1:= temp @kind object;
  #L4f71c6.  v0.`okhttp3.Cache$2.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L4f71ca.  return @kind void;
}
procedure `boolean` `hasNext`(`okhttp3.Cache$2` v4 @kind this) @signature `Lokhttp3/Cache$2;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f70cc.  v0:= v4.`okhttp3.Cache$2.b` @type ^`java.lang.String` @kind object;
  #L4f70d0.  v1:= 1I;
  #L4f70d2.  if v0 == 0 then goto L4f70d8;
  #L4f70d6.  return v1;
  #L4f70d8.  v0:= 0I;
  #L4f70da.  v4.`okhttp3.Cache$2.c` @type ^`boolean` := v0 @kind boolean;
  #L4f70de.  v2:= v4.`okhttp3.Cache$2.a` @type ^`java.util.Iterator` @kind object;
  #L4f70e2.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4f70e8.  v2:= temp;
  #L4f70ea.  if v2 == 0 then goto L4f7134;
  #L4f70ee.  v2:= v4.`okhttp3.Cache$2.a` @type ^`java.util.Iterator` @kind object;
  #L4f70f2.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4f70f8.  v2:= temp @kind object;
  #L4f70fa.  v2:= (`okhttp3.internal.cache.DiskLruCache$Snapshot`) v2 @kind object;
  #L4f70fe.  call temp:= `getSource`(v2, v0) @signature `Lokhttp3/internal/cache/DiskLruCache$Snapshot;.getSource:(I)Lokio/Source;` @kind virtual;
  #L4f7104.  v3:= temp @kind object;
  #L4f7106.  call temp:= `buffer`(v3) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L4f710c.  v3:= temp @kind object;
  #L4f710e.  call temp:= `readUtf8LineStrict`(v3) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L4f7114.  v3:= temp @kind object;
  #L4f7116.  v4.`okhttp3.Cache$2.b` @type ^`java.lang.String` := v3 @kind object;
  #L4f711a.  call `close`(v2) @signature `Lokhttp3/internal/cache/DiskLruCache$Snapshot;.close:()V` @kind virtual;
  #L4f7120.  return v1;
  #L4f7122.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f7124.  call `close`(v2) @signature `Lokhttp3/internal/cache/DiskLruCache$Snapshot;.close:()V` @kind virtual;
  #L4f712a.  throw v0;
  #L4f712c.  call `close`(v2) @signature `Lokhttp3/internal/cache/DiskLruCache$Snapshot;.close:()V` @kind virtual;
  #L4f7132.  goto L4f70de;
  #L4f7134.  return v0;
  catch `java.io.IOException` @[L4f70fe..L4f711a] goto L4f712c;
  catch `java.lang.Throwable` @[L4f70fe..L4f711a] goto L4f7122;
}
procedure `java.lang.Object` `next`(`okhttp3.Cache$2` v1 @kind this) @signature `Lokhttp3/Cache$2;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4f7158.  call temp:= `next`(v1) @signature `Lokhttp3/Cache$2;.next:()Ljava/lang/String;` @kind virtual;
  #L4f715e.  v0:= temp @kind object;
  #L4f7160.  return v0 @kind object;
}
procedure `java.lang.String` `next`(`okhttp3.Cache$2` v2 @kind this) @signature `Lokhttp3/Cache$2;.next:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f7174.  call temp:= `hasNext`(v2) @signature `Lokhttp3/Cache$2;.hasNext:()Z` @kind virtual;
  #L4f717a.  v0:= temp;
  #L4f717c.  if v0 == 0 then goto L4f7192;
  #L4f7180.  v0:= v2.`okhttp3.Cache$2.b` @type ^`java.lang.String` @kind object;
  #L4f7184.  v1:= 0I;
  #L4f7186.  v2.`okhttp3.Cache$2.b` @type ^`java.lang.String` := v1 @kind object;
  #L4f718a.  v1:= 1I;
  #L4f718c.  v2.`okhttp3.Cache$2.c` @type ^`boolean` := v1 @kind boolean;
  #L4f7190.  return v0 @kind object;
  #L4f7192.  v0:= new `java.util.NoSuchElementException`;
  #L4f7196.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4f719c.  throw v0;
}
procedure `void` `remove`(`okhttp3.Cache$2` v2 @kind this) @signature `Lokhttp3/Cache$2;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f71dc.  v0:= v2.`okhttp3.Cache$2.c` @type ^`boolean` @kind boolean;
  #L4f71e0.  if v0 == 0 then goto L4f71f0;
  #L4f71e4.  v0:= v2.`okhttp3.Cache$2.a` @type ^`java.util.Iterator` @kind object;
  #L4f71e8.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L4f71ee.  return @kind void;
  #L4f71f0.  v0:= new `java.lang.IllegalStateException`;
  #L4f71f4.  v1:= "remove() before next()" @kind object;
  #L4f71f8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f71fe.  throw v0;
}
