record `okhttp3.Handshake` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.CipherSuite` `okhttp3.Handshake.cipherSuite` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.Handshake.localCertificates` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.Handshake.peerCertificates` @AccessFlag PRIVATE_FINAL;
  `okhttp3.TlsVersion` `okhttp3.Handshake.tlsVersion` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Handshake` v0 @kind this, `okhttp3.TlsVersion` v1 @kind object, `okhttp3.CipherSuite` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4fb7f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4fb7fa.  v0.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` := v1 @kind object;
  #L4fb7fe.  v0.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` := v2 @kind object;
  #L4fb802.  v0.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` := v3 @kind object;
  #L4fb806.  v0.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` := v4 @kind object;
  #L4fb80a.  return @kind void;
}
procedure `okhttp3.Handshake` `get`(`javax.net.ssl.SSLSession` v4 @kind object) @signature `Lokhttp3/Handshake;.get:(Ljavax/net/ssl/SSLSession;)Lokhttp3/Handshake;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4fb694.  call temp:= `getCipherSuite`(v4) @signature `Ljavax/net/ssl/SSLSession;.getCipherSuite:()Ljava/lang/String;` @kind interface;
  #L4fb69a.  v0:= temp @kind object;
  #L4fb69c.  if v0 == 0 then goto L4fb758;
  #L4fb6a0.  v1:= "SSL_NULL_WITH_NULL_NULL" @kind object;
  #L4fb6a4.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4fb6aa.  v1:= temp;
  #L4fb6ac.  if v1 != 0 then goto L4fb748;
  #L4fb6b0.  call temp:= `forJavaName`(v0) @signature `Lokhttp3/CipherSuite;.forJavaName:(Ljava/lang/String;)Lokhttp3/CipherSuite;` @kind static;
  #L4fb6b6.  v0:= temp @kind object;
  #L4fb6b8.  call temp:= `getProtocol`(v4) @signature `Ljavax/net/ssl/SSLSession;.getProtocol:()Ljava/lang/String;` @kind interface;
  #L4fb6be.  v1:= temp @kind object;
  #L4fb6c0.  if v1 == 0 then goto L4fb738;
  #L4fb6c4.  v2:= "NONE" @kind object;
  #L4fb6c8.  call temp:= `equals`(v2, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4fb6ce.  v2:= temp;
  #L4fb6d0.  if v2 != 0 then goto L4fb728;
  #L4fb6d4.  call temp:= `forJavaName`(v1) @signature `Lokhttp3/TlsVersion;.forJavaName:(Ljava/lang/String;)Lokhttp3/TlsVersion;` @kind static;
  #L4fb6da.  v1:= temp @kind object;
  #L4fb6dc.  call temp:= `getPeerCertificates`(v4) @signature `Ljavax/net/ssl/SSLSession;.getPeerCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L4fb6e2.  v2:= temp @kind object;
  #L4fb6e4.  goto L4fb6e8;
  #L4fb6e6.  v2:= 0I;
  #L4fb6e8.  if v2 == 0 then goto L4fb6f6;
  #L4fb6ec.  call temp:= `immutableList`(v2) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4fb6f2.  v2:= temp @kind object;
  #L4fb6f4.  goto L4fb6fe;
  #L4fb6f6.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L4fb6fc.  v2:= temp @kind object;
  #L4fb6fe.  call temp:= `getLocalCertificates`(v4) @signature `Ljavax/net/ssl/SSLSession;.getLocalCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L4fb704.  v4:= temp @kind object;
  #L4fb706.  if v4 == 0 then goto L4fb714;
  #L4fb70a.  call temp:= `immutableList`(v4) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4fb710.  v4:= temp @kind object;
  #L4fb712.  goto L4fb71c;
  #L4fb714.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L4fb71a.  v4:= temp @kind object;
  #L4fb71c.  v3:= new `okhttp3.Handshake`;
  #L4fb720.  call `<init>`(v3, v1, v0, v2, v4) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L4fb726.  return v3 @kind object;
  #L4fb728.  v4:= new `java.io.IOException`;
  #L4fb72c.  v0:= "tlsVersion == NONE" @kind object;
  #L4fb730.  call `<init>`(v4, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fb736.  throw v4;
  #L4fb738.  v4:= new `java.lang.IllegalStateException`;
  #L4fb73c.  v0:= "tlsVersion == null" @kind object;
  #L4fb740.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fb746.  throw v4;
  #L4fb748.  v4:= new `java.io.IOException`;
  #L4fb74c.  v0:= "cipherSuite == SSL_NULL_WITH_NULL_NULL" @kind object;
  #L4fb750.  call `<init>`(v4, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fb756.  throw v4;
  #L4fb758.  v4:= new `java.lang.IllegalStateException`;
  #L4fb75c.  v0:= "cipherSuite == null" @kind object;
  #L4fb760.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fb766.  throw v4;
  catch `javax.net.ssl.SSLPeerUnverifiedException` @[L4fb6dc..L4fb6e4] goto L4fb6e6;
}
procedure `okhttp3.Handshake` `get`(`okhttp3.TlsVersion` v1 @kind object, `okhttp3.CipherSuite` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lokhttp3/Handshake;.get:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)Lokhttp3/Handshake;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4fb788.  if v1 == 0 then goto L4fb7bc;
  #L4fb78c.  if v2 == 0 then goto L4fb7ac;
  #L4fb790.  v0:= new `okhttp3.Handshake`;
  #L4fb794.  call temp:= `immutableList`(v3) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L4fb79a.  v3:= temp @kind object;
  #L4fb79c.  call temp:= `immutableList`(v4) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L4fb7a2.  v4:= temp @kind object;
  #L4fb7a4.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L4fb7aa.  return v0 @kind object;
  #L4fb7ac.  v1:= new `java.lang.NullPointerException`;
  #L4fb7b0.  v2:= "cipherSuite == null" @kind object;
  #L4fb7b4.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fb7ba.  throw v1;
  #L4fb7bc.  v1:= new `java.lang.NullPointerException`;
  #L4fb7c0.  v2:= "tlsVersion == null" @kind object;
  #L4fb7c4.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fb7ca.  throw v1;
}
procedure `okhttp3.CipherSuite` `cipherSuite`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.cipherSuite:()Lokhttp3/CipherSuite;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fb67c.  v0:= v1.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L4fb680.  return v0 @kind object;
}
procedure `boolean` `equals`(`okhttp3.Handshake` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lokhttp3/Handshake;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4fb4fc.  v0:= instanceof @variable v4 @type ^`okhttp3.Handshake` @kind boolean;
  #L4fb500.  v1:= 0I;
  #L4fb502.  if v0 != 0 then goto L4fb508;
  #L4fb506.  return v1;
  #L4fb508.  v4:= (`okhttp3.Handshake`) v4 @kind object;
  #L4fb50c.  v0:= v3.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L4fb510.  v2:= v4.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L4fb514.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Enum;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4fb51a.  v0:= temp;
  #L4fb51c.  if v0 == 0 then goto L4fb55e;
  #L4fb520.  v0:= v3.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L4fb524.  v2:= v4.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L4fb528.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4fb52e.  v0:= temp;
  #L4fb530.  if v0 == 0 then goto L4fb55e;
  #L4fb534.  v0:= v3.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L4fb538.  v2:= v4.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L4fb53c.  call temp:= `equals`(v0, v2) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L4fb542.  v0:= temp;
  #L4fb544.  if v0 == 0 then goto L4fb55e;
  #L4fb548.  v0:= v3.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L4fb54c.  v4:= v4.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L4fb550.  call temp:= `equals`(v0, v4) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L4fb556.  v4:= temp;
  #L4fb558.  if v4 == 0 then goto L4fb55e;
  #L4fb55c.  v1:= 1I;
  #L4fb55e.  return v1;
}
procedure `int` `hashCode`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fb570.  v0:= v2.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L4fb574.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Enum;.hashCode:()I` @kind virtual;
  #L4fb57a.  v0:= temp;
  #L4fb57c.  v1:= 527I;
  #L4fb580.  v1:= v1 + v0 @kind int;
  #L4fb582.  v1:= v1 * 31;
  #L4fb586.  v0:= v2.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L4fb58a.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L4fb590.  v0:= temp;
  #L4fb592.  v1:= v1 + v0 @kind int;
  #L4fb594.  v1:= v1 * 31;
  #L4fb598.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L4fb59c.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L4fb5a2.  v0:= temp;
  #L4fb5a4.  v1:= v1 + v0 @kind int;
  #L4fb5a6.  v1:= v1 * 31;
  #L4fb5aa.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L4fb5ae.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L4fb5b4.  v0:= temp;
  #L4fb5b6.  v1:= v1 + v0 @kind int;
  #L4fb5b8.  return v1;
}
procedure `java.util.List` `localCertificates`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.localCertificates:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fb64c.  v0:= v1.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L4fb650.  return v0 @kind object;
}
procedure `java.security.Principal` `localPrincipal`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.localPrincipal:()Ljava/security/Principal;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fb5cc.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L4fb5d0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4fb5d6.  v0:= temp;
  #L4fb5d8.  if v0 != 0 then goto L4fb5f8;
  #L4fb5dc.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L4fb5e0.  v1:= 0I;
  #L4fb5e2.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4fb5e8.  v0:= temp @kind object;
  #L4fb5ea.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L4fb5ee.  call temp:= `getSubjectX500Principal`(v0) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L4fb5f4.  v0:= temp @kind object;
  #L4fb5f6.  goto L4fb5fa;
  #L4fb5f8.  v0:= 0I;
  #L4fb5fa.  return v0 @kind object;
}
procedure `java.util.List` `peerCertificates`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.peerCertificates:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fb664.  v0:= v1.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L4fb668.  return v0 @kind object;
}
procedure `java.security.Principal` `peerPrincipal`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.peerPrincipal:()Ljava/security/Principal;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fb60c.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L4fb610.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4fb616.  v0:= temp;
  #L4fb618.  if v0 != 0 then goto L4fb638;
  #L4fb61c.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L4fb620.  v1:= 0I;
  #L4fb622.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4fb628.  v0:= temp @kind object;
  #L4fb62a.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L4fb62e.  call temp:= `getSubjectX500Principal`(v0) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L4fb634.  v0:= temp @kind object;
  #L4fb636.  goto L4fb63a;
  #L4fb638.  v0:= 0I;
  #L4fb63a.  return v0 @kind object;
}
procedure `okhttp3.TlsVersion` `tlsVersion`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.tlsVersion:()Lokhttp3/TlsVersion;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fb7dc.  v0:= v1.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L4fb7e0.  return v0 @kind object;
}
