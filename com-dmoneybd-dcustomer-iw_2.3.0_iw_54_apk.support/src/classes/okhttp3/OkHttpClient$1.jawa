record `okhttp3.OkHttpClient$1` @kind class @AccessFlag  extends `okhttp3.internal.Internal` @kind class {
}
procedure `void` `<init>`(`okhttp3.OkHttpClient$1` v0 @kind this) @signature `Lokhttp3/OkHttpClient$1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fee0c.  call `<init>`(v0) @signature `Lokhttp3/internal/Internal;.<init>:()V` @kind direct;
  #L4fee12.  return @kind void;
}
procedure `void` `addLenient`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.Headers$Builder` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lokhttp3/OkHttpClient$1;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L4fee24.  call temp:= `a`(v1, v2) @signature `Lokhttp3/Headers$Builder;.a:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L4fee2a.  return @kind void;
}
procedure `void` `addLenient`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.Headers$Builder` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/OkHttpClient$1;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L4fee3c.  call temp:= `b`(v1, v2, v3) @signature `Lokhttp3/Headers$Builder;.b:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L4fee42.  return @kind void;
}
procedure `void` `apply`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.ConnectionSpec` v1 @kind object, `javax.net.ssl.SSLSocket` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/OkHttpClient$1;.apply:(Lokhttp3/ConnectionSpec;Ljavax/net/ssl/SSLSocket;Z)V` @AccessFlag PUBLIC {
    temp;

  #L4fee54.  call `a`(v1, v2, v3) @signature `Lokhttp3/ConnectionSpec;.a:(Ljavax/net/ssl/SSLSocket;Z)V` @kind virtual;
  #L4fee5a.  return @kind void;
}
procedure `int` `code`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.Response$Builder` v1 @kind object) @signature `Lokhttp3/OkHttpClient$1;.code:(Lokhttp3/Response$Builder;)I` @AccessFlag PUBLIC {
    temp;

  #L4fed48.  v1:= v1.`okhttp3.Response$Builder.c` @type ^`int`;
  #L4fed4c.  return v1;
}
procedure `boolean` `connectionBecameIdle`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.ConnectionPool` v1 @kind object, `okhttp3.internal.connection.RealConnection` v2 @kind object) @signature `Lokhttp3/OkHttpClient$1;.connectionBecameIdle:(Lokhttp3/ConnectionPool;Lokhttp3/internal/connection/RealConnection;)Z` @AccessFlag PUBLIC {
    temp;

  #L4fece8.  call temp:= `b`(v1, v2) @signature `Lokhttp3/ConnectionPool;.b:(Lokhttp3/internal/connection/RealConnection;)Z` @kind virtual;
  #L4fecee.  v1:= temp;
  #L4fecf0.  return v1;
}
procedure `java.net.Socket` `deduplicate`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.ConnectionPool` v1 @kind object, `okhttp3.Address` v2 @kind object, `okhttp3.internal.connection.StreamAllocation` v3 @kind object) @signature `Lokhttp3/OkHttpClient$1;.deduplicate:(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/internal/connection/StreamAllocation;)Ljava/net/Socket;` @AccessFlag PUBLIC {
    temp;

  #L4fed80.  call temp:= `c`(v1, v2, v3) @signature `Lokhttp3/ConnectionPool;.c:(Lokhttp3/Address;Lokhttp3/internal/connection/StreamAllocation;)Ljava/net/Socket;` @kind virtual;
  #L4fed86.  v1:= temp @kind object;
  #L4fed88.  return v1 @kind object;
}
procedure `boolean` `equalsNonHost`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.Address` v1 @kind object, `okhttp3.Address` v2 @kind object) @signature `Lokhttp3/OkHttpClient$1;.equalsNonHost:(Lokhttp3/Address;Lokhttp3/Address;)Z` @AccessFlag PUBLIC {
    temp;

  #L4fed04.  call temp:= `a`(v1, v2) @signature `Lokhttp3/Address;.a:(Lokhttp3/Address;)Z` @kind virtual;
  #L4fed0a.  v1:= temp;
  #L4fed0c.  return v1;
}
procedure `okhttp3.internal.connection.RealConnection` `get`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.ConnectionPool` v1 @kind object, `okhttp3.Address` v2 @kind object, `okhttp3.internal.connection.StreamAllocation` v3 @kind object, `okhttp3.Route` v4 @kind object) @signature `Lokhttp3/OkHttpClient$1;.get:(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/Route;)Lokhttp3/internal/connection/RealConnection;` @AccessFlag PUBLIC {
    temp;

  #L4fedb8.  call temp:= `d`(v1, v2, v3, v4) @signature `Lokhttp3/ConnectionPool;.d:(Lokhttp3/Address;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/Route;)Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L4fedbe.  v1:= temp @kind object;
  #L4fedc0.  return v1 @kind object;
}
procedure `boolean` `isInvalidHttpUrlHost`(`okhttp3.OkHttpClient$1` v1 @kind this, `java.lang.IllegalArgumentException` v2 @kind object) @signature `Lokhttp3/OkHttpClient$1;.isInvalidHttpUrlHost:(Ljava/lang/IllegalArgumentException;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fed20.  call temp:= `getMessage`(v2) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L4fed26.  v2:= temp @kind object;
  #L4fed28.  v0:= "Invalid URL host" @kind object;
  #L4fed2c.  call temp:= `startsWith`(v2, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L4fed32.  v2:= temp;
  #L4fed34.  return v2;
}
procedure `okhttp3.Call` `newWebSocketCall`(`okhttp3.OkHttpClient$1` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object, `okhttp3.Request` v3 @kind object) @signature `Lokhttp3/OkHttpClient$1;.newWebSocketCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;)Lokhttp3/Call;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fed9c.  v0:= 1I;
  #L4fed9e.  call temp:= `c`(v2, v3, v0) @signature `Lokhttp3/RealCall;.c:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @kind static;
  #L4feda4.  v2:= temp @kind object;
  #L4feda6.  return v2 @kind object;
}
procedure `void` `put`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.ConnectionPool` v1 @kind object, `okhttp3.internal.connection.RealConnection` v2 @kind object) @signature `Lokhttp3/OkHttpClient$1;.put:(Lokhttp3/ConnectionPool;Lokhttp3/internal/connection/RealConnection;)V` @AccessFlag PUBLIC {
    temp;

  #L4fee6c.  call `e`(v1, v2) @signature `Lokhttp3/ConnectionPool;.e:(Lokhttp3/internal/connection/RealConnection;)V` @kind virtual;
  #L4fee72.  return @kind void;
}
procedure `okhttp3.internal.connection.RouteDatabase` `routeDatabase`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.ConnectionPool` v1 @kind object) @signature `Lokhttp3/OkHttpClient$1;.routeDatabase:(Lokhttp3/ConnectionPool;)Lokhttp3/internal/connection/RouteDatabase;` @AccessFlag PUBLIC {
    temp;

  #L4fedd4.  v1:= v1.`okhttp3.ConnectionPool.a` @type ^`okhttp3.internal.connection.RouteDatabase` @kind object;
  #L4fedd8.  return v1 @kind object;
}
procedure `void` `setCache`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.OkHttpClient$Builder` v1 @kind object, `okhttp3.internal.cache.InternalCache` v2 @kind object) @signature `Lokhttp3/OkHttpClient$1;.setCache:(Lokhttp3/OkHttpClient$Builder;Lokhttp3/internal/cache/InternalCache;)V` @AccessFlag PUBLIC {
    temp;

  #L4fee84.  call `a`(v1, v2) @signature `Lokhttp3/OkHttpClient$Builder;.a:(Lokhttp3/internal/cache/InternalCache;)V` @kind virtual;
  #L4fee8a.  return @kind void;
}
procedure `okhttp3.internal.connection.StreamAllocation` `streamAllocation`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.Call` v1 @kind object) @signature `Lokhttp3/OkHttpClient$1;.streamAllocation:(Lokhttp3/Call;)Lokhttp3/internal/connection/StreamAllocation;` @AccessFlag PUBLIC {
    temp;

  #L4fedec.  v1:= (`okhttp3.RealCall`) v1 @kind object;
  #L4fedf0.  call temp:= `e`(v1) @signature `Lokhttp3/RealCall;.e:()Lokhttp3/internal/connection/StreamAllocation;` @kind virtual;
  #L4fedf6.  v1:= temp @kind object;
  #L4fedf8.  return v1 @kind object;
}
procedure `java.io.IOException` `timeoutExit`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.Call` v1 @kind object, `java.io.IOException` v2 @kind object) @signature `Lokhttp3/OkHttpClient$1;.timeoutExit:(Lokhttp3/Call;Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PUBLIC {
    temp;

  #L4fed60.  v1:= (`okhttp3.RealCall`) v1 @kind object;
  #L4fed64.  call temp:= `f`(v1, v2) @signature `Lokhttp3/RealCall;.f:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L4fed6a.  v1:= temp @kind object;
  #L4fed6c.  return v1 @kind object;
}
