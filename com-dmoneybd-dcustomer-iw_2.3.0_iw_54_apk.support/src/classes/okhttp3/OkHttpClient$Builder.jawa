record `okhttp3.OkHttpClient$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.OkHttpClient$Builder.A` @AccessFlag ;
  `int` `okhttp3.OkHttpClient$Builder.B` @AccessFlag ;
  `okhttp3.Dispatcher` `okhttp3.OkHttpClient$Builder.a` @AccessFlag ;
  `java.net.Proxy` `okhttp3.OkHttpClient$Builder.b` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.c` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.d` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.e` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient$Builder.f` @AccessFlag FINAL;
  `okhttp3.EventListener$Factory` `okhttp3.OkHttpClient$Builder.g` @AccessFlag ;
  `java.net.ProxySelector` `okhttp3.OkHttpClient$Builder.h` @AccessFlag ;
  `okhttp3.CookieJar` `okhttp3.OkHttpClient$Builder.i` @AccessFlag ;
  `okhttp3.Cache` `okhttp3.OkHttpClient$Builder.j` @AccessFlag ;
  `okhttp3.internal.cache.InternalCache` `okhttp3.OkHttpClient$Builder.k` @AccessFlag ;
  `javax.net.SocketFactory` `okhttp3.OkHttpClient$Builder.l` @AccessFlag ;
  `javax.net.ssl.SSLSocketFactory` `okhttp3.OkHttpClient$Builder.m` @AccessFlag ;
  `okhttp3.internal.tls.CertificateChainCleaner` `okhttp3.OkHttpClient$Builder.n` @AccessFlag ;
  `javax.net.ssl.HostnameVerifier` `okhttp3.OkHttpClient$Builder.o` @AccessFlag ;
  `okhttp3.CertificatePinner` `okhttp3.OkHttpClient$Builder.p` @AccessFlag ;
  `okhttp3.Authenticator` `okhttp3.OkHttpClient$Builder.q` @AccessFlag ;
  `okhttp3.Authenticator` `okhttp3.OkHttpClient$Builder.r` @AccessFlag ;
  `okhttp3.ConnectionPool` `okhttp3.OkHttpClient$Builder.s` @AccessFlag ;
  `okhttp3.Dns` `okhttp3.OkHttpClient$Builder.t` @AccessFlag ;
  `boolean` `okhttp3.OkHttpClient$Builder.u` @AccessFlag ;
  `boolean` `okhttp3.OkHttpClient$Builder.v` @AccessFlag ;
  `boolean` `okhttp3.OkHttpClient$Builder.w` @AccessFlag ;
  `int` `okhttp3.OkHttpClient$Builder.x` @AccessFlag ;
  `int` `okhttp3.OkHttpClient$Builder.y` @AccessFlag ;
  `int` `okhttp3.OkHttpClient$Builder.z` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient$Builder` v2 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4ff554.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ff55a.  v0:= new `java.util.ArrayList`;
  #L4ff55e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4ff564.  v2.`okhttp3.OkHttpClient$Builder.e` @type ^`java.util.List` := v0 @kind object;
  #L4ff568.  v0:= new `java.util.ArrayList`;
  #L4ff56c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4ff572.  v2.`okhttp3.OkHttpClient$Builder.f` @type ^`java.util.List` := v0 @kind object;
  #L4ff576.  v0:= new `okhttp3.Dispatcher`;
  #L4ff57a.  call `<init>`(v0) @signature `Lokhttp3/Dispatcher;.<init>:()V` @kind direct;
  #L4ff580.  v2.`okhttp3.OkHttpClient$Builder.a` @type ^`okhttp3.Dispatcher` := v0 @kind object;
  #L4ff584.  v0:= `@@okhttp3.OkHttpClient.a` @type ^`java.util.List` @kind object;
  #L4ff588.  v2.`okhttp3.OkHttpClient$Builder.c` @type ^`java.util.List` := v0 @kind object;
  #L4ff58c.  v0:= `@@okhttp3.OkHttpClient.b` @type ^`java.util.List` @kind object;
  #L4ff590.  v2.`okhttp3.OkHttpClient$Builder.d` @type ^`java.util.List` := v0 @kind object;
  #L4ff594.  v0:= `@@okhttp3.EventListener.NONE` @type ^`okhttp3.EventListener` @kind object;
  #L4ff598.  call temp:= `a`(v0) @signature `Lokhttp3/EventListener;.a:(Lokhttp3/EventListener;)Lokhttp3/EventListener$Factory;` @kind static;
  #L4ff59e.  v0:= temp @kind object;
  #L4ff5a0.  v2.`okhttp3.OkHttpClient$Builder.g` @type ^`okhttp3.EventListener$Factory` := v0 @kind object;
  #L4ff5a4.  call temp:= `getDefault`() @signature `Ljava/net/ProxySelector;.getDefault:()Ljava/net/ProxySelector;` @kind static;
  #L4ff5aa.  v0:= temp @kind object;
  #L4ff5ac.  v2.`okhttp3.OkHttpClient$Builder.h` @type ^`java.net.ProxySelector` := v0 @kind object;
  #L4ff5b0.  if v0 != 0 then goto L4ff5c2;
  #L4ff5b4.  v0:= new `okhttp3.internal.proxy.NullProxySelector`;
  #L4ff5b8.  call `<init>`(v0) @signature `Lokhttp3/internal/proxy/NullProxySelector;.<init>:()V` @kind direct;
  #L4ff5be.  v2.`okhttp3.OkHttpClient$Builder.h` @type ^`java.net.ProxySelector` := v0 @kind object;
  #L4ff5c2.  v0:= `@@okhttp3.CookieJar.NO_COOKIES` @type ^`okhttp3.CookieJar` @kind object;
  #L4ff5c6.  v2.`okhttp3.OkHttpClient$Builder.i` @type ^`okhttp3.CookieJar` := v0 @kind object;
  #L4ff5ca.  call temp:= `getDefault`() @signature `Ljavax/net/SocketFactory;.getDefault:()Ljavax/net/SocketFactory;` @kind static;
  #L4ff5d0.  v0:= temp @kind object;
  #L4ff5d2.  v2.`okhttp3.OkHttpClient$Builder.l` @type ^`javax.net.SocketFactory` := v0 @kind object;
  #L4ff5d6.  v0:= `@@okhttp3.internal.tls.OkHostnameVerifier.INSTANCE` @type ^`okhttp3.internal.tls.OkHostnameVerifier` @kind object;
  #L4ff5da.  v2.`okhttp3.OkHttpClient$Builder.o` @type ^`javax.net.ssl.HostnameVerifier` := v0 @kind object;
  #L4ff5de.  v0:= `@@okhttp3.CertificatePinner.DEFAULT` @type ^`okhttp3.CertificatePinner` @kind object;
  #L4ff5e2.  v2.`okhttp3.OkHttpClient$Builder.p` @type ^`okhttp3.CertificatePinner` := v0 @kind object;
  #L4ff5e6.  v0:= `@@okhttp3.Authenticator.NONE` @type ^`okhttp3.Authenticator` @kind object;
  #L4ff5ea.  v2.`okhttp3.OkHttpClient$Builder.q` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L4ff5ee.  v2.`okhttp3.OkHttpClient$Builder.r` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L4ff5f2.  v0:= new `okhttp3.ConnectionPool`;
  #L4ff5f6.  call `<init>`(v0) @signature `Lokhttp3/ConnectionPool;.<init>:()V` @kind direct;
  #L4ff5fc.  v2.`okhttp3.OkHttpClient$Builder.s` @type ^`okhttp3.ConnectionPool` := v0 @kind object;
  #L4ff600.  v0:= `@@okhttp3.Dns.SYSTEM` @type ^`okhttp3.Dns` @kind object;
  #L4ff604.  v2.`okhttp3.OkHttpClient$Builder.t` @type ^`okhttp3.Dns` := v0 @kind object;
  #L4ff608.  v0:= 1I;
  #L4ff60a.  v2.`okhttp3.OkHttpClient$Builder.u` @type ^`boolean` := v0 @kind boolean;
  #L4ff60e.  v2.`okhttp3.OkHttpClient$Builder.v` @type ^`boolean` := v0 @kind boolean;
  #L4ff612.  v2.`okhttp3.OkHttpClient$Builder.w` @type ^`boolean` := v0 @kind boolean;
  #L4ff616.  v0:= 0I;
  #L4ff618.  v2.`okhttp3.OkHttpClient$Builder.x` @type ^`int` := v0;
  #L4ff61c.  v1:= 10000I;
  #L4ff620.  v2.`okhttp3.OkHttpClient$Builder.y` @type ^`int` := v1;
  #L4ff624.  v2.`okhttp3.OkHttpClient$Builder.z` @type ^`int` := v1;
  #L4ff628.  v2.`okhttp3.OkHttpClient$Builder.A` @type ^`int` := v1;
  #L4ff62c.  v2.`okhttp3.OkHttpClient$Builder.B` @type ^`int` := v0;
  #L4ff630.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient$Builder` v3 @kind this, `okhttp3.OkHttpClient` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:(Lokhttp3/OkHttpClient;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4ff644.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ff64a.  v0:= new `java.util.ArrayList`;
  #L4ff64e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4ff654.  v3.`okhttp3.OkHttpClient$Builder.e` @type ^`java.util.List` := v0 @kind object;
  #L4ff658.  v1:= new `java.util.ArrayList`;
  #L4ff65c.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4ff662.  v3.`okhttp3.OkHttpClient$Builder.f` @type ^`java.util.List` := v1 @kind object;
  #L4ff666.  v2:= v4.`okhttp3.OkHttpClient.c` @type ^`okhttp3.Dispatcher` @kind object;
  #L4ff66a.  v3.`okhttp3.OkHttpClient$Builder.a` @type ^`okhttp3.Dispatcher` := v2 @kind object;
  #L4ff66e.  v2:= v4.`okhttp3.OkHttpClient.d` @type ^`java.net.Proxy` @kind object;
  #L4ff672.  v3.`okhttp3.OkHttpClient$Builder.b` @type ^`java.net.Proxy` := v2 @kind object;
  #L4ff676.  v2:= v4.`okhttp3.OkHttpClient.e` @type ^`java.util.List` @kind object;
  #L4ff67a.  v3.`okhttp3.OkHttpClient$Builder.c` @type ^`java.util.List` := v2 @kind object;
  #L4ff67e.  v2:= v4.`okhttp3.OkHttpClient.f` @type ^`java.util.List` @kind object;
  #L4ff682.  v3.`okhttp3.OkHttpClient$Builder.d` @type ^`java.util.List` := v2 @kind object;
  #L4ff686.  v2:= v4.`okhttp3.OkHttpClient.g` @type ^`java.util.List` @kind object;
  #L4ff68a.  call temp:= `addAll`(v0, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L4ff690.  v0:= v4.`okhttp3.OkHttpClient.h` @type ^`java.util.List` @kind object;
  #L4ff694.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L4ff69a.  v0:= v4.`okhttp3.OkHttpClient.i` @type ^`okhttp3.EventListener$Factory` @kind object;
  #L4ff69e.  v3.`okhttp3.OkHttpClient$Builder.g` @type ^`okhttp3.EventListener$Factory` := v0 @kind object;
  #L4ff6a2.  v0:= v4.`okhttp3.OkHttpClient.j` @type ^`java.net.ProxySelector` @kind object;
  #L4ff6a6.  v3.`okhttp3.OkHttpClient$Builder.h` @type ^`java.net.ProxySelector` := v0 @kind object;
  #L4ff6aa.  v0:= v4.`okhttp3.OkHttpClient.k` @type ^`okhttp3.CookieJar` @kind object;
  #L4ff6ae.  v3.`okhttp3.OkHttpClient$Builder.i` @type ^`okhttp3.CookieJar` := v0 @kind object;
  #L4ff6b2.  v0:= v4.`okhttp3.OkHttpClient.m` @type ^`okhttp3.internal.cache.InternalCache` @kind object;
  #L4ff6b6.  v3.`okhttp3.OkHttpClient$Builder.k` @type ^`okhttp3.internal.cache.InternalCache` := v0 @kind object;
  #L4ff6ba.  v0:= v4.`okhttp3.OkHttpClient.l` @type ^`okhttp3.Cache` @kind object;
  #L4ff6be.  v3.`okhttp3.OkHttpClient$Builder.j` @type ^`okhttp3.Cache` := v0 @kind object;
  #L4ff6c2.  v0:= v4.`okhttp3.OkHttpClient.n` @type ^`javax.net.SocketFactory` @kind object;
  #L4ff6c6.  v3.`okhttp3.OkHttpClient$Builder.l` @type ^`javax.net.SocketFactory` := v0 @kind object;
  #L4ff6ca.  v0:= v4.`okhttp3.OkHttpClient.o` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L4ff6ce.  v3.`okhttp3.OkHttpClient$Builder.m` @type ^`javax.net.ssl.SSLSocketFactory` := v0 @kind object;
  #L4ff6d2.  v0:= v4.`okhttp3.OkHttpClient.p` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L4ff6d6.  v3.`okhttp3.OkHttpClient$Builder.n` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v0 @kind object;
  #L4ff6da.  v0:= v4.`okhttp3.OkHttpClient.q` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L4ff6de.  v3.`okhttp3.OkHttpClient$Builder.o` @type ^`javax.net.ssl.HostnameVerifier` := v0 @kind object;
  #L4ff6e2.  v0:= v4.`okhttp3.OkHttpClient.r` @type ^`okhttp3.CertificatePinner` @kind object;
  #L4ff6e6.  v3.`okhttp3.OkHttpClient$Builder.p` @type ^`okhttp3.CertificatePinner` := v0 @kind object;
  #L4ff6ea.  v0:= v4.`okhttp3.OkHttpClient.s` @type ^`okhttp3.Authenticator` @kind object;
  #L4ff6ee.  v3.`okhttp3.OkHttpClient$Builder.q` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L4ff6f2.  v0:= v4.`okhttp3.OkHttpClient.t` @type ^`okhttp3.Authenticator` @kind object;
  #L4ff6f6.  v3.`okhttp3.OkHttpClient$Builder.r` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L4ff6fa.  v0:= v4.`okhttp3.OkHttpClient.u` @type ^`okhttp3.ConnectionPool` @kind object;
  #L4ff6fe.  v3.`okhttp3.OkHttpClient$Builder.s` @type ^`okhttp3.ConnectionPool` := v0 @kind object;
  #L4ff702.  v0:= v4.`okhttp3.OkHttpClient.v` @type ^`okhttp3.Dns` @kind object;
  #L4ff706.  v3.`okhttp3.OkHttpClient$Builder.t` @type ^`okhttp3.Dns` := v0 @kind object;
  #L4ff70a.  v0:= v4.`okhttp3.OkHttpClient.w` @type ^`boolean` @kind boolean;
  #L4ff70e.  v3.`okhttp3.OkHttpClient$Builder.u` @type ^`boolean` := v0 @kind boolean;
  #L4ff712.  v0:= v4.`okhttp3.OkHttpClient.x` @type ^`boolean` @kind boolean;
  #L4ff716.  v3.`okhttp3.OkHttpClient$Builder.v` @type ^`boolean` := v0 @kind boolean;
  #L4ff71a.  v0:= v4.`okhttp3.OkHttpClient.y` @type ^`boolean` @kind boolean;
  #L4ff71e.  v3.`okhttp3.OkHttpClient$Builder.w` @type ^`boolean` := v0 @kind boolean;
  #L4ff722.  v0:= v4.`okhttp3.OkHttpClient.z` @type ^`int`;
  #L4ff726.  v3.`okhttp3.OkHttpClient$Builder.x` @type ^`int` := v0;
  #L4ff72a.  v0:= v4.`okhttp3.OkHttpClient.A` @type ^`int`;
  #L4ff72e.  v3.`okhttp3.OkHttpClient$Builder.y` @type ^`int` := v0;
  #L4ff732.  v0:= v4.`okhttp3.OkHttpClient.B` @type ^`int`;
  #L4ff736.  v3.`okhttp3.OkHttpClient$Builder.z` @type ^`int` := v0;
  #L4ff73a.  v0:= v4.`okhttp3.OkHttpClient.C` @type ^`int`;
  #L4ff73e.  v3.`okhttp3.OkHttpClient$Builder.A` @type ^`int` := v0;
  #L4ff742.  v4:= v4.`okhttp3.OkHttpClient.D` @type ^`int`;
  #L4ff746.  v3.`okhttp3.OkHttpClient$Builder.B` @type ^`int` := v4;
  #L4ff74a.  return @kind void;
}
procedure `void` `a`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `okhttp3.internal.cache.InternalCache` v1 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.a:(Lokhttp3/internal/cache/InternalCache;)V` @AccessFlag  {
    temp;

  #L4ff75c.  v0.`okhttp3.OkHttpClient$Builder.k` @type ^`okhttp3.internal.cache.InternalCache` := v1 @kind object;
  #L4ff760.  v1:= 0I;
  #L4ff762.  v0.`okhttp3.OkHttpClient$Builder.j` @type ^`okhttp3.Cache` := v1 @kind object;
  #L4ff766.  return @kind void;
}
procedure `okhttp3.OkHttpClient$Builder` `addInterceptor`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Interceptor` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.addInterceptor:(Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4feee8.  if v2 == 0 then goto L4feef8;
  #L4feeec.  v0:= v1.`okhttp3.OkHttpClient$Builder.e` @type ^`java.util.List` @kind object;
  #L4feef0.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4feef6.  return v1 @kind object;
  #L4feef8.  v2:= new `java.lang.IllegalArgumentException`;
  #L4feefc.  v0:= "interceptor == null" @kind object;
  #L4fef00.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fef06.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `addNetworkInterceptor`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Interceptor` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.addNetworkInterceptor:(Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fef18.  if v2 == 0 then goto L4fef28;
  #L4fef1c.  v0:= v1.`okhttp3.OkHttpClient$Builder.f` @type ^`java.util.List` @kind object;
  #L4fef20.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4fef26.  return v1 @kind object;
  #L4fef28.  v2:= new `java.lang.IllegalArgumentException`;
  #L4fef2c.  v0:= "interceptor == null" @kind object;
  #L4fef30.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fef36.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `authenticator`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Authenticator` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.authenticator:(Lokhttp3/Authenticator;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fef48.  if v2 == 0 then goto L4fef52;
  #L4fef4c.  v1.`okhttp3.OkHttpClient$Builder.r` @type ^`okhttp3.Authenticator` := v2 @kind object;
  #L4fef50.  return v1 @kind object;
  #L4fef52.  v2:= new `java.lang.NullPointerException`;
  #L4fef56.  v0:= "authenticator == null" @kind object;
  #L4fef5a.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fef60.  throw v2;
}
procedure `okhttp3.OkHttpClient` `build`(`okhttp3.OkHttpClient$Builder` v1 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.build:()Lokhttp3/OkHttpClient;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4feecc.  v0:= new `okhttp3.OkHttpClient`;
  #L4feed0.  call `<init>`(v0, v1) @signature `Lokhttp3/OkHttpClient;.<init>:(Lokhttp3/OkHttpClient$Builder;)V` @kind direct;
  #L4feed6.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `cache`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `okhttp3.Cache` v1 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.cache:(Lokhttp3/Cache;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L4fef74.  v0.`okhttp3.OkHttpClient$Builder.j` @type ^`okhttp3.Cache` := v1 @kind object;
  #L4fef78.  v1:= 0I;
  #L4fef7a.  v0.`okhttp3.OkHttpClient$Builder.k` @type ^`okhttp3.internal.cache.InternalCache` := v1 @kind object;
  #L4fef7e.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `callTimeout`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.callTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fefc0.  v0:= "timeout" @kind object;
  #L4fefc4.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L4fefca.  v2:= temp;
  #L4fefcc.  v1.`okhttp3.OkHttpClient$Builder.x` @type ^`int` := v2;
  #L4fefd0.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `callTimeout`(`okhttp3.OkHttpClient$Builder` v3 @kind this, `java.time.Duration` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.callTimeout:(Ljava/time/Duration;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4fef90.  call temp:= `toMillis`(v4) @signature `Ljava/time/Duration;.toMillis:()J` @kind virtual;
  #L4fef96.  v0:= temp @kind wide;
  #L4fef98.  v4:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4fef9c.  v2:= "timeout" @kind object;
  #L4fefa0.  call temp:= `checkDuration`(v2, v0, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L4fefa6.  v4:= temp;
  #L4fefa8.  v3.`okhttp3.OkHttpClient$Builder.x` @type ^`int` := v4;
  #L4fefac.  return v3 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `certificatePinner`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.CertificatePinner` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.certificatePinner:(Lokhttp3/CertificatePinner;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fefe4.  if v2 == 0 then goto L4fefee;
  #L4fefe8.  v1.`okhttp3.OkHttpClient$Builder.p` @type ^`okhttp3.CertificatePinner` := v2 @kind object;
  #L4fefec.  return v1 @kind object;
  #L4fefee.  v2:= new `java.lang.NullPointerException`;
  #L4feff2.  v0:= "certificatePinner == null" @kind object;
  #L4feff6.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4feffc.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `connectTimeout`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.connectTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff040.  v0:= "timeout" @kind object;
  #L4ff044.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L4ff04a.  v2:= temp;
  #L4ff04c.  v1.`okhttp3.OkHttpClient$Builder.y` @type ^`int` := v2;
  #L4ff050.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `connectTimeout`(`okhttp3.OkHttpClient$Builder` v3 @kind this, `java.time.Duration` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.connectTimeout:(Ljava/time/Duration;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ff010.  call temp:= `toMillis`(v4) @signature `Ljava/time/Duration;.toMillis:()J` @kind virtual;
  #L4ff016.  v0:= temp @kind wide;
  #L4ff018.  v4:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ff01c.  v2:= "timeout" @kind object;
  #L4ff020.  call temp:= `checkDuration`(v2, v0, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L4ff026.  v4:= temp;
  #L4ff028.  v3.`okhttp3.OkHttpClient$Builder.y` @type ^`int` := v4;
  #L4ff02c.  return v3 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `connectionPool`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.ConnectionPool` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.connectionPool:(Lokhttp3/ConnectionPool;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff064.  if v2 == 0 then goto L4ff06e;
  #L4ff068.  v1.`okhttp3.OkHttpClient$Builder.s` @type ^`okhttp3.ConnectionPool` := v2 @kind object;
  #L4ff06c.  return v1 @kind object;
  #L4ff06e.  v2:= new `java.lang.NullPointerException`;
  #L4ff072.  v0:= "connectionPool == null" @kind object;
  #L4ff076.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ff07c.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `connectionSpecs`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `java.util.List` v1 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.connectionSpecs:(Ljava/util/List;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L4ff090.  call temp:= `immutableList`(v1) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L4ff096.  v1:= temp @kind object;
  #L4ff098.  v0.`okhttp3.OkHttpClient$Builder.d` @type ^`java.util.List` := v1 @kind object;
  #L4ff09c.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `cookieJar`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.CookieJar` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.cookieJar:(Lokhttp3/CookieJar;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff0b0.  if v2 == 0 then goto L4ff0ba;
  #L4ff0b4.  v1.`okhttp3.OkHttpClient$Builder.i` @type ^`okhttp3.CookieJar` := v2 @kind object;
  #L4ff0b8.  return v1 @kind object;
  #L4ff0ba.  v2:= new `java.lang.NullPointerException`;
  #L4ff0be.  v0:= "cookieJar == null" @kind object;
  #L4ff0c2.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ff0c8.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `dispatcher`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Dispatcher` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.dispatcher:(Lokhttp3/Dispatcher;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff0dc.  if v2 == 0 then goto L4ff0e6;
  #L4ff0e0.  v1.`okhttp3.OkHttpClient$Builder.a` @type ^`okhttp3.Dispatcher` := v2 @kind object;
  #L4ff0e4.  return v1 @kind object;
  #L4ff0e6.  v2:= new `java.lang.IllegalArgumentException`;
  #L4ff0ea.  v0:= "dispatcher == null" @kind object;
  #L4ff0ee.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ff0f4.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `dns`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Dns` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.dns:(Lokhttp3/Dns;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff108.  if v2 == 0 then goto L4ff112;
  #L4ff10c.  v1.`okhttp3.OkHttpClient$Builder.t` @type ^`okhttp3.Dns` := v2 @kind object;
  #L4ff110.  return v1 @kind object;
  #L4ff112.  v2:= new `java.lang.NullPointerException`;
  #L4ff116.  v0:= "dns == null" @kind object;
  #L4ff11a.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ff120.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `eventListener`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.EventListener` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.eventListener:(Lokhttp3/EventListener;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff134.  if v2 == 0 then goto L4ff146;
  #L4ff138.  call temp:= `a`(v2) @signature `Lokhttp3/EventListener;.a:(Lokhttp3/EventListener;)Lokhttp3/EventListener$Factory;` @kind static;
  #L4ff13e.  v2:= temp @kind object;
  #L4ff140.  v1.`okhttp3.OkHttpClient$Builder.g` @type ^`okhttp3.EventListener$Factory` := v2 @kind object;
  #L4ff144.  return v1 @kind object;
  #L4ff146.  v2:= new `java.lang.NullPointerException`;
  #L4ff14a.  v0:= "eventListener == null" @kind object;
  #L4ff14e.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ff154.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `eventListenerFactory`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.EventListener$Factory` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.eventListenerFactory:(Lokhttp3/EventListener$Factory;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff168.  if v2 == 0 then goto L4ff172;
  #L4ff16c.  v1.`okhttp3.OkHttpClient$Builder.g` @type ^`okhttp3.EventListener$Factory` := v2 @kind object;
  #L4ff170.  return v1 @kind object;
  #L4ff172.  v2:= new `java.lang.NullPointerException`;
  #L4ff176.  v0:= "eventListenerFactory == null" @kind object;
  #L4ff17a.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ff180.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `followRedirects`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/OkHttpClient$Builder;.followRedirects:(Z)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L4ff194.  v0.`okhttp3.OkHttpClient$Builder.v` @type ^`boolean` := v1 @kind boolean;
  #L4ff198.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `followSslRedirects`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/OkHttpClient$Builder;.followSslRedirects:(Z)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L4ff1ac.  v0.`okhttp3.OkHttpClient$Builder.u` @type ^`boolean` := v1 @kind boolean;
  #L4ff1b0.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `hostnameVerifier`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `javax.net.ssl.HostnameVerifier` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.hostnameVerifier:(Ljavax/net/ssl/HostnameVerifier;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff1c4.  if v2 == 0 then goto L4ff1ce;
  #L4ff1c8.  v1.`okhttp3.OkHttpClient$Builder.o` @type ^`javax.net.ssl.HostnameVerifier` := v2 @kind object;
  #L4ff1cc.  return v1 @kind object;
  #L4ff1ce.  v2:= new `java.lang.NullPointerException`;
  #L4ff1d2.  v0:= "hostnameVerifier == null" @kind object;
  #L4ff1d6.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ff1dc.  throw v2;
}
procedure `java.util.List` `interceptors`(`okhttp3.OkHttpClient$Builder` v1 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.interceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fee9c.  v0:= v1.`okhttp3.OkHttpClient$Builder.e` @type ^`java.util.List` @kind object;
  #L4feea0.  return v0 @kind object;
}
procedure `java.util.List` `networkInterceptors`(`okhttp3.OkHttpClient$Builder` v1 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.networkInterceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4feeb4.  v0:= v1.`okhttp3.OkHttpClient$Builder.f` @type ^`java.util.List` @kind object;
  #L4feeb8.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `pingInterval`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.pingInterval:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff220.  v0:= "interval" @kind object;
  #L4ff224.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L4ff22a.  v2:= temp;
  #L4ff22c.  v1.`okhttp3.OkHttpClient$Builder.B` @type ^`int` := v2;
  #L4ff230.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `pingInterval`(`okhttp3.OkHttpClient$Builder` v3 @kind this, `java.time.Duration` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.pingInterval:(Ljava/time/Duration;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ff1f0.  call temp:= `toMillis`(v4) @signature `Ljava/time/Duration;.toMillis:()J` @kind virtual;
  #L4ff1f6.  v0:= temp @kind wide;
  #L4ff1f8.  v4:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ff1fc.  v2:= "timeout" @kind object;
  #L4ff200.  call temp:= `checkDuration`(v2, v0, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L4ff206.  v4:= temp;
  #L4ff208.  v3.`okhttp3.OkHttpClient$Builder.B` @type ^`int` := v4;
  #L4ff20c.  return v3 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `protocols`(`okhttp3.OkHttpClient$Builder` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.protocols:(Ljava/util/List;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ff244.  v0:= new `java.util.ArrayList`;
  #L4ff248.  call `<init>`(v0, v4) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4ff24e.  v4:= `@@okhttp3.Protocol.H2_PRIOR_KNOWLEDGE` @type ^`okhttp3.Protocol` @kind object;
  #L4ff252.  call temp:= `contains`(v0, v4) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L4ff258.  v1:= temp;
  #L4ff25a.  if v1 != 0 then goto L4ff29e;
  #L4ff25e.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L4ff262.  call temp:= `contains`(v0, v1) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L4ff268.  v1:= temp;
  #L4ff26a.  if v1 == 0 then goto L4ff270;
  #L4ff26e.  goto L4ff29e;
  #L4ff270.  v4:= new `java.lang.IllegalArgumentException`;
  #L4ff274.  v1:= new `java.lang.StringBuilder`;
  #L4ff278.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ff27e.  v2:= "protocols must contain h2_prior_knowledge or http/1.1: " @kind object;
  #L4ff282.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ff288.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ff28e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ff294.  v0:= temp @kind object;
  #L4ff296.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ff29c.  throw v4;
  #L4ff29e.  call temp:= `contains`(v0, v4) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L4ff2a4.  v4:= temp;
  #L4ff2a6.  if v4 == 0 then goto L4ff2e8;
  #L4ff2aa.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4ff2b0.  v4:= temp;
  #L4ff2b2.  v1:= 1I;
  #L4ff2b4.  if v4 > v1 then goto L4ff2ba;
  #L4ff2b8.  goto L4ff2e8;
  #L4ff2ba.  v4:= new `java.lang.IllegalArgumentException`;
  #L4ff2be.  v1:= new `java.lang.StringBuilder`;
  #L4ff2c2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ff2c8.  v2:= "protocols containing h2_prior_knowledge cannot use other protocols: " @kind object;
  #L4ff2cc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ff2d2.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ff2d8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ff2de.  v0:= temp @kind object;
  #L4ff2e0.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ff2e6.  throw v4;
  #L4ff2e8.  v4:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L4ff2ec.  call temp:= `contains`(v0, v4) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L4ff2f2.  v4:= temp;
  #L4ff2f4.  if v4 != 0 then goto L4ff32e;
  #L4ff2f8.  v4:= 0I;
  #L4ff2fa.  call temp:= `contains`(v0, v4) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L4ff300.  v4:= temp;
  #L4ff302.  if v4 != 0 then goto L4ff31e;
  #L4ff306.  v4:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L4ff30a.  call temp:= `remove`(v0, v4) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4ff310.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L4ff316.  v4:= temp @kind object;
  #L4ff318.  v3.`okhttp3.OkHttpClient$Builder.c` @type ^`java.util.List` := v4 @kind object;
  #L4ff31c.  return v3 @kind object;
  #L4ff31e.  v4:= new `java.lang.IllegalArgumentException`;
  #L4ff322.  v0:= "protocols must not contain null" @kind object;
  #L4ff326.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ff32c.  throw v4;
  #L4ff32e.  v4:= new `java.lang.IllegalArgumentException`;
  #L4ff332.  v1:= new `java.lang.StringBuilder`;
  #L4ff336.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ff33c.  v2:= "protocols must not contain http/1.0: " @kind object;
  #L4ff340.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ff346.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ff34c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ff352.  v0:= temp @kind object;
  #L4ff354.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ff35a.  throw v4;
}
procedure `okhttp3.OkHttpClient$Builder` `proxy`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `java.net.Proxy` v1 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.proxy:(Ljava/net/Proxy;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L4ff36c.  v0.`okhttp3.OkHttpClient$Builder.b` @type ^`java.net.Proxy` := v1 @kind object;
  #L4ff370.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `proxyAuthenticator`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Authenticator` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.proxyAuthenticator:(Lokhttp3/Authenticator;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff384.  if v2 == 0 then goto L4ff38e;
  #L4ff388.  v1.`okhttp3.OkHttpClient$Builder.q` @type ^`okhttp3.Authenticator` := v2 @kind object;
  #L4ff38c.  return v1 @kind object;
  #L4ff38e.  v2:= new `java.lang.NullPointerException`;
  #L4ff392.  v0:= "proxyAuthenticator == null" @kind object;
  #L4ff396.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ff39c.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `proxySelector`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `java.net.ProxySelector` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.proxySelector:(Ljava/net/ProxySelector;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff3b0.  if v2 == 0 then goto L4ff3ba;
  #L4ff3b4.  v1.`okhttp3.OkHttpClient$Builder.h` @type ^`java.net.ProxySelector` := v2 @kind object;
  #L4ff3b8.  return v1 @kind object;
  #L4ff3ba.  v2:= new `java.lang.NullPointerException`;
  #L4ff3be.  v0:= "proxySelector == null" @kind object;
  #L4ff3c2.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ff3c8.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `readTimeout`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.readTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff40c.  v0:= "timeout" @kind object;
  #L4ff410.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L4ff416.  v2:= temp;
  #L4ff418.  v1.`okhttp3.OkHttpClient$Builder.z` @type ^`int` := v2;
  #L4ff41c.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `readTimeout`(`okhttp3.OkHttpClient$Builder` v3 @kind this, `java.time.Duration` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.readTimeout:(Ljava/time/Duration;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ff3dc.  call temp:= `toMillis`(v4) @signature `Ljava/time/Duration;.toMillis:()J` @kind virtual;
  #L4ff3e2.  v0:= temp @kind wide;
  #L4ff3e4.  v4:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ff3e8.  v2:= "timeout" @kind object;
  #L4ff3ec.  call temp:= `checkDuration`(v2, v0, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L4ff3f2.  v4:= temp;
  #L4ff3f4.  v3.`okhttp3.OkHttpClient$Builder.z` @type ^`int` := v4;
  #L4ff3f8.  return v3 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `retryOnConnectionFailure`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/OkHttpClient$Builder;.retryOnConnectionFailure:(Z)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L4ff430.  v0.`okhttp3.OkHttpClient$Builder.w` @type ^`boolean` := v1 @kind boolean;
  #L4ff434.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `socketFactory`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `javax.net.SocketFactory` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.socketFactory:(Ljavax/net/SocketFactory;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff448.  if v2 == 0 then goto L4ff452;
  #L4ff44c.  v1.`okhttp3.OkHttpClient$Builder.l` @type ^`javax.net.SocketFactory` := v2 @kind object;
  #L4ff450.  return v1 @kind object;
  #L4ff452.  v2:= new `java.lang.NullPointerException`;
  #L4ff456.  v0:= "socketFactory == null" @kind object;
  #L4ff45a.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ff460.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `sslSocketFactory`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `javax.net.ssl.SSLSocketFactory` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.sslSocketFactory:(Ljavax/net/ssl/SSLSocketFactory;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff474.  if v2 == 0 then goto L4ff492;
  #L4ff478.  v1.`okhttp3.OkHttpClient$Builder.m` @type ^`javax.net.ssl.SSLSocketFactory` := v2 @kind object;
  #L4ff47c.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L4ff482.  v0:= temp @kind object;
  #L4ff484.  call temp:= `buildCertificateChainCleaner`(v0, v2) @signature `Lokhttp3/internal/platform/Platform;.buildCertificateChainCleaner:(Ljavax/net/ssl/SSLSocketFactory;)Lokhttp3/internal/tls/CertificateChainCleaner;` @kind virtual;
  #L4ff48a.  v2:= temp @kind object;
  #L4ff48c.  v1.`okhttp3.OkHttpClient$Builder.n` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v2 @kind object;
  #L4ff490.  return v1 @kind object;
  #L4ff492.  v2:= new `java.lang.NullPointerException`;
  #L4ff496.  v0:= "sslSocketFactory == null" @kind object;
  #L4ff49a.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ff4a0.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `sslSocketFactory`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `javax.net.ssl.SSLSocketFactory` v1 @kind object, `javax.net.ssl.X509TrustManager` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.sslSocketFactory:(Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/X509TrustManager;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L4ff4b4.  if v1 == 0 then goto L4ff4de;
  #L4ff4b8.  if v2 == 0 then goto L4ff4ce;
  #L4ff4bc.  v0.`okhttp3.OkHttpClient$Builder.m` @type ^`javax.net.ssl.SSLSocketFactory` := v1 @kind object;
  #L4ff4c0.  call temp:= `get`(v2) @signature `Lokhttp3/internal/tls/CertificateChainCleaner;.get:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner;` @kind static;
  #L4ff4c6.  v1:= temp @kind object;
  #L4ff4c8.  v0.`okhttp3.OkHttpClient$Builder.n` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v1 @kind object;
  #L4ff4cc.  return v0 @kind object;
  #L4ff4ce.  v1:= new `java.lang.NullPointerException`;
  #L4ff4d2.  v2:= "trustManager == null" @kind object;
  #L4ff4d6.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ff4dc.  throw v1;
  #L4ff4de.  v1:= new `java.lang.NullPointerException`;
  #L4ff4e2.  v2:= "sslSocketFactory == null" @kind object;
  #L4ff4e6.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ff4ec.  throw v1;
}
procedure `okhttp3.OkHttpClient$Builder` `writeTimeout`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.writeTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff530.  v0:= "timeout" @kind object;
  #L4ff534.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L4ff53a.  v2:= temp;
  #L4ff53c.  v1.`okhttp3.OkHttpClient$Builder.A` @type ^`int` := v2;
  #L4ff540.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `writeTimeout`(`okhttp3.OkHttpClient$Builder` v3 @kind this, `java.time.Duration` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.writeTimeout:(Ljava/time/Duration;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ff500.  call temp:= `toMillis`(v4) @signature `Ljava/time/Duration;.toMillis:()J` @kind virtual;
  #L4ff506.  v0:= temp @kind wide;
  #L4ff508.  v4:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ff50c.  v2:= "timeout" @kind object;
  #L4ff510.  call temp:= `checkDuration`(v2, v0, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L4ff516.  v4:= temp;
  #L4ff518.  v3.`okhttp3.OkHttpClient$Builder.A` @type ^`int` := v4;
  #L4ff51c.  return v3 @kind object;
}
