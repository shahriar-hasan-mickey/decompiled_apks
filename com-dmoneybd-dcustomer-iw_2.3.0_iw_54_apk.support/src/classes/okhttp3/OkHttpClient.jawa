record `okhttp3.OkHttpClient` @kind class @AccessFlag PUBLIC extends `java.lang.Cloneable` @kind interface, `okhttp3.Call$Factory` @kind interface, `okhttp3.WebSocket$Factory` @kind interface {
  `int` `okhttp3.OkHttpClient.A` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient.B` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient.C` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient.D` @AccessFlag FINAL;
  `okhttp3.Dispatcher` `okhttp3.OkHttpClient.c` @AccessFlag FINAL;
  `java.net.Proxy` `okhttp3.OkHttpClient.d` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient.e` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient.f` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient.g` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient.h` @AccessFlag FINAL;
  `okhttp3.EventListener$Factory` `okhttp3.OkHttpClient.i` @AccessFlag FINAL;
  `java.net.ProxySelector` `okhttp3.OkHttpClient.j` @AccessFlag FINAL;
  `okhttp3.CookieJar` `okhttp3.OkHttpClient.k` @AccessFlag FINAL;
  `okhttp3.Cache` `okhttp3.OkHttpClient.l` @AccessFlag FINAL;
  `okhttp3.internal.cache.InternalCache` `okhttp3.OkHttpClient.m` @AccessFlag FINAL;
  `javax.net.SocketFactory` `okhttp3.OkHttpClient.n` @AccessFlag FINAL;
  `javax.net.ssl.SSLSocketFactory` `okhttp3.OkHttpClient.o` @AccessFlag FINAL;
  `okhttp3.internal.tls.CertificateChainCleaner` `okhttp3.OkHttpClient.p` @AccessFlag FINAL;
  `javax.net.ssl.HostnameVerifier` `okhttp3.OkHttpClient.q` @AccessFlag FINAL;
  `okhttp3.CertificatePinner` `okhttp3.OkHttpClient.r` @AccessFlag FINAL;
  `okhttp3.Authenticator` `okhttp3.OkHttpClient.s` @AccessFlag FINAL;
  `okhttp3.Authenticator` `okhttp3.OkHttpClient.t` @AccessFlag FINAL;
  `okhttp3.ConnectionPool` `okhttp3.OkHttpClient.u` @AccessFlag FINAL;
  `okhttp3.Dns` `okhttp3.OkHttpClient.v` @AccessFlag FINAL;
  `boolean` `okhttp3.OkHttpClient.w` @AccessFlag FINAL;
  `boolean` `okhttp3.OkHttpClient.x` @AccessFlag FINAL;
  `boolean` `okhttp3.OkHttpClient.y` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient.z` @AccessFlag FINAL;
}
global `java.util.List` `@@okhttp3.OkHttpClient.a` @AccessFlag STATIC_FINAL;
global `java.util.List` `@@okhttp3.OkHttpClient.b` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/OkHttpClient;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ffadc.  v0:= 2I;
  #L4ffade.  v1:= new `okhttp3.Protocol`[v0];
  #L4ffae2.  v2:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L4ffae6.  v3:= 0I;
  #L4ffae8.  v1[v3]:= v2 @kind object;
  #L4ffaec.  v2:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L4ffaf0.  v4:= 1I;
  #L4ffaf2.  v1[v4]:= v2 @kind object;
  #L4ffaf6.  call temp:= `immutableList`(v1) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4ffafc.  v1:= temp @kind object;
  #L4ffafe.  `@@okhttp3.OkHttpClient.a` @type ^`java.util.List` := v1 @kind object;
  #L4ffb02.  v0:= new `okhttp3.ConnectionSpec`[v0];
  #L4ffb06.  v1:= `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` @kind object;
  #L4ffb0a.  v0[v3]:= v1 @kind object;
  #L4ffb0e.  v1:= `@@okhttp3.ConnectionSpec.CLEARTEXT` @type ^`okhttp3.ConnectionSpec` @kind object;
  #L4ffb12.  v0[v4]:= v1 @kind object;
  #L4ffb16.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4ffb1c.  v0:= temp @kind object;
  #L4ffb1e.  `@@okhttp3.OkHttpClient.b` @type ^`java.util.List` := v0 @kind object;
  #L4ffb22.  v0:= new `okhttp3.OkHttpClient$1`;
  #L4ffb26.  call `<init>`(v0) @signature `Lokhttp3/OkHttpClient$1;.<init>:()V` @kind direct;
  #L4ffb2c.  `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` := v0 @kind object;
  #L4ffb30.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ffb44.  v0:= new `okhttp3.OkHttpClient$Builder`;
  #L4ffb48.  call `<init>`(v0) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:()V` @kind direct;
  #L4ffb4e.  call `<init>`(v1, v0) @signature `Lokhttp3/OkHttpClient;.<init>:(Lokhttp3/OkHttpClient$Builder;)V` @kind direct;
  #L4ffb54.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient` v4 @kind this, `okhttp3.OkHttpClient$Builder` v5 @kind object) @signature `Lokhttp3/OkHttpClient;.<init>:(Lokhttp3/OkHttpClient$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ffb68.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ffb6e.  v0:= v5.`okhttp3.OkHttpClient$Builder.a` @type ^`okhttp3.Dispatcher` @kind object;
  #L4ffb72.  v4.`okhttp3.OkHttpClient.c` @type ^`okhttp3.Dispatcher` := v0 @kind object;
  #L4ffb76.  v0:= v5.`okhttp3.OkHttpClient$Builder.b` @type ^`java.net.Proxy` @kind object;
  #L4ffb7a.  v4.`okhttp3.OkHttpClient.d` @type ^`java.net.Proxy` := v0 @kind object;
  #L4ffb7e.  v0:= v5.`okhttp3.OkHttpClient$Builder.c` @type ^`java.util.List` @kind object;
  #L4ffb82.  v4.`okhttp3.OkHttpClient.e` @type ^`java.util.List` := v0 @kind object;
  #L4ffb86.  v0:= v5.`okhttp3.OkHttpClient$Builder.d` @type ^`java.util.List` @kind object;
  #L4ffb8a.  v4.`okhttp3.OkHttpClient.f` @type ^`java.util.List` := v0 @kind object;
  #L4ffb8e.  v1:= v5.`okhttp3.OkHttpClient$Builder.e` @type ^`java.util.List` @kind object;
  #L4ffb92.  call temp:= `immutableList`(v1) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L4ffb98.  v1:= temp @kind object;
  #L4ffb9a.  v4.`okhttp3.OkHttpClient.g` @type ^`java.util.List` := v1 @kind object;
  #L4ffb9e.  v1:= v5.`okhttp3.OkHttpClient$Builder.f` @type ^`java.util.List` @kind object;
  #L4ffba2.  call temp:= `immutableList`(v1) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L4ffba8.  v1:= temp @kind object;
  #L4ffbaa.  v4.`okhttp3.OkHttpClient.h` @type ^`java.util.List` := v1 @kind object;
  #L4ffbae.  v1:= v5.`okhttp3.OkHttpClient$Builder.g` @type ^`okhttp3.EventListener$Factory` @kind object;
  #L4ffbb2.  v4.`okhttp3.OkHttpClient.i` @type ^`okhttp3.EventListener$Factory` := v1 @kind object;
  #L4ffbb6.  v1:= v5.`okhttp3.OkHttpClient$Builder.h` @type ^`java.net.ProxySelector` @kind object;
  #L4ffbba.  v4.`okhttp3.OkHttpClient.j` @type ^`java.net.ProxySelector` := v1 @kind object;
  #L4ffbbe.  v1:= v5.`okhttp3.OkHttpClient$Builder.i` @type ^`okhttp3.CookieJar` @kind object;
  #L4ffbc2.  v4.`okhttp3.OkHttpClient.k` @type ^`okhttp3.CookieJar` := v1 @kind object;
  #L4ffbc6.  v1:= v5.`okhttp3.OkHttpClient$Builder.j` @type ^`okhttp3.Cache` @kind object;
  #L4ffbca.  v4.`okhttp3.OkHttpClient.l` @type ^`okhttp3.Cache` := v1 @kind object;
  #L4ffbce.  v1:= v5.`okhttp3.OkHttpClient$Builder.k` @type ^`okhttp3.internal.cache.InternalCache` @kind object;
  #L4ffbd2.  v4.`okhttp3.OkHttpClient.m` @type ^`okhttp3.internal.cache.InternalCache` := v1 @kind object;
  #L4ffbd6.  v1:= v5.`okhttp3.OkHttpClient$Builder.l` @type ^`javax.net.SocketFactory` @kind object;
  #L4ffbda.  v4.`okhttp3.OkHttpClient.n` @type ^`javax.net.SocketFactory` := v1 @kind object;
  #L4ffbde.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ffbe4.  v0:= temp @kind object;
  #L4ffbe6.  v1:= 0I;
  #L4ffbe8.  v2:= 0I;
  #L4ffbea.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ffbf0.  v3:= temp;
  #L4ffbf2.  if v3 == 0 then goto L4ffc16;
  #L4ffbf6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ffbfc.  v3:= temp @kind object;
  #L4ffbfe.  v3:= (`okhttp3.ConnectionSpec`) v3 @kind object;
  #L4ffc02.  if v2 != 0 then goto L4ffc12;
  #L4ffc06.  call temp:= `isTls`(v3) @signature `Lokhttp3/ConnectionSpec;.isTls:()Z` @kind virtual;
  #L4ffc0c.  v2:= temp;
  #L4ffc0e.  if v2 == 0 then goto L4ffbe8;
  #L4ffc12.  v2:= 1I;
  #L4ffc14.  goto L4ffbea;
  #L4ffc16.  v0:= v5.`okhttp3.OkHttpClient$Builder.m` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L4ffc1a.  if v0 != 0 then goto L4ffc42;
  #L4ffc1e.  if v2 != 0 then goto L4ffc24;
  #L4ffc22.  goto L4ffc42;
  #L4ffc24.  call temp:= `platformTrustManager`() @signature `Lokhttp3/internal/Util;.platformTrustManager:()Ljavax/net/ssl/X509TrustManager;` @kind static;
  #L4ffc2a.  v0:= temp @kind object;
  #L4ffc2c.  call temp:= `newSslSocketFactory`(v0) @signature `Lokhttp3/OkHttpClient;.newSslSocketFactory:(Ljavax/net/ssl/X509TrustManager;)Ljavax/net/ssl/SSLSocketFactory;` @kind static;
  #L4ffc32.  v1:= temp @kind object;
  #L4ffc34.  v4.`okhttp3.OkHttpClient.o` @type ^`javax.net.ssl.SSLSocketFactory` := v1 @kind object;
  #L4ffc38.  call temp:= `get`(v0) @signature `Lokhttp3/internal/tls/CertificateChainCleaner;.get:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner;` @kind static;
  #L4ffc3e.  v0:= temp @kind object;
  #L4ffc40.  goto L4ffc4a;
  #L4ffc42.  v4.`okhttp3.OkHttpClient.o` @type ^`javax.net.ssl.SSLSocketFactory` := v0 @kind object;
  #L4ffc46.  v0:= v5.`okhttp3.OkHttpClient$Builder.n` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L4ffc4a.  v4.`okhttp3.OkHttpClient.p` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v0 @kind object;
  #L4ffc4e.  v0:= v4.`okhttp3.OkHttpClient.o` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L4ffc52.  if v0 == 0 then goto L4ffc68;
  #L4ffc56.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L4ffc5c.  v0:= temp @kind object;
  #L4ffc5e.  v1:= v4.`okhttp3.OkHttpClient.o` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L4ffc62.  call `configureSslSocketFactory`(v0, v1) @signature `Lokhttp3/internal/platform/Platform;.configureSslSocketFactory:(Ljavax/net/ssl/SSLSocketFactory;)V` @kind virtual;
  #L4ffc68.  v0:= v5.`okhttp3.OkHttpClient$Builder.o` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L4ffc6c.  v4.`okhttp3.OkHttpClient.q` @type ^`javax.net.ssl.HostnameVerifier` := v0 @kind object;
  #L4ffc70.  v0:= v5.`okhttp3.OkHttpClient$Builder.p` @type ^`okhttp3.CertificatePinner` @kind object;
  #L4ffc74.  v1:= v4.`okhttp3.OkHttpClient.p` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L4ffc78.  call temp:= `d`(v0, v1) @signature `Lokhttp3/CertificatePinner;.d:(Lokhttp3/internal/tls/CertificateChainCleaner;)Lokhttp3/CertificatePinner;` @kind virtual;
  #L4ffc7e.  v0:= temp @kind object;
  #L4ffc80.  v4.`okhttp3.OkHttpClient.r` @type ^`okhttp3.CertificatePinner` := v0 @kind object;
  #L4ffc84.  v0:= v5.`okhttp3.OkHttpClient$Builder.q` @type ^`okhttp3.Authenticator` @kind object;
  #L4ffc88.  v4.`okhttp3.OkHttpClient.s` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L4ffc8c.  v0:= v5.`okhttp3.OkHttpClient$Builder.r` @type ^`okhttp3.Authenticator` @kind object;
  #L4ffc90.  v4.`okhttp3.OkHttpClient.t` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L4ffc94.  v0:= v5.`okhttp3.OkHttpClient$Builder.s` @type ^`okhttp3.ConnectionPool` @kind object;
  #L4ffc98.  v4.`okhttp3.OkHttpClient.u` @type ^`okhttp3.ConnectionPool` := v0 @kind object;
  #L4ffc9c.  v0:= v5.`okhttp3.OkHttpClient$Builder.t` @type ^`okhttp3.Dns` @kind object;
  #L4ffca0.  v4.`okhttp3.OkHttpClient.v` @type ^`okhttp3.Dns` := v0 @kind object;
  #L4ffca4.  v0:= v5.`okhttp3.OkHttpClient$Builder.u` @type ^`boolean` @kind boolean;
  #L4ffca8.  v4.`okhttp3.OkHttpClient.w` @type ^`boolean` := v0 @kind boolean;
  #L4ffcac.  v0:= v5.`okhttp3.OkHttpClient$Builder.v` @type ^`boolean` @kind boolean;
  #L4ffcb0.  v4.`okhttp3.OkHttpClient.x` @type ^`boolean` := v0 @kind boolean;
  #L4ffcb4.  v0:= v5.`okhttp3.OkHttpClient$Builder.w` @type ^`boolean` @kind boolean;
  #L4ffcb8.  v4.`okhttp3.OkHttpClient.y` @type ^`boolean` := v0 @kind boolean;
  #L4ffcbc.  v0:= v5.`okhttp3.OkHttpClient$Builder.x` @type ^`int`;
  #L4ffcc0.  v4.`okhttp3.OkHttpClient.z` @type ^`int` := v0;
  #L4ffcc4.  v0:= v5.`okhttp3.OkHttpClient$Builder.y` @type ^`int`;
  #L4ffcc8.  v4.`okhttp3.OkHttpClient.A` @type ^`int` := v0;
  #L4ffccc.  v0:= v5.`okhttp3.OkHttpClient$Builder.z` @type ^`int`;
  #L4ffcd0.  v4.`okhttp3.OkHttpClient.B` @type ^`int` := v0;
  #L4ffcd4.  v0:= v5.`okhttp3.OkHttpClient$Builder.A` @type ^`int`;
  #L4ffcd8.  v4.`okhttp3.OkHttpClient.C` @type ^`int` := v0;
  #L4ffcdc.  v5:= v5.`okhttp3.OkHttpClient$Builder.B` @type ^`int`;
  #L4ffce0.  v4.`okhttp3.OkHttpClient.D` @type ^`int` := v5;
  #L4ffce4.  v5:= v4.`okhttp3.OkHttpClient.g` @type ^`java.util.List` @kind object;
  #L4ffce8.  v0:= 0I;
  #L4ffcea.  call temp:= `contains`(v5, v0) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L4ffcf0.  v5:= temp;
  #L4ffcf2.  if v5 != 0 then goto L4ffd3a;
  #L4ffcf6.  v5:= v4.`okhttp3.OkHttpClient.h` @type ^`java.util.List` @kind object;
  #L4ffcfa.  call temp:= `contains`(v5, v0) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L4ffd00.  v5:= temp;
  #L4ffd02.  if v5 != 0 then goto L4ffd08;
  #L4ffd06.  return @kind void;
  #L4ffd08.  v5:= new `java.lang.IllegalStateException`;
  #L4ffd0c.  v0:= new `java.lang.StringBuilder`;
  #L4ffd10.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ffd16.  v1:= "Null network interceptor: " @kind object;
  #L4ffd1a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ffd20.  v1:= v4.`okhttp3.OkHttpClient.h` @type ^`java.util.List` @kind object;
  #L4ffd24.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ffd2a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ffd30.  v0:= temp @kind object;
  #L4ffd32.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ffd38.  throw v5;
  #L4ffd3a.  v5:= new `java.lang.IllegalStateException`;
  #L4ffd3e.  v0:= new `java.lang.StringBuilder`;
  #L4ffd42.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ffd48.  v1:= "Null interceptor: " @kind object;
  #L4ffd4c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ffd52.  v1:= v4.`okhttp3.OkHttpClient.g` @type ^`java.util.List` @kind object;
  #L4ffd56.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ffd5c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ffd62.  v0:= temp @kind object;
  #L4ffd64.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ffd6a.  goto L4ffd6e;
  #L4ffd6c.  throw v5;
  #L4ffd6e.  goto L4ffd6c;
}
procedure `javax.net.ssl.SSLSocketFactory` `newSslSocketFactory`(`javax.net.ssl.X509TrustManager` v3 @kind object) @signature `Lokhttp3/OkHttpClient;.newSslSocketFactory:(Ljavax/net/ssl/X509TrustManager;)Ljavax/net/ssl/SSLSocketFactory;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4ff8f8.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L4ff8fe.  v0:= temp @kind object;
  #L4ff900.  call temp:= `getSSLContext`(v0) @signature `Lokhttp3/internal/platform/Platform;.getSSLContext:()Ljavax/net/ssl/SSLContext;` @kind virtual;
  #L4ff906.  v0:= temp @kind object;
  #L4ff908.  v1:= 1I;
  #L4ff90a.  v1:= new `javax.net.ssl.TrustManager`[v1];
  #L4ff90e.  v2:= 0I;
  #L4ff910.  v1[v2]:= v3 @kind object;
  #L4ff914.  v3:= 0I;
  #L4ff916.  call `init`(v0, v3, v1, v3) @signature `Ljavax/net/ssl/SSLContext;.init:([Ljavax/net/ssl/KeyManager;[Ljavax/net/ssl/TrustManager;Ljava/security/SecureRandom;)V` @kind virtual;
  #L4ff91c.  call temp:= `getSocketFactory`(v0) @signature `Ljavax/net/ssl/SSLContext;.getSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @kind virtual;
  #L4ff922.  v3:= temp @kind object;
  #L4ff924.  return v3 @kind object;
  #L4ff926.  v3:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L4ff928.  v0:= "No System TLS" @kind object;
  #L4ff92c.  call temp:= `assertionError`(v0, v3) @signature `Lokhttp3/internal/Util;.assertionError:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L4ff932.  v3:= temp @kind object;
  #L4ff934.  throw v3;
  catch `java.security.GeneralSecurityException` @[L4ff8f8..L4ff924] goto L4ff926;
}
procedure `okhttp3.internal.cache.InternalCache` `a`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.a:()Lokhttp3/internal/cache/InternalCache;` @AccessFlag  {
    temp;
    v0;

  #L4ffab8.  v0:= v1.`okhttp3.OkHttpClient.l` @type ^`okhttp3.Cache` @kind object;
  #L4ffabc.  if v0 == 0 then goto L4ffac6;
  #L4ffac0.  v0:= v0.`okhttp3.Cache.a` @type ^`okhttp3.internal.cache.InternalCache` @kind object;
  #L4ffac4.  goto L4ffaca;
  #L4ffac6.  v0:= v1.`okhttp3.OkHttpClient.m` @type ^`okhttp3.internal.cache.InternalCache` @kind object;
  #L4ffaca.  return v0 @kind object;
}
procedure `okhttp3.Authenticator` `authenticator`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.authenticator:()Lokhttp3/Authenticator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff970.  v0:= v1.`okhttp3.OkHttpClient.t` @type ^`okhttp3.Authenticator` @kind object;
  #L4ff974.  return v0 @kind object;
}
procedure `okhttp3.Cache` `cache`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.cache:()Lokhttp3/Cache;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff9a0.  v0:= v1.`okhttp3.OkHttpClient.l` @type ^`okhttp3.Cache` @kind object;
  #L4ff9a4.  return v0 @kind object;
}
procedure `int` `callTimeoutMillis`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.callTimeoutMillis:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff7c0.  v0:= v1.`okhttp3.OkHttpClient.z` @type ^`int`;
  #L4ff7c4.  return v0;
}
procedure `okhttp3.CertificatePinner` `certificatePinner`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.certificatePinner:()Lokhttp3/CertificatePinner;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff9d4.  v0:= v1.`okhttp3.OkHttpClient.r` @type ^`okhttp3.CertificatePinner` @kind object;
  #L4ff9d8.  return v0 @kind object;
}
procedure `int` `connectTimeoutMillis`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.connectTimeoutMillis:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff7d8.  v0:= v1.`okhttp3.OkHttpClient.A` @type ^`int`;
  #L4ff7dc.  return v0;
}
procedure `okhttp3.ConnectionPool` `connectionPool`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff9ec.  v0:= v1.`okhttp3.OkHttpClient.u` @type ^`okhttp3.ConnectionPool` @kind object;
  #L4ff9f0.  return v0 @kind object;
}
procedure `java.util.List` `connectionSpecs`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.connectionSpecs:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff868.  v0:= v1.`okhttp3.OkHttpClient.f` @type ^`java.util.List` @kind object;
  #L4ff86c.  return v0 @kind object;
}
procedure `okhttp3.CookieJar` `cookieJar`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ffa04.  v0:= v1.`okhttp3.OkHttpClient.k` @type ^`okhttp3.CookieJar` @kind object;
  #L4ffa08.  return v0 @kind object;
}
procedure `okhttp3.Dispatcher` `dispatcher`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ffa1c.  v0:= v1.`okhttp3.OkHttpClient.c` @type ^`okhttp3.Dispatcher` @kind object;
  #L4ffa20.  return v0 @kind object;
}
procedure `okhttp3.Dns` `dns`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.dns:()Lokhttp3/Dns;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ffa34.  v0:= v1.`okhttp3.OkHttpClient.v` @type ^`okhttp3.Dns` @kind object;
  #L4ffa38.  return v0 @kind object;
}
procedure `okhttp3.EventListener$Factory` `eventListenerFactory`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.eventListenerFactory:()Lokhttp3/EventListener$Factory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ffa4c.  v0:= v1.`okhttp3.OkHttpClient.i` @type ^`okhttp3.EventListener$Factory` @kind object;
  #L4ffa50.  return v0 @kind object;
}
procedure `boolean` `followRedirects`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.followRedirects:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff778.  v0:= v1.`okhttp3.OkHttpClient.x` @type ^`boolean` @kind boolean;
  #L4ff77c.  return v0;
}
procedure `boolean` `followSslRedirects`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.followSslRedirects:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff790.  v0:= v1.`okhttp3.OkHttpClient.w` @type ^`boolean` @kind boolean;
  #L4ff794.  return v0;
}
procedure `javax.net.ssl.HostnameVerifier` `hostnameVerifier`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.hostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff8e0.  v0:= v1.`okhttp3.OkHttpClient.q` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L4ff8e4.  return v0 @kind object;
}
procedure `java.util.List` `interceptors`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.interceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff880.  v0:= v1.`okhttp3.OkHttpClient.g` @type ^`java.util.List` @kind object;
  #L4ff884.  return v0 @kind object;
}
procedure `java.util.List` `networkInterceptors`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.networkInterceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff898.  v0:= v1.`okhttp3.OkHttpClient.h` @type ^`java.util.List` @kind object;
  #L4ff89c.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `newBuilder`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.newBuilder:()Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ffa64.  v0:= new `okhttp3.OkHttpClient$Builder`;
  #L4ffa68.  call `<init>`(v0, v1) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:(Lokhttp3/OkHttpClient;)V` @kind direct;
  #L4ffa6e.  return v0 @kind object;
}
procedure `okhttp3.Call` `newCall`(`okhttp3.OkHttpClient` v1 @kind this, `okhttp3.Request` v2 @kind object) @signature `Lokhttp3/OkHttpClient;.newCall:(Lokhttp3/Request;)Lokhttp3/Call;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff9b8.  v0:= 0I;
  #L4ff9ba.  call temp:= `c`(v1, v2, v0) @signature `Lokhttp3/RealCall;.c:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @kind static;
  #L4ff9c0.  v2:= temp @kind object;
  #L4ff9c2.  return v2 @kind object;
}
procedure `okhttp3.WebSocket` `newWebSocket`(`okhttp3.OkHttpClient` v7 @kind this, `okhttp3.Request` v8 @kind object, `okhttp3.WebSocketListener` v9 @kind object) @signature `Lokhttp3/OkHttpClient;.newWebSocket:(Lokhttp3/Request;Lokhttp3/WebSocketListener;)Lokhttp3/WebSocket;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4ffa80.  v6:= new `okhttp3.internal.ws.RealWebSocket`;
  #L4ffa84.  v3:= new `java.util.Random`;
  #L4ffa88.  call `<init>`(v3) @signature `Ljava/util/Random;.<init>:()V` @kind direct;
  #L4ffa8e.  v0:= v7.`okhttp3.OkHttpClient.D` @type ^`int`;
  #L4ffa92.  v4:= (`long`) v0 @kind i2l;
  #L4ffa94.  v0:= v6 @kind object;
  #L4ffa96.  v1:= v8 @kind object;
  #L4ffa98.  v2:= v9 @kind object;
  #L4ffa9a.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lokhttp3/internal/ws/RealWebSocket;.<init>:(Lokhttp3/Request;Lokhttp3/WebSocketListener;Ljava/util/Random;J)V` @kind direct;
  #L4ffaa0.  call `connect`(v6, v7) @signature `Lokhttp3/internal/ws/RealWebSocket;.connect:(Lokhttp3/OkHttpClient;)V` @kind virtual;
  #L4ffaa6.  return v6 @kind object;
}
procedure `int` `pingIntervalMillis`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.pingIntervalMillis:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff7f0.  v0:= v1.`okhttp3.OkHttpClient.D` @type ^`int`;
  #L4ff7f4.  return v0;
}
procedure `java.util.List` `protocols`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.protocols:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff8b0.  v0:= v1.`okhttp3.OkHttpClient.e` @type ^`java.util.List` @kind object;
  #L4ff8b4.  return v0 @kind object;
}
procedure `java.net.Proxy` `proxy`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff838.  v0:= v1.`okhttp3.OkHttpClient.d` @type ^`java.net.Proxy` @kind object;
  #L4ff83c.  return v0 @kind object;
}
procedure `okhttp3.Authenticator` `proxyAuthenticator`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff988.  v0:= v1.`okhttp3.OkHttpClient.s` @type ^`okhttp3.Authenticator` @kind object;
  #L4ff98c.  return v0 @kind object;
}
procedure `java.net.ProxySelector` `proxySelector`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.proxySelector:()Ljava/net/ProxySelector;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff850.  v0:= v1.`okhttp3.OkHttpClient.j` @type ^`java.net.ProxySelector` @kind object;
  #L4ff854.  return v0 @kind object;
}
procedure `int` `readTimeoutMillis`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.readTimeoutMillis:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff808.  v0:= v1.`okhttp3.OkHttpClient.B` @type ^`int`;
  #L4ff80c.  return v0;
}
procedure `boolean` `retryOnConnectionFailure`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff7a8.  v0:= v1.`okhttp3.OkHttpClient.y` @type ^`boolean` @kind boolean;
  #L4ff7ac.  return v0;
}
procedure `javax.net.SocketFactory` `socketFactory`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.socketFactory:()Ljavax/net/SocketFactory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff8c8.  v0:= v1.`okhttp3.OkHttpClient.n` @type ^`javax.net.SocketFactory` @kind object;
  #L4ff8cc.  return v0 @kind object;
}
procedure `javax.net.ssl.SSLSocketFactory` `sslSocketFactory`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.sslSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff958.  v0:= v1.`okhttp3.OkHttpClient.o` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L4ff95c.  return v0 @kind object;
}
procedure `int` `writeTimeoutMillis`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.writeTimeoutMillis:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ff820.  v0:= v1.`okhttp3.OkHttpClient.C` @type ^`int`;
  #L4ff824.  return v0;
}
