record `okhttp3.internal.http2.Http2Stream` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `okhttp3.internal.http2.Http2Stream.a` @AccessFlag ;
  `long` `okhttp3.internal.http2.Http2Stream.b` @AccessFlag ;
  `int` `okhttp3.internal.http2.Http2Stream.c` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2Stream.d` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Stream$FramingSink` `okhttp3.internal.http2.Http2Stream.e` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Stream$StreamTimeout` `okhttp3.internal.http2.Http2Stream.f` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Stream$StreamTimeout` `okhttp3.internal.http2.Http2Stream.g` @AccessFlag FINAL;
  `okhttp3.internal.http2.ErrorCode` `okhttp3.internal.http2.Http2Stream.h` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @AccessFlag PRIVATE;
  `okhttp3.internal.http2.Header$Listener` `okhttp3.internal.http2.Http2Stream.headersListener` @AccessFlag PRIVATE;
  `java.util.Deque` `okhttp3.internal.http2.Http2Stream.headersQueue` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Stream$FramingSource` `okhttp3.internal.http2.Http2Stream.source` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Stream;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L5054b0.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `int` v4 , `okhttp3.internal.http2.Http2Connection` v5 @kind object, `boolean` v6 , `boolean` v7 , `okhttp3.Headers` v8 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.<init>:(ILokhttp3/internal/http2/Http2Connection;ZZLokhttp3/Headers;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L5054c4.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5054ca.  v0:= 0L;
  #L5054ce.  v3.`okhttp3.internal.http2.Http2Stream.a` @type ^`long` := v0 @kind wide;
  #L5054d2.  v0:= new `java.util.ArrayDeque`;
  #L5054d6.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L5054dc.  v3.`okhttp3.internal.http2.Http2Stream.headersQueue` @type ^`java.util.Deque` := v0 @kind object;
  #L5054e0.  v1:= new `okhttp3.internal.http2.Http2Stream$StreamTimeout`;
  #L5054e4.  call `<init>`(v1, v3) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L5054ea.  v3.`okhttp3.internal.http2.Http2Stream.f` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` := v1 @kind object;
  #L5054ee.  v1:= new `okhttp3.internal.http2.Http2Stream$StreamTimeout`;
  #L5054f2.  call `<init>`(v1, v3) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L5054f8.  v3.`okhttp3.internal.http2.Http2Stream.g` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` := v1 @kind object;
  #L5054fc.  v1:= 0I;
  #L5054fe.  v3.`okhttp3.internal.http2.Http2Stream.h` @type ^`okhttp3.internal.http2.ErrorCode` := v1 @kind object;
  #L505502.  if v5 == 0 then goto L5055a2;
  #L505506.  v3.`okhttp3.internal.http2.Http2Stream.c` @type ^`int` := v4;
  #L50550a.  v3.`okhttp3.internal.http2.Http2Stream.d` @type ^`okhttp3.internal.http2.Http2Connection` := v5 @kind object;
  #L50550e.  v4:= v5.`okhttp3.internal.http2.Http2Connection.l` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L505512.  call temp:= `d`(v4) @signature `Lokhttp3/internal/http2/Settings;.d:()I` @kind virtual;
  #L505518.  v4:= temp;
  #L50551a.  v1:= (`long`) v4 @kind i2l;
  #L50551c.  v3.`okhttp3.internal.http2.Http2Stream.b` @type ^`long` := v1 @kind wide;
  #L505520.  v4:= new `okhttp3.internal.http2.Http2Stream$FramingSource`;
  #L505524.  v5:= v5.`okhttp3.internal.http2.Http2Connection.k` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L505528.  call temp:= `d`(v5) @signature `Lokhttp3/internal/http2/Settings;.d:()I` @kind virtual;
  #L50552e.  v5:= temp;
  #L505530.  v1:= (`long`) v5 @kind i2l;
  #L505532.  call `<init>`(v4, v3, v1) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.<init>:(Lokhttp3/internal/http2/Http2Stream;J)V` @kind direct;
  #L505538.  v3.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` := v4 @kind object;
  #L50553c.  v5:= new `okhttp3.internal.http2.Http2Stream$FramingSink`;
  #L505540.  call `<init>`(v5, v3) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L505546.  v3.`okhttp3.internal.http2.Http2Stream.e` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` := v5 @kind object;
  #L50554a.  v4.`okhttp3.internal.http2.Http2Stream$FramingSource.b` @type ^`boolean` := v7 @kind boolean;
  #L50554e.  v5.`okhttp3.internal.http2.Http2Stream$FramingSink.b` @type ^`boolean` := v6 @kind boolean;
  #L505552.  if v8 == 0 then goto L50555c;
  #L505556.  call temp:= `add`(v0, v8) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L50555c.  call temp:= `isLocallyInitiated`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @kind virtual;
  #L505562.  v4:= temp;
  #L505564.  if v4 == 0 then goto L50557e;
  #L505568.  if v8 != 0 then goto L50556e;
  #L50556c.  goto L50557e;
  #L50556e.  v4:= new `java.lang.IllegalStateException`;
  #L505572.  v5:= "locally-initiated streams shouldn't have headers yet" @kind object;
  #L505576.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50557c.  throw v4;
  #L50557e.  call temp:= `isLocallyInitiated`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @kind virtual;
  #L505584.  v4:= temp;
  #L505586.  if v4 != 0 then goto L5055a0;
  #L50558a.  if v8 == 0 then goto L505590;
  #L50558e.  goto L5055a0;
  #L505590.  v4:= new `java.lang.IllegalStateException`;
  #L505594.  v5:= "remotely-initiated streams should have headers" @kind object;
  #L505598.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50559e.  throw v4;
  #L5055a0.  return @kind void;
  #L5055a2.  v4:= new `java.lang.NullPointerException`;
  #L5055a6.  v5:= "connection == null" @kind object;
  #L5055aa.  call `<init>`(v4, v5) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5055b0.  throw v4;
}
procedure `java.util.Deque` `a`(`okhttp3.internal.http2.Http2Stream` v0 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.a:(Lokhttp3/internal/http2/Http2Stream;)Ljava/util/Deque;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L5052dc.  v0:= v0.`okhttp3.internal.http2.Http2Stream.headersQueue` @type ^`java.util.Deque` @kind object;
  #L5052e0.  return v0 @kind object;
}
procedure `okhttp3.internal.http2.Header$Listener` `b`(`okhttp3.internal.http2.Http2Stream` v0 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.b:(Lokhttp3/internal/http2/Http2Stream;)Lokhttp3/internal/http2/Header$Listener;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L5053dc.  v0:= v0.`okhttp3.internal.http2.Http2Stream.headersListener` @type ^`okhttp3.internal.http2.Header$Listener` @kind object;
  #L5053e0.  return v0 @kind object;
}
procedure `boolean` `closeInternal`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L5051a4.  @monitorenter v2
  #L5051a6.  v0:= v2.`okhttp3.internal.http2.Http2Stream.h` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L5051aa.  v1:= 0I;
  #L5051ac.  if v0 == 0 then goto L5051b4;
  #L5051b0.  @monitorexit v2
  #L5051b2.  return v1;
  #L5051b4.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L5051b8.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.b` @type ^`boolean` @kind boolean;
  #L5051bc.  if v0 == 0 then goto L5051d0;
  #L5051c0.  v0:= v2.`okhttp3.internal.http2.Http2Stream.e` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L5051c4.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.b` @type ^`boolean` @kind boolean;
  #L5051c8.  if v0 == 0 then goto L5051d0;
  #L5051cc.  @monitorexit v2
  #L5051ce.  return v1;
  #L5051d0.  v2.`okhttp3.internal.http2.Http2Stream.h` @type ^`okhttp3.internal.http2.ErrorCode` := v3 @kind object;
  #L5051d4.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L5051da.  @monitorexit v2
  #L5051dc.  v3:= v2.`okhttp3.internal.http2.Http2Stream.d` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L5051e0.  v0:= v2.`okhttp3.internal.http2.Http2Stream.c` @type ^`int`;
  #L5051e4.  call temp:= `l`(v3, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.l:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L5051ea.  v3:= 1I;
  #L5051ec.  return v3;
  #L5051ee.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5051f0.  @monitorexit v2
  #L5051f2.  throw v3;
  catch `java.lang.Throwable` @[L5051a6..L5051dc] goto L5051ee;
  catch `java.lang.Throwable` @[L5051f0..L5051f2] goto L5051ee;
}
procedure `void` `c`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `long` v4 ) @signature `Lokhttp3/internal/http2/Http2Stream;.c:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L5055c4.  v0:= v3.`okhttp3.internal.http2.Http2Stream.b` @type ^`long` @kind wide;
  #L5055c8.  v0:= v0 + v4 @kind long;
  #L5055ca.  v3.`okhttp3.internal.http2.Http2Stream.b` @type ^`long` := v0 @kind wide;
  #L5055ce.  v0:= 0L;
  #L5055d2.  v2:= lcmp(v4, v0);
  #L5055d6.  if v2 <= 0 then goto L5055e0;
  #L5055da.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L5055e0.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.close:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5056dc.  call temp:= `closeInternal`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @kind direct;
  #L5056e2.  v0:= temp;
  #L5056e4.  if v0 != 0 then goto L5056ea;
  #L5056e8.  return @kind void;
  #L5056ea.  v0:= v2.`okhttp3.internal.http2.Http2Stream.d` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L5056ee.  v1:= v2.`okhttp3.internal.http2.Http2Stream.c` @type ^`int`;
  #L5056f2.  call `q`(v0, v1, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.q:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L5056f8.  return @kind void;
}
procedure `void` `closeLater`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50570c.  call temp:= `closeInternal`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @kind direct;
  #L505712.  v0:= temp;
  #L505714.  if v0 != 0 then goto L50571a;
  #L505718.  return @kind void;
  #L50571a.  v0:= v2.`okhttp3.internal.http2.Http2Stream.d` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L50571e.  v1:= v2.`okhttp3.internal.http2.Http2Stream.c` @type ^`int`;
  #L505722.  call `r`(v0, v1, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.r:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L505728.  return @kind void;
}
procedure `void` `d`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L5055f4.  @monitorenter v2
  #L5055f6.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L5055fa.  v1:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.b` @type ^`boolean` @kind boolean;
  #L5055fe.  if v1 != 0 then goto L505622;
  #L505602.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.a` @type ^`boolean` @kind boolean;
  #L505606.  if v0 == 0 then goto L505622;
  #L50560a.  v0:= v2.`okhttp3.internal.http2.Http2Stream.e` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L50560e.  v1:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.b` @type ^`boolean` @kind boolean;
  #L505612.  if v1 != 0 then goto L50561e;
  #L505616.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.a` @type ^`boolean` @kind boolean;
  #L50561a.  if v0 == 0 then goto L505622;
  #L50561e.  v0:= 1I;
  #L505620.  goto L505624;
  #L505622.  v0:= 0I;
  #L505624.  call temp:= `isOpen`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L50562a.  v1:= temp;
  #L50562c.  @monitorexit v2
  #L50562e.  if v0 == 0 then goto L50563e;
  #L505632.  v0:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L505636.  call `close`(v2, v0) @signature `Lokhttp3/internal/http2/Http2Stream;.close:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L50563c.  goto L505650;
  #L50563e.  if v1 != 0 then goto L505650;
  #L505642.  v0:= v2.`okhttp3.internal.http2.Http2Stream.d` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L505646.  v1:= v2.`okhttp3.internal.http2.Http2Stream.c` @type ^`int`;
  #L50564a.  call temp:= `l`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Connection;.l:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L505650.  return @kind void;
  #L505652.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L505654.  @monitorexit v2
  #L505656.  throw v0;
  catch `java.lang.Throwable` @[L5055f6..L50562e] goto L505652;
  catch `java.lang.Throwable` @[L505654..L505656] goto L505652;
}
procedure `void` `e`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L50567c.  v0:= v2.`okhttp3.internal.http2.Http2Stream.e` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L505680.  v1:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.a` @type ^`boolean` @kind boolean;
  #L505684.  if v1 != 0 then goto L5056ba;
  #L505688.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.b` @type ^`boolean` @kind boolean;
  #L50568c.  if v0 != 0 then goto L5056aa;
  #L505690.  v0:= v2.`okhttp3.internal.http2.Http2Stream.h` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L505694.  if v0 != 0 then goto L50569a;
  #L505698.  return @kind void;
  #L50569a.  v0:= new `okhttp3.internal.http2.StreamResetException`;
  #L50569e.  v1:= v2.`okhttp3.internal.http2.Http2Stream.h` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L5056a2.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http2/StreamResetException;.<init>:(Lokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L5056a8.  throw v0;
  #L5056aa.  v0:= new `java.io.IOException`;
  #L5056ae.  v1:= "stream finished" @kind object;
  #L5056b2.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5056b8.  throw v0;
  #L5056ba.  v0:= new `java.io.IOException`;
  #L5056be.  v1:= "stream closed" @kind object;
  #L5056c2.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5056c8.  throw v0;
}
procedure `void` `f`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `okio.BufferedSource` v4 @kind object, `int` v5 ) @signature `Lokhttp3/internal/http2/Http2Stream;.f:(Lokio/BufferedSource;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L50573c.  v0:= v3.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L505740.  v1:= (`long`) v5 @kind i2l;
  #L505742.  call `a`(v0, v4, v1) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.a:(Lokio/BufferedSource;J)V` @kind virtual;
  #L505748.  return @kind void;
}
procedure `void` `g`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L50575c.  @monitorenter v2
  #L50575e.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L505762.  v1:= 1I;
  #L505764.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.b` @type ^`boolean` := v1 @kind boolean;
  #L505768.  call temp:= `isOpen`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L50576e.  v0:= temp;
  #L505770.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L505776.  @monitorexit v2
  #L505778.  if v0 != 0 then goto L50578a;
  #L50577c.  v0:= v2.`okhttp3.internal.http2.Http2Stream.d` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L505780.  v1:= v2.`okhttp3.internal.http2.Http2Stream.c` @type ^`int`;
  #L505784.  call temp:= `l`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Connection;.l:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L50578a.  return @kind void;
  #L50578c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50578e.  @monitorexit v2
  #L505790.  throw v0;
  catch `java.lang.Throwable` @[L50575e..L505778] goto L50578c;
  catch `java.lang.Throwable` @[L50578e..L505790] goto L50578c;
}
procedure `okhttp3.internal.http2.Http2Connection` `getConnection`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getConnection:()Lokhttp3/internal/http2/Http2Connection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5053f4.  v0:= v1.`okhttp3.internal.http2.Http2Stream.d` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L5053f8.  return v0 @kind object;
}
procedure `okhttp3.internal.http2.ErrorCode` `getErrorCode`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getErrorCode:()Lokhttp3/internal/http2/ErrorCode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5053b0.  @monitorenter v1
  #L5053b2.  v0:= v1.`okhttp3.internal.http2.Http2Stream.h` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L5053b6.  @monitorexit v1
  #L5053b8.  return v0 @kind object;
  #L5053ba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5053bc.  @monitorexit v1
  #L5053be.  throw v0;
  catch `java.lang.Throwable` @[L5053b2..L5053b6] goto L5053ba;
}
procedure `int` `getId`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getId:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5052c4.  v0:= v1.`okhttp3.internal.http2.Http2Stream.c` @type ^`int`;
  #L5052c8.  return v0;
}
procedure `okio.Sink` `getSink`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50540c.  @monitorenter v2
  #L50540e.  v0:= v2.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` @kind boolean;
  #L505412.  if v0 != 0 then goto L505434;
  #L505416.  call temp:= `isLocallyInitiated`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @kind virtual;
  #L50541c.  v0:= temp;
  #L50541e.  if v0 == 0 then goto L505424;
  #L505422.  goto L505434;
  #L505424.  v0:= new `java.lang.IllegalStateException`;
  #L505428.  v1:= "reply before requesting the sink" @kind object;
  #L50542c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L505432.  throw v0;
  #L505434.  @monitorexit v2
  #L505436.  v0:= v2.`okhttp3.internal.http2.Http2Stream.e` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L50543a.  return v0 @kind object;
  #L50543c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50543e.  @monitorexit v2
  #L505440.  throw v0;
  catch `java.lang.Throwable` @[L50540e..L505436] goto L50543c;
  catch `java.lang.Throwable` @[L50543e..L505440] goto L50543c;
}
procedure `okio.Source` `getSource`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getSource:()Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L505468.  v0:= v1.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L50546c.  return v0 @kind object;
}
procedure `void` `h`(`okhttp3.internal.http2.Http2Stream` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.h:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;

  #L5057b8.  @monitorenter v1
  #L5057ba.  v0:= 1I;
  #L5057bc.  v1.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` := v0 @kind boolean;
  #L5057c0.  v0:= v1.`okhttp3.internal.http2.Http2Stream.headersQueue` @type ^`java.util.Deque` @kind object;
  #L5057c4.  call temp:= `toHeaders`(v2) @signature `Lokhttp3/internal/Util;.toHeaders:(Ljava/util/List;)Lokhttp3/Headers;` @kind static;
  #L5057ca.  v2:= temp @kind object;
  #L5057cc.  call temp:= `add`(v0, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L5057d2.  call temp:= `isOpen`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L5057d8.  v2:= temp;
  #L5057da.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L5057e0.  @monitorexit v1
  #L5057e2.  if v2 != 0 then goto L5057f4;
  #L5057e6.  v2:= v1.`okhttp3.internal.http2.Http2Stream.d` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L5057ea.  v0:= v1.`okhttp3.internal.http2.Http2Stream.c` @type ^`int`;
  #L5057ee.  call temp:= `l`(v2, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.l:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L5057f4.  return @kind void;
  #L5057f6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5057f8.  @monitorexit v1
  #L5057fa.  throw v2;
  catch `java.lang.Throwable` @[L5057bc..L5057e2] goto L5057f6;
  catch `java.lang.Throwable` @[L5057f8..L5057fa] goto L5057f6;
}
procedure `void` `i`(`okhttp3.internal.http2.Http2Stream` v1 @kind this, `okhttp3.internal.http2.ErrorCode` v2 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.i:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag  {
    temp;
    v0;

  #L505820.  @monitorenter v1
  #L505822.  v0:= v1.`okhttp3.internal.http2.Http2Stream.h` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L505826.  if v0 != 0 then goto L505834;
  #L50582a.  v1.`okhttp3.internal.http2.Http2Stream.h` @type ^`okhttp3.internal.http2.ErrorCode` := v2 @kind object;
  #L50582e.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L505834.  @monitorexit v1
  #L505836.  return @kind void;
  #L505838.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50583a.  @monitorexit v1
  #L50583c.  throw v2;
  catch `java.lang.Throwable` @[L505822..L505834] goto L505838;
}
procedure `boolean` `isLocallyInitiated`(`okhttp3.internal.http2.Http2Stream` v4 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L505218.  v0:= v4.`okhttp3.internal.http2.Http2Stream.c` @type ^`int`;
  #L50521c.  v1:= 1I;
  #L50521e.  v0:= v0 ^& v1 @kind int;
  #L505220.  v2:= 0I;
  #L505222.  if v0 != v1 then goto L50522a;
  #L505226.  v0:= 1I;
  #L505228.  goto L50522c;
  #L50522a.  v0:= 0I;
  #L50522c.  v3:= v4.`okhttp3.internal.http2.Http2Stream.d` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L505230.  v3:= v3.`okhttp3.internal.http2.Http2Connection.a` @type ^`boolean` @kind boolean;
  #L505234.  if v3 != v0 then goto L50523a;
  #L505238.  goto L50523c;
  #L50523a.  v1:= 0I;
  #L50523c.  return v1;
}
procedure `boolean` `isOpen`(`okhttp3.internal.http2.Http2Stream` v3 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L505250.  @monitorenter v3
  #L505252.  v0:= v3.`okhttp3.internal.http2.Http2Stream.h` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L505256.  v1:= 0I;
  #L505258.  if v0 == 0 then goto L505260;
  #L50525c.  @monitorexit v3
  #L50525e.  return v1;
  #L505260.  v0:= v3.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L505264.  v2:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.b` @type ^`boolean` @kind boolean;
  #L505268.  if v2 != 0 then goto L505274;
  #L50526c.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.a` @type ^`boolean` @kind boolean;
  #L505270.  if v0 == 0 then goto L505294;
  #L505274.  v0:= v3.`okhttp3.internal.http2.Http2Stream.e` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L505278.  v2:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.b` @type ^`boolean` @kind boolean;
  #L50527c.  if v2 != 0 then goto L505288;
  #L505280.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.a` @type ^`boolean` @kind boolean;
  #L505284.  if v0 == 0 then goto L505294;
  #L505288.  v0:= v3.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` @kind boolean;
  #L50528c.  if v0 == 0 then goto L505294;
  #L505290.  @monitorexit v3
  #L505292.  return v1;
  #L505294.  v0:= 1I;
  #L505296.  @monitorexit v3
  #L505298.  return v0;
  #L50529a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50529c.  @monitorexit v3
  #L50529e.  throw v0;
  catch `java.lang.Throwable` @[L505252..L505256] goto L50529a;
  catch `java.lang.Throwable` @[L505260..L50528c] goto L50529a;
}
procedure `void` `j`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.j:()V` @AccessFlag  {
    temp;
    v0;

  #L5058a4.  call `wait`(v1) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #L5058aa.  return @kind void;
  #L5058ac.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L5058b2.  v0:= temp @kind object;
  #L5058b4.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L5058ba.  v0:= new `java.io.InterruptedIOException`;
  #L5058be.  call `<init>`(v0) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L5058c4.  throw v0;
  catch `java.lang.InterruptedException` @[L5058a4..L5058aa] goto L5058ac;
}
procedure `okio.Timeout` `readTimeout`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.readTimeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L505480.  v0:= v1.`okhttp3.internal.http2.Http2Stream.f` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L505484.  return v0 @kind object;
}
procedure `void` `setHeadersListener`(`okhttp3.internal.http2.Http2Stream` v1 @kind this, `okhttp3.internal.http2.Header$Listener` v2 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.setHeadersListener:(Lokhttp3/internal/http2/Header$Listener;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50585c.  @monitorenter v1
  #L50585e.  v1.`okhttp3.internal.http2.Http2Stream.headersListener` @type ^`okhttp3.internal.http2.Header$Listener` := v2 @kind object;
  #L505862.  v0:= v1.`okhttp3.internal.http2.Http2Stream.headersQueue` @type ^`java.util.Deque` @kind object;
  #L505866.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L50586c.  v0:= temp;
  #L50586e.  if v0 != 0 then goto L50587c;
  #L505872.  if v2 == 0 then goto L50587c;
  #L505876.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L50587c.  @monitorexit v1
  #L50587e.  return @kind void;
  #L505880.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L505882.  @monitorexit v1
  #L505884.  throw v2;
  catch `java.lang.Throwable` @[L50585e..L50587c] goto L505880;
}
procedure `okhttp3.Headers` `takeHeaders`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.takeHeaders:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5052f4.  @monitorenter v2
  #L5052f6.  v0:= v2.`okhttp3.internal.http2.Http2Stream.f` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L5052fa.  call `enter`(v0) @signature `Lokio/AsyncTimeout;.enter:()V` @kind virtual;
  #L505300.  v0:= v2.`okhttp3.internal.http2.Http2Stream.headersQueue` @type ^`java.util.Deque` @kind object;
  #L505304.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L50530a.  v0:= temp;
  #L50530c.  if v0 == 0 then goto L505320;
  #L505310.  v0:= v2.`okhttp3.internal.http2.Http2Stream.h` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L505314.  if v0 != 0 then goto L505320;
  #L505318.  call `j`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.j:()V` @kind virtual;
  #L50531e.  goto L505300;
  #L505320.  v0:= v2.`okhttp3.internal.http2.Http2Stream.f` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L505324.  call `exitAndThrowIfTimedOut`(v0) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L50532a.  v0:= v2.`okhttp3.internal.http2.Http2Stream.headersQueue` @type ^`java.util.Deque` @kind object;
  #L50532e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L505334.  v0:= temp;
  #L505336.  if v0 != 0 then goto L50534e;
  #L50533a.  v0:= v2.`okhttp3.internal.http2.Http2Stream.headersQueue` @type ^`java.util.Deque` @kind object;
  #L50533e.  call temp:= `removeFirst`(v0) @signature `Ljava/util/Deque;.removeFirst:()Ljava/lang/Object;` @kind interface;
  #L505344.  v0:= temp @kind object;
  #L505346.  v0:= (`okhttp3.Headers`) v0 @kind object;
  #L50534a.  @monitorexit v2
  #L50534c.  return v0 @kind object;
  #L50534e.  v0:= new `okhttp3.internal.http2.StreamResetException`;
  #L505352.  v1:= v2.`okhttp3.internal.http2.Http2Stream.h` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L505356.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http2/StreamResetException;.<init>:(Lokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L50535c.  throw v0;
  #L50535e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L505360.  v1:= v2.`okhttp3.internal.http2.Http2Stream.f` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L505364.  call `exitAndThrowIfTimedOut`(v1) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L50536a.  throw v0;
  #L50536c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50536e.  @monitorexit v2
  #L505370.  goto L505374;
  #L505372.  throw v0;
  #L505374.  goto L505372;
  catch `java.lang.Throwable` @[L5052f6..L505300] goto L50536c;
  catch `java.lang.Throwable` @[L505300..L50531e] goto L50535e;
  catch `java.lang.Throwable` @[L505320..L50534a] goto L50536c;
  catch `java.lang.Throwable` @[L50534e..L50536c] goto L50536c;
}
procedure `void` `writeHeaders`(`okhttp3.internal.http2.Http2Stream` v8 @kind this, `java.util.List` v9 @kind object, `boolean` v10 ) @signature `Lokhttp3/internal/http2/Http2Stream;.writeHeaders:(Ljava/util/List;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L5058e8.  if v9 == 0 then goto L505960;
  #L5058ec.  @monitorenter v8
  #L5058ee.  v0:= 1I;
  #L5058f0.  v8.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` := v0 @kind boolean;
  #L5058f4.  v1:= 0I;
  #L5058f6.  if v10 != 0 then goto L505908;
  #L5058fa.  v10:= v8.`okhttp3.internal.http2.Http2Stream.e` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L5058fe.  v10.`okhttp3.internal.http2.Http2Stream$FramingSink.b` @type ^`boolean` := v0 @kind boolean;
  #L505902.  v10:= 1I;
  #L505904.  v2:= 1I;
  #L505906.  goto L50590c;
  #L505908.  v10:= 0I;
  #L50590a.  v2:= 0I;
  #L50590c.  @monitorexit v8
  #L50590e.  if v10 != 0 then goto L50593c;
  #L505912.  v3:= v8.`okhttp3.internal.http2.Http2Stream.d` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L505916.  @monitorenter v3
  #L505918.  v10:= v8.`okhttp3.internal.http2.Http2Stream.d` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L50591c.  v4:= v10.`okhttp3.internal.http2.Http2Connection.j` @type ^`long` @kind wide;
  #L505920.  v6:= 0L;
  #L505924.  v10:= lcmp(v4, v6);
  #L505928.  if v10 != 0 then goto L50592e;
  #L50592c.  goto L505930;
  #L50592e.  v0:= 0I;
  #L505930.  @monitorexit v3
  #L505932.  v10:= v0;
  #L505934.  goto L50593c;
  #L505936.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L505938.  @monitorexit v3
  #L50593a.  throw v9;
  #L50593c.  v0:= v8.`okhttp3.internal.http2.Http2Stream.d` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L505940.  v1:= v8.`okhttp3.internal.http2.Http2Stream.c` @type ^`int`;
  #L505944.  call `p`(v0, v1, v2, v9) @signature `Lokhttp3/internal/http2/Http2Connection;.p:(IZLjava/util/List;)V` @kind virtual;
  #L50594a.  if v10 == 0 then goto L505958;
  #L50594e.  v9:= v8.`okhttp3.internal.http2.Http2Stream.d` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L505952.  call `flush`(v9) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L505958.  return @kind void;
  #L50595a.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50595c.  @monitorexit v8
  #L50595e.  throw v9;
  #L505960.  v9:= new `java.lang.NullPointerException`;
  #L505964.  v10:= "headers == null" @kind object;
  #L505968.  call `<init>`(v9, v10) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50596e.  throw v9;
  catch `java.lang.Throwable` @[L5058f0..L50590e] goto L50595a;
  catch `java.lang.Throwable` @[L505918..L50593a] goto L505936;
  catch `java.lang.Throwable` @[L50595c..L50595e] goto L50595a;
}
procedure `okio.Timeout` `writeTimeout`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.writeTimeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L505498.  v0:= v1.`okhttp3.internal.http2.Http2Stream.g` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L50549c.  return v0 @kind object;
}
