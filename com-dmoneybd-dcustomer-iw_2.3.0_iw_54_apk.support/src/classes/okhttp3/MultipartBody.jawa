record `okhttp3.MultipartBody` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.RequestBody` @kind class {
  `okio.ByteString` `okhttp3.MultipartBody.boundary` @AccessFlag PRIVATE_FINAL;
  `long` `okhttp3.MultipartBody.contentLength` @AccessFlag PRIVATE;
  `okhttp3.MediaType` `okhttp3.MultipartBody.contentType` @AccessFlag PRIVATE_FINAL;
  `okhttp3.MediaType` `okhttp3.MultipartBody.originalType` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.MultipartBody.parts` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.MediaType` `@@okhttp3.MultipartBody.ALTERNATIVE` @AccessFlag PUBLIC_STATIC_FINAL;
global `byte`[] `@@okhttp3.MultipartBody.COLONSPACE` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@okhttp3.MultipartBody.CRLF` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@okhttp3.MultipartBody.DASHDASH` @AccessFlag PRIVATE_STATIC_FINAL;
global `okhttp3.MediaType` `@@okhttp3.MultipartBody.DIGEST` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.MediaType` `@@okhttp3.MultipartBody.FORM` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.MediaType` `@@okhttp3.MultipartBody.MIXED` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.MediaType` `@@okhttp3.MultipartBody.PARALLEL` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/MultipartBody;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4feba8.  v0:= "multipart/mixed" @kind object;
  #L4febac.  call temp:= `get`(v0) @signature `Lokhttp3/MediaType;.get:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L4febb2.  v0:= temp @kind object;
  #L4febb4.  `@@okhttp3.MultipartBody.MIXED` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L4febb8.  v0:= "multipart/alternative" @kind object;
  #L4febbc.  call temp:= `get`(v0) @signature `Lokhttp3/MediaType;.get:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L4febc2.  v0:= temp @kind object;
  #L4febc4.  `@@okhttp3.MultipartBody.ALTERNATIVE` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L4febc8.  v0:= "multipart/digest" @kind object;
  #L4febcc.  call temp:= `get`(v0) @signature `Lokhttp3/MediaType;.get:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L4febd2.  v0:= temp @kind object;
  #L4febd4.  `@@okhttp3.MultipartBody.DIGEST` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L4febd8.  v0:= "multipart/parallel" @kind object;
  #L4febdc.  call temp:= `get`(v0) @signature `Lokhttp3/MediaType;.get:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L4febe2.  v0:= temp @kind object;
  #L4febe4.  `@@okhttp3.MultipartBody.PARALLEL` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L4febe8.  v0:= "multipart/form-data" @kind object;
  #L4febec.  call temp:= `get`(v0) @signature `Lokhttp3/MediaType;.get:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L4febf2.  v0:= temp @kind object;
  #L4febf4.  `@@okhttp3.MultipartBody.FORM` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L4febf8.  v0:= 2I;
  #L4febfa.  v1:= new `byte`[v0];
  #L4febfe.  goto L4fec28;
  #L4fec04.  `@@okhttp3.MultipartBody.COLONSPACE` @type ^`byte`[] := v1 @kind object;
  #L4fec08.  v1:= new `byte`[v0];
  #L4fec0c.  goto L4fec34;
  #L4fec12.  `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] := v1 @kind object;
  #L4fec16.  v0:= new `byte`[v0];
  #L4fec1a.  goto L4fec40;
  #L4fec20.  `@@okhttp3.MultipartBody.DASHDASH` @type ^`byte`[] := v0 @kind object;
  #L4fec24.  return @kind void;
  #L4fec26.  
  #L4fec28.  v1:= (58I, 32I) @kind object;
  #L4fec31.  goto L4fec04;
  #L4fec32.  
  #L4fec34.  v1:= (13I, 10I) @kind object;
  #L4fec3d.  goto L4fec12;
  #L4fec3e.  
  #L4fec40.  v0:= (45I, 45I) @kind object;
  #L4fec49.  goto L4fec20;
}
procedure `void` `<init>`(`okhttp3.MultipartBody` v2 @kind this, `okio.ByteString` v3 @kind object, `okhttp3.MediaType` v4 @kind object, `java.util.List` v5 @kind object) @signature `Lokhttp3/MultipartBody;.<init>:(Lokio/ByteString;Lokhttp3/MediaType;Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4fec5c.  call `<init>`(v2) @signature `Lokhttp3/RequestBody;.<init>:()V` @kind direct;
  #L4fec62.  v0:= -1L;
  #L4fec66.  v2.`okhttp3.MultipartBody.contentLength` @type ^`long` := v0 @kind wide;
  #L4fec6a.  v2.`okhttp3.MultipartBody.boundary` @type ^`okio.ByteString` := v3 @kind object;
  #L4fec6e.  v2.`okhttp3.MultipartBody.originalType` @type ^`okhttp3.MediaType` := v4 @kind object;
  #L4fec72.  v0:= new `java.lang.StringBuilder`;
  #L4fec76.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4fec7c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fec82.  v4:= "; boundary=" @kind object;
  #L4fec86.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fec8c.  call temp:= `utf8`(v3) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L4fec92.  v3:= temp @kind object;
  #L4fec94.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fec9a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4feca0.  v3:= temp @kind object;
  #L4feca2.  call temp:= `get`(v3) @signature `Lokhttp3/MediaType;.get:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L4feca8.  v3:= temp @kind object;
  #L4fecaa.  v2.`okhttp3.MultipartBody.contentType` @type ^`okhttp3.MediaType` := v3 @kind object;
  #L4fecae.  call temp:= `immutableList`(v5) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L4fecb4.  v3:= temp @kind object;
  #L4fecb6.  v2.`okhttp3.MultipartBody.parts` @type ^`java.util.List` := v3 @kind object;
  #L4fecba.  return @kind void;
}
procedure `java.lang.StringBuilder` `a`(`java.lang.StringBuilder` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lokhttp3/MultipartBody;.a:(Ljava/lang/StringBuilder;Ljava/lang/String;)Ljava/lang/StringBuilder;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4fe904.  v0:= 34I;
  #L4fe908.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fe90e.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4fe914.  v1:= temp;
  #L4fe916.  v2:= 0I;
  #L4fe918.  if v2 >= v1 then goto L4fe95c;
  #L4fe91c.  call temp:= `charAt`(v6, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4fe922.  v3:= temp;
  #L4fe924.  v4:= 10I;
  #L4fe928.  if v3 == v4 then goto L4fe94c;
  #L4fe92c.  v4:= 13I;
  #L4fe930.  if v3 == v4 then goto L4fe946;
  #L4fe934.  if v3 == v0 then goto L4fe940;
  #L4fe938.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fe93e.  goto L4fe956;
  #L4fe940.  v3:= "%22" @kind object;
  #L4fe944.  goto L4fe950;
  #L4fe946.  v3:= "%0D" @kind object;
  #L4fe94a.  goto L4fe950;
  #L4fe94c.  v3:= "%0A" @kind object;
  #L4fe950.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fe956.  v2:= v2 + 1;
  #L4fe95a.  goto L4fe918;
  #L4fe95c.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4fe962.  return v5 @kind object;
}
procedure `long` `writeOrCountBytes`(`okhttp3.MultipartBody` v12 @kind this, `okio.BufferedSink` v13 @kind object, `boolean` v14 ) @signature `Lokhttp3/MultipartBody;.writeOrCountBytes:(Lokio/BufferedSink;Z)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4fe9c0.  if v14 == 0 then goto L4fe9d2;
  #L4fe9c4.  v13:= new `okio.Buffer`;
  #L4fe9c8.  call `<init>`(v13) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L4fe9ce.  v0:= v13 @kind object;
  #L4fe9d0.  goto L4fe9d4;
  #L4fe9d2.  v0:= 0I;
  #L4fe9d4.  v1:= v12.`okhttp3.MultipartBody.parts` @type ^`java.util.List` @kind object;
  #L4fe9d8.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4fe9de.  v1:= temp;
  #L4fe9e0.  v2:= 0I;
  #L4fe9e2.  v3:= 0L;
  #L4fe9e6.  v5:= 0I;
  #L4fe9e8.  if v5 >= v1 then goto L4feb08;
  #L4fe9ec.  v6:= v12.`okhttp3.MultipartBody.parts` @type ^`java.util.List` @kind object;
  #L4fe9f0.  call temp:= `get`(v6, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4fe9f6.  v6:= temp @kind object;
  #L4fe9f8.  v6:= (`okhttp3.MultipartBody$Part`) v6 @kind object;
  #L4fe9fc.  v7:= v6.`okhttp3.MultipartBody$Part.a` @type ^`okhttp3.Headers` @kind object;
  #L4fea00.  v6:= v6.`okhttp3.MultipartBody$Part.b` @type ^`okhttp3.RequestBody` @kind object;
  #L4fea04.  v8:= `@@okhttp3.MultipartBody.DASHDASH` @type ^`byte`[] @kind object;
  #L4fea08.  call temp:= `write`(v13, v8) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L4fea0e.  v8:= v12.`okhttp3.MultipartBody.boundary` @type ^`okio.ByteString` @kind object;
  #L4fea12.  call temp:= `write`(v13, v8) @signature `Lokio/BufferedSink;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @kind interface;
  #L4fea18.  v8:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L4fea1c.  call temp:= `write`(v13, v8) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L4fea22.  if v7 == 0 then goto L4fea70;
  #L4fea26.  call temp:= `size`(v7) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L4fea2c.  v8:= temp;
  #L4fea2e.  v9:= 0I;
  #L4fea30.  if v9 >= v8 then goto L4fea70;
  #L4fea34.  call temp:= `name`(v7, v9) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L4fea3a.  v10:= temp @kind object;
  #L4fea3c.  call temp:= `writeUtf8`(v13, v10) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L4fea42.  v10:= temp @kind object;
  #L4fea44.  v11:= `@@okhttp3.MultipartBody.COLONSPACE` @type ^`byte`[] @kind object;
  #L4fea48.  call temp:= `write`(v10, v11) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L4fea4e.  v10:= temp @kind object;
  #L4fea50.  call temp:= `value`(v7, v9) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L4fea56.  v11:= temp @kind object;
  #L4fea58.  call temp:= `writeUtf8`(v10, v11) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L4fea5e.  v10:= temp @kind object;
  #L4fea60.  v11:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L4fea64.  call temp:= `write`(v10, v11) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L4fea6a.  v9:= v9 + 1;
  #L4fea6e.  goto L4fea30;
  #L4fea70.  call temp:= `contentType`(v6) @signature `Lokhttp3/RequestBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L4fea76.  v7:= temp @kind object;
  #L4fea78.  if v7 == 0 then goto L4feaa2;
  #L4fea7c.  v8:= "Content-Type: " @kind object;
  #L4fea80.  call temp:= `writeUtf8`(v13, v8) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L4fea86.  v8:= temp @kind object;
  #L4fea88.  call temp:= `toString`(v7) @signature `Lokhttp3/MediaType;.toString:()Ljava/lang/String;` @kind virtual;
  #L4fea8e.  v7:= temp @kind object;
  #L4fea90.  call temp:= `writeUtf8`(v8, v7) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L4fea96.  v7:= temp @kind object;
  #L4fea98.  v8:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L4fea9c.  call temp:= `write`(v7, v8) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L4feaa2.  call temp:= `contentLength`(v6) @signature `Lokhttp3/RequestBody;.contentLength:()J` @kind virtual;
  #L4feaa8.  v7:= temp @kind wide;
  #L4feaaa.  v9:= -1L;
  #L4feaae.  v11:= lcmp(v7, v9);
  #L4feab2.  if v11 == 0 then goto L4fead6;
  #L4feab6.  v9:= "Content-Length: " @kind object;
  #L4feaba.  call temp:= `writeUtf8`(v13, v9) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L4feac0.  v9:= temp @kind object;
  #L4feac2.  call temp:= `writeDecimalLong`(v9, v7) @signature `Lokio/BufferedSink;.writeDecimalLong:(J)Lokio/BufferedSink;` @kind interface;
  #L4feac8.  v9:= temp @kind object;
  #L4feaca.  v10:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L4feace.  call temp:= `write`(v9, v10) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L4fead4.  goto L4feae2;
  #L4fead6.  if v14 == 0 then goto L4feae2;
  #L4feada.  call `clear`(v0) @signature `Lokio/Buffer;.clear:()V` @kind virtual;
  #L4feae0.  return v9 @kind wide;
  #L4feae2.  v9:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L4feae6.  call temp:= `write`(v13, v9) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L4feaec.  if v14 == 0 then goto L4feaf4;
  #L4feaf0.  v3:= v3 + v7 @kind long;
  #L4feaf2.  goto L4feafa;
  #L4feaf4.  call `writeTo`(v6, v13) @signature `Lokhttp3/RequestBody;.writeTo:(Lokio/BufferedSink;)V` @kind virtual;
  #L4feafa.  call temp:= `write`(v13, v9) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L4feb00.  v5:= v5 + 1;
  #L4feb04.  goto L4fe9e8;
  #L4feb08.  v1:= `@@okhttp3.MultipartBody.DASHDASH` @type ^`byte`[] @kind object;
  #L4feb0c.  call temp:= `write`(v13, v1) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L4feb12.  v2:= v12.`okhttp3.MultipartBody.boundary` @type ^`okio.ByteString` @kind object;
  #L4feb16.  call temp:= `write`(v13, v2) @signature `Lokio/BufferedSink;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @kind interface;
  #L4feb1c.  call temp:= `write`(v13, v1) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L4feb22.  v1:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L4feb26.  call temp:= `write`(v13, v1) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L4feb2c.  if v14 == 0 then goto L4feb40;
  #L4feb30.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L4feb36.  v13:= temp @kind wide;
  #L4feb38.  v3:= v3 + v13 @kind long;
  #L4feb3a.  call `clear`(v0) @signature `Lokio/Buffer;.clear:()V` @kind virtual;
  #L4feb40.  return v3 @kind wide;
}
procedure `java.lang.String` `boundary`(`okhttp3.MultipartBody` v1 @kind this) @signature `Lokhttp3/MultipartBody;.boundary:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe8e4.  v0:= v1.`okhttp3.MultipartBody.boundary` @type ^`okio.ByteString` @kind object;
  #L4fe8e8.  call temp:= `utf8`(v0) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L4fe8ee.  v0:= temp @kind object;
  #L4fe8f0.  return v0 @kind object;
}
procedure `long` `contentLength`(`okhttp3.MultipartBody` v5 @kind this) @signature `Lokhttp3/MultipartBody;.contentLength:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4fe98c.  v0:= v5.`okhttp3.MultipartBody.contentLength` @type ^`long` @kind wide;
  #L4fe990.  v2:= -1L;
  #L4fe994.  v4:= lcmp(v0, v2);
  #L4fe998.  if v4 == 0 then goto L4fe99e;
  #L4fe99c.  return v0 @kind wide;
  #L4fe99e.  v0:= 0I;
  #L4fe9a0.  v1:= 1I;
  #L4fe9a2.  call temp:= `writeOrCountBytes`(v5, v0, v1) @signature `Lokhttp3/MultipartBody;.writeOrCountBytes:(Lokio/BufferedSink;Z)J` @kind direct;
  #L4fe9a8.  v0:= temp @kind wide;
  #L4fe9aa.  v5.`okhttp3.MultipartBody.contentLength` @type ^`long` := v0 @kind wide;
  #L4fe9ae.  return v0 @kind wide;
}
procedure `okhttp3.MediaType` `contentType`(`okhttp3.MultipartBody` v1 @kind this) @signature `Lokhttp3/MultipartBody;.contentType:()Lokhttp3/MediaType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4feb54.  v0:= v1.`okhttp3.MultipartBody.contentType` @type ^`okhttp3.MediaType` @kind object;
  #L4feb58.  return v0 @kind object;
}
procedure `okhttp3.MultipartBody$Part` `part`(`okhttp3.MultipartBody` v1 @kind this, `int` v2 ) @signature `Lokhttp3/MultipartBody;.part:(I)Lokhttp3/MultipartBody$Part;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4feb84.  v0:= v1.`okhttp3.MultipartBody.parts` @type ^`java.util.List` @kind object;
  #L4feb88.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4feb8e.  v2:= temp @kind object;
  #L4feb90.  v2:= (`okhttp3.MultipartBody$Part`) v2 @kind object;
  #L4feb94.  return v2 @kind object;
}
procedure `java.util.List` `parts`(`okhttp3.MultipartBody` v1 @kind this) @signature `Lokhttp3/MultipartBody;.parts:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe974.  v0:= v1.`okhttp3.MultipartBody.parts` @type ^`java.util.List` @kind object;
  #L4fe978.  return v0 @kind object;
}
procedure `int` `size`(`okhttp3.MultipartBody` v1 @kind this) @signature `Lokhttp3/MultipartBody;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe8c4.  v0:= v1.`okhttp3.MultipartBody.parts` @type ^`java.util.List` @kind object;
  #L4fe8c8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4fe8ce.  v0:= temp;
  #L4fe8d0.  return v0;
}
procedure `okhttp3.MediaType` `type`(`okhttp3.MultipartBody` v1 @kind this) @signature `Lokhttp3/MultipartBody;.type:()Lokhttp3/MediaType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4feb6c.  v0:= v1.`okhttp3.MultipartBody.originalType` @type ^`okhttp3.MediaType` @kind object;
  #L4feb70.  return v0 @kind object;
}
procedure `void` `writeTo`(`okhttp3.MultipartBody` v1 @kind this, `okio.BufferedSink` v2 @kind object) @signature `Lokhttp3/MultipartBody;.writeTo:(Lokio/BufferedSink;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4feccc.  v0:= 0I;
  #L4fecce.  call temp:= `writeOrCountBytes`(v1, v2, v0) @signature `Lokhttp3/MultipartBody;.writeOrCountBytes:(Lokio/BufferedSink;Z)J` @kind direct;
  #L4fecd4.  return @kind void;
}
