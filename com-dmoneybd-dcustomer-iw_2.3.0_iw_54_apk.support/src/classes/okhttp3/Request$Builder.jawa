record `okhttp3.Request$Builder` @kind class @AccessFlag PUBLIC {
  `okhttp3.HttpUrl` `okhttp3.Request$Builder.a` @AccessFlag ;
  `java.lang.String` `okhttp3.Request$Builder.b` @AccessFlag ;
  `okhttp3.Headers$Builder` `okhttp3.Request$Builder.c` @AccessFlag ;
  `okhttp3.RequestBody` `okhttp3.Request$Builder.d` @AccessFlag ;
  `java.util.Map` `okhttp3.Request$Builder.e` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.Request$Builder` v1 @kind this) @signature `Lokhttp3/Request$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L5006f4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5006fa.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L500700.  v0:= temp @kind object;
  #L500702.  v1.`okhttp3.Request$Builder.e` @type ^`java.util.Map` := v0 @kind object;
  #L500706.  v0:= "GET" @kind object;
  #L50070a.  v1.`okhttp3.Request$Builder.b` @type ^`java.lang.String` := v0 @kind object;
  #L50070e.  v0:= new `okhttp3.Headers$Builder`;
  #L500712.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L500718.  v1.`okhttp3.Request$Builder.c` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L50071c.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Request$Builder` v2 @kind this, `okhttp3.Request` v3 @kind object) @signature `Lokhttp3/Request$Builder;.<init>:(Lokhttp3/Request;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L500730.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L500736.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L50073c.  v0:= temp @kind object;
  #L50073e.  v2.`okhttp3.Request$Builder.e` @type ^`java.util.Map` := v0 @kind object;
  #L500742.  v0:= v3.`okhttp3.Request.a` @type ^`okhttp3.HttpUrl` @kind object;
  #L500746.  v2.`okhttp3.Request$Builder.a` @type ^`okhttp3.HttpUrl` := v0 @kind object;
  #L50074a.  v0:= v3.`okhttp3.Request.b` @type ^`java.lang.String` @kind object;
  #L50074e.  v2.`okhttp3.Request$Builder.b` @type ^`java.lang.String` := v0 @kind object;
  #L500752.  v0:= v3.`okhttp3.Request.d` @type ^`okhttp3.RequestBody` @kind object;
  #L500756.  v2.`okhttp3.Request$Builder.d` @type ^`okhttp3.RequestBody` := v0 @kind object;
  #L50075a.  v0:= v3.`okhttp3.Request.e` @type ^`java.util.Map` @kind object;
  #L50075e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L500764.  v0:= temp;
  #L500766.  if v0 == 0 then goto L500774;
  #L50076a.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L500770.  v0:= temp @kind object;
  #L500772.  goto L500782;
  #L500774.  v0:= new `java.util.LinkedHashMap`;
  #L500778.  v1:= v3.`okhttp3.Request.e` @type ^`java.util.Map` @kind object;
  #L50077c.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L500782.  v2.`okhttp3.Request$Builder.e` @type ^`java.util.Map` := v0 @kind object;
  #L500786.  v3:= v3.`okhttp3.Request.c` @type ^`okhttp3.Headers` @kind object;
  #L50078a.  call temp:= `newBuilder`(v3) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L500790.  v3:= temp @kind object;
  #L500792.  v2.`okhttp3.Request$Builder.c` @type ^`okhttp3.Headers$Builder` := v3 @kind object;
  #L500796.  return @kind void;
}
procedure `okhttp3.Request$Builder` `addHeader`(`okhttp3.Request$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Request$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5002e0.  v0:= v1.`okhttp3.Request$Builder.c` @type ^`okhttp3.Headers$Builder` @kind object;
  #L5002e4.  call temp:= `add`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L5002ea.  return v1 @kind object;
}
procedure `okhttp3.Request` `build`(`okhttp3.Request$Builder` v2 @kind this) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5002ac.  v0:= v2.`okhttp3.Request$Builder.a` @type ^`okhttp3.HttpUrl` @kind object;
  #L5002b0.  if v0 == 0 then goto L5002c0;
  #L5002b4.  v0:= new `okhttp3.Request`;
  #L5002b8.  call `<init>`(v0, v2) @signature `Lokhttp3/Request;.<init>:(Lokhttp3/Request$Builder;)V` @kind direct;
  #L5002be.  return v0 @kind object;
  #L5002c0.  v0:= new `java.lang.IllegalStateException`;
  #L5002c4.  v1:= "url == null" @kind object;
  #L5002c8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5002ce.  throw v0;
}
procedure `okhttp3.Request$Builder` `cacheControl`(`okhttp3.Request$Builder` v2 @kind this, `okhttp3.CacheControl` v3 @kind object) @signature `Lokhttp3/Request$Builder;.cacheControl:(Lokhttp3/CacheControl;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5002fc.  call temp:= `toString`(v3) @signature `Lokhttp3/CacheControl;.toString:()Ljava/lang/String;` @kind virtual;
  #L500302.  v3:= temp @kind object;
  #L500304.  call temp:= `isEmpty`(v3) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L50030a.  v0:= temp;
  #L50030c.  v1:= "Cache-Control" @kind object;
  #L500310.  if v0 == 0 then goto L50031e;
  #L500314.  call temp:= `removeHeader`(v2, v1) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L50031a.  v3:= temp @kind object;
  #L50031c.  return v3 @kind object;
  #L50031e.  call temp:= `header`(v2, v1, v3) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L500324.  v3:= temp @kind object;
  #L500326.  return v3 @kind object;
}
procedure `okhttp3.Request$Builder` `delete`(`okhttp3.Request$Builder` v1 @kind this) @signature `Lokhttp3/Request$Builder;.delete:()Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L500338.  v0:= `@@okhttp3.internal.Util.EMPTY_REQUEST` @type ^`okhttp3.RequestBody` @kind object;
  #L50033c.  call temp:= `delete`(v1, v0) @signature `Lokhttp3/Request$Builder;.delete:(Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L500342.  v0:= temp @kind object;
  #L500344.  return v0 @kind object;
}
procedure `okhttp3.Request$Builder` `delete`(`okhttp3.Request$Builder` v1 @kind this, `okhttp3.RequestBody` v2 @kind object) @signature `Lokhttp3/Request$Builder;.delete:(Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L500358.  v0:= "DELETE" @kind object;
  #L50035c.  call temp:= `method`(v1, v0, v2) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L500362.  v2:= temp @kind object;
  #L500364.  return v2 @kind object;
}
procedure `okhttp3.Request$Builder` `get`(`okhttp3.Request$Builder` v2 @kind this) @signature `Lokhttp3/Request$Builder;.get:()Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L500378.  v0:= "GET" @kind object;
  #L50037c.  v1:= 0I;
  #L50037e.  call temp:= `method`(v2, v0, v1) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L500384.  v0:= temp @kind object;
  #L500386.  return v0 @kind object;
}
procedure `okhttp3.Request$Builder` `head`(`okhttp3.Request$Builder` v2 @kind this) @signature `Lokhttp3/Request$Builder;.head:()Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L500398.  v0:= "HEAD" @kind object;
  #L50039c.  v1:= 0I;
  #L50039e.  call temp:= `method`(v2, v0, v1) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L5003a4.  v0:= temp @kind object;
  #L5003a6.  return v0 @kind object;
}
procedure `okhttp3.Request$Builder` `header`(`okhttp3.Request$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5003b8.  v0:= v1.`okhttp3.Request$Builder.c` @type ^`okhttp3.Headers$Builder` @kind object;
  #L5003bc.  call temp:= `set`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.set:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L5003c2.  return v1 @kind object;
}
procedure `okhttp3.Request$Builder` `headers`(`okhttp3.Request$Builder` v0 @kind this, `okhttp3.Headers` v1 @kind object) @signature `Lokhttp3/Request$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;

  #L5003d4.  call temp:= `newBuilder`(v1) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L5003da.  v1:= temp @kind object;
  #L5003dc.  v0.`okhttp3.Request$Builder.c` @type ^`okhttp3.Headers$Builder` := v1 @kind object;
  #L5003e0.  return v0 @kind object;
}
procedure `okhttp3.Request$Builder` `method`(`okhttp3.Request$Builder` v2 @kind this, `java.lang.String` v3 @kind object, `okhttp3.RequestBody` v4 @kind object) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5003f4.  if v3 == 0 then goto L5004ae;
  #L5003f8.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L5003fe.  v0:= temp;
  #L500400.  if v0 == 0 then goto L50049e;
  #L500404.  v0:= "method " @kind object;
  #L500408.  if v4 == 0 then goto L50044e;
  #L50040c.  call temp:= `permitsRequestBody`(v3) @signature `Lokhttp3/internal/http/HttpMethod;.permitsRequestBody:(Ljava/lang/String;)Z` @kind static;
  #L500412.  v1:= temp;
  #L500414.  if v1 == 0 then goto L50041a;
  #L500418.  goto L50044e;
  #L50041a.  v4:= new `java.lang.IllegalArgumentException`;
  #L50041e.  v1:= new `java.lang.StringBuilder`;
  #L500422.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L500428.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50042e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L500434.  v3:= " must not have a request body." @kind object;
  #L500438.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50043e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L500444.  v3:= temp @kind object;
  #L500446.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50044c.  throw v4;
  #L50044e.  if v4 != 0 then goto L500494;
  #L500452.  call temp:= `requiresRequestBody`(v3) @signature `Lokhttp3/internal/http/HttpMethod;.requiresRequestBody:(Ljava/lang/String;)Z` @kind static;
  #L500458.  v1:= temp;
  #L50045a.  if v1 != 0 then goto L500460;
  #L50045e.  goto L500494;
  #L500460.  v4:= new `java.lang.IllegalArgumentException`;
  #L500464.  v1:= new `java.lang.StringBuilder`;
  #L500468.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50046e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L500474.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50047a.  v3:= " must have a request body." @kind object;
  #L50047e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L500484.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50048a.  v3:= temp @kind object;
  #L50048c.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L500492.  throw v4;
  #L500494.  v2.`okhttp3.Request$Builder.b` @type ^`java.lang.String` := v3 @kind object;
  #L500498.  v2.`okhttp3.Request$Builder.d` @type ^`okhttp3.RequestBody` := v4 @kind object;
  #L50049c.  return v2 @kind object;
  #L50049e.  v3:= new `java.lang.IllegalArgumentException`;
  #L5004a2.  v4:= "method.length() == 0" @kind object;
  #L5004a6.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5004ac.  throw v3;
  #L5004ae.  v3:= new `java.lang.NullPointerException`;
  #L5004b2.  v4:= "method == null" @kind object;
  #L5004b6.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5004bc.  throw v3;
}
procedure `okhttp3.Request$Builder` `patch`(`okhttp3.Request$Builder` v1 @kind this, `okhttp3.RequestBody` v2 @kind object) @signature `Lokhttp3/Request$Builder;.patch:(Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5004d0.  v0:= "PATCH" @kind object;
  #L5004d4.  call temp:= `method`(v1, v0, v2) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L5004da.  v2:= temp @kind object;
  #L5004dc.  return v2 @kind object;
}
procedure `okhttp3.Request$Builder` `post`(`okhttp3.Request$Builder` v1 @kind this, `okhttp3.RequestBody` v2 @kind object) @signature `Lokhttp3/Request$Builder;.post:(Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5004f0.  v0:= "POST" @kind object;
  #L5004f4.  call temp:= `method`(v1, v0, v2) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L5004fa.  v2:= temp @kind object;
  #L5004fc.  return v2 @kind object;
}
procedure `okhttp3.Request$Builder` `put`(`okhttp3.Request$Builder` v1 @kind this, `okhttp3.RequestBody` v2 @kind object) @signature `Lokhttp3/Request$Builder;.put:(Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L500510.  v0:= "PUT" @kind object;
  #L500514.  call temp:= `method`(v1, v0, v2) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L50051a.  v2:= temp @kind object;
  #L50051c.  return v2 @kind object;
}
procedure `okhttp3.Request$Builder` `removeHeader`(`okhttp3.Request$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L500530.  v0:= v1.`okhttp3.Request$Builder.c` @type ^`okhttp3.Headers$Builder` @kind object;
  #L500534.  call temp:= `removeAll`(v0, v2) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L50053a.  return v1 @kind object;
}
procedure `okhttp3.Request$Builder` `tag`(`okhttp3.Request$Builder` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lokhttp3/Request$Builder;.tag:(Ljava/lang/Class;Ljava/lang/Object;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50054c.  if v2 == 0 then goto L500592;
  #L500550.  if v3 != 0 then goto L500560;
  #L500554.  v3:= v1.`okhttp3.Request$Builder.e` @type ^`java.util.Map` @kind object;
  #L500558.  call temp:= `remove`(v3, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L50055e.  goto L500590;
  #L500560.  v0:= v1.`okhttp3.Request$Builder.e` @type ^`java.util.Map` @kind object;
  #L500564.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L50056a.  v0:= temp;
  #L50056c.  if v0 == 0 then goto L50057e;
  #L500570.  v0:= new `java.util.LinkedHashMap`;
  #L500574.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L50057a.  v1.`okhttp3.Request$Builder.e` @type ^`java.util.Map` := v0 @kind object;
  #L50057e.  v0:= v1.`okhttp3.Request$Builder.e` @type ^`java.util.Map` @kind object;
  #L500582.  call temp:= `cast`(v2, v3) @signature `Ljava/lang/Class;.cast:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L500588.  v3:= temp @kind object;
  #L50058a.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L500590.  return v1 @kind object;
  #L500592.  v2:= new `java.lang.NullPointerException`;
  #L500596.  v3:= "type == null" @kind object;
  #L50059a.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5005a0.  throw v2;
}
procedure `okhttp3.Request$Builder` `tag`(`okhttp3.Request$Builder` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/Request$Builder;.tag:(Ljava/lang/Object;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5005b4.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L5005b8.  call temp:= `tag`(v1, v0, v2) @signature `Lokhttp3/Request$Builder;.tag:(Ljava/lang/Class;Ljava/lang/Object;)Lokhttp3/Request$Builder;` @kind virtual;
  #L5005be.  v2:= temp @kind object;
  #L5005c0.  return v2 @kind object;
}
procedure `okhttp3.Request$Builder` `url`(`okhttp3.Request$Builder` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L5005d4.  if v7 == 0 then goto L500664;
  #L5005d8.  v1:= 1I;
  #L5005da.  v2:= 0I;
  #L5005dc.  v4:= 0I;
  #L5005de.  v5:= 3I;
  #L5005e0.  v3:= "ws:" @kind object;
  #L5005e4.  v0:= v7 @kind object;
  #L5005e6.  call temp:= `regionMatches`(v0, v1, v2, v3, v4, v5) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L5005ec.  v0:= temp;
  #L5005ee.  if v0 == 0 then goto L500620;
  #L5005f2.  v0:= new `java.lang.StringBuilder`;
  #L5005f6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5005fc.  v1:= "http:" @kind object;
  #L500600.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L500606.  v1:= 3I;
  #L500608.  call temp:= `substring`(v7, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L50060e.  v7:= temp @kind object;
  #L500610.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L500616.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50061c.  v7:= temp @kind object;
  #L50061e.  goto L500652;
  #L500620.  v1:= 1I;
  #L500622.  v2:= 0I;
  #L500624.  v4:= 0I;
  #L500626.  v5:= 4I;
  #L500628.  v3:= "wss:" @kind object;
  #L50062c.  v0:= v7 @kind object;
  #L50062e.  call temp:= `regionMatches`(v0, v1, v2, v3, v4, v5) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L500634.  v0:= temp;
  #L500636.  if v0 == 0 then goto L500652;
  #L50063a.  v0:= new `java.lang.StringBuilder`;
  #L50063e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L500644.  v1:= "https:" @kind object;
  #L500648.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50064e.  v1:= 4I;
  #L500650.  goto L500608;
  #L500652.  call temp:= `get`(v7) @signature `Lokhttp3/HttpUrl;.get:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L500658.  v7:= temp @kind object;
  #L50065a.  call temp:= `url`(v6, v7) @signature `Lokhttp3/Request$Builder;.url:(Lokhttp3/HttpUrl;)Lokhttp3/Request$Builder;` @kind virtual;
  #L500660.  v7:= temp @kind object;
  #L500662.  return v7 @kind object;
  #L500664.  v7:= new `java.lang.NullPointerException`;
  #L500668.  v0:= "url == null" @kind object;
  #L50066c.  call `<init>`(v7, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L500672.  goto L500676;
  #L500674.  throw v7;
  #L500676.  goto L500674;
}
procedure `okhttp3.Request$Builder` `url`(`okhttp3.Request$Builder` v1 @kind this, `java.net.URL` v2 @kind object) @signature `Lokhttp3/Request$Builder;.url:(Ljava/net/URL;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L500688.  if v2 == 0 then goto L5006a6;
  #L50068c.  call temp:= `toString`(v2) @signature `Ljava/net/URL;.toString:()Ljava/lang/String;` @kind virtual;
  #L500692.  v2:= temp @kind object;
  #L500694.  call temp:= `get`(v2) @signature `Lokhttp3/HttpUrl;.get:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L50069a.  v2:= temp @kind object;
  #L50069c.  call temp:= `url`(v1, v2) @signature `Lokhttp3/Request$Builder;.url:(Lokhttp3/HttpUrl;)Lokhttp3/Request$Builder;` @kind virtual;
  #L5006a2.  v2:= temp @kind object;
  #L5006a4.  return v2 @kind object;
  #L5006a6.  v2:= new `java.lang.NullPointerException`;
  #L5006aa.  v0:= "url == null" @kind object;
  #L5006ae.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5006b4.  throw v2;
}
procedure `okhttp3.Request$Builder` `url`(`okhttp3.Request$Builder` v1 @kind this, `okhttp3.HttpUrl` v2 @kind object) @signature `Lokhttp3/Request$Builder;.url:(Lokhttp3/HttpUrl;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5006c8.  if v2 == 0 then goto L5006d2;
  #L5006cc.  v1.`okhttp3.Request$Builder.a` @type ^`okhttp3.HttpUrl` := v2 @kind object;
  #L5006d0.  return v1 @kind object;
  #L5006d2.  v2:= new `java.lang.NullPointerException`;
  #L5006d6.  v0:= "url == null" @kind object;
  #L5006da.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5006e0.  throw v2;
}
