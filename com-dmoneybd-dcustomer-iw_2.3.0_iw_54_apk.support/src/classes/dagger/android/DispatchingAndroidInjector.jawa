record `dagger.android.DispatchingAndroidInjector` @kind class @AccessFlag PUBLIC_FINAL extends `dagger.android.AndroidInjector` @kind interface {
  `java.util.Map` `dagger.android.DispatchingAndroidInjector.injectorFactories` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String` `@@dagger.android.DispatchingAndroidInjector.NO_SUPERTYPES_BOUND_FORMAT` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@dagger.android.DispatchingAndroidInjector.SUPERTYPES_BOUND_FORMAT` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`dagger.android.DispatchingAndroidInjector` v0 @kind this, `java.util.Map` v1 @kind object, `java.util.Map` v2 @kind object) @signature `Ldagger/android/DispatchingAndroidInjector;.<init>:(Ljava/util/Map;Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f6b24.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f6b2a.  call temp:= `merge`(v1, v2) @signature `Ldagger/android/DispatchingAndroidInjector;.merge:(Ljava/util/Map;Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L4f6b30.  v1:= temp @kind object;
  #L4f6b32.  v0.`dagger.android.DispatchingAndroidInjector.injectorFactories` @type ^`java.util.Map` := v1 @kind object;
  #L4f6b36.  return @kind void;
}
procedure `java.lang.String` `errorMessageSuggestions`(`dagger.android.DispatchingAndroidInjector` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ldagger/android/DispatchingAndroidInjector;.errorMessageSuggestions:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f69d8.  v0:= new `java.util.ArrayList`;
  #L4f69dc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4f69e2.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4f69e8.  v1:= temp @kind object;
  #L4f69ea.  if v1 == 0 then goto L4f6a1e;
  #L4f69ee.  v2:= v4.`dagger.android.DispatchingAndroidInjector.injectorFactories` @type ^`java.util.Map` @kind object;
  #L4f69f2.  call temp:= `getCanonicalName`(v1) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L4f69f8.  v3:= temp @kind object;
  #L4f69fa.  call temp:= `containsKey`(v2, v3) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L4f6a00.  v2:= temp;
  #L4f6a02.  if v2 == 0 then goto L4f6a14;
  #L4f6a06.  call temp:= `getCanonicalName`(v1) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L4f6a0c.  v2:= temp @kind object;
  #L4f6a0e.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f6a14.  call temp:= `getSuperclass`(v1) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L4f6a1a.  v1:= temp @kind object;
  #L4f6a1c.  goto L4f69ea;
  #L4f6a1e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4f6a24.  v1:= temp;
  #L4f6a26.  v2:= 1I;
  #L4f6a28.  v3:= 0I;
  #L4f6a2a.  if v1 == 0 then goto L4f6a54;
  #L4f6a2e.  v0:= new `java.lang.Object`[v2];
  #L4f6a32.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4f6a38.  v5:= temp @kind object;
  #L4f6a3a.  call temp:= `getCanonicalName`(v5) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L4f6a40.  v5:= temp @kind object;
  #L4f6a42.  v0[v3]:= v5 @kind object;
  #L4f6a46.  v5:= "No injector factory bound for Class<%s>" @kind object;
  #L4f6a4a.  call temp:= `format`(v5, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4f6a50.  v5:= temp @kind object;
  #L4f6a52.  goto L4f6a7e;
  #L4f6a54.  v1:= 2I;
  #L4f6a56.  v1:= new `java.lang.Object`[v1];
  #L4f6a5a.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4f6a60.  v5:= temp @kind object;
  #L4f6a62.  call temp:= `getCanonicalName`(v5) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L4f6a68.  v5:= temp @kind object;
  #L4f6a6a.  v1[v3]:= v5 @kind object;
  #L4f6a6e.  v1[v2]:= v0 @kind object;
  #L4f6a72.  v5:= "No injector factory bound for Class<%1$s>. Injector factories were bound for supertypes of %1$s: %2$s. Did you mean to bind an injector factory for the subtype?" @kind object;
  #L4f6a76.  call temp:= `format`(v5, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4f6a7c.  v5:= temp @kind object;
  #L4f6a7e.  return v5 @kind object;
}
procedure `java.util.Map` `merge`(`java.util.Map` v2 @kind object, `java.util.Map` v3 @kind object) @signature `Ldagger/android/DispatchingAndroidInjector;.merge:(Ljava/util/Map;Ljava/util/Map;)Ljava/util/Map;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L4f6a90.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L4f6a96.  v0:= temp;
  #L4f6a98.  if v0 == 0 then goto L4f6a9e;
  #L4f6a9c.  return v3 @kind object;
  #L4f6a9e.  call temp:= `size`(v2) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L4f6aa4.  v0:= temp;
  #L4f6aa6.  call temp:= `size`(v3) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L4f6aac.  v1:= temp;
  #L4f6aae.  v0:= v0 + v1 @kind int;
  #L4f6ab0.  call temp:= `newLinkedHashMapWithExpectedSize`(v0) @signature `Ldagger/internal/DaggerCollections;.newLinkedHashMapWithExpectedSize:(I)Ljava/util/LinkedHashMap;` @kind static;
  #L4f6ab6.  v0:= temp @kind object;
  #L4f6ab8.  call `putAll`(v0, v3) @signature `Ljava/util/Map;.putAll:(Ljava/util/Map;)V` @kind interface;
  #L4f6abe.  call temp:= `entrySet`(v2) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L4f6ac4.  v2:= temp @kind object;
  #L4f6ac6.  call temp:= `iterator`(v2) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4f6acc.  v2:= temp @kind object;
  #L4f6ace.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4f6ad4.  v3:= temp;
  #L4f6ad6.  if v3 == 0 then goto L4f6b0a;
  #L4f6ada.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4f6ae0.  v3:= temp @kind object;
  #L4f6ae2.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L4f6ae6.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L4f6aec.  v1:= temp @kind object;
  #L4f6aee.  v1:= (`java.lang.Class`) v1 @kind object;
  #L4f6af2.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L4f6af8.  v1:= temp @kind object;
  #L4f6afa.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L4f6b00.  v3:= temp @kind object;
  #L4f6b02.  call temp:= `put`(v0, v1, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f6b08.  goto L4f6ace;
  #L4f6b0a.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L4f6b10.  v2:= temp @kind object;
  #L4f6b12.  return v2 @kind object;
}
procedure `void` `inject`(`dagger.android.DispatchingAndroidInjector` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ldagger/android/DispatchingAndroidInjector;.inject:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6b48.  call temp:= `maybeInject`(v1, v2) @signature `Ldagger/android/DispatchingAndroidInjector;.maybeInject:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f6b4e.  v0:= temp;
  #L4f6b50.  if v0 == 0 then goto L4f6b56;
  #L4f6b54.  return @kind void;
  #L4f6b56.  v0:= new `java.lang.IllegalArgumentException`;
  #L4f6b5a.  call temp:= `errorMessageSuggestions`(v1, v2) @signature `Ldagger/android/DispatchingAndroidInjector;.errorMessageSuggestions:(Ljava/lang/Object;)Ljava/lang/String;` @kind direct;
  #L4f6b60.  v2:= temp @kind object;
  #L4f6b62.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f6b68.  throw v0;
}
procedure `boolean` `maybeInject`(`dagger.android.DispatchingAndroidInjector` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Ldagger/android/DispatchingAndroidInjector;.maybeInject:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f6910.  v0:= v6.`dagger.android.DispatchingAndroidInjector.injectorFactories` @type ^`java.util.Map` @kind object;
  #L4f6914.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4f691a.  v1:= temp @kind object;
  #L4f691c.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L4f6922.  v1:= temp @kind object;
  #L4f6924.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4f692a.  v0:= temp @kind object;
  #L4f692c.  v0:= (`javax.inject.Provider`) v0 @kind object;
  #L4f6930.  v1:= 0I;
  #L4f6932.  if v0 != 0 then goto L4f6938;
  #L4f6936.  return v1;
  #L4f6938.  call temp:= `get`(v0) @signature `Ljavax/inject/Provider;.get:()Ljava/lang/Object;` @kind interface;
  #L4f693e.  v0:= temp @kind object;
  #L4f6940.  v0:= (`dagger.android.AndroidInjector$Factory`) v0 @kind object;
  #L4f6944.  v2:= 1I;
  #L4f6946.  call temp:= `create`(v0, v7) @signature `Ldagger/android/AndroidInjector$Factory;.create:(Ljava/lang/Object;)Ldagger/android/AndroidInjector;` @kind interface;
  #L4f694c.  v3:= temp @kind object;
  #L4f694e.  v4:= "%s.create(I) should not return null." @kind object;
  #L4f6952.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4f6958.  v5:= temp @kind object;
  #L4f695a.  call temp:= `checkNotNull`(v3, v4, v5) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4f6960.  v3:= temp @kind object;
  #L4f6962.  v3:= (`dagger.android.AndroidInjector`) v3 @kind object;
  #L4f6966.  call `inject`(v3, v7) @signature `Ldagger/android/AndroidInjector;.inject:(Ljava/lang/Object;)V` @kind interface;
  #L4f696c.  return v2;
  #L4f696e.  v3:= Exception @type ^`java.lang.ClassCastException` @kind object;
  #L4f6970.  v4:= new `dagger.android.DispatchingAndroidInjector$InvalidInjectorBindingException`;
  #L4f6974.  v5:= 2I;
  #L4f6976.  v5:= new `java.lang.Object`[v5];
  #L4f697a.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4f6980.  v0:= temp @kind object;
  #L4f6982.  call temp:= `getCanonicalName`(v0) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L4f6988.  v0:= temp @kind object;
  #L4f698a.  v5[v1]:= v0 @kind object;
  #L4f698e.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4f6994.  v7:= temp @kind object;
  #L4f6996.  call temp:= `getCanonicalName`(v7) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L4f699c.  v7:= temp @kind object;
  #L4f699e.  v5[v2]:= v7 @kind object;
  #L4f69a2.  v7:= "%s does not implement AndroidInjector.Factory<%s>" @kind object;
  #L4f69a6.  call temp:= `format`(v7, v5) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4f69ac.  v7:= temp @kind object;
  #L4f69ae.  call `<init>`(v4, v7, v3) @signature `Ldagger/android/DispatchingAndroidInjector$InvalidInjectorBindingException;.<init>:(Ljava/lang/String;Ljava/lang/ClassCastException;)V` @kind direct;
  #L4f69b4.  throw v4;
  catch `java.lang.ClassCastException` @[L4f6946..L4f696c] goto L4f696e;
}
