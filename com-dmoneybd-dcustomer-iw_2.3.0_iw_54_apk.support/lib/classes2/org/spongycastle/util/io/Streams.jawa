record `org.spongycastle.util.io.Streams` @kind class @AccessFlag PUBLIC_FINAL {
}
global `int` `@@org.spongycastle.util.io.Streams.BUFFER_SIZE` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/util/io/Streams;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.util.io.Streams` v0 @kind this) @signature `Lorg/spongycastle/util/io/Streams;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `drain`(`java.io.InputStream` v3 @kind object) @signature `Lorg/spongycastle/util/io/Streams;.drain:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `pipeAll`(`java.io.InputStream` v4 @kind object, `java.io.OutputStream` v5 @kind object) @signature `Lorg/spongycastle/util/io/Streams;.pipeAll:(Ljava/io/InputStream;Ljava/io/OutputStream;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `pipeAllLimited`(`java.io.InputStream` v11 @kind object, `long` v12 , `java.io.OutputStream` v14 @kind object) @signature `Lorg/spongycastle/util/io/Streams;.pipeAllLimited:(Ljava/io/InputStream;JLjava/io/OutputStream;)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `readAll`(`java.io.InputStream` v1 @kind object) @signature `Lorg/spongycastle/util/io/Streams;.readAll:(Ljava/io/InputStream;)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `readAllLimited`(`java.io.InputStream` v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/util/io/Streams;.readAllLimited:(Ljava/io/InputStream;I)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `readFully`(`java.io.InputStream` v2 @kind object, `byte`[] v3 @kind object) @signature `Lorg/spongycastle/util/io/Streams;.readFully:(Ljava/io/InputStream;[B)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `readFully`(`java.io.InputStream` v3 @kind object, `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lorg/spongycastle/util/io/Streams;.readFully:(Ljava/io/InputStream;[BII)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
