record `org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.BlockCipher` @kind interface {
  `byte`[] `org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher.FR` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher.FRE` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher.IV` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher.blockSize` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.BlockCipher` `org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher.cipher` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher.count` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher.forEncryption` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher` v1 @kind this, `org.spongycastle.crypto.BlockCipher` v2 @kind object) @signature `Lorg/spongycastle/crypto/modes/OpenPGPCFBBlockCipher;.<init>:(Lorg/spongycastle/crypto/BlockCipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `decryptBlock`(`org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher` v8 @kind this, `byte`[] v9 @kind object, `int` v10 , `byte`[] v11 @kind object, `int` v12 ) @signature `Lorg/spongycastle/crypto/modes/OpenPGPCFBBlockCipher;.decryptBlock:([BI[BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `encryptBlock`(`org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher` v8 @kind this, `byte`[] v9 @kind object, `int` v10 , `byte`[] v11 @kind object, `int` v12 ) @signature `Lorg/spongycastle/crypto/modes/OpenPGPCFBBlockCipher;.encryptBlock:([BI[BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `byte` `encryptByte`(`org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher` v1 @kind this, `byte` v2 , `int` v3 ) @signature `Lorg/spongycastle/crypto/modes/OpenPGPCFBBlockCipher;.encryptByte:(BI)B` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher` v2 @kind this) @signature `Lorg/spongycastle/crypto/modes/OpenPGPCFBBlockCipher;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/OpenPGPCFBBlockCipher;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.BlockCipher` `getUnderlyingCipher`(`org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/OpenPGPCFBBlockCipher;.getUnderlyingCipher:()Lorg/spongycastle/crypto/BlockCipher;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher` v1 @kind this, `boolean` v2 , `org.spongycastle.crypto.CipherParameters` v3 @kind object) @signature `Lorg/spongycastle/crypto/modes/OpenPGPCFBBlockCipher;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/crypto/modes/OpenPGPCFBBlockCipher;.processBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.modes.OpenPGPCFBBlockCipher` v4 @kind this) @signature `Lorg/spongycastle/crypto/modes/OpenPGPCFBBlockCipher;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
