record `org.spongycastle.crypto.modes.CFBBlockCipher` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.StreamBlockCipher` @kind class {
  `byte`[] `org.spongycastle.crypto.modes.CFBBlockCipher.IV` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.CFBBlockCipher.blockSize` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.CFBBlockCipher.byteCount` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.CFBBlockCipher.cfbOutV` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.CFBBlockCipher.cfbV` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.BlockCipher` `org.spongycastle.crypto.modes.CFBBlockCipher.cipher` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.modes.CFBBlockCipher.encrypting` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.CFBBlockCipher.inBuf` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.crypto.modes.CFBBlockCipher` v1 @kind this, `org.spongycastle.crypto.BlockCipher` v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/crypto/modes/CFBBlockCipher;.<init>:(Lorg/spongycastle/crypto/BlockCipher;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `byte` `decryptByte`(`org.spongycastle.crypto.modes.CFBBlockCipher` v5 @kind this, `byte` v6 ) @signature `Lorg/spongycastle/crypto/modes/CFBBlockCipher;.decryptByte:(B)B` @AccessFlag PRIVATE {

  # return;
}
procedure `byte` `encryptByte`(`org.spongycastle.crypto.modes.CFBBlockCipher` v5 @kind this, `byte` v6 ) @signature `Lorg/spongycastle/crypto/modes/CFBBlockCipher;.encryptByte:(B)B` @AccessFlag PRIVATE {

  # return;
}
procedure `byte` `calculateByte`(`org.spongycastle.crypto.modes.CFBBlockCipher` v1 @kind this, `byte` v2 ) @signature `Lorg/spongycastle/crypto/modes/CFBBlockCipher;.calculateByte:(B)B` @AccessFlag PROTECTED {

  # return;
}
procedure `int` `decryptBlock`(`org.spongycastle.crypto.modes.CFBBlockCipher` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `byte`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/crypto/modes/CFBBlockCipher;.decryptBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `encryptBlock`(`org.spongycastle.crypto.modes.CFBBlockCipher` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `byte`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/crypto/modes/CFBBlockCipher;.encryptBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.modes.CFBBlockCipher` v2 @kind this) @signature `Lorg/spongycastle/crypto/modes/CFBBlockCipher;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.modes.CFBBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/CFBBlockCipher;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getCurrentIV`(`org.spongycastle.crypto.modes.CFBBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/CFBBlockCipher;.getCurrentIV:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.modes.CFBBlockCipher` v6 @kind this, `boolean` v7 , `org.spongycastle.crypto.CipherParameters` v8 @kind object) @signature `Lorg/spongycastle/crypto/modes/CFBBlockCipher;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.spongycastle.crypto.modes.CFBBlockCipher` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `byte`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/crypto/modes/CFBBlockCipher;.processBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.modes.CFBBlockCipher` v4 @kind this) @signature `Lorg/spongycastle/crypto/modes/CFBBlockCipher;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
