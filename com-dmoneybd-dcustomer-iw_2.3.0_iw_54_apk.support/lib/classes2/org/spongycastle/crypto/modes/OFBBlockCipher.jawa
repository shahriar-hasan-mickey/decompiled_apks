record `org.spongycastle.crypto.modes.OFBBlockCipher` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.StreamBlockCipher` @kind class {
  `byte`[] `org.spongycastle.crypto.modes.OFBBlockCipher.IV` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.OFBBlockCipher.blockSize` @AccessFlag PRIVATE_FINAL;
  `int` `org.spongycastle.crypto.modes.OFBBlockCipher.byteCount` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.BlockCipher` `org.spongycastle.crypto.modes.OFBBlockCipher.cipher` @AccessFlag PRIVATE_FINAL;
  `byte`[] `org.spongycastle.crypto.modes.OFBBlockCipher.ofbOutV` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.OFBBlockCipher.ofbV` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.crypto.modes.OFBBlockCipher` v0 @kind this, `org.spongycastle.crypto.BlockCipher` v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/crypto/modes/OFBBlockCipher;.<init>:(Lorg/spongycastle/crypto/BlockCipher;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `byte` `calculateByte`(`org.spongycastle.crypto.modes.OFBBlockCipher` v5 @kind this, `byte` v6 ) @signature `Lorg/spongycastle/crypto/modes/OFBBlockCipher;.calculateByte:(B)B` @AccessFlag PROTECTED {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.modes.OFBBlockCipher` v2 @kind this) @signature `Lorg/spongycastle/crypto/modes/OFBBlockCipher;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.modes.OFBBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/OFBBlockCipher;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.modes.OFBBlockCipher` v6 @kind this, `boolean` v7 , `org.spongycastle.crypto.CipherParameters` v8 @kind object) @signature `Lorg/spongycastle/crypto/modes/OFBBlockCipher;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.spongycastle.crypto.modes.OFBBlockCipher` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `byte`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/crypto/modes/OFBBlockCipher;.processBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.modes.OFBBlockCipher` v4 @kind this) @signature `Lorg/spongycastle/crypto/modes/OFBBlockCipher;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
