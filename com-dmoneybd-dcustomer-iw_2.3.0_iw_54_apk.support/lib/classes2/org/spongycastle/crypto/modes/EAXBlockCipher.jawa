record `org.spongycastle.crypto.modes.EAXBlockCipher` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.modes.AEADBlockCipher` @kind interface {
  `byte`[] `org.spongycastle.crypto.modes.EAXBlockCipher.associatedTextMac` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.EAXBlockCipher.blockSize` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.EAXBlockCipher.bufBlock` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.EAXBlockCipher.bufOff` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.modes.SICBlockCipher` `org.spongycastle.crypto.modes.EAXBlockCipher.cipher` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.modes.EAXBlockCipher.cipherInitialized` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.modes.EAXBlockCipher.forEncryption` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.EAXBlockCipher.initialAssociatedText` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.Mac` `org.spongycastle.crypto.modes.EAXBlockCipher.mac` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.EAXBlockCipher.macBlock` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.EAXBlockCipher.macSize` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.EAXBlockCipher.nonceMac` @AccessFlag PRIVATE;
}
global `byte` `@@org.spongycastle.crypto.modes.EAXBlockCipher.cTAG` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@org.spongycastle.crypto.modes.EAXBlockCipher.hTAG` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@org.spongycastle.crypto.modes.EAXBlockCipher.nTAG` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.crypto.modes.EAXBlockCipher` v2 @kind this, `org.spongycastle.crypto.BlockCipher` v3 @kind object) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.<init>:(Lorg/spongycastle/crypto/BlockCipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `calculateMac`(`org.spongycastle.crypto.modes.EAXBlockCipher` v5 @kind this) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.calculateMac:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `initCipher`(`org.spongycastle.crypto.modes.EAXBlockCipher` v5 @kind this) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.initCipher:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `process`(`org.spongycastle.crypto.modes.EAXBlockCipher` v4 @kind this, `byte` v5 , `byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.process:(B[BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.modes.EAXBlockCipher` v4 @kind this, `boolean` v5 ) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.reset:(Z)V` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `verifyMac`(`org.spongycastle.crypto.modes.EAXBlockCipher` v5 @kind this, `byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.verifyMac:([BI)Z` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `doFinal`(`org.spongycastle.crypto.modes.EAXBlockCipher` v8 @kind this, `byte`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.doFinal:([BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.modes.EAXBlockCipher` v2 @kind this) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.modes.EAXBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getMac`(`org.spongycastle.crypto.modes.EAXBlockCipher` v4 @kind this) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.getMac:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getOutputSize`(`org.spongycastle.crypto.modes.EAXBlockCipher` v1 @kind this, `int` v2 ) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.getOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.BlockCipher` `getUnderlyingCipher`(`org.spongycastle.crypto.modes.EAXBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.getUnderlyingCipher:()Lorg/spongycastle/crypto/BlockCipher;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getUpdateOutputSize`(`org.spongycastle.crypto.modes.EAXBlockCipher` v1 @kind this, `int` v2 ) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.getUpdateOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.modes.EAXBlockCipher` v4 @kind this, `boolean` v5 , `org.spongycastle.crypto.CipherParameters` v6 @kind object) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processAADByte`(`org.spongycastle.crypto.modes.EAXBlockCipher` v1 @kind this, `byte` v2 ) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.processAADByte:(B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processAADBytes`(`org.spongycastle.crypto.modes.EAXBlockCipher` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.processAADBytes:([BII)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processByte`(`org.spongycastle.crypto.modes.EAXBlockCipher` v0 @kind this, `byte` v1 , `byte`[] v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.processByte:(B[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBytes`(`org.spongycastle.crypto.modes.EAXBlockCipher` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 , `byte`[] v8 @kind object, `int` v9 ) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.processBytes:([BII[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.modes.EAXBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/EAXBlockCipher;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
