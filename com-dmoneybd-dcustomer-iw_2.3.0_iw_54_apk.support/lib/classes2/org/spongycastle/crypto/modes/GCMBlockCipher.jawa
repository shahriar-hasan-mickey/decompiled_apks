record `org.spongycastle.crypto.modes.GCMBlockCipher` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.modes.AEADBlockCipher` @kind interface {
  `byte`[] `org.spongycastle.crypto.modes.GCMBlockCipher.H` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.GCMBlockCipher.J0` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.GCMBlockCipher.S` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.GCMBlockCipher.S_at` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.GCMBlockCipher.S_atPre` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.GCMBlockCipher.atBlock` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.GCMBlockCipher.atBlockPos` @AccessFlag PRIVATE;
  `long` `org.spongycastle.crypto.modes.GCMBlockCipher.atLength` @AccessFlag PRIVATE;
  `long` `org.spongycastle.crypto.modes.GCMBlockCipher.atLengthPre` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.GCMBlockCipher.bufBlock` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.GCMBlockCipher.bufOff` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.BlockCipher` `org.spongycastle.crypto.modes.GCMBlockCipher.cipher` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.GCMBlockCipher.counter` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.modes.gcm.GCMExponentiator` `org.spongycastle.crypto.modes.GCMBlockCipher.exp` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.modes.GCMBlockCipher.forEncryption` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.GCMBlockCipher.initialAssociatedText` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.GCMBlockCipher.macBlock` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.GCMBlockCipher.macSize` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.modes.gcm.GCMMultiplier` `org.spongycastle.crypto.modes.GCMBlockCipher.multiplier` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.GCMBlockCipher.nonce` @AccessFlag PRIVATE;
  `long` `org.spongycastle.crypto.modes.GCMBlockCipher.totalLength` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.modes.GCMBlockCipher.BLOCK_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.crypto.modes.GCMBlockCipher` v1 @kind this, `org.spongycastle.crypto.BlockCipher` v2 @kind object) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.<init>:(Lorg/spongycastle/crypto/BlockCipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.modes.GCMBlockCipher` v2 @kind this, `org.spongycastle.crypto.BlockCipher` v3 @kind object, `org.spongycastle.crypto.modes.gcm.GCMMultiplier` v4 @kind object) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.<init>:(Lorg/spongycastle/crypto/BlockCipher;Lorg/spongycastle/crypto/modes/gcm/GCMMultiplier;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `gCTRBlock`(`org.spongycastle.crypto.modes.GCMBlockCipher` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object, `int` v6 ) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.gCTRBlock:([B[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `gCTRPartial`(`org.spongycastle.crypto.modes.GCMBlockCipher` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 , `byte`[] v5 @kind object, `int` v6 ) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.gCTRPartial:([BII[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `gHASH`(`org.spongycastle.crypto.modes.GCMBlockCipher` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object, `int` v6 ) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.gHASH:([B[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `gHASHBlock`(`org.spongycastle.crypto.modes.GCMBlockCipher` v0 @kind this, `byte`[] v1 @kind object, `byte`[] v2 @kind object) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.gHASHBlock:([B[B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `gHASHPartial`(`org.spongycastle.crypto.modes.GCMBlockCipher` v0 @kind this, `byte`[] v1 @kind object, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.gHASHPartial:([B[BII)V` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `getNextCounterBlock`(`org.spongycastle.crypto.modes.GCMBlockCipher` v4 @kind this) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.getNextCounterBlock:()[B` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `initCipher`(`org.spongycastle.crypto.modes.GCMBlockCipher` v8 @kind this) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.initCipher:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `outputBlock`(`org.spongycastle.crypto.modes.GCMBlockCipher` v5 @kind this, `byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.outputBlock:([BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.modes.GCMBlockCipher` v4 @kind this, `boolean` v5 ) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.reset:(Z)V` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `doFinal`(`org.spongycastle.crypto.modes.GCMBlockCipher` v13 @kind this, `byte`[] v14 @kind object, `int` v15 ) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.doFinal:([BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.modes.GCMBlockCipher` v2 @kind this) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getMac`(`org.spongycastle.crypto.modes.GCMBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.getMac:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getOutputSize`(`org.spongycastle.crypto.modes.GCMBlockCipher` v1 @kind this, `int` v2 ) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.getOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.BlockCipher` `getUnderlyingCipher`(`org.spongycastle.crypto.modes.GCMBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.getUnderlyingCipher:()Lorg/spongycastle/crypto/BlockCipher;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getUpdateOutputSize`(`org.spongycastle.crypto.modes.GCMBlockCipher` v1 @kind this, `int` v2 ) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.getUpdateOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.modes.GCMBlockCipher` v6 @kind this, `boolean` v7 , `org.spongycastle.crypto.CipherParameters` v8 @kind object) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processAADByte`(`org.spongycastle.crypto.modes.GCMBlockCipher` v4 @kind this, `byte` v5 ) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.processAADByte:(B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processAADBytes`(`org.spongycastle.crypto.modes.GCMBlockCipher` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.processAADBytes:([BII)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processByte`(`org.spongycastle.crypto.modes.GCMBlockCipher` v2 @kind this, `byte` v3 , `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.processByte:(B[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBytes`(`org.spongycastle.crypto.modes.GCMBlockCipher` v5 @kind this, `byte`[] v6 @kind object, `int` v7 , `int` v8 , `byte`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.processBytes:([BII[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.modes.GCMBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/GCMBlockCipher;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
