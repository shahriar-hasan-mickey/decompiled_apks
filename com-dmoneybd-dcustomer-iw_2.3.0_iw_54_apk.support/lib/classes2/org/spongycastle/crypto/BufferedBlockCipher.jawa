record `org.spongycastle.crypto.BufferedBlockCipher` @kind class @AccessFlag PUBLIC {
  `byte`[] `org.spongycastle.crypto.BufferedBlockCipher.buf` @AccessFlag PROTECTED;
  `int` `org.spongycastle.crypto.BufferedBlockCipher.bufOff` @AccessFlag PROTECTED;
  `org.spongycastle.crypto.BlockCipher` `org.spongycastle.crypto.BufferedBlockCipher.cipher` @AccessFlag PROTECTED;
  `boolean` `org.spongycastle.crypto.BufferedBlockCipher.forEncryption` @AccessFlag PROTECTED;
  `boolean` `org.spongycastle.crypto.BufferedBlockCipher.partialBlockOkay` @AccessFlag PROTECTED;
  `boolean` `org.spongycastle.crypto.BufferedBlockCipher.pgpCFB` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`org.spongycastle.crypto.BufferedBlockCipher` v0 @kind this) @signature `Lorg/spongycastle/crypto/BufferedBlockCipher;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.BufferedBlockCipher` v5 @kind this, `org.spongycastle.crypto.BlockCipher` v6 @kind object) @signature `Lorg/spongycastle/crypto/BufferedBlockCipher;.<init>:(Lorg/spongycastle/crypto/BlockCipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `doFinal`(`org.spongycastle.crypto.BufferedBlockCipher` v3 @kind this, `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/crypto/BufferedBlockCipher;.doFinal:([BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.BufferedBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/BufferedBlockCipher;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getOutputSize`(`org.spongycastle.crypto.BufferedBlockCipher` v1 @kind this, `int` v2 ) @signature `Lorg/spongycastle/crypto/BufferedBlockCipher;.getOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.BlockCipher` `getUnderlyingCipher`(`org.spongycastle.crypto.BufferedBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/BufferedBlockCipher;.getUnderlyingCipher:()Lorg/spongycastle/crypto/BlockCipher;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getUpdateOutputSize`(`org.spongycastle.crypto.BufferedBlockCipher` v2 @kind this, `int` v3 ) @signature `Lorg/spongycastle/crypto/BufferedBlockCipher;.getUpdateOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.BufferedBlockCipher` v1 @kind this, `boolean` v2 , `org.spongycastle.crypto.CipherParameters` v3 @kind object) @signature `Lorg/spongycastle/crypto/BufferedBlockCipher;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processByte`(`org.spongycastle.crypto.BufferedBlockCipher` v3 @kind this, `byte` v4 , `byte`[] v5 @kind object, `int` v6 ) @signature `Lorg/spongycastle/crypto/BufferedBlockCipher;.processByte:(B[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBytes`(`org.spongycastle.crypto.BufferedBlockCipher` v5 @kind this, `byte`[] v6 @kind object, `int` v7 , `int` v8 , `byte`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/crypto/BufferedBlockCipher;.processBytes:([BII[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.BufferedBlockCipher` v4 @kind this) @signature `Lorg/spongycastle/crypto/BufferedBlockCipher;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
