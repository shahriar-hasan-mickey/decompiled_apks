record `org.spongycastle.crypto.macs.MacCFBBlockCipher` @kind class @AccessFlag  {
  `byte`[] `org.spongycastle.crypto.macs.MacCFBBlockCipher.IV` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.macs.MacCFBBlockCipher.blockSize` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.macs.MacCFBBlockCipher.cfbOutV` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.macs.MacCFBBlockCipher.cfbV` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.BlockCipher` `org.spongycastle.crypto.macs.MacCFBBlockCipher.cipher` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.crypto.macs.MacCFBBlockCipher` v1 @kind this, `org.spongycastle.crypto.BlockCipher` v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/crypto/macs/MacCFBBlockCipher;.<init>:(Lorg/spongycastle/crypto/BlockCipher;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `a`(`org.spongycastle.crypto.macs.MacCFBBlockCipher` v3 @kind this, `byte`[] v4 @kind object) @signature `Lorg/spongycastle/crypto/macs/MacCFBBlockCipher;.a:([B)V` @AccessFlag  {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.macs.MacCFBBlockCipher` v2 @kind this) @signature `Lorg/spongycastle/crypto/macs/MacCFBBlockCipher;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.macs.MacCFBBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/macs/MacCFBBlockCipher;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.macs.MacCFBBlockCipher` v6 @kind this, `org.spongycastle.crypto.CipherParameters` v7 @kind object) @signature `Lorg/spongycastle/crypto/macs/MacCFBBlockCipher;.init:(Lorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.spongycastle.crypto.macs.MacCFBBlockCipher` v5 @kind this, `byte`[] v6 @kind object, `int` v7 , `byte`[] v8 @kind object, `int` v9 ) @signature `Lorg/spongycastle/crypto/macs/MacCFBBlockCipher;.processBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.macs.MacCFBBlockCipher` v4 @kind this) @signature `Lorg/spongycastle/crypto/macs/MacCFBBlockCipher;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
