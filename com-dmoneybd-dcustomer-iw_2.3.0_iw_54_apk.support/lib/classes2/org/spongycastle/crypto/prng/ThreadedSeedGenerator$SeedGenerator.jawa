record `org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator` @kind class @AccessFlag  extends `java.lang.Runnable` @kind interface {
  `org.spongycastle.crypto.prng.ThreadedSeedGenerator` `org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator.a` @AccessFlag FINAL_SYNTHETIC;
  `int` `org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator.counter` @AccessFlag PRIVATE_VOLATILE;
  `boolean` `org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator.stop` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator` v0 @kind this, `org.spongycastle.crypto.prng.ThreadedSeedGenerator` v1 @kind object) @signature `Lorg/spongycastle/crypto/prng/ThreadedSeedGenerator$SeedGenerator;.<init>:(Lorg/spongycastle/crypto/prng/ThreadedSeedGenerator;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator` v0 @kind this, `org.spongycastle.crypto.prng.ThreadedSeedGenerator` v1 @kind object, `org.spongycastle.crypto.prng.ThreadedSeedGenerator$1` v2 @kind object) @signature `Lorg/spongycastle/crypto/prng/ThreadedSeedGenerator$SeedGenerator;.<init>:(Lorg/spongycastle/crypto/prng/ThreadedSeedGenerator;Lorg/spongycastle/crypto/prng/ThreadedSeedGenerator$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `byte`[] `generateSeed`(`org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator` v6 @kind this, `int` v7 , `boolean` v8 ) @signature `Lorg/spongycastle/crypto/prng/ThreadedSeedGenerator$SeedGenerator;.generateSeed:(IZ)[B` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `run`(`org.spongycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator` v1 @kind this) @signature `Lorg/spongycastle/crypto/prng/ThreadedSeedGenerator$SeedGenerator;.run:()V` @AccessFlag PUBLIC {

  # return;
}
