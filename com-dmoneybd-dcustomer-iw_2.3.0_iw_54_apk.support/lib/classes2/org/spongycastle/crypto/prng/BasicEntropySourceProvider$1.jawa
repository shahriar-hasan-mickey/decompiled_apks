record `org.spongycastle.crypto.prng.BasicEntropySourceProvider$1` @kind class @AccessFlag  extends `org.spongycastle.crypto.prng.EntropySource` @kind interface {
  `int` `org.spongycastle.crypto.prng.BasicEntropySourceProvider$1.a` @AccessFlag FINAL_SYNTHETIC;
  `org.spongycastle.crypto.prng.BasicEntropySourceProvider` `org.spongycastle.crypto.prng.BasicEntropySourceProvider$1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`org.spongycastle.crypto.prng.BasicEntropySourceProvider$1` v0 @kind this, `org.spongycastle.crypto.prng.BasicEntropySourceProvider` v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/crypto/prng/BasicEntropySourceProvider$1;.<init>:(Lorg/spongycastle/crypto/prng/BasicEntropySourceProvider;I)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `int` `entropySize`(`org.spongycastle.crypto.prng.BasicEntropySourceProvider$1` v1 @kind this) @signature `Lorg/spongycastle/crypto/prng/BasicEntropySourceProvider$1;.entropySize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getEntropy`(`org.spongycastle.crypto.prng.BasicEntropySourceProvider$1` v2 @kind this) @signature `Lorg/spongycastle/crypto/prng/BasicEntropySourceProvider$1;.getEntropy:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isPredictionResistant`(`org.spongycastle.crypto.prng.BasicEntropySourceProvider$1` v1 @kind this) @signature `Lorg/spongycastle/crypto/prng/BasicEntropySourceProvider$1;.isPredictionResistant:()Z` @AccessFlag PUBLIC {

  # return;
}
