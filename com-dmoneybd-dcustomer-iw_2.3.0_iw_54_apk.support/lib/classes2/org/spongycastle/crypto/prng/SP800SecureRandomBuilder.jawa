record `org.spongycastle.crypto.prng.SP800SecureRandomBuilder` @kind class @AccessFlag PUBLIC {
  `int` `org.spongycastle.crypto.prng.SP800SecureRandomBuilder.entropyBitsRequired` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.prng.EntropySourceProvider` `org.spongycastle.crypto.prng.SP800SecureRandomBuilder.entropySourceProvider` @AccessFlag PRIVATE_FINAL;
  `byte`[] `org.spongycastle.crypto.prng.SP800SecureRandomBuilder.personalizationString` @AccessFlag PRIVATE;
  `java.security.SecureRandom` `org.spongycastle.crypto.prng.SP800SecureRandomBuilder.random` @AccessFlag PRIVATE_FINAL;
  `int` `org.spongycastle.crypto.prng.SP800SecureRandomBuilder.securityStrength` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.crypto.prng.SP800SecureRandomBuilder` v2 @kind this) @signature `Lorg/spongycastle/crypto/prng/SP800SecureRandomBuilder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.prng.SP800SecureRandomBuilder` v1 @kind this, `java.security.SecureRandom` v2 @kind object, `boolean` v3 ) @signature `Lorg/spongycastle/crypto/prng/SP800SecureRandomBuilder;.<init>:(Ljava/security/SecureRandom;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.prng.SP800SecureRandomBuilder` v1 @kind this, `org.spongycastle.crypto.prng.EntropySourceProvider` v2 @kind object) @signature `Lorg/spongycastle/crypto/prng/SP800SecureRandomBuilder;.<init>:(Lorg/spongycastle/crypto/prng/EntropySourceProvider;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.spongycastle.crypto.prng.SP800SecureRandom` `buildCTR`(`org.spongycastle.crypto.prng.SP800SecureRandomBuilder` v10 @kind this, `org.spongycastle.crypto.BlockCipher` v11 @kind object, `int` v12 , `byte`[] v13 @kind object, `boolean` v14 ) @signature `Lorg/spongycastle/crypto/prng/SP800SecureRandomBuilder;.buildCTR:(Lorg/spongycastle/crypto/BlockCipher;I[BZ)Lorg/spongycastle/crypto/prng/SP800SecureRandom;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.prng.SP800SecureRandom` `buildDualEC`(`org.spongycastle.crypto.prng.SP800SecureRandomBuilder` v6 @kind this, `org.spongycastle.crypto.Digest` v7 @kind object, `byte`[] v8 @kind object, `boolean` v9 ) @signature `Lorg/spongycastle/crypto/prng/SP800SecureRandomBuilder;.buildDualEC:(Lorg/spongycastle/crypto/Digest;[BZ)Lorg/spongycastle/crypto/prng/SP800SecureRandom;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.prng.SP800SecureRandom` `buildDualEC`(`org.spongycastle.crypto.prng.SP800SecureRandomBuilder` v10 @kind this, `org.spongycastle.crypto.prng.drbg.DualECPoints`[] v11 @kind object, `org.spongycastle.crypto.Digest` v12 @kind object, `byte`[] v13 @kind object, `boolean` v14 ) @signature `Lorg/spongycastle/crypto/prng/SP800SecureRandomBuilder;.buildDualEC:([Lorg/spongycastle/crypto/prng/drbg/DualECPoints;Lorg/spongycastle/crypto/Digest;[BZ)Lorg/spongycastle/crypto/prng/SP800SecureRandom;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.prng.SP800SecureRandom` `buildHMAC`(`org.spongycastle.crypto.prng.SP800SecureRandomBuilder` v6 @kind this, `org.spongycastle.crypto.Mac` v7 @kind object, `byte`[] v8 @kind object, `boolean` v9 ) @signature `Lorg/spongycastle/crypto/prng/SP800SecureRandomBuilder;.buildHMAC:(Lorg/spongycastle/crypto/Mac;[BZ)Lorg/spongycastle/crypto/prng/SP800SecureRandom;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.prng.SP800SecureRandom` `buildHash`(`org.spongycastle.crypto.prng.SP800SecureRandomBuilder` v6 @kind this, `org.spongycastle.crypto.Digest` v7 @kind object, `byte`[] v8 @kind object, `boolean` v9 ) @signature `Lorg/spongycastle/crypto/prng/SP800SecureRandomBuilder;.buildHash:(Lorg/spongycastle/crypto/Digest;[BZ)Lorg/spongycastle/crypto/prng/SP800SecureRandom;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.prng.SP800SecureRandomBuilder` `setEntropyBitsRequired`(`org.spongycastle.crypto.prng.SP800SecureRandomBuilder` v0 @kind this, `int` v1 ) @signature `Lorg/spongycastle/crypto/prng/SP800SecureRandomBuilder;.setEntropyBitsRequired:(I)Lorg/spongycastle/crypto/prng/SP800SecureRandomBuilder;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.prng.SP800SecureRandomBuilder` `setPersonalizationString`(`org.spongycastle.crypto.prng.SP800SecureRandomBuilder` v0 @kind this, `byte`[] v1 @kind object) @signature `Lorg/spongycastle/crypto/prng/SP800SecureRandomBuilder;.setPersonalizationString:([B)Lorg/spongycastle/crypto/prng/SP800SecureRandomBuilder;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.prng.SP800SecureRandomBuilder` `setSecurityStrength`(`org.spongycastle.crypto.prng.SP800SecureRandomBuilder` v0 @kind this, `int` v1 ) @signature `Lorg/spongycastle/crypto/prng/SP800SecureRandomBuilder;.setSecurityStrength:(I)Lorg/spongycastle/crypto/prng/SP800SecureRandomBuilder;` @AccessFlag PUBLIC {

  # return;
}
