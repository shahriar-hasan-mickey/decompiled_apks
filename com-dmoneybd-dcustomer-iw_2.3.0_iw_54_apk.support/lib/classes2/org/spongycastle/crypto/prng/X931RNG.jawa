record `org.spongycastle.crypto.prng.X931RNG` @kind class @AccessFlag PUBLIC {
  `byte`[] `org.spongycastle.crypto.prng.X931RNG.DT` @AccessFlag PRIVATE_FINAL;
  `byte`[] `org.spongycastle.crypto.prng.X931RNG.I` @AccessFlag PRIVATE_FINAL;
  `byte`[] `org.spongycastle.crypto.prng.X931RNG.R` @AccessFlag PRIVATE_FINAL;
  `byte`[] `org.spongycastle.crypto.prng.X931RNG.V` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.BlockCipher` `org.spongycastle.crypto.prng.X931RNG.engine` @AccessFlag PRIVATE_FINAL;
  `org.spongycastle.crypto.prng.EntropySource` `org.spongycastle.crypto.prng.X931RNG.entropySource` @AccessFlag PRIVATE_FINAL;
  `long` `org.spongycastle.crypto.prng.X931RNG.reseedCounter` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.prng.X931RNG.BLOCK128_MAX_BITS_REQUEST` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.spongycastle.crypto.prng.X931RNG.BLOCK128_RESEED_MAX` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.prng.X931RNG.BLOCK64_MAX_BITS_REQUEST` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.spongycastle.crypto.prng.X931RNG.BLOCK64_RESEED_MAX` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.crypto.prng.X931RNG` v2 @kind this, `org.spongycastle.crypto.BlockCipher` v3 @kind object, `byte`[] v4 @kind object, `org.spongycastle.crypto.prng.EntropySource` v5 @kind object) @signature `Lorg/spongycastle/crypto/prng/X931RNG;.<init>:(Lorg/spongycastle/crypto/BlockCipher;[BLorg/spongycastle/crypto/prng/EntropySource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `increment`(`org.spongycastle.crypto.prng.X931RNG` v2 @kind this, `byte`[] v3 @kind object) @signature `Lorg/spongycastle/crypto/prng/X931RNG;.increment:([B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `isTooLarge`(`byte`[] v0 @kind object, `int` v1 ) @signature `Lorg/spongycastle/crypto/prng/X931RNG;.isTooLarge:([BI)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `process`(`org.spongycastle.crypto.prng.X931RNG` v4 @kind this, `byte`[] v5 @kind object, `byte`[] v6 @kind object, `byte`[] v7 @kind object) @signature `Lorg/spongycastle/crypto/prng/X931RNG;.process:([B[B[B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `a`(`org.spongycastle.crypto.prng.X931RNG` v6 @kind this, `byte`[] v7 @kind object, `boolean` v8 ) @signature `Lorg/spongycastle/crypto/prng/X931RNG;.a:([BZ)I` @AccessFlag  {

  # return;
}
procedure `org.spongycastle.crypto.prng.EntropySource` `b`(`org.spongycastle.crypto.prng.X931RNG` v1 @kind this) @signature `Lorg/spongycastle/crypto/prng/X931RNG;.b:()Lorg/spongycastle/crypto/prng/EntropySource;` @AccessFlag  {

  # return;
}
procedure `void` `c`(`org.spongycastle.crypto.prng.X931RNG` v2 @kind this) @signature `Lorg/spongycastle/crypto/prng/X931RNG;.c:()V` @AccessFlag  {

  # return;
}
