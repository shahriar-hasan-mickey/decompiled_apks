record `org.spongycastle.crypto.prng.SP800SecureRandomBuilder$ConfigurableDualECDRBGProvider` @kind class @AccessFlag  extends `org.spongycastle.crypto.prng.DRBGProvider` @kind interface {
  `org.spongycastle.crypto.Digest` `org.spongycastle.crypto.prng.SP800SecureRandomBuilder$ConfigurableDualECDRBGProvider.digest` @AccessFlag PRIVATE_FINAL;
  `byte`[] `org.spongycastle.crypto.prng.SP800SecureRandomBuilder$ConfigurableDualECDRBGProvider.nonce` @AccessFlag PRIVATE_FINAL;
  `byte`[] `org.spongycastle.crypto.prng.SP800SecureRandomBuilder$ConfigurableDualECDRBGProvider.personalizationString` @AccessFlag PRIVATE_FINAL;
  `org.spongycastle.crypto.prng.drbg.DualECPoints`[] `org.spongycastle.crypto.prng.SP800SecureRandomBuilder$ConfigurableDualECDRBGProvider.pointSet` @AccessFlag PRIVATE_FINAL;
  `int` `org.spongycastle.crypto.prng.SP800SecureRandomBuilder$ConfigurableDualECDRBGProvider.securityStrength` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.spongycastle.crypto.prng.SP800SecureRandomBuilder$ConfigurableDualECDRBGProvider` v3 @kind this, `org.spongycastle.crypto.prng.drbg.DualECPoints`[] v4 @kind object, `org.spongycastle.crypto.Digest` v5 @kind object, `byte`[] v6 @kind object, `byte`[] v7 @kind object, `int` v8 ) @signature `Lorg/spongycastle/crypto/prng/SP800SecureRandomBuilder$ConfigurableDualECDRBGProvider;.<init>:([Lorg/spongycastle/crypto/prng/drbg/DualECPoints;Lorg/spongycastle/crypto/Digest;[B[BI)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.spongycastle.crypto.prng.drbg.SP80090DRBG` `get`(`org.spongycastle.crypto.prng.SP800SecureRandomBuilder$ConfigurableDualECDRBGProvider` v8 @kind this, `org.spongycastle.crypto.prng.EntropySource` v9 @kind object) @signature `Lorg/spongycastle/crypto/prng/SP800SecureRandomBuilder$ConfigurableDualECDRBGProvider;.get:(Lorg/spongycastle/crypto/prng/EntropySource;)Lorg/spongycastle/crypto/prng/drbg/SP80090DRBG;` @AccessFlag PUBLIC {

  # return;
}
