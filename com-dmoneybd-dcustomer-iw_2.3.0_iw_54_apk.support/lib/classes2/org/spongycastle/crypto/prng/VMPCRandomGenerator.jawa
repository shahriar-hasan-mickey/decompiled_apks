record `org.spongycastle.crypto.prng.VMPCRandomGenerator` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.prng.RandomGenerator` @kind interface {
  `byte`[] `org.spongycastle.crypto.prng.VMPCRandomGenerator.P` @AccessFlag PRIVATE;
  `byte` `org.spongycastle.crypto.prng.VMPCRandomGenerator.n` @AccessFlag PRIVATE;
  `byte` `org.spongycastle.crypto.prng.VMPCRandomGenerator.s` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.crypto.prng.VMPCRandomGenerator` v1 @kind this) @signature `Lorg/spongycastle/crypto/prng/VMPCRandomGenerator;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `addSeedMaterial`(`org.spongycastle.crypto.prng.VMPCRandomGenerator` v0 @kind this, `long` v1 ) @signature `Lorg/spongycastle/crypto/prng/VMPCRandomGenerator;.addSeedMaterial:(J)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `addSeedMaterial`(`org.spongycastle.crypto.prng.VMPCRandomGenerator` v7 @kind this, `byte`[] v8 @kind object) @signature `Lorg/spongycastle/crypto/prng/VMPCRandomGenerator;.addSeedMaterial:([B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `nextBytes`(`org.spongycastle.crypto.prng.VMPCRandomGenerator` v2 @kind this, `byte`[] v3 @kind object) @signature `Lorg/spongycastle/crypto/prng/VMPCRandomGenerator;.nextBytes:([B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `nextBytes`(`org.spongycastle.crypto.prng.VMPCRandomGenerator` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lorg/spongycastle/crypto/prng/VMPCRandomGenerator;.nextBytes:([BII)V` @AccessFlag PUBLIC {

  # return;
}
