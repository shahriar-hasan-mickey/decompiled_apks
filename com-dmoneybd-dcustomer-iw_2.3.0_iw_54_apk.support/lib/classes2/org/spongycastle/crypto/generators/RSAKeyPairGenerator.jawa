record `org.spongycastle.crypto.generators.RSAKeyPairGenerator` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.AsymmetricCipherKeyPairGenerator` @kind interface {
  `int` `org.spongycastle.crypto.generators.RSAKeyPairGenerator.iterations` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.params.RSAKeyGenerationParameters` `org.spongycastle.crypto.generators.RSAKeyPairGenerator.param` @AccessFlag PRIVATE;
}
global `java.math.BigInteger` `@@org.spongycastle.crypto.generators.RSAKeyPairGenerator.ONE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/generators/RSAKeyPairGenerator;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.generators.RSAKeyPairGenerator` v0 @kind this) @signature `Lorg/spongycastle/crypto/generators/RSAKeyPairGenerator;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `getNumberOfIterations`(`int` v4 , `int` v5 ) @signature `Lorg/spongycastle/crypto/generators/RSAKeyPairGenerator;.getNumberOfIterations:(II)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.math.BigInteger` `chooseRandomPrime`(`org.spongycastle.crypto.generators.RSAKeyPairGenerator` v4 @kind this, `int` v5 , `java.math.BigInteger` v6 @kind object, `java.math.BigInteger` v7 @kind object) @signature `Lorg/spongycastle/crypto/generators/RSAKeyPairGenerator;.chooseRandomPrime:(ILjava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PROTECTED {

  # return;
}
procedure `org.spongycastle.crypto.AsymmetricCipherKeyPair` `generateKeyPair`(`org.spongycastle.crypto.generators.RSAKeyPairGenerator` v24 @kind this) @signature `Lorg/spongycastle/crypto/generators/RSAKeyPairGenerator;.generateKeyPair:()Lorg/spongycastle/crypto/AsymmetricCipherKeyPair;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.generators.RSAKeyPairGenerator` v1 @kind this, `org.spongycastle.crypto.KeyGenerationParameters` v2 @kind object) @signature `Lorg/spongycastle/crypto/generators/RSAKeyPairGenerator;.init:(Lorg/spongycastle/crypto/KeyGenerationParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isProbablePrime`(`org.spongycastle.crypto.generators.RSAKeyPairGenerator` v2 @kind this, `java.math.BigInteger` v3 @kind object) @signature `Lorg/spongycastle/crypto/generators/RSAKeyPairGenerator;.isProbablePrime:(Ljava/math/BigInteger;)Z` @AccessFlag PROTECTED {

  # return;
}
