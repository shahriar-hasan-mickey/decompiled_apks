record `org.spongycastle.crypto.generators.OpenBSDBCrypt` @kind class @AccessFlag PUBLIC {
}
global `byte`[] `@@org.spongycastle.crypto.generators.OpenBSDBCrypt.decodingTable` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@org.spongycastle.crypto.generators.OpenBSDBCrypt.encodingTable` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@org.spongycastle.crypto.generators.OpenBSDBCrypt.version` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/generators/OpenBSDBCrypt;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.generators.OpenBSDBCrypt` v0 @kind this) @signature `Lorg/spongycastle/crypto/generators/OpenBSDBCrypt;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `checkPassword`(`java.lang.String` v5 @kind object, `char`[] v6 @kind object) @signature `Lorg/spongycastle/crypto/generators/OpenBSDBCrypt;.checkPassword:(Ljava/lang/String;[C)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.String` `createBcryptString`(`byte`[] v4 @kind object, `byte`[] v5 @kind object, `int` v6 ) @signature `Lorg/spongycastle/crypto/generators/OpenBSDBCrypt;.createBcryptString:([B[BI)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `byte`[] `decodeSaltString`(`java.lang.String` v10 @kind object) @signature `Lorg/spongycastle/crypto/generators/OpenBSDBCrypt;.decodeSaltString:(Ljava/lang/String;)[B` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.String` `encodeData`(`byte`[] v11 @kind object) @signature `Lorg/spongycastle/crypto/generators/OpenBSDBCrypt;.encodeData:([B)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.String` `generate`(`char`[] v4 @kind object, `byte`[] v5 @kind object, `int` v6 ) @signature `Lorg/spongycastle/crypto/generators/OpenBSDBCrypt;.generate:([C[BI)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {

  # return;
}
