record `org.spongycastle.crypto.generators.BCrypt` @kind class @AccessFlag PUBLIC_FINAL {
  `int`[] `org.spongycastle.crypto.generators.BCrypt.P` @AccessFlag PRIVATE_FINAL;
  `int`[] `org.spongycastle.crypto.generators.BCrypt.S` @AccessFlag PRIVATE_FINAL;
}
global `int`[] `@@org.spongycastle.crypto.generators.BCrypt.KP` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.generators.BCrypt.KS0` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.generators.BCrypt.KS1` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.generators.BCrypt.KS2` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.generators.BCrypt.KS3` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.generators.BCrypt.MAGIC_STRING` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.generators.BCrypt.P_SZ` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.generators.BCrypt.ROUNDS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.generators.BCrypt.SBOX_SK` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.generators.BCrypt.SBOX_SK2` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.generators.BCrypt.SBOX_SK3` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/generators/BCrypt;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.generators.BCrypt` v1 @kind this) @signature `Lorg/spongycastle/crypto/generators/BCrypt;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `Bits32ToBytes`(`org.spongycastle.crypto.generators.BCrypt` v2 @kind this, `int` v3 , `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/crypto/generators/BCrypt;.Bits32ToBytes:(I[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `BytesTo32bits`(`org.spongycastle.crypto.generators.BCrypt` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/crypto/generators/BCrypt;.BytesTo32bits:([BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `F`(`org.spongycastle.crypto.generators.BCrypt` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/crypto/generators/BCrypt;.F:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `cyclicXorKey`(`org.spongycastle.crypto.generators.BCrypt` v7 @kind this, `byte`[] v8 @kind object) @signature `Lorg/spongycastle/crypto/generators/BCrypt;.cyclicXorKey:([B)V` @AccessFlag PRIVATE_FINAL {

  # return;
}
procedure `byte`[] `deriveRawKey`(`org.spongycastle.crypto.generators.BCrypt` v8 @kind this, `int` v9 , `byte`[] v10 @kind object, `byte`[] v11 @kind object) @signature `Lorg/spongycastle/crypto/generators/BCrypt;.deriveRawKey:(I[B[B)[B` @AccessFlag PRIVATE_FINAL {

  # return;
}
procedure `byte`[] `encryptMagicString`(`org.spongycastle.crypto.generators.BCrypt` v13 @kind this) @signature `Lorg/spongycastle/crypto/generators/BCrypt;.encryptMagicString:()[B` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `generate`(`byte`[] v2 @kind object, `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/crypto/generators/BCrypt;.generate:([B[BI)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `initState`(`org.spongycastle.crypto.generators.BCrypt` v5 @kind this) @signature `Lorg/spongycastle/crypto/generators/BCrypt;.initState:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `processTable`(`org.spongycastle.crypto.generators.BCrypt` v8 @kind this, `int` v9 , `int` v10 , `int`[] v11 @kind object) @signature `Lorg/spongycastle/crypto/generators/BCrypt;.processTable:(II[I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `processTableWithSalt`(`org.spongycastle.crypto.generators.BCrypt` v11 @kind this, `int`[] v12 @kind object, `int`[] v13 @kind object, `int` v14 , `int` v15 ) @signature `Lorg/spongycastle/crypto/generators/BCrypt;.processTableWithSalt:([I[III)V` @AccessFlag PRIVATE {

  # return;
}
