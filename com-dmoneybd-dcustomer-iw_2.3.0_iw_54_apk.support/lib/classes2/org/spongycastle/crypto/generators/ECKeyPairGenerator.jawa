record `org.spongycastle.crypto.generators.ECKeyPairGenerator` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.AsymmetricCipherKeyPairGenerator` @kind interface, `org.spongycastle.math.ec.ECConstants` @kind interface {
  `org.spongycastle.crypto.params.ECDomainParameters` `org.spongycastle.crypto.generators.ECKeyPairGenerator.a` @AccessFlag ;
  `java.security.SecureRandom` `org.spongycastle.crypto.generators.ECKeyPairGenerator.b` @AccessFlag ;
}
procedure `void` `<init>`(`org.spongycastle.crypto.generators.ECKeyPairGenerator` v0 @kind this) @signature `Lorg/spongycastle/crypto/generators/ECKeyPairGenerator;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.spongycastle.math.ec.ECMultiplier` `createBasePointMultiplier`(`org.spongycastle.crypto.generators.ECKeyPairGenerator` v1 @kind this) @signature `Lorg/spongycastle/crypto/generators/ECKeyPairGenerator;.createBasePointMultiplier:()Lorg/spongycastle/math/ec/ECMultiplier;` @AccessFlag PROTECTED {

  # return;
}
procedure `org.spongycastle.crypto.AsymmetricCipherKeyPair` `generateKeyPair`(`org.spongycastle.crypto.generators.ECKeyPairGenerator` v5 @kind this) @signature `Lorg/spongycastle/crypto/generators/ECKeyPairGenerator;.generateKeyPair:()Lorg/spongycastle/crypto/AsymmetricCipherKeyPair;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.generators.ECKeyPairGenerator` v1 @kind this, `org.spongycastle.crypto.KeyGenerationParameters` v2 @kind object) @signature `Lorg/spongycastle/crypto/generators/ECKeyPairGenerator;.init:(Lorg/spongycastle/crypto/KeyGenerationParameters;)V` @AccessFlag PUBLIC {

  # return;
}
