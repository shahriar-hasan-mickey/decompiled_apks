record `org.spongycastle.crypto.engines.BlowfishEngine` @kind class @AccessFlag PUBLIC_FINAL extends `org.spongycastle.crypto.BlockCipher` @kind interface {
  `int`[] `org.spongycastle.crypto.engines.BlowfishEngine.P` @AccessFlag PRIVATE_FINAL;
  `int`[] `org.spongycastle.crypto.engines.BlowfishEngine.S0` @AccessFlag PRIVATE_FINAL;
  `int`[] `org.spongycastle.crypto.engines.BlowfishEngine.S1` @AccessFlag PRIVATE_FINAL;
  `int`[] `org.spongycastle.crypto.engines.BlowfishEngine.S2` @AccessFlag PRIVATE_FINAL;
  `int`[] `org.spongycastle.crypto.engines.BlowfishEngine.S3` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.spongycastle.crypto.engines.BlowfishEngine.encrypting` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.engines.BlowfishEngine.workingKey` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.engines.BlowfishEngine.BLOCK_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.BlowfishEngine.KP` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.BlowfishEngine.KS0` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.BlowfishEngine.KS1` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.BlowfishEngine.KS2` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.BlowfishEngine.KS3` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.BlowfishEngine.P_SZ` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.BlowfishEngine.ROUNDS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.BlowfishEngine.SBOX_SK` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/engines/BlowfishEngine;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.engines.BlowfishEngine` v2 @kind this) @signature `Lorg/spongycastle/crypto/engines/BlowfishEngine;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `Bits32ToBytes`(`org.spongycastle.crypto.engines.BlowfishEngine` v2 @kind this, `int` v3 , `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/crypto/engines/BlowfishEngine;.Bits32ToBytes:(I[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `BytesTo32bits`(`org.spongycastle.crypto.engines.BlowfishEngine` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/crypto/engines/BlowfishEngine;.BytesTo32bits:([BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `F`(`org.spongycastle.crypto.engines.BlowfishEngine` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/crypto/engines/BlowfishEngine;.F:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `decryptBlock`(`org.spongycastle.crypto.engines.BlowfishEngine` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `byte`[] v7 @kind object, `int` v8 ) @signature `Lorg/spongycastle/crypto/engines/BlowfishEngine;.decryptBlock:([BI[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `encryptBlock`(`org.spongycastle.crypto.engines.BlowfishEngine` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `byte`[] v7 @kind object, `int` v8 ) @signature `Lorg/spongycastle/crypto/engines/BlowfishEngine;.encryptBlock:([BI[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `processTable`(`org.spongycastle.crypto.engines.BlowfishEngine` v8 @kind this, `int` v9 , `int` v10 , `int`[] v11 @kind object) @signature `Lorg/spongycastle/crypto/engines/BlowfishEngine;.processTable:(II[I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `setKey`(`org.spongycastle.crypto.engines.BlowfishEngine` v9 @kind this, `byte`[] v10 @kind object) @signature `Lorg/spongycastle/crypto/engines/BlowfishEngine;.setKey:([B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.engines.BlowfishEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/BlowfishEngine;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.engines.BlowfishEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/BlowfishEngine;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.engines.BlowfishEngine` v2 @kind this, `boolean` v3 , `org.spongycastle.crypto.CipherParameters` v4 @kind object) @signature `Lorg/spongycastle/crypto/engines/BlowfishEngine;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.spongycastle.crypto.engines.BlowfishEngine` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `byte`[] v5 @kind object, `int` v6 ) @signature `Lorg/spongycastle/crypto/engines/BlowfishEngine;.processBlock:([BI[BI)I` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.engines.BlowfishEngine` v0 @kind this) @signature `Lorg/spongycastle/crypto/engines/BlowfishEngine;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
