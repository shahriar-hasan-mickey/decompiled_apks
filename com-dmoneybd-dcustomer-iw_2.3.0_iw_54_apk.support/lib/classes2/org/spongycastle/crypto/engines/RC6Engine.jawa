record `org.spongycastle.crypto.engines.RC6Engine` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.BlockCipher` @kind interface {
  `int`[] `org.spongycastle.crypto.engines.RC6Engine._S` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.engines.RC6Engine.forEncryption` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.engines.RC6Engine.LGW` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.RC6Engine.P32` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.RC6Engine.Q32` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.RC6Engine._noRounds` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.RC6Engine.bytesPerWord` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.RC6Engine.wordSize` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.crypto.engines.RC6Engine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/RC6Engine;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `bytesToWord`(`org.spongycastle.crypto.engines.RC6Engine` v3 @kind this, `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/crypto/engines/RC6Engine;.bytesToWord:([BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `decryptBlock`(`org.spongycastle.crypto.engines.RC6Engine` v9 @kind this, `byte`[] v10 @kind object, `int` v11 , `byte`[] v12 @kind object, `int` v13 ) @signature `Lorg/spongycastle/crypto/engines/RC6Engine;.decryptBlock:([BI[BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `encryptBlock`(`org.spongycastle.crypto.engines.RC6Engine` v9 @kind this, `byte`[] v10 @kind object, `int` v11 , `byte`[] v12 @kind object, `int` v13 ) @signature `Lorg/spongycastle/crypto/engines/RC6Engine;.encryptBlock:([BI[BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `rotateLeft`(`org.spongycastle.crypto.engines.RC6Engine` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/spongycastle/crypto/engines/RC6Engine;.rotateLeft:(II)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `rotateRight`(`org.spongycastle.crypto.engines.RC6Engine` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/spongycastle/crypto/engines/RC6Engine;.rotateRight:(II)I` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `setKey`(`org.spongycastle.crypto.engines.RC6Engine` v11 @kind this, `byte`[] v12 @kind object) @signature `Lorg/spongycastle/crypto/engines/RC6Engine;.setKey:([B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `wordToBytes`(`org.spongycastle.crypto.engines.RC6Engine` v3 @kind this, `int` v4 , `byte`[] v5 @kind object, `int` v6 ) @signature `Lorg/spongycastle/crypto/engines/RC6Engine;.wordToBytes:(I[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.engines.RC6Engine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/RC6Engine;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.engines.RC6Engine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/RC6Engine;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.engines.RC6Engine` v2 @kind this, `boolean` v3 , `org.spongycastle.crypto.CipherParameters` v4 @kind object) @signature `Lorg/spongycastle/crypto/engines/RC6Engine;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.spongycastle.crypto.engines.RC6Engine` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/crypto/engines/RC6Engine;.processBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.engines.RC6Engine` v0 @kind this) @signature `Lorg/spongycastle/crypto/engines/RC6Engine;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
