record `org.spongycastle.crypto.engines.SEEDEngine` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.BlockCipher` @kind interface {
  `int` `org.spongycastle.crypto.engines.SEEDEngine.BLOCK_SIZE` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.spongycastle.crypto.engines.SEEDEngine.forEncryption` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.crypto.engines.SEEDEngine.wKey` @AccessFlag PRIVATE;
}
global `int`[] `@@org.spongycastle.crypto.engines.SEEDEngine.KC` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.SEEDEngine.SS0` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.SEEDEngine.SS1` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.SEEDEngine.SS2` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.SEEDEngine.SS3` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.engines.SEEDEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `long` `F`(`org.spongycastle.crypto.engines.SEEDEngine` v3 @kind this, `int` v4 , `int` v5 , `long` v6 ) @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.F:(IIJ)J` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `G`(`org.spongycastle.crypto.engines.SEEDEngine` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.G:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `long` `bytesToLong`(`org.spongycastle.crypto.engines.SEEDEngine` v5 @kind this, `byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.bytesToLong:([BI)J` @AccessFlag PRIVATE {

  # return;
}
procedure `int`[] `createWorkingKey`(`org.spongycastle.crypto.engines.SEEDEngine` v13 @kind this, `byte`[] v14 @kind object) @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.createWorkingKey:([B)[I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `extractW0`(`org.spongycastle.crypto.engines.SEEDEngine` v1 @kind this, `long` v2 ) @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.extractW0:(J)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `extractW1`(`org.spongycastle.crypto.engines.SEEDEngine` v0 @kind this, `long` v1 ) @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.extractW1:(J)I` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `longToBytes`(`org.spongycastle.crypto.engines.SEEDEngine` v5 @kind this, `byte`[] v6 @kind object, `int` v7 , `long` v8 ) @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.longToBytes:([BIJ)V` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `phaseCalc1`(`org.spongycastle.crypto.engines.SEEDEngine` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.phaseCalc1:(IIII)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `phaseCalc2`(`org.spongycastle.crypto.engines.SEEDEngine` v1 @kind this, `int` v2 , `int` v3 , `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.phaseCalc2:(IIII)I` @AccessFlag PRIVATE {

  # return;
}
procedure `long` `rotateLeft8`(`org.spongycastle.crypto.engines.SEEDEngine` v3 @kind this, `long` v4 ) @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.rotateLeft8:(J)J` @AccessFlag PRIVATE {

  # return;
}
procedure `long` `rotateRight8`(`org.spongycastle.crypto.engines.SEEDEngine` v3 @kind this, `long` v4 ) @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.rotateRight8:(J)J` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.engines.SEEDEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.engines.SEEDEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.engines.SEEDEngine` v0 @kind this, `boolean` v1 , `org.spongycastle.crypto.CipherParameters` v2 @kind object) @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.spongycastle.crypto.engines.SEEDEngine` v9 @kind this, `byte`[] v10 @kind object, `int` v11 , `byte`[] v12 @kind object, `int` v13 ) @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.processBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.engines.SEEDEngine` v0 @kind this) @signature `Lorg/spongycastle/crypto/engines/SEEDEngine;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
