record `org.spongycastle.crypto.engines.SerpentEngine` @kind class @AccessFlag PUBLIC_FINAL extends `org.spongycastle.crypto.engines.SerpentEngineBase` @kind class {
}
procedure `void` `<init>`(`org.spongycastle.crypto.engines.SerpentEngine` v0 @kind this) @signature `Lorg/spongycastle/crypto/engines/SerpentEngine;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `decryptBlock`(`org.spongycastle.crypto.engines.SerpentEngine` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/crypto/engines/SerpentEngine;.decryptBlock:([BI[BI)V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `encryptBlock`(`org.spongycastle.crypto.engines.SerpentEngine` v5 @kind this, `byte`[] v6 @kind object, `int` v7 , `byte`[] v8 @kind object, `int` v9 ) @signature `Lorg/spongycastle/crypto/engines/SerpentEngine;.encryptBlock:([BI[BI)V` @AccessFlag PROTECTED {

  # return;
}
procedure `int`[] `makeWorkingKey`(`org.spongycastle.crypto.engines.SerpentEngine` v12 @kind this, `byte`[] v13 @kind object) @signature `Lorg/spongycastle/crypto/engines/SerpentEngine;.makeWorkingKey:([B)[I` @AccessFlag PROTECTED {

  # return;
}
