record `org.spongycastle.crypto.engines.AESEngine` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.BlockCipher` @kind interface {
  `int` `org.spongycastle.crypto.engines.AESEngine.C0` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.engines.AESEngine.C1` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.engines.AESEngine.C2` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.engines.AESEngine.C3` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.engines.AESEngine.ROUNDS` @AccessFlag PRIVATE;
  `int`[][] `org.spongycastle.crypto.engines.AESEngine.WorkingKey` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.engines.AESEngine.forEncryption` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.engines.AESEngine.BLOCK_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@org.spongycastle.crypto.engines.AESEngine.S` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@org.spongycastle.crypto.engines.AESEngine.Si` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.AESEngine.T0` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.AESEngine.Tinv0` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.AESEngine.m1` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.AESEngine.m2` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.AESEngine.m3` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.AESEngine.m4` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.AESEngine.m5` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.AESEngine.rcon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/engines/AESEngine;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.engines.AESEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/AESEngine;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `FFmulX`(`int` v2 ) @signature `Lorg/spongycastle/crypto/engines/AESEngine;.FFmulX:(I)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `FFmulX2`(`int` v2 ) @signature `Lorg/spongycastle/crypto/engines/AESEngine;.FFmulX2:(I)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `decryptBlock`(`org.spongycastle.crypto.engines.AESEngine` v16 @kind this, `int`[][] v17 @kind object) @signature `Lorg/spongycastle/crypto/engines/AESEngine;.decryptBlock:([[I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `encryptBlock`(`org.spongycastle.crypto.engines.AESEngine` v16 @kind this, `int`[][] v17 @kind object) @signature `Lorg/spongycastle/crypto/engines/AESEngine;.encryptBlock:([[I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `int`[][] `generateWorkingKey`(`org.spongycastle.crypto.engines.AESEngine` v20 @kind this, `byte`[] v21 @kind object, `boolean` v22 ) @signature `Lorg/spongycastle/crypto/engines/AESEngine;.generateWorkingKey:([BZ)[[I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `inv_mcol`(`int` v2 ) @signature `Lorg/spongycastle/crypto/engines/AESEngine;.inv_mcol:(I)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `packBlock`(`org.spongycastle.crypto.engines.AESEngine` v3 @kind this, `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/crypto/engines/AESEngine;.packBlock:([BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `shift`(`int` v1 , `int` v2 ) @signature `Lorg/spongycastle/crypto/engines/AESEngine;.shift:(II)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `subWord`(`int` v3 ) @signature `Lorg/spongycastle/crypto/engines/AESEngine;.subWord:(I)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `unpackBlock`(`org.spongycastle.crypto.engines.AESEngine` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/crypto/engines/AESEngine;.unpackBlock:([BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.engines.AESEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/AESEngine;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.engines.AESEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/AESEngine;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.engines.AESEngine` v2 @kind this, `boolean` v3 , `org.spongycastle.crypto.CipherParameters` v4 @kind object) @signature `Lorg/spongycastle/crypto/engines/AESEngine;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.spongycastle.crypto.engines.AESEngine` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `byte`[] v5 @kind object, `int` v6 ) @signature `Lorg/spongycastle/crypto/engines/AESEngine;.processBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.engines.AESEngine` v0 @kind this) @signature `Lorg/spongycastle/crypto/engines/AESEngine;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
