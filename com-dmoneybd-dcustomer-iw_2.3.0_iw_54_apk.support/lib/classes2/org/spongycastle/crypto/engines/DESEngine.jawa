record `org.spongycastle.crypto.engines.DESEngine` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.BlockCipher` @kind interface {
  `int`[] `org.spongycastle.crypto.engines.DESEngine.workingKey` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.engines.DESEngine.BLOCK_SIZE` @AccessFlag PROTECTED_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.DESEngine.SP1` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.DESEngine.SP2` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.DESEngine.SP3` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.DESEngine.SP4` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.DESEngine.SP5` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.DESEngine.SP6` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.DESEngine.SP7` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.DESEngine.SP8` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.DESEngine.bigbyte` @AccessFlag PRIVATE_STATIC_FINAL;
global `short`[] `@@org.spongycastle.crypto.engines.DESEngine.bytebit` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@org.spongycastle.crypto.engines.DESEngine.pc1` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@org.spongycastle.crypto.engines.DESEngine.pc2` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@org.spongycastle.crypto.engines.DESEngine.totrot` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/engines/DESEngine;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.engines.DESEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/DESEngine;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `desFunc`(`org.spongycastle.crypto.engines.DESEngine` v20 @kind this, `int`[] v21 @kind object, `byte`[] v22 @kind object, `int` v23 , `byte`[] v24 @kind object, `int` v25 ) @signature `Lorg/spongycastle/crypto/engines/DESEngine;.desFunc:([I[BI[BI)V` @AccessFlag PROTECTED {

  # return;
}
procedure `int`[] `generateWorkingKey`(`org.spongycastle.crypto.engines.DESEngine` v13 @kind this, `boolean` v14 , `byte`[] v15 @kind object) @signature `Lorg/spongycastle/crypto/engines/DESEngine;.generateWorkingKey:(Z[B)[I` @AccessFlag PROTECTED {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.engines.DESEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/DESEngine;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.engines.DESEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/DESEngine;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.engines.DESEngine` v2 @kind this, `boolean` v3 , `org.spongycastle.crypto.CipherParameters` v4 @kind object) @signature `Lorg/spongycastle/crypto/engines/DESEngine;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.spongycastle.crypto.engines.DESEngine` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `byte`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/crypto/engines/DESEngine;.processBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.engines.DESEngine` v0 @kind this) @signature `Lorg/spongycastle/crypto/engines/DESEngine;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
