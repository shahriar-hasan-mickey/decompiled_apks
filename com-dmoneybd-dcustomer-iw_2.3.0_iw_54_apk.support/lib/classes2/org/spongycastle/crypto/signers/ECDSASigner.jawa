record `org.spongycastle.crypto.signers.ECDSASigner` @kind class @AccessFlag PUBLIC extends `org.spongycastle.math.ec.ECConstants` @kind interface, `org.spongycastle.crypto.DSA` @kind interface {
  `org.spongycastle.crypto.signers.DSAKCalculator` `org.spongycastle.crypto.signers.ECDSASigner.kCalculator` @AccessFlag PRIVATE_FINAL;
  `org.spongycastle.crypto.params.ECKeyParameters` `org.spongycastle.crypto.signers.ECDSASigner.key` @AccessFlag PRIVATE;
  `java.security.SecureRandom` `org.spongycastle.crypto.signers.ECDSASigner.random` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.crypto.signers.ECDSASigner` v1 @kind this) @signature `Lorg/spongycastle/crypto/signers/ECDSASigner;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.signers.ECDSASigner` v0 @kind this, `org.spongycastle.crypto.signers.DSAKCalculator` v1 @kind object) @signature `Lorg/spongycastle/crypto/signers/ECDSASigner;.<init>:(Lorg/spongycastle/crypto/signers/DSAKCalculator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `java.math.BigInteger` `calculateE`(`org.spongycastle.crypto.signers.ECDSASigner` v3 @kind this, `java.math.BigInteger` v4 @kind object, `byte`[] v5 @kind object) @signature `Lorg/spongycastle/crypto/signers/ECDSASigner;.calculateE:(Ljava/math/BigInteger;[B)Ljava/math/BigInteger;` @AccessFlag PROTECTED {

  # return;
}
procedure `org.spongycastle.math.ec.ECMultiplier` `createBasePointMultiplier`(`org.spongycastle.crypto.signers.ECDSASigner` v1 @kind this) @signature `Lorg/spongycastle/crypto/signers/ECDSASigner;.createBasePointMultiplier:()Lorg/spongycastle/math/ec/ECMultiplier;` @AccessFlag PROTECTED {

  # return;
}
procedure `java.math.BigInteger`[] `generateSignature`(`org.spongycastle.crypto.signers.ECDSASigner` v8 @kind this, `byte`[] v9 @kind object) @signature `Lorg/spongycastle/crypto/signers/ECDSASigner;.generateSignature:([B)[Ljava/math/BigInteger;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.math.ec.ECFieldElement` `getDenominator`(`org.spongycastle.crypto.signers.ECDSASigner` v2 @kind this, `int` v3 , `org.spongycastle.math.ec.ECPoint` v4 @kind object) @signature `Lorg/spongycastle/crypto/signers/ECDSASigner;.getDenominator:(ILorg/spongycastle/math/ec/ECPoint;)Lorg/spongycastle/math/ec/ECFieldElement;` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.signers.ECDSASigner` v1 @kind this, `boolean` v2 , `org.spongycastle.crypto.CipherParameters` v3 @kind object) @signature `Lorg/spongycastle/crypto/signers/ECDSASigner;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.security.SecureRandom` `initSecureRandom`(`org.spongycastle.crypto.signers.ECDSASigner` v0 @kind this, `boolean` v1 , `java.security.SecureRandom` v2 @kind object) @signature `Lorg/spongycastle/crypto/signers/ECDSASigner;.initSecureRandom:(ZLjava/security/SecureRandom;)Ljava/security/SecureRandom;` @AccessFlag PROTECTED {

  # return;
}
procedure `boolean` `verifySignature`(`org.spongycastle.crypto.signers.ECDSASigner` v5 @kind this, `byte`[] v6 @kind object, `java.math.BigInteger` v7 @kind object, `java.math.BigInteger` v8 @kind object) @signature `Lorg/spongycastle/crypto/signers/ECDSASigner;.verifySignature:([BLjava/math/BigInteger;Ljava/math/BigInteger;)Z` @AccessFlag PUBLIC {

  # return;
}
