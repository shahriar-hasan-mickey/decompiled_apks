record `org.spongycastle.crypto.examples.DESExample` @kind class @AccessFlag PUBLIC {
  `org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher` `org.spongycastle.crypto.examples.DESExample.cipher` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.examples.DESExample.encrypt` @AccessFlag PRIVATE;
  `java.io.BufferedInputStream` `org.spongycastle.crypto.examples.DESExample.in` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.examples.DESExample.key` @AccessFlag PRIVATE;
  `java.io.BufferedOutputStream` `org.spongycastle.crypto.examples.DESExample.out` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.crypto.examples.DESExample` v1 @kind this) @signature `Lorg/spongycastle/crypto/examples/DESExample;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.examples.DESExample` v6 @kind this, `java.lang.String` v7 @kind object, `java.lang.String` v8 @kind object, `java.lang.String` v9 @kind object, `boolean` v10 ) @signature `Lorg/spongycastle/crypto/examples/DESExample;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `main`(`java.lang.String`[] v6 @kind object) @signature `Lorg/spongycastle/crypto/examples/DESExample;.main:([Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `performDecrypt`(`org.spongycastle.crypto.examples.DESExample` v9 @kind this, `byte`[] v10 @kind object) @signature `Lorg/spongycastle/crypto/examples/DESExample;.performDecrypt:([B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `performEncrypt`(`org.spongycastle.crypto.examples.DESExample` v10 @kind this, `byte`[] v11 @kind object) @signature `Lorg/spongycastle/crypto/examples/DESExample;.performEncrypt:([B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `process`(`org.spongycastle.crypto.examples.DESExample` v3 @kind this) @signature `Lorg/spongycastle/crypto/examples/DESExample;.process:()V` @AccessFlag PRIVATE {

  # return;
}
