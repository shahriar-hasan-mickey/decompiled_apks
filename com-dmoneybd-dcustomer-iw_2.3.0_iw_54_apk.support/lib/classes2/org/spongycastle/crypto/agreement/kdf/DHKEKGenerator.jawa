record `org.spongycastle.crypto.agreement.kdf.DHKEKGenerator` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.DerivationFunction` @kind interface {
  `org.spongycastle.asn1.ASN1ObjectIdentifier` `org.spongycastle.crypto.agreement.kdf.DHKEKGenerator.algorithm` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.Digest` `org.spongycastle.crypto.agreement.kdf.DHKEKGenerator.digest` @AccessFlag PRIVATE_FINAL;
  `int` `org.spongycastle.crypto.agreement.kdf.DHKEKGenerator.keySize` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.agreement.kdf.DHKEKGenerator.partyAInfo` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.agreement.kdf.DHKEKGenerator.z` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.crypto.agreement.kdf.DHKEKGenerator` v0 @kind this, `org.spongycastle.crypto.Digest` v1 @kind object) @signature `Lorg/spongycastle/crypto/agreement/kdf/DHKEKGenerator;.<init>:(Lorg/spongycastle/crypto/Digest;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `generateBytes`(`org.spongycastle.crypto.agreement.kdf.DHKEKGenerator` v16 @kind this, `byte`[] v17 @kind object, `int` v18 , `int` v19 ) @signature `Lorg/spongycastle/crypto/agreement/kdf/DHKEKGenerator;.generateBytes:([BII)I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.Digest` `getDigest`(`org.spongycastle.crypto.agreement.kdf.DHKEKGenerator` v1 @kind this) @signature `Lorg/spongycastle/crypto/agreement/kdf/DHKEKGenerator;.getDigest:()Lorg/spongycastle/crypto/Digest;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.agreement.kdf.DHKEKGenerator` v1 @kind this, `org.spongycastle.crypto.DerivationParameters` v2 @kind object) @signature `Lorg/spongycastle/crypto/agreement/kdf/DHKEKGenerator;.init:(Lorg/spongycastle/crypto/DerivationParameters;)V` @AccessFlag PUBLIC {

  # return;
}
