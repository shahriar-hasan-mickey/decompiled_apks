record `org.spongycastle.crypto.tls.DeferredHash` @kind class @AccessFlag  extends `org.spongycastle.crypto.tls.TlsHandshakeHash` @kind interface {
  `org.spongycastle.crypto.tls.DigestInputBuffer` `org.spongycastle.crypto.tls.DeferredHash.buf` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.tls.TlsContext` `org.spongycastle.crypto.tls.DeferredHash.context` @AccessFlag PROTECTED;
  `java.util.Hashtable` `org.spongycastle.crypto.tls.DeferredHash.hashes` @AccessFlag PRIVATE;
  `java.lang.Short` `org.spongycastle.crypto.tls.DeferredHash.prfHashAlgorithm` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.tls.DeferredHash.BUFFERING_HASH_LIMIT` @AccessFlag PROTECTED_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.crypto.tls.DeferredHash` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/DeferredHash;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.tls.DeferredHash` v1 @kind this, `java.lang.Short` v2 @kind object, `org.spongycastle.crypto.Digest` v3 @kind object) @signature `Lorg/spongycastle/crypto/tls/DeferredHash;.<init>:(Ljava/lang/Short;Lorg/spongycastle/crypto/Digest;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `checkStopBuffering`(`org.spongycastle.crypto.tls.DeferredHash` v3 @kind this) @signature `Lorg/spongycastle/crypto/tls/DeferredHash;.checkStopBuffering:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `checkTrackingHash`(`org.spongycastle.crypto.tls.DeferredHash` v2 @kind this, `java.lang.Short` v3 @kind object) @signature `Lorg/spongycastle/crypto/tls/DeferredHash;.checkTrackingHash:(Ljava/lang/Short;)V` @AccessFlag PROTECTED {

  # return;
}
procedure `int` `doFinal`(`org.spongycastle.crypto.tls.DeferredHash` v0 @kind this, `byte`[] v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/crypto/tls/DeferredHash;.doFinal:([BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.Digest` `forkPRFHash`(`org.spongycastle.crypto.tls.DeferredHash` v3 @kind this) @signature `Lorg/spongycastle/crypto/tls/DeferredHash;.forkPRFHash:()Lorg/spongycastle/crypto/Digest;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.tls.DeferredHash` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/DeferredHash;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getDigestSize`(`org.spongycastle.crypto.tls.DeferredHash` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/DeferredHash;.getDigestSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getFinalHash`(`org.spongycastle.crypto.tls.DeferredHash` v3 @kind this, `short` v4 ) @signature `Lorg/spongycastle/crypto/tls/DeferredHash;.getFinalHash:(S)[B` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.tls.DeferredHash` v0 @kind this, `org.spongycastle.crypto.tls.TlsContext` v1 @kind object) @signature `Lorg/spongycastle/crypto/tls/DeferredHash;.init:(Lorg/spongycastle/crypto/tls/TlsContext;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.tls.TlsHandshakeHash` `notifyPRFDetermined`(`org.spongycastle.crypto.tls.DeferredHash` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/DeferredHash;.notifyPRFDetermined:()Lorg/spongycastle/crypto/tls/TlsHandshakeHash;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.tls.DeferredHash` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/DeferredHash;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `sealHashAlgorithms`(`org.spongycastle.crypto.tls.DeferredHash` v0 @kind this) @signature `Lorg/spongycastle/crypto/tls/DeferredHash;.sealHashAlgorithms:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.tls.TlsHandshakeHash` `stopTracking`(`org.spongycastle.crypto.tls.DeferredHash` v3 @kind this) @signature `Lorg/spongycastle/crypto/tls/DeferredHash;.stopTracking:()Lorg/spongycastle/crypto/tls/TlsHandshakeHash;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `trackHashAlgorithm`(`org.spongycastle.crypto.tls.DeferredHash` v1 @kind this, `short` v2 ) @signature `Lorg/spongycastle/crypto/tls/DeferredHash;.trackHashAlgorithm:(S)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `update`(`org.spongycastle.crypto.tls.DeferredHash` v2 @kind this, `byte` v3 ) @signature `Lorg/spongycastle/crypto/tls/DeferredHash;.update:(B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `update`(`org.spongycastle.crypto.tls.DeferredHash` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/crypto/tls/DeferredHash;.update:([BII)V` @AccessFlag PUBLIC {

  # return;
}
