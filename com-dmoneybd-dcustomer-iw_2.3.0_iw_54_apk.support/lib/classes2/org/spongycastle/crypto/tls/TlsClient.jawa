record `org.spongycastle.crypto.tls.TlsClient` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE extends `org.spongycastle.crypto.tls.TlsPeer` @kind interface {
}
procedure `org.spongycastle.crypto.tls.TlsAuthentication` `getAuthentication`() @signature `Lorg/spongycastle/crypto/tls/TlsClient;.getAuthentication:()Lorg/spongycastle/crypto/tls/TlsAuthentication;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int`[] `getCipherSuites`() @signature `Lorg/spongycastle/crypto/tls/TlsClient;.getCipherSuites:()[I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.Hashtable` `getClientExtensions`() @signature `Lorg/spongycastle/crypto/tls/TlsClient;.getClientExtensions:()Ljava/util/Hashtable;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.spongycastle.crypto.tls.ProtocolVersion` `getClientHelloRecordLayerVersion`() @signature `Lorg/spongycastle/crypto/tls/TlsClient;.getClientHelloRecordLayerVersion:()Lorg/spongycastle/crypto/tls/ProtocolVersion;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.Vector` `getClientSupplementalData`() @signature `Lorg/spongycastle/crypto/tls/TlsClient;.getClientSupplementalData:()Ljava/util/Vector;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.spongycastle.crypto.tls.ProtocolVersion` `getClientVersion`() @signature `Lorg/spongycastle/crypto/tls/TlsClient;.getClientVersion:()Lorg/spongycastle/crypto/tls/ProtocolVersion;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `short`[] `getCompressionMethods`() @signature `Lorg/spongycastle/crypto/tls/TlsClient;.getCompressionMethods:()[S` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.spongycastle.crypto.tls.TlsKeyExchange` `getKeyExchange`() @signature `Lorg/spongycastle/crypto/tls/TlsClient;.getKeyExchange:()Lorg/spongycastle/crypto/tls/TlsKeyExchange;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.spongycastle.crypto.tls.TlsSession` `getSessionToResume`() @signature `Lorg/spongycastle/crypto/tls/TlsClient;.getSessionToResume:()Lorg/spongycastle/crypto/tls/TlsSession;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.tls.TlsClientContext` v0 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsClient;.init:(Lorg/spongycastle/crypto/tls/TlsClientContext;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isFallback`() @signature `Lorg/spongycastle/crypto/tls/TlsClient;.isFallback:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `notifyNewSessionTicket`(`org.spongycastle.crypto.tls.NewSessionTicket` v0 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsClient;.notifyNewSessionTicket:(Lorg/spongycastle/crypto/tls/NewSessionTicket;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `notifySelectedCipherSuite`(`int` v0 ) @signature `Lorg/spongycastle/crypto/tls/TlsClient;.notifySelectedCipherSuite:(I)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `notifySelectedCompressionMethod`(`short` v0 ) @signature `Lorg/spongycastle/crypto/tls/TlsClient;.notifySelectedCompressionMethod:(S)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `notifyServerVersion`(`org.spongycastle.crypto.tls.ProtocolVersion` v0 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsClient;.notifyServerVersion:(Lorg/spongycastle/crypto/tls/ProtocolVersion;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `notifySessionID`(`byte`[] v0 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsClient;.notifySessionID:([B)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `processServerExtensions`(`java.util.Hashtable` v0 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsClient;.processServerExtensions:(Ljava/util/Hashtable;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `processServerSupplementalData`(`java.util.Vector` v0 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsClient;.processServerSupplementalData:(Ljava/util/Vector;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
