record `org.spongycastle.crypto.tls.ByteQueueInputStream` @kind class @AccessFlag PUBLIC extends `java.io.InputStream` @kind class {
  `org.spongycastle.crypto.tls.ByteQueue` `org.spongycastle.crypto.tls.ByteQueueInputStream.buffer` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.crypto.tls.ByteQueueInputStream` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/ByteQueueInputStream;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `addBytes`(`org.spongycastle.crypto.tls.ByteQueueInputStream` v3 @kind this, `byte`[] v4 @kind object) @signature `Lorg/spongycastle/crypto/tls/ByteQueueInputStream;.addBytes:([B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `available`(`org.spongycastle.crypto.tls.ByteQueueInputStream` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/ByteQueueInputStream;.available:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `close`(`org.spongycastle.crypto.tls.ByteQueueInputStream` v0 @kind this) @signature `Lorg/spongycastle/crypto/tls/ByteQueueInputStream;.close:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `peek`(`org.spongycastle.crypto.tls.ByteQueueInputStream` v3 @kind this, `byte`[] v4 @kind object) @signature `Lorg/spongycastle/crypto/tls/ByteQueueInputStream;.peek:([B)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `read`(`org.spongycastle.crypto.tls.ByteQueueInputStream` v3 @kind this) @signature `Lorg/spongycastle/crypto/tls/ByteQueueInputStream;.read:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `read`(`org.spongycastle.crypto.tls.ByteQueueInputStream` v2 @kind this, `byte`[] v3 @kind object) @signature `Lorg/spongycastle/crypto/tls/ByteQueueInputStream;.read:([B)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `read`(`org.spongycastle.crypto.tls.ByteQueueInputStream` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/crypto/tls/ByteQueueInputStream;.read:([BII)I` @AccessFlag PUBLIC {

  # return;
}
procedure `long` `skip`(`org.spongycastle.crypto.tls.ByteQueueInputStream` v0 @kind this, `long` v1 ) @signature `Lorg/spongycastle/crypto/tls/ByteQueueInputStream;.skip:(J)J` @AccessFlag PUBLIC {

  # return;
}
