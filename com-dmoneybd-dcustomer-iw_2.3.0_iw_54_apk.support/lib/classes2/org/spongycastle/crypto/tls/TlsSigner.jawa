record `org.spongycastle.crypto.tls.TlsSigner` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
procedure `org.spongycastle.crypto.Signer` `createSigner`(`org.spongycastle.crypto.params.AsymmetricKeyParameter` v0 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsSigner;.createSigner:(Lorg/spongycastle/crypto/params/AsymmetricKeyParameter;)Lorg/spongycastle/crypto/Signer;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.spongycastle.crypto.Signer` `createSigner`(`org.spongycastle.crypto.tls.SignatureAndHashAlgorithm` v0 @kind object, `org.spongycastle.crypto.params.AsymmetricKeyParameter` v1 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsSigner;.createSigner:(Lorg/spongycastle/crypto/tls/SignatureAndHashAlgorithm;Lorg/spongycastle/crypto/params/AsymmetricKeyParameter;)Lorg/spongycastle/crypto/Signer;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.spongycastle.crypto.Signer` `createVerifyer`(`org.spongycastle.crypto.params.AsymmetricKeyParameter` v0 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsSigner;.createVerifyer:(Lorg/spongycastle/crypto/params/AsymmetricKeyParameter;)Lorg/spongycastle/crypto/Signer;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.spongycastle.crypto.Signer` `createVerifyer`(`org.spongycastle.crypto.tls.SignatureAndHashAlgorithm` v0 @kind object, `org.spongycastle.crypto.params.AsymmetricKeyParameter` v1 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsSigner;.createVerifyer:(Lorg/spongycastle/crypto/tls/SignatureAndHashAlgorithm;Lorg/spongycastle/crypto/params/AsymmetricKeyParameter;)Lorg/spongycastle/crypto/Signer;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `byte`[] `generateRawSignature`(`org.spongycastle.crypto.params.AsymmetricKeyParameter` v0 @kind object, `byte`[] v1 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsSigner;.generateRawSignature:(Lorg/spongycastle/crypto/params/AsymmetricKeyParameter;[B)[B` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `byte`[] `generateRawSignature`(`org.spongycastle.crypto.tls.SignatureAndHashAlgorithm` v0 @kind object, `org.spongycastle.crypto.params.AsymmetricKeyParameter` v1 @kind object, `byte`[] v2 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsSigner;.generateRawSignature:(Lorg/spongycastle/crypto/tls/SignatureAndHashAlgorithm;Lorg/spongycastle/crypto/params/AsymmetricKeyParameter;[B)[B` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.tls.TlsContext` v0 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsSigner;.init:(Lorg/spongycastle/crypto/tls/TlsContext;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isValidPublicKey`(`org.spongycastle.crypto.params.AsymmetricKeyParameter` v0 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsSigner;.isValidPublicKey:(Lorg/spongycastle/crypto/params/AsymmetricKeyParameter;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `verifyRawSignature`(`org.spongycastle.crypto.tls.SignatureAndHashAlgorithm` v0 @kind object, `byte`[] v1 @kind object, `org.spongycastle.crypto.params.AsymmetricKeyParameter` v2 @kind object, `byte`[] v3 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsSigner;.verifyRawSignature:(Lorg/spongycastle/crypto/tls/SignatureAndHashAlgorithm;[BLorg/spongycastle/crypto/params/AsymmetricKeyParameter;[B)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `verifyRawSignature`(`byte`[] v0 @kind object, `org.spongycastle.crypto.params.AsymmetricKeyParameter` v1 @kind object, `byte`[] v2 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsSigner;.verifyRawSignature:([BLorg/spongycastle/crypto/params/AsymmetricKeyParameter;[B)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
