record `org.spongycastle.crypto.tls.TlsProtocol` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `org.spongycastle.crypto.tls.RecordStream` `org.spongycastle.crypto.tls.TlsProtocol.a` @AccessFlag ;
  `org.spongycastle.crypto.tls.ByteQueue` `org.spongycastle.crypto.tls.TlsProtocol.alertQueue` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.tls.TlsProtocol.allowCertificateStatus` @AccessFlag PROTECTED;
  `boolean` `org.spongycastle.crypto.tls.TlsProtocol.appDataReady` @AccessFlag PRIVATE_VOLATILE;
  `org.spongycastle.crypto.tls.ByteQueue` `org.spongycastle.crypto.tls.TlsProtocol.applicationDataQueue` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.tls.TlsProtocol.blocking` @AccessFlag PROTECTED;
  `java.util.Hashtable` `org.spongycastle.crypto.tls.TlsProtocol.clientExtensions` @AccessFlag PROTECTED;
  `boolean` `org.spongycastle.crypto.tls.TlsProtocol.closed` @AccessFlag PRIVATE_VOLATILE;
  `short` `org.spongycastle.crypto.tls.TlsProtocol.connection_state` @AccessFlag PROTECTED;
  `boolean` `org.spongycastle.crypto.tls.TlsProtocol.expectSessionTicket` @AccessFlag PROTECTED;
  `byte`[] `org.spongycastle.crypto.tls.TlsProtocol.expected_verify_data` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.tls.TlsProtocol.failedWithError` @AccessFlag PRIVATE_VOLATILE;
  `org.spongycastle.crypto.tls.ByteQueue` `org.spongycastle.crypto.tls.TlsProtocol.handshakeQueue` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.tls.ByteQueueInputStream` `org.spongycastle.crypto.tls.TlsProtocol.inputBuffers` @AccessFlag PROTECTED;
  `int`[] `org.spongycastle.crypto.tls.TlsProtocol.offeredCipherSuites` @AccessFlag PROTECTED;
  `short`[] `org.spongycastle.crypto.tls.TlsProtocol.offeredCompressionMethods` @AccessFlag PROTECTED;
  `org.spongycastle.crypto.tls.ByteQueueOutputStream` `org.spongycastle.crypto.tls.TlsProtocol.outputBuffer` @AccessFlag PROTECTED;
  `org.spongycastle.crypto.tls.Certificate` `org.spongycastle.crypto.tls.TlsProtocol.peerCertificate` @AccessFlag PROTECTED;
  `boolean` `org.spongycastle.crypto.tls.TlsProtocol.receivedChangeCipherSpec` @AccessFlag PROTECTED;
  `boolean` `org.spongycastle.crypto.tls.TlsProtocol.resumedSession` @AccessFlag PROTECTED;
  `java.security.SecureRandom` `org.spongycastle.crypto.tls.TlsProtocol.secureRandom` @AccessFlag PROTECTED;
  `boolean` `org.spongycastle.crypto.tls.TlsProtocol.secure_renegotiation` @AccessFlag PROTECTED;
  `org.spongycastle.crypto.tls.SecurityParameters` `org.spongycastle.crypto.tls.TlsProtocol.securityParameters` @AccessFlag PROTECTED;
  `java.util.Hashtable` `org.spongycastle.crypto.tls.TlsProtocol.serverExtensions` @AccessFlag PROTECTED;
  `org.spongycastle.crypto.tls.SessionParameters` `org.spongycastle.crypto.tls.TlsProtocol.sessionParameters` @AccessFlag PROTECTED;
  `boolean` `org.spongycastle.crypto.tls.TlsProtocol.splitApplicationDataRecords` @AccessFlag PRIVATE_VOLATILE;
  `org.spongycastle.crypto.tls.TlsInputStream` `org.spongycastle.crypto.tls.TlsProtocol.tlsInputStream` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.tls.TlsOutputStream` `org.spongycastle.crypto.tls.TlsProtocol.tlsOutputStream` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.tls.TlsSession` `org.spongycastle.crypto.tls.TlsProtocol.tlsSession` @AccessFlag PROTECTED;
}
global `short` `@@org.spongycastle.crypto.tls.TlsProtocol.CS_CERTIFICATE_REQUEST` @AccessFlag PROTECTED_STATIC_FINAL;
global `short` `@@org.spongycastle.crypto.tls.TlsProtocol.CS_CERTIFICATE_STATUS` @AccessFlag PROTECTED_STATIC_FINAL;
global `short` `@@org.spongycastle.crypto.tls.TlsProtocol.CS_CERTIFICATE_VERIFY` @AccessFlag PROTECTED_STATIC_FINAL;
global `short` `@@org.spongycastle.crypto.tls.TlsProtocol.CS_CLIENT_CERTIFICATE` @AccessFlag PROTECTED_STATIC_FINAL;
global `short` `@@org.spongycastle.crypto.tls.TlsProtocol.CS_CLIENT_FINISHED` @AccessFlag PROTECTED_STATIC_FINAL;
global `short` `@@org.spongycastle.crypto.tls.TlsProtocol.CS_CLIENT_HELLO` @AccessFlag PROTECTED_STATIC_FINAL;
global `short` `@@org.spongycastle.crypto.tls.TlsProtocol.CS_CLIENT_KEY_EXCHANGE` @AccessFlag PROTECTED_STATIC_FINAL;
global `short` `@@org.spongycastle.crypto.tls.TlsProtocol.CS_CLIENT_SUPPLEMENTAL_DATA` @AccessFlag PROTECTED_STATIC_FINAL;
global `short` `@@org.spongycastle.crypto.tls.TlsProtocol.CS_END` @AccessFlag PROTECTED_STATIC_FINAL;
global `short` `@@org.spongycastle.crypto.tls.TlsProtocol.CS_SERVER_CERTIFICATE` @AccessFlag PROTECTED_STATIC_FINAL;
global `short` `@@org.spongycastle.crypto.tls.TlsProtocol.CS_SERVER_FINISHED` @AccessFlag PROTECTED_STATIC_FINAL;
global `short` `@@org.spongycastle.crypto.tls.TlsProtocol.CS_SERVER_HELLO` @AccessFlag PROTECTED_STATIC_FINAL;
global `short` `@@org.spongycastle.crypto.tls.TlsProtocol.CS_SERVER_HELLO_DONE` @AccessFlag PROTECTED_STATIC_FINAL;
global `short` `@@org.spongycastle.crypto.tls.TlsProtocol.CS_SERVER_KEY_EXCHANGE` @AccessFlag PROTECTED_STATIC_FINAL;
global `short` `@@org.spongycastle.crypto.tls.TlsProtocol.CS_SERVER_SESSION_TICKET` @AccessFlag PROTECTED_STATIC_FINAL;
global `short` `@@org.spongycastle.crypto.tls.TlsProtocol.CS_SERVER_SUPPLEMENTAL_DATA` @AccessFlag PROTECTED_STATIC_FINAL;
global `short` `@@org.spongycastle.crypto.tls.TlsProtocol.CS_START` @AccessFlag PROTECTED_STATIC_FINAL;
global `java.lang.Integer` `@@org.spongycastle.crypto.tls.TlsProtocol.EXT_RenegotiationInfo` @AccessFlag PROTECTED_STATIC_FINAL;
global `java.lang.Integer` `@@org.spongycastle.crypto.tls.TlsProtocol.EXT_SessionTicket` @AccessFlag PROTECTED_STATIC_FINAL;
global `java.lang.String` `@@org.spongycastle.crypto.tls.TlsProtocol.TLS_ERROR_MESSAGE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.tls.TlsProtocol` v3 @kind this, `java.io.InputStream` v4 @kind object, `java.io.OutputStream` v5 @kind object, `java.security.SecureRandom` v6 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.<init>:(Ljava/io/InputStream;Ljava/io/OutputStream;Ljava/security/SecureRandom;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.tls.TlsProtocol` v3 @kind this, `java.security.SecureRandom` v4 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.<init>:(Ljava/security/SecureRandom;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `assertEmpty`(`java.io.ByteArrayInputStream` v1 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.assertEmpty:(Ljava/io/ByteArrayInputStream;)V` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `byte`[] `createRandomBlock`(`boolean` v1 , `org.spongycastle.crypto.prng.RandomGenerator` v2 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.createRandomBlock:(ZLorg/spongycastle/crypto/prng/RandomGenerator;)[B` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `byte`[] `createRenegotiationInfo`(`byte`[] v0 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.createRenegotiationInfo:([B)[B` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `void` `establishMasterSecret`(`org.spongycastle.crypto.tls.TlsContext` v2 @kind object, `org.spongycastle.crypto.tls.TlsKeyExchange` v3 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.establishMasterSecret:(Lorg/spongycastle/crypto/tls/TlsContext;Lorg/spongycastle/crypto/tls/TlsKeyExchange;)V` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `byte`[] `getCurrentPRFHash`(`org.spongycastle.crypto.tls.TlsContext` v1 @kind object, `org.spongycastle.crypto.tls.TlsHandshakeHash` v2 @kind object, `byte`[] v3 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.getCurrentPRFHash:(Lorg/spongycastle/crypto/tls/TlsContext;Lorg/spongycastle/crypto/tls/TlsHandshakeHash;[B)[B` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `int` `getPRFAlgorithm`(`org.spongycastle.crypto.tls.TlsContext` v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.getPRFAlgorithm:(Lorg/spongycastle/crypto/tls/TlsContext;I)I` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `void` `processAlert`(`org.spongycastle.crypto.tls.TlsProtocol` v6 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.processAlert:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `processApplicationData`(`org.spongycastle.crypto.tls.TlsProtocol` v0 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.processApplicationData:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `processChangeCipherSpec`(`org.spongycastle.crypto.tls.TlsProtocol` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.processChangeCipherSpec:([BII)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `processHandshake`(`org.spongycastle.crypto.tls.TlsProtocol` v10 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.processHandshake:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `java.util.Hashtable` `readExtensions`(`java.io.ByteArrayInputStream` v3 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.readExtensions:(Ljava/io/ByteArrayInputStream;)Ljava/util/Hashtable;` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `java.util.Vector` `readSupplementalDataMessage`(`java.io.ByteArrayInputStream` v4 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.readSupplementalDataMessage:(Ljava/io/ByteArrayInputStream;)Ljava/util/Vector;` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `void` `writeExtensions`(`java.io.OutputStream` v4 @kind object, `java.util.Hashtable` v5 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.writeExtensions:(Ljava/io/OutputStream;Ljava/util/Hashtable;)V` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `void` `writeSupplementalData`(`java.io.OutputStream` v4 @kind object, `java.util.Vector` v5 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.writeSupplementalData:(Ljava/io/OutputStream;Ljava/util/Vector;)V` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `org.spongycastle.crypto.tls.AbstractTlsContext` `a`() @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.a:()Lorg/spongycastle/crypto/tls/AbstractTlsContext;` @AccessFlag ABSTRACT {

  # return;
}
procedure `int` `applicationDataAvailable`(`org.spongycastle.crypto.tls.TlsProtocol` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.applicationDataAvailable:()I` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `applyMaxFragmentLengthExtension`(`org.spongycastle.crypto.tls.TlsProtocol` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.applyMaxFragmentLengthExtension:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `blockForHandshake`(`org.spongycastle.crypto.tls.TlsProtocol` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.blockForHandshake:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `checkReceivedChangeCipherSpec`(`org.spongycastle.crypto.tls.TlsProtocol` v1 @kind this, `boolean` v2 ) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.checkReceivedChangeCipherSpec:(Z)V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `cleanupHandshake`(`org.spongycastle.crypto.tls.TlsProtocol` v3 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.cleanupHandshake:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `close`(`org.spongycastle.crypto.tls.TlsProtocol` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.close:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `completeHandshake`(`org.spongycastle.crypto.tls.TlsProtocol` v3 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.completeHandshake:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `byte`[] `createVerifyData`(`org.spongycastle.crypto.tls.TlsProtocol` v3 @kind this, `boolean` v4 ) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.createVerifyData:(Z)[B` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `failWithError`(`org.spongycastle.crypto.tls.TlsProtocol` v2 @kind this, `short` v3 , `short` v4 , `java.lang.String` v5 @kind object, `java.lang.Throwable` v6 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.failWithError:(SSLjava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `flush`(`org.spongycastle.crypto.tls.TlsProtocol` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.flush:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `int` `getAvailableInputBytes`(`org.spongycastle.crypto.tls.TlsProtocol` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.getAvailableInputBytes:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getAvailableOutputBytes`(`org.spongycastle.crypto.tls.TlsProtocol` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.getAvailableOutputBytes:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.tls.TlsContext` `getContext`() @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.getContext:()Lorg/spongycastle/crypto/tls/TlsContext;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.io.InputStream` `getInputStream`(`org.spongycastle.crypto.tls.TlsProtocol` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.getInputStream:()Ljava/io/InputStream;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.io.OutputStream` `getOutputStream`(`org.spongycastle.crypto.tls.TlsProtocol` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.getOutputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.tls.TlsPeer` `getPeer`() @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.getPeer:()Lorg/spongycastle/crypto/tls/TlsPeer;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `handleChangeCipherSpecMessage`(`org.spongycastle.crypto.tls.TlsProtocol` v0 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.handleChangeCipherSpecMessage:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `handleClose`(`org.spongycastle.crypto.tls.TlsProtocol` v3 @kind this, `boolean` v4 ) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.handleClose:(Z)V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `handleHandshakeMessage`(`short` v0 , `byte`[] v1 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.handleHandshakeMessage:(S[B)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `handleWarningMessage`(`org.spongycastle.crypto.tls.TlsProtocol` v0 @kind this, `short` v1 ) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.handleWarningMessage:(S)V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `invalidateSession`(`org.spongycastle.crypto.tls.TlsProtocol` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.invalidateSession:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `boolean` `isClosed`(`org.spongycastle.crypto.tls.TlsProtocol` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.isClosed:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `offerInput`(`org.spongycastle.crypto.tls.TlsProtocol` v2 @kind this, `byte`[] v3 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.offerInput:([B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `offerOutput`(`org.spongycastle.crypto.tls.TlsProtocol` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.offerOutput:([BII)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processFinishedMessage`(`org.spongycastle.crypto.tls.TlsProtocol` v1 @kind this, `java.io.ByteArrayInputStream` v2 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.processFinishedMessage:(Ljava/io/ByteArrayInputStream;)V` @AccessFlag PROTECTED {

  # return;
}
procedure `short` `processMaxFragmentLengthExtension`(`org.spongycastle.crypto.tls.TlsProtocol` v1 @kind this, `java.util.Hashtable` v2 @kind object, `java.util.Hashtable` v3 @kind object, `short` v4 ) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.processMaxFragmentLengthExtension:(Ljava/util/Hashtable;Ljava/util/Hashtable;S)S` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `processRecord`(`org.spongycastle.crypto.tls.TlsProtocol` v1 @kind this, `short` v2 , `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.processRecord:(S[BII)V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `raiseAlert`(`org.spongycastle.crypto.tls.TlsProtocol` v1 @kind this, `short` v2 , `short` v3 , `java.lang.String` v4 @kind object, `java.lang.Throwable` v5 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.raiseAlert:(SSLjava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `raiseWarning`(`org.spongycastle.crypto.tls.TlsProtocol` v2 @kind this, `short` v3 , `java.lang.String` v4 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.raiseWarning:(SLjava/lang/String;)V` @AccessFlag PROTECTED {

  # return;
}
procedure `int` `readApplicationData`(`org.spongycastle.crypto.tls.TlsProtocol` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.readApplicationData:([BII)I` @AccessFlag PROTECTED {

  # return;
}
procedure `int` `readInput`(`org.spongycastle.crypto.tls.TlsProtocol` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.readInput:([BII)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `readOutput`(`org.spongycastle.crypto.tls.TlsProtocol` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.readOutput:([BII)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `refuseRenegotiation`(`org.spongycastle.crypto.tls.TlsProtocol` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.refuseRenegotiation:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `safeReadRecord`(`org.spongycastle.crypto.tls.TlsProtocol` v5 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.safeReadRecord:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `safeWriteRecord`(`org.spongycastle.crypto.tls.TlsProtocol` v4 @kind this, `short` v5 , `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.safeWriteRecord:(S[BII)V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `sendCertificateMessage`(`org.spongycastle.crypto.tls.TlsProtocol` v2 @kind this, `org.spongycastle.crypto.tls.Certificate` v3 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.sendCertificateMessage:(Lorg/spongycastle/crypto/tls/Certificate;)V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `sendChangeCipherSpecMessage`(`org.spongycastle.crypto.tls.TlsProtocol` v4 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.sendChangeCipherSpecMessage:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `sendFinishedMessage`(`org.spongycastle.crypto.tls.TlsProtocol` v4 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.sendFinishedMessage:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `sendSupplementalDataMessage`(`org.spongycastle.crypto.tls.TlsProtocol` v2 @kind this, `java.util.Vector` v3 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.sendSupplementalDataMessage:(Ljava/util/Vector;)V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `writeData`(`org.spongycastle.crypto.tls.TlsProtocol` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.writeData:([BII)V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `writeHandshakeMessage`(`org.spongycastle.crypto.tls.TlsProtocol` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/crypto/tls/TlsProtocol;.writeHandshakeMessage:([BII)V` @AccessFlag PROTECTED {

  # return;
}
