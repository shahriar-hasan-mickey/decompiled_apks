record `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState` @kind class @AccessFlag PUBLIC {
  `org.spongycastle.crypto.tls.TlsClient` `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.a` @AccessFlag ;
  `org.spongycastle.crypto.tls.TlsClientContextImpl` `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.b` @AccessFlag ;
  `org.spongycastle.crypto.tls.TlsSession` `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.c` @AccessFlag ;
  `org.spongycastle.crypto.tls.SessionParameters` `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.d` @AccessFlag ;
  `org.spongycastle.crypto.tls.SessionParameters$Builder` `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.e` @AccessFlag ;
  `int`[] `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.f` @AccessFlag ;
  `short`[] `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.g` @AccessFlag ;
  `java.util.Hashtable` `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.h` @AccessFlag ;
  `java.util.Hashtable` `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.i` @AccessFlag ;
  `byte`[] `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.j` @AccessFlag ;
  `boolean` `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.k` @AccessFlag ;
  `boolean` `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.l` @AccessFlag ;
  `boolean` `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.m` @AccessFlag ;
  `boolean` `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.n` @AccessFlag ;
  `org.spongycastle.crypto.tls.TlsKeyExchange` `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.o` @AccessFlag ;
  `org.spongycastle.crypto.tls.TlsAuthentication` `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.p` @AccessFlag ;
  `org.spongycastle.crypto.tls.CertificateStatus` `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.q` @AccessFlag ;
  `org.spongycastle.crypto.tls.CertificateRequest` `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.r` @AccessFlag ;
  `org.spongycastle.crypto.tls.TlsCredentials` `org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState.s` @AccessFlag ;
}
procedure `void` `<init>`(`org.spongycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/DTLSClientProtocol$ClientHandshakeState;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
