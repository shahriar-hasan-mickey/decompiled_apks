record `org.spongycastle.crypto.tls.DTLSReliableHandshake` @kind class @AccessFlag  {
  `java.util.Hashtable` `org.spongycastle.crypto.tls.DTLSReliableHandshake.currentInboundFlight` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.tls.TlsHandshakeHash` `org.spongycastle.crypto.tls.DTLSReliableHandshake.handshakeHash` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.tls.DTLSReliableHandshake.message_seq` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.tls.DTLSReliableHandshake.next_receive_seq` @AccessFlag PRIVATE;
  `java.util.Vector` `org.spongycastle.crypto.tls.DTLSReliableHandshake.outboundFlight` @AccessFlag PRIVATE;
  `java.util.Hashtable` `org.spongycastle.crypto.tls.DTLSReliableHandshake.previousInboundFlight` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.tls.DTLSRecordLayer` `org.spongycastle.crypto.tls.DTLSReliableHandshake.recordLayer` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.spongycastle.crypto.tls.DTLSReliableHandshake.sending` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.tls.DTLSReliableHandshake.MAX_RECEIVE_AHEAD` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v1 @kind this, `org.spongycastle.crypto.tls.TlsContext` v2 @kind object, `org.spongycastle.crypto.tls.DTLSRecordLayer` v3 @kind object) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.<init>:(Lorg/spongycastle/crypto/tls/TlsContext;Lorg/spongycastle/crypto/tls/DTLSRecordLayer;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `int` `a`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v0 @kind object) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.a:(Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;)I` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.Hashtable` `b`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v0 @kind object) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.b:(Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;)Ljava/util/Hashtable;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `boolean` `c`(`java.util.Hashtable` v0 @kind object) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.c:(Ljava/util/Hashtable;)Z` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `boolean` `checkAll`(`java.util.Hashtable` v1 @kind object) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.checkAll:(Ljava/util/Hashtable;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `checkInboundFlight`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.checkInboundFlight:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `d`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v0 @kind object) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.d:(Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;)V` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `e`(`java.util.Hashtable` v0 @kind object) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.e:(Ljava/util/Hashtable;)V` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `prepareInboundFlight`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.prepareInboundFlight:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `resendOutboundFlight`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.resendOutboundFlight:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `resetAll`(`java.util.Hashtable` v1 @kind object) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.resetAll:(Ljava/util/Hashtable;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `org.spongycastle.crypto.tls.DTLSReliableHandshake$Message` `updateHandshakeMessagesDigest`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v6 @kind this, `org.spongycastle.crypto.tls.DTLSReliableHandshake$Message` v7 @kind object) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.updateHandshakeMessagesDigest:(Lorg/spongycastle/crypto/tls/DTLSReliableHandshake$Message;)Lorg/spongycastle/crypto/tls/DTLSReliableHandshake$Message;` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `writeHandshakeFragment`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v2 @kind this, `org.spongycastle.crypto.tls.DTLSReliableHandshake$Message` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.writeHandshakeFragment:(Lorg/spongycastle/crypto/tls/DTLSReliableHandshake$Message;II)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `writeMessage`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v4 @kind this, `org.spongycastle.crypto.tls.DTLSReliableHandshake$Message` v5 @kind object) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.writeMessage:(Lorg/spongycastle/crypto/tls/DTLSReliableHandshake$Message;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `f`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.f:()V` @AccessFlag  {

  # return;
}
procedure `org.spongycastle.crypto.tls.TlsHandshakeHash` `g`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.g:()Lorg/spongycastle/crypto/tls/TlsHandshakeHash;` @AccessFlag  {

  # return;
}
procedure `void` `h`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.h:()V` @AccessFlag  {

  # return;
}
procedure `org.spongycastle.crypto.tls.TlsHandshakeHash` `i`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.i:()Lorg/spongycastle/crypto/tls/TlsHandshakeHash;` @AccessFlag  {

  # return;
}
procedure `org.spongycastle.crypto.tls.DTLSReliableHandshake$Message` `j`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v15 @kind this) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.j:()Lorg/spongycastle/crypto/tls/DTLSReliableHandshake$Message;` @AccessFlag  {

  # return;
}
procedure `byte`[] `k`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v2 @kind this, `short` v3 ) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.k:(S)[B` @AccessFlag  {

  # return;
}
procedure `void` `l`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.l:()V` @AccessFlag  {

  # return;
}
procedure `void` `m`(`org.spongycastle.crypto.tls.DTLSReliableHandshake` v3 @kind this, `short` v4 , `byte`[] v5 @kind object) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake;.m:(S[B)V` @AccessFlag  {

  # return;
}
