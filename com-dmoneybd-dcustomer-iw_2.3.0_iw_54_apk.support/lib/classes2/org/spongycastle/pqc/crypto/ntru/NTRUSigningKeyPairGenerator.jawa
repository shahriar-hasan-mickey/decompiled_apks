record `org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.AsymmetricCipherKeyPairGenerator` @kind interface {
  `org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters` `org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator.params` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator` v0 @kind this) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigningKeyPairGenerator;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis` `generateBasis`(`org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator` v22 @kind this) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigningKeyPairGenerator;.generateBasis:()Lorg/spongycastle/pqc/crypto/ntru/NTRUSigningKeyPairGenerator$FGBasis;` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `minimizeFG`(`org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator` v16 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v17 @kind object, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v18 @kind object, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v19 @kind object, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v20 @kind object, `int` v21 ) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigningKeyPairGenerator;.minimizeFG:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis` `generateBoundedBasis`(`org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator` v2 @kind this) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigningKeyPairGenerator;.generateBoundedBasis:()Lorg/spongycastle/pqc/crypto/ntru/NTRUSigningPrivateKeyParameters$Basis;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.AsymmetricCipherKeyPair` `generateKeyPair`(`org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator` v6 @kind this) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigningKeyPairGenerator;.generateKeyPair:()Lorg/spongycastle/crypto/AsymmetricCipherKeyPair;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.AsymmetricCipherKeyPair` `generateKeyPairSingleThread`(`org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator` v5 @kind this) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigningKeyPairGenerator;.generateKeyPairSingleThread:()Lorg/spongycastle/crypto/AsymmetricCipherKeyPair;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator` v0 @kind this, `org.spongycastle.crypto.KeyGenerationParameters` v1 @kind object) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigningKeyPairGenerator;.init:(Lorg/spongycastle/crypto/KeyGenerationParameters;)V` @AccessFlag PUBLIC {

  # return;
}
