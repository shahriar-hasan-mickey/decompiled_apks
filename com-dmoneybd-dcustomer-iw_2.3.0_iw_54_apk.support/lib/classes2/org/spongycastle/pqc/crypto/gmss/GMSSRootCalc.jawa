record `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` @kind class @AccessFlag PUBLIC {
  `byte`[][] `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc.AuthPath` @AccessFlag PRIVATE;
  `int` `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc.K` @AccessFlag PRIVATE;
  `org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider` `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc.digestProvider` @AccessFlag PRIVATE;
  `int` `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc.heightOfNextSeed` @AccessFlag PRIVATE;
  `java.util.Vector` `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc.heightOfNodes` @AccessFlag PRIVATE;
  `int` `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc.heightOfTree` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc.index` @AccessFlag PRIVATE;
  `int` `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc.indexForNextSeed` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc.isFinished` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc.isInitialized` @AccessFlag PRIVATE;
  `int` `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc.mdLength` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.Digest` `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc.messDigestTree` @AccessFlag PRIVATE;
  `java.util.Vector`[] `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc.retain` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc.root` @AccessFlag PRIVATE;
  `java.util.Vector` `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc.tailStack` @AccessFlag PRIVATE;
  `org.spongycastle.pqc.crypto.gmss.Treehash`[] `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc.treehash` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` v2 @kind this, `int` v3 , `int` v4 , `org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider` v5 @kind object) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;.<init>:(IILorg/spongycastle/pqc/crypto/gmss/GMSSDigestProvider;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` v6 @kind this, `org.spongycastle.crypto.Digest` v7 @kind object, `byte`[][] v8 @kind object, `int`[] v9 @kind object, `org.spongycastle.pqc.crypto.gmss.Treehash`[] v10 @kind object, `java.util.Vector`[] v11 @kind object) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;.<init>:(Lorg/spongycastle/crypto/Digest;[[B[I[Lorg/spongycastle/pqc/crypto/gmss/Treehash;[Ljava/util/Vector;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `byte`[][] `getAuthPath`(`org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` v1 @kind this) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;.getAuthPath:()[[B` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Vector`[] `getRetain`(`org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` v1 @kind this) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;.getRetain:()[Ljava/util/Vector;` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getRoot`(`org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` v1 @kind this) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;.getRoot:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Vector` `getStack`(`org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` v3 @kind this) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;.getStack:()Ljava/util/Vector;` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[][] `getStatByte`(`org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` v7 @kind this) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;.getStatByte:()[[B` @AccessFlag PUBLIC {

  # return;
}
procedure `int`[] `getStatInt`(`org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` v6 @kind this) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;.getStatInt:()[I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.crypto.gmss.Treehash`[] `getTreehash`(`org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` v1 @kind this) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;.getTreehash:()[Lorg/spongycastle/pqc/crypto/gmss/Treehash;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `initialize`(`org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` v5 @kind this, `java.util.Vector` v6 @kind object) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;.initialize:(Ljava/util/Vector;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `initializeTreehashSeed`(`org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` v1 @kind this, `byte`[] v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;.initializeTreehashSeed:([BI)V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` v6 @kind this) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `update`(`org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` v9 @kind this, `byte`[] v10 @kind object) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;.update:([B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `update`(`org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` v4 @kind this, `byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;.update:([B[B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `wasFinished`(`org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` v1 @kind this) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;.wasFinished:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `wasInitialized`(`org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` v1 @kind this) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;.wasInitialized:()Z` @AccessFlag PUBLIC {

  # return;
}
