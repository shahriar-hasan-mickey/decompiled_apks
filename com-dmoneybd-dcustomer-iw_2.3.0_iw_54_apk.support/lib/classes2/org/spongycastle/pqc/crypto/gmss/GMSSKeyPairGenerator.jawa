record `org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.AsymmetricCipherKeyPairGenerator` @kind interface {
  `int`[] `org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator.K` @AccessFlag PRIVATE;
  `byte`[][] `org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator.currentRootSigs` @AccessFlag PRIVATE;
  `byte`[][] `org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator.currentSeeds` @AccessFlag PRIVATE;
  `org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider` `org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator.digestProvider` @AccessFlag PRIVATE;
  `org.spongycastle.pqc.crypto.gmss.GMSSParameters` `org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator.gmssPS` @AccessFlag PRIVATE;
  `org.spongycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters` `org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator.gmssParams` @AccessFlag PRIVATE;
  `org.spongycastle.pqc.crypto.gmss.util.GMSSRandom` `org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator.gmssRandom` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator.heightOfTrees` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator.initialized` @AccessFlag PRIVATE;
  `int` `org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator.mdLength` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.Digest` `org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator.messDigestTree` @AccessFlag PRIVATE;
  `byte`[][] `org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator.nextNextSeeds` @AccessFlag PRIVATE;
  `int` `org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator.numLayer` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator.otsIndex` @AccessFlag PRIVATE;
}
global `java.lang.String` `@@org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator.OID` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator` v1 @kind this, `org.spongycastle.pqc.crypto.gmss.GMSSDigestProvider` v2 @kind object) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSKeyPairGenerator;.<init>:(Lorg/spongycastle/pqc/crypto/gmss/GMSSDigestProvider;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.spongycastle.crypto.AsymmetricCipherKeyPair` `genKeyPair`(`org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator` v20 @kind this) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSKeyPairGenerator;.genKeyPair:()Lorg/spongycastle/crypto/AsymmetricCipherKeyPair;` @AccessFlag PRIVATE {

  # return;
}
procedure `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` `generateCurrentAuthpathAndRoot`(`org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator` v7 @kind this, `byte`[] v8 @kind object, `java.util.Vector` v9 @kind object, `byte`[] v10 @kind object, `int` v11 ) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSKeyPairGenerator;.generateCurrentAuthpathAndRoot:([BLjava/util/Vector;[BI)Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;` @AccessFlag PRIVATE {

  # return;
}
procedure `org.spongycastle.pqc.crypto.gmss.GMSSRootCalc` `generateNextAuthpathAndRoot`(`org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator` v7 @kind this, `java.util.Vector` v8 @kind object, `byte`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSKeyPairGenerator;.generateNextAuthpathAndRoot:(Ljava/util/Vector;[BI)Lorg/spongycastle/pqc/crypto/gmss/GMSSRootCalc;` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `initializeDefault`(`org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator` v7 @kind this) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSKeyPairGenerator;.initializeDefault:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `org.spongycastle.crypto.AsymmetricCipherKeyPair` `generateKeyPair`(`org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator` v1 @kind this) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSKeyPairGenerator;.generateKeyPair:()Lorg/spongycastle/crypto/AsymmetricCipherKeyPair;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator` v0 @kind this, `org.spongycastle.crypto.KeyGenerationParameters` v1 @kind object) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSKeyPairGenerator;.init:(Lorg/spongycastle/crypto/KeyGenerationParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `initialize`(`org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator` v5 @kind this, `int` v6 , `java.security.SecureRandom` v7 @kind object) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSKeyPairGenerator;.initialize:(ILjava/security/SecureRandom;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `initialize`(`org.spongycastle.pqc.crypto.gmss.GMSSKeyPairGenerator` v5 @kind this, `org.spongycastle.crypto.KeyGenerationParameters` v6 @kind object) @signature `Lorg/spongycastle/pqc/crypto/gmss/GMSSKeyPairGenerator;.initialize:(Lorg/spongycastle/crypto/KeyGenerationParameters;)V` @AccessFlag PUBLIC {

  # return;
}
