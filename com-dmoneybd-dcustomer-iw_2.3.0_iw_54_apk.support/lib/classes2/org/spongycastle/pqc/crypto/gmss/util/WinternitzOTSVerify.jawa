record `org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSVerify` @kind class @AccessFlag PUBLIC {
  `org.spongycastle.crypto.Digest` `org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSVerify.messDigestOTS` @AccessFlag PRIVATE;
  `int` `org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSVerify.w` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSVerify` v0 @kind this, `org.spongycastle.crypto.Digest` v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/pqc/crypto/gmss/util/WinternitzOTSVerify;.<init>:(Lorg/spongycastle/crypto/Digest;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `byte`[] `Verify`(`org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSVerify` v28 @kind this, `byte`[] v29 @kind object, `byte`[] v30 @kind object) @signature `Lorg/spongycastle/pqc/crypto/gmss/util/WinternitzOTSVerify;.Verify:([B[B)[B` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getLog`(`org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSVerify` v2 @kind this, `int` v3 ) @signature `Lorg/spongycastle/pqc/crypto/gmss/util/WinternitzOTSVerify;.getLog:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getSignatureLength`(`org.spongycastle.pqc.crypto.gmss.util.WinternitzOTSVerify` v4 @kind this) @signature `Lorg/spongycastle/pqc/crypto/gmss/util/WinternitzOTSVerify;.getSignatureLength:()I` @AccessFlag PUBLIC {

  # return;
}
