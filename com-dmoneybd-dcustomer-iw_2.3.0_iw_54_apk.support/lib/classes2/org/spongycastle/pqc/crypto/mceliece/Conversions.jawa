record `org.spongycastle.pqc.crypto.mceliece.Conversions` @kind class @AccessFlag FINAL {
}
global `java.math.BigInteger` `@@org.spongycastle.pqc.crypto.mceliece.Conversions.ONE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.pqc.crypto.mceliece.Conversions.ZERO` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/pqc/crypto/mceliece/Conversions;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.pqc.crypto.mceliece.Conversions` v0 @kind this) @signature `Lorg/spongycastle/pqc/crypto/mceliece/Conversions;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `byte`[] `decode`(`int` v7 , `int` v8 , `org.spongycastle.pqc.math.linearalgebra.GF2Vector` v9 @kind object) @signature `Lorg/spongycastle/pqc/crypto/mceliece/Conversions;.decode:(IILorg/spongycastle/pqc/math/linearalgebra/GF2Vector;)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.spongycastle.pqc.math.linearalgebra.GF2Vector` `encode`(`int` v6 , `int` v7 , `byte`[] v8 @kind object) @signature `Lorg/spongycastle/pqc/crypto/mceliece/Conversions;.encode:(II[B)Lorg/spongycastle/pqc/math/linearalgebra/GF2Vector;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `signConversion`(`int` v10 , `int` v11 , `byte`[] v12 @kind object) @signature `Lorg/spongycastle/pqc/crypto/mceliece/Conversions;.signConversion:(II[B)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
