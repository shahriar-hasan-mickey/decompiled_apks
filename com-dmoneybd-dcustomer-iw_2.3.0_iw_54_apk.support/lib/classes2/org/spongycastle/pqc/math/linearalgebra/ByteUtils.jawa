record `org.spongycastle.pqc.math.linearalgebra.ByteUtils` @kind class @AccessFlag PUBLIC_FINAL {
}
global `char`[] `@@org.spongycastle.pqc.math.linearalgebra.ByteUtils.HEX_CHARS` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.pqc.math.linearalgebra.ByteUtils` v0 @kind this) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `byte`[] `clone`(`byte`[] v3 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.clone:([B)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `concatenate`(`byte`[] v3 @kind object, `byte`[] v4 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.concatenate:([B[B)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `concatenate`(`byte`[][] v6 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.concatenate:([[B)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `deepHashCode`(`byte`[] v3 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.deepHashCode:([B)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `deepHashCode`(`byte`[][] v3 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.deepHashCode:([[B)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `deepHashCode`(`byte`[][][] v3 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.deepHashCode:([[[B)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `equals`(`byte`[] v6 @kind object, `byte`[] v7 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.equals:([B[B)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `equals`(`byte`[][] v4 @kind object, `byte`[][] v5 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.equals:([[B[[B)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `equals`(`byte`[][][] v7 @kind object, `byte`[][][] v8 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.equals:([[[B[[[B)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `fromHexString`(`java.lang.String` v10 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.fromHexString:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[][] `split`(`byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.split:([BI)[[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `subArray`(`byte`[] v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.subArray:([BI)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `subArray`(`byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.subArray:([BII)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.String` `toBinaryString`(`byte`[] v7 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.toBinaryString:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `char`[] `toCharArray`(`byte`[] v3 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.toCharArray:([B)[C` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.String` `toHexString`(`byte`[] v4 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.toHexString:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.String` `toHexString`(`byte`[] v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.toHexString:([BLjava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `xor`(`byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/ByteUtils;.xor:([B[B)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
