record `org.spongycastle.pqc.math.ntru.util.ArrayEncoder` @kind class @AccessFlag PUBLIC {
}
global `int`[] `@@org.spongycastle.pqc.math.ntru.util.ArrayEncoder.BIT1_TABLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.pqc.math.ntru.util.ArrayEncoder.BIT2_TABLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.pqc.math.ntru.util.ArrayEncoder.BIT3_TABLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.pqc.math.ntru.util.ArrayEncoder.COEFF1_TABLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.pqc.math.ntru.util.ArrayEncoder.COEFF2_TABLE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/pqc/math/ntru/util/ArrayEncoder;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.pqc.math.ntru.util.ArrayEncoder` v0 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/util/ArrayEncoder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int`[] `decodeMod3Sves`(`byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/pqc/math/ntru/util/ArrayEncoder;.decodeMod3Sves:([BI)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `decodeMod3Tight`(`java.io.InputStream` v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/pqc/math/ntru/util/ArrayEncoder;.decodeMod3Tight:(Ljava/io/InputStream;I)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `decodeMod3Tight`(`byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/pqc/math/ntru/util/ArrayEncoder;.decodeMod3Tight:([BI)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `decodeModQ`(`java.io.InputStream` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lorg/spongycastle/pqc/math/ntru/util/ArrayEncoder;.decodeModQ:(Ljava/io/InputStream;II)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `decodeModQ`(`byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lorg/spongycastle/pqc/math/ntru/util/ArrayEncoder;.decodeModQ:([BII)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `encodeMod3Sves`(`int`[] v13 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/util/ArrayEncoder;.encodeMod3Sves:([I)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `encodeMod3Tight`(`int`[] v5 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/util/ArrayEncoder;.encodeMod3Tight:([I)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `encodeModQ`(`int`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/pqc/math/ntru/util/ArrayEncoder;.encodeModQ:([II)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `getBit`(`byte`[] v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/pqc/math/ntru/util/ArrayEncoder;.getBit:([BI)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
