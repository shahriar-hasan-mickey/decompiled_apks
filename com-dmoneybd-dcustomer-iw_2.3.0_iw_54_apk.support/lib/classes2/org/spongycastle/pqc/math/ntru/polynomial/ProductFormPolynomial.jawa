record `org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial` @kind class @AccessFlag PUBLIC extends `org.spongycastle.pqc.math.ntru.polynomial.Polynomial` @kind interface {
  `org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` `org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial.f1` @AccessFlag PRIVATE;
  `org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` `org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial.f2` @AccessFlag PRIVATE;
  `org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` `org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial.f3` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial` v0 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` v1 @kind object, `org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` v2 @kind object, `org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` v3 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/ProductFormPolynomial;.<init>:(Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial` `fromBinary`(`java.io.InputStream` v0 @kind object, `int` v1 , `int` v2 , `int` v3 , `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/ProductFormPolynomial;.fromBinary:(Ljava/io/InputStream;IIIII)Lorg/spongycastle/pqc/math/ntru/polynomial/ProductFormPolynomial;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial` `fromBinary`(`byte`[] v6 @kind object, `int` v7 , `int` v8 , `int` v9 , `int` v10 , `int` v11 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/ProductFormPolynomial;.fromBinary:([BIIIII)Lorg/spongycastle/pqc/math/ntru/polynomial/ProductFormPolynomial;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial` `generateRandom`(`int` v0 , `int` v1 , `int` v2 , `int` v3 , `int` v4 , `java.security.SecureRandom` v5 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/ProductFormPolynomial;.generateRandom:(IIIIILjava/security/SecureRandom;)Lorg/spongycastle/pqc/math/ntru/polynomial/ProductFormPolynomial;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `equals`(`org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/ProductFormPolynomial;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial` v4 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/ProductFormPolynomial;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial` `mult`(`org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial` v2 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial` v3 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/ProductFormPolynomial;.mult:(Lorg/spongycastle/pqc/math/ntru/polynomial/BigIntPolynomial;)Lorg/spongycastle/pqc/math/ntru/polynomial/BigIntPolynomial;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `mult`(`org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial` v2 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v3 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/ProductFormPolynomial;.mult:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `mult`(`org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial` v0 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/ProductFormPolynomial;.mult:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;I)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `toBinary`(`org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial` v7 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/ProductFormPolynomial;.toBinary:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `toIntegerPolynomial`(`org.spongycastle.pqc.math.ntru.polynomial.ProductFormPolynomial` v2 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/ProductFormPolynomial;.toIntegerPolynomial:()Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC {

  # return;
}
