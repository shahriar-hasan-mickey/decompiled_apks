record `org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` @kind class @AccessFlag PUBLIC extends `org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial` @kind interface {
  `int` `org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial.N` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial.negOnes` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial.ones` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial.BITS_PER_INDEX` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` v0 @kind this, `int` v1 , `int`[] v2 @kind object, `int`[] v3 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;.<init>:(I[I[I)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` v0 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v1 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;.<init>:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` v5 @kind this, `int`[] v6 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;.<init>:([I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` `fromBinary`(`java.io.InputStream` v3 @kind object, `int` v4 , `int` v5 , `int` v6 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;.fromBinary:(Ljava/io/InputStream;III)Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` `generateRandom`(`int` v0 , `int` v1 , `int` v2 , `java.security.SecureRandom` v3 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;.generateRandom:(IIILjava/security/SecureRandom;)Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `clear`(`org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` v4 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;.clear:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `equals`(`org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `int`[] `getNegOnes`(`org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` v1 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;.getNegOnes:()[I` @AccessFlag PUBLIC {

  # return;
}
procedure `int`[] `getOnes`(`org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` v1 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;.getOnes:()[I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` v3 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial` `mult`(`org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` v7 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial` v8 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;.mult:(Lorg/spongycastle/pqc/math/ntru/polynomial/BigIntPolynomial;)Lorg/spongycastle/pqc/math/ntru/polynomial/BigIntPolynomial;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `mult`(`org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` v7 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v8 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;.mult:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `mult`(`org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` v0 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;.mult:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;I)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `size`(`org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` v1 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;.size:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `toBinary`(`org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` v5 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;.toBinary:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `toIntegerPolynomial`(`org.spongycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial` v5 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;.toIntegerPolynomial:()Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC {

  # return;
}
