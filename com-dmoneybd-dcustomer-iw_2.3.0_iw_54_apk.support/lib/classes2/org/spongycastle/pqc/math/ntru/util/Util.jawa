record `org.spongycastle.pqc.math.ntru.util.Util` @kind class @AccessFlag PUBLIC {
}
global `boolean` `@@org.spongycastle.pqc.math.ntru.util.Util.IS_64_BITNESS_KNOWN` @AccessFlag PRIVATE_STATIC_VOLATILE;
global `boolean` `@@org.spongycastle.pqc.math.ntru.util.Util.IS_64_BIT_JVM` @AccessFlag PRIVATE_STATIC_VOLATILE;
procedure `void` `<init>`(`org.spongycastle.pqc.math.ntru.util.Util` v0 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/util/Util;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial` `generateRandomTernary`(`int` v0 , `int` v1 , `int` v2 , `boolean` v3 , `java.security.SecureRandom` v4 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/util/Util;.generateRandomTernary:(IIIZLjava/security/SecureRandom;)Lorg/spongycastle/pqc/math/ntru/polynomial/TernaryPolynomial;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `generateRandomTernary`(`int` v6 , `int` v7 , `int` v8 , `java.security.SecureRandom` v9 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/util/Util;.generateRandomTernary:(IIILjava/security/SecureRandom;)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `invert`(`int` v0 , `int` v1 ) @signature `Lorg/spongycastle/pqc/math/ntru/util/Util;.invert:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `is64BitJVM`() @signature `Lorg/spongycastle/pqc/math/ntru/util/Util;.is64BitJVM:()Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `pow`(`int` v2 , `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/pqc/math/ntru/util/Util;.pow:(III)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `pow`(`long` v3 , `int` v5 , `long` v6 ) @signature `Lorg/spongycastle/pqc/math/ntru/util/Util;.pow:(JIJ)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `readFullLength`(`java.io.InputStream` v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/pqc/math/ntru/util/Util;.readFullLength:(Ljava/io/InputStream;I)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
