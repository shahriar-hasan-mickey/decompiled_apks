record `org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE extends `org.spongycastle.pqc.math.ntru.polynomial.Polynomial` @kind interface {
}
procedure `void` `clear`() @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/TernaryPolynomial;.clear:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int`[] `getNegOnes`() @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/TernaryPolynomial;.getNegOnes:()[I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int`[] `getOnes`() @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/TernaryPolynomial;.getOnes:()[I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `mult`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v0 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/TernaryPolynomial;.mult:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `size`() @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/TernaryPolynomial;.size:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
