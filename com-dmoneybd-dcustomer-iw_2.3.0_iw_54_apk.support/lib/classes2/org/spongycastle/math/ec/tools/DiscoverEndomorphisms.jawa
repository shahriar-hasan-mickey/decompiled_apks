record `org.spongycastle.math.ec.tools.DiscoverEndomorphisms` @kind class @AccessFlag PUBLIC {
}
global `int` `@@org.spongycastle.math.ec.tools.DiscoverEndomorphisms.radix` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.math.ec.tools.DiscoverEndomorphisms` v0 @kind this) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `areRelativelyPrime`(`java.math.BigInteger` v0 @kind object, `java.math.BigInteger` v1 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.areRelativelyPrime:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.math.BigInteger`[] `calculateRange`(`java.math.BigInteger` v1 @kind object, `java.math.BigInteger` v2 @kind object, `java.math.BigInteger` v3 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.calculateRange:(Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;)[Ljava/math/BigInteger;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.math.BigInteger`[] `chooseShortest`(`java.math.BigInteger`[] v1 @kind object, `java.math.BigInteger`[] v2 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.chooseShortest:([Ljava/math/BigInteger;[Ljava/math/BigInteger;)[Ljava/math/BigInteger;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `discoverEndomorphisms`(`java.lang.String` v4 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.discoverEndomorphisms:(Ljava/lang/String;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `discoverEndomorphisms`(`org.spongycastle.asn1.x9.X9ECParameters` v2 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.discoverEndomorphisms:(Lorg/spongycastle/asn1/x9/X9ECParameters;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger`[] `extEuclidBezout`(`java.math.BigInteger`[] v13 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.extEuclidBezout:([Ljava/math/BigInteger;)[Ljava/math/BigInteger;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.math.BigInteger`[] `extEuclidGLV`(`java.math.BigInteger` v8 @kind object, `java.math.BigInteger` v9 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.extEuclidGLV:(Ljava/math/BigInteger;Ljava/math/BigInteger;)[Ljava/math/BigInteger;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `org.spongycastle.math.ec.ECFieldElement`[] `findBetaValues`(`org.spongycastle.math.ec.ECCurve` v5 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.findBetaValues:(Lorg/spongycastle/math/ec/ECCurve;)[Lorg/spongycastle/math/ec/ECFieldElement;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.math.BigInteger`[] `intersect`(`java.math.BigInteger`[] v3 @kind object, `java.math.BigInteger`[] v4 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.intersect:([Ljava/math/BigInteger;[Ljava/math/BigInteger;)[Ljava/math/BigInteger;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isLessThanSqrt`(`java.math.BigInteger` v3 @kind object, `java.math.BigInteger` v4 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.isLessThanSqrt:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isShorter`(`java.math.BigInteger`[] v6 @kind object, `java.math.BigInteger`[] v7 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.isShorter:([Ljava/math/BigInteger;[Ljava/math/BigInteger;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isVectorBoundedBySqrt`(`java.math.BigInteger`[] v2 @kind object, `java.math.BigInteger` v3 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.isVectorBoundedBySqrt:([Ljava/math/BigInteger;Ljava/math/BigInteger;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.math.BigInteger` `isqrt`(`java.math.BigInteger` v3 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.isqrt:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `main`(`java.lang.String`[] v2 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.main:([Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger`[] `order`(`java.math.BigInteger` v4 @kind object, `java.math.BigInteger` v5 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.order:(Ljava/math/BigInteger;Ljava/math/BigInteger;)[Ljava/math/BigInteger;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `printGLVTypeBParameters`(`org.spongycastle.asn1.x9.X9ECParameters` v4 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.printGLVTypeBParameters:(Lorg/spongycastle/asn1/x9/X9ECParameters;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `printGLVTypeBParameters`(`org.spongycastle.asn1.x9.X9ECParameters` v13 @kind object, `java.math.BigInteger` v14 @kind object, `org.spongycastle.math.ec.ECFieldElement`[] v15 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.printGLVTypeBParameters:(Lorg/spongycastle/asn1/x9/X9ECParameters;Ljava/math/BigInteger;[Lorg/spongycastle/math/ec/ECFieldElement;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `printProperty`(`java.lang.String` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.printProperty:(Ljava/lang/String;Ljava/lang/Object;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.math.BigInteger` `roundQuotient`(`java.math.BigInteger` v3 @kind object, `java.math.BigInteger` v4 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.roundQuotient:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.math.BigInteger`[] `solveQuadraticEquation`(`java.math.BigInteger` v3 @kind object, `java.math.BigInteger` v4 @kind object, `java.math.BigInteger` v5 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.solveQuadraticEquation:(Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;)[Ljava/math/BigInteger;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `swap`(`java.math.BigInteger`[] v4 @kind object) @signature `Lorg/spongycastle/math/ec/tools/DiscoverEndomorphisms;.swap:([Ljava/math/BigInteger;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
