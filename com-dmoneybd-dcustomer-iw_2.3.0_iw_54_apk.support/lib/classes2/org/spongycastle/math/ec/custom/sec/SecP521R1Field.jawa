record `org.spongycastle.math.ec.custom.sec.SecP521R1Field` @kind class @AccessFlag PUBLIC {
}
global `int` `@@org.spongycastle.math.ec.custom.sec.SecP521R1Field.P16` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.math.ec.custom.sec.SecP521R1Field.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/math/ec/custom/sec/SecP521R1Field;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.math.ec.custom.sec.SecP521R1Field` v0 @kind this) @signature `Lorg/spongycastle/math/ec/custom/sec/SecP521R1Field;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `add`(`int`[] v2 @kind object, `int`[] v3 @kind object, `int`[] v4 @kind object) @signature `Lorg/spongycastle/math/ec/custom/sec/SecP521R1Field;.add:([I[I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `addOne`(`int`[] v3 @kind object, `int`[] v4 @kind object) @signature `Lorg/spongycastle/math/ec/custom/sec/SecP521R1Field;.addOne:([I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `fromBigInteger`(`java.math.BigInteger` v2 @kind object) @signature `Lorg/spongycastle/math/ec/custom/sec/SecP521R1Field;.fromBigInteger:(Ljava/math/BigInteger;)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `half`(`int`[] v2 @kind object, `int`[] v3 @kind object) @signature `Lorg/spongycastle/math/ec/custom/sec/SecP521R1Field;.half:([I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `implMultiply`(`int`[] v9 @kind object, `int`[] v10 @kind object, `int`[] v11 @kind object) @signature `Lorg/spongycastle/math/ec/custom/sec/SecP521R1Field;.implMultiply:([I[I[I)V` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `void` `implSquare`(`int`[] v7 @kind object, `int`[] v8 @kind object) @signature `Lorg/spongycastle/math/ec/custom/sec/SecP521R1Field;.implSquare:([I[I)V` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `void` `multiply`(`int`[] v1 @kind object, `int`[] v2 @kind object, `int`[] v3 @kind object) @signature `Lorg/spongycastle/math/ec/custom/sec/SecP521R1Field;.multiply:([I[I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `negate`(`int`[] v2 @kind object, `int`[] v3 @kind object) @signature `Lorg/spongycastle/math/ec/custom/sec/SecP521R1Field;.negate:([I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `reduce`(`int`[] v8 @kind object, `int`[] v9 @kind object) @signature `Lorg/spongycastle/math/ec/custom/sec/SecP521R1Field;.reduce:([I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `reduce23`(`int`[] v4 @kind object) @signature `Lorg/spongycastle/math/ec/custom/sec/SecP521R1Field;.reduce23:([I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `square`(`int`[] v1 @kind object, `int`[] v2 @kind object) @signature `Lorg/spongycastle/math/ec/custom/sec/SecP521R1Field;.square:([I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `squareN`(`int`[] v1 @kind object, `int` v2 , `int`[] v3 @kind object) @signature `Lorg/spongycastle/math/ec/custom/sec/SecP521R1Field;.squareN:([II[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `subtract`(`int`[] v2 @kind object, `int`[] v3 @kind object, `int`[] v4 @kind object) @signature `Lorg/spongycastle/math/ec/custom/sec/SecP521R1Field;.subtract:([I[I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `twice`(`int`[] v3 @kind object, `int`[] v4 @kind object) @signature `Lorg/spongycastle/math/ec/custom/sec/SecP521R1Field;.twice:([I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
