record `org.spongycastle.math.Primes$MROutput` @kind class @AccessFlag PUBLIC {
  `java.math.BigInteger` `org.spongycastle.math.Primes$MROutput.factor` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.math.Primes$MROutput.provablyComposite` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.math.Primes$MROutput` v0 @kind this, `boolean` v1 , `java.math.BigInteger` v2 @kind object) @signature `Lorg/spongycastle/math/Primes$MROutput;.<init>:(ZLjava/math/BigInteger;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `org.spongycastle.math.Primes$MROutput` `a`() @signature `Lorg/spongycastle/math/Primes$MROutput;.a:()Lorg/spongycastle/math/Primes$MROutput;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `org.spongycastle.math.Primes$MROutput` `b`(`java.math.BigInteger` v0 @kind object) @signature `Lorg/spongycastle/math/Primes$MROutput;.b:(Ljava/math/BigInteger;)Lorg/spongycastle/math/Primes$MROutput;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `org.spongycastle.math.Primes$MROutput` `c`() @signature `Lorg/spongycastle/math/Primes$MROutput;.c:()Lorg/spongycastle/math/Primes$MROutput;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `org.spongycastle.math.Primes$MROutput` `probablyPrime`() @signature `Lorg/spongycastle/math/Primes$MROutput;.probablyPrime:()Lorg/spongycastle/math/Primes$MROutput;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `org.spongycastle.math.Primes$MROutput` `provablyCompositeNotPrimePower`() @signature `Lorg/spongycastle/math/Primes$MROutput;.provablyCompositeNotPrimePower:()Lorg/spongycastle/math/Primes$MROutput;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `org.spongycastle.math.Primes$MROutput` `provablyCompositeWithFactor`(`java.math.BigInteger` v2 @kind object) @signature `Lorg/spongycastle/math/Primes$MROutput;.provablyCompositeWithFactor:(Ljava/math/BigInteger;)Lorg/spongycastle/math/Primes$MROutput;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.math.BigInteger` `getFactor`(`org.spongycastle.math.Primes$MROutput` v1 @kind this) @signature `Lorg/spongycastle/math/Primes$MROutput;.getFactor:()Ljava/math/BigInteger;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isNotPrimePower`(`org.spongycastle.math.Primes$MROutput` v1 @kind this) @signature `Lorg/spongycastle/math/Primes$MROutput;.isNotPrimePower:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isProvablyComposite`(`org.spongycastle.math.Primes$MROutput` v1 @kind this) @signature `Lorg/spongycastle/math/Primes$MROutput;.isProvablyComposite:()Z` @AccessFlag PUBLIC {

  # return;
}
