record `org.spongycastle.math.Primes$STOutput` @kind class @AccessFlag PUBLIC {
  `java.math.BigInteger` `org.spongycastle.math.Primes$STOutput.prime` @AccessFlag PRIVATE;
  `int` `org.spongycastle.math.Primes$STOutput.primeGenCounter` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.math.Primes$STOutput.primeSeed` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.math.Primes$STOutput` v0 @kind this, `java.math.BigInteger` v1 @kind object, `byte`[] v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/math/Primes$STOutput;.<init>:(Ljava/math/BigInteger;[BI)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.math.Primes$STOutput` v0 @kind this, `java.math.BigInteger` v1 @kind object, `byte`[] v2 @kind object, `int` v3 , `org.spongycastle.math.Primes$1` v4 @kind object) @signature `Lorg/spongycastle/math/Primes$STOutput;.<init>:(Ljava/math/BigInteger;[BILorg/spongycastle/math/Primes$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `java.math.BigInteger` `getPrime`(`org.spongycastle.math.Primes$STOutput` v1 @kind this) @signature `Lorg/spongycastle/math/Primes$STOutput;.getPrime:()Ljava/math/BigInteger;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getPrimeGenCounter`(`org.spongycastle.math.Primes$STOutput` v1 @kind this) @signature `Lorg/spongycastle/math/Primes$STOutput;.getPrimeGenCounter:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getPrimeSeed`(`org.spongycastle.math.Primes$STOutput` v1 @kind this) @signature `Lorg/spongycastle/math/Primes$STOutput;.getPrimeSeed:()[B` @AccessFlag PUBLIC {

  # return;
}
