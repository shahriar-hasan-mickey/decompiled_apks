record `org.spongycastle.asn1.DERSet` @kind class @AccessFlag PUBLIC extends `org.spongycastle.asn1.ASN1Set` @kind class {
  `int` `org.spongycastle.asn1.DERSet.bodyLength` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.asn1.DERSet` v1 @kind this) @signature `Lorg/spongycastle/asn1/DERSet;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.asn1.DERSet` v0 @kind this, `org.spongycastle.asn1.ASN1Encodable` v1 @kind object) @signature `Lorg/spongycastle/asn1/DERSet;.<init>:(Lorg/spongycastle/asn1/ASN1Encodable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.asn1.DERSet` v1 @kind this, `org.spongycastle.asn1.ASN1EncodableVector` v2 @kind object) @signature `Lorg/spongycastle/asn1/DERSet;.<init>:(Lorg/spongycastle/asn1/ASN1EncodableVector;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.asn1.DERSet` v0 @kind this, `org.spongycastle.asn1.ASN1EncodableVector` v1 @kind object, `boolean` v2 ) @signature `Lorg/spongycastle/asn1/DERSet;.<init>:(Lorg/spongycastle/asn1/ASN1EncodableVector;Z)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.asn1.DERSet` v1 @kind this, `org.spongycastle.asn1.ASN1Encodable`[] v2 @kind object) @signature `Lorg/spongycastle/asn1/DERSet;.<init>:([Lorg/spongycastle/asn1/ASN1Encodable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `getBodyLength`(`org.spongycastle.asn1.DERSet` v3 @kind this) @signature `Lorg/spongycastle/asn1/DERSet;.getBodyLength:()I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `a`(`org.spongycastle.asn1.DERSet` v2 @kind this) @signature `Lorg/spongycastle/asn1/DERSet;.a:()I` @AccessFlag  {

  # return;
}
procedure `void` `encode`(`org.spongycastle.asn1.DERSet` v3 @kind this, `org.spongycastle.asn1.ASN1OutputStream` v4 @kind object) @signature `Lorg/spongycastle/asn1/DERSet;.encode:(Lorg/spongycastle/asn1/ASN1OutputStream;)V` @AccessFlag  {

  # return;
}
