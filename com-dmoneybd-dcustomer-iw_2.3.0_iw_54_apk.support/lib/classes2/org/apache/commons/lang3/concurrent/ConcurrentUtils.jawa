record `org.apache.commons.lang3.concurrent.ConcurrentUtils` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.ConcurrentUtils` v0 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `java.lang.Throwable` `a`(`java.lang.Throwable` v4 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils;.a:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @AccessFlag STATIC {

  # return;
}
procedure `java.util.concurrent.Future` `constantFuture`(`java.lang.Object` v1 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils;.constantFuture:(Ljava/lang/Object;)Ljava/util/concurrent/Future;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Object` `createIfAbsent`(`java.util.concurrent.ConcurrentMap` v1 @kind object, `java.lang.Object` v2 @kind object, `org.apache.commons.lang3.concurrent.ConcurrentInitializer` v3 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils;.createIfAbsent:(Ljava/util/concurrent/ConcurrentMap;Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Object` `createIfAbsentUnchecked`(`java.util.concurrent.ConcurrentMap` v0 @kind object, `java.lang.Object` v1 @kind object, `org.apache.commons.lang3.concurrent.ConcurrentInitializer` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils;.createIfAbsentUnchecked:(Ljava/util/concurrent/ConcurrentMap;Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.concurrent.ConcurrentException` `extractCause`(`java.util.concurrent.ExecutionException` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils;.extractCause:(Ljava/util/concurrent/ExecutionException;)Lorg/apache/commons/lang3/concurrent/ConcurrentException;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.concurrent.ConcurrentRuntimeException` `extractCauseUnchecked`(`java.util.concurrent.ExecutionException` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils;.extractCauseUnchecked:(Ljava/util/concurrent/ExecutionException;)Lorg/apache/commons/lang3/concurrent/ConcurrentRuntimeException;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `handleCause`(`java.util.concurrent.ExecutionException` v0 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils;.handleCause:(Ljava/util/concurrent/ExecutionException;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `handleCauseUnchecked`(`java.util.concurrent.ExecutionException` v0 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils;.handleCauseUnchecked:(Ljava/util/concurrent/ExecutionException;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Object` `initialize`(`org.apache.commons.lang3.concurrent.ConcurrentInitializer` v0 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils;.initialize:(Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Object` `initializeUnchecked`(`org.apache.commons.lang3.concurrent.ConcurrentInitializer` v1 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils;.initializeUnchecked:(Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Object` `putIfAbsent`(`java.util.concurrent.ConcurrentMap` v0 @kind object, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils;.putIfAbsent:(Ljava/util/concurrent/ConcurrentMap;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `throwCause`(`java.util.concurrent.ExecutionException` v1 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils;.throwCause:(Ljava/util/concurrent/ExecutionException;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
