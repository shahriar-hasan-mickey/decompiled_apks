record `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData` @kind class @AccessFlag  {
  `long` `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData.checkIntervalStart` @AccessFlag PRIVATE_FINAL;
  `int` `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData.eventCount` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData` v0 @kind this, `int` v1 , `long` v2 ) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;.<init>:(IJ)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `long` `getCheckIntervalStart`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData` v2 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;.getCheckIntervalStart:()J` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getEventCount`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;.getEventCount:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData` `increment`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData` v4 @kind this, `int` v5 ) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;.increment:(I)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;` @AccessFlag PUBLIC {

  # return;
}
