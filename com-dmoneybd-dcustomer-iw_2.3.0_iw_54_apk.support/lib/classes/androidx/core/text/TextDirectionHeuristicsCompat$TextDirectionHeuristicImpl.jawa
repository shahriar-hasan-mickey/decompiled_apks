record `androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl` @kind class @AccessFlag ABSTRACT extends `androidx.core.text.TextDirectionHeuristicCompat` @kind interface {
  `androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm` `androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl.mAlgorithm` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl` v0 @kind this, `androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm` v1 @kind object) @signature `Landroidx/core/text/TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl;.<init>:(Landroidx/core/text/TextDirectionHeuristicsCompat$TextDirectionAlgorithm;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `boolean` `doCheck`(`androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl` v1 @kind this, `java.lang.CharSequence` v2 @kind object, `int` v3 , `int` v4 ) @signature `Landroidx/core/text/TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl;.doCheck:(Ljava/lang/CharSequence;II)Z` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `defaultIsRtl`() @signature `Landroidx/core/text/TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl;.defaultIsRtl:()Z` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `isRtl`(`androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl` v1 @kind this, `java.lang.CharSequence` v2 @kind object, `int` v3 , `int` v4 ) @signature `Landroidx/core/text/TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl;.isRtl:(Ljava/lang/CharSequence;II)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isRtl`(`androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl` v0 @kind this, `char`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Landroidx/core/text/TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl;.isRtl:([CII)Z` @AccessFlag PUBLIC {

  # return;
}
