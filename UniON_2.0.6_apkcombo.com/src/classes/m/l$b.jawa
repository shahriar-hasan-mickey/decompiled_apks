record `m.l$b` @kind class @AccessFlag FINAL extends `m.s` @kind interface {
  `m.t` `m.l$b.b` @AccessFlag FINAL_SYNTHETIC;
  `java.io.InputStream` `m.l$b.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`m.l$b` v0 @kind this, `m.t` v1 @kind object, `java.io.InputStream` v2 @kind object) @signature `Lm/l$b;.<init>:(Lm/t;Ljava/io/InputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f4a38.  v0.`m.l$b.b` @type ^`m.t` := v1 @kind object;
  #L3f4a3c.  v0.`m.l$b.c` @type ^`java.io.InputStream` := v2 @kind object;
  #L3f4a40.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f4a46.  return @kind void;
}
procedure `long` `a`(`m.l$b` v3 @kind this, `m.c` v4 @kind object, `long` v5 ) @signature `Lm/l$b;.a:(Lm/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f4944.  v0:= 0L;
  #L3f4948.  v2:= lcmp(v5, v0);
  #L3f494c.  if v2 < 0 then goto L3f49d2;
  #L3f4950.  if v2 != 0 then goto L3f4956;
  #L3f4954.  return v0 @kind wide;
  #L3f4956.  v0:= v3.`m.l$b.b` @type ^`m.t` @kind object;
  #L3f495a.  call `e`(v0) @signature `Lm/t;.e:()V` @kind virtual;
  #L3f4960.  v0:= 1I;
  #L3f4962.  call temp:= `b`(v4, v0) @signature `Lm/c;.b:(I)Lm/o;` @kind virtual;
  #L3f4968.  v0:= temp @kind object;
  #L3f496a.  v1:= v0.`m.o.c` @type ^`int`;
  #L3f496e.  v1:= v1 - 8192;
  #L3f4972.  v1:= (`long`) v1 @kind i2l;
  #L3f4974.  call temp:= `min`(v5, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3f497a.  v5:= temp @kind wide;
  #L3f497c.  v6:= (`int`) v5 @kind l2i;
  #L3f497e.  v5:= v3.`m.l$b.c` @type ^`java.io.InputStream` @kind object;
  #L3f4982.  v1:= v0.`m.o.a` @type ^`byte`[] @kind object;
  #L3f4986.  v2:= v0.`m.o.c` @type ^`int`;
  #L3f498a.  call temp:= `read`(v5, v1, v2, v6) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L3f4990.  v5:= temp;
  #L3f4992.  v6:= -1I;
  #L3f4994.  if v5 != v6 then goto L3f499e;
  #L3f4998.  v4:= -1L;
  #L3f499c.  return v4 @kind wide;
  #L3f499e.  v6:= v0.`m.o.c` @type ^`int`;
  #L3f49a2.  v6:= v6 + v5 @kind int;
  #L3f49a4.  v0.`m.o.c` @type ^`int` := v6;
  #L3f49a8.  v0:= v4.`m.c.c` @type ^`long` @kind wide;
  #L3f49ac.  v5:= (`long`) v5 @kind i2l;
  #L3f49ae.  v0:= v0 + v5 @kind long;
  #L3f49b0.  v4.`m.c.c` @type ^`long` := v0 @kind wide;
  #L3f49b4.  return v5 @kind wide;
  #L3f49b6.  v4:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L3f49b8.  call temp:= `a`(v4) @signature `Lm/l;.a:(Ljava/lang/AssertionError;)Z` @kind static;
  #L3f49be.  v5:= temp;
  #L3f49c0.  if v5 == 0 then goto L3f49d0;
  #L3f49c4.  v5:= new `java.io.IOException`;
  #L3f49c8.  call `<init>`(v5, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3f49ce.  throw v5;
  #L3f49d0.  throw v4;
  #L3f49d2.  v4:= new `java.lang.IllegalArgumentException`;
  #L3f49d6.  v0:= new `java.lang.StringBuilder`;
  #L3f49da.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f49e0.  v1:= "byteCount < 0: " @kind object;
  #L3f49e4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f49ea.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f49f0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f49f6.  v5:= temp @kind object;
  #L3f49f8.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f49fe.  throw v4;
  catch `java.lang.AssertionError` @[L3f4956..L3f49b4] goto L3f49b6;
}
procedure `void` `close`(`m.l$b` v1 @kind this) @signature `Lm/l$b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4a58.  v0:= v1.`m.l$b.c` @type ^`java.io.InputStream` @kind object;
  #L3f4a5c.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L3f4a62.  return @kind void;
}
procedure `m.t` `d`(`m.l$b` v1 @kind this) @signature `Lm/l$b;.d:()Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4a20.  v0:= v1.`m.l$b.b` @type ^`m.t` @kind object;
  #L3f4a24.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`m.l$b` v2 @kind this) @signature `Lm/l$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f4900.  v0:= new `java.lang.StringBuilder`;
  #L3f4904.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f490a.  v1:= "source(" @kind object;
  #L3f490e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4914.  v1:= v2.`m.l$b.c` @type ^`java.io.InputStream` @kind object;
  #L3f4918.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f491e.  v1:= ")" @kind object;
  #L3f4922.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4928.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f492e.  v0:= temp @kind object;
  #L3f4930.  return v0 @kind object;
}
