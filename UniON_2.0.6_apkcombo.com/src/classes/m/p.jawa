record `m.p` @kind class @AccessFlag FINAL {
}
global `m.o` `@@m.p.a` @AccessFlag STATIC;
global `long` `@@m.p.b` @AccessFlag STATIC;
procedure `void` `<init>`(`m.p` v0 @kind this) @signature `Lm/p;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3f5cb4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f5cba.  return @kind void;
}
procedure `m.o` `a`() @signature `Lm/p;.a:()Lm/o;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f5c48.  v0:= constclass @type ^`m.p` @kind object;
  #L3f5c4c.  @monitorenter v0
  #L3f5c4e.  v1:= `@@m.p.a` @type ^`m.o` @kind object;
  #L3f5c52.  if v1 == 0 then goto L3f5c7a;
  #L3f5c56.  v1:= `@@m.p.a` @type ^`m.o` @kind object;
  #L3f5c5a.  v2:= v1.`m.o.f` @type ^`m.o` @kind object;
  #L3f5c5e.  `@@m.p.a` @type ^`m.o` := v2 @kind object;
  #L3f5c62.  v2:= 0I;
  #L3f5c64.  v1.`m.o.f` @type ^`m.o` := v2 @kind object;
  #L3f5c68.  v2:= `@@m.p.b` @type ^`long` @kind wide;
  #L3f5c6c.  v4:= 8192L;
  #L3f5c70.  v2:= v2 - v4 @kind long;
  #L3f5c72.  `@@m.p.b` @type ^`long` := v2 @kind wide;
  #L3f5c76.  @monitorexit v0
  #L3f5c78.  return v1 @kind object;
  #L3f5c7a.  @monitorexit v0
  #L3f5c7c.  v0:= new `m.o`;
  #L3f5c80.  call `<init>`(v0) @signature `Lm/o;.<init>:()V` @kind direct;
  #L3f5c86.  return v0 @kind object;
  #L3f5c88.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f5c8a.  @monitorexit v0
  #L3f5c8c.  throw v1;
  catch `java.lang.Throwable` @[L3f5c4e..L3f5c7c] goto L3f5c88;
  catch `java.lang.Throwable` @[L3f5c8a..L3f5c8c] goto L3f5c88;
}
procedure `void` `a`(`m.o` v8 @kind object) @signature `Lm/p;.a:(Lm/o;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f5ccc.  v0:= v8.`m.o.f` @type ^`m.o` @kind object;
  #L3f5cd0.  if v0 != 0 then goto L3f5d32;
  #L3f5cd4.  v0:= v8.`m.o.g` @type ^`m.o` @kind object;
  #L3f5cd8.  if v0 != 0 then goto L3f5d32;
  #L3f5cdc.  v0:= v8.`m.o.d` @type ^`boolean` @kind boolean;
  #L3f5ce0.  if v0 == 0 then goto L3f5ce6;
  #L3f5ce4.  return @kind void;
  #L3f5ce6.  v0:= constclass @type ^`m.p` @kind object;
  #L3f5cea.  @monitorenter v0
  #L3f5cec.  v1:= `@@m.p.b` @type ^`long` @kind wide;
  #L3f5cf0.  v3:= 8192L;
  #L3f5cf4.  v1:= v1 + v3 @kind long;
  #L3f5cf6.  v5:= 65536L;
  #L3f5cfc.  v7:= lcmp(v1, v5);
  #L3f5d00.  if v7 <= 0 then goto L3f5d08;
  #L3f5d04.  @monitorexit v0
  #L3f5d06.  return @kind void;
  #L3f5d08.  v1:= `@@m.p.b` @type ^`long` @kind wide;
  #L3f5d0c.  v1:= v1 + v3 @kind long;
  #L3f5d0e.  `@@m.p.b` @type ^`long` := v1 @kind wide;
  #L3f5d12.  v1:= `@@m.p.a` @type ^`m.o` @kind object;
  #L3f5d16.  v8.`m.o.f` @type ^`m.o` := v1 @kind object;
  #L3f5d1a.  v1:= 0I;
  #L3f5d1c.  v8.`m.o.c` @type ^`int` := v1;
  #L3f5d20.  v8.`m.o.b` @type ^`int` := v1;
  #L3f5d24.  `@@m.p.a` @type ^`m.o` := v8 @kind object;
  #L3f5d28.  @monitorexit v0
  #L3f5d2a.  return @kind void;
  #L3f5d2c.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f5d2e.  @monitorexit v0
  #L3f5d30.  throw v8;
  #L3f5d32.  v8:= new `java.lang.IllegalArgumentException`;
  #L3f5d36.  call `<init>`(v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3f5d3c.  throw v8;
  catch `java.lang.Throwable` @[L3f5cec..L3f5d30] goto L3f5d2c;
}
