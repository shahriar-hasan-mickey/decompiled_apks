record `m.o` @kind class @AccessFlag FINAL {
  `byte`[] `m.o.a` @AccessFlag FINAL;
  `int` `m.o.b` @AccessFlag ;
  `int` `m.o.c` @AccessFlag ;
  `boolean` `m.o.d` @AccessFlag ;
  `boolean` `m.o.e` @AccessFlag ;
  `m.o` `m.o.f` @AccessFlag ;
  `m.o` `m.o.g` @AccessFlag ;
}
procedure `void` `<init>`(`m.o` v1 @kind this) @signature `Lm/o;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3f6424.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f642a.  v0:= 8192I;
  #L3f642e.  v0:= new `byte`[v0];
  #L3f6432.  v1.`m.o.a` @type ^`byte`[] := v0 @kind object;
  #L3f6436.  v0:= 1I;
  #L3f6438.  v1.`m.o.e` @type ^`boolean` := v0 @kind boolean;
  #L3f643c.  v0:= 0I;
  #L3f643e.  v1.`m.o.d` @type ^`boolean` := v0 @kind boolean;
  #L3f6442.  return @kind void;
}
procedure `void` `<init>`(`m.o` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `boolean` v4 , `boolean` v5 ) @signature `Lm/o;.<init>:([BIIZZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f6454.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f645a.  v0.`m.o.a` @type ^`byte`[] := v1 @kind object;
  #L3f645e.  v0.`m.o.b` @type ^`int` := v2;
  #L3f6462.  v0.`m.o.c` @type ^`int` := v3;
  #L3f6466.  v0.`m.o.d` @type ^`boolean` := v4 @kind boolean;
  #L3f646a.  v0.`m.o.e` @type ^`boolean` := v5 @kind boolean;
  #L3f646e.  return @kind void;
}
procedure `m.o` `a`(`m.o` v5 @kind this, `int` v6 ) @signature `Lm/o;.a:(I)Lm/o;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f63a8.  if v6 <= 0 then goto L3f6408;
  #L3f63ac.  v0:= v5.`m.o.c` @type ^`int`;
  #L3f63b0.  v1:= v5.`m.o.b` @type ^`int`;
  #L3f63b4.  v0:= v0 - v1 @kind int;
  #L3f63b6.  if v6 > v0 then goto L3f6408;
  #L3f63ba.  v0:= 1024I;
  #L3f63be.  if v6 < v0 then goto L3f63cc;
  #L3f63c2.  call temp:= `c`(v5) @signature `Lm/o;.c:()Lm/o;` @kind virtual;
  #L3f63c8.  v0:= temp @kind object;
  #L3f63ca.  goto L3f63e8;
  #L3f63cc.  call temp:= `a`() @signature `Lm/p;.a:()Lm/o;` @kind static;
  #L3f63d2.  v0:= temp @kind object;
  #L3f63d4.  v1:= v5.`m.o.a` @type ^`byte`[] @kind object;
  #L3f63d8.  v2:= v5.`m.o.b` @type ^`int`;
  #L3f63dc.  v3:= v0.`m.o.a` @type ^`byte`[] @kind object;
  #L3f63e0.  v4:= 0I;
  #L3f63e2.  call `arraycopy`(v1, v2, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f63e8.  v1:= v0.`m.o.b` @type ^`int`;
  #L3f63ec.  v1:= v1 + v6 @kind int;
  #L3f63ee.  v0.`m.o.c` @type ^`int` := v1;
  #L3f63f2.  v1:= v5.`m.o.b` @type ^`int`;
  #L3f63f6.  v1:= v1 + v6 @kind int;
  #L3f63f8.  v5.`m.o.b` @type ^`int` := v1;
  #L3f63fc.  v6:= v5.`m.o.g` @type ^`m.o` @kind object;
  #L3f6400.  call temp:= `a`(v6, v0) @signature `Lm/o;.a:(Lm/o;)Lm/o;` @kind virtual;
  #L3f6406.  return v0 @kind object;
  #L3f6408.  v6:= new `java.lang.IllegalArgumentException`;
  #L3f640c.  call `<init>`(v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3f6412.  throw v6;
}
procedure `m.o` `a`(`m.o` v1 @kind this, `m.o` v2 @kind object) @signature `Lm/o;.a:(Lm/o;)Lm/o;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6348.  v2.`m.o.g` @type ^`m.o` := v1 @kind object;
  #L3f634c.  v0:= v1.`m.o.f` @type ^`m.o` @kind object;
  #L3f6350.  v2.`m.o.f` @type ^`m.o` := v0 @kind object;
  #L3f6354.  v0:= v1.`m.o.f` @type ^`m.o` @kind object;
  #L3f6358.  v0.`m.o.g` @type ^`m.o` := v2 @kind object;
  #L3f635c.  v1.`m.o.f` @type ^`m.o` := v2 @kind object;
  #L3f6360.  return v2 @kind object;
}
procedure `void` `a`(`m.o` v4 @kind this) @signature `Lm/o;.a:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f6480.  v0:= v4.`m.o.g` @type ^`m.o` @kind object;
  #L3f6484.  if v0 == v4 then goto L3f64d4;
  #L3f6488.  v1:= v0.`m.o.e` @type ^`boolean` @kind boolean;
  #L3f648c.  if v1 != 0 then goto L3f6492;
  #L3f6490.  return @kind void;
  #L3f6492.  v1:= v4.`m.o.c` @type ^`int`;
  #L3f6496.  v2:= v4.`m.o.b` @type ^`int`;
  #L3f649a.  v1:= v1 - v2 @kind int;
  #L3f649c.  v2:= v0.`m.o.c` @type ^`int`;
  #L3f64a0.  v2:= v2 - 8192;
  #L3f64a4.  v3:= v0.`m.o.d` @type ^`boolean` @kind boolean;
  #L3f64a8.  if v3 == 0 then goto L3f64b0;
  #L3f64ac.  v0:= 0I;
  #L3f64ae.  goto L3f64b4;
  #L3f64b0.  v0:= v0.`m.o.b` @type ^`int`;
  #L3f64b4.  v2:= v2 + v0 @kind int;
  #L3f64b6.  if v1 <= v2 then goto L3f64bc;
  #L3f64ba.  return @kind void;
  #L3f64bc.  v0:= v4.`m.o.g` @type ^`m.o` @kind object;
  #L3f64c0.  call `a`(v4, v0, v1) @signature `Lm/o;.a:(Lm/o;I)V` @kind virtual;
  #L3f64c6.  call temp:= `b`(v4) @signature `Lm/o;.b:()Lm/o;` @kind virtual;
  #L3f64cc.  call `a`(v4) @signature `Lm/p;.a:(Lm/o;)V` @kind static;
  #L3f64d2.  return @kind void;
  #L3f64d4.  v0:= new `java.lang.IllegalStateException`;
  #L3f64d8.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L3f64de.  throw v0;
}
procedure `void` `a`(`m.o` v4 @kind this, `m.o` v5 @kind object, `int` v6 ) @signature `Lm/o;.a:(Lm/o;I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f64f0.  v0:= v5.`m.o.e` @type ^`boolean` @kind boolean;
  #L3f64f4.  if v0 == 0 then goto L3f6584;
  #L3f64f8.  v0:= v5.`m.o.c` @type ^`int`;
  #L3f64fc.  v1:= v0 + v6 @kind int;
  #L3f6500.  v2:= 8192I;
  #L3f6504.  if v1 <= v2 then goto L3f6558;
  #L3f6508.  v1:= v5.`m.o.d` @type ^`boolean` @kind boolean;
  #L3f650c.  if v1 != 0 then goto L3f654c;
  #L3f6510.  v1:= v0 + v6 @kind int;
  #L3f6514.  v3:= v5.`m.o.b` @type ^`int`;
  #L3f6518.  v1:= v1 - v3 @kind int;
  #L3f651a.  if v1 > v2 then goto L3f6540;
  #L3f651e.  v1:= v5.`m.o.a` @type ^`byte`[] @kind object;
  #L3f6522.  v0:= v0 - v3 @kind int;
  #L3f6524.  v2:= 0I;
  #L3f6526.  call `arraycopy`(v1, v3, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f652c.  v0:= v5.`m.o.c` @type ^`int`;
  #L3f6530.  v1:= v5.`m.o.b` @type ^`int`;
  #L3f6534.  v0:= v0 - v1 @kind int;
  #L3f6536.  v5.`m.o.c` @type ^`int` := v0;
  #L3f653a.  v5.`m.o.b` @type ^`int` := v2;
  #L3f653e.  goto L3f6558;
  #L3f6540.  v5:= new `java.lang.IllegalArgumentException`;
  #L3f6544.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3f654a.  throw v5;
  #L3f654c.  v5:= new `java.lang.IllegalArgumentException`;
  #L3f6550.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3f6556.  throw v5;
  #L3f6558.  v0:= v4.`m.o.a` @type ^`byte`[] @kind object;
  #L3f655c.  v1:= v4.`m.o.b` @type ^`int`;
  #L3f6560.  v2:= v5.`m.o.a` @type ^`byte`[] @kind object;
  #L3f6564.  v3:= v5.`m.o.c` @type ^`int`;
  #L3f6568.  call `arraycopy`(v0, v1, v2, v3, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f656e.  v0:= v5.`m.o.c` @type ^`int`;
  #L3f6572.  v0:= v0 + v6 @kind int;
  #L3f6574.  v5.`m.o.c` @type ^`int` := v0;
  #L3f6578.  v5:= v4.`m.o.b` @type ^`int`;
  #L3f657c.  v5:= v5 + v6 @kind int;
  #L3f657e.  v4.`m.o.b` @type ^`int` := v5;
  #L3f6582.  return @kind void;
  #L3f6584.  v5:= new `java.lang.IllegalArgumentException`;
  #L3f6588.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3f658e.  throw v5;
}
procedure `m.o` `b`(`m.o` v4 @kind this) @signature `Lm/o;.b:()Lm/o;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f630c.  v0:= v4.`m.o.f` @type ^`m.o` @kind object;
  #L3f6310.  v1:= 0I;
  #L3f6312.  if v0 == v4 then goto L3f6318;
  #L3f6316.  goto L3f631a;
  #L3f6318.  v0:= v1 @kind object;
  #L3f631a.  v2:= v4.`m.o.g` @type ^`m.o` @kind object;
  #L3f631e.  v3:= v4.`m.o.f` @type ^`m.o` @kind object;
  #L3f6322.  v2.`m.o.f` @type ^`m.o` := v3 @kind object;
  #L3f6326.  v3:= v4.`m.o.f` @type ^`m.o` @kind object;
  #L3f632a.  v3.`m.o.g` @type ^`m.o` := v2 @kind object;
  #L3f632e.  v4.`m.o.f` @type ^`m.o` := v1 @kind object;
  #L3f6332.  v4.`m.o.g` @type ^`m.o` := v1 @kind object;
  #L3f6336.  return v0 @kind object;
}
procedure `m.o` `c`(`m.o` v7 @kind this) @signature `Lm/o;.c:()Lm/o;` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f6374.  v0:= 1I;
  #L3f6376.  v7.`m.o.d` @type ^`boolean` := v0 @kind boolean;
  #L3f637a.  v0:= new `m.o`;
  #L3f637e.  v2:= v7.`m.o.a` @type ^`byte`[] @kind object;
  #L3f6382.  v3:= v7.`m.o.b` @type ^`int`;
  #L3f6386.  v4:= v7.`m.o.c` @type ^`int`;
  #L3f638a.  v5:= 1I;
  #L3f638c.  v6:= 0I;
  #L3f638e.  v1:= v0 @kind object;
  #L3f6390.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lm/o;.<init>:([BIIZZ)V` @kind direct;
  #L3f6396.  return v0 @kind object;
}
