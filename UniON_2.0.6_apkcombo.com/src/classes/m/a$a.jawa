record `m.a$a` @kind class @AccessFlag  extends `m.r` @kind interface {
  `m.r` `m.a$a.b` @AccessFlag FINAL_SYNTHETIC;
  `m.a` `m.a$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`m.a$a` v0 @kind this, `m.a` v1 @kind object, `m.r` v2 @kind object) @signature `Lm/a$a;.<init>:(Lm/a;Lm/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f0e0c.  v0.`m.a$a.c` @type ^`m.a` := v1 @kind object;
  #L3f0e10.  v0.`m.a$a.b` @type ^`m.r` := v2 @kind object;
  #L3f0e14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f0e1a.  return @kind void;
}
procedure `void` `b`(`m.a$a` v6 @kind this, `m.c` v7 @kind object, `long` v8 ) @signature `Lm/a$a;.b:(Lm/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f0f04.  v0:= v7.`m.c.c` @type ^`long` @kind wide;
  #L3f0f08.  v2:= 0L;
  #L3f0f0c.  v4:= v8 @kind wide;
  #L3f0f0e.  call `a`(v0, v2, v4) @signature `Lm/u;.a:(JJJ)V` @kind static;
  #L3f0f14.  v0:= 0L;
  #L3f0f18.  v2:= lcmp(v8, v0);
  #L3f0f1c.  if v2 <= 0 then goto L3f0f98;
  #L3f0f20.  v2:= v7.`m.c.b` @type ^`m.o` @kind object;
  #L3f0f24.  v3:= 65536L;
  #L3f0f2a.  v5:= lcmp(v0, v3);
  #L3f0f2e.  if v5 >= 0 then goto L3f0f52;
  #L3f0f32.  v3:= v2.`m.o.c` @type ^`int`;
  #L3f0f36.  v4:= v2.`m.o.b` @type ^`int`;
  #L3f0f3a.  v3:= v3 - v4 @kind int;
  #L3f0f3c.  v3:= (`long`) v3 @kind i2l;
  #L3f0f3e.  v0:= v0 + v3 @kind long;
  #L3f0f40.  v3:= lcmp(v0, v8);
  #L3f0f44.  if v3 < 0 then goto L3f0f4c;
  #L3f0f48.  v0:= v8 @kind wide;
  #L3f0f4a.  goto L3f0f52;
  #L3f0f4c.  v2:= v2.`m.o.f` @type ^`m.o` @kind object;
  #L3f0f50.  goto L3f0f24;
  #L3f0f52.  v2:= 0I;
  #L3f0f54.  v3:= v6.`m.a$a.c` @type ^`m.a` @kind object;
  #L3f0f58.  call `g`(v3) @signature `Lm/a;.g:()V` @kind virtual;
  #L3f0f5e.  v3:= v6.`m.a$a.b` @type ^`m.r` @kind object;
  #L3f0f62.  call `b`(v3, v7, v0) @signature `Lm/r;.b:(Lm/c;J)V` @kind interface;
  #L3f0f68.  v8:= v8 - v0 @kind long;
  #L3f0f6a.  v0:= 1I;
  #L3f0f6c.  v1:= v6.`m.a$a.c` @type ^`m.a` @kind object;
  #L3f0f70.  call `a`(v1, v0) @signature `Lm/a;.a:(Z)V` @kind virtual;
  #L3f0f76.  goto L3f0f14;
  #L3f0f78.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0f7a.  goto L3f0f8c;
  #L3f0f7c.  v7:= Exception @type ^`java.io.IOException` @kind object;
  #L3f0f7e.  v8:= v6.`m.a$a.c` @type ^`m.a` @kind object;
  #L3f0f82.  call temp:= `a`(v8, v7) @signature `Lm/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L3f0f88.  v7:= temp @kind object;
  #L3f0f8a.  throw v7;
  #L3f0f8c.  v8:= v6.`m.a$a.c` @type ^`m.a` @kind object;
  #L3f0f90.  call `a`(v8, v2) @signature `Lm/a;.a:(Z)V` @kind virtual;
  #L3f0f96.  throw v7;
  #L3f0f98.  return @kind void;
  catch `java.io.IOException` @[L3f0f5e..L3f0f68] goto L3f0f7c;
  catch `java.lang.Throwable` @[L3f0f5e..L3f0f68] goto L3f0f78;
  catch `java.lang.Throwable` @[L3f0f7e..L3f0f8c] goto L3f0f78;
}
procedure `void` `close`(`m.a$a` v3 @kind this) @signature `Lm/a$a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f0e2c.  v0:= v3.`m.a$a.c` @type ^`m.a` @kind object;
  #L3f0e30.  call `g`(v0) @signature `Lm/a;.g:()V` @kind virtual;
  #L3f0e36.  v0:= v3.`m.a$a.b` @type ^`m.r` @kind object;
  #L3f0e3a.  call `close`(v0) @signature `Lm/r;.close:()V` @kind interface;
  #L3f0e40.  v0:= 1I;
  #L3f0e42.  v1:= v3.`m.a$a.c` @type ^`m.a` @kind object;
  #L3f0e46.  call `a`(v1, v0) @signature `Lm/a;.a:(Z)V` @kind virtual;
  #L3f0e4c.  return @kind void;
  #L3f0e4e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0e50.  goto L3f0e62;
  #L3f0e52.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L3f0e54.  v1:= v3.`m.a$a.c` @type ^`m.a` @kind object;
  #L3f0e58.  call temp:= `a`(v1, v0) @signature `Lm/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L3f0e5e.  v0:= temp @kind object;
  #L3f0e60.  throw v0;
  #L3f0e62.  v1:= v3.`m.a$a.c` @type ^`m.a` @kind object;
  #L3f0e66.  v2:= 0I;
  #L3f0e68.  call `a`(v1, v2) @signature `Lm/a;.a:(Z)V` @kind virtual;
  #L3f0e6e.  throw v0;
  catch `java.io.IOException` @[L3f0e36..L3f0e40] goto L3f0e52;
  catch `java.lang.Throwable` @[L3f0e36..L3f0e40] goto L3f0e4e;
  catch `java.lang.Throwable` @[L3f0e54..L3f0e62] goto L3f0e4e;
}
procedure `m.t` `d`(`m.a$a` v1 @kind this) @signature `Lm/a$a;.d:()Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f0df4.  v0:= v1.`m.a$a.c` @type ^`m.a` @kind object;
  #L3f0df8.  return v0 @kind object;
}
procedure `void` `flush`(`m.a$a` v3 @kind this) @signature `Lm/a$a;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f0e98.  v0:= v3.`m.a$a.c` @type ^`m.a` @kind object;
  #L3f0e9c.  call `g`(v0) @signature `Lm/a;.g:()V` @kind virtual;
  #L3f0ea2.  v0:= v3.`m.a$a.b` @type ^`m.r` @kind object;
  #L3f0ea6.  call `flush`(v0) @signature `Lm/r;.flush:()V` @kind interface;
  #L3f0eac.  v0:= 1I;
  #L3f0eae.  v1:= v3.`m.a$a.c` @type ^`m.a` @kind object;
  #L3f0eb2.  call `a`(v1, v0) @signature `Lm/a;.a:(Z)V` @kind virtual;
  #L3f0eb8.  return @kind void;
  #L3f0eba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f0ebc.  goto L3f0ece;
  #L3f0ebe.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L3f0ec0.  v1:= v3.`m.a$a.c` @type ^`m.a` @kind object;
  #L3f0ec4.  call temp:= `a`(v1, v0) @signature `Lm/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L3f0eca.  v0:= temp @kind object;
  #L3f0ecc.  throw v0;
  #L3f0ece.  v1:= v3.`m.a$a.c` @type ^`m.a` @kind object;
  #L3f0ed2.  v2:= 0I;
  #L3f0ed4.  call `a`(v1, v2) @signature `Lm/a;.a:(Z)V` @kind virtual;
  #L3f0eda.  throw v0;
  catch `java.io.IOException` @[L3f0ea2..L3f0eac] goto L3f0ebe;
  catch `java.lang.Throwable` @[L3f0ea2..L3f0eac] goto L3f0eba;
  catch `java.lang.Throwable` @[L3f0ec0..L3f0ece] goto L3f0eba;
}
procedure `java.lang.String` `toString`(`m.a$a` v2 @kind this) @signature `Lm/a$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f0db0.  v0:= new `java.lang.StringBuilder`;
  #L3f0db4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f0dba.  v1:= "AsyncTimeout.sink(" @kind object;
  #L3f0dbe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f0dc4.  v1:= v2.`m.a$a.b` @type ^`m.r` @kind object;
  #L3f0dc8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f0dce.  v1:= ")" @kind object;
  #L3f0dd2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f0dd8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f0dde.  v0:= temp @kind object;
  #L3f0de0.  return v0 @kind object;
}
