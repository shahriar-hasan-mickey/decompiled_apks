record `m.g` @kind class @AccessFlag PUBLIC_ABSTRACT extends `m.r` @kind interface {
  `m.r` `m.g.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`m.g` v1 @kind this, `m.r` v2 @kind object) @signature `Lm/g;.<init>:(Lm/r;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f3d84.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f3d8a.  if v2 == 0 then goto L3f3d94;
  #L3f3d8e.  v1.`m.g.b` @type ^`m.r` := v2 @kind object;
  #L3f3d92.  return @kind void;
  #L3f3d94.  v2:= new `java.lang.IllegalArgumentException`;
  #L3f3d98.  v0:= "delegate == null" @kind object;
  #L3f3d9c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3da2.  throw v2;
}
procedure `void` `b`(`m.g` v1 @kind this, `m.c` v2 @kind object, `long` v3 ) @signature `Lm/g;.b:(Lm/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3dec.  v0:= v1.`m.g.b` @type ^`m.r` @kind object;
  #L3f3df0.  call `b`(v0, v2, v3) @signature `Lm/r;.b:(Lm/c;J)V` @kind interface;
  #L3f3df6.  return @kind void;
}
procedure `void` `close`(`m.g` v1 @kind this) @signature `Lm/g;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3db4.  v0:= v1.`m.g.b` @type ^`m.r` @kind object;
  #L3f3db8.  call `close`(v0) @signature `Lm/r;.close:()V` @kind interface;
  #L3f3dbe.  return @kind void;
}
procedure `m.t` `d`(`m.g` v1 @kind this) @signature `Lm/g;.d:()Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3d64.  v0:= v1.`m.g.b` @type ^`m.r` @kind object;
  #L3f3d68.  call temp:= `d`(v0) @signature `Lm/r;.d:()Lm/t;` @kind interface;
  #L3f3d6e.  v0:= temp @kind object;
  #L3f3d70.  return v0 @kind object;
}
procedure `void` `flush`(`m.g` v1 @kind this) @signature `Lm/g;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3dd0.  v0:= v1.`m.g.b` @type ^`m.r` @kind object;
  #L3f3dd4.  call `flush`(v0) @signature `Lm/r;.flush:()V` @kind interface;
  #L3f3dda.  return @kind void;
}
procedure `java.lang.String` `toString`(`m.g` v2 @kind this) @signature `Lm/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3d04.  v0:= new `java.lang.StringBuilder`;
  #L3f3d08.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f3d0e.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3f3d14.  v1:= temp @kind object;
  #L3f3d16.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L3f3d1c.  v1:= temp @kind object;
  #L3f3d1e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3d24.  v1:= "(" @kind object;
  #L3f3d28.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3d2e.  v1:= v2.`m.g.b` @type ^`m.r` @kind object;
  #L3f3d32.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f3d38.  v1:= temp @kind object;
  #L3f3d3a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3d40.  v1:= ")" @kind object;
  #L3f3d44.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3d4a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f3d50.  v0:= temp @kind object;
  #L3f3d52.  return v0 @kind object;
}
