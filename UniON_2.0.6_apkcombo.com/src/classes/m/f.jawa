record `m.f` @kind class @AccessFlag PUBLIC extends `java.io.Serializable` @kind interface, `java.lang.Comparable` @kind interface {
  `byte`[] `m.f.b` @AccessFlag FINAL;
  `int` `m.f.c` @AccessFlag TRANSIENT;
  `java.lang.String` `m.f.d` @AccessFlag TRANSIENT;
}
global `char`[] `@@m.f.e` @AccessFlag STATIC_FINAL;
global `m.f` `@@m.f.f` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lm/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f3c68.  v0:= 16I;
  #L3f3c6c.  v0:= new `char`[v0];
  #L3f3c70.  goto L3f3c90;
  #L3f3c76.  `@@m.f.e` @type ^`char`[] := v0 @kind object;
  #L3f3c7a.  v0:= 0I;
  #L3f3c7c.  v0:= new `byte`[v0];
  #L3f3c80.  call temp:= `a`(v0) @signature `Lm/f;.a:([B)Lm/f;` @kind static;
  #L3f3c86.  v0:= temp @kind object;
  #L3f3c88.  `@@m.f.f` @type ^`m.f` := v0 @kind object;
  #L3f3c8c.  return @kind void;
  #L3f3c8e.  
  #L3f3c90.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L3f3cb7.  goto L3f3c76;
}
procedure `void` `<init>`(`m.f` v0 @kind this, `byte`[] v1 @kind object) @signature `Lm/f;.<init>:([B)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f3cc8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f3cce.  v0.`m.f.b` @type ^`byte`[] := v1 @kind object;
  #L3f3cd2.  return @kind void;
}
procedure `int` `a`(`char` v3 ) @signature `Lm/f;.a:(C)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f3688.  v0:= 48I;
  #L3f368c.  if v3 < v0 then goto L3f369c;
  #L3f3690.  v1:= 57I;
  #L3f3694.  if v3 > v1 then goto L3f369c;
  #L3f3698.  v3:= v3 - v0 @kind int;
  #L3f369a.  return v3;
  #L3f369c.  v0:= 97I;
  #L3f36a0.  if v3 < v0 then goto L3f36b4;
  #L3f36a4.  v1:= 102I;
  #L3f36a8.  if v3 > v1 then goto L3f36b4;
  #L3f36ac.  v3:= v3 - v0 @kind int;
  #L3f36ae.  v3:= v3 + 10;
  #L3f36b2.  return v3;
  #L3f36b4.  v0:= 65I;
  #L3f36b8.  if v3 < v0 then goto L3f36c6;
  #L3f36bc.  v1:= 70I;
  #L3f36c0.  if v3 > v1 then goto L3f36c6;
  #L3f36c4.  goto L3f36ac;
  #L3f36c6.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f36ca.  v1:= new `java.lang.StringBuilder`;
  #L3f36ce.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f36d4.  v2:= "Unexpected hex digit: " @kind object;
  #L3f36d8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f36de.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f36e4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f36ea.  v3:= temp @kind object;
  #L3f36ec.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f36f2.  throw v0;
}
procedure `int` `a`(`java.lang.String` v5 @kind object, `int` v6 ) @signature `Lm/f;.a:(Ljava/lang/String;I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f3584.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f358a.  v0:= temp;
  #L3f358c.  v1:= 0I;
  #L3f358e.  v2:= 0I;
  #L3f3590.  if v1 >= v0 then goto L3f35dc;
  #L3f3594.  if v2 != v6 then goto L3f359a;
  #L3f3598.  return v1;
  #L3f359a.  call temp:= `codePointAt`(v5, v1) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L3f35a0.  v3:= temp;
  #L3f35a2.  call temp:= `isISOControl`(v3) @signature `Ljava/lang/Character;.isISOControl:(I)Z` @kind static;
  #L3f35a8.  v4:= temp;
  #L3f35aa.  if v4 == 0 then goto L3f35be;
  #L3f35ae.  v4:= 10I;
  #L3f35b2.  if v3 == v4 then goto L3f35be;
  #L3f35b6.  v4:= 13I;
  #L3f35ba.  if v3 != v4 then goto L3f35c8;
  #L3f35be.  v4:= 65533I;
  #L3f35c4.  if v3 != v4 then goto L3f35cc;
  #L3f35c8.  v5:= -1I;
  #L3f35ca.  return v5;
  #L3f35cc.  v2:= v2 + 1;
  #L3f35d0.  call temp:= `charCount`(v3) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L3f35d6.  v3:= temp;
  #L3f35d8.  v1:= v1 + v3 @kind int;
  #L3f35da.  goto L3f3590;
  #L3f35dc.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f35e2.  v5:= temp;
  #L3f35e4.  return v5;
}
procedure `m.f` `a`(`java.lang.String` v4 @kind object) @signature `Lm/f;.a:(Ljava/lang/String;)Lm/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f3970.  if v4 == 0 then goto L3f3a0e;
  #L3f3974.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f397a.  v0:= temp;
  #L3f397c.  v0:= v0 %% 2;
  #L3f3980.  if v0 != 0 then goto L3f39e0;
  #L3f3984.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f398a.  v0:= temp;
  #L3f398c.  v0:= v0 / 2;
  #L3f3990.  v0:= new `byte`[v0];
  #L3f3994.  v1:= 0I;
  #L3f3996.  v2:= length @variable v0;
  #L3f3998.  if v1 >= v2 then goto L3f39d6;
  #L3f399c.  v2:= v1 * 2;
  #L3f39a0.  call temp:= `charAt`(v4, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3f39a6.  v3:= temp;
  #L3f39a8.  call temp:= `a`(v3) @signature `Lm/f;.a:(C)I` @kind static;
  #L3f39ae.  v3:= temp;
  #L3f39b0.  v3:= v3 ^< 4;
  #L3f39b4.  v2:= v2 + 1;
  #L3f39b8.  call temp:= `charAt`(v4, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3f39be.  v2:= temp;
  #L3f39c0.  call temp:= `a`(v2) @signature `Lm/f;.a:(C)I` @kind static;
  #L3f39c6.  v2:= temp;
  #L3f39c8.  v3:= v3 + v2 @kind int;
  #L3f39ca.  v2:= (`byte`) v3 @kind i2b;
  #L3f39cc.  v0[v1]:= v2 @kind byte;
  #L3f39d0.  v1:= v1 + 1;
  #L3f39d4.  goto L3f3996;
  #L3f39d6.  call temp:= `a`(v0) @signature `Lm/f;.a:([B)Lm/f;` @kind static;
  #L3f39dc.  v4:= temp @kind object;
  #L3f39de.  return v4 @kind object;
  #L3f39e0.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f39e4.  v1:= new `java.lang.StringBuilder`;
  #L3f39e8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f39ee.  v2:= "Unexpected hex string: " @kind object;
  #L3f39f2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f39f8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f39fe.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f3a04.  v4:= temp @kind object;
  #L3f3a06.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3a0c.  throw v0;
  #L3f3a0e.  v4:= new `java.lang.IllegalArgumentException`;
  #L3f3a12.  v0:= "hex == null" @kind object;
  #L3f3a16.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3a1c.  throw v4;
}
procedure `m.f` `a`(`byte`[] v1 @kind object) @signature `Lm/f;.a:([B)Lm/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f3abc.  if v1 == 0 then goto L3f3ad8;
  #L3f3ac0.  v0:= new `m.f`;
  #L3f3ac4.  call temp:= `clone`(v1) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L3f3aca.  v1:= temp @kind object;
  #L3f3acc.  v1:= (`byte`[]) v1 @kind object;
  #L3f3ad0.  call `<init>`(v0, v1) @signature `Lm/f;.<init>:([B)V` @kind direct;
  #L3f3ad6.  return v0 @kind object;
  #L3f3ad8.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f3adc.  v0:= "data == null" @kind object;
  #L3f3ae0.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3ae6.  throw v1;
}
procedure `m.f` `b`(`m.f` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lm/f;.b:(Ljava/lang/String;)Lm/f;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f3a30.  call temp:= `getInstance`(v2) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L3f3a36.  v2:= temp @kind object;
  #L3f3a38.  v0:= v1.`m.f.b` @type ^`byte`[] @kind object;
  #L3f3a3c.  call temp:= `digest`(v2, v0) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L3f3a42.  v2:= temp @kind object;
  #L3f3a44.  call temp:= `a`(v2) @signature `Lm/f;.a:([B)Lm/f;` @kind static;
  #L3f3a4a.  v2:= temp @kind object;
  #L3f3a4c.  return v2 @kind object;
  #L3f3a4e.  v2:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L3f3a50.  v0:= new `java.lang.AssertionError`;
  #L3f3a54.  call `<init>`(v0, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3f3a5a.  throw v0;
  catch `java.security.NoSuchAlgorithmException` @[L3f3a30..L3f3a4c] goto L3f3a4e;
}
procedure `m.f` `c`(`java.lang.String` v2 @kind object) @signature `Lm/f;.c:(Ljava/lang/String;)Lm/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f3a7c.  if v2 == 0 then goto L3f3a9c;
  #L3f3a80.  v0:= new `m.f`;
  #L3f3a84.  v1:= `@@m.u.a` @type ^`java.nio.charset.Charset` @kind object;
  #L3f3a88.  call temp:= `getBytes`(v2, v1) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L3f3a8e.  v1:= temp @kind object;
  #L3f3a90.  call `<init>`(v0, v1) @signature `Lm/f;.<init>:([B)V` @kind direct;
  #L3f3a96.  v0.`m.f.d` @type ^`java.lang.String` := v2 @kind object;
  #L3f3a9a.  return v0 @kind object;
  #L3f3a9c.  v2:= new `java.lang.IllegalArgumentException`;
  #L3f3aa0.  v0:= "s == null" @kind object;
  #L3f3aa4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3aaa.  throw v2;
}
procedure `byte` `a`(`m.f` v1 @kind this, `int` v2 ) @signature `Lm/f;.a:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3544.  v0:= v1.`m.f.b` @type ^`byte`[] @kind object;
  #L3f3548.  v2:= v0[v2] @kind byte;
  #L3f354c.  return v2;
}
procedure `int` `a`(`m.f` v9 @kind this, `m.f` v10 @kind object) @signature `Lm/f;.a:(Lm/f;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f3618.  call temp:= `l`(v9) @signature `Lm/f;.l:()I` @kind virtual;
  #L3f361e.  v0:= temp;
  #L3f3620.  call temp:= `l`(v10) @signature `Lm/f;.l:()I` @kind virtual;
  #L3f3626.  v1:= temp;
  #L3f3628.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3f362e.  v2:= temp;
  #L3f3630.  v3:= 0I;
  #L3f3632.  v4:= 0I;
  #L3f3634.  v5:= -1I;
  #L3f3636.  v6:= 1I;
  #L3f3638.  if v4 >= v2 then goto L3f3668;
  #L3f363c.  call temp:= `a`(v9, v4) @signature `Lm/f;.a:(I)B` @kind virtual;
  #L3f3642.  v7:= temp;
  #L3f3644.  v7:= v7 ^& 255;
  #L3f3648.  call temp:= `a`(v10, v4) @signature `Lm/f;.a:(I)B` @kind virtual;
  #L3f364e.  v8:= temp;
  #L3f3650.  v8:= v8 ^& 255;
  #L3f3654.  if v7 != v8 then goto L3f365e;
  #L3f3658.  v4:= v4 + 1;
  #L3f365c.  goto L3f3634;
  #L3f365e.  if v7 >= v8 then goto L3f3664;
  #L3f3662.  goto L3f3666;
  #L3f3664.  v5:= 1I;
  #L3f3666.  return v5;
  #L3f3668.  if v0 != v1 then goto L3f366e;
  #L3f366c.  return v3;
  #L3f366e.  if v0 >= v1 then goto L3f3674;
  #L3f3672.  goto L3f3676;
  #L3f3674.  v5:= 1I;
  #L3f3676.  return v5;
}
procedure `m.f` `a`(`m.f` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lm/f;.a:(II)Lm/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f3b38.  if v4 < 0 then goto L3f3bc4;
  #L3f3b3c.  v0:= v3.`m.f.b` @type ^`byte`[] @kind object;
  #L3f3b40.  v1:= length @variable v0;
  #L3f3b42.  if v5 > v1 then goto L3f3b86;
  #L3f3b46.  v1:= v5 - v4 @kind int;
  #L3f3b4a.  if v1 < 0 then goto L3f3b76;
  #L3f3b4e.  if v4 != 0 then goto L3f3b5a;
  #L3f3b52.  v0:= length @variable v0;
  #L3f3b54.  if v5 != v0 then goto L3f3b5a;
  #L3f3b58.  return v3 @kind object;
  #L3f3b5a.  v5:= new `byte`[v1];
  #L3f3b5e.  v0:= v3.`m.f.b` @type ^`byte`[] @kind object;
  #L3f3b62.  v2:= 0I;
  #L3f3b64.  call `arraycopy`(v0, v4, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f3b6a.  v4:= new `m.f`;
  #L3f3b6e.  call `<init>`(v4, v5) @signature `Lm/f;.<init>:([B)V` @kind direct;
  #L3f3b74.  return v4 @kind object;
  #L3f3b76.  v4:= new `java.lang.IllegalArgumentException`;
  #L3f3b7a.  v5:= "endIndex < beginIndex" @kind object;
  #L3f3b7e.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3b84.  throw v4;
  #L3f3b86.  v4:= new `java.lang.IllegalArgumentException`;
  #L3f3b8a.  v5:= new `java.lang.StringBuilder`;
  #L3f3b8e.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f3b94.  v0:= "endIndex > length(" @kind object;
  #L3f3b98.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3b9e.  v0:= v3.`m.f.b` @type ^`byte`[] @kind object;
  #L3f3ba2.  v0:= length @variable v0;
  #L3f3ba4.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3baa.  v0:= ")" @kind object;
  #L3f3bae.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3bb4.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f3bba.  v5:= temp @kind object;
  #L3f3bbc.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3bc2.  throw v4;
  #L3f3bc4.  v4:= new `java.lang.IllegalArgumentException`;
  #L3f3bc8.  v5:= "beginIndex < 0" @kind object;
  #L3f3bcc.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3bd2.  throw v4;
}
procedure `void` `a`(`m.f` v3 @kind this, `m.c` v4 @kind object) @signature `Lm/f;.a:(Lm/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3f3ce4.  v0:= v3.`m.f.b` @type ^`byte`[] @kind object;
  #L3f3ce8.  v1:= length @variable v0;
  #L3f3cea.  v2:= 0I;
  #L3f3cec.  call temp:= `write`(v4, v0, v2, v1) @signature `Lm/c;.write:([BII)Lm/c;` @kind virtual;
  #L3f3cf2.  return @kind void;
}
procedure `boolean` `a`(`m.f` v1 @kind this, `int` v2 , `m.f` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lm/f;.a:(ILm/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3500.  v0:= v1.`m.f.b` @type ^`byte`[] @kind object;
  #L3f3504.  call temp:= `a`(v3, v4, v0, v2, v5) @signature `Lm/f;.a:(I[BII)Z` @kind virtual;
  #L3f350a.  v2:= temp;
  #L3f350c.  return v2;
}
procedure `boolean` `a`(`m.f` v2 @kind this, `int` v3 , `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lm/f;.a:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f34c0.  if v3 < 0 then goto L3f34ec;
  #L3f34c4.  v0:= v2.`m.f.b` @type ^`byte`[] @kind object;
  #L3f34c8.  v1:= length @variable v0;
  #L3f34ca.  v1:= v1 - v6 @kind int;
  #L3f34cc.  if v3 > v1 then goto L3f34ec;
  #L3f34d0.  if v5 < 0 then goto L3f34ec;
  #L3f34d4.  v1:= length @variable v4;
  #L3f34d6.  v1:= v1 - v6 @kind int;
  #L3f34d8.  if v5 > v1 then goto L3f34ec;
  #L3f34dc.  call temp:= `a`(v0, v3, v4, v5, v6) @signature `Lm/u;.a:([BI[BII)Z` @kind static;
  #L3f34e2.  v3:= temp;
  #L3f34e4.  if v3 == 0 then goto L3f34ec;
  #L3f34e8.  v3:= 1I;
  #L3f34ea.  goto L3f34ee;
  #L3f34ec.  v3:= 0I;
  #L3f34ee.  return v3;
}
procedure `java.lang.String` `b`(`m.f` v1 @kind this) @signature `Lm/f;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3748.  v0:= v1.`m.f.b` @type ^`byte`[] @kind object;
  #L3f374c.  call temp:= `a`(v0) @signature `Lm/b;.a:([B)Ljava/lang/String;` @kind static;
  #L3f3752.  v0:= temp @kind object;
  #L3f3754.  return v0 @kind object;
}
procedure `boolean` `b`(`m.f` v2 @kind this, `m.f` v3 @kind object) @signature `Lm/f;.b:(Lm/f;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f3520.  call temp:= `l`(v3) @signature `Lm/f;.l:()I` @kind virtual;
  #L3f3526.  v0:= temp;
  #L3f3528.  v1:= 0I;
  #L3f352a.  call temp:= `a`(v2, v1, v3, v1, v0) @signature `Lm/f;.a:(ILm/f;II)Z` @kind virtual;
  #L3f3530.  v3:= temp;
  #L3f3532.  return v3;
}
procedure `int` `compareTo`(`m.f` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm/f;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f35f8.  v1:= (`m.f`) v1 @kind object;
  #L3f35fc.  call temp:= `a`(v0, v1) @signature `Lm/f;.a:(Lm/f;)I` @kind virtual;
  #L3f3602.  v1:= temp;
  #L3f3604.  return v1;
}
procedure `java.lang.String` `e`(`m.f` v9 @kind this) @signature `Lm/f;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f3768.  v0:= v9.`m.f.b` @type ^`byte`[] @kind object;
  #L3f376c.  v1:= length @variable v0;
  #L3f376e.  v1:= v1 * 2;
  #L3f3772.  v1:= new `char`[v1];
  #L3f3776.  v2:= length @variable v0;
  #L3f3778.  v3:= 0I;
  #L3f377a.  v4:= 0I;
  #L3f377c.  if v3 >= v2 then goto L3f37b2;
  #L3f3780.  v5:= v0[v3] @kind byte;
  #L3f3784.  v6:= v4 + 1;
  #L3f3788.  v7:= `@@m.f.e` @type ^`char`[] @kind object;
  #L3f378c.  v8:= v5 ^> 4;
  #L3f3790.  v8:= v8 ^& 15;
  #L3f3794.  v8:= v7[v8] @kind char;
  #L3f3798.  v1[v4]:= v8 @kind char;
  #L3f379c.  v4:= v6 + 1;
  #L3f37a0.  v5:= v5 ^& 15;
  #L3f37a4.  v5:= v7[v5] @kind char;
  #L3f37a8.  v1[v6]:= v5 @kind char;
  #L3f37ac.  v3:= v3 + 1;
  #L3f37b0.  goto L3f377c;
  #L3f37b2.  v0:= new `java.lang.String`;
  #L3f37b6.  call `<init>`(v0, v1) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L3f37bc.  return v0 @kind object;
}
procedure `boolean` `equals`(`m.f` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lm/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f3474.  v0:= 1I;
  #L3f3476.  if v6 != v5 then goto L3f347c;
  #L3f347a.  return v0;
  #L3f347c.  v1:= instanceof @variable v6 @type ^`m.f` @kind boolean;
  #L3f3480.  v2:= 0I;
  #L3f3482.  if v1 == 0 then goto L3f34ac;
  #L3f3486.  v6:= (`m.f`) v6 @kind object;
  #L3f348a.  call temp:= `l`(v6) @signature `Lm/f;.l:()I` @kind virtual;
  #L3f3490.  v1:= temp;
  #L3f3492.  v3:= v5.`m.f.b` @type ^`byte`[] @kind object;
  #L3f3496.  v4:= length @variable v3;
  #L3f3498.  if v1 != v4 then goto L3f34ac;
  #L3f349c.  v1:= length @variable v3;
  #L3f349e.  call temp:= `a`(v6, v2, v3, v2, v1) @signature `Lm/f;.a:(I[BII)Z` @kind virtual;
  #L3f34a4.  v6:= temp;
  #L3f34a6.  if v6 == 0 then goto L3f34ac;
  #L3f34aa.  goto L3f34ae;
  #L3f34ac.  v0:= 0I;
  #L3f34ae.  return v0;
}
procedure `m.f` `h`(`m.f` v1 @kind this) @signature `Lm/f;.h:()Lm/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3af8.  v0:= "SHA-1" @kind object;
  #L3f3afc.  call temp:= `b`(v1, v0) @signature `Lm/f;.b:(Ljava/lang/String;)Lm/f;` @kind direct;
  #L3f3b02.  v0:= temp @kind object;
  #L3f3b04.  return v0 @kind object;
}
procedure `int` `hashCode`(`m.f` v1 @kind this) @signature `Lm/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3704.  v0:= v1.`m.f.c` @type ^`int`;
  #L3f3708.  if v0 == 0 then goto L3f370e;
  #L3f370c.  goto L3f371e;
  #L3f370e.  v0:= v1.`m.f.b` @type ^`byte`[] @kind object;
  #L3f3712.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L3f3718.  v0:= temp;
  #L3f371a.  v1.`m.f.c` @type ^`int` := v0;
  #L3f371e.  return v0;
}
procedure `m.f` `k`(`m.f` v1 @kind this) @signature `Lm/f;.k:()Lm/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3b18.  v0:= "SHA-256" @kind object;
  #L3f3b1c.  call temp:= `b`(v1, v0) @signature `Lm/f;.b:(Ljava/lang/String;)Lm/f;` @kind direct;
  #L3f3b22.  v0:= temp @kind object;
  #L3f3b24.  return v0 @kind object;
}
procedure `int` `l`(`m.f` v1 @kind this) @signature `Lm/f;.l:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3730.  v0:= v1.`m.f.b` @type ^`byte`[] @kind object;
  #L3f3734.  v0:= length @variable v0;
  #L3f3736.  return v0;
}
procedure `m.f` `m`(`m.f` v6 @kind this) @signature `Lm/f;.m:()Lm/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f3be4.  v0:= 0I;
  #L3f3be6.  v1:= v6.`m.f.b` @type ^`byte`[] @kind object;
  #L3f3bea.  v2:= length @variable v1;
  #L3f3bec.  if v0 >= v2 then goto L3f3c56;
  #L3f3bf0.  v2:= v1[v0] @kind byte;
  #L3f3bf4.  v3:= 65I;
  #L3f3bf8.  if v2 < v3 then goto L3f3c50;
  #L3f3bfc.  v4:= 90I;
  #L3f3c00.  if v2 <= v4 then goto L3f3c06;
  #L3f3c04.  goto L3f3c50;
  #L3f3c06.  call temp:= `clone`(v1) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L3f3c0c.  v1:= temp @kind object;
  #L3f3c0e.  v1:= (`byte`[]) v1 @kind object;
  #L3f3c12.  v5:= v0 + 1;
  #L3f3c16.  v2:= v2 + 32;
  #L3f3c1a.  v2:= (`byte`) v2 @kind i2b;
  #L3f3c1c.  v1[v0]:= v2 @kind byte;
  #L3f3c20.  v0:= length @variable v1;
  #L3f3c22.  if v5 >= v0 then goto L3f3c44;
  #L3f3c26.  v0:= v1[v5] @kind byte;
  #L3f3c2a.  if v0 < v3 then goto L3f3c3e;
  #L3f3c2e.  if v0 <= v4 then goto L3f3c34;
  #L3f3c32.  goto L3f3c3e;
  #L3f3c34.  v0:= v0 + 32;
  #L3f3c38.  v0:= (`byte`) v0 @kind i2b;
  #L3f3c3a.  v1[v5]:= v0 @kind byte;
  #L3f3c3e.  v5:= v5 + 1;
  #L3f3c42.  goto L3f3c20;
  #L3f3c44.  v0:= new `m.f`;
  #L3f3c48.  call `<init>`(v0, v1) @signature `Lm/f;.<init>:([B)V` @kind direct;
  #L3f3c4e.  return v0 @kind object;
  #L3f3c50.  v0:= v0 + 1;
  #L3f3c54.  goto L3f3be6;
  #L3f3c56.  return v6 @kind object;
}
procedure `byte`[] `n`(`m.f` v1 @kind this) @signature `Lm/f;.n:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3560.  v0:= v1.`m.f.b` @type ^`byte`[] @kind object;
  #L3f3564.  call temp:= `clone`(v0) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L3f356a.  v0:= temp @kind object;
  #L3f356c.  v0:= (`byte`[]) v0 @kind object;
  #L3f3570.  return v0 @kind object;
}
procedure `java.lang.String` `o`(`m.f` v3 @kind this) @signature `Lm/f;.o:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f393c.  v0:= v3.`m.f.d` @type ^`java.lang.String` @kind object;
  #L3f3940.  if v0 == 0 then goto L3f3946;
  #L3f3944.  goto L3f395c;
  #L3f3946.  v0:= new `java.lang.String`;
  #L3f394a.  v1:= v3.`m.f.b` @type ^`byte`[] @kind object;
  #L3f394e.  v2:= `@@m.u.a` @type ^`java.nio.charset.Charset` @kind object;
  #L3f3952.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L3f3958.  v3.`m.f.d` @type ^`java.lang.String` := v0 @kind object;
  #L3f395c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`m.f` v8 @kind this) @signature `Lm/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f37d0.  v0:= v8.`m.f.b` @type ^`byte`[] @kind object;
  #L3f37d4.  v0:= length @variable v0;
  #L3f37d6.  if v0 != 0 then goto L3f37e0;
  #L3f37da.  v0:= "[size=0]" @kind object;
  #L3f37de.  return v0 @kind object;
  #L3f37e0.  call temp:= `o`(v8) @signature `Lm/f;.o:()Ljava/lang/String;` @kind virtual;
  #L3f37e6.  v0:= temp @kind object;
  #L3f37e8.  v1:= 64I;
  #L3f37ec.  call temp:= `a`(v0, v1) @signature `Lm/f;.a:(Ljava/lang/String;I)I` @kind static;
  #L3f37f2.  v2:= temp;
  #L3f37f4.  v3:= -1I;
  #L3f37f6.  v4:= "…]" @kind object;
  #L3f37fa.  v5:= "[size=" @kind object;
  #L3f37fe.  v6:= "]" @kind object;
  #L3f3802.  v7:= 0I;
  #L3f3804.  if v2 != v3 then goto L3f3888;
  #L3f3808.  v0:= v8.`m.f.b` @type ^`byte`[] @kind object;
  #L3f380c.  v0:= length @variable v0;
  #L3f380e.  if v0 > v1 then goto L3f383c;
  #L3f3812.  v0:= new `java.lang.StringBuilder`;
  #L3f3816.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f381c.  v1:= "[hex=" @kind object;
  #L3f3820.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3826.  call temp:= `e`(v8) @signature `Lm/f;.e:()Ljava/lang/String;` @kind virtual;
  #L3f382c.  v1:= temp @kind object;
  #L3f382e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3834.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f383a.  goto L3f387e;
  #L3f383c.  v0:= new `java.lang.StringBuilder`;
  #L3f3840.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f3846.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f384c.  v2:= v8.`m.f.b` @type ^`byte`[] @kind object;
  #L3f3850.  v2:= length @variable v2;
  #L3f3852.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3858.  v2:= " hex=" @kind object;
  #L3f385c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3862.  call temp:= `a`(v8, v7, v1) @signature `Lm/f;.a:(II)Lm/f;` @kind virtual;
  #L3f3868.  v1:= temp @kind object;
  #L3f386a.  call temp:= `e`(v1) @signature `Lm/f;.e:()Ljava/lang/String;` @kind virtual;
  #L3f3870.  v1:= temp @kind object;
  #L3f3872.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3878.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f387e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f3884.  v0:= temp @kind object;
  #L3f3886.  return v0 @kind object;
  #L3f3888.  call temp:= `substring`(v0, v7, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3f388e.  v1:= temp @kind object;
  #L3f3890.  v3:= "\\" @kind object;
  #L3f3894.  v7:= "\\\\" @kind object;
  #L3f3898.  call temp:= `replace`(v1, v3, v7) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L3f389e.  v1:= temp @kind object;
  #L3f38a0.  v3:= "\n" @kind object;
  #L3f38a4.  v7:= "\\n" @kind object;
  #L3f38a8.  call temp:= `replace`(v1, v3, v7) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L3f38ae.  v1:= temp @kind object;
  #L3f38b0.  v3:= "\r" @kind object;
  #L3f38b4.  v7:= "\\r" @kind object;
  #L3f38b8.  call temp:= `replace`(v1, v3, v7) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L3f38be.  v1:= temp @kind object;
  #L3f38c0.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f38c6.  v0:= temp;
  #L3f38c8.  if v2 >= v0 then goto L3f3900;
  #L3f38cc.  v0:= new `java.lang.StringBuilder`;
  #L3f38d0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f38d6.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f38dc.  v2:= v8.`m.f.b` @type ^`byte`[] @kind object;
  #L3f38e0.  v2:= length @variable v2;
  #L3f38e2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f38e8.  v2:= " text=" @kind object;
  #L3f38ec.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f38f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f38f8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f38fe.  goto L3f3920;
  #L3f3900.  v0:= new `java.lang.StringBuilder`;
  #L3f3904.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f390a.  v2:= "[text=" @kind object;
  #L3f390e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3914.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f391a.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3920.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f3926.  v0:= temp @kind object;
  #L3f3928.  return v0 @kind object;
}
