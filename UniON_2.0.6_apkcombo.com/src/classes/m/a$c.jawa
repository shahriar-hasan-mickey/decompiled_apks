record `m.a$c` @kind class @AccessFlag FINAL extends `java.lang.Thread` @kind class {
}
procedure `void` `<init>`(`m.a$c` v1 @kind this) @signature `Lm/a$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3f1114.  v0:= "Okio Watchdog" @kind object;
  #L3f1118.  call `<init>`(v1, v0) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f111e.  v0:= 1I;
  #L3f1120.  call `setDaemon`(v1, v0) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L3f1126.  return @kind void;
}
procedure `void` `run`(`m.a$c` v3 @kind this) @signature `Lm/a$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f1138.  v0:= constclass @type ^`m.a` @kind object;
  #L3f113c.  @monitorenter v0
  #L3f113e.  call temp:= `j`() @signature `Lm/a;.j:()Lm/a;` @kind static;
  #L3f1144.  v1:= temp @kind object;
  #L3f1146.  if v1 != 0 then goto L3f114e;
  #L3f114a.  @monitorexit v0
  #L3f114c.  goto L3f1138;
  #L3f114e.  v2:= `@@m.a.j` @type ^`m.a` @kind object;
  #L3f1152.  if v1 != v2 then goto L3f1160;
  #L3f1156.  v1:= 0I;
  #L3f1158.  `@@m.a.j` @type ^`m.a` := v1 @kind object;
  #L3f115c.  @monitorexit v0
  #L3f115e.  return @kind void;
  #L3f1160.  @monitorexit v0
  #L3f1162.  call `i`(v1) @signature `Lm/a;.i:()V` @kind virtual;
  #L3f1168.  goto L3f1138;
  #L3f116a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f116c.  @monitorexit v0
  #L3f116e.  throw v1;
  catch `java.lang.InterruptedException` @[L3f1138..L3f113e] goto L3f1138;
  catch `java.lang.Throwable` @[L3f113e..L3f1162] goto L3f116a;
  catch `java.lang.InterruptedException` @[L3f1162..L3f1168] goto L3f1138;
  catch `java.lang.Throwable` @[L3f116c..L3f116e] goto L3f116a;
  catch `java.lang.InterruptedException` @[L3f116e..L3f1170] goto L3f1138;
}
