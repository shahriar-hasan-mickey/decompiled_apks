record `m.h` @kind class @AccessFlag PUBLIC_ABSTRACT extends `m.s` @kind interface {
  `m.s` `m.h.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`m.h` v1 @kind this, `m.s` v2 @kind object) @signature `Lm/h;.<init>:(Lm/s;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f3ea0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f3ea6.  if v2 == 0 then goto L3f3eb0;
  #L3f3eaa.  v1.`m.h.b` @type ^`m.s` := v2 @kind object;
  #L3f3eae.  return @kind void;
  #L3f3eb0.  v2:= new `java.lang.IllegalArgumentException`;
  #L3f3eb4.  v0:= "delegate == null" @kind object;
  #L3f3eb8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3ebe.  throw v2;
}
procedure `m.s` `a`(`m.h` v1 @kind this) @signature `Lm/h;.a:()Lm/s;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f3e68.  v0:= v1.`m.h.b` @type ^`m.s` @kind object;
  #L3f3e6c.  return v0 @kind object;
}
procedure `void` `close`(`m.h` v1 @kind this) @signature `Lm/h;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3ed0.  v0:= v1.`m.h.b` @type ^`m.s` @kind object;
  #L3f3ed4.  call `close`(v0) @signature `Lm/s;.close:()V` @kind interface;
  #L3f3eda.  return @kind void;
}
procedure `m.t` `d`(`m.h` v1 @kind this) @signature `Lm/h;.d:()Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3e80.  v0:= v1.`m.h.b` @type ^`m.s` @kind object;
  #L3f3e84.  call temp:= `d`(v0) @signature `Lm/s;.d:()Lm/t;` @kind interface;
  #L3f3e8a.  v0:= temp @kind object;
  #L3f3e8c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`m.h` v2 @kind this) @signature `Lm/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3e08.  v0:= new `java.lang.StringBuilder`;
  #L3f3e0c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f3e12.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3f3e18.  v1:= temp @kind object;
  #L3f3e1a.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L3f3e20.  v1:= temp @kind object;
  #L3f3e22.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3e28.  v1:= "(" @kind object;
  #L3f3e2c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3e32.  v1:= v2.`m.h.b` @type ^`m.s` @kind object;
  #L3f3e36.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f3e3c.  v1:= temp @kind object;
  #L3f3e3e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3e44.  v1:= ")" @kind object;
  #L3f3e48.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3e4e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f3e54.  v0:= temp @kind object;
  #L3f3e56.  return v0 @kind object;
}
