record `m.c` @kind class @AccessFlag PUBLIC_FINAL extends `m.e` @kind interface, `m.d` @kind interface, `java.lang.Cloneable` @kind interface, `java.nio.channels.ByteChannel` @kind interface {
  `m.o` `m.c.b` @AccessFlag ;
  `long` `m.c.c` @AccessFlag ;
}
global `byte`[] `@@m.c.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lm/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f318c.  v0:= 16I;
  #L3f3190.  v0:= new `byte`[v0];
  #L3f3194.  goto L3f31a0;
  #L3f319a.  `@@m.c.d` @type ^`byte`[] := v0 @kind object;
  #L3f319e.  return @kind void;
  #L3f31a0.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L3f31b7.  goto L3f319a;
}
procedure `void` `<init>`(`m.c` v0 @kind this) @signature `Lm/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f31c8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f31ce.  return @kind void;
}
procedure `int` `a`(`m.c` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lm/c;.a:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f1b34.  v0:= length @variable v8;
  #L3f1b36.  v1:= (`long`) v0 @kind i2l;
  #L3f1b38.  v3:= (`long`) v9 @kind i2l;
  #L3f1b3a.  v5:= (`long`) v10 @kind i2l;
  #L3f1b3c.  call `a`(v1, v3, v5) @signature `Lm/u;.a:(JJJ)V` @kind static;
  #L3f1b42.  v0:= v7.`m.c.b` @type ^`m.o` @kind object;
  #L3f1b46.  if v0 != 0 then goto L3f1b4e;
  #L3f1b4a.  v8:= -1I;
  #L3f1b4c.  return v8;
  #L3f1b4e.  v1:= v0.`m.o.c` @type ^`int`;
  #L3f1b52.  v2:= v0.`m.o.b` @type ^`int`;
  #L3f1b56.  v1:= v1 - v2 @kind int;
  #L3f1b58.  call temp:= `min`(v10, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3f1b5e.  v10:= temp;
  #L3f1b60.  v1:= v0.`m.o.a` @type ^`byte`[] @kind object;
  #L3f1b64.  v2:= v0.`m.o.b` @type ^`int`;
  #L3f1b68.  call `arraycopy`(v1, v2, v8, v9, v10) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f1b6e.  v8:= v0.`m.o.b` @type ^`int`;
  #L3f1b72.  v8:= v8 + v10 @kind int;
  #L3f1b74.  v0.`m.o.b` @type ^`int` := v8;
  #L3f1b78.  v8:= v7.`m.c.c` @type ^`long` @kind wide;
  #L3f1b7c.  v1:= (`long`) v10 @kind i2l;
  #L3f1b7e.  v8:= v8 - v1 @kind long;
  #L3f1b80.  v7.`m.c.c` @type ^`long` := v8 @kind wide;
  #L3f1b84.  v8:= v0.`m.o.b` @type ^`int`;
  #L3f1b88.  v9:= v0.`m.o.c` @type ^`int`;
  #L3f1b8c.  if v8 != v9 then goto L3f1ba2;
  #L3f1b90.  call temp:= `b`(v0) @signature `Lm/o;.b:()Lm/o;` @kind virtual;
  #L3f1b96.  v8:= temp @kind object;
  #L3f1b98.  v7.`m.c.b` @type ^`m.o` := v8 @kind object;
  #L3f1b9c.  call `a`(v0) @signature `Lm/p;.a:(Lm/o;)V` @kind static;
  #L3f1ba2.  return v10;
}
procedure `long` `a`(`m.c` v6 @kind this, `byte` v7 ) @signature `Lm/c;.a:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f21e0.  v2:= 0L;
  #L3f21e4.  v4:= 9223372036854775807L;
  #L3f21ee.  v0:= v6 @kind object;
  #L3f21f0.  v1:= v7;
  #L3f21f2.  call temp:= `a`(v0, v1, v2, v4) @signature `Lm/c;.a:(BJJ)J` @kind virtual;
  #L3f21f8.  v0:= temp @kind wide;
  #L3f21fa.  return v0 @kind wide;
}
procedure `long` `a`(`m.c` v15 @kind this, `byte` v16 , `long` v17 , `long` v19 ) @signature `Lm/c;.a:(BJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L3f220c.  v0:= v15 @kind object;
  #L3f220e.  v1:= 0L;
  #L3f2212.  v3:= lcmp(v17, v1);
  #L3f2216.  if v3 < 0 then goto L3f230a;
  #L3f221a.  v3:= lcmp(v19, v17);
  #L3f221e.  if v3 < 0 then goto L3f230a;
  #L3f2222.  v3:= v0.`m.c.c` @type ^`long` @kind wide;
  #L3f2226.  v5:= lcmp(v19, v3);
  #L3f222a.  if v5 <= 0 then goto L3f2230;
  #L3f222e.  goto L3f2234;
  #L3f2230.  v3:= v19 @kind wide;
  #L3f2234.  v5:= -1L;
  #L3f2238.  v7:= lcmp(v17, v3);
  #L3f223c.  if v7 != 0 then goto L3f2242;
  #L3f2240.  return v5 @kind wide;
  #L3f2242.  v7:= v0.`m.c.b` @type ^`m.o` @kind object;
  #L3f2246.  if v7 != 0 then goto L3f224c;
  #L3f224a.  return v5 @kind wide;
  #L3f224c.  v8:= v0.`m.c.c` @type ^`long` @kind wide;
  #L3f2250.  v10:= v8 - v17 @kind long;
  #L3f2254.  v12:= lcmp(v10, v17);
  #L3f2258.  if v12 >= 0 then goto L3f2278;
  #L3f225c.  v1:= lcmp(v8, v17);
  #L3f2260.  if v1 <= 0 then goto L3f2296;
  #L3f2264.  v7:= v7.`m.o.g` @type ^`m.o` @kind object;
  #L3f2268.  v1:= v7.`m.o.c` @type ^`int`;
  #L3f226c.  v2:= v7.`m.o.b` @type ^`int`;
  #L3f2270.  v1:= v1 - v2 @kind int;
  #L3f2272.  v1:= (`long`) v1 @kind i2l;
  #L3f2274.  v8:= v8 - v1 @kind long;
  #L3f2276.  goto L3f225c;
  #L3f2278.  v8:= v1 @kind wide;
  #L3f227a.  v1:= v7.`m.o.c` @type ^`int`;
  #L3f227e.  v2:= v7.`m.o.b` @type ^`int`;
  #L3f2282.  v1:= v1 - v2 @kind int;
  #L3f2284.  v1:= (`long`) v1 @kind i2l;
  #L3f2286.  v1:= v1 + v8 @kind long;
  #L3f2288.  v10:= lcmp(v1, v17);
  #L3f228c.  if v10 >= 0 then goto L3f2296;
  #L3f2290.  v7:= v7.`m.o.f` @type ^`m.o` @kind object;
  #L3f2294.  goto L3f2278;
  #L3f2296.  v1:= v17 @kind wide;
  #L3f229a.  v10:= lcmp(v8, v3);
  #L3f229e.  if v10 >= 0 then goto L3f2308;
  #L3f22a2.  v10:= v7.`m.o.a` @type ^`byte`[] @kind object;
  #L3f22a6.  v11:= v7.`m.o.c` @type ^`int`;
  #L3f22aa.  v11:= (`long`) v11 @kind i2l;
  #L3f22ac.  v13:= v7.`m.o.b` @type ^`int`;
  #L3f22b0.  v13:= (`long`) v13 @kind i2l;
  #L3f22b2.  v13:= v13 + v3 @kind long;
  #L3f22b4.  v13:= v13 - v8 @kind long;
  #L3f22b6.  call temp:= `min`(v11, v13) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3f22bc.  v11:= temp @kind wide;
  #L3f22be.  v12:= (`int`) v11 @kind l2i;
  #L3f22c0.  v11:= v7.`m.o.b` @type ^`int`;
  #L3f22c4.  v13:= (`long`) v11 @kind i2l;
  #L3f22c6.  v13:= v13 + v1 @kind long;
  #L3f22c8.  v13:= v13 - v8 @kind long;
  #L3f22ca.  v1:= (`int`) v13 @kind l2i;
  #L3f22cc.  if v1 >= v12 then goto L3f22ee;
  #L3f22d0.  v2:= v10[v1] @kind byte;
  #L3f22d4.  v11:= v16;
  #L3f22d8.  if v2 != v11 then goto L3f22e8;
  #L3f22dc.  v2:= v7.`m.o.b` @type ^`int`;
  #L3f22e0.  v1:= v1 - v2 @kind int;
  #L3f22e2.  v1:= (`long`) v1 @kind i2l;
  #L3f22e4.  v1:= v1 + v8 @kind long;
  #L3f22e6.  return v1 @kind wide;
  #L3f22e8.  v1:= v1 + 1;
  #L3f22ec.  goto L3f22cc;
  #L3f22ee.  v11:= v16;
  #L3f22f2.  v1:= v7.`m.o.c` @type ^`int`;
  #L3f22f6.  v2:= v7.`m.o.b` @type ^`int`;
  #L3f22fa.  v1:= v1 - v2 @kind int;
  #L3f22fc.  v1:= (`long`) v1 @kind i2l;
  #L3f22fe.  v1:= v1 + v8 @kind long;
  #L3f2300.  v7:= v7.`m.o.f` @type ^`m.o` @kind object;
  #L3f2304.  v8:= v1 @kind wide;
  #L3f2306.  goto L3f229a;
  #L3f2308.  return v5 @kind wide;
  #L3f230a.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f230e.  v2:= 3I;
  #L3f2310.  v2:= new `java.lang.Object`[v2];
  #L3f2314.  v3:= 0I;
  #L3f2316.  v4:= v0.`m.c.c` @type ^`long` @kind wide;
  #L3f231a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3f2320.  v4:= temp @kind object;
  #L3f2322.  v2[v3]:= v4 @kind object;
  #L3f2326.  call temp:= `valueOf`(v17) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3f232c.  v3:= temp @kind object;
  #L3f232e.  v4:= 1I;
  #L3f2330.  v2[v4]:= v3 @kind object;
  #L3f2334.  v3:= 2I;
  #L3f2336.  call temp:= `valueOf`(v19) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3f233c.  v4:= temp @kind object;
  #L3f233e.  v2[v3]:= v4 @kind object;
  #L3f2342.  v3:= "size=%s fromIndex=%s toIndex=%s" @kind object;
  #L3f2346.  call temp:= `format`(v3, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3f234c.  v2:= temp @kind object;
  #L3f234e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2354.  throw v1;
}
procedure `long` `a`(`m.c` v5 @kind this, `m.c` v6 @kind object, `long` v7 ) @signature `Lm/c;.a:(Lm/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f2368.  if v6 == 0 then goto L3f23ca;
  #L3f236c.  v0:= 0L;
  #L3f2370.  v2:= lcmp(v7, v0);
  #L3f2374.  if v2 < 0 then goto L3f239c;
  #L3f2378.  v2:= v5.`m.c.c` @type ^`long` @kind wide;
  #L3f237c.  v4:= lcmp(v2, v0);
  #L3f2380.  if v4 != 0 then goto L3f238a;
  #L3f2384.  v6:= -1L;
  #L3f2388.  return v6 @kind wide;
  #L3f238a.  v0:= lcmp(v7, v2);
  #L3f238e.  if v0 <= 0 then goto L3f2394;
  #L3f2392.  v7:= v2 @kind wide;
  #L3f2394.  call `b`(v6, v5, v7) @signature `Lm/c;.b:(Lm/c;J)V` @kind virtual;
  #L3f239a.  return v7 @kind wide;
  #L3f239c.  v6:= new `java.lang.IllegalArgumentException`;
  #L3f23a0.  v0:= new `java.lang.StringBuilder`;
  #L3f23a4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f23aa.  v1:= "byteCount < 0: " @kind object;
  #L3f23ae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f23b4.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f23ba.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f23c0.  v7:= temp @kind object;
  #L3f23c2.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f23c8.  throw v6;
  #L3f23ca.  v6:= new `java.lang.IllegalArgumentException`;
  #L3f23ce.  v7:= "sink == null" @kind object;
  #L3f23d2.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f23d8.  throw v6;
}
procedure `long` `a`(`m.c` v5 @kind this, `m.r` v6 @kind object) @signature `Lm/c;.a:(Lm/r;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f23ec.  v0:= v5.`m.c.c` @type ^`long` @kind wide;
  #L3f23f0.  v2:= 0L;
  #L3f23f4.  v4:= lcmp(v0, v2);
  #L3f23f8.  if v4 <= 0 then goto L3f2402;
  #L3f23fc.  call `b`(v6, v5, v0) @signature `Lm/r;.b:(Lm/c;J)V` @kind interface;
  #L3f2402.  return v0 @kind wide;
}
procedure `long` `a`(`m.c` v7 @kind this, `m.s` v8 @kind object) @signature `Lm/c;.a:(Lm/s;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f25a0.  if v8 == 0 then goto L3f25c6;
  #L3f25a4.  v0:= 0L;
  #L3f25a8.  v2:= 8192L;
  #L3f25ac.  call temp:= `a`(v8, v7, v2) @signature `Lm/s;.a:(Lm/c;J)J` @kind interface;
  #L3f25b2.  v2:= temp @kind wide;
  #L3f25b4.  v4:= -1L;
  #L3f25b8.  v6:= lcmp(v2, v4);
  #L3f25bc.  if v6 == 0 then goto L3f25c4;
  #L3f25c0.  v0:= v0 + v2 @kind long;
  #L3f25c2.  goto L3f25a8;
  #L3f25c4.  return v0 @kind wide;
  #L3f25c6.  v8:= new `java.lang.IllegalArgumentException`;
  #L3f25ca.  v0:= "source == null" @kind object;
  #L3f25ce.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f25d4.  throw v8;
}
procedure `java.lang.String` `a`(`m.c` v7 @kind this, `long` v8 , `java.nio.charset.Charset` v10 @kind object) @signature `Lm/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f1e3c.  v0:= v7.`m.c.c` @type ^`long` @kind wide;
  #L3f1e40.  v2:= 0L;
  #L3f1e44.  v4:= v8 @kind wide;
  #L3f1e46.  call `a`(v0, v2, v4) @signature `Lm/u;.a:(JJJ)V` @kind static;
  #L3f1e4c.  if v10 == 0 then goto L3f1f14;
  #L3f1e50.  v0:= 2147483647L;
  #L3f1e56.  v2:= lcmp(v8, v0);
  #L3f1e5a.  if v2 > 0 then goto L3f1ee6;
  #L3f1e5e.  v0:= 0L;
  #L3f1e62.  v2:= lcmp(v8, v0);
  #L3f1e66.  if v2 != 0 then goto L3f1e70;
  #L3f1e6a.  v8:= "" @kind object;
  #L3f1e6e.  return v8 @kind object;
  #L3f1e70.  v0:= v7.`m.c.b` @type ^`m.o` @kind object;
  #L3f1e74.  v1:= v0.`m.o.b` @type ^`int`;
  #L3f1e78.  v2:= (`long`) v1 @kind i2l;
  #L3f1e7a.  v2:= v2 + v8 @kind long;
  #L3f1e7c.  v4:= v0.`m.o.c` @type ^`int`;
  #L3f1e80.  v4:= (`long`) v4 @kind i2l;
  #L3f1e82.  v6:= lcmp(v2, v4);
  #L3f1e86.  if v6 <= 0 then goto L3f1e9e;
  #L3f1e8a.  v0:= new `java.lang.String`;
  #L3f1e8e.  call temp:= `b`(v7, v8) @signature `Lm/c;.b:(J)[B` @kind virtual;
  #L3f1e94.  v8:= temp @kind object;
  #L3f1e96.  call `<init>`(v0, v8, v10) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L3f1e9c.  return v0 @kind object;
  #L3f1e9e.  v2:= new `java.lang.String`;
  #L3f1ea2.  v3:= v0.`m.o.a` @type ^`byte`[] @kind object;
  #L3f1ea6.  v4:= (`int`) v8 @kind l2i;
  #L3f1ea8.  call `<init>`(v2, v3, v1, v4, v10) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L3f1eae.  v10:= v0.`m.o.b` @type ^`int`;
  #L3f1eb2.  v3:= (`long`) v10 @kind i2l;
  #L3f1eb4.  v3:= v3 + v8 @kind long;
  #L3f1eb6.  v10:= (`int`) v3 @kind l2i;
  #L3f1eb8.  v0.`m.o.b` @type ^`int` := v10;
  #L3f1ebc.  v3:= v7.`m.c.c` @type ^`long` @kind wide;
  #L3f1ec0.  v3:= v3 - v8 @kind long;
  #L3f1ec2.  v7.`m.c.c` @type ^`long` := v3 @kind wide;
  #L3f1ec6.  v8:= v0.`m.o.b` @type ^`int`;
  #L3f1eca.  v9:= v0.`m.o.c` @type ^`int`;
  #L3f1ece.  if v8 != v9 then goto L3f1ee4;
  #L3f1ed2.  call temp:= `b`(v0) @signature `Lm/o;.b:()Lm/o;` @kind virtual;
  #L3f1ed8.  v8:= temp @kind object;
  #L3f1eda.  v7.`m.c.b` @type ^`m.o` := v8 @kind object;
  #L3f1ede.  call `a`(v0) @signature `Lm/p;.a:(Lm/o;)V` @kind static;
  #L3f1ee4.  return v2 @kind object;
  #L3f1ee6.  v10:= new `java.lang.IllegalArgumentException`;
  #L3f1eea.  v0:= new `java.lang.StringBuilder`;
  #L3f1eee.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f1ef4.  v1:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L3f1ef8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f1efe.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f1f04.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f1f0a.  v8:= temp @kind object;
  #L3f1f0c.  call `<init>`(v10, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f1f12.  throw v10;
  #L3f1f14.  v8:= new `java.lang.IllegalArgumentException`;
  #L3f1f18.  v9:= "charset == null" @kind object;
  #L3f1f1c.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f1f22.  throw v8;
}
procedure `java.lang.String` `a`(`m.c` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Lm/c;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f1e00.  v0:= v2.`m.c.c` @type ^`long` @kind wide;
  #L3f1e04.  call temp:= `a`(v2, v0, v3) @signature `Lm/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L3f1e0a.  v3:= temp @kind object;
  #L3f1e0c.  return v3 @kind object;
  #L3f1e0e.  v3:= Exception @type ^`java.io.EOFException` @kind object;
  #L3f1e10.  v0:= new `java.lang.AssertionError`;
  #L3f1e14.  call `<init>`(v0, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3f1e1a.  throw v0;
  catch `java.io.EOFException` @[L3f1e00..L3f1e0c] goto L3f1e0e;
}
procedure `m.c` `a`(`m.c` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lm/c;.a:(Ljava/lang/String;)Lm/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f2b20.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f2b26.  v0:= temp;
  #L3f2b28.  v1:= 0I;
  #L3f2b2a.  call temp:= `a`(v2, v3, v1, v0) @signature `Lm/c;.a:(Ljava/lang/String;II)Lm/c;` @kind virtual;
  #L3f2b30.  return v2 @kind object;
}
procedure `m.c` `a`(`m.c` v7 @kind this, `java.lang.String` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lm/c;.a:(Ljava/lang/String;II)Lm/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f2b44.  if v8 == 0 then goto L3f2d7c;
  #L3f2b48.  if v9 < 0 then goto L3f2d4e;
  #L3f2b4c.  if v10 < v9 then goto L3f2d10;
  #L3f2b50.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f2b56.  v0:= temp;
  #L3f2b58.  if v10 > v0 then goto L3f2cca;
  #L3f2b5c.  if v9 >= v10 then goto L3f2cc8;
  #L3f2b60.  call temp:= `charAt`(v8, v9) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3f2b66.  v0:= temp;
  #L3f2b68.  v1:= 128I;
  #L3f2b6c.  if v0 >= v1 then goto L3f2bdc;
  #L3f2b70.  v2:= 1I;
  #L3f2b72.  call temp:= `b`(v7, v2) @signature `Lm/c;.b:(I)Lm/o;` @kind virtual;
  #L3f2b78.  v2:= temp @kind object;
  #L3f2b7a.  v3:= v2.`m.o.a` @type ^`byte`[] @kind object;
  #L3f2b7e.  v4:= v2.`m.o.c` @type ^`int`;
  #L3f2b82.  v4:= v4 - v9 @kind int;
  #L3f2b84.  v5:= v4 - 8192;
  #L3f2b88.  call temp:= `min`(v10, v5) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3f2b8e.  v5:= temp;
  #L3f2b90.  v6:= v9 + 1;
  #L3f2b94.  v9:= v9 + v4 @kind int;
  #L3f2b96.  v0:= (`byte`) v0 @kind i2b;
  #L3f2b98.  v3[v9]:= v0 @kind byte;
  #L3f2b9c.  if v6 >= v5 then goto L3f2bbe;
  #L3f2ba0.  call temp:= `charAt`(v8, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3f2ba6.  v9:= temp;
  #L3f2ba8.  if v9 < v1 then goto L3f2bae;
  #L3f2bac.  goto L3f2bbe;
  #L3f2bae.  v0:= v6 + 1;
  #L3f2bb2.  v6:= v6 + v4 @kind int;
  #L3f2bb4.  v9:= (`byte`) v9 @kind i2b;
  #L3f2bb6.  v3[v6]:= v9 @kind byte;
  #L3f2bba.  v6:= v0;
  #L3f2bbc.  goto L3f2b9c;
  #L3f2bbe.  v4:= v4 + v6 @kind int;
  #L3f2bc0.  v9:= v2.`m.o.c` @type ^`int`;
  #L3f2bc4.  v4:= v4 - v9 @kind int;
  #L3f2bc6.  v9:= v9 + v4 @kind int;
  #L3f2bc8.  v2.`m.o.c` @type ^`int` := v9;
  #L3f2bcc.  v0:= v7.`m.c.c` @type ^`long` @kind wide;
  #L3f2bd0.  v2:= (`long`) v4 @kind i2l;
  #L3f2bd2.  v0:= v0 + v2 @kind long;
  #L3f2bd4.  v7.`m.c.c` @type ^`long` := v0 @kind wide;
  #L3f2bd8.  v9:= v6;
  #L3f2bda.  goto L3f2b5c;
  #L3f2bdc.  v2:= 2048I;
  #L3f2be0.  if v0 >= v2 then goto L3f2c04;
  #L3f2be4.  v2:= v0 ^> 6;
  #L3f2be8.  v2:= v2 ^| 192;
  #L3f2bec.  call temp:= `writeByte`(v7, v2) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3f2bf2.  v0:= v0 ^& 63;
  #L3f2bf6.  v0:= v0 ^| v1 @kind int;
  #L3f2bf8.  call temp:= `writeByte`(v7, v0) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3f2bfe.  v9:= v9 + 1;
  #L3f2c02.  goto L3f2b5c;
  #L3f2c04.  v2:= 55296I;
  #L3f2c0a.  v3:= 63I;
  #L3f2c0e.  if v0 < v2 then goto L3f2cb0;
  #L3f2c12.  v2:= 57343I;
  #L3f2c18.  if v0 <= v2 then goto L3f2c1e;
  #L3f2c1c.  goto L3f2cb0;
  #L3f2c1e.  v4:= v9 + 1;
  #L3f2c22.  if v4 >= v10 then goto L3f2c30;
  #L3f2c26.  call temp:= `charAt`(v8, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3f2c2c.  v5:= temp;
  #L3f2c2e.  goto L3f2c32;
  #L3f2c30.  v5:= 0I;
  #L3f2c32.  v6:= 56319I;
  #L3f2c38.  if v0 > v6 then goto L3f2ca4;
  #L3f2c3c.  v6:= 56320I;
  #L3f2c42.  if v5 < v6 then goto L3f2ca4;
  #L3f2c46.  if v5 <= v2 then goto L3f2c4c;
  #L3f2c4a.  goto L3f2ca4;
  #L3f2c4c.  v2:= 65536I;
  #L3f2c50.  v4:= -55297I;
  #L3f2c56.  v0:= v0 ^& v4 @kind int;
  #L3f2c58.  v0:= v0 ^< 10;
  #L3f2c5c.  v4:= -56321I;
  #L3f2c62.  v4:= v4 ^& v5 @kind int;
  #L3f2c64.  v0:= v0 ^| v4 @kind int;
  #L3f2c66.  v0:= v0 + v2 @kind int;
  #L3f2c68.  v2:= v0 ^> 18;
  #L3f2c6c.  v2:= v2 ^| 240;
  #L3f2c70.  call temp:= `writeByte`(v7, v2) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3f2c76.  v2:= v0 ^> 12;
  #L3f2c7a.  v2:= v2 ^& v3 @kind int;
  #L3f2c7c.  v2:= v2 ^| v1 @kind int;
  #L3f2c7e.  call temp:= `writeByte`(v7, v2) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3f2c84.  v2:= v0 ^> 6;
  #L3f2c88.  v2:= v2 ^& v3 @kind int;
  #L3f2c8a.  v2:= v2 ^| v1 @kind int;
  #L3f2c8c.  call temp:= `writeByte`(v7, v2) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3f2c92.  v0:= v0 ^& v3 @kind int;
  #L3f2c94.  v0:= v0 ^| v1 @kind int;
  #L3f2c96.  call temp:= `writeByte`(v7, v0) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3f2c9c.  v9:= v9 + 2;
  #L3f2ca0.  goto L3f2b5c;
  #L3f2ca4.  call temp:= `writeByte`(v7, v3) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3f2caa.  v9:= v4;
  #L3f2cac.  goto L3f2b5c;
  #L3f2cb0.  v2:= v0 ^> 12;
  #L3f2cb4.  v2:= v2 ^| 224;
  #L3f2cb8.  call temp:= `writeByte`(v7, v2) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3f2cbe.  v2:= v0 ^> 6;
  #L3f2cc2.  v2:= v2 ^& v3 @kind int;
  #L3f2cc4.  v2:= v2 ^| v1 @kind int;
  #L3f2cc6.  goto L3f2bec;
  #L3f2cc8.  return v7 @kind object;
  #L3f2cca.  v9:= new `java.lang.IllegalArgumentException`;
  #L3f2cce.  v0:= new `java.lang.StringBuilder`;
  #L3f2cd2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f2cd8.  v1:= "endIndex > string.length: " @kind object;
  #L3f2cdc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2ce2.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2ce8.  v10:= " > " @kind object;
  #L3f2cec.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2cf2.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f2cf8.  v8:= temp;
  #L3f2cfa.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2d00.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f2d06.  v8:= temp @kind object;
  #L3f2d08.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2d0e.  throw v9;
  #L3f2d10.  v8:= new `java.lang.IllegalArgumentException`;
  #L3f2d14.  v0:= new `java.lang.StringBuilder`;
  #L3f2d18.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f2d1e.  v1:= "endIndex < beginIndex: " @kind object;
  #L3f2d22.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2d28.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2d2e.  v10:= " < " @kind object;
  #L3f2d32.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2d38.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2d3e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f2d44.  v9:= temp @kind object;
  #L3f2d46.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2d4c.  throw v8;
  #L3f2d4e.  v8:= new `java.lang.IllegalArgumentException`;
  #L3f2d52.  v10:= new `java.lang.StringBuilder`;
  #L3f2d56.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f2d5c.  v0:= "beginIndex < 0: " @kind object;
  #L3f2d60.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2d66.  call temp:= `append`(v10, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2d6c.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f2d72.  v9:= temp @kind object;
  #L3f2d74.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2d7a.  throw v8;
  #L3f2d7c.  v8:= new `java.lang.IllegalArgumentException`;
  #L3f2d80.  v9:= "string == null" @kind object;
  #L3f2d84.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2d8a.  throw v8;
}
procedure `m.c` `a`(`m.c` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.nio.charset.Charset` v5 @kind object) @signature `Lm/c;.a:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lm/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f29ec.  if v2 == 0 then goto L3f2afe;
  #L3f29f0.  if v3 < 0 then goto L3f2ad0;
  #L3f29f4.  if v4 < v3 then goto L3f2a92;
  #L3f29f8.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f29fe.  v0:= temp;
  #L3f2a00.  if v4 > v0 then goto L3f2a4c;
  #L3f2a04.  if v5 == 0 then goto L3f2a3c;
  #L3f2a08.  v0:= `@@m.u.a` @type ^`java.nio.charset.Charset` @kind object;
  #L3f2a0c.  call temp:= `equals`(v5, v0) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f2a12.  v0:= temp;
  #L3f2a14.  if v0 == 0 then goto L3f2a20;
  #L3f2a18.  call temp:= `a`(v1, v2, v3, v4) @signature `Lm/c;.a:(Ljava/lang/String;II)Lm/c;` @kind virtual;
  #L3f2a1e.  return v1 @kind object;
  #L3f2a20.  call temp:= `substring`(v2, v3, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3f2a26.  v2:= temp @kind object;
  #L3f2a28.  call temp:= `getBytes`(v2, v5) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L3f2a2e.  v2:= temp @kind object;
  #L3f2a30.  v3:= 0I;
  #L3f2a32.  v4:= length @variable v2;
  #L3f2a34.  call temp:= `write`(v1, v2, v3, v4) @signature `Lm/c;.write:([BII)Lm/c;` @kind virtual;
  #L3f2a3a.  return v1 @kind object;
  #L3f2a3c.  v2:= new `java.lang.IllegalArgumentException`;
  #L3f2a40.  v3:= "charset == null" @kind object;
  #L3f2a44.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2a4a.  throw v2;
  #L3f2a4c.  v3:= new `java.lang.IllegalArgumentException`;
  #L3f2a50.  v5:= new `java.lang.StringBuilder`;
  #L3f2a54.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f2a5a.  v0:= "endIndex > string.length: " @kind object;
  #L3f2a5e.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2a64.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2a6a.  v4:= " > " @kind object;
  #L3f2a6e.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2a74.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f2a7a.  v2:= temp;
  #L3f2a7c.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2a82.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f2a88.  v2:= temp @kind object;
  #L3f2a8a.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2a90.  throw v3;
  #L3f2a92.  v2:= new `java.lang.IllegalArgumentException`;
  #L3f2a96.  v5:= new `java.lang.StringBuilder`;
  #L3f2a9a.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f2aa0.  v0:= "endIndex < beginIndex: " @kind object;
  #L3f2aa4.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2aaa.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2ab0.  v4:= " < " @kind object;
  #L3f2ab4.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2aba.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2ac0.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f2ac6.  v3:= temp @kind object;
  #L3f2ac8.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2ace.  throw v2;
  #L3f2ad0.  v2:= new `java.lang.IllegalAccessError`;
  #L3f2ad4.  v4:= new `java.lang.StringBuilder`;
  #L3f2ad8.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f2ade.  v5:= "beginIndex < 0: " @kind object;
  #L3f2ae2.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2ae8.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2aee.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f2af4.  v3:= temp @kind object;
  #L3f2af6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalAccessError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2afc.  throw v2;
  #L3f2afe.  v2:= new `java.lang.IllegalArgumentException`;
  #L3f2b02.  v3:= "string == null" @kind object;
  #L3f2b06.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2b0c.  throw v2;
}
procedure `m.c` `a`(`m.c` v8 @kind this, `m.c` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lm/c;.a:(Lm/c;JJ)Lm/c;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f2678.  if v9 == 0 then goto L3f2736;
  #L3f267c.  v0:= v8.`m.c.c` @type ^`long` @kind wide;
  #L3f2680.  v2:= v10 @kind wide;
  #L3f2682.  v4:= v12 @kind wide;
  #L3f2684.  call `a`(v0, v2, v4) @signature `Lm/u;.a:(JJJ)V` @kind static;
  #L3f268a.  v0:= 0L;
  #L3f268e.  v2:= lcmp(v12, v0);
  #L3f2692.  if v2 != 0 then goto L3f2698;
  #L3f2696.  return v8 @kind object;
  #L3f2698.  v2:= v9.`m.c.c` @type ^`long` @kind wide;
  #L3f269c.  v2:= v2 + v12 @kind long;
  #L3f269e.  v9.`m.c.c` @type ^`long` := v2 @kind wide;
  #L3f26a2.  v2:= v8.`m.c.b` @type ^`m.o` @kind object;
  #L3f26a6.  v3:= v2.`m.o.c` @type ^`int`;
  #L3f26aa.  v4:= v2.`m.o.b` @type ^`int`;
  #L3f26ae.  v5:= v3 - v4 @kind int;
  #L3f26b2.  v5:= (`long`) v5 @kind i2l;
  #L3f26b4.  v7:= lcmp(v10, v5);
  #L3f26b8.  if v7 < 0 then goto L3f26c8;
  #L3f26bc.  v3:= v3 - v4 @kind int;
  #L3f26be.  v3:= (`long`) v3 @kind i2l;
  #L3f26c0.  v10:= v10 - v3 @kind long;
  #L3f26c2.  v2:= v2.`m.o.f` @type ^`m.o` @kind object;
  #L3f26c6.  goto L3f26a6;
  #L3f26c8.  v3:= lcmp(v12, v0);
  #L3f26cc.  if v3 <= 0 then goto L3f2734;
  #L3f26d0.  call temp:= `c`(v2) @signature `Lm/o;.c:()Lm/o;` @kind virtual;
  #L3f26d6.  v3:= temp @kind object;
  #L3f26d8.  v4:= v3.`m.o.b` @type ^`int`;
  #L3f26dc.  v4:= (`long`) v4 @kind i2l;
  #L3f26de.  v4:= v4 + v10 @kind long;
  #L3f26e0.  v10:= (`int`) v4 @kind l2i;
  #L3f26e2.  v3.`m.o.b` @type ^`int` := v10;
  #L3f26e6.  v10:= v3.`m.o.b` @type ^`int`;
  #L3f26ea.  v11:= (`int`) v12 @kind l2i;
  #L3f26ec.  v10:= v10 + v11 @kind int;
  #L3f26ee.  v11:= v3.`m.o.c` @type ^`int`;
  #L3f26f2.  call temp:= `min`(v10, v11) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3f26f8.  v10:= temp;
  #L3f26fa.  v3.`m.o.c` @type ^`int` := v10;
  #L3f26fe.  v10:= v9.`m.c.b` @type ^`m.o` @kind object;
  #L3f2702.  if v10 != 0 then goto L3f2714;
  #L3f2706.  v3.`m.o.g` @type ^`m.o` := v3 @kind object;
  #L3f270a.  v3.`m.o.f` @type ^`m.o` := v3 @kind object;
  #L3f270e.  v9.`m.c.b` @type ^`m.o` := v3 @kind object;
  #L3f2712.  goto L3f271e;
  #L3f2714.  v10:= v10.`m.o.g` @type ^`m.o` @kind object;
  #L3f2718.  call temp:= `a`(v10, v3) @signature `Lm/o;.a:(Lm/o;)Lm/o;` @kind virtual;
  #L3f271e.  v10:= v3.`m.o.c` @type ^`int`;
  #L3f2722.  v11:= v3.`m.o.b` @type ^`int`;
  #L3f2726.  v10:= v10 - v11 @kind int;
  #L3f2728.  v10:= (`long`) v10 @kind i2l;
  #L3f272a.  v12:= v12 - v10 @kind long;
  #L3f272c.  v2:= v2.`m.o.f` @type ^`m.o` @kind object;
  #L3f2730.  v10:= v0 @kind wide;
  #L3f2732.  goto L3f26c8;
  #L3f2734.  return v8 @kind object;
  #L3f2736.  v9:= new `java.lang.IllegalArgumentException`;
  #L3f273a.  v10:= "out == null" @kind object;
  #L3f273e.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2744.  throw v9;
}
procedure `m.c` `a`(`m.c` v1 @kind this, `m.f` v2 @kind object) @signature `Lm/c;.a:(Lm/f;)Lm/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f281c.  if v2 == 0 then goto L3f2828;
  #L3f2820.  call `a`(v2, v1) @signature `Lm/f;.a:(Lm/c;)V` @kind virtual;
  #L3f2826.  return v1 @kind object;
  #L3f2828.  v2:= new `java.lang.IllegalArgumentException`;
  #L3f282c.  v0:= "byteString == null" @kind object;
  #L3f2830.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2836.  throw v2;
}
procedure `m.d` `a`(`m.c` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lm/c;.a:(Ljava/lang/String;)Lm/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f2f1c.  call temp:= `a`(v0, v1) @signature `Lm/c;.a:(Ljava/lang/String;)Lm/c;` @kind virtual;
  #L3f2f22.  return v0 @kind object;
}
procedure `m.f` `a`(`m.c` v1 @kind this, `int` v2 ) @signature `Lm/c;.a:(I)Lm/f;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f2fdc.  if v2 != 0 then goto L3f2fe6;
  #L3f2fe0.  v2:= `@@m.f.f` @type ^`m.f` @kind object;
  #L3f2fe4.  return v2 @kind object;
  #L3f2fe6.  v0:= new `m.q`;
  #L3f2fea.  call `<init>`(v0, v1, v2) @signature `Lm/q;.<init>:(Lm/c;I)V` @kind direct;
  #L3f2ff0.  return v0 @kind object;
}
procedure `m.f` `a`(`m.c` v1 @kind this, `long` v2 ) @signature `Lm/c;.a:(J)Lm/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f2f58.  v0:= new `m.f`;
  #L3f2f5c.  call temp:= `b`(v1, v2) @signature `Lm/c;.b:(J)[B` @kind virtual;
  #L3f2f62.  v2:= temp @kind object;
  #L3f2f64.  call `<init>`(v0, v2) @signature `Lm/f;.<init>:([B)V` @kind direct;
  #L3f2f6a.  return v0 @kind object;
}
procedure `boolean` `a`(`m.c` v6 @kind this, `long` v7 , `m.f` v9 @kind object) @signature `Lm/c;.a:(JLm/f;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f189c.  call temp:= `l`(v9) @signature `Lm/f;.l:()I` @kind virtual;
  #L3f18a2.  v5:= temp;
  #L3f18a4.  v4:= 0I;
  #L3f18a6.  v0:= v6 @kind object;
  #L3f18a8.  v1:= v7 @kind wide;
  #L3f18aa.  v3:= v9 @kind object;
  #L3f18ac.  call temp:= `a`(v0, v1, v3, v4, v5) @signature `Lm/c;.a:(JLm/f;II)Z` @kind virtual;
  #L3f18b2.  v7:= temp;
  #L3f18b4.  return v7;
}
procedure `boolean` `a`(`m.c` v6 @kind this, `long` v7 , `m.f` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lm/c;.a:(JLm/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f18c8.  v0:= 0I;
  #L3f18ca.  v1:= 0L;
  #L3f18ce.  v3:= lcmp(v7, v1);
  #L3f18d2.  if v3 < 0 then goto L3f192c;
  #L3f18d6.  if v10 < 0 then goto L3f192c;
  #L3f18da.  if v11 < 0 then goto L3f192c;
  #L3f18de.  v1:= v6.`m.c.c` @type ^`long` @kind wide;
  #L3f18e2.  v1:= v1 - v7 @kind long;
  #L3f18e4.  v3:= (`long`) v11 @kind i2l;
  #L3f18e6.  v5:= lcmp(v1, v3);
  #L3f18ea.  if v5 < 0 then goto L3f192c;
  #L3f18ee.  call temp:= `l`(v9) @signature `Lm/f;.l:()I` @kind virtual;
  #L3f18f4.  v1:= temp;
  #L3f18f6.  v1:= v1 - v10 @kind int;
  #L3f18f8.  if v1 >= v11 then goto L3f18fe;
  #L3f18fc.  goto L3f192c;
  #L3f18fe.  v1:= 0I;
  #L3f1900.  if v1 >= v11 then goto L3f1928;
  #L3f1904.  v2:= (`long`) v1 @kind i2l;
  #L3f1906.  v2:= v2 + v7 @kind long;
  #L3f1908.  call temp:= `f`(v6, v2) @signature `Lm/c;.f:(J)B` @kind virtual;
  #L3f190e.  v2:= temp;
  #L3f1910.  v3:= v10 + v1 @kind int;
  #L3f1914.  call temp:= `a`(v9, v3) @signature `Lm/f;.a:(I)B` @kind virtual;
  #L3f191a.  v3:= temp;
  #L3f191c.  if v2 == v3 then goto L3f1922;
  #L3f1920.  return v0;
  #L3f1922.  v1:= v1 + 1;
  #L3f1926.  goto L3f1900;
  #L3f1928.  v7:= 1I;
  #L3f192a.  return v7;
  #L3f192c.  return v0;
}
procedure `m.o` `b`(`m.c` v3 @kind this, `int` v4 ) @signature `Lm/c;.b:(I)Lm/o;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3f3004.  v0:= 1I;
  #L3f3006.  if v4 < v0 then goto L3f3060;
  #L3f300a.  v0:= 8192I;
  #L3f300e.  if v4 > v0 then goto L3f3060;
  #L3f3012.  v1:= v3.`m.c.b` @type ^`m.o` @kind object;
  #L3f3016.  if v1 != 0 then goto L3f3034;
  #L3f301a.  call temp:= `a`() @signature `Lm/p;.a:()Lm/o;` @kind static;
  #L3f3020.  v4:= temp @kind object;
  #L3f3022.  v3.`m.c.b` @type ^`m.o` := v4 @kind object;
  #L3f3026.  v4:= v3.`m.c.b` @type ^`m.o` @kind object;
  #L3f302a.  v4.`m.o.g` @type ^`m.o` := v4 @kind object;
  #L3f302e.  v4.`m.o.f` @type ^`m.o` := v4 @kind object;
  #L3f3032.  return v4 @kind object;
  #L3f3034.  v1:= v1.`m.o.g` @type ^`m.o` @kind object;
  #L3f3038.  v2:= v1.`m.o.c` @type ^`int`;
  #L3f303c.  v2:= v2 + v4 @kind int;
  #L3f303e.  if v2 > v0 then goto L3f3050;
  #L3f3042.  v4:= v1.`m.o.e` @type ^`boolean` @kind boolean;
  #L3f3046.  if v4 != 0 then goto L3f304c;
  #L3f304a.  goto L3f3050;
  #L3f304c.  v4:= v1 @kind object;
  #L3f304e.  goto L3f305e;
  #L3f3050.  call temp:= `a`() @signature `Lm/p;.a:()Lm/o;` @kind static;
  #L3f3056.  v4:= temp @kind object;
  #L3f3058.  call temp:= `a`(v1, v4) @signature `Lm/o;.a:(Lm/o;)Lm/o;` @kind virtual;
  #L3f305e.  return v4 @kind object;
  #L3f3060.  v4:= new `java.lang.IllegalArgumentException`;
  #L3f3064.  call `<init>`(v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3f306a.  throw v4;
}
procedure `void` `b`(`m.c` v6 @kind this, `m.c` v7 @kind object, `long` v8 ) @signature `Lm/c;.b:(Lm/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f3330.  if v7 == 0 then goto L3f3454;
  #L3f3334.  if v7 == v6 then goto L3f3444;
  #L3f3338.  v0:= v7.`m.c.c` @type ^`long` @kind wide;
  #L3f333c.  v2:= 0L;
  #L3f3340.  v4:= v8 @kind wide;
  #L3f3342.  call `a`(v0, v2, v4) @signature `Lm/u;.a:(JJJ)V` @kind static;
  #L3f3348.  v0:= 0L;
  #L3f334c.  v2:= lcmp(v8, v0);
  #L3f3350.  if v2 <= 0 then goto L3f3442;
  #L3f3354.  v0:= v7.`m.c.b` @type ^`m.o` @kind object;
  #L3f3358.  v1:= v0.`m.o.c` @type ^`int`;
  #L3f335c.  v0:= v0.`m.o.b` @type ^`int`;
  #L3f3360.  v1:= v1 - v0 @kind int;
  #L3f3362.  v0:= (`long`) v1 @kind i2l;
  #L3f3364.  v2:= lcmp(v8, v0);
  #L3f3368.  if v2 >= 0 then goto L3f33e4;
  #L3f336c.  v0:= v6.`m.c.b` @type ^`m.o` @kind object;
  #L3f3370.  if v0 == 0 then goto L3f337a;
  #L3f3374.  v0:= v0.`m.o.g` @type ^`m.o` @kind object;
  #L3f3378.  goto L3f337c;
  #L3f337a.  v0:= 0I;
  #L3f337c.  if v0 == 0 then goto L3f33d2;
  #L3f3380.  v1:= v0.`m.o.e` @type ^`boolean` @kind boolean;
  #L3f3384.  if v1 == 0 then goto L3f33d2;
  #L3f3388.  v1:= v0.`m.o.c` @type ^`int`;
  #L3f338c.  v1:= (`long`) v1 @kind i2l;
  #L3f338e.  v1:= v1 + v8 @kind long;
  #L3f3390.  v3:= v0.`m.o.d` @type ^`boolean` @kind boolean;
  #L3f3394.  if v3 == 0 then goto L3f339c;
  #L3f3398.  v3:= 0I;
  #L3f339a.  goto L3f33a0;
  #L3f339c.  v3:= v0.`m.o.b` @type ^`int`;
  #L3f33a0.  v3:= (`long`) v3 @kind i2l;
  #L3f33a2.  v1:= v1 - v3 @kind long;
  #L3f33a4.  v3:= 8192L;
  #L3f33a8.  v5:= lcmp(v1, v3);
  #L3f33ac.  if v5 > 0 then goto L3f33d2;
  #L3f33b0.  v1:= v7.`m.c.b` @type ^`m.o` @kind object;
  #L3f33b4.  v2:= (`int`) v8 @kind l2i;
  #L3f33b6.  call `a`(v1, v0, v2) @signature `Lm/o;.a:(Lm/o;I)V` @kind virtual;
  #L3f33bc.  v0:= v7.`m.c.c` @type ^`long` @kind wide;
  #L3f33c0.  v0:= v0 - v8 @kind long;
  #L3f33c2.  v7.`m.c.c` @type ^`long` := v0 @kind wide;
  #L3f33c6.  v0:= v6.`m.c.c` @type ^`long` @kind wide;
  #L3f33ca.  v0:= v0 + v8 @kind long;
  #L3f33cc.  v6.`m.c.c` @type ^`long` := v0 @kind wide;
  #L3f33d0.  return @kind void;
  #L3f33d2.  v0:= v7.`m.c.b` @type ^`m.o` @kind object;
  #L3f33d6.  v1:= (`int`) v8 @kind l2i;
  #L3f33d8.  call temp:= `a`(v0, v1) @signature `Lm/o;.a:(I)Lm/o;` @kind virtual;
  #L3f33de.  v0:= temp @kind object;
  #L3f33e0.  v7.`m.c.b` @type ^`m.o` := v0 @kind object;
  #L3f33e4.  v0:= v7.`m.c.b` @type ^`m.o` @kind object;
  #L3f33e8.  v1:= v0.`m.o.c` @type ^`int`;
  #L3f33ec.  v2:= v0.`m.o.b` @type ^`int`;
  #L3f33f0.  v1:= v1 - v2 @kind int;
  #L3f33f2.  v1:= (`long`) v1 @kind i2l;
  #L3f33f4.  call temp:= `b`(v0) @signature `Lm/o;.b:()Lm/o;` @kind virtual;
  #L3f33fa.  v3:= temp @kind object;
  #L3f33fc.  v7.`m.c.b` @type ^`m.o` := v3 @kind object;
  #L3f3400.  v3:= v6.`m.c.b` @type ^`m.o` @kind object;
  #L3f3404.  if v3 != 0 then goto L3f341a;
  #L3f3408.  v6.`m.c.b` @type ^`m.o` := v0 @kind object;
  #L3f340c.  v0:= v6.`m.c.b` @type ^`m.o` @kind object;
  #L3f3410.  v0.`m.o.g` @type ^`m.o` := v0 @kind object;
  #L3f3414.  v0.`m.o.f` @type ^`m.o` := v0 @kind object;
  #L3f3418.  goto L3f342a;
  #L3f341a.  v3:= v3.`m.o.g` @type ^`m.o` @kind object;
  #L3f341e.  call temp:= `a`(v3, v0) @signature `Lm/o;.a:(Lm/o;)Lm/o;` @kind virtual;
  #L3f3424.  call `a`(v0) @signature `Lm/o;.a:()V` @kind virtual;
  #L3f342a.  v3:= v7.`m.c.c` @type ^`long` @kind wide;
  #L3f342e.  v3:= v3 - v1 @kind long;
  #L3f3430.  v7.`m.c.c` @type ^`long` := v3 @kind wide;
  #L3f3434.  v3:= v6.`m.c.c` @type ^`long` @kind wide;
  #L3f3438.  v3:= v3 + v1 @kind long;
  #L3f343a.  v6.`m.c.c` @type ^`long` := v3 @kind wide;
  #L3f343e.  v8:= v8 - v1 @kind long;
  #L3f3440.  goto L3f3348;
  #L3f3442.  return @kind void;
  #L3f3444.  v7:= new `java.lang.IllegalArgumentException`;
  #L3f3448.  v8:= "source == this" @kind object;
  #L3f344c.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3452.  throw v7;
  #L3f3454.  v7:= new `java.lang.IllegalArgumentException`;
  #L3f3458.  v8:= "source == null" @kind object;
  #L3f345c.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3462.  throw v7;
}
procedure `byte`[] `b`(`m.c` v6 @kind this, `long` v7 ) @signature `Lm/c;.b:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f1a7c.  v0:= v6.`m.c.c` @type ^`long` @kind wide;
  #L3f1a80.  v2:= 0L;
  #L3f1a84.  v4:= v7 @kind wide;
  #L3f1a86.  call `a`(v0, v2, v4) @signature `Lm/u;.a:(JJJ)V` @kind static;
  #L3f1a8c.  v0:= 2147483647L;
  #L3f1a92.  v2:= lcmp(v7, v0);
  #L3f1a96.  if v2 > 0 then goto L3f1aa8;
  #L3f1a9a.  v8:= (`int`) v7 @kind l2i;
  #L3f1a9c.  v7:= new `byte`[v8];
  #L3f1aa0.  call `readFully`(v6, v7) @signature `Lm/c;.readFully:([B)V` @kind virtual;
  #L3f1aa6.  return v7 @kind object;
  #L3f1aa8.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f1aac.  v1:= new `java.lang.StringBuilder`;
  #L3f1ab0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f1ab6.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L3f1aba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f1ac0.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f1ac6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f1acc.  v7:= temp @kind object;
  #L3f1ace.  call `<init>`(v0, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f1ad4.  throw v0;
}
procedure `java.lang.String` `c`(`m.c` v10 @kind this, `long` v11 ) @signature `Lm/c;.c:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3f200c.  v0:= 0L;
  #L3f2010.  v2:= lcmp(v11, v0);
  #L3f2014.  if v2 < 0 then goto L3f2130;
  #L3f2018.  v0:= 1L;
  #L3f201c.  v2:= 9223372036854775807L;
  #L3f2026.  v4:= lcmp(v11, v2);
  #L3f202a.  if v4 != 0 then goto L3f2030;
  #L3f202e.  goto L3f2034;
  #L3f2030.  v2:= v11 + v0 @kind long;
  #L3f2034.  v5:= 10I;
  #L3f2038.  v6:= 0L;
  #L3f203c.  v4:= v10 @kind object;
  #L3f203e.  v8:= v2 @kind wide;
  #L3f2040.  call temp:= `a`(v4, v5, v6, v8) @signature `Lm/c;.a:(BJJ)J` @kind virtual;
  #L3f2046.  v4:= temp @kind wide;
  #L3f2048.  v6:= -1L;
  #L3f204c.  v8:= lcmp(v4, v6);
  #L3f2050.  if v8 == 0 then goto L3f205e;
  #L3f2054.  call temp:= `h`(v10, v4) @signature `Lm/c;.h:(J)Ljava/lang/String;` @kind virtual;
  #L3f205a.  v11:= temp @kind object;
  #L3f205c.  return v11 @kind object;
  #L3f205e.  call temp:= `v`(v10) @signature `Lm/c;.v:()J` @kind virtual;
  #L3f2064.  v4:= temp @kind wide;
  #L3f2066.  v6:= lcmp(v2, v4);
  #L3f206a.  if v6 >= 0 then goto L3f209c;
  #L3f206e.  v0:= v2 - v0 @kind long;
  #L3f2072.  call temp:= `f`(v10, v0) @signature `Lm/c;.f:(J)B` @kind virtual;
  #L3f2078.  v0:= temp;
  #L3f207a.  v1:= 13I;
  #L3f207e.  if v0 != v1 then goto L3f209c;
  #L3f2082.  call temp:= `f`(v10, v2) @signature `Lm/c;.f:(J)B` @kind virtual;
  #L3f2088.  v0:= temp;
  #L3f208a.  v1:= 10I;
  #L3f208e.  if v0 != v1 then goto L3f209c;
  #L3f2092.  call temp:= `h`(v10, v2) @signature `Lm/c;.h:(J)Ljava/lang/String;` @kind virtual;
  #L3f2098.  v11:= temp @kind object;
  #L3f209a.  return v11 @kind object;
  #L3f209c.  v6:= new `m.c`;
  #L3f20a0.  call `<init>`(v6) @signature `Lm/c;.<init>:()V` @kind direct;
  #L3f20a6.  v2:= 0L;
  #L3f20aa.  v0:= 32L;
  #L3f20ae.  call temp:= `v`(v10) @signature `Lm/c;.v:()J` @kind virtual;
  #L3f20b4.  v4:= temp @kind wide;
  #L3f20b6.  call temp:= `min`(v0, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3f20bc.  v4:= temp @kind wide;
  #L3f20be.  v0:= v10 @kind object;
  #L3f20c0.  v1:= v6 @kind object;
  #L3f20c2.  call temp:= `a`(v0, v1, v2, v4) @signature `Lm/c;.a:(Lm/c;JJ)Lm/c;` @kind virtual;
  #L3f20c8.  v0:= new `java.io.EOFException`;
  #L3f20cc.  v1:= new `java.lang.StringBuilder`;
  #L3f20d0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f20d6.  v2:= "\\n not found: limit=" @kind object;
  #L3f20da.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f20e0.  call temp:= `v`(v10) @signature `Lm/c;.v:()J` @kind virtual;
  #L3f20e6.  v2:= temp @kind wide;
  #L3f20e8.  call temp:= `min`(v2, v11) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3f20ee.  v11:= temp @kind wide;
  #L3f20f0.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f20f6.  v11:= " content=" @kind object;
  #L3f20fa.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2100.  call temp:= `t`(v6) @signature `Lm/c;.t:()Lm/f;` @kind virtual;
  #L3f2106.  v11:= temp @kind object;
  #L3f2108.  call temp:= `e`(v11) @signature `Lm/f;.e:()Ljava/lang/String;` @kind virtual;
  #L3f210e.  v11:= temp @kind object;
  #L3f2110.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2116.  v11:= 8230I;
  #L3f211a.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2120.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f2126.  v11:= temp @kind object;
  #L3f2128.  call `<init>`(v0, v11) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f212e.  throw v0;
  #L3f2130.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f2134.  v1:= new `java.lang.StringBuilder`;
  #L3f2138.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f213e.  v2:= "limit < 0: " @kind object;
  #L3f2142.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2148.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f214e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f2154.  v11:= temp @kind object;
  #L3f2156.  call `<init>`(v0, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f215c.  throw v0;
}
procedure `m.c` `c`(`m.c` v0 @kind this) @signature `Lm/c;.c:()Lm/c;` @AccessFlag PUBLIC {
    temp;

  #L3f25e8.  return v0 @kind object;
}
procedure `m.c` `c`(`m.c` v3 @kind this, `int` v4 ) @signature `Lm/c;.c:(I)Lm/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f2d9c.  v0:= 128I;
  #L3f2da0.  if v4 >= v0 then goto L3f2dac;
  #L3f2da4.  call temp:= `writeByte`(v3, v4) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3f2daa.  goto L3f2e2a;
  #L3f2dac.  v1:= 2048I;
  #L3f2db0.  v2:= 63I;
  #L3f2db4.  if v4 >= v1 then goto L3f2dcc;
  #L3f2db8.  v1:= v4 ^> 6;
  #L3f2dbc.  v1:= v1 ^| 192;
  #L3f2dc0.  call temp:= `writeByte`(v3, v1) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3f2dc6.  v4:= v4 ^& v2 @kind int;
  #L3f2dc8.  v4:= v4 ^| v0 @kind int;
  #L3f2dca.  goto L3f2da4;
  #L3f2dcc.  v1:= 65536I;
  #L3f2dd0.  if v4 >= v1 then goto L3f2dfa;
  #L3f2dd4.  v1:= 55296I;
  #L3f2dda.  if v4 < v1 then goto L3f2df0;
  #L3f2dde.  v1:= 57343I;
  #L3f2de4.  if v4 > v1 then goto L3f2df0;
  #L3f2de8.  call temp:= `writeByte`(v3, v2) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3f2dee.  goto L3f2e2a;
  #L3f2df0.  v1:= v4 ^> 12;
  #L3f2df4.  v1:= v1 ^| 224;
  #L3f2df8.  goto L3f2e1a;
  #L3f2dfa.  v1:= 1114111I;
  #L3f2e00.  if v4 > v1 then goto L3f2e2c;
  #L3f2e04.  v1:= v4 ^> 18;
  #L3f2e08.  v1:= v1 ^| 240;
  #L3f2e0c.  call temp:= `writeByte`(v3, v1) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3f2e12.  v1:= v4 ^> 12;
  #L3f2e16.  v1:= v1 ^& v2 @kind int;
  #L3f2e18.  v1:= v1 ^| v0 @kind int;
  #L3f2e1a.  call temp:= `writeByte`(v3, v1) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3f2e20.  v1:= v4 ^> 6;
  #L3f2e24.  v1:= v1 ^& v2 @kind int;
  #L3f2e26.  v1:= v1 ^| v0 @kind int;
  #L3f2e28.  goto L3f2dc0;
  #L3f2e2a.  return v3 @kind object;
  #L3f2e2c.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f2e30.  v1:= new `java.lang.StringBuilder`;
  #L3f2e34.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f2e3a.  v2:= "Unexpected code point: " @kind object;
  #L3f2e3e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2e44.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L3f2e4a.  v4:= temp @kind object;
  #L3f2e4c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2e52.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f2e58.  v4:= temp @kind object;
  #L3f2e5a.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2e60.  throw v0;
}
procedure `java.lang.Object` `clone`(`m.c` v1 @kind this) @signature `Lm/c;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3f1de4.  call temp:= `clone`(v1) @signature `Lm/c;.clone:()Lm/c;` @kind virtual;
  #L3f1dea.  v0:= temp @kind object;
  #L3f1dec.  return v0 @kind object;
}
procedure `m.c` `clone`(`m.c` v6 @kind this) @signature `Lm/c;.clone:()Lm/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f25fc.  v0:= new `m.c`;
  #L3f2600.  call `<init>`(v0) @signature `Lm/c;.<init>:()V` @kind direct;
  #L3f2606.  v1:= v6.`m.c.c` @type ^`long` @kind wide;
  #L3f260a.  v3:= 0L;
  #L3f260e.  v5:= lcmp(v1, v3);
  #L3f2612.  if v5 != 0 then goto L3f2618;
  #L3f2616.  return v0 @kind object;
  #L3f2618.  v1:= v6.`m.c.b` @type ^`m.o` @kind object;
  #L3f261c.  call temp:= `c`(v1) @signature `Lm/o;.c:()Lm/o;` @kind virtual;
  #L3f2622.  v1:= temp @kind object;
  #L3f2624.  v0.`m.c.b` @type ^`m.o` := v1 @kind object;
  #L3f2628.  v1:= v0.`m.c.b` @type ^`m.o` @kind object;
  #L3f262c.  v1.`m.o.g` @type ^`m.o` := v1 @kind object;
  #L3f2630.  v1.`m.o.f` @type ^`m.o` := v1 @kind object;
  #L3f2634.  v1:= v6.`m.c.b` @type ^`m.o` @kind object;
  #L3f2638.  v1:= v1.`m.o.f` @type ^`m.o` @kind object;
  #L3f263c.  v2:= v6.`m.c.b` @type ^`m.o` @kind object;
  #L3f2640.  if v1 == v2 then goto L3f265c;
  #L3f2644.  v2:= v0.`m.c.b` @type ^`m.o` @kind object;
  #L3f2648.  v2:= v2.`m.o.g` @type ^`m.o` @kind object;
  #L3f264c.  call temp:= `c`(v1) @signature `Lm/o;.c:()Lm/o;` @kind virtual;
  #L3f2652.  v3:= temp @kind object;
  #L3f2654.  call temp:= `a`(v2, v3) @signature `Lm/o;.a:(Lm/o;)Lm/o;` @kind virtual;
  #L3f265a.  goto L3f2638;
  #L3f265c.  v1:= v6.`m.c.c` @type ^`long` @kind wide;
  #L3f2660.  v0.`m.c.c` @type ^`long` := v1 @kind wide;
  #L3f2664.  return v0 @kind object;
}
procedure `void` `close`(`m.c` v0 @kind this) @signature `Lm/c;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L3f321c.  return @kind void;
}
procedure `m.t` `d`(`m.c` v1 @kind this) @signature `Lm/c;.d:()Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f307c.  v0:= `@@m.t.d` @type ^`m.t` @kind object;
  #L3f3080.  return v0 @kind object;
}
procedure `void` `d`(`m.c` v3 @kind this, `long` v4 ) @signature `Lm/c;.d:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f3280.  v0:= v3.`m.c.c` @type ^`long` @kind wide;
  #L3f3284.  v2:= lcmp(v0, v4);
  #L3f3288.  if v2 < 0 then goto L3f328e;
  #L3f328c.  return @kind void;
  #L3f328e.  v4:= new `java.io.EOFException`;
  #L3f3292.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3f3298.  throw v4;
}
procedure `java.lang.String` `e`(`m.c` v2 @kind this) @signature `Lm/c;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f1fe8.  v0:= 9223372036854775807L;
  #L3f1ff2.  call temp:= `c`(v2, v0) @signature `Lm/c;.c:(J)Ljava/lang/String;` @kind virtual;
  #L3f1ff8.  v0:= temp @kind object;
  #L3f1ffa.  return v0 @kind object;
}
procedure `m.c` `e`(`m.c` v9 @kind this, `long` v10 ) @signature `Lm/c;.e:(J)Lm/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f2888.  v0:= 0L;
  #L3f288c.  v2:= lcmp(v10, v0);
  #L3f2890.  if v2 != 0 then goto L3f28a0;
  #L3f2894.  v10:= 48I;
  #L3f2898.  call temp:= `writeByte`(v9, v10) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3f289e.  return v9 @kind object;
  #L3f28a0.  call temp:= `highestOneBit`(v10) @signature `Ljava/lang/Long;.highestOneBit:(J)J` @kind static;
  #L3f28a6.  v0:= temp @kind wide;
  #L3f28a8.  call temp:= `numberOfTrailingZeros`(v0) @signature `Ljava/lang/Long;.numberOfTrailingZeros:(J)I` @kind static;
  #L3f28ae.  v0:= temp;
  #L3f28b0.  v1:= 4I;
  #L3f28b2.  v0:= v0 / v1 @kind int;
  #L3f28b4.  v0:= v0 + 1;
  #L3f28b8.  call temp:= `b`(v9, v0) @signature `Lm/c;.b:(I)Lm/o;` @kind virtual;
  #L3f28be.  v2:= temp @kind object;
  #L3f28c0.  v3:= v2.`m.o.a` @type ^`byte`[] @kind object;
  #L3f28c4.  v4:= v2.`m.o.c` @type ^`int`;
  #L3f28c8.  v5:= v4 + v0 @kind int;
  #L3f28cc.  v5:= v5 + -1;
  #L3f28d0.  if v5 < v4 then goto L3f28f0;
  #L3f28d4.  v6:= `@@m.c.d` @type ^`byte`[] @kind object;
  #L3f28d8.  v7:= 15L;
  #L3f28dc.  v7:= v7 ^& v10 @kind long;
  #L3f28de.  v8:= (`int`) v7 @kind l2i;
  #L3f28e0.  v6:= v6[v8] @kind byte;
  #L3f28e4.  v3[v5]:= v6 @kind byte;
  #L3f28e8.  v10:= v10 ^>> v1 @kind long;
  #L3f28ea.  v5:= v5 + -1;
  #L3f28ee.  goto L3f28d0;
  #L3f28f0.  v10:= v2.`m.o.c` @type ^`int`;
  #L3f28f4.  v10:= v10 + v0 @kind int;
  #L3f28f6.  v2.`m.o.c` @type ^`int` := v10;
  #L3f28fa.  v10:= v9.`m.c.c` @type ^`long` @kind wide;
  #L3f28fe.  v0:= (`long`) v0 @kind i2l;
  #L3f2900.  v10:= v10 + v0 @kind long;
  #L3f2902.  v9.`m.c.c` @type ^`long` := v10 @kind wide;
  #L3f2906.  return v9 @kind object;
}
procedure `m.d` `e`(`m.c` v0 @kind this, `long` v1 ) @signature `Lm/c;.e:(J)Lm/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f2ed4.  call temp:= `e`(v0, v1) @signature `Lm/c;.e:(J)Lm/c;` @kind virtual;
  #L3f2eda.  return v0 @kind object;
}
procedure `boolean` `equals`(`m.c` v13 @kind this, `java.lang.Object` v14 @kind object) @signature `Lm/c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3f1780.  v0:= 1I;
  #L3f1782.  if v13 != v14 then goto L3f1788;
  #L3f1786.  return v0;
  #L3f1788.  v1:= instanceof @variable v14 @type ^`m.c` @kind boolean;
  #L3f178c.  v2:= 0I;
  #L3f178e.  if v1 != 0 then goto L3f1794;
  #L3f1792.  return v2;
  #L3f1794.  v14:= (`m.c`) v14 @kind object;
  #L3f1798.  v3:= v13.`m.c.c` @type ^`long` @kind wide;
  #L3f179c.  v5:= v14.`m.c.c` @type ^`long` @kind wide;
  #L3f17a0.  v1:= lcmp(v3, v5);
  #L3f17a4.  if v1 == 0 then goto L3f17aa;
  #L3f17a8.  return v2;
  #L3f17aa.  v5:= 0L;
  #L3f17ae.  v1:= lcmp(v3, v5);
  #L3f17b2.  if v1 != 0 then goto L3f17b8;
  #L3f17b6.  return v0;
  #L3f17b8.  v1:= v13.`m.c.b` @type ^`m.o` @kind object;
  #L3f17bc.  v14:= v14.`m.c.b` @type ^`m.o` @kind object;
  #L3f17c0.  v3:= v1.`m.o.b` @type ^`int`;
  #L3f17c4.  v4:= v14.`m.o.b` @type ^`int`;
  #L3f17c8.  v7:= v13.`m.c.c` @type ^`long` @kind wide;
  #L3f17cc.  v9:= lcmp(v5, v7);
  #L3f17d0.  if v9 >= 0 then goto L3f184e;
  #L3f17d4.  v7:= v1.`m.o.c` @type ^`int`;
  #L3f17d8.  v7:= v7 - v3 @kind int;
  #L3f17da.  v8:= v14.`m.o.c` @type ^`int`;
  #L3f17de.  v8:= v8 - v4 @kind int;
  #L3f17e0.  call temp:= `min`(v7, v8) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3f17e6.  v7:= temp;
  #L3f17e8.  v7:= (`long`) v7 @kind i2l;
  #L3f17ea.  v9:= v4;
  #L3f17ec.  v4:= v3;
  #L3f17ee.  v3:= 0I;
  #L3f17f0.  v10:= (`long`) v3 @kind i2l;
  #L3f17f2.  v12:= lcmp(v10, v7);
  #L3f17f6.  if v12 >= 0 then goto L3f1822;
  #L3f17fa.  v10:= v1.`m.o.a` @type ^`byte`[] @kind object;
  #L3f17fe.  v11:= v4 + 1;
  #L3f1802.  v4:= v10[v4] @kind byte;
  #L3f1806.  v10:= v14.`m.o.a` @type ^`byte`[] @kind object;
  #L3f180a.  v12:= v9 + 1;
  #L3f180e.  v9:= v10[v9] @kind byte;
  #L3f1812.  if v4 == v9 then goto L3f1818;
  #L3f1816.  return v2;
  #L3f1818.  v3:= v3 + 1;
  #L3f181c.  v4:= v11;
  #L3f181e.  v9:= v12;
  #L3f1820.  goto L3f17f0;
  #L3f1822.  v3:= v1.`m.o.c` @type ^`int`;
  #L3f1826.  if v4 != v3 then goto L3f1834;
  #L3f182a.  v1:= v1.`m.o.f` @type ^`m.o` @kind object;
  #L3f182e.  v3:= v1.`m.o.b` @type ^`int`;
  #L3f1832.  goto L3f1836;
  #L3f1834.  v3:= v4;
  #L3f1836.  v4:= v14.`m.o.c` @type ^`int`;
  #L3f183a.  if v9 != v4 then goto L3f1848;
  #L3f183e.  v14:= v14.`m.o.f` @type ^`m.o` @kind object;
  #L3f1842.  v4:= v14.`m.o.b` @type ^`int`;
  #L3f1846.  goto L3f184a;
  #L3f1848.  v4:= v9;
  #L3f184a.  v5:= v5 + v7 @kind long;
  #L3f184c.  goto L3f17c8;
  #L3f184e.  return v0;
}
procedure `byte` `f`(`m.c` v6 @kind this, `long` v7 ) @signature `Lm/c;.f:(J)B` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f1940.  v0:= v6.`m.c.c` @type ^`long` @kind wide;
  #L3f1944.  v4:= 1L;
  #L3f1948.  v2:= v7 @kind wide;
  #L3f194a.  call `a`(v0, v2, v4) @signature `Lm/u;.a:(JJJ)V` @kind static;
  #L3f1950.  v0:= v6.`m.c.c` @type ^`long` @kind wide;
  #L3f1954.  v2:= v0 - v7 @kind long;
  #L3f1958.  v4:= lcmp(v2, v7);
  #L3f195c.  if v4 <= 0 then goto L3f198e;
  #L3f1960.  v0:= v6.`m.c.b` @type ^`m.o` @kind object;
  #L3f1964.  v1:= v0.`m.o.c` @type ^`int`;
  #L3f1968.  v2:= v0.`m.o.b` @type ^`int`;
  #L3f196c.  v1:= v1 - v2 @kind int;
  #L3f196e.  v3:= (`long`) v1 @kind i2l;
  #L3f1970.  v1:= lcmp(v7, v3);
  #L3f1974.  if v1 >= 0 then goto L3f1986;
  #L3f1978.  v0:= v0.`m.o.a` @type ^`byte`[] @kind object;
  #L3f197c.  v8:= (`int`) v7 @kind l2i;
  #L3f197e.  v2:= v2 + v8 @kind int;
  #L3f1980.  v7:= v0[v2] @kind byte;
  #L3f1984.  return v7;
  #L3f1986.  v7:= v7 - v3 @kind long;
  #L3f1988.  v0:= v0.`m.o.f` @type ^`m.o` @kind object;
  #L3f198c.  goto L3f1964;
  #L3f198e.  v7:= v7 - v0 @kind long;
  #L3f1990.  v0:= v6.`m.c.b` @type ^`m.o` @kind object;
  #L3f1994.  v0:= v0.`m.o.g` @type ^`m.o` @kind object;
  #L3f1998.  v1:= v0.`m.o.c` @type ^`int`;
  #L3f199c.  v2:= v0.`m.o.b` @type ^`int`;
  #L3f19a0.  v1:= v1 - v2 @kind int;
  #L3f19a2.  v3:= (`long`) v1 @kind i2l;
  #L3f19a4.  v7:= v7 + v3 @kind long;
  #L3f19a6.  v3:= 0L;
  #L3f19aa.  v1:= lcmp(v7, v3);
  #L3f19ae.  if v1 < 0 then goto L3f1994;
  #L3f19b2.  v0:= v0.`m.o.a` @type ^`byte`[] @kind object;
  #L3f19b6.  v8:= (`int`) v7 @kind l2i;
  #L3f19b8.  v2:= v2 + v8 @kind int;
  #L3f19ba.  v7:= v0[v2] @kind byte;
  #L3f19be.  return v7;
}
procedure `int` `f`(`m.c` v1 @kind this) @signature `Lm/c;.f:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1d48.  call temp:= `readInt`(v1) @signature `Lm/c;.readInt:()I` @kind virtual;
  #L3f1d4e.  v0:= temp;
  #L3f1d50.  call temp:= `a`(v0) @signature `Lm/u;.a:(I)I` @kind static;
  #L3f1d56.  v0:= temp;
  #L3f1d58.  return v0;
}
procedure `void` `flush`(`m.c` v0 @kind this) @signature `Lm/c;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L3f3230.  return @kind void;
}
procedure `java.lang.String` `g`(`m.c` v1 @kind this, `long` v2 ) @signature `Lm/c;.g:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1f74.  v0:= `@@m.u.a` @type ^`java.nio.charset.Charset` @kind object;
  #L3f1f78.  call temp:= `a`(v1, v2, v0) @signature `Lm/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L3f1f7e.  v2:= temp @kind object;
  #L3f1f80.  return v2 @kind object;
}
procedure `boolean` `g`(`m.c` v5 @kind this) @signature `Lm/c;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f1860.  v0:= v5.`m.c.c` @type ^`long` @kind wide;
  #L3f1864.  v2:= 0L;
  #L3f1868.  v4:= lcmp(v0, v2);
  #L3f186c.  if v4 != 0 then goto L3f1874;
  #L3f1870.  v0:= 1I;
  #L3f1872.  goto L3f1876;
  #L3f1874.  v0:= 0I;
  #L3f1876.  return v0;
}
procedure `java.lang.String` `h`(`m.c` v6 @kind this, `long` v7 ) @signature `Lm/c;.h:(J)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f1f94.  v0:= 1L;
  #L3f1f98.  v2:= 0L;
  #L3f1f9c.  v4:= lcmp(v7, v2);
  #L3f1fa0.  if v4 <= 0 then goto L3f1fcc;
  #L3f1fa4.  v2:= v7 - v0 @kind long;
  #L3f1fa8.  call temp:= `f`(v6, v2) @signature `Lm/c;.f:(J)B` @kind virtual;
  #L3f1fae.  v4:= temp;
  #L3f1fb0.  v5:= 13I;
  #L3f1fb4.  if v4 != v5 then goto L3f1fcc;
  #L3f1fb8.  call temp:= `g`(v6, v2) @signature `Lm/c;.g:(J)Ljava/lang/String;` @kind virtual;
  #L3f1fbe.  v7:= temp @kind object;
  #L3f1fc0.  v0:= 2L;
  #L3f1fc4.  call `skip`(v6, v0) @signature `Lm/c;.skip:(J)V` @kind virtual;
  #L3f1fca.  return v7 @kind object;
  #L3f1fcc.  call temp:= `g`(v6, v7) @signature `Lm/c;.g:(J)Ljava/lang/String;` @kind virtual;
  #L3f1fd2.  v7:= temp @kind object;
  #L3f1fd4.  goto L3f1fc4;
}
procedure `short` `h`(`m.c` v1 @kind this) @signature `Lm/c;.h:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3168.  call temp:= `readShort`(v1) @signature `Lm/c;.readShort:()S` @kind virtual;
  #L3f316e.  v0:= temp;
  #L3f3170.  call temp:= `a`(v0) @signature `Lm/u;.a:(S)S` @kind static;
  #L3f3176.  v0:= temp;
  #L3f3178.  return v0;
}
procedure `int` `hashCode`(`m.c` v5 @kind this) @signature `Lm/c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f1ae8.  v0:= v5.`m.c.b` @type ^`m.o` @kind object;
  #L3f1aec.  if v0 != 0 then goto L3f1af4;
  #L3f1af0.  v0:= 0I;
  #L3f1af2.  return v0;
  #L3f1af4.  v1:= 1I;
  #L3f1af6.  v2:= v0.`m.o.b` @type ^`int`;
  #L3f1afa.  v3:= v0.`m.o.c` @type ^`int`;
  #L3f1afe.  if v2 >= v3 then goto L3f1b16;
  #L3f1b02.  v1:= v1 * 31;
  #L3f1b06.  v4:= v0.`m.o.a` @type ^`byte`[] @kind object;
  #L3f1b0a.  v4:= v4[v2] @kind byte;
  #L3f1b0e.  v1:= v1 + v4 @kind int;
  #L3f1b10.  v2:= v2 + 1;
  #L3f1b14.  goto L3f1afe;
  #L3f1b16.  v0:= v0.`m.o.f` @type ^`m.o` @kind object;
  #L3f1b1a.  v2:= v5.`m.c.b` @type ^`m.o` @kind object;
  #L3f1b1e.  if v0 != v2 then goto L3f1af6;
  #L3f1b22.  return v1;
}
procedure `long` `i`(`m.c` v15 @kind this) @signature `Lm/c;.i:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L3f2414.  v0:= v15.`m.c.c` @type ^`long` @kind wide;
  #L3f2418.  v2:= 0L;
  #L3f241c.  v4:= lcmp(v0, v2);
  #L3f2420.  if v4 == 0 then goto L3f2568;
  #L3f2424.  v0:= 0I;
  #L3f2426.  v4:= v2 @kind wide;
  #L3f2428.  v1:= 0I;
  #L3f242a.  v6:= v15.`m.c.b` @type ^`m.o` @kind object;
  #L3f242e.  v7:= v6.`m.o.a` @type ^`byte`[] @kind object;
  #L3f2432.  v8:= v6.`m.o.b` @type ^`int`;
  #L3f2436.  v9:= v6.`m.o.c` @type ^`int`;
  #L3f243a.  if v8 >= v9 then goto L3f2532;
  #L3f243e.  v10:= v7[v8] @kind byte;
  #L3f2442.  v11:= 48I;
  #L3f2446.  if v10 < v11 then goto L3f2458;
  #L3f244a.  v11:= 57I;
  #L3f244e.  if v10 > v11 then goto L3f2458;
  #L3f2452.  v11:= v10 + -48;
  #L3f2456.  goto L3f2488;
  #L3f2458.  v11:= 97I;
  #L3f245c.  if v10 < v11 then goto L3f2472;
  #L3f2460.  v11:= 102I;
  #L3f2464.  if v10 > v11 then goto L3f2472;
  #L3f2468.  v11:= v10 + -97;
  #L3f246c.  v11:= v11 + 10;
  #L3f2470.  goto L3f2488;
  #L3f2472.  v11:= 65I;
  #L3f2476.  if v10 < v11 then goto L3f24f4;
  #L3f247a.  v11:= 70I;
  #L3f247e.  if v10 > v11 then goto L3f24f4;
  #L3f2482.  v11:= v10 + -65;
  #L3f2486.  goto L3f246c;
  #L3f2488.  v12:= -3.105036184601418E231D;
  #L3f248c.  v12:= v12 ^& v4 @kind long;
  #L3f248e.  v14:= lcmp(v12, v2);
  #L3f2492.  if v14 != 0 then goto L3f24a8;
  #L3f2496.  v10:= 4I;
  #L3f2498.  v4:= v4 ^< v10 @kind long;
  #L3f249a.  v10:= (`long`) v11 @kind i2l;
  #L3f249c.  v4:= v4 ^| v10 @kind long;
  #L3f249e.  v8:= v8 + 1;
  #L3f24a2.  v1:= v1 + 1;
  #L3f24a6.  goto L3f243a;
  #L3f24a8.  v0:= new `m.c`;
  #L3f24ac.  call `<init>`(v0) @signature `Lm/c;.<init>:()V` @kind direct;
  #L3f24b2.  call temp:= `e`(v0, v4) @signature `Lm/c;.e:(J)Lm/c;` @kind virtual;
  #L3f24b8.  call temp:= `writeByte`(v0, v10) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3f24be.  v1:= new `java.lang.NumberFormatException`;
  #L3f24c2.  v2:= new `java.lang.StringBuilder`;
  #L3f24c6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f24cc.  v3:= "Number too large: " @kind object;
  #L3f24d0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f24d6.  call temp:= `u`(v0) @signature `Lm/c;.u:()Ljava/lang/String;` @kind virtual;
  #L3f24dc.  v0:= temp @kind object;
  #L3f24de.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f24e4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f24ea.  v0:= temp @kind object;
  #L3f24ec.  call `<init>`(v1, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f24f2.  throw v1;
  #L3f24f4.  if v1 == 0 then goto L3f24fc;
  #L3f24f8.  v0:= 1I;
  #L3f24fa.  goto L3f2532;
  #L3f24fc.  v0:= new `java.lang.NumberFormatException`;
  #L3f2500.  v1:= new `java.lang.StringBuilder`;
  #L3f2504.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f250a.  v2:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L3f250e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2514.  call temp:= `toHexString`(v10) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L3f251a.  v2:= temp @kind object;
  #L3f251c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2522.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f2528.  v1:= temp @kind object;
  #L3f252a.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2530.  throw v0;
  #L3f2532.  if v8 != v9 then goto L3f254a;
  #L3f2536.  call temp:= `b`(v6) @signature `Lm/o;.b:()Lm/o;` @kind virtual;
  #L3f253c.  v7:= temp @kind object;
  #L3f253e.  v15.`m.c.b` @type ^`m.o` := v7 @kind object;
  #L3f2542.  call `a`(v6) @signature `Lm/p;.a:(Lm/o;)V` @kind static;
  #L3f2548.  goto L3f254e;
  #L3f254a.  v6.`m.o.b` @type ^`int` := v8;
  #L3f254e.  if v0 != 0 then goto L3f255a;
  #L3f2552.  v6:= v15.`m.c.b` @type ^`m.o` @kind object;
  #L3f2556.  if v6 != 0 then goto L3f242a;
  #L3f255a.  v2:= v15.`m.c.c` @type ^`long` @kind wide;
  #L3f255e.  v0:= (`long`) v1 @kind i2l;
  #L3f2560.  v2:= v2 - v0 @kind long;
  #L3f2562.  v15.`m.c.c` @type ^`long` := v2 @kind wide;
  #L3f2566.  return v4 @kind wide;
  #L3f2568.  v0:= new `java.lang.IllegalStateException`;
  #L3f256c.  v1:= "size == 0" @kind object;
  #L3f2570.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2576.  throw v0;
}
procedure `boolean` `isOpen`(`m.c` v1 @kind this) @signature `Lm/c;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1888.  v0:= 1I;
  #L3f188a.  return v0;
}
procedure `m.c` `j`(`m.c` v0 @kind this) @signature `Lm/c;.j:()Lm/c;` @AccessFlag PUBLIC {
    temp;

  #L3f2758.  return v0 @kind object;
}
procedure `m.d` `j`(`m.c` v0 @kind this) @signature `Lm/c;.j:()Lm/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f2e74.  call temp:= `j`(v0) @signature `Lm/c;.j:()Lm/c;` @kind virtual;
  #L3f2e7a.  return v0 @kind object;
}
procedure `void` `q`(`m.c` v2 @kind this) @signature `Lm/c;.q:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f31e0.  v0:= v2.`m.c.c` @type ^`long` @kind wide;
  #L3f31e4.  call `skip`(v2, v0) @signature `Lm/c;.skip:(J)V` @kind virtual;
  #L3f31ea.  return @kind void;
  #L3f31ec.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L3f31ee.  v1:= new `java.lang.AssertionError`;
  #L3f31f2.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3f31f8.  throw v1;
  catch `java.io.EOFException` @[L3f31e0..L3f31ea] goto L3f31ec;
}
procedure `long` `r`(`m.c` v5 @kind this) @signature `Lm/c;.r:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f2194.  v0:= v5.`m.c.c` @type ^`long` @kind wide;
  #L3f2198.  v2:= 0L;
  #L3f219c.  v4:= lcmp(v0, v2);
  #L3f21a0.  if v4 != 0 then goto L3f21a6;
  #L3f21a4.  return v2 @kind wide;
  #L3f21a6.  v2:= v5.`m.c.b` @type ^`m.o` @kind object;
  #L3f21aa.  v2:= v2.`m.o.g` @type ^`m.o` @kind object;
  #L3f21ae.  v3:= v2.`m.o.c` @type ^`int`;
  #L3f21b2.  v4:= 8192I;
  #L3f21b6.  if v3 >= v4 then goto L3f21cc;
  #L3f21ba.  v4:= v2.`m.o.e` @type ^`boolean` @kind boolean;
  #L3f21be.  if v4 == 0 then goto L3f21cc;
  #L3f21c2.  v2:= v2.`m.o.b` @type ^`int`;
  #L3f21c6.  v3:= v3 - v2 @kind int;
  #L3f21c8.  v2:= (`long`) v3 @kind i2l;
  #L3f21ca.  v0:= v0 - v2 @kind long;
  #L3f21cc.  return v0 @kind wide;
}
procedure `int` `read`(`m.c` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lm/c;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f1bb4.  v0:= v6.`m.c.b` @type ^`m.o` @kind object;
  #L3f1bb8.  if v0 != 0 then goto L3f1bc0;
  #L3f1bbc.  v7:= -1I;
  #L3f1bbe.  return v7;
  #L3f1bc0.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L3f1bc6.  v1:= temp;
  #L3f1bc8.  v2:= v0.`m.o.c` @type ^`int`;
  #L3f1bcc.  v3:= v0.`m.o.b` @type ^`int`;
  #L3f1bd0.  v2:= v2 - v3 @kind int;
  #L3f1bd2.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3f1bd8.  v1:= temp;
  #L3f1bda.  v2:= v0.`m.o.a` @type ^`byte`[] @kind object;
  #L3f1bde.  v3:= v0.`m.o.b` @type ^`int`;
  #L3f1be2.  call temp:= `put`(v7, v2, v3, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3f1be8.  v7:= v0.`m.o.b` @type ^`int`;
  #L3f1bec.  v7:= v7 + v1 @kind int;
  #L3f1bee.  v0.`m.o.b` @type ^`int` := v7;
  #L3f1bf2.  v2:= v6.`m.c.c` @type ^`long` @kind wide;
  #L3f1bf6.  v4:= (`long`) v1 @kind i2l;
  #L3f1bf8.  v2:= v2 - v4 @kind long;
  #L3f1bfa.  v6.`m.c.c` @type ^`long` := v2 @kind wide;
  #L3f1bfe.  v7:= v0.`m.o.b` @type ^`int`;
  #L3f1c02.  v2:= v0.`m.o.c` @type ^`int`;
  #L3f1c06.  if v7 != v2 then goto L3f1c1c;
  #L3f1c0a.  call temp:= `b`(v0) @signature `Lm/o;.b:()Lm/o;` @kind virtual;
  #L3f1c10.  v7:= temp @kind object;
  #L3f1c12.  v6.`m.c.b` @type ^`m.o` := v7 @kind object;
  #L3f1c16.  call `a`(v0) @signature `Lm/p;.a:(Lm/o;)V` @kind static;
  #L3f1c1c.  return v1;
}
procedure `byte` `readByte`(`m.c` v9 @kind this) @signature `Lm/c;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f19d0.  v0:= v9.`m.c.c` @type ^`long` @kind wide;
  #L3f19d4.  v2:= 0L;
  #L3f19d8.  v4:= lcmp(v0, v2);
  #L3f19dc.  if v4 == 0 then goto L3f1a20;
  #L3f19e0.  v2:= v9.`m.c.b` @type ^`m.o` @kind object;
  #L3f19e4.  v3:= v2.`m.o.b` @type ^`int`;
  #L3f19e8.  v4:= v2.`m.o.c` @type ^`int`;
  #L3f19ec.  v5:= v2.`m.o.a` @type ^`byte`[] @kind object;
  #L3f19f0.  v6:= v3 + 1;
  #L3f19f4.  v3:= v5[v3] @kind byte;
  #L3f19f8.  v7:= 1L;
  #L3f19fc.  v0:= v0 - v7 @kind long;
  #L3f19fe.  v9.`m.c.c` @type ^`long` := v0 @kind wide;
  #L3f1a02.  if v6 != v4 then goto L3f1a1a;
  #L3f1a06.  call temp:= `b`(v2) @signature `Lm/o;.b:()Lm/o;` @kind virtual;
  #L3f1a0c.  v0:= temp @kind object;
  #L3f1a0e.  v9.`m.c.b` @type ^`m.o` := v0 @kind object;
  #L3f1a12.  call `a`(v2) @signature `Lm/p;.a:(Lm/o;)V` @kind static;
  #L3f1a18.  goto L3f1a1e;
  #L3f1a1a.  v2.`m.o.b` @type ^`int` := v6;
  #L3f1a1e.  return v3;
  #L3f1a20.  v0:= new `java.lang.IllegalStateException`;
  #L3f1a24.  v1:= "size == 0" @kind object;
  #L3f1a28.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f1a2e.  throw v0;
}
procedure `void` `readFully`(`m.c` v3 @kind this, `byte`[] v4 @kind object) @signature `Lm/c;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f3244.  v0:= 0I;
  #L3f3246.  v1:= length @variable v4;
  #L3f3248.  if v0 >= v1 then goto L3f326e;
  #L3f324c.  v1:= length @variable v4;
  #L3f324e.  v1:= v1 - v0 @kind int;
  #L3f3250.  call temp:= `a`(v3, v4, v0, v1) @signature `Lm/c;.a:([BII)I` @kind virtual;
  #L3f3256.  v1:= temp;
  #L3f3258.  v2:= -1I;
  #L3f325a.  if v1 == v2 then goto L3f3262;
  #L3f325e.  v0:= v0 + v1 @kind int;
  #L3f3260.  goto L3f3246;
  #L3f3262.  v4:= new `java.io.EOFException`;
  #L3f3266.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3f326c.  throw v4;
  #L3f326e.  return @kind void;
}
procedure `int` `readInt`(`m.c` v10 @kind this) @signature `Lm/c;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3f1c30.  v0:= v10.`m.c.c` @type ^`long` @kind wide;
  #L3f1c34.  v2:= 4L;
  #L3f1c38.  v4:= lcmp(v0, v2);
  #L3f1c3c.  if v4 < 0 then goto L3f1d04;
  #L3f1c40.  v4:= v10.`m.c.b` @type ^`m.o` @kind object;
  #L3f1c44.  v5:= v4.`m.o.b` @type ^`int`;
  #L3f1c48.  v6:= v4.`m.o.c` @type ^`int`;
  #L3f1c4c.  v7:= v6 - v5 @kind int;
  #L3f1c50.  v8:= 4I;
  #L3f1c52.  if v7 >= v8 then goto L3f1c9a;
  #L3f1c56.  call temp:= `readByte`(v10) @signature `Lm/c;.readByte:()B` @kind virtual;
  #L3f1c5c.  v0:= temp;
  #L3f1c5e.  v0:= v0 ^& 255;
  #L3f1c62.  v0:= v0 ^< 24;
  #L3f1c66.  call temp:= `readByte`(v10) @signature `Lm/c;.readByte:()B` @kind virtual;
  #L3f1c6c.  v1:= temp;
  #L3f1c6e.  v1:= v1 ^& 255;
  #L3f1c72.  v1:= v1 ^< 16;
  #L3f1c76.  v0:= v0 ^| v1 @kind int;
  #L3f1c78.  call temp:= `readByte`(v10) @signature `Lm/c;.readByte:()B` @kind virtual;
  #L3f1c7e.  v1:= temp;
  #L3f1c80.  v1:= v1 ^& 255;
  #L3f1c84.  v1:= v1 ^< 8;
  #L3f1c88.  v0:= v0 ^| v1 @kind int;
  #L3f1c8a.  call temp:= `readByte`(v10) @signature `Lm/c;.readByte:()B` @kind virtual;
  #L3f1c90.  v1:= temp;
  #L3f1c92.  v1:= v1 ^& 255;
  #L3f1c96.  v0:= v0 ^| v1 @kind int;
  #L3f1c98.  return v0;
  #L3f1c9a.  v7:= v4.`m.o.a` @type ^`byte`[] @kind object;
  #L3f1c9e.  v8:= v5 + 1;
  #L3f1ca2.  v5:= v7[v5] @kind byte;
  #L3f1ca6.  v5:= v5 ^& 255;
  #L3f1caa.  v5:= v5 ^< 24;
  #L3f1cae.  v9:= v8 + 1;
  #L3f1cb2.  v8:= v7[v8] @kind byte;
  #L3f1cb6.  v8:= v8 ^& 255;
  #L3f1cba.  v8:= v8 ^< 16;
  #L3f1cbe.  v5:= v5 ^| v8 @kind int;
  #L3f1cc0.  v8:= v9 + 1;
  #L3f1cc4.  v9:= v7[v9] @kind byte;
  #L3f1cc8.  v9:= v9 ^& 255;
  #L3f1ccc.  v9:= v9 ^< 8;
  #L3f1cd0.  v5:= v5 ^| v9 @kind int;
  #L3f1cd2.  v9:= v8 + 1;
  #L3f1cd6.  v7:= v7[v8] @kind byte;
  #L3f1cda.  v7:= v7 ^& 255;
  #L3f1cde.  v5:= v5 ^| v7 @kind int;
  #L3f1ce0.  v0:= v0 - v2 @kind long;
  #L3f1ce2.  v10.`m.c.c` @type ^`long` := v0 @kind wide;
  #L3f1ce6.  if v9 != v6 then goto L3f1cfe;
  #L3f1cea.  call temp:= `b`(v4) @signature `Lm/o;.b:()Lm/o;` @kind virtual;
  #L3f1cf0.  v0:= temp @kind object;
  #L3f1cf2.  v10.`m.c.b` @type ^`m.o` := v0 @kind object;
  #L3f1cf6.  call `a`(v4) @signature `Lm/p;.a:(Lm/o;)V` @kind static;
  #L3f1cfc.  goto L3f1d02;
  #L3f1cfe.  v4.`m.o.b` @type ^`int` := v9;
  #L3f1d02.  return v5;
  #L3f1d04.  v0:= new `java.lang.IllegalStateException`;
  #L3f1d08.  v1:= new `java.lang.StringBuilder`;
  #L3f1d0c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f1d12.  v2:= "size < 4: " @kind object;
  #L3f1d16.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f1d1c.  v2:= v10.`m.c.c` @type ^`long` @kind wide;
  #L3f1d20.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f1d26.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f1d2c.  v1:= temp @kind object;
  #L3f1d2e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f1d34.  throw v0;
}
procedure `short` `readShort`(`m.c` v10 @kind this) @signature `Lm/c;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3f3094.  v0:= v10.`m.c.c` @type ^`long` @kind wide;
  #L3f3098.  v2:= 2L;
  #L3f309c.  v4:= lcmp(v0, v2);
  #L3f30a0.  if v4 < 0 then goto L3f3124;
  #L3f30a4.  v4:= v10.`m.c.b` @type ^`m.o` @kind object;
  #L3f30a8.  v5:= v4.`m.o.b` @type ^`int`;
  #L3f30ac.  v6:= v4.`m.o.c` @type ^`int`;
  #L3f30b0.  v7:= v6 - v5 @kind int;
  #L3f30b4.  v8:= 2I;
  #L3f30b6.  if v7 >= v8 then goto L3f30dc;
  #L3f30ba.  call temp:= `readByte`(v10) @signature `Lm/c;.readByte:()B` @kind virtual;
  #L3f30c0.  v0:= temp;
  #L3f30c2.  v0:= v0 ^& 255;
  #L3f30c6.  v0:= v0 ^< 8;
  #L3f30ca.  call temp:= `readByte`(v10) @signature `Lm/c;.readByte:()B` @kind virtual;
  #L3f30d0.  v1:= temp;
  #L3f30d2.  v1:= v1 ^& 255;
  #L3f30d6.  v0:= v0 ^| v1 @kind int;
  #L3f30d8.  v0:= (`short`) v0 @kind i2s;
  #L3f30da.  return v0;
  #L3f30dc.  v7:= v4.`m.o.a` @type ^`byte`[] @kind object;
  #L3f30e0.  v8:= v5 + 1;
  #L3f30e4.  v5:= v7[v5] @kind byte;
  #L3f30e8.  v5:= v5 ^& 255;
  #L3f30ec.  v5:= v5 ^< 8;
  #L3f30f0.  v9:= v8 + 1;
  #L3f30f4.  v7:= v7[v8] @kind byte;
  #L3f30f8.  v7:= v7 ^& 255;
  #L3f30fc.  v5:= v5 ^| v7 @kind int;
  #L3f30fe.  v0:= v0 - v2 @kind long;
  #L3f3100.  v10.`m.c.c` @type ^`long` := v0 @kind wide;
  #L3f3104.  if v9 != v6 then goto L3f311c;
  #L3f3108.  call temp:= `b`(v4) @signature `Lm/o;.b:()Lm/o;` @kind virtual;
  #L3f310e.  v0:= temp @kind object;
  #L3f3110.  v10.`m.c.b` @type ^`m.o` := v0 @kind object;
  #L3f3114.  call `a`(v4) @signature `Lm/p;.a:(Lm/o;)V` @kind static;
  #L3f311a.  goto L3f3120;
  #L3f311c.  v4.`m.o.b` @type ^`int` := v9;
  #L3f3120.  v0:= (`short`) v5 @kind i2s;
  #L3f3122.  return v0;
  #L3f3124.  v0:= new `java.lang.IllegalStateException`;
  #L3f3128.  v1:= new `java.lang.StringBuilder`;
  #L3f312c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f3132.  v2:= "size < 2: " @kind object;
  #L3f3136.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f313c.  v2:= v10.`m.c.c` @type ^`long` @kind wide;
  #L3f3140.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3146.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f314c.  v1:= temp @kind object;
  #L3f314e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3154.  throw v0;
}
procedure `byte`[] `s`(`m.c` v2 @kind this) @signature `Lm/c;.s:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f1a40.  v0:= v2.`m.c.c` @type ^`long` @kind wide;
  #L3f1a44.  call temp:= `b`(v2, v0) @signature `Lm/c;.b:(J)[B` @kind virtual;
  #L3f1a4a.  v0:= temp @kind object;
  #L3f1a4c.  return v0 @kind object;
  #L3f1a4e.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L3f1a50.  v1:= new `java.lang.AssertionError`;
  #L3f1a54.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3f1a5a.  throw v1;
  catch `java.io.EOFException` @[L3f1a40..L3f1a4c] goto L3f1a4e;
}
procedure `void` `skip`(`m.c` v6 @kind this, `long` v7 ) @signature `Lm/c;.skip:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f32ac.  v0:= 0L;
  #L3f32b0.  v2:= lcmp(v7, v0);
  #L3f32b4.  if v2 <= 0 then goto L3f331e;
  #L3f32b8.  v0:= v6.`m.c.b` @type ^`m.o` @kind object;
  #L3f32bc.  if v0 == 0 then goto L3f3312;
  #L3f32c0.  v1:= v0.`m.o.c` @type ^`int`;
  #L3f32c4.  v0:= v0.`m.o.b` @type ^`int`;
  #L3f32c8.  v1:= v1 - v0 @kind int;
  #L3f32ca.  v0:= (`long`) v1 @kind i2l;
  #L3f32cc.  call temp:= `min`(v7, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3f32d2.  v0:= temp @kind wide;
  #L3f32d4.  v1:= (`int`) v0 @kind l2i;
  #L3f32d6.  v2:= v6.`m.c.c` @type ^`long` @kind wide;
  #L3f32da.  v4:= (`long`) v1 @kind i2l;
  #L3f32dc.  v2:= v2 - v4 @kind long;
  #L3f32de.  v6.`m.c.c` @type ^`long` := v2 @kind wide;
  #L3f32e2.  v7:= v7 - v4 @kind long;
  #L3f32e4.  v0:= v6.`m.c.b` @type ^`m.o` @kind object;
  #L3f32e8.  v2:= v0.`m.o.b` @type ^`int`;
  #L3f32ec.  v2:= v2 + v1 @kind int;
  #L3f32ee.  v0.`m.o.b` @type ^`int` := v2;
  #L3f32f2.  v1:= v0.`m.o.b` @type ^`int`;
  #L3f32f6.  v2:= v0.`m.o.c` @type ^`int`;
  #L3f32fa.  if v1 != v2 then goto L3f32ac;
  #L3f32fe.  call temp:= `b`(v0) @signature `Lm/o;.b:()Lm/o;` @kind virtual;
  #L3f3304.  v1:= temp @kind object;
  #L3f3306.  v6.`m.c.b` @type ^`m.o` := v1 @kind object;
  #L3f330a.  call `a`(v0) @signature `Lm/p;.a:(Lm/o;)V` @kind static;
  #L3f3310.  goto L3f32ac;
  #L3f3312.  v7:= new `java.io.EOFException`;
  #L3f3316.  call `<init>`(v7) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3f331c.  throw v7;
  #L3f331e.  return @kind void;
}
procedure `m.f` `t`(`m.c` v2 @kind this) @signature `Lm/c;.t:()Lm/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f2f34.  v0:= new `m.f`;
  #L3f2f38.  call temp:= `s`(v2) @signature `Lm/c;.s:()[B` @kind virtual;
  #L3f2f3e.  v1:= temp @kind object;
  #L3f2f40.  call `<init>`(v0, v1) @signature `Lm/f;.<init>:([B)V` @kind direct;
  #L3f2f46.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`m.c` v1 @kind this) @signature `Lm/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f2170.  call temp:= `w`(v1) @signature `Lm/c;.w:()Lm/f;` @kind virtual;
  #L3f2176.  v0:= temp @kind object;
  #L3f2178.  call temp:= `toString`(v0) @signature `Lm/f;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f217e.  v0:= temp @kind object;
  #L3f2180.  return v0 @kind object;
}
procedure `java.lang.String` `u`(`m.c` v3 @kind this) @signature `Lm/c;.u:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f1f34.  v0:= v3.`m.c.c` @type ^`long` @kind wide;
  #L3f1f38.  v2:= `@@m.u.a` @type ^`java.nio.charset.Charset` @kind object;
  #L3f1f3c.  call temp:= `a`(v3, v0, v2) @signature `Lm/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L3f1f42.  v0:= temp @kind object;
  #L3f1f44.  return v0 @kind object;
  #L3f1f46.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L3f1f48.  v1:= new `java.lang.AssertionError`;
  #L3f1f4c.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3f1f52.  throw v1;
  catch `java.io.EOFException` @[L3f1f34..L3f1f44] goto L3f1f46;
}
procedure `long` `v`(`m.c` v2 @kind this) @signature `Lm/c;.v:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f2588.  v0:= v2.`m.c.c` @type ^`long` @kind wide;
  #L3f258c.  return v0 @kind wide;
}
procedure `m.f` `w`(`m.c` v5 @kind this) @signature `Lm/c;.w:()Lm/f;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f2f7c.  v0:= v5.`m.c.c` @type ^`long` @kind wide;
  #L3f2f80.  v2:= 2147483647L;
  #L3f2f86.  v4:= lcmp(v0, v2);
  #L3f2f8a.  if v4 > 0 then goto L3f2f9a;
  #L3f2f8e.  v1:= (`int`) v0 @kind l2i;
  #L3f2f90.  call temp:= `a`(v5, v1) @signature `Lm/c;.a:(I)Lm/f;` @kind virtual;
  #L3f2f96.  v0:= temp @kind object;
  #L3f2f98.  return v0 @kind object;
  #L3f2f9a.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f2f9e.  v1:= new `java.lang.StringBuilder`;
  #L3f2fa2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f2fa8.  v2:= "size > Integer.MAX_VALUE: " @kind object;
  #L3f2fac.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2fb2.  v2:= v5.`m.c.c` @type ^`long` @kind wide;
  #L3f2fb6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2fbc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f2fc2.  v1:= temp @kind object;
  #L3f2fc4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2fca.  throw v0;
}
procedure `int` `write`(`m.c` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lm/c;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f1d6c.  if v7 == 0 then goto L3f1dc2;
  #L3f1d70.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L3f1d76.  v0:= temp;
  #L3f1d78.  v1:= v0;
  #L3f1d7a.  if v1 <= 0 then goto L3f1db4;
  #L3f1d7e.  v2:= 1I;
  #L3f1d80.  call temp:= `b`(v6, v2) @signature `Lm/c;.b:(I)Lm/o;` @kind virtual;
  #L3f1d86.  v2:= temp @kind object;
  #L3f1d88.  v3:= v2.`m.o.c` @type ^`int`;
  #L3f1d8c.  v3:= v3 - 8192;
  #L3f1d90.  call temp:= `min`(v1, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3f1d96.  v3:= temp;
  #L3f1d98.  v4:= v2.`m.o.a` @type ^`byte`[] @kind object;
  #L3f1d9c.  v5:= v2.`m.o.c` @type ^`int`;
  #L3f1da0.  call temp:= `get`(v7, v4, v5, v3) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3f1da6.  v1:= v1 - v3 @kind int;
  #L3f1da8.  v4:= v2.`m.o.c` @type ^`int`;
  #L3f1dac.  v4:= v4 + v3 @kind int;
  #L3f1dae.  v2.`m.o.c` @type ^`int` := v4;
  #L3f1db2.  goto L3f1d7a;
  #L3f1db4.  v1:= v6.`m.c.c` @type ^`long` @kind wide;
  #L3f1db8.  v3:= (`long`) v0 @kind i2l;
  #L3f1dba.  v1:= v1 + v3 @kind long;
  #L3f1dbc.  v6.`m.c.c` @type ^`long` := v1 @kind wide;
  #L3f1dc0.  return v0;
  #L3f1dc2.  v7:= new `java.lang.IllegalArgumentException`;
  #L3f1dc6.  v0:= "source == null" @kind object;
  #L3f1dca.  call `<init>`(v7, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f1dd0.  throw v7;
}
procedure `m.c` `write`(`m.c` v2 @kind this, `byte`[] v3 @kind object) @signature `Lm/c;.write:([B)Lm/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f276c.  if v3 == 0 then goto L3f277c;
  #L3f2770.  v0:= 0I;
  #L3f2772.  v1:= length @variable v3;
  #L3f2774.  call temp:= `write`(v2, v3, v0, v1) @signature `Lm/c;.write:([BII)Lm/c;` @kind virtual;
  #L3f277a.  return v2 @kind object;
  #L3f277c.  v3:= new `java.lang.IllegalArgumentException`;
  #L3f2780.  v0:= "source == null" @kind object;
  #L3f2784.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f278a.  throw v3;
}
procedure `m.c` `write`(`m.c` v9 @kind this, `byte`[] v10 @kind object, `int` v11 , `int` v12 ) @signature `Lm/c;.write:([BII)Lm/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f279c.  if v10 == 0 then goto L3f27fc;
  #L3f27a0.  v0:= length @variable v10;
  #L3f27a2.  v1:= (`long`) v0 @kind i2l;
  #L3f27a4.  v3:= (`long`) v11 @kind i2l;
  #L3f27a6.  v7:= (`long`) v12 @kind i2l;
  #L3f27a8.  v5:= v7 @kind wide;
  #L3f27aa.  call `a`(v1, v3, v5) @signature `Lm/u;.a:(JJJ)V` @kind static;
  #L3f27b0.  v12:= v12 + v11 @kind int;
  #L3f27b2.  if v11 >= v12 then goto L3f27f0;
  #L3f27b6.  v0:= 1I;
  #L3f27b8.  call temp:= `b`(v9, v0) @signature `Lm/c;.b:(I)Lm/o;` @kind virtual;
  #L3f27be.  v0:= temp @kind object;
  #L3f27c0.  v1:= v12 - v11 @kind int;
  #L3f27c4.  v2:= v0.`m.o.c` @type ^`int`;
  #L3f27c8.  v2:= v2 - 8192;
  #L3f27cc.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3f27d2.  v1:= temp;
  #L3f27d4.  v2:= v0.`m.o.a` @type ^`byte`[] @kind object;
  #L3f27d8.  v3:= v0.`m.o.c` @type ^`int`;
  #L3f27dc.  call `arraycopy`(v10, v11, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f27e2.  v11:= v11 + v1 @kind int;
  #L3f27e4.  v2:= v0.`m.o.c` @type ^`int`;
  #L3f27e8.  v2:= v2 + v1 @kind int;
  #L3f27ea.  v0.`m.o.c` @type ^`int` := v2;
  #L3f27ee.  goto L3f27b2;
  #L3f27f0.  v10:= v9.`m.c.c` @type ^`long` @kind wide;
  #L3f27f4.  v10:= v10 + v7 @kind long;
  #L3f27f6.  v9.`m.c.c` @type ^`long` := v10 @kind wide;
  #L3f27fa.  return v9 @kind object;
  #L3f27fc.  v10:= new `java.lang.IllegalArgumentException`;
  #L3f2800.  v11:= "source == null" @kind object;
  #L3f2804.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f280a.  throw v10;
}
procedure `m.d` `write`(`m.c` v0 @kind this, `byte`[] v1 @kind object) @signature `Lm/c;.write:([B)Lm/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f2e8c.  call temp:= `write`(v0, v1) @signature `Lm/c;.write:([B)Lm/c;` @kind virtual;
  #L3f2e92.  return v0 @kind object;
}
procedure `m.d` `write`(`m.c` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lm/c;.write:([BII)Lm/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f2ea4.  call temp:= `write`(v0, v1, v2, v3) @signature `Lm/c;.write:([BII)Lm/c;` @kind virtual;
  #L3f2eaa.  return v0 @kind object;
}
procedure `m.c` `writeByte`(`m.c` v4 @kind this, `int` v5 ) @signature `Lm/c;.writeByte:(I)Lm/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f2848.  v0:= 1I;
  #L3f284a.  call temp:= `b`(v4, v0) @signature `Lm/c;.b:(I)Lm/o;` @kind virtual;
  #L3f2850.  v0:= temp @kind object;
  #L3f2852.  v1:= v0.`m.o.a` @type ^`byte`[] @kind object;
  #L3f2856.  v2:= v0.`m.o.c` @type ^`int`;
  #L3f285a.  v3:= v2 + 1;
  #L3f285e.  v0.`m.o.c` @type ^`int` := v3;
  #L3f2862.  v5:= (`byte`) v5 @kind i2b;
  #L3f2864.  v1[v2]:= v5 @kind byte;
  #L3f2868.  v0:= v4.`m.c.c` @type ^`long` @kind wide;
  #L3f286c.  v2:= 1L;
  #L3f2870.  v0:= v0 + v2 @kind long;
  #L3f2872.  v4.`m.c.c` @type ^`long` := v0 @kind wide;
  #L3f2876.  return v4 @kind object;
}
procedure `m.d` `writeByte`(`m.c` v0 @kind this, `int` v1 ) @signature `Lm/c;.writeByte:(I)Lm/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f2ebc.  call temp:= `writeByte`(v0, v1) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3f2ec2.  return v0 @kind object;
}
procedure `m.c` `writeInt`(`m.c` v5 @kind this, `int` v6 ) @signature `Lm/c;.writeInt:(I)Lm/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f2918.  v0:= 4I;
  #L3f291a.  call temp:= `b`(v5, v0) @signature `Lm/c;.b:(I)Lm/o;` @kind virtual;
  #L3f2920.  v0:= temp @kind object;
  #L3f2922.  v1:= v0.`m.o.a` @type ^`byte`[] @kind object;
  #L3f2926.  v2:= v0.`m.o.c` @type ^`int`;
  #L3f292a.  v3:= v2 + 1;
  #L3f292e.  v4:= v6 ^>> 24;
  #L3f2932.  v4:= v4 ^& 255;
  #L3f2936.  v4:= (`byte`) v4 @kind i2b;
  #L3f2938.  v1[v2]:= v4 @kind byte;
  #L3f293c.  v2:= v3 + 1;
  #L3f2940.  v4:= v6 ^>> 16;
  #L3f2944.  v4:= v4 ^& 255;
  #L3f2948.  v4:= (`byte`) v4 @kind i2b;
  #L3f294a.  v1[v3]:= v4 @kind byte;
  #L3f294e.  v3:= v2 + 1;
  #L3f2952.  v4:= v6 ^>> 8;
  #L3f2956.  v4:= v4 ^& 255;
  #L3f295a.  v4:= (`byte`) v4 @kind i2b;
  #L3f295c.  v1[v2]:= v4 @kind byte;
  #L3f2960.  v2:= v3 + 1;
  #L3f2964.  v6:= v6 ^& 255;
  #L3f2968.  v6:= (`byte`) v6 @kind i2b;
  #L3f296a.  v1[v3]:= v6 @kind byte;
  #L3f296e.  v0.`m.o.c` @type ^`int` := v2;
  #L3f2972.  v0:= v5.`m.c.c` @type ^`long` @kind wide;
  #L3f2976.  v2:= 4L;
  #L3f297a.  v0:= v0 + v2 @kind long;
  #L3f297c.  v5.`m.c.c` @type ^`long` := v0 @kind wide;
  #L3f2980.  return v5 @kind object;
}
procedure `m.d` `writeInt`(`m.c` v0 @kind this, `int` v1 ) @signature `Lm/c;.writeInt:(I)Lm/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f2eec.  call temp:= `writeInt`(v0, v1) @signature `Lm/c;.writeInt:(I)Lm/c;` @kind virtual;
  #L3f2ef2.  return v0 @kind object;
}
procedure `m.c` `writeShort`(`m.c` v5 @kind this, `int` v6 ) @signature `Lm/c;.writeShort:(I)Lm/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f2994.  v0:= 2I;
  #L3f2996.  call temp:= `b`(v5, v0) @signature `Lm/c;.b:(I)Lm/o;` @kind virtual;
  #L3f299c.  v0:= temp @kind object;
  #L3f299e.  v1:= v0.`m.o.a` @type ^`byte`[] @kind object;
  #L3f29a2.  v2:= v0.`m.o.c` @type ^`int`;
  #L3f29a6.  v3:= v2 + 1;
  #L3f29aa.  v4:= v6 ^>> 8;
  #L3f29ae.  v4:= v4 ^& 255;
  #L3f29b2.  v4:= (`byte`) v4 @kind i2b;
  #L3f29b4.  v1[v2]:= v4 @kind byte;
  #L3f29b8.  v2:= v3 + 1;
  #L3f29bc.  v6:= v6 ^& 255;
  #L3f29c0.  v6:= (`byte`) v6 @kind i2b;
  #L3f29c2.  v1[v3]:= v6 @kind byte;
  #L3f29c6.  v0.`m.o.c` @type ^`int` := v2;
  #L3f29ca.  v0:= v5.`m.c.c` @type ^`long` @kind wide;
  #L3f29ce.  v2:= 2L;
  #L3f29d2.  v0:= v0 + v2 @kind long;
  #L3f29d4.  v5.`m.c.c` @type ^`long` := v0 @kind wide;
  #L3f29d8.  return v5 @kind object;
}
procedure `m.d` `writeShort`(`m.c` v0 @kind this, `int` v1 ) @signature `Lm/c;.writeShort:(I)Lm/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f2f04.  call temp:= `writeShort`(v0, v1) @signature `Lm/c;.writeShort:(I)Lm/c;` @kind virtual;
  #L3f2f0a.  return v0 @kind object;
}
