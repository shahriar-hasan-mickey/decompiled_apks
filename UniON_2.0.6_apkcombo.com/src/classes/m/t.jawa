record `m.t` @kind class @AccessFlag PUBLIC {
  `boolean` `m.t.a` @AccessFlag PRIVATE;
  `long` `m.t.b` @AccessFlag PRIVATE;
  `long` `m.t.c` @AccessFlag PRIVATE;
}
global `m.t` `@@m.t.d` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lm/t;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f6710.  v0:= new `m.t$a`;
  #L3f6714.  call `<init>`(v0) @signature `Lm/t$a;.<init>:()V` @kind direct;
  #L3f671a.  `@@m.t.d` @type ^`m.t` := v0 @kind object;
  #L3f671e.  return @kind void;
}
procedure `void` `<init>`(`m.t` v0 @kind this) @signature `Lm/t;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f6730.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f6736.  return @kind void;
}
procedure `m.t` `a`(`m.t` v1 @kind this) @signature `Lm/t;.a:()Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6654.  v0:= 0I;
  #L3f6656.  v1.`m.t.a` @type ^`boolean` := v0 @kind boolean;
  #L3f665a.  return v1 @kind object;
}
procedure `m.t` `a`(`m.t` v1 @kind this, `long` v2 ) @signature `Lm/t;.a:(J)Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6688.  v0:= 1I;
  #L3f668a.  v1.`m.t.a` @type ^`boolean` := v0 @kind boolean;
  #L3f668e.  v1.`m.t.b` @type ^`long` := v2 @kind wide;
  #L3f6692.  return v1 @kind object;
}
procedure `m.t` `a`(`m.t` v3 @kind this, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Lm/t;.a:(JLjava/util/concurrent/TimeUnit;)Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f66a4.  v0:= 0L;
  #L3f66a8.  v2:= lcmp(v4, v0);
  #L3f66ac.  if v2 < 0 then goto L3f66d2;
  #L3f66b0.  if v6 == 0 then goto L3f66c2;
  #L3f66b4.  call temp:= `toNanos`(v6, v4) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L3f66ba.  v4:= temp @kind wide;
  #L3f66bc.  v3.`m.t.c` @type ^`long` := v4 @kind wide;
  #L3f66c0.  return v3 @kind object;
  #L3f66c2.  v4:= new `java.lang.IllegalArgumentException`;
  #L3f66c6.  v5:= "unit == null" @kind object;
  #L3f66ca.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f66d0.  throw v4;
  #L3f66d2.  v6:= new `java.lang.IllegalArgumentException`;
  #L3f66d6.  v0:= new `java.lang.StringBuilder`;
  #L3f66da.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f66e0.  v1:= "timeout < 0: " @kind object;
  #L3f66e4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f66ea.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f66f0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f66f6.  v4:= temp @kind object;
  #L3f66f8.  call `<init>`(v6, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f66fe.  throw v6;
}
procedure `m.t` `b`(`m.t` v2 @kind this) @signature `Lm/t;.b:()Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f666c.  v0:= 0L;
  #L3f6670.  v2.`m.t.c` @type ^`long` := v0 @kind wide;
  #L3f6674.  return v2 @kind object;
}
procedure `long` `c`(`m.t` v2 @kind this) @signature `Lm/t;.c:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f660c.  v0:= v2.`m.t.a` @type ^`boolean` @kind boolean;
  #L3f6610.  if v0 == 0 then goto L3f661a;
  #L3f6614.  v0:= v2.`m.t.b` @type ^`long` @kind wide;
  #L3f6618.  return v0 @kind wide;
  #L3f661a.  v0:= new `java.lang.IllegalStateException`;
  #L3f661e.  v1:= "No deadline" @kind object;
  #L3f6622.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f6628.  throw v0;
}
procedure `boolean` `d`(`m.t` v1 @kind this) @signature `Lm/t;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f65f4.  v0:= v1.`m.t.a` @type ^`boolean` @kind boolean;
  #L3f65f8.  return v0;
}
procedure `void` `e`(`m.t` v5 @kind this) @signature `Lm/t;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f6748.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L3f674e.  v0:= temp;
  #L3f6750.  if v0 != 0 then goto L3f678a;
  #L3f6754.  v0:= v5.`m.t.a` @type ^`boolean` @kind boolean;
  #L3f6758.  if v0 == 0 then goto L3f6788;
  #L3f675c.  v0:= v5.`m.t.b` @type ^`long` @kind wide;
  #L3f6760.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L3f6766.  v2:= temp @kind wide;
  #L3f6768.  v0:= v0 - v2 @kind long;
  #L3f676a.  v2:= 0L;
  #L3f676e.  v4:= lcmp(v0, v2);
  #L3f6772.  if v4 <= 0 then goto L3f6778;
  #L3f6776.  goto L3f6788;
  #L3f6778.  v0:= new `java.io.InterruptedIOException`;
  #L3f677c.  v1:= "deadline reached" @kind object;
  #L3f6780.  call `<init>`(v0, v1) @signature `Ljava/io/InterruptedIOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f6786.  throw v0;
  #L3f6788.  return @kind void;
  #L3f678a.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3f6790.  v0:= temp @kind object;
  #L3f6792.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L3f6798.  v0:= new `java.io.InterruptedIOException`;
  #L3f679c.  v1:= "interrupted" @kind object;
  #L3f67a0.  call `<init>`(v0, v1) @signature `Ljava/io/InterruptedIOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f67a6.  throw v0;
}
procedure `long` `f`(`m.t` v2 @kind this) @signature `Lm/t;.f:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f663c.  v0:= v2.`m.t.c` @type ^`long` @kind wide;
  #L3f6640.  return v0 @kind wide;
}
