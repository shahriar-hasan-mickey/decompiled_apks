record `m.k` @kind class @AccessFlag PUBLIC_FINAL extends `m.s` @kind interface {
  `m.e` `m.k.b` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `m.k.c` @AccessFlag PRIVATE_FINAL;
  `int` `m.k.d` @AccessFlag PRIVATE;
  `boolean` `m.k.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`m.k` v0 @kind this, `m.e` v1 @kind object, `java.util.zip.Inflater` v2 @kind object) @signature `Lm/k;.<init>:(Lm/e;Ljava/util/zip/Inflater;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f46f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f46f6.  if v1 == 0 then goto L3f4718;
  #L3f46fa.  if v2 == 0 then goto L3f4708;
  #L3f46fe.  v0.`m.k.b` @type ^`m.e` := v1 @kind object;
  #L3f4702.  v0.`m.k.c` @type ^`java.util.zip.Inflater` := v2 @kind object;
  #L3f4706.  return @kind void;
  #L3f4708.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f470c.  v2:= "inflater == null" @kind object;
  #L3f4710.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4716.  throw v1;
  #L3f4718.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f471c.  v2:= "source == null" @kind object;
  #L3f4720.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4726.  throw v1;
}
procedure `void` `b`(`m.k` v4 @kind this) @signature `Lm/k;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f4770.  v0:= v4.`m.k.d` @type ^`int`;
  #L3f4774.  if v0 != 0 then goto L3f477a;
  #L3f4778.  return @kind void;
  #L3f477a.  v1:= v4.`m.k.c` @type ^`java.util.zip.Inflater` @kind object;
  #L3f477e.  call temp:= `getRemaining`(v1) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L3f4784.  v1:= temp;
  #L3f4786.  v0:= v0 - v1 @kind int;
  #L3f4788.  v1:= v4.`m.k.d` @type ^`int`;
  #L3f478c.  v1:= v1 - v0 @kind int;
  #L3f478e.  v4.`m.k.d` @type ^`int` := v1;
  #L3f4792.  v1:= v4.`m.k.b` @type ^`m.e` @kind object;
  #L3f4796.  v2:= (`long`) v0 @kind i2l;
  #L3f4798.  call `skip`(v1, v2) @signature `Lm/e;.skip:(J)V` @kind interface;
  #L3f479e.  return @kind void;
}
procedure `long` `a`(`m.k` v6 @kind this, `m.c` v7 @kind object, `long` v8 ) @signature `Lm/k;.a:(Lm/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f4590.  v0:= 0L;
  #L3f4594.  v2:= lcmp(v8, v0);
  #L3f4598.  if v2 < 0 then goto L3f4680;
  #L3f459c.  v3:= v6.`m.k.e` @type ^`boolean` @kind boolean;
  #L3f45a0.  if v3 != 0 then goto L3f4670;
  #L3f45a4.  if v2 != 0 then goto L3f45aa;
  #L3f45a8.  return v0 @kind wide;
  #L3f45aa.  call temp:= `a`(v6) @signature `Lm/k;.a:()Z` @kind virtual;
  #L3f45b0.  v0:= temp;
  #L3f45b2.  v1:= 1I;
  #L3f45b4.  call temp:= `b`(v7, v1) @signature `Lm/c;.b:(I)Lm/o;` @kind virtual;
  #L3f45ba.  v1:= temp @kind object;
  #L3f45bc.  v2:= v1.`m.o.c` @type ^`int`;
  #L3f45c0.  v2:= v2 - 8192;
  #L3f45c4.  v2:= (`long`) v2 @kind i2l;
  #L3f45c6.  call temp:= `min`(v8, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3f45cc.  v2:= temp @kind wide;
  #L3f45ce.  v3:= (`int`) v2 @kind l2i;
  #L3f45d0.  v2:= v6.`m.k.c` @type ^`java.util.zip.Inflater` @kind object;
  #L3f45d4.  v4:= v1.`m.o.a` @type ^`byte`[] @kind object;
  #L3f45d8.  v5:= v1.`m.o.c` @type ^`int`;
  #L3f45dc.  call temp:= `inflate`(v2, v4, v5, v3) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind virtual;
  #L3f45e2.  v2:= temp;
  #L3f45e4.  if v2 <= 0 then goto L3f4600;
  #L3f45e8.  v8:= v1.`m.o.c` @type ^`int`;
  #L3f45ec.  v8:= v8 + v2 @kind int;
  #L3f45ee.  v1.`m.o.c` @type ^`int` := v8;
  #L3f45f2.  v8:= v7.`m.c.c` @type ^`long` @kind wide;
  #L3f45f6.  v0:= (`long`) v2 @kind i2l;
  #L3f45f8.  v8:= v8 + v0 @kind long;
  #L3f45fa.  v7.`m.c.c` @type ^`long` := v8 @kind wide;
  #L3f45fe.  return v0 @kind wide;
  #L3f4600.  v2:= v6.`m.k.c` @type ^`java.util.zip.Inflater` @kind object;
  #L3f4604.  call temp:= `finished`(v2) @signature `Ljava/util/zip/Inflater;.finished:()Z` @kind virtual;
  #L3f460a.  v2:= temp;
  #L3f460c.  if v2 != 0 then goto L3f4638;
  #L3f4610.  v2:= v6.`m.k.c` @type ^`java.util.zip.Inflater` @kind object;
  #L3f4614.  call temp:= `needsDictionary`(v2) @signature `Ljava/util/zip/Inflater;.needsDictionary:()Z` @kind virtual;
  #L3f461a.  v2:= temp;
  #L3f461c.  if v2 == 0 then goto L3f4622;
  #L3f4620.  goto L3f4638;
  #L3f4622.  if v0 != 0 then goto L3f4628;
  #L3f4626.  goto L3f45aa;
  #L3f4628.  v7:= new `java.io.EOFException`;
  #L3f462c.  v8:= "source exhausted prematurely" @kind object;
  #L3f4630.  call `<init>`(v7, v8) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4636.  throw v7;
  #L3f4638.  call `b`(v6) @signature `Lm/k;.b:()V` @kind direct;
  #L3f463e.  v8:= v1.`m.o.b` @type ^`int`;
  #L3f4642.  v9:= v1.`m.o.c` @type ^`int`;
  #L3f4646.  if v8 != v9 then goto L3f465c;
  #L3f464a.  call temp:= `b`(v1) @signature `Lm/o;.b:()Lm/o;` @kind virtual;
  #L3f4650.  v8:= temp @kind object;
  #L3f4652.  v7.`m.c.b` @type ^`m.o` := v8 @kind object;
  #L3f4656.  call `a`(v1) @signature `Lm/p;.a:(Lm/o;)V` @kind static;
  #L3f465c.  v7:= -1L;
  #L3f4660.  return v7 @kind wide;
  #L3f4662.  v7:= Exception @type ^`java.util.zip.DataFormatException` @kind object;
  #L3f4664.  v8:= new `java.io.IOException`;
  #L3f4668.  call `<init>`(v8, v7) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3f466e.  throw v8;
  #L3f4670.  v7:= new `java.lang.IllegalStateException`;
  #L3f4674.  v8:= "closed" @kind object;
  #L3f4678.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f467e.  throw v7;
  #L3f4680.  v7:= new `java.lang.IllegalArgumentException`;
  #L3f4684.  v0:= new `java.lang.StringBuilder`;
  #L3f4688.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f468e.  v1:= "byteCount < 0: " @kind object;
  #L3f4692.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4698.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f469e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f46a4.  v8:= temp @kind object;
  #L3f46a6.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f46ac.  throw v7;
  catch `java.util.zip.DataFormatException` @[L3f45b4..L3f465c] goto L3f4662;
}
procedure `boolean` `a`(`m.k` v5 @kind this) @signature `Lm/k;.a:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f4500.  v0:= v5.`m.k.c` @type ^`java.util.zip.Inflater` @kind object;
  #L3f4504.  call temp:= `needsInput`(v0) @signature `Ljava/util/zip/Inflater;.needsInput:()Z` @kind virtual;
  #L3f450a.  v0:= temp;
  #L3f450c.  v1:= 0I;
  #L3f450e.  if v0 != 0 then goto L3f4514;
  #L3f4512.  return v1;
  #L3f4514.  call `b`(v5) @signature `Lm/k;.b:()V` @kind direct;
  #L3f451a.  v0:= v5.`m.k.c` @type ^`java.util.zip.Inflater` @kind object;
  #L3f451e.  call temp:= `getRemaining`(v0) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L3f4524.  v0:= temp;
  #L3f4526.  if v0 != 0 then goto L3f4570;
  #L3f452a.  v0:= v5.`m.k.b` @type ^`m.e` @kind object;
  #L3f452e.  call temp:= `g`(v0) @signature `Lm/e;.g:()Z` @kind interface;
  #L3f4534.  v0:= temp;
  #L3f4536.  if v0 == 0 then goto L3f453e;
  #L3f453a.  v0:= 1I;
  #L3f453c.  return v0;
  #L3f453e.  v0:= v5.`m.k.b` @type ^`m.e` @kind object;
  #L3f4542.  call temp:= `c`(v0) @signature `Lm/e;.c:()Lm/c;` @kind interface;
  #L3f4548.  v0:= temp @kind object;
  #L3f454a.  v0:= v0.`m.c.b` @type ^`m.o` @kind object;
  #L3f454e.  v2:= v0.`m.o.c` @type ^`int`;
  #L3f4552.  v3:= v0.`m.o.b` @type ^`int`;
  #L3f4556.  v2:= v2 - v3 @kind int;
  #L3f4558.  v5.`m.k.d` @type ^`int` := v2;
  #L3f455c.  v2:= v5.`m.k.c` @type ^`java.util.zip.Inflater` @kind object;
  #L3f4560.  v0:= v0.`m.o.a` @type ^`byte`[] @kind object;
  #L3f4564.  v4:= v5.`m.k.d` @type ^`int`;
  #L3f4568.  call `setInput`(v2, v0, v3, v4) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #L3f456e.  return v1;
  #L3f4570.  v0:= new `java.lang.IllegalStateException`;
  #L3f4574.  v1:= "?" @kind object;
  #L3f4578.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f457e.  throw v0;
}
procedure `void` `close`(`m.k` v1 @kind this) @signature `Lm/k;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4738.  v0:= v1.`m.k.e` @type ^`boolean` @kind boolean;
  #L3f473c.  if v0 == 0 then goto L3f4742;
  #L3f4740.  return @kind void;
  #L3f4742.  v0:= v1.`m.k.c` @type ^`java.util.zip.Inflater` @kind object;
  #L3f4746.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L3f474c.  v0:= 1I;
  #L3f474e.  v1.`m.k.e` @type ^`boolean` := v0 @kind boolean;
  #L3f4752.  v0:= v1.`m.k.b` @type ^`m.e` @kind object;
  #L3f4756.  call `close`(v0) @signature `Lm/s;.close:()V` @kind interface;
  #L3f475c.  return @kind void;
}
procedure `m.t` `d`(`m.k` v1 @kind this) @signature `Lm/k;.d:()Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f46d0.  v0:= v1.`m.k.b` @type ^`m.e` @kind object;
  #L3f46d4.  call temp:= `d`(v0) @signature `Lm/s;.d:()Lm/t;` @kind interface;
  #L3f46da.  v0:= temp @kind object;
  #L3f46dc.  return v0 @kind object;
}
