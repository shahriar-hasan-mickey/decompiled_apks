record `m.m` @kind class @AccessFlag FINAL extends `m.d` @kind interface {
  `m.c` `m.m.b` @AccessFlag PUBLIC_FINAL;
  `m.r` `m.m.c` @AccessFlag PUBLIC_FINAL;
  `boolean` `m.m.d` @AccessFlag ;
}
procedure `void` `<init>`(`m.m` v1 @kind this, `m.r` v2 @kind object) @signature `Lm/m;.<init>:(Lm/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3f5084.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f508a.  v0:= new `m.c`;
  #L3f508e.  call `<init>`(v0) @signature `Lm/c;.<init>:()V` @kind direct;
  #L3f5094.  v1.`m.m.b` @type ^`m.c` := v0 @kind object;
  #L3f5098.  if v2 == 0 then goto L3f50a2;
  #L3f509c.  v1.`m.m.c` @type ^`m.r` := v2 @kind object;
  #L3f50a0.  return @kind void;
  #L3f50a2.  v2:= new `java.lang.NullPointerException`;
  #L3f50a6.  v0:= "sink == null" @kind object;
  #L3f50aa.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f50b0.  throw v2;
}
procedure `m.d` `a`(`m.m` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lm/m;.a:(Ljava/lang/String;)Lm/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5028.  v0:= v1.`m.m.d` @type ^`boolean` @kind boolean;
  #L3f502c.  if v0 != 0 then goto L3f5042;
  #L3f5030.  v0:= v1.`m.m.b` @type ^`m.c` @kind object;
  #L3f5034.  call temp:= `a`(v0, v2) @signature `Lm/c;.a:(Ljava/lang/String;)Lm/c;` @kind virtual;
  #L3f503a.  call temp:= `j`(v1) @signature `Lm/m;.j:()Lm/d;` @kind virtual;
  #L3f5040.  return v1 @kind object;
  #L3f5042.  v2:= new `java.lang.IllegalStateException`;
  #L3f5046.  v0:= "closed" @kind object;
  #L3f504a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f5050.  throw v2;
}
procedure `void` `b`(`m.m` v1 @kind this, `m.c` v2 @kind object, `long` v3 ) @signature `Lm/m;.b:(Lm/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f51a4.  v0:= v1.`m.m.d` @type ^`boolean` @kind boolean;
  #L3f51a8.  if v0 != 0 then goto L3f51be;
  #L3f51ac.  v0:= v1.`m.m.b` @type ^`m.c` @kind object;
  #L3f51b0.  call `b`(v0, v2, v3) @signature `Lm/c;.b:(Lm/c;J)V` @kind virtual;
  #L3f51b6.  call temp:= `j`(v1) @signature `Lm/m;.j:()Lm/d;` @kind virtual;
  #L3f51bc.  return @kind void;
  #L3f51be.  v2:= new `java.lang.IllegalStateException`;
  #L3f51c2.  v3:= "closed" @kind object;
  #L3f51c6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f51cc.  throw v2;
}
procedure `m.c` `c`(`m.m` v1 @kind this) @signature `Lm/m;.c:()Lm/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4e58.  v0:= v1.`m.m.b` @type ^`m.c` @kind object;
  #L3f4e5c.  return v0 @kind object;
}
procedure `void` `close`(`m.m` v6 @kind this) @signature `Lm/m;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f50c4.  v0:= v6.`m.m.d` @type ^`boolean` @kind boolean;
  #L3f50c8.  if v0 == 0 then goto L3f50ce;
  #L3f50cc.  return @kind void;
  #L3f50ce.  v0:= 0I;
  #L3f50d0.  v1:= v6.`m.m.b` @type ^`m.c` @kind object;
  #L3f50d4.  v1:= v1.`m.c.c` @type ^`long` @kind wide;
  #L3f50d8.  v3:= 0L;
  #L3f50dc.  v5:= lcmp(v1, v3);
  #L3f50e0.  if v5 <= 0 then goto L3f50fa;
  #L3f50e4.  v1:= v6.`m.m.c` @type ^`m.r` @kind object;
  #L3f50e8.  v2:= v6.`m.m.b` @type ^`m.c` @kind object;
  #L3f50ec.  v3:= v6.`m.m.b` @type ^`m.c` @kind object;
  #L3f50f0.  v3:= v3.`m.c.c` @type ^`long` @kind wide;
  #L3f50f4.  call `b`(v1, v2, v3) @signature `Lm/r;.b:(Lm/c;J)V` @kind interface;
  #L3f50fa.  v1:= v0 @kind object;
  #L3f50fc.  goto L3f5100;
  #L3f50fe.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f5100.  v2:= v6.`m.m.c` @type ^`m.r` @kind object;
  #L3f5104.  call `close`(v2) @signature `Lm/r;.close:()V` @kind interface;
  #L3f510a.  goto L3f5114;
  #L3f510c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f510e.  if v1 != 0 then goto L3f5114;
  #L3f5112.  v1:= v2 @kind object;
  #L3f5114.  v2:= 1I;
  #L3f5116.  v6.`m.m.d` @type ^`boolean` := v2 @kind boolean;
  #L3f511a.  if v1 != 0 then goto L3f5120;
  #L3f511e.  return @kind void;
  #L3f5120.  call `a`(v1) @signature `Lm/u;.a:(Ljava/lang/Throwable;)V` @kind static;
  #L3f5126.  throw v0;
  catch `java.lang.Throwable` @[L3f50d0..L3f50fa] goto L3f50fe;
  catch `java.lang.Throwable` @[L3f5100..L3f510a] goto L3f510c;
}
procedure `m.t` `d`(`m.m` v1 @kind this) @signature `Lm/m;.d:()Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5064.  v0:= v1.`m.m.c` @type ^`m.r` @kind object;
  #L3f5068.  call temp:= `d`(v0) @signature `Lm/r;.d:()Lm/t;` @kind interface;
  #L3f506e.  v0:= temp @kind object;
  #L3f5070.  return v0 @kind object;
}
procedure `m.d` `e`(`m.m` v1 @kind this, `long` v2 ) @signature `Lm/m;.e:(J)Lm/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4f74.  v0:= v1.`m.m.d` @type ^`boolean` @kind boolean;
  #L3f4f78.  if v0 != 0 then goto L3f4f90;
  #L3f4f7c.  v0:= v1.`m.m.b` @type ^`m.c` @kind object;
  #L3f4f80.  call temp:= `e`(v0, v2) @signature `Lm/c;.e:(J)Lm/c;` @kind virtual;
  #L3f4f86.  call temp:= `j`(v1) @signature `Lm/m;.j:()Lm/d;` @kind virtual;
  #L3f4f8c.  v2:= temp @kind object;
  #L3f4f8e.  return v2 @kind object;
  #L3f4f90.  v2:= new `java.lang.IllegalStateException`;
  #L3f4f94.  v3:= "closed" @kind object;
  #L3f4f98.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4f9e.  throw v2;
}
procedure `void` `flush`(`m.m` v6 @kind this) @signature `Lm/m;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f5150.  v0:= v6.`m.m.d` @type ^`boolean` @kind boolean;
  #L3f5154.  if v0 != 0 then goto L3f5182;
  #L3f5158.  v0:= v6.`m.m.b` @type ^`m.c` @kind object;
  #L3f515c.  v1:= v0.`m.c.c` @type ^`long` @kind wide;
  #L3f5160.  v3:= 0L;
  #L3f5164.  v5:= lcmp(v1, v3);
  #L3f5168.  if v5 <= 0 then goto L3f5176;
  #L3f516c.  v3:= v6.`m.m.c` @type ^`m.r` @kind object;
  #L3f5170.  call `b`(v3, v0, v1) @signature `Lm/r;.b:(Lm/c;J)V` @kind interface;
  #L3f5176.  v0:= v6.`m.m.c` @type ^`m.r` @kind object;
  #L3f517a.  call `flush`(v0) @signature `Lm/r;.flush:()V` @kind interface;
  #L3f5180.  return @kind void;
  #L3f5182.  v0:= new `java.lang.IllegalStateException`;
  #L3f5186.  v1:= "closed" @kind object;
  #L3f518a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f5190.  throw v0;
}
procedure `boolean` `isOpen`(`m.m` v1 @kind this) @signature `Lm/m;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4dbc.  v0:= v1.`m.m.d` @type ^`boolean` @kind boolean;
  #L3f4dc0.  v0:= v0 ^~ 1;
  #L3f4dc4.  return v0;
}
procedure `m.d` `j`(`m.m` v5 @kind this) @signature `Lm/m;.j:()Lm/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f4e70.  v0:= v5.`m.m.d` @type ^`boolean` @kind boolean;
  #L3f4e74.  if v0 != 0 then goto L3f4ea0;
  #L3f4e78.  v0:= v5.`m.m.b` @type ^`m.c` @kind object;
  #L3f4e7c.  call temp:= `r`(v0) @signature `Lm/c;.r:()J` @kind virtual;
  #L3f4e82.  v0:= temp @kind wide;
  #L3f4e84.  v2:= 0L;
  #L3f4e88.  v4:= lcmp(v0, v2);
  #L3f4e8c.  if v4 <= 0 then goto L3f4e9e;
  #L3f4e90.  v2:= v5.`m.m.c` @type ^`m.r` @kind object;
  #L3f4e94.  v3:= v5.`m.m.b` @type ^`m.c` @kind object;
  #L3f4e98.  call `b`(v2, v3, v0) @signature `Lm/r;.b:(Lm/c;J)V` @kind interface;
  #L3f4e9e.  return v5 @kind object;
  #L3f4ea0.  v0:= new `java.lang.IllegalStateException`;
  #L3f4ea4.  v1:= "closed" @kind object;
  #L3f4ea8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4eae.  throw v0;
}
procedure `java.lang.String` `toString`(`m.m` v2 @kind this) @signature `Lm/m;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f4e14.  v0:= new `java.lang.StringBuilder`;
  #L3f4e18.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f4e1e.  v1:= "buffer(" @kind object;
  #L3f4e22.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4e28.  v1:= v2.`m.m.c` @type ^`m.r` @kind object;
  #L3f4e2c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4e32.  v1:= ")" @kind object;
  #L3f4e36.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4e3c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f4e42.  v0:= temp @kind object;
  #L3f4e44.  return v0 @kind object;
}
procedure `int` `write`(`m.m` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Lm/m;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4dd8.  v0:= v1.`m.m.d` @type ^`boolean` @kind boolean;
  #L3f4ddc.  if v0 != 0 then goto L3f4df4;
  #L3f4de0.  v0:= v1.`m.m.b` @type ^`m.c` @kind object;
  #L3f4de4.  call temp:= `write`(v0, v2) @signature `Lm/c;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L3f4dea.  v2:= temp;
  #L3f4dec.  call temp:= `j`(v1) @signature `Lm/m;.j:()Lm/d;` @kind virtual;
  #L3f4df2.  return v2;
  #L3f4df4.  v2:= new `java.lang.IllegalStateException`;
  #L3f4df8.  v0:= "closed" @kind object;
  #L3f4dfc.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4e02.  throw v2;
}
procedure `m.d` `write`(`m.m` v1 @kind this, `byte`[] v2 @kind object) @signature `Lm/m;.write:([B)Lm/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4ec0.  v0:= v1.`m.m.d` @type ^`boolean` @kind boolean;
  #L3f4ec4.  if v0 != 0 then goto L3f4eda;
  #L3f4ec8.  v0:= v1.`m.m.b` @type ^`m.c` @kind object;
  #L3f4ecc.  call temp:= `write`(v0, v2) @signature `Lm/c;.write:([B)Lm/c;` @kind virtual;
  #L3f4ed2.  call temp:= `j`(v1) @signature `Lm/m;.j:()Lm/d;` @kind virtual;
  #L3f4ed8.  return v1 @kind object;
  #L3f4eda.  v2:= new `java.lang.IllegalStateException`;
  #L3f4ede.  v0:= "closed" @kind object;
  #L3f4ee2.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4ee8.  throw v2;
}
procedure `m.d` `write`(`m.m` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lm/m;.write:([BII)Lm/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4efc.  v0:= v1.`m.m.d` @type ^`boolean` @kind boolean;
  #L3f4f00.  if v0 != 0 then goto L3f4f16;
  #L3f4f04.  v0:= v1.`m.m.b` @type ^`m.c` @kind object;
  #L3f4f08.  call temp:= `write`(v0, v2, v3, v4) @signature `Lm/c;.write:([BII)Lm/c;` @kind virtual;
  #L3f4f0e.  call temp:= `j`(v1) @signature `Lm/m;.j:()Lm/d;` @kind virtual;
  #L3f4f14.  return v1 @kind object;
  #L3f4f16.  v2:= new `java.lang.IllegalStateException`;
  #L3f4f1a.  v3:= "closed" @kind object;
  #L3f4f1e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4f24.  throw v2;
}
procedure `m.d` `writeByte`(`m.m` v1 @kind this, `int` v2 ) @signature `Lm/m;.writeByte:(I)Lm/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4f38.  v0:= v1.`m.m.d` @type ^`boolean` @kind boolean;
  #L3f4f3c.  if v0 != 0 then goto L3f4f54;
  #L3f4f40.  v0:= v1.`m.m.b` @type ^`m.c` @kind object;
  #L3f4f44.  call temp:= `writeByte`(v0, v2) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3f4f4a.  call temp:= `j`(v1) @signature `Lm/m;.j:()Lm/d;` @kind virtual;
  #L3f4f50.  v2:= temp @kind object;
  #L3f4f52.  return v2 @kind object;
  #L3f4f54.  v2:= new `java.lang.IllegalStateException`;
  #L3f4f58.  v0:= "closed" @kind object;
  #L3f4f5c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4f62.  throw v2;
}
procedure `m.d` `writeInt`(`m.m` v1 @kind this, `int` v2 ) @signature `Lm/m;.writeInt:(I)Lm/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4fb0.  v0:= v1.`m.m.d` @type ^`boolean` @kind boolean;
  #L3f4fb4.  if v0 != 0 then goto L3f4fcc;
  #L3f4fb8.  v0:= v1.`m.m.b` @type ^`m.c` @kind object;
  #L3f4fbc.  call temp:= `writeInt`(v0, v2) @signature `Lm/c;.writeInt:(I)Lm/c;` @kind virtual;
  #L3f4fc2.  call temp:= `j`(v1) @signature `Lm/m;.j:()Lm/d;` @kind virtual;
  #L3f4fc8.  v2:= temp @kind object;
  #L3f4fca.  return v2 @kind object;
  #L3f4fcc.  v2:= new `java.lang.IllegalStateException`;
  #L3f4fd0.  v0:= "closed" @kind object;
  #L3f4fd4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4fda.  throw v2;
}
procedure `m.d` `writeShort`(`m.m` v1 @kind this, `int` v2 ) @signature `Lm/m;.writeShort:(I)Lm/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4fec.  v0:= v1.`m.m.d` @type ^`boolean` @kind boolean;
  #L3f4ff0.  if v0 != 0 then goto L3f5006;
  #L3f4ff4.  v0:= v1.`m.m.b` @type ^`m.c` @kind object;
  #L3f4ff8.  call temp:= `writeShort`(v0, v2) @signature `Lm/c;.writeShort:(I)Lm/c;` @kind virtual;
  #L3f4ffe.  call temp:= `j`(v1) @signature `Lm/m;.j:()Lm/d;` @kind virtual;
  #L3f5004.  return v1 @kind object;
  #L3f5006.  v2:= new `java.lang.IllegalStateException`;
  #L3f500a.  v0:= "closed" @kind object;
  #L3f500e.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f5014.  throw v2;
}
