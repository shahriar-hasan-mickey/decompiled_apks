record `m.l$a` @kind class @AccessFlag FINAL extends `m.r` @kind interface {
  `m.t` `m.l$a.b` @AccessFlag FINAL_SYNTHETIC;
  `java.io.OutputStream` `m.l$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`m.l$a` v0 @kind this, `m.t` v1 @kind object, `java.io.OutputStream` v2 @kind object) @signature `Lm/l$a;.<init>:(Lm/t;Ljava/io/OutputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f480c.  v0.`m.l$a.b` @type ^`m.t` := v1 @kind object;
  #L3f4810.  v0.`m.l$a.c` @type ^`java.io.OutputStream` := v2 @kind object;
  #L3f4814.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f481a.  return @kind void;
}
procedure `void` `b`(`m.l$a` v6 @kind this, `m.c` v7 @kind object, `long` v8 ) @signature `Lm/l$a;.b:(Lm/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f4864.  v0:= v7.`m.c.c` @type ^`long` @kind wide;
  #L3f4868.  v2:= 0L;
  #L3f486c.  v4:= v8 @kind wide;
  #L3f486e.  call `a`(v0, v2, v4) @signature `Lm/u;.a:(JJJ)V` @kind static;
  #L3f4874.  v0:= 0L;
  #L3f4878.  v2:= lcmp(v8, v0);
  #L3f487c.  if v2 <= 0 then goto L3f48ee;
  #L3f4880.  v0:= v6.`m.l$a.b` @type ^`m.t` @kind object;
  #L3f4884.  call `e`(v0) @signature `Lm/t;.e:()V` @kind virtual;
  #L3f488a.  v0:= v7.`m.c.b` @type ^`m.o` @kind object;
  #L3f488e.  v1:= v0.`m.o.c` @type ^`int`;
  #L3f4892.  v2:= v0.`m.o.b` @type ^`int`;
  #L3f4896.  v1:= v1 - v2 @kind int;
  #L3f4898.  v1:= (`long`) v1 @kind i2l;
  #L3f489a.  call temp:= `min`(v8, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3f48a0.  v1:= temp @kind wide;
  #L3f48a2.  v2:= (`int`) v1 @kind l2i;
  #L3f48a4.  v1:= v6.`m.l$a.c` @type ^`java.io.OutputStream` @kind object;
  #L3f48a8.  v3:= v0.`m.o.a` @type ^`byte`[] @kind object;
  #L3f48ac.  v4:= v0.`m.o.b` @type ^`int`;
  #L3f48b0.  call `write`(v1, v3, v4, v2) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L3f48b6.  v1:= v0.`m.o.b` @type ^`int`;
  #L3f48ba.  v1:= v1 + v2 @kind int;
  #L3f48bc.  v0.`m.o.b` @type ^`int` := v1;
  #L3f48c0.  v1:= (`long`) v2 @kind i2l;
  #L3f48c2.  v8:= v8 - v1 @kind long;
  #L3f48c4.  v3:= v7.`m.c.c` @type ^`long` @kind wide;
  #L3f48c8.  v3:= v3 - v1 @kind long;
  #L3f48ca.  v7.`m.c.c` @type ^`long` := v3 @kind wide;
  #L3f48ce.  v1:= v0.`m.o.b` @type ^`int`;
  #L3f48d2.  v2:= v0.`m.o.c` @type ^`int`;
  #L3f48d6.  if v1 != v2 then goto L3f4874;
  #L3f48da.  call temp:= `b`(v0) @signature `Lm/o;.b:()Lm/o;` @kind virtual;
  #L3f48e0.  v1:= temp @kind object;
  #L3f48e2.  v7.`m.c.b` @type ^`m.o` := v1 @kind object;
  #L3f48e6.  call `a`(v0) @signature `Lm/p;.a:(Lm/o;)V` @kind static;
  #L3f48ec.  goto L3f4874;
  #L3f48ee.  return @kind void;
}
procedure `void` `close`(`m.l$a` v1 @kind this) @signature `Lm/l$a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f482c.  v0:= v1.`m.l$a.c` @type ^`java.io.OutputStream` @kind object;
  #L3f4830.  call `close`(v0) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L3f4836.  return @kind void;
}
procedure `m.t` `d`(`m.l$a` v1 @kind this) @signature `Lm/l$a;.d:()Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f47f4.  v0:= v1.`m.l$a.b` @type ^`m.t` @kind object;
  #L3f47f8.  return v0 @kind object;
}
procedure `void` `flush`(`m.l$a` v1 @kind this) @signature `Lm/l$a;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4848.  v0:= v1.`m.l$a.c` @type ^`java.io.OutputStream` @kind object;
  #L3f484c.  call `flush`(v0) @signature `Ljava/io/OutputStream;.flush:()V` @kind virtual;
  #L3f4852.  return @kind void;
}
procedure `java.lang.String` `toString`(`m.l$a` v2 @kind this) @signature `Lm/l$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f47b0.  v0:= new `java.lang.StringBuilder`;
  #L3f47b4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f47ba.  v1:= "sink(" @kind object;
  #L3f47be.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f47c4.  v1:= v2.`m.l$a.c` @type ^`java.io.OutputStream` @kind object;
  #L3f47c8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f47ce.  v1:= ")" @kind object;
  #L3f47d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f47d8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f47de.  v0:= temp @kind object;
  #L3f47e0.  return v0 @kind object;
}
