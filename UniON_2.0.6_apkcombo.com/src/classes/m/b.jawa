record `m.b` @kind class @AccessFlag FINAL {
}
global `byte`[] `@@m.b.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lm/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f1714.  v0:= 64I;
  #L3f1718.  v0:= new `byte`[v0];
  #L3f171c.  goto L3f1728;
  #L3f1722.  `@@m.b.a` @type ^`byte`[] := v0 @kind object;
  #L3f1726.  return @kind void;
  #L3f1728.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 43I, 47I) @kind object;
  #L3f176f.  goto L3f1722;
}
procedure `java.lang.String` `a`(`byte`[] v1 @kind object) @signature `Lm/b;.a:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f1564.  v0:= `@@m.b.a` @type ^`byte`[] @kind object;
  #L3f1568.  call temp:= `a`(v1, v0) @signature `Lm/b;.a:([B[B)Ljava/lang/String;` @kind static;
  #L3f156e.  v1:= temp @kind object;
  #L3f1570.  return v1 @kind object;
}
procedure `java.lang.String` `a`(`byte`[] v9 @kind object, `byte`[] v10 @kind object) @signature `Lm/b;.a:([B[B)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f1584.  v0:= length @variable v9;
  #L3f1586.  v1:= 2I;
  #L3f1588.  v0:= v0 + v1 @kind int;
  #L3f158a.  v0:= v0 / 3;
  #L3f158e.  v0:= v0 * 4;
  #L3f1592.  v0:= new `byte`[v0];
  #L3f1596.  v2:= length @variable v9;
  #L3f1598.  v3:= length @variable v9;
  #L3f159a.  v3:= v3 %% 3;
  #L3f159e.  v2:= v2 - v3 @kind int;
  #L3f15a0.  v3:= 0I;
  #L3f15a2.  v4:= 0I;
  #L3f15a4.  if v3 >= v2 then goto L3f162a;
  #L3f15a8.  v5:= v4 + 1;
  #L3f15ac.  v6:= v9[v3] @kind byte;
  #L3f15b0.  v6:= v6 ^& 255;
  #L3f15b4.  v6:= v6 ^> v1 @kind int;
  #L3f15b6.  v6:= v10[v6] @kind byte;
  #L3f15ba.  v0[v4]:= v6 @kind byte;
  #L3f15be.  v4:= v5 + 1;
  #L3f15c2.  v6:= v9[v3] @kind byte;
  #L3f15c6.  v6:= v6 ^& 3;
  #L3f15ca.  v6:= v6 ^< 4;
  #L3f15ce.  v7:= v3 + 1;
  #L3f15d2.  v8:= v9[v7] @kind byte;
  #L3f15d6.  v8:= v8 ^& 255;
  #L3f15da.  v8:= v8 ^> 4;
  #L3f15de.  v6:= v6 ^| v8 @kind int;
  #L3f15e0.  v6:= v10[v6] @kind byte;
  #L3f15e4.  v0[v5]:= v6 @kind byte;
  #L3f15e8.  v5:= v4 + 1;
  #L3f15ec.  v6:= v9[v7] @kind byte;
  #L3f15f0.  v6:= v6 ^& 15;
  #L3f15f4.  v6:= v6 ^< v1 @kind int;
  #L3f15f6.  v7:= v3 + 2;
  #L3f15fa.  v8:= v9[v7] @kind byte;
  #L3f15fe.  v8:= v8 ^& 255;
  #L3f1602.  v8:= v8 ^> 6;
  #L3f1606.  v6:= v6 ^| v8 @kind int;
  #L3f1608.  v6:= v10[v6] @kind byte;
  #L3f160c.  v0[v4]:= v6 @kind byte;
  #L3f1610.  v4:= v5 + 1;
  #L3f1614.  v6:= v9[v7] @kind byte;
  #L3f1618.  v6:= v6 ^& 63;
  #L3f161c.  v6:= v10[v6] @kind byte;
  #L3f1620.  v0[v5]:= v6 @kind byte;
  #L3f1624.  v3:= v3 + 3;
  #L3f1628.  goto L3f15a4;
  #L3f162a.  v3:= length @variable v9;
  #L3f162c.  v3:= v3 %% 3;
  #L3f1630.  v5:= 61I;
  #L3f1634.  v6:= 1I;
  #L3f1636.  if v3 == v6 then goto L3f169a;
  #L3f163a.  if v3 == v1 then goto L3f1640;
  #L3f163e.  goto L3f16d6;
  #L3f1640.  v3:= v4 + 1;
  #L3f1644.  v7:= v9[v2] @kind byte;
  #L3f1648.  v7:= v7 ^& 255;
  #L3f164c.  v7:= v7 ^> v1 @kind int;
  #L3f164e.  v7:= v10[v7] @kind byte;
  #L3f1652.  v0[v4]:= v7 @kind byte;
  #L3f1656.  v4:= v3 + 1;
  #L3f165a.  v7:= v9[v2] @kind byte;
  #L3f165e.  v7:= v7 ^& 3;
  #L3f1662.  v7:= v7 ^< 4;
  #L3f1666.  v2:= v2 + v6 @kind int;
  #L3f1668.  v6:= v9[v2] @kind byte;
  #L3f166c.  v6:= v6 ^& 255;
  #L3f1670.  v6:= v6 ^> 4;
  #L3f1674.  v6:= v6 ^| v7 @kind int;
  #L3f1676.  v6:= v10[v6] @kind byte;
  #L3f167a.  v0[v3]:= v6 @kind byte;
  #L3f167e.  v3:= v4 + 1;
  #L3f1682.  v9:= v9[v2] @kind byte;
  #L3f1686.  v9:= v9 ^& 15;
  #L3f168a.  v9:= v9 ^< v1 @kind int;
  #L3f168c.  v9:= v10[v9] @kind byte;
  #L3f1690.  v0[v4]:= v9 @kind byte;
  #L3f1694.  v0[v3]:= v5 @kind byte;
  #L3f1698.  goto L3f16d6;
  #L3f169a.  v3:= v4 + 1;
  #L3f169e.  v6:= v9[v2] @kind byte;
  #L3f16a2.  v6:= v6 ^& 255;
  #L3f16a6.  v1:= v6 ^> 2;
  #L3f16aa.  v1:= v10[v1] @kind byte;
  #L3f16ae.  v0[v4]:= v1 @kind byte;
  #L3f16b2.  v1:= v3 + 1;
  #L3f16b6.  v9:= v9[v2] @kind byte;
  #L3f16ba.  v9:= v9 ^& 3;
  #L3f16be.  v9:= v9 ^< 4;
  #L3f16c2.  v9:= v10[v9] @kind byte;
  #L3f16c6.  v0[v3]:= v9 @kind byte;
  #L3f16ca.  v9:= v1 + 1;
  #L3f16ce.  v0[v1]:= v5 @kind byte;
  #L3f16d2.  v0[v9]:= v5 @kind byte;
  #L3f16d6.  v9:= new `java.lang.String`;
  #L3f16da.  v10:= "US-ASCII" @kind object;
  #L3f16de.  call `<init>`(v9, v0, v10) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L3f16e4.  return v9 @kind object;
  #L3f16e6.  v9:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L3f16e8.  v10:= new `java.lang.AssertionError`;
  #L3f16ec.  call `<init>`(v10, v9) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3f16f2.  throw v10;
  catch `java.io.UnsupportedEncodingException` @[L3f16d6..L3f16e4] goto L3f16e6;
}
