record `m.a` @kind class @AccessFlag PUBLIC extends `m.t` @kind class {
  `boolean` `m.a.e` @AccessFlag PRIVATE;
  `m.a` `m.a.f` @AccessFlag PRIVATE;
  `long` `m.a.g` @AccessFlag PRIVATE;
}
global `long` `@@m.a.h` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@m.a.i` @AccessFlag PRIVATE_STATIC_FINAL;
global `m.a` `@@m.a.j` @AccessFlag STATIC;
procedure `void` `<clinit>`() @signature `Lm/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3f137c.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f1380.  v1:= 60L;
  #L3f1384.  call temp:= `toMillis`(v0, v1) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L3f138a.  v0:= temp @kind wide;
  #L3f138c.  `@@m.a.h` @type ^`long` := v0 @kind wide;
  #L3f1390.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3f1394.  v1:= `@@m.a.h` @type ^`long` @kind wide;
  #L3f1398.  call temp:= `toNanos`(v0, v1) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L3f139e.  v0:= temp @kind wide;
  #L3f13a0.  `@@m.a.i` @type ^`long` := v0 @kind wide;
  #L3f13a4.  return @kind void;
}
procedure `void` `<init>`(`m.a` v0 @kind this) @signature `Lm/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f13b8.  call `<init>`(v0) @signature `Lm/t;.<init>:()V` @kind direct;
  #L3f13be.  return @kind void;
}
procedure `void` `a`(`m.a` v6 @kind object, `long` v7 , `boolean` v9 ) @signature `Lm/a;.a:(Lm/a;JZ)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f1458.  v0:= constclass @type ^`m.a` @kind object;
  #L3f145c.  @monitorenter v0
  #L3f145e.  v1:= `@@m.a.j` @type ^`m.a` @kind object;
  #L3f1462.  if v1 != 0 then goto L3f1484;
  #L3f1466.  v1:= new `m.a`;
  #L3f146a.  call `<init>`(v1) @signature `Lm/a;.<init>:()V` @kind direct;
  #L3f1470.  `@@m.a.j` @type ^`m.a` := v1 @kind object;
  #L3f1474.  v1:= new `m.a$c`;
  #L3f1478.  call `<init>`(v1) @signature `Lm/a$c;.<init>:()V` @kind direct;
  #L3f147e.  call `start`(v1) @signature `Ljava/lang/Thread;.start:()V` @kind virtual;
  #L3f1484.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L3f148a.  v1:= temp @kind wide;
  #L3f148c.  v3:= 0L;
  #L3f1490.  v5:= lcmp(v7, v3);
  #L3f1494.  if v5 == 0 then goto L3f14b6;
  #L3f1498.  if v9 == 0 then goto L3f14b6;
  #L3f149c.  call temp:= `c`(v6) @signature `Lm/t;.c:()J` @kind virtual;
  #L3f14a2.  v3:= temp @kind wide;
  #L3f14a4.  v3:= v3 - v1 @kind long;
  #L3f14a6.  call temp:= `min`(v7, v3) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3f14ac.  v7:= temp @kind wide;
  #L3f14ae.  v7:= v7 + v1 @kind long;
  #L3f14b0.  v6.`m.a.g` @type ^`long` := v7 @kind wide;
  #L3f14b4.  goto L3f14cc;
  #L3f14b6.  if v5 == 0 then goto L3f14bc;
  #L3f14ba.  goto L3f14ae;
  #L3f14bc.  if v9 == 0 then goto L3f151a;
  #L3f14c0.  call temp:= `c`(v6) @signature `Lm/t;.c:()J` @kind virtual;
  #L3f14c6.  v7:= temp @kind wide;
  #L3f14c8.  v6.`m.a.g` @type ^`long` := v7 @kind wide;
  #L3f14cc.  call temp:= `b`(v6, v1) @signature `Lm/a;.b:(J)J` @kind direct;
  #L3f14d2.  v7:= temp @kind wide;
  #L3f14d4.  v9:= `@@m.a.j` @type ^`m.a` @kind object;
  #L3f14d8.  v3:= v9.`m.a.f` @type ^`m.a` @kind object;
  #L3f14dc.  if v3 == 0 then goto L3f14fc;
  #L3f14e0.  v3:= v9.`m.a.f` @type ^`m.a` @kind object;
  #L3f14e4.  call temp:= `b`(v3, v1) @signature `Lm/a;.b:(J)J` @kind direct;
  #L3f14ea.  v3:= temp @kind wide;
  #L3f14ec.  v5:= lcmp(v7, v3);
  #L3f14f0.  if v5 >= 0 then goto L3f14f6;
  #L3f14f4.  goto L3f14fc;
  #L3f14f6.  v9:= v9.`m.a.f` @type ^`m.a` @kind object;
  #L3f14fa.  goto L3f14d8;
  #L3f14fc.  v7:= v9.`m.a.f` @type ^`m.a` @kind object;
  #L3f1500.  v6.`m.a.f` @type ^`m.a` := v7 @kind object;
  #L3f1504.  v9.`m.a.f` @type ^`m.a` := v6 @kind object;
  #L3f1508.  v6:= `@@m.a.j` @type ^`m.a` @kind object;
  #L3f150c.  if v9 != v6 then goto L3f1516;
  #L3f1510.  call `notify`(v0) @signature `Ljava/lang/Object;.notify:()V` @kind virtual;
  #L3f1516.  @monitorexit v0
  #L3f1518.  return @kind void;
  #L3f151a.  v6:= new `java.lang.AssertionError`;
  #L3f151e.  call `<init>`(v6) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3f1524.  throw v6;
  #L3f1526.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f1528.  @monitorexit v0
  #L3f152a.  throw v6;
  catch `java.lang.Throwable` @[L3f145e..L3f1516] goto L3f1526;
  catch `java.lang.Throwable` @[L3f151a..L3f1526] goto L3f1526;
}
procedure `boolean` `a`(`m.a` v3 @kind object) @signature `Lm/a;.a:(Lm/a;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f11b0.  v0:= constclass @type ^`m.a` @kind object;
  #L3f11b4.  @monitorenter v0
  #L3f11b6.  v1:= `@@m.a.j` @type ^`m.a` @kind object;
  #L3f11ba.  if v1 == 0 then goto L3f11e0;
  #L3f11be.  v2:= v1.`m.a.f` @type ^`m.a` @kind object;
  #L3f11c2.  if v2 != v3 then goto L3f11da;
  #L3f11c6.  v2:= v3.`m.a.f` @type ^`m.a` @kind object;
  #L3f11ca.  v1.`m.a.f` @type ^`m.a` := v2 @kind object;
  #L3f11ce.  v1:= 0I;
  #L3f11d0.  v3.`m.a.f` @type ^`m.a` := v1 @kind object;
  #L3f11d4.  v3:= 0I;
  #L3f11d6.  @monitorexit v0
  #L3f11d8.  return v3;
  #L3f11da.  v1:= v1.`m.a.f` @type ^`m.a` @kind object;
  #L3f11de.  goto L3f11ba;
  #L3f11e0.  v3:= 1I;
  #L3f11e2.  goto L3f11d6;
  #L3f11e4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f11e6.  @monitorexit v0
  #L3f11e8.  throw v3;
  catch `java.lang.Throwable` @[L3f11b6..L3f11d4] goto L3f11e4;
  catch `java.lang.Throwable` @[L3f11da..L3f11de] goto L3f11e4;
}
procedure `long` `b`(`m.a` v2 @kind this, `long` v3 ) @signature `Lm/a;.b:(J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f1290.  v0:= v2.`m.a.g` @type ^`long` @kind wide;
  #L3f1294.  v0:= v0 - v3 @kind long;
  #L3f1296.  return v0 @kind wide;
}
procedure `m.a` `j`() @signature `Lm/a;.j:()Lm/a;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f12a8.  v0:= constclass @type ^`m.a` @kind object;
  #L3f12ac.  v1:= `@@m.a.j` @type ^`m.a` @kind object;
  #L3f12b0.  v1:= v1.`m.a.f` @type ^`m.a` @kind object;
  #L3f12b4.  v2:= 0I;
  #L3f12b6.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L3f12bc.  v3:= temp @kind wide;
  #L3f12be.  if v1 != 0 then goto L3f12f4;
  #L3f12c2.  v5:= `@@m.a.h` @type ^`long` @kind wide;
  #L3f12c6.  call `wait`(v0, v5) @signature `Ljava/lang/Object;.wait:(J)V` @kind virtual;
  #L3f12cc.  v0:= `@@m.a.j` @type ^`m.a` @kind object;
  #L3f12d0.  v0:= v0.`m.a.f` @type ^`m.a` @kind object;
  #L3f12d4.  if v0 != 0 then goto L3f12f2;
  #L3f12d8.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L3f12de.  v0:= temp @kind wide;
  #L3f12e0.  v0:= v0 - v3 @kind long;
  #L3f12e2.  v3:= `@@m.a.i` @type ^`long` @kind wide;
  #L3f12e6.  v5:= lcmp(v0, v3);
  #L3f12ea.  if v5 < 0 then goto L3f12f2;
  #L3f12ee.  v2:= `@@m.a.j` @type ^`m.a` @kind object;
  #L3f12f2.  return v2 @kind object;
  #L3f12f4.  call temp:= `b`(v1, v3) @signature `Lm/a;.b:(J)J` @kind direct;
  #L3f12fa.  v3:= temp @kind wide;
  #L3f12fc.  v5:= 0L;
  #L3f1300.  v7:= lcmp(v3, v5);
  #L3f1304.  if v7 <= 0 then goto L3f1322;
  #L3f1308.  v5:= 1000000L;
  #L3f130e.  v7:= v3 / v5 @kind long;
  #L3f1312.  v5:= v5 * v7 @kind long;
  #L3f1316.  v3:= v3 - v5 @kind long;
  #L3f1318.  v1:= (`int`) v3 @kind l2i;
  #L3f131a.  call `wait`(v0, v7, v1) @signature `Ljava/lang/Object;.wait:(JI)V` @kind virtual;
  #L3f1320.  return v2 @kind object;
  #L3f1322.  v0:= `@@m.a.j` @type ^`m.a` @kind object;
  #L3f1326.  v3:= v1.`m.a.f` @type ^`m.a` @kind object;
  #L3f132a.  v0.`m.a.f` @type ^`m.a` := v3 @kind object;
  #L3f132e.  v1.`m.a.f` @type ^`m.a` := v2 @kind object;
  #L3f1332.  return v1 @kind object;
}
procedure `java.io.IOException` `a`(`m.a` v1 @kind this, `java.io.IOException` v2 @kind object) @signature `Lm/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag FINAL {
    temp;
    v0;

  #L3f123c.  call temp:= `h`(v1) @signature `Lm/a;.h:()Z` @kind virtual;
  #L3f1242.  v0:= temp;
  #L3f1244.  if v0 != 0 then goto L3f124a;
  #L3f1248.  return v2 @kind object;
  #L3f124a.  call temp:= `b`(v1, v2) @signature `Lm/a;.b:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L3f1250.  v2:= temp @kind object;
  #L3f1252.  return v2 @kind object;
}
procedure `m.r` `a`(`m.a` v1 @kind this, `m.r` v2 @kind object) @signature `Lm/a;.a:(Lm/r;)Lm/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f1344.  v0:= new `m.a$a`;
  #L3f1348.  call `<init>`(v0, v1, v2) @signature `Lm/a$a;.<init>:(Lm/a;Lm/r;)V` @kind direct;
  #L3f134e.  return v0 @kind object;
}
procedure `m.s` `a`(`m.a` v1 @kind this, `m.s` v2 @kind object) @signature `Lm/a;.a:(Lm/s;)Lm/s;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f1360.  v0:= new `m.a$b`;
  #L3f1364.  call `<init>`(v0, v1, v2) @signature `Lm/a$b;.<init>:(Lm/a;Lm/s;)V` @kind direct;
  #L3f136a.  return v0 @kind object;
}
procedure `void` `a`(`m.a` v1 @kind this, `boolean` v2 ) @signature `Lm/a;.a:(Z)V` @AccessFlag FINAL {
    temp;
    v0;

  #L3f1428.  call temp:= `h`(v1) @signature `Lm/a;.h:()Z` @kind virtual;
  #L3f142e.  v0:= temp;
  #L3f1430.  if v0 == 0 then goto L3f1446;
  #L3f1434.  if v2 != 0 then goto L3f143a;
  #L3f1438.  goto L3f1446;
  #L3f143a.  v2:= 0I;
  #L3f143c.  call temp:= `b`(v1, v2) @signature `Lm/a;.b:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L3f1442.  v2:= temp @kind object;
  #L3f1444.  throw v2;
  #L3f1446.  return @kind void;
}
procedure `java.io.IOException` `b`(`m.a` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lm/a;.b:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3f1264.  v0:= new `java.io.InterruptedIOException`;
  #L3f1268.  v1:= "timeout" @kind object;
  #L3f126c.  call `<init>`(v0, v1) @signature `Ljava/io/InterruptedIOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f1272.  if v3 == 0 then goto L3f127c;
  #L3f1276.  call temp:= `initCause`(v0, v3) @signature `Ljava/io/InterruptedIOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3f127c.  return v0 @kind object;
}
procedure `void` `g`(`m.a` v6 @kind this) @signature `Lm/a;.g:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f13d0.  v0:= v6.`m.a.e` @type ^`boolean` @kind boolean;
  #L3f13d4.  if v0 != 0 then goto L3f1408;
  #L3f13d8.  call temp:= `f`(v6) @signature `Lm/t;.f:()J` @kind virtual;
  #L3f13de.  v0:= temp @kind wide;
  #L3f13e0.  call temp:= `d`(v6) @signature `Lm/t;.d:()Z` @kind virtual;
  #L3f13e6.  v2:= temp;
  #L3f13e8.  v3:= 0L;
  #L3f13ec.  v5:= lcmp(v0, v3);
  #L3f13f0.  if v5 != 0 then goto L3f13fa;
  #L3f13f4.  if v2 != 0 then goto L3f13fa;
  #L3f13f8.  return @kind void;
  #L3f13fa.  v3:= 1I;
  #L3f13fc.  v6.`m.a.e` @type ^`boolean` := v3 @kind boolean;
  #L3f1400.  call `a`(v6, v0, v2) @signature `Lm/a;.a:(Lm/a;JZ)V` @kind static;
  #L3f1406.  return @kind void;
  #L3f1408.  v0:= new `java.lang.IllegalStateException`;
  #L3f140c.  v1:= "Unbalanced enter/exit" @kind object;
  #L3f1410.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f1416.  throw v0;
}
procedure `boolean` `h`(`m.a` v2 @kind this) @signature `Lm/a;.h:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f1210.  v0:= v2.`m.a.e` @type ^`boolean` @kind boolean;
  #L3f1214.  v1:= 0I;
  #L3f1216.  if v0 != 0 then goto L3f121c;
  #L3f121a.  return v1;
  #L3f121c.  v2.`m.a.e` @type ^`boolean` := v1 @kind boolean;
  #L3f1220.  call temp:= `a`(v2) @signature `Lm/a;.a:(Lm/a;)Z` @kind static;
  #L3f1226.  v0:= temp;
  #L3f1228.  return v0;
}
procedure `void` `i`(`m.a` v0 @kind this) @signature `Lm/a;.i:()V` @AccessFlag PROTECTED {
    temp;

  #L3f1550.  return @kind void;
}
