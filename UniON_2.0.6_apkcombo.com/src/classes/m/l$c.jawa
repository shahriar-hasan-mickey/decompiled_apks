record `m.l$c` @kind class @AccessFlag FINAL extends `m.a` @kind class {
  `java.net.Socket` `m.l$c.k` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`m.l$c` v0 @kind this, `java.net.Socket` v1 @kind object) @signature `Lm/l$c;.<init>:(Ljava/net/Socket;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f4aa0.  v0.`m.l$c.k` @type ^`java.net.Socket` := v1 @kind object;
  #L3f4aa4.  call `<init>`(v0) @signature `Lm/a;.<init>:()V` @kind direct;
  #L3f4aaa.  return @kind void;
}
procedure `java.io.IOException` `b`(`m.l$c` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lm/l$c;.b:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3f4a74.  v0:= new `java.net.SocketTimeoutException`;
  #L3f4a78.  v1:= "timeout" @kind object;
  #L3f4a7c.  call `<init>`(v0, v1) @signature `Ljava/net/SocketTimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4a82.  if v3 == 0 then goto L3f4a8c;
  #L3f4a86.  call temp:= `initCause`(v0, v3) @signature `Ljava/io/InterruptedIOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3f4a8c.  return v0 @kind object;
}
procedure `void` `i`(`m.l$c` v5 @kind this) @signature `Lm/l$c;.i:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f4abc.  v0:= "Failed to close timed out socket " @kind object;
  #L3f4ac0.  v1:= v5.`m.l$c.k` @type ^`java.net.Socket` @kind object;
  #L3f4ac4.  call `close`(v1) @signature `Ljava/net/Socket;.close:()V` @kind virtual;
  #L3f4aca.  goto L3f4b22;
  #L3f4acc.  v1:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L3f4ace.  call temp:= `a`(v1) @signature `Lm/l;.a:(Ljava/lang/AssertionError;)Z` @kind static;
  #L3f4ad4.  v2:= temp;
  #L3f4ad6.  if v2 == 0 then goto L3f4aee;
  #L3f4ada.  v2:= `@@m.l.a` @type ^`java.util.logging.Logger` @kind object;
  #L3f4ade.  v3:= `@@java.util.logging.Level.WARNING` @type ^`java.util.logging.Level` @kind object;
  #L3f4ae2.  v4:= new `java.lang.StringBuilder`;
  #L3f4ae6.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f4aec.  goto L3f4b04;
  #L3f4aee.  throw v1;
  #L3f4af0.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L3f4af2.  v2:= `@@m.l.a` @type ^`java.util.logging.Logger` @kind object;
  #L3f4af6.  v3:= `@@java.util.logging.Level.WARNING` @type ^`java.util.logging.Level` @kind object;
  #L3f4afa.  v4:= new `java.lang.StringBuilder`;
  #L3f4afe.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f4b04.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4b0a.  v0:= v5.`m.l$c.k` @type ^`java.net.Socket` @kind object;
  #L3f4b0e.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4b14.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f4b1a.  v0:= temp @kind object;
  #L3f4b1c.  call `log`(v2, v3, v0, v1) @signature `Ljava/util/logging/Logger;.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L3f4b22.  return @kind void;
  catch `java.lang.Exception` @[L3f4ac0..L3f4aca] goto L3f4af0;
  catch `java.lang.AssertionError` @[L3f4ac0..L3f4aca] goto L3f4acc;
}
