record `m.j` @kind class @AccessFlag PUBLIC_FINAL extends `m.s` @kind interface {
  `int` `m.j.b` @AccessFlag PRIVATE;
  `m.e` `m.j.c` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `m.j.d` @AccessFlag PRIVATE_FINAL;
  `m.k` `m.j.e` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.CRC32` `m.j.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`m.j` v2 @kind this, `m.s` v3 @kind object) @signature `Lm/j;.<init>:(Lm/s;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3f4130.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f4136.  v0:= 0I;
  #L3f4138.  v2.`m.j.b` @type ^`int` := v0;
  #L3f413c.  v0:= new `java.util.zip.CRC32`;
  #L3f4140.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L3f4146.  v2.`m.j.f` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L3f414a.  if v3 == 0 then goto L3f4182;
  #L3f414e.  v0:= new `java.util.zip.Inflater`;
  #L3f4152.  v1:= 1I;
  #L3f4154.  call `<init>`(v0, v1) @signature `Ljava/util/zip/Inflater;.<init>:(Z)V` @kind direct;
  #L3f415a.  v2.`m.j.d` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L3f415e.  call temp:= `a`(v3) @signature `Lm/l;.a:(Lm/s;)Lm/e;` @kind static;
  #L3f4164.  v3:= temp @kind object;
  #L3f4166.  v2.`m.j.c` @type ^`m.e` := v3 @kind object;
  #L3f416a.  v3:= new `m.k`;
  #L3f416e.  v0:= v2.`m.j.c` @type ^`m.e` @kind object;
  #L3f4172.  v1:= v2.`m.j.d` @type ^`java.util.zip.Inflater` @kind object;
  #L3f4176.  call `<init>`(v3, v0, v1) @signature `Lm/k;.<init>:(Lm/e;Ljava/util/zip/Inflater;)V` @kind direct;
  #L3f417c.  v2.`m.j.e` @type ^`m.k` := v3 @kind object;
  #L3f4180.  return @kind void;
  #L3f4182.  v3:= new `java.lang.IllegalArgumentException`;
  #L3f4186.  v0:= "source == null" @kind object;
  #L3f418a.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4190.  throw v3;
}
procedure `void` `a`(`m.j` v17 @kind this) @signature `Lm/j;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L3f4218.  v6:= v17 @kind object;
  #L3f421c.  v0:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f4220.  v1:= 10L;
  #L3f4224.  call `d`(v0, v1) @signature `Lm/e;.d:(J)V` @kind interface;
  #L3f422a.  v0:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f422e.  call temp:= `c`(v0) @signature `Lm/e;.c:()Lm/c;` @kind interface;
  #L3f4234.  v0:= temp @kind object;
  #L3f4236.  v1:= 3L;
  #L3f423a.  call temp:= `f`(v0, v1) @signature `Lm/c;.f:(J)B` @kind virtual;
  #L3f4240.  v7:= temp;
  #L3f4242.  v0:= v7 ^> 1;
  #L3f4246.  v8:= 1I;
  #L3f4248.  v0:= v0 ^& v8 @kind int;
  #L3f424a.  v9:= 0I;
  #L3f424c.  if v0 != v8 then goto L3f4254;
  #L3f4250.  v10:= 1I;
  #L3f4252.  goto L3f4256;
  #L3f4254.  v10:= 0I;
  #L3f4256.  if v10 == 0 then goto L3f4278;
  #L3f425a.  v0:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f425e.  call temp:= `c`(v0) @signature `Lm/e;.c:()Lm/c;` @kind interface;
  #L3f4264.  v1:= temp @kind object;
  #L3f4266.  v2:= 0L;
  #L3f426a.  v4:= 10L;
  #L3f426e.  v0:= v17 @kind object;
  #L3f4272.  call `a`(v0, v1, v2, v4) @signature `Lm/j;.a:(Lm/c;JJ)V` @kind direct;
  #L3f4278.  v0:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f427c.  call temp:= `readShort`(v0) @signature `Lm/e;.readShort:()S` @kind interface;
  #L3f4282.  v0:= temp;
  #L3f4284.  v1:= 8075I;
  #L3f4288.  v2:= "ID1ID2" @kind object;
  #L3f428c.  call `a`(v6, v2, v1, v0) @signature `Lm/j;.a:(Ljava/lang/String;II)V` @kind direct;
  #L3f4292.  v0:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f4296.  v1:= 8L;
  #L3f429a.  call `skip`(v0, v1) @signature `Lm/e;.skip:(J)V` @kind interface;
  #L3f42a0.  v0:= v7 ^> 2;
  #L3f42a4.  v0:= v0 ^& v8 @kind int;
  #L3f42a6.  if v0 != v8 then goto L3f4324;
  #L3f42aa.  v0:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f42ae.  v1:= 2L;
  #L3f42b2.  call `d`(v0, v1) @signature `Lm/e;.d:(J)V` @kind interface;
  #L3f42b8.  if v10 == 0 then goto L3f42da;
  #L3f42bc.  v0:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f42c0.  call temp:= `c`(v0) @signature `Lm/e;.c:()Lm/c;` @kind interface;
  #L3f42c6.  v1:= temp @kind object;
  #L3f42c8.  v2:= 0L;
  #L3f42cc.  v4:= 2L;
  #L3f42d0.  v0:= v17 @kind object;
  #L3f42d4.  call `a`(v0, v1, v2, v4) @signature `Lm/j;.a:(Lm/c;JJ)V` @kind direct;
  #L3f42da.  v0:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f42de.  call temp:= `c`(v0) @signature `Lm/e;.c:()Lm/c;` @kind interface;
  #L3f42e4.  v0:= temp @kind object;
  #L3f42e6.  call temp:= `h`(v0) @signature `Lm/c;.h:()S` @kind virtual;
  #L3f42ec.  v0:= temp;
  #L3f42ee.  v1:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f42f2.  v11:= (`long`) v0 @kind i2l;
  #L3f42f4.  call `d`(v1, v11) @signature `Lm/e;.d:(J)V` @kind interface;
  #L3f42fa.  if v10 == 0 then goto L3f431a;
  #L3f42fe.  v0:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f4302.  call temp:= `c`(v0) @signature `Lm/e;.c:()Lm/c;` @kind interface;
  #L3f4308.  v1:= temp @kind object;
  #L3f430a.  v2:= 0L;
  #L3f430e.  v0:= v17 @kind object;
  #L3f4312.  v4:= v11 @kind wide;
  #L3f4314.  call `a`(v0, v1, v2, v4) @signature `Lm/j;.a:(Lm/c;JJ)V` @kind direct;
  #L3f431a.  v0:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f431e.  call `skip`(v0, v11) @signature `Lm/e;.skip:(J)V` @kind interface;
  #L3f4324.  v0:= v7 ^> 3;
  #L3f4328.  v0:= v0 ^& v8 @kind int;
  #L3f432a.  v11:= -1L;
  #L3f432e.  v13:= 1L;
  #L3f4332.  if v0 != v8 then goto L3f4388;
  #L3f4336.  v0:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f433a.  call temp:= `a`(v0, v9) @signature `Lm/e;.a:(B)J` @kind interface;
  #L3f4340.  v15:= temp @kind wide;
  #L3f4342.  v0:= lcmp(v15, v11);
  #L3f4346.  if v0 == 0 then goto L3f437c;
  #L3f434a.  if v10 == 0 then goto L3f436c;
  #L3f434e.  v0:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f4352.  call temp:= `c`(v0) @signature `Lm/e;.c:()Lm/c;` @kind interface;
  #L3f4358.  v1:= temp @kind object;
  #L3f435a.  v2:= 0L;
  #L3f435e.  v4:= v15 + v13 @kind long;
  #L3f4362.  v0:= v17 @kind object;
  #L3f4366.  call `a`(v0, v1, v2, v4) @signature `Lm/j;.a:(Lm/c;JJ)V` @kind direct;
  #L3f436c.  v0:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f4370.  v1:= v15 + v13 @kind long;
  #L3f4374.  call `skip`(v0, v1) @signature `Lm/e;.skip:(J)V` @kind interface;
  #L3f437a.  goto L3f4388;
  #L3f437c.  v0:= new `java.io.EOFException`;
  #L3f4380.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3f4386.  throw v0;
  #L3f4388.  v0:= v7 ^> 4;
  #L3f438c.  v0:= v0 ^& v8 @kind int;
  #L3f438e.  if v0 != v8 then goto L3f43e2;
  #L3f4392.  v0:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f4396.  call temp:= `a`(v0, v9) @signature `Lm/e;.a:(B)J` @kind interface;
  #L3f439c.  v7:= temp @kind wide;
  #L3f439e.  v0:= lcmp(v7, v11);
  #L3f43a2.  if v0 == 0 then goto L3f43d6;
  #L3f43a6.  if v10 == 0 then goto L3f43c8;
  #L3f43aa.  v0:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f43ae.  call temp:= `c`(v0) @signature `Lm/e;.c:()Lm/c;` @kind interface;
  #L3f43b4.  v1:= temp @kind object;
  #L3f43b6.  v2:= 0L;
  #L3f43ba.  v4:= v7 + v13 @kind long;
  #L3f43be.  v0:= v17 @kind object;
  #L3f43c2.  call `a`(v0, v1, v2, v4) @signature `Lm/j;.a:(Lm/c;JJ)V` @kind direct;
  #L3f43c8.  v0:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f43cc.  v7:= v7 + v13 @kind long;
  #L3f43ce.  call `skip`(v0, v7) @signature `Lm/e;.skip:(J)V` @kind interface;
  #L3f43d4.  goto L3f43e2;
  #L3f43d6.  v0:= new `java.io.EOFException`;
  #L3f43da.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3f43e0.  throw v0;
  #L3f43e2.  if v10 == 0 then goto L3f4416;
  #L3f43e6.  v0:= v6.`m.j.c` @type ^`m.e` @kind object;
  #L3f43ea.  call temp:= `h`(v0) @signature `Lm/e;.h:()S` @kind interface;
  #L3f43f0.  v0:= temp;
  #L3f43f2.  v1:= v6.`m.j.f` @type ^`java.util.zip.CRC32` @kind object;
  #L3f43f6.  call temp:= `getValue`(v1) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L3f43fc.  v1:= temp @kind wide;
  #L3f43fe.  v2:= (`int`) v1 @kind l2i;
  #L3f4400.  v1:= (`short`) v2 @kind i2s;
  #L3f4402.  v2:= "FHCRC" @kind object;
  #L3f4406.  call `a`(v6, v2, v0, v1) @signature `Lm/j;.a:(Ljava/lang/String;II)V` @kind direct;
  #L3f440c.  v0:= v6.`m.j.f` @type ^`java.util.zip.CRC32` @kind object;
  #L3f4410.  call `reset`(v0) @signature `Ljava/util/zip/CRC32;.reset:()V` @kind virtual;
  #L3f4416.  return @kind void;
}
procedure `void` `a`(`m.j` v3 @kind this, `java.lang.String` v4 @kind object, `int` v5 , `int` v6 ) @signature `Lm/j;.a:(Ljava/lang/String;II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3f41a4.  if v6 != v5 then goto L3f41aa;
  #L3f41a8.  return @kind void;
  #L3f41aa.  v0:= new `java.io.IOException`;
  #L3f41ae.  v1:= 3I;
  #L3f41b0.  v1:= new `java.lang.Object`[v1];
  #L3f41b4.  v2:= 0I;
  #L3f41b6.  v1[v2]:= v4 @kind object;
  #L3f41ba.  v4:= 1I;
  #L3f41bc.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3f41c2.  v6:= temp @kind object;
  #L3f41c4.  v1[v4]:= v6 @kind object;
  #L3f41c8.  v4:= 2I;
  #L3f41ca.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3f41d0.  v5:= temp @kind object;
  #L3f41d2.  v1[v4]:= v5 @kind object;
  #L3f41d6.  v4:= "%s: actual 0x%08x != expected 0x%08x" @kind object;
  #L3f41da.  call temp:= `format`(v4, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3f41e0.  v4:= temp @kind object;
  #L3f41e2.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f41e8.  throw v0;
}
procedure `void` `a`(`m.j` v5 @kind this, `m.c` v6 @kind object, `long` v7 , `long` v9 ) @signature `Lm/j;.a:(Lm/c;JJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f4484.  v6:= v6.`m.c.b` @type ^`m.o` @kind object;
  #L3f4488.  v0:= v6.`m.o.c` @type ^`int`;
  #L3f448c.  v1:= v6.`m.o.b` @type ^`int`;
  #L3f4490.  v2:= v0 - v1 @kind int;
  #L3f4494.  v2:= (`long`) v2 @kind i2l;
  #L3f4496.  v4:= lcmp(v7, v2);
  #L3f449a.  if v4 < 0 then goto L3f44aa;
  #L3f449e.  v0:= v0 - v1 @kind int;
  #L3f44a0.  v0:= (`long`) v0 @kind i2l;
  #L3f44a2.  v7:= v7 - v0 @kind long;
  #L3f44a4.  v6:= v6.`m.o.f` @type ^`m.o` @kind object;
  #L3f44a8.  goto L3f4488;
  #L3f44aa.  v0:= 0L;
  #L3f44ae.  v2:= lcmp(v9, v0);
  #L3f44b2.  if v2 <= 0 then goto L3f44ec;
  #L3f44b6.  v2:= v6.`m.o.b` @type ^`int`;
  #L3f44ba.  v2:= (`long`) v2 @kind i2l;
  #L3f44bc.  v2:= v2 + v7 @kind long;
  #L3f44be.  v7:= (`int`) v2 @kind l2i;
  #L3f44c0.  v8:= v6.`m.o.c` @type ^`int`;
  #L3f44c4.  v8:= v8 - v7 @kind int;
  #L3f44c6.  v2:= (`long`) v8 @kind i2l;
  #L3f44c8.  call temp:= `min`(v2, v9) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3f44ce.  v2:= temp @kind wide;
  #L3f44d0.  v8:= (`int`) v2 @kind l2i;
  #L3f44d2.  v2:= v5.`m.j.f` @type ^`java.util.zip.CRC32` @kind object;
  #L3f44d6.  v3:= v6.`m.o.a` @type ^`byte`[] @kind object;
  #L3f44da.  call `update`(v2, v3, v7, v8) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L3f44e0.  v7:= (`long`) v8 @kind i2l;
  #L3f44e2.  v9:= v9 - v7 @kind long;
  #L3f44e4.  v6:= v6.`m.o.f` @type ^`m.o` @kind object;
  #L3f44e8.  v7:= v0 @kind wide;
  #L3f44ea.  goto L3f44ae;
  #L3f44ec.  return @kind void;
}
procedure `void` `b`(`m.j` v3 @kind this) @signature `Lm/j;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3f4428.  v0:= v3.`m.j.c` @type ^`m.e` @kind object;
  #L3f442c.  call temp:= `f`(v0) @signature `Lm/e;.f:()I` @kind interface;
  #L3f4432.  v0:= temp;
  #L3f4434.  v1:= v3.`m.j.f` @type ^`java.util.zip.CRC32` @kind object;
  #L3f4438.  call temp:= `getValue`(v1) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L3f443e.  v1:= temp @kind wide;
  #L3f4440.  v2:= (`int`) v1 @kind l2i;
  #L3f4442.  v1:= "CRC" @kind object;
  #L3f4446.  call `a`(v3, v1, v0, v2) @signature `Lm/j;.a:(Ljava/lang/String;II)V` @kind direct;
  #L3f444c.  v0:= v3.`m.j.c` @type ^`m.e` @kind object;
  #L3f4450.  call temp:= `f`(v0) @signature `Lm/e;.f:()I` @kind interface;
  #L3f4456.  v0:= temp;
  #L3f4458.  v1:= v3.`m.j.d` @type ^`java.util.zip.Inflater` @kind object;
  #L3f445c.  call temp:= `getBytesWritten`(v1) @signature `Ljava/util/zip/Inflater;.getBytesWritten:()J` @kind virtual;
  #L3f4462.  v1:= temp @kind wide;
  #L3f4464.  v2:= (`int`) v1 @kind l2i;
  #L3f4466.  v1:= "ISIZE" @kind object;
  #L3f446a.  call `a`(v3, v1, v0, v2) @signature `Lm/j;.a:(Ljava/lang/String;II)V` @kind direct;
  #L3f4470.  return @kind void;
}
procedure `long` `a`(`m.j` v11 @kind this, `m.c` v12 @kind object, `long` v13 ) @signature `Lm/j;.a:(Lm/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3f403c.  v0:= 0L;
  #L3f4040.  v2:= lcmp(v13, v0);
  #L3f4044.  if v2 < 0 then goto L3f40d2;
  #L3f4048.  if v2 != 0 then goto L3f404e;
  #L3f404c.  return v0 @kind wide;
  #L3f404e.  v0:= v11.`m.j.b` @type ^`int`;
  #L3f4052.  v1:= 1I;
  #L3f4054.  if v0 != 0 then goto L3f4062;
  #L3f4058.  call `a`(v11) @signature `Lm/j;.a:()V` @kind direct;
  #L3f405e.  v11.`m.j.b` @type ^`int` := v1;
  #L3f4062.  v0:= v11.`m.j.b` @type ^`int`;
  #L3f4066.  v2:= -1L;
  #L3f406a.  v4:= 2I;
  #L3f406c.  if v0 != v1 then goto L3f409a;
  #L3f4070.  v7:= v12.`m.c.c` @type ^`long` @kind wide;
  #L3f4074.  v0:= v11.`m.j.e` @type ^`m.k` @kind object;
  #L3f4078.  call temp:= `a`(v0, v12, v13) @signature `Lm/k;.a:(Lm/c;J)J` @kind virtual;
  #L3f407e.  v13:= temp @kind wide;
  #L3f4080.  v0:= lcmp(v13, v2);
  #L3f4084.  if v0 == 0 then goto L3f4096;
  #L3f4088.  v5:= v11 @kind object;
  #L3f408a.  v6:= v12 @kind object;
  #L3f408c.  v9:= v13 @kind wide;
  #L3f408e.  call `a`(v5, v6, v7, v9) @signature `Lm/j;.a:(Lm/c;JJ)V` @kind direct;
  #L3f4094.  return v13 @kind wide;
  #L3f4096.  v11.`m.j.b` @type ^`int` := v4;
  #L3f409a.  v12:= v11.`m.j.b` @type ^`int`;
  #L3f409e.  if v12 != v4 then goto L3f40d0;
  #L3f40a2.  call `b`(v11) @signature `Lm/j;.b:()V` @kind direct;
  #L3f40a8.  v12:= 3I;
  #L3f40aa.  v11.`m.j.b` @type ^`int` := v12;
  #L3f40ae.  v12:= v11.`m.j.c` @type ^`m.e` @kind object;
  #L3f40b2.  call temp:= `g`(v12) @signature `Lm/e;.g:()Z` @kind interface;
  #L3f40b8.  v12:= temp;
  #L3f40ba.  if v12 == 0 then goto L3f40c0;
  #L3f40be.  goto L3f40d0;
  #L3f40c0.  v12:= new `java.io.IOException`;
  #L3f40c4.  v13:= "gzip finished without exhausting source" @kind object;
  #L3f40c8.  call `<init>`(v12, v13) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f40ce.  throw v12;
  #L3f40d0.  return v2 @kind wide;
  #L3f40d2.  v12:= new `java.lang.IllegalArgumentException`;
  #L3f40d6.  v0:= new `java.lang.StringBuilder`;
  #L3f40da.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f40e0.  v1:= "byteCount < 0: " @kind object;
  #L3f40e4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f40ea.  call temp:= `append`(v0, v13) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f40f0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f40f6.  v13:= temp @kind object;
  #L3f40f8.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f40fe.  throw v12;
}
procedure `void` `close`(`m.j` v1 @kind this) @signature `Lm/j;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f41fc.  v0:= v1.`m.j.e` @type ^`m.k` @kind object;
  #L3f4200.  call `close`(v0) @signature `Lm/k;.close:()V` @kind virtual;
  #L3f4206.  return @kind void;
}
procedure `m.t` `d`(`m.j` v1 @kind this) @signature `Lm/j;.d:()Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4110.  v0:= v1.`m.j.c` @type ^`m.e` @kind object;
  #L3f4114.  call temp:= `d`(v0) @signature `Lm/s;.d:()Lm/t;` @kind interface;
  #L3f411a.  v0:= temp @kind object;
  #L3f411c.  return v0 @kind object;
}
