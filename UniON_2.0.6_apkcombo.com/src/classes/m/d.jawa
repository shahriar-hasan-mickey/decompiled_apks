record `m.d` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE extends `m.r` @kind interface, `java.nio.channels.WritableByteChannel` @kind interface {
}
procedure `m.d` `a`(`java.lang.String` v0 @kind object) @signature `Lm/d;.a:(Ljava/lang/String;)Lm/d;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `m.c` `c`() @signature `Lm/d;.c:()Lm/c;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `m.d` `e`(`long` v0 ) @signature `Lm/d;.e:(J)Lm/d;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `flush`() @signature `Lm/d;.flush:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `m.d` `j`() @signature `Lm/d;.j:()Lm/d;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `m.d` `write`(`byte`[] v0 @kind object) @signature `Lm/d;.write:([B)Lm/d;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `m.d` `write`(`byte`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lm/d;.write:([BII)Lm/d;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `m.d` `writeByte`(`int` v0 ) @signature `Lm/d;.writeByte:(I)Lm/d;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `m.d` `writeInt`(`int` v0 ) @signature `Lm/d;.writeInt:(I)Lm/d;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `m.d` `writeShort`(`int` v0 ) @signature `Lm/d;.writeShort:(I)Lm/d;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
