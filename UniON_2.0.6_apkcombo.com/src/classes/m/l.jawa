record `m.l` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.logging.Logger` `@@m.l.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lm/l;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f4d78.  v0:= constclass @type ^`m.l` @kind object;
  #L3f4d7c.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3f4d82.  v0:= temp @kind object;
  #L3f4d84.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L3f4d8a.  v0:= temp @kind object;
  #L3f4d8c.  `@@m.l.a` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L3f4d90.  return @kind void;
}
procedure `void` `<init>`(`m.l` v0 @kind this) @signature `Lm/l;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3f4da4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f4daa.  return @kind void;
}
procedure `m.d` `a`(`m.r` v1 @kind object) @signature `Lm/l;.a:(Lm/r;)Lm/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f4ba8.  v0:= new `m.m`;
  #L3f4bac.  call `<init>`(v0, v1) @signature `Lm/m;.<init>:(Lm/r;)V` @kind direct;
  #L3f4bb2.  return v0 @kind object;
}
procedure `m.e` `a`(`m.s` v1 @kind object) @signature `Lm/l;.a:(Lm/s;)Lm/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f4bc4.  v0:= new `m.n`;
  #L3f4bc8.  call `<init>`(v0, v1) @signature `Lm/n;.<init>:(Lm/s;)V` @kind direct;
  #L3f4bce.  return v0 @kind object;
}
procedure `m.r` `a`(`java.io.OutputStream` v1 @kind object) @signature `Lm/l;.a:(Ljava/io/OutputStream;)Lm/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f4be0.  v0:= new `m.t`;
  #L3f4be4.  call `<init>`(v0) @signature `Lm/t;.<init>:()V` @kind direct;
  #L3f4bea.  call temp:= `a`(v1, v0) @signature `Lm/l;.a:(Ljava/io/OutputStream;Lm/t;)Lm/r;` @kind static;
  #L3f4bf0.  v1:= temp @kind object;
  #L3f4bf2.  return v1 @kind object;
}
procedure `m.r` `a`(`java.io.OutputStream` v1 @kind object, `m.t` v2 @kind object) @signature `Lm/l;.a:(Ljava/io/OutputStream;Lm/t;)Lm/r;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3f4c04.  if v1 == 0 then goto L3f4c28;
  #L3f4c08.  if v2 == 0 then goto L3f4c18;
  #L3f4c0c.  v0:= new `m.l$a`;
  #L3f4c10.  call `<init>`(v0, v2, v1) @signature `Lm/l$a;.<init>:(Lm/t;Ljava/io/OutputStream;)V` @kind direct;
  #L3f4c16.  return v0 @kind object;
  #L3f4c18.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f4c1c.  v2:= "timeout == null" @kind object;
  #L3f4c20.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4c26.  throw v1;
  #L3f4c28.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f4c2c.  v2:= "out == null" @kind object;
  #L3f4c30.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4c36.  throw v1;
}
procedure `m.r` `a`(`java.net.Socket` v1 @kind object) @signature `Lm/l;.a:(Ljava/net/Socket;)Lm/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f4c48.  if v1 == 0 then goto L3f4c8a;
  #L3f4c4c.  call temp:= `getOutputStream`(v1) @signature `Ljava/net/Socket;.getOutputStream:()Ljava/io/OutputStream;` @kind virtual;
  #L3f4c52.  v0:= temp @kind object;
  #L3f4c54.  if v0 == 0 then goto L3f4c7a;
  #L3f4c58.  call temp:= `c`(v1) @signature `Lm/l;.c:(Ljava/net/Socket;)Lm/a;` @kind static;
  #L3f4c5e.  v0:= temp @kind object;
  #L3f4c60.  call temp:= `getOutputStream`(v1) @signature `Ljava/net/Socket;.getOutputStream:()Ljava/io/OutputStream;` @kind virtual;
  #L3f4c66.  v1:= temp @kind object;
  #L3f4c68.  call temp:= `a`(v1, v0) @signature `Lm/l;.a:(Ljava/io/OutputStream;Lm/t;)Lm/r;` @kind static;
  #L3f4c6e.  v1:= temp @kind object;
  #L3f4c70.  call temp:= `a`(v0, v1) @signature `Lm/a;.a:(Lm/r;)Lm/r;` @kind virtual;
  #L3f4c76.  v1:= temp @kind object;
  #L3f4c78.  return v1 @kind object;
  #L3f4c7a.  v1:= new `java.io.IOException`;
  #L3f4c7e.  v0:= "socket's output stream == null" @kind object;
  #L3f4c82.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4c88.  throw v1;
  #L3f4c8a.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f4c8e.  v0:= "socket == null" @kind object;
  #L3f4c92.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4c98.  throw v1;
}
procedure `m.s` `a`(`java.io.InputStream` v1 @kind object) @signature `Lm/l;.a:(Ljava/io/InputStream;)Lm/s;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f4cac.  v0:= new `m.t`;
  #L3f4cb0.  call `<init>`(v0) @signature `Lm/t;.<init>:()V` @kind direct;
  #L3f4cb6.  call temp:= `a`(v1, v0) @signature `Lm/l;.a:(Ljava/io/InputStream;Lm/t;)Lm/s;` @kind static;
  #L3f4cbc.  v1:= temp @kind object;
  #L3f4cbe.  return v1 @kind object;
}
procedure `m.s` `a`(`java.io.InputStream` v1 @kind object, `m.t` v2 @kind object) @signature `Lm/l;.a:(Ljava/io/InputStream;Lm/t;)Lm/s;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3f4cd0.  if v1 == 0 then goto L3f4cf4;
  #L3f4cd4.  if v2 == 0 then goto L3f4ce4;
  #L3f4cd8.  v0:= new `m.l$b`;
  #L3f4cdc.  call `<init>`(v0, v2, v1) @signature `Lm/l$b;.<init>:(Lm/t;Ljava/io/InputStream;)V` @kind direct;
  #L3f4ce2.  return v0 @kind object;
  #L3f4ce4.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f4ce8.  v2:= "timeout == null" @kind object;
  #L3f4cec.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4cf2.  throw v1;
  #L3f4cf4.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f4cf8.  v2:= "in == null" @kind object;
  #L3f4cfc.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4d02.  throw v1;
}
procedure `boolean` `a`(`java.lang.AssertionError` v1 @kind object) @signature `Lm/l;.a:(Ljava/lang/AssertionError;)Z` @AccessFlag STATIC {
    temp;
    v0;

  #L3f4b44.  call temp:= `getCause`(v1) @signature `Ljava/lang/AssertionError;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L3f4b4a.  v0:= temp @kind object;
  #L3f4b4c.  if v0 == 0 then goto L3f4b78;
  #L3f4b50.  call temp:= `getMessage`(v1) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L3f4b56.  v0:= temp @kind object;
  #L3f4b58.  if v0 == 0 then goto L3f4b78;
  #L3f4b5c.  call temp:= `getMessage`(v1) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L3f4b62.  v1:= temp @kind object;
  #L3f4b64.  v0:= "getsockname failed" @kind object;
  #L3f4b68.  call temp:= `contains`(v1, v0) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L3f4b6e.  v1:= temp;
  #L3f4b70.  if v1 == 0 then goto L3f4b78;
  #L3f4b74.  v1:= 1I;
  #L3f4b76.  goto L3f4b7a;
  #L3f4b78.  v1:= 0I;
  #L3f4b7a.  return v1;
}
procedure `m.s` `b`(`java.net.Socket` v1 @kind object) @signature `Lm/l;.b:(Ljava/net/Socket;)Lm/s;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f4d14.  if v1 == 0 then goto L3f4d56;
  #L3f4d18.  call temp:= `getInputStream`(v1) @signature `Ljava/net/Socket;.getInputStream:()Ljava/io/InputStream;` @kind virtual;
  #L3f4d1e.  v0:= temp @kind object;
  #L3f4d20.  if v0 == 0 then goto L3f4d46;
  #L3f4d24.  call temp:= `c`(v1) @signature `Lm/l;.c:(Ljava/net/Socket;)Lm/a;` @kind static;
  #L3f4d2a.  v0:= temp @kind object;
  #L3f4d2c.  call temp:= `getInputStream`(v1) @signature `Ljava/net/Socket;.getInputStream:()Ljava/io/InputStream;` @kind virtual;
  #L3f4d32.  v1:= temp @kind object;
  #L3f4d34.  call temp:= `a`(v1, v0) @signature `Lm/l;.a:(Ljava/io/InputStream;Lm/t;)Lm/s;` @kind static;
  #L3f4d3a.  v1:= temp @kind object;
  #L3f4d3c.  call temp:= `a`(v0, v1) @signature `Lm/a;.a:(Lm/s;)Lm/s;` @kind virtual;
  #L3f4d42.  v1:= temp @kind object;
  #L3f4d44.  return v1 @kind object;
  #L3f4d46.  v1:= new `java.io.IOException`;
  #L3f4d4a.  v0:= "socket's input stream == null" @kind object;
  #L3f4d4e.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4d54.  throw v1;
  #L3f4d56.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f4d5a.  v0:= "socket == null" @kind object;
  #L3f4d5e.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4d64.  throw v1;
}
procedure `m.a` `c`(`java.net.Socket` v1 @kind object) @signature `Lm/l;.c:(Ljava/net/Socket;)Lm/a;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3f4b8c.  v0:= new `m.l$c`;
  #L3f4b90.  call `<init>`(v0, v1) @signature `Lm/l$c;.<init>:(Ljava/net/Socket;)V` @kind direct;
  #L3f4b96.  return v0 @kind object;
}
