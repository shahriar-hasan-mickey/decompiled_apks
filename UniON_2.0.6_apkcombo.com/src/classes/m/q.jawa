record `m.q` @kind class @AccessFlag FINAL extends `m.f` @kind class {
  `byte`[][] `m.q.g` @AccessFlag FINAL_TRANSIENT;
  `int`[] `m.q.h` @AccessFlag FINAL_TRANSIENT;
}
procedure `void` `<init>`(`m.q` v7 @kind this, `m.c` v8 @kind object, `int` v9 ) @signature `Lm/q;.<init>:(Lm/c;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f61bc.  v0:= 0I;
  #L3f61be.  call `<init>`(v7, v0) @signature `Lm/f;.<init>:([B)V` @kind direct;
  #L3f61c4.  v1:= v8.`m.c.c` @type ^`long` @kind wide;
  #L3f61c8.  v5:= (`long`) v9 @kind i2l;
  #L3f61ca.  v3:= 0L;
  #L3f61ce.  call `a`(v1, v3, v5) @signature `Lm/u;.a:(JJJ)V` @kind static;
  #L3f61d4.  v0:= v8.`m.c.b` @type ^`m.o` @kind object;
  #L3f61d8.  v1:= 0I;
  #L3f61da.  v3:= v0 @kind object;
  #L3f61dc.  v0:= 0I;
  #L3f61de.  v2:= 0I;
  #L3f61e0.  if v0 >= v9 then goto L3f620e;
  #L3f61e4.  v4:= v3.`m.o.c` @type ^`int`;
  #L3f61e8.  v5:= v3.`m.o.b` @type ^`int`;
  #L3f61ec.  if v4 == v5 then goto L3f61fe;
  #L3f61f0.  v4:= v4 - v5 @kind int;
  #L3f61f2.  v0:= v0 + v4 @kind int;
  #L3f61f4.  v2:= v2 + 1;
  #L3f61f8.  v3:= v3.`m.o.f` @type ^`m.o` @kind object;
  #L3f61fc.  goto L3f61e0;
  #L3f61fe.  v8:= new `java.lang.AssertionError`;
  #L3f6202.  v9:= "s.limit == s.pos" @kind object;
  #L3f6206.  call `<init>`(v8, v9) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3f620c.  throw v8;
  #L3f620e.  v0:= new `byte`[][v2];
  #L3f6212.  v7.`m.q.g` @type ^`byte`[][] := v0 @kind object;
  #L3f6216.  v2:= v2 * 2;
  #L3f621a.  v0:= new `int`[v2];
  #L3f621e.  v7.`m.q.h` @type ^`int`[] := v0 @kind object;
  #L3f6222.  v8:= v8.`m.c.b` @type ^`m.o` @kind object;
  #L3f6226.  v0:= v8 @kind object;
  #L3f6228.  v8:= 0I;
  #L3f622a.  if v1 >= v9 then goto L3f6274;
  #L3f622e.  v2:= v7.`m.q.g` @type ^`byte`[][] @kind object;
  #L3f6232.  v3:= v0.`m.o.a` @type ^`byte`[] @kind object;
  #L3f6236.  v2[v8]:= v3 @kind object;
  #L3f623a.  v2:= v0.`m.o.c` @type ^`int`;
  #L3f623e.  v3:= v0.`m.o.b` @type ^`int`;
  #L3f6242.  v2:= v2 - v3 @kind int;
  #L3f6244.  v1:= v1 + v2 @kind int;
  #L3f6246.  if v1 <= v9 then goto L3f624c;
  #L3f624a.  v1:= v9;
  #L3f624c.  v2:= v7.`m.q.h` @type ^`int`[] @kind object;
  #L3f6250.  v2[v8]:= v1;
  #L3f6254.  v3:= v7.`m.q.g` @type ^`byte`[][] @kind object;
  #L3f6258.  v3:= length @variable v3;
  #L3f625a.  v3:= v3 + v8 @kind int;
  #L3f625c.  v4:= v0.`m.o.b` @type ^`int`;
  #L3f6260.  v2[v3]:= v4;
  #L3f6264.  v2:= 1I;
  #L3f6266.  v0.`m.o.d` @type ^`boolean` := v2 @kind boolean;
  #L3f626a.  v8:= v8 + 1;
  #L3f626e.  v0:= v0.`m.o.f` @type ^`m.o` @kind object;
  #L3f6272.  goto L3f622a;
  #L3f6274.  return @kind void;
}
procedure `int` `b`(`m.q` v3 @kind this, `int` v4 ) @signature `Lm/q;.b:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3f6020.  v0:= v3.`m.q.h` @type ^`int`[] @kind object;
  #L3f6024.  v1:= v3.`m.q.g` @type ^`byte`[][] @kind object;
  #L3f6028.  v1:= length @variable v1;
  #L3f602a.  v4:= v4 + 1;
  #L3f602e.  v2:= 0I;
  #L3f6030.  call temp:= `binarySearch`(v0, v2, v1, v4) @signature `Ljava/util/Arrays;.binarySearch:([IIII)I` @kind static;
  #L3f6036.  v4:= temp;
  #L3f6038.  if v4 < 0 then goto L3f603e;
  #L3f603c.  goto L3f6040;
  #L3f603e.  v4:= ~v4 @kind int;
  #L3f6040.  return v4;
}
procedure `m.f` `p`(`m.q` v2 @kind this) @signature `Lm/q;.p:()Lm/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f6198.  v0:= new `m.f`;
  #L3f619c.  call temp:= `n`(v2) @signature `Lm/q;.n:()[B` @kind virtual;
  #L3f61a2.  v1:= temp @kind object;
  #L3f61a4.  call `<init>`(v0, v1) @signature `Lm/f;.<init>:([B)V` @kind direct;
  #L3f61aa.  return v0 @kind object;
}
procedure `byte` `a`(`m.q` v7 @kind this, `int` v8 ) @signature `Lm/q;.a:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f5eec.  v0:= v7.`m.q.h` @type ^`int`[] @kind object;
  #L3f5ef0.  v1:= v7.`m.q.g` @type ^`byte`[][] @kind object;
  #L3f5ef4.  v1:= length @variable v1;
  #L3f5ef6.  v1:= v1 + -1;
  #L3f5efa.  v0:= v0[v1];
  #L3f5efe.  v1:= (`long`) v0 @kind i2l;
  #L3f5f00.  v3:= (`long`) v8 @kind i2l;
  #L3f5f02.  v5:= 1L;
  #L3f5f06.  call `a`(v1, v3, v5) @signature `Lm/u;.a:(JJJ)V` @kind static;
  #L3f5f0c.  call temp:= `b`(v7, v8) @signature `Lm/q;.b:(I)I` @kind direct;
  #L3f5f12.  v0:= temp;
  #L3f5f14.  if v0 != 0 then goto L3f5f1c;
  #L3f5f18.  v1:= 0I;
  #L3f5f1a.  goto L3f5f28;
  #L3f5f1c.  v1:= v7.`m.q.h` @type ^`int`[] @kind object;
  #L3f5f20.  v2:= v0 + -1;
  #L3f5f24.  v1:= v1[v2];
  #L3f5f28.  v2:= v7.`m.q.h` @type ^`int`[] @kind object;
  #L3f5f2c.  v3:= v7.`m.q.g` @type ^`byte`[][] @kind object;
  #L3f5f30.  v4:= length @variable v3;
  #L3f5f32.  v4:= v4 + v0 @kind int;
  #L3f5f34.  v2:= v2[v4];
  #L3f5f38.  v0:= v3[v0] @kind object;
  #L3f5f3c.  v8:= v8 - v1 @kind int;
  #L3f5f3e.  v8:= v8 + v2 @kind int;
  #L3f5f40.  v8:= v0[v8] @kind byte;
  #L3f5f44.  return v8;
}
procedure `m.f` `a`(`m.q` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lm/q;.a:(II)Lm/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6150.  call temp:= `p`(v1) @signature `Lm/q;.p:()Lm/f;` @kind direct;
  #L3f6156.  v0:= temp @kind object;
  #L3f6158.  call temp:= `a`(v0, v2, v3) @signature `Lm/f;.a:(II)Lm/f;` @kind virtual;
  #L3f615e.  v2:= temp @kind object;
  #L3f6160.  return v2 @kind object;
}
procedure `void` `a`(`m.q` v11 @kind this, `m.c` v12 @kind object) @signature `Lm/q;.a:(Lm/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3f6288.  v0:= v11.`m.q.g` @type ^`byte`[][] @kind object;
  #L3f628c.  v0:= length @variable v0;
  #L3f628e.  v1:= 0I;
  #L3f6290.  v2:= 0I;
  #L3f6292.  if v1 >= v0 then goto L3f62ee;
  #L3f6296.  v3:= v11.`m.q.h` @type ^`int`[] @kind object;
  #L3f629a.  v4:= v0 + v1 @kind int;
  #L3f629e.  v7:= v3[v4];
  #L3f62a2.  v3:= v3[v1];
  #L3f62a6.  v4:= new `m.o`;
  #L3f62aa.  v5:= v11.`m.q.g` @type ^`byte`[][] @kind object;
  #L3f62ae.  v6:= v5[v1] @kind object;
  #L3f62b2.  v5:= v7 + v3 @kind int;
  #L3f62b6.  v8:= v5 - v2 @kind int;
  #L3f62ba.  v9:= 1I;
  #L3f62bc.  v10:= 0I;
  #L3f62be.  v5:= v4 @kind object;
  #L3f62c0.  call `<init>`(v5, v6, v7, v8, v9, v10) @signature `Lm/o;.<init>:([BIIZZ)V` @kind direct;
  #L3f62c6.  v2:= v12.`m.c.b` @type ^`m.o` @kind object;
  #L3f62ca.  if v2 != 0 then goto L3f62dc;
  #L3f62ce.  v4.`m.o.g` @type ^`m.o` := v4 @kind object;
  #L3f62d2.  v4.`m.o.f` @type ^`m.o` := v4 @kind object;
  #L3f62d6.  v12.`m.c.b` @type ^`m.o` := v4 @kind object;
  #L3f62da.  goto L3f62e6;
  #L3f62dc.  v2:= v2.`m.o.g` @type ^`m.o` @kind object;
  #L3f62e0.  call temp:= `a`(v2, v4) @signature `Lm/o;.a:(Lm/o;)Lm/o;` @kind virtual;
  #L3f62e6.  v1:= v1 + 1;
  #L3f62ea.  v2:= v3;
  #L3f62ec.  goto L3f6292;
  #L3f62ee.  v0:= v12.`m.c.c` @type ^`long` @kind wide;
  #L3f62f2.  v2:= (`long`) v2 @kind i2l;
  #L3f62f4.  v0:= v0 + v2 @kind long;
  #L3f62f6.  v12.`m.c.c` @type ^`long` := v0 @kind wide;
  #L3f62fa.  return @kind void;
}
procedure `boolean` `a`(`m.q` v7 @kind this, `int` v8 , `m.f` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lm/q;.a:(ILm/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f5e54.  v0:= 0I;
  #L3f5e56.  if v8 < 0 then goto L3f5ed8;
  #L3f5e5a.  call temp:= `l`(v7) @signature `Lm/q;.l:()I` @kind virtual;
  #L3f5e60.  v1:= temp;
  #L3f5e62.  v1:= v1 - v11 @kind int;
  #L3f5e64.  if v8 <= v1 then goto L3f5e6a;
  #L3f5e68.  goto L3f5ed8;
  #L3f5e6a.  call temp:= `b`(v7, v8) @signature `Lm/q;.b:(I)I` @kind direct;
  #L3f5e70.  v1:= temp;
  #L3f5e72.  if v11 <= 0 then goto L3f5ed4;
  #L3f5e76.  if v1 != 0 then goto L3f5e7e;
  #L3f5e7a.  v2:= 0I;
  #L3f5e7c.  goto L3f5e8a;
  #L3f5e7e.  v2:= v7.`m.q.h` @type ^`int`[] @kind object;
  #L3f5e82.  v3:= v1 + -1;
  #L3f5e86.  v2:= v2[v3];
  #L3f5e8a.  v3:= v7.`m.q.h` @type ^`int`[] @kind object;
  #L3f5e8e.  v3:= v3[v1];
  #L3f5e92.  v3:= v3 - v2 @kind int;
  #L3f5e94.  v3:= v3 + v2 @kind int;
  #L3f5e96.  v3:= v3 - v8 @kind int;
  #L3f5e98.  call temp:= `min`(v11, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3f5e9e.  v3:= temp;
  #L3f5ea0.  v4:= v7.`m.q.h` @type ^`int`[] @kind object;
  #L3f5ea4.  v5:= v7.`m.q.g` @type ^`byte`[][] @kind object;
  #L3f5ea8.  v6:= length @variable v5;
  #L3f5eaa.  v6:= v6 + v1 @kind int;
  #L3f5eac.  v4:= v4[v6];
  #L3f5eb0.  v2:= v8 - v2 @kind int;
  #L3f5eb4.  v2:= v2 + v4 @kind int;
  #L3f5eb6.  v4:= v5[v1] @kind object;
  #L3f5eba.  call temp:= `a`(v9, v10, v4, v2, v3) @signature `Lm/f;.a:(I[BII)Z` @kind virtual;
  #L3f5ec0.  v2:= temp;
  #L3f5ec2.  if v2 != 0 then goto L3f5ec8;
  #L3f5ec6.  return v0;
  #L3f5ec8.  v8:= v8 + v3 @kind int;
  #L3f5eca.  v10:= v10 + v3 @kind int;
  #L3f5ecc.  v11:= v11 - v3 @kind int;
  #L3f5ece.  v1:= v1 + 1;
  #L3f5ed2.  goto L3f5e72;
  #L3f5ed4.  v8:= 1I;
  #L3f5ed6.  return v8;
  #L3f5ed8.  return v0;
}
procedure `boolean` `a`(`m.q` v7 @kind this, `int` v8 , `byte`[] v9 @kind object, `int` v10 , `int` v11 ) @signature `Lm/q;.a:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f5db0.  v0:= 0I;
  #L3f5db2.  if v8 < 0 then goto L3f5e40;
  #L3f5db6.  call temp:= `l`(v7) @signature `Lm/q;.l:()I` @kind virtual;
  #L3f5dbc.  v1:= temp;
  #L3f5dbe.  v1:= v1 - v11 @kind int;
  #L3f5dc0.  if v8 > v1 then goto L3f5e40;
  #L3f5dc4.  if v10 < 0 then goto L3f5e40;
  #L3f5dc8.  v1:= length @variable v9;
  #L3f5dca.  v1:= v1 - v11 @kind int;
  #L3f5dcc.  if v10 <= v1 then goto L3f5dd2;
  #L3f5dd0.  goto L3f5e40;
  #L3f5dd2.  call temp:= `b`(v7, v8) @signature `Lm/q;.b:(I)I` @kind direct;
  #L3f5dd8.  v1:= temp;
  #L3f5dda.  if v11 <= 0 then goto L3f5e3c;
  #L3f5dde.  if v1 != 0 then goto L3f5de6;
  #L3f5de2.  v2:= 0I;
  #L3f5de4.  goto L3f5df2;
  #L3f5de6.  v2:= v7.`m.q.h` @type ^`int`[] @kind object;
  #L3f5dea.  v3:= v1 + -1;
  #L3f5dee.  v2:= v2[v3];
  #L3f5df2.  v3:= v7.`m.q.h` @type ^`int`[] @kind object;
  #L3f5df6.  v3:= v3[v1];
  #L3f5dfa.  v3:= v3 - v2 @kind int;
  #L3f5dfc.  v3:= v3 + v2 @kind int;
  #L3f5dfe.  v3:= v3 - v8 @kind int;
  #L3f5e00.  call temp:= `min`(v11, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3f5e06.  v3:= temp;
  #L3f5e08.  v4:= v7.`m.q.h` @type ^`int`[] @kind object;
  #L3f5e0c.  v5:= v7.`m.q.g` @type ^`byte`[][] @kind object;
  #L3f5e10.  v6:= length @variable v5;
  #L3f5e12.  v6:= v6 + v1 @kind int;
  #L3f5e14.  v4:= v4[v6];
  #L3f5e18.  v2:= v8 - v2 @kind int;
  #L3f5e1c.  v2:= v2 + v4 @kind int;
  #L3f5e1e.  v4:= v5[v1] @kind object;
  #L3f5e22.  call temp:= `a`(v4, v2, v9, v10, v3) @signature `Lm/u;.a:([BI[BII)Z` @kind static;
  #L3f5e28.  v2:= temp;
  #L3f5e2a.  if v2 != 0 then goto L3f5e30;
  #L3f5e2e.  return v0;
  #L3f5e30.  v8:= v8 + v3 @kind int;
  #L3f5e32.  v10:= v10 + v3 @kind int;
  #L3f5e34.  v11:= v11 - v3 @kind int;
  #L3f5e36.  v1:= v1 + 1;
  #L3f5e3a.  goto L3f5dda;
  #L3f5e3c.  v8:= 1I;
  #L3f5e3e.  return v8;
  #L3f5e40.  return v0;
}
procedure `java.lang.String` `b`(`m.q` v1 @kind this) @signature `Lm/q;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6078.  call temp:= `p`(v1) @signature `Lm/q;.p:()Lm/f;` @kind direct;
  #L3f607e.  v0:= temp @kind object;
  #L3f6080.  call temp:= `b`(v0) @signature `Lm/f;.b:()Ljava/lang/String;` @kind virtual;
  #L3f6086.  v0:= temp @kind object;
  #L3f6088.  return v0 @kind object;
}
procedure `java.lang.String` `e`(`m.q` v1 @kind this) @signature `Lm/q;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f609c.  call temp:= `p`(v1) @signature `Lm/q;.p:()Lm/f;` @kind direct;
  #L3f60a2.  v0:= temp @kind object;
  #L3f60a4.  call temp:= `e`(v0) @signature `Lm/f;.e:()Ljava/lang/String;` @kind virtual;
  #L3f60aa.  v0:= temp @kind object;
  #L3f60ac.  return v0 @kind object;
}
procedure `boolean` `equals`(`m.q` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lm/q;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f5d5c.  v0:= 1I;
  #L3f5d5e.  if v5 != v4 then goto L3f5d64;
  #L3f5d62.  return v0;
  #L3f5d64.  v1:= instanceof @variable v5 @type ^`m.f` @kind boolean;
  #L3f5d68.  v2:= 0I;
  #L3f5d6a.  if v1 == 0 then goto L3f5d9c;
  #L3f5d6e.  v5:= (`m.f`) v5 @kind object;
  #L3f5d72.  call temp:= `l`(v5) @signature `Lm/f;.l:()I` @kind virtual;
  #L3f5d78.  v1:= temp;
  #L3f5d7a.  call temp:= `l`(v4) @signature `Lm/q;.l:()I` @kind virtual;
  #L3f5d80.  v3:= temp;
  #L3f5d82.  if v1 != v3 then goto L3f5d9c;
  #L3f5d86.  call temp:= `l`(v4) @signature `Lm/q;.l:()I` @kind virtual;
  #L3f5d8c.  v1:= temp;
  #L3f5d8e.  call temp:= `a`(v4, v2, v5, v2, v1) @signature `Lm/q;.a:(ILm/f;II)Z` @kind virtual;
  #L3f5d94.  v5:= temp;
  #L3f5d96.  if v5 == 0 then goto L3f5d9c;
  #L3f5d9a.  goto L3f5d9e;
  #L3f5d9c.  v0:= 0I;
  #L3f5d9e.  return v0;
}
procedure `m.f` `h`(`m.q` v1 @kind this) @signature `Lm/q;.h:()Lm/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6108.  call temp:= `p`(v1) @signature `Lm/q;.p:()Lm/f;` @kind direct;
  #L3f610e.  v0:= temp @kind object;
  #L3f6110.  call temp:= `h`(v0) @signature `Lm/f;.h:()Lm/f;` @kind virtual;
  #L3f6116.  v0:= temp @kind object;
  #L3f6118.  return v0 @kind object;
}
procedure `int` `hashCode`(`m.q` v8 @kind this) @signature `Lm/q;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f5fb4.  v0:= v8.`m.f.c` @type ^`int`;
  #L3f5fb8.  if v0 == 0 then goto L3f5fbe;
  #L3f5fbc.  return v0;
  #L3f5fbe.  v0:= v8.`m.q.g` @type ^`byte`[][] @kind object;
  #L3f5fc2.  v0:= length @variable v0;
  #L3f5fc4.  v1:= 0I;
  #L3f5fc6.  v2:= 1I;
  #L3f5fc8.  v3:= 0I;
  #L3f5fca.  if v1 >= v0 then goto L3f6008;
  #L3f5fce.  v4:= v8.`m.q.g` @type ^`byte`[][] @kind object;
  #L3f5fd2.  v4:= v4[v1] @kind object;
  #L3f5fd6.  v5:= v8.`m.q.h` @type ^`int`[] @kind object;
  #L3f5fda.  v6:= v0 + v1 @kind int;
  #L3f5fde.  v6:= v5[v6];
  #L3f5fe2.  v5:= v5[v1];
  #L3f5fe6.  v3:= v5 - v3 @kind int;
  #L3f5fea.  v3:= v3 + v6 @kind int;
  #L3f5fec.  if v6 >= v3 then goto L3f6000;
  #L3f5ff0.  v2:= v2 * 31;
  #L3f5ff4.  v7:= v4[v6] @kind byte;
  #L3f5ff8.  v2:= v2 + v7 @kind int;
  #L3f5ffa.  v6:= v6 + 1;
  #L3f5ffe.  goto L3f5fec;
  #L3f6000.  v1:= v1 + 1;
  #L3f6004.  v3:= v5;
  #L3f6006.  goto L3f5fca;
  #L3f6008.  v8.`m.f.c` @type ^`int` := v2;
  #L3f600c.  return v2;
}
procedure `m.f` `k`(`m.q` v1 @kind this) @signature `Lm/q;.k:()Lm/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f612c.  call temp:= `p`(v1) @signature `Lm/q;.p:()Lm/f;` @kind direct;
  #L3f6132.  v0:= temp @kind object;
  #L3f6134.  call temp:= `k`(v0) @signature `Lm/f;.k:()Lm/f;` @kind virtual;
  #L3f613a.  v0:= temp @kind object;
  #L3f613c.  return v0 @kind object;
}
procedure `int` `l`(`m.q` v2 @kind this) @signature `Lm/q;.l:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f6054.  v0:= v2.`m.q.h` @type ^`int`[] @kind object;
  #L3f6058.  v1:= v2.`m.q.g` @type ^`byte`[][] @kind object;
  #L3f605c.  v1:= length @variable v1;
  #L3f605e.  v1:= v1 + -1;
  #L3f6062.  v0:= v0[v1];
  #L3f6066.  return v0;
}
procedure `m.f` `m`(`m.q` v1 @kind this) @signature `Lm/q;.m:()Lm/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6174.  call temp:= `p`(v1) @signature `Lm/q;.p:()Lm/f;` @kind direct;
  #L3f617a.  v0:= temp @kind object;
  #L3f617c.  call temp:= `m`(v0) @signature `Lm/f;.m:()Lm/f;` @kind virtual;
  #L3f6182.  v0:= temp @kind object;
  #L3f6184.  return v0 @kind object;
}
procedure `byte`[] `n`(`m.q` v8 @kind this) @signature `Lm/q;.n:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f5f58.  v0:= v8.`m.q.h` @type ^`int`[] @kind object;
  #L3f5f5c.  v1:= v8.`m.q.g` @type ^`byte`[][] @kind object;
  #L3f5f60.  v2:= length @variable v1;
  #L3f5f62.  v2:= v2 + -1;
  #L3f5f66.  v0:= v0[v2];
  #L3f5f6a.  v0:= new `byte`[v0];
  #L3f5f6e.  v1:= length @variable v1;
  #L3f5f70.  v2:= 0I;
  #L3f5f72.  v3:= 0I;
  #L3f5f74.  if v2 >= v1 then goto L3f5fa2;
  #L3f5f78.  v4:= v8.`m.q.h` @type ^`int`[] @kind object;
  #L3f5f7c.  v5:= v1 + v2 @kind int;
  #L3f5f80.  v5:= v4[v5];
  #L3f5f84.  v4:= v4[v2];
  #L3f5f88.  v6:= v8.`m.q.g` @type ^`byte`[][] @kind object;
  #L3f5f8c.  v6:= v6[v2] @kind object;
  #L3f5f90.  v7:= v4 - v3 @kind int;
  #L3f5f94.  call `arraycopy`(v6, v5, v0, v3, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f5f9a.  v2:= v2 + 1;
  #L3f5f9e.  v3:= v4;
  #L3f5fa0.  goto L3f5f74;
  #L3f5fa2.  return v0 @kind object;
}
procedure `java.lang.String` `o`(`m.q` v1 @kind this) @signature `Lm/q;.o:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f60e4.  call temp:= `p`(v1) @signature `Lm/q;.p:()Lm/f;` @kind direct;
  #L3f60ea.  v0:= temp @kind object;
  #L3f60ec.  call temp:= `o`(v0) @signature `Lm/f;.o:()Ljava/lang/String;` @kind virtual;
  #L3f60f2.  v0:= temp @kind object;
  #L3f60f4.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`m.q` v1 @kind this) @signature `Lm/q;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f60c0.  call temp:= `p`(v1) @signature `Lm/q;.p:()Lm/f;` @kind direct;
  #L3f60c6.  v0:= temp @kind object;
  #L3f60c8.  call temp:= `toString`(v0) @signature `Lm/f;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f60ce.  v0:= temp @kind object;
  #L3f60d0.  return v0 @kind object;
}
