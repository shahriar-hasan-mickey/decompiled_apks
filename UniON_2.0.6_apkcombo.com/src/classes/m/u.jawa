record `m.u` @kind class @AccessFlag FINAL {
}
global `java.nio.charset.Charset` `@@m.u.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lm/u;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f6864.  v0:= "UTF-8" @kind object;
  #L3f6868.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L3f686e.  v0:= temp @kind object;
  #L3f6870.  `@@m.u.a` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L3f6874.  return @kind void;
}
procedure `int` `a`(`int` v2 ) @signature `Lm/u;.a:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f67f0.  v0:= -16777216I;
  #L3f67f4.  v0:= v0 ^& v2 @kind int;
  #L3f67f6.  v0:= v0 ^>> 24;
  #L3f67fa.  v1:= 16711680I;
  #L3f67fe.  v1:= v1 ^& v2 @kind int;
  #L3f6800.  v1:= v1 ^>> 8;
  #L3f6804.  v0:= v0 ^| v1 @kind int;
  #L3f6806.  v1:= 65280I;
  #L3f680c.  v1:= v1 ^& v2 @kind int;
  #L3f680e.  v1:= v1 ^< 8;
  #L3f6812.  v0:= v0 ^| v1 @kind int;
  #L3f6814.  v2:= v2 ^& 255;
  #L3f6818.  v2:= v2 ^< 24;
  #L3f681c.  v2:= v2 ^| v0 @kind int;
  #L3f681e.  return v2;
}
procedure `short` `a`(`short` v1 ) @signature `Lm/u;.a:(S)S` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f6830.  v0:= 65535I;
  #L3f6836.  v1:= v1 ^& v0 @kind int;
  #L3f6838.  v0:= 65280I;
  #L3f683e.  v0:= v0 ^& v1 @kind int;
  #L3f6840.  v0:= v0 ^>> 8;
  #L3f6844.  v1:= v1 ^& 255;
  #L3f6848.  v1:= v1 ^< 8;
  #L3f684c.  v1:= v1 ^| v0 @kind int;
  #L3f684e.  v1:= (`short`) v1 @kind i2s;
  #L3f6850.  return v1;
}
procedure `void` `a`(`long` v5 , `long` v7 , `long` v9 ) @signature `Lm/u;.a:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f6888.  v0:= v7 ^| v9 @kind long;
  #L3f688c.  v2:= 0L;
  #L3f6890.  v4:= lcmp(v0, v2);
  #L3f6894.  if v4 < 0 then goto L3f68ae;
  #L3f6898.  v0:= lcmp(v7, v5);
  #L3f689c.  if v0 > 0 then goto L3f68ae;
  #L3f68a0.  v0:= v5 - v7 @kind long;
  #L3f68a4.  v2:= lcmp(v0, v9);
  #L3f68a8.  if v2 < 0 then goto L3f68ae;
  #L3f68ac.  return @kind void;
  #L3f68ae.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L3f68b2.  v1:= 3I;
  #L3f68b4.  v1:= new `java.lang.Object`[v1];
  #L3f68b8.  v2:= 0I;
  #L3f68ba.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3f68c0.  v5:= temp @kind object;
  #L3f68c2.  v1[v2]:= v5 @kind object;
  #L3f68c6.  v5:= 1I;
  #L3f68c8.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3f68ce.  v6:= temp @kind object;
  #L3f68d0.  v1[v5]:= v6 @kind object;
  #L3f68d4.  v5:= 2I;
  #L3f68d6.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3f68dc.  v6:= temp @kind object;
  #L3f68de.  v1[v5]:= v6 @kind object;
  #L3f68e2.  v5:= "size=%s offset=%s byteCount=%s" @kind object;
  #L3f68e6.  call temp:= `format`(v5, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3f68ec.  v5:= temp @kind object;
  #L3f68ee.  call `<init>`(v0, v5) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f68f4.  throw v0;
}
procedure `void` `a`(`java.lang.Throwable` v0 @kind object) @signature `Lm/u;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f6908.  call `b`(v0) @signature `Lm/u;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L3f690e.  v0:= 0I;
  #L3f6910.  throw v0;
}
procedure `boolean` `a`(`byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lm/u;.a:([BI[BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f67b8.  v0:= 0I;
  #L3f67ba.  v1:= 0I;
  #L3f67bc.  if v1 >= v8 then goto L3f67dc;
  #L3f67c0.  v2:= v1 + v5 @kind int;
  #L3f67c4.  v2:= v4[v2] @kind byte;
  #L3f67c8.  v3:= v1 + v7 @kind int;
  #L3f67cc.  v3:= v6[v3] @kind byte;
  #L3f67d0.  if v2 == v3 then goto L3f67d6;
  #L3f67d4.  return v0;
  #L3f67d6.  v1:= v1 + 1;
  #L3f67da.  goto L3f67bc;
  #L3f67dc.  v4:= 1I;
  #L3f67de.  return v4;
}
procedure `void` `b`(`java.lang.Throwable` v0 @kind object) @signature `Lm/u;.b:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L3f6924.  throw v0;
}
