record `m.n` @kind class @AccessFlag FINAL extends `m.e` @kind interface {
  `m.c` `m.n.b` @AccessFlag PUBLIC_FINAL;
  `m.s` `m.n.c` @AccessFlag PUBLIC_FINAL;
  `boolean` `m.n.d` @AccessFlag ;
}
procedure `void` `<init>`(`m.n` v1 @kind this, `m.s` v2 @kind object) @signature `Lm/n;.<init>:(Lm/s;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3f5aa0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f5aa6.  v0:= new `m.c`;
  #L3f5aaa.  call `<init>`(v0) @signature `Lm/c;.<init>:()V` @kind direct;
  #L3f5ab0.  v1.`m.n.b` @type ^`m.c` := v0 @kind object;
  #L3f5ab4.  if v2 == 0 then goto L3f5abe;
  #L3f5ab8.  v1.`m.n.c` @type ^`m.s` := v2 @kind object;
  #L3f5abc.  return @kind void;
  #L3f5abe.  v2:= new `java.lang.NullPointerException`;
  #L3f5ac2.  v0:= "source == null" @kind object;
  #L3f5ac6.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f5acc.  throw v2;
}
procedure `long` `a`(`m.n` v6 @kind this, `byte` v7 ) @signature `Lm/n;.a:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f56dc.  v2:= 0L;
  #L3f56e0.  v4:= 9223372036854775807L;
  #L3f56ea.  v0:= v6 @kind object;
  #L3f56ec.  v1:= v7;
  #L3f56ee.  call temp:= `a`(v0, v1, v2, v4) @signature `Lm/n;.a:(BJJ)J` @kind virtual;
  #L3f56f4.  v0:= temp @kind wide;
  #L3f56f6.  return v0 @kind wide;
}
procedure `long` `a`(`m.n` v9 @kind this, `byte` v10 , `long` v11 , `long` v13 ) @signature `Lm/n;.a:(BJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f5708.  v0:= v9.`m.n.d` @type ^`boolean` @kind boolean;
  #L3f570c.  if v0 != 0 then goto L3f57bc;
  #L3f5710.  v0:= 0L;
  #L3f5714.  v2:= lcmp(v11, v0);
  #L3f5718.  if v2 < 0 then goto L3f5782;
  #L3f571c.  v0:= lcmp(v13, v11);
  #L3f5720.  if v0 < 0 then goto L3f5782;
  #L3f5724.  v7:= -1L;
  #L3f5728.  v0:= lcmp(v11, v13);
  #L3f572c.  if v0 >= 0 then goto L3f5780;
  #L3f5730.  v1:= v9.`m.n.b` @type ^`m.c` @kind object;
  #L3f5734.  v2:= v10;
  #L3f5736.  v3:= v11 @kind wide;
  #L3f5738.  v5:= v13 @kind wide;
  #L3f573a.  call temp:= `a`(v1, v2, v3, v5) @signature `Lm/c;.a:(BJJ)J` @kind virtual;
  #L3f5740.  v0:= temp @kind wide;
  #L3f5742.  v2:= lcmp(v0, v7);
  #L3f5746.  if v2 == 0 then goto L3f574c;
  #L3f574a.  return v0 @kind wide;
  #L3f574c.  v0:= v9.`m.n.b` @type ^`m.c` @kind object;
  #L3f5750.  v1:= v0.`m.c.c` @type ^`long` @kind wide;
  #L3f5754.  v3:= lcmp(v1, v13);
  #L3f5758.  if v3 >= 0 then goto L3f5780;
  #L3f575c.  v3:= v9.`m.n.c` @type ^`m.s` @kind object;
  #L3f5760.  v4:= 8192L;
  #L3f5764.  call temp:= `a`(v3, v0, v4) @signature `Lm/s;.a:(Lm/c;J)J` @kind interface;
  #L3f576a.  v3:= temp @kind wide;
  #L3f576c.  v0:= lcmp(v3, v7);
  #L3f5770.  if v0 != 0 then goto L3f5776;
  #L3f5774.  goto L3f5780;
  #L3f5776.  call temp:= `max`(v11, v1) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3f577c.  v11:= temp @kind wide;
  #L3f577e.  goto L3f5724;
  #L3f5780.  return v7 @kind wide;
  #L3f5782.  v10:= new `java.lang.IllegalArgumentException`;
  #L3f5786.  v0:= 2I;
  #L3f5788.  v0:= new `java.lang.Object`[v0];
  #L3f578c.  v1:= 0I;
  #L3f578e.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3f5794.  v11:= temp @kind object;
  #L3f5796.  v0[v1]:= v11 @kind object;
  #L3f579a.  v11:= 1I;
  #L3f579c.  call temp:= `valueOf`(v13) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3f57a2.  v12:= temp @kind object;
  #L3f57a4.  v0[v11]:= v12 @kind object;
  #L3f57a8.  v11:= "fromIndex=%s toIndex=%s" @kind object;
  #L3f57ac.  call temp:= `format`(v11, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3f57b2.  v11:= temp @kind object;
  #L3f57b4.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f57ba.  throw v10;
  #L3f57bc.  v10:= new `java.lang.IllegalStateException`;
  #L3f57c0.  v11:= "closed" @kind object;
  #L3f57c4.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f57ca.  throw v10;
}
procedure `long` `a`(`m.n` v6 @kind this, `m.c` v7 @kind object, `long` v8 ) @signature `Lm/n;.a:(Lm/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f57dc.  if v7 == 0 then goto L3f587e;
  #L3f57e0.  v0:= 0L;
  #L3f57e4.  v2:= lcmp(v8, v0);
  #L3f57e8.  if v2 < 0 then goto L3f5850;
  #L3f57ec.  v2:= v6.`m.n.d` @type ^`boolean` @kind boolean;
  #L3f57f0.  if v2 != 0 then goto L3f5840;
  #L3f57f4.  v2:= v6.`m.n.b` @type ^`m.c` @kind object;
  #L3f57f8.  v3:= v2.`m.c.c` @type ^`long` @kind wide;
  #L3f57fc.  v5:= lcmp(v3, v0);
  #L3f5800.  if v5 != 0 then goto L3f5822;
  #L3f5804.  v0:= v6.`m.n.c` @type ^`m.s` @kind object;
  #L3f5808.  v3:= 8192L;
  #L3f580c.  call temp:= `a`(v0, v2, v3) @signature `Lm/s;.a:(Lm/c;J)J` @kind interface;
  #L3f5812.  v0:= temp @kind wide;
  #L3f5814.  v2:= -1L;
  #L3f5818.  v4:= lcmp(v0, v2);
  #L3f581c.  if v4 != 0 then goto L3f5822;
  #L3f5820.  return v2 @kind wide;
  #L3f5822.  v0:= v6.`m.n.b` @type ^`m.c` @kind object;
  #L3f5826.  v0:= v0.`m.c.c` @type ^`long` @kind wide;
  #L3f582a.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3f5830.  v8:= temp @kind wide;
  #L3f5832.  v0:= v6.`m.n.b` @type ^`m.c` @kind object;
  #L3f5836.  call temp:= `a`(v0, v7, v8) @signature `Lm/c;.a:(Lm/c;J)J` @kind virtual;
  #L3f583c.  v7:= temp @kind wide;
  #L3f583e.  return v7 @kind wide;
  #L3f5840.  v7:= new `java.lang.IllegalStateException`;
  #L3f5844.  v8:= "closed" @kind object;
  #L3f5848.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f584e.  throw v7;
  #L3f5850.  v7:= new `java.lang.IllegalArgumentException`;
  #L3f5854.  v0:= new `java.lang.StringBuilder`;
  #L3f5858.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f585e.  v1:= "byteCount < 0: " @kind object;
  #L3f5862.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f5868.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f586e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f5874.  v8:= temp @kind object;
  #L3f5876.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f587c.  throw v7;
  #L3f587e.  v7:= new `java.lang.IllegalArgumentException`;
  #L3f5882.  v8:= "sink == null" @kind object;
  #L3f5886.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f588c.  throw v7;
}
procedure `long` `a`(`m.n` v9 @kind this, `m.r` v10 @kind object) @signature `Lm/n;.a:(Lm/r;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f58a0.  if v10 == 0 then goto L3f591e;
  #L3f58a4.  v0:= 0L;
  #L3f58a8.  v2:= v0 @kind wide;
  #L3f58aa.  v4:= v9.`m.n.c` @type ^`m.s` @kind object;
  #L3f58ae.  v5:= v9.`m.n.b` @type ^`m.c` @kind object;
  #L3f58b2.  v6:= 8192L;
  #L3f58b6.  call temp:= `a`(v4, v5, v6) @signature `Lm/s;.a:(Lm/c;J)J` @kind interface;
  #L3f58bc.  v4:= temp @kind wide;
  #L3f58be.  v6:= -1L;
  #L3f58c2.  v8:= lcmp(v4, v6);
  #L3f58c6.  v4:= v9.`m.n.b` @type ^`m.c` @kind object;
  #L3f58ca.  if v8 == 0 then goto L3f58ec;
  #L3f58ce.  call temp:= `r`(v4) @signature `Lm/c;.r:()J` @kind virtual;
  #L3f58d4.  v4:= temp @kind wide;
  #L3f58d6.  v6:= lcmp(v4, v0);
  #L3f58da.  if v6 <= 0 then goto L3f58aa;
  #L3f58de.  v2:= v2 + v4 @kind long;
  #L3f58e0.  v6:= v9.`m.n.b` @type ^`m.c` @kind object;
  #L3f58e4.  call `b`(v10, v6, v4) @signature `Lm/r;.b:(Lm/c;J)V` @kind interface;
  #L3f58ea.  goto L3f58aa;
  #L3f58ec.  call temp:= `v`(v4) @signature `Lm/c;.v:()J` @kind virtual;
  #L3f58f2.  v4:= temp @kind wide;
  #L3f58f4.  v6:= lcmp(v4, v0);
  #L3f58f8.  if v6 <= 0 then goto L3f591c;
  #L3f58fc.  v0:= v9.`m.n.b` @type ^`m.c` @kind object;
  #L3f5900.  call temp:= `v`(v0) @signature `Lm/c;.v:()J` @kind virtual;
  #L3f5906.  v0:= temp @kind wide;
  #L3f5908.  v2:= v2 + v0 @kind long;
  #L3f590a.  v0:= v9.`m.n.b` @type ^`m.c` @kind object;
  #L3f590e.  call temp:= `v`(v0) @signature `Lm/c;.v:()J` @kind virtual;
  #L3f5914.  v4:= temp @kind wide;
  #L3f5916.  call `b`(v10, v0, v4) @signature `Lm/r;.b:(Lm/c;J)V` @kind interface;
  #L3f591c.  return v2 @kind wide;
  #L3f591e.  v10:= new `java.lang.IllegalArgumentException`;
  #L3f5922.  v0:= "sink == null" @kind object;
  #L3f5926.  call `<init>`(v10, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f592c.  throw v10;
}
procedure `java.lang.String` `a`(`m.n` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Lm/n;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f54a8.  if v3 == 0 then goto L3f54c8;
  #L3f54ac.  v0:= v2.`m.n.b` @type ^`m.c` @kind object;
  #L3f54b0.  v1:= v2.`m.n.c` @type ^`m.s` @kind object;
  #L3f54b4.  call temp:= `a`(v0, v1) @signature `Lm/c;.a:(Lm/s;)J` @kind virtual;
  #L3f54ba.  v0:= v2.`m.n.b` @type ^`m.c` @kind object;
  #L3f54be.  call temp:= `a`(v0, v3) @signature `Lm/c;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L3f54c4.  v3:= temp @kind object;
  #L3f54c6.  return v3 @kind object;
  #L3f54c8.  v3:= new `java.lang.IllegalArgumentException`;
  #L3f54cc.  v0:= "charset == null" @kind object;
  #L3f54d0.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f54d6.  throw v3;
}
procedure `m.f` `a`(`m.n` v1 @kind this, `long` v2 ) @signature `Lm/n;.a:(J)Lm/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5a0c.  call `d`(v1, v2) @signature `Lm/n;.d:(J)V` @kind virtual;
  #L3f5a12.  v0:= v1.`m.n.b` @type ^`m.c` @kind object;
  #L3f5a16.  call temp:= `a`(v0, v2) @signature `Lm/c;.a:(J)Lm/f;` @kind virtual;
  #L3f5a1c.  v2:= temp @kind object;
  #L3f5a1e.  return v2 @kind object;
}
procedure `boolean` `a`(`m.n` v6 @kind this, `long` v7 , `m.f` v9 @kind object) @signature `Lm/n;.a:(JLm/f;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f525c.  call temp:= `l`(v9) @signature `Lm/f;.l:()I` @kind virtual;
  #L3f5262.  v5:= temp;
  #L3f5264.  v4:= 0I;
  #L3f5266.  v0:= v6 @kind object;
  #L3f5268.  v1:= v7 @kind wide;
  #L3f526a.  v3:= v9 @kind object;
  #L3f526c.  call temp:= `a`(v0, v1, v3, v4, v5) @signature `Lm/n;.a:(JLm/f;II)Z` @kind virtual;
  #L3f5272.  v7:= temp;
  #L3f5274.  return v7;
}
procedure `boolean` `a`(`m.n` v7 @kind this, `long` v8 , `m.f` v10 @kind object, `int` v11 , `int` v12 ) @signature `Lm/n;.a:(JLm/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f5288.  v0:= v7.`m.n.d` @type ^`boolean` @kind boolean;
  #L3f528c.  if v0 != 0 then goto L3f52fe;
  #L3f5290.  v0:= 0L;
  #L3f5294.  v2:= 0I;
  #L3f5296.  v3:= lcmp(v8, v0);
  #L3f529a.  if v3 < 0 then goto L3f52fc;
  #L3f529e.  if v11 < 0 then goto L3f52fc;
  #L3f52a2.  if v12 < 0 then goto L3f52fc;
  #L3f52a6.  call temp:= `l`(v10) @signature `Lm/f;.l:()I` @kind virtual;
  #L3f52ac.  v0:= temp;
  #L3f52ae.  v0:= v0 - v11 @kind int;
  #L3f52b0.  if v0 >= v12 then goto L3f52b6;
  #L3f52b4.  goto L3f52fc;
  #L3f52b6.  v0:= 0I;
  #L3f52b8.  if v0 >= v12 then goto L3f52f8;
  #L3f52bc.  v3:= (`long`) v0 @kind i2l;
  #L3f52be.  v3:= v3 + v8 @kind long;
  #L3f52c0.  v5:= 1L;
  #L3f52c4.  v5:= v5 + v3 @kind long;
  #L3f52c6.  call temp:= `e`(v7, v5) @signature `Lm/n;.e:(J)Z` @kind virtual;
  #L3f52cc.  v1:= temp;
  #L3f52ce.  if v1 != 0 then goto L3f52d4;
  #L3f52d2.  return v2;
  #L3f52d4.  v1:= v7.`m.n.b` @type ^`m.c` @kind object;
  #L3f52d8.  call temp:= `f`(v1, v3) @signature `Lm/c;.f:(J)B` @kind virtual;
  #L3f52de.  v1:= temp;
  #L3f52e0.  v3:= v11 + v0 @kind int;
  #L3f52e4.  call temp:= `a`(v10, v3) @signature `Lm/f;.a:(I)B` @kind virtual;
  #L3f52ea.  v3:= temp;
  #L3f52ec.  if v1 == v3 then goto L3f52f2;
  #L3f52f0.  return v2;
  #L3f52f2.  v0:= v0 + 1;
  #L3f52f6.  goto L3f52b8;
  #L3f52f8.  v8:= 1I;
  #L3f52fa.  return v8;
  #L3f52fc.  return v2;
  #L3f52fe.  v8:= new `java.lang.IllegalStateException`;
  #L3f5302.  v9:= "closed" @kind object;
  #L3f5306.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f530c.  throw v8;
}
procedure `byte`[] `b`(`m.n` v1 @kind this, `long` v2 ) @signature `Lm/n;.b:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f53e0.  call `d`(v1, v2) @signature `Lm/n;.d:(J)V` @kind virtual;
  #L3f53e6.  v0:= v1.`m.n.b` @type ^`m.c` @kind object;
  #L3f53ea.  call temp:= `b`(v0, v2) @signature `Lm/c;.b:(J)[B` @kind virtual;
  #L3f53f0.  v2:= temp @kind object;
  #L3f53f2.  return v2 @kind object;
}
procedure `java.lang.String` `c`(`m.n` v12 @kind this, `long` v13 ) @signature `Lm/n;.c:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L3f550c.  v0:= 0L;
  #L3f5510.  v2:= lcmp(v13, v0);
  #L3f5514.  if v2 < 0 then goto L3f565a;
  #L3f5518.  v0:= 1L;
  #L3f551c.  v2:= 9223372036854775807L;
  #L3f5526.  v4:= lcmp(v13, v2);
  #L3f552a.  if v4 != 0 then goto L3f5532;
  #L3f552e.  v4:= v2 @kind wide;
  #L3f5530.  goto L3f5536;
  #L3f5532.  v4:= v13 + v0 @kind long;
  #L3f5536.  v7:= 10I;
  #L3f553a.  v8:= 0L;
  #L3f553e.  v6:= v12 @kind object;
  #L3f5540.  v10:= v4 @kind wide;
  #L3f5542.  call temp:= `a`(v6, v7, v8, v10) @signature `Lm/n;.a:(BJJ)J` @kind virtual;
  #L3f5548.  v6:= temp @kind wide;
  #L3f554a.  v8:= -1L;
  #L3f554e.  v10:= lcmp(v6, v8);
  #L3f5552.  if v10 == 0 then goto L3f5564;
  #L3f5556.  v13:= v12.`m.n.b` @type ^`m.c` @kind object;
  #L3f555a.  call temp:= `h`(v13, v6) @signature `Lm/c;.h:(J)Ljava/lang/String;` @kind virtual;
  #L3f5560.  v13:= temp @kind object;
  #L3f5562.  return v13 @kind object;
  #L3f5564.  v6:= lcmp(v4, v2);
  #L3f5568.  if v6 >= 0 then goto L3f55c0;
  #L3f556c.  call temp:= `e`(v12, v4) @signature `Lm/n;.e:(J)Z` @kind virtual;
  #L3f5572.  v2:= temp;
  #L3f5574.  if v2 == 0 then goto L3f55c0;
  #L3f5578.  v2:= v12.`m.n.b` @type ^`m.c` @kind object;
  #L3f557c.  v6:= v4 - v0 @kind long;
  #L3f5580.  call temp:= `f`(v2, v6) @signature `Lm/c;.f:(J)B` @kind virtual;
  #L3f5586.  v2:= temp;
  #L3f5588.  v3:= 13I;
  #L3f558c.  if v2 != v3 then goto L3f55c0;
  #L3f5590.  v0:= v0 + v4 @kind long;
  #L3f5592.  call temp:= `e`(v12, v0) @signature `Lm/n;.e:(J)Z` @kind virtual;
  #L3f5598.  v0:= temp;
  #L3f559a.  if v0 == 0 then goto L3f55c0;
  #L3f559e.  v0:= v12.`m.n.b` @type ^`m.c` @kind object;
  #L3f55a2.  call temp:= `f`(v0, v4) @signature `Lm/c;.f:(J)B` @kind virtual;
  #L3f55a8.  v0:= temp;
  #L3f55aa.  v1:= 10I;
  #L3f55ae.  if v0 != v1 then goto L3f55c0;
  #L3f55b2.  v13:= v12.`m.n.b` @type ^`m.c` @kind object;
  #L3f55b6.  call temp:= `h`(v13, v4) @signature `Lm/c;.h:(J)Ljava/lang/String;` @kind virtual;
  #L3f55bc.  v13:= temp @kind object;
  #L3f55be.  return v13 @kind object;
  #L3f55c0.  v6:= new `m.c`;
  #L3f55c4.  call `<init>`(v6) @signature `Lm/c;.<init>:()V` @kind direct;
  #L3f55ca.  v0:= v12.`m.n.b` @type ^`m.c` @kind object;
  #L3f55ce.  v2:= 0L;
  #L3f55d2.  v4:= 32L;
  #L3f55d6.  call temp:= `v`(v0) @signature `Lm/c;.v:()J` @kind virtual;
  #L3f55dc.  v7:= temp @kind wide;
  #L3f55de.  call temp:= `min`(v4, v7) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3f55e4.  v4:= temp @kind wide;
  #L3f55e6.  v1:= v6 @kind object;
  #L3f55e8.  call temp:= `a`(v0, v1, v2, v4) @signature `Lm/c;.a:(Lm/c;JJ)Lm/c;` @kind virtual;
  #L3f55ee.  v0:= new `java.io.EOFException`;
  #L3f55f2.  v1:= new `java.lang.StringBuilder`;
  #L3f55f6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f55fc.  v2:= "\\n not found: limit=" @kind object;
  #L3f5600.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f5606.  v2:= v12.`m.n.b` @type ^`m.c` @kind object;
  #L3f560a.  call temp:= `v`(v2) @signature `Lm/c;.v:()J` @kind virtual;
  #L3f5610.  v2:= temp @kind wide;
  #L3f5612.  call temp:= `min`(v2, v13) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3f5618.  v13:= temp @kind wide;
  #L3f561a.  call temp:= `append`(v1, v13) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f5620.  v13:= " content=" @kind object;
  #L3f5624.  call temp:= `append`(v1, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f562a.  call temp:= `t`(v6) @signature `Lm/c;.t:()Lm/f;` @kind virtual;
  #L3f5630.  v13:= temp @kind object;
  #L3f5632.  call temp:= `e`(v13) @signature `Lm/f;.e:()Ljava/lang/String;` @kind virtual;
  #L3f5638.  v13:= temp @kind object;
  #L3f563a.  call temp:= `append`(v1, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f5640.  v13:= 8230I;
  #L3f5644.  call temp:= `append`(v1, v13) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f564a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f5650.  v13:= temp @kind object;
  #L3f5652.  call `<init>`(v0, v13) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f5658.  throw v0;
  #L3f565a.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f565e.  v1:= new `java.lang.StringBuilder`;
  #L3f5662.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f5668.  v2:= "limit < 0: " @kind object;
  #L3f566c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f5672.  call temp:= `append`(v1, v13) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f5678.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f567e.  v13:= temp @kind object;
  #L3f5680.  call `<init>`(v0, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f5686.  throw v0;
}
procedure `m.c` `c`(`m.n` v1 @kind this) @signature `Lm/n;.c:()Lm/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f59f4.  v0:= v1.`m.n.b` @type ^`m.c` @kind object;
  #L3f59f8.  return v0 @kind object;
}
procedure `void` `close`(`m.n` v1 @kind this) @signature `Lm/n;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5ae0.  v0:= v1.`m.n.d` @type ^`boolean` @kind boolean;
  #L3f5ae4.  if v0 == 0 then goto L3f5aea;
  #L3f5ae8.  return @kind void;
  #L3f5aea.  v0:= 1I;
  #L3f5aec.  v1.`m.n.d` @type ^`boolean` := v0 @kind boolean;
  #L3f5af0.  v0:= v1.`m.n.c` @type ^`m.s` @kind object;
  #L3f5af4.  call `close`(v0) @signature `Lm/s;.close:()V` @kind interface;
  #L3f5afa.  v0:= v1.`m.n.b` @type ^`m.c` @kind object;
  #L3f5afe.  call `q`(v0) @signature `Lm/c;.q:()V` @kind virtual;
  #L3f5b04.  return @kind void;
}
procedure `m.t` `d`(`m.n` v1 @kind this) @signature `Lm/n;.d:()Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5a30.  v0:= v1.`m.n.c` @type ^`m.s` @kind object;
  #L3f5a34.  call temp:= `d`(v0) @signature `Lm/s;.d:()Lm/t;` @kind interface;
  #L3f5a3a.  v0:= temp @kind object;
  #L3f5a3c.  return v0 @kind object;
}
procedure `void` `d`(`m.n` v0 @kind this, `long` v1 ) @signature `Lm/n;.d:(J)V` @AccessFlag PUBLIC {
    temp;

  #L3f5b88.  call temp:= `e`(v0, v1) @signature `Lm/n;.e:(J)Z` @kind virtual;
  #L3f5b8e.  v1:= temp;
  #L3f5b90.  if v1 == 0 then goto L3f5b96;
  #L3f5b94.  return @kind void;
  #L3f5b96.  v1:= new `java.io.EOFException`;
  #L3f5b9a.  call `<init>`(v1) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3f5ba0.  throw v1;
}
procedure `java.lang.String` `e`(`m.n` v2 @kind this) @signature `Lm/n;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f54e8.  v0:= 9223372036854775807L;
  #L3f54f2.  call temp:= `c`(v2, v0) @signature `Lm/n;.c:(J)Ljava/lang/String;` @kind virtual;
  #L3f54f8.  v0:= temp @kind object;
  #L3f54fa.  return v0 @kind object;
}
procedure `boolean` `e`(`m.n` v5 @kind this, `long` v6 ) @signature `Lm/n;.e:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f5320.  v0:= 0L;
  #L3f5324.  v2:= lcmp(v6, v0);
  #L3f5328.  if v2 < 0 then goto L3f5378;
  #L3f532c.  v0:= v5.`m.n.d` @type ^`boolean` @kind boolean;
  #L3f5330.  if v0 != 0 then goto L3f5368;
  #L3f5334.  v0:= v5.`m.n.b` @type ^`m.c` @kind object;
  #L3f5338.  v1:= v0.`m.c.c` @type ^`long` @kind wide;
  #L3f533c.  v3:= lcmp(v1, v6);
  #L3f5340.  if v3 >= 0 then goto L3f5364;
  #L3f5344.  v1:= v5.`m.n.c` @type ^`m.s` @kind object;
  #L3f5348.  v2:= 8192L;
  #L3f534c.  call temp:= `a`(v1, v0, v2) @signature `Lm/s;.a:(Lm/c;J)J` @kind interface;
  #L3f5352.  v0:= temp @kind wide;
  #L3f5354.  v2:= -1L;
  #L3f5358.  v4:= lcmp(v0, v2);
  #L3f535c.  if v4 != 0 then goto L3f5334;
  #L3f5360.  v6:= 0I;
  #L3f5362.  return v6;
  #L3f5364.  v6:= 1I;
  #L3f5366.  return v6;
  #L3f5368.  v6:= new `java.lang.IllegalStateException`;
  #L3f536c.  v7:= "closed" @kind object;
  #L3f5370.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f5376.  throw v6;
  #L3f5378.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f537c.  v1:= new `java.lang.StringBuilder`;
  #L3f5380.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f5386.  v2:= "byteCount < 0: " @kind object;
  #L3f538a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f5390.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f5396.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f539c.  v6:= temp @kind object;
  #L3f539e.  call `<init>`(v0, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f53a4.  throw v0;
}
procedure `int` `f`(`m.n` v2 @kind this) @signature `Lm/n;.f:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f5480.  v0:= 4L;
  #L3f5484.  call `d`(v2, v0) @signature `Lm/n;.d:(J)V` @kind virtual;
  #L3f548a.  v0:= v2.`m.n.b` @type ^`m.c` @kind object;
  #L3f548e.  call temp:= `f`(v0) @signature `Lm/c;.f:()I` @kind virtual;
  #L3f5494.  v0:= temp;
  #L3f5496.  return v0;
}
procedure `boolean` `g`(`m.n` v5 @kind this) @signature `Lm/n;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f51e0.  v0:= v5.`m.n.d` @type ^`boolean` @kind boolean;
  #L3f51e4.  if v0 != 0 then goto L3f5220;
  #L3f51e8.  v0:= v5.`m.n.b` @type ^`m.c` @kind object;
  #L3f51ec.  call temp:= `g`(v0) @signature `Lm/c;.g:()Z` @kind virtual;
  #L3f51f2.  v0:= temp;
  #L3f51f4.  if v0 == 0 then goto L3f521c;
  #L3f51f8.  v0:= v5.`m.n.c` @type ^`m.s` @kind object;
  #L3f51fc.  v1:= v5.`m.n.b` @type ^`m.c` @kind object;
  #L3f5200.  v2:= 8192L;
  #L3f5204.  call temp:= `a`(v0, v1, v2) @signature `Lm/s;.a:(Lm/c;J)J` @kind interface;
  #L3f520a.  v0:= temp @kind wide;
  #L3f520c.  v2:= -1L;
  #L3f5210.  v4:= lcmp(v0, v2);
  #L3f5214.  if v4 != 0 then goto L3f521c;
  #L3f5218.  v0:= 1I;
  #L3f521a.  goto L3f521e;
  #L3f521c.  v0:= 0I;
  #L3f521e.  return v0;
  #L3f5220.  v0:= new `java.lang.IllegalStateException`;
  #L3f5224.  v1:= "closed" @kind object;
  #L3f5228.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f522e.  throw v0;
}
procedure `short` `h`(`m.n` v2 @kind this) @signature `Lm/n;.h:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f5a78.  v0:= 2L;
  #L3f5a7c.  call `d`(v2, v0) @signature `Lm/n;.d:(J)V` @kind virtual;
  #L3f5a82.  v0:= v2.`m.n.b` @type ^`m.c` @kind object;
  #L3f5a86.  call temp:= `h`(v0) @signature `Lm/c;.h:()S` @kind virtual;
  #L3f5a8c.  v0:= temp;
  #L3f5a8e.  return v0;
}
procedure `long` `i`(`m.n` v6 @kind this) @signature `Lm/n;.i:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f5940.  v0:= 1L;
  #L3f5944.  call `d`(v6, v0) @signature `Lm/n;.d:(J)V` @kind virtual;
  #L3f594a.  v0:= 0I;
  #L3f594c.  v1:= 0I;
  #L3f594e.  v2:= v1 + 1;
  #L3f5952.  v3:= (`long`) v2 @kind i2l;
  #L3f5954.  call temp:= `e`(v6, v3) @signature `Lm/n;.e:(J)Z` @kind virtual;
  #L3f595a.  v3:= temp;
  #L3f595c.  if v3 == 0 then goto L3f59d4;
  #L3f5960.  v3:= v6.`m.n.b` @type ^`m.c` @kind object;
  #L3f5964.  v4:= (`long`) v1 @kind i2l;
  #L3f5966.  call temp:= `f`(v3, v4) @signature `Lm/c;.f:(J)B` @kind virtual;
  #L3f596c.  v3:= temp;
  #L3f596e.  v4:= 48I;
  #L3f5972.  if v3 < v4 then goto L3f597e;
  #L3f5976.  v4:= 57I;
  #L3f597a.  if v3 <= v4 then goto L3f59a0;
  #L3f597e.  v4:= 97I;
  #L3f5982.  if v3 < v4 then goto L3f598e;
  #L3f5986.  v4:= 102I;
  #L3f598a.  if v3 <= v4 then goto L3f59a0;
  #L3f598e.  v4:= 65I;
  #L3f5992.  if v3 < v4 then goto L3f59a4;
  #L3f5996.  v4:= 70I;
  #L3f599a.  if v3 <= v4 then goto L3f59a0;
  #L3f599e.  goto L3f59a4;
  #L3f59a0.  v1:= v2;
  #L3f59a2.  goto L3f594e;
  #L3f59a4.  if v1 == 0 then goto L3f59aa;
  #L3f59a8.  goto L3f59d4;
  #L3f59aa.  v1:= new `java.lang.NumberFormatException`;
  #L3f59ae.  v2:= 1I;
  #L3f59b0.  v2:= new `java.lang.Object`[v2];
  #L3f59b4.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L3f59ba.  v3:= temp @kind object;
  #L3f59bc.  v2[v0]:= v3 @kind object;
  #L3f59c0.  v0:= "Expected leading [0-9a-fA-F] character but was %#x" @kind object;
  #L3f59c4.  call temp:= `format`(v0, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3f59ca.  v0:= temp @kind object;
  #L3f59cc.  call `<init>`(v1, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f59d2.  throw v1;
  #L3f59d4.  v0:= v6.`m.n.b` @type ^`m.c` @kind object;
  #L3f59d8.  call temp:= `i`(v0) @signature `Lm/c;.i:()J` @kind virtual;
  #L3f59de.  v0:= temp @kind wide;
  #L3f59e0.  return v0 @kind wide;
}
procedure `boolean` `isOpen`(`m.n` v1 @kind this) @signature `Lm/n;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5240.  v0:= v1.`m.n.d` @type ^`boolean` @kind boolean;
  #L3f5244.  v0:= v0 ^~ 1;
  #L3f5248.  return v0;
}
procedure `int` `read`(`m.n` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lm/n;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f5404.  v0:= v6.`m.n.b` @type ^`m.c` @kind object;
  #L3f5408.  v1:= v0.`m.c.c` @type ^`long` @kind wide;
  #L3f540c.  v3:= 0L;
  #L3f5410.  v5:= lcmp(v1, v3);
  #L3f5414.  if v5 != 0 then goto L3f5438;
  #L3f5418.  v1:= v6.`m.n.c` @type ^`m.s` @kind object;
  #L3f541c.  v2:= 8192L;
  #L3f5420.  call temp:= `a`(v1, v0, v2) @signature `Lm/s;.a:(Lm/c;J)J` @kind interface;
  #L3f5426.  v0:= temp @kind wide;
  #L3f5428.  v2:= -1L;
  #L3f542c.  v4:= lcmp(v0, v2);
  #L3f5430.  if v4 != 0 then goto L3f5438;
  #L3f5434.  v7:= -1I;
  #L3f5436.  return v7;
  #L3f5438.  v0:= v6.`m.n.b` @type ^`m.c` @kind object;
  #L3f543c.  call temp:= `read`(v0, v7) @signature `Lm/c;.read:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L3f5442.  v7:= temp;
  #L3f5444.  return v7;
}
procedure `byte` `readByte`(`m.n` v2 @kind this) @signature `Lm/n;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f53b8.  v0:= 1L;
  #L3f53bc.  call `d`(v2, v0) @signature `Lm/n;.d:(J)V` @kind virtual;
  #L3f53c2.  v0:= v2.`m.n.b` @type ^`m.c` @kind object;
  #L3f53c6.  call temp:= `readByte`(v0) @signature `Lm/c;.readByte:()B` @kind virtual;
  #L3f53cc.  v0:= temp;
  #L3f53ce.  return v0;
}
procedure `void` `readFully`(`m.n` v8 @kind this, `byte`[] v9 @kind object) @signature `Lm/n;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f5b18.  v0:= length @variable v9;
  #L3f5b1a.  v0:= (`long`) v0 @kind i2l;
  #L3f5b1c.  call `d`(v8, v0) @signature `Lm/n;.d:(J)V` @kind virtual;
  #L3f5b22.  v0:= v8.`m.n.b` @type ^`m.c` @kind object;
  #L3f5b26.  call `readFully`(v0, v9) @signature `Lm/c;.readFully:([B)V` @kind virtual;
  #L3f5b2c.  return @kind void;
  #L3f5b2e.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L3f5b30.  v1:= 0I;
  #L3f5b32.  v2:= v8.`m.n.b` @type ^`m.c` @kind object;
  #L3f5b36.  v3:= v2.`m.c.c` @type ^`long` @kind wide;
  #L3f5b3a.  v5:= 0L;
  #L3f5b3e.  v7:= lcmp(v3, v5);
  #L3f5b42.  if v7 <= 0 then goto L3f5b66;
  #L3f5b46.  v4:= (`int`) v3 @kind l2i;
  #L3f5b48.  call temp:= `a`(v2, v9, v1, v4) @signature `Lm/c;.a:([BII)I` @kind virtual;
  #L3f5b4e.  v2:= temp;
  #L3f5b50.  v3:= -1I;
  #L3f5b52.  if v2 == v3 then goto L3f5b5a;
  #L3f5b56.  v1:= v1 + v2 @kind int;
  #L3f5b58.  goto L3f5b32;
  #L3f5b5a.  v9:= new `java.lang.AssertionError`;
  #L3f5b5e.  call `<init>`(v9) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3f5b64.  throw v9;
  #L3f5b66.  throw v0;
  catch `java.io.EOFException` @[L3f5b18..L3f5b22] goto L3f5b2e;
}
procedure `int` `readInt`(`m.n` v2 @kind this) @signature `Lm/n;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f5458.  v0:= 4L;
  #L3f545c.  call `d`(v2, v0) @signature `Lm/n;.d:(J)V` @kind virtual;
  #L3f5462.  v0:= v2.`m.n.b` @type ^`m.c` @kind object;
  #L3f5466.  call temp:= `readInt`(v0) @signature `Lm/c;.readInt:()I` @kind virtual;
  #L3f546c.  v0:= temp;
  #L3f546e.  return v0;
}
procedure `short` `readShort`(`m.n` v2 @kind this) @signature `Lm/n;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f5a50.  v0:= 2L;
  #L3f5a54.  call `d`(v2, v0) @signature `Lm/n;.d:(J)V` @kind virtual;
  #L3f5a5a.  v0:= v2.`m.n.b` @type ^`m.c` @kind object;
  #L3f5a5e.  call temp:= `readShort`(v0) @signature `Lm/c;.readShort:()S` @kind virtual;
  #L3f5a64.  v0:= temp;
  #L3f5a66.  return v0;
}
procedure `void` `skip`(`m.n` v6 @kind this, `long` v7 ) @signature `Lm/n;.skip:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f5bb4.  v0:= v6.`m.n.d` @type ^`boolean` @kind boolean;
  #L3f5bb8.  if v0 != 0 then goto L3f5c26;
  #L3f5bbc.  v0:= 0L;
  #L3f5bc0.  v2:= lcmp(v7, v0);
  #L3f5bc4.  if v2 <= 0 then goto L3f5c24;
  #L3f5bc8.  v2:= v6.`m.n.b` @type ^`m.c` @kind object;
  #L3f5bcc.  v3:= v2.`m.c.c` @type ^`long` @kind wide;
  #L3f5bd0.  v5:= lcmp(v3, v0);
  #L3f5bd4.  if v5 != 0 then goto L3f5c02;
  #L3f5bd8.  v0:= v6.`m.n.c` @type ^`m.s` @kind object;
  #L3f5bdc.  v3:= 8192L;
  #L3f5be0.  call temp:= `a`(v0, v2, v3) @signature `Lm/s;.a:(Lm/c;J)J` @kind interface;
  #L3f5be6.  v0:= temp @kind wide;
  #L3f5be8.  v2:= -1L;
  #L3f5bec.  v4:= lcmp(v0, v2);
  #L3f5bf0.  if v4 == 0 then goto L3f5bf6;
  #L3f5bf4.  goto L3f5c02;
  #L3f5bf6.  v7:= new `java.io.EOFException`;
  #L3f5bfa.  call `<init>`(v7) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3f5c00.  throw v7;
  #L3f5c02.  v0:= v6.`m.n.b` @type ^`m.c` @kind object;
  #L3f5c06.  call temp:= `v`(v0) @signature `Lm/c;.v:()J` @kind virtual;
  #L3f5c0c.  v0:= temp @kind wide;
  #L3f5c0e.  call temp:= `min`(v7, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3f5c14.  v0:= temp @kind wide;
  #L3f5c16.  v2:= v6.`m.n.b` @type ^`m.c` @kind object;
  #L3f5c1a.  call `skip`(v2, v0) @signature `Lm/c;.skip:(J)V` @kind virtual;
  #L3f5c20.  v7:= v7 - v0 @kind long;
  #L3f5c22.  goto L3f5bbc;
  #L3f5c24.  return @kind void;
  #L3f5c26.  v7:= new `java.lang.IllegalStateException`;
  #L3f5c2a.  v8:= "closed" @kind object;
  #L3f5c2e.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f5c34.  throw v7;
}
procedure `java.lang.String` `toString`(`m.n` v2 @kind this) @signature `Lm/n;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f5698.  v0:= new `java.lang.StringBuilder`;
  #L3f569c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f56a2.  v1:= "buffer(" @kind object;
  #L3f56a6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f56ac.  v1:= v2.`m.n.c` @type ^`m.s` @kind object;
  #L3f56b0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f56b6.  v1:= ")" @kind object;
  #L3f56ba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f56c0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f56c6.  v0:= temp @kind object;
  #L3f56c8.  return v0 @kind object;
}
