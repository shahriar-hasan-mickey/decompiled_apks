record `com.yalantis.ucrop.m.f$a` @kind class @AccessFlag  {
  `java.nio.ByteBuffer` `com.yalantis.ucrop.m.f$a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.yalantis.ucrop.m.f$a` v1 @kind this, `byte`[] v2 @kind object, `int` v3 ) @signature `Lcom/yalantis/ucrop/m/f$a;.<init>:([BI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a0768.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a076e.  call temp:= `wrap`(v2) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L3a0774.  v2:= temp @kind object;
  #L3a0776.  v0:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L3a077a.  call temp:= `order`(v2, v0) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3a0780.  v2:= temp @kind object;
  #L3a0782.  call temp:= `limit`(v2, v3) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L3a0788.  v2:= temp @kind object;
  #L3a078a.  v2:= (`java.nio.ByteBuffer`) v2 @kind object;
  #L3a078e.  v1.`com.yalantis.ucrop.m.f$a.a` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L3a0792.  return @kind void;
}
procedure `int` `a`(`com.yalantis.ucrop.m.f$a` v1 @kind this) @signature `Lcom/yalantis/ucrop/m/f$a;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a0728.  v0:= v1.`com.yalantis.ucrop.m.f$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3a072c.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L3a0732.  v0:= temp;
  #L3a0734.  return v0;
}
procedure `short` `a`(`com.yalantis.ucrop.m.f$a` v1 @kind this, `int` v2 ) @signature `Lcom/yalantis/ucrop/m/f$a;.a:(I)S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a0748.  v0:= v1.`com.yalantis.ucrop.m.f$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3a074c.  call temp:= `getShort`(v0, v2) @signature `Ljava/nio/ByteBuffer;.getShort:(I)S` @kind virtual;
  #L3a0752.  v2:= temp;
  #L3a0754.  return v2;
}
procedure `void` `a`(`com.yalantis.ucrop.m.f$a` v1 @kind this, `java.nio.ByteOrder` v2 @kind object) @signature `Lcom/yalantis/ucrop/m/f$a;.a:(Ljava/nio/ByteOrder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a07a4.  v0:= v1.`com.yalantis.ucrop.m.f$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3a07a8.  call temp:= `order`(v0, v2) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3a07ae.  return @kind void;
}
procedure `int` `b`(`com.yalantis.ucrop.m.f$a` v1 @kind this, `int` v2 ) @signature `Lcom/yalantis/ucrop/m/f$a;.b:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a0708.  v0:= v1.`com.yalantis.ucrop.m.f$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3a070c.  call temp:= `getInt`(v0, v2) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L3a0712.  v2:= temp;
  #L3a0714.  return v2;
}
