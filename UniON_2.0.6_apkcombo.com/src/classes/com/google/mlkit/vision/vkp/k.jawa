record `com.google.mlkit.vision.vkp.k` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`com.google.mlkit.vision.vkp.k` v0 @kind this) @signature `Lcom/google/mlkit/vision/vkp/k;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L398208.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39820e.  return @kind void;
}
procedure `com.google.mlkit.vision.vkp.k` `a`(`com.google.mlkit.vision.vkp.l` v7 @kind object) @signature `Lcom/google/mlkit/vision/vkp/k;.a:(Lcom/google/mlkit/vision/vkp/l;)Lcom/google/mlkit/vision/vkp/k;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3981d4.  v6:= new `com.google.mlkit.vision.vkp.c`;
  #L3981d8.  call temp:= `u`() @signature `Le/e/a/b/f/n/eu;.u:()Le/e/a/b/f/n/eu;` @kind static;
  #L3981de.  v2:= temp @kind object;
  #L3981e0.  call temp:= `u`() @signature `Le/e/a/b/f/n/eu;.u:()Le/e/a/b/f/n/eu;` @kind static;
  #L3981e6.  v3:= temp @kind object;
  #L3981e8.  v4:= 0I;
  #L3981ea.  v5:= 0I;
  #L3981ec.  v0:= v6 @kind object;
  #L3981ee.  v1:= v7 @kind object;
  #L3981f0.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/mlkit/vision/vkp/c;.<init>:(Lcom/google/mlkit/vision/vkp/l;Ljava/util/List;Ljava/util/List;ZLjava/lang/Boolean;)V` @kind direct;
  #L3981f6.  return v6 @kind object;
}
procedure `java.util.List` `a`() @signature `Lcom/google/mlkit/vision/vkp/k;.a:()Ljava/util/List;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.List` `b`() @signature `Lcom/google/mlkit/vision/vkp/k;.b:()Ljava/util/List;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.google.mlkit.vision.vkp.l` `c`() @signature `Lcom/google/mlkit/vision/vkp/k;.c:()Lcom/google/mlkit/vision/vkp/l;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Boolean` `d`() @signature `Lcom/google/mlkit/vision/vkp/k;.d:()Ljava/lang/Boolean;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `e`() @signature `Lcom/google/mlkit/vision/vkp/k;.e:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
