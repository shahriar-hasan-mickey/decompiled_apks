record `com.google.mlkit.vision.common.internal.b` @kind class @AccessFlag PUBLIC {
}
procedure `int` `a`(`int` v3 ) @signature `Lcom/google/mlkit/vision/common/internal/b;.a:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L38eee4.  if v3 == 0 then goto L38ef3e;
  #L38eee8.  v0:= 90I;
  #L38eeec.  if v3 == v0 then goto L38ef3a;
  #L38eef0.  v0:= 180I;
  #L38eef4.  if v3 == v0 then goto L38ef36;
  #L38eef8.  v0:= 270I;
  #L38eefc.  if v3 != v0 then goto L38ef04;
  #L38ef00.  v3:= 3I;
  #L38ef02.  return v3;
  #L38ef04.  v0:= new `java.lang.IllegalArgumentException`;
  #L38ef08.  v1:= new `java.lang.StringBuilder`;
  #L38ef0c.  v2:= 29I;
  #L38ef10.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L38ef16.  v2:= "Invalid rotation: " @kind object;
  #L38ef1a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38ef20.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L38ef26.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L38ef2c.  v3:= temp @kind object;
  #L38ef2e.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L38ef34.  throw v0;
  #L38ef36.  v3:= 2I;
  #L38ef38.  return v3;
  #L38ef3a.  v3:= 1I;
  #L38ef3c.  return v3;
  #L38ef3e.  v3:= 0I;
  #L38ef40.  return v3;
}
