record `com.google.mlkit.vision.text.internal.h` @kind class @AccessFlag FINAL_SYNTHETIC extends `java.util.Comparator` @kind interface {
}
global `java.util.Comparator` `@@com.google.mlkit.vision.text.internal.h.b` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/mlkit/vision/text/internal/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L396024.  v0:= new `com.google.mlkit.vision.text.internal.h`;
  #L396028.  call `<init>`(v0) @signature `Lcom/google/mlkit/vision/text/internal/h;.<init>:()V` @kind direct;
  #L39602e.  `@@com.google.mlkit.vision.text.internal.h.b` @type ^`java.util.Comparator` := v0 @kind object;
  #L396032.  return @kind void;
}
procedure `void` `<init>`(`com.google.mlkit.vision.text.internal.h` v0 @kind this) @signature `Lcom/google/mlkit/vision/text/internal/h;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L396044.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39604a.  return @kind void;
}
procedure `int` `compare`(`com.google.mlkit.vision.text.internal.h` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/google/mlkit/vision/text/internal/h;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L395fe8.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L395fec.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L395ff0.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L395ff6.  v1:= temp @kind object;
  #L395ff8.  v1:= (`java.lang.Integer`) v1 @kind object;
  #L395ffc.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L396002.  v2:= temp @kind object;
  #L396004.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L396008.  call temp:= `compareTo`(v1, v2) @signature `Ljava/lang/Integer;.compareTo:(Ljava/lang/Integer;)I` @kind virtual;
  #L39600e.  v1:= temp;
  #L396010.  return v1;
}
