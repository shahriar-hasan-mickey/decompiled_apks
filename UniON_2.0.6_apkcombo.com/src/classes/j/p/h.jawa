record `j.p.h` @kind class @AccessFlag  extends `j.p.g` @kind class {
}
procedure `int` `a`(`int` v0 , `int` v1 ) @signature `Lj/p/h;.a:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3d6a50.  if v0 >= v1 then goto L3d6a56;
  #L3d6a54.  v0:= v1;
  #L3d6a56.  return v0;
}
procedure `int` `a`(`int` v2 , `int` v3 , `int` v4 ) @signature `Lj/p/h;.a:(III)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d6a80.  if v3 > v4 then goto L3d6a92;
  #L3d6a84.  if v2 >= v3 then goto L3d6a8a;
  #L3d6a88.  return v3;
  #L3d6a8a.  if v2 <= v4 then goto L3d6a90;
  #L3d6a8e.  return v4;
  #L3d6a90.  return v2;
  #L3d6a92.  v2:= new `java.lang.IllegalArgumentException`;
  #L3d6a96.  v0:= new `java.lang.StringBuilder`;
  #L3d6a9a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d6aa0.  v1:= "Cannot coerce value to an empty range: maximum " @kind object;
  #L3d6aa4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d6aaa.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d6ab0.  v4:= " is less than minimum " @kind object;
  #L3d6ab4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d6aba.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d6ac0.  v3:= 46I;
  #L3d6ac4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d6aca.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d6ad0.  v3:= temp @kind object;
  #L3d6ad2.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6ad8.  throw v2;
}
procedure `int` `b`(`int` v0 , `int` v1 ) @signature `Lj/p/h;.b:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3d6a68.  if v0 <= v1 then goto L3d6a6e;
  #L3d6a6c.  v0:= v1;
  #L3d6a6e.  return v0;
}
procedure `j.p.b` `c`(`int` v2 , `int` v3 ) @signature `Lj/p/h;.c:(II)Lj/p/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d6aec.  v0:= `@@j.p.b.e` @type ^`j.p.b$a` @kind object;
  #L3d6af0.  v1:= -1I;
  #L3d6af2.  call temp:= `a`(v0, v2, v3, v1) @signature `Lj/p/b$a;.a:(III)Lj/p/b;` @kind virtual;
  #L3d6af8.  v2:= temp @kind object;
  #L3d6afa.  return v2 @kind object;
}
procedure `j.p.d` `d`(`int` v1 , `int` v2 ) @signature `Lj/p/h;.d:(II)Lj/p/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d6b0c.  v0:= -2147483648I;
  #L3d6b10.  if v2 > v0 then goto L3d6b22;
  #L3d6b14.  v1:= `@@j.p.d.g` @type ^`j.p.d$a` @kind object;
  #L3d6b18.  call temp:= `a`(v1) @signature `Lj/p/d$a;.a:()Lj/p/d;` @kind virtual;
  #L3d6b1e.  v1:= temp @kind object;
  #L3d6b20.  return v1 @kind object;
  #L3d6b22.  v0:= new `j.p.d`;
  #L3d6b26.  v2:= v2 + -1;
  #L3d6b2a.  call `<init>`(v0, v1, v2) @signature `Lj/p/d;.<init>:(II)V` @kind direct;
  #L3d6b30.  return v0 @kind object;
}
