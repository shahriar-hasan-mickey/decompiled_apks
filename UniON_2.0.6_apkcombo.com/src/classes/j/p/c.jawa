record `j.p.c` @kind class @AccessFlag PUBLIC_FINAL extends `j.l.v` @kind class {
  `int` `j.p.c.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `j.p.c.c` @AccessFlag PRIVATE;
  `int` `j.p.c.d` @AccessFlag PRIVATE;
  `int` `j.p.c.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`j.p.c` v2 @kind this, `int` v3 , `int` v4 , `int` v5 ) @signature `Lj/p/c;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3d656c.  call `<init>`(v2) @signature `Lj/l/v;.<init>:()V` @kind direct;
  #L3d6572.  v2.`j.p.c.e` @type ^`int` := v5;
  #L3d6576.  v2.`j.p.c.b` @type ^`int` := v4;
  #L3d657a.  v5:= v2.`j.p.c.e` @type ^`int`;
  #L3d657e.  v0:= 1I;
  #L3d6580.  v1:= 0I;
  #L3d6582.  if v5 <= 0 then goto L3d658c;
  #L3d6586.  if v3 > v4 then goto L3d6592;
  #L3d658a.  goto L3d6594;
  #L3d658c.  if v3 < v4 then goto L3d6592;
  #L3d6590.  goto L3d6594;
  #L3d6592.  v0:= 0I;
  #L3d6594.  v2.`j.p.c.c` @type ^`boolean` := v0 @kind boolean;
  #L3d6598.  v4:= v2.`j.p.c.c` @type ^`boolean` @kind boolean;
  #L3d659c.  if v4 == 0 then goto L3d65a2;
  #L3d65a0.  goto L3d65a6;
  #L3d65a2.  v3:= v2.`j.p.c.b` @type ^`int`;
  #L3d65a6.  v2.`j.p.c.d` @type ^`int` := v3;
  #L3d65aa.  return @kind void;
}
procedure `int` `a`(`j.p.c` v2 @kind this) @signature `Lj/p/c;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d6528.  v0:= v2.`j.p.c.d` @type ^`int`;
  #L3d652c.  v1:= v2.`j.p.c.b` @type ^`int`;
  #L3d6530.  if v0 != v1 then goto L3d6550;
  #L3d6534.  v1:= v2.`j.p.c.c` @type ^`boolean` @kind boolean;
  #L3d6538.  if v1 == 0 then goto L3d6544;
  #L3d653c.  v1:= 0I;
  #L3d653e.  v2.`j.p.c.c` @type ^`boolean` := v1 @kind boolean;
  #L3d6542.  goto L3d655a;
  #L3d6544.  v0:= new `java.util.NoSuchElementException`;
  #L3d6548.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3d654e.  throw v0;
  #L3d6550.  v1:= v2.`j.p.c.e` @type ^`int`;
  #L3d6554.  v1:= v1 + v0 @kind int;
  #L3d6556.  v2.`j.p.c.d` @type ^`int` := v1;
  #L3d655a.  return v0;
}
procedure `boolean` `hasNext`(`j.p.c` v1 @kind this) @signature `Lj/p/c;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d6510.  v0:= v1.`j.p.c.c` @type ^`boolean` @kind boolean;
  #L3d6514.  return v0;
}
