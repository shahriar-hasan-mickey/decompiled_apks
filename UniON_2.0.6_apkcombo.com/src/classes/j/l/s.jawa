record `j.l.s` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.List` @kind interface, `java.io.Serializable` @kind interface, `java.util.RandomAccess` @kind interface, `j.o.b.h.a` @kind interface {
}
global `j.l.s` `@@j.l.s.b` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lj/l/s;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3d4c64.  v0:= new `j.l.s`;
  #L3d4c68.  call `<init>`(v0) @signature `Lj/l/s;.<init>:()V` @kind direct;
  #L3d4c6e.  `@@j.l.s.b` @type ^`j.l.s` := v0 @kind object;
  #L3d4c72.  return @kind void;
}
procedure `void` `<init>`(`j.l.s` v0 @kind this) @signature `Lj/l/s;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3d4c84.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d4c8a.  return @kind void;
}
procedure `boolean` `a`(`j.l.s` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lj/l/s;.a:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d48dc.  v0:= "element" @kind object;
  #L3d48e0.  call `b`(v2, v0) @signature `Lj/o/b/d;.b:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3d48e6.  v2:= 0I;
  #L3d48e8.  return v2;
}
procedure `void` `add`(`j.l.s` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lj/l/s;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3d4c9c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3d4ca0.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L3d4ca4.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4caa.  throw v1;
}
procedure `boolean` `add`(`j.l.s` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lj/l/s;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3d4850.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3d4854.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3d4858.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d485e.  throw v2;
}
procedure `boolean` `addAll`(`j.l.s` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Lj/l/s;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L3d4870.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3d4874.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L3d4878.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d487e.  throw v1;
}
procedure `boolean` `addAll`(`j.l.s` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lj/l/s;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4890.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3d4894.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3d4898.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d489e.  throw v2;
}
procedure `int` `b`(`j.l.s` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lj/l/s;.b:(Ljava/lang/Void;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4a18.  v0:= "element" @kind object;
  #L3d4a1c.  call `b`(v2, v0) @signature `Lj/o/b/d;.b:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3d4a22.  v2:= -1I;
  #L3d4a24.  return v2;
}
procedure `int` `c`(`j.l.s` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lj/l/s;.c:(Ljava/lang/Void;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4a64.  v0:= "element" @kind object;
  #L3d4a68.  call `b`(v2, v0) @signature `Lj/o/b/d;.b:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3d4a6e.  v2:= -1I;
  #L3d4a70.  return v2;
}
procedure `void` `clear`(`j.l.s` v2 @kind this) @signature `Lj/l/s;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d4cbc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3d4cc0.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L3d4cc4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4cca.  throw v0;
}
procedure `boolean` `contains`(`j.l.s` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lj/l/s;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d48b0.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L3d48b4.  if v0 == 0 then goto L3d48c6;
  #L3d48b8.  v2:= (`java.lang.Void`) v2 @kind object;
  #L3d48bc.  call temp:= `a`(v1, v2) @signature `Lj/l/s;.a:(Ljava/lang/Void;)Z` @kind virtual;
  #L3d48c2.  v2:= temp;
  #L3d48c4.  return v2;
  #L3d48c6.  v2:= 0I;
  #L3d48c8.  return v2;
}
procedure `boolean` `containsAll`(`j.l.s` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lj/l/s;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d48fc.  v0:= "elements" @kind object;
  #L3d4900.  call `b`(v2, v0) @signature `Lj/o/b/d;.b:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3d4906.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3d490c.  v2:= temp;
  #L3d490e.  return v2;
}
procedure `int` `d`(`j.l.s` v1 @kind this) @signature `Lj/l/s;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d49c4.  v0:= 0I;
  #L3d49c6.  return v0;
}
procedure `boolean` `equals`(`j.l.s` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lj/l/s;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4920.  v0:= instanceof @variable v2 @type ^`java.util.List` @kind boolean;
  #L3d4924.  if v0 == 0 then goto L3d493c;
  #L3d4928.  v2:= (`java.util.List`) v2 @kind object;
  #L3d492c.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L3d4932.  v2:= temp;
  #L3d4934.  if v2 == 0 then goto L3d493c;
  #L3d4938.  v2:= 1I;
  #L3d493a.  goto L3d493e;
  #L3d493c.  v2:= 0I;
  #L3d493e.  return v2;
}
procedure `java.lang.Object` `get`(`j.l.s` v0 @kind this, `int` v1 ) @signature `Lj/l/s;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3d4aa0.  call temp:= `get`(v0, v1) @signature `Lj/l/s;.get:(I)Ljava/lang/Void;` @kind virtual;
  #L3d4aa6.  v1:= 0I;
  #L3d4aa8.  throw v1;
}
procedure `java.lang.Void` `get`(`j.l.s` v3 @kind this, `int` v4 ) @signature `Lj/l/s;.get:(I)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3d4b4c.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3d4b50.  v1:= new `java.lang.StringBuilder`;
  #L3d4b54.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d4b5a.  v2:= "Empty list doesn't contain element at index " @kind object;
  #L3d4b5e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4b64.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4b6a.  v4:= 46I;
  #L3d4b6e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4b74.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d4b7a.  v4:= temp @kind object;
  #L3d4b7c.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4b82.  throw v0;
}
procedure `int` `hashCode`(`j.l.s` v1 @kind this) @signature `Lj/l/s;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d49d8.  v0:= 1I;
  #L3d49da.  return v0;
}
procedure `int` `indexOf`(`j.l.s` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lj/l/s;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d49ec.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L3d49f0.  if v0 == 0 then goto L3d4a02;
  #L3d49f4.  v2:= (`java.lang.Void`) v2 @kind object;
  #L3d49f8.  call temp:= `b`(v1, v2) @signature `Lj/l/s;.b:(Ljava/lang/Void;)I` @kind virtual;
  #L3d49fe.  v2:= temp;
  #L3d4a00.  return v2;
  #L3d4a02.  v2:= -1I;
  #L3d4a04.  return v2;
}
procedure `boolean` `isEmpty`(`j.l.s` v1 @kind this) @signature `Lj/l/s;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4950.  v0:= 1I;
  #L3d4952.  return v0;
}
procedure `java.util.Iterator` `iterator`(`j.l.s` v1 @kind this) @signature `Lj/l/s;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4b94.  v0:= `@@j.l.r.b` @type ^`j.l.r` @kind object;
  #L3d4b98.  return v0 @kind object;
}
procedure `int` `lastIndexOf`(`j.l.s` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lj/l/s;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4a38.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L3d4a3c.  if v0 == 0 then goto L3d4a4e;
  #L3d4a40.  v2:= (`java.lang.Void`) v2 @kind object;
  #L3d4a44.  call temp:= `c`(v1, v2) @signature `Lj/l/s;.c:(Ljava/lang/Void;)I` @kind virtual;
  #L3d4a4a.  v2:= temp;
  #L3d4a4c.  return v2;
  #L3d4a4e.  v2:= -1I;
  #L3d4a50.  return v2;
}
procedure `java.util.ListIterator` `listIterator`(`j.l.s` v1 @kind this) @signature `Lj/l/s;.listIterator:()Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4c04.  v0:= `@@j.l.r.b` @type ^`j.l.r` @kind object;
  #L3d4c08.  return v0 @kind object;
}
procedure `java.util.ListIterator` `listIterator`(`j.l.s` v3 @kind this, `int` v4 ) @signature `Lj/l/s;.listIterator:(I)Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3d4c1c.  if v4 != 0 then goto L3d4c26;
  #L3d4c20.  v4:= `@@j.l.r.b` @type ^`j.l.r` @kind object;
  #L3d4c24.  return v4 @kind object;
  #L3d4c26.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3d4c2a.  v1:= new `java.lang.StringBuilder`;
  #L3d4c2e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d4c34.  v2:= "Index: " @kind object;
  #L3d4c38.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4c3e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4c44.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d4c4a.  v4:= temp @kind object;
  #L3d4c4c.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4c52.  throw v0;
}
procedure `java.lang.Object` `remove`(`j.l.s` v1 @kind this, `int` v2 ) @signature `Lj/l/s;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3d4abc.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3d4ac0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3d4ac4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4aca.  throw v2;
}
procedure `boolean` `remove`(`j.l.s` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lj/l/s;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4964.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3d4968.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3d496c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4972.  throw v2;
}
procedure `boolean` `removeAll`(`j.l.s` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lj/l/s;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4984.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3d4988.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3d498c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4992.  throw v2;
}
procedure `boolean` `retainAll`(`j.l.s` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lj/l/s;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d49a4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3d49a8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3d49ac.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d49b2.  throw v2;
}
procedure `java.lang.Object` `set`(`j.l.s` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lj/l/s;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3d4adc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3d4ae0.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L3d4ae4.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4aea.  throw v1;
}
procedure `int` `size`(`j.l.s` v1 @kind this) @signature `Lj/l/s;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4a84.  call temp:= `d`(v1) @signature `Lj/l/s;.d:()I` @kind virtual;
  #L3d4a8a.  v0:= temp;
  #L3d4a8c.  return v0;
}
procedure `java.util.List` `subList`(`j.l.s` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lj/l/s;.subList:(II)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3d4bac.  if v4 != 0 then goto L3d4bb6;
  #L3d4bb0.  if v5 != 0 then goto L3d4bb6;
  #L3d4bb4.  return v3 @kind object;
  #L3d4bb6.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3d4bba.  v1:= new `java.lang.StringBuilder`;
  #L3d4bbe.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d4bc4.  v2:= "fromIndex: " @kind object;
  #L3d4bc8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4bce.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4bd4.  v4:= ", toIndex: " @kind object;
  #L3d4bd8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4bde.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4be4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d4bea.  v4:= temp @kind object;
  #L3d4bec.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4bf2.  throw v0;
}
procedure `java.lang.Object`[] `toArray`(`j.l.s` v1 @kind this) @signature `Lj/l/s;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4afc.  call temp:= `a`(v1) @signature `Lj/o/b/a;.a:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L3d4b02.  v0:= temp @kind object;
  #L3d4b04.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`j.l.s` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lj/l/s;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L3d4b18.  call temp:= `a`(v0, v1) @signature `Lj/o/b/a;.a:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L3d4b1e.  v1:= temp @kind object;
  #L3d4b20.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`j.l.s` v1 @kind this) @signature `Lj/l/s;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4b34.  v0:= "[]" @kind object;
  #L3d4b38.  return v0 @kind object;
}
