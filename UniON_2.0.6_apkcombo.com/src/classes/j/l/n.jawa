record `j.l.n` @kind class @AccessFlag  extends `j.l.m` @kind class {
}
procedure `boolean` `a`(`java.util.Collection` v2 @kind object, `java.lang.Iterable` v3 @kind object) @signature `Lj/l/n;.a:(Ljava/util/Collection;Ljava/lang/Iterable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d3f8c.  v0:= "$this$addAll" @kind object;
  #L3d3f90.  call `b`(v2, v0) @signature `Lj/o/b/d;.b:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3d3f96.  v0:= "elements" @kind object;
  #L3d3f9a.  call `b`(v3, v0) @signature `Lj/o/b/d;.b:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3d3fa0.  v0:= instanceof @variable v3 @type ^`java.util.Collection` @kind boolean;
  #L3d3fa4.  if v0 == 0 then goto L3d3fb6;
  #L3d3fa8.  v3:= (`java.util.Collection`) v3 @kind object;
  #L3d3fac.  call temp:= `addAll`(v2, v3) @signature `Ljava/util/Collection;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3d3fb2.  v2:= temp;
  #L3d3fb4.  return v2;
  #L3d3fb6.  v0:= 0I;
  #L3d3fb8.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3d3fbe.  v3:= temp @kind object;
  #L3d3fc0.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3d3fc6.  v1:= temp;
  #L3d3fc8.  if v1 == 0 then goto L3d3fe4;
  #L3d3fcc.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3d3fd2.  v1:= temp @kind object;
  #L3d3fd4.  call temp:= `add`(v2, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3d3fda.  v1:= temp;
  #L3d3fdc.  if v1 == 0 then goto L3d3fc0;
  #L3d3fe0.  v0:= 1I;
  #L3d3fe2.  goto L3d3fc0;
  #L3d3fe4.  return v0;
}
