record `j.l.u` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Set` @kind interface, `java.io.Serializable` @kind interface, `j.o.b.h.a` @kind interface {
}
global `j.l.u` `@@j.l.u.b` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lj/l/u;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3d5160.  v0:= new `j.l.u`;
  #L3d5164.  call `<init>`(v0) @signature `Lj/l/u;.<init>:()V` @kind direct;
  #L3d516a.  `@@j.l.u.b` @type ^`j.l.u` := v0 @kind object;
  #L3d516e.  return @kind void;
}
procedure `void` `<init>`(`j.l.u` v0 @kind this) @signature `Lj/l/u;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3d5180.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d5186.  return @kind void;
}
procedure `int` `a`(`j.l.u` v1 @kind this) @signature `Lj/l/u;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d50b4.  v0:= 0I;
  #L3d50b6.  return v0;
}
procedure `boolean` `a`(`j.l.u` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lj/l/u;.a:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4fcc.  v0:= "element" @kind object;
  #L3d4fd0.  call `b`(v2, v0) @signature `Lj/o/b/d;.b:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3d4fd6.  v2:= 0I;
  #L3d4fd8.  return v2;
}
procedure `boolean` `add`(`j.l.u` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lj/l/u;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3d4f60.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3d4f64.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3d4f68.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4f6e.  throw v2;
}
procedure `boolean` `addAll`(`j.l.u` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lj/l/u;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4f80.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3d4f84.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3d4f88.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4f8e.  throw v2;
}
procedure `void` `clear`(`j.l.u` v2 @kind this) @signature `Lj/l/u;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d5198.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3d519c.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L3d51a0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d51a6.  throw v0;
}
procedure `boolean` `contains`(`j.l.u` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lj/l/u;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4fa0.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L3d4fa4.  if v0 == 0 then goto L3d4fb6;
  #L3d4fa8.  v2:= (`java.lang.Void`) v2 @kind object;
  #L3d4fac.  call temp:= `a`(v1, v2) @signature `Lj/l/u;.a:(Ljava/lang/Void;)Z` @kind virtual;
  #L3d4fb2.  v2:= temp;
  #L3d4fb4.  return v2;
  #L3d4fb6.  v2:= 0I;
  #L3d4fb8.  return v2;
}
procedure `boolean` `containsAll`(`j.l.u` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lj/l/u;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4fec.  v0:= "elements" @kind object;
  #L3d4ff0.  call `b`(v2, v0) @signature `Lj/o/b/d;.b:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3d4ff6.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3d4ffc.  v2:= temp;
  #L3d4ffe.  return v2;
}
procedure `boolean` `equals`(`j.l.u` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lj/l/u;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d5010.  v0:= instanceof @variable v2 @type ^`java.util.Set` @kind boolean;
  #L3d5014.  if v0 == 0 then goto L3d502c;
  #L3d5018.  v2:= (`java.util.Set`) v2 @kind object;
  #L3d501c.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L3d5022.  v2:= temp;
  #L3d5024.  if v2 == 0 then goto L3d502c;
  #L3d5028.  v2:= 1I;
  #L3d502a.  goto L3d502e;
  #L3d502c.  v2:= 0I;
  #L3d502e.  return v2;
}
procedure `int` `hashCode`(`j.l.u` v1 @kind this) @signature `Lj/l/u;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d50c8.  v0:= 0I;
  #L3d50ca.  return v0;
}
procedure `boolean` `isEmpty`(`j.l.u` v1 @kind this) @signature `Lj/l/u;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d5040.  v0:= 1I;
  #L3d5042.  return v0;
}
procedure `java.util.Iterator` `iterator`(`j.l.u` v1 @kind this) @signature `Lj/l/u;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d5148.  v0:= `@@j.l.r.b` @type ^`j.l.r` @kind object;
  #L3d514c.  return v0 @kind object;
}
procedure `boolean` `remove`(`j.l.u` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lj/l/u;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d5054.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3d5058.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3d505c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d5062.  throw v2;
}
procedure `boolean` `removeAll`(`j.l.u` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lj/l/u;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d5074.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3d5078.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3d507c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d5082.  throw v2;
}
procedure `boolean` `retainAll`(`j.l.u` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lj/l/u;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d5094.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3d5098.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3d509c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d50a2.  throw v2;
}
procedure `int` `size`(`j.l.u` v1 @kind this) @signature `Lj/l/u;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d50dc.  call temp:= `a`(v1) @signature `Lj/l/u;.a:()I` @kind virtual;
  #L3d50e2.  v0:= temp;
  #L3d50e4.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`j.l.u` v1 @kind this) @signature `Lj/l/u;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d50f8.  call temp:= `a`(v1) @signature `Lj/o/b/a;.a:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L3d50fe.  v0:= temp @kind object;
  #L3d5100.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`j.l.u` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lj/l/u;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L3d5114.  call temp:= `a`(v0, v1) @signature `Lj/o/b/a;.a:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L3d511a.  v1:= temp @kind object;
  #L3d511c.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`j.l.u` v1 @kind this) @signature `Lj/l/u;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d5130.  v0:= "[]" @kind object;
  #L3d5134.  return v0 @kind object;
}
