record `j.l.v` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.Iterator` @kind interface, `j.o.b.h.a` @kind interface {
}
procedure `void` `<init>`(`j.l.v` v0 @kind this) @signature `Lj/l/v;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3d51f8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d51fe.  return @kind void;
}
procedure `int` `a`() @signature `Lj/l/v;.a:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Integer` `next`(`j.l.v` v1 @kind this) @signature `Lj/l/v;.next:()Ljava/lang/Integer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d51b8.  call temp:= `a`(v1) @signature `Lj/l/v;.a:()I` @kind virtual;
  #L3d51be.  v0:= temp;
  #L3d51c0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3d51c6.  v0:= temp @kind object;
  #L3d51c8.  return v0 @kind object;
}
procedure `java.lang.Object` `next`(`j.l.v` v1 @kind this) @signature `Lj/l/v;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3d51dc.  call temp:= `next`(v1) @signature `Lj/l/v;.next:()Ljava/lang/Integer;` @kind virtual;
  #L3d51e2.  v0:= temp @kind object;
  #L3d51e4.  return v0 @kind object;
}
procedure `void` `remove`(`j.l.v` v2 @kind this) @signature `Lj/l/v;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d5210.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3d5214.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L3d5218.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d521e.  throw v0;
}
