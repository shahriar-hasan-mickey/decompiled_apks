record `j.l.t` @kind class @AccessFlag FINAL extends `java.util.Map` @kind interface, `java.io.Serializable` @kind interface, `j.o.b.h.a` @kind interface {
}
global `j.l.t` `@@j.l.t.b` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lj/l/t;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3d4ee8.  v0:= new `j.l.t`;
  #L3d4eec.  call `<init>`(v0) @signature `Lj/l/t;.<init>:()V` @kind direct;
  #L3d4ef2.  `@@j.l.t.b` @type ^`j.l.t` := v0 @kind object;
  #L3d4ef6.  return @kind void;
}
procedure `void` `<init>`(`j.l.t` v0 @kind this) @signature `Lj/l/t;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3d4f08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d4f0e.  return @kind void;
}
procedure `java.util.Set` `a`(`j.l.t` v1 @kind this) @signature `Lj/l/t;.a:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4e9c.  v0:= `@@j.l.u.b` @type ^`j.l.u` @kind object;
  #L3d4ea0.  return v0 @kind object;
}
procedure `boolean` `a`(`j.l.t` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lj/l/t;.a:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4d1c.  v0:= "value" @kind object;
  #L3d4d20.  call `b`(v2, v0) @signature `Lj/o/b/d;.b:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3d4d26.  v2:= 0I;
  #L3d4d28.  return v2;
}
procedure `java.util.Set` `b`(`j.l.t` v1 @kind this) @signature `Lj/l/t;.b:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4eb4.  v0:= `@@j.l.u.b` @type ^`j.l.u` @kind object;
  #L3d4eb8.  return v0 @kind object;
}
procedure `int` `c`(`j.l.t` v1 @kind this) @signature `Lj/l/t;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4d80.  v0:= 0I;
  #L3d4d82.  return v0;
}
procedure `void` `clear`(`j.l.t` v2 @kind this) @signature `Lj/l/t;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d4f20.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3d4f24.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L3d4f28.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4f2e.  throw v0;
}
procedure `boolean` `containsKey`(`j.l.t` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lj/l/t;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L3d4cdc.  v1:= 0I;
  #L3d4cde.  return v1;
}
procedure `boolean` `containsValue`(`j.l.t` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lj/l/t;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4cf0.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L3d4cf4.  if v0 == 0 then goto L3d4d06;
  #L3d4cf8.  v2:= (`java.lang.Void`) v2 @kind object;
  #L3d4cfc.  call temp:= `a`(v1, v2) @signature `Lj/l/t;.a:(Ljava/lang/Void;)Z` @kind virtual;
  #L3d4d02.  v2:= temp;
  #L3d4d04.  return v2;
  #L3d4d06.  v2:= 0I;
  #L3d4d08.  return v2;
}
procedure `java.util.Collection` `d`(`j.l.t` v1 @kind this) @signature `Lj/l/t;.d:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4e4c.  v0:= `@@j.l.s.b` @type ^`j.l.s` @kind object;
  #L3d4e50.  return v0 @kind object;
}
procedure `java.util.Set` `entrySet`(`j.l.t` v1 @kind this) @signature `Lj/l/t;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4e80.  call temp:= `a`(v1) @signature `Lj/l/t;.a:()Ljava/util/Set;` @kind virtual;
  #L3d4e86.  v0:= temp @kind object;
  #L3d4e88.  return v0 @kind object;
}
procedure `boolean` `equals`(`j.l.t` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lj/l/t;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4d3c.  v0:= instanceof @variable v2 @type ^`java.util.Map` @kind boolean;
  #L3d4d40.  if v0 == 0 then goto L3d4d58;
  #L3d4d44.  v2:= (`java.util.Map`) v2 @kind object;
  #L3d4d48.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L3d4d4e.  v2:= temp;
  #L3d4d50.  if v2 == 0 then goto L3d4d58;
  #L3d4d54.  v2:= 1I;
  #L3d4d56.  goto L3d4d5a;
  #L3d4d58.  v2:= 0I;
  #L3d4d5a.  return v2;
}
procedure `java.lang.Object` `get`(`j.l.t` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lj/l/t;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d4dc4.  call temp:= `get`(v0, v1) @signature `Lj/l/t;.get:(Ljava/lang/Object;)Ljava/lang/Void;` @kind virtual;
  #L3d4dca.  v1:= temp @kind object;
  #L3d4dcc.  return v1 @kind object;
}
procedure `java.lang.Void` `get`(`j.l.t` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lj/l/t;.get:(Ljava/lang/Object;)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;

  #L3d4e38.  v1:= 0I;
  #L3d4e3a.  return v1 @kind object;
}
procedure `int` `hashCode`(`j.l.t` v1 @kind this) @signature `Lj/l/t;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4d94.  v0:= 0I;
  #L3d4d96.  return v0;
}
procedure `boolean` `isEmpty`(`j.l.t` v1 @kind this) @signature `Lj/l/t;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4d6c.  v0:= 1I;
  #L3d4d6e.  return v0;
}
procedure `java.util.Set` `keySet`(`j.l.t` v1 @kind this) @signature `Lj/l/t;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4ecc.  call temp:= `b`(v1) @signature `Lj/l/t;.b:()Ljava/util/Set;` @kind virtual;
  #L3d4ed2.  v0:= temp @kind object;
  #L3d4ed4.  return v0 @kind object;
}
procedure `java.lang.Object` `put`(`j.l.t` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lj/l/t;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3d4de0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3d4de4.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L3d4de8.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4dee.  throw v1;
}
procedure `void` `putAll`(`j.l.t` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Lj/l/t;.putAll:(Ljava/util/Map;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4f40.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3d4f44.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3d4f48.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4f4e.  throw v2;
}
procedure `java.lang.Object` `remove`(`j.l.t` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lj/l/t;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4e00.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3d4e04.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L3d4e08.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4e0e.  throw v2;
}
procedure `int` `size`(`j.l.t` v1 @kind this) @signature `Lj/l/t;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4da8.  call temp:= `c`(v1) @signature `Lj/l/t;.c:()I` @kind virtual;
  #L3d4dae.  v0:= temp;
  #L3d4db0.  return v0;
}
procedure `java.lang.String` `toString`(`j.l.t` v1 @kind this) @signature `Lj/l/t;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4e20.  v0:= "{}" @kind object;
  #L3d4e24.  return v0 @kind object;
}
procedure `java.util.Collection` `values`(`j.l.t` v1 @kind this) @signature `Lj/l/t;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d4e64.  call temp:= `d`(v1) @signature `Lj/l/t;.d:()Ljava/util/Collection;` @kind virtual;
  #L3d4e6a.  v0:= temp @kind object;
  #L3d4e6c.  return v0 @kind object;
}
