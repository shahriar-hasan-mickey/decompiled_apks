record `j.m.c` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v0 , `int` v1 ) @signature `Lj/m/c;.a:(II)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L3d5d20.  v0:= v0 %% v1 @kind int;
  #L3d5d22.  if v0 < 0 then goto L3d5d28;
  #L3d5d26.  goto L3d5d2a;
  #L3d5d28.  v0:= v0 + v1 @kind int;
  #L3d5d2a.  return v0;
}
procedure `int` `a`(`int` v0 , `int` v1 , `int` v2 ) @signature `Lj/m/c;.a:(III)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L3d5ca4.  call temp:= `a`(v0, v2) @signature `Lj/m/c;.a:(II)I` @kind static;
  #L3d5caa.  v0:= temp;
  #L3d5cac.  call temp:= `a`(v1, v2) @signature `Lj/m/c;.a:(II)I` @kind static;
  #L3d5cb2.  v1:= temp;
  #L3d5cb4.  v0:= v0 - v1 @kind int;
  #L3d5cb6.  call temp:= `a`(v0, v2) @signature `Lj/m/c;.a:(II)I` @kind static;
  #L3d5cbc.  v0:= temp;
  #L3d5cbe.  return v0;
}
procedure `int` `b`(`int` v0 , `int` v1 , `int` v2 ) @signature `Lj/m/c;.b:(III)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L3d5cd0.  if v2 <= 0 then goto L3d5ce6;
  #L3d5cd4.  if v0 < v1 then goto L3d5cda;
  #L3d5cd8.  goto L3d5cfc;
  #L3d5cda.  call temp:= `a`(v1, v0, v2) @signature `Lj/m/c;.a:(III)I` @kind static;
  #L3d5ce0.  v0:= temp;
  #L3d5ce2.  v1:= v1 - v0 @kind int;
  #L3d5ce4.  goto L3d5cfc;
  #L3d5ce6.  if v2 >= 0 then goto L3d5cfe;
  #L3d5cea.  if v0 > v1 then goto L3d5cf0;
  #L3d5cee.  goto L3d5cfc;
  #L3d5cf0.  v2:= -v2 @kind int;
  #L3d5cf2.  call temp:= `a`(v0, v1, v2) @signature `Lj/m/c;.a:(III)I` @kind static;
  #L3d5cf8.  v0:= temp;
  #L3d5cfa.  v1:= v1 + v0 @kind int;
  #L3d5cfc.  return v1;
  #L3d5cfe.  v0:= new `java.lang.IllegalArgumentException`;
  #L3d5d02.  v1:= "Step is zero." @kind object;
  #L3d5d06.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d5d0c.  throw v0;
}
