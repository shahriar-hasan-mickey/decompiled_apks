record `j.r.c$a` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `j.o.b.h.a` @kind interface {
  `int` `j.r.c$a.b` @AccessFlag PRIVATE;
  `int` `j.r.c$a.c` @AccessFlag PRIVATE;
  `int` `j.r.c$a.d` @AccessFlag PRIVATE;
  `j.p.d` `j.r.c$a.e` @AccessFlag PRIVATE;
  `int` `j.r.c$a.f` @AccessFlag PRIVATE;
  `j.r.c` `j.r.c$a.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`j.r.c$a` v2 @kind this, `j.r.c` v3 @kind object) @signature `Lj/r/c$a;.<init>:(Lj/r/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3d6d78.  v2.`j.r.c$a.g` @type ^`j.r.c` := v3 @kind object;
  #L3d6d7c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d6d82.  v0:= -1I;
  #L3d6d84.  v2.`j.r.c$a.b` @type ^`int` := v0;
  #L3d6d88.  call temp:= `d`(v3) @signature `Lj/r/c;.d:(Lj/r/c;)I` @kind static;
  #L3d6d8e.  v0:= temp;
  #L3d6d90.  call temp:= `b`(v3) @signature `Lj/r/c;.b:(Lj/r/c;)Ljava/lang/CharSequence;` @kind static;
  #L3d6d96.  v3:= temp @kind object;
  #L3d6d98.  call temp:= `length`(v3) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3d6d9e.  v3:= temp;
  #L3d6da0.  v1:= 0I;
  #L3d6da2.  call temp:= `a`(v0, v1, v3) @signature `Lj/p/e;.a:(III)I` @kind static;
  #L3d6da8.  v3:= temp;
  #L3d6daa.  v2.`j.r.c$a.c` @type ^`int` := v3;
  #L3d6dae.  v3:= v2.`j.r.c$a.c` @type ^`int`;
  #L3d6db2.  v2.`j.r.c$a.d` @type ^`int` := v3;
  #L3d6db6.  return @kind void;
}
procedure `void` `a`(`j.r.c$a` v6 @kind this) @signature `Lj/r/c$a;.a:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d6dc8.  v0:= v6.`j.r.c$a.d` @type ^`int`;
  #L3d6dcc.  v1:= 0I;
  #L3d6dce.  if v0 >= 0 then goto L3d6de0;
  #L3d6dd2.  v6.`j.r.c$a.b` @type ^`int` := v1;
  #L3d6dd6.  v0:= 0I;
  #L3d6dd8.  v6.`j.r.c$a.e` @type ^`j.p.d` := v0 @kind object;
  #L3d6ddc.  goto L3d6f02;
  #L3d6de0.  v0:= v6.`j.r.c$a.g` @type ^`j.r.c` @kind object;
  #L3d6de4.  call temp:= `c`(v0) @signature `Lj/r/c;.c:(Lj/r/c;)I` @kind static;
  #L3d6dea.  v0:= temp;
  #L3d6dec.  v2:= -1I;
  #L3d6dee.  v3:= 1I;
  #L3d6df0.  if v0 <= 0 then goto L3d6e12;
  #L3d6df4.  v0:= v6.`j.r.c$a.f` @type ^`int`;
  #L3d6df8.  v0:= v0 + v3 @kind int;
  #L3d6dfa.  v6.`j.r.c$a.f` @type ^`int` := v0;
  #L3d6dfe.  v0:= v6.`j.r.c$a.f` @type ^`int`;
  #L3d6e02.  v4:= v6.`j.r.c$a.g` @type ^`j.r.c` @kind object;
  #L3d6e06.  call temp:= `c`(v4) @signature `Lj/r/c;.c:(Lj/r/c;)I` @kind static;
  #L3d6e0c.  v4:= temp;
  #L3d6e0e.  if v0 >= v4 then goto L3d6e2e;
  #L3d6e12.  v0:= v6.`j.r.c$a.d` @type ^`int`;
  #L3d6e16.  v4:= v6.`j.r.c$a.g` @type ^`j.r.c` @kind object;
  #L3d6e1a.  call temp:= `b`(v4) @signature `Lj/r/c;.b:(Lj/r/c;)Ljava/lang/CharSequence;` @kind static;
  #L3d6e20.  v4:= temp @kind object;
  #L3d6e22.  call temp:= `length`(v4) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3d6e28.  v4:= temp;
  #L3d6e2a.  if v0 <= v4 then goto L3d6e5a;
  #L3d6e2e.  v0:= v6.`j.r.c$a.c` @type ^`int`;
  #L3d6e32.  v1:= new `j.p.d`;
  #L3d6e36.  v4:= v6.`j.r.c$a.g` @type ^`j.r.c` @kind object;
  #L3d6e3a.  call temp:= `b`(v4) @signature `Lj/r/c;.b:(Lj/r/c;)Ljava/lang/CharSequence;` @kind static;
  #L3d6e40.  v4:= temp @kind object;
  #L3d6e42.  call temp:= `c`(v4) @signature `Lj/r/m;.c:(Ljava/lang/CharSequence;)I` @kind static;
  #L3d6e48.  v4:= temp;
  #L3d6e4a.  call `<init>`(v1, v0, v4) @signature `Lj/p/d;.<init>:(II)V` @kind direct;
  #L3d6e50.  v6.`j.r.c$a.e` @type ^`j.p.d` := v1 @kind object;
  #L3d6e54.  v6.`j.r.c$a.d` @type ^`int` := v2;
  #L3d6e58.  goto L3d6efe;
  #L3d6e5a.  v0:= v6.`j.r.c$a.g` @type ^`j.r.c` @kind object;
  #L3d6e5e.  call temp:= `a`(v0) @signature `Lj/r/c;.a:(Lj/r/c;)Lj/o/a/c;` @kind static;
  #L3d6e64.  v0:= temp @kind object;
  #L3d6e66.  v4:= v6.`j.r.c$a.g` @type ^`j.r.c` @kind object;
  #L3d6e6a.  call temp:= `b`(v4) @signature `Lj/r/c;.b:(Lj/r/c;)Ljava/lang/CharSequence;` @kind static;
  #L3d6e70.  v4:= temp @kind object;
  #L3d6e72.  v5:= v6.`j.r.c$a.d` @type ^`int`;
  #L3d6e76.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3d6e7c.  v5:= temp @kind object;
  #L3d6e7e.  call temp:= `a`(v0, v4, v5) @signature `Lj/o/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3d6e84.  v0:= temp @kind object;
  #L3d6e86.  v0:= (`j.g`) v0 @kind object;
  #L3d6e8a.  if v0 != 0 then goto L3d6eb2;
  #L3d6e8e.  v0:= v6.`j.r.c$a.c` @type ^`int`;
  #L3d6e92.  v1:= new `j.p.d`;
  #L3d6e96.  v4:= v6.`j.r.c$a.g` @type ^`j.r.c` @kind object;
  #L3d6e9a.  call temp:= `b`(v4) @signature `Lj/r/c;.b:(Lj/r/c;)Ljava/lang/CharSequence;` @kind static;
  #L3d6ea0.  v4:= temp @kind object;
  #L3d6ea2.  call temp:= `c`(v4) @signature `Lj/r/m;.c:(Ljava/lang/CharSequence;)I` @kind static;
  #L3d6ea8.  v4:= temp;
  #L3d6eaa.  call `<init>`(v1, v0, v4) @signature `Lj/p/d;.<init>:(II)V` @kind direct;
  #L3d6eb0.  goto L3d6e50;
  #L3d6eb2.  call temp:= `a`(v0) @signature `Lj/g;.a:()Ljava/lang/Object;` @kind virtual;
  #L3d6eb8.  v2:= temp @kind object;
  #L3d6eba.  v2:= (`java.lang.Number`) v2 @kind object;
  #L3d6ebe.  call temp:= `intValue`(v2) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L3d6ec4.  v2:= temp;
  #L3d6ec6.  call temp:= `b`(v0) @signature `Lj/g;.b:()Ljava/lang/Object;` @kind virtual;
  #L3d6ecc.  v0:= temp @kind object;
  #L3d6ece.  v0:= (`java.lang.Number`) v0 @kind object;
  #L3d6ed2.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L3d6ed8.  v0:= temp;
  #L3d6eda.  v4:= v6.`j.r.c$a.c` @type ^`int`;
  #L3d6ede.  call temp:= `d`(v4, v2) @signature `Lj/p/e;.d:(II)Lj/p/d;` @kind static;
  #L3d6ee4.  v4:= temp @kind object;
  #L3d6ee6.  v6.`j.r.c$a.e` @type ^`j.p.d` := v4 @kind object;
  #L3d6eea.  v2:= v2 + v0 @kind int;
  #L3d6eec.  v6.`j.r.c$a.c` @type ^`int` := v2;
  #L3d6ef0.  v2:= v6.`j.r.c$a.c` @type ^`int`;
  #L3d6ef4.  if v0 != 0 then goto L3d6efa;
  #L3d6ef8.  v1:= 1I;
  #L3d6efa.  v2:= v2 + v1 @kind int;
  #L3d6efc.  goto L3d6e54;
  #L3d6efe.  v6.`j.r.c$a.b` @type ^`int` := v3;
  #L3d6f02.  return @kind void;
}
procedure `boolean` `hasNext`(`j.r.c$a` v2 @kind this) @signature `Lj/r/c$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d6cd4.  v0:= v2.`j.r.c$a.b` @type ^`int`;
  #L3d6cd8.  v1:= -1I;
  #L3d6cda.  if v0 != v1 then goto L3d6ce4;
  #L3d6cde.  call `a`(v2) @signature `Lj/r/c$a;.a:()V` @kind direct;
  #L3d6ce4.  v0:= v2.`j.r.c$a.b` @type ^`int`;
  #L3d6ce8.  v1:= 1I;
  #L3d6cea.  if v0 != v1 then goto L3d6cf0;
  #L3d6cee.  goto L3d6cf2;
  #L3d6cf0.  v1:= 0I;
  #L3d6cf2.  return v1;
}
procedure `j.p.d` `next`(`j.r.c$a` v3 @kind this) @signature `Lj/r/c$a;.next:()Lj/p/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3d6d20.  v0:= v3.`j.r.c$a.b` @type ^`int`;
  #L3d6d24.  v1:= -1I;
  #L3d6d26.  if v0 != v1 then goto L3d6d30;
  #L3d6d2a.  call `a`(v3) @signature `Lj/r/c$a;.a:()V` @kind direct;
  #L3d6d30.  v0:= v3.`j.r.c$a.b` @type ^`int`;
  #L3d6d34.  if v0 == 0 then goto L3d6d5c;
  #L3d6d38.  v0:= v3.`j.r.c$a.e` @type ^`j.p.d` @kind object;
  #L3d6d3c.  if v0 == 0 then goto L3d6d4c;
  #L3d6d40.  v2:= 0I;
  #L3d6d42.  v3.`j.r.c$a.e` @type ^`j.p.d` := v2 @kind object;
  #L3d6d46.  v3.`j.r.c$a.b` @type ^`int` := v1;
  #L3d6d4a.  return v0 @kind object;
  #L3d6d4c.  v0:= new `j.i`;
  #L3d6d50.  v1:= "null cannot be cast to non-null type kotlin.ranges.IntRange" @kind object;
  #L3d6d54.  call `<init>`(v0, v1) @signature `Lj/i;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6d5a.  throw v0;
  #L3d6d5c.  v0:= new `java.util.NoSuchElementException`;
  #L3d6d60.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3d6d66.  throw v0;
}
procedure `java.lang.Object` `next`(`j.r.c$a` v1 @kind this) @signature `Lj/r/c$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3d6d04.  call temp:= `next`(v1) @signature `Lj/r/c$a;.next:()Lj/p/d;` @kind virtual;
  #L3d6d0a.  v0:= temp @kind object;
  #L3d6d0c.  return v0 @kind object;
}
procedure `void` `remove`(`j.r.c$a` v2 @kind this) @signature `Lj/r/c$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d6f14.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3d6f18.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L3d6f1c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6f22.  throw v0;
}
