record `j.o.b.f` @kind class @AccessFlag PUBLIC {
}
global `j.o.b.g` `@@j.o.b.f.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lj/o/b/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3d6464.  v0:= "kotlin.reflect.jvm.internal.ReflectionFactoryImpl" @kind object;
  #L3d6468.  v1:= 0I;
  #L3d646a.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L3d6470.  v0:= temp @kind object;
  #L3d6472.  call temp:= `newInstance`(v0) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L3d6478.  v0:= temp @kind object;
  #L3d647a.  v0:= (`j.o.b.g`) v0 @kind object;
  #L3d647e.  v1:= v0 @kind object;
  #L3d6480.  goto L3d6484;
  #L3d6482.  
  #L3d6484.  if v1 == 0 then goto L3d648a;
  #L3d6488.  goto L3d6494;
  #L3d648a.  v1:= new `j.o.b.g`;
  #L3d648e.  call `<init>`(v1) @signature `Lj/o/b/g;.<init>:()V` @kind direct;
  #L3d6494.  `@@j.o.b.f.a` @type ^`j.o.b.g` := v1 @kind object;
  #L3d6498.  return @kind void;
  catch `java.lang.ClassCastException` @[L3d646a..L3d647e] goto L3d6482;
  catch `java.lang.ClassNotFoundException` @[L3d646a..L3d647e] goto L3d6482;
  catch `java.lang.InstantiationException` @[L3d646a..L3d647e] goto L3d6482;
  catch `java.lang.IllegalAccessException` @[L3d646a..L3d647e] goto L3d6482;
}
procedure `java.lang.String` `a`(`j.o.b.e` v1 @kind object) @signature `Lj/o/b/f;.a:(Lj/o/b/e;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d6444.  v0:= `@@j.o.b.f.a` @type ^`j.o.b.g` @kind object;
  #L3d6448.  call temp:= `a`(v0, v1) @signature `Lj/o/b/g;.a:(Lj/o/b/e;)Ljava/lang/String;` @kind virtual;
  #L3d644e.  v1:= temp @kind object;
  #L3d6450.  return v1 @kind object;
}
