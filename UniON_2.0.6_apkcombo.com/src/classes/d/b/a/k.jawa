record `d.b.a.k` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC {
}
global `int`[] `@@d.b.a.k.a` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC;
global `int`[] `@@d.b.a.k.b` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Ld/b/a/k;.<clinit>:()V` @AccessFlag STATIC_SYNTHETIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c1274.  call temp:= `values`() @signature `Ld/b/a/m;.values:()[Ld/b/a/m;` @kind static;
  #L1c127a.  v0:= temp @kind object;
  #L1c127c.  v0:= length @variable v0;
  #L1c127e.  v0:= new `int`[v0];
  #L1c1282.  `@@d.b.a.k.a` @type ^`int`[] := v0 @kind object;
  #L1c1286.  v0:= `@@d.b.a.k.a` @type ^`int`[] @kind object;
  #L1c128a.  v1:= `@@d.b.a.m.j` @type ^`d.b.a.m` @kind object;
  #L1c128e.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1c1294.  v1:= temp;
  #L1c1296.  v2:= 1I;
  #L1c1298.  v0[v1]:= v2;
  #L1c129c.  v0:= `@@d.b.a.k.a` @type ^`int`[] @kind object;
  #L1c12a0.  v1:= `@@d.b.a.m.i` @type ^`d.b.a.m` @kind object;
  #L1c12a4.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1c12aa.  v1:= temp;
  #L1c12ac.  v3:= 2I;
  #L1c12ae.  v0[v1]:= v3;
  #L1c12b2.  call temp:= `values`() @signature `Ld/b/a/m;.values:()[Ld/b/a/m;` @kind static;
  #L1c12b8.  v0:= temp @kind object;
  #L1c12ba.  v0:= length @variable v0;
  #L1c12bc.  v0:= new `int`[v0];
  #L1c12c0.  `@@d.b.a.k.b` @type ^`int`[] := v0 @kind object;
  #L1c12c4.  v0:= `@@d.b.a.k.b` @type ^`int`[] @kind object;
  #L1c12c8.  v1:= `@@d.b.a.m.j` @type ^`d.b.a.m` @kind object;
  #L1c12cc.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1c12d2.  v1:= temp;
  #L1c12d4.  v0[v1]:= v2;
  #L1c12d8.  v0:= `@@d.b.a.k.b` @type ^`int`[] @kind object;
  #L1c12dc.  v1:= `@@d.b.a.m.i` @type ^`d.b.a.m` @kind object;
  #L1c12e0.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1c12e6.  v1:= temp;
  #L1c12e8.  v0[v1]:= v3;
  #L1c12ec.  return @kind void;
}
