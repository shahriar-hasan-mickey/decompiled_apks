record `n.c.a.k$b` @kind class @AccessFlag  extends `java.util.Comparator` @kind interface {
}
procedure `void` `<init>`(`n.c.a.k$b` v0 @kind this) @signature `Ln/c/a/k$b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L40dd54.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40dd5a.  return @kind void;
}
procedure `int` `a`(`n.c.a.k$b` v4 @kind this, `n.c.a.k` v5 @kind object, `n.c.a.k` v6 @kind object) @signature `Ln/c/a/k$b;.a:(Ln/c/a/k;Ln/c/a/k;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40dd08.  call temp:= `s`(v5) @signature `Ln/c/a/k;.s:()J` @kind virtual;
  #L40dd0e.  v0:= temp @kind wide;
  #L40dd10.  call temp:= `s`(v6) @signature `Ln/c/a/k;.s:()J` @kind virtual;
  #L40dd16.  v2:= temp @kind wide;
  #L40dd18.  call temp:= `a`(v0, v2) @signature `Ln/c/a/w/d;.a:(JJ)I` @kind static;
  #L40dd1e.  v0:= temp;
  #L40dd20.  if v0 != 0 then goto L40dd40;
  #L40dd24.  call temp:= `e`(v5) @signature `Ln/c/a/k;.e:()I` @kind virtual;
  #L40dd2a.  v5:= temp;
  #L40dd2c.  v0:= (`long`) v5 @kind i2l;
  #L40dd2e.  call temp:= `e`(v6) @signature `Ln/c/a/k;.e:()I` @kind virtual;
  #L40dd34.  v5:= temp;
  #L40dd36.  v5:= (`long`) v5 @kind i2l;
  #L40dd38.  call temp:= `a`(v0, v5) @signature `Ln/c/a/w/d;.a:(JJ)I` @kind static;
  #L40dd3e.  v0:= temp;
  #L40dd40.  return v0;
}
procedure `int` `compare`(`n.c.a.k$b` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Ln/c/a/k$b;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L40dce4.  v1:= (`n.c.a.k`) v1 @kind object;
  #L40dce8.  v2:= (`n.c.a.k`) v2 @kind object;
  #L40dcec.  call temp:= `a`(v0, v1, v2) @signature `Ln/c/a/k$b;.a:(Ln/c/a/k;Ln/c/a/k;)I` @kind virtual;
  #L40dcf2.  v1:= temp;
  #L40dcf4.  return v1;
}
