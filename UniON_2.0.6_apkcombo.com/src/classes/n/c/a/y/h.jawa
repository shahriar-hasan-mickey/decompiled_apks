record `n.c.a.y.h` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `java.util.concurrent.atomic.AtomicBoolean` `@@n.c.a.y.h.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@n.c.a.y.h.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln/c/a/y/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L427a2c.  v0:= new `n.c.a.y.h$a`;
  #L427a30.  call `<init>`(v0) @signature `Ln/c/a/y/h$a;.<init>:()V` @kind direct;
  #L427a36.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L427a3a.  v1:= 0I;
  #L427a3c.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L427a42.  `@@n.c.a.y.h.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L427a46.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L427a4a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L427a50.  `@@n.c.a.y.h.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L427a54.  return @kind void;
}
procedure `void` `<init>`(`n.c.a.y.h` v0 @kind this) @signature `Ln/c/a/y/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L427a68.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L427a6e.  return @kind void;
}
procedure `void` `a`(`n.c.a.y.h` v2 @kind object) @signature `Ln/c/a/y/h;.a:(Ln/c/a/y/h;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L427ae0.  v0:= `@@n.c.a.y.h.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L427ae4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L427aea.  v0:= temp;
  #L427aec.  if v0 != 0 then goto L427b14;
  #L427af0.  v0:= `@@n.c.a.y.h.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L427af4.  v1:= 0I;
  #L427af6.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L427afc.  v2:= temp;
  #L427afe.  if v2 == 0 then goto L427b04;
  #L427b02.  return @kind void;
  #L427b04.  v2:= new `java.lang.IllegalStateException`;
  #L427b08.  v0:= "Initializer was already set, possibly with a default during initialization" @kind object;
  #L427b0c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427b12.  throw v2;
  #L427b14.  v2:= new `java.lang.IllegalStateException`;
  #L427b18.  v0:= "Already initialized" @kind object;
  #L427b1c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427b22.  throw v2;
}
procedure `void` `b`() @signature `Ln/c/a/y/h;.b:()V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L427a80.  v0:= `@@n.c.a.y.h.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L427a84.  v1:= 1I;
  #L427a86.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.getAndSet:(Z)Z` @kind virtual;
  #L427a8c.  v0:= temp;
  #L427a8e.  if v0 != 0 then goto L427ac0;
  #L427a92.  v0:= `@@n.c.a.y.h.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L427a96.  v1:= 0I;
  #L427a98.  v2:= new `n.c.a.y.h$b`;
  #L427a9c.  call `<init>`(v2) @signature `Ln/c/a/y/h$b;.<init>:()V` @kind direct;
  #L427aa2.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L427aa8.  v0:= `@@n.c.a.y.h.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L427aac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L427ab2.  v0:= temp @kind object;
  #L427ab4.  v0:= (`n.c.a.y.h`) v0 @kind object;
  #L427ab8.  call `a`(v0) @signature `Ln/c/a/y/h;.a:()V` @kind virtual;
  #L427abe.  return @kind void;
  #L427ac0.  v0:= new `java.lang.IllegalStateException`;
  #L427ac4.  v1:= "Already initialized" @kind object;
  #L427ac8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427ace.  throw v0;
}
procedure `void` `a`() @signature `Ln/c/a/y/h;.a:()V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
