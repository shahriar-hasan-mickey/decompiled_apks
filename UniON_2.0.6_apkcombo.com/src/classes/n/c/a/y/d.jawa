record `n.c.a.y.d` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Comparable` @kind interface, `java.io.Serializable` @kind interface {
  `n.c.a.g` `n.c.a.y.d.b` @AccessFlag PRIVATE_FINAL;
  `n.c.a.r` `n.c.a.y.d.c` @AccessFlag PRIVATE_FINAL;
  `n.c.a.r` `n.c.a.y.d.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.c.a.y.d` v1 @kind this, `long` v2 , `n.c.a.r` v4 @kind object, `n.c.a.r` v5 @kind object) @signature `Ln/c/a/y/d;.<init>:(JLn/c/a/r;Ln/c/a/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L427734.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42773a.  v0:= 0I;
  #L42773c.  call temp:= `a`(v2, v0, v4) @signature `Ln/c/a/g;.a:(JILn/c/a/r;)Ln/c/a/g;` @kind static;
  #L427742.  v2:= temp @kind object;
  #L427744.  v1.`n.c.a.y.d.b` @type ^`n.c.a.g` := v2 @kind object;
  #L427748.  v1.`n.c.a.y.d.c` @type ^`n.c.a.r` := v4 @kind object;
  #L42774c.  v1.`n.c.a.y.d.d` @type ^`n.c.a.r` := v5 @kind object;
  #L427750.  return @kind void;
}
procedure `void` `<init>`(`n.c.a.y.d` v0 @kind this, `n.c.a.g` v1 @kind object, `n.c.a.r` v2 @kind object, `n.c.a.r` v3 @kind object) @signature `Ln/c/a/y/d;.<init>:(Ln/c/a/g;Ln/c/a/r;Ln/c/a/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L427764.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42776a.  v0.`n.c.a.y.d.b` @type ^`n.c.a.g` := v1 @kind object;
  #L42776e.  v0.`n.c.a.y.d.c` @type ^`n.c.a.r` := v2 @kind object;
  #L427772.  v0.`n.c.a.y.d.d` @type ^`n.c.a.r` := v3 @kind object;
  #L427776.  return @kind void;
}
procedure `n.c.a.y.d` `a`(`java.io.DataInput` v4 @kind object) @signature `Ln/c/a/y/d;.a:(Ljava/io/DataInput;)Ln/c/a/y/d;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4276e4.  call temp:= `b`(v4) @signature `Ln/c/a/y/a;.b:(Ljava/io/DataInput;)J` @kind static;
  #L4276ea.  v0:= temp @kind wide;
  #L4276ec.  call temp:= `c`(v4) @signature `Ln/c/a/y/a;.c:(Ljava/io/DataInput;)Ln/c/a/r;` @kind static;
  #L4276f2.  v2:= temp @kind object;
  #L4276f4.  call temp:= `c`(v4) @signature `Ln/c/a/y/a;.c:(Ljava/io/DataInput;)Ln/c/a/r;` @kind static;
  #L4276fa.  v4:= temp @kind object;
  #L4276fc.  call temp:= `equals`(v2, v4) @signature `Ln/c/a/r;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L427702.  v3:= temp;
  #L427704.  if v3 != 0 then goto L427714;
  #L427708.  v3:= new `n.c.a.y.d`;
  #L42770c.  call `<init>`(v3, v0, v2, v4) @signature `Ln/c/a/y/d;.<init>:(JLn/c/a/r;Ln/c/a/r;)V` @kind direct;
  #L427712.  return v3 @kind object;
  #L427714.  v4:= new `java.lang.IllegalArgumentException`;
  #L427718.  v0:= "Offsets must not be equal" @kind object;
  #L42771c.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427722.  throw v4;
}
procedure `int` `s`(`n.c.a.y.d` v2 @kind this) @signature `Ln/c/a/y/d;.s:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L427490.  call temp:= `l`(v2) @signature `Ln/c/a/y/d;.l:()Ln/c/a/r;` @kind virtual;
  #L427496.  v0:= temp @kind object;
  #L427498.  call temp:= `k`(v0) @signature `Ln/c/a/r;.k:()I` @kind virtual;
  #L42749e.  v0:= temp;
  #L4274a0.  call temp:= `m`(v2) @signature `Ln/c/a/y/d;.m:()Ln/c/a/r;` @kind virtual;
  #L4274a6.  v1:= temp @kind object;
  #L4274a8.  call temp:= `k`(v1) @signature `Ln/c/a/r;.k:()I` @kind virtual;
  #L4274ae.  v1:= temp;
  #L4274b0.  v0:= v0 - v1 @kind int;
  #L4274b2.  return v0;
}
procedure `java.lang.Object` `writeReplace`(`n.c.a.y.d` v2 @kind this) @signature `Ln/c/a/y/d;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L42750c.  v0:= new `n.c.a.y.a`;
  #L427510.  v1:= 2I;
  #L427512.  call `<init>`(v0, v1, v2) @signature `Ln/c/a/y/a;.<init>:(BLjava/lang/Object;)V` @kind direct;
  #L427518.  return v0 @kind object;
}
procedure `int` `a`(`n.c.a.y.d` v1 @kind this, `n.c.a.y.d` v2 @kind object) @signature `Ln/c/a/y/d;.a:(Ln/c/a/y/d;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427464.  call temp:= `k`(v1) @signature `Ln/c/a/y/d;.k:()Ln/c/a/e;` @kind virtual;
  #L42746a.  v0:= temp @kind object;
  #L42746c.  call temp:= `k`(v2) @signature `Ln/c/a/y/d;.k:()Ln/c/a/e;` @kind virtual;
  #L427472.  v2:= temp @kind object;
  #L427474.  call temp:= `a`(v0, v2) @signature `Ln/c/a/e;.a:(Ln/c/a/e;)I` @kind virtual;
  #L42747a.  v2:= temp;
  #L42747c.  return v2;
}
procedure `void` `a`(`n.c.a.y.d` v2 @kind this, `java.io.DataOutput` v3 @kind object) @signature `Ln/c/a/y/d;.a:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L427788.  call temp:= `p`(v2) @signature `Ln/c/a/y/d;.p:()J` @kind virtual;
  #L42778e.  v0:= temp @kind wide;
  #L427790.  call `a`(v0, v3) @signature `Ln/c/a/y/a;.a:(JLjava/io/DataOutput;)V` @kind static;
  #L427796.  v0:= v2.`n.c.a.y.d.c` @type ^`n.c.a.r` @kind object;
  #L42779a.  call `a`(v0, v3) @signature `Ln/c/a/y/a;.a:(Ln/c/a/r;Ljava/io/DataOutput;)V` @kind static;
  #L4277a0.  v0:= v2.`n.c.a.y.d.d` @type ^`n.c.a.r` @kind object;
  #L4277a4.  call `a`(v0, v3) @signature `Ln/c/a/y/a;.a:(Ln/c/a/r;Ljava/io/DataOutput;)V` @kind static;
  #L4277aa.  return @kind void;
}
procedure `n.c.a.g` `b`(`n.c.a.y.d` v3 @kind this) @signature `Ln/c/a/y/d;.b:()Ln/c/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L427674.  v0:= v3.`n.c.a.y.d.b` @type ^`n.c.a.g` @kind object;
  #L427678.  call temp:= `s`(v3) @signature `Ln/c/a/y/d;.s:()I` @kind direct;
  #L42767e.  v1:= temp;
  #L427680.  v1:= (`long`) v1 @kind i2l;
  #L427682.  call temp:= `e`(v0, v1) @signature `Ln/c/a/g;.e:(J)Ln/c/a/g;` @kind virtual;
  #L427688.  v0:= temp @kind object;
  #L42768a.  return v0 @kind object;
}
procedure `int` `compareTo`(`n.c.a.y.d` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Ln/c/a/y/d;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L427444.  v1:= (`n.c.a.y.d`) v1 @kind object;
  #L427448.  call temp:= `a`(v0, v1) @signature `Ln/c/a/y/d;.a:(Ln/c/a/y/d;)I` @kind virtual;
  #L42744e.  v1:= temp;
  #L427450.  return v1;
}
procedure `n.c.a.g` `e`(`n.c.a.y.d` v1 @kind this) @signature `Ln/c/a/y/d;.e:()Ln/c/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42769c.  v0:= v1.`n.c.a.y.d.b` @type ^`n.c.a.g` @kind object;
  #L4276a0.  return v0 @kind object;
}
procedure `boolean` `equals`(`n.c.a.y.d` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ln/c/a/y/d;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42739c.  v0:= 1I;
  #L42739e.  if v5 != v4 then goto L4273a4;
  #L4273a2.  return v0;
  #L4273a4.  v1:= instanceof @variable v5 @type ^`n.c.a.y.d` @kind boolean;
  #L4273a8.  v2:= 0I;
  #L4273aa.  if v1 == 0 then goto L4273f4;
  #L4273ae.  v5:= (`n.c.a.y.d`) v5 @kind object;
  #L4273b2.  v1:= v4.`n.c.a.y.d.b` @type ^`n.c.a.g` @kind object;
  #L4273b6.  v3:= v5.`n.c.a.y.d.b` @type ^`n.c.a.g` @kind object;
  #L4273ba.  call temp:= `equals`(v1, v3) @signature `Ln/c/a/g;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4273c0.  v1:= temp;
  #L4273c2.  if v1 == 0 then goto L4273f0;
  #L4273c6.  v1:= v4.`n.c.a.y.d.c` @type ^`n.c.a.r` @kind object;
  #L4273ca.  v3:= v5.`n.c.a.y.d.c` @type ^`n.c.a.r` @kind object;
  #L4273ce.  call temp:= `equals`(v1, v3) @signature `Ln/c/a/r;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4273d4.  v1:= temp;
  #L4273d6.  if v1 == 0 then goto L4273f0;
  #L4273da.  v1:= v4.`n.c.a.y.d.d` @type ^`n.c.a.r` @kind object;
  #L4273de.  v5:= v5.`n.c.a.y.d.d` @type ^`n.c.a.r` @kind object;
  #L4273e2.  call temp:= `equals`(v1, v5) @signature `Ln/c/a/r;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4273e8.  v5:= temp;
  #L4273ea.  if v5 == 0 then goto L4273f0;
  #L4273ee.  goto L4273f2;
  #L4273f0.  v0:= 0I;
  #L4273f2.  return v0;
  #L4273f4.  return v2;
}
procedure `n.c.a.d` `h`(`n.c.a.y.d` v2 @kind this) @signature `Ln/c/a/y/d;.h:()Ln/c/a/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42762c.  call temp:= `s`(v2) @signature `Ln/c/a/y/d;.s:()I` @kind direct;
  #L427632.  v0:= temp;
  #L427634.  v0:= (`long`) v0 @kind i2l;
  #L427636.  call temp:= `b`(v0) @signature `Ln/c/a/d;.b:(J)Ln/c/a/d;` @kind static;
  #L42763c.  v0:= temp @kind object;
  #L42763e.  return v0 @kind object;
}
procedure `int` `hashCode`(`n.c.a.y.d` v3 @kind this) @signature `Ln/c/a/y/d;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4274c4.  v0:= v3.`n.c.a.y.d.b` @type ^`n.c.a.g` @kind object;
  #L4274c8.  call temp:= `hashCode`(v0) @signature `Ln/c/a/g;.hashCode:()I` @kind virtual;
  #L4274ce.  v0:= temp;
  #L4274d0.  v1:= v3.`n.c.a.y.d.c` @type ^`n.c.a.r` @kind object;
  #L4274d4.  call temp:= `hashCode`(v1) @signature `Ln/c/a/r;.hashCode:()I` @kind virtual;
  #L4274da.  v1:= temp;
  #L4274dc.  v0:= v0 ^~ v1 @kind int;
  #L4274de.  v1:= v3.`n.c.a.y.d.d` @type ^`n.c.a.r` @kind object;
  #L4274e2.  call temp:= `hashCode`(v1) @signature `Ln/c/a/r;.hashCode:()I` @kind virtual;
  #L4274e8.  v1:= temp;
  #L4274ea.  v2:= 16I;
  #L4274ee.  call temp:= `rotateLeft`(v1, v2) @signature `Ljava/lang/Integer;.rotateLeft:(II)I` @kind static;
  #L4274f4.  v1:= temp;
  #L4274f6.  v0:= v0 ^~ v1 @kind int;
  #L4274f8.  return v0;
}
procedure `n.c.a.e` `k`(`n.c.a.y.d` v2 @kind this) @signature `Ln/c/a/y/d;.k:()Ln/c/a/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L427650.  v0:= v2.`n.c.a.y.d.b` @type ^`n.c.a.g` @kind object;
  #L427654.  v1:= v2.`n.c.a.y.d.c` @type ^`n.c.a.r` @kind object;
  #L427658.  call temp:= `b`(v0, v1) @signature `Ln/c/a/u/c;.b:(Ln/c/a/r;)Ln/c/a/e;` @kind virtual;
  #L42765e.  v0:= temp @kind object;
  #L427660.  return v0 @kind object;
}
procedure `n.c.a.r` `l`(`n.c.a.y.d` v1 @kind this) @signature `Ln/c/a/y/d;.l:()Ln/c/a/r;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4276b4.  v0:= v1.`n.c.a.y.d.d` @type ^`n.c.a.r` @kind object;
  #L4276b8.  return v0 @kind object;
}
procedure `n.c.a.r` `m`(`n.c.a.y.d` v1 @kind this) @signature `Ln/c/a/y/d;.m:()Ln/c/a/r;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4276cc.  v0:= v1.`n.c.a.y.d.c` @type ^`n.c.a.r` @kind object;
  #L4276d0.  return v0 @kind object;
}
procedure `java.util.List` `n`(`n.c.a.y.d` v3 @kind this) @signature `Ln/c/a/y/d;.n:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4275b4.  call temp:= `o`(v3) @signature `Ln/c/a/y/d;.o:()Z` @kind virtual;
  #L4275ba.  v0:= temp;
  #L4275bc.  if v0 == 0 then goto L4275ca;
  #L4275c0.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L4275c6.  v0:= temp @kind object;
  #L4275c8.  return v0 @kind object;
  #L4275ca.  v0:= 2I;
  #L4275cc.  v0:= new `n.c.a.r`[v0];
  #L4275d0.  v1:= 0I;
  #L4275d2.  call temp:= `m`(v3) @signature `Ln/c/a/y/d;.m:()Ln/c/a/r;` @kind virtual;
  #L4275d8.  v2:= temp @kind object;
  #L4275da.  v0[v1]:= v2 @kind object;
  #L4275de.  v1:= 1I;
  #L4275e0.  call temp:= `l`(v3) @signature `Ln/c/a/y/d;.l:()Ln/c/a/r;` @kind virtual;
  #L4275e6.  v2:= temp @kind object;
  #L4275e8.  v0[v1]:= v2 @kind object;
  #L4275ec.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4275f2.  v0:= temp @kind object;
  #L4275f4.  return v0 @kind object;
}
procedure `boolean` `o`(`n.c.a.y.d` v2 @kind this) @signature `Ln/c/a/y/d;.o:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L427408.  call temp:= `l`(v2) @signature `Ln/c/a/y/d;.l:()Ln/c/a/r;` @kind virtual;
  #L42740e.  v0:= temp @kind object;
  #L427410.  call temp:= `k`(v0) @signature `Ln/c/a/r;.k:()I` @kind virtual;
  #L427416.  v0:= temp;
  #L427418.  call temp:= `m`(v2) @signature `Ln/c/a/y/d;.m:()Ln/c/a/r;` @kind virtual;
  #L42741e.  v1:= temp @kind object;
  #L427420.  call temp:= `k`(v1) @signature `Ln/c/a/r;.k:()I` @kind virtual;
  #L427426.  v1:= temp;
  #L427428.  if v0 <= v1 then goto L427430;
  #L42742c.  v0:= 1I;
  #L42742e.  goto L427432;
  #L427430.  v0:= 0I;
  #L427432.  return v0;
}
procedure `long` `p`(`n.c.a.y.d` v2 @kind this) @signature `Ln/c/a/y/d;.p:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L427608.  v0:= v2.`n.c.a.y.d.b` @type ^`n.c.a.g` @kind object;
  #L42760c.  v1:= v2.`n.c.a.y.d.c` @type ^`n.c.a.r` @kind object;
  #L427610.  call temp:= `a`(v0, v1) @signature `Ln/c/a/u/c;.a:(Ln/c/a/r;)J` @kind virtual;
  #L427616.  v0:= temp @kind wide;
  #L427618.  return v0 @kind wide;
}
procedure `java.lang.String` `toString`(`n.c.a.y.d` v2 @kind this) @signature `Ln/c/a/y/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42752c.  v0:= new `java.lang.StringBuilder`;
  #L427530.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L427536.  v1:= "Transition[" @kind object;
  #L42753a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427540.  call temp:= `o`(v2) @signature `Ln/c/a/y/d;.o:()Z` @kind virtual;
  #L427546.  v1:= temp;
  #L427548.  if v1 == 0 then goto L427552;
  #L42754c.  v1:= "Gap" @kind object;
  #L427550.  goto L427556;
  #L427552.  v1:= "Overlap" @kind object;
  #L427556.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42755c.  v1:= " at " @kind object;
  #L427560.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427566.  v1:= v2.`n.c.a.y.d.b` @type ^`n.c.a.g` @kind object;
  #L42756a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427570.  v1:= v2.`n.c.a.y.d.c` @type ^`n.c.a.r` @kind object;
  #L427574.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42757a.  v1:= " to " @kind object;
  #L42757e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427584.  v1:= v2.`n.c.a.y.d.d` @type ^`n.c.a.r` @kind object;
  #L427588.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42758e.  v1:= 93I;
  #L427592.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L427598.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42759e.  v0:= temp @kind object;
  #L4275a0.  return v0 @kind object;
}
