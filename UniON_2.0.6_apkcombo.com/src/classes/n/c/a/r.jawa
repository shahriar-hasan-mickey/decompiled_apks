record `n.c.a.r` @kind class @AccessFlag PUBLIC_FINAL extends `n.c.a.q` @kind class, `n.c.a.x.e` @kind interface, `n.c.a.x.f` @kind interface, `java.lang.Comparable` @kind interface, `java.io.Serializable` @kind interface {
  `int` `n.c.a.r.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `n.c.a.r.c` @AccessFlag PRIVATE_FINAL_TRANSIENT;
}
global `java.util.concurrent.ConcurrentMap` `@@n.c.a.r.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentMap` `@@n.c.a.r.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `n.c.a.r` `@@n.c.a.r.f` @AccessFlag PUBLIC_STATIC_FINAL;
global `n.c.a.r` `@@n.c.a.r.g` @AccessFlag PUBLIC_STATIC_FINAL;
global `n.c.a.r` `@@n.c.a.r.h` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln/c/a/r;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L411864.  v0:= new `n.c.a.r$a`;
  #L411868.  call `<init>`(v0) @signature `Ln/c/a/r$a;.<init>:()V` @kind direct;
  #L41186e.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L411872.  v1:= 4I;
  #L411874.  v2:= 0.75F;
  #L411878.  v3:= 16I;
  #L41187c.  call `<init>`(v0, v3, v2, v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:(IFI)V` @kind direct;
  #L411882.  `@@n.c.a.r.d` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L411886.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L41188a.  call `<init>`(v0, v3, v2, v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:(IFI)V` @kind direct;
  #L411890.  `@@n.c.a.r.e` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L411894.  v0:= 0I;
  #L411896.  call temp:= `b`(v0) @signature `Ln/c/a/r;.b:(I)Ln/c/a/r;` @kind static;
  #L41189c.  v0:= temp @kind object;
  #L41189e.  `@@n.c.a.r.f` @type ^`n.c.a.r` := v0 @kind object;
  #L4118a2.  v0:= -64800I;
  #L4118a8.  call temp:= `b`(v0) @signature `Ln/c/a/r;.b:(I)Ln/c/a/r;` @kind static;
  #L4118ae.  v0:= temp @kind object;
  #L4118b0.  `@@n.c.a.r.g` @type ^`n.c.a.r` := v0 @kind object;
  #L4118b4.  v0:= 64800I;
  #L4118ba.  call temp:= `b`(v0) @signature `Ln/c/a/r;.b:(I)Ln/c/a/r;` @kind static;
  #L4118c0.  v0:= temp @kind object;
  #L4118c2.  `@@n.c.a.r.h` @type ^`n.c.a.r` := v0 @kind object;
  #L4118c6.  return @kind void;
}
procedure `void` `<init>`(`n.c.a.r` v0 @kind this, `int` v1 ) @signature `Ln/c/a/r;.<init>:(I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4118d8.  call `<init>`(v0) @signature `Ln/c/a/q;.<init>:()V` @kind direct;
  #L4118de.  v0.`n.c.a.r.b` @type ^`int` := v1;
  #L4118e2.  call temp:= `a`(v1) @signature `Ln/c/a/r;.a:(I)Ljava/lang/String;` @kind static;
  #L4118e8.  v1:= temp @kind object;
  #L4118ea.  v0.`n.c.a.r.c` @type ^`java.lang.String` := v1 @kind object;
  #L4118ee.  return @kind void;
}
procedure `int` `a`(`java.lang.CharSequence` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Ln/c/a/r;.a:(Ljava/lang/CharSequence;IZ)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L4111d8.  if v4 == 0 then goto L411220;
  #L4111dc.  v4:= v3 + -1;
  #L4111e0.  call temp:= `charAt`(v2, v4) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4111e6.  v4:= temp;
  #L4111e8.  v0:= 58I;
  #L4111ec.  if v4 != v0 then goto L4111f2;
  #L4111f0.  goto L411220;
  #L4111f2.  v3:= new `n.c.a.b`;
  #L4111f6.  v4:= new `java.lang.StringBuilder`;
  #L4111fa.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L411200.  v0:= "Invalid ID for ZoneOffset, colon not found when expected: " @kind object;
  #L411204.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41120a.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411210.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L411216.  v2:= temp @kind object;
  #L411218.  call `<init>`(v3, v2) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41121e.  throw v3;
  #L411220.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L411226.  v4:= temp;
  #L411228.  v3:= v3 + 1;
  #L41122c.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L411232.  v3:= temp;
  #L411234.  v0:= 48I;
  #L411238.  if v4 < v0 then goto L411258;
  #L41123c.  v1:= 57I;
  #L411240.  if v4 > v1 then goto L411258;
  #L411244.  if v3 < v0 then goto L411258;
  #L411248.  if v3 > v1 then goto L411258;
  #L41124c.  v4:= v4 - v0 @kind int;
  #L41124e.  v4:= v4 * 10;
  #L411252.  v3:= v3 - v0 @kind int;
  #L411254.  v4:= v4 + v3 @kind int;
  #L411256.  return v4;
  #L411258.  v3:= new `n.c.a.b`;
  #L41125c.  v4:= new `java.lang.StringBuilder`;
  #L411260.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L411266.  v0:= "Invalid ID for ZoneOffset, non numeric characters found: " @kind object;
  #L41126a.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411270.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411276.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41127c.  v2:= temp @kind object;
  #L41127e.  call `<init>`(v3, v2) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L411284.  throw v3;
}
procedure `java.lang.String` `a`(`int` v6 ) @signature `Ln/c/a/r;.a:(I)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L411370.  if v6 != 0 then goto L41137a;
  #L411374.  v6:= "Z" @kind object;
  #L411378.  return v6 @kind object;
  #L41137a.  call temp:= `abs`(v6) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L411380.  v0:= temp;
  #L411382.  v1:= new `java.lang.StringBuilder`;
  #L411386.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41138c.  v2:= v0 / 3600;
  #L411390.  v3:= v0 / 60;
  #L411394.  v3:= v3 %% 60;
  #L411398.  if v6 >= 0 then goto L4113a2;
  #L41139c.  v6:= "-" @kind object;
  #L4113a0.  goto L4113a6;
  #L4113a2.  v6:= "+" @kind object;
  #L4113a6.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4113ac.  v6:= 10I;
  #L4113b0.  if v2 >= v6 then goto L4113ba;
  #L4113b4.  v4:= "0" @kind object;
  #L4113b8.  goto L4113be;
  #L4113ba.  v4:= "" @kind object;
  #L4113be.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4113c4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4113ca.  v2:= ":0" @kind object;
  #L4113ce.  v4:= ":" @kind object;
  #L4113d2.  if v3 >= v6 then goto L4113da;
  #L4113d6.  v5:= v2 @kind object;
  #L4113d8.  goto L4113dc;
  #L4113da.  v5:= v4 @kind object;
  #L4113dc.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4113e2.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4113e8.  v0:= v0 %% 60;
  #L4113ec.  if v0 == 0 then goto L411404;
  #L4113f0.  if v0 >= v6 then goto L4113f6;
  #L4113f4.  goto L4113f8;
  #L4113f6.  v2:= v4 @kind object;
  #L4113f8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4113fe.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L411404.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41140a.  v6:= temp @kind object;
  #L41140c.  return v6 @kind object;
}
procedure `n.c.a.r` `a`(`int` v0 , `int` v1 , `int` v2 ) @signature `Ln/c/a/r;.a:(III)Ln/c/a/r;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4116bc.  call `c`(v0, v1, v2) @signature `Ln/c/a/r;.c:(III)V` @kind static;
  #L4116c2.  call temp:= `b`(v0, v1, v2) @signature `Ln/c/a/r;.b:(III)I` @kind static;
  #L4116c8.  v0:= temp;
  #L4116ca.  call temp:= `b`(v0) @signature `Ln/c/a/r;.b:(I)Ln/c/a/r;` @kind static;
  #L4116d0.  v0:= temp @kind object;
  #L4116d2.  return v0 @kind object;
}
procedure `n.c.a.r` `a`(`java.io.DataInput` v2 @kind object) @signature `Ln/c/a/r;.a:(Ljava/io/DataInput;)Ln/c/a/r;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L411780.  call temp:= `readByte`(v2) @signature `Ljava/io/DataInput;.readByte:()B` @kind interface;
  #L411786.  v0:= temp;
  #L411788.  v1:= 127I;
  #L41178c.  if v0 != v1 then goto L4117a2;
  #L411790.  call temp:= `readInt`(v2) @signature `Ljava/io/DataInput;.readInt:()I` @kind interface;
  #L411796.  v2:= temp;
  #L411798.  call temp:= `b`(v2) @signature `Ln/c/a/r;.b:(I)Ln/c/a/r;` @kind static;
  #L41179e.  v2:= temp @kind object;
  #L4117a0.  goto L4117ae;
  #L4117a2.  v0:= v0 * 900;
  #L4117a6.  call temp:= `b`(v0) @signature `Ln/c/a/r;.b:(I)Ln/c/a/r;` @kind static;
  #L4117ac.  v2:= temp @kind object;
  #L4117ae.  return v2 @kind object;
}
procedure `n.c.a.r` `a`(`java.lang.String` v7 @kind object) @signature `Ln/c/a/r;.a:(Ljava/lang/String;)Ln/c/a/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L411528.  v0:= "offsetId" @kind object;
  #L41152c.  call temp:= `a`(v7, v0) @signature `Ln/c/a/w/d;.a:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L411532.  v0:= `@@n.c.a.r.e` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L411536.  call temp:= `get`(v0, v7) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41153c.  v0:= temp @kind object;
  #L41153e.  v0:= (`n.c.a.r`) v0 @kind object;
  #L411542.  if v0 == 0 then goto L411548;
  #L411546.  return v0 @kind object;
  #L411548.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L41154e.  v0:= temp;
  #L411550.  v1:= 2I;
  #L411552.  v2:= 1I;
  #L411554.  v3:= 0I;
  #L411556.  if v0 == v1 then goto L411602;
  #L41155a.  v1:= 3I;
  #L41155c.  if v0 == v1 then goto L41163a;
  #L411560.  v4:= 5I;
  #L411562.  if v0 == v4 then goto L4115f0;
  #L411566.  v5:= 6I;
  #L411568.  v6:= 4I;
  #L41156a.  if v0 == v5 then goto L4115de;
  #L41156e.  v5:= 7I;
  #L411570.  if v0 == v5 then goto L4115c4;
  #L411574.  v1:= 9I;
  #L411578.  if v0 != v1 then goto L411596;
  #L41157c.  call temp:= `a`(v7, v2, v3) @signature `Ln/c/a/r;.a:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L411582.  v0:= temp;
  #L411584.  call temp:= `a`(v7, v6, v2) @signature `Ln/c/a/r;.a:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L41158a.  v1:= temp;
  #L41158c.  call temp:= `a`(v7, v5, v2) @signature `Ln/c/a/r;.a:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L411592.  v2:= temp;
  #L411594.  goto L411646;
  #L411596.  v0:= new `n.c.a.b`;
  #L41159a.  v1:= new `java.lang.StringBuilder`;
  #L41159e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4115a4.  v2:= "Invalid ID for ZoneOffset, invalid format: " @kind object;
  #L4115a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4115ae.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4115b4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4115ba.  v7:= temp @kind object;
  #L4115bc.  call `<init>`(v0, v7) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4115c2.  throw v0;
  #L4115c4.  call temp:= `a`(v7, v2, v3) @signature `Ln/c/a/r;.a:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L4115ca.  v0:= temp;
  #L4115cc.  call temp:= `a`(v7, v1, v3) @signature `Ln/c/a/r;.a:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L4115d2.  v1:= temp;
  #L4115d4.  call temp:= `a`(v7, v4, v3) @signature `Ln/c/a/r;.a:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L4115da.  v2:= temp;
  #L4115dc.  goto L411646;
  #L4115de.  call temp:= `a`(v7, v2, v3) @signature `Ln/c/a/r;.a:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L4115e4.  v0:= temp;
  #L4115e6.  call temp:= `a`(v7, v6, v2) @signature `Ln/c/a/r;.a:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L4115ec.  v1:= temp;
  #L4115ee.  goto L411644;
  #L4115f0.  call temp:= `a`(v7, v2, v3) @signature `Ln/c/a/r;.a:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L4115f6.  v0:= temp;
  #L4115f8.  call temp:= `a`(v7, v1, v3) @signature `Ln/c/a/r;.a:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L4115fe.  v1:= temp;
  #L411600.  goto L411644;
  #L411602.  v0:= new `java.lang.StringBuilder`;
  #L411606.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41160c.  call temp:= `charAt`(v7, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L411612.  v1:= temp;
  #L411614.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L41161a.  v1:= "0" @kind object;
  #L41161e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411624.  call temp:= `charAt`(v7, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L41162a.  v7:= temp;
  #L41162c.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L411632.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L411638.  v7:= temp @kind object;
  #L41163a.  call temp:= `a`(v7, v2, v3) @signature `Ln/c/a/r;.a:(Ljava/lang/CharSequence;IZ)I` @kind static;
  #L411640.  v0:= temp;
  #L411642.  v1:= 0I;
  #L411644.  v2:= 0I;
  #L411646.  call temp:= `charAt`(v7, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L41164c.  v3:= temp;
  #L41164e.  v4:= 43I;
  #L411652.  v5:= 45I;
  #L411656.  if v3 == v4 then goto L41168e;
  #L41165a.  if v3 != v5 then goto L411660;
  #L41165e.  goto L41168e;
  #L411660.  v0:= new `n.c.a.b`;
  #L411664.  v1:= new `java.lang.StringBuilder`;
  #L411668.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41166e.  v2:= "Invalid ID for ZoneOffset, plus/minus not found when expected: " @kind object;
  #L411672.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411678.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41167e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L411684.  v7:= temp @kind object;
  #L411686.  call `<init>`(v0, v7) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41168c.  throw v0;
  #L41168e.  if v3 != v5 then goto L4116a2;
  #L411692.  v7:= -v0 @kind int;
  #L411694.  v0:= -v1 @kind int;
  #L411696.  v1:= -v2 @kind int;
  #L411698.  call temp:= `a`(v7, v0, v1) @signature `Ln/c/a/r;.a:(III)Ln/c/a/r;` @kind static;
  #L41169e.  v7:= temp @kind object;
  #L4116a0.  return v7 @kind object;
  #L4116a2.  call temp:= `a`(v0, v1, v2) @signature `Ln/c/a/r;.a:(III)Ln/c/a/r;` @kind static;
  #L4116a8.  v7:= temp @kind object;
  #L4116aa.  return v7 @kind object;
}
procedure `n.c.a.r` `a`(`n.c.a.x.e` v3 @kind object) @signature `Ln/c/a/r;.a:(Ln/c/a/x/e;)Ln/c/a/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4114b0.  call temp:= `d`() @signature `Ln/c/a/x/j;.d:()Ln/c/a/x/k;` @kind static;
  #L4114b6.  v0:= temp @kind object;
  #L4114b8.  call temp:= `a`(v3, v0) @signature `Ln/c/a/x/e;.a:(Ln/c/a/x/k;)Ljava/lang/Object;` @kind interface;
  #L4114be.  v0:= temp @kind object;
  #L4114c0.  v0:= (`n.c.a.r`) v0 @kind object;
  #L4114c4.  if v0 == 0 then goto L4114ca;
  #L4114c8.  return v0 @kind object;
  #L4114ca.  v0:= new `n.c.a.b`;
  #L4114ce.  v1:= new `java.lang.StringBuilder`;
  #L4114d2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4114d8.  v2:= "Unable to obtain ZoneOffset from TemporalAccessor: " @kind object;
  #L4114dc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4114e2.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4114e8.  v2:= ", type " @kind object;
  #L4114ec.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4114f2.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4114f8.  v3:= temp @kind object;
  #L4114fa.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L411500.  v3:= temp @kind object;
  #L411502.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411508.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41150e.  v3:= temp @kind object;
  #L411510.  call `<init>`(v0, v3) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L411516.  throw v0;
}
procedure `int` `b`(`int` v0 , `int` v1 , `int` v2 ) @signature `Ln/c/a/r;.b:(III)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L411298.  v0:= v0 * 3600;
  #L41129c.  v1:= v1 * 60;
  #L4112a0.  v0:= v0 + v1 @kind int;
  #L4112a2.  v0:= v0 + v2 @kind int;
  #L4112a4.  return v0;
}
procedure `n.c.a.r` `b`(`int` v2 ) @signature `Ln/c/a/r;.b:(I)Ln/c/a/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4116e4.  call temp:= `abs`(v2) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L4116ea.  v0:= temp;
  #L4116ec.  v1:= 64800I;
  #L4116f2.  if v0 > v1 then goto L411760;
  #L4116f6.  v0:= v2 %% 900;
  #L4116fa.  if v0 != 0 then goto L411754;
  #L4116fe.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L411704.  v0:= temp @kind object;
  #L411706.  v1:= `@@n.c.a.r.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L41170a.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L411710.  v1:= temp @kind object;
  #L411712.  v1:= (`n.c.a.r`) v1 @kind object;
  #L411716.  if v1 != 0 then goto L411752;
  #L41171a.  v1:= new `n.c.a.r`;
  #L41171e.  call `<init>`(v1, v2) @signature `Ln/c/a/r;.<init>:(I)V` @kind direct;
  #L411724.  v2:= `@@n.c.a.r.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L411728.  call temp:= `putIfAbsent`(v2, v0, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41172e.  v2:= `@@n.c.a.r.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L411732.  call temp:= `get`(v2, v0) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L411738.  v2:= temp @kind object;
  #L41173a.  v1:= v2 @kind object;
  #L41173c.  v1:= (`n.c.a.r`) v1 @kind object;
  #L411740.  v2:= `@@n.c.a.r.e` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L411744.  call temp:= `b`(v1) @signature `Ln/c/a/r;.b:()Ljava/lang/String;` @kind virtual;
  #L41174a.  v0:= temp @kind object;
  #L41174c.  call temp:= `putIfAbsent`(v2, v0, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L411752.  return v1 @kind object;
  #L411754.  v0:= new `n.c.a.r`;
  #L411758.  call `<init>`(v0, v2) @signature `Ln/c/a/r;.<init>:(I)V` @kind direct;
  #L41175e.  return v0 @kind object;
  #L411760.  v2:= new `n.c.a.b`;
  #L411764.  v0:= "Zone offset not in valid range: -18:00 to +18:00" @kind object;
  #L411768.  call `<init>`(v2, v0) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41176e.  throw v2;
}
procedure `void` `c`(`int` v4 , `int` v5 , `int` v6 ) @signature `Ln/c/a/r;.c:(III)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L411900.  v0:= -18I;
  #L411904.  if v4 < v0 then goto L411a3e;
  #L411908.  v0:= 18I;
  #L41190c.  if v4 > v0 then goto L411a3e;
  #L411910.  if v4 <= 0 then goto L41192e;
  #L411914.  if v5 < 0 then goto L41191e;
  #L411918.  if v6 < 0 then goto L41191e;
  #L41191c.  goto L41196e;
  #L41191e.  v4:= new `n.c.a.b`;
  #L411922.  v5:= "Zone offset minutes and seconds must be positive because hours is positive" @kind object;
  #L411926.  call `<init>`(v4, v5) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41192c.  throw v4;
  #L41192e.  if v4 >= 0 then goto L41194c;
  #L411932.  if v5 > 0 then goto L41193c;
  #L411936.  if v6 > 0 then goto L41193c;
  #L41193a.  goto L41196e;
  #L41193c.  v4:= new `n.c.a.b`;
  #L411940.  v5:= "Zone offset minutes and seconds must be negative because hours is negative" @kind object;
  #L411944.  call `<init>`(v4, v5) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41194a.  throw v4;
  #L41194c.  if v5 <= 0 then goto L411954;
  #L411950.  if v6 < 0 then goto L41195e;
  #L411954.  if v5 >= 0 then goto L41196e;
  #L411958.  if v6 > 0 then goto L41195e;
  #L41195c.  goto L41196e;
  #L41195e.  v4:= new `n.c.a.b`;
  #L411962.  v5:= "Zone offset minutes and seconds must have the same sign" @kind object;
  #L411966.  call `<init>`(v4, v5) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41196c.  throw v4;
  #L41196e.  call temp:= `abs`(v5) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L411974.  v1:= temp;
  #L411976.  v2:= " is not in the range 0 to 59" @kind object;
  #L41197a.  v3:= 59I;
  #L41197e.  if v1 > v3 then goto L411a02;
  #L411982.  call temp:= `abs`(v6) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L411988.  v1:= temp;
  #L41198a.  if v1 > v3 then goto L4119c6;
  #L41198e.  call temp:= `abs`(v4) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L411994.  v4:= temp;
  #L411996.  if v4 != v0 then goto L4119c4;
  #L41199a.  call temp:= `abs`(v5) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L4119a0.  v4:= temp;
  #L4119a2.  if v4 > 0 then goto L4119b4;
  #L4119a6.  call temp:= `abs`(v6) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L4119ac.  v4:= temp;
  #L4119ae.  if v4 > 0 then goto L4119b4;
  #L4119b2.  goto L4119c4;
  #L4119b4.  v4:= new `n.c.a.b`;
  #L4119b8.  v5:= "Zone offset not in valid range: -18:00 to +18:00" @kind object;
  #L4119bc.  call `<init>`(v4, v5) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4119c2.  throw v4;
  #L4119c4.  return @kind void;
  #L4119c6.  v4:= new `n.c.a.b`;
  #L4119ca.  v5:= new `java.lang.StringBuilder`;
  #L4119ce.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4119d4.  v0:= "Zone offset seconds not in valid range: abs(value) " @kind object;
  #L4119d8.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4119de.  call temp:= `abs`(v6) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L4119e4.  v6:= temp;
  #L4119e6.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4119ec.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4119f2.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4119f8.  v5:= temp @kind object;
  #L4119fa.  call `<init>`(v4, v5) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L411a00.  throw v4;
  #L411a02.  v4:= new `n.c.a.b`;
  #L411a06.  v6:= new `java.lang.StringBuilder`;
  #L411a0a.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L411a10.  v0:= "Zone offset minutes not in valid range: abs(value) " @kind object;
  #L411a14.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411a1a.  call temp:= `abs`(v5) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L411a20.  v5:= temp;
  #L411a22.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L411a28.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411a2e.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L411a34.  v5:= temp @kind object;
  #L411a36.  call `<init>`(v4, v5) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L411a3c.  throw v4;
  #L411a3e.  v5:= new `n.c.a.b`;
  #L411a42.  v6:= new `java.lang.StringBuilder`;
  #L411a46.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L411a4c.  v0:= "Zone offset hours not in valid range: value " @kind object;
  #L411a50.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411a56.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L411a5c.  v4:= " is not in the range -18 to 18" @kind object;
  #L411a60.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411a66.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L411a6c.  v4:= temp @kind object;
  #L411a6e.  call `<init>`(v5, v4) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L411a74.  throw v5;
}
procedure `java.lang.Object` `readResolve`(`n.c.a.r` v2 @kind this) @signature `Ln/c/a/r;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L411330.  v0:= new `java.io.InvalidObjectException`;
  #L411334.  v1:= "Deserialization via serialization delegate" @kind object;
  #L411338.  call `<init>`(v0, v1) @signature `Ljava/io/InvalidObjectException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41133e.  throw v0;
}
procedure `java.lang.Object` `writeReplace`(`n.c.a.r` v2 @kind this) @signature `Ln/c/a/r;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L411350.  v0:= new `n.c.a.n`;
  #L411354.  v1:= 8I;
  #L411358.  call `<init>`(v0, v1, v2) @signature `Ln/c/a/n;.<init>:(BLjava/lang/Object;)V` @kind direct;
  #L41135e.  return v0 @kind object;
}
procedure `int` `a`(`n.c.a.r` v1 @kind this, `n.c.a.r` v2 @kind object) @signature `Ln/c/a/r;.a:(Ln/c/a/r;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41111c.  v2:= v2.`n.c.a.r.b` @type ^`int`;
  #L411120.  v0:= v1.`n.c.a.r.b` @type ^`int`;
  #L411124.  v2:= v2 - v0 @kind int;
  #L411126.  return v2;
}
procedure `java.lang.Object` `a`(`n.c.a.r` v1 @kind this, `n.c.a.x.k` v2 @kind object) @signature `Ln/c/a/r;.a:(Ln/c/a/x/k;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4112b8.  call temp:= `d`() @signature `Ln/c/a/x/j;.d:()Ln/c/a/x/k;` @kind static;
  #L4112be.  v0:= temp @kind object;
  #L4112c0.  if v2 == v0 then goto L41131e;
  #L4112c4.  call temp:= `f`() @signature `Ln/c/a/x/j;.f:()Ln/c/a/x/k;` @kind static;
  #L4112ca.  v0:= temp @kind object;
  #L4112cc.  if v2 != v0 then goto L4112d2;
  #L4112d0.  goto L41131e;
  #L4112d2.  call temp:= `b`() @signature `Ln/c/a/x/j;.b:()Ln/c/a/x/k;` @kind static;
  #L4112d8.  v0:= temp @kind object;
  #L4112da.  if v2 == v0 then goto L41131a;
  #L4112de.  call temp:= `c`() @signature `Ln/c/a/x/j;.c:()Ln/c/a/x/k;` @kind static;
  #L4112e4.  v0:= temp @kind object;
  #L4112e6.  if v2 == v0 then goto L41131a;
  #L4112ea.  call temp:= `e`() @signature `Ln/c/a/x/j;.e:()Ln/c/a/x/k;` @kind static;
  #L4112f0.  v0:= temp @kind object;
  #L4112f2.  if v2 == v0 then goto L41131a;
  #L4112f6.  call temp:= `a`() @signature `Ln/c/a/x/j;.a:()Ln/c/a/x/k;` @kind static;
  #L4112fc.  v0:= temp @kind object;
  #L4112fe.  if v2 == v0 then goto L41131a;
  #L411302.  call temp:= `g`() @signature `Ln/c/a/x/j;.g:()Ln/c/a/x/k;` @kind static;
  #L411308.  v0:= temp @kind object;
  #L41130a.  if v2 != v0 then goto L411310;
  #L41130e.  goto L41131a;
  #L411310.  call temp:= `a`(v2, v1) @signature `Ln/c/a/x/k;.a:(Ln/c/a/x/e;)Ljava/lang/Object;` @kind interface;
  #L411316.  v2:= temp @kind object;
  #L411318.  return v2 @kind object;
  #L41131a.  v2:= 0I;
  #L41131c.  return v2 @kind object;
  #L41131e.  return v1 @kind object;
}
procedure `n.c.a.x.d` `a`(`n.c.a.r` v3 @kind this, `n.c.a.x.d` v4 @kind object) @signature `Ln/c/a/r;.a:(Ln/c/a/x/d;)Ln/c/a/x/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4117c0.  v0:= `@@n.c.a.x.a.G` @type ^`n.c.a.x.a` @kind object;
  #L4117c4.  v1:= v3.`n.c.a.r.b` @type ^`int`;
  #L4117c8.  v1:= (`long`) v1 @kind i2l;
  #L4117ca.  call temp:= `a`(v4, v0, v1) @signature `Ln/c/a/x/d;.a:(Ln/c/a/x/i;J)Ln/c/a/x/d;` @kind interface;
  #L4117d0.  v4:= temp @kind object;
  #L4117d2.  return v4 @kind object;
}
procedure `n.c.a.x.n` `a`(`n.c.a.r` v3 @kind this, `n.c.a.x.i` v4 @kind object) @signature `Ln/c/a/r;.a:(Ln/c/a/x/i;)Ln/c/a/x/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4117e4.  v0:= `@@n.c.a.x.a.G` @type ^`n.c.a.x.a` @kind object;
  #L4117e8.  if v4 != v0 then goto L4117f6;
  #L4117ec.  call temp:= `h`(v4) @signature `Ln/c/a/x/i;.h:()Ln/c/a/x/n;` @kind interface;
  #L4117f2.  v4:= temp @kind object;
  #L4117f4.  return v4 @kind object;
  #L4117f6.  v0:= instanceof @variable v4 @type ^`n.c.a.x.a` @kind boolean;
  #L4117fa.  if v0 != 0 then goto L411808;
  #L4117fe.  call temp:= `c`(v4, v3) @signature `Ln/c/a/x/i;.c:(Ln/c/a/x/e;)Ln/c/a/x/n;` @kind interface;
  #L411804.  v4:= temp @kind object;
  #L411806.  return v4 @kind object;
  #L411808.  v0:= new `n.c.a.x.m`;
  #L41180c.  v1:= new `java.lang.StringBuilder`;
  #L411810.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L411816.  v2:= "Unsupported field: " @kind object;
  #L41181a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411820.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411826.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41182c.  v4:= temp @kind object;
  #L41182e.  call `<init>`(v0, v4) @signature `Ln/c/a/x/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L411834.  throw v0;
}
procedure `void` `a`(`n.c.a.r` v1 @kind this, `java.io.DataOutput` v2 @kind object) @signature `Ln/c/a/r;.a:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;

  #L411a88.  v0:= 8I;
  #L411a8c.  call `writeByte`(v2, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L411a92.  call `b`(v1, v2) @signature `Ln/c/a/r;.b:(Ljava/io/DataOutput;)V` @kind virtual;
  #L411a98.  return @kind void;
}
procedure `java.lang.String` `b`(`n.c.a.r` v1 @kind this) @signature `Ln/c/a/r;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411420.  v0:= v1.`n.c.a.r.c` @type ^`java.lang.String` @kind object;
  #L411424.  return v0 @kind object;
}
procedure `void` `b`(`n.c.a.r` v3 @kind this, `java.io.DataOutput` v4 @kind object) @signature `Ln/c/a/r;.b:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L411aac.  v0:= v3.`n.c.a.r.b` @type ^`int`;
  #L411ab0.  v1:= v0 %% 900;
  #L411ab4.  v2:= 127I;
  #L411ab8.  if v1 != 0 then goto L411ac2;
  #L411abc.  v1:= v0 / 900;
  #L411ac0.  goto L411ac6;
  #L411ac2.  v1:= 127I;
  #L411ac6.  call `writeByte`(v4, v1) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L411acc.  if v1 != v2 then goto L411ad6;
  #L411ad0.  call `writeInt`(v4, v0) @signature `Ljava/io/DataOutput;.writeInt:(I)V` @kind interface;
  #L411ad6.  return @kind void;
}
procedure `boolean` `b`(`n.c.a.r` v3 @kind this, `n.c.a.x.i` v4 @kind object) @signature `Ln/c/a/r;.b:(Ln/c/a/x/i;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4110bc.  v0:= instanceof @variable v4 @type ^`n.c.a.x.a` @kind boolean;
  #L4110c0.  v1:= 1I;
  #L4110c2.  v2:= 0I;
  #L4110c4.  if v0 == 0 then goto L4110d6;
  #L4110c8.  v0:= `@@n.c.a.x.a.G` @type ^`n.c.a.x.a` @kind object;
  #L4110cc.  if v4 != v0 then goto L4110d2;
  #L4110d0.  goto L4110d4;
  #L4110d2.  v1:= 0I;
  #L4110d4.  return v1;
  #L4110d6.  if v4 == 0 then goto L4110e8;
  #L4110da.  call temp:= `a`(v4, v3) @signature `Ln/c/a/x/i;.a:(Ln/c/a/x/e;)Z` @kind interface;
  #L4110e0.  v4:= temp;
  #L4110e2.  if v4 == 0 then goto L4110e8;
  #L4110e6.  goto L4110ea;
  #L4110e8.  v1:= 0I;
  #L4110ea.  return v1;
}
procedure `int` `c`(`n.c.a.r` v3 @kind this, `n.c.a.x.i` v4 @kind object) @signature `Ln/c/a/r;.c:(Ln/c/a/x/i;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L411138.  v0:= `@@n.c.a.x.a.G` @type ^`n.c.a.x.a` @kind object;
  #L41113c.  if v4 != v0 then goto L411146;
  #L411140.  v4:= v3.`n.c.a.r.b` @type ^`int`;
  #L411144.  return v4;
  #L411146.  v0:= instanceof @variable v4 @type ^`n.c.a.x.a` @kind boolean;
  #L41114a.  if v0 != 0 then goto L411168;
  #L41114e.  call temp:= `a`(v3, v4) @signature `Ln/c/a/r;.a:(Ln/c/a/x/i;)Ln/c/a/x/n;` @kind virtual;
  #L411154.  v0:= temp @kind object;
  #L411156.  call temp:= `d`(v3, v4) @signature `Ln/c/a/r;.d:(Ln/c/a/x/i;)J` @kind virtual;
  #L41115c.  v1:= temp @kind wide;
  #L41115e.  call temp:= `a`(v0, v1, v4) @signature `Ln/c/a/x/n;.a:(JLn/c/a/x/i;)I` @kind virtual;
  #L411164.  v4:= temp;
  #L411166.  return v4;
  #L411168.  v0:= new `n.c.a.x.m`;
  #L41116c.  v1:= new `java.lang.StringBuilder`;
  #L411170.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L411176.  v2:= "Unsupported field: " @kind object;
  #L41117a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411180.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411186.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41118c.  v4:= temp @kind object;
  #L41118e.  call `<init>`(v0, v4) @signature `Ln/c/a/x/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L411194.  throw v0;
}
procedure `int` `compareTo`(`n.c.a.r` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Ln/c/a/r;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4110fc.  v1:= (`n.c.a.r`) v1 @kind object;
  #L411100.  call temp:= `a`(v0, v1) @signature `Ln/c/a/r;.a:(Ln/c/a/r;)I` @kind virtual;
  #L411106.  v1:= temp;
  #L411108.  return v1;
}
procedure `long` `d`(`n.c.a.r` v3 @kind this, `n.c.a.x.i` v4 @kind object) @signature `Ln/c/a/r;.d:(Ln/c/a/x/i;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L411450.  v0:= `@@n.c.a.x.a.G` @type ^`n.c.a.x.a` @kind object;
  #L411454.  if v4 != v0 then goto L411460;
  #L411458.  v4:= v3.`n.c.a.r.b` @type ^`int`;
  #L41145c.  v0:= (`long`) v4 @kind i2l;
  #L41145e.  return v0 @kind wide;
  #L411460.  v0:= instanceof @variable v4 @type ^`n.c.a.x.a` @kind boolean;
  #L411464.  if v0 != 0 then goto L411472;
  #L411468.  call temp:= `b`(v4, v3) @signature `Ln/c/a/x/i;.b:(Ln/c/a/x/e;)J` @kind interface;
  #L41146e.  v0:= temp @kind wide;
  #L411470.  return v0 @kind wide;
  #L411472.  v0:= new `n.c.a.b`;
  #L411476.  v1:= new `java.lang.StringBuilder`;
  #L41147a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L411480.  v2:= "Unsupported field: " @kind object;
  #L411484.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41148a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411490.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L411496.  v4:= temp @kind object;
  #L411498.  call `<init>`(v0, v4) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41149e.  throw v0;
}
procedure `n.c.a.y.f` `e`(`n.c.a.r` v1 @kind this) @signature `Ln/c/a/r;.e:()Ln/c/a/y/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411848.  call temp:= `a`(v1) @signature `Ln/c/a/y/f;.a:(Ln/c/a/r;)Ln/c/a/y/f;` @kind static;
  #L41184e.  v0:= temp @kind object;
  #L411850.  return v0 @kind object;
}
procedure `boolean` `equals`(`n.c.a.r` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Ln/c/a/r;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L411080.  v0:= 1I;
  #L411082.  if v3 != v4 then goto L411088;
  #L411086.  return v0;
  #L411088.  v1:= instanceof @variable v4 @type ^`n.c.a.r` @kind boolean;
  #L41108c.  v2:= 0I;
  #L41108e.  if v1 == 0 then goto L4110a8;
  #L411092.  v1:= v3.`n.c.a.r.b` @type ^`int`;
  #L411096.  v4:= (`n.c.a.r`) v4 @kind object;
  #L41109a.  v4:= v4.`n.c.a.r.b` @type ^`int`;
  #L41109e.  if v1 != v4 then goto L4110a4;
  #L4110a2.  goto L4110a6;
  #L4110a4.  v0:= 0I;
  #L4110a6.  return v0;
  #L4110a8.  return v2;
}
procedure `int` `hashCode`(`n.c.a.r` v1 @kind this) @signature `Ln/c/a/r;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4111c0.  v0:= v1.`n.c.a.r.b` @type ^`int`;
  #L4111c4.  return v0;
}
procedure `int` `k`(`n.c.a.r` v1 @kind this) @signature `Ln/c/a/r;.k:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4111a8.  v0:= v1.`n.c.a.r.b` @type ^`int`;
  #L4111ac.  return v0;
}
procedure `java.lang.String` `toString`(`n.c.a.r` v1 @kind this) @signature `Ln/c/a/r;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411438.  v0:= v1.`n.c.a.r.c` @type ^`java.lang.String` @kind object;
  #L41143c.  return v0 @kind object;
}
