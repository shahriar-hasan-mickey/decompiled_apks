record `n.c.a.x.n` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Serializable` @kind interface {
  `long` `n.c.a.x.n.b` @AccessFlag PRIVATE_FINAL;
  `long` `n.c.a.x.n.c` @AccessFlag PRIVATE_FINAL;
  `long` `n.c.a.x.n.d` @AccessFlag PRIVATE_FINAL;
  `long` `n.c.a.x.n.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.c.a.x.n` v0 @kind this, `long` v1 , `long` v3 , `long` v5 , `long` v7 ) @signature `Ln/c/a/x/n;.<init>:(JJJJ)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L425bd0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L425bd6.  v0.`n.c.a.x.n.b` @type ^`long` := v1 @kind wide;
  #L425bda.  v0.`n.c.a.x.n.c` @type ^`long` := v3 @kind wide;
  #L425bde.  v0.`n.c.a.x.n.d` @type ^`long` := v5 @kind wide;
  #L425be2.  v0.`n.c.a.x.n.e` @type ^`long` := v7 @kind wide;
  #L425be6.  return @kind void;
}
procedure `n.c.a.x.n` `a`(`long` v10 , `long` v12 ) @signature `Ln/c/a/x/n;.a:(JJ)Ln/c/a/x/n;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L425afc.  v0:= lcmp(v10, v12);
  #L425b00.  if v0 > 0 then goto L425b1a;
  #L425b04.  v0:= new `n.c.a.x.n`;
  #L425b08.  v1:= v0 @kind object;
  #L425b0a.  v2:= v10 @kind wide;
  #L425b0c.  v4:= v10 @kind wide;
  #L425b0e.  v6:= v12 @kind wide;
  #L425b10.  v8:= v12 @kind wide;
  #L425b12.  call `<init>`(v1, v2, v4, v6, v8) @signature `Ln/c/a/x/n;.<init>:(JJJJ)V` @kind direct;
  #L425b18.  return v0 @kind object;
  #L425b1a.  v10:= new `java.lang.IllegalArgumentException`;
  #L425b1e.  v11:= "Minimum value must be less than maximum value" @kind object;
  #L425b22.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425b28.  throw v10;
}
procedure `n.c.a.x.n` `a`(`long` v8 , `long` v10 , `long` v12 ) @signature `Ln/c/a/x/n;.a:(JJJ)Ln/c/a/x/n;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L425b3c.  v0:= v8 @kind wide;
  #L425b3e.  v2:= v8 @kind wide;
  #L425b40.  v4:= v10 @kind wide;
  #L425b42.  v6:= v12 @kind wide;
  #L425b44.  call temp:= `a`(v0, v2, v4, v6) @signature `Ln/c/a/x/n;.a:(JJJJ)Ln/c/a/x/n;` @kind static;
  #L425b4a.  v8:= temp @kind object;
  #L425b4c.  return v8 @kind object;
}
procedure `n.c.a.x.n` `a`(`long` v10 , `long` v12 , `long` v14 , `long` v16 ) @signature `Ln/c/a/x/n;.a:(JJJJ)Ln/c/a/x/n;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L425b60.  v0:= lcmp(v10, v12);
  #L425b64.  if v0 > 0 then goto L425bb0;
  #L425b68.  v0:= lcmp(v14, v16);
  #L425b6c.  if v0 > 0 then goto L425ba0;
  #L425b70.  v0:= lcmp(v12, v16);
  #L425b74.  if v0 > 0 then goto L425b90;
  #L425b78.  v9:= new `n.c.a.x.n`;
  #L425b7c.  v0:= v9 @kind object;
  #L425b7e.  v1:= v10 @kind wide;
  #L425b80.  v3:= v12 @kind wide;
  #L425b82.  v5:= v14 @kind wide;
  #L425b84.  v7:= v16 @kind wide;
  #L425b88.  call `<init>`(v0, v1, v3, v5, v7) @signature `Ln/c/a/x/n;.<init>:(JJJJ)V` @kind direct;
  #L425b8e.  return v9 @kind object;
  #L425b90.  v0:= new `java.lang.IllegalArgumentException`;
  #L425b94.  v1:= "Minimum value must be less than maximum value" @kind object;
  #L425b98.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425b9e.  throw v0;
  #L425ba0.  v0:= new `java.lang.IllegalArgumentException`;
  #L425ba4.  v1:= "Smallest maximum value must be less than largest maximum value" @kind object;
  #L425ba8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425bae.  throw v0;
  #L425bb0.  v0:= new `java.lang.IllegalArgumentException`;
  #L425bb4.  v1:= "Smallest minimum value must be less than largest minimum value" @kind object;
  #L425bb8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425bbe.  throw v0;
}
procedure `int` `a`(`n.c.a.x.n` v3 @kind this, `long` v4 , `n.c.a.x.i` v6 @kind object) @signature `Ln/c/a/x/n;.a:(JLn/c/a/x/i;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4258d4.  call temp:= `a`(v3, v4) @signature `Ln/c/a/x/n;.a:(J)Z` @kind virtual;
  #L4258da.  v0:= temp;
  #L4258dc.  if v0 == 0 then goto L4258e4;
  #L4258e0.  v5:= (`int`) v4 @kind l2i;
  #L4258e2.  return v5;
  #L4258e4.  v0:= new `n.c.a.b`;
  #L4258e8.  v1:= new `java.lang.StringBuilder`;
  #L4258ec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4258f2.  v2:= "Invalid int value for " @kind object;
  #L4258f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4258fc.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L425902.  v6:= ": " @kind object;
  #L425906.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42590c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L425912.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L425918.  v4:= temp @kind object;
  #L42591a.  call `<init>`(v0, v4) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425920.  throw v0;
}
procedure `long` `a`(`n.c.a.x.n` v2 @kind this) @signature `Ln/c/a/x/n;.a:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L425acc.  v0:= v2.`n.c.a.x.n.e` @type ^`long` @kind wide;
  #L425ad0.  return v0 @kind wide;
}
procedure `boolean` `a`(`n.c.a.x.n` v1 @kind this, `long` v2 ) @signature `Ln/c/a/x/n;.a:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42586c.  call temp:= `d`(v1) @signature `Ln/c/a/x/n;.d:()Z` @kind virtual;
  #L425872.  v0:= temp;
  #L425874.  if v0 == 0 then goto L425888;
  #L425878.  call temp:= `b`(v1, v2) @signature `Ln/c/a/x/n;.b:(J)Z` @kind virtual;
  #L42587e.  v2:= temp;
  #L425880.  if v2 == 0 then goto L425888;
  #L425884.  v2:= 1I;
  #L425886.  goto L42588a;
  #L425888.  v2:= 0I;
  #L42588a.  return v2;
}
procedure `long` `b`(`n.c.a.x.n` v2 @kind this) @signature `Ln/c/a/x/n;.b:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L425ae4.  v0:= v2.`n.c.a.x.n.b` @type ^`long` @kind wide;
  #L425ae8.  return v0 @kind wide;
}
procedure `long` `b`(`n.c.a.x.n` v4 @kind this, `long` v5 , `n.c.a.x.i` v7 @kind object) @signature `Ln/c/a/x/n;.b:(JLn/c/a/x/i;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L425a20.  call temp:= `b`(v4, v5) @signature `Ln/c/a/x/n;.b:(J)Z` @kind virtual;
  #L425a26.  v0:= temp;
  #L425a28.  if v0 != 0 then goto L425ab8;
  #L425a2c.  v0:= "): " @kind object;
  #L425a30.  if v7 == 0 then goto L425a7e;
  #L425a34.  v1:= new `n.c.a.b`;
  #L425a38.  v2:= new `java.lang.StringBuilder`;
  #L425a3c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L425a42.  v3:= "Invalid value for " @kind object;
  #L425a46.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L425a4c.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L425a52.  v7:= " (valid values " @kind object;
  #L425a56.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L425a5c.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L425a62.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L425a68.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L425a6e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L425a74.  v5:= temp @kind object;
  #L425a76.  call `<init>`(v1, v5) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425a7c.  throw v1;
  #L425a7e.  v7:= new `n.c.a.b`;
  #L425a82.  v1:= new `java.lang.StringBuilder`;
  #L425a86.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L425a8c.  v2:= "Invalid value (valid values " @kind object;
  #L425a90.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L425a96.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L425a9c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L425aa2.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L425aa8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L425aae.  v5:= temp @kind object;
  #L425ab0.  call `<init>`(v7, v5) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L425ab6.  throw v7;
  #L425ab8.  return v5 @kind wide;
}
procedure `boolean` `b`(`n.c.a.x.n` v3 @kind this, `long` v4 ) @signature `Ln/c/a/x/n;.b:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42589c.  call temp:= `b`(v3) @signature `Ln/c/a/x/n;.b:()J` @kind virtual;
  #L4258a2.  v0:= temp @kind wide;
  #L4258a4.  v2:= lcmp(v4, v0);
  #L4258a8.  if v2 < 0 then goto L4258c0;
  #L4258ac.  call temp:= `a`(v3) @signature `Ln/c/a/x/n;.a:()J` @kind virtual;
  #L4258b2.  v0:= temp @kind wide;
  #L4258b4.  v2:= lcmp(v4, v0);
  #L4258b8.  if v2 > 0 then goto L4258c0;
  #L4258bc.  v4:= 1I;
  #L4258be.  goto L4258c2;
  #L4258c0.  v4:= 0I;
  #L4258c2.  return v4;
}
procedure `boolean` `c`(`n.c.a.x.n` v5 @kind this) @signature `Ln/c/a/x/n;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4257f0.  v0:= v5.`n.c.a.x.n.b` @type ^`long` @kind wide;
  #L4257f4.  v2:= v5.`n.c.a.x.n.c` @type ^`long` @kind wide;
  #L4257f8.  v4:= lcmp(v0, v2);
  #L4257fc.  if v4 != 0 then goto L425814;
  #L425800.  v0:= v5.`n.c.a.x.n.d` @type ^`long` @kind wide;
  #L425804.  v2:= v5.`n.c.a.x.n.e` @type ^`long` @kind wide;
  #L425808.  v4:= lcmp(v0, v2);
  #L42580c.  if v4 != 0 then goto L425814;
  #L425810.  v0:= 1I;
  #L425812.  goto L425816;
  #L425814.  v0:= 0I;
  #L425816.  return v0;
}
procedure `boolean` `d`(`n.c.a.x.n` v5 @kind this) @signature `Ln/c/a/x/n;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L425828.  call temp:= `b`(v5) @signature `Ln/c/a/x/n;.b:()J` @kind virtual;
  #L42582e.  v0:= temp @kind wide;
  #L425830.  v2:= -2147483648L;
  #L425836.  v4:= lcmp(v0, v2);
  #L42583a.  if v4 < 0 then goto L425858;
  #L42583e.  call temp:= `a`(v5) @signature `Ln/c/a/x/n;.a:()J` @kind virtual;
  #L425844.  v0:= temp @kind wide;
  #L425846.  v2:= 2147483647L;
  #L42584c.  v4:= lcmp(v0, v2);
  #L425850.  if v4 > 0 then goto L425858;
  #L425854.  v0:= 1I;
  #L425856.  goto L42585a;
  #L425858.  v0:= 0I;
  #L42585a.  return v0;
}
procedure `boolean` `equals`(`n.c.a.x.n` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Ln/c/a/x/n;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L425780.  v0:= 1I;
  #L425782.  if v8 != v7 then goto L425788;
  #L425786.  return v0;
  #L425788.  v1:= instanceof @variable v8 @type ^`n.c.a.x.n` @kind boolean;
  #L42578c.  v2:= 0I;
  #L42578e.  if v1 == 0 then goto L4257dc;
  #L425792.  v8:= (`n.c.a.x.n`) v8 @kind object;
  #L425796.  v3:= v7.`n.c.a.x.n.b` @type ^`long` @kind wide;
  #L42579a.  v5:= v8.`n.c.a.x.n.b` @type ^`long` @kind wide;
  #L42579e.  v1:= lcmp(v3, v5);
  #L4257a2.  if v1 != 0 then goto L4257d8;
  #L4257a6.  v3:= v7.`n.c.a.x.n.c` @type ^`long` @kind wide;
  #L4257aa.  v5:= v8.`n.c.a.x.n.c` @type ^`long` @kind wide;
  #L4257ae.  v1:= lcmp(v3, v5);
  #L4257b2.  if v1 != 0 then goto L4257d8;
  #L4257b6.  v3:= v7.`n.c.a.x.n.d` @type ^`long` @kind wide;
  #L4257ba.  v5:= v8.`n.c.a.x.n.d` @type ^`long` @kind wide;
  #L4257be.  v1:= lcmp(v3, v5);
  #L4257c2.  if v1 != 0 then goto L4257d8;
  #L4257c6.  v3:= v7.`n.c.a.x.n.e` @type ^`long` @kind wide;
  #L4257ca.  v5:= v8.`n.c.a.x.n.e` @type ^`long` @kind wide;
  #L4257ce.  v8:= lcmp(v3, v5);
  #L4257d2.  if v8 != 0 then goto L4257d8;
  #L4257d6.  goto L4257da;
  #L4257d8.  v0:= 0I;
  #L4257da.  return v0;
  #L4257dc.  return v2;
}
procedure `int` `hashCode`(`n.c.a.x.n` v8 @kind this) @signature `Ln/c/a/x/n;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L425934.  v0:= v8.`n.c.a.x.n.b` @type ^`long` @kind wide;
  #L425938.  v2:= v8.`n.c.a.x.n.c` @type ^`long` @kind wide;
  #L42593c.  v0:= v0 + v2 @kind long;
  #L42593e.  v4:= 16L;
  #L425942.  v2:= v2 + v4 @kind long;
  #L425944.  v3:= (`int`) v2 @kind l2i;
  #L425946.  v0:= v0 ^< v3 @kind long;
  #L425948.  v2:= v8.`n.c.a.x.n.d` @type ^`long` @kind wide;
  #L42594c.  v4:= 48L;
  #L425950.  v6:= v2 + v4 @kind long;
  #L425954.  v7:= (`int`) v6 @kind l2i;
  #L425956.  v0:= v0 ^> v7 @kind long;
  #L425958.  v6:= 32L;
  #L42595c.  v2:= v2 + v6 @kind long;
  #L42595e.  v3:= (`int`) v2 @kind l2i;
  #L425960.  v0:= v0 ^< v3 @kind long;
  #L425962.  v2:= v8.`n.c.a.x.n.e` @type ^`long` @kind wide;
  #L425966.  v6:= v6 + v2 @kind long;
  #L425968.  v7:= (`int`) v6 @kind l2i;
  #L42596a.  v0:= v0 ^> v7 @kind long;
  #L42596c.  v2:= v2 + v4 @kind long;
  #L42596e.  v3:= (`int`) v2 @kind l2i;
  #L425970.  v0:= v0 ^< v3 @kind long;
  #L425972.  v2:= 16I;
  #L425976.  v0:= v0 ^> v2 @kind long;
  #L425978.  v2:= 32I;
  #L42597c.  v2:= v0 ^>> v2 @kind long;
  #L425980.  v0:= v0 ^~ v2 @kind long;
  #L425982.  v1:= (`int`) v0 @kind l2i;
  #L425984.  return v1;
}
procedure `java.lang.String` `toString`(`n.c.a.x.n` v7 @kind this) @signature `Ln/c/a/x/n;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L425998.  v0:= new `java.lang.StringBuilder`;
  #L42599c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4259a2.  v1:= v7.`n.c.a.x.n.b` @type ^`long` @kind wide;
  #L4259a6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4259ac.  v1:= v7.`n.c.a.x.n.b` @type ^`long` @kind wide;
  #L4259b0.  v3:= v7.`n.c.a.x.n.c` @type ^`long` @kind wide;
  #L4259b4.  v5:= 47I;
  #L4259b8.  v6:= lcmp(v1, v3);
  #L4259bc.  if v6 == 0 then goto L4259d0;
  #L4259c0.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4259c6.  v1:= v7.`n.c.a.x.n.c` @type ^`long` @kind wide;
  #L4259ca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4259d0.  v1:= " - " @kind object;
  #L4259d4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4259da.  v1:= v7.`n.c.a.x.n.d` @type ^`long` @kind wide;
  #L4259de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4259e4.  v1:= v7.`n.c.a.x.n.d` @type ^`long` @kind wide;
  #L4259e8.  v3:= v7.`n.c.a.x.n.e` @type ^`long` @kind wide;
  #L4259ec.  v6:= lcmp(v1, v3);
  #L4259f0.  if v6 == 0 then goto L425a04;
  #L4259f4.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4259fa.  v1:= v7.`n.c.a.x.n.e` @type ^`long` @kind wide;
  #L4259fe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L425a04.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L425a0a.  v0:= temp @kind object;
  #L425a0c.  return v0 @kind object;
}
