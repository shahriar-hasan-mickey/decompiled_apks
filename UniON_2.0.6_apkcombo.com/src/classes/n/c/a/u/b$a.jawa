record `n.c.a.u.b$a` @kind class @AccessFlag  extends `java.util.Comparator` @kind interface {
}
procedure `void` `<init>`(`n.c.a.u.b$a` v0 @kind this) @signature `Ln/c/a/u/b$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L412fb4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L412fba.  return @kind void;
}
procedure `int` `a`(`n.c.a.u.b$a` v2 @kind this, `n.c.a.u.b` v3 @kind object, `n.c.a.u.b` v4 @kind object) @signature `Ln/c/a/u/b$a;.a:(Ln/c/a/u/b;Ln/c/a/u/b;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L412f88.  call temp:= `h`(v3) @signature `Ln/c/a/u/b;.h:()J` @kind virtual;
  #L412f8e.  v0:= temp @kind wide;
  #L412f90.  call temp:= `h`(v4) @signature `Ln/c/a/u/b;.h:()J` @kind virtual;
  #L412f96.  v3:= temp @kind wide;
  #L412f98.  call temp:= `a`(v0, v3) @signature `Ln/c/a/w/d;.a:(JJ)I` @kind static;
  #L412f9e.  v3:= temp;
  #L412fa0.  return v3;
}
procedure `int` `compare`(`n.c.a.u.b$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Ln/c/a/u/b$a;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L412f64.  v1:= (`n.c.a.u.b`) v1 @kind object;
  #L412f68.  v2:= (`n.c.a.u.b`) v2 @kind object;
  #L412f6c.  call temp:= `a`(v0, v1, v2) @signature `Ln/c/a/u/b$a;.a:(Ln/c/a/u/b;Ln/c/a/u/b;)I` @kind virtual;
  #L412f72.  v1:= temp;
  #L412f74.  return v1;
}
