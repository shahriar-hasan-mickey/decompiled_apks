record `n.c.a.u.h` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.lang.Comparable` @kind interface {
}
global `java.util.concurrent.ConcurrentHashMap` `@@n.c.a.u.h.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentHashMap` `@@n.c.a.u.h.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln/c/a/u/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4153f0.  v0:= new `n.c.a.u.h$a`;
  #L4153f4.  call `<init>`(v0) @signature `Ln/c/a/u/h$a;.<init>:()V` @kind direct;
  #L4153fa.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L4153fe.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L415404.  `@@n.c.a.u.h.b` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L415408.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L41540c.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L415412.  `@@n.c.a.u.h.c` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L415416.  v0:= constclass @type ^`java.util.Locale` @kind object;
  #L41541a.  v1:= 1I;
  #L41541c.  v1:= new `java.lang.Class`[v1];
  #L415420.  v2:= 0I;
  #L415422.  v3:= constclass @type ^`java.lang.String` @kind object;
  #L415426.  v1[v2]:= v3 @kind object;
  #L41542a.  v2:= "getUnicodeLocaleType" @kind object;
  #L41542e.  call temp:= `getMethod`(v0, v2, v1) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L415434.  return @kind void;
  catch `java.lang.Throwable` @[L415416..L41542a] goto L415434;
  catch `java.lang.Throwable` @[L41542e..L415434] goto L415434;
}
procedure `void` `<init>`(`n.c.a.u.h` v0 @kind this) @signature `Ln/c/a/u/h;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L41545c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L415462.  return @kind void;
}
procedure `n.c.a.u.h` `a`(`java.io.DataInput` v0 @kind object) @signature `Ln/c/a/u/h;.a:(Ljava/io/DataInput;)Ln/c/a/u/h;` @AccessFlag STATIC {
    temp;

  #L4153cc.  call temp:= `readUTF`(v0) @signature `Ljava/io/DataInput;.readUTF:()Ljava/lang/String;` @kind interface;
  #L4153d2.  v0:= temp @kind object;
  #L4153d4.  call temp:= `a`(v0) @signature `Ln/c/a/u/h;.a:(Ljava/lang/String;)Ln/c/a/u/h;` @kind static;
  #L4153da.  v0:= temp @kind object;
  #L4153dc.  return v0 @kind object;
}
procedure `n.c.a.u.h` `a`(`java.lang.String` v3 @kind object) @signature `Ln/c/a/u/h;.a:(Ljava/lang/String;)Ln/c/a/u/h;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L41535c.  call `h`() @signature `Ln/c/a/u/h;.h:()V` @kind static;
  #L415362.  v0:= `@@n.c.a.u.h.b` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L415366.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41536c.  v0:= temp @kind object;
  #L41536e.  v0:= (`n.c.a.u.h`) v0 @kind object;
  #L415372.  if v0 == 0 then goto L415378;
  #L415376.  return v0 @kind object;
  #L415378.  v0:= `@@n.c.a.u.h.c` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L41537c.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L415382.  v0:= temp @kind object;
  #L415384.  v0:= (`n.c.a.u.h`) v0 @kind object;
  #L415388.  if v0 == 0 then goto L41538e;
  #L41538c.  return v0 @kind object;
  #L41538e.  v0:= new `n.c.a.b`;
  #L415392.  v1:= new `java.lang.StringBuilder`;
  #L415396.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41539c.  v2:= "Unknown chronology: " @kind object;
  #L4153a0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4153a6.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4153ac.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4153b2.  v3:= temp @kind object;
  #L4153b4.  call `<init>`(v0, v3) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4153ba.  throw v0;
}
procedure `void` `b`(`n.c.a.u.h` v2 @kind object) @signature `Ln/c/a/u/h;.b:(Ln/c/a/u/h;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L415550.  v0:= `@@n.c.a.u.h.b` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L415554.  call temp:= `e`(v2) @signature `Ln/c/a/u/h;.e:()Ljava/lang/String;` @kind virtual;
  #L41555a.  v1:= temp @kind object;
  #L41555c.  call temp:= `putIfAbsent`(v0, v1, v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L415562.  call temp:= `b`(v2) @signature `Ln/c/a/u/h;.b:()Ljava/lang/String;` @kind virtual;
  #L415568.  v0:= temp @kind object;
  #L41556a.  if v0 == 0 then goto L415578;
  #L41556e.  v1:= `@@n.c.a.u.h.c` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L415572.  call temp:= `putIfAbsent`(v1, v0, v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L415578.  return @kind void;
}
procedure `n.c.a.u.h` `c`(`n.c.a.x.e` v1 @kind object) @signature `Ln/c/a/u/h;.c:(Ln/c/a/x/e;)Ln/c/a/u/h;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L415320.  v0:= "temporal" @kind object;
  #L415324.  call temp:= `a`(v1, v0) @signature `Ln/c/a/w/d;.a:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41532a.  call temp:= `a`() @signature `Ln/c/a/x/j;.a:()Ln/c/a/x/k;` @kind static;
  #L415330.  v0:= temp @kind object;
  #L415332.  call temp:= `a`(v1, v0) @signature `Ln/c/a/x/e;.a:(Ln/c/a/x/k;)Ljava/lang/Object;` @kind interface;
  #L415338.  v1:= temp @kind object;
  #L41533a.  v1:= (`n.c.a.u.h`) v1 @kind object;
  #L41533e.  if v1 == 0 then goto L415344;
  #L415342.  goto L415348;
  #L415344.  v1:= `@@n.c.a.u.m.d` @type ^`n.c.a.u.m` @kind object;
  #L415348.  return v1 @kind object;
}
procedure `void` `h`() @signature `Ln/c/a/u/h;.h:()V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L415474.  v0:= `@@n.c.a.u.h.b` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L415478.  call temp:= `isEmpty`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.isEmpty:()Z` @kind virtual;
  #L41547e.  v0:= temp;
  #L415480.  if v0 == 0 then goto L41553c;
  #L415484.  v0:= `@@n.c.a.u.m.d` @type ^`n.c.a.u.m` @kind object;
  #L415488.  call `b`(v0) @signature `Ln/c/a/u/h;.b:(Ln/c/a/u/h;)V` @kind static;
  #L41548e.  v0:= `@@n.c.a.u.v.d` @type ^`n.c.a.u.v` @kind object;
  #L415492.  call `b`(v0) @signature `Ln/c/a/u/h;.b:(Ln/c/a/u/h;)V` @kind static;
  #L415498.  v0:= `@@n.c.a.u.r.d` @type ^`n.c.a.u.r` @kind object;
  #L41549c.  call `b`(v0) @signature `Ln/c/a/u/h;.b:(Ln/c/a/u/h;)V` @kind static;
  #L4154a2.  v0:= `@@n.c.a.u.o.e` @type ^`n.c.a.u.o` @kind object;
  #L4154a6.  call `b`(v0) @signature `Ln/c/a/u/h;.b:(Ln/c/a/u/h;)V` @kind static;
  #L4154ac.  v0:= `@@n.c.a.u.j.d` @type ^`n.c.a.u.j` @kind object;
  #L4154b0.  call `b`(v0) @signature `Ln/c/a/u/h;.b:(Ln/c/a/u/h;)V` @kind static;
  #L4154b6.  v0:= `@@n.c.a.u.h.b` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L4154ba.  v1:= `@@n.c.a.u.j.d` @type ^`n.c.a.u.j` @kind object;
  #L4154be.  v2:= "Hijrah" @kind object;
  #L4154c2.  call temp:= `putIfAbsent`(v0, v2, v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4154c8.  v0:= `@@n.c.a.u.h.c` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L4154cc.  v1:= `@@n.c.a.u.j.d` @type ^`n.c.a.u.j` @kind object;
  #L4154d0.  v2:= "islamic" @kind object;
  #L4154d4.  call temp:= `putIfAbsent`(v0, v2, v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4154da.  v0:= constclass @type ^`n.c.a.u.h` @kind object;
  #L4154de.  v1:= constclass @type ^`n.c.a.u.h` @kind object;
  #L4154e2.  call temp:= `getClassLoader`(v1) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L4154e8.  v1:= temp @kind object;
  #L4154ea.  call temp:= `load`(v0, v1) @signature `Ljava/util/ServiceLoader;.load:(Ljava/lang/Class;Ljava/lang/ClassLoader;)Ljava/util/ServiceLoader;` @kind static;
  #L4154f0.  v0:= temp @kind object;
  #L4154f2.  call temp:= `iterator`(v0) @signature `Ljava/util/ServiceLoader;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4154f8.  v0:= temp @kind object;
  #L4154fa.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L415500.  v1:= temp;
  #L415502.  if v1 == 0 then goto L41553c;
  #L415506.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L41550c.  v1:= temp @kind object;
  #L41550e.  v1:= (`n.c.a.u.h`) v1 @kind object;
  #L415512.  v2:= `@@n.c.a.u.h.b` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L415516.  call temp:= `e`(v1) @signature `Ln/c/a/u/h;.e:()Ljava/lang/String;` @kind virtual;
  #L41551c.  v3:= temp @kind object;
  #L41551e.  call temp:= `putIfAbsent`(v2, v3, v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L415524.  call temp:= `b`(v1) @signature `Ln/c/a/u/h;.b:()Ljava/lang/String;` @kind virtual;
  #L41552a.  v2:= temp @kind object;
  #L41552c.  if v2 == 0 then goto L4154fa;
  #L415530.  v3:= `@@n.c.a.u.h.c` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L415534.  call temp:= `putIfAbsent`(v3, v2, v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41553a.  goto L4154fa;
  #L41553c.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`n.c.a.u.h` v2 @kind this) @signature `Ln/c/a/u/h;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L415094.  v0:= new `java.io.InvalidObjectException`;
  #L415098.  v1:= "Deserialization via serialization delegate" @kind object;
  #L41509c.  call `<init>`(v0, v1) @signature `Ljava/io/InvalidObjectException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4150a2.  throw v0;
}
procedure `java.lang.Object` `writeReplace`(`n.c.a.u.h` v2 @kind this) @signature `Ln/c/a/u/h;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4150b4.  v0:= new `n.c.a.u.u`;
  #L4150b8.  v1:= 11I;
  #L4150bc.  call `<init>`(v0, v1, v2) @signature `Ln/c/a/u/u;.<init>:(BLjava/lang/Object;)V` @kind direct;
  #L4150c2.  return v0 @kind object;
}
procedure `int` `a`(`n.c.a.u.h` v1 @kind this, `n.c.a.u.h` v2 @kind object) @signature `Ln/c/a/u/h;.a:(Ln/c/a/u/h;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L415034.  call temp:= `e`(v1) @signature `Ln/c/a/u/h;.e:()Ljava/lang/String;` @kind virtual;
  #L41503a.  v0:= temp @kind object;
  #L41503c.  call temp:= `e`(v2) @signature `Ln/c/a/u/h;.e:()Ljava/lang/String;` @kind virtual;
  #L415042.  v2:= temp @kind object;
  #L415044.  call temp:= `compareTo`(v0, v2) @signature `Ljava/lang/String;.compareTo:(Ljava/lang/String;)I` @kind virtual;
  #L41504a.  v2:= temp;
  #L41504c.  return v2;
}
procedure `n.c.a.u.b` `a`(`n.c.a.u.h` v3 @kind this, `n.c.a.x.d` v4 @kind object) @signature `Ln/c/a/u/h;.a:(Ln/c/a/x/d;)Ln/c/a/u/b;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4150f0.  v4:= (`n.c.a.u.b`) v4 @kind object;
  #L4150f4.  call temp:= `g`(v4) @signature `Ln/c/a/u/b;.g:()Ln/c/a/u/h;` @kind virtual;
  #L4150fa.  v0:= temp @kind object;
  #L4150fc.  call temp:= `equals`(v3, v0) @signature `Ln/c/a/u/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L415102.  v0:= temp;
  #L415104.  if v0 == 0 then goto L41510a;
  #L415108.  return v4 @kind object;
  #L41510a.  v0:= new `java.lang.ClassCastException`;
  #L41510e.  v1:= new `java.lang.StringBuilder`;
  #L415112.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L415118.  v2:= "Chrono mismatch, expected: " @kind object;
  #L41511c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L415122.  call temp:= `e`(v3) @signature `Ln/c/a/u/h;.e:()Ljava/lang/String;` @kind virtual;
  #L415128.  v2:= temp @kind object;
  #L41512a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L415130.  v2:= ", actual: " @kind object;
  #L415134.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41513a.  call temp:= `g`(v4) @signature `Ln/c/a/u/b;.g:()Ln/c/a/u/h;` @kind virtual;
  #L415140.  v4:= temp @kind object;
  #L415142.  call temp:= `e`(v4) @signature `Ln/c/a/u/h;.e:()Ljava/lang/String;` @kind virtual;
  #L415148.  v4:= temp @kind object;
  #L41514a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L415150.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L415156.  v4:= temp @kind object;
  #L415158.  call `<init>`(v0, v4) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41515e.  throw v0;
}
procedure `n.c.a.u.b` `a`(`n.c.a.x.e` v0 @kind object) @signature `Ln/c/a/u/h;.a:(Ln/c/a/x/e;)Ln/c/a/u/b;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `n.c.a.u.f` `a`(`n.c.a.u.h` v0 @kind this, `n.c.a.e` v1 @kind object, `n.c.a.q` v2 @kind object) @signature `Ln/c/a/u/h;.a:(Ln/c/a/e;Ln/c/a/q;)Ln/c/a/u/f;` @AccessFlag PUBLIC {
    temp;

  #L415274.  call temp:= `a`(v0, v1, v2) @signature `Ln/c/a/u/g;.a:(Ln/c/a/u/h;Ln/c/a/e;Ln/c/a/q;)Ln/c/a/u/g;` @kind static;
  #L41527a.  v1:= temp @kind object;
  #L41527c.  return v1 @kind object;
}
procedure `n.c.a.u.i` `a`(`int` v0 ) @signature `Ln/c/a/u/h;.a:(I)Ln/c/a/u/i;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `a`(`n.c.a.u.h` v1 @kind this, `java.io.DataOutput` v2 @kind object) @signature `Ln/c/a/u/h;.a:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;

  #L415628.  call temp:= `e`(v1) @signature `Ln/c/a/u/h;.e:()Ljava/lang/String;` @kind virtual;
  #L41562e.  v0:= temp @kind object;
  #L415630.  call `writeUTF`(v2, v0) @signature `Ljava/io/DataOutput;.writeUTF:(Ljava/lang/String;)V` @kind interface;
  #L415636.  return @kind void;
}
procedure `void` `a`(`n.c.a.u.h` v4 @kind this, `java.util.Map` v5 @kind object, `n.c.a.x.a` v6 @kind object, `long` v7 ) @signature `Ln/c/a/u/h;.a:(Ljava/util/Map;Ln/c/a/x/a;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41558c.  call temp:= `get`(v5, v6) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L415592.  v0:= temp @kind object;
  #L415594.  v0:= (`java.lang.Long`) v0 @kind object;
  #L415598.  if v0 == 0 then goto L415608;
  #L41559c.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4155a2.  v1:= temp @kind wide;
  #L4155a4.  v3:= lcmp(v1, v7);
  #L4155a8.  if v3 != 0 then goto L4155ae;
  #L4155ac.  goto L415608;
  #L4155ae.  v5:= new `n.c.a.b`;
  #L4155b2.  v1:= new `java.lang.StringBuilder`;
  #L4155b6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4155bc.  v2:= "Invalid state, field: " @kind object;
  #L4155c0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4155c6.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4155cc.  v2:= " " @kind object;
  #L4155d0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4155d6.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4155dc.  v0:= " conflicts with " @kind object;
  #L4155e0.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4155e6.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4155ec.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4155f2.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4155f8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4155fe.  v6:= temp @kind object;
  #L415600.  call `<init>`(v5, v6) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L415606.  throw v5;
  #L415608.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L41560e.  v7:= temp @kind object;
  #L415610.  call temp:= `put`(v5, v6, v7) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L415616.  return @kind void;
}
procedure `java.lang.String` `b`() @signature `Ln/c/a/u/h;.b:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `n.c.a.u.c` `b`(`n.c.a.u.h` v4 @kind this, `n.c.a.x.e` v5 @kind object) @signature `Ln/c/a/u/h;.b:(Ln/c/a/x/e;)Ln/c/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L415170.  call temp:= `a`(v4, v5) @signature `Ln/c/a/u/h;.a:(Ln/c/a/x/e;)Ln/c/a/u/b;` @kind virtual;
  #L415176.  v0:= temp @kind object;
  #L415178.  call temp:= `a`(v5) @signature `Ln/c/a/h;.a:(Ln/c/a/x/e;)Ln/c/a/h;` @kind static;
  #L41517e.  v1:= temp @kind object;
  #L415180.  call temp:= `a`(v0, v1) @signature `Ln/c/a/u/b;.a:(Ln/c/a/h;)Ln/c/a/u/c;` @kind virtual;
  #L415186.  v5:= temp @kind object;
  #L415188.  return v5 @kind object;
  #L41518a.  v0:= Exception @type ^`n.c.a.b` @kind object;
  #L41518c.  v1:= new `n.c.a.b`;
  #L415190.  v2:= new `java.lang.StringBuilder`;
  #L415194.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41519a.  v3:= "Unable to obtain ChronoLocalDateTime from TemporalAccessor: " @kind object;
  #L41519e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4151a4.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4151aa.  v5:= temp @kind object;
  #L4151ac.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4151b2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4151b8.  v5:= temp @kind object;
  #L4151ba.  call `<init>`(v1, v5, v0) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4151c0.  throw v1;
  catch `n.c.a.b` @[L415170..L415188] goto L41518a;
}
procedure `n.c.a.u.d` `b`(`n.c.a.u.h` v3 @kind this, `n.c.a.x.d` v4 @kind object) @signature `Ln/c/a/u/h;.b:(Ln/c/a/x/d;)Ln/c/a/u/d;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4151e4.  v4:= (`n.c.a.u.d`) v4 @kind object;
  #L4151e8.  call temp:= `e`(v4) @signature `Ln/c/a/u/d;.e:()Ln/c/a/u/b;` @kind virtual;
  #L4151ee.  v0:= temp @kind object;
  #L4151f0.  call temp:= `g`(v0) @signature `Ln/c/a/u/b;.g:()Ln/c/a/u/h;` @kind virtual;
  #L4151f6.  v0:= temp @kind object;
  #L4151f8.  call temp:= `equals`(v3, v0) @signature `Ln/c/a/u/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4151fe.  v0:= temp;
  #L415200.  if v0 == 0 then goto L415206;
  #L415204.  return v4 @kind object;
  #L415206.  v0:= new `java.lang.ClassCastException`;
  #L41520a.  v1:= new `java.lang.StringBuilder`;
  #L41520e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L415214.  v2:= "Chrono mismatch, required: " @kind object;
  #L415218.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41521e.  call temp:= `e`(v3) @signature `Ln/c/a/u/h;.e:()Ljava/lang/String;` @kind virtual;
  #L415224.  v2:= temp @kind object;
  #L415226.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41522c.  v2:= ", supplied: " @kind object;
  #L415230.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L415236.  call temp:= `e`(v4) @signature `Ln/c/a/u/d;.e:()Ln/c/a/u/b;` @kind virtual;
  #L41523c.  v4:= temp @kind object;
  #L41523e.  call temp:= `g`(v4) @signature `Ln/c/a/u/b;.g:()Ln/c/a/u/h;` @kind virtual;
  #L415244.  v4:= temp @kind object;
  #L415246.  call temp:= `e`(v4) @signature `Ln/c/a/u/h;.e:()Ljava/lang/String;` @kind virtual;
  #L41524c.  v4:= temp @kind object;
  #L41524e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L415254.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41525a.  v4:= temp @kind object;
  #L41525c.  call `<init>`(v0, v4) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L415262.  throw v0;
}
procedure `n.c.a.u.g` `c`(`n.c.a.u.h` v3 @kind this, `n.c.a.x.d` v4 @kind object) @signature `Ln/c/a/u/h;.c:(Ln/c/a/x/d;)Ln/c/a/u/g;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L415290.  v4:= (`n.c.a.u.g`) v4 @kind object;
  #L415294.  call temp:= `u`(v4) @signature `Ln/c/a/u/f;.u:()Ln/c/a/u/b;` @kind virtual;
  #L41529a.  v0:= temp @kind object;
  #L41529c.  call temp:= `g`(v0) @signature `Ln/c/a/u/b;.g:()Ln/c/a/u/h;` @kind virtual;
  #L4152a2.  v0:= temp @kind object;
  #L4152a4.  call temp:= `equals`(v3, v0) @signature `Ln/c/a/u/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4152aa.  v0:= temp;
  #L4152ac.  if v0 == 0 then goto L4152b2;
  #L4152b0.  return v4 @kind object;
  #L4152b2.  v0:= new `java.lang.ClassCastException`;
  #L4152b6.  v1:= new `java.lang.StringBuilder`;
  #L4152ba.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4152c0.  v2:= "Chrono mismatch, required: " @kind object;
  #L4152c4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4152ca.  call temp:= `e`(v3) @signature `Ln/c/a/u/h;.e:()Ljava/lang/String;` @kind virtual;
  #L4152d0.  v2:= temp @kind object;
  #L4152d2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4152d8.  v2:= ", supplied: " @kind object;
  #L4152dc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4152e2.  call temp:= `u`(v4) @signature `Ln/c/a/u/f;.u:()Ln/c/a/u/b;` @kind virtual;
  #L4152e8.  v4:= temp @kind object;
  #L4152ea.  call temp:= `g`(v4) @signature `Ln/c/a/u/b;.g:()Ln/c/a/u/h;` @kind virtual;
  #L4152f0.  v4:= temp @kind object;
  #L4152f2.  call temp:= `e`(v4) @signature `Ln/c/a/u/h;.e:()Ljava/lang/String;` @kind virtual;
  #L4152f8.  v4:= temp @kind object;
  #L4152fa.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L415300.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L415306.  v4:= temp @kind object;
  #L415308.  call `<init>`(v0, v4) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41530e.  throw v0;
}
procedure `int` `compareTo`(`n.c.a.u.h` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Ln/c/a/u/h;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L415014.  v1:= (`n.c.a.u.h`) v1 @kind object;
  #L415018.  call temp:= `a`(v0, v1) @signature `Ln/c/a/u/h;.a:(Ln/c/a/u/h;)I` @kind virtual;
  #L41501e.  v1:= temp;
  #L415020.  return v1;
}
procedure `java.lang.String` `e`() @signature `Ln/c/a/u/h;.e:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `equals`(`n.c.a.u.h` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Ln/c/a/u/h;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L414fd8.  v0:= 1I;
  #L414fda.  if v3 != v4 then goto L414fe0;
  #L414fde.  return v0;
  #L414fe0.  v1:= instanceof @variable v4 @type ^`n.c.a.u.h` @kind boolean;
  #L414fe4.  v2:= 0I;
  #L414fe6.  if v1 == 0 then goto L415000;
  #L414fea.  v4:= (`n.c.a.u.h`) v4 @kind object;
  #L414fee.  call temp:= `a`(v3, v4) @signature `Ln/c/a/u/h;.a:(Ln/c/a/u/h;)I` @kind virtual;
  #L414ff4.  v4:= temp;
  #L414ff6.  if v4 != 0 then goto L414ffc;
  #L414ffa.  goto L414ffe;
  #L414ffc.  v0:= 0I;
  #L414ffe.  return v0;
  #L415000.  return v2;
}
procedure `int` `hashCode`(`n.c.a.u.h` v2 @kind this) @signature `Ln/c/a/u/h;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L415060.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L415066.  v0:= temp @kind object;
  #L415068.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L41506e.  v0:= temp;
  #L415070.  call temp:= `e`(v2) @signature `Ln/c/a/u/h;.e:()Ljava/lang/String;` @kind virtual;
  #L415076.  v1:= temp @kind object;
  #L415078.  call temp:= `hashCode`(v1) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L41507e.  v1:= temp;
  #L415080.  v0:= v0 ^~ v1 @kind int;
  #L415082.  return v0;
}
procedure `java.lang.String` `toString`(`n.c.a.u.h` v1 @kind this) @signature `Ln/c/a/u/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4150d4.  call temp:= `e`(v1) @signature `Ln/c/a/u/h;.e:()Ljava/lang/String;` @kind virtual;
  #L4150da.  v0:= temp @kind object;
  #L4150dc.  return v0 @kind object;
}
