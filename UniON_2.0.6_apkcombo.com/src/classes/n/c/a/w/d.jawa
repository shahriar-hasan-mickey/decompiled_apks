record `n.c.a.w.d` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v0 , `int` v1 ) @signature `Ln/c/a/w/d;.a:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L423134.  if v0 >= v1 then goto L42313c;
  #L423138.  v0:= -1I;
  #L42313a.  return v0;
  #L42313c.  if v0 <= v1 then goto L423144;
  #L423140.  v0:= 1I;
  #L423142.  return v0;
  #L423144.  v0:= 0I;
  #L423146.  return v0;
}
procedure `int` `a`(`long` v3 ) @signature `Ln/c/a/w/d;.a:(J)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4232a8.  v0:= 2147483647L;
  #L4232ae.  v2:= lcmp(v3, v0);
  #L4232b2.  if v2 > 0 then goto L4232c8;
  #L4232b6.  v0:= -2147483648L;
  #L4232bc.  v2:= lcmp(v3, v0);
  #L4232c0.  if v2 < 0 then goto L4232c8;
  #L4232c4.  v4:= (`int`) v3 @kind l2i;
  #L4232c6.  return v4;
  #L4232c8.  v0:= new `java.lang.ArithmeticException`;
  #L4232cc.  v1:= new `java.lang.StringBuilder`;
  #L4232d0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4232d6.  v2:= "Calculation overflows an int: " @kind object;
  #L4232da.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4232e0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4232e6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4232ec.  v3:= temp @kind object;
  #L4232ee.  call `<init>`(v0, v3) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4232f4.  throw v0;
}
procedure `int` `a`(`long` v2 , `int` v4 ) @signature `Ln/c/a/w/d;.a:(JI)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4231bc.  v0:= (`long`) v4 @kind i2l;
  #L4231be.  v2:= v2 %% v0 @kind long;
  #L4231c0.  v2:= v2 + v0 @kind long;
  #L4231c2.  v2:= v2 %% v0 @kind long;
  #L4231c4.  v3:= (`int`) v2 @kind l2i;
  #L4231c6.  return v3;
}
procedure `int` `a`(`long` v1 , `long` v3 ) @signature `Ln/c/a/w/d;.a:(JJ)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L423158.  v0:= lcmp(v1, v3);
  #L42315c.  if v0 >= 0 then goto L423164;
  #L423160.  v1:= -1I;
  #L423162.  return v1;
  #L423164.  if v0 <= 0 then goto L42316c;
  #L423168.  v1:= 1I;
  #L42316a.  return v1;
  #L42316c.  v1:= 0I;
  #L42316e.  return v1;
}
procedure `java.lang.Object` `a`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Ln/c/a/w/d;.a:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L423308.  if v1 == 0 then goto L42330e;
  #L42330c.  return v1 @kind object;
  #L42330e.  v1:= new `java.lang.NullPointerException`;
  #L423312.  v0:= new `java.lang.StringBuilder`;
  #L423316.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42331c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L423322.  v2:= " must not be null" @kind object;
  #L423326.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42332c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L423332.  v2:= temp @kind object;
  #L423334.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42333a.  throw v1;
}
procedure `boolean` `a`(`java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Ln/c/a/w/d;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L423104.  v0:= 0I;
  #L423106.  if v1 != 0 then goto L423112;
  #L42310a.  if v2 != 0 then goto L423110;
  #L42310e.  v0:= 1I;
  #L423110.  return v0;
  #L423112.  if v2 != 0 then goto L423118;
  #L423116.  return v0;
  #L423118.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L42311e.  v1:= temp;
  #L423120.  return v1;
}
procedure `int` `b`(`int` v0 , `int` v1 ) @signature `Ln/c/a/w/d;.b:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L423180.  if v0 < 0 then goto L423188;
  #L423184.  v0:= v0 / v1 @kind int;
  #L423186.  goto L423192;
  #L423188.  v0:= v0 + 1;
  #L42318c.  v0:= v0 / v1 @kind int;
  #L42318e.  v0:= v0 + -1;
  #L423192.  return v0;
}
procedure `long` `b`(`long` v7 , `int` v9 ) @signature `Ln/c/a/w/d;.b:(JI)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L423404.  v0:= -1I;
  #L423406.  v1:= " * " @kind object;
  #L42340a.  v2:= "Multiplication overflows a long: " @kind object;
  #L42340e.  if v9 == v0 then goto L42346e;
  #L423412.  if v9 == 0 then goto L423468;
  #L423416.  v0:= 1I;
  #L423418.  if v9 == v0 then goto L423466;
  #L42341c.  v3:= (`long`) v9 @kind i2l;
  #L42341e.  v5:= v7 * v3 @kind long;
  #L423422.  v3:= v5 / v3 @kind long;
  #L423426.  v0:= lcmp(v3, v7);
  #L42342a.  if v0 != 0 then goto L423430;
  #L42342e.  return v5 @kind wide;
  #L423430.  v0:= new `java.lang.ArithmeticException`;
  #L423434.  v3:= new `java.lang.StringBuilder`;
  #L423438.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42343e.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L423444.  call temp:= `append`(v3, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42344a.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L423450.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L423456.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42345c.  v7:= temp @kind object;
  #L42345e.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L423464.  throw v0;
  #L423466.  return v7 @kind wide;
  #L423468.  v7:= 0L;
  #L42346c.  return v7 @kind wide;
  #L42346e.  v3:= -9223372036854775808L;
  #L423472.  v0:= lcmp(v7, v3);
  #L423476.  if v0 == 0 then goto L42347e;
  #L42347a.  v7:= -v7 @kind long;
  #L42347c.  return v7 @kind wide;
  #L42347e.  v0:= new `java.lang.ArithmeticException`;
  #L423482.  v3:= new `java.lang.StringBuilder`;
  #L423486.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42348c.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L423492.  call temp:= `append`(v3, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L423498.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42349e.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4234a4.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4234aa.  v7:= temp @kind object;
  #L4234ac.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4234b2.  throw v0;
}
procedure `long` `b`(`long` v3 , `long` v5 ) @signature `Ln/c/a/w/d;.b:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L42334c.  v0:= 0L;
  #L423350.  v2:= lcmp(v3, v0);
  #L423354.  if v2 < 0 then goto L42335c;
  #L423358.  v3:= v3 / v5 @kind long;
  #L42335a.  goto L423366;
  #L42335c.  v0:= 1L;
  #L423360.  v3:= v3 + v0 @kind long;
  #L423362.  v3:= v3 / v5 @kind long;
  #L423364.  v3:= v3 - v0 @kind long;
  #L423366.  return v3 @kind wide;
}
procedure `int` `c`(`int` v0 , `int` v1 ) @signature `Ln/c/a/w/d;.c:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4231a4.  v0:= v0 %% v1 @kind int;
  #L4231a6.  v0:= v0 + v1 @kind int;
  #L4231a8.  v0:= v0 %% v1 @kind int;
  #L4231aa.  return v0;
}
procedure `long` `c`(`long` v0 , `long` v2 ) @signature `Ln/c/a/w/d;.c:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;

  #L423378.  v0:= v0 %% v2 @kind long;
  #L42337a.  v0:= v0 + v2 @kind long;
  #L42337c.  v0:= v0 %% v2 @kind long;
  #L42337e.  return v0 @kind wide;
}
procedure `int` `d`(`int` v3 , `int` v4 ) @signature `Ln/c/a/w/d;.d:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4231d8.  v0:= v3 + v4 @kind int;
  #L4231dc.  v1:= v3 ^~ v0 @kind int;
  #L4231e0.  if v1 >= 0 then goto L42322c;
  #L4231e4.  v1:= v3 ^~ v4 @kind int;
  #L4231e8.  if v1 >= 0 then goto L4231ee;
  #L4231ec.  goto L42322c;
  #L4231ee.  v0:= new `java.lang.ArithmeticException`;
  #L4231f2.  v1:= new `java.lang.StringBuilder`;
  #L4231f6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4231fc.  v2:= "Addition overflows an int: " @kind object;
  #L423200.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L423206.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42320c.  v3:= " + " @kind object;
  #L423210.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L423216.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42321c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L423222.  v3:= temp @kind object;
  #L423224.  call `<init>`(v0, v3) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42322a.  throw v0;
  #L42322c.  return v0;
}
procedure `long` `d`(`long` v7 , `long` v9 ) @signature `Ln/c/a/w/d;.d:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L423390.  v0:= v7 + v9 @kind long;
  #L423394.  v2:= v7 ^~ v0 @kind long;
  #L423398.  v4:= 0L;
  #L42339c.  v6:= lcmp(v2, v4);
  #L4233a0.  if v6 >= 0 then goto L4233f0;
  #L4233a4.  v2:= v7 ^~ v9 @kind long;
  #L4233a8.  v6:= lcmp(v2, v4);
  #L4233ac.  if v6 >= 0 then goto L4233b2;
  #L4233b0.  goto L4233f0;
  #L4233b2.  v0:= new `java.lang.ArithmeticException`;
  #L4233b6.  v1:= new `java.lang.StringBuilder`;
  #L4233ba.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4233c0.  v2:= "Addition overflows a long: " @kind object;
  #L4233c4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4233ca.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4233d0.  v7:= " + " @kind object;
  #L4233d4.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4233da.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4233e0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4233e6.  v7:= temp @kind object;
  #L4233e8.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4233ee.  throw v0;
  #L4233f0.  return v0 @kind wide;
}
procedure `int` `e`(`int` v3 , `int` v4 ) @signature `Ln/c/a/w/d;.e:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L423240.  v0:= v3 - v4 @kind int;
  #L423244.  v1:= v3 ^~ v0 @kind int;
  #L423248.  if v1 >= 0 then goto L423294;
  #L42324c.  v1:= v3 ^~ v4 @kind int;
  #L423250.  if v1 < 0 then goto L423256;
  #L423254.  goto L423294;
  #L423256.  v0:= new `java.lang.ArithmeticException`;
  #L42325a.  v1:= new `java.lang.StringBuilder`;
  #L42325e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L423264.  v2:= "Subtraction overflows an int: " @kind object;
  #L423268.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42326e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L423274.  v3:= " - " @kind object;
  #L423278.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42327e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L423284.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42328a.  v3:= temp @kind object;
  #L42328c.  call `<init>`(v0, v3) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L423292.  throw v0;
  #L423294.  return v0;
}
procedure `long` `e`(`long` v7 , `long` v9 ) @signature `Ln/c/a/w/d;.e:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4234c4.  v0:= 1L;
  #L4234c8.  v2:= lcmp(v9, v0);
  #L4234cc.  if v2 != 0 then goto L4234d2;
  #L4234d0.  return v7 @kind wide;
  #L4234d2.  v2:= lcmp(v7, v0);
  #L4234d6.  if v2 != 0 then goto L4234dc;
  #L4234da.  return v9 @kind wide;
  #L4234dc.  v0:= 0L;
  #L4234e0.  v2:= lcmp(v7, v0);
  #L4234e4.  if v2 == 0 then goto L42356a;
  #L4234e8.  v2:= lcmp(v9, v0);
  #L4234ec.  if v2 != 0 then goto L4234f2;
  #L4234f0.  goto L42356a;
  #L4234f2.  v0:= v7 * v9 @kind long;
  #L4234f6.  v2:= v0 / v9 @kind long;
  #L4234fa.  v4:= lcmp(v2, v7);
  #L4234fe.  if v4 != 0 then goto L42352c;
  #L423502.  v2:= -1L;
  #L423506.  v4:= -9223372036854775808L;
  #L42350a.  v6:= lcmp(v7, v4);
  #L42350e.  if v6 != 0 then goto L42351a;
  #L423512.  v6:= lcmp(v9, v2);
  #L423516.  if v6 == 0 then goto L42352c;
  #L42351a.  v6:= lcmp(v9, v4);
  #L42351e.  if v6 != 0 then goto L42352a;
  #L423522.  v4:= lcmp(v7, v2);
  #L423526.  if v4 == 0 then goto L42352c;
  #L42352a.  return v0 @kind wide;
  #L42352c.  v0:= new `java.lang.ArithmeticException`;
  #L423530.  v1:= new `java.lang.StringBuilder`;
  #L423534.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42353a.  v2:= "Multiplication overflows a long: " @kind object;
  #L42353e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L423544.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42354a.  v7:= " * " @kind object;
  #L42354e.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L423554.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42355a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L423560.  v7:= temp @kind object;
  #L423562.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L423568.  throw v0;
  #L42356a.  return v0 @kind wide;
}
procedure `long` `f`(`long` v7 , `long` v9 ) @signature `Ln/c/a/w/d;.f:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L42357c.  v0:= v7 - v9 @kind long;
  #L423580.  v2:= v7 ^~ v0 @kind long;
  #L423584.  v4:= 0L;
  #L423588.  v6:= lcmp(v2, v4);
  #L42358c.  if v6 >= 0 then goto L4235dc;
  #L423590.  v2:= v7 ^~ v9 @kind long;
  #L423594.  v6:= lcmp(v2, v4);
  #L423598.  if v6 < 0 then goto L42359e;
  #L42359c.  goto L4235dc;
  #L42359e.  v0:= new `java.lang.ArithmeticException`;
  #L4235a2.  v1:= new `java.lang.StringBuilder`;
  #L4235a6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4235ac.  v2:= "Subtraction overflows a long: " @kind object;
  #L4235b0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4235b6.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4235bc.  v7:= " - " @kind object;
  #L4235c0.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4235c6.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4235cc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4235d2.  v7:= temp @kind object;
  #L4235d4.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4235da.  throw v0;
  #L4235dc.  return v0 @kind wide;
}
