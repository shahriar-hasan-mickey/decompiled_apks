record `n.c.a.v.c$f` @kind class @AccessFlag FINAL extends `n.c.a.v.c$g` @kind interface {
  `n.c.a.v.c$g`[] `n.c.a.v.c$f.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `n.c.a.v.c$f.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.c.a.v.c$f` v1 @kind this, `java.util.List` v2 @kind object, `boolean` v3 ) @signature `Ln/c/a/v/c$f;.<init>:(Ljava/util/List;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L41e23c.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L41e242.  v0:= temp;
  #L41e244.  v0:= new `n.c.a.v.c$g`[v0];
  #L41e248.  call temp:= `toArray`(v2, v0) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L41e24e.  v2:= temp @kind object;
  #L41e250.  v2:= (`n.c.a.v.c$g`[]) v2 @kind object;
  #L41e254.  call `<init>`(v1, v2, v3) @signature `Ln/c/a/v/c$f;.<init>:([Ln/c/a/v/c$g;Z)V` @kind direct;
  #L41e25a.  return @kind void;
}
procedure `void` `<init>`(`n.c.a.v.c$f` v0 @kind this, `n.c.a.v.c$g`[] v1 @kind object, `boolean` v2 ) @signature `Ln/c/a/v/c$f;.<init>:([Ln/c/a/v/c$g;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41e26c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41e272.  v0.`n.c.a.v.c$f.b` @type ^`n.c.a.v.c$g`[] := v1 @kind object;
  #L41e276.  v0.`n.c.a.v.c$f.c` @type ^`boolean` := v2 @kind boolean;
  #L41e27a.  return @kind void;
}
procedure `int` `a`(`n.c.a.v.c$f` v6 @kind this, `n.c.a.v.d` v7 @kind object, `java.lang.CharSequence` v8 @kind object, `int` v9 ) @signature `Ln/c/a/v/c$f;.a:(Ln/c/a/v/d;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41e11c.  v0:= v6.`n.c.a.v.c$f.c` @type ^`boolean` @kind boolean;
  #L41e120.  v1:= 0I;
  #L41e122.  if v0 == 0 then goto L41e162;
  #L41e126.  call `h`(v7) @signature `Ln/c/a/v/d;.h:()V` @kind virtual;
  #L41e12c.  v0:= v6.`n.c.a.v.c$f.b` @type ^`n.c.a.v.c$g`[] @kind object;
  #L41e130.  v2:= length @variable v0;
  #L41e132.  v4:= v9;
  #L41e134.  v3:= 0I;
  #L41e136.  if v3 >= v2 then goto L41e158;
  #L41e13a.  v5:= v0[v3] @kind object;
  #L41e13e.  call temp:= `a`(v5, v7, v8, v4) @signature `Ln/c/a/v/c$g;.a:(Ln/c/a/v/d;Ljava/lang/CharSequence;I)I` @kind interface;
  #L41e144.  v4:= temp;
  #L41e146.  if v4 >= 0 then goto L41e152;
  #L41e14a.  call `a`(v7, v1) @signature `Ln/c/a/v/d;.a:(Z)V` @kind virtual;
  #L41e150.  return v9;
  #L41e152.  v3:= v3 + 1;
  #L41e156.  goto L41e136;
  #L41e158.  v8:= 1I;
  #L41e15a.  call `a`(v7, v8) @signature `Ln/c/a/v/d;.a:(Z)V` @kind virtual;
  #L41e160.  return v4;
  #L41e162.  v0:= v6.`n.c.a.v.c$f.b` @type ^`n.c.a.v.c$g`[] @kind object;
  #L41e166.  v2:= length @variable v0;
  #L41e168.  if v1 >= v2 then goto L41e184;
  #L41e16c.  v3:= v0[v1] @kind object;
  #L41e170.  call temp:= `a`(v3, v7, v8, v9) @signature `Ln/c/a/v/c$g;.a:(Ln/c/a/v/d;Ljava/lang/CharSequence;I)I` @kind interface;
  #L41e176.  v9:= temp;
  #L41e178.  if v9 >= 0 then goto L41e17e;
  #L41e17c.  goto L41e184;
  #L41e17e.  v1:= v1 + 1;
  #L41e182.  goto L41e168;
  #L41e184.  return v9;
}
procedure `n.c.a.v.c$f` `a`(`n.c.a.v.c$f` v2 @kind this, `boolean` v3 ) @signature `Ln/c/a/v/c$f;.a:(Z)Ln/c/a/v/c$f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41e210.  v0:= v2.`n.c.a.v.c$f.c` @type ^`boolean` @kind boolean;
  #L41e214.  if v3 != v0 then goto L41e21a;
  #L41e218.  return v2 @kind object;
  #L41e21a.  v0:= new `n.c.a.v.c$f`;
  #L41e21e.  v1:= v2.`n.c.a.v.c$f.b` @type ^`n.c.a.v.c$g`[] @kind object;
  #L41e222.  call `<init>`(v0, v1, v3) @signature `Ln/c/a/v/c$f;.<init>:([Ln/c/a/v/c$g;Z)V` @kind direct;
  #L41e228.  return v0 @kind object;
}
procedure `boolean` `a`(`n.c.a.v.c$f` v6 @kind this, `n.c.a.v.f` v7 @kind object, `java.lang.StringBuilder` v8 @kind object) @signature `Ln/c/a/v/c$f;.a:(Ln/c/a/v/f;Ljava/lang/StringBuilder;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41e08c.  call temp:= `length`(v8) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L41e092.  v0:= temp;
  #L41e094.  v1:= v6.`n.c.a.v.c$f.c` @type ^`boolean` @kind boolean;
  #L41e098.  if v1 == 0 then goto L41e0a2;
  #L41e09c.  call `e`(v7) @signature `Ln/c/a/v/f;.e:()V` @kind virtual;
  #L41e0a2.  v1:= v6.`n.c.a.v.c$f.b` @type ^`n.c.a.v.c$g`[] @kind object;
  #L41e0a6.  v2:= length @variable v1;
  #L41e0a8.  v3:= 0I;
  #L41e0aa.  v4:= 1I;
  #L41e0ac.  if v3 >= v2 then goto L41e0dc;
  #L41e0b0.  v5:= v1[v3] @kind object;
  #L41e0b4.  call temp:= `a`(v5, v7, v8) @signature `Ln/c/a/v/c$g;.a:(Ln/c/a/v/f;Ljava/lang/StringBuilder;)Z` @kind interface;
  #L41e0ba.  v5:= temp;
  #L41e0bc.  if v5 != 0 then goto L41e0d6;
  #L41e0c0.  call `setLength`(v8, v0) @signature `Ljava/lang/StringBuilder;.setLength:(I)V` @kind virtual;
  #L41e0c6.  v8:= v6.`n.c.a.v.c$f.c` @type ^`boolean` @kind boolean;
  #L41e0ca.  if v8 == 0 then goto L41e0d4;
  #L41e0ce.  call `a`(v7) @signature `Ln/c/a/v/f;.a:()V` @kind virtual;
  #L41e0d4.  return v4;
  #L41e0d6.  v3:= v3 + 1;
  #L41e0da.  goto L41e0aa;
  #L41e0dc.  v8:= v6.`n.c.a.v.c$f.c` @type ^`boolean` @kind boolean;
  #L41e0e0.  if v8 == 0 then goto L41e0ea;
  #L41e0e4.  call `a`(v7) @signature `Ln/c/a/v/f;.a:()V` @kind virtual;
  #L41e0ea.  return v4;
  #L41e0ec.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41e0ee.  v0:= v6.`n.c.a.v.c$f.c` @type ^`boolean` @kind boolean;
  #L41e0f2.  if v0 == 0 then goto L41e0fc;
  #L41e0f6.  call `a`(v7) @signature `Ln/c/a/v/f;.a:()V` @kind virtual;
  #L41e0fc.  throw v8;
  catch `java.lang.Throwable` @[L41e0a2..L41e0c6] goto L41e0ec;
}
procedure `java.lang.String` `toString`(`n.c.a.v.c$f` v5 @kind this) @signature `Ln/c/a/v/c$f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41e198.  v0:= new `java.lang.StringBuilder`;
  #L41e19c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41e1a2.  v1:= v5.`n.c.a.v.c$f.b` @type ^`n.c.a.v.c$g`[] @kind object;
  #L41e1a6.  if v1 == 0 then goto L41e1f6;
  #L41e1aa.  v1:= v5.`n.c.a.v.c$f.c` @type ^`boolean` @kind boolean;
  #L41e1ae.  if v1 == 0 then goto L41e1b8;
  #L41e1b2.  v1:= "[" @kind object;
  #L41e1b6.  goto L41e1bc;
  #L41e1b8.  v1:= "(" @kind object;
  #L41e1bc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e1c2.  v1:= v5.`n.c.a.v.c$f.b` @type ^`n.c.a.v.c$g`[] @kind object;
  #L41e1c6.  v2:= length @variable v1;
  #L41e1c8.  v3:= 0I;
  #L41e1ca.  if v3 >= v2 then goto L41e1de;
  #L41e1ce.  v4:= v1[v3] @kind object;
  #L41e1d2.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e1d8.  v3:= v3 + 1;
  #L41e1dc.  goto L41e1ca;
  #L41e1de.  v1:= v5.`n.c.a.v.c$f.c` @type ^`boolean` @kind boolean;
  #L41e1e2.  if v1 == 0 then goto L41e1ec;
  #L41e1e6.  v1:= "]" @kind object;
  #L41e1ea.  goto L41e1f0;
  #L41e1ec.  v1:= ")" @kind object;
  #L41e1f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e1f6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41e1fc.  v0:= temp @kind object;
  #L41e1fe.  return v0 @kind object;
}
