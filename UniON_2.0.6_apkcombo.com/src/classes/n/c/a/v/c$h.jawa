record `n.c.a.v.c$h` @kind class @AccessFlag FINAL extends `n.c.a.v.c$g` @kind interface {
  `n.c.a.x.i` `n.c.a.v.c$h.b` @AccessFlag PRIVATE_FINAL;
  `int` `n.c.a.v.c$h.c` @AccessFlag PRIVATE_FINAL;
  `int` `n.c.a.v.c$h.d` @AccessFlag PRIVATE_FINAL;
  `boolean` `n.c.a.v.c$h.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.c.a.v.c$h` v2 @kind this, `n.c.a.x.i` v3 @kind object, `int` v4 , `int` v5 , `boolean` v6 ) @signature `Ln/c/a/v/c$h;.<init>:(Ln/c/a/x/i;IIZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L41e610.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41e616.  v0:= "field" @kind object;
  #L41e61a.  call temp:= `a`(v3, v0) @signature `Ln/c/a/w/d;.a:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41e620.  call temp:= `h`(v3) @signature `Ln/c/a/x/i;.h:()Ln/c/a/x/n;` @kind interface;
  #L41e626.  v0:= temp @kind object;
  #L41e628.  call temp:= `c`(v0) @signature `Ln/c/a/x/n;.c:()Z` @kind virtual;
  #L41e62e.  v0:= temp;
  #L41e630.  if v0 == 0 then goto L41e6fa;
  #L41e634.  if v4 < 0 then goto L41e6cc;
  #L41e638.  v0:= 9I;
  #L41e63c.  if v4 > v0 then goto L41e6cc;
  #L41e640.  v1:= 1I;
  #L41e642.  if v5 < v1 then goto L41e69e;
  #L41e646.  if v5 > v0 then goto L41e69e;
  #L41e64a.  if v5 < v4 then goto L41e660;
  #L41e64e.  v2.`n.c.a.v.c$h.b` @type ^`n.c.a.x.i` := v3 @kind object;
  #L41e652.  v2.`n.c.a.v.c$h.c` @type ^`int` := v4;
  #L41e656.  v2.`n.c.a.v.c$h.d` @type ^`int` := v5;
  #L41e65a.  v2.`n.c.a.v.c$h.e` @type ^`boolean` := v6 @kind boolean;
  #L41e65e.  return @kind void;
  #L41e660.  v3:= new `java.lang.IllegalArgumentException`;
  #L41e664.  v6:= new `java.lang.StringBuilder`;
  #L41e668.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41e66e.  v0:= "Maximum width must exceed or equal the minimum width but " @kind object;
  #L41e672.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e678.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e67e.  v5:= " < " @kind object;
  #L41e682.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e688.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e68e.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41e694.  v4:= temp @kind object;
  #L41e696.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41e69c.  throw v3;
  #L41e69e.  v3:= new `java.lang.IllegalArgumentException`;
  #L41e6a2.  v4:= new `java.lang.StringBuilder`;
  #L41e6a6.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41e6ac.  v6:= "Maximum width must be from 1 to 9 inclusive but was " @kind object;
  #L41e6b0.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e6b6.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e6bc.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41e6c2.  v4:= temp @kind object;
  #L41e6c4.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41e6ca.  throw v3;
  #L41e6cc.  v3:= new `java.lang.IllegalArgumentException`;
  #L41e6d0.  v5:= new `java.lang.StringBuilder`;
  #L41e6d4.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41e6da.  v6:= "Minimum width must be from 0 to 9 inclusive but was " @kind object;
  #L41e6de.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e6e4.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e6ea.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41e6f0.  v4:= temp @kind object;
  #L41e6f2.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41e6f8.  throw v3;
  #L41e6fa.  v4:= new `java.lang.IllegalArgumentException`;
  #L41e6fe.  v5:= new `java.lang.StringBuilder`;
  #L41e702.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41e708.  v6:= "Field must have a fixed set of values: " @kind object;
  #L41e70c.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e712.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e718.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41e71e.  v3:= temp @kind object;
  #L41e720.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41e726.  throw v4;
}
procedure `long` `a`(`n.c.a.v.c$h` v4 @kind this, `java.math.BigDecimal` v5 @kind object) @signature `Ln/c/a/v/c$h;.a:(Ljava/math/BigDecimal;)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41e598.  v0:= v4.`n.c.a.v.c$h.b` @type ^`n.c.a.x.i` @kind object;
  #L41e59c.  call temp:= `h`(v0) @signature `Ln/c/a/x/i;.h:()Ln/c/a/x/n;` @kind interface;
  #L41e5a2.  v0:= temp @kind object;
  #L41e5a4.  call temp:= `b`(v0) @signature `Ln/c/a/x/n;.b:()J` @kind virtual;
  #L41e5aa.  v1:= temp @kind wide;
  #L41e5ac.  call temp:= `valueOf`(v1) @signature `Ljava/math/BigDecimal;.valueOf:(J)Ljava/math/BigDecimal;` @kind static;
  #L41e5b2.  v1:= temp @kind object;
  #L41e5b4.  call temp:= `a`(v0) @signature `Ln/c/a/x/n;.a:()J` @kind virtual;
  #L41e5ba.  v2:= temp @kind wide;
  #L41e5bc.  call temp:= `valueOf`(v2) @signature `Ljava/math/BigDecimal;.valueOf:(J)Ljava/math/BigDecimal;` @kind static;
  #L41e5c2.  v0:= temp @kind object;
  #L41e5c4.  call temp:= `subtract`(v0, v1) @signature `Ljava/math/BigDecimal;.subtract:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;` @kind virtual;
  #L41e5ca.  v0:= temp @kind object;
  #L41e5cc.  v2:= `@@java.math.BigDecimal.ONE` @type ^`java.math.BigDecimal` @kind object;
  #L41e5d0.  call temp:= `add`(v0, v2) @signature `Ljava/math/BigDecimal;.add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;` @kind virtual;
  #L41e5d6.  v0:= temp @kind object;
  #L41e5d8.  call temp:= `multiply`(v5, v0) @signature `Ljava/math/BigDecimal;.multiply:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;` @kind virtual;
  #L41e5de.  v5:= temp @kind object;
  #L41e5e0.  v0:= `@@java.math.RoundingMode.FLOOR` @type ^`java.math.RoundingMode` @kind object;
  #L41e5e4.  v2:= 0I;
  #L41e5e6.  call temp:= `setScale`(v5, v2, v0) @signature `Ljava/math/BigDecimal;.setScale:(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;` @kind virtual;
  #L41e5ec.  v5:= temp @kind object;
  #L41e5ee.  call temp:= `add`(v5, v1) @signature `Ljava/math/BigDecimal;.add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;` @kind virtual;
  #L41e5f4.  v5:= temp @kind object;
  #L41e5f6.  call temp:= `longValueExact`(v5) @signature `Ljava/math/BigDecimal;.longValueExact:()J` @kind virtual;
  #L41e5fc.  v0:= temp @kind wide;
  #L41e5fe.  return v0 @kind wide;
}
procedure `java.math.BigDecimal` `a`(`n.c.a.v.c$h` v4 @kind this, `long` v5 ) @signature `Ln/c/a/v/c$h;.a:(J)Ljava/math/BigDecimal;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41e4fc.  v0:= v4.`n.c.a.v.c$h.b` @type ^`n.c.a.x.i` @kind object;
  #L41e500.  call temp:= `h`(v0) @signature `Ln/c/a/x/i;.h:()Ln/c/a/x/n;` @kind interface;
  #L41e506.  v0:= temp @kind object;
  #L41e508.  v1:= v4.`n.c.a.v.c$h.b` @type ^`n.c.a.x.i` @kind object;
  #L41e50c.  call temp:= `b`(v0, v5, v1) @signature `Ln/c/a/x/n;.b:(JLn/c/a/x/i;)J` @kind virtual;
  #L41e512.  call temp:= `b`(v0) @signature `Ln/c/a/x/n;.b:()J` @kind virtual;
  #L41e518.  v1:= temp @kind wide;
  #L41e51a.  call temp:= `valueOf`(v1) @signature `Ljava/math/BigDecimal;.valueOf:(J)Ljava/math/BigDecimal;` @kind static;
  #L41e520.  v1:= temp @kind object;
  #L41e522.  call temp:= `a`(v0) @signature `Ln/c/a/x/n;.a:()J` @kind virtual;
  #L41e528.  v2:= temp @kind wide;
  #L41e52a.  call temp:= `valueOf`(v2) @signature `Ljava/math/BigDecimal;.valueOf:(J)Ljava/math/BigDecimal;` @kind static;
  #L41e530.  v0:= temp @kind object;
  #L41e532.  call temp:= `subtract`(v0, v1) @signature `Ljava/math/BigDecimal;.subtract:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;` @kind virtual;
  #L41e538.  v0:= temp @kind object;
  #L41e53a.  v2:= `@@java.math.BigDecimal.ONE` @type ^`java.math.BigDecimal` @kind object;
  #L41e53e.  call temp:= `add`(v0, v2) @signature `Ljava/math/BigDecimal;.add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;` @kind virtual;
  #L41e544.  v0:= temp @kind object;
  #L41e546.  call temp:= `valueOf`(v5) @signature `Ljava/math/BigDecimal;.valueOf:(J)Ljava/math/BigDecimal;` @kind static;
  #L41e54c.  v5:= temp @kind object;
  #L41e54e.  call temp:= `subtract`(v5, v1) @signature `Ljava/math/BigDecimal;.subtract:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;` @kind virtual;
  #L41e554.  v5:= temp @kind object;
  #L41e556.  v6:= `@@java.math.RoundingMode.FLOOR` @type ^`java.math.RoundingMode` @kind object;
  #L41e55a.  v1:= 9I;
  #L41e55e.  call temp:= `divide`(v5, v0, v1, v6) @signature `Ljava/math/BigDecimal;.divide:(Ljava/math/BigDecimal;ILjava/math/RoundingMode;)Ljava/math/BigDecimal;` @kind virtual;
  #L41e564.  v5:= temp @kind object;
  #L41e566.  v6:= `@@java.math.BigDecimal.ZERO` @type ^`java.math.BigDecimal` @kind object;
  #L41e56a.  call temp:= `compareTo`(v5, v6) @signature `Ljava/math/BigDecimal;.compareTo:(Ljava/math/BigDecimal;)I` @kind virtual;
  #L41e570.  v6:= temp;
  #L41e572.  if v6 != 0 then goto L41e57c;
  #L41e576.  v5:= `@@java.math.BigDecimal.ZERO` @type ^`java.math.BigDecimal` @kind object;
  #L41e57a.  goto L41e584;
  #L41e57c.  call temp:= `stripTrailingZeros`(v5) @signature `Ljava/math/BigDecimal;.stripTrailingZeros:()Ljava/math/BigDecimal;` @kind virtual;
  #L41e582.  v5:= temp @kind object;
  #L41e584.  return v5 @kind object;
}
procedure `int` `a`(`n.c.a.v.c$h` v10 @kind this, `n.c.a.v.d` v11 @kind object, `java.lang.CharSequence` v12 @kind object, `int` v13 ) @signature `Ln/c/a/v/c$h;.a:(Ln/c/a/v/d;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L41e374.  call temp:= `f`(v11) @signature `Ln/c/a/v/d;.f:()Z` @kind virtual;
  #L41e37a.  v0:= temp;
  #L41e37c.  v1:= 0I;
  #L41e37e.  if v0 == 0 then goto L41e388;
  #L41e382.  v0:= v10.`n.c.a.v.c$h.c` @type ^`int`;
  #L41e386.  goto L41e38a;
  #L41e388.  v0:= 0I;
  #L41e38a.  call temp:= `f`(v11) @signature `Ln/c/a/v/d;.f:()Z` @kind virtual;
  #L41e390.  v2:= temp;
  #L41e392.  if v2 == 0 then goto L41e39c;
  #L41e396.  v2:= v10.`n.c.a.v.c$h.d` @type ^`int`;
  #L41e39a.  goto L41e3a0;
  #L41e39c.  v2:= 9I;
  #L41e3a0.  call temp:= `length`(v12) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L41e3a6.  v3:= temp;
  #L41e3a8.  if v13 != v3 then goto L41e3b4;
  #L41e3ac.  if v0 <= 0 then goto L41e3b2;
  #L41e3b0.  v13:= ~v13 @kind int;
  #L41e3b2.  return v13;
  #L41e3b4.  v4:= v10.`n.c.a.v.c$h.e` @type ^`boolean` @kind boolean;
  #L41e3b8.  if v4 == 0 then goto L41e3e4;
  #L41e3bc.  call temp:= `charAt`(v12, v13) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L41e3c2.  v4:= temp;
  #L41e3c4.  call temp:= `d`(v11) @signature `Ln/c/a/v/d;.d:()Ln/c/a/v/h;` @kind virtual;
  #L41e3ca.  v5:= temp @kind object;
  #L41e3cc.  call temp:= `a`(v5) @signature `Ln/c/a/v/h;.a:()C` @kind virtual;
  #L41e3d2.  v5:= temp;
  #L41e3d4.  if v4 == v5 then goto L41e3e0;
  #L41e3d8.  if v0 <= 0 then goto L41e3de;
  #L41e3dc.  v13:= ~v13 @kind int;
  #L41e3de.  return v13;
  #L41e3e0.  v13:= v13 + 1;
  #L41e3e4.  v8:= v13;
  #L41e3e6.  v0:= v0 + v8 @kind int;
  #L41e3e8.  if v0 <= v3 then goto L41e3f0;
  #L41e3ec.  v11:= ~v8 @kind int;
  #L41e3ee.  return v11;
  #L41e3f0.  v2:= v2 + v8 @kind int;
  #L41e3f2.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L41e3f8.  v13:= temp;
  #L41e3fa.  v1:= v8;
  #L41e3fc.  v2:= 0I;
  #L41e3fe.  if v1 >= v13 then goto L41e43c;
  #L41e402.  v3:= v1 + 1;
  #L41e406.  call temp:= `charAt`(v12, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L41e40c.  v1:= temp;
  #L41e40e.  call temp:= `d`(v11) @signature `Ln/c/a/v/d;.d:()Ln/c/a/v/h;` @kind virtual;
  #L41e414.  v4:= temp @kind object;
  #L41e416.  call temp:= `a`(v4, v1) @signature `Ln/c/a/v/h;.a:(C)I` @kind virtual;
  #L41e41c.  v1:= temp;
  #L41e41e.  if v1 >= 0 then goto L41e432;
  #L41e422.  if v3 >= v0 then goto L41e42a;
  #L41e426.  v11:= ~v8 @kind int;
  #L41e428.  return v11;
  #L41e42a.  v3:= v3 + -1;
  #L41e42e.  v9:= v3;
  #L41e430.  goto L41e43e;
  #L41e432.  v2:= v2 * 10;
  #L41e436.  v2:= v2 + v1 @kind int;
  #L41e438.  v1:= v3;
  #L41e43a.  goto L41e3fe;
  #L41e43c.  v9:= v1;
  #L41e43e.  v12:= new `java.math.BigDecimal`;
  #L41e442.  call `<init>`(v12, v2) @signature `Ljava/math/BigDecimal;.<init>:(I)V` @kind direct;
  #L41e448.  v13:= v9 - v8 @kind int;
  #L41e44c.  call temp:= `movePointLeft`(v12, v13) @signature `Ljava/math/BigDecimal;.movePointLeft:(I)Ljava/math/BigDecimal;` @kind virtual;
  #L41e452.  v12:= temp @kind object;
  #L41e454.  call temp:= `a`(v10, v12) @signature `Ln/c/a/v/c$h;.a:(Ljava/math/BigDecimal;)J` @kind direct;
  #L41e45a.  v6:= temp @kind wide;
  #L41e45c.  v5:= v10.`n.c.a.v.c$h.b` @type ^`n.c.a.x.i` @kind object;
  #L41e460.  v4:= v11 @kind object;
  #L41e462.  call temp:= `a`(v4, v5, v6, v8, v9) @signature `Ln/c/a/v/d;.a:(Ln/c/a/x/i;JII)I` @kind virtual;
  #L41e468.  v11:= temp;
  #L41e46a.  return v11;
}
procedure `boolean` `a`(`n.c.a.v.c$h` v4 @kind this, `n.c.a.v.f` v5 @kind object, `java.lang.StringBuilder` v6 @kind object) @signature `Ln/c/a/v/c$h;.a:(Ln/c/a/v/f;Ljava/lang/StringBuilder;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41e28c.  v0:= v4.`n.c.a.v.c$h.b` @type ^`n.c.a.x.i` @kind object;
  #L41e290.  call temp:= `a`(v5, v0) @signature `Ln/c/a/v/f;.a:(Ln/c/a/x/i;)Ljava/lang/Long;` @kind virtual;
  #L41e296.  v0:= temp @kind object;
  #L41e298.  v1:= 0I;
  #L41e29a.  if v0 != 0 then goto L41e2a0;
  #L41e29e.  return v1;
  #L41e2a0.  call temp:= `c`(v5) @signature `Ln/c/a/v/f;.c:()Ln/c/a/v/h;` @kind virtual;
  #L41e2a6.  v5:= temp @kind object;
  #L41e2a8.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L41e2ae.  v2:= temp @kind wide;
  #L41e2b0.  call temp:= `a`(v4, v2) @signature `Ln/c/a/v/c$h;.a:(J)Ljava/math/BigDecimal;` @kind direct;
  #L41e2b6.  v0:= temp @kind object;
  #L41e2b8.  call temp:= `scale`(v0) @signature `Ljava/math/BigDecimal;.scale:()I` @kind virtual;
  #L41e2be.  v2:= temp;
  #L41e2c0.  if v2 != 0 then goto L41e2fe;
  #L41e2c4.  v0:= v4.`n.c.a.v.c$h.c` @type ^`int`;
  #L41e2c8.  if v0 <= 0 then goto L41e360;
  #L41e2cc.  v0:= v4.`n.c.a.v.c$h.e` @type ^`boolean` @kind boolean;
  #L41e2d0.  if v0 == 0 then goto L41e2e2;
  #L41e2d4.  call temp:= `a`(v5) @signature `Ln/c/a/v/h;.a:()C` @kind virtual;
  #L41e2da.  v0:= temp;
  #L41e2dc.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e2e2.  v0:= v4.`n.c.a.v.c$h.c` @type ^`int`;
  #L41e2e6.  if v1 >= v0 then goto L41e360;
  #L41e2ea.  call temp:= `d`(v5) @signature `Ln/c/a/v/h;.d:()C` @kind virtual;
  #L41e2f0.  v0:= temp;
  #L41e2f2.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e2f8.  v1:= v1 + 1;
  #L41e2fc.  goto L41e2e2;
  #L41e2fe.  call temp:= `scale`(v0) @signature `Ljava/math/BigDecimal;.scale:()I` @kind virtual;
  #L41e304.  v1:= temp;
  #L41e306.  v2:= v4.`n.c.a.v.c$h.c` @type ^`int`;
  #L41e30a.  call temp:= `max`(v1, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L41e310.  v1:= temp;
  #L41e312.  v2:= v4.`n.c.a.v.c$h.d` @type ^`int`;
  #L41e316.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L41e31c.  v1:= temp;
  #L41e31e.  v2:= `@@java.math.RoundingMode.FLOOR` @type ^`java.math.RoundingMode` @kind object;
  #L41e322.  call temp:= `setScale`(v0, v1, v2) @signature `Ljava/math/BigDecimal;.setScale:(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;` @kind virtual;
  #L41e328.  v0:= temp @kind object;
  #L41e32a.  call temp:= `toPlainString`(v0) @signature `Ljava/math/BigDecimal;.toPlainString:()Ljava/lang/String;` @kind virtual;
  #L41e330.  v0:= temp @kind object;
  #L41e332.  v1:= 2I;
  #L41e334.  call temp:= `substring`(v0, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L41e33a.  v0:= temp @kind object;
  #L41e33c.  call temp:= `a`(v5, v0) @signature `Ln/c/a/v/h;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L41e342.  v0:= temp @kind object;
  #L41e344.  v1:= v4.`n.c.a.v.c$h.e` @type ^`boolean` @kind boolean;
  #L41e348.  if v1 == 0 then goto L41e35a;
  #L41e34c.  call temp:= `a`(v5) @signature `Ln/c/a/v/h;.a:()C` @kind virtual;
  #L41e352.  v5:= temp;
  #L41e354.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e35a.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e360.  v5:= 1I;
  #L41e362.  return v5;
}
procedure `java.lang.String` `toString`(`n.c.a.v.c$h` v4 @kind this) @signature `Ln/c/a/v/c$h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41e47c.  v0:= v4.`n.c.a.v.c$h.e` @type ^`boolean` @kind boolean;
  #L41e480.  if v0 == 0 then goto L41e48a;
  #L41e484.  v0:= ",DecimalPoint" @kind object;
  #L41e488.  goto L41e48e;
  #L41e48a.  v0:= "" @kind object;
  #L41e48e.  v1:= new `java.lang.StringBuilder`;
  #L41e492.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41e498.  v2:= "Fraction(" @kind object;
  #L41e49c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e4a2.  v2:= v4.`n.c.a.v.c$h.b` @type ^`n.c.a.x.i` @kind object;
  #L41e4a6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e4ac.  v2:= "," @kind object;
  #L41e4b0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e4b6.  v3:= v4.`n.c.a.v.c$h.c` @type ^`int`;
  #L41e4ba.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e4c0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e4c6.  v2:= v4.`n.c.a.v.c$h.d` @type ^`int`;
  #L41e4ca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e4d0.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e4d6.  v0:= ")" @kind object;
  #L41e4da.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41e4e0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41e4e6.  v0:= temp @kind object;
  #L41e4e8.  return v0 @kind object;
}
