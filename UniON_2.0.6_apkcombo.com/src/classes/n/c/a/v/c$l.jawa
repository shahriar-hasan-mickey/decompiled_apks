record `n.c.a.v.c$l` @kind class @AccessFlag FINAL extends `n.c.a.v.c$g` @kind interface {
  `n.c.a.v.c$g` `n.c.a.v.c$l.b` @AccessFlag PRIVATE_FINAL;
  `int` `n.c.a.v.c$l.c` @AccessFlag PRIVATE_FINAL;
  `char` `n.c.a.v.c$l.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.c.a.v.c$l` v0 @kind this, `n.c.a.v.c$g` v1 @kind object, `int` v2 , `char` v3 ) @signature `Ln/c/a/v/c$l;.<init>:(Ln/c/a/v/c$g;IC)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41fa20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41fa26.  v0.`n.c.a.v.c$l.b` @type ^`n.c.a.v.c$g` := v1 @kind object;
  #L41fa2a.  v0.`n.c.a.v.c$l.c` @type ^`int` := v2;
  #L41fa2e.  v0.`n.c.a.v.c$l.d` @type ^`char` := v3 @kind char;
  #L41fa32.  return @kind void;
}
procedure `int` `a`(`n.c.a.v.c$l` v6 @kind this, `n.c.a.v.d` v7 @kind object, `java.lang.CharSequence` v8 @kind object, `int` v9 ) @signature `Ln/c/a/v/c$l;.a:(Ln/c/a/v/d;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41f8d0.  call temp:= `f`(v7) @signature `Ln/c/a/v/d;.f:()Z` @kind virtual;
  #L41f8d6.  v0:= temp;
  #L41f8d8.  call temp:= `e`(v7) @signature `Ln/c/a/v/d;.e:()Z` @kind virtual;
  #L41f8de.  v1:= temp;
  #L41f8e0.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L41f8e6.  v2:= temp;
  #L41f8e8.  if v9 > v2 then goto L41f970;
  #L41f8ec.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L41f8f2.  v2:= temp;
  #L41f8f4.  if v9 != v2 then goto L41f8fc;
  #L41f8f8.  v7:= ~v9 @kind int;
  #L41f8fa.  return v7;
  #L41f8fc.  v2:= v6.`n.c.a.v.c$l.c` @type ^`int`;
  #L41f900.  v2:= v2 + v9 @kind int;
  #L41f902.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L41f908.  v3:= temp;
  #L41f90a.  if v2 <= v3 then goto L41f91e;
  #L41f90e.  if v0 == 0 then goto L41f916;
  #L41f912.  v7:= ~v9 @kind int;
  #L41f914.  return v7;
  #L41f916.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L41f91c.  v2:= temp;
  #L41f91e.  v3:= v9;
  #L41f920.  if v3 >= v2 then goto L41f94c;
  #L41f924.  call temp:= `charAt`(v8, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L41f92a.  v4:= temp;
  #L41f92c.  v5:= v6.`n.c.a.v.c$l.d` @type ^`char` @kind char;
  #L41f930.  if v1 == 0 then goto L41f93a;
  #L41f934.  if v4 != v5 then goto L41f94c;
  #L41f938.  goto L41f946;
  #L41f93a.  call temp:= `a`(v7, v4, v5) @signature `Ln/c/a/v/d;.a:(CC)Z` @kind virtual;
  #L41f940.  v4:= temp;
  #L41f942.  if v4 == 0 then goto L41f94c;
  #L41f946.  v3:= v3 + 1;
  #L41f94a.  goto L41f920;
  #L41f94c.  v1:= 0I;
  #L41f94e.  call temp:= `subSequence`(v8, v1, v2) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L41f954.  v8:= temp @kind object;
  #L41f956.  v1:= v6.`n.c.a.v.c$l.b` @type ^`n.c.a.v.c$g` @kind object;
  #L41f95a.  call temp:= `a`(v1, v7, v8, v3) @signature `Ln/c/a/v/c$g;.a:(Ln/c/a/v/d;Ljava/lang/CharSequence;I)I` @kind interface;
  #L41f960.  v7:= temp;
  #L41f962.  if v7 == v2 then goto L41f96e;
  #L41f966.  if v0 == 0 then goto L41f96e;
  #L41f96a.  v9:= v9 + v3 @kind int;
  #L41f96c.  v7:= ~v9 @kind int;
  #L41f96e.  return v7;
  #L41f970.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L41f974.  call `<init>`(v7) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L41f97a.  throw v7;
}
procedure `boolean` `a`(`n.c.a.v.c$l` v3 @kind this, `n.c.a.v.f` v4 @kind object, `java.lang.StringBuilder` v5 @kind object) @signature `Ln/c/a/v/c$l;.a:(Ln/c/a/v/f;Ljava/lang/StringBuilder;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41f830.  call temp:= `length`(v5) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L41f836.  v0:= temp;
  #L41f838.  v1:= v3.`n.c.a.v.c$l.b` @type ^`n.c.a.v.c$g` @kind object;
  #L41f83c.  call temp:= `a`(v1, v4, v5) @signature `Ln/c/a/v/c$g;.a:(Ln/c/a/v/f;Ljava/lang/StringBuilder;)Z` @kind interface;
  #L41f842.  v4:= temp;
  #L41f844.  v1:= 0I;
  #L41f846.  if v4 != 0 then goto L41f84c;
  #L41f84a.  return v1;
  #L41f84c.  call temp:= `length`(v5) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L41f852.  v4:= temp;
  #L41f854.  v4:= v4 - v0 @kind int;
  #L41f856.  v2:= v3.`n.c.a.v.c$l.c` @type ^`int`;
  #L41f85a.  if v4 > v2 then goto L41f87c;
  #L41f85e.  v2:= v3.`n.c.a.v.c$l.c` @type ^`int`;
  #L41f862.  v2:= v2 - v4 @kind int;
  #L41f864.  if v1 >= v2 then goto L41f878;
  #L41f868.  v2:= v3.`n.c.a.v.c$l.d` @type ^`char` @kind char;
  #L41f86c.  call temp:= `insert`(v5, v0, v2) @signature `Ljava/lang/StringBuilder;.insert:(IC)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f872.  v1:= v1 + 1;
  #L41f876.  goto L41f85e;
  #L41f878.  v4:= 1I;
  #L41f87a.  return v4;
  #L41f87c.  v5:= new `n.c.a.b`;
  #L41f880.  v0:= new `java.lang.StringBuilder`;
  #L41f884.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41f88a.  v1:= "Cannot print as output of " @kind object;
  #L41f88e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f894.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f89a.  v4:= " characters exceeds pad width of " @kind object;
  #L41f89e.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f8a4.  v4:= v3.`n.c.a.v.c$l.c` @type ^`int`;
  #L41f8a8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f8ae.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41f8b4.  v4:= temp @kind object;
  #L41f8b6.  call `<init>`(v5, v4) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41f8bc.  throw v5;
}
procedure `java.lang.String` `toString`(`n.c.a.v.c$l` v3 @kind this) @signature `Ln/c/a/v/c$l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41f98c.  v0:= new `java.lang.StringBuilder`;
  #L41f990.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41f996.  v1:= "Pad(" @kind object;
  #L41f99a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f9a0.  v1:= v3.`n.c.a.v.c$l.b` @type ^`n.c.a.v.c$g` @kind object;
  #L41f9a4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f9aa.  v1:= "," @kind object;
  #L41f9ae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f9b4.  v1:= v3.`n.c.a.v.c$l.c` @type ^`int`;
  #L41f9b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f9be.  v1:= v3.`n.c.a.v.c$l.d` @type ^`char` @kind char;
  #L41f9c2.  v2:= 32I;
  #L41f9c6.  if v1 != v2 then goto L41f9d0;
  #L41f9ca.  v1:= ")" @kind object;
  #L41f9ce.  goto L41fa00;
  #L41f9d0.  v1:= new `java.lang.StringBuilder`;
  #L41f9d4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41f9da.  v2:= ",'" @kind object;
  #L41f9de.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f9e4.  v2:= v3.`n.c.a.v.c$l.d` @type ^`char` @kind char;
  #L41f9e8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f9ee.  v2:= "')" @kind object;
  #L41f9f2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f9f8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41f9fe.  v1:= temp @kind object;
  #L41fa00.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41fa06.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41fa0c.  v0:= temp @kind object;
  #L41fa0e.  return v0 @kind object;
}
