record `n.c.a.v.c$c` @kind class @AccessFlag  extends `java.util.Comparator` @kind interface {
}
procedure `void` `<init>`(`n.c.a.v.c$c` v0 @kind this) @signature `Ln/c/a/v/c$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41def4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41defa.  return @kind void;
}
procedure `int` `a`(`n.c.a.v.c$c` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Ln/c/a/v/c$c;.a:(Ljava/lang/String;Ljava/lang/String;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L41deb0.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L41deb6.  v0:= temp;
  #L41deb8.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L41debe.  v1:= temp;
  #L41dec0.  if v0 != v1 then goto L41dece;
  #L41dec4.  call temp:= `compareTo`(v3, v4) @signature `Ljava/lang/String;.compareTo:(Ljava/lang/String;)I` @kind virtual;
  #L41deca.  v3:= temp;
  #L41decc.  goto L41dee0;
  #L41dece.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L41ded4.  v3:= temp;
  #L41ded6.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L41dedc.  v4:= temp;
  #L41dede.  v3:= v3 - v4 @kind int;
  #L41dee0.  return v3;
}
procedure `int` `compare`(`n.c.a.v.c$c` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Ln/c/a/v/c$c;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L41de8c.  v1:= (`java.lang.String`) v1 @kind object;
  #L41de90.  v2:= (`java.lang.String`) v2 @kind object;
  #L41de94.  call temp:= `a`(v0, v1, v2) @signature `Ln/c/a/v/c$c;.a:(Ljava/lang/String;Ljava/lang/String;)I` @kind virtual;
  #L41de9a.  v1:= temp;
  #L41de9c.  return v1;
}
