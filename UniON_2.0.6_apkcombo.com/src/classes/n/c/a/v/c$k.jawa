record `n.c.a.v.c$k` @kind class @AccessFlag FINAL extends `n.c.a.v.c$g` @kind interface {
  `java.lang.String` `n.c.a.v.c$k.b` @AccessFlag PRIVATE_FINAL;
  `int` `n.c.a.v.c$k.c` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String`[] `@@n.c.a.v.c$k.d` @AccessFlag STATIC_FINAL;
global `n.c.a.v.c$k` `@@n.c.a.v.c$k.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln/c/a/v/c$k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L41f79c.  v0:= "+HH" @kind object;
  #L41f7a0.  v1:= "+HHmm" @kind object;
  #L41f7a4.  v2:= "+HH:mm" @kind object;
  #L41f7a8.  v3:= "+HHMM" @kind object;
  #L41f7ac.  v4:= "+HH:MM" @kind object;
  #L41f7b0.  v5:= "+HHMMss" @kind object;
  #L41f7b4.  v6:= "+HH:MM:ss" @kind object;
  #L41f7b8.  v7:= "+HHMMSS" @kind object;
  #L41f7bc.  v8:= "+HH:MM:SS" @kind object;
  #L41f7c0.  temp:= new `java.lang.String`[v0, v1, v2, v3, v4, v5, v6, v7, v8];
  #L41f7c6.  v0:= temp @kind object;
  #L41f7c8.  `@@n.c.a.v.c$k.d` @type ^`java.lang.String`[] := v0 @kind object;
  #L41f7cc.  v0:= new `n.c.a.v.c$k`;
  #L41f7d0.  v1:= "Z" @kind object;
  #L41f7d4.  v2:= "+HH:MM:ss" @kind object;
  #L41f7d8.  call `<init>`(v0, v1, v2) @signature `Ln/c/a/v/c$k;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L41f7de.  `@@n.c.a.v.c$k.e` @type ^`n.c.a.v.c$k` := v0 @kind object;
  #L41f7e2.  return @kind void;
}
procedure `void` `<init>`(`n.c.a.v.c$k` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Ln/c/a/v/c$k;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L41f7f4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41f7fa.  v0:= "noOffsetText" @kind object;
  #L41f7fe.  call temp:= `a`(v2, v0) @signature `Ln/c/a/w/d;.a:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41f804.  v0:= "pattern" @kind object;
  #L41f808.  call temp:= `a`(v3, v0) @signature `Ln/c/a/w/d;.a:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41f80e.  v1.`n.c.a.v.c$k.b` @type ^`java.lang.String` := v2 @kind object;
  #L41f812.  call temp:= `a`(v1, v3) @signature `Ln/c/a/v/c$k;.a:(Ljava/lang/String;)I` @kind direct;
  #L41f818.  v2:= temp;
  #L41f81a.  v1.`n.c.a.v.c$k.c` @type ^`int` := v2;
  #L41f81e.  return @kind void;
}
procedure `int` `a`(`n.c.a.v.c$k` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Ln/c/a/v/c$k;.a:(Ljava/lang/String;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L41f574.  v0:= 0I;
  #L41f576.  v1:= `@@n.c.a.v.c$k.d` @type ^`java.lang.String`[] @kind object;
  #L41f57a.  v2:= length @variable v1;
  #L41f57c.  if v0 >= v2 then goto L41f598;
  #L41f580.  v1:= v1[v0] @kind object;
  #L41f584.  call temp:= `equals`(v1, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L41f58a.  v1:= temp;
  #L41f58c.  if v1 == 0 then goto L41f592;
  #L41f590.  return v0;
  #L41f592.  v0:= v0 + 1;
  #L41f596.  goto L41f576;
  #L41f598.  v0:= new `java.lang.IllegalArgumentException`;
  #L41f59c.  v1:= new `java.lang.StringBuilder`;
  #L41f5a0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41f5a6.  v2:= "Invalid zone offset pattern: " @kind object;
  #L41f5aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f5b0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f5b6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41f5bc.  v4:= temp @kind object;
  #L41f5be.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41f5c4.  throw v0;
}
procedure `boolean` `a`(`n.c.a.v.c$k` v5 @kind this, `int`[] v6 @kind object, `int` v7 , `java.lang.CharSequence` v8 @kind object, `boolean` v9 ) @signature `Ln/c/a/v/c$k;.a:([IILjava/lang/CharSequence;Z)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41f350.  v0:= v5.`n.c.a.v.c$k.c` @type ^`int`;
  #L41f354.  v1:= v0 + 3;
  #L41f358.  v1:= v1 / 2;
  #L41f35c.  v2:= 0I;
  #L41f35e.  if v1 >= v7 then goto L41f364;
  #L41f362.  return v2;
  #L41f364.  v1:= v6[v2];
  #L41f368.  v0:= v0 %% 2;
  #L41f36c.  if v0 != 0 then goto L41f398;
  #L41f370.  v0:= 1I;
  #L41f372.  if v7 <= v0 then goto L41f398;
  #L41f376.  v0:= v1 + 1;
  #L41f37a.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L41f380.  v3:= temp;
  #L41f382.  if v0 > v3 then goto L41f396;
  #L41f386.  call temp:= `charAt`(v8, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L41f38c.  v1:= temp;
  #L41f38e.  v3:= 58I;
  #L41f392.  if v1 == v3 then goto L41f39a;
  #L41f396.  return v9;
  #L41f398.  v0:= v1;
  #L41f39a.  v1:= v0 + 2;
  #L41f39e.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L41f3a4.  v3:= temp;
  #L41f3a6.  if v1 <= v3 then goto L41f3ac;
  #L41f3aa.  return v9;
  #L41f3ac.  v1:= v0 + 1;
  #L41f3b0.  call temp:= `charAt`(v8, v0) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L41f3b6.  v0:= temp;
  #L41f3b8.  v3:= v1 + 1;
  #L41f3bc.  call temp:= `charAt`(v8, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L41f3c2.  v8:= temp;
  #L41f3c4.  v1:= 48I;
  #L41f3c8.  if v0 < v1 then goto L41f400;
  #L41f3cc.  v4:= 57I;
  #L41f3d0.  if v0 > v4 then goto L41f400;
  #L41f3d4.  if v8 < v1 then goto L41f400;
  #L41f3d8.  if v8 <= v4 then goto L41f3de;
  #L41f3dc.  goto L41f400;
  #L41f3de.  v0:= v0 - v1 @kind int;
  #L41f3e0.  v0:= v0 * 10;
  #L41f3e4.  v8:= v8 - v1 @kind int;
  #L41f3e6.  v0:= v0 + v8 @kind int;
  #L41f3e8.  if v0 < 0 then goto L41f400;
  #L41f3ec.  v8:= 59I;
  #L41f3f0.  if v0 <= v8 then goto L41f3f6;
  #L41f3f4.  goto L41f400;
  #L41f3f6.  v6[v7]:= v0;
  #L41f3fa.  v6[v2]:= v3;
  #L41f3fe.  return v2;
  #L41f400.  return v9;
}
procedure `int` `a`(`n.c.a.v.c$k` v15 @kind this, `n.c.a.v.d` v16 @kind object, `java.lang.CharSequence` v17 @kind object, `int` v18 ) @signature `Ln/c/a/v/c$k;.a:(Ln/c/a/v/d;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L41f5d8.  v0:= v15 @kind object;
  #L41f5da.  v7:= v17 @kind object;
  #L41f5de.  v8:= v18;
  #L41f5e2.  call temp:= `length`(v17) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L41f5e8.  v1:= temp;
  #L41f5ea.  v2:= v0.`n.c.a.v.c$k.b` @type ^`java.lang.String` @kind object;
  #L41f5ee.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L41f5f4.  v9:= temp;
  #L41f5f6.  if v9 != 0 then goto L41f61c;
  #L41f5fa.  if v8 != v1 then goto L41f65a;
  #L41f5fe.  v2:= `@@n.c.a.x.a.G` @type ^`n.c.a.x.a` @kind object;
  #L41f602.  v3:= 0L;
  #L41f606.  v1:= v16 @kind object;
  #L41f60a.  v5:= v18;
  #L41f60e.  v6:= v18;
  #L41f612.  call temp:= `a`(v1, v2, v3, v5, v6) @signature `Ln/c/a/v/d;.a:(Ln/c/a/x/i;JII)I` @kind virtual;
  #L41f618.  v1:= temp;
  #L41f61a.  return v1;
  #L41f61c.  if v8 != v1 then goto L41f624;
  #L41f620.  v1:= ~v8 @kind int;
  #L41f622.  return v1;
  #L41f624.  v4:= v0.`n.c.a.v.c$k.b` @type ^`java.lang.String` @kind object;
  #L41f628.  v5:= 0I;
  #L41f62a.  v1:= v16 @kind object;
  #L41f62e.  v2:= v17 @kind object;
  #L41f632.  v3:= v18;
  #L41f636.  v6:= v9;
  #L41f638.  call temp:= `a`(v1, v2, v3, v4, v5, v6) @signature `Ln/c/a/v/d;.a:(Ljava/lang/CharSequence;ILjava/lang/CharSequence;II)Z` @kind virtual;
  #L41f63e.  v1:= temp;
  #L41f640.  if v1 == 0 then goto L41f65a;
  #L41f644.  v2:= `@@n.c.a.x.a.G` @type ^`n.c.a.x.a` @kind object;
  #L41f648.  v3:= 0L;
  #L41f64c.  v6:= v8 + v9 @kind int;
  #L41f650.  v1:= v16 @kind object;
  #L41f654.  v5:= v18;
  #L41f658.  goto L41f612;
  #L41f65a.  call temp:= `charAt`(v17, v18) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L41f660.  v1:= temp;
  #L41f662.  v2:= 43I;
  #L41f666.  v3:= 45I;
  #L41f66a.  if v1 == v2 then goto L41f672;
  #L41f66e.  if v1 != v3 then goto L41f712;
  #L41f672.  v2:= 1I;
  #L41f674.  if v1 != v3 then goto L41f67c;
  #L41f678.  v1:= -1I;
  #L41f67a.  goto L41f67e;
  #L41f67c.  v1:= 1I;
  #L41f67e.  v3:= 4I;
  #L41f680.  v3:= new `int`[v3];
  #L41f684.  v4:= v8 + 1;
  #L41f688.  v5:= 0I;
  #L41f68a.  v3[v5]:= v4;
  #L41f68e.  call temp:= `a`(v15, v3, v2, v7, v2) @signature `Ln/c/a/v/c$k;.a:([IILjava/lang/CharSequence;Z)Z` @kind direct;
  #L41f694.  v4:= temp;
  #L41f696.  v6:= 2I;
  #L41f698.  v10:= 3I;
  #L41f69a.  if v4 != 0 then goto L41f6ca;
  #L41f69e.  v4:= v0.`n.c.a.v.c$k.c` @type ^`int`;
  #L41f6a2.  if v4 < v10 then goto L41f6aa;
  #L41f6a6.  v4:= 1I;
  #L41f6a8.  goto L41f6ac;
  #L41f6aa.  v4:= 0I;
  #L41f6ac.  call temp:= `a`(v15, v3, v6, v7, v4) @signature `Ln/c/a/v/c$k;.a:([IILjava/lang/CharSequence;Z)Z` @kind direct;
  #L41f6b2.  v4:= temp;
  #L41f6b4.  if v4 != 0 then goto L41f6ca;
  #L41f6b8.  call temp:= `a`(v15, v3, v10, v7, v5) @signature `Ln/c/a/v/c$k;.a:([IILjava/lang/CharSequence;Z)Z` @kind direct;
  #L41f6be.  v4:= temp;
  #L41f6c0.  if v4 == 0 then goto L41f6c6;
  #L41f6c4.  goto L41f6ca;
  #L41f6c6.  v4:= 0I;
  #L41f6c8.  goto L41f6cc;
  #L41f6ca.  v4:= 1I;
  #L41f6cc.  if v4 != 0 then goto L41f712;
  #L41f6d0.  v11:= (`long`) v1 @kind i2l;
  #L41f6d2.  v1:= v3[v2];
  #L41f6d6.  v1:= (`long`) v1 @kind i2l;
  #L41f6d8.  v13:= 3600L;
  #L41f6dc.  v1:= v1 * v13 @kind long;
  #L41f6e0.  v4:= v3[v6];
  #L41f6e4.  v6:= (`long`) v4 @kind i2l;
  #L41f6e6.  v13:= 60L;
  #L41f6ea.  v6:= v6 * v13 @kind long;
  #L41f6ee.  v1:= v1 + v6 @kind long;
  #L41f6f0.  v4:= v3[v10];
  #L41f6f4.  v6:= (`long`) v4 @kind i2l;
  #L41f6f6.  v1:= v1 + v6 @kind long;
  #L41f6f8.  v6:= v11 * v1 @kind long;
  #L41f6fc.  v2:= `@@n.c.a.x.a.G` @type ^`n.c.a.x.a` @kind object;
  #L41f700.  v9:= v3[v5];
  #L41f704.  v1:= v16 @kind object;
  #L41f708.  v3:= v6 @kind wide;
  #L41f70a.  v5:= v18;
  #L41f70e.  v6:= v9;
  #L41f710.  goto L41f612;
  #L41f712.  if v9 != 0 then goto L41f718;
  #L41f716.  goto L41f644;
  #L41f718.  v1:= ~v8 @kind int;
  #L41f71a.  return v1;
}
procedure `boolean` `a`(`n.c.a.v.c$k` v7 @kind this, `n.c.a.v.f` v8 @kind object, `java.lang.StringBuilder` v9 @kind object) @signature `Ln/c/a/v/c$k;.a:(Ln/c/a/v/f;Ljava/lang/StringBuilder;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L41f414.  v0:= `@@n.c.a.x.a.G` @type ^`n.c.a.x.a` @kind object;
  #L41f418.  call temp:= `a`(v8, v0) @signature `Ln/c/a/v/f;.a:(Ln/c/a/x/i;)Ljava/lang/Long;` @kind virtual;
  #L41f41e.  v8:= temp @kind object;
  #L41f420.  if v8 != 0 then goto L41f428;
  #L41f424.  v8:= 0I;
  #L41f426.  return v8;
  #L41f428.  call temp:= `longValue`(v8) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L41f42e.  v0:= temp @kind wide;
  #L41f430.  call temp:= `a`(v0) @signature `Ln/c/a/w/d;.a:(J)I` @kind static;
  #L41f436.  v8:= temp;
  #L41f438.  v0:= 1I;
  #L41f43a.  if v8 != 0 then goto L41f44c;
  #L41f43e.  v8:= v7.`n.c.a.v.c$k.b` @type ^`java.lang.String` @kind object;
  #L41f442.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f448.  goto L41f562;
  #L41f44c.  v1:= v8 / 3600;
  #L41f450.  v1:= v1 %% 100;
  #L41f454.  call temp:= `abs`(v1) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L41f45a.  v1:= temp;
  #L41f45c.  v2:= v8 / 60;
  #L41f460.  v2:= v2 %% 60;
  #L41f464.  call temp:= `abs`(v2) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L41f46a.  v2:= temp;
  #L41f46c.  v3:= v8 %% 60;
  #L41f470.  call temp:= `abs`(v3) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L41f476.  v3:= temp;
  #L41f478.  call temp:= `length`(v9) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L41f47e.  v4:= temp;
  #L41f480.  if v8 >= 0 then goto L41f48a;
  #L41f484.  v8:= "-" @kind object;
  #L41f488.  goto L41f48e;
  #L41f48a.  v8:= "+" @kind object;
  #L41f48e.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f494.  v8:= v1 / 10;
  #L41f498.  v8:= v8 + 48;
  #L41f49c.  v8:= (`char`) v8 @kind i2c;
  #L41f49e.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f4a4.  v8:= v1 %% 10;
  #L41f4a8.  v8:= v8 + 48;
  #L41f4ac.  v8:= (`char`) v8 @kind i2c;
  #L41f4ae.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f4b4.  v8:= v7.`n.c.a.v.c$k.c` @type ^`int`;
  #L41f4b8.  v5:= 3I;
  #L41f4ba.  if v8 >= v5 then goto L41f4c6;
  #L41f4be.  if v8 < v0 then goto L41f554;
  #L41f4c2.  if v2 <= 0 then goto L41f554;
  #L41f4c6.  v8:= v7.`n.c.a.v.c$k.c` @type ^`int`;
  #L41f4ca.  v8:= v8 %% 2;
  #L41f4ce.  v5:= ":" @kind object;
  #L41f4d2.  v6:= "" @kind object;
  #L41f4d6.  if v8 != 0 then goto L41f4de;
  #L41f4da.  v8:= v5 @kind object;
  #L41f4dc.  goto L41f4e0;
  #L41f4de.  v8:= v6 @kind object;
  #L41f4e0.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f4e6.  v8:= v2 / 10;
  #L41f4ea.  v8:= v8 + 48;
  #L41f4ee.  v8:= (`char`) v8 @kind i2c;
  #L41f4f0.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f4f6.  v8:= v2 %% 10;
  #L41f4fa.  v8:= v8 + 48;
  #L41f4fe.  v8:= (`char`) v8 @kind i2c;
  #L41f500.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f506.  v1:= v1 + v2 @kind int;
  #L41f508.  v8:= v7.`n.c.a.v.c$k.c` @type ^`int`;
  #L41f50c.  v2:= 7I;
  #L41f50e.  if v8 >= v2 then goto L41f51c;
  #L41f512.  v2:= 5I;
  #L41f514.  if v8 < v2 then goto L41f554;
  #L41f518.  if v3 <= 0 then goto L41f554;
  #L41f51c.  v8:= v7.`n.c.a.v.c$k.c` @type ^`int`;
  #L41f520.  v8:= v8 %% 2;
  #L41f524.  if v8 != 0 then goto L41f52a;
  #L41f528.  goto L41f52c;
  #L41f52a.  v5:= v6 @kind object;
  #L41f52c.  call temp:= `append`(v9, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f532.  v8:= v3 / 10;
  #L41f536.  v8:= v8 + 48;
  #L41f53a.  v8:= (`char`) v8 @kind i2c;
  #L41f53c.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f542.  v8:= v3 %% 10;
  #L41f546.  v8:= v8 + 48;
  #L41f54a.  v8:= (`char`) v8 @kind i2c;
  #L41f54c.  call temp:= `append`(v9, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f552.  v1:= v1 + v3 @kind int;
  #L41f554.  if v1 != 0 then goto L41f562;
  #L41f558.  call `setLength`(v9, v4) @signature `Ljava/lang/StringBuilder;.setLength:(I)V` @kind virtual;
  #L41f55e.  goto L41f43e;
  #L41f562.  return v0;
}
procedure `java.lang.String` `toString`(`n.c.a.v.c$k` v4 @kind this) @signature `Ln/c/a/v/c$k;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41f72c.  v0:= v4.`n.c.a.v.c$k.b` @type ^`java.lang.String` @kind object;
  #L41f730.  v1:= "'" @kind object;
  #L41f734.  v2:= "''" @kind object;
  #L41f738.  call temp:= `replace`(v0, v1, v2) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L41f73e.  v0:= temp @kind object;
  #L41f740.  v1:= new `java.lang.StringBuilder`;
  #L41f744.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41f74a.  v2:= "Offset(" @kind object;
  #L41f74e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f754.  v2:= `@@n.c.a.v.c$k.d` @type ^`java.lang.String`[] @kind object;
  #L41f758.  v3:= v4.`n.c.a.v.c$k.c` @type ^`int`;
  #L41f75c.  v2:= v2[v3] @kind object;
  #L41f760.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f766.  v2:= ",'" @kind object;
  #L41f76a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f770.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f776.  v0:= "')" @kind object;
  #L41f77a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f780.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41f786.  v0:= temp @kind object;
  #L41f788.  return v0 @kind object;
}
