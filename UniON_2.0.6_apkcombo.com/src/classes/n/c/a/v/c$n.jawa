record `n.c.a.v.c$n` @kind class @AccessFlag FINAL extends `n.c.a.v.c$g` @kind interface {
  `java.lang.String` `n.c.a.v.c$n.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.c.a.v.c$n` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Ln/c/a/v/c$n;.<init>:(Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41fcbc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41fcc2.  v0.`n.c.a.v.c$n.b` @type ^`java.lang.String` := v1 @kind object;
  #L41fcc6.  return @kind void;
}
procedure `int` `a`(`n.c.a.v.c$n` v7 @kind this, `n.c.a.v.d` v8 @kind object, `java.lang.CharSequence` v9 @kind object, `int` v10 ) @signature `Ln/c/a/v/c$n;.a:(Ln/c/a/v/d;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L41fc10.  call temp:= `length`(v9) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L41fc16.  v0:= temp;
  #L41fc18.  if v10 > v0 then goto L41fc54;
  #L41fc1c.  if v10 < 0 then goto L41fc54;
  #L41fc20.  v4:= v7.`n.c.a.v.c$n.b` @type ^`java.lang.String` @kind object;
  #L41fc24.  v5:= 0I;
  #L41fc26.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L41fc2c.  v6:= temp;
  #L41fc2e.  v1:= v8 @kind object;
  #L41fc30.  v2:= v9 @kind object;
  #L41fc32.  v3:= v10;
  #L41fc34.  call temp:= `a`(v1, v2, v3, v4, v5, v6) @signature `Ln/c/a/v/d;.a:(Ljava/lang/CharSequence;ILjava/lang/CharSequence;II)Z` @kind virtual;
  #L41fc3a.  v8:= temp;
  #L41fc3c.  if v8 != 0 then goto L41fc44;
  #L41fc40.  v8:= ~v10 @kind int;
  #L41fc42.  return v8;
  #L41fc44.  v8:= v7.`n.c.a.v.c$n.b` @type ^`java.lang.String` @kind object;
  #L41fc48.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L41fc4e.  v8:= temp;
  #L41fc50.  v10:= v10 + v8 @kind int;
  #L41fc52.  return v10;
  #L41fc54.  v8:= new `java.lang.IndexOutOfBoundsException`;
  #L41fc58.  call `<init>`(v8) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L41fc5e.  throw v8;
}
procedure `boolean` `a`(`n.c.a.v.c$n` v0 @kind this, `n.c.a.v.f` v1 @kind object, `java.lang.StringBuilder` v2 @kind object) @signature `Ln/c/a/v/c$n;.a:(Ln/c/a/v/f;Ljava/lang/StringBuilder;)Z` @AccessFlag PUBLIC {
    temp;

  #L41fbf0.  v1:= v0.`n.c.a.v.c$n.b` @type ^`java.lang.String` @kind object;
  #L41fbf4.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41fbfa.  v1:= 1I;
  #L41fbfc.  return v1;
}
procedure `java.lang.String` `toString`(`n.c.a.v.c$n` v3 @kind this) @signature `Ln/c/a/v/c$n;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L41fc70.  v0:= v3.`n.c.a.v.c$n.b` @type ^`java.lang.String` @kind object;
  #L41fc74.  v1:= "'" @kind object;
  #L41fc78.  v2:= "''" @kind object;
  #L41fc7c.  call temp:= `replace`(v0, v1, v2) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L41fc82.  v0:= temp @kind object;
  #L41fc84.  v2:= new `java.lang.StringBuilder`;
  #L41fc88.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41fc8e.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41fc94.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41fc9a.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41fca0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41fca6.  v0:= temp @kind object;
  #L41fca8.  return v0 @kind object;
}
