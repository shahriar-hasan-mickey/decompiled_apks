record `n.c.a.v.c$j` @kind class @AccessFlag  extends `n.c.a.v.c$g` @kind interface {
  `n.c.a.x.i` `n.c.a.v.c$j.b` @AccessFlag FINAL;
  `int` `n.c.a.v.c$j.c` @AccessFlag FINAL;
  `int` `n.c.a.v.c$j.d` @AccessFlag FINAL;
  `n.c.a.v.j` `n.c.a.v.c$j.e` @AccessFlag FINAL;
  `int` `n.c.a.v.c$j.f` @AccessFlag FINAL;
}
global `int`[] `@@n.c.a.v.c$j.g` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln/c/a/v/c$j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L41f2a0.  v0:= 10I;
  #L41f2a4.  v0:= new `int`[v0];
  #L41f2a8.  goto L41f2b4;
  #L41f2ae.  `@@n.c.a.v.c$j.g` @type ^`int`[] := v0 @kind object;
  #L41f2b2.  return @kind void;
  #L41f2b4.  v0:= (0I, 10I, 100I, 1000I, 10000I, 100000I, 1000000I, 10000000I, 100000000I, 1000000000I) @kind object;
  #L41f2e3.  goto L41f2ae;
}
procedure `void` `<init>`(`n.c.a.v.c$j` v0 @kind this, `n.c.a.x.i` v1 @kind object, `int` v2 , `int` v3 , `n.c.a.v.j` v4 @kind object) @signature `Ln/c/a/v/c$j;.<init>:(Ln/c/a/x/i;IILn/c/a/v/j;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41f2f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41f2fa.  v0.`n.c.a.v.c$j.b` @type ^`n.c.a.x.i` := v1 @kind object;
  #L41f2fe.  v0.`n.c.a.v.c$j.c` @type ^`int` := v2;
  #L41f302.  v0.`n.c.a.v.c$j.d` @type ^`int` := v3;
  #L41f306.  v0.`n.c.a.v.c$j.e` @type ^`n.c.a.v.j` := v4 @kind object;
  #L41f30a.  v1:= 0I;
  #L41f30c.  v0.`n.c.a.v.c$j.f` @type ^`int` := v1;
  #L41f310.  return @kind void;
}
procedure `void` `<init>`(`n.c.a.v.c$j` v0 @kind this, `n.c.a.x.i` v1 @kind object, `int` v2 , `int` v3 , `n.c.a.v.j` v4 @kind object, `int` v5 ) @signature `Ln/c/a/v/c$j;.<init>:(Ln/c/a/x/i;IILn/c/a/v/j;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L41f324.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41f32a.  v0.`n.c.a.v.c$j.b` @type ^`n.c.a.x.i` := v1 @kind object;
  #L41f32e.  v0.`n.c.a.v.c$j.c` @type ^`int` := v2;
  #L41f332.  v0.`n.c.a.v.c$j.d` @type ^`int` := v3;
  #L41f336.  v0.`n.c.a.v.c$j.e` @type ^`n.c.a.v.j` := v4 @kind object;
  #L41f33a.  v0.`n.c.a.v.c$j.f` @type ^`int` := v5;
  #L41f33e.  return @kind void;
}
procedure `int` `a`(`n.c.a.v.c$j` v6 @kind this, `n.c.a.v.d` v7 @kind object, `long` v8 , `int` v10 , `int` v11 ) @signature `Ln/c/a/v/c$j;.a:(Ln/c/a/v/d;JII)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41f0fc.  v1:= v6.`n.c.a.v.c$j.b` @type ^`n.c.a.x.i` @kind object;
  #L41f100.  v0:= v7 @kind object;
  #L41f102.  v2:= v8 @kind wide;
  #L41f104.  v4:= v10;
  #L41f106.  v5:= v11;
  #L41f108.  call temp:= `a`(v0, v1, v2, v4, v5) @signature `Ln/c/a/v/d;.a:(Ln/c/a/x/i;JII)I` @kind virtual;
  #L41f10e.  v7:= temp;
  #L41f110.  return v7;
}
procedure `int` `a`(`n.c.a.v.c$j` v19 @kind this, `n.c.a.v.d` v20 @kind object, `java.lang.CharSequence` v21 @kind object, `int` v22 ) @signature `Ln/c/a/v/c$j;.a:(Ln/c/a/v/d;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L41ede0.  v6:= v19 @kind object;
  #L41ede4.  v0:= v22;
  #L41ede8.  call temp:= `length`(v21) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L41edee.  v1:= temp;
  #L41edf0.  if v0 != v1 then goto L41edf8;
  #L41edf4.  v0:= ~v0 @kind int;
  #L41edf6.  return v0;
  #L41edf8.  call temp:= `charAt`(v21, v22) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L41edfe.  v2:= temp;
  #L41ee00.  call temp:= `d`(v20) @signature `Ln/c/a/v/d;.d:()Ln/c/a/v/h;` @kind virtual;
  #L41ee06.  v3:= temp @kind object;
  #L41ee08.  call temp:= `c`(v3) @signature `Ln/c/a/v/h;.c:()C` @kind virtual;
  #L41ee0e.  v3:= temp;
  #L41ee10.  v4:= 0I;
  #L41ee12.  v5:= 1I;
  #L41ee14.  if v2 != v3 then goto L41ee52;
  #L41ee18.  v2:= v6.`n.c.a.v.c$j.e` @type ^`n.c.a.v.j` @kind object;
  #L41ee1c.  call temp:= `f`(v20) @signature `Ln/c/a/v/d;.f:()Z` @kind virtual;
  #L41ee22.  v3:= temp;
  #L41ee24.  v7:= v6.`n.c.a.v.c$j.c` @type ^`int`;
  #L41ee28.  v8:= v6.`n.c.a.v.c$j.d` @type ^`int`;
  #L41ee2c.  if v7 != v8 then goto L41ee34;
  #L41ee30.  v7:= 1I;
  #L41ee32.  goto L41ee36;
  #L41ee34.  v7:= 0I;
  #L41ee36.  call temp:= `a`(v2, v5, v3, v7) @signature `Ln/c/a/v/j;.a:(ZZZ)Z` @kind virtual;
  #L41ee3c.  v2:= temp;
  #L41ee3e.  if v2 != 0 then goto L41ee46;
  #L41ee42.  v0:= ~v0 @kind int;
  #L41ee44.  return v0;
  #L41ee46.  v0:= v0 + 1;
  #L41ee4a.  v7:= v0;
  #L41ee4c.  v0:= 0I;
  #L41ee4e.  v2:= 1I;
  #L41ee50.  goto L41eec0;
  #L41ee52.  call temp:= `d`(v20) @signature `Ln/c/a/v/d;.d:()Ln/c/a/v/h;` @kind virtual;
  #L41ee58.  v3:= temp @kind object;
  #L41ee5a.  call temp:= `b`(v3) @signature `Ln/c/a/v/h;.b:()C` @kind virtual;
  #L41ee60.  v3:= temp;
  #L41ee62.  if v2 != v3 then goto L41ee9e;
  #L41ee66.  v2:= v6.`n.c.a.v.c$j.e` @type ^`n.c.a.v.j` @kind object;
  #L41ee6a.  call temp:= `f`(v20) @signature `Ln/c/a/v/d;.f:()Z` @kind virtual;
  #L41ee70.  v3:= temp;
  #L41ee72.  v7:= v6.`n.c.a.v.c$j.c` @type ^`int`;
  #L41ee76.  v8:= v6.`n.c.a.v.c$j.d` @type ^`int`;
  #L41ee7a.  if v7 != v8 then goto L41ee82;
  #L41ee7e.  v7:= 1I;
  #L41ee80.  goto L41ee84;
  #L41ee82.  v7:= 0I;
  #L41ee84.  call temp:= `a`(v2, v4, v3, v7) @signature `Ln/c/a/v/j;.a:(ZZZ)Z` @kind virtual;
  #L41ee8a.  v2:= temp;
  #L41ee8c.  if v2 != 0 then goto L41ee94;
  #L41ee90.  v0:= ~v0 @kind int;
  #L41ee92.  return v0;
  #L41ee94.  v0:= v0 + 1;
  #L41ee98.  v7:= v0;
  #L41ee9a.  v0:= 1I;
  #L41ee9c.  goto L41eebe;
  #L41ee9e.  v2:= v6.`n.c.a.v.c$j.e` @type ^`n.c.a.v.j` @kind object;
  #L41eea2.  v3:= `@@n.c.a.v.j.c` @type ^`n.c.a.v.j` @kind object;
  #L41eea6.  if v2 != v3 then goto L41eeba;
  #L41eeaa.  call temp:= `f`(v20) @signature `Ln/c/a/v/d;.f:()Z` @kind virtual;
  #L41eeb0.  v2:= temp;
  #L41eeb2.  if v2 == 0 then goto L41eeba;
  #L41eeb6.  v0:= ~v0 @kind int;
  #L41eeb8.  return v0;
  #L41eeba.  v7:= v0;
  #L41eebc.  v0:= 0I;
  #L41eebe.  v2:= 0I;
  #L41eec0.  call temp:= `f`(v20) @signature `Ln/c/a/v/d;.f:()Z` @kind virtual;
  #L41eec6.  v3:= temp;
  #L41eec8.  if v3 != 0 then goto L41eede;
  #L41eecc.  call temp:= `a`(v19, v20) @signature `Ln/c/a/v/c$j;.a:(Ln/c/a/v/d;)Z` @kind virtual;
  #L41eed2.  v3:= temp;
  #L41eed4.  if v3 == 0 then goto L41eeda;
  #L41eed8.  goto L41eede;
  #L41eeda.  v3:= 1I;
  #L41eedc.  goto L41eee2;
  #L41eede.  v3:= v6.`n.c.a.v.c$j.c` @type ^`int`;
  #L41eee2.  v8:= v7 + v3 @kind int;
  #L41eee6.  if v8 <= v1 then goto L41eeee;
  #L41eeea.  v0:= ~v7 @kind int;
  #L41eeec.  return v0;
  #L41eeee.  call temp:= `f`(v20) @signature `Ln/c/a/v/d;.f:()Z` @kind virtual;
  #L41eef4.  v9:= temp;
  #L41eef6.  if v9 != 0 then goto L41ef0e;
  #L41eefa.  call temp:= `a`(v19, v20) @signature `Ln/c/a/v/c$j;.a:(Ln/c/a/v/d;)Z` @kind virtual;
  #L41ef00.  v9:= temp;
  #L41ef02.  if v9 == 0 then goto L41ef08;
  #L41ef06.  goto L41ef0e;
  #L41ef08.  v9:= 9I;
  #L41ef0c.  goto L41ef12;
  #L41ef0e.  v9:= v6.`n.c.a.v.c$j.d` @type ^`int`;
  #L41ef12.  v10:= v6.`n.c.a.v.c$j.f` @type ^`int`;
  #L41ef16.  call temp:= `max`(v10, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L41ef1c.  v10:= temp;
  #L41ef1e.  v9:= v9 + v10 @kind int;
  #L41ef20.  v10:= 0I;
  #L41ef22.  v11:= 2I;
  #L41ef24.  if v4 >= v11 then goto L41effa;
  #L41ef28.  v9:= v9 + v7 @kind int;
  #L41ef2a.  call temp:= `min`(v9, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L41ef30.  v9:= temp;
  #L41ef32.  v11:= v10 @kind object;
  #L41ef34.  v14:= 0L;
  #L41ef38.  v10:= v7;
  #L41ef3a.  if v10 >= v9 then goto L41efcc;
  #L41ef3e.  v16:= v10 + 1;
  #L41ef42.  v12:= v21 @kind object;
  #L41ef46.  call temp:= `charAt`(v12, v10) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L41ef4c.  v10:= temp;
  #L41ef4e.  call temp:= `d`(v20) @signature `Ln/c/a/v/d;.d:()Ln/c/a/v/h;` @kind virtual;
  #L41ef54.  v13:= temp @kind object;
  #L41ef56.  call temp:= `a`(v13, v10) @signature `Ln/c/a/v/h;.a:(C)I` @kind virtual;
  #L41ef5c.  v10:= temp;
  #L41ef5e.  if v10 >= 0 then goto L41ef6e;
  #L41ef62.  v10:= v16 + -1;
  #L41ef66.  if v10 >= v8 then goto L41efd0;
  #L41ef6a.  v0:= ~v7 @kind int;
  #L41ef6c.  return v0;
  #L41ef6e.  v13:= v16 - v7 @kind int;
  #L41ef72.  v5:= 18I;
  #L41ef76.  if v13 <= v5 then goto L41efac;
  #L41ef7a.  if v11 != 0 then goto L41ef86;
  #L41ef7e.  call temp:= `valueOf`(v14) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L41ef84.  v11:= temp @kind object;
  #L41ef86.  v5:= `@@java.math.BigInteger.TEN` @type ^`java.math.BigInteger` @kind object;
  #L41ef8a.  call temp:= `multiply`(v11, v5) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L41ef90.  v5:= temp @kind object;
  #L41ef92.  v10:= (`long`) v10 @kind i2l;
  #L41ef94.  call temp:= `valueOf`(v10) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L41ef9a.  v10:= temp @kind object;
  #L41ef9c.  call temp:= `add`(v5, v10) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L41efa2.  v11:= temp @kind object;
  #L41efa4.  v5:= v8;
  #L41efa6.  v22:= v9;
  #L41efaa.  goto L41efbe;
  #L41efac.  v17:= 10L;
  #L41efb0.  v14:= v14 * v17 @kind long;
  #L41efb4.  v5:= v8;
  #L41efb6.  v22:= v9;
  #L41efba.  v8:= (`long`) v10 @kind i2l;
  #L41efbc.  v14:= v14 + v8 @kind long;
  #L41efbe.  v9:= v22;
  #L41efc2.  v8:= v5;
  #L41efc4.  v10:= v16;
  #L41efc8.  v5:= 1I;
  #L41efca.  goto L41ef3a;
  #L41efcc.  v12:= v21 @kind object;
  #L41efd0.  v5:= v8;
  #L41efd2.  v8:= v6.`n.c.a.v.c$j.f` @type ^`int`;
  #L41efd6.  if v8 <= 0 then goto L41eff4;
  #L41efda.  if v4 != 0 then goto L41eff4;
  #L41efde.  v10:= v10 - v7 @kind int;
  #L41efe0.  v10:= v10 - v8 @kind int;
  #L41efe2.  call temp:= `max`(v3, v10) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L41efe8.  v9:= temp;
  #L41efea.  v4:= v4 + 1;
  #L41efee.  v8:= v5;
  #L41eff0.  v5:= 1I;
  #L41eff2.  goto L41ef20;
  #L41eff4.  v5:= v10;
  #L41eff6.  v10:= v11 @kind object;
  #L41eff8.  goto L41f000;
  #L41effa.  v5:= v7;
  #L41effc.  v14:= 0L;
  #L41f000.  if v0 == 0 then goto L41f05c;
  #L41f004.  if v10 == 0 then goto L41f036;
  #L41f008.  v0:= `@@java.math.BigInteger.ZERO` @type ^`java.math.BigInteger` @kind object;
  #L41f00c.  call temp:= `equals`(v10, v0) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L41f012.  v0:= temp;
  #L41f014.  if v0 == 0 then goto L41f02c;
  #L41f018.  call temp:= `f`(v20) @signature `Ln/c/a/v/d;.f:()Z` @kind virtual;
  #L41f01e.  v0:= temp;
  #L41f020.  if v0 == 0 then goto L41f02c;
  #L41f024.  v0:= 1I;
  #L41f026.  v7:= v7 - v0 @kind int;
  #L41f028.  v0:= ~v7 @kind int;
  #L41f02a.  return v0;
  #L41f02c.  call temp:= `negate`(v10) @signature `Ljava/math/BigInteger;.negate:()Ljava/math/BigInteger;` @kind virtual;
  #L41f032.  v10:= temp @kind object;
  #L41f034.  goto L41f094;
  #L41f036.  v0:= 1I;
  #L41f038.  v1:= 0L;
  #L41f03c.  v3:= lcmp(v14, v1);
  #L41f040.  if v3 != 0 then goto L41f056;
  #L41f044.  call temp:= `f`(v20) @signature `Ln/c/a/v/d;.f:()Z` @kind virtual;
  #L41f04a.  v1:= temp;
  #L41f04c.  if v1 == 0 then goto L41f056;
  #L41f050.  v7:= v7 - v0 @kind int;
  #L41f052.  v0:= ~v7 @kind int;
  #L41f054.  return v0;
  #L41f056.  v0:= -v14 @kind long;
  #L41f058.  v2:= v0 @kind wide;
  #L41f05a.  goto L41f096;
  #L41f05c.  v0:= v6.`n.c.a.v.c$j.e` @type ^`n.c.a.v.j` @kind object;
  #L41f060.  v1:= `@@n.c.a.v.j.f` @type ^`n.c.a.v.j` @kind object;
  #L41f064.  if v0 != v1 then goto L41f094;
  #L41f068.  call temp:= `f`(v20) @signature `Ln/c/a/v/d;.f:()Z` @kind virtual;
  #L41f06e.  v0:= temp;
  #L41f070.  if v0 == 0 then goto L41f094;
  #L41f074.  v0:= v5 - v7 @kind int;
  #L41f078.  v1:= v6.`n.c.a.v.c$j.c` @type ^`int`;
  #L41f07c.  if v2 == 0 then goto L41f08c;
  #L41f080.  if v0 > v1 then goto L41f094;
  #L41f084.  v0:= 1I;
  #L41f086.  v7:= v7 - v0 @kind int;
  #L41f088.  v0:= ~v7 @kind int;
  #L41f08a.  return v0;
  #L41f08c.  if v0 <= v1 then goto L41f094;
  #L41f090.  v0:= ~v7 @kind int;
  #L41f092.  return v0;
  #L41f094.  v2:= v14 @kind wide;
  #L41f096.  if v10 == 0 then goto L41f0d6;
  #L41f09a.  call temp:= `bitLength`(v10) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L41f0a0.  v0:= temp;
  #L41f0a2.  v1:= 63I;
  #L41f0a6.  if v0 <= v1 then goto L41f0ba;
  #L41f0aa.  v0:= `@@java.math.BigInteger.TEN` @type ^`java.math.BigInteger` @kind object;
  #L41f0ae.  call temp:= `divide`(v10, v0) @signature `Ljava/math/BigInteger;.divide:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L41f0b4.  v10:= temp @kind object;
  #L41f0b6.  v5:= v5 + -1;
  #L41f0ba.  call temp:= `longValue`(v10) @signature `Ljava/math/BigInteger;.longValue:()J` @kind virtual;
  #L41f0c0.  v2:= temp @kind wide;
  #L41f0c2.  v0:= v19 @kind object;
  #L41f0c6.  v1:= v20 @kind object;
  #L41f0ca.  v4:= v7;
  #L41f0cc.  call temp:= `a`(v0, v1, v2, v4, v5) @signature `Ln/c/a/v/c$j;.a:(Ln/c/a/v/d;JII)I` @kind virtual;
  #L41f0d2.  v0:= temp;
  #L41f0d4.  return v0;
  #L41f0d6.  v0:= v19 @kind object;
  #L41f0da.  v1:= v20 @kind object;
  #L41f0de.  v4:= v7;
  #L41f0e0.  call temp:= `a`(v0, v1, v2, v4, v5) @signature `Ln/c/a/v/c$j;.a:(Ln/c/a/v/d;JII)I` @kind virtual;
  #L41f0e6.  v0:= temp;
  #L41f0e8.  return v0;
}
procedure `long` `a`(`n.c.a.v.c$j` v0 @kind this, `n.c.a.v.f` v1 @kind object, `long` v2 ) @signature `Ln/c/a/v/c$j;.a:(Ln/c/a/v/f;J)J` @AccessFlag  {
    temp;

  #L41f218.  return v2 @kind wide;
}
procedure `n.c.a.v.c$j` `a`(`n.c.a.v.c$j` v8 @kind this) @signature `Ln/c/a/v/c$j;.a:()Ln/c/a/v/c$j;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L41f22c.  v0:= v8.`n.c.a.v.c$j.f` @type ^`int`;
  #L41f230.  v1:= -1I;
  #L41f232.  if v0 != v1 then goto L41f238;
  #L41f236.  return v8 @kind object;
  #L41f238.  v0:= new `n.c.a.v.c$j`;
  #L41f23c.  v3:= v8.`n.c.a.v.c$j.b` @type ^`n.c.a.x.i` @kind object;
  #L41f240.  v4:= v8.`n.c.a.v.c$j.c` @type ^`int`;
  #L41f244.  v5:= v8.`n.c.a.v.c$j.d` @type ^`int`;
  #L41f248.  v6:= v8.`n.c.a.v.c$j.e` @type ^`n.c.a.v.j` @kind object;
  #L41f24c.  v7:= -1I;
  #L41f24e.  v2:= v0 @kind object;
  #L41f250.  call `<init>`(v2, v3, v4, v5, v6, v7) @signature `Ln/c/a/v/c$j;.<init>:(Ln/c/a/x/i;IILn/c/a/v/j;I)V` @kind direct;
  #L41f256.  return v0 @kind object;
}
procedure `n.c.a.v.c$j` `a`(`n.c.a.v.c$j` v7 @kind this, `int` v8 ) @signature `Ln/c/a/v/c$j;.a:(I)Ln/c/a/v/c$j;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L41f268.  v6:= new `n.c.a.v.c$j`;
  #L41f26c.  v1:= v7.`n.c.a.v.c$j.b` @type ^`n.c.a.x.i` @kind object;
  #L41f270.  v2:= v7.`n.c.a.v.c$j.c` @type ^`int`;
  #L41f274.  v3:= v7.`n.c.a.v.c$j.d` @type ^`int`;
  #L41f278.  v4:= v7.`n.c.a.v.c$j.e` @type ^`n.c.a.v.j` @kind object;
  #L41f27c.  v0:= v7.`n.c.a.v.c$j.f` @type ^`int`;
  #L41f280.  v5:= v0 + v8 @kind int;
  #L41f284.  v0:= v6 @kind object;
  #L41f286.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Ln/c/a/v/c$j;.<init>:(Ln/c/a/x/i;IILn/c/a/v/j;I)V` @kind direct;
  #L41f28c.  return v6 @kind object;
}
procedure `boolean` `a`(`n.c.a.v.c$j` v1 @kind this, `n.c.a.v.d` v2 @kind object) @signature `Ln/c/a/v/c$j;.a:(Ln/c/a/v/d;)Z` @AccessFlag  {
    temp;
    v0;

  #L41ebe0.  v2:= v1.`n.c.a.v.c$j.f` @type ^`int`;
  #L41ebe4.  v0:= -1I;
  #L41ebe6.  if v2 == v0 then goto L41ec0c;
  #L41ebea.  if v2 <= 0 then goto L41ec08;
  #L41ebee.  v2:= v1.`n.c.a.v.c$j.c` @type ^`int`;
  #L41ebf2.  v0:= v1.`n.c.a.v.c$j.d` @type ^`int`;
  #L41ebf6.  if v2 != v0 then goto L41ec08;
  #L41ebfa.  v2:= v1.`n.c.a.v.c$j.e` @type ^`n.c.a.v.j` @kind object;
  #L41ebfe.  v0:= `@@n.c.a.v.j.e` @type ^`n.c.a.v.j` @kind object;
  #L41ec02.  if v2 != v0 then goto L41ec08;
  #L41ec06.  goto L41ec0c;
  #L41ec08.  v2:= 0I;
  #L41ec0a.  goto L41ec0e;
  #L41ec0c.  v2:= 1I;
  #L41ec0e.  return v2;
}
procedure `boolean` `a`(`n.c.a.v.c$j` v11 @kind this, `n.c.a.v.f` v12 @kind object, `java.lang.StringBuilder` v13 @kind object) @signature `Ln/c/a/v/c$j;.a:(Ln/c/a/v/f;Ljava/lang/StringBuilder;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L41ec20.  v0:= v11.`n.c.a.v.c$j.b` @type ^`n.c.a.x.i` @kind object;
  #L41ec24.  call temp:= `a`(v12, v0) @signature `Ln/c/a/v/f;.a:(Ln/c/a/x/i;)Ljava/lang/Long;` @kind virtual;
  #L41ec2a.  v0:= temp @kind object;
  #L41ec2c.  v1:= 0I;
  #L41ec2e.  if v0 != 0 then goto L41ec34;
  #L41ec32.  return v1;
  #L41ec34.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L41ec3a.  v2:= temp @kind wide;
  #L41ec3c.  call temp:= `a`(v11, v12, v2) @signature `Ln/c/a/v/c$j;.a:(Ln/c/a/v/f;J)J` @kind virtual;
  #L41ec42.  call temp:= `c`(v12) @signature `Ln/c/a/v/f;.c:()Ln/c/a/v/h;` @kind virtual;
  #L41ec48.  v12:= temp @kind object;
  #L41ec4a.  v4:= -9223372036854775808L;
  #L41ec4e.  v0:= lcmp(v2, v4);
  #L41ec52.  if v0 != 0 then goto L41ec5c;
  #L41ec56.  v0:= "9223372036854775808" @kind object;
  #L41ec5a.  goto L41ec6c;
  #L41ec5c.  call temp:= `abs`(v2) @signature `Ljava/lang/Math;.abs:(J)J` @kind static;
  #L41ec62.  v4:= temp @kind wide;
  #L41ec64.  call temp:= `toString`(v4) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L41ec6a.  v0:= temp @kind object;
  #L41ec6c.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L41ec72.  v4:= temp;
  #L41ec74.  v5:= v11.`n.c.a.v.c$j.d` @type ^`int`;
  #L41ec78.  v6:= " cannot be printed as the value " @kind object;
  #L41ec7c.  v7:= "Field " @kind object;
  #L41ec80.  if v4 > v5 then goto L41ed80;
  #L41ec84.  call temp:= `a`(v12, v0) @signature `Ln/c/a/v/h;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L41ec8a.  v0:= temp @kind object;
  #L41ec8c.  v4:= 0L;
  #L41ec90.  v8:= 2I;
  #L41ec92.  v9:= 1I;
  #L41ec94.  v10:= lcmp(v2, v4);
  #L41ec98.  v4:= `@@n.c.a.v.c$d.a` @type ^`int`[] @kind object;
  #L41ec9c.  v5:= v11.`n.c.a.v.c$j.e` @type ^`n.c.a.v.j` @kind object;
  #L41eca0.  call temp:= `ordinal`(v5) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L41eca6.  v5:= temp;
  #L41eca8.  if v10 < 0 then goto L41ecea;
  #L41ecac.  v4:= v4[v5];
  #L41ecb0.  if v4 == v9 then goto L41ecca;
  #L41ecb4.  if v4 == v8 then goto L41ecba;
  #L41ecb8.  goto L41ed52;
  #L41ecba.  call temp:= `c`(v12) @signature `Ln/c/a/v/h;.c:()C` @kind virtual;
  #L41ecc0.  v2:= temp;
  #L41ecc2.  call temp:= `append`(v13, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L41ecc8.  goto L41ed52;
  #L41ecca.  v4:= v11.`n.c.a.v.c$j.c` @type ^`int`;
  #L41ecce.  v5:= 19I;
  #L41ecd2.  if v4 >= v5 then goto L41ed52;
  #L41ecd6.  v5:= `@@n.c.a.v.c$j.g` @type ^`int`[] @kind object;
  #L41ecda.  v4:= v5[v4];
  #L41ecde.  v4:= (`long`) v4 @kind i2l;
  #L41ece0.  v6:= lcmp(v2, v4);
  #L41ece4.  if v6 < 0 then goto L41ed52;
  #L41ece8.  goto L41ecba;
  #L41ecea.  v4:= v4[v5];
  #L41ecee.  if v4 == v9 then goto L41ed48;
  #L41ecf2.  if v4 == v8 then goto L41ed48;
  #L41ecf6.  v5:= 3I;
  #L41ecf8.  if v4 == v5 then goto L41ed48;
  #L41ecfc.  v5:= 4I;
  #L41ecfe.  if v4 == v5 then goto L41ed04;
  #L41ed02.  goto L41ed52;
  #L41ed04.  v12:= new `n.c.a.b`;
  #L41ed08.  v13:= new `java.lang.StringBuilder`;
  #L41ed0c.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41ed12.  call temp:= `append`(v13, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41ed18.  v0:= v11.`n.c.a.v.c$j.b` @type ^`n.c.a.x.i` @kind object;
  #L41ed1c.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41ed22.  call temp:= `append`(v13, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41ed28.  call temp:= `append`(v13, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L41ed2e.  v0:= " cannot be negative according to the SignStyle" @kind object;
  #L41ed32.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41ed38.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41ed3e.  v13:= temp @kind object;
  #L41ed40.  call `<init>`(v12, v13) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41ed46.  throw v12;
  #L41ed48.  call temp:= `b`(v12) @signature `Ln/c/a/v/h;.b:()C` @kind virtual;
  #L41ed4e.  v2:= temp;
  #L41ed50.  goto L41ecc2;
  #L41ed52.  v2:= v11.`n.c.a.v.c$j.c` @type ^`int`;
  #L41ed56.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L41ed5c.  v3:= temp;
  #L41ed5e.  v2:= v2 - v3 @kind int;
  #L41ed60.  if v1 >= v2 then goto L41ed78;
  #L41ed64.  call temp:= `d`(v12) @signature `Ln/c/a/v/h;.d:()C` @kind virtual;
  #L41ed6a.  v2:= temp;
  #L41ed6c.  call temp:= `append`(v13, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L41ed72.  v1:= v1 + 1;
  #L41ed76.  goto L41ed52;
  #L41ed78.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41ed7e.  return v9;
  #L41ed80.  v12:= new `n.c.a.b`;
  #L41ed84.  v13:= new `java.lang.StringBuilder`;
  #L41ed88.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41ed8e.  call temp:= `append`(v13, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41ed94.  v0:= v11.`n.c.a.v.c$j.b` @type ^`n.c.a.x.i` @kind object;
  #L41ed98.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41ed9e.  call temp:= `append`(v13, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41eda4.  call temp:= `append`(v13, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L41edaa.  v0:= " exceeds the maximum print width of " @kind object;
  #L41edae.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41edb4.  v0:= v11.`n.c.a.v.c$j.d` @type ^`int`;
  #L41edb8.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L41edbe.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41edc4.  v13:= temp @kind object;
  #L41edc6.  call `<init>`(v12, v13) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41edcc.  throw v12;
}
procedure `java.lang.String` `toString`(`n.c.a.v.c$j` v5 @kind this) @signature `Ln/c/a/v/c$j;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41f124.  v0:= v5.`n.c.a.v.c$j.c` @type ^`int`;
  #L41f128.  v1:= ")" @kind object;
  #L41f12c.  v2:= "Value(" @kind object;
  #L41f130.  v3:= 1I;
  #L41f132.  if v0 != v3 then goto L41f178;
  #L41f136.  v0:= v5.`n.c.a.v.c$j.d` @type ^`int`;
  #L41f13a.  v3:= 19I;
  #L41f13e.  if v0 != v3 then goto L41f178;
  #L41f142.  v0:= v5.`n.c.a.v.c$j.e` @type ^`n.c.a.v.j` @kind object;
  #L41f146.  v3:= `@@n.c.a.v.j.b` @type ^`n.c.a.v.j` @kind object;
  #L41f14a.  if v0 != v3 then goto L41f178;
  #L41f14e.  v0:= new `java.lang.StringBuilder`;
  #L41f152.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41f158.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f15e.  v2:= v5.`n.c.a.v.c$j.b` @type ^`n.c.a.x.i` @kind object;
  #L41f162.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f168.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f16e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41f174.  v0:= temp @kind object;
  #L41f176.  return v0 @kind object;
  #L41f178.  v0:= v5.`n.c.a.v.c$j.c` @type ^`int`;
  #L41f17c.  v3:= v5.`n.c.a.v.c$j.d` @type ^`int`;
  #L41f180.  v4:= "," @kind object;
  #L41f184.  if v0 != v3 then goto L41f1c0;
  #L41f188.  v0:= v5.`n.c.a.v.c$j.e` @type ^`n.c.a.v.j` @kind object;
  #L41f18c.  v3:= `@@n.c.a.v.j.e` @type ^`n.c.a.v.j` @kind object;
  #L41f190.  if v0 != v3 then goto L41f1c0;
  #L41f194.  v0:= new `java.lang.StringBuilder`;
  #L41f198.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41f19e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f1a4.  v2:= v5.`n.c.a.v.c$j.b` @type ^`n.c.a.x.i` @kind object;
  #L41f1a8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f1ae.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f1b4.  v2:= v5.`n.c.a.v.c$j.c` @type ^`int`;
  #L41f1b8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f1be.  goto L41f168;
  #L41f1c0.  v0:= new `java.lang.StringBuilder`;
  #L41f1c4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41f1ca.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f1d0.  v2:= v5.`n.c.a.v.c$j.b` @type ^`n.c.a.x.i` @kind object;
  #L41f1d4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f1da.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f1e0.  v2:= v5.`n.c.a.v.c$j.c` @type ^`int`;
  #L41f1e4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f1ea.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f1f0.  v2:= v5.`n.c.a.v.c$j.d` @type ^`int`;
  #L41f1f4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f1fa.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41f200.  v2:= v5.`n.c.a.v.c$j.e` @type ^`n.c.a.v.j` @kind object;
  #L41f204.  goto L41f162;
}
