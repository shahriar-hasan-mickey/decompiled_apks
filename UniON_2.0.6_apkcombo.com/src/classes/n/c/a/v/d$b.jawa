record `n.c.a.v.d$b` @kind class @AccessFlag FINAL extends `n.c.a.w.c` @kind class {
  `n.c.a.u.h` `n.c.a.v.d$b.b` @AccessFlag ;
  `n.c.a.q` `n.c.a.v.d$b.c` @AccessFlag ;
  `java.util.Map` `n.c.a.v.d$b.d` @AccessFlag FINAL;
  `boolean` `n.c.a.v.d$b.e` @AccessFlag ;
  `n.c.a.m` `n.c.a.v.d$b.f` @AccessFlag ;
  `n.c.a.v.d` `n.c.a.v.d$b.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`n.c.a.v.d$b` v0 @kind this, `n.c.a.v.d` v1 @kind object) @signature `Ln/c/a/v/d$b;.<init>:(Ln/c/a/v/d;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L421be0.  v0.`n.c.a.v.d$b.g` @type ^`n.c.a.v.d` := v1 @kind object;
  #L421be4.  call `<init>`(v0) @signature `Ln/c/a/w/c;.<init>:()V` @kind direct;
  #L421bea.  v1:= 0I;
  #L421bec.  v0.`n.c.a.v.d$b.b` @type ^`n.c.a.u.h` := v1 @kind object;
  #L421bf0.  v0.`n.c.a.v.d$b.c` @type ^`n.c.a.q` := v1 @kind object;
  #L421bf4.  v1:= new `java.util.HashMap`;
  #L421bf8.  call `<init>`(v1) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L421bfe.  v0.`n.c.a.v.d$b.d` @type ^`java.util.Map` := v1 @kind object;
  #L421c02.  v1:= `@@n.c.a.m.e` @type ^`n.c.a.m` @kind object;
  #L421c06.  v0.`n.c.a.v.d$b.f` @type ^`n.c.a.m` := v1 @kind object;
  #L421c0a.  return @kind void;
}
procedure `void` `<init>`(`n.c.a.v.d$b` v0 @kind this, `n.c.a.v.d` v1 @kind object, `n.c.a.v.d$a` v2 @kind object) @signature `Ln/c/a/v/d$b;.<init>:(Ln/c/a/v/d;Ln/c/a/v/d$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L421c1c.  call `<init>`(v0, v1) @signature `Ln/c/a/v/d$b;.<init>:(Ln/c/a/v/d;)V` @kind direct;
  #L421c22.  return @kind void;
}
procedure `java.lang.Object` `a`(`n.c.a.v.d$b` v1 @kind this, `n.c.a.x.k` v2 @kind object) @signature `Ln/c/a/v/d$b;.a:(Ln/c/a/x/k;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421a24.  call temp:= `a`() @signature `Ln/c/a/x/j;.a:()Ln/c/a/x/k;` @kind static;
  #L421a2a.  v0:= temp @kind object;
  #L421a2c.  if v2 != v0 then goto L421a36;
  #L421a30.  v2:= v1.`n.c.a.v.d$b.b` @type ^`n.c.a.u.h` @kind object;
  #L421a34.  return v2 @kind object;
  #L421a36.  call temp:= `g`() @signature `Ln/c/a/x/j;.g:()Ln/c/a/x/k;` @kind static;
  #L421a3c.  v0:= temp @kind object;
  #L421a3e.  if v2 == v0 then goto L421a5a;
  #L421a42.  call temp:= `f`() @signature `Ln/c/a/x/j;.f:()Ln/c/a/x/k;` @kind static;
  #L421a48.  v0:= temp @kind object;
  #L421a4a.  if v2 != v0 then goto L421a50;
  #L421a4e.  goto L421a5a;
  #L421a50.  call temp:= `a`(v1, v2) @signature `Ln/c/a/w/c;.a:(Ln/c/a/x/k;)Ljava/lang/Object;` @kind super;
  #L421a56.  v2:= temp @kind object;
  #L421a58.  return v2 @kind object;
  #L421a5a.  v2:= v1.`n.c.a.v.d$b.c` @type ^`n.c.a.q` @kind object;
  #L421a5e.  return v2 @kind object;
}
procedure `boolean` `b`(`n.c.a.v.d$b` v1 @kind this, `n.c.a.x.i` v2 @kind object) @signature `Ln/c/a/v/d$b;.b:(Ln/c/a/x/i;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L421994.  v0:= v1.`n.c.a.v.d$b.d` @type ^`java.util.Map` @kind object;
  #L421998.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L42199e.  v2:= temp;
  #L4219a0.  return v2;
}
procedure `int` `c`(`n.c.a.v.d$b` v3 @kind this, `n.c.a.x.i` v4 @kind object) @signature `Ln/c/a/v/d$b;.c:(Ln/c/a/x/i;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4219b4.  v0:= v3.`n.c.a.v.d$b.d` @type ^`java.util.Map` @kind object;
  #L4219b8.  call temp:= `containsKey`(v0, v4) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L4219be.  v0:= temp;
  #L4219c0.  if v0 == 0 then goto L4219e6;
  #L4219c4.  v0:= v3.`n.c.a.v.d$b.d` @type ^`java.util.Map` @kind object;
  #L4219c8.  call temp:= `get`(v0, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4219ce.  v4:= temp @kind object;
  #L4219d0.  v4:= (`java.lang.Long`) v4 @kind object;
  #L4219d4.  call temp:= `longValue`(v4) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4219da.  v0:= temp @kind wide;
  #L4219dc.  call temp:= `a`(v0) @signature `Ln/c/a/w/d;.a:(J)I` @kind static;
  #L4219e2.  v4:= temp;
  #L4219e4.  return v4;
  #L4219e6.  v0:= new `n.c.a.x.m`;
  #L4219ea.  v1:= new `java.lang.StringBuilder`;
  #L4219ee.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4219f4.  v2:= "Unsupported field: " @kind object;
  #L4219f8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4219fe.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L421a04.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L421a0a.  v4:= temp @kind object;
  #L421a0c.  call `<init>`(v0, v4) @signature `Ln/c/a/x/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L421a12.  throw v0;
}
procedure `long` `d`(`n.c.a.v.d$b` v3 @kind this, `n.c.a.x.i` v4 @kind object) @signature `Ln/c/a/v/d$b;.d:(Ln/c/a/x/i;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L421acc.  v0:= v3.`n.c.a.v.d$b.d` @type ^`java.util.Map` @kind object;
  #L421ad0.  call temp:= `containsKey`(v0, v4) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L421ad6.  v0:= temp;
  #L421ad8.  if v0 == 0 then goto L421af6;
  #L421adc.  v0:= v3.`n.c.a.v.d$b.d` @type ^`java.util.Map` @kind object;
  #L421ae0.  call temp:= `get`(v0, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L421ae6.  v4:= temp @kind object;
  #L421ae8.  v4:= (`java.lang.Long`) v4 @kind object;
  #L421aec.  call temp:= `longValue`(v4) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L421af2.  v0:= temp @kind wide;
  #L421af4.  return v0 @kind wide;
  #L421af6.  v0:= new `n.c.a.x.m`;
  #L421afa.  v1:= new `java.lang.StringBuilder`;
  #L421afe.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L421b04.  v2:= "Unsupported field: " @kind object;
  #L421b08.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L421b0e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L421b14.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L421b1a.  v4:= temp @kind object;
  #L421b1c.  call `<init>`(v0, v4) @signature `Ln/c/a/x/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L421b22.  throw v0;
}
procedure `n.c.a.v.d$b` `e`(`n.c.a.v.d$b` v3 @kind this) @signature `Ln/c/a/v/d$b;.e:()Ln/c/a/v/d$b;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L421b98.  v0:= new `n.c.a.v.d$b`;
  #L421b9c.  v1:= v3.`n.c.a.v.d$b.g` @type ^`n.c.a.v.d` @kind object;
  #L421ba0.  call `<init>`(v0, v1) @signature `Ln/c/a/v/d$b;.<init>:(Ln/c/a/v/d;)V` @kind direct;
  #L421ba6.  v1:= v3.`n.c.a.v.d$b.b` @type ^`n.c.a.u.h` @kind object;
  #L421baa.  v0.`n.c.a.v.d$b.b` @type ^`n.c.a.u.h` := v1 @kind object;
  #L421bae.  v1:= v3.`n.c.a.v.d$b.c` @type ^`n.c.a.q` @kind object;
  #L421bb2.  v0.`n.c.a.v.d$b.c` @type ^`n.c.a.q` := v1 @kind object;
  #L421bb6.  v1:= v0.`n.c.a.v.d$b.d` @type ^`java.util.Map` @kind object;
  #L421bba.  v2:= v3.`n.c.a.v.d$b.d` @type ^`java.util.Map` @kind object;
  #L421bbe.  call `putAll`(v1, v2) @signature `Ljava/util/Map;.putAll:(Ljava/util/Map;)V` @kind interface;
  #L421bc4.  v1:= v3.`n.c.a.v.d$b.e` @type ^`boolean` @kind boolean;
  #L421bc8.  v0.`n.c.a.v.d$b.e` @type ^`boolean` := v1 @kind boolean;
  #L421bcc.  return v0 @kind object;
}
procedure `n.c.a.v.a` `h`(`n.c.a.v.d$b` v3 @kind this) @signature `Ln/c/a/v/d$b;.h:()Ln/c/a/v/a;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L421b34.  v0:= new `n.c.a.v.a`;
  #L421b38.  call `<init>`(v0) @signature `Ln/c/a/v/a;.<init>:()V` @kind direct;
  #L421b3e.  v1:= v0.`n.c.a.v.a.b` @type ^`java.util.Map` @kind object;
  #L421b42.  v2:= v3.`n.c.a.v.d$b.d` @type ^`java.util.Map` @kind object;
  #L421b46.  call `putAll`(v1, v2) @signature `Ljava/util/Map;.putAll:(Ljava/util/Map;)V` @kind interface;
  #L421b4c.  v1:= v3.`n.c.a.v.d$b.g` @type ^`n.c.a.v.d` @kind object;
  #L421b50.  call temp:= `b`(v1) @signature `Ln/c/a/v/d;.b:()Ln/c/a/u/h;` @kind virtual;
  #L421b56.  v1:= temp @kind object;
  #L421b58.  v0.`n.c.a.v.a.c` @type ^`n.c.a.u.h` := v1 @kind object;
  #L421b5c.  v1:= v3.`n.c.a.v.d$b.c` @type ^`n.c.a.q` @kind object;
  #L421b60.  if v1 == 0 then goto L421b66;
  #L421b64.  goto L421b72;
  #L421b66.  v1:= v3.`n.c.a.v.d$b.g` @type ^`n.c.a.v.d` @kind object;
  #L421b6a.  call temp:= `a`(v1) @signature `Ln/c/a/v/d;.a:(Ln/c/a/v/d;)Ln/c/a/q;` @kind static;
  #L421b70.  v1:= temp @kind object;
  #L421b72.  v0.`n.c.a.v.a.d` @type ^`n.c.a.q` := v1 @kind object;
  #L421b76.  v1:= v3.`n.c.a.v.d$b.e` @type ^`boolean` @kind boolean;
  #L421b7a.  v0.`n.c.a.v.a.g` @type ^`boolean` := v1 @kind boolean;
  #L421b7e.  v1:= v3.`n.c.a.v.d$b.f` @type ^`n.c.a.m` @kind object;
  #L421b82.  v0.`n.c.a.v.a.h` @type ^`n.c.a.m` := v1 @kind object;
  #L421b86.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`n.c.a.v.d$b` v3 @kind this) @signature `Ln/c/a/v/d$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L421a70.  v0:= new `java.lang.StringBuilder`;
  #L421a74.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L421a7a.  v1:= v3.`n.c.a.v.d$b.d` @type ^`java.util.Map` @kind object;
  #L421a7e.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L421a84.  v1:= temp @kind object;
  #L421a86.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L421a8c.  v1:= "," @kind object;
  #L421a90.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L421a96.  v2:= v3.`n.c.a.v.d$b.b` @type ^`n.c.a.u.h` @kind object;
  #L421a9a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L421aa0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L421aa6.  v1:= v3.`n.c.a.v.d$b.c` @type ^`n.c.a.q` @kind object;
  #L421aaa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L421ab0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L421ab6.  v0:= temp @kind object;
  #L421ab8.  return v0 @kind object;
}
