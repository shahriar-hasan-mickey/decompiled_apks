record `n.c.a.m` @kind class @AccessFlag PUBLIC_FINAL extends `n.c.a.u.e` @kind class, `java.io.Serializable` @kind interface {
  `int` `n.c.a.m.b` @AccessFlag PRIVATE_FINAL;
  `int` `n.c.a.m.c` @AccessFlag PRIVATE_FINAL;
  `int` `n.c.a.m.d` @AccessFlag PRIVATE_FINAL;
}
global `n.c.a.m` `@@n.c.a.m.e` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln/c/a/m;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L40f100.  v0:= new `n.c.a.m`;
  #L40f104.  v1:= 0I;
  #L40f106.  call `<init>`(v0, v1, v1, v1) @signature `Ln/c/a/m;.<init>:(III)V` @kind direct;
  #L40f10c.  `@@n.c.a.m.e` @type ^`n.c.a.m` := v0 @kind object;
  #L40f110.  v0:= "([-+]?)P(?:([-+]?[0-9]+)Y)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)W)?(?:([-+]?[0-9]+)D)?" @kind object;
  #L40f114.  v1:= 2I;
  #L40f116.  call temp:= `compile`(v0, v1) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;I)Ljava/util/regex/Pattern;` @kind static;
  #L40f11c.  return @kind void;
}
procedure `void` `<init>`(`n.c.a.m` v0 @kind this, `int` v1 , `int` v2 , `int` v3 ) @signature `Ln/c/a/m;.<init>:(III)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L40f130.  call `<init>`(v0) @signature `Ln/c/a/u/e;.<init>:()V` @kind direct;
  #L40f136.  v0.`n.c.a.m.b` @type ^`int` := v1;
  #L40f13a.  v0.`n.c.a.m.c` @type ^`int` := v2;
  #L40f13e.  v0.`n.c.a.m.d` @type ^`int` := v3;
  #L40f142.  return @kind void;
}
procedure `n.c.a.m` `a`(`int` v1 ) @signature `Ln/c/a/m;.a:(I)Ln/c/a/m;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L40f078.  v0:= 0I;
  #L40f07a.  call temp:= `a`(v0, v0, v1) @signature `Ln/c/a/m;.a:(III)Ln/c/a/m;` @kind static;
  #L40f080.  v1:= temp @kind object;
  #L40f082.  return v1 @kind object;
}
procedure `n.c.a.m` `a`(`int` v1 , `int` v2 , `int` v3 ) @signature `Ln/c/a/m;.a:(III)Ln/c/a/m;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L40f04c.  v0:= v1 ^| v2 @kind int;
  #L40f050.  v0:= v0 ^| v3 @kind int;
  #L40f052.  if v0 != 0 then goto L40f05c;
  #L40f056.  v1:= `@@n.c.a.m.e` @type ^`n.c.a.m` @kind object;
  #L40f05a.  return v1 @kind object;
  #L40f05c.  v0:= new `n.c.a.m`;
  #L40f060.  call `<init>`(v0, v1, v2, v3) @signature `Ln/c/a/m;.<init>:(III)V` @kind direct;
  #L40f066.  return v0 @kind object;
}
procedure `java.lang.Object` `readResolve`(`n.c.a.m` v2 @kind this) @signature `Ln/c/a/m;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L40ef74.  v0:= v2.`n.c.a.m.b` @type ^`int`;
  #L40ef78.  v1:= v2.`n.c.a.m.c` @type ^`int`;
  #L40ef7c.  v0:= v0 ^| v1 @kind int;
  #L40ef7e.  v1:= v2.`n.c.a.m.d` @type ^`int`;
  #L40ef82.  v0:= v0 ^| v1 @kind int;
  #L40ef84.  if v0 != 0 then goto L40ef8e;
  #L40ef88.  v0:= `@@n.c.a.m.e` @type ^`n.c.a.m` @kind object;
  #L40ef8c.  return v0 @kind object;
  #L40ef8e.  return v2 @kind object;
}
procedure `n.c.a.x.d` `a`(`n.c.a.m` v3 @kind this, `n.c.a.x.d` v4 @kind object) @signature `Ln/c/a/m;.a:(Ln/c/a/x/d;)Ln/c/a/x/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40f094.  v0:= "temporal" @kind object;
  #L40f098.  call temp:= `a`(v4, v0) @signature `Ln/c/a/w/d;.a:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40f09e.  v0:= v3.`n.c.a.m.b` @type ^`int`;
  #L40f0a2.  if v0 == 0 then goto L40f0c0;
  #L40f0a6.  v1:= v3.`n.c.a.m.c` @type ^`int`;
  #L40f0aa.  if v1 == 0 then goto L40f0b8;
  #L40f0ae.  call temp:= `b`(v3) @signature `Ln/c/a/m;.b:()J` @kind virtual;
  #L40f0b4.  v0:= temp @kind wide;
  #L40f0b6.  goto L40f0ca;
  #L40f0b8.  v0:= (`long`) v0 @kind i2l;
  #L40f0ba.  v2:= `@@n.c.a.x.b.m` @type ^`n.c.a.x.b` @kind object;
  #L40f0be.  goto L40f0ce;
  #L40f0c0.  v0:= v3.`n.c.a.m.c` @type ^`int`;
  #L40f0c4.  if v0 == 0 then goto L40f0d6;
  #L40f0c8.  v0:= (`long`) v0 @kind i2l;
  #L40f0ca.  v2:= `@@n.c.a.x.b.l` @type ^`n.c.a.x.b` @kind object;
  #L40f0ce.  call temp:= `b`(v4, v0, v2) @signature `Ln/c/a/x/d;.b:(JLn/c/a/x/l;)Ln/c/a/x/d;` @kind interface;
  #L40f0d4.  v4:= temp @kind object;
  #L40f0d6.  v0:= v3.`n.c.a.m.d` @type ^`int`;
  #L40f0da.  if v0 == 0 then goto L40f0ec;
  #L40f0de.  v0:= (`long`) v0 @kind i2l;
  #L40f0e0.  v2:= `@@n.c.a.x.b.j` @type ^`n.c.a.x.b` @kind object;
  #L40f0e4.  call temp:= `b`(v4, v0, v2) @signature `Ln/c/a/x/d;.b:(JLn/c/a/x/l;)Ln/c/a/x/d;` @kind interface;
  #L40f0ea.  v4:= temp @kind object;
  #L40f0ec.  return v4 @kind object;
}
procedure `boolean` `a`(`n.c.a.m` v1 @kind this) @signature `Ln/c/a/m;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40ef18.  v0:= `@@n.c.a.m.e` @type ^`n.c.a.m` @kind object;
  #L40ef1c.  if v1 != v0 then goto L40ef24;
  #L40ef20.  v0:= 1I;
  #L40ef22.  goto L40ef26;
  #L40ef24.  v0:= 0I;
  #L40ef26.  return v0;
}
procedure `long` `b`(`n.c.a.m` v4 @kind this) @signature `Ln/c/a/m;.b:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40f024.  v0:= v4.`n.c.a.m.b` @type ^`int`;
  #L40f028.  v0:= (`long`) v0 @kind i2l;
  #L40f02a.  v2:= 12L;
  #L40f02e.  v0:= v0 * v2 @kind long;
  #L40f032.  v2:= v4.`n.c.a.m.c` @type ^`int`;
  #L40f036.  v2:= (`long`) v2 @kind i2l;
  #L40f038.  v0:= v0 + v2 @kind long;
  #L40f03a.  return v0 @kind wide;
}
procedure `boolean` `equals`(`n.c.a.m` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ln/c/a/m;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40eec4.  v0:= 1I;
  #L40eec6.  if v4 != v5 then goto L40eecc;
  #L40eeca.  return v0;
  #L40eecc.  v1:= instanceof @variable v5 @type ^`n.c.a.m` @kind boolean;
  #L40eed0.  v2:= 0I;
  #L40eed2.  if v1 == 0 then goto L40ef04;
  #L40eed6.  v5:= (`n.c.a.m`) v5 @kind object;
  #L40eeda.  v1:= v4.`n.c.a.m.b` @type ^`int`;
  #L40eede.  v3:= v5.`n.c.a.m.b` @type ^`int`;
  #L40eee2.  if v1 != v3 then goto L40ef00;
  #L40eee6.  v1:= v4.`n.c.a.m.c` @type ^`int`;
  #L40eeea.  v3:= v5.`n.c.a.m.c` @type ^`int`;
  #L40eeee.  if v1 != v3 then goto L40ef00;
  #L40eef2.  v1:= v4.`n.c.a.m.d` @type ^`int`;
  #L40eef6.  v5:= v5.`n.c.a.m.d` @type ^`int`;
  #L40eefa.  if v1 != v5 then goto L40ef00;
  #L40eefe.  goto L40ef02;
  #L40ef00.  v0:= 0I;
  #L40ef02.  return v0;
  #L40ef04.  return v2;
}
procedure `int` `hashCode`(`n.c.a.m` v3 @kind this) @signature `Ln/c/a/m;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40ef38.  v0:= v3.`n.c.a.m.b` @type ^`int`;
  #L40ef3c.  v1:= v3.`n.c.a.m.c` @type ^`int`;
  #L40ef40.  v2:= 8I;
  #L40ef44.  call temp:= `rotateLeft`(v1, v2) @signature `Ljava/lang/Integer;.rotateLeft:(II)I` @kind static;
  #L40ef4a.  v1:= temp;
  #L40ef4c.  v0:= v0 + v1 @kind int;
  #L40ef4e.  v1:= v3.`n.c.a.m.d` @type ^`int`;
  #L40ef52.  v2:= 16I;
  #L40ef56.  call temp:= `rotateLeft`(v1, v2) @signature `Ljava/lang/Integer;.rotateLeft:(II)I` @kind static;
  #L40ef5c.  v1:= temp;
  #L40ef5e.  v0:= v0 + v1 @kind int;
  #L40ef60.  return v0;
}
procedure `java.lang.String` `toString`(`n.c.a.m` v2 @kind this) @signature `Ln/c/a/m;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40efa0.  v0:= `@@n.c.a.m.e` @type ^`n.c.a.m` @kind object;
  #L40efa4.  if v2 != v0 then goto L40efae;
  #L40efa8.  v0:= "P0D" @kind object;
  #L40efac.  return v0 @kind object;
  #L40efae.  v0:= new `java.lang.StringBuilder`;
  #L40efb2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40efb8.  v1:= 80I;
  #L40efbc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L40efc2.  v1:= v2.`n.c.a.m.b` @type ^`int`;
  #L40efc6.  if v1 == 0 then goto L40efda;
  #L40efca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L40efd0.  v1:= 89I;
  #L40efd4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L40efda.  v1:= v2.`n.c.a.m.c` @type ^`int`;
  #L40efde.  if v1 == 0 then goto L40eff2;
  #L40efe2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L40efe8.  v1:= 77I;
  #L40efec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L40eff2.  v1:= v2.`n.c.a.m.d` @type ^`int`;
  #L40eff6.  if v1 == 0 then goto L40f00a;
  #L40effa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L40f000.  v1:= 68I;
  #L40f004.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L40f00a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40f010.  v0:= temp @kind object;
  #L40f012.  return v0 @kind object;
}
