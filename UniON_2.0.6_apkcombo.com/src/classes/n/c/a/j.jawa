record `n.c.a.j` @kind class @AccessFlag PUBLIC_FINAL extends `n.c.a.w.c` @kind class, `n.c.a.x.e` @kind interface, `n.c.a.x.f` @kind interface, `java.lang.Comparable` @kind interface, `java.io.Serializable` @kind interface {
  `int` `n.c.a.j.b` @AccessFlag PRIVATE_FINAL;
  `int` `n.c.a.j.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<clinit>`() @signature `Ln/c/a/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L40d4f8.  v0:= new `n.c.a.j$a`;
  #L40d4fc.  call `<init>`(v0) @signature `Ln/c/a/j$a;.<init>:()V` @kind direct;
  #L40d502.  v0:= new `n.c.a.v.c`;
  #L40d506.  call `<init>`(v0) @signature `Ln/c/a/v/c;.<init>:()V` @kind direct;
  #L40d50c.  v1:= "--" @kind object;
  #L40d510.  call temp:= `a`(v0, v1) @signature `Ln/c/a/v/c;.a:(Ljava/lang/String;)Ln/c/a/v/c;` @kind virtual;
  #L40d516.  v1:= `@@n.c.a.x.a.A` @type ^`n.c.a.x.a` @kind object;
  #L40d51a.  v2:= 2I;
  #L40d51c.  call temp:= `a`(v0, v1, v2) @signature `Ln/c/a/v/c;.a:(Ln/c/a/x/i;I)Ln/c/a/v/c;` @kind virtual;
  #L40d522.  v1:= 45I;
  #L40d526.  call temp:= `a`(v0, v1) @signature `Ln/c/a/v/c;.a:(C)Ln/c/a/v/c;` @kind virtual;
  #L40d52c.  v1:= `@@n.c.a.x.a.v` @type ^`n.c.a.x.a` @kind object;
  #L40d530.  call temp:= `a`(v0, v1, v2) @signature `Ln/c/a/v/c;.a:(Ln/c/a/x/i;I)Ln/c/a/v/c;` @kind virtual;
  #L40d536.  call temp:= `i`(v0) @signature `Ln/c/a/v/c;.i:()Ln/c/a/v/b;` @kind virtual;
  #L40d53c.  return @kind void;
}
procedure `void` `<init>`(`n.c.a.j` v0 @kind this, `int` v1 , `int` v2 ) @signature `Ln/c/a/j;.<init>:(II)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L40d550.  call `<init>`(v0) @signature `Ln/c/a/w/c;.<init>:()V` @kind direct;
  #L40d556.  v0.`n.c.a.j.b` @type ^`int` := v1;
  #L40d55a.  v0.`n.c.a.j.c` @type ^`int` := v2;
  #L40d55e.  return @kind void;
}
procedure `n.c.a.j` `a`(`int` v0 , `int` v1 ) @signature `Ln/c/a/j;.a:(II)Ln/c/a/j;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L40d33c.  call temp:= `a`(v0) @signature `Ln/c/a/i;.a:(I)Ln/c/a/i;` @kind static;
  #L40d342.  v0:= temp @kind object;
  #L40d344.  call temp:= `a`(v0, v1) @signature `Ln/c/a/j;.a:(Ln/c/a/i;I)Ln/c/a/j;` @kind static;
  #L40d34a.  v0:= temp @kind object;
  #L40d34c.  return v0 @kind object;
}
procedure `n.c.a.j` `a`(`java.io.DataInput` v1 @kind object) @signature `Ln/c/a/j;.a:(Ljava/io/DataInput;)Ln/c/a/j;` @AccessFlag STATIC {
    temp;
    v0;

  #L40d3ec.  call temp:= `readByte`(v1) @signature `Ljava/io/DataInput;.readByte:()B` @kind interface;
  #L40d3f2.  v0:= temp;
  #L40d3f4.  call temp:= `readByte`(v1) @signature `Ljava/io/DataInput;.readByte:()B` @kind interface;
  #L40d3fa.  v1:= temp;
  #L40d3fc.  call temp:= `a`(v0, v1) @signature `Ln/c/a/j;.a:(II)Ln/c/a/j;` @kind static;
  #L40d402.  v1:= temp @kind object;
  #L40d404.  return v1 @kind object;
}
procedure `n.c.a.j` `a`(`n.c.a.i` v3 @kind object, `int` v4 ) @signature `Ln/c/a/j;.a:(Ln/c/a/i;I)Ln/c/a/j;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L40d360.  v0:= "month" @kind object;
  #L40d364.  call temp:= `a`(v3, v0) @signature `Ln/c/a/w/d;.a:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L40d36a.  v0:= `@@n.c.a.x.a.v` @type ^`n.c.a.x.a` @kind object;
  #L40d36e.  v1:= (`long`) v4 @kind i2l;
  #L40d370.  call temp:= `b`(v0, v1) @signature `Ln/c/a/x/a;.b:(J)J` @kind virtual;
  #L40d376.  call temp:= `b`(v3) @signature `Ln/c/a/i;.b:()I` @kind virtual;
  #L40d37c.  v0:= temp;
  #L40d37e.  if v4 > v0 then goto L40d396;
  #L40d382.  v0:= new `n.c.a.j`;
  #L40d386.  call temp:= `getValue`(v3) @signature `Ln/c/a/i;.getValue:()I` @kind virtual;
  #L40d38c.  v3:= temp;
  #L40d38e.  call `<init>`(v0, v3, v4) @signature `Ln/c/a/j;.<init>:(II)V` @kind direct;
  #L40d394.  return v0 @kind object;
  #L40d396.  v0:= new `n.c.a.b`;
  #L40d39a.  v1:= new `java.lang.StringBuilder`;
  #L40d39e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40d3a4.  v2:= "Illegal value for DayOfMonth field, value " @kind object;
  #L40d3a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40d3ae.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L40d3b4.  v4:= " is not valid for month " @kind object;
  #L40d3b8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40d3be.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L40d3c4.  v3:= temp @kind object;
  #L40d3c6.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40d3cc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40d3d2.  v3:= temp @kind object;
  #L40d3d4.  call `<init>`(v0, v3) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40d3da.  throw v0;
}
procedure `n.c.a.j` `a`(`n.c.a.x.e` v3 @kind object) @signature `Ln/c/a/j;.a:(Ln/c/a/x/e;)Ln/c/a/j;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L40d27c.  v0:= instanceof @variable v3 @type ^`n.c.a.j` @kind boolean;
  #L40d280.  if v0 == 0 then goto L40d28a;
  #L40d284.  v3:= (`n.c.a.j`) v3 @kind object;
  #L40d288.  return v3 @kind object;
  #L40d28a.  v0:= `@@n.c.a.u.m.d` @type ^`n.c.a.u.m` @kind object;
  #L40d28e.  call temp:= `c`(v3) @signature `Ln/c/a/u/h;.c:(Ln/c/a/x/e;)Ln/c/a/u/h;` @kind static;
  #L40d294.  v1:= temp @kind object;
  #L40d296.  call temp:= `equals`(v0, v1) @signature `Ln/c/a/u/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L40d29c.  v0:= temp;
  #L40d29e.  if v0 != 0 then goto L40d2aa;
  #L40d2a2.  call temp:= `a`(v3) @signature `Ln/c/a/f;.a:(Ln/c/a/x/e;)Ln/c/a/f;` @kind static;
  #L40d2a8.  v3:= temp @kind object;
  #L40d2aa.  v0:= `@@n.c.a.x.a.A` @type ^`n.c.a.x.a` @kind object;
  #L40d2ae.  call temp:= `c`(v3, v0) @signature `Ln/c/a/x/e;.c:(Ln/c/a/x/i;)I` @kind interface;
  #L40d2b4.  v0:= temp;
  #L40d2b6.  v1:= `@@n.c.a.x.a.v` @type ^`n.c.a.x.a` @kind object;
  #L40d2ba.  call temp:= `c`(v3, v1) @signature `Ln/c/a/x/e;.c:(Ln/c/a/x/i;)I` @kind interface;
  #L40d2c0.  v1:= temp;
  #L40d2c2.  call temp:= `a`(v0, v1) @signature `Ln/c/a/j;.a:(II)Ln/c/a/j;` @kind static;
  #L40d2c8.  v3:= temp @kind object;
  #L40d2ca.  return v3 @kind object;
  #L40d2cc.  v0:= new `n.c.a.b`;
  #L40d2d0.  v1:= new `java.lang.StringBuilder`;
  #L40d2d4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40d2da.  v2:= "Unable to obtain MonthDay from TemporalAccessor: " @kind object;
  #L40d2de.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40d2e4.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40d2ea.  v2:= ", type " @kind object;
  #L40d2ee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40d2f4.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L40d2fa.  v3:= temp @kind object;
  #L40d2fc.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L40d302.  v3:= temp @kind object;
  #L40d304.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40d30a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40d310.  v3:= temp @kind object;
  #L40d312.  call `<init>`(v0, v3) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40d318.  throw v0;
  catch `n.c.a.b` @[L40d28a..L40d2ca] goto L40d2cc;
}
procedure `java.lang.Object` `readResolve`(`n.c.a.j` v2 @kind this) @signature `Ln/c/a/j;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L40d124.  v0:= new `java.io.InvalidObjectException`;
  #L40d128.  v1:= "Deserialization via serialization delegate" @kind object;
  #L40d12c.  call `<init>`(v0, v1) @signature `Ljava/io/InvalidObjectException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40d132.  throw v0;
}
procedure `java.lang.Object` `writeReplace`(`n.c.a.j` v2 @kind this) @signature `Ln/c/a/j;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L40d144.  v0:= new `n.c.a.n`;
  #L40d148.  v1:= 64I;
  #L40d14c.  call `<init>`(v0, v1, v2) @signature `Ln/c/a/n;.<init>:(BLjava/lang/Object;)V` @kind direct;
  #L40d152.  return v0 @kind object;
}
procedure `int` `a`(`n.c.a.j` v2 @kind this, `n.c.a.j` v3 @kind object) @signature `Ln/c/a/j;.a:(Ln/c/a/j;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40d080.  v0:= v2.`n.c.a.j.b` @type ^`int`;
  #L40d084.  v1:= v3.`n.c.a.j.b` @type ^`int`;
  #L40d088.  v0:= v0 - v1 @kind int;
  #L40d08a.  if v0 != 0 then goto L40d098;
  #L40d08e.  v0:= v2.`n.c.a.j.c` @type ^`int`;
  #L40d092.  v3:= v3.`n.c.a.j.c` @type ^`int`;
  #L40d096.  v0:= v0 - v3 @kind int;
  #L40d098.  return v0;
}
procedure `java.lang.Object` `a`(`n.c.a.j` v1 @kind this, `n.c.a.x.k` v2 @kind object) @signature `Ln/c/a/j;.a:(Ln/c/a/x/k;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40d0f8.  call temp:= `a`() @signature `Ln/c/a/x/j;.a:()Ln/c/a/x/k;` @kind static;
  #L40d0fe.  v0:= temp @kind object;
  #L40d100.  if v2 != v0 then goto L40d10a;
  #L40d104.  v2:= `@@n.c.a.u.m.d` @type ^`n.c.a.u.m` @kind object;
  #L40d108.  return v2 @kind object;
  #L40d10a.  call temp:= `a`(v1, v2) @signature `Ln/c/a/w/c;.a:(Ln/c/a/x/k;)Ljava/lang/Object;` @kind super;
  #L40d110.  v2:= temp @kind object;
  #L40d112.  return v2 @kind object;
}
procedure `n.c.a.x.d` `a`(`n.c.a.j` v5 @kind this, `n.c.a.x.d` v6 @kind object) @signature `Ln/c/a/j;.a:(Ln/c/a/x/d;)Ln/c/a/x/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40d418.  call temp:= `c`(v6) @signature `Ln/c/a/u/h;.c:(Ln/c/a/x/e;)Ln/c/a/u/h;` @kind static;
  #L40d41e.  v0:= temp @kind object;
  #L40d420.  v1:= `@@n.c.a.u.m.d` @type ^`n.c.a.u.m` @kind object;
  #L40d424.  call temp:= `equals`(v0, v1) @signature `Ln/c/a/u/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L40d42a.  v0:= temp;
  #L40d42c.  if v0 == 0 then goto L40d46e;
  #L40d430.  v0:= `@@n.c.a.x.a.A` @type ^`n.c.a.x.a` @kind object;
  #L40d434.  v1:= v5.`n.c.a.j.b` @type ^`int`;
  #L40d438.  v1:= (`long`) v1 @kind i2l;
  #L40d43a.  call temp:= `a`(v6, v0, v1) @signature `Ln/c/a/x/d;.a:(Ln/c/a/x/i;J)Ln/c/a/x/d;` @kind interface;
  #L40d440.  v6:= temp @kind object;
  #L40d442.  v0:= `@@n.c.a.x.a.v` @type ^`n.c.a.x.a` @kind object;
  #L40d446.  call temp:= `a`(v6, v0) @signature `Ln/c/a/x/e;.a:(Ln/c/a/x/i;)Ln/c/a/x/n;` @kind interface;
  #L40d44c.  v1:= temp @kind object;
  #L40d44e.  call temp:= `a`(v1) @signature `Ln/c/a/x/n;.a:()J` @kind virtual;
  #L40d454.  v1:= temp @kind wide;
  #L40d456.  v3:= v5.`n.c.a.j.c` @type ^`int`;
  #L40d45a.  v3:= (`long`) v3 @kind i2l;
  #L40d45c.  call temp:= `min`(v1, v3) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L40d462.  v1:= temp @kind wide;
  #L40d464.  call temp:= `a`(v6, v0, v1) @signature `Ln/c/a/x/d;.a:(Ln/c/a/x/i;J)Ln/c/a/x/d;` @kind interface;
  #L40d46a.  v6:= temp @kind object;
  #L40d46c.  return v6 @kind object;
  #L40d46e.  v6:= new `n.c.a.b`;
  #L40d472.  v0:= "Adjustment only supported on ISO date-time" @kind object;
  #L40d476.  call `<init>`(v6, v0) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40d47c.  throw v6;
}
procedure `n.c.a.x.n` `a`(`n.c.a.j` v7 @kind this, `n.c.a.x.i` v8 @kind object) @signature `Ln/c/a/j;.a:(Ln/c/a/x/i;)Ln/c/a/x/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L40d490.  v0:= `@@n.c.a.x.a.A` @type ^`n.c.a.x.a` @kind object;
  #L40d494.  if v8 != v0 then goto L40d4a2;
  #L40d498.  call temp:= `h`(v8) @signature `Ln/c/a/x/i;.h:()Ln/c/a/x/n;` @kind interface;
  #L40d49e.  v8:= temp @kind object;
  #L40d4a0.  return v8 @kind object;
  #L40d4a2.  v0:= `@@n.c.a.x.a.v` @type ^`n.c.a.x.a` @kind object;
  #L40d4a6.  if v8 != v0 then goto L40d4dc;
  #L40d4aa.  v1:= 1L;
  #L40d4ae.  call temp:= `e`(v7) @signature `Ln/c/a/j;.e:()Ln/c/a/i;` @kind virtual;
  #L40d4b4.  v8:= temp @kind object;
  #L40d4b6.  call temp:= `e`(v8) @signature `Ln/c/a/i;.e:()I` @kind virtual;
  #L40d4bc.  v8:= temp;
  #L40d4be.  v3:= (`long`) v8 @kind i2l;
  #L40d4c0.  call temp:= `e`(v7) @signature `Ln/c/a/j;.e:()Ln/c/a/i;` @kind virtual;
  #L40d4c6.  v8:= temp @kind object;
  #L40d4c8.  call temp:= `b`(v8) @signature `Ln/c/a/i;.b:()I` @kind virtual;
  #L40d4ce.  v8:= temp;
  #L40d4d0.  v5:= (`long`) v8 @kind i2l;
  #L40d4d2.  call temp:= `a`(v1, v3, v5) @signature `Ln/c/a/x/n;.a:(JJJ)Ln/c/a/x/n;` @kind static;
  #L40d4d8.  v8:= temp @kind object;
  #L40d4da.  return v8 @kind object;
  #L40d4dc.  call temp:= `a`(v7, v8) @signature `Ln/c/a/w/c;.a:(Ln/c/a/x/i;)Ln/c/a/x/n;` @kind super;
  #L40d4e2.  v8:= temp @kind object;
  #L40d4e4.  return v8 @kind object;
}
procedure `void` `a`(`n.c.a.j` v1 @kind this, `java.io.DataOutput` v2 @kind object) @signature `Ln/c/a/j;.a:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;

  #L40d570.  v0:= v1.`n.c.a.j.b` @type ^`int`;
  #L40d574.  call `writeByte`(v2, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L40d57a.  v0:= v1.`n.c.a.j.c` @type ^`int`;
  #L40d57e.  call `writeByte`(v2, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L40d584.  return @kind void;
}
procedure `boolean` `b`(`n.c.a.j` v3 @kind this, `n.c.a.x.i` v4 @kind object) @signature `Ln/c/a/j;.b:(Ln/c/a/x/i;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40d018.  v0:= instanceof @variable v4 @type ^`n.c.a.x.a` @kind boolean;
  #L40d01c.  v1:= 1I;
  #L40d01e.  v2:= 0I;
  #L40d020.  if v0 == 0 then goto L40d03a;
  #L40d024.  v0:= `@@n.c.a.x.a.A` @type ^`n.c.a.x.a` @kind object;
  #L40d028.  if v4 == v0 then goto L40d038;
  #L40d02c.  v0:= `@@n.c.a.x.a.v` @type ^`n.c.a.x.a` @kind object;
  #L40d030.  if v4 != v0 then goto L40d036;
  #L40d034.  goto L40d038;
  #L40d036.  v1:= 0I;
  #L40d038.  return v1;
  #L40d03a.  if v4 == 0 then goto L40d04c;
  #L40d03e.  call temp:= `a`(v4, v3) @signature `Ln/c/a/x/i;.a:(Ln/c/a/x/e;)Z` @kind interface;
  #L40d044.  v4:= temp;
  #L40d046.  if v4 == 0 then goto L40d04c;
  #L40d04a.  goto L40d04e;
  #L40d04c.  v1:= 0I;
  #L40d04e.  return v1;
}
procedure `int` `c`(`n.c.a.j` v3 @kind this, `n.c.a.x.i` v4 @kind object) @signature `Ln/c/a/j;.c:(Ln/c/a/x/i;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40d0ac.  call temp:= `a`(v3, v4) @signature `Ln/c/a/j;.a:(Ln/c/a/x/i;)Ln/c/a/x/n;` @kind virtual;
  #L40d0b2.  v0:= temp @kind object;
  #L40d0b4.  call temp:= `d`(v3, v4) @signature `Ln/c/a/j;.d:(Ln/c/a/x/i;)J` @kind virtual;
  #L40d0ba.  v1:= temp @kind wide;
  #L40d0bc.  call temp:= `a`(v0, v1, v4) @signature `Ln/c/a/x/n;.a:(JLn/c/a/x/i;)I` @kind virtual;
  #L40d0c2.  v4:= temp;
  #L40d0c4.  return v4;
}
procedure `int` `compareTo`(`n.c.a.j` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Ln/c/a/j;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L40d060.  v1:= (`n.c.a.j`) v1 @kind object;
  #L40d064.  call temp:= `a`(v0, v1) @signature `Ln/c/a/j;.a:(Ln/c/a/j;)I` @kind virtual;
  #L40d06a.  v1:= temp;
  #L40d06c.  return v1;
}
procedure `long` `d`(`n.c.a.j` v3 @kind this, `n.c.a.x.i` v4 @kind object) @signature `Ln/c/a/j;.d:(Ln/c/a/x/i;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40d1dc.  v0:= instanceof @variable v4 @type ^`n.c.a.x.a` @kind boolean;
  #L40d1e0.  if v0 == 0 then goto L40d242;
  #L40d1e4.  v0:= `@@n.c.a.j$b.a` @type ^`int`[] @kind object;
  #L40d1e8.  v1:= v4 @kind object;
  #L40d1ea.  v1:= (`n.c.a.x.a`) v1 @kind object;
  #L40d1ee.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L40d1f4.  v1:= temp;
  #L40d1f6.  v0:= v0[v1];
  #L40d1fa.  v1:= 1I;
  #L40d1fc.  if v0 == v1 then goto L40d23c;
  #L40d200.  v1:= 2I;
  #L40d202.  if v0 != v1 then goto L40d20e;
  #L40d206.  v4:= v3.`n.c.a.j.b` @type ^`int`;
  #L40d20a.  v0:= (`long`) v4 @kind i2l;
  #L40d20c.  return v0 @kind wide;
  #L40d20e.  v0:= new `n.c.a.x.m`;
  #L40d212.  v1:= new `java.lang.StringBuilder`;
  #L40d216.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40d21c.  v2:= "Unsupported field: " @kind object;
  #L40d220.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40d226.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40d22c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40d232.  v4:= temp @kind object;
  #L40d234.  call `<init>`(v0, v4) @signature `Ln/c/a/x/m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40d23a.  throw v0;
  #L40d23c.  v4:= v3.`n.c.a.j.c` @type ^`int`;
  #L40d240.  goto L40d20a;
  #L40d242.  call temp:= `b`(v4, v3) @signature `Ln/c/a/x/i;.b:(Ln/c/a/x/e;)J` @kind interface;
  #L40d248.  v0:= temp @kind wide;
  #L40d24a.  return v0 @kind wide;
}
procedure `n.c.a.i` `e`(`n.c.a.j` v1 @kind this) @signature `Ln/c/a/j;.e:()Ln/c/a/i;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40d25c.  v0:= v1.`n.c.a.j.b` @type ^`int`;
  #L40d260.  call temp:= `a`(v0) @signature `Ln/c/a/i;.a:(I)Ln/c/a/i;` @kind static;
  #L40d266.  v0:= temp @kind object;
  #L40d268.  return v0 @kind object;
}
procedure `boolean` `equals`(`n.c.a.j` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ln/c/a/j;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40cfd0.  v0:= 1I;
  #L40cfd2.  if v4 != v5 then goto L40cfd8;
  #L40cfd6.  return v0;
  #L40cfd8.  v1:= instanceof @variable v5 @type ^`n.c.a.j` @kind boolean;
  #L40cfdc.  v2:= 0I;
  #L40cfde.  if v1 == 0 then goto L40d004;
  #L40cfe2.  v5:= (`n.c.a.j`) v5 @kind object;
  #L40cfe6.  v1:= v4.`n.c.a.j.b` @type ^`int`;
  #L40cfea.  v3:= v5.`n.c.a.j.b` @type ^`int`;
  #L40cfee.  if v1 != v3 then goto L40d000;
  #L40cff2.  v1:= v4.`n.c.a.j.c` @type ^`int`;
  #L40cff6.  v5:= v5.`n.c.a.j.c` @type ^`int`;
  #L40cffa.  if v1 != v5 then goto L40d000;
  #L40cffe.  goto L40d002;
  #L40d000.  v0:= 0I;
  #L40d002.  return v0;
  #L40d004.  return v2;
}
procedure `int` `hashCode`(`n.c.a.j` v2 @kind this) @signature `Ln/c/a/j;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40d0d8.  v0:= v2.`n.c.a.j.b` @type ^`int`;
  #L40d0dc.  v0:= v0 ^< 6;
  #L40d0e0.  v1:= v2.`n.c.a.j.c` @type ^`int`;
  #L40d0e4.  v0:= v0 + v1 @kind int;
  #L40d0e6.  return v0;
}
procedure `java.lang.String` `toString`(`n.c.a.j` v3 @kind this) @signature `Ln/c/a/j;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40d164.  v0:= new `java.lang.StringBuilder`;
  #L40d168.  v1:= 10I;
  #L40d16c.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L40d172.  v2:= "--" @kind object;
  #L40d176.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40d17c.  v2:= v3.`n.c.a.j.b` @type ^`int`;
  #L40d180.  if v2 >= v1 then goto L40d18a;
  #L40d184.  v2:= "0" @kind object;
  #L40d188.  goto L40d18e;
  #L40d18a.  v2:= "" @kind object;
  #L40d18e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40d194.  v2:= v3.`n.c.a.j.b` @type ^`int`;
  #L40d198.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L40d19e.  v2:= v3.`n.c.a.j.c` @type ^`int`;
  #L40d1a2.  if v2 >= v1 then goto L40d1ac;
  #L40d1a6.  v1:= "-0" @kind object;
  #L40d1aa.  goto L40d1b0;
  #L40d1ac.  v1:= "-" @kind object;
  #L40d1b0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40d1b6.  v1:= v3.`n.c.a.j.c` @type ^`int`;
  #L40d1ba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L40d1c0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40d1c6.  v0:= temp @kind object;
  #L40d1c8.  return v0 @kind object;
}
