record `n.c.a.s` @kind class @AccessFlag FINAL extends `n.c.a.q` @kind class, `java.io.Serializable` @kind interface {
  `java.lang.String` `n.c.a.s.b` @AccessFlag PRIVATE_FINAL;
  `n.c.a.y.f` `n.c.a.s.c` @AccessFlag PRIVATE_FINAL_TRANSIENT;
}
global `java.util.regex.Pattern` `@@n.c.a.s.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln/c/a/s;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L411e64.  v0:= "[A-Za-z][A-Za-z0-9~/._+-]+" @kind object;
  #L411e68.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L411e6e.  v0:= temp @kind object;
  #L411e70.  `@@n.c.a.s.d` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L411e74.  return @kind void;
}
procedure `void` `<init>`(`n.c.a.s` v0 @kind this, `java.lang.String` v1 @kind object, `n.c.a.y.f` v2 @kind object) @signature `Ln/c/a/s;.<init>:(Ljava/lang/String;Ln/c/a/y/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L411e88.  call `<init>`(v0) @signature `Ln/c/a/q;.<init>:()V` @kind direct;
  #L411e8e.  v0.`n.c.a.s.b` @type ^`java.lang.String` := v1 @kind object;
  #L411e92.  v0.`n.c.a.s.c` @type ^`n.c.a.y.f` := v2 @kind object;
  #L411e96.  return @kind void;
}
procedure `n.c.a.q` `a`(`java.io.DataInput` v0 @kind object) @signature `Ln/c/a/s;.a:(Ljava/io/DataInput;)Ln/c/a/q;` @AccessFlag STATIC {
    temp;

  #L411b40.  call temp:= `readUTF`(v0) @signature `Ljava/io/DataInput;.readUTF:()Ljava/lang/String;` @kind interface;
  #L411b46.  v0:= temp @kind object;
  #L411b48.  call temp:= `b`(v0) @signature `Ln/c/a/s;.b:(Ljava/lang/String;)Ln/c/a/s;` @kind static;
  #L411b4e.  v0:= temp @kind object;
  #L411b50.  return v0 @kind object;
}
procedure `n.c.a.s` `a`(`java.lang.String` v3 @kind object, `boolean` v4 ) @signature `Ln/c/a/s;.a:(Ljava/lang/String;Z)Ln/c/a/s;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L411b64.  v0:= "zoneId" @kind object;
  #L411b68.  call temp:= `a`(v3, v0) @signature `Ln/c/a/w/d;.a:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L411b6e.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L411b74.  v0:= temp;
  #L411b76.  v1:= 2I;
  #L411b78.  if v0 < v1 then goto L411bd4;
  #L411b7c.  v0:= `@@n.c.a.s.d` @type ^`java.util.regex.Pattern` @kind object;
  #L411b80.  call temp:= `matcher`(v0, v3) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L411b86.  v0:= temp @kind object;
  #L411b88.  call temp:= `matches`(v0) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L411b8e.  v0:= temp;
  #L411b90.  if v0 == 0 then goto L411bd4;
  #L411b94.  v0:= 0I;
  #L411b96.  v1:= 1I;
  #L411b98.  call temp:= `b`(v3, v1) @signature `Ln/c/a/y/i;.b:(Ljava/lang/String;Z)Ln/c/a/y/f;` @kind static;
  #L411b9e.  v0:= temp @kind object;
  #L411ba0.  goto L411bc6;
  #L411ba2.  v1:= Exception @type ^`n.c.a.y.g` @kind object;
  #L411ba4.  v2:= "GMT0" @kind object;
  #L411ba8.  call temp:= `equals`(v3, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L411bae.  v2:= temp;
  #L411bb0.  if v2 == 0 then goto L411bc2;
  #L411bb4.  v4:= `@@n.c.a.r.f` @type ^`n.c.a.r` @kind object;
  #L411bb8.  call temp:= `e`(v4) @signature `Ln/c/a/r;.e:()Ln/c/a/y/f;` @kind virtual;
  #L411bbe.  v0:= temp @kind object;
  #L411bc0.  goto L411bc6;
  #L411bc2.  if v4 != 0 then goto L411bd2;
  #L411bc6.  v4:= new `n.c.a.s`;
  #L411bca.  call `<init>`(v4, v3, v0) @signature `Ln/c/a/s;.<init>:(Ljava/lang/String;Ln/c/a/y/f;)V` @kind direct;
  #L411bd0.  return v4 @kind object;
  #L411bd2.  throw v1;
  #L411bd4.  v4:= new `n.c.a.b`;
  #L411bd8.  v0:= new `java.lang.StringBuilder`;
  #L411bdc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L411be2.  v1:= "Invalid ID for region-based ZoneId, invalid format: " @kind object;
  #L411be6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411bec.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411bf2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L411bf8.  v3:= temp @kind object;
  #L411bfa.  call `<init>`(v4, v3) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L411c00.  throw v4;
  catch `n.c.a.y.g` @[L411b98..L411ba0] goto L411ba2;
}
procedure `n.c.a.s` `b`(`java.lang.String` v5 @kind object) @signature `Ln/c/a/s;.b:(Ljava/lang/String;)Ln/c/a/s;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L411c24.  v0:= "Z" @kind object;
  #L411c28.  call temp:= `equals`(v5, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L411c2e.  v0:= temp;
  #L411c30.  if v0 != 0 then goto L411df8;
  #L411c34.  v0:= "+" @kind object;
  #L411c38.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L411c3e.  v0:= temp;
  #L411c40.  if v0 != 0 then goto L411df8;
  #L411c44.  v0:= "-" @kind object;
  #L411c48.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L411c4e.  v0:= temp;
  #L411c50.  if v0 != 0 then goto L411df8;
  #L411c54.  v0:= "UTC" @kind object;
  #L411c58.  call temp:= `equals`(v5, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L411c5e.  v0:= temp;
  #L411c60.  if v0 != 0 then goto L411de0;
  #L411c64.  v0:= "GMT" @kind object;
  #L411c68.  call temp:= `equals`(v5, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L411c6e.  v0:= temp;
  #L411c70.  if v0 != 0 then goto L411de0;
  #L411c74.  v0:= "UT" @kind object;
  #L411c78.  call temp:= `equals`(v5, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L411c7e.  v1:= temp;
  #L411c80.  if v1 == 0 then goto L411c88;
  #L411c84.  goto L411de0;
  #L411c88.  v1:= "UTC+" @kind object;
  #L411c8c.  call temp:= `startsWith`(v5, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L411c92.  v1:= temp;
  #L411c94.  v2:= 0I;
  #L411c96.  if v1 != 0 then goto L411d64;
  #L411c9a.  v1:= "GMT+" @kind object;
  #L411c9e.  call temp:= `startsWith`(v5, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L411ca4.  v1:= temp;
  #L411ca6.  if v1 != 0 then goto L411d64;
  #L411caa.  v1:= "UTC-" @kind object;
  #L411cae.  call temp:= `startsWith`(v5, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L411cb4.  v1:= temp;
  #L411cb6.  if v1 != 0 then goto L411d64;
  #L411cba.  v1:= "GMT-" @kind object;
  #L411cbe.  call temp:= `startsWith`(v5, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L411cc4.  v1:= temp;
  #L411cc6.  if v1 == 0 then goto L411ccc;
  #L411cca.  goto L411d64;
  #L411ccc.  v1:= "UT+" @kind object;
  #L411cd0.  call temp:= `startsWith`(v5, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L411cd6.  v1:= temp;
  #L411cd8.  if v1 != 0 then goto L411cf8;
  #L411cdc.  v1:= "UT-" @kind object;
  #L411ce0.  call temp:= `startsWith`(v5, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L411ce6.  v1:= temp;
  #L411ce8.  if v1 == 0 then goto L411cee;
  #L411cec.  goto L411cf8;
  #L411cee.  call temp:= `a`(v5, v2) @signature `Ln/c/a/s;.a:(Ljava/lang/String;Z)Ln/c/a/s;` @kind static;
  #L411cf4.  v5:= temp @kind object;
  #L411cf6.  return v5 @kind object;
  #L411cf8.  v1:= 2I;
  #L411cfa.  call temp:= `substring`(v5, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L411d00.  v5:= temp @kind object;
  #L411d02.  call temp:= `a`(v5) @signature `Ln/c/a/r;.a:(Ljava/lang/String;)Ln/c/a/r;` @kind static;
  #L411d08.  v5:= temp @kind object;
  #L411d0a.  call temp:= `k`(v5) @signature `Ln/c/a/r;.k:()I` @kind virtual;
  #L411d10.  v1:= temp;
  #L411d12.  if v1 != 0 then goto L411d2a;
  #L411d16.  v1:= new `n.c.a.s`;
  #L411d1a.  call temp:= `e`(v5) @signature `Ln/c/a/r;.e:()Ln/c/a/y/f;` @kind virtual;
  #L411d20.  v5:= temp @kind object;
  #L411d22.  call `<init>`(v1, v0, v5) @signature `Ln/c/a/s;.<init>:(Ljava/lang/String;Ln/c/a/y/f;)V` @kind direct;
  #L411d28.  return v1 @kind object;
  #L411d2a.  v1:= new `n.c.a.s`;
  #L411d2e.  v2:= new `java.lang.StringBuilder`;
  #L411d32.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L411d38.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411d3e.  call temp:= `b`(v5) @signature `Ln/c/a/r;.b:()Ljava/lang/String;` @kind virtual;
  #L411d44.  v0:= temp @kind object;
  #L411d46.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411d4c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L411d52.  v0:= temp @kind object;
  #L411d54.  call temp:= `e`(v5) @signature `Ln/c/a/r;.e:()Ln/c/a/y/f;` @kind virtual;
  #L411d5a.  v5:= temp @kind object;
  #L411d5c.  call `<init>`(v1, v0, v5) @signature `Ln/c/a/s;.<init>:(Ljava/lang/String;Ln/c/a/y/f;)V` @kind direct;
  #L411d62.  return v1 @kind object;
  #L411d64.  v0:= 3I;
  #L411d66.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L411d6c.  v1:= temp @kind object;
  #L411d6e.  call temp:= `a`(v1) @signature `Ln/c/a/r;.a:(Ljava/lang/String;)Ln/c/a/r;` @kind static;
  #L411d74.  v1:= temp @kind object;
  #L411d76.  call temp:= `k`(v1) @signature `Ln/c/a/r;.k:()I` @kind virtual;
  #L411d7c.  v3:= temp;
  #L411d7e.  if v3 != 0 then goto L411d9e;
  #L411d82.  v3:= new `n.c.a.s`;
  #L411d86.  call temp:= `substring`(v5, v2, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L411d8c.  v5:= temp @kind object;
  #L411d8e.  call temp:= `e`(v1) @signature `Ln/c/a/r;.e:()Ln/c/a/y/f;` @kind virtual;
  #L411d94.  v0:= temp @kind object;
  #L411d96.  call `<init>`(v3, v5, v0) @signature `Ln/c/a/s;.<init>:(Ljava/lang/String;Ln/c/a/y/f;)V` @kind direct;
  #L411d9c.  return v3 @kind object;
  #L411d9e.  v3:= new `n.c.a.s`;
  #L411da2.  v4:= new `java.lang.StringBuilder`;
  #L411da6.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L411dac.  call temp:= `substring`(v5, v2, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L411db2.  v5:= temp @kind object;
  #L411db4.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411dba.  call temp:= `b`(v1) @signature `Ln/c/a/r;.b:()Ljava/lang/String;` @kind virtual;
  #L411dc0.  v5:= temp @kind object;
  #L411dc2.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411dc8.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L411dce.  v5:= temp @kind object;
  #L411dd0.  call temp:= `e`(v1) @signature `Ln/c/a/r;.e:()Ln/c/a/y/f;` @kind virtual;
  #L411dd6.  v0:= temp @kind object;
  #L411dd8.  call `<init>`(v3, v5, v0) @signature `Ln/c/a/s;.<init>:(Ljava/lang/String;Ln/c/a/y/f;)V` @kind direct;
  #L411dde.  return v3 @kind object;
  #L411de0.  v0:= new `n.c.a.s`;
  #L411de4.  v1:= `@@n.c.a.r.f` @type ^`n.c.a.r` @kind object;
  #L411de8.  call temp:= `e`(v1) @signature `Ln/c/a/r;.e:()Ln/c/a/y/f;` @kind virtual;
  #L411dee.  v1:= temp @kind object;
  #L411df0.  call `<init>`(v0, v5, v1) @signature `Ln/c/a/s;.<init>:(Ljava/lang/String;Ln/c/a/y/f;)V` @kind direct;
  #L411df6.  return v0 @kind object;
  #L411df8.  v0:= new `n.c.a.b`;
  #L411dfc.  v1:= new `java.lang.StringBuilder`;
  #L411e00.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L411e06.  v2:= "Invalid ID for region-based ZoneId, invalid format: " @kind object;
  #L411e0a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411e10.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411e16.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L411e1c.  v5:= temp @kind object;
  #L411e1e.  call `<init>`(v0, v5) @signature `Ln/c/a/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L411e24.  throw v0;
}
procedure `java.lang.Object` `readResolve`(`n.c.a.s` v2 @kind this) @signature `Ln/c/a/s;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L411ae8.  v0:= new `java.io.InvalidObjectException`;
  #L411aec.  v1:= "Deserialization via serialization delegate" @kind object;
  #L411af0.  call `<init>`(v0, v1) @signature `Ljava/io/InvalidObjectException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L411af6.  throw v0;
}
procedure `java.lang.Object` `writeReplace`(`n.c.a.s` v2 @kind this) @signature `Ln/c/a/s;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L411b08.  v0:= new `n.c.a.n`;
  #L411b0c.  v1:= 7I;
  #L411b0e.  call `<init>`(v0, v1, v2) @signature `Ln/c/a/n;.<init>:(BLjava/lang/Object;)V` @kind direct;
  #L411b14.  return v0 @kind object;
}
procedure `void` `a`(`n.c.a.s` v1 @kind this, `java.io.DataOutput` v2 @kind object) @signature `Ln/c/a/s;.a:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;

  #L411ea8.  v0:= 7I;
  #L411eaa.  call `writeByte`(v2, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L411eb0.  call `b`(v1, v2) @signature `Ln/c/a/s;.b:(Ljava/io/DataOutput;)V` @kind virtual;
  #L411eb6.  return @kind void;
}
procedure `java.lang.String` `b`(`n.c.a.s` v1 @kind this) @signature `Ln/c/a/s;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411b28.  v0:= v1.`n.c.a.s.b` @type ^`java.lang.String` @kind object;
  #L411b2c.  return v0 @kind object;
}
procedure `void` `b`(`n.c.a.s` v1 @kind this, `java.io.DataOutput` v2 @kind object) @signature `Ln/c/a/s;.b:(Ljava/io/DataOutput;)V` @AccessFlag  {
    temp;
    v0;

  #L411ec8.  v0:= v1.`n.c.a.s.b` @type ^`java.lang.String` @kind object;
  #L411ecc.  call `writeUTF`(v2, v0) @signature `Ljava/io/DataOutput;.writeUTF:(Ljava/lang/String;)V` @kind interface;
  #L411ed2.  return @kind void;
}
procedure `n.c.a.y.f` `e`(`n.c.a.s` v2 @kind this) @signature `Ln/c/a/s;.e:()Ln/c/a/y/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L411e38.  v0:= v2.`n.c.a.s.c` @type ^`n.c.a.y.f` @kind object;
  #L411e3c.  if v0 == 0 then goto L411e42;
  #L411e40.  goto L411e50;
  #L411e42.  v0:= v2.`n.c.a.s.b` @type ^`java.lang.String` @kind object;
  #L411e46.  v1:= 0I;
  #L411e48.  call temp:= `b`(v0, v1) @signature `Ln/c/a/y/i;.b:(Ljava/lang/String;Z)Ln/c/a/y/f;` @kind static;
  #L411e4e.  v0:= temp @kind object;
  #L411e50.  return v0 @kind object;
}
