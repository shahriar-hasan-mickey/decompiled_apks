record `n.b.a.l` @kind class @AccessFlag PUBLIC extends `n.b.a.r.c` @kind class, `n.b.a.m` @kind interface, `java.lang.Cloneable` @kind interface, `java.io.Serializable` @kind interface {
  `n.b.a.c` `n.b.a.l.d` @AccessFlag PRIVATE;
  `int` `n.b.a.l.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`n.b.a.l` v0 @kind this, `long` v1 , `n.b.a.f` v3 @kind object) @signature `Ln/b/a/l;.<init>:(JLn/b/a/f;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f8f84.  call `<init>`(v0, v1, v3) @signature `Ln/b/a/r/c;.<init>:(JLn/b/a/f;)V` @kind direct;
  #L3f8f8a.  return @kind void;
}
procedure `n.b.a.l$a` `a`(`n.b.a.l` v3 @kind this, `n.b.a.d` v4 @kind object) @signature `Ln/b/a/l;.a:(Ln/b/a/d;)Ln/b/a/l$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f8f00.  if v4 == 0 then goto L3f8f64;
  #L3f8f04.  call temp:= `g`(v3) @signature `Ln/b/a/r/c;.g:()Ln/b/a/a;` @kind virtual;
  #L3f8f0a.  v0:= temp @kind object;
  #L3f8f0c.  call temp:= `a`(v4, v0) @signature `Ln/b/a/d;.a:(Ln/b/a/a;)Ln/b/a/c;` @kind virtual;
  #L3f8f12.  v0:= temp @kind object;
  #L3f8f14.  call temp:= `i`(v0) @signature `Ln/b/a/c;.i:()Z` @kind virtual;
  #L3f8f1a.  v1:= temp;
  #L3f8f1c.  if v1 == 0 then goto L3f8f2c;
  #L3f8f20.  v4:= new `n.b.a.l$a`;
  #L3f8f24.  call `<init>`(v4, v3, v0) @signature `Ln/b/a/l$a;.<init>:(Ln/b/a/l;Ln/b/a/c;)V` @kind direct;
  #L3f8f2a.  return v4 @kind object;
  #L3f8f2c.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f8f30.  v1:= new `java.lang.StringBuilder`;
  #L3f8f34.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f8f3a.  v2:= "Field '" @kind object;
  #L3f8f3e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8f44.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8f4a.  v4:= "' is not supported" @kind object;
  #L3f8f4e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8f54.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f8f5a.  v4:= temp @kind object;
  #L3f8f5c.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f8f62.  throw v0;
  #L3f8f64.  v4:= new `java.lang.IllegalArgumentException`;
  #L3f8f68.  v0:= "The DateTimeFieldType must not be null" @kind object;
  #L3f8f6c.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f8f72.  throw v4;
}
procedure `void` `a`(`n.b.a.l` v2 @kind this, `long` v3 ) @signature `Ln/b/a/l;.a:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f8f9c.  v0:= v2.`n.b.a.l.e` @type ^`int`;
  #L3f8fa0.  if v0 == 0 then goto L3f9008;
  #L3f8fa4.  v1:= 1I;
  #L3f8fa6.  if v0 == v1 then goto L3f8ffc;
  #L3f8faa.  v1:= 2I;
  #L3f8fac.  if v0 == v1 then goto L3f8fee;
  #L3f8fb0.  v1:= 3I;
  #L3f8fb2.  if v0 == v1 then goto L3f8fe0;
  #L3f8fb6.  v1:= 4I;
  #L3f8fb8.  if v0 == v1 then goto L3f8fd2;
  #L3f8fbc.  v1:= 5I;
  #L3f8fbe.  if v0 == v1 then goto L3f8fc4;
  #L3f8fc2.  goto L3f9008;
  #L3f8fc4.  v0:= v2.`n.b.a.l.d` @type ^`n.b.a.c` @kind object;
  #L3f8fc8.  call temp:= `g`(v0, v3) @signature `Ln/b/a/c;.g:(J)J` @kind virtual;
  #L3f8fce.  v3:= temp @kind wide;
  #L3f8fd0.  goto L3f9008;
  #L3f8fd2.  v0:= v2.`n.b.a.l.d` @type ^`n.b.a.c` @kind object;
  #L3f8fd6.  call temp:= `f`(v0, v3) @signature `Ln/b/a/c;.f:(J)J` @kind virtual;
  #L3f8fdc.  v3:= temp @kind wide;
  #L3f8fde.  goto L3f9008;
  #L3f8fe0.  v0:= v2.`n.b.a.l.d` @type ^`n.b.a.c` @kind object;
  #L3f8fe4.  call temp:= `h`(v0, v3) @signature `Ln/b/a/c;.h:(J)J` @kind virtual;
  #L3f8fea.  v3:= temp @kind wide;
  #L3f8fec.  goto L3f9008;
  #L3f8fee.  v0:= v2.`n.b.a.l.d` @type ^`n.b.a.c` @kind object;
  #L3f8ff2.  call temp:= `d`(v0, v3) @signature `Ln/b/a/c;.d:(J)J` @kind virtual;
  #L3f8ff8.  v3:= temp @kind wide;
  #L3f8ffa.  goto L3f9008;
  #L3f8ffc.  v0:= v2.`n.b.a.l.d` @type ^`n.b.a.c` @kind object;
  #L3f9000.  call temp:= `e`(v0, v3) @signature `Ln/b/a/c;.e:(J)J` @kind virtual;
  #L3f9006.  v3:= temp @kind wide;
  #L3f9008.  call `a`(v2, v3) @signature `Ln/b/a/r/c;.a:(J)V` @kind super;
  #L3f900e.  return @kind void;
}
procedure `java.lang.Object` `clone`(`n.b.a.l` v2 @kind this) @signature `Ln/b/a/l;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f8ec4.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L3f8eca.  v0:= temp @kind object;
  #L3f8ecc.  return v0 @kind object;
  #L3f8ece.  v0:= new `java.lang.InternalError`;
  #L3f8ed2.  v1:= "Clone error" @kind object;
  #L3f8ed6.  call `<init>`(v0, v1) @signature `Ljava/lang/InternalError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f8edc.  throw v0;
  catch `java.lang.CloneNotSupportedException` @[L3f8ec4..L3f8ecc] goto L3f8ece;
}
