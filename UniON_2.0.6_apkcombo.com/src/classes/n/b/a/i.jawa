record `n.b.a.i` @kind class @AccessFlag PUBLIC extends `java.lang.IllegalArgumentException` @kind class {
  `java.lang.String` `n.b.a.i.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`n.b.a.i` v2 @kind this, `n.b.a.d` v3 @kind object, `java.lang.Number` v4 @kind object, `java.lang.Number` v5 @kind object, `java.lang.Number` v6 @kind object) @signature `Ln/b/a/i;.<init>:(Ln/b/a/d;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3f8bd0.  call temp:= `b`(v3) @signature `Ln/b/a/d;.b:()Ljava/lang/String;` @kind virtual;
  #L3f8bd6.  v0:= temp @kind object;
  #L3f8bd8.  v1:= 0I;
  #L3f8bda.  call temp:= `a`(v0, v4, v5, v6, v1) @signature `Ln/b/a/i;.a:(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3f8be0.  v4:= temp @kind object;
  #L3f8be2.  call `<init>`(v2, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f8be8.  call temp:= `b`(v3) @signature `Ln/b/a/d;.b:()Ljava/lang/String;` @kind virtual;
  #L3f8bee.  call temp:= `getMessage`(v2) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind super;
  #L3f8bf4.  v3:= temp @kind object;
  #L3f8bf6.  v2.`n.b.a.i.b` @type ^`java.lang.String` := v3 @kind object;
  #L3f8bfa.  return @kind void;
}
procedure `void` `<init>`(`n.b.a.i` v2 @kind this, `n.b.a.d` v3 @kind object, `java.lang.Number` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Ln/b/a/i;.<init>:(Ln/b/a/d;Ljava/lang/Number;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3f8c0c.  call temp:= `b`(v3) @signature `Ln/b/a/d;.b:()Ljava/lang/String;` @kind virtual;
  #L3f8c12.  v0:= temp @kind object;
  #L3f8c14.  v1:= 0I;
  #L3f8c16.  call temp:= `a`(v0, v4, v1, v1, v5) @signature `Ln/b/a/i;.a:(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3f8c1c.  v4:= temp @kind object;
  #L3f8c1e.  call `<init>`(v2, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f8c24.  call temp:= `b`(v3) @signature `Ln/b/a/d;.b:()Ljava/lang/String;` @kind virtual;
  #L3f8c2a.  call temp:= `getMessage`(v2) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind super;
  #L3f8c30.  v3:= temp @kind object;
  #L3f8c32.  v2.`n.b.a.i.b` @type ^`java.lang.String` := v3 @kind object;
  #L3f8c36.  return @kind void;
}
procedure `void` `<init>`(`n.b.a.i` v1 @kind this, `n.b.a.d` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Ln/b/a/i;.<init>:(Ln/b/a/d;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f8c48.  call temp:= `b`(v2) @signature `Ln/b/a/d;.b:()Ljava/lang/String;` @kind virtual;
  #L3f8c4e.  v0:= temp @kind object;
  #L3f8c50.  call temp:= `a`(v0, v3) @signature `Ln/b/a/i;.a:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3f8c56.  v3:= temp @kind object;
  #L3f8c58.  call `<init>`(v1, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f8c5e.  call temp:= `b`(v2) @signature `Ln/b/a/d;.b:()Ljava/lang/String;` @kind virtual;
  #L3f8c64.  call temp:= `getMessage`(v1) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind super;
  #L3f8c6a.  v2:= temp @kind object;
  #L3f8c6c.  v1.`n.b.a.i.b` @type ^`java.lang.String` := v2 @kind object;
  #L3f8c70.  return @kind void;
}
procedure `java.lang.String` `a`(`java.lang.String` v2 @kind object, `java.lang.Number` v3 @kind object, `java.lang.Number` v4 @kind object, `java.lang.Number` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Ln/b/a/i;.a:(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L3f8a78.  v0:= new `java.lang.StringBuilder`;
  #L3f8a7c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f8a82.  v1:= "Value " @kind object;
  #L3f8a86.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8a8c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8a92.  v3:= " for " @kind object;
  #L3f8a96.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8a9c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8aa2.  v2:= 32I;
  #L3f8aa6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8aac.  if v4 != 0 then goto L3f8ad2;
  #L3f8ab0.  if v5 != 0 then goto L3f8ac0;
  #L3f8ab4.  v2:= "is not supported" @kind object;
  #L3f8ab8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8abe.  goto L3f8b12;
  #L3f8ac0.  v2:= "must not be larger than " @kind object;
  #L3f8ac4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8aca.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8ad0.  goto L3f8b12;
  #L3f8ad2.  if v5 != 0 then goto L3f8ae8;
  #L3f8ad6.  v2:= "must not be smaller than " @kind object;
  #L3f8ada.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8ae0.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8ae6.  goto L3f8b12;
  #L3f8ae8.  v2:= "must be in the range [" @kind object;
  #L3f8aec.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8af2.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8af8.  v2:= 44I;
  #L3f8afc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8b02.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8b08.  v2:= 93I;
  #L3f8b0c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8b12.  if v6 == 0 then goto L3f8b26;
  #L3f8b16.  v2:= ": " @kind object;
  #L3f8b1a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8b20.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8b26.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f8b2c.  v2:= temp @kind object;
  #L3f8b2e.  return v2 @kind object;
}
procedure `java.lang.String` `a`(`java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Ln/b/a/i;.a:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L3f8b40.  v0:= new `java.lang.StringBuffer`;
  #L3f8b44.  call `<init>`(v0) @signature `Ljava/lang/StringBuffer;.<init>:()V` @kind direct;
  #L3f8b4a.  v1:= "Value " @kind object;
  #L3f8b4e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f8b54.  if v3 != 0 then goto L3f8b64;
  #L3f8b58.  v3:= "null" @kind object;
  #L3f8b5c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f8b62.  goto L3f8b7a;
  #L3f8b64.  v1:= 34I;
  #L3f8b68.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f8b6e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f8b74.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f8b7a.  v3:= " for " @kind object;
  #L3f8b7e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f8b84.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f8b8a.  v2:= 32I;
  #L3f8b8e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f8b94.  v2:= "is not supported" @kind object;
  #L3f8b98.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f8b9e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f8ba4.  v2:= temp @kind object;
  #L3f8ba6.  return v2 @kind object;
}
procedure `void` `a`(`n.b.a.i` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Ln/b/a/i;.a:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8c84.  v0:= v1.`n.b.a.i.b` @type ^`java.lang.String` @kind object;
  #L3f8c88.  if v0 != 0 then goto L3f8c92;
  #L3f8c8c.  v1.`n.b.a.i.b` @type ^`java.lang.String` := v2 @kind object;
  #L3f8c90.  goto L3f8cc4;
  #L3f8c92.  if v2 == 0 then goto L3f8cc4;
  #L3f8c96.  v0:= new `java.lang.StringBuilder`;
  #L3f8c9a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f8ca0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8ca6.  v2:= ": " @kind object;
  #L3f8caa.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8cb0.  v2:= v1.`n.b.a.i.b` @type ^`java.lang.String` @kind object;
  #L3f8cb4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8cba.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f8cc0.  v2:= temp @kind object;
  #L3f8cc2.  goto L3f8c8c;
  #L3f8cc4.  return @kind void;
}
procedure `java.lang.String` `getMessage`(`n.b.a.i` v1 @kind this) @signature `Ln/b/a/i;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8bb8.  v0:= v1.`n.b.a.i.b` @type ^`java.lang.String` @kind object;
  #L3f8bbc.  return v0 @kind object;
}
