record `n.b.a.v.b$a` @kind class @AccessFlag FINAL extends `n.b.a.f` @kind class {
  `int` `n.b.a.v.b$a.g` @AccessFlag FINAL;
  `n.b.a.v.b$d` `n.b.a.v.b$a.h` @AccessFlag FINAL;
  `n.b.a.v.b$d` `n.b.a.v.b$a.i` @AccessFlag FINAL;
}
procedure `void` `<init>`(`n.b.a.v.b$a` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `n.b.a.v.b$d` v3 @kind object, `n.b.a.v.b$d` v4 @kind object) @signature `Ln/b/a/v/b$a;.<init>:(Ljava/lang/String;ILn/b/a/v/b$d;Ln/b/a/v/b$d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4062d4.  call `<init>`(v0, v1) @signature `Ln/b/a/f;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4062da.  v0.`n.b.a.v.b$a.g` @type ^`int` := v2;
  #L4062de.  v0.`n.b.a.v.b$a.h` @type ^`n.b.a.v.b$d` := v3 @kind object;
  #L4062e2.  v0.`n.b.a.v.b$a.i` @type ^`n.b.a.v.b$d` := v4 @kind object;
  #L4062e6.  return @kind void;
}
procedure `n.b.a.v.b$a` `a`(`java.io.DataInput` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Ln/b/a/v/b$a;.a:(Ljava/io/DataInput;Ljava/lang/String;)Ln/b/a/v/b$a;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L406228.  v0:= new `n.b.a.v.b$a`;
  #L40622c.  call temp:= `a`(v3) @signature `Ln/b/a/v/b;.a:(Ljava/io/DataInput;)J` @kind static;
  #L406232.  v1:= temp @kind wide;
  #L406234.  v2:= (`int`) v1 @kind l2i;
  #L406236.  call temp:= `a`(v3) @signature `Ln/b/a/v/b$d;.a:(Ljava/io/DataInput;)Ln/b/a/v/b$d;` @kind static;
  #L40623c.  v1:= temp @kind object;
  #L40623e.  call temp:= `a`(v3) @signature `Ln/b/a/v/b$d;.a:(Ljava/io/DataInput;)Ln/b/a/v/b$d;` @kind static;
  #L406244.  v3:= temp @kind object;
  #L406246.  call `<init>`(v0, v4, v2, v1, v3) @signature `Ln/b/a/v/b$a;.<init>:(Ljava/lang/String;ILn/b/a/v/b$d;Ln/b/a/v/b$d;)V` @kind direct;
  #L40624c.  return v0 @kind object;
}
procedure `n.b.a.v.b$d` `i`(`n.b.a.v.b$a` v6 @kind this, `long` v7 ) @signature `Ln/b/a/v/b$a;.i:(J)Ln/b/a/v/b$d;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L406260.  v0:= v6.`n.b.a.v.b$a.g` @type ^`int`;
  #L406264.  v1:= v6.`n.b.a.v.b$a.h` @type ^`n.b.a.v.b$d` @kind object;
  #L406268.  v2:= v6.`n.b.a.v.b$a.i` @type ^`n.b.a.v.b$d` @kind object;
  #L40626c.  call temp:= `b`(v2) @signature `Ln/b/a/v/b$d;.b:()I` @kind virtual;
  #L406272.  v3:= temp;
  #L406274.  call temp:= `a`(v1, v7, v0, v3) @signature `Ln/b/a/v/b$d;.a:(JII)J` @kind virtual;
  #L40627a.  v3:= temp @kind wide;
  #L40627c.  goto L406280;
  #L40627e.  v3:= v7 @kind wide;
  #L406280.  call temp:= `b`(v1) @signature `Ln/b/a/v/b$d;.b:()I` @kind virtual;
  #L406286.  v5:= temp;
  #L406288.  call temp:= `a`(v2, v7, v0, v5) @signature `Ln/b/a/v/b$d;.a:(JII)J` @kind virtual;
  #L40628e.  v7:= temp @kind wide;
  #L406290.  goto L406294;
  #L406292.  
  #L406294.  v0:= lcmp(v3, v7);
  #L406298.  if v0 <= 0 then goto L40629e;
  #L40629c.  goto L4062a0;
  #L40629e.  v1:= v2 @kind object;
  #L4062a0.  return v1 @kind object;
  catch `java.lang.IllegalArgumentException` @[L40626c..L40627c] goto L40627e;
  catch `java.lang.ArithmeticException` @[L40626c..L40627c] goto L40627e;
  catch `java.lang.IllegalArgumentException` @[L406280..L406290] goto L406292;
  catch `java.lang.ArithmeticException` @[L406280..L406290] goto L406292;
}
procedure `java.lang.String` `b`(`n.b.a.v.b$a` v0 @kind this, `long` v1 ) @signature `Ln/b/a/v/b$a;.b:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L4060cc.  call temp:= `i`(v0, v1) @signature `Ln/b/a/v/b$a;.i:(J)Ln/b/a/v/b$d;` @kind direct;
  #L4060d2.  v1:= temp @kind object;
  #L4060d4.  call temp:= `a`(v1) @signature `Ln/b/a/v/b$d;.a:()Ljava/lang/String;` @kind virtual;
  #L4060da.  v1:= temp @kind object;
  #L4060dc.  return v1 @kind object;
}
procedure `boolean` `b`(`n.b.a.v.b$a` v1 @kind this) @signature `Ln/b/a/v/b$a;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L406078.  v0:= 0I;
  #L40607a.  return v0;
}
procedure `int` `c`(`n.b.a.v.b$a` v1 @kind this, `long` v2 ) @signature `Ln/b/a/v/b$a;.c:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40608c.  v0:= v1.`n.b.a.v.b$a.g` @type ^`int`;
  #L406090.  call temp:= `i`(v1, v2) @signature `Ln/b/a/v/b$a;.i:(J)Ln/b/a/v/b$d;` @kind direct;
  #L406096.  v2:= temp @kind object;
  #L406098.  call temp:= `b`(v2) @signature `Ln/b/a/v/b$d;.b:()I` @kind virtual;
  #L40609e.  v2:= temp;
  #L4060a0.  v0:= v0 + v2 @kind int;
  #L4060a2.  return v0;
}
procedure `int` `e`(`n.b.a.v.b$a` v0 @kind this, `long` v1 ) @signature `Ln/b/a/v/b$a;.e:(J)I` @AccessFlag PUBLIC {
    temp;

  #L4060b4.  v1:= v0.`n.b.a.v.b$a.g` @type ^`int`;
  #L4060b8.  return v1;
}
procedure `boolean` `equals`(`n.b.a.v.b$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ln/b/a/v/b$a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L405ff8.  v0:= 1I;
  #L405ffa.  if v4 != v5 then goto L406000;
  #L405ffe.  return v0;
  #L406000.  v1:= instanceof @variable v5 @type ^`n.b.a.v.b$a` @kind boolean;
  #L406004.  v2:= 0I;
  #L406006.  if v1 == 0 then goto L406064;
  #L40600a.  v5:= (`n.b.a.v.b$a`) v5 @kind object;
  #L40600e.  call temp:= `a`(v4) @signature `Ln/b/a/f;.a:()Ljava/lang/String;` @kind virtual;
  #L406014.  v1:= temp @kind object;
  #L406016.  call temp:= `a`(v5) @signature `Ln/b/a/f;.a:()Ljava/lang/String;` @kind virtual;
  #L40601c.  v3:= temp @kind object;
  #L40601e.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L406024.  v1:= temp;
  #L406026.  if v1 == 0 then goto L406060;
  #L40602a.  v1:= v4.`n.b.a.v.b$a.g` @type ^`int`;
  #L40602e.  v3:= v5.`n.b.a.v.b$a.g` @type ^`int`;
  #L406032.  if v1 != v3 then goto L406060;
  #L406036.  v1:= v4.`n.b.a.v.b$a.h` @type ^`n.b.a.v.b$d` @kind object;
  #L40603a.  v3:= v5.`n.b.a.v.b$a.h` @type ^`n.b.a.v.b$d` @kind object;
  #L40603e.  call temp:= `equals`(v1, v3) @signature `Ln/b/a/v/b$d;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L406044.  v1:= temp;
  #L406046.  if v1 == 0 then goto L406060;
  #L40604a.  v1:= v4.`n.b.a.v.b$a.i` @type ^`n.b.a.v.b$d` @kind object;
  #L40604e.  v5:= v5.`n.b.a.v.b$a.i` @type ^`n.b.a.v.b$d` @kind object;
  #L406052.  call temp:= `equals`(v1, v5) @signature `Ln/b/a/v/b$d;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L406058.  v5:= temp;
  #L40605a.  if v5 == 0 then goto L406060;
  #L40605e.  goto L406062;
  #L406060.  v0:= 0I;
  #L406062.  return v0;
  #L406064.  return v2;
}
procedure `long` `g`(`n.b.a.v.b$a` v8 @kind this, `long` v9 ) @signature `Ln/b/a/v/b$a;.g:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4060f0.  v0:= v8.`n.b.a.v.b$a.g` @type ^`int`;
  #L4060f4.  v1:= v8.`n.b.a.v.b$a.h` @type ^`n.b.a.v.b$d` @kind object;
  #L4060f8.  v2:= v8.`n.b.a.v.b$a.i` @type ^`n.b.a.v.b$d` @kind object;
  #L4060fc.  v3:= 0L;
  #L406100.  call temp:= `b`(v2) @signature `Ln/b/a/v/b$d;.b:()I` @kind virtual;
  #L406106.  v5:= temp;
  #L406108.  call temp:= `a`(v1, v9, v0, v5) @signature `Ln/b/a/v/b$d;.a:(JII)J` @kind virtual;
  #L40610e.  v5:= temp @kind wide;
  #L406110.  v7:= lcmp(v9, v3);
  #L406114.  if v7 <= 0 then goto L406122;
  #L406118.  v7:= lcmp(v5, v3);
  #L40611c.  if v7 >= 0 then goto L406122;
  #L406120.  v5:= v9 @kind wide;
  #L406122.  call temp:= `b`(v1) @signature `Ln/b/a/v/b$d;.b:()I` @kind virtual;
  #L406128.  v1:= temp;
  #L40612a.  call temp:= `a`(v2, v9, v0, v1) @signature `Ln/b/a/v/b$d;.a:(JII)J` @kind virtual;
  #L406130.  v0:= temp @kind wide;
  #L406132.  v2:= lcmp(v9, v3);
  #L406136.  if v2 <= 0 then goto L406144;
  #L40613a.  v2:= lcmp(v0, v3);
  #L40613e.  if v2 >= 0 then goto L406144;
  #L406142.  goto L40614a;
  #L406144.  v9:= v0 @kind wide;
  #L406146.  goto L40614a;
  #L406148.  
  #L40614a.  v0:= lcmp(v5, v9);
  #L40614e.  if v0 <= 0 then goto L406154;
  #L406152.  goto L406156;
  #L406154.  v9:= v5 @kind wide;
  #L406156.  return v9 @kind wide;
  catch `java.lang.IllegalArgumentException` @[L406100..L406110] goto L406120;
  catch `java.lang.ArithmeticException` @[L406100..L406110] goto L406120;
  catch `java.lang.IllegalArgumentException` @[L406122..L406132] goto L406148;
  catch `java.lang.ArithmeticException` @[L406122..L406132] goto L406148;
}
procedure `long` `h`(`n.b.a.v.b$a` v10 @kind this, `long` v11 ) @signature `Ln/b/a/v/b$a;.h:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L406188.  v0:= 1L;
  #L40618c.  v11:= v11 + v0 @kind long;
  #L40618e.  v2:= v10.`n.b.a.v.b$a.g` @type ^`int`;
  #L406192.  v3:= v10.`n.b.a.v.b$a.h` @type ^`n.b.a.v.b$d` @kind object;
  #L406196.  v4:= v10.`n.b.a.v.b$a.i` @type ^`n.b.a.v.b$d` @kind object;
  #L40619a.  v5:= 0L;
  #L40619e.  call temp:= `b`(v4) @signature `Ln/b/a/v/b$d;.b:()I` @kind virtual;
  #L4061a4.  v7:= temp;
  #L4061a6.  call temp:= `b`(v3, v11, v2, v7) @signature `Ln/b/a/v/b$d;.b:(JII)J` @kind virtual;
  #L4061ac.  v7:= temp @kind wide;
  #L4061ae.  v9:= lcmp(v11, v5);
  #L4061b2.  if v9 >= 0 then goto L4061c0;
  #L4061b6.  v9:= lcmp(v7, v5);
  #L4061ba.  if v9 <= 0 then goto L4061c0;
  #L4061be.  v7:= v11 @kind wide;
  #L4061c0.  call temp:= `b`(v3) @signature `Ln/b/a/v/b$d;.b:()I` @kind virtual;
  #L4061c6.  v3:= temp;
  #L4061c8.  call temp:= `b`(v4, v11, v2, v3) @signature `Ln/b/a/v/b$d;.b:(JII)J` @kind virtual;
  #L4061ce.  v2:= temp @kind wide;
  #L4061d0.  v4:= lcmp(v11, v5);
  #L4061d4.  if v4 >= 0 then goto L4061e2;
  #L4061d8.  v4:= lcmp(v2, v5);
  #L4061dc.  if v4 <= 0 then goto L4061e2;
  #L4061e0.  goto L4061e8;
  #L4061e2.  v11:= v2 @kind wide;
  #L4061e4.  goto L4061e8;
  #L4061e6.  
  #L4061e8.  v2:= lcmp(v7, v11);
  #L4061ec.  if v2 <= 0 then goto L4061f2;
  #L4061f0.  v11:= v7 @kind wide;
  #L4061f2.  v11:= v11 - v0 @kind long;
  #L4061f4.  return v11 @kind wide;
  catch `java.lang.IllegalArgumentException` @[L40619e..L4061ae] goto L4061be;
  catch `java.lang.ArithmeticException` @[L40619e..L4061ae] goto L4061be;
  catch `java.lang.IllegalArgumentException` @[L4061c0..L4061d0] goto L4061e6;
  catch `java.lang.ArithmeticException` @[L4061c0..L4061d0] goto L4061e6;
}
