record `n.b.a.v.a` @kind class @AccessFlag PUBLIC extends `n.b.a.f` @kind class {
  `n.b.a.f` `n.b.a.v.a.g` @AccessFlag PRIVATE_FINAL;
  `n.b.a.v.a$a`[] `n.b.a.v.a.h` @AccessFlag PRIVATE_FINAL_TRANSIENT;
}
global `int` `@@n.b.a.v.a.i` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln/b/a/v/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L405f60.  v0:= "org.joda.time.tz.CachedDateTimeZone.size" @kind object;
  #L405f64.  call temp:= `getInteger`(v0) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;)Ljava/lang/Integer;` @kind static;
  #L405f6a.  v0:= temp @kind object;
  #L405f6c.  goto L405f70;
  #L405f6e.  v0:= 0I;
  #L405f70.  v1:= 1I;
  #L405f72.  if v0 != 0 then goto L405f7c;
  #L405f76.  v0:= 512I;
  #L405f7a.  goto L405f9c;
  #L405f7c.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L405f82.  v0:= temp;
  #L405f84.  v0:= v0 + -1;
  #L405f88.  v2:= 0I;
  #L405f8a.  if v0 <= 0 then goto L405f98;
  #L405f8e.  v2:= v2 + 1;
  #L405f92.  v0:= v0 ^> 1;
  #L405f96.  goto L405f8a;
  #L405f98.  v0:= v1 ^< v2 @kind int;
  #L405f9c.  v0:= v0 - v1 @kind int;
  #L405f9e.  `@@n.b.a.v.a.i` @type ^`int` := v0;
  #L405fa2.  return @kind void;
  catch `java.lang.SecurityException` @[L405f60..L405f6c] goto L405f6e;
}
procedure `void` `<init>`(`n.b.a.v.a` v1 @kind this, `n.b.a.f` v2 @kind object) @signature `Ln/b/a/v/a;.<init>:(Ln/b/a/f;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L405fc4.  call temp:= `a`(v2) @signature `Ln/b/a/f;.a:()Ljava/lang/String;` @kind virtual;
  #L405fca.  v0:= temp @kind object;
  #L405fcc.  call `<init>`(v1, v0) @signature `Ln/b/a/f;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L405fd2.  v0:= `@@n.b.a.v.a.i` @type ^`int`;
  #L405fd6.  v0:= v0 + 1;
  #L405fda.  v0:= new `n.b.a.v.a$a`[v0];
  #L405fde.  v1.`n.b.a.v.a.h` @type ^`n.b.a.v.a$a`[] := v0 @kind object;
  #L405fe2.  v1.`n.b.a.v.a.g` @type ^`n.b.a.f` := v2 @kind object;
  #L405fe6.  return @kind void;
}
procedure `n.b.a.v.a` `a`(`n.b.a.f` v1 @kind object) @signature `Ln/b/a/v/a;.a:(Ln/b/a/f;)Ln/b/a/v/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L405e7c.  v0:= instanceof @variable v1 @type ^`n.b.a.v.a` @kind boolean;
  #L405e80.  if v0 == 0 then goto L405e8a;
  #L405e84.  v1:= (`n.b.a.v.a`) v1 @kind object;
  #L405e88.  return v1 @kind object;
  #L405e8a.  v0:= new `n.b.a.v.a`;
  #L405e8e.  call `<init>`(v0, v1) @signature `Ln/b/a/v/a;.<init>:(Ln/b/a/f;)V` @kind direct;
  #L405e94.  return v0 @kind object;
}
procedure `n.b.a.v.a$a` `i`(`n.b.a.v.a` v7 @kind this, `long` v8 ) @signature `Ln/b/a/v/a;.i:(J)Ln/b/a/v/a$a;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L405ea8.  v0:= -4294967296L;
  #L405eb2.  v8:= v8 ^& v0 @kind long;
  #L405eb4.  v0:= new `n.b.a.v.a$a`;
  #L405eb8.  v1:= v7.`n.b.a.v.a.g` @type ^`n.b.a.f` @kind object;
  #L405ebc.  call `<init>`(v0, v1, v8) @signature `Ln/b/a/v/a$a;.<init>:(Ln/b/a/f;J)V` @kind direct;
  #L405ec2.  v1:= 4294967295L;
  #L405ecc.  v1:= v1 ^| v8 @kind long;
  #L405ece.  v3:= v0 @kind object;
  #L405ed0.  v4:= v7.`n.b.a.v.a.g` @type ^`n.b.a.f` @kind object;
  #L405ed4.  call temp:= `g`(v4, v8) @signature `Ln/b/a/f;.g:(J)J` @kind virtual;
  #L405eda.  v4:= temp @kind wide;
  #L405edc.  v6:= lcmp(v4, v8);
  #L405ee0.  if v6 == 0 then goto L405f06;
  #L405ee4.  v8:= lcmp(v4, v1);
  #L405ee8.  if v8 <= 0 then goto L405eee;
  #L405eec.  goto L405f06;
  #L405eee.  v8:= new `n.b.a.v.a$a`;
  #L405ef2.  v9:= v7.`n.b.a.v.a.g` @type ^`n.b.a.f` @kind object;
  #L405ef6.  call `<init>`(v8, v9, v4) @signature `Ln/b/a/v/a$a;.<init>:(Ln/b/a/f;J)V` @kind direct;
  #L405efc.  v3.`n.b.a.v.a$a.c` @type ^`n.b.a.v.a$a` := v8 @kind object;
  #L405f00.  v3:= v8 @kind object;
  #L405f02.  v8:= v4 @kind wide;
  #L405f04.  goto L405ed0;
  #L405f06.  return v0 @kind object;
}
procedure `n.b.a.v.a$a` `j`(`n.b.a.v.a` v7 @kind this, `long` v8 ) @signature `Ln/b/a/v/a;.j:(J)Ln/b/a/v/a$a;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L405f18.  v0:= 32I;
  #L405f1c.  v1:= v8 ^> v0 @kind long;
  #L405f20.  v2:= (`int`) v1 @kind l2i;
  #L405f22.  v1:= v7.`n.b.a.v.a.h` @type ^`n.b.a.v.a$a`[] @kind object;
  #L405f26.  v3:= `@@n.b.a.v.a.i` @type ^`int`;
  #L405f2a.  v3:= v3 ^& v2 @kind int;
  #L405f2c.  v4:= v1[v3] @kind object;
  #L405f30.  if v4 == 0 then goto L405f40;
  #L405f34.  v5:= v4.`n.b.a.v.a$a.a` @type ^`long` @kind wide;
  #L405f38.  v5:= v5 ^> v0 @kind long;
  #L405f3a.  v0:= (`int`) v5 @kind l2i;
  #L405f3c.  if v0 == v2 then goto L405f4c;
  #L405f40.  call temp:= `i`(v7, v8) @signature `Ln/b/a/v/a;.i:(J)Ln/b/a/v/a$a;` @kind direct;
  #L405f46.  v4:= temp @kind object;
  #L405f48.  v1[v3]:= v4 @kind object;
  #L405f4c.  return v4 @kind object;
}
procedure `java.lang.String` `b`(`n.b.a.v.a` v1 @kind this, `long` v2 ) @signature `Ln/b/a/v/a;.b:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405e18.  call temp:= `j`(v1, v2) @signature `Ln/b/a/v/a;.j:(J)Ln/b/a/v/a$a;` @kind direct;
  #L405e1e.  v0:= temp @kind object;
  #L405e20.  call temp:= `a`(v0, v2) @signature `Ln/b/a/v/a$a;.a:(J)Ljava/lang/String;` @kind virtual;
  #L405e26.  v2:= temp @kind object;
  #L405e28.  return v2 @kind object;
}
procedure `boolean` `b`(`n.b.a.v.a` v1 @kind this) @signature `Ln/b/a/v/a;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405d90.  v0:= v1.`n.b.a.v.a.g` @type ^`n.b.a.f` @kind object;
  #L405d94.  call temp:= `b`(v0) @signature `Ln/b/a/f;.b:()Z` @kind virtual;
  #L405d9a.  v0:= temp;
  #L405d9c.  return v0;
}
procedure `int` `c`(`n.b.a.v.a` v1 @kind this, `long` v2 ) @signature `Ln/b/a/v/a;.c:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405db0.  call temp:= `j`(v1, v2) @signature `Ln/b/a/v/a;.j:(J)Ln/b/a/v/a$a;` @kind direct;
  #L405db6.  v0:= temp @kind object;
  #L405db8.  call temp:= `b`(v0, v2) @signature `Ln/b/a/v/a$a;.b:(J)I` @kind virtual;
  #L405dbe.  v2:= temp;
  #L405dc0.  return v2;
}
procedure `int` `e`(`n.b.a.v.a` v1 @kind this, `long` v2 ) @signature `Ln/b/a/v/a;.e:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405dd4.  call temp:= `j`(v1, v2) @signature `Ln/b/a/v/a;.j:(J)Ln/b/a/v/a$a;` @kind direct;
  #L405dda.  v0:= temp @kind object;
  #L405ddc.  call temp:= `c`(v0, v2) @signature `Ln/b/a/v/a$a;.c:(J)I` @kind virtual;
  #L405de2.  v2:= temp;
  #L405de4.  return v2;
}
procedure `boolean` `equals`(`n.b.a.v.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ln/b/a/v/a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405d54.  if v1 != v2 then goto L405d5c;
  #L405d58.  v2:= 1I;
  #L405d5a.  return v2;
  #L405d5c.  v0:= instanceof @variable v2 @type ^`n.b.a.v.a` @kind boolean;
  #L405d60.  if v0 == 0 then goto L405d7a;
  #L405d64.  v0:= v1.`n.b.a.v.a.g` @type ^`n.b.a.f` @kind object;
  #L405d68.  v2:= (`n.b.a.v.a`) v2 @kind object;
  #L405d6c.  v2:= v2.`n.b.a.v.a.g` @type ^`n.b.a.f` @kind object;
  #L405d70.  call temp:= `equals`(v0, v2) @signature `Ln/b/a/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L405d76.  v2:= temp;
  #L405d78.  return v2;
  #L405d7a.  v2:= 0I;
  #L405d7c.  return v2;
}
procedure `long` `g`(`n.b.a.v.a` v1 @kind this, `long` v2 ) @signature `Ln/b/a/v/a;.g:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405e3c.  v0:= v1.`n.b.a.v.a.g` @type ^`n.b.a.f` @kind object;
  #L405e40.  call temp:= `g`(v0, v2) @signature `Ln/b/a/f;.g:(J)J` @kind virtual;
  #L405e46.  v2:= temp @kind wide;
  #L405e48.  return v2 @kind wide;
}
procedure `long` `h`(`n.b.a.v.a` v1 @kind this, `long` v2 ) @signature `Ln/b/a/v/a;.h:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405e5c.  v0:= v1.`n.b.a.v.a.g` @type ^`n.b.a.f` @kind object;
  #L405e60.  call temp:= `h`(v0, v2) @signature `Ln/b/a/f;.h:(J)J` @kind virtual;
  #L405e66.  v2:= temp @kind wide;
  #L405e68.  return v2 @kind wide;
}
procedure `int` `hashCode`(`n.b.a.v.a` v1 @kind this) @signature `Ln/b/a/v/a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L405df8.  v0:= v1.`n.b.a.v.a.g` @type ^`n.b.a.f` @kind object;
  #L405dfc.  call temp:= `hashCode`(v0) @signature `Ln/b/a/f;.hashCode:()I` @kind virtual;
  #L405e02.  v0:= temp;
  #L405e04.  return v0;
}
