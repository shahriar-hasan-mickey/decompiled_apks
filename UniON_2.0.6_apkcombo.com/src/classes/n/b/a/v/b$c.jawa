record `n.b.a.v.b$c` @kind class @AccessFlag FINAL extends `n.b.a.f` @kind class {
  `long`[] `n.b.a.v.b$c.g` @AccessFlag PRIVATE_FINAL;
  `int`[] `n.b.a.v.b$c.h` @AccessFlag PRIVATE_FINAL;
  `int`[] `n.b.a.v.b$c.i` @AccessFlag PRIVATE_FINAL;
  `java.lang.String`[] `n.b.a.v.b$c.j` @AccessFlag PRIVATE_FINAL;
  `n.b.a.v.b$a` `n.b.a.v.b$c.k` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.b.a.v.b$c` v0 @kind this, `java.lang.String` v1 @kind object, `long`[] v2 @kind object, `int`[] v3 @kind object, `int`[] v4 @kind object, `java.lang.String`[] v5 @kind object, `n.b.a.v.b$a` v6 @kind object) @signature `Ln/b/a/v/b$c;.<init>:(Ljava/lang/String;[J[I[I[Ljava/lang/String;Ln/b/a/v/b$a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L406cb8.  call `<init>`(v0, v1) @signature `Ln/b/a/f;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L406cbe.  v0.`n.b.a.v.b$c.g` @type ^`long`[] := v2 @kind object;
  #L406cc2.  v0.`n.b.a.v.b$c.h` @type ^`int`[] := v3 @kind object;
  #L406cc6.  v0.`n.b.a.v.b$c.i` @type ^`int`[] := v4 @kind object;
  #L406cca.  v0.`n.b.a.v.b$c.j` @type ^`java.lang.String`[] := v5 @kind object;
  #L406cce.  v0.`n.b.a.v.b$c.k` @type ^`n.b.a.v.b$a` := v6 @kind object;
  #L406cd2.  return @kind void;
}
procedure `n.b.a.v.b$c` `a`(`java.io.DataInput` v11 @kind object, `java.lang.String` v12 @kind object) @signature `Ln/b/a/v/b$c;.a:(Ljava/io/DataInput;Ljava/lang/String;)Ln/b/a/v/b$c;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L406bc8.  call temp:= `readUnsignedShort`(v11) @signature `Ljava/io/DataInput;.readUnsignedShort:()I` @kind interface;
  #L406bce.  v0:= temp;
  #L406bd0.  v1:= new `java.lang.String`[v0];
  #L406bd4.  v2:= 0I;
  #L406bd6.  v3:= 0I;
  #L406bd8.  if v3 >= v0 then goto L406bee;
  #L406bdc.  call temp:= `readUTF`(v11) @signature `Ljava/io/DataInput;.readUTF:()Ljava/lang/String;` @kind interface;
  #L406be2.  v4:= temp @kind object;
  #L406be4.  v1[v3]:= v4 @kind object;
  #L406be8.  v3:= v3 + 1;
  #L406bec.  goto L406bd8;
  #L406bee.  call temp:= `readInt`(v11) @signature `Ljava/io/DataInput;.readInt:()I` @kind interface;
  #L406bf4.  v3:= temp;
  #L406bf6.  v6:= new `long`[v3];
  #L406bfa.  v7:= new `int`[v3];
  #L406bfe.  v8:= new `int`[v3];
  #L406c02.  v9:= new `java.lang.String`[v3];
  #L406c06.  if v2 >= v3 then goto L406c6a;
  #L406c0a.  call temp:= `a`(v11) @signature `Ln/b/a/v/b;.a:(Ljava/io/DataInput;)J` @kind static;
  #L406c10.  v4:= temp @kind wide;
  #L406c12.  v6[v2]:= v4 @kind wide;
  #L406c16.  call temp:= `a`(v11) @signature `Ln/b/a/v/b;.a:(Ljava/io/DataInput;)J` @kind static;
  #L406c1c.  v4:= temp @kind wide;
  #L406c1e.  v5:= (`int`) v4 @kind l2i;
  #L406c20.  v7[v2]:= v5;
  #L406c24.  call temp:= `a`(v11) @signature `Ln/b/a/v/b;.a:(Ljava/io/DataInput;)J` @kind static;
  #L406c2a.  v4:= temp @kind wide;
  #L406c2c.  v5:= (`int`) v4 @kind l2i;
  #L406c2e.  v8[v2]:= v5;
  #L406c32.  v4:= 256I;
  #L406c36.  if v0 >= v4 then goto L406c44;
  #L406c3a.  call temp:= `readUnsignedByte`(v11) @signature `Ljava/io/DataInput;.readUnsignedByte:()I` @kind interface;
  #L406c40.  v4:= temp;
  #L406c42.  goto L406c4c;
  #L406c44.  call temp:= `readUnsignedShort`(v11) @signature `Ljava/io/DataInput;.readUnsignedShort:()I` @kind interface;
  #L406c4a.  v4:= temp;
  #L406c4c.  v4:= v1[v4] @kind object;
  #L406c50.  v9[v2]:= v4 @kind object;
  #L406c54.  v2:= v2 + 1;
  #L406c58.  goto L406c06;
  #L406c5a.  v11:= new `java.io.IOException`;
  #L406c5e.  v12:= "Invalid encoding" @kind object;
  #L406c62.  call `<init>`(v11, v12) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L406c68.  throw v11;
  #L406c6a.  v0:= 0I;
  #L406c6c.  call temp:= `readBoolean`(v11) @signature `Ljava/io/DataInput;.readBoolean:()Z` @kind interface;
  #L406c72.  v1:= temp;
  #L406c74.  if v1 == 0 then goto L406c84;
  #L406c78.  call temp:= `a`(v11, v12) @signature `Ln/b/a/v/b$a;.a:(Ljava/io/DataInput;Ljava/lang/String;)Ln/b/a/v/b$a;` @kind static;
  #L406c7e.  v11:= temp @kind object;
  #L406c80.  v10:= v11 @kind object;
  #L406c82.  goto L406c86;
  #L406c84.  v10:= v0 @kind object;
  #L406c86.  v11:= new `n.b.a.v.b$c`;
  #L406c8a.  v4:= v11 @kind object;
  #L406c8c.  v5:= v12 @kind object;
  #L406c8e.  call `<init>`(v4, v5, v6, v7, v8, v9, v10) @signature `Ln/b/a/v/b$c;.<init>:(Ljava/lang/String;[J[I[I[Ljava/lang/String;Ln/b/a/v/b$a;)V` @kind direct;
  #L406c94.  return v11 @kind object;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L406c3a..L406c54] goto L406c5a;
}
procedure `java.lang.String` `b`(`n.b.a.v.b$c` v2 @kind this, `long` v3 ) @signature `Ln/b/a/v/b$c;.b:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L406a74.  v0:= v2.`n.b.a.v.b$c.g` @type ^`long`[] @kind object;
  #L406a78.  call temp:= `binarySearch`(v0, v3) @signature `Ljava/util/Arrays;.binarySearch:([JJ)I` @kind static;
  #L406a7e.  v1:= temp;
  #L406a80.  if v1 < 0 then goto L406a8e;
  #L406a84.  v3:= v2.`n.b.a.v.b$c.j` @type ^`java.lang.String`[] @kind object;
  #L406a88.  v3:= v3[v1] @kind object;
  #L406a8c.  return v3 @kind object;
  #L406a8e.  v1:= ~v1 @kind int;
  #L406a90.  v0:= length @variable v0;
  #L406a92.  if v1 >= v0 then goto L406aae;
  #L406a96.  if v1 <= 0 then goto L406aa8;
  #L406a9a.  v3:= v2.`n.b.a.v.b$c.j` @type ^`java.lang.String`[] @kind object;
  #L406a9e.  v1:= v1 + -1;
  #L406aa2.  v3:= v3[v1] @kind object;
  #L406aa6.  return v3 @kind object;
  #L406aa8.  v3:= "UTC" @kind object;
  #L406aac.  return v3 @kind object;
  #L406aae.  v0:= v2.`n.b.a.v.b$c.k` @type ^`n.b.a.v.b$a` @kind object;
  #L406ab2.  if v0 != 0 then goto L406ac4;
  #L406ab6.  v3:= v2.`n.b.a.v.b$c.j` @type ^`java.lang.String`[] @kind object;
  #L406aba.  v1:= v1 + -1;
  #L406abe.  v3:= v3[v1] @kind object;
  #L406ac2.  return v3 @kind object;
  #L406ac4.  call temp:= `b`(v0, v3) @signature `Ln/b/a/v/b$a;.b:(J)Ljava/lang/String;` @kind virtual;
  #L406aca.  v3:= temp @kind object;
  #L406acc.  return v3 @kind object;
}
procedure `boolean` `b`(`n.b.a.v.b$c` v1 @kind this) @signature `Ln/b/a/v/b$c;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L406990.  v0:= 0I;
  #L406992.  return v0;
}
procedure `int` `c`(`n.b.a.v.b$c` v2 @kind this, `long` v3 ) @signature `Ln/b/a/v/b$c;.c:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4069a4.  v0:= v2.`n.b.a.v.b$c.g` @type ^`long`[] @kind object;
  #L4069a8.  call temp:= `binarySearch`(v0, v3) @signature `Ljava/util/Arrays;.binarySearch:([JJ)I` @kind static;
  #L4069ae.  v1:= temp;
  #L4069b0.  if v1 < 0 then goto L4069be;
  #L4069b4.  v3:= v2.`n.b.a.v.b$c.h` @type ^`int`[] @kind object;
  #L4069b8.  v3:= v3[v1];
  #L4069bc.  return v3;
  #L4069be.  v1:= ~v1 @kind int;
  #L4069c0.  v0:= length @variable v0;
  #L4069c2.  if v1 >= v0 then goto L4069dc;
  #L4069c6.  if v1 <= 0 then goto L4069d8;
  #L4069ca.  v3:= v2.`n.b.a.v.b$c.h` @type ^`int`[] @kind object;
  #L4069ce.  v1:= v1 + -1;
  #L4069d2.  v3:= v3[v1];
  #L4069d6.  return v3;
  #L4069d8.  v3:= 0I;
  #L4069da.  return v3;
  #L4069dc.  v0:= v2.`n.b.a.v.b$c.k` @type ^`n.b.a.v.b$a` @kind object;
  #L4069e0.  if v0 != 0 then goto L4069f2;
  #L4069e4.  v3:= v2.`n.b.a.v.b$c.h` @type ^`int`[] @kind object;
  #L4069e8.  v1:= v1 + -1;
  #L4069ec.  v3:= v3[v1];
  #L4069f0.  return v3;
  #L4069f2.  call temp:= `c`(v0, v3) @signature `Ln/b/a/v/b$a;.c:(J)I` @kind virtual;
  #L4069f8.  v3:= temp;
  #L4069fa.  return v3;
}
procedure `int` `e`(`n.b.a.v.b$c` v2 @kind this, `long` v3 ) @signature `Ln/b/a/v/b$c;.e:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L406a0c.  v0:= v2.`n.b.a.v.b$c.g` @type ^`long`[] @kind object;
  #L406a10.  call temp:= `binarySearch`(v0, v3) @signature `Ljava/util/Arrays;.binarySearch:([JJ)I` @kind static;
  #L406a16.  v1:= temp;
  #L406a18.  if v1 < 0 then goto L406a26;
  #L406a1c.  v3:= v2.`n.b.a.v.b$c.i` @type ^`int`[] @kind object;
  #L406a20.  v3:= v3[v1];
  #L406a24.  return v3;
  #L406a26.  v1:= ~v1 @kind int;
  #L406a28.  v0:= length @variable v0;
  #L406a2a.  if v1 >= v0 then goto L406a44;
  #L406a2e.  if v1 <= 0 then goto L406a40;
  #L406a32.  v3:= v2.`n.b.a.v.b$c.i` @type ^`int`[] @kind object;
  #L406a36.  v1:= v1 + -1;
  #L406a3a.  v3:= v3[v1];
  #L406a3e.  return v3;
  #L406a40.  v3:= 0I;
  #L406a42.  return v3;
  #L406a44.  v0:= v2.`n.b.a.v.b$c.k` @type ^`n.b.a.v.b$a` @kind object;
  #L406a48.  if v0 != 0 then goto L406a5a;
  #L406a4c.  v3:= v2.`n.b.a.v.b$c.i` @type ^`int`[] @kind object;
  #L406a50.  v1:= v1 + -1;
  #L406a54.  v3:= v3[v1];
  #L406a58.  return v3;
  #L406a5a.  call temp:= `e`(v0, v3) @signature `Ln/b/a/v/b$a;.e:(J)I` @kind virtual;
  #L406a60.  v3:= temp;
  #L406a62.  return v3;
}
procedure `boolean` `equals`(`n.b.a.v.b$c` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ln/b/a/v/b$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4068d8.  v0:= 1I;
  #L4068da.  if v4 != v5 then goto L4068e0;
  #L4068de.  return v0;
  #L4068e0.  v1:= instanceof @variable v5 @type ^`n.b.a.v.b$c` @kind boolean;
  #L4068e4.  v2:= 0I;
  #L4068e6.  if v1 == 0 then goto L40697e;
  #L4068ea.  v5:= (`n.b.a.v.b$c`) v5 @kind object;
  #L4068ee.  call temp:= `a`(v4) @signature `Ln/b/a/f;.a:()Ljava/lang/String;` @kind virtual;
  #L4068f4.  v1:= temp @kind object;
  #L4068f6.  call temp:= `a`(v5) @signature `Ln/b/a/f;.a:()Ljava/lang/String;` @kind virtual;
  #L4068fc.  v3:= temp @kind object;
  #L4068fe.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L406904.  v1:= temp;
  #L406906.  if v1 == 0 then goto L40697a;
  #L40690a.  v1:= v4.`n.b.a.v.b$c.g` @type ^`long`[] @kind object;
  #L40690e.  v3:= v5.`n.b.a.v.b$c.g` @type ^`long`[] @kind object;
  #L406912.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([J[J)Z` @kind static;
  #L406918.  v1:= temp;
  #L40691a.  if v1 == 0 then goto L40697a;
  #L40691e.  v1:= v4.`n.b.a.v.b$c.j` @type ^`java.lang.String`[] @kind object;
  #L406922.  v3:= v5.`n.b.a.v.b$c.j` @type ^`java.lang.String`[] @kind object;
  #L406926.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L40692c.  v1:= temp;
  #L40692e.  if v1 == 0 then goto L40697a;
  #L406932.  v1:= v4.`n.b.a.v.b$c.h` @type ^`int`[] @kind object;
  #L406936.  v3:= v5.`n.b.a.v.b$c.h` @type ^`int`[] @kind object;
  #L40693a.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([I[I)Z` @kind static;
  #L406940.  v1:= temp;
  #L406942.  if v1 == 0 then goto L40697a;
  #L406946.  v1:= v4.`n.b.a.v.b$c.i` @type ^`int`[] @kind object;
  #L40694a.  v3:= v5.`n.b.a.v.b$c.i` @type ^`int`[] @kind object;
  #L40694e.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([I[I)Z` @kind static;
  #L406954.  v1:= temp;
  #L406956.  if v1 == 0 then goto L40697a;
  #L40695a.  v1:= v4.`n.b.a.v.b$c.k` @type ^`n.b.a.v.b$a` @kind object;
  #L40695e.  v5:= v5.`n.b.a.v.b$c.k` @type ^`n.b.a.v.b$a` @kind object;
  #L406962.  if v1 != 0 then goto L40696c;
  #L406966.  if v5 != 0 then goto L40697a;
  #L40696a.  goto L40697c;
  #L40696c.  call temp:= `equals`(v1, v5) @signature `Ln/b/a/v/b$a;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L406972.  v5:= temp;
  #L406974.  if v5 == 0 then goto L40697a;
  #L406978.  goto L40697c;
  #L40697a.  v0:= 0I;
  #L40697c.  return v0;
  #L40697e.  return v2;
}
procedure `long` `g`(`n.b.a.v.b$c` v3 @kind this, `long` v4 ) @signature `Ln/b/a/v/b$c;.g:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L406ae0.  v0:= v3.`n.b.a.v.b$c.g` @type ^`long`[] @kind object;
  #L406ae4.  call temp:= `binarySearch`(v0, v4) @signature `Ljava/util/Arrays;.binarySearch:([JJ)I` @kind static;
  #L406aea.  v1:= temp;
  #L406aec.  if v1 < 0 then goto L406af6;
  #L406af0.  v1:= v1 + 1;
  #L406af4.  goto L406af8;
  #L406af6.  v1:= ~v1 @kind int;
  #L406af8.  v2:= length @variable v0;
  #L406afa.  if v1 >= v2 then goto L406b04;
  #L406afe.  v4:= v0[v1] @kind wide;
  #L406b02.  return v4 @kind wide;
  #L406b04.  v1:= v3.`n.b.a.v.b$c.k` @type ^`n.b.a.v.b$a` @kind object;
  #L406b08.  if v1 != 0 then goto L406b0e;
  #L406b0c.  return v4 @kind wide;
  #L406b0e.  v1:= length @variable v0;
  #L406b10.  v1:= v1 + -1;
  #L406b14.  v1:= v0[v1] @kind wide;
  #L406b18.  v0:= lcmp(v4, v1);
  #L406b1c.  if v0 >= 0 then goto L406b22;
  #L406b20.  v4:= v1 @kind wide;
  #L406b22.  v0:= v3.`n.b.a.v.b$c.k` @type ^`n.b.a.v.b$a` @kind object;
  #L406b26.  call temp:= `g`(v0, v4) @signature `Ln/b/a/v/b$a;.g:(J)J` @kind virtual;
  #L406b2c.  v4:= temp @kind wide;
  #L406b2e.  return v4 @kind wide;
}
procedure `long` `h`(`n.b.a.v.b$c` v9 @kind this, `long` v10 ) @signature `Ln/b/a/v/b$c;.h:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L406b40.  v0:= v9.`n.b.a.v.b$c.g` @type ^`long`[] @kind object;
  #L406b44.  call temp:= `binarySearch`(v0, v10) @signature `Ljava/util/Arrays;.binarySearch:([JJ)I` @kind static;
  #L406b4a.  v1:= temp;
  #L406b4c.  v2:= 1L;
  #L406b50.  v4:= -9223372036854775808L;
  #L406b54.  if v1 < 0 then goto L406b64;
  #L406b58.  v0:= lcmp(v10, v4);
  #L406b5c.  if v0 <= 0 then goto L406b62;
  #L406b60.  v10:= v10 - v2 @kind long;
  #L406b62.  return v10 @kind wide;
  #L406b64.  v1:= ~v1 @kind int;
  #L406b66.  v6:= length @variable v0;
  #L406b68.  if v1 >= v6 then goto L406b86;
  #L406b6c.  if v1 <= 0 then goto L406b84;
  #L406b70.  v1:= v1 + -1;
  #L406b74.  v6:= v0[v1] @kind wide;
  #L406b78.  v0:= lcmp(v6, v4);
  #L406b7c.  if v0 <= 0 then goto L406b84;
  #L406b80.  v6:= v6 - v2 @kind long;
  #L406b82.  return v6 @kind wide;
  #L406b84.  return v10 @kind wide;
  #L406b86.  v6:= v9.`n.b.a.v.b$c.k` @type ^`n.b.a.v.b$a` @kind object;
  #L406b8a.  if v6 == 0 then goto L406ba0;
  #L406b8e.  call temp:= `h`(v6, v10) @signature `Ln/b/a/v/b$a;.h:(J)J` @kind virtual;
  #L406b94.  v6:= temp @kind wide;
  #L406b96.  v8:= lcmp(v6, v10);
  #L406b9a.  if v8 >= 0 then goto L406ba0;
  #L406b9e.  return v6 @kind wide;
  #L406ba0.  v1:= v1 + -1;
  #L406ba4.  v6:= v0[v1] @kind wide;
  #L406ba8.  v0:= lcmp(v6, v4);
  #L406bac.  if v0 <= 0 then goto L406bb4;
  #L406bb0.  v6:= v6 - v2 @kind long;
  #L406bb2.  return v6 @kind wide;
  #L406bb4.  return v10 @kind wide;
}
