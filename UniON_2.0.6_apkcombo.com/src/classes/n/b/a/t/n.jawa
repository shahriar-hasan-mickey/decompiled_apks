record `n.b.a.t.n` @kind class @AccessFlag PUBLIC extends `n.b.a.t.d` @kind class {
  `int` `n.b.a.t.n.c` @AccessFlag FINAL;
  `n.b.a.g` `n.b.a.t.n.d` @AccessFlag FINAL;
  `n.b.a.g` `n.b.a.t.n.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`n.b.a.t.n` v0 @kind this, `n.b.a.c` v1 @kind object, `n.b.a.g` v2 @kind object, `n.b.a.d` v3 @kind object, `int` v4 ) @signature `Ln/b/a/t/n;.<init>:(Ln/b/a/c;Ln/b/a/g;Ln/b/a/d;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ffae8.  call `<init>`(v0, v1, v3) @signature `Ln/b/a/t/d;.<init>:(Ln/b/a/c;Ln/b/a/d;)V` @kind direct;
  #L3ffaee.  v3:= 2I;
  #L3ffaf0.  if v4 < v3 then goto L3ffb0a;
  #L3ffaf4.  v0.`n.b.a.t.n.e` @type ^`n.b.a.g` := v2 @kind object;
  #L3ffaf8.  call temp:= `a`(v1) @signature `Ln/b/a/c;.a:()Ln/b/a/g;` @kind virtual;
  #L3ffafe.  v1:= temp @kind object;
  #L3ffb00.  v0.`n.b.a.t.n.d` @type ^`n.b.a.g` := v1 @kind object;
  #L3ffb04.  v0.`n.b.a.t.n.c` @type ^`int` := v4;
  #L3ffb08.  return @kind void;
  #L3ffb0a.  v1:= new `java.lang.IllegalArgumentException`;
  #L3ffb0e.  v2:= "The divisor must be at least 2" @kind object;
  #L3ffb12.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ffb18.  throw v1;
}
procedure `void` `<init>`(`n.b.a.t.n` v1 @kind this, `n.b.a.t.f` v2 @kind object) @signature `Ln/b/a/t/n;.<init>:(Ln/b/a/t/f;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ffb2c.  call temp:= `g`(v2) @signature `Ln/b/a/t/b;.g:()Ln/b/a/d;` @kind virtual;
  #L3ffb32.  v0:= temp @kind object;
  #L3ffb34.  call `<init>`(v1, v2, v0) @signature `Ln/b/a/t/n;.<init>:(Ln/b/a/t/f;Ln/b/a/d;)V` @kind direct;
  #L3ffb3a.  return @kind void;
}
procedure `void` `<init>`(`n.b.a.t.n` v1 @kind this, `n.b.a.t.f` v2 @kind object, `n.b.a.d` v3 @kind object) @signature `Ln/b/a/t/n;.<init>:(Ln/b/a/t/f;Ln/b/a/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ffb4c.  call temp:= `j`(v2) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ffb52.  v0:= temp @kind object;
  #L3ffb54.  call temp:= `a`(v0) @signature `Ln/b/a/c;.a:()Ln/b/a/g;` @kind virtual;
  #L3ffb5a.  v0:= temp @kind object;
  #L3ffb5c.  call `<init>`(v1, v2, v0, v3) @signature `Ln/b/a/t/n;.<init>:(Ln/b/a/t/f;Ln/b/a/g;Ln/b/a/d;)V` @kind direct;
  #L3ffb62.  return @kind void;
}
procedure `void` `<init>`(`n.b.a.t.n` v1 @kind this, `n.b.a.t.f` v2 @kind object, `n.b.a.g` v3 @kind object, `n.b.a.d` v4 @kind object) @signature `Ln/b/a/t/n;.<init>:(Ln/b/a/t/f;Ln/b/a/g;Ln/b/a/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ffb74.  call temp:= `j`(v2) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ffb7a.  v0:= temp @kind object;
  #L3ffb7c.  call `<init>`(v1, v0, v4) @signature `Ln/b/a/t/d;.<init>:(Ln/b/a/c;Ln/b/a/d;)V` @kind direct;
  #L3ffb82.  v4:= v2.`n.b.a.t.f.c` @type ^`int`;
  #L3ffb86.  v1.`n.b.a.t.n.c` @type ^`int` := v4;
  #L3ffb8a.  v1.`n.b.a.t.n.d` @type ^`n.b.a.g` := v3 @kind object;
  #L3ffb8e.  v2:= v2.`n.b.a.t.f.d` @type ^`n.b.a.g` @kind object;
  #L3ffb92.  v1.`n.b.a.t.n.e` @type ^`n.b.a.g` := v2 @kind object;
  #L3ffb96.  return @kind void;
}
procedure `int` `a`(`n.b.a.t.n` v1 @kind this, `int` v2 ) @signature `Ln/b/a/t/n;.a:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3ff930.  if v2 < 0 then goto L3ff93c;
  #L3ff934.  v0:= v1.`n.b.a.t.n.c` @type ^`int`;
  #L3ff938.  v2:= v2 / v0 @kind int;
  #L3ff93a.  return v2;
  #L3ff93c.  v2:= v2 + 1;
  #L3ff940.  v0:= v1.`n.b.a.t.n.c` @type ^`int`;
  #L3ff944.  v2:= v2 / v0 @kind int;
  #L3ff946.  v2:= v2 + -1;
  #L3ff94a.  return v2;
}
procedure `int` `a`(`n.b.a.t.n` v1 @kind this, `long` v2 ) @signature `Ln/b/a/t/n;.a:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff8f4.  call temp:= `j`(v1) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ff8fa.  v0:= temp @kind object;
  #L3ff8fc.  call temp:= `a`(v0, v2) @signature `Ln/b/a/c;.a:(J)I` @kind virtual;
  #L3ff902.  v2:= temp;
  #L3ff904.  v3:= v1.`n.b.a.t.n.c` @type ^`int`;
  #L3ff908.  if v2 < 0 then goto L3ff910;
  #L3ff90c.  v2:= v2 %% v3 @kind int;
  #L3ff90e.  return v2;
  #L3ff910.  v0:= v3 + -1;
  #L3ff914.  v2:= v2 + 1;
  #L3ff918.  v2:= v2 %% v3 @kind int;
  #L3ff91a.  v0:= v0 + v2 @kind int;
  #L3ff91c.  return v0;
}
procedure `n.b.a.g` `a`(`n.b.a.t.n` v1 @kind this) @signature `Ln/b/a/t/n;.a:()Ln/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ffab8.  v0:= v1.`n.b.a.t.n.d` @type ^`n.b.a.g` @kind object;
  #L3ffabc.  return v0 @kind object;
}
procedure `long` `b`(`n.b.a.t.n` v3 @kind this, `long` v4 , `int` v6 ) @signature `Ln/b/a/t/n;.b:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ffa64.  v0:= v3.`n.b.a.t.n.c` @type ^`int`;
  #L3ffa68.  v0:= v0 + -1;
  #L3ffa6c.  v1:= 0I;
  #L3ffa6e.  call `a`(v3, v6, v1, v0) @signature `Ln/b/a/t/g;.a:(Ln/b/a/c;III)V` @kind static;
  #L3ffa74.  call temp:= `j`(v3) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ffa7a.  v0:= temp @kind object;
  #L3ffa7c.  call temp:= `a`(v0, v4) @signature `Ln/b/a/c;.a:(J)I` @kind virtual;
  #L3ffa82.  v0:= temp;
  #L3ffa84.  call temp:= `a`(v3, v0) @signature `Ln/b/a/t/n;.a:(I)I` @kind direct;
  #L3ffa8a.  v0:= temp;
  #L3ffa8c.  call temp:= `j`(v3) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ffa92.  v1:= temp @kind object;
  #L3ffa94.  v2:= v3.`n.b.a.t.n.c` @type ^`int`;
  #L3ffa98.  v0:= v0 * v2 @kind int;
  #L3ffa9c.  v0:= v0 + v6 @kind int;
  #L3ffa9e.  call temp:= `b`(v1, v4, v0) @signature `Ln/b/a/c;.b:(JI)J` @kind virtual;
  #L3ffaa4.  v4:= temp @kind wide;
  #L3ffaa6.  return v4 @kind wide;
}
procedure `int` `c`(`n.b.a.t.n` v1 @kind this) @signature `Ln/b/a/t/n;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff95c.  v0:= v1.`n.b.a.t.n.c` @type ^`int`;
  #L3ff960.  v0:= v0 + -1;
  #L3ff964.  return v0;
}
procedure `long` `c`(`n.b.a.t.n` v1 @kind this, `long` v2 ) @signature `Ln/b/a/t/n;.c:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff98c.  call temp:= `j`(v1) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ff992.  v0:= temp @kind object;
  #L3ff994.  call temp:= `c`(v0, v2) @signature `Ln/b/a/c;.c:(J)J` @kind virtual;
  #L3ff99a.  v2:= temp @kind wide;
  #L3ff99c.  return v2 @kind wide;
}
procedure `int` `d`(`n.b.a.t.n` v1 @kind this) @signature `Ln/b/a/t/n;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff978.  v0:= 0I;
  #L3ff97a.  return v0;
}
procedure `long` `d`(`n.b.a.t.n` v1 @kind this, `long` v2 ) @signature `Ln/b/a/t/n;.d:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff9b0.  call temp:= `j`(v1) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ff9b6.  v0:= temp @kind object;
  #L3ff9b8.  call temp:= `d`(v0, v2) @signature `Ln/b/a/c;.d:(J)J` @kind virtual;
  #L3ff9be.  v2:= temp @kind wide;
  #L3ff9c0.  return v2 @kind wide;
}
procedure `long` `e`(`n.b.a.t.n` v1 @kind this, `long` v2 ) @signature `Ln/b/a/t/n;.e:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff9d4.  call temp:= `j`(v1) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ff9da.  v0:= temp @kind object;
  #L3ff9dc.  call temp:= `e`(v0, v2) @signature `Ln/b/a/c;.e:(J)J` @kind virtual;
  #L3ff9e2.  v2:= temp @kind wide;
  #L3ff9e4.  return v2 @kind wide;
}
procedure `long` `f`(`n.b.a.t.n` v1 @kind this, `long` v2 ) @signature `Ln/b/a/t/n;.f:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff9f8.  call temp:= `j`(v1) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ff9fe.  v0:= temp @kind object;
  #L3ffa00.  call temp:= `f`(v0, v2) @signature `Ln/b/a/c;.f:(J)J` @kind virtual;
  #L3ffa06.  v2:= temp @kind wide;
  #L3ffa08.  return v2 @kind wide;
}
procedure `n.b.a.g` `f`(`n.b.a.t.n` v1 @kind this) @signature `Ln/b/a/t/n;.f:()Ln/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ffad0.  v0:= v1.`n.b.a.t.n.e` @type ^`n.b.a.g` @kind object;
  #L3ffad4.  return v0 @kind object;
}
procedure `long` `g`(`n.b.a.t.n` v1 @kind this, `long` v2 ) @signature `Ln/b/a/t/n;.g:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ffa1c.  call temp:= `j`(v1) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ffa22.  v0:= temp @kind object;
  #L3ffa24.  call temp:= `g`(v0, v2) @signature `Ln/b/a/c;.g:(J)J` @kind virtual;
  #L3ffa2a.  v2:= temp @kind wide;
  #L3ffa2c.  return v2 @kind wide;
}
procedure `long` `h`(`n.b.a.t.n` v1 @kind this, `long` v2 ) @signature `Ln/b/a/t/n;.h:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ffa40.  call temp:= `j`(v1) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ffa46.  v0:= temp @kind object;
  #L3ffa48.  call temp:= `h`(v0, v2) @signature `Ln/b/a/c;.h:(J)J` @kind virtual;
  #L3ffa4e.  v2:= temp @kind wide;
  #L3ffa50.  return v2 @kind wide;
}
