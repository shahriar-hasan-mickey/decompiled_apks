record `n.b.a.t.d` @kind class @AccessFlag PUBLIC_ABSTRACT extends `n.b.a.t.b` @kind class {
  `n.b.a.c` `n.b.a.t.d.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.b.a.t.d` v0 @kind this, `n.b.a.c` v1 @kind object, `n.b.a.d` v2 @kind object) @signature `Ln/b/a/t/d;.<init>:(Ln/b/a/c;Ln/b/a/d;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3fe944.  call `<init>`(v0, v2) @signature `Ln/b/a/t/b;.<init>:(Ln/b/a/d;)V` @kind direct;
  #L3fe94a.  if v1 == 0 then goto L3fe970;
  #L3fe94e.  call temp:= `i`(v1) @signature `Ln/b/a/c;.i:()Z` @kind virtual;
  #L3fe954.  v2:= temp;
  #L3fe956.  if v2 == 0 then goto L3fe960;
  #L3fe95a.  v0.`n.b.a.t.d.b` @type ^`n.b.a.c` := v1 @kind object;
  #L3fe95e.  return @kind void;
  #L3fe960.  v1:= new `java.lang.IllegalArgumentException`;
  #L3fe964.  v2:= "The field must be supported" @kind object;
  #L3fe968.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fe96e.  throw v1;
  #L3fe970.  v1:= new `java.lang.IllegalArgumentException`;
  #L3fe974.  v2:= "The field must not be null" @kind object;
  #L3fe978.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fe97e.  throw v1;
}
procedure `int` `a`(`n.b.a.t.d` v1 @kind this, `long` v2 ) @signature `Ln/b/a/t/d;.a:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe8ac.  v0:= v1.`n.b.a.t.d.b` @type ^`n.b.a.c` @kind object;
  #L3fe8b0.  call temp:= `a`(v0, v2) @signature `Ln/b/a/c;.a:(J)I` @kind virtual;
  #L3fe8b6.  v2:= temp;
  #L3fe8b8.  return v2;
}
procedure `n.b.a.g` `a`(`n.b.a.t.d` v1 @kind this) @signature `Ln/b/a/t/d;.a:()Ln/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe904.  v0:= v1.`n.b.a.t.d.b` @type ^`n.b.a.c` @kind object;
  #L3fe908.  call temp:= `a`(v0) @signature `Ln/b/a/c;.a:()Ln/b/a/g;` @kind virtual;
  #L3fe90e.  v0:= temp @kind object;
  #L3fe910.  return v0 @kind object;
}
procedure `long` `b`(`n.b.a.t.d` v1 @kind this, `long` v2 , `int` v4 ) @signature `Ln/b/a/t/d;.b:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe8cc.  v0:= v1.`n.b.a.t.d.b` @type ^`n.b.a.c` @kind object;
  #L3fe8d0.  call temp:= `b`(v0, v2, v4) @signature `Ln/b/a/c;.b:(JI)J` @kind virtual;
  #L3fe8d6.  v2:= temp @kind wide;
  #L3fe8d8.  return v2 @kind wide;
}
procedure `n.b.a.g` `f`(`n.b.a.t.d` v1 @kind this) @signature `Ln/b/a/t/d;.f:()Ln/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe924.  v0:= v1.`n.b.a.t.d.b` @type ^`n.b.a.c` @kind object;
  #L3fe928.  call temp:= `f`(v0) @signature `Ln/b/a/c;.f:()Ln/b/a/g;` @kind virtual;
  #L3fe92e.  v0:= temp @kind object;
  #L3fe930.  return v0 @kind object;
}
procedure `boolean` `h`(`n.b.a.t.d` v1 @kind this) @signature `Ln/b/a/t/d;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe88c.  v0:= v1.`n.b.a.t.d.b` @type ^`n.b.a.c` @kind object;
  #L3fe890.  call temp:= `h`(v0) @signature `Ln/b/a/c;.h:()Z` @kind virtual;
  #L3fe896.  v0:= temp;
  #L3fe898.  return v0;
}
procedure `n.b.a.c` `j`(`n.b.a.t.d` v1 @kind this) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3fe8ec.  v0:= v1.`n.b.a.t.d.b` @type ^`n.b.a.c` @kind object;
  #L3fe8f0.  return v0 @kind object;
}
