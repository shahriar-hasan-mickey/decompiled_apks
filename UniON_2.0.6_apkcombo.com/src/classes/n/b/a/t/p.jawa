record `n.b.a.t.p` @kind class @AccessFlag PUBLIC_FINAL extends `n.b.a.c` @kind class, `java.io.Serializable` @kind interface {
  `n.b.a.d` `n.b.a.t.p.b` @AccessFlag PRIVATE_FINAL;
  `n.b.a.g` `n.b.a.t.p.c` @AccessFlag PRIVATE_FINAL;
}
global `java.util.HashMap` `@@n.b.a.t.p.d` @AccessFlag PRIVATE_STATIC;
procedure `void` `<init>`(`n.b.a.t.p` v0 @kind this, `n.b.a.d` v1 @kind object, `n.b.a.g` v2 @kind object) @signature `Ln/b/a/t/p;.<init>:(Ln/b/a/d;Ln/b/a/g;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4000a0.  call `<init>`(v0) @signature `Ln/b/a/c;.<init>:()V` @kind direct;
  #L4000a6.  if v1 == 0 then goto L4000b8;
  #L4000aa.  if v2 == 0 then goto L4000b8;
  #L4000ae.  v0.`n.b.a.t.p.b` @type ^`n.b.a.d` := v1 @kind object;
  #L4000b2.  v0.`n.b.a.t.p.c` @type ^`n.b.a.g` := v2 @kind object;
  #L4000b6.  return @kind void;
  #L4000b8.  v1:= new `java.lang.IllegalArgumentException`;
  #L4000bc.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L4000c2.  throw v1;
}
procedure `n.b.a.t.p` `a`(`n.b.a.d` v4 @kind object, `n.b.a.g` v5 @kind object) @signature `Ln/b/a/t/p;.a:(Ln/b/a/d;Ln/b/a/g;)Ln/b/a/t/p;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40001c.  v0:= constclass @type ^`n.b.a.t.p` @kind object;
  #L400020.  @monitorenter v0
  #L400022.  v1:= `@@n.b.a.t.p.d` @type ^`java.util.HashMap` @kind object;
  #L400026.  v2:= 0I;
  #L400028.  if v1 != 0 then goto L40003e;
  #L40002c.  v1:= new `java.util.HashMap`;
  #L400030.  v3:= 7I;
  #L400032.  call `<init>`(v1, v3) @signature `Ljava/util/HashMap;.<init>:(I)V` @kind direct;
  #L400038.  `@@n.b.a.t.p.d` @type ^`java.util.HashMap` := v1 @kind object;
  #L40003c.  goto L400062;
  #L40003e.  v1:= `@@n.b.a.t.p.d` @type ^`java.util.HashMap` @kind object;
  #L400042.  call temp:= `get`(v1, v4) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L400048.  v1:= temp @kind object;
  #L40004a.  v1:= (`n.b.a.t.p`) v1 @kind object;
  #L40004e.  if v1 == 0 then goto L400060;
  #L400052.  call temp:= `a`(v1) @signature `Ln/b/a/t/p;.a:()Ln/b/a/g;` @kind virtual;
  #L400058.  v3:= temp @kind object;
  #L40005a.  if v3 == v5 then goto L400060;
  #L40005e.  goto L400062;
  #L400060.  v2:= v1 @kind object;
  #L400062.  if v2 != 0 then goto L40007a;
  #L400066.  v2:= new `n.b.a.t.p`;
  #L40006a.  call `<init>`(v2, v4, v5) @signature `Ln/b/a/t/p;.<init>:(Ln/b/a/d;Ln/b/a/g;)V` @kind direct;
  #L400070.  v5:= `@@n.b.a.t.p.d` @type ^`java.util.HashMap` @kind object;
  #L400074.  call temp:= `put`(v5, v4, v2) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L40007a.  @monitorexit v0
  #L40007c.  return v2 @kind object;
  #L40007e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L400080.  @monitorexit v0
  #L400082.  throw v4;
  catch `java.lang.Throwable` @[L400022..L40007a] goto L40007e;
}
procedure `java.lang.UnsupportedOperationException` `j`(`n.b.a.t.p` v3 @kind this) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3ffe7c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3ffe80.  v1:= new `java.lang.StringBuilder`;
  #L3ffe84.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ffe8a.  v2:= v3.`n.b.a.t.p.b` @type ^`n.b.a.d` @kind object;
  #L3ffe8e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ffe94.  v2:= " field is unsupported" @kind object;
  #L3ffe98.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ffe9e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ffea4.  v1:= temp @kind object;
  #L3ffea6.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ffeac.  return v0 @kind object;
}
procedure `int` `a`(`n.b.a.t.p` v0 @kind this, `long` v1 ) @signature `Ln/b/a/t/p;.a:(J)I` @AccessFlag PUBLIC {
    temp;

  #L3ffd64.  call temp:= `j`(v0) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @kind direct;
  #L3ffd6a.  v1:= temp @kind object;
  #L3ffd6c.  throw v1;
}
procedure `int` `a`(`n.b.a.t.p` v0 @kind this, `java.util.Locale` v1 @kind object) @signature `Ln/b/a/t/p;.a:(Ljava/util/Locale;)I` @AccessFlag PUBLIC {
    temp;

  #L3ffd80.  call temp:= `j`(v0) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @kind direct;
  #L3ffd86.  v1:= temp @kind object;
  #L3ffd88.  throw v1;
}
procedure `long` `a`(`n.b.a.t.p` v1 @kind this, `long` v2 , `int` v4 ) @signature `Ln/b/a/t/p;.a:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ffec0.  call temp:= `a`(v1) @signature `Ln/b/a/t/p;.a:()Ln/b/a/g;` @kind virtual;
  #L3ffec6.  v0:= temp @kind object;
  #L3ffec8.  call temp:= `a`(v0, v2, v4) @signature `Ln/b/a/g;.a:(JI)J` @kind virtual;
  #L3ffece.  v2:= temp @kind wide;
  #L3ffed0.  return v2 @kind wide;
}
procedure `long` `a`(`n.b.a.t.p` v0 @kind this, `long` v1 , `java.lang.String` v3 @kind object, `java.util.Locale` v4 @kind object) @signature `Ln/b/a/t/p;.a:(JLjava/lang/String;Ljava/util/Locale;)J` @AccessFlag PUBLIC {
    temp;

  #L3fffa8.  call temp:= `j`(v0) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @kind direct;
  #L3fffae.  v1:= temp @kind object;
  #L3fffb0.  throw v1;
}
procedure `java.lang.String` `a`(`n.b.a.t.p` v0 @kind this, `int` v1 , `java.util.Locale` v2 @kind object) @signature `Ln/b/a/t/p;.a:(ILjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3ffdd4.  call temp:= `j`(v0) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @kind direct;
  #L3ffdda.  v1:= temp @kind object;
  #L3ffddc.  throw v1;
}
procedure `java.lang.String` `a`(`n.b.a.t.p` v0 @kind this, `long` v1 , `java.util.Locale` v3 @kind object) @signature `Ln/b/a/t/p;.a:(JLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3ffdf0.  call temp:= `j`(v0) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @kind direct;
  #L3ffdf6.  v1:= temp @kind object;
  #L3ffdf8.  throw v1;
}
procedure `n.b.a.g` `a`(`n.b.a.t.p` v1 @kind this) @signature `Ln/b/a/t/p;.a:()Ln/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fffdc.  v0:= v1.`n.b.a.t.p.c` @type ^`n.b.a.g` @kind object;
  #L3fffe0.  return v0 @kind object;
}
procedure `long` `b`(`n.b.a.t.p` v0 @kind this, `long` v1 , `int` v3 ) @signature `Ln/b/a/t/p;.b:(JI)J` @AccessFlag PUBLIC {
    temp;

  #L3fff8c.  call temp:= `j`(v0) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @kind direct;
  #L3fff92.  v1:= temp @kind object;
  #L3fff94.  throw v1;
}
procedure `java.lang.String` `b`(`n.b.a.t.p` v0 @kind this, `int` v1 , `java.util.Locale` v2 @kind object) @signature `Ln/b/a/t/p;.b:(ILjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3ffe0c.  call temp:= `j`(v0) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @kind direct;
  #L3ffe12.  v1:= temp @kind object;
  #L3ffe14.  throw v1;
}
procedure `java.lang.String` `b`(`n.b.a.t.p` v0 @kind this, `long` v1 , `java.util.Locale` v3 @kind object) @signature `Ln/b/a/t/p;.b:(JLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3ffe28.  call temp:= `j`(v0) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @kind direct;
  #L3ffe2e.  v1:= temp @kind object;
  #L3ffe30.  throw v1;
}
procedure `n.b.a.g` `b`(`n.b.a.t.p` v1 @kind this) @signature `Ln/b/a/t/p;.b:()Ln/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ffff4.  v0:= 0I;
  #L3ffff6.  return v0 @kind object;
}
procedure `boolean` `b`(`n.b.a.t.p` v0 @kind this, `long` v1 ) @signature `Ln/b/a/t/p;.b:(J)Z` @AccessFlag PUBLIC {
    temp;

  #L3ffd20.  call temp:= `j`(v0) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @kind direct;
  #L3ffd26.  v1:= temp @kind object;
  #L3ffd28.  throw v1;
}
procedure `int` `c`(`n.b.a.t.p` v1 @kind this) @signature `Ln/b/a/t/p;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ffd9c.  call temp:= `j`(v1) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @kind direct;
  #L3ffda2.  v0:= temp @kind object;
  #L3ffda4.  throw v0;
}
procedure `long` `c`(`n.b.a.t.p` v0 @kind this, `long` v1 ) @signature `Ln/b/a/t/p;.c:(J)J` @AccessFlag PUBLIC {
    temp;

  #L3ffee4.  call temp:= `j`(v0) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @kind direct;
  #L3ffeea.  v1:= temp @kind object;
  #L3ffeec.  throw v1;
}
procedure `int` `d`(`n.b.a.t.p` v1 @kind this) @signature `Ln/b/a/t/p;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ffdb8.  call temp:= `j`(v1) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @kind direct;
  #L3ffdbe.  v0:= temp @kind object;
  #L3ffdc0.  throw v0;
}
procedure `long` `d`(`n.b.a.t.p` v0 @kind this, `long` v1 ) @signature `Ln/b/a/t/p;.d:(J)J` @AccessFlag PUBLIC {
    temp;

  #L3fff00.  call temp:= `j`(v0) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @kind direct;
  #L3fff06.  v1:= temp @kind object;
  #L3fff08.  throw v1;
}
procedure `long` `e`(`n.b.a.t.p` v0 @kind this, `long` v1 ) @signature `Ln/b/a/t/p;.e:(J)J` @AccessFlag PUBLIC {
    temp;

  #L3fff1c.  call temp:= `j`(v0) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @kind direct;
  #L3fff22.  v1:= temp @kind object;
  #L3fff24.  throw v1;
}
procedure `java.lang.String` `e`(`n.b.a.t.p` v1 @kind this) @signature `Ln/b/a/t/p;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ffe44.  v0:= v1.`n.b.a.t.p.b` @type ^`n.b.a.d` @kind object;
  #L3ffe48.  call temp:= `b`(v0) @signature `Ln/b/a/d;.b:()Ljava/lang/String;` @kind virtual;
  #L3ffe4e.  v0:= temp @kind object;
  #L3ffe50.  return v0 @kind object;
}
procedure `long` `f`(`n.b.a.t.p` v0 @kind this, `long` v1 ) @signature `Ln/b/a/t/p;.f:(J)J` @AccessFlag PUBLIC {
    temp;

  #L3fff38.  call temp:= `j`(v0) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @kind direct;
  #L3fff3e.  v1:= temp @kind object;
  #L3fff40.  throw v1;
}
procedure `n.b.a.g` `f`(`n.b.a.t.p` v1 @kind this) @signature `Ln/b/a/t/p;.f:()Ln/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400008.  v0:= 0I;
  #L40000a.  return v0 @kind object;
}
procedure `long` `g`(`n.b.a.t.p` v0 @kind this, `long` v1 ) @signature `Ln/b/a/t/p;.g:(J)J` @AccessFlag PUBLIC {
    temp;

  #L3fff54.  call temp:= `j`(v0) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @kind direct;
  #L3fff5a.  v1:= temp @kind object;
  #L3fff5c.  throw v1;
}
procedure `n.b.a.d` `g`(`n.b.a.t.p` v1 @kind this) @signature `Ln/b/a/t/p;.g:()Ln/b/a/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fffc4.  v0:= v1.`n.b.a.t.p.b` @type ^`n.b.a.d` @kind object;
  #L3fffc8.  return v0 @kind object;
}
procedure `long` `h`(`n.b.a.t.p` v0 @kind this, `long` v1 ) @signature `Ln/b/a/t/p;.h:(J)J` @AccessFlag PUBLIC {
    temp;

  #L3fff70.  call temp:= `j`(v0) @signature `Ln/b/a/t/p;.j:()Ljava/lang/UnsupportedOperationException;` @kind direct;
  #L3fff76.  v1:= temp @kind object;
  #L3fff78.  throw v1;
}
procedure `boolean` `h`(`n.b.a.t.p` v1 @kind this) @signature `Ln/b/a/t/p;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ffd3c.  v0:= 0I;
  #L3ffd3e.  return v0;
}
procedure `boolean` `i`(`n.b.a.t.p` v1 @kind this) @signature `Ln/b/a/t/p;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ffd50.  v0:= 0I;
  #L3ffd52.  return v0;
}
procedure `java.lang.String` `toString`(`n.b.a.t.p` v1 @kind this) @signature `Ln/b/a/t/p;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ffe64.  v0:= "UnsupportedDateTimeField" @kind object;
  #L3ffe68.  return v0 @kind object;
}
