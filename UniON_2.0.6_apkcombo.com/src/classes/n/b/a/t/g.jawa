record `n.b.a.t.g` @kind class @AccessFlag PUBLIC {
}
procedure `int` `a`(`int` v3 , `int` v4 ) @signature `Ln/b/a/t/g;.a:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3fecc4.  v0:= v3 + v4 @kind int;
  #L3fecc8.  v1:= v3 ^~ v0 @kind int;
  #L3feccc.  if v1 >= 0 then goto L3fed18;
  #L3fecd0.  v1:= v3 ^~ v4 @kind int;
  #L3fecd4.  if v1 >= 0 then goto L3fecda;
  #L3fecd8.  goto L3fed18;
  #L3fecda.  v0:= new `java.lang.ArithmeticException`;
  #L3fecde.  v1:= new `java.lang.StringBuilder`;
  #L3fece2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fece8.  v2:= "The calculation caused an overflow: " @kind object;
  #L3fecec.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fecf2.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fecf8.  v3:= " + " @kind object;
  #L3fecfc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fed02.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fed08.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fed0e.  v3:= temp @kind object;
  #L3fed10.  call `<init>`(v0, v3) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fed16.  throw v0;
  #L3fed18.  return v0;
}
procedure `int` `a`(`long` v3 ) @signature `Ln/b/a/t/g;.a:(J)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3fed2c.  v0:= -2147483648L;
  #L3fed32.  v2:= lcmp(v0, v3);
  #L3fed36.  if v2 > 0 then goto L3fed4c;
  #L3fed3a.  v0:= 2147483647L;
  #L3fed40.  v2:= lcmp(v3, v0);
  #L3fed44.  if v2 > 0 then goto L3fed4c;
  #L3fed48.  v4:= (`int`) v3 @kind l2i;
  #L3fed4a.  return v4;
  #L3fed4c.  v0:= new `java.lang.ArithmeticException`;
  #L3fed50.  v1:= new `java.lang.StringBuilder`;
  #L3fed54.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fed5a.  v2:= "Value cannot fit in an int: " @kind object;
  #L3fed5e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fed64.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fed6a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fed70.  v3:= temp @kind object;
  #L3fed72.  call `<init>`(v0, v3) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fed78.  throw v0;
}
procedure `long` `a`(`long` v7 , `int` v9 ) @signature `Ln/b/a/t/g;.a:(JI)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3fee00.  v0:= -1I;
  #L3fee02.  v1:= " * " @kind object;
  #L3fee06.  v2:= "Multiplication overflows a long: " @kind object;
  #L3fee0a.  if v9 == v0 then goto L3fee6a;
  #L3fee0e.  if v9 == 0 then goto L3fee64;
  #L3fee12.  v0:= 1I;
  #L3fee14.  if v9 == v0 then goto L3fee62;
  #L3fee18.  v3:= (`long`) v9 @kind i2l;
  #L3fee1a.  v5:= v7 * v3 @kind long;
  #L3fee1e.  v3:= v5 / v3 @kind long;
  #L3fee22.  v0:= lcmp(v3, v7);
  #L3fee26.  if v0 != 0 then goto L3fee2c;
  #L3fee2a.  return v5 @kind wide;
  #L3fee2c.  v0:= new `java.lang.ArithmeticException`;
  #L3fee30.  v3:= new `java.lang.StringBuilder`;
  #L3fee34.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fee3a.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fee40.  call temp:= `append`(v3, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fee46.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fee4c.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fee52.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fee58.  v7:= temp @kind object;
  #L3fee5a.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fee60.  throw v0;
  #L3fee62.  return v7 @kind wide;
  #L3fee64.  v7:= 0L;
  #L3fee68.  return v7 @kind wide;
  #L3fee6a.  v3:= -9223372036854775808L;
  #L3fee6e.  v0:= lcmp(v7, v3);
  #L3fee72.  if v0 == 0 then goto L3fee7a;
  #L3fee76.  v7:= -v7 @kind long;
  #L3fee78.  return v7 @kind wide;
  #L3fee7a.  v0:= new `java.lang.ArithmeticException`;
  #L3fee7e.  v3:= new `java.lang.StringBuilder`;
  #L3fee82.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fee88.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fee8e.  call temp:= `append`(v3, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fee94.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fee9a.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3feea0.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3feea6.  v7:= temp @kind object;
  #L3feea8.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3feeae.  throw v0;
}
procedure `long` `a`(`long` v7 , `long` v9 ) @signature `Ln/b/a/t/g;.a:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3fed8c.  v0:= v7 + v9 @kind long;
  #L3fed90.  v2:= v7 ^~ v0 @kind long;
  #L3fed94.  v4:= 0L;
  #L3fed98.  v6:= lcmp(v2, v4);
  #L3fed9c.  if v6 >= 0 then goto L3fedec;
  #L3feda0.  v2:= v7 ^~ v9 @kind long;
  #L3feda4.  v6:= lcmp(v2, v4);
  #L3feda8.  if v6 >= 0 then goto L3fedae;
  #L3fedac.  goto L3fedec;
  #L3fedae.  v0:= new `java.lang.ArithmeticException`;
  #L3fedb2.  v1:= new `java.lang.StringBuilder`;
  #L3fedb6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fedbc.  v2:= "The calculation caused an overflow: " @kind object;
  #L3fedc0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fedc6.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fedcc.  v7:= " + " @kind object;
  #L3fedd0.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fedd6.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3feddc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fede2.  v7:= temp @kind object;
  #L3fede4.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fedea.  throw v0;
  #L3fedec.  return v0 @kind wide;
}
procedure `void` `a`(`n.b.a.c` v1 @kind object, `int` v2 , `int` v3 , `int` v4 ) @signature `Ln/b/a/t/g;.a:(Ln/b/a/c;III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3fef78.  if v2 < v3 then goto L3fef82;
  #L3fef7c.  if v2 > v4 then goto L3fef82;
  #L3fef80.  return @kind void;
  #L3fef82.  v0:= new `n.b.a.i`;
  #L3fef86.  call temp:= `g`(v1) @signature `Ln/b/a/c;.g:()Ln/b/a/d;` @kind virtual;
  #L3fef8c.  v1:= temp @kind object;
  #L3fef8e.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fef94.  v2:= temp @kind object;
  #L3fef96.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fef9c.  v3:= temp @kind object;
  #L3fef9e.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fefa4.  v4:= temp @kind object;
  #L3fefa6.  call `<init>`(v0, v1, v2, v3, v4) @signature `Ln/b/a/i;.<init>:(Ln/b/a/d;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V` @kind direct;
  #L3fefac.  throw v0;
}
procedure `boolean` `a`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Ln/b/a/t/g;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3fec94.  if v0 != v1 then goto L3fec9c;
  #L3fec98.  v0:= 1I;
  #L3fec9a.  return v0;
  #L3fec9c.  if v0 == 0 then goto L3fecb0;
  #L3feca0.  if v1 != 0 then goto L3feca6;
  #L3feca4.  goto L3fecb0;
  #L3feca6.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3fecac.  v0:= temp;
  #L3fecae.  return v0;
  #L3fecb0.  v0:= 0I;
  #L3fecb2.  return v0;
}
procedure `long` `b`(`long` v7 , `long` v9 ) @signature `Ln/b/a/t/g;.b:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3feec0.  v0:= 1L;
  #L3feec4.  v2:= lcmp(v9, v0);
  #L3feec8.  if v2 != 0 then goto L3feece;
  #L3feecc.  return v7 @kind wide;
  #L3feece.  v2:= lcmp(v7, v0);
  #L3feed2.  if v2 != 0 then goto L3feed8;
  #L3feed6.  return v9 @kind wide;
  #L3feed8.  v0:= 0L;
  #L3feedc.  v2:= lcmp(v7, v0);
  #L3feee0.  if v2 == 0 then goto L3fef66;
  #L3feee4.  v2:= lcmp(v9, v0);
  #L3feee8.  if v2 != 0 then goto L3feeee;
  #L3feeec.  goto L3fef66;
  #L3feeee.  v0:= v7 * v9 @kind long;
  #L3feef2.  v2:= v0 / v9 @kind long;
  #L3feef6.  v4:= lcmp(v2, v7);
  #L3feefa.  if v4 != 0 then goto L3fef28;
  #L3feefe.  v2:= -1L;
  #L3fef02.  v4:= -9223372036854775808L;
  #L3fef06.  v6:= lcmp(v7, v4);
  #L3fef0a.  if v6 != 0 then goto L3fef16;
  #L3fef0e.  v6:= lcmp(v9, v2);
  #L3fef12.  if v6 == 0 then goto L3fef28;
  #L3fef16.  v6:= lcmp(v9, v4);
  #L3fef1a.  if v6 != 0 then goto L3fef26;
  #L3fef1e.  v4:= lcmp(v7, v2);
  #L3fef22.  if v4 == 0 then goto L3fef28;
  #L3fef26.  return v0 @kind wide;
  #L3fef28.  v0:= new `java.lang.ArithmeticException`;
  #L3fef2c.  v1:= new `java.lang.StringBuilder`;
  #L3fef30.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fef36.  v2:= "Multiplication overflows a long: " @kind object;
  #L3fef3a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fef40.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fef46.  v7:= " * " @kind object;
  #L3fef4a.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fef50.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fef56.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fef5c.  v7:= temp @kind object;
  #L3fef5e.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fef64.  throw v0;
  #L3fef66.  return v0 @kind wide;
}
