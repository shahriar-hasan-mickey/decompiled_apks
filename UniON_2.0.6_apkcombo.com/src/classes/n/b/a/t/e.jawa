record `n.b.a.t.e` @kind class @AccessFlag PUBLIC extends `n.b.a.t.c` @kind class {
  `n.b.a.g` `n.b.a.t.e.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.b.a.t.e` v0 @kind this, `n.b.a.g` v1 @kind object, `n.b.a.h` v2 @kind object) @signature `Ln/b/a/t/e;.<init>:(Ln/b/a/g;Ln/b/a/h;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3fe9c8.  call `<init>`(v0, v2) @signature `Ln/b/a/t/c;.<init>:(Ln/b/a/h;)V` @kind direct;
  #L3fe9ce.  if v1 == 0 then goto L3fe9f4;
  #L3fe9d2.  call temp:= `k`(v1) @signature `Ln/b/a/g;.k:()Z` @kind virtual;
  #L3fe9d8.  v2:= temp;
  #L3fe9da.  if v2 == 0 then goto L3fe9e4;
  #L3fe9de.  v0.`n.b.a.t.e.c` @type ^`n.b.a.g` := v1 @kind object;
  #L3fe9e2.  return @kind void;
  #L3fe9e4.  v1:= new `java.lang.IllegalArgumentException`;
  #L3fe9e8.  v2:= "The field must be supported" @kind object;
  #L3fe9ec.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fe9f2.  throw v1;
  #L3fe9f4.  v1:= new `java.lang.IllegalArgumentException`;
  #L3fe9f8.  v2:= "The field must not be null" @kind object;
  #L3fe9fc.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fea02.  throw v1;
}
procedure `boolean` `h`(`n.b.a.t.e` v1 @kind this) @signature `Ln/b/a/t/e;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe990.  v0:= v1.`n.b.a.t.e.c` @type ^`n.b.a.g` @kind object;
  #L3fe994.  call temp:= `h`(v0) @signature `Ln/b/a/g;.h:()Z` @kind virtual;
  #L3fe99a.  v0:= temp;
  #L3fe99c.  return v0;
}
procedure `n.b.a.g` `m`(`n.b.a.t.e` v1 @kind this) @signature `Ln/b/a/t/e;.m:()Ln/b/a/g;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3fe9b0.  v0:= v1.`n.b.a.t.e.c` @type ^`n.b.a.g` @kind object;
  #L3fe9b4.  return v0 @kind object;
}
