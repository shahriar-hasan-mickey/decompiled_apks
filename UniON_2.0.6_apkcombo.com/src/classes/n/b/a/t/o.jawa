record `n.b.a.t.o` @kind class @AccessFlag PUBLIC extends `n.b.a.t.e` @kind class {
  `int` `n.b.a.t.o.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.b.a.t.o` v0 @kind this, `n.b.a.g` v1 @kind object, `n.b.a.h` v2 @kind object, `int` v3 ) @signature `Ln/b/a/t/o;.<init>:(Ln/b/a/g;Ln/b/a/h;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ffce8.  call `<init>`(v0, v1, v2) @signature `Ln/b/a/t/e;.<init>:(Ln/b/a/g;Ln/b/a/h;)V` @kind direct;
  #L3ffcee.  if v3 == 0 then goto L3ffcfe;
  #L3ffcf2.  v1:= 1I;
  #L3ffcf4.  if v3 == v1 then goto L3ffcfe;
  #L3ffcf8.  v0.`n.b.a.t.o.d` @type ^`int` := v3;
  #L3ffcfc.  return @kind void;
  #L3ffcfe.  v1:= new `java.lang.IllegalArgumentException`;
  #L3ffd02.  v2:= "The scalar must not be 0 or 1" @kind object;
  #L3ffd06.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ffd0c.  throw v1;
}
procedure `long` `a`(`n.b.a.t.o` v4 @kind this, `long` v5 , `int` v7 ) @signature `Ln/b/a/t/o;.a:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ffc5c.  v0:= (`long`) v7 @kind i2l;
  #L3ffc5e.  v7:= v4.`n.b.a.t.o.d` @type ^`int`;
  #L3ffc62.  v2:= (`long`) v7 @kind i2l;
  #L3ffc64.  v0:= v0 * v2 @kind long;
  #L3ffc68.  call temp:= `m`(v4) @signature `Ln/b/a/t/e;.m:()Ln/b/a/g;` @kind virtual;
  #L3ffc6e.  v7:= temp @kind object;
  #L3ffc70.  call temp:= `a`(v7, v5, v0) @signature `Ln/b/a/g;.a:(JJ)J` @kind virtual;
  #L3ffc76.  v5:= temp @kind wide;
  #L3ffc78.  return v5 @kind wide;
}
procedure `long` `a`(`n.b.a.t.o` v1 @kind this, `long` v2 , `long` v4 ) @signature `Ln/b/a/t/o;.a:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ffc8c.  v0:= v1.`n.b.a.t.o.d` @type ^`int`;
  #L3ffc90.  call temp:= `a`(v4, v0) @signature `Ln/b/a/t/g;.a:(JI)J` @kind static;
  #L3ffc96.  v4:= temp @kind wide;
  #L3ffc98.  call temp:= `m`(v1) @signature `Ln/b/a/t/e;.m:()Ln/b/a/g;` @kind virtual;
  #L3ffc9e.  v0:= temp @kind object;
  #L3ffca0.  call temp:= `a`(v0, v2, v4) @signature `Ln/b/a/g;.a:(JJ)J` @kind virtual;
  #L3ffca6.  v2:= temp @kind wide;
  #L3ffca8.  return v2 @kind wide;
}
procedure `long` `e`(`n.b.a.t.o` v4 @kind this) @signature `Ln/b/a/t/o;.e:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ffcbc.  call temp:= `m`(v4) @signature `Ln/b/a/t/e;.m:()Ln/b/a/g;` @kind virtual;
  #L3ffcc2.  v0:= temp @kind object;
  #L3ffcc4.  call temp:= `e`(v0) @signature `Ln/b/a/g;.e:()J` @kind virtual;
  #L3ffcca.  v0:= temp @kind wide;
  #L3ffccc.  v2:= v4.`n.b.a.t.o.d` @type ^`int`;
  #L3ffcd0.  v2:= (`long`) v2 @kind i2l;
  #L3ffcd2.  v0:= v0 * v2 @kind long;
  #L3ffcd6.  return v0 @kind wide;
}
procedure `boolean` `equals`(`n.b.a.t.o` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ln/b/a/t/o;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ffba8.  v0:= 1I;
  #L3ffbaa.  if v4 != v5 then goto L3ffbb0;
  #L3ffbae.  return v0;
  #L3ffbb0.  v1:= instanceof @variable v5 @type ^`n.b.a.t.o` @kind boolean;
  #L3ffbb4.  v2:= 0I;
  #L3ffbb6.  if v1 == 0 then goto L3ffc00;
  #L3ffbba.  v5:= (`n.b.a.t.o`) v5 @kind object;
  #L3ffbbe.  call temp:= `m`(v4) @signature `Ln/b/a/t/e;.m:()Ln/b/a/g;` @kind virtual;
  #L3ffbc4.  v1:= temp @kind object;
  #L3ffbc6.  call temp:= `m`(v5) @signature `Ln/b/a/t/e;.m:()Ln/b/a/g;` @kind virtual;
  #L3ffbcc.  v3:= temp @kind object;
  #L3ffbce.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ffbd4.  v1:= temp;
  #L3ffbd6.  if v1 == 0 then goto L3ffbfc;
  #L3ffbda.  call temp:= `b`(v4) @signature `Ln/b/a/t/c;.b:()Ln/b/a/h;` @kind virtual;
  #L3ffbe0.  v1:= temp @kind object;
  #L3ffbe2.  call temp:= `b`(v5) @signature `Ln/b/a/t/c;.b:()Ln/b/a/h;` @kind virtual;
  #L3ffbe8.  v3:= temp @kind object;
  #L3ffbea.  if v1 != v3 then goto L3ffbfc;
  #L3ffbee.  v1:= v4.`n.b.a.t.o.d` @type ^`int`;
  #L3ffbf2.  v5:= v5.`n.b.a.t.o.d` @type ^`int`;
  #L3ffbf6.  if v1 != v5 then goto L3ffbfc;
  #L3ffbfa.  goto L3ffbfe;
  #L3ffbfc.  v0:= 0I;
  #L3ffbfe.  return v0;
  #L3ffc00.  return v2;
}
procedure `int` `hashCode`(`n.b.a.t.o` v4 @kind this) @signature `Ln/b/a/t/o;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ffc14.  v0:= v4.`n.b.a.t.o.d` @type ^`int`;
  #L3ffc18.  v0:= (`long`) v0 @kind i2l;
  #L3ffc1a.  v2:= 32I;
  #L3ffc1e.  v2:= v0 ^>> v2 @kind long;
  #L3ffc22.  v0:= v0 ^~ v2 @kind long;
  #L3ffc24.  v1:= (`int`) v0 @kind l2i;
  #L3ffc26.  call temp:= `b`(v4) @signature `Ln/b/a/t/c;.b:()Ln/b/a/h;` @kind virtual;
  #L3ffc2c.  v0:= temp @kind object;
  #L3ffc2e.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3ffc34.  v0:= temp;
  #L3ffc36.  v1:= v1 + v0 @kind int;
  #L3ffc38.  call temp:= `m`(v4) @signature `Ln/b/a/t/e;.m:()Ln/b/a/g;` @kind virtual;
  #L3ffc3e.  v0:= temp @kind object;
  #L3ffc40.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3ffc46.  v0:= temp;
  #L3ffc48.  v1:= v1 + v0 @kind int;
  #L3ffc4a.  return v1;
}
