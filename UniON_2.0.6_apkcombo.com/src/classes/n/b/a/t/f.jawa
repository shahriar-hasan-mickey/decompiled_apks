record `n.b.a.t.f` @kind class @AccessFlag PUBLIC extends `n.b.a.t.d` @kind class {
  `int` `n.b.a.t.f.c` @AccessFlag FINAL;
  `n.b.a.g` `n.b.a.t.f.d` @AccessFlag FINAL;
  `n.b.a.g` `n.b.a.t.f.e` @AccessFlag FINAL;
  `int` `n.b.a.t.f.f` @AccessFlag PRIVATE_FINAL;
  `int` `n.b.a.t.f.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.b.a.t.f` v1 @kind this, `n.b.a.c` v2 @kind object, `n.b.a.d` v3 @kind object, `int` v4 ) @signature `Ln/b/a/t/f;.<init>:(Ln/b/a/c;Ln/b/a/d;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3febd8.  call temp:= `f`(v2) @signature `Ln/b/a/c;.f:()Ln/b/a/g;` @kind virtual;
  #L3febde.  v0:= temp @kind object;
  #L3febe0.  call `<init>`(v1, v2, v0, v3, v4) @signature `Ln/b/a/t/f;.<init>:(Ln/b/a/c;Ln/b/a/g;Ln/b/a/d;I)V` @kind direct;
  #L3febe6.  return @kind void;
}
procedure `void` `<init>`(`n.b.a.t.f` v2 @kind this, `n.b.a.c` v3 @kind object, `n.b.a.g` v4 @kind object, `n.b.a.d` v5 @kind object, `int` v6 ) @signature `Ln/b/a/t/f;.<init>:(Ln/b/a/c;Ln/b/a/g;Ln/b/a/d;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3febf8.  call `<init>`(v2, v3, v5) @signature `Ln/b/a/t/d;.<init>:(Ln/b/a/c;Ln/b/a/d;)V` @kind direct;
  #L3febfe.  v0:= 2I;
  #L3fec00.  if v6 < v0 then goto L3fec74;
  #L3fec04.  call temp:= `a`(v3) @signature `Ln/b/a/c;.a:()Ln/b/a/g;` @kind virtual;
  #L3fec0a.  v0:= temp @kind object;
  #L3fec0c.  if v0 != 0 then goto L3fec18;
  #L3fec10.  v5:= 0I;
  #L3fec12.  v2.`n.b.a.t.f.d` @type ^`n.b.a.g` := v5 @kind object;
  #L3fec16.  goto L3fec2e;
  #L3fec18.  v1:= new `n.b.a.t.o`;
  #L3fec1c.  call temp:= `a`(v5) @signature `Ln/b/a/d;.a:()Ln/b/a/h;` @kind virtual;
  #L3fec22.  v5:= temp @kind object;
  #L3fec24.  call `<init>`(v1, v0, v5, v6) @signature `Ln/b/a/t/o;.<init>:(Ln/b/a/g;Ln/b/a/h;I)V` @kind direct;
  #L3fec2a.  v2.`n.b.a.t.f.d` @type ^`n.b.a.g` := v1 @kind object;
  #L3fec2e.  v2.`n.b.a.t.f.e` @type ^`n.b.a.g` := v4 @kind object;
  #L3fec32.  v2.`n.b.a.t.f.c` @type ^`int` := v6;
  #L3fec36.  call temp:= `d`(v3) @signature `Ln/b/a/c;.d:()I` @kind virtual;
  #L3fec3c.  v4:= temp;
  #L3fec3e.  if v4 < 0 then goto L3fec46;
  #L3fec42.  v4:= v4 / v6 @kind int;
  #L3fec44.  goto L3fec50;
  #L3fec46.  v4:= v4 + 1;
  #L3fec4a.  v4:= v4 / v6 @kind int;
  #L3fec4c.  v4:= v4 + -1;
  #L3fec50.  call temp:= `c`(v3) @signature `Ln/b/a/c;.c:()I` @kind virtual;
  #L3fec56.  v3:= temp;
  #L3fec58.  if v3 < 0 then goto L3fec60;
  #L3fec5c.  v3:= v3 / v6 @kind int;
  #L3fec5e.  goto L3fec6a;
  #L3fec60.  v3:= v3 + 1;
  #L3fec64.  v3:= v3 / v6 @kind int;
  #L3fec66.  v3:= v3 + -1;
  #L3fec6a.  v2.`n.b.a.t.f.f` @type ^`int` := v4;
  #L3fec6e.  v2.`n.b.a.t.f.g` @type ^`int` := v3;
  #L3fec72.  return @kind void;
  #L3fec74.  v3:= new `java.lang.IllegalArgumentException`;
  #L3fec78.  v4:= "The divisor must be at least 2" @kind object;
  #L3fec7c.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fec82.  throw v3;
}
procedure `int` `a`(`n.b.a.t.f` v2 @kind this, `int` v3 ) @signature `Ln/b/a/t/f;.a:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3fea80.  v0:= v2.`n.b.a.t.f.c` @type ^`int`;
  #L3fea84.  if v3 < 0 then goto L3fea8c;
  #L3fea88.  v3:= v3 %% v0 @kind int;
  #L3fea8a.  return v3;
  #L3fea8c.  v1:= v0 + -1;
  #L3fea90.  v3:= v3 + 1;
  #L3fea94.  v3:= v3 %% v0 @kind int;
  #L3fea96.  v1:= v1 + v3 @kind int;
  #L3fea98.  return v1;
}
procedure `int` `a`(`n.b.a.t.f` v1 @kind this, `long` v2 ) @signature `Ln/b/a/t/f;.a:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fea14.  call temp:= `j`(v1) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3fea1a.  v0:= temp @kind object;
  #L3fea1c.  call temp:= `a`(v0, v2) @signature `Ln/b/a/c;.a:(J)I` @kind virtual;
  #L3fea22.  v2:= temp;
  #L3fea24.  if v2 < 0 then goto L3fea30;
  #L3fea28.  v3:= v1.`n.b.a.t.f.c` @type ^`int`;
  #L3fea2c.  v2:= v2 / v3 @kind int;
  #L3fea2e.  return v2;
  #L3fea30.  v2:= v2 + 1;
  #L3fea34.  v3:= v1.`n.b.a.t.f.c` @type ^`int`;
  #L3fea38.  v2:= v2 / v3 @kind int;
  #L3fea3a.  v2:= v2 + -1;
  #L3fea3e.  return v2;
}
procedure `long` `a`(`n.b.a.t.f` v2 @kind this, `long` v3 , `int` v5 ) @signature `Ln/b/a/t/f;.a:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3feaac.  call temp:= `j`(v2) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3feab2.  v0:= temp @kind object;
  #L3feab4.  v1:= v2.`n.b.a.t.f.c` @type ^`int`;
  #L3feab8.  v5:= v5 * v1 @kind int;
  #L3feabc.  call temp:= `a`(v0, v3, v5) @signature `Ln/b/a/c;.a:(JI)J` @kind virtual;
  #L3feac2.  v3:= temp @kind wide;
  #L3feac4.  return v3 @kind wide;
}
procedure `n.b.a.g` `a`(`n.b.a.t.f` v1 @kind this) @signature `Ln/b/a/t/f;.a:()Ln/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3feb9c.  v0:= v1.`n.b.a.t.f.d` @type ^`n.b.a.g` @kind object;
  #L3feba0.  return v0 @kind object;
}
procedure `long` `b`(`n.b.a.t.f` v3 @kind this, `long` v4 , `int` v6 ) @signature `Ln/b/a/t/f;.b:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3feb48.  v0:= v3.`n.b.a.t.f.f` @type ^`int`;
  #L3feb4c.  v1:= v3.`n.b.a.t.f.g` @type ^`int`;
  #L3feb50.  call `a`(v3, v6, v0, v1) @signature `Ln/b/a/t/g;.a:(Ln/b/a/c;III)V` @kind static;
  #L3feb56.  call temp:= `j`(v3) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3feb5c.  v0:= temp @kind object;
  #L3feb5e.  call temp:= `a`(v0, v4) @signature `Ln/b/a/c;.a:(J)I` @kind virtual;
  #L3feb64.  v0:= temp;
  #L3feb66.  call temp:= `a`(v3, v0) @signature `Ln/b/a/t/f;.a:(I)I` @kind direct;
  #L3feb6c.  v0:= temp;
  #L3feb6e.  call temp:= `j`(v3) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3feb74.  v1:= temp @kind object;
  #L3feb76.  v2:= v3.`n.b.a.t.f.c` @type ^`int`;
  #L3feb7a.  v6:= v6 * v2 @kind int;
  #L3feb7e.  v6:= v6 + v0 @kind int;
  #L3feb80.  call temp:= `b`(v1, v4, v6) @signature `Ln/b/a/c;.b:(JI)J` @kind virtual;
  #L3feb86.  v4:= temp @kind wide;
  #L3feb88.  return v4 @kind wide;
}
procedure `int` `c`(`n.b.a.t.f` v1 @kind this) @signature `Ln/b/a/t/f;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fea50.  v0:= v1.`n.b.a.t.f.g` @type ^`int`;
  #L3fea54.  return v0;
}
procedure `long` `c`(`n.b.a.t.f` v2 @kind this, `long` v3 ) @signature `Ln/b/a/t/f;.c:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fead8.  call temp:= `j`(v2) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3feade.  v0:= temp @kind object;
  #L3feae0.  call temp:= `c`(v0, v3) @signature `Ln/b/a/c;.c:(J)J` @kind virtual;
  #L3feae6.  v0:= temp @kind wide;
  #L3feae8.  call temp:= `a`(v2, v0) @signature `Ln/b/a/t/f;.a:(J)I` @kind virtual;
  #L3feaee.  v0:= temp;
  #L3feaf0.  call temp:= `b`(v2, v3, v0) @signature `Ln/b/a/t/f;.b:(JI)J` @kind virtual;
  #L3feaf6.  v3:= temp @kind wide;
  #L3feaf8.  return v3 @kind wide;
}
procedure `int` `d`(`n.b.a.t.f` v1 @kind this) @signature `Ln/b/a/t/f;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fea68.  v0:= v1.`n.b.a.t.f.f` @type ^`int`;
  #L3fea6c.  return v0;
}
procedure `long` `e`(`n.b.a.t.f` v3 @kind this, `long` v4 ) @signature `Ln/b/a/t/f;.e:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3feb0c.  call temp:= `j`(v3) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3feb12.  v0:= temp @kind object;
  #L3feb14.  call temp:= `a`(v3, v4) @signature `Ln/b/a/t/f;.a:(J)I` @kind virtual;
  #L3feb1a.  v1:= temp;
  #L3feb1c.  v2:= v3.`n.b.a.t.f.c` @type ^`int`;
  #L3feb20.  v1:= v1 * v2 @kind int;
  #L3feb24.  call temp:= `b`(v0, v4, v1) @signature `Ln/b/a/c;.b:(JI)J` @kind virtual;
  #L3feb2a.  v4:= temp @kind wide;
  #L3feb2c.  call temp:= `e`(v0, v4) @signature `Ln/b/a/c;.e:(J)J` @kind virtual;
  #L3feb32.  v4:= temp @kind wide;
  #L3feb34.  return v4 @kind wide;
}
procedure `n.b.a.g` `f`(`n.b.a.t.f` v1 @kind this) @signature `Ln/b/a/t/f;.f:()Ln/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3febb4.  v0:= v1.`n.b.a.t.f.e` @type ^`n.b.a.g` @kind object;
  #L3febb8.  if v0 == 0 then goto L3febbe;
  #L3febbc.  return v0 @kind object;
  #L3febbe.  call temp:= `f`(v1) @signature `Ln/b/a/t/d;.f:()Ln/b/a/g;` @kind super;
  #L3febc4.  v0:= temp @kind object;
  #L3febc6.  return v0 @kind object;
}
