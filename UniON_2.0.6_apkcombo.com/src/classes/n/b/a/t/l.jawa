record `n.b.a.t.l` @kind class @AccessFlag PUBLIC_ABSTRACT extends `n.b.a.t.b` @kind class {
  `long` `n.b.a.t.l.b` @AccessFlag FINAL;
  `n.b.a.g` `n.b.a.t.l.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.b.a.t.l` v4 @kind this, `n.b.a.d` v5 @kind object, `n.b.a.g` v6 @kind object) @signature `Ln/b/a/t/l;.<init>:(Ln/b/a/d;Ln/b/a/g;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ff774.  call `<init>`(v4, v5) @signature `Ln/b/a/t/b;.<init>:(Ln/b/a/d;)V` @kind direct;
  #L3ff77a.  call temp:= `h`(v6) @signature `Ln/b/a/g;.h:()Z` @kind virtual;
  #L3ff780.  v5:= temp;
  #L3ff782.  if v5 == 0 then goto L3ff7b8;
  #L3ff786.  call temp:= `e`(v6) @signature `Ln/b/a/g;.e:()J` @kind virtual;
  #L3ff78c.  v0:= temp @kind wide;
  #L3ff78e.  v4.`n.b.a.t.l.b` @type ^`long` := v0 @kind wide;
  #L3ff792.  v0:= v4.`n.b.a.t.l.b` @type ^`long` @kind wide;
  #L3ff796.  v2:= 1L;
  #L3ff79a.  v5:= lcmp(v0, v2);
  #L3ff79e.  if v5 < 0 then goto L3ff7a8;
  #L3ff7a2.  v4.`n.b.a.t.l.c` @type ^`n.b.a.g` := v6 @kind object;
  #L3ff7a6.  return @kind void;
  #L3ff7a8.  v5:= new `java.lang.IllegalArgumentException`;
  #L3ff7ac.  v6:= "The unit milliseconds must be at least 1" @kind object;
  #L3ff7b0.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ff7b6.  throw v5;
  #L3ff7b8.  v5:= new `java.lang.IllegalArgumentException`;
  #L3ff7bc.  v6:= "Unit duration field must be precise" @kind object;
  #L3ff7c0.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ff7c6.  throw v5;
}
procedure `n.b.a.g` `a`(`n.b.a.t.l` v1 @kind this) @signature `Ln/b/a/t/l;.a:()Ln/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff75c.  v0:= v1.`n.b.a.t.l.c` @type ^`n.b.a.g` @kind object;
  #L3ff760.  return v0 @kind object;
}
procedure `long` `b`(`n.b.a.t.l` v4 @kind this, `long` v5 , `int` v7 ) @signature `Ln/b/a/t/l;.b:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ff71c.  call temp:= `d`(v4) @signature `Ln/b/a/t/l;.d:()I` @kind virtual;
  #L3ff722.  v0:= temp;
  #L3ff724.  call temp:= `d`(v4, v5, v7) @signature `Ln/b/a/t/l;.d:(JI)I` @kind virtual;
  #L3ff72a.  v1:= temp;
  #L3ff72c.  call `a`(v4, v7, v0, v1) @signature `Ln/b/a/t/g;.a:(Ln/b/a/c;III)V` @kind static;
  #L3ff732.  call temp:= `a`(v4, v5) @signature `Ln/b/a/c;.a:(J)I` @kind virtual;
  #L3ff738.  v0:= temp;
  #L3ff73a.  v7:= v7 - v0 @kind int;
  #L3ff73c.  v0:= (`long`) v7 @kind i2l;
  #L3ff73e.  v2:= v4.`n.b.a.t.l.b` @type ^`long` @kind wide;
  #L3ff742.  v0:= v0 * v2 @kind long;
  #L3ff746.  v5:= v5 + v0 @kind long;
  #L3ff748.  return v5 @kind wide;
}
procedure `long` `c`(`n.b.a.t.l` v4 @kind this, `long` v5 ) @signature `Ln/b/a/t/l;.c:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ff66c.  v0:= 0L;
  #L3ff670.  v2:= lcmp(v5, v0);
  #L3ff674.  if v2 < 0 then goto L3ff680;
  #L3ff678.  v0:= v4.`n.b.a.t.l.b` @type ^`long` @kind wide;
  #L3ff67c.  v5:= v5 %% v0 @kind long;
  #L3ff67e.  return v5 @kind wide;
  #L3ff680.  v0:= 1L;
  #L3ff684.  v5:= v5 + v0 @kind long;
  #L3ff686.  v2:= v4.`n.b.a.t.l.b` @type ^`long` @kind wide;
  #L3ff68a.  v5:= v5 %% v2 @kind long;
  #L3ff68c.  v5:= v5 + v2 @kind long;
  #L3ff68e.  v5:= v5 - v0 @kind long;
  #L3ff690.  return v5 @kind wide;
}
procedure `int` `d`(`n.b.a.t.l` v1 @kind this) @signature `Ln/b/a/t/l;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff640.  v0:= 0I;
  #L3ff642.  return v0;
}
procedure `int` `d`(`n.b.a.t.l` v0 @kind this, `long` v1 , `int` v3 ) @signature `Ln/b/a/t/l;.d:(JI)I` @AccessFlag PROTECTED {
    temp;

  #L3ff624.  call temp:= `i`(v0, v1) @signature `Ln/b/a/t/b;.i:(J)I` @kind virtual;
  #L3ff62a.  v1:= temp;
  #L3ff62c.  return v1;
}
procedure `long` `d`(`n.b.a.t.l` v4 @kind this, `long` v5 ) @signature `Ln/b/a/t/l;.d:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ff6a4.  v0:= 0L;
  #L3ff6a8.  v2:= lcmp(v5, v0);
  #L3ff6ac.  if v2 <= 0 then goto L3ff6c4;
  #L3ff6b0.  v0:= 1L;
  #L3ff6b4.  v5:= v5 - v0 @kind long;
  #L3ff6b6.  v0:= v4.`n.b.a.t.l.b` @type ^`long` @kind wide;
  #L3ff6ba.  v2:= v5 %% v0 @kind long;
  #L3ff6be.  v5:= v5 - v2 @kind long;
  #L3ff6c0.  v5:= v5 + v0 @kind long;
  #L3ff6c2.  return v5 @kind wide;
  #L3ff6c4.  v0:= v4.`n.b.a.t.l.b` @type ^`long` @kind wide;
  #L3ff6c8.  v0:= v5 %% v0 @kind long;
  #L3ff6cc.  v5:= v5 - v0 @kind long;
  #L3ff6ce.  return v5 @kind wide;
}
procedure `long` `e`(`n.b.a.t.l` v4 @kind this, `long` v5 ) @signature `Ln/b/a/t/l;.e:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ff6e0.  v0:= 0L;
  #L3ff6e4.  v2:= lcmp(v5, v0);
  #L3ff6e8.  if v2 < 0 then goto L3ff6f8;
  #L3ff6ec.  v0:= v4.`n.b.a.t.l.b` @type ^`long` @kind wide;
  #L3ff6f0.  v0:= v5 %% v0 @kind long;
  #L3ff6f4.  v5:= v5 - v0 @kind long;
  #L3ff6f6.  return v5 @kind wide;
  #L3ff6f8.  v0:= 1L;
  #L3ff6fc.  v5:= v5 + v0 @kind long;
  #L3ff6fe.  v0:= v4.`n.b.a.t.l.b` @type ^`long` @kind wide;
  #L3ff702.  v2:= v5 %% v0 @kind long;
  #L3ff706.  v5:= v5 - v2 @kind long;
  #L3ff708.  goto L3ff6f4;
}
procedure `boolean` `h`(`n.b.a.t.l` v1 @kind this) @signature `Ln/b/a/t/l;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff610.  v0:= 0I;
  #L3ff612.  return v0;
}
procedure `long` `j`(`n.b.a.t.l` v2 @kind this) @signature `Ln/b/a/t/l;.j:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3ff654.  v0:= v2.`n.b.a.t.l.b` @type ^`long` @kind wide;
  #L3ff658.  return v0 @kind wide;
}
