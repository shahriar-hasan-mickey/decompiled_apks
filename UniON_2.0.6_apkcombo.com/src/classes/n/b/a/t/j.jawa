record `n.b.a.t.j` @kind class @AccessFlag PUBLIC extends `n.b.a.t.d` @kind class {
  `int` `n.b.a.t.j.c` @AccessFlag PRIVATE_FINAL;
  `int` `n.b.a.t.j.d` @AccessFlag PRIVATE_FINAL;
  `int` `n.b.a.t.j.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.b.a.t.j` v7 @kind this, `n.b.a.c` v8 @kind object, `int` v9 ) @signature `Ln/b/a/t/j;.<init>:(Ln/b/a/c;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ff3fc.  if v8 != 0 then goto L3ff404;
  #L3ff400.  v0:= 0I;
  #L3ff402.  goto L3ff40c;
  #L3ff404.  call temp:= `g`(v8) @signature `Ln/b/a/c;.g:()Ln/b/a/d;` @kind virtual;
  #L3ff40a.  v0:= temp @kind object;
  #L3ff40c.  v3:= v0 @kind object;
  #L3ff40e.  v5:= -2147483648I;
  #L3ff412.  v6:= 2147483647I;
  #L3ff418.  v1:= v7 @kind object;
  #L3ff41a.  v2:= v8 @kind object;
  #L3ff41c.  v4:= v9;
  #L3ff41e.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Ln/b/a/t/j;.<init>:(Ln/b/a/c;Ln/b/a/d;III)V` @kind direct;
  #L3ff424.  return @kind void;
}
procedure `void` `<init>`(`n.b.a.t.j` v6 @kind this, `n.b.a.c` v7 @kind object, `n.b.a.d` v8 @kind object, `int` v9 ) @signature `Ln/b/a/t/j;.<init>:(Ln/b/a/c;Ln/b/a/d;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ff438.  v4:= -2147483648I;
  #L3ff43c.  v5:= 2147483647I;
  #L3ff442.  v0:= v6 @kind object;
  #L3ff444.  v1:= v7 @kind object;
  #L3ff446.  v2:= v8 @kind object;
  #L3ff448.  v3:= v9;
  #L3ff44a.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Ln/b/a/t/j;.<init>:(Ln/b/a/c;Ln/b/a/d;III)V` @kind direct;
  #L3ff450.  return @kind void;
}
procedure `void` `<init>`(`n.b.a.t.j` v0 @kind this, `n.b.a.c` v1 @kind object, `n.b.a.d` v2 @kind object, `int` v3 , `int` v4 , `int` v5 ) @signature `Ln/b/a/t/j;.<init>:(Ln/b/a/c;Ln/b/a/d;III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ff464.  call `<init>`(v0, v1, v2) @signature `Ln/b/a/t/d;.<init>:(Ln/b/a/c;Ln/b/a/d;)V` @kind direct;
  #L3ff46a.  if v3 == 0 then goto L3ff4b8;
  #L3ff46e.  v0.`n.b.a.t.j.c` @type ^`int` := v3;
  #L3ff472.  call temp:= `d`(v1) @signature `Ln/b/a/c;.d:()I` @kind virtual;
  #L3ff478.  v2:= temp;
  #L3ff47a.  v2:= v2 + v3 @kind int;
  #L3ff47c.  if v4 >= v2 then goto L3ff490;
  #L3ff480.  call temp:= `d`(v1) @signature `Ln/b/a/c;.d:()I` @kind virtual;
  #L3ff486.  v2:= temp;
  #L3ff488.  v2:= v2 + v3 @kind int;
  #L3ff48a.  v0.`n.b.a.t.j.d` @type ^`int` := v2;
  #L3ff48e.  goto L3ff494;
  #L3ff490.  v0.`n.b.a.t.j.d` @type ^`int` := v4;
  #L3ff494.  call temp:= `c`(v1) @signature `Ln/b/a/c;.c:()I` @kind virtual;
  #L3ff49a.  v2:= temp;
  #L3ff49c.  v2:= v2 + v3 @kind int;
  #L3ff49e.  if v5 <= v2 then goto L3ff4b2;
  #L3ff4a2.  call temp:= `c`(v1) @signature `Ln/b/a/c;.c:()I` @kind virtual;
  #L3ff4a8.  v1:= temp;
  #L3ff4aa.  v1:= v1 + v3 @kind int;
  #L3ff4ac.  v0.`n.b.a.t.j.e` @type ^`int` := v1;
  #L3ff4b0.  goto L3ff4b6;
  #L3ff4b2.  v0.`n.b.a.t.j.e` @type ^`int` := v5;
  #L3ff4b6.  return @kind void;
  #L3ff4b8.  v1:= new `java.lang.IllegalArgumentException`;
  #L3ff4bc.  v2:= "The offset cannot be zero" @kind object;
  #L3ff4c0.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ff4c6.  throw v1;
}
procedure `int` `a`(`n.b.a.t.j` v0 @kind this, `long` v1 ) @signature `Ln/b/a/t/j;.a:(J)I` @AccessFlag PUBLIC {
    temp;

  #L3ff250.  call temp:= `a`(v0, v1) @signature `Ln/b/a/t/d;.a:(J)I` @kind super;
  #L3ff256.  v1:= temp;
  #L3ff258.  v2:= v0.`n.b.a.t.j.c` @type ^`int`;
  #L3ff25c.  v1:= v1 + v2 @kind int;
  #L3ff25e.  return v1;
}
procedure `long` `a`(`n.b.a.t.j` v2 @kind this, `long` v3 , `int` v5 ) @signature `Ln/b/a/t/j;.a:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ff2a0.  call temp:= `a`(v2, v3, v5) @signature `Ln/b/a/t/b;.a:(JI)J` @kind super;
  #L3ff2a6.  v3:= temp @kind wide;
  #L3ff2a8.  call temp:= `a`(v2, v3) @signature `Ln/b/a/t/j;.a:(J)I` @kind virtual;
  #L3ff2ae.  v5:= temp;
  #L3ff2b0.  v0:= v2.`n.b.a.t.j.d` @type ^`int`;
  #L3ff2b4.  v1:= v2.`n.b.a.t.j.e` @type ^`int`;
  #L3ff2b8.  call `a`(v2, v5, v0, v1) @signature `Ln/b/a/t/g;.a:(Ln/b/a/c;III)V` @kind static;
  #L3ff2be.  return v3 @kind wide;
}
procedure `long` `b`(`n.b.a.t.j` v2 @kind this, `long` v3 , `int` v5 ) @signature `Ln/b/a/t/j;.b:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ff3a8.  v0:= v2.`n.b.a.t.j.d` @type ^`int`;
  #L3ff3ac.  v1:= v2.`n.b.a.t.j.e` @type ^`int`;
  #L3ff3b0.  call `a`(v2, v5, v0, v1) @signature `Ln/b/a/t/g;.a:(Ln/b/a/c;III)V` @kind static;
  #L3ff3b6.  v0:= v2.`n.b.a.t.j.c` @type ^`int`;
  #L3ff3ba.  v5:= v5 - v0 @kind int;
  #L3ff3bc.  call temp:= `b`(v2, v3, v5) @signature `Ln/b/a/t/d;.b:(JI)J` @kind super;
  #L3ff3c2.  v3:= temp @kind wide;
  #L3ff3c4.  return v3 @kind wide;
}
procedure `n.b.a.g` `b`(`n.b.a.t.j` v1 @kind this) @signature `Ln/b/a/t/j;.b:()Ln/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff3d8.  call temp:= `j`(v1) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ff3de.  v0:= temp @kind object;
  #L3ff3e0.  call temp:= `b`(v0) @signature `Ln/b/a/c;.b:()Ln/b/a/g;` @kind virtual;
  #L3ff3e6.  v0:= temp @kind object;
  #L3ff3e8.  return v0 @kind object;
}
procedure `boolean` `b`(`n.b.a.t.j` v1 @kind this, `long` v2 ) @signature `Ln/b/a/t/j;.b:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff22c.  call temp:= `j`(v1) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ff232.  v0:= temp @kind object;
  #L3ff234.  call temp:= `b`(v0, v2) @signature `Ln/b/a/c;.b:(J)Z` @kind virtual;
  #L3ff23a.  v2:= temp;
  #L3ff23c.  return v2;
}
procedure `int` `c`(`n.b.a.t.j` v1 @kind this) @signature `Ln/b/a/t/j;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff270.  v0:= v1.`n.b.a.t.j.e` @type ^`int`;
  #L3ff274.  return v0;
}
procedure `long` `c`(`n.b.a.t.j` v1 @kind this, `long` v2 ) @signature `Ln/b/a/t/j;.c:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff2d0.  call temp:= `j`(v1) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ff2d6.  v0:= temp @kind object;
  #L3ff2d8.  call temp:= `c`(v0, v2) @signature `Ln/b/a/c;.c:(J)J` @kind virtual;
  #L3ff2de.  v2:= temp @kind wide;
  #L3ff2e0.  return v2 @kind wide;
}
procedure `int` `d`(`n.b.a.t.j` v1 @kind this) @signature `Ln/b/a/t/j;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff288.  v0:= v1.`n.b.a.t.j.d` @type ^`int`;
  #L3ff28c.  return v0;
}
procedure `long` `d`(`n.b.a.t.j` v1 @kind this, `long` v2 ) @signature `Ln/b/a/t/j;.d:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff2f4.  call temp:= `j`(v1) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ff2fa.  v0:= temp @kind object;
  #L3ff2fc.  call temp:= `d`(v0, v2) @signature `Ln/b/a/c;.d:(J)J` @kind virtual;
  #L3ff302.  v2:= temp @kind wide;
  #L3ff304.  return v2 @kind wide;
}
procedure `long` `e`(`n.b.a.t.j` v1 @kind this, `long` v2 ) @signature `Ln/b/a/t/j;.e:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff318.  call temp:= `j`(v1) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ff31e.  v0:= temp @kind object;
  #L3ff320.  call temp:= `e`(v0, v2) @signature `Ln/b/a/c;.e:(J)J` @kind virtual;
  #L3ff326.  v2:= temp @kind wide;
  #L3ff328.  return v2 @kind wide;
}
procedure `long` `f`(`n.b.a.t.j` v1 @kind this, `long` v2 ) @signature `Ln/b/a/t/j;.f:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff33c.  call temp:= `j`(v1) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ff342.  v0:= temp @kind object;
  #L3ff344.  call temp:= `f`(v0, v2) @signature `Ln/b/a/c;.f:(J)J` @kind virtual;
  #L3ff34a.  v2:= temp @kind wide;
  #L3ff34c.  return v2 @kind wide;
}
procedure `long` `g`(`n.b.a.t.j` v1 @kind this, `long` v2 ) @signature `Ln/b/a/t/j;.g:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff360.  call temp:= `j`(v1) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ff366.  v0:= temp @kind object;
  #L3ff368.  call temp:= `g`(v0, v2) @signature `Ln/b/a/c;.g:(J)J` @kind virtual;
  #L3ff36e.  v2:= temp @kind wide;
  #L3ff370.  return v2 @kind wide;
}
procedure `long` `h`(`n.b.a.t.j` v1 @kind this, `long` v2 ) @signature `Ln/b/a/t/j;.h:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff384.  call temp:= `j`(v1) @signature `Ln/b/a/t/d;.j:()Ln/b/a/c;` @kind virtual;
  #L3ff38a.  v0:= temp @kind object;
  #L3ff38c.  call temp:= `h`(v0, v2) @signature `Ln/b/a/c;.h:(J)J` @kind virtual;
  #L3ff392.  v2:= temp @kind wide;
  #L3ff394.  return v2 @kind wide;
}
