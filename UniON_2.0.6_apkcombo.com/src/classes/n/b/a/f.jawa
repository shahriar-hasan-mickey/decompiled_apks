record `n.b.a.f` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.io.Serializable` @kind interface {
  `java.lang.String` `n.b.a.f.b` @AccessFlag PRIVATE_FINAL;
}
global `n.b.a.f` `@@n.b.a.f.c` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@n.b.a.f.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@n.b.a.f.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@n.b.a.f.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln/b/a/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f8584.  v0:= `@@n.b.a.q.g` @type ^`n.b.a.f` @kind object;
  #L3f8588.  `@@n.b.a.f.c` @type ^`n.b.a.f` := v0 @kind object;
  #L3f858c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3f8590.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3f8596.  `@@n.b.a.f.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3f859a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3f859e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3f85a4.  `@@n.b.a.f.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3f85a8.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3f85ac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3f85b2.  `@@n.b.a.f.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3f85b6.  return @kind void;
}
procedure `void` `<init>`(`n.b.a.f` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Ln/b/a/f;.<init>:(Ljava/lang/String;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L3f85c8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f85ce.  if v2 == 0 then goto L3f85d8;
  #L3f85d2.  v1.`n.b.a.f.b` @type ^`java.lang.String` := v2 @kind object;
  #L3f85d6.  return @kind void;
  #L3f85d8.  v2:= new `java.lang.IllegalArgumentException`;
  #L3f85dc.  v0:= "Id must not be null" @kind object;
  #L3f85e0.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f85e6.  throw v2;
}
procedure `java.lang.String` `a`(`java.lang.String` v3 @kind object) @signature `Ln/b/a/f;.a:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f7b00.  v0:= new `java.lang.StringBuilder`;
  #L3f7b04.  call `<init>`(v0, v3) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f7b0a.  v3:= 0I;
  #L3f7b0c.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L3f7b12.  v1:= temp;
  #L3f7b14.  if v3 >= v1 then goto L3f7b42;
  #L3f7b18.  call temp:= `charAt`(v0, v3) @signature `Ljava/lang/StringBuilder;.charAt:(I)C` @kind virtual;
  #L3f7b1e.  v1:= temp;
  #L3f7b20.  v2:= 10I;
  #L3f7b24.  call temp:= `digit`(v1, v2) @signature `Ljava/lang/Character;.digit:(CI)I` @kind static;
  #L3f7b2a.  v1:= temp;
  #L3f7b2c.  if v1 < 0 then goto L3f7b3c;
  #L3f7b30.  v1:= v1 + 48;
  #L3f7b34.  v1:= (`char`) v1 @kind i2c;
  #L3f7b36.  call `setCharAt`(v0, v3, v1) @signature `Ljava/lang/StringBuilder;.setCharAt:(IC)V` @kind virtual;
  #L3f7b3c.  v3:= v3 + 1;
  #L3f7b40.  goto L3f7b0c;
  #L3f7b42.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f7b48.  v3:= temp @kind object;
  #L3f7b4a.  return v3 @kind object;
}
procedure `n.b.a.f` `a`(`int` v3 ) @signature `Ln/b/a/f;.a:(I)Ln/b/a/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f7fcc.  v0:= -86399999I;
  #L3f7fd2.  if v3 < v0 then goto L3f7ff2;
  #L3f7fd6.  v0:= 86399999I;
  #L3f7fdc.  if v3 > v0 then goto L3f7ff2;
  #L3f7fe0.  call temp:= `b`(v3) @signature `Ln/b/a/f;.b:(I)Ljava/lang/String;` @kind static;
  #L3f7fe6.  v0:= temp @kind object;
  #L3f7fe8.  call temp:= `a`(v0, v3) @signature `Ln/b/a/f;.a:(Ljava/lang/String;I)Ln/b/a/f;` @kind static;
  #L3f7fee.  v3:= temp @kind object;
  #L3f7ff0.  return v3 @kind object;
  #L3f7ff2.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f7ff6.  v1:= new `java.lang.StringBuilder`;
  #L3f7ffa.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f8000.  v2:= "Millis out of range: " @kind object;
  #L3f8004.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f800a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8010.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f8016.  v3:= temp @kind object;
  #L3f8018.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f801e.  throw v0;
}
procedure `n.b.a.f` `a`(`java.lang.String` v2 @kind object, `int` v3 ) @signature `Ln/b/a/f;.a:(Ljava/lang/String;I)Ln/b/a/f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L3f7ed0.  if v3 != 0 then goto L3f7eda;
  #L3f7ed4.  v2:= `@@n.b.a.f.c` @type ^`n.b.a.f` @kind object;
  #L3f7ed8.  return v2 @kind object;
  #L3f7eda.  v0:= new `n.b.a.v.d`;
  #L3f7ede.  v1:= 0I;
  #L3f7ee0.  call `<init>`(v0, v2, v1, v3, v3) @signature `Ln/b/a/v/d;.<init>:(Ljava/lang/String;Ljava/lang/String;II)V` @kind direct;
  #L3f7ee6.  return v0 @kind object;
}
procedure `n.b.a.f` `a`(`java.util.TimeZone` v5 @kind object) @signature `Ln/b/a/f;.a:(Ljava/util/TimeZone;)Ln/b/a/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f8030.  if v5 != 0 then goto L3f803e;
  #L3f8034.  call temp:= `d`() @signature `Ln/b/a/f;.d:()Ln/b/a/f;` @kind static;
  #L3f803a.  v5:= temp @kind object;
  #L3f803c.  return v5 @kind object;
  #L3f803e.  call temp:= `getID`(v5) @signature `Ljava/util/TimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L3f8044.  v5:= temp @kind object;
  #L3f8046.  if v5 == 0 then goto L3f8158;
  #L3f804a.  v0:= "UTC" @kind object;
  #L3f804e.  call temp:= `equals`(v5, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f8054.  v0:= temp;
  #L3f8056.  if v0 == 0 then goto L3f8060;
  #L3f805a.  v5:= `@@n.b.a.f.c` @type ^`n.b.a.f` @kind object;
  #L3f805e.  return v5 @kind object;
  #L3f8060.  v0:= 0I;
  #L3f8062.  call temp:= `c`(v5) @signature `Ln/b/a/f;.c:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3f8068.  v1:= temp @kind object;
  #L3f806a.  call temp:= `h`() @signature `Ln/b/a/f;.h:()Ln/b/a/v/f;` @kind static;
  #L3f8070.  v2:= temp @kind object;
  #L3f8072.  if v1 == 0 then goto L3f807e;
  #L3f8076.  call temp:= `a`(v2, v1) @signature `Ln/b/a/v/f;.a:(Ljava/lang/String;)Ln/b/a/f;` @kind interface;
  #L3f807c.  v0:= temp @kind object;
  #L3f807e.  if v0 != 0 then goto L3f808a;
  #L3f8082.  call temp:= `a`(v2, v5) @signature `Ln/b/a/v/f;.a:(Ljava/lang/String;)Ln/b/a/f;` @kind interface;
  #L3f8088.  v0:= temp @kind object;
  #L3f808a.  if v0 == 0 then goto L3f8090;
  #L3f808e.  return v0 @kind object;
  #L3f8090.  if v1 != 0 then goto L3f8120;
  #L3f8094.  v0:= "GMT+" @kind object;
  #L3f8098.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f809e.  v0:= temp;
  #L3f80a0.  if v0 != 0 then goto L3f80b4;
  #L3f80a4.  v0:= "GMT-" @kind object;
  #L3f80a8.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f80ae.  v0:= temp;
  #L3f80b0.  if v0 == 0 then goto L3f8120;
  #L3f80b4.  v0:= 3I;
  #L3f80b6.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3f80bc.  v5:= temp @kind object;
  #L3f80be.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f80c4.  v0:= temp;
  #L3f80c6.  v1:= 2I;
  #L3f80c8.  if v0 <= v1 then goto L3f80f2;
  #L3f80cc.  v0:= 1I;
  #L3f80ce.  call temp:= `charAt`(v5, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3f80d4.  v0:= temp;
  #L3f80d6.  v1:= 57I;
  #L3f80da.  if v0 <= v1 then goto L3f80f2;
  #L3f80de.  call temp:= `isDigit`(v0) @signature `Ljava/lang/Character;.isDigit:(C)Z` @kind static;
  #L3f80e4.  v0:= temp;
  #L3f80e6.  if v0 == 0 then goto L3f80f2;
  #L3f80ea.  call temp:= `a`(v5) @signature `Ln/b/a/f;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3f80f0.  v5:= temp @kind object;
  #L3f80f2.  call temp:= `d`(v5) @signature `Ln/b/a/f;.d:(Ljava/lang/String;)I` @kind static;
  #L3f80f8.  v5:= temp;
  #L3f80fa.  v0:= (`long`) v5 @kind i2l;
  #L3f80fc.  v2:= 0L;
  #L3f8100.  v4:= lcmp(v0, v2);
  #L3f8104.  if v4 != 0 then goto L3f810e;
  #L3f8108.  v5:= `@@n.b.a.f.c` @type ^`n.b.a.f` @kind object;
  #L3f810c.  return v5 @kind object;
  #L3f810e.  call temp:= `b`(v5) @signature `Ln/b/a/f;.b:(I)Ljava/lang/String;` @kind static;
  #L3f8114.  v0:= temp @kind object;
  #L3f8116.  call temp:= `a`(v0, v5) @signature `Ln/b/a/f;.a:(Ljava/lang/String;I)Ln/b/a/f;` @kind static;
  #L3f811c.  v5:= temp @kind object;
  #L3f811e.  return v5 @kind object;
  #L3f8120.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f8124.  v1:= new `java.lang.StringBuilder`;
  #L3f8128.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f812e.  v2:= "The datetime zone id '" @kind object;
  #L3f8132.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8138.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f813e.  v5:= "' is not recognised" @kind object;
  #L3f8142.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8148.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f814e.  v5:= temp @kind object;
  #L3f8150.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f8156.  throw v0;
  #L3f8158.  v5:= new `java.lang.IllegalArgumentException`;
  #L3f815c.  v0:= "The TimeZone id must not be null" @kind object;
  #L3f8160.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f8166.  throw v5;
}
procedure `n.b.a.v.f` `a`(`n.b.a.v.f` v2 @kind object) @signature `Ln/b/a/f;.a:(Ln/b/a/v/f;)Ln/b/a/v/f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L3f8500.  call temp:= `a`(v2) @signature `Ln/b/a/v/f;.a:()Ljava/util/Set;` @kind interface;
  #L3f8506.  v0:= temp @kind object;
  #L3f8508.  if v0 == 0 then goto L3f8562;
  #L3f850c.  call temp:= `size`(v0) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L3f8512.  v1:= temp;
  #L3f8514.  if v1 == 0 then goto L3f8562;
  #L3f8518.  v1:= "UTC" @kind object;
  #L3f851c.  call temp:= `contains`(v0, v1) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3f8522.  v0:= temp;
  #L3f8524.  if v0 == 0 then goto L3f8552;
  #L3f8528.  v0:= `@@n.b.a.f.c` @type ^`n.b.a.f` @kind object;
  #L3f852c.  call temp:= `a`(v2, v1) @signature `Ln/b/a/v/f;.a:(Ljava/lang/String;)Ln/b/a/f;` @kind interface;
  #L3f8532.  v1:= temp @kind object;
  #L3f8534.  call temp:= `equals`(v0, v1) @signature `Ln/b/a/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f853a.  v0:= temp;
  #L3f853c.  if v0 == 0 then goto L3f8542;
  #L3f8540.  return v2 @kind object;
  #L3f8542.  v2:= new `java.lang.IllegalArgumentException`;
  #L3f8546.  v0:= "Invalid UTC zone provided" @kind object;
  #L3f854a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f8550.  throw v2;
  #L3f8552.  v2:= new `java.lang.IllegalArgumentException`;
  #L3f8556.  v0:= "The provider doesn't support UTC" @kind object;
  #L3f855a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f8560.  throw v2;
  #L3f8562.  v2:= new `java.lang.IllegalArgumentException`;
  #L3f8566.  v0:= "The provider doesn't have any available ids" @kind object;
  #L3f856a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f8570.  throw v2;
}
procedure `java.lang.String` `b`(`int` v5 ) @signature `Ln/b/a/f;.b:(I)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f7c90.  v0:= new `java.lang.StringBuffer`;
  #L3f7c94.  call `<init>`(v0) @signature `Ljava/lang/StringBuffer;.<init>:()V` @kind direct;
  #L3f7c9a.  if v5 < 0 then goto L3f7caa;
  #L3f7c9e.  v1:= 43I;
  #L3f7ca2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f7ca8.  goto L3f7cb6;
  #L3f7caa.  v1:= 45I;
  #L3f7cae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f7cb4.  v5:= -v5 @kind int;
  #L3f7cb6.  v1:= 3600000I;
  #L3f7cbc.  v2:= v5 / v1 @kind int;
  #L3f7cc0.  v3:= 2I;
  #L3f7cc2.  call `a`(v0, v2, v3) @signature `Ln/b/a/u/i;.a:(Ljava/lang/StringBuffer;II)V` @kind static;
  #L3f7cc8.  v2:= v2 * v1 @kind int;
  #L3f7ccc.  v5:= v5 - v2 @kind int;
  #L3f7cce.  v1:= 60000I;
  #L3f7cd4.  v2:= v5 / v1 @kind int;
  #L3f7cd8.  v4:= 58I;
  #L3f7cdc.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f7ce2.  call `a`(v0, v2, v3) @signature `Ln/b/a/u/i;.a:(Ljava/lang/StringBuffer;II)V` @kind static;
  #L3f7ce8.  v2:= v2 * v1 @kind int;
  #L3f7cec.  v5:= v5 - v2 @kind int;
  #L3f7cee.  if v5 != 0 then goto L3f7cfc;
  #L3f7cf2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f7cf8.  v5:= temp @kind object;
  #L3f7cfa.  return v5 @kind object;
  #L3f7cfc.  v1:= v5 / 1000;
  #L3f7d00.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f7d06.  call `a`(v0, v1, v3) @signature `Ln/b/a/u/i;.a:(Ljava/lang/StringBuffer;II)V` @kind static;
  #L3f7d0c.  v1:= v1 * 1000;
  #L3f7d10.  v5:= v5 - v1 @kind int;
  #L3f7d12.  if v5 != 0 then goto L3f7d20;
  #L3f7d16.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f7d1c.  v5:= temp @kind object;
  #L3f7d1e.  return v5 @kind object;
  #L3f7d20.  v1:= 46I;
  #L3f7d24.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f7d2a.  v1:= 3I;
  #L3f7d2c.  call `a`(v0, v5, v1) @signature `Ln/b/a/u/i;.a:(Ljava/lang/StringBuffer;II)V` @kind static;
  #L3f7d32.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f7d38.  v5:= temp @kind object;
  #L3f7d3a.  return v5 @kind object;
}
procedure `n.b.a.f` `b`(`java.lang.String` v5 @kind object) @signature `Ln/b/a/f;.b:(Ljava/lang/String;)Ln/b/a/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f7ef8.  if v5 != 0 then goto L3f7f06;
  #L3f7efc.  call temp:= `d`() @signature `Ln/b/a/f;.d:()Ln/b/a/f;` @kind static;
  #L3f7f02.  v5:= temp @kind object;
  #L3f7f04.  return v5 @kind object;
  #L3f7f06.  v0:= "UTC" @kind object;
  #L3f7f0a.  call temp:= `equals`(v5, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f7f10.  v0:= temp;
  #L3f7f12.  if v0 == 0 then goto L3f7f1c;
  #L3f7f16.  v5:= `@@n.b.a.f.c` @type ^`n.b.a.f` @kind object;
  #L3f7f1a.  return v5 @kind object;
  #L3f7f1c.  call temp:= `h`() @signature `Ln/b/a/f;.h:()Ln/b/a/v/f;` @kind static;
  #L3f7f22.  v0:= temp @kind object;
  #L3f7f24.  call temp:= `a`(v0, v5) @signature `Ln/b/a/v/f;.a:(Ljava/lang/String;)Ln/b/a/f;` @kind interface;
  #L3f7f2a.  v0:= temp @kind object;
  #L3f7f2c.  if v0 == 0 then goto L3f7f32;
  #L3f7f30.  return v0 @kind object;
  #L3f7f32.  v0:= "+" @kind object;
  #L3f7f36.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f7f3c.  v0:= temp;
  #L3f7f3e.  if v0 != 0 then goto L3f7f8c;
  #L3f7f42.  v0:= "-" @kind object;
  #L3f7f46.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f7f4c.  v0:= temp;
  #L3f7f4e.  if v0 == 0 then goto L3f7f54;
  #L3f7f52.  goto L3f7f8c;
  #L3f7f54.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f7f58.  v1:= new `java.lang.StringBuilder`;
  #L3f7f5c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f7f62.  v2:= "The datetime zone id '" @kind object;
  #L3f7f66.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f7f6c.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f7f72.  v5:= "' is not recognised" @kind object;
  #L3f7f76.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f7f7c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f7f82.  v5:= temp @kind object;
  #L3f7f84.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f7f8a.  throw v0;
  #L3f7f8c.  call temp:= `d`(v5) @signature `Ln/b/a/f;.d:(Ljava/lang/String;)I` @kind static;
  #L3f7f92.  v5:= temp;
  #L3f7f94.  v0:= (`long`) v5 @kind i2l;
  #L3f7f96.  v2:= 0L;
  #L3f7f9a.  v4:= lcmp(v0, v2);
  #L3f7f9e.  if v4 != 0 then goto L3f7fa8;
  #L3f7fa2.  v5:= `@@n.b.a.f.c` @type ^`n.b.a.f` @kind object;
  #L3f7fa6.  return v5 @kind object;
  #L3f7fa8.  call temp:= `b`(v5) @signature `Ln/b/a/f;.b:(I)Ljava/lang/String;` @kind static;
  #L3f7fae.  v0:= temp @kind object;
  #L3f7fb0.  call temp:= `a`(v0, v5) @signature `Ln/b/a/f;.a:(Ljava/lang/String;I)Ln/b/a/f;` @kind static;
  #L3f7fb6.  v5:= temp @kind object;
  #L3f7fb8.  return v5 @kind object;
}
procedure `java.lang.String` `c`(`java.lang.String` v1 @kind object) @signature `Ln/b/a/f;.c:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3f7b5c.  v0:= `@@n.b.a.f$a.a` @type ^`java.util.Map` @kind object;
  #L3f7b60.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f7b66.  v1:= temp @kind object;
  #L3f7b68.  v1:= (`java.lang.String`) v1 @kind object;
  #L3f7b6c.  return v1 @kind object;
}
procedure `java.util.Set` `c`() @signature `Ln/b/a/f;.c:()Ljava/util/Set;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f7d68.  call temp:= `h`() @signature `Ln/b/a/f;.h:()Ln/b/a/v/f;` @kind static;
  #L3f7d6e.  v0:= temp @kind object;
  #L3f7d70.  call temp:= `a`(v0) @signature `Ln/b/a/v/f;.a:()Ljava/util/Set;` @kind interface;
  #L3f7d76.  v0:= temp @kind object;
  #L3f7d78.  return v0 @kind object;
}
procedure `int` `d`(`java.lang.String` v2 @kind object) @signature `Ln/b/a/f;.d:(Ljava/lang/String;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L3f7adc.  v0:= `@@n.b.a.f$a.b` @type ^`n.b.a.u.b` @kind object;
  #L3f7ae0.  call temp:= `b`(v0, v2) @signature `Ln/b/a/u/b;.b:(Ljava/lang/String;)J` @kind virtual;
  #L3f7ae6.  v0:= temp @kind wide;
  #L3f7ae8.  v2:= (`int`) v0 @kind l2i;
  #L3f7aea.  v2:= -v2 @kind int;
  #L3f7aec.  return v2;
}
procedure `n.b.a.f` `d`() @signature `Ln/b/a/f;.d:()Ln/b/a/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f8178.  v0:= `@@n.b.a.f.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f817c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f8182.  v0:= temp @kind object;
  #L3f8184.  v0:= (`n.b.a.f`) v0 @kind object;
  #L3f8188.  if v0 != 0 then goto L3f81ea;
  #L3f818c.  v1:= "user.timezone" @kind object;
  #L3f8190.  call temp:= `getProperty`(v1) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3f8196.  v1:= temp @kind object;
  #L3f8198.  if v1 == 0 then goto L3f81a8;
  #L3f819c.  call temp:= `b`(v1) @signature `Ln/b/a/f;.b:(Ljava/lang/String;)Ln/b/a/f;` @kind static;
  #L3f81a2.  v0:= temp @kind object;
  #L3f81a4.  goto L3f81a8;
  #L3f81a6.  
  #L3f81a8.  if v0 != 0 then goto L3f81c0;
  #L3f81ac.  call temp:= `getDefault`() @signature `Ljava/util/TimeZone;.getDefault:()Ljava/util/TimeZone;` @kind static;
  #L3f81b2.  v1:= temp @kind object;
  #L3f81b4.  call temp:= `a`(v1) @signature `Ln/b/a/f;.a:(Ljava/util/TimeZone;)Ln/b/a/f;` @kind static;
  #L3f81ba.  v0:= temp @kind object;
  #L3f81bc.  goto L3f81c0;
  #L3f81be.  
  #L3f81c0.  if v0 != 0 then goto L3f81c8;
  #L3f81c4.  v0:= `@@n.b.a.f.c` @type ^`n.b.a.f` @kind object;
  #L3f81c8.  v1:= `@@n.b.a.f.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f81cc.  v2:= 0I;
  #L3f81ce.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3f81d4.  v1:= temp;
  #L3f81d6.  if v1 != 0 then goto L3f81ea;
  #L3f81da.  v0:= `@@n.b.a.f.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f81de.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f81e4.  v0:= temp @kind object;
  #L3f81e6.  v0:= (`n.b.a.f`) v0 @kind object;
  #L3f81ea.  return v0 @kind object;
  catch `java.lang.RuntimeException` @[L3f818c..L3f81a4] goto L3f81a6;
  catch `java.lang.IllegalArgumentException` @[L3f81ac..L3f81bc] goto L3f81be;
}
procedure `n.b.a.v.e` `e`() @signature `Ln/b/a/f;.e:()Ln/b/a/v/e;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f8218.  v0:= constclass @type ^`n.b.a.v.e` @kind object;
  #L3f821c.  v1:= 0I;
  #L3f821e.  v2:= "org.joda.time.DateTimeZone.NameProvider" @kind object;
  #L3f8222.  call temp:= `getProperty`(v2) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3f8228.  v2:= temp @kind object;
  #L3f822a.  if v2 == 0 then goto L3f82b6;
  #L3f822e.  v3:= constclass @type ^`n.b.a.f` @kind object;
  #L3f8232.  call temp:= `getClassLoader`(v3) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L3f8238.  v3:= temp @kind object;
  #L3f823a.  v4:= 0I;
  #L3f823c.  call temp:= `forName`(v2, v4, v3) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;` @kind static;
  #L3f8242.  v2:= temp @kind object;
  #L3f8244.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3f824a.  v3:= temp;
  #L3f824c.  if v3 == 0 then goto L3f8278;
  #L3f8250.  call temp:= `asSubclass`(v2, v0) @signature `Ljava/lang/Class;.asSubclass:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L3f8256.  v0:= temp @kind object;
  #L3f8258.  v2:= new `java.lang.Class`[v4];
  #L3f825c.  call temp:= `getConstructor`(v0, v2) @signature `Ljava/lang/Class;.getConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L3f8262.  v0:= temp @kind object;
  #L3f8264.  v2:= new `java.lang.Object`[v4];
  #L3f8268.  call temp:= `newInstance`(v0, v2) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f826e.  v0:= temp @kind object;
  #L3f8270.  v0:= (`n.b.a.v.e`) v0 @kind object;
  #L3f8274.  v1:= v0 @kind object;
  #L3f8276.  goto L3f82b6;
  #L3f8278.  v2:= new `java.lang.IllegalArgumentException`;
  #L3f827c.  v3:= new `java.lang.StringBuilder`;
  #L3f8280.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f8286.  v4:= "System property referred to class that does not implement " @kind object;
  #L3f828a.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8290.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8296.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f829c.  v0:= temp @kind object;
  #L3f829e.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f82a4.  throw v2;
  #L3f82a6.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L3f82a8.  v2:= new `java.lang.RuntimeException`;
  #L3f82ac.  call `<init>`(v2, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3f82b2.  throw v2;
  #L3f82b4.  
  #L3f82b6.  if v1 != 0 then goto L3f82c4;
  #L3f82ba.  v1:= new `n.b.a.v.c`;
  #L3f82be.  call `<init>`(v1) @signature `Ln/b/a/v/c;.<init>:()V` @kind direct;
  #L3f82c4.  return v1 @kind object;
  catch `java.lang.SecurityException` @[L3f821e..L3f822a] goto L3f82b4;
  catch `java.lang.Exception` @[L3f822e..L3f82a6] goto L3f82a6;
  catch `java.lang.SecurityException` @[L3f82a8..L3f82b4] goto L3f82b4;
}
procedure `n.b.a.v.f` `f`() @signature `Ln/b/a/f;.f:()Ln/b/a/v/f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f834c.  v0:= constclass @type ^`n.b.a.v.f` @kind object;
  #L3f8350.  v1:= "org.joda.time.DateTimeZone.Provider" @kind object;
  #L3f8354.  call temp:= `getProperty`(v1) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3f835a.  v1:= temp @kind object;
  #L3f835c.  if v1 == 0 then goto L3f83ea;
  #L3f8360.  v2:= constclass @type ^`n.b.a.f` @kind object;
  #L3f8364.  call temp:= `getClassLoader`(v2) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L3f836a.  v2:= temp @kind object;
  #L3f836c.  v3:= 0I;
  #L3f836e.  call temp:= `forName`(v1, v3, v2) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;` @kind static;
  #L3f8374.  v1:= temp @kind object;
  #L3f8376.  call temp:= `isAssignableFrom`(v0, v1) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3f837c.  v2:= temp;
  #L3f837e.  if v2 == 0 then goto L3f83ae;
  #L3f8382.  call temp:= `asSubclass`(v1, v0) @signature `Ljava/lang/Class;.asSubclass:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L3f8388.  v0:= temp @kind object;
  #L3f838a.  v1:= new `java.lang.Class`[v3];
  #L3f838e.  call temp:= `getConstructor`(v0, v1) @signature `Ljava/lang/Class;.getConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L3f8394.  v0:= temp @kind object;
  #L3f8396.  v1:= new `java.lang.Object`[v3];
  #L3f839a.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f83a0.  v0:= temp @kind object;
  #L3f83a2.  v0:= (`n.b.a.v.f`) v0 @kind object;
  #L3f83a6.  call temp:= `a`(v0) @signature `Ln/b/a/f;.a:(Ln/b/a/v/f;)Ln/b/a/v/f;` @kind static;
  #L3f83ac.  return v0 @kind object;
  #L3f83ae.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f83b2.  v2:= new `java.lang.StringBuilder`;
  #L3f83b6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f83bc.  v3:= "System property referred to class that does not implement " @kind object;
  #L3f83c0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f83c6.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f83cc.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f83d2.  v0:= temp @kind object;
  #L3f83d4.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f83da.  throw v1;
  #L3f83dc.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L3f83de.  v1:= new `java.lang.RuntimeException`;
  #L3f83e2.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3f83e8.  throw v1;
  #L3f83ea.  v0:= "org.joda.time.DateTimeZone.Folder" @kind object;
  #L3f83ee.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3f83f4.  v0:= temp @kind object;
  #L3f83f6.  if v0 == 0 then goto L3f8424;
  #L3f83fa.  v1:= new `n.b.a.v.h`;
  #L3f83fe.  v2:= new `java.io.File`;
  #L3f8402.  call `<init>`(v2, v0) @signature `Ljava/io/File;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f8408.  call `<init>`(v1, v2) @signature `Ln/b/a/v/h;.<init>:(Ljava/io/File;)V` @kind direct;
  #L3f840e.  call temp:= `a`(v1) @signature `Ln/b/a/f;.a:(Ln/b/a/v/f;)Ln/b/a/v/f;` @kind static;
  #L3f8414.  return v1 @kind object;
  #L3f8416.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L3f8418.  v1:= new `java.lang.RuntimeException`;
  #L3f841c.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3f8422.  throw v1;
  #L3f8424.  v0:= new `n.b.a.v.h`;
  #L3f8428.  v1:= "org/joda/time/tz/data" @kind object;
  #L3f842c.  call `<init>`(v0, v1) @signature `Ln/b/a/v/h;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f8432.  call temp:= `a`(v0) @signature `Ln/b/a/f;.a:(Ln/b/a/v/f;)Ln/b/a/v/f;` @kind static;
  #L3f8438.  return v0 @kind object;
  #L3f843a.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L3f843c.  call `printStackTrace`(v0) @signature `Ljava/lang/Exception;.printStackTrace:()V` @kind virtual;
  #L3f8442.  v0:= new `n.b.a.v.g`;
  #L3f8446.  call `<init>`(v0) @signature `Ln/b/a/v/g;.<init>:()V` @kind direct;
  #L3f844c.  return v0 @kind object;
  catch `java.lang.SecurityException` @[L3f8350..L3f835c] goto L3f83ea;
  catch `java.lang.Exception` @[L3f8360..L3f83dc] goto L3f83dc;
  catch `java.lang.SecurityException` @[L3f83de..L3f83ea] goto L3f83ea;
  catch `java.lang.SecurityException` @[L3f83ea..L3f83f6] goto L3f8424;
  catch `java.lang.Exception` @[L3f83fa..L3f8414] goto L3f8416;
  catch `java.lang.SecurityException` @[L3f8418..L3f8424] goto L3f8424;
  catch `java.lang.Exception` @[L3f8424..L3f8438] goto L3f843a;
}
procedure `n.b.a.v.e` `g`() @signature `Ln/b/a/f;.g:()Ln/b/a/v/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f82fc.  v0:= `@@n.b.a.f.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f8300.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f8306.  v0:= temp @kind object;
  #L3f8308.  v0:= (`n.b.a.v.e`) v0 @kind object;
  #L3f830c.  if v0 != 0 then goto L3f833a;
  #L3f8310.  call temp:= `e`() @signature `Ln/b/a/f;.e:()Ln/b/a/v/e;` @kind static;
  #L3f8316.  v0:= temp @kind object;
  #L3f8318.  v1:= `@@n.b.a.f.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f831c.  v2:= 0I;
  #L3f831e.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3f8324.  v1:= temp;
  #L3f8326.  if v1 != 0 then goto L3f833a;
  #L3f832a.  v0:= `@@n.b.a.f.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f832e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f8334.  v0:= temp @kind object;
  #L3f8336.  v0:= (`n.b.a.v.e`) v0 @kind object;
  #L3f833a.  return v0 @kind object;
}
procedure `n.b.a.v.f` `h`() @signature `Ln/b/a/f;.h:()Ln/b/a/v/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f84b0.  v0:= `@@n.b.a.f.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f84b4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f84ba.  v0:= temp @kind object;
  #L3f84bc.  v0:= (`n.b.a.v.f`) v0 @kind object;
  #L3f84c0.  if v0 != 0 then goto L3f84ee;
  #L3f84c4.  call temp:= `f`() @signature `Ln/b/a/f;.f:()Ln/b/a/v/f;` @kind static;
  #L3f84ca.  v0:= temp @kind object;
  #L3f84cc.  v1:= `@@n.b.a.f.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f84d0.  v2:= 0I;
  #L3f84d2.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3f84d8.  v1:= temp;
  #L3f84da.  if v1 != 0 then goto L3f84ee;
  #L3f84de.  v0:= `@@n.b.a.f.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3f84e2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3f84e8.  v0:= temp @kind object;
  #L3f84ea.  v0:= (`n.b.a.v.f`) v0 @kind object;
  #L3f84ee.  return v0 @kind object;
}
procedure `long` `a`(`n.b.a.f` v9 @kind this, `long` v10 ) @signature `Ln/b/a/f;.a:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f7e84.  call temp:= `c`(v9, v10) @signature `Ln/b/a/f;.c:(J)I` @kind virtual;
  #L3f7e8a.  v0:= temp;
  #L3f7e8c.  v0:= (`long`) v0 @kind i2l;
  #L3f7e8e.  v2:= v10 + v0 @kind long;
  #L3f7e92.  v4:= v10 ^~ v2 @kind long;
  #L3f7e96.  v6:= 0L;
  #L3f7e9a.  v8:= lcmp(v4, v6);
  #L3f7e9e.  if v8 >= 0 then goto L3f7ebe;
  #L3f7ea2.  v10:= v10 ^~ v0 @kind long;
  #L3f7ea4.  v0:= lcmp(v10, v6);
  #L3f7ea8.  if v0 >= 0 then goto L3f7eae;
  #L3f7eac.  goto L3f7ebe;
  #L3f7eae.  v10:= new `java.lang.ArithmeticException`;
  #L3f7eb2.  v11:= "Adding time zone offset caused overflow" @kind object;
  #L3f7eb6.  call `<init>`(v10, v11) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f7ebc.  throw v10;
  #L3f7ebe.  return v2 @kind wide;
}
procedure `long` `a`(`n.b.a.f` v11 @kind this, `long` v12 , `boolean` v14 ) @signature `Ln/b/a/f;.a:(JZ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3f7d8c.  call temp:= `c`(v11, v12) @signature `Ln/b/a/f;.c:(J)I` @kind virtual;
  #L3f7d92.  v0:= temp;
  #L3f7d94.  v1:= (`long`) v0 @kind i2l;
  #L3f7d96.  v1:= v12 - v1 @kind long;
  #L3f7d9a.  call temp:= `c`(v11, v1) @signature `Ln/b/a/f;.c:(J)I` @kind virtual;
  #L3f7da0.  v3:= temp;
  #L3f7da2.  if v0 == v3 then goto L3f7e06;
  #L3f7da6.  if v14 != 0 then goto L3f7dae;
  #L3f7daa.  if v0 >= 0 then goto L3f7e06;
  #L3f7dae.  call temp:= `g`(v11, v1) @signature `Ln/b/a/f;.g:(J)J` @kind virtual;
  #L3f7db4.  v4:= temp @kind wide;
  #L3f7db6.  v6:= 9223372036854775807L;
  #L3f7dc0.  v8:= lcmp(v4, v1);
  #L3f7dc4.  if v8 != 0 then goto L3f7dca;
  #L3f7dc8.  v4:= v6 @kind wide;
  #L3f7dca.  v1:= (`long`) v3 @kind i2l;
  #L3f7dcc.  v1:= v12 - v1 @kind long;
  #L3f7dd0.  call temp:= `g`(v11, v1) @signature `Ln/b/a/f;.g:(J)J` @kind virtual;
  #L3f7dd6.  v8:= temp @kind wide;
  #L3f7dd8.  v10:= lcmp(v8, v1);
  #L3f7ddc.  if v10 != 0 then goto L3f7de2;
  #L3f7de0.  goto L3f7de4;
  #L3f7de2.  v6:= v8 @kind wide;
  #L3f7de4.  v1:= lcmp(v4, v6);
  #L3f7de8.  if v1 == 0 then goto L3f7e06;
  #L3f7dec.  if v14 != 0 then goto L3f7df2;
  #L3f7df0.  goto L3f7e08;
  #L3f7df2.  v14:= new `n.b.a.j`;
  #L3f7df6.  call temp:= `a`(v11) @signature `Ln/b/a/f;.a:()Ljava/lang/String;` @kind virtual;
  #L3f7dfc.  v0:= temp @kind object;
  #L3f7dfe.  call `<init>`(v14, v12, v0) @signature `Ln/b/a/j;.<init>:(JLjava/lang/String;)V` @kind direct;
  #L3f7e04.  throw v14;
  #L3f7e06.  v0:= v3;
  #L3f7e08.  v0:= (`long`) v0 @kind i2l;
  #L3f7e0a.  v2:= v12 - v0 @kind long;
  #L3f7e0e.  v4:= v12 ^~ v2 @kind long;
  #L3f7e12.  v6:= 0L;
  #L3f7e16.  v14:= lcmp(v4, v6);
  #L3f7e1a.  if v14 >= 0 then goto L3f7e3a;
  #L3f7e1e.  v12:= v12 ^~ v0 @kind long;
  #L3f7e20.  v14:= lcmp(v12, v6);
  #L3f7e24.  if v14 < 0 then goto L3f7e2a;
  #L3f7e28.  goto L3f7e3a;
  #L3f7e2a.  v12:= new `java.lang.ArithmeticException`;
  #L3f7e2e.  v13:= "Subtracting time zone offset caused overflow" @kind object;
  #L3f7e32.  call `<init>`(v12, v13) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f7e38.  throw v12;
  #L3f7e3a.  return v2 @kind wide;
}
procedure `long` `a`(`n.b.a.f` v2 @kind this, `long` v3 , `boolean` v5 , `long` v6 ) @signature `Ln/b/a/f;.a:(JZJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7e4c.  call temp:= `c`(v2, v6) @signature `Ln/b/a/f;.c:(J)I` @kind virtual;
  #L3f7e52.  v6:= temp;
  #L3f7e54.  v0:= (`long`) v6 @kind i2l;
  #L3f7e56.  v0:= v3 - v0 @kind long;
  #L3f7e5a.  call temp:= `c`(v2, v0) @signature `Ln/b/a/f;.c:(J)I` @kind virtual;
  #L3f7e60.  v7:= temp;
  #L3f7e62.  if v7 != v6 then goto L3f7e68;
  #L3f7e66.  return v0 @kind wide;
  #L3f7e68.  call temp:= `a`(v2, v3, v5) @signature `Ln/b/a/f;.a:(JZ)J` @kind virtual;
  #L3f7e6e.  v3:= temp @kind wide;
  #L3f7e70.  return v3 @kind wide;
}
procedure `java.lang.String` `a`(`n.b.a.f` v1 @kind this) @signature `Ln/b/a/f;.a:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f7b80.  v0:= v1.`n.b.a.f.b` @type ^`java.lang.String` @kind object;
  #L3f7b84.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`n.b.a.f` v4 @kind this, `long` v5 , `java.util.Locale` v7 @kind object) @signature `Ln/b/a/f;.a:(JLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f7b98.  if v7 != 0 then goto L3f7ba4;
  #L3f7b9c.  call temp:= `getDefault`() @signature `Ljava/util/Locale;.getDefault:()Ljava/util/Locale;` @kind static;
  #L3f7ba2.  v7:= temp @kind object;
  #L3f7ba4.  call temp:= `b`(v4, v5) @signature `Ln/b/a/f;.b:(J)Ljava/lang/String;` @kind virtual;
  #L3f7baa.  v0:= temp @kind object;
  #L3f7bac.  if v0 != 0 then goto L3f7bb6;
  #L3f7bb0.  v5:= v4.`n.b.a.f.b` @type ^`java.lang.String` @kind object;
  #L3f7bb4.  return v5 @kind object;
  #L3f7bb6.  call temp:= `g`() @signature `Ln/b/a/f;.g:()Ln/b/a/v/e;` @kind static;
  #L3f7bbc.  v1:= temp @kind object;
  #L3f7bbe.  v2:= instanceof @variable v1 @type ^`n.b.a.v.c` @kind boolean;
  #L3f7bc2.  if v2 == 0 then goto L3f7be0;
  #L3f7bc6.  v1:= (`n.b.a.v.c`) v1 @kind object;
  #L3f7bca.  v2:= v4.`n.b.a.f.b` @type ^`java.lang.String` @kind object;
  #L3f7bce.  call temp:= `f`(v4, v5) @signature `Ln/b/a/f;.f:(J)Z` @kind virtual;
  #L3f7bd4.  v3:= temp;
  #L3f7bd6.  call temp:= `a`(v1, v7, v2, v0, v3) @signature `Ln/b/a/v/c;.a:(Ljava/util/Locale;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;` @kind virtual;
  #L3f7bdc.  v7:= temp @kind object;
  #L3f7bde.  goto L3f7bec;
  #L3f7be0.  v2:= v4.`n.b.a.f.b` @type ^`java.lang.String` @kind object;
  #L3f7be4.  call temp:= `a`(v1, v7, v2, v0) @signature `Ln/b/a/v/e;.a:(Ljava/util/Locale;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3f7bea.  v7:= temp @kind object;
  #L3f7bec.  if v7 == 0 then goto L3f7bf2;
  #L3f7bf0.  return v7 @kind object;
  #L3f7bf2.  call temp:= `c`(v4, v5) @signature `Ln/b/a/f;.c:(J)I` @kind virtual;
  #L3f7bf8.  v5:= temp;
  #L3f7bfa.  call temp:= `b`(v5) @signature `Ln/b/a/f;.b:(I)Ljava/lang/String;` @kind static;
  #L3f7c00.  v5:= temp @kind object;
  #L3f7c02.  return v5 @kind object;
}
procedure `java.lang.String` `b`(`long` v0 ) @signature `Ln/b/a/f;.b:(J)Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `b`(`n.b.a.f` v4 @kind this, `long` v5 , `java.util.Locale` v7 @kind object) @signature `Ln/b/a/f;.b:(JLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f7c14.  if v7 != 0 then goto L3f7c20;
  #L3f7c18.  call temp:= `getDefault`() @signature `Ljava/util/Locale;.getDefault:()Ljava/util/Locale;` @kind static;
  #L3f7c1e.  v7:= temp @kind object;
  #L3f7c20.  call temp:= `b`(v4, v5) @signature `Ln/b/a/f;.b:(J)Ljava/lang/String;` @kind virtual;
  #L3f7c26.  v0:= temp @kind object;
  #L3f7c28.  if v0 != 0 then goto L3f7c32;
  #L3f7c2c.  v5:= v4.`n.b.a.f.b` @type ^`java.lang.String` @kind object;
  #L3f7c30.  return v5 @kind object;
  #L3f7c32.  call temp:= `g`() @signature `Ln/b/a/f;.g:()Ln/b/a/v/e;` @kind static;
  #L3f7c38.  v1:= temp @kind object;
  #L3f7c3a.  v2:= instanceof @variable v1 @type ^`n.b.a.v.c` @kind boolean;
  #L3f7c3e.  if v2 == 0 then goto L3f7c5c;
  #L3f7c42.  v1:= (`n.b.a.v.c`) v1 @kind object;
  #L3f7c46.  v2:= v4.`n.b.a.f.b` @type ^`java.lang.String` @kind object;
  #L3f7c4a.  call temp:= `f`(v4, v5) @signature `Ln/b/a/f;.f:(J)Z` @kind virtual;
  #L3f7c50.  v3:= temp;
  #L3f7c52.  call temp:= `b`(v1, v7, v2, v0, v3) @signature `Ln/b/a/v/c;.b:(Ljava/util/Locale;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;` @kind virtual;
  #L3f7c58.  v7:= temp @kind object;
  #L3f7c5a.  goto L3f7c68;
  #L3f7c5c.  v2:= v4.`n.b.a.f.b` @type ^`java.lang.String` @kind object;
  #L3f7c60.  call temp:= `b`(v1, v7, v2, v0) @signature `Ln/b/a/v/e;.b:(Ljava/util/Locale;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3f7c66.  v7:= temp @kind object;
  #L3f7c68.  if v7 == 0 then goto L3f7c6e;
  #L3f7c6c.  return v7 @kind object;
  #L3f7c6e.  call temp:= `c`(v4, v5) @signature `Ln/b/a/f;.c:(J)I` @kind virtual;
  #L3f7c74.  v5:= temp;
  #L3f7c76.  call temp:= `b`(v5) @signature `Ln/b/a/f;.b:(I)Ljava/lang/String;` @kind static;
  #L3f7c7c.  v5:= temp @kind object;
  #L3f7c7e.  return v5 @kind object;
}
procedure `boolean` `b`() @signature `Ln/b/a/f;.b:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `c`(`long` v0 ) @signature `Ln/b/a/f;.c:(J)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `d`(`n.b.a.f` v9 @kind this, `long` v10 ) @signature `Ln/b/a/f;.d:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f7a14.  call temp:= `c`(v9, v10) @signature `Ln/b/a/f;.c:(J)I` @kind virtual;
  #L3f7a1a.  v0:= temp;
  #L3f7a1c.  v1:= (`long`) v0 @kind i2l;
  #L3f7a1e.  v1:= v10 - v1 @kind long;
  #L3f7a22.  call temp:= `c`(v9, v1) @signature `Ln/b/a/f;.c:(J)I` @kind virtual;
  #L3f7a28.  v3:= temp;
  #L3f7a2a.  if v0 == v3 then goto L3f7a72;
  #L3f7a2e.  v4:= v0 - v3 @kind int;
  #L3f7a32.  if v4 >= 0 then goto L3f7aa0;
  #L3f7a36.  call temp:= `g`(v9, v1) @signature `Ln/b/a/f;.g:(J)J` @kind virtual;
  #L3f7a3c.  v4:= temp @kind wide;
  #L3f7a3e.  v6:= 9223372036854775807L;
  #L3f7a48.  v8:= lcmp(v4, v1);
  #L3f7a4c.  if v8 != 0 then goto L3f7a52;
  #L3f7a50.  v4:= v6 @kind wide;
  #L3f7a52.  v1:= (`long`) v3 @kind i2l;
  #L3f7a54.  v10:= v10 - v1 @kind long;
  #L3f7a56.  call temp:= `g`(v9, v10) @signature `Ln/b/a/f;.g:(J)J` @kind virtual;
  #L3f7a5c.  v1:= temp @kind wide;
  #L3f7a5e.  v8:= lcmp(v1, v10);
  #L3f7a62.  if v8 != 0 then goto L3f7a68;
  #L3f7a66.  v1:= v6 @kind wide;
  #L3f7a68.  v10:= lcmp(v4, v1);
  #L3f7a6c.  if v10 == 0 then goto L3f7aa0;
  #L3f7a70.  return v0;
  #L3f7a72.  if v0 < 0 then goto L3f7aa0;
  #L3f7a76.  call temp:= `h`(v9, v1) @signature `Ln/b/a/f;.h:(J)J` @kind virtual;
  #L3f7a7c.  v10:= temp @kind wide;
  #L3f7a7e.  v4:= lcmp(v10, v1);
  #L3f7a82.  if v4 >= 0 then goto L3f7aa0;
  #L3f7a86.  call temp:= `c`(v9, v10) @signature `Ln/b/a/f;.c:(J)I` @kind virtual;
  #L3f7a8c.  v4:= temp;
  #L3f7a8e.  v0:= v4 - v0 @kind int;
  #L3f7a92.  v1:= v1 - v10 @kind long;
  #L3f7a94.  v10:= (`long`) v0 @kind i2l;
  #L3f7a96.  v0:= lcmp(v1, v10);
  #L3f7a9a.  if v0 > 0 then goto L3f7aa0;
  #L3f7a9e.  return v4;
  #L3f7aa0.  return v3;
}
procedure `int` `e`(`long` v0 ) @signature `Ln/b/a/f;.e:(J)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `equals`(`java.lang.Object` v0 @kind object) @signature `Ln/b/a/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `f`(`n.b.a.f` v1 @kind this, `long` v2 ) @signature `Ln/b/a/f;.f:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f79e8.  call temp:= `c`(v1, v2) @signature `Ln/b/a/f;.c:(J)I` @kind virtual;
  #L3f79ee.  v0:= temp;
  #L3f79f0.  call temp:= `e`(v1, v2) @signature `Ln/b/a/f;.e:(J)I` @kind virtual;
  #L3f79f6.  v2:= temp;
  #L3f79f8.  if v0 != v2 then goto L3f7a00;
  #L3f79fc.  v2:= 1I;
  #L3f79fe.  goto L3f7a02;
  #L3f7a00.  v2:= 0I;
  #L3f7a02.  return v2;
}
procedure `long` `g`(`long` v0 ) @signature `Ln/b/a/f;.g:(J)J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `h`(`long` v0 ) @signature `Ln/b/a/f;.h:(J)J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `hashCode`(`n.b.a.f` v1 @kind this) @signature `Ln/b/a/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7ab4.  call temp:= `a`(v1) @signature `Ln/b/a/f;.a:()Ljava/lang/String;` @kind virtual;
  #L3f7aba.  v0:= temp @kind object;
  #L3f7abc.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L3f7ac2.  v0:= temp;
  #L3f7ac4.  v0:= v0 + 57;
  #L3f7ac8.  return v0;
}
procedure `java.lang.String` `toString`(`n.b.a.f` v1 @kind this) @signature `Ln/b/a/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7d4c.  call temp:= `a`(v1) @signature `Ln/b/a/f;.a:()Ljava/lang/String;` @kind virtual;
  #L3f7d52.  v0:= temp @kind object;
  #L3f7d54.  return v0 @kind object;
}
