record `n.b.a.s.e` @kind class @AccessFlag FINAL extends `n.b.a.t.l` @kind class {
  `n.b.a.s.c` `n.b.a.s.e.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.b.a.s.e` v1 @kind this, `n.b.a.s.c` v2 @kind object, `n.b.a.g` v3 @kind object) @signature `Ln/b/a/s/e;.<init>:(Ln/b/a/s/c;Ln/b/a/g;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3fb3c4.  call temp:= `h`() @signature `Ln/b/a/d;.h:()Ln/b/a/d;` @kind static;
  #L3fb3ca.  v0:= temp @kind object;
  #L3fb3cc.  call `<init>`(v1, v0, v3) @signature `Ln/b/a/t/l;.<init>:(Ln/b/a/d;Ln/b/a/g;)V` @kind direct;
  #L3fb3d2.  v1.`n.b.a.s.e.d` @type ^`n.b.a.s.c` := v2 @kind object;
  #L3fb3d6.  return @kind void;
}
procedure `int` `a`(`n.b.a.s.e` v1 @kind this, `long` v2 ) @signature `Ln/b/a/s/e;.a:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb2f0.  v0:= v1.`n.b.a.s.e.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb2f4.  call temp:= `c`(v0, v2) @signature `Ln/b/a/s/c;.c:(J)I` @kind virtual;
  #L3fb2fa.  v2:= temp;
  #L3fb2fc.  return v2;
}
procedure `boolean` `b`(`n.b.a.s.e` v1 @kind this, `long` v2 ) @signature `Ln/b/a/s/e;.b:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb2d0.  v0:= v1.`n.b.a.s.e.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb2d4.  call temp:= `j`(v0, v2) @signature `Ln/b/a/s/c;.j:(J)Z` @kind virtual;
  #L3fb2da.  v2:= temp;
  #L3fb2dc.  return v2;
}
procedure `int` `c`(`n.b.a.s.e` v1 @kind this) @signature `Ln/b/a/s/e;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb310.  v0:= v1.`n.b.a.s.e.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb314.  call temp:= `S`(v0) @signature `Ln/b/a/s/c;.S:()I` @kind virtual;
  #L3fb31a.  v0:= temp;
  #L3fb31c.  return v0;
}
procedure `int` `d`(`n.b.a.s.e` v1 @kind this) @signature `Ln/b/a/s/e;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb390.  v0:= 1I;
  #L3fb392.  return v0;
}
procedure `int` `d`(`n.b.a.s.e` v2 @kind this, `long` v3 , `int` v5 ) @signature `Ln/b/a/s/e;.d:(JI)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3fb35c.  v0:= v2.`n.b.a.s.e.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb360.  call temp:= `S`(v0) @signature `Ln/b/a/s/c;.S:()I` @kind virtual;
  #L3fb366.  v0:= temp;
  #L3fb368.  v1:= 1I;
  #L3fb36a.  v0:= v0 - v1 @kind int;
  #L3fb36c.  if v5 > v0 then goto L3fb374;
  #L3fb370.  if v5 >= v1 then goto L3fb37c;
  #L3fb374.  call temp:= `i`(v2, v3) @signature `Ln/b/a/s/e;.i:(J)I` @kind virtual;
  #L3fb37a.  v0:= temp;
  #L3fb37c.  return v0;
}
procedure `n.b.a.g` `f`(`n.b.a.s.e` v1 @kind this) @signature `Ln/b/a/s/e;.f:()Ln/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb3a4.  v0:= v1.`n.b.a.s.e.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb3a8.  call temp:= `K`(v0) @signature `Ln/b/a/s/a;.K:()Ln/b/a/g;` @kind virtual;
  #L3fb3ae.  v0:= temp @kind object;
  #L3fb3b0.  return v0 @kind object;
}
procedure `int` `i`(`n.b.a.s.e` v1 @kind this, `long` v2 ) @signature `Ln/b/a/s/e;.i:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb330.  v0:= v1.`n.b.a.s.e.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb334.  call temp:= `i`(v0, v2) @signature `Ln/b/a/s/c;.i:(J)I` @kind virtual;
  #L3fb33a.  v2:= temp;
  #L3fb33c.  v3:= v1.`n.b.a.s.e.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb340.  call temp:= `b`(v3, v2) @signature `Ln/b/a/s/c;.b:(I)I` @kind virtual;
  #L3fb346.  v2:= temp;
  #L3fb348.  return v2;
}
