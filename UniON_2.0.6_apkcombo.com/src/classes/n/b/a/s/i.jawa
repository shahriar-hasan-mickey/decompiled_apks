record `n.b.a.s.i` @kind class @AccessFlag FINAL extends `n.b.a.t.h` @kind class {
  `n.b.a.s.c` `n.b.a.s.i.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.b.a.s.i` v3 @kind this, `n.b.a.s.c` v4 @kind object) @signature `Ln/b/a/s/i;.<init>:(Ln/b/a/s/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3fbfac.  call temp:= `u`() @signature `Ln/b/a/d;.u:()Ln/b/a/d;` @kind static;
  #L3fbfb2.  v0:= temp @kind object;
  #L3fbfb4.  call temp:= `P`(v4) @signature `Ln/b/a/s/c;.P:()J` @kind virtual;
  #L3fbfba.  v1:= temp @kind wide;
  #L3fbfbc.  call `<init>`(v3, v0, v1) @signature `Ln/b/a/t/h;.<init>:(Ln/b/a/d;J)V` @kind direct;
  #L3fbfc2.  v3.`n.b.a.s.i.d` @type ^`n.b.a.s.c` := v4 @kind object;
  #L3fbfc6.  return @kind void;
}
procedure `int` `a`(`n.b.a.s.i` v1 @kind this, `long` v2 ) @signature `Ln/b/a/s/i;.a:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbd8c.  v0:= v1.`n.b.a.s.i.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbd90.  call temp:= `h`(v0, v2) @signature `Ln/b/a/s/c;.h:(J)I` @kind virtual;
  #L3fbd96.  v2:= temp;
  #L3fbd98.  return v2;
}
procedure `long` `a`(`n.b.a.s.i` v1 @kind this, `long` v2 , `int` v4 ) @signature `Ln/b/a/s/i;.a:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbdec.  if v4 != 0 then goto L3fbdf2;
  #L3fbdf0.  return v2 @kind wide;
  #L3fbdf2.  call temp:= `a`(v1, v2) @signature `Ln/b/a/s/i;.a:(J)I` @kind virtual;
  #L3fbdf8.  v0:= temp;
  #L3fbdfa.  v0:= v0 + v4 @kind int;
  #L3fbdfc.  call temp:= `b`(v1, v2, v0) @signature `Ln/b/a/s/i;.b:(JI)J` @kind virtual;
  #L3fbe02.  v2:= temp @kind wide;
  #L3fbe04.  return v2 @kind wide;
}
procedure `long` `a`(`n.b.a.s.i` v0 @kind this, `long` v1 , `long` v3 ) @signature `Ln/b/a/s/i;.a:(JJ)J` @AccessFlag PUBLIC {
    temp;

  #L3fbe18.  call temp:= `a`(v3) @signature `Ln/b/a/t/g;.a:(J)I` @kind static;
  #L3fbe1e.  v3:= temp;
  #L3fbe20.  call temp:= `a`(v0, v1, v3) @signature `Ln/b/a/s/i;.a:(JI)J` @kind virtual;
  #L3fbe26.  v1:= temp @kind wide;
  #L3fbe28.  return v1 @kind wide;
}
procedure `long` `b`(`n.b.a.s.i` v7 @kind this, `long` v8 , `int` v10 ) @signature `Ln/b/a/s/i;.b:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3fbea0.  call temp:= `abs`(v10) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L3fbea6.  v0:= temp;
  #L3fbea8.  v1:= v7.`n.b.a.s.i.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbeac.  call temp:= `V`(v1) @signature `Ln/b/a/s/c;.V:()I` @kind virtual;
  #L3fbeb2.  v1:= temp;
  #L3fbeb4.  v2:= v7.`n.b.a.s.i.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbeb8.  call temp:= `U`(v2) @signature `Ln/b/a/s/c;.U:()I` @kind virtual;
  #L3fbebe.  v2:= temp;
  #L3fbec0.  call `a`(v7, v0, v1, v2) @signature `Ln/b/a/t/g;.a:(Ln/b/a/c;III)V` @kind static;
  #L3fbec6.  call temp:= `a`(v7, v8) @signature `Ln/b/a/s/i;.a:(J)I` @kind virtual;
  #L3fbecc.  v0:= temp;
  #L3fbece.  if v0 != v10 then goto L3fbed4;
  #L3fbed2.  return v8 @kind wide;
  #L3fbed4.  v1:= v7.`n.b.a.s.i.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbed8.  call temp:= `b`(v1, v8) @signature `Ln/b/a/s/c;.b:(J)I` @kind virtual;
  #L3fbede.  v1:= temp;
  #L3fbee0.  v2:= v7.`n.b.a.s.i.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbee4.  call temp:= `d`(v2, v0) @signature `Ln/b/a/s/c;.d:(I)I` @kind virtual;
  #L3fbeea.  v0:= temp;
  #L3fbeec.  v2:= v7.`n.b.a.s.i.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbef0.  call temp:= `d`(v2, v10) @signature `Ln/b/a/s/c;.d:(I)I` @kind virtual;
  #L3fbef6.  v2:= temp;
  #L3fbef8.  if v2 >= v0 then goto L3fbefe;
  #L3fbefc.  v0:= v2;
  #L3fbefe.  v2:= v7.`n.b.a.s.i.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbf02.  call temp:= `g`(v2, v8) @signature `Ln/b/a/s/c;.g:(J)I` @kind virtual;
  #L3fbf08.  v2:= temp;
  #L3fbf0a.  if v2 <= v0 then goto L3fbf10;
  #L3fbf0e.  goto L3fbf12;
  #L3fbf10.  v0:= v2;
  #L3fbf12.  v2:= v7.`n.b.a.s.i.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbf16.  call temp:= `f`(v2, v8, v10) @signature `Ln/b/a/s/c;.f:(JI)J` @kind virtual;
  #L3fbf1c.  v8:= temp @kind wide;
  #L3fbf1e.  call temp:= `a`(v7, v8) @signature `Ln/b/a/s/i;.a:(J)I` @kind virtual;
  #L3fbf24.  v2:= temp;
  #L3fbf26.  v3:= 604800000L;
  #L3fbf2c.  if v2 >= v10 then goto L3fbf34;
  #L3fbf30.  v8:= v8 + v3 @kind long;
  #L3fbf32.  goto L3fbf3a;
  #L3fbf34.  if v2 <= v10 then goto L3fbf3a;
  #L3fbf38.  v8:= v8 - v3 @kind long;
  #L3fbf3a.  v10:= v7.`n.b.a.s.i.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbf3e.  call temp:= `g`(v10, v8) @signature `Ln/b/a/s/c;.g:(J)I` @kind virtual;
  #L3fbf44.  v10:= temp;
  #L3fbf46.  v0:= v0 - v10 @kind int;
  #L3fbf48.  v5:= (`long`) v0 @kind i2l;
  #L3fbf4a.  v5:= v5 * v3 @kind long;
  #L3fbf4e.  v8:= v8 + v5 @kind long;
  #L3fbf50.  v10:= v7.`n.b.a.s.i.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbf54.  call temp:= `f`(v10) @signature `Ln/b/a/s/a;.f:()Ln/b/a/c;` @kind virtual;
  #L3fbf5a.  v10:= temp @kind object;
  #L3fbf5c.  call temp:= `b`(v10, v8, v1) @signature `Ln/b/a/c;.b:(JI)J` @kind virtual;
  #L3fbf62.  v8:= temp @kind wide;
  #L3fbf64.  return v8 @kind wide;
}
procedure `n.b.a.g` `b`(`n.b.a.s.i` v1 @kind this) @signature `Ln/b/a/s/i;.b:()Ln/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbf78.  v0:= v1.`n.b.a.s.i.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbf7c.  call temp:= `C`(v0) @signature `Ln/b/a/s/a;.C:()Ln/b/a/g;` @kind virtual;
  #L3fbf82.  v0:= temp @kind object;
  #L3fbf84.  return v0 @kind object;
}
procedure `boolean` `b`(`n.b.a.s.i` v1 @kind this, `long` v2 ) @signature `Ln/b/a/s/i;.b:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbd44.  v0:= v1.`n.b.a.s.i.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbd48.  call temp:= `h`(v0, v2) @signature `Ln/b/a/s/c;.h:(J)I` @kind virtual;
  #L3fbd4e.  v2:= temp;
  #L3fbd50.  call temp:= `d`(v0, v2) @signature `Ln/b/a/s/c;.d:(I)I` @kind virtual;
  #L3fbd56.  v2:= temp;
  #L3fbd58.  v3:= 52I;
  #L3fbd5c.  if v2 <= v3 then goto L3fbd64;
  #L3fbd60.  v2:= 1I;
  #L3fbd62.  goto L3fbd66;
  #L3fbd64.  v2:= 0I;
  #L3fbd66.  return v2;
}
procedure `int` `c`(`n.b.a.s.i` v1 @kind this) @signature `Ln/b/a/s/i;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbdac.  v0:= v1.`n.b.a.s.i.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbdb0.  call temp:= `U`(v0) @signature `Ln/b/a/s/c;.U:()I` @kind virtual;
  #L3fbdb6.  v0:= temp;
  #L3fbdb8.  return v0;
}
procedure `long` `c`(`n.b.a.s.i` v2 @kind this, `long` v3 ) @signature `Ln/b/a/s/i;.c:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fbe3c.  call temp:= `e`(v2, v3) @signature `Ln/b/a/s/i;.e:(J)J` @kind virtual;
  #L3fbe42.  v0:= temp @kind wide;
  #L3fbe44.  v3:= v3 - v0 @kind long;
  #L3fbe46.  return v3 @kind wide;
}
procedure `int` `d`(`n.b.a.s.i` v1 @kind this) @signature `Ln/b/a/s/i;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbdcc.  v0:= v1.`n.b.a.s.i.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbdd0.  call temp:= `V`(v0) @signature `Ln/b/a/s/c;.V:()I` @kind virtual;
  #L3fbdd6.  v0:= temp;
  #L3fbdd8.  return v0;
}
procedure `long` `e`(`n.b.a.s.i` v4 @kind this, `long` v5 ) @signature `Ln/b/a/s/i;.e:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3fbe58.  v0:= v4.`n.b.a.s.i.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbe5c.  call temp:= `B`(v0) @signature `Ln/b/a/s/a;.B:()Ln/b/a/c;` @kind virtual;
  #L3fbe62.  v0:= temp @kind object;
  #L3fbe64.  call temp:= `e`(v0, v5) @signature `Ln/b/a/c;.e:(J)J` @kind virtual;
  #L3fbe6a.  v5:= temp @kind wide;
  #L3fbe6c.  v0:= v4.`n.b.a.s.i.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbe70.  call temp:= `g`(v0, v5) @signature `Ln/b/a/s/c;.g:(J)I` @kind virtual;
  #L3fbe76.  v0:= temp;
  #L3fbe78.  v1:= 1I;
  #L3fbe7a.  if v0 <= v1 then goto L3fbe8e;
  #L3fbe7e.  v2:= 604800000L;
  #L3fbe84.  v0:= v0 - v1 @kind int;
  #L3fbe86.  v0:= (`long`) v0 @kind i2l;
  #L3fbe88.  v0:= v0 * v2 @kind long;
  #L3fbe8c.  v5:= v5 - v0 @kind long;
  #L3fbe8e.  return v5 @kind wide;
}
procedure `n.b.a.g` `f`(`n.b.a.s.i` v1 @kind this) @signature `Ln/b/a/s/i;.f:()Ln/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbf98.  v0:= 0I;
  #L3fbf9a.  return v0 @kind object;
}
procedure `boolean` `h`(`n.b.a.s.i` v1 @kind this) @signature `Ln/b/a/s/i;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbd78.  v0:= 0I;
  #L3fbd7a.  return v0;
}
