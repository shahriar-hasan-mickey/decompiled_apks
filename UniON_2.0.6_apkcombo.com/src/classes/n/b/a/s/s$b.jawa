record `n.b.a.s.s$b` @kind class @AccessFlag  extends `n.b.a.t.c` @kind class {
  `n.b.a.g` `n.b.a.s.s$b.c` @AccessFlag FINAL;
  `boolean` `n.b.a.s.s$b.d` @AccessFlag FINAL;
  `n.b.a.f` `n.b.a.s.s$b.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`n.b.a.s.s$b` v1 @kind this, `n.b.a.g` v2 @kind object, `n.b.a.f` v3 @kind object) @signature `Ln/b/a/s/s$b;.<init>:(Ln/b/a/g;Ln/b/a/f;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3fdbcc.  call temp:= `b`(v2) @signature `Ln/b/a/g;.b:()Ln/b/a/h;` @kind virtual;
  #L3fdbd2.  v0:= temp @kind object;
  #L3fdbd4.  call `<init>`(v1, v0) @signature `Ln/b/a/t/c;.<init>:(Ln/b/a/h;)V` @kind direct;
  #L3fdbda.  call temp:= `k`(v2) @signature `Ln/b/a/g;.k:()Z` @kind virtual;
  #L3fdbe0.  v0:= temp;
  #L3fdbe2.  if v0 == 0 then goto L3fdbfc;
  #L3fdbe6.  v1.`n.b.a.s.s$b.c` @type ^`n.b.a.g` := v2 @kind object;
  #L3fdbea.  call temp:= `a`(v2) @signature `Ln/b/a/s/s;.a:(Ln/b/a/g;)Z` @kind static;
  #L3fdbf0.  v2:= temp;
  #L3fdbf2.  v1.`n.b.a.s.s$b.d` @type ^`boolean` := v2 @kind boolean;
  #L3fdbf6.  v1.`n.b.a.s.s$b.e` @type ^`n.b.a.f` := v3 @kind object;
  #L3fdbfa.  return @kind void;
  #L3fdbfc.  v2:= new `java.lang.IllegalArgumentException`;
  #L3fdc00.  call `<init>`(v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3fdc06.  throw v2;
}
procedure `int` `a`(`n.b.a.s.s$b` v8 @kind this, `long` v9 ) @signature `Ln/b/a/s/s$b;.a:(J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3fda60.  v0:= v8.`n.b.a.s.s$b.e` @type ^`n.b.a.f` @kind object;
  #L3fda64.  call temp:= `d`(v0, v9) @signature `Ln/b/a/f;.d:(J)I` @kind virtual;
  #L3fda6a.  v0:= temp;
  #L3fda6c.  v1:= (`long`) v0 @kind i2l;
  #L3fda6e.  v3:= v9 - v1 @kind long;
  #L3fda72.  v3:= v3 ^~ v9 @kind long;
  #L3fda74.  v5:= 0L;
  #L3fda78.  v7:= lcmp(v3, v5);
  #L3fda7c.  if v7 >= 0 then goto L3fda9c;
  #L3fda80.  v9:= v9 ^~ v1 @kind long;
  #L3fda82.  v1:= lcmp(v9, v5);
  #L3fda86.  if v1 < 0 then goto L3fda8c;
  #L3fda8a.  goto L3fda9c;
  #L3fda8c.  v9:= new `java.lang.ArithmeticException`;
  #L3fda90.  v10:= "Subtracting time zone offset caused overflow" @kind object;
  #L3fda94.  call `<init>`(v9, v10) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fda9a.  throw v9;
  #L3fda9c.  return v0;
}
procedure `int` `b`(`n.b.a.s.s$b` v8 @kind this, `long` v9 ) @signature `Ln/b/a/s/s$b;.b:(J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3fdab0.  v0:= v8.`n.b.a.s.s$b.e` @type ^`n.b.a.f` @kind object;
  #L3fdab4.  call temp:= `c`(v0, v9) @signature `Ln/b/a/f;.c:(J)I` @kind virtual;
  #L3fdaba.  v0:= temp;
  #L3fdabc.  v1:= (`long`) v0 @kind i2l;
  #L3fdabe.  v3:= v9 + v1 @kind long;
  #L3fdac2.  v3:= v3 ^~ v9 @kind long;
  #L3fdac4.  v5:= 0L;
  #L3fdac8.  v7:= lcmp(v3, v5);
  #L3fdacc.  if v7 >= 0 then goto L3fdaec;
  #L3fdad0.  v9:= v9 ^~ v1 @kind long;
  #L3fdad2.  v1:= lcmp(v9, v5);
  #L3fdad6.  if v1 >= 0 then goto L3fdadc;
  #L3fdada.  goto L3fdaec;
  #L3fdadc.  v9:= new `java.lang.ArithmeticException`;
  #L3fdae0.  v10:= "Adding time zone offset caused overflow" @kind object;
  #L3fdae4.  call `<init>`(v9, v10) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fdaea.  throw v9;
  #L3fdaec.  return v0;
}
procedure `long` `a`(`n.b.a.s.s$b` v4 @kind this, `long` v5 , `int` v7 ) @signature `Ln/b/a/s/s$b;.a:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3fdb2c.  call temp:= `b`(v4, v5) @signature `Ln/b/a/s/s$b;.b:(J)I` @kind direct;
  #L3fdb32.  v0:= temp;
  #L3fdb34.  v1:= v4.`n.b.a.s.s$b.c` @type ^`n.b.a.g` @kind object;
  #L3fdb38.  v2:= (`long`) v0 @kind i2l;
  #L3fdb3a.  v5:= v5 + v2 @kind long;
  #L3fdb3c.  call temp:= `a`(v1, v5, v7) @signature `Ln/b/a/g;.a:(JI)J` @kind virtual;
  #L3fdb42.  v5:= temp @kind wide;
  #L3fdb44.  v7:= v4.`n.b.a.s.s$b.d` @type ^`boolean` @kind boolean;
  #L3fdb48.  if v7 == 0 then goto L3fdb4e;
  #L3fdb4c.  goto L3fdb56;
  #L3fdb4e.  call temp:= `a`(v4, v5) @signature `Ln/b/a/s/s$b;.a:(J)I` @kind direct;
  #L3fdb54.  v0:= temp;
  #L3fdb56.  v0:= (`long`) v0 @kind i2l;
  #L3fdb58.  v5:= v5 - v0 @kind long;
  #L3fdb5a.  return v5 @kind wide;
}
procedure `long` `a`(`n.b.a.s.s$b` v4 @kind this, `long` v5 , `long` v7 ) @signature `Ln/b/a/s/s$b;.a:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3fdb6c.  call temp:= `b`(v4, v5) @signature `Ln/b/a/s/s$b;.b:(J)I` @kind direct;
  #L3fdb72.  v0:= temp;
  #L3fdb74.  v1:= v4.`n.b.a.s.s$b.c` @type ^`n.b.a.g` @kind object;
  #L3fdb78.  v2:= (`long`) v0 @kind i2l;
  #L3fdb7a.  v5:= v5 + v2 @kind long;
  #L3fdb7c.  call temp:= `a`(v1, v5, v7) @signature `Ln/b/a/g;.a:(JJ)J` @kind virtual;
  #L3fdb82.  v5:= temp @kind wide;
  #L3fdb84.  v7:= v4.`n.b.a.s.s$b.d` @type ^`boolean` @kind boolean;
  #L3fdb88.  if v7 == 0 then goto L3fdb8e;
  #L3fdb8c.  goto L3fdb96;
  #L3fdb8e.  call temp:= `a`(v4, v5) @signature `Ln/b/a/s/s$b;.a:(J)I` @kind direct;
  #L3fdb94.  v0:= temp;
  #L3fdb96.  v7:= (`long`) v0 @kind i2l;
  #L3fdb98.  v5:= v5 - v7 @kind long;
  #L3fdb9a.  return v5 @kind wide;
}
procedure `long` `e`(`n.b.a.s.s$b` v2 @kind this) @signature `Ln/b/a/s/s$b;.e:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fdbac.  v0:= v2.`n.b.a.s.s$b.c` @type ^`n.b.a.g` @kind object;
  #L3fdbb0.  call temp:= `e`(v0) @signature `Ln/b/a/g;.e:()J` @kind virtual;
  #L3fdbb6.  v0:= temp @kind wide;
  #L3fdbb8.  return v0 @kind wide;
}
procedure `boolean` `equals`(`n.b.a.s.s$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ln/b/a/s/s$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3fd9b8.  v0:= 1I;
  #L3fd9ba.  if v4 != v5 then goto L3fd9c0;
  #L3fd9be.  return v0;
  #L3fd9c0.  v1:= instanceof @variable v5 @type ^`n.b.a.s.s$b` @kind boolean;
  #L3fd9c4.  v2:= 0I;
  #L3fd9c6.  if v1 == 0 then goto L3fd9fc;
  #L3fd9ca.  v5:= (`n.b.a.s.s$b`) v5 @kind object;
  #L3fd9ce.  v1:= v4.`n.b.a.s.s$b.c` @type ^`n.b.a.g` @kind object;
  #L3fd9d2.  v3:= v5.`n.b.a.s.s$b.c` @type ^`n.b.a.g` @kind object;
  #L3fd9d6.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3fd9dc.  v1:= temp;
  #L3fd9de.  if v1 == 0 then goto L3fd9f8;
  #L3fd9e2.  v1:= v4.`n.b.a.s.s$b.e` @type ^`n.b.a.f` @kind object;
  #L3fd9e6.  v5:= v5.`n.b.a.s.s$b.e` @type ^`n.b.a.f` @kind object;
  #L3fd9ea.  call temp:= `equals`(v1, v5) @signature `Ln/b/a/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3fd9f0.  v5:= temp;
  #L3fd9f2.  if v5 == 0 then goto L3fd9f8;
  #L3fd9f6.  goto L3fd9fa;
  #L3fd9f8.  v0:= 0I;
  #L3fd9fa.  return v0;
  #L3fd9fc.  return v2;
}
procedure `boolean` `h`(`n.b.a.s.s$b` v1 @kind this) @signature `Ln/b/a/s/s$b;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fda10.  v0:= v1.`n.b.a.s.s$b.d` @type ^`boolean` @kind boolean;
  #L3fda14.  if v0 == 0 then goto L3fda26;
  #L3fda18.  v0:= v1.`n.b.a.s.s$b.c` @type ^`n.b.a.g` @kind object;
  #L3fda1c.  call temp:= `h`(v0) @signature `Ln/b/a/g;.h:()Z` @kind virtual;
  #L3fda22.  v0:= temp;
  #L3fda24.  goto L3fda4c;
  #L3fda26.  v0:= v1.`n.b.a.s.s$b.c` @type ^`n.b.a.g` @kind object;
  #L3fda2a.  call temp:= `h`(v0) @signature `Ln/b/a/g;.h:()Z` @kind virtual;
  #L3fda30.  v0:= temp;
  #L3fda32.  if v0 == 0 then goto L3fda4a;
  #L3fda36.  v0:= v1.`n.b.a.s.s$b.e` @type ^`n.b.a.f` @kind object;
  #L3fda3a.  call temp:= `b`(v0) @signature `Ln/b/a/f;.b:()Z` @kind virtual;
  #L3fda40.  v0:= temp;
  #L3fda42.  if v0 == 0 then goto L3fda4a;
  #L3fda46.  v0:= 1I;
  #L3fda48.  goto L3fda4c;
  #L3fda4a.  v0:= 0I;
  #L3fda4c.  return v0;
}
procedure `int` `hashCode`(`n.b.a.s.s$b` v2 @kind this) @signature `Ln/b/a/s/s$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fdb00.  v0:= v2.`n.b.a.s.s$b.c` @type ^`n.b.a.g` @kind object;
  #L3fdb04.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3fdb0a.  v0:= temp;
  #L3fdb0c.  v1:= v2.`n.b.a.s.s$b.e` @type ^`n.b.a.f` @kind object;
  #L3fdb10.  call temp:= `hashCode`(v1) @signature `Ln/b/a/f;.hashCode:()I` @kind virtual;
  #L3fdb16.  v1:= temp;
  #L3fdb18.  v0:= v0 ^~ v1 @kind int;
  #L3fdb1a.  return v0;
}
