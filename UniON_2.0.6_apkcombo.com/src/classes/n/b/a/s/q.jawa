record `n.b.a.s.q` @kind class @AccessFlag PUBLIC_FINAL extends `n.b.a.s.a` @kind class {
}
global `n.b.a.s.q` `@@n.b.a.s.q.M` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentHashMap` `@@n.b.a.s.q.N` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln/b/a/s/q;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3fd1f8.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L3fd1fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L3fd202.  `@@n.b.a.s.q.N` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L3fd206.  v0:= new `n.b.a.s.q`;
  #L3fd20a.  call temp:= `Z`() @signature `Ln/b/a/s/p;.Z:()Ln/b/a/s/p;` @kind static;
  #L3fd210.  v1:= temp @kind object;
  #L3fd212.  call `<init>`(v0, v1) @signature `Ln/b/a/s/q;.<init>:(Ln/b/a/a;)V` @kind direct;
  #L3fd218.  `@@n.b.a.s.q.M` @type ^`n.b.a.s.q` := v0 @kind object;
  #L3fd21c.  v0:= `@@n.b.a.s.q.N` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3fd220.  v1:= `@@n.b.a.f.c` @type ^`n.b.a.f` @kind object;
  #L3fd224.  v2:= `@@n.b.a.s.q.M` @type ^`n.b.a.s.q` @kind object;
  #L3fd228.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3fd22e.  return @kind void;
}
procedure `void` `<init>`(`n.b.a.s.q` v1 @kind this, `n.b.a.a` v2 @kind object) @signature `Ln/b/a/s/q;.<init>:(Ln/b/a/a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3fd240.  v0:= 0I;
  #L3fd242.  call `<init>`(v1, v2, v0) @signature `Ln/b/a/s/a;.<init>:(Ln/b/a/a;Ljava/lang/Object;)V` @kind direct;
  #L3fd248.  return @kind void;
}
procedure `n.b.a.s.q` `N`() @signature `Ln/b/a/s/q;.N:()Ln/b/a/s/q;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3fd15c.  call temp:= `d`() @signature `Ln/b/a/f;.d:()Ln/b/a/f;` @kind static;
  #L3fd162.  v0:= temp @kind object;
  #L3fd164.  call temp:= `b`(v0) @signature `Ln/b/a/s/q;.b:(Ln/b/a/f;)Ln/b/a/s/q;` @kind static;
  #L3fd16a.  v0:= temp @kind object;
  #L3fd16c.  return v0 @kind object;
}
procedure `n.b.a.s.q` `O`() @signature `Ln/b/a/s/q;.O:()Ln/b/a/s/q;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3fd1e0.  v0:= `@@n.b.a.s.q.M` @type ^`n.b.a.s.q` @kind object;
  #L3fd1e4.  return v0 @kind object;
}
procedure `n.b.a.s.q` `b`(`n.b.a.f` v2 @kind object) @signature `Ln/b/a/s/q;.b:(Ln/b/a/f;)Ln/b/a/s/q;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3fd180.  if v2 != 0 then goto L3fd18c;
  #L3fd184.  call temp:= `d`() @signature `Ln/b/a/f;.d:()Ln/b/a/f;` @kind static;
  #L3fd18a.  v2:= temp @kind object;
  #L3fd18c.  v0:= `@@n.b.a.s.q.N` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3fd190.  call temp:= `get`(v0, v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3fd196.  v0:= temp @kind object;
  #L3fd198.  v0:= (`n.b.a.s.q`) v0 @kind object;
  #L3fd19c.  if v0 != 0 then goto L3fd1cc;
  #L3fd1a0.  v0:= new `n.b.a.s.q`;
  #L3fd1a4.  v1:= `@@n.b.a.s.q.M` @type ^`n.b.a.s.q` @kind object;
  #L3fd1a8.  call temp:= `a`(v1, v2) @signature `Ln/b/a/s/s;.a:(Ln/b/a/a;Ln/b/a/f;)Ln/b/a/s/s;` @kind static;
  #L3fd1ae.  v1:= temp @kind object;
  #L3fd1b0.  call `<init>`(v0, v1) @signature `Ln/b/a/s/q;.<init>:(Ln/b/a/a;)V` @kind direct;
  #L3fd1b6.  v1:= `@@n.b.a.s.q.N` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3fd1ba.  call temp:= `putIfAbsent`(v1, v2, v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3fd1c0.  v2:= temp @kind object;
  #L3fd1c2.  v2:= (`n.b.a.s.q`) v2 @kind object;
  #L3fd1c6.  if v2 == 0 then goto L3fd1cc;
  #L3fd1ca.  v0:= v2 @kind object;
  #L3fd1cc.  return v0 @kind object;
}
procedure `n.b.a.a` `G`(`n.b.a.s.q` v1 @kind this) @signature `Ln/b/a/s/q;.G:()Ln/b/a/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fd110.  v0:= `@@n.b.a.s.q.M` @type ^`n.b.a.s.q` @kind object;
  #L3fd114.  return v0 @kind object;
}
procedure `n.b.a.a` `a`(`n.b.a.s.q` v1 @kind this, `n.b.a.f` v2 @kind object) @signature `Ln/b/a/s/q;.a:(Ln/b/a/f;)Ln/b/a/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fd128.  if v2 != 0 then goto L3fd134;
  #L3fd12c.  call temp:= `d`() @signature `Ln/b/a/f;.d:()Ln/b/a/f;` @kind static;
  #L3fd132.  v2:= temp @kind object;
  #L3fd134.  call temp:= `k`(v1) @signature `Ln/b/a/s/a;.k:()Ln/b/a/f;` @kind virtual;
  #L3fd13a.  v0:= temp @kind object;
  #L3fd13c.  if v2 != v0 then goto L3fd142;
  #L3fd140.  return v1 @kind object;
  #L3fd142.  call temp:= `b`(v2) @signature `Ln/b/a/s/q;.b:(Ln/b/a/f;)Ln/b/a/s/q;` @kind static;
  #L3fd148.  v2:= temp @kind object;
  #L3fd14a.  return v2 @kind object;
}
procedure `void` `a`(`n.b.a.s.q` v4 @kind this, `n.b.a.s.a$a` v5 @kind object) @signature `Ln/b/a/s/q;.a:(Ln/b/a/s/a$a;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3fd25c.  call temp:= `L`(v4) @signature `Ln/b/a/s/a;.L:()Ln/b/a/a;` @kind virtual;
  #L3fd262.  v0:= temp @kind object;
  #L3fd264.  call temp:= `k`(v0) @signature `Ln/b/a/a;.k:()Ln/b/a/f;` @kind virtual;
  #L3fd26a.  v0:= temp @kind object;
  #L3fd26c.  v1:= `@@n.b.a.f.c` @type ^`n.b.a.f` @kind object;
  #L3fd270.  if v0 != v1 then goto L3fd2e2;
  #L3fd274.  v0:= new `n.b.a.t.f`;
  #L3fd278.  v1:= `@@n.b.a.s.r.c` @type ^`n.b.a.c` @kind object;
  #L3fd27c.  call temp:= `c`() @signature `Ln/b/a/d;.c:()Ln/b/a/d;` @kind static;
  #L3fd282.  v2:= temp @kind object;
  #L3fd284.  v3:= 100I;
  #L3fd288.  call `<init>`(v0, v1, v2, v3) @signature `Ln/b/a/t/f;.<init>:(Ln/b/a/c;Ln/b/a/d;I)V` @kind direct;
  #L3fd28e.  v5.`n.b.a.s.a$a.H` @type ^`n.b.a.c` := v0 @kind object;
  #L3fd292.  v0:= v5.`n.b.a.s.a$a.H` @type ^`n.b.a.c` @kind object;
  #L3fd296.  call temp:= `a`(v0) @signature `Ln/b/a/c;.a:()Ln/b/a/g;` @kind virtual;
  #L3fd29c.  v0:= temp @kind object;
  #L3fd29e.  v5.`n.b.a.s.a$a.k` @type ^`n.b.a.g` := v0 @kind object;
  #L3fd2a2.  v0:= new `n.b.a.t.n`;
  #L3fd2a6.  v1:= v5.`n.b.a.s.a$a.H` @type ^`n.b.a.c` @kind object;
  #L3fd2aa.  v1:= (`n.b.a.t.f`) v1 @kind object;
  #L3fd2ae.  call temp:= `x`() @signature `Ln/b/a/d;.x:()Ln/b/a/d;` @kind static;
  #L3fd2b4.  v2:= temp @kind object;
  #L3fd2b6.  call `<init>`(v0, v1, v2) @signature `Ln/b/a/t/n;.<init>:(Ln/b/a/t/f;Ln/b/a/d;)V` @kind direct;
  #L3fd2bc.  v5.`n.b.a.s.a$a.G` @type ^`n.b.a.c` := v0 @kind object;
  #L3fd2c0.  v0:= new `n.b.a.t.n`;
  #L3fd2c4.  v1:= v5.`n.b.a.s.a$a.H` @type ^`n.b.a.c` @kind object;
  #L3fd2c8.  v1:= (`n.b.a.t.f`) v1 @kind object;
  #L3fd2cc.  v2:= v5.`n.b.a.s.a$a.h` @type ^`n.b.a.g` @kind object;
  #L3fd2d0.  call temp:= `v`() @signature `Ln/b/a/d;.v:()Ln/b/a/d;` @kind static;
  #L3fd2d6.  v3:= temp @kind object;
  #L3fd2d8.  call `<init>`(v0, v1, v2, v3) @signature `Ln/b/a/t/n;.<init>:(Ln/b/a/t/f;Ln/b/a/g;Ln/b/a/d;)V` @kind direct;
  #L3fd2de.  v5.`n.b.a.s.a$a.C` @type ^`n.b.a.c` := v0 @kind object;
  #L3fd2e2.  return @kind void;
}
procedure `boolean` `equals`(`n.b.a.s.q` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ln/b/a/s/q;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fd03c.  if v1 != v2 then goto L3fd044;
  #L3fd040.  v2:= 1I;
  #L3fd042.  return v2;
  #L3fd044.  v0:= instanceof @variable v2 @type ^`n.b.a.s.q` @kind boolean;
  #L3fd048.  if v0 == 0 then goto L3fd06a;
  #L3fd04c.  v2:= (`n.b.a.s.q`) v2 @kind object;
  #L3fd050.  call temp:= `k`(v1) @signature `Ln/b/a/s/a;.k:()Ln/b/a/f;` @kind virtual;
  #L3fd056.  v0:= temp @kind object;
  #L3fd058.  call temp:= `k`(v2) @signature `Ln/b/a/s/a;.k:()Ln/b/a/f;` @kind virtual;
  #L3fd05e.  v2:= temp @kind object;
  #L3fd060.  call temp:= `equals`(v0, v2) @signature `Ln/b/a/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3fd066.  v2:= temp;
  #L3fd068.  return v2;
  #L3fd06a.  v2:= 0I;
  #L3fd06c.  return v2;
}
procedure `int` `hashCode`(`n.b.a.s.q` v2 @kind this) @signature `Ln/b/a/s/q;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fd080.  v0:= "ISO" @kind object;
  #L3fd084.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L3fd08a.  v0:= temp;
  #L3fd08c.  v0:= v0 * 11;
  #L3fd090.  call temp:= `k`(v2) @signature `Ln/b/a/s/a;.k:()Ln/b/a/f;` @kind virtual;
  #L3fd096.  v1:= temp @kind object;
  #L3fd098.  call temp:= `hashCode`(v1) @signature `Ln/b/a/f;.hashCode:()I` @kind virtual;
  #L3fd09e.  v1:= temp;
  #L3fd0a0.  v0:= v0 + v1 @kind int;
  #L3fd0a2.  return v0;
}
procedure `java.lang.String` `toString`(`n.b.a.s.q` v3 @kind this) @signature `Ln/b/a/s/q;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fd0b4.  call temp:= `k`(v3) @signature `Ln/b/a/s/a;.k:()Ln/b/a/f;` @kind virtual;
  #L3fd0ba.  v0:= temp @kind object;
  #L3fd0bc.  v1:= "ISOChronology" @kind object;
  #L3fd0c0.  if v0 == 0 then goto L3fd0fe;
  #L3fd0c4.  v2:= new `java.lang.StringBuilder`;
  #L3fd0c8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fd0ce.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd0d4.  v1:= 91I;
  #L3fd0d8.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd0de.  call temp:= `a`(v0) @signature `Ln/b/a/f;.a:()Ljava/lang/String;` @kind virtual;
  #L3fd0e4.  v0:= temp @kind object;
  #L3fd0e6.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd0ec.  v0:= 93I;
  #L3fd0f0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd0f6.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fd0fc.  v1:= temp @kind object;
  #L3fd0fe.  return v1 @kind object;
}
