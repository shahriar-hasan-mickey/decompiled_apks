record `n.b.a.s.g` @kind class @AccessFlag  extends `n.b.a.t.h` @kind class {
  `n.b.a.s.c` `n.b.a.s.g.d` @AccessFlag PRIVATE_FINAL;
  `int` `n.b.a.s.g.e` @AccessFlag PRIVATE_FINAL;
  `int` `n.b.a.s.g.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.b.a.s.g` v3 @kind this, `n.b.a.s.c` v4 @kind object, `int` v5 ) @signature `Ln/b/a/s/g;.<init>:(Ln/b/a/s/c;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3fbbb8.  call temp:= `q`() @signature `Ln/b/a/d;.q:()Ln/b/a/d;` @kind static;
  #L3fbbbe.  v0:= temp @kind object;
  #L3fbbc0.  call temp:= `O`(v4) @signature `Ln/b/a/s/c;.O:()J` @kind virtual;
  #L3fbbc6.  v1:= temp @kind wide;
  #L3fbbc8.  call `<init>`(v3, v0, v1) @signature `Ln/b/a/t/h;.<init>:(Ln/b/a/d;J)V` @kind direct;
  #L3fbbce.  v3.`n.b.a.s.g.d` @type ^`n.b.a.s.c` := v4 @kind object;
  #L3fbbd2.  v4:= v3.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbbd6.  call temp:= `T`(v4) @signature `Ln/b/a/s/c;.T:()I` @kind virtual;
  #L3fbbdc.  v4:= temp;
  #L3fbbde.  v3.`n.b.a.s.g.e` @type ^`int` := v4;
  #L3fbbe2.  v3.`n.b.a.s.g.f` @type ^`int` := v5;
  #L3fbbe6.  return @kind void;
}
procedure `int` `a`(`n.b.a.s.g` v1 @kind this, `long` v2 ) @signature `Ln/b/a/s/g;.a:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb814.  v0:= v1.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb818.  call temp:= `f`(v0, v2) @signature `Ln/b/a/s/c;.f:(J)I` @kind virtual;
  #L3fb81e.  v2:= temp;
  #L3fb820.  return v2;
}
procedure `long` `a`(`n.b.a.s.g` v8 @kind this, `long` v9 , `int` v11 ) @signature `Ln/b/a/s/g;.a:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3fb860.  if v11 != 0 then goto L3fb866;
  #L3fb864.  return v9 @kind wide;
  #L3fb866.  v0:= v8.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb86a.  call temp:= `e`(v0, v9) @signature `Ln/b/a/s/c;.e:(J)I` @kind virtual;
  #L3fb870.  v0:= temp;
  #L3fb872.  v0:= (`long`) v0 @kind i2l;
  #L3fb874.  v2:= v8.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb878.  call temp:= `i`(v2, v9) @signature `Ln/b/a/s/c;.i:(J)I` @kind virtual;
  #L3fb87e.  v2:= temp;
  #L3fb880.  v3:= v8.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb884.  call temp:= `d`(v3, v9, v2) @signature `Ln/b/a/s/c;.d:(JI)I` @kind virtual;
  #L3fb88a.  v3:= temp;
  #L3fb88c.  v4:= v3 + -1;
  #L3fb890.  v5:= v4 + v11 @kind int;
  #L3fb894.  if v3 <= 0 then goto L3fb8d8;
  #L3fb898.  if v5 >= 0 then goto L3fb8d8;
  #L3fb89c.  v5:= v8.`n.b.a.s.g.e` @type ^`int`;
  #L3fb8a0.  v5:= v5 + v11 @kind int;
  #L3fb8a2.  v5:= (`float`) v5 @kind i2f;
  #L3fb8a4.  call temp:= `signum`(v5) @signature `Ljava/lang/Math;.signum:(F)F` @kind static;
  #L3fb8aa.  v5:= temp;
  #L3fb8ac.  v6:= (`float`) v11 @kind i2f;
  #L3fb8ae.  call temp:= `signum`(v6) @signature `Ljava/lang/Math;.signum:(F)F` @kind static;
  #L3fb8b4.  v6:= temp;
  #L3fb8b6.  v5:= fcmpl(v5, v6);
  #L3fb8ba.  if v5 != 0 then goto L3fb8ca;
  #L3fb8be.  v5:= v2 + -1;
  #L3fb8c2.  v6:= v8.`n.b.a.s.g.e` @type ^`int`;
  #L3fb8c6.  v11:= v11 + v6 @kind int;
  #L3fb8c8.  goto L3fb8d4;
  #L3fb8ca.  v5:= v2 + 1;
  #L3fb8ce.  v6:= v8.`n.b.a.s.g.e` @type ^`int`;
  #L3fb8d2.  v11:= v11 - v6 @kind int;
  #L3fb8d4.  v11:= v11 + v4 @kind int;
  #L3fb8d6.  goto L3fb8dc;
  #L3fb8d8.  v11:= v5;
  #L3fb8da.  v5:= v2;
  #L3fb8dc.  v4:= 1I;
  #L3fb8de.  v6:= v8.`n.b.a.s.g.e` @type ^`int`;
  #L3fb8e2.  if v11 < 0 then goto L3fb8f2;
  #L3fb8e6.  v7:= v11 / v6 @kind int;
  #L3fb8ea.  v5:= v5 + v7 @kind int;
  #L3fb8ec.  v11:= v11 %% v6 @kind int;
  #L3fb8ee.  v11:= v11 + v4 @kind int;
  #L3fb8f0.  goto L3fb920;
  #L3fb8f2.  v6:= v11 / v6 @kind int;
  #L3fb8f6.  v5:= v5 + v6 @kind int;
  #L3fb8f8.  v5:= v5 - v4 @kind int;
  #L3fb8fa.  call temp:= `abs`(v11) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L3fb900.  v11:= temp;
  #L3fb902.  v6:= v8.`n.b.a.s.g.e` @type ^`int`;
  #L3fb906.  v11:= v11 %% v6 @kind int;
  #L3fb908.  if v11 != 0 then goto L3fb90e;
  #L3fb90c.  v11:= v6;
  #L3fb90e.  v6:= v8.`n.b.a.s.g.e` @type ^`int`;
  #L3fb912.  v6:= v6 - v11 @kind int;
  #L3fb914.  v11:= v6 + 1;
  #L3fb918.  if v11 != v4 then goto L3fb920;
  #L3fb91c.  v5:= v5 + 1;
  #L3fb920.  v4:= v8.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb924.  call temp:= `a`(v4, v9, v2, v3) @signature `Ln/b/a/s/c;.a:(JII)I` @kind virtual;
  #L3fb92a.  v9:= temp;
  #L3fb92c.  v10:= v8.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb930.  call temp:= `a`(v10, v5, v11) @signature `Ln/b/a/s/c;.a:(II)I` @kind virtual;
  #L3fb936.  v10:= temp;
  #L3fb938.  if v9 <= v10 then goto L3fb93e;
  #L3fb93c.  v9:= v10;
  #L3fb93e.  v10:= v8.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb942.  call temp:= `a`(v10, v5, v11, v9) @signature `Ln/b/a/s/c;.a:(III)J` @kind virtual;
  #L3fb948.  v9:= temp @kind wide;
  #L3fb94a.  v9:= v9 + v0 @kind long;
  #L3fb94c.  return v9 @kind wide;
}
procedure `long` `a`(`n.b.a.s.g` v16 @kind this, `long` v17 , `long` v19 ) @signature `Ln/b/a/s/g;.a:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L3fb960.  v0:= v16 @kind object;
  #L3fb964.  v1:= v17 @kind wide;
  #L3fb968.  v3:= v19 @kind wide;
  #L3fb96c.  v5:= (`int`) v3 @kind l2i;
  #L3fb96e.  v6:= (`long`) v5 @kind i2l;
  #L3fb970.  v8:= lcmp(v6, v3);
  #L3fb974.  if v8 != 0 then goto L3fb982;
  #L3fb978.  call temp:= `a`(v0, v1, v5) @signature `Ln/b/a/s/g;.a:(JI)J` @kind virtual;
  #L3fb97e.  v1:= temp @kind wide;
  #L3fb980.  return v1 @kind wide;
  #L3fb982.  v5:= v0.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb986.  call temp:= `e`(v5, v1) @signature `Ln/b/a/s/c;.e:(J)I` @kind virtual;
  #L3fb98c.  v5:= temp;
  #L3fb98e.  v5:= (`long`) v5 @kind i2l;
  #L3fb990.  v7:= v0.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb994.  call temp:= `i`(v7, v1) @signature `Ln/b/a/s/c;.i:(J)I` @kind virtual;
  #L3fb99a.  v7:= temp;
  #L3fb99c.  v8:= v0.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb9a0.  call temp:= `d`(v8, v1, v7) @signature `Ln/b/a/s/c;.d:(JI)I` @kind virtual;
  #L3fb9a6.  v8:= temp;
  #L3fb9a8.  v9:= v8 + -1;
  #L3fb9ac.  v9:= (`long`) v9 @kind i2l;
  #L3fb9ae.  v9:= v9 + v3 @kind long;
  #L3fb9b0.  v11:= 0L;
  #L3fb9b4.  v15:= lcmp(v9, v11);
  #L3fb9b8.  if v15 < 0 then goto L3fb9d6;
  #L3fb9bc.  v11:= (`long`) v7 @kind i2l;
  #L3fb9be.  v15:= v0.`n.b.a.s.g.e` @type ^`int`;
  #L3fb9c2.  v13:= (`long`) v15 @kind i2l;
  #L3fb9c4.  v13:= v9 / v13 @kind long;
  #L3fb9c8.  v11:= v11 + v13 @kind long;
  #L3fb9ca.  v13:= (`long`) v15 @kind i2l;
  #L3fb9cc.  v9:= v9 %% v13 @kind long;
  #L3fb9ce.  v13:= 1L;
  #L3fb9d2.  v9:= v9 + v13 @kind long;
  #L3fb9d4.  goto L3fba22;
  #L3fb9d6.  v13:= 1L;
  #L3fb9da.  v11:= (`long`) v7 @kind i2l;
  #L3fb9dc.  v15:= v0.`n.b.a.s.g.e` @type ^`int`;
  #L3fb9e0.  v13:= (`long`) v15 @kind i2l;
  #L3fb9e2.  v13:= v9 / v13 @kind long;
  #L3fb9e6.  v11:= v11 + v13 @kind long;
  #L3fb9e8.  v13:= 1L;
  #L3fb9ec.  v11:= v11 - v13 @kind long;
  #L3fb9ee.  call temp:= `abs`(v9) @signature `Ljava/lang/Math;.abs:(J)J` @kind static;
  #L3fb9f4.  v9:= temp @kind wide;
  #L3fb9f6.  v13:= v0.`n.b.a.s.g.e` @type ^`int`;
  #L3fb9fa.  v14:= (`long`) v13 @kind i2l;
  #L3fb9fc.  v9:= v9 %% v14 @kind long;
  #L3fb9fe.  v10:= (`int`) v9 @kind l2i;
  #L3fba00.  if v10 != 0 then goto L3fba06;
  #L3fba04.  goto L3fba08;
  #L3fba06.  v13:= v10;
  #L3fba08.  v9:= v0.`n.b.a.s.g.e` @type ^`int`;
  #L3fba0c.  v9:= v9 - v13 @kind int;
  #L3fba0e.  v9:= v9 + 1;
  #L3fba12.  v9:= (`long`) v9 @kind i2l;
  #L3fba14.  v13:= 1L;
  #L3fba18.  v15:= lcmp(v9, v13);
  #L3fba1c.  if v15 != 0 then goto L3fba22;
  #L3fba20.  v11:= v11 + v13 @kind long;
  #L3fba22.  v13:= v0.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fba26.  call temp:= `V`(v13) @signature `Ln/b/a/s/c;.V:()I` @kind virtual;
  #L3fba2c.  v13:= temp;
  #L3fba2e.  v13:= (`long`) v13 @kind i2l;
  #L3fba30.  v15:= lcmp(v11, v13);
  #L3fba34.  if v15 < 0 then goto L3fba80;
  #L3fba38.  v13:= v0.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fba3c.  call temp:= `U`(v13) @signature `Ln/b/a/s/c;.U:()I` @kind virtual;
  #L3fba42.  v13:= temp;
  #L3fba44.  v13:= (`long`) v13 @kind i2l;
  #L3fba46.  v15:= lcmp(v11, v13);
  #L3fba4a.  if v15 > 0 then goto L3fba80;
  #L3fba4e.  v3:= (`int`) v11 @kind l2i;
  #L3fba50.  v4:= (`int`) v9 @kind l2i;
  #L3fba52.  v9:= v0.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fba56.  call temp:= `a`(v9, v1, v7, v8) @signature `Ln/b/a/s/c;.a:(JII)I` @kind virtual;
  #L3fba5c.  v1:= temp;
  #L3fba5e.  v2:= v0.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fba62.  call temp:= `a`(v2, v3, v4) @signature `Ln/b/a/s/c;.a:(II)I` @kind virtual;
  #L3fba68.  v2:= temp;
  #L3fba6a.  if v1 <= v2 then goto L3fba70;
  #L3fba6e.  v1:= v2;
  #L3fba70.  v2:= v0.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fba74.  call temp:= `a`(v2, v3, v4, v1) @signature `Ln/b/a/s/c;.a:(III)J` @kind virtual;
  #L3fba7a.  v1:= temp @kind wide;
  #L3fba7c.  v1:= v1 + v5 @kind long;
  #L3fba7e.  return v1 @kind wide;
  #L3fba80.  v1:= new `java.lang.IllegalArgumentException`;
  #L3fba84.  v2:= new `java.lang.StringBuilder`;
  #L3fba88.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fba8e.  v5:= "Magnitude of add amount is too large: " @kind object;
  #L3fba92.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fba98.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fba9e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fbaa4.  v2:= temp @kind object;
  #L3fbaa6.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fbaac.  throw v1;
}
procedure `long` `b`(`n.b.a.s.g` v3 @kind this, `long` v4 , `int` v6 ) @signature `Ln/b/a/s/g;.b:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fbb14.  v0:= v3.`n.b.a.s.g.e` @type ^`int`;
  #L3fbb18.  v1:= 1I;
  #L3fbb1a.  call `a`(v3, v6, v1, v0) @signature `Ln/b/a/t/g;.a:(Ln/b/a/c;III)V` @kind static;
  #L3fbb20.  v0:= v3.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbb24.  call temp:= `i`(v0, v4) @signature `Ln/b/a/s/c;.i:(J)I` @kind virtual;
  #L3fbb2a.  v0:= temp;
  #L3fbb2c.  v1:= v3.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbb30.  call temp:= `a`(v1, v4, v0) @signature `Ln/b/a/s/c;.a:(JI)I` @kind virtual;
  #L3fbb36.  v1:= temp;
  #L3fbb38.  v2:= v3.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbb3c.  call temp:= `a`(v2, v0, v6) @signature `Ln/b/a/s/c;.a:(II)I` @kind virtual;
  #L3fbb42.  v2:= temp;
  #L3fbb44.  if v1 <= v2 then goto L3fbb4a;
  #L3fbb48.  v1:= v2;
  #L3fbb4a.  v2:= v3.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbb4e.  call temp:= `a`(v2, v0, v6, v1) @signature `Ln/b/a/s/c;.a:(III)J` @kind virtual;
  #L3fbb54.  v0:= temp @kind wide;
  #L3fbb56.  v6:= v3.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbb5a.  call temp:= `e`(v6, v4) @signature `Ln/b/a/s/c;.e:(J)I` @kind virtual;
  #L3fbb60.  v4:= temp;
  #L3fbb62.  v4:= (`long`) v4 @kind i2l;
  #L3fbb64.  v0:= v0 + v4 @kind long;
  #L3fbb66.  return v0 @kind wide;
}
procedure `n.b.a.g` `b`(`n.b.a.s.g` v1 @kind this) @signature `Ln/b/a/s/g;.b:()Ln/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbb78.  v0:= v1.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbb7c.  call temp:= `h`(v0) @signature `Ln/b/a/s/a;.h:()Ln/b/a/g;` @kind virtual;
  #L3fbb82.  v0:= temp @kind object;
  #L3fbb84.  return v0 @kind object;
}
procedure `boolean` `b`(`n.b.a.s.g` v3 @kind this, `long` v4 ) @signature `Ln/b/a/s/g;.b:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fb7b8.  v0:= v3.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb7bc.  call temp:= `i`(v0, v4) @signature `Ln/b/a/s/c;.i:(J)I` @kind virtual;
  #L3fb7c2.  v0:= temp;
  #L3fb7c4.  v1:= v3.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb7c8.  call temp:= `f`(v1, v0) @signature `Ln/b/a/s/c;.f:(I)Z` @kind virtual;
  #L3fb7ce.  v1:= temp;
  #L3fb7d0.  v2:= 0I;
  #L3fb7d2.  if v1 == 0 then goto L3fb7ec;
  #L3fb7d6.  v1:= v3.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fb7da.  call temp:= `d`(v1, v4, v0) @signature `Ln/b/a/s/c;.d:(JI)I` @kind virtual;
  #L3fb7e0.  v4:= temp;
  #L3fb7e2.  v5:= v3.`n.b.a.s.g.f` @type ^`int`;
  #L3fb7e6.  if v4 != v5 then goto L3fb7ec;
  #L3fb7ea.  v2:= 1I;
  #L3fb7ec.  return v2;
}
procedure `int` `c`(`n.b.a.s.g` v1 @kind this) @signature `Ln/b/a/s/g;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb834.  v0:= v1.`n.b.a.s.g.e` @type ^`int`;
  #L3fb838.  return v0;
}
procedure `long` `c`(`n.b.a.s.g` v2 @kind this, `long` v3 ) @signature `Ln/b/a/s/g;.c:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fbac0.  call temp:= `e`(v2, v3) @signature `Ln/b/a/s/g;.e:(J)J` @kind virtual;
  #L3fbac6.  v0:= temp @kind wide;
  #L3fbac8.  v3:= v3 - v0 @kind long;
  #L3fbaca.  return v3 @kind wide;
}
procedure `int` `d`(`n.b.a.s.g` v1 @kind this) @signature `Ln/b/a/s/g;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb84c.  v0:= 1I;
  #L3fb84e.  return v0;
}
procedure `long` `e`(`n.b.a.s.g` v2 @kind this, `long` v3 ) @signature `Ln/b/a/s/g;.e:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fbadc.  v0:= v2.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbae0.  call temp:= `i`(v0, v3) @signature `Ln/b/a/s/c;.i:(J)I` @kind virtual;
  #L3fbae6.  v0:= temp;
  #L3fbae8.  v1:= v2.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbaec.  call temp:= `d`(v1, v3, v0) @signature `Ln/b/a/s/c;.d:(JI)I` @kind virtual;
  #L3fbaf2.  v3:= temp;
  #L3fbaf4.  v4:= v2.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbaf8.  call temp:= `c`(v4, v0, v3) @signature `Ln/b/a/s/c;.c:(II)J` @kind virtual;
  #L3fbafe.  v3:= temp @kind wide;
  #L3fbb00.  return v3 @kind wide;
}
procedure `n.b.a.g` `f`(`n.b.a.s.g` v1 @kind this) @signature `Ln/b/a/s/g;.f:()Ln/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbb98.  v0:= v1.`n.b.a.s.g.d` @type ^`n.b.a.s.c` @kind object;
  #L3fbb9c.  call temp:= `K`(v0) @signature `Ln/b/a/s/a;.K:()Ln/b/a/g;` @kind virtual;
  #L3fbba2.  v0:= temp @kind object;
  #L3fbba4.  return v0 @kind object;
}
procedure `boolean` `h`(`n.b.a.s.g` v1 @kind this) @signature `Ln/b/a/s/g;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fb800.  v0:= 0I;
  #L3fb802.  return v0;
}
