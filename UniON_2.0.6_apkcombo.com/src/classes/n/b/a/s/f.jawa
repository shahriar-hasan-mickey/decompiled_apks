record `n.b.a.s.f` @kind class @AccessFlag ABSTRACT extends `n.b.a.s.c` @kind class {
}
global `int`[] `@@n.b.a.s.f.g0` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@n.b.a.s.f.h0` @AccessFlag PRIVATE_STATIC_FINAL;
global `long`[] `@@n.b.a.s.f.i0` @AccessFlag PRIVATE_STATIC_FINAL;
global `long`[] `@@n.b.a.s.f.j0` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln/b/a/s/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3fb6a0.  v0:= 12I;
  #L3fb6a4.  v1:= new `int`[v0];
  #L3fb6a8.  goto L3fb720;
  #L3fb6ae.  `@@n.b.a.s.f.g0` @type ^`int`[] := v1 @kind object;
  #L3fb6b2.  v1:= new `int`[v0];
  #L3fb6b6.  goto L3fb758;
  #L3fb6bc.  `@@n.b.a.s.f.h0` @type ^`int`[] := v1 @kind object;
  #L3fb6c0.  v1:= new `long`[v0];
  #L3fb6c4.  `@@n.b.a.s.f.i0` @type ^`long`[] := v1 @kind object;
  #L3fb6c8.  v0:= new `long`[v0];
  #L3fb6cc.  `@@n.b.a.s.f.j0` @type ^`long`[] := v0 @kind object;
  #L3fb6d0.  v0:= 0L;
  #L3fb6d4.  v2:= 0I;
  #L3fb6d6.  v3:= v0 @kind wide;
  #L3fb6d8.  v5:= 11I;
  #L3fb6dc.  if v2 >= v5 then goto L3fb71e;
  #L3fb6e0.  v5:= `@@n.b.a.s.f.g0` @type ^`int`[] @kind object;
  #L3fb6e4.  v5:= v5[v2];
  #L3fb6e8.  v5:= (`long`) v5 @kind i2l;
  #L3fb6ea.  v7:= 86400000L;
  #L3fb6f0.  v5:= v5 * v7 @kind long;
  #L3fb6f4.  v0:= v0 + v5 @kind long;
  #L3fb6f6.  v5:= `@@n.b.a.s.f.i0` @type ^`long`[] @kind object;
  #L3fb6fa.  v6:= v2 + 1;
  #L3fb6fe.  v5[v6]:= v0 @kind wide;
  #L3fb702.  v5:= `@@n.b.a.s.f.h0` @type ^`int`[] @kind object;
  #L3fb706.  v2:= v5[v2];
  #L3fb70a.  v9:= (`long`) v2 @kind i2l;
  #L3fb70c.  v9:= v9 * v7 @kind long;
  #L3fb710.  v3:= v3 + v9 @kind long;
  #L3fb712.  v2:= `@@n.b.a.s.f.j0` @type ^`long`[] @kind object;
  #L3fb716.  v2[v6]:= v3 @kind wide;
  #L3fb71a.  v2:= v6;
  #L3fb71c.  goto L3fb6d8;
  #L3fb71e.  return @kind void;
  #L3fb720.  v1:= (31I, 28I, 31I, 30I, 31I, 30I, 31I, 31I, 30I, 31I, 30I, 31I) @kind object;
  #L3fb757.  goto L3fb6ae;
  #L3fb758.  v1:= (31I, 29I, 31I, 30I, 31I, 30I, 31I, 31I, 30I, 31I, 30I, 31I) @kind object;
  #L3fb78f.  goto L3fb6bc;
}
procedure `void` `<init>`(`n.b.a.s.f` v0 @kind this, `n.b.a.a` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Ln/b/a/s/f;.<init>:(Ln/b/a/a;Ljava/lang/Object;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fb7a0.  call `<init>`(v0, v1, v2, v3) @signature `Ln/b/a/s/c;.<init>:(Ln/b/a/a;Ljava/lang/Object;I)V` @kind direct;
  #L3fb7a6.  return @kind void;
}
procedure `int` `a`(`n.b.a.s.f` v0 @kind this, `int` v1 , `int` v2 ) @signature `Ln/b/a/s/f;.a:(II)I` @AccessFlag  {
    temp;

  #L3fb454.  call temp:= `f`(v0, v1) @signature `Ln/b/a/s/c;.f:(I)Z` @kind virtual;
  #L3fb45a.  v1:= temp;
  #L3fb45c.  if v1 == 0 then goto L3fb46e;
  #L3fb460.  v1:= `@@n.b.a.s.f.h0` @type ^`int`[] @kind object;
  #L3fb464.  v2:= v2 + -1;
  #L3fb468.  v1:= v1[v2];
  #L3fb46c.  return v1;
  #L3fb46e.  v1:= `@@n.b.a.s.f.g0` @type ^`int`[] @kind object;
  #L3fb472.  v2:= v2 + -1;
  #L3fb476.  v1:= v1[v2];
  #L3fb47a.  return v1;
}
procedure `long` `b`(`n.b.a.s.f` v2 @kind this, `int` v3 , `int` v4 ) @signature `Ln/b/a/s/f;.b:(II)J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3fb5f8.  call temp:= `f`(v2, v3) @signature `Ln/b/a/s/c;.f:(I)Z` @kind virtual;
  #L3fb5fe.  v3:= temp;
  #L3fb600.  if v3 == 0 then goto L3fb612;
  #L3fb604.  v3:= `@@n.b.a.s.f.j0` @type ^`long`[] @kind object;
  #L3fb608.  v4:= v4 + -1;
  #L3fb60c.  v0:= v3[v4] @kind wide;
  #L3fb610.  return v0 @kind wide;
  #L3fb612.  v3:= `@@n.b.a.s.f.i0` @type ^`long`[] @kind object;
  #L3fb616.  v4:= v4 + -1;
  #L3fb61a.  v0:= v3[v4] @kind wide;
  #L3fb61e.  return v0 @kind wide;
}
procedure `int` `c`(`n.b.a.s.f` v2 @kind this, `long` v3 , `int` v5 ) @signature `Ln/b/a/s/f;.c:(JI)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3fb42c.  v0:= 28I;
  #L3fb430.  if v5 > v0 then goto L3fb43a;
  #L3fb434.  v1:= 1I;
  #L3fb436.  if v5 >= v1 then goto L3fb442;
  #L3fb43a.  call temp:= `d`(v2, v3) @signature `Ln/b/a/s/c;.d:(J)I` @kind virtual;
  #L3fb440.  v0:= temp;
  #L3fb442.  return v0;
}
procedure `int` `d`(`n.b.a.s.f` v12 @kind this, `long` v13 , `int` v15 ) @signature `Ln/b/a/s/f;.d:(JI)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L3fb48c.  call temp:= `e`(v12, v15) @signature `Ln/b/a/s/c;.e:(I)J` @kind virtual;
  #L3fb492.  v0:= temp @kind wide;
  #L3fb494.  v13:= v13 - v0 @kind long;
  #L3fb496.  v0:= 10I;
  #L3fb49a.  v13:= v13 ^> v0 @kind long;
  #L3fb49c.  v14:= (`int`) v13 @kind l2i;
  #L3fb49e.  call temp:= `f`(v12, v15) @signature `Ln/b/a/s/c;.f:(I)Z` @kind virtual;
  #L3fb4a4.  v13:= temp;
  #L3fb4a6.  v15:= 2I;
  #L3fb4a8.  v1:= 3I;
  #L3fb4aa.  v2:= 5I;
  #L3fb4ac.  v3:= 6I;
  #L3fb4ae.  v4:= 8I;
  #L3fb4b2.  v5:= 9I;
  #L3fb4b6.  v6:= 11I;
  #L3fb4ba.  v7:= 12I;
  #L3fb4be.  v8:= 1I;
  #L3fb4c0.  v9:= 4I;
  #L3fb4c2.  v10:= 7I;
  #L3fb4c4.  v11:= 2615625I;
  #L3fb4ca.  if v13 == 0 then goto L3fb548;
  #L3fb4ce.  v13:= 15356250I;
  #L3fb4d4.  if v14 >= v13 then goto L3fb50e;
  #L3fb4d8.  v13:= 7678125I;
  #L3fb4de.  if v14 >= v13 then goto L3fb4f6;
  #L3fb4e2.  if v14 >= v11 then goto L3fb4e8;
  #L3fb4e6.  goto L3fb560;
  #L3fb4e8.  v13:= 5062500I;
  #L3fb4ee.  if v14 >= v13 then goto L3fb570;
  #L3fb4f2.  goto L3fb5e6;
  #L3fb4f6.  v13:= 10209375I;
  #L3fb4fc.  if v14 >= v13 then goto L3fb502;
  #L3fb500.  goto L3fb57e;
  #L3fb502.  v13:= 12825000I;
  #L3fb508.  if v14 >= v13 then goto L3fb590;
  #L3fb50c.  goto L3fb58c;
  #L3fb50e.  v13:= 23118750I;
  #L3fb514.  if v14 >= v13 then goto L3fb530;
  #L3fb518.  v13:= 17971875I;
  #L3fb51e.  if v14 >= v13 then goto L3fb524;
  #L3fb522.  goto L3fb5a8;
  #L3fb524.  v13:= 20587500I;
  #L3fb52a.  if v14 >= v13 then goto L3fb5bc;
  #L3fb52e.  goto L3fb5b6;
  #L3fb530.  v13:= 25734375I;
  #L3fb536.  if v14 >= v13 then goto L3fb53c;
  #L3fb53a.  goto L3fb5cc;
  #L3fb53c.  v13:= 28265625I;
  #L3fb542.  if v14 >= v13 then goto L3fb5e2;
  #L3fb546.  goto L3fb5dc;
  #L3fb548.  v13:= 15271875I;
  #L3fb54e.  if v14 >= v13 then goto L3fb594;
  #L3fb552.  v13:= 7593750I;
  #L3fb558.  if v14 >= v13 then goto L3fb574;
  #L3fb55c.  if v14 >= v11 then goto L3fb564;
  #L3fb560.  v15:= 1I;
  #L3fb562.  goto L3fb5e6;
  #L3fb564.  v13:= 4978125I;
  #L3fb56a.  if v14 >= v13 then goto L3fb570;
  #L3fb56e.  goto L3fb5e6;
  #L3fb570.  v15:= 3I;
  #L3fb572.  goto L3fb5e6;
  #L3fb574.  v13:= 10125000I;
  #L3fb57a.  if v14 >= v13 then goto L3fb582;
  #L3fb57e.  v15:= 4I;
  #L3fb580.  goto L3fb5e6;
  #L3fb582.  v13:= 12740625I;
  #L3fb588.  if v14 >= v13 then goto L3fb590;
  #L3fb58c.  v15:= 5I;
  #L3fb58e.  goto L3fb5e6;
  #L3fb590.  v15:= 6I;
  #L3fb592.  goto L3fb5e6;
  #L3fb594.  v13:= 23034375I;
  #L3fb59a.  if v14 >= v13 then goto L3fb5c2;
  #L3fb59e.  v13:= 17887500I;
  #L3fb5a4.  if v14 >= v13 then goto L3fb5ac;
  #L3fb5a8.  v15:= 7I;
  #L3fb5aa.  goto L3fb5e6;
  #L3fb5ac.  v13:= 20503125I;
  #L3fb5b2.  if v14 >= v13 then goto L3fb5bc;
  #L3fb5b6.  v15:= 8I;
  #L3fb5ba.  goto L3fb5e6;
  #L3fb5bc.  v15:= 9I;
  #L3fb5c0.  goto L3fb5e6;
  #L3fb5c2.  v13:= 25650000I;
  #L3fb5c8.  if v14 >= v13 then goto L3fb5d2;
  #L3fb5cc.  v15:= 10I;
  #L3fb5d0.  goto L3fb5e6;
  #L3fb5d2.  v13:= 28181250I;
  #L3fb5d8.  if v14 >= v13 then goto L3fb5e2;
  #L3fb5dc.  v15:= 11I;
  #L3fb5e0.  goto L3fb5e6;
  #L3fb5e2.  v15:= 12I;
  #L3fb5e6.  return v15;
}
procedure `long` `f`(`n.b.a.s.f` v2 @kind this, `long` v3 , `int` v5 ) @signature `Ln/b/a/s/f;.f:(JI)J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3fb630.  call temp:= `i`(v2, v3) @signature `Ln/b/a/s/c;.i:(J)I` @kind virtual;
  #L3fb636.  v0:= temp;
  #L3fb638.  call temp:= `b`(v2, v3, v0) @signature `Ln/b/a/s/c;.b:(JI)I` @kind virtual;
  #L3fb63e.  v1:= temp;
  #L3fb640.  call temp:= `e`(v2, v3) @signature `Ln/b/a/s/c;.e:(J)I` @kind virtual;
  #L3fb646.  v3:= temp;
  #L3fb648.  v4:= 59I;
  #L3fb64c.  if v1 <= v4 then goto L3fb67e;
  #L3fb650.  call temp:= `f`(v2, v0) @signature `Ln/b/a/s/c;.f:(I)Z` @kind virtual;
  #L3fb656.  v4:= temp;
  #L3fb658.  if v4 == 0 then goto L3fb66e;
  #L3fb65c.  call temp:= `f`(v2, v5) @signature `Ln/b/a/s/c;.f:(I)Z` @kind virtual;
  #L3fb662.  v4:= temp;
  #L3fb664.  if v4 != 0 then goto L3fb67e;
  #L3fb668.  v1:= v1 + -1;
  #L3fb66c.  goto L3fb67e;
  #L3fb66e.  call temp:= `f`(v2, v5) @signature `Ln/b/a/s/c;.f:(I)Z` @kind virtual;
  #L3fb674.  v4:= temp;
  #L3fb676.  if v4 == 0 then goto L3fb67e;
  #L3fb67a.  v1:= v1 + 1;
  #L3fb67e.  v4:= 1I;
  #L3fb680.  call temp:= `a`(v2, v5, v4, v1) @signature `Ln/b/a/s/c;.a:(III)J` @kind virtual;
  #L3fb686.  v4:= temp @kind wide;
  #L3fb688.  v0:= (`long`) v3 @kind i2l;
  #L3fb68a.  v4:= v4 + v0 @kind long;
  #L3fb68c.  return v4 @kind wide;
}
procedure `boolean` `j`(`n.b.a.s.f` v2 @kind this, `long` v3 ) @signature `Ln/b/a/s/f;.j:(J)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3fb3e8.  call temp:= `e`(v2) @signature `Ln/b/a/s/a;.e:()Ln/b/a/c;` @kind virtual;
  #L3fb3ee.  v0:= temp @kind object;
  #L3fb3f0.  call temp:= `a`(v0, v3) @signature `Ln/b/a/c;.a:(J)I` @kind virtual;
  #L3fb3f6.  v0:= temp;
  #L3fb3f8.  v1:= 29I;
  #L3fb3fc.  if v0 != v1 then goto L3fb418;
  #L3fb400.  call temp:= `w`(v2) @signature `Ln/b/a/s/a;.w:()Ln/b/a/c;` @kind virtual;
  #L3fb406.  v0:= temp @kind object;
  #L3fb408.  call temp:= `b`(v0, v3) @signature `Ln/b/a/c;.b:(J)Z` @kind virtual;
  #L3fb40e.  v3:= temp;
  #L3fb410.  if v3 == 0 then goto L3fb418;
  #L3fb414.  v3:= 1I;
  #L3fb416.  goto L3fb41a;
  #L3fb418.  v3:= 0I;
  #L3fb41a.  return v3;
}
