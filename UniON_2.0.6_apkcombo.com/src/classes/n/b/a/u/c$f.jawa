record `n.b.a.u.c$f` @kind class @AccessFlag ABSTRACT extends `n.b.a.u.m` @kind interface, `n.b.a.u.k` @kind interface {
  `n.b.a.d` `n.b.a.u.c$f.b` @AccessFlag PROTECTED_FINAL;
  `int` `n.b.a.u.c$f.c` @AccessFlag PROTECTED_FINAL;
  `boolean` `n.b.a.u.c$f.d` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`n.b.a.u.c$f` v0 @kind this, `n.b.a.d` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Ln/b/a/u/c$f;.<init>:(Ln/b/a/d;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L401250.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L401256.  v0.`n.b.a.u.c$f.b` @type ^`n.b.a.d` := v1 @kind object;
  #L40125a.  v0.`n.b.a.u.c$f.c` @type ^`int` := v2;
  #L40125e.  v0.`n.b.a.u.c$f.d` @type ^`boolean` := v3 @kind boolean;
  #L401262.  return @kind void;
}
procedure `int` `a`(`n.b.a.u.c$f` v16 @kind this, `n.b.a.u.e` v17 @kind object, `java.lang.CharSequence` v18 @kind object, `int` v19 ) @signature `Ln/b/a/u/c$f;.a:(Ln/b/a/u/e;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L4010b0.  v0:= v16 @kind object;
  #L4010b4.  v1:= v18 @kind object;
  #L4010b8.  v2:= v19;
  #L4010bc.  v3:= v0.`n.b.a.u.c$f.c` @type ^`int`;
  #L4010c0.  call temp:= `length`(v18) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L4010c6.  v4:= temp;
  #L4010c8.  v4:= v4 - v2 @kind int;
  #L4010ca.  call temp:= `min`(v3, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4010d0.  v3:= temp;
  #L4010d2.  v4:= 0I;
  #L4010d4.  v5:= v3;
  #L4010d6.  v3:= 0I;
  #L4010d8.  v6:= 0I;
  #L4010da.  v7:= 0I;
  #L4010dc.  v8:= 48I;
  #L4010e0.  if v3 >= v5 then goto L40117a;
  #L4010e4.  v9:= v2 + v3 @kind int;
  #L4010e8.  call temp:= `charAt`(v1, v9) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4010ee.  v10:= temp;
  #L4010f0.  v11:= 57I;
  #L4010f4.  if v3 != 0 then goto L40116a;
  #L4010f8.  v12:= 43I;
  #L4010fc.  v13:= 45I;
  #L401100.  if v10 == v13 then goto L401108;
  #L401104.  if v10 != v12 then goto L40116a;
  #L401108.  v14:= v0.`n.b.a.u.c$f.d` @type ^`boolean` @kind boolean;
  #L40110c.  if v14 == 0 then goto L40116a;
  #L401110.  v6:= 1I;
  #L401112.  if v10 != v13 then goto L40111a;
  #L401116.  v7:= 1I;
  #L401118.  goto L40111c;
  #L40111a.  v7:= 0I;
  #L40111c.  if v10 != v12 then goto L401122;
  #L401120.  goto L401124;
  #L401122.  v6:= 0I;
  #L401124.  v10:= v3 + 1;
  #L401128.  if v10 >= v5 then goto L401162;
  #L40112c.  v9:= v9 + 1;
  #L401130.  call temp:= `charAt`(v1, v9) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L401136.  v9:= temp;
  #L401138.  if v9 < v8 then goto L401162;
  #L40113c.  if v9 <= v11 then goto L401142;
  #L401140.  goto L401162;
  #L401142.  v5:= v5 + 1;
  #L401146.  call temp:= `length`(v18) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L40114c.  v3:= temp;
  #L40114e.  v3:= v3 - v2 @kind int;
  #L401150.  call temp:= `min`(v5, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L401156.  v5:= temp;
  #L401158.  v3:= v10;
  #L40115a.  v15:= v7;
  #L40115c.  v7:= v6;
  #L40115e.  v6:= v15;
  #L401160.  goto L4010dc;
  #L401162.  v15:= v7;
  #L401164.  v7:= v6;
  #L401166.  v6:= v15;
  #L401168.  goto L40117a;
  #L40116a.  if v10 < v8 then goto L40117a;
  #L40116e.  if v10 <= v11 then goto L401174;
  #L401172.  goto L40117a;
  #L401174.  v3:= v3 + 1;
  #L401178.  goto L4010dc;
  #L40117a.  if v3 != 0 then goto L401182;
  #L40117e.  v1:= ~v2 @kind int;
  #L401180.  return v1;
  #L401182.  v4:= 9I;
  #L401186.  if v3 < v4 then goto L4011cc;
  #L40118a.  if v7 == 0 then goto L4011ae;
  #L40118e.  v4:= v2 + 1;
  #L401192.  v2:= v2 + v3 @kind int;
  #L401194.  call temp:= `subSequence`(v1, v4, v2) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L40119a.  v1:= temp @kind object;
  #L40119c.  call temp:= `toString`(v1) @signature `Ljava/lang/CharSequence;.toString:()Ljava/lang/String;` @kind interface;
  #L4011a2.  v1:= temp @kind object;
  #L4011a4.  call temp:= `parseInt`(v1) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L4011aa.  v1:= temp;
  #L4011ac.  goto L40121c;
  #L4011ae.  v3:= v3 + v2 @kind int;
  #L4011b0.  call temp:= `subSequence`(v1, v2, v3) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L4011b6.  v1:= temp @kind object;
  #L4011b8.  call temp:= `toString`(v1) @signature `Ljava/lang/CharSequence;.toString:()Ljava/lang/String;` @kind interface;
  #L4011be.  v1:= temp @kind object;
  #L4011c0.  call temp:= `parseInt`(v1) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L4011c6.  v1:= temp;
  #L4011c8.  v2:= v3;
  #L4011ca.  goto L40121c;
  #L4011cc.  if v6 != 0 then goto L4011da;
  #L4011d0.  if v7 == 0 then goto L4011d6;
  #L4011d4.  goto L4011da;
  #L4011d6.  v4:= v2;
  #L4011d8.  goto L4011de;
  #L4011da.  v4:= v2 + 1;
  #L4011de.  v5:= v4 + 1;
  #L4011e2.  call temp:= `charAt`(v1, v4) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L4011e8.  v4:= temp;
  #L4011ea.  v4:= v4 - v8 @kind int;
  #L4011ec.  v2:= v2 + v3 @kind int;
  #L4011ee.  if v5 >= v2 then goto L401212;
  #L4011f2.  v3:= v4 ^< 3;
  #L4011f6.  v4:= v4 ^< 1;
  #L4011fa.  v3:= v3 + v4 @kind int;
  #L4011fc.  v4:= v5 + 1;
  #L401200.  call temp:= `charAt`(v1, v5) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L401206.  v5:= temp;
  #L401208.  v3:= v3 + v5 @kind int;
  #L40120a.  v3:= v3 - v8 @kind int;
  #L40120c.  v5:= v4;
  #L40120e.  v4:= v3;
  #L401210.  goto L4011ee;
  #L401212.  if v6 == 0 then goto L40121a;
  #L401216.  v1:= -v4 @kind int;
  #L401218.  goto L40121c;
  #L40121a.  v1:= v4;
  #L40121c.  v3:= v0.`n.b.a.u.c$f.b` @type ^`n.b.a.d` @kind object;
  #L401220.  v4:= v17 @kind object;
  #L401224.  call `a`(v4, v3, v1) @signature `Ln/b/a/u/e;.a:(Ln/b/a/d;I)V` @kind virtual;
  #L40122a.  return v2;
  #L40122c.  v1:= ~v2 @kind int;
  #L40122e.  return v1;
  catch `java.lang.StringIndexOutOfBoundsException` @[L4011e2..L4011ea] goto L40122c;
}
procedure `int` `b`(`n.b.a.u.c$f` v1 @kind this) @signature `Ln/b/a/u/c$f;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L401098.  v0:= v1.`n.b.a.u.c$f.c` @type ^`int`;
  #L40109c.  return v0;
}
