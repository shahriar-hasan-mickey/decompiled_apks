record `n.b.a.u.c$c` @kind class @AccessFlag  extends `n.b.a.u.c$g` @kind class {
}
procedure `void` `<init>`(`n.b.a.u.c$c` v0 @kind this, `n.b.a.d` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Ln/b/a/u/c$c;.<init>:(Ln/b/a/d;IZ)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L400bb8.  call `<init>`(v0, v1, v2, v3, v2) @signature `Ln/b/a/u/c$g;.<init>:(Ln/b/a/d;IZI)V` @kind direct;
  #L400bbe.  return @kind void;
}
procedure `int` `a`(`n.b.a.u.c$c` v2 @kind this, `n.b.a.u.e` v3 @kind object, `java.lang.CharSequence` v4 @kind object, `int` v5 ) @signature `Ln/b/a/u/c$c;.a:(Ln/b/a/u/e;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L400b58.  call temp:= `a`(v2, v3, v4, v5) @signature `Ln/b/a/u/c$f;.a:(Ln/b/a/u/e;Ljava/lang/CharSequence;I)I` @kind super;
  #L400b5e.  v3:= temp;
  #L400b60.  if v3 >= 0 then goto L400b66;
  #L400b64.  return v3;
  #L400b66.  v0:= v2.`n.b.a.u.c$f.c` @type ^`int`;
  #L400b6a.  v0:= v0 + v5 @kind int;
  #L400b6c.  if v3 == v0 then goto L400ba6;
  #L400b70.  v1:= v2.`n.b.a.u.c$f.d` @type ^`boolean` @kind boolean;
  #L400b74.  if v1 == 0 then goto L400b94;
  #L400b78.  call temp:= `charAt`(v4, v5) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L400b7e.  v4:= temp;
  #L400b80.  v5:= 45I;
  #L400b84.  if v4 == v5 then goto L400b90;
  #L400b88.  v5:= 43I;
  #L400b8c.  if v4 != v5 then goto L400b94;
  #L400b90.  v0:= v0 + 1;
  #L400b94.  if v3 <= v0 then goto L400ba0;
  #L400b98.  v0:= v0 + 1;
  #L400b9c.  v3:= ~v0 @kind int;
  #L400b9e.  return v3;
  #L400ba0.  if v3 >= v0 then goto L400ba6;
  #L400ba4.  v3:= ~v3 @kind int;
  #L400ba6.  return v3;
}
