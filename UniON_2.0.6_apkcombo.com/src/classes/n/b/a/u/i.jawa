record `n.b.a.u.i` @kind class @AccessFlag PUBLIC {
}
global `double` `@@n.b.a.u.i.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln/b/a/u/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L404128.  v0:= 10.0D;
  #L40412c.  call temp:= `log`(v0) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L404132.  v0:= temp @kind wide;
  #L404134.  `@@n.b.a.u.i.a` @type ^`double` := v0 @kind wide;
  #L404138.  return @kind void;
}
procedure `int` `a`(`java.lang.CharSequence` v2 @kind object, `int` v3 ) @signature `Ln/b/a/u/i;.a:(Ljava/lang/CharSequence;I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L40401c.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L404022.  v0:= temp;
  #L404024.  v0:= v0 + -48;
  #L404028.  v1:= v0 ^< 3;
  #L40402c.  v0:= v0 ^< 1;
  #L404030.  v1:= v1 + v0 @kind int;
  #L404032.  v3:= v3 + 1;
  #L404036.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L40403c.  v2:= temp;
  #L40403e.  v1:= v1 + v2 @kind int;
  #L404040.  v1:= v1 + -48;
  #L404044.  return v1;
}
procedure `java.lang.String` `a`(`java.lang.String` v3 @kind object, `int` v4 ) @signature `Ln/b/a/u/i;.a:(Ljava/lang/String;I)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L404058.  v0:= v4 + 32;
  #L40405c.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L404062.  v1:= temp;
  #L404064.  v2:= v0 + 3;
  #L404068.  if v1 > v2 then goto L404070;
  #L40406c.  v0:= v3 @kind object;
  #L40406e.  goto L404086;
  #L404070.  v1:= 0I;
  #L404072.  call temp:= `substring`(v3, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L404078.  v0:= temp @kind object;
  #L40407a.  v1:= "..." @kind object;
  #L40407e.  call temp:= `concat`(v0, v1) @signature `Ljava/lang/String;.concat:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L404084.  v0:= temp @kind object;
  #L404086.  v1:= 34I;
  #L40408a.  v2:= "Invalid format: \"" @kind object;
  #L40408e.  if v4 > 0 then goto L4040b8;
  #L404092.  v3:= new `java.lang.StringBuilder`;
  #L404096.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40409c.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4040a2.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4040a8.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4040ae.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4040b4.  v3:= temp @kind object;
  #L4040b6.  return v3 @kind object;
  #L4040b8.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4040be.  v3:= temp;
  #L4040c0.  if v4 < v3 then goto L4040e6;
  #L4040c4.  v3:= new `java.lang.StringBuilder`;
  #L4040c8.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4040ce.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4040d4.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4040da.  v4:= "\" is too short" @kind object;
  #L4040de.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4040e4.  goto L4040ae;
  #L4040e6.  v3:= new `java.lang.StringBuilder`;
  #L4040ea.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4040f0.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4040f6.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4040fc.  v2:= "\" is malformed at \"" @kind object;
  #L404100.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L404106.  call temp:= `substring`(v0, v4) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L40410c.  v4:= temp @kind object;
  #L40410e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L404114.  goto L4040a8;
}
procedure `void` `a`(`java.lang.Appendable` v2 @kind object, `int` v3 ) @signature `Ln/b/a/u/i;.a:(Ljava/lang/Appendable;I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L404274.  if v3 >= 0 then goto L40429a;
  #L404278.  v0:= 45I;
  #L40427c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L404282.  v0:= -2147483648I;
  #L404286.  if v3 == v0 then goto L40428e;
  #L40428a.  v3:= -v3 @kind int;
  #L40428c.  goto L40429a;
  #L40428e.  v3:= "2147483648" @kind object;
  #L404292.  call temp:= `append`(v2, v3) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L404298.  return @kind void;
  #L40429a.  v0:= 10I;
  #L40429e.  if v3 >= v0 then goto L4042b0;
  #L4042a2.  v3:= v3 + 48;
  #L4042a6.  v3:= (`char`) v3 @kind i2c;
  #L4042a8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L4042ae.  goto L4042f2;
  #L4042b0.  v0:= 100I;
  #L4042b4.  if v3 >= v0 then goto L4042e4;
  #L4042b8.  v0:= v3 + 1;
  #L4042bc.  v1:= 13421772I;
  #L4042c2.  v0:= v0 * v1 @kind int;
  #L4042c6.  v0:= v0 ^> 27;
  #L4042ca.  v1:= v0 + 48;
  #L4042ce.  v1:= (`char`) v1 @kind i2c;
  #L4042d0.  call temp:= `append`(v2, v1) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L4042d6.  v1:= v0 ^< 3;
  #L4042da.  v3:= v3 - v1 @kind int;
  #L4042dc.  v0:= v0 ^< 1;
  #L4042e0.  v3:= v3 - v0 @kind int;
  #L4042e2.  goto L4042a2;
  #L4042e4.  call temp:= `toString`(v3) @signature `Ljava/lang/Integer;.toString:(I)Ljava/lang/String;` @kind static;
  #L4042ea.  v3:= temp @kind object;
  #L4042ec.  call temp:= `append`(v2, v3) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L4042f2.  return @kind void;
}
procedure `void` `a`(`java.lang.Appendable` v7 @kind object, `int` v8 , `int` v9 ) @signature `Ln/b/a/u/i;.a:(Ljava/lang/Appendable;II)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L40414c.  v0:= 10I;
  #L404150.  v1:= 48I;
  #L404154.  if v8 >= 0 then goto L40418a;
  #L404158.  v2:= 45I;
  #L40415c.  call temp:= `append`(v7, v2) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L404162.  v2:= -2147483648I;
  #L404166.  if v8 == v2 then goto L40416e;
  #L40416a.  v8:= -v8 @kind int;
  #L40416c.  goto L40418a;
  #L40416e.  if v9 <= v0 then goto L40417e;
  #L404172.  call temp:= `append`(v7, v1) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L404178.  v9:= v9 + -1;
  #L40417c.  goto L40416e;
  #L40417e.  v8:= "2147483648" @kind object;
  #L404182.  call temp:= `append`(v7, v8) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L404188.  return @kind void;
  #L40418a.  v2:= 1I;
  #L40418c.  if v8 >= v0 then goto L4041ac;
  #L404190.  if v9 <= v2 then goto L4041a0;
  #L404194.  call temp:= `append`(v7, v1) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L40419a.  v9:= v9 + -1;
  #L40419e.  goto L404190;
  #L4041a0.  v8:= v8 + v1 @kind int;
  #L4041a2.  v8:= (`char`) v8 @kind i2c;
  #L4041a4.  call temp:= `append`(v7, v8) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L4041aa.  goto L40423a;
  #L4041ac.  v0:= 100I;
  #L4041b0.  if v8 >= v0 then goto L4041f0;
  #L4041b4.  v0:= 2I;
  #L4041b6.  if v9 <= v0 then goto L4041c6;
  #L4041ba.  call temp:= `append`(v7, v1) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L4041c0.  v9:= v9 + -1;
  #L4041c4.  goto L4041b4;
  #L4041c6.  v9:= v8 + 1;
  #L4041ca.  v0:= 13421772I;
  #L4041d0.  v9:= v9 * v0 @kind int;
  #L4041d4.  v9:= v9 ^> 27;
  #L4041d8.  v0:= v9 + 48;
  #L4041dc.  v0:= (`char`) v0 @kind i2c;
  #L4041de.  call temp:= `append`(v7, v0) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L4041e4.  v0:= v9 ^< 3;
  #L4041e8.  v8:= v8 - v0 @kind int;
  #L4041ea.  v9:= v9 ^< v2 @kind int;
  #L4041ec.  v8:= v8 - v9 @kind int;
  #L4041ee.  goto L4041a0;
  #L4041f0.  v0:= 1000I;
  #L4041f4.  if v8 >= v0 then goto L4041fc;
  #L4041f8.  v0:= 3I;
  #L4041fa.  goto L40421c;
  #L4041fc.  v0:= 10000I;
  #L404200.  if v8 >= v0 then goto L404208;
  #L404204.  v0:= 4I;
  #L404206.  goto L40421c;
  #L404208.  v3:= (`double`) v8 @kind i2d;
  #L40420a.  call temp:= `log`(v3) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L404210.  v3:= temp @kind wide;
  #L404212.  v5:= `@@n.b.a.u.i.a` @type ^`double` @kind wide;
  #L404216.  v3:= v3 / v5 @kind double;
  #L404218.  v0:= (`int`) v3 @kind d2i;
  #L40421a.  v0:= v0 + v2 @kind int;
  #L40421c.  if v9 <= v0 then goto L40422c;
  #L404220.  call temp:= `append`(v7, v1) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L404226.  v9:= v9 + -1;
  #L40422a.  goto L40421c;
  #L40422c.  call temp:= `toString`(v8) @signature `Ljava/lang/Integer;.toString:(I)Ljava/lang/String;` @kind static;
  #L404232.  v8:= temp @kind object;
  #L404234.  call temp:= `append`(v7, v8) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L40423a.  return @kind void;
}
procedure `void` `a`(`java.lang.StringBuffer` v0 @kind object, `int` v1 , `int` v2 ) @signature `Ln/b/a/u/i;.a:(Ljava/lang/StringBuffer;II)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L40424c.  call `a`(v0, v1, v2) @signature `Ln/b/a/u/i;.a:(Ljava/lang/Appendable;II)V` @kind static;
  #L404252.  return @kind void;
  catch `java.io.IOException` @[L40424c..L404252] goto L404252;
}
