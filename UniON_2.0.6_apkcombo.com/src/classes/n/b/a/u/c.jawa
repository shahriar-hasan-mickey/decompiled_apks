record `n.b.a.u.c` @kind class @AccessFlag PUBLIC {
  `java.util.ArrayList` `n.b.a.u.c.a` @AccessFlag PRIVATE;
  `java.lang.Object` `n.b.a.u.c.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`n.b.a.u.c` v1 @kind this) @signature `Ln/b/a/u/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L402de8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L402dee.  v0:= new `java.util.ArrayList`;
  #L402df2.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L402df8.  v1.`n.b.a.u.c.a` @type ^`java.util.ArrayList` := v0 @kind object;
  #L402dfc.  return @kind void;
}
procedure `n.b.a.u.c` `a`(`n.b.a.u.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ln/b/a/u/c;.a:(Ljava/lang/Object;)Ln/b/a/u/c;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L402638.  v0:= 0I;
  #L40263a.  v1.`n.b.a.u.c.b` @type ^`java.lang.Object` := v0 @kind object;
  #L40263e.  v0:= v1.`n.b.a.u.c.a` @type ^`java.util.ArrayList` @kind object;
  #L402642.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L402648.  v0:= v1.`n.b.a.u.c.a` @type ^`java.util.ArrayList` @kind object;
  #L40264c.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L402652.  return v1 @kind object;
}
procedure `n.b.a.u.c` `a`(`n.b.a.u.c` v1 @kind this, `n.b.a.u.m` v2 @kind object, `n.b.a.u.k` v3 @kind object) @signature `Ln/b/a/u/c;.a:(Ln/b/a/u/m;Ln/b/a/u/k;)Ln/b/a/u/c;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L402664.  v0:= 0I;
  #L402666.  v1.`n.b.a.u.c.b` @type ^`java.lang.Object` := v0 @kind object;
  #L40266a.  v0:= v1.`n.b.a.u.c.a` @type ^`java.util.ArrayList` @kind object;
  #L40266e.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L402674.  v2:= v1.`n.b.a.u.c.a` @type ^`java.util.ArrayList` @kind object;
  #L402678.  call temp:= `add`(v2, v3) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L40267e.  return v1 @kind object;
}
procedure `void` `a`(`java.lang.Appendable` v1 @kind object, `int` v2 ) @signature `Ln/b/a/u/c;.a:(Ljava/lang/Appendable;I)V` @AccessFlag STATIC {
    temp;
    v0;

  #L402e10.  v2:= v2 + -1;
  #L402e14.  if v2 < 0 then goto L402e26;
  #L402e18.  v0:= 65533I;
  #L402e1e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L402e24.  goto L402e10;
  #L402e26.  return @kind void;
}
procedure `void` `a`(`n.b.a.u.c` v1 @kind this, `n.b.a.u.g` v2 @kind object) @signature `Ln/b/a/u/c;.a:(Ln/b/a/u/g;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L402e60.  if v2 == 0 then goto L402e66;
  #L402e64.  return @kind void;
  #L402e66.  v2:= new `java.lang.IllegalArgumentException`;
  #L402e6a.  v0:= "No printer supplied" @kind object;
  #L402e6e.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L402e74.  throw v2;
}
procedure `boolean` `a`(`java.lang.CharSequence` v5 @kind object, `int` v6 , `java.lang.String` v7 @kind object) @signature `Ln/b/a/u/c;.a:(Ljava/lang/CharSequence;ILjava/lang/String;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4022f4.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4022fa.  v0:= temp;
  #L4022fc.  call temp:= `length`(v5) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L402302.  v1:= temp;
  #L402304.  v1:= v1 - v6 @kind int;
  #L402306.  v2:= 0I;
  #L402308.  if v1 >= v0 then goto L40230e;
  #L40230c.  return v2;
  #L40230e.  v1:= 0I;
  #L402310.  if v1 >= v0 then goto L402334;
  #L402314.  v3:= v6 + v1 @kind int;
  #L402318.  call temp:= `charAt`(v5, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L40231e.  v3:= temp;
  #L402320.  call temp:= `charAt`(v7, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L402326.  v4:= temp;
  #L402328.  if v3 == v4 then goto L40232e;
  #L40232c.  return v2;
  #L40232e.  v1:= v1 + 1;
  #L402332.  goto L402310;
  #L402334.  v5:= 1I;
  #L402336.  return v5;
}
procedure `boolean` `b`(`java.lang.CharSequence` v5 @kind object, `int` v6 , `java.lang.String` v7 @kind object) @signature `Ln/b/a/u/c;.b:(Ljava/lang/CharSequence;ILjava/lang/String;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L402348.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L40234e.  v0:= temp;
  #L402350.  call temp:= `length`(v5) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L402356.  v1:= temp;
  #L402358.  v1:= v1 - v6 @kind int;
  #L40235a.  v2:= 0I;
  #L40235c.  if v1 >= v0 then goto L402362;
  #L402360.  return v2;
  #L402362.  v1:= 0I;
  #L402364.  if v1 >= v0 then goto L4023b0;
  #L402368.  v3:= v6 + v1 @kind int;
  #L40236c.  call temp:= `charAt`(v5, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L402372.  v3:= temp;
  #L402374.  call temp:= `charAt`(v7, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L40237a.  v4:= temp;
  #L40237c.  if v3 == v4 then goto L4023aa;
  #L402380.  call temp:= `toUpperCase`(v3) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L402386.  v3:= temp;
  #L402388.  call temp:= `toUpperCase`(v4) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L40238e.  v4:= temp;
  #L402390.  if v3 == v4 then goto L4023aa;
  #L402394.  call temp:= `toLowerCase`(v3) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L40239a.  v3:= temp;
  #L40239c.  call temp:= `toLowerCase`(v4) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L4023a2.  v4:= temp;
  #L4023a4.  if v3 == v4 then goto L4023aa;
  #L4023a8.  return v2;
  #L4023aa.  v1:= v1 + 1;
  #L4023ae.  goto L402364;
  #L4023b0.  v5:= 1I;
  #L4023b2.  return v5;
}
procedure `boolean` `b`(`n.b.a.u.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ln/b/a/u/c;.b:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4023c4.  v0:= instanceof @variable v2 @type ^`n.b.a.u.k` @kind boolean;
  #L4023c8.  if v0 == 0 then goto L4023e6;
  #L4023cc.  v0:= instanceof @variable v2 @type ^`n.b.a.u.c$b` @kind boolean;
  #L4023d0.  if v0 == 0 then goto L4023e2;
  #L4023d4.  v2:= (`n.b.a.u.c$b`) v2 @kind object;
  #L4023d8.  call temp:= `a`(v2) @signature `Ln/b/a/u/c$b;.a:()Z` @kind virtual;
  #L4023de.  v2:= temp;
  #L4023e0.  return v2;
  #L4023e2.  v2:= 1I;
  #L4023e4.  return v2;
  #L4023e6.  v2:= 0I;
  #L4023e8.  return v2;
}
procedure `void` `c`(`n.b.a.u.c` v1 @kind this, `n.b.a.u.d` v2 @kind object) @signature `Ln/b/a/u/c;.c:(Ln/b/a/u/d;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L402e38.  if v2 == 0 then goto L402e3e;
  #L402e3c.  return @kind void;
  #L402e3e.  v2:= new `java.lang.IllegalArgumentException`;
  #L402e42.  v0:= "No parser supplied" @kind object;
  #L402e46.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L402e4c.  throw v2;
}
procedure `boolean` `c`(`n.b.a.u.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ln/b/a/u/c;.c:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4023fc.  v0:= instanceof @variable v2 @type ^`n.b.a.u.m` @kind boolean;
  #L402400.  if v0 == 0 then goto L40241e;
  #L402404.  v0:= instanceof @variable v2 @type ^`n.b.a.u.c$b` @kind boolean;
  #L402408.  if v0 == 0 then goto L40241a;
  #L40240c.  v2:= (`n.b.a.u.c$b`) v2 @kind object;
  #L402410.  call temp:= `c`(v2) @signature `Ln/b/a/u/c$b;.c:()Z` @kind virtual;
  #L402416.  v2:= temp;
  #L402418.  return v2;
  #L40241a.  v2:= 1I;
  #L40241c.  return v2;
  #L40241e.  v2:= 0I;
  #L402420.  return v2;
}
procedure `java.lang.Object` `k`(`n.b.a.u.c` v4 @kind this) @signature `Ln/b/a/u/c;.k:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L402434.  v0:= v4.`n.b.a.u.c.b` @type ^`java.lang.Object` @kind object;
  #L402438.  if v0 != 0 then goto L402492;
  #L40243c.  v1:= v4.`n.b.a.u.c.a` @type ^`java.util.ArrayList` @kind object;
  #L402440.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L402446.  v1:= temp;
  #L402448.  v2:= 2I;
  #L40244a.  if v1 != v2 then goto L40247c;
  #L40244e.  v1:= v4.`n.b.a.u.c.a` @type ^`java.util.ArrayList` @kind object;
  #L402452.  v2:= 0I;
  #L402454.  call temp:= `get`(v1, v2) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L40245a.  v1:= temp @kind object;
  #L40245c.  v2:= v4.`n.b.a.u.c.a` @type ^`java.util.ArrayList` @kind object;
  #L402460.  v3:= 1I;
  #L402462.  call temp:= `get`(v2, v3) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L402468.  v2:= temp @kind object;
  #L40246a.  if v1 == 0 then goto L40247a;
  #L40246e.  if v1 == v2 then goto L402476;
  #L402472.  if v2 != 0 then goto L40247c;
  #L402476.  v0:= v1 @kind object;
  #L402478.  goto L40247c;
  #L40247a.  v0:= v2 @kind object;
  #L40247c.  if v0 != 0 then goto L40248e;
  #L402480.  v0:= new `n.b.a.u.c$b`;
  #L402484.  v1:= v4.`n.b.a.u.c.a` @type ^`java.util.ArrayList` @kind object;
  #L402488.  call `<init>`(v0, v1) @signature `Ln/b/a/u/c$b;.<init>:(Ljava/util/List;)V` @kind direct;
  #L40248e.  v4.`n.b.a.u.c.b` @type ^`java.lang.Object` := v0 @kind object;
  #L402492.  return v0 @kind object;
}
procedure `n.b.a.u.c` `a`(`n.b.a.u.c` v1 @kind this) @signature `Ln/b/a/u/c;.a:()Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L402740.  call temp:= `g`() @signature `Ln/b/a/d;.g:()Ln/b/a/d;` @kind static;
  #L402746.  v0:= temp @kind object;
  #L402748.  call temp:= `a`(v1, v0) @signature `Ln/b/a/u/c;.a:(Ln/b/a/d;)Ln/b/a/u/c;` @kind virtual;
  #L40274e.  return v1 @kind object;
}
procedure `n.b.a.u.c` `a`(`n.b.a.u.c` v1 @kind this, `char` v2 ) @signature `Ln/b/a/u/c;.a:(C)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4029b4.  v0:= new `n.b.a.u.c$a`;
  #L4029b8.  call `<init>`(v0, v2) @signature `Ln/b/a/u/c$a;.<init>:(C)V` @kind direct;
  #L4029be.  call temp:= `a`(v1, v0) @signature `Ln/b/a/u/c;.a:(Ljava/lang/Object;)Ln/b/a/u/c;` @kind direct;
  #L4029c4.  return v1 @kind object;
}
procedure `n.b.a.u.c` `a`(`n.b.a.u.c` v2 @kind this, `int` v3 ) @signature `Ln/b/a/u/c;.a:(I)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4026b0.  call temp:= `d`() @signature `Ln/b/a/d;.d:()Ln/b/a/d;` @kind static;
  #L4026b6.  v0:= temp @kind object;
  #L4026b8.  v1:= 2I;
  #L4026ba.  call temp:= `a`(v2, v0, v3, v1) @signature `Ln/b/a/u/c;.a:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L4026c0.  return v2 @kind object;
}
procedure `n.b.a.u.c` `a`(`n.b.a.u.c` v1 @kind this, `int` v2 , `int` v3 ) @signature `Ln/b/a/u/c;.a:(II)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L402690.  call temp:= `c`() @signature `Ln/b/a/d;.c:()Ln/b/a/d;` @kind static;
  #L402696.  v0:= temp @kind object;
  #L402698.  call temp:= `c`(v1, v0, v2, v3) @signature `Ln/b/a/u/c;.c:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L40269e.  return v1 @kind object;
}
procedure `n.b.a.u.c` `a`(`n.b.a.u.c` v2 @kind this, `int` v3 , `boolean` v4 ) @signature `Ln/b/a/u/c;.a:(IZ)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L402cc8.  v0:= new `n.b.a.u.c$m`;
  #L402ccc.  call temp:= `u`() @signature `Ln/b/a/d;.u:()Ln/b/a/d;` @kind static;
  #L402cd2.  v1:= temp @kind object;
  #L402cd4.  call `<init>`(v0, v1, v3, v4) @signature `Ln/b/a/u/c$m;.<init>:(Ln/b/a/d;IZ)V` @kind direct;
  #L402cda.  call temp:= `a`(v2, v0) @signature `Ln/b/a/u/c;.a:(Ljava/lang/Object;)Ln/b/a/u/c;` @kind direct;
  #L402ce0.  return v2 @kind object;
}
procedure `n.b.a.u.c` `a`(`n.b.a.u.c` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Ln/b/a/u/c;.a:(Ljava/lang/String;)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4029d8.  if v3 == 0 then goto L402a18;
  #L4029dc.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4029e2.  v0:= temp;
  #L4029e4.  if v0 == 0 then goto L402a16;
  #L4029e8.  v1:= 1I;
  #L4029ea.  if v0 == v1 then goto L402a00;
  #L4029ee.  v0:= new `n.b.a.u.c$h`;
  #L4029f2.  call `<init>`(v0, v3) @signature `Ln/b/a/u/c$h;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4029f8.  call temp:= `a`(v2, v0) @signature `Ln/b/a/u/c;.a:(Ljava/lang/Object;)Ln/b/a/u/c;` @kind direct;
  #L4029fe.  return v2 @kind object;
  #L402a00.  v0:= new `n.b.a.u.c$a`;
  #L402a04.  v1:= 0I;
  #L402a06.  call temp:= `charAt`(v3, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L402a0c.  v3:= temp;
  #L402a0e.  call `<init>`(v0, v3) @signature `Ln/b/a/u/c$a;.<init>:(C)V` @kind direct;
  #L402a14.  goto L4029f8;
  #L402a16.  return v2 @kind object;
  #L402a18.  v3:= new `java.lang.IllegalArgumentException`;
  #L402a1c.  v0:= "Literal must not be null" @kind object;
  #L402a20.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L402a26.  throw v3;
}
procedure `n.b.a.u.c` `a`(`n.b.a.u.c` v7 @kind this, `java.lang.String` v8 @kind object, `java.lang.String` v9 @kind object, `boolean` v10 , `int` v11 , `int` v12 ) @signature `Ln/b/a/u/c;.a:(Ljava/lang/String;Ljava/lang/String;ZII)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L402c74.  v6:= new `n.b.a.u.c$l`;
  #L402c78.  v0:= v6 @kind object;
  #L402c7a.  v1:= v8 @kind object;
  #L402c7c.  v2:= v9 @kind object;
  #L402c7e.  v3:= v10;
  #L402c80.  v4:= v11;
  #L402c82.  v5:= v12;
  #L402c84.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Ln/b/a/u/c$l;.<init>:(Ljava/lang/String;Ljava/lang/String;ZII)V` @kind direct;
  #L402c8a.  call temp:= `a`(v7, v6) @signature `Ln/b/a/u/c;.a:(Ljava/lang/Object;)Ln/b/a/u/c;` @kind direct;
  #L402c90.  return v7 @kind object;
}
procedure `n.b.a.u.c` `a`(`n.b.a.u.c` v7 @kind this, `java.lang.String` v8 @kind object, `boolean` v9 , `int` v10 , `int` v11 ) @signature `Ln/b/a/u/c;.a:(Ljava/lang/String;ZII)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L402c44.  v6:= new `n.b.a.u.c$l`;
  #L402c48.  v0:= v6 @kind object;
  #L402c4a.  v1:= v8 @kind object;
  #L402c4c.  v2:= v8 @kind object;
  #L402c4e.  v3:= v9;
  #L402c50.  v4:= v10;
  #L402c52.  v5:= v11;
  #L402c54.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Ln/b/a/u/c$l;.<init>:(Ljava/lang/String;Ljava/lang/String;ZII)V` @kind direct;
  #L402c5a.  call temp:= `a`(v7, v6) @signature `Ln/b/a/u/c;.a:(Ljava/lang/Object;)Ln/b/a/u/c;` @kind direct;
  #L402c60.  return v7 @kind object;
}
procedure `n.b.a.u.c` `a`(`n.b.a.u.c` v2 @kind this, `java.util.Map` v3 @kind object) @signature `Ln/b/a/u/c;.a:(Ljava/util/Map;)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L402ca4.  v0:= new `n.b.a.u.c$k`;
  #L402ca8.  v1:= 1I;
  #L402caa.  call `<init>`(v0, v1, v3) @signature `Ln/b/a/u/c$k;.<init>:(ILjava/util/Map;)V` @kind direct;
  #L402cb0.  call temp:= `a`(v2, v0, v0) @signature `Ln/b/a/u/c;.a:(Ln/b/a/u/m;Ln/b/a/u/k;)Ln/b/a/u/c;` @kind direct;
  #L402cb6.  return v2 @kind object;
}
procedure `n.b.a.u.c` `a`(`n.b.a.u.c` v2 @kind this, `n.b.a.d` v3 @kind object) @signature `Ln/b/a/u/c;.a:(Ln/b/a/d;)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L402b28.  if v3 == 0 then goto L402b40;
  #L402b2c.  v0:= new `n.b.a.u.c$i`;
  #L402b30.  v1:= 1I;
  #L402b32.  call `<init>`(v0, v3, v1) @signature `Ln/b/a/u/c$i;.<init>:(Ln/b/a/d;Z)V` @kind direct;
  #L402b38.  call temp:= `a`(v2, v0) @signature `Ln/b/a/u/c;.a:(Ljava/lang/Object;)Ln/b/a/u/c;` @kind direct;
  #L402b3e.  return v2 @kind object;
  #L402b40.  v3:= new `java.lang.IllegalArgumentException`;
  #L402b44.  v0:= "Field type must not be null" @kind object;
  #L402b48.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L402b4e.  throw v3;
}
procedure `n.b.a.u.c` `a`(`n.b.a.u.c` v2 @kind this, `n.b.a.d` v3 @kind object, `int` v4 ) @signature `Ln/b/a/u/c;.a:(Ln/b/a/d;I)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L402830.  if v3 == 0 then goto L40287a;
  #L402834.  if v4 <= 0 then goto L40284c;
  #L402838.  v0:= new `n.b.a.u.c$c`;
  #L40283c.  v1:= 0I;
  #L40283e.  call `<init>`(v0, v3, v4, v1) @signature `Ln/b/a/u/c$c;.<init>:(Ln/b/a/d;IZ)V` @kind direct;
  #L402844.  call temp:= `a`(v2, v0) @signature `Ln/b/a/u/c;.a:(Ljava/lang/Object;)Ln/b/a/u/c;` @kind direct;
  #L40284a.  return v2 @kind object;
  #L40284c.  v3:= new `java.lang.IllegalArgumentException`;
  #L402850.  v0:= new `java.lang.StringBuilder`;
  #L402854.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40285a.  v1:= "Illegal number of digits: " @kind object;
  #L40285e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L402864.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L40286a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L402870.  v4:= temp @kind object;
  #L402872.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L402878.  throw v3;
  #L40287a.  v3:= new `java.lang.IllegalArgumentException`;
  #L40287e.  v4:= "Field type must not be null" @kind object;
  #L402882.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L402888.  throw v3;
}
procedure `n.b.a.u.c` `a`(`n.b.a.u.c` v2 @kind this, `n.b.a.d` v3 @kind object, `int` v4 , `int` v5 ) @signature `Ln/b/a/u/c;.a:(Ln/b/a/d;II)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4027a4.  if v3 == 0 then goto L4027ee;
  #L4027a8.  if v5 >= v4 then goto L4027ae;
  #L4027ac.  v5:= v4;
  #L4027ae.  if v4 < 0 then goto L4027e2;
  #L4027b2.  if v5 <= 0 then goto L4027e2;
  #L4027b6.  v0:= 1I;
  #L4027b8.  v1:= 0I;
  #L4027ba.  if v4 > v0 then goto L4027d0;
  #L4027be.  v4:= new `n.b.a.u.c$n`;
  #L4027c2.  call `<init>`(v4, v3, v5, v1) @signature `Ln/b/a/u/c$n;.<init>:(Ln/b/a/d;IZ)V` @kind direct;
  #L4027c8.  call temp:= `a`(v2, v4) @signature `Ln/b/a/u/c;.a:(Ljava/lang/Object;)Ln/b/a/u/c;` @kind direct;
  #L4027ce.  return v2 @kind object;
  #L4027d0.  v0:= new `n.b.a.u.c$g`;
  #L4027d4.  call `<init>`(v0, v3, v5, v1, v4) @signature `Ln/b/a/u/c$g;.<init>:(Ln/b/a/d;IZI)V` @kind direct;
  #L4027da.  call temp:= `a`(v2, v0) @signature `Ln/b/a/u/c;.a:(Ljava/lang/Object;)Ln/b/a/u/c;` @kind direct;
  #L4027e0.  return v2 @kind object;
  #L4027e2.  v3:= new `java.lang.IllegalArgumentException`;
  #L4027e6.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L4027ec.  throw v3;
  #L4027ee.  v3:= new `java.lang.IllegalArgumentException`;
  #L4027f2.  v4:= "Field type must not be null" @kind object;
  #L4027f6.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4027fc.  throw v3;
}
procedure `n.b.a.u.c` `a`(`n.b.a.u.c` v1 @kind this, `n.b.a.u.b` v2 @kind object) @signature `Ln/b/a/u/c;.a:(Ln/b/a/u/b;)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40250c.  if v2 == 0 then goto L402528;
  #L402510.  call temp:= `c`(v2) @signature `Ln/b/a/u/b;.c:()Ln/b/a/u/m;` @kind virtual;
  #L402516.  v0:= temp @kind object;
  #L402518.  call temp:= `b`(v2) @signature `Ln/b/a/u/b;.b:()Ln/b/a/u/k;` @kind virtual;
  #L40251e.  v2:= temp @kind object;
  #L402520.  call temp:= `a`(v1, v0, v2) @signature `Ln/b/a/u/c;.a:(Ln/b/a/u/m;Ln/b/a/u/k;)Ln/b/a/u/c;` @kind direct;
  #L402526.  return v1 @kind object;
  #L402528.  v2:= new `java.lang.IllegalArgumentException`;
  #L40252c.  v0:= "No formatter supplied" @kind object;
  #L402530.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L402536.  throw v2;
}
procedure `n.b.a.u.c` `a`(`n.b.a.u.c` v1 @kind this, `n.b.a.u.d` v2 @kind object) @signature `Ln/b/a/u/c;.a:(Ln/b/a/u/d;)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L402548.  call `c`(v1, v2) @signature `Ln/b/a/u/c;.c:(Ln/b/a/u/d;)V` @kind direct;
  #L40254e.  call temp:= `a`(v2) @signature `Ln/b/a/u/f;.a:(Ln/b/a/u/d;)Ln/b/a/u/k;` @kind static;
  #L402554.  v2:= temp @kind object;
  #L402556.  v0:= 0I;
  #L402558.  call temp:= `a`(v1, v0, v2) @signature `Ln/b/a/u/c;.a:(Ln/b/a/u/m;Ln/b/a/u/k;)Ln/b/a/u/c;` @kind direct;
  #L40255e.  return v1 @kind object;
}
procedure `n.b.a.u.c` `a`(`n.b.a.u.c` v5 @kind this, `n.b.a.u.g` v6 @kind object, `n.b.a.u.d`[] v7 @kind object) @signature `Ln/b/a/u/c;.a:(Ln/b/a/u/g;[Ln/b/a/u/d;)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L402570.  if v6 == 0 then goto L40257a;
  #L402574.  call `a`(v5, v6) @signature `Ln/b/a/u/c;.a:(Ln/b/a/u/g;)V` @kind direct;
  #L40257a.  if v7 == 0 then goto L402616;
  #L40257e.  v0:= length @variable v7;
  #L402580.  v1:= 0I;
  #L402582.  v2:= 1I;
  #L402584.  if v0 != v2 then goto L4025bc;
  #L402588.  v0:= v7[v1] @kind object;
  #L40258c.  if v0 == 0 then goto L4025ac;
  #L402590.  call temp:= `a`(v6) @signature `Ln/b/a/u/h;.a:(Ln/b/a/u/g;)Ln/b/a/u/m;` @kind static;
  #L402596.  v6:= temp @kind object;
  #L402598.  v7:= v7[v1] @kind object;
  #L40259c.  call temp:= `a`(v7) @signature `Ln/b/a/u/f;.a:(Ln/b/a/u/d;)Ln/b/a/u/k;` @kind static;
  #L4025a2.  v7:= temp @kind object;
  #L4025a4.  call temp:= `a`(v5, v6, v7) @signature `Ln/b/a/u/c;.a:(Ln/b/a/u/m;Ln/b/a/u/k;)Ln/b/a/u/c;` @kind direct;
  #L4025aa.  return v5 @kind object;
  #L4025ac.  v6:= new `java.lang.IllegalArgumentException`;
  #L4025b0.  v7:= "No parser supplied" @kind object;
  #L4025b4.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4025ba.  throw v6;
  #L4025bc.  v3:= new `n.b.a.u.k`[v0];
  #L4025c0.  v4:= v0 + -1;
  #L4025c4.  if v1 >= v4 then goto L4025f2;
  #L4025c8.  v4:= v7[v1] @kind object;
  #L4025cc.  call temp:= `a`(v4) @signature `Ln/b/a/u/f;.a:(Ln/b/a/u/d;)Ln/b/a/u/k;` @kind static;
  #L4025d2.  v4:= temp @kind object;
  #L4025d4.  v3[v1]:= v4 @kind object;
  #L4025d8.  if v4 == 0 then goto L4025e2;
  #L4025dc.  v1:= v1 + 1;
  #L4025e0.  goto L4025c0;
  #L4025e2.  v6:= new `java.lang.IllegalArgumentException`;
  #L4025e6.  v7:= "Incomplete parser array" @kind object;
  #L4025ea.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4025f0.  throw v6;
  #L4025f2.  v7:= v7[v1] @kind object;
  #L4025f6.  call temp:= `a`(v7) @signature `Ln/b/a/u/f;.a:(Ln/b/a/u/d;)Ln/b/a/u/k;` @kind static;
  #L4025fc.  v7:= temp @kind object;
  #L4025fe.  v3[v1]:= v7 @kind object;
  #L402602.  call temp:= `a`(v6) @signature `Ln/b/a/u/h;.a:(Ln/b/a/u/g;)Ln/b/a/u/m;` @kind static;
  #L402608.  v6:= temp @kind object;
  #L40260a.  v7:= new `n.b.a.u.c$e`;
  #L40260e.  call `<init>`(v7, v3) @signature `Ln/b/a/u/c$e;.<init>:([Ln/b/a/u/k;)V` @kind direct;
  #L402614.  goto L4025a4;
  #L402616.  v6:= new `java.lang.IllegalArgumentException`;
  #L40261a.  v7:= "No parsers supplied" @kind object;
  #L40261e.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L402624.  throw v6;
}
procedure `n.b.a.u.c` `b`(`n.b.a.u.c` v1 @kind this) @signature `Ln/b/a/u/c;.b:()Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L402760.  call temp:= `g`() @signature `Ln/b/a/d;.g:()Ln/b/a/d;` @kind static;
  #L402766.  v0:= temp @kind object;
  #L402768.  call temp:= `b`(v1, v0) @signature `Ln/b/a/u/c;.b:(Ln/b/a/d;)Ln/b/a/u/c;` @kind virtual;
  #L40276e.  return v1 @kind object;
}
procedure `n.b.a.u.c` `b`(`n.b.a.u.c` v2 @kind this, `int` v3 ) @signature `Ln/b/a/u/c;.b:(I)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4026d4.  call temp:= `e`() @signature `Ln/b/a/d;.e:()Ln/b/a/d;` @kind static;
  #L4026da.  v0:= temp @kind object;
  #L4026dc.  v1:= 2I;
  #L4026de.  call temp:= `a`(v2, v0, v3, v1) @signature `Ln/b/a/u/c;.a:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L4026e4.  return v2 @kind object;
}
procedure `n.b.a.u.c` `b`(`n.b.a.u.c` v1 @kind this, `int` v2 , `int` v3 ) @signature `Ln/b/a/u/c;.b:(II)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4028ec.  call temp:= `k`() @signature `Ln/b/a/d;.k:()Ln/b/a/d;` @kind static;
  #L4028f2.  v0:= temp @kind object;
  #L4028f4.  call temp:= `b`(v1, v0, v2, v3) @signature `Ln/b/a/u/c;.b:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L4028fa.  return v1 @kind object;
}
procedure `n.b.a.u.c` `b`(`n.b.a.u.c` v2 @kind this, `int` v3 , `boolean` v4 ) @signature `Ln/b/a/u/c;.b:(IZ)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L402cf4.  v0:= new `n.b.a.u.c$m`;
  #L402cf8.  call temp:= `w`() @signature `Ln/b/a/d;.w:()Ln/b/a/d;` @kind static;
  #L402cfe.  v1:= temp @kind object;
  #L402d00.  call `<init>`(v0, v1, v3, v4) @signature `Ln/b/a/u/c$m;.<init>:(Ln/b/a/d;IZ)V` @kind direct;
  #L402d06.  call temp:= `a`(v2, v0) @signature `Ln/b/a/u/c;.a:(Ljava/lang/Object;)Ln/b/a/u/c;` @kind direct;
  #L402d0c.  return v2 @kind object;
}
procedure `n.b.a.u.c` `b`(`n.b.a.u.c` v2 @kind this, `n.b.a.d` v3 @kind object) @signature `Ln/b/a/u/c;.b:(Ln/b/a/d;)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L402bc8.  if v3 == 0 then goto L402be0;
  #L402bcc.  v0:= new `n.b.a.u.c$i`;
  #L402bd0.  v1:= 0I;
  #L402bd2.  call `<init>`(v0, v3, v1) @signature `Ln/b/a/u/c$i;.<init>:(Ln/b/a/d;Z)V` @kind direct;
  #L402bd8.  call temp:= `a`(v2, v0) @signature `Ln/b/a/u/c;.a:(Ljava/lang/Object;)Ln/b/a/u/c;` @kind direct;
  #L402bde.  return v2 @kind object;
  #L402be0.  v3:= new `java.lang.IllegalArgumentException`;
  #L402be4.  v0:= "Field type must not be null" @kind object;
  #L402be8.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L402bee.  throw v3;
}
procedure `n.b.a.u.c` `b`(`n.b.a.u.c` v1 @kind this, `n.b.a.d` v2 @kind object, `int` v3 , `int` v4 ) @signature `Ln/b/a/u/c;.b:(Ln/b/a/d;II)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40289c.  if v2 == 0 then goto L4028cc;
  #L4028a0.  if v4 >= v3 then goto L4028a6;
  #L4028a4.  v4:= v3;
  #L4028a6.  if v3 < 0 then goto L4028c0;
  #L4028aa.  if v4 <= 0 then goto L4028c0;
  #L4028ae.  v0:= new `n.b.a.u.c$d`;
  #L4028b2.  call `<init>`(v0, v2, v3, v4) @signature `Ln/b/a/u/c$d;.<init>:(Ln/b/a/d;II)V` @kind direct;
  #L4028b8.  call temp:= `a`(v1, v0) @signature `Ln/b/a/u/c;.a:(Ljava/lang/Object;)Ln/b/a/u/c;` @kind direct;
  #L4028be.  return v1 @kind object;
  #L4028c0.  v2:= new `java.lang.IllegalArgumentException`;
  #L4028c4.  call `<init>`(v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L4028ca.  throw v2;
  #L4028cc.  v2:= new `java.lang.IllegalArgumentException`;
  #L4028d0.  v3:= "Field type must not be null" @kind object;
  #L4028d4.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4028da.  throw v2;
}
procedure `n.b.a.u.c` `b`(`n.b.a.u.c` v2 @kind this, `n.b.a.u.d` v3 @kind object) @signature `Ln/b/a/u/c;.b:(Ln/b/a/u/d;)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L402ac0.  call `c`(v2, v3) @signature `Ln/b/a/u/c;.c:(Ln/b/a/u/d;)V` @kind direct;
  #L402ac6.  v0:= 2I;
  #L402ac8.  v0:= new `n.b.a.u.k`[v0];
  #L402acc.  call temp:= `a`(v3) @signature `Ln/b/a/u/f;.a:(Ln/b/a/u/d;)Ln/b/a/u/k;` @kind static;
  #L402ad2.  v3:= temp @kind object;
  #L402ad4.  v1:= 0I;
  #L402ad6.  v0[v1]:= v3 @kind object;
  #L402ada.  v3:= 0I;
  #L402adc.  v1:= 1I;
  #L402ade.  v0[v1]:= v3 @kind object;
  #L402ae2.  v1:= new `n.b.a.u.c$e`;
  #L402ae6.  call `<init>`(v1, v0) @signature `Ln/b/a/u/c$e;.<init>:([Ln/b/a/u/k;)V` @kind direct;
  #L402aec.  call temp:= `a`(v2, v3, v1) @signature `Ln/b/a/u/c;.a:(Ln/b/a/u/m;Ln/b/a/u/k;)Ln/b/a/u/c;` @kind direct;
  #L402af2.  return v2 @kind object;
}
procedure `n.b.a.u.c` `c`(`n.b.a.u.c` v1 @kind this) @signature `Ln/b/a/u/c;.c:()Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L402810.  call temp:= `i`() @signature `Ln/b/a/d;.i:()Ln/b/a/d;` @kind static;
  #L402816.  v0:= temp @kind object;
  #L402818.  call temp:= `b`(v1, v0) @signature `Ln/b/a/u/c;.b:(Ln/b/a/d;)Ln/b/a/u/c;` @kind virtual;
  #L40281e.  return v1 @kind object;
}
procedure `n.b.a.u.c` `c`(`n.b.a.u.c` v2 @kind this, `int` v3 ) @signature `Ln/b/a/u/c;.c:(I)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4026f8.  call temp:= `f`() @signature `Ln/b/a/d;.f:()Ln/b/a/d;` @kind static;
  #L4026fe.  v0:= temp @kind object;
  #L402700.  v1:= 2I;
  #L402702.  call temp:= `a`(v2, v0, v3, v1) @signature `Ln/b/a/u/c;.a:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L402708.  return v2 @kind object;
}
procedure `n.b.a.u.c` `c`(`n.b.a.u.c` v1 @kind this, `int` v2 , `int` v3 ) @signature `Ln/b/a/u/c;.c:(II)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40290c.  call temp:= `o`() @signature `Ln/b/a/d;.o:()Ln/b/a/d;` @kind static;
  #L402912.  v0:= temp @kind object;
  #L402914.  call temp:= `b`(v1, v0, v2, v3) @signature `Ln/b/a/u/c;.b:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L40291a.  return v1 @kind object;
}
procedure `n.b.a.u.c` `c`(`n.b.a.u.c` v2 @kind this, `n.b.a.d` v3 @kind object, `int` v4 , `int` v5 ) @signature `Ln/b/a/u/c;.c:(Ln/b/a/d;II)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L402b60.  if v3 == 0 then goto L402ba8;
  #L402b64.  if v5 >= v4 then goto L402b6a;
  #L402b68.  v5:= v4;
  #L402b6a.  if v4 < 0 then goto L402b9c;
  #L402b6e.  if v5 <= 0 then goto L402b9c;
  #L402b72.  v0:= 1I;
  #L402b74.  if v4 > v0 then goto L402b8a;
  #L402b78.  v4:= new `n.b.a.u.c$n`;
  #L402b7c.  call `<init>`(v4, v3, v5, v0) @signature `Ln/b/a/u/c$n;.<init>:(Ln/b/a/d;IZ)V` @kind direct;
  #L402b82.  call temp:= `a`(v2, v4) @signature `Ln/b/a/u/c;.a:(Ljava/lang/Object;)Ln/b/a/u/c;` @kind direct;
  #L402b88.  return v2 @kind object;
  #L402b8a.  v1:= new `n.b.a.u.c$g`;
  #L402b8e.  call `<init>`(v1, v3, v5, v0, v4) @signature `Ln/b/a/u/c$g;.<init>:(Ln/b/a/d;IZI)V` @kind direct;
  #L402b94.  call temp:= `a`(v2, v1) @signature `Ln/b/a/u/c;.a:(Ljava/lang/Object;)Ln/b/a/u/c;` @kind direct;
  #L402b9a.  return v2 @kind object;
  #L402b9c.  v3:= new `java.lang.IllegalArgumentException`;
  #L402ba0.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L402ba6.  throw v3;
  #L402ba8.  v3:= new `java.lang.IllegalArgumentException`;
  #L402bac.  v4:= "Field type must not be null" @kind object;
  #L402bb0.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L402bb6.  throw v3;
}
procedure `n.b.a.u.c` `d`(`n.b.a.u.c` v1 @kind this) @signature `Ln/b/a/u/c;.d:()Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40294c.  call temp:= `j`() @signature `Ln/b/a/d;.j:()Ln/b/a/d;` @kind static;
  #L402952.  v0:= temp @kind object;
  #L402954.  call temp:= `b`(v1, v0) @signature `Ln/b/a/u/c;.b:(Ln/b/a/d;)Ln/b/a/u/c;` @kind virtual;
  #L40295a.  return v1 @kind object;
}
procedure `n.b.a.u.c` `d`(`n.b.a.u.c` v2 @kind this, `int` v3 ) @signature `Ln/b/a/u/c;.d:(I)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40271c.  call temp:= `g`() @signature `Ln/b/a/d;.g:()Ln/b/a/d;` @kind static;
  #L402722.  v0:= temp @kind object;
  #L402724.  v1:= 1I;
  #L402726.  call temp:= `a`(v2, v0, v3, v1) @signature `Ln/b/a/u/c;.a:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L40272c.  return v2 @kind object;
}
procedure `n.b.a.u.c` `d`(`n.b.a.u.c` v1 @kind this, `int` v2 , `int` v3 ) @signature `Ln/b/a/u/c;.d:(II)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40292c.  call temp:= `r`() @signature `Ln/b/a/d;.r:()Ln/b/a/d;` @kind static;
  #L402932.  v0:= temp @kind object;
  #L402934.  call temp:= `b`(v1, v0, v2, v3) @signature `Ln/b/a/u/c;.b:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L40293a.  return v1 @kind object;
}
procedure `n.b.a.u.c` `e`(`n.b.a.u.c` v1 @kind this) @signature `Ln/b/a/u/c;.e:()Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L402a80.  call temp:= `q`() @signature `Ln/b/a/d;.q:()Ln/b/a/d;` @kind static;
  #L402a86.  v0:= temp @kind object;
  #L402a88.  call temp:= `a`(v1, v0) @signature `Ln/b/a/u/c;.a:(Ln/b/a/d;)Ln/b/a/u/c;` @kind virtual;
  #L402a8e.  return v1 @kind object;
}
procedure `n.b.a.u.c` `e`(`n.b.a.u.c` v2 @kind this, `int` v3 ) @signature `Ln/b/a/u/c;.e:(I)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L402780.  call temp:= `h`() @signature `Ln/b/a/d;.h:()Ln/b/a/d;` @kind static;
  #L402786.  v0:= temp @kind object;
  #L402788.  v1:= 3I;
  #L40278a.  call temp:= `a`(v2, v0, v3, v1) @signature `Ln/b/a/u/c;.a:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L402790.  return v2 @kind object;
}
procedure `n.b.a.u.c` `e`(`n.b.a.u.c` v1 @kind this, `int` v2 , `int` v3 ) @signature `Ln/b/a/u/c;.e:(II)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L402d44.  call temp:= `u`() @signature `Ln/b/a/d;.u:()Ln/b/a/d;` @kind static;
  #L402d4a.  v0:= temp @kind object;
  #L402d4c.  call temp:= `c`(v1, v0, v2, v3) @signature `Ln/b/a/u/c;.c:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L402d52.  return v1 @kind object;
}
procedure `n.b.a.u.c` `f`(`n.b.a.u.c` v1 @kind this) @signature `Ln/b/a/u/c;.f:()Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L402aa0.  call temp:= `q`() @signature `Ln/b/a/d;.q:()Ln/b/a/d;` @kind static;
  #L402aa6.  v0:= temp @kind object;
  #L402aa8.  call temp:= `b`(v1, v0) @signature `Ln/b/a/u/c;.b:(Ln/b/a/d;)Ln/b/a/u/c;` @kind virtual;
  #L402aae.  return v1 @kind object;
}
procedure `n.b.a.u.c` `f`(`n.b.a.u.c` v2 @kind this, `int` v3 ) @signature `Ln/b/a/u/c;.f:(I)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40296c.  call temp:= `k`() @signature `Ln/b/a/d;.k:()Ln/b/a/d;` @kind static;
  #L402972.  v0:= temp @kind object;
  #L402974.  v1:= 2I;
  #L402976.  call temp:= `a`(v2, v0, v3, v1) @signature `Ln/b/a/u/c;.a:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L40297c.  return v2 @kind object;
}
procedure `n.b.a.u.c` `f`(`n.b.a.u.c` v1 @kind this, `int` v2 , `int` v3 ) @signature `Ln/b/a/u/c;.f:(II)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L402d64.  call temp:= `w`() @signature `Ln/b/a/d;.w:()Ln/b/a/d;` @kind static;
  #L402d6a.  v0:= temp @kind object;
  #L402d6c.  call temp:= `c`(v1, v0, v2, v3) @signature `Ln/b/a/u/c;.c:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L402d72.  return v1 @kind object;
}
procedure `n.b.a.u.c` `g`(`n.b.a.u.c` v1 @kind this) @signature `Ln/b/a/u/c;.g:()Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L402c00.  v0:= `@@n.b.a.u.c$j.b` @type ^`n.b.a.u.c$j` @kind object;
  #L402c04.  call temp:= `a`(v1, v0, v0) @signature `Ln/b/a/u/c;.a:(Ln/b/a/u/m;Ln/b/a/u/k;)Ln/b/a/u/c;` @kind direct;
  #L402c0a.  return v1 @kind object;
}
procedure `n.b.a.u.c` `g`(`n.b.a.u.c` v2 @kind this, `int` v3 ) @signature `Ln/b/a/u/c;.g:(I)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L402990.  call temp:= `l`() @signature `Ln/b/a/d;.l:()Ln/b/a/d;` @kind static;
  #L402996.  v0:= temp @kind object;
  #L402998.  v1:= 2I;
  #L40299a.  call temp:= `a`(v2, v0, v3, v1) @signature `Ln/b/a/u/c;.a:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L4029a0.  return v2 @kind object;
}
procedure `n.b.a.u.c` `g`(`n.b.a.u.c` v1 @kind this, `int` v2 , `int` v3 ) @signature `Ln/b/a/u/c;.g:(II)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L402d84.  call temp:= `y`() @signature `Ln/b/a/d;.y:()Ln/b/a/d;` @kind static;
  #L402d8a.  v0:= temp @kind object;
  #L402d8c.  call temp:= `a`(v1, v0, v2, v3) @signature `Ln/b/a/u/c;.a:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L402d92.  return v1 @kind object;
}
procedure `n.b.a.u.c` `h`(`n.b.a.u.c` v3 @kind this) @signature `Ln/b/a/u/c;.h:()Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L402c1c.  v0:= new `n.b.a.u.c$k`;
  #L402c20.  v1:= 0I;
  #L402c22.  v2:= 0I;
  #L402c24.  call `<init>`(v0, v2, v1) @signature `Ln/b/a/u/c$k;.<init>:(ILjava/util/Map;)V` @kind direct;
  #L402c2a.  call temp:= `a`(v3, v0, v1) @signature `Ln/b/a/u/c;.a:(Ln/b/a/u/m;Ln/b/a/u/k;)Ln/b/a/u/c;` @kind direct;
  #L402c30.  return v3 @kind object;
}
procedure `n.b.a.u.c` `h`(`n.b.a.u.c` v2 @kind this, `int` v3 ) @signature `Ln/b/a/u/c;.h:(I)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L402a38.  call temp:= `p`() @signature `Ln/b/a/d;.p:()Ln/b/a/d;` @kind static;
  #L402a3e.  v0:= temp @kind object;
  #L402a40.  v1:= 2I;
  #L402a42.  call temp:= `a`(v2, v0, v3, v1) @signature `Ln/b/a/u/c;.a:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L402a48.  return v2 @kind object;
}
procedure `n.b.a.u.b` `i`(`n.b.a.u.c` v4 @kind this) @signature `Ln/b/a/u/c;.i:()Ln/b/a/u/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4024a4.  call temp:= `k`(v4) @signature `Ln/b/a/u/c;.k:()Ljava/lang/Object;` @kind direct;
  #L4024aa.  v0:= temp @kind object;
  #L4024ac.  call temp:= `c`(v4, v0) @signature `Ln/b/a/u/c;.c:(Ljava/lang/Object;)Z` @kind direct;
  #L4024b2.  v1:= temp;
  #L4024b4.  v2:= 0I;
  #L4024b6.  if v1 == 0 then goto L4024c2;
  #L4024ba.  v1:= v0 @kind object;
  #L4024bc.  v1:= (`n.b.a.u.m`) v1 @kind object;
  #L4024c0.  goto L4024c4;
  #L4024c2.  v1:= v2 @kind object;
  #L4024c4.  call temp:= `b`(v4, v0) @signature `Ln/b/a/u/c;.b:(Ljava/lang/Object;)Z` @kind direct;
  #L4024ca.  v3:= temp;
  #L4024cc.  if v3 == 0 then goto L4024d6;
  #L4024d0.  v2:= v0 @kind object;
  #L4024d2.  v2:= (`n.b.a.u.k`) v2 @kind object;
  #L4024d6.  if v1 != 0 then goto L4024f0;
  #L4024da.  if v2 == 0 then goto L4024e0;
  #L4024de.  goto L4024f0;
  #L4024e0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4024e4.  v1:= "Both printing and parsing not supported" @kind object;
  #L4024e8.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4024ee.  throw v0;
  #L4024f0.  v0:= new `n.b.a.u.b`;
  #L4024f4.  call `<init>`(v0, v1, v2) @signature `Ln/b/a/u/b;.<init>:(Ln/b/a/u/m;Ln/b/a/u/k;)V` @kind direct;
  #L4024fa.  return v0 @kind object;
}
procedure `n.b.a.u.c` `i`(`n.b.a.u.c` v2 @kind this, `int` v3 ) @signature `Ln/b/a/u/c;.i:(I)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L402a5c.  call temp:= `q`() @signature `Ln/b/a/d;.q:()Ln/b/a/d;` @kind static;
  #L402a62.  v0:= temp @kind object;
  #L402a64.  v1:= 2I;
  #L402a66.  call temp:= `a`(v2, v0, v3, v1) @signature `Ln/b/a/u/c;.a:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L402a6c.  return v2 @kind object;
}
procedure `n.b.a.u.c` `j`(`n.b.a.u.c` v2 @kind this, `int` v3 ) @signature `Ln/b/a/u/c;.j:(I)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L402b04.  call temp:= `s`() @signature `Ln/b/a/d;.s:()Ln/b/a/d;` @kind static;
  #L402b0a.  v0:= temp @kind object;
  #L402b0c.  v1:= 2I;
  #L402b0e.  call temp:= `a`(v2, v0, v3, v1) @signature `Ln/b/a/u/c;.a:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L402b14.  return v2 @kind object;
}
procedure `n.b.a.u.d` `j`(`n.b.a.u.c` v2 @kind this) @signature `Ln/b/a/u/c;.j:()Ln/b/a/u/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L402da4.  call temp:= `k`(v2) @signature `Ln/b/a/u/c;.k:()Ljava/lang/Object;` @kind direct;
  #L402daa.  v0:= temp @kind object;
  #L402dac.  call temp:= `b`(v2, v0) @signature `Ln/b/a/u/c;.b:(Ljava/lang/Object;)Z` @kind direct;
  #L402db2.  v1:= temp;
  #L402db4.  if v1 == 0 then goto L402dc6;
  #L402db8.  v0:= (`n.b.a.u.k`) v0 @kind object;
  #L402dbc.  call temp:= `a`(v0) @signature `Ln/b/a/u/l;.a:(Ln/b/a/u/k;)Ln/b/a/u/d;` @kind static;
  #L402dc2.  v0:= temp @kind object;
  #L402dc4.  return v0 @kind object;
  #L402dc6.  v0:= new `java.lang.UnsupportedOperationException`;
  #L402dca.  v1:= "Parsing is not supported" @kind object;
  #L402dce.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L402dd4.  throw v0;
}
procedure `n.b.a.u.c` `k`(`n.b.a.u.c` v2 @kind this, `int` v3 ) @signature `Ln/b/a/u/c;.k:(I)Ln/b/a/u/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L402d20.  call temp:= `t`() @signature `Ln/b/a/d;.t:()Ln/b/a/d;` @kind static;
  #L402d26.  v0:= temp @kind object;
  #L402d28.  v1:= 2I;
  #L402d2a.  call temp:= `a`(v2, v0, v3, v1) @signature `Ln/b/a/u/c;.a:(Ln/b/a/d;II)Ln/b/a/u/c;` @kind virtual;
  #L402d30.  return v2 @kind object;
}
