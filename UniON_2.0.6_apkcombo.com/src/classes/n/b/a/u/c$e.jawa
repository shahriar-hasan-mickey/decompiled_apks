record `n.b.a.u.c$e` @kind class @AccessFlag  extends `n.b.a.u.k` @kind interface {
  `n.b.a.u.k`[] `n.b.a.u.c$e.b` @AccessFlag PRIVATE_FINAL;
  `int` `n.b.a.u.c$e.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.b.a.u.c$e` v3 @kind this, `n.b.a.u.k`[] v4 @kind object) @signature `Ln/b/a/u/c$e;.<init>:([Ln/b/a/u/k;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L401054.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40105a.  v3.`n.b.a.u.c$e.b` @type ^`n.b.a.u.k`[] := v4 @kind object;
  #L40105e.  v0:= length @variable v4;
  #L401060.  v1:= 0I;
  #L401062.  v0:= v0 + -1;
  #L401066.  if v0 < 0 then goto L401082;
  #L40106a.  v2:= v4[v0] @kind object;
  #L40106e.  if v2 == 0 then goto L401062;
  #L401072.  call temp:= `b`(v2) @signature `Ln/b/a/u/k;.b:()I` @kind interface;
  #L401078.  v2:= temp;
  #L40107a.  if v2 <= v1 then goto L401062;
  #L40107e.  v1:= v2;
  #L401080.  goto L401062;
  #L401082.  v3.`n.b.a.u.c$e.c` @type ^`int` := v1;
  #L401086.  return @kind void;
}
procedure `int` `a`(`n.b.a.u.c$e` v9 @kind this, `n.b.a.u.e` v10 @kind object, `java.lang.CharSequence` v11 @kind object, `int` v12 ) @signature `Ln/b/a/u/c$e;.a:(Ln/b/a/u/e;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L400fa0.  v0:= v9.`n.b.a.u.c$e.b` @type ^`n.b.a.u.k`[] @kind object;
  #L400fa4.  v1:= length @variable v0;
  #L400fa6.  call temp:= `f`(v10) @signature `Ln/b/a/u/e;.f:()Ljava/lang/Object;` @kind virtual;
  #L400fac.  v2:= temp @kind object;
  #L400fae.  v3:= 0I;
  #L400fb0.  v4:= 0I;
  #L400fb2.  v5:= v12;
  #L400fb4.  v6:= v5;
  #L400fb6.  v7:= v4 @kind object;
  #L400fb8.  v4:= 0I;
  #L400fba.  if v4 >= v1 then goto L401026;
  #L400fbe.  v8:= v0[v4] @kind object;
  #L400fc2.  if v8 != 0 then goto L400fd0;
  #L400fc6.  if v5 > v12 then goto L400fcc;
  #L400fca.  return v12;
  #L400fcc.  v3:= 1I;
  #L400fce.  goto L401026;
  #L400fd0.  call temp:= `a`(v8, v10, v11, v12) @signature `Ln/b/a/u/k;.a:(Ln/b/a/u/e;Ljava/lang/CharSequence;I)I` @kind interface;
  #L400fd6.  v8:= temp;
  #L400fd8.  if v8 < v12 then goto L40100e;
  #L400fdc.  if v8 <= v5 then goto L40101a;
  #L400fe0.  call temp:= `length`(v11) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L400fe6.  v5:= temp;
  #L400fe8.  if v8 >= v5 then goto L40100c;
  #L400fec.  v5:= v4 + 1;
  #L400ff0.  if v5 >= v1 then goto L40100c;
  #L400ff4.  v5:= v0[v5] @kind object;
  #L400ff8.  if v5 != 0 then goto L400ffe;
  #L400ffc.  goto L40100c;
  #L400ffe.  call temp:= `f`(v10) @signature `Ln/b/a/u/e;.f:()Ljava/lang/Object;` @kind virtual;
  #L401004.  v5:= temp @kind object;
  #L401006.  v7:= v5 @kind object;
  #L401008.  v5:= v8;
  #L40100a.  goto L40101a;
  #L40100c.  return v8;
  #L40100e.  if v8 >= 0 then goto L40101a;
  #L401012.  v8:= ~v8 @kind int;
  #L401014.  if v8 <= v6 then goto L40101a;
  #L401018.  v6:= v8;
  #L40101a.  call temp:= `a`(v10, v2) @signature `Ln/b/a/u/e;.a:(Ljava/lang/Object;)Z` @kind virtual;
  #L401020.  v4:= v4 + 1;
  #L401024.  goto L400fba;
  #L401026.  if v5 > v12 then goto L401038;
  #L40102a.  if v5 != v12 then goto L401034;
  #L40102e.  if v3 == 0 then goto L401034;
  #L401032.  goto L401038;
  #L401034.  v10:= ~v6 @kind int;
  #L401036.  return v10;
  #L401038.  if v7 == 0 then goto L401042;
  #L40103c.  call temp:= `a`(v10, v7) @signature `Ln/b/a/u/e;.a:(Ljava/lang/Object;)Z` @kind virtual;
  #L401042.  return v5;
}
procedure `int` `b`(`n.b.a.u.c$e` v1 @kind this) @signature `Ln/b/a/u/c$e;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400f88.  v0:= v1.`n.b.a.u.c$e.c` @type ^`int`;
  #L400f8c.  return v0;
}
