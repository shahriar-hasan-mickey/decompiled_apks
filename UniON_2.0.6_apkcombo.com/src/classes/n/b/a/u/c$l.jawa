record `n.b.a.u.c$l` @kind class @AccessFlag  extends `n.b.a.u.m` @kind interface, `n.b.a.u.k` @kind interface {
  `java.lang.String` `n.b.a.u.c$l.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `n.b.a.u.c$l.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `n.b.a.u.c$l.d` @AccessFlag PRIVATE_FINAL;
  `int` `n.b.a.u.c$l.e` @AccessFlag PRIVATE_FINAL;
  `int` `n.b.a.u.c$l.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n.b.a.u.c$l` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object, `boolean` v3 , `int` v4 , `int` v5 ) @signature `Ln/b/a/u/c$l;.<init>:(Ljava/lang/String;Ljava/lang/String;ZII)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L401e74.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L401e7a.  v0.`n.b.a.u.c$l.b` @type ^`java.lang.String` := v1 @kind object;
  #L401e7e.  v0.`n.b.a.u.c$l.c` @type ^`java.lang.String` := v2 @kind object;
  #L401e82.  v0.`n.b.a.u.c$l.d` @type ^`boolean` := v3 @kind boolean;
  #L401e86.  if v4 <= 0 then goto L401ea4;
  #L401e8a.  if v5 < v4 then goto L401ea4;
  #L401e8e.  v1:= 4I;
  #L401e90.  if v4 <= v1 then goto L401e98;
  #L401e94.  v5:= 4I;
  #L401e96.  goto L401e9a;
  #L401e98.  v1:= v4;
  #L401e9a.  v0.`n.b.a.u.c$l.e` @type ^`int` := v1;
  #L401e9e.  v0.`n.b.a.u.c$l.f` @type ^`int` := v5;
  #L401ea2.  return @kind void;
  #L401ea4.  v1:= new `java.lang.IllegalArgumentException`;
  #L401ea8.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L401eae.  throw v1;
}
procedure `int` `a`(`n.b.a.u.c$l` v3 @kind this, `java.lang.CharSequence` v4 @kind object, `int` v5 , `int` v6 ) @signature `Ln/b/a/u/c$l;.a:(Ljava/lang/CharSequence;II)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L401b58.  call temp:= `length`(v4) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L401b5e.  v0:= temp;
  #L401b60.  v0:= v0 - v5 @kind int;
  #L401b62.  call temp:= `min`(v0, v6) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L401b68.  v6:= temp;
  #L401b6a.  v0:= 0I;
  #L401b6c.  if v6 <= 0 then goto L401b98;
  #L401b70.  v1:= v5 + v0 @kind int;
  #L401b74.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L401b7a.  v1:= temp;
  #L401b7c.  v2:= 48I;
  #L401b80.  if v1 < v2 then goto L401b98;
  #L401b84.  v2:= 57I;
  #L401b88.  if v1 <= v2 then goto L401b8e;
  #L401b8c.  goto L401b98;
  #L401b8e.  v0:= v0 + 1;
  #L401b92.  v6:= v6 + -1;
  #L401b96.  goto L401b6c;
  #L401b98.  return v0;
}
procedure `int` `a`(`n.b.a.u.c$l` v11 @kind this, `n.b.a.u.e` v12 @kind object, `java.lang.CharSequence` v13 @kind object, `int` v14 ) @signature `Ln/b/a/u/c$l;.a:(Ln/b/a/u/e;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L401c14.  call temp:= `length`(v13) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L401c1a.  v0:= temp;
  #L401c1c.  v0:= v0 - v14 @kind int;
  #L401c1e.  v1:= v11.`n.b.a.u.c$l.c` @type ^`java.lang.String` @kind object;
  #L401c22.  v2:= 43I;
  #L401c26.  v3:= 45I;
  #L401c2a.  v4:= 0I;
  #L401c2c.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L401c32.  v5:= temp @kind object;
  #L401c34.  if v1 == 0 then goto L401c88;
  #L401c38.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L401c3e.  v1:= temp;
  #L401c40.  if v1 != 0 then goto L401c62;
  #L401c44.  if v0 <= 0 then goto L401c5a;
  #L401c48.  call temp:= `charAt`(v13, v14) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L401c4e.  v1:= temp;
  #L401c50.  if v1 == v3 then goto L401c88;
  #L401c54.  if v1 != v2 then goto L401c5a;
  #L401c58.  goto L401c88;
  #L401c5a.  call `a`(v12, v5) @signature `Ln/b/a/u/e;.a:(Ljava/lang/Integer;)V` @kind virtual;
  #L401c60.  return v14;
  #L401c62.  v1:= v11.`n.b.a.u.c$l.c` @type ^`java.lang.String` @kind object;
  #L401c66.  call temp:= `b`(v13, v14, v1) @signature `Ln/b/a/u/c;.b:(Ljava/lang/CharSequence;ILjava/lang/String;)Z` @kind static;
  #L401c6c.  v1:= temp;
  #L401c6e.  if v1 == 0 then goto L401c88;
  #L401c72.  call `a`(v12, v5) @signature `Ln/b/a/u/e;.a:(Ljava/lang/Integer;)V` @kind virtual;
  #L401c78.  v12:= v11.`n.b.a.u.c$l.c` @type ^`java.lang.String` @kind object;
  #L401c7c.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L401c82.  v12:= temp;
  #L401c84.  v14:= v14 + v12 @kind int;
  #L401c86.  return v14;
  #L401c88.  v1:= 1I;
  #L401c8a.  if v0 > v1 then goto L401c92;
  #L401c8e.  v12:= ~v14 @kind int;
  #L401c90.  return v12;
  #L401c92.  call temp:= `charAt`(v13, v14) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L401c98.  v5:= temp;
  #L401c9a.  if v5 != v3 then goto L401ca2;
  #L401c9e.  v2:= 1I;
  #L401ca0.  goto L401ca8;
  #L401ca2.  if v5 != v2 then goto L401e60;
  #L401ca6.  v2:= 0I;
  #L401ca8.  v0:= v0 + -1;
  #L401cac.  v14:= v14 + v1 @kind int;
  #L401cae.  v3:= 2I;
  #L401cb0.  call temp:= `a`(v11, v13, v14, v3) @signature `Ln/b/a/u/c$l;.a:(Ljava/lang/CharSequence;II)I` @kind direct;
  #L401cb6.  v5:= temp;
  #L401cb8.  if v5 >= v3 then goto L401cc0;
  #L401cbc.  v12:= ~v14 @kind int;
  #L401cbe.  return v12;
  #L401cc0.  call temp:= `a`(v13, v14) @signature `Ln/b/a/u/i;.a:(Ljava/lang/CharSequence;I)I` @kind static;
  #L401cc6.  v5:= temp;
  #L401cc8.  v6:= 23I;
  #L401ccc.  if v5 <= v6 then goto L401cd4;
  #L401cd0.  v12:= ~v14 @kind int;
  #L401cd2.  return v12;
  #L401cd4.  v6:= 3600000I;
  #L401cda.  v5:= v5 * v6 @kind int;
  #L401cde.  v0:= v0 + -2;
  #L401ce2.  v14:= v14 + v3 @kind int;
  #L401ce4.  if v0 > 0 then goto L401cec;
  #L401ce8.  goto L401e4a;
  #L401cec.  call temp:= `charAt`(v13, v14) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L401cf2.  v6:= temp;
  #L401cf4.  v7:= 58I;
  #L401cf8.  v8:= 48I;
  #L401cfc.  if v6 != v7 then goto L401d0c;
  #L401d00.  v0:= v0 + -1;
  #L401d04.  v14:= v14 + 1;
  #L401d08.  v4:= 1I;
  #L401d0a.  goto L401d18;
  #L401d0c.  if v6 < v8 then goto L401e4a;
  #L401d10.  v9:= 57I;
  #L401d14.  if v6 > v9 then goto L401e4a;
  #L401d18.  call temp:= `a`(v11, v13, v14, v3) @signature `Ln/b/a/u/c$l;.a:(Ljava/lang/CharSequence;II)I` @kind direct;
  #L401d1e.  v6:= temp;
  #L401d20.  if v6 != 0 then goto L401d2c;
  #L401d24.  if v4 != 0 then goto L401d2c;
  #L401d28.  goto L401e4a;
  #L401d2c.  if v6 >= v3 then goto L401d34;
  #L401d30.  v12:= ~v14 @kind int;
  #L401d32.  return v12;
  #L401d34.  call temp:= `a`(v13, v14) @signature `Ln/b/a/u/i;.a:(Ljava/lang/CharSequence;I)I` @kind static;
  #L401d3a.  v6:= temp;
  #L401d3c.  v9:= 59I;
  #L401d40.  if v6 <= v9 then goto L401d48;
  #L401d44.  v12:= ~v14 @kind int;
  #L401d46.  return v12;
  #L401d48.  v10:= 60000I;
  #L401d4e.  v6:= v6 * v10 @kind int;
  #L401d52.  v5:= v5 + v6 @kind int;
  #L401d54.  v0:= v0 + -2;
  #L401d58.  v14:= v14 + 2;
  #L401d5c.  if v0 > 0 then goto L401d64;
  #L401d60.  goto L401e4a;
  #L401d64.  if v4 == 0 then goto L401d80;
  #L401d68.  call temp:= `charAt`(v13, v14) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L401d6e.  v6:= temp;
  #L401d70.  if v6 == v7 then goto L401d78;
  #L401d74.  goto L401e4a;
  #L401d78.  v0:= v0 + -1;
  #L401d7c.  v14:= v14 + 1;
  #L401d80.  call temp:= `a`(v11, v13, v14, v3) @signature `Ln/b/a/u/c$l;.a:(Ljava/lang/CharSequence;II)I` @kind direct;
  #L401d86.  v6:= temp;
  #L401d88.  if v6 != 0 then goto L401d92;
  #L401d8c.  if v4 != 0 then goto L401d92;
  #L401d90.  goto L401e4a;
  #L401d92.  if v6 >= v3 then goto L401d9a;
  #L401d96.  v12:= ~v14 @kind int;
  #L401d98.  return v12;
  #L401d9a.  call temp:= `a`(v13, v14) @signature `Ln/b/a/u/i;.a:(Ljava/lang/CharSequence;I)I` @kind static;
  #L401da0.  v6:= temp;
  #L401da2.  if v6 <= v9 then goto L401daa;
  #L401da6.  v12:= ~v14 @kind int;
  #L401da8.  return v12;
  #L401daa.  v6:= v6 * 1000;
  #L401dae.  v5:= v5 + v6 @kind int;
  #L401db0.  v0:= v0 + -2;
  #L401db4.  v14:= v14 + 2;
  #L401db8.  if v0 > 0 then goto L401dbe;
  #L401dbc.  goto L401e4a;
  #L401dbe.  if v4 == 0 then goto L401de8;
  #L401dc2.  call temp:= `charAt`(v13, v14) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L401dc8.  v0:= temp;
  #L401dca.  v6:= 46I;
  #L401dce.  if v0 == v6 then goto L401de4;
  #L401dd2.  call temp:= `charAt`(v13, v14) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L401dd8.  v0:= temp;
  #L401dda.  v6:= 44I;
  #L401dde.  if v0 == v6 then goto L401de4;
  #L401de2.  goto L401e4a;
  #L401de4.  v14:= v14 + 1;
  #L401de8.  v0:= 3I;
  #L401dea.  call temp:= `a`(v11, v13, v14, v0) @signature `Ln/b/a/u/c$l;.a:(Ljava/lang/CharSequence;II)I` @kind direct;
  #L401df0.  v0:= temp;
  #L401df2.  if v0 != 0 then goto L401dfc;
  #L401df6.  if v4 != 0 then goto L401dfc;
  #L401dfa.  goto L401e4a;
  #L401dfc.  if v0 >= v1 then goto L401e04;
  #L401e00.  v12:= ~v14 @kind int;
  #L401e02.  return v12;
  #L401e04.  v4:= v14 + 1;
  #L401e08.  call temp:= `charAt`(v13, v14) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L401e0e.  v14:= temp;
  #L401e10.  v14:= v14 - v8 @kind int;
  #L401e12.  v14:= v14 * 100;
  #L401e16.  v5:= v5 + v14 @kind int;
  #L401e18.  if v0 <= v1 then goto L401e48;
  #L401e1c.  v14:= v4 + 1;
  #L401e20.  call temp:= `charAt`(v13, v4) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L401e26.  v1:= temp;
  #L401e28.  v1:= v1 - v8 @kind int;
  #L401e2a.  v1:= v1 * 10;
  #L401e2e.  v5:= v5 + v1 @kind int;
  #L401e30.  if v0 <= v3 then goto L401e4a;
  #L401e34.  v0:= v14 + 1;
  #L401e38.  call temp:= `charAt`(v13, v14) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L401e3e.  v13:= temp;
  #L401e40.  v13:= v13 - v8 @kind int;
  #L401e42.  v5:= v5 + v13 @kind int;
  #L401e44.  v14:= v0;
  #L401e46.  goto L401e4a;
  #L401e48.  v14:= v4;
  #L401e4a.  if v2 == 0 then goto L401e50;
  #L401e4e.  v5:= -v5 @kind int;
  #L401e50.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L401e56.  v13:= temp @kind object;
  #L401e58.  call `a`(v12, v13) @signature `Ln/b/a/u/e;.a:(Ljava/lang/Integer;)V` @kind virtual;
  #L401e5e.  return v14;
  #L401e60.  v12:= ~v14 @kind int;
  #L401e62.  return v12;
}
procedure `void` `a`(`n.b.a.u.c$l` v0 @kind this, `java.lang.Appendable` v1 @kind object, `long` v2 , `n.b.a.a` v4 @kind object, `int` v5 , `n.b.a.f` v6 @kind object, `java.util.Locale` v7 @kind object) @signature `Ln/b/a/u/c$l;.a:(Ljava/lang/Appendable;JLn/b/a/a;ILn/b/a/f;Ljava/util/Locale;)V` @AccessFlag PUBLIC {
    temp;

  #L401ec0.  if v6 != 0 then goto L401ec6;
  #L401ec4.  return @kind void;
  #L401ec6.  if v5 != 0 then goto L401eda;
  #L401eca.  v2:= v0.`n.b.a.u.c$l.b` @type ^`java.lang.String` @kind object;
  #L401ece.  if v2 == 0 then goto L401eda;
  #L401ed2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L401ed8.  return @kind void;
  #L401eda.  if v5 < 0 then goto L401eea;
  #L401ede.  v2:= 43I;
  #L401ee2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L401ee8.  goto L401ef6;
  #L401eea.  v2:= 45I;
  #L401eee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L401ef4.  v5:= -v5 @kind int;
  #L401ef6.  v2:= 3600000I;
  #L401efc.  v3:= v5 / v2 @kind int;
  #L401f00.  v4:= 2I;
  #L401f02.  call `a`(v1, v3, v4) @signature `Ln/b/a/u/i;.a:(Ljava/lang/Appendable;II)V` @kind static;
  #L401f08.  v6:= v0.`n.b.a.u.c$l.f` @type ^`int`;
  #L401f0c.  v7:= 1I;
  #L401f0e.  if v6 != v7 then goto L401f14;
  #L401f12.  return @kind void;
  #L401f14.  v3:= v3 * v2 @kind int;
  #L401f18.  v5:= v5 - v3 @kind int;
  #L401f1a.  if v5 != 0 then goto L401f28;
  #L401f1e.  v2:= v0.`n.b.a.u.c$l.e` @type ^`int`;
  #L401f22.  if v2 > v7 then goto L401f28;
  #L401f26.  return @kind void;
  #L401f28.  v2:= 60000I;
  #L401f2e.  v3:= v5 / v2 @kind int;
  #L401f32.  v6:= v0.`n.b.a.u.c$l.d` @type ^`boolean` @kind boolean;
  #L401f36.  v7:= 58I;
  #L401f3a.  if v6 == 0 then goto L401f44;
  #L401f3e.  call temp:= `append`(v1, v7) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L401f44.  call `a`(v1, v3, v4) @signature `Ln/b/a/u/i;.a:(Ljava/lang/Appendable;II)V` @kind static;
  #L401f4a.  v6:= v0.`n.b.a.u.c$l.f` @type ^`int`;
  #L401f4e.  if v6 != v4 then goto L401f54;
  #L401f52.  return @kind void;
  #L401f54.  v3:= v3 * v2 @kind int;
  #L401f58.  v5:= v5 - v3 @kind int;
  #L401f5a.  if v5 != 0 then goto L401f68;
  #L401f5e.  v2:= v0.`n.b.a.u.c$l.e` @type ^`int`;
  #L401f62.  if v2 > v4 then goto L401f68;
  #L401f66.  return @kind void;
  #L401f68.  v2:= v5 / 1000;
  #L401f6c.  v3:= v0.`n.b.a.u.c$l.d` @type ^`boolean` @kind boolean;
  #L401f70.  if v3 == 0 then goto L401f7a;
  #L401f74.  call temp:= `append`(v1, v7) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L401f7a.  call `a`(v1, v2, v4) @signature `Ln/b/a/u/i;.a:(Ljava/lang/Appendable;II)V` @kind static;
  #L401f80.  v3:= v0.`n.b.a.u.c$l.f` @type ^`int`;
  #L401f84.  v4:= 3I;
  #L401f86.  if v3 != v4 then goto L401f8c;
  #L401f8a.  return @kind void;
  #L401f8c.  v2:= v2 * 1000;
  #L401f90.  v5:= v5 - v2 @kind int;
  #L401f92.  if v5 != 0 then goto L401fa0;
  #L401f96.  v2:= v0.`n.b.a.u.c$l.e` @type ^`int`;
  #L401f9a.  if v2 > v4 then goto L401fa0;
  #L401f9e.  return @kind void;
  #L401fa0.  v2:= v0.`n.b.a.u.c$l.d` @type ^`boolean` @kind boolean;
  #L401fa4.  if v2 == 0 then goto L401fb2;
  #L401fa8.  v2:= 46I;
  #L401fac.  call temp:= `append`(v1, v2) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L401fb2.  call `a`(v1, v5, v4) @signature `Ln/b/a/u/i;.a:(Ljava/lang/Appendable;II)V` @kind static;
  #L401fb8.  return @kind void;
}
procedure `int` `b`(`n.b.a.u.c$l` v1 @kind this) @signature `Ln/b/a/u/c$l;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L401bac.  call temp:= `e`(v1) @signature `Ln/b/a/u/c$l;.e:()I` @kind virtual;
  #L401bb2.  v0:= temp;
  #L401bb4.  return v0;
}
procedure `int` `e`(`n.b.a.u.c$l` v3 @kind this) @signature `Ln/b/a/u/c$l;.e:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L401bc8.  v0:= v3.`n.b.a.u.c$l.e` @type ^`int`;
  #L401bcc.  v1:= v0 + 1;
  #L401bd0.  v1:= v1 ^< 1;
  #L401bd4.  v2:= v3.`n.b.a.u.c$l.d` @type ^`boolean` @kind boolean;
  #L401bd8.  if v2 == 0 then goto L401be2;
  #L401bdc.  v0:= v0 + -1;
  #L401be0.  v1:= v1 + v0 @kind int;
  #L401be2.  v0:= v3.`n.b.a.u.c$l.b` @type ^`java.lang.String` @kind object;
  #L401be6.  if v0 == 0 then goto L401c02;
  #L401bea.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L401bf0.  v0:= temp;
  #L401bf2.  if v0 <= v1 then goto L401c02;
  #L401bf6.  v0:= v3.`n.b.a.u.c$l.b` @type ^`java.lang.String` @kind object;
  #L401bfa.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L401c00.  v1:= temp;
  #L401c02.  return v1;
}
