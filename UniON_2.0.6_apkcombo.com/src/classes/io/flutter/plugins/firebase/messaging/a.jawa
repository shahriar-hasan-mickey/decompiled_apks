record `io.flutter.plugins.firebase.messaging.a` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC extends `java.lang.Runnable` @kind interface {
  `io.flutter.plugins.firebase.messaging.o` `io.flutter.plugins.firebase.messaging.a.b` @AccessFlag PRIVATE_FINAL_SYNTHETIC;
  `io.flutter.embedding.engine.d` `io.flutter.plugins.firebase.messaging.a.c` @AccessFlag PRIVATE_FINAL_SYNTHETIC;
  `long` `io.flutter.plugins.firebase.messaging.a.d` @AccessFlag PRIVATE_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.flutter.plugins.firebase.messaging.a` v0 @kind this, `io.flutter.plugins.firebase.messaging.o` v1 @kind object, `io.flutter.embedding.engine.d` v2 @kind object, `long` v3 ) @signature `Lio/flutter/plugins/firebase/messaging/a;.<init>:(Lio/flutter/plugins/firebase/messaging/o;Lio/flutter/embedding/engine/d;J)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L3c0b00.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3c0b06.  v0.`io.flutter.plugins.firebase.messaging.a.b` @type ^`io.flutter.plugins.firebase.messaging.o` := v1 @kind object;
  #L3c0b0a.  v0.`io.flutter.plugins.firebase.messaging.a.c` @type ^`io.flutter.embedding.engine.d` := v2 @kind object;
  #L3c0b0e.  v0.`io.flutter.plugins.firebase.messaging.a.d` @type ^`long` := v3 @kind wide;
  #L3c0b12.  return @kind void;
}
procedure `void` `run`(`io.flutter.plugins.firebase.messaging.a` v4 @kind this) @signature `Lio/flutter/plugins/firebase/messaging/a;.run:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3c0b24.  v0:= v4.`io.flutter.plugins.firebase.messaging.a.b` @type ^`io.flutter.plugins.firebase.messaging.o` @kind object;
  #L3c0b28.  v1:= v4.`io.flutter.plugins.firebase.messaging.a.c` @type ^`io.flutter.embedding.engine.d` @kind object;
  #L3c0b2c.  v2:= v4.`io.flutter.plugins.firebase.messaging.a.d` @type ^`long` @kind wide;
  #L3c0b30.  call `a`(v0, v1, v2) @signature `Lio/flutter/plugins/firebase/messaging/o;.a:(Lio/flutter/embedding/engine/d;J)V` @kind virtual;
  #L3c0b36.  return @kind void;
}
