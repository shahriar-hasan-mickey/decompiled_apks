record `e.h.a.f.b` @kind class @AccessFlag PUBLIC_ABSTRACT extends `e.h.a.f.f` @kind interface {
}
procedure `void` `<init>`(`e.h.a.f.b` v0 @kind this) @signature `Le/h/a/f/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39c104.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39c10a.  return @kind void;
}
procedure `java.lang.Boolean` `b`(`e.h.a.f.b` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Le/h/a/f/b;.b:(Ljava/lang/String;)Ljava/lang/Boolean;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L39c070.  call temp:= `a`(v1, v2) @signature `Le/h/a/f/f;.a:(Ljava/lang/String;)Ljava/lang/Object;` @kind interface;
  #L39c076.  v2:= temp @kind object;
  #L39c078.  v0:= instanceof @variable v2 @type ^`java.lang.Boolean` @kind boolean;
  #L39c07c.  if v0 == 0 then goto L39c086;
  #L39c080.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L39c084.  return v2 @kind object;
  #L39c086.  v2:= 0I;
  #L39c088.  return v2 @kind object;
}
procedure `java.lang.String` `e`(`e.h.a.f.b` v1 @kind this) @signature `Le/h/a/f/b;.e:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L39c0bc.  v0:= "sql" @kind object;
  #L39c0c0.  call temp:= `a`(v1, v0) @signature `Le/h/a/f/f;.a:(Ljava/lang/String;)Ljava/lang/Object;` @kind interface;
  #L39c0c6.  v0:= temp @kind object;
  #L39c0c8.  v0:= (`java.lang.String`) v0 @kind object;
  #L39c0cc.  return v0 @kind object;
}
procedure `java.util.List` `f`(`e.h.a.f.b` v1 @kind this) @signature `Le/h/a/f/b;.f:()Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L39c0e0.  v0:= "arguments" @kind object;
  #L39c0e4.  call temp:= `a`(v1, v0) @signature `Le/h/a/f/f;.a:(Ljava/lang/String;)Ljava/lang/Object;` @kind interface;
  #L39c0ea.  v0:= temp @kind object;
  #L39c0ec.  v0:= (`java.util.List`) v0 @kind object;
  #L39c0f0.  return v0 @kind object;
}
procedure `e.h.a.d` `a`(`e.h.a.f.b` v3 @kind this) @signature `Le/h/a/f/b;.a:()Le/h/a/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39c044.  v0:= new `e.h.a.d`;
  #L39c048.  call temp:= `e`(v3) @signature `Le/h/a/f/b;.e:()Ljava/lang/String;` @kind direct;
  #L39c04e.  v1:= temp @kind object;
  #L39c050.  call temp:= `f`(v3) @signature `Le/h/a/f/b;.f:()Ljava/util/List;` @kind direct;
  #L39c056.  v2:= temp @kind object;
  #L39c058.  call `<init>`(v0, v1, v2) @signature `Le/h/a/d;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L39c05e.  return v0 @kind object;
}
procedure `boolean` `b`(`e.h.a.f.b` v2 @kind this) @signature `Le/h/a/f/b;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39c018.  v0:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L39c01c.  v1:= "noResult" @kind object;
  #L39c020.  call temp:= `a`(v2, v1) @signature `Le/h/a/f/f;.a:(Ljava/lang/String;)Ljava/lang/Object;` @kind interface;
  #L39c026.  v1:= temp @kind object;
  #L39c028.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Boolean;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39c02e.  v0:= temp;
  #L39c030.  return v0;
}
procedure `java.lang.Boolean` `c`(`e.h.a.f.b` v1 @kind this) @signature `Le/h/a/f/b;.c:()Ljava/lang/Boolean;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39c09c.  v0:= "inTransaction" @kind object;
  #L39c0a0.  call temp:= `b`(v1, v0) @signature `Le/h/a/f/b;.b:(Ljava/lang/String;)Ljava/lang/Boolean;` @kind direct;
  #L39c0a6.  v0:= temp @kind object;
  #L39c0a8.  return v0 @kind object;
}
procedure `boolean` `d`(`e.h.a.f.b` v2 @kind this) @signature `Le/h/a/f/b;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39bfec.  v0:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L39bff0.  v1:= "continueOnError" @kind object;
  #L39bff4.  call temp:= `a`(v2, v1) @signature `Le/h/a/f/f;.a:(Ljava/lang/String;)Ljava/lang/Object;` @kind interface;
  #L39bffa.  v1:= temp @kind object;
  #L39bffc.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Boolean;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39c002.  v0:= temp;
  #L39c004.  return v0;
}
