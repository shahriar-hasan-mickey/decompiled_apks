record `e.h.a.c$g` @kind class @AccessFlag  extends `java.lang.Runnable` @kind interface {
  `e.h.a.a` `e.h.a.c$g.b` @AccessFlag FINAL_SYNTHETIC;
  `e.h.a.c$i` `e.h.a.c$g.c` @AccessFlag FINAL_SYNTHETIC;
  `e.h.a.c` `e.h.a.c$g.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.h.a.c$g` v0 @kind this, `e.h.a.c` v1 @kind object, `e.h.a.a` v2 @kind object, `e.h.a.c$i` v3 @kind object) @signature `Le/h/a/c$g;.<init>:(Le/h/a/c;Le/h/a/a;Le/h/a/c$i;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L399a88.  v0.`e.h.a.c$g.d` @type ^`e.h.a.c` := v1 @kind object;
  #L399a8c.  v0.`e.h.a.c$g.b` @type ^`e.h.a.a` := v2 @kind object;
  #L399a90.  v0.`e.h.a.c$g.c` @type ^`e.h.a.c$i` := v3 @kind object;
  #L399a94.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L399a9a.  return @kind void;
}
procedure `void` `run`(`e.h.a.c$g` v3 @kind this) @signature `Le/h/a/c$g;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L399aac.  call temp:= `b`() @signature `Le/h/a/c;.b:()Ljava/lang/Object;` @kind static;
  #L399ab2.  v0:= temp @kind object;
  #L399ab4.  @monitorenter v0
  #L399ab6.  v1:= v3.`e.h.a.c$g.d` @type ^`e.h.a.c` @kind object;
  #L399aba.  v2:= v3.`e.h.a.c$g.b` @type ^`e.h.a.a` @kind object;
  #L399abe.  call `a`(v1, v2) @signature `Le/h/a/c;.a:(Le/h/a/c;Le/h/a/a;)V` @kind static;
  #L399ac4.  @monitorexit v0
  #L399ac6.  v0:= v3.`e.h.a.c$g.c` @type ^`e.h.a.c$i` @kind object;
  #L399aca.  v1:= 0I;
  #L399acc.  call `a`(v0, v1) @signature `Le/h/a/c$i;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L399ad2.  return @kind void;
  #L399ad4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L399ad6.  @monitorexit v0
  #L399ad8.  throw v1;
  catch `java.lang.Throwable` @[L399ab6..L399ac6] goto L399ad4;
  catch `java.lang.Throwable` @[L399ad6..L399ad8] goto L399ad4;
}
