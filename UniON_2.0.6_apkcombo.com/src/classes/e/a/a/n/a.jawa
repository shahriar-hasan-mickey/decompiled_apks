record `e.a.a.n.a` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
}
global `e.a.a.n.a` `@@e.a.a.n.a.b` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `e.a.a.n.a` `@@e.a.a.n.a.c` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `e.a.a.n.a` `@@e.a.a.n.a.d` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `e.a.a.n.a` `@@e.a.a.n.a.e` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `e.a.a.n.a`[] `@@e.a.a.n.a.f` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Le/a/a/n/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1caca4.  v0:= new `e.a.a.n.a`;
  #L1caca8.  v1:= 0I;
  #L1cacaa.  v2:= "denied" @kind object;
  #L1cacae.  call `<init>`(v0, v2, v1) @signature `Le/a/a/n/a;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1cacb4.  `@@e.a.a.n.a.b` @type ^`e.a.a.n.a` := v0 @kind object;
  #L1cacb8.  v0:= new `e.a.a.n.a`;
  #L1cacbc.  v2:= 1I;
  #L1cacbe.  v3:= "deniedForever" @kind object;
  #L1cacc2.  call `<init>`(v0, v3, v2) @signature `Le/a/a/n/a;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1cacc8.  `@@e.a.a.n.a.c` @type ^`e.a.a.n.a` := v0 @kind object;
  #L1caccc.  v0:= new `e.a.a.n.a`;
  #L1cacd0.  v3:= 2I;
  #L1cacd2.  v4:= "whileInUse" @kind object;
  #L1cacd6.  call `<init>`(v0, v4, v3) @signature `Le/a/a/n/a;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1cacdc.  `@@e.a.a.n.a.d` @type ^`e.a.a.n.a` := v0 @kind object;
  #L1cace0.  v0:= new `e.a.a.n.a`;
  #L1cace4.  v4:= 3I;
  #L1cace6.  v5:= "always" @kind object;
  #L1cacea.  call `<init>`(v0, v5, v4) @signature `Le/a/a/n/a;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1cacf0.  `@@e.a.a.n.a.e` @type ^`e.a.a.n.a` := v0 @kind object;
  #L1cacf4.  v0:= 4I;
  #L1cacf6.  v0:= new `e.a.a.n.a`[v0];
  #L1cacfa.  v5:= `@@e.a.a.n.a.b` @type ^`e.a.a.n.a` @kind object;
  #L1cacfe.  v0[v1]:= v5 @kind object;
  #L1cad02.  v1:= `@@e.a.a.n.a.c` @type ^`e.a.a.n.a` @kind object;
  #L1cad06.  v0[v2]:= v1 @kind object;
  #L1cad0a.  v1:= `@@e.a.a.n.a.d` @type ^`e.a.a.n.a` @kind object;
  #L1cad0e.  v0[v3]:= v1 @kind object;
  #L1cad12.  v1:= `@@e.a.a.n.a.e` @type ^`e.a.a.n.a` @kind object;
  #L1cad16.  v0[v4]:= v1 @kind object;
  #L1cad1a.  `@@e.a.a.n.a.f` @type ^`e.a.a.n.a`[] := v0 @kind object;
  #L1cad1e.  return @kind void;
}
procedure `void` `<init>`(`e.a.a.n.a` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Le/a/a/n/a;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1cad30.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1cad36.  return @kind void;
}
procedure `e.a.a.n.a` `valueOf`(`java.lang.String` v1 @kind object) @signature `Le/a/a/n/a;.valueOf:(Ljava/lang/String;)Le/a/a/n/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1cac0c.  v0:= constclass @type ^`e.a.a.n.a` @kind object;
  #L1cac10.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L1cac16.  v1:= temp @kind object;
  #L1cac18.  v1:= (`e.a.a.n.a`) v1 @kind object;
  #L1cac1c.  return v1 @kind object;
}
procedure `e.a.a.n.a`[] `values`() @signature `Le/a/a/n/a;.values:()[Le/a/a/n/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1cac30.  v0:= `@@e.a.a.n.a.f` @type ^`e.a.a.n.a`[] @kind object;
  #L1cac34.  call temp:= `clone`(v0) @signature `[Le/a/a/n/a;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1cac3a.  v0:= temp @kind object;
  #L1cac3c.  v0:= (`e.a.a.n.a`[]) v0 @kind object;
  #L1cac40.  return v0 @kind object;
}
procedure `int` `b`(`e.a.a.n.a` v3 @kind this) @signature `Le/a/a/n/a;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1cac54.  v0:= `@@e.a.a.n.a$a.a` @type ^`int`[] @kind object;
  #L1cac58.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1cac5e.  v1:= temp;
  #L1cac60.  v0:= v0[v1];
  #L1cac64.  v1:= 1I;
  #L1cac66.  if v0 == v1 then goto L1cac8e;
  #L1cac6a.  v2:= 2I;
  #L1cac6c.  if v0 == v2 then goto L1cac8c;
  #L1cac70.  v1:= 3I;
  #L1cac72.  if v0 == v1 then goto L1cac8a;
  #L1cac76.  v2:= 4I;
  #L1cac78.  if v0 != v2 then goto L1cac7e;
  #L1cac7c.  return v1;
  #L1cac7e.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L1cac82.  call `<init>`(v0) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L1cac88.  throw v0;
  #L1cac8a.  return v2;
  #L1cac8c.  return v1;
  #L1cac8e.  v0:= 0I;
  #L1cac90.  return v0;
}
