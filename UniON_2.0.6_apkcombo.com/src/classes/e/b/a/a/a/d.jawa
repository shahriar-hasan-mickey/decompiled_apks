record `e.b.a.a.a.d` @kind class @AccessFlag  extends `e.b.a.a.a.a` @kind interface {
  `e.e.e.b.d.b` `e.b.a.a.a.d.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e.b.a.a.a.d` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Le/b/a/a/a/d;.<init>:(Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1ceaa0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ceaa6.  v1:= `@@e.e.e.b.d.e.a.c` @type ^`e.e.e.b.d.e.a` @kind object;
  #L1ceaaa.  call temp:= `a`(v1) @signature `Le/e/e/b/d/d;.a:(Le/e/e/b/d/c;)Le/e/e/b/d/b;` @kind static;
  #L1ceab0.  v1:= temp @kind object;
  #L1ceab2.  v0.`e.b.a.a.a.d.a` @type ^`e.e.e.b.d.b` := v1 @kind object;
  #L1ceab6.  return @kind void;
}
procedure `void` `a`(`e.b.a.a.a.d` v1 @kind this, `e.e.e.b.b.a` v2 @kind object, `h.a.c.a.j$d` v3 @kind object) @signature `Le/b/a/a/a/d;.a:(Le/e/e/b/b/a;Lh/a/c/a/j$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ceae4.  v0:= v1.`e.b.a.a.a.d.a` @type ^`e.e.e.b.d.b` @kind object;
  #L1ceae8.  call temp:= `a`(v0, v2) @signature `Le/e/e/b/d/b;.a:(Le/e/e/b/b/a;)Le/e/a/b/j/l;` @kind interface;
  #L1ceaee.  v2:= temp @kind object;
  #L1ceaf0.  v0:= new `e.b.a.a.a.d$b`;
  #L1ceaf4.  call `<init>`(v0, v1, v3) @signature `Le/b/a/a/a/d$b;.<init>:(Le/b/a/a/a/d;Lh/a/c/a/j$d;)V` @kind direct;
  #L1ceafa.  call temp:= `a`(v2, v0) @signature `Le/e/a/b/j/l;.a:(Le/e/a/b/j/h;)Le/e/a/b/j/l;` @kind virtual;
  #L1ceb00.  v0:= new `e.b.a.a.a.d$a`;
  #L1ceb04.  call `<init>`(v0, v1, v3) @signature `Le/b/a/a/a/d$a;.<init>:(Le/b/a/a/a/d;Lh/a/c/a/j$d;)V` @kind direct;
  #L1ceb0a.  call temp:= `a`(v2, v0) @signature `Le/e/a/b/j/l;.a:(Le/e/a/b/j/g;)Le/e/a/b/j/l;` @kind virtual;
  #L1ceb10.  return @kind void;
}
procedure `void` `close`(`e.b.a.a.a.d` v1 @kind this) @signature `Le/b/a/a/a/d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ceac8.  v0:= v1.`e.b.a.a.a.d.a` @type ^`e.e.e.b.d.b` @kind object;
  #L1ceacc.  call `close`(v0) @signature `Le/e/e/b/d/b;.close:()V` @kind interface;
  #L1cead2.  return @kind void;
}
