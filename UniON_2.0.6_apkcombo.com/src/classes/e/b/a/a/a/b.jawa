record `e.b.a.a.a.b` @kind class @AccessFlag  extends `e.b.a.a.a.a` @kind interface {
  `e.e.e.b.a.b` `e.b.a.a.a.b.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e.b.a.a.a.b` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Le/b/a/a/a/b;.<init>:(Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1ce178.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ce17e.  call temp:= `a`(v0, v1) @signature `Le/b/a/a/a/b;.a:(Ljava/util/Map;)Le/e/e/b/a/c;` @kind direct;
  #L1ce184.  v1:= temp @kind object;
  #L1ce186.  call temp:= `a`(v1) @signature `Le/e/e/b/a/d;.a:(Le/e/e/b/a/c;)Le/e/e/b/a/b;` @kind static;
  #L1ce18c.  v1:= temp @kind object;
  #L1ce18e.  v0.`e.b.a.a.a.b.a` @type ^`e.e.e.b.a.b` := v1 @kind object;
  #L1ce192.  return @kind void;
}
procedure `e.e.e.b.a.c` `a`(`e.b.a.a.a.b` v2 @kind this, `java.util.Map` v3 @kind object) @signature `Le/b/a/a/a/b;.a:(Ljava/util/Map;)Le/e/e/b/a/c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1ce130.  v0:= "barcodeFormats" @kind object;
  #L1ce134.  call temp:= `get`(v3, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1ce13a.  v3:= temp @kind object;
  #L1ce13c.  v3:= (`java.lang.Integer`) v3 @kind object;
  #L1ce140.  v0:= new `e.e.e.b.a.c$a`;
  #L1ce144.  call `<init>`(v0) @signature `Le/e/e/b/a/c$a;.<init>:()V` @kind direct;
  #L1ce14a.  call temp:= `intValue`(v3) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1ce150.  v3:= temp;
  #L1ce152.  v1:= 0I;
  #L1ce154.  v1:= new `int`[v1];
  #L1ce158.  call temp:= `a`(v0, v3, v1) @signature `Le/e/e/b/a/c$a;.a:(I[I)Le/e/e/b/a/c$a;` @kind virtual;
  #L1ce15e.  call temp:= `a`(v0) @signature `Le/e/e/b/a/c$a;.a:()Le/e/e/b/a/c;` @kind virtual;
  #L1ce164.  v3:= temp @kind object;
  #L1ce166.  return v3 @kind object;
}
procedure `void` `a`(`e.b.a.a.a.b` v1 @kind this, `e.e.e.b.b.a` v2 @kind object, `h.a.c.a.j$d` v3 @kind object) @signature `Le/b/a/a/a/b;.a:(Le/e/e/b/b/a;Lh/a/c/a/j$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ce1c0.  v0:= v1.`e.b.a.a.a.b.a` @type ^`e.e.e.b.a.b` @kind object;
  #L1ce1c4.  call temp:= `a`(v0, v2) @signature `Le/e/e/b/a/b;.a:(Le/e/e/b/b/a;)Le/e/a/b/j/l;` @kind interface;
  #L1ce1ca.  v2:= temp @kind object;
  #L1ce1cc.  v0:= new `e.b.a.a.a.b$b`;
  #L1ce1d0.  call `<init>`(v0, v1, v3) @signature `Le/b/a/a/a/b$b;.<init>:(Le/b/a/a/a/b;Lh/a/c/a/j$d;)V` @kind direct;
  #L1ce1d6.  call temp:= `a`(v2, v0) @signature `Le/e/a/b/j/l;.a:(Le/e/a/b/j/h;)Le/e/a/b/j/l;` @kind virtual;
  #L1ce1dc.  v0:= new `e.b.a.a.a.b$a`;
  #L1ce1e0.  call `<init>`(v0, v1, v3) @signature `Le/b/a/a/a/b$a;.<init>:(Le/b/a/a/a/b;Lh/a/c/a/j$d;)V` @kind direct;
  #L1ce1e6.  call temp:= `a`(v2, v0) @signature `Le/e/a/b/j/l;.a:(Le/e/a/b/j/g;)Le/e/a/b/j/l;` @kind virtual;
  #L1ce1ec.  return @kind void;
}
procedure `void` `close`(`e.b.a.a.a.b` v1 @kind this) @signature `Le/b/a/a/a/b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ce1a4.  v0:= v1.`e.b.a.a.a.b.a` @type ^`e.e.e.b.a.b` @kind object;
  #L1ce1a8.  call `close`(v0) @signature `Le/e/e/b/a/b;.close:()V` @kind interface;
  #L1ce1ae.  return @kind void;
}
