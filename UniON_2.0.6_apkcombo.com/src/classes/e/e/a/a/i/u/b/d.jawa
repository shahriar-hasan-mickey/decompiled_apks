record `e.e.a.a.i.u.b.d` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.Object` `a`(`java.lang.Object` v0 @kind object) @signature `Le/e/a/a/i/u/b/d;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1dcf68.  if v0 == 0 then goto L1dcf6e;
  #L1dcf6c.  return v0 @kind object;
  #L1dcf6e.  v0:= new `java.lang.NullPointerException`;
  #L1dcf72.  call `<init>`(v0) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L1dcf78.  throw v0;
}
procedure `java.lang.Object` `a`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Le/e/a/a/i/u/b/d;.a:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1dcf8c.  if v0 == 0 then goto L1dcf92;
  #L1dcf90.  return v0 @kind object;
  #L1dcf92.  v0:= new `java.lang.NullPointerException`;
  #L1dcf96.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dcf9c.  throw v0;
}
procedure `void` `a`(`java.lang.Object` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Le/e/a/a/i/u/b/d;.a:(Ljava/lang/Object;Ljava/lang/Class;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1dcfb0.  if v1 == 0 then goto L1dcfb6;
  #L1dcfb4.  return @kind void;
  #L1dcfb6.  v1:= new `java.lang.IllegalStateException`;
  #L1dcfba.  v0:= new `java.lang.StringBuilder`;
  #L1dcfbe.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dcfc4.  call temp:= `getCanonicalName`(v2) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L1dcfca.  v2:= temp @kind object;
  #L1dcfcc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dcfd2.  v2:= " must be set" @kind object;
  #L1dcfd6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dcfdc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dcfe2.  v2:= temp @kind object;
  #L1dcfe4.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dcfea.  throw v1;
}
