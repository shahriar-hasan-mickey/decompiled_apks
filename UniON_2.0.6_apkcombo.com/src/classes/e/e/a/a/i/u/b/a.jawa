record `e.e.a.a.i.u.b.a` @kind class @AccessFlag PUBLIC_FINAL extends `i.a.a` @kind interface, `e.e.a.a.i.u.a` @kind interface {
  `i.a.a` `e.e.a.a.i.u.b.a.a` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `e.e.a.a.i.u.b.a.b` @AccessFlag PRIVATE_VOLATILE;
}
global `java.lang.Object` `@@e.e.a.a.i.u.b.a.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/a/i/u/b/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1dcea8.  v0:= new `java.lang.Object`;
  #L1dceac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1dceb2.  `@@e.e.a.a.i.u.b.a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L1dceb6.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.a.i.u.b.a` v1 @kind this, `i.a.a` v2 @kind object) @signature `Le/e/a/a/i/u/b/a;.<init>:(Li/a/a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L1dcec8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1dcece.  v0:= `@@e.e.a.a.i.u.b.a.c` @type ^`java.lang.Object` @kind object;
  #L1dced2.  v1.`e.e.a.a.i.u.b.a.b` @type ^`java.lang.Object` := v0 @kind object;
  #L1dced6.  v1.`e.e.a.a.i.u.b.a.a` @type ^`i.a.a` := v2 @kind object;
  #L1dceda.  return @kind void;
}
procedure `i.a.a` `a`(`i.a.a` v1 @kind object) @signature `Le/e/a/a/i/u/b/a;.a:(Li/a/a;)Li/a/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1dce7c.  call temp:= `a`(v1) @signature `Le/e/a/a/i/u/b/d;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1dce82.  v0:= instanceof @variable v1 @type ^`e.e.a.a.i.u.b.a` @kind boolean;
  #L1dce86.  if v0 == 0 then goto L1dce8c;
  #L1dce8a.  return v1 @kind object;
  #L1dce8c.  v0:= new `e.e.a.a.i.u.b.a`;
  #L1dce90.  call `<init>`(v0, v1) @signature `Le/e/a/a/i/u/b/a;.<init>:(Li/a/a;)V` @kind direct;
  #L1dce96.  return v0 @kind object;
}
procedure `java.lang.Object` `a`(`java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Le/e/a/a/i/u/b/a;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1dce08.  v0:= `@@e.e.a.a.i.u.b.a.c` @type ^`java.lang.Object` @kind object;
  #L1dce0c.  if v3 == v0 then goto L1dce14;
  #L1dce10.  v0:= 1I;
  #L1dce12.  goto L1dce16;
  #L1dce14.  v0:= 0I;
  #L1dce16.  if v0 == 0 then goto L1dce68;
  #L1dce1a.  if v3 != v4 then goto L1dce20;
  #L1dce1e.  goto L1dce68;
  #L1dce20.  v0:= new `java.lang.IllegalStateException`;
  #L1dce24.  v1:= new `java.lang.StringBuilder`;
  #L1dce28.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dce2e.  v2:= "Scoped provider was invoked recursively returning different results: " @kind object;
  #L1dce32.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dce38.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dce3e.  v3:= " & " @kind object;
  #L1dce42.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dce48.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dce4e.  v3:= ". This is likely due to a circular dependency." @kind object;
  #L1dce52.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dce58.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dce5e.  v3:= temp @kind object;
  #L1dce60.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dce66.  throw v0;
  #L1dce68.  return v4 @kind object;
}
procedure `java.lang.Object` `get`(`e.e.a.a.i.u.b.a` v2 @kind this) @signature `Le/e/a/a/i/u/b/a;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dcda4.  v0:= v2.`e.e.a.a.i.u.b.a.b` @type ^`java.lang.Object` @kind object;
  #L1dcda8.  v1:= `@@e.e.a.a.i.u.b.a.c` @type ^`java.lang.Object` @kind object;
  #L1dcdac.  if v0 != v1 then goto L1dcde8;
  #L1dcdb0.  @monitorenter v2
  #L1dcdb2.  v0:= v2.`e.e.a.a.i.u.b.a.b` @type ^`java.lang.Object` @kind object;
  #L1dcdb6.  v1:= `@@e.e.a.a.i.u.b.a.c` @type ^`java.lang.Object` @kind object;
  #L1dcdba.  if v0 != v1 then goto L1dcdde;
  #L1dcdbe.  v0:= v2.`e.e.a.a.i.u.b.a.a` @type ^`i.a.a` @kind object;
  #L1dcdc2.  call temp:= `get`(v0) @signature `Li/a/a;.get:()Ljava/lang/Object;` @kind interface;
  #L1dcdc8.  v0:= temp @kind object;
  #L1dcdca.  v1:= v2.`e.e.a.a.i.u.b.a.b` @type ^`java.lang.Object` @kind object;
  #L1dcdce.  call temp:= `a`(v1, v0) @signature `Le/e/a/a/i/u/b/a;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1dcdd4.  v2.`e.e.a.a.i.u.b.a.b` @type ^`java.lang.Object` := v0 @kind object;
  #L1dcdd8.  v1:= 0I;
  #L1dcdda.  v2.`e.e.a.a.i.u.b.a.a` @type ^`i.a.a` := v1 @kind object;
  #L1dcdde.  @monitorexit v2
  #L1dcde0.  goto L1dcde8;
  #L1dcde2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1dcde4.  @monitorexit v2
  #L1dcde6.  throw v0;
  #L1dcde8.  return v0 @kind object;
  catch `java.lang.Throwable` @[L1dcdb2..L1dcde6] goto L1dcde2;
}
