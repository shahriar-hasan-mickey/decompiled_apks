record `e.e.a.b.j.z` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `e.e.a.b.j.l` `e.e.a.b.j.z.b` @AccessFlag FINAL_SYNTHETIC;
  `e.e.a.b.j.a0` `e.e.a.b.j.z.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.j.z` v0 @kind this, `e.e.a.b.j.a0` v1 @kind object, `e.e.a.b.j.l` v2 @kind object) @signature `Le/e/a/b/j/z;.<init>:(Le/e/a/b/j/a0;Le/e/a/b/j/l;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L34cd48.  v0.`e.e.a.b.j.z.c` @type ^`e.e.a.b.j.a0` := v1 @kind object;
  #L34cd4c.  v0.`e.e.a.b.j.z.b` @type ^`e.e.a.b.j.l` := v2 @kind object;
  #L34cd50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L34cd56.  return @kind void;
}
procedure `void` `run`(`e.e.a.b.j.z` v3 @kind this) @signature `Le/e/a/b/j/z;.run:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L34cd68.  v0:= v3.`e.e.a.b.j.z.c` @type ^`e.e.a.b.j.a0` @kind object;
  #L34cd6c.  call temp:= `a`(v0) @signature `Le/e/a/b/j/a0;.a:(Le/e/a/b/j/a0;)Ljava/lang/Object;` @kind static;
  #L34cd72.  v0:= temp @kind object;
  #L34cd74.  @monitorenter v0
  #L34cd76.  v1:= v3.`e.e.a.b.j.z.c` @type ^`e.e.a.b.j.a0` @kind object;
  #L34cd7a.  call temp:= `b`(v1) @signature `Le/e/a/b/j/a0;.b:(Le/e/a/b/j/a0;)Le/e/a/b/j/f;` @kind static;
  #L34cd80.  v1:= temp @kind object;
  #L34cd82.  if v1 == 0 then goto L34cd9c;
  #L34cd86.  v1:= v3.`e.e.a.b.j.z.c` @type ^`e.e.a.b.j.a0` @kind object;
  #L34cd8a.  call temp:= `b`(v1) @signature `Le/e/a/b/j/a0;.b:(Le/e/a/b/j/a0;)Le/e/a/b/j/f;` @kind static;
  #L34cd90.  v1:= temp @kind object;
  #L34cd92.  v2:= v3.`e.e.a.b.j.z.b` @type ^`e.e.a.b.j.l` @kind object;
  #L34cd96.  call `a`(v1, v2) @signature `Le/e/a/b/j/f;.a:(Le/e/a/b/j/l;)V` @kind interface;
  #L34cd9c.  @monitorexit v0
  #L34cd9e.  return @kind void;
  #L34cda0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L34cda2.  @monitorexit v0
  #L34cda4.  throw v1;
  catch `java.lang.Throwable` @[L34cd76..L34cda4] goto L34cda0;
}
