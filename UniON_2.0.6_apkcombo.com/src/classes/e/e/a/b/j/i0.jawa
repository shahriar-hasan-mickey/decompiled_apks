record `e.e.a.b.j.i0` @kind class @AccessFlag FINAL {
  `java.lang.Object` `e.e.a.b.j.i0.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Queue` `e.e.a.b.j.i0.b` @AccessFlag PRIVATE;
  `boolean` `e.e.a.b.j.i0.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.j.i0` v1 @kind this) @signature `Le/e/a/b/j/i0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L34d2d4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L34d2da.  v0:= new `java.lang.Object`;
  #L34d2de.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L34d2e4.  v1.`e.e.a.b.j.i0.a` @type ^`java.lang.Object` := v0 @kind object;
  #L34d2e8.  return @kind void;
}
procedure `void` `a`(`e.e.a.b.j.i0` v2 @kind this, `e.e.a.b.j.h0` v3 @kind object) @signature `Le/e/a/b/j/i0;.a:(Le/e/a/b/j/h0;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L34d2fc.  v0:= v2.`e.e.a.b.j.i0.a` @type ^`java.lang.Object` @kind object;
  #L34d300.  @monitorenter v0
  #L34d302.  v1:= v2.`e.e.a.b.j.i0.b` @type ^`java.util.Queue` @kind object;
  #L34d306.  if v1 != 0 then goto L34d318;
  #L34d30a.  v1:= new `java.util.ArrayDeque`;
  #L34d30e.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L34d314.  v2.`e.e.a.b.j.i0.b` @type ^`java.util.Queue` := v1 @kind object;
  #L34d318.  v1:= v2.`e.e.a.b.j.i0.b` @type ^`java.util.Queue` @kind object;
  #L34d31c.  call temp:= `add`(v1, v3) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L34d322.  @monitorexit v0
  #L34d324.  return @kind void;
  #L34d326.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L34d328.  @monitorexit v0
  #L34d32a.  throw v3;
  catch `java.lang.Throwable` @[L34d302..L34d32a] goto L34d326;
}
procedure `void` `a`(`e.e.a.b.j.i0` v2 @kind this, `e.e.a.b.j.l` v3 @kind object) @signature `Le/e/a/b/j/i0;.a:(Le/e/a/b/j/l;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L34d348.  v0:= v2.`e.e.a.b.j.i0.a` @type ^`java.lang.Object` @kind object;
  #L34d34c.  @monitorenter v0
  #L34d34e.  v1:= v2.`e.e.a.b.j.i0.b` @type ^`java.util.Queue` @kind object;
  #L34d352.  if v1 == 0 then goto L34d39c;
  #L34d356.  v1:= v2.`e.e.a.b.j.i0.c` @type ^`boolean` @kind boolean;
  #L34d35a.  if v1 == 0 then goto L34d360;
  #L34d35e.  goto L34d39c;
  #L34d360.  v1:= 1I;
  #L34d362.  v2.`e.e.a.b.j.i0.c` @type ^`boolean` := v1 @kind boolean;
  #L34d366.  @monitorexit v0
  #L34d368.  v1:= v2.`e.e.a.b.j.i0.a` @type ^`java.lang.Object` @kind object;
  #L34d36c.  @monitorenter v1
  #L34d36e.  v0:= v2.`e.e.a.b.j.i0.b` @type ^`java.util.Queue` @kind object;
  #L34d372.  call temp:= `poll`(v0) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L34d378.  v0:= temp @kind object;
  #L34d37a.  v0:= (`e.e.a.b.j.h0`) v0 @kind object;
  #L34d37e.  if v0 != 0 then goto L34d38c;
  #L34d382.  v3:= 0I;
  #L34d384.  v2.`e.e.a.b.j.i0.c` @type ^`boolean` := v3 @kind boolean;
  #L34d388.  @monitorexit v1
  #L34d38a.  return @kind void;
  #L34d38c.  @monitorexit v1
  #L34d38e.  call `a`(v0, v3) @signature `Le/e/a/b/j/h0;.a:(Le/e/a/b/j/l;)V` @kind interface;
  #L34d394.  goto L34d368;
  #L34d396.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L34d398.  @monitorexit v1
  #L34d39a.  throw v3;
  #L34d39c.  @monitorexit v0
  #L34d39e.  return @kind void;
  #L34d3a0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L34d3a2.  @monitorexit v0
  #L34d3a4.  throw v3;
  catch `java.lang.Throwable` @[L34d34e..L34d368] goto L34d3a0;
  catch `java.lang.Throwable` @[L34d36e..L34d38e] goto L34d396;
  catch `java.lang.Throwable` @[L34d398..L34d39a] goto L34d396;
  catch `java.lang.Throwable` @[L34d39c..L34d3a4] goto L34d3a0;
}
