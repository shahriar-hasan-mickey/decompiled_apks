record `e.e.a.b.f.n.wt` @kind class @AccessFlag ABSTRACT extends `e.e.a.b.f.n.nu` @kind class {
  `int` `e.e.a.b.f.n.wt.b` @AccessFlag PRIVATE_FINAL;
  `int` `e.e.a.b.f.n.wt.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.f.n.wt` v1 @kind this, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/n/wt;.<init>:(II)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L2ab478.  call `<init>`(v1) @signature `Le/e/a/b/f/n/nu;.<init>:()V` @kind direct;
  #L2ab47e.  v0:= "index" @kind object;
  #L2ab482.  call temp:= `b`(v3, v2, v0) @signature `Le/e/a/b/f/n/pt;.b:(IILjava/lang/String;)I` @kind static;
  #L2ab488.  v1.`e.e.a.b.f.n.wt.b` @type ^`int` := v2;
  #L2ab48c.  v1.`e.e.a.b.f.n.wt.c` @type ^`int` := v3;
  #L2ab490.  return @kind void;
}
procedure `java.lang.Object` `a`(`int` v0 ) @signature `Le/e/a/b/f/n/wt;.a:(I)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `hasNext`(`e.e.a.b.f.n.wt` v2 @kind this) @signature `Le/e/a/b/f/n/wt;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2ab380.  v0:= v2.`e.e.a.b.f.n.wt.c` @type ^`int`;
  #L2ab384.  v1:= v2.`e.e.a.b.f.n.wt.b` @type ^`int`;
  #L2ab388.  if v0 >= v1 then goto L2ab390;
  #L2ab38c.  v0:= 1I;
  #L2ab38e.  return v0;
  #L2ab390.  v0:= 0I;
  #L2ab392.  return v0;
}
procedure `boolean` `hasPrevious`(`e.e.a.b.f.n.wt` v1 @kind this) @signature `Le/e/a/b/f/n/wt;.hasPrevious:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ab3a4.  v0:= v1.`e.e.a.b.f.n.wt.c` @type ^`int`;
  #L2ab3a8.  if v0 <= 0 then goto L2ab3b0;
  #L2ab3ac.  v0:= 1I;
  #L2ab3ae.  return v0;
  #L2ab3b0.  v0:= 0I;
  #L2ab3b2.  return v0;
}
procedure `java.lang.Object` `next`(`e.e.a.b.f.n.wt` v2 @kind this) @signature `Le/e/a/b/f/n/wt;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2ab3f8.  call temp:= `hasNext`(v2) @signature `Le/e/a/b/f/n/wt;.hasNext:()Z` @kind virtual;
  #L2ab3fe.  v0:= temp;
  #L2ab400.  if v0 == 0 then goto L2ab41a;
  #L2ab404.  v0:= v2.`e.e.a.b.f.n.wt.c` @type ^`int`;
  #L2ab408.  v1:= v0 + 1;
  #L2ab40c.  v2.`e.e.a.b.f.n.wt.c` @type ^`int` := v1;
  #L2ab410.  call temp:= `a`(v2, v0) @signature `Le/e/a/b/f/n/wt;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L2ab416.  v0:= temp @kind object;
  #L2ab418.  return v0 @kind object;
  #L2ab41a.  v0:= new `java.util.NoSuchElementException`;
  #L2ab41e.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2ab424.  throw v0;
}
procedure `int` `nextIndex`(`e.e.a.b.f.n.wt` v1 @kind this) @signature `Le/e/a/b/f/n/wt;.nextIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ab3c4.  v0:= v1.`e.e.a.b.f.n.wt.c` @type ^`int`;
  #L2ab3c8.  return v0;
}
procedure `java.lang.Object` `previous`(`e.e.a.b.f.n.wt` v1 @kind this) @signature `Le/e/a/b/f/n/wt;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ab438.  call temp:= `hasPrevious`(v1) @signature `Le/e/a/b/f/n/wt;.hasPrevious:()Z` @kind virtual;
  #L2ab43e.  v0:= temp;
  #L2ab440.  if v0 == 0 then goto L2ab45a;
  #L2ab444.  v0:= v1.`e.e.a.b.f.n.wt.c` @type ^`int`;
  #L2ab448.  v0:= v0 + -1;
  #L2ab44c.  v1.`e.e.a.b.f.n.wt.c` @type ^`int` := v0;
  #L2ab450.  call temp:= `a`(v1, v0) @signature `Le/e/a/b/f/n/wt;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L2ab456.  v0:= temp @kind object;
  #L2ab458.  return v0 @kind object;
  #L2ab45a.  v0:= new `java.util.NoSuchElementException`;
  #L2ab45e.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2ab464.  throw v0;
}
procedure `int` `previousIndex`(`e.e.a.b.f.n.wt` v1 @kind this) @signature `Le/e/a/b/f/n/wt;.previousIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ab3dc.  v0:= v1.`e.e.a.b.f.n.wt.c` @type ^`int`;
  #L2ab3e0.  v0:= v0 + -1;
  #L2ab3e4.  return v0;
}
