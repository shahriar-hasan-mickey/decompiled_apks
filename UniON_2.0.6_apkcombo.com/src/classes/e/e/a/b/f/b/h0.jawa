record `e.e.a.b.f.b.h0` @kind class @AccessFlag  extends `e.e.a.b.f.b.g0` @kind class {
  `byte`[] `e.e.a.b.f.b.h0.e` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`e.e.a.b.f.b.h0` v0 @kind this, `byte`[] v1 @kind object) @signature `Le/e/a/b/f/b/h0;.<init>:([B)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1fad5c.  call `<init>`(v0) @signature `Le/e/a/b/f/b/g0;.<init>:()V` @kind direct;
  #L1fad62.  v0.`e.e.a.b.f.b.h0.e` @type ^`byte`[] := v1 @kind object;
  #L1fad66.  return @kind void;
}
procedure `int` `a`(`e.e.a.b.f.b.h0` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/b/h0;.a:(III)I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1facf0.  v3:= v1.`e.e.a.b.f.b.h0.e` @type ^`byte`[] @kind object;
  #L1facf4.  call temp:= `i`(v1) @signature `Le/e/a/b/f/b/h0;.i:()I` @kind virtual;
  #L1facfa.  v0:= temp;
  #L1facfc.  call temp:= `a`(v2, v3, v0, v4) @signature `Le/e/a/b/f/b/h1;.a:(I[BII)I` @kind static;
  #L1fad02.  v2:= temp;
  #L1fad04.  return v2;
}
procedure `e.e.a.b.f.b.a0` `a`(`e.e.a.b.f.b.h0` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/b/h0;.a:(II)Le/e/a/b/f/b/a0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1fac94.  call temp:= `size`(v2) @signature `Le/e/a/b/f/b/h0;.size:()I` @kind virtual;
  #L1fac9a.  v3:= temp;
  #L1fac9c.  v0:= 0I;
  #L1fac9e.  call temp:= `b`(v0, v4, v3) @signature `Le/e/a/b/f/b/a0;.b:(III)I` @kind static;
  #L1faca4.  v3:= temp;
  #L1faca6.  if v3 != 0 then goto L1facb0;
  #L1facaa.  v3:= `@@e.e.a.b.f.b.a0.c` @type ^`e.e.a.b.f.b.a0` @kind object;
  #L1facae.  return v3 @kind object;
  #L1facb0.  v4:= new `e.e.a.b.f.b.d0`;
  #L1facb4.  v0:= v2.`e.e.a.b.f.b.h0.e` @type ^`byte`[] @kind object;
  #L1facb8.  call temp:= `i`(v2) @signature `Le/e/a/b/f/b/h0;.i:()I` @kind virtual;
  #L1facbe.  v1:= temp;
  #L1facc0.  call `<init>`(v4, v0, v1, v3) @signature `Le/e/a/b/f/b/d0;.<init>:([BII)V` @kind direct;
  #L1facc6.  return v4 @kind object;
}
procedure `java.lang.String` `a`(`e.e.a.b.f.b.h0` v4 @kind this, `java.nio.charset.Charset` v5 @kind object) @signature `Le/e/a/b/f/b/h0;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1fad2c.  v0:= new `java.lang.String`;
  #L1fad30.  v1:= v4.`e.e.a.b.f.b.h0.e` @type ^`byte`[] @kind object;
  #L1fad34.  call temp:= `i`(v4) @signature `Le/e/a/b/f/b/h0;.i:()I` @kind virtual;
  #L1fad3a.  v2:= temp;
  #L1fad3c.  call temp:= `size`(v4) @signature `Le/e/a/b/f/b/h0;.size:()I` @kind virtual;
  #L1fad42.  v3:= temp;
  #L1fad44.  call `<init>`(v0, v1, v2, v3, v5) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L1fad4a.  return v0 @kind object;
}
procedure `void` `a`(`e.e.a.b.f.b.h0` v3 @kind this, `e.e.a.b.f.b.z` v4 @kind object) @signature `Le/e/a/b/f/b/h0;.a:(Le/e/a/b/f/b/z;)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1fad78.  v0:= v3.`e.e.a.b.f.b.h0.e` @type ^`byte`[] @kind object;
  #L1fad7c.  call temp:= `i`(v3) @signature `Le/e/a/b/f/b/h0;.i:()I` @kind virtual;
  #L1fad82.  v1:= temp;
  #L1fad84.  call temp:= `size`(v3) @signature `Le/e/a/b/f/b/h0;.size:()I` @kind virtual;
  #L1fad8a.  v2:= temp;
  #L1fad8c.  call `a`(v4, v0, v1, v2) @signature `Le/e/a/b/f/b/z;.a:([BII)V` @kind virtual;
  #L1fad92.  return @kind void;
}
procedure `boolean` `a`(`e.e.a.b.f.b.h0` v5 @kind this, `e.e.a.b.f.b.a0` v6 @kind object, `int` v7 , `int` v8 ) @signature `Le/e/a/b/f/b/h0;.a:(Le/e/a/b/f/b/a0;II)Z` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1fab2c.  call temp:= `size`(v6) @signature `Le/e/a/b/f/b/a0;.size:()I` @kind virtual;
  #L1fab32.  v7:= temp;
  #L1fab34.  if v8 > v7 then goto L1fabf8;
  #L1fab38.  call temp:= `size`(v6) @signature `Le/e/a/b/f/b/a0;.size:()I` @kind virtual;
  #L1fab3e.  v7:= temp;
  #L1fab40.  if v8 > v7 then goto L1fabae;
  #L1fab44.  v7:= instanceof @variable v6 @type ^`e.e.a.b.f.b.h0` @kind boolean;
  #L1fab48.  v0:= 0I;
  #L1fab4a.  if v7 == 0 then goto L1fab94;
  #L1fab4e.  v6:= (`e.e.a.b.f.b.h0`) v6 @kind object;
  #L1fab52.  v7:= v5.`e.e.a.b.f.b.h0.e` @type ^`byte`[] @kind object;
  #L1fab56.  v1:= v6.`e.e.a.b.f.b.h0.e` @type ^`byte`[] @kind object;
  #L1fab5a.  call temp:= `i`(v5) @signature `Le/e/a/b/f/b/h0;.i:()I` @kind virtual;
  #L1fab60.  v2:= temp;
  #L1fab62.  v2:= v2 + v8 @kind int;
  #L1fab64.  call temp:= `i`(v5) @signature `Le/e/a/b/f/b/h0;.i:()I` @kind virtual;
  #L1fab6a.  v8:= temp;
  #L1fab6c.  call temp:= `i`(v6) @signature `Le/e/a/b/f/b/h0;.i:()I` @kind virtual;
  #L1fab72.  v6:= temp;
  #L1fab74.  if v8 >= v2 then goto L1fab90;
  #L1fab78.  v3:= v7[v8] @kind byte;
  #L1fab7c.  v4:= v1[v6] @kind byte;
  #L1fab80.  if v3 == v4 then goto L1fab86;
  #L1fab84.  return v0;
  #L1fab86.  v8:= v8 + 1;
  #L1fab8a.  v6:= v6 + 1;
  #L1fab8e.  goto L1fab74;
  #L1fab90.  v6:= 1I;
  #L1fab92.  return v6;
  #L1fab94.  call temp:= `a`(v6, v0, v8) @signature `Le/e/a/b/f/b/a0;.a:(II)Le/e/a/b/f/b/a0;` @kind virtual;
  #L1fab9a.  v6:= temp @kind object;
  #L1fab9c.  call temp:= `a`(v5, v0, v8) @signature `Le/e/a/b/f/b/h0;.a:(II)Le/e/a/b/f/b/a0;` @kind virtual;
  #L1faba2.  v7:= temp @kind object;
  #L1faba4.  call temp:= `equals`(v6, v7) @signature `Le/e/a/b/f/b/a0;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1fabaa.  v6:= temp;
  #L1fabac.  return v6;
  #L1fabae.  v7:= new `java.lang.IllegalArgumentException`;
  #L1fabb2.  call temp:= `size`(v6) @signature `Le/e/a/b/f/b/a0;.size:()I` @kind virtual;
  #L1fabb8.  v6:= temp;
  #L1fabba.  v0:= 59I;
  #L1fabbe.  v1:= new `java.lang.StringBuilder`;
  #L1fabc2.  call `<init>`(v1, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1fabc8.  v0:= "Ran off end of other: 0, " @kind object;
  #L1fabcc.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fabd2.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fabd8.  v8:= ", " @kind object;
  #L1fabdc.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fabe2.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fabe8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fabee.  v6:= temp @kind object;
  #L1fabf0.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fabf6.  throw v7;
  #L1fabf8.  v6:= new `java.lang.IllegalArgumentException`;
  #L1fabfc.  call temp:= `size`(v5) @signature `Le/e/a/b/f/b/h0;.size:()I` @kind virtual;
  #L1fac02.  v7:= temp;
  #L1fac04.  v0:= 40I;
  #L1fac08.  v1:= new `java.lang.StringBuilder`;
  #L1fac0c.  call `<init>`(v1, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1fac12.  v0:= "Length too large: " @kind object;
  #L1fac16.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fac1c.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fac22.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fac28.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fac2e.  v7:= temp @kind object;
  #L1fac30.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fac36.  throw v6;
}
procedure `boolean` `d`(`e.e.a.b.f.b.h0` v3 @kind this) @signature `Le/e/a/b/f/b/h0;.d:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1fac48.  call temp:= `i`(v3) @signature `Le/e/a/b/f/b/h0;.i:()I` @kind virtual;
  #L1fac4e.  v0:= temp;
  #L1fac50.  v1:= v3.`e.e.a.b.f.b.h0.e` @type ^`byte`[] @kind object;
  #L1fac54.  call temp:= `size`(v3) @signature `Le/e/a/b/f/b/h0;.size:()I` @kind virtual;
  #L1fac5a.  v2:= temp;
  #L1fac5c.  v2:= v2 + v0 @kind int;
  #L1fac5e.  call temp:= `a`(v1, v0, v2) @signature `Le/e/a/b/f/b/c4;.a:([BII)Z` @kind static;
  #L1fac64.  v0:= temp;
  #L1fac66.  return v0;
}
procedure `boolean` `equals`(`e.e.a.b.f.b.h0` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/b/h0;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1faa98.  v0:= 1I;
  #L1faa9a.  if v5 != v4 then goto L1faaa0;
  #L1faa9e.  return v0;
  #L1faaa0.  v1:= instanceof @variable v5 @type ^`e.e.a.b.f.b.a0` @kind boolean;
  #L1faaa4.  v2:= 0I;
  #L1faaa6.  if v1 != 0 then goto L1faaac;
  #L1faaaa.  return v2;
  #L1faaac.  call temp:= `size`(v4) @signature `Le/e/a/b/f/b/h0;.size:()I` @kind virtual;
  #L1faab2.  v1:= temp;
  #L1faab4.  v3:= v5 @kind object;
  #L1faab6.  v3:= (`e.e.a.b.f.b.a0`) v3 @kind object;
  #L1faaba.  call temp:= `size`(v3) @signature `Le/e/a/b/f/b/a0;.size:()I` @kind virtual;
  #L1faac0.  v3:= temp;
  #L1faac2.  if v1 == v3 then goto L1faac8;
  #L1faac6.  return v2;
  #L1faac8.  call temp:= `size`(v4) @signature `Le/e/a/b/f/b/h0;.size:()I` @kind virtual;
  #L1faace.  v1:= temp;
  #L1faad0.  if v1 != 0 then goto L1faad6;
  #L1faad4.  return v0;
  #L1faad6.  v0:= instanceof @variable v5 @type ^`e.e.a.b.f.b.h0` @kind boolean;
  #L1faada.  if v0 == 0 then goto L1fab12;
  #L1faade.  v5:= (`e.e.a.b.f.b.h0`) v5 @kind object;
  #L1faae2.  call temp:= `f`(v4) @signature `Le/e/a/b/f/b/a0;.f:()I` @kind virtual;
  #L1faae8.  v0:= temp;
  #L1faaea.  call temp:= `f`(v5) @signature `Le/e/a/b/f/b/a0;.f:()I` @kind virtual;
  #L1faaf0.  v1:= temp;
  #L1faaf2.  if v0 == 0 then goto L1fab00;
  #L1faaf6.  if v1 == 0 then goto L1fab00;
  #L1faafa.  if v0 == v1 then goto L1fab00;
  #L1faafe.  return v2;
  #L1fab00.  call temp:= `size`(v4) @signature `Le/e/a/b/f/b/h0;.size:()I` @kind virtual;
  #L1fab06.  v0:= temp;
  #L1fab08.  call temp:= `a`(v4, v5, v2, v0) @signature `Le/e/a/b/f/b/h0;.a:(Le/e/a/b/f/b/a0;II)Z` @kind virtual;
  #L1fab0e.  v5:= temp;
  #L1fab10.  return v5;
  #L1fab12.  call temp:= `equals`(v5, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1fab18.  v5:= temp;
  #L1fab1a.  return v5;
}
procedure `byte` `h`(`e.e.a.b.f.b.h0` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/b/h0;.h:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fac78.  v0:= v1.`e.e.a.b.f.b.h0.e` @type ^`byte`[] @kind object;
  #L1fac7c.  v2:= v0[v2] @kind byte;
  #L1fac80.  return v2;
}
procedure `int` `i`(`e.e.a.b.f.b.h0` v1 @kind this) @signature `Le/e/a/b/f/b/h0;.i:()I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1fad18.  v0:= 0I;
  #L1fad1a.  return v0;
}
procedure `int` `size`(`e.e.a.b.f.b.h0` v1 @kind this) @signature `Le/e/a/b/f/b/h0;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1facd8.  v0:= v1.`e.e.a.b.f.b.h0.e` @type ^`byte`[] @kind object;
  #L1facdc.  v0:= length @variable v0;
  #L1facde.  return v0;
}
