record `e.e.a.b.f.n.d0` @kind class @AccessFlag FINAL extends `e.e.a.b.f.n.v` @kind class, `java.util.RandomAccess` @kind interface, `e.e.a.b.f.n.c2` @kind interface, `e.e.a.b.f.n.o3` @kind interface {
  `boolean`[] `e.e.a.b.f.n.d0.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.n.d0.d` @AccessFlag PRIVATE;
}
global `e.e.a.b.f.n.d0` `@@e.e.a.b.f.n.d0.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/n/d0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L278fa4.  v0:= new `e.e.a.b.f.n.d0`;
  #L278fa8.  v1:= 0I;
  #L278faa.  v2:= new `boolean`[v1];
  #L278fae.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/n/d0;.<init>:([ZI)V` @kind direct;
  #L278fb4.  `@@e.e.a.b.f.n.d0.e` @type ^`e.e.a.b.f.n.d0` := v0 @kind object;
  #L278fb8.  v0:= `@@e.e.a.b.f.n.d0.e` @type ^`e.e.a.b.f.n.d0` @kind object;
  #L278fbc.  call `zzb`(v0) @signature `Le/e/a/b/f/n/v;.zzb:()V` @kind virtual;
  #L278fc2.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.n.d0` v2 @kind this) @signature `Le/e/a/b/f/n/d0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L278fd4.  v0:= 10I;
  #L278fd8.  v0:= new `boolean`[v0];
  #L278fdc.  v1:= 0I;
  #L278fde.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/n/d0;.<init>:([ZI)V` @kind direct;
  #L278fe4.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.n.d0` v0 @kind this, `boolean`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/n/d0;.<init>:([ZI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L278ff8.  call `<init>`(v0) @signature `Le/e/a/b/f/n/v;.<init>:()V` @kind direct;
  #L278ffe.  v0.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] := v1 @kind object;
  #L279002.  v0.`e.e.a.b.f.n.d0.d` @type ^`int` := v2;
  #L279006.  return @kind void;
}
procedure `java.lang.String` `d`(`e.e.a.b.f.n.d0` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/n/d0;.d:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L278f58.  v0:= v3.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L278f5c.  v1:= new `java.lang.StringBuilder`;
  #L278f60.  v2:= 35I;
  #L278f64.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L278f6a.  v2:= "Index:" @kind object;
  #L278f6e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L278f74.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L278f7a.  v4:= ", Size:" @kind object;
  #L278f7e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L278f84.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L278f8a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L278f90.  v4:= temp @kind object;
  #L278f92.  return v4 @kind object;
}
procedure `void` `h`(`e.e.a.b.f.n.d0` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/n/d0;.h:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L279170.  if v2 < 0 then goto L27917e;
  #L279174.  v0:= v1.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L279178.  if v2 >= v0 then goto L27917e;
  #L27917c.  return @kind void;
  #L27917e.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L279182.  call temp:= `d`(v1, v2) @signature `Le/e/a/b/f/n/d0;.d:(I)Ljava/lang/String;` @kind direct;
  #L279188.  v2:= temp @kind object;
  #L27918a.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L279190.  throw v0;
}
procedure `void` `a`(`e.e.a.b.f.n.d0` v4 @kind this, `boolean` v5 ) @signature `Le/e/a/b/f/n/d0;.a:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L279118.  call `d`(v4) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27911e.  v0:= v4.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L279122.  v1:= v4.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] @kind object;
  #L279126.  v2:= length @variable v1;
  #L279128.  if v0 != v2 then goto L279148;
  #L27912c.  v2:= v0 * 3;
  #L279130.  v2:= v2 / 2;
  #L279134.  v2:= v2 + 1;
  #L279138.  v2:= new `boolean`[v2];
  #L27913c.  v3:= 0I;
  #L27913e.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L279144.  v4.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] := v2 @kind object;
  #L279148.  v0:= v4.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] @kind object;
  #L27914c.  v1:= v4.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L279150.  v2:= v1 + 1;
  #L279154.  v4.`e.e.a.b.f.n.d0.d` @type ^`int` := v2;
  #L279158.  v0[v1]:= v5 @kind boolean;
  #L27915c.  return @kind void;
}
procedure `void` `add`(`e.e.a.b.f.n.d0` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/n/d0;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L279018.  v6:= (`java.lang.Boolean`) v6 @kind object;
  #L27901c.  call temp:= `booleanValue`(v6) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L279022.  v6:= temp;
  #L279024.  call `d`(v4) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27902a.  if v5 < 0 then goto L2790a0;
  #L27902e.  v0:= v4.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L279032.  if v5 > v0 then goto L2790a0;
  #L279036.  v1:= v4.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] @kind object;
  #L27903a.  v2:= length @variable v1;
  #L27903c.  if v0 >= v2 then goto L27904e;
  #L279040.  v2:= v5 + 1;
  #L279044.  v0:= v0 - v5 @kind int;
  #L279046.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27904c.  goto L27907e;
  #L27904e.  v0:= v0 * 3;
  #L279052.  v0:= v0 / 2;
  #L279056.  v0:= v0 + 1;
  #L27905a.  v0:= new `boolean`[v0];
  #L27905e.  v2:= 0I;
  #L279060.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L279066.  v1:= v4.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] @kind object;
  #L27906a.  v2:= v5 + 1;
  #L27906e.  v3:= v4.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L279072.  v3:= v3 - v5 @kind int;
  #L279074.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27907a.  v4.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] := v0 @kind object;
  #L27907e.  v0:= v4.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] @kind object;
  #L279082.  v0[v5]:= v6 @kind boolean;
  #L279086.  v5:= v4.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L27908a.  v5:= v5 + 1;
  #L27908e.  v4.`e.e.a.b.f.n.d0.d` @type ^`int` := v5;
  #L279092.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L279096.  v5:= v5 + 1;
  #L27909a.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L27909e.  return @kind void;
  #L2790a0.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L2790a4.  call temp:= `d`(v4, v5) @signature `Le/e/a/b/f/n/d0;.d:(I)Ljava/lang/String;` @kind direct;
  #L2790aa.  v5:= temp @kind object;
  #L2790ac.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2790b2.  throw v6;
}
procedure `boolean` `add`(`e.e.a.b.f.n.d0` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/n/d0;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L278c5c.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L278c60.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L278c66.  v1:= temp;
  #L278c68.  call `a`(v0, v1) @signature `Le/e/a/b/f/n/d0;.a:(Z)V` @kind virtual;
  #L278c6e.  v1:= 1I;
  #L278c70.  return v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.n.d0` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/n/d0;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L278c84.  call `d`(v5) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L278c8a.  call temp:= `a`(v6) @signature `Le/e/a/b/f/n/e2;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L278c90.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.n.d0` @kind boolean;
  #L278c94.  if v0 != 0 then goto L278ca2;
  #L278c98.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/n/v;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L278c9e.  v6:= temp;
  #L278ca0.  return v6;
  #L278ca2.  v6:= (`e.e.a.b.f.n.d0`) v6 @kind object;
  #L278ca6.  v0:= v6.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L278caa.  v1:= 0I;
  #L278cac.  if v0 != 0 then goto L278cb2;
  #L278cb0.  return v1;
  #L278cb2.  v2:= v5.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L278cb6.  v3:= 2147483647I;
  #L278cbc.  v3:= v3 - v2 @kind int;
  #L278cbe.  if v3 < v0 then goto L278d02;
  #L278cc2.  v2:= v2 + v0 @kind int;
  #L278cc4.  v0:= v5.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] @kind object;
  #L278cc8.  v3:= length @variable v0;
  #L278cca.  if v2 <= v3 then goto L278cda;
  #L278cce.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([ZI)[Z` @kind static;
  #L278cd4.  v0:= temp @kind object;
  #L278cd6.  v5.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] := v0 @kind object;
  #L278cda.  v0:= v6.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] @kind object;
  #L278cde.  v3:= v5.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] @kind object;
  #L278ce2.  v4:= v5.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L278ce6.  v6:= v6.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L278cea.  call `arraycopy`(v0, v1, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L278cf0.  v5.`e.e.a.b.f.n.d0.d` @type ^`int` := v2;
  #L278cf4.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L278cf8.  v0:= 1I;
  #L278cfa.  v6:= v6 + v0 @kind int;
  #L278cfc.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L278d00.  return v0;
  #L278d02.  v6:= new `java.lang.OutOfMemoryError`;
  #L278d06.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L278d0c.  throw v6;
}
procedure `e.e.a.b.f.n.c2` `c`(`e.e.a.b.f.n.d0` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/n/d0;.c:(I)Le/e/a/b/f/n/c2;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L278db0.  v0:= v2.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L278db4.  if v3 < v0 then goto L278dd4;
  #L278db8.  v0:= new `e.e.a.b.f.n.d0`;
  #L278dbc.  v1:= v2.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] @kind object;
  #L278dc0.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([ZI)[Z` @kind static;
  #L278dc6.  v3:= temp @kind object;
  #L278dc8.  v1:= v2.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L278dcc.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/n/d0;.<init>:([ZI)V` @kind direct;
  #L278dd2.  return v0 @kind object;
  #L278dd4.  v3:= new `java.lang.IllegalArgumentException`;
  #L278dd8.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L278dde.  throw v3;
}
procedure `boolean` `contains`(`e.e.a.b.f.n.d0` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/n/d0;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L278d20.  call temp:= `indexOf`(v1, v2) @signature `Le/e/a/b/f/n/d0;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L278d26.  v2:= temp;
  #L278d28.  v0:= -1I;
  #L278d2a.  if v2 == v0 then goto L278d32;
  #L278d2e.  v2:= 1I;
  #L278d30.  return v2;
  #L278d32.  v2:= 0I;
  #L278d34.  return v2;
}
procedure `boolean` `equals`(`e.e.a.b.f.n.d0` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/n/d0;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L278d48.  v0:= 1I;
  #L278d4a.  if v5 != v6 then goto L278d50;
  #L278d4e.  return v0;
  #L278d50.  v1:= instanceof @variable v6 @type ^`e.e.a.b.f.n.d0` @kind boolean;
  #L278d54.  if v1 != 0 then goto L278d62;
  #L278d58.  call temp:= `equals`(v5, v6) @signature `Le/e/a/b/f/n/v;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L278d5e.  v6:= temp;
  #L278d60.  return v6;
  #L278d62.  v6:= (`e.e.a.b.f.n.d0`) v6 @kind object;
  #L278d66.  v1:= v5.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L278d6a.  v2:= v6.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L278d6e.  v3:= 0I;
  #L278d70.  if v1 == v2 then goto L278d76;
  #L278d74.  return v3;
  #L278d76.  v6:= v6.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] @kind object;
  #L278d7a.  v1:= 0I;
  #L278d7c.  v2:= v5.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L278d80.  if v1 >= v2 then goto L278d9c;
  #L278d84.  v2:= v5.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] @kind object;
  #L278d88.  v2:= v2[v1] @kind boolean;
  #L278d8c.  v4:= v6[v1] @kind boolean;
  #L278d90.  if v2 == v4 then goto L278d96;
  #L278d94.  return v3;
  #L278d96.  v1:= v1 + 1;
  #L278d9a.  goto L278d7c;
  #L278d9c.  return v0;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.n.d0` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/n/d0;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L278e8c.  call `h`(v1, v2) @signature `Le/e/a/b/f/n/d0;.h:(I)V` @kind direct;
  #L278e92.  v0:= v1.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] @kind object;
  #L278e96.  v2:= v0[v2] @kind boolean;
  #L278e9a.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L278ea0.  v2:= temp @kind object;
  #L278ea2.  return v2 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.n.d0` v3 @kind this) @signature `Le/e/a/b/f/n/d0;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L278df0.  v0:= 1I;
  #L278df2.  v1:= 0I;
  #L278df4.  v2:= v3.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L278df8.  if v1 >= v2 then goto L278e18;
  #L278dfc.  v0:= v0 * 31;
  #L278e00.  v2:= v3.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] @kind object;
  #L278e04.  v2:= v2[v1] @kind boolean;
  #L278e08.  call temp:= `a`(v2) @signature `Le/e/a/b/f/n/e2;.a:(Z)I` @kind static;
  #L278e0e.  v2:= temp;
  #L278e10.  v0:= v0 + v2 @kind int;
  #L278e12.  v1:= v1 + 1;
  #L278e16.  goto L278df4;
  #L278e18.  return v0;
}
procedure `int` `indexOf`(`e.e.a.b.f.n.d0` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/n/d0;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L278e2c.  v0:= instanceof @variable v5 @type ^`java.lang.Boolean` @kind boolean;
  #L278e30.  v1:= -1I;
  #L278e32.  if v0 != 0 then goto L278e38;
  #L278e36.  return v1;
  #L278e38.  v5:= (`java.lang.Boolean`) v5 @kind object;
  #L278e3c.  call temp:= `booleanValue`(v5) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L278e42.  v5:= temp;
  #L278e44.  v0:= v4.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L278e48.  v2:= 0I;
  #L278e4a.  if v2 >= v0 then goto L278e62;
  #L278e4e.  v3:= v4.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] @kind object;
  #L278e52.  v3:= v3[v2] @kind boolean;
  #L278e56.  if v3 != v5 then goto L278e5c;
  #L278e5a.  return v2;
  #L278e5c.  v2:= v2 + 1;
  #L278e60.  goto L278e4a;
  #L278e62.  return v1;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.n.d0` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/n/d0;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L278eb4.  call `d`(v4) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L278eba.  call `h`(v4, v5) @signature `Le/e/a/b/f/n/d0;.h:(I)V` @kind direct;
  #L278ec0.  v0:= v4.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] @kind object;
  #L278ec4.  v1:= v0[v5] @kind boolean;
  #L278ec8.  v2:= v4.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L278ecc.  v3:= v2 + -1;
  #L278ed0.  if v5 >= v3 then goto L278ee4;
  #L278ed4.  v3:= v5 + 1;
  #L278ed8.  v2:= v2 - v5 @kind int;
  #L278eda.  v2:= v2 + -1;
  #L278ede.  call `arraycopy`(v0, v3, v0, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L278ee4.  v5:= v4.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L278ee8.  v5:= v5 + -1;
  #L278eec.  v4.`e.e.a.b.f.n.d0.d` @type ^`int` := v5;
  #L278ef0.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L278ef4.  v5:= v5 + 1;
  #L278ef8.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L278efc.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L278f02.  v5:= temp @kind object;
  #L278f04.  return v5 @kind object;
}
procedure `void` `removeRange`(`e.e.a.b.f.n.d0` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/n/d0;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L2790c4.  call `d`(v2) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L2790ca.  if v4 < v3 then goto L2790f8;
  #L2790ce.  v0:= v2.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] @kind object;
  #L2790d2.  v1:= v2.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L2790d6.  v1:= v1 - v4 @kind int;
  #L2790d8.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2790de.  v0:= v2.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L2790e2.  v4:= v4 - v3 @kind int;
  #L2790e4.  v0:= v0 - v4 @kind int;
  #L2790e6.  v2.`e.e.a.b.f.n.d0.d` @type ^`int` := v0;
  #L2790ea.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L2790ee.  v3:= v3 + 1;
  #L2790f2.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L2790f6.  return @kind void;
  #L2790f8.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L2790fc.  v4:= "toIndex < fromIndex" @kind object;
  #L279100.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L279106.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.n.d0` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/n/d0;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L278f18.  v4:= (`java.lang.Boolean`) v4 @kind object;
  #L278f1c.  call temp:= `booleanValue`(v4) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L278f22.  v4:= temp;
  #L278f24.  call `d`(v2) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L278f2a.  call `h`(v2, v3) @signature `Le/e/a/b/f/n/d0;.h:(I)V` @kind direct;
  #L278f30.  v0:= v2.`e.e.a.b.f.n.d0.c` @type ^`boolean`[] @kind object;
  #L278f34.  v1:= v0[v3] @kind boolean;
  #L278f38.  v0[v3]:= v4 @kind boolean;
  #L278f3c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L278f42.  v3:= temp @kind object;
  #L278f44.  return v3 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.n.d0` v1 @kind this) @signature `Le/e/a/b/f/n/d0;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L278e74.  v0:= v1.`e.e.a.b.f.n.d0.d` @type ^`int`;
  #L278e78.  return v0;
}
