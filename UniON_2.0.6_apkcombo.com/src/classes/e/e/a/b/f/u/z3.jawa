record `e.e.a.b.f.u.z3` @kind class @AccessFlag FINAL extends `e.e.a.b.f.u.y3` @kind class {
  `int` `e.e.a.b.f.u.z3.a` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.u.z3.b` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.u.z3.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.u.z3.d` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.u.z3.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.f.u.z3` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `boolean` v4 ) @signature `Le/e/a/b/f/u/z3;.<init>:([BIIZ)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L32765c.  v1:= 0I;
  #L32765e.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/u/y3;.<init>:(Le/e/a/b/f/u/x3;)V` @kind direct;
  #L327664.  v1:= 2147483647I;
  #L32766a.  v0.`e.e.a.b.f.u.z3.e` @type ^`int` := v1;
  #L32766e.  v3:= v3 + v2 @kind int;
  #L327670.  v0.`e.e.a.b.f.u.z3.a` @type ^`int` := v3;
  #L327674.  v0.`e.e.a.b.f.u.z3.c` @type ^`int` := v2;
  #L327678.  v1:= v0.`e.e.a.b.f.u.z3.c` @type ^`int`;
  #L32767c.  v0.`e.e.a.b.f.u.z3.d` @type ^`int` := v1;
  #L327680.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.u.z3` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `boolean` v4 , `e.e.a.b.f.u.x3` v5 @kind object) @signature `Le/e/a/b/f/u/z3;.<init>:([BIIZLe/e/a/b/f/u/x3;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L327694.  v2:= 0I;
  #L327696.  call `<init>`(v0, v1, v2, v3, v2) @signature `Le/e/a/b/f/u/z3;.<init>:([BIIZ)V` @kind direct;
  #L32769c.  return @kind void;
}
procedure `void` `b`(`e.e.a.b.f.u.z3` v3 @kind this) @signature `Le/e/a/b/f/u/z3;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3276b0.  v0:= v3.`e.e.a.b.f.u.z3.a` @type ^`int`;
  #L3276b4.  v1:= v3.`e.e.a.b.f.u.z3.b` @type ^`int`;
  #L3276b8.  v0:= v0 + v1 @kind int;
  #L3276ba.  v3.`e.e.a.b.f.u.z3.a` @type ^`int` := v0;
  #L3276be.  v0:= v3.`e.e.a.b.f.u.z3.a` @type ^`int`;
  #L3276c2.  v1:= v3.`e.e.a.b.f.u.z3.d` @type ^`int`;
  #L3276c6.  v1:= v0 - v1 @kind int;
  #L3276ca.  v2:= v3.`e.e.a.b.f.u.z3.e` @type ^`int`;
  #L3276ce.  if v1 <= v2 then goto L3276e4;
  #L3276d2.  v1:= v1 - v2 @kind int;
  #L3276d4.  v3.`e.e.a.b.f.u.z3.b` @type ^`int` := v1;
  #L3276d8.  v1:= v3.`e.e.a.b.f.u.z3.b` @type ^`int`;
  #L3276dc.  v0:= v0 - v1 @kind int;
  #L3276de.  v3.`e.e.a.b.f.u.z3.a` @type ^`int` := v0;
  #L3276e2.  return @kind void;
  #L3276e4.  v0:= 0I;
  #L3276e6.  v3.`e.e.a.b.f.u.z3.b` @type ^`int` := v0;
  #L3276ea.  return @kind void;
}
procedure `int` `a`(`e.e.a.b.f.u.z3` v2 @kind this) @signature `Le/e/a/b/f/u/z3;.a:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L327640.  v0:= v2.`e.e.a.b.f.u.z3.c` @type ^`int`;
  #L327644.  v1:= v2.`e.e.a.b.f.u.z3.d` @type ^`int`;
  #L327648.  v0:= v0 - v1 @kind int;
  #L32764a.  return v0;
}
procedure `int` `b`(`e.e.a.b.f.u.z3` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/u/z3;.b:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3275f8.  if v2 < 0 then goto L327624;
  #L3275fc.  call temp:= `a`(v1) @signature `Le/e/a/b/f/u/z3;.a:()I` @kind virtual;
  #L327602.  v0:= temp;
  #L327604.  v2:= v2 + v0 @kind int;
  #L327606.  v0:= v1.`e.e.a.b.f.u.z3.e` @type ^`int`;
  #L32760a.  if v2 > v0 then goto L32761a;
  #L32760e.  v1.`e.e.a.b.f.u.z3.e` @type ^`int` := v2;
  #L327612.  call `b`(v1) @signature `Le/e/a/b/f/u/z3;.b:()V` @kind direct;
  #L327618.  return v0;
  #L32761a.  call temp:= `a`() @signature `Le/e/a/b/f/u/b5;.a:()Le/e/a/b/f/u/b5;` @kind static;
  #L327620.  v2:= temp @kind object;
  #L327622.  throw v2;
  #L327624.  call temp:= `b`() @signature `Le/e/a/b/f/u/b5;.b:()Le/e/a/b/f/u/b5;` @kind static;
  #L32762a.  v2:= temp @kind object;
  #L32762c.  throw v2;
}
