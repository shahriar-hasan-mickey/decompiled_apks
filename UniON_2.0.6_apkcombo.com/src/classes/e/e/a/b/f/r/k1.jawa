record `e.e.a.b.f.r.k1` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `boolean` `a`(`java.util.Set` v3 @kind object, `java.util.Collection` v4 @kind object) @signature `Le/e/a/b/f/r/k1;.a:(Ljava/util/Set;Ljava/util/Collection;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L30ef48.  v0:= 0I;
  #L30ef4a.  if v4 == 0 then goto L30efcc;
  #L30ef4e.  v1:= instanceof @variable v4 @type ^`e.e.a.b.f.r.f1` @kind boolean;
  #L30ef52.  if v1 == 0 then goto L30ef62;
  #L30ef56.  v4:= (`e.e.a.b.f.r.f1`) v4 @kind object;
  #L30ef5a.  call temp:= `zza`(v4) @signature `Le/e/a/b/f/r/f1;.zza:()Ljava/util/Set;` @kind interface;
  #L30ef60.  v4:= temp @kind object;
  #L30ef62.  v1:= instanceof @variable v4 @type ^`java.util.Set` @kind boolean;
  #L30ef66.  if v1 == 0 then goto L30efba;
  #L30ef6a.  call temp:= `size`(v4) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L30ef70.  v1:= temp;
  #L30ef72.  call temp:= `size`(v3) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L30ef78.  v2:= temp;
  #L30ef7a.  if v1 <= v2 then goto L30efba;
  #L30ef7e.  call temp:= `iterator`(v3) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L30ef84.  v3:= temp @kind object;
  #L30ef86.  if v4 == 0 then goto L30efb8;
  #L30ef8a.  v0:= 0I;
  #L30ef8c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L30ef92.  v1:= temp;
  #L30ef94.  if v1 == 0 then goto L30efb6;
  #L30ef98.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L30ef9e.  v1:= temp @kind object;
  #L30efa0.  call temp:= `contains`(v4, v1) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L30efa6.  v1:= temp;
  #L30efa8.  if v1 == 0 then goto L30ef8c;
  #L30efac.  call `remove`(v3) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L30efb2.  v0:= 1I;
  #L30efb4.  goto L30ef8c;
  #L30efb6.  return v0;
  #L30efb8.  throw v0;
  #L30efba.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L30efc0.  v4:= temp @kind object;
  #L30efc2.  call temp:= `a`(v3, v4) @signature `Le/e/a/b/f/r/k1;.a:(Ljava/util/Set;Ljava/util/Iterator;)Z` @kind static;
  #L30efc8.  v3:= temp;
  #L30efca.  return v3;
  #L30efcc.  throw v0;
}
procedure `boolean` `a`(`java.util.Set` v3 @kind object, `java.util.Iterator` v4 @kind object) @signature `Le/e/a/b/f/r/k1;.a:(Ljava/util/Set;Ljava/util/Iterator;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L30ef08.  v0:= 0I;
  #L30ef0a.  v1:= 0I;
  #L30ef0c.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L30ef12.  v2:= temp;
  #L30ef14.  if v2 == 0 then goto L30ef2c;
  #L30ef18.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L30ef1e.  v2:= temp @kind object;
  #L30ef20.  call temp:= `remove`(v3, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L30ef26.  v2:= temp;
  #L30ef28.  v1:= v1 ^| v2 @kind int;
  #L30ef2a.  goto L30ef0c;
  #L30ef2c.  v3:= 1I;
  #L30ef2e.  if v3 == v1 then goto L30ef34;
  #L30ef32.  return v0;
  #L30ef34.  return v3;
}
