record `e.e.a.b.f.j.k2` @kind class @AccessFlag PUBLIC_ABSTRACT extends `e.e.a.b.f.j.b5` @kind interface {
}
procedure `void` `<init>`(`e.e.a.b.f.j.k2` v0 @kind this) @signature `Le/e/a/b/f/j/k2;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L221b64.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L221b6a.  return @kind void;
}
procedure `e.e.a.b.f.j.b5` `a`(`e.e.a.b.f.j.k2` v1 @kind this, `e.e.a.b.f.j.c5` v2 @kind object) @signature `Le/e/a/b/f/j/k2;.a:(Le/e/a/b/f/j/c5;)Le/e/a/b/f/j/b5;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L221b1c.  call temp:= `j`(v1) @signature `Le/e/a/b/f/j/f5;.j:()Le/e/a/b/f/j/c5;` @kind interface;
  #L221b22.  v0:= temp @kind object;
  #L221b24.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L221b2a.  v0:= temp @kind object;
  #L221b2c.  call temp:= `isInstance`(v0, v2) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L221b32.  v0:= temp;
  #L221b34.  if v0 == 0 then goto L221b44;
  #L221b38.  v2:= (`e.e.a.b.f.j.i2`) v2 @kind object;
  #L221b3c.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/j/k2;.a:(Le/e/a/b/f/j/i2;)Le/e/a/b/f/j/k2;` @kind virtual;
  #L221b42.  return v1 @kind object;
  #L221b44.  v2:= new `java.lang.IllegalArgumentException`;
  #L221b48.  v0:= "mergeFrom(MessageLite) can only merge messages of the same type." @kind object;
  #L221b4c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L221b52.  throw v2;
}
procedure `e.e.a.b.f.j.k2` `a`(`e.e.a.b.f.j.i2` v0 @kind object) @signature `Le/e/a/b/f/j/k2;.a:(Le/e/a/b/f/j/i2;)Le/e/a/b/f/j/k2;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
