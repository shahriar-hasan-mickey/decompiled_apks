record `e.e.a.b.f.n.u1` @kind class @AccessFlag FINAL extends `e.e.a.b.f.n.v` @kind class, `java.util.RandomAccess` @kind interface, `e.e.a.b.f.n.z1` @kind interface, `e.e.a.b.f.n.o3` @kind interface {
  `int`[] `e.e.a.b.f.n.u1.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.n.u1.d` @AccessFlag PRIVATE;
}
global `e.e.a.b.f.n.u1` `@@e.e.a.b.f.n.u1.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/n/u1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L27eec0.  v0:= new `e.e.a.b.f.n.u1`;
  #L27eec4.  v1:= 0I;
  #L27eec6.  v2:= new `int`[v1];
  #L27eeca.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/n/u1;.<init>:([II)V` @kind direct;
  #L27eed0.  `@@e.e.a.b.f.n.u1.e` @type ^`e.e.a.b.f.n.u1` := v0 @kind object;
  #L27eed4.  v0:= `@@e.e.a.b.f.n.u1.e` @type ^`e.e.a.b.f.n.u1` @kind object;
  #L27eed8.  call `zzb`(v0) @signature `Le/e/a/b/f/n/v;.zzb:()V` @kind virtual;
  #L27eede.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.n.u1` v2 @kind this) @signature `Le/e/a/b/f/n/u1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L27eef0.  v0:= 10I;
  #L27eef4.  v0:= new `int`[v0];
  #L27eef8.  v1:= 0I;
  #L27eefa.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/n/u1;.<init>:([II)V` @kind direct;
  #L27ef00.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.n.u1` v0 @kind this, `int`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/n/u1;.<init>:([II)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L27ef14.  call `<init>`(v0) @signature `Le/e/a/b/f/n/v;.<init>:()V` @kind direct;
  #L27ef1a.  v0.`e.e.a.b.f.n.u1.c` @type ^`int`[] := v1 @kind object;
  #L27ef1e.  v0.`e.e.a.b.f.n.u1.d` @type ^`int` := v2;
  #L27ef22.  return @kind void;
}
procedure `e.e.a.b.f.n.u1` `c`() @signature `Le/e/a/b/f/n/u1;.c:()Le/e/a/b/f/n/u1;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L27ec9c.  v0:= `@@e.e.a.b.f.n.u1.e` @type ^`e.e.a.b.f.n.u1` @kind object;
  #L27eca0.  return v0 @kind object;
}
procedure `void` `e`(`e.e.a.b.f.n.u1` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/n/u1;.e:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L27f08c.  if v2 < 0 then goto L27f09a;
  #L27f090.  v0:= v1.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27f094.  if v2 >= v0 then goto L27f09a;
  #L27f098.  return @kind void;
  #L27f09a.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L27f09e.  call temp:= `f`(v1, v2) @signature `Le/e/a/b/f/n/u1;.f:(I)Ljava/lang/String;` @kind direct;
  #L27f0a4.  v2:= temp @kind object;
  #L27f0a6.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27f0ac.  throw v0;
}
procedure `java.lang.String` `f`(`e.e.a.b.f.n.u1` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/n/u1;.f:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L27ee74.  v0:= v3.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27ee78.  v1:= new `java.lang.StringBuilder`;
  #L27ee7c.  v2:= 35I;
  #L27ee80.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L27ee86.  v2:= "Index:" @kind object;
  #L27ee8a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27ee90.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L27ee96.  v4:= ", Size:" @kind object;
  #L27ee9a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27eea0.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L27eea6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L27eeac.  v4:= temp @kind object;
  #L27eeae.  return v4 @kind object;
}
procedure `void` `add`(`e.e.a.b.f.n.u1` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/n/u1;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27ef34.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L27ef38.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L27ef3e.  v6:= temp;
  #L27ef40.  call `d`(v4) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27ef46.  if v5 < 0 then goto L27efbc;
  #L27ef4a.  v0:= v4.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27ef4e.  if v5 > v0 then goto L27efbc;
  #L27ef52.  v1:= v4.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27ef56.  v2:= length @variable v1;
  #L27ef58.  if v0 >= v2 then goto L27ef6a;
  #L27ef5c.  v2:= v5 + 1;
  #L27ef60.  v0:= v0 - v5 @kind int;
  #L27ef62.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27ef68.  goto L27ef9a;
  #L27ef6a.  v0:= v0 * 3;
  #L27ef6e.  v0:= v0 / 2;
  #L27ef72.  v0:= v0 + 1;
  #L27ef76.  v0:= new `int`[v0];
  #L27ef7a.  v2:= 0I;
  #L27ef7c.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27ef82.  v1:= v4.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27ef86.  v2:= v5 + 1;
  #L27ef8a.  v3:= v4.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27ef8e.  v3:= v3 - v5 @kind int;
  #L27ef90.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27ef96.  v4.`e.e.a.b.f.n.u1.c` @type ^`int`[] := v0 @kind object;
  #L27ef9a.  v0:= v4.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27ef9e.  v0[v5]:= v6;
  #L27efa2.  v5:= v4.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27efa6.  v5:= v5 + 1;
  #L27efaa.  v4.`e.e.a.b.f.n.u1.d` @type ^`int` := v5;
  #L27efae.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L27efb2.  v5:= v5 + 1;
  #L27efb6.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L27efba.  return @kind void;
  #L27efbc.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L27efc0.  call temp:= `f`(v4, v5) @signature `Le/e/a/b/f/n/u1;.f:(I)Ljava/lang/String;` @kind direct;
  #L27efc6.  v5:= temp @kind object;
  #L27efc8.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27efce.  throw v6;
}
procedure `boolean` `add`(`e.e.a.b.f.n.u1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/n/u1;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L27eb48.  v1:= (`java.lang.Integer`) v1 @kind object;
  #L27eb4c.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L27eb52.  v1:= temp;
  #L27eb54.  call `d`(v0, v1) @signature `Le/e/a/b/f/n/u1;.d:(I)V` @kind virtual;
  #L27eb5a.  v1:= 1I;
  #L27eb5c.  return v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.n.u1` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/n/u1;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27eb70.  call `d`(v5) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27eb76.  call temp:= `a`(v6) @signature `Le/e/a/b/f/n/e2;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L27eb7c.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.n.u1` @kind boolean;
  #L27eb80.  if v0 != 0 then goto L27eb8e;
  #L27eb84.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/n/v;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L27eb8a.  v6:= temp;
  #L27eb8c.  return v6;
  #L27eb8e.  v6:= (`e.e.a.b.f.n.u1`) v6 @kind object;
  #L27eb92.  v0:= v6.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27eb96.  v1:= 0I;
  #L27eb98.  if v0 != 0 then goto L27eb9e;
  #L27eb9c.  return v1;
  #L27eb9e.  v2:= v5.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27eba2.  v3:= 2147483647I;
  #L27eba8.  v3:= v3 - v2 @kind int;
  #L27ebaa.  if v3 < v0 then goto L27ebee;
  #L27ebae.  v2:= v2 + v0 @kind int;
  #L27ebb0.  v0:= v5.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27ebb4.  v3:= length @variable v0;
  #L27ebb6.  if v2 <= v3 then goto L27ebc6;
  #L27ebba.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L27ebc0.  v0:= temp @kind object;
  #L27ebc2.  v5.`e.e.a.b.f.n.u1.c` @type ^`int`[] := v0 @kind object;
  #L27ebc6.  v0:= v6.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27ebca.  v3:= v5.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27ebce.  v4:= v5.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27ebd2.  v6:= v6.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27ebd6.  call `arraycopy`(v0, v1, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27ebdc.  v5.`e.e.a.b.f.n.u1.d` @type ^`int` := v2;
  #L27ebe0.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L27ebe4.  v0:= 1I;
  #L27ebe6.  v6:= v6 + v0 @kind int;
  #L27ebe8.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L27ebec.  return v0;
  #L27ebee.  v6:= new `java.lang.OutOfMemoryError`;
  #L27ebf2.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L27ebf8.  throw v6;
}
procedure `e.e.a.b.f.n.c2` `c`(`e.e.a.b.f.n.u1` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/n/u1;.c:(I)Le/e/a/b/f/n/c2;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L27ecb4.  v0:= v2.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27ecb8.  if v3 < v0 then goto L27ecd8;
  #L27ecbc.  v0:= new `e.e.a.b.f.n.u1`;
  #L27ecc0.  v1:= v2.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27ecc4.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L27ecca.  v3:= temp @kind object;
  #L27eccc.  v1:= v2.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27ecd0.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/n/u1;.<init>:([II)V` @kind direct;
  #L27ecd6.  return v0 @kind object;
  #L27ecd8.  v3:= new `java.lang.IllegalArgumentException`;
  #L27ecdc.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L27ece2.  throw v3;
}
procedure `boolean` `contains`(`e.e.a.b.f.n.u1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/n/u1;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L27ec0c.  call temp:= `indexOf`(v1, v2) @signature `Le/e/a/b/f/n/u1;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L27ec12.  v2:= temp;
  #L27ec14.  v0:= -1I;
  #L27ec16.  if v2 == v0 then goto L27ec1e;
  #L27ec1a.  v2:= 1I;
  #L27ec1c.  return v2;
  #L27ec1e.  v2:= 0I;
  #L27ec20.  return v2;
}
procedure `void` `d`(`e.e.a.b.f.n.u1` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/n/u1;.d:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27f034.  call `d`(v4) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27f03a.  v0:= v4.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27f03e.  v1:= v4.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27f042.  v2:= length @variable v1;
  #L27f044.  if v0 != v2 then goto L27f064;
  #L27f048.  v2:= v0 * 3;
  #L27f04c.  v2:= v2 / 2;
  #L27f050.  v2:= v2 + 1;
  #L27f054.  v2:= new `int`[v2];
  #L27f058.  v3:= 0I;
  #L27f05a.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27f060.  v4.`e.e.a.b.f.n.u1.c` @type ^`int`[] := v2 @kind object;
  #L27f064.  v0:= v4.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27f068.  v1:= v4.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27f06c.  v2:= v1 + 1;
  #L27f070.  v4.`e.e.a.b.f.n.u1.d` @type ^`int` := v2;
  #L27f074.  v0[v1]:= v5;
  #L27f078.  return @kind void;
}
procedure `boolean` `equals`(`e.e.a.b.f.n.u1` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/n/u1;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27ec34.  v0:= 1I;
  #L27ec36.  if v5 != v6 then goto L27ec3c;
  #L27ec3a.  return v0;
  #L27ec3c.  v1:= instanceof @variable v6 @type ^`e.e.a.b.f.n.u1` @kind boolean;
  #L27ec40.  if v1 != 0 then goto L27ec4e;
  #L27ec44.  call temp:= `equals`(v5, v6) @signature `Le/e/a/b/f/n/v;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L27ec4a.  v6:= temp;
  #L27ec4c.  return v6;
  #L27ec4e.  v6:= (`e.e.a.b.f.n.u1`) v6 @kind object;
  #L27ec52.  v1:= v5.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27ec56.  v2:= v6.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27ec5a.  v3:= 0I;
  #L27ec5c.  if v1 == v2 then goto L27ec62;
  #L27ec60.  return v3;
  #L27ec62.  v6:= v6.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27ec66.  v1:= 0I;
  #L27ec68.  v2:= v5.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27ec6c.  if v1 >= v2 then goto L27ec88;
  #L27ec70.  v2:= v5.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27ec74.  v2:= v2[v1];
  #L27ec78.  v4:= v6[v1];
  #L27ec7c.  if v2 == v4 then goto L27ec82;
  #L27ec80.  return v3;
  #L27ec82.  v1:= v1 + 1;
  #L27ec86.  goto L27ec68;
  #L27ec88.  return v0;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.n.u1` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/n/u1;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L27eda8.  call `e`(v1, v2) @signature `Le/e/a/b/f/n/u1;.e:(I)V` @kind direct;
  #L27edae.  v0:= v1.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27edb2.  v2:= v0[v2];
  #L27edb6.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L27edbc.  v2:= temp @kind object;
  #L27edbe.  return v2 @kind object;
}
procedure `int` `h`(`e.e.a.b.f.n.u1` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/n/u1;.h:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L27ed88.  call `e`(v1, v2) @signature `Le/e/a/b/f/n/u1;.e:(I)V` @kind direct;
  #L27ed8e.  v0:= v1.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27ed92.  v2:= v0[v2];
  #L27ed96.  return v2;
}
procedure `int` `hashCode`(`e.e.a.b.f.n.u1` v3 @kind this) @signature `Le/e/a/b/f/n/u1;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L27ecf4.  v0:= 1I;
  #L27ecf6.  v1:= 0I;
  #L27ecf8.  v2:= v3.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27ecfc.  if v1 >= v2 then goto L27ed14;
  #L27ed00.  v0:= v0 * 31;
  #L27ed04.  v2:= v3.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27ed08.  v2:= v2[v1];
  #L27ed0c.  v0:= v0 + v2 @kind int;
  #L27ed0e.  v1:= v1 + 1;
  #L27ed12.  goto L27ecf8;
  #L27ed14.  return v0;
}
procedure `int` `indexOf`(`e.e.a.b.f.n.u1` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/n/u1;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27ed28.  v0:= instanceof @variable v5 @type ^`java.lang.Integer` @kind boolean;
  #L27ed2c.  v1:= -1I;
  #L27ed2e.  if v0 != 0 then goto L27ed34;
  #L27ed32.  return v1;
  #L27ed34.  v5:= (`java.lang.Integer`) v5 @kind object;
  #L27ed38.  call temp:= `intValue`(v5) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L27ed3e.  v5:= temp;
  #L27ed40.  v0:= v4.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27ed44.  v2:= 0I;
  #L27ed46.  if v2 >= v0 then goto L27ed5e;
  #L27ed4a.  v3:= v4.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27ed4e.  v3:= v3[v2];
  #L27ed52.  if v3 != v5 then goto L27ed58;
  #L27ed56.  return v2;
  #L27ed58.  v2:= v2 + 1;
  #L27ed5c.  goto L27ed46;
  #L27ed5e.  return v1;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.n.u1` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/n/u1;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27edd0.  call `d`(v4) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27edd6.  call `e`(v4, v5) @signature `Le/e/a/b/f/n/u1;.e:(I)V` @kind direct;
  #L27eddc.  v0:= v4.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27ede0.  v1:= v0[v5];
  #L27ede4.  v2:= v4.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27ede8.  v3:= v2 + -1;
  #L27edec.  if v5 >= v3 then goto L27ee00;
  #L27edf0.  v3:= v5 + 1;
  #L27edf4.  v2:= v2 - v5 @kind int;
  #L27edf6.  v2:= v2 + -1;
  #L27edfa.  call `arraycopy`(v0, v3, v0, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27ee00.  v5:= v4.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27ee04.  v5:= v5 + -1;
  #L27ee08.  v4.`e.e.a.b.f.n.u1.d` @type ^`int` := v5;
  #L27ee0c.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L27ee10.  v5:= v5 + 1;
  #L27ee14.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L27ee18.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L27ee1e.  v5:= temp @kind object;
  #L27ee20.  return v5 @kind object;
}
procedure `void` `removeRange`(`e.e.a.b.f.n.u1` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/n/u1;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L27efe0.  call `d`(v2) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27efe6.  if v4 < v3 then goto L27f014;
  #L27efea.  v0:= v2.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27efee.  v1:= v2.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27eff2.  v1:= v1 - v4 @kind int;
  #L27eff4.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27effa.  v0:= v2.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27effe.  v4:= v4 - v3 @kind int;
  #L27f000.  v0:= v0 - v4 @kind int;
  #L27f002.  v2.`e.e.a.b.f.n.u1.d` @type ^`int` := v0;
  #L27f006.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L27f00a.  v3:= v3 + 1;
  #L27f00e.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L27f012.  return @kind void;
  #L27f014.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L27f018.  v4:= "toIndex < fromIndex" @kind object;
  #L27f01c.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27f022.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.n.u1` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/n/u1;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L27ee34.  v4:= (`java.lang.Integer`) v4 @kind object;
  #L27ee38.  call temp:= `intValue`(v4) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L27ee3e.  v4:= temp;
  #L27ee40.  call `d`(v2) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27ee46.  call `e`(v2, v3) @signature `Le/e/a/b/f/n/u1;.e:(I)V` @kind direct;
  #L27ee4c.  v0:= v2.`e.e.a.b.f.n.u1.c` @type ^`int`[] @kind object;
  #L27ee50.  v1:= v0[v3];
  #L27ee54.  v0[v3]:= v4;
  #L27ee58.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L27ee5e.  v3:= temp @kind object;
  #L27ee60.  return v3 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.n.u1` v1 @kind this) @signature `Le/e/a/b/f/n/u1;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L27ed70.  v0:= v1.`e.e.a.b.f.n.u1.d` @type ^`int`;
  #L27ed74.  return v0;
}
