record `e.e.a.b.f.o.ta` @kind class @AccessFlag ABSTRACT extends `e.e.a.b.f.o.va` @kind class, `java.io.Serializable` @kind interface {
  `java.util.Map` `e.e.a.b.f.o.ta.d` @AccessFlag PRIVATE_TRANSIENT;
  `int` `e.e.a.b.f.o.ta.e` @AccessFlag PRIVATE_TRANSIENT;
}
procedure `void` `<init>`(`e.e.a.b.f.o.ta` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Le/e/a/b/f/o/ta;.<init>:(Ljava/util/Map;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L2d008c.  call `<init>`(v1) @signature `Le/e/a/b/f/o/va;.<init>:()V` @kind direct;
  #L2d0092.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2d0098.  v0:= temp;
  #L2d009a.  if v0 == 0 then goto L2d00a4;
  #L2d009e.  v1.`e.e.a.b.f.o.ta.d` @type ^`java.util.Map` := v2 @kind object;
  #L2d00a2.  return @kind void;
  #L2d00a4.  v2:= new `java.lang.IllegalArgumentException`;
  #L2d00a8.  call `<init>`(v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L2d00ae.  throw v2;
}
procedure `int` `a`(`e.e.a.b.f.o.ta` v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/o/ta;.a:(Le/e/a/b/f/o/ta;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L2cff94.  v0:= v1.`e.e.a.b.f.o.ta.e` @type ^`int`;
  #L2cff98.  v0:= v0 + v2 @kind int;
  #L2cff9a.  v1.`e.e.a.b.f.o.ta.e` @type ^`int` := v0;
  #L2cff9e.  return v0;
}
procedure `java.util.Map` `a`(`e.e.a.b.f.o.ta` v0 @kind object) @signature `Le/e/a/b/f/o/ta;.a:(Le/e/a/b/f/o/ta;)Ljava/util/Map;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2d0054.  v0:= v0.`e.e.a.b.f.o.ta.d` @type ^`java.util.Map` @kind object;
  #L2d0058.  return v0 @kind object;
}
procedure `void` `a`(`e.e.a.b.f.o.ta` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/o/ta;.a:(Le/e/a/b/f/o/ta;Ljava/lang/Object;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2d0118.  v0:= v2.`e.e.a.b.f.o.ta.d` @type ^`java.util.Map` @kind object;
  #L2d011c.  v1:= 0I;
  #L2d011e.  if v0 == 0 then goto L2d0150;
  #L2d0122.  call temp:= `remove`(v0, v3) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2d0128.  v1:= temp @kind object;
  #L2d012a.  goto L2d012e;
  #L2d012c.  
  #L2d012e.  v1:= (`java.util.Collection`) v1 @kind object;
  #L2d0132.  if v1 == 0 then goto L2d014e;
  #L2d0136.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L2d013c.  v3:= temp;
  #L2d013e.  call `clear`(v1) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L2d0144.  v0:= v2.`e.e.a.b.f.o.ta.e` @type ^`int`;
  #L2d0148.  v0:= v0 - v3 @kind int;
  #L2d014a.  v2.`e.e.a.b.f.o.ta.e` @type ^`int` := v0;
  #L2d014e.  return @kind void;
  #L2d0150.  throw v1;
  catch `java.lang.ClassCastException` @[L2d0122..L2d012a] goto L2d012c;
  catch `java.lang.NullPointerException` @[L2d0122..L2d012a] goto L2d012c;
}
procedure `int` `b`(`e.e.a.b.f.o.ta` v2 @kind object) @signature `Le/e/a/b/f/o/ta;.b:(Le/e/a/b/f/o/ta;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2cff54.  v0:= v2.`e.e.a.b.f.o.ta.e` @type ^`int`;
  #L2cff58.  v1:= v0 + -1;
  #L2cff5c.  v2.`e.e.a.b.f.o.ta.e` @type ^`int` := v1;
  #L2cff60.  return v0;
}
procedure `int` `b`(`e.e.a.b.f.o.ta` v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/o/ta;.b:(Le/e/a/b/f/o/ta;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L2cffb0.  v0:= v1.`e.e.a.b.f.o.ta.e` @type ^`int`;
  #L2cffb4.  v0:= v0 - v2 @kind int;
  #L2cffb6.  v1.`e.e.a.b.f.o.ta.e` @type ^`int` := v0;
  #L2cffba.  return v0;
}
procedure `int` `c`(`e.e.a.b.f.o.ta` v2 @kind object) @signature `Le/e/a/b/f/o/ta;.c:(Le/e/a/b/f/o/ta;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2cff74.  v0:= v2.`e.e.a.b.f.o.ta.e` @type ^`int`;
  #L2cff78.  v1:= v0 + 1;
  #L2cff7c.  v2.`e.e.a.b.f.o.ta.e` @type ^`int` := v1;
  #L2cff80.  return v0;
}
procedure `java.util.Collection` `a`(`java.lang.Object` v0 @kind object, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/o/ta;.a:(Ljava/lang/Object;Ljava/util/Collection;)Ljava/util/Collection;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.util.List` `a`(`e.e.a.b.f.o.ta` v1 @kind this, `java.lang.Object` v2 @kind object, `java.util.List` v3 @kind object, `e.e.a.b.f.o.qa` v4 @kind object) @signature `Le/e/a/b/f/o/ta;.a:(Ljava/lang/Object;Ljava/util/List;Le/e/a/b/f/o/qa;)Ljava/util/List;` @AccessFlag FINAL {
    temp;
    v0;

  #L2d0004.  v0:= instanceof @variable v3 @type ^`java.util.RandomAccess` @kind boolean;
  #L2d0008.  if v0 == 0 then goto L2d0018;
  #L2d000c.  v0:= new `e.e.a.b.f.o.oa`;
  #L2d0010.  call `<init>`(v0, v1, v2, v3, v4) @signature `Le/e/a/b/f/o/oa;.<init>:(Le/e/a/b/f/o/ta;Ljava/lang/Object;Ljava/util/List;Le/e/a/b/f/o/qa;)V` @kind direct;
  #L2d0016.  goto L2d0022;
  #L2d0018.  v0:= new `e.e.a.b.f.o.sa`;
  #L2d001c.  call `<init>`(v0, v1, v2, v3, v4) @signature `Le/e/a/b/f/o/sa;.<init>:(Le/e/a/b/f/o/ta;Ljava/lang/Object;Ljava/util/List;Le/e/a/b/f/o/qa;)V` @kind direct;
  #L2d0022.  return v0 @kind object;
}
procedure `java.util.Set` `a`(`e.e.a.b.f.o.ta` v2 @kind this) @signature `Le/e/a/b/f/o/ta;.a:()Ljava/util/Set;` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L2d006c.  v0:= new `e.e.a.b.f.o.na`;
  #L2d0070.  v1:= v2.`e.e.a.b.f.o.ta.d` @type ^`java.util.Map` @kind object;
  #L2d0074.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/o/na;.<init>:(Le/e/a/b/f/o/ta;Ljava/util/Map;)V` @kind direct;
  #L2d007a.  return v0 @kind object;
}
procedure `boolean` `a`(`e.e.a.b.f.o.ta` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/o/ta;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2cfed8.  v0:= v2.`e.e.a.b.f.o.ta.d` @type ^`java.util.Map` @kind object;
  #L2cfedc.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2cfee2.  v0:= temp @kind object;
  #L2cfee4.  v0:= (`java.util.Collection`) v0 @kind object;
  #L2cfee8.  v1:= 1I;
  #L2cfeea.  if v0 != 0 then goto L2cff28;
  #L2cfeee.  call temp:= `e`(v2) @signature `Le/e/a/b/f/o/ta;.e:()Ljava/util/Collection;` @kind virtual;
  #L2cfef4.  v0:= temp @kind object;
  #L2cfef6.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2cfefc.  v4:= temp;
  #L2cfefe.  if v4 == 0 then goto L2cff18;
  #L2cff02.  v4:= v2.`e.e.a.b.f.o.ta.e` @type ^`int`;
  #L2cff06.  v4:= v4 + v1 @kind int;
  #L2cff08.  v2.`e.e.a.b.f.o.ta.e` @type ^`int` := v4;
  #L2cff0c.  v4:= v2.`e.e.a.b.f.o.ta.d` @type ^`java.util.Map` @kind object;
  #L2cff10.  call temp:= `put`(v4, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2cff16.  return v1;
  #L2cff18.  v3:= new `java.lang.AssertionError`;
  #L2cff1c.  v4:= "New Collection violated the Collection spec" @kind object;
  #L2cff20.  call `<init>`(v3, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2cff26.  throw v3;
  #L2cff28.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2cff2e.  v3:= temp;
  #L2cff30.  if v3 == 0 then goto L2cff40;
  #L2cff34.  v3:= v2.`e.e.a.b.f.o.ta.e` @type ^`int`;
  #L2cff38.  v3:= v3 + v1 @kind int;
  #L2cff3a.  v2.`e.e.a.b.f.o.ta.e` @type ^`int` := v3;
  #L2cff3e.  return v1;
  #L2cff40.  v3:= 0I;
  #L2cff42.  return v3;
}
procedure `java.util.Collection` `b`(`e.e.a.b.f.o.ta` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/o/ta;.b:(Ljava/lang/Object;)Ljava/util/Collection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2cffcc.  v0:= v1.`e.e.a.b.f.o.ta.d` @type ^`java.util.Map` @kind object;
  #L2cffd0.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2cffd6.  v0:= temp @kind object;
  #L2cffd8.  v0:= (`java.util.Collection`) v0 @kind object;
  #L2cffdc.  if v0 != 0 then goto L2cffe8;
  #L2cffe0.  call temp:= `e`(v1) @signature `Le/e/a/b/f/o/ta;.e:()Ljava/util/Collection;` @kind virtual;
  #L2cffe6.  v0:= temp @kind object;
  #L2cffe8.  call temp:= `a`(v1, v2, v0) @signature `Le/e/a/b/f/o/ta;.a:(Ljava/lang/Object;Ljava/util/Collection;)Ljava/util/Collection;` @kind virtual;
  #L2cffee.  v2:= temp @kind object;
  #L2cfff0.  return v2 @kind object;
}
procedure `java.util.Map` `b`(`e.e.a.b.f.o.ta` v2 @kind this) @signature `Le/e/a/b/f/o/ta;.b:()Ljava/util/Map;` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L2d0034.  v0:= new `e.e.a.b.f.o.ka`;
  #L2d0038.  v1:= v2.`e.e.a.b.f.o.ta.d` @type ^`java.util.Map` @kind object;
  #L2d003c.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/o/ka;.<init>:(Le/e/a/b/f/o/ta;Ljava/util/Map;)V` @kind direct;
  #L2d0042.  return v0 @kind object;
}
procedure `java.util.Collection` `e`() @signature `Le/e/a/b/f/o/ta;.e:()Ljava/util/Collection;` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `f`(`e.e.a.b.f.o.ta` v2 @kind this) @signature `Le/e/a/b/f/o/ta;.f:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2d00c0.  v0:= v2.`e.e.a.b.f.o.ta.d` @type ^`java.util.Map` @kind object;
  #L2d00c4.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L2d00ca.  v0:= temp @kind object;
  #L2d00cc.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2d00d2.  v0:= temp @kind object;
  #L2d00d4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2d00da.  v1:= temp;
  #L2d00dc.  if v1 == 0 then goto L2d00f4;
  #L2d00e0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2d00e6.  v1:= temp @kind object;
  #L2d00e8.  v1:= (`java.util.Collection`) v1 @kind object;
  #L2d00ec.  call `clear`(v1) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L2d00f2.  goto L2d00d4;
  #L2d00f4.  v0:= v2.`e.e.a.b.f.o.ta.d` @type ^`java.util.Map` @kind object;
  #L2d00f8.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L2d00fe.  v0:= 0I;
  #L2d0100.  v2.`e.e.a.b.f.o.ta.e` @type ^`int` := v0;
  #L2d0104.  return @kind void;
}
