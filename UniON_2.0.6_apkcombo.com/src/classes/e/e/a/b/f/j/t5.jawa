record `e.e.a.b.f.j.t5` @kind class @AccessFlag  extends `java.util.AbstractMap` @kind class {
  `int` `e.e.a.b.f.j.t5.b` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `e.e.a.b.f.j.t5.c` @AccessFlag PRIVATE;
  `java.util.Map` `e.e.a.b.f.j.t5.d` @AccessFlag PRIVATE;
  `boolean` `e.e.a.b.f.j.t5.e` @AccessFlag PRIVATE;
  `e.e.a.b.f.j.f6` `e.e.a.b.f.j.t5.f` @AccessFlag PRIVATE_VOLATILE;
  `java.util.Map` `e.e.a.b.f.j.t5.g` @AccessFlag PRIVATE;
  `e.e.a.b.f.j.y5` `e.e.a.b.f.j.t5.h` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`e.e.a.b.f.j.t5` v0 @kind this, `int` v1 ) @signature `Le/e/a/b/f/j/t5;.<init>:(I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L22f50c.  call `<init>`(v0) @signature `Ljava/util/AbstractMap;.<init>:()V` @kind direct;
  #L22f512.  v0.`e.e.a.b.f.j.t5.b` @type ^`int` := v1;
  #L22f516.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L22f51c.  v1:= temp @kind object;
  #L22f51e.  v0.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` := v1 @kind object;
  #L22f522.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L22f528.  v1:= temp @kind object;
  #L22f52a.  v0.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` := v1 @kind object;
  #L22f52e.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L22f534.  v1:= temp @kind object;
  #L22f536.  v0.`e.e.a.b.f.j.t5.g` @type ^`java.util.Map` := v1 @kind object;
  #L22f53a.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.j.t5` v0 @kind this, `int` v1 , `e.e.a.b.f.j.w5` v2 @kind object) @signature `Le/e/a/b/f/j/t5;.<init>:(ILe/e/a/b/f/j/w5;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L22f54c.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/j/t5;.<init>:(I)V` @kind direct;
  #L22f552.  return @kind void;
}
procedure `int` `a`(`e.e.a.b.f.j.t5` v4 @kind this, `java.lang.Comparable` v5 @kind object) @signature `Le/e/a/b/f/j/t5;.a:(Ljava/lang/Comparable;)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L22f090.  v0:= v4.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f094.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L22f09a.  v0:= temp;
  #L22f09c.  v0:= v0 + -1;
  #L22f0a0.  if v0 < 0 then goto L22f0da;
  #L22f0a4.  v1:= v4.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f0a8.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L22f0ae.  v1:= temp @kind object;
  #L22f0b0.  v1:= (`e.e.a.b.f.j.c6`) v1 @kind object;
  #L22f0b4.  call temp:= `getKey`(v1) @signature `Le/e/a/b/f/j/c6;.getKey:()Ljava/lang/Object;` @kind virtual;
  #L22f0ba.  v1:= temp @kind object;
  #L22f0bc.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L22f0c0.  call temp:= `compareTo`(v5, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L22f0c6.  v1:= temp;
  #L22f0c8.  if v1 <= 0 then goto L22f0d4;
  #L22f0cc.  v0:= v0 + 2;
  #L22f0d0.  v5:= -v0 @kind int;
  #L22f0d2.  return v5;
  #L22f0d4.  if v1 != 0 then goto L22f0da;
  #L22f0d8.  return v0;
  #L22f0da.  v1:= 0I;
  #L22f0dc.  if v1 > v0 then goto L22f122;
  #L22f0e0.  v2:= v1 + v0 @kind int;
  #L22f0e4.  v2:= v2 / 2;
  #L22f0e8.  v3:= v4.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f0ec.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L22f0f2.  v3:= temp @kind object;
  #L22f0f4.  v3:= (`e.e.a.b.f.j.c6`) v3 @kind object;
  #L22f0f8.  call temp:= `getKey`(v3) @signature `Le/e/a/b/f/j/c6;.getKey:()Ljava/lang/Object;` @kind virtual;
  #L22f0fe.  v3:= temp @kind object;
  #L22f100.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L22f104.  call temp:= `compareTo`(v5, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L22f10a.  v3:= temp;
  #L22f10c.  if v3 >= 0 then goto L22f116;
  #L22f110.  v0:= v2 + -1;
  #L22f114.  goto L22f0dc;
  #L22f116.  if v3 <= 0 then goto L22f120;
  #L22f11a.  v1:= v2 + 1;
  #L22f11e.  goto L22f0dc;
  #L22f120.  return v2;
  #L22f122.  v1:= v1 + 1;
  #L22f126.  v5:= -v1 @kind int;
  #L22f128.  return v5;
}
procedure `java.lang.Object` `a`(`e.e.a.b.f.j.t5` v0 @kind object, `int` v1 ) @signature `Le/e/a/b/f/j/t5;.a:(Le/e/a/b/f/j/t5;I)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L22f250.  call temp:= `c`(v0, v1) @signature `Le/e/a/b/f/j/t5;.c:(I)Ljava/lang/Object;` @kind direct;
  #L22f256.  v0:= temp @kind object;
  #L22f258.  return v0 @kind object;
}
procedure `void` `a`(`e.e.a.b.f.j.t5` v0 @kind object) @signature `Le/e/a/b/f/j/t5;.a:(Le/e/a/b/f/j/t5;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L22f624.  call `f`(v0) @signature `Le/e/a/b/f/j/t5;.f:()V` @kind direct;
  #L22f62a.  return @kind void;
}
procedure `e.e.a.b.f.j.t5` `b`(`int` v1 ) @signature `Le/e/a/b/f/j/t5;.b:(I)Le/e/a/b/f/j/t5;` @AccessFlag STATIC {
    temp;
    v0;

  #L22efe8.  v0:= new `e.e.a.b.f.j.w5`;
  #L22efec.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/j/w5;.<init>:(I)V` @kind direct;
  #L22eff2.  return v0 @kind object;
}
procedure `java.util.List` `b`(`e.e.a.b.f.j.t5` v0 @kind object) @signature `Le/e/a/b/f/j/t5;.b:(Le/e/a/b/f/j/t5;)Ljava/util/List;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L22f3e0.  v0:= v0.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f3e4.  return v0 @kind object;
}
procedure `java.lang.Object` `c`(`e.e.a.b.f.j.t5` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/j/t5;.c:(I)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L22f360.  call `f`(v4) @signature `Le/e/a/b/f/j/t5;.f:()V` @kind direct;
  #L22f366.  v0:= v4.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f36a.  call temp:= `remove`(v0, v5) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L22f370.  v5:= temp @kind object;
  #L22f372.  v5:= (`e.e.a.b.f.j.c6`) v5 @kind object;
  #L22f376.  call temp:= `getValue`(v5) @signature `Le/e/a/b/f/j/c6;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L22f37c.  v5:= temp @kind object;
  #L22f37e.  v0:= v4.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f382.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L22f388.  v0:= temp;
  #L22f38a.  if v0 != 0 then goto L22f3cc;
  #L22f38e.  call temp:= `g`(v4) @signature `Le/e/a/b/f/j/t5;.g:()Ljava/util/SortedMap;` @kind direct;
  #L22f394.  v0:= temp @kind object;
  #L22f396.  call temp:= `entrySet`(v0) @signature `Ljava/util/SortedMap;.entrySet:()Ljava/util/Set;` @kind interface;
  #L22f39c.  v0:= temp @kind object;
  #L22f39e.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L22f3a4.  v0:= temp @kind object;
  #L22f3a6.  v1:= v4.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f3aa.  v2:= new `e.e.a.b.f.j.c6`;
  #L22f3ae.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L22f3b4.  v3:= temp @kind object;
  #L22f3b6.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L22f3ba.  call `<init>`(v2, v4, v3) @signature `Le/e/a/b/f/j/c6;.<init>:(Le/e/a/b/f/j/t5;Ljava/util/Map$Entry;)V` @kind direct;
  #L22f3c0.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L22f3c6.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L22f3cc.  return v5 @kind object;
}
procedure `java.util.Map` `c`(`e.e.a.b.f.j.t5` v0 @kind object) @signature `Le/e/a/b/f/j/t5;.c:(Le/e/a/b/f/j/t5;)Ljava/util/Map;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L22f3f8.  v0:= v0.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f3fc.  return v0 @kind object;
}
procedure `java.util.Map` `d`(`e.e.a.b.f.j.t5` v0 @kind object) @signature `Le/e/a/b/f/j/t5;.d:(Le/e/a/b/f/j/t5;)Ljava/util/Map;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L22f410.  v0:= v0.`e.e.a.b.f.j.t5.g` @type ^`java.util.Map` @kind object;
  #L22f414.  return v0 @kind object;
}
procedure `void` `f`(`e.e.a.b.f.j.t5` v1 @kind this) @signature `Le/e/a/b/f/j/t5;.f:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L22f63c.  v0:= v1.`e.e.a.b.f.j.t5.e` @type ^`boolean` @kind boolean;
  #L22f640.  if v0 != 0 then goto L22f646;
  #L22f644.  return @kind void;
  #L22f646.  v0:= new `java.lang.UnsupportedOperationException`;
  #L22f64a.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L22f650.  throw v0;
}
procedure `java.util.SortedMap` `g`(`e.e.a.b.f.j.t5` v1 @kind this) @signature `Le/e/a/b/f/j/t5;.g:()Ljava/util/SortedMap;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L22f4ac.  call `f`(v1) @signature `Le/e/a/b/f/j/t5;.f:()V` @kind direct;
  #L22f4b2.  v0:= v1.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f4b6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L22f4bc.  v0:= temp;
  #L22f4be.  if v0 == 0 then goto L22f4f0;
  #L22f4c2.  v0:= v1.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f4c6.  v0:= instanceof @variable v0 @type ^`java.util.TreeMap` @kind boolean;
  #L22f4ca.  if v0 != 0 then goto L22f4f0;
  #L22f4ce.  v0:= new `java.util.TreeMap`;
  #L22f4d2.  call `<init>`(v0) @signature `Ljava/util/TreeMap;.<init>:()V` @kind direct;
  #L22f4d8.  v1.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` := v0 @kind object;
  #L22f4dc.  v0:= v1.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f4e0.  v0:= (`java.util.TreeMap`) v0 @kind object;
  #L22f4e4.  call temp:= `descendingMap`(v0) @signature `Ljava/util/TreeMap;.descendingMap:()Ljava/util/NavigableMap;` @kind virtual;
  #L22f4ea.  v0:= temp @kind object;
  #L22f4ec.  v1.`e.e.a.b.f.j.t5.g` @type ^`java.util.Map` := v0 @kind object;
  #L22f4f0.  v0:= v1.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f4f4.  v0:= (`java.util.SortedMap`) v0 @kind object;
  #L22f4f8.  return v0 @kind object;
}
procedure `java.lang.Object` `a`(`e.e.a.b.f.j.t5` v4 @kind this, `java.lang.Comparable` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/j/t5;.a:(Ljava/lang/Comparable;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L22f26c.  call `f`(v4) @signature `Le/e/a/b/f/j/t5;.f:()V` @kind direct;
  #L22f272.  call temp:= `a`(v4, v5) @signature `Le/e/a/b/f/j/t5;.a:(Ljava/lang/Comparable;)I` @kind direct;
  #L22f278.  v0:= temp;
  #L22f27a.  if v0 < 0 then goto L22f298;
  #L22f27e.  v5:= v4.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f282.  call temp:= `get`(v5, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L22f288.  v5:= temp @kind object;
  #L22f28a.  v5:= (`e.e.a.b.f.j.c6`) v5 @kind object;
  #L22f28e.  call temp:= `setValue`(v5, v6) @signature `Le/e/a/b/f/j/c6;.setValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L22f294.  v5:= temp @kind object;
  #L22f296.  return v5 @kind object;
  #L22f298.  call `f`(v4) @signature `Le/e/a/b/f/j/t5;.f:()V` @kind direct;
  #L22f29e.  v1:= v4.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f2a2.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L22f2a8.  v1:= temp;
  #L22f2aa.  if v1 == 0 then goto L22f2cc;
  #L22f2ae.  v1:= v4.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f2b2.  v1:= instanceof @variable v1 @type ^`java.util.ArrayList` @kind boolean;
  #L22f2b6.  if v1 != 0 then goto L22f2cc;
  #L22f2ba.  v1:= new `java.util.ArrayList`;
  #L22f2be.  v2:= v4.`e.e.a.b.f.j.t5.b` @type ^`int`;
  #L22f2c2.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L22f2c8.  v4.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` := v1 @kind object;
  #L22f2cc.  v0:= v0 + 1;
  #L22f2d0.  v0:= -v0 @kind int;
  #L22f2d2.  v1:= v4.`e.e.a.b.f.j.t5.b` @type ^`int`;
  #L22f2d6.  if v0 < v1 then goto L22f2ec;
  #L22f2da.  call temp:= `g`(v4) @signature `Le/e/a/b/f/j/t5;.g:()Ljava/util/SortedMap;` @kind direct;
  #L22f2e0.  v0:= temp @kind object;
  #L22f2e2.  call temp:= `put`(v0, v5, v6) @signature `Ljava/util/SortedMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L22f2e8.  v5:= temp @kind object;
  #L22f2ea.  return v5 @kind object;
  #L22f2ec.  v1:= v4.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f2f0.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L22f2f6.  v1:= temp;
  #L22f2f8.  v2:= v4.`e.e.a.b.f.j.t5.b` @type ^`int`;
  #L22f2fc.  if v1 != v2 then goto L22f336;
  #L22f300.  v1:= v4.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f304.  v2:= v2 + -1;
  #L22f308.  call temp:= `remove`(v1, v2) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L22f30e.  v1:= temp @kind object;
  #L22f310.  v1:= (`e.e.a.b.f.j.c6`) v1 @kind object;
  #L22f314.  call temp:= `g`(v4) @signature `Le/e/a/b/f/j/t5;.g:()Ljava/util/SortedMap;` @kind direct;
  #L22f31a.  v2:= temp @kind object;
  #L22f31c.  call temp:= `getKey`(v1) @signature `Le/e/a/b/f/j/c6;.getKey:()Ljava/lang/Object;` @kind virtual;
  #L22f322.  v3:= temp @kind object;
  #L22f324.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L22f328.  call temp:= `getValue`(v1) @signature `Le/e/a/b/f/j/c6;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L22f32e.  v1:= temp @kind object;
  #L22f330.  call temp:= `put`(v2, v3, v1) @signature `Ljava/util/SortedMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L22f336.  v1:= v4.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f33a.  v2:= new `e.e.a.b.f.j.c6`;
  #L22f33e.  call `<init>`(v2, v4, v5, v6) @signature `Le/e/a/b/f/j/c6;.<init>:(Le/e/a/b/f/j/t5;Ljava/lang/Comparable;Ljava/lang/Object;)V` @kind direct;
  #L22f344.  call `add`(v1, v0, v2) @signature `Ljava/util/List;.add:(ILjava/lang/Object;)V` @kind interface;
  #L22f34a.  v5:= 0I;
  #L22f34c.  return v5 @kind object;
}
procedure `java.util.Map$Entry` `a`(`e.e.a.b.f.j.t5` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/j/t5;.a:(I)Ljava/util/Map$Entry;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L22f428.  v0:= v1.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f42c.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L22f432.  v2:= temp @kind object;
  #L22f434.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L22f438.  return v2 @kind object;
}
procedure `void` `a`(`e.e.a.b.f.j.t5` v1 @kind this) @signature `Le/e/a/b/f/j/t5;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22f5b0.  v0:= v1.`e.e.a.b.f.j.t5.e` @type ^`boolean` @kind boolean;
  #L22f5b4.  if v0 != 0 then goto L22f612;
  #L22f5b8.  v0:= v1.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f5bc.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L22f5c2.  v0:= temp;
  #L22f5c4.  if v0 == 0 then goto L22f5d2;
  #L22f5c8.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L22f5ce.  v0:= temp @kind object;
  #L22f5d0.  goto L22f5de;
  #L22f5d2.  v0:= v1.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f5d6.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L22f5dc.  v0:= temp @kind object;
  #L22f5de.  v1.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` := v0 @kind object;
  #L22f5e2.  v0:= v1.`e.e.a.b.f.j.t5.g` @type ^`java.util.Map` @kind object;
  #L22f5e6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L22f5ec.  v0:= temp;
  #L22f5ee.  if v0 == 0 then goto L22f5fc;
  #L22f5f2.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L22f5f8.  v0:= temp @kind object;
  #L22f5fa.  goto L22f608;
  #L22f5fc.  v0:= v1.`e.e.a.b.f.j.t5.g` @type ^`java.util.Map` @kind object;
  #L22f600.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L22f606.  v0:= temp @kind object;
  #L22f608.  v1.`e.e.a.b.f.j.t5.g` @type ^`java.util.Map` := v0 @kind object;
  #L22f60c.  v0:= 1I;
  #L22f60e.  v1.`e.e.a.b.f.j.t5.e` @type ^`boolean` := v0 @kind boolean;
  #L22f612.  return @kind void;
}
procedure `boolean` `b`(`e.e.a.b.f.j.t5` v1 @kind this) @signature `Le/e/a/b/f/j/t5;.b:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L22efd0.  v0:= v1.`e.e.a.b.f.j.t5.e` @type ^`boolean` @kind boolean;
  #L22efd4.  return v0;
}
procedure `int` `c`(`e.e.a.b.f.j.t5` v1 @kind this) @signature `Le/e/a/b/f/j/t5;.c:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L22f13c.  v0:= v1.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f140.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L22f146.  v0:= temp;
  #L22f148.  return v0;
}
procedure `void` `clear`(`e.e.a.b.f.j.t5` v1 @kind this) @signature `Le/e/a/b/f/j/t5;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22f564.  call `f`(v1) @signature `Le/e/a/b/f/j/t5;.f:()V` @kind direct;
  #L22f56a.  v0:= v1.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f56e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L22f574.  v0:= temp;
  #L22f576.  if v0 != 0 then goto L22f584;
  #L22f57a.  v0:= v1.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f57e.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L22f584.  v0:= v1.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f588.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L22f58e.  v0:= temp;
  #L22f590.  if v0 != 0 then goto L22f59e;
  #L22f594.  v0:= v1.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f598.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L22f59e.  return @kind void;
}
procedure `boolean` `containsKey`(`e.e.a.b.f.j.t5` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/j/t5;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22eedc.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L22eee0.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/j/t5;.a:(Ljava/lang/Comparable;)I` @kind direct;
  #L22eee6.  v0:= temp;
  #L22eee8.  if v0 >= 0 then goto L22ef02;
  #L22eeec.  v0:= v1.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22eef0.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L22eef6.  v2:= temp;
  #L22eef8.  if v2 == 0 then goto L22eefe;
  #L22eefc.  goto L22ef02;
  #L22eefe.  v2:= 0I;
  #L22ef00.  return v2;
  #L22ef02.  v2:= 1I;
  #L22ef04.  return v2;
}
procedure `java.lang.Iterable` `d`(`e.e.a.b.f.j.t5` v1 @kind this) @signature `Le/e/a/b/f/j/t5;.d:()Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L22f15c.  v0:= v1.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f160.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L22f166.  v0:= temp;
  #L22f168.  if v0 == 0 then goto L22f176;
  #L22f16c.  call temp:= `a`() @signature `Le/e/a/b/f/j/x5;.a:()Ljava/lang/Iterable;` @kind static;
  #L22f172.  v0:= temp @kind object;
  #L22f174.  return v0 @kind object;
  #L22f176.  v0:= v1.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f17a.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L22f180.  v0:= temp @kind object;
  #L22f182.  return v0 @kind object;
}
procedure `java.util.Set` `e`(`e.e.a.b.f.j.t5` v2 @kind this) @signature `Le/e/a/b/f/j/t5;.e:()Ljava/util/Set;` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L22f47c.  v0:= v2.`e.e.a.b.f.j.t5.h` @type ^`e.e.a.b.f.j.y5` @kind object;
  #L22f480.  if v0 != 0 then goto L22f494;
  #L22f484.  v0:= new `e.e.a.b.f.j.y5`;
  #L22f488.  v1:= 0I;
  #L22f48a.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/j/y5;.<init>:(Le/e/a/b/f/j/t5;Le/e/a/b/f/j/w5;)V` @kind direct;
  #L22f490.  v2.`e.e.a.b.f.j.t5.h` @type ^`e.e.a.b.f.j.y5` := v0 @kind object;
  #L22f494.  v0:= v2.`e.e.a.b.f.j.t5.h` @type ^`e.e.a.b.f.j.y5` @kind object;
  #L22f498.  return v0 @kind object;
}
procedure `java.util.Set` `entrySet`(`e.e.a.b.f.j.t5` v2 @kind this) @signature `Le/e/a/b/f/j/t5;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L22f44c.  v0:= v2.`e.e.a.b.f.j.t5.f` @type ^`e.e.a.b.f.j.f6` @kind object;
  #L22f450.  if v0 != 0 then goto L22f464;
  #L22f454.  v0:= new `e.e.a.b.f.j.f6`;
  #L22f458.  v1:= 0I;
  #L22f45a.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/j/f6;.<init>:(Le/e/a/b/f/j/t5;Le/e/a/b/f/j/w5;)V` @kind direct;
  #L22f460.  v2.`e.e.a.b.f.j.t5.f` @type ^`e.e.a.b.f.j.f6` := v0 @kind object;
  #L22f464.  v0:= v2.`e.e.a.b.f.j.t5.f` @type ^`e.e.a.b.f.j.f6` @kind object;
  #L22f468.  return v0 @kind object;
}
procedure `boolean` `equals`(`e.e.a.b.f.j.t5` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Le/e/a/b/f/j/t5;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L22ef18.  v0:= 1I;
  #L22ef1a.  if v7 != v8 then goto L22ef20;
  #L22ef1e.  return v0;
  #L22ef20.  v1:= instanceof @variable v8 @type ^`e.e.a.b.f.j.t5` @kind boolean;
  #L22ef24.  if v1 != 0 then goto L22ef32;
  #L22ef28.  call temp:= `equals`(v7, v8) @signature `Ljava/util/AbstractMap;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L22ef2e.  v8:= temp;
  #L22ef30.  return v8;
  #L22ef32.  v8:= (`e.e.a.b.f.j.t5`) v8 @kind object;
  #L22ef36.  call temp:= `size`(v7) @signature `Le/e/a/b/f/j/t5;.size:()I` @kind virtual;
  #L22ef3c.  v1:= temp;
  #L22ef3e.  call temp:= `size`(v8) @signature `Le/e/a/b/f/j/t5;.size:()I` @kind virtual;
  #L22ef44.  v2:= temp;
  #L22ef46.  v3:= 0I;
  #L22ef48.  if v1 == v2 then goto L22ef4e;
  #L22ef4c.  return v3;
  #L22ef4e.  call temp:= `c`(v7) @signature `Le/e/a/b/f/j/t5;.c:()I` @kind virtual;
  #L22ef54.  v2:= temp;
  #L22ef56.  call temp:= `c`(v8) @signature `Le/e/a/b/f/j/t5;.c:()I` @kind virtual;
  #L22ef5c.  v4:= temp;
  #L22ef5e.  if v2 == v4 then goto L22ef7c;
  #L22ef62.  call temp:= `entrySet`(v7) @signature `Le/e/a/b/f/j/t5;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L22ef68.  v0:= temp @kind object;
  #L22ef6a.  call temp:= `entrySet`(v8) @signature `Le/e/a/b/f/j/t5;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L22ef70.  v8:= temp @kind object;
  #L22ef72.  call temp:= `equals`(v0, v8) @signature `Ljava/util/Set;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L22ef78.  v8:= temp;
  #L22ef7a.  return v8;
  #L22ef7c.  v4:= 0I;
  #L22ef7e.  if v4 >= v2 then goto L22efa6;
  #L22ef82.  call temp:= `a`(v7, v4) @signature `Le/e/a/b/f/j/t5;.a:(I)Ljava/util/Map$Entry;` @kind virtual;
  #L22ef88.  v5:= temp @kind object;
  #L22ef8a.  call temp:= `a`(v8, v4) @signature `Le/e/a/b/f/j/t5;.a:(I)Ljava/util/Map$Entry;` @kind virtual;
  #L22ef90.  v6:= temp @kind object;
  #L22ef92.  call temp:= `equals`(v5, v6) @signature `Ljava/util/Map$Entry;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L22ef98.  v5:= temp;
  #L22ef9a.  if v5 != 0 then goto L22efa0;
  #L22ef9e.  return v3;
  #L22efa0.  v4:= v4 + 1;
  #L22efa4.  goto L22ef7e;
  #L22efa6.  if v2 == v1 then goto L22efbc;
  #L22efaa.  v0:= v7.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22efae.  v8:= v8.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22efb2.  call temp:= `equals`(v0, v8) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L22efb8.  v8:= temp;
  #L22efba.  return v8;
  #L22efbc.  return v0;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.j.t5` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/j/t5;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22f194.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L22f198.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/j/t5;.a:(Ljava/lang/Comparable;)I` @kind direct;
  #L22f19e.  v0:= temp;
  #L22f1a0.  if v0 < 0 then goto L22f1be;
  #L22f1a4.  v2:= v1.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f1a8.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L22f1ae.  v2:= temp @kind object;
  #L22f1b0.  v2:= (`e.e.a.b.f.j.c6`) v2 @kind object;
  #L22f1b4.  call temp:= `getValue`(v2) @signature `Le/e/a/b/f/j/c6;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L22f1ba.  v2:= temp @kind object;
  #L22f1bc.  return v2 @kind object;
  #L22f1be.  v0:= v1.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f1c2.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L22f1c8.  v2:= temp @kind object;
  #L22f1ca.  return v2 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.j.t5` v4 @kind this) @signature `Le/e/a/b/f/j/t5;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L22f004.  call temp:= `c`(v4) @signature `Le/e/a/b/f/j/t5;.c:()I` @kind virtual;
  #L22f00a.  v0:= temp;
  #L22f00c.  v1:= 0I;
  #L22f00e.  v2:= 0I;
  #L22f010.  if v1 >= v0 then goto L22f034;
  #L22f014.  v3:= v4.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f018.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L22f01e.  v3:= temp @kind object;
  #L22f020.  v3:= (`e.e.a.b.f.j.c6`) v3 @kind object;
  #L22f024.  call temp:= `hashCode`(v3) @signature `Le/e/a/b/f/j/c6;.hashCode:()I` @kind virtual;
  #L22f02a.  v3:= temp;
  #L22f02c.  v2:= v2 + v3 @kind int;
  #L22f02e.  v1:= v1 + 1;
  #L22f032.  goto L22f010;
  #L22f034.  v0:= v4.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f038.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L22f03e.  v0:= temp;
  #L22f040.  if v0 <= 0 then goto L22f052;
  #L22f044.  v0:= v4.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f048.  call temp:= `hashCode`(v0) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L22f04e.  v0:= temp;
  #L22f050.  v2:= v2 + v0 @kind int;
  #L22f052.  return v2;
}
procedure `java.lang.Object` `put`(`e.e.a.b.f.j.t5` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/j/t5;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L22f1dc.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L22f1e0.  call temp:= `a`(v0, v1, v2) @signature `Le/e/a/b/f/j/t5;.a:(Ljava/lang/Comparable;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L22f1e6.  v1:= temp @kind object;
  #L22f1e8.  return v1 @kind object;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.j.t5` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/j/t5;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22f1fc.  call `f`(v1) @signature `Le/e/a/b/f/j/t5;.f:()V` @kind direct;
  #L22f202.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L22f206.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/j/t5;.a:(Ljava/lang/Comparable;)I` @kind direct;
  #L22f20c.  v0:= temp;
  #L22f20e.  if v0 < 0 then goto L22f21c;
  #L22f212.  call temp:= `c`(v1, v0) @signature `Le/e/a/b/f/j/t5;.c:(I)Ljava/lang/Object;` @kind direct;
  #L22f218.  v2:= temp @kind object;
  #L22f21a.  return v2 @kind object;
  #L22f21c.  v0:= v1.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f220.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L22f226.  v0:= temp;
  #L22f228.  if v0 == 0 then goto L22f230;
  #L22f22c.  v2:= 0I;
  #L22f22e.  return v2 @kind object;
  #L22f230.  v0:= v1.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f234.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L22f23a.  v2:= temp @kind object;
  #L22f23c.  return v2 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.j.t5` v2 @kind this) @signature `Le/e/a/b/f/j/t5;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L22f064.  v0:= v2.`e.e.a.b.f.j.t5.c` @type ^`java.util.List` @kind object;
  #L22f068.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L22f06e.  v0:= temp;
  #L22f070.  v1:= v2.`e.e.a.b.f.j.t5.d` @type ^`java.util.Map` @kind object;
  #L22f074.  call temp:= `size`(v1) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L22f07a.  v1:= temp;
  #L22f07c.  v0:= v0 + v1 @kind int;
  #L22f07e.  return v0;
}
