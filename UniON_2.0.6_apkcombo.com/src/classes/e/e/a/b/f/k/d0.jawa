record `e.e.a.b.f.k.d0` @kind class @AccessFlag  extends `java.util.AbstractCollection` @kind class {
  `java.lang.Object` `e.e.a.b.f.k.d0.b` @AccessFlag FINAL;
  `java.util.Collection` `e.e.a.b.f.k.d0.c` @AccessFlag ;
  `e.e.a.b.f.k.d0` `e.e.a.b.f.k.d0.d` @AccessFlag FINAL;
  `java.util.Collection` `e.e.a.b.f.k.d0.e` @AccessFlag FINAL;
  `e.e.a.b.f.k.g0` `e.e.a.b.f.k.d0.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.k.d0` v0 @kind this, `e.e.a.b.f.k.g0` v1 @kind object, `java.lang.Object` v2 @kind object, `java.util.Collection` v3 @kind object, `e.e.a.b.f.k.d0` v4 @kind object) @signature `Le/e/a/b/f/k/d0;.<init>:(Le/e/a/b/f/k/g0;Ljava/lang/Object;Ljava/util/Collection;Le/e/a/b/f/k/d0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2441dc.  v0.`e.e.a.b.f.k.d0.f` @type ^`e.e.a.b.f.k.g0` := v1 @kind object;
  #L2441e0.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L2441e6.  v0.`e.e.a.b.f.k.d0.b` @type ^`java.lang.Object` := v2 @kind object;
  #L2441ea.  v0.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` := v3 @kind object;
  #L2441ee.  v0.`e.e.a.b.f.k.d0.d` @type ^`e.e.a.b.f.k.d0` := v4 @kind object;
  #L2441f2.  if v4 != 0 then goto L2441fa;
  #L2441f6.  v1:= 0I;
  #L2441f8.  goto L2441fe;
  #L2441fa.  v1:= v4.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L2441fe.  v0.`e.e.a.b.f.k.d0.e` @type ^`java.util.Collection` := v1 @kind object;
  #L244202.  return @kind void;
}
procedure `boolean` `add`(`e.e.a.b.f.k.d0` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/k/d0;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L243ef0.  call `zza`(v2) @signature `Le/e/a/b/f/k/d0;.zza:()V` @kind virtual;
  #L243ef6.  v0:= v2.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L243efa.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L243f00.  v0:= temp;
  #L243f02.  v1:= v2.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L243f06.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L243f0c.  v3:= temp;
  #L243f0e.  if v3 == 0 then goto L243f28;
  #L243f12.  v1:= v2.`e.e.a.b.f.k.d0.f` @type ^`e.e.a.b.f.k.g0` @kind object;
  #L243f16.  call temp:= `c`(v1) @signature `Le/e/a/b/f/k/g0;.c:(Le/e/a/b/f/k/g0;)I` @kind static;
  #L243f1c.  if v0 == 0 then goto L243f28;
  #L243f20.  call `d`(v2) @signature `Le/e/a/b/f/k/d0;.d:()V` @kind virtual;
  #L243f26.  v3:= 1I;
  #L243f28.  return v3;
}
procedure `boolean` `addAll`(`e.e.a.b.f.k.d0` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Le/e/a/b/f/k/d0;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L243f3c.  call temp:= `isEmpty`(v4) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L243f42.  v0:= temp;
  #L243f44.  if v0 == 0 then goto L243f4c;
  #L243f48.  v4:= 0I;
  #L243f4a.  return v4;
  #L243f4c.  call temp:= `size`(v3) @signature `Le/e/a/b/f/k/d0;.size:()I` @kind virtual;
  #L243f52.  v0:= temp;
  #L243f54.  v1:= v3.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L243f58.  call temp:= `addAll`(v1, v4) @signature `Ljava/util/Collection;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L243f5e.  v4:= temp;
  #L243f60.  if v4 == 0 then goto L243f88;
  #L243f64.  v1:= v3.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L243f68.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L243f6e.  v1:= temp;
  #L243f70.  v2:= v3.`e.e.a.b.f.k.d0.f` @type ^`e.e.a.b.f.k.g0` @kind object;
  #L243f74.  v1:= v1 - v0 @kind int;
  #L243f76.  call temp:= `a`(v2, v1) @signature `Le/e/a/b/f/k/g0;.a:(Le/e/a/b/f/k/g0;I)I` @kind static;
  #L243f7c.  if v0 != 0 then goto L243f88;
  #L243f80.  call `d`(v3) @signature `Le/e/a/b/f/k/d0;.d:()V` @kind virtual;
  #L243f86.  v4:= 1I;
  #L243f88.  return v4;
}
procedure `void` `clear`(`e.e.a.b.f.k.d0` v2 @kind this) @signature `Le/e/a/b/f/k/d0;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L244214.  call temp:= `size`(v2) @signature `Le/e/a/b/f/k/d0;.size:()I` @kind virtual;
  #L24421a.  v0:= temp;
  #L24421c.  if v0 != 0 then goto L244222;
  #L244220.  return @kind void;
  #L244222.  v1:= v2.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L244226.  call `clear`(v1) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L24422c.  v1:= v2.`e.e.a.b.f.k.d0.f` @type ^`e.e.a.b.f.k.g0` @kind object;
  #L244230.  call temp:= `b`(v1, v0) @signature `Le/e/a/b/f/k/g0;.b:(Le/e/a/b/f/k/g0;I)I` @kind static;
  #L244236.  call `zzb`(v2) @signature `Le/e/a/b/f/k/d0;.zzb:()V` @kind virtual;
  #L24423c.  return @kind void;
}
procedure `boolean` `contains`(`e.e.a.b.f.k.d0` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/k/d0;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L243f9c.  call `zza`(v1) @signature `Le/e/a/b/f/k/d0;.zza:()V` @kind virtual;
  #L243fa2.  v0:= v1.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L243fa6.  call temp:= `contains`(v0, v2) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L243fac.  v2:= temp;
  #L243fae.  return v2;
}
procedure `boolean` `containsAll`(`e.e.a.b.f.k.d0` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/k/d0;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L243fc0.  call `zza`(v1) @signature `Le/e/a/b/f/k/d0;.zza:()V` @kind virtual;
  #L243fc6.  v0:= v1.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L243fca.  call temp:= `containsAll`(v0, v2) @signature `Ljava/util/Collection;.containsAll:(Ljava/util/Collection;)Z` @kind interface;
  #L243fd0.  v2:= temp;
  #L243fd2.  return v2;
}
procedure `void` `d`(`e.e.a.b.f.k.d0` v3 @kind this) @signature `Le/e/a/b/f/k/d0;.d:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L24430c.  v0:= v3.`e.e.a.b.f.k.d0.d` @type ^`e.e.a.b.f.k.d0` @kind object;
  #L244310.  if v0 == 0 then goto L24431c;
  #L244314.  call `d`(v0) @signature `Le/e/a/b/f/k/d0;.d:()V` @kind virtual;
  #L24431a.  return @kind void;
  #L24431c.  v0:= v3.`e.e.a.b.f.k.d0.f` @type ^`e.e.a.b.f.k.g0` @kind object;
  #L244320.  call temp:= `a`(v0) @signature `Le/e/a/b/f/k/g0;.a:(Le/e/a/b/f/k/g0;)Ljava/util/Map;` @kind static;
  #L244326.  v0:= temp @kind object;
  #L244328.  v1:= v3.`e.e.a.b.f.k.d0.b` @type ^`java.lang.Object` @kind object;
  #L24432c.  v2:= v3.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L244330.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L244336.  return @kind void;
}
procedure `boolean` `equals`(`e.e.a.b.f.k.d0` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/k/d0;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L243fe4.  if v2 != v1 then goto L243fec;
  #L243fe8.  v2:= 1I;
  #L243fea.  return v2;
  #L243fec.  call `zza`(v1) @signature `Le/e/a/b/f/k/d0;.zza:()V` @kind virtual;
  #L243ff2.  v0:= v1.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L243ff6.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Collection;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L243ffc.  v2:= temp;
  #L243ffe.  return v2;
}
procedure `int` `hashCode`(`e.e.a.b.f.k.d0` v1 @kind this) @signature `Le/e/a/b/f/k/d0;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2440f0.  call `zza`(v1) @signature `Le/e/a/b/f/k/d0;.zza:()V` @kind virtual;
  #L2440f6.  v0:= v1.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L2440fa.  call temp:= `hashCode`(v0) @signature `Ljava/util/Collection;.hashCode:()I` @kind interface;
  #L244100.  v0:= temp;
  #L244102.  return v0;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.k.d0` v1 @kind this) @signature `Le/e/a/b/f/k/d0;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L24415c.  call `zza`(v1) @signature `Le/e/a/b/f/k/d0;.zza:()V` @kind virtual;
  #L244162.  v0:= new `e.e.a.b.f.k.c0`;
  #L244166.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/k/c0;.<init>:(Le/e/a/b/f/k/d0;)V` @kind direct;
  #L24416c.  return v0 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.k.d0` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/k/d0;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L244010.  call `zza`(v1) @signature `Le/e/a/b/f/k/d0;.zza:()V` @kind virtual;
  #L244016.  v0:= v1.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L24401a.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Collection;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L244020.  v2:= temp;
  #L244022.  if v2 == 0 then goto L244036;
  #L244026.  v0:= v1.`e.e.a.b.f.k.d0.f` @type ^`e.e.a.b.f.k.g0` @kind object;
  #L24402a.  call temp:= `b`(v0) @signature `Le/e/a/b/f/k/g0;.b:(Le/e/a/b/f/k/g0;)I` @kind static;
  #L244030.  call `zzb`(v1) @signature `Le/e/a/b/f/k/d0;.zzb:()V` @kind virtual;
  #L244036.  return v2;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.k.d0` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Le/e/a/b/f/k/d0;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L244048.  call temp:= `isEmpty`(v4) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L24404e.  v0:= temp;
  #L244050.  if v0 == 0 then goto L244058;
  #L244054.  v4:= 0I;
  #L244056.  return v4;
  #L244058.  call temp:= `size`(v3) @signature `Le/e/a/b/f/k/d0;.size:()I` @kind virtual;
  #L24405e.  v0:= temp;
  #L244060.  v1:= v3.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L244064.  call temp:= `removeAll`(v1, v4) @signature `Ljava/util/Collection;.removeAll:(Ljava/util/Collection;)Z` @kind interface;
  #L24406a.  v4:= temp;
  #L24406c.  if v4 == 0 then goto L24408e;
  #L244070.  v1:= v3.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L244074.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L24407a.  v1:= temp;
  #L24407c.  v2:= v3.`e.e.a.b.f.k.d0.f` @type ^`e.e.a.b.f.k.g0` @kind object;
  #L244080.  v1:= v1 - v0 @kind int;
  #L244082.  call temp:= `a`(v2, v1) @signature `Le/e/a/b/f/k/g0;.a:(Le/e/a/b/f/k/g0;I)I` @kind static;
  #L244088.  call `zzb`(v3) @signature `Le/e/a/b/f/k/d0;.zzb:()V` @kind virtual;
  #L24408e.  return v4;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.k.d0` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Le/e/a/b/f/k/d0;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2440a0.  if v4 == 0 then goto L2440dc;
  #L2440a4.  call temp:= `size`(v3) @signature `Le/e/a/b/f/k/d0;.size:()I` @kind virtual;
  #L2440aa.  v0:= temp;
  #L2440ac.  v1:= v3.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L2440b0.  call temp:= `retainAll`(v1, v4) @signature `Ljava/util/Collection;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2440b6.  v4:= temp;
  #L2440b8.  if v4 == 0 then goto L2440da;
  #L2440bc.  v1:= v3.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L2440c0.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L2440c6.  v1:= temp;
  #L2440c8.  v2:= v3.`e.e.a.b.f.k.d0.f` @type ^`e.e.a.b.f.k.g0` @kind object;
  #L2440cc.  v1:= v1 - v0 @kind int;
  #L2440ce.  call temp:= `a`(v2, v1) @signature `Le/e/a/b/f/k/g0;.a:(Le/e/a/b/f/k/g0;I)I` @kind static;
  #L2440d4.  call `zzb`(v3) @signature `Le/e/a/b/f/k/d0;.zzb:()V` @kind virtual;
  #L2440da.  return v4;
  #L2440dc.  v4:= 0I;
  #L2440de.  throw v4;
}
procedure `int` `size`(`e.e.a.b.f.k.d0` v1 @kind this) @signature `Le/e/a/b/f/k/d0;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L244114.  call `zza`(v1) @signature `Le/e/a/b/f/k/d0;.zza:()V` @kind virtual;
  #L24411a.  v0:= v1.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L24411e.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L244124.  v0:= temp;
  #L244126.  return v0;
}
procedure `java.lang.String` `toString`(`e.e.a.b.f.k.d0` v1 @kind this) @signature `Le/e/a/b/f/k/d0;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L244138.  call `zza`(v1) @signature `Le/e/a/b/f/k/d0;.zza:()V` @kind virtual;
  #L24413e.  v0:= v1.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L244142.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L244148.  v0:= temp @kind object;
  #L24414a.  return v0 @kind object;
}
procedure `void` `zza`(`e.e.a.b.f.k.d0` v2 @kind this) @signature `Le/e/a/b/f/k/d0;.zza:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L244250.  v0:= v2.`e.e.a.b.f.k.d0.d` @type ^`e.e.a.b.f.k.d0` @kind object;
  #L244254.  if v0 == 0 then goto L24427c;
  #L244258.  call `zza`(v0) @signature `Le/e/a/b/f/k/d0;.zza:()V` @kind virtual;
  #L24425e.  v0:= v2.`e.e.a.b.f.k.d0.d` @type ^`e.e.a.b.f.k.d0` @kind object;
  #L244262.  v0:= v0.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L244266.  v1:= v2.`e.e.a.b.f.k.d0.e` @type ^`java.util.Collection` @kind object;
  #L24426a.  if v0 != v1 then goto L244270;
  #L24426e.  goto L2442b0;
  #L244270.  v0:= new `java.util.ConcurrentModificationException`;
  #L244274.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L24427a.  throw v0;
  #L24427c.  v0:= v2.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L244280.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L244286.  v0:= temp;
  #L244288.  if v0 == 0 then goto L2442b0;
  #L24428c.  v0:= v2.`e.e.a.b.f.k.d0.f` @type ^`e.e.a.b.f.k.g0` @kind object;
  #L244290.  call temp:= `a`(v0) @signature `Le/e/a/b/f/k/g0;.a:(Le/e/a/b/f/k/g0;)Ljava/util/Map;` @kind static;
  #L244296.  v0:= temp @kind object;
  #L244298.  v1:= v2.`e.e.a.b.f.k.d0.b` @type ^`java.lang.Object` @kind object;
  #L24429c.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2442a2.  v0:= temp @kind object;
  #L2442a4.  v0:= (`java.util.Collection`) v0 @kind object;
  #L2442a8.  if v0 == 0 then goto L2442b0;
  #L2442ac.  v2.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` := v0 @kind object;
  #L2442b0.  return @kind void;
}
procedure `void` `zzb`(`e.e.a.b.f.k.d0` v2 @kind this) @signature `Le/e/a/b/f/k/d0;.zzb:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L2442c4.  v0:= v2.`e.e.a.b.f.k.d0.d` @type ^`e.e.a.b.f.k.d0` @kind object;
  #L2442c8.  if v0 == 0 then goto L2442d4;
  #L2442cc.  call `zzb`(v0) @signature `Le/e/a/b/f/k/d0;.zzb:()V` @kind virtual;
  #L2442d2.  return @kind void;
  #L2442d4.  v0:= v2.`e.e.a.b.f.k.d0.c` @type ^`java.util.Collection` @kind object;
  #L2442d8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L2442de.  v0:= temp;
  #L2442e0.  if v0 == 0 then goto L2442fa;
  #L2442e4.  v0:= v2.`e.e.a.b.f.k.d0.f` @type ^`e.e.a.b.f.k.g0` @kind object;
  #L2442e8.  call temp:= `a`(v0) @signature `Le/e/a/b/f/k/g0;.a:(Le/e/a/b/f/k/g0;)Ljava/util/Map;` @kind static;
  #L2442ee.  v0:= temp @kind object;
  #L2442f0.  v1:= v2.`e.e.a.b.f.k.d0.b` @type ^`java.lang.Object` @kind object;
  #L2442f4.  call temp:= `remove`(v0, v1) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2442fa.  return @kind void;
}
