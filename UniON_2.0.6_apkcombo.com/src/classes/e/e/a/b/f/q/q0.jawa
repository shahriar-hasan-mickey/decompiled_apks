record `e.e.a.b.f.q.q0` @kind class @AccessFlag FINAL extends `e.e.a.b.f.q.tu` @kind class, `java.util.RandomAccess` @kind interface, `e.e.a.b.f.q.a0` @kind interface, `e.e.a.b.f.q.j1` @kind interface {
  `long`[] `e.e.a.b.f.q.q0.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.q.q0.d` @AccessFlag PRIVATE;
}
global `e.e.a.b.f.q.q0` `@@e.e.a.b.f.q.q0.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/q/q0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2d5564.  v0:= new `e.e.a.b.f.q.q0`;
  #L2d5568.  v1:= 0I;
  #L2d556a.  v2:= new `long`[v1];
  #L2d556e.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/q/q0;.<init>:([JI)V` @kind direct;
  #L2d5574.  `@@e.e.a.b.f.q.q0.e` @type ^`e.e.a.b.f.q.q0` := v0 @kind object;
  #L2d5578.  v0:= `@@e.e.a.b.f.q.q0.e` @type ^`e.e.a.b.f.q.q0` @kind object;
  #L2d557c.  call `zzb`(v0) @signature `Le/e/a/b/f/q/tu;.zzb:()V` @kind virtual;
  #L2d5582.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.q.q0` v2 @kind this) @signature `Le/e/a/b/f/q/q0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2d5594.  v0:= 10I;
  #L2d5598.  v0:= new `long`[v0];
  #L2d559c.  v1:= 0I;
  #L2d559e.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/q/q0;.<init>:([JI)V` @kind direct;
  #L2d55a4.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.q.q0` v0 @kind this, `long`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/q/q0;.<init>:([JI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2d55b8.  call `<init>`(v0) @signature `Le/e/a/b/f/q/tu;.<init>:()V` @kind direct;
  #L2d55be.  v0.`e.e.a.b.f.q.q0.c` @type ^`long`[] := v1 @kind object;
  #L2d55c2.  v0.`e.e.a.b.f.q.q0.d` @type ^`int` := v2;
  #L2d55c6.  return @kind void;
}
procedure `void` `c`(`e.e.a.b.f.q.q0` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/q/q0;.c:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2d56d8.  if v2 < 0 then goto L2d56e6;
  #L2d56dc.  v0:= v1.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d56e0.  if v2 >= v0 then goto L2d56e6;
  #L2d56e4.  return @kind void;
  #L2d56e6.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L2d56ea.  call temp:= `i`(v1, v2) @signature `Le/e/a/b/f/q/q0;.i:(I)Ljava/lang/String;` @kind direct;
  #L2d56f0.  v2:= temp @kind object;
  #L2d56f2.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d56f8.  throw v0;
}
procedure `java.lang.String` `i`(`e.e.a.b.f.q.q0` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/q/q0;.i:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2d54d0.  v0:= v3.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d54d4.  v1:= new `java.lang.StringBuilder`;
  #L2d54d8.  v2:= 35I;
  #L2d54dc.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2d54e2.  v2:= "Index:" @kind object;
  #L2d54e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d54ec.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d54f2.  v4:= ", Size:" @kind object;
  #L2d54f6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d54fc.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d5502.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d5508.  v4:= temp @kind object;
  #L2d550a.  return v4 @kind object;
}
procedure `void` `add`(`e.e.a.b.f.q.q0` v5 @kind this, `int` v6 , `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/q/q0;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d55d8.  v7:= (`java.lang.Long`) v7 @kind object;
  #L2d55dc.  call temp:= `longValue`(v7) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L2d55e2.  v0:= temp @kind wide;
  #L2d55e4.  call `d`(v5) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L2d55ea.  if v6 < 0 then goto L2d5660;
  #L2d55ee.  v7:= v5.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d55f2.  if v6 > v7 then goto L2d5660;
  #L2d55f6.  v2:= v5.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d55fa.  v3:= length @variable v2;
  #L2d55fc.  if v7 >= v3 then goto L2d560e;
  #L2d5600.  v3:= v6 + 1;
  #L2d5604.  v7:= v7 - v6 @kind int;
  #L2d5606.  call `arraycopy`(v2, v6, v2, v3, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d560c.  goto L2d563e;
  #L2d560e.  v7:= v7 * 3;
  #L2d5612.  v7:= v7 / 2;
  #L2d5616.  v7:= v7 + 1;
  #L2d561a.  v7:= new `long`[v7];
  #L2d561e.  v3:= 0I;
  #L2d5620.  call `arraycopy`(v2, v3, v7, v3, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d5626.  v2:= v5.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d562a.  v3:= v6 + 1;
  #L2d562e.  v4:= v5.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d5632.  v4:= v4 - v6 @kind int;
  #L2d5634.  call `arraycopy`(v2, v6, v7, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d563a.  v5.`e.e.a.b.f.q.q0.c` @type ^`long`[] := v7 @kind object;
  #L2d563e.  v7:= v5.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d5642.  v7[v6]:= v0 @kind wide;
  #L2d5646.  v6:= v5.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d564a.  v6:= v6 + 1;
  #L2d564e.  v5.`e.e.a.b.f.q.q0.d` @type ^`int` := v6;
  #L2d5652.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L2d5656.  v6:= v6 + 1;
  #L2d565a.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L2d565e.  return @kind void;
  #L2d5660.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L2d5664.  call temp:= `i`(v5, v6) @signature `Le/e/a/b/f/q/q0;.i:(I)Ljava/lang/String;` @kind direct;
  #L2d566a.  v6:= temp @kind object;
  #L2d566c.  call `<init>`(v7, v6) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d5672.  throw v7;
}
procedure `boolean` `add`(`e.e.a.b.f.q.q0` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/q/q0;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2d5190.  v7:= (`java.lang.Long`) v7 @kind object;
  #L2d5194.  call temp:= `longValue`(v7) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L2d519a.  v0:= temp @kind wide;
  #L2d519c.  call `d`(v6) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L2d51a2.  v7:= v6.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d51a6.  v2:= v6.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d51aa.  v3:= length @variable v2;
  #L2d51ac.  v4:= 1I;
  #L2d51ae.  if v7 != v3 then goto L2d51cc;
  #L2d51b2.  v3:= v7 * 3;
  #L2d51b6.  v3:= v3 / 2;
  #L2d51ba.  v3:= v3 + v4 @kind int;
  #L2d51bc.  v3:= new `long`[v3];
  #L2d51c0.  v5:= 0I;
  #L2d51c2.  call `arraycopy`(v2, v5, v3, v5, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d51c8.  v6.`e.e.a.b.f.q.q0.c` @type ^`long`[] := v3 @kind object;
  #L2d51cc.  v7:= v6.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d51d0.  v2:= v6.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d51d4.  v3:= v2 + 1;
  #L2d51d8.  v6.`e.e.a.b.f.q.q0.d` @type ^`int` := v3;
  #L2d51dc.  v7[v2]:= v0 @kind wide;
  #L2d51e0.  return v4;
}
procedure `boolean` `addAll`(`e.e.a.b.f.q.q0` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/q/q0;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d51f4.  call `d`(v5) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L2d51fa.  call temp:= `a`(v6) @signature `Le/e/a/b/f/q/b0;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2d5200.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.q.q0` @kind boolean;
  #L2d5204.  if v0 != 0 then goto L2d5212;
  #L2d5208.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/q/tu;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L2d520e.  v6:= temp;
  #L2d5210.  return v6;
  #L2d5212.  v6:= (`e.e.a.b.f.q.q0`) v6 @kind object;
  #L2d5216.  v0:= v6.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d521a.  v1:= 0I;
  #L2d521c.  if v0 != 0 then goto L2d5222;
  #L2d5220.  return v1;
  #L2d5222.  v2:= v5.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d5226.  v3:= 2147483647I;
  #L2d522c.  v3:= v3 - v2 @kind int;
  #L2d522e.  if v3 < v0 then goto L2d5272;
  #L2d5232.  v2:= v2 + v0 @kind int;
  #L2d5234.  v0:= v5.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d5238.  v3:= length @variable v0;
  #L2d523a.  if v2 <= v3 then goto L2d524a;
  #L2d523e.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([JI)[J` @kind static;
  #L2d5244.  v0:= temp @kind object;
  #L2d5246.  v5.`e.e.a.b.f.q.q0.c` @type ^`long`[] := v0 @kind object;
  #L2d524a.  v0:= v6.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d524e.  v3:= v5.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d5252.  v4:= v5.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d5256.  v6:= v6.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d525a.  call `arraycopy`(v0, v1, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d5260.  v5.`e.e.a.b.f.q.q0.d` @type ^`int` := v2;
  #L2d5264.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L2d5268.  v0:= 1I;
  #L2d526a.  v6:= v6 + v0 @kind int;
  #L2d526c.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L2d5270.  return v0;
  #L2d5272.  v6:= new `java.lang.OutOfMemoryError`;
  #L2d5276.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L2d527c.  throw v6;
}
procedure `boolean` `contains`(`e.e.a.b.f.q.q0` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/q/q0;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2d5290.  call temp:= `indexOf`(v1, v2) @signature `Le/e/a/b/f/q/q0;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L2d5296.  v2:= temp;
  #L2d5298.  v0:= -1I;
  #L2d529a.  if v2 == v0 then goto L2d52a2;
  #L2d529e.  v2:= 1I;
  #L2d52a0.  return v2;
  #L2d52a2.  v2:= 0I;
  #L2d52a4.  return v2;
}
procedure `e.e.a.b.f.q.a0` `e`(`e.e.a.b.f.q.q0` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/q/q0;.e:(I)Le/e/a/b/f/q/a0;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2d5324.  v0:= v2.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d5328.  if v3 < v0 then goto L2d5348;
  #L2d532c.  v0:= new `e.e.a.b.f.q.q0`;
  #L2d5330.  v1:= v2.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d5334.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([JI)[J` @kind static;
  #L2d533a.  v3:= temp @kind object;
  #L2d533c.  v1:= v2.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d5340.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/q/q0;.<init>:([JI)V` @kind direct;
  #L2d5346.  return v0 @kind object;
  #L2d5348.  v3:= new `java.lang.IllegalArgumentException`;
  #L2d534c.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L2d5352.  throw v3;
}
procedure `boolean` `equals`(`e.e.a.b.f.q.q0` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Le/e/a/b/f/q/q0;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2d52b8.  v0:= 1I;
  #L2d52ba.  if v8 != v9 then goto L2d52c0;
  #L2d52be.  return v0;
  #L2d52c0.  v1:= instanceof @variable v9 @type ^`e.e.a.b.f.q.q0` @kind boolean;
  #L2d52c4.  if v1 != 0 then goto L2d52d2;
  #L2d52c8.  call temp:= `equals`(v8, v9) @signature `Le/e/a/b/f/q/tu;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L2d52ce.  v9:= temp;
  #L2d52d0.  return v9;
  #L2d52d2.  v9:= (`e.e.a.b.f.q.q0`) v9 @kind object;
  #L2d52d6.  v1:= v8.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d52da.  v2:= v9.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d52de.  v3:= 0I;
  #L2d52e0.  if v1 == v2 then goto L2d52e6;
  #L2d52e4.  return v3;
  #L2d52e6.  v9:= v9.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d52ea.  v1:= 0I;
  #L2d52ec.  v2:= v8.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d52f0.  if v1 >= v2 then goto L2d5310;
  #L2d52f4.  v2:= v8.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d52f8.  v4:= v2[v1] @kind wide;
  #L2d52fc.  v6:= v9[v1] @kind wide;
  #L2d5300.  v2:= lcmp(v4, v6);
  #L2d5304.  if v2 == 0 then goto L2d530a;
  #L2d5308.  return v3;
  #L2d530a.  v1:= v1 + 1;
  #L2d530e.  goto L2d52ec;
  #L2d5310.  return v0;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.q.q0` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/q/q0;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L2d5404.  call `c`(v3, v4) @signature `Le/e/a/b/f/q/q0;.c:(I)V` @kind direct;
  #L2d540a.  v0:= v3.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d540e.  v1:= v0[v4] @kind wide;
  #L2d5412.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2d5418.  v4:= temp @kind object;
  #L2d541a.  return v4 @kind object;
}
procedure `long` `h`(`e.e.a.b.f.q.q0` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/q/q0;.h:(I)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2d551c.  call `c`(v3, v4) @signature `Le/e/a/b/f/q/q0;.c:(I)V` @kind direct;
  #L2d5522.  v0:= v3.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d5526.  v1:= v0[v4] @kind wide;
  #L2d552a.  return v1 @kind wide;
}
procedure `int` `hashCode`(`e.e.a.b.f.q.q0` v5 @kind this) @signature `Le/e/a/b/f/q/q0;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d5364.  v0:= 1I;
  #L2d5366.  v1:= 0I;
  #L2d5368.  v2:= v5.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d536c.  if v1 >= v2 then goto L2d538c;
  #L2d5370.  v0:= v0 * 31;
  #L2d5374.  v2:= v5.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d5378.  v3:= v2[v1] @kind wide;
  #L2d537c.  call temp:= `a`(v3) @signature `Le/e/a/b/f/q/b0;.a:(J)I` @kind static;
  #L2d5382.  v2:= temp;
  #L2d5384.  v0:= v0 + v2 @kind int;
  #L2d5386.  v1:= v1 + 1;
  #L2d538a.  goto L2d5368;
  #L2d538c.  return v0;
}
procedure `int` `indexOf`(`e.e.a.b.f.q.q0` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Le/e/a/b/f/q/q0;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2d53a0.  v0:= instanceof @variable v8 @type ^`java.lang.Long` @kind boolean;
  #L2d53a4.  v1:= -1I;
  #L2d53a6.  if v0 != 0 then goto L2d53ac;
  #L2d53aa.  return v1;
  #L2d53ac.  v8:= (`java.lang.Long`) v8 @kind object;
  #L2d53b0.  call temp:= `longValue`(v8) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L2d53b6.  v2:= temp @kind wide;
  #L2d53b8.  v8:= v7.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d53bc.  v0:= 0I;
  #L2d53be.  if v0 >= v8 then goto L2d53da;
  #L2d53c2.  v4:= v7.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d53c6.  v5:= v4[v0] @kind wide;
  #L2d53ca.  v4:= lcmp(v5, v2);
  #L2d53ce.  if v4 != 0 then goto L2d53d4;
  #L2d53d2.  return v0;
  #L2d53d4.  v0:= v0 + 1;
  #L2d53d8.  goto L2d53be;
  #L2d53da.  return v1;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.q.q0` v5 @kind this, `int` v6 ) @signature `Le/e/a/b/f/q/q0;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d542c.  call `d`(v5) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L2d5432.  call `c`(v5, v6) @signature `Le/e/a/b/f/q/q0;.c:(I)V` @kind direct;
  #L2d5438.  v0:= v5.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d543c.  v1:= v0[v6] @kind wide;
  #L2d5440.  v3:= v5.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d5444.  v4:= v3 + -1;
  #L2d5448.  if v6 >= v4 then goto L2d545c;
  #L2d544c.  v4:= v6 + 1;
  #L2d5450.  v3:= v3 - v6 @kind int;
  #L2d5452.  v3:= v3 + -1;
  #L2d5456.  call `arraycopy`(v0, v4, v0, v6, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d545c.  v6:= v5.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d5460.  v6:= v6 + -1;
  #L2d5464.  v5.`e.e.a.b.f.q.q0.d` @type ^`int` := v6;
  #L2d5468.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L2d546c.  v6:= v6 + 1;
  #L2d5470.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L2d5474.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2d547a.  v6:= temp @kind object;
  #L2d547c.  return v6 @kind object;
}
procedure `void` `removeRange`(`e.e.a.b.f.q.q0` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/q/q0;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L2d5684.  call `d`(v2) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L2d568a.  if v4 < v3 then goto L2d56b8;
  #L2d568e.  v0:= v2.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d5692.  v1:= v2.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d5696.  v1:= v1 - v4 @kind int;
  #L2d5698.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d569e.  v0:= v2.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d56a2.  v4:= v4 - v3 @kind int;
  #L2d56a4.  v0:= v0 - v4 @kind int;
  #L2d56a6.  v2.`e.e.a.b.f.q.q0.d` @type ^`int` := v0;
  #L2d56aa.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L2d56ae.  v3:= v3 + 1;
  #L2d56b2.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L2d56b6.  return @kind void;
  #L2d56b8.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L2d56bc.  v4:= "toIndex < fromIndex" @kind object;
  #L2d56c0.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d56c6.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.q.q0` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/q/q0;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2d5490.  v6:= (`java.lang.Long`) v6 @kind object;
  #L2d5494.  call temp:= `longValue`(v6) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L2d549a.  v0:= temp @kind wide;
  #L2d549c.  call `d`(v4) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L2d54a2.  call `c`(v4, v5) @signature `Le/e/a/b/f/q/q0;.c:(I)V` @kind direct;
  #L2d54a8.  v6:= v4.`e.e.a.b.f.q.q0.c` @type ^`long`[] @kind object;
  #L2d54ac.  v2:= v6[v5] @kind wide;
  #L2d54b0.  v6[v5]:= v0 @kind wide;
  #L2d54b4.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2d54ba.  v5:= temp @kind object;
  #L2d54bc.  return v5 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.q.q0` v1 @kind this) @signature `Le/e/a/b/f/q/q0;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2d53ec.  v0:= v1.`e.e.a.b.f.q.q0.d` @type ^`int`;
  #L2d53f0.  return v0;
}
