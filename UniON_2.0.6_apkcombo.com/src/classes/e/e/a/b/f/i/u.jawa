record `e.e.a.b.f.i.u` @kind class @AccessFlag FINAL {
  `java.util.concurrent.ConcurrentHashMap` `e.e.a.b.f.i.u.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.ref.ReferenceQueue` `e.e.a.b.f.i.u.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e.e.a.b.f.i.u` v4 @kind this) @signature `Le/e/a/b/f/i/u;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L21d140.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21d146.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L21d14a.  v1:= 16I;
  #L21d14e.  v2:= 0.75F;
  #L21d152.  v3:= 10I;
  #L21d156.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:(IFI)V` @kind direct;
  #L21d15c.  v4.`e.e.a.b.f.i.u.a` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L21d160.  v0:= new `java.lang.ref.ReferenceQueue`;
  #L21d164.  call `<init>`(v0) @signature `Ljava/lang/ref/ReferenceQueue;.<init>:()V` @kind direct;
  #L21d16a.  v4.`e.e.a.b.f.i.u.b` @type ^`java.lang.ref.ReferenceQueue` := v0 @kind object;
  #L21d16e.  return @kind void;
}
procedure `java.util.List` `a`(`e.e.a.b.f.i.u` v3 @kind this, `java.lang.Throwable` v4 @kind object, `boolean` v5 ) @signature `Le/e/a/b/f/i/u;.a:(Ljava/lang/Throwable;Z)Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L21d0c0.  v5:= v3.`e.e.a.b.f.i.u.b` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L21d0c4.  call temp:= `poll`(v5) @signature `Ljava/lang/ref/ReferenceQueue;.poll:()Ljava/lang/ref/Reference;` @kind virtual;
  #L21d0ca.  v5:= temp @kind object;
  #L21d0cc.  if v5 == 0 then goto L21d0dc;
  #L21d0d0.  v0:= v3.`e.e.a.b.f.i.u.a` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L21d0d4.  call temp:= `remove`(v0, v5) @signature `Ljava/util/concurrent/ConcurrentHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L21d0da.  goto L21d0c0;
  #L21d0dc.  v5:= new `e.e.a.b.f.i.t`;
  #L21d0e0.  v0:= 0I;
  #L21d0e2.  call `<init>`(v5, v4, v0) @signature `Le/e/a/b/f/i/t;.<init>:(Ljava/lang/Throwable;Ljava/lang/ref/ReferenceQueue;)V` @kind direct;
  #L21d0e8.  v0:= v3.`e.e.a.b.f.i.u.a` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L21d0ec.  call temp:= `get`(v0, v5) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L21d0f2.  v5:= temp @kind object;
  #L21d0f4.  v5:= (`java.util.List`) v5 @kind object;
  #L21d0f8.  if v5 == 0 then goto L21d0fe;
  #L21d0fc.  return v5 @kind object;
  #L21d0fe.  v5:= new `java.util.Vector`;
  #L21d102.  v0:= 2I;
  #L21d104.  call `<init>`(v5, v0) @signature `Ljava/util/Vector;.<init>:(I)V` @kind direct;
  #L21d10a.  v0:= v3.`e.e.a.b.f.i.u.a` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L21d10e.  v1:= new `e.e.a.b.f.i.t`;
  #L21d112.  v2:= v3.`e.e.a.b.f.i.u.b` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L21d116.  call `<init>`(v1, v4, v2) @signature `Le/e/a/b/f/i/t;.<init>:(Ljava/lang/Throwable;Ljava/lang/ref/ReferenceQueue;)V` @kind direct;
  #L21d11c.  call temp:= `putIfAbsent`(v0, v1, v5) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L21d122.  v4:= temp @kind object;
  #L21d124.  v4:= (`java.util.List`) v4 @kind object;
  #L21d128.  if v4 != 0 then goto L21d12e;
  #L21d12c.  return v5 @kind object;
  #L21d12e.  return v4 @kind object;
}
