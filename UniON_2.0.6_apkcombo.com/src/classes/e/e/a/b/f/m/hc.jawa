record `e.e.a.b.f.m.hc` @kind class @AccessFlag FINAL {
}
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/m/hc;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L276e74.  v0:= constclass @type ^`e.e.a.b.f.m.hc` @kind object;
  #L276e78.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L276e7e.  v0:= temp @kind object;
  #L276e80.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L276e86.  v0:= new `e.e.a.b.f.m.gc`;
  #L276e8a.  v1:= 0I;
  #L276e8c.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/m/gc;.<init>:(Le/e/a/b/f/m/fc;)V` @kind direct;
  #L276e92.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.m.hc` v0 @kind this) @signature `Le/e/a/b/f/m/hc;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L276ea4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L276eaa.  return @kind void;
}
procedure `boolean` `a`(`java.lang.String` v0 @kind object) @signature `Le/e/a/b/f/m/hc;.a:(Ljava/lang/String;)Z` @AccessFlag STATIC {
    temp;

  #L276e48.  if v0 == 0 then goto L276e5e;
  #L276e4c.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L276e52.  v0:= temp;
  #L276e54.  if v0 == 0 then goto L276e5a;
  #L276e58.  goto L276e5e;
  #L276e5a.  v0:= 0I;
  #L276e5c.  return v0;
  #L276e5e.  v0:= 1I;
  #L276e60.  return v0;
}
