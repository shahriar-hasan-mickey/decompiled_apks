record `e.e.a.b.f.k.l1` @kind class @AccessFlag  extends `e.e.a.b.f.k.u1` @kind class {
  `java.util.Map` `e.e.a.b.f.k.l1.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`e.e.a.b.f.k.l1` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Le/e/a/b/f/k/l1;.<init>:(Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L246f38.  call `<init>`(v0) @signature `Le/e/a/b/f/k/u1;.<init>:()V` @kind direct;
  #L246f3e.  if v1 == 0 then goto L246f48;
  #L246f42.  v0.`e.e.a.b.f.k.l1.b` @type ^`java.util.Map` := v1 @kind object;
  #L246f46.  return @kind void;
  #L246f48.  v1:= 0I;
  #L246f4a.  throw v1;
}
procedure `boolean` `contains`(`e.e.a.b.f.k.l1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/k/l1;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L246ed8.  v0:= v1.`e.e.a.b.f.k.l1.b` @type ^`java.util.Map` @kind object;
  #L246edc.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L246ee2.  v2:= temp;
  #L246ee4.  return v2;
}
procedure `boolean` `isEmpty`(`e.e.a.b.f.k.l1` v1 @kind this) @signature `Le/e/a/b/f/k/l1;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L246ef8.  v0:= v1.`e.e.a.b.f.k.l1.b` @type ^`java.util.Map` @kind object;
  #L246efc.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L246f02.  v0:= temp;
  #L246f04.  return v0;
}
procedure `int` `size`(`e.e.a.b.f.k.l1` v1 @kind this) @signature `Le/e/a/b/f/k/l1;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L246f18.  v0:= v1.`e.e.a.b.f.k.l1.b` @type ^`java.util.Map` @kind object;
  #L246f1c.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L246f22.  v0:= temp;
  #L246f24.  return v0;
}
