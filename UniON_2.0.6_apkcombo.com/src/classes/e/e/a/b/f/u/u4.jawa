record `e.e.a.b.f.u.u4` @kind class @AccessFlag FINAL extends `e.e.a.b.f.u.e3` @kind class, `e.e.a.b.f.u.c5` @kind interface, `e.e.a.b.f.u.m6` @kind interface, `java.util.RandomAccess` @kind interface {
  `int`[] `e.e.a.b.f.u.u4.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.u.u4.d` @AccessFlag PRIVATE;
}
global `e.e.a.b.f.u.u4` `@@e.e.a.b.f.u.u4.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/u/u4;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L32e240.  v0:= new `e.e.a.b.f.u.u4`;
  #L32e244.  v1:= 0I;
  #L32e246.  v2:= new `int`[v1];
  #L32e24a.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/u/u4;.<init>:([II)V` @kind direct;
  #L32e250.  `@@e.e.a.b.f.u.u4.e` @type ^`e.e.a.b.f.u.u4` := v0 @kind object;
  #L32e254.  call `zzb`(v0) @signature `Le/e/a/b/f/u/e3;.zzb:()V` @kind virtual;
  #L32e25a.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.u.u4` v2 @kind this) @signature `Le/e/a/b/f/u/u4;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L32e26c.  v0:= 10I;
  #L32e270.  v0:= new `int`[v0];
  #L32e274.  v1:= 0I;
  #L32e276.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/u/u4;.<init>:([II)V` @kind direct;
  #L32e27c.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.u.u4` v0 @kind this, `int`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/u/u4;.<init>:([II)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L32e290.  call `<init>`(v0) @signature `Le/e/a/b/f/u/e3;.<init>:()V` @kind direct;
  #L32e296.  v0.`e.e.a.b.f.u.u4.c` @type ^`int`[] := v1 @kind object;
  #L32e29a.  v0.`e.e.a.b.f.u.u4.d` @type ^`int` := v2;
  #L32e29e.  return @kind void;
}
procedure `e.e.a.b.f.u.u4` `c`() @signature `Le/e/a/b/f/u/u4;.c:()Le/e/a/b/f/u/u4;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L32e01c.  v0:= `@@e.e.a.b.f.u.u4.e` @type ^`e.e.a.b.f.u.u4` @kind object;
  #L32e020.  return v0 @kind object;
}
procedure `java.lang.String` `c`(`e.e.a.b.f.u.u4` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/u/u4;.c:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L32e1f4.  v0:= v3.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32e1f8.  v1:= new `java.lang.StringBuilder`;
  #L32e1fc.  v2:= 35I;
  #L32e200.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L32e206.  v2:= "Index:" @kind object;
  #L32e20a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32e210.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32e216.  v4:= ", Size:" @kind object;
  #L32e21a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32e220.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32e226.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32e22c.  v4:= temp @kind object;
  #L32e22e.  return v4 @kind object;
}
procedure `void` `i`(`e.e.a.b.f.u.u4` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/u/u4;.i:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L32e408.  if v2 < 0 then goto L32e416;
  #L32e40c.  v0:= v1.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32e410.  if v2 >= v0 then goto L32e416;
  #L32e414.  return @kind void;
  #L32e416.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L32e41a.  call temp:= `c`(v1, v2) @signature `Le/e/a/b/f/u/u4;.c:(I)Ljava/lang/String;` @kind direct;
  #L32e420.  v2:= temp @kind object;
  #L32e422.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32e428.  throw v0;
}
procedure `e.e.a.b.f.u.c5` `a`(`e.e.a.b.f.u.u4` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/u/u4;.a:(I)Le/e/a/b/f/u/c5;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L32e034.  v0:= v2.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32e038.  if v3 < v0 then goto L32e058;
  #L32e03c.  v0:= new `e.e.a.b.f.u.u4`;
  #L32e040.  v1:= v2.`e.e.a.b.f.u.u4.c` @type ^`int`[] @kind object;
  #L32e044.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L32e04a.  v3:= temp @kind object;
  #L32e04c.  v1:= v2.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32e050.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/u/u4;.<init>:([II)V` @kind direct;
  #L32e056.  return v0 @kind object;
  #L32e058.  v3:= new `java.lang.IllegalArgumentException`;
  #L32e05c.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L32e062.  throw v3;
}
procedure `void` `add`(`e.e.a.b.f.u.u4` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/u/u4;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32e2b0.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L32e2b4.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L32e2ba.  v6:= temp;
  #L32e2bc.  call `d`(v4) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32e2c2.  if v5 < 0 then goto L32e338;
  #L32e2c6.  v0:= v4.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32e2ca.  if v5 > v0 then goto L32e338;
  #L32e2ce.  v1:= v4.`e.e.a.b.f.u.u4.c` @type ^`int`[] @kind object;
  #L32e2d2.  v2:= length @variable v1;
  #L32e2d4.  if v0 >= v2 then goto L32e2e6;
  #L32e2d8.  v2:= v5 + 1;
  #L32e2dc.  v0:= v0 - v5 @kind int;
  #L32e2de.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32e2e4.  goto L32e316;
  #L32e2e6.  v0:= v0 * 3;
  #L32e2ea.  v0:= v0 / 2;
  #L32e2ee.  v0:= v0 + 1;
  #L32e2f2.  v0:= new `int`[v0];
  #L32e2f6.  v2:= 0I;
  #L32e2f8.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32e2fe.  v1:= v4.`e.e.a.b.f.u.u4.c` @type ^`int`[] @kind object;
  #L32e302.  v2:= v5 + 1;
  #L32e306.  v3:= v4.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32e30a.  v3:= v3 - v5 @kind int;
  #L32e30c.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32e312.  v4.`e.e.a.b.f.u.u4.c` @type ^`int`[] := v0 @kind object;
  #L32e316.  v0:= v4.`e.e.a.b.f.u.u4.c` @type ^`int`[] @kind object;
  #L32e31a.  v0[v5]:= v6;
  #L32e31e.  v5:= v4.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32e322.  v5:= v5 + 1;
  #L32e326.  v4.`e.e.a.b.f.u.u4.d` @type ^`int` := v5;
  #L32e32a.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L32e32e.  v5:= v5 + 1;
  #L32e332.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L32e336.  return @kind void;
  #L32e338.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L32e33c.  call temp:= `c`(v4, v5) @signature `Le/e/a/b/f/u/u4;.c:(I)Ljava/lang/String;` @kind direct;
  #L32e342.  v5:= temp @kind object;
  #L32e344.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32e34a.  throw v6;
}
procedure `boolean` `add`(`e.e.a.b.f.u.u4` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/u/u4;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L32dec8.  v1:= (`java.lang.Integer`) v1 @kind object;
  #L32decc.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L32ded2.  v1:= temp;
  #L32ded4.  call `h`(v0, v1) @signature `Le/e/a/b/f/u/u4;.h:(I)V` @kind virtual;
  #L32deda.  v1:= 1I;
  #L32dedc.  return v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.u.u4` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/u/u4;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32def0.  call `d`(v5) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32def6.  call temp:= `a`(v6) @signature `Le/e/a/b/f/u/w4;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L32defc.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.u.u4` @kind boolean;
  #L32df00.  if v0 != 0 then goto L32df0e;
  #L32df04.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/u/e3;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L32df0a.  v6:= temp;
  #L32df0c.  return v6;
  #L32df0e.  v6:= (`e.e.a.b.f.u.u4`) v6 @kind object;
  #L32df12.  v0:= v6.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32df16.  v1:= 0I;
  #L32df18.  if v0 != 0 then goto L32df1e;
  #L32df1c.  return v1;
  #L32df1e.  v2:= 2147483647I;
  #L32df24.  v3:= v5.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32df28.  v2:= v2 - v3 @kind int;
  #L32df2a.  if v2 < v0 then goto L32df6e;
  #L32df2e.  v3:= v3 + v0 @kind int;
  #L32df30.  v0:= v5.`e.e.a.b.f.u.u4.c` @type ^`int`[] @kind object;
  #L32df34.  v2:= length @variable v0;
  #L32df36.  if v3 <= v2 then goto L32df46;
  #L32df3a.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L32df40.  v0:= temp @kind object;
  #L32df42.  v5.`e.e.a.b.f.u.u4.c` @type ^`int`[] := v0 @kind object;
  #L32df46.  v0:= v6.`e.e.a.b.f.u.u4.c` @type ^`int`[] @kind object;
  #L32df4a.  v2:= v5.`e.e.a.b.f.u.u4.c` @type ^`int`[] @kind object;
  #L32df4e.  v4:= v5.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32df52.  v6:= v6.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32df56.  call `arraycopy`(v0, v1, v2, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32df5c.  v5.`e.e.a.b.f.u.u4.d` @type ^`int` := v3;
  #L32df60.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L32df64.  v0:= 1I;
  #L32df66.  v6:= v6 + v0 @kind int;
  #L32df68.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L32df6c.  return v0;
  #L32df6e.  v6:= new `java.lang.OutOfMemoryError`;
  #L32df72.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L32df78.  throw v6;
}
procedure `int` `b`(`e.e.a.b.f.u.u4` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/u/u4;.b:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L32e10c.  call `i`(v1, v2) @signature `Le/e/a/b/f/u/u4;.i:(I)V` @kind direct;
  #L32e112.  v0:= v1.`e.e.a.b.f.u.u4.c` @type ^`int`[] @kind object;
  #L32e116.  v2:= v0[v2];
  #L32e11a.  return v2;
}
procedure `boolean` `contains`(`e.e.a.b.f.u.u4` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/u/u4;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L32df8c.  call temp:= `indexOf`(v1, v2) @signature `Le/e/a/b/f/u/u4;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L32df92.  v2:= temp;
  #L32df94.  v0:= -1I;
  #L32df96.  if v2 == v0 then goto L32df9e;
  #L32df9a.  v2:= 1I;
  #L32df9c.  return v2;
  #L32df9e.  v2:= 0I;
  #L32dfa0.  return v2;
}
procedure `boolean` `equals`(`e.e.a.b.f.u.u4` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/u/u4;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32dfb4.  v0:= 1I;
  #L32dfb6.  if v5 != v6 then goto L32dfbc;
  #L32dfba.  return v0;
  #L32dfbc.  v1:= instanceof @variable v6 @type ^`e.e.a.b.f.u.u4` @kind boolean;
  #L32dfc0.  if v1 != 0 then goto L32dfce;
  #L32dfc4.  call temp:= `equals`(v5, v6) @signature `Le/e/a/b/f/u/e3;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L32dfca.  v6:= temp;
  #L32dfcc.  return v6;
  #L32dfce.  v6:= (`e.e.a.b.f.u.u4`) v6 @kind object;
  #L32dfd2.  v1:= v5.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32dfd6.  v2:= v6.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32dfda.  v3:= 0I;
  #L32dfdc.  if v1 == v2 then goto L32dfe2;
  #L32dfe0.  return v3;
  #L32dfe2.  v6:= v6.`e.e.a.b.f.u.u4.c` @type ^`int`[] @kind object;
  #L32dfe6.  v1:= 0I;
  #L32dfe8.  v2:= v5.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32dfec.  if v1 >= v2 then goto L32e008;
  #L32dff0.  v2:= v5.`e.e.a.b.f.u.u4.c` @type ^`int`[] @kind object;
  #L32dff4.  v2:= v2[v1];
  #L32dff8.  v4:= v6[v1];
  #L32dffc.  if v2 == v4 then goto L32e002;
  #L32e000.  return v3;
  #L32e002.  v1:= v1 + 1;
  #L32e006.  goto L32dfe8;
  #L32e008.  return v0;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.u.u4` v0 @kind this, `int` v1 ) @signature `Le/e/a/b/f/u/u4;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L32e12c.  call temp:= `b`(v0, v1) @signature `Le/e/a/b/f/u/u4;.b:(I)I` @kind virtual;
  #L32e132.  v1:= temp;
  #L32e134.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L32e13a.  v1:= temp @kind object;
  #L32e13c.  return v1 @kind object;
}
procedure `void` `h`(`e.e.a.b.f.u.u4` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/u/u4;.h:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32e3b0.  call `d`(v4) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32e3b6.  v0:= v4.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32e3ba.  v1:= v4.`e.e.a.b.f.u.u4.c` @type ^`int`[] @kind object;
  #L32e3be.  v2:= length @variable v1;
  #L32e3c0.  if v0 != v2 then goto L32e3e0;
  #L32e3c4.  v2:= v0 * 3;
  #L32e3c8.  v2:= v2 / 2;
  #L32e3cc.  v2:= v2 + 1;
  #L32e3d0.  v2:= new `int`[v2];
  #L32e3d4.  v3:= 0I;
  #L32e3d6.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32e3dc.  v4.`e.e.a.b.f.u.u4.c` @type ^`int`[] := v2 @kind object;
  #L32e3e0.  v0:= v4.`e.e.a.b.f.u.u4.c` @type ^`int`[] @kind object;
  #L32e3e4.  v1:= v4.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32e3e8.  v2:= v1 + 1;
  #L32e3ec.  v4.`e.e.a.b.f.u.u4.d` @type ^`int` := v2;
  #L32e3f0.  v0[v1]:= v5;
  #L32e3f4.  return @kind void;
}
procedure `int` `hashCode`(`e.e.a.b.f.u.u4` v3 @kind this) @signature `Le/e/a/b/f/u/u4;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L32e074.  v0:= 1I;
  #L32e076.  v1:= 0I;
  #L32e078.  v2:= v3.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32e07c.  if v1 >= v2 then goto L32e094;
  #L32e080.  v0:= v0 * 31;
  #L32e084.  v2:= v3.`e.e.a.b.f.u.u4.c` @type ^`int`[] @kind object;
  #L32e088.  v2:= v2[v1];
  #L32e08c.  v0:= v0 + v2 @kind int;
  #L32e08e.  v1:= v1 + 1;
  #L32e092.  goto L32e078;
  #L32e094.  return v0;
}
procedure `int` `indexOf`(`e.e.a.b.f.u.u4` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/u/u4;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32e0a8.  v0:= instanceof @variable v5 @type ^`java.lang.Integer` @kind boolean;
  #L32e0ac.  v1:= -1I;
  #L32e0ae.  if v0 != 0 then goto L32e0b4;
  #L32e0b2.  return v1;
  #L32e0b4.  v5:= (`java.lang.Integer`) v5 @kind object;
  #L32e0b8.  call temp:= `intValue`(v5) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L32e0be.  v5:= temp;
  #L32e0c0.  call temp:= `size`(v4) @signature `Le/e/a/b/f/u/u4;.size:()I` @kind virtual;
  #L32e0c6.  v0:= temp;
  #L32e0c8.  v2:= 0I;
  #L32e0ca.  if v2 >= v0 then goto L32e0e2;
  #L32e0ce.  v3:= v4.`e.e.a.b.f.u.u4.c` @type ^`int`[] @kind object;
  #L32e0d2.  v3:= v3[v2];
  #L32e0d6.  if v3 != v5 then goto L32e0dc;
  #L32e0da.  return v2;
  #L32e0dc.  v2:= v2 + 1;
  #L32e0e0.  goto L32e0ca;
  #L32e0e2.  return v1;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.u.u4` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/u/u4;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32e150.  call `d`(v4) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32e156.  call `i`(v4, v5) @signature `Le/e/a/b/f/u/u4;.i:(I)V` @kind direct;
  #L32e15c.  v0:= v4.`e.e.a.b.f.u.u4.c` @type ^`int`[] @kind object;
  #L32e160.  v1:= v0[v5];
  #L32e164.  v2:= v4.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32e168.  v3:= v2 + -1;
  #L32e16c.  if v5 >= v3 then goto L32e180;
  #L32e170.  v3:= v5 + 1;
  #L32e174.  v2:= v2 - v5 @kind int;
  #L32e176.  v2:= v2 + -1;
  #L32e17a.  call `arraycopy`(v0, v3, v0, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32e180.  v5:= v4.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32e184.  v5:= v5 + -1;
  #L32e188.  v4.`e.e.a.b.f.u.u4.d` @type ^`int` := v5;
  #L32e18c.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L32e190.  v5:= v5 + 1;
  #L32e194.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L32e198.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L32e19e.  v5:= temp @kind object;
  #L32e1a0.  return v5 @kind object;
}
procedure `void` `removeRange`(`e.e.a.b.f.u.u4` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/u/u4;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L32e35c.  call `d`(v2) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32e362.  if v4 < v3 then goto L32e390;
  #L32e366.  v0:= v2.`e.e.a.b.f.u.u4.c` @type ^`int`[] @kind object;
  #L32e36a.  v1:= v2.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32e36e.  v1:= v1 - v4 @kind int;
  #L32e370.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32e376.  v0:= v2.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32e37a.  v4:= v4 - v3 @kind int;
  #L32e37c.  v0:= v0 - v4 @kind int;
  #L32e37e.  v2.`e.e.a.b.f.u.u4.d` @type ^`int` := v0;
  #L32e382.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L32e386.  v3:= v3 + 1;
  #L32e38a.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L32e38e.  return @kind void;
  #L32e390.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L32e394.  v4:= "toIndex < fromIndex" @kind object;
  #L32e398.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32e39e.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.u.u4` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/u/u4;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L32e1b4.  v4:= (`java.lang.Integer`) v4 @kind object;
  #L32e1b8.  call temp:= `intValue`(v4) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L32e1be.  v4:= temp;
  #L32e1c0.  call `d`(v2) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32e1c6.  call `i`(v2, v3) @signature `Le/e/a/b/f/u/u4;.i:(I)V` @kind direct;
  #L32e1cc.  v0:= v2.`e.e.a.b.f.u.u4.c` @type ^`int`[] @kind object;
  #L32e1d0.  v1:= v0[v3];
  #L32e1d4.  v0[v3]:= v4;
  #L32e1d8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L32e1de.  v3:= temp @kind object;
  #L32e1e0.  return v3 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.u.u4` v1 @kind this) @signature `Le/e/a/b/f/u/u4;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L32e0f4.  v0:= v1.`e.e.a.b.f.u.u4.d` @type ^`int`;
  #L32e0f8.  return v0;
}
