record `e.e.a.b.f.o.g` @kind class @AccessFlag FINAL extends `java.util.AbstractCollection` @kind class {
  `e.e.a.b.f.o.h` `e.e.a.b.f.o.g.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.o.g` v0 @kind this, `e.e.a.b.f.o.h` v1 @kind object) @signature `Le/e/a/b/f/o/g;.<init>:(Le/e/a/b/f/o/h;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2bf1fc.  v0.`e.e.a.b.f.o.g.b` @type ^`e.e.a.b.f.o.h` := v1 @kind object;
  #L2bf200.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L2bf206.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.o.g` v1 @kind this) @signature `Le/e/a/b/f/o/g;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bf218.  v0:= v1.`e.e.a.b.f.o.g.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bf21c.  call `clear`(v0) @signature `Le/e/a/b/f/o/h;.clear:()V` @kind virtual;
  #L2bf222.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.o.g` v2 @kind this) @signature `Le/e/a/b/f/o/g;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2bf1bc.  v0:= v2.`e.e.a.b.f.o.g.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bf1c0.  call temp:= `b`(v0) @signature `Le/e/a/b/f/o/h;.b:()Ljava/util/Map;` @kind virtual;
  #L2bf1c6.  v1:= temp @kind object;
  #L2bf1c8.  if v1 == 0 then goto L2bf1de;
  #L2bf1cc.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L2bf1d2.  v0:= temp @kind object;
  #L2bf1d4.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2bf1da.  v0:= temp @kind object;
  #L2bf1dc.  goto L2bf1ea;
  #L2bf1de.  v1:= new `e.e.a.b.f.o.b`;
  #L2bf1e2.  call `<init>`(v1, v0) @signature `Le/e/a/b/f/o/b;.<init>:(Le/e/a/b/f/o/h;)V` @kind direct;
  #L2bf1e8.  v0:= v1 @kind object;
  #L2bf1ea.  return v0 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.o.g` v1 @kind this) @signature `Le/e/a/b/f/o/g;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bf19c.  v0:= v1.`e.e.a.b.f.o.g.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bf1a0.  call temp:= `size`(v0) @signature `Le/e/a/b/f/o/h;.size:()I` @kind virtual;
  #L2bf1a6.  v0:= temp;
  #L2bf1a8.  return v0;
}
