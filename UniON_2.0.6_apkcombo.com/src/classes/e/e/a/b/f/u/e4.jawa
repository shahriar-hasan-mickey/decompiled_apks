record `e.e.a.b.f.u.e4` @kind class @AccessFlag FINAL extends `e.e.a.b.f.u.e3` @kind class, `e.e.a.b.f.u.c5` @kind interface, `e.e.a.b.f.u.m6` @kind interface, `java.util.RandomAccess` @kind interface {
  `double`[] `e.e.a.b.f.u.e4.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.u.e4.d` @AccessFlag PRIVATE;
}
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/u/e4;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L329e30.  v0:= new `e.e.a.b.f.u.e4`;
  #L329e34.  v1:= 0I;
  #L329e36.  v2:= new `double`[v1];
  #L329e3a.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/u/e4;.<init>:([DI)V` @kind direct;
  #L329e40.  call `zzb`(v0) @signature `Le/e/a/b/f/u/e3;.zzb:()V` @kind virtual;
  #L329e46.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.u.e4` v2 @kind this) @signature `Le/e/a/b/f/u/e4;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L329e58.  v0:= 10I;
  #L329e5c.  v0:= new `double`[v0];
  #L329e60.  v1:= 0I;
  #L329e62.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/u/e4;.<init>:([DI)V` @kind direct;
  #L329e68.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.u.e4` v0 @kind this, `double`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/u/e4;.<init>:([DI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L329e7c.  call `<init>`(v0) @signature `Le/e/a/b/f/u/e3;.<init>:()V` @kind direct;
  #L329e82.  v0.`e.e.a.b.f.u.e4.c` @type ^`double`[] := v1 @kind object;
  #L329e86.  v0.`e.e.a.b.f.u.e4.d` @type ^`int` := v2;
  #L329e8a.  return @kind void;
}
procedure `void` `b`(`e.e.a.b.f.u.e4` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/u/e4;.b:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L329ff4.  if v2 < 0 then goto L32a002;
  #L329ff8.  v0:= v1.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329ffc.  if v2 >= v0 then goto L32a002;
  #L32a000.  return @kind void;
  #L32a002.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L32a006.  call temp:= `h`(v1, v2) @signature `Le/e/a/b/f/u/e4;.h:(I)Ljava/lang/String;` @kind direct;
  #L32a00c.  v2:= temp @kind object;
  #L32a00e.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32a014.  throw v0;
}
procedure `java.lang.String` `h`(`e.e.a.b.f.u.e4` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/u/e4;.h:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L329de4.  v0:= v3.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329de8.  v1:= new `java.lang.StringBuilder`;
  #L329dec.  v2:= 35I;
  #L329df0.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L329df6.  v2:= "Index:" @kind object;
  #L329dfa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L329e00.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L329e06.  v4:= ", Size:" @kind object;
  #L329e0a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L329e10.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L329e16.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L329e1c.  v4:= temp @kind object;
  #L329e1e.  return v4 @kind object;
}
procedure `e.e.a.b.f.u.c5` `a`(`e.e.a.b.f.u.e4` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/u/e4;.a:(I)Le/e/a/b/f/u/c5;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L329c2c.  v0:= v2.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329c30.  if v3 < v0 then goto L329c50;
  #L329c34.  v0:= new `e.e.a.b.f.u.e4`;
  #L329c38.  v1:= v2.`e.e.a.b.f.u.e4.c` @type ^`double`[] @kind object;
  #L329c3c.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([DI)[D` @kind static;
  #L329c42.  v3:= temp @kind object;
  #L329c44.  v1:= v2.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329c48.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/u/e4;.<init>:([DI)V` @kind direct;
  #L329c4e.  return v0 @kind object;
  #L329c50.  v3:= new `java.lang.IllegalArgumentException`;
  #L329c54.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L329c5a.  throw v3;
}
procedure `void` `a`(`e.e.a.b.f.u.e4` v4 @kind this, `double` v5 ) @signature `Le/e/a/b/f/u/e4;.a:(D)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L329f9c.  call `d`(v4) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L329fa2.  v0:= v4.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329fa6.  v1:= v4.`e.e.a.b.f.u.e4.c` @type ^`double`[] @kind object;
  #L329faa.  v2:= length @variable v1;
  #L329fac.  if v0 != v2 then goto L329fcc;
  #L329fb0.  v2:= v0 * 3;
  #L329fb4.  v2:= v2 / 2;
  #L329fb8.  v2:= v2 + 1;
  #L329fbc.  v2:= new `double`[v2];
  #L329fc0.  v3:= 0I;
  #L329fc2.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L329fc8.  v4.`e.e.a.b.f.u.e4.c` @type ^`double`[] := v2 @kind object;
  #L329fcc.  v0:= v4.`e.e.a.b.f.u.e4.c` @type ^`double`[] @kind object;
  #L329fd0.  v1:= v4.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329fd4.  v2:= v1 + 1;
  #L329fd8.  v4.`e.e.a.b.f.u.e4.d` @type ^`int` := v2;
  #L329fdc.  v0[v1]:= v5 @kind wide;
  #L329fe0.  return @kind void;
}
procedure `void` `add`(`e.e.a.b.f.u.e4` v5 @kind this, `int` v6 , `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/u/e4;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L329e9c.  v7:= (`java.lang.Double`) v7 @kind object;
  #L329ea0.  call temp:= `doubleValue`(v7) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L329ea6.  v0:= temp @kind wide;
  #L329ea8.  call `d`(v5) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L329eae.  if v6 < 0 then goto L329f24;
  #L329eb2.  v7:= v5.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329eb6.  if v6 > v7 then goto L329f24;
  #L329eba.  v2:= v5.`e.e.a.b.f.u.e4.c` @type ^`double`[] @kind object;
  #L329ebe.  v3:= length @variable v2;
  #L329ec0.  if v7 >= v3 then goto L329ed2;
  #L329ec4.  v3:= v6 + 1;
  #L329ec8.  v7:= v7 - v6 @kind int;
  #L329eca.  call `arraycopy`(v2, v6, v2, v3, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L329ed0.  goto L329f02;
  #L329ed2.  v7:= v7 * 3;
  #L329ed6.  v7:= v7 / 2;
  #L329eda.  v7:= v7 + 1;
  #L329ede.  v7:= new `double`[v7];
  #L329ee2.  v3:= 0I;
  #L329ee4.  call `arraycopy`(v2, v3, v7, v3, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L329eea.  v2:= v5.`e.e.a.b.f.u.e4.c` @type ^`double`[] @kind object;
  #L329eee.  v3:= v6 + 1;
  #L329ef2.  v4:= v5.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329ef6.  v4:= v4 - v6 @kind int;
  #L329ef8.  call `arraycopy`(v2, v6, v7, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L329efe.  v5.`e.e.a.b.f.u.e4.c` @type ^`double`[] := v7 @kind object;
  #L329f02.  v7:= v5.`e.e.a.b.f.u.e4.c` @type ^`double`[] @kind object;
  #L329f06.  v7[v6]:= v0 @kind wide;
  #L329f0a.  v6:= v5.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329f0e.  v6:= v6 + 1;
  #L329f12.  v5.`e.e.a.b.f.u.e4.d` @type ^`int` := v6;
  #L329f16.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L329f1a.  v6:= v6 + 1;
  #L329f1e.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L329f22.  return @kind void;
  #L329f24.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L329f28.  call temp:= `h`(v5, v6) @signature `Le/e/a/b/f/u/e4;.h:(I)Ljava/lang/String;` @kind direct;
  #L329f2e.  v6:= temp @kind object;
  #L329f30.  call `<init>`(v7, v6) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L329f36.  throw v7;
}
procedure `boolean` `add`(`e.e.a.b.f.u.e4` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/u/e4;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L329ac4.  v3:= (`java.lang.Double`) v3 @kind object;
  #L329ac8.  call temp:= `doubleValue`(v3) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L329ace.  v0:= temp @kind wide;
  #L329ad0.  call `a`(v2, v0) @signature `Le/e/a/b/f/u/e4;.a:(D)V` @kind virtual;
  #L329ad6.  v3:= 1I;
  #L329ad8.  return v3;
}
procedure `boolean` `addAll`(`e.e.a.b.f.u.e4` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/u/e4;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L329aec.  call `d`(v5) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L329af2.  call temp:= `a`(v6) @signature `Le/e/a/b/f/u/w4;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L329af8.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.u.e4` @kind boolean;
  #L329afc.  if v0 != 0 then goto L329b0a;
  #L329b00.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/u/e3;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L329b06.  v6:= temp;
  #L329b08.  return v6;
  #L329b0a.  v6:= (`e.e.a.b.f.u.e4`) v6 @kind object;
  #L329b0e.  v0:= v6.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329b12.  v1:= 0I;
  #L329b14.  if v0 != 0 then goto L329b1a;
  #L329b18.  return v1;
  #L329b1a.  v2:= 2147483647I;
  #L329b20.  v3:= v5.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329b24.  v2:= v2 - v3 @kind int;
  #L329b26.  if v2 < v0 then goto L329b6a;
  #L329b2a.  v3:= v3 + v0 @kind int;
  #L329b2c.  v0:= v5.`e.e.a.b.f.u.e4.c` @type ^`double`[] @kind object;
  #L329b30.  v2:= length @variable v0;
  #L329b32.  if v3 <= v2 then goto L329b42;
  #L329b36.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([DI)[D` @kind static;
  #L329b3c.  v0:= temp @kind object;
  #L329b3e.  v5.`e.e.a.b.f.u.e4.c` @type ^`double`[] := v0 @kind object;
  #L329b42.  v0:= v6.`e.e.a.b.f.u.e4.c` @type ^`double`[] @kind object;
  #L329b46.  v2:= v5.`e.e.a.b.f.u.e4.c` @type ^`double`[] @kind object;
  #L329b4a.  v4:= v5.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329b4e.  v6:= v6.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329b52.  call `arraycopy`(v0, v1, v2, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L329b58.  v5.`e.e.a.b.f.u.e4.d` @type ^`int` := v3;
  #L329b5c.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L329b60.  v0:= 1I;
  #L329b62.  v6:= v6 + v0 @kind int;
  #L329b64.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L329b68.  return v0;
  #L329b6a.  v6:= new `java.lang.OutOfMemoryError`;
  #L329b6e.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L329b74.  throw v6;
}
procedure `boolean` `contains`(`e.e.a.b.f.u.e4` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/u/e4;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L329b88.  call temp:= `indexOf`(v1, v2) @signature `Le/e/a/b/f/u/e4;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L329b8e.  v2:= temp;
  #L329b90.  v0:= -1I;
  #L329b92.  if v2 == v0 then goto L329b9a;
  #L329b96.  v2:= 1I;
  #L329b98.  return v2;
  #L329b9a.  v2:= 0I;
  #L329b9c.  return v2;
}
procedure `boolean` `equals`(`e.e.a.b.f.u.e4` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Le/e/a/b/f/u/e4;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L329bb0.  v0:= 1I;
  #L329bb2.  if v8 != v9 then goto L329bb8;
  #L329bb6.  return v0;
  #L329bb8.  v1:= instanceof @variable v9 @type ^`e.e.a.b.f.u.e4` @kind boolean;
  #L329bbc.  if v1 != 0 then goto L329bca;
  #L329bc0.  call temp:= `equals`(v8, v9) @signature `Le/e/a/b/f/u/e3;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L329bc6.  v9:= temp;
  #L329bc8.  return v9;
  #L329bca.  v9:= (`e.e.a.b.f.u.e4`) v9 @kind object;
  #L329bce.  v1:= v8.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329bd2.  v2:= v9.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329bd6.  v3:= 0I;
  #L329bd8.  if v1 == v2 then goto L329bde;
  #L329bdc.  return v3;
  #L329bde.  v9:= v9.`e.e.a.b.f.u.e4.c` @type ^`double`[] @kind object;
  #L329be2.  v1:= 0I;
  #L329be4.  v2:= v8.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329be8.  if v1 >= v2 then goto L329c18;
  #L329bec.  v2:= v8.`e.e.a.b.f.u.e4.c` @type ^`double`[] @kind object;
  #L329bf0.  v4:= v2[v1] @kind wide;
  #L329bf4.  call temp:= `doubleToLongBits`(v4) @signature `Ljava/lang/Double;.doubleToLongBits:(D)J` @kind static;
  #L329bfa.  v4:= temp @kind wide;
  #L329bfc.  v6:= v9[v1] @kind wide;
  #L329c00.  call temp:= `doubleToLongBits`(v6) @signature `Ljava/lang/Double;.doubleToLongBits:(D)J` @kind static;
  #L329c06.  v6:= temp @kind wide;
  #L329c08.  v2:= lcmp(v4, v6);
  #L329c0c.  if v2 == 0 then goto L329c12;
  #L329c10.  return v3;
  #L329c12.  v1:= v1 + 1;
  #L329c16.  goto L329be4;
  #L329c18.  return v0;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.u.e4` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/u/e4;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L329d18.  call `b`(v3, v4) @signature `Le/e/a/b/f/u/e4;.b:(I)V` @kind direct;
  #L329d1e.  v0:= v3.`e.e.a.b.f.u.e4.c` @type ^`double`[] @kind object;
  #L329d22.  v1:= v0[v4] @kind wide;
  #L329d26.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L329d2c.  v4:= temp @kind object;
  #L329d2e.  return v4 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.u.e4` v5 @kind this) @signature `Le/e/a/b/f/u/e4;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L329c6c.  v0:= 1I;
  #L329c6e.  v1:= 0I;
  #L329c70.  v2:= v5.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329c74.  if v1 >= v2 then goto L329c9c;
  #L329c78.  v2:= v5.`e.e.a.b.f.u.e4.c` @type ^`double`[] @kind object;
  #L329c7c.  v3:= v2[v1] @kind wide;
  #L329c80.  call temp:= `doubleToLongBits`(v3) @signature `Ljava/lang/Double;.doubleToLongBits:(D)J` @kind static;
  #L329c86.  v2:= temp @kind wide;
  #L329c88.  v0:= v0 * 31;
  #L329c8c.  call temp:= `a`(v2) @signature `Le/e/a/b/f/u/w4;.a:(J)I` @kind static;
  #L329c92.  v2:= temp;
  #L329c94.  v0:= v0 + v2 @kind int;
  #L329c96.  v1:= v1 + 1;
  #L329c9a.  goto L329c70;
  #L329c9c.  return v0;
}
procedure `int` `indexOf`(`e.e.a.b.f.u.e4` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Le/e/a/b/f/u/e4;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L329cb0.  v0:= instanceof @variable v8 @type ^`java.lang.Double` @kind boolean;
  #L329cb4.  v1:= -1I;
  #L329cb6.  if v0 != 0 then goto L329cbc;
  #L329cba.  return v1;
  #L329cbc.  v8:= (`java.lang.Double`) v8 @kind object;
  #L329cc0.  call temp:= `doubleValue`(v8) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L329cc6.  v2:= temp @kind wide;
  #L329cc8.  call temp:= `size`(v7) @signature `Le/e/a/b/f/u/e4;.size:()I` @kind virtual;
  #L329cce.  v8:= temp;
  #L329cd0.  v0:= 0I;
  #L329cd2.  if v0 >= v8 then goto L329cee;
  #L329cd6.  v4:= v7.`e.e.a.b.f.u.e4.c` @type ^`double`[] @kind object;
  #L329cda.  v5:= v4[v0] @kind wide;
  #L329cde.  v4:= dcmpl(v5, v2);
  #L329ce2.  if v4 != 0 then goto L329ce8;
  #L329ce6.  return v0;
  #L329ce8.  v0:= v0 + 1;
  #L329cec.  goto L329cd2;
  #L329cee.  return v1;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.u.e4` v5 @kind this, `int` v6 ) @signature `Le/e/a/b/f/u/e4;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L329d40.  call `d`(v5) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L329d46.  call `b`(v5, v6) @signature `Le/e/a/b/f/u/e4;.b:(I)V` @kind direct;
  #L329d4c.  v0:= v5.`e.e.a.b.f.u.e4.c` @type ^`double`[] @kind object;
  #L329d50.  v1:= v0[v6] @kind wide;
  #L329d54.  v3:= v5.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329d58.  v4:= v3 + -1;
  #L329d5c.  if v6 >= v4 then goto L329d70;
  #L329d60.  v4:= v6 + 1;
  #L329d64.  v3:= v3 - v6 @kind int;
  #L329d66.  v3:= v3 + -1;
  #L329d6a.  call `arraycopy`(v0, v4, v0, v6, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L329d70.  v6:= v5.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329d74.  v6:= v6 + -1;
  #L329d78.  v5.`e.e.a.b.f.u.e4.d` @type ^`int` := v6;
  #L329d7c.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L329d80.  v6:= v6 + 1;
  #L329d84.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L329d88.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L329d8e.  v6:= temp @kind object;
  #L329d90.  return v6 @kind object;
}
procedure `void` `removeRange`(`e.e.a.b.f.u.e4` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/u/e4;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L329f48.  call `d`(v2) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L329f4e.  if v4 < v3 then goto L329f7c;
  #L329f52.  v0:= v2.`e.e.a.b.f.u.e4.c` @type ^`double`[] @kind object;
  #L329f56.  v1:= v2.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329f5a.  v1:= v1 - v4 @kind int;
  #L329f5c.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L329f62.  v0:= v2.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329f66.  v4:= v4 - v3 @kind int;
  #L329f68.  v0:= v0 - v4 @kind int;
  #L329f6a.  v2.`e.e.a.b.f.u.e4.d` @type ^`int` := v0;
  #L329f6e.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L329f72.  v3:= v3 + 1;
  #L329f76.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L329f7a.  return @kind void;
  #L329f7c.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L329f80.  v4:= "toIndex < fromIndex" @kind object;
  #L329f84.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L329f8a.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.u.e4` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/u/e4;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L329da4.  v6:= (`java.lang.Double`) v6 @kind object;
  #L329da8.  call temp:= `doubleValue`(v6) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L329dae.  v0:= temp @kind wide;
  #L329db0.  call `d`(v4) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L329db6.  call `b`(v4, v5) @signature `Le/e/a/b/f/u/e4;.b:(I)V` @kind direct;
  #L329dbc.  v6:= v4.`e.e.a.b.f.u.e4.c` @type ^`double`[] @kind object;
  #L329dc0.  v2:= v6[v5] @kind wide;
  #L329dc4.  v6[v5]:= v0 @kind wide;
  #L329dc8.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L329dce.  v5:= temp @kind object;
  #L329dd0.  return v5 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.u.e4` v1 @kind this) @signature `Le/e/a/b/f/u/e4;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L329d00.  v0:= v1.`e.e.a.b.f.u.e4.d` @type ^`int`;
  #L329d04.  return v0;
}
