record `e.e.a.b.f.o.i` @kind class @AccessFlag FINAL {
}
procedure `int` `a`(`java.lang.Object` v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/o/i;.a:(Ljava/lang/Object;I)I` @AccessFlag STATIC {
    temp;
    v0;

  #L2bfba4.  v0:= instanceof @variable v1 @type ^`byte`[] @kind boolean;
  #L2bfba8.  if v0 == 0 then goto L2bfbba;
  #L2bfbac.  v1:= (`byte`[]) v1 @kind object;
  #L2bfbb0.  v1:= v1[v2] @kind byte;
  #L2bfbb4.  v1:= v1 ^& 255;
  #L2bfbb8.  return v1;
  #L2bfbba.  v0:= instanceof @variable v1 @type ^`short`[] @kind boolean;
  #L2bfbbe.  if v0 == 0 then goto L2bfbce;
  #L2bfbc2.  v1:= (`short`[]) v1 @kind object;
  #L2bfbc6.  v1:= v1[v2] @kind short;
  #L2bfbca.  v1:= (`char`) v1 @kind i2c;
  #L2bfbcc.  return v1;
  #L2bfbce.  v1:= (`int`[]) v1 @kind object;
  #L2bfbd2.  v1:= v1[v2];
  #L2bfbd6.  return v1;
}
procedure `int` `a`(`java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object, `int` v11 , `java.lang.Object` v12 @kind object, `int`[] v13 @kind object, `java.lang.Object`[] v14 @kind object, `java.lang.Object`[] v15 @kind object) @signature `Le/e/a/b/f/o/i;.a:(Ljava/lang/Object;Ljava/lang/Object;ILjava/lang/Object;[I[Ljava/lang/Object;[Ljava/lang/Object;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2bfc10.  call temp:= `a`(v9) @signature `Le/e/a/b/f/o/j;.a:(Ljava/lang/Object;)I` @kind static;
  #L2bfc16.  v0:= temp;
  #L2bfc18.  v1:= v0 ^& v11 @kind int;
  #L2bfc1c.  call temp:= `a`(v12, v1) @signature `Le/e/a/b/f/o/i;.a:(Ljava/lang/Object;I)I` @kind static;
  #L2bfc22.  v2:= temp;
  #L2bfc24.  v3:= -1I;
  #L2bfc26.  if v2 == 0 then goto L2bfc92;
  #L2bfc2a.  v4:= ~v11 @kind int;
  #L2bfc2c.  v0:= v0 ^& v4 @kind int;
  #L2bfc2e.  v5:= -1I;
  #L2bfc30.  v2:= v2 + v3 @kind int;
  #L2bfc32.  v6:= v13[v2];
  #L2bfc36.  v7:= v6 ^& v4 @kind int;
  #L2bfc3a.  if v7 != v0 then goto L2bfc82;
  #L2bfc3e.  v7:= v14[v2] @kind object;
  #L2bfc42.  call temp:= `a`(v9, v7) @signature `Le/e/a/b/f/o/a0;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2bfc48.  v7:= temp;
  #L2bfc4a.  if v7 == 0 then goto L2bfc82;
  #L2bfc4e.  if v15 == 0 then goto L2bfc62;
  #L2bfc52.  v7:= v15[v2] @kind object;
  #L2bfc56.  call temp:= `a`(v10, v7) @signature `Le/e/a/b/f/o/a0;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2bfc5c.  v7:= temp;
  #L2bfc5e.  if v7 == 0 then goto L2bfc82;
  #L2bfc62.  v9:= v6 ^& v11 @kind int;
  #L2bfc66.  if v5 != v3 then goto L2bfc72;
  #L2bfc6a.  call `a`(v12, v1, v9) @signature `Le/e/a/b/f/o/i;.a:(Ljava/lang/Object;II)V` @kind static;
  #L2bfc70.  goto L2bfc80;
  #L2bfc72.  v10:= v13[v5];
  #L2bfc76.  v10:= v10 ^& v4 @kind int;
  #L2bfc78.  v9:= v9 ^& v11 @kind int;
  #L2bfc7a.  v9:= v9 ^| v10 @kind int;
  #L2bfc7c.  v13[v5]:= v9;
  #L2bfc80.  return v2;
  #L2bfc82.  v5:= v6 ^& v11 @kind int;
  #L2bfc86.  if v5 == 0 then goto L2bfc92;
  #L2bfc8a.  v8:= v5;
  #L2bfc8c.  v5:= v2;
  #L2bfc8e.  v2:= v8;
  #L2bfc90.  goto L2bfc30;
  #L2bfc92.  return v3;
}
procedure `java.lang.Object` `a`(`int` v3 ) @signature `Le/e/a/b/f/o/i;.a:(I)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2bfca4.  v0:= 2I;
  #L2bfca6.  if v3 < v0 then goto L2bfce0;
  #L2bfcaa.  v0:= 2.0F;
  #L2bfcae.  if v3 > v0 then goto L2bfce0;
  #L2bfcb2.  call temp:= `highestOneBit`(v3) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L2bfcb8.  v0:= temp;
  #L2bfcba.  if v0 != v3 then goto L2bfce0;
  #L2bfcbe.  v0:= 256I;
  #L2bfcc2.  if v3 > v0 then goto L2bfccc;
  #L2bfcc6.  v3:= new `byte`[v3];
  #L2bfcca.  return v3 @kind object;
  #L2bfccc.  v0:= 65536I;
  #L2bfcd0.  if v3 > v0 then goto L2bfcda;
  #L2bfcd4.  v3:= new `short`[v3];
  #L2bfcd8.  return v3 @kind object;
  #L2bfcda.  v3:= new `int`[v3];
  #L2bfcde.  return v3 @kind object;
  #L2bfce0.  v0:= new `java.lang.IllegalArgumentException`;
  #L2bfce4.  v1:= new `java.lang.StringBuilder`;
  #L2bfce8.  v2:= 52I;
  #L2bfcec.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2bfcf2.  v2:= "must be power of 2 between 2^1 and 2^30: " @kind object;
  #L2bfcf6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bfcfc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bfd02.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bfd08.  v3:= temp @kind object;
  #L2bfd0a.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bfd10.  throw v0;
}
procedure `void` `a`(`java.lang.Object` v1 @kind object, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/o/i;.a:(Ljava/lang/Object;II)V` @AccessFlag STATIC {
    temp;
    v0;

  #L2bfd24.  v0:= instanceof @variable v1 @type ^`byte`[] @kind boolean;
  #L2bfd28.  if v0 == 0 then goto L2bfd38;
  #L2bfd2c.  v1:= (`byte`[]) v1 @kind object;
  #L2bfd30.  v3:= (`byte`) v3 @kind i2b;
  #L2bfd32.  v1[v2]:= v3 @kind byte;
  #L2bfd36.  return @kind void;
  #L2bfd38.  v0:= instanceof @variable v1 @type ^`short`[] @kind boolean;
  #L2bfd3c.  if v0 == 0 then goto L2bfd4c;
  #L2bfd40.  v1:= (`short`[]) v1 @kind object;
  #L2bfd44.  v3:= (`short`) v3 @kind i2s;
  #L2bfd46.  v1[v2]:= v3 @kind short;
  #L2bfd4a.  return @kind void;
  #L2bfd4c.  v1:= (`int`[]) v1 @kind object;
  #L2bfd50.  v1[v2]:= v3;
  #L2bfd54.  return @kind void;
}
procedure `int` `b`(`int` v1 ) @signature `Le/e/a/b/f/o/i;.b:(I)I` @AccessFlag STATIC {
    temp;
    v0;

  #L2bfbe8.  v0:= 32I;
  #L2bfbec.  if v1 >= v0 then goto L2bfbf4;
  #L2bfbf0.  v0:= 4I;
  #L2bfbf2.  goto L2bfbf6;
  #L2bfbf4.  v0:= 2I;
  #L2bfbf6.  v1:= v1 + 1;
  #L2bfbfa.  v0:= v0 * v1 @kind int;
  #L2bfbfe.  return v0;
}
