record `e.e.a.b.f.o.b` @kind class @AccessFlag FINAL extends `e.e.a.b.f.o.d` @kind class {
  `e.e.a.b.f.o.h` `e.e.a.b.f.o.b.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.o.b` v1 @kind this, `e.e.a.b.f.o.h` v2 @kind object) @signature `Le/e/a/b/f/o/b;.<init>:(Le/e/a/b/f/o/h;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2bebec.  v1.`e.e.a.b.f.o.b.f` @type ^`e.e.a.b.f.o.h` := v2 @kind object;
  #L2bebf0.  v0:= 0I;
  #L2bebf2.  call `<init>`(v1, v2, v0) @signature `Le/e/a/b/f/o/d;.<init>:(Le/e/a/b/f/o/h;Le/e/a/b/f/o/ya;)V` @kind direct;
  #L2bebf8.  return @kind void;
}
procedure `java.lang.Object` `a`(`e.e.a.b.f.o.b` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/o/b;.a:(I)Ljava/lang/Object;` @AccessFlag FINAL {
    temp;
    v0;

  #L2bebcc.  v0:= v1.`e.e.a.b.f.o.b.f` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bebd0.  v0:= v0.`e.e.a.b.f.o.h.e` @type ^`java.lang.Object`[] @kind object;
  #L2bebd4.  v2:= v0[v2] @kind object;
  #L2bebd8.  return v2 @kind object;
}
