record `e.e.a.b.f.n.a5` @kind class @AccessFlag FINAL extends `java.lang.IllegalArgumentException` @kind class {
}
procedure `void` `<init>`(`e.e.a.b.f.n.a5` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/n/a5;.<init>:(II)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L28d70c.  v0:= new `java.lang.StringBuilder`;
  #L28d710.  v1:= 54I;
  #L28d714.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L28d71a.  v1:= "Unpaired surrogate at index " @kind object;
  #L28d71e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28d724.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L28d72a.  v3:= " of " @kind object;
  #L28d72e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28d734.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L28d73a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28d740.  v3:= temp @kind object;
  #L28d742.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28d748.  return @kind void;
}
