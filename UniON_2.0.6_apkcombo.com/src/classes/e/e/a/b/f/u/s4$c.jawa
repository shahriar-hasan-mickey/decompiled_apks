record `e.e.a.b.f.u.s4$c` @kind class @AccessFlag PUBLIC_ABSTRACT extends `e.e.a.b.f.u.s4` @kind class, `e.e.a.b.f.u.d6` @kind interface {
  `e.e.a.b.f.u.l4` `e.e.a.b.f.u.s4$c.zzc` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`e.e.a.b.f.u.s4$c` v1 @kind this) @signature `Le/e/a/b/f/u/s4$c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L32d418.  call `<init>`(v1) @signature `Le/e/a/b/f/u/s4;.<init>:()V` @kind direct;
  #L32d41e.  call temp:= `g`() @signature `Le/e/a/b/f/u/l4;.g:()Le/e/a/b/f/u/l4;` @kind static;
  #L32d424.  v0:= temp @kind object;
  #L32d426.  v1.`e.e.a.b.f.u.s4$c.zzc` @type ^`e.e.a.b.f.u.l4` := v0 @kind object;
  #L32d42a.  return @kind void;
}
procedure `java.lang.Object` `b`(`e.e.a.b.f.u.s4$c` v3 @kind this, `e.e.a.b.f.u.d4` v4 @kind object) @signature `Le/e/a/b/f/u/s4$c;.b:(Le/e/a/b/f/u/d4;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L32d358.  call temp:= `a`(v4) @signature `Le/e/a/b/f/u/s4;.a:(Le/e/a/b/f/u/d4;)Le/e/a/b/f/u/s4$e;` @kind static;
  #L32d35e.  v4:= temp @kind object;
  #L32d360.  v0:= v4.`e.e.a.b.f.u.s4$e.a` @type ^`e.e.a.b.f.u.b6` @kind object;
  #L32d364.  call temp:= `k`(v3) @signature `Le/e/a/b/f/u/s4;.k:()Le/e/a/b/f/u/b6;` @kind virtual;
  #L32d36a.  v1:= temp @kind object;
  #L32d36c.  v1:= (`e.e.a.b.f.u.s4`) v1 @kind object;
  #L32d370.  if v0 != v1 then goto L32d3f6;
  #L32d374.  v0:= v3.`e.e.a.b.f.u.s4$c.zzc` @type ^`e.e.a.b.f.u.l4` @kind object;
  #L32d378.  v1:= v4.`e.e.a.b.f.u.s4$e.d` @type ^`e.e.a.b.f.u.s4$f` @kind object;
  #L32d37c.  call temp:= `a`(v0, v1) @signature `Le/e/a/b/f/u/l4;.a:(Le/e/a/b/f/u/n4;)Ljava/lang/Object;` @kind virtual;
  #L32d382.  v0:= temp @kind object;
  #L32d384.  if v0 != 0 then goto L32d38e;
  #L32d388.  v4:= v4.`e.e.a.b.f.u.s4$e.b` @type ^`java.lang.Object` @kind object;
  #L32d38c.  return v4 @kind object;
  #L32d38e.  v1:= v4.`e.e.a.b.f.u.s4$e.d` @type ^`e.e.a.b.f.u.s4$f` @kind object;
  #L32d392.  v2:= v1.`e.e.a.b.f.u.s4$f.d` @type ^`boolean` @kind boolean;
  #L32d396.  if v2 == 0 then goto L32d3ec;
  #L32d39a.  v1:= v1.`e.e.a.b.f.u.s4$f.c` @type ^`e.e.a.b.f.u.a8` @kind object;
  #L32d39e.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/u/a8;.zza:()Le/e/a/b/f/u/d8;` @kind virtual;
  #L32d3a4.  v1:= temp @kind object;
  #L32d3a6.  v2:= `@@e.e.a.b.f.u.d8.i` @type ^`e.e.a.b.f.u.d8` @kind object;
  #L32d3aa.  if v1 != v2 then goto L32d3ea;
  #L32d3ae.  v1:= new `java.util.ArrayList`;
  #L32d3b2.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L32d3b8.  v0:= (`java.util.List`) v0 @kind object;
  #L32d3bc.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L32d3c2.  v0:= temp @kind object;
  #L32d3c4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L32d3ca.  v2:= temp;
  #L32d3cc.  if v2 == 0 then goto L32d3e8;
  #L32d3d0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L32d3d6.  v2:= temp @kind object;
  #L32d3d8.  call temp:= `a`(v4, v2) @signature `Le/e/a/b/f/u/s4$e;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L32d3de.  v2:= temp @kind object;
  #L32d3e0.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L32d3e6.  goto L32d3c4;
  #L32d3e8.  return v1 @kind object;
  #L32d3ea.  return v0 @kind object;
  #L32d3ec.  call temp:= `a`(v4, v0) @signature `Le/e/a/b/f/u/s4$e;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L32d3f2.  v4:= temp @kind object;
  #L32d3f4.  return v4 @kind object;
  #L32d3f6.  v4:= new `java.lang.IllegalArgumentException`;
  #L32d3fa.  v0:= "This extension is for a different message type.  Please make sure that you are not suppressing any generics type warnings." @kind object;
  #L32d3fe.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32d404.  throw v4;
}
procedure `e.e.a.b.f.u.l4` `zza`(`e.e.a.b.f.u.s4$c` v1 @kind this) @signature `Le/e/a/b/f/u/s4$c;.zza:()Le/e/a/b/f/u/l4;` @AccessFlag FINAL {
    temp;
    v0;

  #L32d31c.  v0:= v1.`e.e.a.b.f.u.s4$c.zzc` @type ^`e.e.a.b.f.u.l4` @kind object;
  #L32d320.  call temp:= `b`(v0) @signature `Le/e/a/b/f/u/l4;.b:()Z` @kind virtual;
  #L32d326.  v0:= temp;
  #L32d328.  if v0 == 0 then goto L32d340;
  #L32d32c.  v0:= v1.`e.e.a.b.f.u.s4$c.zzc` @type ^`e.e.a.b.f.u.l4` @kind object;
  #L32d330.  call temp:= `clone`(v0) @signature `Le/e/a/b/f/u/l4;.clone:()Ljava/lang/Object;` @kind virtual;
  #L32d336.  v0:= temp @kind object;
  #L32d338.  v0:= (`e.e.a.b.f.u.l4`) v0 @kind object;
  #L32d33c.  v1.`e.e.a.b.f.u.s4$c.zzc` @type ^`e.e.a.b.f.u.l4` := v0 @kind object;
  #L32d340.  v0:= v1.`e.e.a.b.f.u.s4$c.zzc` @type ^`e.e.a.b.f.u.l4` @kind object;
  #L32d344.  return v0 @kind object;
}
