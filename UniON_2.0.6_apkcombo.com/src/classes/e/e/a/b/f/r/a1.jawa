record `e.e.a.b.f.r.a1` @kind class @AccessFlag FINAL extends `java.util.AbstractCollection` @kind class {
  `java.util.Map` `e.e.a.b.f.r.a1.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`e.e.a.b.f.r.a1` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Le/e/a/b/f/r/a1;.<init>:(Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L30ea48.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L30ea4e.  v0.`e.e.a.b.f.r.a1.b` @type ^`java.util.Map` := v1 @kind object;
  #L30ea52.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.r.a1` v1 @kind this) @signature `Le/e/a/b/f/r/a1;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30ea64.  v0:= v1.`e.e.a.b.f.r.a1.b` @type ^`java.util.Map` @kind object;
  #L30ea68.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L30ea6e.  return @kind void;
}
procedure `boolean` `contains`(`e.e.a.b.f.r.a1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/r/a1;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30e7ec.  v0:= v1.`e.e.a.b.f.r.a1.b` @type ^`java.util.Map` @kind object;
  #L30e7f0.  call temp:= `containsValue`(v0, v2) @signature `Ljava/util/Map;.containsValue:(Ljava/lang/Object;)Z` @kind interface;
  #L30e7f6.  v2:= temp;
  #L30e7f8.  return v2;
}
procedure `boolean` `isEmpty`(`e.e.a.b.f.r.a1` v1 @kind this) @signature `Le/e/a/b/f/r/a1;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30e80c.  v0:= v1.`e.e.a.b.f.r.a1.b` @type ^`java.util.Map` @kind object;
  #L30e810.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L30e816.  v0:= temp;
  #L30e818.  return v0;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.r.a1` v2 @kind this) @signature `Le/e/a/b/f/r/a1;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L30ea18.  v0:= v2.`e.e.a.b.f.r.a1.b` @type ^`java.util.Map` @kind object;
  #L30ea1c.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L30ea22.  v0:= temp @kind object;
  #L30ea24.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L30ea2a.  v0:= temp @kind object;
  #L30ea2c.  v1:= new `e.e.a.b.f.r.x0`;
  #L30ea30.  call `<init>`(v1, v0) @signature `Le/e/a/b/f/r/x0;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L30ea36.  return v1 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.r.a1` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/r/a1;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L30e82c.  call temp:= `remove`(v3, v4) @signature `Ljava/util/AbstractCollection;.remove:(Ljava/lang/Object;)Z` @kind super;
  #L30e832.  v4:= temp;
  #L30e834.  return v4;
  #L30e836.  v0:= v3.`e.e.a.b.f.r.a1.b` @type ^`java.util.Map` @kind object;
  #L30e83a.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L30e840.  v0:= temp @kind object;
  #L30e842.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L30e848.  v0:= temp @kind object;
  #L30e84a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L30e850.  v1:= temp;
  #L30e852.  if v1 == 0 then goto L30e88c;
  #L30e856.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L30e85c.  v1:= temp @kind object;
  #L30e85e.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L30e862.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L30e868.  v2:= temp @kind object;
  #L30e86a.  call temp:= `a`(v4, v2) @signature `Le/e/a/b/f/r/lb;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L30e870.  v2:= temp;
  #L30e872.  if v2 == 0 then goto L30e84a;
  #L30e876.  v4:= v3.`e.e.a.b.f.r.a1.b` @type ^`java.util.Map` @kind object;
  #L30e87a.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L30e880.  v0:= temp @kind object;
  #L30e882.  call temp:= `remove`(v4, v0) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L30e888.  v4:= 1I;
  #L30e88a.  return v4;
  #L30e88c.  v4:= 0I;
  #L30e88e.  return v4;
  catch `java.lang.UnsupportedOperationException` @[L30e82c..L30e834] goto L30e836;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.r.a1` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Le/e/a/b/f/r/a1;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30e8b0.  if v5 == 0 then goto L30e8be;
  #L30e8b4.  call temp:= `removeAll`(v4, v5) @signature `Ljava/util/AbstractCollection;.removeAll:(Ljava/util/Collection;)Z` @kind super;
  #L30e8ba.  v5:= temp;
  #L30e8bc.  return v5;
  #L30e8be.  v0:= 0I;
  #L30e8c0.  throw v0;
  #L30e8c2.  v0:= new `java.util.HashSet`;
  #L30e8c6.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L30e8cc.  v1:= v4.`e.e.a.b.f.r.a1.b` @type ^`java.util.Map` @kind object;
  #L30e8d0.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L30e8d6.  v1:= temp @kind object;
  #L30e8d8.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L30e8de.  v1:= temp @kind object;
  #L30e8e0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L30e8e6.  v2:= temp;
  #L30e8e8.  if v2 == 0 then goto L30e91c;
  #L30e8ec.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L30e8f2.  v2:= temp @kind object;
  #L30e8f4.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L30e8f8.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L30e8fe.  v3:= temp @kind object;
  #L30e900.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L30e906.  v3:= temp;
  #L30e908.  if v3 == 0 then goto L30e8e0;
  #L30e90c.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L30e912.  v2:= temp @kind object;
  #L30e914.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L30e91a.  goto L30e8e0;
  #L30e91c.  v5:= v4.`e.e.a.b.f.r.a1.b` @type ^`java.util.Map` @kind object;
  #L30e920.  call temp:= `keySet`(v5) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L30e926.  v5:= temp @kind object;
  #L30e928.  call temp:= `removeAll`(v5, v0) @signature `Ljava/util/Set;.removeAll:(Ljava/util/Collection;)Z` @kind interface;
  #L30e92e.  v5:= temp;
  #L30e930.  return v5;
  catch `java.lang.UnsupportedOperationException` @[L30e8b4..L30e8c2] goto L30e8c2;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.r.a1` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Le/e/a/b/f/r/a1;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30e954.  if v5 == 0 then goto L30e962;
  #L30e958.  call temp:= `retainAll`(v4, v5) @signature `Ljava/util/AbstractCollection;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L30e95e.  v5:= temp;
  #L30e960.  return v5;
  #L30e962.  v0:= 0I;
  #L30e964.  throw v0;
  #L30e966.  v0:= new `java.util.HashSet`;
  #L30e96a.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L30e970.  v1:= v4.`e.e.a.b.f.r.a1.b` @type ^`java.util.Map` @kind object;
  #L30e974.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L30e97a.  v1:= temp @kind object;
  #L30e97c.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L30e982.  v1:= temp @kind object;
  #L30e984.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L30e98a.  v2:= temp;
  #L30e98c.  if v2 == 0 then goto L30e9c0;
  #L30e990.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L30e996.  v2:= temp @kind object;
  #L30e998.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L30e99c.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L30e9a2.  v3:= temp @kind object;
  #L30e9a4.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L30e9aa.  v3:= temp;
  #L30e9ac.  if v3 == 0 then goto L30e984;
  #L30e9b0.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L30e9b6.  v2:= temp @kind object;
  #L30e9b8.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L30e9be.  goto L30e984;
  #L30e9c0.  v5:= v4.`e.e.a.b.f.r.a1.b` @type ^`java.util.Map` @kind object;
  #L30e9c4.  call temp:= `keySet`(v5) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L30e9ca.  v5:= temp @kind object;
  #L30e9cc.  call temp:= `retainAll`(v5, v0) @signature `Ljava/util/Set;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L30e9d2.  v5:= temp;
  #L30e9d4.  return v5;
  catch `java.lang.UnsupportedOperationException` @[L30e958..L30e966] goto L30e966;
}
procedure `int` `size`(`e.e.a.b.f.r.a1` v1 @kind this) @signature `Le/e/a/b/f/r/a1;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30e9f8.  v0:= v1.`e.e.a.b.f.r.a1.b` @type ^`java.util.Map` @kind object;
  #L30e9fc.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L30ea02.  v0:= temp;
  #L30ea04.  return v0;
}
