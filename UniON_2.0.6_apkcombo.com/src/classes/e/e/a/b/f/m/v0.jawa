record `e.e.a.b.f.m.v0` @kind class @AccessFlag FINAL extends `java.util.AbstractCollection` @kind class {
  `java.util.Map` `e.e.a.b.f.m.v0.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`e.e.a.b.f.m.v0` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Le/e/a/b/f/m/v0;.<init>:(Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L267a24.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L267a2a.  v0.`e.e.a.b.f.m.v0.b` @type ^`java.util.Map` := v1 @kind object;
  #L267a2e.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.m.v0` v1 @kind this) @signature `Le/e/a/b/f/m/v0;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L267a40.  v0:= v1.`e.e.a.b.f.m.v0.b` @type ^`java.util.Map` @kind object;
  #L267a44.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L267a4a.  return @kind void;
}
procedure `boolean` `contains`(`e.e.a.b.f.m.v0` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/m/v0;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2677c8.  v0:= v1.`e.e.a.b.f.m.v0.b` @type ^`java.util.Map` @kind object;
  #L2677cc.  call temp:= `containsValue`(v0, v2) @signature `Ljava/util/Map;.containsValue:(Ljava/lang/Object;)Z` @kind interface;
  #L2677d2.  v2:= temp;
  #L2677d4.  return v2;
}
procedure `boolean` `isEmpty`(`e.e.a.b.f.m.v0` v1 @kind this) @signature `Le/e/a/b/f/m/v0;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2677e8.  v0:= v1.`e.e.a.b.f.m.v0.b` @type ^`java.util.Map` @kind object;
  #L2677ec.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2677f2.  v0:= temp;
  #L2677f4.  return v0;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.m.v0` v2 @kind this) @signature `Le/e/a/b/f/m/v0;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2679f4.  v0:= v2.`e.e.a.b.f.m.v0.b` @type ^`java.util.Map` @kind object;
  #L2679f8.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2679fe.  v0:= temp @kind object;
  #L267a00.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L267a06.  v0:= temp @kind object;
  #L267a08.  v1:= new `e.e.a.b.f.m.s0`;
  #L267a0c.  call `<init>`(v1, v0) @signature `Le/e/a/b/f/m/s0;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L267a12.  return v1 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.m.v0` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/m/v0;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L267808.  call temp:= `remove`(v3, v4) @signature `Ljava/util/AbstractCollection;.remove:(Ljava/lang/Object;)Z` @kind super;
  #L26780e.  v4:= temp;
  #L267810.  return v4;
  #L267812.  v0:= v3.`e.e.a.b.f.m.v0.b` @type ^`java.util.Map` @kind object;
  #L267816.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L26781c.  v0:= temp @kind object;
  #L26781e.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L267824.  v0:= temp @kind object;
  #L267826.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L26782c.  v1:= temp;
  #L26782e.  if v1 == 0 then goto L267868;
  #L267832.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L267838.  v1:= temp @kind object;
  #L26783a.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L26783e.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L267844.  v2:= temp @kind object;
  #L267846.  call temp:= `a`(v4, v2) @signature `Le/e/a/b/f/m/ec;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L26784c.  v2:= temp;
  #L26784e.  if v2 == 0 then goto L267826;
  #L267852.  v4:= v3.`e.e.a.b.f.m.v0.b` @type ^`java.util.Map` @kind object;
  #L267856.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L26785c.  v0:= temp @kind object;
  #L26785e.  call temp:= `remove`(v4, v0) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L267864.  v4:= 1I;
  #L267866.  return v4;
  #L267868.  v4:= 0I;
  #L26786a.  return v4;
  catch `java.lang.UnsupportedOperationException` @[L267808..L267810] goto L267812;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.m.v0` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Le/e/a/b/f/m/v0;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L26788c.  if v5 == 0 then goto L26789a;
  #L267890.  call temp:= `removeAll`(v4, v5) @signature `Ljava/util/AbstractCollection;.removeAll:(Ljava/util/Collection;)Z` @kind super;
  #L267896.  v5:= temp;
  #L267898.  return v5;
  #L26789a.  v0:= 0I;
  #L26789c.  throw v0;
  #L26789e.  v0:= new `java.util.HashSet`;
  #L2678a2.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L2678a8.  v1:= v4.`e.e.a.b.f.m.v0.b` @type ^`java.util.Map` @kind object;
  #L2678ac.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2678b2.  v1:= temp @kind object;
  #L2678b4.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2678ba.  v1:= temp @kind object;
  #L2678bc.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2678c2.  v2:= temp;
  #L2678c4.  if v2 == 0 then goto L2678f8;
  #L2678c8.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2678ce.  v2:= temp @kind object;
  #L2678d0.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L2678d4.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2678da.  v3:= temp @kind object;
  #L2678dc.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2678e2.  v3:= temp;
  #L2678e4.  if v3 == 0 then goto L2678bc;
  #L2678e8.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2678ee.  v2:= temp @kind object;
  #L2678f0.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2678f6.  goto L2678bc;
  #L2678f8.  v5:= v4.`e.e.a.b.f.m.v0.b` @type ^`java.util.Map` @kind object;
  #L2678fc.  call temp:= `keySet`(v5) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L267902.  v5:= temp @kind object;
  #L267904.  call temp:= `removeAll`(v5, v0) @signature `Ljava/util/Set;.removeAll:(Ljava/util/Collection;)Z` @kind interface;
  #L26790a.  v5:= temp;
  #L26790c.  return v5;
  catch `java.lang.UnsupportedOperationException` @[L267890..L26789e] goto L26789e;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.m.v0` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Le/e/a/b/f/m/v0;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L267930.  if v5 == 0 then goto L26793e;
  #L267934.  call temp:= `retainAll`(v4, v5) @signature `Ljava/util/AbstractCollection;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L26793a.  v5:= temp;
  #L26793c.  return v5;
  #L26793e.  v0:= 0I;
  #L267940.  throw v0;
  #L267942.  v0:= new `java.util.HashSet`;
  #L267946.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L26794c.  v1:= v4.`e.e.a.b.f.m.v0.b` @type ^`java.util.Map` @kind object;
  #L267950.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L267956.  v1:= temp @kind object;
  #L267958.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L26795e.  v1:= temp @kind object;
  #L267960.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L267966.  v2:= temp;
  #L267968.  if v2 == 0 then goto L26799c;
  #L26796c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L267972.  v2:= temp @kind object;
  #L267974.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L267978.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L26797e.  v3:= temp @kind object;
  #L267980.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L267986.  v3:= temp;
  #L267988.  if v3 == 0 then goto L267960;
  #L26798c.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L267992.  v2:= temp @kind object;
  #L267994.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L26799a.  goto L267960;
  #L26799c.  v5:= v4.`e.e.a.b.f.m.v0.b` @type ^`java.util.Map` @kind object;
  #L2679a0.  call temp:= `keySet`(v5) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L2679a6.  v5:= temp @kind object;
  #L2679a8.  call temp:= `retainAll`(v5, v0) @signature `Ljava/util/Set;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2679ae.  v5:= temp;
  #L2679b0.  return v5;
  catch `java.lang.UnsupportedOperationException` @[L267934..L267942] goto L267942;
}
procedure `int` `size`(`e.e.a.b.f.m.v0` v1 @kind this) @signature `Le/e/a/b/f/m/v0;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2679d4.  v0:= v1.`e.e.a.b.f.m.v0.b` @type ^`java.util.Map` @kind object;
  #L2679d8.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L2679de.  v0:= temp;
  #L2679e0.  return v0;
}
