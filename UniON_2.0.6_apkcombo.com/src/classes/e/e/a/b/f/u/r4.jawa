record `e.e.a.b.f.u.r4` @kind class @AccessFlag FINAL extends `e.e.a.b.f.u.e3` @kind class, `e.e.a.b.f.u.c5` @kind interface, `e.e.a.b.f.u.m6` @kind interface, `java.util.RandomAccess` @kind interface {
  `float`[] `e.e.a.b.f.u.r4.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.u.r4.d` @AccessFlag PRIVATE;
}
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/u/r4;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L32ce7c.  v0:= new `e.e.a.b.f.u.r4`;
  #L32ce80.  v1:= 0I;
  #L32ce82.  v2:= new `float`[v1];
  #L32ce86.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/u/r4;.<init>:([FI)V` @kind direct;
  #L32ce8c.  call `zzb`(v0) @signature `Le/e/a/b/f/u/e3;.zzb:()V` @kind virtual;
  #L32ce92.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.u.r4` v2 @kind this) @signature `Le/e/a/b/f/u/r4;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L32cea4.  v0:= 10I;
  #L32cea8.  v0:= new `float`[v0];
  #L32ceac.  v1:= 0I;
  #L32ceae.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/u/r4;.<init>:([FI)V` @kind direct;
  #L32ceb4.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.u.r4` v0 @kind this, `float`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/u/r4;.<init>:([FI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L32cec8.  call `<init>`(v0) @signature `Le/e/a/b/f/u/e3;.<init>:()V` @kind direct;
  #L32cece.  v0.`e.e.a.b.f.u.r4.c` @type ^`float`[] := v1 @kind object;
  #L32ced2.  v0.`e.e.a.b.f.u.r4.d` @type ^`int` := v2;
  #L32ced6.  return @kind void;
}
procedure `void` `b`(`e.e.a.b.f.u.r4` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/u/r4;.b:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L32d040.  if v2 < 0 then goto L32d04e;
  #L32d044.  v0:= v1.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32d048.  if v2 >= v0 then goto L32d04e;
  #L32d04c.  return @kind void;
  #L32d04e.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L32d052.  call temp:= `h`(v1, v2) @signature `Le/e/a/b/f/u/r4;.h:(I)Ljava/lang/String;` @kind direct;
  #L32d058.  v2:= temp @kind object;
  #L32d05a.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32d060.  throw v0;
}
procedure `java.lang.String` `h`(`e.e.a.b.f.u.r4` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/u/r4;.h:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L32ce30.  v0:= v3.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32ce34.  v1:= new `java.lang.StringBuilder`;
  #L32ce38.  v2:= 35I;
  #L32ce3c.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L32ce42.  v2:= "Index:" @kind object;
  #L32ce46.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ce4c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ce52.  v4:= ", Size:" @kind object;
  #L32ce56.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ce5c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ce62.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32ce68.  v4:= temp @kind object;
  #L32ce6a.  return v4 @kind object;
}
procedure `e.e.a.b.f.u.c5` `a`(`e.e.a.b.f.u.r4` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/u/r4;.a:(I)Le/e/a/b/f/u/c5;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L32cc80.  v0:= v2.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cc84.  if v3 < v0 then goto L32cca4;
  #L32cc88.  v0:= new `e.e.a.b.f.u.r4`;
  #L32cc8c.  v1:= v2.`e.e.a.b.f.u.r4.c` @type ^`float`[] @kind object;
  #L32cc90.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([FI)[F` @kind static;
  #L32cc96.  v3:= temp @kind object;
  #L32cc98.  v1:= v2.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cc9c.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/u/r4;.<init>:([FI)V` @kind direct;
  #L32cca2.  return v0 @kind object;
  #L32cca4.  v3:= new `java.lang.IllegalArgumentException`;
  #L32cca8.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L32ccae.  throw v3;
}
procedure `void` `a`(`e.e.a.b.f.u.r4` v4 @kind this, `float` v5 ) @signature `Le/e/a/b/f/u/r4;.a:(F)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32cfe8.  call `d`(v4) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32cfee.  v0:= v4.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cff2.  v1:= v4.`e.e.a.b.f.u.r4.c` @type ^`float`[] @kind object;
  #L32cff6.  v2:= length @variable v1;
  #L32cff8.  if v0 != v2 then goto L32d018;
  #L32cffc.  v2:= v0 * 3;
  #L32d000.  v2:= v2 / 2;
  #L32d004.  v2:= v2 + 1;
  #L32d008.  v2:= new `float`[v2];
  #L32d00c.  v3:= 0I;
  #L32d00e.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32d014.  v4.`e.e.a.b.f.u.r4.c` @type ^`float`[] := v2 @kind object;
  #L32d018.  v0:= v4.`e.e.a.b.f.u.r4.c` @type ^`float`[] @kind object;
  #L32d01c.  v1:= v4.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32d020.  v2:= v1 + 1;
  #L32d024.  v4.`e.e.a.b.f.u.r4.d` @type ^`int` := v2;
  #L32d028.  v0[v1]:= v5;
  #L32d02c.  return @kind void;
}
procedure `void` `add`(`e.e.a.b.f.u.r4` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/u/r4;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32cee8.  v6:= (`java.lang.Float`) v6 @kind object;
  #L32ceec.  call temp:= `floatValue`(v6) @signature `Ljava/lang/Float;.floatValue:()F` @kind virtual;
  #L32cef2.  v6:= temp;
  #L32cef4.  call `d`(v4) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32cefa.  if v5 < 0 then goto L32cf70;
  #L32cefe.  v0:= v4.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cf02.  if v5 > v0 then goto L32cf70;
  #L32cf06.  v1:= v4.`e.e.a.b.f.u.r4.c` @type ^`float`[] @kind object;
  #L32cf0a.  v2:= length @variable v1;
  #L32cf0c.  if v0 >= v2 then goto L32cf1e;
  #L32cf10.  v2:= v5 + 1;
  #L32cf14.  v0:= v0 - v5 @kind int;
  #L32cf16.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32cf1c.  goto L32cf4e;
  #L32cf1e.  v0:= v0 * 3;
  #L32cf22.  v0:= v0 / 2;
  #L32cf26.  v0:= v0 + 1;
  #L32cf2a.  v0:= new `float`[v0];
  #L32cf2e.  v2:= 0I;
  #L32cf30.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32cf36.  v1:= v4.`e.e.a.b.f.u.r4.c` @type ^`float`[] @kind object;
  #L32cf3a.  v2:= v5 + 1;
  #L32cf3e.  v3:= v4.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cf42.  v3:= v3 - v5 @kind int;
  #L32cf44.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32cf4a.  v4.`e.e.a.b.f.u.r4.c` @type ^`float`[] := v0 @kind object;
  #L32cf4e.  v0:= v4.`e.e.a.b.f.u.r4.c` @type ^`float`[] @kind object;
  #L32cf52.  v0[v5]:= v6;
  #L32cf56.  v5:= v4.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cf5a.  v5:= v5 + 1;
  #L32cf5e.  v4.`e.e.a.b.f.u.r4.d` @type ^`int` := v5;
  #L32cf62.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L32cf66.  v5:= v5 + 1;
  #L32cf6a.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L32cf6e.  return @kind void;
  #L32cf70.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L32cf74.  call temp:= `h`(v4, v5) @signature `Le/e/a/b/f/u/r4;.h:(I)Ljava/lang/String;` @kind direct;
  #L32cf7a.  v5:= temp @kind object;
  #L32cf7c.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32cf82.  throw v6;
}
procedure `boolean` `add`(`e.e.a.b.f.u.r4` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/u/r4;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L32cb1c.  v1:= (`java.lang.Float`) v1 @kind object;
  #L32cb20.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Float;.floatValue:()F` @kind virtual;
  #L32cb26.  v1:= temp;
  #L32cb28.  call `a`(v0, v1) @signature `Le/e/a/b/f/u/r4;.a:(F)V` @kind virtual;
  #L32cb2e.  v1:= 1I;
  #L32cb30.  return v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.u.r4` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/u/r4;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32cb44.  call `d`(v5) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32cb4a.  call temp:= `a`(v6) @signature `Le/e/a/b/f/u/w4;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L32cb50.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.u.r4` @kind boolean;
  #L32cb54.  if v0 != 0 then goto L32cb62;
  #L32cb58.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/u/e3;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L32cb5e.  v6:= temp;
  #L32cb60.  return v6;
  #L32cb62.  v6:= (`e.e.a.b.f.u.r4`) v6 @kind object;
  #L32cb66.  v0:= v6.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cb6a.  v1:= 0I;
  #L32cb6c.  if v0 != 0 then goto L32cb72;
  #L32cb70.  return v1;
  #L32cb72.  v2:= 2147483647I;
  #L32cb78.  v3:= v5.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cb7c.  v2:= v2 - v3 @kind int;
  #L32cb7e.  if v2 < v0 then goto L32cbc2;
  #L32cb82.  v3:= v3 + v0 @kind int;
  #L32cb84.  v0:= v5.`e.e.a.b.f.u.r4.c` @type ^`float`[] @kind object;
  #L32cb88.  v2:= length @variable v0;
  #L32cb8a.  if v3 <= v2 then goto L32cb9a;
  #L32cb8e.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([FI)[F` @kind static;
  #L32cb94.  v0:= temp @kind object;
  #L32cb96.  v5.`e.e.a.b.f.u.r4.c` @type ^`float`[] := v0 @kind object;
  #L32cb9a.  v0:= v6.`e.e.a.b.f.u.r4.c` @type ^`float`[] @kind object;
  #L32cb9e.  v2:= v5.`e.e.a.b.f.u.r4.c` @type ^`float`[] @kind object;
  #L32cba2.  v4:= v5.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cba6.  v6:= v6.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cbaa.  call `arraycopy`(v0, v1, v2, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32cbb0.  v5.`e.e.a.b.f.u.r4.d` @type ^`int` := v3;
  #L32cbb4.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L32cbb8.  v0:= 1I;
  #L32cbba.  v6:= v6 + v0 @kind int;
  #L32cbbc.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L32cbc0.  return v0;
  #L32cbc2.  v6:= new `java.lang.OutOfMemoryError`;
  #L32cbc6.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L32cbcc.  throw v6;
}
procedure `boolean` `contains`(`e.e.a.b.f.u.r4` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/u/r4;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L32cbe0.  call temp:= `indexOf`(v1, v2) @signature `Le/e/a/b/f/u/r4;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L32cbe6.  v2:= temp;
  #L32cbe8.  v0:= -1I;
  #L32cbea.  if v2 == v0 then goto L32cbf2;
  #L32cbee.  v2:= 1I;
  #L32cbf0.  return v2;
  #L32cbf2.  v2:= 0I;
  #L32cbf4.  return v2;
}
procedure `boolean` `equals`(`e.e.a.b.f.u.r4` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/u/r4;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32cc08.  v0:= 1I;
  #L32cc0a.  if v5 != v6 then goto L32cc10;
  #L32cc0e.  return v0;
  #L32cc10.  v1:= instanceof @variable v6 @type ^`e.e.a.b.f.u.r4` @kind boolean;
  #L32cc14.  if v1 != 0 then goto L32cc22;
  #L32cc18.  call temp:= `equals`(v5, v6) @signature `Le/e/a/b/f/u/e3;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L32cc1e.  v6:= temp;
  #L32cc20.  return v6;
  #L32cc22.  v6:= (`e.e.a.b.f.u.r4`) v6 @kind object;
  #L32cc26.  v1:= v5.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cc2a.  v2:= v6.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cc2e.  v3:= 0I;
  #L32cc30.  if v1 == v2 then goto L32cc36;
  #L32cc34.  return v3;
  #L32cc36.  v6:= v6.`e.e.a.b.f.u.r4.c` @type ^`float`[] @kind object;
  #L32cc3a.  v1:= 0I;
  #L32cc3c.  v2:= v5.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cc40.  if v1 >= v2 then goto L32cc6c;
  #L32cc44.  v2:= v5.`e.e.a.b.f.u.r4.c` @type ^`float`[] @kind object;
  #L32cc48.  v2:= v2[v1];
  #L32cc4c.  call temp:= `floatToIntBits`(v2) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L32cc52.  v2:= temp;
  #L32cc54.  v4:= v6[v1];
  #L32cc58.  call temp:= `floatToIntBits`(v4) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L32cc5e.  v4:= temp;
  #L32cc60.  if v2 == v4 then goto L32cc66;
  #L32cc64.  return v3;
  #L32cc66.  v1:= v1 + 1;
  #L32cc6a.  goto L32cc3c;
  #L32cc6c.  return v0;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.u.r4` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/u/r4;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L32cd64.  call `b`(v1, v2) @signature `Le/e/a/b/f/u/r4;.b:(I)V` @kind direct;
  #L32cd6a.  v0:= v1.`e.e.a.b.f.u.r4.c` @type ^`float`[] @kind object;
  #L32cd6e.  v2:= v0[v2];
  #L32cd72.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L32cd78.  v2:= temp @kind object;
  #L32cd7a.  return v2 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.u.r4` v3 @kind this) @signature `Le/e/a/b/f/u/r4;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L32ccc0.  v0:= 1I;
  #L32ccc2.  v1:= 0I;
  #L32ccc4.  v2:= v3.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32ccc8.  if v1 >= v2 then goto L32cce8;
  #L32cccc.  v0:= v0 * 31;
  #L32ccd0.  v2:= v3.`e.e.a.b.f.u.r4.c` @type ^`float`[] @kind object;
  #L32ccd4.  v2:= v2[v1];
  #L32ccd8.  call temp:= `floatToIntBits`(v2) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L32ccde.  v2:= temp;
  #L32cce0.  v0:= v0 + v2 @kind int;
  #L32cce2.  v1:= v1 + 1;
  #L32cce6.  goto L32ccc4;
  #L32cce8.  return v0;
}
procedure `int` `indexOf`(`e.e.a.b.f.u.r4` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/u/r4;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32ccfc.  v0:= instanceof @variable v5 @type ^`java.lang.Float` @kind boolean;
  #L32cd00.  v1:= -1I;
  #L32cd02.  if v0 != 0 then goto L32cd08;
  #L32cd06.  return v1;
  #L32cd08.  v5:= (`java.lang.Float`) v5 @kind object;
  #L32cd0c.  call temp:= `floatValue`(v5) @signature `Ljava/lang/Float;.floatValue:()F` @kind virtual;
  #L32cd12.  v5:= temp;
  #L32cd14.  call temp:= `size`(v4) @signature `Le/e/a/b/f/u/r4;.size:()I` @kind virtual;
  #L32cd1a.  v0:= temp;
  #L32cd1c.  v2:= 0I;
  #L32cd1e.  if v2 >= v0 then goto L32cd3a;
  #L32cd22.  v3:= v4.`e.e.a.b.f.u.r4.c` @type ^`float`[] @kind object;
  #L32cd26.  v3:= v3[v2];
  #L32cd2a.  v3:= fcmpl(v3, v5);
  #L32cd2e.  if v3 != 0 then goto L32cd34;
  #L32cd32.  return v2;
  #L32cd34.  v2:= v2 + 1;
  #L32cd38.  goto L32cd1e;
  #L32cd3a.  return v1;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.u.r4` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/u/r4;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32cd8c.  call `d`(v4) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32cd92.  call `b`(v4, v5) @signature `Le/e/a/b/f/u/r4;.b:(I)V` @kind direct;
  #L32cd98.  v0:= v4.`e.e.a.b.f.u.r4.c` @type ^`float`[] @kind object;
  #L32cd9c.  v1:= v0[v5];
  #L32cda0.  v2:= v4.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cda4.  v3:= v2 + -1;
  #L32cda8.  if v5 >= v3 then goto L32cdbc;
  #L32cdac.  v3:= v5 + 1;
  #L32cdb0.  v2:= v2 - v5 @kind int;
  #L32cdb2.  v2:= v2 + -1;
  #L32cdb6.  call `arraycopy`(v0, v3, v0, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32cdbc.  v5:= v4.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cdc0.  v5:= v5 + -1;
  #L32cdc4.  v4.`e.e.a.b.f.u.r4.d` @type ^`int` := v5;
  #L32cdc8.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L32cdcc.  v5:= v5 + 1;
  #L32cdd0.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L32cdd4.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L32cdda.  v5:= temp @kind object;
  #L32cddc.  return v5 @kind object;
}
procedure `void` `removeRange`(`e.e.a.b.f.u.r4` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/u/r4;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L32cf94.  call `d`(v2) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32cf9a.  if v4 < v3 then goto L32cfc8;
  #L32cf9e.  v0:= v2.`e.e.a.b.f.u.r4.c` @type ^`float`[] @kind object;
  #L32cfa2.  v1:= v2.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cfa6.  v1:= v1 - v4 @kind int;
  #L32cfa8.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32cfae.  v0:= v2.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cfb2.  v4:= v4 - v3 @kind int;
  #L32cfb4.  v0:= v0 - v4 @kind int;
  #L32cfb6.  v2.`e.e.a.b.f.u.r4.d` @type ^`int` := v0;
  #L32cfba.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L32cfbe.  v3:= v3 + 1;
  #L32cfc2.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L32cfc6.  return @kind void;
  #L32cfc8.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L32cfcc.  v4:= "toIndex < fromIndex" @kind object;
  #L32cfd0.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32cfd6.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.u.r4` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/u/r4;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L32cdf0.  v4:= (`java.lang.Float`) v4 @kind object;
  #L32cdf4.  call temp:= `floatValue`(v4) @signature `Ljava/lang/Float;.floatValue:()F` @kind virtual;
  #L32cdfa.  v4:= temp;
  #L32cdfc.  call `d`(v2) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32ce02.  call `b`(v2, v3) @signature `Le/e/a/b/f/u/r4;.b:(I)V` @kind direct;
  #L32ce08.  v0:= v2.`e.e.a.b.f.u.r4.c` @type ^`float`[] @kind object;
  #L32ce0c.  v1:= v0[v3];
  #L32ce10.  v0[v3]:= v4;
  #L32ce14.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L32ce1a.  v3:= temp @kind object;
  #L32ce1c.  return v3 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.u.r4` v1 @kind this) @signature `Le/e/a/b/f/u/r4;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L32cd4c.  v0:= v1.`e.e.a.b.f.u.r4.d` @type ^`int`;
  #L32cd50.  return v0;
}
