record `e.e.a.b.f.q.w4` @kind class @AccessFlag FINAL extends `java.util.AbstractSet` @kind class {
  `e.e.a.b.f.q.z4` `e.e.a.b.f.q.w4.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.q.w4` v0 @kind this, `e.e.a.b.f.q.z4` v1 @kind object) @signature `Le/e/a/b/f/q/w4;.<init>:(Le/e/a/b/f/q/z4;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2e1b90.  v0.`e.e.a.b.f.q.w4.b` @type ^`e.e.a.b.f.q.z4` := v1 @kind object;
  #L2e1b94.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L2e1b9a.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.q.w4` v1 @kind this) @signature `Le/e/a/b/f/q/w4;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e1bac.  v0:= v1.`e.e.a.b.f.q.w4.b` @type ^`e.e.a.b.f.q.z4` @kind object;
  #L2e1bb0.  call `clear`(v0) @signature `Le/e/a/b/f/q/z4;.clear:()V` @kind virtual;
  #L2e1bb6.  return @kind void;
}
procedure `boolean` `contains`(`e.e.a.b.f.q.w4` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/q/w4;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e1abc.  v0:= v1.`e.e.a.b.f.q.w4.b` @type ^`e.e.a.b.f.q.z4` @kind object;
  #L2e1ac0.  call temp:= `containsKey`(v0, v2) @signature `Le/e/a/b/f/q/z4;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L2e1ac6.  v2:= temp;
  #L2e1ac8.  return v2;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.q.w4` v2 @kind this) @signature `Le/e/a/b/f/q/w4;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2e1b50.  v0:= v2.`e.e.a.b.f.q.w4.b` @type ^`e.e.a.b.f.q.z4` @kind object;
  #L2e1b54.  call temp:= `b`(v0) @signature `Le/e/a/b/f/q/z4;.b:()Ljava/util/Map;` @kind virtual;
  #L2e1b5a.  v1:= temp @kind object;
  #L2e1b5c.  if v1 == 0 then goto L2e1b72;
  #L2e1b60.  call temp:= `keySet`(v1) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L2e1b66.  v0:= temp @kind object;
  #L2e1b68.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2e1b6e.  v0:= temp @kind object;
  #L2e1b70.  goto L2e1b7e;
  #L2e1b72.  v1:= new `e.e.a.b.f.q.c0`;
  #L2e1b76.  call `<init>`(v1, v0) @signature `Le/e/a/b/f/q/c0;.<init>:(Le/e/a/b/f/q/z4;)V` @kind direct;
  #L2e1b7c.  v0:= v1 @kind object;
  #L2e1b7e.  return v0 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.q.w4` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/q/w4;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e1adc.  v0:= v1.`e.e.a.b.f.q.w4.b` @type ^`e.e.a.b.f.q.z4` @kind object;
  #L2e1ae0.  call temp:= `b`(v0) @signature `Le/e/a/b/f/q/z4;.b:()Ljava/util/Map;` @kind virtual;
  #L2e1ae6.  v0:= temp @kind object;
  #L2e1ae8.  if v0 == 0 then goto L2e1afe;
  #L2e1aec.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L2e1af2.  v0:= temp @kind object;
  #L2e1af4.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2e1afa.  v2:= temp;
  #L2e1afc.  goto L2e1b18;
  #L2e1afe.  v0:= v1.`e.e.a.b.f.q.w4.b` @type ^`e.e.a.b.f.q.z4` @kind object;
  #L2e1b02.  call temp:= `a`(v0, v2) @signature `Le/e/a/b/f/q/z4;.a:(Le/e/a/b/f/q/z4;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2e1b08.  v2:= temp @kind object;
  #L2e1b0a.  call temp:= `e`() @signature `Le/e/a/b/f/q/z4;.e:()Ljava/lang/Object;` @kind static;
  #L2e1b10.  v0:= temp @kind object;
  #L2e1b12.  if v2 != v0 then goto L2e1b1a;
  #L2e1b16.  v2:= 0I;
  #L2e1b18.  return v2;
  #L2e1b1a.  v2:= 1I;
  #L2e1b1c.  return v2;
}
procedure `int` `size`(`e.e.a.b.f.q.w4` v1 @kind this) @signature `Le/e/a/b/f/q/w4;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e1b30.  v0:= v1.`e.e.a.b.f.q.w4.b` @type ^`e.e.a.b.f.q.z4` @kind object;
  #L2e1b34.  call temp:= `size`(v0) @signature `Le/e/a/b/f/q/z4;.size:()I` @kind virtual;
  #L2e1b3a.  v0:= temp;
  #L2e1b3c.  return v0;
}
