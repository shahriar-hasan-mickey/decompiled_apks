record `e.e.a.b.f.r.p` @kind class @AccessFlag ABSTRACT extends `e.e.a.b.f.r.r` @kind class, `java.io.Serializable` @kind interface {
  `java.util.Map` `e.e.a.b.f.r.p.d` @AccessFlag PRIVATE_TRANSIENT;
  `int` `e.e.a.b.f.r.p.e` @AccessFlag PRIVATE_TRANSIENT;
}
procedure `void` `<init>`(`e.e.a.b.f.r.p` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Le/e/a/b/f/r/p;.<init>:(Ljava/util/Map;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L30bf30.  call `<init>`(v1) @signature `Le/e/a/b/f/r/r;.<init>:()V` @kind direct;
  #L30bf36.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L30bf3c.  v0:= temp;
  #L30bf3e.  if v0 == 0 then goto L30bf48;
  #L30bf42.  v1.`e.e.a.b.f.r.p.d` @type ^`java.util.Map` := v2 @kind object;
  #L30bf46.  return @kind void;
  #L30bf48.  v2:= new `java.lang.IllegalArgumentException`;
  #L30bf4c.  call `<init>`(v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L30bf52.  throw v2;
}
procedure `int` `a`(`e.e.a.b.f.r.p` v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/r/p;.a:(Le/e/a/b/f/r/p;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L30be38.  v0:= v1.`e.e.a.b.f.r.p.e` @type ^`int`;
  #L30be3c.  v0:= v0 + v2 @kind int;
  #L30be3e.  v1.`e.e.a.b.f.r.p.e` @type ^`int` := v0;
  #L30be42.  return v0;
}
procedure `java.util.Map` `a`(`e.e.a.b.f.r.p` v0 @kind object) @signature `Le/e/a/b/f/r/p;.a:(Le/e/a/b/f/r/p;)Ljava/util/Map;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L30bef8.  v0:= v0.`e.e.a.b.f.r.p.d` @type ^`java.util.Map` @kind object;
  #L30befc.  return v0 @kind object;
}
procedure `void` `a`(`e.e.a.b.f.r.p` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/r/p;.a:(Le/e/a/b/f/r/p;Ljava/lang/Object;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L30bfbc.  v0:= v2.`e.e.a.b.f.r.p.d` @type ^`java.util.Map` @kind object;
  #L30bfc0.  v1:= 0I;
  #L30bfc2.  if v0 == 0 then goto L30bff4;
  #L30bfc6.  call temp:= `remove`(v0, v3) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L30bfcc.  v1:= temp @kind object;
  #L30bfce.  goto L30bfd2;
  #L30bfd0.  
  #L30bfd2.  v1:= (`java.util.Collection`) v1 @kind object;
  #L30bfd6.  if v1 == 0 then goto L30bff2;
  #L30bfda.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L30bfe0.  v3:= temp;
  #L30bfe2.  call `clear`(v1) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L30bfe8.  v0:= v2.`e.e.a.b.f.r.p.e` @type ^`int`;
  #L30bfec.  v0:= v0 - v3 @kind int;
  #L30bfee.  v2.`e.e.a.b.f.r.p.e` @type ^`int` := v0;
  #L30bff2.  return @kind void;
  #L30bff4.  throw v1;
  catch `java.lang.ClassCastException` @[L30bfc6..L30bfce] goto L30bfd0;
  catch `java.lang.NullPointerException` @[L30bfc6..L30bfce] goto L30bfd0;
}
procedure `int` `b`(`e.e.a.b.f.r.p` v2 @kind object) @signature `Le/e/a/b/f/r/p;.b:(Le/e/a/b/f/r/p;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L30bdf8.  v0:= v2.`e.e.a.b.f.r.p.e` @type ^`int`;
  #L30bdfc.  v1:= v0 + -1;
  #L30be00.  v2.`e.e.a.b.f.r.p.e` @type ^`int` := v1;
  #L30be04.  return v0;
}
procedure `int` `b`(`e.e.a.b.f.r.p` v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/r/p;.b:(Le/e/a/b/f/r/p;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L30be54.  v0:= v1.`e.e.a.b.f.r.p.e` @type ^`int`;
  #L30be58.  v0:= v0 - v2 @kind int;
  #L30be5a.  v1.`e.e.a.b.f.r.p.e` @type ^`int` := v0;
  #L30be5e.  return v0;
}
procedure `int` `c`(`e.e.a.b.f.r.p` v2 @kind object) @signature `Le/e/a/b/f/r/p;.c:(Le/e/a/b/f/r/p;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L30be18.  v0:= v2.`e.e.a.b.f.r.p.e` @type ^`int`;
  #L30be1c.  v1:= v0 + 1;
  #L30be20.  v2.`e.e.a.b.f.r.p.e` @type ^`int` := v1;
  #L30be24.  return v0;
}
procedure `java.util.Collection` `a`(`java.lang.Object` v0 @kind object, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/r/p;.a:(Ljava/lang/Object;Ljava/util/Collection;)Ljava/util/Collection;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.util.List` `a`(`e.e.a.b.f.r.p` v1 @kind this, `java.lang.Object` v2 @kind object, `java.util.List` v3 @kind object, `e.e.a.b.f.r.m` v4 @kind object) @signature `Le/e/a/b/f/r/p;.a:(Ljava/lang/Object;Ljava/util/List;Le/e/a/b/f/r/m;)Ljava/util/List;` @AccessFlag FINAL {
    temp;
    v0;

  #L30bea8.  v0:= instanceof @variable v3 @type ^`java.util.RandomAccess` @kind boolean;
  #L30beac.  if v0 == 0 then goto L30bebc;
  #L30beb0.  v0:= new `e.e.a.b.f.r.k`;
  #L30beb4.  call `<init>`(v0, v1, v2, v3, v4) @signature `Le/e/a/b/f/r/k;.<init>:(Le/e/a/b/f/r/p;Ljava/lang/Object;Ljava/util/List;Le/e/a/b/f/r/m;)V` @kind direct;
  #L30beba.  goto L30bec6;
  #L30bebc.  v0:= new `e.e.a.b.f.r.o`;
  #L30bec0.  call `<init>`(v0, v1, v2, v3, v4) @signature `Le/e/a/b/f/r/o;.<init>:(Le/e/a/b/f/r/p;Ljava/lang/Object;Ljava/util/List;Le/e/a/b/f/r/m;)V` @kind direct;
  #L30bec6.  return v0 @kind object;
}
procedure `java.util.Set` `a`(`e.e.a.b.f.r.p` v2 @kind this) @signature `Le/e/a/b/f/r/p;.a:()Ljava/util/Set;` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L30bf10.  v0:= new `e.e.a.b.f.r.j`;
  #L30bf14.  v1:= v2.`e.e.a.b.f.r.p.d` @type ^`java.util.Map` @kind object;
  #L30bf18.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/r/j;.<init>:(Le/e/a/b/f/r/p;Ljava/util/Map;)V` @kind direct;
  #L30bf1e.  return v0 @kind object;
}
procedure `boolean` `a`(`e.e.a.b.f.r.p` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/r/p;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L30bd7c.  v0:= v2.`e.e.a.b.f.r.p.d` @type ^`java.util.Map` @kind object;
  #L30bd80.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L30bd86.  v0:= temp @kind object;
  #L30bd88.  v0:= (`java.util.Collection`) v0 @kind object;
  #L30bd8c.  v1:= 1I;
  #L30bd8e.  if v0 != 0 then goto L30bdcc;
  #L30bd92.  call temp:= `e`(v2) @signature `Le/e/a/b/f/r/p;.e:()Ljava/util/Collection;` @kind virtual;
  #L30bd98.  v0:= temp @kind object;
  #L30bd9a.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L30bda0.  v4:= temp;
  #L30bda2.  if v4 == 0 then goto L30bdbc;
  #L30bda6.  v4:= v2.`e.e.a.b.f.r.p.e` @type ^`int`;
  #L30bdaa.  v4:= v4 + v1 @kind int;
  #L30bdac.  v2.`e.e.a.b.f.r.p.e` @type ^`int` := v4;
  #L30bdb0.  v4:= v2.`e.e.a.b.f.r.p.d` @type ^`java.util.Map` @kind object;
  #L30bdb4.  call temp:= `put`(v4, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L30bdba.  return v1;
  #L30bdbc.  v3:= new `java.lang.AssertionError`;
  #L30bdc0.  v4:= "New Collection violated the Collection spec" @kind object;
  #L30bdc4.  call `<init>`(v3, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L30bdca.  throw v3;
  #L30bdcc.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L30bdd2.  v3:= temp;
  #L30bdd4.  if v3 == 0 then goto L30bde4;
  #L30bdd8.  v3:= v2.`e.e.a.b.f.r.p.e` @type ^`int`;
  #L30bddc.  v3:= v3 + v1 @kind int;
  #L30bdde.  v2.`e.e.a.b.f.r.p.e` @type ^`int` := v3;
  #L30bde2.  return v1;
  #L30bde4.  v3:= 0I;
  #L30bde6.  return v3;
}
procedure `java.util.Collection` `b`(`e.e.a.b.f.r.p` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/r/p;.b:(Ljava/lang/Object;)Ljava/util/Collection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30be70.  v0:= v1.`e.e.a.b.f.r.p.d` @type ^`java.util.Map` @kind object;
  #L30be74.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L30be7a.  v0:= temp @kind object;
  #L30be7c.  v0:= (`java.util.Collection`) v0 @kind object;
  #L30be80.  if v0 != 0 then goto L30be8c;
  #L30be84.  call temp:= `e`(v1) @signature `Le/e/a/b/f/r/p;.e:()Ljava/util/Collection;` @kind virtual;
  #L30be8a.  v0:= temp @kind object;
  #L30be8c.  call temp:= `a`(v1, v2, v0) @signature `Le/e/a/b/f/r/p;.a:(Ljava/lang/Object;Ljava/util/Collection;)Ljava/util/Collection;` @kind virtual;
  #L30be92.  v2:= temp @kind object;
  #L30be94.  return v2 @kind object;
}
procedure `java.util.Map` `b`(`e.e.a.b.f.r.p` v2 @kind this) @signature `Le/e/a/b/f/r/p;.b:()Ljava/util/Map;` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L30bed8.  v0:= new `e.e.a.b.f.r.h`;
  #L30bedc.  v1:= v2.`e.e.a.b.f.r.p.d` @type ^`java.util.Map` @kind object;
  #L30bee0.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/r/h;.<init>:(Le/e/a/b/f/r/p;Ljava/util/Map;)V` @kind direct;
  #L30bee6.  return v0 @kind object;
}
procedure `java.util.Collection` `e`() @signature `Le/e/a/b/f/r/p;.e:()Ljava/util/Collection;` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `f`(`e.e.a.b.f.r.p` v2 @kind this) @signature `Le/e/a/b/f/r/p;.f:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L30bf64.  v0:= v2.`e.e.a.b.f.r.p.d` @type ^`java.util.Map` @kind object;
  #L30bf68.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L30bf6e.  v0:= temp @kind object;
  #L30bf70.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L30bf76.  v0:= temp @kind object;
  #L30bf78.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L30bf7e.  v1:= temp;
  #L30bf80.  if v1 == 0 then goto L30bf98;
  #L30bf84.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L30bf8a.  v1:= temp @kind object;
  #L30bf8c.  v1:= (`java.util.Collection`) v1 @kind object;
  #L30bf90.  call `clear`(v1) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L30bf96.  goto L30bf78;
  #L30bf98.  v0:= v2.`e.e.a.b.f.r.p.d` @type ^`java.util.Map` @kind object;
  #L30bf9c.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L30bfa2.  v0:= 0I;
  #L30bfa4.  v2.`e.e.a.b.f.r.p.e` @type ^`int` := v0;
  #L30bfa8.  return @kind void;
}
