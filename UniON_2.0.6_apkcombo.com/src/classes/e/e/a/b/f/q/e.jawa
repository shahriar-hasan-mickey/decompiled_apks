record `e.e.a.b.f.q.e` @kind class @AccessFlag PUBLIC_ABSTRACT extends `e.e.a.b.f.q.vu` @kind class {
  `e.e.a.b.f.q.f` `e.e.a.b.f.q.e.a` @AccessFlag ;
}
global `java.util.logging.Logger` `@@e.e.a.b.f.q.e.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `boolean` `@@e.e.a.b.f.q.e.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/q/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2d1380.  v0:= constclass @type ^`e.e.a.b.f.q.e` @kind object;
  #L2d1384.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2d138a.  v0:= temp @kind object;
  #L2d138c.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L2d1392.  v0:= temp @kind object;
  #L2d1394.  `@@e.e.a.b.f.q.e.b` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L2d1398.  call temp:= `b`() @signature `Le/e/a/b/f/q/n2;.b:()Z` @kind static;
  #L2d139e.  v0:= temp;
  #L2d13a0.  `@@e.e.a.b.f.q.e.c` @type ^`boolean` := v0 @kind boolean;
  #L2d13a4.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.q.e` v0 @kind this) @signature `Le/e/a/b/f/q/e;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2d13b8.  call `<init>`(v0) @signature `Le/e/a/b/f/q/vu;.<init>:()V` @kind direct;
  #L2d13be.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.q.e` v0 @kind this, `e.e.a.b.f.q.lv` v1 @kind object) @signature `Le/e/a/b/f/q/e;.<init>:(Le/e/a/b/f/q/lv;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2d13d0.  call `<init>`(v0) @signature `Le/e/a/b/f/q/vu;.<init>:()V` @kind direct;
  #L2d13d6.  return @kind void;
}
procedure `int` `a`(`int` v2 , `e.e.a.b.f.q.b1` v3 @kind object, `e.e.a.b.f.q.n1` v4 @kind object) @signature `Le/e/a/b/f/q/e;.a:(ILe/e/a/b/f/q/b1;Le/e/a/b/f/q/n1;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L2d11a8.  v2:= v2 ^< 3;
  #L2d11ac.  call temp:= `g`(v2) @signature `Le/e/a/b/f/q/e;.g:(I)I` @kind static;
  #L2d11b2.  v2:= temp;
  #L2d11b4.  v2:= v2 + v2 @kind int;
  #L2d11b6.  v3:= (`e.e.a.b.f.q.su`) v3 @kind object;
  #L2d11ba.  call temp:= `c`(v3) @signature `Le/e/a/b/f/q/su;.c:()I` @kind virtual;
  #L2d11c0.  v0:= temp;
  #L2d11c2.  v1:= -1I;
  #L2d11c4.  if v0 != v1 then goto L2d11d6;
  #L2d11c8.  call temp:= `d`(v4, v3) @signature `Le/e/a/b/f/q/n1;.d:(Ljava/lang/Object;)I` @kind interface;
  #L2d11ce.  v0:= temp;
  #L2d11d0.  call `a`(v3, v0) @signature `Le/e/a/b/f/q/su;.a:(I)V` @kind virtual;
  #L2d11d6.  v2:= v2 + v0 @kind int;
  #L2d11d8.  return v2;
}
procedure `int` `a`(`e.e.a.b.f.q.b1` v2 @kind object, `e.e.a.b.f.q.n1` v3 @kind object) @signature `Le/e/a/b/f/q/e;.a:(Le/e/a/b/f/q/b1;Le/e/a/b/f/q/n1;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L2d1150.  v2:= (`e.e.a.b.f.q.su`) v2 @kind object;
  #L2d1154.  call temp:= `c`(v2) @signature `Le/e/a/b/f/q/su;.c:()I` @kind virtual;
  #L2d115a.  v0:= temp;
  #L2d115c.  v1:= -1I;
  #L2d115e.  if v0 != v1 then goto L2d1170;
  #L2d1162.  call temp:= `d`(v3, v2) @signature `Le/e/a/b/f/q/n1;.d:(Ljava/lang/Object;)I` @kind interface;
  #L2d1168.  v0:= temp;
  #L2d116a.  call `a`(v2, v0) @signature `Le/e/a/b/f/q/su;.a:(I)V` @kind virtual;
  #L2d1170.  call temp:= `g`(v0) @signature `Le/e/a/b/f/q/e;.g:(I)I` @kind static;
  #L2d1176.  v2:= temp;
  #L2d1178.  v2:= v2 + v0 @kind int;
  #L2d117a.  return v2;
}
procedure `int` `a`(`e.e.a.b.f.q.hv` v1 @kind object) @signature `Le/e/a/b/f/q/e;.a:(Le/e/a/b/f/q/hv;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2d112c.  call temp:= `d`(v1) @signature `Le/e/a/b/f/q/hv;.d:()I` @kind virtual;
  #L2d1132.  v1:= temp;
  #L2d1134.  call temp:= `g`(v1) @signature `Le/e/a/b/f/q/e;.g:(I)I` @kind static;
  #L2d113a.  v0:= temp;
  #L2d113c.  v0:= v0 + v1 @kind int;
  #L2d113e.  return v0;
}
procedure `int` `a`(`e.e.a.b.f.q.j0` v1 @kind object) @signature `Le/e/a/b/f/q/e;.a:(Le/e/a/b/f/q/j0;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2d133c.  call temp:= `a`(v1) @signature `Le/e/a/b/f/q/j0;.a:()I` @kind virtual;
  #L2d1342.  v1:= temp;
  #L2d1344.  call temp:= `g`(v1) @signature `Le/e/a/b/f/q/e;.g:(I)I` @kind static;
  #L2d134a.  v0:= temp;
  #L2d134c.  v0:= v0 + v1 @kind int;
  #L2d134e.  return v0;
}
procedure `int` `a`(`java.lang.String` v1 @kind object) @signature `Le/e/a/b/f/q/e;.a:(Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2d12f8.  call temp:= `a`(v1) @signature `Le/e/a/b/f/q/s2;.a:(Ljava/lang/CharSequence;)I` @kind static;
  #L2d12fe.  v1:= temp;
  #L2d1300.  goto L2d1310;
  #L2d1302.  v0:= `@@e.e.a.b.f.q.b0.a` @type ^`java.nio.charset.Charset` @kind object;
  #L2d1306.  call temp:= `getBytes`(v1, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L2d130c.  v1:= temp @kind object;
  #L2d130e.  v1:= length @variable v1;
  #L2d1310.  call temp:= `g`(v1) @signature `Le/e/a/b/f/q/e;.g:(I)I` @kind static;
  #L2d1316.  v0:= temp;
  #L2d1318.  v0:= v0 + v1 @kind int;
  #L2d131a.  return v0;
  catch `e.e.a.b.f.q.q2` @[L2d12f8..L2d1300] goto L2d1302;
}
procedure `e.e.a.b.f.q.e` `a`(`byte`[] v3 @kind object) @signature `Le/e/a/b/f/q/e;.a:([B)Le/e/a/b/f/q/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2d110c.  v0:= new `e.e.a.b.f.q.c`;
  #L2d1110.  v1:= length @variable v3;
  #L2d1112.  v2:= 0I;
  #L2d1114.  call `<init>`(v0, v3, v2, v1) @signature `Le/e/a/b/f/q/c;.<init>:([BII)V` @kind direct;
  #L2d111a.  return v0 @kind object;
}
procedure `long` `c`(`long` v3 ) @signature `Le/e/a/b/f/q/e;.c:(J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2d1360.  v0:= v3 + v3 @kind long;
  #L2d1364.  v2:= 63I;
  #L2d1368.  v3:= v3 ^> v2 @kind long;
  #L2d136a.  v3:= v3 ^~ v0 @kind long;
  #L2d136c.  return v3 @kind wide;
}
procedure `boolean` `c`() @signature `Le/e/a/b/f/q/e;.c:()Z` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L2d10f4.  v0:= `@@e.e.a.b.f.q.e.c` @type ^`boolean` @kind boolean;
  #L2d10f8.  return v0;
}
procedure `int` `d`(`int` v1 ) @signature `Le/e/a/b/f/q/e;.d:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2d118c.  v0:= v1 + v1 @kind int;
  #L2d1190.  v1:= v1 ^> 31;
  #L2d1194.  v1:= v1 ^~ v0 @kind int;
  #L2d1196.  return v1;
}
procedure `int` `d`(`long` v7 ) @signature `Le/e/a/b/f/q/e;.d:(J)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2d1278.  v0:= -128L;
  #L2d127c.  v0:= v0 ^& v7 @kind long;
  #L2d127e.  v2:= 1I;
  #L2d1280.  v3:= 0L;
  #L2d1284.  v5:= lcmp(v0, v3);
  #L2d1288.  if v5 != 0 then goto L2d128e;
  #L2d128c.  return v2;
  #L2d128e.  v0:= lcmp(v7, v3);
  #L2d1292.  if v0 >= 0 then goto L2d129c;
  #L2d1296.  v7:= 10I;
  #L2d129a.  return v7;
  #L2d129c.  v0:= -34359738368L;
  #L2d12a6.  v0:= v0 ^& v7 @kind long;
  #L2d12a8.  v5:= lcmp(v0, v3);
  #L2d12ac.  if v5 == 0 then goto L2d12ba;
  #L2d12b0.  v0:= 28I;
  #L2d12b4.  v7:= v7 ^>> v0 @kind long;
  #L2d12b6.  v0:= 6I;
  #L2d12b8.  goto L2d12bc;
  #L2d12ba.  v0:= 2I;
  #L2d12bc.  v5:= -2097152L;
  #L2d12c2.  v5:= v5 ^& v7 @kind long;
  #L2d12c4.  v1:= lcmp(v5, v3);
  #L2d12c8.  if v1 == 0 then goto L2d12d6;
  #L2d12cc.  v0:= v0 + 2;
  #L2d12d0.  v1:= 14I;
  #L2d12d4.  v7:= v7 ^>> v1 @kind long;
  #L2d12d6.  v5:= -16384L;
  #L2d12da.  v7:= v7 ^& v5 @kind long;
  #L2d12dc.  v1:= lcmp(v7, v3);
  #L2d12e0.  if v1 == 0 then goto L2d12e6;
  #L2d12e4.  v0:= v0 + v2 @kind int;
  #L2d12e6.  return v0;
}
procedure `int` `e`(`int` v0 ) @signature `Le/e/a/b/f/q/e;.e:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2d11ec.  v0:= v0 ^< 3;
  #L2d11f0.  call temp:= `g`(v0) @signature `Le/e/a/b/f/q/e;.g:(I)I` @kind static;
  #L2d11f6.  v0:= temp;
  #L2d11f8.  return v0;
}
procedure `int` `f`(`int` v0 ) @signature `Le/e/a/b/f/q/e;.f:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2d120c.  if v0 < 0 then goto L2d121a;
  #L2d1210.  call temp:= `g`(v0) @signature `Le/e/a/b/f/q/e;.g:(I)I` @kind static;
  #L2d1216.  v0:= temp;
  #L2d1218.  return v0;
  #L2d121a.  v0:= 10I;
  #L2d121e.  return v0;
}
procedure `int` `g`(`int` v1 ) @signature `Le/e/a/b/f/q/e;.g:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2d1230.  v0:= v1 ^& -128;
  #L2d1234.  if v0 != 0 then goto L2d123c;
  #L2d1238.  v1:= 1I;
  #L2d123a.  return v1;
  #L2d123c.  v0:= v1 ^& -16384;
  #L2d1240.  if v0 != 0 then goto L2d1248;
  #L2d1244.  v1:= 2I;
  #L2d1246.  return v1;
  #L2d1248.  v0:= -2097152I;
  #L2d124c.  v0:= v0 ^& v1 @kind int;
  #L2d124e.  if v0 != 0 then goto L2d1256;
  #L2d1252.  v1:= 3I;
  #L2d1254.  return v1;
  #L2d1256.  v0:= -268435456I;
  #L2d125a.  v1:= v1 ^& v0 @kind int;
  #L2d125c.  if v1 != 0 then goto L2d1264;
  #L2d1260.  v1:= 4I;
  #L2d1262.  return v1;
  #L2d1264.  v1:= 5I;
  #L2d1266.  return v1;
}
procedure `void` `a`(`e.e.a.b.f.q.e` v2 @kind this) @signature `Le/e/a/b/f/q/e;.a:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2d13e8.  call temp:= `b`(v2) @signature `Le/e/a/b/f/q/e;.b:()I` @kind virtual;
  #L2d13ee.  v0:= temp;
  #L2d13f0.  if v0 != 0 then goto L2d13f6;
  #L2d13f4.  return @kind void;
  #L2d13f6.  v0:= new `java.lang.IllegalStateException`;
  #L2d13fa.  v1:= "Did not write as much data as expected." @kind object;
  #L2d13fe.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d1404.  throw v0;
}
procedure `void` `a`(`byte` v0 ) @signature `Le/e/a/b/f/q/e;.a:(B)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `a`(`int` v0 ) @signature `Le/e/a/b/f/q/e;.a:(I)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `a`(`int` v0 , `int` v1 ) @signature `Le/e/a/b/f/q/e;.a:(II)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `a`(`int` v0 , `long` v1 ) @signature `Le/e/a/b/f/q/e;.a:(IJ)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `a`(`int` v0 , `e.e.a.b.f.q.hv` v1 @kind object) @signature `Le/e/a/b/f/q/e;.a:(ILe/e/a/b/f/q/hv;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `a`(`int` v0 , `java.lang.String` v1 @kind object) @signature `Le/e/a/b/f/q/e;.a:(ILjava/lang/String;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `a`(`int` v0 , `boolean` v1 ) @signature `Le/e/a/b/f/q/e;.a:(IZ)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `a`(`long` v0 ) @signature `Le/e/a/b/f/q/e;.a:(J)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `a`(`e.e.a.b.f.q.e` v6 @kind this, `java.lang.String` v7 @kind object, `e.e.a.b.f.q.q2` v8 @kind object) @signature `Le/e/a/b/f/q/e;.a:(Ljava/lang/String;Le/e/a/b/f/q/q2;)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2d1418.  v0:= `@@e.e.a.b.f.q.e.b` @type ^`java.util.logging.Logger` @kind object;
  #L2d141c.  v1:= `@@java.util.logging.Level.WARNING` @type ^`java.util.logging.Level` @kind object;
  #L2d1420.  v2:= "com.google.protobuf.CodedOutputStream" @kind object;
  #L2d1424.  v3:= "inefficientWriteStringNoTag" @kind object;
  #L2d1428.  v4:= "Converting ill-formed UTF-16. Your Protocol Buffer will not round trip correctly!" @kind object;
  #L2d142c.  v5:= v8 @kind object;
  #L2d142e.  call `logp`(v0, v1, v2, v3, v4, v5) @signature `Ljava/util/logging/Logger;.logp:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L2d1434.  v8:= `@@e.e.a.b.f.q.b0.a` @type ^`java.nio.charset.Charset` @kind object;
  #L2d1438.  call temp:= `getBytes`(v7, v8) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L2d143e.  v7:= temp @kind object;
  #L2d1440.  v8:= length @variable v7;
  #L2d1442.  call `b`(v6, v8) @signature `Le/e/a/b/f/q/e;.b:(I)V` @kind virtual;
  #L2d1448.  v0:= 0I;
  #L2d144a.  call `a`(v6, v7, v0, v8) @signature `Le/e/a/b/f/q/e;.a:([BII)V` @kind virtual;
  #L2d1450.  return @kind void;
  #L2d1452.  v7:= Exception @type ^`e.e.a.b.f.q.d` @kind object;
  #L2d1454.  throw v7;
  #L2d1456.  v7:= Exception @type ^`java.lang.IndexOutOfBoundsException` @kind object;
  #L2d1458.  v8:= new `e.e.a.b.f.q.d`;
  #L2d145c.  call `<init>`(v8, v7) @signature `Le/e/a/b/f/q/d;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L2d1462.  throw v8;
  catch `java.lang.IndexOutOfBoundsException` @[L2d1440..L2d1450] goto L2d1456;
  catch `e.e.a.b.f.q.d` @[L2d1440..L2d1450] goto L2d1452;
}
procedure `void` `a`(`byte`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Le/e/a/b/f/q/e;.a:([BII)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `b`() @signature `Le/e/a/b/f/q/e;.b:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `b`(`int` v0 ) @signature `Le/e/a/b/f/q/e;.b:(I)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `b`(`int` v0 , `int` v1 ) @signature `Le/e/a/b/f/q/e;.b:(II)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `b`(`int` v0 , `long` v1 ) @signature `Le/e/a/b/f/q/e;.b:(IJ)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `b`(`long` v0 ) @signature `Le/e/a/b/f/q/e;.b:(J)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `c`(`int` v0 ) @signature `Le/e/a/b/f/q/e;.c:(I)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `c`(`int` v0 , `int` v1 ) @signature `Le/e/a/b/f/q/e;.c:(II)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `d`(`int` v0 , `int` v1 ) @signature `Le/e/a/b/f/q/e;.d:(II)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
