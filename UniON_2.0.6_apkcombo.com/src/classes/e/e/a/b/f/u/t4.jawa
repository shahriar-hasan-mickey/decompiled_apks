record `e.e.a.b.f.u.t4` @kind class @AccessFlag FINAL extends `e.e.a.b.f.u.c6` @kind interface {
}
global `e.e.a.b.f.u.t4` `@@e.e.a.b.f.u.t4.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/u/t4;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L32de90.  v0:= new `e.e.a.b.f.u.t4`;
  #L32de94.  call `<init>`(v0) @signature `Le/e/a/b/f/u/t4;.<init>:()V` @kind direct;
  #L32de9a.  `@@e.e.a.b.f.u.t4.a` @type ^`e.e.a.b.f.u.t4` := v0 @kind object;
  #L32de9e.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.u.t4` v0 @kind this) @signature `Le/e/a/b/f/u/t4;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L32deb0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32deb6.  return @kind void;
}
procedure `e.e.a.b.f.u.t4` `a`() @signature `Le/e/a/b/f/u/t4;.a:()Le/e/a/b/f/u/t4;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L32dda0.  v0:= `@@e.e.a.b.f.u.t4.a` @type ^`e.e.a.b.f.u.t4` @kind object;
  #L32dda4.  return v0 @kind object;
}
procedure `boolean` `a`(`e.e.a.b.f.u.t4` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Le/e/a/b/f/u/t4;.a:(Ljava/lang/Class;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L32dd80.  v0:= constclass @type ^`e.e.a.b.f.u.s4` @kind object;
  #L32dd84.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L32dd8a.  v2:= temp;
  #L32dd8c.  return v2;
}
procedure `e.e.a.b.f.u.z5` `b`(`e.e.a.b.f.u.t4` v4 @kind this, `java.lang.Class` v5 @kind object) @signature `Le/e/a/b/f/u/t4;.b:(Ljava/lang/Class;)Le/e/a/b/f/u/z5;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32ddb8.  v0:= constclass @type ^`e.e.a.b.f.u.s4` @kind object;
  #L32ddbc.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L32ddc2.  v1:= temp;
  #L32ddc4.  if v1 != 0 then goto L32de08;
  #L32ddc8.  v0:= new `java.lang.IllegalArgumentException`;
  #L32ddcc.  v1:= "Unsupported message type: " @kind object;
  #L32ddd0.  call temp:= `getName`(v5) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L32ddd6.  v5:= temp @kind object;
  #L32ddd8.  call temp:= `valueOf`(v5) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L32ddde.  v5:= temp @kind object;
  #L32dde0.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32dde6.  v2:= temp;
  #L32dde8.  if v2 == 0 then goto L32ddf6;
  #L32ddec.  call temp:= `concat`(v1, v5) @signature `Ljava/lang/String;.concat:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L32ddf2.  v5:= temp @kind object;
  #L32ddf4.  goto L32de00;
  #L32ddf6.  v5:= new `java.lang.String`;
  #L32ddfa.  call `<init>`(v5, v1) @signature `Ljava/lang/String;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32de00.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32de06.  throw v0;
  #L32de08.  call temp:= `asSubclass`(v5, v0) @signature `Ljava/lang/Class;.asSubclass:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L32de0e.  v0:= temp @kind object;
  #L32de10.  call temp:= `a`(v0) @signature `Le/e/a/b/f/u/s4;.a:(Ljava/lang/Class;)Le/e/a/b/f/u/s4;` @kind static;
  #L32de16.  v0:= temp @kind object;
  #L32de18.  v1:= `@@e.e.a.b.f.u.s4$g.c` @type ^`int`;
  #L32de1c.  v2:= 0I;
  #L32de1e.  call temp:= `a`(v0, v1, v2, v2) @signature `Le/e/a/b/f/u/s4;.a:(ILjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L32de24.  v0:= temp @kind object;
  #L32de26.  v0:= (`e.e.a.b.f.u.z5`) v0 @kind object;
  #L32de2a.  return v0 @kind object;
  #L32de2c.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L32de2e.  v1:= new `java.lang.RuntimeException`;
  #L32de32.  v2:= "Unable to get message info for " @kind object;
  #L32de36.  call temp:= `getName`(v5) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L32de3c.  v5:= temp @kind object;
  #L32de3e.  call temp:= `valueOf`(v5) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L32de44.  v5:= temp @kind object;
  #L32de46.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32de4c.  v3:= temp;
  #L32de4e.  if v3 == 0 then goto L32de5c;
  #L32de52.  call temp:= `concat`(v2, v5) @signature `Ljava/lang/String;.concat:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L32de58.  v5:= temp @kind object;
  #L32de5a.  goto L32de66;
  #L32de5c.  v5:= new `java.lang.String`;
  #L32de60.  call `<init>`(v5, v2) @signature `Ljava/lang/String;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32de66.  call `<init>`(v1, v5, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L32de6c.  throw v1;
  catch `java.lang.Exception` @[L32de08..L32de2a] goto L32de2c;
}
