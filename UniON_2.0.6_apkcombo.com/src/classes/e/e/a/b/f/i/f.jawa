record `e.e.a.b.f.i.f` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.AbstractCollection` @kind class, `java.io.Serializable` @kind interface {
}
global `java.lang.Object`[] `@@e.e.a.b.f.i.f.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/i/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L21bf30.  v0:= 0I;
  #L21bf32.  v0:= new `java.lang.Object`[v0];
  #L21bf36.  `@@e.e.a.b.f.i.f.b` @type ^`java.lang.Object`[] := v0 @kind object;
  #L21bf3a.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.i.f` v0 @kind this) @signature `Le/e/a/b/f/i/f;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L21bf4c.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L21bf52.  return @kind void;
}
procedure `int` `a`(`e.e.a.b.f.i.f` v0 @kind this, `java.lang.Object`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/i/f;.a:([Ljava/lang/Object;I)I` @AccessFlag  {
    temp;

  #L21be64.  v1:= 0I;
  #L21be66.  throw v1;
}
procedure `boolean` `add`(`e.e.a.b.f.i.f` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/i/f;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L21bda0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L21bda4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L21bdaa.  throw v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.i.f` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/i/f;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L21bdbc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L21bdc0.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L21bdc6.  throw v1;
}
procedure `int` `c`(`e.e.a.b.f.i.f` v1 @kind this) @signature `Le/e/a/b/f/i/f;.c:()I` @AccessFlag  {
    temp;
    v0;

  #L21be48.  v0:= new `java.lang.UnsupportedOperationException`;
  #L21be4c.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L21be52.  throw v0;
}
procedure `void` `clear`(`e.e.a.b.f.i.f` v1 @kind this) @signature `Le/e/a/b/f/i/f;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L21bf64.  v0:= new `java.lang.UnsupportedOperationException`;
  #L21bf68.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L21bf6e.  throw v0;
}
procedure `boolean` `contains`(`java.lang.Object` v0 @kind object) @signature `Le/e/a/b/f/i/f;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `d`(`e.e.a.b.f.i.f` v1 @kind this) @signature `Le/e/a/b/f/i/f;.d:()I` @AccessFlag  {
    temp;
    v0;

  #L21be2c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L21be30.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L21be36.  throw v0;
}
procedure `boolean` `remove`(`e.e.a.b.f.i.f` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/i/f;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L21bdd8.  v1:= new `java.lang.UnsupportedOperationException`;
  #L21bddc.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L21bde2.  throw v1;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.i.f` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/i/f;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L21bdf4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L21bdf8.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L21bdfe.  throw v1;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.i.f` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/i/f;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L21be10.  v1:= new `java.lang.UnsupportedOperationException`;
  #L21be14.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L21be1a.  throw v1;
}
procedure `java.lang.Object`[] `toArray`(`e.e.a.b.f.i.f` v1 @kind this) @signature `Le/e/a/b/f/i/f;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L21be78.  v0:= `@@e.e.a.b.f.i.f.b` @type ^`java.lang.Object`[] @kind object;
  #L21be7c.  call temp:= `toArray`(v1, v0) @signature `Le/e/a/b/f/i/f;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L21be82.  v0:= temp @kind object;
  #L21be84.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`e.e.a.b.f.i.f` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Le/e/a/b/f/i/f;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L21be98.  v0:= 0I;
  #L21be9a.  if v4 == 0 then goto L21bf0a;
  #L21be9e.  call temp:= `size`(v3) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L21bea4.  v1:= temp;
  #L21bea6.  v2:= length @variable v4;
  #L21bea8.  if v2 >= v1 then goto L21bef8;
  #L21beac.  call temp:= `zzb`(v3) @signature `Le/e/a/b/f/i/f;.zzb:()[Ljava/lang/Object;` @kind virtual;
  #L21beb2.  v0:= temp @kind object;
  #L21beb4.  if v0 != 0 then goto L21bed6;
  #L21beb8.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L21bebe.  v4:= temp @kind object;
  #L21bec0.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L21bec6.  v4:= temp @kind object;
  #L21bec8.  call temp:= `newInstance`(v4, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L21bece.  v4:= temp @kind object;
  #L21bed0.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L21bed4.  goto L21bf00;
  #L21bed6.  call temp:= `d`(v3) @signature `Le/e/a/b/f/i/f;.d:()I` @kind virtual;
  #L21bedc.  v1:= temp;
  #L21bede.  call temp:= `c`(v3) @signature `Le/e/a/b/f/i/f;.c:()I` @kind virtual;
  #L21bee4.  v2:= temp;
  #L21bee6.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L21beec.  v4:= temp @kind object;
  #L21beee.  call temp:= `copyOfRange`(v0, v1, v2, v4) @signature `Ljava/util/Arrays;.copyOfRange:([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;` @kind static;
  #L21bef4.  v4:= temp @kind object;
  #L21bef6.  return v4 @kind object;
  #L21bef8.  if v2 <= v1 then goto L21bf00;
  #L21befc.  v4[v1]:= v0 @kind object;
  #L21bf00.  v0:= 0I;
  #L21bf02.  call temp:= `a`(v3, v4, v0) @signature `Le/e/a/b/f/i/f;.a:([Ljava/lang/Object;I)I` @kind virtual;
  #L21bf08.  return v4 @kind object;
  #L21bf0a.  throw v0;
}
procedure `java.lang.Object`[] `zzb`(`e.e.a.b.f.i.f` v1 @kind this) @signature `Le/e/a/b/f/i/f;.zzb:()[Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L21bf1c.  v0:= 0I;
  #L21bf1e.  return v0 @kind object;
}
