record `e.e.a.b.f.b.e1` @kind class @AccessFlag FINAL extends `e.e.a.b.f.b.j2` @kind interface {
}
global `e.e.a.b.f.b.e1` `@@e.e.a.b.f.b.e1.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/b/e1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2011c4.  v0:= new `e.e.a.b.f.b.e1`;
  #L2011c8.  call `<init>`(v0) @signature `Le/e/a/b/f/b/e1;.<init>:()V` @kind direct;
  #L2011ce.  `@@e.e.a.b.f.b.e1.a` @type ^`e.e.a.b.f.b.e1` := v0 @kind object;
  #L2011d2.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.b.e1` v0 @kind this) @signature `Le/e/a/b/f/b/e1;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2011e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2011ea.  return @kind void;
}
procedure `e.e.a.b.f.b.e1` `a`() @signature `Le/e/a/b/f/b/e1;.a:()Le/e/a/b/f/b/e1;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2010d4.  v0:= `@@e.e.a.b.f.b.e1.a` @type ^`e.e.a.b.f.b.e1` @kind object;
  #L2010d8.  return v0 @kind object;
}
procedure `boolean` `a`(`e.e.a.b.f.b.e1` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Le/e/a/b/f/b/e1;.a:(Ljava/lang/Class;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2010b4.  v0:= constclass @type ^`e.e.a.b.f.b.f1` @kind object;
  #L2010b8.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L2010be.  v2:= temp;
  #L2010c0.  return v2;
}
procedure `e.e.a.b.f.b.i2` `b`(`e.e.a.b.f.b.e1` v4 @kind this, `java.lang.Class` v5 @kind object) @signature `Le/e/a/b/f/b/e1;.b:(Ljava/lang/Class;)Le/e/a/b/f/b/i2;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2010ec.  v0:= constclass @type ^`e.e.a.b.f.b.f1` @kind object;
  #L2010f0.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L2010f6.  v1:= temp;
  #L2010f8.  if v1 != 0 then goto L20113c;
  #L2010fc.  v0:= new `java.lang.IllegalArgumentException`;
  #L201100.  v1:= "Unsupported message type: " @kind object;
  #L201104.  call temp:= `getName`(v5) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L20110a.  v5:= temp @kind object;
  #L20110c.  call temp:= `valueOf`(v5) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L201112.  v5:= temp @kind object;
  #L201114.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L20111a.  v2:= temp;
  #L20111c.  if v2 == 0 then goto L20112a;
  #L201120.  call temp:= `concat`(v1, v5) @signature `Ljava/lang/String;.concat:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L201126.  v5:= temp @kind object;
  #L201128.  goto L201134;
  #L20112a.  v5:= new `java.lang.String`;
  #L20112e.  call `<init>`(v5, v1) @signature `Ljava/lang/String;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L201134.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20113a.  throw v0;
  #L20113c.  call temp:= `asSubclass`(v5, v0) @signature `Ljava/lang/Class;.asSubclass:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L201142.  v0:= temp @kind object;
  #L201144.  call temp:= `a`(v0) @signature `Le/e/a/b/f/b/f1;.a:(Ljava/lang/Class;)Le/e/a/b/f/b/f1;` @kind static;
  #L20114a.  v0:= temp @kind object;
  #L20114c.  v1:= `@@e.e.a.b.f.b.f1$e.c` @type ^`int`;
  #L201150.  v2:= 0I;
  #L201152.  call temp:= `a`(v0, v1, v2, v2) @signature `Le/e/a/b/f/b/f1;.a:(ILjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L201158.  v0:= temp @kind object;
  #L20115a.  v0:= (`e.e.a.b.f.b.i2`) v0 @kind object;
  #L20115e.  return v0 @kind object;
  #L201160.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L201162.  v1:= new `java.lang.RuntimeException`;
  #L201166.  v2:= "Unable to get message info for " @kind object;
  #L20116a.  call temp:= `getName`(v5) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L201170.  v5:= temp @kind object;
  #L201172.  call temp:= `valueOf`(v5) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L201178.  v5:= temp @kind object;
  #L20117a.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L201180.  v3:= temp;
  #L201182.  if v3 == 0 then goto L201190;
  #L201186.  call temp:= `concat`(v2, v5) @signature `Ljava/lang/String;.concat:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L20118c.  v5:= temp @kind object;
  #L20118e.  goto L20119a;
  #L201190.  v5:= new `java.lang.String`;
  #L201194.  call `<init>`(v5, v2) @signature `Ljava/lang/String;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20119a.  call `<init>`(v1, v5, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L2011a0.  throw v1;
  catch `java.lang.Exception` @[L20113c..L20115e] goto L201160;
}
