record `e.e.a.b.f.k.r` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v5 , `int` v6 , `java.lang.String` v7 @kind object) @signature `Le/e/a/b/f/k/r;.a:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L243128.  if v5 < 0 then goto L243134;
  #L24312c.  if v5 < v6 then goto L243132;
  #L243130.  goto L243134;
  #L243132.  return v5;
  #L243134.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L243138.  v0:= "index" @kind object;
  #L24313c.  v1:= 1I;
  #L24313e.  v2:= 0I;
  #L243140.  v3:= 2I;
  #L243142.  if v5 < 0 then goto L2431ac;
  #L243146.  if v6 >= 0 then goto L24317c;
  #L24314a.  v5:= new `java.lang.IllegalArgumentException`;
  #L24314e.  v7:= new `java.lang.StringBuilder`;
  #L243152.  v0:= 26I;
  #L243156.  call `<init>`(v7, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L24315c.  v0:= "negative size: " @kind object;
  #L243160.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L243166.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24316c.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L243172.  v6:= temp @kind object;
  #L243174.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24317a.  throw v5;
  #L24317c.  v4:= 3I;
  #L24317e.  v4:= new `java.lang.Object`[v4];
  #L243182.  v4[v2]:= v0 @kind object;
  #L243186.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L24318c.  v5:= temp @kind object;
  #L24318e.  v4[v1]:= v5 @kind object;
  #L243192.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L243198.  v5:= temp @kind object;
  #L24319a.  v4[v3]:= v5 @kind object;
  #L24319e.  v5:= "%s (%s) must be less than size (%s)" @kind object;
  #L2431a2.  call temp:= `a`(v5, v4) @signature `Le/e/a/b/f/k/s;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2431a8.  v5:= temp @kind object;
  #L2431aa.  goto L2431cc;
  #L2431ac.  v6:= new `java.lang.Object`[v3];
  #L2431b0.  v6[v2]:= v0 @kind object;
  #L2431b4.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2431ba.  v5:= temp @kind object;
  #L2431bc.  v6[v1]:= v5 @kind object;
  #L2431c0.  v5:= "%s (%s) must not be negative" @kind object;
  #L2431c4.  call temp:= `a`(v5, v6) @signature `Le/e/a/b/f/k/s;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2431ca.  v5:= temp @kind object;
  #L2431cc.  call `<init>`(v7, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2431d2.  throw v7;
}
procedure `void` `a`(`int` v2 , `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/k/r;.a:(III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2432e4.  if v2 < 0 then goto L2432f4;
  #L2432e8.  if v3 < v2 then goto L2432f4;
  #L2432ec.  if v3 <= v4 then goto L2432f2;
  #L2432f0.  goto L2432f4;
  #L2432f2.  return @kind void;
  #L2432f4.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L2432f8.  if v2 < 0 then goto L243348;
  #L2432fc.  if v2 > v4 then goto L243348;
  #L243300.  if v3 < 0 then goto L24333a;
  #L243304.  if v3 <= v4 then goto L24330a;
  #L243308.  goto L24333a;
  #L24330a.  v4:= 2I;
  #L24330c.  v4:= new `java.lang.Object`[v4];
  #L243310.  v1:= 0I;
  #L243312.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L243318.  v3:= temp @kind object;
  #L24331a.  v4[v1]:= v3 @kind object;
  #L24331e.  v3:= 1I;
  #L243320.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L243326.  v2:= temp @kind object;
  #L243328.  v4[v3]:= v2 @kind object;
  #L24332c.  v2:= "end index (%s) must not be less than start index (%s)" @kind object;
  #L243330.  call temp:= `a`(v2, v4) @signature `Le/e/a/b/f/k/s;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L243336.  v2:= temp @kind object;
  #L243338.  goto L243354;
  #L24333a.  v2:= "end index" @kind object;
  #L24333e.  call temp:= `c`(v3, v4, v2) @signature `Le/e/a/b/f/k/r;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L243344.  v2:= temp @kind object;
  #L243346.  goto L243354;
  #L243348.  v3:= "start index" @kind object;
  #L24334c.  call temp:= `c`(v2, v4, v3) @signature `Le/e/a/b/f/k/r;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L243352.  v2:= temp @kind object;
  #L243354.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24335a.  throw v0;
}
procedure `void` `a`(`boolean` v0 , `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/k/r;.a:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2432bc.  if v0 == 0 then goto L2432c2;
  #L2432c0.  return @kind void;
  #L2432c2.  v0:= new `java.lang.IllegalStateException`;
  #L2432c6.  v1:= (`java.lang.String`) v1 @kind object;
  #L2432ca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2432d0.  throw v0;
}
procedure `int` `b`(`int` v1 , `int` v2 , `java.lang.String` v3 @kind object) @signature `Le/e/a/b/f/k/r;.b:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2431e4.  if v1 < 0 then goto L2431ee;
  #L2431e8.  if v1 > v2 then goto L2431ee;
  #L2431ec.  return v1;
  #L2431ee.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L2431f2.  v0:= "index" @kind object;
  #L2431f6.  call temp:= `c`(v1, v2, v0) @signature `Le/e/a/b/f/k/r;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L2431fc.  v1:= temp @kind object;
  #L2431fe.  call `<init>`(v3, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L243204.  throw v3;
}
procedure `java.lang.String` `c`(`int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Le/e/a/b/f/k/r;.c:(IILjava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L243218.  v0:= 1I;
  #L24321a.  v1:= 0I;
  #L24321c.  v2:= 2I;
  #L24321e.  if v4 >= 0 then goto L243244;
  #L243222.  v5:= new `java.lang.Object`[v2];
  #L243226.  v5[v1]:= v6 @kind object;
  #L24322a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L243230.  v4:= temp @kind object;
  #L243232.  v5[v0]:= v4 @kind object;
  #L243236.  v4:= "%s (%s) must not be negative" @kind object;
  #L24323a.  call temp:= `a`(v4, v5) @signature `Le/e/a/b/f/k/s;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L243240.  v4:= temp @kind object;
  #L243242.  return v4 @kind object;
  #L243244.  if v5 < 0 then goto L243278;
  #L243248.  v3:= 3I;
  #L24324a.  v3:= new `java.lang.Object`[v3];
  #L24324e.  v3[v1]:= v6 @kind object;
  #L243252.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L243258.  v4:= temp @kind object;
  #L24325a.  v3[v0]:= v4 @kind object;
  #L24325e.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L243264.  v4:= temp @kind object;
  #L243266.  v3[v2]:= v4 @kind object;
  #L24326a.  v4:= "%s (%s) must not be greater than size (%s)" @kind object;
  #L24326e.  call temp:= `a`(v4, v3) @signature `Le/e/a/b/f/k/s;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L243274.  v4:= temp @kind object;
  #L243276.  return v4 @kind object;
  #L243278.  v4:= new `java.lang.IllegalArgumentException`;
  #L24327c.  v6:= new `java.lang.StringBuilder`;
  #L243280.  v0:= 26I;
  #L243284.  call `<init>`(v6, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L24328a.  v0:= "negative size: " @kind object;
  #L24328e.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L243294.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24329a.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2432a0.  v5:= temp @kind object;
  #L2432a2.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2432a8.  throw v4;
}
