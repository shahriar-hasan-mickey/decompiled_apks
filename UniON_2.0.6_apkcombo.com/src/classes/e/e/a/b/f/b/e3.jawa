record `e.e.a.b.f.b.e3` @kind class @AccessFlag  extends `java.util.AbstractMap` @kind class {
  `int` `e.e.a.b.f.b.e3.b` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `e.e.a.b.f.b.e3.c` @AccessFlag PRIVATE;
  `java.util.Map` `e.e.a.b.f.b.e3.d` @AccessFlag PRIVATE;
  `boolean` `e.e.a.b.f.b.e3.e` @AccessFlag PRIVATE;
  `e.e.a.b.f.b.n3` `e.e.a.b.f.b.e3.f` @AccessFlag PRIVATE_VOLATILE;
  `java.util.Map` `e.e.a.b.f.b.e3.g` @AccessFlag PRIVATE;
  `e.e.a.b.f.b.h3` `e.e.a.b.f.b.e3.h` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`e.e.a.b.f.b.e3` v0 @kind this, `int` v1 ) @signature `Le/e/a/b/f/b/e3;.<init>:(I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L20d3f8.  call `<init>`(v0) @signature `Ljava/util/AbstractMap;.<init>:()V` @kind direct;
  #L20d3fe.  v0.`e.e.a.b.f.b.e3.b` @type ^`int` := v1;
  #L20d402.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L20d408.  v1:= temp @kind object;
  #L20d40a.  v0.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` := v1 @kind object;
  #L20d40e.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L20d414.  v1:= temp @kind object;
  #L20d416.  v0.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` := v1 @kind object;
  #L20d41a.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L20d420.  v1:= temp @kind object;
  #L20d422.  v0.`e.e.a.b.f.b.e3.g` @type ^`java.util.Map` := v1 @kind object;
  #L20d426.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.b.e3` v0 @kind this, `int` v1 , `e.e.a.b.f.b.f3` v2 @kind object) @signature `Le/e/a/b/f/b/e3;.<init>:(ILe/e/a/b/f/b/f3;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L20d438.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/b/e3;.<init>:(I)V` @kind direct;
  #L20d43e.  return @kind void;
}
procedure `int` `a`(`e.e.a.b.f.b.e3` v4 @kind this, `java.lang.Comparable` v5 @kind object) @signature `Le/e/a/b/f/b/e3;.a:(Ljava/lang/Comparable;)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L20cf7c.  v0:= v4.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20cf80.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L20cf86.  v0:= temp;
  #L20cf88.  v0:= v0 + -1;
  #L20cf8c.  if v0 < 0 then goto L20cfc6;
  #L20cf90.  v1:= v4.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20cf94.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L20cf9a.  v1:= temp @kind object;
  #L20cf9c.  v1:= (`e.e.a.b.f.b.l3`) v1 @kind object;
  #L20cfa0.  call temp:= `getKey`(v1) @signature `Le/e/a/b/f/b/l3;.getKey:()Ljava/lang/Object;` @kind virtual;
  #L20cfa6.  v1:= temp @kind object;
  #L20cfa8.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L20cfac.  call temp:= `compareTo`(v5, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L20cfb2.  v1:= temp;
  #L20cfb4.  if v1 <= 0 then goto L20cfc0;
  #L20cfb8.  v0:= v0 + 2;
  #L20cfbc.  v5:= -v0 @kind int;
  #L20cfbe.  return v5;
  #L20cfc0.  if v1 != 0 then goto L20cfc6;
  #L20cfc4.  return v0;
  #L20cfc6.  v1:= 0I;
  #L20cfc8.  if v1 > v0 then goto L20d00e;
  #L20cfcc.  v2:= v1 + v0 @kind int;
  #L20cfd0.  v2:= v2 / 2;
  #L20cfd4.  v3:= v4.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20cfd8.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L20cfde.  v3:= temp @kind object;
  #L20cfe0.  v3:= (`e.e.a.b.f.b.l3`) v3 @kind object;
  #L20cfe4.  call temp:= `getKey`(v3) @signature `Le/e/a/b/f/b/l3;.getKey:()Ljava/lang/Object;` @kind virtual;
  #L20cfea.  v3:= temp @kind object;
  #L20cfec.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L20cff0.  call temp:= `compareTo`(v5, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L20cff6.  v3:= temp;
  #L20cff8.  if v3 >= 0 then goto L20d002;
  #L20cffc.  v0:= v2 + -1;
  #L20d000.  goto L20cfc8;
  #L20d002.  if v3 <= 0 then goto L20d00c;
  #L20d006.  v1:= v2 + 1;
  #L20d00a.  goto L20cfc8;
  #L20d00c.  return v2;
  #L20d00e.  v1:= v1 + 1;
  #L20d012.  v5:= -v1 @kind int;
  #L20d014.  return v5;
}
procedure `java.lang.Object` `a`(`e.e.a.b.f.b.e3` v0 @kind object, `int` v1 ) @signature `Le/e/a/b/f/b/e3;.a:(Le/e/a/b/f/b/e3;I)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L20d13c.  call temp:= `c`(v0, v1) @signature `Le/e/a/b/f/b/e3;.c:(I)Ljava/lang/Object;` @kind direct;
  #L20d142.  v0:= temp @kind object;
  #L20d144.  return v0 @kind object;
}
procedure `void` `a`(`e.e.a.b.f.b.e3` v0 @kind object) @signature `Le/e/a/b/f/b/e3;.a:(Le/e/a/b/f/b/e3;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L20d49c.  call `f`(v0) @signature `Le/e/a/b/f/b/e3;.f:()V` @kind direct;
  #L20d4a2.  return @kind void;
}
procedure `e.e.a.b.f.b.e3` `b`(`int` v1 ) @signature `Le/e/a/b/f/b/e3;.b:(I)Le/e/a/b/f/b/e3;` @AccessFlag STATIC {
    temp;
    v0;

  #L20ced4.  v0:= new `e.e.a.b.f.b.f3`;
  #L20ced8.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/b/f3;.<init>:(I)V` @kind direct;
  #L20cede.  return v0 @kind object;
}
procedure `java.util.List` `b`(`e.e.a.b.f.b.e3` v0 @kind object) @signature `Le/e/a/b/f/b/e3;.b:(Le/e/a/b/f/b/e3;)Ljava/util/List;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L20d2cc.  v0:= v0.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20d2d0.  return v0 @kind object;
}
procedure `java.lang.Object` `c`(`e.e.a.b.f.b.e3` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/b/e3;.c:(I)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L20d24c.  call `f`(v4) @signature `Le/e/a/b/f/b/e3;.f:()V` @kind direct;
  #L20d252.  v0:= v4.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20d256.  call temp:= `remove`(v0, v5) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L20d25c.  v5:= temp @kind object;
  #L20d25e.  v5:= (`e.e.a.b.f.b.l3`) v5 @kind object;
  #L20d262.  call temp:= `getValue`(v5) @signature `Le/e/a/b/f/b/l3;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L20d268.  v5:= temp @kind object;
  #L20d26a.  v0:= v4.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20d26e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L20d274.  v0:= temp;
  #L20d276.  if v0 != 0 then goto L20d2b8;
  #L20d27a.  call temp:= `g`(v4) @signature `Le/e/a/b/f/b/e3;.g:()Ljava/util/SortedMap;` @kind direct;
  #L20d280.  v0:= temp @kind object;
  #L20d282.  call temp:= `entrySet`(v0) @signature `Ljava/util/SortedMap;.entrySet:()Ljava/util/Set;` @kind interface;
  #L20d288.  v0:= temp @kind object;
  #L20d28a.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L20d290.  v0:= temp @kind object;
  #L20d292.  v1:= v4.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20d296.  v2:= new `e.e.a.b.f.b.l3`;
  #L20d29a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L20d2a0.  v3:= temp @kind object;
  #L20d2a2.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L20d2a6.  call `<init>`(v2, v4, v3) @signature `Le/e/a/b/f/b/l3;.<init>:(Le/e/a/b/f/b/e3;Ljava/util/Map$Entry;)V` @kind direct;
  #L20d2ac.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L20d2b2.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L20d2b8.  return v5 @kind object;
}
procedure `java.util.Map` `c`(`e.e.a.b.f.b.e3` v0 @kind object) @signature `Le/e/a/b/f/b/e3;.c:(Le/e/a/b/f/b/e3;)Ljava/util/Map;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L20d2e4.  v0:= v0.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20d2e8.  return v0 @kind object;
}
procedure `java.util.Map` `d`(`e.e.a.b.f.b.e3` v0 @kind object) @signature `Le/e/a/b/f/b/e3;.d:(Le/e/a/b/f/b/e3;)Ljava/util/Map;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L20d2fc.  v0:= v0.`e.e.a.b.f.b.e3.g` @type ^`java.util.Map` @kind object;
  #L20d300.  return v0 @kind object;
}
procedure `void` `f`(`e.e.a.b.f.b.e3` v1 @kind this) @signature `Le/e/a/b/f/b/e3;.f:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L20d4b4.  v0:= v1.`e.e.a.b.f.b.e3.e` @type ^`boolean` @kind boolean;
  #L20d4b8.  if v0 != 0 then goto L20d4be;
  #L20d4bc.  return @kind void;
  #L20d4be.  v0:= new `java.lang.UnsupportedOperationException`;
  #L20d4c2.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L20d4c8.  throw v0;
}
procedure `java.util.SortedMap` `g`(`e.e.a.b.f.b.e3` v1 @kind this) @signature `Le/e/a/b/f/b/e3;.g:()Ljava/util/SortedMap;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L20d398.  call `f`(v1) @signature `Le/e/a/b/f/b/e3;.f:()V` @kind direct;
  #L20d39e.  v0:= v1.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20d3a2.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L20d3a8.  v0:= temp;
  #L20d3aa.  if v0 == 0 then goto L20d3dc;
  #L20d3ae.  v0:= v1.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20d3b2.  v0:= instanceof @variable v0 @type ^`java.util.TreeMap` @kind boolean;
  #L20d3b6.  if v0 != 0 then goto L20d3dc;
  #L20d3ba.  v0:= new `java.util.TreeMap`;
  #L20d3be.  call `<init>`(v0) @signature `Ljava/util/TreeMap;.<init>:()V` @kind direct;
  #L20d3c4.  v1.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` := v0 @kind object;
  #L20d3c8.  v0:= v1.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20d3cc.  v0:= (`java.util.TreeMap`) v0 @kind object;
  #L20d3d0.  call temp:= `descendingMap`(v0) @signature `Ljava/util/TreeMap;.descendingMap:()Ljava/util/NavigableMap;` @kind virtual;
  #L20d3d6.  v0:= temp @kind object;
  #L20d3d8.  v1.`e.e.a.b.f.b.e3.g` @type ^`java.util.Map` := v0 @kind object;
  #L20d3dc.  v0:= v1.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20d3e0.  v0:= (`java.util.SortedMap`) v0 @kind object;
  #L20d3e4.  return v0 @kind object;
}
procedure `java.lang.Object` `a`(`e.e.a.b.f.b.e3` v4 @kind this, `java.lang.Comparable` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/b/e3;.a:(Ljava/lang/Comparable;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L20d158.  call `f`(v4) @signature `Le/e/a/b/f/b/e3;.f:()V` @kind direct;
  #L20d15e.  call temp:= `a`(v4, v5) @signature `Le/e/a/b/f/b/e3;.a:(Ljava/lang/Comparable;)I` @kind direct;
  #L20d164.  v0:= temp;
  #L20d166.  if v0 < 0 then goto L20d184;
  #L20d16a.  v5:= v4.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20d16e.  call temp:= `get`(v5, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L20d174.  v5:= temp @kind object;
  #L20d176.  v5:= (`e.e.a.b.f.b.l3`) v5 @kind object;
  #L20d17a.  call temp:= `setValue`(v5, v6) @signature `Le/e/a/b/f/b/l3;.setValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L20d180.  v5:= temp @kind object;
  #L20d182.  return v5 @kind object;
  #L20d184.  call `f`(v4) @signature `Le/e/a/b/f/b/e3;.f:()V` @kind direct;
  #L20d18a.  v1:= v4.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20d18e.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L20d194.  v1:= temp;
  #L20d196.  if v1 == 0 then goto L20d1b8;
  #L20d19a.  v1:= v4.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20d19e.  v1:= instanceof @variable v1 @type ^`java.util.ArrayList` @kind boolean;
  #L20d1a2.  if v1 != 0 then goto L20d1b8;
  #L20d1a6.  v1:= new `java.util.ArrayList`;
  #L20d1aa.  v2:= v4.`e.e.a.b.f.b.e3.b` @type ^`int`;
  #L20d1ae.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L20d1b4.  v4.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` := v1 @kind object;
  #L20d1b8.  v0:= v0 + 1;
  #L20d1bc.  v0:= -v0 @kind int;
  #L20d1be.  v1:= v4.`e.e.a.b.f.b.e3.b` @type ^`int`;
  #L20d1c2.  if v0 < v1 then goto L20d1d8;
  #L20d1c6.  call temp:= `g`(v4) @signature `Le/e/a/b/f/b/e3;.g:()Ljava/util/SortedMap;` @kind direct;
  #L20d1cc.  v0:= temp @kind object;
  #L20d1ce.  call temp:= `put`(v0, v5, v6) @signature `Ljava/util/SortedMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L20d1d4.  v5:= temp @kind object;
  #L20d1d6.  return v5 @kind object;
  #L20d1d8.  v1:= v4.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20d1dc.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L20d1e2.  v1:= temp;
  #L20d1e4.  v2:= v4.`e.e.a.b.f.b.e3.b` @type ^`int`;
  #L20d1e8.  if v1 != v2 then goto L20d222;
  #L20d1ec.  v1:= v4.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20d1f0.  v2:= v2 + -1;
  #L20d1f4.  call temp:= `remove`(v1, v2) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L20d1fa.  v1:= temp @kind object;
  #L20d1fc.  v1:= (`e.e.a.b.f.b.l3`) v1 @kind object;
  #L20d200.  call temp:= `g`(v4) @signature `Le/e/a/b/f/b/e3;.g:()Ljava/util/SortedMap;` @kind direct;
  #L20d206.  v2:= temp @kind object;
  #L20d208.  call temp:= `getKey`(v1) @signature `Le/e/a/b/f/b/l3;.getKey:()Ljava/lang/Object;` @kind virtual;
  #L20d20e.  v3:= temp @kind object;
  #L20d210.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L20d214.  call temp:= `getValue`(v1) @signature `Le/e/a/b/f/b/l3;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L20d21a.  v1:= temp @kind object;
  #L20d21c.  call temp:= `put`(v2, v3, v1) @signature `Ljava/util/SortedMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L20d222.  v1:= v4.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20d226.  v2:= new `e.e.a.b.f.b.l3`;
  #L20d22a.  call `<init>`(v2, v4, v5, v6) @signature `Le/e/a/b/f/b/l3;.<init>:(Le/e/a/b/f/b/e3;Ljava/lang/Comparable;Ljava/lang/Object;)V` @kind direct;
  #L20d230.  call `add`(v1, v0, v2) @signature `Ljava/util/List;.add:(ILjava/lang/Object;)V` @kind interface;
  #L20d236.  v5:= 0I;
  #L20d238.  return v5 @kind object;
}
procedure `java.util.Map$Entry` `a`(`e.e.a.b.f.b.e3` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/b/e3;.a:(I)Ljava/util/Map$Entry;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L20d314.  v0:= v1.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20d318.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L20d31e.  v2:= temp @kind object;
  #L20d320.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L20d324.  return v2 @kind object;
}
procedure `boolean` `a`(`e.e.a.b.f.b.e3` v1 @kind this) @signature `Le/e/a/b/f/b/e3;.a:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L20cebc.  v0:= v1.`e.e.a.b.f.b.e3.e` @type ^`boolean` @kind boolean;
  #L20cec0.  return v0;
}
procedure `int` `b`(`e.e.a.b.f.b.e3` v1 @kind this) @signature `Le/e/a/b/f/b/e3;.b:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L20d028.  v0:= v1.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20d02c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L20d032.  v0:= temp;
  #L20d034.  return v0;
}
procedure `java.lang.Iterable` `c`(`e.e.a.b.f.b.e3` v1 @kind this) @signature `Le/e/a/b/f/b/e3;.c:()Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L20d048.  v0:= v1.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20d04c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L20d052.  v0:= temp;
  #L20d054.  if v0 == 0 then goto L20d062;
  #L20d058.  call temp:= `a`() @signature `Le/e/a/b/f/b/i3;.a:()Ljava/lang/Iterable;` @kind static;
  #L20d05e.  v0:= temp @kind object;
  #L20d060.  return v0 @kind object;
  #L20d062.  v0:= v1.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20d066.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L20d06c.  v0:= temp @kind object;
  #L20d06e.  return v0 @kind object;
}
procedure `void` `clear`(`e.e.a.b.f.b.e3` v1 @kind this) @signature `Le/e/a/b/f/b/e3;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20d450.  call `f`(v1) @signature `Le/e/a/b/f/b/e3;.f:()V` @kind direct;
  #L20d456.  v0:= v1.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20d45a.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L20d460.  v0:= temp;
  #L20d462.  if v0 != 0 then goto L20d470;
  #L20d466.  v0:= v1.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20d46a.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L20d470.  v0:= v1.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20d474.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L20d47a.  v0:= temp;
  #L20d47c.  if v0 != 0 then goto L20d48a;
  #L20d480.  v0:= v1.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20d484.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L20d48a.  return @kind void;
}
procedure `boolean` `containsKey`(`e.e.a.b.f.b.e3` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/b/e3;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20cdc8.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L20cdcc.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/b/e3;.a:(Ljava/lang/Comparable;)I` @kind direct;
  #L20cdd2.  v0:= temp;
  #L20cdd4.  if v0 >= 0 then goto L20cdee;
  #L20cdd8.  v0:= v1.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20cddc.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L20cde2.  v2:= temp;
  #L20cde4.  if v2 == 0 then goto L20cdea;
  #L20cde8.  goto L20cdee;
  #L20cdea.  v2:= 0I;
  #L20cdec.  return v2;
  #L20cdee.  v2:= 1I;
  #L20cdf0.  return v2;
}
procedure `java.util.Set` `d`(`e.e.a.b.f.b.e3` v2 @kind this) @signature `Le/e/a/b/f/b/e3;.d:()Ljava/util/Set;` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L20d368.  v0:= v2.`e.e.a.b.f.b.e3.h` @type ^`e.e.a.b.f.b.h3` @kind object;
  #L20d36c.  if v0 != 0 then goto L20d380;
  #L20d370.  v0:= new `e.e.a.b.f.b.h3`;
  #L20d374.  v1:= 0I;
  #L20d376.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/b/h3;.<init>:(Le/e/a/b/f/b/e3;Le/e/a/b/f/b/f3;)V` @kind direct;
  #L20d37c.  v2.`e.e.a.b.f.b.e3.h` @type ^`e.e.a.b.f.b.h3` := v0 @kind object;
  #L20d380.  v0:= v2.`e.e.a.b.f.b.e3.h` @type ^`e.e.a.b.f.b.h3` @kind object;
  #L20d384.  return v0 @kind object;
}
procedure `void` `e`(`e.e.a.b.f.b.e3` v1 @kind this) @signature `Le/e/a/b/f/b/e3;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20d4dc.  v0:= v1.`e.e.a.b.f.b.e3.e` @type ^`boolean` @kind boolean;
  #L20d4e0.  if v0 != 0 then goto L20d53e;
  #L20d4e4.  v0:= v1.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20d4e8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L20d4ee.  v0:= temp;
  #L20d4f0.  if v0 == 0 then goto L20d4fe;
  #L20d4f4.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L20d4fa.  v0:= temp @kind object;
  #L20d4fc.  goto L20d50a;
  #L20d4fe.  v0:= v1.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20d502.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L20d508.  v0:= temp @kind object;
  #L20d50a.  v1.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` := v0 @kind object;
  #L20d50e.  v0:= v1.`e.e.a.b.f.b.e3.g` @type ^`java.util.Map` @kind object;
  #L20d512.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L20d518.  v0:= temp;
  #L20d51a.  if v0 == 0 then goto L20d528;
  #L20d51e.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L20d524.  v0:= temp @kind object;
  #L20d526.  goto L20d534;
  #L20d528.  v0:= v1.`e.e.a.b.f.b.e3.g` @type ^`java.util.Map` @kind object;
  #L20d52c.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L20d532.  v0:= temp @kind object;
  #L20d534.  v1.`e.e.a.b.f.b.e3.g` @type ^`java.util.Map` := v0 @kind object;
  #L20d538.  v0:= 1I;
  #L20d53a.  v1.`e.e.a.b.f.b.e3.e` @type ^`boolean` := v0 @kind boolean;
  #L20d53e.  return @kind void;
}
procedure `java.util.Set` `entrySet`(`e.e.a.b.f.b.e3` v2 @kind this) @signature `Le/e/a/b/f/b/e3;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L20d338.  v0:= v2.`e.e.a.b.f.b.e3.f` @type ^`e.e.a.b.f.b.n3` @kind object;
  #L20d33c.  if v0 != 0 then goto L20d350;
  #L20d340.  v0:= new `e.e.a.b.f.b.n3`;
  #L20d344.  v1:= 0I;
  #L20d346.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/b/n3;.<init>:(Le/e/a/b/f/b/e3;Le/e/a/b/f/b/f3;)V` @kind direct;
  #L20d34c.  v2.`e.e.a.b.f.b.e3.f` @type ^`e.e.a.b.f.b.n3` := v0 @kind object;
  #L20d350.  v0:= v2.`e.e.a.b.f.b.e3.f` @type ^`e.e.a.b.f.b.n3` @kind object;
  #L20d354.  return v0 @kind object;
}
procedure `boolean` `equals`(`e.e.a.b.f.b.e3` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Le/e/a/b/f/b/e3;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L20ce04.  v0:= 1I;
  #L20ce06.  if v7 != v8 then goto L20ce0c;
  #L20ce0a.  return v0;
  #L20ce0c.  v1:= instanceof @variable v8 @type ^`e.e.a.b.f.b.e3` @kind boolean;
  #L20ce10.  if v1 != 0 then goto L20ce1e;
  #L20ce14.  call temp:= `equals`(v7, v8) @signature `Ljava/util/AbstractMap;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L20ce1a.  v8:= temp;
  #L20ce1c.  return v8;
  #L20ce1e.  v8:= (`e.e.a.b.f.b.e3`) v8 @kind object;
  #L20ce22.  call temp:= `size`(v7) @signature `Le/e/a/b/f/b/e3;.size:()I` @kind virtual;
  #L20ce28.  v1:= temp;
  #L20ce2a.  call temp:= `size`(v8) @signature `Le/e/a/b/f/b/e3;.size:()I` @kind virtual;
  #L20ce30.  v2:= temp;
  #L20ce32.  v3:= 0I;
  #L20ce34.  if v1 == v2 then goto L20ce3a;
  #L20ce38.  return v3;
  #L20ce3a.  call temp:= `b`(v7) @signature `Le/e/a/b/f/b/e3;.b:()I` @kind virtual;
  #L20ce40.  v2:= temp;
  #L20ce42.  call temp:= `b`(v8) @signature `Le/e/a/b/f/b/e3;.b:()I` @kind virtual;
  #L20ce48.  v4:= temp;
  #L20ce4a.  if v2 == v4 then goto L20ce68;
  #L20ce4e.  call temp:= `entrySet`(v7) @signature `Le/e/a/b/f/b/e3;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L20ce54.  v0:= temp @kind object;
  #L20ce56.  call temp:= `entrySet`(v8) @signature `Le/e/a/b/f/b/e3;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L20ce5c.  v8:= temp @kind object;
  #L20ce5e.  call temp:= `equals`(v0, v8) @signature `Ljava/util/Set;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L20ce64.  v8:= temp;
  #L20ce66.  return v8;
  #L20ce68.  v4:= 0I;
  #L20ce6a.  if v4 >= v2 then goto L20ce92;
  #L20ce6e.  call temp:= `a`(v7, v4) @signature `Le/e/a/b/f/b/e3;.a:(I)Ljava/util/Map$Entry;` @kind virtual;
  #L20ce74.  v5:= temp @kind object;
  #L20ce76.  call temp:= `a`(v8, v4) @signature `Le/e/a/b/f/b/e3;.a:(I)Ljava/util/Map$Entry;` @kind virtual;
  #L20ce7c.  v6:= temp @kind object;
  #L20ce7e.  call temp:= `equals`(v5, v6) @signature `Ljava/util/Map$Entry;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L20ce84.  v5:= temp;
  #L20ce86.  if v5 != 0 then goto L20ce8c;
  #L20ce8a.  return v3;
  #L20ce8c.  v4:= v4 + 1;
  #L20ce90.  goto L20ce6a;
  #L20ce92.  if v2 == v1 then goto L20cea8;
  #L20ce96.  v0:= v7.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20ce9a.  v8:= v8.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20ce9e.  call temp:= `equals`(v0, v8) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L20cea4.  v8:= temp;
  #L20cea6.  return v8;
  #L20cea8.  return v0;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.b.e3` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/b/e3;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20d080.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L20d084.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/b/e3;.a:(Ljava/lang/Comparable;)I` @kind direct;
  #L20d08a.  v0:= temp;
  #L20d08c.  if v0 < 0 then goto L20d0aa;
  #L20d090.  v2:= v1.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20d094.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L20d09a.  v2:= temp @kind object;
  #L20d09c.  v2:= (`e.e.a.b.f.b.l3`) v2 @kind object;
  #L20d0a0.  call temp:= `getValue`(v2) @signature `Le/e/a/b/f/b/l3;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L20d0a6.  v2:= temp @kind object;
  #L20d0a8.  return v2 @kind object;
  #L20d0aa.  v0:= v1.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20d0ae.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L20d0b4.  v2:= temp @kind object;
  #L20d0b6.  return v2 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.b.e3` v4 @kind this) @signature `Le/e/a/b/f/b/e3;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L20cef0.  call temp:= `b`(v4) @signature `Le/e/a/b/f/b/e3;.b:()I` @kind virtual;
  #L20cef6.  v0:= temp;
  #L20cef8.  v1:= 0I;
  #L20cefa.  v2:= 0I;
  #L20cefc.  if v1 >= v0 then goto L20cf20;
  #L20cf00.  v3:= v4.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20cf04.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L20cf0a.  v3:= temp @kind object;
  #L20cf0c.  v3:= (`e.e.a.b.f.b.l3`) v3 @kind object;
  #L20cf10.  call temp:= `hashCode`(v3) @signature `Le/e/a/b/f/b/l3;.hashCode:()I` @kind virtual;
  #L20cf16.  v3:= temp;
  #L20cf18.  v2:= v2 + v3 @kind int;
  #L20cf1a.  v1:= v1 + 1;
  #L20cf1e.  goto L20cefc;
  #L20cf20.  v0:= v4.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20cf24.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L20cf2a.  v0:= temp;
  #L20cf2c.  if v0 <= 0 then goto L20cf3e;
  #L20cf30.  v0:= v4.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20cf34.  call temp:= `hashCode`(v0) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L20cf3a.  v0:= temp;
  #L20cf3c.  v2:= v2 + v0 @kind int;
  #L20cf3e.  return v2;
}
procedure `java.lang.Object` `put`(`e.e.a.b.f.b.e3` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/b/e3;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L20d0c8.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L20d0cc.  call temp:= `a`(v0, v1, v2) @signature `Le/e/a/b/f/b/e3;.a:(Ljava/lang/Comparable;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L20d0d2.  v1:= temp @kind object;
  #L20d0d4.  return v1 @kind object;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.b.e3` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/b/e3;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20d0e8.  call `f`(v1) @signature `Le/e/a/b/f/b/e3;.f:()V` @kind direct;
  #L20d0ee.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L20d0f2.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/b/e3;.a:(Ljava/lang/Comparable;)I` @kind direct;
  #L20d0f8.  v0:= temp;
  #L20d0fa.  if v0 < 0 then goto L20d108;
  #L20d0fe.  call temp:= `c`(v1, v0) @signature `Le/e/a/b/f/b/e3;.c:(I)Ljava/lang/Object;` @kind direct;
  #L20d104.  v2:= temp @kind object;
  #L20d106.  return v2 @kind object;
  #L20d108.  v0:= v1.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20d10c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L20d112.  v0:= temp;
  #L20d114.  if v0 == 0 then goto L20d11c;
  #L20d118.  v2:= 0I;
  #L20d11a.  return v2 @kind object;
  #L20d11c.  v0:= v1.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20d120.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L20d126.  v2:= temp @kind object;
  #L20d128.  return v2 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.b.e3` v2 @kind this) @signature `Le/e/a/b/f/b/e3;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L20cf50.  v0:= v2.`e.e.a.b.f.b.e3.c` @type ^`java.util.List` @kind object;
  #L20cf54.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L20cf5a.  v0:= temp;
  #L20cf5c.  v1:= v2.`e.e.a.b.f.b.e3.d` @type ^`java.util.Map` @kind object;
  #L20cf60.  call temp:= `size`(v1) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L20cf66.  v1:= temp;
  #L20cf68.  v0:= v0 + v1 @kind int;
  #L20cf6a.  return v0;
}
