record `e.e.a.b.f.j.v6` @kind class @AccessFlag FINAL extends `e.e.a.b.f.j.s6` @kind class {
}
procedure `void` `<init>`(`e.e.a.b.f.j.v6` v0 @kind this) @signature `Le/e/a/b/f/j/v6;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L233084.  call `<init>`(v0) @signature `Le/e/a/b/f/j/s6;.<init>:()V` @kind direct;
  #L23308a.  return @kind void;
}
procedure `int` `a`(`e.e.a.b.f.j.v6` v6 @kind this, `int` v7 , `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Le/e/a/b/f/j/v6;.a:(I[BII)I` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L232d74.  if v9 >= v10 then goto L232d86;
  #L232d78.  v7:= v8[v9] @kind byte;
  #L232d7c.  if v7 < 0 then goto L232d86;
  #L232d80.  v9:= v9 + 1;
  #L232d84.  goto L232d74;
  #L232d86.  v7:= 0I;
  #L232d88.  if v9 < v10 then goto L232d8e;
  #L232d8c.  return v7;
  #L232d8e.  if v9 < v10 then goto L232d94;
  #L232d92.  return v7;
  #L232d94.  v0:= v9 + 1;
  #L232d98.  v9:= v8[v9] @kind byte;
  #L232d9c.  if v9 >= 0 then goto L232e60;
  #L232da0.  v1:= -32I;
  #L232da4.  v2:= -1I;
  #L232da6.  v3:= -65I;
  #L232daa.  if v9 >= v1 then goto L232dca;
  #L232dae.  if v0 < v10 then goto L232db4;
  #L232db2.  return v9;
  #L232db4.  v1:= -62I;
  #L232db8.  if v9 < v1 then goto L232dc8;
  #L232dbc.  v9:= v0 + 1;
  #L232dc0.  v0:= v8[v0] @kind byte;
  #L232dc4.  if v0 <= v3 then goto L232d8e;
  #L232dc8.  return v2;
  #L232dca.  v4:= -16I;
  #L232dce.  if v9 >= v4 then goto L232e16;
  #L232dd2.  v4:= v10 + -1;
  #L232dd6.  if v0 < v4 then goto L232de4;
  #L232dda.  call temp:= `b`(v8, v0, v10) @signature `Le/e/a/b/f/j/t6;.b:([BII)I` @kind static;
  #L232de0.  v7:= temp;
  #L232de2.  return v7;
  #L232de4.  v4:= v0 + 1;
  #L232de8.  v0:= v8[v0] @kind byte;
  #L232dec.  if v0 > v3 then goto L232e14;
  #L232df0.  v5:= -96I;
  #L232df4.  if v9 != v1 then goto L232dfc;
  #L232df8.  if v0 < v5 then goto L232e14;
  #L232dfc.  v1:= -19I;
  #L232e00.  if v9 != v1 then goto L232e08;
  #L232e04.  if v0 >= v5 then goto L232e14;
  #L232e08.  v9:= v4 + 1;
  #L232e0c.  v0:= v8[v4] @kind byte;
  #L232e10.  if v0 <= v3 then goto L232d8e;
  #L232e14.  return v2;
  #L232e16.  v1:= v10 + -2;
  #L232e1a.  if v0 < v1 then goto L232e28;
  #L232e1e.  call temp:= `b`(v8, v0, v10) @signature `Le/e/a/b/f/j/t6;.b:([BII)I` @kind static;
  #L232e24.  v7:= temp;
  #L232e26.  return v7;
  #L232e28.  v1:= v0 + 1;
  #L232e2c.  v0:= v8[v0] @kind byte;
  #L232e30.  if v0 > v3 then goto L232e5e;
  #L232e34.  v9:= v9 ^< 28;
  #L232e38.  v0:= v0 + 112;
  #L232e3c.  v9:= v9 + v0 @kind int;
  #L232e3e.  v9:= v9 ^> 30;
  #L232e42.  if v9 != 0 then goto L232e5e;
  #L232e46.  v9:= v1 + 1;
  #L232e4a.  v0:= v8[v1] @kind byte;
  #L232e4e.  if v0 > v3 then goto L232e5e;
  #L232e52.  v0:= v9 + 1;
  #L232e56.  v9:= v8[v9] @kind byte;
  #L232e5a.  if v9 <= v3 then goto L232e60;
  #L232e5e.  return v2;
  #L232e60.  v9:= v0;
  #L232e62.  goto L232d8e;
}
procedure `int` `a`(`e.e.a.b.f.j.v6` v7 @kind this, `java.lang.CharSequence` v8 @kind object, `byte`[] v9 @kind object, `int` v10 , `int` v11 ) @signature `Le/e/a/b/f/j/v6;.a:(Ljava/lang/CharSequence;[BII)I` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L232e74.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L232e7a.  v0:= temp;
  #L232e7c.  v11:= v11 + v10 @kind int;
  #L232e7e.  v1:= 0I;
  #L232e80.  v2:= 128I;
  #L232e84.  if v1 >= v0 then goto L232ea8;
  #L232e88.  v3:= v1 + v10 @kind int;
  #L232e8c.  if v3 >= v11 then goto L232ea8;
  #L232e90.  call temp:= `charAt`(v8, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L232e96.  v4:= temp;
  #L232e98.  if v4 >= v2 then goto L232ea8;
  #L232e9c.  v2:= (`byte`) v4 @kind i2b;
  #L232e9e.  v9[v3]:= v2 @kind byte;
  #L232ea2.  v1:= v1 + 1;
  #L232ea6.  goto L232e80;
  #L232ea8.  if v1 != v0 then goto L232eb0;
  #L232eac.  v10:= v10 + v0 @kind int;
  #L232eae.  return v10;
  #L232eb0.  v10:= v10 + v1 @kind int;
  #L232eb2.  if v1 >= v0 then goto L233072;
  #L232eb6.  call temp:= `charAt`(v8, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L232ebc.  v3:= temp;
  #L232ebe.  if v3 >= v2 then goto L232ed6;
  #L232ec2.  if v10 >= v11 then goto L232ed6;
  #L232ec6.  v4:= v10 + 1;
  #L232eca.  v3:= (`byte`) v3 @kind i2b;
  #L232ecc.  v9[v10]:= v3 @kind byte;
  #L232ed0.  v10:= v4;
  #L232ed2.  goto L232fde;
  #L232ed6.  v4:= 2048I;
  #L232eda.  if v3 >= v4 then goto L232f0a;
  #L232ede.  v4:= v11 + -2;
  #L232ee2.  if v10 > v4 then goto L232f0a;
  #L232ee6.  v4:= v10 + 1;
  #L232eea.  v5:= v3 ^>> 6;
  #L232eee.  v5:= v5 ^| 960;
  #L232ef2.  v5:= (`byte`) v5 @kind i2b;
  #L232ef4.  v9[v10]:= v5 @kind byte;
  #L232ef8.  v10:= v4 + 1;
  #L232efc.  v3:= v3 ^& 63;
  #L232f00.  v3:= v3 ^| v2 @kind int;
  #L232f02.  v3:= (`byte`) v3 @kind i2b;
  #L232f04.  v9[v4]:= v3 @kind byte;
  #L232f08.  goto L232fde;
  #L232f0a.  v4:= 57343I;
  #L232f10.  v5:= 55296I;
  #L232f16.  if v3 < v5 then goto L232f1e;
  #L232f1a.  if v4 >= v3 then goto L232f5e;
  #L232f1e.  v6:= v11 + -3;
  #L232f22.  if v10 > v6 then goto L232f5e;
  #L232f26.  v4:= v10 + 1;
  #L232f2a.  v5:= v3 ^>> 12;
  #L232f2e.  v5:= v5 ^| 480;
  #L232f32.  v5:= (`byte`) v5 @kind i2b;
  #L232f34.  v9[v10]:= v5 @kind byte;
  #L232f38.  v10:= v4 + 1;
  #L232f3c.  v5:= v3 ^>> 6;
  #L232f40.  v5:= v5 ^& 63;
  #L232f44.  v5:= v5 ^| v2 @kind int;
  #L232f46.  v5:= (`byte`) v5 @kind i2b;
  #L232f48.  v9[v4]:= v5 @kind byte;
  #L232f4c.  v4:= v10 + 1;
  #L232f50.  v3:= v3 ^& 63;
  #L232f54.  v3:= v3 ^| v2 @kind int;
  #L232f56.  v3:= (`byte`) v3 @kind i2b;
  #L232f58.  v9[v10]:= v3 @kind byte;
  #L232f5c.  goto L232ed0;
  #L232f5e.  v6:= v11 + -4;
  #L232f62.  if v10 > v6 then goto L232ff8;
  #L232f66.  v4:= v1 + 1;
  #L232f6a.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L232f70.  v5:= temp;
  #L232f72.  if v4 == v5 then goto L232fe8;
  #L232f76.  call temp:= `charAt`(v8, v4) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L232f7c.  v1:= temp;
  #L232f7e.  call temp:= `isSurrogatePair`(v3, v1) @signature `Ljava/lang/Character;.isSurrogatePair:(CC)Z` @kind static;
  #L232f84.  v5:= temp;
  #L232f86.  if v5 == 0 then goto L232fe6;
  #L232f8a.  call temp:= `toCodePoint`(v3, v1) @signature `Ljava/lang/Character;.toCodePoint:(CC)I` @kind static;
  #L232f90.  v1:= temp;
  #L232f92.  v3:= v10 + 1;
  #L232f96.  v5:= v1 ^>> 18;
  #L232f9a.  v5:= v5 ^| 240;
  #L232f9e.  v5:= (`byte`) v5 @kind i2b;
  #L232fa0.  v9[v10]:= v5 @kind byte;
  #L232fa4.  v10:= v3 + 1;
  #L232fa8.  v5:= v1 ^>> 12;
  #L232fac.  v5:= v5 ^& 63;
  #L232fb0.  v5:= v5 ^| v2 @kind int;
  #L232fb2.  v5:= (`byte`) v5 @kind i2b;
  #L232fb4.  v9[v3]:= v5 @kind byte;
  #L232fb8.  v3:= v10 + 1;
  #L232fbc.  v5:= v1 ^>> 6;
  #L232fc0.  v5:= v5 ^& 63;
  #L232fc4.  v5:= v5 ^| v2 @kind int;
  #L232fc6.  v5:= (`byte`) v5 @kind i2b;
  #L232fc8.  v9[v10]:= v5 @kind byte;
  #L232fcc.  v10:= v3 + 1;
  #L232fd0.  v1:= v1 ^& 63;
  #L232fd4.  v1:= v1 ^| v2 @kind int;
  #L232fd6.  v1:= (`byte`) v1 @kind i2b;
  #L232fd8.  v9[v3]:= v1 @kind byte;
  #L232fdc.  v1:= v4;
  #L232fde.  v1:= v1 + 1;
  #L232fe2.  goto L232eb2;
  #L232fe6.  v1:= v4;
  #L232fe8.  v8:= new `e.e.a.b.f.j.u6`;
  #L232fec.  v1:= v1 + -1;
  #L232ff0.  call `<init>`(v8, v1, v0) @signature `Le/e/a/b/f/j/u6;.<init>:(II)V` @kind direct;
  #L232ff6.  throw v8;
  #L232ff8.  if v5 > v3 then goto L233030;
  #L232ffc.  if v3 > v4 then goto L233030;
  #L233000.  v9:= v1 + 1;
  #L233004.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L23300a.  v11:= temp;
  #L23300c.  if v9 == v11 then goto L233024;
  #L233010.  call temp:= `charAt`(v8, v9) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L233016.  v8:= temp;
  #L233018.  call temp:= `isSurrogatePair`(v3, v8) @signature `Ljava/lang/Character;.isSurrogatePair:(CC)Z` @kind static;
  #L23301e.  v8:= temp;
  #L233020.  if v8 != 0 then goto L233030;
  #L233024.  v8:= new `e.e.a.b.f.j.u6`;
  #L233028.  call `<init>`(v8, v1, v0) @signature `Le/e/a/b/f/j/u6;.<init>:(II)V` @kind direct;
  #L23302e.  throw v8;
  #L233030.  v8:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L233034.  v9:= 37I;
  #L233038.  v11:= new `java.lang.StringBuilder`;
  #L23303c.  call `<init>`(v11, v9) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L233042.  v9:= "Failed writing " @kind object;
  #L233046.  call temp:= `append`(v11, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23304c.  call temp:= `append`(v11, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L233052.  v9:= " at index " @kind object;
  #L233056.  call temp:= `append`(v11, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23305c.  call temp:= `append`(v11, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L233062.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L233068.  v9:= temp @kind object;
  #L23306a.  call `<init>`(v8, v9) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L233070.  throw v8;
  #L233072.  return v10;
}
