record `e.e.a.b.f.u.p5` @kind class @AccessFlag FINAL extends `e.e.a.b.f.u.e3` @kind class, `e.e.a.b.f.u.c5` @kind interface, `e.e.a.b.f.u.m6` @kind interface, `java.util.RandomAccess` @kind interface {
  `long`[] `e.e.a.b.f.u.p5.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.u.p5.d` @AccessFlag PRIVATE;
}
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/u/p5;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L32f734.  v0:= new `e.e.a.b.f.u.p5`;
  #L32f738.  v1:= 0I;
  #L32f73a.  v2:= new `long`[v1];
  #L32f73e.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/u/p5;.<init>:([JI)V` @kind direct;
  #L32f744.  call `zzb`(v0) @signature `Le/e/a/b/f/u/e3;.zzb:()V` @kind virtual;
  #L32f74a.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.u.p5` v2 @kind this) @signature `Le/e/a/b/f/u/p5;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L32f75c.  v0:= 10I;
  #L32f760.  v0:= new `long`[v0];
  #L32f764.  v1:= 0I;
  #L32f766.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/u/p5;.<init>:([JI)V` @kind direct;
  #L32f76c.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.u.p5` v0 @kind this, `long`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/u/p5;.<init>:([JI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L32f780.  call `<init>`(v0) @signature `Le/e/a/b/f/u/e3;.<init>:()V` @kind direct;
  #L32f786.  v0.`e.e.a.b.f.u.p5.c` @type ^`long`[] := v1 @kind object;
  #L32f78a.  v0.`e.e.a.b.f.u.p5.d` @type ^`int` := v2;
  #L32f78e.  return @kind void;
}
procedure `void` `h`(`e.e.a.b.f.u.p5` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/u/p5;.h:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L32f8f8.  if v2 < 0 then goto L32f906;
  #L32f8fc.  v0:= v1.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f900.  if v2 >= v0 then goto L32f906;
  #L32f904.  return @kind void;
  #L32f906.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L32f90a.  call temp:= `i`(v1, v2) @signature `Le/e/a/b/f/u/p5;.i:(I)Ljava/lang/String;` @kind direct;
  #L32f910.  v2:= temp @kind object;
  #L32f912.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32f918.  throw v0;
}
procedure `java.lang.String` `i`(`e.e.a.b.f.u.p5` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/u/p5;.i:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L32f6c8.  v0:= v3.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f6cc.  v1:= new `java.lang.StringBuilder`;
  #L32f6d0.  v2:= 35I;
  #L32f6d4.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L32f6da.  v2:= "Index:" @kind object;
  #L32f6de.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f6e4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f6ea.  v4:= ", Size:" @kind object;
  #L32f6ee.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f6f4.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f6fa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32f700.  v4:= temp @kind object;
  #L32f702.  return v4 @kind object;
}
procedure `e.e.a.b.f.u.c5` `a`(`e.e.a.b.f.u.p5` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/u/p5;.a:(I)Le/e/a/b/f/u/c5;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L32f51c.  v0:= v2.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f520.  if v3 < v0 then goto L32f540;
  #L32f524.  v0:= new `e.e.a.b.f.u.p5`;
  #L32f528.  v1:= v2.`e.e.a.b.f.u.p5.c` @type ^`long`[] @kind object;
  #L32f52c.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([JI)[J` @kind static;
  #L32f532.  v3:= temp @kind object;
  #L32f534.  v1:= v2.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f538.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/u/p5;.<init>:([JI)V` @kind direct;
  #L32f53e.  return v0 @kind object;
  #L32f540.  v3:= new `java.lang.IllegalArgumentException`;
  #L32f544.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L32f54a.  throw v3;
}
procedure `void` `a`(`e.e.a.b.f.u.p5` v4 @kind this, `long` v5 ) @signature `Le/e/a/b/f/u/p5;.a:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32f8a0.  call `d`(v4) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32f8a6.  v0:= v4.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f8aa.  v1:= v4.`e.e.a.b.f.u.p5.c` @type ^`long`[] @kind object;
  #L32f8ae.  v2:= length @variable v1;
  #L32f8b0.  if v0 != v2 then goto L32f8d0;
  #L32f8b4.  v2:= v0 * 3;
  #L32f8b8.  v2:= v2 / 2;
  #L32f8bc.  v2:= v2 + 1;
  #L32f8c0.  v2:= new `long`[v2];
  #L32f8c4.  v3:= 0I;
  #L32f8c6.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32f8cc.  v4.`e.e.a.b.f.u.p5.c` @type ^`long`[] := v2 @kind object;
  #L32f8d0.  v0:= v4.`e.e.a.b.f.u.p5.c` @type ^`long`[] @kind object;
  #L32f8d4.  v1:= v4.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f8d8.  v2:= v1 + 1;
  #L32f8dc.  v4.`e.e.a.b.f.u.p5.d` @type ^`int` := v2;
  #L32f8e0.  v0[v1]:= v5 @kind wide;
  #L32f8e4.  return @kind void;
}
procedure `void` `add`(`e.e.a.b.f.u.p5` v5 @kind this, `int` v6 , `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/u/p5;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32f7a0.  v7:= (`java.lang.Long`) v7 @kind object;
  #L32f7a4.  call temp:= `longValue`(v7) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L32f7aa.  v0:= temp @kind wide;
  #L32f7ac.  call `d`(v5) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32f7b2.  if v6 < 0 then goto L32f828;
  #L32f7b6.  v7:= v5.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f7ba.  if v6 > v7 then goto L32f828;
  #L32f7be.  v2:= v5.`e.e.a.b.f.u.p5.c` @type ^`long`[] @kind object;
  #L32f7c2.  v3:= length @variable v2;
  #L32f7c4.  if v7 >= v3 then goto L32f7d6;
  #L32f7c8.  v3:= v6 + 1;
  #L32f7cc.  v7:= v7 - v6 @kind int;
  #L32f7ce.  call `arraycopy`(v2, v6, v2, v3, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32f7d4.  goto L32f806;
  #L32f7d6.  v7:= v7 * 3;
  #L32f7da.  v7:= v7 / 2;
  #L32f7de.  v7:= v7 + 1;
  #L32f7e2.  v7:= new `long`[v7];
  #L32f7e6.  v3:= 0I;
  #L32f7e8.  call `arraycopy`(v2, v3, v7, v3, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32f7ee.  v2:= v5.`e.e.a.b.f.u.p5.c` @type ^`long`[] @kind object;
  #L32f7f2.  v3:= v6 + 1;
  #L32f7f6.  v4:= v5.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f7fa.  v4:= v4 - v6 @kind int;
  #L32f7fc.  call `arraycopy`(v2, v6, v7, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32f802.  v5.`e.e.a.b.f.u.p5.c` @type ^`long`[] := v7 @kind object;
  #L32f806.  v7:= v5.`e.e.a.b.f.u.p5.c` @type ^`long`[] @kind object;
  #L32f80a.  v7[v6]:= v0 @kind wide;
  #L32f80e.  v6:= v5.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f812.  v6:= v6 + 1;
  #L32f816.  v5.`e.e.a.b.f.u.p5.d` @type ^`int` := v6;
  #L32f81a.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L32f81e.  v6:= v6 + 1;
  #L32f822.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L32f826.  return @kind void;
  #L32f828.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L32f82c.  call temp:= `i`(v5, v6) @signature `Le/e/a/b/f/u/p5;.i:(I)Ljava/lang/String;` @kind direct;
  #L32f832.  v6:= temp @kind object;
  #L32f834.  call `<init>`(v7, v6) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32f83a.  throw v7;
}
procedure `boolean` `add`(`e.e.a.b.f.u.p5` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/u/p5;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L32f3c4.  v3:= (`java.lang.Long`) v3 @kind object;
  #L32f3c8.  call temp:= `longValue`(v3) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L32f3ce.  v0:= temp @kind wide;
  #L32f3d0.  call `a`(v2, v0) @signature `Le/e/a/b/f/u/p5;.a:(J)V` @kind virtual;
  #L32f3d6.  v3:= 1I;
  #L32f3d8.  return v3;
}
procedure `boolean` `addAll`(`e.e.a.b.f.u.p5` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/u/p5;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32f3ec.  call `d`(v5) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32f3f2.  call temp:= `a`(v6) @signature `Le/e/a/b/f/u/w4;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L32f3f8.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.u.p5` @kind boolean;
  #L32f3fc.  if v0 != 0 then goto L32f40a;
  #L32f400.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/u/e3;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L32f406.  v6:= temp;
  #L32f408.  return v6;
  #L32f40a.  v6:= (`e.e.a.b.f.u.p5`) v6 @kind object;
  #L32f40e.  v0:= v6.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f412.  v1:= 0I;
  #L32f414.  if v0 != 0 then goto L32f41a;
  #L32f418.  return v1;
  #L32f41a.  v2:= 2147483647I;
  #L32f420.  v3:= v5.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f424.  v2:= v2 - v3 @kind int;
  #L32f426.  if v2 < v0 then goto L32f46a;
  #L32f42a.  v3:= v3 + v0 @kind int;
  #L32f42c.  v0:= v5.`e.e.a.b.f.u.p5.c` @type ^`long`[] @kind object;
  #L32f430.  v2:= length @variable v0;
  #L32f432.  if v3 <= v2 then goto L32f442;
  #L32f436.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([JI)[J` @kind static;
  #L32f43c.  v0:= temp @kind object;
  #L32f43e.  v5.`e.e.a.b.f.u.p5.c` @type ^`long`[] := v0 @kind object;
  #L32f442.  v0:= v6.`e.e.a.b.f.u.p5.c` @type ^`long`[] @kind object;
  #L32f446.  v2:= v5.`e.e.a.b.f.u.p5.c` @type ^`long`[] @kind object;
  #L32f44a.  v4:= v5.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f44e.  v6:= v6.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f452.  call `arraycopy`(v0, v1, v2, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32f458.  v5.`e.e.a.b.f.u.p5.d` @type ^`int` := v3;
  #L32f45c.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L32f460.  v0:= 1I;
  #L32f462.  v6:= v6 + v0 @kind int;
  #L32f464.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L32f468.  return v0;
  #L32f46a.  v6:= new `java.lang.OutOfMemoryError`;
  #L32f46e.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L32f474.  throw v6;
}
procedure `long` `b`(`e.e.a.b.f.u.p5` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/u/p5;.b:(I)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L32f714.  call `h`(v3, v4) @signature `Le/e/a/b/f/u/p5;.h:(I)V` @kind direct;
  #L32f71a.  v0:= v3.`e.e.a.b.f.u.p5.c` @type ^`long`[] @kind object;
  #L32f71e.  v1:= v0[v4] @kind wide;
  #L32f722.  return v1 @kind wide;
}
procedure `boolean` `contains`(`e.e.a.b.f.u.p5` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/u/p5;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L32f488.  call temp:= `indexOf`(v1, v2) @signature `Le/e/a/b/f/u/p5;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L32f48e.  v2:= temp;
  #L32f490.  v0:= -1I;
  #L32f492.  if v2 == v0 then goto L32f49a;
  #L32f496.  v2:= 1I;
  #L32f498.  return v2;
  #L32f49a.  v2:= 0I;
  #L32f49c.  return v2;
}
procedure `boolean` `equals`(`e.e.a.b.f.u.p5` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Le/e/a/b/f/u/p5;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L32f4b0.  v0:= 1I;
  #L32f4b2.  if v8 != v9 then goto L32f4b8;
  #L32f4b6.  return v0;
  #L32f4b8.  v1:= instanceof @variable v9 @type ^`e.e.a.b.f.u.p5` @kind boolean;
  #L32f4bc.  if v1 != 0 then goto L32f4ca;
  #L32f4c0.  call temp:= `equals`(v8, v9) @signature `Le/e/a/b/f/u/e3;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L32f4c6.  v9:= temp;
  #L32f4c8.  return v9;
  #L32f4ca.  v9:= (`e.e.a.b.f.u.p5`) v9 @kind object;
  #L32f4ce.  v1:= v8.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f4d2.  v2:= v9.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f4d6.  v3:= 0I;
  #L32f4d8.  if v1 == v2 then goto L32f4de;
  #L32f4dc.  return v3;
  #L32f4de.  v9:= v9.`e.e.a.b.f.u.p5.c` @type ^`long`[] @kind object;
  #L32f4e2.  v1:= 0I;
  #L32f4e4.  v2:= v8.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f4e8.  if v1 >= v2 then goto L32f508;
  #L32f4ec.  v2:= v8.`e.e.a.b.f.u.p5.c` @type ^`long`[] @kind object;
  #L32f4f0.  v4:= v2[v1] @kind wide;
  #L32f4f4.  v6:= v9[v1] @kind wide;
  #L32f4f8.  v2:= lcmp(v4, v6);
  #L32f4fc.  if v2 == 0 then goto L32f502;
  #L32f500.  return v3;
  #L32f502.  v1:= v1 + 1;
  #L32f506.  goto L32f4e4;
  #L32f508.  return v0;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.u.p5` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/u/p5;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L32f600.  call temp:= `b`(v2, v3) @signature `Le/e/a/b/f/u/p5;.b:(I)J` @kind virtual;
  #L32f606.  v0:= temp @kind wide;
  #L32f608.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L32f60e.  v3:= temp @kind object;
  #L32f610.  return v3 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.u.p5` v5 @kind this) @signature `Le/e/a/b/f/u/p5;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32f55c.  v0:= 1I;
  #L32f55e.  v1:= 0I;
  #L32f560.  v2:= v5.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f564.  if v1 >= v2 then goto L32f584;
  #L32f568.  v0:= v0 * 31;
  #L32f56c.  v2:= v5.`e.e.a.b.f.u.p5.c` @type ^`long`[] @kind object;
  #L32f570.  v3:= v2[v1] @kind wide;
  #L32f574.  call temp:= `a`(v3) @signature `Le/e/a/b/f/u/w4;.a:(J)I` @kind static;
  #L32f57a.  v2:= temp;
  #L32f57c.  v0:= v0 + v2 @kind int;
  #L32f57e.  v1:= v1 + 1;
  #L32f582.  goto L32f560;
  #L32f584.  return v0;
}
procedure `int` `indexOf`(`e.e.a.b.f.u.p5` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Le/e/a/b/f/u/p5;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L32f598.  v0:= instanceof @variable v8 @type ^`java.lang.Long` @kind boolean;
  #L32f59c.  v1:= -1I;
  #L32f59e.  if v0 != 0 then goto L32f5a4;
  #L32f5a2.  return v1;
  #L32f5a4.  v8:= (`java.lang.Long`) v8 @kind object;
  #L32f5a8.  call temp:= `longValue`(v8) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L32f5ae.  v2:= temp @kind wide;
  #L32f5b0.  call temp:= `size`(v7) @signature `Le/e/a/b/f/u/p5;.size:()I` @kind virtual;
  #L32f5b6.  v8:= temp;
  #L32f5b8.  v0:= 0I;
  #L32f5ba.  if v0 >= v8 then goto L32f5d6;
  #L32f5be.  v4:= v7.`e.e.a.b.f.u.p5.c` @type ^`long`[] @kind object;
  #L32f5c2.  v5:= v4[v0] @kind wide;
  #L32f5c6.  v4:= lcmp(v5, v2);
  #L32f5ca.  if v4 != 0 then goto L32f5d0;
  #L32f5ce.  return v0;
  #L32f5d0.  v0:= v0 + 1;
  #L32f5d4.  goto L32f5ba;
  #L32f5d6.  return v1;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.u.p5` v5 @kind this, `int` v6 ) @signature `Le/e/a/b/f/u/p5;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32f624.  call `d`(v5) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32f62a.  call `h`(v5, v6) @signature `Le/e/a/b/f/u/p5;.h:(I)V` @kind direct;
  #L32f630.  v0:= v5.`e.e.a.b.f.u.p5.c` @type ^`long`[] @kind object;
  #L32f634.  v1:= v0[v6] @kind wide;
  #L32f638.  v3:= v5.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f63c.  v4:= v3 + -1;
  #L32f640.  if v6 >= v4 then goto L32f654;
  #L32f644.  v4:= v6 + 1;
  #L32f648.  v3:= v3 - v6 @kind int;
  #L32f64a.  v3:= v3 + -1;
  #L32f64e.  call `arraycopy`(v0, v4, v0, v6, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32f654.  v6:= v5.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f658.  v6:= v6 + -1;
  #L32f65c.  v5.`e.e.a.b.f.u.p5.d` @type ^`int` := v6;
  #L32f660.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L32f664.  v6:= v6 + 1;
  #L32f668.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L32f66c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L32f672.  v6:= temp @kind object;
  #L32f674.  return v6 @kind object;
}
procedure `void` `removeRange`(`e.e.a.b.f.u.p5` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/u/p5;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L32f84c.  call `d`(v2) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32f852.  if v4 < v3 then goto L32f880;
  #L32f856.  v0:= v2.`e.e.a.b.f.u.p5.c` @type ^`long`[] @kind object;
  #L32f85a.  v1:= v2.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f85e.  v1:= v1 - v4 @kind int;
  #L32f860.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32f866.  v0:= v2.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f86a.  v4:= v4 - v3 @kind int;
  #L32f86c.  v0:= v0 - v4 @kind int;
  #L32f86e.  v2.`e.e.a.b.f.u.p5.d` @type ^`int` := v0;
  #L32f872.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L32f876.  v3:= v3 + 1;
  #L32f87a.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L32f87e.  return @kind void;
  #L32f880.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L32f884.  v4:= "toIndex < fromIndex" @kind object;
  #L32f888.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32f88e.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.u.p5` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/u/p5;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32f688.  v6:= (`java.lang.Long`) v6 @kind object;
  #L32f68c.  call temp:= `longValue`(v6) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L32f692.  v0:= temp @kind wide;
  #L32f694.  call `d`(v4) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32f69a.  call `h`(v4, v5) @signature `Le/e/a/b/f/u/p5;.h:(I)V` @kind direct;
  #L32f6a0.  v6:= v4.`e.e.a.b.f.u.p5.c` @type ^`long`[] @kind object;
  #L32f6a4.  v2:= v6[v5] @kind wide;
  #L32f6a8.  v6[v5]:= v0 @kind wide;
  #L32f6ac.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L32f6b2.  v5:= temp @kind object;
  #L32f6b4.  return v5 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.u.p5` v1 @kind this) @signature `Le/e/a/b/f/u/p5;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L32f5e8.  v0:= v1.`e.e.a.b.f.u.p5.d` @type ^`int`;
  #L32f5ec.  return v0;
}
