record `e.e.a.b.f.o.j0` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `boolean` `a`(`java.util.Set` v3 @kind object, `java.util.Collection` v4 @kind object) @signature `Le/e/a/b/f/o/j0;.a:(Ljava/util/Set;Ljava/util/Collection;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2c14e8.  v0:= 0I;
  #L2c14ea.  if v4 == 0 then goto L2c156c;
  #L2c14ee.  v1:= instanceof @variable v4 @type ^`e.e.a.b.f.o.e0` @kind boolean;
  #L2c14f2.  if v1 == 0 then goto L2c1502;
  #L2c14f6.  v4:= (`e.e.a.b.f.o.e0`) v4 @kind object;
  #L2c14fa.  call temp:= `zza`(v4) @signature `Le/e/a/b/f/o/e0;.zza:()Ljava/util/Set;` @kind interface;
  #L2c1500.  v4:= temp @kind object;
  #L2c1502.  v1:= instanceof @variable v4 @type ^`java.util.Set` @kind boolean;
  #L2c1506.  if v1 == 0 then goto L2c155a;
  #L2c150a.  call temp:= `size`(v4) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L2c1510.  v1:= temp;
  #L2c1512.  call temp:= `size`(v3) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L2c1518.  v2:= temp;
  #L2c151a.  if v1 <= v2 then goto L2c155a;
  #L2c151e.  call temp:= `iterator`(v3) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c1524.  v3:= temp @kind object;
  #L2c1526.  if v4 == 0 then goto L2c1558;
  #L2c152a.  v0:= 0I;
  #L2c152c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c1532.  v1:= temp;
  #L2c1534.  if v1 == 0 then goto L2c1556;
  #L2c1538.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c153e.  v1:= temp @kind object;
  #L2c1540.  call temp:= `contains`(v4, v1) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2c1546.  v1:= temp;
  #L2c1548.  if v1 == 0 then goto L2c152c;
  #L2c154c.  call `remove`(v3) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L2c1552.  v0:= 1I;
  #L2c1554.  goto L2c152c;
  #L2c1556.  return v0;
  #L2c1558.  throw v0;
  #L2c155a.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c1560.  v4:= temp @kind object;
  #L2c1562.  call temp:= `a`(v3, v4) @signature `Le/e/a/b/f/o/j0;.a:(Ljava/util/Set;Ljava/util/Iterator;)Z` @kind static;
  #L2c1568.  v3:= temp;
  #L2c156a.  return v3;
  #L2c156c.  throw v0;
}
procedure `boolean` `a`(`java.util.Set` v3 @kind object, `java.util.Iterator` v4 @kind object) @signature `Le/e/a/b/f/o/j0;.a:(Ljava/util/Set;Ljava/util/Iterator;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2c14a8.  v0:= 0I;
  #L2c14aa.  v1:= 0I;
  #L2c14ac.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c14b2.  v2:= temp;
  #L2c14b4.  if v2 == 0 then goto L2c14cc;
  #L2c14b8.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c14be.  v2:= temp @kind object;
  #L2c14c0.  call temp:= `remove`(v3, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2c14c6.  v2:= temp;
  #L2c14c8.  v1:= v1 ^| v2 @kind int;
  #L2c14ca.  goto L2c14ac;
  #L2c14cc.  v3:= 1I;
  #L2c14ce.  if v3 == v1 then goto L2c14d4;
  #L2c14d2.  return v0;
  #L2c14d4.  return v3;
}
