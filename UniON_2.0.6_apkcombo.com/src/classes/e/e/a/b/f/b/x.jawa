record `e.e.a.b.f.b.x` @kind class @AccessFlag FINAL extends `e.e.a.b.f.b.t` @kind class, `e.e.a.b.f.b.k1` @kind interface, `java.util.RandomAccess` @kind interface {
  `boolean`[] `e.e.a.b.f.b.x.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.b.x.d` @AccessFlag PRIVATE;
}
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/b/x;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1fa28c.  v0:= new `e.e.a.b.f.b.x`;
  #L1fa290.  call `<init>`(v0) @signature `Le/e/a/b/f/b/x;.<init>:()V` @kind direct;
  #L1fa296.  call `h`(v0) @signature `Le/e/a/b/f/b/t;.h:()V` @kind virtual;
  #L1fa29c.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.b.x` v2 @kind this) @signature `Le/e/a/b/f/b/x;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1fa2b0.  v0:= 10I;
  #L1fa2b4.  v0:= new `boolean`[v0];
  #L1fa2b8.  v1:= 0I;
  #L1fa2ba.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/b/x;.<init>:([ZI)V` @kind direct;
  #L1fa2c0.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.b.x` v0 @kind this, `boolean`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/b/x;.<init>:([ZI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1fa2d4.  call `<init>`(v0) @signature `Le/e/a/b/f/b/t;.<init>:()V` @kind direct;
  #L1fa2da.  v0.`e.e.a.b.f.b.x.c` @type ^`boolean`[] := v1 @kind object;
  #L1fa2de.  v0.`e.e.a.b.f.b.x.d` @type ^`int` := v2;
  #L1fa2e2.  return @kind void;
}
procedure `void` `a`(`e.e.a.b.f.b.x` v4 @kind this, `int` v5 , `boolean` v6 ) @signature `Le/e/a/b/f/b/x;.a:(IZ)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1fa388.  call `d`(v4) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1fa38e.  if v5 < 0 then goto L1fa404;
  #L1fa392.  v0:= v4.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa396.  if v5 > v0 then goto L1fa404;
  #L1fa39a.  v1:= v4.`e.e.a.b.f.b.x.c` @type ^`boolean`[] @kind object;
  #L1fa39e.  v2:= length @variable v1;
  #L1fa3a0.  if v0 >= v2 then goto L1fa3b2;
  #L1fa3a4.  v2:= v5 + 1;
  #L1fa3a8.  v0:= v0 - v5 @kind int;
  #L1fa3aa.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1fa3b0.  goto L1fa3e2;
  #L1fa3b2.  v0:= v0 * 3;
  #L1fa3b6.  v0:= v0 / 2;
  #L1fa3ba.  v0:= v0 + 1;
  #L1fa3be.  v0:= new `boolean`[v0];
  #L1fa3c2.  v2:= 0I;
  #L1fa3c4.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1fa3ca.  v1:= v4.`e.e.a.b.f.b.x.c` @type ^`boolean`[] @kind object;
  #L1fa3ce.  v2:= v5 + 1;
  #L1fa3d2.  v3:= v4.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa3d6.  v3:= v3 - v5 @kind int;
  #L1fa3d8.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1fa3de.  v4.`e.e.a.b.f.b.x.c` @type ^`boolean`[] := v0 @kind object;
  #L1fa3e2.  v0:= v4.`e.e.a.b.f.b.x.c` @type ^`boolean`[] @kind object;
  #L1fa3e6.  v0[v5]:= v6 @kind boolean;
  #L1fa3ea.  v5:= v4.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa3ee.  v5:= v5 + 1;
  #L1fa3f2.  v4.`e.e.a.b.f.b.x.d` @type ^`int` := v5;
  #L1fa3f6.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L1fa3fa.  v5:= v5 + 1;
  #L1fa3fe.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L1fa402.  return @kind void;
  #L1fa404.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L1fa408.  call temp:= `e`(v4, v5) @signature `Le/e/a/b/f/b/x;.e:(I)Ljava/lang/String;` @kind direct;
  #L1fa40e.  v5:= temp @kind object;
  #L1fa410.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fa416.  throw v6;
}
procedure `void` `d`(`e.e.a.b.f.b.x` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/b/x;.d:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1fa428.  if v2 < 0 then goto L1fa436;
  #L1fa42c.  v0:= v1.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa430.  if v2 >= v0 then goto L1fa436;
  #L1fa434.  return @kind void;
  #L1fa436.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L1fa43a.  call temp:= `e`(v1, v2) @signature `Le/e/a/b/f/b/x;.e:(I)Ljava/lang/String;` @kind direct;
  #L1fa440.  v2:= temp @kind object;
  #L1fa442.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fa448.  throw v0;
}
procedure `java.lang.String` `e`(`e.e.a.b.f.b.x` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/b/x;.e:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1fa240.  v0:= v3.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa244.  v1:= new `java.lang.StringBuilder`;
  #L1fa248.  v2:= 35I;
  #L1fa24c.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1fa252.  v2:= "Index:" @kind object;
  #L1fa256.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa25c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa262.  v4:= ", Size:" @kind object;
  #L1fa266.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa26c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa272.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fa278.  v4:= temp @kind object;
  #L1fa27a.  return v4 @kind object;
}
procedure `void` `a`(`e.e.a.b.f.b.x` v1 @kind this, `boolean` v2 ) @signature `Le/e/a/b/f/b/x;.a:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1fa318.  v0:= v1.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa31c.  call `a`(v1, v0, v2) @signature `Le/e/a/b/f/b/x;.a:(IZ)V` @kind direct;
  #L1fa322.  return @kind void;
}
procedure `void` `add`(`e.e.a.b.f.b.x` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/b/x;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L1fa2f4.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L1fa2f8.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L1fa2fe.  v2:= temp;
  #L1fa300.  call `a`(v0, v1, v2) @signature `Le/e/a/b/f/b/x;.a:(IZ)V` @kind direct;
  #L1fa306.  return @kind void;
}
procedure `boolean` `addAll`(`e.e.a.b.f.b.x` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/b/x;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1f9f6c.  call `d`(v5) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1f9f72.  call temp:= `a`(v6) @signature `Le/e/a/b/f/b/h1;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1f9f78.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.b.x` @kind boolean;
  #L1f9f7c.  if v0 != 0 then goto L1f9f8a;
  #L1f9f80.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/b/t;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L1f9f86.  v6:= temp;
  #L1f9f88.  return v6;
  #L1f9f8a.  v6:= (`e.e.a.b.f.b.x`) v6 @kind object;
  #L1f9f8e.  v0:= v6.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1f9f92.  v1:= 0I;
  #L1f9f94.  if v0 != 0 then goto L1f9f9a;
  #L1f9f98.  return v1;
  #L1f9f9a.  v2:= 2147483647I;
  #L1f9fa0.  v3:= v5.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1f9fa4.  v2:= v2 - v3 @kind int;
  #L1f9fa6.  if v2 < v0 then goto L1f9fea;
  #L1f9faa.  v3:= v3 + v0 @kind int;
  #L1f9fac.  v0:= v5.`e.e.a.b.f.b.x.c` @type ^`boolean`[] @kind object;
  #L1f9fb0.  v2:= length @variable v0;
  #L1f9fb2.  if v3 <= v2 then goto L1f9fc2;
  #L1f9fb6.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([ZI)[Z` @kind static;
  #L1f9fbc.  v0:= temp @kind object;
  #L1f9fbe.  v5.`e.e.a.b.f.b.x.c` @type ^`boolean`[] := v0 @kind object;
  #L1f9fc2.  v0:= v6.`e.e.a.b.f.b.x.c` @type ^`boolean`[] @kind object;
  #L1f9fc6.  v2:= v5.`e.e.a.b.f.b.x.c` @type ^`boolean`[] @kind object;
  #L1f9fca.  v4:= v5.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1f9fce.  v6:= v6.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1f9fd2.  call `arraycopy`(v0, v1, v2, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1f9fd8.  v5.`e.e.a.b.f.b.x.d` @type ^`int` := v3;
  #L1f9fdc.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L1f9fe0.  v0:= 1I;
  #L1f9fe2.  v6:= v6 + v0 @kind int;
  #L1f9fe4.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L1f9fe8.  return v0;
  #L1f9fea.  v6:= new `java.lang.OutOfMemoryError`;
  #L1f9fee.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L1f9ff4.  throw v6;
}
procedure `boolean` `equals`(`e.e.a.b.f.b.x` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/b/x;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1fa008.  v0:= 1I;
  #L1fa00a.  if v5 != v6 then goto L1fa010;
  #L1fa00e.  return v0;
  #L1fa010.  v1:= instanceof @variable v6 @type ^`e.e.a.b.f.b.x` @kind boolean;
  #L1fa014.  if v1 != 0 then goto L1fa022;
  #L1fa018.  call temp:= `equals`(v5, v6) @signature `Le/e/a/b/f/b/t;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L1fa01e.  v6:= temp;
  #L1fa020.  return v6;
  #L1fa022.  v6:= (`e.e.a.b.f.b.x`) v6 @kind object;
  #L1fa026.  v1:= v5.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa02a.  v2:= v6.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa02e.  v3:= 0I;
  #L1fa030.  if v1 == v2 then goto L1fa036;
  #L1fa034.  return v3;
  #L1fa036.  v6:= v6.`e.e.a.b.f.b.x.c` @type ^`boolean`[] @kind object;
  #L1fa03a.  v1:= 0I;
  #L1fa03c.  v2:= v5.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa040.  if v1 >= v2 then goto L1fa05c;
  #L1fa044.  v2:= v5.`e.e.a.b.f.b.x.c` @type ^`boolean`[] @kind object;
  #L1fa048.  v2:= v2[v1] @kind boolean;
  #L1fa04c.  v4:= v6[v1] @kind boolean;
  #L1fa050.  if v2 == v4 then goto L1fa056;
  #L1fa054.  return v3;
  #L1fa056.  v1:= v1 + 1;
  #L1fa05a.  goto L1fa03c;
  #L1fa05c.  return v0;
}
procedure `e.e.a.b.f.b.k1` `f`(`e.e.a.b.f.b.x` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/b/x;.f:(I)Le/e/a/b/f/b/k1;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L1fa0e4.  v0:= v2.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa0e8.  if v3 < v0 then goto L1fa108;
  #L1fa0ec.  v0:= new `e.e.a.b.f.b.x`;
  #L1fa0f0.  v1:= v2.`e.e.a.b.f.b.x.c` @type ^`boolean`[] @kind object;
  #L1fa0f4.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([ZI)[Z` @kind static;
  #L1fa0fa.  v3:= temp @kind object;
  #L1fa0fc.  v1:= v2.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa100.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/b/x;.<init>:([ZI)V` @kind direct;
  #L1fa106.  return v0 @kind object;
  #L1fa108.  v3:= new `java.lang.IllegalArgumentException`;
  #L1fa10c.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1fa112.  throw v3;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.b.x` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/b/x;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L1fa178.  call `d`(v1, v2) @signature `Le/e/a/b/f/b/x;.d:(I)V` @kind direct;
  #L1fa17e.  v0:= v1.`e.e.a.b.f.b.x.c` @type ^`boolean`[] @kind object;
  #L1fa182.  v2:= v0[v2] @kind boolean;
  #L1fa186.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1fa18c.  v2:= temp @kind object;
  #L1fa18e.  return v2 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.b.x` v3 @kind this) @signature `Le/e/a/b/f/b/x;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1fa124.  v0:= 1I;
  #L1fa126.  v1:= 0I;
  #L1fa128.  v2:= v3.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa12c.  if v1 >= v2 then goto L1fa14c;
  #L1fa130.  v0:= v0 * 31;
  #L1fa134.  v2:= v3.`e.e.a.b.f.b.x.c` @type ^`boolean`[] @kind object;
  #L1fa138.  v2:= v2[v1] @kind boolean;
  #L1fa13c.  call temp:= `a`(v2) @signature `Le/e/a/b/f/b/h1;.a:(Z)I` @kind static;
  #L1fa142.  v2:= temp;
  #L1fa144.  v0:= v0 + v2 @kind int;
  #L1fa146.  v1:= v1 + 1;
  #L1fa14a.  goto L1fa128;
  #L1fa14c.  return v0;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.b.x` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/b/x;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1fa1a0.  call `d`(v4) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1fa1a6.  call `d`(v4, v5) @signature `Le/e/a/b/f/b/x;.d:(I)V` @kind direct;
  #L1fa1ac.  v0:= v4.`e.e.a.b.f.b.x.c` @type ^`boolean`[] @kind object;
  #L1fa1b0.  v1:= v0[v5] @kind boolean;
  #L1fa1b4.  v2:= v4.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa1b8.  v3:= v2 + -1;
  #L1fa1bc.  if v5 >= v3 then goto L1fa1cc;
  #L1fa1c0.  v3:= v5 + 1;
  #L1fa1c4.  v2:= v2 - v5 @kind int;
  #L1fa1c6.  call `arraycopy`(v0, v3, v0, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1fa1cc.  v5:= v4.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa1d0.  v5:= v5 + -1;
  #L1fa1d4.  v4.`e.e.a.b.f.b.x.d` @type ^`int` := v5;
  #L1fa1d8.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L1fa1dc.  v5:= v5 + 1;
  #L1fa1e0.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L1fa1e4.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1fa1ea.  v5:= temp @kind object;
  #L1fa1ec.  return v5 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.b.x` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/b/x;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1fa070.  call `d`(v3) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1fa076.  v0:= 0I;
  #L1fa078.  v1:= 0I;
  #L1fa07a.  v2:= v3.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa07e.  if v1 >= v2 then goto L1fa0d0;
  #L1fa082.  v2:= v3.`e.e.a.b.f.b.x.c` @type ^`boolean`[] @kind object;
  #L1fa086.  v2:= v2[v1] @kind boolean;
  #L1fa08a.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1fa090.  v2:= temp @kind object;
  #L1fa092.  call temp:= `equals`(v4, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1fa098.  v2:= temp;
  #L1fa09a.  if v2 == 0 then goto L1fa0ca;
  #L1fa09e.  v4:= v3.`e.e.a.b.f.b.x.c` @type ^`boolean`[] @kind object;
  #L1fa0a2.  v0:= v1 + 1;
  #L1fa0a6.  v2:= v3.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa0aa.  v2:= v2 - v1 @kind int;
  #L1fa0ac.  call `arraycopy`(v4, v0, v4, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1fa0b2.  v4:= v3.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa0b6.  v0:= 1I;
  #L1fa0b8.  v4:= v4 - v0 @kind int;
  #L1fa0ba.  v3.`e.e.a.b.f.b.x.d` @type ^`int` := v4;
  #L1fa0be.  v4:= v3.`java.util.AbstractList.modCount` @type ^`int`;
  #L1fa0c2.  v4:= v4 + v0 @kind int;
  #L1fa0c4.  v3.`java.util.AbstractList.modCount` @type ^`int` := v4;
  #L1fa0c8.  return v0;
  #L1fa0ca.  v1:= v1 + 1;
  #L1fa0ce.  goto L1fa07a;
  #L1fa0d0.  return v0;
}
procedure `void` `removeRange`(`e.e.a.b.f.b.x` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/b/x;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L1fa334.  call `d`(v2) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1fa33a.  if v4 < v3 then goto L1fa368;
  #L1fa33e.  v0:= v2.`e.e.a.b.f.b.x.c` @type ^`boolean`[] @kind object;
  #L1fa342.  v1:= v2.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa346.  v1:= v1 - v4 @kind int;
  #L1fa348.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1fa34e.  v0:= v2.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa352.  v4:= v4 - v3 @kind int;
  #L1fa354.  v0:= v0 - v4 @kind int;
  #L1fa356.  v2.`e.e.a.b.f.b.x.d` @type ^`int` := v0;
  #L1fa35a.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L1fa35e.  v3:= v3 + 1;
  #L1fa362.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L1fa366.  return @kind void;
  #L1fa368.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L1fa36c.  v4:= "toIndex < fromIndex" @kind object;
  #L1fa370.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fa376.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.b.x` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/b/x;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L1fa200.  v4:= (`java.lang.Boolean`) v4 @kind object;
  #L1fa204.  call temp:= `booleanValue`(v4) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L1fa20a.  v4:= temp;
  #L1fa20c.  call `d`(v2) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1fa212.  call `d`(v2, v3) @signature `Le/e/a/b/f/b/x;.d:(I)V` @kind direct;
  #L1fa218.  v0:= v2.`e.e.a.b.f.b.x.c` @type ^`boolean`[] @kind object;
  #L1fa21c.  v1:= v0[v3] @kind boolean;
  #L1fa220.  v0[v3]:= v4 @kind boolean;
  #L1fa224.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1fa22a.  v3:= temp @kind object;
  #L1fa22c.  return v3 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.b.x` v1 @kind this) @signature `Le/e/a/b/f/b/x;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1fa160.  v0:= v1.`e.e.a.b.f.b.x.d` @type ^`int`;
  #L1fa164.  return v0;
}
