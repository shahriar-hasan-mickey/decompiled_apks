record `e.e.a.b.f.k.m1` @kind class @AccessFlag FINAL extends `java.util.AbstractCollection` @kind class {
  `java.util.Map` `e.e.a.b.f.k.m1.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`e.e.a.b.f.k.m1` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Le/e/a/b/f/k/m1;.<init>:(Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2471b8.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L2471be.  v0.`e.e.a.b.f.k.m1.b` @type ^`java.util.Map` := v1 @kind object;
  #L2471c2.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.k.m1` v1 @kind this) @signature `Le/e/a/b/f/k/m1;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2471d4.  v0:= v1.`e.e.a.b.f.k.m1.b` @type ^`java.util.Map` @kind object;
  #L2471d8.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L2471de.  return @kind void;
}
procedure `boolean` `contains`(`e.e.a.b.f.k.m1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/k/m1;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L246f5c.  v0:= v1.`e.e.a.b.f.k.m1.b` @type ^`java.util.Map` @kind object;
  #L246f60.  call temp:= `containsValue`(v0, v2) @signature `Ljava/util/Map;.containsValue:(Ljava/lang/Object;)Z` @kind interface;
  #L246f66.  v2:= temp;
  #L246f68.  return v2;
}
procedure `boolean` `isEmpty`(`e.e.a.b.f.k.m1` v1 @kind this) @signature `Le/e/a/b/f/k/m1;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L246f7c.  v0:= v1.`e.e.a.b.f.k.m1.b` @type ^`java.util.Map` @kind object;
  #L246f80.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L246f86.  v0:= temp;
  #L246f88.  return v0;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.k.m1` v2 @kind this) @signature `Le/e/a/b/f/k/m1;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L247188.  v0:= v2.`e.e.a.b.f.k.m1.b` @type ^`java.util.Map` @kind object;
  #L24718c.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L247192.  v0:= temp @kind object;
  #L247194.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L24719a.  v0:= temp @kind object;
  #L24719c.  v1:= new `e.e.a.b.f.k.j1`;
  #L2471a0.  call `<init>`(v1, v0) @signature `Le/e/a/b/f/k/j1;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L2471a6.  return v1 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.k.m1` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/k/m1;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L246f9c.  call temp:= `remove`(v3, v4) @signature `Ljava/util/AbstractCollection;.remove:(Ljava/lang/Object;)Z` @kind super;
  #L246fa2.  v4:= temp;
  #L246fa4.  return v4;
  #L246fa6.  v0:= v3.`e.e.a.b.f.k.m1.b` @type ^`java.util.Map` @kind object;
  #L246faa.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L246fb0.  v0:= temp @kind object;
  #L246fb2.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L246fb8.  v0:= temp @kind object;
  #L246fba.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L246fc0.  v1:= temp;
  #L246fc2.  if v1 == 0 then goto L246ffc;
  #L246fc6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L246fcc.  v1:= temp @kind object;
  #L246fce.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L246fd2.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L246fd8.  v2:= temp @kind object;
  #L246fda.  call temp:= `a`(v4, v2) @signature `Le/e/a/b/f/k/n;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L246fe0.  v2:= temp;
  #L246fe2.  if v2 == 0 then goto L246fba;
  #L246fe6.  v4:= v3.`e.e.a.b.f.k.m1.b` @type ^`java.util.Map` @kind object;
  #L246fea.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L246ff0.  v0:= temp @kind object;
  #L246ff2.  call temp:= `remove`(v4, v0) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L246ff8.  v4:= 1I;
  #L246ffa.  return v4;
  #L246ffc.  v4:= 0I;
  #L246ffe.  return v4;
  catch `java.lang.UnsupportedOperationException` @[L246f9c..L246fa4] goto L246fa6;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.k.m1` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Le/e/a/b/f/k/m1;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L247020.  if v5 == 0 then goto L24702e;
  #L247024.  call temp:= `removeAll`(v4, v5) @signature `Ljava/util/AbstractCollection;.removeAll:(Ljava/util/Collection;)Z` @kind super;
  #L24702a.  v5:= temp;
  #L24702c.  return v5;
  #L24702e.  v0:= 0I;
  #L247030.  throw v0;
  #L247032.  v0:= new `java.util.HashSet`;
  #L247036.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L24703c.  v1:= v4.`e.e.a.b.f.k.m1.b` @type ^`java.util.Map` @kind object;
  #L247040.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L247046.  v1:= temp @kind object;
  #L247048.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L24704e.  v1:= temp @kind object;
  #L247050.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L247056.  v2:= temp;
  #L247058.  if v2 == 0 then goto L24708c;
  #L24705c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L247062.  v2:= temp @kind object;
  #L247064.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L247068.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L24706e.  v3:= temp @kind object;
  #L247070.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L247076.  v3:= temp;
  #L247078.  if v3 == 0 then goto L247050;
  #L24707c.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L247082.  v2:= temp @kind object;
  #L247084.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24708a.  goto L247050;
  #L24708c.  v5:= v4.`e.e.a.b.f.k.m1.b` @type ^`java.util.Map` @kind object;
  #L247090.  call temp:= `keySet`(v5) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L247096.  v5:= temp @kind object;
  #L247098.  call temp:= `removeAll`(v5, v0) @signature `Ljava/util/Set;.removeAll:(Ljava/util/Collection;)Z` @kind interface;
  #L24709e.  v5:= temp;
  #L2470a0.  return v5;
  catch `java.lang.UnsupportedOperationException` @[L247024..L247032] goto L247032;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.k.m1` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Le/e/a/b/f/k/m1;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2470c4.  if v5 == 0 then goto L2470d2;
  #L2470c8.  call temp:= `retainAll`(v4, v5) @signature `Ljava/util/AbstractCollection;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L2470ce.  v5:= temp;
  #L2470d0.  return v5;
  #L2470d2.  v0:= 0I;
  #L2470d4.  throw v0;
  #L2470d6.  v0:= new `java.util.HashSet`;
  #L2470da.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L2470e0.  v1:= v4.`e.e.a.b.f.k.m1.b` @type ^`java.util.Map` @kind object;
  #L2470e4.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2470ea.  v1:= temp @kind object;
  #L2470ec.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2470f2.  v1:= temp @kind object;
  #L2470f4.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2470fa.  v2:= temp;
  #L2470fc.  if v2 == 0 then goto L247130;
  #L247100.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L247106.  v2:= temp @kind object;
  #L247108.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L24710c.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L247112.  v3:= temp @kind object;
  #L247114.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L24711a.  v3:= temp;
  #L24711c.  if v3 == 0 then goto L2470f4;
  #L247120.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L247126.  v2:= temp @kind object;
  #L247128.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24712e.  goto L2470f4;
  #L247130.  v5:= v4.`e.e.a.b.f.k.m1.b` @type ^`java.util.Map` @kind object;
  #L247134.  call temp:= `keySet`(v5) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L24713a.  v5:= temp @kind object;
  #L24713c.  call temp:= `retainAll`(v5, v0) @signature `Ljava/util/Set;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L247142.  v5:= temp;
  #L247144.  return v5;
  catch `java.lang.UnsupportedOperationException` @[L2470c8..L2470d6] goto L2470d6;
}
procedure `int` `size`(`e.e.a.b.f.k.m1` v1 @kind this) @signature `Le/e/a/b/f/k/m1;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L247168.  v0:= v1.`e.e.a.b.f.k.m1.b` @type ^`java.util.Map` @kind object;
  #L24716c.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L247172.  v0:= temp;
  #L247174.  return v0;
}
