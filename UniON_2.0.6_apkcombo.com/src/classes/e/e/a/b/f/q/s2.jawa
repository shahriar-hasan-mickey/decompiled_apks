record `e.e.a.b.f.q.s2` @kind class @AccessFlag FINAL {
}
global `e.e.a.b.f.q.o2` `@@e.e.a.b.f.q.s2.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/q/s2;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2df3ac.  call temp:= `b`() @signature `Le/e/a/b/f/q/n2;.b:()Z` @kind static;
  #L2df3b2.  v0:= temp;
  #L2df3b4.  if v0 == 0 then goto L2df3dc;
  #L2df3b8.  call temp:= `c`() @signature `Le/e/a/b/f/q/n2;.c:()Z` @kind static;
  #L2df3be.  v0:= temp;
  #L2df3c0.  if v0 == 0 then goto L2df3dc;
  #L2df3c4.  call temp:= `a`() @signature `Le/e/a/b/f/q/uu;.a:()Z` @kind static;
  #L2df3ca.  v0:= temp;
  #L2df3cc.  if v0 != 0 then goto L2df3dc;
  #L2df3d0.  v0:= new `e.e.a.b.f.q.r2`;
  #L2df3d4.  call `<init>`(v0) @signature `Le/e/a/b/f/q/r2;.<init>:()V` @kind direct;
  #L2df3da.  goto L2df3e6;
  #L2df3dc.  v0:= new `e.e.a.b.f.q.p2`;
  #L2df3e0.  call `<init>`(v0) @signature `Le/e/a/b/f/q/p2;.<init>:()V` @kind direct;
  #L2df3e6.  `@@e.e.a.b.f.q.s2.a` @type ^`e.e.a.b.f.q.o2` := v0 @kind object;
  #L2df3ea.  return @kind void;
}
procedure `int` `a`(`int` v0 ) @signature `Le/e/a/b/f/q/s2;.a:(I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2df30c.  call temp:= `b`(v0) @signature `Le/e/a/b/f/q/s2;.b:(I)I` @kind static;
  #L2df312.  v0:= temp;
  #L2df314.  return v0;
}
procedure `int` `a`(`int` v0 , `int` v1 ) @signature `Le/e/a/b/f/q/s2;.a:(II)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2df270.  call temp:= `b`(v0, v1) @signature `Le/e/a/b/f/q/s2;.b:(II)I` @kind static;
  #L2df276.  v0:= temp;
  #L2df278.  return v0;
}
procedure `int` `a`(`int` v0 , `int` v1 , `int` v2 ) @signature `Le/e/a/b/f/q/s2;.a:(III)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2df28c.  call temp:= `b`(v0, v1, v2) @signature `Le/e/a/b/f/q/s2;.b:(III)I` @kind static;
  #L2df292.  v0:= temp;
  #L2df294.  return v0;
}
procedure `int` `a`(`java.lang.CharSequence` v8 @kind object) @signature `Le/e/a/b/f/q/s2;.a:(Ljava/lang/CharSequence;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2df148.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L2df14e.  v0:= temp;
  #L2df150.  v1:= 0I;
  #L2df152.  v2:= 0I;
  #L2df154.  if v2 >= v0 then goto L2df16e;
  #L2df158.  call temp:= `charAt`(v8, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2df15e.  v3:= temp;
  #L2df160.  v4:= 128I;
  #L2df164.  if v3 >= v4 then goto L2df16e;
  #L2df168.  v2:= v2 + 1;
  #L2df16c.  goto L2df154;
  #L2df16e.  v3:= v0;
  #L2df170.  if v2 >= v0 then goto L2df1fa;
  #L2df174.  call temp:= `charAt`(v8, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2df17a.  v4:= temp;
  #L2df17c.  v5:= 2048I;
  #L2df180.  if v4 >= v5 then goto L2df194;
  #L2df184.  v4:= v4 - 127;
  #L2df188.  v4:= v4 ^>> 31;
  #L2df18c.  v3:= v3 + v4 @kind int;
  #L2df18e.  v2:= v2 + 1;
  #L2df192.  goto L2df170;
  #L2df194.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L2df19a.  v4:= temp;
  #L2df19c.  if v2 >= v4 then goto L2df1f8;
  #L2df1a0.  call temp:= `charAt`(v8, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2df1a6.  v6:= temp;
  #L2df1a8.  if v6 >= v5 then goto L2df1b8;
  #L2df1ac.  v6:= v6 - 127;
  #L2df1b0.  v6:= v6 ^>> 31;
  #L2df1b4.  v1:= v1 + v6 @kind int;
  #L2df1b6.  goto L2df1f2;
  #L2df1b8.  v1:= v1 + 2;
  #L2df1bc.  v7:= 55296I;
  #L2df1c2.  if v6 < v7 then goto L2df1f2;
  #L2df1c6.  v7:= 57343I;
  #L2df1cc.  if v6 > v7 then goto L2df1f2;
  #L2df1d0.  call temp:= `codePointAt`(v8, v2) @signature `Ljava/lang/Character;.codePointAt:(Ljava/lang/CharSequence;I)I` @kind static;
  #L2df1d6.  v6:= temp;
  #L2df1d8.  v7:= 65536I;
  #L2df1dc.  if v6 < v7 then goto L2df1e6;
  #L2df1e0.  v2:= v2 + 1;
  #L2df1e4.  goto L2df1f2;
  #L2df1e6.  v8:= new `e.e.a.b.f.q.q2`;
  #L2df1ea.  call `<init>`(v8, v2, v4) @signature `Le/e/a/b/f/q/q2;.<init>:(II)V` @kind direct;
  #L2df1f0.  throw v8;
  #L2df1f2.  v2:= v2 + 1;
  #L2df1f6.  goto L2df19c;
  #L2df1f8.  v3:= v3 + v1 @kind int;
  #L2df1fa.  if v3 < v0 then goto L2df200;
  #L2df1fe.  return v3;
  #L2df200.  v8:= new `java.lang.IllegalArgumentException`;
  #L2df204.  v0:= new `java.lang.StringBuilder`;
  #L2df208.  v1:= 54I;
  #L2df20c.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2df212.  v1:= "UTF-8 length does not fit in int: " @kind object;
  #L2df216.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2df21c.  v1:= (`long`) v3 @kind i2l;
  #L2df21e.  v3:= 4294967296L;
  #L2df228.  v1:= v1 + v3 @kind long;
  #L2df22a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2df230.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2df236.  v0:= temp @kind object;
  #L2df238.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2df23e.  throw v8;
}
procedure `int` `a`(`java.lang.CharSequence` v1 @kind object, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/q/s2;.a:(Ljava/lang/CharSequence;[BII)I` @AccessFlag STATIC {
    temp;
    v0;

  #L2df250.  v0:= `@@e.e.a.b.f.q.s2.a` @type ^`e.e.a.b.f.q.o2` @kind object;
  #L2df254.  call temp:= `a`(v0, v1, v2, v3, v4) @signature `Le/e/a/b/f/q/o2;.a:(Ljava/lang/CharSequence;[BII)I` @kind virtual;
  #L2df25a.  v1:= temp;
  #L2df25c.  return v1;
}
procedure `boolean` `a`(`byte`[] v3 @kind object) @signature `Le/e/a/b/f/q/s2;.a:([B)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2df104.  v0:= `@@e.e.a.b.f.q.s2.a` @type ^`e.e.a.b.f.q.o2` @kind object;
  #L2df108.  v1:= length @variable v3;
  #L2df10a.  v2:= 0I;
  #L2df10c.  call temp:= `a`(v0, v3, v2, v1) @signature `Le/e/a/b/f/q/o2;.a:([BII)Z` @kind virtual;
  #L2df112.  v3:= temp;
  #L2df114.  return v3;
}
procedure `boolean` `a`(`byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/q/s2;.a:([BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2df128.  v2:= `@@e.e.a.b.f.q.s2.a` @type ^`e.e.a.b.f.q.o2` @kind object;
  #L2df12c.  v0:= 0I;
  #L2df12e.  call temp:= `a`(v2, v1, v0, v3) @signature `Le/e/a/b/f/q/o2;.a:([BII)Z` @kind virtual;
  #L2df134.  v1:= temp;
  #L2df136.  return v1;
}
procedure `int` `b`(`int` v1 ) @signature `Le/e/a/b/f/q/s2;.b:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2df328.  v0:= -12I;
  #L2df32c.  if v1 <= v0 then goto L2df332;
  #L2df330.  v1:= -1I;
  #L2df332.  return v1;
}
procedure `int` `b`(`int` v1 , `int` v2 ) @signature `Le/e/a/b/f/q/s2;.b:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2df344.  v0:= -12I;
  #L2df348.  if v1 > v0 then goto L2df35e;
  #L2df34c.  v0:= -65I;
  #L2df350.  if v2 <= v0 then goto L2df356;
  #L2df354.  goto L2df35e;
  #L2df356.  v2:= v2 ^< 8;
  #L2df35a.  v1:= v1 ^~ v2 @kind int;
  #L2df35c.  return v1;
  #L2df35e.  v1:= -1I;
  #L2df360.  return v1;
}
procedure `int` `b`(`int` v1 , `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/q/s2;.b:(III)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2df374.  v0:= -12I;
  #L2df378.  if v1 > v0 then goto L2df398;
  #L2df37c.  v0:= -65I;
  #L2df380.  if v2 > v0 then goto L2df398;
  #L2df384.  if v3 <= v0 then goto L2df38a;
  #L2df388.  goto L2df398;
  #L2df38a.  v2:= v2 ^< 8;
  #L2df38e.  v1:= v1 ^~ v2 @kind int;
  #L2df390.  v2:= v3 ^< 16;
  #L2df394.  v1:= v1 ^~ v2 @kind int;
  #L2df396.  return v1;
  #L2df398.  v1:= -1I;
  #L2df39a.  return v1;
}
procedure `int` `b`(`byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Le/e/a/b/f/q/s2;.b:([BII)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L2df2a8.  v0:= v4 + -1;
  #L2df2ac.  v0:= v3[v0] @kind byte;
  #L2df2b0.  v5:= v5 - v4 @kind int;
  #L2df2b2.  if v5 == 0 then goto L2df2f0;
  #L2df2b6.  v1:= 1I;
  #L2df2b8.  if v5 == v1 then goto L2df2e2;
  #L2df2bc.  v2:= 2I;
  #L2df2be.  if v5 != v2 then goto L2df2d6;
  #L2df2c2.  v5:= v3[v4] @kind byte;
  #L2df2c6.  v4:= v4 + v1 @kind int;
  #L2df2c8.  v3:= v3[v4] @kind byte;
  #L2df2cc.  call temp:= `b`(v0, v5, v3) @signature `Le/e/a/b/f/q/s2;.b:(III)I` @kind static;
  #L2df2d2.  v3:= temp;
  #L2df2d4.  goto L2df2f8;
  #L2df2d6.  v3:= new `java.lang.AssertionError`;
  #L2df2da.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2df2e0.  throw v3;
  #L2df2e2.  v3:= v3[v4] @kind byte;
  #L2df2e6.  call temp:= `b`(v0, v3) @signature `Le/e/a/b/f/q/s2;.b:(II)I` @kind static;
  #L2df2ec.  v3:= temp;
  #L2df2ee.  goto L2df2f8;
  #L2df2f0.  call temp:= `b`(v0) @signature `Le/e/a/b/f/q/s2;.b:(I)I` @kind static;
  #L2df2f6.  v3:= temp;
  #L2df2f8.  return v3;
}
