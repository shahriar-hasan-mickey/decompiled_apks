record `e.e.a.b.f.b.m3` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `int` `e.e.a.b.f.b.m3.b` @AccessFlag PRIVATE;
  `boolean` `e.e.a.b.f.b.m3.c` @AccessFlag PRIVATE;
  `java.util.Iterator` `e.e.a.b.f.b.m3.d` @AccessFlag PRIVATE;
  `e.e.a.b.f.b.e3` `e.e.a.b.f.b.m3.e` @AccessFlag PRIVATE_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.b.m3` v0 @kind this, `e.e.a.b.f.b.e3` v1 @kind object) @signature `Le/e/a/b/f/b/m3;.<init>:(Le/e/a/b/f/b/e3;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L20dc04.  v0.`e.e.a.b.f.b.m3.e` @type ^`e.e.a.b.f.b.e3` := v1 @kind object;
  #L20dc08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L20dc0e.  v1:= -1I;
  #L20dc10.  v0.`e.e.a.b.f.b.m3.b` @type ^`int` := v1;
  #L20dc14.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.b.m3` v0 @kind this, `e.e.a.b.f.b.e3` v1 @kind object, `e.e.a.b.f.b.f3` v2 @kind object) @signature `Le/e/a/b/f/b/m3;.<init>:(Le/e/a/b/f/b/e3;Le/e/a/b/f/b/f3;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L20dc28.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/b/m3;.<init>:(Le/e/a/b/f/b/e3;)V` @kind direct;
  #L20dc2e.  return @kind void;
}
procedure `java.util.Iterator` `a`(`e.e.a.b.f.b.m3` v1 @kind this) @signature `Le/e/a/b/f/b/m3;.a:()Ljava/util/Iterator;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L20dbc4.  v0:= v1.`e.e.a.b.f.b.m3.d` @type ^`java.util.Iterator` @kind object;
  #L20dbc8.  if v0 != 0 then goto L20dbec;
  #L20dbcc.  v0:= v1.`e.e.a.b.f.b.m3.e` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20dbd0.  call temp:= `c`(v0) @signature `Le/e/a/b/f/b/e3;.c:(Le/e/a/b/f/b/e3;)Ljava/util/Map;` @kind static;
  #L20dbd6.  v0:= temp @kind object;
  #L20dbd8.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L20dbde.  v0:= temp @kind object;
  #L20dbe0.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L20dbe6.  v0:= temp @kind object;
  #L20dbe8.  v1.`e.e.a.b.f.b.m3.d` @type ^`java.util.Iterator` := v0 @kind object;
  #L20dbec.  v0:= v1.`e.e.a.b.f.b.m3.d` @type ^`java.util.Iterator` @kind object;
  #L20dbf0.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`e.e.a.b.f.b.m3` v3 @kind this) @signature `Le/e/a/b/f/b/m3;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L20daf8.  v0:= v3.`e.e.a.b.f.b.m3.b` @type ^`int`;
  #L20dafc.  v1:= 1I;
  #L20dafe.  v0:= v0 + v1 @kind int;
  #L20db00.  v2:= v3.`e.e.a.b.f.b.m3.e` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20db04.  call temp:= `b`(v2) @signature `Le/e/a/b/f/b/e3;.b:(Le/e/a/b/f/b/e3;)Ljava/util/List;` @kind static;
  #L20db0a.  v2:= temp @kind object;
  #L20db0c.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L20db12.  v2:= temp;
  #L20db14.  if v0 < v2 then goto L20db4a;
  #L20db18.  v0:= v3.`e.e.a.b.f.b.m3.e` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20db1c.  call temp:= `c`(v0) @signature `Le/e/a/b/f/b/e3;.c:(Le/e/a/b/f/b/e3;)Ljava/util/Map;` @kind static;
  #L20db22.  v0:= temp @kind object;
  #L20db24.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L20db2a.  v0:= temp;
  #L20db2c.  if v0 != 0 then goto L20db46;
  #L20db30.  call temp:= `a`(v3) @signature `Le/e/a/b/f/b/m3;.a:()Ljava/util/Iterator;` @kind direct;
  #L20db36.  v0:= temp @kind object;
  #L20db38.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L20db3e.  v0:= temp;
  #L20db40.  if v0 == 0 then goto L20db46;
  #L20db44.  goto L20db4a;
  #L20db46.  v0:= 0I;
  #L20db48.  return v0;
  #L20db4a.  return v1;
}
procedure `java.lang.Object` `next`(`e.e.a.b.f.b.m3` v2 @kind this) @signature `Le/e/a/b/f/b/m3;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L20db5c.  v0:= 1I;
  #L20db5e.  v2.`e.e.a.b.f.b.m3.c` @type ^`boolean` := v0 @kind boolean;
  #L20db62.  v1:= v2.`e.e.a.b.f.b.m3.b` @type ^`int`;
  #L20db66.  v1:= v1 + v0 @kind int;
  #L20db68.  v2.`e.e.a.b.f.b.m3.b` @type ^`int` := v1;
  #L20db6c.  v0:= v2.`e.e.a.b.f.b.m3.e` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20db70.  call temp:= `b`(v0) @signature `Le/e/a/b/f/b/e3;.b:(Le/e/a/b/f/b/e3;)Ljava/util/List;` @kind static;
  #L20db76.  v0:= temp @kind object;
  #L20db78.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L20db7e.  v0:= temp;
  #L20db80.  if v1 >= v0 then goto L20dba2;
  #L20db84.  v0:= v2.`e.e.a.b.f.b.m3.e` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20db88.  call temp:= `b`(v0) @signature `Le/e/a/b/f/b/e3;.b:(Le/e/a/b/f/b/e3;)Ljava/util/List;` @kind static;
  #L20db8e.  v0:= temp @kind object;
  #L20db90.  v1:= v2.`e.e.a.b.f.b.m3.b` @type ^`int`;
  #L20db94.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L20db9a.  v0:= temp @kind object;
  #L20db9c.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L20dba0.  return v0 @kind object;
  #L20dba2.  call temp:= `a`(v2) @signature `Le/e/a/b/f/b/m3;.a:()Ljava/util/Iterator;` @kind direct;
  #L20dba8.  v0:= temp @kind object;
  #L20dbaa.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L20dbb0.  v0:= temp @kind object;
  #L20dbb2.  goto L20db9c;
}
procedure `void` `remove`(`e.e.a.b.f.b.m3` v3 @kind this) @signature `Le/e/a/b/f/b/m3;.remove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L20dc40.  v0:= v3.`e.e.a.b.f.b.m3.c` @type ^`boolean` @kind boolean;
  #L20dc44.  if v0 == 0 then goto L20dc9c;
  #L20dc48.  v0:= 0I;
  #L20dc4a.  v3.`e.e.a.b.f.b.m3.c` @type ^`boolean` := v0 @kind boolean;
  #L20dc4e.  v0:= v3.`e.e.a.b.f.b.m3.e` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20dc52.  call `a`(v0) @signature `Le/e/a/b/f/b/e3;.a:(Le/e/a/b/f/b/e3;)V` @kind static;
  #L20dc58.  v0:= v3.`e.e.a.b.f.b.m3.b` @type ^`int`;
  #L20dc5c.  v1:= v3.`e.e.a.b.f.b.m3.e` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20dc60.  call temp:= `b`(v1) @signature `Le/e/a/b/f/b/e3;.b:(Le/e/a/b/f/b/e3;)Ljava/util/List;` @kind static;
  #L20dc66.  v1:= temp @kind object;
  #L20dc68.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L20dc6e.  v1:= temp;
  #L20dc70.  if v0 >= v1 then goto L20dc8c;
  #L20dc74.  v0:= v3.`e.e.a.b.f.b.m3.e` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20dc78.  v1:= v3.`e.e.a.b.f.b.m3.b` @type ^`int`;
  #L20dc7c.  v2:= v1 + -1;
  #L20dc80.  v3.`e.e.a.b.f.b.m3.b` @type ^`int` := v2;
  #L20dc84.  call temp:= `a`(v0, v1) @signature `Le/e/a/b/f/b/e3;.a:(Le/e/a/b/f/b/e3;I)Ljava/lang/Object;` @kind static;
  #L20dc8a.  return @kind void;
  #L20dc8c.  call temp:= `a`(v3) @signature `Le/e/a/b/f/b/m3;.a:()Ljava/util/Iterator;` @kind direct;
  #L20dc92.  v0:= temp @kind object;
  #L20dc94.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L20dc9a.  return @kind void;
  #L20dc9c.  v0:= new `java.lang.IllegalStateException`;
  #L20dca0.  v1:= "remove() was called before next()" @kind object;
  #L20dca4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20dcaa.  throw v0;
}
