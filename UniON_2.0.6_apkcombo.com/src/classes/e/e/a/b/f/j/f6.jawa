record `e.e.a.b.f.j.f6` @kind class @AccessFlag  extends `java.util.AbstractSet` @kind class {
  `e.e.a.b.f.j.t5` `e.e.a.b.f.j.f6.b` @AccessFlag PRIVATE_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.j.f6` v0 @kind this, `e.e.a.b.f.j.t5` v1 @kind object) @signature `Le/e/a/b/f/j/f6;.<init>:(Le/e/a/b/f/j/t5;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L230c8c.  v0.`e.e.a.b.f.j.f6.b` @type ^`e.e.a.b.f.j.t5` := v1 @kind object;
  #L230c90.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L230c96.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.j.f6` v0 @kind this, `e.e.a.b.f.j.t5` v1 @kind object, `e.e.a.b.f.j.w5` v2 @kind object) @signature `Le/e/a/b/f/j/f6;.<init>:(Le/e/a/b/f/j/t5;Le/e/a/b/f/j/w5;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L230ca8.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/j/f6;.<init>:(Le/e/a/b/f/j/t5;)V` @kind direct;
  #L230cae.  return @kind void;
}
procedure `boolean` `add`(`e.e.a.b.f.j.f6` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/j/f6;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L230b44.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L230b48.  call temp:= `contains`(v2, v3) @signature `Le/e/a/b/f/j/f6;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L230b4e.  v0:= temp;
  #L230b50.  if v0 != 0 then goto L230b76;
  #L230b54.  v0:= v2.`e.e.a.b.f.j.f6.b` @type ^`e.e.a.b.f.j.t5` @kind object;
  #L230b58.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L230b5e.  v1:= temp @kind object;
  #L230b60.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L230b64.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L230b6a.  v3:= temp @kind object;
  #L230b6c.  call temp:= `a`(v0, v1, v3) @signature `Le/e/a/b/f/j/t5;.a:(Ljava/lang/Comparable;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L230b72.  v3:= 1I;
  #L230b74.  return v3;
  #L230b76.  v3:= 0I;
  #L230b78.  return v3;
}
procedure `void` `clear`(`e.e.a.b.f.j.f6` v1 @kind this) @signature `Le/e/a/b/f/j/f6;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230cc0.  v0:= v1.`e.e.a.b.f.j.f6.b` @type ^`e.e.a.b.f.j.t5` @kind object;
  #L230cc4.  call `clear`(v0) @signature `Le/e/a/b/f/j/t5;.clear:()V` @kind virtual;
  #L230cca.  return @kind void;
}
procedure `boolean` `contains`(`e.e.a.b.f.j.f6` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/j/f6;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L230b8c.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L230b90.  v0:= v2.`e.e.a.b.f.j.f6.b` @type ^`e.e.a.b.f.j.t5` @kind object;
  #L230b94.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L230b9a.  v1:= temp @kind object;
  #L230b9c.  call temp:= `get`(v0, v1) @signature `Le/e/a/b/f/j/t5;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L230ba2.  v0:= temp @kind object;
  #L230ba4.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L230baa.  v3:= temp @kind object;
  #L230bac.  if v0 == v3 then goto L230bc6;
  #L230bb0.  if v0 == 0 then goto L230bc2;
  #L230bb4.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L230bba.  v3:= temp;
  #L230bbc.  if v3 == 0 then goto L230bc2;
  #L230bc0.  goto L230bc6;
  #L230bc2.  v3:= 0I;
  #L230bc4.  return v3;
  #L230bc6.  v3:= 1I;
  #L230bc8.  return v3;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.j.f6` v3 @kind this) @signature `Le/e/a/b/f/j/f6;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L230c38.  v0:= new `e.e.a.b.f.j.b6`;
  #L230c3c.  v1:= v3.`e.e.a.b.f.j.f6.b` @type ^`e.e.a.b.f.j.t5` @kind object;
  #L230c40.  v2:= 0I;
  #L230c42.  call `<init>`(v0, v1, v2) @signature `Le/e/a/b/f/j/b6;.<init>:(Le/e/a/b/f/j/t5;Le/e/a/b/f/j/w5;)V` @kind direct;
  #L230c48.  return v0 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.j.f6` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/j/f6;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230bdc.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L230be0.  call temp:= `contains`(v1, v2) @signature `Le/e/a/b/f/j/f6;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L230be6.  v0:= temp;
  #L230be8.  if v0 == 0 then goto L230c02;
  #L230bec.  v0:= v1.`e.e.a.b.f.j.f6.b` @type ^`e.e.a.b.f.j.t5` @kind object;
  #L230bf0.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L230bf6.  v2:= temp @kind object;
  #L230bf8.  call temp:= `remove`(v0, v2) @signature `Le/e/a/b/f/j/t5;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L230bfe.  v2:= 1I;
  #L230c00.  return v2;
  #L230c02.  v2:= 0I;
  #L230c04.  return v2;
}
procedure `int` `size`(`e.e.a.b.f.j.f6` v1 @kind this) @signature `Le/e/a/b/f/j/f6;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230c18.  v0:= v1.`e.e.a.b.f.j.f6.b` @type ^`e.e.a.b.f.j.t5` @kind object;
  #L230c1c.  call temp:= `size`(v0) @signature `Le/e/a/b/f/j/t5;.size:()I` @kind virtual;
  #L230c22.  v0:= temp;
  #L230c24.  return v0;
}
