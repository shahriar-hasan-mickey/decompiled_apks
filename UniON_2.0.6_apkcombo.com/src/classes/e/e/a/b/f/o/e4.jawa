record `e.e.a.b.f.o.e4` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v5 , `int` v6 , `java.lang.String` v7 @kind object) @signature `Le/e/a/b/f/o/e4;.a:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2c79a0.  if v5 < 0 then goto L2c79ac;
  #L2c79a4.  if v5 < v6 then goto L2c79aa;
  #L2c79a8.  goto L2c79ac;
  #L2c79aa.  return v5;
  #L2c79ac.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L2c79b0.  v0:= "index" @kind object;
  #L2c79b4.  v1:= 1I;
  #L2c79b6.  v2:= 0I;
  #L2c79b8.  v3:= 2I;
  #L2c79ba.  if v5 < 0 then goto L2c7a24;
  #L2c79be.  if v6 >= 0 then goto L2c79f4;
  #L2c79c2.  v5:= new `java.lang.IllegalArgumentException`;
  #L2c79c6.  v7:= new `java.lang.StringBuilder`;
  #L2c79ca.  v0:= 26I;
  #L2c79ce.  call `<init>`(v7, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2c79d4.  v0:= "negative size: " @kind object;
  #L2c79d8.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c79de.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c79e4.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c79ea.  v6:= temp @kind object;
  #L2c79ec.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c79f2.  throw v5;
  #L2c79f4.  v4:= 3I;
  #L2c79f6.  v4:= new `java.lang.Object`[v4];
  #L2c79fa.  v4[v2]:= v0 @kind object;
  #L2c79fe.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2c7a04.  v5:= temp @kind object;
  #L2c7a06.  v4[v1]:= v5 @kind object;
  #L2c7a0a.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2c7a10.  v5:= temp @kind object;
  #L2c7a12.  v4[v3]:= v5 @kind object;
  #L2c7a16.  v5:= "%s (%s) must be less than size (%s)" @kind object;
  #L2c7a1a.  call temp:= `a`(v5, v4) @signature `Le/e/a/b/f/o/f5;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2c7a20.  v5:= temp @kind object;
  #L2c7a22.  goto L2c7a44;
  #L2c7a24.  v6:= new `java.lang.Object`[v3];
  #L2c7a28.  v6[v2]:= v0 @kind object;
  #L2c7a2c.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2c7a32.  v5:= temp @kind object;
  #L2c7a34.  v6[v1]:= v5 @kind object;
  #L2c7a38.  v5:= "%s (%s) must not be negative" @kind object;
  #L2c7a3c.  call temp:= `a`(v5, v6) @signature `Le/e/a/b/f/o/f5;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2c7a42.  v5:= temp @kind object;
  #L2c7a44.  call `<init>`(v7, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c7a4a.  throw v7;
}
procedure `void` `a`(`int` v2 , `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/o/e4;.a:(III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2c8ae8.  if v2 < 0 then goto L2c8af8;
  #L2c8aec.  if v3 < v2 then goto L2c8af8;
  #L2c8af0.  if v3 <= v4 then goto L2c8af6;
  #L2c8af4.  goto L2c8af8;
  #L2c8af6.  return @kind void;
  #L2c8af8.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L2c8afc.  if v2 < 0 then goto L2c8b4c;
  #L2c8b00.  if v2 > v4 then goto L2c8b4c;
  #L2c8b04.  if v3 < 0 then goto L2c8b3e;
  #L2c8b08.  if v3 <= v4 then goto L2c8b0e;
  #L2c8b0c.  goto L2c8b3e;
  #L2c8b0e.  v4:= 2I;
  #L2c8b10.  v4:= new `java.lang.Object`[v4];
  #L2c8b14.  v1:= 0I;
  #L2c8b16.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2c8b1c.  v3:= temp @kind object;
  #L2c8b1e.  v4[v1]:= v3 @kind object;
  #L2c8b22.  v3:= 1I;
  #L2c8b24.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2c8b2a.  v2:= temp @kind object;
  #L2c8b2c.  v4[v3]:= v2 @kind object;
  #L2c8b30.  v2:= "end index (%s) must not be less than start index (%s)" @kind object;
  #L2c8b34.  call temp:= `a`(v2, v4) @signature `Le/e/a/b/f/o/f5;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2c8b3a.  v2:= temp @kind object;
  #L2c8b3c.  goto L2c8b58;
  #L2c8b3e.  v2:= "end index" @kind object;
  #L2c8b42.  call temp:= `c`(v3, v4, v2) @signature `Le/e/a/b/f/o/e4;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L2c8b48.  v2:= temp @kind object;
  #L2c8b4a.  goto L2c8b58;
  #L2c8b4c.  v3:= "start index" @kind object;
  #L2c8b50.  call temp:= `c`(v2, v4, v3) @signature `Le/e/a/b/f/o/e4;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L2c8b56.  v2:= temp @kind object;
  #L2c8b58.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c8b5e.  throw v0;
}
procedure `void` `a`(`boolean` v0 , `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/o/e4;.a:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2c8ac0.  if v0 == 0 then goto L2c8ac6;
  #L2c8ac4.  return @kind void;
  #L2c8ac6.  v0:= new `java.lang.IllegalStateException`;
  #L2c8aca.  v1:= (`java.lang.String`) v1 @kind object;
  #L2c8ace.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c8ad4.  throw v0;
}
procedure `int` `b`(`int` v1 , `int` v2 , `java.lang.String` v3 @kind object) @signature `Le/e/a/b/f/o/e4;.b:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2c7a5c.  if v1 < 0 then goto L2c7a66;
  #L2c7a60.  if v1 > v2 then goto L2c7a66;
  #L2c7a64.  return v1;
  #L2c7a66.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L2c7a6a.  v0:= "index" @kind object;
  #L2c7a6e.  call temp:= `c`(v1, v2, v0) @signature `Le/e/a/b/f/o/e4;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L2c7a74.  v1:= temp @kind object;
  #L2c7a76.  call `<init>`(v3, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c7a7c.  throw v3;
}
procedure `java.lang.String` `c`(`int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Le/e/a/b/f/o/e4;.c:(IILjava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c7cac.  v0:= 1I;
  #L2c7cae.  v1:= 0I;
  #L2c7cb0.  v2:= 2I;
  #L2c7cb2.  if v4 >= 0 then goto L2c7cd8;
  #L2c7cb6.  v5:= new `java.lang.Object`[v2];
  #L2c7cba.  v5[v1]:= v6 @kind object;
  #L2c7cbe.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2c7cc4.  v4:= temp @kind object;
  #L2c7cc6.  v5[v0]:= v4 @kind object;
  #L2c7cca.  v4:= "%s (%s) must not be negative" @kind object;
  #L2c7cce.  call temp:= `a`(v4, v5) @signature `Le/e/a/b/f/o/f5;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2c7cd4.  v4:= temp @kind object;
  #L2c7cd6.  return v4 @kind object;
  #L2c7cd8.  if v5 < 0 then goto L2c7d0c;
  #L2c7cdc.  v3:= 3I;
  #L2c7cde.  v3:= new `java.lang.Object`[v3];
  #L2c7ce2.  v3[v1]:= v6 @kind object;
  #L2c7ce6.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2c7cec.  v4:= temp @kind object;
  #L2c7cee.  v3[v0]:= v4 @kind object;
  #L2c7cf2.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2c7cf8.  v4:= temp @kind object;
  #L2c7cfa.  v3[v2]:= v4 @kind object;
  #L2c7cfe.  v4:= "%s (%s) must not be greater than size (%s)" @kind object;
  #L2c7d02.  call temp:= `a`(v4, v3) @signature `Le/e/a/b/f/o/f5;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2c7d08.  v4:= temp @kind object;
  #L2c7d0a.  return v4 @kind object;
  #L2c7d0c.  v4:= new `java.lang.IllegalArgumentException`;
  #L2c7d10.  v6:= new `java.lang.StringBuilder`;
  #L2c7d14.  v0:= 26I;
  #L2c7d18.  call `<init>`(v6, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2c7d1e.  v0:= "negative size: " @kind object;
  #L2c7d22.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c7d28.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c7d2e.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c7d34.  v5:= temp @kind object;
  #L2c7d36.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c7d3c.  throw v4;
}
