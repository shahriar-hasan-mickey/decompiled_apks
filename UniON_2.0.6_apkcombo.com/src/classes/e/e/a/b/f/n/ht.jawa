record `e.e.a.b.f.n.ht` @kind class @AccessFlag ABSTRACT extends `java.util.Iterator` @kind interface {
  `java.lang.Object` `e.e.a.b.f.n.ht.b` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.n.ht.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.f.n.ht` v1 @kind this) @signature `Le/e/a/b/f/n/ht;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L2aa9b0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2aa9b6.  v0:= 2I;
  #L2aa9b8.  v1.`e.e.a.b.f.n.ht.c` @type ^`int` := v0;
  #L2aa9bc.  return @kind void;
}
procedure `java.lang.Object` `a`(`e.e.a.b.f.n.ht` v1 @kind this) @signature `Le/e/a/b/f/n/ht;.a:()Ljava/lang/Object;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L2aa994.  v0:= 3I;
  #L2aa996.  v1.`e.e.a.b.f.n.ht.c` @type ^`int` := v0;
  #L2aa99a.  v0:= 0I;
  #L2aa99c.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`e.e.a.b.f.n.ht` v5 @kind this) @signature `Le/e/a/b/f/n/ht;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2aa8f4.  v0:= v5.`e.e.a.b.f.n.ht.c` @type ^`int`;
  #L2aa8f8.  v1:= 4I;
  #L2aa8fa.  if v0 == v1 then goto L2aa93c;
  #L2aa8fe.  v2:= v0 + -1;
  #L2aa902.  if v0 == 0 then goto L2aa938;
  #L2aa906.  v0:= 1I;
  #L2aa908.  if v2 == 0 then goto L2aa936;
  #L2aa90c.  v3:= 2I;
  #L2aa90e.  v4:= 0I;
  #L2aa910.  if v2 == v3 then goto L2aa934;
  #L2aa914.  v5.`e.e.a.b.f.n.ht.c` @type ^`int` := v1;
  #L2aa918.  call temp:= `zza`(v5) @signature `Le/e/a/b/f/n/ht;.zza:()Ljava/lang/Object;` @kind virtual;
  #L2aa91e.  v1:= temp @kind object;
  #L2aa920.  v5.`e.e.a.b.f.n.ht.b` @type ^`java.lang.Object` := v1 @kind object;
  #L2aa924.  v1:= v5.`e.e.a.b.f.n.ht.c` @type ^`int`;
  #L2aa928.  v2:= 3I;
  #L2aa92a.  if v1 == v2 then goto L2aa934;
  #L2aa92e.  v5.`e.e.a.b.f.n.ht.c` @type ^`int` := v0;
  #L2aa932.  return v0;
  #L2aa934.  return v4;
  #L2aa936.  return v0;
  #L2aa938.  v0:= 0I;
  #L2aa93a.  throw v0;
  #L2aa93c.  v0:= new `java.lang.IllegalStateException`;
  #L2aa940.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L2aa946.  throw v0;
}
procedure `java.lang.Object` `next`(`e.e.a.b.f.n.ht` v2 @kind this) @signature `Le/e/a/b/f/n/ht;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2aa958.  call temp:= `hasNext`(v2) @signature `Le/e/a/b/f/n/ht;.hasNext:()Z` @kind virtual;
  #L2aa95e.  v0:= temp;
  #L2aa960.  if v0 == 0 then goto L2aa976;
  #L2aa964.  v0:= 2I;
  #L2aa966.  v2.`e.e.a.b.f.n.ht.c` @type ^`int` := v0;
  #L2aa96a.  v0:= v2.`e.e.a.b.f.n.ht.b` @type ^`java.lang.Object` @kind object;
  #L2aa96e.  v1:= 0I;
  #L2aa970.  v2.`e.e.a.b.f.n.ht.b` @type ^`java.lang.Object` := v1 @kind object;
  #L2aa974.  return v0 @kind object;
  #L2aa976.  v0:= new `java.util.NoSuchElementException`;
  #L2aa97a.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2aa980.  throw v0;
}
procedure `void` `remove`(`e.e.a.b.f.n.ht` v1 @kind this) @signature `Le/e/a/b/f/n/ht;.remove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2aa9d0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2aa9d4.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2aa9da.  throw v0;
}
procedure `java.lang.Object` `zza`() @signature `Le/e/a/b/f/n/ht;.zza:()Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
