record `e.e.a.b.f.r.o0` @kind class @AccessFlag PUBLIC_ABSTRACT extends `e.e.a.b.f.r.i0` @kind class, `java.util.Set` @kind interface {
  `e.e.a.b.f.r.n0` `e.e.a.b.f.r.o0.c` @AccessFlag PRIVATE_TRANSIENT;
}
procedure `void` `<init>`(`e.e.a.b.f.r.o0` v0 @kind this) @signature `Le/e/a/b/f/r/o0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L30e240.  call `<init>`(v0) @signature `Le/e/a/b/f/r/i0;.<init>:()V` @kind direct;
  #L30e246.  return @kind void;
}
procedure `e.e.a.b.f.r.o0` `a`(`int` v13 , `java.lang.Object`[] v14 @kind object) @signature `Le/e/a/b/f/r/o0;.a:(I[Ljava/lang/Object;)Le/e/a/b/f/r/o0;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L30e080.  if v13 == 0 then goto L30e15a;
  #L30e084.  v0:= 0I;
  #L30e086.  v1:= 1I;
  #L30e088.  if v13 == v1 then goto L30e14a;
  #L30e08c.  call temp:= `d`(v13) @signature `Le/e/a/b/f/r/o0;.d:(I)I` @kind static;
  #L30e092.  v2:= temp;
  #L30e094.  v6:= new `java.lang.Object`[v2];
  #L30e098.  v7:= v2 + -1;
  #L30e09c.  v3:= 0I;
  #L30e09e.  v5:= 0I;
  #L30e0a0.  v8:= 0I;
  #L30e0a2.  if v3 >= v13 then goto L30e0f6;
  #L30e0a6.  v4:= v14[v3] @kind object;
  #L30e0aa.  call temp:= `a`(v4, v3) @signature `Le/e/a/b/f/r/g1;.a:(Ljava/lang/Object;I)Ljava/lang/Object;` @kind static;
  #L30e0b0.  call temp:= `hashCode`(v4) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L30e0b6.  v9:= temp;
  #L30e0b8.  call temp:= `a`(v9) @signature `Le/e/a/b/f/r/f0;.a:(I)I` @kind static;
  #L30e0be.  v10:= temp;
  #L30e0c0.  v11:= v10 ^& v7 @kind int;
  #L30e0c4.  v12:= v6[v11] @kind object;
  #L30e0c8.  if v12 != 0 then goto L30e0de;
  #L30e0cc.  v10:= v8 + 1;
  #L30e0d0.  v14[v8]:= v4 @kind object;
  #L30e0d4.  v6[v11]:= v4 @kind object;
  #L30e0d8.  v5:= v5 + v9 @kind int;
  #L30e0da.  v8:= v10;
  #L30e0dc.  goto L30e0ea;
  #L30e0de.  call temp:= `equals`(v12, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30e0e4.  v11:= temp;
  #L30e0e6.  if v11 == 0 then goto L30e0f0;
  #L30e0ea.  v3:= v3 + 1;
  #L30e0ee.  goto L30e0a2;
  #L30e0f0.  v10:= v10 + 1;
  #L30e0f4.  goto L30e0c0;
  #L30e0f6.  v3:= 0I;
  #L30e0f8.  call `fill`(v14, v8, v13, v3) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L30e0fe.  if v8 != v1 then goto L30e112;
  #L30e102.  v13:= v14[v0] @kind object;
  #L30e106.  v14:= new `e.e.a.b.f.r.l1`;
  #L30e10a.  call `<init>`(v14, v13, v5) @signature `Le/e/a/b/f/r/l1;.<init>:(Ljava/lang/Object;I)V` @kind direct;
  #L30e110.  return v14 @kind object;
  #L30e112.  call temp:= `d`(v8) @signature `Le/e/a/b/f/r/o0;.d:(I)I` @kind static;
  #L30e118.  v13:= temp;
  #L30e11a.  v2:= v2 / 2;
  #L30e11e.  if v13 < v2 then goto L30e140;
  #L30e122.  v13:= 6I;
  #L30e124.  if v8 >= v13 then goto L30e130;
  #L30e128.  call temp:= `copyOf`(v14, v8) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L30e12e.  v14:= temp @kind object;
  #L30e130.  v4:= v14 @kind object;
  #L30e132.  v13:= new `e.e.a.b.f.r.i1`;
  #L30e136.  v3:= v13 @kind object;
  #L30e138.  call `<init>`(v3, v4, v5, v6, v7, v8) @signature `Le/e/a/b/f/r/i1;.<init>:([Ljava/lang/Object;I[Ljava/lang/Object;II)V` @kind direct;
  #L30e13e.  return v13 @kind object;
  #L30e140.  call temp:= `a`(v8, v14) @signature `Le/e/a/b/f/r/o0;.a:(I[Ljava/lang/Object;)Le/e/a/b/f/r/o0;` @kind static;
  #L30e146.  v13:= temp @kind object;
  #L30e148.  return v13 @kind object;
  #L30e14a.  v13:= v14[v0] @kind object;
  #L30e14e.  v14:= new `e.e.a.b.f.r.l1`;
  #L30e152.  call `<init>`(v14, v13) @signature `Le/e/a/b/f/r/l1;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L30e158.  return v14 @kind object;
  #L30e15a.  v13:= `@@e.e.a.b.f.r.i1.i` @type ^`e.e.a.b.f.r.i1` @kind object;
  #L30e15e.  return v13 @kind object;
}
procedure `e.e.a.b.f.r.o0` `a`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Le/e/a/b/f/r/o0;.a:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Le/e/a/b/f/r/o0;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L30e018.  v0:= 8I;
  #L30e01c.  v1:= new `java.lang.Object`[v0];
  #L30e020.  v2:= 0I;
  #L30e022.  v3:= "common" @kind object;
  #L30e026.  v1[v2]:= v3 @kind object;
  #L30e02a.  v3:= 1I;
  #L30e02c.  v4:= "vision-common" @kind object;
  #L30e030.  v1[v3]:= v4 @kind object;
  #L30e034.  v3:= 2I;
  #L30e036.  v4:= "play-services-mlkit-barcode-scanning" @kind object;
  #L30e03a.  v1[v3]:= v4 @kind object;
  #L30e03e.  v4:= 3I;
  #L30e040.  v5:= "barcode-scanning" @kind object;
  #L30e044.  v1[v4]:= v5 @kind object;
  #L30e048.  v4:= 4I;
  #L30e04a.  v5:= "play-services-mlkit-face-detection" @kind object;
  #L30e04e.  v1[v4]:= v5 @kind object;
  #L30e052.  v4:= 5I;
  #L30e054.  v5:= "face-detection" @kind object;
  #L30e058.  v1[v4]:= v5 @kind object;
  #L30e05c.  v4:= 6I;
  #L30e05e.  call `arraycopy`(v6, v2, v1, v4, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L30e064.  call temp:= `a`(v0, v1) @signature `Le/e/a/b/f/r/o0;.a:(I[Ljava/lang/Object;)Le/e/a/b/f/r/o0;` @kind static;
  #L30e06a.  v0:= temp @kind object;
  #L30e06c.  return v0 @kind object;
}
procedure `int` `d`(`int` v6 ) @signature `Le/e/a/b/f/r/o0;.d:(I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L30e1b8.  v0:= 2I;
  #L30e1ba.  call temp:= `max`(v6, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L30e1c0.  v6:= temp;
  #L30e1c2.  v0:= 751619276I;
  #L30e1c8.  if v6 >= v0 then goto L30e1f8;
  #L30e1cc.  v0:= v6 + -1;
  #L30e1d0.  call temp:= `highestOneBit`(v0) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L30e1d6.  v0:= temp;
  #L30e1d8.  v0:= v0 + v0 @kind int;
  #L30e1da.  v1:= (`double`) v0 @kind i2d;
  #L30e1dc.  v3:= 0.7D;
  #L30e1e6.  v1:= v1 * v3 @kind double;
  #L30e1ea.  v3:= (`double`) v6 @kind i2d;
  #L30e1ec.  v5:= dcmpg(v1, v3);
  #L30e1f0.  if v5 >= 0 then goto L30e1f6;
  #L30e1f4.  goto L30e1d8;
  #L30e1f6.  return v0;
  #L30e1f8.  v0:= 2.0F;
  #L30e1fc.  if v6 >= v0 then goto L30e202;
  #L30e200.  return v0;
  #L30e202.  v6:= new `java.lang.IllegalArgumentException`;
  #L30e206.  v0:= "collection too large" @kind object;
  #L30e20a.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30e210.  throw v6;
}
procedure `e.e.a.b.f.r.n0` `e`(`e.e.a.b.f.r.o0` v1 @kind this) @signature `Le/e/a/b/f/r/o0;.e:()Le/e/a/b/f/r/n0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30dfdc.  v0:= v1.`e.e.a.b.f.r.o0.c` @type ^`e.e.a.b.f.r.n0` @kind object;
  #L30dfe0.  if v0 != 0 then goto L30dff0;
  #L30dfe4.  call temp:= `f`(v1) @signature `Le/e/a/b/f/r/o0;.f:()Le/e/a/b/f/r/n0;` @kind virtual;
  #L30dfea.  v0:= temp @kind object;
  #L30dfec.  v1.`e.e.a.b.f.r.o0.c` @type ^`e.e.a.b.f.r.n0` := v0 @kind object;
  #L30dff0.  return v0 @kind object;
}
procedure `boolean` `equals`(`e.e.a.b.f.r.o0` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/r/o0;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30df24.  v0:= 1I;
  #L30df26.  if v5 != v4 then goto L30df2c;
  #L30df2a.  return v0;
  #L30df2c.  v1:= instanceof @variable v5 @type ^`e.e.a.b.f.r.o0` @kind boolean;
  #L30df30.  v2:= 0I;
  #L30df32.  if v1 == 0 then goto L30df6c;
  #L30df36.  call temp:= `v`(v4) @signature `Le/e/a/b/f/r/o0;.v:()Z` @kind virtual;
  #L30df3c.  v1:= temp;
  #L30df3e.  if v1 == 0 then goto L30df6c;
  #L30df42.  v1:= v5 @kind object;
  #L30df44.  v1:= (`e.e.a.b.f.r.o0`) v1 @kind object;
  #L30df48.  call temp:= `v`(v1) @signature `Le/e/a/b/f/r/o0;.v:()Z` @kind virtual;
  #L30df4e.  v1:= temp;
  #L30df50.  if v1 == 0 then goto L30df6c;
  #L30df54.  call temp:= `hashCode`(v4) @signature `Le/e/a/b/f/r/o0;.hashCode:()I` @kind virtual;
  #L30df5a.  v1:= temp;
  #L30df5c.  call temp:= `hashCode`(v5) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L30df62.  v3:= temp;
  #L30df64.  if v1 != v3 then goto L30df6a;
  #L30df68.  goto L30df6c;
  #L30df6a.  return v2;
  #L30df6c.  if v5 != v4 then goto L30df74;
  #L30df70.  v2:= 1I;
  #L30df72.  goto L30dfa4;
  #L30df74.  v1:= instanceof @variable v5 @type ^`java.util.Set` @kind boolean;
  #L30df78.  if v1 == 0 then goto L30dfa4;
  #L30df7c.  v5:= (`java.util.Set`) v5 @kind object;
  #L30df80.  call temp:= `size`(v4) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L30df86.  v1:= temp;
  #L30df88.  call temp:= `size`(v5) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L30df8e.  v3:= temp;
  #L30df90.  if v1 != v3 then goto L30dfa4;
  #L30df94.  call temp:= `containsAll`(v4, v5) @signature `Ljava/util/Set;.containsAll:(Ljava/util/Collection;)Z` @kind interface;
  #L30df9a.  v5:= temp;
  #L30df9c.  if v5 != 0 then goto L30dfa2;
  #L30dfa0.  goto L30dfa4;
  #L30dfa2.  return v0;
  #L30dfa4.  return v2;
  catch `java.lang.NullPointerException` @[L30df80..L30df9c] goto L30dfa4;
  catch `java.lang.ClassCastException` @[L30df80..L30df9c] goto L30dfa4;
}
procedure `e.e.a.b.f.r.n0` `f`(`e.e.a.b.f.r.o0` v1 @kind this) @signature `Le/e/a/b/f/r/o0;.f:()Le/e/a/b/f/r/n0;` @AccessFlag  {
    temp;
    v0;

  #L30e004.  v0:= 0I;
  #L30e006.  throw v0;
}
procedure `int` `hashCode`(`e.e.a.b.f.r.o0` v4 @kind this) @signature `Le/e/a/b/f/r/o0;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30e170.  call temp:= `iterator`(v4) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L30e176.  v0:= temp @kind object;
  #L30e178.  v1:= 0I;
  #L30e17a.  v2:= 0I;
  #L30e17c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L30e182.  v3:= temp;
  #L30e184.  if v3 == 0 then goto L30e1a4;
  #L30e188.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L30e18e.  v3:= temp @kind object;
  #L30e190.  if v3 == 0 then goto L30e19e;
  #L30e194.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L30e19a.  v3:= temp;
  #L30e19c.  goto L30e1a0;
  #L30e19e.  v3:= 0I;
  #L30e1a0.  v2:= v2 + v3 @kind int;
  #L30e1a2.  goto L30e17c;
  #L30e1a4.  return v2;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.r.o0` v1 @kind this) @signature `Le/e/a/b/f/r/o0;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L30e224.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/r/o0;.zza:()Le/e/a/b/f/r/o1;` @kind virtual;
  #L30e22a.  v0:= temp @kind object;
  #L30e22c.  return v0 @kind object;
}
procedure `boolean` `v`(`e.e.a.b.f.r.o0` v1 @kind this) @signature `Le/e/a/b/f/r/o0;.v:()Z` @AccessFlag  {
    temp;
    v0;

  #L30dfc8.  v0:= 0I;
  #L30dfca.  throw v0;
}
procedure `e.e.a.b.f.r.o1` `zza`() @signature `Le/e/a/b/f/r/o0;.zza:()Le/e/a/b/f/r/o1;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
