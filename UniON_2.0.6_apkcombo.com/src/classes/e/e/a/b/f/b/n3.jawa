record `e.e.a.b.f.b.n3` @kind class @AccessFlag  extends `java.util.AbstractSet` @kind class {
  `e.e.a.b.f.b.e3` `e.e.a.b.f.b.n3.b` @AccessFlag PRIVATE_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.b.n3` v0 @kind this, `e.e.a.b.f.b.e3` v1 @kind object) @signature `Le/e/a/b/f/b/n3;.<init>:(Le/e/a/b/f/b/e3;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L20ddd4.  v0.`e.e.a.b.f.b.n3.b` @type ^`e.e.a.b.f.b.e3` := v1 @kind object;
  #L20ddd8.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L20ddde.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.b.n3` v0 @kind this, `e.e.a.b.f.b.e3` v1 @kind object, `e.e.a.b.f.b.f3` v2 @kind object) @signature `Le/e/a/b/f/b/n3;.<init>:(Le/e/a/b/f/b/e3;Le/e/a/b/f/b/f3;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L20ddf0.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/b/n3;.<init>:(Le/e/a/b/f/b/e3;)V` @kind direct;
  #L20ddf6.  return @kind void;
}
procedure `boolean` `add`(`e.e.a.b.f.b.n3` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/b/n3;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L20dcbc.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L20dcc0.  call temp:= `contains`(v2, v3) @signature `Le/e/a/b/f/b/n3;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L20dcc6.  v0:= temp;
  #L20dcc8.  if v0 != 0 then goto L20dcee;
  #L20dccc.  v0:= v2.`e.e.a.b.f.b.n3.b` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20dcd0.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L20dcd6.  v1:= temp @kind object;
  #L20dcd8.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L20dcdc.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L20dce2.  v3:= temp @kind object;
  #L20dce4.  call temp:= `a`(v0, v1, v3) @signature `Le/e/a/b/f/b/e3;.a:(Ljava/lang/Comparable;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L20dcea.  v3:= 1I;
  #L20dcec.  return v3;
  #L20dcee.  v3:= 0I;
  #L20dcf0.  return v3;
}
procedure `void` `clear`(`e.e.a.b.f.b.n3` v1 @kind this) @signature `Le/e/a/b/f/b/n3;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20de08.  v0:= v1.`e.e.a.b.f.b.n3.b` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20de0c.  call `clear`(v0) @signature `Le/e/a/b/f/b/e3;.clear:()V` @kind virtual;
  #L20de12.  return @kind void;
}
procedure `boolean` `contains`(`e.e.a.b.f.b.n3` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/b/n3;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L20dd04.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L20dd08.  v0:= v2.`e.e.a.b.f.b.n3.b` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20dd0c.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L20dd12.  v1:= temp @kind object;
  #L20dd14.  call temp:= `get`(v0, v1) @signature `Le/e/a/b/f/b/e3;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L20dd1a.  v0:= temp @kind object;
  #L20dd1c.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L20dd22.  v3:= temp @kind object;
  #L20dd24.  if v0 == v3 then goto L20dd3e;
  #L20dd28.  if v0 == 0 then goto L20dd3a;
  #L20dd2c.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L20dd32.  v3:= temp;
  #L20dd34.  if v3 == 0 then goto L20dd3a;
  #L20dd38.  goto L20dd3e;
  #L20dd3a.  v3:= 0I;
  #L20dd3c.  return v3;
  #L20dd3e.  v3:= 1I;
  #L20dd40.  return v3;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.b.n3` v3 @kind this) @signature `Le/e/a/b/f/b/n3;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L20ddb0.  v0:= new `e.e.a.b.f.b.m3`;
  #L20ddb4.  v1:= v3.`e.e.a.b.f.b.n3.b` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20ddb8.  v2:= 0I;
  #L20ddba.  call `<init>`(v0, v1, v2) @signature `Le/e/a/b/f/b/m3;.<init>:(Le/e/a/b/f/b/e3;Le/e/a/b/f/b/f3;)V` @kind direct;
  #L20ddc0.  return v0 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.b.n3` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/b/n3;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20dd54.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L20dd58.  call temp:= `contains`(v1, v2) @signature `Le/e/a/b/f/b/n3;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L20dd5e.  v0:= temp;
  #L20dd60.  if v0 == 0 then goto L20dd7a;
  #L20dd64.  v0:= v1.`e.e.a.b.f.b.n3.b` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20dd68.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L20dd6e.  v2:= temp @kind object;
  #L20dd70.  call temp:= `remove`(v0, v2) @signature `Le/e/a/b/f/b/e3;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L20dd76.  v2:= 1I;
  #L20dd78.  return v2;
  #L20dd7a.  v2:= 0I;
  #L20dd7c.  return v2;
}
procedure `int` `size`(`e.e.a.b.f.b.n3` v1 @kind this) @signature `Le/e/a/b/f/b/n3;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20dd90.  v0:= v1.`e.e.a.b.f.b.n3.b` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20dd94.  call temp:= `size`(v0) @signature `Le/e/a/b/f/b/e3;.size:()I` @kind virtual;
  #L20dd9a.  v0:= temp;
  #L20dd9c.  return v0;
}
