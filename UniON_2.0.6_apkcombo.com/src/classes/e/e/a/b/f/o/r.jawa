record `e.e.a.b.f.o.r` @kind class @AccessFlag PUBLIC_ABSTRACT extends `e.e.a.b.f.o.m` @kind class, `java.util.List` @kind interface, `java.util.RandomAccess` @kind interface {
}
global `e.e.a.b.f.o.n0` `@@e.e.a.b.f.o.r.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/o/r;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2c06cc.  v0:= new `e.e.a.b.f.o.p`;
  #L2c06d0.  v1:= `@@e.e.a.b.f.o.g0.f` @type ^`e.e.a.b.f.o.r` @kind object;
  #L2c06d4.  v2:= 0I;
  #L2c06d6.  call `<init>`(v0, v1, v2) @signature `Le/e/a/b/f/o/p;.<init>:(Le/e/a/b/f/o/r;I)V` @kind direct;
  #L2c06dc.  `@@e.e.a.b.f.o.r.c` @type ^`e.e.a.b.f.o.n0` := v0 @kind object;
  #L2c06e0.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.o.r` v0 @kind this) @signature `Le/e/a/b/f/o/r;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c06f4.  call `<init>`(v0) @signature `Le/e/a/b/f/o/m;.<init>:()V` @kind direct;
  #L2c06fa.  return @kind void;
}
procedure `e.e.a.b.f.o.r` `a`(`java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/o/r;.a:(Ljava/lang/Object;)Le/e/a/b/f/o/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2c0428.  v0:= 1I;
  #L2c042a.  v1:= new `java.lang.Object`[v0];
  #L2c042e.  v2:= 0I;
  #L2c0430.  v1[v2]:= v3 @kind object;
  #L2c0434.  call temp:= `a`(v1, v0) @signature `Le/e/a/b/f/o/f0;.a:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L2c043a.  call temp:= `b`(v1, v0) @signature `Le/e/a/b/f/o/r;.b:([Ljava/lang/Object;I)Le/e/a/b/f/o/r;` @kind static;
  #L2c0440.  v3:= temp @kind object;
  #L2c0442.  return v3 @kind object;
}
procedure `e.e.a.b.f.o.r` `a`(`java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/o/r;.a:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Le/e/a/b/f/o/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2c0454.  v0:= 3I;
  #L2c0456.  v1:= new `java.lang.Object`[v0];
  #L2c045a.  v2:= 0I;
  #L2c045c.  v1[v2]:= v3 @kind object;
  #L2c0460.  v3:= 1I;
  #L2c0462.  v1[v3]:= v4 @kind object;
  #L2c0466.  v3:= 2I;
  #L2c0468.  v1[v3]:= v5 @kind object;
  #L2c046c.  call temp:= `a`(v1, v0) @signature `Le/e/a/b/f/o/f0;.a:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L2c0472.  call temp:= `b`(v1, v0) @signature `Le/e/a/b/f/o/r;.b:([Ljava/lang/Object;I)Le/e/a/b/f/o/r;` @kind static;
  #L2c0478.  v3:= temp @kind object;
  #L2c047a.  return v3 @kind object;
}
procedure `e.e.a.b.f.o.r` `a`(`java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/o/r;.a:(Ljava/util/Collection;)Le/e/a/b/f/o/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2c048c.  call temp:= `toArray`(v1) @signature `Ljava/util/Collection;.toArray:()[Ljava/lang/Object;` @kind interface;
  #L2c0492.  v1:= temp @kind object;
  #L2c0494.  v0:= length @variable v1;
  #L2c0496.  call temp:= `a`(v1, v0) @signature `Le/e/a/b/f/o/f0;.a:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L2c049c.  call temp:= `b`(v1, v0) @signature `Le/e/a/b/f/o/r;.b:([Ljava/lang/Object;I)Le/e/a/b/f/o/r;` @kind static;
  #L2c04a2.  v1:= temp @kind object;
  #L2c04a4.  return v1 @kind object;
}
procedure `e.e.a.b.f.o.r` `b`(`java.lang.Object`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/o/r;.b:([Ljava/lang/Object;I)Le/e/a/b/f/o/r;` @AccessFlag STATIC {
    temp;
    v0;

  #L2c04b8.  if v2 != 0 then goto L2c04c2;
  #L2c04bc.  v1:= `@@e.e.a.b.f.o.g0.f` @type ^`e.e.a.b.f.o.r` @kind object;
  #L2c04c0.  return v1 @kind object;
  #L2c04c2.  v0:= new `e.e.a.b.f.o.g0`;
  #L2c04c6.  call `<init>`(v0, v1, v2) @signature `Le/e/a/b/f/o/g0;.<init>:([Ljava/lang/Object;I)V` @kind direct;
  #L2c04cc.  return v0 @kind object;
}
procedure `int` `a`(`e.e.a.b.f.o.r` v2 @kind this, `java.lang.Object`[] v3 @kind object, `int` v4 ) @signature `Le/e/a/b/f/o/r;.a:([Ljava/lang/Object;I)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2c05f0.  call temp:= `size`(v2) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2c05f6.  v4:= temp;
  #L2c05f8.  v0:= 0I;
  #L2c05fa.  if v0 >= v4 then goto L2c0610;
  #L2c05fe.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2c0604.  v1:= temp @kind object;
  #L2c0606.  v3[v0]:= v1 @kind object;
  #L2c060a.  v0:= v0 + 1;
  #L2c060e.  goto L2c05fa;
  #L2c0610.  return v4;
}
procedure `e.e.a.b.f.o.r` `a`(`e.e.a.b.f.o.r` v1 @kind this, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/o/r;.a:(II)Le/e/a/b/f/o/r;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c03e4.  call temp:= `size`(v1) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2c03ea.  v0:= temp;
  #L2c03ec.  call `a`(v2, v3, v0) @signature `Le/e/a/b/f/o/e4;.a:(III)V` @kind static;
  #L2c03f2.  v3:= v3 - v2 @kind int;
  #L2c03f4.  call temp:= `size`(v1) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2c03fa.  v0:= temp;
  #L2c03fc.  if v3 != v0 then goto L2c0402;
  #L2c0400.  return v1 @kind object;
  #L2c0402.  if v3 != 0 then goto L2c040c;
  #L2c0406.  v2:= `@@e.e.a.b.f.o.g0.f` @type ^`e.e.a.b.f.o.r` @kind object;
  #L2c040a.  return v2 @kind object;
  #L2c040c.  v0:= new `e.e.a.b.f.o.q`;
  #L2c0410.  call `<init>`(v0, v1, v2, v3) @signature `Le/e/a/b/f/o/q;.<init>:(Le/e/a/b/f/o/r;II)V` @kind direct;
  #L2c0416.  return v0 @kind object;
}
procedure `void` `add`(`e.e.a.b.f.o.r` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/o/r;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c070c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2c0710.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2c0716.  throw v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.o.r` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/o/r;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c02d8.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2c02dc.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2c02e2.  throw v1;
}
procedure `boolean` `contains`(`e.e.a.b.f.o.r` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/o/r;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c02f4.  call temp:= `indexOf`(v0, v1) @signature `Le/e/a/b/f/o/r;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L2c02fa.  v1:= temp;
  #L2c02fc.  if v1 < 0 then goto L2c0304;
  #L2c0300.  v1:= 1I;
  #L2c0302.  return v1;
  #L2c0304.  v1:= 0I;
  #L2c0306.  return v1;
}
procedure `boolean` `equals`(`e.e.a.b.f.o.r` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/o/r;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2c0318.  v0:= 1I;
  #L2c031a.  v1:= 0I;
  #L2c031c.  if v7 != v6 then goto L2c0324;
  #L2c0320.  v1:= 1I;
  #L2c0322.  goto L2c03d0;
  #L2c0324.  v2:= instanceof @variable v7 @type ^`java.util.List` @kind boolean;
  #L2c0328.  if v2 != 0 then goto L2c032e;
  #L2c032c.  goto L2c03d0;
  #L2c032e.  v7:= (`java.util.List`) v7 @kind object;
  #L2c0332.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2c0338.  v2:= temp;
  #L2c033a.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2c0340.  v3:= temp;
  #L2c0342.  if v2 == v3 then goto L2c0348;
  #L2c0346.  goto L2c03d0;
  #L2c0348.  v3:= instanceof @variable v7 @type ^`java.util.RandomAccess` @kind boolean;
  #L2c034c.  if v3 == 0 then goto L2c037a;
  #L2c0350.  v3:= 0I;
  #L2c0352.  if v3 >= v2 then goto L2c0320;
  #L2c0356.  call temp:= `get`(v6, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2c035c.  v4:= temp @kind object;
  #L2c035e.  call temp:= `get`(v7, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2c0364.  v5:= temp @kind object;
  #L2c0366.  call temp:= `a`(v4, v5) @signature `Le/e/a/b/f/o/a0;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2c036c.  v4:= temp;
  #L2c036e.  if v4 != 0 then goto L2c0374;
  #L2c0372.  goto L2c03d0;
  #L2c0374.  v3:= v3 + 1;
  #L2c0378.  goto L2c0352;
  #L2c037a.  call temp:= `iterator`(v6) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c0380.  v2:= temp @kind object;
  #L2c0382.  call temp:= `iterator`(v7) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c0388.  v7:= temp @kind object;
  #L2c038a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c0390.  v3:= temp;
  #L2c0392.  if v3 == 0 then goto L2c03c2;
  #L2c0396.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c039c.  v3:= temp;
  #L2c039e.  if v3 != 0 then goto L2c03a4;
  #L2c03a2.  goto L2c03d0;
  #L2c03a4.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c03aa.  v3:= temp @kind object;
  #L2c03ac.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c03b2.  v4:= temp @kind object;
  #L2c03b4.  call temp:= `a`(v3, v4) @signature `Le/e/a/b/f/o/a0;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2c03ba.  v3:= temp;
  #L2c03bc.  if v3 != 0 then goto L2c038a;
  #L2c03c0.  goto L2c03d0;
  #L2c03c2.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c03c8.  v7:= temp;
  #L2c03ca.  if v7 != 0 then goto L2c03d0;
  #L2c03ce.  goto L2c0320;
  #L2c03d0.  return v1;
}
procedure `e.e.a.b.f.o.n0` `h`(`e.e.a.b.f.o.r` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/o/r;.h:(I)Le/e/a/b/f/o/n0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2c04e0.  call temp:= `size`(v2) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2c04e6.  v0:= temp;
  #L2c04e8.  v1:= "index" @kind object;
  #L2c04ec.  call temp:= `b`(v3, v0, v1) @signature `Le/e/a/b/f/o/e4;.b:(IILjava/lang/String;)I` @kind static;
  #L2c04f2.  call temp:= `isEmpty`(v2) @signature `Ljava/util/AbstractCollection;.isEmpty:()Z` @kind virtual;
  #L2c04f8.  v0:= temp;
  #L2c04fa.  if v0 == 0 then goto L2c0504;
  #L2c04fe.  v3:= `@@e.e.a.b.f.o.r.c` @type ^`e.e.a.b.f.o.n0` @kind object;
  #L2c0502.  return v3 @kind object;
  #L2c0504.  v0:= new `e.e.a.b.f.o.p`;
  #L2c0508.  call `<init>`(v0, v2, v3) @signature `Le/e/a/b/f/o/p;.<init>:(Le/e/a/b/f/o/r;I)V` @kind direct;
  #L2c050e.  return v0 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.o.r` v4 @kind this) @signature `Le/e/a/b/f/o/r;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c0520.  call temp:= `size`(v4) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2c0526.  v0:= temp;
  #L2c0528.  v1:= 1I;
  #L2c052a.  v2:= 0I;
  #L2c052c.  if v2 >= v0 then goto L2c054c;
  #L2c0530.  v1:= v1 * 31;
  #L2c0534.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2c053a.  v3:= temp @kind object;
  #L2c053c.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2c0542.  v3:= temp;
  #L2c0544.  v1:= v1 + v3 @kind int;
  #L2c0546.  v2:= v2 + 1;
  #L2c054a.  goto L2c052c;
  #L2c054c.  return v1;
}
procedure `int` `indexOf`(`e.e.a.b.f.o.r` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/o/r;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c0560.  v0:= -1I;
  #L2c0562.  if v5 != 0 then goto L2c0568;
  #L2c0566.  return v0;
  #L2c0568.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2c056e.  v1:= temp;
  #L2c0570.  v2:= 0I;
  #L2c0572.  if v2 >= v1 then goto L2c0594;
  #L2c0576.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2c057c.  v3:= temp @kind object;
  #L2c057e.  call temp:= `equals`(v5, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2c0584.  v3:= temp;
  #L2c0586.  if v3 == 0 then goto L2c058e;
  #L2c058a.  v0:= v2;
  #L2c058c.  goto L2c0594;
  #L2c058e.  v2:= v2 + 1;
  #L2c0592.  goto L2c0572;
  #L2c0594.  return v0;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.o.r` v1 @kind this) @signature `Le/e/a/b/f/o/r;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L2c065c.  v0:= 0I;
  #L2c065e.  call temp:= `h`(v1, v0) @signature `Le/e/a/b/f/o/r;.h:(I)Le/e/a/b/f/o/n0;` @kind virtual;
  #L2c0664.  v0:= temp @kind object;
  #L2c0666.  return v0 @kind object;
}
procedure `int` `lastIndexOf`(`e.e.a.b.f.o.r` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/o/r;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2c05a8.  v0:= -1I;
  #L2c05aa.  if v4 != 0 then goto L2c05b0;
  #L2c05ae.  return v0;
  #L2c05b0.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2c05b6.  v1:= temp;
  #L2c05b8.  v1:= v1 + v0 @kind int;
  #L2c05ba.  if v1 < 0 then goto L2c05dc;
  #L2c05be.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2c05c4.  v2:= temp @kind object;
  #L2c05c6.  call temp:= `equals`(v4, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2c05cc.  v2:= temp;
  #L2c05ce.  if v2 == 0 then goto L2c05d6;
  #L2c05d2.  v0:= v1;
  #L2c05d4.  goto L2c05dc;
  #L2c05d6.  v1:= v1 + -1;
  #L2c05da.  goto L2c05ba;
  #L2c05dc.  return v0;
}
procedure `java.util.ListIterator` `listIterator`(`e.e.a.b.f.o.r` v1 @kind this) @signature `Le/e/a/b/f/o/r;.listIterator:()Ljava/util/ListIterator;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L2c0694.  v0:= 0I;
  #L2c0696.  call temp:= `h`(v1, v0) @signature `Le/e/a/b/f/o/r;.h:(I)Le/e/a/b/f/o/n0;` @kind virtual;
  #L2c069c.  v0:= temp @kind object;
  #L2c069e.  return v0 @kind object;
}
procedure `java.util.ListIterator` `listIterator`(`e.e.a.b.f.o.r` v0 @kind this, `int` v1 ) @signature `Le/e/a/b/f/o/r;.listIterator:(I)Ljava/util/ListIterator;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L2c06b0.  call temp:= `h`(v0, v1) @signature `Le/e/a/b/f/o/r;.h:(I)Le/e/a/b/f/o/n0;` @kind virtual;
  #L2c06b6.  v1:= temp @kind object;
  #L2c06b8.  return v1 @kind object;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.o.r` v0 @kind this, `int` v1 ) @signature `Le/e/a/b/f/o/r;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c0624.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2c0628.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2c062e.  throw v1;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.o.r` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/o/r;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c0640.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2c0644.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2c064a.  throw v1;
}
procedure `java.util.List` `subList`(`e.e.a.b.f.o.r` v0 @kind this, `int` v1 , `int` v2 ) @signature `Le/e/a/b/f/o/r;.subList:(II)Ljava/util/List;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2c0678.  call temp:= `a`(v0, v1, v2) @signature `Le/e/a/b/f/o/r;.a:(II)Le/e/a/b/f/o/r;` @kind virtual;
  #L2c067e.  v1:= temp @kind object;
  #L2c0680.  return v1 @kind object;
}
