record `e.e.a.b.f.b.t` @kind class @AccessFlag ABSTRACT extends `java.util.AbstractList` @kind class, `e.e.a.b.f.b.k1` @kind interface {
  `boolean` `e.e.a.b.f.b.t.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.f.b.t` v1 @kind this) @signature `Le/e/a/b/f/b/t;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1f9868.  call `<init>`(v1) @signature `Ljava/util/AbstractList;.<init>:()V` @kind direct;
  #L1f986e.  v0:= 1I;
  #L1f9870.  v1.`e.e.a.b.f.b.t.b` @type ^`boolean` := v0 @kind boolean;
  #L1f9874.  return @kind void;
}
procedure `boolean` `add`(`e.e.a.b.f.b.t` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/b/t;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L1f9678.  call `d`(v0) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1f967e.  call temp:= `add`(v0, v1) @signature `Ljava/util/AbstractList;.add:(Ljava/lang/Object;)Z` @kind super;
  #L1f9684.  v1:= temp;
  #L1f9686.  return v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.b.t` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/b/t;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L1f9698.  call `d`(v0) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1f969e.  call temp:= `addAll`(v0, v1, v2) @signature `Ljava/util/AbstractList;.addAll:(ILjava/util/Collection;)Z` @kind super;
  #L1f96a4.  v1:= temp;
  #L1f96a6.  return v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.b.t` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/b/t;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L1f96b8.  call `d`(v0) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1f96be.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/AbstractList;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L1f96c4.  v1:= temp;
  #L1f96c6.  return v1;
}
procedure `void` `clear`(`e.e.a.b.f.b.t` v0 @kind this) @signature `Le/e/a/b/f/b/t;.clear:()V` @AccessFlag PUBLIC {
    temp;

  #L1f9888.  call `d`(v0) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1f988e.  call `clear`(v0) @signature `Ljava/util/AbstractList;.clear:()V` @kind super;
  #L1f9894.  return @kind void;
}
procedure `void` `d`(`e.e.a.b.f.b.t` v1 @kind this) @signature `Le/e/a/b/f/b/t;.d:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1f98c0.  v0:= v1.`e.e.a.b.f.b.t.b` @type ^`boolean` @kind boolean;
  #L1f98c4.  if v0 == 0 then goto L1f98ca;
  #L1f98c8.  return @kind void;
  #L1f98ca.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1f98ce.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L1f98d4.  throw v0;
}
procedure `boolean` `equals`(`e.e.a.b.f.b.t` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/b/t;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1f96d8.  v0:= 1I;
  #L1f96da.  if v7 != v6 then goto L1f96e0;
  #L1f96de.  return v0;
  #L1f96e0.  v1:= instanceof @variable v7 @type ^`java.util.List` @kind boolean;
  #L1f96e4.  v2:= 0I;
  #L1f96e6.  if v1 != 0 then goto L1f96ec;
  #L1f96ea.  return v2;
  #L1f96ec.  v1:= instanceof @variable v7 @type ^`java.util.RandomAccess` @kind boolean;
  #L1f96f0.  if v1 != 0 then goto L1f96fe;
  #L1f96f4.  call temp:= `equals`(v6, v7) @signature `Ljava/util/AbstractList;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L1f96fa.  v7:= temp;
  #L1f96fc.  return v7;
  #L1f96fe.  v7:= (`java.util.List`) v7 @kind object;
  #L1f9702.  call temp:= `size`(v6) @signature `Ljava/util/AbstractList;.size:()I` @kind virtual;
  #L1f9708.  v1:= temp;
  #L1f970a.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1f9710.  v3:= temp;
  #L1f9712.  if v1 == v3 then goto L1f9718;
  #L1f9716.  return v2;
  #L1f9718.  v3:= 0I;
  #L1f971a.  if v3 >= v1 then goto L1f9742;
  #L1f971e.  call temp:= `get`(v6, v3) @signature `Ljava/util/AbstractList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1f9724.  v4:= temp @kind object;
  #L1f9726.  call temp:= `get`(v7, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1f972c.  v5:= temp @kind object;
  #L1f972e.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f9734.  v4:= temp;
  #L1f9736.  if v4 != 0 then goto L1f973c;
  #L1f973a.  return v2;
  #L1f973c.  v3:= v3 + 1;
  #L1f9740.  goto L1f971a;
  #L1f9742.  return v0;
}
procedure `void` `h`(`e.e.a.b.f.b.t` v1 @kind this) @signature `Le/e/a/b/f/b/t;.h:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1f98a8.  v0:= 0I;
  #L1f98aa.  v1.`e.e.a.b.f.b.t.b` @type ^`boolean` := v0 @kind boolean;
  #L1f98ae.  return @kind void;
}
procedure `int` `hashCode`(`e.e.a.b.f.b.t` v4 @kind this) @signature `Le/e/a/b/f/b/t;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f97cc.  call temp:= `size`(v4) @signature `Ljava/util/AbstractList;.size:()I` @kind virtual;
  #L1f97d2.  v0:= temp;
  #L1f97d4.  v1:= 1I;
  #L1f97d6.  v2:= 0I;
  #L1f97d8.  if v2 >= v0 then goto L1f97f8;
  #L1f97dc.  v1:= v1 * 31;
  #L1f97e0.  call temp:= `get`(v4, v2) @signature `Ljava/util/AbstractList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1f97e6.  v3:= temp @kind object;
  #L1f97e8.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1f97ee.  v3:= temp;
  #L1f97f0.  v1:= v1 + v3 @kind int;
  #L1f97f2.  v2:= v2 + 1;
  #L1f97f6.  goto L1f97d8;
  #L1f97f8.  return v1;
}
procedure `boolean` `remove`(`e.e.a.b.f.b.t` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/b/t;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L1f9754.  call `d`(v0) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1f975a.  call temp:= `remove`(v0, v1) @signature `Ljava/util/AbstractList;.remove:(Ljava/lang/Object;)Z` @kind super;
  #L1f9760.  v1:= temp;
  #L1f9762.  return v1;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.b.t` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/b/t;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L1f9774.  call `d`(v0) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1f977a.  call temp:= `removeAll`(v0, v1) @signature `Ljava/util/AbstractList;.removeAll:(Ljava/util/Collection;)Z` @kind super;
  #L1f9780.  v1:= temp;
  #L1f9782.  return v1;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.b.t` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/b/t;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L1f9794.  call `d`(v0) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1f979a.  call temp:= `retainAll`(v0, v1) @signature `Ljava/util/AbstractList;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L1f97a0.  v1:= temp;
  #L1f97a2.  return v1;
}
procedure `boolean` `t`(`e.e.a.b.f.b.t` v1 @kind this) @signature `Le/e/a/b/f/b/t;.t:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f97b4.  v0:= v1.`e.e.a.b.f.b.t.b` @type ^`boolean` @kind boolean;
  #L1f97b8.  return v0;
}
