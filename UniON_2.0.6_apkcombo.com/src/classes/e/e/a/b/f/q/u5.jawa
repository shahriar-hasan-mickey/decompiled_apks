record `e.e.a.b.f.q.u5` @kind class @AccessFlag FINAL extends `java.util.AbstractCollection` @kind class {
  `java.util.Map` `e.e.a.b.f.q.u5.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`e.e.a.b.f.q.u5` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Le/e/a/b/f/q/u5;.<init>:(Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2e4050.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L2e4056.  v0.`e.e.a.b.f.q.u5.b` @type ^`java.util.Map` := v1 @kind object;
  #L2e405a.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.q.u5` v1 @kind this) @signature `Le/e/a/b/f/q/u5;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e406c.  v0:= v1.`e.e.a.b.f.q.u5.b` @type ^`java.util.Map` @kind object;
  #L2e4070.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L2e4076.  return @kind void;
}
procedure `boolean` `contains`(`e.e.a.b.f.q.u5` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/q/u5;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e3df4.  v0:= v1.`e.e.a.b.f.q.u5.b` @type ^`java.util.Map` @kind object;
  #L2e3df8.  call temp:= `containsValue`(v0, v2) @signature `Ljava/util/Map;.containsValue:(Ljava/lang/Object;)Z` @kind interface;
  #L2e3dfe.  v2:= temp;
  #L2e3e00.  return v2;
}
procedure `boolean` `isEmpty`(`e.e.a.b.f.q.u5` v1 @kind this) @signature `Le/e/a/b/f/q/u5;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e3e14.  v0:= v1.`e.e.a.b.f.q.u5.b` @type ^`java.util.Map` @kind object;
  #L2e3e18.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2e3e1e.  v0:= temp;
  #L2e3e20.  return v0;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.q.u5` v2 @kind this) @signature `Le/e/a/b/f/q/u5;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2e4020.  v0:= v2.`e.e.a.b.f.q.u5.b` @type ^`java.util.Map` @kind object;
  #L2e4024.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2e402a.  v0:= temp @kind object;
  #L2e402c.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2e4032.  v0:= temp @kind object;
  #L2e4034.  v1:= new `e.e.a.b.f.q.r5`;
  #L2e4038.  call `<init>`(v1, v0) @signature `Le/e/a/b/f/q/r5;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L2e403e.  return v1 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.q.u5` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/q/u5;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2e3e34.  call temp:= `remove`(v3, v4) @signature `Ljava/util/AbstractCollection;.remove:(Ljava/lang/Object;)Z` @kind super;
  #L2e3e3a.  v4:= temp;
  #L2e3e3c.  return v4;
  #L2e3e3e.  v0:= v3.`e.e.a.b.f.q.u5.b` @type ^`java.util.Map` @kind object;
  #L2e3e42.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2e3e48.  v0:= temp @kind object;
  #L2e3e4a.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2e3e50.  v0:= temp @kind object;
  #L2e3e52.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2e3e58.  v1:= temp;
  #L2e3e5a.  if v1 == 0 then goto L2e3e94;
  #L2e3e5e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2e3e64.  v1:= temp @kind object;
  #L2e3e66.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L2e3e6a.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2e3e70.  v2:= temp @kind object;
  #L2e3e72.  call temp:= `a`(v4, v2) @signature `Le/e/a/b/f/q/r7;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2e3e78.  v2:= temp;
  #L2e3e7a.  if v2 == 0 then goto L2e3e52;
  #L2e3e7e.  v4:= v3.`e.e.a.b.f.q.u5.b` @type ^`java.util.Map` @kind object;
  #L2e3e82.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2e3e88.  v0:= temp @kind object;
  #L2e3e8a.  call temp:= `remove`(v4, v0) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2e3e90.  v4:= 1I;
  #L2e3e92.  return v4;
  #L2e3e94.  v4:= 0I;
  #L2e3e96.  return v4;
  catch `java.lang.UnsupportedOperationException` @[L2e3e34..L2e3e3c] goto L2e3e3e;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.q.u5` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Le/e/a/b/f/q/u5;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e3eb8.  if v5 == 0 then goto L2e3ec6;
  #L2e3ebc.  call temp:= `removeAll`(v4, v5) @signature `Ljava/util/AbstractCollection;.removeAll:(Ljava/util/Collection;)Z` @kind super;
  #L2e3ec2.  v5:= temp;
  #L2e3ec4.  return v5;
  #L2e3ec6.  v0:= 0I;
  #L2e3ec8.  throw v0;
  #L2e3eca.  v0:= new `java.util.HashSet`;
  #L2e3ece.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L2e3ed4.  v1:= v4.`e.e.a.b.f.q.u5.b` @type ^`java.util.Map` @kind object;
  #L2e3ed8.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2e3ede.  v1:= temp @kind object;
  #L2e3ee0.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2e3ee6.  v1:= temp @kind object;
  #L2e3ee8.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2e3eee.  v2:= temp;
  #L2e3ef0.  if v2 == 0 then goto L2e3f24;
  #L2e3ef4.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2e3efa.  v2:= temp @kind object;
  #L2e3efc.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L2e3f00.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2e3f06.  v3:= temp @kind object;
  #L2e3f08.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2e3f0e.  v3:= temp;
  #L2e3f10.  if v3 == 0 then goto L2e3ee8;
  #L2e3f14.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2e3f1a.  v2:= temp @kind object;
  #L2e3f1c.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2e3f22.  goto L2e3ee8;
  #L2e3f24.  v5:= v4.`e.e.a.b.f.q.u5.b` @type ^`java.util.Map` @kind object;
  #L2e3f28.  call temp:= `keySet`(v5) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L2e3f2e.  v5:= temp @kind object;
  #L2e3f30.  call temp:= `removeAll`(v5, v0) @signature `Ljava/util/Set;.removeAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2e3f36.  v5:= temp;
  #L2e3f38.  return v5;
  catch `java.lang.UnsupportedOperationException` @[L2e3ebc..L2e3eca] goto L2e3eca;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.q.u5` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Le/e/a/b/f/q/u5;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e3f5c.  if v5 == 0 then goto L2e3f6a;
  #L2e3f60.  call temp:= `retainAll`(v4, v5) @signature `Ljava/util/AbstractCollection;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L2e3f66.  v5:= temp;
  #L2e3f68.  return v5;
  #L2e3f6a.  v0:= 0I;
  #L2e3f6c.  throw v0;
  #L2e3f6e.  v0:= new `java.util.HashSet`;
  #L2e3f72.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L2e3f78.  v1:= v4.`e.e.a.b.f.q.u5.b` @type ^`java.util.Map` @kind object;
  #L2e3f7c.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2e3f82.  v1:= temp @kind object;
  #L2e3f84.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2e3f8a.  v1:= temp @kind object;
  #L2e3f8c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2e3f92.  v2:= temp;
  #L2e3f94.  if v2 == 0 then goto L2e3fc8;
  #L2e3f98.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2e3f9e.  v2:= temp @kind object;
  #L2e3fa0.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L2e3fa4.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2e3faa.  v3:= temp @kind object;
  #L2e3fac.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2e3fb2.  v3:= temp;
  #L2e3fb4.  if v3 == 0 then goto L2e3f8c;
  #L2e3fb8.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2e3fbe.  v2:= temp @kind object;
  #L2e3fc0.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2e3fc6.  goto L2e3f8c;
  #L2e3fc8.  v5:= v4.`e.e.a.b.f.q.u5.b` @type ^`java.util.Map` @kind object;
  #L2e3fcc.  call temp:= `keySet`(v5) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L2e3fd2.  v5:= temp @kind object;
  #L2e3fd4.  call temp:= `retainAll`(v5, v0) @signature `Ljava/util/Set;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2e3fda.  v5:= temp;
  #L2e3fdc.  return v5;
  catch `java.lang.UnsupportedOperationException` @[L2e3f60..L2e3f6e] goto L2e3f6e;
}
procedure `int` `size`(`e.e.a.b.f.q.u5` v1 @kind this) @signature `Le/e/a/b/f/q/u5;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e4000.  v0:= v1.`e.e.a.b.f.q.u5.b` @type ^`java.util.Map` @kind object;
  #L2e4004.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L2e400a.  v0:= temp;
  #L2e400c.  return v0;
}
