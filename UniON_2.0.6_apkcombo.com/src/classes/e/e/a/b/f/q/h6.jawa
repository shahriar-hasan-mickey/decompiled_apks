record `e.e.a.b.f.q.h6` @kind class @AccessFlag ABSTRACT extends `java.util.AbstractSet` @kind class {
}
procedure `void` `<init>`(`e.e.a.b.f.q.h6` v0 @kind this) @signature `Le/e/a/b/f/q/h6;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2e4cbc.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L2e4cc2.  return @kind void;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.q.h6` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/q/h6;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L2e4c7c.  call temp:= `a`(v0, v1) @signature `Le/e/a/b/f/q/i6;.a:(Ljava/util/Set;Ljava/util/Collection;)Z` @kind static;
  #L2e4c82.  v1:= temp;
  #L2e4c84.  return v1;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.q.h6` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/q/h6;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L2e4c98.  if v1 == 0 then goto L2e4ca6;
  #L2e4c9c.  call temp:= `retainAll`(v0, v1) @signature `Ljava/util/AbstractSet;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L2e4ca2.  v1:= temp;
  #L2e4ca4.  return v1;
  #L2e4ca6.  v1:= 0I;
  #L2e4ca8.  throw v1;
}
