record `e.e.a.b.f.n.gu` @kind class @AccessFlag PUBLIC_ABSTRACT extends `e.e.a.b.f.n.au` @kind class, `java.util.Set` @kind interface {
  `e.e.a.b.f.n.eu` `e.e.a.b.f.n.gu.c` @AccessFlag PRIVATE_TRANSIENT;
}
procedure `void` `<init>`(`e.e.a.b.f.n.gu` v0 @kind this) @signature `Le/e/a/b/f/n/gu;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2ac138.  call `<init>`(v0) @signature `Le/e/a/b/f/n/au;.<init>:()V` @kind direct;
  #L2ac13e.  return @kind void;
}
procedure `e.e.a.b.f.n.gu` `a`(`int` v0 , `java.lang.Object`[] v1 @kind object) @signature `Le/e/a/b/f/n/gu;.a:(I[Ljava/lang/Object;)Le/e/a/b/f/n/gu;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2abf50.  call temp:= `b`(v0, v1) @signature `Le/e/a/b/f/n/gu;.b:(I[Ljava/lang/Object;)Le/e/a/b/f/n/gu;` @kind static;
  #L2abf56.  v0:= temp @kind object;
  #L2abf58.  return v0 @kind object;
}
procedure `e.e.a.b.f.n.gu` `b`() @signature `Le/e/a/b/f/n/gu;.b:()Le/e/a/b/f/n/gu;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2abf38.  v0:= `@@e.e.a.b.f.n.ku.i` @type ^`e.e.a.b.f.n.ku` @kind object;
  #L2abf3c.  return v0 @kind object;
}
procedure `e.e.a.b.f.n.gu` `b`(`int` v13 , `java.lang.Object`[] v14 @kind object) @signature `Le/e/a/b/f/n/gu;.b:(I[Ljava/lang/Object;)Le/e/a/b/f/n/gu;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L2abf6c.  if v13 == 0 then goto L2ac050;
  #L2abf70.  v0:= 0I;
  #L2abf72.  v1:= 1I;
  #L2abf74.  if v13 == v1 then goto L2ac040;
  #L2abf78.  call temp:= `d`(v13) @signature `Le/e/a/b/f/n/gu;.d:(I)I` @kind static;
  #L2abf7e.  v2:= temp;
  #L2abf80.  v6:= new `java.lang.Object`[v2];
  #L2abf84.  v7:= v2 + -1;
  #L2abf88.  v3:= 0I;
  #L2abf8a.  v5:= 0I;
  #L2abf8c.  v8:= 0I;
  #L2abf8e.  if v3 >= v13 then goto L2abfe2;
  #L2abf92.  v4:= v14[v3] @kind object;
  #L2abf96.  call temp:= `a`(v4, v3) @signature `Le/e/a/b/f/n/iu;.a:(Ljava/lang/Object;I)Ljava/lang/Object;` @kind static;
  #L2abf9c.  call temp:= `hashCode`(v4) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2abfa2.  v9:= temp;
  #L2abfa4.  call temp:= `a`(v9) @signature `Le/e/a/b/f/n/xt;.a:(I)I` @kind static;
  #L2abfaa.  v10:= temp;
  #L2abfac.  v11:= v10 ^& v7 @kind int;
  #L2abfb0.  v12:= v6[v11] @kind object;
  #L2abfb4.  if v12 != 0 then goto L2abfca;
  #L2abfb8.  v10:= v8 + 1;
  #L2abfbc.  v14[v8]:= v4 @kind object;
  #L2abfc0.  v6[v11]:= v4 @kind object;
  #L2abfc4.  v5:= v5 + v9 @kind int;
  #L2abfc6.  v8:= v10;
  #L2abfc8.  goto L2abfd6;
  #L2abfca.  call temp:= `equals`(v12, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2abfd0.  v11:= temp;
  #L2abfd2.  if v11 == 0 then goto L2abfdc;
  #L2abfd6.  v3:= v3 + 1;
  #L2abfda.  goto L2abf8e;
  #L2abfdc.  v10:= v10 + 1;
  #L2abfe0.  goto L2abfac;
  #L2abfe2.  v3:= 0I;
  #L2abfe4.  call `fill`(v14, v8, v13, v3) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L2abfea.  if v8 != v1 then goto L2abffe;
  #L2abfee.  v13:= v14[v0] @kind object;
  #L2abff2.  v14:= new `e.e.a.b.f.n.lu`;
  #L2abff6.  call `<init>`(v14, v13, v5) @signature `Le/e/a/b/f/n/lu;.<init>:(Ljava/lang/Object;I)V` @kind direct;
  #L2abffc.  return v14 @kind object;
  #L2abffe.  call temp:= `d`(v8) @signature `Le/e/a/b/f/n/gu;.d:(I)I` @kind static;
  #L2ac004.  v13:= temp;
  #L2ac006.  v2:= v2 / 2;
  #L2ac00a.  if v13 >= v2 then goto L2ac018;
  #L2ac00e.  call temp:= `b`(v8, v14) @signature `Le/e/a/b/f/n/gu;.b:(I[Ljava/lang/Object;)Le/e/a/b/f/n/gu;` @kind static;
  #L2ac014.  v13:= temp @kind object;
  #L2ac016.  return v13 @kind object;
  #L2ac018.  v13:= length @variable v14;
  #L2ac01a.  v0:= v13 ^> 1;
  #L2ac01e.  v13:= v13 ^> 2;
  #L2ac022.  v0:= v0 + v13 @kind int;
  #L2ac024.  if v8 >= v0 then goto L2ac030;
  #L2ac028.  call temp:= `copyOf`(v14, v8) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L2ac02e.  v14:= temp @kind object;
  #L2ac030.  v4:= v14 @kind object;
  #L2ac032.  v13:= new `e.e.a.b.f.n.ku`;
  #L2ac036.  v3:= v13 @kind object;
  #L2ac038.  call `<init>`(v3, v4, v5, v6, v7, v8) @signature `Le/e/a/b/f/n/ku;.<init>:([Ljava/lang/Object;I[Ljava/lang/Object;II)V` @kind direct;
  #L2ac03e.  return v13 @kind object;
  #L2ac040.  v13:= v14[v0] @kind object;
  #L2ac044.  v14:= new `e.e.a.b.f.n.lu`;
  #L2ac048.  call `<init>`(v14, v13) @signature `Le/e/a/b/f/n/lu;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2ac04e.  return v14 @kind object;
  #L2ac050.  v13:= `@@e.e.a.b.f.n.ku.i` @type ^`e.e.a.b.f.n.ku` @kind object;
  #L2ac054.  return v13 @kind object;
}
procedure `int` `d`(`int` v6 ) @signature `Le/e/a/b/f/n/gu;.d:(I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2ac0b0.  v0:= 2I;
  #L2ac0b2.  call temp:= `max`(v6, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2ac0b8.  v6:= temp;
  #L2ac0ba.  v0:= 751619276I;
  #L2ac0c0.  if v6 >= v0 then goto L2ac0f0;
  #L2ac0c4.  v0:= v6 + -1;
  #L2ac0c8.  call temp:= `highestOneBit`(v0) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L2ac0ce.  v0:= temp;
  #L2ac0d0.  v0:= v0 + v0 @kind int;
  #L2ac0d2.  v1:= (`double`) v0 @kind i2d;
  #L2ac0d4.  v3:= 0.7D;
  #L2ac0de.  v1:= v1 * v3 @kind double;
  #L2ac0e2.  v3:= (`double`) v6 @kind i2d;
  #L2ac0e4.  v5:= dcmpg(v1, v3);
  #L2ac0e8.  if v5 >= 0 then goto L2ac0ee;
  #L2ac0ec.  goto L2ac0d0;
  #L2ac0ee.  return v0;
  #L2ac0f0.  v0:= 2.0F;
  #L2ac0f4.  if v6 >= v0 then goto L2ac0fa;
  #L2ac0f8.  return v0;
  #L2ac0fa.  v6:= new `java.lang.IllegalArgumentException`;
  #L2ac0fe.  v0:= "collection too large" @kind object;
  #L2ac102.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ac108.  throw v6;
}
procedure `e.e.a.b.f.n.eu` `e`(`e.e.a.b.f.n.gu` v1 @kind this) @signature `Le/e/a/b/f/n/gu;.e:()Le/e/a/b/f/n/eu;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2abefc.  v0:= v1.`e.e.a.b.f.n.gu.c` @type ^`e.e.a.b.f.n.eu` @kind object;
  #L2abf00.  if v0 != 0 then goto L2abf10;
  #L2abf04.  call temp:= `f`(v1) @signature `Le/e/a/b/f/n/gu;.f:()Le/e/a/b/f/n/eu;` @kind virtual;
  #L2abf0a.  v0:= temp @kind object;
  #L2abf0c.  v1.`e.e.a.b.f.n.gu.c` @type ^`e.e.a.b.f.n.eu` := v0 @kind object;
  #L2abf10.  return v0 @kind object;
}
procedure `boolean` `equals`(`e.e.a.b.f.n.gu` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/n/gu;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2abe44.  v0:= 1I;
  #L2abe46.  if v5 != v4 then goto L2abe4c;
  #L2abe4a.  return v0;
  #L2abe4c.  v1:= instanceof @variable v5 @type ^`e.e.a.b.f.n.gu` @kind boolean;
  #L2abe50.  v2:= 0I;
  #L2abe52.  if v1 == 0 then goto L2abe8c;
  #L2abe56.  call temp:= `v`(v4) @signature `Le/e/a/b/f/n/gu;.v:()Z` @kind virtual;
  #L2abe5c.  v1:= temp;
  #L2abe5e.  if v1 == 0 then goto L2abe8c;
  #L2abe62.  v1:= v5 @kind object;
  #L2abe64.  v1:= (`e.e.a.b.f.n.gu`) v1 @kind object;
  #L2abe68.  call temp:= `v`(v1) @signature `Le/e/a/b/f/n/gu;.v:()Z` @kind virtual;
  #L2abe6e.  v1:= temp;
  #L2abe70.  if v1 == 0 then goto L2abe8c;
  #L2abe74.  call temp:= `hashCode`(v4) @signature `Le/e/a/b/f/n/gu;.hashCode:()I` @kind virtual;
  #L2abe7a.  v1:= temp;
  #L2abe7c.  call temp:= `hashCode`(v5) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2abe82.  v3:= temp;
  #L2abe84.  if v1 != v3 then goto L2abe8a;
  #L2abe88.  goto L2abe8c;
  #L2abe8a.  return v2;
  #L2abe8c.  if v5 != v4 then goto L2abe94;
  #L2abe90.  v2:= 1I;
  #L2abe92.  goto L2abec4;
  #L2abe94.  v1:= instanceof @variable v5 @type ^`java.util.Set` @kind boolean;
  #L2abe98.  if v1 == 0 then goto L2abec4;
  #L2abe9c.  v5:= (`java.util.Set`) v5 @kind object;
  #L2abea0.  call temp:= `size`(v4) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L2abea6.  v1:= temp;
  #L2abea8.  call temp:= `size`(v5) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L2abeae.  v3:= temp;
  #L2abeb0.  if v1 != v3 then goto L2abec4;
  #L2abeb4.  call temp:= `containsAll`(v4, v5) @signature `Ljava/util/Set;.containsAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2abeba.  v5:= temp;
  #L2abebc.  if v5 != 0 then goto L2abec2;
  #L2abec0.  goto L2abec4;
  #L2abec2.  return v0;
  #L2abec4.  return v2;
  catch `java.lang.NullPointerException` @[L2abea0..L2abebc] goto L2abec4;
  catch `java.lang.ClassCastException` @[L2abea0..L2abebc] goto L2abec4;
}
procedure `e.e.a.b.f.n.eu` `f`(`e.e.a.b.f.n.gu` v1 @kind this) @signature `Le/e/a/b/f/n/gu;.f:()Le/e/a/b/f/n/eu;` @AccessFlag  {
    temp;
    v0;

  #L2abf24.  v0:= 0I;
  #L2abf26.  throw v0;
}
procedure `int` `hashCode`(`e.e.a.b.f.n.gu` v4 @kind this) @signature `Le/e/a/b/f/n/gu;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2ac068.  call temp:= `iterator`(v4) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ac06e.  v0:= temp @kind object;
  #L2ac070.  v1:= 0I;
  #L2ac072.  v2:= 0I;
  #L2ac074.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ac07a.  v3:= temp;
  #L2ac07c.  if v3 == 0 then goto L2ac09c;
  #L2ac080.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ac086.  v3:= temp @kind object;
  #L2ac088.  if v3 == 0 then goto L2ac096;
  #L2ac08c.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2ac092.  v3:= temp;
  #L2ac094.  goto L2ac098;
  #L2ac096.  v3:= 0I;
  #L2ac098.  v2:= v2 + v3 @kind int;
  #L2ac09a.  goto L2ac074;
  #L2ac09c.  return v2;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.n.gu` v1 @kind this) @signature `Le/e/a/b/f/n/gu;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2ac11c.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/n/gu;.zza:()Le/e/a/b/f/n/mu;` @kind virtual;
  #L2ac122.  v0:= temp @kind object;
  #L2ac124.  return v0 @kind object;
}
procedure `boolean` `v`(`e.e.a.b.f.n.gu` v1 @kind this) @signature `Le/e/a/b/f/n/gu;.v:()Z` @AccessFlag  {
    temp;
    v0;

  #L2abee8.  v0:= 0I;
  #L2abeea.  throw v0;
}
procedure `e.e.a.b.f.n.mu` `zza`() @signature `Le/e/a/b/f/n/gu;.zza:()Le/e/a/b/f/n/mu;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
