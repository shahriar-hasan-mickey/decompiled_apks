record `e.e.a.b.f.o.i0` @kind class @AccessFlag ABSTRACT extends `java.util.AbstractSet` @kind class {
}
procedure `void` `<init>`(`e.e.a.b.f.o.i0` v0 @kind this) @signature `Le/e/a/b/f/o/i0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c1490.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L2c1496.  return @kind void;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.o.i0` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/o/i0;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L2c1450.  call temp:= `a`(v0, v1) @signature `Le/e/a/b/f/o/j0;.a:(Ljava/util/Set;Ljava/util/Collection;)Z` @kind static;
  #L2c1456.  v1:= temp;
  #L2c1458.  return v1;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.o.i0` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/o/i0;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L2c146c.  if v1 == 0 then goto L2c147a;
  #L2c1470.  call temp:= `retainAll`(v0, v1) @signature `Ljava/util/AbstractSet;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L2c1476.  v1:= temp;
  #L2c1478.  return v1;
  #L2c147a.  v1:= 0I;
  #L2c147c.  throw v1;
}
