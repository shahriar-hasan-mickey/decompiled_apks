record `e.e.a.b.f.n.z0` @kind class @AccessFlag FINAL extends `e.e.a.b.f.n.v` @kind class, `java.util.RandomAccess` @kind interface, `e.e.a.b.f.n.c2` @kind interface, `e.e.a.b.f.n.o3` @kind interface {
  `double`[] `e.e.a.b.f.n.z0.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.n.z0.d` @AccessFlag PRIVATE;
}
global `e.e.a.b.f.n.z0` `@@e.e.a.b.f.n.z0.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/n/z0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L27c028.  v0:= new `e.e.a.b.f.n.z0`;
  #L27c02c.  v1:= 0I;
  #L27c02e.  v2:= new `double`[v1];
  #L27c032.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/n/z0;.<init>:([DI)V` @kind direct;
  #L27c038.  `@@e.e.a.b.f.n.z0.e` @type ^`e.e.a.b.f.n.z0` := v0 @kind object;
  #L27c03c.  v0:= `@@e.e.a.b.f.n.z0.e` @type ^`e.e.a.b.f.n.z0` @kind object;
  #L27c040.  call `zzb`(v0) @signature `Le/e/a/b/f/n/v;.zzb:()V` @kind virtual;
  #L27c046.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.n.z0` v2 @kind this) @signature `Le/e/a/b/f/n/z0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L27c058.  v0:= 10I;
  #L27c05c.  v0:= new `double`[v0];
  #L27c060.  v1:= 0I;
  #L27c062.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/n/z0;.<init>:([DI)V` @kind direct;
  #L27c068.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.n.z0` v0 @kind this, `double`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/n/z0;.<init>:([DI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L27c07c.  call `<init>`(v0) @signature `Le/e/a/b/f/n/v;.<init>:()V` @kind direct;
  #L27c082.  v0.`e.e.a.b.f.n.z0.c` @type ^`double`[] := v1 @kind object;
  #L27c086.  v0.`e.e.a.b.f.n.z0.d` @type ^`int` := v2;
  #L27c08a.  return @kind void;
}
procedure `java.lang.String` `d`(`e.e.a.b.f.n.z0` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/n/z0;.d:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L27bfdc.  v0:= v3.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27bfe0.  v1:= new `java.lang.StringBuilder`;
  #L27bfe4.  v2:= 35I;
  #L27bfe8.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L27bfee.  v2:= "Index:" @kind object;
  #L27bff2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27bff8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L27bffe.  v4:= ", Size:" @kind object;
  #L27c002.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27c008.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L27c00e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L27c014.  v4:= temp @kind object;
  #L27c016.  return v4 @kind object;
}
procedure `void` `h`(`e.e.a.b.f.n.z0` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/n/z0;.h:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L27c1f4.  if v2 < 0 then goto L27c202;
  #L27c1f8.  v0:= v1.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27c1fc.  if v2 >= v0 then goto L27c202;
  #L27c200.  return @kind void;
  #L27c202.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L27c206.  call temp:= `d`(v1, v2) @signature `Le/e/a/b/f/n/z0;.d:(I)Ljava/lang/String;` @kind direct;
  #L27c20c.  v2:= temp @kind object;
  #L27c20e.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27c214.  throw v0;
}
procedure `void` `a`(`e.e.a.b.f.n.z0` v4 @kind this, `double` v5 ) @signature `Le/e/a/b/f/n/z0;.a:(D)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27c19c.  call `d`(v4) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27c1a2.  v0:= v4.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27c1a6.  v1:= v4.`e.e.a.b.f.n.z0.c` @type ^`double`[] @kind object;
  #L27c1aa.  v2:= length @variable v1;
  #L27c1ac.  if v0 != v2 then goto L27c1cc;
  #L27c1b0.  v2:= v0 * 3;
  #L27c1b4.  v2:= v2 / 2;
  #L27c1b8.  v2:= v2 + 1;
  #L27c1bc.  v2:= new `double`[v2];
  #L27c1c0.  v3:= 0I;
  #L27c1c2.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27c1c8.  v4.`e.e.a.b.f.n.z0.c` @type ^`double`[] := v2 @kind object;
  #L27c1cc.  v0:= v4.`e.e.a.b.f.n.z0.c` @type ^`double`[] @kind object;
  #L27c1d0.  v1:= v4.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27c1d4.  v2:= v1 + 1;
  #L27c1d8.  v4.`e.e.a.b.f.n.z0.d` @type ^`int` := v2;
  #L27c1dc.  v0[v1]:= v5 @kind wide;
  #L27c1e0.  return @kind void;
}
procedure `void` `add`(`e.e.a.b.f.n.z0` v5 @kind this, `int` v6 , `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/n/z0;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27c09c.  v7:= (`java.lang.Double`) v7 @kind object;
  #L27c0a0.  call temp:= `doubleValue`(v7) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L27c0a6.  v0:= temp @kind wide;
  #L27c0a8.  call `d`(v5) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27c0ae.  if v6 < 0 then goto L27c124;
  #L27c0b2.  v7:= v5.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27c0b6.  if v6 > v7 then goto L27c124;
  #L27c0ba.  v2:= v5.`e.e.a.b.f.n.z0.c` @type ^`double`[] @kind object;
  #L27c0be.  v3:= length @variable v2;
  #L27c0c0.  if v7 >= v3 then goto L27c0d2;
  #L27c0c4.  v3:= v6 + 1;
  #L27c0c8.  v7:= v7 - v6 @kind int;
  #L27c0ca.  call `arraycopy`(v2, v6, v2, v3, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27c0d0.  goto L27c102;
  #L27c0d2.  v7:= v7 * 3;
  #L27c0d6.  v7:= v7 / 2;
  #L27c0da.  v7:= v7 + 1;
  #L27c0de.  v7:= new `double`[v7];
  #L27c0e2.  v3:= 0I;
  #L27c0e4.  call `arraycopy`(v2, v3, v7, v3, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27c0ea.  v2:= v5.`e.e.a.b.f.n.z0.c` @type ^`double`[] @kind object;
  #L27c0ee.  v3:= v6 + 1;
  #L27c0f2.  v4:= v5.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27c0f6.  v4:= v4 - v6 @kind int;
  #L27c0f8.  call `arraycopy`(v2, v6, v7, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27c0fe.  v5.`e.e.a.b.f.n.z0.c` @type ^`double`[] := v7 @kind object;
  #L27c102.  v7:= v5.`e.e.a.b.f.n.z0.c` @type ^`double`[] @kind object;
  #L27c106.  v7[v6]:= v0 @kind wide;
  #L27c10a.  v6:= v5.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27c10e.  v6:= v6 + 1;
  #L27c112.  v5.`e.e.a.b.f.n.z0.d` @type ^`int` := v6;
  #L27c116.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L27c11a.  v6:= v6 + 1;
  #L27c11e.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L27c122.  return @kind void;
  #L27c124.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L27c128.  call temp:= `d`(v5, v6) @signature `Le/e/a/b/f/n/z0;.d:(I)Ljava/lang/String;` @kind direct;
  #L27c12e.  v6:= temp @kind object;
  #L27c130.  call `<init>`(v7, v6) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27c136.  throw v7;
}
procedure `boolean` `add`(`e.e.a.b.f.n.z0` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/n/z0;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L27bcc0.  v3:= (`java.lang.Double`) v3 @kind object;
  #L27bcc4.  call temp:= `doubleValue`(v3) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L27bcca.  v0:= temp @kind wide;
  #L27bccc.  call `a`(v2, v0) @signature `Le/e/a/b/f/n/z0;.a:(D)V` @kind virtual;
  #L27bcd2.  v3:= 1I;
  #L27bcd4.  return v3;
}
procedure `boolean` `addAll`(`e.e.a.b.f.n.z0` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/n/z0;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27bce8.  call `d`(v5) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27bcee.  call temp:= `a`(v6) @signature `Le/e/a/b/f/n/e2;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L27bcf4.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.n.z0` @kind boolean;
  #L27bcf8.  if v0 != 0 then goto L27bd06;
  #L27bcfc.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/n/v;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L27bd02.  v6:= temp;
  #L27bd04.  return v6;
  #L27bd06.  v6:= (`e.e.a.b.f.n.z0`) v6 @kind object;
  #L27bd0a.  v0:= v6.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27bd0e.  v1:= 0I;
  #L27bd10.  if v0 != 0 then goto L27bd16;
  #L27bd14.  return v1;
  #L27bd16.  v2:= v5.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27bd1a.  v3:= 2147483647I;
  #L27bd20.  v3:= v3 - v2 @kind int;
  #L27bd22.  if v3 < v0 then goto L27bd66;
  #L27bd26.  v2:= v2 + v0 @kind int;
  #L27bd28.  v0:= v5.`e.e.a.b.f.n.z0.c` @type ^`double`[] @kind object;
  #L27bd2c.  v3:= length @variable v0;
  #L27bd2e.  if v2 <= v3 then goto L27bd3e;
  #L27bd32.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([DI)[D` @kind static;
  #L27bd38.  v0:= temp @kind object;
  #L27bd3a.  v5.`e.e.a.b.f.n.z0.c` @type ^`double`[] := v0 @kind object;
  #L27bd3e.  v0:= v6.`e.e.a.b.f.n.z0.c` @type ^`double`[] @kind object;
  #L27bd42.  v3:= v5.`e.e.a.b.f.n.z0.c` @type ^`double`[] @kind object;
  #L27bd46.  v4:= v5.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27bd4a.  v6:= v6.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27bd4e.  call `arraycopy`(v0, v1, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27bd54.  v5.`e.e.a.b.f.n.z0.d` @type ^`int` := v2;
  #L27bd58.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L27bd5c.  v0:= 1I;
  #L27bd5e.  v6:= v6 + v0 @kind int;
  #L27bd60.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L27bd64.  return v0;
  #L27bd66.  v6:= new `java.lang.OutOfMemoryError`;
  #L27bd6a.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L27bd70.  throw v6;
}
procedure `e.e.a.b.f.n.c2` `c`(`e.e.a.b.f.n.z0` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/n/z0;.c:(I)Le/e/a/b/f/n/c2;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L27be28.  v0:= v2.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27be2c.  if v3 < v0 then goto L27be4c;
  #L27be30.  v0:= new `e.e.a.b.f.n.z0`;
  #L27be34.  v1:= v2.`e.e.a.b.f.n.z0.c` @type ^`double`[] @kind object;
  #L27be38.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([DI)[D` @kind static;
  #L27be3e.  v3:= temp @kind object;
  #L27be40.  v1:= v2.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27be44.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/n/z0;.<init>:([DI)V` @kind direct;
  #L27be4a.  return v0 @kind object;
  #L27be4c.  v3:= new `java.lang.IllegalArgumentException`;
  #L27be50.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L27be56.  throw v3;
}
procedure `boolean` `contains`(`e.e.a.b.f.n.z0` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/n/z0;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L27bd84.  call temp:= `indexOf`(v1, v2) @signature `Le/e/a/b/f/n/z0;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L27bd8a.  v2:= temp;
  #L27bd8c.  v0:= -1I;
  #L27bd8e.  if v2 == v0 then goto L27bd96;
  #L27bd92.  v2:= 1I;
  #L27bd94.  return v2;
  #L27bd96.  v2:= 0I;
  #L27bd98.  return v2;
}
procedure `boolean` `equals`(`e.e.a.b.f.n.z0` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Le/e/a/b/f/n/z0;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L27bdac.  v0:= 1I;
  #L27bdae.  if v8 != v9 then goto L27bdb4;
  #L27bdb2.  return v0;
  #L27bdb4.  v1:= instanceof @variable v9 @type ^`e.e.a.b.f.n.z0` @kind boolean;
  #L27bdb8.  if v1 != 0 then goto L27bdc6;
  #L27bdbc.  call temp:= `equals`(v8, v9) @signature `Le/e/a/b/f/n/v;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L27bdc2.  v9:= temp;
  #L27bdc4.  return v9;
  #L27bdc6.  v9:= (`e.e.a.b.f.n.z0`) v9 @kind object;
  #L27bdca.  v1:= v8.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27bdce.  v2:= v9.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27bdd2.  v3:= 0I;
  #L27bdd4.  if v1 == v2 then goto L27bdda;
  #L27bdd8.  return v3;
  #L27bdda.  v9:= v9.`e.e.a.b.f.n.z0.c` @type ^`double`[] @kind object;
  #L27bdde.  v1:= 0I;
  #L27bde0.  v2:= v8.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27bde4.  if v1 >= v2 then goto L27be14;
  #L27bde8.  v2:= v8.`e.e.a.b.f.n.z0.c` @type ^`double`[] @kind object;
  #L27bdec.  v4:= v2[v1] @kind wide;
  #L27bdf0.  call temp:= `doubleToLongBits`(v4) @signature `Ljava/lang/Double;.doubleToLongBits:(D)J` @kind static;
  #L27bdf6.  v4:= temp @kind wide;
  #L27bdf8.  v6:= v9[v1] @kind wide;
  #L27bdfc.  call temp:= `doubleToLongBits`(v6) @signature `Ljava/lang/Double;.doubleToLongBits:(D)J` @kind static;
  #L27be02.  v6:= temp @kind wide;
  #L27be04.  v2:= lcmp(v4, v6);
  #L27be08.  if v2 == 0 then goto L27be0e;
  #L27be0c.  return v3;
  #L27be0e.  v1:= v1 + 1;
  #L27be12.  goto L27bde0;
  #L27be14.  return v0;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.n.z0` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/n/z0;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L27bf10.  call `h`(v3, v4) @signature `Le/e/a/b/f/n/z0;.h:(I)V` @kind direct;
  #L27bf16.  v0:= v3.`e.e.a.b.f.n.z0.c` @type ^`double`[] @kind object;
  #L27bf1a.  v1:= v0[v4] @kind wide;
  #L27bf1e.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L27bf24.  v4:= temp @kind object;
  #L27bf26.  return v4 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.n.z0` v5 @kind this) @signature `Le/e/a/b/f/n/z0;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27be68.  v0:= 1I;
  #L27be6a.  v1:= 0I;
  #L27be6c.  v2:= v5.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27be70.  if v1 >= v2 then goto L27be98;
  #L27be74.  v0:= v0 * 31;
  #L27be78.  v2:= v5.`e.e.a.b.f.n.z0.c` @type ^`double`[] @kind object;
  #L27be7c.  v3:= v2[v1] @kind wide;
  #L27be80.  call temp:= `doubleToLongBits`(v3) @signature `Ljava/lang/Double;.doubleToLongBits:(D)J` @kind static;
  #L27be86.  v2:= temp @kind wide;
  #L27be88.  call temp:= `a`(v2) @signature `Le/e/a/b/f/n/e2;.a:(J)I` @kind static;
  #L27be8e.  v2:= temp;
  #L27be90.  v0:= v0 + v2 @kind int;
  #L27be92.  v1:= v1 + 1;
  #L27be96.  goto L27be6c;
  #L27be98.  return v0;
}
procedure `int` `indexOf`(`e.e.a.b.f.n.z0` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Le/e/a/b/f/n/z0;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L27beac.  v0:= instanceof @variable v8 @type ^`java.lang.Double` @kind boolean;
  #L27beb0.  v1:= -1I;
  #L27beb2.  if v0 != 0 then goto L27beb8;
  #L27beb6.  return v1;
  #L27beb8.  v8:= (`java.lang.Double`) v8 @kind object;
  #L27bebc.  call temp:= `doubleValue`(v8) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L27bec2.  v2:= temp @kind wide;
  #L27bec4.  v8:= v7.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27bec8.  v0:= 0I;
  #L27beca.  if v0 >= v8 then goto L27bee6;
  #L27bece.  v4:= v7.`e.e.a.b.f.n.z0.c` @type ^`double`[] @kind object;
  #L27bed2.  v5:= v4[v0] @kind wide;
  #L27bed6.  v4:= dcmpl(v5, v2);
  #L27beda.  if v4 != 0 then goto L27bee0;
  #L27bede.  return v0;
  #L27bee0.  v0:= v0 + 1;
  #L27bee4.  goto L27beca;
  #L27bee6.  return v1;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.n.z0` v5 @kind this, `int` v6 ) @signature `Le/e/a/b/f/n/z0;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27bf38.  call `d`(v5) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27bf3e.  call `h`(v5, v6) @signature `Le/e/a/b/f/n/z0;.h:(I)V` @kind direct;
  #L27bf44.  v0:= v5.`e.e.a.b.f.n.z0.c` @type ^`double`[] @kind object;
  #L27bf48.  v1:= v0[v6] @kind wide;
  #L27bf4c.  v3:= v5.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27bf50.  v4:= v3 + -1;
  #L27bf54.  if v6 >= v4 then goto L27bf68;
  #L27bf58.  v4:= v6 + 1;
  #L27bf5c.  v3:= v3 - v6 @kind int;
  #L27bf5e.  v3:= v3 + -1;
  #L27bf62.  call `arraycopy`(v0, v4, v0, v6, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27bf68.  v6:= v5.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27bf6c.  v6:= v6 + -1;
  #L27bf70.  v5.`e.e.a.b.f.n.z0.d` @type ^`int` := v6;
  #L27bf74.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L27bf78.  v6:= v6 + 1;
  #L27bf7c.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L27bf80.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L27bf86.  v6:= temp @kind object;
  #L27bf88.  return v6 @kind object;
}
procedure `void` `removeRange`(`e.e.a.b.f.n.z0` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/n/z0;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L27c148.  call `d`(v2) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27c14e.  if v4 < v3 then goto L27c17c;
  #L27c152.  v0:= v2.`e.e.a.b.f.n.z0.c` @type ^`double`[] @kind object;
  #L27c156.  v1:= v2.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27c15a.  v1:= v1 - v4 @kind int;
  #L27c15c.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27c162.  v0:= v2.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27c166.  v4:= v4 - v3 @kind int;
  #L27c168.  v0:= v0 - v4 @kind int;
  #L27c16a.  v2.`e.e.a.b.f.n.z0.d` @type ^`int` := v0;
  #L27c16e.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L27c172.  v3:= v3 + 1;
  #L27c176.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L27c17a.  return @kind void;
  #L27c17c.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L27c180.  v4:= "toIndex < fromIndex" @kind object;
  #L27c184.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27c18a.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.n.z0` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/n/z0;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27bf9c.  v6:= (`java.lang.Double`) v6 @kind object;
  #L27bfa0.  call temp:= `doubleValue`(v6) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L27bfa6.  v0:= temp @kind wide;
  #L27bfa8.  call `d`(v4) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27bfae.  call `h`(v4, v5) @signature `Le/e/a/b/f/n/z0;.h:(I)V` @kind direct;
  #L27bfb4.  v6:= v4.`e.e.a.b.f.n.z0.c` @type ^`double`[] @kind object;
  #L27bfb8.  v2:= v6[v5] @kind wide;
  #L27bfbc.  v6[v5]:= v0 @kind wide;
  #L27bfc0.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L27bfc6.  v5:= temp @kind object;
  #L27bfc8.  return v5 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.n.z0` v1 @kind this) @signature `Le/e/a/b/f/n/z0;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L27bef8.  v0:= v1.`e.e.a.b.f.n.z0.d` @type ^`int`;
  #L27befc.  return v0;
}
