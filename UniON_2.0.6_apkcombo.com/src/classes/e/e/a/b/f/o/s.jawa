record `e.e.a.b.f.o.s` @kind class @AccessFlag PUBLIC_ABSTRACT extends `e.e.a.b.f.o.m` @kind class, `java.util.Set` @kind interface {
  `e.e.a.b.f.o.r` `e.e.a.b.f.o.s.c` @AccessFlag PRIVATE_TRANSIENT;
}
procedure `void` `<init>`(`e.e.a.b.f.o.s` v0 @kind this) @signature `Le/e/a/b/f/o/s;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c0a4c.  call `<init>`(v0) @signature `Le/e/a/b/f/o/m;.<init>:()V` @kind direct;
  #L2c0a52.  return @kind void;
}
procedure `e.e.a.b.f.o.s` `a`(`int` v13 , `java.lang.Object`[] v14 @kind object) @signature `Le/e/a/b/f/o/s;.a:(I[Ljava/lang/Object;)Le/e/a/b/f/o/s;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L2c0888.  if v13 == 0 then goto L2c0964;
  #L2c088c.  v0:= 0I;
  #L2c088e.  v1:= 1I;
  #L2c0890.  if v13 == v1 then goto L2c0954;
  #L2c0894.  call temp:= `d`(v13) @signature `Le/e/a/b/f/o/s;.d:(I)I` @kind static;
  #L2c089a.  v2:= temp;
  #L2c089c.  v6:= new `java.lang.Object`[v2];
  #L2c08a0.  v7:= v2 + -1;
  #L2c08a4.  v3:= 0I;
  #L2c08a6.  v5:= 0I;
  #L2c08a8.  v8:= 0I;
  #L2c08aa.  if v3 >= v13 then goto L2c08fe;
  #L2c08ae.  v4:= v14[v3] @kind object;
  #L2c08b2.  call temp:= `a`(v4, v3) @signature `Le/e/a/b/f/o/f0;.a:(Ljava/lang/Object;I)Ljava/lang/Object;` @kind static;
  #L2c08b8.  call temp:= `hashCode`(v4) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2c08be.  v9:= temp;
  #L2c08c0.  call temp:= `a`(v9) @signature `Le/e/a/b/f/o/j;.a:(I)I` @kind static;
  #L2c08c6.  v10:= temp;
  #L2c08c8.  v11:= v10 ^& v7 @kind int;
  #L2c08cc.  v12:= v6[v11] @kind object;
  #L2c08d0.  if v12 != 0 then goto L2c08e6;
  #L2c08d4.  v10:= v8 + 1;
  #L2c08d8.  v14[v8]:= v4 @kind object;
  #L2c08dc.  v6[v11]:= v4 @kind object;
  #L2c08e0.  v5:= v5 + v9 @kind int;
  #L2c08e2.  v8:= v10;
  #L2c08e4.  goto L2c08f2;
  #L2c08e6.  call temp:= `equals`(v12, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2c08ec.  v11:= temp;
  #L2c08ee.  if v11 == 0 then goto L2c08f8;
  #L2c08f2.  v3:= v3 + 1;
  #L2c08f6.  goto L2c08aa;
  #L2c08f8.  v10:= v10 + 1;
  #L2c08fc.  goto L2c08c8;
  #L2c08fe.  v3:= 0I;
  #L2c0900.  call `fill`(v14, v8, v13, v3) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L2c0906.  if v8 != v1 then goto L2c091a;
  #L2c090a.  v13:= v14[v0] @kind object;
  #L2c090e.  v14:= new `e.e.a.b.f.o.k0`;
  #L2c0912.  call `<init>`(v14, v13, v5) @signature `Le/e/a/b/f/o/k0;.<init>:(Ljava/lang/Object;I)V` @kind direct;
  #L2c0918.  return v14 @kind object;
  #L2c091a.  call temp:= `d`(v8) @signature `Le/e/a/b/f/o/s;.d:(I)I` @kind static;
  #L2c0920.  v13:= temp;
  #L2c0922.  v2:= v2 / 2;
  #L2c0926.  if v13 < v2 then goto L2c094a;
  #L2c092a.  v13:= 13I;
  #L2c092e.  if v8 >= v13 then goto L2c093a;
  #L2c0932.  call temp:= `copyOf`(v14, v8) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L2c0938.  v14:= temp @kind object;
  #L2c093a.  v4:= v14 @kind object;
  #L2c093c.  v13:= new `e.e.a.b.f.o.h0`;
  #L2c0940.  v3:= v13 @kind object;
  #L2c0942.  call `<init>`(v3, v4, v5, v6, v7, v8) @signature `Le/e/a/b/f/o/h0;.<init>:([Ljava/lang/Object;I[Ljava/lang/Object;II)V` @kind direct;
  #L2c0948.  return v13 @kind object;
  #L2c094a.  call temp:= `a`(v8, v14) @signature `Le/e/a/b/f/o/s;.a:(I[Ljava/lang/Object;)Le/e/a/b/f/o/s;` @kind static;
  #L2c0950.  v13:= temp @kind object;
  #L2c0952.  return v13 @kind object;
  #L2c0954.  v13:= v14[v0] @kind object;
  #L2c0958.  v14:= new `e.e.a.b.f.o.k0`;
  #L2c095c.  call `<init>`(v14, v13) @signature `Le/e/a/b/f/o/k0;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2c0962.  return v14 @kind object;
  #L2c0964.  v13:= `@@e.e.a.b.f.o.h0.i` @type ^`e.e.a.b.f.o.h0` @kind object;
  #L2c0968.  return v13 @kind object;
}
procedure `e.e.a.b.f.o.s` `a`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Le/e/a/b/f/o/s;.a:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Le/e/a/b/f/o/s;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2c081c.  v0:= 19I;
  #L2c0820.  v1:= new `java.lang.Object`[v0];
  #L2c0824.  v2:= 0I;
  #L2c0826.  v3:= "common" @kind object;
  #L2c082a.  v1[v2]:= v3 @kind object;
  #L2c082e.  v3:= 1I;
  #L2c0830.  v4:= "vision-common" @kind object;
  #L2c0834.  v1[v3]:= v4 @kind object;
  #L2c0838.  v3:= 2I;
  #L2c083a.  v4:= "play-services-mlkit-barcode-scanning" @kind object;
  #L2c083e.  v1[v3]:= v4 @kind object;
  #L2c0842.  v3:= 3I;
  #L2c0844.  v4:= "barcode-scanning" @kind object;
  #L2c0848.  v1[v3]:= v4 @kind object;
  #L2c084c.  v3:= 4I;
  #L2c084e.  v4:= "play-services-mlkit-face-detection" @kind object;
  #L2c0852.  v1[v3]:= v4 @kind object;
  #L2c0856.  v3:= 5I;
  #L2c0858.  v4:= "face-detection" @kind object;
  #L2c085c.  v1[v3]:= v4 @kind object;
  #L2c0860.  v3:= 6I;
  #L2c0862.  v4:= 13I;
  #L2c0866.  call `arraycopy`(v6, v2, v1, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2c086c.  call temp:= `a`(v0, v1) @signature `Le/e/a/b/f/o/s;.a:(I[Ljava/lang/Object;)Le/e/a/b/f/o/s;` @kind static;
  #L2c0872.  v0:= temp @kind object;
  #L2c0874.  return v0 @kind object;
}
procedure `int` `d`(`int` v6 ) @signature `Le/e/a/b/f/o/s;.d:(I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2c09c4.  v0:= 2I;
  #L2c09c6.  call temp:= `max`(v6, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2c09cc.  v6:= temp;
  #L2c09ce.  v0:= 751619276I;
  #L2c09d4.  if v6 >= v0 then goto L2c0a04;
  #L2c09d8.  v0:= v6 + -1;
  #L2c09dc.  call temp:= `highestOneBit`(v0) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L2c09e2.  v0:= temp;
  #L2c09e4.  v0:= v0 + v0 @kind int;
  #L2c09e6.  v1:= (`double`) v0 @kind i2d;
  #L2c09e8.  v3:= 0.7D;
  #L2c09f2.  v1:= v1 * v3 @kind double;
  #L2c09f6.  v3:= (`double`) v6 @kind i2d;
  #L2c09f8.  v5:= dcmpg(v1, v3);
  #L2c09fc.  if v5 >= 0 then goto L2c0a02;
  #L2c0a00.  goto L2c09e4;
  #L2c0a02.  return v0;
  #L2c0a04.  v0:= 2.0F;
  #L2c0a08.  if v6 >= v0 then goto L2c0a0e;
  #L2c0a0c.  return v0;
  #L2c0a0e.  v6:= new `java.lang.IllegalArgumentException`;
  #L2c0a12.  v0:= "collection too large" @kind object;
  #L2c0a16.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c0a1c.  throw v6;
}
procedure `e.e.a.b.f.o.r` `e`(`e.e.a.b.f.o.s` v1 @kind this) @signature `Le/e/a/b/f/o/s;.e:()Le/e/a/b/f/o/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c07e0.  v0:= v1.`e.e.a.b.f.o.s.c` @type ^`e.e.a.b.f.o.r` @kind object;
  #L2c07e4.  if v0 != 0 then goto L2c07f4;
  #L2c07e8.  call temp:= `f`(v1) @signature `Le/e/a/b/f/o/s;.f:()Le/e/a/b/f/o/r;` @kind virtual;
  #L2c07ee.  v0:= temp @kind object;
  #L2c07f0.  v1.`e.e.a.b.f.o.s.c` @type ^`e.e.a.b.f.o.r` := v0 @kind object;
  #L2c07f4.  return v0 @kind object;
}
procedure `boolean` `equals`(`e.e.a.b.f.o.s` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/o/s;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c0728.  v0:= 1I;
  #L2c072a.  if v5 != v4 then goto L2c0730;
  #L2c072e.  return v0;
  #L2c0730.  v1:= instanceof @variable v5 @type ^`e.e.a.b.f.o.s` @kind boolean;
  #L2c0734.  v2:= 0I;
  #L2c0736.  if v1 == 0 then goto L2c0770;
  #L2c073a.  call temp:= `v`(v4) @signature `Le/e/a/b/f/o/s;.v:()Z` @kind virtual;
  #L2c0740.  v1:= temp;
  #L2c0742.  if v1 == 0 then goto L2c0770;
  #L2c0746.  v1:= v5 @kind object;
  #L2c0748.  v1:= (`e.e.a.b.f.o.s`) v1 @kind object;
  #L2c074c.  call temp:= `v`(v1) @signature `Le/e/a/b/f/o/s;.v:()Z` @kind virtual;
  #L2c0752.  v1:= temp;
  #L2c0754.  if v1 == 0 then goto L2c0770;
  #L2c0758.  call temp:= `hashCode`(v4) @signature `Le/e/a/b/f/o/s;.hashCode:()I` @kind virtual;
  #L2c075e.  v1:= temp;
  #L2c0760.  call temp:= `hashCode`(v5) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2c0766.  v3:= temp;
  #L2c0768.  if v1 != v3 then goto L2c076e;
  #L2c076c.  goto L2c0770;
  #L2c076e.  return v2;
  #L2c0770.  if v5 != v4 then goto L2c0778;
  #L2c0774.  v2:= 1I;
  #L2c0776.  goto L2c07a8;
  #L2c0778.  v1:= instanceof @variable v5 @type ^`java.util.Set` @kind boolean;
  #L2c077c.  if v1 == 0 then goto L2c07a8;
  #L2c0780.  v5:= (`java.util.Set`) v5 @kind object;
  #L2c0784.  call temp:= `size`(v4) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L2c078a.  v1:= temp;
  #L2c078c.  call temp:= `size`(v5) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L2c0792.  v3:= temp;
  #L2c0794.  if v1 != v3 then goto L2c07a8;
  #L2c0798.  call temp:= `containsAll`(v4, v5) @signature `Ljava/util/Set;.containsAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2c079e.  v5:= temp;
  #L2c07a0.  if v5 != 0 then goto L2c07a6;
  #L2c07a4.  goto L2c07a8;
  #L2c07a6.  return v0;
  #L2c07a8.  return v2;
  catch `java.lang.NullPointerException` @[L2c0784..L2c07a0] goto L2c07a8;
  catch `java.lang.ClassCastException` @[L2c0784..L2c07a0] goto L2c07a8;
}
procedure `e.e.a.b.f.o.r` `f`(`e.e.a.b.f.o.s` v1 @kind this) @signature `Le/e/a/b/f/o/s;.f:()Le/e/a/b/f/o/r;` @AccessFlag  {
    temp;
    v0;

  #L2c0808.  v0:= 0I;
  #L2c080a.  throw v0;
}
procedure `int` `hashCode`(`e.e.a.b.f.o.s` v4 @kind this) @signature `Le/e/a/b/f/o/s;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c097c.  call temp:= `iterator`(v4) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c0982.  v0:= temp @kind object;
  #L2c0984.  v1:= 0I;
  #L2c0986.  v2:= 0I;
  #L2c0988.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c098e.  v3:= temp;
  #L2c0990.  if v3 == 0 then goto L2c09b0;
  #L2c0994.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c099a.  v3:= temp @kind object;
  #L2c099c.  if v3 == 0 then goto L2c09aa;
  #L2c09a0.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2c09a6.  v3:= temp;
  #L2c09a8.  goto L2c09ac;
  #L2c09aa.  v3:= 0I;
  #L2c09ac.  v2:= v2 + v3 @kind int;
  #L2c09ae.  goto L2c0988;
  #L2c09b0.  return v2;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.o.s` v1 @kind this) @signature `Le/e/a/b/f/o/s;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2c0a30.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/o/s;.zza:()Le/e/a/b/f/o/m0;` @kind virtual;
  #L2c0a36.  v0:= temp @kind object;
  #L2c0a38.  return v0 @kind object;
}
procedure `boolean` `v`(`e.e.a.b.f.o.s` v1 @kind this) @signature `Le/e/a/b/f/o/s;.v:()Z` @AccessFlag  {
    temp;
    v0;

  #L2c07cc.  v0:= 0I;
  #L2c07ce.  throw v0;
}
procedure `e.e.a.b.f.o.m0` `zza`() @signature `Le/e/a/b/f/o/s;.zza:()Le/e/a/b/f/o/m0;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
