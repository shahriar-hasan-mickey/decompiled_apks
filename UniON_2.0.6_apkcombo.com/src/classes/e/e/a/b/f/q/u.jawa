record `e.e.a.b.f.q.u` @kind class @AccessFlag FINAL extends `e.e.a.b.f.q.tu` @kind class, `java.util.RandomAccess` @kind interface, `e.e.a.b.f.q.y` @kind interface, `e.e.a.b.f.q.j1` @kind interface {
  `int`[] `e.e.a.b.f.q.u.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.q.u.d` @AccessFlag PRIVATE;
}
global `e.e.a.b.f.q.u` `@@e.e.a.b.f.q.u.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/q/u;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2d4040.  v0:= new `e.e.a.b.f.q.u`;
  #L2d4044.  v1:= 0I;
  #L2d4046.  v2:= new `int`[v1];
  #L2d404a.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/q/u;.<init>:([II)V` @kind direct;
  #L2d4050.  `@@e.e.a.b.f.q.u.e` @type ^`e.e.a.b.f.q.u` := v0 @kind object;
  #L2d4054.  v0:= `@@e.e.a.b.f.q.u.e` @type ^`e.e.a.b.f.q.u` @kind object;
  #L2d4058.  call `zzb`(v0) @signature `Le/e/a/b/f/q/tu;.zzb:()V` @kind virtual;
  #L2d405e.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.q.u` v2 @kind this) @signature `Le/e/a/b/f/q/u;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2d4070.  v0:= 10I;
  #L2d4074.  v0:= new `int`[v0];
  #L2d4078.  v1:= 0I;
  #L2d407a.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/q/u;.<init>:([II)V` @kind direct;
  #L2d4080.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.q.u` v0 @kind this, `int`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/q/u;.<init>:([II)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2d4094.  call `<init>`(v0) @signature `Le/e/a/b/f/q/tu;.<init>:()V` @kind direct;
  #L2d409a.  v0.`e.e.a.b.f.q.u.c` @type ^`int`[] := v1 @kind object;
  #L2d409e.  v0.`e.e.a.b.f.q.u.d` @type ^`int` := v2;
  #L2d40a2.  return @kind void;
}
procedure `e.e.a.b.f.q.u` `c`() @signature `Le/e/a/b/f/q/u;.c:()Le/e/a/b/f/q/u;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2d3e00.  v0:= `@@e.e.a.b.f.q.u.e` @type ^`e.e.a.b.f.q.u` @kind object;
  #L2d3e04.  return v0 @kind object;
}
procedure `void` `f`(`e.e.a.b.f.q.u` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/q/u;.f:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2d420c.  if v2 < 0 then goto L2d421a;
  #L2d4210.  v0:= v1.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d4214.  if v2 >= v0 then goto L2d421a;
  #L2d4218.  return @kind void;
  #L2d421a.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L2d421e.  call temp:= `i`(v1, v2) @signature `Le/e/a/b/f/q/u;.i:(I)Ljava/lang/String;` @kind direct;
  #L2d4224.  v2:= temp @kind object;
  #L2d4226.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d422c.  throw v0;
}
procedure `java.lang.String` `i`(`e.e.a.b.f.q.u` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/q/u;.i:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2d3ff4.  v0:= v3.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d3ff8.  v1:= new `java.lang.StringBuilder`;
  #L2d3ffc.  v2:= 35I;
  #L2d4000.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2d4006.  v2:= "Index:" @kind object;
  #L2d400a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d4010.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d4016.  v4:= ", Size:" @kind object;
  #L2d401a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d4020.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d4026.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d402c.  v4:= temp @kind object;
  #L2d402e.  return v4 @kind object;
}
procedure `void` `add`(`e.e.a.b.f.q.u` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/q/u;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2d40b4.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L2d40b8.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2d40be.  v6:= temp;
  #L2d40c0.  call `d`(v4) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L2d40c6.  if v5 < 0 then goto L2d413c;
  #L2d40ca.  v0:= v4.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d40ce.  if v5 > v0 then goto L2d413c;
  #L2d40d2.  v1:= v4.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d40d6.  v2:= length @variable v1;
  #L2d40d8.  if v0 >= v2 then goto L2d40ea;
  #L2d40dc.  v2:= v5 + 1;
  #L2d40e0.  v0:= v0 - v5 @kind int;
  #L2d40e2.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d40e8.  goto L2d411a;
  #L2d40ea.  v0:= v0 * 3;
  #L2d40ee.  v0:= v0 / 2;
  #L2d40f2.  v0:= v0 + 1;
  #L2d40f6.  v0:= new `int`[v0];
  #L2d40fa.  v2:= 0I;
  #L2d40fc.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d4102.  v1:= v4.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d4106.  v2:= v5 + 1;
  #L2d410a.  v3:= v4.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d410e.  v3:= v3 - v5 @kind int;
  #L2d4110.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d4116.  v4.`e.e.a.b.f.q.u.c` @type ^`int`[] := v0 @kind object;
  #L2d411a.  v0:= v4.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d411e.  v0[v5]:= v6;
  #L2d4122.  v5:= v4.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d4126.  v5:= v5 + 1;
  #L2d412a.  v4.`e.e.a.b.f.q.u.d` @type ^`int` := v5;
  #L2d412e.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L2d4132.  v5:= v5 + 1;
  #L2d4136.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L2d413a.  return @kind void;
  #L2d413c.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L2d4140.  call temp:= `i`(v4, v5) @signature `Le/e/a/b/f/q/u;.i:(I)Ljava/lang/String;` @kind direct;
  #L2d4146.  v5:= temp @kind object;
  #L2d4148.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d414e.  throw v6;
}
procedure `boolean` `add`(`e.e.a.b.f.q.u` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/q/u;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L2d3cac.  v1:= (`java.lang.Integer`) v1 @kind object;
  #L2d3cb0.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2d3cb6.  v1:= temp;
  #L2d3cb8.  call `d`(v0, v1) @signature `Le/e/a/b/f/q/u;.d:(I)V` @kind virtual;
  #L2d3cbe.  v1:= 1I;
  #L2d3cc0.  return v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.q.u` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/q/u;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d3cd4.  call `d`(v5) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L2d3cda.  call temp:= `a`(v6) @signature `Le/e/a/b/f/q/b0;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2d3ce0.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.q.u` @kind boolean;
  #L2d3ce4.  if v0 != 0 then goto L2d3cf2;
  #L2d3ce8.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/q/tu;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L2d3cee.  v6:= temp;
  #L2d3cf0.  return v6;
  #L2d3cf2.  v6:= (`e.e.a.b.f.q.u`) v6 @kind object;
  #L2d3cf6.  v0:= v6.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d3cfa.  v1:= 0I;
  #L2d3cfc.  if v0 != 0 then goto L2d3d02;
  #L2d3d00.  return v1;
  #L2d3d02.  v2:= v5.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d3d06.  v3:= 2147483647I;
  #L2d3d0c.  v3:= v3 - v2 @kind int;
  #L2d3d0e.  if v3 < v0 then goto L2d3d52;
  #L2d3d12.  v2:= v2 + v0 @kind int;
  #L2d3d14.  v0:= v5.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d3d18.  v3:= length @variable v0;
  #L2d3d1a.  if v2 <= v3 then goto L2d3d2a;
  #L2d3d1e.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L2d3d24.  v0:= temp @kind object;
  #L2d3d26.  v5.`e.e.a.b.f.q.u.c` @type ^`int`[] := v0 @kind object;
  #L2d3d2a.  v0:= v6.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d3d2e.  v3:= v5.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d3d32.  v4:= v5.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d3d36.  v6:= v6.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d3d3a.  call `arraycopy`(v0, v1, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d3d40.  v5.`e.e.a.b.f.q.u.d` @type ^`int` := v2;
  #L2d3d44.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L2d3d48.  v0:= 1I;
  #L2d3d4a.  v6:= v6 + v0 @kind int;
  #L2d3d4c.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L2d3d50.  return v0;
  #L2d3d52.  v6:= new `java.lang.OutOfMemoryError`;
  #L2d3d56.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L2d3d5c.  throw v6;
}
procedure `e.e.a.b.f.q.y` `c`(`e.e.a.b.f.q.u` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/q/u;.c:(I)Le/e/a/b/f/q/y;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2d3e18.  v0:= v2.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d3e1c.  if v3 < v0 then goto L2d3e3c;
  #L2d3e20.  v0:= new `e.e.a.b.f.q.u`;
  #L2d3e24.  v1:= v2.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d3e28.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L2d3e2e.  v3:= temp @kind object;
  #L2d3e30.  v1:= v2.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d3e34.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/q/u;.<init>:([II)V` @kind direct;
  #L2d3e3a.  return v0 @kind object;
  #L2d3e3c.  v3:= new `java.lang.IllegalArgumentException`;
  #L2d3e40.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L2d3e46.  throw v3;
}
procedure `boolean` `contains`(`e.e.a.b.f.q.u` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/q/u;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2d3d70.  call temp:= `indexOf`(v1, v2) @signature `Le/e/a/b/f/q/u;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L2d3d76.  v2:= temp;
  #L2d3d78.  v0:= -1I;
  #L2d3d7a.  if v2 == v0 then goto L2d3d82;
  #L2d3d7e.  v2:= 1I;
  #L2d3d80.  return v2;
  #L2d3d82.  v2:= 0I;
  #L2d3d84.  return v2;
}
procedure `void` `d`(`e.e.a.b.f.q.u` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/q/u;.d:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2d41b4.  call `d`(v4) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L2d41ba.  v0:= v4.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d41be.  v1:= v4.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d41c2.  v2:= length @variable v1;
  #L2d41c4.  if v0 != v2 then goto L2d41e4;
  #L2d41c8.  v2:= v0 * 3;
  #L2d41cc.  v2:= v2 / 2;
  #L2d41d0.  v2:= v2 + 1;
  #L2d41d4.  v2:= new `int`[v2];
  #L2d41d8.  v3:= 0I;
  #L2d41da.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d41e0.  v4.`e.e.a.b.f.q.u.c` @type ^`int`[] := v2 @kind object;
  #L2d41e4.  v0:= v4.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d41e8.  v1:= v4.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d41ec.  v2:= v1 + 1;
  #L2d41f0.  v4.`e.e.a.b.f.q.u.d` @type ^`int` := v2;
  #L2d41f4.  v0[v1]:= v5;
  #L2d41f8.  return @kind void;
}
procedure `e.e.a.b.f.q.a0` `e`(`e.e.a.b.f.q.u` v0 @kind this, `int` v1 ) @signature `Le/e/a/b/f/q/u;.e:(I)Le/e/a/b/f/q/a0;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L2d3e58.  call temp:= `c`(v0, v1) @signature `Le/e/a/b/f/q/u;.c:(I)Le/e/a/b/f/q/y;` @kind virtual;
  #L2d3e5e.  v1:= temp @kind object;
  #L2d3e60.  return v1 @kind object;
}
procedure `boolean` `equals`(`e.e.a.b.f.q.u` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/q/u;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d3d98.  v0:= 1I;
  #L2d3d9a.  if v5 != v6 then goto L2d3da0;
  #L2d3d9e.  return v0;
  #L2d3da0.  v1:= instanceof @variable v6 @type ^`e.e.a.b.f.q.u` @kind boolean;
  #L2d3da4.  if v1 != 0 then goto L2d3db2;
  #L2d3da8.  call temp:= `equals`(v5, v6) @signature `Le/e/a/b/f/q/tu;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L2d3dae.  v6:= temp;
  #L2d3db0.  return v6;
  #L2d3db2.  v6:= (`e.e.a.b.f.q.u`) v6 @kind object;
  #L2d3db6.  v1:= v5.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d3dba.  v2:= v6.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d3dbe.  v3:= 0I;
  #L2d3dc0.  if v1 == v2 then goto L2d3dc6;
  #L2d3dc4.  return v3;
  #L2d3dc6.  v6:= v6.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d3dca.  v1:= 0I;
  #L2d3dcc.  v2:= v5.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d3dd0.  if v1 >= v2 then goto L2d3dec;
  #L2d3dd4.  v2:= v5.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d3dd8.  v2:= v2[v1];
  #L2d3ddc.  v4:= v6[v1];
  #L2d3de0.  if v2 == v4 then goto L2d3de6;
  #L2d3de4.  return v3;
  #L2d3de6.  v1:= v1 + 1;
  #L2d3dea.  goto L2d3dcc;
  #L2d3dec.  return v0;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.q.u` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/q/u;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L2d3f28.  call `f`(v1, v2) @signature `Le/e/a/b/f/q/u;.f:(I)V` @kind direct;
  #L2d3f2e.  v0:= v1.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d3f32.  v2:= v0[v2];
  #L2d3f36.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2d3f3c.  v2:= temp @kind object;
  #L2d3f3e.  return v2 @kind object;
}
procedure `int` `h`(`e.e.a.b.f.q.u` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/q/u;.h:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2d3f08.  call `f`(v1, v2) @signature `Le/e/a/b/f/q/u;.f:(I)V` @kind direct;
  #L2d3f0e.  v0:= v1.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d3f12.  v2:= v0[v2];
  #L2d3f16.  return v2;
}
procedure `int` `hashCode`(`e.e.a.b.f.q.u` v3 @kind this) @signature `Le/e/a/b/f/q/u;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2d3e74.  v0:= 1I;
  #L2d3e76.  v1:= 0I;
  #L2d3e78.  v2:= v3.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d3e7c.  if v1 >= v2 then goto L2d3e94;
  #L2d3e80.  v0:= v0 * 31;
  #L2d3e84.  v2:= v3.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d3e88.  v2:= v2[v1];
  #L2d3e8c.  v0:= v0 + v2 @kind int;
  #L2d3e8e.  v1:= v1 + 1;
  #L2d3e92.  goto L2d3e78;
  #L2d3e94.  return v0;
}
procedure `int` `indexOf`(`e.e.a.b.f.q.u` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/q/u;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2d3ea8.  v0:= instanceof @variable v5 @type ^`java.lang.Integer` @kind boolean;
  #L2d3eac.  v1:= -1I;
  #L2d3eae.  if v0 != 0 then goto L2d3eb4;
  #L2d3eb2.  return v1;
  #L2d3eb4.  v5:= (`java.lang.Integer`) v5 @kind object;
  #L2d3eb8.  call temp:= `intValue`(v5) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2d3ebe.  v5:= temp;
  #L2d3ec0.  v0:= v4.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d3ec4.  v2:= 0I;
  #L2d3ec6.  if v2 >= v0 then goto L2d3ede;
  #L2d3eca.  v3:= v4.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d3ece.  v3:= v3[v2];
  #L2d3ed2.  if v3 != v5 then goto L2d3ed8;
  #L2d3ed6.  return v2;
  #L2d3ed8.  v2:= v2 + 1;
  #L2d3edc.  goto L2d3ec6;
  #L2d3ede.  return v1;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.q.u` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/q/u;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2d3f50.  call `d`(v4) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L2d3f56.  call `f`(v4, v5) @signature `Le/e/a/b/f/q/u;.f:(I)V` @kind direct;
  #L2d3f5c.  v0:= v4.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d3f60.  v1:= v0[v5];
  #L2d3f64.  v2:= v4.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d3f68.  v3:= v2 + -1;
  #L2d3f6c.  if v5 >= v3 then goto L2d3f80;
  #L2d3f70.  v3:= v5 + 1;
  #L2d3f74.  v2:= v2 - v5 @kind int;
  #L2d3f76.  v2:= v2 + -1;
  #L2d3f7a.  call `arraycopy`(v0, v3, v0, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d3f80.  v5:= v4.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d3f84.  v5:= v5 + -1;
  #L2d3f88.  v4.`e.e.a.b.f.q.u.d` @type ^`int` := v5;
  #L2d3f8c.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L2d3f90.  v5:= v5 + 1;
  #L2d3f94.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L2d3f98.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2d3f9e.  v5:= temp @kind object;
  #L2d3fa0.  return v5 @kind object;
}
procedure `void` `removeRange`(`e.e.a.b.f.q.u` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/q/u;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L2d4160.  call `d`(v2) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L2d4166.  if v4 < v3 then goto L2d4194;
  #L2d416a.  v0:= v2.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d416e.  v1:= v2.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d4172.  v1:= v1 - v4 @kind int;
  #L2d4174.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d417a.  v0:= v2.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d417e.  v4:= v4 - v3 @kind int;
  #L2d4180.  v0:= v0 - v4 @kind int;
  #L2d4182.  v2.`e.e.a.b.f.q.u.d` @type ^`int` := v0;
  #L2d4186.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L2d418a.  v3:= v3 + 1;
  #L2d418e.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L2d4192.  return @kind void;
  #L2d4194.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L2d4198.  v4:= "toIndex < fromIndex" @kind object;
  #L2d419c.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d41a2.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.q.u` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/q/u;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2d3fb4.  v4:= (`java.lang.Integer`) v4 @kind object;
  #L2d3fb8.  call temp:= `intValue`(v4) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2d3fbe.  v4:= temp;
  #L2d3fc0.  call `d`(v2) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L2d3fc6.  call `f`(v2, v3) @signature `Le/e/a/b/f/q/u;.f:(I)V` @kind direct;
  #L2d3fcc.  v0:= v2.`e.e.a.b.f.q.u.c` @type ^`int`[] @kind object;
  #L2d3fd0.  v1:= v0[v3];
  #L2d3fd4.  v0[v3]:= v4;
  #L2d3fd8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2d3fde.  v3:= temp @kind object;
  #L2d3fe0.  return v3 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.q.u` v1 @kind this) @signature `Le/e/a/b/f/q/u;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2d3ef0.  v0:= v1.`e.e.a.b.f.q.u.d` @type ^`int`;
  #L2d3ef4.  return v0;
}
