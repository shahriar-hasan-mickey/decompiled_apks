record `e.e.a.b.f.q.e5` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.AbstractCollection` @kind class, `java.io.Serializable` @kind interface {
}
global `java.lang.Object`[] `@@e.e.a.b.f.q.e5.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/q/e5;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2e2cf8.  v0:= 0I;
  #L2e2cfa.  v0:= new `java.lang.Object`[v0];
  #L2e2cfe.  `@@e.e.a.b.f.q.e5.b` @type ^`java.lang.Object`[] := v0 @kind object;
  #L2e2d02.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.q.e5` v0 @kind this) @signature `Le/e/a/b/f/q/e5;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2e2d14.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L2e2d1a.  return @kind void;
}
procedure `int` `a`(`e.e.a.b.f.q.e5` v0 @kind this, `java.lang.Object`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/q/e5;.a:([Ljava/lang/Object;I)I` @AccessFlag  {
    temp;

  #L2e2c10.  v1:= 0I;
  #L2e2c12.  throw v1;
}
procedure `boolean` `add`(`e.e.a.b.f.q.e5` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/q/e5;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2e2b4c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2e2b50.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2e2b56.  throw v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.q.e5` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/q/e5;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2e2b68.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2e2b6c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2e2b72.  throw v1;
}
procedure `int` `c`(`e.e.a.b.f.q.e5` v1 @kind this) @signature `Le/e/a/b/f/q/e5;.c:()I` @AccessFlag  {
    temp;
    v0;

  #L2e2bf4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2e2bf8.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2e2bfe.  throw v0;
}
procedure `void` `clear`(`e.e.a.b.f.q.e5` v1 @kind this) @signature `Le/e/a/b/f/q/e5;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e2d2c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2e2d30.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2e2d36.  throw v0;
}
procedure `boolean` `contains`(`java.lang.Object` v0 @kind object) @signature `Le/e/a/b/f/q/e5;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `d`(`e.e.a.b.f.q.e5` v1 @kind this) @signature `Le/e/a/b/f/q/e5;.d:()I` @AccessFlag  {
    temp;
    v0;

  #L2e2bd8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2e2bdc.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2e2be2.  throw v0;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.q.e5` v1 @kind this) @signature `Le/e/a/b/f/q/e5;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2e2cdc.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/q/e5;.zza:()Le/e/a/b/f/q/l6;` @kind virtual;
  #L2e2ce2.  v0:= temp @kind object;
  #L2e2ce4.  return v0 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.q.e5` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/q/e5;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2e2b84.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2e2b88.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2e2b8e.  throw v1;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.q.e5` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/q/e5;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2e2ba0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2e2ba4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2e2baa.  throw v1;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.q.e5` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/q/e5;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2e2bbc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2e2bc0.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2e2bc6.  throw v1;
}
procedure `java.lang.Object`[] `toArray`(`e.e.a.b.f.q.e5` v1 @kind this) @signature `Le/e/a/b/f/q/e5;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e2c24.  v0:= `@@e.e.a.b.f.q.e5.b` @type ^`java.lang.Object`[] @kind object;
  #L2e2c28.  call temp:= `toArray`(v1, v0) @signature `Le/e/a/b/f/q/e5;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L2e2c2e.  v0:= temp @kind object;
  #L2e2c30.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`e.e.a.b.f.q.e5` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Le/e/a/b/f/q/e5;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2e2c44.  v0:= 0I;
  #L2e2c46.  if v4 == 0 then goto L2e2cb6;
  #L2e2c4a.  call temp:= `size`(v3) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2e2c50.  v1:= temp;
  #L2e2c52.  v2:= length @variable v4;
  #L2e2c54.  if v2 >= v1 then goto L2e2ca4;
  #L2e2c58.  call temp:= `zzb`(v3) @signature `Le/e/a/b/f/q/e5;.zzb:()[Ljava/lang/Object;` @kind virtual;
  #L2e2c5e.  v0:= temp @kind object;
  #L2e2c60.  if v0 != 0 then goto L2e2c82;
  #L2e2c64.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2e2c6a.  v4:= temp @kind object;
  #L2e2c6c.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L2e2c72.  v4:= temp @kind object;
  #L2e2c74.  call temp:= `newInstance`(v4, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L2e2c7a.  v4:= temp @kind object;
  #L2e2c7c.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L2e2c80.  goto L2e2cac;
  #L2e2c82.  call temp:= `d`(v3) @signature `Le/e/a/b/f/q/e5;.d:()I` @kind virtual;
  #L2e2c88.  v1:= temp;
  #L2e2c8a.  call temp:= `c`(v3) @signature `Le/e/a/b/f/q/e5;.c:()I` @kind virtual;
  #L2e2c90.  v2:= temp;
  #L2e2c92.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2e2c98.  v4:= temp @kind object;
  #L2e2c9a.  call temp:= `copyOfRange`(v0, v1, v2, v4) @signature `Ljava/util/Arrays;.copyOfRange:([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;` @kind static;
  #L2e2ca0.  v4:= temp @kind object;
  #L2e2ca2.  return v4 @kind object;
  #L2e2ca4.  if v2 <= v1 then goto L2e2cac;
  #L2e2ca8.  v4[v1]:= v0 @kind object;
  #L2e2cac.  v0:= 0I;
  #L2e2cae.  call temp:= `a`(v3, v4, v0) @signature `Le/e/a/b/f/q/e5;.a:([Ljava/lang/Object;I)I` @kind virtual;
  #L2e2cb4.  return v4 @kind object;
  #L2e2cb6.  throw v0;
}
procedure `e.e.a.b.f.q.l6` `zza`() @signature `Le/e/a/b/f/q/e5;.zza:()Le/e/a/b/f/q/l6;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object`[] `zzb`(`e.e.a.b.f.q.e5` v1 @kind this) @signature `Le/e/a/b/f/q/e5;.zzb:()[Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L2e2cc8.  v0:= 0I;
  #L2e2cca.  return v0 @kind object;
}
