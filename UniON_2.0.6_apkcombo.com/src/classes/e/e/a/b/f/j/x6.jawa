record `e.e.a.b.f.j.x6` @kind class @AccessFlag FINAL extends `e.e.a.b.f.j.s6` @kind class {
}
procedure `void` `<init>`(`e.e.a.b.f.j.x6` v0 @kind this) @signature `Le/e/a/b/f/j/x6;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L23385c.  call `<init>`(v0) @signature `Le/e/a/b/f/j/s6;.<init>:()V` @kind direct;
  #L233862.  return @kind void;
}
procedure `int` `a`(`byte`[] v2 @kind object, `int` v3 , `long` v4 , `int` v6 ) @signature `Le/e/a/b/f/j/x6;.a:([BIJI)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L233348.  if v6 == 0 then goto L233396;
  #L23334c.  v0:= 1I;
  #L23334e.  if v6 == v0 then goto L233384;
  #L233352.  v0:= 2I;
  #L233354.  if v6 != v0 then goto L233378;
  #L233358.  call temp:= `a`(v2, v4) @signature `Le/e/a/b/f/j/r6;.a:([BJ)B` @kind static;
  #L23335e.  v6:= temp;
  #L233360.  v0:= 1L;
  #L233364.  v4:= v4 + v0 @kind long;
  #L233366.  call temp:= `a`(v2, v4) @signature `Le/e/a/b/f/j/r6;.a:([BJ)B` @kind static;
  #L23336c.  v2:= temp;
  #L23336e.  call temp:= `a`(v3, v6, v2) @signature `Le/e/a/b/f/j/t6;.a:(III)I` @kind static;
  #L233374.  v2:= temp;
  #L233376.  return v2;
  #L233378.  v2:= new `java.lang.AssertionError`;
  #L23337c.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L233382.  throw v2;
  #L233384.  call temp:= `a`(v2, v4) @signature `Le/e/a/b/f/j/r6;.a:([BJ)B` @kind static;
  #L23338a.  v2:= temp;
  #L23338c.  call temp:= `a`(v3, v2) @signature `Le/e/a/b/f/j/t6;.a:(II)I` @kind static;
  #L233392.  v2:= temp;
  #L233394.  return v2;
  #L233396.  call temp:= `a`(v3) @signature `Le/e/a/b/f/j/t6;.a:(I)I` @kind static;
  #L23339c.  v2:= temp;
  #L23339e.  return v2;
}
procedure `int` `a`(`e.e.a.b.f.j.x6` v15 @kind this, `int` v16 , `byte`[] v17 @kind object, `int` v18 , `int` v19 ) @signature `Le/e/a/b/f/j/x6;.a:(I[BII)I` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L2333b0.  v0:= v17 @kind object;
  #L2333b4.  v1:= v18;
  #L2333b8.  v2:= v19;
  #L2333bc.  v3:= v1 ^| v2 @kind int;
  #L2333c0.  v4:= length @variable v0;
  #L2333c2.  v4:= v4 - v2 @kind int;
  #L2333c4.  v3:= v3 ^| v4 @kind int;
  #L2333c6.  v4:= 2I;
  #L2333c8.  v5:= 3I;
  #L2333ca.  v6:= 0I;
  #L2333cc.  if v3 < 0 then goto L233524;
  #L2333d0.  v7:= (`long`) v1 @kind i2l;
  #L2333d2.  v1:= (`long`) v2 @kind i2l;
  #L2333d4.  v1:= v1 - v7 @kind long;
  #L2333d6.  v2:= (`int`) v1 @kind l2i;
  #L2333d8.  v1:= 16I;
  #L2333dc.  v9:= 1L;
  #L2333e0.  if v2 >= v1 then goto L2333e8;
  #L2333e4.  v1:= 0I;
  #L2333e6.  goto L23340c;
  #L2333e8.  v11:= v7 @kind wide;
  #L2333ea.  v1:= 0I;
  #L2333ec.  if v1 >= v2 then goto L23340a;
  #L2333f0.  v13:= v11 + v9 @kind long;
  #L2333f4.  call temp:= `a`(v0, v11) @signature `Le/e/a/b/f/j/r6;.a:([BJ)B` @kind static;
  #L2333fa.  v3:= temp;
  #L2333fc.  if v3 >= 0 then goto L233402;
  #L233400.  goto L23340c;
  #L233402.  v1:= v1 + 1;
  #L233406.  v11:= v13 @kind wide;
  #L233408.  goto L2333ec;
  #L23340a.  v1:= v2;
  #L23340c.  v2:= v2 - v1 @kind int;
  #L23340e.  v11:= (`long`) v1 @kind i2l;
  #L233410.  v7:= v7 + v11 @kind long;
  #L233412.  v1:= 0I;
  #L233414.  if v2 <= 0 then goto L233430;
  #L233418.  v11:= v7 + v9 @kind long;
  #L23341c.  call temp:= `a`(v0, v7) @signature `Le/e/a/b/f/j/r6;.a:([BJ)B` @kind static;
  #L233422.  v1:= temp;
  #L233424.  if v1 < 0 then goto L233432;
  #L233428.  v2:= v2 + -1;
  #L23342c.  v7:= v11 @kind wide;
  #L23342e.  goto L233414;
  #L233430.  v11:= v7 @kind wide;
  #L233432.  if v2 != 0 then goto L233438;
  #L233436.  return v6;
  #L233438.  v2:= v2 + -1;
  #L23343c.  v3:= -32I;
  #L233440.  v7:= -65I;
  #L233444.  v8:= -1I;
  #L233446.  if v1 >= v3 then goto L233474;
  #L23344a.  if v2 != 0 then goto L233450;
  #L23344e.  return v1;
  #L233450.  v2:= v2 + -1;
  #L233454.  v3:= -62I;
  #L233458.  if v1 < v3 then goto L233472;
  #L23345c.  v13:= v11 + v9 @kind long;
  #L233460.  call temp:= `a`(v0, v11) @signature `Le/e/a/b/f/j/r6;.a:([BJ)B` @kind static;
  #L233466.  v1:= temp;
  #L233468.  if v1 <= v7 then goto L23346e;
  #L23346c.  goto L233472;
  #L23346e.  v7:= v13 @kind wide;
  #L233470.  goto L233412;
  #L233472.  return v8;
  #L233474.  v13:= -16I;
  #L233478.  if v1 >= v13 then goto L2334ce;
  #L23347c.  if v2 >= v4 then goto L23348a;
  #L233480.  call temp:= `a`(v0, v1, v11, v2) @signature `Le/e/a/b/f/j/x6;.a:([BIJI)I` @kind static;
  #L233486.  v0:= temp;
  #L233488.  return v0;
  #L23348a.  v2:= v2 + -2;
  #L23348e.  v13:= v11 + v9 @kind long;
  #L233492.  call temp:= `a`(v0, v11) @signature `Le/e/a/b/f/j/r6;.a:([BJ)B` @kind static;
  #L233498.  v11:= temp;
  #L23349a.  if v11 > v7 then goto L2334cc;
  #L23349e.  v12:= -96I;
  #L2334a2.  if v1 != v3 then goto L2334aa;
  #L2334a6.  if v11 < v12 then goto L2334cc;
  #L2334aa.  v3:= -19I;
  #L2334ae.  if v1 != v3 then goto L2334b6;
  #L2334b2.  if v11 >= v12 then goto L2334cc;
  #L2334b6.  v11:= v13 + v9 @kind long;
  #L2334ba.  call temp:= `a`(v0, v13) @signature `Le/e/a/b/f/j/r6;.a:([BJ)B` @kind static;
  #L2334c0.  v1:= temp;
  #L2334c2.  if v1 <= v7 then goto L2334c8;
  #L2334c6.  goto L2334cc;
  #L2334c8.  v7:= v11 @kind wide;
  #L2334ca.  goto L233412;
  #L2334cc.  return v8;
  #L2334ce.  if v2 >= v5 then goto L2334dc;
  #L2334d2.  call temp:= `a`(v0, v1, v11, v2) @signature `Le/e/a/b/f/j/x6;.a:([BIJI)I` @kind static;
  #L2334d8.  v0:= temp;
  #L2334da.  return v0;
  #L2334dc.  v2:= v2 + -3;
  #L2334e0.  v13:= v11 + v9 @kind long;
  #L2334e4.  call temp:= `a`(v0, v11) @signature `Le/e/a/b/f/j/r6;.a:([BJ)B` @kind static;
  #L2334ea.  v3:= temp;
  #L2334ec.  if v3 > v7 then goto L233522;
  #L2334f0.  v1:= v1 ^< 28;
  #L2334f4.  v3:= v3 + 112;
  #L2334f8.  v1:= v1 + v3 @kind int;
  #L2334fa.  v1:= v1 ^> 30;
  #L2334fe.  if v1 != 0 then goto L233522;
  #L233502.  v11:= v13 + v9 @kind long;
  #L233506.  call temp:= `a`(v0, v13) @signature `Le/e/a/b/f/j/r6;.a:([BJ)B` @kind static;
  #L23350c.  v1:= temp;
  #L23350e.  if v1 > v7 then goto L233522;
  #L233512.  v13:= v11 + v9 @kind long;
  #L233516.  call temp:= `a`(v0, v11) @signature `Le/e/a/b/f/j/r6;.a:([BJ)B` @kind static;
  #L23351c.  v1:= temp;
  #L23351e.  if v1 <= v7 then goto L23346e;
  #L233522.  return v8;
  #L233524.  v3:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L233528.  v5:= new `java.lang.Object`[v5];
  #L23352c.  v0:= length @variable v0;
  #L23352e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L233534.  v0:= temp @kind object;
  #L233536.  v5[v6]:= v0 @kind object;
  #L23353a.  call temp:= `valueOf`(v18) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L233540.  v0:= temp @kind object;
  #L233542.  v1:= 1I;
  #L233544.  v5[v1]:= v0 @kind object;
  #L233548.  call temp:= `valueOf`(v19) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L23354e.  v0:= temp @kind object;
  #L233550.  v5[v4]:= v0 @kind object;
  #L233554.  v0:= "Array length=%d, index=%d, limit=%d" @kind object;
  #L233558.  call temp:= `format`(v0, v5) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L23355e.  v0:= temp @kind object;
  #L233560.  call `<init>`(v3, v0) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L233566.  throw v3;
}
procedure `int` `a`(`e.e.a.b.f.j.x6` v22 @kind this, `java.lang.CharSequence` v23 @kind object, `byte`[] v24 @kind object, `int` v25 , `int` v26 ) @signature `Le/e/a/b/f/j/x6;.a:(Ljava/lang/CharSequence;[BII)I` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L233578.  v0:= v23 @kind object;
  #L23357c.  v1:= v24 @kind object;
  #L233580.  v2:= v25;
  #L233584.  v3:= v26;
  #L233588.  v4:= (`long`) v2 @kind i2l;
  #L23358a.  v6:= (`long`) v3 @kind i2l;
  #L23358c.  v6:= v6 + v4 @kind long;
  #L23358e.  call temp:= `length`(v23) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L233594.  v8:= temp;
  #L233596.  v9:= " at index " @kind object;
  #L23359a.  v10:= "Failed writing " @kind object;
  #L23359e.  if v8 > v3 then goto L233804;
  #L2335a2.  v11:= length @variable v1;
  #L2335a4.  v11:= v11 - v3 @kind int;
  #L2335a6.  if v11 < v2 then goto L233804;
  #L2335aa.  v2:= 0I;
  #L2335ac.  v3:= 128I;
  #L2335b0.  v11:= 1L;
  #L2335b4.  if v2 >= v8 then goto L2335d6;
  #L2335b8.  call temp:= `charAt`(v0, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2335be.  v13:= temp;
  #L2335c0.  if v13 >= v3 then goto L2335d6;
  #L2335c4.  v11:= v11 + v4 @kind long;
  #L2335c6.  v3:= (`byte`) v13 @kind i2b;
  #L2335c8.  call `a`(v1, v4, v3) @signature `Le/e/a/b/f/j/r6;.a:([BJB)V` @kind static;
  #L2335ce.  v2:= v2 + 1;
  #L2335d2.  v4:= v11 @kind wide;
  #L2335d4.  goto L2335ac;
  #L2335d6.  if v2 != v8 then goto L2335de;
  #L2335da.  v0:= (`int`) v4 @kind l2i;
  #L2335dc.  return v0;
  #L2335de.  if v2 >= v8 then goto L233800;
  #L2335e2.  call temp:= `charAt`(v0, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2335e8.  v13:= temp;
  #L2335ea.  if v13 >= v3 then goto L23360e;
  #L2335ee.  v14:= lcmp(v4, v6);
  #L2335f2.  if v14 >= 0 then goto L23360e;
  #L2335f6.  v14:= v4 + v11 @kind long;
  #L2335fa.  v13:= (`byte`) v13 @kind i2b;
  #L2335fc.  call `a`(v1, v4, v13) @signature `Le/e/a/b/f/j/r6;.a:([BJB)V` @kind static;
  #L233602.  v4:= v11 @kind wide;
  #L233604.  v12:= v14 @kind wide;
  #L233606.  v11:= 128I;
  #L23360a.  goto L23376e;
  #L23360e.  v14:= 2048I;
  #L233612.  if v13 >= v14 then goto L233662;
  #L233616.  v14:= 2L;
  #L23361a.  v14:= v6 - v14 @kind long;
  #L23361e.  v16:= lcmp(v4, v14);
  #L233622.  if v16 > 0 then goto L233662;
  #L233626.  v14:= v4 + v11 @kind long;
  #L23362a.  v3:= v13 ^>> 6;
  #L23362e.  v3:= v3 ^| 960;
  #L233632.  v3:= (`byte`) v3 @kind i2b;
  #L233634.  call `a`(v1, v4, v3) @signature `Le/e/a/b/f/j/r6;.a:([BJB)V` @kind static;
  #L23363a.  v3:= v14 + v11 @kind long;
  #L23363e.  v5:= v13 ^& 63;
  #L233642.  v13:= 128I;
  #L233646.  v5:= v5 ^| v13 @kind int;
  #L233648.  v5:= (`byte`) v5 @kind i2b;
  #L23364a.  call `a`(v1, v14, v5) @signature `Le/e/a/b/f/j/r6;.a:([BJB)V` @kind static;
  #L233650.  v20:= v11 @kind wide;
  #L233654.  v11:= 128I;
  #L233658.  v12:= v3 @kind wide;
  #L23365a.  v4:= v20 @kind wide;
  #L23365e.  goto L23376e;
  #L233662.  v3:= 57343I;
  #L233668.  v14:= 55296I;
  #L23366e.  if v13 < v14 then goto L233676;
  #L233672.  if v3 >= v13 then goto L2336d4;
  #L233676.  v15:= 3L;
  #L23367a.  v15:= v6 - v15 @kind long;
  #L23367e.  v17:= lcmp(v4, v15);
  #L233682.  if v17 > 0 then goto L2336d4;
  #L233686.  v14:= v4 + v11 @kind long;
  #L23368a.  v3:= v13 ^>> 12;
  #L23368e.  v3:= v3 ^| 480;
  #L233692.  v3:= (`byte`) v3 @kind i2b;
  #L233694.  call `a`(v1, v4, v3) @signature `Le/e/a/b/f/j/r6;.a:([BJB)V` @kind static;
  #L23369a.  v3:= v14 + v11 @kind long;
  #L23369e.  v5:= v13 ^>> 6;
  #L2336a2.  v5:= v5 ^& 63;
  #L2336a6.  v11:= 128I;
  #L2336aa.  v5:= v5 ^| v11 @kind int;
  #L2336ac.  v5:= (`byte`) v5 @kind i2b;
  #L2336ae.  call `a`(v1, v14, v5) @signature `Le/e/a/b/f/j/r6;.a:([BJB)V` @kind static;
  #L2336b4.  v14:= 1L;
  #L2336b8.  v18:= v3 + v14 @kind long;
  #L2336bc.  v5:= v13 ^& 63;
  #L2336c0.  v5:= v5 ^| v11 @kind int;
  #L2336c2.  v5:= (`byte`) v5 @kind i2b;
  #L2336c4.  call `a`(v1, v3, v5) @signature `Le/e/a/b/f/j/r6;.a:([BJB)V` @kind static;
  #L2336ca.  v12:= v18 @kind wide;
  #L2336ce.  v4:= 1L;
  #L2336d2.  goto L233606;
  #L2336d4.  v11:= 4L;
  #L2336d8.  v11:= v6 - v11 @kind long;
  #L2336dc.  v15:= lcmp(v4, v11);
  #L2336e0.  if v15 > 0 then goto L233796;
  #L2336e4.  v3:= v2 + 1;
  #L2336e8.  if v3 == v8 then goto L233786;
  #L2336ec.  call temp:= `charAt`(v0, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2336f2.  v2:= temp;
  #L2336f4.  call temp:= `isSurrogatePair`(v13, v2) @signature `Ljava/lang/Character;.isSurrogatePair:(CC)Z` @kind static;
  #L2336fa.  v11:= temp;
  #L2336fc.  if v11 == 0 then goto L233784;
  #L233700.  call temp:= `toCodePoint`(v13, v2) @signature `Ljava/lang/Character;.toCodePoint:(CC)I` @kind static;
  #L233706.  v2:= temp;
  #L233708.  v11:= 1L;
  #L23370c.  v13:= v4 + v11 @kind long;
  #L233710.  v15:= v2 ^>> 18;
  #L233714.  v15:= v15 ^| 240;
  #L233718.  v15:= (`byte`) v15 @kind i2b;
  #L23371a.  call `a`(v1, v4, v15) @signature `Le/e/a/b/f/j/r6;.a:([BJB)V` @kind static;
  #L233720.  v4:= v13 + v11 @kind long;
  #L233724.  v15:= v2 ^>> 12;
  #L233728.  v15:= v15 ^& 63;
  #L23372c.  v11:= 128I;
  #L233730.  v12:= v15 ^| 128;
  #L233734.  v12:= (`byte`) v12 @kind i2b;
  #L233736.  call `a`(v1, v13, v12) @signature `Le/e/a/b/f/j/r6;.a:([BJB)V` @kind static;
  #L23373c.  v12:= 1L;
  #L233740.  v14:= v4 + v12 @kind long;
  #L233744.  v16:= v2 ^>> 6;
  #L233748.  v12:= v16 ^& 63;
  #L23374c.  v12:= v12 ^| v11 @kind int;
  #L23374e.  v12:= (`byte`) v12 @kind i2b;
  #L233750.  call `a`(v1, v4, v12) @signature `Le/e/a/b/f/j/r6;.a:([BJB)V` @kind static;
  #L233756.  v4:= 1L;
  #L23375a.  v12:= v14 + v4 @kind long;
  #L23375e.  v2:= v2 ^& 63;
  #L233762.  v2:= v2 ^| v11 @kind int;
  #L233764.  v2:= (`byte`) v2 @kind i2b;
  #L233766.  call `a`(v1, v14, v2) @signature `Le/e/a/b/f/j/r6;.a:([BJB)V` @kind static;
  #L23376c.  v2:= v3;
  #L23376e.  v2:= v2 + 1;
  #L233772.  v3:= 128I;
  #L233776.  v20:= v4 @kind wide;
  #L23377a.  v4:= v12 @kind wide;
  #L23377c.  v11:= v20 @kind wide;
  #L233780.  goto L2335de;
  #L233784.  v2:= v3;
  #L233786.  v0:= new `e.e.a.b.f.j.u6`;
  #L23378a.  v2:= v2 + -1;
  #L23378e.  call `<init>`(v0, v2, v8) @signature `Le/e/a/b/f/j/u6;.<init>:(II)V` @kind direct;
  #L233794.  throw v0;
  #L233796.  if v14 > v13 then goto L2337c6;
  #L23379a.  if v13 > v3 then goto L2337c6;
  #L23379e.  v1:= v2 + 1;
  #L2337a2.  if v1 == v8 then goto L2337ba;
  #L2337a6.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2337ac.  v0:= temp;
  #L2337ae.  call temp:= `isSurrogatePair`(v13, v0) @signature `Ljava/lang/Character;.isSurrogatePair:(CC)Z` @kind static;
  #L2337b4.  v0:= temp;
  #L2337b6.  if v0 != 0 then goto L2337c6;
  #L2337ba.  v0:= new `e.e.a.b.f.j.u6`;
  #L2337be.  call `<init>`(v0, v2, v8) @signature `Le/e/a/b/f/j/u6;.<init>:(II)V` @kind direct;
  #L2337c4.  throw v0;
  #L2337c6.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L2337ca.  v1:= 46I;
  #L2337ce.  v2:= new `java.lang.StringBuilder`;
  #L2337d2.  call `<init>`(v2, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2337d8.  call temp:= `append`(v2, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2337de.  call temp:= `append`(v2, v13) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2337e4.  call temp:= `append`(v2, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2337ea.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2337f0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2337f6.  v1:= temp @kind object;
  #L2337f8.  call `<init>`(v0, v1) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2337fe.  throw v0;
  #L233800.  v0:= (`int`) v4 @kind l2i;
  #L233802.  return v0;
  #L233804.  v1:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L233808.  v8:= v8 + -1;
  #L23380c.  call temp:= `charAt`(v0, v8) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L233812.  v0:= temp;
  #L233814.  v2:= v2 + v3 @kind int;
  #L233816.  v3:= 37I;
  #L23381a.  v4:= new `java.lang.StringBuilder`;
  #L23381e.  call `<init>`(v4, v3) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L233824.  call temp:= `append`(v4, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23382a.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L233830.  call temp:= `append`(v4, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L233836.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L23383c.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L233842.  v0:= temp @kind object;
  #L233844.  call `<init>`(v1, v0) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23384a.  throw v1;
}
