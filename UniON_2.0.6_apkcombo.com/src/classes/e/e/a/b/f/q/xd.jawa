record `e.e.a.b.f.q.xd` @kind class @AccessFlag ABSTRACT extends `e.e.a.b.f.q.m6` @kind class {
  `int` `e.e.a.b.f.q.xd.b` @AccessFlag PRIVATE_FINAL;
  `int` `e.e.a.b.f.q.xd.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.f.q.xd` v1 @kind this, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/q/xd;.<init>:(II)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L2efee0.  call `<init>`(v1) @signature `Le/e/a/b/f/q/m6;.<init>:()V` @kind direct;
  #L2efee6.  v0:= "index" @kind object;
  #L2efeea.  call temp:= `b`(v3, v2, v0) @signature `Le/e/a/b/f/q/vb;.b:(IILjava/lang/String;)I` @kind static;
  #L2efef0.  v1.`e.e.a.b.f.q.xd.b` @type ^`int` := v2;
  #L2efef4.  v1.`e.e.a.b.f.q.xd.c` @type ^`int` := v3;
  #L2efef8.  return @kind void;
}
procedure `java.lang.Object` `a`(`int` v0 ) @signature `Le/e/a/b/f/q/xd;.a:(I)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `hasNext`(`e.e.a.b.f.q.xd` v2 @kind this) @signature `Le/e/a/b/f/q/xd;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2ef2a0.  v0:= v2.`e.e.a.b.f.q.xd.c` @type ^`int`;
  #L2ef2a4.  v1:= v2.`e.e.a.b.f.q.xd.b` @type ^`int`;
  #L2ef2a8.  if v0 >= v1 then goto L2ef2b0;
  #L2ef2ac.  v0:= 1I;
  #L2ef2ae.  return v0;
  #L2ef2b0.  v0:= 0I;
  #L2ef2b2.  return v0;
}
procedure `boolean` `hasPrevious`(`e.e.a.b.f.q.xd` v1 @kind this) @signature `Le/e/a/b/f/q/xd;.hasPrevious:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ef2c4.  v0:= v1.`e.e.a.b.f.q.xd.c` @type ^`int`;
  #L2ef2c8.  if v0 <= 0 then goto L2ef2d0;
  #L2ef2cc.  v0:= 1I;
  #L2ef2ce.  return v0;
  #L2ef2d0.  v0:= 0I;
  #L2ef2d2.  return v0;
}
procedure `java.lang.Object` `next`(`e.e.a.b.f.q.xd` v2 @kind this) @signature `Le/e/a/b/f/q/xd;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2ef710.  call temp:= `hasNext`(v2) @signature `Le/e/a/b/f/q/xd;.hasNext:()Z` @kind virtual;
  #L2ef716.  v0:= temp;
  #L2ef718.  if v0 == 0 then goto L2ef732;
  #L2ef71c.  v0:= v2.`e.e.a.b.f.q.xd.c` @type ^`int`;
  #L2ef720.  v1:= v0 + 1;
  #L2ef724.  v2.`e.e.a.b.f.q.xd.c` @type ^`int` := v1;
  #L2ef728.  call temp:= `a`(v2, v0) @signature `Le/e/a/b/f/q/xd;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L2ef72e.  v0:= temp @kind object;
  #L2ef730.  return v0 @kind object;
  #L2ef732.  v0:= new `java.util.NoSuchElementException`;
  #L2ef736.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2ef73c.  throw v0;
}
procedure `int` `nextIndex`(`e.e.a.b.f.q.xd` v1 @kind this) @signature `Le/e/a/b/f/q/xd;.nextIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ef698.  v0:= v1.`e.e.a.b.f.q.xd.c` @type ^`int`;
  #L2ef69c.  return v0;
}
procedure `java.lang.Object` `previous`(`e.e.a.b.f.q.xd` v1 @kind this) @signature `Le/e/a/b/f/q/xd;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ef750.  call temp:= `hasPrevious`(v1) @signature `Le/e/a/b/f/q/xd;.hasPrevious:()Z` @kind virtual;
  #L2ef756.  v0:= temp;
  #L2ef758.  if v0 == 0 then goto L2ef772;
  #L2ef75c.  v0:= v1.`e.e.a.b.f.q.xd.c` @type ^`int`;
  #L2ef760.  v0:= v0 + -1;
  #L2ef764.  v1.`e.e.a.b.f.q.xd.c` @type ^`int` := v0;
  #L2ef768.  call temp:= `a`(v1, v0) @signature `Le/e/a/b/f/q/xd;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L2ef76e.  v0:= temp @kind object;
  #L2ef770.  return v0 @kind object;
  #L2ef772.  v0:= new `java.util.NoSuchElementException`;
  #L2ef776.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2ef77c.  throw v0;
}
procedure `int` `previousIndex`(`e.e.a.b.f.q.xd` v1 @kind this) @signature `Le/e/a/b/f/q/xd;.previousIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ef6b0.  v0:= v1.`e.e.a.b.f.q.xd.c` @type ^`int`;
  #L2ef6b4.  v0:= v0 + -1;
  #L2ef6b8.  return v0;
}
