record `e.e.a.b.f.m.d` @kind class @AccessFlag ABSTRACT extends `e.e.a.b.f.m.j1` @kind class {
  `int` `e.e.a.b.f.m.d.b` @AccessFlag PRIVATE_FINAL;
  `int` `e.e.a.b.f.m.d.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.f.m.d` v1 @kind this, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/m/d;.<init>:(II)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L2640c0.  call `<init>`(v1) @signature `Le/e/a/b/f/m/j1;.<init>:()V` @kind direct;
  #L2640c6.  v0:= "index" @kind object;
  #L2640ca.  call temp:= `b`(v3, v2, v0) @signature `Le/e/a/b/f/m/b;.b:(IILjava/lang/String;)I` @kind static;
  #L2640d0.  v1.`e.e.a.b.f.m.d.b` @type ^`int` := v2;
  #L2640d4.  v1.`e.e.a.b.f.m.d.c` @type ^`int` := v3;
  #L2640d8.  return @kind void;
}
procedure `java.lang.Object` `a`(`int` v0 ) @signature `Le/e/a/b/f/m/d;.a:(I)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `hasNext`(`e.e.a.b.f.m.d` v2 @kind this) @signature `Le/e/a/b/f/m/d;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L263fc8.  v0:= v2.`e.e.a.b.f.m.d.c` @type ^`int`;
  #L263fcc.  v1:= v2.`e.e.a.b.f.m.d.b` @type ^`int`;
  #L263fd0.  if v0 >= v1 then goto L263fd8;
  #L263fd4.  v0:= 1I;
  #L263fd6.  return v0;
  #L263fd8.  v0:= 0I;
  #L263fda.  return v0;
}
procedure `boolean` `hasPrevious`(`e.e.a.b.f.m.d` v1 @kind this) @signature `Le/e/a/b/f/m/d;.hasPrevious:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L263fec.  v0:= v1.`e.e.a.b.f.m.d.c` @type ^`int`;
  #L263ff0.  if v0 <= 0 then goto L263ff8;
  #L263ff4.  v0:= 1I;
  #L263ff6.  return v0;
  #L263ff8.  v0:= 0I;
  #L263ffa.  return v0;
}
procedure `java.lang.Object` `next`(`e.e.a.b.f.m.d` v2 @kind this) @signature `Le/e/a/b/f/m/d;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L264040.  call temp:= `hasNext`(v2) @signature `Le/e/a/b/f/m/d;.hasNext:()Z` @kind virtual;
  #L264046.  v0:= temp;
  #L264048.  if v0 == 0 then goto L264062;
  #L26404c.  v0:= v2.`e.e.a.b.f.m.d.c` @type ^`int`;
  #L264050.  v1:= v0 + 1;
  #L264054.  v2.`e.e.a.b.f.m.d.c` @type ^`int` := v1;
  #L264058.  call temp:= `a`(v2, v0) @signature `Le/e/a/b/f/m/d;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L26405e.  v0:= temp @kind object;
  #L264060.  return v0 @kind object;
  #L264062.  v0:= new `java.util.NoSuchElementException`;
  #L264066.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L26406c.  throw v0;
}
procedure `int` `nextIndex`(`e.e.a.b.f.m.d` v1 @kind this) @signature `Le/e/a/b/f/m/d;.nextIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L26400c.  v0:= v1.`e.e.a.b.f.m.d.c` @type ^`int`;
  #L264010.  return v0;
}
procedure `java.lang.Object` `previous`(`e.e.a.b.f.m.d` v1 @kind this) @signature `Le/e/a/b/f/m/d;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L264080.  call temp:= `hasPrevious`(v1) @signature `Le/e/a/b/f/m/d;.hasPrevious:()Z` @kind virtual;
  #L264086.  v0:= temp;
  #L264088.  if v0 == 0 then goto L2640a2;
  #L26408c.  v0:= v1.`e.e.a.b.f.m.d.c` @type ^`int`;
  #L264090.  v0:= v0 + -1;
  #L264094.  v1.`e.e.a.b.f.m.d.c` @type ^`int` := v0;
  #L264098.  call temp:= `a`(v1, v0) @signature `Le/e/a/b/f/m/d;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L26409e.  v0:= temp @kind object;
  #L2640a0.  return v0 @kind object;
  #L2640a2.  v0:= new `java.util.NoSuchElementException`;
  #L2640a6.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2640ac.  throw v0;
}
procedure `int` `previousIndex`(`e.e.a.b.f.m.d` v1 @kind this) @signature `Le/e/a/b/f/m/d;.previousIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L264024.  v0:= v1.`e.e.a.b.f.m.d.c` @type ^`int`;
  #L264028.  v0:= v0 + -1;
  #L26402c.  return v0;
}
