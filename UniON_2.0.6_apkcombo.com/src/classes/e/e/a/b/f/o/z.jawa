record `e.e.a.b.f.o.z` @kind class @AccessFlag FINAL extends `java.util.AbstractCollection` @kind class {
  `java.util.Map` `e.e.a.b.f.o.z.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`e.e.a.b.f.o.z` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Le/e/a/b/f/o/z;.<init>:(Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c0fe8.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L2c0fee.  v0.`e.e.a.b.f.o.z.b` @type ^`java.util.Map` := v1 @kind object;
  #L2c0ff2.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.o.z` v1 @kind this) @signature `Le/e/a/b/f/o/z;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c1004.  v0:= v1.`e.e.a.b.f.o.z.b` @type ^`java.util.Map` @kind object;
  #L2c1008.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L2c100e.  return @kind void;
}
procedure `boolean` `contains`(`e.e.a.b.f.o.z` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/o/z;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0d8c.  v0:= v1.`e.e.a.b.f.o.z.b` @type ^`java.util.Map` @kind object;
  #L2c0d90.  call temp:= `containsValue`(v0, v2) @signature `Ljava/util/Map;.containsValue:(Ljava/lang/Object;)Z` @kind interface;
  #L2c0d96.  v2:= temp;
  #L2c0d98.  return v2;
}
procedure `boolean` `isEmpty`(`e.e.a.b.f.o.z` v1 @kind this) @signature `Le/e/a/b/f/o/z;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0dac.  v0:= v1.`e.e.a.b.f.o.z.b` @type ^`java.util.Map` @kind object;
  #L2c0db0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2c0db6.  v0:= temp;
  #L2c0db8.  return v0;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.o.z` v2 @kind this) @signature `Le/e/a/b/f/o/z;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2c0fb8.  v0:= v2.`e.e.a.b.f.o.z.b` @type ^`java.util.Map` @kind object;
  #L2c0fbc.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2c0fc2.  v0:= temp @kind object;
  #L2c0fc4.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c0fca.  v0:= temp @kind object;
  #L2c0fcc.  v1:= new `e.e.a.b.f.o.w`;
  #L2c0fd0.  call `<init>`(v1, v0) @signature `Le/e/a/b/f/o/w;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L2c0fd6.  return v1 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.o.z` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/o/z;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2c0dcc.  call temp:= `remove`(v3, v4) @signature `Ljava/util/AbstractCollection;.remove:(Ljava/lang/Object;)Z` @kind super;
  #L2c0dd2.  v4:= temp;
  #L2c0dd4.  return v4;
  #L2c0dd6.  v0:= v3.`e.e.a.b.f.o.z.b` @type ^`java.util.Map` @kind object;
  #L2c0dda.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2c0de0.  v0:= temp @kind object;
  #L2c0de2.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c0de8.  v0:= temp @kind object;
  #L2c0dea.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c0df0.  v1:= temp;
  #L2c0df2.  if v1 == 0 then goto L2c0e2c;
  #L2c0df6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c0dfc.  v1:= temp @kind object;
  #L2c0dfe.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L2c0e02.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2c0e08.  v2:= temp @kind object;
  #L2c0e0a.  call temp:= `a`(v4, v2) @signature `Le/e/a/b/f/o/a0;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2c0e10.  v2:= temp;
  #L2c0e12.  if v2 == 0 then goto L2c0dea;
  #L2c0e16.  v4:= v3.`e.e.a.b.f.o.z.b` @type ^`java.util.Map` @kind object;
  #L2c0e1a.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2c0e20.  v0:= temp @kind object;
  #L2c0e22.  call temp:= `remove`(v4, v0) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2c0e28.  v4:= 1I;
  #L2c0e2a.  return v4;
  #L2c0e2c.  v4:= 0I;
  #L2c0e2e.  return v4;
  catch `java.lang.UnsupportedOperationException` @[L2c0dcc..L2c0dd4] goto L2c0dd6;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.o.z` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Le/e/a/b/f/o/z;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c0e50.  if v5 == 0 then goto L2c0e5e;
  #L2c0e54.  call temp:= `removeAll`(v4, v5) @signature `Ljava/util/AbstractCollection;.removeAll:(Ljava/util/Collection;)Z` @kind super;
  #L2c0e5a.  v5:= temp;
  #L2c0e5c.  return v5;
  #L2c0e5e.  v0:= 0I;
  #L2c0e60.  throw v0;
  #L2c0e62.  v0:= new `java.util.HashSet`;
  #L2c0e66.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L2c0e6c.  v1:= v4.`e.e.a.b.f.o.z.b` @type ^`java.util.Map` @kind object;
  #L2c0e70.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2c0e76.  v1:= temp @kind object;
  #L2c0e78.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c0e7e.  v1:= temp @kind object;
  #L2c0e80.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c0e86.  v2:= temp;
  #L2c0e88.  if v2 == 0 then goto L2c0ebc;
  #L2c0e8c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c0e92.  v2:= temp @kind object;
  #L2c0e94.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L2c0e98.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2c0e9e.  v3:= temp @kind object;
  #L2c0ea0.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2c0ea6.  v3:= temp;
  #L2c0ea8.  if v3 == 0 then goto L2c0e80;
  #L2c0eac.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2c0eb2.  v2:= temp @kind object;
  #L2c0eb4.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2c0eba.  goto L2c0e80;
  #L2c0ebc.  v5:= v4.`e.e.a.b.f.o.z.b` @type ^`java.util.Map` @kind object;
  #L2c0ec0.  call temp:= `keySet`(v5) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L2c0ec6.  v5:= temp @kind object;
  #L2c0ec8.  call temp:= `removeAll`(v5, v0) @signature `Ljava/util/Set;.removeAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2c0ece.  v5:= temp;
  #L2c0ed0.  return v5;
  catch `java.lang.UnsupportedOperationException` @[L2c0e54..L2c0e62] goto L2c0e62;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.o.z` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Le/e/a/b/f/o/z;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c0ef4.  if v5 == 0 then goto L2c0f02;
  #L2c0ef8.  call temp:= `retainAll`(v4, v5) @signature `Ljava/util/AbstractCollection;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L2c0efe.  v5:= temp;
  #L2c0f00.  return v5;
  #L2c0f02.  v0:= 0I;
  #L2c0f04.  throw v0;
  #L2c0f06.  v0:= new `java.util.HashSet`;
  #L2c0f0a.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L2c0f10.  v1:= v4.`e.e.a.b.f.o.z.b` @type ^`java.util.Map` @kind object;
  #L2c0f14.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2c0f1a.  v1:= temp @kind object;
  #L2c0f1c.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c0f22.  v1:= temp @kind object;
  #L2c0f24.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c0f2a.  v2:= temp;
  #L2c0f2c.  if v2 == 0 then goto L2c0f60;
  #L2c0f30.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c0f36.  v2:= temp @kind object;
  #L2c0f38.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L2c0f3c.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2c0f42.  v3:= temp @kind object;
  #L2c0f44.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2c0f4a.  v3:= temp;
  #L2c0f4c.  if v3 == 0 then goto L2c0f24;
  #L2c0f50.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2c0f56.  v2:= temp @kind object;
  #L2c0f58.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2c0f5e.  goto L2c0f24;
  #L2c0f60.  v5:= v4.`e.e.a.b.f.o.z.b` @type ^`java.util.Map` @kind object;
  #L2c0f64.  call temp:= `keySet`(v5) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L2c0f6a.  v5:= temp @kind object;
  #L2c0f6c.  call temp:= `retainAll`(v5, v0) @signature `Ljava/util/Set;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2c0f72.  v5:= temp;
  #L2c0f74.  return v5;
  catch `java.lang.UnsupportedOperationException` @[L2c0ef8..L2c0f06] goto L2c0f06;
}
procedure `int` `size`(`e.e.a.b.f.o.z` v1 @kind this) @signature `Le/e/a/b/f/o/z;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0f98.  v0:= v1.`e.e.a.b.f.o.z.b` @type ^`java.util.Map` @kind object;
  #L2c0f9c.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L2c0fa2.  v0:= temp;
  #L2c0fa4.  return v0;
}
