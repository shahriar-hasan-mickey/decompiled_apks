record `e.e.a.b.f.u.d7` @kind class @AccessFlag  extends `java.util.AbstractSet` @kind class {
  `e.e.a.b.f.u.w6` `e.e.a.b.f.u.d7.b` @AccessFlag PRIVATE_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.u.d7` v0 @kind this, `e.e.a.b.f.u.w6` v1 @kind object) @signature `Le/e/a/b/f/u/d7;.<init>:(Le/e/a/b/f/u/w6;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L33a440.  v0.`e.e.a.b.f.u.d7.b` @type ^`e.e.a.b.f.u.w6` := v1 @kind object;
  #L33a444.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L33a44a.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.u.d7` v0 @kind this, `e.e.a.b.f.u.w6` v1 @kind object, `e.e.a.b.f.u.v6` v2 @kind object) @signature `Le/e/a/b/f/u/d7;.<init>:(Le/e/a/b/f/u/w6;Le/e/a/b/f/u/v6;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L33a45c.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/u/d7;.<init>:(Le/e/a/b/f/u/w6;)V` @kind direct;
  #L33a462.  return @kind void;
}
procedure `boolean` `add`(`e.e.a.b.f.u.d7` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/u/d7;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L33a328.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L33a32c.  call temp:= `contains`(v2, v3) @signature `Le/e/a/b/f/u/d7;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L33a332.  v0:= temp;
  #L33a334.  if v0 != 0 then goto L33a35a;
  #L33a338.  v0:= v2.`e.e.a.b.f.u.d7.b` @type ^`e.e.a.b.f.u.w6` @kind object;
  #L33a33c.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L33a342.  v1:= temp @kind object;
  #L33a344.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L33a348.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L33a34e.  v3:= temp @kind object;
  #L33a350.  call temp:= `a`(v0, v1, v3) @signature `Le/e/a/b/f/u/w6;.a:(Ljava/lang/Comparable;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L33a356.  v3:= 1I;
  #L33a358.  return v3;
  #L33a35a.  v3:= 0I;
  #L33a35c.  return v3;
}
procedure `void` `clear`(`e.e.a.b.f.u.d7` v1 @kind this) @signature `Le/e/a/b/f/u/d7;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a474.  v0:= v1.`e.e.a.b.f.u.d7.b` @type ^`e.e.a.b.f.u.w6` @kind object;
  #L33a478.  call `clear`(v0) @signature `Le/e/a/b/f/u/w6;.clear:()V` @kind virtual;
  #L33a47e.  return @kind void;
}
procedure `boolean` `contains`(`e.e.a.b.f.u.d7` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/u/d7;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L33a370.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L33a374.  v0:= v2.`e.e.a.b.f.u.d7.b` @type ^`e.e.a.b.f.u.w6` @kind object;
  #L33a378.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L33a37e.  v1:= temp @kind object;
  #L33a380.  call temp:= `get`(v0, v1) @signature `Le/e/a/b/f/u/w6;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L33a386.  v0:= temp @kind object;
  #L33a388.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L33a38e.  v3:= temp @kind object;
  #L33a390.  if v0 == v3 then goto L33a3aa;
  #L33a394.  if v0 == 0 then goto L33a3a6;
  #L33a398.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L33a39e.  v3:= temp;
  #L33a3a0.  if v3 == 0 then goto L33a3a6;
  #L33a3a4.  goto L33a3aa;
  #L33a3a6.  v3:= 0I;
  #L33a3a8.  return v3;
  #L33a3aa.  v3:= 1I;
  #L33a3ac.  return v3;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.u.d7` v3 @kind this) @signature `Le/e/a/b/f/u/d7;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L33a41c.  v0:= new `e.e.a.b.f.u.e7`;
  #L33a420.  v1:= v3.`e.e.a.b.f.u.d7.b` @type ^`e.e.a.b.f.u.w6` @kind object;
  #L33a424.  v2:= 0I;
  #L33a426.  call `<init>`(v0, v1, v2) @signature `Le/e/a/b/f/u/e7;.<init>:(Le/e/a/b/f/u/w6;Le/e/a/b/f/u/v6;)V` @kind direct;
  #L33a42c.  return v0 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.u.d7` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/u/d7;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a3c0.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L33a3c4.  call temp:= `contains`(v1, v2) @signature `Le/e/a/b/f/u/d7;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L33a3ca.  v0:= temp;
  #L33a3cc.  if v0 == 0 then goto L33a3e6;
  #L33a3d0.  v0:= v1.`e.e.a.b.f.u.d7.b` @type ^`e.e.a.b.f.u.w6` @kind object;
  #L33a3d4.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L33a3da.  v2:= temp @kind object;
  #L33a3dc.  call temp:= `remove`(v0, v2) @signature `Le/e/a/b/f/u/w6;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L33a3e2.  v2:= 1I;
  #L33a3e4.  return v2;
  #L33a3e6.  v2:= 0I;
  #L33a3e8.  return v2;
}
procedure `int` `size`(`e.e.a.b.f.u.d7` v1 @kind this) @signature `Le/e/a/b/f/u/d7;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a3fc.  v0:= v1.`e.e.a.b.f.u.d7.b` @type ^`e.e.a.b.f.u.w6` @kind object;
  #L33a400.  call temp:= `size`(v0) @signature `Le/e/a/b/f/u/w6;.size:()I` @kind virtual;
  #L33a406.  v0:= temp;
  #L33a408.  return v0;
}
