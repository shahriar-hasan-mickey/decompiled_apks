record `e.e.a.b.f.n.t2` @kind class @AccessFlag FINAL extends `e.e.a.b.f.n.v` @kind class, `java.util.RandomAccess` @kind interface, `e.e.a.b.f.n.b2` @kind interface, `e.e.a.b.f.n.o3` @kind interface {
  `long`[] `e.e.a.b.f.n.t2.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.n.t2.d` @AccessFlag PRIVATE;
}
global `e.e.a.b.f.n.t2` `@@e.e.a.b.f.n.t2.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/n/t2;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L280464.  v0:= new `e.e.a.b.f.n.t2`;
  #L280468.  v1:= 0I;
  #L28046a.  v2:= new `long`[v1];
  #L28046e.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/n/t2;.<init>:([JI)V` @kind direct;
  #L280474.  `@@e.e.a.b.f.n.t2.e` @type ^`e.e.a.b.f.n.t2` := v0 @kind object;
  #L280478.  v0:= `@@e.e.a.b.f.n.t2.e` @type ^`e.e.a.b.f.n.t2` @kind object;
  #L28047c.  call `zzb`(v0) @signature `Le/e/a/b/f/n/v;.zzb:()V` @kind virtual;
  #L280482.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.n.t2` v2 @kind this) @signature `Le/e/a/b/f/n/t2;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L280494.  v0:= 10I;
  #L280498.  v0:= new `long`[v0];
  #L28049c.  v1:= 0I;
  #L28049e.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/n/t2;.<init>:([JI)V` @kind direct;
  #L2804a4.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.n.t2` v0 @kind this, `long`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/n/t2;.<init>:([JI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2804b8.  call `<init>`(v0) @signature `Le/e/a/b/f/n/v;.<init>:()V` @kind direct;
  #L2804be.  v0.`e.e.a.b.f.n.t2.c` @type ^`long`[] := v1 @kind object;
  #L2804c2.  v0.`e.e.a.b.f.n.t2.d` @type ^`int` := v2;
  #L2804c6.  return @kind void;
}
procedure `e.e.a.b.f.n.t2` `c`() @signature `Le/e/a/b/f/n/t2;.c:()Le/e/a/b/f/n/t2;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L280274.  v0:= `@@e.e.a.b.f.n.t2.e` @type ^`e.e.a.b.f.n.t2` @kind object;
  #L280278.  return v0 @kind object;
}
procedure `void` `e`(`e.e.a.b.f.n.t2` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/n/t2;.e:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L280630.  if v2 < 0 then goto L28063e;
  #L280634.  v0:= v1.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L280638.  if v2 >= v0 then goto L28063e;
  #L28063c.  return @kind void;
  #L28063e.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L280642.  call temp:= `f`(v1, v2) @signature `Le/e/a/b/f/n/t2;.f:(I)Ljava/lang/String;` @kind direct;
  #L280648.  v2:= temp @kind object;
  #L28064a.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L280650.  throw v0;
}
procedure `java.lang.String` `f`(`e.e.a.b.f.n.t2` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/n/t2;.f:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2803f8.  v0:= v3.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L2803fc.  v1:= new `java.lang.StringBuilder`;
  #L280400.  v2:= 35I;
  #L280404.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L28040a.  v2:= "Index:" @kind object;
  #L28040e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L280414.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L28041a.  v4:= ", Size:" @kind object;
  #L28041e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L280424.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L28042a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L280430.  v4:= temp @kind object;
  #L280432.  return v4 @kind object;
}
procedure `void` `a`(`e.e.a.b.f.n.t2` v4 @kind this, `long` v5 ) @signature `Le/e/a/b/f/n/t2;.a:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2805d8.  call `d`(v4) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L2805de.  v0:= v4.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L2805e2.  v1:= v4.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L2805e6.  v2:= length @variable v1;
  #L2805e8.  if v0 != v2 then goto L280608;
  #L2805ec.  v2:= v0 * 3;
  #L2805f0.  v2:= v2 / 2;
  #L2805f4.  v2:= v2 + 1;
  #L2805f8.  v2:= new `long`[v2];
  #L2805fc.  v3:= 0I;
  #L2805fe.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L280604.  v4.`e.e.a.b.f.n.t2.c` @type ^`long`[] := v2 @kind object;
  #L280608.  v0:= v4.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L28060c.  v1:= v4.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L280610.  v2:= v1 + 1;
  #L280614.  v4.`e.e.a.b.f.n.t2.d` @type ^`int` := v2;
  #L280618.  v0[v1]:= v5 @kind wide;
  #L28061c.  return @kind void;
}
procedure `void` `add`(`e.e.a.b.f.n.t2` v5 @kind this, `int` v6 , `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/n/t2;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2804d8.  v7:= (`java.lang.Long`) v7 @kind object;
  #L2804dc.  call temp:= `longValue`(v7) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L2804e2.  v0:= temp @kind wide;
  #L2804e4.  call `d`(v5) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L2804ea.  if v6 < 0 then goto L280560;
  #L2804ee.  v7:= v5.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L2804f2.  if v6 > v7 then goto L280560;
  #L2804f6.  v2:= v5.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L2804fa.  v3:= length @variable v2;
  #L2804fc.  if v7 >= v3 then goto L28050e;
  #L280500.  v3:= v6 + 1;
  #L280504.  v7:= v7 - v6 @kind int;
  #L280506.  call `arraycopy`(v2, v6, v2, v3, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L28050c.  goto L28053e;
  #L28050e.  v7:= v7 * 3;
  #L280512.  v7:= v7 / 2;
  #L280516.  v7:= v7 + 1;
  #L28051a.  v7:= new `long`[v7];
  #L28051e.  v3:= 0I;
  #L280520.  call `arraycopy`(v2, v3, v7, v3, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L280526.  v2:= v5.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L28052a.  v3:= v6 + 1;
  #L28052e.  v4:= v5.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L280532.  v4:= v4 - v6 @kind int;
  #L280534.  call `arraycopy`(v2, v6, v7, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L28053a.  v5.`e.e.a.b.f.n.t2.c` @type ^`long`[] := v7 @kind object;
  #L28053e.  v7:= v5.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L280542.  v7[v6]:= v0 @kind wide;
  #L280546.  v6:= v5.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L28054a.  v6:= v6 + 1;
  #L28054e.  v5.`e.e.a.b.f.n.t2.d` @type ^`int` := v6;
  #L280552.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L280556.  v6:= v6 + 1;
  #L28055a.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L28055e.  return @kind void;
  #L280560.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L280564.  call temp:= `f`(v5, v6) @signature `Le/e/a/b/f/n/t2;.f:(I)Ljava/lang/String;` @kind direct;
  #L28056a.  v6:= temp @kind object;
  #L28056c.  call `<init>`(v7, v6) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L280572.  throw v7;
}
procedure `boolean` `add`(`e.e.a.b.f.n.t2` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/n/t2;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2800dc.  v3:= (`java.lang.Long`) v3 @kind object;
  #L2800e0.  call temp:= `longValue`(v3) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L2800e6.  v0:= temp @kind wide;
  #L2800e8.  call `a`(v2, v0) @signature `Le/e/a/b/f/n/t2;.a:(J)V` @kind virtual;
  #L2800ee.  v3:= 1I;
  #L2800f0.  return v3;
}
procedure `boolean` `addAll`(`e.e.a.b.f.n.t2` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/n/t2;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L280104.  call `d`(v5) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L28010a.  call temp:= `a`(v6) @signature `Le/e/a/b/f/n/e2;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L280110.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.n.t2` @kind boolean;
  #L280114.  if v0 != 0 then goto L280122;
  #L280118.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/n/v;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L28011e.  v6:= temp;
  #L280120.  return v6;
  #L280122.  v6:= (`e.e.a.b.f.n.t2`) v6 @kind object;
  #L280126.  v0:= v6.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L28012a.  v1:= 0I;
  #L28012c.  if v0 != 0 then goto L280132;
  #L280130.  return v1;
  #L280132.  v2:= v5.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L280136.  v3:= 2147483647I;
  #L28013c.  v3:= v3 - v2 @kind int;
  #L28013e.  if v3 < v0 then goto L280182;
  #L280142.  v2:= v2 + v0 @kind int;
  #L280144.  v0:= v5.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L280148.  v3:= length @variable v0;
  #L28014a.  if v2 <= v3 then goto L28015a;
  #L28014e.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([JI)[J` @kind static;
  #L280154.  v0:= temp @kind object;
  #L280156.  v5.`e.e.a.b.f.n.t2.c` @type ^`long`[] := v0 @kind object;
  #L28015a.  v0:= v6.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L28015e.  v3:= v5.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L280162.  v4:= v5.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L280166.  v6:= v6.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L28016a.  call `arraycopy`(v0, v1, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L280170.  v5.`e.e.a.b.f.n.t2.d` @type ^`int` := v2;
  #L280174.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L280178.  v0:= 1I;
  #L28017a.  v6:= v6 + v0 @kind int;
  #L28017c.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L280180.  return v0;
  #L280182.  v6:= new `java.lang.OutOfMemoryError`;
  #L280186.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L28018c.  throw v6;
}
procedure `e.e.a.b.f.n.c2` `c`(`e.e.a.b.f.n.t2` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/n/t2;.c:(I)Le/e/a/b/f/n/c2;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L280234.  v0:= v2.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L280238.  if v3 < v0 then goto L280258;
  #L28023c.  v0:= new `e.e.a.b.f.n.t2`;
  #L280240.  v1:= v2.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L280244.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([JI)[J` @kind static;
  #L28024a.  v3:= temp @kind object;
  #L28024c.  v1:= v2.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L280250.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/n/t2;.<init>:([JI)V` @kind direct;
  #L280256.  return v0 @kind object;
  #L280258.  v3:= new `java.lang.IllegalArgumentException`;
  #L28025c.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L280262.  throw v3;
}
procedure `boolean` `contains`(`e.e.a.b.f.n.t2` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/n/t2;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2801a0.  call temp:= `indexOf`(v1, v2) @signature `Le/e/a/b/f/n/t2;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L2801a6.  v2:= temp;
  #L2801a8.  v0:= -1I;
  #L2801aa.  if v2 == v0 then goto L2801b2;
  #L2801ae.  v2:= 1I;
  #L2801b0.  return v2;
  #L2801b2.  v2:= 0I;
  #L2801b4.  return v2;
}
procedure `boolean` `equals`(`e.e.a.b.f.n.t2` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Le/e/a/b/f/n/t2;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2801c8.  v0:= 1I;
  #L2801ca.  if v8 != v9 then goto L2801d0;
  #L2801ce.  return v0;
  #L2801d0.  v1:= instanceof @variable v9 @type ^`e.e.a.b.f.n.t2` @kind boolean;
  #L2801d4.  if v1 != 0 then goto L2801e2;
  #L2801d8.  call temp:= `equals`(v8, v9) @signature `Le/e/a/b/f/n/v;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L2801de.  v9:= temp;
  #L2801e0.  return v9;
  #L2801e2.  v9:= (`e.e.a.b.f.n.t2`) v9 @kind object;
  #L2801e6.  v1:= v8.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L2801ea.  v2:= v9.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L2801ee.  v3:= 0I;
  #L2801f0.  if v1 == v2 then goto L2801f6;
  #L2801f4.  return v3;
  #L2801f6.  v9:= v9.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L2801fa.  v1:= 0I;
  #L2801fc.  v2:= v8.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L280200.  if v1 >= v2 then goto L280220;
  #L280204.  v2:= v8.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L280208.  v4:= v2[v1] @kind wide;
  #L28020c.  v6:= v9[v1] @kind wide;
  #L280210.  v2:= lcmp(v4, v6);
  #L280214.  if v2 == 0 then goto L28021a;
  #L280218.  return v3;
  #L28021a.  v1:= v1 + 1;
  #L28021e.  goto L2801fc;
  #L280220.  return v0;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.n.t2` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/n/t2;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L28032c.  call `e`(v3, v4) @signature `Le/e/a/b/f/n/t2;.e:(I)V` @kind direct;
  #L280332.  v0:= v3.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L280336.  v1:= v0[v4] @kind wide;
  #L28033a.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L280340.  v4:= temp @kind object;
  #L280342.  return v4 @kind object;
}
procedure `long` `h`(`e.e.a.b.f.n.t2` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/n/t2;.h:(I)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L280444.  call `e`(v3, v4) @signature `Le/e/a/b/f/n/t2;.e:(I)V` @kind direct;
  #L28044a.  v0:= v3.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L28044e.  v1:= v0[v4] @kind wide;
  #L280452.  return v1 @kind wide;
}
procedure `int` `hashCode`(`e.e.a.b.f.n.t2` v5 @kind this) @signature `Le/e/a/b/f/n/t2;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28028c.  v0:= 1I;
  #L28028e.  v1:= 0I;
  #L280290.  v2:= v5.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L280294.  if v1 >= v2 then goto L2802b4;
  #L280298.  v0:= v0 * 31;
  #L28029c.  v2:= v5.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L2802a0.  v3:= v2[v1] @kind wide;
  #L2802a4.  call temp:= `a`(v3) @signature `Le/e/a/b/f/n/e2;.a:(J)I` @kind static;
  #L2802aa.  v2:= temp;
  #L2802ac.  v0:= v0 + v2 @kind int;
  #L2802ae.  v1:= v1 + 1;
  #L2802b2.  goto L280290;
  #L2802b4.  return v0;
}
procedure `int` `indexOf`(`e.e.a.b.f.n.t2` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Le/e/a/b/f/n/t2;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2802c8.  v0:= instanceof @variable v8 @type ^`java.lang.Long` @kind boolean;
  #L2802cc.  v1:= -1I;
  #L2802ce.  if v0 != 0 then goto L2802d4;
  #L2802d2.  return v1;
  #L2802d4.  v8:= (`java.lang.Long`) v8 @kind object;
  #L2802d8.  call temp:= `longValue`(v8) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L2802de.  v2:= temp @kind wide;
  #L2802e0.  v8:= v7.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L2802e4.  v0:= 0I;
  #L2802e6.  if v0 >= v8 then goto L280302;
  #L2802ea.  v4:= v7.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L2802ee.  v5:= v4[v0] @kind wide;
  #L2802f2.  v4:= lcmp(v5, v2);
  #L2802f6.  if v4 != 0 then goto L2802fc;
  #L2802fa.  return v0;
  #L2802fc.  v0:= v0 + 1;
  #L280300.  goto L2802e6;
  #L280302.  return v1;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.n.t2` v5 @kind this, `int` v6 ) @signature `Le/e/a/b/f/n/t2;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L280354.  call `d`(v5) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L28035a.  call `e`(v5, v6) @signature `Le/e/a/b/f/n/t2;.e:(I)V` @kind direct;
  #L280360.  v0:= v5.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L280364.  v1:= v0[v6] @kind wide;
  #L280368.  v3:= v5.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L28036c.  v4:= v3 + -1;
  #L280370.  if v6 >= v4 then goto L280384;
  #L280374.  v4:= v6 + 1;
  #L280378.  v3:= v3 - v6 @kind int;
  #L28037a.  v3:= v3 + -1;
  #L28037e.  call `arraycopy`(v0, v4, v0, v6, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L280384.  v6:= v5.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L280388.  v6:= v6 + -1;
  #L28038c.  v5.`e.e.a.b.f.n.t2.d` @type ^`int` := v6;
  #L280390.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L280394.  v6:= v6 + 1;
  #L280398.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L28039c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2803a2.  v6:= temp @kind object;
  #L2803a4.  return v6 @kind object;
}
procedure `void` `removeRange`(`e.e.a.b.f.n.t2` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/n/t2;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L280584.  call `d`(v2) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L28058a.  if v4 < v3 then goto L2805b8;
  #L28058e.  v0:= v2.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L280592.  v1:= v2.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L280596.  v1:= v1 - v4 @kind int;
  #L280598.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L28059e.  v0:= v2.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L2805a2.  v4:= v4 - v3 @kind int;
  #L2805a4.  v0:= v0 - v4 @kind int;
  #L2805a6.  v2.`e.e.a.b.f.n.t2.d` @type ^`int` := v0;
  #L2805aa.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L2805ae.  v3:= v3 + 1;
  #L2805b2.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L2805b6.  return @kind void;
  #L2805b8.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L2805bc.  v4:= "toIndex < fromIndex" @kind object;
  #L2805c0.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2805c6.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.n.t2` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/n/t2;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2803b8.  v6:= (`java.lang.Long`) v6 @kind object;
  #L2803bc.  call temp:= `longValue`(v6) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L2803c2.  v0:= temp @kind wide;
  #L2803c4.  call `d`(v4) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L2803ca.  call `e`(v4, v5) @signature `Le/e/a/b/f/n/t2;.e:(I)V` @kind direct;
  #L2803d0.  v6:= v4.`e.e.a.b.f.n.t2.c` @type ^`long`[] @kind object;
  #L2803d4.  v2:= v6[v5] @kind wide;
  #L2803d8.  v6[v5]:= v0 @kind wide;
  #L2803dc.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2803e2.  v5:= temp @kind object;
  #L2803e4.  return v5 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.n.t2` v1 @kind this) @signature `Le/e/a/b/f/n/t2;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L280314.  v0:= v1.`e.e.a.b.f.n.t2.d` @type ^`int`;
  #L280318.  return v0;
}
