record `e.e.a.b.f.q.hh` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Number` @kind class {
  `java.lang.String` `e.e.a.b.f.q.hh.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e.e.a.b.f.q.hh` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Le/e/a/b/f/q/hh;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2f3b60.  call `<init>`(v0) @signature `Ljava/lang/Number;.<init>:()V` @kind direct;
  #L2f3b66.  v0.`e.e.a.b.f.q.hh.b` @type ^`java.lang.String` := v1 @kind object;
  #L2f3b6a.  return @kind void;
}
procedure `double` `doubleValue`(`e.e.a.b.f.q.hh` v2 @kind this) @signature `Le/e/a/b/f/q/hh;.doubleValue:()D` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2f3a3c.  v0:= v2.`e.e.a.b.f.q.hh.b` @type ^`java.lang.String` @kind object;
  #L2f3a40.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L2f3a46.  v0:= temp @kind wide;
  #L2f3a48.  return v0 @kind wide;
}
procedure `boolean` `equals`(`e.e.a.b.f.q.hh` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/q/hh;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2f39f4.  v0:= 1I;
  #L2f39f6.  if v3 != v4 then goto L2f39fc;
  #L2f39fa.  return v0;
  #L2f39fc.  v1:= instanceof @variable v4 @type ^`e.e.a.b.f.q.hh` @kind boolean;
  #L2f3a00.  v2:= 0I;
  #L2f3a02.  if v1 == 0 then goto L2f3a28;
  #L2f3a06.  v4:= (`e.e.a.b.f.q.hh`) v4 @kind object;
  #L2f3a0a.  v1:= v3.`e.e.a.b.f.q.hh.b` @type ^`java.lang.String` @kind object;
  #L2f3a0e.  v4:= v4.`e.e.a.b.f.q.hh.b` @type ^`java.lang.String` @kind object;
  #L2f3a12.  if v1 == v4 then goto L2f3a26;
  #L2f3a16.  call temp:= `equals`(v1, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f3a1c.  v4:= temp;
  #L2f3a1e.  if v4 == 0 then goto L2f3a24;
  #L2f3a22.  goto L2f3a26;
  #L2f3a24.  return v2;
  #L2f3a26.  return v0;
  #L2f3a28.  return v2;
}
procedure `float` `floatValue`(`e.e.a.b.f.q.hh` v1 @kind this) @signature `Le/e/a/b/f/q/hh;.floatValue:()F` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2f3a5c.  v0:= v1.`e.e.a.b.f.q.hh.b` @type ^`java.lang.String` @kind object;
  #L2f3a60.  call temp:= `parseFloat`(v0) @signature `Ljava/lang/Float;.parseFloat:(Ljava/lang/String;)F` @kind static;
  #L2f3a66.  v0:= temp;
  #L2f3a68.  return v0;
}
procedure `int` `hashCode`(`e.e.a.b.f.q.hh` v1 @kind this) @signature `Le/e/a/b/f/q/hh;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2f3a7c.  v0:= v1.`e.e.a.b.f.q.hh.b` @type ^`java.lang.String` @kind object;
  #L2f3a80.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L2f3a86.  v0:= temp;
  #L2f3a88.  return v0;
}
procedure `int` `intValue`(`e.e.a.b.f.q.hh` v2 @kind this) @signature `Le/e/a/b/f/q/hh;.intValue:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2f3a9c.  v0:= v2.`e.e.a.b.f.q.hh.b` @type ^`java.lang.String` @kind object;
  #L2f3aa0.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L2f3aa6.  v0:= temp;
  #L2f3aa8.  return v0;
  #L2f3aaa.  v0:= v2.`e.e.a.b.f.q.hh.b` @type ^`java.lang.String` @kind object;
  #L2f3aae.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L2f3ab4.  v0:= temp @kind wide;
  #L2f3ab6.  v1:= (`int`) v0 @kind l2i;
  #L2f3ab8.  return v1;
  #L2f3aba.  v0:= new `java.math.BigDecimal`;
  #L2f3abe.  v1:= v2.`e.e.a.b.f.q.hh.b` @type ^`java.lang.String` @kind object;
  #L2f3ac2.  call `<init>`(v0, v1) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f3ac8.  call temp:= `intValue`(v0) @signature `Ljava/math/BigDecimal;.intValue:()I` @kind virtual;
  #L2f3ace.  v0:= temp;
  #L2f3ad0.  return v0;
  catch `java.lang.NumberFormatException` @[L2f3a9c..L2f3aa8] goto L2f3aaa;
  catch `java.lang.NumberFormatException` @[L2f3aaa..L2f3ab6] goto L2f3aba;
}
procedure `long` `longValue`(`e.e.a.b.f.q.hh` v2 @kind this) @signature `Le/e/a/b/f/q/hh;.longValue:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2f3b18.  v0:= v2.`e.e.a.b.f.q.hh.b` @type ^`java.lang.String` @kind object;
  #L2f3b1c.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L2f3b22.  v0:= temp @kind wide;
  #L2f3b24.  return v0 @kind wide;
  #L2f3b26.  v0:= new `java.math.BigDecimal`;
  #L2f3b2a.  v1:= v2.`e.e.a.b.f.q.hh.b` @type ^`java.lang.String` @kind object;
  #L2f3b2e.  call `<init>`(v0, v1) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f3b34.  call temp:= `longValue`(v0) @signature `Ljava/math/BigDecimal;.longValue:()J` @kind virtual;
  #L2f3b3a.  v0:= temp @kind wide;
  #L2f3b3c.  return v0 @kind wide;
  catch `java.lang.NumberFormatException` @[L2f3b18..L2f3b24] goto L2f3b26;
}
procedure `java.lang.String` `toString`(`e.e.a.b.f.q.hh` v1 @kind this) @signature `Le/e/a/b/f/q/hh;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2f3b00.  v0:= v1.`e.e.a.b.f.q.hh.b` @type ^`java.lang.String` @kind object;
  #L2f3b04.  return v0 @kind object;
}
