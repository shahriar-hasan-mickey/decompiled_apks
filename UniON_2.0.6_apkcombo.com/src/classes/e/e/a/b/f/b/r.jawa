record `e.e.a.b.f.b.r` @kind class @AccessFlag PUBLIC_ABSTRACT extends `e.e.a.b.f.b.l2` @kind interface {
}
procedure `void` `<init>`(`e.e.a.b.f.b.r` v0 @kind this) @signature `Le/e/a/b/f/b/r;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1f9630.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f9636.  return @kind void;
}
procedure `e.e.a.b.f.b.l2` `a`(`e.e.a.b.f.b.r` v1 @kind this, `e.e.a.b.f.b.k2` v2 @kind object) @signature `Le/e/a/b/f/b/r;.a:(Le/e/a/b/f/b/k2;)Le/e/a/b/f/b/l2;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L1f95e8.  call temp:= `b`(v1) @signature `Le/e/a/b/f/b/m2;.b:()Le/e/a/b/f/b/k2;` @kind interface;
  #L1f95ee.  v0:= temp @kind object;
  #L1f95f0.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1f95f6.  v0:= temp @kind object;
  #L1f95f8.  call temp:= `isInstance`(v0, v2) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f95fe.  v0:= temp;
  #L1f9600.  if v0 == 0 then goto L1f9610;
  #L1f9604.  v2:= (`e.e.a.b.f.b.q`) v2 @kind object;
  #L1f9608.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/b/r;.a:(Le/e/a/b/f/b/q;)Le/e/a/b/f/b/r;` @kind virtual;
  #L1f960e.  return v1 @kind object;
  #L1f9610.  v2:= new `java.lang.IllegalArgumentException`;
  #L1f9614.  v0:= "mergeFrom(MessageLite) can only merge messages of the same type." @kind object;
  #L1f9618.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f961e.  throw v2;
}
procedure `e.e.a.b.f.b.r` `a`(`e.e.a.b.f.b.q` v0 @kind object) @signature `Le/e/a/b/f/b/r;.a:(Le/e/a/b/f/b/q;)Le/e/a/b/f/b/r;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
