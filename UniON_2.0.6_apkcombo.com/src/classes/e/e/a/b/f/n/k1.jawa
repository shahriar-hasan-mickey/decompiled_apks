record `e.e.a.b.f.n.k1` @kind class @AccessFlag FINAL extends `e.e.a.b.f.n.v` @kind class, `java.util.RandomAccess` @kind interface, `e.e.a.b.f.n.y1` @kind interface, `e.e.a.b.f.n.o3` @kind interface {
  `float`[] `e.e.a.b.f.n.k1.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.n.k1.d` @AccessFlag PRIVATE;
}
global `e.e.a.b.f.n.k1` `@@e.e.a.b.f.n.k1.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/n/k1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L27db9c.  v0:= new `e.e.a.b.f.n.k1`;
  #L27dba0.  v1:= 0I;
  #L27dba2.  v2:= new `float`[v1];
  #L27dba6.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/n/k1;.<init>:([FI)V` @kind direct;
  #L27dbac.  `@@e.e.a.b.f.n.k1.e` @type ^`e.e.a.b.f.n.k1` := v0 @kind object;
  #L27dbb0.  v0:= `@@e.e.a.b.f.n.k1.e` @type ^`e.e.a.b.f.n.k1` @kind object;
  #L27dbb4.  call `zzb`(v0) @signature `Le/e/a/b/f/n/v;.zzb:()V` @kind virtual;
  #L27dbba.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.n.k1` v2 @kind this) @signature `Le/e/a/b/f/n/k1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L27dbcc.  v0:= 10I;
  #L27dbd0.  v0:= new `float`[v0];
  #L27dbd4.  v1:= 0I;
  #L27dbd6.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/n/k1;.<init>:([FI)V` @kind direct;
  #L27dbdc.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.n.k1` v0 @kind this, `float`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/n/k1;.<init>:([FI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L27dbf0.  call `<init>`(v0) @signature `Le/e/a/b/f/n/v;.<init>:()V` @kind direct;
  #L27dbf6.  v0.`e.e.a.b.f.n.k1.c` @type ^`float`[] := v1 @kind object;
  #L27dbfa.  v0.`e.e.a.b.f.n.k1.d` @type ^`int` := v2;
  #L27dbfe.  return @kind void;
}
procedure `e.e.a.b.f.n.k1` `c`() @signature `Le/e/a/b/f/n/k1;.c:()Le/e/a/b/f/n/k1;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L27d98c.  v0:= `@@e.e.a.b.f.n.k1.e` @type ^`e.e.a.b.f.n.k1` @kind object;
  #L27d990.  return v0 @kind object;
}
procedure `void` `d`(`e.e.a.b.f.n.k1` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/n/k1;.d:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L27dd68.  if v2 < 0 then goto L27dd76;
  #L27dd6c.  v0:= v1.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27dd70.  if v2 >= v0 then goto L27dd76;
  #L27dd74.  return @kind void;
  #L27dd76.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L27dd7a.  call temp:= `e`(v1, v2) @signature `Le/e/a/b/f/n/k1;.e:(I)Ljava/lang/String;` @kind direct;
  #L27dd80.  v2:= temp @kind object;
  #L27dd82.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27dd88.  throw v0;
}
procedure `java.lang.String` `e`(`e.e.a.b.f.n.k1` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/n/k1;.e:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L27db50.  v0:= v3.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27db54.  v1:= new `java.lang.StringBuilder`;
  #L27db58.  v2:= 35I;
  #L27db5c.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L27db62.  v2:= "Index:" @kind object;
  #L27db66.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27db6c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L27db72.  v4:= ", Size:" @kind object;
  #L27db76.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27db7c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L27db82.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L27db88.  v4:= temp @kind object;
  #L27db8a.  return v4 @kind object;
}
procedure `void` `a`(`e.e.a.b.f.n.k1` v4 @kind this, `float` v5 ) @signature `Le/e/a/b/f/n/k1;.a:(F)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27dd10.  call `d`(v4) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27dd16.  v0:= v4.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27dd1a.  v1:= v4.`e.e.a.b.f.n.k1.c` @type ^`float`[] @kind object;
  #L27dd1e.  v2:= length @variable v1;
  #L27dd20.  if v0 != v2 then goto L27dd40;
  #L27dd24.  v2:= v0 * 3;
  #L27dd28.  v2:= v2 / 2;
  #L27dd2c.  v2:= v2 + 1;
  #L27dd30.  v2:= new `float`[v2];
  #L27dd34.  v3:= 0I;
  #L27dd36.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27dd3c.  v4.`e.e.a.b.f.n.k1.c` @type ^`float`[] := v2 @kind object;
  #L27dd40.  v0:= v4.`e.e.a.b.f.n.k1.c` @type ^`float`[] @kind object;
  #L27dd44.  v1:= v4.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27dd48.  v2:= v1 + 1;
  #L27dd4c.  v4.`e.e.a.b.f.n.k1.d` @type ^`int` := v2;
  #L27dd50.  v0[v1]:= v5;
  #L27dd54.  return @kind void;
}
procedure `void` `add`(`e.e.a.b.f.n.k1` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/n/k1;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27dc10.  v6:= (`java.lang.Float`) v6 @kind object;
  #L27dc14.  call temp:= `floatValue`(v6) @signature `Ljava/lang/Float;.floatValue:()F` @kind virtual;
  #L27dc1a.  v6:= temp;
  #L27dc1c.  call `d`(v4) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27dc22.  if v5 < 0 then goto L27dc98;
  #L27dc26.  v0:= v4.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27dc2a.  if v5 > v0 then goto L27dc98;
  #L27dc2e.  v1:= v4.`e.e.a.b.f.n.k1.c` @type ^`float`[] @kind object;
  #L27dc32.  v2:= length @variable v1;
  #L27dc34.  if v0 >= v2 then goto L27dc46;
  #L27dc38.  v2:= v5 + 1;
  #L27dc3c.  v0:= v0 - v5 @kind int;
  #L27dc3e.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27dc44.  goto L27dc76;
  #L27dc46.  v0:= v0 * 3;
  #L27dc4a.  v0:= v0 / 2;
  #L27dc4e.  v0:= v0 + 1;
  #L27dc52.  v0:= new `float`[v0];
  #L27dc56.  v2:= 0I;
  #L27dc58.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27dc5e.  v1:= v4.`e.e.a.b.f.n.k1.c` @type ^`float`[] @kind object;
  #L27dc62.  v2:= v5 + 1;
  #L27dc66.  v3:= v4.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27dc6a.  v3:= v3 - v5 @kind int;
  #L27dc6c.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27dc72.  v4.`e.e.a.b.f.n.k1.c` @type ^`float`[] := v0 @kind object;
  #L27dc76.  v0:= v4.`e.e.a.b.f.n.k1.c` @type ^`float`[] @kind object;
  #L27dc7a.  v0[v5]:= v6;
  #L27dc7e.  v5:= v4.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27dc82.  v5:= v5 + 1;
  #L27dc86.  v4.`e.e.a.b.f.n.k1.d` @type ^`int` := v5;
  #L27dc8a.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L27dc8e.  v5:= v5 + 1;
  #L27dc92.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L27dc96.  return @kind void;
  #L27dc98.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L27dc9c.  call temp:= `e`(v4, v5) @signature `Le/e/a/b/f/n/k1;.e:(I)Ljava/lang/String;` @kind direct;
  #L27dca2.  v5:= temp @kind object;
  #L27dca4.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27dcaa.  throw v6;
}
procedure `boolean` `add`(`e.e.a.b.f.n.k1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/n/k1;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L27d828.  v1:= (`java.lang.Float`) v1 @kind object;
  #L27d82c.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Float;.floatValue:()F` @kind virtual;
  #L27d832.  v1:= temp;
  #L27d834.  call `a`(v0, v1) @signature `Le/e/a/b/f/n/k1;.a:(F)V` @kind virtual;
  #L27d83a.  v1:= 1I;
  #L27d83c.  return v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.n.k1` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/n/k1;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27d850.  call `d`(v5) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27d856.  call temp:= `a`(v6) @signature `Le/e/a/b/f/n/e2;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L27d85c.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.n.k1` @kind boolean;
  #L27d860.  if v0 != 0 then goto L27d86e;
  #L27d864.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/n/v;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L27d86a.  v6:= temp;
  #L27d86c.  return v6;
  #L27d86e.  v6:= (`e.e.a.b.f.n.k1`) v6 @kind object;
  #L27d872.  v0:= v6.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27d876.  v1:= 0I;
  #L27d878.  if v0 != 0 then goto L27d87e;
  #L27d87c.  return v1;
  #L27d87e.  v2:= v5.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27d882.  v3:= 2147483647I;
  #L27d888.  v3:= v3 - v2 @kind int;
  #L27d88a.  if v3 < v0 then goto L27d8ce;
  #L27d88e.  v2:= v2 + v0 @kind int;
  #L27d890.  v0:= v5.`e.e.a.b.f.n.k1.c` @type ^`float`[] @kind object;
  #L27d894.  v3:= length @variable v0;
  #L27d896.  if v2 <= v3 then goto L27d8a6;
  #L27d89a.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([FI)[F` @kind static;
  #L27d8a0.  v0:= temp @kind object;
  #L27d8a2.  v5.`e.e.a.b.f.n.k1.c` @type ^`float`[] := v0 @kind object;
  #L27d8a6.  v0:= v6.`e.e.a.b.f.n.k1.c` @type ^`float`[] @kind object;
  #L27d8aa.  v3:= v5.`e.e.a.b.f.n.k1.c` @type ^`float`[] @kind object;
  #L27d8ae.  v4:= v5.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27d8b2.  v6:= v6.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27d8b6.  call `arraycopy`(v0, v1, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27d8bc.  v5.`e.e.a.b.f.n.k1.d` @type ^`int` := v2;
  #L27d8c0.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L27d8c4.  v0:= 1I;
  #L27d8c6.  v6:= v6 + v0 @kind int;
  #L27d8c8.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L27d8cc.  return v0;
  #L27d8ce.  v6:= new `java.lang.OutOfMemoryError`;
  #L27d8d2.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L27d8d8.  throw v6;
}
procedure `e.e.a.b.f.n.c2` `c`(`e.e.a.b.f.n.k1` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/n/k1;.c:(I)Le/e/a/b/f/n/c2;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L27d9a4.  v0:= v2.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27d9a8.  if v3 < v0 then goto L27d9c8;
  #L27d9ac.  v0:= new `e.e.a.b.f.n.k1`;
  #L27d9b0.  v1:= v2.`e.e.a.b.f.n.k1.c` @type ^`float`[] @kind object;
  #L27d9b4.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([FI)[F` @kind static;
  #L27d9ba.  v3:= temp @kind object;
  #L27d9bc.  v1:= v2.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27d9c0.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/n/k1;.<init>:([FI)V` @kind direct;
  #L27d9c6.  return v0 @kind object;
  #L27d9c8.  v3:= new `java.lang.IllegalArgumentException`;
  #L27d9cc.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L27d9d2.  throw v3;
}
procedure `boolean` `contains`(`e.e.a.b.f.n.k1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/n/k1;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L27d8ec.  call temp:= `indexOf`(v1, v2) @signature `Le/e/a/b/f/n/k1;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L27d8f2.  v2:= temp;
  #L27d8f4.  v0:= -1I;
  #L27d8f6.  if v2 == v0 then goto L27d8fe;
  #L27d8fa.  v2:= 1I;
  #L27d8fc.  return v2;
  #L27d8fe.  v2:= 0I;
  #L27d900.  return v2;
}
procedure `boolean` `equals`(`e.e.a.b.f.n.k1` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/n/k1;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27d914.  v0:= 1I;
  #L27d916.  if v5 != v6 then goto L27d91c;
  #L27d91a.  return v0;
  #L27d91c.  v1:= instanceof @variable v6 @type ^`e.e.a.b.f.n.k1` @kind boolean;
  #L27d920.  if v1 != 0 then goto L27d92e;
  #L27d924.  call temp:= `equals`(v5, v6) @signature `Le/e/a/b/f/n/v;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L27d92a.  v6:= temp;
  #L27d92c.  return v6;
  #L27d92e.  v6:= (`e.e.a.b.f.n.k1`) v6 @kind object;
  #L27d932.  v1:= v5.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27d936.  v2:= v6.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27d93a.  v3:= 0I;
  #L27d93c.  if v1 == v2 then goto L27d942;
  #L27d940.  return v3;
  #L27d942.  v6:= v6.`e.e.a.b.f.n.k1.c` @type ^`float`[] @kind object;
  #L27d946.  v1:= 0I;
  #L27d948.  v2:= v5.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27d94c.  if v1 >= v2 then goto L27d978;
  #L27d950.  v2:= v5.`e.e.a.b.f.n.k1.c` @type ^`float`[] @kind object;
  #L27d954.  v2:= v2[v1];
  #L27d958.  call temp:= `floatToIntBits`(v2) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L27d95e.  v2:= temp;
  #L27d960.  v4:= v6[v1];
  #L27d964.  call temp:= `floatToIntBits`(v4) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L27d96a.  v4:= temp;
  #L27d96c.  if v2 == v4 then goto L27d972;
  #L27d970.  return v3;
  #L27d972.  v1:= v1 + 1;
  #L27d976.  goto L27d948;
  #L27d978.  return v0;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.n.k1` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/n/k1;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L27da84.  call `d`(v1, v2) @signature `Le/e/a/b/f/n/k1;.d:(I)V` @kind direct;
  #L27da8a.  v0:= v1.`e.e.a.b.f.n.k1.c` @type ^`float`[] @kind object;
  #L27da8e.  v2:= v0[v2];
  #L27da92.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L27da98.  v2:= temp @kind object;
  #L27da9a.  return v2 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.n.k1` v3 @kind this) @signature `Le/e/a/b/f/n/k1;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L27d9e4.  v0:= 1I;
  #L27d9e6.  v1:= 0I;
  #L27d9e8.  v2:= v3.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27d9ec.  if v1 >= v2 then goto L27da0c;
  #L27d9f0.  v0:= v0 * 31;
  #L27d9f4.  v2:= v3.`e.e.a.b.f.n.k1.c` @type ^`float`[] @kind object;
  #L27d9f8.  v2:= v2[v1];
  #L27d9fc.  call temp:= `floatToIntBits`(v2) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L27da02.  v2:= temp;
  #L27da04.  v0:= v0 + v2 @kind int;
  #L27da06.  v1:= v1 + 1;
  #L27da0a.  goto L27d9e8;
  #L27da0c.  return v0;
}
procedure `int` `indexOf`(`e.e.a.b.f.n.k1` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/n/k1;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27da20.  v0:= instanceof @variable v5 @type ^`java.lang.Float` @kind boolean;
  #L27da24.  v1:= -1I;
  #L27da26.  if v0 != 0 then goto L27da2c;
  #L27da2a.  return v1;
  #L27da2c.  v5:= (`java.lang.Float`) v5 @kind object;
  #L27da30.  call temp:= `floatValue`(v5) @signature `Ljava/lang/Float;.floatValue:()F` @kind virtual;
  #L27da36.  v5:= temp;
  #L27da38.  v0:= v4.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27da3c.  v2:= 0I;
  #L27da3e.  if v2 >= v0 then goto L27da5a;
  #L27da42.  v3:= v4.`e.e.a.b.f.n.k1.c` @type ^`float`[] @kind object;
  #L27da46.  v3:= v3[v2];
  #L27da4a.  v3:= fcmpl(v3, v5);
  #L27da4e.  if v3 != 0 then goto L27da54;
  #L27da52.  return v2;
  #L27da54.  v2:= v2 + 1;
  #L27da58.  goto L27da3e;
  #L27da5a.  return v1;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.n.k1` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/n/k1;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27daac.  call `d`(v4) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27dab2.  call `d`(v4, v5) @signature `Le/e/a/b/f/n/k1;.d:(I)V` @kind direct;
  #L27dab8.  v0:= v4.`e.e.a.b.f.n.k1.c` @type ^`float`[] @kind object;
  #L27dabc.  v1:= v0[v5];
  #L27dac0.  v2:= v4.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27dac4.  v3:= v2 + -1;
  #L27dac8.  if v5 >= v3 then goto L27dadc;
  #L27dacc.  v3:= v5 + 1;
  #L27dad0.  v2:= v2 - v5 @kind int;
  #L27dad2.  v2:= v2 + -1;
  #L27dad6.  call `arraycopy`(v0, v3, v0, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27dadc.  v5:= v4.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27dae0.  v5:= v5 + -1;
  #L27dae4.  v4.`e.e.a.b.f.n.k1.d` @type ^`int` := v5;
  #L27dae8.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L27daec.  v5:= v5 + 1;
  #L27daf0.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L27daf4.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L27dafa.  v5:= temp @kind object;
  #L27dafc.  return v5 @kind object;
}
procedure `void` `removeRange`(`e.e.a.b.f.n.k1` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/n/k1;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L27dcbc.  call `d`(v2) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27dcc2.  if v4 < v3 then goto L27dcf0;
  #L27dcc6.  v0:= v2.`e.e.a.b.f.n.k1.c` @type ^`float`[] @kind object;
  #L27dcca.  v1:= v2.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27dcce.  v1:= v1 - v4 @kind int;
  #L27dcd0.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L27dcd6.  v0:= v2.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27dcda.  v4:= v4 - v3 @kind int;
  #L27dcdc.  v0:= v0 - v4 @kind int;
  #L27dcde.  v2.`e.e.a.b.f.n.k1.d` @type ^`int` := v0;
  #L27dce2.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L27dce6.  v3:= v3 + 1;
  #L27dcea.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L27dcee.  return @kind void;
  #L27dcf0.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L27dcf4.  v4:= "toIndex < fromIndex" @kind object;
  #L27dcf8.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27dcfe.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.n.k1` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/n/k1;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L27db10.  v4:= (`java.lang.Float`) v4 @kind object;
  #L27db14.  call temp:= `floatValue`(v4) @signature `Ljava/lang/Float;.floatValue:()F` @kind virtual;
  #L27db1a.  v4:= temp;
  #L27db1c.  call `d`(v2) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27db22.  call `d`(v2, v3) @signature `Le/e/a/b/f/n/k1;.d:(I)V` @kind direct;
  #L27db28.  v0:= v2.`e.e.a.b.f.n.k1.c` @type ^`float`[] @kind object;
  #L27db2c.  v1:= v0[v3];
  #L27db30.  v0[v3]:= v4;
  #L27db34.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L27db3a.  v3:= temp @kind object;
  #L27db3c.  return v3 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.n.k1` v1 @kind this) @signature `Le/e/a/b/f/n/k1;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L27da6c.  v0:= v1.`e.e.a.b.f.n.k1.d` @type ^`int`;
  #L27da70.  return v0;
}
