record `e.e.a.b.f.m.f1` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `boolean` `a`(`java.util.Set` v3 @kind object, `java.util.Collection` v4 @kind object) @signature `Le/e/a/b/f/m/f1;.a:(Ljava/util/Set;Ljava/util/Collection;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L267ef4.  v0:= 0I;
  #L267ef6.  if v4 == 0 then goto L267f78;
  #L267efa.  v1:= instanceof @variable v4 @type ^`e.e.a.b.f.m.z0` @kind boolean;
  #L267efe.  if v1 == 0 then goto L267f0e;
  #L267f02.  v4:= (`e.e.a.b.f.m.z0`) v4 @kind object;
  #L267f06.  call temp:= `zza`(v4) @signature `Le/e/a/b/f/m/z0;.zza:()Ljava/util/Set;` @kind interface;
  #L267f0c.  v4:= temp @kind object;
  #L267f0e.  v1:= instanceof @variable v4 @type ^`java.util.Set` @kind boolean;
  #L267f12.  if v1 == 0 then goto L267f66;
  #L267f16.  call temp:= `size`(v4) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L267f1c.  v1:= temp;
  #L267f1e.  call temp:= `size`(v3) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L267f24.  v2:= temp;
  #L267f26.  if v1 <= v2 then goto L267f66;
  #L267f2a.  call temp:= `iterator`(v3) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L267f30.  v3:= temp @kind object;
  #L267f32.  if v4 == 0 then goto L267f64;
  #L267f36.  v0:= 0I;
  #L267f38.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L267f3e.  v1:= temp;
  #L267f40.  if v1 == 0 then goto L267f62;
  #L267f44.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L267f4a.  v1:= temp @kind object;
  #L267f4c.  call temp:= `contains`(v4, v1) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L267f52.  v1:= temp;
  #L267f54.  if v1 == 0 then goto L267f38;
  #L267f58.  call `remove`(v3) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L267f5e.  v0:= 1I;
  #L267f60.  goto L267f38;
  #L267f62.  return v0;
  #L267f64.  throw v0;
  #L267f66.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L267f6c.  v4:= temp @kind object;
  #L267f6e.  call temp:= `a`(v3, v4) @signature `Le/e/a/b/f/m/f1;.a:(Ljava/util/Set;Ljava/util/Iterator;)Z` @kind static;
  #L267f74.  v3:= temp;
  #L267f76.  return v3;
  #L267f78.  throw v0;
}
procedure `boolean` `a`(`java.util.Set` v3 @kind object, `java.util.Iterator` v4 @kind object) @signature `Le/e/a/b/f/m/f1;.a:(Ljava/util/Set;Ljava/util/Iterator;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L267eb4.  v0:= 0I;
  #L267eb6.  v1:= 0I;
  #L267eb8.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L267ebe.  v2:= temp;
  #L267ec0.  if v2 == 0 then goto L267ed8;
  #L267ec4.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L267eca.  v2:= temp @kind object;
  #L267ecc.  call temp:= `remove`(v3, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L267ed2.  v2:= temp;
  #L267ed4.  v1:= v1 ^| v2 @kind int;
  #L267ed6.  goto L267eb8;
  #L267ed8.  v3:= 1I;
  #L267eda.  if v3 == v1 then goto L267ee0;
  #L267ede.  return v0;
  #L267ee0.  return v3;
}
