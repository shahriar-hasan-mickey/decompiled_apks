record `e.e.a.b.f.i.y0` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v5 , `int` v6 , `java.lang.String` v7 @kind object) @signature `Le/e/a/b/f/i/y0;.a:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L21df00.  if v5 < 0 then goto L21df0c;
  #L21df04.  if v5 < v6 then goto L21df0a;
  #L21df08.  goto L21df0c;
  #L21df0a.  return v5;
  #L21df0c.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L21df10.  v0:= "index" @kind object;
  #L21df14.  v1:= 1I;
  #L21df16.  v2:= 0I;
  #L21df18.  v3:= 2I;
  #L21df1a.  if v5 < 0 then goto L21df84;
  #L21df1e.  if v6 >= 0 then goto L21df54;
  #L21df22.  v5:= new `java.lang.IllegalArgumentException`;
  #L21df26.  v7:= new `java.lang.StringBuilder`;
  #L21df2a.  v0:= 26I;
  #L21df2e.  call `<init>`(v7, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L21df34.  v0:= "negative size: " @kind object;
  #L21df38.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21df3e.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L21df44.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21df4a.  v6:= temp @kind object;
  #L21df4c.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21df52.  throw v5;
  #L21df54.  v4:= 3I;
  #L21df56.  v4:= new `java.lang.Object`[v4];
  #L21df5a.  v4[v2]:= v0 @kind object;
  #L21df5e.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L21df64.  v5:= temp @kind object;
  #L21df66.  v4[v1]:= v5 @kind object;
  #L21df6a.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L21df70.  v5:= temp @kind object;
  #L21df72.  v4[v3]:= v5 @kind object;
  #L21df76.  v5:= "%s (%s) must be less than size (%s)" @kind object;
  #L21df7a.  call temp:= `a`(v5, v4) @signature `Le/e/a/b/f/i/b;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L21df80.  v5:= temp @kind object;
  #L21df82.  goto L21dfa4;
  #L21df84.  v6:= new `java.lang.Object`[v3];
  #L21df88.  v6[v2]:= v0 @kind object;
  #L21df8c.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L21df92.  v5:= temp @kind object;
  #L21df94.  v6[v1]:= v5 @kind object;
  #L21df98.  v5:= "%s (%s) must not be negative" @kind object;
  #L21df9c.  call temp:= `a`(v5, v6) @signature `Le/e/a/b/f/i/b;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L21dfa2.  v5:= temp @kind object;
  #L21dfa4.  call `<init>`(v7, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21dfaa.  throw v7;
}
procedure `void` `a`(`int` v2 , `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/i/y0;.a:(III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L21e094.  if v2 < 0 then goto L21e0a4;
  #L21e098.  if v3 < v2 then goto L21e0a4;
  #L21e09c.  if v3 <= v4 then goto L21e0a2;
  #L21e0a0.  goto L21e0a4;
  #L21e0a2.  return @kind void;
  #L21e0a4.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L21e0a8.  if v2 < 0 then goto L21e0f8;
  #L21e0ac.  if v2 > v4 then goto L21e0f8;
  #L21e0b0.  if v3 < 0 then goto L21e0ea;
  #L21e0b4.  if v3 <= v4 then goto L21e0ba;
  #L21e0b8.  goto L21e0ea;
  #L21e0ba.  v4:= 2I;
  #L21e0bc.  v4:= new `java.lang.Object`[v4];
  #L21e0c0.  v1:= 0I;
  #L21e0c2.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L21e0c8.  v3:= temp @kind object;
  #L21e0ca.  v4[v1]:= v3 @kind object;
  #L21e0ce.  v3:= 1I;
  #L21e0d0.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L21e0d6.  v2:= temp @kind object;
  #L21e0d8.  v4[v3]:= v2 @kind object;
  #L21e0dc.  v2:= "end index (%s) must not be less than start index (%s)" @kind object;
  #L21e0e0.  call temp:= `a`(v2, v4) @signature `Le/e/a/b/f/i/b;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L21e0e6.  v2:= temp @kind object;
  #L21e0e8.  goto L21e104;
  #L21e0ea.  v2:= "end index" @kind object;
  #L21e0ee.  call temp:= `c`(v3, v4, v2) @signature `Le/e/a/b/f/i/y0;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L21e0f4.  v2:= temp @kind object;
  #L21e0f6.  goto L21e104;
  #L21e0f8.  v3:= "start index" @kind object;
  #L21e0fc.  call temp:= `c`(v2, v4, v3) @signature `Le/e/a/b/f/i/y0;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L21e102.  v2:= temp @kind object;
  #L21e104.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e10a.  throw v0;
}
procedure `int` `b`(`int` v1 , `int` v2 , `java.lang.String` v3 @kind object) @signature `Le/e/a/b/f/i/y0;.b:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L21dfbc.  if v1 < 0 then goto L21dfc6;
  #L21dfc0.  if v1 > v2 then goto L21dfc6;
  #L21dfc4.  return v1;
  #L21dfc6.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L21dfca.  v0:= "index" @kind object;
  #L21dfce.  call temp:= `c`(v1, v2, v0) @signature `Le/e/a/b/f/i/y0;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L21dfd4.  v1:= temp @kind object;
  #L21dfd6.  call `<init>`(v3, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21dfdc.  throw v3;
}
procedure `java.lang.String` `c`(`int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Le/e/a/b/f/i/y0;.c:(IILjava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L21dff0.  v0:= 1I;
  #L21dff2.  v1:= 0I;
  #L21dff4.  v2:= 2I;
  #L21dff6.  if v4 >= 0 then goto L21e01c;
  #L21dffa.  v5:= new `java.lang.Object`[v2];
  #L21dffe.  v5[v1]:= v6 @kind object;
  #L21e002.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L21e008.  v4:= temp @kind object;
  #L21e00a.  v5[v0]:= v4 @kind object;
  #L21e00e.  v4:= "%s (%s) must not be negative" @kind object;
  #L21e012.  call temp:= `a`(v4, v5) @signature `Le/e/a/b/f/i/b;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L21e018.  v4:= temp @kind object;
  #L21e01a.  return v4 @kind object;
  #L21e01c.  if v5 < 0 then goto L21e050;
  #L21e020.  v3:= 3I;
  #L21e022.  v3:= new `java.lang.Object`[v3];
  #L21e026.  v3[v1]:= v6 @kind object;
  #L21e02a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L21e030.  v4:= temp @kind object;
  #L21e032.  v3[v0]:= v4 @kind object;
  #L21e036.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L21e03c.  v4:= temp @kind object;
  #L21e03e.  v3[v2]:= v4 @kind object;
  #L21e042.  v4:= "%s (%s) must not be greater than size (%s)" @kind object;
  #L21e046.  call temp:= `a`(v4, v3) @signature `Le/e/a/b/f/i/b;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L21e04c.  v4:= temp @kind object;
  #L21e04e.  return v4 @kind object;
  #L21e050.  v4:= new `java.lang.IllegalArgumentException`;
  #L21e054.  v6:= new `java.lang.StringBuilder`;
  #L21e058.  v0:= 26I;
  #L21e05c.  call `<init>`(v6, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L21e062.  v0:= "negative size: " @kind object;
  #L21e066.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21e06c.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L21e072.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21e078.  v5:= temp @kind object;
  #L21e07a.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e080.  throw v4;
}
