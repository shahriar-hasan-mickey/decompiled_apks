record `e.e.a.b.f.b.g1` @kind class @AccessFlag FINAL extends `e.e.a.b.f.b.t` @kind class, `e.e.a.b.f.b.k1` @kind interface, `java.util.RandomAccess` @kind interface {
  `int`[] `e.e.a.b.f.b.g1.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.b.g1.d` @AccessFlag PRIVATE;
}
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/b/g1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L201f50.  v0:= new `e.e.a.b.f.b.g1`;
  #L201f54.  call `<init>`(v0) @signature `Le/e/a/b/f/b/g1;.<init>:()V` @kind direct;
  #L201f5a.  call `h`(v0) @signature `Le/e/a/b/f/b/t;.h:()V` @kind virtual;
  #L201f60.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.b.g1` v2 @kind this) @signature `Le/e/a/b/f/b/g1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L201f74.  v0:= 10I;
  #L201f78.  v0:= new `int`[v0];
  #L201f7c.  v1:= 0I;
  #L201f7e.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/b/g1;.<init>:([II)V` @kind direct;
  #L201f84.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.b.g1` v0 @kind this, `int`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/b/g1;.<init>:([II)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L201f98.  call `<init>`(v0) @signature `Le/e/a/b/f/b/t;.<init>:()V` @kind direct;
  #L201f9e.  v0.`e.e.a.b.f.b.g1.c` @type ^`int`[] := v1 @kind object;
  #L201fa2.  v0.`e.e.a.b.f.b.g1.d` @type ^`int` := v2;
  #L201fa6.  return @kind void;
}
procedure `void` `a`(`e.e.a.b.f.b.g1` v4 @kind this, `int` v5 , `int` v6 ) @signature `Le/e/a/b/f/b/g1;.a:(II)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L202080.  call `d`(v4) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L202086.  if v5 < 0 then goto L2020fc;
  #L20208a.  v0:= v4.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L20208e.  if v5 > v0 then goto L2020fc;
  #L202092.  v1:= v4.`e.e.a.b.f.b.g1.c` @type ^`int`[] @kind object;
  #L202096.  v2:= length @variable v1;
  #L202098.  if v0 >= v2 then goto L2020aa;
  #L20209c.  v2:= v5 + 1;
  #L2020a0.  v0:= v0 - v5 @kind int;
  #L2020a2.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2020a8.  goto L2020da;
  #L2020aa.  v0:= v0 * 3;
  #L2020ae.  v0:= v0 / 2;
  #L2020b2.  v0:= v0 + 1;
  #L2020b6.  v0:= new `int`[v0];
  #L2020ba.  v2:= 0I;
  #L2020bc.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2020c2.  v1:= v4.`e.e.a.b.f.b.g1.c` @type ^`int`[] @kind object;
  #L2020c6.  v2:= v5 + 1;
  #L2020ca.  v3:= v4.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L2020ce.  v3:= v3 - v5 @kind int;
  #L2020d0.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2020d6.  v4.`e.e.a.b.f.b.g1.c` @type ^`int`[] := v0 @kind object;
  #L2020da.  v0:= v4.`e.e.a.b.f.b.g1.c` @type ^`int`[] @kind object;
  #L2020de.  v0[v5]:= v6;
  #L2020e2.  v5:= v4.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L2020e6.  v5:= v5 + 1;
  #L2020ea.  v4.`e.e.a.b.f.b.g1.d` @type ^`int` := v5;
  #L2020ee.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L2020f2.  v5:= v5 + 1;
  #L2020f6.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L2020fa.  return @kind void;
  #L2020fc.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L202100.  call temp:= `e`(v4, v5) @signature `Le/e/a/b/f/b/g1;.e:(I)Ljava/lang/String;` @kind direct;
  #L202106.  v5:= temp @kind object;
  #L202108.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20210e.  throw v6;
}
procedure `void` `d`(`e.e.a.b.f.b.g1` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/b/g1;.d:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L20204c.  if v2 < 0 then goto L20205a;
  #L202050.  v0:= v1.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L202054.  if v2 >= v0 then goto L20205a;
  #L202058.  return @kind void;
  #L20205a.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L20205e.  call temp:= `e`(v1, v2) @signature `Le/e/a/b/f/b/g1;.e:(I)Ljava/lang/String;` @kind direct;
  #L202064.  v2:= temp @kind object;
  #L202066.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20206c.  throw v0;
}
procedure `java.lang.String` `e`(`e.e.a.b.f.b.g1` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/b/g1;.e:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L201f04.  v0:= v3.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201f08.  v1:= new `java.lang.StringBuilder`;
  #L201f0c.  v2:= 35I;
  #L201f10.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L201f16.  v2:= "Index:" @kind object;
  #L201f1a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L201f20.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L201f26.  v4:= ", Size:" @kind object;
  #L201f2a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L201f30.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L201f36.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L201f3c.  v4:= temp @kind object;
  #L201f3e.  return v4 @kind object;
}
procedure `void` `add`(`e.e.a.b.f.b.g1` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/b/g1;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L201fb8.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L201fbc.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L201fc2.  v2:= temp;
  #L201fc4.  call `a`(v0, v1, v2) @signature `Le/e/a/b/f/b/g1;.a:(II)V` @kind direct;
  #L201fca.  return @kind void;
}
procedure `boolean` `addAll`(`e.e.a.b.f.b.g1` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/b/g1;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L201c1c.  call `d`(v5) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L201c22.  call temp:= `a`(v6) @signature `Le/e/a/b/f/b/h1;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L201c28.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.b.g1` @kind boolean;
  #L201c2c.  if v0 != 0 then goto L201c3a;
  #L201c30.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/b/t;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L201c36.  v6:= temp;
  #L201c38.  return v6;
  #L201c3a.  v6:= (`e.e.a.b.f.b.g1`) v6 @kind object;
  #L201c3e.  v0:= v6.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201c42.  v1:= 0I;
  #L201c44.  if v0 != 0 then goto L201c4a;
  #L201c48.  return v1;
  #L201c4a.  v2:= 2147483647I;
  #L201c50.  v3:= v5.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201c54.  v2:= v2 - v3 @kind int;
  #L201c56.  if v2 < v0 then goto L201c9a;
  #L201c5a.  v3:= v3 + v0 @kind int;
  #L201c5c.  v0:= v5.`e.e.a.b.f.b.g1.c` @type ^`int`[] @kind object;
  #L201c60.  v2:= length @variable v0;
  #L201c62.  if v3 <= v2 then goto L201c72;
  #L201c66.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L201c6c.  v0:= temp @kind object;
  #L201c6e.  v5.`e.e.a.b.f.b.g1.c` @type ^`int`[] := v0 @kind object;
  #L201c72.  v0:= v6.`e.e.a.b.f.b.g1.c` @type ^`int`[] @kind object;
  #L201c76.  v2:= v5.`e.e.a.b.f.b.g1.c` @type ^`int`[] @kind object;
  #L201c7a.  v4:= v5.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201c7e.  v6:= v6.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201c82.  call `arraycopy`(v0, v1, v2, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L201c88.  v5.`e.e.a.b.f.b.g1.d` @type ^`int` := v3;
  #L201c8c.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L201c90.  v0:= 1I;
  #L201c92.  v6:= v6 + v0 @kind int;
  #L201c94.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L201c98.  return v0;
  #L201c9a.  v6:= new `java.lang.OutOfMemoryError`;
  #L201c9e.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L201ca4.  throw v6;
}
procedure `boolean` `equals`(`e.e.a.b.f.b.g1` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/b/g1;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L201cb8.  v0:= 1I;
  #L201cba.  if v5 != v6 then goto L201cc0;
  #L201cbe.  return v0;
  #L201cc0.  v1:= instanceof @variable v6 @type ^`e.e.a.b.f.b.g1` @kind boolean;
  #L201cc4.  if v1 != 0 then goto L201cd2;
  #L201cc8.  call temp:= `equals`(v5, v6) @signature `Le/e/a/b/f/b/t;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L201cce.  v6:= temp;
  #L201cd0.  return v6;
  #L201cd2.  v6:= (`e.e.a.b.f.b.g1`) v6 @kind object;
  #L201cd6.  v1:= v5.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201cda.  v2:= v6.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201cde.  v3:= 0I;
  #L201ce0.  if v1 == v2 then goto L201ce6;
  #L201ce4.  return v3;
  #L201ce6.  v6:= v6.`e.e.a.b.f.b.g1.c` @type ^`int`[] @kind object;
  #L201cea.  v1:= 0I;
  #L201cec.  v2:= v5.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201cf0.  if v1 >= v2 then goto L201d0c;
  #L201cf4.  v2:= v5.`e.e.a.b.f.b.g1.c` @type ^`int`[] @kind object;
  #L201cf8.  v2:= v2[v1];
  #L201cfc.  v4:= v6[v1];
  #L201d00.  if v2 == v4 then goto L201d06;
  #L201d04.  return v3;
  #L201d06.  v1:= v1 + 1;
  #L201d0a.  goto L201cec;
  #L201d0c.  return v0;
}
procedure `e.e.a.b.f.b.k1` `f`(`e.e.a.b.f.b.g1` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/b/g1;.f:(I)Le/e/a/b/f/b/k1;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L201d94.  v0:= v2.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201d98.  if v3 < v0 then goto L201db8;
  #L201d9c.  v0:= new `e.e.a.b.f.b.g1`;
  #L201da0.  v1:= v2.`e.e.a.b.f.b.g1.c` @type ^`int`[] @kind object;
  #L201da4.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L201daa.  v3:= temp @kind object;
  #L201dac.  v1:= v2.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201db0.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/b/g1;.<init>:([II)V` @kind direct;
  #L201db6.  return v0 @kind object;
  #L201db8.  v3:= new `java.lang.IllegalArgumentException`;
  #L201dbc.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L201dc2.  throw v3;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.b.g1` v0 @kind this, `int` v1 ) @signature `Le/e/a/b/f/b/g1;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L201e40.  call temp:= `h`(v0, v1) @signature `Le/e/a/b/f/b/g1;.h:(I)I` @kind virtual;
  #L201e46.  v1:= temp;
  #L201e48.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L201e4e.  v1:= temp @kind object;
  #L201e50.  return v1 @kind object;
}
procedure `int` `h`(`e.e.a.b.f.b.g1` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/b/g1;.h:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L201dd4.  call `d`(v1, v2) @signature `Le/e/a/b/f/b/g1;.d:(I)V` @kind direct;
  #L201dda.  v0:= v1.`e.e.a.b.f.b.g1.c` @type ^`int`[] @kind object;
  #L201dde.  v2:= v0[v2];
  #L201de2.  return v2;
}
procedure `int` `hashCode`(`e.e.a.b.f.b.g1` v3 @kind this) @signature `Le/e/a/b/f/b/g1;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L201df4.  v0:= 1I;
  #L201df6.  v1:= 0I;
  #L201df8.  v2:= v3.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201dfc.  if v1 >= v2 then goto L201e14;
  #L201e00.  v0:= v0 * 31;
  #L201e04.  v2:= v3.`e.e.a.b.f.b.g1.c` @type ^`int`[] @kind object;
  #L201e08.  v2:= v2[v1];
  #L201e0c.  v0:= v0 + v2 @kind int;
  #L201e0e.  v1:= v1 + 1;
  #L201e12.  goto L201df8;
  #L201e14.  return v0;
}
procedure `void` `i`(`e.e.a.b.f.b.g1` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/b/g1;.i:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L202030.  v0:= v1.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L202034.  call `a`(v1, v0, v2) @signature `Le/e/a/b/f/b/g1;.a:(II)V` @kind direct;
  #L20203a.  return @kind void;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.b.g1` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/b/g1;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L201e64.  call `d`(v4) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L201e6a.  call `d`(v4, v5) @signature `Le/e/a/b/f/b/g1;.d:(I)V` @kind direct;
  #L201e70.  v0:= v4.`e.e.a.b.f.b.g1.c` @type ^`int`[] @kind object;
  #L201e74.  v1:= v0[v5];
  #L201e78.  v2:= v4.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201e7c.  v3:= v2 + -1;
  #L201e80.  if v5 >= v3 then goto L201e90;
  #L201e84.  v3:= v5 + 1;
  #L201e88.  v2:= v2 - v5 @kind int;
  #L201e8a.  call `arraycopy`(v0, v3, v0, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L201e90.  v5:= v4.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201e94.  v5:= v5 + -1;
  #L201e98.  v4.`e.e.a.b.f.b.g1.d` @type ^`int` := v5;
  #L201e9c.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L201ea0.  v5:= v5 + 1;
  #L201ea4.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L201ea8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L201eae.  v5:= temp @kind object;
  #L201eb0.  return v5 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.b.g1` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/b/g1;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L201d20.  call `d`(v3) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L201d26.  v0:= 0I;
  #L201d28.  v1:= 0I;
  #L201d2a.  v2:= v3.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201d2e.  if v1 >= v2 then goto L201d80;
  #L201d32.  v2:= v3.`e.e.a.b.f.b.g1.c` @type ^`int`[] @kind object;
  #L201d36.  v2:= v2[v1];
  #L201d3a.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L201d40.  v2:= temp @kind object;
  #L201d42.  call temp:= `equals`(v4, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L201d48.  v2:= temp;
  #L201d4a.  if v2 == 0 then goto L201d7a;
  #L201d4e.  v4:= v3.`e.e.a.b.f.b.g1.c` @type ^`int`[] @kind object;
  #L201d52.  v0:= v1 + 1;
  #L201d56.  v2:= v3.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201d5a.  v2:= v2 - v1 @kind int;
  #L201d5c.  call `arraycopy`(v4, v0, v4, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L201d62.  v4:= v3.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201d66.  v0:= 1I;
  #L201d68.  v4:= v4 - v0 @kind int;
  #L201d6a.  v3.`e.e.a.b.f.b.g1.d` @type ^`int` := v4;
  #L201d6e.  v4:= v3.`java.util.AbstractList.modCount` @type ^`int`;
  #L201d72.  v4:= v4 + v0 @kind int;
  #L201d74.  v3.`java.util.AbstractList.modCount` @type ^`int` := v4;
  #L201d78.  return v0;
  #L201d7a.  v1:= v1 + 1;
  #L201d7e.  goto L201d2a;
  #L201d80.  return v0;
}
procedure `void` `removeRange`(`e.e.a.b.f.b.g1` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/b/g1;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L201fdc.  call `d`(v2) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L201fe2.  if v4 < v3 then goto L202010;
  #L201fe6.  v0:= v2.`e.e.a.b.f.b.g1.c` @type ^`int`[] @kind object;
  #L201fea.  v1:= v2.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201fee.  v1:= v1 - v4 @kind int;
  #L201ff0.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L201ff6.  v0:= v2.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201ffa.  v4:= v4 - v3 @kind int;
  #L201ffc.  v0:= v0 - v4 @kind int;
  #L201ffe.  v2.`e.e.a.b.f.b.g1.d` @type ^`int` := v0;
  #L202002.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L202006.  v3:= v3 + 1;
  #L20200a.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L20200e.  return @kind void;
  #L202010.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L202014.  v4:= "toIndex < fromIndex" @kind object;
  #L202018.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20201e.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.b.g1` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/b/g1;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L201ec4.  v4:= (`java.lang.Integer`) v4 @kind object;
  #L201ec8.  call temp:= `intValue`(v4) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L201ece.  v4:= temp;
  #L201ed0.  call `d`(v2) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L201ed6.  call `d`(v2, v3) @signature `Le/e/a/b/f/b/g1;.d:(I)V` @kind direct;
  #L201edc.  v0:= v2.`e.e.a.b.f.b.g1.c` @type ^`int`[] @kind object;
  #L201ee0.  v1:= v0[v3];
  #L201ee4.  v0[v3]:= v4;
  #L201ee8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L201eee.  v3:= temp @kind object;
  #L201ef0.  return v3 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.b.g1` v1 @kind this) @signature `Le/e/a/b/f/b/g1;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L201e28.  v0:= v1.`e.e.a.b.f.b.g1.d` @type ^`int`;
  #L201e2c.  return v0;
}
