record `e.e.a.b.f.j.t6` @kind class @AccessFlag FINAL {
}
global `e.e.a.b.f.j.s6` `@@e.e.a.b.f.j.t6.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/j/t6;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L232cc8.  call temp:= `a`() @signature `Le/e/a/b/f/j/r6;.a:()Z` @kind static;
  #L232cce.  v0:= temp;
  #L232cd0.  if v0 == 0 then goto L232ce4;
  #L232cd4.  call temp:= `b`() @signature `Le/e/a/b/f/j/r6;.b:()Z` @kind static;
  #L232cda.  v0:= temp;
  #L232cdc.  if v0 == 0 then goto L232ce4;
  #L232ce0.  v0:= 1I;
  #L232ce2.  goto L232ce6;
  #L232ce4.  v0:= 0I;
  #L232ce6.  if v0 == 0 then goto L232d02;
  #L232cea.  call temp:= `a`() @signature `Le/e/a/b/f/j/o2;.a:()Z` @kind static;
  #L232cf0.  v0:= temp;
  #L232cf2.  if v0 != 0 then goto L232d02;
  #L232cf6.  v0:= new `e.e.a.b.f.j.x6`;
  #L232cfa.  call `<init>`(v0) @signature `Le/e/a/b/f/j/x6;.<init>:()V` @kind direct;
  #L232d00.  goto L232d0c;
  #L232d02.  v0:= new `e.e.a.b.f.j.v6`;
  #L232d06.  call `<init>`(v0) @signature `Le/e/a/b/f/j/v6;.<init>:()V` @kind direct;
  #L232d0c.  `@@e.e.a.b.f.j.t6.a` @type ^`e.e.a.b.f.j.s6` := v0 @kind object;
  #L232d10.  return @kind void;
}
procedure `int` `a`(`int` v0 ) @signature `Le/e/a/b/f/j/t6;.a:(I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L232a48.  call temp:= `b`(v0) @signature `Le/e/a/b/f/j/t6;.b:(I)I` @kind static;
  #L232a4e.  v0:= temp;
  #L232a50.  return v0;
}
procedure `int` `a`(`int` v0 , `int` v1 ) @signature `Le/e/a/b/f/j/t6;.a:(II)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L232a64.  call temp:= `b`(v0, v1) @signature `Le/e/a/b/f/j/t6;.b:(II)I` @kind static;
  #L232a6a.  v0:= temp;
  #L232a6c.  return v0;
}
procedure `int` `a`(`int` v0 , `int` v1 , `int` v2 ) @signature `Le/e/a/b/f/j/t6;.a:(III)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L232a80.  call temp:= `b`(v0, v1, v2) @signature `Le/e/a/b/f/j/t6;.b:(III)I` @kind static;
  #L232a86.  v0:= temp;
  #L232a88.  return v0;
}
procedure `int` `a`(`java.lang.CharSequence` v8 @kind object) @signature `Le/e/a/b/f/j/t6;.a:(Ljava/lang/CharSequence;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L232a9c.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L232aa2.  v0:= temp;
  #L232aa4.  v1:= 0I;
  #L232aa6.  v2:= 0I;
  #L232aa8.  if v2 >= v0 then goto L232ac2;
  #L232aac.  call temp:= `charAt`(v8, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L232ab2.  v3:= temp;
  #L232ab4.  v4:= 128I;
  #L232ab8.  if v3 >= v4 then goto L232ac2;
  #L232abc.  v2:= v2 + 1;
  #L232ac0.  goto L232aa8;
  #L232ac2.  v3:= v0;
  #L232ac4.  if v2 >= v0 then goto L232b4e;
  #L232ac8.  call temp:= `charAt`(v8, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L232ace.  v4:= temp;
  #L232ad0.  v5:= 2048I;
  #L232ad4.  if v4 >= v5 then goto L232ae8;
  #L232ad8.  v4:= v4 - 127;
  #L232adc.  v4:= v4 ^>> 31;
  #L232ae0.  v3:= v3 + v4 @kind int;
  #L232ae2.  v2:= v2 + 1;
  #L232ae6.  goto L232ac4;
  #L232ae8.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L232aee.  v4:= temp;
  #L232af0.  if v2 >= v4 then goto L232b4c;
  #L232af4.  call temp:= `charAt`(v8, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L232afa.  v6:= temp;
  #L232afc.  if v6 >= v5 then goto L232b0c;
  #L232b00.  v6:= v6 - 127;
  #L232b04.  v6:= v6 ^>> 31;
  #L232b08.  v1:= v1 + v6 @kind int;
  #L232b0a.  goto L232b46;
  #L232b0c.  v1:= v1 + 2;
  #L232b10.  v7:= 55296I;
  #L232b16.  if v7 > v6 then goto L232b46;
  #L232b1a.  v7:= 57343I;
  #L232b20.  if v6 > v7 then goto L232b46;
  #L232b24.  call temp:= `codePointAt`(v8, v2) @signature `Ljava/lang/Character;.codePointAt:(Ljava/lang/CharSequence;I)I` @kind static;
  #L232b2a.  v6:= temp;
  #L232b2c.  v7:= 65536I;
  #L232b30.  if v6 < v7 then goto L232b3a;
  #L232b34.  v2:= v2 + 1;
  #L232b38.  goto L232b46;
  #L232b3a.  v8:= new `e.e.a.b.f.j.u6`;
  #L232b3e.  call `<init>`(v8, v2, v4) @signature `Le/e/a/b/f/j/u6;.<init>:(II)V` @kind direct;
  #L232b44.  throw v8;
  #L232b46.  v2:= v2 + 1;
  #L232b4a.  goto L232af0;
  #L232b4c.  v3:= v3 + v1 @kind int;
  #L232b4e.  if v3 < v0 then goto L232b54;
  #L232b52.  return v3;
  #L232b54.  v8:= new `java.lang.IllegalArgumentException`;
  #L232b58.  v0:= (`long`) v3 @kind i2l;
  #L232b5a.  v2:= 4294967296L;
  #L232b64.  v0:= v0 + v2 @kind long;
  #L232b66.  v2:= 54I;
  #L232b6a.  v3:= new `java.lang.StringBuilder`;
  #L232b6e.  call `<init>`(v3, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L232b74.  v2:= "UTF-8 length does not fit in int: " @kind object;
  #L232b78.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L232b7e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L232b84.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L232b8a.  v0:= temp @kind object;
  #L232b8c.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L232b92.  throw v8;
}
procedure `int` `a`(`java.lang.CharSequence` v1 @kind object, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/j/t6;.a:(Ljava/lang/CharSequence;[BII)I` @AccessFlag STATIC {
    temp;
    v0;

  #L232ba4.  v0:= `@@e.e.a.b.f.j.t6.a` @type ^`e.e.a.b.f.j.s6` @kind object;
  #L232ba8.  call temp:= `a`(v0, v1, v2, v3, v4) @signature `Le/e/a/b/f/j/s6;.a:(Ljava/lang/CharSequence;[BII)I` @kind virtual;
  #L232bae.  v1:= temp;
  #L232bb0.  return v1;
}
procedure `boolean` `a`(`byte`[] v3 @kind object) @signature `Le/e/a/b/f/j/t6;.a:([B)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L232a04.  v0:= `@@e.e.a.b.f.j.t6.a` @type ^`e.e.a.b.f.j.s6` @kind object;
  #L232a08.  v1:= length @variable v3;
  #L232a0a.  v2:= 0I;
  #L232a0c.  call temp:= `a`(v0, v3, v2, v1) @signature `Le/e/a/b/f/j/s6;.a:([BII)Z` @kind virtual;
  #L232a12.  v3:= temp;
  #L232a14.  return v3;
}
procedure `boolean` `a`(`byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/j/t6;.a:([BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L232a28.  v0:= `@@e.e.a.b.f.j.t6.a` @type ^`e.e.a.b.f.j.s6` @kind object;
  #L232a2c.  call temp:= `a`(v0, v1, v2, v3) @signature `Le/e/a/b/f/j/s6;.a:([BII)Z` @kind virtual;
  #L232a32.  v1:= temp;
  #L232a34.  return v1;
}
procedure `int` `b`(`int` v1 ) @signature `Le/e/a/b/f/j/t6;.b:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L232be0.  v0:= -12I;
  #L232be4.  if v1 <= v0 then goto L232bea;
  #L232be8.  v1:= -1I;
  #L232bea.  return v1;
}
procedure `int` `b`(`int` v1 , `int` v2 ) @signature `Le/e/a/b/f/j/t6;.b:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L232bfc.  v0:= -12I;
  #L232c00.  if v1 > v0 then goto L232c16;
  #L232c04.  v0:= -65I;
  #L232c08.  if v2 <= v0 then goto L232c0e;
  #L232c0c.  goto L232c16;
  #L232c0e.  v2:= v2 ^< 8;
  #L232c12.  v1:= v1 ^~ v2 @kind int;
  #L232c14.  return v1;
  #L232c16.  v1:= -1I;
  #L232c18.  return v1;
}
procedure `int` `b`(`int` v1 , `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/j/t6;.b:(III)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L232c2c.  v0:= -12I;
  #L232c30.  if v1 > v0 then goto L232c50;
  #L232c34.  v0:= -65I;
  #L232c38.  if v2 > v0 then goto L232c50;
  #L232c3c.  if v3 <= v0 then goto L232c42;
  #L232c40.  goto L232c50;
  #L232c42.  v2:= v2 ^< 8;
  #L232c46.  v1:= v1 ^~ v2 @kind int;
  #L232c48.  v2:= v3 ^< 16;
  #L232c4c.  v1:= v1 ^~ v2 @kind int;
  #L232c4e.  return v1;
  #L232c50.  v1:= -1I;
  #L232c52.  return v1;
}
procedure `int` `b`(`byte`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Le/e/a/b/f/j/t6;.b:([BII)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L232bc4.  call temp:= `c`(v0, v1, v2) @signature `Le/e/a/b/f/j/t6;.c:([BII)I` @kind static;
  #L232bca.  v0:= temp;
  #L232bcc.  return v0;
}
procedure `int` `c`(`byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Le/e/a/b/f/j/t6;.c:([BII)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L232c64.  v0:= v4 + -1;
  #L232c68.  v0:= v3[v0] @kind byte;
  #L232c6c.  v5:= v5 - v4 @kind int;
  #L232c6e.  if v5 == 0 then goto L232cac;
  #L232c72.  v1:= 1I;
  #L232c74.  if v5 == v1 then goto L232c9e;
  #L232c78.  v2:= 2I;
  #L232c7a.  if v5 != v2 then goto L232c92;
  #L232c7e.  v5:= v3[v4] @kind byte;
  #L232c82.  v4:= v4 + v1 @kind int;
  #L232c84.  v3:= v3[v4] @kind byte;
  #L232c88.  call temp:= `b`(v0, v5, v3) @signature `Le/e/a/b/f/j/t6;.b:(III)I` @kind static;
  #L232c8e.  v3:= temp;
  #L232c90.  return v3;
  #L232c92.  v3:= new `java.lang.AssertionError`;
  #L232c96.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L232c9c.  throw v3;
  #L232c9e.  v3:= v3[v4] @kind byte;
  #L232ca2.  call temp:= `b`(v0, v3) @signature `Le/e/a/b/f/j/t6;.b:(II)I` @kind static;
  #L232ca8.  v3:= temp;
  #L232caa.  return v3;
  #L232cac.  call temp:= `b`(v0) @signature `Le/e/a/b/f/j/t6;.b:(I)I` @kind static;
  #L232cb2.  v3:= temp;
  #L232cb4.  return v3;
}
