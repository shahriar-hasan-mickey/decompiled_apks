record `e.e.a.b.f.m.b` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v5 , `int` v6 , `java.lang.String` v7 @kind object) @signature `Le/e/a/b/f/m/b;.a:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L263a94.  if v5 < 0 then goto L263aa0;
  #L263a98.  if v5 < v6 then goto L263a9e;
  #L263a9c.  goto L263aa0;
  #L263a9e.  return v5;
  #L263aa0.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L263aa4.  v0:= "index" @kind object;
  #L263aa8.  v1:= 1I;
  #L263aaa.  v2:= 0I;
  #L263aac.  v3:= 2I;
  #L263aae.  if v5 < 0 then goto L263b18;
  #L263ab2.  if v6 >= 0 then goto L263ae8;
  #L263ab6.  v5:= new `java.lang.IllegalArgumentException`;
  #L263aba.  v7:= new `java.lang.StringBuilder`;
  #L263abe.  v0:= 26I;
  #L263ac2.  call `<init>`(v7, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L263ac8.  v0:= "negative size: " @kind object;
  #L263acc.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L263ad2.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L263ad8.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L263ade.  v6:= temp @kind object;
  #L263ae0.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L263ae6.  throw v5;
  #L263ae8.  v4:= 3I;
  #L263aea.  v4:= new `java.lang.Object`[v4];
  #L263aee.  v4[v2]:= v0 @kind object;
  #L263af2.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L263af8.  v5:= temp @kind object;
  #L263afa.  v4[v1]:= v5 @kind object;
  #L263afe.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L263b04.  v5:= temp @kind object;
  #L263b06.  v4[v3]:= v5 @kind object;
  #L263b0a.  v5:= "%s (%s) must be less than size (%s)" @kind object;
  #L263b0e.  call temp:= `a`(v5, v4) @signature `Le/e/a/b/f/m/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L263b14.  v5:= temp @kind object;
  #L263b16.  goto L263b38;
  #L263b18.  v6:= new `java.lang.Object`[v3];
  #L263b1c.  v6[v2]:= v0 @kind object;
  #L263b20.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L263b26.  v5:= temp @kind object;
  #L263b28.  v6[v1]:= v5 @kind object;
  #L263b2c.  v5:= "%s (%s) must not be negative" @kind object;
  #L263b30.  call temp:= `a`(v5, v6) @signature `Le/e/a/b/f/m/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L263b36.  v5:= temp @kind object;
  #L263b38.  call `<init>`(v7, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L263b3e.  throw v7;
}
procedure `void` `a`(`int` v2 , `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/m/b;.a:(III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L263cec.  if v2 < 0 then goto L263cfc;
  #L263cf0.  if v3 < v2 then goto L263cfc;
  #L263cf4.  if v3 <= v4 then goto L263cfa;
  #L263cf8.  goto L263cfc;
  #L263cfa.  return @kind void;
  #L263cfc.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L263d00.  if v2 < 0 then goto L263d50;
  #L263d04.  if v2 > v4 then goto L263d50;
  #L263d08.  if v3 < 0 then goto L263d42;
  #L263d0c.  if v3 <= v4 then goto L263d12;
  #L263d10.  goto L263d42;
  #L263d12.  v4:= 2I;
  #L263d14.  v4:= new `java.lang.Object`[v4];
  #L263d18.  v1:= 0I;
  #L263d1a.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L263d20.  v3:= temp @kind object;
  #L263d22.  v4[v1]:= v3 @kind object;
  #L263d26.  v3:= 1I;
  #L263d28.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L263d2e.  v2:= temp @kind object;
  #L263d30.  v4[v3]:= v2 @kind object;
  #L263d34.  v2:= "end index (%s) must not be less than start index (%s)" @kind object;
  #L263d38.  call temp:= `a`(v2, v4) @signature `Le/e/a/b/f/m/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L263d3e.  v2:= temp @kind object;
  #L263d40.  goto L263d5c;
  #L263d42.  v2:= "end index" @kind object;
  #L263d46.  call temp:= `c`(v3, v4, v2) @signature `Le/e/a/b/f/m/b;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L263d4c.  v2:= temp @kind object;
  #L263d4e.  goto L263d5c;
  #L263d50.  v3:= "start index" @kind object;
  #L263d54.  call temp:= `c`(v2, v4, v3) @signature `Le/e/a/b/f/m/b;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L263d5a.  v2:= temp @kind object;
  #L263d5c.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L263d62.  throw v0;
}
procedure `void` `a`(`boolean` v0 , `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/m/b;.a:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L263cc4.  if v0 == 0 then goto L263cca;
  #L263cc8.  return @kind void;
  #L263cca.  v0:= new `java.lang.IllegalStateException`;
  #L263cce.  v1:= (`java.lang.String`) v1 @kind object;
  #L263cd2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L263cd8.  throw v0;
}
procedure `int` `b`(`int` v1 , `int` v2 , `java.lang.String` v3 @kind object) @signature `Le/e/a/b/f/m/b;.b:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L263b50.  if v1 < 0 then goto L263b5a;
  #L263b54.  if v1 > v2 then goto L263b5a;
  #L263b58.  return v1;
  #L263b5a.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L263b5e.  v0:= "index" @kind object;
  #L263b62.  call temp:= `c`(v1, v2, v0) @signature `Le/e/a/b/f/m/b;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L263b68.  v1:= temp @kind object;
  #L263b6a.  call `<init>`(v3, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L263b70.  throw v3;
}
procedure `java.lang.String` `c`(`int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Le/e/a/b/f/m/b;.c:(IILjava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L263b84.  v0:= 1I;
  #L263b86.  v1:= 0I;
  #L263b88.  v2:= 2I;
  #L263b8a.  if v4 >= 0 then goto L263bb0;
  #L263b8e.  v5:= new `java.lang.Object`[v2];
  #L263b92.  v5[v1]:= v6 @kind object;
  #L263b96.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L263b9c.  v4:= temp @kind object;
  #L263b9e.  v5[v0]:= v4 @kind object;
  #L263ba2.  v4:= "%s (%s) must not be negative" @kind object;
  #L263ba6.  call temp:= `a`(v4, v5) @signature `Le/e/a/b/f/m/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L263bac.  v4:= temp @kind object;
  #L263bae.  return v4 @kind object;
  #L263bb0.  if v5 < 0 then goto L263be4;
  #L263bb4.  v3:= 3I;
  #L263bb6.  v3:= new `java.lang.Object`[v3];
  #L263bba.  v3[v1]:= v6 @kind object;
  #L263bbe.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L263bc4.  v4:= temp @kind object;
  #L263bc6.  v3[v0]:= v4 @kind object;
  #L263bca.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L263bd0.  v4:= temp @kind object;
  #L263bd2.  v3[v2]:= v4 @kind object;
  #L263bd6.  v4:= "%s (%s) must not be greater than size (%s)" @kind object;
  #L263bda.  call temp:= `a`(v4, v3) @signature `Le/e/a/b/f/m/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L263be0.  v4:= temp @kind object;
  #L263be2.  return v4 @kind object;
  #L263be4.  v4:= new `java.lang.IllegalArgumentException`;
  #L263be8.  v6:= new `java.lang.StringBuilder`;
  #L263bec.  v0:= 26I;
  #L263bf0.  call `<init>`(v6, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L263bf6.  v0:= "negative size: " @kind object;
  #L263bfa.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L263c00.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L263c06.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L263c0c.  v5:= temp @kind object;
  #L263c0e.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L263c14.  throw v4;
}
