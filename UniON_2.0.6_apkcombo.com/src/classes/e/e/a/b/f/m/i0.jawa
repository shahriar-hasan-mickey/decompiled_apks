record `e.e.a.b.f.m.i0` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.AbstractCollection` @kind class, `java.io.Serializable` @kind interface {
}
global `java.lang.Object`[] `@@e.e.a.b.f.m.i0.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/m/i0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L266abc.  v0:= 0I;
  #L266abe.  v0:= new `java.lang.Object`[v0];
  #L266ac2.  `@@e.e.a.b.f.m.i0.b` @type ^`java.lang.Object`[] := v0 @kind object;
  #L266ac6.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.m.i0` v0 @kind this) @signature `Le/e/a/b/f/m/i0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L266ad8.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L266ade.  return @kind void;
}
procedure `int` `a`(`e.e.a.b.f.m.i0` v0 @kind this, `java.lang.Object`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/m/i0;.a:([Ljava/lang/Object;I)I` @AccessFlag  {
    temp;

  #L2669f0.  v1:= 0I;
  #L2669f2.  throw v1;
}
procedure `boolean` `add`(`e.e.a.b.f.m.i0` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/m/i0;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L26692c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L266930.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L266936.  throw v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.m.i0` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/m/i0;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L266948.  v1:= new `java.lang.UnsupportedOperationException`;
  #L26694c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L266952.  throw v1;
}
procedure `int` `c`(`e.e.a.b.f.m.i0` v1 @kind this) @signature `Le/e/a/b/f/m/i0;.c:()I` @AccessFlag  {
    temp;
    v0;

  #L2669d4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2669d8.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2669de.  throw v0;
}
procedure `void` `clear`(`e.e.a.b.f.m.i0` v1 @kind this) @signature `Le/e/a/b/f/m/i0;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L266af0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L266af4.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L266afa.  throw v0;
}
procedure `boolean` `contains`(`java.lang.Object` v0 @kind object) @signature `Le/e/a/b/f/m/i0;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `d`(`e.e.a.b.f.m.i0` v1 @kind this) @signature `Le/e/a/b/f/m/i0;.d:()I` @AccessFlag  {
    temp;
    v0;

  #L2669b8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2669bc.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2669c2.  throw v0;
}
procedure `boolean` `remove`(`e.e.a.b.f.m.i0` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/m/i0;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L266964.  v1:= new `java.lang.UnsupportedOperationException`;
  #L266968.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L26696e.  throw v1;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.m.i0` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/m/i0;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L266980.  v1:= new `java.lang.UnsupportedOperationException`;
  #L266984.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L26698a.  throw v1;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.m.i0` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/m/i0;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L26699c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2669a0.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2669a6.  throw v1;
}
procedure `java.lang.Object`[] `toArray`(`e.e.a.b.f.m.i0` v1 @kind this) @signature `Le/e/a/b/f/m/i0;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L266a04.  v0:= `@@e.e.a.b.f.m.i0.b` @type ^`java.lang.Object`[] @kind object;
  #L266a08.  call temp:= `toArray`(v1, v0) @signature `Le/e/a/b/f/m/i0;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L266a0e.  v0:= temp @kind object;
  #L266a10.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`e.e.a.b.f.m.i0` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Le/e/a/b/f/m/i0;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L266a24.  v0:= 0I;
  #L266a26.  if v4 == 0 then goto L266a96;
  #L266a2a.  call temp:= `size`(v3) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L266a30.  v1:= temp;
  #L266a32.  v2:= length @variable v4;
  #L266a34.  if v2 >= v1 then goto L266a84;
  #L266a38.  call temp:= `zzb`(v3) @signature `Le/e/a/b/f/m/i0;.zzb:()[Ljava/lang/Object;` @kind virtual;
  #L266a3e.  v0:= temp @kind object;
  #L266a40.  if v0 != 0 then goto L266a62;
  #L266a44.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L266a4a.  v4:= temp @kind object;
  #L266a4c.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L266a52.  v4:= temp @kind object;
  #L266a54.  call temp:= `newInstance`(v4, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L266a5a.  v4:= temp @kind object;
  #L266a5c.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L266a60.  goto L266a8c;
  #L266a62.  call temp:= `d`(v3) @signature `Le/e/a/b/f/m/i0;.d:()I` @kind virtual;
  #L266a68.  v1:= temp;
  #L266a6a.  call temp:= `c`(v3) @signature `Le/e/a/b/f/m/i0;.c:()I` @kind virtual;
  #L266a70.  v2:= temp;
  #L266a72.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L266a78.  v4:= temp @kind object;
  #L266a7a.  call temp:= `copyOfRange`(v0, v1, v2, v4) @signature `Ljava/util/Arrays;.copyOfRange:([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;` @kind static;
  #L266a80.  v4:= temp @kind object;
  #L266a82.  return v4 @kind object;
  #L266a84.  if v2 <= v1 then goto L266a8c;
  #L266a88.  v4[v1]:= v0 @kind object;
  #L266a8c.  v0:= 0I;
  #L266a8e.  call temp:= `a`(v3, v4, v0) @signature `Le/e/a/b/f/m/i0;.a:([Ljava/lang/Object;I)I` @kind virtual;
  #L266a94.  return v4 @kind object;
  #L266a96.  throw v0;
}
procedure `java.lang.Object`[] `zzb`(`e.e.a.b.f.m.i0` v1 @kind this) @signature `Le/e/a/b/f/m/i0;.zzb:()[Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L266aa8.  v0:= 0I;
  #L266aaa.  return v0 @kind object;
}
