record `e.e.a.b.f.j.q4` @kind class @AccessFlag FINAL extends `e.e.a.b.f.j.l2` @kind class, `e.e.a.b.f.j.y3` @kind interface, `e.e.a.b.f.j.l5` @kind interface, `java.util.RandomAccess` @kind interface {
  `long`[] `e.e.a.b.f.j.q4.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.j.q4.d` @AccessFlag PRIVATE;
}
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/j/q4;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2286a8.  v0:= new `e.e.a.b.f.j.q4`;
  #L2286ac.  v1:= 0I;
  #L2286ae.  v2:= new `long`[v1];
  #L2286b2.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/j/q4;.<init>:([JI)V` @kind direct;
  #L2286b8.  call `s`(v0) @signature `Le/e/a/b/f/j/l2;.s:()V` @kind virtual;
  #L2286be.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.j.q4` v2 @kind this) @signature `Le/e/a/b/f/j/q4;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2286d0.  v0:= 10I;
  #L2286d4.  v0:= new `long`[v0];
  #L2286d8.  v1:= 0I;
  #L2286da.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/j/q4;.<init>:([JI)V` @kind direct;
  #L2286e0.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.j.q4` v0 @kind this, `long`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/j/q4;.<init>:([JI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2286f4.  call `<init>`(v0) @signature `Le/e/a/b/f/j/l2;.<init>:()V` @kind direct;
  #L2286fa.  v0.`e.e.a.b.f.j.q4.c` @type ^`long`[] := v1 @kind object;
  #L2286fe.  v0.`e.e.a.b.f.j.q4.d` @type ^`int` := v2;
  #L228702.  return @kind void;
}
procedure `void` `h`(`e.e.a.b.f.j.q4` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/j/q4;.h:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L228814.  if v2 < 0 then goto L228822;
  #L228818.  v0:= v1.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L22881c.  if v2 >= v0 then goto L228822;
  #L228820.  return @kind void;
  #L228822.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L228826.  call temp:= `i`(v1, v2) @signature `Le/e/a/b/f/j/q4;.i:(I)Ljava/lang/String;` @kind direct;
  #L22882c.  v2:= temp @kind object;
  #L22882e.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L228834.  throw v0;
}
procedure `java.lang.String` `i`(`e.e.a.b.f.j.q4` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/j/q4;.i:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L22863c.  v0:= v3.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L228640.  v1:= new `java.lang.StringBuilder`;
  #L228644.  v2:= 35I;
  #L228648.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L22864e.  v2:= "Index:" @kind object;
  #L228652.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L228658.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L22865e.  v4:= ", Size:" @kind object;
  #L228662.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L228668.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L22866e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L228674.  v4:= temp @kind object;
  #L228676.  return v4 @kind object;
}
procedure `long` `a`(`e.e.a.b.f.j.q4` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/j/q4;.a:(I)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L228688.  call `h`(v3, v4) @signature `Le/e/a/b/f/j/q4;.h:(I)V` @kind direct;
  #L22868e.  v0:= v3.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L228692.  v1:= v0[v4] @kind wide;
  #L228696.  return v1 @kind wide;
}
procedure `void` `add`(`e.e.a.b.f.j.q4` v5 @kind this, `int` v6 , `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/j/q4;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L228714.  v7:= (`java.lang.Long`) v7 @kind object;
  #L228718.  call temp:= `longValue`(v7) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L22871e.  v0:= temp @kind wide;
  #L228720.  call `d`(v5) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L228726.  if v6 < 0 then goto L22879c;
  #L22872a.  v7:= v5.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L22872e.  if v6 > v7 then goto L22879c;
  #L228732.  v2:= v5.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L228736.  v3:= length @variable v2;
  #L228738.  if v7 >= v3 then goto L22874a;
  #L22873c.  v3:= v6 + 1;
  #L228740.  v7:= v7 - v6 @kind int;
  #L228742.  call `arraycopy`(v2, v6, v2, v3, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L228748.  goto L22877a;
  #L22874a.  v7:= v7 * 3;
  #L22874e.  v7:= v7 / 2;
  #L228752.  v7:= v7 + 1;
  #L228756.  v7:= new `long`[v7];
  #L22875a.  v3:= 0I;
  #L22875c.  call `arraycopy`(v2, v3, v7, v3, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L228762.  v2:= v5.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L228766.  v3:= v6 + 1;
  #L22876a.  v4:= v5.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L22876e.  v4:= v4 - v6 @kind int;
  #L228770.  call `arraycopy`(v2, v6, v7, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L228776.  v5.`e.e.a.b.f.j.q4.c` @type ^`long`[] := v7 @kind object;
  #L22877a.  v7:= v5.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L22877e.  v7[v6]:= v0 @kind wide;
  #L228782.  v6:= v5.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L228786.  v6:= v6 + 1;
  #L22878a.  v5.`e.e.a.b.f.j.q4.d` @type ^`int` := v6;
  #L22878e.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L228792.  v6:= v6 + 1;
  #L228796.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L22879a.  return @kind void;
  #L22879c.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L2287a0.  call temp:= `i`(v5, v6) @signature `Le/e/a/b/f/j/q4;.i:(I)Ljava/lang/String;` @kind direct;
  #L2287a6.  v6:= temp @kind object;
  #L2287a8.  call `<init>`(v7, v6) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2287ae.  throw v7;
}
procedure `boolean` `add`(`e.e.a.b.f.j.q4` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/j/q4;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L228288.  v7:= (`java.lang.Long`) v7 @kind object;
  #L22828c.  call temp:= `longValue`(v7) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L228292.  v0:= temp @kind wide;
  #L228294.  call `d`(v6) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L22829a.  v7:= v6.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L22829e.  v2:= v6.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L2282a2.  v3:= length @variable v2;
  #L2282a4.  v4:= 1I;
  #L2282a6.  if v7 != v3 then goto L2282c4;
  #L2282aa.  v3:= v7 * 3;
  #L2282ae.  v3:= v3 / 2;
  #L2282b2.  v3:= v3 + v4 @kind int;
  #L2282b4.  v3:= new `long`[v3];
  #L2282b8.  v5:= 0I;
  #L2282ba.  call `arraycopy`(v2, v5, v3, v5, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2282c0.  v6.`e.e.a.b.f.j.q4.c` @type ^`long`[] := v3 @kind object;
  #L2282c4.  v7:= v6.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L2282c8.  v2:= v6.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L2282cc.  v3:= v2 + 1;
  #L2282d0.  v6.`e.e.a.b.f.j.q4.d` @type ^`int` := v3;
  #L2282d4.  v7[v2]:= v0 @kind wide;
  #L2282d8.  return v4;
}
procedure `boolean` `addAll`(`e.e.a.b.f.j.q4` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/j/q4;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2282ec.  call `d`(v5) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L2282f2.  call temp:= `a`(v6) @signature `Le/e/a/b/f/j/s3;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2282f8.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.j.q4` @kind boolean;
  #L2282fc.  if v0 != 0 then goto L22830a;
  #L228300.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/j/l2;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L228306.  v6:= temp;
  #L228308.  return v6;
  #L22830a.  v6:= (`e.e.a.b.f.j.q4`) v6 @kind object;
  #L22830e.  v0:= v6.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L228312.  v1:= 0I;
  #L228314.  if v0 != 0 then goto L22831a;
  #L228318.  return v1;
  #L22831a.  v2:= 2147483647I;
  #L228320.  v3:= v5.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L228324.  v2:= v2 - v3 @kind int;
  #L228326.  if v2 < v0 then goto L22836a;
  #L22832a.  v3:= v3 + v0 @kind int;
  #L22832c.  v0:= v5.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L228330.  v2:= length @variable v0;
  #L228332.  if v3 <= v2 then goto L228342;
  #L228336.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([JI)[J` @kind static;
  #L22833c.  v0:= temp @kind object;
  #L22833e.  v5.`e.e.a.b.f.j.q4.c` @type ^`long`[] := v0 @kind object;
  #L228342.  v0:= v6.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L228346.  v2:= v5.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L22834a.  v4:= v5.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L22834e.  v6:= v6.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L228352.  call `arraycopy`(v0, v1, v2, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L228358.  v5.`e.e.a.b.f.j.q4.d` @type ^`int` := v3;
  #L22835c.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L228360.  v0:= 1I;
  #L228362.  v6:= v6 + v0 @kind int;
  #L228364.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L228368.  return v0;
  #L22836a.  v6:= new `java.lang.OutOfMemoryError`;
  #L22836e.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L228374.  throw v6;
}
procedure `e.e.a.b.f.j.y3` `b`(`e.e.a.b.f.j.q4` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/j/q4;.b:(I)Le/e/a/b/f/j/y3;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L228490.  v0:= v2.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L228494.  if v3 < v0 then goto L2284b4;
  #L228498.  v0:= new `e.e.a.b.f.j.q4`;
  #L22849c.  v1:= v2.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L2284a0.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([JI)[J` @kind static;
  #L2284a6.  v3:= temp @kind object;
  #L2284a8.  v1:= v2.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L2284ac.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/j/q4;.<init>:([JI)V` @kind direct;
  #L2284b2.  return v0 @kind object;
  #L2284b4.  v3:= new `java.lang.IllegalArgumentException`;
  #L2284b8.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L2284be.  throw v3;
}
procedure `boolean` `contains`(`e.e.a.b.f.j.q4` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/j/q4;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L228388.  call temp:= `indexOf`(v1, v2) @signature `Le/e/a/b/f/j/q4;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L22838e.  v2:= temp;
  #L228390.  v0:= -1I;
  #L228392.  if v2 == v0 then goto L22839a;
  #L228396.  v2:= 1I;
  #L228398.  return v2;
  #L22839a.  v2:= 0I;
  #L22839c.  return v2;
}
procedure `boolean` `equals`(`e.e.a.b.f.j.q4` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Le/e/a/b/f/j/q4;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2283b0.  v0:= 1I;
  #L2283b2.  if v8 != v9 then goto L2283b8;
  #L2283b6.  return v0;
  #L2283b8.  v1:= instanceof @variable v9 @type ^`e.e.a.b.f.j.q4` @kind boolean;
  #L2283bc.  if v1 != 0 then goto L2283ca;
  #L2283c0.  call temp:= `equals`(v8, v9) @signature `Le/e/a/b/f/j/l2;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L2283c6.  v9:= temp;
  #L2283c8.  return v9;
  #L2283ca.  v9:= (`e.e.a.b.f.j.q4`) v9 @kind object;
  #L2283ce.  v1:= v8.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L2283d2.  v2:= v9.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L2283d6.  v3:= 0I;
  #L2283d8.  if v1 == v2 then goto L2283de;
  #L2283dc.  return v3;
  #L2283de.  v9:= v9.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L2283e2.  v1:= 0I;
  #L2283e4.  v2:= v8.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L2283e8.  if v1 >= v2 then goto L228408;
  #L2283ec.  v2:= v8.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L2283f0.  v4:= v2[v1] @kind wide;
  #L2283f4.  v6:= v9[v1] @kind wide;
  #L2283f8.  v2:= lcmp(v4, v6);
  #L2283fc.  if v2 == 0 then goto L228402;
  #L228400.  return v3;
  #L228402.  v1:= v1 + 1;
  #L228406.  goto L2283e4;
  #L228408.  return v0;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.j.q4` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/j/q4;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L228574.  call temp:= `a`(v2, v3) @signature `Le/e/a/b/f/j/q4;.a:(I)J` @kind virtual;
  #L22857a.  v0:= temp @kind wide;
  #L22857c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L228582.  v3:= temp @kind object;
  #L228584.  return v3 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.j.q4` v5 @kind this) @signature `Le/e/a/b/f/j/q4;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2284d0.  v0:= 1I;
  #L2284d2.  v1:= 0I;
  #L2284d4.  v2:= v5.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L2284d8.  if v1 >= v2 then goto L2284f8;
  #L2284dc.  v0:= v0 * 31;
  #L2284e0.  v2:= v5.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L2284e4.  v3:= v2[v1] @kind wide;
  #L2284e8.  call temp:= `a`(v3) @signature `Le/e/a/b/f/j/s3;.a:(J)I` @kind static;
  #L2284ee.  v2:= temp;
  #L2284f0.  v0:= v0 + v2 @kind int;
  #L2284f2.  v1:= v1 + 1;
  #L2284f6.  goto L2284d4;
  #L2284f8.  return v0;
}
procedure `int` `indexOf`(`e.e.a.b.f.j.q4` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Le/e/a/b/f/j/q4;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L22850c.  v0:= instanceof @variable v8 @type ^`java.lang.Long` @kind boolean;
  #L228510.  v1:= -1I;
  #L228512.  if v0 != 0 then goto L228518;
  #L228516.  return v1;
  #L228518.  v8:= (`java.lang.Long`) v8 @kind object;
  #L22851c.  call temp:= `longValue`(v8) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L228522.  v2:= temp @kind wide;
  #L228524.  call temp:= `size`(v7) @signature `Le/e/a/b/f/j/q4;.size:()I` @kind virtual;
  #L22852a.  v8:= temp;
  #L22852c.  v0:= 0I;
  #L22852e.  if v0 >= v8 then goto L22854a;
  #L228532.  v4:= v7.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L228536.  v5:= v4[v0] @kind wide;
  #L22853a.  v4:= lcmp(v5, v2);
  #L22853e.  if v4 != 0 then goto L228544;
  #L228542.  return v0;
  #L228544.  v0:= v0 + 1;
  #L228548.  goto L22852e;
  #L22854a.  return v1;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.j.q4` v5 @kind this, `int` v6 ) @signature `Le/e/a/b/f/j/q4;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L228598.  call `d`(v5) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L22859e.  call `h`(v5, v6) @signature `Le/e/a/b/f/j/q4;.h:(I)V` @kind direct;
  #L2285a4.  v0:= v5.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L2285a8.  v1:= v0[v6] @kind wide;
  #L2285ac.  v3:= v5.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L2285b0.  v4:= v3 + -1;
  #L2285b4.  if v6 >= v4 then goto L2285c8;
  #L2285b8.  v4:= v6 + 1;
  #L2285bc.  v3:= v3 - v6 @kind int;
  #L2285be.  v3:= v3 + -1;
  #L2285c2.  call `arraycopy`(v0, v4, v0, v6, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2285c8.  v6:= v5.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L2285cc.  v6:= v6 + -1;
  #L2285d0.  v5.`e.e.a.b.f.j.q4.d` @type ^`int` := v6;
  #L2285d4.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L2285d8.  v6:= v6 + 1;
  #L2285dc.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L2285e0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2285e6.  v6:= temp @kind object;
  #L2285e8.  return v6 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.j.q4` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/j/q4;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L22841c.  call `d`(v5) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L228422.  v0:= 0I;
  #L228424.  v1:= 0I;
  #L228426.  v2:= v5.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L22842a.  if v1 >= v2 then goto L22847e;
  #L22842e.  v2:= v5.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L228432.  v3:= v2[v1] @kind wide;
  #L228436.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L22843c.  v2:= temp @kind object;
  #L22843e.  call temp:= `equals`(v6, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L228444.  v2:= temp;
  #L228446.  if v2 == 0 then goto L228478;
  #L22844a.  v6:= v5.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L22844e.  v0:= v1 + 1;
  #L228452.  v2:= v5.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L228456.  v2:= v2 - v1 @kind int;
  #L228458.  v3:= 1I;
  #L22845a.  v2:= v2 - v3 @kind int;
  #L22845c.  call `arraycopy`(v6, v0, v6, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L228462.  v6:= v5.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L228466.  v6:= v6 - v3 @kind int;
  #L228468.  v5.`e.e.a.b.f.j.q4.d` @type ^`int` := v6;
  #L22846c.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L228470.  v6:= v6 + v3 @kind int;
  #L228472.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L228476.  return v3;
  #L228478.  v1:= v1 + 1;
  #L22847c.  goto L228426;
  #L22847e.  return v0;
}
procedure `void` `removeRange`(`e.e.a.b.f.j.q4` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/j/q4;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L2287c0.  call `d`(v2) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L2287c6.  if v4 < v3 then goto L2287f4;
  #L2287ca.  v0:= v2.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L2287ce.  v1:= v2.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L2287d2.  v1:= v1 - v4 @kind int;
  #L2287d4.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2287da.  v0:= v2.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L2287de.  v4:= v4 - v3 @kind int;
  #L2287e0.  v0:= v0 - v4 @kind int;
  #L2287e2.  v2.`e.e.a.b.f.j.q4.d` @type ^`int` := v0;
  #L2287e6.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L2287ea.  v3:= v3 + 1;
  #L2287ee.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L2287f2.  return @kind void;
  #L2287f4.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L2287f8.  v4:= "toIndex < fromIndex" @kind object;
  #L2287fc.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L228802.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.j.q4` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/j/q4;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2285fc.  v6:= (`java.lang.Long`) v6 @kind object;
  #L228600.  call temp:= `longValue`(v6) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L228606.  v0:= temp @kind wide;
  #L228608.  call `d`(v4) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L22860e.  call `h`(v4, v5) @signature `Le/e/a/b/f/j/q4;.h:(I)V` @kind direct;
  #L228614.  v6:= v4.`e.e.a.b.f.j.q4.c` @type ^`long`[] @kind object;
  #L228618.  v2:= v6[v5] @kind wide;
  #L22861c.  v6[v5]:= v0 @kind wide;
  #L228620.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L228626.  v5:= temp @kind object;
  #L228628.  return v5 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.j.q4` v1 @kind this) @signature `Le/e/a/b/f/j/q4;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L22855c.  v0:= v1.`e.e.a.b.f.j.q4.d` @type ^`int`;
  #L228560.  return v0;
}
