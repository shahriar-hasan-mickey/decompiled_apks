record `e.e.a.b.f.u.r6` @kind class @AccessFlag FINAL extends `e.e.a.b.f.u.e3` @kind class, `java.util.RandomAccess` @kind interface {
  `java.lang.Object`[] `e.e.a.b.f.u.r6.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.u.r6.d` @AccessFlag PRIVATE;
}
global `e.e.a.b.f.u.r6` `@@e.e.a.b.f.u.r6.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/u/r6;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L338704.  v0:= new `e.e.a.b.f.u.r6`;
  #L338708.  v1:= 0I;
  #L33870a.  v2:= new `java.lang.Object`[v1];
  #L33870e.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/u/r6;.<init>:([Ljava/lang/Object;I)V` @kind direct;
  #L338714.  `@@e.e.a.b.f.u.r6.e` @type ^`e.e.a.b.f.u.r6` := v0 @kind object;
  #L338718.  call `zzb`(v0) @signature `Le/e/a/b/f/u/e3;.zzb:()V` @kind virtual;
  #L33871e.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.u.r6` v0 @kind this, `java.lang.Object`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/u/r6;.<init>:([Ljava/lang/Object;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L338730.  call `<init>`(v0) @signature `Le/e/a/b/f/u/e3;.<init>:()V` @kind direct;
  #L338736.  v0.`e.e.a.b.f.u.r6.c` @type ^`java.lang.Object`[] := v1 @kind object;
  #L33873a.  v0.`e.e.a.b.f.u.r6.d` @type ^`int` := v2;
  #L33873e.  return @kind void;
}
procedure `void` `b`(`e.e.a.b.f.u.r6` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/u/r6;.b:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L3387f0.  if v2 < 0 then goto L3387fe;
  #L3387f4.  v0:= v1.`e.e.a.b.f.u.r6.d` @type ^`int`;
  #L3387f8.  if v2 >= v0 then goto L3387fe;
  #L3387fc.  return @kind void;
  #L3387fe.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L338802.  call temp:= `h`(v1, v2) @signature `Le/e/a/b/f/u/r6;.h:(I)Ljava/lang/String;` @kind direct;
  #L338808.  v2:= temp @kind object;
  #L33880a.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L338810.  throw v0;
}
procedure `e.e.a.b.f.u.r6` `c`() @signature `Le/e/a/b/f/u/r6;.c:()Le/e/a/b/f/u/r6;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3385d4.  v0:= `@@e.e.a.b.f.u.r6.e` @type ^`e.e.a.b.f.u.r6` @kind object;
  #L3385d8.  return v0 @kind object;
}
procedure `java.lang.String` `h`(`e.e.a.b.f.u.r6` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/u/r6;.h:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3386b8.  v0:= v3.`e.e.a.b.f.u.r6.d` @type ^`int`;
  #L3386bc.  v1:= new `java.lang.StringBuilder`;
  #L3386c0.  v2:= 35I;
  #L3386c4.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3386ca.  v2:= "Index:" @kind object;
  #L3386ce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3386d4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3386da.  v4:= ", Size:" @kind object;
  #L3386de.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3386e4.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3386ea.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3386f0.  v4:= temp @kind object;
  #L3386f2.  return v4 @kind object;
}
procedure `e.e.a.b.f.u.c5` `a`(`e.e.a.b.f.u.r6` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/u/r6;.a:(I)Le/e/a/b/f/u/c5;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L338594.  v0:= v2.`e.e.a.b.f.u.r6.d` @type ^`int`;
  #L338598.  if v3 < v0 then goto L3385b8;
  #L33859c.  v0:= v2.`e.e.a.b.f.u.r6.c` @type ^`java.lang.Object`[] @kind object;
  #L3385a0.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L3385a6.  v3:= temp @kind object;
  #L3385a8.  v0:= new `e.e.a.b.f.u.r6`;
  #L3385ac.  v1:= v2.`e.e.a.b.f.u.r6.d` @type ^`int`;
  #L3385b0.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/u/r6;.<init>:([Ljava/lang/Object;I)V` @kind direct;
  #L3385b6.  return v0 @kind object;
  #L3385b8.  v3:= new `java.lang.IllegalArgumentException`;
  #L3385bc.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3385c2.  throw v3;
}
procedure `void` `add`(`e.e.a.b.f.u.r6` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/u/r6;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L338750.  call `d`(v4) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L338756.  if v5 < 0 then goto L3387cc;
  #L33875a.  v0:= v4.`e.e.a.b.f.u.r6.d` @type ^`int`;
  #L33875e.  if v5 > v0 then goto L3387cc;
  #L338762.  v1:= v4.`e.e.a.b.f.u.r6.c` @type ^`java.lang.Object`[] @kind object;
  #L338766.  v2:= length @variable v1;
  #L338768.  if v0 >= v2 then goto L33877a;
  #L33876c.  v2:= v5 + 1;
  #L338770.  v0:= v0 - v5 @kind int;
  #L338772.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L338778.  goto L3387aa;
  #L33877a.  v0:= v0 * 3;
  #L33877e.  v0:= v0 / 2;
  #L338782.  v0:= v0 + 1;
  #L338786.  v0:= new `java.lang.Object`[v0];
  #L33878a.  v2:= 0I;
  #L33878c.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L338792.  v1:= v4.`e.e.a.b.f.u.r6.c` @type ^`java.lang.Object`[] @kind object;
  #L338796.  v2:= v5 + 1;
  #L33879a.  v3:= v4.`e.e.a.b.f.u.r6.d` @type ^`int`;
  #L33879e.  v3:= v3 - v5 @kind int;
  #L3387a0.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3387a6.  v4.`e.e.a.b.f.u.r6.c` @type ^`java.lang.Object`[] := v0 @kind object;
  #L3387aa.  v0:= v4.`e.e.a.b.f.u.r6.c` @type ^`java.lang.Object`[] @kind object;
  #L3387ae.  v0[v5]:= v6 @kind object;
  #L3387b2.  v5:= v4.`e.e.a.b.f.u.r6.d` @type ^`int`;
  #L3387b6.  v5:= v5 + 1;
  #L3387ba.  v4.`e.e.a.b.f.u.r6.d` @type ^`int` := v5;
  #L3387be.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L3387c2.  v5:= v5 + 1;
  #L3387c6.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L3387ca.  return @kind void;
  #L3387cc.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L3387d0.  call temp:= `h`(v4, v5) @signature `Le/e/a/b/f/u/r6;.h:(I)Ljava/lang/String;` @kind direct;
  #L3387d6.  v5:= temp @kind object;
  #L3387d8.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3387de.  throw v6;
}
procedure `boolean` `add`(`e.e.a.b.f.u.r6` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/u/r6;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L338538.  call `d`(v4) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L33853e.  v0:= v4.`e.e.a.b.f.u.r6.d` @type ^`int`;
  #L338542.  v1:= v4.`e.e.a.b.f.u.r6.c` @type ^`java.lang.Object`[] @kind object;
  #L338546.  v2:= length @variable v1;
  #L338548.  v3:= 1I;
  #L33854a.  if v0 != v2 then goto L338564;
  #L33854e.  v0:= v0 * 3;
  #L338552.  v0:= v0 / 2;
  #L338556.  v0:= v0 + v3 @kind int;
  #L338558.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L33855e.  v0:= temp @kind object;
  #L338560.  v4.`e.e.a.b.f.u.r6.c` @type ^`java.lang.Object`[] := v0 @kind object;
  #L338564.  v0:= v4.`e.e.a.b.f.u.r6.c` @type ^`java.lang.Object`[] @kind object;
  #L338568.  v1:= v4.`e.e.a.b.f.u.r6.d` @type ^`int`;
  #L33856c.  v2:= v1 + 1;
  #L338570.  v4.`e.e.a.b.f.u.r6.d` @type ^`int` := v2;
  #L338574.  v0[v1]:= v5 @kind object;
  #L338578.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L33857c.  v5:= v5 + v3 @kind int;
  #L33857e.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L338582.  return v3;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.u.r6` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/u/r6;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L338604.  call `b`(v1, v2) @signature `Le/e/a/b/f/u/r6;.b:(I)V` @kind direct;
  #L33860a.  v0:= v1.`e.e.a.b.f.u.r6.c` @type ^`java.lang.Object`[] @kind object;
  #L33860e.  v2:= v0[v2] @kind object;
  #L338612.  return v2 @kind object;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.u.r6` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/u/r6;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L338624.  call `d`(v4) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L33862a.  call `b`(v4, v5) @signature `Le/e/a/b/f/u/r6;.b:(I)V` @kind direct;
  #L338630.  v0:= v4.`e.e.a.b.f.u.r6.c` @type ^`java.lang.Object`[] @kind object;
  #L338634.  v1:= v0[v5] @kind object;
  #L338638.  v2:= v4.`e.e.a.b.f.u.r6.d` @type ^`int`;
  #L33863c.  v3:= v2 + -1;
  #L338640.  if v5 >= v3 then goto L338654;
  #L338644.  v3:= v5 + 1;
  #L338648.  v2:= v2 - v5 @kind int;
  #L33864a.  v2:= v2 + -1;
  #L33864e.  call `arraycopy`(v0, v3, v0, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L338654.  v5:= v4.`e.e.a.b.f.u.r6.d` @type ^`int`;
  #L338658.  v5:= v5 + -1;
  #L33865c.  v4.`e.e.a.b.f.u.r6.d` @type ^`int` := v5;
  #L338660.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L338664.  v5:= v5 + 1;
  #L338668.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L33866c.  return v1 @kind object;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.u.r6` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/u/r6;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L338680.  call `d`(v2) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L338686.  call `b`(v2, v3) @signature `Le/e/a/b/f/u/r6;.b:(I)V` @kind direct;
  #L33868c.  v0:= v2.`e.e.a.b.f.u.r6.c` @type ^`java.lang.Object`[] @kind object;
  #L338690.  v1:= v0[v3] @kind object;
  #L338694.  v0[v3]:= v4 @kind object;
  #L338698.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L33869c.  v3:= v3 + 1;
  #L3386a0.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L3386a4.  return v1 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.u.r6` v1 @kind this) @signature `Le/e/a/b/f/u/r6;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3385ec.  v0:= v1.`e.e.a.b.f.u.r6.d` @type ^`int`;
  #L3385f0.  return v0;
}
