record `e.e.a.b.f.n.p3` @kind class @AccessFlag FINAL {
  `e.e.a.b.f.n.x3` `e.e.a.b.f.n.p3.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ConcurrentMap` `e.e.a.b.f.n.p3.b` @AccessFlag PRIVATE_FINAL;
}
global `e.e.a.b.f.n.p3` `@@e.e.a.b.f.n.p3.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@e.e.a.b.f.n.p3.d` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/n/p3;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2883a4.  v0:= new `e.e.a.b.f.n.p3`;
  #L2883a8.  call `<init>`(v0) @signature `Le/e/a/b/f/n/p3;.<init>:()V` @kind direct;
  #L2883ae.  `@@e.e.a.b.f.n.p3.c` @type ^`e.e.a.b.f.n.p3` := v0 @kind object;
  #L2883b2.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.n.p3` v1 @kind this) @signature `Le/e/a/b/f/n/p3;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L2883c4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2883ca.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L2883ce.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L2883d4.  v1.`e.e.a.b.f.n.p3.b` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L2883d8.  v0:= new `e.e.a.b.f.n.w2`;
  #L2883dc.  call `<init>`(v0) @signature `Le/e/a/b/f/n/w2;.<init>:()V` @kind direct;
  #L2883e2.  v1.`e.e.a.b.f.n.p3.a` @type ^`e.e.a.b.f.n.x3` := v0 @kind object;
  #L2883e6.  return @kind void;
}
procedure `e.e.a.b.f.n.p3` `a`() @signature `Le/e/a/b/f/n/p3;.a:()Le/e/a/b/f/n/p3;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L288328.  v0:= `@@e.e.a.b.f.n.p3.c` @type ^`e.e.a.b.f.n.p3` @kind object;
  #L28832c.  return v0 @kind object;
}
procedure `e.e.a.b.f.n.w3` `a`(`e.e.a.b.f.n.p3` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Le/e/a/b/f/n/p3;.a:(Ljava/lang/Class;)Le/e/a/b/f/n/w3;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L288340.  v0:= "messageType" @kind object;
  #L288344.  call temp:= `a`(v3, v0) @signature `Le/e/a/b/f/n/e2;.a:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L28834a.  v1:= v2.`e.e.a.b.f.n.p3.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L28834e.  call temp:= `get`(v1, v3) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L288354.  v1:= temp @kind object;
  #L288356.  v1:= (`e.e.a.b.f.n.w3`) v1 @kind object;
  #L28835a.  if v1 != 0 then goto L288392;
  #L28835e.  v1:= v2.`e.e.a.b.f.n.p3.a` @type ^`e.e.a.b.f.n.x3` @kind object;
  #L288362.  call temp:= `a`(v1, v3) @signature `Le/e/a/b/f/n/x3;.a:(Ljava/lang/Class;)Le/e/a/b/f/n/w3;` @kind interface;
  #L288368.  v1:= temp @kind object;
  #L28836a.  call temp:= `a`(v3, v0) @signature `Le/e/a/b/f/n/e2;.a:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L288370.  v0:= "schema" @kind object;
  #L288374.  call temp:= `a`(v1, v0) @signature `Le/e/a/b/f/n/e2;.a:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L28837a.  v0:= v2.`e.e.a.b.f.n.p3.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L28837e.  call temp:= `putIfAbsent`(v0, v3, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L288384.  v3:= temp @kind object;
  #L288386.  v3:= (`e.e.a.b.f.n.w3`) v3 @kind object;
  #L28838a.  if v3 != 0 then goto L288390;
  #L28838e.  goto L288392;
  #L288390.  return v3 @kind object;
  #L288392.  return v1 @kind object;
}
