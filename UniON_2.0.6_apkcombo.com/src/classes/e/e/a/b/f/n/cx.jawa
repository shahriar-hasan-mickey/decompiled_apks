record `e.e.a.b.f.n.cx` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `e.e.a.b.f.n.v1` @kind interface {
  `int` `e.e.a.b.f.n.cx.b` @AccessFlag PRIVATE_FINAL;
}
global `e.e.a.b.f.n.cx` `@@e.e.a.b.f.n.cx.c` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `e.e.a.b.f.n.cx` `@@e.e.a.b.f.n.cx.d` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `e.e.a.b.f.n.cx` `@@e.e.a.b.f.n.cx.e` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `e.e.a.b.f.n.cx`[] `@@e.e.a.b.f.n.cx.f` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/n/cx;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2aec54.  v0:= new `e.e.a.b.f.n.cx`;
  #L2aec58.  v1:= 0I;
  #L2aec5a.  v2:= "UNKNOWN_MODEL_TYPE" @kind object;
  #L2aec5e.  call `<init>`(v0, v2, v1, v1) @signature `Le/e/a/b/f/n/cx;.<init>:(Ljava/lang/String;II)V` @kind direct;
  #L2aec64.  `@@e.e.a.b.f.n.cx.c` @type ^`e.e.a.b.f.n.cx` := v0 @kind object;
  #L2aec68.  v0:= new `e.e.a.b.f.n.cx`;
  #L2aec6c.  v2:= 1I;
  #L2aec6e.  v3:= "STABLE_MODEL" @kind object;
  #L2aec72.  call `<init>`(v0, v3, v2, v2) @signature `Le/e/a/b/f/n/cx;.<init>:(Ljava/lang/String;II)V` @kind direct;
  #L2aec78.  `@@e.e.a.b.f.n.cx.d` @type ^`e.e.a.b.f.n.cx` := v0 @kind object;
  #L2aec7c.  v0:= new `e.e.a.b.f.n.cx`;
  #L2aec80.  v3:= 2I;
  #L2aec82.  v4:= "LATEST_MODEL" @kind object;
  #L2aec86.  call `<init>`(v0, v4, v3, v3) @signature `Le/e/a/b/f/n/cx;.<init>:(Ljava/lang/String;II)V` @kind direct;
  #L2aec8c.  `@@e.e.a.b.f.n.cx.e` @type ^`e.e.a.b.f.n.cx` := v0 @kind object;
  #L2aec90.  v0:= 3I;
  #L2aec92.  v0:= new `e.e.a.b.f.n.cx`[v0];
  #L2aec96.  v4:= `@@e.e.a.b.f.n.cx.c` @type ^`e.e.a.b.f.n.cx` @kind object;
  #L2aec9a.  v0[v1]:= v4 @kind object;
  #L2aec9e.  v1:= `@@e.e.a.b.f.n.cx.d` @type ^`e.e.a.b.f.n.cx` @kind object;
  #L2aeca2.  v0[v2]:= v1 @kind object;
  #L2aeca6.  v1:= `@@e.e.a.b.f.n.cx.e` @type ^`e.e.a.b.f.n.cx` @kind object;
  #L2aecaa.  v0[v3]:= v1 @kind object;
  #L2aecae.  `@@e.e.a.b.f.n.cx.f` @type ^`e.e.a.b.f.n.cx`[] := v0 @kind object;
  #L2aecb2.  v0:= new `e.e.a.b.f.n.ax`;
  #L2aecb6.  call `<init>`(v0) @signature `Le/e/a/b/f/n/ax;.<init>:()V` @kind direct;
  #L2aecbc.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.n.cx` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/n/cx;.<init>:(Ljava/lang/String;II)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2aecd0.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2aecd6.  v0.`e.e.a.b.f.n.cx.b` @type ^`int` := v3;
  #L2aecda.  return @kind void;
}
procedure `e.e.a.b.f.n.cx` `a`(`int` v1 ) @signature `Le/e/a/b/f/n/cx;.a:(I)Le/e/a/b/f/n/cx;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2aeb50.  if v1 == 0 then goto L2aeb70;
  #L2aeb54.  v0:= 1I;
  #L2aeb56.  if v1 == v0 then goto L2aeb6a;
  #L2aeb5a.  v0:= 2I;
  #L2aeb5c.  if v1 == v0 then goto L2aeb64;
  #L2aeb60.  v1:= 0I;
  #L2aeb62.  return v1 @kind object;
  #L2aeb64.  v1:= `@@e.e.a.b.f.n.cx.e` @type ^`e.e.a.b.f.n.cx` @kind object;
  #L2aeb68.  return v1 @kind object;
  #L2aeb6a.  v1:= `@@e.e.a.b.f.n.cx.d` @type ^`e.e.a.b.f.n.cx` @kind object;
  #L2aeb6e.  return v1 @kind object;
  #L2aeb70.  v1:= `@@e.e.a.b.f.n.cx.c` @type ^`e.e.a.b.f.n.cx` @kind object;
  #L2aeb74.  return v1 @kind object;
}
procedure `e.e.a.b.f.n.x1` `d`() @signature `Le/e/a/b/f/n/cx;.d:()Le/e/a/b/f/n/x1;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2aeb38.  v0:= `@@e.e.a.b.f.n.bx.a` @type ^`e.e.a.b.f.n.x1` @kind object;
  #L2aeb3c.  return v0 @kind object;
}
procedure `e.e.a.b.f.n.cx`[] `values`() @signature `Le/e/a/b/f/n/cx;.values:()[Le/e/a/b/f/n/cx;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2aeb88.  v0:= `@@e.e.a.b.f.n.cx.f` @type ^`e.e.a.b.f.n.cx`[] @kind object;
  #L2aeb8c.  call temp:= `clone`(v0) @signature `[Le/e/a/b/f/n/cx;.clone:()Ljava/lang/Object;` @kind virtual;
  #L2aeb92.  v0:= temp @kind object;
  #L2aeb94.  v0:= (`e.e.a.b.f.n.cx`[]) v0 @kind object;
  #L2aeb98.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`e.e.a.b.f.n.cx` v2 @kind this) @signature `Le/e/a/b/f/n/cx;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2aebc4.  v0:= new `java.lang.StringBuilder`;
  #L2aebc8.  v1:= "<" @kind object;
  #L2aebcc.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2aebd2.  v1:= constclass @type ^`e.e.a.b.f.n.cx` @kind object;
  #L2aebd6.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2aebdc.  v1:= temp @kind object;
  #L2aebde.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2aebe4.  v1:= 64I;
  #L2aebe8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2aebee.  call temp:= `identityHashCode`(v2) @signature `Ljava/lang/System;.identityHashCode:(Ljava/lang/Object;)I` @kind static;
  #L2aebf4.  v1:= temp;
  #L2aebf6.  call temp:= `toHexString`(v1) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L2aebfc.  v1:= temp @kind object;
  #L2aebfe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2aec04.  v1:= " number=" @kind object;
  #L2aec08.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2aec0e.  v1:= v2.`e.e.a.b.f.n.cx.b` @type ^`int`;
  #L2aec12.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2aec18.  v1:= " name=" @kind object;
  #L2aec1c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2aec22.  call temp:= `name`(v2) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L2aec28.  v1:= temp @kind object;
  #L2aec2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2aec30.  v1:= 62I;
  #L2aec34.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2aec3a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2aec40.  v0:= temp @kind object;
  #L2aec42.  return v0 @kind object;
}
procedure `int` `zza`(`e.e.a.b.f.n.cx` v1 @kind this) @signature `Le/e/a/b/f/n/cx;.zza:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2aebac.  v0:= v1.`e.e.a.b.f.n.cx.b` @type ^`int`;
  #L2aebb0.  return v0;
}
