record `e.e.a.b.f.o.qa` @kind class @AccessFlag  extends `java.util.AbstractCollection` @kind class {
  `java.lang.Object` `e.e.a.b.f.o.qa.b` @AccessFlag FINAL;
  `java.util.Collection` `e.e.a.b.f.o.qa.c` @AccessFlag ;
  `e.e.a.b.f.o.qa` `e.e.a.b.f.o.qa.d` @AccessFlag FINAL;
  `java.util.Collection` `e.e.a.b.f.o.qa.e` @AccessFlag FINAL;
  `e.e.a.b.f.o.ta` `e.e.a.b.f.o.qa.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.o.qa` v0 @kind this, `e.e.a.b.f.o.ta` v1 @kind object, `java.lang.Object` v2 @kind object, `java.util.Collection` v3 @kind object, `e.e.a.b.f.o.qa` v4 @kind object) @signature `Le/e/a/b/f/o/qa;.<init>:(Le/e/a/b/f/o/ta;Ljava/lang/Object;Ljava/util/Collection;Le/e/a/b/f/o/qa;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2cf9e0.  v0.`e.e.a.b.f.o.qa.f` @type ^`e.e.a.b.f.o.ta` := v1 @kind object;
  #L2cf9e4.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L2cf9ea.  v0.`e.e.a.b.f.o.qa.b` @type ^`java.lang.Object` := v2 @kind object;
  #L2cf9ee.  v0.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` := v3 @kind object;
  #L2cf9f2.  v0.`e.e.a.b.f.o.qa.d` @type ^`e.e.a.b.f.o.qa` := v4 @kind object;
  #L2cf9f6.  if v4 != 0 then goto L2cf9fe;
  #L2cf9fa.  v1:= 0I;
  #L2cf9fc.  goto L2cfa02;
  #L2cf9fe.  v1:= v4.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cfa02.  v0.`e.e.a.b.f.o.qa.e` @type ^`java.util.Collection` := v1 @kind object;
  #L2cfa06.  return @kind void;
}
procedure `boolean` `add`(`e.e.a.b.f.o.qa` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/o/qa;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2cf750.  call `zza`(v2) @signature `Le/e/a/b/f/o/qa;.zza:()V` @kind virtual;
  #L2cf756.  v0:= v2.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cf75a.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L2cf760.  v0:= temp;
  #L2cf762.  v1:= v2.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cf766.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2cf76c.  v3:= temp;
  #L2cf76e.  if v3 == 0 then goto L2cf788;
  #L2cf772.  v1:= v2.`e.e.a.b.f.o.qa.f` @type ^`e.e.a.b.f.o.ta` @kind object;
  #L2cf776.  call temp:= `c`(v1) @signature `Le/e/a/b/f/o/ta;.c:(Le/e/a/b/f/o/ta;)I` @kind static;
  #L2cf77c.  if v0 == 0 then goto L2cf788;
  #L2cf780.  call `d`(v2) @signature `Le/e/a/b/f/o/qa;.d:()V` @kind virtual;
  #L2cf786.  v3:= 1I;
  #L2cf788.  return v3;
}
procedure `boolean` `addAll`(`e.e.a.b.f.o.qa` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Le/e/a/b/f/o/qa;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2cf79c.  call temp:= `isEmpty`(v4) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L2cf7a2.  v0:= temp;
  #L2cf7a4.  if v0 == 0 then goto L2cf7ac;
  #L2cf7a8.  v4:= 0I;
  #L2cf7aa.  return v4;
  #L2cf7ac.  call temp:= `size`(v3) @signature `Le/e/a/b/f/o/qa;.size:()I` @kind virtual;
  #L2cf7b2.  v0:= temp;
  #L2cf7b4.  v1:= v3.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cf7b8.  call temp:= `addAll`(v1, v4) @signature `Ljava/util/Collection;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2cf7be.  v4:= temp;
  #L2cf7c0.  if v4 == 0 then goto L2cf7e8;
  #L2cf7c4.  v1:= v3.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cf7c8.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L2cf7ce.  v1:= temp;
  #L2cf7d0.  v2:= v3.`e.e.a.b.f.o.qa.f` @type ^`e.e.a.b.f.o.ta` @kind object;
  #L2cf7d4.  v1:= v1 - v0 @kind int;
  #L2cf7d6.  call temp:= `a`(v2, v1) @signature `Le/e/a/b/f/o/ta;.a:(Le/e/a/b/f/o/ta;I)I` @kind static;
  #L2cf7dc.  if v0 != 0 then goto L2cf7e8;
  #L2cf7e0.  call `d`(v3) @signature `Le/e/a/b/f/o/qa;.d:()V` @kind virtual;
  #L2cf7e6.  v4:= 1I;
  #L2cf7e8.  return v4;
}
procedure `void` `clear`(`e.e.a.b.f.o.qa` v2 @kind this) @signature `Le/e/a/b/f/o/qa;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2cfa18.  call temp:= `size`(v2) @signature `Le/e/a/b/f/o/qa;.size:()I` @kind virtual;
  #L2cfa1e.  v0:= temp;
  #L2cfa20.  if v0 != 0 then goto L2cfa26;
  #L2cfa24.  return @kind void;
  #L2cfa26.  v1:= v2.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cfa2a.  call `clear`(v1) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L2cfa30.  v1:= v2.`e.e.a.b.f.o.qa.f` @type ^`e.e.a.b.f.o.ta` @kind object;
  #L2cfa34.  call temp:= `b`(v1, v0) @signature `Le/e/a/b/f/o/ta;.b:(Le/e/a/b/f/o/ta;I)I` @kind static;
  #L2cfa3a.  call `zzb`(v2) @signature `Le/e/a/b/f/o/qa;.zzb:()V` @kind virtual;
  #L2cfa40.  return @kind void;
}
procedure `boolean` `contains`(`e.e.a.b.f.o.qa` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/o/qa;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2cf7fc.  call `zza`(v1) @signature `Le/e/a/b/f/o/qa;.zza:()V` @kind virtual;
  #L2cf802.  v0:= v1.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cf806.  call temp:= `contains`(v0, v2) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2cf80c.  v2:= temp;
  #L2cf80e.  return v2;
}
procedure `boolean` `containsAll`(`e.e.a.b.f.o.qa` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/o/qa;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2cf820.  call `zza`(v1) @signature `Le/e/a/b/f/o/qa;.zza:()V` @kind virtual;
  #L2cf826.  v0:= v1.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cf82a.  call temp:= `containsAll`(v0, v2) @signature `Ljava/util/Collection;.containsAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2cf830.  v2:= temp;
  #L2cf832.  return v2;
}
procedure `void` `d`(`e.e.a.b.f.o.qa` v3 @kind this) @signature `Le/e/a/b/f/o/qa;.d:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2cfb10.  v0:= v3.`e.e.a.b.f.o.qa.d` @type ^`e.e.a.b.f.o.qa` @kind object;
  #L2cfb14.  if v0 == 0 then goto L2cfb20;
  #L2cfb18.  call `d`(v0) @signature `Le/e/a/b/f/o/qa;.d:()V` @kind virtual;
  #L2cfb1e.  return @kind void;
  #L2cfb20.  v0:= v3.`e.e.a.b.f.o.qa.f` @type ^`e.e.a.b.f.o.ta` @kind object;
  #L2cfb24.  call temp:= `a`(v0) @signature `Le/e/a/b/f/o/ta;.a:(Le/e/a/b/f/o/ta;)Ljava/util/Map;` @kind static;
  #L2cfb2a.  v0:= temp @kind object;
  #L2cfb2c.  v1:= v3.`e.e.a.b.f.o.qa.b` @type ^`java.lang.Object` @kind object;
  #L2cfb30.  v2:= v3.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cfb34.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2cfb3a.  return @kind void;
}
procedure `boolean` `equals`(`e.e.a.b.f.o.qa` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/o/qa;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2cf844.  if v2 != v1 then goto L2cf84c;
  #L2cf848.  v2:= 1I;
  #L2cf84a.  return v2;
  #L2cf84c.  call `zza`(v1) @signature `Le/e/a/b/f/o/qa;.zza:()V` @kind virtual;
  #L2cf852.  v0:= v1.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cf856.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Collection;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L2cf85c.  v2:= temp;
  #L2cf85e.  return v2;
}
procedure `int` `hashCode`(`e.e.a.b.f.o.qa` v1 @kind this) @signature `Le/e/a/b/f/o/qa;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2cf950.  call `zza`(v1) @signature `Le/e/a/b/f/o/qa;.zza:()V` @kind virtual;
  #L2cf956.  v0:= v1.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cf95a.  call temp:= `hashCode`(v0) @signature `Ljava/util/Collection;.hashCode:()I` @kind interface;
  #L2cf960.  v0:= temp;
  #L2cf962.  return v0;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.o.qa` v1 @kind this) @signature `Le/e/a/b/f/o/qa;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2cf9bc.  call `zza`(v1) @signature `Le/e/a/b/f/o/qa;.zza:()V` @kind virtual;
  #L2cf9c2.  v0:= new `e.e.a.b.f.o.pa`;
  #L2cf9c6.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/o/pa;.<init>:(Le/e/a/b/f/o/qa;)V` @kind direct;
  #L2cf9cc.  return v0 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.o.qa` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/o/qa;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2cf870.  call `zza`(v1) @signature `Le/e/a/b/f/o/qa;.zza:()V` @kind virtual;
  #L2cf876.  v0:= v1.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cf87a.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Collection;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2cf880.  v2:= temp;
  #L2cf882.  if v2 == 0 then goto L2cf896;
  #L2cf886.  v0:= v1.`e.e.a.b.f.o.qa.f` @type ^`e.e.a.b.f.o.ta` @kind object;
  #L2cf88a.  call temp:= `b`(v0) @signature `Le/e/a/b/f/o/ta;.b:(Le/e/a/b/f/o/ta;)I` @kind static;
  #L2cf890.  call `zzb`(v1) @signature `Le/e/a/b/f/o/qa;.zzb:()V` @kind virtual;
  #L2cf896.  return v2;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.o.qa` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Le/e/a/b/f/o/qa;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2cf8a8.  call temp:= `isEmpty`(v4) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L2cf8ae.  v0:= temp;
  #L2cf8b0.  if v0 == 0 then goto L2cf8b8;
  #L2cf8b4.  v4:= 0I;
  #L2cf8b6.  return v4;
  #L2cf8b8.  call temp:= `size`(v3) @signature `Le/e/a/b/f/o/qa;.size:()I` @kind virtual;
  #L2cf8be.  v0:= temp;
  #L2cf8c0.  v1:= v3.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cf8c4.  call temp:= `removeAll`(v1, v4) @signature `Ljava/util/Collection;.removeAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2cf8ca.  v4:= temp;
  #L2cf8cc.  if v4 == 0 then goto L2cf8ee;
  #L2cf8d0.  v1:= v3.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cf8d4.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L2cf8da.  v1:= temp;
  #L2cf8dc.  v2:= v3.`e.e.a.b.f.o.qa.f` @type ^`e.e.a.b.f.o.ta` @kind object;
  #L2cf8e0.  v1:= v1 - v0 @kind int;
  #L2cf8e2.  call temp:= `a`(v2, v1) @signature `Le/e/a/b/f/o/ta;.a:(Le/e/a/b/f/o/ta;I)I` @kind static;
  #L2cf8e8.  call `zzb`(v3) @signature `Le/e/a/b/f/o/qa;.zzb:()V` @kind virtual;
  #L2cf8ee.  return v4;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.o.qa` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Le/e/a/b/f/o/qa;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2cf900.  if v4 == 0 then goto L2cf93c;
  #L2cf904.  call temp:= `size`(v3) @signature `Le/e/a/b/f/o/qa;.size:()I` @kind virtual;
  #L2cf90a.  v0:= temp;
  #L2cf90c.  v1:= v3.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cf910.  call temp:= `retainAll`(v1, v4) @signature `Ljava/util/Collection;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2cf916.  v4:= temp;
  #L2cf918.  if v4 == 0 then goto L2cf93a;
  #L2cf91c.  v1:= v3.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cf920.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L2cf926.  v1:= temp;
  #L2cf928.  v2:= v3.`e.e.a.b.f.o.qa.f` @type ^`e.e.a.b.f.o.ta` @kind object;
  #L2cf92c.  v1:= v1 - v0 @kind int;
  #L2cf92e.  call temp:= `a`(v2, v1) @signature `Le/e/a/b/f/o/ta;.a:(Le/e/a/b/f/o/ta;I)I` @kind static;
  #L2cf934.  call `zzb`(v3) @signature `Le/e/a/b/f/o/qa;.zzb:()V` @kind virtual;
  #L2cf93a.  return v4;
  #L2cf93c.  v4:= 0I;
  #L2cf93e.  throw v4;
}
procedure `int` `size`(`e.e.a.b.f.o.qa` v1 @kind this) @signature `Le/e/a/b/f/o/qa;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2cf974.  call `zza`(v1) @signature `Le/e/a/b/f/o/qa;.zza:()V` @kind virtual;
  #L2cf97a.  v0:= v1.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cf97e.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L2cf984.  v0:= temp;
  #L2cf986.  return v0;
}
procedure `java.lang.String` `toString`(`e.e.a.b.f.o.qa` v1 @kind this) @signature `Le/e/a/b/f/o/qa;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2cf998.  call `zza`(v1) @signature `Le/e/a/b/f/o/qa;.zza:()V` @kind virtual;
  #L2cf99e.  v0:= v1.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cf9a2.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2cf9a8.  v0:= temp @kind object;
  #L2cf9aa.  return v0 @kind object;
}
procedure `void` `zza`(`e.e.a.b.f.o.qa` v2 @kind this) @signature `Le/e/a/b/f/o/qa;.zza:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L2cfa54.  v0:= v2.`e.e.a.b.f.o.qa.d` @type ^`e.e.a.b.f.o.qa` @kind object;
  #L2cfa58.  if v0 == 0 then goto L2cfa80;
  #L2cfa5c.  call `zza`(v0) @signature `Le/e/a/b/f/o/qa;.zza:()V` @kind virtual;
  #L2cfa62.  v0:= v2.`e.e.a.b.f.o.qa.d` @type ^`e.e.a.b.f.o.qa` @kind object;
  #L2cfa66.  v0:= v0.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cfa6a.  v1:= v2.`e.e.a.b.f.o.qa.e` @type ^`java.util.Collection` @kind object;
  #L2cfa6e.  if v0 != v1 then goto L2cfa74;
  #L2cfa72.  goto L2cfab4;
  #L2cfa74.  v0:= new `java.util.ConcurrentModificationException`;
  #L2cfa78.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L2cfa7e.  throw v0;
  #L2cfa80.  v0:= v2.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cfa84.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L2cfa8a.  v0:= temp;
  #L2cfa8c.  if v0 == 0 then goto L2cfab4;
  #L2cfa90.  v0:= v2.`e.e.a.b.f.o.qa.f` @type ^`e.e.a.b.f.o.ta` @kind object;
  #L2cfa94.  call temp:= `a`(v0) @signature `Le/e/a/b/f/o/ta;.a:(Le/e/a/b/f/o/ta;)Ljava/util/Map;` @kind static;
  #L2cfa9a.  v0:= temp @kind object;
  #L2cfa9c.  v1:= v2.`e.e.a.b.f.o.qa.b` @type ^`java.lang.Object` @kind object;
  #L2cfaa0.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2cfaa6.  v0:= temp @kind object;
  #L2cfaa8.  v0:= (`java.util.Collection`) v0 @kind object;
  #L2cfaac.  if v0 == 0 then goto L2cfab4;
  #L2cfab0.  v2.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` := v0 @kind object;
  #L2cfab4.  return @kind void;
}
procedure `void` `zzb`(`e.e.a.b.f.o.qa` v2 @kind this) @signature `Le/e/a/b/f/o/qa;.zzb:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L2cfac8.  v0:= v2.`e.e.a.b.f.o.qa.d` @type ^`e.e.a.b.f.o.qa` @kind object;
  #L2cfacc.  if v0 == 0 then goto L2cfad8;
  #L2cfad0.  call `zzb`(v0) @signature `Le/e/a/b/f/o/qa;.zzb:()V` @kind virtual;
  #L2cfad6.  return @kind void;
  #L2cfad8.  v0:= v2.`e.e.a.b.f.o.qa.c` @type ^`java.util.Collection` @kind object;
  #L2cfadc.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L2cfae2.  v0:= temp;
  #L2cfae4.  if v0 == 0 then goto L2cfafe;
  #L2cfae8.  v0:= v2.`e.e.a.b.f.o.qa.f` @type ^`e.e.a.b.f.o.ta` @kind object;
  #L2cfaec.  call temp:= `a`(v0) @signature `Le/e/a/b/f/o/ta;.a:(Le/e/a/b/f/o/ta;)Ljava/util/Map;` @kind static;
  #L2cfaf2.  v0:= temp @kind object;
  #L2cfaf4.  v1:= v2.`e.e.a.b.f.o.qa.b` @type ^`java.lang.Object` @kind object;
  #L2cfaf8.  call temp:= `remove`(v0, v1) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2cfafe.  return @kind void;
}
