record `e.e.a.b.f.b.l0` @kind class @AccessFlag FINAL extends `e.e.a.b.f.b.j0` @kind class {
  `int` `e.e.a.b.f.b.l0.a` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.b.l0.b` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.b.l0.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.b.l0.d` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.b.l0.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.f.b.l0` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `boolean` v4 ) @signature `Le/e/a/b/f/b/l0;.<init>:([BIIZ)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1faf50.  v1:= 0I;
  #L1faf52.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/b/j0;.<init>:(Le/e/a/b/f/b/k0;)V` @kind direct;
  #L1faf58.  v1:= 2147483647I;
  #L1faf5e.  v0.`e.e.a.b.f.b.l0.e` @type ^`int` := v1;
  #L1faf62.  v3:= v3 + v2 @kind int;
  #L1faf64.  v0.`e.e.a.b.f.b.l0.a` @type ^`int` := v3;
  #L1faf68.  v0.`e.e.a.b.f.b.l0.c` @type ^`int` := v2;
  #L1faf6c.  v1:= v0.`e.e.a.b.f.b.l0.c` @type ^`int`;
  #L1faf70.  v0.`e.e.a.b.f.b.l0.d` @type ^`int` := v1;
  #L1faf74.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.b.l0` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `boolean` v4 , `e.e.a.b.f.b.k0` v5 @kind object) @signature `Le/e/a/b/f/b/l0;.<init>:([BIIZLe/e/a/b/f/b/k0;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1faf88.  call `<init>`(v0, v1, v2, v3, v4) @signature `Le/e/a/b/f/b/l0;.<init>:([BIIZ)V` @kind direct;
  #L1faf8e.  return @kind void;
}
procedure `int` `a`(`e.e.a.b.f.b.l0` v2 @kind this) @signature `Le/e/a/b/f/b/l0;.a:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1faeb4.  v0:= v2.`e.e.a.b.f.b.l0.c` @type ^`int`;
  #L1faeb8.  v1:= v2.`e.e.a.b.f.b.l0.d` @type ^`int`;
  #L1faebc.  v0:= v0 - v1 @kind int;
  #L1faebe.  return v0;
}
procedure `int` `b`(`e.e.a.b.f.b.l0` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/b/l0;.b:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1faed0.  if v4 < 0 then goto L1faf30;
  #L1faed4.  call temp:= `a`(v3) @signature `Le/e/a/b/f/b/l0;.a:()I` @kind virtual;
  #L1faeda.  v0:= temp;
  #L1faedc.  v4:= v4 + v0 @kind int;
  #L1faede.  v0:= v3.`e.e.a.b.f.b.l0.e` @type ^`int`;
  #L1faee2.  if v4 > v0 then goto L1faf26;
  #L1faee6.  v3.`e.e.a.b.f.b.l0.e` @type ^`int` := v4;
  #L1faeea.  v4:= v3.`e.e.a.b.f.b.l0.a` @type ^`int`;
  #L1faeee.  v1:= v3.`e.e.a.b.f.b.l0.b` @type ^`int`;
  #L1faef2.  v4:= v4 + v1 @kind int;
  #L1faef4.  v3.`e.e.a.b.f.b.l0.a` @type ^`int` := v4;
  #L1faef8.  v4:= v3.`e.e.a.b.f.b.l0.a` @type ^`int`;
  #L1faefc.  v1:= v3.`e.e.a.b.f.b.l0.d` @type ^`int`;
  #L1faf00.  v1:= v4 - v1 @kind int;
  #L1faf04.  v2:= v3.`e.e.a.b.f.b.l0.e` @type ^`int`;
  #L1faf08.  if v1 <= v2 then goto L1faf1e;
  #L1faf0c.  v1:= v1 - v2 @kind int;
  #L1faf0e.  v3.`e.e.a.b.f.b.l0.b` @type ^`int` := v1;
  #L1faf12.  v1:= v3.`e.e.a.b.f.b.l0.b` @type ^`int`;
  #L1faf16.  v4:= v4 - v1 @kind int;
  #L1faf18.  v3.`e.e.a.b.f.b.l0.a` @type ^`int` := v4;
  #L1faf1c.  goto L1faf24;
  #L1faf1e.  v4:= 0I;
  #L1faf20.  v3.`e.e.a.b.f.b.l0.b` @type ^`int` := v4;
  #L1faf24.  return v0;
  #L1faf26.  call temp:= `a`() @signature `Le/e/a/b/f/b/l1;.a:()Le/e/a/b/f/b/l1;` @kind static;
  #L1faf2c.  v4:= temp @kind object;
  #L1faf2e.  throw v4;
  #L1faf30.  v4:= new `e.e.a.b.f.b.l1`;
  #L1faf34.  v0:= "CodedInputStream encountered an embedded string or message which claimed to have negative size." @kind object;
  #L1faf38.  call `<init>`(v4, v0) @signature `Le/e/a/b/f/b/l1;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1faf3e.  throw v4;
}
