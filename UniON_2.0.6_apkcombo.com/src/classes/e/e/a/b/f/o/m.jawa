record `e.e.a.b.f.o.m` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.AbstractCollection` @kind class, `java.io.Serializable` @kind interface {
}
global `java.lang.Object`[] `@@e.e.a.b.f.o.m.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/o/m;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2c0050.  v0:= 0I;
  #L2c0052.  v0:= new `java.lang.Object`[v0];
  #L2c0056.  `@@e.e.a.b.f.o.m.b` @type ^`java.lang.Object`[] := v0 @kind object;
  #L2c005a.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.o.m` v0 @kind this) @signature `Le/e/a/b/f/o/m;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c006c.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L2c0072.  return @kind void;
}
procedure `int` `a`(`e.e.a.b.f.o.m` v0 @kind this, `java.lang.Object`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/o/m;.a:([Ljava/lang/Object;I)I` @AccessFlag  {
    temp;

  #L2bff84.  v1:= 0I;
  #L2bff86.  throw v1;
}
procedure `boolean` `add`(`e.e.a.b.f.o.m` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/o/m;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2bfec0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2bfec4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2bfeca.  throw v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.o.m` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/o/m;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2bfedc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2bfee0.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2bfee6.  throw v1;
}
procedure `int` `c`(`e.e.a.b.f.o.m` v1 @kind this) @signature `Le/e/a/b/f/o/m;.c:()I` @AccessFlag  {
    temp;
    v0;

  #L2bff68.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2bff6c.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2bff72.  throw v0;
}
procedure `void` `clear`(`e.e.a.b.f.o.m` v1 @kind this) @signature `Le/e/a/b/f/o/m;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0084.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2c0088.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2c008e.  throw v0;
}
procedure `boolean` `contains`(`java.lang.Object` v0 @kind object) @signature `Le/e/a/b/f/o/m;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `d`(`e.e.a.b.f.o.m` v1 @kind this) @signature `Le/e/a/b/f/o/m;.d:()I` @AccessFlag  {
    temp;
    v0;

  #L2bff4c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2bff50.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2bff56.  throw v0;
}
procedure `boolean` `remove`(`e.e.a.b.f.o.m` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/o/m;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2bfef8.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2bfefc.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2bff02.  throw v1;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.o.m` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/o/m;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2bff14.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2bff18.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2bff1e.  throw v1;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.o.m` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/o/m;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2bff30.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2bff34.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2bff3a.  throw v1;
}
procedure `java.lang.Object`[] `toArray`(`e.e.a.b.f.o.m` v1 @kind this) @signature `Le/e/a/b/f/o/m;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bff98.  v0:= `@@e.e.a.b.f.o.m.b` @type ^`java.lang.Object`[] @kind object;
  #L2bff9c.  call temp:= `toArray`(v1, v0) @signature `Le/e/a/b/f/o/m;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L2bffa2.  v0:= temp @kind object;
  #L2bffa4.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`e.e.a.b.f.o.m` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Le/e/a/b/f/o/m;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2bffb8.  v0:= 0I;
  #L2bffba.  if v4 == 0 then goto L2c002a;
  #L2bffbe.  call temp:= `size`(v3) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2bffc4.  v1:= temp;
  #L2bffc6.  v2:= length @variable v4;
  #L2bffc8.  if v2 >= v1 then goto L2c0018;
  #L2bffcc.  call temp:= `zzb`(v3) @signature `Le/e/a/b/f/o/m;.zzb:()[Ljava/lang/Object;` @kind virtual;
  #L2bffd2.  v0:= temp @kind object;
  #L2bffd4.  if v0 != 0 then goto L2bfff6;
  #L2bffd8.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2bffde.  v4:= temp @kind object;
  #L2bffe0.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L2bffe6.  v4:= temp @kind object;
  #L2bffe8.  call temp:= `newInstance`(v4, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L2bffee.  v4:= temp @kind object;
  #L2bfff0.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L2bfff4.  goto L2c0020;
  #L2bfff6.  call temp:= `d`(v3) @signature `Le/e/a/b/f/o/m;.d:()I` @kind virtual;
  #L2bfffc.  v1:= temp;
  #L2bfffe.  call temp:= `c`(v3) @signature `Le/e/a/b/f/o/m;.c:()I` @kind virtual;
  #L2c0004.  v2:= temp;
  #L2c0006.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2c000c.  v4:= temp @kind object;
  #L2c000e.  call temp:= `copyOfRange`(v0, v1, v2, v4) @signature `Ljava/util/Arrays;.copyOfRange:([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;` @kind static;
  #L2c0014.  v4:= temp @kind object;
  #L2c0016.  return v4 @kind object;
  #L2c0018.  if v2 <= v1 then goto L2c0020;
  #L2c001c.  v4[v1]:= v0 @kind object;
  #L2c0020.  v0:= 0I;
  #L2c0022.  call temp:= `a`(v3, v4, v0) @signature `Le/e/a/b/f/o/m;.a:([Ljava/lang/Object;I)I` @kind virtual;
  #L2c0028.  return v4 @kind object;
  #L2c002a.  throw v0;
}
procedure `java.lang.Object`[] `zzb`(`e.e.a.b.f.o.m` v1 @kind this) @signature `Le/e/a/b/f/o/m;.zzb:()[Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L2c003c.  v0:= 0I;
  #L2c003e.  return v0 @kind object;
}
