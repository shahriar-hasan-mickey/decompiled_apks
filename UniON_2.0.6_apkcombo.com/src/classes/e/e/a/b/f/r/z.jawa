record `e.e.a.b.f.r.z` @kind class @AccessFlag FINAL extends `java.util.AbstractSet` @kind class {
  `e.e.a.b.f.r.d0` `e.e.a.b.f.r.z.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.r.z` v0 @kind this, `e.e.a.b.f.r.d0` v1 @kind object) @signature `Le/e/a/b/f/r/z;.<init>:(Le/e/a/b/f/r/d0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L30c7f8.  v0.`e.e.a.b.f.r.z.b` @type ^`e.e.a.b.f.r.d0` := v1 @kind object;
  #L30c7fc.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L30c802.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.r.z` v1 @kind this) @signature `Le/e/a/b/f/r/z;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30c814.  v0:= v1.`e.e.a.b.f.r.z.b` @type ^`e.e.a.b.f.r.d0` @kind object;
  #L30c818.  call `clear`(v0) @signature `Le/e/a/b/f/r/d0;.clear:()V` @kind virtual;
  #L30c81e.  return @kind void;
}
procedure `boolean` `contains`(`e.e.a.b.f.r.z` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/r/z;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30c724.  v0:= v1.`e.e.a.b.f.r.z.b` @type ^`e.e.a.b.f.r.d0` @kind object;
  #L30c728.  call temp:= `containsKey`(v0, v2) @signature `Le/e/a/b/f/r/d0;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L30c72e.  v2:= temp;
  #L30c730.  return v2;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.r.z` v2 @kind this) @signature `Le/e/a/b/f/r/z;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L30c7b8.  v0:= v2.`e.e.a.b.f.r.z.b` @type ^`e.e.a.b.f.r.d0` @kind object;
  #L30c7bc.  call temp:= `b`(v0) @signature `Le/e/a/b/f/r/d0;.b:()Ljava/util/Map;` @kind virtual;
  #L30c7c2.  v1:= temp @kind object;
  #L30c7c4.  if v1 == 0 then goto L30c7da;
  #L30c7c8.  call temp:= `keySet`(v1) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L30c7ce.  v0:= temp @kind object;
  #L30c7d0.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L30c7d6.  v0:= temp @kind object;
  #L30c7d8.  goto L30c7e6;
  #L30c7da.  v1:= new `e.e.a.b.f.r.u`;
  #L30c7de.  call `<init>`(v1, v0) @signature `Le/e/a/b/f/r/u;.<init>:(Le/e/a/b/f/r/d0;)V` @kind direct;
  #L30c7e4.  v0:= v1 @kind object;
  #L30c7e6.  return v0 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.r.z` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/r/z;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30c744.  v0:= v1.`e.e.a.b.f.r.z.b` @type ^`e.e.a.b.f.r.d0` @kind object;
  #L30c748.  call temp:= `b`(v0) @signature `Le/e/a/b/f/r/d0;.b:()Ljava/util/Map;` @kind virtual;
  #L30c74e.  v0:= temp @kind object;
  #L30c750.  if v0 == 0 then goto L30c766;
  #L30c754.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L30c75a.  v0:= temp @kind object;
  #L30c75c.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L30c762.  v2:= temp;
  #L30c764.  goto L30c780;
  #L30c766.  v0:= v1.`e.e.a.b.f.r.z.b` @type ^`e.e.a.b.f.r.d0` @kind object;
  #L30c76a.  call temp:= `a`(v0, v2) @signature `Le/e/a/b/f/r/d0;.a:(Le/e/a/b/f/r/d0;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L30c770.  v2:= temp @kind object;
  #L30c772.  call temp:= `e`() @signature `Le/e/a/b/f/r/d0;.e:()Ljava/lang/Object;` @kind static;
  #L30c778.  v0:= temp @kind object;
  #L30c77a.  if v2 != v0 then goto L30c782;
  #L30c77e.  v2:= 0I;
  #L30c780.  return v2;
  #L30c782.  v2:= 1I;
  #L30c784.  return v2;
}
procedure `int` `size`(`e.e.a.b.f.r.z` v1 @kind this) @signature `Le/e/a/b/f/r/z;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30c798.  v0:= v1.`e.e.a.b.f.r.z.b` @type ^`e.e.a.b.f.r.d0` @kind object;
  #L30c79c.  call temp:= `size`(v0) @signature `Le/e/a/b/f/r/d0;.size:()I` @kind virtual;
  #L30c7a2.  v0:= temp;
  #L30c7a4.  return v0;
}
