record `e.e.a.b.f.r.b` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v5 , `int` v6 , `java.lang.String` v7 @kind object) @signature `Le/e/a/b/f/r/b;.a:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L30a818.  if v5 < 0 then goto L30a824;
  #L30a81c.  if v5 < v6 then goto L30a822;
  #L30a820.  goto L30a824;
  #L30a822.  return v5;
  #L30a824.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L30a828.  v0:= "index" @kind object;
  #L30a82c.  v1:= 1I;
  #L30a82e.  v2:= 0I;
  #L30a830.  v3:= 2I;
  #L30a832.  if v5 < 0 then goto L30a89c;
  #L30a836.  if v6 >= 0 then goto L30a86c;
  #L30a83a.  v5:= new `java.lang.IllegalArgumentException`;
  #L30a83e.  v7:= new `java.lang.StringBuilder`;
  #L30a842.  v0:= 26I;
  #L30a846.  call `<init>`(v7, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L30a84c.  v0:= "negative size: " @kind object;
  #L30a850.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a856.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a85c.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30a862.  v6:= temp @kind object;
  #L30a864.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30a86a.  throw v5;
  #L30a86c.  v4:= 3I;
  #L30a86e.  v4:= new `java.lang.Object`[v4];
  #L30a872.  v4[v2]:= v0 @kind object;
  #L30a876.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30a87c.  v5:= temp @kind object;
  #L30a87e.  v4[v1]:= v5 @kind object;
  #L30a882.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30a888.  v5:= temp @kind object;
  #L30a88a.  v4[v3]:= v5 @kind object;
  #L30a88e.  v5:= "%s (%s) must be less than size (%s)" @kind object;
  #L30a892.  call temp:= `a`(v5, v4) @signature `Le/e/a/b/f/r/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L30a898.  v5:= temp @kind object;
  #L30a89a.  goto L30a8bc;
  #L30a89c.  v6:= new `java.lang.Object`[v3];
  #L30a8a0.  v6[v2]:= v0 @kind object;
  #L30a8a4.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30a8aa.  v5:= temp @kind object;
  #L30a8ac.  v6[v1]:= v5 @kind object;
  #L30a8b0.  v5:= "%s (%s) must not be negative" @kind object;
  #L30a8b4.  call temp:= `a`(v5, v6) @signature `Le/e/a/b/f/r/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L30a8ba.  v5:= temp @kind object;
  #L30a8bc.  call `<init>`(v7, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30a8c2.  throw v7;
}
procedure `void` `a`(`int` v2 , `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/r/b;.a:(III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L30aa70.  if v2 < 0 then goto L30aa80;
  #L30aa74.  if v3 < v2 then goto L30aa80;
  #L30aa78.  if v3 <= v4 then goto L30aa7e;
  #L30aa7c.  goto L30aa80;
  #L30aa7e.  return @kind void;
  #L30aa80.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L30aa84.  if v2 < 0 then goto L30aad4;
  #L30aa88.  if v2 > v4 then goto L30aad4;
  #L30aa8c.  if v3 < 0 then goto L30aac6;
  #L30aa90.  if v3 <= v4 then goto L30aa96;
  #L30aa94.  goto L30aac6;
  #L30aa96.  v4:= 2I;
  #L30aa98.  v4:= new `java.lang.Object`[v4];
  #L30aa9c.  v1:= 0I;
  #L30aa9e.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30aaa4.  v3:= temp @kind object;
  #L30aaa6.  v4[v1]:= v3 @kind object;
  #L30aaaa.  v3:= 1I;
  #L30aaac.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30aab2.  v2:= temp @kind object;
  #L30aab4.  v4[v3]:= v2 @kind object;
  #L30aab8.  v2:= "end index (%s) must not be less than start index (%s)" @kind object;
  #L30aabc.  call temp:= `a`(v2, v4) @signature `Le/e/a/b/f/r/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L30aac2.  v2:= temp @kind object;
  #L30aac4.  goto L30aae0;
  #L30aac6.  v2:= "end index" @kind object;
  #L30aaca.  call temp:= `c`(v3, v4, v2) @signature `Le/e/a/b/f/r/b;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L30aad0.  v2:= temp @kind object;
  #L30aad2.  goto L30aae0;
  #L30aad4.  v3:= "start index" @kind object;
  #L30aad8.  call temp:= `c`(v2, v4, v3) @signature `Le/e/a/b/f/r/b;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L30aade.  v2:= temp @kind object;
  #L30aae0.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30aae6.  throw v0;
}
procedure `void` `a`(`boolean` v0 , `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/r/b;.a:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L30aa48.  if v0 == 0 then goto L30aa4e;
  #L30aa4c.  return @kind void;
  #L30aa4e.  v0:= new `java.lang.IllegalStateException`;
  #L30aa52.  v1:= (`java.lang.String`) v1 @kind object;
  #L30aa56.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30aa5c.  throw v0;
}
procedure `int` `b`(`int` v1 , `int` v2 , `java.lang.String` v3 @kind object) @signature `Le/e/a/b/f/r/b;.b:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L30a8d4.  if v1 < 0 then goto L30a8de;
  #L30a8d8.  if v1 > v2 then goto L30a8de;
  #L30a8dc.  return v1;
  #L30a8de.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L30a8e2.  v0:= "index" @kind object;
  #L30a8e6.  call temp:= `c`(v1, v2, v0) @signature `Le/e/a/b/f/r/b;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L30a8ec.  v1:= temp @kind object;
  #L30a8ee.  call `<init>`(v3, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30a8f4.  throw v3;
}
procedure `java.lang.String` `c`(`int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Le/e/a/b/f/r/b;.c:(IILjava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30a908.  v0:= 1I;
  #L30a90a.  v1:= 0I;
  #L30a90c.  v2:= 2I;
  #L30a90e.  if v4 >= 0 then goto L30a934;
  #L30a912.  v5:= new `java.lang.Object`[v2];
  #L30a916.  v5[v1]:= v6 @kind object;
  #L30a91a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30a920.  v4:= temp @kind object;
  #L30a922.  v5[v0]:= v4 @kind object;
  #L30a926.  v4:= "%s (%s) must not be negative" @kind object;
  #L30a92a.  call temp:= `a`(v4, v5) @signature `Le/e/a/b/f/r/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L30a930.  v4:= temp @kind object;
  #L30a932.  return v4 @kind object;
  #L30a934.  if v5 < 0 then goto L30a968;
  #L30a938.  v3:= 3I;
  #L30a93a.  v3:= new `java.lang.Object`[v3];
  #L30a93e.  v3[v1]:= v6 @kind object;
  #L30a942.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30a948.  v4:= temp @kind object;
  #L30a94a.  v3[v0]:= v4 @kind object;
  #L30a94e.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30a954.  v4:= temp @kind object;
  #L30a956.  v3[v2]:= v4 @kind object;
  #L30a95a.  v4:= "%s (%s) must not be greater than size (%s)" @kind object;
  #L30a95e.  call temp:= `a`(v4, v3) @signature `Le/e/a/b/f/r/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L30a964.  v4:= temp @kind object;
  #L30a966.  return v4 @kind object;
  #L30a968.  v4:= new `java.lang.IllegalArgumentException`;
  #L30a96c.  v6:= new `java.lang.StringBuilder`;
  #L30a970.  v0:= 26I;
  #L30a974.  call `<init>`(v6, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L30a97a.  v0:= "negative size: " @kind object;
  #L30a97e.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a984.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a98a.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30a990.  v5:= temp @kind object;
  #L30a992.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30a998.  throw v4;
}
