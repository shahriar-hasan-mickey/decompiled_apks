record `e.e.a.b.f.q.fj` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface, `java.io.Flushable` @kind interface {
  `java.io.Writer` `e.e.a.b.f.q.fj.b` @AccessFlag PRIVATE_FINAL;
  `int`[] `e.e.a.b.f.q.fj.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.q.fj.d` @AccessFlag PRIVATE;
  `java.lang.String` `e.e.a.b.f.q.fj.e` @AccessFlag PRIVATE_FINAL;
  `boolean` `e.e.a.b.f.q.fj.f` @AccessFlag PRIVATE;
  `java.lang.String` `e.e.a.b.f.q.fj.g` @AccessFlag PRIVATE;
}
global `java.lang.String`[] `@@e.e.a.b.f.q.fj.h` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String`[] `@@e.e.a.b.f.q.fj.i` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/q/fj;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2f74d0.  v0:= 128I;
  #L2f74d4.  v0:= new `java.lang.String`[v0];
  #L2f74d8.  `@@e.e.a.b.f.q.fj.h` @type ^`java.lang.String`[] := v0 @kind object;
  #L2f74dc.  v0:= 0I;
  #L2f74de.  v1:= 0I;
  #L2f74e0.  v2:= 31I;
  #L2f74e4.  if v1 > v2 then goto L2f7514;
  #L2f74e8.  v2:= `@@e.e.a.b.f.q.fj.h` @type ^`java.lang.String`[] @kind object;
  #L2f74ec.  v3:= 1I;
  #L2f74ee.  v3:= new `java.lang.Object`[v3];
  #L2f74f2.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2f74f8.  v4:= temp @kind object;
  #L2f74fa.  v3[v0]:= v4 @kind object;
  #L2f74fe.  v4:= "\\u%04x" @kind object;
  #L2f7502.  call temp:= `format`(v4, v3) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2f7508.  v3:= temp @kind object;
  #L2f750a.  v2[v1]:= v3 @kind object;
  #L2f750e.  v1:= v1 + 1;
  #L2f7512.  goto L2f74e0;
  #L2f7514.  v0:= `@@e.e.a.b.f.q.fj.h` @type ^`java.lang.String`[] @kind object;
  #L2f7518.  v1:= 34I;
  #L2f751c.  v2:= "\\\"" @kind object;
  #L2f7520.  v0[v1]:= v2 @kind object;
  #L2f7524.  v1:= 92I;
  #L2f7528.  v2:= "\\\\" @kind object;
  #L2f752c.  v0[v1]:= v2 @kind object;
  #L2f7530.  v1:= 9I;
  #L2f7534.  v2:= "\\t" @kind object;
  #L2f7538.  v0[v1]:= v2 @kind object;
  #L2f753c.  v1:= 8I;
  #L2f7540.  v2:= "\\b" @kind object;
  #L2f7544.  v0[v1]:= v2 @kind object;
  #L2f7548.  v1:= 10I;
  #L2f754c.  v2:= "\\n" @kind object;
  #L2f7550.  v0[v1]:= v2 @kind object;
  #L2f7554.  v1:= 13I;
  #L2f7558.  v2:= "\\r" @kind object;
  #L2f755c.  v0[v1]:= v2 @kind object;
  #L2f7560.  v1:= 12I;
  #L2f7564.  v2:= "\\f" @kind object;
  #L2f7568.  v0[v1]:= v2 @kind object;
  #L2f756c.  call temp:= `clone`(v0) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L2f7572.  v0:= temp @kind object;
  #L2f7574.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L2f7578.  `@@e.e.a.b.f.q.fj.i` @type ^`java.lang.String`[] := v0 @kind object;
  #L2f757c.  v0:= `@@e.e.a.b.f.q.fj.i` @type ^`java.lang.String`[] @kind object;
  #L2f7580.  v1:= 60I;
  #L2f7584.  v2:= "\\u003c" @kind object;
  #L2f7588.  v0[v1]:= v2 @kind object;
  #L2f758c.  v1:= 62I;
  #L2f7590.  v2:= "\\u003e" @kind object;
  #L2f7594.  v0[v1]:= v2 @kind object;
  #L2f7598.  v1:= 38I;
  #L2f759c.  v2:= "\\u0026" @kind object;
  #L2f75a0.  v0[v1]:= v2 @kind object;
  #L2f75a4.  v1:= 61I;
  #L2f75a8.  v2:= "\\u003d" @kind object;
  #L2f75ac.  v0[v1]:= v2 @kind object;
  #L2f75b0.  v1:= 39I;
  #L2f75b4.  v2:= "\\u0027" @kind object;
  #L2f75b8.  v0[v1]:= v2 @kind object;
  #L2f75bc.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.q.fj` v1 @kind this, `java.io.Writer` v2 @kind object) @signature `Le/e/a/b/f/q/fj;.<init>:(Ljava/io/Writer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2f75d0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f75d6.  v0:= 32I;
  #L2f75da.  v0:= new `int`[v0];
  #L2f75de.  v1.`e.e.a.b.f.q.fj.c` @type ^`int`[] := v0 @kind object;
  #L2f75e2.  v0:= 0I;
  #L2f75e4.  v1.`e.e.a.b.f.q.fj.d` @type ^`int` := v0;
  #L2f75e8.  v0:= 6I;
  #L2f75ea.  call `a`(v1, v0) @signature `Le/e/a/b/f/q/fj;.a:(I)V` @kind direct;
  #L2f75f0.  v0:= ":" @kind object;
  #L2f75f4.  v1.`e.e.a.b.f.q.fj.e` @type ^`java.lang.String` := v0 @kind object;
  #L2f75f8.  v1.`e.e.a.b.f.q.fj.b` @type ^`java.io.Writer` := v2 @kind object;
  #L2f75fc.  return @kind void;
}
procedure `e.e.a.b.f.q.fj` `a`(`e.e.a.b.f.q.fj` v1 @kind this, `int` v2 , `int` v3 , `java.lang.String` v4 @kind object) @signature `Le/e/a/b/f/q/fj;.a:(IILjava/lang/String;)Le/e/a/b/f/q/fj;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2f7414.  call temp:= `p`(v1) @signature `Le/e/a/b/f/q/fj;.p:()I` @kind direct;
  #L2f741a.  v0:= temp;
  #L2f741c.  if v0 == v3 then goto L2f7436;
  #L2f7420.  if v0 != v2 then goto L2f7426;
  #L2f7424.  goto L2f7436;
  #L2f7426.  v2:= new `java.lang.IllegalStateException`;
  #L2f742a.  v3:= "Nesting problem." @kind object;
  #L2f742e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f7434.  throw v2;
  #L2f7436.  v2:= v1.`e.e.a.b.f.q.fj.g` @type ^`java.lang.String` @kind object;
  #L2f743a.  if v2 != 0 then goto L2f7456;
  #L2f743e.  v2:= v1.`e.e.a.b.f.q.fj.d` @type ^`int`;
  #L2f7442.  v2:= v2 + -1;
  #L2f7446.  v1.`e.e.a.b.f.q.fj.d` @type ^`int` := v2;
  #L2f744a.  v2:= v1.`e.e.a.b.f.q.fj.b` @type ^`java.io.Writer` @kind object;
  #L2f744e.  call `write`(v2, v4) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L2f7454.  return v1 @kind object;
  #L2f7456.  v2:= new `java.lang.IllegalStateException`;
  #L2f745a.  v3:= new `java.lang.StringBuilder`;
  #L2f745e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f7464.  v4:= "Dangling name: " @kind object;
  #L2f7468.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f746e.  v4:= v1.`e.e.a.b.f.q.fj.g` @type ^`java.lang.String` @kind object;
  #L2f7472.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f7478.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f747e.  v3:= temp @kind object;
  #L2f7480.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f7486.  throw v2;
}
procedure `e.e.a.b.f.q.fj` `a`(`e.e.a.b.f.q.fj` v0 @kind this, `int` v1 , `java.lang.String` v2 @kind object) @signature `Le/e/a/b/f/q/fj;.a:(ILjava/lang/String;)Le/e/a/b/f/q/fj;` @AccessFlag PRIVATE_FINAL {
    temp;

  #L2f73ec.  call `r`(v0) @signature `Le/e/a/b/f/q/fj;.r:()V` @kind direct;
  #L2f73f2.  call `a`(v0, v1) @signature `Le/e/a/b/f/q/fj;.a:(I)V` @kind direct;
  #L2f73f8.  v1:= v0.`e.e.a.b.f.q.fj.b` @type ^`java.io.Writer` @kind object;
  #L2f73fc.  call `write`(v1, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L2f7402.  return v0 @kind object;
}
procedure `void` `a`(`e.e.a.b.f.q.fj` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/q/fj;.a:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2f76ac.  v0:= v4.`e.e.a.b.f.q.fj.d` @type ^`int`;
  #L2f76b0.  v1:= v4.`e.e.a.b.f.q.fj.c` @type ^`int`[] @kind object;
  #L2f76b4.  v2:= length @variable v1;
  #L2f76b6.  if v0 != v2 then goto L2f76ce;
  #L2f76ba.  v2:= v0 + v0 @kind int;
  #L2f76be.  v2:= new `int`[v2];
  #L2f76c2.  v3:= 0I;
  #L2f76c4.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2f76ca.  v4.`e.e.a.b.f.q.fj.c` @type ^`int`[] := v2 @kind object;
  #L2f76ce.  v0:= v4.`e.e.a.b.f.q.fj.c` @type ^`int`[] @kind object;
  #L2f76d2.  v1:= v4.`e.e.a.b.f.q.fj.d` @type ^`int`;
  #L2f76d6.  v2:= v1 + 1;
  #L2f76da.  v4.`e.e.a.b.f.q.fj.d` @type ^`int` := v2;
  #L2f76de.  v0[v1]:= v5;
  #L2f76e2.  return @kind void;
}
procedure `void` `b`(`e.e.a.b.f.q.fj` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/q/fj;.b:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2f76f4.  v0:= v2.`e.e.a.b.f.q.fj.c` @type ^`int`[] @kind object;
  #L2f76f8.  v1:= v2.`e.e.a.b.f.q.fj.d` @type ^`int`;
  #L2f76fc.  v1:= v1 + -1;
  #L2f7700.  v0[v1]:= v3;
  #L2f7704.  return @kind void;
}
procedure `void` `d`(`e.e.a.b.f.q.fj` v8 @kind this, `java.lang.String` v9 @kind object) @signature `Le/e/a/b/f/q/fj;.d:(Ljava/lang/String;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2f7780.  v0:= `@@e.e.a.b.f.q.fj.h` @type ^`java.lang.String`[] @kind object;
  #L2f7784.  v1:= v8.`e.e.a.b.f.q.fj.b` @type ^`java.io.Writer` @kind object;
  #L2f7788.  v2:= "\"" @kind object;
  #L2f778c.  call `write`(v1, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L2f7792.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2f7798.  v1:= temp;
  #L2f779a.  v3:= 0I;
  #L2f779c.  v4:= 0I;
  #L2f779e.  if v3 >= v1 then goto L2f77fc;
  #L2f77a2.  call temp:= `charAt`(v9, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f77a8.  v5:= temp;
  #L2f77aa.  v6:= 128I;
  #L2f77ae.  if v5 >= v6 then goto L2f77bc;
  #L2f77b2.  v5:= v0[v5] @kind object;
  #L2f77b6.  if v5 != 0 then goto L2f77d6;
  #L2f77ba.  goto L2f77f6;
  #L2f77bc.  v6:= 8232I;
  #L2f77c0.  if v5 != v6 then goto L2f77ca;
  #L2f77c4.  v5:= "\\u2028" @kind object;
  #L2f77c8.  goto L2f77d6;
  #L2f77ca.  v6:= 8233I;
  #L2f77ce.  if v5 != v6 then goto L2f77f6;
  #L2f77d2.  v5:= "\\u2029" @kind object;
  #L2f77d6.  if v4 >= v3 then goto L2f77e8;
  #L2f77da.  v6:= v8.`e.e.a.b.f.q.fj.b` @type ^`java.io.Writer` @kind object;
  #L2f77de.  v7:= v3 - v4 @kind int;
  #L2f77e2.  call `write`(v6, v9, v4, v7) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L2f77e8.  v4:= v8.`e.e.a.b.f.q.fj.b` @type ^`java.io.Writer` @kind object;
  #L2f77ec.  call `write`(v4, v5) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L2f77f2.  v4:= v3 + 1;
  #L2f77f6.  v3:= v3 + 1;
  #L2f77fa.  goto L2f779e;
  #L2f77fc.  if v4 >= v1 then goto L2f780c;
  #L2f7800.  v0:= v8.`e.e.a.b.f.q.fj.b` @type ^`java.io.Writer` @kind object;
  #L2f7804.  v1:= v1 - v4 @kind int;
  #L2f7806.  call `write`(v0, v9, v4, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L2f780c.  v9:= v8.`e.e.a.b.f.q.fj.b` @type ^`java.io.Writer` @kind object;
  #L2f7810.  call `write`(v9, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L2f7816.  return @kind void;
}
procedure `int` `p`(`e.e.a.b.f.q.fj` v2 @kind this) @signature `Le/e/a/b/f/q/fj;.p:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2f7498.  v0:= v2.`e.e.a.b.f.q.fj.d` @type ^`int`;
  #L2f749c.  if v0 == 0 then goto L2f74ae;
  #L2f74a0.  v1:= v2.`e.e.a.b.f.q.fj.c` @type ^`int`[] @kind object;
  #L2f74a4.  v0:= v0 + -1;
  #L2f74a8.  v0:= v1[v0];
  #L2f74ac.  return v0;
  #L2f74ae.  v0:= new `java.lang.IllegalStateException`;
  #L2f74b2.  v1:= "JsonWriter is closed." @kind object;
  #L2f74b6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f74bc.  throw v0;
}
procedure `void` `q`(`e.e.a.b.f.q.fj` v2 @kind this) @signature `Le/e/a/b/f/q/fj;.q:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2f7718.  v0:= v2.`e.e.a.b.f.q.fj.g` @type ^`java.lang.String` @kind object;
  #L2f771c.  if v0 == 0 then goto L2f776e;
  #L2f7720.  call temp:= `p`(v2) @signature `Le/e/a/b/f/q/fj;.p:()I` @kind direct;
  #L2f7726.  v0:= temp;
  #L2f7728.  v1:= 5I;
  #L2f772a.  if v0 != v1 then goto L2f773e;
  #L2f772e.  v0:= v2.`e.e.a.b.f.q.fj.b` @type ^`java.io.Writer` @kind object;
  #L2f7732.  v1:= 44I;
  #L2f7736.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L2f773c.  goto L2f7744;
  #L2f773e.  v1:= 3I;
  #L2f7740.  if v0 != v1 then goto L2f775e;
  #L2f7744.  v0:= 4I;
  #L2f7746.  call `b`(v2, v0) @signature `Le/e/a/b/f/q/fj;.b:(I)V` @kind direct;
  #L2f774c.  v0:= v2.`e.e.a.b.f.q.fj.g` @type ^`java.lang.String` @kind object;
  #L2f7750.  call `d`(v2, v0) @signature `Le/e/a/b/f/q/fj;.d:(Ljava/lang/String;)V` @kind direct;
  #L2f7756.  v0:= 0I;
  #L2f7758.  v2.`e.e.a.b.f.q.fj.g` @type ^`java.lang.String` := v0 @kind object;
  #L2f775c.  return @kind void;
  #L2f775e.  v0:= new `java.lang.IllegalStateException`;
  #L2f7762.  v1:= "Nesting problem." @kind object;
  #L2f7766.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f776c.  throw v0;
  #L2f776e.  return @kind void;
}
procedure `void` `r`(`e.e.a.b.f.q.fj` v3 @kind this) @signature `Le/e/a/b/f/q/fj;.r:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2f7828.  call temp:= `p`(v3) @signature `Le/e/a/b/f/q/fj;.p:()I` @kind direct;
  #L2f782e.  v0:= temp;
  #L2f7830.  v1:= 1I;
  #L2f7832.  v2:= 2I;
  #L2f7834.  if v0 == v1 then goto L2f78a8;
  #L2f7838.  if v0 == v2 then goto L2f7898;
  #L2f783c.  v1:= 4I;
  #L2f783e.  if v0 == v1 then goto L2f7880;
  #L2f7842.  v1:= 6I;
  #L2f7844.  v2:= 7I;
  #L2f7846.  if v0 == v1 then goto L2f7878;
  #L2f784a.  if v0 != v2 then goto L2f7868;
  #L2f784e.  v0:= v3.`e.e.a.b.f.q.fj.f` @type ^`boolean` @kind boolean;
  #L2f7852.  if v0 == 0 then goto L2f7858;
  #L2f7856.  goto L2f7878;
  #L2f7858.  v0:= new `java.lang.IllegalStateException`;
  #L2f785c.  v1:= "JSON must have only one top-level value." @kind object;
  #L2f7860.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f7866.  throw v0;
  #L2f7868.  v0:= new `java.lang.IllegalStateException`;
  #L2f786c.  v1:= "Nesting problem." @kind object;
  #L2f7870.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f7876.  throw v0;
  #L2f7878.  call `b`(v3, v2) @signature `Le/e/a/b/f/q/fj;.b:(I)V` @kind direct;
  #L2f787e.  return @kind void;
  #L2f7880.  v0:= v3.`e.e.a.b.f.q.fj.b` @type ^`java.io.Writer` @kind object;
  #L2f7884.  v1:= v3.`e.e.a.b.f.q.fj.e` @type ^`java.lang.String` @kind object;
  #L2f7888.  call temp:= `append`(v0, v1) @signature `Ljava/io/Writer;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @kind virtual;
  #L2f788e.  v0:= 5I;
  #L2f7890.  call `b`(v3, v0) @signature `Le/e/a/b/f/q/fj;.b:(I)V` @kind direct;
  #L2f7896.  return @kind void;
  #L2f7898.  v0:= v3.`e.e.a.b.f.q.fj.b` @type ^`java.io.Writer` @kind object;
  #L2f789c.  v1:= 44I;
  #L2f78a0.  call temp:= `append`(v0, v1) @signature `Ljava/io/Writer;.append:(C)Ljava/io/Writer;` @kind virtual;
  #L2f78a6.  return @kind void;
  #L2f78a8.  call `b`(v3, v2) @signature `Le/e/a/b/f/q/fj;.b:(I)V` @kind direct;
  #L2f78ae.  return @kind void;
}
procedure `e.e.a.b.f.q.fj` `a`(`e.e.a.b.f.q.fj` v3 @kind this, `java.lang.Number` v4 @kind object) @signature `Le/e/a/b/f/q/fj;.a:(Ljava/lang/Number;)Le/e/a/b/f/q/fj;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2f7348.  if v4 != 0 then goto L2f7354;
  #L2f734c.  call temp:= `o`(v3) @signature `Le/e/a/b/f/q/fj;.o:()Le/e/a/b/f/q/fj;` @kind virtual;
  #L2f7352.  return v3 @kind object;
  #L2f7354.  call `q`(v3) @signature `Le/e/a/b/f/q/fj;.q:()V` @kind direct;
  #L2f735a.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f7360.  v0:= temp @kind object;
  #L2f7362.  v1:= v3.`e.e.a.b.f.q.fj.f` @type ^`boolean` @kind boolean;
  #L2f7366.  if v1 != 0 then goto L2f73ca;
  #L2f736a.  v1:= "-Infinity" @kind object;
  #L2f736e.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f7374.  v1:= temp;
  #L2f7376.  if v1 != 0 then goto L2f739c;
  #L2f737a.  v1:= "Infinity" @kind object;
  #L2f737e.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f7384.  v1:= temp;
  #L2f7386.  if v1 != 0 then goto L2f739c;
  #L2f738a.  v1:= "NaN" @kind object;
  #L2f738e.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f7394.  v1:= temp;
  #L2f7396.  if v1 != 0 then goto L2f739c;
  #L2f739a.  goto L2f73ca;
  #L2f739c.  v0:= new `java.lang.IllegalArgumentException`;
  #L2f73a0.  v1:= new `java.lang.StringBuilder`;
  #L2f73a4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f73aa.  v2:= "Numeric values must be finite, but was " @kind object;
  #L2f73ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f73b4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f73ba.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f73c0.  v4:= temp @kind object;
  #L2f73c2.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f73c8.  throw v0;
  #L2f73ca.  call `r`(v3) @signature `Le/e/a/b/f/q/fj;.r:()V` @kind direct;
  #L2f73d0.  v4:= v3.`e.e.a.b.f.q.fj.b` @type ^`java.io.Writer` @kind object;
  #L2f73d4.  call temp:= `append`(v4, v0) @signature `Ljava/io/Writer;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @kind virtual;
  #L2f73da.  return v3 @kind object;
}
procedure `void` `a`(`e.e.a.b.f.q.fj` v0 @kind this, `boolean` v1 ) @signature `Le/e/a/b/f/q/fj;.a:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2f7694.  v1:= 1I;
  #L2f7696.  v0.`e.e.a.b.f.q.fj.f` @type ^`boolean` := v1 @kind boolean;
  #L2f769a.  return @kind void;
}
procedure `e.e.a.b.f.q.fj` `b`(`e.e.a.b.f.q.fj` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Le/e/a/b/f/q/fj;.b:(Ljava/lang/String;)Le/e/a/b/f/q/fj;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2f7254.  if v2 == 0 then goto L2f728a;
  #L2f7258.  v0:= v1.`e.e.a.b.f.q.fj.g` @type ^`java.lang.String` @kind object;
  #L2f725c.  if v0 != 0 then goto L2f727e;
  #L2f7260.  v0:= v1.`e.e.a.b.f.q.fj.d` @type ^`int`;
  #L2f7264.  if v0 == 0 then goto L2f726e;
  #L2f7268.  v1.`e.e.a.b.f.q.fj.g` @type ^`java.lang.String` := v2 @kind object;
  #L2f726c.  return v1 @kind object;
  #L2f726e.  v2:= new `java.lang.IllegalStateException`;
  #L2f7272.  v0:= "JsonWriter is closed." @kind object;
  #L2f7276.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f727c.  throw v2;
  #L2f727e.  v2:= new `java.lang.IllegalStateException`;
  #L2f7282.  call `<init>`(v2) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L2f7288.  throw v2;
  #L2f728a.  v2:= new `java.lang.NullPointerException`;
  #L2f728e.  v0:= "name == null" @kind object;
  #L2f7292.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f7298.  throw v2;
}
procedure `e.e.a.b.f.q.fj` `b`(`e.e.a.b.f.q.fj` v2 @kind this, `boolean` v3 ) @signature `Le/e/a/b/f/q/fj;.b:(Z)Le/e/a/b/f/q/fj;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2f7310.  call `q`(v2) @signature `Le/e/a/b/f/q/fj;.q:()V` @kind direct;
  #L2f7316.  call `r`(v2) @signature `Le/e/a/b/f/q/fj;.r:()V` @kind direct;
  #L2f731c.  v0:= v2.`e.e.a.b.f.q.fj.b` @type ^`java.io.Writer` @kind object;
  #L2f7320.  v1:= 1I;
  #L2f7322.  if v1 == v3 then goto L2f732c;
  #L2f7326.  v3:= "false" @kind object;
  #L2f732a.  goto L2f7330;
  #L2f732c.  v3:= "true" @kind object;
  #L2f7330.  call `write`(v0, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L2f7336.  return v2 @kind object;
}
procedure `e.e.a.b.f.q.fj` `c`(`e.e.a.b.f.q.fj` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Le/e/a/b/f/q/fj;.c:(Ljava/lang/String;)Le/e/a/b/f/q/fj;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2f72ac.  if v1 != 0 then goto L2f72b8;
  #L2f72b0.  call temp:= `o`(v0) @signature `Le/e/a/b/f/q/fj;.o:()Le/e/a/b/f/q/fj;` @kind virtual;
  #L2f72b6.  return v0 @kind object;
  #L2f72b8.  call `q`(v0) @signature `Le/e/a/b/f/q/fj;.q:()V` @kind direct;
  #L2f72be.  call `r`(v0) @signature `Le/e/a/b/f/q/fj;.r:()V` @kind direct;
  #L2f72c4.  call `d`(v0, v1) @signature `Le/e/a/b/f/q/fj;.d:(Ljava/lang/String;)V` @kind direct;
  #L2f72ca.  return v0 @kind object;
}
procedure `void` `close`(`e.e.a.b.f.q.fj` v3 @kind this) @signature `Le/e/a/b/f/q/fj;.close:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2f7610.  v0:= v3.`e.e.a.b.f.q.fj.b` @type ^`java.io.Writer` @kind object;
  #L2f7614.  call `close`(v0) @signature `Ljava/io/Writer;.close:()V` @kind virtual;
  #L2f761a.  v0:= v3.`e.e.a.b.f.q.fj.d` @type ^`int`;
  #L2f761e.  v1:= 1I;
  #L2f7620.  if v0 > v1 then goto L2f763e;
  #L2f7624.  v2:= 0I;
  #L2f7626.  if v0 != v1 then goto L2f7638;
  #L2f762a.  v0:= v3.`e.e.a.b.f.q.fj.c` @type ^`int`[] @kind object;
  #L2f762e.  v0:= v0[v2];
  #L2f7632.  v1:= 7I;
  #L2f7634.  if v0 != v1 then goto L2f763e;
  #L2f7638.  v3.`e.e.a.b.f.q.fj.d` @type ^`int` := v2;
  #L2f763c.  return @kind void;
  #L2f763e.  v0:= new `java.io.IOException`;
  #L2f7642.  v1:= "Incomplete document" @kind object;
  #L2f7646.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f764c.  throw v0;
}
procedure `void` `flush`(`e.e.a.b.f.q.fj` v2 @kind this) @signature `Le/e/a/b/f/q/fj;.flush:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2f7660.  v0:= v2.`e.e.a.b.f.q.fj.d` @type ^`int`;
  #L2f7664.  if v0 == 0 then goto L2f7674;
  #L2f7668.  v0:= v2.`e.e.a.b.f.q.fj.b` @type ^`java.io.Writer` @kind object;
  #L2f766c.  call `flush`(v0) @signature `Ljava/io/Writer;.flush:()V` @kind virtual;
  #L2f7672.  return @kind void;
  #L2f7674.  v0:= new `java.lang.IllegalStateException`;
  #L2f7678.  v1:= "JsonWriter is closed." @kind object;
  #L2f767c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f7682.  throw v0;
}
procedure `e.e.a.b.f.q.fj` `k`(`e.e.a.b.f.q.fj` v2 @kind this) @signature `Le/e/a/b/f/q/fj;.k:()Le/e/a/b/f/q/fj;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2f71cc.  call `q`(v2) @signature `Le/e/a/b/f/q/fj;.q:()V` @kind direct;
  #L2f71d2.  v0:= 1I;
  #L2f71d4.  v1:= "[" @kind object;
  #L2f71d8.  call temp:= `a`(v2, v0, v1) @signature `Le/e/a/b/f/q/fj;.a:(ILjava/lang/String;)Le/e/a/b/f/q/fj;` @kind direct;
  #L2f71de.  return v2 @kind object;
}
procedure `e.e.a.b.f.q.fj` `l`(`e.e.a.b.f.q.fj` v3 @kind this) @signature `Le/e/a/b/f/q/fj;.l:()Le/e/a/b/f/q/fj;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2f71f0.  v0:= 1I;
  #L2f71f2.  v1:= 2I;
  #L2f71f4.  v2:= "]" @kind object;
  #L2f71f8.  call temp:= `a`(v3, v0, v1, v2) @signature `Le/e/a/b/f/q/fj;.a:(IILjava/lang/String;)Le/e/a/b/f/q/fj;` @kind direct;
  #L2f71fe.  return v3 @kind object;
}
procedure `e.e.a.b.f.q.fj` `m`(`e.e.a.b.f.q.fj` v2 @kind this) @signature `Le/e/a/b/f/q/fj;.m:()Le/e/a/b/f/q/fj;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2f7210.  call `q`(v2) @signature `Le/e/a/b/f/q/fj;.q:()V` @kind direct;
  #L2f7216.  v0:= 3I;
  #L2f7218.  v1:= "{" @kind object;
  #L2f721c.  call temp:= `a`(v2, v0, v1) @signature `Le/e/a/b/f/q/fj;.a:(ILjava/lang/String;)Le/e/a/b/f/q/fj;` @kind direct;
  #L2f7222.  return v2 @kind object;
}
procedure `e.e.a.b.f.q.fj` `n`(`e.e.a.b.f.q.fj` v3 @kind this) @signature `Le/e/a/b/f/q/fj;.n:()Le/e/a/b/f/q/fj;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2f7234.  v0:= 3I;
  #L2f7236.  v1:= 5I;
  #L2f7238.  v2:= "}" @kind object;
  #L2f723c.  call temp:= `a`(v3, v0, v1, v2) @signature `Le/e/a/b/f/q/fj;.a:(IILjava/lang/String;)Le/e/a/b/f/q/fj;` @kind direct;
  #L2f7242.  return v3 @kind object;
}
procedure `e.e.a.b.f.q.fj` `o`(`e.e.a.b.f.q.fj` v2 @kind this) @signature `Le/e/a/b/f/q/fj;.o:()Le/e/a/b/f/q/fj;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2f72dc.  v0:= v2.`e.e.a.b.f.q.fj.g` @type ^`java.lang.String` @kind object;
  #L2f72e0.  if v0 == 0 then goto L2f72ea;
  #L2f72e4.  call `q`(v2) @signature `Le/e/a/b/f/q/fj;.q:()V` @kind direct;
  #L2f72ea.  call `r`(v2) @signature `Le/e/a/b/f/q/fj;.r:()V` @kind direct;
  #L2f72f0.  v0:= v2.`e.e.a.b.f.q.fj.b` @type ^`java.io.Writer` @kind object;
  #L2f72f4.  v1:= "null" @kind object;
  #L2f72f8.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L2f72fe.  return v2 @kind object;
}
