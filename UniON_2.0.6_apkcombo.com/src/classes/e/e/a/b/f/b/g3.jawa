record `e.e.a.b.f.b.g3` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `int` `e.e.a.b.f.b.g3.b` @AccessFlag PRIVATE;
  `java.util.Iterator` `e.e.a.b.f.b.g3.c` @AccessFlag PRIVATE;
  `e.e.a.b.f.b.e3` `e.e.a.b.f.b.g3.d` @AccessFlag PRIVATE_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.b.g3` v0 @kind this, `e.e.a.b.f.b.e3` v1 @kind object) @signature `Le/e/a/b/f/b/g3;.<init>:(Le/e/a/b/f/b/e3;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L20d724.  v0.`e.e.a.b.f.b.g3.d` @type ^`e.e.a.b.f.b.e3` := v1 @kind object;
  #L20d728.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L20d72e.  v1:= v0.`e.e.a.b.f.b.g3.d` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20d732.  call temp:= `b`(v1) @signature `Le/e/a/b/f/b/e3;.b:(Le/e/a/b/f/b/e3;)Ljava/util/List;` @kind static;
  #L20d738.  v1:= temp @kind object;
  #L20d73a.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L20d740.  v1:= temp;
  #L20d742.  v0.`e.e.a.b.f.b.g3.b` @type ^`int` := v1;
  #L20d746.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.b.g3` v0 @kind this, `e.e.a.b.f.b.e3` v1 @kind object, `e.e.a.b.f.b.f3` v2 @kind object) @signature `Le/e/a/b/f/b/g3;.<init>:(Le/e/a/b/f/b/e3;Le/e/a/b/f/b/f3;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L20d758.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/b/g3;.<init>:(Le/e/a/b/f/b/e3;)V` @kind direct;
  #L20d75e.  return @kind void;
}
procedure `java.util.Iterator` `a`(`e.e.a.b.f.b.g3` v1 @kind this) @signature `Le/e/a/b/f/b/g3;.a:()Ljava/util/Iterator;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L20d6e4.  v0:= v1.`e.e.a.b.f.b.g3.c` @type ^`java.util.Iterator` @kind object;
  #L20d6e8.  if v0 != 0 then goto L20d70c;
  #L20d6ec.  v0:= v1.`e.e.a.b.f.b.g3.d` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20d6f0.  call temp:= `d`(v0) @signature `Le/e/a/b/f/b/e3;.d:(Le/e/a/b/f/b/e3;)Ljava/util/Map;` @kind static;
  #L20d6f6.  v0:= temp @kind object;
  #L20d6f8.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L20d6fe.  v0:= temp @kind object;
  #L20d700.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L20d706.  v0:= temp @kind object;
  #L20d708.  v1.`e.e.a.b.f.b.g3.c` @type ^`java.util.Iterator` := v0 @kind object;
  #L20d70c.  v0:= v1.`e.e.a.b.f.b.g3.c` @type ^`java.util.Iterator` @kind object;
  #L20d710.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`e.e.a.b.f.b.g3` v2 @kind this) @signature `Le/e/a/b/f/b/g3;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L20d63c.  v0:= v2.`e.e.a.b.f.b.g3.b` @type ^`int`;
  #L20d640.  if v0 <= 0 then goto L20d65c;
  #L20d644.  v1:= v2.`e.e.a.b.f.b.g3.d` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20d648.  call temp:= `b`(v1) @signature `Le/e/a/b/f/b/e3;.b:(Le/e/a/b/f/b/e3;)Ljava/util/List;` @kind static;
  #L20d64e.  v1:= temp @kind object;
  #L20d650.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L20d656.  v1:= temp;
  #L20d658.  if v0 <= v1 then goto L20d670;
  #L20d65c.  call temp:= `a`(v2) @signature `Le/e/a/b/f/b/g3;.a:()Ljava/util/Iterator;` @kind direct;
  #L20d662.  v0:= temp @kind object;
  #L20d664.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L20d66a.  v0:= temp;
  #L20d66c.  if v0 == 0 then goto L20d674;
  #L20d670.  v0:= 1I;
  #L20d672.  return v0;
  #L20d674.  v0:= 0I;
  #L20d676.  return v0;
}
procedure `java.lang.Object` `next`(`e.e.a.b.f.b.g3` v2 @kind this) @signature `Le/e/a/b/f/b/g3;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L20d688.  call temp:= `a`(v2) @signature `Le/e/a/b/f/b/g3;.a:()Ljava/util/Iterator;` @kind direct;
  #L20d68e.  v0:= temp @kind object;
  #L20d690.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L20d696.  v0:= temp;
  #L20d698.  if v0 == 0 then goto L20d6b2;
  #L20d69c.  call temp:= `a`(v2) @signature `Le/e/a/b/f/b/g3;.a:()Ljava/util/Iterator;` @kind direct;
  #L20d6a2.  v0:= temp @kind object;
  #L20d6a4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L20d6aa.  v0:= temp @kind object;
  #L20d6ac.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L20d6b0.  return v0 @kind object;
  #L20d6b2.  v0:= v2.`e.e.a.b.f.b.g3.d` @type ^`e.e.a.b.f.b.e3` @kind object;
  #L20d6b6.  call temp:= `b`(v0) @signature `Le/e/a/b/f/b/e3;.b:(Le/e/a/b/f/b/e3;)Ljava/util/List;` @kind static;
  #L20d6bc.  v0:= temp @kind object;
  #L20d6be.  v1:= v2.`e.e.a.b.f.b.g3.b` @type ^`int`;
  #L20d6c2.  v1:= v1 + -1;
  #L20d6c6.  v2.`e.e.a.b.f.b.g3.b` @type ^`int` := v1;
  #L20d6ca.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L20d6d0.  v0:= temp @kind object;
  #L20d6d2.  goto L20d6ac;
}
procedure `void` `remove`(`e.e.a.b.f.b.g3` v1 @kind this) @signature `Le/e/a/b/f/b/g3;.remove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L20d770.  v0:= new `java.lang.UnsupportedOperationException`;
  #L20d774.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L20d77a.  throw v0;
}
