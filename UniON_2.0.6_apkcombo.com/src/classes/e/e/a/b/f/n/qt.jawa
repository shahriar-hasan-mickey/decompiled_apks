record `e.e.a.b.f.n.qt` @kind class @AccessFlag FINAL extends `e.e.a.b.f.n.ot` @kind class {
  `java.lang.Object` `e.e.a.b.f.n.qt.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e.e.a.b.f.n.qt` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/n/qt;.<init>:(Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2aae84.  call `<init>`(v0) @signature `Le/e/a/b/f/n/ot;.<init>:()V` @kind direct;
  #L2aae8a.  v0.`e.e.a.b.f.n.qt.b` @type ^`java.lang.Object` := v1 @kind object;
  #L2aae8e.  return @kind void;
}
procedure `java.lang.Object` `a`(`e.e.a.b.f.n.qt` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/n/qt;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2aae04.  v0:= "use Optional.orNull() instead of Optional.or(null)" @kind object;
  #L2aae08.  call temp:= `a`(v2, v0) @signature `Le/e/a/b/f/n/pt;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2aae0e.  v2:= v1.`e.e.a.b.f.n.qt.b` @type ^`java.lang.Object` @kind object;
  #L2aae12.  return v2 @kind object;
}
procedure `boolean` `a`(`e.e.a.b.f.n.qt` v1 @kind this) @signature `Le/e/a/b/f/n/qt;.a:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2aadb0.  v0:= 1I;
  #L2aadb2.  return v0;
}
procedure `java.lang.Object` `b`(`e.e.a.b.f.n.qt` v1 @kind this) @signature `Le/e/a/b/f/n/qt;.b:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2aadec.  v0:= v1.`e.e.a.b.f.n.qt.b` @type ^`java.lang.Object` @kind object;
  #L2aadf0.  return v0 @kind object;
}
procedure `boolean` `equals`(`e.e.a.b.f.n.qt` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/n/qt;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2aad7c.  v0:= instanceof @variable v2 @type ^`e.e.a.b.f.n.qt` @kind boolean;
  #L2aad80.  if v0 == 0 then goto L2aad9a;
  #L2aad84.  v2:= (`e.e.a.b.f.n.qt`) v2 @kind object;
  #L2aad88.  v0:= v1.`e.e.a.b.f.n.qt.b` @type ^`java.lang.Object` @kind object;
  #L2aad8c.  v2:= v2.`e.e.a.b.f.n.qt.b` @type ^`java.lang.Object` @kind object;
  #L2aad90.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2aad96.  v2:= temp;
  #L2aad98.  return v2;
  #L2aad9a.  v2:= 0I;
  #L2aad9c.  return v2;
}
procedure `int` `hashCode`(`e.e.a.b.f.n.qt` v2 @kind this) @signature `Le/e/a/b/f/n/qt;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2aadc4.  v0:= v2.`e.e.a.b.f.n.qt.b` @type ^`java.lang.Object` @kind object;
  #L2aadc8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2aadce.  v0:= temp;
  #L2aadd0.  v1:= 1502476572I;
  #L2aadd6.  v0:= v0 + v1 @kind int;
  #L2aadd8.  return v0;
}
procedure `java.lang.String` `toString`(`e.e.a.b.f.n.qt` v3 @kind this) @signature `Le/e/a/b/f/n/qt;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2aae24.  v0:= v3.`e.e.a.b.f.n.qt.b` @type ^`java.lang.Object` @kind object;
  #L2aae28.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2aae2e.  v0:= temp @kind object;
  #L2aae30.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2aae36.  v1:= temp @kind object;
  #L2aae38.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2aae3e.  v1:= temp;
  #L2aae40.  v2:= new `java.lang.StringBuilder`;
  #L2aae44.  v1:= v1 + 13;
  #L2aae48.  call `<init>`(v2, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2aae4e.  v1:= "Optional.of(" @kind object;
  #L2aae52.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2aae58.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2aae5e.  v0:= ")" @kind object;
  #L2aae62.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2aae68.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2aae6e.  v0:= temp @kind object;
  #L2aae70.  return v0 @kind object;
}
