record `e.e.a.b.f.n.s` @kind class @AccessFlag PUBLIC_ABSTRACT extends `e.e.a.b.f.n.f3` @kind interface {
}
procedure `void` `<init>`(`e.e.a.b.f.n.s` v0 @kind this) @signature `Le/e/a/b/f/n/s;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L277c50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L277c56.  return @kind void;
}
procedure `e.e.a.b.f.n.f3` `a`(`e.e.a.b.f.n.s` v1 @kind this, `e.e.a.b.f.n.g3` v2 @kind object) @signature `Le/e/a/b/f/n/s;.a:(Le/e/a/b/f/n/g3;)Le/e/a/b/f/n/f3;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L277c08.  call temp:= `l`(v1) @signature `Le/e/a/b/f/n/h3;.l:()Le/e/a/b/f/n/g3;` @kind interface;
  #L277c0e.  v0:= temp @kind object;
  #L277c10.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L277c16.  v0:= temp @kind object;
  #L277c18.  call temp:= `isInstance`(v0, v2) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L277c1e.  v0:= temp;
  #L277c20.  if v0 == 0 then goto L277c30;
  #L277c24.  v2:= (`e.e.a.b.f.n.t`) v2 @kind object;
  #L277c28.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/n/s;.a:(Le/e/a/b/f/n/t;)Le/e/a/b/f/n/s;` @kind virtual;
  #L277c2e.  return v1 @kind object;
  #L277c30.  v2:= new `java.lang.IllegalArgumentException`;
  #L277c34.  v0:= "mergeFrom(MessageLite) can only merge messages of the same type." @kind object;
  #L277c38.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L277c3e.  throw v2;
}
procedure `e.e.a.b.f.n.s` `a`(`e.e.a.b.f.n.t` v0 @kind object) @signature `Le/e/a/b/f/n/s;.a:(Le/e/a/b/f/n/t;)Le/e/a/b/f/n/s;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
