record `e.e.a.b.f.l.m7` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.AbstractCollection` @kind class, `java.io.Serializable` @kind interface {
}
global `java.lang.Object`[] `@@e.e.a.b.f.l.m7.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/l/m7;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L262b08.  v0:= 0I;
  #L262b0a.  v0:= new `java.lang.Object`[v0];
  #L262b0e.  `@@e.e.a.b.f.l.m7.b` @type ^`java.lang.Object`[] := v0 @kind object;
  #L262b12.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.l.m7` v0 @kind this) @signature `Le/e/a/b/f/l/m7;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L262b24.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L262b2a.  return @kind void;
}
procedure `int` `a`(`e.e.a.b.f.l.m7` v0 @kind this, `java.lang.Object`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/l/m7;.a:([Ljava/lang/Object;I)I` @AccessFlag  {
    temp;

  #L262a3c.  v1:= 0I;
  #L262a3e.  throw v1;
}
procedure `boolean` `add`(`e.e.a.b.f.l.m7` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/l/m7;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L262978.  v1:= new `java.lang.UnsupportedOperationException`;
  #L26297c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L262982.  throw v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.l.m7` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/l/m7;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L262994.  v1:= new `java.lang.UnsupportedOperationException`;
  #L262998.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L26299e.  throw v1;
}
procedure `int` `c`(`e.e.a.b.f.l.m7` v1 @kind this) @signature `Le/e/a/b/f/l/m7;.c:()I` @AccessFlag  {
    temp;
    v0;

  #L262a20.  v0:= new `java.lang.UnsupportedOperationException`;
  #L262a24.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L262a2a.  throw v0;
}
procedure `void` `clear`(`e.e.a.b.f.l.m7` v1 @kind this) @signature `Le/e/a/b/f/l/m7;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L262b3c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L262b40.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L262b46.  throw v0;
}
procedure `boolean` `contains`(`java.lang.Object` v0 @kind object) @signature `Le/e/a/b/f/l/m7;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `d`(`e.e.a.b.f.l.m7` v1 @kind this) @signature `Le/e/a/b/f/l/m7;.d:()I` @AccessFlag  {
    temp;
    v0;

  #L262a04.  v0:= new `java.lang.UnsupportedOperationException`;
  #L262a08.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L262a0e.  throw v0;
}
procedure `boolean` `remove`(`e.e.a.b.f.l.m7` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/l/m7;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2629b0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2629b4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2629ba.  throw v1;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.l.m7` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/l/m7;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2629cc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2629d0.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2629d6.  throw v1;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.l.m7` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/l/m7;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2629e8.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2629ec.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2629f2.  throw v1;
}
procedure `java.lang.Object`[] `toArray`(`e.e.a.b.f.l.m7` v1 @kind this) @signature `Le/e/a/b/f/l/m7;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L262a50.  v0:= `@@e.e.a.b.f.l.m7.b` @type ^`java.lang.Object`[] @kind object;
  #L262a54.  call temp:= `toArray`(v1, v0) @signature `Le/e/a/b/f/l/m7;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L262a5a.  v0:= temp @kind object;
  #L262a5c.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`e.e.a.b.f.l.m7` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Le/e/a/b/f/l/m7;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L262a70.  v0:= 0I;
  #L262a72.  if v4 == 0 then goto L262ae2;
  #L262a76.  call temp:= `size`(v3) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L262a7c.  v1:= temp;
  #L262a7e.  v2:= length @variable v4;
  #L262a80.  if v2 >= v1 then goto L262ad0;
  #L262a84.  call temp:= `zzb`(v3) @signature `Le/e/a/b/f/l/m7;.zzb:()[Ljava/lang/Object;` @kind virtual;
  #L262a8a.  v0:= temp @kind object;
  #L262a8c.  if v0 != 0 then goto L262aae;
  #L262a90.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L262a96.  v4:= temp @kind object;
  #L262a98.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L262a9e.  v4:= temp @kind object;
  #L262aa0.  call temp:= `newInstance`(v4, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L262aa6.  v4:= temp @kind object;
  #L262aa8.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L262aac.  goto L262ad8;
  #L262aae.  call temp:= `d`(v3) @signature `Le/e/a/b/f/l/m7;.d:()I` @kind virtual;
  #L262ab4.  v1:= temp;
  #L262ab6.  call temp:= `c`(v3) @signature `Le/e/a/b/f/l/m7;.c:()I` @kind virtual;
  #L262abc.  v2:= temp;
  #L262abe.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L262ac4.  v4:= temp @kind object;
  #L262ac6.  call temp:= `copyOfRange`(v0, v1, v2, v4) @signature `Ljava/util/Arrays;.copyOfRange:([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;` @kind static;
  #L262acc.  v4:= temp @kind object;
  #L262ace.  return v4 @kind object;
  #L262ad0.  if v2 <= v1 then goto L262ad8;
  #L262ad4.  v4[v1]:= v0 @kind object;
  #L262ad8.  v0:= 0I;
  #L262ada.  call temp:= `a`(v3, v4, v0) @signature `Le/e/a/b/f/l/m7;.a:([Ljava/lang/Object;I)I` @kind virtual;
  #L262ae0.  return v4 @kind object;
  #L262ae2.  throw v0;
}
procedure `java.lang.Object`[] `zzb`(`e.e.a.b.f.l.m7` v1 @kind this) @signature `Le/e/a/b/f/l/m7;.zzb:()[Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L262af4.  v0:= 0I;
  #L262af6.  return v0 @kind object;
}
