record `e.e.a.b.f.b.z1` @kind class @AccessFlag FINAL extends `e.e.a.b.f.b.t` @kind class, `e.e.a.b.f.b.k1` @kind interface, `java.util.RandomAccess` @kind interface {
  `long`[] `e.e.a.b.f.b.z1.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.b.z1.d` @AccessFlag PRIVATE;
}
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/b/z1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L203458.  v0:= new `e.e.a.b.f.b.z1`;
  #L20345c.  call `<init>`(v0) @signature `Le/e/a/b/f/b/z1;.<init>:()V` @kind direct;
  #L203462.  call `h`(v0) @signature `Le/e/a/b/f/b/t;.h:()V` @kind virtual;
  #L203468.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.b.z1` v2 @kind this) @signature `Le/e/a/b/f/b/z1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L20347c.  v0:= 10I;
  #L203480.  v0:= new `long`[v0];
  #L203484.  v1:= 0I;
  #L203486.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/b/z1;.<init>:([JI)V` @kind direct;
  #L20348c.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.b.z1` v0 @kind this, `long`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/b/z1;.<init>:([JI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2034a0.  call `<init>`(v0) @signature `Le/e/a/b/f/b/t;.<init>:()V` @kind direct;
  #L2034a6.  v0.`e.e.a.b.f.b.z1.c` @type ^`long`[] := v1 @kind object;
  #L2034aa.  v0.`e.e.a.b.f.b.z1.d` @type ^`int` := v2;
  #L2034ae.  return @kind void;
}
procedure `void` `a`(`e.e.a.b.f.b.z1` v4 @kind this, `int` v5 , `long` v6 ) @signature `Le/e/a/b/f/b/z1;.a:(IJ)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L20356c.  call `d`(v4) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L203572.  if v5 < 0 then goto L2035e8;
  #L203576.  v0:= v4.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L20357a.  if v5 > v0 then goto L2035e8;
  #L20357e.  v1:= v4.`e.e.a.b.f.b.z1.c` @type ^`long`[] @kind object;
  #L203582.  v2:= length @variable v1;
  #L203584.  if v0 >= v2 then goto L203596;
  #L203588.  v2:= v5 + 1;
  #L20358c.  v0:= v0 - v5 @kind int;
  #L20358e.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L203594.  goto L2035c6;
  #L203596.  v0:= v0 * 3;
  #L20359a.  v0:= v0 / 2;
  #L20359e.  v0:= v0 + 1;
  #L2035a2.  v0:= new `long`[v0];
  #L2035a6.  v2:= 0I;
  #L2035a8.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2035ae.  v1:= v4.`e.e.a.b.f.b.z1.c` @type ^`long`[] @kind object;
  #L2035b2.  v2:= v5 + 1;
  #L2035b6.  v3:= v4.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L2035ba.  v3:= v3 - v5 @kind int;
  #L2035bc.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2035c2.  v4.`e.e.a.b.f.b.z1.c` @type ^`long`[] := v0 @kind object;
  #L2035c6.  v0:= v4.`e.e.a.b.f.b.z1.c` @type ^`long`[] @kind object;
  #L2035ca.  v0[v5]:= v6 @kind wide;
  #L2035ce.  v5:= v4.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L2035d2.  v5:= v5 + 1;
  #L2035d6.  v4.`e.e.a.b.f.b.z1.d` @type ^`int` := v5;
  #L2035da.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L2035de.  v5:= v5 + 1;
  #L2035e2.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L2035e6.  return @kind void;
  #L2035e8.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L2035ec.  call temp:= `e`(v4, v5) @signature `Le/e/a/b/f/b/z1;.e:(I)Ljava/lang/String;` @kind direct;
  #L2035f2.  v5:= temp @kind object;
  #L2035f4.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2035fa.  throw v6;
}
procedure `void` `d`(`e.e.a.b.f.b.z1` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/b/z1;.d:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L203538.  if v2 < 0 then goto L203546;
  #L20353c.  v0:= v1.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L203540.  if v2 >= v0 then goto L203546;
  #L203544.  return @kind void;
  #L203546.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L20354a.  call temp:= `e`(v1, v2) @signature `Le/e/a/b/f/b/z1;.e:(I)Ljava/lang/String;` @kind direct;
  #L203550.  v2:= temp @kind object;
  #L203552.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L203558.  throw v0;
}
procedure `java.lang.String` `e`(`e.e.a.b.f.b.z1` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/b/z1;.e:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2033ec.  v0:= v3.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L2033f0.  v1:= new `java.lang.StringBuilder`;
  #L2033f4.  v2:= 35I;
  #L2033f8.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2033fe.  v2:= "Index:" @kind object;
  #L203402.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L203408.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L20340e.  v4:= ", Size:" @kind object;
  #L203412.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L203418.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L20341e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L203424.  v4:= temp @kind object;
  #L203426.  return v4 @kind object;
}
procedure `void` `a`(`e.e.a.b.f.b.z1` v1 @kind this, `long` v2 ) @signature `Le/e/a/b/f/b/z1;.a:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L20360c.  v0:= v1.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L203610.  call `a`(v1, v0, v2) @signature `Le/e/a/b/f/b/z1;.a:(IJ)V` @kind direct;
  #L203616.  return @kind void;
}
procedure `void` `add`(`e.e.a.b.f.b.z1` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/b/z1;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2034c0.  v4:= (`java.lang.Long`) v4 @kind object;
  #L2034c4.  call temp:= `longValue`(v4) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L2034ca.  v0:= temp @kind wide;
  #L2034cc.  call `a`(v2, v3, v0) @signature `Le/e/a/b/f/b/z1;.a:(IJ)V` @kind direct;
  #L2034d2.  return @kind void;
}
procedure `boolean` `addAll`(`e.e.a.b.f.b.z1` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/b/z1;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L203118.  call `d`(v5) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L20311e.  call temp:= `a`(v6) @signature `Le/e/a/b/f/b/h1;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L203124.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.b.z1` @kind boolean;
  #L203128.  if v0 != 0 then goto L203136;
  #L20312c.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/b/t;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L203132.  v6:= temp;
  #L203134.  return v6;
  #L203136.  v6:= (`e.e.a.b.f.b.z1`) v6 @kind object;
  #L20313a.  v0:= v6.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L20313e.  v1:= 0I;
  #L203140.  if v0 != 0 then goto L203146;
  #L203144.  return v1;
  #L203146.  v2:= 2147483647I;
  #L20314c.  v3:= v5.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L203150.  v2:= v2 - v3 @kind int;
  #L203152.  if v2 < v0 then goto L203196;
  #L203156.  v3:= v3 + v0 @kind int;
  #L203158.  v0:= v5.`e.e.a.b.f.b.z1.c` @type ^`long`[] @kind object;
  #L20315c.  v2:= length @variable v0;
  #L20315e.  if v3 <= v2 then goto L20316e;
  #L203162.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([JI)[J` @kind static;
  #L203168.  v0:= temp @kind object;
  #L20316a.  v5.`e.e.a.b.f.b.z1.c` @type ^`long`[] := v0 @kind object;
  #L20316e.  v0:= v6.`e.e.a.b.f.b.z1.c` @type ^`long`[] @kind object;
  #L203172.  v2:= v5.`e.e.a.b.f.b.z1.c` @type ^`long`[] @kind object;
  #L203176.  v4:= v5.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L20317a.  v6:= v6.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L20317e.  call `arraycopy`(v0, v1, v2, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L203184.  v5.`e.e.a.b.f.b.z1.d` @type ^`int` := v3;
  #L203188.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L20318c.  v0:= 1I;
  #L20318e.  v6:= v6 + v0 @kind int;
  #L203190.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L203194.  return v0;
  #L203196.  v6:= new `java.lang.OutOfMemoryError`;
  #L20319a.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L2031a0.  throw v6;
}
procedure `boolean` `equals`(`e.e.a.b.f.b.z1` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Le/e/a/b/f/b/z1;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2031b4.  v0:= 1I;
  #L2031b6.  if v8 != v9 then goto L2031bc;
  #L2031ba.  return v0;
  #L2031bc.  v1:= instanceof @variable v9 @type ^`e.e.a.b.f.b.z1` @kind boolean;
  #L2031c0.  if v1 != 0 then goto L2031ce;
  #L2031c4.  call temp:= `equals`(v8, v9) @signature `Le/e/a/b/f/b/t;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L2031ca.  v9:= temp;
  #L2031cc.  return v9;
  #L2031ce.  v9:= (`e.e.a.b.f.b.z1`) v9 @kind object;
  #L2031d2.  v1:= v8.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L2031d6.  v2:= v9.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L2031da.  v3:= 0I;
  #L2031dc.  if v1 == v2 then goto L2031e2;
  #L2031e0.  return v3;
  #L2031e2.  v9:= v9.`e.e.a.b.f.b.z1.c` @type ^`long`[] @kind object;
  #L2031e6.  v1:= 0I;
  #L2031e8.  v2:= v8.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L2031ec.  if v1 >= v2 then goto L20320c;
  #L2031f0.  v2:= v8.`e.e.a.b.f.b.z1.c` @type ^`long`[] @kind object;
  #L2031f4.  v4:= v2[v1] @kind wide;
  #L2031f8.  v6:= v9[v1] @kind wide;
  #L2031fc.  v2:= lcmp(v4, v6);
  #L203200.  if v2 == 0 then goto L203206;
  #L203204.  return v3;
  #L203206.  v1:= v1 + 1;
  #L20320a.  goto L2031e8;
  #L20320c.  return v0;
}
procedure `e.e.a.b.f.b.k1` `f`(`e.e.a.b.f.b.z1` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/b/z1;.f:(I)Le/e/a/b/f/b/k1;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L203294.  v0:= v2.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L203298.  if v3 < v0 then goto L2032b8;
  #L20329c.  v0:= new `e.e.a.b.f.b.z1`;
  #L2032a0.  v1:= v2.`e.e.a.b.f.b.z1.c` @type ^`long`[] @kind object;
  #L2032a4.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([JI)[J` @kind static;
  #L2032aa.  v3:= temp @kind object;
  #L2032ac.  v1:= v2.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L2032b0.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/b/z1;.<init>:([JI)V` @kind direct;
  #L2032b6.  return v0 @kind object;
  #L2032b8.  v3:= new `java.lang.IllegalArgumentException`;
  #L2032bc.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L2032c2.  throw v3;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.b.z1` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/b/z1;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L203328.  call temp:= `h`(v2, v3) @signature `Le/e/a/b/f/b/z1;.h:(I)J` @kind virtual;
  #L20332e.  v0:= temp @kind wide;
  #L203330.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L203336.  v3:= temp @kind object;
  #L203338.  return v3 @kind object;
}
procedure `long` `h`(`e.e.a.b.f.b.z1` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/b/z1;.h:(I)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L203438.  call `d`(v3, v4) @signature `Le/e/a/b/f/b/z1;.d:(I)V` @kind direct;
  #L20343e.  v0:= v3.`e.e.a.b.f.b.z1.c` @type ^`long`[] @kind object;
  #L203442.  v1:= v0[v4] @kind wide;
  #L203446.  return v1 @kind wide;
}
procedure `int` `hashCode`(`e.e.a.b.f.b.z1` v5 @kind this) @signature `Le/e/a/b/f/b/z1;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2032d4.  v0:= 1I;
  #L2032d6.  v1:= 0I;
  #L2032d8.  v2:= v5.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L2032dc.  if v1 >= v2 then goto L2032fc;
  #L2032e0.  v0:= v0 * 31;
  #L2032e4.  v2:= v5.`e.e.a.b.f.b.z1.c` @type ^`long`[] @kind object;
  #L2032e8.  v3:= v2[v1] @kind wide;
  #L2032ec.  call temp:= `a`(v3) @signature `Le/e/a/b/f/b/h1;.a:(J)I` @kind static;
  #L2032f2.  v2:= temp;
  #L2032f4.  v0:= v0 + v2 @kind int;
  #L2032f6.  v1:= v1 + 1;
  #L2032fa.  goto L2032d8;
  #L2032fc.  return v0;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.b.z1` v5 @kind this, `int` v6 ) @signature `Le/e/a/b/f/b/z1;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L20334c.  call `d`(v5) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L203352.  call `d`(v5, v6) @signature `Le/e/a/b/f/b/z1;.d:(I)V` @kind direct;
  #L203358.  v0:= v5.`e.e.a.b.f.b.z1.c` @type ^`long`[] @kind object;
  #L20335c.  v1:= v0[v6] @kind wide;
  #L203360.  v3:= v5.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L203364.  v4:= v3 + -1;
  #L203368.  if v6 >= v4 then goto L203378;
  #L20336c.  v4:= v6 + 1;
  #L203370.  v3:= v3 - v6 @kind int;
  #L203372.  call `arraycopy`(v0, v4, v0, v6, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L203378.  v6:= v5.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L20337c.  v6:= v6 + -1;
  #L203380.  v5.`e.e.a.b.f.b.z1.d` @type ^`int` := v6;
  #L203384.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L203388.  v6:= v6 + 1;
  #L20338c.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L203390.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L203396.  v6:= temp @kind object;
  #L203398.  return v6 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.b.z1` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/b/z1;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L203220.  call `d`(v5) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L203226.  v0:= 0I;
  #L203228.  v1:= 0I;
  #L20322a.  v2:= v5.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L20322e.  if v1 >= v2 then goto L203280;
  #L203232.  v2:= v5.`e.e.a.b.f.b.z1.c` @type ^`long`[] @kind object;
  #L203236.  v3:= v2[v1] @kind wide;
  #L20323a.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L203240.  v2:= temp @kind object;
  #L203242.  call temp:= `equals`(v6, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L203248.  v2:= temp;
  #L20324a.  if v2 == 0 then goto L20327a;
  #L20324e.  v6:= v5.`e.e.a.b.f.b.z1.c` @type ^`long`[] @kind object;
  #L203252.  v0:= v1 + 1;
  #L203256.  v2:= v5.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L20325a.  v2:= v2 - v1 @kind int;
  #L20325c.  call `arraycopy`(v6, v0, v6, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L203262.  v6:= v5.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L203266.  v0:= 1I;
  #L203268.  v6:= v6 - v0 @kind int;
  #L20326a.  v5.`e.e.a.b.f.b.z1.d` @type ^`int` := v6;
  #L20326e.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L203272.  v6:= v6 + v0 @kind int;
  #L203274.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L203278.  return v0;
  #L20327a.  v1:= v1 + 1;
  #L20327e.  goto L20322a;
  #L203280.  return v0;
}
procedure `void` `removeRange`(`e.e.a.b.f.b.z1` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/b/z1;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L2034e4.  call `d`(v2) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L2034ea.  if v4 < v3 then goto L203518;
  #L2034ee.  v0:= v2.`e.e.a.b.f.b.z1.c` @type ^`long`[] @kind object;
  #L2034f2.  v1:= v2.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L2034f6.  v1:= v1 - v4 @kind int;
  #L2034f8.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2034fe.  v0:= v2.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L203502.  v4:= v4 - v3 @kind int;
  #L203504.  v0:= v0 - v4 @kind int;
  #L203506.  v2.`e.e.a.b.f.b.z1.d` @type ^`int` := v0;
  #L20350a.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L20350e.  v3:= v3 + 1;
  #L203512.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L203516.  return @kind void;
  #L203518.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L20351c.  v4:= "toIndex < fromIndex" @kind object;
  #L203520.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L203526.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.b.z1` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/b/z1;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2033ac.  v6:= (`java.lang.Long`) v6 @kind object;
  #L2033b0.  call temp:= `longValue`(v6) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L2033b6.  v0:= temp @kind wide;
  #L2033b8.  call `d`(v4) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L2033be.  call `d`(v4, v5) @signature `Le/e/a/b/f/b/z1;.d:(I)V` @kind direct;
  #L2033c4.  v6:= v4.`e.e.a.b.f.b.z1.c` @type ^`long`[] @kind object;
  #L2033c8.  v2:= v6[v5] @kind wide;
  #L2033cc.  v6[v5]:= v0 @kind wide;
  #L2033d0.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2033d6.  v5:= temp @kind object;
  #L2033d8.  return v5 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.b.z1` v1 @kind this) @signature `Le/e/a/b/f/b/z1;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L203310.  v0:= v1.`e.e.a.b.f.b.z1.d` @type ^`int`;
  #L203314.  return v0;
}
