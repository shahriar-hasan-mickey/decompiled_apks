record `e.e.a.b.f.r.l` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface {
  `java.util.Iterator` `e.e.a.b.f.r.l.b` @AccessFlag FINAL;
  `java.util.Collection` `e.e.a.b.f.r.l.c` @AccessFlag FINAL;
  `e.e.a.b.f.r.m` `e.e.a.b.f.r.l.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.r.l` v1 @kind this, `e.e.a.b.f.r.m` v2 @kind object) @signature `Le/e/a/b/f/r/l;.<init>:(Le/e/a/b/f/r/m;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L30b50c.  v1.`e.e.a.b.f.r.l.d` @type ^`e.e.a.b.f.r.m` := v2 @kind object;
  #L30b510.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30b516.  v0:= v1.`e.e.a.b.f.r.l.d` @type ^`e.e.a.b.f.r.m` @kind object;
  #L30b51a.  v0:= v0.`e.e.a.b.f.r.m.c` @type ^`java.util.Collection` @kind object;
  #L30b51e.  v1.`e.e.a.b.f.r.l.c` @type ^`java.util.Collection` := v0 @kind object;
  #L30b522.  v2:= v2.`e.e.a.b.f.r.m.c` @type ^`java.util.Collection` @kind object;
  #L30b526.  v0:= instanceof @variable v2 @type ^`java.util.List` @kind boolean;
  #L30b52a.  if v0 == 0 then goto L30b53c;
  #L30b52e.  v2:= (`java.util.List`) v2 @kind object;
  #L30b532.  call temp:= `listIterator`(v2) @signature `Ljava/util/List;.listIterator:()Ljava/util/ListIterator;` @kind interface;
  #L30b538.  v2:= temp @kind object;
  #L30b53a.  goto L30b544;
  #L30b53c.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L30b542.  v2:= temp @kind object;
  #L30b544.  v1.`e.e.a.b.f.r.l.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L30b548.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.r.l` v0 @kind this, `e.e.a.b.f.r.m` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Le/e/a/b/f/r/l;.<init>:(Le/e/a/b/f/r/m;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L30b55c.  v0.`e.e.a.b.f.r.l.d` @type ^`e.e.a.b.f.r.m` := v1 @kind object;
  #L30b560.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30b566.  v1:= v0.`e.e.a.b.f.r.l.d` @type ^`e.e.a.b.f.r.m` @kind object;
  #L30b56a.  v1:= v1.`e.e.a.b.f.r.m.c` @type ^`java.util.Collection` @kind object;
  #L30b56e.  v0.`e.e.a.b.f.r.l.c` @type ^`java.util.Collection` := v1 @kind object;
  #L30b572.  v0.`e.e.a.b.f.r.l.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L30b576.  return @kind void;
}
procedure `boolean` `hasNext`(`e.e.a.b.f.r.l` v1 @kind this) @signature `Le/e/a/b/f/r/l;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30b4c4.  call `zza`(v1) @signature `Le/e/a/b/f/r/l;.zza:()V` @kind virtual;
  #L30b4ca.  v0:= v1.`e.e.a.b.f.r.l.b` @type ^`java.util.Iterator` @kind object;
  #L30b4ce.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L30b4d4.  v0:= temp;
  #L30b4d6.  return v0;
}
procedure `java.lang.Object` `next`(`e.e.a.b.f.r.l` v1 @kind this) @signature `Le/e/a/b/f/r/l;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30b4e8.  call `zza`(v1) @signature `Le/e/a/b/f/r/l;.zza:()V` @kind virtual;
  #L30b4ee.  v0:= v1.`e.e.a.b.f.r.l.b` @type ^`java.util.Iterator` @kind object;
  #L30b4f2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L30b4f8.  v0:= temp @kind object;
  #L30b4fa.  return v0 @kind object;
}
procedure `void` `remove`(`e.e.a.b.f.r.l` v1 @kind this) @signature `Le/e/a/b/f/r/l;.remove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30b588.  v0:= v1.`e.e.a.b.f.r.l.b` @type ^`java.util.Iterator` @kind object;
  #L30b58c.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L30b592.  v0:= v1.`e.e.a.b.f.r.l.d` @type ^`e.e.a.b.f.r.m` @kind object;
  #L30b596.  v0:= v0.`e.e.a.b.f.r.m.f` @type ^`e.e.a.b.f.r.p` @kind object;
  #L30b59a.  call temp:= `b`(v0) @signature `Le/e/a/b/f/r/p;.b:(Le/e/a/b/f/r/p;)I` @kind static;
  #L30b5a0.  v0:= v1.`e.e.a.b.f.r.l.d` @type ^`e.e.a.b.f.r.m` @kind object;
  #L30b5a4.  call `zzb`(v0) @signature `Le/e/a/b/f/r/m;.zzb:()V` @kind virtual;
  #L30b5aa.  return @kind void;
}
procedure `void` `zza`(`e.e.a.b.f.r.l` v2 @kind this) @signature `Le/e/a/b/f/r/l;.zza:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L30b5bc.  v0:= v2.`e.e.a.b.f.r.l.d` @type ^`e.e.a.b.f.r.m` @kind object;
  #L30b5c0.  call `zza`(v0) @signature `Le/e/a/b/f/r/m;.zza:()V` @kind virtual;
  #L30b5c6.  v0:= v2.`e.e.a.b.f.r.l.d` @type ^`e.e.a.b.f.r.m` @kind object;
  #L30b5ca.  v0:= v0.`e.e.a.b.f.r.m.c` @type ^`java.util.Collection` @kind object;
  #L30b5ce.  v1:= v2.`e.e.a.b.f.r.l.c` @type ^`java.util.Collection` @kind object;
  #L30b5d2.  if v0 != v1 then goto L30b5d8;
  #L30b5d6.  return @kind void;
  #L30b5d8.  v0:= new `java.util.ConcurrentModificationException`;
  #L30b5dc.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L30b5e2.  throw v0;
}
