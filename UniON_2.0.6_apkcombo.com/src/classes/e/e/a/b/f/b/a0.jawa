record `e.e.a.b.f.b.a0` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.io.Serializable` @kind interface, `java.lang.Iterable` @kind interface {
  `int` `e.e.a.b.f.b.a0.b` @AccessFlag PRIVATE;
}
global `e.e.a.b.f.b.a0` `@@e.e.a.b.f.b.a0.c` @AccessFlag PUBLIC_STATIC_FINAL;
global `e.e.a.b.f.b.e0` `@@e.e.a.b.f.b.a0.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/b/a0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1fa734.  v0:= new `e.e.a.b.f.b.h0`;
  #L1fa738.  v1:= `@@e.e.a.b.f.b.h1.b` @type ^`byte`[] @kind object;
  #L1fa73c.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/b/h0;.<init>:([B)V` @kind direct;
  #L1fa742.  `@@e.e.a.b.f.b.a0.c` @type ^`e.e.a.b.f.b.a0` := v0 @kind object;
  #L1fa746.  call temp:= `a`() @signature `Le/e/a/b/f/b/u;.a:()Z` @kind static;
  #L1fa74c.  v0:= temp;
  #L1fa74e.  v1:= 0I;
  #L1fa750.  if v0 == 0 then goto L1fa760;
  #L1fa754.  v0:= new `e.e.a.b.f.b.i0`;
  #L1fa758.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/b/i0;.<init>:(Le/e/a/b/f/b/b0;)V` @kind direct;
  #L1fa75e.  goto L1fa76a;
  #L1fa760.  v0:= new `e.e.a.b.f.b.c0`;
  #L1fa764.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/b/c0;.<init>:(Le/e/a/b/f/b/b0;)V` @kind direct;
  #L1fa76a.  `@@e.e.a.b.f.b.a0.d` @type ^`e.e.a.b.f.b.e0` := v0 @kind object;
  #L1fa76e.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.b.a0` v1 @kind this) @signature `Le/e/a/b/f/b/a0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1fa780.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1fa786.  v0:= 0I;
  #L1fa788.  v1.`e.e.a.b.f.b.a0.b` @type ^`int` := v0;
  #L1fa78c.  return @kind void;
}
procedure `e.e.a.b.f.b.a0` `a`(`java.lang.String` v2 @kind object) @signature `Le/e/a/b/f/b/a0;.a:(Ljava/lang/String;)Le/e/a/b/f/b/a0;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1fa4b0.  v0:= new `e.e.a.b.f.b.h0`;
  #L1fa4b4.  v1:= `@@e.e.a.b.f.b.h1.a` @type ^`java.nio.charset.Charset` @kind object;
  #L1fa4b8.  call temp:= `getBytes`(v2, v1) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L1fa4be.  v2:= temp @kind object;
  #L1fa4c0.  call `<init>`(v0, v2) @signature `Le/e/a/b/f/b/h0;.<init>:([B)V` @kind direct;
  #L1fa4c6.  return v0 @kind object;
}
procedure `e.e.a.b.f.b.a0` `a`(`byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/b/a0;.a:([BII)Le/e/a/b/f/b/a0;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1fa488.  v0:= new `e.e.a.b.f.b.h0`;
  #L1fa48c.  v1:= `@@e.e.a.b.f.b.a0.d` @type ^`e.e.a.b.f.b.e0` @kind object;
  #L1fa490.  call temp:= `a`(v1, v2, v3, v4) @signature `Le/e/a/b/f/b/e0;.a:([BII)[B` @kind interface;
  #L1fa496.  v2:= temp @kind object;
  #L1fa498.  call `<init>`(v0, v2) @signature `Le/e/a/b/f/b/h0;.<init>:([B)V` @kind direct;
  #L1fa49e.  return v0 @kind object;
}
procedure `int` `b`(`int` v3 , `int` v4 , `int` v5 ) @signature `Le/e/a/b/f/b/a0;.b:(III)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1fa548.  v0:= v4 - v3 @kind int;
  #L1fa54c.  v1:= v3 ^| v4 @kind int;
  #L1fa550.  v1:= v1 ^| v0 @kind int;
  #L1fa552.  v2:= v5 - v4 @kind int;
  #L1fa556.  v1:= v1 ^| v2 @kind int;
  #L1fa558.  if v1 >= 0 then goto L1fa624;
  #L1fa55c.  if v3 < 0 then goto L1fa5e8;
  #L1fa560.  if v4 >= v3 then goto L1fa5a6;
  #L1fa564.  v5:= new `java.lang.IndexOutOfBoundsException`;
  #L1fa568.  v0:= 66I;
  #L1fa56c.  v1:= new `java.lang.StringBuilder`;
  #L1fa570.  call `<init>`(v1, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1fa576.  v0:= "Beginning index larger than ending index: " @kind object;
  #L1fa57a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa580.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa586.  v3:= ", " @kind object;
  #L1fa58a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa590.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa596.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fa59c.  v3:= temp @kind object;
  #L1fa59e.  call `<init>`(v5, v3) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fa5a4.  throw v5;
  #L1fa5a6.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L1fa5aa.  v0:= 37I;
  #L1fa5ae.  v1:= new `java.lang.StringBuilder`;
  #L1fa5b2.  call `<init>`(v1, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1fa5b8.  v0:= "End index: " @kind object;
  #L1fa5bc.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa5c2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa5c8.  v4:= " >= " @kind object;
  #L1fa5cc.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa5d2.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa5d8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fa5de.  v4:= temp @kind object;
  #L1fa5e0.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fa5e6.  throw v3;
  #L1fa5e8.  v4:= new `java.lang.IndexOutOfBoundsException`;
  #L1fa5ec.  v5:= 32I;
  #L1fa5f0.  v0:= new `java.lang.StringBuilder`;
  #L1fa5f4.  call `<init>`(v0, v5) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1fa5fa.  v5:= "Beginning index: " @kind object;
  #L1fa5fe.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa604.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa60a.  v3:= " < 0" @kind object;
  #L1fa60e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa614.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fa61a.  v3:= temp @kind object;
  #L1fa61c.  call `<init>`(v4, v3) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fa622.  throw v4;
  #L1fa624.  return v0;
}
procedure `e.e.a.b.f.b.f0` `i`(`int` v2 ) @signature `Le/e/a/b/f/b/a0;.i:(I)Le/e/a/b/f/b/f0;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1fa4d8.  v0:= new `e.e.a.b.f.b.f0`;
  #L1fa4dc.  v1:= 0I;
  #L1fa4de.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/b/f0;.<init>:(ILe/e/a/b/f/b/b0;)V` @kind direct;
  #L1fa4e4.  return v0 @kind object;
}
procedure `int` `a`(`int` v0 , `int` v1 , `int` v2 ) @signature `Le/e/a/b/f/b/a0;.a:(III)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `e.e.a.b.f.b.a0` `a`(`int` v0 , `int` v1 ) @signature `Le/e/a/b/f/b/a0;.a:(II)Le/e/a/b/f/b/a0;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `a`(`java.nio.charset.Charset` v0 @kind object) @signature `Le/e/a/b/f/b/a0;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `a`(`e.e.a.b.f.b.z` v0 @kind object) @signature `Le/e/a/b/f/b/a0;.a:(Le/e/a/b/f/b/z;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `d`() @signature `Le/e/a/b/f/b/a0;.d:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `equals`(`java.lang.Object` v0 @kind object) @signature `Le/e/a/b/f/b/a0;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `f`(`e.e.a.b.f.b.a0` v1 @kind this) @signature `Le/e/a/b/f/b/a0;.f:()I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1fa530.  v0:= v1.`e.e.a.b.f.b.a0.b` @type ^`int`;
  #L1fa534.  return v0;
}
procedure `java.lang.String` `g`(`e.e.a.b.f.b.a0` v2 @kind this) @signature `Le/e/a/b/f/b/a0;.g:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1fa688.  v0:= `@@e.e.a.b.f.b.h1.a` @type ^`java.nio.charset.Charset` @kind object;
  #L1fa68c.  call temp:= `size`(v2) @signature `Le/e/a/b/f/b/a0;.size:()I` @kind virtual;
  #L1fa692.  v1:= temp;
  #L1fa694.  if v1 != 0 then goto L1fa69e;
  #L1fa698.  v0:= "" @kind object;
  #L1fa69c.  return v0 @kind object;
  #L1fa69e.  call temp:= `a`(v2, v0) @signature `Le/e/a/b/f/b/a0;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L1fa6a4.  v0:= temp @kind object;
  #L1fa6a6.  return v0 @kind object;
}
procedure `byte` `h`(`int` v0 ) @signature `Le/e/a/b/f/b/a0;.h:(I)B` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `hashCode`(`e.e.a.b.f.b.a0` v2 @kind this) @signature `Le/e/a/b/f/b/a0;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1fa4f8.  v0:= v2.`e.e.a.b.f.b.a0.b` @type ^`int`;
  #L1fa4fc.  if v0 != 0 then goto L1fa51c;
  #L1fa500.  call temp:= `size`(v2) @signature `Le/e/a/b/f/b/a0;.size:()I` @kind virtual;
  #L1fa506.  v0:= temp;
  #L1fa508.  v1:= 0I;
  #L1fa50a.  call temp:= `a`(v2, v0, v1, v0) @signature `Le/e/a/b/f/b/a0;.a:(III)I` @kind virtual;
  #L1fa510.  v0:= temp;
  #L1fa512.  if v0 != 0 then goto L1fa518;
  #L1fa516.  v0:= 1I;
  #L1fa518.  v2.`e.e.a.b.f.b.a0.b` @type ^`int` := v0;
  #L1fa51c.  return v0;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.b.a0` v1 @kind this) @signature `Le/e/a/b/f/b/a0;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1fa6b8.  v0:= new `e.e.a.b.f.b.b0`;
  #L1fa6bc.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/b/b0;.<init>:(Le/e/a/b/f/b/a0;)V` @kind direct;
  #L1fa6c2.  return v0 @kind object;
}
procedure `int` `size`() @signature `Le/e/a/b/f/b/a0;.size:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `toString`(`e.e.a.b.f.b.a0` v3 @kind this) @signature `Le/e/a/b/f/b/a0;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1fa638.  v0:= 2I;
  #L1fa63a.  v0:= new `java.lang.Object`[v0];
  #L1fa63e.  call temp:= `identityHashCode`(v3) @signature `Ljava/lang/System;.identityHashCode:(Ljava/lang/Object;)I` @kind static;
  #L1fa644.  v1:= temp;
  #L1fa646.  call temp:= `toHexString`(v1) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L1fa64c.  v1:= temp @kind object;
  #L1fa64e.  v2:= 0I;
  #L1fa650.  v0[v2]:= v1 @kind object;
  #L1fa654.  call temp:= `size`(v3) @signature `Le/e/a/b/f/b/a0;.size:()I` @kind virtual;
  #L1fa65a.  v1:= temp;
  #L1fa65c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1fa662.  v1:= temp @kind object;
  #L1fa664.  v2:= 1I;
  #L1fa666.  v0[v2]:= v1 @kind object;
  #L1fa66a.  v1:= "<ByteString@%s size=%d>" @kind object;
  #L1fa66e.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1fa674.  v0:= temp @kind object;
  #L1fa676.  return v0 @kind object;
}
