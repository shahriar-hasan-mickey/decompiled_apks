record `e.e.a.b.f.u.e7` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `int` `e.e.a.b.f.u.e7.b` @AccessFlag PRIVATE;
  `boolean` `e.e.a.b.f.u.e7.c` @AccessFlag PRIVATE;
  `java.util.Iterator` `e.e.a.b.f.u.e7.d` @AccessFlag PRIVATE;
  `e.e.a.b.f.u.w6` `e.e.a.b.f.u.e7.e` @AccessFlag PRIVATE_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.u.e7` v0 @kind this, `e.e.a.b.f.u.w6` v1 @kind object) @signature `Le/e/a/b/f/u/e7;.<init>:(Le/e/a/b/f/u/w6;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L33a59c.  v0.`e.e.a.b.f.u.e7.e` @type ^`e.e.a.b.f.u.w6` := v1 @kind object;
  #L33a5a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L33a5a6.  v1:= -1I;
  #L33a5a8.  v0.`e.e.a.b.f.u.e7.b` @type ^`int` := v1;
  #L33a5ac.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.u.e7` v0 @kind this, `e.e.a.b.f.u.w6` v1 @kind object, `e.e.a.b.f.u.v6` v2 @kind object) @signature `Le/e/a/b/f/u/e7;.<init>:(Le/e/a/b/f/u/w6;Le/e/a/b/f/u/v6;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L33a5c0.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/u/e7;.<init>:(Le/e/a/b/f/u/w6;)V` @kind direct;
  #L33a5c6.  return @kind void;
}
procedure `java.util.Iterator` `zza`(`e.e.a.b.f.u.e7` v1 @kind this) @signature `Le/e/a/b/f/u/e7;.zza:()Ljava/util/Iterator;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L33a55c.  v0:= v1.`e.e.a.b.f.u.e7.d` @type ^`java.util.Iterator` @kind object;
  #L33a560.  if v0 != 0 then goto L33a584;
  #L33a564.  v0:= v1.`e.e.a.b.f.u.e7.e` @type ^`e.e.a.b.f.u.w6` @kind object;
  #L33a568.  call temp:= `c`(v0) @signature `Le/e/a/b/f/u/w6;.c:(Le/e/a/b/f/u/w6;)Ljava/util/Map;` @kind static;
  #L33a56e.  v0:= temp @kind object;
  #L33a570.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L33a576.  v0:= temp @kind object;
  #L33a578.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L33a57e.  v0:= temp @kind object;
  #L33a580.  v1.`e.e.a.b.f.u.e7.d` @type ^`java.util.Iterator` := v0 @kind object;
  #L33a584.  v0:= v1.`e.e.a.b.f.u.e7.d` @type ^`java.util.Iterator` @kind object;
  #L33a588.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`e.e.a.b.f.u.e7` v3 @kind this) @signature `Le/e/a/b/f/u/e7;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L33a490.  v0:= v3.`e.e.a.b.f.u.e7.b` @type ^`int`;
  #L33a494.  v1:= 1I;
  #L33a496.  v0:= v0 + v1 @kind int;
  #L33a498.  v2:= v3.`e.e.a.b.f.u.e7.e` @type ^`e.e.a.b.f.u.w6` @kind object;
  #L33a49c.  call temp:= `b`(v2) @signature `Le/e/a/b/f/u/w6;.b:(Le/e/a/b/f/u/w6;)Ljava/util/List;` @kind static;
  #L33a4a2.  v2:= temp @kind object;
  #L33a4a4.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L33a4aa.  v2:= temp;
  #L33a4ac.  if v0 < v2 then goto L33a4e2;
  #L33a4b0.  v0:= v3.`e.e.a.b.f.u.e7.e` @type ^`e.e.a.b.f.u.w6` @kind object;
  #L33a4b4.  call temp:= `c`(v0) @signature `Le/e/a/b/f/u/w6;.c:(Le/e/a/b/f/u/w6;)Ljava/util/Map;` @kind static;
  #L33a4ba.  v0:= temp @kind object;
  #L33a4bc.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L33a4c2.  v0:= temp;
  #L33a4c4.  if v0 != 0 then goto L33a4de;
  #L33a4c8.  call temp:= `zza`(v3) @signature `Le/e/a/b/f/u/e7;.zza:()Ljava/util/Iterator;` @kind direct;
  #L33a4ce.  v0:= temp @kind object;
  #L33a4d0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L33a4d6.  v0:= temp;
  #L33a4d8.  if v0 == 0 then goto L33a4de;
  #L33a4dc.  goto L33a4e2;
  #L33a4de.  v0:= 0I;
  #L33a4e0.  return v0;
  #L33a4e2.  return v1;
}
procedure `java.lang.Object` `next`(`e.e.a.b.f.u.e7` v2 @kind this) @signature `Le/e/a/b/f/u/e7;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L33a4f4.  v0:= 1I;
  #L33a4f6.  v2.`e.e.a.b.f.u.e7.c` @type ^`boolean` := v0 @kind boolean;
  #L33a4fa.  v1:= v2.`e.e.a.b.f.u.e7.b` @type ^`int`;
  #L33a4fe.  v1:= v1 + v0 @kind int;
  #L33a500.  v2.`e.e.a.b.f.u.e7.b` @type ^`int` := v1;
  #L33a504.  v0:= v2.`e.e.a.b.f.u.e7.e` @type ^`e.e.a.b.f.u.w6` @kind object;
  #L33a508.  call temp:= `b`(v0) @signature `Le/e/a/b/f/u/w6;.b:(Le/e/a/b/f/u/w6;)Ljava/util/List;` @kind static;
  #L33a50e.  v0:= temp @kind object;
  #L33a510.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L33a516.  v0:= temp;
  #L33a518.  if v1 >= v0 then goto L33a53a;
  #L33a51c.  v0:= v2.`e.e.a.b.f.u.e7.e` @type ^`e.e.a.b.f.u.w6` @kind object;
  #L33a520.  call temp:= `b`(v0) @signature `Le/e/a/b/f/u/w6;.b:(Le/e/a/b/f/u/w6;)Ljava/util/List;` @kind static;
  #L33a526.  v0:= temp @kind object;
  #L33a528.  v1:= v2.`e.e.a.b.f.u.e7.b` @type ^`int`;
  #L33a52c.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L33a532.  v0:= temp @kind object;
  #L33a534.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L33a538.  return v0 @kind object;
  #L33a53a.  call temp:= `zza`(v2) @signature `Le/e/a/b/f/u/e7;.zza:()Ljava/util/Iterator;` @kind direct;
  #L33a540.  v0:= temp @kind object;
  #L33a542.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L33a548.  v0:= temp @kind object;
  #L33a54a.  goto L33a534;
}
procedure `void` `remove`(`e.e.a.b.f.u.e7` v3 @kind this) @signature `Le/e/a/b/f/u/e7;.remove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L33a5d8.  v0:= v3.`e.e.a.b.f.u.e7.c` @type ^`boolean` @kind boolean;
  #L33a5dc.  if v0 == 0 then goto L33a634;
  #L33a5e0.  v0:= 0I;
  #L33a5e2.  v3.`e.e.a.b.f.u.e7.c` @type ^`boolean` := v0 @kind boolean;
  #L33a5e6.  v0:= v3.`e.e.a.b.f.u.e7.e` @type ^`e.e.a.b.f.u.w6` @kind object;
  #L33a5ea.  call `a`(v0) @signature `Le/e/a/b/f/u/w6;.a:(Le/e/a/b/f/u/w6;)V` @kind static;
  #L33a5f0.  v0:= v3.`e.e.a.b.f.u.e7.b` @type ^`int`;
  #L33a5f4.  v1:= v3.`e.e.a.b.f.u.e7.e` @type ^`e.e.a.b.f.u.w6` @kind object;
  #L33a5f8.  call temp:= `b`(v1) @signature `Le/e/a/b/f/u/w6;.b:(Le/e/a/b/f/u/w6;)Ljava/util/List;` @kind static;
  #L33a5fe.  v1:= temp @kind object;
  #L33a600.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L33a606.  v1:= temp;
  #L33a608.  if v0 >= v1 then goto L33a624;
  #L33a60c.  v0:= v3.`e.e.a.b.f.u.e7.e` @type ^`e.e.a.b.f.u.w6` @kind object;
  #L33a610.  v1:= v3.`e.e.a.b.f.u.e7.b` @type ^`int`;
  #L33a614.  v2:= v1 + -1;
  #L33a618.  v3.`e.e.a.b.f.u.e7.b` @type ^`int` := v2;
  #L33a61c.  call temp:= `a`(v0, v1) @signature `Le/e/a/b/f/u/w6;.a:(Le/e/a/b/f/u/w6;I)Ljava/lang/Object;` @kind static;
  #L33a622.  return @kind void;
  #L33a624.  call temp:= `zza`(v3) @signature `Le/e/a/b/f/u/e7;.zza:()Ljava/util/Iterator;` @kind direct;
  #L33a62a.  v0:= temp @kind object;
  #L33a62c.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L33a632.  return @kind void;
  #L33a634.  v0:= new `java.lang.IllegalStateException`;
  #L33a638.  v1:= "remove() was called before next()" @kind object;
  #L33a63c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33a642.  throw v0;
}
