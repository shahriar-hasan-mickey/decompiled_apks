record `e.e.a.b.f.q.tu` @kind class @AccessFlag ABSTRACT extends `java.util.AbstractList` @kind class, `e.e.a.b.f.q.a0` @kind interface {
  `boolean` `e.e.a.b.f.q.tu.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.f.q.tu` v1 @kind this) @signature `Le/e/a/b/f/q/tu;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L309db8.  call `<init>`(v1) @signature `Ljava/util/AbstractList;.<init>:()V` @kind direct;
  #L309dbe.  v0:= 1I;
  #L309dc0.  v1.`e.e.a.b.f.q.tu.b` @type ^`boolean` := v0 @kind boolean;
  #L309dc4.  return @kind void;
}
procedure `boolean` `add`(`e.e.a.b.f.q.tu` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/q/tu;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L309c10.  call `d`(v0) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L309c16.  call temp:= `add`(v0, v1) @signature `Ljava/util/AbstractList;.add:(Ljava/lang/Object;)Z` @kind super;
  #L309c1c.  v1:= temp;
  #L309c1e.  return v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.q.tu` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/q/tu;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L309c30.  call `d`(v0) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L309c36.  call temp:= `addAll`(v0, v1, v2) @signature `Ljava/util/AbstractList;.addAll:(ILjava/util/Collection;)Z` @kind super;
  #L309c3c.  v1:= temp;
  #L309c3e.  return v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.q.tu` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/q/tu;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L309c50.  call `d`(v0) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L309c56.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/AbstractList;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L309c5c.  v1:= temp;
  #L309c5e.  return v1;
}
procedure `void` `clear`(`e.e.a.b.f.q.tu` v0 @kind this) @signature `Le/e/a/b/f/q/tu;.clear:()V` @AccessFlag PUBLIC {
    temp;

  #L309dd8.  call `d`(v0) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L309dde.  call `clear`(v0) @signature `Ljava/util/AbstractList;.clear:()V` @kind super;
  #L309de4.  return @kind void;
}
procedure `void` `d`(`e.e.a.b.f.q.tu` v1 @kind this) @signature `Le/e/a/b/f/q/tu;.d:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L309e10.  v0:= v1.`e.e.a.b.f.q.tu.b` @type ^`boolean` @kind boolean;
  #L309e14.  if v0 == 0 then goto L309e1a;
  #L309e18.  return @kind void;
  #L309e1a.  v0:= new `java.lang.UnsupportedOperationException`;
  #L309e1e.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L309e24.  throw v0;
}
procedure `boolean` `equals`(`e.e.a.b.f.q.tu` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/q/tu;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L309c70.  v0:= 1I;
  #L309c72.  if v7 != v6 then goto L309c78;
  #L309c76.  return v0;
  #L309c78.  v1:= instanceof @variable v7 @type ^`java.util.List` @kind boolean;
  #L309c7c.  v2:= 0I;
  #L309c7e.  if v1 != 0 then goto L309c84;
  #L309c82.  return v2;
  #L309c84.  v1:= instanceof @variable v7 @type ^`java.util.RandomAccess` @kind boolean;
  #L309c88.  if v1 != 0 then goto L309c96;
  #L309c8c.  call temp:= `equals`(v6, v7) @signature `Ljava/util/AbstractList;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L309c92.  v7:= temp;
  #L309c94.  return v7;
  #L309c96.  v7:= (`java.util.List`) v7 @kind object;
  #L309c9a.  call temp:= `size`(v6) @signature `Ljava/util/AbstractList;.size:()I` @kind virtual;
  #L309ca0.  v1:= temp;
  #L309ca2.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L309ca8.  v3:= temp;
  #L309caa.  if v1 != v3 then goto L309cda;
  #L309cae.  v3:= 0I;
  #L309cb0.  if v3 >= v1 then goto L309cd8;
  #L309cb4.  call temp:= `get`(v6, v3) @signature `Ljava/util/AbstractList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L309cba.  v4:= temp @kind object;
  #L309cbc.  call temp:= `get`(v7, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L309cc2.  v5:= temp @kind object;
  #L309cc4.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L309cca.  v4:= temp;
  #L309ccc.  if v4 != 0 then goto L309cd2;
  #L309cd0.  return v2;
  #L309cd2.  v3:= v3 + 1;
  #L309cd6.  goto L309cb0;
  #L309cd8.  return v0;
  #L309cda.  return v2;
}
procedure `int` `hashCode`(`e.e.a.b.f.q.tu` v4 @kind this) @signature `Le/e/a/b/f/q/tu;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L309d78.  call temp:= `size`(v4) @signature `Ljava/util/AbstractList;.size:()I` @kind virtual;
  #L309d7e.  v0:= temp;
  #L309d80.  v1:= 1I;
  #L309d82.  v2:= 0I;
  #L309d84.  if v2 >= v0 then goto L309da4;
  #L309d88.  v1:= v1 * 31;
  #L309d8c.  call temp:= `get`(v4, v2) @signature `Ljava/util/AbstractList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L309d92.  v3:= temp @kind object;
  #L309d94.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L309d9a.  v3:= temp;
  #L309d9c.  v1:= v1 + v3 @kind int;
  #L309d9e.  v2:= v2 + 1;
  #L309da2.  goto L309d84;
  #L309da4.  return v1;
}
procedure `java.lang.Object` `remove`(`int` v0 ) @signature `Le/e/a/b/f/q/tu;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `remove`(`e.e.a.b.f.q.tu` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/q/tu;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L309cec.  call `d`(v1) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L309cf2.  call temp:= `indexOf`(v1, v2) @signature `Ljava/util/AbstractList;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L309cf8.  v2:= temp;
  #L309cfa.  v0:= -1I;
  #L309cfc.  if v2 != v0 then goto L309d04;
  #L309d00.  v2:= 0I;
  #L309d02.  return v2;
  #L309d04.  call temp:= `remove`(v1, v2) @signature `Le/e/a/b/f/q/tu;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L309d0a.  v2:= 1I;
  #L309d0c.  return v2;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.q.tu` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/q/tu;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L309d20.  call `d`(v0) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L309d26.  call temp:= `removeAll`(v0, v1) @signature `Ljava/util/AbstractList;.removeAll:(Ljava/util/Collection;)Z` @kind super;
  #L309d2c.  v1:= temp;
  #L309d2e.  return v1;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.q.tu` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/q/tu;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L309d40.  call `d`(v0) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L309d46.  call temp:= `retainAll`(v0, v1) @signature `Ljava/util/AbstractList;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L309d4c.  v1:= temp;
  #L309d4e.  return v1;
}
procedure `boolean` `zza`(`e.e.a.b.f.q.tu` v1 @kind this) @signature `Le/e/a/b/f/q/tu;.zza:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L309d60.  v0:= v1.`e.e.a.b.f.q.tu.b` @type ^`boolean` @kind boolean;
  #L309d64.  return v0;
}
procedure `void` `zzb`(`e.e.a.b.f.q.tu` v1 @kind this) @signature `Le/e/a/b/f/q/tu;.zzb:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L309df8.  v0:= 0I;
  #L309dfa.  v1.`e.e.a.b.f.q.tu.b` @type ^`boolean` := v0 @kind boolean;
  #L309dfe.  return @kind void;
}
