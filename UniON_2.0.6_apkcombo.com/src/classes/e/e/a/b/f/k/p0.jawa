record `e.e.a.b.f.k.p0` @kind class @AccessFlag ABSTRACT extends `java.util.Iterator` @kind interface {
  `int` `e.e.a.b.f.k.p0.b` @AccessFlag ;
  `int` `e.e.a.b.f.k.p0.c` @AccessFlag ;
  `int` `e.e.a.b.f.k.p0.d` @AccessFlag ;
  `e.e.a.b.f.k.t0` `e.e.a.b.f.k.p0.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.k.p0` v0 @kind this, `e.e.a.b.f.k.t0` v1 @kind object, `e.e.a.b.f.k.l0` v2 @kind object) @signature `Le/e/a/b/f/k/p0;.<init>:(Le/e/a/b/f/k/t0;Le/e/a/b/f/k/l0;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L244f2c.  v0.`e.e.a.b.f.k.p0.e` @type ^`e.e.a.b.f.k.t0` := v1 @kind object;
  #L244f30.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L244f36.  v1:= v0.`e.e.a.b.f.k.p0.e` @type ^`e.e.a.b.f.k.t0` @kind object;
  #L244f3a.  call temp:= `a`(v1) @signature `Le/e/a/b/f/k/t0;.a:(Le/e/a/b/f/k/t0;)I` @kind static;
  #L244f40.  v1:= temp;
  #L244f42.  v0.`e.e.a.b.f.k.p0.b` @type ^`int` := v1;
  #L244f46.  v1:= v0.`e.e.a.b.f.k.p0.e` @type ^`e.e.a.b.f.k.t0` @kind object;
  #L244f4a.  call temp:= `d`(v1) @signature `Le/e/a/b/f/k/t0;.d:()I` @kind virtual;
  #L244f50.  v1:= temp;
  #L244f52.  v0.`e.e.a.b.f.k.p0.c` @type ^`int` := v1;
  #L244f56.  v1:= -1I;
  #L244f58.  v0.`e.e.a.b.f.k.p0.d` @type ^`int` := v1;
  #L244f5c.  return @kind void;
}
procedure `void` `a`(`e.e.a.b.f.k.p0` v2 @kind this) @signature `Le/e/a/b/f/k/p0;.a:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L244fd4.  v0:= v2.`e.e.a.b.f.k.p0.e` @type ^`e.e.a.b.f.k.t0` @kind object;
  #L244fd8.  call temp:= `a`(v0) @signature `Le/e/a/b/f/k/t0;.a:(Le/e/a/b/f/k/t0;)I` @kind static;
  #L244fde.  v0:= temp;
  #L244fe0.  v1:= v2.`e.e.a.b.f.k.p0.b` @type ^`int`;
  #L244fe4.  if v0 != v1 then goto L244fea;
  #L244fe8.  return @kind void;
  #L244fea.  v0:= new `java.util.ConcurrentModificationException`;
  #L244fee.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L244ff4.  throw v0;
}
procedure `java.lang.Object` `a`(`int` v0 ) @signature `Le/e/a/b/f/k/p0;.a:(I)Ljava/lang/Object;` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `hasNext`(`e.e.a.b.f.k.p0` v1 @kind this) @signature `Le/e/a/b/f/k/p0;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L244eb8.  v0:= v1.`e.e.a.b.f.k.p0.c` @type ^`int`;
  #L244ebc.  if v0 < 0 then goto L244ec4;
  #L244ec0.  v0:= 1I;
  #L244ec2.  return v0;
  #L244ec4.  v0:= 0I;
  #L244ec6.  return v0;
}
procedure `java.lang.Object` `next`(`e.e.a.b.f.k.p0` v3 @kind this) @signature `Le/e/a/b/f/k/p0;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L244ed8.  call `a`(v3) @signature `Le/e/a/b/f/k/p0;.a:()V` @kind direct;
  #L244ede.  call temp:= `hasNext`(v3) @signature `Le/e/a/b/f/k/p0;.hasNext:()Z` @kind virtual;
  #L244ee4.  v0:= temp;
  #L244ee6.  if v0 == 0 then goto L244f10;
  #L244eea.  v0:= v3.`e.e.a.b.f.k.p0.c` @type ^`int`;
  #L244eee.  v3.`e.e.a.b.f.k.p0.d` @type ^`int` := v0;
  #L244ef2.  call temp:= `a`(v3, v0) @signature `Le/e/a/b/f/k/p0;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L244ef8.  v0:= temp @kind object;
  #L244efa.  v1:= v3.`e.e.a.b.f.k.p0.e` @type ^`e.e.a.b.f.k.t0` @kind object;
  #L244efe.  v2:= v3.`e.e.a.b.f.k.p0.c` @type ^`int`;
  #L244f02.  call temp:= `b`(v1, v2) @signature `Le/e/a/b/f/k/t0;.b:(I)I` @kind virtual;
  #L244f08.  v1:= temp;
  #L244f0a.  v3.`e.e.a.b.f.k.p0.c` @type ^`int` := v1;
  #L244f0e.  return v0 @kind object;
  #L244f10.  v0:= new `java.util.NoSuchElementException`;
  #L244f14.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L244f1a.  throw v0;
}
procedure `void` `remove`(`e.e.a.b.f.k.p0` v3 @kind this) @signature `Le/e/a/b/f/k/p0;.remove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L244f70.  call `a`(v3) @signature `Le/e/a/b/f/k/p0;.a:()V` @kind direct;
  #L244f76.  v0:= v3.`e.e.a.b.f.k.p0.d` @type ^`int`;
  #L244f7a.  if v0 < 0 then goto L244f82;
  #L244f7e.  v0:= 1I;
  #L244f80.  goto L244f84;
  #L244f82.  v0:= 0I;
  #L244f84.  v1:= "no calls to next() since the last call to remove()" @kind object;
  #L244f88.  call `a`(v0, v1) @signature `Le/e/a/b/f/k/r;.a:(ZLjava/lang/Object;)V` @kind static;
  #L244f8e.  v0:= v3.`e.e.a.b.f.k.p0.b` @type ^`int`;
  #L244f92.  v0:= v0 + 32;
  #L244f96.  v3.`e.e.a.b.f.k.p0.b` @type ^`int` := v0;
  #L244f9a.  v0:= v3.`e.e.a.b.f.k.p0.e` @type ^`e.e.a.b.f.k.t0` @kind object;
  #L244f9e.  v1:= v0.`e.e.a.b.f.k.t0.d` @type ^`java.lang.Object`[] @kind object;
  #L244fa2.  v2:= v3.`e.e.a.b.f.k.p0.d` @type ^`int`;
  #L244fa6.  v1:= v1[v2] @kind object;
  #L244faa.  call temp:= `remove`(v0, v1) @signature `Le/e/a/b/f/k/t0;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L244fb0.  v0:= v3.`e.e.a.b.f.k.p0.c` @type ^`int`;
  #L244fb4.  v1:= -1I;
  #L244fb6.  v0:= v0 + v1 @kind int;
  #L244fb8.  v3.`e.e.a.b.f.k.p0.c` @type ^`int` := v0;
  #L244fbc.  v3.`e.e.a.b.f.k.p0.d` @type ^`int` := v1;
  #L244fc0.  return @kind void;
}
