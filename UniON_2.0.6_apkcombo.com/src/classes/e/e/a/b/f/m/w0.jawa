record `e.e.a.b.f.m.w0` @kind class @AccessFlag ABSTRACT extends `java.util.AbstractMap` @kind class {
  `java.util.Set` `e.e.a.b.f.m.w0.b` @AccessFlag PRIVATE_TRANSIENT;
  `java.util.Collection` `e.e.a.b.f.m.w0.c` @AccessFlag PRIVATE_TRANSIENT;
}
procedure `void` `<init>`(`e.e.a.b.f.m.w0` v0 @kind this) @signature `Le/e/a/b/f/m/w0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L267aac.  call `<init>`(v0) @signature `Ljava/util/AbstractMap;.<init>:()V` @kind direct;
  #L267ab2.  return @kind void;
}
procedure `java.util.Set` `a`() @signature `Le/e/a/b/f/m/w0;.a:()Ljava/util/Set;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.util.Set` `entrySet`(`e.e.a.b.f.m.w0` v1 @kind this) @signature `Le/e/a/b/f/m/w0;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L267a84.  v0:= v1.`e.e.a.b.f.m.w0.b` @type ^`java.util.Set` @kind object;
  #L267a88.  if v0 != 0 then goto L267a98;
  #L267a8c.  call temp:= `a`(v1) @signature `Le/e/a/b/f/m/w0;.a:()Ljava/util/Set;` @kind virtual;
  #L267a92.  v0:= temp @kind object;
  #L267a94.  v1.`e.e.a.b.f.m.w0.b` @type ^`java.util.Set` := v0 @kind object;
  #L267a98.  return v0 @kind object;
}
procedure `java.util.Collection` `values`(`e.e.a.b.f.m.w0` v1 @kind this) @signature `Le/e/a/b/f/m/w0;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L267a5c.  v0:= v1.`e.e.a.b.f.m.w0.c` @type ^`java.util.Collection` @kind object;
  #L267a60.  if v0 != 0 then goto L267a72;
  #L267a64.  v0:= new `e.e.a.b.f.m.v0`;
  #L267a68.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/m/v0;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L267a6e.  v1.`e.e.a.b.f.m.w0.c` @type ^`java.util.Collection` := v0 @kind object;
  #L267a72.  return v0 @kind object;
}
