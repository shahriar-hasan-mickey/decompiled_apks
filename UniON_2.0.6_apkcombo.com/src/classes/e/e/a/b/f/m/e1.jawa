record `e.e.a.b.f.m.e1` @kind class @AccessFlag ABSTRACT extends `java.util.AbstractSet` @kind class {
}
procedure `void` `<init>`(`e.e.a.b.f.m.e1` v0 @kind this) @signature `Le/e/a/b/f/m/e1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L267e9c.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L267ea2.  return @kind void;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.m.e1` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/m/e1;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L267e5c.  call temp:= `a`(v0, v1) @signature `Le/e/a/b/f/m/f1;.a:(Ljava/util/Set;Ljava/util/Collection;)Z` @kind static;
  #L267e62.  v1:= temp;
  #L267e64.  return v1;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.m.e1` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/m/e1;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L267e78.  if v1 == 0 then goto L267e86;
  #L267e7c.  call temp:= `retainAll`(v0, v1) @signature `Ljava/util/AbstractSet;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L267e82.  v1:= temp;
  #L267e84.  return v1;
  #L267e86.  v1:= 0I;
  #L267e88.  throw v1;
}
