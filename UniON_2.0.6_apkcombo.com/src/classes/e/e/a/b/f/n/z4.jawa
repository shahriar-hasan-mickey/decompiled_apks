record `e.e.a.b.f.n.z4` @kind class @AccessFlag FINAL extends `e.e.a.b.f.n.y4` @kind class {
}
procedure `void` `<init>`(`e.e.a.b.f.n.z4` v0 @kind this) @signature `Le/e/a/b/f/n/z4;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L28d6f4.  call `<init>`(v0) @signature `Le/e/a/b/f/n/y4;.<init>:()V` @kind direct;
  #L28d6fa.  return @kind void;
}
procedure `int` `a`(`e.e.a.b.f.n.z4` v11 @kind this, `int` v12 , `byte`[] v13 @kind object, `int` v14 , `int` v15 ) @signature `Le/e/a/b/f/n/z4;.a:(I[BII)I` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L28d14c.  v0:= -19I;
  #L28d150.  v1:= -62I;
  #L28d154.  v2:= -16I;
  #L28d158.  v3:= 0I;
  #L28d15a.  v4:= -96I;
  #L28d15e.  v5:= -32I;
  #L28d162.  v6:= -65I;
  #L28d166.  v7:= -1I;
  #L28d168.  if v12 == 0 then goto L28d258;
  #L28d16c.  if v14 < v15 then goto L28d172;
  #L28d170.  return v12;
  #L28d172.  v8:= (`byte`) v12 @kind i2b;
  #L28d174.  if v8 >= v5 then goto L28d18e;
  #L28d178.  if v8 < v1 then goto L28d18c;
  #L28d17c.  v12:= v14 + 1;
  #L28d180.  v14:= v13[v14] @kind byte;
  #L28d184.  if v14 > v6 then goto L28d18c;
  #L28d188.  goto L28d25a;
  #L28d18c.  return v7;
  #L28d18e.  if v8 >= v2 then goto L28d1e0;
  #L28d192.  v12:= v12 ^> 8;
  #L28d196.  v12:= ~v12 @kind int;
  #L28d198.  v12:= (`byte`) v12 @kind i2b;
  #L28d19a.  if v12 != 0 then goto L28d1bc;
  #L28d19e.  v12:= v14 + 1;
  #L28d1a2.  v14:= v13[v14] @kind byte;
  #L28d1a6.  if v12 >= v15 then goto L28d1b2;
  #L28d1aa.  v10:= v14;
  #L28d1ac.  v14:= v12;
  #L28d1ae.  v12:= v10;
  #L28d1b0.  goto L28d1bc;
  #L28d1b2.  call temp:= `a`(v8, v14) @signature `Le/e/a/b/f/n/c5;.a:(II)I` @kind static;
  #L28d1b8.  v12:= temp;
  #L28d1ba.  return v12;
  #L28d1bc.  if v12 > v6 then goto L28d1de;
  #L28d1c0.  if v8 != v5 then goto L28d1c8;
  #L28d1c4.  if v12 < v4 then goto L28d1de;
  #L28d1c8.  if v8 != v0 then goto L28d1d0;
  #L28d1cc.  if v12 >= v4 then goto L28d1de;
  #L28d1d0.  v12:= v14 + 1;
  #L28d1d4.  v14:= v13[v14] @kind byte;
  #L28d1d8.  if v14 > v6 then goto L28d1de;
  #L28d1dc.  goto L28d25a;
  #L28d1de.  return v7;
  #L28d1e0.  v9:= v12 ^> 8;
  #L28d1e4.  v9:= ~v9 @kind int;
  #L28d1e6.  v9:= (`byte`) v9 @kind i2b;
  #L28d1e8.  if v9 != 0 then goto L28d208;
  #L28d1ec.  v12:= v14 + 1;
  #L28d1f0.  v9:= v13[v14] @kind byte;
  #L28d1f4.  if v12 >= v15 then goto L28d1fe;
  #L28d1f8.  v14:= v12;
  #L28d1fa.  v12:= 0I;
  #L28d1fc.  goto L28d20c;
  #L28d1fe.  call temp:= `a`(v8, v9) @signature `Le/e/a/b/f/n/c5;.a:(II)I` @kind static;
  #L28d204.  v12:= temp;
  #L28d206.  return v12;
  #L28d208.  v12:= v12 ^> 16;
  #L28d20c.  if v12 != 0 then goto L28d22e;
  #L28d210.  v12:= v14 + 1;
  #L28d214.  v14:= v13[v14] @kind byte;
  #L28d218.  if v12 >= v15 then goto L28d224;
  #L28d21c.  v10:= v14;
  #L28d21e.  v14:= v12;
  #L28d220.  v12:= v10;
  #L28d222.  goto L28d22e;
  #L28d224.  call temp:= `a`(v8, v9, v14) @signature `Le/e/a/b/f/n/c5;.a:(III)I` @kind static;
  #L28d22a.  v12:= temp;
  #L28d22c.  return v12;
  #L28d22e.  if v9 > v6 then goto L28d256;
  #L28d232.  v8:= v8 ^< 28;
  #L28d236.  v9:= v9 + 112;
  #L28d23a.  v8:= v8 + v9 @kind int;
  #L28d23c.  v8:= v8 ^> 30;
  #L28d240.  if v8 != 0 then goto L28d256;
  #L28d244.  if v12 > v6 then goto L28d256;
  #L28d248.  v12:= v14 + 1;
  #L28d24c.  v14:= v13[v14] @kind byte;
  #L28d250.  if v14 > v6 then goto L28d256;
  #L28d254.  goto L28d25a;
  #L28d256.  return v7;
  #L28d258.  v12:= v14;
  #L28d25a.  if v12 >= v15 then goto L28d26c;
  #L28d25e.  v14:= v13[v12] @kind byte;
  #L28d262.  if v14 < 0 then goto L28d26c;
  #L28d266.  v12:= v12 + 1;
  #L28d26a.  goto L28d25a;
  #L28d26c.  if v12 < v15 then goto L28d274;
  #L28d270.  v7:= 0I;
  #L28d272.  goto L28d326;
  #L28d274.  if v12 < v15 then goto L28d27a;
  #L28d278.  goto L28d270;
  #L28d27a.  v14:= v12 + 1;
  #L28d27e.  v12:= v13[v12] @kind byte;
  #L28d282.  if v12 >= 0 then goto L28d328;
  #L28d286.  if v12 >= v5 then goto L28d2a4;
  #L28d28a.  if v14 >= v15 then goto L28d2a0;
  #L28d28e.  if v12 < v1 then goto L28d326;
  #L28d292.  v12:= v14 + 1;
  #L28d296.  v14:= v13[v14] @kind byte;
  #L28d29a.  if v14 <= v6 then goto L28d274;
  #L28d29e.  goto L28d326;
  #L28d2a0.  v7:= v12;
  #L28d2a2.  goto L28d326;
  #L28d2a4.  if v12 >= v2 then goto L28d2dc;
  #L28d2a8.  v8:= v15 + -1;
  #L28d2ac.  if v14 < v8 then goto L28d2b2;
  #L28d2b0.  goto L28d2e4;
  #L28d2b2.  v8:= v14 + 1;
  #L28d2b6.  v14:= v13[v14] @kind byte;
  #L28d2ba.  if v14 > v6 then goto L28d326;
  #L28d2be.  if v12 != v5 then goto L28d2c6;
  #L28d2c2.  if v14 < v4 then goto L28d326;
  #L28d2c6.  if v12 != v0 then goto L28d2ce;
  #L28d2ca.  if v14 >= v4 then goto L28d326;
  #L28d2ce.  v12:= v8 + 1;
  #L28d2d2.  v14:= v13[v8] @kind byte;
  #L28d2d6.  if v14 <= v6 then goto L28d274;
  #L28d2da.  goto L28d326;
  #L28d2dc.  v8:= v15 + -2;
  #L28d2e0.  if v14 < v8 then goto L28d2f0;
  #L28d2e4.  call temp:= `c`(v13, v14, v15) @signature `Le/e/a/b/f/n/c5;.c:([BII)I` @kind static;
  #L28d2ea.  v3:= temp;
  #L28d2ec.  v7:= v3;
  #L28d2ee.  goto L28d326;
  #L28d2f0.  v8:= v14 + 1;
  #L28d2f4.  v14:= v13[v14] @kind byte;
  #L28d2f8.  if v14 > v6 then goto L28d326;
  #L28d2fc.  v12:= v12 ^< 28;
  #L28d300.  v14:= v14 + 112;
  #L28d304.  v12:= v12 + v14 @kind int;
  #L28d306.  v12:= v12 ^> 30;
  #L28d30a.  if v12 != 0 then goto L28d326;
  #L28d30e.  v12:= v8 + 1;
  #L28d312.  v14:= v13[v8] @kind byte;
  #L28d316.  if v14 > v6 then goto L28d326;
  #L28d31a.  v14:= v12 + 1;
  #L28d31e.  v12:= v13[v12] @kind byte;
  #L28d322.  if v12 <= v6 then goto L28d328;
  #L28d326.  return v7;
  #L28d328.  v12:= v14;
  #L28d32a.  goto L28d274;
}
procedure `int` `a`(`e.e.a.b.f.n.z4` v7 @kind this, `java.lang.CharSequence` v8 @kind object, `byte`[] v9 @kind object, `int` v10 , `int` v11 ) @signature `Le/e/a/b/f/n/z4;.a:(Ljava/lang/CharSequence;[BII)I` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L28d33c.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L28d342.  v0:= temp;
  #L28d344.  v11:= v11 + v10 @kind int;
  #L28d346.  v1:= 0I;
  #L28d348.  v2:= 128I;
  #L28d34c.  if v1 >= v0 then goto L28d370;
  #L28d350.  v3:= v1 + v10 @kind int;
  #L28d354.  if v3 >= v11 then goto L28d370;
  #L28d358.  call temp:= `charAt`(v8, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L28d35e.  v4:= temp;
  #L28d360.  if v4 >= v2 then goto L28d370;
  #L28d364.  v2:= (`byte`) v4 @kind i2b;
  #L28d366.  v9[v3]:= v2 @kind byte;
  #L28d36a.  v1:= v1 + 1;
  #L28d36e.  goto L28d348;
  #L28d370.  if v1 != v0 then goto L28d378;
  #L28d374.  v10:= v10 + v0 @kind int;
  #L28d376.  return v10;
  #L28d378.  v10:= v10 + v1 @kind int;
  #L28d37a.  if v1 >= v0 then goto L28d53a;
  #L28d37e.  call temp:= `charAt`(v8, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L28d384.  v3:= temp;
  #L28d386.  if v3 >= v2 then goto L28d39e;
  #L28d38a.  if v10 >= v11 then goto L28d39e;
  #L28d38e.  v4:= v10 + 1;
  #L28d392.  v3:= (`byte`) v3 @kind i2b;
  #L28d394.  v9[v10]:= v3 @kind byte;
  #L28d398.  v10:= v4;
  #L28d39a.  goto L28d4a6;
  #L28d39e.  v4:= 2048I;
  #L28d3a2.  if v3 >= v4 then goto L28d3d2;
  #L28d3a6.  v4:= v11 + -2;
  #L28d3aa.  if v10 > v4 then goto L28d3d2;
  #L28d3ae.  v4:= v10 + 1;
  #L28d3b2.  v5:= v3 ^>> 6;
  #L28d3b6.  v5:= v5 ^| 960;
  #L28d3ba.  v5:= (`byte`) v5 @kind i2b;
  #L28d3bc.  v9[v10]:= v5 @kind byte;
  #L28d3c0.  v10:= v4 + 1;
  #L28d3c4.  v3:= v3 ^& 63;
  #L28d3c8.  v3:= v3 ^| v2 @kind int;
  #L28d3ca.  v3:= (`byte`) v3 @kind i2b;
  #L28d3cc.  v9[v4]:= v3 @kind byte;
  #L28d3d0.  goto L28d4a6;
  #L28d3d2.  v4:= 57343I;
  #L28d3d8.  v5:= 55296I;
  #L28d3de.  if v3 < v5 then goto L28d3e6;
  #L28d3e2.  if v3 <= v4 then goto L28d426;
  #L28d3e6.  v6:= v11 + -3;
  #L28d3ea.  if v10 > v6 then goto L28d426;
  #L28d3ee.  v4:= v10 + 1;
  #L28d3f2.  v5:= v3 ^>> 12;
  #L28d3f6.  v5:= v5 ^| 480;
  #L28d3fa.  v5:= (`byte`) v5 @kind i2b;
  #L28d3fc.  v9[v10]:= v5 @kind byte;
  #L28d400.  v10:= v4 + 1;
  #L28d404.  v5:= v3 ^>> 6;
  #L28d408.  v5:= v5 ^& 63;
  #L28d40c.  v5:= v5 ^| v2 @kind int;
  #L28d40e.  v5:= (`byte`) v5 @kind i2b;
  #L28d410.  v9[v4]:= v5 @kind byte;
  #L28d414.  v4:= v10 + 1;
  #L28d418.  v3:= v3 ^& 63;
  #L28d41c.  v3:= v3 ^| v2 @kind int;
  #L28d41e.  v3:= (`byte`) v3 @kind i2b;
  #L28d420.  v9[v10]:= v3 @kind byte;
  #L28d424.  goto L28d398;
  #L28d426.  v6:= v11 + -4;
  #L28d42a.  if v10 > v6 then goto L28d4c0;
  #L28d42e.  v4:= v1 + 1;
  #L28d432.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L28d438.  v5:= temp;
  #L28d43a.  if v4 == v5 then goto L28d4b0;
  #L28d43e.  call temp:= `charAt`(v8, v4) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L28d444.  v1:= temp;
  #L28d446.  call temp:= `isSurrogatePair`(v3, v1) @signature `Ljava/lang/Character;.isSurrogatePair:(CC)Z` @kind static;
  #L28d44c.  v5:= temp;
  #L28d44e.  if v5 == 0 then goto L28d4ae;
  #L28d452.  call temp:= `toCodePoint`(v3, v1) @signature `Ljava/lang/Character;.toCodePoint:(CC)I` @kind static;
  #L28d458.  v1:= temp;
  #L28d45a.  v3:= v10 + 1;
  #L28d45e.  v5:= v1 ^>> 18;
  #L28d462.  v5:= v5 ^| 240;
  #L28d466.  v5:= (`byte`) v5 @kind i2b;
  #L28d468.  v9[v10]:= v5 @kind byte;
  #L28d46c.  v10:= v3 + 1;
  #L28d470.  v5:= v1 ^>> 12;
  #L28d474.  v5:= v5 ^& 63;
  #L28d478.  v5:= v5 ^| v2 @kind int;
  #L28d47a.  v5:= (`byte`) v5 @kind i2b;
  #L28d47c.  v9[v3]:= v5 @kind byte;
  #L28d480.  v3:= v10 + 1;
  #L28d484.  v5:= v1 ^>> 6;
  #L28d488.  v5:= v5 ^& 63;
  #L28d48c.  v5:= v5 ^| v2 @kind int;
  #L28d48e.  v5:= (`byte`) v5 @kind i2b;
  #L28d490.  v9[v10]:= v5 @kind byte;
  #L28d494.  v10:= v3 + 1;
  #L28d498.  v1:= v1 ^& 63;
  #L28d49c.  v1:= v1 ^| v2 @kind int;
  #L28d49e.  v1:= (`byte`) v1 @kind i2b;
  #L28d4a0.  v9[v3]:= v1 @kind byte;
  #L28d4a4.  v1:= v4;
  #L28d4a6.  v1:= v1 + 1;
  #L28d4aa.  goto L28d37a;
  #L28d4ae.  v1:= v4;
  #L28d4b0.  v8:= new `e.e.a.b.f.n.a5`;
  #L28d4b4.  v1:= v1 + -1;
  #L28d4b8.  call `<init>`(v8, v1, v0) @signature `Le/e/a/b/f/n/a5;.<init>:(II)V` @kind direct;
  #L28d4be.  throw v8;
  #L28d4c0.  if v3 < v5 then goto L28d4f8;
  #L28d4c4.  if v3 > v4 then goto L28d4f8;
  #L28d4c8.  v9:= v1 + 1;
  #L28d4cc.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L28d4d2.  v11:= temp;
  #L28d4d4.  if v9 == v11 then goto L28d4ec;
  #L28d4d8.  call temp:= `charAt`(v8, v9) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L28d4de.  v8:= temp;
  #L28d4e0.  call temp:= `isSurrogatePair`(v3, v8) @signature `Ljava/lang/Character;.isSurrogatePair:(CC)Z` @kind static;
  #L28d4e6.  v8:= temp;
  #L28d4e8.  if v8 != 0 then goto L28d4f8;
  #L28d4ec.  v8:= new `e.e.a.b.f.n.a5`;
  #L28d4f0.  call `<init>`(v8, v1, v0) @signature `Le/e/a/b/f/n/a5;.<init>:(II)V` @kind direct;
  #L28d4f6.  throw v8;
  #L28d4f8.  v8:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L28d4fc.  v9:= new `java.lang.StringBuilder`;
  #L28d500.  v11:= 37I;
  #L28d504.  call `<init>`(v9, v11) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L28d50a.  v11:= "Failed writing " @kind object;
  #L28d50e.  call temp:= `append`(v9, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28d514.  call temp:= `append`(v9, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L28d51a.  v11:= " at index " @kind object;
  #L28d51e.  call temp:= `append`(v9, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28d524.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L28d52a.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28d530.  v9:= temp @kind object;
  #L28d532.  call `<init>`(v8, v9) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28d538.  throw v8;
  #L28d53a.  return v10;
}
procedure `java.lang.String` `b`(`e.e.a.b.f.n.z4` v10 @kind this, `byte`[] v11 @kind object, `int` v12 , `int` v13 ) @signature `Le/e/a/b/f/n/z4;.b:([BII)Ljava/lang/String;` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L28d54c.  v0:= length @variable v11;
  #L28d54e.  v1:= v12 ^| v13 @kind int;
  #L28d552.  v2:= v0 - v12 @kind int;
  #L28d556.  v2:= v2 - v13 @kind int;
  #L28d558.  v1:= v1 ^| v2 @kind int;
  #L28d55a.  v2:= 0I;
  #L28d55c.  if v1 < 0 then goto L28d69e;
  #L28d560.  v0:= v12 + v13 @kind int;
  #L28d564.  v13:= new `char`[v13];
  #L28d568.  v1:= 0I;
  #L28d56a.  if v12 >= v0 then goto L28d592;
  #L28d56e.  v3:= v11[v12] @kind byte;
  #L28d572.  call temp:= `a`(v3) @signature `Le/e/a/b/f/n/x4;.a:(B)Z` @kind static;
  #L28d578.  v4:= temp;
  #L28d57a.  if v4 != 0 then goto L28d580;
  #L28d57e.  goto L28d592;
  #L28d580.  v12:= v12 + 1;
  #L28d584.  v4:= v1 + 1;
  #L28d588.  v3:= (`char`) v3 @kind i2c;
  #L28d58a.  v13[v1]:= v3 @kind char;
  #L28d58e.  v1:= v4;
  #L28d590.  goto L28d56a;
  #L28d592.  if v12 >= v0 then goto L28d692;
  #L28d596.  v3:= v12 + 1;
  #L28d59a.  v12:= v11[v12] @kind byte;
  #L28d59e.  call temp:= `a`(v12) @signature `Le/e/a/b/f/n/x4;.a:(B)Z` @kind static;
  #L28d5a4.  v4:= temp;
  #L28d5a6.  if v4 == 0 then goto L28d5de;
  #L28d5aa.  v4:= v1 + 1;
  #L28d5ae.  v12:= (`char`) v12 @kind i2c;
  #L28d5b0.  v13[v1]:= v12 @kind char;
  #L28d5b4.  v12:= v3;
  #L28d5b6.  v1:= v4;
  #L28d5b8.  if v12 >= v0 then goto L28d592;
  #L28d5bc.  v3:= v11[v12] @kind byte;
  #L28d5c0.  call temp:= `a`(v3) @signature `Le/e/a/b/f/n/x4;.a:(B)Z` @kind static;
  #L28d5c6.  v4:= temp;
  #L28d5c8.  if v4 != 0 then goto L28d5ce;
  #L28d5cc.  goto L28d592;
  #L28d5ce.  v12:= v12 + 1;
  #L28d5d2.  v4:= v1 + 1;
  #L28d5d6.  v3:= (`char`) v3 @kind i2c;
  #L28d5d8.  v13[v1]:= v3 @kind char;
  #L28d5dc.  goto L28d5b6;
  #L28d5de.  call temp:= `b`(v12) @signature `Le/e/a/b/f/n/x4;.b:(B)Z` @kind static;
  #L28d5e4.  v4:= temp;
  #L28d5e6.  if v4 == 0 then goto L28d610;
  #L28d5ea.  if v3 >= v0 then goto L28d606;
  #L28d5ee.  v4:= v3 + 1;
  #L28d5f2.  v5:= v1 + 1;
  #L28d5f6.  v3:= v11[v3] @kind byte;
  #L28d5fa.  call `a`(v12, v3, v13, v1) @signature `Le/e/a/b/f/n/x4;.a:(BB[CI)V` @kind static;
  #L28d600.  v12:= v4;
  #L28d602.  v1:= v5;
  #L28d604.  goto L28d592;
  #L28d606.  call temp:= `f`() @signature `Le/e/a/b/f/n/g2;.f:()Le/e/a/b/f/n/g2;` @kind static;
  #L28d60c.  v11:= temp @kind object;
  #L28d60e.  throw v11;
  #L28d610.  call temp:= `c`(v12) @signature `Le/e/a/b/f/n/x4;.c:(B)Z` @kind static;
  #L28d616.  v4:= temp;
  #L28d618.  if v4 == 0 then goto L28d64e;
  #L28d61c.  v4:= v0 + -1;
  #L28d620.  if v3 >= v4 then goto L28d644;
  #L28d624.  v4:= v3 + 1;
  #L28d628.  v5:= v4 + 1;
  #L28d62c.  v6:= v1 + 1;
  #L28d630.  v3:= v11[v3] @kind byte;
  #L28d634.  v4:= v11[v4] @kind byte;
  #L28d638.  call `a`(v12, v3, v4, v13, v1) @signature `Le/e/a/b/f/n/x4;.a:(BBB[CI)V` @kind static;
  #L28d63e.  v12:= v5;
  #L28d640.  v1:= v6;
  #L28d642.  goto L28d592;
  #L28d644.  call temp:= `f`() @signature `Le/e/a/b/f/n/g2;.f:()Le/e/a/b/f/n/g2;` @kind static;
  #L28d64a.  v11:= temp @kind object;
  #L28d64c.  throw v11;
  #L28d64e.  v4:= v0 + -2;
  #L28d652.  if v3 >= v4 then goto L28d688;
  #L28d656.  v4:= v3 + 1;
  #L28d65a.  v5:= v4 + 1;
  #L28d65e.  v9:= v5 + 1;
  #L28d662.  v6:= v11[v3] @kind byte;
  #L28d666.  v7:= v11[v4] @kind byte;
  #L28d66a.  v8:= v11[v5] @kind byte;
  #L28d66e.  v3:= v12;
  #L28d670.  v4:= v6;
  #L28d672.  v5:= v7;
  #L28d674.  v6:= v8;
  #L28d676.  v7:= v13 @kind object;
  #L28d678.  v8:= v1;
  #L28d67a.  call `a`(v3, v4, v5, v6, v7, v8) @signature `Le/e/a/b/f/n/x4;.a:(BBBB[CI)V` @kind static;
  #L28d680.  v1:= v1 + 2;
  #L28d684.  v12:= v9;
  #L28d686.  goto L28d592;
  #L28d688.  call temp:= `f`() @signature `Le/e/a/b/f/n/g2;.f:()Le/e/a/b/f/n/g2;` @kind static;
  #L28d68e.  v11:= temp @kind object;
  #L28d690.  throw v11;
  #L28d692.  v11:= new `java.lang.String`;
  #L28d696.  call `<init>`(v11, v13, v2, v1) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L28d69c.  return v11 @kind object;
  #L28d69e.  v11:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L28d6a2.  v1:= 3I;
  #L28d6a4.  v1:= new `java.lang.Object`[v1];
  #L28d6a8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L28d6ae.  v0:= temp @kind object;
  #L28d6b0.  v1[v2]:= v0 @kind object;
  #L28d6b4.  call temp:= `valueOf`(v12) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L28d6ba.  v12:= temp @kind object;
  #L28d6bc.  v0:= 1I;
  #L28d6be.  v1[v0]:= v12 @kind object;
  #L28d6c2.  call temp:= `valueOf`(v13) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L28d6c8.  v12:= temp @kind object;
  #L28d6ca.  v13:= 2I;
  #L28d6cc.  v1[v13]:= v12 @kind object;
  #L28d6d0.  v12:= "buffer length=%d, index=%d, size=%d" @kind object;
  #L28d6d4.  call temp:= `format`(v12, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L28d6da.  v12:= temp @kind object;
  #L28d6dc.  call `<init>`(v11, v12) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28d6e2.  throw v11;
}
