record `e.e.a.b.f.b.v4` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.Object` `@@e.e.a.b.f.b.v4.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/b/v4;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L212ec4.  v0:= "UTF-8" @kind object;
  #L212ec8.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L212ece.  v0:= "ISO-8859-1" @kind object;
  #L212ed2.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L212ed8.  v0:= new `java.lang.Object`;
  #L212edc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L212ee2.  `@@e.e.a.b.f.b.v4.a` @type ^`java.lang.Object` := v0 @kind object;
  #L212ee6.  return @kind void;
}
procedure `int` `a`(`int`[] v1 @kind object) @signature `Le/e/a/b/f/b/v4;.a:([I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L212dec.  if v1 == 0 then goto L212e02;
  #L212df0.  v0:= length @variable v1;
  #L212df2.  if v0 != 0 then goto L212df8;
  #L212df6.  goto L212e02;
  #L212df8.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([I)I` @kind static;
  #L212dfe.  v1:= temp;
  #L212e00.  return v1;
  #L212e02.  v1:= 0I;
  #L212e04.  return v1;
}
procedure `int` `a`(`long`[] v1 @kind object) @signature `Le/e/a/b/f/b/v4;.a:([J)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L212e58.  if v1 == 0 then goto L212e6e;
  #L212e5c.  v0:= length @variable v1;
  #L212e5e.  if v0 != 0 then goto L212e64;
  #L212e62.  goto L212e6e;
  #L212e64.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([J)I` @kind static;
  #L212e6a.  v1:= temp;
  #L212e6c.  return v1;
  #L212e6e.  v1:= 0I;
  #L212e70.  return v1;
}
procedure `int` `a`(`java.lang.Object`[] v4 @kind object) @signature `Le/e/a/b/f/b/v4;.a:([Ljava/lang/Object;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L212e18.  v0:= 0I;
  #L212e1a.  if v4 != 0 then goto L212e22;
  #L212e1e.  v1:= 0I;
  #L212e20.  goto L212e24;
  #L212e22.  v1:= length @variable v4;
  #L212e24.  v2:= 0I;
  #L212e26.  if v0 >= v1 then goto L212e46;
  #L212e2a.  v3:= v4[v0] @kind object;
  #L212e2e.  if v3 == 0 then goto L212e40;
  #L212e32.  v2:= v2 * 31;
  #L212e36.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L212e3c.  v3:= temp;
  #L212e3e.  v2:= v2 + v3 @kind int;
  #L212e40.  v0:= v0 + 1;
  #L212e44.  goto L212e26;
  #L212e46.  return v2;
}
procedure `int` `a`(`byte`[][] v4 @kind object) @signature `Le/e/a/b/f/b/v4;.a:([[B)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L212e84.  v0:= 0I;
  #L212e86.  if v4 != 0 then goto L212e8e;
  #L212e8a.  v1:= 0I;
  #L212e8c.  goto L212e90;
  #L212e8e.  v1:= length @variable v4;
  #L212e90.  v2:= 0I;
  #L212e92.  if v0 >= v1 then goto L212eb2;
  #L212e96.  v3:= v4[v0] @kind object;
  #L212e9a.  if v3 == 0 then goto L212eac;
  #L212e9e.  v2:= v2 * 31;
  #L212ea2.  call temp:= `hashCode`(v3) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L212ea8.  v3:= temp;
  #L212eaa.  v2:= v2 + v3 @kind int;
  #L212eac.  v0:= v0 + 1;
  #L212eb0.  goto L212e92;
  #L212eb2.  return v2;
}
procedure `void` `a`(`e.e.a.b.f.b.r4` v0 @kind object, `e.e.a.b.f.b.r4` v1 @kind object) @signature `Le/e/a/b/f/b/v4;.a:(Le/e/a/b/f/b/r4;Le/e/a/b/f/b/r4;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L212ef8.  v0:= v0.`e.e.a.b.f.b.r4.c` @type ^`e.e.a.b.f.b.t4` @kind object;
  #L212efc.  if v0 == 0 then goto L212f10;
  #L212f00.  call temp:= `clone`(v0) @signature `Le/e/a/b/f/b/t4;.clone:()Ljava/lang/Object;` @kind virtual;
  #L212f06.  v0:= temp @kind object;
  #L212f08.  v0:= (`e.e.a.b.f.b.t4`) v0 @kind object;
  #L212f0c.  v1.`e.e.a.b.f.b.r4.c` @type ^`e.e.a.b.f.b.t4` := v0 @kind object;
  #L212f10.  return @kind void;
}
procedure `boolean` `a`(`int`[] v1 @kind object, `int`[] v2 @kind object) @signature `Le/e/a/b/f/b/v4;.a:([I[I)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L212c4c.  if v1 == 0 then goto L212c62;
  #L212c50.  v0:= length @variable v1;
  #L212c52.  if v0 != 0 then goto L212c58;
  #L212c56.  goto L212c62;
  #L212c58.  call temp:= `equals`(v1, v2) @signature `Ljava/util/Arrays;.equals:([I[I)Z` @kind static;
  #L212c5e.  v1:= temp;
  #L212c60.  return v1;
  #L212c62.  if v2 == 0 then goto L212c72;
  #L212c66.  v1:= length @variable v2;
  #L212c68.  if v1 != 0 then goto L212c6e;
  #L212c6c.  goto L212c72;
  #L212c6e.  v1:= 0I;
  #L212c70.  return v1;
  #L212c72.  v1:= 1I;
  #L212c74.  return v1;
}
procedure `boolean` `a`(`long`[] v1 @kind object, `long`[] v2 @kind object) @signature `Le/e/a/b/f/b/v4;.a:([J[J)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L212d1c.  if v1 == 0 then goto L212d32;
  #L212d20.  v0:= length @variable v1;
  #L212d22.  if v0 != 0 then goto L212d28;
  #L212d26.  goto L212d32;
  #L212d28.  call temp:= `equals`(v1, v2) @signature `Ljava/util/Arrays;.equals:([J[J)Z` @kind static;
  #L212d2e.  v1:= temp;
  #L212d30.  return v1;
  #L212d32.  if v2 == 0 then goto L212d42;
  #L212d36.  v1:= length @variable v2;
  #L212d38.  if v1 != 0 then goto L212d3e;
  #L212d3c.  goto L212d42;
  #L212d3e.  v1:= 0I;
  #L212d40.  return v1;
  #L212d42.  v1:= 1I;
  #L212d44.  return v1;
}
procedure `boolean` `a`(`java.lang.Object`[] v8 @kind object, `java.lang.Object`[] v9 @kind object) @signature `Le/e/a/b/f/b/v4;.a:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L212c88.  v0:= 0I;
  #L212c8a.  if v8 != 0 then goto L212c92;
  #L212c8e.  v1:= 0I;
  #L212c90.  goto L212c94;
  #L212c92.  v1:= length @variable v8;
  #L212c94.  if v9 != 0 then goto L212c9c;
  #L212c98.  v2:= 0I;
  #L212c9a.  goto L212c9e;
  #L212c9c.  v2:= length @variable v9;
  #L212c9e.  v3:= 0I;
  #L212ca0.  v4:= 0I;
  #L212ca2.  if v3 >= v1 then goto L212cb4;
  #L212ca6.  v5:= v8[v3] @kind object;
  #L212caa.  if v5 != 0 then goto L212cb4;
  #L212cae.  v3:= v3 + 1;
  #L212cb2.  goto L212ca2;
  #L212cb4.  if v4 >= v2 then goto L212cc6;
  #L212cb8.  v5:= v9[v4] @kind object;
  #L212cbc.  if v5 != 0 then goto L212cc6;
  #L212cc0.  v4:= v4 + 1;
  #L212cc4.  goto L212cb4;
  #L212cc6.  v5:= 1I;
  #L212cc8.  if v3 < v1 then goto L212cd0;
  #L212ccc.  v6:= 1I;
  #L212cce.  goto L212cd2;
  #L212cd0.  v6:= 0I;
  #L212cd2.  if v4 < v2 then goto L212cda;
  #L212cd6.  v7:= 1I;
  #L212cd8.  goto L212cdc;
  #L212cda.  v7:= 0I;
  #L212cdc.  if v6 == 0 then goto L212ce6;
  #L212ce0.  if v7 == 0 then goto L212ce6;
  #L212ce4.  return v5;
  #L212ce6.  if v6 == v7 then goto L212cec;
  #L212cea.  return v0;
  #L212cec.  v5:= v8[v3] @kind object;
  #L212cf0.  v6:= v9[v4] @kind object;
  #L212cf4.  call temp:= `equals`(v5, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L212cfa.  v5:= temp;
  #L212cfc.  if v5 != 0 then goto L212d02;
  #L212d00.  return v0;
  #L212d02.  v3:= v3 + 1;
  #L212d06.  v4:= v4 + 1;
  #L212d0a.  goto L212ca2;
}
procedure `boolean` `a`(`byte`[][] v8 @kind object, `byte`[][] v9 @kind object) @signature `Le/e/a/b/f/b/v4;.a:([[B[[B)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L212d58.  v0:= 0I;
  #L212d5a.  if v8 != 0 then goto L212d62;
  #L212d5e.  v1:= 0I;
  #L212d60.  goto L212d64;
  #L212d62.  v1:= length @variable v8;
  #L212d64.  if v9 != 0 then goto L212d6c;
  #L212d68.  v2:= 0I;
  #L212d6a.  goto L212d6e;
  #L212d6c.  v2:= length @variable v9;
  #L212d6e.  v3:= 0I;
  #L212d70.  v4:= 0I;
  #L212d72.  if v3 >= v1 then goto L212d84;
  #L212d76.  v5:= v8[v3] @kind object;
  #L212d7a.  if v5 != 0 then goto L212d84;
  #L212d7e.  v3:= v3 + 1;
  #L212d82.  goto L212d72;
  #L212d84.  if v4 >= v2 then goto L212d96;
  #L212d88.  v5:= v9[v4] @kind object;
  #L212d8c.  if v5 != 0 then goto L212d96;
  #L212d90.  v4:= v4 + 1;
  #L212d94.  goto L212d84;
  #L212d96.  v5:= 1I;
  #L212d98.  if v3 < v1 then goto L212da0;
  #L212d9c.  v6:= 1I;
  #L212d9e.  goto L212da2;
  #L212da0.  v6:= 0I;
  #L212da2.  if v4 < v2 then goto L212daa;
  #L212da6.  v7:= 1I;
  #L212da8.  goto L212dac;
  #L212daa.  v7:= 0I;
  #L212dac.  if v6 == 0 then goto L212db6;
  #L212db0.  if v7 == 0 then goto L212db6;
  #L212db4.  return v5;
  #L212db6.  if v6 == v7 then goto L212dbc;
  #L212dba.  return v0;
  #L212dbc.  v5:= v8[v3] @kind object;
  #L212dc0.  v6:= v9[v4] @kind object;
  #L212dc4.  call temp:= `equals`(v5, v6) @signature `Ljava/util/Arrays;.equals:([B[B)Z` @kind static;
  #L212dca.  v5:= temp;
  #L212dcc.  if v5 != 0 then goto L212dd2;
  #L212dd0.  return v0;
  #L212dd2.  v3:= v3 + 1;
  #L212dd6.  v4:= v4 + 1;
  #L212dda.  goto L212d72;
}
