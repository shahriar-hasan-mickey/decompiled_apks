record `e.e.a.b.f.o.e` @kind class @AccessFlag FINAL extends `java.util.AbstractSet` @kind class {
  `e.e.a.b.f.o.h` `e.e.a.b.f.o.e.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.o.e` v0 @kind this, `e.e.a.b.f.o.h` v1 @kind object) @signature `Le/e/a/b/f/o/e;.<init>:(Le/e/a/b/f/o/h;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2bf008.  v0.`e.e.a.b.f.o.e.b` @type ^`e.e.a.b.f.o.h` := v1 @kind object;
  #L2bf00c.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L2bf012.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.o.e` v1 @kind this) @signature `Le/e/a/b/f/o/e;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bf024.  v0:= v1.`e.e.a.b.f.o.e.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bf028.  call `clear`(v0) @signature `Le/e/a/b/f/o/h;.clear:()V` @kind virtual;
  #L2bf02e.  return @kind void;
}
procedure `boolean` `contains`(`e.e.a.b.f.o.e` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/o/e;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bef34.  v0:= v1.`e.e.a.b.f.o.e.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bef38.  call temp:= `containsKey`(v0, v2) @signature `Le/e/a/b/f/o/h;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L2bef3e.  v2:= temp;
  #L2bef40.  return v2;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.o.e` v2 @kind this) @signature `Le/e/a/b/f/o/e;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2befc8.  v0:= v2.`e.e.a.b.f.o.e.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2befcc.  call temp:= `b`(v0) @signature `Le/e/a/b/f/o/h;.b:()Ljava/util/Map;` @kind virtual;
  #L2befd2.  v1:= temp @kind object;
  #L2befd4.  if v1 == 0 then goto L2befea;
  #L2befd8.  call temp:= `keySet`(v1) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L2befde.  v0:= temp @kind object;
  #L2befe0.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2befe6.  v0:= temp @kind object;
  #L2befe8.  goto L2beff6;
  #L2befea.  v1:= new `e.e.a.b.f.o.ya`;
  #L2befee.  call `<init>`(v1, v0) @signature `Le/e/a/b/f/o/ya;.<init>:(Le/e/a/b/f/o/h;)V` @kind direct;
  #L2beff4.  v0:= v1 @kind object;
  #L2beff6.  return v0 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.o.e` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/o/e;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bef54.  v0:= v1.`e.e.a.b.f.o.e.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bef58.  call temp:= `b`(v0) @signature `Le/e/a/b/f/o/h;.b:()Ljava/util/Map;` @kind virtual;
  #L2bef5e.  v0:= temp @kind object;
  #L2bef60.  if v0 == 0 then goto L2bef76;
  #L2bef64.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L2bef6a.  v0:= temp @kind object;
  #L2bef6c.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2bef72.  v2:= temp;
  #L2bef74.  goto L2bef90;
  #L2bef76.  v0:= v1.`e.e.a.b.f.o.e.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bef7a.  call temp:= `a`(v0, v2) @signature `Le/e/a/b/f/o/h;.a:(Le/e/a/b/f/o/h;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2bef80.  v2:= temp @kind object;
  #L2bef82.  call temp:= `e`() @signature `Le/e/a/b/f/o/h;.e:()Ljava/lang/Object;` @kind static;
  #L2bef88.  v0:= temp @kind object;
  #L2bef8a.  if v2 != v0 then goto L2bef92;
  #L2bef8e.  v2:= 0I;
  #L2bef90.  return v2;
  #L2bef92.  v2:= 1I;
  #L2bef94.  return v2;
}
procedure `int` `size`(`e.e.a.b.f.o.e` v1 @kind this) @signature `Le/e/a/b/f/o/e;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2befa8.  v0:= v1.`e.e.a.b.f.o.e.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2befac.  call temp:= `size`(v0) @signature `Le/e/a/b/f/o/h;.size:()I` @kind virtual;
  #L2befb2.  v0:= temp;
  #L2befb4.  return v0;
}
