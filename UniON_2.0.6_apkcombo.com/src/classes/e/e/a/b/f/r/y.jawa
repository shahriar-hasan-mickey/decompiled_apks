record `e.e.a.b.f.r.y` @kind class @AccessFlag ABSTRACT extends `java.util.Iterator` @kind interface {
  `int` `e.e.a.b.f.r.y.b` @AccessFlag ;
  `int` `e.e.a.b.f.r.y.c` @AccessFlag ;
  `int` `e.e.a.b.f.r.y.d` @AccessFlag ;
  `e.e.a.b.f.r.d0` `e.e.a.b.f.r.y.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.r.y` v0 @kind this, `e.e.a.b.f.r.d0` v1 @kind object, `e.e.a.b.f.r.u` v2 @kind object) @signature `Le/e/a/b/f/r/y;.<init>:(Le/e/a/b/f/r/d0;Le/e/a/b/f/r/u;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L30c648.  v0.`e.e.a.b.f.r.y.e` @type ^`e.e.a.b.f.r.d0` := v1 @kind object;
  #L30c64c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30c652.  v1:= v0.`e.e.a.b.f.r.y.e` @type ^`e.e.a.b.f.r.d0` @kind object;
  #L30c656.  call temp:= `a`(v1) @signature `Le/e/a/b/f/r/d0;.a:(Le/e/a/b/f/r/d0;)I` @kind static;
  #L30c65c.  v1:= temp;
  #L30c65e.  v0.`e.e.a.b.f.r.y.b` @type ^`int` := v1;
  #L30c662.  v1:= v0.`e.e.a.b.f.r.y.e` @type ^`e.e.a.b.f.r.d0` @kind object;
  #L30c666.  call temp:= `d`(v1) @signature `Le/e/a/b/f/r/d0;.d:()I` @kind virtual;
  #L30c66c.  v1:= temp;
  #L30c66e.  v0.`e.e.a.b.f.r.y.c` @type ^`int` := v1;
  #L30c672.  v1:= -1I;
  #L30c674.  v0.`e.e.a.b.f.r.y.d` @type ^`int` := v1;
  #L30c678.  return @kind void;
}
procedure `void` `a`(`e.e.a.b.f.r.y` v2 @kind this) @signature `Le/e/a/b/f/r/y;.a:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L30c6f0.  v0:= v2.`e.e.a.b.f.r.y.e` @type ^`e.e.a.b.f.r.d0` @kind object;
  #L30c6f4.  call temp:= `a`(v0) @signature `Le/e/a/b/f/r/d0;.a:(Le/e/a/b/f/r/d0;)I` @kind static;
  #L30c6fa.  v0:= temp;
  #L30c6fc.  v1:= v2.`e.e.a.b.f.r.y.b` @type ^`int`;
  #L30c700.  if v0 != v1 then goto L30c706;
  #L30c704.  return @kind void;
  #L30c706.  v0:= new `java.util.ConcurrentModificationException`;
  #L30c70a.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L30c710.  throw v0;
}
procedure `java.lang.Object` `a`(`int` v0 ) @signature `Le/e/a/b/f/r/y;.a:(I)Ljava/lang/Object;` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `hasNext`(`e.e.a.b.f.r.y` v1 @kind this) @signature `Le/e/a/b/f/r/y;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30c5d4.  v0:= v1.`e.e.a.b.f.r.y.c` @type ^`int`;
  #L30c5d8.  if v0 < 0 then goto L30c5e0;
  #L30c5dc.  v0:= 1I;
  #L30c5de.  return v0;
  #L30c5e0.  v0:= 0I;
  #L30c5e2.  return v0;
}
procedure `java.lang.Object` `next`(`e.e.a.b.f.r.y` v3 @kind this) @signature `Le/e/a/b/f/r/y;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L30c5f4.  call `a`(v3) @signature `Le/e/a/b/f/r/y;.a:()V` @kind direct;
  #L30c5fa.  call temp:= `hasNext`(v3) @signature `Le/e/a/b/f/r/y;.hasNext:()Z` @kind virtual;
  #L30c600.  v0:= temp;
  #L30c602.  if v0 == 0 then goto L30c62c;
  #L30c606.  v0:= v3.`e.e.a.b.f.r.y.c` @type ^`int`;
  #L30c60a.  v3.`e.e.a.b.f.r.y.d` @type ^`int` := v0;
  #L30c60e.  call temp:= `a`(v3, v0) @signature `Le/e/a/b/f/r/y;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L30c614.  v0:= temp @kind object;
  #L30c616.  v1:= v3.`e.e.a.b.f.r.y.e` @type ^`e.e.a.b.f.r.d0` @kind object;
  #L30c61a.  v2:= v3.`e.e.a.b.f.r.y.c` @type ^`int`;
  #L30c61e.  call temp:= `b`(v1, v2) @signature `Le/e/a/b/f/r/d0;.b:(I)I` @kind virtual;
  #L30c624.  v1:= temp;
  #L30c626.  v3.`e.e.a.b.f.r.y.c` @type ^`int` := v1;
  #L30c62a.  return v0 @kind object;
  #L30c62c.  v0:= new `java.util.NoSuchElementException`;
  #L30c630.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L30c636.  throw v0;
}
procedure `void` `remove`(`e.e.a.b.f.r.y` v3 @kind this) @signature `Le/e/a/b/f/r/y;.remove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L30c68c.  call `a`(v3) @signature `Le/e/a/b/f/r/y;.a:()V` @kind direct;
  #L30c692.  v0:= v3.`e.e.a.b.f.r.y.d` @type ^`int`;
  #L30c696.  if v0 < 0 then goto L30c69e;
  #L30c69a.  v0:= 1I;
  #L30c69c.  goto L30c6a0;
  #L30c69e.  v0:= 0I;
  #L30c6a0.  v1:= "no calls to next() since the last call to remove()" @kind object;
  #L30c6a4.  call `a`(v0, v1) @signature `Le/e/a/b/f/r/b;.a:(ZLjava/lang/Object;)V` @kind static;
  #L30c6aa.  v0:= v3.`e.e.a.b.f.r.y.b` @type ^`int`;
  #L30c6ae.  v0:= v0 + 32;
  #L30c6b2.  v3.`e.e.a.b.f.r.y.b` @type ^`int` := v0;
  #L30c6b6.  v0:= v3.`e.e.a.b.f.r.y.e` @type ^`e.e.a.b.f.r.d0` @kind object;
  #L30c6ba.  v1:= v0.`e.e.a.b.f.r.d0.d` @type ^`java.lang.Object`[] @kind object;
  #L30c6be.  v2:= v3.`e.e.a.b.f.r.y.d` @type ^`int`;
  #L30c6c2.  v1:= v1[v2] @kind object;
  #L30c6c6.  call temp:= `remove`(v0, v1) @signature `Le/e/a/b/f/r/d0;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L30c6cc.  v0:= v3.`e.e.a.b.f.r.y.c` @type ^`int`;
  #L30c6d0.  v1:= -1I;
  #L30c6d2.  v0:= v0 + v1 @kind int;
  #L30c6d4.  v3.`e.e.a.b.f.r.y.c` @type ^`int` := v0;
  #L30c6d8.  v3.`e.e.a.b.f.r.y.d` @type ^`int` := v1;
  #L30c6dc.  return @kind void;
}
