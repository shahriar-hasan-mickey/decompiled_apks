record `e.e.a.b.f.o.d` @kind class @AccessFlag ABSTRACT extends `java.util.Iterator` @kind interface {
  `int` `e.e.a.b.f.o.d.b` @AccessFlag ;
  `int` `e.e.a.b.f.o.d.c` @AccessFlag ;
  `int` `e.e.a.b.f.o.d.d` @AccessFlag ;
  `e.e.a.b.f.o.h` `e.e.a.b.f.o.d.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.o.d` v0 @kind this, `e.e.a.b.f.o.h` v1 @kind object, `e.e.a.b.f.o.ya` v2 @kind object) @signature `Le/e/a/b/f/o/d;.<init>:(Le/e/a/b/f/o/h;Le/e/a/b/f/o/ya;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2bee58.  v0.`e.e.a.b.f.o.d.e` @type ^`e.e.a.b.f.o.h` := v1 @kind object;
  #L2bee5c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bee62.  v1:= v0.`e.e.a.b.f.o.d.e` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bee66.  call temp:= `a`(v1) @signature `Le/e/a/b/f/o/h;.a:(Le/e/a/b/f/o/h;)I` @kind static;
  #L2bee6c.  v1:= temp;
  #L2bee6e.  v0.`e.e.a.b.f.o.d.b` @type ^`int` := v1;
  #L2bee72.  v1:= v0.`e.e.a.b.f.o.d.e` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bee76.  call temp:= `d`(v1) @signature `Le/e/a/b/f/o/h;.d:()I` @kind virtual;
  #L2bee7c.  v1:= temp;
  #L2bee7e.  v0.`e.e.a.b.f.o.d.c` @type ^`int` := v1;
  #L2bee82.  v1:= -1I;
  #L2bee84.  v0.`e.e.a.b.f.o.d.d` @type ^`int` := v1;
  #L2bee88.  return @kind void;
}
procedure `void` `a`(`e.e.a.b.f.o.d` v2 @kind this) @signature `Le/e/a/b/f/o/d;.a:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2bef00.  v0:= v2.`e.e.a.b.f.o.d.e` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bef04.  call temp:= `a`(v0) @signature `Le/e/a/b/f/o/h;.a:(Le/e/a/b/f/o/h;)I` @kind static;
  #L2bef0a.  v0:= temp;
  #L2bef0c.  v1:= v2.`e.e.a.b.f.o.d.b` @type ^`int`;
  #L2bef10.  if v0 != v1 then goto L2bef16;
  #L2bef14.  return @kind void;
  #L2bef16.  v0:= new `java.util.ConcurrentModificationException`;
  #L2bef1a.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L2bef20.  throw v0;
}
procedure `java.lang.Object` `a`(`int` v0 ) @signature `Le/e/a/b/f/o/d;.a:(I)Ljava/lang/Object;` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `hasNext`(`e.e.a.b.f.o.d` v1 @kind this) @signature `Le/e/a/b/f/o/d;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bede4.  v0:= v1.`e.e.a.b.f.o.d.c` @type ^`int`;
  #L2bede8.  if v0 < 0 then goto L2bedf0;
  #L2bedec.  v0:= 1I;
  #L2bedee.  return v0;
  #L2bedf0.  v0:= 0I;
  #L2bedf2.  return v0;
}
procedure `java.lang.Object` `next`(`e.e.a.b.f.o.d` v3 @kind this) @signature `Le/e/a/b/f/o/d;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2bee04.  call `a`(v3) @signature `Le/e/a/b/f/o/d;.a:()V` @kind direct;
  #L2bee0a.  call temp:= `hasNext`(v3) @signature `Le/e/a/b/f/o/d;.hasNext:()Z` @kind virtual;
  #L2bee10.  v0:= temp;
  #L2bee12.  if v0 == 0 then goto L2bee3c;
  #L2bee16.  v0:= v3.`e.e.a.b.f.o.d.c` @type ^`int`;
  #L2bee1a.  v3.`e.e.a.b.f.o.d.d` @type ^`int` := v0;
  #L2bee1e.  call temp:= `a`(v3, v0) @signature `Le/e/a/b/f/o/d;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L2bee24.  v0:= temp @kind object;
  #L2bee26.  v1:= v3.`e.e.a.b.f.o.d.e` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bee2a.  v2:= v3.`e.e.a.b.f.o.d.c` @type ^`int`;
  #L2bee2e.  call temp:= `b`(v1, v2) @signature `Le/e/a/b/f/o/h;.b:(I)I` @kind virtual;
  #L2bee34.  v1:= temp;
  #L2bee36.  v3.`e.e.a.b.f.o.d.c` @type ^`int` := v1;
  #L2bee3a.  return v0 @kind object;
  #L2bee3c.  v0:= new `java.util.NoSuchElementException`;
  #L2bee40.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2bee46.  throw v0;
}
procedure `void` `remove`(`e.e.a.b.f.o.d` v3 @kind this) @signature `Le/e/a/b/f/o/d;.remove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2bee9c.  call `a`(v3) @signature `Le/e/a/b/f/o/d;.a:()V` @kind direct;
  #L2beea2.  v0:= v3.`e.e.a.b.f.o.d.d` @type ^`int`;
  #L2beea6.  if v0 < 0 then goto L2beeae;
  #L2beeaa.  v0:= 1I;
  #L2beeac.  goto L2beeb0;
  #L2beeae.  v0:= 0I;
  #L2beeb0.  v1:= "no calls to next() since the last call to remove()" @kind object;
  #L2beeb4.  call `a`(v0, v1) @signature `Le/e/a/b/f/o/e4;.a:(ZLjava/lang/Object;)V` @kind static;
  #L2beeba.  v0:= v3.`e.e.a.b.f.o.d.b` @type ^`int`;
  #L2beebe.  v0:= v0 + 32;
  #L2beec2.  v3.`e.e.a.b.f.o.d.b` @type ^`int` := v0;
  #L2beec6.  v0:= v3.`e.e.a.b.f.o.d.e` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2beeca.  v1:= v0.`e.e.a.b.f.o.h.d` @type ^`java.lang.Object`[] @kind object;
  #L2beece.  v2:= v3.`e.e.a.b.f.o.d.d` @type ^`int`;
  #L2beed2.  v1:= v1[v2] @kind object;
  #L2beed6.  call temp:= `remove`(v0, v1) @signature `Le/e/a/b/f/o/h;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2beedc.  v0:= v3.`e.e.a.b.f.o.d.c` @type ^`int`;
  #L2beee0.  v1:= -1I;
  #L2beee2.  v0:= v0 + v1 @kind int;
  #L2beee4.  v3.`e.e.a.b.f.o.d.c` @type ^`int` := v0;
  #L2beee8.  v3.`e.e.a.b.f.o.d.d` @type ^`int` := v1;
  #L2beeec.  return @kind void;
}
