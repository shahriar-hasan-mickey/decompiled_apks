record `e.e.a.b.f.r.y0` @kind class @AccessFlag ABSTRACT extends `e.e.a.b.f.r.j1` @kind class {
}
procedure `void` `<init>`(`e.e.a.b.f.r.y0` v0 @kind this) @signature `Le/e/a/b/f/r/y0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L30e730.  call `<init>`(v0) @signature `Le/e/a/b/f/r/j1;.<init>:()V` @kind direct;
  #L30e736.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.r.y0` v1 @kind this) @signature `Le/e/a/b/f/r/y0;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30e748.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/r/y0;.zza:()Ljava/util/Map;` @kind virtual;
  #L30e74e.  v0:= temp @kind object;
  #L30e750.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L30e756.  return @kind void;
}
procedure `boolean` `contains`(`java.lang.Object` v0 @kind object) @signature `Le/e/a/b/f/r/y0;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`e.e.a.b.f.r.y0` v1 @kind this) @signature `Le/e/a/b/f/r/y0;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30e59c.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/r/y0;.zza:()Ljava/util/Map;` @kind virtual;
  #L30e5a2.  v0:= temp @kind object;
  #L30e5a4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L30e5aa.  v0:= temp;
  #L30e5ac.  return v0;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.r.y0` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/r/y0;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30e5c0.  if v2 == 0 then goto L30e5ce;
  #L30e5c4.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/r/k1;.a:(Ljava/util/Set;Ljava/util/Collection;)Z` @kind static;
  #L30e5ca.  v2:= temp;
  #L30e5cc.  return v2;
  #L30e5ce.  v0:= 0I;
  #L30e5d0.  throw v0;
  #L30e5d2.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L30e5d8.  v2:= temp @kind object;
  #L30e5da.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/r/k1;.a:(Ljava/util/Set;Ljava/util/Iterator;)Z` @kind static;
  #L30e5e0.  v2:= temp;
  #L30e5e2.  return v2;
  catch `java.lang.UnsupportedOperationException` @[L30e5c4..L30e5d2] goto L30e5d2;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.r.y0` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Le/e/a/b/f/r/y0;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L30e604.  if v4 == 0 then goto L30e612;
  #L30e608.  call temp:= `retainAll`(v3, v4) @signature `Le/e/a/b/f/r/j1;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L30e60e.  v4:= temp;
  #L30e610.  return v4;
  #L30e612.  v0:= 0I;
  #L30e614.  throw v0;
  #L30e616.  
  #L30e618.  call temp:= `size`(v4) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L30e61e.  v0:= temp;
  #L30e620.  v1:= new `java.util.HashSet`;
  #L30e624.  v2:= 3I;
  #L30e626.  if v0 >= v2 then goto L30e666;
  #L30e62a.  if v0 < 0 then goto L30e634;
  #L30e62e.  v0:= v0 + 1;
  #L30e632.  goto L30e686;
  #L30e634.  v4:= new `java.lang.IllegalArgumentException`;
  #L30e638.  v1:= new `java.lang.StringBuilder`;
  #L30e63c.  v2:= 52I;
  #L30e640.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L30e646.  v2:= "expectedSize cannot be negative but was: " @kind object;
  #L30e64a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30e650.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30e656.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30e65c.  v0:= temp @kind object;
  #L30e65e.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30e664.  throw v4;
  #L30e666.  v2:= 2.0F;
  #L30e66a.  if v0 >= v2 then goto L30e680;
  #L30e66e.  v0:= (`float`) v0 @kind i2f;
  #L30e670.  v2:= 0.75F;
  #L30e674.  v0:= v0 / v2 @kind float;
  #L30e676.  v2:= 1.0F;
  #L30e67a.  v0:= v0 + v2 @kind float;
  #L30e67c.  v0:= (`int`) v0 @kind f2i;
  #L30e67e.  goto L30e686;
  #L30e680.  v0:= 2147483647I;
  #L30e686.  call `<init>`(v1, v0) @signature `Ljava/util/HashSet;.<init>:(I)V` @kind direct;
  #L30e68c.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L30e692.  v4:= temp @kind object;
  #L30e694.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L30e69a.  v0:= temp;
  #L30e69c.  if v0 == 0 then goto L30e6c8;
  #L30e6a0.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L30e6a6.  v0:= temp @kind object;
  #L30e6a8.  call temp:= `contains`(v3, v0) @signature `Le/e/a/b/f/r/y0;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L30e6ae.  v2:= temp;
  #L30e6b0.  if v2 == 0 then goto L30e694;
  #L30e6b4.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L30e6b8.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L30e6be.  v0:= temp @kind object;
  #L30e6c0.  call temp:= `add`(v1, v0) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L30e6c6.  goto L30e694;
  #L30e6c8.  call temp:= `zza`(v3) @signature `Le/e/a/b/f/r/y0;.zza:()Ljava/util/Map;` @kind virtual;
  #L30e6ce.  v4:= temp @kind object;
  #L30e6d0.  v4:= (`e.e.a.b.f.r.h`) v4 @kind object;
  #L30e6d4.  v4:= v4.`e.e.a.b.f.r.h.e` @type ^`e.e.a.b.f.r.p` @kind object;
  #L30e6d8.  call temp:= `c`(v4) @signature `Le/e/a/b/f/r/r;.c:()Ljava/util/Set;` @kind virtual;
  #L30e6de.  v4:= temp @kind object;
  #L30e6e0.  call temp:= `retainAll`(v4, v1) @signature `Ljava/util/Set;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L30e6e6.  v4:= temp;
  #L30e6e8.  return v4;
  catch `java.lang.UnsupportedOperationException` @[L30e608..L30e616] goto L30e616;
}
procedure `int` `size`(`e.e.a.b.f.r.y0` v1 @kind this) @signature `Le/e/a/b/f/r/y0;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30e70c.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/r/y0;.zza:()Ljava/util/Map;` @kind virtual;
  #L30e712.  v0:= temp @kind object;
  #L30e714.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L30e71a.  v0:= temp;
  #L30e71c.  return v0;
}
procedure `java.util.Map` `zza`() @signature `Le/e/a/b/f/r/y0;.zza:()Ljava/util/Map;` @AccessFlag ABSTRACT {

  # return;
}
