record `e.e.a.b.f.o.g6` @kind class @AccessFlag ABSTRACT extends `e.e.a.b.f.o.n0` @kind class {
  `int` `e.e.a.b.f.o.g6.b` @AccessFlag PRIVATE_FINAL;
  `int` `e.e.a.b.f.o.g6.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.f.o.g6` v1 @kind this, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/o/g6;.<init>:(II)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L2cb434.  call `<init>`(v1) @signature `Le/e/a/b/f/o/n0;.<init>:()V` @kind direct;
  #L2cb43a.  v0:= "index" @kind object;
  #L2cb43e.  call temp:= `b`(v3, v2, v0) @signature `Le/e/a/b/f/o/e4;.b:(IILjava/lang/String;)I` @kind static;
  #L2cb444.  v1.`e.e.a.b.f.o.g6.b` @type ^`int` := v2;
  #L2cb448.  v1.`e.e.a.b.f.o.g6.c` @type ^`int` := v3;
  #L2cb44c.  return @kind void;
}
procedure `java.lang.Object` `a`(`int` v0 ) @signature `Le/e/a/b/f/o/g6;.a:(I)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `hasNext`(`e.e.a.b.f.o.g6` v2 @kind this) @signature `Le/e/a/b/f/o/g6;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2caa68.  v0:= v2.`e.e.a.b.f.o.g6.c` @type ^`int`;
  #L2caa6c.  v1:= v2.`e.e.a.b.f.o.g6.b` @type ^`int`;
  #L2caa70.  if v0 >= v1 then goto L2caa78;
  #L2caa74.  v0:= 1I;
  #L2caa76.  return v0;
  #L2caa78.  v0:= 0I;
  #L2caa7a.  return v0;
}
procedure `boolean` `hasPrevious`(`e.e.a.b.f.o.g6` v1 @kind this) @signature `Le/e/a/b/f/o/g6;.hasPrevious:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2caa8c.  v0:= v1.`e.e.a.b.f.o.g6.c` @type ^`int`;
  #L2caa90.  if v0 <= 0 then goto L2caa98;
  #L2caa94.  v0:= 1I;
  #L2caa96.  return v0;
  #L2caa98.  v0:= 0I;
  #L2caa9a.  return v0;
}
procedure `java.lang.Object` `next`(`e.e.a.b.f.o.g6` v2 @kind this) @signature `Le/e/a/b/f/o/g6;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2cab08.  call temp:= `hasNext`(v2) @signature `Le/e/a/b/f/o/g6;.hasNext:()Z` @kind virtual;
  #L2cab0e.  v0:= temp;
  #L2cab10.  if v0 == 0 then goto L2cab2a;
  #L2cab14.  v0:= v2.`e.e.a.b.f.o.g6.c` @type ^`int`;
  #L2cab18.  v1:= v0 + 1;
  #L2cab1c.  v2.`e.e.a.b.f.o.g6.c` @type ^`int` := v1;
  #L2cab20.  call temp:= `a`(v2, v0) @signature `Le/e/a/b/f/o/g6;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L2cab26.  v0:= temp @kind object;
  #L2cab28.  return v0 @kind object;
  #L2cab2a.  v0:= new `java.util.NoSuchElementException`;
  #L2cab2e.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2cab34.  throw v0;
}
procedure `int` `nextIndex`(`e.e.a.b.f.o.g6` v1 @kind this) @signature `Le/e/a/b/f/o/g6;.nextIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2caad4.  v0:= v1.`e.e.a.b.f.o.g6.c` @type ^`int`;
  #L2caad8.  return v0;
}
procedure `java.lang.Object` `previous`(`e.e.a.b.f.o.g6` v1 @kind this) @signature `Le/e/a/b/f/o/g6;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2cab48.  call temp:= `hasPrevious`(v1) @signature `Le/e/a/b/f/o/g6;.hasPrevious:()Z` @kind virtual;
  #L2cab4e.  v0:= temp;
  #L2cab50.  if v0 == 0 then goto L2cab6a;
  #L2cab54.  v0:= v1.`e.e.a.b.f.o.g6.c` @type ^`int`;
  #L2cab58.  v0:= v0 + -1;
  #L2cab5c.  v1.`e.e.a.b.f.o.g6.c` @type ^`int` := v0;
  #L2cab60.  call temp:= `a`(v1, v0) @signature `Le/e/a/b/f/o/g6;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L2cab66.  v0:= temp @kind object;
  #L2cab68.  return v0 @kind object;
  #L2cab6a.  v0:= new `java.util.NoSuchElementException`;
  #L2cab6e.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2cab74.  throw v0;
}
procedure `int` `previousIndex`(`e.e.a.b.f.o.g6` v1 @kind this) @signature `Le/e/a/b/f/o/g6;.previousIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2caaec.  v0:= v1.`e.e.a.b.f.o.g6.c` @type ^`int`;
  #L2caaf0.  v0:= v0 + -1;
  #L2caaf4.  return v0;
}
