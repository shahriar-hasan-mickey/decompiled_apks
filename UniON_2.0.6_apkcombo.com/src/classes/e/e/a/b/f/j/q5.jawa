record `e.e.a.b.f.j.q5` @kind class @AccessFlag FINAL extends `e.e.a.b.f.j.l2` @kind class, `java.util.RandomAccess` @kind interface {
  `java.lang.Object`[] `e.e.a.b.f.j.q5.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.j.q5.d` @AccessFlag PRIVATE;
}
global `e.e.a.b.f.j.q5` `@@e.e.a.b.f.j.q5.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/j/q5;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L22edbc.  v0:= new `e.e.a.b.f.j.q5`;
  #L22edc0.  v1:= 0I;
  #L22edc2.  v2:= new `java.lang.Object`[v1];
  #L22edc6.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/j/q5;.<init>:([Ljava/lang/Object;I)V` @kind direct;
  #L22edcc.  `@@e.e.a.b.f.j.q5.e` @type ^`e.e.a.b.f.j.q5` := v0 @kind object;
  #L22edd0.  call `s`(v0) @signature `Le/e/a/b/f/j/l2;.s:()V` @kind virtual;
  #L22edd6.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.j.q5` v0 @kind this, `java.lang.Object`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/j/q5;.<init>:([Ljava/lang/Object;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L22ede8.  call `<init>`(v0) @signature `Le/e/a/b/f/j/l2;.<init>:()V` @kind direct;
  #L22edee.  v0.`e.e.a.b.f.j.q5.c` @type ^`java.lang.Object`[] := v1 @kind object;
  #L22edf2.  v0.`e.e.a.b.f.j.q5.d` @type ^`int` := v2;
  #L22edf6.  return @kind void;
}
procedure `void` `a`(`e.e.a.b.f.j.q5` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/j/q5;.a:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L22eea8.  if v2 < 0 then goto L22eeb6;
  #L22eeac.  v0:= v1.`e.e.a.b.f.j.q5.d` @type ^`int`;
  #L22eeb0.  if v2 >= v0 then goto L22eeb6;
  #L22eeb4.  return @kind void;
  #L22eeb6.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L22eeba.  call temp:= `h`(v1, v2) @signature `Le/e/a/b/f/j/q5;.h:(I)Ljava/lang/String;` @kind direct;
  #L22eec0.  v2:= temp @kind object;
  #L22eec2.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22eec8.  throw v0;
}
procedure `e.e.a.b.f.j.q5` `c`() @signature `Le/e/a/b/f/j/q5;.c:()Le/e/a/b/f/j/q5;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L22ec8c.  v0:= `@@e.e.a.b.f.j.q5.e` @type ^`e.e.a.b.f.j.q5` @kind object;
  #L22ec90.  return v0 @kind object;
}
procedure `java.lang.String` `h`(`e.e.a.b.f.j.q5` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/j/q5;.h:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L22ed70.  v0:= v3.`e.e.a.b.f.j.q5.d` @type ^`int`;
  #L22ed74.  v1:= new `java.lang.StringBuilder`;
  #L22ed78.  v2:= 35I;
  #L22ed7c.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L22ed82.  v2:= "Index:" @kind object;
  #L22ed86.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22ed8c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L22ed92.  v4:= ", Size:" @kind object;
  #L22ed96.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22ed9c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L22eda2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L22eda8.  v4:= temp @kind object;
  #L22edaa.  return v4 @kind object;
}
procedure `void` `add`(`e.e.a.b.f.j.q5` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/j/q5;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L22ee08.  call `d`(v4) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L22ee0e.  if v5 < 0 then goto L22ee84;
  #L22ee12.  v0:= v4.`e.e.a.b.f.j.q5.d` @type ^`int`;
  #L22ee16.  if v5 > v0 then goto L22ee84;
  #L22ee1a.  v1:= v4.`e.e.a.b.f.j.q5.c` @type ^`java.lang.Object`[] @kind object;
  #L22ee1e.  v2:= length @variable v1;
  #L22ee20.  if v0 >= v2 then goto L22ee32;
  #L22ee24.  v2:= v5 + 1;
  #L22ee28.  v0:= v0 - v5 @kind int;
  #L22ee2a.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L22ee30.  goto L22ee62;
  #L22ee32.  v0:= v0 * 3;
  #L22ee36.  v0:= v0 / 2;
  #L22ee3a.  v0:= v0 + 1;
  #L22ee3e.  v0:= new `java.lang.Object`[v0];
  #L22ee42.  v2:= 0I;
  #L22ee44.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L22ee4a.  v1:= v4.`e.e.a.b.f.j.q5.c` @type ^`java.lang.Object`[] @kind object;
  #L22ee4e.  v2:= v5 + 1;
  #L22ee52.  v3:= v4.`e.e.a.b.f.j.q5.d` @type ^`int`;
  #L22ee56.  v3:= v3 - v5 @kind int;
  #L22ee58.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L22ee5e.  v4.`e.e.a.b.f.j.q5.c` @type ^`java.lang.Object`[] := v0 @kind object;
  #L22ee62.  v0:= v4.`e.e.a.b.f.j.q5.c` @type ^`java.lang.Object`[] @kind object;
  #L22ee66.  v0[v5]:= v6 @kind object;
  #L22ee6a.  v5:= v4.`e.e.a.b.f.j.q5.d` @type ^`int`;
  #L22ee6e.  v5:= v5 + 1;
  #L22ee72.  v4.`e.e.a.b.f.j.q5.d` @type ^`int` := v5;
  #L22ee76.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L22ee7a.  v5:= v5 + 1;
  #L22ee7e.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L22ee82.  return @kind void;
  #L22ee84.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L22ee88.  call temp:= `h`(v4, v5) @signature `Le/e/a/b/f/j/q5;.h:(I)Ljava/lang/String;` @kind direct;
  #L22ee8e.  v5:= temp @kind object;
  #L22ee90.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22ee96.  throw v6;
}
procedure `boolean` `add`(`e.e.a.b.f.j.q5` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/j/q5;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L22ebf0.  call `d`(v4) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L22ebf6.  v0:= v4.`e.e.a.b.f.j.q5.d` @type ^`int`;
  #L22ebfa.  v1:= v4.`e.e.a.b.f.j.q5.c` @type ^`java.lang.Object`[] @kind object;
  #L22ebfe.  v2:= length @variable v1;
  #L22ec00.  v3:= 1I;
  #L22ec02.  if v0 != v2 then goto L22ec1c;
  #L22ec06.  v0:= v0 * 3;
  #L22ec0a.  v0:= v0 / 2;
  #L22ec0e.  v0:= v0 + v3 @kind int;
  #L22ec10.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L22ec16.  v0:= temp @kind object;
  #L22ec18.  v4.`e.e.a.b.f.j.q5.c` @type ^`java.lang.Object`[] := v0 @kind object;
  #L22ec1c.  v0:= v4.`e.e.a.b.f.j.q5.c` @type ^`java.lang.Object`[] @kind object;
  #L22ec20.  v1:= v4.`e.e.a.b.f.j.q5.d` @type ^`int`;
  #L22ec24.  v2:= v1 + 1;
  #L22ec28.  v4.`e.e.a.b.f.j.q5.d` @type ^`int` := v2;
  #L22ec2c.  v0[v1]:= v5 @kind object;
  #L22ec30.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L22ec34.  v5:= v5 + v3 @kind int;
  #L22ec36.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L22ec3a.  return v3;
}
procedure `e.e.a.b.f.j.y3` `b`(`e.e.a.b.f.j.q5` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/j/q5;.b:(I)Le/e/a/b/f/j/y3;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L22ec4c.  v0:= v2.`e.e.a.b.f.j.q5.d` @type ^`int`;
  #L22ec50.  if v3 < v0 then goto L22ec70;
  #L22ec54.  v0:= v2.`e.e.a.b.f.j.q5.c` @type ^`java.lang.Object`[] @kind object;
  #L22ec58.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L22ec5e.  v3:= temp @kind object;
  #L22ec60.  v0:= new `e.e.a.b.f.j.q5`;
  #L22ec64.  v1:= v2.`e.e.a.b.f.j.q5.d` @type ^`int`;
  #L22ec68.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/j/q5;.<init>:([Ljava/lang/Object;I)V` @kind direct;
  #L22ec6e.  return v0 @kind object;
  #L22ec70.  v3:= new `java.lang.IllegalArgumentException`;
  #L22ec74.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L22ec7a.  throw v3;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.j.q5` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/j/q5;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L22ecbc.  call `a`(v1, v2) @signature `Le/e/a/b/f/j/q5;.a:(I)V` @kind direct;
  #L22ecc2.  v0:= v1.`e.e.a.b.f.j.q5.c` @type ^`java.lang.Object`[] @kind object;
  #L22ecc6.  v2:= v0[v2] @kind object;
  #L22ecca.  return v2 @kind object;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.j.q5` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/j/q5;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L22ecdc.  call `d`(v4) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L22ece2.  call `a`(v4, v5) @signature `Le/e/a/b/f/j/q5;.a:(I)V` @kind direct;
  #L22ece8.  v0:= v4.`e.e.a.b.f.j.q5.c` @type ^`java.lang.Object`[] @kind object;
  #L22ecec.  v1:= v0[v5] @kind object;
  #L22ecf0.  v2:= v4.`e.e.a.b.f.j.q5.d` @type ^`int`;
  #L22ecf4.  v3:= v2 + -1;
  #L22ecf8.  if v5 >= v3 then goto L22ed0c;
  #L22ecfc.  v3:= v5 + 1;
  #L22ed00.  v2:= v2 - v5 @kind int;
  #L22ed02.  v2:= v2 + -1;
  #L22ed06.  call `arraycopy`(v0, v3, v0, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L22ed0c.  v5:= v4.`e.e.a.b.f.j.q5.d` @type ^`int`;
  #L22ed10.  v5:= v5 + -1;
  #L22ed14.  v4.`e.e.a.b.f.j.q5.d` @type ^`int` := v5;
  #L22ed18.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L22ed1c.  v5:= v5 + 1;
  #L22ed20.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L22ed24.  return v1 @kind object;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.j.q5` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/j/q5;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L22ed38.  call `d`(v2) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L22ed3e.  call `a`(v2, v3) @signature `Le/e/a/b/f/j/q5;.a:(I)V` @kind direct;
  #L22ed44.  v0:= v2.`e.e.a.b.f.j.q5.c` @type ^`java.lang.Object`[] @kind object;
  #L22ed48.  v1:= v0[v3] @kind object;
  #L22ed4c.  v0[v3]:= v4 @kind object;
  #L22ed50.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L22ed54.  v3:= v3 + 1;
  #L22ed58.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L22ed5c.  return v1 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.j.q5` v1 @kind this) @signature `Le/e/a/b/f/j/q5;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L22eca4.  v0:= v1.`e.e.a.b.f.j.q5.d` @type ^`int`;
  #L22eca8.  return v0;
}
