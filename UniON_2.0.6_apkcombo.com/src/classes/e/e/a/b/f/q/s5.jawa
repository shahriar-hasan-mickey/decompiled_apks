record `e.e.a.b.f.q.s5` @kind class @AccessFlag ABSTRACT extends `e.e.a.b.f.q.h6` @kind class {
}
procedure `void` `<init>`(`e.e.a.b.f.q.s5` v0 @kind this) @signature `Le/e/a/b/f/q/s5;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2e3d38.  call `<init>`(v0) @signature `Le/e/a/b/f/q/h6;.<init>:()V` @kind direct;
  #L2e3d3e.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.q.s5` v1 @kind this) @signature `Le/e/a/b/f/q/s5;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e3d50.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/q/s5;.zza:()Ljava/util/Map;` @kind virtual;
  #L2e3d56.  v0:= temp @kind object;
  #L2e3d58.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L2e3d5e.  return @kind void;
}
procedure `boolean` `contains`(`java.lang.Object` v0 @kind object) @signature `Le/e/a/b/f/q/s5;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`e.e.a.b.f.q.s5` v1 @kind this) @signature `Le/e/a/b/f/q/s5;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e3bd0.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/q/s5;.zza:()Ljava/util/Map;` @kind virtual;
  #L2e3bd6.  v0:= temp @kind object;
  #L2e3bd8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2e3bde.  v0:= temp;
  #L2e3be0.  return v0;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.q.s5` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/q/s5;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e3bf4.  if v2 == 0 then goto L2e3c02;
  #L2e3bf8.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/q/i6;.a:(Ljava/util/Set;Ljava/util/Collection;)Z` @kind static;
  #L2e3bfe.  v2:= temp;
  #L2e3c00.  return v2;
  #L2e3c02.  v0:= 0I;
  #L2e3c04.  throw v0;
  #L2e3c06.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2e3c0c.  v2:= temp @kind object;
  #L2e3c0e.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/q/i6;.a:(Ljava/util/Set;Ljava/util/Iterator;)Z` @kind static;
  #L2e3c14.  v2:= temp;
  #L2e3c16.  return v2;
  catch `java.lang.UnsupportedOperationException` @[L2e3bf8..L2e3c06] goto L2e3c06;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.q.s5` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Le/e/a/b/f/q/s5;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2e3c38.  if v4 == 0 then goto L2e3c46;
  #L2e3c3c.  call temp:= `retainAll`(v3, v4) @signature `Le/e/a/b/f/q/h6;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L2e3c42.  v4:= temp;
  #L2e3c44.  return v4;
  #L2e3c46.  v0:= 0I;
  #L2e3c48.  throw v0;
  #L2e3c4a.  
  #L2e3c4c.  call temp:= `size`(v4) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L2e3c52.  v0:= temp;
  #L2e3c54.  v1:= new `java.util.HashSet`;
  #L2e3c58.  v2:= 3I;
  #L2e3c5a.  if v0 >= v2 then goto L2e3c6e;
  #L2e3c5e.  v2:= "expectedSize" @kind object;
  #L2e3c62.  call temp:= `a`(v0, v2) @signature `Le/e/a/b/f/q/b;.a:(ILjava/lang/String;)I` @kind static;
  #L2e3c68.  v0:= v0 + 1;
  #L2e3c6c.  goto L2e3c8e;
  #L2e3c6e.  v2:= 2.0F;
  #L2e3c72.  if v0 >= v2 then goto L2e3c88;
  #L2e3c76.  v0:= (`float`) v0 @kind i2f;
  #L2e3c78.  v2:= 0.75F;
  #L2e3c7c.  v0:= v0 / v2 @kind float;
  #L2e3c7e.  v2:= 1.0F;
  #L2e3c82.  v0:= v0 + v2 @kind float;
  #L2e3c84.  v0:= (`int`) v0 @kind f2i;
  #L2e3c86.  goto L2e3c8e;
  #L2e3c88.  v0:= 2147483647I;
  #L2e3c8e.  call `<init>`(v1, v0) @signature `Ljava/util/HashSet;.<init>:(I)V` @kind direct;
  #L2e3c94.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2e3c9a.  v4:= temp @kind object;
  #L2e3c9c.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2e3ca2.  v0:= temp;
  #L2e3ca4.  if v0 == 0 then goto L2e3cd0;
  #L2e3ca8.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2e3cae.  v0:= temp @kind object;
  #L2e3cb0.  call temp:= `contains`(v3, v0) @signature `Le/e/a/b/f/q/s5;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L2e3cb6.  v2:= temp;
  #L2e3cb8.  if v2 == 0 then goto L2e3c9c;
  #L2e3cbc.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L2e3cc0.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2e3cc6.  v0:= temp @kind object;
  #L2e3cc8.  call temp:= `add`(v1, v0) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2e3cce.  goto L2e3c9c;
  #L2e3cd0.  call temp:= `zza`(v3) @signature `Le/e/a/b/f/q/s5;.zza:()Ljava/util/Map;` @kind virtual;
  #L2e3cd6.  v4:= temp @kind object;
  #L2e3cd8.  v4:= (`e.e.a.b.f.q.bi`) v4 @kind object;
  #L2e3cdc.  v4:= v4.`e.e.a.b.f.q.bi.e` @type ^`e.e.a.b.f.q.jq` @kind object;
  #L2e3ce0.  call temp:= `c`(v4) @signature `Le/e/a/b/f/q/ls;.c:()Ljava/util/Set;` @kind virtual;
  #L2e3ce6.  v4:= temp @kind object;
  #L2e3ce8.  call temp:= `retainAll`(v4, v1) @signature `Ljava/util/Set;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2e3cee.  v4:= temp;
  #L2e3cf0.  return v4;
  catch `java.lang.UnsupportedOperationException` @[L2e3c3c..L2e3c4a] goto L2e3c4a;
}
procedure `int` `size`(`e.e.a.b.f.q.s5` v1 @kind this) @signature `Le/e/a/b/f/q/s5;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e3d14.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/q/s5;.zza:()Ljava/util/Map;` @kind virtual;
  #L2e3d1a.  v0:= temp @kind object;
  #L2e3d1c.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L2e3d22.  v0:= temp;
  #L2e3d24.  return v0;
}
procedure `java.util.Map` `zza`() @signature `Le/e/a/b/f/q/s5;.zza:()Ljava/util/Map;` @AccessFlag ABSTRACT {

  # return;
}
