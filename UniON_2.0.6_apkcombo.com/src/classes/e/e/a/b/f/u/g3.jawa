record `e.e.a.b.f.u.g3` @kind class @AccessFlag FINAL {
}
procedure `int` `a`(`int` v2 , `byte`[] v3 @kind object, `int` v4 , `int` v5 , `e.e.a.b.f.u.c5` v6 @kind object, `e.e.a.b.f.u.h3` v7 @kind object) @signature `Le/e/a/b/f/u/g3;.a:(I[BIILe/e/a/b/f/u/c5;Le/e/a/b/f/u/h3;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L326188.  v6:= (`e.e.a.b.f.u.u4`) v6 @kind object;
  #L32618c.  call temp:= `a`(v3, v4, v7) @signature `Le/e/a/b/f/u/g3;.a:([BILe/e/a/b/f/u/h3;)I` @kind static;
  #L326192.  v4:= temp;
  #L326194.  v0:= v7.`e.e.a.b.f.u.h3.a` @type ^`int`;
  #L326198.  call `h`(v6, v0) @signature `Le/e/a/b/f/u/u4;.h:(I)V` @kind virtual;
  #L32619e.  if v4 >= v5 then goto L3261bc;
  #L3261a2.  call temp:= `a`(v3, v4, v7) @signature `Le/e/a/b/f/u/g3;.a:([BILe/e/a/b/f/u/h3;)I` @kind static;
  #L3261a8.  v0:= temp;
  #L3261aa.  v1:= v7.`e.e.a.b.f.u.h3.a` @type ^`int`;
  #L3261ae.  if v2 != v1 then goto L3261bc;
  #L3261b2.  call temp:= `a`(v3, v0, v7) @signature `Le/e/a/b/f/u/g3;.a:([BILe/e/a/b/f/u/h3;)I` @kind static;
  #L3261b8.  v4:= temp;
  #L3261ba.  goto L326194;
  #L3261bc.  return v4;
}
procedure `int` `a`(`int` v2 , `byte`[] v3 @kind object, `int` v4 , `int` v5 , `e.e.a.b.f.u.h3` v6 @kind object) @signature `Le/e/a/b/f/u/g3;.a:(I[BIILe/e/a/b/f/u/h3;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L3260d8.  v0:= v2 ^>> 3;
  #L3260dc.  if v0 == 0 then goto L32616c;
  #L3260e0.  v0:= v2 ^& 7;
  #L3260e4.  if v0 == 0 then goto L326162;
  #L3260e8.  v1:= 1I;
  #L3260ea.  if v0 == v1 then goto L32615c;
  #L3260ee.  v1:= 2I;
  #L3260f0.  if v0 == v1 then goto L32614c;
  #L3260f4.  v1:= 3I;
  #L3260f6.  if v0 == v1 then goto L326110;
  #L3260fa.  v2:= 5I;
  #L3260fc.  if v0 != v2 then goto L326106;
  #L326100.  v4:= v4 + 4;
  #L326104.  return v4;
  #L326106.  call temp:= `c`() @signature `Le/e/a/b/f/u/b5;.c:()Le/e/a/b/f/u/b5;` @kind static;
  #L32610c.  v2:= temp @kind object;
  #L32610e.  throw v2;
  #L326110.  v2:= v2 ^& -8;
  #L326114.  v2:= v2 ^| 4;
  #L326118.  v0:= 0I;
  #L32611a.  if v4 >= v5 then goto L326138;
  #L32611e.  call temp:= `a`(v3, v4, v6) @signature `Le/e/a/b/f/u/g3;.a:([BILe/e/a/b/f/u/h3;)I` @kind static;
  #L326124.  v4:= temp;
  #L326126.  v0:= v6.`e.e.a.b.f.u.h3.a` @type ^`int`;
  #L32612a.  if v0 == v2 then goto L326138;
  #L32612e.  call temp:= `a`(v0, v3, v4, v5, v6) @signature `Le/e/a/b/f/u/g3;.a:(I[BIILe/e/a/b/f/u/h3;)I` @kind static;
  #L326134.  v4:= temp;
  #L326136.  goto L32611a;
  #L326138.  if v4 > v5 then goto L326142;
  #L32613c.  if v0 != v2 then goto L326142;
  #L326140.  return v4;
  #L326142.  call temp:= `e`() @signature `Le/e/a/b/f/u/b5;.e:()Le/e/a/b/f/u/b5;` @kind static;
  #L326148.  v2:= temp @kind object;
  #L32614a.  throw v2;
  #L32614c.  call temp:= `a`(v3, v4, v6) @signature `Le/e/a/b/f/u/g3;.a:([BILe/e/a/b/f/u/h3;)I` @kind static;
  #L326152.  v2:= temp;
  #L326154.  v3:= v6.`e.e.a.b.f.u.h3.a` @type ^`int`;
  #L326158.  v2:= v2 + v3 @kind int;
  #L32615a.  return v2;
  #L32615c.  v4:= v4 + 8;
  #L326160.  return v4;
  #L326162.  call temp:= `b`(v3, v4, v6) @signature `Le/e/a/b/f/u/g3;.b:([BILe/e/a/b/f/u/h3;)I` @kind static;
  #L326168.  v2:= temp;
  #L32616a.  return v2;
  #L32616c.  call temp:= `c`() @signature `Le/e/a/b/f/u/b5;.c:()Le/e/a/b/f/u/b5;` @kind static;
  #L326172.  v2:= temp @kind object;
  #L326174.  throw v2;
}
procedure `int` `a`(`int` v9 , `byte`[] v10 @kind object, `int` v11 , `int` v12 , `e.e.a.b.f.u.m7` v13 @kind object, `e.e.a.b.f.u.h3` v14 @kind object) @signature `Le/e/a/b/f/u/g3;.a:(I[BIILe/e/a/b/f/u/m7;Le/e/a/b/f/u/h3;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3261d0.  v0:= v9 ^>> 3;
  #L3261d4.  if v0 == 0 then goto L3262fa;
  #L3261d8.  v0:= v9 ^& 7;
  #L3261dc.  if v0 == 0 then goto L3262de;
  #L3261e0.  v1:= 1I;
  #L3261e2.  if v0 == v1 then goto L3262c2;
  #L3261e6.  v1:= 2I;
  #L3261e8.  if v0 == v1 then goto L32627a;
  #L3261ec.  v1:= 3I;
  #L3261ee.  if v0 == v1 then goto L32621e;
  #L3261f2.  v12:= 5I;
  #L3261f4.  if v0 != v12 then goto L326214;
  #L3261f8.  call temp:= `a`(v10, v11) @signature `Le/e/a/b/f/u/g3;.a:([BI)I` @kind static;
  #L3261fe.  v10:= temp;
  #L326200.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L326206.  v10:= temp @kind object;
  #L326208.  call `a`(v13, v9, v10) @signature `Le/e/a/b/f/u/m7;.a:(ILjava/lang/Object;)V` @kind virtual;
  #L32620e.  v11:= v11 + 4;
  #L326212.  return v11;
  #L326214.  call temp:= `c`() @signature `Le/e/a/b/f/u/b5;.c:()Le/e/a/b/f/u/b5;` @kind static;
  #L32621a.  v9:= temp @kind object;
  #L32621c.  throw v9;
  #L32621e.  call temp:= `e`() @signature `Le/e/a/b/f/u/m7;.e:()Le/e/a/b/f/u/m7;` @kind static;
  #L326224.  v6:= temp @kind object;
  #L326226.  v0:= v9 ^& -8;
  #L32622a.  v7:= v0 ^| 4;
  #L32622e.  v0:= 0I;
  #L326230.  if v11 >= v12 then goto L326260;
  #L326234.  call temp:= `a`(v10, v11, v14) @signature `Le/e/a/b/f/u/g3;.a:([BILe/e/a/b/f/u/h3;)I` @kind static;
  #L32623a.  v2:= temp;
  #L32623c.  v11:= v14.`e.e.a.b.f.u.h3.a` @type ^`int`;
  #L326240.  v0:= v11;
  #L326242.  if v11 == v7 then goto L32625e;
  #L326246.  v1:= v10 @kind object;
  #L326248.  v3:= v12;
  #L32624a.  v4:= v6 @kind object;
  #L32624c.  v5:= v14 @kind object;
  #L32624e.  call temp:= `a`(v0, v1, v2, v3, v4, v5) @signature `Le/e/a/b/f/u/g3;.a:(I[BIILe/e/a/b/f/u/m7;Le/e/a/b/f/u/h3;)I` @kind static;
  #L326254.  v0:= temp;
  #L326256.  v8:= v0;
  #L326258.  v0:= v11;
  #L32625a.  v11:= v8;
  #L32625c.  goto L326230;
  #L32625e.  v11:= v2;
  #L326260.  if v11 > v12 then goto L326270;
  #L326264.  if v0 != v7 then goto L326270;
  #L326268.  call `a`(v13, v9, v6) @signature `Le/e/a/b/f/u/m7;.a:(ILjava/lang/Object;)V` @kind virtual;
  #L32626e.  return v11;
  #L326270.  call temp:= `e`() @signature `Le/e/a/b/f/u/b5;.e:()Le/e/a/b/f/u/b5;` @kind static;
  #L326276.  v9:= temp @kind object;
  #L326278.  throw v9;
  #L32627a.  call temp:= `a`(v10, v11, v14) @signature `Le/e/a/b/f/u/g3;.a:([BILe/e/a/b/f/u/h3;)I` @kind static;
  #L326280.  v11:= temp;
  #L326282.  v12:= v14.`e.e.a.b.f.u.h3.a` @type ^`int`;
  #L326286.  if v12 < 0 then goto L3262b8;
  #L32628a.  v14:= length @variable v10;
  #L32628c.  v14:= v14 - v11 @kind int;
  #L32628e.  if v12 > v14 then goto L3262ae;
  #L326292.  if v12 != 0 then goto L32629c;
  #L326296.  v10:= `@@e.e.a.b.f.u.l3.c` @type ^`e.e.a.b.f.u.l3` @kind object;
  #L32629a.  goto L3262a4;
  #L32629c.  call temp:= `a`(v10, v11, v12) @signature `Le/e/a/b/f/u/l3;.a:([BII)Le/e/a/b/f/u/l3;` @kind static;
  #L3262a2.  v10:= temp @kind object;
  #L3262a4.  call `a`(v13, v9, v10) @signature `Le/e/a/b/f/u/m7;.a:(ILjava/lang/Object;)V` @kind virtual;
  #L3262aa.  v11:= v11 + v12 @kind int;
  #L3262ac.  return v11;
  #L3262ae.  call temp:= `a`() @signature `Le/e/a/b/f/u/b5;.a:()Le/e/a/b/f/u/b5;` @kind static;
  #L3262b4.  v9:= temp @kind object;
  #L3262b6.  throw v9;
  #L3262b8.  call temp:= `b`() @signature `Le/e/a/b/f/u/b5;.b:()Le/e/a/b/f/u/b5;` @kind static;
  #L3262be.  v9:= temp @kind object;
  #L3262c0.  throw v9;
  #L3262c2.  call temp:= `b`(v10, v11) @signature `Le/e/a/b/f/u/g3;.b:([BI)J` @kind static;
  #L3262c8.  v0:= temp @kind wide;
  #L3262ca.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3262d0.  v10:= temp @kind object;
  #L3262d2.  call `a`(v13, v9, v10) @signature `Le/e/a/b/f/u/m7;.a:(ILjava/lang/Object;)V` @kind virtual;
  #L3262d8.  v11:= v11 + 8;
  #L3262dc.  return v11;
  #L3262de.  call temp:= `b`(v10, v11, v14) @signature `Le/e/a/b/f/u/g3;.b:([BILe/e/a/b/f/u/h3;)I` @kind static;
  #L3262e4.  v10:= temp;
  #L3262e6.  v11:= v14.`e.e.a.b.f.u.h3.b` @type ^`long` @kind wide;
  #L3262ea.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3262f0.  v11:= temp @kind object;
  #L3262f2.  call `a`(v13, v9, v11) @signature `Le/e/a/b/f/u/m7;.a:(ILjava/lang/Object;)V` @kind virtual;
  #L3262f8.  return v10;
  #L3262fa.  call temp:= `c`() @signature `Le/e/a/b/f/u/b5;.c:()Le/e/a/b/f/u/b5;` @kind static;
  #L326300.  v9:= temp @kind object;
  #L326302.  throw v9;
}
procedure `int` `a`(`int` v1 , `byte`[] v2 @kind object, `int` v3 , `e.e.a.b.f.u.h3` v4 @kind object) @signature `Le/e/a/b/f/u/g3;.a:(I[BILe/e/a/b/f/u/h3;)I` @AccessFlag STATIC {
    temp;
    v0;

  #L326030.  v1:= v1 ^& 127;
  #L326034.  v0:= v3 + 1;
  #L326038.  v3:= v2[v3] @kind byte;
  #L32603c.  if v3 < 0 then goto L32604c;
  #L326040.  v2:= v3 ^< 7;
  #L326044.  v1:= v1 ^| v2 @kind int;
  #L326046.  v4.`e.e.a.b.f.u.h3.a` @type ^`int` := v1;
  #L32604a.  return v0;
  #L32604c.  v3:= v3 ^& 127;
  #L326050.  v3:= v3 ^< 7;
  #L326054.  v1:= v1 ^| v3 @kind int;
  #L326056.  v3:= v0 + 1;
  #L32605a.  v0:= v2[v0] @kind byte;
  #L32605e.  if v0 < 0 then goto L32606e;
  #L326062.  v2:= v0 ^< 14;
  #L326066.  v1:= v1 ^| v2 @kind int;
  #L326068.  v4.`e.e.a.b.f.u.h3.a` @type ^`int` := v1;
  #L32606c.  return v3;
  #L32606e.  v0:= v0 ^& 127;
  #L326072.  v0:= v0 ^< 14;
  #L326076.  v1:= v1 ^| v0 @kind int;
  #L326078.  v0:= v3 + 1;
  #L32607c.  v3:= v2[v3] @kind byte;
  #L326080.  if v3 < 0 then goto L32608a;
  #L326084.  v2:= v3 ^< 21;
  #L326088.  goto L326044;
  #L32608a.  v3:= v3 ^& 127;
  #L32608e.  v3:= v3 ^< 21;
  #L326092.  v1:= v1 ^| v3 @kind int;
  #L326094.  v3:= v0 + 1;
  #L326098.  v0:= v2[v0] @kind byte;
  #L32609c.  if v0 < 0 then goto L3260a6;
  #L3260a0.  v2:= v0 ^< 28;
  #L3260a4.  goto L326066;
  #L3260a6.  v0:= v0 ^& 127;
  #L3260aa.  v0:= v0 ^< 28;
  #L3260ae.  v1:= v1 ^| v0 @kind int;
  #L3260b0.  v0:= v3 + 1;
  #L3260b4.  v3:= v2[v3] @kind byte;
  #L3260b8.  if v3 < 0 then goto L3260c2;
  #L3260bc.  v4.`e.e.a.b.f.u.h3.a` @type ^`int` := v1;
  #L3260c0.  return v0;
  #L3260c2.  v3:= v0;
  #L3260c4.  goto L3260b0;
}
procedure `int` `a`(`e.e.a.b.f.u.s6` v2 @kind object, `int` v3 , `byte`[] v4 @kind object, `int` v5 , `int` v6 , `e.e.a.b.f.u.c5` v7 @kind object, `e.e.a.b.f.u.h3` v8 @kind object) @signature `Le/e/a/b/f/u/g3;.a:(Le/e/a/b/f/u/s6;I[BIILe/e/a/b/f/u/c5;Le/e/a/b/f/u/h3;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L325fec.  call temp:= `a`(v2, v4, v5, v6, v8) @signature `Le/e/a/b/f/u/g3;.a:(Le/e/a/b/f/u/s6;[BIILe/e/a/b/f/u/h3;)I` @kind static;
  #L325ff2.  v5:= temp;
  #L325ff4.  v0:= v8.`e.e.a.b.f.u.h3.c` @type ^`java.lang.Object` @kind object;
  #L325ff8.  call temp:= `add`(v7, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L325ffe.  if v5 >= v6 then goto L32601c;
  #L326002.  call temp:= `a`(v4, v5, v8) @signature `Le/e/a/b/f/u/g3;.a:([BILe/e/a/b/f/u/h3;)I` @kind static;
  #L326008.  v0:= temp;
  #L32600a.  v1:= v8.`e.e.a.b.f.u.h3.a` @type ^`int`;
  #L32600e.  if v3 != v1 then goto L32601c;
  #L326012.  call temp:= `a`(v2, v4, v0, v6, v8) @signature `Le/e/a/b/f/u/g3;.a:(Le/e/a/b/f/u/s6;[BIILe/e/a/b/f/u/h3;)I` @kind static;
  #L326018.  v5:= temp;
  #L32601a.  goto L325ff4;
  #L32601c.  return v5;
}
procedure `int` `a`(`e.e.a.b.f.u.s6` v8 @kind object, `byte`[] v9 @kind object, `int` v10 , `int` v11 , `int` v12 , `e.e.a.b.f.u.h3` v13 @kind object) @signature `Le/e/a/b/f/u/g3;.a:(Le/e/a/b/f/u/s6;[BIIILe/e/a/b/f/u/h3;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L325fac.  v8:= (`e.e.a.b.f.u.f6`) v8 @kind object;
  #L325fb0.  call temp:= `zza`(v8) @signature `Le/e/a/b/f/u/f6;.zza:()Ljava/lang/Object;` @kind virtual;
  #L325fb6.  v7:= temp @kind object;
  #L325fb8.  v0:= v8 @kind object;
  #L325fba.  v1:= v7 @kind object;
  #L325fbc.  v2:= v9 @kind object;
  #L325fbe.  v3:= v10;
  #L325fc0.  v4:= v11;
  #L325fc2.  v5:= v12;
  #L325fc4.  v6:= v13 @kind object;
  #L325fc6.  call temp:= `a`(v0, v1, v2, v3, v4, v5, v6) @signature `Le/e/a/b/f/u/f6;.a:(Ljava/lang/Object;[BIIILe/e/a/b/f/u/h3;)I` @kind virtual;
  #L325fcc.  v9:= temp;
  #L325fce.  call `c`(v8, v7) @signature `Le/e/a/b/f/u/f6;.c:(Ljava/lang/Object;)V` @kind virtual;
  #L325fd4.  v13.`e.e.a.b.f.u.h3.c` @type ^`java.lang.Object` := v7 @kind object;
  #L325fd8.  return v9;
}
procedure `int` `a`(`e.e.a.b.f.u.s6` v6 @kind object, `byte`[] v7 @kind object, `int` v8 , `int` v9 , `e.e.a.b.f.u.h3` v10 @kind object) @signature `Le/e/a/b/f/u/g3;.a:(Le/e/a/b/f/u/s6;[BIILe/e/a/b/f/u/h3;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L325f48.  v0:= v8 + 1;
  #L325f4c.  v8:= v7[v8] @kind byte;
  #L325f50.  if v8 >= 0 then goto L325f60;
  #L325f54.  call temp:= `a`(v8, v7, v0, v10) @signature `Le/e/a/b/f/u/g3;.a:(I[BILe/e/a/b/f/u/h3;)I` @kind static;
  #L325f5a.  v0:= temp;
  #L325f5c.  v8:= v10.`e.e.a.b.f.u.h3.a` @type ^`int`;
  #L325f60.  v3:= v0;
  #L325f62.  if v8 < 0 then goto L325f92;
  #L325f66.  v9:= v9 - v3 @kind int;
  #L325f68.  if v8 > v9 then goto L325f92;
  #L325f6c.  call temp:= `zza`(v6) @signature `Le/e/a/b/f/u/s6;.zza:()Ljava/lang/Object;` @kind interface;
  #L325f72.  v9:= temp @kind object;
  #L325f74.  v8:= v8 + v3 @kind int;
  #L325f76.  v0:= v6 @kind object;
  #L325f78.  v1:= v9 @kind object;
  #L325f7a.  v2:= v7 @kind object;
  #L325f7c.  v4:= v8;
  #L325f7e.  v5:= v10 @kind object;
  #L325f80.  call `a`(v0, v1, v2, v3, v4, v5) @signature `Le/e/a/b/f/u/s6;.a:(Ljava/lang/Object;[BIILe/e/a/b/f/u/h3;)V` @kind interface;
  #L325f86.  call `c`(v6, v9) @signature `Le/e/a/b/f/u/s6;.c:(Ljava/lang/Object;)V` @kind interface;
  #L325f8c.  v10.`e.e.a.b.f.u.h3.c` @type ^`java.lang.Object` := v9 @kind object;
  #L325f90.  return v8;
  #L325f92.  call temp:= `a`() @signature `Le/e/a/b/f/u/b5;.a:()Le/e/a/b/f/u/b5;` @kind static;
  #L325f98.  v6:= temp @kind object;
  #L325f9a.  throw v6;
}
procedure `int` `a`(`byte`[] v2 @kind object, `int` v3 ) @signature `Le/e/a/b/f/u/g3;.a:([BI)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L325e80.  v0:= v2[v3] @kind byte;
  #L325e84.  v0:= v0 ^& 255;
  #L325e88.  v1:= v3 + 1;
  #L325e8c.  v1:= v2[v1] @kind byte;
  #L325e90.  v1:= v1 ^& 255;
  #L325e94.  v1:= v1 ^< 8;
  #L325e98.  v0:= v0 ^| v1 @kind int;
  #L325e9a.  v1:= v3 + 2;
  #L325e9e.  v1:= v2[v1] @kind byte;
  #L325ea2.  v1:= v1 ^& 255;
  #L325ea6.  v1:= v1 ^< 16;
  #L325eaa.  v0:= v0 ^| v1 @kind int;
  #L325eac.  v3:= v3 + 3;
  #L325eb0.  v2:= v2[v3] @kind byte;
  #L325eb4.  v2:= v2 ^& 255;
  #L325eb8.  v2:= v2 ^< 24;
  #L325ebc.  v2:= v2 ^| v0 @kind int;
  #L325ebe.  return v2;
}
procedure `int` `a`(`byte`[] v2 @kind object, `int` v3 , `e.e.a.b.f.u.c5` v4 @kind object, `e.e.a.b.f.u.h3` v5 @kind object) @signature `Le/e/a/b/f/u/g3;.a:([BILe/e/a/b/f/u/c5;Le/e/a/b/f/u/h3;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L325efc.  v4:= (`e.e.a.b.f.u.u4`) v4 @kind object;
  #L325f00.  call temp:= `a`(v2, v3, v5) @signature `Le/e/a/b/f/u/g3;.a:([BILe/e/a/b/f/u/h3;)I` @kind static;
  #L325f06.  v3:= temp;
  #L325f08.  v0:= v5.`e.e.a.b.f.u.h3.a` @type ^`int`;
  #L325f0c.  v0:= v0 + v3 @kind int;
  #L325f0e.  if v3 >= v0 then goto L325f26;
  #L325f12.  call temp:= `a`(v2, v3, v5) @signature `Le/e/a/b/f/u/g3;.a:([BILe/e/a/b/f/u/h3;)I` @kind static;
  #L325f18.  v3:= temp;
  #L325f1a.  v1:= v5.`e.e.a.b.f.u.h3.a` @type ^`int`;
  #L325f1e.  call `h`(v4, v1) @signature `Le/e/a/b/f/u/u4;.h:(I)V` @kind virtual;
  #L325f24.  goto L325f0e;
  #L325f26.  if v3 != v0 then goto L325f2c;
  #L325f2a.  return v3;
  #L325f2c.  call temp:= `a`() @signature `Le/e/a/b/f/u/b5;.a:()Le/e/a/b/f/u/b5;` @kind static;
  #L325f32.  v2:= temp @kind object;
  #L325f34.  throw v2;
}
procedure `int` `a`(`byte`[] v1 @kind object, `int` v2 , `e.e.a.b.f.u.h3` v3 @kind object) @signature `Le/e/a/b/f/u/g3;.a:([BILe/e/a/b/f/u/h3;)I` @AccessFlag STATIC {
    temp;
    v0;

  #L325ed0.  v0:= v2 + 1;
  #L325ed4.  v2:= v1[v2] @kind byte;
  #L325ed8.  if v2 < 0 then goto L325ee2;
  #L325edc.  v3.`e.e.a.b.f.u.h3.a` @type ^`int` := v2;
  #L325ee0.  return v0;
  #L325ee2.  call temp:= `a`(v2, v1, v0, v3) @signature `Le/e/a/b/f/u/g3;.a:(I[BILe/e/a/b/f/u/h3;)I` @kind static;
  #L325ee8.  v1:= temp;
  #L325eea.  return v1;
}
procedure `int` `b`(`byte`[] v9 @kind object, `int` v10 , `e.e.a.b.f.u.h3` v11 @kind object) @signature `Le/e/a/b/f/u/g3;.b:([BILe/e/a/b/f/u/h3;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L326314.  v0:= v10 + 1;
  #L326318.  v10:= v9[v10] @kind byte;
  #L32631c.  v1:= (`long`) v10 @kind i2l;
  #L32631e.  v3:= 0L;
  #L326322.  v10:= lcmp(v1, v3);
  #L326326.  if v10 < 0 then goto L326330;
  #L32632a.  v11.`e.e.a.b.f.u.h3.b` @type ^`long` := v1 @kind wide;
  #L32632e.  return v0;
  #L326330.  v3:= 127L;
  #L326334.  v1:= v1 ^& v3 @kind long;
  #L326336.  v10:= v0 + 1;
  #L32633a.  v0:= v9[v0] @kind byte;
  #L32633e.  v3:= v0 ^& 127;
  #L326342.  v3:= (`long`) v3 @kind i2l;
  #L326344.  v5:= 7I;
  #L326346.  v3:= v3 ^< v5 @kind long;
  #L326348.  v1:= v1 ^| v3 @kind long;
  #L32634a.  v3:= 7I;
  #L32634c.  if v0 >= 0 then goto L32636c;
  #L326350.  v0:= v10 + 1;
  #L326354.  v10:= v9[v10] @kind byte;
  #L326358.  v3:= v3 + v5 @kind int;
  #L32635a.  v4:= v10 ^& 127;
  #L32635e.  v6:= (`long`) v4 @kind i2l;
  #L326360.  v6:= v6 ^< v3 @kind long;
  #L326362.  v1:= v1 ^| v6 @kind long;
  #L326364.  v8:= v0;
  #L326366.  v0:= v10;
  #L326368.  v10:= v8;
  #L32636a.  goto L32634c;
  #L32636c.  v11.`e.e.a.b.f.u.h3.b` @type ^`long` := v1 @kind wide;
  #L326370.  return v10;
}
procedure `long` `b`(`byte`[] v7 @kind object, `int` v8 ) @signature `Le/e/a/b/f/u/g3;.b:([BI)J` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L326478.  v0:= v7[v8] @kind byte;
  #L32647c.  v0:= (`long`) v0 @kind i2l;
  #L32647e.  v2:= 255L;
  #L326482.  v0:= v0 ^& v2 @kind long;
  #L326484.  v4:= v8 + 1;
  #L326488.  v4:= v7[v4] @kind byte;
  #L32648c.  v4:= (`long`) v4 @kind i2l;
  #L32648e.  v4:= v4 ^& v2 @kind long;
  #L326490.  v6:= 8I;
  #L326494.  v4:= v4 ^< v6 @kind long;
  #L326496.  v0:= v0 ^| v4 @kind long;
  #L326498.  v4:= v8 + 2;
  #L32649c.  v4:= v7[v4] @kind byte;
  #L3264a0.  v4:= (`long`) v4 @kind i2l;
  #L3264a2.  v4:= v4 ^& v2 @kind long;
  #L3264a4.  v6:= 16I;
  #L3264a8.  v4:= v4 ^< v6 @kind long;
  #L3264aa.  v0:= v0 ^| v4 @kind long;
  #L3264ac.  v4:= v8 + 3;
  #L3264b0.  v4:= v7[v4] @kind byte;
  #L3264b4.  v4:= (`long`) v4 @kind i2l;
  #L3264b6.  v4:= v4 ^& v2 @kind long;
  #L3264b8.  v6:= 24I;
  #L3264bc.  v4:= v4 ^< v6 @kind long;
  #L3264be.  v0:= v0 ^| v4 @kind long;
  #L3264c0.  v4:= v8 + 4;
  #L3264c4.  v4:= v7[v4] @kind byte;
  #L3264c8.  v4:= (`long`) v4 @kind i2l;
  #L3264ca.  v4:= v4 ^& v2 @kind long;
  #L3264cc.  v6:= 32I;
  #L3264d0.  v4:= v4 ^< v6 @kind long;
  #L3264d2.  v0:= v0 ^| v4 @kind long;
  #L3264d4.  v4:= v8 + 5;
  #L3264d8.  v4:= v7[v4] @kind byte;
  #L3264dc.  v4:= (`long`) v4 @kind i2l;
  #L3264de.  v4:= v4 ^& v2 @kind long;
  #L3264e0.  v6:= 40I;
  #L3264e4.  v4:= v4 ^< v6 @kind long;
  #L3264e6.  v0:= v0 ^| v4 @kind long;
  #L3264e8.  v4:= v8 + 6;
  #L3264ec.  v4:= v7[v4] @kind byte;
  #L3264f0.  v4:= (`long`) v4 @kind i2l;
  #L3264f2.  v4:= v4 ^& v2 @kind long;
  #L3264f4.  v6:= 48I;
  #L3264f8.  v4:= v4 ^< v6 @kind long;
  #L3264fa.  v0:= v0 ^| v4 @kind long;
  #L3264fc.  v8:= v8 + 7;
  #L326500.  v7:= v7[v8] @kind byte;
  #L326504.  v7:= (`long`) v7 @kind i2l;
  #L326506.  v7:= v7 ^& v2 @kind long;
  #L326508.  v2:= 56I;
  #L32650c.  v7:= v7 ^< v2 @kind long;
  #L32650e.  v7:= v7 ^| v0 @kind long;
  #L326510.  return v7 @kind wide;
}
procedure `double` `c`(`byte`[] v0 @kind object, `int` v1 ) @signature `Le/e/a/b/f/u/g3;.c:([BI)D` @AccessFlag STATIC {
    temp;

  #L325e38.  call temp:= `b`(v0, v1) @signature `Le/e/a/b/f/u/g3;.b:([BI)J` @kind static;
  #L325e3e.  v0:= temp @kind wide;
  #L325e40.  call temp:= `longBitsToDouble`(v0) @signature `Ljava/lang/Double;.longBitsToDouble:(J)D` @kind static;
  #L325e46.  v0:= temp @kind wide;
  #L325e48.  return v0 @kind wide;
}
procedure `int` `c`(`byte`[] v3 @kind object, `int` v4 , `e.e.a.b.f.u.h3` v5 @kind object) @signature `Le/e/a/b/f/u/g3;.c:([BILe/e/a/b/f/u/h3;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L326384.  call temp:= `a`(v3, v4, v5) @signature `Le/e/a/b/f/u/g3;.a:([BILe/e/a/b/f/u/h3;)I` @kind static;
  #L32638a.  v4:= temp;
  #L32638c.  v0:= v5.`e.e.a.b.f.u.h3.a` @type ^`int`;
  #L326390.  if v0 < 0 then goto L3263b8;
  #L326394.  if v0 != 0 then goto L3263a2;
  #L326398.  v3:= "" @kind object;
  #L32639c.  v5.`e.e.a.b.f.u.h3.c` @type ^`java.lang.Object` := v3 @kind object;
  #L3263a0.  return v4;
  #L3263a2.  v1:= new `java.lang.String`;
  #L3263a6.  v2:= `@@e.e.a.b.f.u.w4.a` @type ^`java.nio.charset.Charset` @kind object;
  #L3263aa.  call `<init>`(v1, v3, v4, v0, v2) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L3263b0.  v5.`e.e.a.b.f.u.h3.c` @type ^`java.lang.Object` := v1 @kind object;
  #L3263b4.  v4:= v4 + v0 @kind int;
  #L3263b6.  return v4;
  #L3263b8.  call temp:= `b`() @signature `Le/e/a/b/f/u/b5;.b:()Le/e/a/b/f/u/b5;` @kind static;
  #L3263be.  v3:= temp @kind object;
  #L3263c0.  throw v3;
}
procedure `float` `d`(`byte`[] v0 @kind object, `int` v1 ) @signature `Le/e/a/b/f/u/g3;.d:([BI)F` @AccessFlag STATIC {
    temp;

  #L325e5c.  call temp:= `a`(v0, v1) @signature `Le/e/a/b/f/u/g3;.a:([BI)I` @kind static;
  #L325e62.  v0:= temp;
  #L325e64.  call temp:= `intBitsToFloat`(v0) @signature `Ljava/lang/Float;.intBitsToFloat:(I)F` @kind static;
  #L325e6a.  v0:= temp;
  #L325e6c.  return v0;
}
procedure `int` `d`(`byte`[] v1 @kind object, `int` v2 , `e.e.a.b.f.u.h3` v3 @kind object) @signature `Le/e/a/b/f/u/g3;.d:([BILe/e/a/b/f/u/h3;)I` @AccessFlag STATIC {
    temp;
    v0;

  #L3263d4.  call temp:= `a`(v1, v2, v3) @signature `Le/e/a/b/f/u/g3;.a:([BILe/e/a/b/f/u/h3;)I` @kind static;
  #L3263da.  v2:= temp;
  #L3263dc.  v0:= v3.`e.e.a.b.f.u.h3.a` @type ^`int`;
  #L3263e0.  if v0 < 0 then goto L326402;
  #L3263e4.  if v0 != 0 then goto L3263f2;
  #L3263e8.  v1:= "" @kind object;
  #L3263ec.  v3.`e.e.a.b.f.u.h3.c` @type ^`java.lang.Object` := v1 @kind object;
  #L3263f0.  return v2;
  #L3263f2.  call temp:= `b`(v1, v2, v0) @signature `Le/e/a/b/f/u/s7;.b:([BII)Ljava/lang/String;` @kind static;
  #L3263f8.  v1:= temp @kind object;
  #L3263fa.  v3.`e.e.a.b.f.u.h3.c` @type ^`java.lang.Object` := v1 @kind object;
  #L3263fe.  v2:= v2 + v0 @kind int;
  #L326400.  return v2;
  #L326402.  call temp:= `b`() @signature `Le/e/a/b/f/u/b5;.b:()Le/e/a/b/f/u/b5;` @kind static;
  #L326408.  v1:= temp @kind object;
  #L32640a.  throw v1;
}
procedure `int` `e`(`byte`[] v2 @kind object, `int` v3 , `e.e.a.b.f.u.h3` v4 @kind object) @signature `Le/e/a/b/f/u/g3;.e:([BILe/e/a/b/f/u/h3;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L32641c.  call temp:= `a`(v2, v3, v4) @signature `Le/e/a/b/f/u/g3;.a:([BILe/e/a/b/f/u/h3;)I` @kind static;
  #L326422.  v3:= temp;
  #L326424.  v0:= v4.`e.e.a.b.f.u.h3.a` @type ^`int`;
  #L326428.  if v0 < 0 then goto L32645c;
  #L32642c.  v1:= length @variable v2;
  #L32642e.  v1:= v1 - v3 @kind int;
  #L326430.  if v0 > v1 then goto L326452;
  #L326434.  if v0 != 0 then goto L326442;
  #L326438.  v2:= `@@e.e.a.b.f.u.l3.c` @type ^`e.e.a.b.f.u.l3` @kind object;
  #L32643c.  v4.`e.e.a.b.f.u.h3.c` @type ^`java.lang.Object` := v2 @kind object;
  #L326440.  return v3;
  #L326442.  call temp:= `a`(v2, v3, v0) @signature `Le/e/a/b/f/u/l3;.a:([BII)Le/e/a/b/f/u/l3;` @kind static;
  #L326448.  v2:= temp @kind object;
  #L32644a.  v4.`e.e.a.b.f.u.h3.c` @type ^`java.lang.Object` := v2 @kind object;
  #L32644e.  v3:= v3 + v0 @kind int;
  #L326450.  return v3;
  #L326452.  call temp:= `a`() @signature `Le/e/a/b/f/u/b5;.a:()Le/e/a/b/f/u/b5;` @kind static;
  #L326458.  v2:= temp @kind object;
  #L32645a.  throw v2;
  #L32645c.  call temp:= `b`() @signature `Le/e/a/b/f/u/b5;.b:()Le/e/a/b/f/u/b5;` @kind static;
  #L326462.  v2:= temp @kind object;
  #L326464.  throw v2;
}
