record `e.e.a.b.f.r.j1` @kind class @AccessFlag ABSTRACT extends `java.util.AbstractSet` @kind class {
}
procedure `void` `<init>`(`e.e.a.b.f.r.j1` v0 @kind this) @signature `Le/e/a/b/f/r/j1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L30eef0.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L30eef6.  return @kind void;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.r.j1` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/r/j1;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L30eeb0.  call temp:= `a`(v0, v1) @signature `Le/e/a/b/f/r/k1;.a:(Ljava/util/Set;Ljava/util/Collection;)Z` @kind static;
  #L30eeb6.  v1:= temp;
  #L30eeb8.  return v1;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.r.j1` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/r/j1;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L30eecc.  if v1 == 0 then goto L30eeda;
  #L30eed0.  call temp:= `retainAll`(v0, v1) @signature `Ljava/util/AbstractSet;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L30eed6.  v1:= temp;
  #L30eed8.  return v1;
  #L30eeda.  v1:= 0I;
  #L30eedc.  throw v1;
}
