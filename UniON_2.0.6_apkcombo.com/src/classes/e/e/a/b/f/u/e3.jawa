record `e.e.a.b.f.u.e3` @kind class @AccessFlag ABSTRACT extends `java.util.AbstractList` @kind class, `e.e.a.b.f.u.c5` @kind interface {
  `boolean` `e.e.a.b.f.u.e3.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.f.u.e3` v1 @kind this) @signature `Le/e/a/b/f/u/e3;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L325b0c.  call `<init>`(v1) @signature `Ljava/util/AbstractList;.<init>:()V` @kind direct;
  #L325b12.  v0:= 1I;
  #L325b14.  v1.`e.e.a.b.f.u.e3.b` @type ^`boolean` := v0 @kind boolean;
  #L325b18.  return @kind void;
}
procedure `boolean` `add`(`e.e.a.b.f.u.e3` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/u/e3;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L325964.  call `d`(v0) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32596a.  call temp:= `add`(v0, v1) @signature `Ljava/util/AbstractList;.add:(Ljava/lang/Object;)Z` @kind super;
  #L325970.  v1:= temp;
  #L325972.  return v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.u.e3` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/u/e3;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L325984.  call `d`(v0) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32598a.  call temp:= `addAll`(v0, v1, v2) @signature `Ljava/util/AbstractList;.addAll:(ILjava/util/Collection;)Z` @kind super;
  #L325990.  v1:= temp;
  #L325992.  return v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.u.e3` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/u/e3;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L3259a4.  call `d`(v0) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L3259aa.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/AbstractList;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L3259b0.  v1:= temp;
  #L3259b2.  return v1;
}
procedure `void` `clear`(`e.e.a.b.f.u.e3` v0 @kind this) @signature `Le/e/a/b/f/u/e3;.clear:()V` @AccessFlag PUBLIC {
    temp;

  #L325b2c.  call `d`(v0) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L325b32.  call `clear`(v0) @signature `Ljava/util/AbstractList;.clear:()V` @kind super;
  #L325b38.  return @kind void;
}
procedure `void` `d`(`e.e.a.b.f.u.e3` v1 @kind this) @signature `Le/e/a/b/f/u/e3;.d:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L325b64.  v0:= v1.`e.e.a.b.f.u.e3.b` @type ^`boolean` @kind boolean;
  #L325b68.  if v0 == 0 then goto L325b6e;
  #L325b6c.  return @kind void;
  #L325b6e.  v0:= new `java.lang.UnsupportedOperationException`;
  #L325b72.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L325b78.  throw v0;
}
procedure `boolean` `equals`(`e.e.a.b.f.u.e3` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/u/e3;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3259c4.  v0:= 1I;
  #L3259c6.  if v7 != v6 then goto L3259cc;
  #L3259ca.  return v0;
  #L3259cc.  v1:= instanceof @variable v7 @type ^`java.util.List` @kind boolean;
  #L3259d0.  v2:= 0I;
  #L3259d2.  if v1 != 0 then goto L3259d8;
  #L3259d6.  return v2;
  #L3259d8.  v1:= instanceof @variable v7 @type ^`java.util.RandomAccess` @kind boolean;
  #L3259dc.  if v1 != 0 then goto L3259ea;
  #L3259e0.  call temp:= `equals`(v6, v7) @signature `Ljava/util/AbstractList;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L3259e6.  v7:= temp;
  #L3259e8.  return v7;
  #L3259ea.  v7:= (`java.util.List`) v7 @kind object;
  #L3259ee.  call temp:= `size`(v6) @signature `Ljava/util/AbstractList;.size:()I` @kind virtual;
  #L3259f4.  v1:= temp;
  #L3259f6.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3259fc.  v3:= temp;
  #L3259fe.  if v1 == v3 then goto L325a04;
  #L325a02.  return v2;
  #L325a04.  v3:= 0I;
  #L325a06.  if v3 >= v1 then goto L325a2e;
  #L325a0a.  call temp:= `get`(v6, v3) @signature `Ljava/util/AbstractList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L325a10.  v4:= temp @kind object;
  #L325a12.  call temp:= `get`(v7, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L325a18.  v5:= temp @kind object;
  #L325a1a.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L325a20.  v4:= temp;
  #L325a22.  if v4 != 0 then goto L325a28;
  #L325a26.  return v2;
  #L325a28.  v3:= v3 + 1;
  #L325a2c.  goto L325a06;
  #L325a2e.  return v0;
}
procedure `int` `hashCode`(`e.e.a.b.f.u.e3` v4 @kind this) @signature `Le/e/a/b/f/u/e3;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L325acc.  call temp:= `size`(v4) @signature `Ljava/util/AbstractList;.size:()I` @kind virtual;
  #L325ad2.  v0:= temp;
  #L325ad4.  v1:= 1I;
  #L325ad6.  v2:= 0I;
  #L325ad8.  if v2 >= v0 then goto L325af8;
  #L325adc.  v1:= v1 * 31;
  #L325ae0.  call temp:= `get`(v4, v2) @signature `Ljava/util/AbstractList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L325ae6.  v3:= temp @kind object;
  #L325ae8.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L325aee.  v3:= temp;
  #L325af0.  v1:= v1 + v3 @kind int;
  #L325af2.  v2:= v2 + 1;
  #L325af6.  goto L325ad8;
  #L325af8.  return v1;
}
procedure `java.lang.Object` `remove`(`int` v0 ) @signature `Le/e/a/b/f/u/e3;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `remove`(`e.e.a.b.f.u.e3` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/u/e3;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L325a40.  call `d`(v1) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L325a46.  call temp:= `indexOf`(v1, v2) @signature `Ljava/util/AbstractList;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L325a4c.  v2:= temp;
  #L325a4e.  v0:= -1I;
  #L325a50.  if v2 != v0 then goto L325a58;
  #L325a54.  v2:= 0I;
  #L325a56.  return v2;
  #L325a58.  call temp:= `remove`(v1, v2) @signature `Le/e/a/b/f/u/e3;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L325a5e.  v2:= 1I;
  #L325a60.  return v2;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.u.e3` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/u/e3;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L325a74.  call `d`(v0) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L325a7a.  call temp:= `removeAll`(v0, v1) @signature `Ljava/util/AbstractList;.removeAll:(Ljava/util/Collection;)Z` @kind super;
  #L325a80.  v1:= temp;
  #L325a82.  return v1;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.u.e3` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/u/e3;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L325a94.  call `d`(v0) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L325a9a.  call temp:= `retainAll`(v0, v1) @signature `Ljava/util/AbstractList;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L325aa0.  v1:= temp;
  #L325aa2.  return v1;
}
procedure `boolean` `zza`(`e.e.a.b.f.u.e3` v1 @kind this) @signature `Le/e/a/b/f/u/e3;.zza:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L325ab4.  v0:= v1.`e.e.a.b.f.u.e3.b` @type ^`boolean` @kind boolean;
  #L325ab8.  return v0;
}
procedure `void` `zzb`(`e.e.a.b.f.u.e3` v1 @kind this) @signature `Le/e/a/b/f/u/e3;.zzb:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L325b4c.  v0:= 0I;
  #L325b4e.  v1.`e.e.a.b.f.u.e3.b` @type ^`boolean` := v0 @kind boolean;
  #L325b52.  return @kind void;
}
