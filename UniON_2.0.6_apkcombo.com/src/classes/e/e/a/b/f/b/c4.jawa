record `e.e.a.b.f.b.c4` @kind class @AccessFlag FINAL {
}
global `e.e.a.b.f.b.d4` `@@e.e.a.b.f.b.c4.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/b/c4;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L21012c.  call temp:= `b`() @signature `Le/e/a/b/f/b/a4;.b:()Z` @kind static;
  #L210132.  v0:= temp;
  #L210134.  if v0 == 0 then goto L210148;
  #L210138.  call temp:= `c`() @signature `Le/e/a/b/f/b/a4;.c:()Z` @kind static;
  #L21013e.  v0:= temp;
  #L210140.  if v0 == 0 then goto L210148;
  #L210144.  v0:= 1I;
  #L210146.  goto L21014a;
  #L210148.  v0:= 0I;
  #L21014a.  if v0 == 0 then goto L21015a;
  #L21014e.  v0:= new `e.e.a.b.f.b.g4`;
  #L210152.  call `<init>`(v0) @signature `Le/e/a/b/f/b/g4;.<init>:()V` @kind direct;
  #L210158.  goto L210164;
  #L21015a.  v0:= new `e.e.a.b.f.b.e4`;
  #L21015e.  call `<init>`(v0) @signature `Le/e/a/b/f/b/e4;.<init>:()V` @kind direct;
  #L210164.  `@@e.e.a.b.f.b.c4.a` @type ^`e.e.a.b.f.b.d4` := v0 @kind object;
  #L210168.  return @kind void;
}
procedure `int` `a`(`int` v1 ) @signature `Le/e/a/b/f/b/c4;.a:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L20ffd4.  v0:= -12I;
  #L20ffd8.  if v1 <= v0 then goto L20ffde;
  #L20ffdc.  v1:= -1I;
  #L20ffde.  return v1;
}
procedure `int` `a`(`int` v1 , `int` v2 ) @signature `Le/e/a/b/f/b/c4;.a:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2100e0.  v0:= -12I;
  #L2100e4.  if v1 > v0 then goto L2100fa;
  #L2100e8.  v0:= -65I;
  #L2100ec.  if v2 <= v0 then goto L2100f2;
  #L2100f0.  goto L2100fa;
  #L2100f2.  v2:= v2 ^< 8;
  #L2100f6.  v1:= v1 ^~ v2 @kind int;
  #L2100f8.  return v1;
  #L2100fa.  v1:= -1I;
  #L2100fc.  return v1;
}
procedure `int` `a`(`int` v1 , `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/b/c4;.a:(III)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L21000c.  v0:= -12I;
  #L210010.  if v1 > v0 then goto L210030;
  #L210014.  v0:= -65I;
  #L210018.  if v2 > v0 then goto L210030;
  #L21001c.  if v3 <= v0 then goto L210022;
  #L210020.  goto L210030;
  #L210022.  v2:= v2 ^< 8;
  #L210026.  v1:= v1 ^~ v2 @kind int;
  #L210028.  v2:= v3 ^< 16;
  #L21002c.  v1:= v1 ^~ v2 @kind int;
  #L21002e.  return v1;
  #L210030.  v1:= -1I;
  #L210032.  return v1;
}
procedure `int` `a`(`java.lang.CharSequence` v8 @kind object) @signature `Le/e/a/b/f/b/c4;.a:(Ljava/lang/CharSequence;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L20feac.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L20feb2.  v0:= temp;
  #L20feb4.  v1:= 0I;
  #L20feb6.  v2:= 0I;
  #L20feb8.  if v2 >= v0 then goto L20fed2;
  #L20febc.  call temp:= `charAt`(v8, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L20fec2.  v3:= temp;
  #L20fec4.  v4:= 128I;
  #L20fec8.  if v3 >= v4 then goto L20fed2;
  #L20fecc.  v2:= v2 + 1;
  #L20fed0.  goto L20feb8;
  #L20fed2.  v3:= v0;
  #L20fed4.  if v2 >= v0 then goto L20ff5e;
  #L20fed8.  call temp:= `charAt`(v8, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L20fede.  v4:= temp;
  #L20fee0.  v5:= 2048I;
  #L20fee4.  if v4 >= v5 then goto L20fef8;
  #L20fee8.  v4:= v4 - 127;
  #L20feec.  v4:= v4 ^>> 31;
  #L20fef0.  v3:= v3 + v4 @kind int;
  #L20fef2.  v2:= v2 + 1;
  #L20fef6.  goto L20fed4;
  #L20fef8.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L20fefe.  v4:= temp;
  #L20ff00.  if v2 >= v4 then goto L20ff5c;
  #L20ff04.  call temp:= `charAt`(v8, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L20ff0a.  v6:= temp;
  #L20ff0c.  if v6 >= v5 then goto L20ff1c;
  #L20ff10.  v6:= v6 - 127;
  #L20ff14.  v6:= v6 ^>> 31;
  #L20ff18.  v1:= v1 + v6 @kind int;
  #L20ff1a.  goto L20ff56;
  #L20ff1c.  v1:= v1 + 2;
  #L20ff20.  v7:= 55296I;
  #L20ff26.  if v7 > v6 then goto L20ff56;
  #L20ff2a.  v7:= 57343I;
  #L20ff30.  if v6 > v7 then goto L20ff56;
  #L20ff34.  call temp:= `codePointAt`(v8, v2) @signature `Ljava/lang/Character;.codePointAt:(Ljava/lang/CharSequence;I)I` @kind static;
  #L20ff3a.  v6:= temp;
  #L20ff3c.  v7:= 65536I;
  #L20ff40.  if v6 < v7 then goto L20ff4a;
  #L20ff44.  v2:= v2 + 1;
  #L20ff48.  goto L20ff56;
  #L20ff4a.  v8:= new `e.e.a.b.f.b.f4`;
  #L20ff4e.  call `<init>`(v8, v2, v4) @signature `Le/e/a/b/f/b/f4;.<init>:(II)V` @kind direct;
  #L20ff54.  throw v8;
  #L20ff56.  v2:= v2 + 1;
  #L20ff5a.  goto L20ff00;
  #L20ff5c.  v3:= v3 + v1 @kind int;
  #L20ff5e.  if v3 < v0 then goto L20ff64;
  #L20ff62.  return v3;
  #L20ff64.  v8:= new `java.lang.IllegalArgumentException`;
  #L20ff68.  v0:= (`long`) v3 @kind i2l;
  #L20ff6a.  v2:= 4294967296L;
  #L20ff74.  v0:= v0 + v2 @kind long;
  #L20ff76.  v2:= 54I;
  #L20ff7a.  v3:= new `java.lang.StringBuilder`;
  #L20ff7e.  call `<init>`(v3, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L20ff84.  v2:= "UTF-8 length does not fit in int: " @kind object;
  #L20ff88.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20ff8e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L20ff94.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L20ff9a.  v0:= temp @kind object;
  #L20ff9c.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20ffa2.  throw v8;
}
procedure `int` `a`(`java.lang.CharSequence` v1 @kind object, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/b/c4;.a:(Ljava/lang/CharSequence;[BII)I` @AccessFlag STATIC {
    temp;
    v0;

  #L20ffb4.  v0:= `@@e.e.a.b.f.b.c4.a` @type ^`e.e.a.b.f.b.d4` @kind object;
  #L20ffb8.  call temp:= `a`(v0, v1, v2, v3, v4) @signature `Le/e/a/b/f/b/d4;.a:(Ljava/lang/CharSequence;[BII)I` @kind virtual;
  #L20ffbe.  v1:= temp;
  #L20ffc0.  return v1;
}
procedure `void` `a`(`java.lang.CharSequence` v4 @kind object, `java.nio.ByteBuffer` v5 @kind object) @signature `Le/e/a/b/f/b/c4;.a:(Ljava/lang/CharSequence;Ljava/nio/ByteBuffer;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L21017c.  v0:= `@@e.e.a.b.f.b.c4.a` @type ^`e.e.a.b.f.b.d4` @kind object;
  #L210180.  call temp:= `hasArray`(v5) @signature `Ljava/nio/ByteBuffer;.hasArray:()Z` @kind virtual;
  #L210186.  v1:= temp;
  #L210188.  if v1 == 0 then goto L2101c0;
  #L21018c.  call temp:= `arrayOffset`(v5) @signature `Ljava/nio/ByteBuffer;.arrayOffset:()I` @kind virtual;
  #L210192.  v0:= temp;
  #L210194.  call temp:= `array`(v5) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L21019a.  v1:= temp @kind object;
  #L21019c.  call temp:= `position`(v5) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L2101a2.  v2:= temp;
  #L2101a4.  v2:= v2 + v0 @kind int;
  #L2101a6.  call temp:= `remaining`(v5) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L2101ac.  v3:= temp;
  #L2101ae.  call temp:= `a`(v4, v1, v2, v3) @signature `Le/e/a/b/f/b/c4;.a:(Ljava/lang/CharSequence;[BII)I` @kind static;
  #L2101b4.  v4:= temp;
  #L2101b6.  v4:= v4 - v0 @kind int;
  #L2101b8.  call temp:= `position`(v5, v4) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L2101be.  return @kind void;
  #L2101c0.  call temp:= `isDirect`(v5) @signature `Ljava/nio/ByteBuffer;.isDirect:()Z` @kind virtual;
  #L2101c6.  v1:= temp;
  #L2101c8.  if v1 == 0 then goto L2101d4;
  #L2101cc.  call `a`(v0, v4, v5) @signature `Le/e/a/b/f/b/d4;.a:(Ljava/lang/CharSequence;Ljava/nio/ByteBuffer;)V` @kind virtual;
  #L2101d2.  return @kind void;
  #L2101d4.  call `b`(v4, v5) @signature `Le/e/a/b/f/b/d4;.b:(Ljava/lang/CharSequence;Ljava/nio/ByteBuffer;)V` @kind static;
  #L2101da.  return @kind void;
}
procedure `boolean` `a`(`byte`[] v3 @kind object) @signature `Le/e/a/b/f/b/c4;.a:([B)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L20fe68.  v0:= `@@e.e.a.b.f.b.c4.a` @type ^`e.e.a.b.f.b.d4` @kind object;
  #L20fe6c.  v1:= length @variable v3;
  #L20fe6e.  v2:= 0I;
  #L20fe70.  call temp:= `a`(v0, v3, v2, v1) @signature `Le/e/a/b/f/b/d4;.a:([BII)Z` @kind virtual;
  #L20fe76.  v3:= temp;
  #L20fe78.  return v3;
}
procedure `boolean` `a`(`byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/b/c4;.a:([BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L20fe8c.  v0:= `@@e.e.a.b.f.b.c4.a` @type ^`e.e.a.b.f.b.d4` @kind object;
  #L20fe90.  call temp:= `a`(v0, v1, v2, v3) @signature `Le/e/a/b/f/b/d4;.a:([BII)Z` @kind virtual;
  #L20fe96.  v1:= temp;
  #L20fe98.  return v1;
}
procedure `int` `b`(`int` v0 ) @signature `Le/e/a/b/f/b/c4;.b:(I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L20fff0.  call temp:= `a`(v0) @signature `Le/e/a/b/f/b/c4;.a:(I)I` @kind static;
  #L20fff6.  v0:= temp;
  #L20fff8.  return v0;
}
procedure `int` `b`(`int` v0 , `int` v1 ) @signature `Le/e/a/b/f/b/c4;.b:(II)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L210110.  call temp:= `a`(v0, v1) @signature `Le/e/a/b/f/b/c4;.a:(II)I` @kind static;
  #L210116.  v0:= temp;
  #L210118.  return v0;
}
procedure `int` `b`(`int` v0 , `int` v1 , `int` v2 ) @signature `Le/e/a/b/f/b/c4;.b:(III)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L210044.  call temp:= `a`(v0, v1, v2) @signature `Le/e/a/b/f/b/c4;.a:(III)I` @kind static;
  #L21004a.  v0:= temp;
  #L21004c.  return v0;
}
procedure `int` `b`(`byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Le/e/a/b/f/b/c4;.b:([BII)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L210060.  v0:= v4 + -1;
  #L210064.  v0:= v3[v0] @kind byte;
  #L210068.  v5:= v5 - v4 @kind int;
  #L21006a.  if v5 == 0 then goto L2100a8;
  #L21006e.  v1:= 1I;
  #L210070.  if v5 == v1 then goto L21009a;
  #L210074.  v2:= 2I;
  #L210076.  if v5 != v2 then goto L21008e;
  #L21007a.  v5:= v3[v4] @kind byte;
  #L21007e.  v4:= v4 + v1 @kind int;
  #L210080.  v3:= v3[v4] @kind byte;
  #L210084.  call temp:= `a`(v0, v5, v3) @signature `Le/e/a/b/f/b/c4;.a:(III)I` @kind static;
  #L21008a.  v3:= temp;
  #L21008c.  return v3;
  #L21008e.  v3:= new `java.lang.AssertionError`;
  #L210092.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L210098.  throw v3;
  #L21009a.  v3:= v3[v4] @kind byte;
  #L21009e.  call temp:= `a`(v0, v3) @signature `Le/e/a/b/f/b/c4;.a:(II)I` @kind static;
  #L2100a4.  v3:= temp;
  #L2100a6.  return v3;
  #L2100a8.  call temp:= `a`(v0) @signature `Le/e/a/b/f/b/c4;.a:(I)I` @kind static;
  #L2100ae.  v3:= temp;
  #L2100b0.  return v3;
}
procedure `int` `c`(`byte`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Le/e/a/b/f/b/c4;.c:([BII)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2100c4.  call temp:= `b`(v0, v1, v2) @signature `Le/e/a/b/f/b/c4;.b:([BII)I` @kind static;
  #L2100ca.  v0:= temp;
  #L2100cc.  return v0;
}
