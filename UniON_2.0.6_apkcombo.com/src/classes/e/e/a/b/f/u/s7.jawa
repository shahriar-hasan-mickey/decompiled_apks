record `e.e.a.b.f.u.s7` @kind class @AccessFlag FINAL {
}
global `e.e.a.b.f.u.t7` `@@e.e.a.b.f.u.s7.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/u/s7;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L33c7a4.  call temp:= `a`() @signature `Le/e/a/b/f/u/p7;.a:()Z` @kind static;
  #L33c7aa.  v0:= temp;
  #L33c7ac.  if v0 == 0 then goto L33c7c0;
  #L33c7b0.  call temp:= `b`() @signature `Le/e/a/b/f/u/p7;.b:()Z` @kind static;
  #L33c7b6.  v0:= temp;
  #L33c7b8.  if v0 == 0 then goto L33c7c0;
  #L33c7bc.  v0:= 1I;
  #L33c7be.  goto L33c7c2;
  #L33c7c0.  v0:= 0I;
  #L33c7c2.  if v0 == 0 then goto L33c7de;
  #L33c7c6.  call temp:= `a`() @signature `Le/e/a/b/f/u/d3;.a:()Z` @kind static;
  #L33c7cc.  v0:= temp;
  #L33c7ce.  if v0 != 0 then goto L33c7de;
  #L33c7d2.  v0:= new `e.e.a.b.f.u.y7`;
  #L33c7d6.  call `<init>`(v0) @signature `Le/e/a/b/f/u/y7;.<init>:()V` @kind direct;
  #L33c7dc.  goto L33c7e8;
  #L33c7de.  v0:= new `e.e.a.b.f.u.w7`;
  #L33c7e2.  call `<init>`(v0) @signature `Le/e/a/b/f/u/w7;.<init>:()V` @kind direct;
  #L33c7e8.  `@@e.e.a.b.f.u.s7.a` @type ^`e.e.a.b.f.u.t7` := v0 @kind object;
  #L33c7ec.  return @kind void;
}
procedure `int` `a`(`int` v0 ) @signature `Le/e/a/b/f/u/s7;.a:(I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L33c504.  call temp:= `b`(v0) @signature `Le/e/a/b/f/u/s7;.b:(I)I` @kind static;
  #L33c50a.  v0:= temp;
  #L33c50c.  return v0;
}
procedure `int` `a`(`int` v0 , `int` v1 ) @signature `Le/e/a/b/f/u/s7;.a:(II)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L33c520.  call temp:= `b`(v0, v1) @signature `Le/e/a/b/f/u/s7;.b:(II)I` @kind static;
  #L33c526.  v0:= temp;
  #L33c528.  return v0;
}
procedure `int` `a`(`int` v0 , `int` v1 , `int` v2 ) @signature `Le/e/a/b/f/u/s7;.a:(III)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L33c53c.  call temp:= `b`(v0, v1, v2) @signature `Le/e/a/b/f/u/s7;.b:(III)I` @kind static;
  #L33c542.  v0:= temp;
  #L33c544.  return v0;
}
procedure `int` `a`(`java.lang.CharSequence` v8 @kind object) @signature `Le/e/a/b/f/u/s7;.a:(Ljava/lang/CharSequence;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L33c558.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L33c55e.  v0:= temp;
  #L33c560.  v1:= 0I;
  #L33c562.  v2:= 0I;
  #L33c564.  if v2 >= v0 then goto L33c57e;
  #L33c568.  call temp:= `charAt`(v8, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L33c56e.  v3:= temp;
  #L33c570.  v4:= 128I;
  #L33c574.  if v3 >= v4 then goto L33c57e;
  #L33c578.  v2:= v2 + 1;
  #L33c57c.  goto L33c564;
  #L33c57e.  v3:= v0;
  #L33c580.  if v2 >= v0 then goto L33c60a;
  #L33c584.  call temp:= `charAt`(v8, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L33c58a.  v4:= temp;
  #L33c58c.  v5:= 2048I;
  #L33c590.  if v4 >= v5 then goto L33c5a4;
  #L33c594.  v4:= v4 - 127;
  #L33c598.  v4:= v4 ^>> 31;
  #L33c59c.  v3:= v3 + v4 @kind int;
  #L33c59e.  v2:= v2 + 1;
  #L33c5a2.  goto L33c580;
  #L33c5a4.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L33c5aa.  v4:= temp;
  #L33c5ac.  if v2 >= v4 then goto L33c608;
  #L33c5b0.  call temp:= `charAt`(v8, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L33c5b6.  v6:= temp;
  #L33c5b8.  if v6 >= v5 then goto L33c5c8;
  #L33c5bc.  v6:= v6 - 127;
  #L33c5c0.  v6:= v6 ^>> 31;
  #L33c5c4.  v1:= v1 + v6 @kind int;
  #L33c5c6.  goto L33c602;
  #L33c5c8.  v1:= v1 + 2;
  #L33c5cc.  v7:= 55296I;
  #L33c5d2.  if v7 > v6 then goto L33c602;
  #L33c5d6.  v7:= 57343I;
  #L33c5dc.  if v6 > v7 then goto L33c602;
  #L33c5e0.  call temp:= `codePointAt`(v8, v2) @signature `Ljava/lang/Character;.codePointAt:(Ljava/lang/CharSequence;I)I` @kind static;
  #L33c5e6.  v6:= temp;
  #L33c5e8.  v7:= 65536I;
  #L33c5ec.  if v6 < v7 then goto L33c5f6;
  #L33c5f0.  v2:= v2 + 1;
  #L33c5f4.  goto L33c602;
  #L33c5f6.  v8:= new `e.e.a.b.f.u.v7`;
  #L33c5fa.  call `<init>`(v8, v2, v4) @signature `Le/e/a/b/f/u/v7;.<init>:(II)V` @kind direct;
  #L33c600.  throw v8;
  #L33c602.  v2:= v2 + 1;
  #L33c606.  goto L33c5ac;
  #L33c608.  v3:= v3 + v1 @kind int;
  #L33c60a.  if v3 < v0 then goto L33c610;
  #L33c60e.  return v3;
  #L33c610.  v8:= new `java.lang.IllegalArgumentException`;
  #L33c614.  v0:= (`long`) v3 @kind i2l;
  #L33c616.  v2:= 4294967296L;
  #L33c620.  v0:= v0 + v2 @kind long;
  #L33c622.  v2:= 54I;
  #L33c626.  v3:= new `java.lang.StringBuilder`;
  #L33c62a.  call `<init>`(v3, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L33c630.  v2:= "UTF-8 length does not fit in int: " @kind object;
  #L33c634.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L33c63a.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L33c640.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L33c646.  v0:= temp @kind object;
  #L33c648.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33c64e.  throw v8;
}
procedure `int` `a`(`java.lang.CharSequence` v1 @kind object, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/u/s7;.a:(Ljava/lang/CharSequence;[BII)I` @AccessFlag STATIC {
    temp;
    v0;

  #L33c660.  v0:= `@@e.e.a.b.f.u.s7.a` @type ^`e.e.a.b.f.u.t7` @kind object;
  #L33c664.  call temp:= `a`(v0, v1, v2, v3, v4) @signature `Le/e/a/b/f/u/t7;.a:(Ljava/lang/CharSequence;[BII)I` @kind virtual;
  #L33c66a.  v1:= temp;
  #L33c66c.  return v1;
}
procedure `boolean` `a`(`byte`[] v3 @kind object) @signature `Le/e/a/b/f/u/s7;.a:([B)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L33c4c0.  v0:= `@@e.e.a.b.f.u.s7.a` @type ^`e.e.a.b.f.u.t7` @kind object;
  #L33c4c4.  v1:= length @variable v3;
  #L33c4c6.  v2:= 0I;
  #L33c4c8.  call temp:= `a`(v0, v3, v2, v1) @signature `Le/e/a/b/f/u/t7;.a:([BII)Z` @kind virtual;
  #L33c4ce.  v3:= temp;
  #L33c4d0.  return v3;
}
procedure `boolean` `a`(`byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/u/s7;.a:([BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L33c4e4.  v0:= `@@e.e.a.b.f.u.s7.a` @type ^`e.e.a.b.f.u.t7` @kind object;
  #L33c4e8.  call temp:= `a`(v0, v1, v2, v3) @signature `Le/e/a/b/f/u/t7;.a:([BII)Z` @kind virtual;
  #L33c4ee.  v1:= temp;
  #L33c4f0.  return v1;
}
procedure `int` `b`(`int` v1 ) @signature `Le/e/a/b/f/u/s7;.b:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L33c680.  v0:= -12I;
  #L33c684.  if v1 <= v0 then goto L33c68a;
  #L33c688.  v1:= -1I;
  #L33c68a.  return v1;
}
procedure `int` `b`(`int` v1 , `int` v2 ) @signature `Le/e/a/b/f/u/s7;.b:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L33c69c.  v0:= -12I;
  #L33c6a0.  if v1 > v0 then goto L33c6b6;
  #L33c6a4.  v0:= -65I;
  #L33c6a8.  if v2 <= v0 then goto L33c6ae;
  #L33c6ac.  goto L33c6b6;
  #L33c6ae.  v2:= v2 ^< 8;
  #L33c6b2.  v1:= v1 ^~ v2 @kind int;
  #L33c6b4.  return v1;
  #L33c6b6.  v1:= -1I;
  #L33c6b8.  return v1;
}
procedure `int` `b`(`int` v1 , `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/u/s7;.b:(III)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L33c6cc.  v0:= -12I;
  #L33c6d0.  if v1 > v0 then goto L33c6f0;
  #L33c6d4.  v0:= -65I;
  #L33c6d8.  if v2 > v0 then goto L33c6f0;
  #L33c6dc.  if v3 <= v0 then goto L33c6e2;
  #L33c6e0.  goto L33c6f0;
  #L33c6e2.  v2:= v2 ^< 8;
  #L33c6e6.  v1:= v1 ^~ v2 @kind int;
  #L33c6e8.  v2:= v3 ^< 16;
  #L33c6ec.  v1:= v1 ^~ v2 @kind int;
  #L33c6ee.  return v1;
  #L33c6f0.  v1:= -1I;
  #L33c6f2.  return v1;
}
procedure `java.lang.String` `b`(`byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/u/s7;.b:([BII)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;

  #L33c784.  v0:= `@@e.e.a.b.f.u.s7.a` @type ^`e.e.a.b.f.u.t7` @kind object;
  #L33c788.  call temp:= `b`(v0, v1, v2, v3) @signature `Le/e/a/b/f/u/t7;.b:([BII)Ljava/lang/String;` @kind virtual;
  #L33c78e.  v1:= temp @kind object;
  #L33c790.  return v1 @kind object;
}
procedure `int` `c`(`byte`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Le/e/a/b/f/u/s7;.c:([BII)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L33c704.  call temp:= `d`(v0, v1, v2) @signature `Le/e/a/b/f/u/s7;.d:([BII)I` @kind static;
  #L33c70a.  v0:= temp;
  #L33c70c.  return v0;
}
procedure `int` `d`(`byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Le/e/a/b/f/u/s7;.d:([BII)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L33c720.  v0:= v4 + -1;
  #L33c724.  v0:= v3[v0] @kind byte;
  #L33c728.  v5:= v5 - v4 @kind int;
  #L33c72a.  if v5 == 0 then goto L33c768;
  #L33c72e.  v1:= 1I;
  #L33c730.  if v5 == v1 then goto L33c75a;
  #L33c734.  v2:= 2I;
  #L33c736.  if v5 != v2 then goto L33c74e;
  #L33c73a.  v5:= v3[v4] @kind byte;
  #L33c73e.  v4:= v4 + v1 @kind int;
  #L33c740.  v3:= v3[v4] @kind byte;
  #L33c744.  call temp:= `b`(v0, v5, v3) @signature `Le/e/a/b/f/u/s7;.b:(III)I` @kind static;
  #L33c74a.  v3:= temp;
  #L33c74c.  return v3;
  #L33c74e.  v3:= new `java.lang.AssertionError`;
  #L33c752.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L33c758.  throw v3;
  #L33c75a.  v3:= v3[v4] @kind byte;
  #L33c75e.  call temp:= `b`(v0, v3) @signature `Le/e/a/b/f/u/s7;.b:(II)I` @kind static;
  #L33c764.  v3:= temp;
  #L33c766.  return v3;
  #L33c768.  call temp:= `b`(v0) @signature `Le/e/a/b/f/u/s7;.b:(I)I` @kind static;
  #L33c76e.  v3:= temp;
  #L33c770.  return v3;
}
