record `e.e.a.b.f.k.e1` @kind class @AccessFlag PUBLIC_ABSTRACT extends `e.e.a.b.f.k.y0` @kind class, `java.util.List` @kind interface, `java.util.RandomAccess` @kind interface {
}
global `e.e.a.b.f.k.z1` `@@e.e.a.b.f.k.e1.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/k/e1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2468a4.  v0:= new `e.e.a.b.f.k.b1`;
  #L2468a8.  v1:= `@@e.e.a.b.f.k.s1.f` @type ^`e.e.a.b.f.k.e1` @kind object;
  #L2468ac.  v2:= 0I;
  #L2468ae.  call `<init>`(v0, v1, v2) @signature `Le/e/a/b/f/k/b1;.<init>:(Le/e/a/b/f/k/e1;I)V` @kind direct;
  #L2468b4.  `@@e.e.a.b.f.k.e1.c` @type ^`e.e.a.b.f.k.z1` := v0 @kind object;
  #L2468b8.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.k.e1` v0 @kind this) @signature `Le/e/a/b/f/k/e1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2468cc.  call `<init>`(v0) @signature `Le/e/a/b/f/k/y0;.<init>:()V` @kind direct;
  #L2468d2.  return @kind void;
}
procedure `e.e.a.b.f.k.e1` `a`(`java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/k/e1;.a:(Ljava/lang/Object;)Le/e/a/b/f/k/e1;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L246610.  v0:= 1I;
  #L246612.  v1:= new `java.lang.Object`[v0];
  #L246616.  v2:= 0I;
  #L246618.  v1[v2]:= v3 @kind object;
  #L24661c.  call temp:= `a`(v1, v0) @signature `Le/e/a/b/f/k/r1;.a:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L246622.  call temp:= `b`(v1, v0) @signature `Le/e/a/b/f/k/e1;.b:([Ljava/lang/Object;I)Le/e/a/b/f/k/e1;` @kind static;
  #L246628.  v3:= temp @kind object;
  #L24662a.  return v3 @kind object;
}
procedure `e.e.a.b.f.k.e1` `a`(`java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/k/e1;.a:(Ljava/lang/Object;Ljava/lang/Object;)Le/e/a/b/f/k/e1;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L24663c.  v0:= 2I;
  #L24663e.  v1:= new `java.lang.Object`[v0];
  #L246642.  v2:= 0I;
  #L246644.  v1[v2]:= v3 @kind object;
  #L246648.  v3:= 1I;
  #L24664a.  v1[v3]:= v4 @kind object;
  #L24664e.  call temp:= `a`(v1, v0) @signature `Le/e/a/b/f/k/r1;.a:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L246654.  call temp:= `b`(v1, v0) @signature `Le/e/a/b/f/k/e1;.b:([Ljava/lang/Object;I)Le/e/a/b/f/k/e1;` @kind static;
  #L24665a.  v3:= temp @kind object;
  #L24665c.  return v3 @kind object;
}
procedure `e.e.a.b.f.k.e1` `b`(`java.lang.Object`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/k/e1;.b:([Ljava/lang/Object;I)Le/e/a/b/f/k/e1;` @AccessFlag STATIC {
    temp;
    v0;

  #L246670.  if v2 != 0 then goto L24667a;
  #L246674.  v1:= `@@e.e.a.b.f.k.s1.f` @type ^`e.e.a.b.f.k.e1` @kind object;
  #L246678.  return v1 @kind object;
  #L24667a.  v0:= new `e.e.a.b.f.k.s1`;
  #L24667e.  call `<init>`(v0, v1, v2) @signature `Le/e/a/b/f/k/s1;.<init>:([Ljava/lang/Object;I)V` @kind direct;
  #L246684.  return v0 @kind object;
}
procedure `int` `a`(`e.e.a.b.f.k.e1` v4 @kind this, `java.lang.Object`[] v5 @kind object, `int` v6 ) @signature `Le/e/a/b/f/k/e1;.a:([Ljava/lang/Object;I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2467c4.  call temp:= `size`(v4) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2467ca.  v0:= temp;
  #L2467cc.  v1:= 0I;
  #L2467ce.  if v1 >= v0 then goto L2467e8;
  #L2467d2.  v2:= v6 + v1 @kind int;
  #L2467d6.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2467dc.  v3:= temp @kind object;
  #L2467de.  v5[v2]:= v3 @kind object;
  #L2467e2.  v1:= v1 + 1;
  #L2467e6.  goto L2467ce;
  #L2467e8.  v6:= v6 + v0 @kind int;
  #L2467ea.  return v6;
}
procedure `e.e.a.b.f.k.e1` `a`(`e.e.a.b.f.k.e1` v1 @kind this, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/k/e1;.a:(II)Le/e/a/b/f/k/e1;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2465cc.  call temp:= `size`(v1) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2465d2.  v0:= temp;
  #L2465d4.  call `a`(v2, v3, v0) @signature `Le/e/a/b/f/k/r;.a:(III)V` @kind static;
  #L2465da.  v3:= v3 - v2 @kind int;
  #L2465dc.  call temp:= `size`(v1) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2465e2.  v0:= temp;
  #L2465e4.  if v3 != v0 then goto L2465ea;
  #L2465e8.  return v1 @kind object;
  #L2465ea.  if v3 != 0 then goto L2465f4;
  #L2465ee.  v2:= `@@e.e.a.b.f.k.s1.f` @type ^`e.e.a.b.f.k.e1` @kind object;
  #L2465f2.  return v2 @kind object;
  #L2465f4.  v0:= new `e.e.a.b.f.k.d1`;
  #L2465f8.  call `<init>`(v0, v1, v2, v3) @signature `Le/e/a/b/f/k/d1;.<init>:(Le/e/a/b/f/k/e1;II)V` @kind direct;
  #L2465fe.  return v0 @kind object;
}
procedure `void` `add`(`e.e.a.b.f.k.e1` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/k/e1;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2468e4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2468e8.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2468ee.  throw v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.k.e1` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/k/e1;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2464c0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2464c4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2464ca.  throw v1;
}
procedure `boolean` `contains`(`e.e.a.b.f.k.e1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/k/e1;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2464dc.  call temp:= `indexOf`(v0, v1) @signature `Le/e/a/b/f/k/e1;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L2464e2.  v1:= temp;
  #L2464e4.  if v1 < 0 then goto L2464ec;
  #L2464e8.  v1:= 1I;
  #L2464ea.  return v1;
  #L2464ec.  v1:= 0I;
  #L2464ee.  return v1;
}
procedure `boolean` `equals`(`e.e.a.b.f.k.e1` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/k/e1;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L246500.  v0:= 1I;
  #L246502.  v1:= 0I;
  #L246504.  if v7 != v6 then goto L24650c;
  #L246508.  v1:= 1I;
  #L24650a.  goto L2465b8;
  #L24650c.  v2:= instanceof @variable v7 @type ^`java.util.List` @kind boolean;
  #L246510.  if v2 != 0 then goto L246516;
  #L246514.  goto L2465b8;
  #L246516.  v7:= (`java.util.List`) v7 @kind object;
  #L24651a.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L246520.  v2:= temp;
  #L246522.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L246528.  v3:= temp;
  #L24652a.  if v2 == v3 then goto L246530;
  #L24652e.  goto L2465b8;
  #L246530.  v3:= instanceof @variable v7 @type ^`java.util.RandomAccess` @kind boolean;
  #L246534.  if v3 == 0 then goto L246562;
  #L246538.  v3:= 0I;
  #L24653a.  if v3 >= v2 then goto L246508;
  #L24653e.  call temp:= `get`(v6, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L246544.  v4:= temp @kind object;
  #L246546.  call temp:= `get`(v7, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L24654c.  v5:= temp @kind object;
  #L24654e.  call temp:= `a`(v4, v5) @signature `Le/e/a/b/f/k/n;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L246554.  v4:= temp;
  #L246556.  if v4 != 0 then goto L24655c;
  #L24655a.  goto L2465b8;
  #L24655c.  v3:= v3 + 1;
  #L246560.  goto L24653a;
  #L246562.  call temp:= `iterator`(v6) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L246568.  v2:= temp @kind object;
  #L24656a.  call temp:= `iterator`(v7) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L246570.  v7:= temp @kind object;
  #L246572.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L246578.  v3:= temp;
  #L24657a.  if v3 == 0 then goto L2465aa;
  #L24657e.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L246584.  v3:= temp;
  #L246586.  if v3 != 0 then goto L24658c;
  #L24658a.  goto L2465b8;
  #L24658c.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L246592.  v3:= temp @kind object;
  #L246594.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L24659a.  v4:= temp @kind object;
  #L24659c.  call temp:= `a`(v3, v4) @signature `Le/e/a/b/f/k/n;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2465a2.  v3:= temp;
  #L2465a4.  if v3 != 0 then goto L246572;
  #L2465a8.  goto L2465b8;
  #L2465aa.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2465b0.  v7:= temp;
  #L2465b2.  if v7 != 0 then goto L2465b8;
  #L2465b6.  goto L246508;
  #L2465b8.  return v1;
}
procedure `e.e.a.b.f.k.z1` `h`(`e.e.a.b.f.k.e1` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/k/e1;.h:(I)Le/e/a/b/f/k/z1;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2466b4.  call temp:= `size`(v2) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2466ba.  v0:= temp;
  #L2466bc.  v1:= "index" @kind object;
  #L2466c0.  call temp:= `b`(v3, v0, v1) @signature `Le/e/a/b/f/k/r;.b:(IILjava/lang/String;)I` @kind static;
  #L2466c6.  call temp:= `isEmpty`(v2) @signature `Ljava/util/AbstractCollection;.isEmpty:()Z` @kind virtual;
  #L2466cc.  v0:= temp;
  #L2466ce.  if v0 == 0 then goto L2466d8;
  #L2466d2.  v3:= `@@e.e.a.b.f.k.e1.c` @type ^`e.e.a.b.f.k.z1` @kind object;
  #L2466d6.  return v3 @kind object;
  #L2466d8.  v0:= new `e.e.a.b.f.k.b1`;
  #L2466dc.  call `<init>`(v0, v2, v3) @signature `Le/e/a/b/f/k/b1;.<init>:(Le/e/a/b/f/k/e1;I)V` @kind direct;
  #L2466e2.  return v0 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.k.e1` v4 @kind this) @signature `Le/e/a/b/f/k/e1;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2466f4.  call temp:= `size`(v4) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2466fa.  v0:= temp;
  #L2466fc.  v1:= 1I;
  #L2466fe.  v2:= 0I;
  #L246700.  if v2 >= v0 then goto L246720;
  #L246704.  v1:= v1 * 31;
  #L246708.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L24670e.  v3:= temp @kind object;
  #L246710.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L246716.  v3:= temp;
  #L246718.  v1:= v1 + v3 @kind int;
  #L24671a.  v2:= v2 + 1;
  #L24671e.  goto L246700;
  #L246720.  return v1;
}
procedure `int` `indexOf`(`e.e.a.b.f.k.e1` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/k/e1;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L246734.  v0:= -1I;
  #L246736.  if v5 != 0 then goto L24673c;
  #L24673a.  return v0;
  #L24673c.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L246742.  v1:= temp;
  #L246744.  v2:= 0I;
  #L246746.  if v2 >= v1 then goto L246768;
  #L24674a.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L246750.  v3:= temp @kind object;
  #L246752.  call temp:= `equals`(v5, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L246758.  v3:= temp;
  #L24675a.  if v3 == 0 then goto L246762;
  #L24675e.  v0:= v2;
  #L246760.  goto L246768;
  #L246762.  v2:= v2 + 1;
  #L246766.  goto L246746;
  #L246768.  return v0;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.k.e1` v1 @kind this) @signature `Le/e/a/b/f/k/e1;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L246834.  v0:= 0I;
  #L246836.  call temp:= `h`(v1, v0) @signature `Le/e/a/b/f/k/e1;.h:(I)Le/e/a/b/f/k/z1;` @kind virtual;
  #L24683c.  v0:= temp @kind object;
  #L24683e.  return v0 @kind object;
}
procedure `int` `lastIndexOf`(`e.e.a.b.f.k.e1` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/k/e1;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L24677c.  v0:= -1I;
  #L24677e.  if v4 != 0 then goto L246784;
  #L246782.  return v0;
  #L246784.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L24678a.  v1:= temp;
  #L24678c.  v1:= v1 + v0 @kind int;
  #L24678e.  if v1 < 0 then goto L2467b0;
  #L246792.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L246798.  v2:= temp @kind object;
  #L24679a.  call temp:= `equals`(v4, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2467a0.  v2:= temp;
  #L2467a2.  if v2 == 0 then goto L2467aa;
  #L2467a6.  v0:= v1;
  #L2467a8.  goto L2467b0;
  #L2467aa.  v1:= v1 + -1;
  #L2467ae.  goto L24678e;
  #L2467b0.  return v0;
}
procedure `java.util.ListIterator` `listIterator`(`e.e.a.b.f.k.e1` v1 @kind this) @signature `Le/e/a/b/f/k/e1;.listIterator:()Ljava/util/ListIterator;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L24686c.  v0:= 0I;
  #L24686e.  call temp:= `h`(v1, v0) @signature `Le/e/a/b/f/k/e1;.h:(I)Le/e/a/b/f/k/z1;` @kind virtual;
  #L246874.  v0:= temp @kind object;
  #L246876.  return v0 @kind object;
}
procedure `java.util.ListIterator` `listIterator`(`e.e.a.b.f.k.e1` v0 @kind this, `int` v1 ) @signature `Le/e/a/b/f/k/e1;.listIterator:(I)Ljava/util/ListIterator;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L246888.  call temp:= `h`(v0, v1) @signature `Le/e/a/b/f/k/e1;.h:(I)Le/e/a/b/f/k/z1;` @kind virtual;
  #L24688e.  v1:= temp @kind object;
  #L246890.  return v1 @kind object;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.k.e1` v0 @kind this, `int` v1 ) @signature `Le/e/a/b/f/k/e1;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2467fc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L246800.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L246806.  throw v1;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.k.e1` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/k/e1;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L246818.  v1:= new `java.lang.UnsupportedOperationException`;
  #L24681c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L246822.  throw v1;
}
procedure `java.util.List` `subList`(`e.e.a.b.f.k.e1` v0 @kind this, `int` v1 , `int` v2 ) @signature `Le/e/a/b/f/k/e1;.subList:(II)Ljava/util/List;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L246850.  call temp:= `a`(v0, v1, v2) @signature `Le/e/a/b/f/k/e1;.a:(II)Le/e/a/b/f/k/e1;` @kind virtual;
  #L246856.  v1:= temp @kind object;
  #L246858.  return v1 @kind object;
}
procedure `e.e.a.b.f.k.y1` `zza`(`e.e.a.b.f.k.e1` v1 @kind this) @signature `Le/e/a/b/f/k/e1;.zza:()Le/e/a/b/f/k/y1;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L246698.  v0:= 0I;
  #L24669a.  call temp:= `h`(v1, v0) @signature `Le/e/a/b/f/k/e1;.h:(I)Le/e/a/b/f/k/z1;` @kind virtual;
  #L2466a0.  v0:= temp @kind object;
  #L2466a2.  return v0 @kind object;
}
