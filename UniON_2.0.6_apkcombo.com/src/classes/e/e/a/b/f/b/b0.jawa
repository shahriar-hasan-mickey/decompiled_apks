record `e.e.a.b.f.b.b0` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `int` `e.e.a.b.f.b.b0.b` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.b.b0.c` @AccessFlag PRIVATE_FINAL;
  `e.e.a.b.f.b.a0` `e.e.a.b.f.b.b0.d` @AccessFlag PRIVATE_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.b.b0` v0 @kind this, `e.e.a.b.f.b.a0` v1 @kind object) @signature `Le/e/a/b/f/b/b0;.<init>:(Le/e/a/b/f/b/a0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1fa838.  v0.`e.e.a.b.f.b.b0.d` @type ^`e.e.a.b.f.b.a0` := v1 @kind object;
  #L1fa83c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1fa842.  v1:= 0I;
  #L1fa844.  v0.`e.e.a.b.f.b.b0.b` @type ^`int` := v1;
  #L1fa848.  v1:= v0.`e.e.a.b.f.b.b0.d` @type ^`e.e.a.b.f.b.a0` @kind object;
  #L1fa84c.  call temp:= `size`(v1) @signature `Le/e/a/b/f/b/a0;.size:()I` @kind virtual;
  #L1fa852.  v1:= temp;
  #L1fa854.  v0.`e.e.a.b.f.b.b0.c` @type ^`int` := v1;
  #L1fa858.  return @kind void;
}
procedure `byte` `a`(`e.e.a.b.f.b.b0` v3 @kind this) @signature `Le/e/a/b/f/b/b0;.a:()B` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1fa7c4.  v0:= v3.`e.e.a.b.f.b.b0.d` @type ^`e.e.a.b.f.b.a0` @kind object;
  #L1fa7c8.  v1:= v3.`e.e.a.b.f.b.b0.b` @type ^`int`;
  #L1fa7cc.  v2:= v1 + 1;
  #L1fa7d0.  v3.`e.e.a.b.f.b.b0.b` @type ^`int` := v2;
  #L1fa7d4.  call temp:= `h`(v0, v1) @signature `Le/e/a/b/f/b/a0;.h:(I)B` @kind virtual;
  #L1fa7da.  v0:= temp;
  #L1fa7dc.  return v0;
  #L1fa7de.  v0:= Exception @type ^`java.lang.IndexOutOfBoundsException` @kind object;
  #L1fa7e0.  v1:= new `java.util.NoSuchElementException`;
  #L1fa7e4.  call temp:= `getMessage`(v0) @signature `Ljava/lang/IndexOutOfBoundsException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1fa7ea.  v0:= temp @kind object;
  #L1fa7ec.  call `<init>`(v1, v0) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fa7f2.  throw v1;
  catch `java.lang.IndexOutOfBoundsException` @[L1fa7c4..L1fa7dc] goto L1fa7de;
}
procedure `boolean` `hasNext`(`e.e.a.b.f.b.b0` v2 @kind this) @signature `Le/e/a/b/f/b/b0;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1fa7a0.  v0:= v2.`e.e.a.b.f.b.b0.b` @type ^`int`;
  #L1fa7a4.  v1:= v2.`e.e.a.b.f.b.b0.c` @type ^`int`;
  #L1fa7a8.  if v0 >= v1 then goto L1fa7b0;
  #L1fa7ac.  v0:= 1I;
  #L1fa7ae.  return v0;
  #L1fa7b0.  v0:= 0I;
  #L1fa7b2.  return v0;
}
procedure `java.lang.Object` `next`(`e.e.a.b.f.b.b0` v1 @kind this) @signature `Le/e/a/b/f/b/b0;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L1fa814.  call temp:= `a`(v1) @signature `Le/e/a/b/f/b/b0;.a:()B` @kind direct;
  #L1fa81a.  v0:= temp;
  #L1fa81c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L1fa822.  v0:= temp @kind object;
  #L1fa824.  return v0 @kind object;
}
procedure `void` `remove`(`e.e.a.b.f.b.b0` v1 @kind this) @signature `Le/e/a/b/f/b/b0;.remove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1fa86c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1fa870.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L1fa876.  throw v0;
}
