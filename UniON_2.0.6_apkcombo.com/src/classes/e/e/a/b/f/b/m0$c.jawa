record `e.e.a.b.f.b.m0$c` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.IOException` @kind class {
}
procedure `void` `<init>`(`e.e.a.b.f.b.m0$c` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Le/e/a/b/f/b/m0$c;.<init>:(Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1fba00.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1fba06.  v3:= temp @kind object;
  #L1fba08.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1fba0e.  v0:= temp;
  #L1fba10.  v1:= "CodedOutputStream was writing to a flat byte array and ran out of space.: " @kind object;
  #L1fba14.  if v0 == 0 then goto L1fba22;
  #L1fba18.  call temp:= `concat`(v1, v3) @signature `Ljava/lang/String;.concat:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L1fba1e.  v3:= temp @kind object;
  #L1fba20.  goto L1fba2c;
  #L1fba22.  v3:= new `java.lang.String`;
  #L1fba26.  call `<init>`(v3, v1) @signature `Ljava/lang/String;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fba2c.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fba32.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.b.m0$c` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Le/e/a/b/f/b/m0$c;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1fba44.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1fba4a.  v3:= temp @kind object;
  #L1fba4c.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1fba52.  v0:= temp;
  #L1fba54.  v1:= "CodedOutputStream was writing to a flat byte array and ran out of space.: " @kind object;
  #L1fba58.  if v0 == 0 then goto L1fba66;
  #L1fba5c.  call temp:= `concat`(v1, v3) @signature `Ljava/lang/String;.concat:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L1fba62.  v3:= temp @kind object;
  #L1fba64.  goto L1fba70;
  #L1fba66.  v3:= new `java.lang.String`;
  #L1fba6a.  call `<init>`(v3, v1) @signature `Ljava/lang/String;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fba70.  call `<init>`(v2, v3, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L1fba76.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.b.m0$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Le/e/a/b/f/b/m0$c;.<init>:(Ljava/lang/Throwable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1fba88.  v0:= "CodedOutputStream was writing to a flat byte array and ran out of space." @kind object;
  #L1fba8c.  call `<init>`(v1, v0, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L1fba92.  return @kind void;
}
