record `e.e.a.b.f.j.t3` @kind class @AccessFlag FINAL extends `e.e.a.b.f.j.l2` @kind class, `e.e.a.b.f.j.y3` @kind interface, `e.e.a.b.f.j.l5` @kind interface, `java.util.RandomAccess` @kind interface {
  `int`[] `e.e.a.b.f.j.t3.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.j.t3.d` @AccessFlag PRIVATE;
}
global `e.e.a.b.f.j.t3` `@@e.e.a.b.f.j.t3.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/j/t3;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L226f64.  v0:= new `e.e.a.b.f.j.t3`;
  #L226f68.  v1:= 0I;
  #L226f6a.  v2:= new `int`[v1];
  #L226f6e.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/j/t3;.<init>:([II)V` @kind direct;
  #L226f74.  `@@e.e.a.b.f.j.t3.e` @type ^`e.e.a.b.f.j.t3` := v0 @kind object;
  #L226f78.  call `s`(v0) @signature `Le/e/a/b/f/j/l2;.s:()V` @kind virtual;
  #L226f7e.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.j.t3` v2 @kind this) @signature `Le/e/a/b/f/j/t3;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L226f90.  v0:= 10I;
  #L226f94.  v0:= new `int`[v0];
  #L226f98.  v1:= 0I;
  #L226f9a.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/j/t3;.<init>:([II)V` @kind direct;
  #L226fa0.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.j.t3` v0 @kind this, `int`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/j/t3;.<init>:([II)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L226fb4.  call `<init>`(v0) @signature `Le/e/a/b/f/j/l2;.<init>:()V` @kind direct;
  #L226fba.  v0.`e.e.a.b.f.j.t3.c` @type ^`int`[] := v1 @kind object;
  #L226fbe.  v0.`e.e.a.b.f.j.t3.d` @type ^`int` := v2;
  #L226fc2.  return @kind void;
}
procedure `e.e.a.b.f.j.t3` `c`() @signature `Le/e/a/b/f/j/t3;.c:()Le/e/a/b/f/j/t3;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L226d40.  v0:= `@@e.e.a.b.f.j.t3.e` @type ^`e.e.a.b.f.j.t3` @kind object;
  #L226d44.  return v0 @kind object;
}
procedure `void` `h`(`e.e.a.b.f.j.t3` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/j/t3;.h:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2270d4.  if v2 < 0 then goto L2270e2;
  #L2270d8.  v0:= v1.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L2270dc.  if v2 >= v0 then goto L2270e2;
  #L2270e0.  return @kind void;
  #L2270e2.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L2270e6.  call temp:= `i`(v1, v2) @signature `Le/e/a/b/f/j/t3;.i:(I)Ljava/lang/String;` @kind direct;
  #L2270ec.  v2:= temp @kind object;
  #L2270ee.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2270f4.  throw v0;
}
procedure `java.lang.String` `i`(`e.e.a.b.f.j.t3` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/j/t3;.i:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L226f18.  v0:= v3.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226f1c.  v1:= new `java.lang.StringBuilder`;
  #L226f20.  v2:= 35I;
  #L226f24.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L226f2a.  v2:= "Index:" @kind object;
  #L226f2e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L226f34.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L226f3a.  v4:= ", Size:" @kind object;
  #L226f3e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L226f44.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L226f4a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L226f50.  v4:= temp @kind object;
  #L226f52.  return v4 @kind object;
}
procedure `int` `a`(`e.e.a.b.f.j.t3` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/j/t3;.a:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L226e30.  call `h`(v1, v2) @signature `Le/e/a/b/f/j/t3;.h:(I)V` @kind direct;
  #L226e36.  v0:= v1.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L226e3a.  v2:= v0[v2];
  #L226e3e.  return v2;
}
procedure `void` `add`(`e.e.a.b.f.j.t3` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/j/t3;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L226fd4.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L226fd8.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L226fde.  v6:= temp;
  #L226fe0.  call `d`(v4) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L226fe6.  if v5 < 0 then goto L22705c;
  #L226fea.  v0:= v4.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226fee.  if v5 > v0 then goto L22705c;
  #L226ff2.  v1:= v4.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L226ff6.  v2:= length @variable v1;
  #L226ff8.  if v0 >= v2 then goto L22700a;
  #L226ffc.  v2:= v5 + 1;
  #L227000.  v0:= v0 - v5 @kind int;
  #L227002.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L227008.  goto L22703a;
  #L22700a.  v0:= v0 * 3;
  #L22700e.  v0:= v0 / 2;
  #L227012.  v0:= v0 + 1;
  #L227016.  v0:= new `int`[v0];
  #L22701a.  v2:= 0I;
  #L22701c.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L227022.  v1:= v4.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L227026.  v2:= v5 + 1;
  #L22702a.  v3:= v4.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L22702e.  v3:= v3 - v5 @kind int;
  #L227030.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L227036.  v4.`e.e.a.b.f.j.t3.c` @type ^`int`[] := v0 @kind object;
  #L22703a.  v0:= v4.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L22703e.  v0[v5]:= v6;
  #L227042.  v5:= v4.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L227046.  v5:= v5 + 1;
  #L22704a.  v4.`e.e.a.b.f.j.t3.d` @type ^`int` := v5;
  #L22704e.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L227052.  v5:= v5 + 1;
  #L227056.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L22705a.  return @kind void;
  #L22705c.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L227060.  call temp:= `i`(v4, v5) @signature `Le/e/a/b/f/j/t3;.i:(I)Ljava/lang/String;` @kind direct;
  #L227066.  v5:= temp @kind object;
  #L227068.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22706e.  throw v6;
}
procedure `boolean` `add`(`e.e.a.b.f.j.t3` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/j/t3;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L226b3c.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L226b40.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L226b46.  v6:= temp;
  #L226b48.  call `d`(v5) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L226b4e.  v0:= v5.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226b52.  v1:= v5.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L226b56.  v2:= length @variable v1;
  #L226b58.  v3:= 1I;
  #L226b5a.  if v0 != v2 then goto L226b78;
  #L226b5e.  v2:= v0 * 3;
  #L226b62.  v2:= v2 / 2;
  #L226b66.  v2:= v2 + v3 @kind int;
  #L226b68.  v2:= new `int`[v2];
  #L226b6c.  v4:= 0I;
  #L226b6e.  call `arraycopy`(v1, v4, v2, v4, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L226b74.  v5.`e.e.a.b.f.j.t3.c` @type ^`int`[] := v2 @kind object;
  #L226b78.  v0:= v5.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L226b7c.  v1:= v5.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226b80.  v2:= v1 + 1;
  #L226b84.  v5.`e.e.a.b.f.j.t3.d` @type ^`int` := v2;
  #L226b88.  v0[v1]:= v6;
  #L226b8c.  return v3;
}
procedure `boolean` `addAll`(`e.e.a.b.f.j.t3` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/j/t3;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L226ba0.  call `d`(v5) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L226ba6.  call temp:= `a`(v6) @signature `Le/e/a/b/f/j/s3;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L226bac.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.j.t3` @kind boolean;
  #L226bb0.  if v0 != 0 then goto L226bbe;
  #L226bb4.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/j/l2;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L226bba.  v6:= temp;
  #L226bbc.  return v6;
  #L226bbe.  v6:= (`e.e.a.b.f.j.t3`) v6 @kind object;
  #L226bc2.  v0:= v6.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226bc6.  v1:= 0I;
  #L226bc8.  if v0 != 0 then goto L226bce;
  #L226bcc.  return v1;
  #L226bce.  v2:= 2147483647I;
  #L226bd4.  v3:= v5.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226bd8.  v2:= v2 - v3 @kind int;
  #L226bda.  if v2 < v0 then goto L226c1e;
  #L226bde.  v3:= v3 + v0 @kind int;
  #L226be0.  v0:= v5.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L226be4.  v2:= length @variable v0;
  #L226be6.  if v3 <= v2 then goto L226bf6;
  #L226bea.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L226bf0.  v0:= temp @kind object;
  #L226bf2.  v5.`e.e.a.b.f.j.t3.c` @type ^`int`[] := v0 @kind object;
  #L226bf6.  v0:= v6.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L226bfa.  v2:= v5.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L226bfe.  v4:= v5.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226c02.  v6:= v6.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226c06.  call `arraycopy`(v0, v1, v2, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L226c0c.  v5.`e.e.a.b.f.j.t3.d` @type ^`int` := v3;
  #L226c10.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L226c14.  v0:= 1I;
  #L226c16.  v6:= v6 + v0 @kind int;
  #L226c18.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L226c1c.  return v0;
  #L226c1e.  v6:= new `java.lang.OutOfMemoryError`;
  #L226c22.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L226c28.  throw v6;
}
procedure `e.e.a.b.f.j.y3` `b`(`e.e.a.b.f.j.t3` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/j/t3;.b:(I)Le/e/a/b/f/j/y3;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L226d58.  v0:= v2.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226d5c.  if v3 < v0 then goto L226d7c;
  #L226d60.  v0:= new `e.e.a.b.f.j.t3`;
  #L226d64.  v1:= v2.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L226d68.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L226d6e.  v3:= temp @kind object;
  #L226d70.  v1:= v2.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226d74.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/j/t3;.<init>:([II)V` @kind direct;
  #L226d7a.  return v0 @kind object;
  #L226d7c.  v3:= new `java.lang.IllegalArgumentException`;
  #L226d80.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L226d86.  throw v3;
}
procedure `boolean` `contains`(`e.e.a.b.f.j.t3` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/j/t3;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L226c3c.  call temp:= `indexOf`(v1, v2) @signature `Le/e/a/b/f/j/t3;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L226c42.  v2:= temp;
  #L226c44.  v0:= -1I;
  #L226c46.  if v2 == v0 then goto L226c4e;
  #L226c4a.  v2:= 1I;
  #L226c4c.  return v2;
  #L226c4e.  v2:= 0I;
  #L226c50.  return v2;
}
procedure `boolean` `equals`(`e.e.a.b.f.j.t3` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/j/t3;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L226c64.  v0:= 1I;
  #L226c66.  if v5 != v6 then goto L226c6c;
  #L226c6a.  return v0;
  #L226c6c.  v1:= instanceof @variable v6 @type ^`e.e.a.b.f.j.t3` @kind boolean;
  #L226c70.  if v1 != 0 then goto L226c7e;
  #L226c74.  call temp:= `equals`(v5, v6) @signature `Le/e/a/b/f/j/l2;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L226c7a.  v6:= temp;
  #L226c7c.  return v6;
  #L226c7e.  v6:= (`e.e.a.b.f.j.t3`) v6 @kind object;
  #L226c82.  v1:= v5.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226c86.  v2:= v6.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226c8a.  v3:= 0I;
  #L226c8c.  if v1 == v2 then goto L226c92;
  #L226c90.  return v3;
  #L226c92.  v6:= v6.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L226c96.  v1:= 0I;
  #L226c98.  v2:= v5.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226c9c.  if v1 >= v2 then goto L226cb8;
  #L226ca0.  v2:= v5.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L226ca4.  v2:= v2[v1];
  #L226ca8.  v4:= v6[v1];
  #L226cac.  if v2 == v4 then goto L226cb2;
  #L226cb0.  return v3;
  #L226cb2.  v1:= v1 + 1;
  #L226cb6.  goto L226c98;
  #L226cb8.  return v0;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.j.t3` v0 @kind this, `int` v1 ) @signature `Le/e/a/b/f/j/t3;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L226e50.  call temp:= `a`(v0, v1) @signature `Le/e/a/b/f/j/t3;.a:(I)I` @kind virtual;
  #L226e56.  v1:= temp;
  #L226e58.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L226e5e.  v1:= temp @kind object;
  #L226e60.  return v1 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.j.t3` v3 @kind this) @signature `Le/e/a/b/f/j/t3;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L226d98.  v0:= 1I;
  #L226d9a.  v1:= 0I;
  #L226d9c.  v2:= v3.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226da0.  if v1 >= v2 then goto L226db8;
  #L226da4.  v0:= v0 * 31;
  #L226da8.  v2:= v3.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L226dac.  v2:= v2[v1];
  #L226db0.  v0:= v0 + v2 @kind int;
  #L226db2.  v1:= v1 + 1;
  #L226db6.  goto L226d9c;
  #L226db8.  return v0;
}
procedure `int` `indexOf`(`e.e.a.b.f.j.t3` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/j/t3;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L226dcc.  v0:= instanceof @variable v5 @type ^`java.lang.Integer` @kind boolean;
  #L226dd0.  v1:= -1I;
  #L226dd2.  if v0 != 0 then goto L226dd8;
  #L226dd6.  return v1;
  #L226dd8.  v5:= (`java.lang.Integer`) v5 @kind object;
  #L226ddc.  call temp:= `intValue`(v5) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L226de2.  v5:= temp;
  #L226de4.  call temp:= `size`(v4) @signature `Le/e/a/b/f/j/t3;.size:()I` @kind virtual;
  #L226dea.  v0:= temp;
  #L226dec.  v2:= 0I;
  #L226dee.  if v2 >= v0 then goto L226e06;
  #L226df2.  v3:= v4.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L226df6.  v3:= v3[v2];
  #L226dfa.  if v3 != v5 then goto L226e00;
  #L226dfe.  return v2;
  #L226e00.  v2:= v2 + 1;
  #L226e04.  goto L226dee;
  #L226e06.  return v1;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.j.t3` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/j/t3;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L226e74.  call `d`(v4) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L226e7a.  call `h`(v4, v5) @signature `Le/e/a/b/f/j/t3;.h:(I)V` @kind direct;
  #L226e80.  v0:= v4.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L226e84.  v1:= v0[v5];
  #L226e88.  v2:= v4.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226e8c.  v3:= v2 + -1;
  #L226e90.  if v5 >= v3 then goto L226ea4;
  #L226e94.  v3:= v5 + 1;
  #L226e98.  v2:= v2 - v5 @kind int;
  #L226e9a.  v2:= v2 + -1;
  #L226e9e.  call `arraycopy`(v0, v3, v0, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L226ea4.  v5:= v4.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226ea8.  v5:= v5 + -1;
  #L226eac.  v4.`e.e.a.b.f.j.t3.d` @type ^`int` := v5;
  #L226eb0.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L226eb4.  v5:= v5 + 1;
  #L226eb8.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L226ebc.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L226ec2.  v5:= temp @kind object;
  #L226ec4.  return v5 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.j.t3` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/j/t3;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L226ccc.  call `d`(v4) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L226cd2.  v0:= 0I;
  #L226cd4.  v1:= 0I;
  #L226cd6.  v2:= v4.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226cda.  if v1 >= v2 then goto L226d2e;
  #L226cde.  v2:= v4.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L226ce2.  v2:= v2[v1];
  #L226ce6.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L226cec.  v2:= temp @kind object;
  #L226cee.  call temp:= `equals`(v5, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L226cf4.  v2:= temp;
  #L226cf6.  if v2 == 0 then goto L226d28;
  #L226cfa.  v5:= v4.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L226cfe.  v0:= v1 + 1;
  #L226d02.  v2:= v4.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226d06.  v2:= v2 - v1 @kind int;
  #L226d08.  v3:= 1I;
  #L226d0a.  v2:= v2 - v3 @kind int;
  #L226d0c.  call `arraycopy`(v5, v0, v5, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L226d12.  v5:= v4.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226d16.  v5:= v5 - v3 @kind int;
  #L226d18.  v4.`e.e.a.b.f.j.t3.d` @type ^`int` := v5;
  #L226d1c.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L226d20.  v5:= v5 + v3 @kind int;
  #L226d22.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L226d26.  return v3;
  #L226d28.  v1:= v1 + 1;
  #L226d2c.  goto L226cd6;
  #L226d2e.  return v0;
}
procedure `void` `removeRange`(`e.e.a.b.f.j.t3` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/j/t3;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L227080.  call `d`(v2) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L227086.  if v4 < v3 then goto L2270b4;
  #L22708a.  v0:= v2.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L22708e.  v1:= v2.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L227092.  v1:= v1 - v4 @kind int;
  #L227094.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L22709a.  v0:= v2.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L22709e.  v4:= v4 - v3 @kind int;
  #L2270a0.  v0:= v0 - v4 @kind int;
  #L2270a2.  v2.`e.e.a.b.f.j.t3.d` @type ^`int` := v0;
  #L2270a6.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L2270aa.  v3:= v3 + 1;
  #L2270ae.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L2270b2.  return @kind void;
  #L2270b4.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L2270b8.  v4:= "toIndex < fromIndex" @kind object;
  #L2270bc.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2270c2.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.j.t3` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/j/t3;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L226ed8.  v4:= (`java.lang.Integer`) v4 @kind object;
  #L226edc.  call temp:= `intValue`(v4) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L226ee2.  v4:= temp;
  #L226ee4.  call `d`(v2) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L226eea.  call `h`(v2, v3) @signature `Le/e/a/b/f/j/t3;.h:(I)V` @kind direct;
  #L226ef0.  v0:= v2.`e.e.a.b.f.j.t3.c` @type ^`int`[] @kind object;
  #L226ef4.  v1:= v0[v3];
  #L226ef8.  v0[v3]:= v4;
  #L226efc.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L226f02.  v3:= temp @kind object;
  #L226f04.  return v3 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.j.t3` v1 @kind this) @signature `Le/e/a/b/f/j/t3;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L226e18.  v0:= v1.`e.e.a.b.f.j.t3.d` @type ^`int`;
  #L226e1c.  return v0;
}
