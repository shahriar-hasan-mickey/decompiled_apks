record `e.e.a.b.f.m.t0` @kind class @AccessFlag ABSTRACT extends `e.e.a.b.f.m.e1` @kind class {
}
procedure `void` `<init>`(`e.e.a.b.f.m.t0` v0 @kind this) @signature `Le/e/a/b/f/m/t0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26770c.  call `<init>`(v0) @signature `Le/e/a/b/f/m/e1;.<init>:()V` @kind direct;
  #L267712.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.m.t0` v1 @kind this) @signature `Le/e/a/b/f/m/t0;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L267724.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/m/t0;.zza:()Ljava/util/Map;` @kind virtual;
  #L26772a.  v0:= temp @kind object;
  #L26772c.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L267732.  return @kind void;
}
procedure `boolean` `contains`(`java.lang.Object` v0 @kind object) @signature `Le/e/a/b/f/m/t0;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`e.e.a.b.f.m.t0` v1 @kind this) @signature `Le/e/a/b/f/m/t0;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L267578.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/m/t0;.zza:()Ljava/util/Map;` @kind virtual;
  #L26757e.  v0:= temp @kind object;
  #L267580.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L267586.  v0:= temp;
  #L267588.  return v0;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.m.t0` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/m/t0;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L26759c.  if v2 == 0 then goto L2675aa;
  #L2675a0.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/m/f1;.a:(Ljava/util/Set;Ljava/util/Collection;)Z` @kind static;
  #L2675a6.  v2:= temp;
  #L2675a8.  return v2;
  #L2675aa.  v0:= 0I;
  #L2675ac.  throw v0;
  #L2675ae.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2675b4.  v2:= temp @kind object;
  #L2675b6.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/m/f1;.a:(Ljava/util/Set;Ljava/util/Iterator;)Z` @kind static;
  #L2675bc.  v2:= temp;
  #L2675be.  return v2;
  catch `java.lang.UnsupportedOperationException` @[L2675a0..L2675ae] goto L2675ae;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.m.t0` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Le/e/a/b/f/m/t0;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2675e0.  if v4 == 0 then goto L2675ee;
  #L2675e4.  call temp:= `retainAll`(v3, v4) @signature `Le/e/a/b/f/m/e1;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L2675ea.  v4:= temp;
  #L2675ec.  return v4;
  #L2675ee.  v0:= 0I;
  #L2675f0.  throw v0;
  #L2675f2.  
  #L2675f4.  call temp:= `size`(v4) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L2675fa.  v0:= temp;
  #L2675fc.  v1:= new `java.util.HashSet`;
  #L267600.  v2:= 3I;
  #L267602.  if v0 >= v2 then goto L267642;
  #L267606.  if v0 < 0 then goto L267610;
  #L26760a.  v0:= v0 + 1;
  #L26760e.  goto L267662;
  #L267610.  v4:= new `java.lang.IllegalArgumentException`;
  #L267614.  v1:= new `java.lang.StringBuilder`;
  #L267618.  v2:= 52I;
  #L26761c.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L267622.  v2:= "expectedSize cannot be negative but was: " @kind object;
  #L267626.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L26762c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L267632.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L267638.  v0:= temp @kind object;
  #L26763a.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L267640.  throw v4;
  #L267642.  v2:= 2.0F;
  #L267646.  if v0 >= v2 then goto L26765c;
  #L26764a.  v0:= (`float`) v0 @kind i2f;
  #L26764c.  v2:= 0.75F;
  #L267650.  v0:= v0 / v2 @kind float;
  #L267652.  v2:= 1.0F;
  #L267656.  v0:= v0 + v2 @kind float;
  #L267658.  v0:= (`int`) v0 @kind f2i;
  #L26765a.  goto L267662;
  #L26765c.  v0:= 2147483647I;
  #L267662.  call `<init>`(v1, v0) @signature `Ljava/util/HashSet;.<init>:(I)V` @kind direct;
  #L267668.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L26766e.  v4:= temp @kind object;
  #L267670.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L267676.  v0:= temp;
  #L267678.  if v0 == 0 then goto L2676a4;
  #L26767c.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L267682.  v0:= temp @kind object;
  #L267684.  call temp:= `contains`(v3, v0) @signature `Le/e/a/b/f/m/t0;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L26768a.  v2:= temp;
  #L26768c.  if v2 == 0 then goto L267670;
  #L267690.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L267694.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L26769a.  v0:= temp @kind object;
  #L26769c.  call temp:= `add`(v1, v0) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2676a2.  goto L267670;
  #L2676a4.  call temp:= `zza`(v3) @signature `Le/e/a/b/f/m/t0;.zza:()Ljava/util/Map;` @kind virtual;
  #L2676aa.  v4:= temp @kind object;
  #L2676ac.  v4:= (`e.e.a.b.f.m.h`) v4 @kind object;
  #L2676b0.  v4:= v4.`e.e.a.b.f.m.h.e` @type ^`e.e.a.b.f.m.p` @kind object;
  #L2676b4.  call temp:= `c`(v4) @signature `Le/e/a/b/f/m/r;.c:()Ljava/util/Set;` @kind virtual;
  #L2676ba.  v4:= temp @kind object;
  #L2676bc.  call temp:= `retainAll`(v4, v1) @signature `Ljava/util/Set;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2676c2.  v4:= temp;
  #L2676c4.  return v4;
  catch `java.lang.UnsupportedOperationException` @[L2675e4..L2675f2] goto L2675f2;
}
procedure `int` `size`(`e.e.a.b.f.m.t0` v1 @kind this) @signature `Le/e/a/b/f/m/t0;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2676e8.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/m/t0;.zza:()Ljava/util/Map;` @kind virtual;
  #L2676ee.  v0:= temp @kind object;
  #L2676f0.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L2676f6.  v0:= temp;
  #L2676f8.  return v0;
}
procedure `java.util.Map` `zza`() @signature `Le/e/a/b/f/m/t0;.zza:()Ljava/util/Map;` @AccessFlag ABSTRACT {

  # return;
}
