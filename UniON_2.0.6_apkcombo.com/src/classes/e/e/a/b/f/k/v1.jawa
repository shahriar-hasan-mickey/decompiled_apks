record `e.e.a.b.f.k.v1` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `boolean` `a`(`java.util.Set` v3 @kind object, `java.util.Collection` v4 @kind object) @signature `Le/e/a/b/f/k/v1;.a:(Ljava/util/Set;Ljava/util/Collection;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L247688.  v0:= 0I;
  #L24768a.  if v4 == 0 then goto L24770c;
  #L24768e.  v1:= instanceof @variable v4 @type ^`e.e.a.b.f.k.q1` @kind boolean;
  #L247692.  if v1 == 0 then goto L2476a2;
  #L247696.  v4:= (`e.e.a.b.f.k.q1`) v4 @kind object;
  #L24769a.  call temp:= `zza`(v4) @signature `Le/e/a/b/f/k/q1;.zza:()Ljava/util/Set;` @kind interface;
  #L2476a0.  v4:= temp @kind object;
  #L2476a2.  v1:= instanceof @variable v4 @type ^`java.util.Set` @kind boolean;
  #L2476a6.  if v1 == 0 then goto L2476fa;
  #L2476aa.  call temp:= `size`(v4) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L2476b0.  v1:= temp;
  #L2476b2.  call temp:= `size`(v3) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L2476b8.  v2:= temp;
  #L2476ba.  if v1 <= v2 then goto L2476fa;
  #L2476be.  call temp:= `iterator`(v3) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2476c4.  v3:= temp @kind object;
  #L2476c6.  if v4 == 0 then goto L2476f8;
  #L2476ca.  v0:= 0I;
  #L2476cc.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2476d2.  v1:= temp;
  #L2476d4.  if v1 == 0 then goto L2476f6;
  #L2476d8.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2476de.  v1:= temp @kind object;
  #L2476e0.  call temp:= `contains`(v4, v1) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2476e6.  v1:= temp;
  #L2476e8.  if v1 == 0 then goto L2476cc;
  #L2476ec.  call `remove`(v3) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L2476f2.  v0:= 1I;
  #L2476f4.  goto L2476cc;
  #L2476f6.  return v0;
  #L2476f8.  throw v0;
  #L2476fa.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L247700.  v4:= temp @kind object;
  #L247702.  call temp:= `a`(v3, v4) @signature `Le/e/a/b/f/k/v1;.a:(Ljava/util/Set;Ljava/util/Iterator;)Z` @kind static;
  #L247708.  v3:= temp;
  #L24770a.  return v3;
  #L24770c.  throw v0;
}
procedure `boolean` `a`(`java.util.Set` v3 @kind object, `java.util.Iterator` v4 @kind object) @signature `Le/e/a/b/f/k/v1;.a:(Ljava/util/Set;Ljava/util/Iterator;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L247648.  v0:= 0I;
  #L24764a.  v1:= 0I;
  #L24764c.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L247652.  v2:= temp;
  #L247654.  if v2 == 0 then goto L24766c;
  #L247658.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L24765e.  v2:= temp @kind object;
  #L247660.  call temp:= `remove`(v3, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L247666.  v2:= temp;
  #L247668.  v1:= v1 ^| v2 @kind int;
  #L24766a.  goto L24764c;
  #L24766c.  v3:= 1I;
  #L24766e.  if v3 == v1 then goto L247674;
  #L247672.  return v0;
  #L247674.  return v3;
}
