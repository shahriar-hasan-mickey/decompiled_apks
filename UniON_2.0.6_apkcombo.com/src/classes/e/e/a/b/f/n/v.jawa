record `e.e.a.b.f.n.v` @kind class @AccessFlag ABSTRACT extends `java.util.AbstractList` @kind class, `e.e.a.b.f.n.c2` @kind interface {
  `boolean` `e.e.a.b.f.n.v.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.f.n.v` v1 @kind this) @signature `Le/e/a/b/f/n/v;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2781dc.  call `<init>`(v1) @signature `Ljava/util/AbstractList;.<init>:()V` @kind direct;
  #L2781e2.  v0:= 1I;
  #L2781e4.  v1.`e.e.a.b.f.n.v.b` @type ^`boolean` := v0 @kind boolean;
  #L2781e8.  return @kind void;
}
procedure `boolean` `add`(`e.e.a.b.f.n.v` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/n/v;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L278034.  call `d`(v0) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27803a.  call temp:= `add`(v0, v1) @signature `Ljava/util/AbstractList;.add:(Ljava/lang/Object;)Z` @kind super;
  #L278040.  v1:= temp;
  #L278042.  return v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.n.v` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/n/v;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L278054.  call `d`(v0) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27805a.  call temp:= `addAll`(v0, v1, v2) @signature `Ljava/util/AbstractList;.addAll:(ILjava/util/Collection;)Z` @kind super;
  #L278060.  v1:= temp;
  #L278062.  return v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.n.v` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/n/v;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L278074.  call `d`(v0) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27807a.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/AbstractList;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L278080.  v1:= temp;
  #L278082.  return v1;
}
procedure `void` `clear`(`e.e.a.b.f.n.v` v0 @kind this) @signature `Le/e/a/b/f/n/v;.clear:()V` @AccessFlag PUBLIC {
    temp;

  #L2781fc.  call `d`(v0) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L278202.  call `clear`(v0) @signature `Ljava/util/AbstractList;.clear:()V` @kind super;
  #L278208.  return @kind void;
}
procedure `void` `d`(`e.e.a.b.f.n.v` v1 @kind this) @signature `Le/e/a/b/f/n/v;.d:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L278234.  v0:= v1.`e.e.a.b.f.n.v.b` @type ^`boolean` @kind boolean;
  #L278238.  if v0 == 0 then goto L27823e;
  #L27823c.  return @kind void;
  #L27823e.  v0:= new `java.lang.UnsupportedOperationException`;
  #L278242.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L278248.  throw v0;
}
procedure `boolean` `equals`(`e.e.a.b.f.n.v` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/n/v;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L278094.  v0:= 1I;
  #L278096.  if v7 != v6 then goto L27809c;
  #L27809a.  return v0;
  #L27809c.  v1:= instanceof @variable v7 @type ^`java.util.List` @kind boolean;
  #L2780a0.  v2:= 0I;
  #L2780a2.  if v1 != 0 then goto L2780a8;
  #L2780a6.  return v2;
  #L2780a8.  v1:= instanceof @variable v7 @type ^`java.util.RandomAccess` @kind boolean;
  #L2780ac.  if v1 != 0 then goto L2780ba;
  #L2780b0.  call temp:= `equals`(v6, v7) @signature `Ljava/util/AbstractList;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L2780b6.  v7:= temp;
  #L2780b8.  return v7;
  #L2780ba.  v7:= (`java.util.List`) v7 @kind object;
  #L2780be.  call temp:= `size`(v6) @signature `Ljava/util/AbstractList;.size:()I` @kind virtual;
  #L2780c4.  v1:= temp;
  #L2780c6.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2780cc.  v3:= temp;
  #L2780ce.  if v1 != v3 then goto L2780fe;
  #L2780d2.  v3:= 0I;
  #L2780d4.  if v3 >= v1 then goto L2780fc;
  #L2780d8.  call temp:= `get`(v6, v3) @signature `Ljava/util/AbstractList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2780de.  v4:= temp @kind object;
  #L2780e0.  call temp:= `get`(v7, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2780e6.  v5:= temp @kind object;
  #L2780e8.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2780ee.  v4:= temp;
  #L2780f0.  if v4 != 0 then goto L2780f6;
  #L2780f4.  return v2;
  #L2780f6.  v3:= v3 + 1;
  #L2780fa.  goto L2780d4;
  #L2780fc.  return v0;
  #L2780fe.  return v2;
}
procedure `int` `hashCode`(`e.e.a.b.f.n.v` v4 @kind this) @signature `Le/e/a/b/f/n/v;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27819c.  call temp:= `size`(v4) @signature `Ljava/util/AbstractList;.size:()I` @kind virtual;
  #L2781a2.  v0:= temp;
  #L2781a4.  v1:= 1I;
  #L2781a6.  v2:= 0I;
  #L2781a8.  if v2 >= v0 then goto L2781c8;
  #L2781ac.  v1:= v1 * 31;
  #L2781b0.  call temp:= `get`(v4, v2) @signature `Ljava/util/AbstractList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2781b6.  v3:= temp @kind object;
  #L2781b8.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2781be.  v3:= temp;
  #L2781c0.  v1:= v1 + v3 @kind int;
  #L2781c2.  v2:= v2 + 1;
  #L2781c6.  goto L2781a8;
  #L2781c8.  return v1;
}
procedure `java.lang.Object` `remove`(`int` v0 ) @signature `Le/e/a/b/f/n/v;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `remove`(`e.e.a.b.f.n.v` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/n/v;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L278110.  call `d`(v1) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L278116.  call temp:= `indexOf`(v1, v2) @signature `Ljava/util/AbstractList;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L27811c.  v2:= temp;
  #L27811e.  v0:= -1I;
  #L278120.  if v2 != v0 then goto L278128;
  #L278124.  v2:= 0I;
  #L278126.  return v2;
  #L278128.  call temp:= `remove`(v1, v2) @signature `Le/e/a/b/f/n/v;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L27812e.  v2:= 1I;
  #L278130.  return v2;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.n.v` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/n/v;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L278144.  call `d`(v0) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27814a.  call temp:= `removeAll`(v0, v1) @signature `Ljava/util/AbstractList;.removeAll:(Ljava/util/Collection;)Z` @kind super;
  #L278150.  v1:= temp;
  #L278152.  return v1;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.n.v` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/n/v;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L278164.  call `d`(v0) @signature `Le/e/a/b/f/n/v;.d:()V` @kind virtual;
  #L27816a.  call temp:= `retainAll`(v0, v1) @signature `Ljava/util/AbstractList;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L278170.  v1:= temp;
  #L278172.  return v1;
}
procedure `boolean` `zza`(`e.e.a.b.f.n.v` v1 @kind this) @signature `Le/e/a/b/f/n/v;.zza:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L278184.  v0:= v1.`e.e.a.b.f.n.v.b` @type ^`boolean` @kind boolean;
  #L278188.  return v0;
}
procedure `void` `zzb`(`e.e.a.b.f.n.v` v1 @kind this) @signature `Le/e/a/b/f/n/v;.zzb:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L27821c.  v0:= 0I;
  #L27821e.  v1.`e.e.a.b.f.n.v.b` @type ^`boolean` := v0 @kind boolean;
  #L278222.  return @kind void;
}
