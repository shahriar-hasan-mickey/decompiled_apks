record `e.e.a.b.f.j.j8` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.AbstractCollection` @kind class, `java.io.Serializable` @kind interface {
}
global `java.lang.Object`[] `@@e.e.a.b.f.j.j8.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/j/j8;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L236dd4.  v0:= 0I;
  #L236dd6.  v0:= new `java.lang.Object`[v0];
  #L236dda.  `@@e.e.a.b.f.j.j8.b` @type ^`java.lang.Object`[] := v0 @kind object;
  #L236dde.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.j.j8` v0 @kind this) @signature `Le/e/a/b/f/j/j8;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L236df0.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L236df6.  return @kind void;
}
procedure `int` `a`(`java.lang.Object`[] v0 @kind object, `int` v1 ) @signature `Le/e/a/b/f/j/j8;.a:([Ljava/lang/Object;I)I` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `add`(`e.e.a.b.f.j.j8` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/j/j8;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L236c54.  v1:= new `java.lang.UnsupportedOperationException`;
  #L236c58.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L236c5e.  throw v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.j.j8` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/j/j8;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L236c70.  v1:= new `java.lang.UnsupportedOperationException`;
  #L236c74.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L236c7a.  throw v1;
}
procedure `int` `c`(`e.e.a.b.f.j.j8` v1 @kind this) @signature `Le/e/a/b/f/j/j8;.c:()I` @AccessFlag  {
    temp;
    v0;

  #L236cfc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L236d00.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L236d06.  throw v0;
}
procedure `void` `clear`(`e.e.a.b.f.j.j8` v1 @kind this) @signature `Le/e/a/b/f/j/j8;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L236e08.  v0:= new `java.lang.UnsupportedOperationException`;
  #L236e0c.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L236e12.  throw v0;
}
procedure `int` `d`(`e.e.a.b.f.j.j8` v1 @kind this) @signature `Le/e/a/b/f/j/j8;.d:()I` @AccessFlag  {
    temp;
    v0;

  #L236ce0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L236ce4.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L236cea.  throw v0;
}
procedure `boolean` `remove`(`e.e.a.b.f.j.j8` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/j/j8;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L236c8c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L236c90.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L236c96.  throw v1;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.j.j8` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/j/j8;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L236ca8.  v1:= new `java.lang.UnsupportedOperationException`;
  #L236cac.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L236cb2.  throw v1;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.j.j8` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/j/j8;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L236cc4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L236cc8.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L236cce.  throw v1;
}
procedure `java.lang.Object`[] `toArray`(`e.e.a.b.f.j.j8` v1 @kind this) @signature `Le/e/a/b/f/j/j8;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L236d18.  v0:= `@@e.e.a.b.f.j.j8.b` @type ^`java.lang.Object`[] @kind object;
  #L236d1c.  call temp:= `toArray`(v1, v0) @signature `Le/e/a/b/f/j/j8;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L236d22.  v0:= temp @kind object;
  #L236d24.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`e.e.a.b.f.j.j8` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Le/e/a/b/f/j/j8;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L236d38.  call temp:= `a`(v4) @signature `Le/e/a/b/f/j/d5;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L236d3e.  call temp:= `size`(v3) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L236d44.  v0:= temp;
  #L236d46.  v1:= length @variable v4;
  #L236d48.  if v1 >= v0 then goto L236d98;
  #L236d4c.  call temp:= `zzb`(v3) @signature `Le/e/a/b/f/j/j8;.zzb:()[Ljava/lang/Object;` @kind virtual;
  #L236d52.  v1:= temp @kind object;
  #L236d54.  if v1 == 0 then goto L236d7a;
  #L236d58.  call temp:= `d`(v3) @signature `Le/e/a/b/f/j/j8;.d:()I` @kind virtual;
  #L236d5e.  v0:= temp;
  #L236d60.  call temp:= `c`(v3) @signature `Le/e/a/b/f/j/j8;.c:()I` @kind virtual;
  #L236d66.  v2:= temp;
  #L236d68.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L236d6e.  v4:= temp @kind object;
  #L236d70.  call temp:= `copyOfRange`(v1, v0, v2, v4) @signature `Ljava/util/Arrays;.copyOfRange:([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;` @kind static;
  #L236d76.  v4:= temp @kind object;
  #L236d78.  return v4 @kind object;
  #L236d7a.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L236d80.  v4:= temp @kind object;
  #L236d82.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L236d88.  v4:= temp @kind object;
  #L236d8a.  call temp:= `newInstance`(v4, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L236d90.  v4:= temp @kind object;
  #L236d92.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L236d96.  goto L236da4;
  #L236d98.  v1:= length @variable v4;
  #L236d9a.  if v1 <= v0 then goto L236da4;
  #L236d9e.  v1:= 0I;
  #L236da0.  v4[v0]:= v1 @kind object;
  #L236da4.  v0:= 0I;
  #L236da6.  call temp:= `a`(v3, v4, v0) @signature `Le/e/a/b/f/j/j8;.a:([Ljava/lang/Object;I)I` @kind virtual;
  #L236dac.  return v4 @kind object;
}
procedure `java.lang.Object`[] `zzb`(`e.e.a.b.f.j.j8` v1 @kind this) @signature `Le/e/a/b/f/j/j8;.zzb:()[Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L236dc0.  v0:= 0I;
  #L236dc2.  return v0 @kind object;
}
