record `e.e.a.b.f.r.u1` @kind class @AccessFlag FINAL {
  `java.util.concurrent.ConcurrentHashMap` `e.e.a.b.f.r.u1.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.ref.ReferenceQueue` `e.e.a.b.f.r.u1.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e.e.a.b.f.r.u1` v4 @kind this) @signature `Le/e/a/b/f/r/u1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30f4cc.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30f4d2.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L30f4d6.  v1:= 16I;
  #L30f4da.  v2:= 0.75F;
  #L30f4de.  v3:= 10I;
  #L30f4e2.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:(IFI)V` @kind direct;
  #L30f4e8.  v4.`e.e.a.b.f.r.u1.a` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L30f4ec.  v0:= new `java.lang.ref.ReferenceQueue`;
  #L30f4f0.  call `<init>`(v0) @signature `Ljava/lang/ref/ReferenceQueue;.<init>:()V` @kind direct;
  #L30f4f6.  v4.`e.e.a.b.f.r.u1.b` @type ^`java.lang.ref.ReferenceQueue` := v0 @kind object;
  #L30f4fa.  return @kind void;
}
procedure `java.util.List` `a`(`e.e.a.b.f.r.u1` v3 @kind this, `java.lang.Throwable` v4 @kind object, `boolean` v5 ) @signature `Le/e/a/b/f/r/u1;.a:(Ljava/lang/Throwable;Z)Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L30f44c.  v5:= v3.`e.e.a.b.f.r.u1.b` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L30f450.  call temp:= `poll`(v5) @signature `Ljava/lang/ref/ReferenceQueue;.poll:()Ljava/lang/ref/Reference;` @kind virtual;
  #L30f456.  v5:= temp @kind object;
  #L30f458.  if v5 == 0 then goto L30f468;
  #L30f45c.  v0:= v3.`e.e.a.b.f.r.u1.a` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L30f460.  call temp:= `remove`(v0, v5) @signature `Ljava/util/concurrent/ConcurrentHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L30f466.  goto L30f44c;
  #L30f468.  v5:= new `e.e.a.b.f.r.t1`;
  #L30f46c.  v0:= 0I;
  #L30f46e.  call `<init>`(v5, v4, v0) @signature `Le/e/a/b/f/r/t1;.<init>:(Ljava/lang/Throwable;Ljava/lang/ref/ReferenceQueue;)V` @kind direct;
  #L30f474.  v0:= v3.`e.e.a.b.f.r.u1.a` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L30f478.  call temp:= `get`(v0, v5) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L30f47e.  v5:= temp @kind object;
  #L30f480.  v5:= (`java.util.List`) v5 @kind object;
  #L30f484.  if v5 == 0 then goto L30f48a;
  #L30f488.  return v5 @kind object;
  #L30f48a.  v5:= new `java.util.Vector`;
  #L30f48e.  v0:= 2I;
  #L30f490.  call `<init>`(v5, v0) @signature `Ljava/util/Vector;.<init>:(I)V` @kind direct;
  #L30f496.  v0:= v3.`e.e.a.b.f.r.u1.a` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L30f49a.  v1:= new `e.e.a.b.f.r.t1`;
  #L30f49e.  v2:= v3.`e.e.a.b.f.r.u1.b` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L30f4a2.  call `<init>`(v1, v4, v2) @signature `Le/e/a/b/f/r/t1;.<init>:(Ljava/lang/Throwable;Ljava/lang/ref/ReferenceQueue;)V` @kind direct;
  #L30f4a8.  call temp:= `putIfAbsent`(v0, v1, v5) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L30f4ae.  v4:= temp @kind object;
  #L30f4b0.  v4:= (`java.util.List`) v4 @kind object;
  #L30f4b4.  if v4 != 0 then goto L30f4ba;
  #L30f4b8.  return v5 @kind object;
  #L30f4ba.  return v4 @kind object;
}
