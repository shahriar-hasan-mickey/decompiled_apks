record `e.e.a.b.f.q.k1` @kind class @AccessFlag FINAL {
  `e.e.a.b.f.q.o1` `e.e.a.b.f.q.k1.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ConcurrentMap` `e.e.a.b.f.q.k1.b` @AccessFlag PRIVATE_FINAL;
}
global `e.e.a.b.f.q.k1` `@@e.e.a.b.f.q.k1.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/q/k1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2dae44.  v0:= new `e.e.a.b.f.q.k1`;
  #L2dae48.  call `<init>`(v0) @signature `Le/e/a/b/f/q/k1;.<init>:()V` @kind direct;
  #L2dae4e.  `@@e.e.a.b.f.q.k1.c` @type ^`e.e.a.b.f.q.k1` := v0 @kind object;
  #L2dae52.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.q.k1` v1 @kind this) @signature `Le/e/a/b/f/q/k1;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L2dae64.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2dae6a.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L2dae6e.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L2dae74.  v1.`e.e.a.b.f.q.k1.b` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L2dae78.  v0:= new `e.e.a.b.f.q.t0`;
  #L2dae7c.  call `<init>`(v0) @signature `Le/e/a/b/f/q/t0;.<init>:()V` @kind direct;
  #L2dae82.  v1.`e.e.a.b.f.q.k1.a` @type ^`e.e.a.b.f.q.o1` := v0 @kind object;
  #L2dae86.  return @kind void;
}
procedure `e.e.a.b.f.q.k1` `a`() @signature `Le/e/a/b/f/q/k1;.a:()Le/e/a/b/f/q/k1;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2dadc8.  v0:= `@@e.e.a.b.f.q.k1.c` @type ^`e.e.a.b.f.q.k1` @kind object;
  #L2dadcc.  return v0 @kind object;
}
procedure `e.e.a.b.f.q.n1` `a`(`e.e.a.b.f.q.k1` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Le/e/a/b/f/q/k1;.a:(Ljava/lang/Class;)Le/e/a/b/f/q/n1;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2dade0.  v0:= "messageType" @kind object;
  #L2dade4.  call temp:= `a`(v3, v0) @signature `Le/e/a/b/f/q/b0;.a:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2dadea.  v1:= v2.`e.e.a.b.f.q.k1.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L2dadee.  call temp:= `get`(v1, v3) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2dadf4.  v1:= temp @kind object;
  #L2dadf6.  v1:= (`e.e.a.b.f.q.n1`) v1 @kind object;
  #L2dadfa.  if v1 != 0 then goto L2dae32;
  #L2dadfe.  v1:= v2.`e.e.a.b.f.q.k1.a` @type ^`e.e.a.b.f.q.o1` @kind object;
  #L2dae02.  call temp:= `a`(v1, v3) @signature `Le/e/a/b/f/q/o1;.a:(Ljava/lang/Class;)Le/e/a/b/f/q/n1;` @kind interface;
  #L2dae08.  v1:= temp @kind object;
  #L2dae0a.  call temp:= `a`(v3, v0) @signature `Le/e/a/b/f/q/b0;.a:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2dae10.  v0:= "schema" @kind object;
  #L2dae14.  call temp:= `a`(v1, v0) @signature `Le/e/a/b/f/q/b0;.a:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2dae1a.  v0:= v2.`e.e.a.b.f.q.k1.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L2dae1e.  call temp:= `putIfAbsent`(v0, v3, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2dae24.  v3:= temp @kind object;
  #L2dae26.  v3:= (`e.e.a.b.f.q.n1`) v3 @kind object;
  #L2dae2a.  if v3 != 0 then goto L2dae30;
  #L2dae2e.  goto L2dae32;
  #L2dae30.  return v3 @kind object;
  #L2dae32.  return v1 @kind object;
}
