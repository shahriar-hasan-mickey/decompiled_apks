record `e.e.a.b.f.b.p0` @kind class @AccessFlag FINAL extends `e.e.a.b.f.b.t` @kind class, `e.e.a.b.f.b.k1` @kind interface, `java.util.RandomAccess` @kind interface {
  `double`[] `e.e.a.b.f.b.p0.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.b.p0.d` @AccessFlag PRIVATE;
}
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/b/p0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1fe4ac.  v0:= new `e.e.a.b.f.b.p0`;
  #L1fe4b0.  call `<init>`(v0) @signature `Le/e/a/b/f/b/p0;.<init>:()V` @kind direct;
  #L1fe4b6.  call `h`(v0) @signature `Le/e/a/b/f/b/t;.h:()V` @kind virtual;
  #L1fe4bc.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.b.p0` v2 @kind this) @signature `Le/e/a/b/f/b/p0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1fe4d0.  v0:= 10I;
  #L1fe4d4.  v0:= new `double`[v0];
  #L1fe4d8.  v1:= 0I;
  #L1fe4da.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/b/p0;.<init>:([DI)V` @kind direct;
  #L1fe4e0.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.b.p0` v0 @kind this, `double`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/b/p0;.<init>:([DI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1fe4f4.  call `<init>`(v0) @signature `Le/e/a/b/f/b/t;.<init>:()V` @kind direct;
  #L1fe4fa.  v0.`e.e.a.b.f.b.p0.c` @type ^`double`[] := v1 @kind object;
  #L1fe4fe.  v0.`e.e.a.b.f.b.p0.d` @type ^`int` := v2;
  #L1fe502.  return @kind void;
}
procedure `void` `a`(`e.e.a.b.f.b.p0` v4 @kind this, `int` v5 , `double` v6 ) @signature `Le/e/a/b/f/b/p0;.a:(ID)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1fe5a8.  call `d`(v4) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1fe5ae.  if v5 < 0 then goto L1fe624;
  #L1fe5b2.  v0:= v4.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe5b6.  if v5 > v0 then goto L1fe624;
  #L1fe5ba.  v1:= v4.`e.e.a.b.f.b.p0.c` @type ^`double`[] @kind object;
  #L1fe5be.  v2:= length @variable v1;
  #L1fe5c0.  if v0 >= v2 then goto L1fe5d2;
  #L1fe5c4.  v2:= v5 + 1;
  #L1fe5c8.  v0:= v0 - v5 @kind int;
  #L1fe5ca.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1fe5d0.  goto L1fe602;
  #L1fe5d2.  v0:= v0 * 3;
  #L1fe5d6.  v0:= v0 / 2;
  #L1fe5da.  v0:= v0 + 1;
  #L1fe5de.  v0:= new `double`[v0];
  #L1fe5e2.  v2:= 0I;
  #L1fe5e4.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1fe5ea.  v1:= v4.`e.e.a.b.f.b.p0.c` @type ^`double`[] @kind object;
  #L1fe5ee.  v2:= v5 + 1;
  #L1fe5f2.  v3:= v4.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe5f6.  v3:= v3 - v5 @kind int;
  #L1fe5f8.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1fe5fe.  v4.`e.e.a.b.f.b.p0.c` @type ^`double`[] := v0 @kind object;
  #L1fe602.  v0:= v4.`e.e.a.b.f.b.p0.c` @type ^`double`[] @kind object;
  #L1fe606.  v0[v5]:= v6 @kind wide;
  #L1fe60a.  v5:= v4.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe60e.  v5:= v5 + 1;
  #L1fe612.  v4.`e.e.a.b.f.b.p0.d` @type ^`int` := v5;
  #L1fe616.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L1fe61a.  v5:= v5 + 1;
  #L1fe61e.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L1fe622.  return @kind void;
  #L1fe624.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L1fe628.  call temp:= `e`(v4, v5) @signature `Le/e/a/b/f/b/p0;.e:(I)Ljava/lang/String;` @kind direct;
  #L1fe62e.  v5:= temp @kind object;
  #L1fe630.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fe636.  throw v6;
}
procedure `void` `d`(`e.e.a.b.f.b.p0` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/b/p0;.d:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1fe648.  if v2 < 0 then goto L1fe656;
  #L1fe64c.  v0:= v1.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe650.  if v2 >= v0 then goto L1fe656;
  #L1fe654.  return @kind void;
  #L1fe656.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L1fe65a.  call temp:= `e`(v1, v2) @signature `Le/e/a/b/f/b/p0;.e:(I)Ljava/lang/String;` @kind direct;
  #L1fe660.  v2:= temp @kind object;
  #L1fe662.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fe668.  throw v0;
}
procedure `java.lang.String` `e`(`e.e.a.b.f.b.p0` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/b/p0;.e:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1fe460.  v0:= v3.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe464.  v1:= new `java.lang.StringBuilder`;
  #L1fe468.  v2:= 35I;
  #L1fe46c.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1fe472.  v2:= "Index:" @kind object;
  #L1fe476.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fe47c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fe482.  v4:= ", Size:" @kind object;
  #L1fe486.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fe48c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fe492.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fe498.  v4:= temp @kind object;
  #L1fe49a.  return v4 @kind object;
}
procedure `void` `a`(`e.e.a.b.f.b.p0` v1 @kind this, `double` v2 ) @signature `Le/e/a/b/f/b/p0;.a:(D)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1fe58c.  v0:= v1.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe590.  call `a`(v1, v0, v2) @signature `Le/e/a/b/f/b/p0;.a:(ID)V` @kind direct;
  #L1fe596.  return @kind void;
}
procedure `void` `add`(`e.e.a.b.f.b.p0` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/b/p0;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L1fe514.  v4:= (`java.lang.Double`) v4 @kind object;
  #L1fe518.  call temp:= `doubleValue`(v4) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L1fe51e.  v0:= temp @kind wide;
  #L1fe520.  call `a`(v2, v3, v0) @signature `Le/e/a/b/f/b/p0;.a:(ID)V` @kind direct;
  #L1fe526.  return @kind void;
}
procedure `boolean` `addAll`(`e.e.a.b.f.b.p0` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/b/p0;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1fe180.  call `d`(v5) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1fe186.  call temp:= `a`(v6) @signature `Le/e/a/b/f/b/h1;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1fe18c.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.b.p0` @kind boolean;
  #L1fe190.  if v0 != 0 then goto L1fe19e;
  #L1fe194.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/b/t;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L1fe19a.  v6:= temp;
  #L1fe19c.  return v6;
  #L1fe19e.  v6:= (`e.e.a.b.f.b.p0`) v6 @kind object;
  #L1fe1a2.  v0:= v6.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe1a6.  v1:= 0I;
  #L1fe1a8.  if v0 != 0 then goto L1fe1ae;
  #L1fe1ac.  return v1;
  #L1fe1ae.  v2:= 2147483647I;
  #L1fe1b4.  v3:= v5.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe1b8.  v2:= v2 - v3 @kind int;
  #L1fe1ba.  if v2 < v0 then goto L1fe1fe;
  #L1fe1be.  v3:= v3 + v0 @kind int;
  #L1fe1c0.  v0:= v5.`e.e.a.b.f.b.p0.c` @type ^`double`[] @kind object;
  #L1fe1c4.  v2:= length @variable v0;
  #L1fe1c6.  if v3 <= v2 then goto L1fe1d6;
  #L1fe1ca.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([DI)[D` @kind static;
  #L1fe1d0.  v0:= temp @kind object;
  #L1fe1d2.  v5.`e.e.a.b.f.b.p0.c` @type ^`double`[] := v0 @kind object;
  #L1fe1d6.  v0:= v6.`e.e.a.b.f.b.p0.c` @type ^`double`[] @kind object;
  #L1fe1da.  v2:= v5.`e.e.a.b.f.b.p0.c` @type ^`double`[] @kind object;
  #L1fe1de.  v4:= v5.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe1e2.  v6:= v6.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe1e6.  call `arraycopy`(v0, v1, v2, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1fe1ec.  v5.`e.e.a.b.f.b.p0.d` @type ^`int` := v3;
  #L1fe1f0.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L1fe1f4.  v0:= 1I;
  #L1fe1f6.  v6:= v6 + v0 @kind int;
  #L1fe1f8.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L1fe1fc.  return v0;
  #L1fe1fe.  v6:= new `java.lang.OutOfMemoryError`;
  #L1fe202.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L1fe208.  throw v6;
}
procedure `boolean` `equals`(`e.e.a.b.f.b.p0` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Le/e/a/b/f/b/p0;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1fe21c.  v0:= 1I;
  #L1fe21e.  if v8 != v9 then goto L1fe224;
  #L1fe222.  return v0;
  #L1fe224.  v1:= instanceof @variable v9 @type ^`e.e.a.b.f.b.p0` @kind boolean;
  #L1fe228.  if v1 != 0 then goto L1fe236;
  #L1fe22c.  call temp:= `equals`(v8, v9) @signature `Le/e/a/b/f/b/t;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L1fe232.  v9:= temp;
  #L1fe234.  return v9;
  #L1fe236.  v9:= (`e.e.a.b.f.b.p0`) v9 @kind object;
  #L1fe23a.  v1:= v8.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe23e.  v2:= v9.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe242.  v3:= 0I;
  #L1fe244.  if v1 == v2 then goto L1fe24a;
  #L1fe248.  return v3;
  #L1fe24a.  v9:= v9.`e.e.a.b.f.b.p0.c` @type ^`double`[] @kind object;
  #L1fe24e.  v1:= 0I;
  #L1fe250.  v2:= v8.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe254.  if v1 >= v2 then goto L1fe274;
  #L1fe258.  v2:= v8.`e.e.a.b.f.b.p0.c` @type ^`double`[] @kind object;
  #L1fe25c.  v4:= v2[v1] @kind wide;
  #L1fe260.  v6:= v9[v1] @kind wide;
  #L1fe264.  v2:= dcmpl(v4, v6);
  #L1fe268.  if v2 == 0 then goto L1fe26e;
  #L1fe26c.  return v3;
  #L1fe26e.  v1:= v1 + 1;
  #L1fe272.  goto L1fe250;
  #L1fe274.  return v0;
}
procedure `e.e.a.b.f.b.k1` `f`(`e.e.a.b.f.b.p0` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/b/p0;.f:(I)Le/e/a/b/f/b/k1;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L1fe2fc.  v0:= v2.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe300.  if v3 < v0 then goto L1fe320;
  #L1fe304.  v0:= new `e.e.a.b.f.b.p0`;
  #L1fe308.  v1:= v2.`e.e.a.b.f.b.p0.c` @type ^`double`[] @kind object;
  #L1fe30c.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([DI)[D` @kind static;
  #L1fe312.  v3:= temp @kind object;
  #L1fe314.  v1:= v2.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe318.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/b/p0;.<init>:([DI)V` @kind direct;
  #L1fe31e.  return v0 @kind object;
  #L1fe320.  v3:= new `java.lang.IllegalArgumentException`;
  #L1fe324.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1fe32a.  throw v3;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.b.p0` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/b/p0;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L1fe398.  call `d`(v3, v4) @signature `Le/e/a/b/f/b/p0;.d:(I)V` @kind direct;
  #L1fe39e.  v0:= v3.`e.e.a.b.f.b.p0.c` @type ^`double`[] @kind object;
  #L1fe3a2.  v1:= v0[v4] @kind wide;
  #L1fe3a6.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L1fe3ac.  v4:= temp @kind object;
  #L1fe3ae.  return v4 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.b.p0` v5 @kind this) @signature `Le/e/a/b/f/b/p0;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1fe33c.  v0:= 1I;
  #L1fe33e.  v1:= 0I;
  #L1fe340.  v2:= v5.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe344.  if v1 >= v2 then goto L1fe36c;
  #L1fe348.  v2:= v5.`e.e.a.b.f.b.p0.c` @type ^`double`[] @kind object;
  #L1fe34c.  v3:= v2[v1] @kind wide;
  #L1fe350.  call temp:= `doubleToLongBits`(v3) @signature `Ljava/lang/Double;.doubleToLongBits:(D)J` @kind static;
  #L1fe356.  v2:= temp @kind wide;
  #L1fe358.  v0:= v0 * 31;
  #L1fe35c.  call temp:= `a`(v2) @signature `Le/e/a/b/f/b/h1;.a:(J)I` @kind static;
  #L1fe362.  v2:= temp;
  #L1fe364.  v0:= v0 + v2 @kind int;
  #L1fe366.  v1:= v1 + 1;
  #L1fe36a.  goto L1fe340;
  #L1fe36c.  return v0;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.b.p0` v5 @kind this, `int` v6 ) @signature `Le/e/a/b/f/b/p0;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1fe3c0.  call `d`(v5) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1fe3c6.  call `d`(v5, v6) @signature `Le/e/a/b/f/b/p0;.d:(I)V` @kind direct;
  #L1fe3cc.  v0:= v5.`e.e.a.b.f.b.p0.c` @type ^`double`[] @kind object;
  #L1fe3d0.  v1:= v0[v6] @kind wide;
  #L1fe3d4.  v3:= v5.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe3d8.  v4:= v3 + -1;
  #L1fe3dc.  if v6 >= v4 then goto L1fe3ec;
  #L1fe3e0.  v4:= v6 + 1;
  #L1fe3e4.  v3:= v3 - v6 @kind int;
  #L1fe3e6.  call `arraycopy`(v0, v4, v0, v6, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1fe3ec.  v6:= v5.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe3f0.  v6:= v6 + -1;
  #L1fe3f4.  v5.`e.e.a.b.f.b.p0.d` @type ^`int` := v6;
  #L1fe3f8.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L1fe3fc.  v6:= v6 + 1;
  #L1fe400.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L1fe404.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L1fe40a.  v6:= temp @kind object;
  #L1fe40c.  return v6 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.b.p0` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/b/p0;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1fe288.  call `d`(v5) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1fe28e.  v0:= 0I;
  #L1fe290.  v1:= 0I;
  #L1fe292.  v2:= v5.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe296.  if v1 >= v2 then goto L1fe2e8;
  #L1fe29a.  v2:= v5.`e.e.a.b.f.b.p0.c` @type ^`double`[] @kind object;
  #L1fe29e.  v3:= v2[v1] @kind wide;
  #L1fe2a2.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L1fe2a8.  v2:= temp @kind object;
  #L1fe2aa.  call temp:= `equals`(v6, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1fe2b0.  v2:= temp;
  #L1fe2b2.  if v2 == 0 then goto L1fe2e2;
  #L1fe2b6.  v6:= v5.`e.e.a.b.f.b.p0.c` @type ^`double`[] @kind object;
  #L1fe2ba.  v0:= v1 + 1;
  #L1fe2be.  v2:= v5.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe2c2.  v2:= v2 - v1 @kind int;
  #L1fe2c4.  call `arraycopy`(v6, v0, v6, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1fe2ca.  v6:= v5.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe2ce.  v0:= 1I;
  #L1fe2d0.  v6:= v6 - v0 @kind int;
  #L1fe2d2.  v5.`e.e.a.b.f.b.p0.d` @type ^`int` := v6;
  #L1fe2d6.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L1fe2da.  v6:= v6 + v0 @kind int;
  #L1fe2dc.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L1fe2e0.  return v0;
  #L1fe2e2.  v1:= v1 + 1;
  #L1fe2e6.  goto L1fe292;
  #L1fe2e8.  return v0;
}
procedure `void` `removeRange`(`e.e.a.b.f.b.p0` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/b/p0;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L1fe538.  call `d`(v2) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1fe53e.  if v4 < v3 then goto L1fe56c;
  #L1fe542.  v0:= v2.`e.e.a.b.f.b.p0.c` @type ^`double`[] @kind object;
  #L1fe546.  v1:= v2.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe54a.  v1:= v1 - v4 @kind int;
  #L1fe54c.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1fe552.  v0:= v2.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe556.  v4:= v4 - v3 @kind int;
  #L1fe558.  v0:= v0 - v4 @kind int;
  #L1fe55a.  v2.`e.e.a.b.f.b.p0.d` @type ^`int` := v0;
  #L1fe55e.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L1fe562.  v3:= v3 + 1;
  #L1fe566.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L1fe56a.  return @kind void;
  #L1fe56c.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L1fe570.  v4:= "toIndex < fromIndex" @kind object;
  #L1fe574.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fe57a.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.b.p0` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/b/p0;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1fe420.  v6:= (`java.lang.Double`) v6 @kind object;
  #L1fe424.  call temp:= `doubleValue`(v6) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L1fe42a.  v0:= temp @kind wide;
  #L1fe42c.  call `d`(v4) @signature `Le/e/a/b/f/b/t;.d:()V` @kind virtual;
  #L1fe432.  call `d`(v4, v5) @signature `Le/e/a/b/f/b/p0;.d:(I)V` @kind direct;
  #L1fe438.  v6:= v4.`e.e.a.b.f.b.p0.c` @type ^`double`[] @kind object;
  #L1fe43c.  v2:= v6[v5] @kind wide;
  #L1fe440.  v6[v5]:= v0 @kind wide;
  #L1fe444.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L1fe44a.  v5:= temp @kind object;
  #L1fe44c.  return v5 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.b.p0` v1 @kind this) @signature `Le/e/a/b/f/b/p0;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1fe380.  v0:= v1.`e.e.a.b.f.b.p0.d` @type ^`int`;
  #L1fe384.  return v0;
}
