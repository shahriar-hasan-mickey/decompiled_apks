record `e.e.a.b.f.n.j2` @kind class @AccessFlag FINAL extends `java.util.Map$Entry` @kind interface {
  `java.util.Map$Entry` `e.e.a.b.f.n.j2.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e.e.a.b.f.n.j2` v0 @kind this, `java.util.Map$Entry` v1 @kind object, `e.e.a.b.f.n.i2` v2 @kind object) @signature `Le/e/a/b/f/n/j2;.<init>:(Ljava/util/Map$Entry;Le/e/a/b/f/n/i2;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L27f6d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27f6d6.  v0.`e.e.a.b.f.n.j2.b` @type ^`java.util.Map$Entry` := v1 @kind object;
  #L27f6da.  return @kind void;
}
procedure `java.lang.Object` `getKey`(`e.e.a.b.f.n.j2` v1 @kind this) @signature `Le/e/a/b/f/n/j2;.getKey:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L27f63c.  v0:= v1.`e.e.a.b.f.n.j2.b` @type ^`java.util.Map$Entry` @kind object;
  #L27f640.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L27f646.  v0:= temp @kind object;
  #L27f648.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`e.e.a.b.f.n.j2` v2 @kind this) @signature `Le/e/a/b/f/n/j2;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L27f65c.  v0:= v2.`e.e.a.b.f.n.j2.b` @type ^`java.util.Map$Entry` @kind object;
  #L27f660.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L27f666.  v0:= temp @kind object;
  #L27f668.  v0:= (`e.e.a.b.f.n.l2`) v0 @kind object;
  #L27f66c.  v1:= 0I;
  #L27f66e.  if v0 != 0 then goto L27f674;
  #L27f672.  return v1 @kind object;
  #L27f674.  throw v1;
}
procedure `java.lang.Object` `setValue`(`e.e.a.b.f.n.j2` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/n/j2;.setValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L27f688.  v0:= instanceof @variable v2 @type ^`e.e.a.b.f.n.g3` @kind boolean;
  #L27f68c.  if v0 == 0 then goto L27f6ae;
  #L27f690.  v0:= v1.`e.e.a.b.f.n.j2.b` @type ^`java.util.Map$Entry` @kind object;
  #L27f694.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L27f69a.  v0:= temp @kind object;
  #L27f69c.  v0:= (`e.e.a.b.f.n.l2`) v0 @kind object;
  #L27f6a0.  v2:= (`e.e.a.b.f.n.g3`) v2 @kind object;
  #L27f6a4.  call temp:= `a`(v0, v2) @signature `Le/e/a/b/f/n/m2;.a:(Le/e/a/b/f/n/g3;)Le/e/a/b/f/n/g3;` @kind virtual;
  #L27f6aa.  v2:= temp @kind object;
  #L27f6ac.  return v2 @kind object;
  #L27f6ae.  v2:= new `java.lang.IllegalArgumentException`;
  #L27f6b2.  v0:= "LazyField now only used for MessageSet, and the value of MessageSet must be an instance of MessageLite" @kind object;
  #L27f6b6.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27f6bc.  throw v2;
}
