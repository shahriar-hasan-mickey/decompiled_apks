record `e.e.a.b.f.o.z0` @kind class @AccessFlag FINAL extends `java.io.OutputStream` @kind class {
  `long` `e.e.a.b.f.o.z0.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.f.o.z0` v2 @kind this) @signature `Le/e/a/b/f/o/z0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2c1d94.  call `<init>`(v2) @signature `Ljava/io/OutputStream;.<init>:()V` @kind direct;
  #L2c1d9a.  v0:= 0L;
  #L2c1d9e.  v2.`e.e.a.b.f.o.z0.b` @type ^`long` := v0 @kind wide;
  #L2c1da2.  return @kind void;
}
procedure `long` `k`(`e.e.a.b.f.o.z0` v2 @kind this) @signature `Le/e/a/b/f/o/z0;.k:()J` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L2c1d7c.  v0:= v2.`e.e.a.b.f.o.z0.b` @type ^`long` @kind wide;
  #L2c1d80.  return v0 @kind wide;
}
procedure `void` `write`(`e.e.a.b.f.o.z0` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/o/z0;.write:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c1e18.  v0:= v4.`e.e.a.b.f.o.z0.b` @type ^`long` @kind wide;
  #L2c1e1c.  v2:= 1L;
  #L2c1e20.  v0:= v0 + v2 @kind long;
  #L2c1e22.  v4.`e.e.a.b.f.o.z0.b` @type ^`long` := v0 @kind wide;
  #L2c1e26.  return @kind void;
}
procedure `void` `write`(`e.e.a.b.f.o.z0` v4 @kind this, `byte`[] v5 @kind object) @signature `Le/e/a/b/f/o/z0;.write:([B)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c1db4.  v0:= v4.`e.e.a.b.f.o.z0.b` @type ^`long` @kind wide;
  #L2c1db8.  v5:= length @variable v5;
  #L2c1dba.  v2:= (`long`) v5 @kind i2l;
  #L2c1dbc.  v0:= v0 + v2 @kind long;
  #L2c1dbe.  v4.`e.e.a.b.f.o.z0.b` @type ^`long` := v0 @kind wide;
  #L2c1dc2.  return @kind void;
}
procedure `void` `write`(`e.e.a.b.f.o.z0` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Le/e/a/b/f/o/z0;.write:([BII)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2c1dd4.  if v4 < 0 then goto L2c1dfa;
  #L2c1dd8.  v3:= length @variable v3;
  #L2c1dda.  if v4 > v3 then goto L2c1dfa;
  #L2c1dde.  if v5 < 0 then goto L2c1dfa;
  #L2c1de2.  v4:= v4 + v5 @kind int;
  #L2c1de4.  if v4 > v3 then goto L2c1dfa;
  #L2c1de8.  if v4 < 0 then goto L2c1dfa;
  #L2c1dec.  v3:= v2.`e.e.a.b.f.o.z0.b` @type ^`long` @kind wide;
  #L2c1df0.  v0:= (`long`) v5 @kind i2l;
  #L2c1df2.  v3:= v3 + v0 @kind long;
  #L2c1df4.  v2.`e.e.a.b.f.o.z0.b` @type ^`long` := v3 @kind wide;
  #L2c1df8.  return @kind void;
  #L2c1dfa.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L2c1dfe.  call `<init>`(v3) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L2c1e04.  throw v3;
}
