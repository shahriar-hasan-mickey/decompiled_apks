record `e.e.a.b.f.o.f` @kind class @AccessFlag FINAL extends `e.e.a.b.f.o.ua` @kind class {
  `java.lang.Object` `e.e.a.b.f.o.f.b` @AccessFlag PRIVATE_FINAL;
  `int` `e.e.a.b.f.o.f.c` @AccessFlag PRIVATE;
  `e.e.a.b.f.o.h` `e.e.a.b.f.o.f.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.o.f` v0 @kind this, `e.e.a.b.f.o.h` v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/o/f;.<init>:(Le/e/a/b/f/o/h;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2bf10c.  v0.`e.e.a.b.f.o.f.d` @type ^`e.e.a.b.f.o.h` := v1 @kind object;
  #L2bf110.  call `<init>`(v0) @signature `Le/e/a/b/f/o/ua;.<init>:()V` @kind direct;
  #L2bf116.  v1:= v1.`e.e.a.b.f.o.h.d` @type ^`java.lang.Object`[] @kind object;
  #L2bf11a.  v1:= v1[v2] @kind object;
  #L2bf11e.  v0.`e.e.a.b.f.o.f.b` @type ^`java.lang.Object` := v1 @kind object;
  #L2bf122.  v0.`e.e.a.b.f.o.f.c` @type ^`int` := v2;
  #L2bf126.  return @kind void;
}
procedure `void` `a`(`e.e.a.b.f.o.f` v3 @kind this) @signature `Le/e/a/b/f/o/f;.a:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2bf138.  v0:= v3.`e.e.a.b.f.o.f.c` @type ^`int`;
  #L2bf13c.  v1:= -1I;
  #L2bf13e.  if v0 == v1 then goto L2bf176;
  #L2bf142.  v1:= v3.`e.e.a.b.f.o.f.d` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bf146.  call temp:= `size`(v1) @signature `Le/e/a/b/f/o/h;.size:()I` @kind virtual;
  #L2bf14c.  v1:= temp;
  #L2bf14e.  if v0 >= v1 then goto L2bf176;
  #L2bf152.  v0:= v3.`e.e.a.b.f.o.f.b` @type ^`java.lang.Object` @kind object;
  #L2bf156.  v1:= v3.`e.e.a.b.f.o.f.d` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bf15a.  v1:= v1.`e.e.a.b.f.o.h.d` @type ^`java.lang.Object`[] @kind object;
  #L2bf15e.  v2:= v3.`e.e.a.b.f.o.f.c` @type ^`int`;
  #L2bf162.  v1:= v1[v2] @kind object;
  #L2bf166.  call temp:= `a`(v0, v1) @signature `Le/e/a/b/f/o/a0;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2bf16c.  v0:= temp;
  #L2bf16e.  if v0 != 0 then goto L2bf174;
  #L2bf172.  goto L2bf176;
  #L2bf174.  return @kind void;
  #L2bf176.  v0:= v3.`e.e.a.b.f.o.f.d` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bf17a.  v1:= v3.`e.e.a.b.f.o.f.b` @type ^`java.lang.Object` @kind object;
  #L2bf17e.  call temp:= `b`(v0, v1) @signature `Le/e/a/b/f/o/h;.b:(Le/e/a/b/f/o/h;Ljava/lang/Object;)I` @kind static;
  #L2bf184.  v0:= temp;
  #L2bf186.  v3.`e.e.a.b.f.o.f.c` @type ^`int` := v0;
  #L2bf18a.  return @kind void;
}
procedure `java.lang.Object` `getKey`(`e.e.a.b.f.o.f` v1 @kind this) @signature `Le/e/a/b/f/o/f;.getKey:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bf040.  v0:= v1.`e.e.a.b.f.o.f.b` @type ^`java.lang.Object` @kind object;
  #L2bf044.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`e.e.a.b.f.o.f` v2 @kind this) @signature `Le/e/a/b/f/o/f;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2bf058.  v0:= v2.`e.e.a.b.f.o.f.d` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bf05c.  call temp:= `b`(v0) @signature `Le/e/a/b/f/o/h;.b:()Ljava/util/Map;` @kind virtual;
  #L2bf062.  v0:= temp @kind object;
  #L2bf064.  if v0 == 0 then goto L2bf076;
  #L2bf068.  v1:= v2.`e.e.a.b.f.o.f.b` @type ^`java.lang.Object` @kind object;
  #L2bf06c.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2bf072.  v0:= temp @kind object;
  #L2bf074.  return v0 @kind object;
  #L2bf076.  call `a`(v2) @signature `Le/e/a/b/f/o/f;.a:()V` @kind direct;
  #L2bf07c.  v0:= v2.`e.e.a.b.f.o.f.c` @type ^`int`;
  #L2bf080.  v1:= -1I;
  #L2bf082.  if v0 != v1 then goto L2bf08a;
  #L2bf086.  v0:= 0I;
  #L2bf088.  return v0 @kind object;
  #L2bf08a.  v1:= v2.`e.e.a.b.f.o.f.d` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bf08e.  v1:= v1.`e.e.a.b.f.o.h.e` @type ^`java.lang.Object`[] @kind object;
  #L2bf092.  v0:= v1[v0] @kind object;
  #L2bf096.  return v0 @kind object;
}
procedure `java.lang.Object` `setValue`(`e.e.a.b.f.o.f` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/o/f;.setValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2bf0a8.  v0:= v3.`e.e.a.b.f.o.f.d` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bf0ac.  call temp:= `b`(v0) @signature `Le/e/a/b/f/o/h;.b:()Ljava/util/Map;` @kind virtual;
  #L2bf0b2.  v0:= temp @kind object;
  #L2bf0b4.  if v0 == 0 then goto L2bf0c6;
  #L2bf0b8.  v1:= v3.`e.e.a.b.f.o.f.b` @type ^`java.lang.Object` @kind object;
  #L2bf0bc.  call temp:= `put`(v0, v1, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2bf0c2.  v4:= temp @kind object;
  #L2bf0c4.  return v4 @kind object;
  #L2bf0c6.  call `a`(v3) @signature `Le/e/a/b/f/o/f;.a:()V` @kind direct;
  #L2bf0cc.  v0:= v3.`e.e.a.b.f.o.f.c` @type ^`int`;
  #L2bf0d0.  v1:= -1I;
  #L2bf0d2.  if v0 != v1 then goto L2bf0e8;
  #L2bf0d6.  v0:= v3.`e.e.a.b.f.o.f.d` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bf0da.  v1:= v3.`e.e.a.b.f.o.f.b` @type ^`java.lang.Object` @kind object;
  #L2bf0de.  call temp:= `put`(v0, v1, v4) @signature `Le/e/a/b/f/o/h;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2bf0e4.  v4:= 0I;
  #L2bf0e6.  return v4 @kind object;
  #L2bf0e8.  v1:= v3.`e.e.a.b.f.o.f.d` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bf0ec.  v1:= v1.`e.e.a.b.f.o.h.e` @type ^`java.lang.Object`[] @kind object;
  #L2bf0f0.  v2:= v1[v0] @kind object;
  #L2bf0f4.  v1[v0]:= v4 @kind object;
  #L2bf0f8.  return v2 @kind object;
}
