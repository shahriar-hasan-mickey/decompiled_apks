record `e.e.a.b.f.n.eu` @kind class @AccessFlag PUBLIC_ABSTRACT extends `e.e.a.b.f.n.au` @kind class, `java.util.List` @kind interface, `java.util.RandomAccess` @kind interface {
}
global `e.e.a.b.f.n.nu` `@@e.e.a.b.f.n.eu.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/n/eu;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2abd5c.  v0:= new `e.e.a.b.f.n.cu`;
  #L2abd60.  v1:= `@@e.e.a.b.f.n.ju.f` @type ^`e.e.a.b.f.n.eu` @kind object;
  #L2abd64.  v2:= 0I;
  #L2abd66.  call `<init>`(v0, v1, v2) @signature `Le/e/a/b/f/n/cu;.<init>:(Le/e/a/b/f/n/eu;I)V` @kind direct;
  #L2abd6c.  `@@e.e.a.b.f.n.eu.c` @type ^`e.e.a.b.f.n.nu` := v0 @kind object;
  #L2abd70.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.n.eu` v0 @kind this) @signature `Le/e/a/b/f/n/eu;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2abd84.  call `<init>`(v0) @signature `Le/e/a/b/f/n/au;.<init>:()V` @kind direct;
  #L2abd8a.  return @kind void;
}
procedure `e.e.a.b.f.n.eu` `a`(`java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/n/eu;.a:(Ljava/lang/Object;)Le/e/a/b/f/n/eu;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2abae4.  v0:= 1I;
  #L2abae6.  v1:= new `java.lang.Object`[v0];
  #L2abaea.  v2:= 0I;
  #L2abaec.  v1[v2]:= v3 @kind object;
  #L2abaf0.  call temp:= `a`(v1, v0) @signature `Le/e/a/b/f/n/iu;.a:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L2abaf6.  call temp:= `b`(v1, v0) @signature `Le/e/a/b/f/n/eu;.b:([Ljava/lang/Object;I)Le/e/a/b/f/n/eu;` @kind static;
  #L2abafc.  v3:= temp @kind object;
  #L2abafe.  return v3 @kind object;
}
procedure `e.e.a.b.f.n.eu` `a`(`java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/n/eu;.a:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Le/e/a/b/f/n/eu;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2abb10.  v0:= 3I;
  #L2abb12.  v1:= new `java.lang.Object`[v0];
  #L2abb16.  v2:= 0I;
  #L2abb18.  v1[v2]:= v3 @kind object;
  #L2abb1c.  v3:= 1I;
  #L2abb1e.  v1[v3]:= v4 @kind object;
  #L2abb22.  v3:= 2I;
  #L2abb24.  v1[v3]:= v5 @kind object;
  #L2abb28.  call temp:= `a`(v1, v0) @signature `Le/e/a/b/f/n/iu;.a:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L2abb2e.  call temp:= `b`(v1, v0) @signature `Le/e/a/b/f/n/eu;.b:([Ljava/lang/Object;I)Le/e/a/b/f/n/eu;` @kind static;
  #L2abb34.  v3:= temp @kind object;
  #L2abb36.  return v3 @kind object;
}
procedure `e.e.a.b.f.n.eu` `b`(`java.lang.Object`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/n/eu;.b:([Ljava/lang/Object;I)Le/e/a/b/f/n/eu;` @AccessFlag STATIC {
    temp;
    v0;

  #L2abb48.  if v2 != 0 then goto L2abb52;
  #L2abb4c.  v1:= `@@e.e.a.b.f.n.ju.f` @type ^`e.e.a.b.f.n.eu` @kind object;
  #L2abb50.  return v1 @kind object;
  #L2abb52.  v0:= new `e.e.a.b.f.n.ju`;
  #L2abb56.  call `<init>`(v0, v1, v2) @signature `Le/e/a/b/f/n/ju;.<init>:([Ljava/lang/Object;I)V` @kind direct;
  #L2abb5c.  return v0 @kind object;
}
procedure `e.e.a.b.f.n.eu` `u`() @signature `Le/e/a/b/f/n/eu;.u:()Le/e/a/b/f/n/eu;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2abacc.  v0:= `@@e.e.a.b.f.n.ju.f` @type ^`e.e.a.b.f.n.eu` @kind object;
  #L2abad0.  return v0 @kind object;
}
procedure `int` `a`(`e.e.a.b.f.n.eu` v2 @kind this, `java.lang.Object`[] v3 @kind object, `int` v4 ) @signature `Le/e/a/b/f/n/eu;.a:([Ljava/lang/Object;I)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2abc80.  call temp:= `size`(v2) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2abc86.  v4:= temp;
  #L2abc88.  v0:= 0I;
  #L2abc8a.  if v0 >= v4 then goto L2abca0;
  #L2abc8e.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2abc94.  v1:= temp @kind object;
  #L2abc96.  v3[v0]:= v1 @kind object;
  #L2abc9a.  v0:= v0 + 1;
  #L2abc9e.  goto L2abc8a;
  #L2abca0.  return v4;
}
procedure `e.e.a.b.f.n.eu` `a`(`e.e.a.b.f.n.eu` v1 @kind this, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/n/eu;.a:(II)Le/e/a/b/f/n/eu;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2aba88.  call temp:= `size`(v1) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2aba8e.  v0:= temp;
  #L2aba90.  call `a`(v2, v3, v0) @signature `Le/e/a/b/f/n/pt;.a:(III)V` @kind static;
  #L2aba96.  v3:= v3 - v2 @kind int;
  #L2aba98.  call temp:= `size`(v1) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2aba9e.  v0:= temp;
  #L2abaa0.  if v3 != v0 then goto L2abaa6;
  #L2abaa4.  return v1 @kind object;
  #L2abaa6.  if v3 != 0 then goto L2abab0;
  #L2abaaa.  v2:= `@@e.e.a.b.f.n.ju.f` @type ^`e.e.a.b.f.n.eu` @kind object;
  #L2abaae.  return v2 @kind object;
  #L2abab0.  v0:= new `e.e.a.b.f.n.du`;
  #L2abab4.  call `<init>`(v0, v1, v2, v3) @signature `Le/e/a/b/f/n/du;.<init>:(Le/e/a/b/f/n/eu;II)V` @kind direct;
  #L2ababa.  return v0 @kind object;
}
procedure `void` `add`(`e.e.a.b.f.n.eu` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/n/eu;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2abd9c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2abda0.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2abda6.  throw v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.n.eu` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/n/eu;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2ab97c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2ab980.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2ab986.  throw v1;
}
procedure `boolean` `contains`(`e.e.a.b.f.n.eu` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/n/eu;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2ab998.  call temp:= `indexOf`(v0, v1) @signature `Le/e/a/b/f/n/eu;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L2ab99e.  v1:= temp;
  #L2ab9a0.  if v1 < 0 then goto L2ab9a8;
  #L2ab9a4.  v1:= 1I;
  #L2ab9a6.  return v1;
  #L2ab9a8.  v1:= 0I;
  #L2ab9aa.  return v1;
}
procedure `boolean` `equals`(`e.e.a.b.f.n.eu` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/n/eu;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2ab9bc.  v0:= 1I;
  #L2ab9be.  v1:= 0I;
  #L2ab9c0.  if v7 != v6 then goto L2ab9c8;
  #L2ab9c4.  v1:= 1I;
  #L2ab9c6.  goto L2aba74;
  #L2ab9c8.  v2:= instanceof @variable v7 @type ^`java.util.List` @kind boolean;
  #L2ab9cc.  if v2 != 0 then goto L2ab9d2;
  #L2ab9d0.  goto L2aba74;
  #L2ab9d2.  v7:= (`java.util.List`) v7 @kind object;
  #L2ab9d6.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2ab9dc.  v2:= temp;
  #L2ab9de.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2ab9e4.  v3:= temp;
  #L2ab9e6.  if v2 == v3 then goto L2ab9ec;
  #L2ab9ea.  goto L2aba74;
  #L2ab9ec.  v3:= instanceof @variable v7 @type ^`java.util.RandomAccess` @kind boolean;
  #L2ab9f0.  if v3 == 0 then goto L2aba1e;
  #L2ab9f4.  v3:= 0I;
  #L2ab9f6.  if v3 >= v2 then goto L2ab9c4;
  #L2ab9fa.  call temp:= `get`(v6, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2aba00.  v4:= temp @kind object;
  #L2aba02.  call temp:= `get`(v7, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2aba08.  v5:= temp @kind object;
  #L2aba0a.  call temp:= `a`(v4, v5) @signature `Le/e/a/b/f/n/nt;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2aba10.  v4:= temp;
  #L2aba12.  if v4 != 0 then goto L2aba18;
  #L2aba16.  goto L2aba74;
  #L2aba18.  v3:= v3 + 1;
  #L2aba1c.  goto L2ab9f6;
  #L2aba1e.  call temp:= `iterator`(v6) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2aba24.  v2:= temp @kind object;
  #L2aba26.  call temp:= `iterator`(v7) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2aba2c.  v7:= temp @kind object;
  #L2aba2e.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2aba34.  v3:= temp;
  #L2aba36.  if v3 == 0 then goto L2aba66;
  #L2aba3a.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2aba40.  v3:= temp;
  #L2aba42.  if v3 != 0 then goto L2aba48;
  #L2aba46.  goto L2aba74;
  #L2aba48.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2aba4e.  v3:= temp @kind object;
  #L2aba50.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2aba56.  v4:= temp @kind object;
  #L2aba58.  call temp:= `a`(v3, v4) @signature `Le/e/a/b/f/n/nt;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2aba5e.  v3:= temp;
  #L2aba60.  if v3 != 0 then goto L2aba2e;
  #L2aba64.  goto L2aba74;
  #L2aba66.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2aba6c.  v7:= temp;
  #L2aba6e.  if v7 != 0 then goto L2aba74;
  #L2aba72.  goto L2ab9c4;
  #L2aba74.  return v1;
}
procedure `e.e.a.b.f.n.nu` `h`(`e.e.a.b.f.n.eu` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/n/eu;.h:(I)Le/e/a/b/f/n/nu;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2abb70.  call temp:= `size`(v2) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2abb76.  v0:= temp;
  #L2abb78.  v1:= "index" @kind object;
  #L2abb7c.  call temp:= `b`(v3, v0, v1) @signature `Le/e/a/b/f/n/pt;.b:(IILjava/lang/String;)I` @kind static;
  #L2abb82.  call temp:= `isEmpty`(v2) @signature `Ljava/util/AbstractCollection;.isEmpty:()Z` @kind virtual;
  #L2abb88.  v0:= temp;
  #L2abb8a.  if v0 == 0 then goto L2abb94;
  #L2abb8e.  v3:= `@@e.e.a.b.f.n.eu.c` @type ^`e.e.a.b.f.n.nu` @kind object;
  #L2abb92.  return v3 @kind object;
  #L2abb94.  v0:= new `e.e.a.b.f.n.cu`;
  #L2abb98.  call `<init>`(v0, v2, v3) @signature `Le/e/a/b/f/n/cu;.<init>:(Le/e/a/b/f/n/eu;I)V` @kind direct;
  #L2abb9e.  return v0 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.n.eu` v4 @kind this) @signature `Le/e/a/b/f/n/eu;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2abbb0.  call temp:= `size`(v4) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2abbb6.  v0:= temp;
  #L2abbb8.  v1:= 1I;
  #L2abbba.  v2:= 0I;
  #L2abbbc.  if v2 >= v0 then goto L2abbdc;
  #L2abbc0.  v1:= v1 * 31;
  #L2abbc4.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2abbca.  v3:= temp @kind object;
  #L2abbcc.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2abbd2.  v3:= temp;
  #L2abbd4.  v1:= v1 + v3 @kind int;
  #L2abbd6.  v2:= v2 + 1;
  #L2abbda.  goto L2abbbc;
  #L2abbdc.  return v1;
}
procedure `int` `indexOf`(`e.e.a.b.f.n.eu` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/n/eu;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2abbf0.  v0:= -1I;
  #L2abbf2.  if v5 != 0 then goto L2abbf8;
  #L2abbf6.  return v0;
  #L2abbf8.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2abbfe.  v1:= temp;
  #L2abc00.  v2:= 0I;
  #L2abc02.  if v2 >= v1 then goto L2abc24;
  #L2abc06.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2abc0c.  v3:= temp @kind object;
  #L2abc0e.  call temp:= `equals`(v5, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2abc14.  v3:= temp;
  #L2abc16.  if v3 == 0 then goto L2abc1e;
  #L2abc1a.  v0:= v2;
  #L2abc1c.  goto L2abc24;
  #L2abc1e.  v2:= v2 + 1;
  #L2abc22.  goto L2abc02;
  #L2abc24.  return v0;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.n.eu` v1 @kind this) @signature `Le/e/a/b/f/n/eu;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L2abcec.  v0:= 0I;
  #L2abcee.  call temp:= `h`(v1, v0) @signature `Le/e/a/b/f/n/eu;.h:(I)Le/e/a/b/f/n/nu;` @kind virtual;
  #L2abcf4.  v0:= temp @kind object;
  #L2abcf6.  return v0 @kind object;
}
procedure `int` `lastIndexOf`(`e.e.a.b.f.n.eu` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/n/eu;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2abc38.  v0:= -1I;
  #L2abc3a.  if v4 != 0 then goto L2abc40;
  #L2abc3e.  return v0;
  #L2abc40.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2abc46.  v1:= temp;
  #L2abc48.  v1:= v1 + v0 @kind int;
  #L2abc4a.  if v1 < 0 then goto L2abc6c;
  #L2abc4e.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2abc54.  v2:= temp @kind object;
  #L2abc56.  call temp:= `equals`(v4, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2abc5c.  v2:= temp;
  #L2abc5e.  if v2 == 0 then goto L2abc66;
  #L2abc62.  v0:= v1;
  #L2abc64.  goto L2abc6c;
  #L2abc66.  v1:= v1 + -1;
  #L2abc6a.  goto L2abc4a;
  #L2abc6c.  return v0;
}
procedure `java.util.ListIterator` `listIterator`(`e.e.a.b.f.n.eu` v1 @kind this) @signature `Le/e/a/b/f/n/eu;.listIterator:()Ljava/util/ListIterator;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L2abd24.  v0:= 0I;
  #L2abd26.  call temp:= `h`(v1, v0) @signature `Le/e/a/b/f/n/eu;.h:(I)Le/e/a/b/f/n/nu;` @kind virtual;
  #L2abd2c.  v0:= temp @kind object;
  #L2abd2e.  return v0 @kind object;
}
procedure `java.util.ListIterator` `listIterator`(`e.e.a.b.f.n.eu` v0 @kind this, `int` v1 ) @signature `Le/e/a/b/f/n/eu;.listIterator:(I)Ljava/util/ListIterator;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L2abd40.  call temp:= `h`(v0, v1) @signature `Le/e/a/b/f/n/eu;.h:(I)Le/e/a/b/f/n/nu;` @kind virtual;
  #L2abd46.  v1:= temp @kind object;
  #L2abd48.  return v1 @kind object;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.n.eu` v0 @kind this, `int` v1 ) @signature `Le/e/a/b/f/n/eu;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2abcb4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2abcb8.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2abcbe.  throw v1;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.n.eu` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/n/eu;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2abcd0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2abcd4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2abcda.  throw v1;
}
procedure `java.util.List` `subList`(`e.e.a.b.f.n.eu` v0 @kind this, `int` v1 , `int` v2 ) @signature `Le/e/a/b/f/n/eu;.subList:(II)Ljava/util/List;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2abd08.  call temp:= `a`(v0, v1, v2) @signature `Le/e/a/b/f/n/eu;.a:(II)Le/e/a/b/f/n/eu;` @kind virtual;
  #L2abd0e.  v1:= temp @kind object;
  #L2abd10.  return v1 @kind object;
}
