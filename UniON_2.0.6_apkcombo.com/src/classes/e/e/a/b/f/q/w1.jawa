record `e.e.a.b.f.q.w1` @kind class @AccessFlag FINAL extends `java.util.AbstractSet` @kind class {
  `e.e.a.b.f.q.x1` `e.e.a.b.f.q.w1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.q.w1` v0 @kind this, `e.e.a.b.f.q.x1` v1 @kind object, `e.e.a.b.f.q.q1` v2 @kind object) @signature `Le/e/a/b/f/q/w1;.<init>:(Le/e/a/b/f/q/x1;Le/e/a/b/f/q/q1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2dc70c.  v0.`e.e.a.b.f.q.w1.b` @type ^`e.e.a.b.f.q.x1` := v1 @kind object;
  #L2dc710.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L2dc716.  return @kind void;
}
procedure `boolean` `add`(`e.e.a.b.f.q.w1` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/q/w1;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2dc5f4.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L2dc5f8.  call temp:= `contains`(v2, v3) @signature `Le/e/a/b/f/q/w1;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L2dc5fe.  v0:= temp;
  #L2dc600.  if v0 != 0 then goto L2dc626;
  #L2dc604.  v0:= v2.`e.e.a.b.f.q.w1.b` @type ^`e.e.a.b.f.q.x1` @kind object;
  #L2dc608.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2dc60e.  v1:= temp @kind object;
  #L2dc610.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L2dc614.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2dc61a.  v3:= temp @kind object;
  #L2dc61c.  call temp:= `a`(v0, v1, v3) @signature `Le/e/a/b/f/q/x1;.a:(Ljava/lang/Comparable;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2dc622.  v3:= 1I;
  #L2dc624.  return v3;
  #L2dc626.  v3:= 0I;
  #L2dc628.  return v3;
}
procedure `void` `clear`(`e.e.a.b.f.q.w1` v1 @kind this) @signature `Le/e/a/b/f/q/w1;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2dc728.  v0:= v1.`e.e.a.b.f.q.w1.b` @type ^`e.e.a.b.f.q.x1` @kind object;
  #L2dc72c.  call `clear`(v0) @signature `Le/e/a/b/f/q/x1;.clear:()V` @kind virtual;
  #L2dc732.  return @kind void;
}
procedure `boolean` `contains`(`e.e.a.b.f.q.w1` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/q/w1;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2dc63c.  v4:= (`java.util.Map$Entry`) v4 @kind object;
  #L2dc640.  v0:= v3.`e.e.a.b.f.q.w1.b` @type ^`e.e.a.b.f.q.x1` @kind object;
  #L2dc644.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2dc64a.  v1:= temp @kind object;
  #L2dc64c.  call temp:= `get`(v0, v1) @signature `Le/e/a/b/f/q/x1;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2dc652.  v0:= temp @kind object;
  #L2dc654.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2dc65a.  v4:= temp @kind object;
  #L2dc65c.  v1:= 0I;
  #L2dc65e.  v2:= 1I;
  #L2dc660.  if v0 == v4 then goto L2dc67a;
  #L2dc664.  if v0 == 0 then goto L2dc678;
  #L2dc668.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2dc66e.  v4:= temp;
  #L2dc670.  if v4 == 0 then goto L2dc676;
  #L2dc674.  goto L2dc67a;
  #L2dc676.  return v1;
  #L2dc678.  v2:= 0I;
  #L2dc67a.  return v2;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.q.w1` v3 @kind this) @signature `Le/e/a/b/f/q/w1;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2dc6e8.  v0:= new `e.e.a.b.f.q.v1`;
  #L2dc6ec.  v1:= v3.`e.e.a.b.f.q.w1.b` @type ^`e.e.a.b.f.q.x1` @kind object;
  #L2dc6f0.  v2:= 0I;
  #L2dc6f2.  call `<init>`(v0, v1, v2) @signature `Le/e/a/b/f/q/v1;.<init>:(Le/e/a/b/f/q/x1;Le/e/a/b/f/q/q1;)V` @kind direct;
  #L2dc6f8.  return v0 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.q.w1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/q/w1;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2dc68c.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L2dc690.  call temp:= `contains`(v1, v2) @signature `Le/e/a/b/f/q/w1;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L2dc696.  v0:= temp;
  #L2dc698.  if v0 == 0 then goto L2dc6b2;
  #L2dc69c.  v0:= v1.`e.e.a.b.f.q.w1.b` @type ^`e.e.a.b.f.q.x1` @kind object;
  #L2dc6a0.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2dc6a6.  v2:= temp @kind object;
  #L2dc6a8.  call temp:= `remove`(v0, v2) @signature `Le/e/a/b/f/q/x1;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2dc6ae.  v2:= 1I;
  #L2dc6b0.  return v2;
  #L2dc6b2.  v2:= 0I;
  #L2dc6b4.  return v2;
}
procedure `int` `size`(`e.e.a.b.f.q.w1` v1 @kind this) @signature `Le/e/a/b/f/q/w1;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2dc6c8.  v0:= v1.`e.e.a.b.f.q.w1.b` @type ^`e.e.a.b.f.q.x1` @kind object;
  #L2dc6cc.  call temp:= `size`(v0) @signature `Le/e/a/b/f/q/x1;.size:()I` @kind virtual;
  #L2dc6d2.  v0:= temp;
  #L2dc6d4.  return v0;
}
