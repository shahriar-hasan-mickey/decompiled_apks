record `e.e.a.b.f.n.tt` @kind class @AccessFlag ABSTRACT extends `e.e.a.b.f.n.ht` @kind class {
  `java.lang.CharSequence` `e.e.a.b.f.n.tt.d` @AccessFlag FINAL;
  `int` `e.e.a.b.f.n.tt.e` @AccessFlag ;
  `int` `e.e.a.b.f.n.tt.f` @AccessFlag ;
}
procedure `void` `<init>`(`e.e.a.b.f.n.tt` v1 @kind this, `e.e.a.b.f.n.ut` v2 @kind object, `java.lang.CharSequence` v3 @kind object) @signature `Le/e/a/b/f/n/tt;.<init>:(Le/e/a/b/f/n/ut;Ljava/lang/CharSequence;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L2ab050.  call `<init>`(v1) @signature `Le/e/a/b/f/n/ht;.<init>:()V` @kind direct;
  #L2ab056.  v0:= 0I;
  #L2ab058.  v1.`e.e.a.b.f.n.tt.e` @type ^`int` := v0;
  #L2ab05c.  call temp:= `a`(v2) @signature `Le/e/a/b/f/n/ut;.a:(Le/e/a/b/f/n/ut;)Le/e/a/b/f/n/lt;` @kind static;
  #L2ab062.  v2:= 2147483647I;
  #L2ab068.  v1.`e.e.a.b.f.n.tt.f` @type ^`int` := v2;
  #L2ab06c.  v1.`e.e.a.b.f.n.tt.d` @type ^`java.lang.CharSequence` := v3 @kind object;
  #L2ab070.  return @kind void;
}
procedure `int` `a`(`int` v0 ) @signature `Le/e/a/b/f/n/tt;.a:(I)I` @AccessFlag ABSTRACT {

  # return;
}
procedure `int` `b`(`int` v0 ) @signature `Le/e/a/b/f/n/tt;.b:(I)I` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.lang.Object` `zza`(`e.e.a.b.f.n.tt` v5 @kind this) @signature `Le/e/a/b/f/n/tt;.zza:()Ljava/lang/Object;` @AccessFlag PROTECTED_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2aaf70.  v0:= v5.`e.e.a.b.f.n.tt.e` @type ^`int`;
  #L2aaf74.  v1:= v5.`e.e.a.b.f.n.tt.e` @type ^`int`;
  #L2aaf78.  v2:= -1I;
  #L2aaf7a.  if v1 == v2 then goto L2ab036;
  #L2aaf7e.  call temp:= `a`(v5, v1) @signature `Le/e/a/b/f/n/tt;.a:(I)I` @kind virtual;
  #L2aaf84.  v1:= temp;
  #L2aaf86.  if v1 != v2 then goto L2aaf9e;
  #L2aaf8a.  v1:= v5.`e.e.a.b.f.n.tt.d` @type ^`java.lang.CharSequence` @kind object;
  #L2aaf8e.  call temp:= `length`(v1) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L2aaf94.  v1:= temp;
  #L2aaf96.  v5.`e.e.a.b.f.n.tt.e` @type ^`int` := v2;
  #L2aaf9a.  v3:= -1I;
  #L2aaf9c.  goto L2aafaa;
  #L2aaf9e.  call temp:= `b`(v5, v1) @signature `Le/e/a/b/f/n/tt;.b:(I)I` @kind virtual;
  #L2aafa4.  v3:= temp;
  #L2aafa6.  v5.`e.e.a.b.f.n.tt.e` @type ^`int` := v3;
  #L2aafaa.  if v3 != v0 then goto L2aafcc;
  #L2aafae.  v3:= v3 + 1;
  #L2aafb2.  v5.`e.e.a.b.f.n.tt.e` @type ^`int` := v3;
  #L2aafb6.  v1:= v5.`e.e.a.b.f.n.tt.d` @type ^`java.lang.CharSequence` @kind object;
  #L2aafba.  call temp:= `length`(v1) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L2aafc0.  v1:= temp;
  #L2aafc2.  if v3 <= v1 then goto L2aaf74;
  #L2aafc6.  v5.`e.e.a.b.f.n.tt.e` @type ^`int` := v2;
  #L2aafca.  goto L2aaf74;
  #L2aafcc.  if v0 >= v1 then goto L2aafda;
  #L2aafd0.  v3:= v5.`e.e.a.b.f.n.tt.d` @type ^`java.lang.CharSequence` @kind object;
  #L2aafd4.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2aafda.  if v0 >= v1 then goto L2aafec;
  #L2aafde.  v3:= v5.`e.e.a.b.f.n.tt.d` @type ^`java.lang.CharSequence` @kind object;
  #L2aafe2.  v4:= v1 + -1;
  #L2aafe6.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2aafec.  v3:= v5.`e.e.a.b.f.n.tt.f` @type ^`int`;
  #L2aaff0.  v4:= 1I;
  #L2aaff2.  if v3 != v4 then goto L2ab01a;
  #L2aaff6.  v1:= v5.`e.e.a.b.f.n.tt.d` @type ^`java.lang.CharSequence` @kind object;
  #L2aaffa.  call temp:= `length`(v1) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L2ab000.  v1:= temp;
  #L2ab002.  v5.`e.e.a.b.f.n.tt.e` @type ^`int` := v2;
  #L2ab006.  if v1 <= v0 then goto L2ab020;
  #L2ab00a.  v2:= v5.`e.e.a.b.f.n.tt.d` @type ^`java.lang.CharSequence` @kind object;
  #L2ab00e.  v3:= v1 + -1;
  #L2ab012.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2ab018.  goto L2ab020;
  #L2ab01a.  v3:= v3 + v2 @kind int;
  #L2ab01c.  v5.`e.e.a.b.f.n.tt.f` @type ^`int` := v3;
  #L2ab020.  v2:= v5.`e.e.a.b.f.n.tt.d` @type ^`java.lang.CharSequence` @kind object;
  #L2ab024.  call temp:= `subSequence`(v2, v0, v1) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L2ab02a.  v0:= temp @kind object;
  #L2ab02c.  call temp:= `toString`(v0) @signature `Ljava/lang/CharSequence;.toString:()Ljava/lang/String;` @kind interface;
  #L2ab032.  v0:= temp @kind object;
  #L2ab034.  goto L2ab03e;
  #L2ab036.  call temp:= `a`(v5) @signature `Le/e/a/b/f/n/ht;.a:()Ljava/lang/Object;` @kind virtual;
  #L2ab03c.  v0:= 0I;
  #L2ab03e.  return v0 @kind object;
}
