record `e.e.a.b.f.i.c` @kind class @AccessFlag ABSTRACT extends `e.e.a.b.f.i.q` @kind class {
  `int` `e.e.a.b.f.i.c.b` @AccessFlag PRIVATE_FINAL;
  `int` `e.e.a.b.f.i.c.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.f.i.c` v1 @kind this, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/i/c;.<init>:(II)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L21bcfc.  call `<init>`(v1) @signature `Le/e/a/b/f/i/q;.<init>:()V` @kind direct;
  #L21bd02.  v0:= "index" @kind object;
  #L21bd06.  call temp:= `b`(v3, v2, v0) @signature `Le/e/a/b/f/i/y0;.b:(IILjava/lang/String;)I` @kind static;
  #L21bd0c.  v1.`e.e.a.b.f.i.c.b` @type ^`int` := v2;
  #L21bd10.  v1.`e.e.a.b.f.i.c.c` @type ^`int` := v3;
  #L21bd14.  return @kind void;
}
procedure `java.lang.Object` `a`(`int` v0 ) @signature `Le/e/a/b/f/i/c;.a:(I)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `hasNext`(`e.e.a.b.f.i.c` v2 @kind this) @signature `Le/e/a/b/f/i/c;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L21bc04.  v0:= v2.`e.e.a.b.f.i.c.c` @type ^`int`;
  #L21bc08.  v1:= v2.`e.e.a.b.f.i.c.b` @type ^`int`;
  #L21bc0c.  if v0 >= v1 then goto L21bc14;
  #L21bc10.  v0:= 1I;
  #L21bc12.  return v0;
  #L21bc14.  v0:= 0I;
  #L21bc16.  return v0;
}
procedure `boolean` `hasPrevious`(`e.e.a.b.f.i.c` v1 @kind this) @signature `Le/e/a/b/f/i/c;.hasPrevious:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L21bc28.  v0:= v1.`e.e.a.b.f.i.c.c` @type ^`int`;
  #L21bc2c.  if v0 <= 0 then goto L21bc34;
  #L21bc30.  v0:= 1I;
  #L21bc32.  return v0;
  #L21bc34.  v0:= 0I;
  #L21bc36.  return v0;
}
procedure `java.lang.Object` `next`(`e.e.a.b.f.i.c` v2 @kind this) @signature `Le/e/a/b/f/i/c;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L21bc7c.  call temp:= `hasNext`(v2) @signature `Le/e/a/b/f/i/c;.hasNext:()Z` @kind virtual;
  #L21bc82.  v0:= temp;
  #L21bc84.  if v0 == 0 then goto L21bc9e;
  #L21bc88.  v0:= v2.`e.e.a.b.f.i.c.c` @type ^`int`;
  #L21bc8c.  v1:= v0 + 1;
  #L21bc90.  v2.`e.e.a.b.f.i.c.c` @type ^`int` := v1;
  #L21bc94.  call temp:= `a`(v2, v0) @signature `Le/e/a/b/f/i/c;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L21bc9a.  v0:= temp @kind object;
  #L21bc9c.  return v0 @kind object;
  #L21bc9e.  v0:= new `java.util.NoSuchElementException`;
  #L21bca2.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L21bca8.  throw v0;
}
procedure `int` `nextIndex`(`e.e.a.b.f.i.c` v1 @kind this) @signature `Le/e/a/b/f/i/c;.nextIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L21bc48.  v0:= v1.`e.e.a.b.f.i.c.c` @type ^`int`;
  #L21bc4c.  return v0;
}
procedure `java.lang.Object` `previous`(`e.e.a.b.f.i.c` v1 @kind this) @signature `Le/e/a/b/f/i/c;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L21bcbc.  call temp:= `hasPrevious`(v1) @signature `Le/e/a/b/f/i/c;.hasPrevious:()Z` @kind virtual;
  #L21bcc2.  v0:= temp;
  #L21bcc4.  if v0 == 0 then goto L21bcde;
  #L21bcc8.  v0:= v1.`e.e.a.b.f.i.c.c` @type ^`int`;
  #L21bccc.  v0:= v0 + -1;
  #L21bcd0.  v1.`e.e.a.b.f.i.c.c` @type ^`int` := v0;
  #L21bcd4.  call temp:= `a`(v1, v0) @signature `Le/e/a/b/f/i/c;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L21bcda.  v0:= temp @kind object;
  #L21bcdc.  return v0 @kind object;
  #L21bcde.  v0:= new `java.util.NoSuchElementException`;
  #L21bce2.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L21bce8.  throw v0;
}
procedure `int` `previousIndex`(`e.e.a.b.f.i.c` v1 @kind this) @signature `Le/e/a/b/f/i/c;.previousIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L21bc60.  v0:= v1.`e.e.a.b.f.i.c.c` @type ^`int`;
  #L21bc64.  v0:= v0 + -1;
  #L21bc68.  return v0;
}
