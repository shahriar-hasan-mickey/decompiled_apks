record `e.e.a.b.f.k.t` @kind class @AccessFlag ABSTRACT extends `e.e.a.b.f.k.z1` @kind class {
  `int` `e.e.a.b.f.k.t.b` @AccessFlag PRIVATE_FINAL;
  `int` `e.e.a.b.f.k.t.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.f.k.t` v1 @kind this, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/k/t;.<init>:(II)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L2436b8.  call `<init>`(v1) @signature `Le/e/a/b/f/k/z1;.<init>:()V` @kind direct;
  #L2436be.  v0:= "index" @kind object;
  #L2436c2.  call temp:= `b`(v3, v2, v0) @signature `Le/e/a/b/f/k/r;.b:(IILjava/lang/String;)I` @kind static;
  #L2436c8.  v1.`e.e.a.b.f.k.t.b` @type ^`int` := v2;
  #L2436cc.  v1.`e.e.a.b.f.k.t.c` @type ^`int` := v3;
  #L2436d0.  return @kind void;
}
procedure `java.lang.Object` `a`(`int` v0 ) @signature `Le/e/a/b/f/k/t;.a:(I)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `hasNext`(`e.e.a.b.f.k.t` v2 @kind this) @signature `Le/e/a/b/f/k/t;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2435c0.  v0:= v2.`e.e.a.b.f.k.t.c` @type ^`int`;
  #L2435c4.  v1:= v2.`e.e.a.b.f.k.t.b` @type ^`int`;
  #L2435c8.  if v0 >= v1 then goto L2435d0;
  #L2435cc.  v0:= 1I;
  #L2435ce.  return v0;
  #L2435d0.  v0:= 0I;
  #L2435d2.  return v0;
}
procedure `boolean` `hasPrevious`(`e.e.a.b.f.k.t` v1 @kind this) @signature `Le/e/a/b/f/k/t;.hasPrevious:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2435e4.  v0:= v1.`e.e.a.b.f.k.t.c` @type ^`int`;
  #L2435e8.  if v0 <= 0 then goto L2435f0;
  #L2435ec.  v0:= 1I;
  #L2435ee.  return v0;
  #L2435f0.  v0:= 0I;
  #L2435f2.  return v0;
}
procedure `java.lang.Object` `next`(`e.e.a.b.f.k.t` v2 @kind this) @signature `Le/e/a/b/f/k/t;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L243638.  call temp:= `hasNext`(v2) @signature `Le/e/a/b/f/k/t;.hasNext:()Z` @kind virtual;
  #L24363e.  v0:= temp;
  #L243640.  if v0 == 0 then goto L24365a;
  #L243644.  v0:= v2.`e.e.a.b.f.k.t.c` @type ^`int`;
  #L243648.  v1:= v0 + 1;
  #L24364c.  v2.`e.e.a.b.f.k.t.c` @type ^`int` := v1;
  #L243650.  call temp:= `a`(v2, v0) @signature `Le/e/a/b/f/k/t;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L243656.  v0:= temp @kind object;
  #L243658.  return v0 @kind object;
  #L24365a.  v0:= new `java.util.NoSuchElementException`;
  #L24365e.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L243664.  throw v0;
}
procedure `int` `nextIndex`(`e.e.a.b.f.k.t` v1 @kind this) @signature `Le/e/a/b/f/k/t;.nextIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L243604.  v0:= v1.`e.e.a.b.f.k.t.c` @type ^`int`;
  #L243608.  return v0;
}
procedure `java.lang.Object` `previous`(`e.e.a.b.f.k.t` v1 @kind this) @signature `Le/e/a/b/f/k/t;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L243678.  call temp:= `hasPrevious`(v1) @signature `Le/e/a/b/f/k/t;.hasPrevious:()Z` @kind virtual;
  #L24367e.  v0:= temp;
  #L243680.  if v0 == 0 then goto L24369a;
  #L243684.  v0:= v1.`e.e.a.b.f.k.t.c` @type ^`int`;
  #L243688.  v0:= v0 + -1;
  #L24368c.  v1.`e.e.a.b.f.k.t.c` @type ^`int` := v0;
  #L243690.  call temp:= `a`(v1, v0) @signature `Le/e/a/b/f/k/t;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L243696.  v0:= temp @kind object;
  #L243698.  return v0 @kind object;
  #L24369a.  v0:= new `java.util.NoSuchElementException`;
  #L24369e.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2436a4.  throw v0;
}
procedure `int` `previousIndex`(`e.e.a.b.f.k.t` v1 @kind this) @signature `Le/e/a/b/f/k/t;.previousIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L24361c.  v0:= v1.`e.e.a.b.f.k.t.c` @type ^`int`;
  #L243620.  v0:= v0 + -1;
  #L243624.  return v0;
}
