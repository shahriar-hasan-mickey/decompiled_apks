record `e.e.a.b.f.u.j3` @kind class @AccessFlag FINAL extends `e.e.a.b.f.u.e3` @kind class, `e.e.a.b.f.u.c5` @kind interface, `e.e.a.b.f.u.m6` @kind interface, `java.util.RandomAccess` @kind interface {
  `boolean`[] `e.e.a.b.f.u.j3.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.u.j3.d` @AccessFlag PRIVATE;
}
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/u/j3;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3268b4.  v0:= new `e.e.a.b.f.u.j3`;
  #L3268b8.  v1:= 0I;
  #L3268ba.  v2:= new `boolean`[v1];
  #L3268be.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/u/j3;.<init>:([ZI)V` @kind direct;
  #L3268c4.  call `zzb`(v0) @signature `Le/e/a/b/f/u/e3;.zzb:()V` @kind virtual;
  #L3268ca.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.u.j3` v2 @kind this) @signature `Le/e/a/b/f/u/j3;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3268dc.  v0:= 10I;
  #L3268e0.  v0:= new `boolean`[v0];
  #L3268e4.  v1:= 0I;
  #L3268e6.  call `<init>`(v2, v0, v1) @signature `Le/e/a/b/f/u/j3;.<init>:([ZI)V` @kind direct;
  #L3268ec.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.u.j3` v0 @kind this, `boolean`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/u/j3;.<init>:([ZI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L326900.  call `<init>`(v0) @signature `Le/e/a/b/f/u/e3;.<init>:()V` @kind direct;
  #L326906.  v0.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] := v1 @kind object;
  #L32690a.  v0.`e.e.a.b.f.u.j3.d` @type ^`int` := v2;
  #L32690e.  return @kind void;
}
procedure `void` `b`(`e.e.a.b.f.u.j3` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/u/j3;.b:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L326a78.  if v2 < 0 then goto L326a86;
  #L326a7c.  v0:= v1.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L326a80.  if v2 >= v0 then goto L326a86;
  #L326a84.  return @kind void;
  #L326a86.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L326a8a.  call temp:= `h`(v1, v2) @signature `Le/e/a/b/f/u/j3;.h:(I)Ljava/lang/String;` @kind direct;
  #L326a90.  v2:= temp @kind object;
  #L326a92.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L326a98.  throw v0;
}
procedure `java.lang.String` `h`(`e.e.a.b.f.u.j3` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/u/j3;.h:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L326868.  v0:= v3.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L32686c.  v1:= new `java.lang.StringBuilder`;
  #L326870.  v2:= 35I;
  #L326874.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L32687a.  v2:= "Index:" @kind object;
  #L32687e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L326884.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32688a.  v4:= ", Size:" @kind object;
  #L32688e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L326894.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32689a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3268a0.  v4:= temp @kind object;
  #L3268a2.  return v4 @kind object;
}
procedure `e.e.a.b.f.u.c5` `a`(`e.e.a.b.f.u.j3` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/u/j3;.a:(I)Le/e/a/b/f/u/c5;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L3266bc.  v0:= v2.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L3266c0.  if v3 < v0 then goto L3266e0;
  #L3266c4.  v0:= new `e.e.a.b.f.u.j3`;
  #L3266c8.  v1:= v2.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] @kind object;
  #L3266cc.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([ZI)[Z` @kind static;
  #L3266d2.  v3:= temp @kind object;
  #L3266d4.  v1:= v2.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L3266d8.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/u/j3;.<init>:([ZI)V` @kind direct;
  #L3266de.  return v0 @kind object;
  #L3266e0.  v3:= new `java.lang.IllegalArgumentException`;
  #L3266e4.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3266ea.  throw v3;
}
procedure `void` `a`(`e.e.a.b.f.u.j3` v4 @kind this, `boolean` v5 ) @signature `Le/e/a/b/f/u/j3;.a:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L326a20.  call `d`(v4) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L326a26.  v0:= v4.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L326a2a.  v1:= v4.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] @kind object;
  #L326a2e.  v2:= length @variable v1;
  #L326a30.  if v0 != v2 then goto L326a50;
  #L326a34.  v2:= v0 * 3;
  #L326a38.  v2:= v2 / 2;
  #L326a3c.  v2:= v2 + 1;
  #L326a40.  v2:= new `boolean`[v2];
  #L326a44.  v3:= 0I;
  #L326a46.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L326a4c.  v4.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] := v2 @kind object;
  #L326a50.  v0:= v4.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] @kind object;
  #L326a54.  v1:= v4.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L326a58.  v2:= v1 + 1;
  #L326a5c.  v4.`e.e.a.b.f.u.j3.d` @type ^`int` := v2;
  #L326a60.  v0[v1]:= v5 @kind boolean;
  #L326a64.  return @kind void;
}
procedure `void` `add`(`e.e.a.b.f.u.j3` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/u/j3;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L326920.  v6:= (`java.lang.Boolean`) v6 @kind object;
  #L326924.  call temp:= `booleanValue`(v6) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L32692a.  v6:= temp;
  #L32692c.  call `d`(v4) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L326932.  if v5 < 0 then goto L3269a8;
  #L326936.  v0:= v4.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L32693a.  if v5 > v0 then goto L3269a8;
  #L32693e.  v1:= v4.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] @kind object;
  #L326942.  v2:= length @variable v1;
  #L326944.  if v0 >= v2 then goto L326956;
  #L326948.  v2:= v5 + 1;
  #L32694c.  v0:= v0 - v5 @kind int;
  #L32694e.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L326954.  goto L326986;
  #L326956.  v0:= v0 * 3;
  #L32695a.  v0:= v0 / 2;
  #L32695e.  v0:= v0 + 1;
  #L326962.  v0:= new `boolean`[v0];
  #L326966.  v2:= 0I;
  #L326968.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L32696e.  v1:= v4.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] @kind object;
  #L326972.  v2:= v5 + 1;
  #L326976.  v3:= v4.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L32697a.  v3:= v3 - v5 @kind int;
  #L32697c.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L326982.  v4.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] := v0 @kind object;
  #L326986.  v0:= v4.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] @kind object;
  #L32698a.  v0[v5]:= v6 @kind boolean;
  #L32698e.  v5:= v4.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L326992.  v5:= v5 + 1;
  #L326996.  v4.`e.e.a.b.f.u.j3.d` @type ^`int` := v5;
  #L32699a.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L32699e.  v5:= v5 + 1;
  #L3269a2.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L3269a6.  return @kind void;
  #L3269a8.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L3269ac.  call temp:= `h`(v4, v5) @signature `Le/e/a/b/f/u/j3;.h:(I)Ljava/lang/String;` @kind direct;
  #L3269b2.  v5:= temp @kind object;
  #L3269b4.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3269ba.  throw v6;
}
procedure `boolean` `add`(`e.e.a.b.f.u.j3` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/u/j3;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L326568.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L32656c.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L326572.  v1:= temp;
  #L326574.  call `a`(v0, v1) @signature `Le/e/a/b/f/u/j3;.a:(Z)V` @kind virtual;
  #L32657a.  v1:= 1I;
  #L32657c.  return v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.u.j3` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Le/e/a/b/f/u/j3;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L326590.  call `d`(v5) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L326596.  call temp:= `a`(v6) @signature `Le/e/a/b/f/u/w4;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L32659c.  v0:= instanceof @variable v6 @type ^`e.e.a.b.f.u.j3` @kind boolean;
  #L3265a0.  if v0 != 0 then goto L3265ae;
  #L3265a4.  call temp:= `addAll`(v5, v6) @signature `Le/e/a/b/f/u/e3;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L3265aa.  v6:= temp;
  #L3265ac.  return v6;
  #L3265ae.  v6:= (`e.e.a.b.f.u.j3`) v6 @kind object;
  #L3265b2.  v0:= v6.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L3265b6.  v1:= 0I;
  #L3265b8.  if v0 != 0 then goto L3265be;
  #L3265bc.  return v1;
  #L3265be.  v2:= 2147483647I;
  #L3265c4.  v3:= v5.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L3265c8.  v2:= v2 - v3 @kind int;
  #L3265ca.  if v2 < v0 then goto L32660e;
  #L3265ce.  v3:= v3 + v0 @kind int;
  #L3265d0.  v0:= v5.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] @kind object;
  #L3265d4.  v2:= length @variable v0;
  #L3265d6.  if v3 <= v2 then goto L3265e6;
  #L3265da.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([ZI)[Z` @kind static;
  #L3265e0.  v0:= temp @kind object;
  #L3265e2.  v5.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] := v0 @kind object;
  #L3265e6.  v0:= v6.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] @kind object;
  #L3265ea.  v2:= v5.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] @kind object;
  #L3265ee.  v4:= v5.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L3265f2.  v6:= v6.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L3265f6.  call `arraycopy`(v0, v1, v2, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3265fc.  v5.`e.e.a.b.f.u.j3.d` @type ^`int` := v3;
  #L326600.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L326604.  v0:= 1I;
  #L326606.  v6:= v6 + v0 @kind int;
  #L326608.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L32660c.  return v0;
  #L32660e.  v6:= new `java.lang.OutOfMemoryError`;
  #L326612.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L326618.  throw v6;
}
procedure `boolean` `contains`(`e.e.a.b.f.u.j3` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/u/j3;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L32662c.  call temp:= `indexOf`(v1, v2) @signature `Le/e/a/b/f/u/j3;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L326632.  v2:= temp;
  #L326634.  v0:= -1I;
  #L326636.  if v2 == v0 then goto L32663e;
  #L32663a.  v2:= 1I;
  #L32663c.  return v2;
  #L32663e.  v2:= 0I;
  #L326640.  return v2;
}
procedure `boolean` `equals`(`e.e.a.b.f.u.j3` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/u/j3;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L326654.  v0:= 1I;
  #L326656.  if v5 != v6 then goto L32665c;
  #L32665a.  return v0;
  #L32665c.  v1:= instanceof @variable v6 @type ^`e.e.a.b.f.u.j3` @kind boolean;
  #L326660.  if v1 != 0 then goto L32666e;
  #L326664.  call temp:= `equals`(v5, v6) @signature `Le/e/a/b/f/u/e3;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L32666a.  v6:= temp;
  #L32666c.  return v6;
  #L32666e.  v6:= (`e.e.a.b.f.u.j3`) v6 @kind object;
  #L326672.  v1:= v5.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L326676.  v2:= v6.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L32667a.  v3:= 0I;
  #L32667c.  if v1 == v2 then goto L326682;
  #L326680.  return v3;
  #L326682.  v6:= v6.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] @kind object;
  #L326686.  v1:= 0I;
  #L326688.  v2:= v5.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L32668c.  if v1 >= v2 then goto L3266a8;
  #L326690.  v2:= v5.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] @kind object;
  #L326694.  v2:= v2[v1] @kind boolean;
  #L326698.  v4:= v6[v1] @kind boolean;
  #L32669c.  if v2 == v4 then goto L3266a2;
  #L3266a0.  return v3;
  #L3266a2.  v1:= v1 + 1;
  #L3266a6.  goto L326688;
  #L3266a8.  return v0;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.u.j3` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/u/j3;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L32679c.  call `b`(v1, v2) @signature `Le/e/a/b/f/u/j3;.b:(I)V` @kind direct;
  #L3267a2.  v0:= v1.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] @kind object;
  #L3267a6.  v2:= v0[v2] @kind boolean;
  #L3267aa.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L3267b0.  v2:= temp @kind object;
  #L3267b2.  return v2 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.u.j3` v3 @kind this) @signature `Le/e/a/b/f/u/j3;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3266fc.  v0:= 1I;
  #L3266fe.  v1:= 0I;
  #L326700.  v2:= v3.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L326704.  if v1 >= v2 then goto L326724;
  #L326708.  v0:= v0 * 31;
  #L32670c.  v2:= v3.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] @kind object;
  #L326710.  v2:= v2[v1] @kind boolean;
  #L326714.  call temp:= `a`(v2) @signature `Le/e/a/b/f/u/w4;.a:(Z)I` @kind static;
  #L32671a.  v2:= temp;
  #L32671c.  v0:= v0 + v2 @kind int;
  #L32671e.  v1:= v1 + 1;
  #L326722.  goto L326700;
  #L326724.  return v0;
}
procedure `int` `indexOf`(`e.e.a.b.f.u.j3` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/u/j3;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L326738.  v0:= instanceof @variable v5 @type ^`java.lang.Boolean` @kind boolean;
  #L32673c.  v1:= -1I;
  #L32673e.  if v0 != 0 then goto L326744;
  #L326742.  return v1;
  #L326744.  v5:= (`java.lang.Boolean`) v5 @kind object;
  #L326748.  call temp:= `booleanValue`(v5) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L32674e.  v5:= temp;
  #L326750.  call temp:= `size`(v4) @signature `Le/e/a/b/f/u/j3;.size:()I` @kind virtual;
  #L326756.  v0:= temp;
  #L326758.  v2:= 0I;
  #L32675a.  if v2 >= v0 then goto L326772;
  #L32675e.  v3:= v4.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] @kind object;
  #L326762.  v3:= v3[v2] @kind boolean;
  #L326766.  if v3 != v5 then goto L32676c;
  #L32676a.  return v2;
  #L32676c.  v2:= v2 + 1;
  #L326770.  goto L32675a;
  #L326772.  return v1;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.u.j3` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/u/j3;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3267c4.  call `d`(v4) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L3267ca.  call `b`(v4, v5) @signature `Le/e/a/b/f/u/j3;.b:(I)V` @kind direct;
  #L3267d0.  v0:= v4.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] @kind object;
  #L3267d4.  v1:= v0[v5] @kind boolean;
  #L3267d8.  v2:= v4.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L3267dc.  v3:= v2 + -1;
  #L3267e0.  if v5 >= v3 then goto L3267f4;
  #L3267e4.  v3:= v5 + 1;
  #L3267e8.  v2:= v2 - v5 @kind int;
  #L3267ea.  v2:= v2 + -1;
  #L3267ee.  call `arraycopy`(v0, v3, v0, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3267f4.  v5:= v4.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L3267f8.  v5:= v5 + -1;
  #L3267fc.  v4.`e.e.a.b.f.u.j3.d` @type ^`int` := v5;
  #L326800.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L326804.  v5:= v5 + 1;
  #L326808.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L32680c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L326812.  v5:= temp @kind object;
  #L326814.  return v5 @kind object;
}
procedure `void` `removeRange`(`e.e.a.b.f.u.j3` v2 @kind this, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/u/j3;.removeRange:(II)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L3269cc.  call `d`(v2) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L3269d2.  if v4 < v3 then goto L326a00;
  #L3269d6.  v0:= v2.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] @kind object;
  #L3269da.  v1:= v2.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L3269de.  v1:= v1 - v4 @kind int;
  #L3269e0.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3269e6.  v0:= v2.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L3269ea.  v4:= v4 - v3 @kind int;
  #L3269ec.  v0:= v0 - v4 @kind int;
  #L3269ee.  v2.`e.e.a.b.f.u.j3.d` @type ^`int` := v0;
  #L3269f2.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L3269f6.  v3:= v3 + 1;
  #L3269fa.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L3269fe.  return @kind void;
  #L326a00.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L326a04.  v4:= "toIndex < fromIndex" @kind object;
  #L326a08.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L326a0e.  throw v3;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.u.j3` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/u/j3;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L326828.  v4:= (`java.lang.Boolean`) v4 @kind object;
  #L32682c.  call temp:= `booleanValue`(v4) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L326832.  v4:= temp;
  #L326834.  call `d`(v2) @signature `Le/e/a/b/f/u/e3;.d:()V` @kind virtual;
  #L32683a.  call `b`(v2, v3) @signature `Le/e/a/b/f/u/j3;.b:(I)V` @kind direct;
  #L326840.  v0:= v2.`e.e.a.b.f.u.j3.c` @type ^`boolean`[] @kind object;
  #L326844.  v1:= v0[v3] @kind boolean;
  #L326848.  v0[v3]:= v4 @kind boolean;
  #L32684c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L326852.  v3:= temp @kind object;
  #L326854.  return v3 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.u.j3` v1 @kind this) @signature `Le/e/a/b/f/u/j3;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L326784.  v0:= v1.`e.e.a.b.f.u.j3.d` @type ^`int`;
  #L326788.  return v0;
}
