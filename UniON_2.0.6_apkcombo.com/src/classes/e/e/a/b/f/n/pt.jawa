record `e.e.a.b.f.n.pt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v5 , `int` v6 , `java.lang.String` v7 @kind object) @signature `Le/e/a/b/f/n/pt;.a:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2aab14.  if v5 < 0 then goto L2aab20;
  #L2aab18.  if v5 < v6 then goto L2aab1e;
  #L2aab1c.  goto L2aab20;
  #L2aab1e.  return v5;
  #L2aab20.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L2aab24.  v0:= "index" @kind object;
  #L2aab28.  v1:= 1I;
  #L2aab2a.  v2:= 0I;
  #L2aab2c.  v3:= 2I;
  #L2aab2e.  if v5 < 0 then goto L2aab98;
  #L2aab32.  if v6 >= 0 then goto L2aab68;
  #L2aab36.  v5:= new `java.lang.IllegalArgumentException`;
  #L2aab3a.  v7:= new `java.lang.StringBuilder`;
  #L2aab3e.  v0:= 26I;
  #L2aab42.  call `<init>`(v7, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2aab48.  v0:= "negative size: " @kind object;
  #L2aab4c.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2aab52.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2aab58.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2aab5e.  v6:= temp @kind object;
  #L2aab60.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2aab66.  throw v5;
  #L2aab68.  v4:= 3I;
  #L2aab6a.  v4:= new `java.lang.Object`[v4];
  #L2aab6e.  v4[v2]:= v0 @kind object;
  #L2aab72.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2aab78.  v5:= temp @kind object;
  #L2aab7a.  v4[v1]:= v5 @kind object;
  #L2aab7e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2aab84.  v5:= temp @kind object;
  #L2aab86.  v4[v3]:= v5 @kind object;
  #L2aab8a.  v5:= "%s (%s) must be less than size (%s)" @kind object;
  #L2aab8e.  call temp:= `a`(v5, v4) @signature `Le/e/a/b/f/n/vt;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2aab94.  v5:= temp @kind object;
  #L2aab96.  goto L2aabb8;
  #L2aab98.  v6:= new `java.lang.Object`[v3];
  #L2aab9c.  v6[v2]:= v0 @kind object;
  #L2aaba0.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2aaba6.  v5:= temp @kind object;
  #L2aaba8.  v6[v1]:= v5 @kind object;
  #L2aabac.  v5:= "%s (%s) must not be negative" @kind object;
  #L2aabb0.  call temp:= `a`(v5, v6) @signature `Le/e/a/b/f/n/vt;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2aabb6.  v5:= temp @kind object;
  #L2aabb8.  call `<init>`(v7, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2aabbe.  throw v7;
}
procedure `java.lang.Object` `a`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/n/pt;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2aac04.  if v0 == 0 then goto L2aac0a;
  #L2aac08.  return v0 @kind object;
  #L2aac0a.  v0:= new `java.lang.NullPointerException`;
  #L2aac0e.  v1:= (`java.lang.String`) v1 @kind object;
  #L2aac12.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2aac18.  throw v0;
}
procedure `void` `a`(`int` v2 , `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/n/pt;.a:(III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2aacf4.  if v2 < 0 then goto L2aad04;
  #L2aacf8.  if v3 < v2 then goto L2aad04;
  #L2aacfc.  if v3 <= v4 then goto L2aad02;
  #L2aad00.  goto L2aad04;
  #L2aad02.  return @kind void;
  #L2aad04.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L2aad08.  if v2 < 0 then goto L2aad58;
  #L2aad0c.  if v2 > v4 then goto L2aad58;
  #L2aad10.  if v3 < 0 then goto L2aad4a;
  #L2aad14.  if v3 <= v4 then goto L2aad1a;
  #L2aad18.  goto L2aad4a;
  #L2aad1a.  v4:= 2I;
  #L2aad1c.  v4:= new `java.lang.Object`[v4];
  #L2aad20.  v1:= 0I;
  #L2aad22.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2aad28.  v3:= temp @kind object;
  #L2aad2a.  v4[v1]:= v3 @kind object;
  #L2aad2e.  v3:= 1I;
  #L2aad30.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2aad36.  v2:= temp @kind object;
  #L2aad38.  v4[v3]:= v2 @kind object;
  #L2aad3c.  v2:= "end index (%s) must not be less than start index (%s)" @kind object;
  #L2aad40.  call temp:= `a`(v2, v4) @signature `Le/e/a/b/f/n/vt;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2aad46.  v2:= temp @kind object;
  #L2aad48.  goto L2aad64;
  #L2aad4a.  v2:= "end index" @kind object;
  #L2aad4e.  call temp:= `c`(v3, v4, v2) @signature `Le/e/a/b/f/n/pt;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L2aad54.  v2:= temp @kind object;
  #L2aad56.  goto L2aad64;
  #L2aad58.  v3:= "start index" @kind object;
  #L2aad5c.  call temp:= `c`(v2, v4, v3) @signature `Le/e/a/b/f/n/pt;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L2aad62.  v2:= temp @kind object;
  #L2aad64.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2aad6a.  throw v0;
}
procedure `void` `a`(`boolean` v0 ) @signature `Le/e/a/b/f/n/pt;.a:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2aacd0.  if v0 == 0 then goto L2aacd6;
  #L2aacd4.  return @kind void;
  #L2aacd6.  v0:= new `java.lang.IllegalArgumentException`;
  #L2aacda.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L2aace0.  throw v0;
}
procedure `int` `b`(`int` v1 , `int` v2 , `java.lang.String` v3 @kind object) @signature `Le/e/a/b/f/n/pt;.b:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2aabd0.  if v1 < 0 then goto L2aabda;
  #L2aabd4.  if v1 > v2 then goto L2aabda;
  #L2aabd8.  return v1;
  #L2aabda.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L2aabde.  v0:= "index" @kind object;
  #L2aabe2.  call temp:= `c`(v1, v2, v0) @signature `Le/e/a/b/f/n/pt;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L2aabe8.  v1:= temp @kind object;
  #L2aabea.  call `<init>`(v3, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2aabf0.  throw v3;
}
procedure `java.lang.String` `c`(`int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Le/e/a/b/f/n/pt;.c:(IILjava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2aac2c.  v0:= 1I;
  #L2aac2e.  v1:= 0I;
  #L2aac30.  v2:= 2I;
  #L2aac32.  if v4 >= 0 then goto L2aac58;
  #L2aac36.  v5:= new `java.lang.Object`[v2];
  #L2aac3a.  v5[v1]:= v6 @kind object;
  #L2aac3e.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2aac44.  v4:= temp @kind object;
  #L2aac46.  v5[v0]:= v4 @kind object;
  #L2aac4a.  v4:= "%s (%s) must not be negative" @kind object;
  #L2aac4e.  call temp:= `a`(v4, v5) @signature `Le/e/a/b/f/n/vt;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2aac54.  v4:= temp @kind object;
  #L2aac56.  return v4 @kind object;
  #L2aac58.  if v5 < 0 then goto L2aac8c;
  #L2aac5c.  v3:= 3I;
  #L2aac5e.  v3:= new `java.lang.Object`[v3];
  #L2aac62.  v3[v1]:= v6 @kind object;
  #L2aac66.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2aac6c.  v4:= temp @kind object;
  #L2aac6e.  v3[v0]:= v4 @kind object;
  #L2aac72.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2aac78.  v4:= temp @kind object;
  #L2aac7a.  v3[v2]:= v4 @kind object;
  #L2aac7e.  v4:= "%s (%s) must not be greater than size (%s)" @kind object;
  #L2aac82.  call temp:= `a`(v4, v3) @signature `Le/e/a/b/f/n/vt;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2aac88.  v4:= temp @kind object;
  #L2aac8a.  return v4 @kind object;
  #L2aac8c.  v4:= new `java.lang.IllegalArgumentException`;
  #L2aac90.  v6:= new `java.lang.StringBuilder`;
  #L2aac94.  v0:= 26I;
  #L2aac98.  call `<init>`(v6, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2aac9e.  v0:= "negative size: " @kind object;
  #L2aaca2.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2aaca8.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2aacae.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2aacb4.  v5:= temp @kind object;
  #L2aacb6.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2aacbc.  throw v4;
}
