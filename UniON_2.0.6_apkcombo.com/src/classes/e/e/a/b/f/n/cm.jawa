record `e.e.a.b.f.n.cm` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `e.e.a.b.f.n.v1` @kind interface {
  `int` `e.e.a.b.f.n.cm.b` @AccessFlag PRIVATE_FINAL;
}
global `e.e.a.b.f.n.cm` `@@e.e.a.b.f.n.cm.c` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `e.e.a.b.f.n.cm` `@@e.e.a.b.f.n.cm.d` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `e.e.a.b.f.n.cm` `@@e.e.a.b.f.n.cm.e` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `e.e.a.b.f.n.cm`[] `@@e.e.a.b.f.n.cm.f` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/n/cm;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2a1e80.  v0:= new `e.e.a.b.f.n.cm`;
  #L2a1e84.  v1:= 0I;
  #L2a1e86.  v2:= "UNDEFINED" @kind object;
  #L2a1e8a.  call `<init>`(v0, v2, v1, v1) @signature `Le/e/a/b/f/n/cm;.<init>:(Ljava/lang/String;II)V` @kind direct;
  #L2a1e90.  `@@e.e.a.b.f.n.cm.c` @type ^`e.e.a.b.f.n.cm` := v0 @kind object;
  #L2a1e94.  v0:= new `e.e.a.b.f.n.cm`;
  #L2a1e98.  v2:= 1I;
  #L2a1e9a.  v3:= "LINEAR_SEARCH" @kind object;
  #L2a1e9e.  call `<init>`(v0, v3, v2, v2) @signature `Le/e/a/b/f/n/cm;.<init>:(Ljava/lang/String;II)V` @kind direct;
  #L2a1ea4.  `@@e.e.a.b.f.n.cm.d` @type ^`e.e.a.b.f.n.cm` := v0 @kind object;
  #L2a1ea8.  v0:= new `e.e.a.b.f.n.cm`;
  #L2a1eac.  v3:= 2I;
  #L2a1eae.  v4:= "PRODUCT_QUANTIZER" @kind object;
  #L2a1eb2.  call `<init>`(v0, v4, v3, v3) @signature `Le/e/a/b/f/n/cm;.<init>:(Ljava/lang/String;II)V` @kind direct;
  #L2a1eb8.  `@@e.e.a.b.f.n.cm.e` @type ^`e.e.a.b.f.n.cm` := v0 @kind object;
  #L2a1ebc.  v0:= 3I;
  #L2a1ebe.  v0:= new `e.e.a.b.f.n.cm`[v0];
  #L2a1ec2.  v4:= `@@e.e.a.b.f.n.cm.c` @type ^`e.e.a.b.f.n.cm` @kind object;
  #L2a1ec6.  v0[v1]:= v4 @kind object;
  #L2a1eca.  v1:= `@@e.e.a.b.f.n.cm.d` @type ^`e.e.a.b.f.n.cm` @kind object;
  #L2a1ece.  v0[v2]:= v1 @kind object;
  #L2a1ed2.  v1:= `@@e.e.a.b.f.n.cm.e` @type ^`e.e.a.b.f.n.cm` @kind object;
  #L2a1ed6.  v0[v3]:= v1 @kind object;
  #L2a1eda.  `@@e.e.a.b.f.n.cm.f` @type ^`e.e.a.b.f.n.cm`[] := v0 @kind object;
  #L2a1ede.  v0:= new `e.e.a.b.f.n.am`;
  #L2a1ee2.  call `<init>`(v0) @signature `Le/e/a/b/f/n/am;.<init>:()V` @kind direct;
  #L2a1ee8.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.n.cm` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/n/cm;.<init>:(Ljava/lang/String;II)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2a1efc.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2a1f02.  v0.`e.e.a.b.f.n.cm.b` @type ^`int` := v3;
  #L2a1f06.  return @kind void;
}
procedure `e.e.a.b.f.n.cm` `a`(`int` v1 ) @signature `Le/e/a/b/f/n/cm;.a:(I)Le/e/a/b/f/n/cm;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2a1d7c.  if v1 == 0 then goto L2a1d9c;
  #L2a1d80.  v0:= 1I;
  #L2a1d82.  if v1 == v0 then goto L2a1d96;
  #L2a1d86.  v0:= 2I;
  #L2a1d88.  if v1 == v0 then goto L2a1d90;
  #L2a1d8c.  v1:= 0I;
  #L2a1d8e.  return v1 @kind object;
  #L2a1d90.  v1:= `@@e.e.a.b.f.n.cm.e` @type ^`e.e.a.b.f.n.cm` @kind object;
  #L2a1d94.  return v1 @kind object;
  #L2a1d96.  v1:= `@@e.e.a.b.f.n.cm.d` @type ^`e.e.a.b.f.n.cm` @kind object;
  #L2a1d9a.  return v1 @kind object;
  #L2a1d9c.  v1:= `@@e.e.a.b.f.n.cm.c` @type ^`e.e.a.b.f.n.cm` @kind object;
  #L2a1da0.  return v1 @kind object;
}
procedure `e.e.a.b.f.n.x1` `d`() @signature `Le/e/a/b/f/n/cm;.d:()Le/e/a/b/f/n/x1;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2a1d64.  v0:= `@@e.e.a.b.f.n.bm.a` @type ^`e.e.a.b.f.n.x1` @kind object;
  #L2a1d68.  return v0 @kind object;
}
procedure `e.e.a.b.f.n.cm`[] `values`() @signature `Le/e/a/b/f/n/cm;.values:()[Le/e/a/b/f/n/cm;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2a1db4.  v0:= `@@e.e.a.b.f.n.cm.f` @type ^`e.e.a.b.f.n.cm`[] @kind object;
  #L2a1db8.  call temp:= `clone`(v0) @signature `[Le/e/a/b/f/n/cm;.clone:()Ljava/lang/Object;` @kind virtual;
  #L2a1dbe.  v0:= temp @kind object;
  #L2a1dc0.  v0:= (`e.e.a.b.f.n.cm`[]) v0 @kind object;
  #L2a1dc4.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`e.e.a.b.f.n.cm` v2 @kind this) @signature `Le/e/a/b/f/n/cm;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2a1df0.  v0:= new `java.lang.StringBuilder`;
  #L2a1df4.  v1:= "<" @kind object;
  #L2a1df8.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a1dfe.  v1:= constclass @type ^`e.e.a.b.f.n.cm` @kind object;
  #L2a1e02.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2a1e08.  v1:= temp @kind object;
  #L2a1e0a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a1e10.  v1:= 64I;
  #L2a1e14.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a1e1a.  call temp:= `identityHashCode`(v2) @signature `Ljava/lang/System;.identityHashCode:(Ljava/lang/Object;)I` @kind static;
  #L2a1e20.  v1:= temp;
  #L2a1e22.  call temp:= `toHexString`(v1) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L2a1e28.  v1:= temp @kind object;
  #L2a1e2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a1e30.  v1:= " number=" @kind object;
  #L2a1e34.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a1e3a.  v1:= v2.`e.e.a.b.f.n.cm.b` @type ^`int`;
  #L2a1e3e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a1e44.  v1:= " name=" @kind object;
  #L2a1e48.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a1e4e.  call temp:= `name`(v2) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L2a1e54.  v1:= temp @kind object;
  #L2a1e56.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a1e5c.  v1:= 62I;
  #L2a1e60.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a1e66.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a1e6c.  v0:= temp @kind object;
  #L2a1e6e.  return v0 @kind object;
}
procedure `int` `zza`(`e.e.a.b.f.n.cm` v1 @kind this) @signature `Le/e/a/b/f/n/cm;.zza:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a1dd8.  v0:= v1.`e.e.a.b.f.n.cm.b` @type ^`int`;
  #L2a1ddc.  return v0;
}
