record `e.e.a.b.f.q.vb` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v5 , `int` v6 , `java.lang.String` v7 @kind object) @signature `Le/e/a/b/f/q/vb;.a:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2ece1c.  if v5 < 0 then goto L2ece28;
  #L2ece20.  if v5 < v6 then goto L2ece26;
  #L2ece24.  goto L2ece28;
  #L2ece26.  return v5;
  #L2ece28.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L2ece2c.  v0:= "index" @kind object;
  #L2ece30.  v1:= 1I;
  #L2ece32.  v2:= 0I;
  #L2ece34.  v3:= 2I;
  #L2ece36.  if v5 < 0 then goto L2ecea0;
  #L2ece3a.  if v6 >= 0 then goto L2ece70;
  #L2ece3e.  v5:= new `java.lang.IllegalArgumentException`;
  #L2ece42.  v7:= new `java.lang.StringBuilder`;
  #L2ece46.  v0:= 26I;
  #L2ece4a.  call `<init>`(v7, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2ece50.  v0:= "negative size: " @kind object;
  #L2ece54.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ece5a.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ece60.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ece66.  v6:= temp @kind object;
  #L2ece68.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ece6e.  throw v5;
  #L2ece70.  v4:= 3I;
  #L2ece72.  v4:= new `java.lang.Object`[v4];
  #L2ece76.  v4[v2]:= v0 @kind object;
  #L2ece7a.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ece80.  v5:= temp @kind object;
  #L2ece82.  v4[v1]:= v5 @kind object;
  #L2ece86.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ece8c.  v5:= temp @kind object;
  #L2ece8e.  v4[v3]:= v5 @kind object;
  #L2ece92.  v5:= "%s (%s) must be less than size (%s)" @kind object;
  #L2ece96.  call temp:= `a`(v5, v4) @signature `Le/e/a/b/f/q/wc;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2ece9c.  v5:= temp @kind object;
  #L2ece9e.  goto L2ecec0;
  #L2ecea0.  v6:= new `java.lang.Object`[v3];
  #L2ecea4.  v6[v2]:= v0 @kind object;
  #L2ecea8.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2eceae.  v5:= temp @kind object;
  #L2eceb0.  v6[v1]:= v5 @kind object;
  #L2eceb4.  v5:= "%s (%s) must not be negative" @kind object;
  #L2eceb8.  call temp:= `a`(v5, v6) @signature `Le/e/a/b/f/q/wc;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2ecebe.  v5:= temp @kind object;
  #L2ecec0.  call `<init>`(v7, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ecec6.  throw v7;
}
procedure `void` `a`(`int` v2 , `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/q/vb;.a:(III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2ed660.  if v2 < 0 then goto L2ed670;
  #L2ed664.  if v3 < v2 then goto L2ed670;
  #L2ed668.  if v3 <= v4 then goto L2ed66e;
  #L2ed66c.  goto L2ed670;
  #L2ed66e.  return @kind void;
  #L2ed670.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L2ed674.  if v2 < 0 then goto L2ed6c4;
  #L2ed678.  if v2 > v4 then goto L2ed6c4;
  #L2ed67c.  if v3 < 0 then goto L2ed6b6;
  #L2ed680.  if v3 <= v4 then goto L2ed686;
  #L2ed684.  goto L2ed6b6;
  #L2ed686.  v4:= 2I;
  #L2ed688.  v4:= new `java.lang.Object`[v4];
  #L2ed68c.  v1:= 0I;
  #L2ed68e.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ed694.  v3:= temp @kind object;
  #L2ed696.  v4[v1]:= v3 @kind object;
  #L2ed69a.  v3:= 1I;
  #L2ed69c.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ed6a2.  v2:= temp @kind object;
  #L2ed6a4.  v4[v3]:= v2 @kind object;
  #L2ed6a8.  v2:= "end index (%s) must not be less than start index (%s)" @kind object;
  #L2ed6ac.  call temp:= `a`(v2, v4) @signature `Le/e/a/b/f/q/wc;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2ed6b2.  v2:= temp @kind object;
  #L2ed6b4.  goto L2ed6d0;
  #L2ed6b6.  v2:= "end index" @kind object;
  #L2ed6ba.  call temp:= `c`(v3, v4, v2) @signature `Le/e/a/b/f/q/vb;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L2ed6c0.  v2:= temp @kind object;
  #L2ed6c2.  goto L2ed6d0;
  #L2ed6c4.  v3:= "start index" @kind object;
  #L2ed6c8.  call temp:= `c`(v2, v4, v3) @signature `Le/e/a/b/f/q/vb;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L2ed6ce.  v2:= temp @kind object;
  #L2ed6d0.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ed6d6.  throw v0;
}
procedure `void` `a`(`boolean` v0 ) @signature `Le/e/a/b/f/q/vb;.a:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2ed614.  if v0 == 0 then goto L2ed61a;
  #L2ed618.  return @kind void;
  #L2ed61a.  v0:= new `java.lang.IllegalStateException`;
  #L2ed61e.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L2ed624.  throw v0;
}
procedure `void` `a`(`boolean` v0 , `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/q/vb;.a:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2ed638.  if v0 == 0 then goto L2ed63e;
  #L2ed63c.  return @kind void;
  #L2ed63e.  v0:= new `java.lang.IllegalStateException`;
  #L2ed642.  v1:= (`java.lang.String`) v1 @kind object;
  #L2ed646.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ed64c.  throw v0;
}
procedure `int` `b`(`int` v1 , `int` v2 , `java.lang.String` v3 @kind object) @signature `Le/e/a/b/f/q/vb;.b:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2eced8.  if v1 < 0 then goto L2ecee2;
  #L2ecedc.  if v1 > v2 then goto L2ecee2;
  #L2ecee0.  return v1;
  #L2ecee2.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L2ecee6.  v0:= "index" @kind object;
  #L2eceea.  call temp:= `c`(v1, v2, v0) @signature `Le/e/a/b/f/q/vb;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L2ecef0.  v1:= temp @kind object;
  #L2ecef2.  call `<init>`(v3, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ecef8.  throw v3;
}
procedure `java.lang.String` `c`(`int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Le/e/a/b/f/q/vb;.c:(IILjava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2ecf50.  v0:= 1I;
  #L2ecf52.  v1:= 0I;
  #L2ecf54.  v2:= 2I;
  #L2ecf56.  if v4 >= 0 then goto L2ecf7c;
  #L2ecf5a.  v5:= new `java.lang.Object`[v2];
  #L2ecf5e.  v5[v1]:= v6 @kind object;
  #L2ecf62.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ecf68.  v4:= temp @kind object;
  #L2ecf6a.  v5[v0]:= v4 @kind object;
  #L2ecf6e.  v4:= "%s (%s) must not be negative" @kind object;
  #L2ecf72.  call temp:= `a`(v4, v5) @signature `Le/e/a/b/f/q/wc;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2ecf78.  v4:= temp @kind object;
  #L2ecf7a.  return v4 @kind object;
  #L2ecf7c.  if v5 < 0 then goto L2ecfb0;
  #L2ecf80.  v3:= 3I;
  #L2ecf82.  v3:= new `java.lang.Object`[v3];
  #L2ecf86.  v3[v1]:= v6 @kind object;
  #L2ecf8a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ecf90.  v4:= temp @kind object;
  #L2ecf92.  v3[v0]:= v4 @kind object;
  #L2ecf96.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ecf9c.  v4:= temp @kind object;
  #L2ecf9e.  v3[v2]:= v4 @kind object;
  #L2ecfa2.  v4:= "%s (%s) must not be greater than size (%s)" @kind object;
  #L2ecfa6.  call temp:= `a`(v4, v3) @signature `Le/e/a/b/f/q/wc;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2ecfac.  v4:= temp @kind object;
  #L2ecfae.  return v4 @kind object;
  #L2ecfb0.  v4:= new `java.lang.IllegalArgumentException`;
  #L2ecfb4.  v6:= new `java.lang.StringBuilder`;
  #L2ecfb8.  v0:= 26I;
  #L2ecfbc.  call `<init>`(v6, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2ecfc2.  v0:= "negative size: " @kind object;
  #L2ecfc6.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ecfcc.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ecfd2.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ecfd8.  v5:= temp @kind object;
  #L2ecfda.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ecfe0.  throw v4;
}
