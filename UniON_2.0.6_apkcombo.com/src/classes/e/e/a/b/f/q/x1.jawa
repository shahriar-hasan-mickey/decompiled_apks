record `e.e.a.b.f.q.x1` @kind class @AccessFlag  extends `java.util.AbstractMap` @kind class {
  `int` `e.e.a.b.f.q.x1.b` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `e.e.a.b.f.q.x1.c` @AccessFlag PRIVATE;
  `java.util.Map` `e.e.a.b.f.q.x1.d` @AccessFlag PRIVATE;
  `boolean` `e.e.a.b.f.q.x1.e` @AccessFlag PRIVATE;
  `e.e.a.b.f.q.w1` `e.e.a.b.f.q.x1.f` @AccessFlag PRIVATE_VOLATILE;
  `java.util.Map` `e.e.a.b.f.q.x1.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.f.q.x1` v0 @kind this, `int` v1 , `e.e.a.b.f.q.q1` v2 @kind object) @signature `Le/e/a/b/f/q/x1;.<init>:(ILe/e/a/b/f/q/q1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2dcd3c.  call `<init>`(v0) @signature `Ljava/util/AbstractMap;.<init>:()V` @kind direct;
  #L2dcd42.  v0.`e.e.a.b.f.q.x1.b` @type ^`int` := v1;
  #L2dcd46.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L2dcd4c.  v1:= temp @kind object;
  #L2dcd4e.  v0.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` := v1 @kind object;
  #L2dcd52.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L2dcd58.  v1:= temp @kind object;
  #L2dcd5a.  v0.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` := v1 @kind object;
  #L2dcd5e.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L2dcd64.  v1:= temp @kind object;
  #L2dcd66.  v0.`e.e.a.b.f.q.x1.g` @type ^`java.util.Map` := v1 @kind object;
  #L2dcd6a.  return @kind void;
}
procedure `int` `a`(`e.e.a.b.f.q.x1` v4 @kind this, `java.lang.Comparable` v5 @kind object) @signature `Le/e/a/b/f/q/x1;.a:(Ljava/lang/Comparable;)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2dc8fc.  v0:= v4.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dc900.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2dc906.  v0:= temp;
  #L2dc908.  v0:= v0 + -1;
  #L2dc90c.  v1:= 0I;
  #L2dc90e.  if v0 < 0 then goto L2dc946;
  #L2dc912.  v2:= v4.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dc916.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2dc91c.  v2:= temp @kind object;
  #L2dc91e.  v2:= (`e.e.a.b.f.q.u1`) v2 @kind object;
  #L2dc922.  call temp:= `zza`(v2) @signature `Le/e/a/b/f/q/u1;.zza:()Ljava/lang/Comparable;` @kind virtual;
  #L2dc928.  v2:= temp @kind object;
  #L2dc92a.  call temp:= `compareTo`(v5, v2) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L2dc930.  v2:= temp;
  #L2dc932.  if v2 <= 0 then goto L2dc93e;
  #L2dc936.  v0:= v0 + 2;
  #L2dc93a.  v5:= -v0 @kind int;
  #L2dc93c.  return v5;
  #L2dc93e.  if v2 == 0 then goto L2dc944;
  #L2dc942.  goto L2dc946;
  #L2dc944.  return v0;
  #L2dc946.  if v1 > v0 then goto L2dc98c;
  #L2dc94a.  v2:= v1 + v0 @kind int;
  #L2dc94e.  v2:= v2 / 2;
  #L2dc952.  v3:= v4.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dc956.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2dc95c.  v3:= temp @kind object;
  #L2dc95e.  v3:= (`e.e.a.b.f.q.u1`) v3 @kind object;
  #L2dc962.  call temp:= `zza`(v3) @signature `Le/e/a/b/f/q/u1;.zza:()Ljava/lang/Comparable;` @kind virtual;
  #L2dc968.  v3:= temp @kind object;
  #L2dc96a.  call temp:= `compareTo`(v5, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L2dc970.  v3:= temp;
  #L2dc972.  if v3 >= 0 then goto L2dc97e;
  #L2dc976.  v2:= v2 + -1;
  #L2dc97a.  v0:= v2;
  #L2dc97c.  goto L2dc946;
  #L2dc97e.  if v3 <= 0 then goto L2dc98a;
  #L2dc982.  v2:= v2 + 1;
  #L2dc986.  v1:= v2;
  #L2dc988.  goto L2dc946;
  #L2dc98a.  return v2;
  #L2dc98c.  v1:= v1 + 1;
  #L2dc990.  v5:= -v1 @kind int;
  #L2dc992.  return v5;
}
procedure `java.lang.Object` `a`(`e.e.a.b.f.q.x1` v0 @kind object, `int` v1 ) @signature `Le/e/a/b/f/q/x1;.a:(Le/e/a/b/f/q/x1;I)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2dcb88.  call temp:= `b`(v0, v1) @signature `Le/e/a/b/f/q/x1;.b:(I)Ljava/lang/Object;` @kind direct;
  #L2dcb8e.  v0:= temp @kind object;
  #L2dcb90.  return v0 @kind object;
}
procedure `void` `a`(`e.e.a.b.f.q.x1` v0 @kind object) @signature `Le/e/a/b/f/q/x1;.a:(Le/e/a/b/f/q/x1;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2dce3c.  call `e`(v0) @signature `Le/e/a/b/f/q/x1;.e:()V` @kind direct;
  #L2dce42.  return @kind void;
}
procedure `java.lang.Object` `b`(`e.e.a.b.f.q.x1` v5 @kind this, `int` v6 ) @signature `Le/e/a/b/f/q/x1;.b:(I)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2dcba4.  call `e`(v5) @signature `Le/e/a/b/f/q/x1;.e:()V` @kind direct;
  #L2dcbaa.  v0:= v5.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dcbae.  call temp:= `remove`(v0, v6) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L2dcbb4.  v6:= temp @kind object;
  #L2dcbb6.  v6:= (`e.e.a.b.f.q.u1`) v6 @kind object;
  #L2dcbba.  call temp:= `getValue`(v6) @signature `Le/e/a/b/f/q/u1;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L2dcbc0.  v6:= temp @kind object;
  #L2dcbc2.  v0:= v5.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dcbc6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2dcbcc.  v0:= temp;
  #L2dcbce.  if v0 != 0 then goto L2dcc24;
  #L2dcbd2.  call temp:= `f`(v5) @signature `Le/e/a/b/f/q/x1;.f:()Ljava/util/SortedMap;` @kind direct;
  #L2dcbd8.  v0:= temp @kind object;
  #L2dcbda.  call temp:= `entrySet`(v0) @signature `Ljava/util/SortedMap;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2dcbe0.  v0:= temp @kind object;
  #L2dcbe2.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2dcbe8.  v0:= temp @kind object;
  #L2dcbea.  v1:= v5.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dcbee.  v2:= new `e.e.a.b.f.q.u1`;
  #L2dcbf2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2dcbf8.  v3:= temp @kind object;
  #L2dcbfa.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L2dcbfe.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2dcc04.  v4:= temp @kind object;
  #L2dcc06.  v4:= (`java.lang.Comparable`) v4 @kind object;
  #L2dcc0a.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2dcc10.  v3:= temp @kind object;
  #L2dcc12.  call `<init>`(v2, v5, v4, v3) @signature `Le/e/a/b/f/q/u1;.<init>:(Le/e/a/b/f/q/x1;Ljava/lang/Comparable;Ljava/lang/Object;)V` @kind direct;
  #L2dcc18.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2dcc1e.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L2dcc24.  return v6 @kind object;
}
procedure `java.util.List` `b`(`e.e.a.b.f.q.x1` v0 @kind object) @signature `Le/e/a/b/f/q/x1;.b:(Le/e/a/b/f/q/x1;)Ljava/util/List;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2dcc38.  v0:= v0.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dcc3c.  return v0 @kind object;
}
procedure `java.util.Map` `c`(`e.e.a.b.f.q.x1` v0 @kind object) @signature `Le/e/a/b/f/q/x1;.c:(Le/e/a/b/f/q/x1;)Ljava/util/Map;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2dcc50.  v0:= v0.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dcc54.  return v0 @kind object;
}
procedure `void` `e`(`e.e.a.b.f.q.x1` v1 @kind this) @signature `Le/e/a/b/f/q/x1;.e:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2dce54.  v0:= v1.`e.e.a.b.f.q.x1.e` @type ^`boolean` @kind boolean;
  #L2dce58.  if v0 != 0 then goto L2dce5e;
  #L2dce5c.  return @kind void;
  #L2dce5e.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2dce62.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2dce68.  throw v0;
}
procedure `java.util.SortedMap` `f`(`e.e.a.b.f.q.x1` v1 @kind this) @signature `Le/e/a/b/f/q/x1;.f:()Ljava/util/SortedMap;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2dccbc.  call `e`(v1) @signature `Le/e/a/b/f/q/x1;.e:()V` @kind direct;
  #L2dccc2.  v0:= v1.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dccc6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2dcccc.  v0:= temp;
  #L2dccce.  if v0 == 0 then goto L2dcd00;
  #L2dccd2.  v0:= v1.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dccd6.  v0:= instanceof @variable v0 @type ^`java.util.TreeMap` @kind boolean;
  #L2dccda.  if v0 != 0 then goto L2dcd00;
  #L2dccde.  v0:= new `java.util.TreeMap`;
  #L2dcce2.  call `<init>`(v0) @signature `Ljava/util/TreeMap;.<init>:()V` @kind direct;
  #L2dcce8.  v1.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` := v0 @kind object;
  #L2dccec.  v0:= v1.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dccf0.  v0:= (`java.util.TreeMap`) v0 @kind object;
  #L2dccf4.  call temp:= `descendingMap`(v0) @signature `Ljava/util/TreeMap;.descendingMap:()Ljava/util/NavigableMap;` @kind virtual;
  #L2dccfa.  v0:= temp @kind object;
  #L2dccfc.  v1.`e.e.a.b.f.q.x1.g` @type ^`java.util.Map` := v0 @kind object;
  #L2dcd00.  v0:= v1.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dcd04.  v0:= (`java.util.SortedMap`) v0 @kind object;
  #L2dcd08.  return v0 @kind object;
}
procedure `java.lang.Object` `a`(`e.e.a.b.f.q.x1` v4 @kind this, `java.lang.Comparable` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/q/x1;.a:(Ljava/lang/Comparable;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2dca98.  call `e`(v4) @signature `Le/e/a/b/f/q/x1;.e:()V` @kind direct;
  #L2dca9e.  call temp:= `a`(v4, v5) @signature `Le/e/a/b/f/q/x1;.a:(Ljava/lang/Comparable;)I` @kind direct;
  #L2dcaa4.  v0:= temp;
  #L2dcaa6.  if v0 < 0 then goto L2dcac4;
  #L2dcaaa.  v5:= v4.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dcaae.  call temp:= `get`(v5, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2dcab4.  v5:= temp @kind object;
  #L2dcab6.  v5:= (`e.e.a.b.f.q.u1`) v5 @kind object;
  #L2dcaba.  call temp:= `setValue`(v5, v6) @signature `Le/e/a/b/f/q/u1;.setValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2dcac0.  v5:= temp @kind object;
  #L2dcac2.  return v5 @kind object;
  #L2dcac4.  call `e`(v4) @signature `Le/e/a/b/f/q/x1;.e:()V` @kind direct;
  #L2dcaca.  v1:= v4.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dcace.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2dcad4.  v1:= temp;
  #L2dcad6.  if v1 == 0 then goto L2dcaf8;
  #L2dcada.  v1:= v4.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dcade.  v1:= instanceof @variable v1 @type ^`java.util.ArrayList` @kind boolean;
  #L2dcae2.  if v1 != 0 then goto L2dcaf8;
  #L2dcae6.  v1:= new `java.util.ArrayList`;
  #L2dcaea.  v2:= v4.`e.e.a.b.f.q.x1.b` @type ^`int`;
  #L2dcaee.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2dcaf4.  v4.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` := v1 @kind object;
  #L2dcaf8.  v0:= v0 + 1;
  #L2dcafc.  v0:= -v0 @kind int;
  #L2dcafe.  v1:= v4.`e.e.a.b.f.q.x1.b` @type ^`int`;
  #L2dcb02.  if v0 < v1 then goto L2dcb18;
  #L2dcb06.  call temp:= `f`(v4) @signature `Le/e/a/b/f/q/x1;.f:()Ljava/util/SortedMap;` @kind direct;
  #L2dcb0c.  v0:= temp @kind object;
  #L2dcb0e.  call temp:= `put`(v0, v5, v6) @signature `Ljava/util/SortedMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2dcb14.  v5:= temp @kind object;
  #L2dcb16.  return v5 @kind object;
  #L2dcb18.  v1:= v4.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dcb1c.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2dcb22.  v1:= temp;
  #L2dcb24.  v2:= v4.`e.e.a.b.f.q.x1.b` @type ^`int`;
  #L2dcb28.  if v1 != v2 then goto L2dcb5e;
  #L2dcb2c.  v1:= v4.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dcb30.  v2:= v2 + -1;
  #L2dcb34.  call temp:= `remove`(v1, v2) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L2dcb3a.  v1:= temp @kind object;
  #L2dcb3c.  v1:= (`e.e.a.b.f.q.u1`) v1 @kind object;
  #L2dcb40.  call temp:= `f`(v4) @signature `Le/e/a/b/f/q/x1;.f:()Ljava/util/SortedMap;` @kind direct;
  #L2dcb46.  v2:= temp @kind object;
  #L2dcb48.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/q/u1;.zza:()Ljava/lang/Comparable;` @kind virtual;
  #L2dcb4e.  v3:= temp @kind object;
  #L2dcb50.  call temp:= `getValue`(v1) @signature `Le/e/a/b/f/q/u1;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L2dcb56.  v1:= temp @kind object;
  #L2dcb58.  call temp:= `put`(v2, v3, v1) @signature `Ljava/util/SortedMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2dcb5e.  v1:= v4.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dcb62.  v2:= new `e.e.a.b.f.q.u1`;
  #L2dcb66.  call `<init>`(v2, v4, v5, v6) @signature `Le/e/a/b/f/q/u1;.<init>:(Le/e/a/b/f/q/x1;Ljava/lang/Comparable;Ljava/lang/Object;)V` @kind direct;
  #L2dcb6c.  call `add`(v1, v0, v2) @signature `Ljava/util/List;.add:(ILjava/lang/Object;)V` @kind interface;
  #L2dcb72.  v5:= 0I;
  #L2dcb74.  return v5 @kind object;
}
procedure `java.util.Map$Entry` `a`(`e.e.a.b.f.q.x1` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/q/x1;.a:(I)Ljava/util/Map$Entry;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2dcc68.  v0:= v1.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dcc6c.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2dcc72.  v2:= temp @kind object;
  #L2dcc74.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L2dcc78.  return v2 @kind object;
}
procedure `void` `a`(`e.e.a.b.f.q.x1` v1 @kind this) @signature `Le/e/a/b/f/q/x1;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2dcdc8.  v0:= v1.`e.e.a.b.f.q.x1.e` @type ^`boolean` @kind boolean;
  #L2dcdcc.  if v0 != 0 then goto L2dce2a;
  #L2dcdd0.  v0:= v1.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dcdd4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2dcdda.  v0:= temp;
  #L2dcddc.  if v0 == 0 then goto L2dcdea;
  #L2dcde0.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L2dcde6.  v0:= temp @kind object;
  #L2dcde8.  goto L2dcdf6;
  #L2dcdea.  v0:= v1.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dcdee.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L2dcdf4.  v0:= temp @kind object;
  #L2dcdf6.  v1.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` := v0 @kind object;
  #L2dcdfa.  v0:= v1.`e.e.a.b.f.q.x1.g` @type ^`java.util.Map` @kind object;
  #L2dcdfe.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2dce04.  v0:= temp;
  #L2dce06.  if v0 == 0 then goto L2dce14;
  #L2dce0a.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L2dce10.  v0:= temp @kind object;
  #L2dce12.  goto L2dce20;
  #L2dce14.  v0:= v1.`e.e.a.b.f.q.x1.g` @type ^`java.util.Map` @kind object;
  #L2dce18.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L2dce1e.  v0:= temp @kind object;
  #L2dce20.  v1.`e.e.a.b.f.q.x1.g` @type ^`java.util.Map` := v0 @kind object;
  #L2dce24.  v0:= 1I;
  #L2dce26.  v1.`e.e.a.b.f.q.x1.e` @type ^`boolean` := v0 @kind boolean;
  #L2dce2a.  return @kind void;
}
procedure `boolean` `b`(`e.e.a.b.f.q.x1` v1 @kind this) @signature `Le/e/a/b/f/q/x1;.b:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2dc838.  v0:= v1.`e.e.a.b.f.q.x1.e` @type ^`boolean` @kind boolean;
  #L2dc83c.  return v0;
}
procedure `int` `c`(`e.e.a.b.f.q.x1` v1 @kind this) @signature `Le/e/a/b/f/q/x1;.c:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2dc8dc.  v0:= v1.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dc8e0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2dc8e6.  v0:= temp;
  #L2dc8e8.  return v0;
}
procedure `void` `clear`(`e.e.a.b.f.q.x1` v1 @kind this) @signature `Le/e/a/b/f/q/x1;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2dcd7c.  call `e`(v1) @signature `Le/e/a/b/f/q/x1;.e:()V` @kind direct;
  #L2dcd82.  v0:= v1.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dcd86.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2dcd8c.  v0:= temp;
  #L2dcd8e.  if v0 != 0 then goto L2dcd9c;
  #L2dcd92.  v0:= v1.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dcd96.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L2dcd9c.  v0:= v1.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dcda0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2dcda6.  v0:= temp;
  #L2dcda8.  if v0 != 0 then goto L2dcdb6;
  #L2dcdac.  v0:= v1.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dcdb0.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L2dcdb6.  return @kind void;
}
procedure `boolean` `containsKey`(`e.e.a.b.f.q.x1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/q/x1;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2dc744.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L2dc748.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/q/x1;.a:(Ljava/lang/Comparable;)I` @kind direct;
  #L2dc74e.  v0:= temp;
  #L2dc750.  if v0 >= 0 then goto L2dc76a;
  #L2dc754.  v0:= v1.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dc758.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L2dc75e.  v2:= temp;
  #L2dc760.  if v2 == 0 then goto L2dc766;
  #L2dc764.  goto L2dc76a;
  #L2dc766.  v2:= 0I;
  #L2dc768.  return v2;
  #L2dc76a.  v2:= 1I;
  #L2dc76c.  return v2;
}
procedure `java.lang.Iterable` `d`(`e.e.a.b.f.q.x1` v1 @kind this) @signature `Le/e/a/b/f/q/x1;.d:()Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2dc9a4.  v0:= v1.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dc9a8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2dc9ae.  v0:= temp;
  #L2dc9b0.  if v0 == 0 then goto L2dc9be;
  #L2dc9b4.  call temp:= `a`() @signature `Le/e/a/b/f/q/t1;.a:()Ljava/lang/Iterable;` @kind static;
  #L2dc9ba.  v0:= temp @kind object;
  #L2dc9bc.  goto L2dc9ca;
  #L2dc9be.  v0:= v1.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dc9c2.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2dc9c8.  v0:= temp @kind object;
  #L2dc9ca.  return v0 @kind object;
}
procedure `java.util.Set` `entrySet`(`e.e.a.b.f.q.x1` v2 @kind this) @signature `Le/e/a/b/f/q/x1;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2dcc8c.  v0:= v2.`e.e.a.b.f.q.x1.f` @type ^`e.e.a.b.f.q.w1` @kind object;
  #L2dcc90.  if v0 != 0 then goto L2dcca4;
  #L2dcc94.  v0:= new `e.e.a.b.f.q.w1`;
  #L2dcc98.  v1:= 0I;
  #L2dcc9a.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/q/w1;.<init>:(Le/e/a/b/f/q/x1;Le/e/a/b/f/q/q1;)V` @kind direct;
  #L2dcca0.  v2.`e.e.a.b.f.q.x1.f` @type ^`e.e.a.b.f.q.w1` := v0 @kind object;
  #L2dcca4.  v0:= v2.`e.e.a.b.f.q.x1.f` @type ^`e.e.a.b.f.q.w1` @kind object;
  #L2dcca8.  return v0 @kind object;
}
procedure `boolean` `equals`(`e.e.a.b.f.q.x1` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Le/e/a/b/f/q/x1;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2dc780.  v0:= 1I;
  #L2dc782.  if v7 != v8 then goto L2dc788;
  #L2dc786.  return v0;
  #L2dc788.  v1:= instanceof @variable v8 @type ^`e.e.a.b.f.q.x1` @kind boolean;
  #L2dc78c.  if v1 != 0 then goto L2dc79a;
  #L2dc790.  call temp:= `equals`(v7, v8) @signature `Ljava/util/AbstractMap;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L2dc796.  v8:= temp;
  #L2dc798.  return v8;
  #L2dc79a.  v8:= (`e.e.a.b.f.q.x1`) v8 @kind object;
  #L2dc79e.  call temp:= `size`(v7) @signature `Le/e/a/b/f/q/x1;.size:()I` @kind virtual;
  #L2dc7a4.  v1:= temp;
  #L2dc7a6.  call temp:= `size`(v8) @signature `Le/e/a/b/f/q/x1;.size:()I` @kind virtual;
  #L2dc7ac.  v2:= temp;
  #L2dc7ae.  v3:= 0I;
  #L2dc7b0.  if v1 == v2 then goto L2dc7b6;
  #L2dc7b4.  return v3;
  #L2dc7b6.  call temp:= `c`(v7) @signature `Le/e/a/b/f/q/x1;.c:()I` @kind virtual;
  #L2dc7bc.  v2:= temp;
  #L2dc7be.  call temp:= `c`(v8) @signature `Le/e/a/b/f/q/x1;.c:()I` @kind virtual;
  #L2dc7c4.  v4:= temp;
  #L2dc7c6.  if v2 != v4 then goto L2dc80c;
  #L2dc7ca.  v4:= 0I;
  #L2dc7cc.  if v4 >= v2 then goto L2dc7f4;
  #L2dc7d0.  call temp:= `a`(v7, v4) @signature `Le/e/a/b/f/q/x1;.a:(I)Ljava/util/Map$Entry;` @kind virtual;
  #L2dc7d6.  v5:= temp @kind object;
  #L2dc7d8.  call temp:= `a`(v8, v4) @signature `Le/e/a/b/f/q/x1;.a:(I)Ljava/util/Map$Entry;` @kind virtual;
  #L2dc7de.  v6:= temp @kind object;
  #L2dc7e0.  call temp:= `equals`(v5, v6) @signature `Ljava/util/Map$Entry;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L2dc7e6.  v5:= temp;
  #L2dc7e8.  if v5 != 0 then goto L2dc7ee;
  #L2dc7ec.  return v3;
  #L2dc7ee.  v4:= v4 + 1;
  #L2dc7f2.  goto L2dc7cc;
  #L2dc7f4.  if v2 == v1 then goto L2dc80a;
  #L2dc7f8.  v0:= v7.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dc7fc.  v8:= v8.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dc800.  call temp:= `equals`(v0, v8) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L2dc806.  v8:= temp;
  #L2dc808.  return v8;
  #L2dc80a.  return v0;
  #L2dc80c.  call temp:= `entrySet`(v7) @signature `Le/e/a/b/f/q/x1;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L2dc812.  v0:= temp @kind object;
  #L2dc814.  call temp:= `entrySet`(v8) @signature `Le/e/a/b/f/q/x1;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L2dc81a.  v8:= temp @kind object;
  #L2dc81c.  call temp:= `equals`(v0, v8) @signature `Ljava/util/Set;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L2dc822.  v8:= temp;
  #L2dc824.  return v8;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.q.x1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/q/x1;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2dc9dc.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L2dc9e0.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/q/x1;.a:(Ljava/lang/Comparable;)I` @kind direct;
  #L2dc9e6.  v0:= temp;
  #L2dc9e8.  if v0 < 0 then goto L2dca06;
  #L2dc9ec.  v2:= v1.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dc9f0.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2dc9f6.  v2:= temp @kind object;
  #L2dc9f8.  v2:= (`e.e.a.b.f.q.u1`) v2 @kind object;
  #L2dc9fc.  call temp:= `getValue`(v2) @signature `Le/e/a/b/f/q/u1;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L2dca02.  v2:= temp @kind object;
  #L2dca04.  return v2 @kind object;
  #L2dca06.  v0:= v1.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dca0a.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2dca10.  v2:= temp @kind object;
  #L2dca12.  return v2 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.q.x1` v4 @kind this) @signature `Le/e/a/b/f/q/x1;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2dc850.  call temp:= `c`(v4) @signature `Le/e/a/b/f/q/x1;.c:()I` @kind virtual;
  #L2dc856.  v0:= temp;
  #L2dc858.  v1:= 0I;
  #L2dc85a.  v2:= 0I;
  #L2dc85c.  if v1 >= v0 then goto L2dc880;
  #L2dc860.  v3:= v4.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dc864.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2dc86a.  v3:= temp @kind object;
  #L2dc86c.  v3:= (`e.e.a.b.f.q.u1`) v3 @kind object;
  #L2dc870.  call temp:= `hashCode`(v3) @signature `Le/e/a/b/f/q/u1;.hashCode:()I` @kind virtual;
  #L2dc876.  v3:= temp;
  #L2dc878.  v2:= v2 + v3 @kind int;
  #L2dc87a.  v1:= v1 + 1;
  #L2dc87e.  goto L2dc85c;
  #L2dc880.  v0:= v4.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dc884.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L2dc88a.  v0:= temp;
  #L2dc88c.  if v0 <= 0 then goto L2dc89e;
  #L2dc890.  v0:= v4.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dc894.  call temp:= `hashCode`(v0) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L2dc89a.  v0:= temp;
  #L2dc89c.  v2:= v2 + v0 @kind int;
  #L2dc89e.  return v2;
}
procedure `java.lang.Object` `put`(`e.e.a.b.f.q.x1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/q/x1;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L2dca24.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L2dca28.  call temp:= `a`(v0, v1, v2) @signature `Le/e/a/b/f/q/x1;.a:(Ljava/lang/Comparable;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2dca2e.  v1:= temp @kind object;
  #L2dca30.  return v1 @kind object;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.q.x1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/q/x1;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2dca44.  call `e`(v1) @signature `Le/e/a/b/f/q/x1;.e:()V` @kind direct;
  #L2dca4a.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L2dca4e.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/q/x1;.a:(Ljava/lang/Comparable;)I` @kind direct;
  #L2dca54.  v0:= temp;
  #L2dca56.  if v0 < 0 then goto L2dca64;
  #L2dca5a.  call temp:= `b`(v1, v0) @signature `Le/e/a/b/f/q/x1;.b:(I)Ljava/lang/Object;` @kind direct;
  #L2dca60.  v2:= temp @kind object;
  #L2dca62.  return v2 @kind object;
  #L2dca64.  v0:= v1.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dca68.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2dca6e.  v0:= temp;
  #L2dca70.  if v0 == 0 then goto L2dca78;
  #L2dca74.  v2:= 0I;
  #L2dca76.  return v2 @kind object;
  #L2dca78.  v0:= v1.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dca7c.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2dca82.  v2:= temp @kind object;
  #L2dca84.  return v2 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.q.x1` v2 @kind this) @signature `Le/e/a/b/f/q/x1;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2dc8b0.  v0:= v2.`e.e.a.b.f.q.x1.c` @type ^`java.util.List` @kind object;
  #L2dc8b4.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2dc8ba.  v0:= temp;
  #L2dc8bc.  v1:= v2.`e.e.a.b.f.q.x1.d` @type ^`java.util.Map` @kind object;
  #L2dc8c0.  call temp:= `size`(v1) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L2dc8c6.  v1:= temp;
  #L2dc8c8.  v0:= v0 + v1 @kind int;
  #L2dc8ca.  return v0;
}
