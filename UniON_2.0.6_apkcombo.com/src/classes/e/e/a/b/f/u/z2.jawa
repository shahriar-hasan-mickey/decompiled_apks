record `e.e.a.b.f.u.z2` @kind class @AccessFlag PUBLIC_ABSTRACT extends `e.e.a.b.f.u.e6` @kind interface {
}
procedure `void` `<init>`(`e.e.a.b.f.u.z2` v0 @kind this) @signature `Le/e/a/b/f/u/z2;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L325498.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32549e.  return @kind void;
}
procedure `e.e.a.b.f.u.e6` `a`(`e.e.a.b.f.u.z2` v1 @kind this, `e.e.a.b.f.u.b6` v2 @kind object) @signature `Le/e/a/b/f/u/z2;.a:(Le/e/a/b/f/u/b6;)Le/e/a/b/f/u/e6;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L325450.  call temp:= `k`(v1) @signature `Le/e/a/b/f/u/d6;.k:()Le/e/a/b/f/u/b6;` @kind interface;
  #L325456.  v0:= temp @kind object;
  #L325458.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L32545e.  v0:= temp @kind object;
  #L325460.  call temp:= `isInstance`(v0, v2) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L325466.  v0:= temp;
  #L325468.  if v0 == 0 then goto L325478;
  #L32546c.  v2:= (`e.e.a.b.f.u.a3`) v2 @kind object;
  #L325470.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/u/z2;.a:(Le/e/a/b/f/u/a3;)Le/e/a/b/f/u/z2;` @kind virtual;
  #L325476.  return v1 @kind object;
  #L325478.  v2:= new `java.lang.IllegalArgumentException`;
  #L32547c.  v0:= "mergeFrom(MessageLite) can only merge messages of the same type." @kind object;
  #L325480.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L325486.  throw v2;
}
procedure `e.e.a.b.f.u.z2` `a`(`e.e.a.b.f.u.a3` v0 @kind object) @signature `Le/e/a/b/f/u/z2;.a:(Le/e/a/b/f/u/a3;)Le/e/a/b/f/u/z2;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
