record `e.e.a.b.f.k.z` @kind class @AccessFlag FINAL extends `e.e.a.b.f.k.l1` @kind class {
  `e.e.a.b.f.k.g0` `e.e.a.b.f.k.z.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.k.z` v0 @kind this, `e.e.a.b.f.k.g0` v1 @kind object, `java.util.Map` v2 @kind object) @signature `Le/e/a/b/f/k/z;.<init>:(Le/e/a/b/f/k/g0;Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L243d58.  v0.`e.e.a.b.f.k.z.c` @type ^`e.e.a.b.f.k.g0` := v1 @kind object;
  #L243d5c.  call `<init>`(v0, v2) @signature `Le/e/a/b/f/k/l1;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L243d62.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.k.z` v1 @kind this) @signature `Le/e/a/b/f/k/z;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L243d74.  call temp:= `iterator`(v1) @signature `Le/e/a/b/f/k/z;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L243d7a.  v0:= temp @kind object;
  #L243d7c.  call `a`(v0) @signature `Le/e/a/b/f/k/h1;.a:(Ljava/util/Iterator;)V` @kind static;
  #L243d82.  return @kind void;
}
procedure `boolean` `containsAll`(`e.e.a.b.f.k.z` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/k/z;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L243c58.  v0:= v1.`e.e.a.b.f.k.l1.b` @type ^`java.util.Map` @kind object;
  #L243c5c.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L243c62.  v0:= temp @kind object;
  #L243c64.  call temp:= `containsAll`(v0, v2) @signature `Ljava/util/Set;.containsAll:(Ljava/util/Collection;)Z` @kind interface;
  #L243c6a.  v2:= temp;
  #L243c6c.  return v2;
}
procedure `boolean` `equals`(`e.e.a.b.f.k.z` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/k/z;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L243c80.  if v1 == v2 then goto L243ca2;
  #L243c84.  v0:= v1.`e.e.a.b.f.k.l1.b` @type ^`java.util.Map` @kind object;
  #L243c88.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L243c8e.  v0:= temp @kind object;
  #L243c90.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Set;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L243c96.  v2:= temp;
  #L243c98.  if v2 == 0 then goto L243c9e;
  #L243c9c.  goto L243ca2;
  #L243c9e.  v2:= 0I;
  #L243ca0.  return v2;
  #L243ca2.  v2:= 1I;
  #L243ca4.  return v2;
}
procedure `int` `hashCode`(`e.e.a.b.f.k.z` v1 @kind this) @signature `Le/e/a/b/f/k/z;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L243d00.  v0:= v1.`e.e.a.b.f.k.l1.b` @type ^`java.util.Map` @kind object;
  #L243d04.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L243d0a.  v0:= temp @kind object;
  #L243d0c.  call temp:= `hashCode`(v0) @signature `Ljava/util/Set;.hashCode:()I` @kind interface;
  #L243d12.  v0:= temp;
  #L243d14.  return v0;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.k.z` v2 @kind this) @signature `Le/e/a/b/f/k/z;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L243d28.  v0:= v2.`e.e.a.b.f.k.l1.b` @type ^`java.util.Map` @kind object;
  #L243d2c.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L243d32.  v0:= temp @kind object;
  #L243d34.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L243d3a.  v0:= temp @kind object;
  #L243d3c.  v1:= new `e.e.a.b.f.k.y`;
  #L243d40.  call `<init>`(v1, v2, v0) @signature `Le/e/a/b/f/k/y;.<init>:(Le/e/a/b/f/k/z;Ljava/util/Iterator;)V` @kind direct;
  #L243d46.  return v1 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.k.z` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/k/z;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L243cb8.  v0:= v1.`e.e.a.b.f.k.l1.b` @type ^`java.util.Map` @kind object;
  #L243cbc.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L243cc2.  v2:= temp @kind object;
  #L243cc4.  v2:= (`java.util.Collection`) v2 @kind object;
  #L243cc8.  if v2 == 0 then goto L243cec;
  #L243ccc.  call temp:= `size`(v2) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L243cd2.  v0:= temp;
  #L243cd4.  call `clear`(v2) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L243cda.  v2:= v1.`e.e.a.b.f.k.z.c` @type ^`e.e.a.b.f.k.g0` @kind object;
  #L243cde.  call temp:= `b`(v2, v0) @signature `Le/e/a/b/f/k/g0;.b:(Le/e/a/b/f/k/g0;I)I` @kind static;
  #L243ce4.  if v0 <= 0 then goto L243cec;
  #L243ce8.  v2:= 1I;
  #L243cea.  return v2;
  #L243cec.  v2:= 0I;
  #L243cee.  return v2;
}
