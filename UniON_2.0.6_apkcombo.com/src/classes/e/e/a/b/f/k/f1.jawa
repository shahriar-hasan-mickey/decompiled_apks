record `e.e.a.b.f.k.f1` @kind class @AccessFlag PUBLIC_ABSTRACT extends `e.e.a.b.f.k.y0` @kind class, `java.util.Set` @kind interface {
  `e.e.a.b.f.k.e1` `e.e.a.b.f.k.f1.c` @AccessFlag PRIVATE_TRANSIENT;
}
procedure `void` `<init>`(`e.e.a.b.f.k.f1` v0 @kind this) @signature `Le/e/a/b/f/k/f1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L246c1c.  call `<init>`(v0) @signature `Le/e/a/b/f/k/y0;.<init>:()V` @kind direct;
  #L246c22.  return @kind void;
}
procedure `e.e.a.b.f.k.f1` `a`(`int` v13 , `java.lang.Object`[] v14 @kind object) @signature `Le/e/a/b/f/k/f1;.a:(I[Ljava/lang/Object;)Le/e/a/b/f/k/f1;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L246a5c.  if v13 == 0 then goto L246b36;
  #L246a60.  v0:= 0I;
  #L246a62.  v1:= 1I;
  #L246a64.  if v13 == v1 then goto L246b26;
  #L246a68.  call temp:= `d`(v13) @signature `Le/e/a/b/f/k/f1;.d:(I)I` @kind static;
  #L246a6e.  v2:= temp;
  #L246a70.  v6:= new `java.lang.Object`[v2];
  #L246a74.  v7:= v2 + -1;
  #L246a78.  v3:= 0I;
  #L246a7a.  v5:= 0I;
  #L246a7c.  v8:= 0I;
  #L246a7e.  if v3 >= v13 then goto L246ad2;
  #L246a82.  v4:= v14[v3] @kind object;
  #L246a86.  call temp:= `a`(v4, v3) @signature `Le/e/a/b/f/k/r1;.a:(Ljava/lang/Object;I)Ljava/lang/Object;` @kind static;
  #L246a8c.  call temp:= `hashCode`(v4) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L246a92.  v9:= temp;
  #L246a94.  call temp:= `a`(v9) @signature `Le/e/a/b/f/k/v0;.a:(I)I` @kind static;
  #L246a9a.  v10:= temp;
  #L246a9c.  v11:= v10 ^& v7 @kind int;
  #L246aa0.  v12:= v6[v11] @kind object;
  #L246aa4.  if v12 != 0 then goto L246aba;
  #L246aa8.  v10:= v8 + 1;
  #L246aac.  v14[v8]:= v4 @kind object;
  #L246ab0.  v6[v11]:= v4 @kind object;
  #L246ab4.  v5:= v5 + v9 @kind int;
  #L246ab6.  v8:= v10;
  #L246ab8.  goto L246ac6;
  #L246aba.  call temp:= `equals`(v12, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L246ac0.  v11:= temp;
  #L246ac2.  if v11 == 0 then goto L246acc;
  #L246ac6.  v3:= v3 + 1;
  #L246aca.  goto L246a7e;
  #L246acc.  v10:= v10 + 1;
  #L246ad0.  goto L246a9c;
  #L246ad2.  v3:= 0I;
  #L246ad4.  call `fill`(v14, v8, v13, v3) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L246ada.  if v8 != v1 then goto L246aee;
  #L246ade.  v13:= v14[v0] @kind object;
  #L246ae2.  v14:= new `e.e.a.b.f.k.w1`;
  #L246ae6.  call `<init>`(v14, v13, v5) @signature `Le/e/a/b/f/k/w1;.<init>:(Ljava/lang/Object;I)V` @kind direct;
  #L246aec.  return v14 @kind object;
  #L246aee.  call temp:= `d`(v8) @signature `Le/e/a/b/f/k/f1;.d:(I)I` @kind static;
  #L246af4.  v13:= temp;
  #L246af6.  v2:= v2 / 2;
  #L246afa.  if v13 < v2 then goto L246b1c;
  #L246afe.  v13:= 6I;
  #L246b00.  if v8 >= v13 then goto L246b0c;
  #L246b04.  call temp:= `copyOf`(v14, v8) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L246b0a.  v14:= temp @kind object;
  #L246b0c.  v4:= v14 @kind object;
  #L246b0e.  v13:= new `e.e.a.b.f.k.t1`;
  #L246b12.  v3:= v13 @kind object;
  #L246b14.  call `<init>`(v3, v4, v5, v6, v7, v8) @signature `Le/e/a/b/f/k/t1;.<init>:([Ljava/lang/Object;I[Ljava/lang/Object;II)V` @kind direct;
  #L246b1a.  return v13 @kind object;
  #L246b1c.  call temp:= `a`(v8, v14) @signature `Le/e/a/b/f/k/f1;.a:(I[Ljava/lang/Object;)Le/e/a/b/f/k/f1;` @kind static;
  #L246b22.  v13:= temp @kind object;
  #L246b24.  return v13 @kind object;
  #L246b26.  v13:= v14[v0] @kind object;
  #L246b2a.  v14:= new `e.e.a.b.f.k.w1`;
  #L246b2e.  call `<init>`(v14, v13) @signature `Le/e/a/b/f/k/w1;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L246b34.  return v14 @kind object;
  #L246b36.  v13:= `@@e.e.a.b.f.k.t1.i` @type ^`e.e.a.b.f.k.t1` @kind object;
  #L246b3a.  return v13 @kind object;
}
procedure `e.e.a.b.f.k.f1` `a`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Le/e/a/b/f/k/f1;.a:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Le/e/a/b/f/k/f1;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2469f4.  v0:= 8I;
  #L2469f8.  v1:= new `java.lang.Object`[v0];
  #L2469fc.  v2:= 0I;
  #L2469fe.  v3:= "common" @kind object;
  #L246a02.  v1[v2]:= v3 @kind object;
  #L246a06.  v3:= 1I;
  #L246a08.  v4:= "vision-common" @kind object;
  #L246a0c.  v1[v3]:= v4 @kind object;
  #L246a10.  v3:= 2I;
  #L246a12.  v4:= "play-services-mlkit-barcode-scanning" @kind object;
  #L246a16.  v1[v3]:= v4 @kind object;
  #L246a1a.  v4:= 3I;
  #L246a1c.  v5:= "barcode-scanning" @kind object;
  #L246a20.  v1[v4]:= v5 @kind object;
  #L246a24.  v4:= 4I;
  #L246a26.  v5:= "play-services-mlkit-face-detection" @kind object;
  #L246a2a.  v1[v4]:= v5 @kind object;
  #L246a2e.  v4:= 5I;
  #L246a30.  v5:= "face-detection" @kind object;
  #L246a34.  v1[v4]:= v5 @kind object;
  #L246a38.  v4:= 6I;
  #L246a3a.  call `arraycopy`(v6, v2, v1, v4, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L246a40.  call temp:= `a`(v0, v1) @signature `Le/e/a/b/f/k/f1;.a:(I[Ljava/lang/Object;)Le/e/a/b/f/k/f1;` @kind static;
  #L246a46.  v0:= temp @kind object;
  #L246a48.  return v0 @kind object;
}
procedure `int` `d`(`int` v6 ) @signature `Le/e/a/b/f/k/f1;.d:(I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L246b94.  v0:= 2I;
  #L246b96.  call temp:= `max`(v6, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L246b9c.  v6:= temp;
  #L246b9e.  v0:= 751619276I;
  #L246ba4.  if v6 >= v0 then goto L246bd4;
  #L246ba8.  v0:= v6 + -1;
  #L246bac.  call temp:= `highestOneBit`(v0) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L246bb2.  v0:= temp;
  #L246bb4.  v0:= v0 + v0 @kind int;
  #L246bb6.  v1:= (`double`) v0 @kind i2d;
  #L246bb8.  v3:= 0.7D;
  #L246bc2.  v1:= v1 * v3 @kind double;
  #L246bc6.  v3:= (`double`) v6 @kind i2d;
  #L246bc8.  v5:= dcmpg(v1, v3);
  #L246bcc.  if v5 >= 0 then goto L246bd2;
  #L246bd0.  goto L246bb4;
  #L246bd2.  return v0;
  #L246bd4.  v0:= 2.0F;
  #L246bd8.  if v6 >= v0 then goto L246bde;
  #L246bdc.  return v0;
  #L246bde.  v6:= new `java.lang.IllegalArgumentException`;
  #L246be2.  v0:= "collection too large" @kind object;
  #L246be6.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246bec.  throw v6;
}
procedure `e.e.a.b.f.k.e1` `e`(`e.e.a.b.f.k.f1` v1 @kind this) @signature `Le/e/a/b/f/k/f1;.e:()Le/e/a/b/f/k/e1;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2469b8.  v0:= v1.`e.e.a.b.f.k.f1.c` @type ^`e.e.a.b.f.k.e1` @kind object;
  #L2469bc.  if v0 != 0 then goto L2469cc;
  #L2469c0.  call temp:= `f`(v1) @signature `Le/e/a/b/f/k/f1;.f:()Le/e/a/b/f/k/e1;` @kind virtual;
  #L2469c6.  v0:= temp @kind object;
  #L2469c8.  v1.`e.e.a.b.f.k.f1.c` @type ^`e.e.a.b.f.k.e1` := v0 @kind object;
  #L2469cc.  return v0 @kind object;
}
procedure `boolean` `equals`(`e.e.a.b.f.k.f1` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/k/f1;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L246900.  v0:= 1I;
  #L246902.  if v5 != v4 then goto L246908;
  #L246906.  return v0;
  #L246908.  v1:= instanceof @variable v5 @type ^`e.e.a.b.f.k.f1` @kind boolean;
  #L24690c.  v2:= 0I;
  #L24690e.  if v1 == 0 then goto L246948;
  #L246912.  call temp:= `v`(v4) @signature `Le/e/a/b/f/k/f1;.v:()Z` @kind virtual;
  #L246918.  v1:= temp;
  #L24691a.  if v1 == 0 then goto L246948;
  #L24691e.  v1:= v5 @kind object;
  #L246920.  v1:= (`e.e.a.b.f.k.f1`) v1 @kind object;
  #L246924.  call temp:= `v`(v1) @signature `Le/e/a/b/f/k/f1;.v:()Z` @kind virtual;
  #L24692a.  v1:= temp;
  #L24692c.  if v1 == 0 then goto L246948;
  #L246930.  call temp:= `hashCode`(v4) @signature `Le/e/a/b/f/k/f1;.hashCode:()I` @kind virtual;
  #L246936.  v1:= temp;
  #L246938.  call temp:= `hashCode`(v5) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L24693e.  v3:= temp;
  #L246940.  if v1 != v3 then goto L246946;
  #L246944.  goto L246948;
  #L246946.  return v2;
  #L246948.  if v5 != v4 then goto L246950;
  #L24694c.  v2:= 1I;
  #L24694e.  goto L246980;
  #L246950.  v1:= instanceof @variable v5 @type ^`java.util.Set` @kind boolean;
  #L246954.  if v1 == 0 then goto L246980;
  #L246958.  v5:= (`java.util.Set`) v5 @kind object;
  #L24695c.  call temp:= `size`(v4) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L246962.  v1:= temp;
  #L246964.  call temp:= `size`(v5) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L24696a.  v3:= temp;
  #L24696c.  if v1 != v3 then goto L246980;
  #L246970.  call temp:= `containsAll`(v4, v5) @signature `Ljava/util/Set;.containsAll:(Ljava/util/Collection;)Z` @kind interface;
  #L246976.  v5:= temp;
  #L246978.  if v5 != 0 then goto L24697e;
  #L24697c.  goto L246980;
  #L24697e.  return v0;
  #L246980.  return v2;
  catch `java.lang.NullPointerException` @[L24695c..L246978] goto L246980;
  catch `java.lang.ClassCastException` @[L24695c..L246978] goto L246980;
}
procedure `e.e.a.b.f.k.e1` `f`(`e.e.a.b.f.k.f1` v1 @kind this) @signature `Le/e/a/b/f/k/f1;.f:()Le/e/a/b/f/k/e1;` @AccessFlag  {
    temp;
    v0;

  #L2469e0.  v0:= 0I;
  #L2469e2.  throw v0;
}
procedure `int` `hashCode`(`e.e.a.b.f.k.f1` v4 @kind this) @signature `Le/e/a/b/f/k/f1;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L246b4c.  call temp:= `iterator`(v4) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L246b52.  v0:= temp @kind object;
  #L246b54.  v1:= 0I;
  #L246b56.  v2:= 0I;
  #L246b58.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L246b5e.  v3:= temp;
  #L246b60.  if v3 == 0 then goto L246b80;
  #L246b64.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L246b6a.  v3:= temp @kind object;
  #L246b6c.  if v3 == 0 then goto L246b7a;
  #L246b70.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L246b76.  v3:= temp;
  #L246b78.  goto L246b7c;
  #L246b7a.  v3:= 0I;
  #L246b7c.  v2:= v2 + v3 @kind int;
  #L246b7e.  goto L246b58;
  #L246b80.  return v2;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.k.f1` v1 @kind this) @signature `Le/e/a/b/f/k/f1;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L246c00.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/k/y0;.zza:()Le/e/a/b/f/k/y1;` @kind virtual;
  #L246c06.  v0:= temp @kind object;
  #L246c08.  return v0 @kind object;
}
procedure `boolean` `v`(`e.e.a.b.f.k.f1` v1 @kind this) @signature `Le/e/a/b/f/k/f1;.v:()Z` @AccessFlag  {
    temp;
    v0;

  #L2469a4.  v0:= 0I;
  #L2469a6.  throw v0;
}
