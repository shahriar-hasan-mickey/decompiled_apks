record `e.e.a.b.f.q.d` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.IOException` @kind class {
}
procedure `void` `<init>`(`e.e.a.b.f.q.d` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Le/e/a/b/f/q/d;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2d1094.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2d109a.  v3:= temp @kind object;
  #L2d109c.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2d10a2.  v0:= temp;
  #L2d10a4.  v1:= "CodedOutputStream was writing to a flat byte array and ran out of space.: " @kind object;
  #L2d10a8.  if v0 == 0 then goto L2d10b6;
  #L2d10ac.  call temp:= `concat`(v1, v3) @signature `Ljava/lang/String;.concat:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2d10b2.  v3:= temp @kind object;
  #L2d10b4.  goto L2d10c0;
  #L2d10b6.  v3:= new `java.lang.String`;
  #L2d10ba.  call `<init>`(v3, v1) @signature `Ljava/lang/String;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d10c0.  call `<init>`(v2, v3, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L2d10c6.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.q.d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Le/e/a/b/f/q/d;.<init>:(Ljava/lang/Throwable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2d10d8.  v0:= "CodedOutputStream was writing to a flat byte array and ran out of space." @kind object;
  #L2d10dc.  call `<init>`(v1, v0, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L2d10e2.  return @kind void;
}
