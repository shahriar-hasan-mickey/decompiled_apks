record `e.e.a.b.f.k.k1` @kind class @AccessFlag ABSTRACT extends `e.e.a.b.f.k.u1` @kind class {
}
procedure `void` `<init>`(`e.e.a.b.f.k.k1` v0 @kind this) @signature `Le/e/a/b/f/k/k1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L246ea0.  call `<init>`(v0) @signature `Le/e/a/b/f/k/u1;.<init>:()V` @kind direct;
  #L246ea6.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.k.k1` v1 @kind this) @signature `Le/e/a/b/f/k/k1;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L246eb8.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/k/k1;.zza:()Ljava/util/Map;` @kind virtual;
  #L246ebe.  v0:= temp @kind object;
  #L246ec0.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L246ec6.  return @kind void;
}
procedure `boolean` `contains`(`java.lang.Object` v0 @kind object) @signature `Le/e/a/b/f/k/k1;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`e.e.a.b.f.k.k1` v1 @kind this) @signature `Le/e/a/b/f/k/k1;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L246d0c.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/k/k1;.zza:()Ljava/util/Map;` @kind virtual;
  #L246d12.  v0:= temp @kind object;
  #L246d14.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L246d1a.  v0:= temp;
  #L246d1c.  return v0;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.k.k1` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/k/k1;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L246d30.  if v2 == 0 then goto L246d3e;
  #L246d34.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/k/v1;.a:(Ljava/util/Set;Ljava/util/Collection;)Z` @kind static;
  #L246d3a.  v2:= temp;
  #L246d3c.  return v2;
  #L246d3e.  v0:= 0I;
  #L246d40.  throw v0;
  #L246d42.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L246d48.  v2:= temp @kind object;
  #L246d4a.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/k/v1;.a:(Ljava/util/Set;Ljava/util/Iterator;)Z` @kind static;
  #L246d50.  v2:= temp;
  #L246d52.  return v2;
  catch `java.lang.UnsupportedOperationException` @[L246d34..L246d42] goto L246d42;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.k.k1` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Le/e/a/b/f/k/k1;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L246d74.  if v4 == 0 then goto L246d82;
  #L246d78.  call temp:= `retainAll`(v3, v4) @signature `Le/e/a/b/f/k/u1;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L246d7e.  v4:= temp;
  #L246d80.  return v4;
  #L246d82.  v0:= 0I;
  #L246d84.  throw v0;
  #L246d86.  
  #L246d88.  call temp:= `size`(v4) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L246d8e.  v0:= temp;
  #L246d90.  v1:= new `java.util.HashSet`;
  #L246d94.  v2:= 3I;
  #L246d96.  if v0 >= v2 then goto L246dd6;
  #L246d9a.  if v0 < 0 then goto L246da4;
  #L246d9e.  v0:= v0 + 1;
  #L246da2.  goto L246df6;
  #L246da4.  v4:= new `java.lang.IllegalArgumentException`;
  #L246da8.  v1:= new `java.lang.StringBuilder`;
  #L246dac.  v2:= 52I;
  #L246db0.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L246db6.  v2:= "expectedSize cannot be negative but was: " @kind object;
  #L246dba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246dc0.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L246dc6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L246dcc.  v0:= temp @kind object;
  #L246dce.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246dd4.  throw v4;
  #L246dd6.  v2:= 2.0F;
  #L246dda.  if v0 >= v2 then goto L246df0;
  #L246dde.  v0:= (`float`) v0 @kind i2f;
  #L246de0.  v2:= 0.75F;
  #L246de4.  v0:= v0 / v2 @kind float;
  #L246de6.  v2:= 1.0F;
  #L246dea.  v0:= v0 + v2 @kind float;
  #L246dec.  v0:= (`int`) v0 @kind f2i;
  #L246dee.  goto L246df6;
  #L246df0.  v0:= 2147483647I;
  #L246df6.  call `<init>`(v1, v0) @signature `Ljava/util/HashSet;.<init>:(I)V` @kind direct;
  #L246dfc.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L246e02.  v4:= temp @kind object;
  #L246e04.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L246e0a.  v0:= temp;
  #L246e0c.  if v0 == 0 then goto L246e38;
  #L246e10.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L246e16.  v0:= temp @kind object;
  #L246e18.  call temp:= `contains`(v3, v0) @signature `Le/e/a/b/f/k/k1;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L246e1e.  v2:= temp;
  #L246e20.  if v2 == 0 then goto L246e04;
  #L246e24.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L246e28.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L246e2e.  v0:= temp @kind object;
  #L246e30.  call temp:= `add`(v1, v0) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L246e36.  goto L246e04;
  #L246e38.  call temp:= `zza`(v3) @signature `Le/e/a/b/f/k/k1;.zza:()Ljava/util/Map;` @kind virtual;
  #L246e3e.  v4:= temp @kind object;
  #L246e40.  v4:= (`e.e.a.b.f.k.x`) v4 @kind object;
  #L246e44.  v4:= v4.`e.e.a.b.f.k.x.e` @type ^`e.e.a.b.f.k.g0` @kind object;
  #L246e48.  call temp:= `c`(v4) @signature `Le/e/a/b/f/k/i0;.c:()Ljava/util/Set;` @kind virtual;
  #L246e4e.  v4:= temp @kind object;
  #L246e50.  call temp:= `retainAll`(v4, v1) @signature `Ljava/util/Set;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L246e56.  v4:= temp;
  #L246e58.  return v4;
  catch `java.lang.UnsupportedOperationException` @[L246d78..L246d86] goto L246d86;
}
procedure `int` `size`(`e.e.a.b.f.k.k1` v1 @kind this) @signature `Le/e/a/b/f/k/k1;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L246e7c.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/k/k1;.zza:()Ljava/util/Map;` @kind virtual;
  #L246e82.  v0:= temp @kind object;
  #L246e84.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L246e8a.  v0:= temp;
  #L246e8c.  return v0;
}
procedure `java.util.Map` `zza`() @signature `Le/e/a/b/f/k/k1;.zza:()Ljava/util/Map;` @AccessFlag ABSTRACT {

  # return;
}
