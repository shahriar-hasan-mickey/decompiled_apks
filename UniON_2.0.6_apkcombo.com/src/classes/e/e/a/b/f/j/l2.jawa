record `e.e.a.b.f.j.l2` @kind class @AccessFlag ABSTRACT extends `java.util.AbstractList` @kind class, `e.e.a.b.f.j.y3` @kind interface {
  `boolean` `e.e.a.b.f.j.l2.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.f.j.l2` v1 @kind this) @signature `Le/e/a/b/f/j/l2;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L221d10.  call `<init>`(v1) @signature `Ljava/util/AbstractList;.<init>:()V` @kind direct;
  #L221d16.  v0:= 1I;
  #L221d18.  v1.`e.e.a.b.f.j.l2.b` @type ^`boolean` := v0 @kind boolean;
  #L221d1c.  return @kind void;
}
procedure `boolean` `add`(`e.e.a.b.f.j.l2` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/j/l2;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L221b7c.  call `d`(v0) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L221b82.  call temp:= `add`(v0, v1) @signature `Ljava/util/AbstractList;.add:(Ljava/lang/Object;)Z` @kind super;
  #L221b88.  v1:= temp;
  #L221b8a.  return v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.j.l2` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/j/l2;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L221b9c.  call `d`(v0) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L221ba2.  call temp:= `addAll`(v0, v1, v2) @signature `Ljava/util/AbstractList;.addAll:(ILjava/util/Collection;)Z` @kind super;
  #L221ba8.  v1:= temp;
  #L221baa.  return v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.j.l2` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/j/l2;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L221bbc.  call `d`(v0) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L221bc2.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/AbstractList;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L221bc8.  v1:= temp;
  #L221bca.  return v1;
}
procedure `void` `clear`(`e.e.a.b.f.j.l2` v0 @kind this) @signature `Le/e/a/b/f/j/l2;.clear:()V` @AccessFlag PUBLIC {
    temp;

  #L221d48.  call `d`(v0) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L221d4e.  call `clear`(v0) @signature `Ljava/util/AbstractList;.clear:()V` @kind super;
  #L221d54.  return @kind void;
}
procedure `void` `d`(`e.e.a.b.f.j.l2` v1 @kind this) @signature `Le/e/a/b/f/j/l2;.d:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L221d68.  v0:= v1.`e.e.a.b.f.j.l2.b` @type ^`boolean` @kind boolean;
  #L221d6c.  if v0 == 0 then goto L221d72;
  #L221d70.  return @kind void;
  #L221d72.  v0:= new `java.lang.UnsupportedOperationException`;
  #L221d76.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L221d7c.  throw v0;
}
procedure `boolean` `equals`(`e.e.a.b.f.j.l2` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/j/l2;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L221bdc.  v0:= 1I;
  #L221bde.  if v7 != v6 then goto L221be4;
  #L221be2.  return v0;
  #L221be4.  v1:= instanceof @variable v7 @type ^`java.util.List` @kind boolean;
  #L221be8.  v2:= 0I;
  #L221bea.  if v1 != 0 then goto L221bf0;
  #L221bee.  return v2;
  #L221bf0.  v1:= instanceof @variable v7 @type ^`java.util.RandomAccess` @kind boolean;
  #L221bf4.  if v1 != 0 then goto L221c02;
  #L221bf8.  call temp:= `equals`(v6, v7) @signature `Ljava/util/AbstractList;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L221bfe.  v7:= temp;
  #L221c00.  return v7;
  #L221c02.  v7:= (`java.util.List`) v7 @kind object;
  #L221c06.  call temp:= `size`(v6) @signature `Ljava/util/AbstractList;.size:()I` @kind virtual;
  #L221c0c.  v1:= temp;
  #L221c0e.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L221c14.  v3:= temp;
  #L221c16.  if v1 == v3 then goto L221c1c;
  #L221c1a.  return v2;
  #L221c1c.  v3:= 0I;
  #L221c1e.  if v3 >= v1 then goto L221c46;
  #L221c22.  call temp:= `get`(v6, v3) @signature `Ljava/util/AbstractList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L221c28.  v4:= temp @kind object;
  #L221c2a.  call temp:= `get`(v7, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L221c30.  v5:= temp @kind object;
  #L221c32.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L221c38.  v4:= temp;
  #L221c3a.  if v4 != 0 then goto L221c40;
  #L221c3e.  return v2;
  #L221c40.  v3:= v3 + 1;
  #L221c44.  goto L221c1e;
  #L221c46.  return v0;
}
procedure `int` `hashCode`(`e.e.a.b.f.j.l2` v4 @kind this) @signature `Le/e/a/b/f/j/l2;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L221cd0.  call temp:= `size`(v4) @signature `Ljava/util/AbstractList;.size:()I` @kind virtual;
  #L221cd6.  v0:= temp;
  #L221cd8.  v1:= 1I;
  #L221cda.  v2:= 0I;
  #L221cdc.  if v2 >= v0 then goto L221cfc;
  #L221ce0.  v1:= v1 * 31;
  #L221ce4.  call temp:= `get`(v4, v2) @signature `Ljava/util/AbstractList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L221cea.  v3:= temp @kind object;
  #L221cec.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L221cf2.  v3:= temp;
  #L221cf4.  v1:= v1 + v3 @kind int;
  #L221cf6.  v2:= v2 + 1;
  #L221cfa.  goto L221cdc;
  #L221cfc.  return v1;
}
procedure `boolean` `remove`(`e.e.a.b.f.j.l2` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/j/l2;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L221c58.  call `d`(v0) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L221c5e.  call temp:= `remove`(v0, v1) @signature `Ljava/util/AbstractList;.remove:(Ljava/lang/Object;)Z` @kind super;
  #L221c64.  v1:= temp;
  #L221c66.  return v1;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.j.l2` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/j/l2;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L221c78.  call `d`(v0) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L221c7e.  call temp:= `removeAll`(v0, v1) @signature `Ljava/util/AbstractList;.removeAll:(Ljava/util/Collection;)Z` @kind super;
  #L221c84.  v1:= temp;
  #L221c86.  return v1;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.j.l2` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/j/l2;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L221c98.  call `d`(v0) @signature `Le/e/a/b/f/j/l2;.d:()V` @kind virtual;
  #L221c9e.  call temp:= `retainAll`(v0, v1) @signature `Ljava/util/AbstractList;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L221ca4.  v1:= temp;
  #L221ca6.  return v1;
}
procedure `void` `s`(`e.e.a.b.f.j.l2` v1 @kind this) @signature `Le/e/a/b/f/j/l2;.s:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L221d30.  v0:= 0I;
  #L221d32.  v1.`e.e.a.b.f.j.l2.b` @type ^`boolean` := v0 @kind boolean;
  #L221d36.  return @kind void;
}
procedure `boolean` `zza`(`e.e.a.b.f.j.l2` v1 @kind this) @signature `Le/e/a/b/f/j/l2;.zza:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L221cb8.  v0:= v1.`e.e.a.b.f.j.l2.b` @type ^`boolean` @kind boolean;
  #L221cbc.  return v0;
}
