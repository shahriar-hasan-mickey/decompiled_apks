record `e.e.a.b.f.n.c5` @kind class @AccessFlag FINAL {
}
global `e.e.a.b.f.n.y4` `@@e.e.a.b.f.n.c5.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/n/c5;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L28e2c0.  call temp:= `b`() @signature `Le/e/a/b/f/n/w4;.b:()Z` @kind static;
  #L28e2c6.  v0:= temp;
  #L28e2c8.  if v0 == 0 then goto L28e2f0;
  #L28e2cc.  call temp:= `c`() @signature `Le/e/a/b/f/n/w4;.c:()Z` @kind static;
  #L28e2d2.  v0:= temp;
  #L28e2d4.  if v0 == 0 then goto L28e2f0;
  #L28e2d8.  call temp:= `a`() @signature `Le/e/a/b/f/n/w;.a:()Z` @kind static;
  #L28e2de.  v0:= temp;
  #L28e2e0.  if v0 != 0 then goto L28e2f0;
  #L28e2e4.  v0:= new `e.e.a.b.f.n.b5`;
  #L28e2e8.  call `<init>`(v0) @signature `Le/e/a/b/f/n/b5;.<init>:()V` @kind direct;
  #L28e2ee.  goto L28e2fa;
  #L28e2f0.  v0:= new `e.e.a.b.f.n.z4`;
  #L28e2f4.  call `<init>`(v0) @signature `Le/e/a/b/f/n/z4;.<init>:()V` @kind direct;
  #L28e2fa.  `@@e.e.a.b.f.n.c5.a` @type ^`e.e.a.b.f.n.y4` := v0 @kind object;
  #L28e2fe.  return @kind void;
}
procedure `int` `a`(`int` v0 ) @signature `Le/e/a/b/f/n/c5;.a:(I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L28e200.  call temp:= `b`(v0) @signature `Le/e/a/b/f/n/c5;.b:(I)I` @kind static;
  #L28e206.  v0:= temp;
  #L28e208.  return v0;
}
procedure `int` `a`(`int` v0 , `int` v1 ) @signature `Le/e/a/b/f/n/c5;.a:(II)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L28e164.  call temp:= `b`(v0, v1) @signature `Le/e/a/b/f/n/c5;.b:(II)I` @kind static;
  #L28e16a.  v0:= temp;
  #L28e16c.  return v0;
}
procedure `int` `a`(`int` v0 , `int` v1 , `int` v2 ) @signature `Le/e/a/b/f/n/c5;.a:(III)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L28e180.  call temp:= `b`(v0, v1, v2) @signature `Le/e/a/b/f/n/c5;.b:(III)I` @kind static;
  #L28e186.  v0:= temp;
  #L28e188.  return v0;
}
procedure `int` `a`(`int` v1 , `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/n/c5;.a:(I[BII)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L28e01c.  v0:= `@@e.e.a.b.f.n.c5.a` @type ^`e.e.a.b.f.n.y4` @kind object;
  #L28e020.  call temp:= `a`(v0, v1, v2, v3, v4) @signature `Le/e/a/b/f/n/y4;.a:(I[BII)I` @kind virtual;
  #L28e026.  v1:= temp;
  #L28e028.  return v1;
}
procedure `int` `a`(`java.lang.CharSequence` v8 @kind object) @signature `Le/e/a/b/f/n/c5;.a:(Ljava/lang/CharSequence;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L28e03c.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L28e042.  v0:= temp;
  #L28e044.  v1:= 0I;
  #L28e046.  v2:= 0I;
  #L28e048.  if v2 >= v0 then goto L28e062;
  #L28e04c.  call temp:= `charAt`(v8, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L28e052.  v3:= temp;
  #L28e054.  v4:= 128I;
  #L28e058.  if v3 >= v4 then goto L28e062;
  #L28e05c.  v2:= v2 + 1;
  #L28e060.  goto L28e048;
  #L28e062.  v3:= v0;
  #L28e064.  if v2 >= v0 then goto L28e0ee;
  #L28e068.  call temp:= `charAt`(v8, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L28e06e.  v4:= temp;
  #L28e070.  v5:= 2048I;
  #L28e074.  if v4 >= v5 then goto L28e088;
  #L28e078.  v4:= v4 - 127;
  #L28e07c.  v4:= v4 ^>> 31;
  #L28e080.  v3:= v3 + v4 @kind int;
  #L28e082.  v2:= v2 + 1;
  #L28e086.  goto L28e064;
  #L28e088.  call temp:= `length`(v8) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L28e08e.  v4:= temp;
  #L28e090.  if v2 >= v4 then goto L28e0ec;
  #L28e094.  call temp:= `charAt`(v8, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L28e09a.  v6:= temp;
  #L28e09c.  if v6 >= v5 then goto L28e0ac;
  #L28e0a0.  v6:= v6 - 127;
  #L28e0a4.  v6:= v6 ^>> 31;
  #L28e0a8.  v1:= v1 + v6 @kind int;
  #L28e0aa.  goto L28e0e6;
  #L28e0ac.  v1:= v1 + 2;
  #L28e0b0.  v7:= 55296I;
  #L28e0b6.  if v6 < v7 then goto L28e0e6;
  #L28e0ba.  v7:= 57343I;
  #L28e0c0.  if v6 > v7 then goto L28e0e6;
  #L28e0c4.  call temp:= `codePointAt`(v8, v2) @signature `Ljava/lang/Character;.codePointAt:(Ljava/lang/CharSequence;I)I` @kind static;
  #L28e0ca.  v6:= temp;
  #L28e0cc.  v7:= 65536I;
  #L28e0d0.  if v6 < v7 then goto L28e0da;
  #L28e0d4.  v2:= v2 + 1;
  #L28e0d8.  goto L28e0e6;
  #L28e0da.  v8:= new `e.e.a.b.f.n.a5`;
  #L28e0de.  call `<init>`(v8, v2, v4) @signature `Le/e/a/b/f/n/a5;.<init>:(II)V` @kind direct;
  #L28e0e4.  throw v8;
  #L28e0e6.  v2:= v2 + 1;
  #L28e0ea.  goto L28e090;
  #L28e0ec.  v3:= v3 + v1 @kind int;
  #L28e0ee.  if v3 < v0 then goto L28e0f4;
  #L28e0f2.  return v3;
  #L28e0f4.  v8:= new `java.lang.IllegalArgumentException`;
  #L28e0f8.  v0:= new `java.lang.StringBuilder`;
  #L28e0fc.  v1:= 54I;
  #L28e100.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L28e106.  v1:= "UTF-8 length does not fit in int: " @kind object;
  #L28e10a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28e110.  v1:= (`long`) v3 @kind i2l;
  #L28e112.  v3:= 4294967296L;
  #L28e11c.  v1:= v1 + v3 @kind long;
  #L28e11e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L28e124.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28e12a.  v0:= temp @kind object;
  #L28e12c.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28e132.  throw v8;
}
procedure `int` `a`(`java.lang.CharSequence` v1 @kind object, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/n/c5;.a:(Ljava/lang/CharSequence;[BII)I` @AccessFlag STATIC {
    temp;
    v0;

  #L28e144.  v0:= `@@e.e.a.b.f.n.c5.a` @type ^`e.e.a.b.f.n.y4` @kind object;
  #L28e148.  call temp:= `a`(v0, v1, v2, v3, v4) @signature `Le/e/a/b/f/n/y4;.a:(Ljava/lang/CharSequence;[BII)I` @kind virtual;
  #L28e14e.  v1:= temp;
  #L28e150.  return v1;
}
procedure `boolean` `a`(`byte`[] v3 @kind object) @signature `Le/e/a/b/f/n/c5;.a:([B)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L28dfd8.  v0:= `@@e.e.a.b.f.n.c5.a` @type ^`e.e.a.b.f.n.y4` @kind object;
  #L28dfdc.  v1:= length @variable v3;
  #L28dfde.  v2:= 0I;
  #L28dfe0.  call temp:= `a`(v0, v3, v2, v1) @signature `Le/e/a/b/f/n/y4;.a:([BII)Z` @kind virtual;
  #L28dfe6.  v3:= temp;
  #L28dfe8.  return v3;
}
procedure `boolean` `a`(`byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/n/c5;.a:([BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L28dffc.  v0:= `@@e.e.a.b.f.n.c5.a` @type ^`e.e.a.b.f.n.y4` @kind object;
  #L28e000.  call temp:= `a`(v0, v1, v2, v3) @signature `Le/e/a/b/f/n/y4;.a:([BII)Z` @kind virtual;
  #L28e006.  v1:= temp;
  #L28e008.  return v1;
}
procedure `int` `b`(`int` v1 ) @signature `Le/e/a/b/f/n/c5;.b:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L28e21c.  v0:= -12I;
  #L28e220.  if v1 <= v0 then goto L28e226;
  #L28e224.  v1:= -1I;
  #L28e226.  return v1;
}
procedure `int` `b`(`int` v1 , `int` v2 ) @signature `Le/e/a/b/f/n/c5;.b:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L28e238.  v0:= -12I;
  #L28e23c.  if v1 > v0 then goto L28e252;
  #L28e240.  v0:= -65I;
  #L28e244.  if v2 <= v0 then goto L28e24a;
  #L28e248.  goto L28e252;
  #L28e24a.  v2:= v2 ^< 8;
  #L28e24e.  v1:= v1 ^~ v2 @kind int;
  #L28e250.  return v1;
  #L28e252.  v1:= -1I;
  #L28e254.  return v1;
}
procedure `int` `b`(`int` v1 , `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/n/c5;.b:(III)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L28e268.  v0:= -12I;
  #L28e26c.  if v1 > v0 then goto L28e28c;
  #L28e270.  v0:= -65I;
  #L28e274.  if v2 > v0 then goto L28e28c;
  #L28e278.  if v3 <= v0 then goto L28e27e;
  #L28e27c.  goto L28e28c;
  #L28e27e.  v2:= v2 ^< 8;
  #L28e282.  v1:= v1 ^~ v2 @kind int;
  #L28e284.  v2:= v3 ^< 16;
  #L28e288.  v1:= v1 ^~ v2 @kind int;
  #L28e28a.  return v1;
  #L28e28c.  v1:= -1I;
  #L28e28e.  return v1;
}
procedure `java.lang.String` `b`(`byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/n/c5;.b:([BII)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;

  #L28e2a0.  v0:= `@@e.e.a.b.f.n.c5.a` @type ^`e.e.a.b.f.n.y4` @kind object;
  #L28e2a4.  call temp:= `b`(v0, v1, v2, v3) @signature `Le/e/a/b/f/n/y4;.b:([BII)Ljava/lang/String;` @kind virtual;
  #L28e2aa.  v1:= temp @kind object;
  #L28e2ac.  return v1 @kind object;
}
procedure `int` `c`(`byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Le/e/a/b/f/n/c5;.c:([BII)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L28e19c.  v0:= v4 + -1;
  #L28e1a0.  v0:= v3[v0] @kind byte;
  #L28e1a4.  v5:= v5 - v4 @kind int;
  #L28e1a6.  if v5 == 0 then goto L28e1e4;
  #L28e1aa.  v1:= 1I;
  #L28e1ac.  if v5 == v1 then goto L28e1d6;
  #L28e1b0.  v2:= 2I;
  #L28e1b2.  if v5 != v2 then goto L28e1ca;
  #L28e1b6.  v5:= v3[v4] @kind byte;
  #L28e1ba.  v4:= v4 + v1 @kind int;
  #L28e1bc.  v3:= v3[v4] @kind byte;
  #L28e1c0.  call temp:= `b`(v0, v5, v3) @signature `Le/e/a/b/f/n/c5;.b:(III)I` @kind static;
  #L28e1c6.  v3:= temp;
  #L28e1c8.  goto L28e1ec;
  #L28e1ca.  v3:= new `java.lang.AssertionError`;
  #L28e1ce.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L28e1d4.  throw v3;
  #L28e1d6.  v3:= v3[v4] @kind byte;
  #L28e1da.  call temp:= `b`(v0, v3) @signature `Le/e/a/b/f/n/c5;.b:(II)I` @kind static;
  #L28e1e0.  v3:= temp;
  #L28e1e2.  goto L28e1ec;
  #L28e1e4.  call temp:= `b`(v0) @signature `Le/e/a/b/f/n/c5;.b:(I)I` @kind static;
  #L28e1ea.  v3:= temp;
  #L28e1ec.  return v3;
}
