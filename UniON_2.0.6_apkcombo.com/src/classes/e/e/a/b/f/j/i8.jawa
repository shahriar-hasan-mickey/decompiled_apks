record `e.e.a.b.f.j.i8` @kind class @AccessFlag PUBLIC_ABSTRACT extends `e.e.a.b.f.j.j8` @kind class, `java.util.List` @kind interface, `java.util.RandomAccess` @kind interface {
}
global `e.e.a.b.f.j.p8` `@@e.e.a.b.f.j.i8.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/j/i8;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L236bf8.  v0:= new `e.e.a.b.f.j.l8`;
  #L236bfc.  v1:= `@@e.e.a.b.f.j.n8.f` @type ^`e.e.a.b.f.j.i8` @kind object;
  #L236c00.  v2:= 0I;
  #L236c02.  call `<init>`(v0, v1, v2) @signature `Le/e/a/b/f/j/l8;.<init>:(Le/e/a/b/f/j/i8;I)V` @kind direct;
  #L236c08.  `@@e.e.a.b.f.j.i8.c` @type ^`e.e.a.b.f.j.p8` := v0 @kind object;
  #L236c0c.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.j.i8` v0 @kind this) @signature `Le/e/a/b/f/j/i8;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L236c20.  call `<init>`(v0) @signature `Le/e/a/b/f/j/j8;.<init>:()V` @kind direct;
  #L236c26.  return @kind void;
}
procedure `e.e.a.b.f.j.i8` `a`(`java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Le/e/a/b/f/j/i8;.a:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Le/e/a/b/f/j/i8;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L236938.  v0:= 6I;
  #L23693a.  v1:= new `java.lang.Object`[v0];
  #L23693e.  v2:= 0I;
  #L236940.  v1[v2]:= v3 @kind object;
  #L236944.  v3:= 1I;
  #L236946.  v1[v3]:= v4 @kind object;
  #L23694a.  v3:= 2I;
  #L23694c.  v1[v3]:= v5 @kind object;
  #L236950.  v3:= 3I;
  #L236952.  v1[v3]:= v6 @kind object;
  #L236956.  v3:= 4I;
  #L236958.  v1[v3]:= v7 @kind object;
  #L23695c.  v3:= 5I;
  #L23695e.  v1[v3]:= v8 @kind object;
  #L236962.  if v2 >= v0 then goto L2369a6;
  #L236966.  v3:= v1[v2] @kind object;
  #L23696a.  if v3 == 0 then goto L236974;
  #L23696e.  v2:= v2 + 1;
  #L236972.  goto L236962;
  #L236974.  v3:= new `java.lang.NullPointerException`;
  #L236978.  v4:= 20I;
  #L23697c.  v5:= new `java.lang.StringBuilder`;
  #L236980.  call `<init>`(v5, v4) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L236986.  v4:= "at index " @kind object;
  #L23698a.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L236990.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L236996.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23699c.  v4:= temp @kind object;
  #L23699e.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2369a4.  throw v3;
  #L2369a6.  v3:= new `e.e.a.b.f.j.n8`;
  #L2369aa.  call `<init>`(v3, v1, v0) @signature `Le/e/a/b/f/j/n8;.<init>:([Ljava/lang/Object;I)V` @kind direct;
  #L2369b0.  return v3 @kind object;
}
procedure `int` `a`(`e.e.a.b.f.j.i8` v2 @kind this, `java.lang.Object`[] v3 @kind object, `int` v4 ) @signature `Le/e/a/b/f/j/i8;.a:([Ljava/lang/Object;I)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L236af8.  call temp:= `size`(v2) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L236afe.  v4:= temp;
  #L236b00.  v0:= 0I;
  #L236b02.  if v0 >= v4 then goto L236b18;
  #L236b06.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L236b0c.  v1:= temp @kind object;
  #L236b0e.  v3[v0]:= v1 @kind object;
  #L236b12.  v0:= v0 + 1;
  #L236b16.  goto L236b02;
  #L236b18.  return v4;
}
procedure `e.e.a.b.f.j.i8` `a`(`e.e.a.b.f.j.i8` v1 @kind this, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/j/i8;.a:(II)Le/e/a/b/f/j/i8;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2368f4.  call temp:= `size`(v1) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2368fa.  v0:= temp;
  #L2368fc.  call `a`(v2, v3, v0) @signature `Le/e/a/b/f/j/d5;.a:(III)V` @kind static;
  #L236902.  v3:= v3 - v2 @kind int;
  #L236904.  call temp:= `size`(v1) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L23690a.  v0:= temp;
  #L23690c.  if v3 != v0 then goto L236912;
  #L236910.  return v1 @kind object;
  #L236912.  if v3 != 0 then goto L23691c;
  #L236916.  v2:= `@@e.e.a.b.f.j.n8.f` @type ^`e.e.a.b.f.j.i8` @kind object;
  #L23691a.  return v2 @kind object;
  #L23691c.  v0:= new `e.e.a.b.f.j.k8`;
  #L236920.  call `<init>`(v0, v1, v2, v3) @signature `Le/e/a/b/f/j/k8;.<init>:(Le/e/a/b/f/j/i8;II)V` @kind direct;
  #L236926.  return v0 @kind object;
}
procedure `void` `add`(`e.e.a.b.f.j.i8` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/j/i8;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L236c38.  v1:= new `java.lang.UnsupportedOperationException`;
  #L236c3c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L236c42.  throw v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.j.i8` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/j/i8;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2367ec.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2367f0.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2367f6.  throw v1;
}
procedure `boolean` `contains`(`e.e.a.b.f.j.i8` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/j/i8;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L236808.  call temp:= `indexOf`(v0, v1) @signature `Le/e/a/b/f/j/i8;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L23680e.  v1:= temp;
  #L236810.  if v1 < 0 then goto L236818;
  #L236814.  v1:= 1I;
  #L236816.  return v1;
  #L236818.  v1:= 0I;
  #L23681a.  return v1;
}
procedure `boolean` `equals`(`e.e.a.b.f.j.i8` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/j/i8;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23682c.  call temp:= `a`(v6) @signature `Le/e/a/b/f/j/d5;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L236832.  v0:= 1I;
  #L236834.  if v7 != v6 then goto L23683a;
  #L236838.  return v0;
  #L23683a.  v1:= instanceof @variable v7 @type ^`java.util.List` @kind boolean;
  #L23683e.  v2:= 0I;
  #L236840.  if v1 == 0 then goto L2368e0;
  #L236844.  v7:= (`java.util.List`) v7 @kind object;
  #L236848.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23684e.  v1:= temp;
  #L236850.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L236856.  v3:= temp;
  #L236858.  if v1 != v3 then goto L2368e0;
  #L23685c.  v3:= instanceof @variable v7 @type ^`java.util.RandomAccess` @kind boolean;
  #L236860.  if v3 == 0 then goto L23688e;
  #L236864.  v3:= 0I;
  #L236866.  if v3 >= v1 then goto L23688c;
  #L23686a.  call temp:= `get`(v6, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L236870.  v4:= temp @kind object;
  #L236872.  call temp:= `get`(v7, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L236878.  v5:= temp @kind object;
  #L23687a.  call temp:= `a`(v4, v5) @signature `Le/e/a/b/f/j/d6;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L236880.  v4:= temp;
  #L236882.  if v4 == 0 then goto L2368e0;
  #L236886.  v3:= v3 + 1;
  #L23688a.  goto L236866;
  #L23688c.  return v0;
  #L23688e.  call temp:= `size`(v6) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L236894.  v1:= temp;
  #L236896.  call temp:= `iterator`(v7) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L23689c.  v7:= temp @kind object;
  #L23689e.  v3:= 0I;
  #L2368a0.  if v3 >= v1 then goto L2368d2;
  #L2368a4.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2368aa.  v4:= temp;
  #L2368ac.  if v4 == 0 then goto L2368e0;
  #L2368b0.  call temp:= `get`(v6, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2368b6.  v4:= temp @kind object;
  #L2368b8.  v3:= v3 + 1;
  #L2368bc.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2368c2.  v5:= temp @kind object;
  #L2368c4.  call temp:= `a`(v4, v5) @signature `Le/e/a/b/f/j/d6;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2368ca.  v4:= temp;
  #L2368cc.  if v4 == 0 then goto L2368e0;
  #L2368d0.  goto L2368a0;
  #L2368d2.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2368d8.  v7:= temp;
  #L2368da.  if v7 != 0 then goto L2368e0;
  #L2368de.  return v0;
  #L2368e0.  return v2;
}
procedure `int` `hashCode`(`e.e.a.b.f.j.i8` v4 @kind this) @signature `Le/e/a/b/f/j/i8;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2369e4.  call temp:= `size`(v4) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2369ea.  v0:= temp;
  #L2369ec.  v1:= 1I;
  #L2369ee.  v2:= 0I;
  #L2369f0.  if v2 >= v0 then goto L236a14;
  #L2369f4.  v1:= v1 * 31;
  #L2369f8.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2369fe.  v3:= temp @kind object;
  #L236a00.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L236a06.  v3:= temp;
  #L236a08.  v1:= v1 + v3 @kind int;
  #L236a0a.  v1:= ~v1 @kind int;
  #L236a0c.  v1:= ~v1 @kind int;
  #L236a0e.  v2:= v2 + 1;
  #L236a12.  goto L2369f0;
  #L236a14.  return v1;
}
procedure `int` `indexOf`(`e.e.a.b.f.j.i8` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/j/i8;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L236a28.  v0:= -1I;
  #L236a2a.  if v5 != 0 then goto L236a30;
  #L236a2e.  return v0;
  #L236a30.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L236a36.  v1:= temp;
  #L236a38.  v2:= 0I;
  #L236a3a.  if v5 != 0 then goto L236a56;
  #L236a3e.  if v2 >= v1 then goto L236a76;
  #L236a42.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L236a48.  v5:= temp @kind object;
  #L236a4a.  if v5 != 0 then goto L236a50;
  #L236a4e.  return v2;
  #L236a50.  v2:= v2 + 1;
  #L236a54.  goto L236a3e;
  #L236a56.  if v2 >= v1 then goto L236a76;
  #L236a5a.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L236a60.  v3:= temp @kind object;
  #L236a62.  call temp:= `equals`(v5, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L236a68.  v3:= temp;
  #L236a6a.  if v3 == 0 then goto L236a70;
  #L236a6e.  return v2;
  #L236a70.  v2:= v2 + 1;
  #L236a74.  goto L236a56;
  #L236a76.  return v0;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.j.i8` v1 @kind this) @signature `Le/e/a/b/f/j/i8;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L236b64.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/j/i8;.zza:()Le/e/a/b/f/j/m8;` @kind virtual;
  #L236b6a.  v0:= temp @kind object;
  #L236b6c.  return v0 @kind object;
}
procedure `int` `lastIndexOf`(`e.e.a.b.f.j.i8` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/j/i8;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L236a88.  v0:= -1I;
  #L236a8a.  if v4 != 0 then goto L236a90;
  #L236a8e.  return v0;
  #L236a90.  if v4 != 0 then goto L236ab8;
  #L236a94.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L236a9a.  v4:= temp;
  #L236a9c.  v4:= v4 + -1;
  #L236aa0.  if v4 < 0 then goto L236ae4;
  #L236aa4.  call temp:= `get`(v3, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L236aaa.  v1:= temp @kind object;
  #L236aac.  if v1 != 0 then goto L236ab2;
  #L236ab0.  return v4;
  #L236ab2.  v4:= v4 + -1;
  #L236ab6.  goto L236aa0;
  #L236ab8.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L236abe.  v1:= temp;
  #L236ac0.  v1:= v1 + -1;
  #L236ac4.  if v1 < 0 then goto L236ae4;
  #L236ac8.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L236ace.  v2:= temp @kind object;
  #L236ad0.  call temp:= `equals`(v4, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L236ad6.  v2:= temp;
  #L236ad8.  if v2 == 0 then goto L236ade;
  #L236adc.  return v1;
  #L236ade.  v1:= v1 + -1;
  #L236ae2.  goto L236ac4;
  #L236ae4.  return v0;
}
procedure `java.util.ListIterator` `listIterator`(`e.e.a.b.f.j.i8` v1 @kind this) @signature `Le/e/a/b/f/j/i8;.listIterator:()Ljava/util/ListIterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L236b9c.  v0:= 0I;
  #L236b9e.  call temp:= `listIterator`(v1, v0) @signature `Le/e/a/b/f/j/i8;.listIterator:(I)Ljava/util/ListIterator;` @kind virtual;
  #L236ba4.  v0:= temp @kind object;
  #L236ba6.  v0:= (`e.e.a.b.f.j.p8`) v0 @kind object;
  #L236baa.  return v0 @kind object;
}
procedure `java.util.ListIterator` `listIterator`(`e.e.a.b.f.j.i8` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/j/i8;.listIterator:(I)Ljava/util/ListIterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L236bbc.  call temp:= `size`(v1) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L236bc2.  v0:= temp;
  #L236bc4.  call temp:= `b`(v2, v0) @signature `Le/e/a/b/f/j/d5;.b:(II)I` @kind static;
  #L236bca.  call temp:= `isEmpty`(v1) @signature `Ljava/util/AbstractCollection;.isEmpty:()Z` @kind virtual;
  #L236bd0.  v0:= temp;
  #L236bd2.  if v0 == 0 then goto L236bdc;
  #L236bd6.  v2:= `@@e.e.a.b.f.j.i8.c` @type ^`e.e.a.b.f.j.p8` @kind object;
  #L236bda.  return v2 @kind object;
  #L236bdc.  v0:= new `e.e.a.b.f.j.l8`;
  #L236be0.  call `<init>`(v0, v1, v2) @signature `Le/e/a/b/f/j/l8;.<init>:(Le/e/a/b/f/j/i8;I)V` @kind direct;
  #L236be6.  return v0 @kind object;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.j.i8` v0 @kind this, `int` v1 ) @signature `Le/e/a/b/f/j/i8;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L236b2c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L236b30.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L236b36.  throw v1;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.j.i8` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/j/i8;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L236b48.  v1:= new `java.lang.UnsupportedOperationException`;
  #L236b4c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L236b52.  throw v1;
}
procedure `java.util.List` `subList`(`e.e.a.b.f.j.i8` v0 @kind this, `int` v1 , `int` v2 ) @signature `Le/e/a/b/f/j/i8;.subList:(II)Ljava/util/List;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L236b80.  call temp:= `a`(v0, v1, v2) @signature `Le/e/a/b/f/j/i8;.a:(II)Le/e/a/b/f/j/i8;` @kind virtual;
  #L236b86.  v1:= temp @kind object;
  #L236b88.  return v1 @kind object;
}
procedure `e.e.a.b.f.j.m8` `zza`(`e.e.a.b.f.j.i8` v1 @kind this) @signature `Le/e/a/b/f/j/i8;.zza:()Le/e/a/b/f/j/m8;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2369c4.  call temp:= `listIterator`(v1) @signature `Le/e/a/b/f/j/i8;.listIterator:()Ljava/util/ListIterator;` @kind virtual;
  #L2369ca.  v0:= temp @kind object;
  #L2369cc.  v0:= (`e.e.a.b.f.j.p8`) v0 @kind object;
  #L2369d0.  return v0 @kind object;
}
