record `e.e.a.b.f.o.x` @kind class @AccessFlag ABSTRACT extends `e.e.a.b.f.o.i0` @kind class {
}
procedure `void` `<init>`(`e.e.a.b.f.o.x` v0 @kind this) @signature `Le/e/a/b/f/o/x;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c0cd0.  call `<init>`(v0) @signature `Le/e/a/b/f/o/i0;.<init>:()V` @kind direct;
  #L2c0cd6.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.o.x` v1 @kind this) @signature `Le/e/a/b/f/o/x;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0ce8.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/o/x;.zza:()Ljava/util/Map;` @kind virtual;
  #L2c0cee.  v0:= temp @kind object;
  #L2c0cf0.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L2c0cf6.  return @kind void;
}
procedure `boolean` `contains`(`java.lang.Object` v0 @kind object) @signature `Le/e/a/b/f/o/x;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`e.e.a.b.f.o.x` v1 @kind this) @signature `Le/e/a/b/f/o/x;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0b3c.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/o/x;.zza:()Ljava/util/Map;` @kind virtual;
  #L2c0b42.  v0:= temp @kind object;
  #L2c0b44.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2c0b4a.  v0:= temp;
  #L2c0b4c.  return v0;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.o.x` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/o/x;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0b60.  if v2 == 0 then goto L2c0b6e;
  #L2c0b64.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/o/j0;.a:(Ljava/util/Set;Ljava/util/Collection;)Z` @kind static;
  #L2c0b6a.  v2:= temp;
  #L2c0b6c.  return v2;
  #L2c0b6e.  v0:= 0I;
  #L2c0b70.  throw v0;
  #L2c0b72.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c0b78.  v2:= temp @kind object;
  #L2c0b7a.  call temp:= `a`(v1, v2) @signature `Le/e/a/b/f/o/j0;.a:(Ljava/util/Set;Ljava/util/Iterator;)Z` @kind static;
  #L2c0b80.  v2:= temp;
  #L2c0b82.  return v2;
  catch `java.lang.UnsupportedOperationException` @[L2c0b64..L2c0b72] goto L2c0b72;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.o.x` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Le/e/a/b/f/o/x;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2c0ba4.  if v4 == 0 then goto L2c0bb2;
  #L2c0ba8.  call temp:= `retainAll`(v3, v4) @signature `Le/e/a/b/f/o/i0;.retainAll:(Ljava/util/Collection;)Z` @kind super;
  #L2c0bae.  v4:= temp;
  #L2c0bb0.  return v4;
  #L2c0bb2.  v0:= 0I;
  #L2c0bb4.  throw v0;
  #L2c0bb6.  
  #L2c0bb8.  call temp:= `size`(v4) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L2c0bbe.  v0:= temp;
  #L2c0bc0.  v1:= new `java.util.HashSet`;
  #L2c0bc4.  v2:= 3I;
  #L2c0bc6.  if v0 >= v2 then goto L2c0c06;
  #L2c0bca.  if v0 < 0 then goto L2c0bd4;
  #L2c0bce.  v0:= v0 + 1;
  #L2c0bd2.  goto L2c0c26;
  #L2c0bd4.  v4:= new `java.lang.IllegalArgumentException`;
  #L2c0bd8.  v1:= new `java.lang.StringBuilder`;
  #L2c0bdc.  v2:= 52I;
  #L2c0be0.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2c0be6.  v2:= "expectedSize cannot be negative but was: " @kind object;
  #L2c0bea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c0bf0.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c0bf6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c0bfc.  v0:= temp @kind object;
  #L2c0bfe.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c0c04.  throw v4;
  #L2c0c06.  v2:= 2.0F;
  #L2c0c0a.  if v0 >= v2 then goto L2c0c20;
  #L2c0c0e.  v0:= (`float`) v0 @kind i2f;
  #L2c0c10.  v2:= 0.75F;
  #L2c0c14.  v0:= v0 / v2 @kind float;
  #L2c0c16.  v2:= 1.0F;
  #L2c0c1a.  v0:= v0 + v2 @kind float;
  #L2c0c1c.  v0:= (`int`) v0 @kind f2i;
  #L2c0c1e.  goto L2c0c26;
  #L2c0c20.  v0:= 2147483647I;
  #L2c0c26.  call `<init>`(v1, v0) @signature `Ljava/util/HashSet;.<init>:(I)V` @kind direct;
  #L2c0c2c.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c0c32.  v4:= temp @kind object;
  #L2c0c34.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c0c3a.  v0:= temp;
  #L2c0c3c.  if v0 == 0 then goto L2c0c68;
  #L2c0c40.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c0c46.  v0:= temp @kind object;
  #L2c0c48.  call temp:= `contains`(v3, v0) @signature `Le/e/a/b/f/o/x;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L2c0c4e.  v2:= temp;
  #L2c0c50.  if v2 == 0 then goto L2c0c34;
  #L2c0c54.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L2c0c58.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2c0c5e.  v0:= temp @kind object;
  #L2c0c60.  call temp:= `add`(v1, v0) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2c0c66.  goto L2c0c34;
  #L2c0c68.  call temp:= `zza`(v3) @signature `Le/e/a/b/f/o/x;.zza:()Ljava/util/Map;` @kind virtual;
  #L2c0c6e.  v4:= temp @kind object;
  #L2c0c70.  v4:= (`e.e.a.b.f.o.ka`) v4 @kind object;
  #L2c0c74.  v4:= v4.`e.e.a.b.f.o.ka.e` @type ^`e.e.a.b.f.o.ta` @kind object;
  #L2c0c78.  call temp:= `c`(v4) @signature `Le/e/a/b/f/o/va;.c:()Ljava/util/Set;` @kind virtual;
  #L2c0c7e.  v4:= temp @kind object;
  #L2c0c80.  call temp:= `retainAll`(v4, v1) @signature `Ljava/util/Set;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2c0c86.  v4:= temp;
  #L2c0c88.  return v4;
  catch `java.lang.UnsupportedOperationException` @[L2c0ba8..L2c0bb6] goto L2c0bb6;
}
procedure `int` `size`(`e.e.a.b.f.o.x` v1 @kind this) @signature `Le/e/a/b/f/o/x;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0cac.  call temp:= `zza`(v1) @signature `Le/e/a/b/f/o/x;.zza:()Ljava/util/Map;` @kind virtual;
  #L2c0cb2.  v0:= temp @kind object;
  #L2c0cb4.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L2c0cba.  v0:= temp;
  #L2c0cbc.  return v0;
}
procedure `java.util.Map` `zza`() @signature `Le/e/a/b/f/o/x;.zza:()Ljava/util/Map;` @AccessFlag ABSTRACT {

  # return;
}
