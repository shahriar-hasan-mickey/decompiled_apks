record `e.e.a.b.f.q.l1` @kind class @AccessFlag FINAL extends `e.e.a.b.f.q.tu` @kind class, `java.util.RandomAccess` @kind interface {
  `java.lang.Object`[] `e.e.a.b.f.q.l1.c` @AccessFlag PRIVATE;
  `int` `e.e.a.b.f.q.l1.d` @AccessFlag PRIVATE;
}
global `e.e.a.b.f.q.l1` `@@e.e.a.b.f.q.l1.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/q/l1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2db084.  v0:= new `e.e.a.b.f.q.l1`;
  #L2db088.  v1:= 0I;
  #L2db08a.  v2:= new `java.lang.Object`[v1];
  #L2db08e.  call `<init>`(v0, v2, v1) @signature `Le/e/a/b/f/q/l1;.<init>:([Ljava/lang/Object;I)V` @kind direct;
  #L2db094.  `@@e.e.a.b.f.q.l1.e` @type ^`e.e.a.b.f.q.l1` := v0 @kind object;
  #L2db098.  v0:= `@@e.e.a.b.f.q.l1.e` @type ^`e.e.a.b.f.q.l1` @kind object;
  #L2db09c.  call `zzb`(v0) @signature `Le/e/a/b/f/q/tu;.zzb:()V` @kind virtual;
  #L2db0a2.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.q.l1` v0 @kind this, `java.lang.Object`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/q/l1;.<init>:([Ljava/lang/Object;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2db0b4.  call `<init>`(v0) @signature `Le/e/a/b/f/q/tu;.<init>:()V` @kind direct;
  #L2db0ba.  v0.`e.e.a.b.f.q.l1.c` @type ^`java.lang.Object`[] := v1 @kind object;
  #L2db0be.  v0.`e.e.a.b.f.q.l1.d` @type ^`int` := v2;
  #L2db0c2.  return @kind void;
}
procedure `e.e.a.b.f.q.l1` `c`() @signature `Le/e/a/b/f/q/l1;.c:()Le/e/a/b/f/q/l1;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2daf54.  v0:= `@@e.e.a.b.f.q.l1.e` @type ^`e.e.a.b.f.q.l1` @kind object;
  #L2daf58.  return v0 @kind object;
}
procedure `void` `c`(`e.e.a.b.f.q.l1` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/q/l1;.c:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2db174.  if v2 < 0 then goto L2db182;
  #L2db178.  v0:= v1.`e.e.a.b.f.q.l1.d` @type ^`int`;
  #L2db17c.  if v2 >= v0 then goto L2db182;
  #L2db180.  return @kind void;
  #L2db182.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L2db186.  call temp:= `h`(v1, v2) @signature `Le/e/a/b/f/q/l1;.h:(I)Ljava/lang/String;` @kind direct;
  #L2db18c.  v2:= temp @kind object;
  #L2db18e.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2db194.  throw v0;
}
procedure `java.lang.String` `h`(`e.e.a.b.f.q.l1` v3 @kind this, `int` v4 ) @signature `Le/e/a/b/f/q/l1;.h:(I)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2db038.  v0:= v3.`e.e.a.b.f.q.l1.d` @type ^`int`;
  #L2db03c.  v1:= new `java.lang.StringBuilder`;
  #L2db040.  v2:= 35I;
  #L2db044.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2db04a.  v2:= "Index:" @kind object;
  #L2db04e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2db054.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2db05a.  v4:= ", Size:" @kind object;
  #L2db05e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2db064.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2db06a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2db070.  v4:= temp @kind object;
  #L2db072.  return v4 @kind object;
}
procedure `void` `add`(`e.e.a.b.f.q.l1` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Le/e/a/b/f/q/l1;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2db0d4.  call `d`(v4) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L2db0da.  if v5 < 0 then goto L2db150;
  #L2db0de.  v0:= v4.`e.e.a.b.f.q.l1.d` @type ^`int`;
  #L2db0e2.  if v5 > v0 then goto L2db150;
  #L2db0e6.  v1:= v4.`e.e.a.b.f.q.l1.c` @type ^`java.lang.Object`[] @kind object;
  #L2db0ea.  v2:= length @variable v1;
  #L2db0ec.  if v0 >= v2 then goto L2db0fe;
  #L2db0f0.  v2:= v5 + 1;
  #L2db0f4.  v0:= v0 - v5 @kind int;
  #L2db0f6.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2db0fc.  goto L2db12e;
  #L2db0fe.  v0:= v0 * 3;
  #L2db102.  v0:= v0 / 2;
  #L2db106.  v0:= v0 + 1;
  #L2db10a.  v0:= new `java.lang.Object`[v0];
  #L2db10e.  v2:= 0I;
  #L2db110.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2db116.  v1:= v4.`e.e.a.b.f.q.l1.c` @type ^`java.lang.Object`[] @kind object;
  #L2db11a.  v2:= v5 + 1;
  #L2db11e.  v3:= v4.`e.e.a.b.f.q.l1.d` @type ^`int`;
  #L2db122.  v3:= v3 - v5 @kind int;
  #L2db124.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2db12a.  v4.`e.e.a.b.f.q.l1.c` @type ^`java.lang.Object`[] := v0 @kind object;
  #L2db12e.  v0:= v4.`e.e.a.b.f.q.l1.c` @type ^`java.lang.Object`[] @kind object;
  #L2db132.  v0[v5]:= v6 @kind object;
  #L2db136.  v5:= v4.`e.e.a.b.f.q.l1.d` @type ^`int`;
  #L2db13a.  v5:= v5 + 1;
  #L2db13e.  v4.`e.e.a.b.f.q.l1.d` @type ^`int` := v5;
  #L2db142.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L2db146.  v5:= v5 + 1;
  #L2db14a.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L2db14e.  return @kind void;
  #L2db150.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L2db154.  call temp:= `h`(v4, v5) @signature `Le/e/a/b/f/q/l1;.h:(I)Ljava/lang/String;` @kind direct;
  #L2db15a.  v5:= temp @kind object;
  #L2db15c.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2db162.  throw v6;
}
procedure `boolean` `add`(`e.e.a.b.f.q.l1` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/q/l1;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2daeb8.  call `d`(v4) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L2daebe.  v0:= v4.`e.e.a.b.f.q.l1.d` @type ^`int`;
  #L2daec2.  v1:= v4.`e.e.a.b.f.q.l1.c` @type ^`java.lang.Object`[] @kind object;
  #L2daec6.  v2:= length @variable v1;
  #L2daec8.  v3:= 1I;
  #L2daeca.  if v0 != v2 then goto L2daee4;
  #L2daece.  v0:= v0 * 3;
  #L2daed2.  v0:= v0 / 2;
  #L2daed6.  v0:= v0 + v3 @kind int;
  #L2daed8.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L2daede.  v0:= temp @kind object;
  #L2daee0.  v4.`e.e.a.b.f.q.l1.c` @type ^`java.lang.Object`[] := v0 @kind object;
  #L2daee4.  v0:= v4.`e.e.a.b.f.q.l1.c` @type ^`java.lang.Object`[] @kind object;
  #L2daee8.  v1:= v4.`e.e.a.b.f.q.l1.d` @type ^`int`;
  #L2daeec.  v2:= v1 + 1;
  #L2daef0.  v4.`e.e.a.b.f.q.l1.d` @type ^`int` := v2;
  #L2daef4.  v0[v1]:= v5 @kind object;
  #L2daef8.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L2daefc.  v5:= v5 + v3 @kind int;
  #L2daefe.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L2daf02.  return v3;
}
procedure `e.e.a.b.f.q.a0` `e`(`e.e.a.b.f.q.l1` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/q/l1;.e:(I)Le/e/a/b/f/q/a0;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2daf14.  v0:= v2.`e.e.a.b.f.q.l1.d` @type ^`int`;
  #L2daf18.  if v3 < v0 then goto L2daf38;
  #L2daf1c.  v0:= v2.`e.e.a.b.f.q.l1.c` @type ^`java.lang.Object`[] @kind object;
  #L2daf20.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L2daf26.  v3:= temp @kind object;
  #L2daf28.  v0:= new `e.e.a.b.f.q.l1`;
  #L2daf2c.  v1:= v2.`e.e.a.b.f.q.l1.d` @type ^`int`;
  #L2daf30.  call `<init>`(v0, v3, v1) @signature `Le/e/a/b/f/q/l1;.<init>:([Ljava/lang/Object;I)V` @kind direct;
  #L2daf36.  return v0 @kind object;
  #L2daf38.  v3:= new `java.lang.IllegalArgumentException`;
  #L2daf3c.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L2daf42.  throw v3;
}
procedure `java.lang.Object` `get`(`e.e.a.b.f.q.l1` v1 @kind this, `int` v2 ) @signature `Le/e/a/b/f/q/l1;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2daf84.  call `c`(v1, v2) @signature `Le/e/a/b/f/q/l1;.c:(I)V` @kind direct;
  #L2daf8a.  v0:= v1.`e.e.a.b.f.q.l1.c` @type ^`java.lang.Object`[] @kind object;
  #L2daf8e.  v2:= v0[v2] @kind object;
  #L2daf92.  return v2 @kind object;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.q.l1` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/q/l1;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2dafa4.  call `d`(v4) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L2dafaa.  call `c`(v4, v5) @signature `Le/e/a/b/f/q/l1;.c:(I)V` @kind direct;
  #L2dafb0.  v0:= v4.`e.e.a.b.f.q.l1.c` @type ^`java.lang.Object`[] @kind object;
  #L2dafb4.  v1:= v0[v5] @kind object;
  #L2dafb8.  v2:= v4.`e.e.a.b.f.q.l1.d` @type ^`int`;
  #L2dafbc.  v3:= v2 + -1;
  #L2dafc0.  if v5 >= v3 then goto L2dafd4;
  #L2dafc4.  v3:= v5 + 1;
  #L2dafc8.  v2:= v2 - v5 @kind int;
  #L2dafca.  v2:= v2 + -1;
  #L2dafce.  call `arraycopy`(v0, v3, v0, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2dafd4.  v5:= v4.`e.e.a.b.f.q.l1.d` @type ^`int`;
  #L2dafd8.  v5:= v5 + -1;
  #L2dafdc.  v4.`e.e.a.b.f.q.l1.d` @type ^`int` := v5;
  #L2dafe0.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L2dafe4.  v5:= v5 + 1;
  #L2dafe8.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L2dafec.  return v1 @kind object;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.q.l1` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/q/l1;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2db000.  call `d`(v2) @signature `Le/e/a/b/f/q/tu;.d:()V` @kind virtual;
  #L2db006.  call `c`(v2, v3) @signature `Le/e/a/b/f/q/l1;.c:(I)V` @kind direct;
  #L2db00c.  v0:= v2.`e.e.a.b.f.q.l1.c` @type ^`java.lang.Object`[] @kind object;
  #L2db010.  v1:= v0[v3] @kind object;
  #L2db014.  v0[v3]:= v4 @kind object;
  #L2db018.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L2db01c.  v3:= v3 + 1;
  #L2db020.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L2db024.  return v1 @kind object;
}
procedure `int` `size`(`e.e.a.b.f.q.l1` v1 @kind this) @signature `Le/e/a/b/f/q/l1;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2daf6c.  v0:= v1.`e.e.a.b.f.q.l1.d` @type ^`int`;
  #L2daf70.  return v0;
}
