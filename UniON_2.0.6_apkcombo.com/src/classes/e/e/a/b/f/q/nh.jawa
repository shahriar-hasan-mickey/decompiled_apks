record `e.e.a.b.f.q.nh` @kind class @AccessFlag ABSTRACT extends `java.util.Iterator` @kind interface {
  `e.e.a.b.f.q.oh` `e.e.a.b.f.q.nh.b` @AccessFlag ;
  `e.e.a.b.f.q.oh` `e.e.a.b.f.q.nh.c` @AccessFlag ;
  `int` `e.e.a.b.f.q.nh.d` @AccessFlag ;
  `e.e.a.b.f.q.ph` `e.e.a.b.f.q.nh.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.q.nh` v1 @kind this, `e.e.a.b.f.q.ph` v2 @kind object) @signature `Le/e/a/b/f/q/nh;.<init>:(Le/e/a/b/f/q/ph;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2f3ea4.  v1.`e.e.a.b.f.q.nh.e` @type ^`e.e.a.b.f.q.ph` := v2 @kind object;
  #L2f3ea8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f3eae.  v2:= v1.`e.e.a.b.f.q.nh.e` @type ^`e.e.a.b.f.q.ph` @kind object;
  #L2f3eb2.  v0:= v2.`e.e.a.b.f.q.ph.f` @type ^`e.e.a.b.f.q.oh` @kind object;
  #L2f3eb6.  v0:= v0.`e.e.a.b.f.q.oh.e` @type ^`e.e.a.b.f.q.oh` @kind object;
  #L2f3eba.  v1.`e.e.a.b.f.q.nh.b` @type ^`e.e.a.b.f.q.oh` := v0 @kind object;
  #L2f3ebe.  v0:= 0I;
  #L2f3ec0.  v1.`e.e.a.b.f.q.nh.c` @type ^`e.e.a.b.f.q.oh` := v0 @kind object;
  #L2f3ec4.  v2:= v2.`e.e.a.b.f.q.ph.e` @type ^`int`;
  #L2f3ec8.  v1.`e.e.a.b.f.q.nh.d` @type ^`int` := v2;
  #L2f3ecc.  return @kind void;
}
procedure `boolean` `hasNext`(`e.e.a.b.f.q.nh` v2 @kind this) @signature `Le/e/a/b/f/q/nh;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2f3e28.  v0:= v2.`e.e.a.b.f.q.nh.b` @type ^`e.e.a.b.f.q.oh` @kind object;
  #L2f3e2c.  v1:= v2.`e.e.a.b.f.q.nh.e` @type ^`e.e.a.b.f.q.ph` @kind object;
  #L2f3e30.  v1:= v1.`e.e.a.b.f.q.ph.f` @type ^`e.e.a.b.f.q.oh` @kind object;
  #L2f3e34.  if v0 == v1 then goto L2f3e3c;
  #L2f3e38.  v0:= 1I;
  #L2f3e3a.  return v0;
  #L2f3e3c.  v0:= 0I;
  #L2f3e3e.  return v0;
}
procedure `void` `remove`(`e.e.a.b.f.q.nh` v3 @kind this) @signature `Le/e/a/b/f/q/nh;.remove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2f3ee0.  v0:= v3.`e.e.a.b.f.q.nh.c` @type ^`e.e.a.b.f.q.oh` @kind object;
  #L2f3ee4.  if v0 == 0 then goto L2f3f08;
  #L2f3ee8.  v1:= v3.`e.e.a.b.f.q.nh.e` @type ^`e.e.a.b.f.q.ph` @kind object;
  #L2f3eec.  v2:= 1I;
  #L2f3eee.  call `a`(v1, v0, v2) @signature `Le/e/a/b/f/q/ph;.a:(Le/e/a/b/f/q/oh;Z)V` @kind virtual;
  #L2f3ef4.  v0:= 0I;
  #L2f3ef6.  v3.`e.e.a.b.f.q.nh.c` @type ^`e.e.a.b.f.q.oh` := v0 @kind object;
  #L2f3efa.  v0:= v3.`e.e.a.b.f.q.nh.e` @type ^`e.e.a.b.f.q.ph` @kind object;
  #L2f3efe.  v0:= v0.`e.e.a.b.f.q.ph.e` @type ^`int`;
  #L2f3f02.  v3.`e.e.a.b.f.q.nh.d` @type ^`int` := v0;
  #L2f3f06.  return @kind void;
  #L2f3f08.  v0:= new `java.lang.IllegalStateException`;
  #L2f3f0c.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L2f3f12.  throw v0;
}
procedure `e.e.a.b.f.q.oh` `zza`(`e.e.a.b.f.q.nh` v3 @kind this) @signature `Le/e/a/b/f/q/nh;.zza:()Le/e/a/b/f/q/oh;` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2f3e50.  v0:= v3.`e.e.a.b.f.q.nh.b` @type ^`e.e.a.b.f.q.oh` @kind object;
  #L2f3e54.  v1:= v3.`e.e.a.b.f.q.nh.e` @type ^`e.e.a.b.f.q.ph` @kind object;
  #L2f3e58.  v2:= v1.`e.e.a.b.f.q.ph.f` @type ^`e.e.a.b.f.q.oh` @kind object;
  #L2f3e5c.  if v0 == v2 then goto L2f3e86;
  #L2f3e60.  v1:= v1.`e.e.a.b.f.q.ph.e` @type ^`int`;
  #L2f3e64.  v2:= v3.`e.e.a.b.f.q.nh.d` @type ^`int`;
  #L2f3e68.  if v1 != v2 then goto L2f3e7a;
  #L2f3e6c.  v1:= v0.`e.e.a.b.f.q.oh.e` @type ^`e.e.a.b.f.q.oh` @kind object;
  #L2f3e70.  v3.`e.e.a.b.f.q.nh.b` @type ^`e.e.a.b.f.q.oh` := v1 @kind object;
  #L2f3e74.  v3.`e.e.a.b.f.q.nh.c` @type ^`e.e.a.b.f.q.oh` := v0 @kind object;
  #L2f3e78.  return v0 @kind object;
  #L2f3e7a.  v0:= new `java.util.ConcurrentModificationException`;
  #L2f3e7e.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L2f3e84.  throw v0;
  #L2f3e86.  v0:= new `java.util.NoSuchElementException`;
  #L2f3e8a.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2f3e90.  throw v0;
}
