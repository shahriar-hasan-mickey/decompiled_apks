record `e.e.a.b.f.o.c` @kind class @AccessFlag FINAL extends `java.util.AbstractSet` @kind class {
  `e.e.a.b.f.o.h` `e.e.a.b.f.o.c.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.o.c` v0 @kind this, `e.e.a.b.f.o.h` v1 @kind object) @signature `Le/e/a/b/f/o/c;.<init>:(Le/e/a/b/f/o/h;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2bedac.  v0.`e.e.a.b.f.o.c.b` @type ^`e.e.a.b.f.o.h` := v1 @kind object;
  #L2bedb0.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L2bedb6.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.o.c` v1 @kind this) @signature `Le/e/a/b/f/o/c;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bedc8.  v0:= v1.`e.e.a.b.f.o.c.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bedcc.  call `clear`(v0) @signature `Le/e/a/b/f/o/h;.clear:()V` @kind virtual;
  #L2bedd2.  return @kind void;
}
procedure `boolean` `contains`(`e.e.a.b.f.o.c` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/o/c;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2bec0c.  v0:= v3.`e.e.a.b.f.o.c.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bec10.  call temp:= `b`(v0) @signature `Le/e/a/b/f/o/h;.b:()Ljava/util/Map;` @kind virtual;
  #L2bec16.  v0:= temp @kind object;
  #L2bec18.  if v0 == 0 then goto L2bec2e;
  #L2bec1c.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2bec22.  v0:= temp @kind object;
  #L2bec24.  call temp:= `contains`(v0, v4) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2bec2a.  v4:= temp;
  #L2bec2c.  return v4;
  #L2bec2e.  v0:= instanceof @variable v4 @type ^`java.util.Map$Entry` @kind boolean;
  #L2bec32.  v1:= 0I;
  #L2bec34.  if v0 == 0 then goto L2bec7a;
  #L2bec38.  v4:= (`java.util.Map$Entry`) v4 @kind object;
  #L2bec3c.  v0:= v3.`e.e.a.b.f.o.c.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bec40.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2bec46.  v2:= temp @kind object;
  #L2bec48.  call temp:= `b`(v0, v2) @signature `Le/e/a/b/f/o/h;.b:(Le/e/a/b/f/o/h;Ljava/lang/Object;)I` @kind static;
  #L2bec4e.  v0:= temp;
  #L2bec50.  v2:= -1I;
  #L2bec52.  if v0 == v2 then goto L2bec7a;
  #L2bec56.  v2:= v3.`e.e.a.b.f.o.c.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bec5a.  v2:= v2.`e.e.a.b.f.o.h.e` @type ^`java.lang.Object`[] @kind object;
  #L2bec5e.  v0:= v2[v0] @kind object;
  #L2bec62.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2bec68.  v4:= temp @kind object;
  #L2bec6a.  call temp:= `a`(v0, v4) @signature `Le/e/a/b/f/o/a0;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2bec70.  v4:= temp;
  #L2bec72.  if v4 == 0 then goto L2bec7a;
  #L2bec76.  v4:= 1I;
  #L2bec78.  return v4;
  #L2bec7a.  return v1;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.o.c` v2 @kind this) @signature `Le/e/a/b/f/o/c;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2bed6c.  v0:= v2.`e.e.a.b.f.o.c.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bed70.  call temp:= `b`(v0) @signature `Le/e/a/b/f/o/h;.b:()Ljava/util/Map;` @kind virtual;
  #L2bed76.  v1:= temp @kind object;
  #L2bed78.  if v1 == 0 then goto L2bed8e;
  #L2bed7c.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2bed82.  v0:= temp @kind object;
  #L2bed84.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2bed8a.  v0:= temp @kind object;
  #L2bed8c.  goto L2bed9a;
  #L2bed8e.  v1:= new `e.e.a.b.f.o.za`;
  #L2bed92.  call `<init>`(v1, v0) @signature `Le/e/a/b/f/o/za;.<init>:(Le/e/a/b/f/o/h;)V` @kind direct;
  #L2bed98.  v0:= v1 @kind object;
  #L2bed9a.  return v0 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.o.c` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Le/e/a/b/f/o/c;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2bec8c.  v0:= v9.`e.e.a.b.f.o.c.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bec90.  call temp:= `b`(v0) @signature `Le/e/a/b/f/o/h;.b:()Ljava/util/Map;` @kind virtual;
  #L2bec96.  v0:= temp @kind object;
  #L2bec98.  if v0 == 0 then goto L2becae;
  #L2bec9c.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2beca2.  v0:= temp @kind object;
  #L2beca4.  call temp:= `remove`(v0, v10) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2becaa.  v10:= temp;
  #L2becac.  return v10;
  #L2becae.  v0:= instanceof @variable v10 @type ^`java.util.Map$Entry` @kind boolean;
  #L2becb2.  v1:= 0I;
  #L2becb4.  if v0 == 0 then goto L2bed3a;
  #L2becb8.  v10:= (`java.util.Map$Entry`) v10 @kind object;
  #L2becbc.  v0:= v9.`e.e.a.b.f.o.c.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2becc0.  call temp:= `a`(v0) @signature `Le/e/a/b/f/o/h;.a:()Z` @kind virtual;
  #L2becc6.  v0:= temp;
  #L2becc8.  if v0 == 0 then goto L2becce;
  #L2beccc.  return v1;
  #L2becce.  v0:= v9.`e.e.a.b.f.o.c.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2becd2.  call temp:= `b`(v0) @signature `Le/e/a/b/f/o/h;.b:(Le/e/a/b/f/o/h;)I` @kind static;
  #L2becd8.  v0:= temp;
  #L2becda.  call temp:= `getKey`(v10) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2bece0.  v2:= temp @kind object;
  #L2bece2.  call temp:= `getValue`(v10) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2bece8.  v3:= temp @kind object;
  #L2becea.  v10:= v9.`e.e.a.b.f.o.c.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2becee.  call temp:= `c`(v10) @signature `Le/e/a/b/f/o/h;.c:(Le/e/a/b/f/o/h;)Ljava/lang/Object;` @kind static;
  #L2becf4.  v5:= temp @kind object;
  #L2becf6.  v10:= v9.`e.e.a.b.f.o.c.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2becfa.  v6:= v10.`e.e.a.b.f.o.h.c` @type ^`int`[] @kind object;
  #L2becfe.  v7:= v10.`e.e.a.b.f.o.h.d` @type ^`java.lang.Object`[] @kind object;
  #L2bed02.  v8:= v10.`e.e.a.b.f.o.h.e` @type ^`java.lang.Object`[] @kind object;
  #L2bed06.  v4:= v0;
  #L2bed08.  call temp:= `a`(v2, v3, v4, v5, v6, v7, v8) @signature `Le/e/a/b/f/o/i;.a:(Ljava/lang/Object;Ljava/lang/Object;ILjava/lang/Object;[I[Ljava/lang/Object;[Ljava/lang/Object;)I` @kind static;
  #L2bed0e.  v10:= temp;
  #L2bed10.  v2:= -1I;
  #L2bed12.  if v10 != v2 then goto L2bed18;
  #L2bed16.  return v1;
  #L2bed18.  v1:= v9.`e.e.a.b.f.o.c.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bed1c.  call `a`(v1, v10, v0) @signature `Le/e/a/b/f/o/h;.a:(II)V` @kind virtual;
  #L2bed22.  v10:= v9.`e.e.a.b.f.o.c.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bed26.  call temp:= `d`(v10) @signature `Le/e/a/b/f/o/h;.d:(Le/e/a/b/f/o/h;)I` @kind static;
  #L2bed2c.  v10:= v9.`e.e.a.b.f.o.c.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bed30.  call `c`(v10) @signature `Le/e/a/b/f/o/h;.c:()V` @kind virtual;
  #L2bed36.  v10:= 1I;
  #L2bed38.  return v10;
  #L2bed3a.  return v1;
}
procedure `int` `size`(`e.e.a.b.f.o.c` v1 @kind this) @signature `Le/e/a/b/f/o/c;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bed4c.  v0:= v1.`e.e.a.b.f.o.c.b` @type ^`e.e.a.b.f.o.h` @kind object;
  #L2bed50.  call temp:= `size`(v0) @signature `Le/e/a/b/f/o/h;.size:()I` @kind virtual;
  #L2bed56.  v0:= temp;
  #L2bed58.  return v0;
}
