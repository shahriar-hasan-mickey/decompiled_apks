record `e.e.a.b.f.k.q0` @kind class @AccessFlag FINAL extends `java.util.AbstractSet` @kind class {
  `e.e.a.b.f.k.t0` `e.e.a.b.f.k.q0.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.k.q0` v0 @kind this, `e.e.a.b.f.k.t0` v1 @kind object) @signature `Le/e/a/b/f/k/q0;.<init>:(Le/e/a/b/f/k/t0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2450dc.  v0.`e.e.a.b.f.k.q0.b` @type ^`e.e.a.b.f.k.t0` := v1 @kind object;
  #L2450e0.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L2450e6.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.k.q0` v1 @kind this) @signature `Le/e/a/b/f/k/q0;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2450f8.  v0:= v1.`e.e.a.b.f.k.q0.b` @type ^`e.e.a.b.f.k.t0` @kind object;
  #L2450fc.  call `clear`(v0) @signature `Le/e/a/b/f/k/t0;.clear:()V` @kind virtual;
  #L245102.  return @kind void;
}
procedure `boolean` `contains`(`e.e.a.b.f.k.q0` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/k/q0;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L245008.  v0:= v1.`e.e.a.b.f.k.q0.b` @type ^`e.e.a.b.f.k.t0` @kind object;
  #L24500c.  call temp:= `containsKey`(v0, v2) @signature `Le/e/a/b/f/k/t0;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L245012.  v2:= temp;
  #L245014.  return v2;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.k.q0` v2 @kind this) @signature `Le/e/a/b/f/k/q0;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L24509c.  v0:= v2.`e.e.a.b.f.k.q0.b` @type ^`e.e.a.b.f.k.t0` @kind object;
  #L2450a0.  call temp:= `b`(v0) @signature `Le/e/a/b/f/k/t0;.b:()Ljava/util/Map;` @kind virtual;
  #L2450a6.  v1:= temp @kind object;
  #L2450a8.  if v1 == 0 then goto L2450be;
  #L2450ac.  call temp:= `keySet`(v1) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L2450b2.  v0:= temp @kind object;
  #L2450b4.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2450ba.  v0:= temp @kind object;
  #L2450bc.  goto L2450ca;
  #L2450be.  v1:= new `e.e.a.b.f.k.l0`;
  #L2450c2.  call `<init>`(v1, v0) @signature `Le/e/a/b/f/k/l0;.<init>:(Le/e/a/b/f/k/t0;)V` @kind direct;
  #L2450c8.  v0:= v1 @kind object;
  #L2450ca.  return v0 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.k.q0` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/k/q0;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L245028.  v0:= v1.`e.e.a.b.f.k.q0.b` @type ^`e.e.a.b.f.k.t0` @kind object;
  #L24502c.  call temp:= `b`(v0) @signature `Le/e/a/b/f/k/t0;.b:()Ljava/util/Map;` @kind virtual;
  #L245032.  v0:= temp @kind object;
  #L245034.  if v0 == 0 then goto L24504a;
  #L245038.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L24503e.  v0:= temp @kind object;
  #L245040.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L245046.  v2:= temp;
  #L245048.  goto L245064;
  #L24504a.  v0:= v1.`e.e.a.b.f.k.q0.b` @type ^`e.e.a.b.f.k.t0` @kind object;
  #L24504e.  call temp:= `a`(v0, v2) @signature `Le/e/a/b/f/k/t0;.a:(Le/e/a/b/f/k/t0;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L245054.  v2:= temp @kind object;
  #L245056.  call temp:= `e`() @signature `Le/e/a/b/f/k/t0;.e:()Ljava/lang/Object;` @kind static;
  #L24505c.  v0:= temp @kind object;
  #L24505e.  if v2 != v0 then goto L245066;
  #L245062.  v2:= 0I;
  #L245064.  return v2;
  #L245066.  v2:= 1I;
  #L245068.  return v2;
}
procedure `int` `size`(`e.e.a.b.f.k.q0` v1 @kind this) @signature `Le/e/a/b/f/k/q0;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L24507c.  v0:= v1.`e.e.a.b.f.k.q0.b` @type ^`e.e.a.b.f.k.t0` @kind object;
  #L245080.  call temp:= `size`(v0) @signature `Le/e/a/b/f/k/t0;.size:()I` @kind virtual;
  #L245086.  v0:= temp;
  #L245088.  return v0;
}
