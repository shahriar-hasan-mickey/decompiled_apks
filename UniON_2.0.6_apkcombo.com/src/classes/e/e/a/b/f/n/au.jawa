record `e.e.a.b.f.n.au` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.AbstractCollection` @kind class, `java.io.Serializable` @kind interface {
}
global `java.lang.Object`[] `@@e.e.a.b.f.n.au.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/n/au;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ab760.  v0:= 0I;
  #L2ab762.  v0:= new `java.lang.Object`[v0];
  #L2ab766.  `@@e.e.a.b.f.n.au.b` @type ^`java.lang.Object`[] := v0 @kind object;
  #L2ab76a.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.n.au` v0 @kind this) @signature `Le/e/a/b/f/n/au;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2ab77c.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L2ab782.  return @kind void;
}
procedure `int` `a`(`e.e.a.b.f.n.au` v0 @kind this, `java.lang.Object`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/n/au;.a:([Ljava/lang/Object;I)I` @AccessFlag  {
    temp;

  #L2ab694.  v1:= 0I;
  #L2ab696.  throw v1;
}
procedure `boolean` `add`(`e.e.a.b.f.n.au` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/n/au;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2ab5d0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2ab5d4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2ab5da.  throw v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.n.au` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/n/au;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2ab5ec.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2ab5f0.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2ab5f6.  throw v1;
}
procedure `int` `c`(`e.e.a.b.f.n.au` v1 @kind this) @signature `Le/e/a/b/f/n/au;.c:()I` @AccessFlag  {
    temp;
    v0;

  #L2ab678.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2ab67c.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2ab682.  throw v0;
}
procedure `void` `clear`(`e.e.a.b.f.n.au` v1 @kind this) @signature `Le/e/a/b/f/n/au;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ab794.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2ab798.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2ab79e.  throw v0;
}
procedure `int` `d`(`e.e.a.b.f.n.au` v1 @kind this) @signature `Le/e/a/b/f/n/au;.d:()I` @AccessFlag  {
    temp;
    v0;

  #L2ab65c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2ab660.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2ab666.  throw v0;
}
procedure `boolean` `remove`(`e.e.a.b.f.n.au` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/n/au;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2ab608.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2ab60c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2ab612.  throw v1;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.n.au` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/n/au;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2ab624.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2ab628.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2ab62e.  throw v1;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.n.au` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/n/au;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2ab640.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2ab644.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L2ab64a.  throw v1;
}
procedure `java.lang.Object`[] `toArray`(`e.e.a.b.f.n.au` v1 @kind this) @signature `Le/e/a/b/f/n/au;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ab6a8.  v0:= `@@e.e.a.b.f.n.au.b` @type ^`java.lang.Object`[] @kind object;
  #L2ab6ac.  call temp:= `toArray`(v1, v0) @signature `Le/e/a/b/f/n/au;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L2ab6b2.  v0:= temp @kind object;
  #L2ab6b4.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`e.e.a.b.f.n.au` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Le/e/a/b/f/n/au;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ab6c8.  v0:= 0I;
  #L2ab6ca.  if v4 == 0 then goto L2ab73a;
  #L2ab6ce.  call temp:= `size`(v3) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L2ab6d4.  v1:= temp;
  #L2ab6d6.  v2:= length @variable v4;
  #L2ab6d8.  if v2 >= v1 then goto L2ab728;
  #L2ab6dc.  call temp:= `zzb`(v3) @signature `Le/e/a/b/f/n/au;.zzb:()[Ljava/lang/Object;` @kind virtual;
  #L2ab6e2.  v0:= temp @kind object;
  #L2ab6e4.  if v0 != 0 then goto L2ab706;
  #L2ab6e8.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2ab6ee.  v4:= temp @kind object;
  #L2ab6f0.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L2ab6f6.  v4:= temp @kind object;
  #L2ab6f8.  call temp:= `newInstance`(v4, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L2ab6fe.  v4:= temp @kind object;
  #L2ab700.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L2ab704.  goto L2ab730;
  #L2ab706.  call temp:= `d`(v3) @signature `Le/e/a/b/f/n/au;.d:()I` @kind virtual;
  #L2ab70c.  v1:= temp;
  #L2ab70e.  call temp:= `c`(v3) @signature `Le/e/a/b/f/n/au;.c:()I` @kind virtual;
  #L2ab714.  v2:= temp;
  #L2ab716.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2ab71c.  v4:= temp @kind object;
  #L2ab71e.  call temp:= `copyOfRange`(v0, v1, v2, v4) @signature `Ljava/util/Arrays;.copyOfRange:([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;` @kind static;
  #L2ab724.  v4:= temp @kind object;
  #L2ab726.  return v4 @kind object;
  #L2ab728.  if v2 <= v1 then goto L2ab730;
  #L2ab72c.  v4[v1]:= v0 @kind object;
  #L2ab730.  v0:= 0I;
  #L2ab732.  call temp:= `a`(v3, v4, v0) @signature `Le/e/a/b/f/n/au;.a:([Ljava/lang/Object;I)I` @kind virtual;
  #L2ab738.  return v4 @kind object;
  #L2ab73a.  throw v0;
}
procedure `java.lang.Object`[] `zzb`(`e.e.a.b.f.n.au` v1 @kind this) @signature `Le/e/a/b/f/n/au;.zzb:()[Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L2ab74c.  v0:= 0I;
  #L2ab74e.  return v0 @kind object;
}
