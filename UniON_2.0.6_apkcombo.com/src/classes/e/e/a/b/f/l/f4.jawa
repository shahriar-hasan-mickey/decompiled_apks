record `e.e.a.b.f.l.f4` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v5 , `int` v6 , `java.lang.String` v7 @kind object) @signature `Le/e/a/b/f/l/f4;.a:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25f438.  if v5 < 0 then goto L25f444;
  #L25f43c.  if v5 < v6 then goto L25f442;
  #L25f440.  goto L25f444;
  #L25f442.  return v5;
  #L25f444.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L25f448.  v0:= "index" @kind object;
  #L25f44c.  v1:= 1I;
  #L25f44e.  v2:= 0I;
  #L25f450.  v3:= 2I;
  #L25f452.  if v5 < 0 then goto L25f4bc;
  #L25f456.  if v6 >= 0 then goto L25f48c;
  #L25f45a.  v5:= new `java.lang.IllegalArgumentException`;
  #L25f45e.  v7:= new `java.lang.StringBuilder`;
  #L25f462.  v0:= 26I;
  #L25f466.  call `<init>`(v7, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L25f46c.  v0:= "negative size: " @kind object;
  #L25f470.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25f476.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L25f47c.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L25f482.  v6:= temp @kind object;
  #L25f484.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25f48a.  throw v5;
  #L25f48c.  v4:= 3I;
  #L25f48e.  v4:= new `java.lang.Object`[v4];
  #L25f492.  v4[v2]:= v0 @kind object;
  #L25f496.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L25f49c.  v5:= temp @kind object;
  #L25f49e.  v4[v1]:= v5 @kind object;
  #L25f4a2.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L25f4a8.  v5:= temp @kind object;
  #L25f4aa.  v4[v3]:= v5 @kind object;
  #L25f4ae.  v5:= "%s (%s) must be less than size (%s)" @kind object;
  #L25f4b2.  call temp:= `a`(v5, v4) @signature `Le/e/a/b/f/l/g5;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L25f4b8.  v5:= temp @kind object;
  #L25f4ba.  goto L25f4dc;
  #L25f4bc.  v6:= new `java.lang.Object`[v3];
  #L25f4c0.  v6[v2]:= v0 @kind object;
  #L25f4c4.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L25f4ca.  v5:= temp @kind object;
  #L25f4cc.  v6[v1]:= v5 @kind object;
  #L25f4d0.  v5:= "%s (%s) must not be negative" @kind object;
  #L25f4d4.  call temp:= `a`(v5, v6) @signature `Le/e/a/b/f/l/g5;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L25f4da.  v5:= temp @kind object;
  #L25f4dc.  call `<init>`(v7, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25f4e2.  throw v7;
}
procedure `void` `a`(`int` v2 , `int` v3 , `int` v4 ) @signature `Le/e/a/b/f/l/f4;.a:(III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L260dac.  if v2 < 0 then goto L260dbc;
  #L260db0.  if v3 < v2 then goto L260dbc;
  #L260db4.  if v3 <= v4 then goto L260dba;
  #L260db8.  goto L260dbc;
  #L260dba.  return @kind void;
  #L260dbc.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L260dc0.  if v2 < 0 then goto L260e10;
  #L260dc4.  if v2 > v4 then goto L260e10;
  #L260dc8.  if v3 < 0 then goto L260e02;
  #L260dcc.  if v3 <= v4 then goto L260dd2;
  #L260dd0.  goto L260e02;
  #L260dd2.  v4:= 2I;
  #L260dd4.  v4:= new `java.lang.Object`[v4];
  #L260dd8.  v1:= 0I;
  #L260dda.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L260de0.  v3:= temp @kind object;
  #L260de2.  v4[v1]:= v3 @kind object;
  #L260de6.  v3:= 1I;
  #L260de8.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L260dee.  v2:= temp @kind object;
  #L260df0.  v4[v3]:= v2 @kind object;
  #L260df4.  v2:= "end index (%s) must not be less than start index (%s)" @kind object;
  #L260df8.  call temp:= `a`(v2, v4) @signature `Le/e/a/b/f/l/g5;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L260dfe.  v2:= temp @kind object;
  #L260e00.  goto L260e1c;
  #L260e02.  v2:= "end index" @kind object;
  #L260e06.  call temp:= `c`(v3, v4, v2) @signature `Le/e/a/b/f/l/f4;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L260e0c.  v2:= temp @kind object;
  #L260e0e.  goto L260e1c;
  #L260e10.  v3:= "start index" @kind object;
  #L260e14.  call temp:= `c`(v2, v4, v3) @signature `Le/e/a/b/f/l/f4;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L260e1a.  v2:= temp @kind object;
  #L260e1c.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L260e22.  throw v0;
}
procedure `int` `b`(`int` v1 , `int` v2 , `java.lang.String` v3 @kind object) @signature `Le/e/a/b/f/l/f4;.b:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L25f4f4.  if v1 < 0 then goto L25f4fe;
  #L25f4f8.  if v1 > v2 then goto L25f4fe;
  #L25f4fc.  return v1;
  #L25f4fe.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L25f502.  v0:= "index" @kind object;
  #L25f506.  call temp:= `c`(v1, v2, v0) @signature `Le/e/a/b/f/l/f4;.c:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L25f50c.  v1:= temp @kind object;
  #L25f50e.  call `<init>`(v3, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25f514.  throw v3;
}
procedure `java.lang.String` `c`(`int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Le/e/a/b/f/l/f4;.c:(IILjava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25f528.  v0:= 1I;
  #L25f52a.  v1:= 0I;
  #L25f52c.  v2:= 2I;
  #L25f52e.  if v4 >= 0 then goto L25f554;
  #L25f532.  v5:= new `java.lang.Object`[v2];
  #L25f536.  v5[v1]:= v6 @kind object;
  #L25f53a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L25f540.  v4:= temp @kind object;
  #L25f542.  v5[v0]:= v4 @kind object;
  #L25f546.  v4:= "%s (%s) must not be negative" @kind object;
  #L25f54a.  call temp:= `a`(v4, v5) @signature `Le/e/a/b/f/l/g5;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L25f550.  v4:= temp @kind object;
  #L25f552.  return v4 @kind object;
  #L25f554.  if v5 < 0 then goto L25f588;
  #L25f558.  v3:= 3I;
  #L25f55a.  v3:= new `java.lang.Object`[v3];
  #L25f55e.  v3[v1]:= v6 @kind object;
  #L25f562.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L25f568.  v4:= temp @kind object;
  #L25f56a.  v3[v0]:= v4 @kind object;
  #L25f56e.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L25f574.  v4:= temp @kind object;
  #L25f576.  v3[v2]:= v4 @kind object;
  #L25f57a.  v4:= "%s (%s) must not be greater than size (%s)" @kind object;
  #L25f57e.  call temp:= `a`(v4, v3) @signature `Le/e/a/b/f/l/g5;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L25f584.  v4:= temp @kind object;
  #L25f586.  return v4 @kind object;
  #L25f588.  v4:= new `java.lang.IllegalArgumentException`;
  #L25f58c.  v6:= new `java.lang.StringBuilder`;
  #L25f590.  v0:= 26I;
  #L25f594.  call `<init>`(v6, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L25f59a.  v0:= "negative size: " @kind object;
  #L25f59e.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25f5a4.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L25f5aa.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L25f5b0.  v5:= temp @kind object;
  #L25f5b2.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25f5b8.  throw v4;
}
