record `e.e.a.b.f.o.k` @kind class @AccessFlag  extends `e.e.a.b.f.o.l` @kind class {
  `java.lang.Object`[] `e.e.a.b.f.o.k.a` @AccessFlag ;
  `int` `e.e.a.b.f.o.k.b` @AccessFlag ;
  `boolean` `e.e.a.b.f.o.k.c` @AccessFlag ;
}
procedure `void` `<init>`(`e.e.a.b.f.o.k` v0 @kind this, `int` v1 ) @signature `Le/e/a/b/f/o/k;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2bfe0c.  call `<init>`(v0) @signature `Le/e/a/b/f/o/l;.<init>:()V` @kind direct;
  #L2bfe12.  v1:= 4I;
  #L2bfe14.  v1:= new `java.lang.Object`[v1];
  #L2bfe18.  v0.`e.e.a.b.f.o.k.a` @type ^`java.lang.Object`[] := v1 @kind object;
  #L2bfe1c.  v1:= 0I;
  #L2bfe1e.  v0.`e.e.a.b.f.o.k.b` @type ^`int` := v1;
  #L2bfe22.  return @kind void;
}
procedure `void` `a`(`e.e.a.b.f.o.k` v4 @kind this, `int` v5 ) @signature `Le/e/a/b/f/o/k;.a:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bfe34.  v0:= v4.`e.e.a.b.f.o.k.a` @type ^`java.lang.Object`[] @kind object;
  #L2bfe38.  v1:= length @variable v0;
  #L2bfe3a.  v2:= 0I;
  #L2bfe3c.  if v1 >= v5 then goto L2bfe7a;
  #L2bfe40.  v3:= v1 ^> 1;
  #L2bfe44.  v1:= v1 + v3 @kind int;
  #L2bfe46.  v1:= v1 + 1;
  #L2bfe4a.  if v1 >= v5 then goto L2bfe5e;
  #L2bfe4e.  v5:= v5 + -1;
  #L2bfe52.  call temp:= `highestOneBit`(v5) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L2bfe58.  v5:= temp;
  #L2bfe5a.  v1:= v5 + v5 @kind int;
  #L2bfe5e.  if v1 >= 0 then goto L2bfe68;
  #L2bfe62.  v1:= 2147483647I;
  #L2bfe68.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L2bfe6e.  v5:= temp @kind object;
  #L2bfe70.  v4.`e.e.a.b.f.o.k.a` @type ^`java.lang.Object`[] := v5 @kind object;
  #L2bfe74.  v4.`e.e.a.b.f.o.k.c` @type ^`boolean` := v2 @kind boolean;
  #L2bfe78.  return @kind void;
  #L2bfe7a.  v5:= v4.`e.e.a.b.f.o.k.c` @type ^`boolean` @kind boolean;
  #L2bfe7e.  if v5 == 0 then goto L2bfe94;
  #L2bfe82.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L2bfe88.  v5:= temp @kind object;
  #L2bfe8a.  v5:= (`java.lang.Object`[]) v5 @kind object;
  #L2bfe8e.  v4.`e.e.a.b.f.o.k.a` @type ^`java.lang.Object`[] := v5 @kind object;
  #L2bfe92.  goto L2bfe74;
  #L2bfe94.  return @kind void;
}
procedure `e.e.a.b.f.o.k` `a`(`e.e.a.b.f.o.k` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/o/k;.a:(Ljava/lang/Object;)Le/e/a/b/f/o/k;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2bfdd0.  if v4 == 0 then goto L2bfdf8;
  #L2bfdd4.  v0:= v3.`e.e.a.b.f.o.k.b` @type ^`int`;
  #L2bfdd8.  v0:= v0 + 1;
  #L2bfddc.  call `a`(v3, v0) @signature `Le/e/a/b/f/o/k;.a:(I)V` @kind direct;
  #L2bfde2.  v0:= v3.`e.e.a.b.f.o.k.a` @type ^`java.lang.Object`[] @kind object;
  #L2bfde6.  v1:= v3.`e.e.a.b.f.o.k.b` @type ^`int`;
  #L2bfdea.  v2:= v1 + 1;
  #L2bfdee.  v3.`e.e.a.b.f.o.k.b` @type ^`int` := v2;
  #L2bfdf2.  v0[v1]:= v4 @kind object;
  #L2bfdf6.  return v3 @kind object;
  #L2bfdf8.  v4:= 0I;
  #L2bfdfa.  throw v4;
}
