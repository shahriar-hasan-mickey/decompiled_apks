record `e.e.a.b.f.m.z` @kind class @AccessFlag FINAL extends `java.util.AbstractSet` @kind class {
  `e.e.a.b.f.m.d0` `e.e.a.b.f.m.z.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.m.z` v0 @kind this, `e.e.a.b.f.m.d0` v1 @kind object) @signature `Le/e/a/b/f/m/z;.<init>:(Le/e/a/b/f/m/d0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L265a74.  v0.`e.e.a.b.f.m.z.b` @type ^`e.e.a.b.f.m.d0` := v1 @kind object;
  #L265a78.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L265a7e.  return @kind void;
}
procedure `void` `clear`(`e.e.a.b.f.m.z` v1 @kind this) @signature `Le/e/a/b/f/m/z;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L265a90.  v0:= v1.`e.e.a.b.f.m.z.b` @type ^`e.e.a.b.f.m.d0` @kind object;
  #L265a94.  call `clear`(v0) @signature `Le/e/a/b/f/m/d0;.clear:()V` @kind virtual;
  #L265a9a.  return @kind void;
}
procedure `boolean` `contains`(`e.e.a.b.f.m.z` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/m/z;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2659a0.  v0:= v1.`e.e.a.b.f.m.z.b` @type ^`e.e.a.b.f.m.d0` @kind object;
  #L2659a4.  call temp:= `containsKey`(v0, v2) @signature `Le/e/a/b/f/m/d0;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L2659aa.  v2:= temp;
  #L2659ac.  return v2;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.m.z` v2 @kind this) @signature `Le/e/a/b/f/m/z;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L265a34.  v0:= v2.`e.e.a.b.f.m.z.b` @type ^`e.e.a.b.f.m.d0` @kind object;
  #L265a38.  call temp:= `b`(v0) @signature `Le/e/a/b/f/m/d0;.b:()Ljava/util/Map;` @kind virtual;
  #L265a3e.  v1:= temp @kind object;
  #L265a40.  if v1 == 0 then goto L265a56;
  #L265a44.  call temp:= `keySet`(v1) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L265a4a.  v0:= temp @kind object;
  #L265a4c.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L265a52.  v0:= temp @kind object;
  #L265a54.  goto L265a62;
  #L265a56.  v1:= new `e.e.a.b.f.m.u`;
  #L265a5a.  call `<init>`(v1, v0) @signature `Le/e/a/b/f/m/u;.<init>:(Le/e/a/b/f/m/d0;)V` @kind direct;
  #L265a60.  v0:= v1 @kind object;
  #L265a62.  return v0 @kind object;
}
procedure `boolean` `remove`(`e.e.a.b.f.m.z` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/m/z;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2659c0.  v0:= v1.`e.e.a.b.f.m.z.b` @type ^`e.e.a.b.f.m.d0` @kind object;
  #L2659c4.  call temp:= `b`(v0) @signature `Le/e/a/b/f/m/d0;.b:()Ljava/util/Map;` @kind virtual;
  #L2659ca.  v0:= temp @kind object;
  #L2659cc.  if v0 == 0 then goto L2659e2;
  #L2659d0.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L2659d6.  v0:= temp @kind object;
  #L2659d8.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2659de.  v2:= temp;
  #L2659e0.  goto L2659fc;
  #L2659e2.  v0:= v1.`e.e.a.b.f.m.z.b` @type ^`e.e.a.b.f.m.d0` @kind object;
  #L2659e6.  call temp:= `a`(v0, v2) @signature `Le/e/a/b/f/m/d0;.a:(Le/e/a/b/f/m/d0;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2659ec.  v2:= temp @kind object;
  #L2659ee.  call temp:= `e`() @signature `Le/e/a/b/f/m/d0;.e:()Ljava/lang/Object;` @kind static;
  #L2659f4.  v0:= temp @kind object;
  #L2659f6.  if v2 != v0 then goto L2659fe;
  #L2659fa.  v2:= 0I;
  #L2659fc.  return v2;
  #L2659fe.  v2:= 1I;
  #L265a00.  return v2;
}
procedure `int` `size`(`e.e.a.b.f.m.z` v1 @kind this) @signature `Le/e/a/b/f/m/z;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L265a14.  v0:= v1.`e.e.a.b.f.m.z.b` @type ^`e.e.a.b.f.m.d0` @kind object;
  #L265a18.  call temp:= `size`(v0) @signature `Le/e/a/b/f/m/d0;.size:()I` @kind virtual;
  #L265a1e.  v0:= temp;
  #L265a20.  return v0;
}
