record `e.e.a.b.f.i.i` @kind class @AccessFlag PUBLIC_ABSTRACT extends `e.e.a.b.f.i.f` @kind class, `java.util.List` @kind interface, `java.util.RandomAccess` @kind interface {
}
global `e.e.a.b.f.i.q` `@@e.e.a.b.f.i.i.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/i/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L21c4e0.  v0:= new `e.e.a.b.f.i.g`;
  #L21c4e4.  v1:= `@@e.e.a.b.f.i.m.f` @type ^`e.e.a.b.f.i.i` @kind object;
  #L21c4e8.  v2:= 0I;
  #L21c4ea.  call `<init>`(v0, v1, v2) @signature `Le/e/a/b/f/i/g;.<init>:(Le/e/a/b/f/i/i;I)V` @kind direct;
  #L21c4f0.  `@@e.e.a.b.f.i.i.c` @type ^`e.e.a.b.f.i.q` := v0 @kind object;
  #L21c4f4.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.i.i` v0 @kind this) @signature `Le/e/a/b/f/i/i;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L21c508.  call `<init>`(v0) @signature `Le/e/a/b/f/i/f;.<init>:()V` @kind direct;
  #L21c50e.  return @kind void;
}
procedure `e.e.a.b.f.i.i` `a`(`java.lang.Object` v3 @kind object) @signature `Le/e/a/b/f/i/i;.a:(Ljava/lang/Object;)Le/e/a/b/f/i/i;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L21c240.  v0:= 1I;
  #L21c242.  v1:= new `java.lang.Object`[v0];
  #L21c246.  v2:= 0I;
  #L21c248.  v1[v2]:= v3 @kind object;
  #L21c24c.  call temp:= `a`(v1, v0) @signature `Le/e/a/b/f/i/l;.a:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L21c252.  call temp:= `b`(v1, v0) @signature `Le/e/a/b/f/i/i;.b:([Ljava/lang/Object;I)Le/e/a/b/f/i/i;` @kind static;
  #L21c258.  v3:= temp @kind object;
  #L21c25a.  return v3 @kind object;
}
procedure `e.e.a.b.f.i.i` `a`(`java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object, `java.lang.Object` v11 @kind object) @signature `Le/e/a/b/f/i/i;.a:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Le/e/a/b/f/i/i;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L21c26c.  v0:= 9I;
  #L21c270.  v1:= new `java.lang.Object`[v0];
  #L21c274.  v2:= 0I;
  #L21c276.  v1[v2]:= v3 @kind object;
  #L21c27a.  v3:= 1I;
  #L21c27c.  v1[v3]:= v4 @kind object;
  #L21c280.  v3:= 2I;
  #L21c282.  v1[v3]:= v5 @kind object;
  #L21c286.  v3:= 3I;
  #L21c288.  v1[v3]:= v6 @kind object;
  #L21c28c.  v3:= 4I;
  #L21c28e.  v1[v3]:= v7 @kind object;
  #L21c292.  v3:= 5I;
  #L21c294.  v1[v3]:= v8 @kind object;
  #L21c298.  v3:= 6I;
  #L21c29a.  v1[v3]:= v9 @kind object;
  #L21c29e.  v3:= 7I;
  #L21c2a0.  v1[v3]:= v10 @kind object;
  #L21c2a4.  v3:= 8I;
  #L21c2a8.  v1[v3]:= v11 @kind object;
  #L21c2ac.  call temp:= `a`(v1, v0) @signature `Le/e/a/b/f/i/l;.a:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L21c2b2.  call temp:= `b`(v1, v0) @signature `Le/e/a/b/f/i/i;.b:([Ljava/lang/Object;I)Le/e/a/b/f/i/i;` @kind static;
  #L21c2b8.  v3:= temp @kind object;
  #L21c2ba.  return v3 @kind object;
}
procedure `e.e.a.b.f.i.i` `b`(`java.lang.Object`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/i/i;.b:([Ljava/lang/Object;I)Le/e/a/b/f/i/i;` @AccessFlag STATIC {
    temp;
    v0;

  #L21c2cc.  if v2 != 0 then goto L21c2d6;
  #L21c2d0.  v1:= `@@e.e.a.b.f.i.m.f` @type ^`e.e.a.b.f.i.i` @kind object;
  #L21c2d4.  return v1 @kind object;
  #L21c2d6.  v0:= new `e.e.a.b.f.i.m`;
  #L21c2da.  call `<init>`(v0, v1, v2) @signature `Le/e/a/b/f/i/m;.<init>:([Ljava/lang/Object;I)V` @kind direct;
  #L21c2e0.  return v0 @kind object;
}
procedure `int` `a`(`e.e.a.b.f.i.i` v2 @kind this, `java.lang.Object`[] v3 @kind object, `int` v4 ) @signature `Le/e/a/b/f/i/i;.a:([Ljava/lang/Object;I)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L21c404.  call temp:= `size`(v2) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L21c40a.  v4:= temp;
  #L21c40c.  v0:= 0I;
  #L21c40e.  if v0 >= v4 then goto L21c424;
  #L21c412.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L21c418.  v1:= temp @kind object;
  #L21c41a.  v3[v0]:= v1 @kind object;
  #L21c41e.  v0:= v0 + 1;
  #L21c422.  goto L21c40e;
  #L21c424.  return v4;
}
procedure `e.e.a.b.f.i.i` `a`(`e.e.a.b.f.i.i` v1 @kind this, `int` v2 , `int` v3 ) @signature `Le/e/a/b/f/i/i;.a:(II)Le/e/a/b/f/i/i;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21c1fc.  call temp:= `size`(v1) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L21c202.  v0:= temp;
  #L21c204.  call `a`(v2, v3, v0) @signature `Le/e/a/b/f/i/y0;.a:(III)V` @kind static;
  #L21c20a.  v3:= v3 - v2 @kind int;
  #L21c20c.  call temp:= `size`(v1) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L21c212.  v0:= temp;
  #L21c214.  if v3 != v0 then goto L21c21a;
  #L21c218.  return v1 @kind object;
  #L21c21a.  if v3 != 0 then goto L21c224;
  #L21c21e.  v2:= `@@e.e.a.b.f.i.m.f` @type ^`e.e.a.b.f.i.i` @kind object;
  #L21c222.  return v2 @kind object;
  #L21c224.  v0:= new `e.e.a.b.f.i.h`;
  #L21c228.  call `<init>`(v0, v1, v2, v3) @signature `Le/e/a/b/f/i/h;.<init>:(Le/e/a/b/f/i/i;II)V` @kind direct;
  #L21c22e.  return v0 @kind object;
}
procedure `void` `add`(`e.e.a.b.f.i.i` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/i/i;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L21c520.  v1:= new `java.lang.UnsupportedOperationException`;
  #L21c524.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L21c52a.  throw v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.i.i` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Le/e/a/b/f/i/i;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L21c0f0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L21c0f4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L21c0fa.  throw v1;
}
procedure `boolean` `contains`(`e.e.a.b.f.i.i` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/i/i;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L21c10c.  call temp:= `indexOf`(v0, v1) @signature `Le/e/a/b/f/i/i;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L21c112.  v1:= temp;
  #L21c114.  if v1 < 0 then goto L21c11c;
  #L21c118.  v1:= 1I;
  #L21c11a.  return v1;
  #L21c11c.  v1:= 0I;
  #L21c11e.  return v1;
}
procedure `boolean` `equals`(`e.e.a.b.f.i.i` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Le/e/a/b/f/i/i;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L21c130.  v0:= 1I;
  #L21c132.  v1:= 0I;
  #L21c134.  if v7 != v6 then goto L21c13c;
  #L21c138.  v1:= 1I;
  #L21c13a.  goto L21c1e8;
  #L21c13c.  v2:= instanceof @variable v7 @type ^`java.util.List` @kind boolean;
  #L21c140.  if v2 != 0 then goto L21c146;
  #L21c144.  goto L21c1e8;
  #L21c146.  v7:= (`java.util.List`) v7 @kind object;
  #L21c14a.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L21c150.  v2:= temp;
  #L21c152.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L21c158.  v3:= temp;
  #L21c15a.  if v2 == v3 then goto L21c160;
  #L21c15e.  goto L21c1e8;
  #L21c160.  v3:= instanceof @variable v7 @type ^`java.util.RandomAccess` @kind boolean;
  #L21c164.  if v3 == 0 then goto L21c192;
  #L21c168.  v3:= 0I;
  #L21c16a.  if v3 >= v2 then goto L21c138;
  #L21c16e.  call temp:= `get`(v6, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L21c174.  v4:= temp @kind object;
  #L21c176.  call temp:= `get`(v7, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L21c17c.  v5:= temp @kind object;
  #L21c17e.  call temp:= `a`(v4, v5) @signature `Le/e/a/b/f/i/x0;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L21c184.  v4:= temp;
  #L21c186.  if v4 != 0 then goto L21c18c;
  #L21c18a.  goto L21c1e8;
  #L21c18c.  v3:= v3 + 1;
  #L21c190.  goto L21c16a;
  #L21c192.  call temp:= `iterator`(v6) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L21c198.  v2:= temp @kind object;
  #L21c19a.  call temp:= `iterator`(v7) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L21c1a0.  v7:= temp @kind object;
  #L21c1a2.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L21c1a8.  v3:= temp;
  #L21c1aa.  if v3 == 0 then goto L21c1da;
  #L21c1ae.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L21c1b4.  v3:= temp;
  #L21c1b6.  if v3 != 0 then goto L21c1bc;
  #L21c1ba.  goto L21c1e8;
  #L21c1bc.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L21c1c2.  v3:= temp @kind object;
  #L21c1c4.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L21c1ca.  v4:= temp @kind object;
  #L21c1cc.  call temp:= `a`(v3, v4) @signature `Le/e/a/b/f/i/x0;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L21c1d2.  v3:= temp;
  #L21c1d4.  if v3 != 0 then goto L21c1a2;
  #L21c1d8.  goto L21c1e8;
  #L21c1da.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L21c1e0.  v7:= temp;
  #L21c1e2.  if v7 != 0 then goto L21c1e8;
  #L21c1e6.  goto L21c138;
  #L21c1e8.  return v1;
}
procedure `e.e.a.b.f.i.q` `h`(`e.e.a.b.f.i.i` v2 @kind this, `int` v3 ) @signature `Le/e/a/b/f/i/i;.h:(I)Le/e/a/b/f/i/q;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L21c2f4.  call temp:= `size`(v2) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L21c2fa.  v0:= temp;
  #L21c2fc.  v1:= "index" @kind object;
  #L21c300.  call temp:= `b`(v3, v0, v1) @signature `Le/e/a/b/f/i/y0;.b:(IILjava/lang/String;)I` @kind static;
  #L21c306.  call temp:= `isEmpty`(v2) @signature `Ljava/util/AbstractCollection;.isEmpty:()Z` @kind virtual;
  #L21c30c.  v0:= temp;
  #L21c30e.  if v0 == 0 then goto L21c318;
  #L21c312.  v3:= `@@e.e.a.b.f.i.i.c` @type ^`e.e.a.b.f.i.q` @kind object;
  #L21c316.  return v3 @kind object;
  #L21c318.  v0:= new `e.e.a.b.f.i.g`;
  #L21c31c.  call `<init>`(v0, v2, v3) @signature `Le/e/a/b/f/i/g;.<init>:(Le/e/a/b/f/i/i;I)V` @kind direct;
  #L21c322.  return v0 @kind object;
}
procedure `int` `hashCode`(`e.e.a.b.f.i.i` v4 @kind this) @signature `Le/e/a/b/f/i/i;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L21c334.  call temp:= `size`(v4) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L21c33a.  v0:= temp;
  #L21c33c.  v1:= 1I;
  #L21c33e.  v2:= 0I;
  #L21c340.  if v2 >= v0 then goto L21c360;
  #L21c344.  v1:= v1 * 31;
  #L21c348.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L21c34e.  v3:= temp @kind object;
  #L21c350.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L21c356.  v3:= temp;
  #L21c358.  v1:= v1 + v3 @kind int;
  #L21c35a.  v2:= v2 + 1;
  #L21c35e.  goto L21c340;
  #L21c360.  return v1;
}
procedure `int` `indexOf`(`e.e.a.b.f.i.i` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Le/e/a/b/f/i/i;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L21c374.  v0:= -1I;
  #L21c376.  if v5 != 0 then goto L21c37c;
  #L21c37a.  return v0;
  #L21c37c.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L21c382.  v1:= temp;
  #L21c384.  v2:= 0I;
  #L21c386.  if v2 >= v1 then goto L21c3a8;
  #L21c38a.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L21c390.  v3:= temp @kind object;
  #L21c392.  call temp:= `equals`(v5, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L21c398.  v3:= temp;
  #L21c39a.  if v3 == 0 then goto L21c3a2;
  #L21c39e.  v0:= v2;
  #L21c3a0.  goto L21c3a8;
  #L21c3a2.  v2:= v2 + 1;
  #L21c3a6.  goto L21c386;
  #L21c3a8.  return v0;
}
procedure `java.util.Iterator` `iterator`(`e.e.a.b.f.i.i` v1 @kind this) @signature `Le/e/a/b/f/i/i;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L21c470.  v0:= 0I;
  #L21c472.  call temp:= `h`(v1, v0) @signature `Le/e/a/b/f/i/i;.h:(I)Le/e/a/b/f/i/q;` @kind virtual;
  #L21c478.  v0:= temp @kind object;
  #L21c47a.  return v0 @kind object;
}
procedure `int` `lastIndexOf`(`e.e.a.b.f.i.i` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/i/i;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L21c3bc.  v0:= -1I;
  #L21c3be.  if v4 != 0 then goto L21c3c4;
  #L21c3c2.  return v0;
  #L21c3c4.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L21c3ca.  v1:= temp;
  #L21c3cc.  v1:= v1 + v0 @kind int;
  #L21c3ce.  if v1 < 0 then goto L21c3f0;
  #L21c3d2.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L21c3d8.  v2:= temp @kind object;
  #L21c3da.  call temp:= `equals`(v4, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L21c3e0.  v2:= temp;
  #L21c3e2.  if v2 == 0 then goto L21c3ea;
  #L21c3e6.  v0:= v1;
  #L21c3e8.  goto L21c3f0;
  #L21c3ea.  v1:= v1 + -1;
  #L21c3ee.  goto L21c3ce;
  #L21c3f0.  return v0;
}
procedure `java.util.ListIterator` `listIterator`(`e.e.a.b.f.i.i` v1 @kind this) @signature `Le/e/a/b/f/i/i;.listIterator:()Ljava/util/ListIterator;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L21c4a8.  v0:= 0I;
  #L21c4aa.  call temp:= `h`(v1, v0) @signature `Le/e/a/b/f/i/i;.h:(I)Le/e/a/b/f/i/q;` @kind virtual;
  #L21c4b0.  v0:= temp @kind object;
  #L21c4b2.  return v0 @kind object;
}
procedure `java.util.ListIterator` `listIterator`(`e.e.a.b.f.i.i` v0 @kind this, `int` v1 ) @signature `Le/e/a/b/f/i/i;.listIterator:(I)Ljava/util/ListIterator;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;

  #L21c4c4.  call temp:= `h`(v0, v1) @signature `Le/e/a/b/f/i/i;.h:(I)Le/e/a/b/f/i/q;` @kind virtual;
  #L21c4ca.  v1:= temp @kind object;
  #L21c4cc.  return v1 @kind object;
}
procedure `java.lang.Object` `remove`(`e.e.a.b.f.i.i` v0 @kind this, `int` v1 ) @signature `Le/e/a/b/f/i/i;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L21c438.  v1:= new `java.lang.UnsupportedOperationException`;
  #L21c43c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L21c442.  throw v1;
}
procedure `java.lang.Object` `set`(`e.e.a.b.f.i.i` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/i/i;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L21c454.  v1:= new `java.lang.UnsupportedOperationException`;
  #L21c458.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L21c45e.  throw v1;
}
procedure `java.util.List` `subList`(`e.e.a.b.f.i.i` v0 @kind this, `int` v1 , `int` v2 ) @signature `Le/e/a/b/f/i/i;.subList:(II)Ljava/util/List;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L21c48c.  call temp:= `a`(v0, v1, v2) @signature `Le/e/a/b/f/i/i;.a:(II)Le/e/a/b/f/i/i;` @kind virtual;
  #L21c492.  v1:= temp @kind object;
  #L21c494.  return v1 @kind object;
}
