record `e.e.a.b.f.q.r2` @kind class @AccessFlag FINAL extends `e.e.a.b.f.q.o2` @kind class {
}
procedure `void` `<init>`(`e.e.a.b.f.q.r2` v0 @kind this) @signature `Le/e/a/b/f/q/r2;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2df0ec.  call `<init>`(v0) @signature `Le/e/a/b/f/q/o2;.<init>:()V` @kind direct;
  #L2df0f2.  return @kind void;
}
procedure `int` `a`(`byte`[] v2 @kind object, `int` v3 , `long` v4 , `int` v6 ) @signature `Le/e/a/b/f/q/r2;.a:([BIJI)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2df084.  if v6 == 0 then goto L2df0d2;
  #L2df088.  v0:= 1I;
  #L2df08a.  if v6 == v0 then goto L2df0c0;
  #L2df08e.  v0:= 2I;
  #L2df090.  if v6 != v0 then goto L2df0b4;
  #L2df094.  call temp:= `a`(v2, v4) @signature `Le/e/a/b/f/q/n2;.a:([BJ)B` @kind static;
  #L2df09a.  v6:= temp;
  #L2df09c.  v0:= 1L;
  #L2df0a0.  v4:= v4 + v0 @kind long;
  #L2df0a2.  call temp:= `a`(v2, v4) @signature `Le/e/a/b/f/q/n2;.a:([BJ)B` @kind static;
  #L2df0a8.  v2:= temp;
  #L2df0aa.  call temp:= `a`(v3, v6, v2) @signature `Le/e/a/b/f/q/s2;.a:(III)I` @kind static;
  #L2df0b0.  v2:= temp;
  #L2df0b2.  return v2;
  #L2df0b4.  v2:= new `java.lang.AssertionError`;
  #L2df0b8.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2df0be.  throw v2;
  #L2df0c0.  call temp:= `a`(v2, v4) @signature `Le/e/a/b/f/q/n2;.a:([BJ)B` @kind static;
  #L2df0c6.  v2:= temp;
  #L2df0c8.  call temp:= `a`(v3, v2) @signature `Le/e/a/b/f/q/s2;.a:(II)I` @kind static;
  #L2df0ce.  v2:= temp;
  #L2df0d0.  return v2;
  #L2df0d2.  call temp:= `a`(v3) @signature `Le/e/a/b/f/q/s2;.a:(I)I` @kind static;
  #L2df0d8.  v2:= temp;
  #L2df0da.  return v2;
}
procedure `int` `a`(`e.e.a.b.f.q.r2` v15 @kind this, `int` v16 , `byte`[] v17 @kind object, `int` v18 , `int` v19 ) @signature `Le/e/a/b/f/q/r2;.a:(I[BII)I` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L2debec.  v0:= v17 @kind object;
  #L2debf0.  v1:= v19;
  #L2debf4.  v2:= length @variable v0;
  #L2debf6.  v3:= v2 - v1 @kind int;
  #L2debfa.  v3:= v3 ^| v1 @kind int;
  #L2debfc.  v4:= 2I;
  #L2debfe.  v5:= 3I;
  #L2dec00.  v6:= 0I;
  #L2dec02.  if v3 < 0 then goto L2ded50;
  #L2dec06.  v1:= (`long`) v1 @kind i2l;
  #L2dec08.  v2:= (`int`) v1 @kind l2i;
  #L2dec0a.  v1:= 16I;
  #L2dec0e.  v7:= 1L;
  #L2dec12.  if v2 >= v1 then goto L2dec1a;
  #L2dec16.  v1:= 0I;
  #L2dec18.  goto L2dec3e;
  #L2dec1a.  v9:= 0L;
  #L2dec1e.  v1:= 0I;
  #L2dec20.  if v1 >= v2 then goto L2dec3c;
  #L2dec24.  v11:= v9 + v7 @kind long;
  #L2dec28.  call temp:= `a`(v0, v9) @signature `Le/e/a/b/f/q/n2;.a:([BJ)B` @kind static;
  #L2dec2e.  v3:= temp;
  #L2dec30.  if v3 < 0 then goto L2dec3e;
  #L2dec34.  v1:= v1 + 1;
  #L2dec38.  v9:= v11 @kind wide;
  #L2dec3a.  goto L2dec20;
  #L2dec3c.  v1:= v2;
  #L2dec3e.  v2:= v2 - v1 @kind int;
  #L2dec40.  v9:= (`long`) v1 @kind i2l;
  #L2dec42.  v1:= 0I;
  #L2dec44.  if v2 <= 0 then goto L2dec60;
  #L2dec48.  v11:= v9 + v7 @kind long;
  #L2dec4c.  call temp:= `a`(v0, v9) @signature `Le/e/a/b/f/q/n2;.a:([BJ)B` @kind static;
  #L2dec52.  v1:= temp;
  #L2dec54.  if v1 < 0 then goto L2dec62;
  #L2dec58.  v2:= v2 + -1;
  #L2dec5c.  v9:= v11 @kind wide;
  #L2dec5e.  goto L2dec44;
  #L2dec60.  v11:= v9 @kind wide;
  #L2dec62.  v3:= -1I;
  #L2dec64.  if v2 != 0 then goto L2dec6e;
  #L2dec68.  v3:= 0I;
  #L2dec6a.  goto L2ded4e;
  #L2dec6e.  v2:= v2 + -1;
  #L2dec72.  v9:= -32I;
  #L2dec76.  v10:= -65I;
  #L2dec7a.  if v1 >= v9 then goto L2deca8;
  #L2dec7e.  if v2 == 0 then goto L2deca4;
  #L2dec82.  v2:= v2 + -1;
  #L2dec86.  v9:= -62I;
  #L2dec8a.  if v1 < v9 then goto L2ded4e;
  #L2dec8e.  v13:= v11 + v7 @kind long;
  #L2dec92.  call temp:= `a`(v0, v11) @signature `Le/e/a/b/f/q/n2;.a:([BJ)B` @kind static;
  #L2dec98.  v1:= temp;
  #L2dec9a.  if v1 <= v10 then goto L2deca0;
  #L2dec9e.  goto L2ded4e;
  #L2deca0.  v9:= v13 @kind wide;
  #L2deca2.  goto L2dec42;
  #L2deca4.  v3:= v1;
  #L2deca6.  goto L2ded4e;
  #L2deca8.  v13:= -16I;
  #L2decac.  if v1 >= v13 then goto L2decf8;
  #L2decb0.  if v2 >= v4 then goto L2decb6;
  #L2decb4.  goto L2decfc;
  #L2decb6.  v2:= v2 + -2;
  #L2decba.  v13:= v11 + v7 @kind long;
  #L2decbe.  call temp:= `a`(v0, v11) @signature `Le/e/a/b/f/q/n2;.a:([BJ)B` @kind static;
  #L2decc4.  v11:= temp;
  #L2decc6.  if v11 > v10 then goto L2ded4e;
  #L2decca.  v12:= -96I;
  #L2decce.  if v1 != v9 then goto L2decd6;
  #L2decd2.  if v11 < v12 then goto L2ded4e;
  #L2decd6.  v9:= -19I;
  #L2decda.  if v1 != v9 then goto L2dece2;
  #L2decde.  if v11 >= v12 then goto L2ded4e;
  #L2dece2.  v11:= v13 + v7 @kind long;
  #L2dece6.  call temp:= `a`(v0, v13) @signature `Le/e/a/b/f/q/n2;.a:([BJ)B` @kind static;
  #L2decec.  v1:= temp;
  #L2decee.  if v1 <= v10 then goto L2decf4;
  #L2decf2.  goto L2ded4e;
  #L2decf4.  v9:= v11 @kind wide;
  #L2decf6.  goto L2dec42;
  #L2decf8.  if v2 >= v5 then goto L2ded08;
  #L2decfc.  call temp:= `a`(v0, v1, v11, v2) @signature `Le/e/a/b/f/q/r2;.a:([BIJI)I` @kind static;
  #L2ded02.  v6:= temp;
  #L2ded04.  v3:= v6;
  #L2ded06.  goto L2ded4e;
  #L2ded08.  v2:= v2 + -3;
  #L2ded0c.  v13:= v11 + v7 @kind long;
  #L2ded10.  call temp:= `a`(v0, v11) @signature `Le/e/a/b/f/q/n2;.a:([BJ)B` @kind static;
  #L2ded16.  v9:= temp;
  #L2ded18.  if v9 > v10 then goto L2ded4e;
  #L2ded1c.  v1:= v1 ^< 28;
  #L2ded20.  v9:= v9 + 112;
  #L2ded24.  v1:= v1 + v9 @kind int;
  #L2ded26.  v1:= v1 ^> 30;
  #L2ded2a.  if v1 != 0 then goto L2ded4e;
  #L2ded2e.  v11:= v13 + v7 @kind long;
  #L2ded32.  call temp:= `a`(v0, v13) @signature `Le/e/a/b/f/q/n2;.a:([BJ)B` @kind static;
  #L2ded38.  v1:= temp;
  #L2ded3a.  if v1 > v10 then goto L2ded4e;
  #L2ded3e.  v13:= v11 + v7 @kind long;
  #L2ded42.  call temp:= `a`(v0, v11) @signature `Le/e/a/b/f/q/n2;.a:([BJ)B` @kind static;
  #L2ded48.  v1:= temp;
  #L2ded4a.  if v1 <= v10 then goto L2deca0;
  #L2ded4e.  return v3;
  #L2ded50.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L2ded54.  v3:= new `java.lang.Object`[v5];
  #L2ded58.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ded5e.  v2:= temp @kind object;
  #L2ded60.  v3[v6]:= v2 @kind object;
  #L2ded64.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ded6a.  v2:= temp @kind object;
  #L2ded6c.  v5:= 1I;
  #L2ded6e.  v3[v5]:= v2 @kind object;
  #L2ded72.  call temp:= `valueOf`(v19) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ded78.  v1:= temp @kind object;
  #L2ded7a.  v3[v4]:= v1 @kind object;
  #L2ded7e.  v1:= "Array length=%d, index=%d, limit=%d" @kind object;
  #L2ded82.  call temp:= `format`(v1, v3) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2ded88.  v1:= temp @kind object;
  #L2ded8a.  call `<init>`(v0, v1) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ded90.  throw v0;
}
procedure `int` `a`(`e.e.a.b.f.q.r2` v22 @kind this, `java.lang.CharSequence` v23 @kind object, `byte`[] v24 @kind object, `int` v25 , `int` v26 ) @signature `Le/e/a/b/f/q/r2;.a:(Ljava/lang/CharSequence;[BII)I` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L2deda4.  v0:= v23 @kind object;
  #L2deda8.  v1:= v24 @kind object;
  #L2dedac.  v2:= v25;
  #L2dedb0.  v3:= v26;
  #L2dedb4.  v4:= (`long`) v2 @kind i2l;
  #L2dedb6.  v6:= (`long`) v3 @kind i2l;
  #L2dedb8.  v6:= v6 + v4 @kind long;
  #L2dedba.  call temp:= `length`(v23) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L2dedc0.  v8:= temp;
  #L2dedc2.  v9:= " at index " @kind object;
  #L2dedc6.  v10:= "Failed writing " @kind object;
  #L2dedca.  if v8 > v3 then goto L2df02a;
  #L2dedce.  v11:= length @variable v1;
  #L2dedd0.  v11:= v11 - v3 @kind int;
  #L2dedd2.  if v11 < v2 then goto L2df02a;
  #L2dedd6.  v2:= 0I;
  #L2dedd8.  v3:= 128I;
  #L2deddc.  v11:= 1L;
  #L2dede0.  if v2 >= v8 then goto L2dee02;
  #L2dede4.  call temp:= `charAt`(v0, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2dedea.  v13:= temp;
  #L2dedec.  if v13 >= v3 then goto L2dee02;
  #L2dedf0.  v11:= v11 + v4 @kind long;
  #L2dedf2.  v3:= (`byte`) v13 @kind i2b;
  #L2dedf4.  call `a`(v1, v4, v3) @signature `Le/e/a/b/f/q/n2;.a:([BJB)V` @kind static;
  #L2dedfa.  v2:= v2 + 1;
  #L2dedfe.  v4:= v11 @kind wide;
  #L2dee00.  goto L2dedd8;
  #L2dee02.  if v2 == v8 then goto L2df026;
  #L2dee06.  if v2 >= v8 then goto L2df022;
  #L2dee0a.  call temp:= `charAt`(v0, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2dee10.  v13:= temp;
  #L2dee12.  if v13 >= v3 then goto L2dee36;
  #L2dee16.  v14:= lcmp(v4, v6);
  #L2dee1a.  if v14 >= 0 then goto L2dee36;
  #L2dee1e.  v14:= v4 + v11 @kind long;
  #L2dee22.  v13:= (`byte`) v13 @kind i2b;
  #L2dee24.  call `a`(v1, v4, v13) @signature `Le/e/a/b/f/q/n2;.a:([BJB)V` @kind static;
  #L2dee2a.  v4:= v11 @kind wide;
  #L2dee2c.  v12:= v14 @kind wide;
  #L2dee2e.  v11:= 128I;
  #L2dee32.  goto L2def90;
  #L2dee36.  v14:= 2048I;
  #L2dee3a.  if v13 >= v14 then goto L2dee88;
  #L2dee3e.  v14:= -2L;
  #L2dee42.  v14:= v14 + v6 @kind long;
  #L2dee44.  v16:= lcmp(v4, v14);
  #L2dee48.  if v16 > 0 then goto L2dee88;
  #L2dee4c.  v14:= v4 + v11 @kind long;
  #L2dee50.  v3:= v13 ^>> 6;
  #L2dee54.  v3:= v3 ^| 960;
  #L2dee58.  v3:= (`byte`) v3 @kind i2b;
  #L2dee5a.  call `a`(v1, v4, v3) @signature `Le/e/a/b/f/q/n2;.a:([BJB)V` @kind static;
  #L2dee60.  v3:= v14 + v11 @kind long;
  #L2dee64.  v5:= v13 ^& 63;
  #L2dee68.  v13:= 128I;
  #L2dee6c.  v5:= v5 ^| v13 @kind int;
  #L2dee6e.  v5:= (`byte`) v5 @kind i2b;
  #L2dee70.  call `a`(v1, v14, v5) @signature `Le/e/a/b/f/q/n2;.a:([BJB)V` @kind static;
  #L2dee76.  v20:= v11 @kind wide;
  #L2dee7a.  v11:= 128I;
  #L2dee7e.  v12:= v3 @kind wide;
  #L2dee80.  v4:= v20 @kind wide;
  #L2dee84.  goto L2def90;
  #L2dee88.  v3:= 57343I;
  #L2dee8e.  v14:= 55296I;
  #L2dee94.  if v13 < v14 then goto L2dee9c;
  #L2dee98.  if v13 <= v3 then goto L2deef8;
  #L2dee9c.  v15:= -3L;
  #L2deea0.  v15:= v15 + v6 @kind long;
  #L2deea2.  v17:= lcmp(v4, v15);
  #L2deea6.  if v17 > 0 then goto L2deef8;
  #L2deeaa.  v14:= v4 + v11 @kind long;
  #L2deeae.  v3:= v13 ^>> 12;
  #L2deeb2.  v3:= v3 ^| 480;
  #L2deeb6.  v3:= (`byte`) v3 @kind i2b;
  #L2deeb8.  call `a`(v1, v4, v3) @signature `Le/e/a/b/f/q/n2;.a:([BJB)V` @kind static;
  #L2deebe.  v3:= v14 + v11 @kind long;
  #L2deec2.  v5:= v13 ^>> 6;
  #L2deec6.  v5:= v5 ^& 63;
  #L2deeca.  v11:= 128I;
  #L2deece.  v5:= v5 ^| v11 @kind int;
  #L2deed0.  v5:= (`byte`) v5 @kind i2b;
  #L2deed2.  call `a`(v1, v14, v5) @signature `Le/e/a/b/f/q/n2;.a:([BJB)V` @kind static;
  #L2deed8.  v14:= 1L;
  #L2deedc.  v18:= v3 + v14 @kind long;
  #L2deee0.  v5:= v13 ^& 63;
  #L2deee4.  v5:= v5 ^| v11 @kind int;
  #L2deee6.  v5:= (`byte`) v5 @kind i2b;
  #L2deee8.  call `a`(v1, v3, v5) @signature `Le/e/a/b/f/q/n2;.a:([BJB)V` @kind static;
  #L2deeee.  v12:= v18 @kind wide;
  #L2deef2.  v4:= 1L;
  #L2deef6.  goto L2dee2e;
  #L2deef8.  v11:= -4L;
  #L2deefc.  v11:= v11 + v6 @kind long;
  #L2deefe.  v15:= lcmp(v4, v11);
  #L2def02.  if v15 > 0 then goto L2defb8;
  #L2def06.  v3:= v2 + 1;
  #L2def0a.  if v3 == v8 then goto L2defa8;
  #L2def0e.  call temp:= `charAt`(v0, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2def14.  v2:= temp;
  #L2def16.  call temp:= `isSurrogatePair`(v13, v2) @signature `Ljava/lang/Character;.isSurrogatePair:(CC)Z` @kind static;
  #L2def1c.  v11:= temp;
  #L2def1e.  if v11 == 0 then goto L2defa6;
  #L2def22.  call temp:= `toCodePoint`(v13, v2) @signature `Ljava/lang/Character;.toCodePoint:(CC)I` @kind static;
  #L2def28.  v2:= temp;
  #L2def2a.  v11:= 1L;
  #L2def2e.  v13:= v4 + v11 @kind long;
  #L2def32.  v15:= v2 ^>> 18;
  #L2def36.  v15:= v15 ^| 240;
  #L2def3a.  v15:= (`byte`) v15 @kind i2b;
  #L2def3c.  call `a`(v1, v4, v15) @signature `Le/e/a/b/f/q/n2;.a:([BJB)V` @kind static;
  #L2def42.  v4:= v13 + v11 @kind long;
  #L2def46.  v15:= v2 ^>> 12;
  #L2def4a.  v15:= v15 ^& 63;
  #L2def4e.  v11:= 128I;
  #L2def52.  v12:= v15 ^| 128;
  #L2def56.  v12:= (`byte`) v12 @kind i2b;
  #L2def58.  call `a`(v1, v13, v12) @signature `Le/e/a/b/f/q/n2;.a:([BJB)V` @kind static;
  #L2def5e.  v12:= 1L;
  #L2def62.  v14:= v4 + v12 @kind long;
  #L2def66.  v16:= v2 ^>> 6;
  #L2def6a.  v12:= v16 ^& 63;
  #L2def6e.  v12:= v12 ^| v11 @kind int;
  #L2def70.  v12:= (`byte`) v12 @kind i2b;
  #L2def72.  call `a`(v1, v4, v12) @signature `Le/e/a/b/f/q/n2;.a:([BJB)V` @kind static;
  #L2def78.  v4:= 1L;
  #L2def7c.  v12:= v14 + v4 @kind long;
  #L2def80.  v2:= v2 ^& 63;
  #L2def84.  v2:= v2 ^| v11 @kind int;
  #L2def86.  v2:= (`byte`) v2 @kind i2b;
  #L2def88.  call `a`(v1, v14, v2) @signature `Le/e/a/b/f/q/n2;.a:([BJB)V` @kind static;
  #L2def8e.  v2:= v3;
  #L2def90.  v2:= v2 + 1;
  #L2def94.  v3:= 128I;
  #L2def98.  v20:= v4 @kind wide;
  #L2def9c.  v4:= v12 @kind wide;
  #L2def9e.  v11:= v20 @kind wide;
  #L2defa2.  goto L2dee06;
  #L2defa6.  v2:= v3;
  #L2defa8.  v0:= new `e.e.a.b.f.q.q2`;
  #L2defac.  v2:= v2 + -1;
  #L2defb0.  call `<init>`(v0, v2, v8) @signature `Le/e/a/b/f/q/q2;.<init>:(II)V` @kind direct;
  #L2defb6.  throw v0;
  #L2defb8.  if v13 < v14 then goto L2defe8;
  #L2defbc.  if v13 > v3 then goto L2defe8;
  #L2defc0.  v1:= v2 + 1;
  #L2defc4.  if v1 == v8 then goto L2defdc;
  #L2defc8.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2defce.  v0:= temp;
  #L2defd0.  call temp:= `isSurrogatePair`(v13, v0) @signature `Ljava/lang/Character;.isSurrogatePair:(CC)Z` @kind static;
  #L2defd6.  v0:= temp;
  #L2defd8.  if v0 != 0 then goto L2defe8;
  #L2defdc.  v0:= new `e.e.a.b.f.q.q2`;
  #L2defe0.  call `<init>`(v0, v2, v8) @signature `Le/e/a/b/f/q/q2;.<init>:(II)V` @kind direct;
  #L2defe6.  throw v0;
  #L2defe8.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L2defec.  v1:= new `java.lang.StringBuilder`;
  #L2deff0.  v2:= 46I;
  #L2deff4.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2deffa.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2df000.  call temp:= `append`(v1, v13) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2df006.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2df00c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2df012.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2df018.  v1:= temp @kind object;
  #L2df01a.  call `<init>`(v0, v1) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2df020.  throw v0;
  #L2df022.  v0:= (`int`) v4 @kind l2i;
  #L2df024.  return v0;
  #L2df026.  v0:= (`int`) v4 @kind l2i;
  #L2df028.  return v0;
  #L2df02a.  v1:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L2df02e.  v8:= v8 + -1;
  #L2df032.  call temp:= `charAt`(v0, v8) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2df038.  v0:= temp;
  #L2df03a.  v4:= new `java.lang.StringBuilder`;
  #L2df03e.  v5:= 37I;
  #L2df042.  call `<init>`(v4, v5) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2df048.  call temp:= `append`(v4, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2df04e.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2df054.  call temp:= `append`(v4, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2df05a.  v0:= v2 + v3 @kind int;
  #L2df05e.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2df064.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2df06a.  v0:= temp @kind object;
  #L2df06c.  call `<init>`(v1, v0) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2df072.  throw v1;
}
