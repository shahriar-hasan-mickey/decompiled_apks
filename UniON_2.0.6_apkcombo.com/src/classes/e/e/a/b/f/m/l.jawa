record `e.e.a.b.f.m.l` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface {
  `java.util.Iterator` `e.e.a.b.f.m.l.b` @AccessFlag FINAL;
  `java.util.Collection` `e.e.a.b.f.m.l.c` @AccessFlag FINAL;
  `e.e.a.b.f.m.m` `e.e.a.b.f.m.l.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.a.b.f.m.l` v1 @kind this, `e.e.a.b.f.m.m` v2 @kind object) @signature `Le/e/a/b/f/m/l;.<init>:(Le/e/a/b/f/m/m;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L264788.  v1.`e.e.a.b.f.m.l.d` @type ^`e.e.a.b.f.m.m` := v2 @kind object;
  #L26478c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L264792.  v0:= v1.`e.e.a.b.f.m.l.d` @type ^`e.e.a.b.f.m.m` @kind object;
  #L264796.  v0:= v0.`e.e.a.b.f.m.m.c` @type ^`java.util.Collection` @kind object;
  #L26479a.  v1.`e.e.a.b.f.m.l.c` @type ^`java.util.Collection` := v0 @kind object;
  #L26479e.  v2:= v2.`e.e.a.b.f.m.m.c` @type ^`java.util.Collection` @kind object;
  #L2647a2.  v0:= instanceof @variable v2 @type ^`java.util.List` @kind boolean;
  #L2647a6.  if v0 == 0 then goto L2647b8;
  #L2647aa.  v2:= (`java.util.List`) v2 @kind object;
  #L2647ae.  call temp:= `listIterator`(v2) @signature `Ljava/util/List;.listIterator:()Ljava/util/ListIterator;` @kind interface;
  #L2647b4.  v2:= temp @kind object;
  #L2647b6.  goto L2647c0;
  #L2647b8.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2647be.  v2:= temp @kind object;
  #L2647c0.  v1.`e.e.a.b.f.m.l.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L2647c4.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.m.l` v0 @kind this, `e.e.a.b.f.m.m` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Le/e/a/b/f/m/l;.<init>:(Le/e/a/b/f/m/m;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2647d8.  v0.`e.e.a.b.f.m.l.d` @type ^`e.e.a.b.f.m.m` := v1 @kind object;
  #L2647dc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2647e2.  v1:= v0.`e.e.a.b.f.m.l.d` @type ^`e.e.a.b.f.m.m` @kind object;
  #L2647e6.  v1:= v1.`e.e.a.b.f.m.m.c` @type ^`java.util.Collection` @kind object;
  #L2647ea.  v0.`e.e.a.b.f.m.l.c` @type ^`java.util.Collection` := v1 @kind object;
  #L2647ee.  v0.`e.e.a.b.f.m.l.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L2647f2.  return @kind void;
}
procedure `boolean` `hasNext`(`e.e.a.b.f.m.l` v1 @kind this) @signature `Le/e/a/b/f/m/l;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L264740.  call `zza`(v1) @signature `Le/e/a/b/f/m/l;.zza:()V` @kind virtual;
  #L264746.  v0:= v1.`e.e.a.b.f.m.l.b` @type ^`java.util.Iterator` @kind object;
  #L26474a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L264750.  v0:= temp;
  #L264752.  return v0;
}
procedure `java.lang.Object` `next`(`e.e.a.b.f.m.l` v1 @kind this) @signature `Le/e/a/b/f/m/l;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L264764.  call `zza`(v1) @signature `Le/e/a/b/f/m/l;.zza:()V` @kind virtual;
  #L26476a.  v0:= v1.`e.e.a.b.f.m.l.b` @type ^`java.util.Iterator` @kind object;
  #L26476e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L264774.  v0:= temp @kind object;
  #L264776.  return v0 @kind object;
}
procedure `void` `remove`(`e.e.a.b.f.m.l` v1 @kind this) @signature `Le/e/a/b/f/m/l;.remove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L264804.  v0:= v1.`e.e.a.b.f.m.l.b` @type ^`java.util.Iterator` @kind object;
  #L264808.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L26480e.  v0:= v1.`e.e.a.b.f.m.l.d` @type ^`e.e.a.b.f.m.m` @kind object;
  #L264812.  v0:= v0.`e.e.a.b.f.m.m.f` @type ^`e.e.a.b.f.m.p` @kind object;
  #L264816.  call temp:= `b`(v0) @signature `Le/e/a/b/f/m/p;.b:(Le/e/a/b/f/m/p;)I` @kind static;
  #L26481c.  v0:= v1.`e.e.a.b.f.m.l.d` @type ^`e.e.a.b.f.m.m` @kind object;
  #L264820.  call `zzb`(v0) @signature `Le/e/a/b/f/m/m;.zzb:()V` @kind virtual;
  #L264826.  return @kind void;
}
procedure `void` `zza`(`e.e.a.b.f.m.l` v2 @kind this) @signature `Le/e/a/b/f/m/l;.zza:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L264838.  v0:= v2.`e.e.a.b.f.m.l.d` @type ^`e.e.a.b.f.m.m` @kind object;
  #L26483c.  call `zza`(v0) @signature `Le/e/a/b/f/m/m;.zza:()V` @kind virtual;
  #L264842.  v0:= v2.`e.e.a.b.f.m.l.d` @type ^`e.e.a.b.f.m.m` @kind object;
  #L264846.  v0:= v0.`e.e.a.b.f.m.m.c` @type ^`java.util.Collection` @kind object;
  #L26484a.  v1:= v2.`e.e.a.b.f.m.l.c` @type ^`java.util.Collection` @kind object;
  #L26484e.  if v0 != v1 then goto L264854;
  #L264852.  return @kind void;
  #L264854.  v0:= new `java.util.ConcurrentModificationException`;
  #L264858.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L26485e.  throw v0;
}
