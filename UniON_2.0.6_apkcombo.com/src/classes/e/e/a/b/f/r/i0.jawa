record `e.e.a.b.f.r.i0` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.AbstractCollection` @kind class, `java.io.Serializable` @kind interface {
}
global `java.lang.Object`[] `@@e.e.a.b.f.r.i0.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/a/b/f/r/i0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L30d840.  v0:= 0I;
  #L30d842.  v0:= new `java.lang.Object`[v0];
  #L30d846.  `@@e.e.a.b.f.r.i0.b` @type ^`java.lang.Object`[] := v0 @kind object;
  #L30d84a.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.r.i0` v0 @kind this) @signature `Le/e/a/b/f/r/i0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L30d85c.  call `<init>`(v0) @signature `Ljava/util/AbstractCollection;.<init>:()V` @kind direct;
  #L30d862.  return @kind void;
}
procedure `int` `a`(`e.e.a.b.f.r.i0` v0 @kind this, `java.lang.Object`[] v1 @kind object, `int` v2 ) @signature `Le/e/a/b/f/r/i0;.a:([Ljava/lang/Object;I)I` @AccessFlag  {
    temp;

  #L30d774.  v1:= 0I;
  #L30d776.  throw v1;
}
procedure `boolean` `add`(`e.e.a.b.f.r.i0` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/r/i0;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L30d6b0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L30d6b4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L30d6ba.  throw v1;
}
procedure `boolean` `addAll`(`e.e.a.b.f.r.i0` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/r/i0;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L30d6cc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L30d6d0.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L30d6d6.  throw v1;
}
procedure `int` `c`(`e.e.a.b.f.r.i0` v1 @kind this) @signature `Le/e/a/b/f/r/i0;.c:()I` @AccessFlag  {
    temp;
    v0;

  #L30d758.  v0:= new `java.lang.UnsupportedOperationException`;
  #L30d75c.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L30d762.  throw v0;
}
procedure `void` `clear`(`e.e.a.b.f.r.i0` v1 @kind this) @signature `Le/e/a/b/f/r/i0;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30d874.  v0:= new `java.lang.UnsupportedOperationException`;
  #L30d878.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L30d87e.  throw v0;
}
procedure `boolean` `contains`(`java.lang.Object` v0 @kind object) @signature `Le/e/a/b/f/r/i0;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `d`(`e.e.a.b.f.r.i0` v1 @kind this) @signature `Le/e/a/b/f/r/i0;.d:()I` @AccessFlag  {
    temp;
    v0;

  #L30d73c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L30d740.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L30d746.  throw v0;
}
procedure `boolean` `remove`(`e.e.a.b.f.r.i0` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/a/b/f/r/i0;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L30d6e8.  v1:= new `java.lang.UnsupportedOperationException`;
  #L30d6ec.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L30d6f2.  throw v1;
}
procedure `boolean` `removeAll`(`e.e.a.b.f.r.i0` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/r/i0;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L30d704.  v1:= new `java.lang.UnsupportedOperationException`;
  #L30d708.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L30d70e.  throw v1;
}
procedure `boolean` `retainAll`(`e.e.a.b.f.r.i0` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Le/e/a/b/f/r/i0;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L30d720.  v1:= new `java.lang.UnsupportedOperationException`;
  #L30d724.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L30d72a.  throw v1;
}
procedure `java.lang.Object`[] `toArray`(`e.e.a.b.f.r.i0` v1 @kind this) @signature `Le/e/a/b/f/r/i0;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L30d788.  v0:= `@@e.e.a.b.f.r.i0.b` @type ^`java.lang.Object`[] @kind object;
  #L30d78c.  call temp:= `toArray`(v1, v0) @signature `Le/e/a/b/f/r/i0;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L30d792.  v0:= temp @kind object;
  #L30d794.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`e.e.a.b.f.r.i0` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Le/e/a/b/f/r/i0;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L30d7a8.  v0:= 0I;
  #L30d7aa.  if v4 == 0 then goto L30d81a;
  #L30d7ae.  call temp:= `size`(v3) @signature `Ljava/util/AbstractCollection;.size:()I` @kind virtual;
  #L30d7b4.  v1:= temp;
  #L30d7b6.  v2:= length @variable v4;
  #L30d7b8.  if v2 >= v1 then goto L30d808;
  #L30d7bc.  call temp:= `zzb`(v3) @signature `Le/e/a/b/f/r/i0;.zzb:()[Ljava/lang/Object;` @kind virtual;
  #L30d7c2.  v0:= temp @kind object;
  #L30d7c4.  if v0 != 0 then goto L30d7e6;
  #L30d7c8.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L30d7ce.  v4:= temp @kind object;
  #L30d7d0.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L30d7d6.  v4:= temp @kind object;
  #L30d7d8.  call temp:= `newInstance`(v4, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L30d7de.  v4:= temp @kind object;
  #L30d7e0.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L30d7e4.  goto L30d810;
  #L30d7e6.  call temp:= `d`(v3) @signature `Le/e/a/b/f/r/i0;.d:()I` @kind virtual;
  #L30d7ec.  v1:= temp;
  #L30d7ee.  call temp:= `c`(v3) @signature `Le/e/a/b/f/r/i0;.c:()I` @kind virtual;
  #L30d7f4.  v2:= temp;
  #L30d7f6.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L30d7fc.  v4:= temp @kind object;
  #L30d7fe.  call temp:= `copyOfRange`(v0, v1, v2, v4) @signature `Ljava/util/Arrays;.copyOfRange:([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;` @kind static;
  #L30d804.  v4:= temp @kind object;
  #L30d806.  return v4 @kind object;
  #L30d808.  if v2 <= v1 then goto L30d810;
  #L30d80c.  v4[v1]:= v0 @kind object;
  #L30d810.  v0:= 0I;
  #L30d812.  call temp:= `a`(v3, v4, v0) @signature `Le/e/a/b/f/r/i0;.a:([Ljava/lang/Object;I)I` @kind virtual;
  #L30d818.  return v4 @kind object;
  #L30d81a.  throw v0;
}
procedure `java.lang.Object`[] `zzb`(`e.e.a.b.f.r.i0` v1 @kind this) @signature `Le/e/a/b/f/r/i0;.zzb:()[Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L30d82c.  v0:= 0I;
  #L30d82e.  return v0 @kind object;
}
