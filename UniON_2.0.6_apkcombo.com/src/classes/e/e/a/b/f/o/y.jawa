record `e.e.a.b.f.o.y` @kind class @AccessFlag  extends `e.e.a.b.f.o.i0` @kind class {
  `java.util.Map` `e.e.a.b.f.o.y.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`e.e.a.b.f.o.y` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Le/e/a/b/f/o/y;.<init>:(Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c0d68.  call `<init>`(v0) @signature `Le/e/a/b/f/o/i0;.<init>:()V` @kind direct;
  #L2c0d6e.  if v1 == 0 then goto L2c0d78;
  #L2c0d72.  v0.`e.e.a.b.f.o.y.b` @type ^`java.util.Map` := v1 @kind object;
  #L2c0d76.  return @kind void;
  #L2c0d78.  v1:= 0I;
  #L2c0d7a.  throw v1;
}
procedure `boolean` `contains`(`e.e.a.b.f.o.y` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/o/y;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0d08.  v0:= v1.`e.e.a.b.f.o.y.b` @type ^`java.util.Map` @kind object;
  #L2c0d0c.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L2c0d12.  v2:= temp;
  #L2c0d14.  return v2;
}
procedure `boolean` `isEmpty`(`e.e.a.b.f.o.y` v1 @kind this) @signature `Le/e/a/b/f/o/y;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0d28.  v0:= v1.`e.e.a.b.f.o.y.b` @type ^`java.util.Map` @kind object;
  #L2c0d2c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2c0d32.  v0:= temp;
  #L2c0d34.  return v0;
}
procedure `int` `size`(`e.e.a.b.f.o.y` v1 @kind this) @signature `Le/e/a/b/f/o/y;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0d48.  v0:= v1.`e.e.a.b.f.o.y.b` @type ^`java.util.Map` @kind object;
  #L2c0d4c.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L2c0d52.  v0:= temp;
  #L2c0d54.  return v0;
}
