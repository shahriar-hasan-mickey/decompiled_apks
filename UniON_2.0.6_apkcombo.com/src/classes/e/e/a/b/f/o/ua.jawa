record `e.e.a.b.f.o.ua` @kind class @AccessFlag ABSTRACT extends `java.util.Map$Entry` @kind interface {
}
procedure `void` `<init>`(`e.e.a.b.f.o.ua` v0 @kind this) @signature `Le/e/a/b/f/o/ua;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2d0294.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d029a.  return @kind void;
}
procedure `boolean` `equals`(`e.e.a.b.f.o.ua` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/a/b/f/o/ua;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2d0174.  v0:= instanceof @variable v4 @type ^`java.util.Map$Entry` @kind boolean;
  #L2d0178.  v1:= 0I;
  #L2d017a.  if v0 == 0 then goto L2d01be;
  #L2d017e.  v4:= (`java.util.Map$Entry`) v4 @kind object;
  #L2d0182.  call temp:= `getKey`(v3) @signature `Le/e/a/b/f/o/ua;.getKey:()Ljava/lang/Object;` @kind virtual;
  #L2d0188.  v0:= temp @kind object;
  #L2d018a.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2d0190.  v2:= temp @kind object;
  #L2d0192.  call temp:= `a`(v0, v2) @signature `Le/e/a/b/f/o/a0;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2d0198.  v0:= temp;
  #L2d019a.  if v0 == 0 then goto L2d01be;
  #L2d019e.  call temp:= `getValue`(v3) @signature `Le/e/a/b/f/o/ua;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L2d01a4.  v0:= temp @kind object;
  #L2d01a6.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2d01ac.  v4:= temp @kind object;
  #L2d01ae.  call temp:= `a`(v0, v4) @signature `Le/e/a/b/f/o/a0;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2d01b4.  v4:= temp;
  #L2d01b6.  if v4 == 0 then goto L2d01be;
  #L2d01ba.  v4:= 1I;
  #L2d01bc.  return v4;
  #L2d01be.  return v1;
}
procedure `java.lang.Object` `getKey`() @signature `Le/e/a/b/f/o/ua;.getKey:()Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `getValue`() @signature `Le/e/a/b/f/o/ua;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `hashCode`(`e.e.a.b.f.o.ua` v3 @kind this) @signature `Le/e/a/b/f/o/ua;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2d01d0.  call temp:= `getKey`(v3) @signature `Le/e/a/b/f/o/ua;.getKey:()Ljava/lang/Object;` @kind virtual;
  #L2d01d6.  v0:= temp @kind object;
  #L2d01d8.  call temp:= `getValue`(v3) @signature `Le/e/a/b/f/o/ua;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L2d01de.  v1:= temp @kind object;
  #L2d01e0.  v2:= 0I;
  #L2d01e2.  if v0 != 0 then goto L2d01ea;
  #L2d01e6.  v0:= 0I;
  #L2d01e8.  goto L2d01f2;
  #L2d01ea.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2d01f0.  v0:= temp;
  #L2d01f2.  if v1 != 0 then goto L2d01f8;
  #L2d01f6.  goto L2d0200;
  #L2d01f8.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2d01fe.  v2:= temp;
  #L2d0200.  v0:= v0 ^~ v2 @kind int;
  #L2d0202.  return v0;
}
procedure `java.lang.String` `toString`(`e.e.a.b.f.o.ua` v5 @kind this) @signature `Le/e/a/b/f/o/ua;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d0214.  call temp:= `getKey`(v5) @signature `Le/e/a/b/f/o/ua;.getKey:()Ljava/lang/Object;` @kind virtual;
  #L2d021a.  v0:= temp @kind object;
  #L2d021c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2d0222.  v0:= temp @kind object;
  #L2d0224.  call temp:= `getValue`(v5) @signature `Le/e/a/b/f/o/ua;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L2d022a.  v1:= temp @kind object;
  #L2d022c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2d0232.  v1:= temp @kind object;
  #L2d0234.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2d023a.  v2:= temp @kind object;
  #L2d023c.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2d0242.  v2:= temp;
  #L2d0244.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2d024a.  v3:= temp @kind object;
  #L2d024c.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2d0252.  v3:= temp;
  #L2d0254.  v4:= new `java.lang.StringBuilder`;
  #L2d0258.  v2:= v2 + 1;
  #L2d025c.  v2:= v2 + v3 @kind int;
  #L2d025e.  call `<init>`(v4, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2d0264.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d026a.  v0:= "=" @kind object;
  #L2d026e.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d0274.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d027a.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d0280.  v0:= temp @kind object;
  #L2d0282.  return v0 @kind object;
}
