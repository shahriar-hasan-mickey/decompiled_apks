record `e.e.a.b.f.j.f4` @kind class @AccessFlag FINAL extends `java.util.Map$Entry` @kind interface {
  `java.util.Map$Entry` `e.e.a.b.f.j.f4.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.a.b.f.j.f4` v0 @kind this, `java.util.Map$Entry` v1 @kind object) @signature `Le/e/a/b/f/j/f4;.<init>:(Ljava/util/Map$Entry;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L227554.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L22755a.  v0.`e.e.a.b.f.j.f4.b` @type ^`java.util.Map$Entry` := v1 @kind object;
  #L22755e.  return @kind void;
}
procedure `void` `<init>`(`e.e.a.b.f.j.f4` v0 @kind this, `java.util.Map$Entry` v1 @kind object, `e.e.a.b.f.j.g4` v2 @kind object) @signature `Le/e/a/b/f/j/f4;.<init>:(Ljava/util/Map$Entry;Le/e/a/b/f/j/g4;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L227570.  call `<init>`(v0, v1) @signature `Le/e/a/b/f/j/f4;.<init>:(Ljava/util/Map$Entry;)V` @kind direct;
  #L227576.  return @kind void;
}
procedure `java.lang.Object` `getKey`(`e.e.a.b.f.j.f4` v1 @kind this) @signature `Le/e/a/b/f/j/f4;.getKey:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L227448.  v0:= v1.`e.e.a.b.f.j.f4.b` @type ^`java.util.Map$Entry` @kind object;
  #L22744c.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L227452.  v0:= temp @kind object;
  #L227454.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`e.e.a.b.f.j.f4` v2 @kind this) @signature `Le/e/a/b/f/j/f4;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L227468.  v0:= v2.`e.e.a.b.f.j.f4.b` @type ^`java.util.Map$Entry` @kind object;
  #L22746c.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L227472.  v0:= temp @kind object;
  #L227474.  v0:= (`e.e.a.b.f.j.d4`) v0 @kind object;
  #L227478.  v1:= 0I;
  #L22747a.  if v0 != 0 then goto L227480;
  #L22747e.  return v1 @kind object;
  #L227480.  call temp:= `c`() @signature `Le/e/a/b/f/j/d4;.c:()Le/e/a/b/f/j/c5;` @kind static;
  #L227486.  throw v1;
}
procedure `java.lang.Object` `setValue`(`e.e.a.b.f.j.f4` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/a/b/f/j/f4;.setValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L227498.  v0:= instanceof @variable v2 @type ^`e.e.a.b.f.j.c5` @kind boolean;
  #L22749c.  if v0 == 0 then goto L2274be;
  #L2274a0.  v0:= v1.`e.e.a.b.f.j.f4.b` @type ^`java.util.Map$Entry` @kind object;
  #L2274a4.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2274aa.  v0:= temp @kind object;
  #L2274ac.  v0:= (`e.e.a.b.f.j.d4`) v0 @kind object;
  #L2274b0.  v2:= (`e.e.a.b.f.j.c5`) v2 @kind object;
  #L2274b4.  call temp:= `a`(v0, v2) @signature `Le/e/a/b/f/j/h4;.a:(Le/e/a/b/f/j/c5;)Le/e/a/b/f/j/c5;` @kind virtual;
  #L2274ba.  v2:= temp @kind object;
  #L2274bc.  return v2 @kind object;
  #L2274be.  v2:= new `java.lang.IllegalArgumentException`;
  #L2274c2.  v0:= "LazyField now only used for MessageSet, and the value of MessageSet must be an instance of MessageLite" @kind object;
  #L2274c6.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2274cc.  throw v2;
}
