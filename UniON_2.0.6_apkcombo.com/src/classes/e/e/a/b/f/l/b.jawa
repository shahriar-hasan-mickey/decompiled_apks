record `e.e.a.b.f.l.b` @kind class @AccessFlag FINAL {
  `java.util.concurrent.ConcurrentHashMap` `e.e.a.b.f.l.b.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.ref.ReferenceQueue` `e.e.a.b.f.l.b.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e.e.a.b.f.l.b` v4 @kind this) @signature `Le/e/a/b/f/l/b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2577d8.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2577de.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L2577e2.  v1:= 16I;
  #L2577e6.  v2:= 0.75F;
  #L2577ea.  v3:= 10I;
  #L2577ee.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:(IFI)V` @kind direct;
  #L2577f4.  v4.`e.e.a.b.f.l.b.a` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L2577f8.  v0:= new `java.lang.ref.ReferenceQueue`;
  #L2577fc.  call `<init>`(v0) @signature `Ljava/lang/ref/ReferenceQueue;.<init>:()V` @kind direct;
  #L257802.  v4.`e.e.a.b.f.l.b.b` @type ^`java.lang.ref.ReferenceQueue` := v0 @kind object;
  #L257806.  return @kind void;
}
procedure `java.util.List` `a`(`e.e.a.b.f.l.b` v3 @kind this, `java.lang.Throwable` v4 @kind object, `boolean` v5 ) @signature `Le/e/a/b/f/l/b;.a:(Ljava/lang/Throwable;Z)Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L257758.  v5:= v3.`e.e.a.b.f.l.b.b` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L25775c.  call temp:= `poll`(v5) @signature `Ljava/lang/ref/ReferenceQueue;.poll:()Ljava/lang/ref/Reference;` @kind virtual;
  #L257762.  v5:= temp @kind object;
  #L257764.  if v5 == 0 then goto L257774;
  #L257768.  v0:= v3.`e.e.a.b.f.l.b.a` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L25776c.  call temp:= `remove`(v0, v5) @signature `Ljava/util/concurrent/ConcurrentHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L257772.  goto L257758;
  #L257774.  v5:= new `e.e.a.b.f.l.a8`;
  #L257778.  v0:= 0I;
  #L25777a.  call `<init>`(v5, v4, v0) @signature `Le/e/a/b/f/l/a8;.<init>:(Ljava/lang/Throwable;Ljava/lang/ref/ReferenceQueue;)V` @kind direct;
  #L257780.  v0:= v3.`e.e.a.b.f.l.b.a` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L257784.  call temp:= `get`(v0, v5) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L25778a.  v5:= temp @kind object;
  #L25778c.  v5:= (`java.util.List`) v5 @kind object;
  #L257790.  if v5 == 0 then goto L257796;
  #L257794.  return v5 @kind object;
  #L257796.  v5:= new `java.util.Vector`;
  #L25779a.  v0:= 2I;
  #L25779c.  call `<init>`(v5, v0) @signature `Ljava/util/Vector;.<init>:(I)V` @kind direct;
  #L2577a2.  v0:= v3.`e.e.a.b.f.l.b.a` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L2577a6.  v1:= new `e.e.a.b.f.l.a8`;
  #L2577aa.  v2:= v3.`e.e.a.b.f.l.b.b` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L2577ae.  call `<init>`(v1, v4, v2) @signature `Le/e/a/b/f/l/a8;.<init>:(Ljava/lang/Throwable;Ljava/lang/ref/ReferenceQueue;)V` @kind direct;
  #L2577b4.  call temp:= `putIfAbsent`(v0, v1, v5) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2577ba.  v4:= temp @kind object;
  #L2577bc.  v4:= (`java.util.List`) v4 @kind object;
  #L2577c0.  if v4 != 0 then goto L2577c6;
  #L2577c4.  return v5 @kind object;
  #L2577c6.  return v4 @kind object;
}
