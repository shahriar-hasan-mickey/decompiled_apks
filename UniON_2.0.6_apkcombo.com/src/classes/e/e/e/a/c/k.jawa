record `e.e.e.a.c.k` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `e.e.e.a.c.o` `e.e.e.a.c.k.a` @AccessFlag PROTECTED_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `e.e.e.a.c.k.b` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `e.e.e.a.c.k.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e.e.e.a.c.k` v2 @kind this) @signature `Le/e/e/a/c/k;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L38a808.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L38a80e.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L38a812.  v1:= 0I;
  #L38a814.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L38a81a.  v2.`e.e.e.a.c.k.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L38a81e.  v0:= new `e.e.e.a.c.o`;
  #L38a822.  call `<init>`(v0) @signature `Le/e/e/a/c/o;.<init>:()V` @kind direct;
  #L38a828.  v2.`e.e.e.a.c.k.a` @type ^`e.e.e.a.c.o` := v0 @kind object;
  #L38a82c.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L38a830.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L38a836.  v2.`e.e.e.a.c.k.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L38a83a.  return @kind void;
}
procedure `e.e.a.b.j.l` `a`(`e.e.e.a.c.k` v9 @kind this, `java.util.concurrent.Executor` v10 @kind object, `java.util.concurrent.Callable` v11 @kind object, `e.e.a.b.j.a` v12 @kind object) @signature `Le/e/e/a/c/k;.a:(Ljava/util/concurrent/Executor;Ljava/util/concurrent/Callable;Le/e/a/b/j/a;)Le/e/a/b/j/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L38a778.  v0:= v9.`e.e.e.a.c.k.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L38a77c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L38a782.  v0:= temp;
  #L38a784.  if v0 <= 0 then goto L38a78c;
  #L38a788.  v0:= 1I;
  #L38a78a.  goto L38a78e;
  #L38a78c.  v0:= 0I;
  #L38a78e.  call `b`(v0) @signature `Lcom/google/android/gms/common/internal/r;.b:(Z)V` @kind static;
  #L38a794.  call temp:= `a`(v12) @signature `Le/e/a/b/j/a;.a:()Z` @kind virtual;
  #L38a79a.  v0:= temp;
  #L38a79c.  if v0 == 0 then goto L38a7aa;
  #L38a7a0.  call temp:= `a`() @signature `Le/e/a/b/j/o;.a:()Le/e/a/b/j/l;` @kind static;
  #L38a7a6.  v10:= temp @kind object;
  #L38a7a8.  return v10 @kind object;
  #L38a7aa.  v3:= new `e.e.a.b.j.b`;
  #L38a7ae.  call `<init>`(v3) @signature `Le/e/a/b/j/b;.<init>:()V` @kind direct;
  #L38a7b4.  v6:= new `e.e.a.b.j.m`;
  #L38a7b8.  call temp:= `b`(v3) @signature `Le/e/a/b/j/b;.b:()Le/e/a/b/j/a;` @kind virtual;
  #L38a7be.  v0:= temp @kind object;
  #L38a7c0.  call `<init>`(v6, v0) @signature `Le/e/a/b/j/m;.<init>:(Le/e/a/b/j/a;)V` @kind direct;
  #L38a7c6.  v7:= new `e.e.e.a.c.a0`;
  #L38a7ca.  call `<init>`(v7, v10, v12, v3, v6) @signature `Le/e/e/a/c/a0;.<init>:(Ljava/util/concurrent/Executor;Le/e/a/b/j/a;Le/e/a/b/j/b;Le/e/a/b/j/m;)V` @kind direct;
  #L38a7d0.  v10:= v9.`e.e.e.a.c.k.a` @type ^`e.e.e.a.c.o` @kind object;
  #L38a7d4.  v8:= new `e.e.e.a.c.b0`;
  #L38a7d8.  v0:= v8 @kind object;
  #L38a7da.  v1:= v9 @kind object;
  #L38a7dc.  v2:= v12 @kind object;
  #L38a7de.  v4:= v11 @kind object;
  #L38a7e0.  v5:= v6 @kind object;
  #L38a7e2.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Le/e/e/a/c/b0;.<init>:(Le/e/e/a/c/k;Le/e/a/b/j/a;Le/e/a/b/j/b;Ljava/util/concurrent/Callable;Le/e/a/b/j/m;)V` @kind direct;
  #L38a7e8.  call `a`(v10, v7, v8) @signature `Le/e/e/a/c/o;.a:(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)V` @kind virtual;
  #L38a7ee.  call temp:= `a`(v6) @signature `Le/e/a/b/j/m;.a:()Le/e/a/b/j/l;` @kind virtual;
  #L38a7f4.  v10:= temp @kind object;
  #L38a7f6.  return v10 @kind object;
}
procedure `void` `a`() @signature `Le/e/e/a/c/k;.a:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `a`(`e.e.e.a.c.k` v3 @kind this, `e.e.a.b.j.a` v4 @kind object, `e.e.a.b.j.b` v5 @kind object, `java.util.concurrent.Callable` v6 @kind object, `e.e.a.b.j.m` v7 @kind object) @signature `Le/e/e/a/c/k;.a:(Le/e/a/b/j/a;Le/e/a/b/j/b;Ljava/util/concurrent/Callable;Le/e/a/b/j/m;)V` @AccessFlag FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L38a8ac.  call temp:= `a`(v4) @signature `Le/e/a/b/j/a;.a:()Z` @kind virtual;
  #L38a8b2.  v0:= temp;
  #L38a8b4.  if v0 == 0 then goto L38a8c0;
  #L38a8b8.  call `a`(v5) @signature `Le/e/a/b/j/b;.a:()V` @kind virtual;
  #L38a8be.  return @kind void;
  #L38a8c0.  v0:= v3.`e.e.e.a.c.k.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L38a8c4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L38a8ca.  v0:= temp;
  #L38a8cc.  if v0 != 0 then goto L38a8e2;
  #L38a8d0.  call `a`(v3) @signature `Le/e/e/a/c/k;.a:()V` @kind virtual;
  #L38a8d6.  v0:= v3.`e.e.e.a.c.k.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L38a8da.  v1:= 1I;
  #L38a8dc.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L38a8e2.  call temp:= `a`(v4) @signature `Le/e/a/b/j/a;.a:()Z` @kind virtual;
  #L38a8e8.  v0:= temp;
  #L38a8ea.  if v0 == 0 then goto L38a8f6;
  #L38a8ee.  call `a`(v5) @signature `Le/e/a/b/j/b;.a:()V` @kind virtual;
  #L38a8f4.  return @kind void;
  #L38a8f6.  call temp:= `call`(v6) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L38a8fc.  v6:= temp @kind object;
  #L38a8fe.  call temp:= `a`(v4) @signature `Le/e/a/b/j/a;.a:()Z` @kind virtual;
  #L38a904.  v0:= temp;
  #L38a906.  if v0 == 0 then goto L38a912;
  #L38a90a.  call `a`(v5) @signature `Le/e/a/b/j/b;.a:()V` @kind virtual;
  #L38a910.  return @kind void;
  #L38a912.  call `a`(v7, v6) @signature `Le/e/a/b/j/m;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L38a918.  return @kind void;
  #L38a91a.  v6:= Exception @type ^`java.lang.Exception` @kind object;
  #L38a91c.  goto L38a934;
  #L38a91e.  v6:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L38a920.  v0:= new `e.e.e.a.a`;
  #L38a924.  v1:= "Internal error has occurred when executing ML Kit tasks" @kind object;
  #L38a928.  v2:= 13I;
  #L38a92c.  call `<init>`(v0, v1, v2, v6) @signature `Le/e/e/a/a;.<init>:(Ljava/lang/String;ILjava/lang/Throwable;)V` @kind direct;
  #L38a932.  throw v0;
  #L38a934.  call temp:= `a`(v4) @signature `Le/e/a/b/j/a;.a:()Z` @kind virtual;
  #L38a93a.  v4:= temp;
  #L38a93c.  if v4 == 0 then goto L38a948;
  #L38a940.  call `a`(v5) @signature `Le/e/a/b/j/b;.a:()V` @kind virtual;
  #L38a946.  return @kind void;
  #L38a948.  call `a`(v7, v6) @signature `Le/e/a/b/j/m;.a:(Ljava/lang/Exception;)V` @kind virtual;
  #L38a94e.  return @kind void;
  catch `java.lang.RuntimeException` @[L38a8c0..L38a8fe] goto L38a91e;
  catch `java.lang.Exception` @[L38a8c0..L38a8fe] goto L38a91a;
  catch `java.lang.Exception` @[L38a8fe..L38a934] goto L38a91a;
}
procedure `void` `a`(`e.e.e.a.c.k` v2 @kind this, `java.util.concurrent.Executor` v3 @kind object) @signature `Le/e/e/a/c/k;.a:(Ljava/util/concurrent/Executor;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L38a868.  v0:= v2.`e.e.e.a.c.k.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L38a86c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L38a872.  v0:= temp;
  #L38a874.  if v0 <= 0 then goto L38a87c;
  #L38a878.  v0:= 1I;
  #L38a87a.  goto L38a87e;
  #L38a87c.  v0:= 0I;
  #L38a87e.  call `b`(v0) @signature `Lcom/google/android/gms/common/internal/r;.b:(Z)V` @kind static;
  #L38a884.  v0:= v2.`e.e.e.a.c.k.a` @type ^`e.e.e.a.c.o` @kind object;
  #L38a888.  v1:= new `e.e.e.a.c.z`;
  #L38a88c.  call `<init>`(v1, v2) @signature `Le/e/e/a/c/z;.<init>:(Le/e/e/a/c/k;)V` @kind direct;
  #L38a892.  call `a`(v0, v3, v1) @signature `Le/e/e/a/c/o;.a:(Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)V` @kind virtual;
  #L38a898.  return @kind void;
}
procedure `void` `b`(`e.e.e.a.c.k` v1 @kind this) @signature `Le/e/e/a/c/k;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L38a84c.  v0:= v1.`e.e.e.a.c.k.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L38a850.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L38a856.  return @kind void;
}
procedure `void` `c`() @signature `Le/e/e/a/c/k;.c:()V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `d`(`e.e.e.a.c.k` v3 @kind this) @signature `Le/e/e/a/c/k;.d:()V` @AccessFlag FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L38a97c.  v0:= v3.`e.e.e.a.c.k.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L38a980.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L38a986.  v0:= temp;
  #L38a988.  v1:= 0I;
  #L38a98a.  if v0 < 0 then goto L38a992;
  #L38a98e.  v2:= 1I;
  #L38a990.  goto L38a994;
  #L38a992.  v2:= 0I;
  #L38a994.  call `b`(v2) @signature `Lcom/google/android/gms/common/internal/r;.b:(Z)V` @kind static;
  #L38a99a.  if v0 != 0 then goto L38a9ae;
  #L38a99e.  call `c`(v3) @signature `Le/e/e/a/c/k;.c:()V` @kind virtual;
  #L38a9a4.  v0:= v3.`e.e.e.a.c.k.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L38a9a8.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L38a9ae.  return @kind void;
}
