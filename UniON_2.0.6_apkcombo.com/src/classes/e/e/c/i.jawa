record `e.e.c.i` @kind class @AccessFlag PUBLIC_FINAL extends `e.e.c.l` @kind class, `java.lang.Iterable` @kind interface {
  `java.util.List` `e.e.c.i.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e.e.c.i` v1 @kind this) @signature `Le/e/c/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L373a60.  call `<init>`(v1) @signature `Le/e/c/l;.<init>:()V` @kind direct;
  #L373a66.  v0:= new `java.util.ArrayList`;
  #L373a6a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L373a70.  v1.`e.e.c.i.b` @type ^`java.util.List` := v0 @kind object;
  #L373a74.  return @kind void;
}
procedure `void` `a`(`e.e.c.i` v1 @kind this, `e.e.c.l` v2 @kind object) @signature `Le/e/c/i;.a:(Le/e/c/l;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L373a88.  if v2 != 0 then goto L373a90;
  #L373a8c.  v2:= `@@e.e.c.n.a` @type ^`e.e.c.n` @kind object;
  #L373a90.  v0:= v1.`e.e.c.i.b` @type ^`java.util.List` @kind object;
  #L373a94.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L373a9a.  return @kind void;
}
procedure `boolean` `equals`(`e.e.c.i` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/c/i;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L373994.  if v2 == v1 then goto L3739be;
  #L373998.  v0:= instanceof @variable v2 @type ^`e.e.c.i` @kind boolean;
  #L37399c.  if v0 == 0 then goto L3739ba;
  #L3739a0.  v2:= (`e.e.c.i`) v2 @kind object;
  #L3739a4.  v2:= v2.`e.e.c.i.b` @type ^`java.util.List` @kind object;
  #L3739a8.  v0:= v1.`e.e.c.i.b` @type ^`java.util.List` @kind object;
  #L3739ac.  call temp:= `equals`(v2, v0) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3739b2.  v2:= temp;
  #L3739b4.  if v2 == 0 then goto L3739ba;
  #L3739b8.  goto L3739be;
  #L3739ba.  v2:= 0I;
  #L3739bc.  goto L3739c0;
  #L3739be.  v2:= 1I;
  #L3739c0.  return v2;
}
procedure `int` `hashCode`(`e.e.c.i` v1 @kind this) @signature `Le/e/c/i;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3739d4.  v0:= v1.`e.e.c.i.b` @type ^`java.util.List` @kind object;
  #L3739d8.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L3739de.  v0:= temp;
  #L3739e0.  return v0;
}
procedure `java.lang.String` `i`(`e.e.c.i` v2 @kind this) @signature `Le/e/c/i;.i:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3739f4.  v0:= v2.`e.e.c.i.b` @type ^`java.util.List` @kind object;
  #L3739f8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3739fe.  v0:= temp;
  #L373a00.  v1:= 1I;
  #L373a02.  if v0 != v1 then goto L373a22;
  #L373a06.  v0:= v2.`e.e.c.i.b` @type ^`java.util.List` @kind object;
  #L373a0a.  v1:= 0I;
  #L373a0c.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L373a12.  v0:= temp @kind object;
  #L373a14.  v0:= (`e.e.c.l`) v0 @kind object;
  #L373a18.  call temp:= `i`(v0) @signature `Le/e/c/l;.i:()Ljava/lang/String;` @kind virtual;
  #L373a1e.  v0:= temp @kind object;
  #L373a20.  return v0 @kind object;
  #L373a22.  v0:= new `java.lang.IllegalStateException`;
  #L373a26.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L373a2c.  throw v0;
}
procedure `java.util.Iterator` `iterator`(`e.e.c.i` v1 @kind this) @signature `Le/e/c/i;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L373a40.  v0:= v1.`e.e.c.i.b` @type ^`java.util.List` @kind object;
  #L373a44.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L373a4a.  v0:= temp @kind object;
  #L373a4c.  return v0 @kind object;
}
