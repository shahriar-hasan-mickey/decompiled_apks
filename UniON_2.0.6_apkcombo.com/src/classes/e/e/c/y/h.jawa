record `e.e.c.y.h` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.AbstractMap` @kind class, `java.io.Serializable` @kind interface {
  `java.util.Comparator` `e.e.c.y.h.b` @AccessFlag ;
  `e.e.c.y.h$e` `e.e.c.y.h.c` @AccessFlag ;
  `int` `e.e.c.y.h.d` @AccessFlag ;
  `int` `e.e.c.y.h.e` @AccessFlag ;
  `e.e.c.y.h$e` `e.e.c.y.h.f` @AccessFlag FINAL;
  `e.e.c.y.h$b` `e.e.c.y.h.g` @AccessFlag PRIVATE;
  `e.e.c.y.h$c` `e.e.c.y.h.h` @AccessFlag PRIVATE;
}
global `java.util.Comparator` `@@e.e.c.y.h.i` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/c/y/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L376c2c.  v0:= constclass @type ^`e.e.c.y.h` @kind object;
  #L376c30.  v0:= new `e.e.c.y.h$a`;
  #L376c34.  call `<init>`(v0) @signature `Le/e/c/y/h$a;.<init>:()V` @kind direct;
  #L376c3a.  `@@e.e.c.y.h.i` @type ^`java.util.Comparator` := v0 @kind object;
  #L376c3e.  return @kind void;
}
procedure `void` `<init>`(`e.e.c.y.h` v1 @kind this) @signature `Le/e/c/y/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L376c50.  v0:= `@@e.e.c.y.h.i` @type ^`java.util.Comparator` @kind object;
  #L376c54.  call `<init>`(v1, v0) @signature `Le/e/c/y/h;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L376c5a.  return @kind void;
}
procedure `void` `<init>`(`e.e.c.y.h` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Le/e/c/y/h;.<init>:(Ljava/util/Comparator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L376c6c.  call `<init>`(v1) @signature `Ljava/util/AbstractMap;.<init>:()V` @kind direct;
  #L376c72.  v0:= 0I;
  #L376c74.  v1.`e.e.c.y.h.d` @type ^`int` := v0;
  #L376c78.  v1.`e.e.c.y.h.e` @type ^`int` := v0;
  #L376c7c.  v0:= new `e.e.c.y.h$e`;
  #L376c80.  call `<init>`(v0) @signature `Le/e/c/y/h$e;.<init>:()V` @kind direct;
  #L376c86.  v1.`e.e.c.y.h.f` @type ^`e.e.c.y.h$e` := v0 @kind object;
  #L376c8a.  if v2 == 0 then goto L376c90;
  #L376c8e.  goto L376c94;
  #L376c90.  v2:= `@@e.e.c.y.h.i` @type ^`java.util.Comparator` @kind object;
  #L376c94.  v1.`e.e.c.y.h.b` @type ^`java.util.Comparator` := v2 @kind object;
  #L376c98.  return @kind void;
}
procedure `void` `a`(`e.e.c.y.h` v5 @kind this, `e.e.c.y.h$e` v6 @kind object) @signature `Le/e/c/y/h;.a:(Le/e/c/y/h$e;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L376f10.  v0:= v6.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` @kind object;
  #L376f14.  v1:= v6.`e.e.c.y.h$e.d` @type ^`e.e.c.y.h$e` @kind object;
  #L376f18.  v2:= v1.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` @kind object;
  #L376f1c.  v3:= v1.`e.e.c.y.h$e.d` @type ^`e.e.c.y.h$e` @kind object;
  #L376f20.  v6.`e.e.c.y.h$e.d` @type ^`e.e.c.y.h$e` := v2 @kind object;
  #L376f24.  if v2 == 0 then goto L376f2c;
  #L376f28.  v2.`e.e.c.y.h$e.b` @type ^`e.e.c.y.h$e` := v6 @kind object;
  #L376f2c.  call `a`(v5, v6, v1) @signature `Le/e/c/y/h;.a:(Le/e/c/y/h$e;Le/e/c/y/h$e;)V` @kind direct;
  #L376f32.  v1.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` := v6 @kind object;
  #L376f36.  v6.`e.e.c.y.h$e.b` @type ^`e.e.c.y.h$e` := v1 @kind object;
  #L376f3a.  v4:= 0I;
  #L376f3c.  if v0 == 0 then goto L376f46;
  #L376f40.  v0:= v0.`e.e.c.y.h$e.i` @type ^`int`;
  #L376f44.  goto L376f48;
  #L376f46.  v0:= 0I;
  #L376f48.  if v2 == 0 then goto L376f52;
  #L376f4c.  v2:= v2.`e.e.c.y.h$e.i` @type ^`int`;
  #L376f50.  goto L376f54;
  #L376f52.  v2:= 0I;
  #L376f54.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L376f5a.  v0:= temp;
  #L376f5c.  v0:= v0 + 1;
  #L376f60.  v6.`e.e.c.y.h$e.i` @type ^`int` := v0;
  #L376f64.  v6:= v6.`e.e.c.y.h$e.i` @type ^`int`;
  #L376f68.  if v3 == 0 then goto L376f70;
  #L376f6c.  v4:= v3.`e.e.c.y.h$e.i` @type ^`int`;
  #L376f70.  call temp:= `max`(v6, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L376f76.  v6:= temp;
  #L376f78.  v6:= v6 + 1;
  #L376f7c.  v1.`e.e.c.y.h$e.i` @type ^`int` := v6;
  #L376f80.  return @kind void;
}
procedure `void` `a`(`e.e.c.y.h` v2 @kind this, `e.e.c.y.h$e` v3 @kind object, `e.e.c.y.h$e` v4 @kind object) @signature `Le/e/c/y/h;.a:(Le/e/c/y/h$e;Le/e/c/y/h$e;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L376ed0.  v0:= v3.`e.e.c.y.h$e.b` @type ^`e.e.c.y.h$e` @kind object;
  #L376ed4.  v1:= 0I;
  #L376ed6.  v3.`e.e.c.y.h$e.b` @type ^`e.e.c.y.h$e` := v1 @kind object;
  #L376eda.  if v4 == 0 then goto L376ee2;
  #L376ede.  v4.`e.e.c.y.h$e.b` @type ^`e.e.c.y.h$e` := v0 @kind object;
  #L376ee2.  if v0 == 0 then goto L376efa;
  #L376ee6.  v1:= v0.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` @kind object;
  #L376eea.  if v1 != v3 then goto L376ef4;
  #L376eee.  v0.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` := v4 @kind object;
  #L376ef2.  goto L376efe;
  #L376ef4.  v0.`e.e.c.y.h$e.d` @type ^`e.e.c.y.h$e` := v4 @kind object;
  #L376ef8.  goto L376efe;
  #L376efa.  v2.`e.e.c.y.h.c` @type ^`e.e.c.y.h$e` := v4 @kind object;
  #L376efe.  return @kind void;
}
procedure `boolean` `a`(`e.e.c.y.h` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Le/e/c/y/h;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;

  #L376944.  if v1 == v2 then goto L37695e;
  #L376948.  if v1 == 0 then goto L37695a;
  #L37694c.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L376952.  v1:= temp;
  #L376954.  if v1 == 0 then goto L37695a;
  #L376958.  goto L37695e;
  #L37695a.  v1:= 0I;
  #L37695c.  goto L376960;
  #L37695e.  v1:= 1I;
  #L376960.  return v1;
}
procedure `void` `b`(`e.e.c.y.h` v5 @kind this, `e.e.c.y.h$e` v6 @kind object) @signature `Le/e/c/y/h;.b:(Le/e/c/y/h$e;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L376f94.  v0:= v6.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` @kind object;
  #L376f98.  v1:= v6.`e.e.c.y.h$e.d` @type ^`e.e.c.y.h$e` @kind object;
  #L376f9c.  v2:= v0.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` @kind object;
  #L376fa0.  v3:= v0.`e.e.c.y.h$e.d` @type ^`e.e.c.y.h$e` @kind object;
  #L376fa4.  v6.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` := v3 @kind object;
  #L376fa8.  if v3 == 0 then goto L376fb0;
  #L376fac.  v3.`e.e.c.y.h$e.b` @type ^`e.e.c.y.h$e` := v6 @kind object;
  #L376fb0.  call `a`(v5, v6, v0) @signature `Le/e/c/y/h;.a:(Le/e/c/y/h$e;Le/e/c/y/h$e;)V` @kind direct;
  #L376fb6.  v0.`e.e.c.y.h$e.d` @type ^`e.e.c.y.h$e` := v6 @kind object;
  #L376fba.  v6.`e.e.c.y.h$e.b` @type ^`e.e.c.y.h$e` := v0 @kind object;
  #L376fbe.  v4:= 0I;
  #L376fc0.  if v1 == 0 then goto L376fca;
  #L376fc4.  v1:= v1.`e.e.c.y.h$e.i` @type ^`int`;
  #L376fc8.  goto L376fcc;
  #L376fca.  v1:= 0I;
  #L376fcc.  if v3 == 0 then goto L376fd6;
  #L376fd0.  v3:= v3.`e.e.c.y.h$e.i` @type ^`int`;
  #L376fd4.  goto L376fd8;
  #L376fd6.  v3:= 0I;
  #L376fd8.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L376fde.  v1:= temp;
  #L376fe0.  v1:= v1 + 1;
  #L376fe4.  v6.`e.e.c.y.h$e.i` @type ^`int` := v1;
  #L376fe8.  v6:= v6.`e.e.c.y.h$e.i` @type ^`int`;
  #L376fec.  if v2 == 0 then goto L376ff4;
  #L376ff0.  v4:= v2.`e.e.c.y.h$e.i` @type ^`int`;
  #L376ff4.  call temp:= `max`(v6, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L376ffa.  v6:= temp;
  #L376ffc.  v6:= v6 + 1;
  #L377000.  v0.`e.e.c.y.h$e.i` @type ^`int` := v6;
  #L377004.  return @kind void;
}
procedure `void` `b`(`e.e.c.y.h` v7 @kind this, `e.e.c.y.h$e` v8 @kind object, `boolean` v9 ) @signature `Le/e/c/y/h;.b:(Le/e/c/y/h$e;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L376ce4.  if v8 == 0 then goto L376dc6;
  #L376ce8.  v0:= v8.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` @kind object;
  #L376cec.  v1:= v8.`e.e.c.y.h$e.d` @type ^`e.e.c.y.h$e` @kind object;
  #L376cf0.  v2:= 0I;
  #L376cf2.  if v0 == 0 then goto L376cfc;
  #L376cf6.  v3:= v0.`e.e.c.y.h$e.i` @type ^`int`;
  #L376cfa.  goto L376cfe;
  #L376cfc.  v3:= 0I;
  #L376cfe.  if v1 == 0 then goto L376d08;
  #L376d02.  v4:= v1.`e.e.c.y.h$e.i` @type ^`int`;
  #L376d06.  goto L376d0a;
  #L376d08.  v4:= 0I;
  #L376d0a.  v5:= v3 - v4 @kind int;
  #L376d0e.  v6:= -2I;
  #L376d10.  if v5 != v6 then goto L376d54;
  #L376d14.  v0:= v1.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` @kind object;
  #L376d18.  v3:= v1.`e.e.c.y.h$e.d` @type ^`e.e.c.y.h$e` @kind object;
  #L376d1c.  if v3 == 0 then goto L376d26;
  #L376d20.  v3:= v3.`e.e.c.y.h$e.i` @type ^`int`;
  #L376d24.  goto L376d28;
  #L376d26.  v3:= 0I;
  #L376d28.  if v0 == 0 then goto L376d30;
  #L376d2c.  v2:= v0.`e.e.c.y.h$e.i` @type ^`int`;
  #L376d30.  v2:= v2 - v3 @kind int;
  #L376d32.  v0:= -1I;
  #L376d34.  if v2 == v0 then goto L376d48;
  #L376d38.  if v2 != 0 then goto L376d42;
  #L376d3c.  if v9 != 0 then goto L376d42;
  #L376d40.  goto L376d48;
  #L376d42.  call `b`(v7, v1) @signature `Le/e/c/y/h;.b:(Le/e/c/y/h$e;)V` @kind direct;
  #L376d48.  call `a`(v7, v8) @signature `Le/e/c/y/h;.a:(Le/e/c/y/h$e;)V` @kind direct;
  #L376d4e.  if v9 == 0 then goto L376dc0;
  #L376d52.  goto L376dc6;
  #L376d54.  v1:= 2I;
  #L376d56.  v6:= 1I;
  #L376d58.  if v5 != v1 then goto L376d9a;
  #L376d5c.  v1:= v0.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` @kind object;
  #L376d60.  v3:= v0.`e.e.c.y.h$e.d` @type ^`e.e.c.y.h$e` @kind object;
  #L376d64.  if v3 == 0 then goto L376d6e;
  #L376d68.  v3:= v3.`e.e.c.y.h$e.i` @type ^`int`;
  #L376d6c.  goto L376d70;
  #L376d6e.  v3:= 0I;
  #L376d70.  if v1 == 0 then goto L376d78;
  #L376d74.  v2:= v1.`e.e.c.y.h$e.i` @type ^`int`;
  #L376d78.  v2:= v2 - v3 @kind int;
  #L376d7a.  if v2 == v6 then goto L376d8e;
  #L376d7e.  if v2 != 0 then goto L376d88;
  #L376d82.  if v9 != 0 then goto L376d88;
  #L376d86.  goto L376d8e;
  #L376d88.  call `a`(v7, v0) @signature `Le/e/c/y/h;.a:(Le/e/c/y/h$e;)V` @kind direct;
  #L376d8e.  call `b`(v7, v8) @signature `Le/e/c/y/h;.b:(Le/e/c/y/h$e;)V` @kind direct;
  #L376d94.  if v9 == 0 then goto L376dc0;
  #L376d98.  goto L376dc6;
  #L376d9a.  if v5 != 0 then goto L376dac;
  #L376d9e.  v3:= v3 + 1;
  #L376da2.  v8.`e.e.c.y.h$e.i` @type ^`int` := v3;
  #L376da6.  if v9 == 0 then goto L376dc0;
  #L376daa.  goto L376dc6;
  #L376dac.  call temp:= `max`(v3, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L376db2.  v0:= temp;
  #L376db4.  v0:= v0 + v6 @kind int;
  #L376db6.  v8.`e.e.c.y.h$e.i` @type ^`int` := v0;
  #L376dba.  if v9 != 0 then goto L376dc0;
  #L376dbe.  goto L376dc6;
  #L376dc0.  v8:= v8.`e.e.c.y.h$e.b` @type ^`e.e.c.y.h$e` @kind object;
  #L376dc4.  goto L376ce4;
  #L376dc6.  return @kind void;
}
procedure `e.e.c.y.h$e` `a`(`e.e.c.y.h` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Le/e/c/y/h;.a:(Ljava/lang/Object;)Le/e/c/y/h$e;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L376ad8.  v0:= 0I;
  #L376ada.  if v3 == 0 then goto L376aea;
  #L376ade.  v1:= 0I;
  #L376ae0.  call temp:= `a`(v2, v3, v1) @signature `Le/e/c/y/h;.a:(Ljava/lang/Object;Z)Le/e/c/y/h$e;` @kind virtual;
  #L376ae6.  v0:= temp @kind object;
  #L376ae8.  
  #L376aea.  return v0 @kind object;
  catch `java.lang.ClassCastException` @[L376ae0..L376ae8] goto L376aea;
}
procedure `e.e.c.y.h$e` `a`(`e.e.c.y.h` v6 @kind this, `java.lang.Object` v7 @kind object, `boolean` v8 ) @signature `Le/e/c/y/h;.a:(Ljava/lang/Object;Z)Le/e/c/y/h$e;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L376974.  v0:= v6.`e.e.c.y.h.b` @type ^`java.util.Comparator` @kind object;
  #L376978.  v1:= v6.`e.e.c.y.h.c` @type ^`e.e.c.y.h$e` @kind object;
  #L37697c.  v2:= 0I;
  #L37697e.  if v1 == 0 then goto L3769cc;
  #L376982.  v3:= `@@e.e.c.y.h.i` @type ^`java.util.Comparator` @kind object;
  #L376986.  if v0 != v3 then goto L376992;
  #L37698a.  v3:= v7 @kind object;
  #L37698c.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L376990.  goto L376994;
  #L376992.  v3:= v2 @kind object;
  #L376994.  v4:= v1.`e.e.c.y.h$e.g` @type ^`java.lang.Object` @kind object;
  #L376998.  if v3 == 0 then goto L3769a6;
  #L37699c.  call temp:= `compareTo`(v3, v4) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L3769a2.  v4:= temp;
  #L3769a4.  goto L3769ae;
  #L3769a6.  call temp:= `compare`(v0, v7, v4) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L3769ac.  v4:= temp;
  #L3769ae.  if v4 != 0 then goto L3769b4;
  #L3769b2.  return v1 @kind object;
  #L3769b4.  if v4 >= 0 then goto L3769be;
  #L3769b8.  v5:= v1.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` @kind object;
  #L3769bc.  goto L3769c2;
  #L3769be.  v5:= v1.`e.e.c.y.h$e.d` @type ^`e.e.c.y.h$e` @kind object;
  #L3769c2.  if v5 != 0 then goto L3769c8;
  #L3769c6.  goto L3769ce;
  #L3769c8.  v1:= v5 @kind object;
  #L3769ca.  goto L376994;
  #L3769cc.  v4:= 0I;
  #L3769ce.  if v8 != 0 then goto L3769d4;
  #L3769d2.  return v2 @kind object;
  #L3769d4.  v8:= v6.`e.e.c.y.h.f` @type ^`e.e.c.y.h$e` @kind object;
  #L3769d8.  v2:= 1I;
  #L3769da.  if v1 != 0 then goto L376a42;
  #L3769de.  v3:= `@@e.e.c.y.h.i` @type ^`java.util.Comparator` @kind object;
  #L3769e2.  if v0 != v3 then goto L376a2e;
  #L3769e6.  v0:= instanceof @variable v7 @type ^`java.lang.Comparable` @kind boolean;
  #L3769ea.  if v0 == 0 then goto L3769f0;
  #L3769ee.  goto L376a2e;
  #L3769f0.  v8:= new `java.lang.ClassCastException`;
  #L3769f4.  v0:= new `java.lang.StringBuilder`;
  #L3769f8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3769fe.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L376a04.  v7:= temp @kind object;
  #L376a06.  call temp:= `getName`(v7) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L376a0c.  v7:= temp @kind object;
  #L376a0e.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L376a14.  v7:= " is not Comparable" @kind object;
  #L376a18.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L376a1e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L376a24.  v7:= temp @kind object;
  #L376a26.  call `<init>`(v8, v7) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L376a2c.  throw v8;
  #L376a2e.  v0:= new `e.e.c.y.h$e`;
  #L376a32.  v3:= v8.`e.e.c.y.h$e.f` @type ^`e.e.c.y.h$e` @kind object;
  #L376a36.  call `<init>`(v0, v1, v7, v8, v3) @signature `Le/e/c/y/h$e;.<init>:(Le/e/c/y/h$e;Ljava/lang/Object;Le/e/c/y/h$e;Le/e/c/y/h$e;)V` @kind direct;
  #L376a3c.  v6.`e.e.c.y.h.c` @type ^`e.e.c.y.h$e` := v0 @kind object;
  #L376a40.  goto L376a64;
  #L376a42.  v0:= new `e.e.c.y.h$e`;
  #L376a46.  v3:= v8.`e.e.c.y.h$e.f` @type ^`e.e.c.y.h$e` @kind object;
  #L376a4a.  call `<init>`(v0, v1, v7, v8, v3) @signature `Le/e/c/y/h$e;.<init>:(Le/e/c/y/h$e;Ljava/lang/Object;Le/e/c/y/h$e;Le/e/c/y/h$e;)V` @kind direct;
  #L376a50.  if v4 >= 0 then goto L376a5a;
  #L376a54.  v1.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` := v0 @kind object;
  #L376a58.  goto L376a5e;
  #L376a5a.  v1.`e.e.c.y.h$e.d` @type ^`e.e.c.y.h$e` := v0 @kind object;
  #L376a5e.  call `b`(v6, v1, v2) @signature `Le/e/c/y/h;.b:(Le/e/c/y/h$e;Z)V` @kind direct;
  #L376a64.  v7:= v6.`e.e.c.y.h.d` @type ^`int`;
  #L376a68.  v7:= v7 + v2 @kind int;
  #L376a6a.  v6.`e.e.c.y.h.d` @type ^`int` := v7;
  #L376a6e.  v7:= v6.`e.e.c.y.h.e` @type ^`int`;
  #L376a72.  v7:= v7 + v2 @kind int;
  #L376a74.  v6.`e.e.c.y.h.e` @type ^`int` := v7;
  #L376a78.  return v0 @kind object;
}
procedure `e.e.c.y.h$e` `a`(`e.e.c.y.h` v2 @kind this, `java.util.Map$Entry` v3 @kind object) @signature `Le/e/c/y/h;.a:(Ljava/util/Map$Entry;)Le/e/c/y/h$e;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L376a8c.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L376a92.  v0:= temp @kind object;
  #L376a94.  call temp:= `a`(v2, v0) @signature `Le/e/c/y/h;.a:(Ljava/lang/Object;)Le/e/c/y/h$e;` @kind virtual;
  #L376a9a.  v0:= temp @kind object;
  #L376a9c.  if v0 == 0 then goto L376abc;
  #L376aa0.  v1:= v0.`e.e.c.y.h$e.h` @type ^`java.lang.Object` @kind object;
  #L376aa4.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L376aaa.  v3:= temp @kind object;
  #L376aac.  call temp:= `a`(v2, v1, v3) @signature `Le/e/c/y/h;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind direct;
  #L376ab2.  v3:= temp;
  #L376ab4.  if v3 == 0 then goto L376abc;
  #L376ab8.  v3:= 1I;
  #L376aba.  goto L376abe;
  #L376abc.  v3:= 0I;
  #L376abe.  if v3 == 0 then goto L376ac4;
  #L376ac2.  goto L376ac6;
  #L376ac4.  v0:= 0I;
  #L376ac6.  return v0 @kind object;
}
procedure `void` `a`(`e.e.c.y.h` v5 @kind this, `e.e.c.y.h$e` v6 @kind object, `boolean` v7 ) @signature `Le/e/c/y/h;.a:(Le/e/c/y/h$e;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L376dd8.  if v7 == 0 then goto L376df0;
  #L376ddc.  v7:= v6.`e.e.c.y.h$e.f` @type ^`e.e.c.y.h$e` @kind object;
  #L376de0.  v0:= v6.`e.e.c.y.h$e.e` @type ^`e.e.c.y.h$e` @kind object;
  #L376de4.  v7.`e.e.c.y.h$e.e` @type ^`e.e.c.y.h$e` := v0 @kind object;
  #L376de8.  v0:= v6.`e.e.c.y.h$e.e` @type ^`e.e.c.y.h$e` @kind object;
  #L376dec.  v0.`e.e.c.y.h$e.f` @type ^`e.e.c.y.h$e` := v7 @kind object;
  #L376df0.  v7:= v6.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` @kind object;
  #L376df4.  v0:= v6.`e.e.c.y.h$e.d` @type ^`e.e.c.y.h$e` @kind object;
  #L376df8.  v1:= v6.`e.e.c.y.h$e.b` @type ^`e.e.c.y.h$e` @kind object;
  #L376dfc.  v2:= 0I;
  #L376dfe.  v3:= 0I;
  #L376e00.  if v7 == 0 then goto L376e78;
  #L376e04.  if v0 == 0 then goto L376e78;
  #L376e08.  v1:= v7.`e.e.c.y.h$e.i` @type ^`int`;
  #L376e0c.  v4:= v0.`e.e.c.y.h$e.i` @type ^`int`;
  #L376e10.  if v1 <= v4 then goto L376e1e;
  #L376e14.  call temp:= `b`(v7) @signature `Le/e/c/y/h$e;.b:()Le/e/c/y/h$e;` @kind virtual;
  #L376e1a.  v7:= temp @kind object;
  #L376e1c.  goto L376e26;
  #L376e1e.  call temp:= `a`(v0) @signature `Le/e/c/y/h$e;.a:()Le/e/c/y/h$e;` @kind virtual;
  #L376e24.  v7:= temp @kind object;
  #L376e26.  call `a`(v5, v7, v2) @signature `Le/e/c/y/h;.a:(Le/e/c/y/h$e;Z)V` @kind virtual;
  #L376e2c.  v0:= v6.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` @kind object;
  #L376e30.  if v0 == 0 then goto L376e46;
  #L376e34.  v1:= v0.`e.e.c.y.h$e.i` @type ^`int`;
  #L376e38.  v7.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` := v0 @kind object;
  #L376e3c.  v0.`e.e.c.y.h$e.b` @type ^`e.e.c.y.h$e` := v7 @kind object;
  #L376e40.  v6.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` := v3 @kind object;
  #L376e44.  goto L376e48;
  #L376e46.  v1:= 0I;
  #L376e48.  v0:= v6.`e.e.c.y.h$e.d` @type ^`e.e.c.y.h$e` @kind object;
  #L376e4c.  if v0 == 0 then goto L376e60;
  #L376e50.  v2:= v0.`e.e.c.y.h$e.i` @type ^`int`;
  #L376e54.  v7.`e.e.c.y.h$e.d` @type ^`e.e.c.y.h$e` := v0 @kind object;
  #L376e58.  v0.`e.e.c.y.h$e.b` @type ^`e.e.c.y.h$e` := v7 @kind object;
  #L376e5c.  v6.`e.e.c.y.h$e.d` @type ^`e.e.c.y.h$e` := v3 @kind object;
  #L376e60.  call temp:= `max`(v1, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L376e66.  v0:= temp;
  #L376e68.  v0:= v0 + 1;
  #L376e6c.  v7.`e.e.c.y.h$e.i` @type ^`int` := v0;
  #L376e70.  call `a`(v5, v6, v7) @signature `Le/e/c/y/h;.a:(Le/e/c/y/h$e;Le/e/c/y/h$e;)V` @kind direct;
  #L376e76.  return @kind void;
  #L376e78.  if v7 == 0 then goto L376e88;
  #L376e7c.  call `a`(v5, v6, v7) @signature `Le/e/c/y/h;.a:(Le/e/c/y/h$e;Le/e/c/y/h$e;)V` @kind direct;
  #L376e82.  v6.`e.e.c.y.h$e.c` @type ^`e.e.c.y.h$e` := v3 @kind object;
  #L376e86.  goto L376e9e;
  #L376e88.  if v0 == 0 then goto L376e98;
  #L376e8c.  call `a`(v5, v6, v0) @signature `Le/e/c/y/h;.a:(Le/e/c/y/h$e;Le/e/c/y/h$e;)V` @kind direct;
  #L376e92.  v6.`e.e.c.y.h$e.d` @type ^`e.e.c.y.h$e` := v3 @kind object;
  #L376e96.  goto L376e9e;
  #L376e98.  call `a`(v5, v6, v3) @signature `Le/e/c/y/h;.a:(Le/e/c/y/h$e;Le/e/c/y/h$e;)V` @kind direct;
  #L376e9e.  call `b`(v5, v1, v2) @signature `Le/e/c/y/h;.b:(Le/e/c/y/h$e;Z)V` @kind direct;
  #L376ea4.  v6:= v5.`e.e.c.y.h.d` @type ^`int`;
  #L376ea8.  v6:= v6 + -1;
  #L376eac.  v5.`e.e.c.y.h.d` @type ^`int` := v6;
  #L376eb0.  v6:= v5.`e.e.c.y.h.e` @type ^`int`;
  #L376eb4.  v6:= v6 + 1;
  #L376eb8.  v5.`e.e.c.y.h.e` @type ^`int` := v6;
  #L376ebc.  return @kind void;
}
procedure `e.e.c.y.h$e` `b`(`e.e.c.y.h` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/c/y/h;.b:(Ljava/lang/Object;)Le/e/c/y/h$e;` @AccessFlag  {
    temp;
    v0;

  #L376b0c.  call temp:= `a`(v1, v2) @signature `Le/e/c/y/h;.a:(Ljava/lang/Object;)Le/e/c/y/h$e;` @kind virtual;
  #L376b12.  v2:= temp @kind object;
  #L376b14.  if v2 == 0 then goto L376b20;
  #L376b18.  v0:= 1I;
  #L376b1a.  call `a`(v1, v2, v0) @signature `Le/e/c/y/h;.a:(Le/e/c/y/h$e;Z)V` @kind virtual;
  #L376b20.  return v2 @kind object;
}
procedure `void` `clear`(`e.e.c.y.h` v1 @kind this) @signature `Le/e/c/y/h;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L376cac.  v0:= 0I;
  #L376cae.  v1.`e.e.c.y.h.c` @type ^`e.e.c.y.h$e` := v0 @kind object;
  #L376cb2.  v0:= 0I;
  #L376cb4.  v1.`e.e.c.y.h.d` @type ^`int` := v0;
  #L376cb8.  v0:= v1.`e.e.c.y.h.e` @type ^`int`;
  #L376cbc.  v0:= v0 + 1;
  #L376cc0.  v1.`e.e.c.y.h.e` @type ^`int` := v0;
  #L376cc4.  v0:= v1.`e.e.c.y.h.f` @type ^`e.e.c.y.h$e` @kind object;
  #L376cc8.  v0.`e.e.c.y.h$e.f` @type ^`e.e.c.y.h$e` := v0 @kind object;
  #L376ccc.  v0.`e.e.c.y.h$e.e` @type ^`e.e.c.y.h$e` := v0 @kind object;
  #L376cd0.  return @kind void;
}
procedure `boolean` `containsKey`(`e.e.c.y.h` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/c/y/h;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L376920.  call temp:= `a`(v0, v1) @signature `Le/e/c/y/h;.a:(Ljava/lang/Object;)Le/e/c/y/h$e;` @kind virtual;
  #L376926.  v1:= temp @kind object;
  #L376928.  if v1 == 0 then goto L376930;
  #L37692c.  v1:= 1I;
  #L37692e.  goto L376932;
  #L376930.  v1:= 0I;
  #L376932.  return v1;
}
procedure `java.util.Set` `entrySet`(`e.e.c.y.h` v1 @kind this) @signature `Le/e/c/y/h;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L376bd4.  v0:= v1.`e.e.c.y.h.g` @type ^`e.e.c.y.h$b` @kind object;
  #L376bd8.  if v0 == 0 then goto L376bde;
  #L376bdc.  goto L376bec;
  #L376bde.  v0:= new `e.e.c.y.h$b`;
  #L376be2.  call `<init>`(v0, v1) @signature `Le/e/c/y/h$b;.<init>:(Le/e/c/y/h;)V` @kind direct;
  #L376be8.  v1.`e.e.c.y.h.g` @type ^`e.e.c.y.h$b` := v0 @kind object;
  #L376bec.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`e.e.c.y.h` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/c/y/h;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L376b4c.  call temp:= `a`(v0, v1) @signature `Le/e/c/y/h;.a:(Ljava/lang/Object;)Le/e/c/y/h$e;` @kind virtual;
  #L376b52.  v1:= temp @kind object;
  #L376b54.  if v1 == 0 then goto L376b5e;
  #L376b58.  v1:= v1.`e.e.c.y.h$e.h` @type ^`java.lang.Object` @kind object;
  #L376b5c.  goto L376b60;
  #L376b5e.  v1:= 0I;
  #L376b60.  return v1 @kind object;
}
procedure `java.util.Set` `keySet`(`e.e.c.y.h` v1 @kind this) @signature `Le/e/c/y/h;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L376c00.  v0:= v1.`e.e.c.y.h.h` @type ^`e.e.c.y.h$c` @kind object;
  #L376c04.  if v0 == 0 then goto L376c0a;
  #L376c08.  goto L376c18;
  #L376c0a.  v0:= new `e.e.c.y.h$c`;
  #L376c0e.  call `<init>`(v0, v1) @signature `Le/e/c/y/h$c;.<init>:(Le/e/c/y/h;)V` @kind direct;
  #L376c14.  v1.`e.e.c.y.h.h` @type ^`e.e.c.y.h$c` := v0 @kind object;
  #L376c18.  return v0 @kind object;
}
procedure `java.lang.Object` `put`(`e.e.c.y.h` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Le/e/c/y/h;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L376b74.  if v2 == 0 then goto L376b8c;
  #L376b78.  v0:= 1I;
  #L376b7a.  call temp:= `a`(v1, v2, v0) @signature `Le/e/c/y/h;.a:(Ljava/lang/Object;Z)Le/e/c/y/h$e;` @kind virtual;
  #L376b80.  v2:= temp @kind object;
  #L376b82.  v0:= v2.`e.e.c.y.h$e.h` @type ^`java.lang.Object` @kind object;
  #L376b86.  v2.`e.e.c.y.h$e.h` @type ^`java.lang.Object` := v3 @kind object;
  #L376b8a.  return v0 @kind object;
  #L376b8c.  v2:= new `java.lang.NullPointerException`;
  #L376b90.  v3:= "key == null" @kind object;
  #L376b94.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L376b9a.  throw v2;
}
procedure `java.lang.Object` `remove`(`e.e.c.y.h` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Le/e/c/y/h;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L376bac.  call temp:= `b`(v0, v1) @signature `Le/e/c/y/h;.b:(Ljava/lang/Object;)Le/e/c/y/h$e;` @kind virtual;
  #L376bb2.  v1:= temp @kind object;
  #L376bb4.  if v1 == 0 then goto L376bbe;
  #L376bb8.  v1:= v1.`e.e.c.y.h$e.h` @type ^`java.lang.Object` @kind object;
  #L376bbc.  goto L376bc0;
  #L376bbe.  v1:= 0I;
  #L376bc0.  return v1 @kind object;
}
procedure `int` `size`(`e.e.c.y.h` v1 @kind this) @signature `Le/e/c/y/h;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L376b34.  v0:= v1.`e.e.c.y.h.d` @type ^`int`;
  #L376b38.  return v0;
}
