record `e.e.c.y.h$c` @kind class @AccessFlag FINAL extends `java.util.AbstractSet` @kind class {
  `e.e.c.y.h` `e.e.c.y.h$c.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.c.y.h$c` v0 @kind this, `e.e.c.y.h` v1 @kind object) @signature `Le/e/c/y/h$c;.<init>:(Le/e/c/y/h;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L376600.  v0.`e.e.c.y.h$c.b` @type ^`e.e.c.y.h` := v1 @kind object;
  #L376604.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L37660a.  return @kind void;
}
procedure `void` `clear`(`e.e.c.y.h$c` v1 @kind this) @signature `Le/e/c/y/h$c;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37661c.  v0:= v1.`e.e.c.y.h$c.b` @type ^`e.e.c.y.h` @kind object;
  #L376620.  call `clear`(v0) @signature `Le/e/c/y/h;.clear:()V` @kind virtual;
  #L376626.  return @kind void;
}
procedure `boolean` `contains`(`e.e.c.y.h$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/c/y/h$c;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L376580.  v0:= v1.`e.e.c.y.h$c.b` @type ^`e.e.c.y.h` @kind object;
  #L376584.  call temp:= `containsKey`(v0, v2) @signature `Le/e/c/y/h;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L37658a.  v2:= temp;
  #L37658c.  return v2;
}
procedure `java.util.Iterator` `iterator`(`e.e.c.y.h$c` v1 @kind this) @signature `Le/e/c/y/h$c;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3765e4.  v0:= new `e.e.c.y.h$c$a`;
  #L3765e8.  call `<init>`(v0, v1) @signature `Le/e/c/y/h$c$a;.<init>:(Le/e/c/y/h$c;)V` @kind direct;
  #L3765ee.  return v0 @kind object;
}
procedure `boolean` `remove`(`e.e.c.y.h$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/c/y/h$c;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3765a0.  v0:= v1.`e.e.c.y.h$c.b` @type ^`e.e.c.y.h` @kind object;
  #L3765a4.  call temp:= `b`(v0, v2) @signature `Le/e/c/y/h;.b:(Ljava/lang/Object;)Le/e/c/y/h$e;` @kind virtual;
  #L3765aa.  v2:= temp @kind object;
  #L3765ac.  if v2 == 0 then goto L3765b4;
  #L3765b0.  v2:= 1I;
  #L3765b2.  goto L3765b6;
  #L3765b4.  v2:= 0I;
  #L3765b6.  return v2;
}
procedure `int` `size`(`e.e.c.y.h$c` v1 @kind this) @signature `Le/e/c/y/h$c;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3765c8.  v0:= v1.`e.e.c.y.h$c.b` @type ^`e.e.c.y.h` @kind object;
  #L3765cc.  v0:= v0.`e.e.c.y.h.d` @type ^`int`;
  #L3765d0.  return v0;
}
