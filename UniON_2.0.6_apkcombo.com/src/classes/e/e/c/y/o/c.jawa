record `e.e.c.y.o.c` @kind class @AccessFlag FINAL extends `e.e.c.y.o.b` @kind class {
  `java.lang.Object` `e.e.c.y.o.c.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Field` `e.e.c.y.o.c.c` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.Class` `@@e.e.c.y.o.c.d` @AccessFlag PRIVATE_STATIC;
procedure `void` `<init>`(`e.e.c.y.o.c` v1 @kind this) @signature `Le/e/c/y/o/c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L37cf80.  call `<init>`(v1) @signature `Le/e/c/y/o/b;.<init>:()V` @kind direct;
  #L37cf86.  call temp:= `c`() @signature `Le/e/c/y/o/c;.c:()Ljava/lang/Object;` @kind static;
  #L37cf8c.  v0:= temp @kind object;
  #L37cf8e.  v1.`e.e.c.y.o.c.b` @type ^`java.lang.Object` := v0 @kind object;
  #L37cf92.  call temp:= `b`() @signature `Le/e/c/y/o/c;.b:()Ljava/lang/reflect/Field;` @kind static;
  #L37cf98.  v0:= temp @kind object;
  #L37cf9a.  v1.`e.e.c.y.o.c.c` @type ^`java.lang.reflect.Field` := v0 @kind object;
  #L37cf9e.  return @kind void;
}
procedure `java.lang.reflect.Field` `b`() @signature `Le/e/c/y/o/c;.b:()Ljava/lang/reflect/Field;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L37cf48.  v0:= constclass @type ^`java.lang.reflect.AccessibleObject` @kind object;
  #L37cf4c.  v1:= "override" @kind object;
  #L37cf50.  call temp:= `getDeclaredField`(v0, v1) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L37cf56.  v0:= temp @kind object;
  #L37cf58.  return v0 @kind object;
  #L37cf5a.  v0:= 0I;
  #L37cf5c.  return v0 @kind object;
  catch `java.lang.NoSuchFieldException` @[L37cf48..L37cf58] goto L37cf5a;
}
procedure `java.lang.Object` `c`() @signature `Le/e/c/y/o/c;.c:()Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L37cef0.  v0:= "sun.misc.Unsafe" @kind object;
  #L37cef4.  v1:= 0I;
  #L37cef6.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L37cefc.  v0:= temp @kind object;
  #L37cefe.  `@@e.e.c.y.o.c.d` @type ^`java.lang.Class` := v0 @kind object;
  #L37cf02.  v0:= `@@e.e.c.y.o.c.d` @type ^`java.lang.Class` @kind object;
  #L37cf06.  v2:= "theUnsafe" @kind object;
  #L37cf0a.  call temp:= `getDeclaredField`(v0, v2) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L37cf10.  v0:= temp @kind object;
  #L37cf12.  v2:= 1I;
  #L37cf14.  call `setAccessible`(v0, v2) @signature `Ljava/lang/reflect/Field;.setAccessible:(Z)V` @kind virtual;
  #L37cf1a.  call temp:= `get`(v0, v1) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L37cf20.  v0:= temp @kind object;
  #L37cf22.  return v0 @kind object;
  #L37cf24.  return v1 @kind object;
  catch `java.lang.Exception` @[L37cef6..L37cf22] goto L37cf24;
}
procedure `void` `a`(`e.e.c.y.o.c` v4 @kind this, `java.lang.reflect.AccessibleObject` v5 @kind object) @signature `Le/e/c/y/o/c;.a:(Ljava/lang/reflect/AccessibleObject;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37cfb0.  call temp:= `b`(v4, v5) @signature `Le/e/c/y/o/c;.b:(Ljava/lang/reflect/AccessibleObject;)Z` @kind virtual;
  #L37cfb6.  v0:= temp;
  #L37cfb8.  if v0 != 0 then goto L37d000;
  #L37cfbc.  v0:= 1I;
  #L37cfbe.  call `setAccessible`(v5, v0) @signature `Ljava/lang/reflect/AccessibleObject;.setAccessible:(Z)V` @kind virtual;
  #L37cfc4.  goto L37d000;
  #L37cfc6.  v0:= Exception @type ^`java.lang.SecurityException` @kind object;
  #L37cfc8.  v1:= new `e.e.c.m`;
  #L37cfcc.  v2:= new `java.lang.StringBuilder`;
  #L37cfd0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37cfd6.  v3:= "Gson couldn't modify fields for " @kind object;
  #L37cfda.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37cfe0.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37cfe6.  v5:= "\nand sun.misc.Unsafe not found.\nEither write a custom type adapter, or make fields accessible, or include sun.misc.Unsafe." @kind object;
  #L37cfea.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37cff0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37cff6.  v5:= temp @kind object;
  #L37cff8.  call `<init>`(v1, v5, v0) @signature `Le/e/c/m;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L37cffe.  throw v1;
  #L37d000.  return @kind void;
  catch `java.lang.SecurityException` @[L37cfbe..L37cfc4] goto L37cfc6;
}
procedure `boolean` `b`(`e.e.c.y.o.c` v10 @kind this, `java.lang.reflect.AccessibleObject` v11 @kind object) @signature `Le/e/c/y/o/c;.b:(Ljava/lang/reflect/AccessibleObject;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L37ce1c.  v0:= v10.`e.e.c.y.o.c.b` @type ^`java.lang.Object` @kind object;
  #L37ce20.  v1:= 0I;
  #L37ce22.  if v0 == 0 then goto L37cecc;
  #L37ce26.  v0:= v10.`e.e.c.y.o.c.c` @type ^`java.lang.reflect.Field` @kind object;
  #L37ce2a.  if v0 == 0 then goto L37cecc;
  #L37ce2e.  v0:= `@@e.e.c.y.o.c.d` @type ^`java.lang.Class` @kind object;
  #L37ce32.  v2:= "objectFieldOffset" @kind object;
  #L37ce36.  v3:= 1I;
  #L37ce38.  v4:= new `java.lang.Class`[v3];
  #L37ce3c.  v5:= constclass @type ^`java.lang.reflect.Field` @kind object;
  #L37ce40.  v4[v1]:= v5 @kind object;
  #L37ce44.  call temp:= `getMethod`(v0, v2, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L37ce4a.  v0:= temp @kind object;
  #L37ce4c.  v2:= v10.`e.e.c.y.o.c.b` @type ^`java.lang.Object` @kind object;
  #L37ce50.  v4:= new `java.lang.Object`[v3];
  #L37ce54.  v5:= v10.`e.e.c.y.o.c.c` @type ^`java.lang.reflect.Field` @kind object;
  #L37ce58.  v4[v1]:= v5 @kind object;
  #L37ce5c.  call temp:= `invoke`(v0, v2, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L37ce62.  v0:= temp @kind object;
  #L37ce64.  v0:= (`java.lang.Long`) v0 @kind object;
  #L37ce68.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L37ce6e.  v4:= temp @kind wide;
  #L37ce70.  v0:= `@@e.e.c.y.o.c.d` @type ^`java.lang.Class` @kind object;
  #L37ce74.  v2:= "putBoolean" @kind object;
  #L37ce78.  v6:= 3I;
  #L37ce7a.  v7:= new `java.lang.Class`[v6];
  #L37ce7e.  v8:= constclass @type ^`java.lang.Object` @kind object;
  #L37ce82.  v7[v1]:= v8 @kind object;
  #L37ce86.  v8:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L37ce8a.  v7[v3]:= v8 @kind object;
  #L37ce8e.  v8:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L37ce92.  v9:= 2I;
  #L37ce94.  v7[v9]:= v8 @kind object;
  #L37ce98.  call temp:= `getMethod`(v0, v2, v7) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L37ce9e.  v0:= temp @kind object;
  #L37cea0.  v2:= v10.`e.e.c.y.o.c.b` @type ^`java.lang.Object` @kind object;
  #L37cea4.  v6:= new `java.lang.Object`[v6];
  #L37cea8.  v6[v1]:= v11 @kind object;
  #L37ceac.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L37ceb2.  v11:= temp @kind object;
  #L37ceb4.  v6[v3]:= v11 @kind object;
  #L37ceb8.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L37cebe.  v11:= temp @kind object;
  #L37cec0.  v6[v9]:= v11 @kind object;
  #L37cec4.  call temp:= `invoke`(v0, v2, v6) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L37ceca.  return v3;
  #L37cecc.  return v1;
  catch `java.lang.Exception` @[L37ce2e..L37ceca] goto L37cecc;
}
