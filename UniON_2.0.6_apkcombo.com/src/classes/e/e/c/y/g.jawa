record `e.e.c.y.g` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Number` @kind class {
  `java.lang.String` `e.e.c.y.g.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e.e.c.y.g` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Le/e/c/y/g;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L376398.  call `<init>`(v0) @signature `Ljava/lang/Number;.<init>:()V` @kind direct;
  #L37639e.  v0.`e.e.c.y.g.b` @type ^`java.lang.String` := v1 @kind object;
  #L3763a2.  return @kind void;
}
procedure `double` `doubleValue`(`e.e.c.y.g` v2 @kind this) @signature `Le/e/c/y/g;.doubleValue:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L376274.  v0:= v2.`e.e.c.y.g.b` @type ^`java.lang.String` @kind object;
  #L376278.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L37627e.  v0:= temp @kind wide;
  #L376280.  return v0 @kind wide;
}
procedure `boolean` `equals`(`e.e.c.y.g` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/c/y/g;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37622c.  v0:= 1I;
  #L37622e.  if v3 != v4 then goto L376234;
  #L376232.  return v0;
  #L376234.  v1:= instanceof @variable v4 @type ^`e.e.c.y.g` @kind boolean;
  #L376238.  v2:= 0I;
  #L37623a.  if v1 == 0 then goto L376260;
  #L37623e.  v4:= (`e.e.c.y.g`) v4 @kind object;
  #L376242.  v1:= v3.`e.e.c.y.g.b` @type ^`java.lang.String` @kind object;
  #L376246.  v4:= v4.`e.e.c.y.g.b` @type ^`java.lang.String` @kind object;
  #L37624a.  if v1 == v4 then goto L37625e;
  #L37624e.  call temp:= `equals`(v1, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L376254.  v4:= temp;
  #L376256.  if v4 == 0 then goto L37625c;
  #L37625a.  goto L37625e;
  #L37625c.  v0:= 0I;
  #L37625e.  return v0;
  #L376260.  return v2;
}
procedure `float` `floatValue`(`e.e.c.y.g` v1 @kind this) @signature `Le/e/c/y/g;.floatValue:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L376294.  v0:= v1.`e.e.c.y.g.b` @type ^`java.lang.String` @kind object;
  #L376298.  call temp:= `parseFloat`(v0) @signature `Ljava/lang/Float;.parseFloat:(Ljava/lang/String;)F` @kind static;
  #L37629e.  v0:= temp;
  #L3762a0.  return v0;
}
procedure `int` `hashCode`(`e.e.c.y.g` v1 @kind this) @signature `Le/e/c/y/g;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3762b4.  v0:= v1.`e.e.c.y.g.b` @type ^`java.lang.String` @kind object;
  #L3762b8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L3762be.  v0:= temp;
  #L3762c0.  return v0;
}
procedure `int` `intValue`(`e.e.c.y.g` v2 @kind this) @signature `Le/e/c/y/g;.intValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3762d4.  v0:= v2.`e.e.c.y.g.b` @type ^`java.lang.String` @kind object;
  #L3762d8.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L3762de.  v0:= temp;
  #L3762e0.  return v0;
  #L3762e2.  v0:= v2.`e.e.c.y.g.b` @type ^`java.lang.String` @kind object;
  #L3762e6.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L3762ec.  v0:= temp @kind wide;
  #L3762ee.  v1:= (`int`) v0 @kind l2i;
  #L3762f0.  return v1;
  #L3762f2.  v0:= new `java.math.BigDecimal`;
  #L3762f6.  v1:= v2.`e.e.c.y.g.b` @type ^`java.lang.String` @kind object;
  #L3762fa.  call `<init>`(v0, v1) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L376300.  call temp:= `intValue`(v0) @signature `Ljava/math/BigDecimal;.intValue:()I` @kind virtual;
  #L376306.  v0:= temp;
  #L376308.  return v0;
  catch `java.lang.NumberFormatException` @[L3762d4..L3762e0] goto L3762e2;
  catch `java.lang.NumberFormatException` @[L3762e2..L3762ee] goto L3762f2;
}
procedure `long` `longValue`(`e.e.c.y.g` v2 @kind this) @signature `Le/e/c/y/g;.longValue:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L376350.  v0:= v2.`e.e.c.y.g.b` @type ^`java.lang.String` @kind object;
  #L376354.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L37635a.  v0:= temp @kind wide;
  #L37635c.  return v0 @kind wide;
  #L37635e.  v0:= new `java.math.BigDecimal`;
  #L376362.  v1:= v2.`e.e.c.y.g.b` @type ^`java.lang.String` @kind object;
  #L376366.  call `<init>`(v0, v1) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37636c.  call temp:= `longValue`(v0) @signature `Ljava/math/BigDecimal;.longValue:()J` @kind virtual;
  #L376372.  v0:= temp @kind wide;
  #L376374.  return v0 @kind wide;
  catch `java.lang.NumberFormatException` @[L376350..L37635c] goto L37635e;
}
procedure `java.lang.String` `toString`(`e.e.c.y.g` v1 @kind this) @signature `Le/e/c/y/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L376338.  v0:= v1.`e.e.c.y.g.b` @type ^`java.lang.String` @kind object;
  #L37633c.  return v0 @kind object;
}
