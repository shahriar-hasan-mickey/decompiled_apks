record `e.e.c.y.h$d` @kind class @AccessFlag ABSTRACT extends `java.util.Iterator` @kind interface {
  `e.e.c.y.h$e` `e.e.c.y.h$d.b` @AccessFlag ;
  `e.e.c.y.h$e` `e.e.c.y.h$d.c` @AccessFlag ;
  `int` `e.e.c.y.h$d.d` @AccessFlag ;
  `e.e.c.y.h` `e.e.c.y.h$d.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.c.y.h$d` v1 @kind this, `e.e.c.y.h` v2 @kind object) @signature `Le/e/c/y/h$d;.<init>:(Le/e/c/y/h;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3766b4.  v1.`e.e.c.y.h$d.e` @type ^`e.e.c.y.h` := v2 @kind object;
  #L3766b8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3766be.  v2:= v1.`e.e.c.y.h$d.e` @type ^`e.e.c.y.h` @kind object;
  #L3766c2.  v0:= v2.`e.e.c.y.h.f` @type ^`e.e.c.y.h$e` @kind object;
  #L3766c6.  v0:= v0.`e.e.c.y.h$e.e` @type ^`e.e.c.y.h$e` @kind object;
  #L3766ca.  v1.`e.e.c.y.h$d.b` @type ^`e.e.c.y.h$e` := v0 @kind object;
  #L3766ce.  v0:= 0I;
  #L3766d0.  v1.`e.e.c.y.h$d.c` @type ^`e.e.c.y.h$e` := v0 @kind object;
  #L3766d4.  v2:= v2.`e.e.c.y.h.e` @type ^`int`;
  #L3766d8.  v1.`e.e.c.y.h$d.d` @type ^`int` := v2;
  #L3766dc.  return @kind void;
}
procedure `e.e.c.y.h$e` `a`(`e.e.c.y.h$d` v3 @kind this) @signature `Le/e/c/y/h$d;.a:()Le/e/c/y/h$e;` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L376660.  v0:= v3.`e.e.c.y.h$d.b` @type ^`e.e.c.y.h$e` @kind object;
  #L376664.  v1:= v3.`e.e.c.y.h$d.e` @type ^`e.e.c.y.h` @kind object;
  #L376668.  v2:= v1.`e.e.c.y.h.f` @type ^`e.e.c.y.h$e` @kind object;
  #L37666c.  if v0 == v2 then goto L376696;
  #L376670.  v1:= v1.`e.e.c.y.h.e` @type ^`int`;
  #L376674.  v2:= v3.`e.e.c.y.h$d.d` @type ^`int`;
  #L376678.  if v1 != v2 then goto L37668a;
  #L37667c.  v1:= v0.`e.e.c.y.h$e.e` @type ^`e.e.c.y.h$e` @kind object;
  #L376680.  v3.`e.e.c.y.h$d.b` @type ^`e.e.c.y.h$e` := v1 @kind object;
  #L376684.  v3.`e.e.c.y.h$d.c` @type ^`e.e.c.y.h$e` := v0 @kind object;
  #L376688.  return v0 @kind object;
  #L37668a.  v0:= new `java.util.ConcurrentModificationException`;
  #L37668e.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L376694.  throw v0;
  #L376696.  v0:= new `java.util.NoSuchElementException`;
  #L37669a.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L3766a0.  throw v0;
}
procedure `boolean` `hasNext`(`e.e.c.y.h$d` v2 @kind this) @signature `Le/e/c/y/h$d;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L376638.  v0:= v2.`e.e.c.y.h$d.b` @type ^`e.e.c.y.h$e` @kind object;
  #L37663c.  v1:= v2.`e.e.c.y.h$d.e` @type ^`e.e.c.y.h` @kind object;
  #L376640.  v1:= v1.`e.e.c.y.h.f` @type ^`e.e.c.y.h$e` @kind object;
  #L376644.  if v0 == v1 then goto L37664c;
  #L376648.  v0:= 1I;
  #L37664a.  goto L37664e;
  #L37664c.  v0:= 0I;
  #L37664e.  return v0;
}
procedure `void` `remove`(`e.e.c.y.h$d` v3 @kind this) @signature `Le/e/c/y/h$d;.remove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3766f0.  v0:= v3.`e.e.c.y.h$d.c` @type ^`e.e.c.y.h$e` @kind object;
  #L3766f4.  if v0 == 0 then goto L376718;
  #L3766f8.  v1:= v3.`e.e.c.y.h$d.e` @type ^`e.e.c.y.h` @kind object;
  #L3766fc.  v2:= 1I;
  #L3766fe.  call `a`(v1, v0, v2) @signature `Le/e/c/y/h;.a:(Le/e/c/y/h$e;Z)V` @kind virtual;
  #L376704.  v0:= 0I;
  #L376706.  v3.`e.e.c.y.h$d.c` @type ^`e.e.c.y.h$e` := v0 @kind object;
  #L37670a.  v0:= v3.`e.e.c.y.h$d.e` @type ^`e.e.c.y.h` @kind object;
  #L37670e.  v0:= v0.`e.e.c.y.h.e` @type ^`int`;
  #L376712.  v3.`e.e.c.y.h$d.d` @type ^`int` := v0;
  #L376716.  return @kind void;
  #L376718.  v0:= new `java.lang.IllegalStateException`;
  #L37671c.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L376722.  throw v0;
}
