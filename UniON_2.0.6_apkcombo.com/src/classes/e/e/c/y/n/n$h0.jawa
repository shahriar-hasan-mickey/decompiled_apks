record `e.e.c.y.n.n$h0` @kind class @AccessFlag  extends `e.e.c.v` @kind class {
}
procedure `void` `<init>`(`e.e.c.y.n.n$h0` v0 @kind this) @signature `Le/e/c/y/n/n$h0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L37c0ec.  call `<init>`(v0) @signature `Le/e/c/v;.<init>:()V` @kind direct;
  #L37c0f2.  return @kind void;
}
procedure `java.lang.Object` `a`(`e.e.c.y.n.n$h0` v0 @kind this, `e.e.c.a0.a` v1 @kind object) @signature `Le/e/c/y/n/n$h0;.a:(Le/e/c/a0/a;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L37c08c.  call temp:= `a`(v0, v1) @signature `Le/e/c/y/n/n$h0;.a:(Le/e/c/a0/a;)Ljava/util/concurrent/atomic/AtomicInteger;` @kind virtual;
  #L37c092.  v1:= temp @kind object;
  #L37c094.  return v1 @kind object;
}
procedure `java.util.concurrent.atomic.AtomicInteger` `a`(`e.e.c.y.n.n$h0` v1 @kind this, `e.e.c.a0.a` v2 @kind object) @signature `Le/e/c/y/n/n$h0;.a:(Le/e/c/a0/a;)Ljava/util/concurrent/atomic/AtomicInteger;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37c0a8.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L37c0ac.  call temp:= `v`(v2) @signature `Le/e/c/a0/a;.v:()I` @kind virtual;
  #L37c0b2.  v2:= temp;
  #L37c0b4.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L37c0ba.  return v0 @kind object;
  #L37c0bc.  v2:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L37c0be.  v0:= new `e.e.c.t`;
  #L37c0c2.  call `<init>`(v0, v2) @signature `Le/e/c/t;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L37c0c8.  throw v0;
  catch `java.lang.NumberFormatException` @[L37c0a8..L37c0ba] goto L37c0bc;
}
procedure `void` `a`(`e.e.c.y.n.n$h0` v0 @kind this, `e.e.c.a0.c` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Le/e/c/y/n/n$h0;.a:(Le/e/c/a0/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L37c104.  v2:= (`java.util.concurrent.atomic.AtomicInteger`) v2 @kind object;
  #L37c108.  call `a`(v0, v1, v2) @signature `Le/e/c/y/n/n$h0;.a:(Le/e/c/a0/c;Ljava/util/concurrent/atomic/AtomicInteger;)V` @kind virtual;
  #L37c10e.  return @kind void;
}
procedure `void` `a`(`e.e.c.y.n.n$h0` v2 @kind this, `e.e.c.a0.c` v3 @kind object, `java.util.concurrent.atomic.AtomicInteger` v4 @kind object) @signature `Le/e/c/y/n/n$h0;.a:(Le/e/c/a0/c;Ljava/util/concurrent/atomic/AtomicInteger;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37c120.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L37c126.  v4:= temp;
  #L37c128.  v0:= (`long`) v4 @kind i2l;
  #L37c12a.  call temp:= `f`(v3, v0) @signature `Le/e/c/a0/c;.f:(J)Le/e/c/a0/c;` @kind virtual;
  #L37c130.  return @kind void;
}
