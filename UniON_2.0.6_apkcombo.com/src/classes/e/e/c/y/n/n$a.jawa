record `e.e.c.y.n.n$a` @kind class @AccessFlag  extends `e.e.c.v` @kind class {
}
procedure `void` `<init>`(`e.e.c.y.n.n$a` v0 @kind this) @signature `Le/e/c/y/n/n$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L37a180.  call `<init>`(v0) @signature `Le/e/c/v;.<init>:()V` @kind direct;
  #L37a186.  return @kind void;
}
procedure `java.lang.Object` `a`(`e.e.c.y.n.n$a` v0 @kind this, `e.e.c.a0.a` v1 @kind object) @signature `Le/e/c/y/n/n$a;.a:(Le/e/c/a0/a;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L37a0c0.  call temp:= `a`(v0, v1) @signature `Le/e/c/y/n/n$a;.a:(Le/e/c/a0/a;)Ljava/util/concurrent/atomic/AtomicIntegerArray;` @kind virtual;
  #L37a0c6.  v1:= temp @kind object;
  #L37a0c8.  return v1 @kind object;
}
procedure `java.util.concurrent.atomic.AtomicIntegerArray` `a`(`e.e.c.y.n.n$a` v4 @kind this, `e.e.c.a0.a` v5 @kind object) @signature `Le/e/c/y/n/n$a;.a:(Le/e/c/a0/a;)Ljava/util/concurrent/atomic/AtomicIntegerArray;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37a0dc.  v0:= new `java.util.ArrayList`;
  #L37a0e0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L37a0e6.  call `k`(v5) @signature `Le/e/c/a0/a;.k:()V` @kind virtual;
  #L37a0ec.  call temp:= `q`(v5) @signature `Le/e/c/a0/a;.q:()Z` @kind virtual;
  #L37a0f2.  v1:= temp;
  #L37a0f4.  if v1 == 0 then goto L37a11e;
  #L37a0f8.  call temp:= `v`(v5) @signature `Le/e/c/a0/a;.v:()I` @kind virtual;
  #L37a0fe.  v1:= temp;
  #L37a100.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L37a106.  v1:= temp @kind object;
  #L37a108.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L37a10e.  goto L37a0ec;
  #L37a110.  v5:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L37a112.  v0:= new `e.e.c.t`;
  #L37a116.  call `<init>`(v0, v5) @signature `Le/e/c/t;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L37a11c.  throw v0;
  #L37a11e.  call `n`(v5) @signature `Le/e/c/a0/a;.n:()V` @kind virtual;
  #L37a124.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L37a12a.  v5:= temp;
  #L37a12c.  v1:= new `java.util.concurrent.atomic.AtomicIntegerArray`;
  #L37a130.  call `<init>`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicIntegerArray;.<init>:(I)V` @kind direct;
  #L37a136.  v2:= 0I;
  #L37a138.  if v2 >= v5 then goto L37a15c;
  #L37a13c.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L37a142.  v3:= temp @kind object;
  #L37a144.  v3:= (`java.lang.Integer`) v3 @kind object;
  #L37a148.  call temp:= `intValue`(v3) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L37a14e.  v3:= temp;
  #L37a150.  call `set`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerArray;.set:(II)V` @kind virtual;
  #L37a156.  v2:= v2 + 1;
  #L37a15a.  goto L37a138;
  #L37a15c.  return v1 @kind object;
  catch `java.lang.NumberFormatException` @[L37a0f8..L37a10e] goto L37a110;
}
procedure `void` `a`(`e.e.c.y.n.n$a` v0 @kind this, `e.e.c.a0.c` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Le/e/c/y/n/n$a;.a:(Le/e/c/a0/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L37a198.  v2:= (`java.util.concurrent.atomic.AtomicIntegerArray`) v2 @kind object;
  #L37a19c.  call `a`(v0, v1, v2) @signature `Le/e/c/y/n/n$a;.a:(Le/e/c/a0/c;Ljava/util/concurrent/atomic/AtomicIntegerArray;)V` @kind virtual;
  #L37a1a2.  return @kind void;
}
procedure `void` `a`(`e.e.c.y.n.n$a` v4 @kind this, `e.e.c.a0.c` v5 @kind object, `java.util.concurrent.atomic.AtomicIntegerArray` v6 @kind object) @signature `Le/e/c/y/n/n$a;.a:(Le/e/c/a0/c;Ljava/util/concurrent/atomic/AtomicIntegerArray;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37a1b4.  call temp:= `k`(v5) @signature `Le/e/c/a0/c;.k:()Le/e/c/a0/c;` @kind virtual;
  #L37a1ba.  call temp:= `length`(v6) @signature `Ljava/util/concurrent/atomic/AtomicIntegerArray;.length:()I` @kind virtual;
  #L37a1c0.  v0:= temp;
  #L37a1c2.  v1:= 0I;
  #L37a1c4.  if v1 >= v0 then goto L37a1de;
  #L37a1c8.  call temp:= `get`(v6, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerArray;.get:(I)I` @kind virtual;
  #L37a1ce.  v2:= temp;
  #L37a1d0.  v2:= (`long`) v2 @kind i2l;
  #L37a1d2.  call temp:= `f`(v5, v2) @signature `Le/e/c/a0/c;.f:(J)Le/e/c/a0/c;` @kind virtual;
  #L37a1d8.  v1:= v1 + 1;
  #L37a1dc.  goto L37a1c4;
  #L37a1de.  call temp:= `m`(v5) @signature `Le/e/c/a0/c;.m:()Le/e/c/a0/c;` @kind virtual;
  #L37a1e4.  return @kind void;
}
