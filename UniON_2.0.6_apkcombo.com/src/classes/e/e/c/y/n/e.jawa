record `e.e.c.y.n.e` @kind class @AccessFlag PUBLIC_FINAL extends `e.e.c.a0.a` @kind class {
  `java.lang.Object`[] `e.e.c.y.n.e.r` @AccessFlag PRIVATE;
  `int` `e.e.c.y.n.e.s` @AccessFlag PRIVATE;
  `java.lang.String`[] `e.e.c.y.n.e.t` @AccessFlag PRIVATE;
  `int`[] `e.e.c.y.n.e.u` @AccessFlag PRIVATE;
}
global `java.io.Reader` `@@e.e.c.y.n.e.v` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object` `@@e.e.c.y.n.e.w` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/c/y/n/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3784c4.  v0:= new `e.e.c.y.n.e$a`;
  #L3784c8.  call `<init>`(v0) @signature `Le/e/c/y/n/e$a;.<init>:()V` @kind direct;
  #L3784ce.  `@@e.e.c.y.n.e.v` @type ^`java.io.Reader` := v0 @kind object;
  #L3784d2.  v0:= new `java.lang.Object`;
  #L3784d6.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3784dc.  `@@e.e.c.y.n.e.w` @type ^`java.lang.Object` := v0 @kind object;
  #L3784e0.  return @kind void;
}
procedure `void` `<init>`(`e.e.c.y.n.e` v2 @kind this, `e.e.c.l` v3 @kind object) @signature `Le/e/c/y/n/e;.<init>:(Le/e/c/l;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3784f4.  v0:= `@@e.e.c.y.n.e.v` @type ^`java.io.Reader` @kind object;
  #L3784f8.  call `<init>`(v2, v0) @signature `Le/e/c/a0/a;.<init>:(Ljava/io/Reader;)V` @kind direct;
  #L3784fe.  v0:= 32I;
  #L378502.  v1:= new `java.lang.Object`[v0];
  #L378506.  v2.`e.e.c.y.n.e.r` @type ^`java.lang.Object`[] := v1 @kind object;
  #L37850a.  v1:= 0I;
  #L37850c.  v2.`e.e.c.y.n.e.s` @type ^`int` := v1;
  #L378510.  v1:= new `java.lang.String`[v0];
  #L378514.  v2.`e.e.c.y.n.e.t` @type ^`java.lang.String`[] := v1 @kind object;
  #L378518.  v0:= new `int`[v0];
  #L37851c.  v2.`e.e.c.y.n.e.u` @type ^`int`[] := v0 @kind object;
  #L378520.  call `a`(v2, v3) @signature `Le/e/c/y/n/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L378526.  return @kind void;
}
procedure `java.lang.Object` `D`(`e.e.c.y.n.e` v2 @kind this) @signature `Le/e/c/y/n/e;.D:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L378194.  v0:= v2.`e.e.c.y.n.e.r` @type ^`java.lang.Object`[] @kind object;
  #L378198.  v1:= v2.`e.e.c.y.n.e.s` @type ^`int`;
  #L37819c.  v1:= v1 + -1;
  #L3781a0.  v0:= v0[v1] @kind object;
  #L3781a4.  return v0 @kind object;
}
procedure `java.lang.Object` `E`(`e.e.c.y.n.e` v4 @kind this) @signature `Le/e/c/y/n/e;.E:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3781b8.  v0:= v4.`e.e.c.y.n.e.r` @type ^`java.lang.Object`[] @kind object;
  #L3781bc.  v1:= v4.`e.e.c.y.n.e.s` @type ^`int`;
  #L3781c0.  v1:= v1 + -1;
  #L3781c4.  v4.`e.e.c.y.n.e.s` @type ^`int` := v1;
  #L3781c8.  v1:= v0[v1] @kind object;
  #L3781cc.  v2:= v4.`e.e.c.y.n.e.s` @type ^`int`;
  #L3781d0.  v3:= 0I;
  #L3781d2.  v0[v2]:= v3 @kind object;
  #L3781d6.  return v1 @kind object;
}
procedure `void` `a`(`e.e.c.y.n.e` v3 @kind this, `e.e.c.a0.b` v4 @kind object) @signature `Le/e/c/y/n/e;.a:(Le/e/c/a0/b;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L378674.  call temp:= `A`(v3) @signature `Le/e/c/y/n/e;.A:()Le/e/c/a0/b;` @kind virtual;
  #L37867a.  v0:= temp @kind object;
  #L37867c.  if v0 != v4 then goto L378682;
  #L378680.  return @kind void;
  #L378682.  v0:= new `java.lang.IllegalStateException`;
  #L378686.  v1:= new `java.lang.StringBuilder`;
  #L37868a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L378690.  v2:= "Expected " @kind object;
  #L378694.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37869a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3786a0.  v4:= " but was " @kind object;
  #L3786a4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3786aa.  call temp:= `A`(v3) @signature `Le/e/c/y/n/e;.A:()Le/e/c/a0/b;` @kind virtual;
  #L3786b0.  v4:= temp @kind object;
  #L3786b2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3786b8.  call temp:= `s`(v3) @signature `Le/e/c/y/n/e;.s:()Ljava/lang/String;` @kind direct;
  #L3786be.  v4:= temp @kind object;
  #L3786c0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3786c6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3786cc.  v4:= temp @kind object;
  #L3786ce.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3786d4.  throw v0;
}
procedure `void` `a`(`e.e.c.y.n.e` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Le/e/c/y/n/e;.a:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L378788.  v0:= v3.`e.e.c.y.n.e.s` @type ^`int`;
  #L37878c.  v1:= v3.`e.e.c.y.n.e.r` @type ^`java.lang.Object`[] @kind object;
  #L378790.  v2:= length @variable v1;
  #L378792.  if v0 != v2 then goto L3787ca;
  #L378796.  v0:= v0 * 2;
  #L37879a.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L3787a0.  v1:= temp @kind object;
  #L3787a2.  v3.`e.e.c.y.n.e.r` @type ^`java.lang.Object`[] := v1 @kind object;
  #L3787a6.  v1:= v3.`e.e.c.y.n.e.u` @type ^`int`[] @kind object;
  #L3787aa.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L3787b0.  v1:= temp @kind object;
  #L3787b2.  v3.`e.e.c.y.n.e.u` @type ^`int`[] := v1 @kind object;
  #L3787b6.  v1:= v3.`e.e.c.y.n.e.t` @type ^`java.lang.String`[] @kind object;
  #L3787ba.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L3787c0.  v0:= temp @kind object;
  #L3787c2.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L3787c6.  v3.`e.e.c.y.n.e.t` @type ^`java.lang.String`[] := v0 @kind object;
  #L3787ca.  v0:= v3.`e.e.c.y.n.e.r` @type ^`java.lang.Object`[] @kind object;
  #L3787ce.  v1:= v3.`e.e.c.y.n.e.s` @type ^`int`;
  #L3787d2.  v2:= v1 + 1;
  #L3787d6.  v3.`e.e.c.y.n.e.s` @type ^`int` := v2;
  #L3787da.  v0[v1]:= v4 @kind object;
  #L3787de.  return @kind void;
}
procedure `java.lang.String` `s`(`e.e.c.y.n.e` v2 @kind this) @signature `Le/e/c/y/n/e;.s:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3782a8.  v0:= new `java.lang.StringBuilder`;
  #L3782ac.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3782b2.  v1:= " at path " @kind object;
  #L3782b6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3782bc.  call temp:= `p`(v2) @signature `Le/e/c/y/n/e;.p:()Ljava/lang/String;` @kind virtual;
  #L3782c2.  v1:= temp @kind object;
  #L3782c4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3782ca.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3782d0.  v0:= temp @kind object;
  #L3782d2.  return v0 @kind object;
}
procedure `e.e.c.a0.b` `A`(`e.e.c.y.n.e` v3 @kind this) @signature `Le/e/c/y/n/e;.A:()Le/e/c/a0/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L377eb8.  v0:= v3.`e.e.c.y.n.e.s` @type ^`int`;
  #L377ebc.  if v0 != 0 then goto L377ec6;
  #L377ec0.  v0:= `@@e.e.c.a0.b.k` @type ^`e.e.c.a0.b` @kind object;
  #L377ec4.  return v0 @kind object;
  #L377ec6.  call temp:= `D`(v3) @signature `Le/e/c/y/n/e;.D:()Ljava/lang/Object;` @kind direct;
  #L377ecc.  v0:= temp @kind object;
  #L377ece.  v1:= instanceof @variable v0 @type ^`java.util.Iterator` @kind boolean;
  #L377ed2.  if v1 == 0 then goto L377f2c;
  #L377ed6.  v1:= v3.`e.e.c.y.n.e.r` @type ^`java.lang.Object`[] @kind object;
  #L377eda.  v2:= v3.`e.e.c.y.n.e.s` @type ^`int`;
  #L377ede.  v2:= v2 + -2;
  #L377ee2.  v1:= v1[v2] @kind object;
  #L377ee6.  v1:= instanceof @variable v1 @type ^`e.e.c.o` @kind boolean;
  #L377eea.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L377eee.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L377ef4.  v2:= temp;
  #L377ef6.  if v2 == 0 then goto L377f1c;
  #L377efa.  if v1 == 0 then goto L377f04;
  #L377efe.  v0:= `@@e.e.c.a0.b.f` @type ^`e.e.c.a0.b` @kind object;
  #L377f02.  return v0 @kind object;
  #L377f04.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L377f0a.  v0:= temp @kind object;
  #L377f0c.  call `a`(v3, v0) @signature `Le/e/c/y/n/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L377f12.  call temp:= `A`(v3) @signature `Le/e/c/y/n/e;.A:()Le/e/c/a0/b;` @kind virtual;
  #L377f18.  v0:= temp @kind object;
  #L377f1a.  return v0 @kind object;
  #L377f1c.  if v1 == 0 then goto L377f26;
  #L377f20.  v0:= `@@e.e.c.a0.b.e` @type ^`e.e.c.a0.b` @kind object;
  #L377f24.  goto L377f2a;
  #L377f26.  v0:= `@@e.e.c.a0.b.c` @type ^`e.e.c.a0.b` @kind object;
  #L377f2a.  return v0 @kind object;
  #L377f2c.  v1:= instanceof @variable v0 @type ^`e.e.c.o` @kind boolean;
  #L377f30.  if v1 == 0 then goto L377f3a;
  #L377f34.  v0:= `@@e.e.c.a0.b.d` @type ^`e.e.c.a0.b` @kind object;
  #L377f38.  return v0 @kind object;
  #L377f3a.  v1:= instanceof @variable v0 @type ^`e.e.c.i` @kind boolean;
  #L377f3e.  if v1 == 0 then goto L377f48;
  #L377f42.  v0:= `@@e.e.c.a0.b.b` @type ^`e.e.c.a0.b` @kind object;
  #L377f46.  return v0 @kind object;
  #L377f48.  v1:= instanceof @variable v0 @type ^`e.e.c.q` @kind boolean;
  #L377f4c.  if v1 == 0 then goto L377f96;
  #L377f50.  v0:= (`e.e.c.q`) v0 @kind object;
  #L377f54.  call temp:= `B`(v0) @signature `Le/e/c/q;.B:()Z` @kind virtual;
  #L377f5a.  v1:= temp;
  #L377f5c.  if v1 == 0 then goto L377f66;
  #L377f60.  v0:= `@@e.e.c.a0.b.g` @type ^`e.e.c.a0.b` @kind object;
  #L377f64.  return v0 @kind object;
  #L377f66.  call temp:= `z`(v0) @signature `Le/e/c/q;.z:()Z` @kind virtual;
  #L377f6c.  v1:= temp;
  #L377f6e.  if v1 == 0 then goto L377f78;
  #L377f72.  v0:= `@@e.e.c.a0.b.i` @type ^`e.e.c.a0.b` @kind object;
  #L377f76.  return v0 @kind object;
  #L377f78.  call temp:= `A`(v0) @signature `Le/e/c/q;.A:()Z` @kind virtual;
  #L377f7e.  v0:= temp;
  #L377f80.  if v0 == 0 then goto L377f8a;
  #L377f84.  v0:= `@@e.e.c.a0.b.h` @type ^`e.e.c.a0.b` @kind object;
  #L377f88.  return v0 @kind object;
  #L377f8a.  v0:= new `java.lang.AssertionError`;
  #L377f8e.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L377f94.  throw v0;
  #L377f96.  v1:= instanceof @variable v0 @type ^`e.e.c.n` @kind boolean;
  #L377f9a.  if v1 == 0 then goto L377fa4;
  #L377f9e.  v0:= `@@e.e.c.a0.b.j` @type ^`e.e.c.a0.b` @kind object;
  #L377fa2.  return v0 @kind object;
  #L377fa4.  v1:= `@@e.e.c.y.n.e.w` @type ^`java.lang.Object` @kind object;
  #L377fa8.  if v0 != v1 then goto L377fbc;
  #L377fac.  v0:= new `java.lang.IllegalStateException`;
  #L377fb0.  v1:= "JsonReader is closed" @kind object;
  #L377fb4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L377fba.  throw v0;
  #L377fbc.  v0:= new `java.lang.AssertionError`;
  #L377fc0.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L377fc6.  throw v0;
}
procedure `void` `B`(`e.e.c.y.n.e` v3 @kind this) @signature `Le/e/c/y/n/e;.B:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3787f0.  call temp:= `A`(v3) @signature `Le/e/c/y/n/e;.A:()Le/e/c/a0/b;` @kind virtual;
  #L3787f6.  v0:= temp @kind object;
  #L3787f8.  v1:= `@@e.e.c.a0.b.f` @type ^`e.e.c.a0.b` @kind object;
  #L3787fc.  v2:= "null" @kind object;
  #L378800.  if v0 != v1 then goto L37881c;
  #L378804.  call temp:= `x`(v3) @signature `Le/e/c/y/n/e;.x:()Ljava/lang/String;` @kind virtual;
  #L37880a.  v0:= v3.`e.e.c.y.n.e.t` @type ^`java.lang.String`[] @kind object;
  #L37880e.  v1:= v3.`e.e.c.y.n.e.s` @type ^`int`;
  #L378812.  v1:= v1 + -2;
  #L378816.  v0[v1]:= v2 @kind object;
  #L37881a.  goto L378836;
  #L37881c.  call temp:= `E`(v3) @signature `Le/e/c/y/n/e;.E:()Ljava/lang/Object;` @kind direct;
  #L378822.  v0:= v3.`e.e.c.y.n.e.s` @type ^`int`;
  #L378826.  if v0 <= 0 then goto L378836;
  #L37882a.  v1:= v3.`e.e.c.y.n.e.t` @type ^`java.lang.String`[] @kind object;
  #L37882e.  v0:= v0 + -1;
  #L378832.  v1[v0]:= v2 @kind object;
  #L378836.  v0:= v3.`e.e.c.y.n.e.s` @type ^`int`;
  #L37883a.  if v0 <= 0 then goto L378852;
  #L37883e.  v1:= v3.`e.e.c.y.n.e.u` @type ^`int`[] @kind object;
  #L378842.  v0:= v0 + -1;
  #L378846.  v2:= v1[v0];
  #L37884a.  v2:= v2 + 1;
  #L37884e.  v1[v0]:= v2;
  #L378852.  return @kind void;
}
procedure `void` `C`(`e.e.c.y.n.e` v2 @kind this) @signature `Le/e/c/y/n/e;.C:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L378728.  v0:= `@@e.e.c.a0.b.f` @type ^`e.e.c.a0.b` @kind object;
  #L37872c.  call `a`(v2, v0) @signature `Le/e/c/y/n/e;.a:(Le/e/c/a0/b;)V` @kind direct;
  #L378732.  call temp:= `D`(v2) @signature `Le/e/c/y/n/e;.D:()Ljava/lang/Object;` @kind direct;
  #L378738.  v0:= temp @kind object;
  #L37873a.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L37873e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L378744.  v0:= temp @kind object;
  #L378746.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L37874a.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L378750.  v1:= temp @kind object;
  #L378752.  call `a`(v2, v1) @signature `Le/e/c/y/n/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L378758.  v1:= new `e.e.c.q`;
  #L37875c.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L378762.  v0:= temp @kind object;
  #L378764.  v0:= (`java.lang.String`) v0 @kind object;
  #L378768.  call `<init>`(v1, v0) @signature `Le/e/c/q;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37876e.  call `a`(v2, v1) @signature `Le/e/c/y/n/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L378774.  return @kind void;
}
procedure `void` `close`(`e.e.c.y.n.e` v4 @kind this) @signature `Le/e/c/y/n/e;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3785c0.  v0:= 1I;
  #L3785c2.  v1:= new `java.lang.Object`[v0];
  #L3785c6.  v2:= `@@e.e.c.y.n.e.w` @type ^`java.lang.Object` @kind object;
  #L3785ca.  v3:= 0I;
  #L3785cc.  v1[v3]:= v2 @kind object;
  #L3785d0.  v4.`e.e.c.y.n.e.r` @type ^`java.lang.Object`[] := v1 @kind object;
  #L3785d4.  v4.`e.e.c.y.n.e.s` @type ^`int` := v0;
  #L3785d8.  return @kind void;
}
procedure `void` `k`(`e.e.c.y.n.e` v3 @kind this) @signature `Le/e/c/y/n/e;.k:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L378538.  v0:= `@@e.e.c.a0.b.b` @type ^`e.e.c.a0.b` @kind object;
  #L37853c.  call `a`(v3, v0) @signature `Le/e/c/y/n/e;.a:(Le/e/c/a0/b;)V` @kind direct;
  #L378542.  call temp:= `D`(v3) @signature `Le/e/c/y/n/e;.D:()Ljava/lang/Object;` @kind direct;
  #L378548.  v0:= temp @kind object;
  #L37854a.  v0:= (`e.e.c.i`) v0 @kind object;
  #L37854e.  call temp:= `iterator`(v0) @signature `Le/e/c/i;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L378554.  v0:= temp @kind object;
  #L378556.  call `a`(v3, v0) @signature `Le/e/c/y/n/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L37855c.  v0:= v3.`e.e.c.y.n.e.u` @type ^`int`[] @kind object;
  #L378560.  v1:= v3.`e.e.c.y.n.e.s` @type ^`int`;
  #L378564.  v1:= v1 + -1;
  #L378568.  v2:= 0I;
  #L37856a.  v0[v1]:= v2;
  #L37856e.  return @kind void;
}
procedure `void` `l`(`e.e.c.y.n.e` v1 @kind this) @signature `Le/e/c/y/n/e;.l:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L378580.  v0:= `@@e.e.c.a0.b.d` @type ^`e.e.c.a0.b` @kind object;
  #L378584.  call `a`(v1, v0) @signature `Le/e/c/y/n/e;.a:(Le/e/c/a0/b;)V` @kind direct;
  #L37858a.  call temp:= `D`(v1) @signature `Le/e/c/y/n/e;.D:()Ljava/lang/Object;` @kind direct;
  #L378590.  v0:= temp @kind object;
  #L378592.  v0:= (`e.e.c.o`) v0 @kind object;
  #L378596.  call temp:= `n`(v0) @signature `Le/e/c/o;.n:()Ljava/util/Set;` @kind virtual;
  #L37859c.  v0:= temp @kind object;
  #L37859e.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3785a4.  v0:= temp @kind object;
  #L3785a6.  call `a`(v1, v0) @signature `Le/e/c/y/n/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L3785ac.  return @kind void;
}
procedure `void` `n`(`e.e.c.y.n.e` v3 @kind this) @signature `Le/e/c/y/n/e;.n:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3785ec.  v0:= `@@e.e.c.a0.b.c` @type ^`e.e.c.a0.b` @kind object;
  #L3785f0.  call `a`(v3, v0) @signature `Le/e/c/y/n/e;.a:(Le/e/c/a0/b;)V` @kind direct;
  #L3785f6.  call temp:= `E`(v3) @signature `Le/e/c/y/n/e;.E:()Ljava/lang/Object;` @kind direct;
  #L3785fc.  call temp:= `E`(v3) @signature `Le/e/c/y/n/e;.E:()Ljava/lang/Object;` @kind direct;
  #L378602.  v0:= v3.`e.e.c.y.n.e.s` @type ^`int`;
  #L378606.  if v0 <= 0 then goto L37861e;
  #L37860a.  v1:= v3.`e.e.c.y.n.e.u` @type ^`int`[] @kind object;
  #L37860e.  v0:= v0 + -1;
  #L378612.  v2:= v1[v0];
  #L378616.  v2:= v2 + 1;
  #L37861a.  v1[v0]:= v2;
  #L37861e.  return @kind void;
}
procedure `void` `o`(`e.e.c.y.n.e` v3 @kind this) @signature `Le/e/c/y/n/e;.o:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L378630.  v0:= `@@e.e.c.a0.b.e` @type ^`e.e.c.a0.b` @kind object;
  #L378634.  call `a`(v3, v0) @signature `Le/e/c/y/n/e;.a:(Le/e/c/a0/b;)V` @kind direct;
  #L37863a.  call temp:= `E`(v3) @signature `Le/e/c/y/n/e;.E:()Ljava/lang/Object;` @kind direct;
  #L378640.  call temp:= `E`(v3) @signature `Le/e/c/y/n/e;.E:()Ljava/lang/Object;` @kind direct;
  #L378646.  v0:= v3.`e.e.c.y.n.e.s` @type ^`int`;
  #L37864a.  if v0 <= 0 then goto L378662;
  #L37864e.  v1:= v3.`e.e.c.y.n.e.u` @type ^`int`[] @kind object;
  #L378652.  v0:= v0 + -1;
  #L378656.  v2:= v1[v0];
  #L37865a.  v2:= v2 + 1;
  #L37865e.  v1[v0]:= v2;
  #L378662.  return @kind void;
}
procedure `java.lang.String` `p`(`e.e.c.y.n.e` v4 @kind this) @signature `Le/e/c/y/n/e;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3781e8.  v0:= new `java.lang.StringBuilder`;
  #L3781ec.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3781f2.  v1:= 36I;
  #L3781f6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3781fc.  v1:= 0I;
  #L3781fe.  v2:= v4.`e.e.c.y.n.e.s` @type ^`int`;
  #L378202.  if v1 >= v2 then goto L37828c;
  #L378206.  v2:= v4.`e.e.c.y.n.e.r` @type ^`java.lang.Object`[] @kind object;
  #L37820a.  v3:= v2[v1] @kind object;
  #L37820e.  v3:= instanceof @variable v3 @type ^`e.e.c.i` @kind boolean;
  #L378212.  if v3 == 0 then goto L37824a;
  #L378216.  v1:= v1 + 1;
  #L37821a.  v2:= v2[v1] @kind object;
  #L37821e.  v2:= instanceof @variable v2 @type ^`java.util.Iterator` @kind boolean;
  #L378222.  if v2 == 0 then goto L378286;
  #L378226.  v2:= 91I;
  #L37822a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L378230.  v2:= v4.`e.e.c.y.n.e.u` @type ^`int`[] @kind object;
  #L378234.  v2:= v2[v1];
  #L378238.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L37823e.  v2:= 93I;
  #L378242.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L378248.  goto L378286;
  #L37824a.  v3:= v2[v1] @kind object;
  #L37824e.  v3:= instanceof @variable v3 @type ^`e.e.c.o` @kind boolean;
  #L378252.  if v3 == 0 then goto L378286;
  #L378256.  v1:= v1 + 1;
  #L37825a.  v2:= v2[v1] @kind object;
  #L37825e.  v2:= instanceof @variable v2 @type ^`java.util.Iterator` @kind boolean;
  #L378262.  if v2 == 0 then goto L378286;
  #L378266.  v2:= 46I;
  #L37826a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L378270.  v2:= v4.`e.e.c.y.n.e.t` @type ^`java.lang.String`[] @kind object;
  #L378274.  v3:= v2[v1] @kind object;
  #L378278.  if v3 == 0 then goto L378286;
  #L37827c.  v2:= v2[v1] @kind object;
  #L378280.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L378286.  v1:= v1 + 1;
  #L37828a.  goto L3781fe;
  #L37828c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L378292.  v0:= temp @kind object;
  #L378294.  return v0 @kind object;
}
procedure `boolean` `q`(`e.e.c.y.n.e` v2 @kind this) @signature `Le/e/c/y/n/e;.q:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L377e3c.  call temp:= `A`(v2) @signature `Le/e/c/y/n/e;.A:()Le/e/c/a0/b;` @kind virtual;
  #L377e42.  v0:= temp @kind object;
  #L377e44.  v1:= `@@e.e.c.a0.b.e` @type ^`e.e.c.a0.b` @kind object;
  #L377e48.  if v0 == v1 then goto L377e58;
  #L377e4c.  v1:= `@@e.e.c.a0.b.c` @type ^`e.e.c.a0.b` @kind object;
  #L377e50.  if v0 == v1 then goto L377e58;
  #L377e54.  v0:= 1I;
  #L377e56.  goto L377e5a;
  #L377e58.  v0:= 0I;
  #L377e5a.  return v0;
}
procedure `boolean` `t`(`e.e.c.y.n.e` v4 @kind this) @signature `Le/e/c/y/n/e;.t:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L377e6c.  v0:= `@@e.e.c.a0.b.i` @type ^`e.e.c.a0.b` @kind object;
  #L377e70.  call `a`(v4, v0) @signature `Le/e/c/y/n/e;.a:(Le/e/c/a0/b;)V` @kind direct;
  #L377e76.  call temp:= `E`(v4) @signature `Le/e/c/y/n/e;.E:()Ljava/lang/Object;` @kind direct;
  #L377e7c.  v0:= temp @kind object;
  #L377e7e.  v0:= (`e.e.c.q`) v0 @kind object;
  #L377e82.  call temp:= `n`(v0) @signature `Le/e/c/q;.n:()Z` @kind virtual;
  #L377e88.  v0:= temp;
  #L377e8a.  v1:= v4.`e.e.c.y.n.e.s` @type ^`int`;
  #L377e8e.  if v1 <= 0 then goto L377ea6;
  #L377e92.  v2:= v4.`e.e.c.y.n.e.u` @type ^`int`[] @kind object;
  #L377e96.  v1:= v1 + -1;
  #L377e9a.  v3:= v2[v1];
  #L377e9e.  v3:= v3 + 1;
  #L377ea2.  v2[v1]:= v3;
  #L377ea6.  return v0;
}
procedure `java.lang.String` `toString`(`e.e.c.y.n.e` v1 @kind this) @signature `Le/e/c/y/n/e;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3783f0.  v0:= constclass @type ^`e.e.c.y.n.e` @kind object;
  #L3783f4.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L3783fa.  v0:= temp @kind object;
  #L3783fc.  return v0 @kind object;
}
procedure `double` `u`(`e.e.c.y.n.e` v5 @kind this) @signature `Le/e/c/y/n/e;.u:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L377fd8.  call temp:= `A`(v5) @signature `Le/e/c/y/n/e;.A:()Le/e/c/a0/b;` @kind virtual;
  #L377fde.  v0:= temp @kind object;
  #L377fe0.  v1:= `@@e.e.c.a0.b.h` @type ^`e.e.c.a0.b` @kind object;
  #L377fe4.  if v0 == v1 then goto L378042;
  #L377fe8.  v1:= `@@e.e.c.a0.b.g` @type ^`e.e.c.a0.b` @kind object;
  #L377fec.  if v0 != v1 then goto L377ff2;
  #L377ff0.  goto L378042;
  #L377ff2.  v1:= new `java.lang.IllegalStateException`;
  #L377ff6.  v2:= new `java.lang.StringBuilder`;
  #L377ffa.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L378000.  v3:= "Expected " @kind object;
  #L378004.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37800a.  v3:= `@@e.e.c.a0.b.h` @type ^`e.e.c.a0.b` @kind object;
  #L37800e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L378014.  v3:= " but was " @kind object;
  #L378018.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37801e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L378024.  call temp:= `s`(v5) @signature `Le/e/c/y/n/e;.s:()Ljava/lang/String;` @kind direct;
  #L37802a.  v0:= temp @kind object;
  #L37802c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L378032.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L378038.  v0:= temp @kind object;
  #L37803a.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L378040.  throw v1;
  #L378042.  call temp:= `D`(v5) @signature `Le/e/c/y/n/e;.D:()Ljava/lang/Object;` @kind direct;
  #L378048.  v0:= temp @kind object;
  #L37804a.  v0:= (`e.e.c.q`) v0 @kind object;
  #L37804e.  call temp:= `o`(v0) @signature `Le/e/c/q;.o:()D` @kind virtual;
  #L378054.  v0:= temp @kind wide;
  #L378056.  call temp:= `r`(v5) @signature `Le/e/c/a0/a;.r:()Z` @kind virtual;
  #L37805c.  v2:= temp;
  #L37805e.  if v2 != 0 then goto L3780aa;
  #L378062.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L378068.  v2:= temp;
  #L37806a.  if v2 != 0 then goto L37807c;
  #L37806e.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L378074.  v2:= temp;
  #L378076.  if v2 != 0 then goto L37807c;
  #L37807a.  goto L3780aa;
  #L37807c.  v2:= new `java.lang.NumberFormatException`;
  #L378080.  v3:= new `java.lang.StringBuilder`;
  #L378084.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37808a.  v4:= "JSON forbids NaN and infinities: " @kind object;
  #L37808e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L378094.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L37809a.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3780a0.  v0:= temp @kind object;
  #L3780a2.  call `<init>`(v2, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3780a8.  throw v2;
  #L3780aa.  call temp:= `E`(v5) @signature `Le/e/c/y/n/e;.E:()Ljava/lang/Object;` @kind direct;
  #L3780b0.  v2:= v5.`e.e.c.y.n.e.s` @type ^`int`;
  #L3780b4.  if v2 <= 0 then goto L3780cc;
  #L3780b8.  v3:= v5.`e.e.c.y.n.e.u` @type ^`int`[] @kind object;
  #L3780bc.  v2:= v2 + -1;
  #L3780c0.  v4:= v3[v2];
  #L3780c4.  v4:= v4 + 1;
  #L3780c8.  v3[v2]:= v4;
  #L3780cc.  return v0 @kind wide;
}
procedure `int` `v`(`e.e.c.y.n.e` v4 @kind this) @signature `Le/e/c/y/n/e;.v:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3780e0.  call temp:= `A`(v4) @signature `Le/e/c/y/n/e;.A:()Le/e/c/a0/b;` @kind virtual;
  #L3780e6.  v0:= temp @kind object;
  #L3780e8.  v1:= `@@e.e.c.a0.b.h` @type ^`e.e.c.a0.b` @kind object;
  #L3780ec.  if v0 == v1 then goto L37814a;
  #L3780f0.  v1:= `@@e.e.c.a0.b.g` @type ^`e.e.c.a0.b` @kind object;
  #L3780f4.  if v0 != v1 then goto L3780fa;
  #L3780f8.  goto L37814a;
  #L3780fa.  v1:= new `java.lang.IllegalStateException`;
  #L3780fe.  v2:= new `java.lang.StringBuilder`;
  #L378102.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L378108.  v3:= "Expected " @kind object;
  #L37810c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L378112.  v3:= `@@e.e.c.a0.b.h` @type ^`e.e.c.a0.b` @kind object;
  #L378116.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37811c.  v3:= " but was " @kind object;
  #L378120.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L378126.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37812c.  call temp:= `s`(v4) @signature `Le/e/c/y/n/e;.s:()Ljava/lang/String;` @kind direct;
  #L378132.  v0:= temp @kind object;
  #L378134.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37813a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L378140.  v0:= temp @kind object;
  #L378142.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L378148.  throw v1;
  #L37814a.  call temp:= `D`(v4) @signature `Le/e/c/y/n/e;.D:()Ljava/lang/Object;` @kind direct;
  #L378150.  v0:= temp @kind object;
  #L378152.  v0:= (`e.e.c.q`) v0 @kind object;
  #L378156.  call temp:= `p`(v0) @signature `Le/e/c/q;.p:()I` @kind virtual;
  #L37815c.  v0:= temp;
  #L37815e.  call temp:= `E`(v4) @signature `Le/e/c/y/n/e;.E:()Ljava/lang/Object;` @kind direct;
  #L378164.  v1:= v4.`e.e.c.y.n.e.s` @type ^`int`;
  #L378168.  if v1 <= 0 then goto L378180;
  #L37816c.  v2:= v4.`e.e.c.y.n.e.u` @type ^`int`[] @kind object;
  #L378170.  v1:= v1 + -1;
  #L378174.  v3:= v2[v1];
  #L378178.  v3:= v3 + 1;
  #L37817c.  v2[v1]:= v3;
  #L378180.  return v0;
}
procedure `long` `w`(`e.e.c.y.n.e` v5 @kind this) @signature `Le/e/c/y/n/e;.w:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L378410.  call temp:= `A`(v5) @signature `Le/e/c/y/n/e;.A:()Le/e/c/a0/b;` @kind virtual;
  #L378416.  v0:= temp @kind object;
  #L378418.  v1:= `@@e.e.c.a0.b.h` @type ^`e.e.c.a0.b` @kind object;
  #L37841c.  if v0 == v1 then goto L37847a;
  #L378420.  v1:= `@@e.e.c.a0.b.g` @type ^`e.e.c.a0.b` @kind object;
  #L378424.  if v0 != v1 then goto L37842a;
  #L378428.  goto L37847a;
  #L37842a.  v1:= new `java.lang.IllegalStateException`;
  #L37842e.  v2:= new `java.lang.StringBuilder`;
  #L378432.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L378438.  v3:= "Expected " @kind object;
  #L37843c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L378442.  v3:= `@@e.e.c.a0.b.h` @type ^`e.e.c.a0.b` @kind object;
  #L378446.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37844c.  v3:= " but was " @kind object;
  #L378450.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L378456.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37845c.  call temp:= `s`(v5) @signature `Le/e/c/y/n/e;.s:()Ljava/lang/String;` @kind direct;
  #L378462.  v0:= temp @kind object;
  #L378464.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37846a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L378470.  v0:= temp @kind object;
  #L378472.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L378478.  throw v1;
  #L37847a.  call temp:= `D`(v5) @signature `Le/e/c/y/n/e;.D:()Ljava/lang/Object;` @kind direct;
  #L378480.  v0:= temp @kind object;
  #L378482.  v0:= (`e.e.c.q`) v0 @kind object;
  #L378486.  call temp:= `q`(v0) @signature `Le/e/c/q;.q:()J` @kind virtual;
  #L37848c.  v0:= temp @kind wide;
  #L37848e.  call temp:= `E`(v5) @signature `Le/e/c/y/n/e;.E:()Ljava/lang/Object;` @kind direct;
  #L378494.  v2:= v5.`e.e.c.y.n.e.s` @type ^`int`;
  #L378498.  if v2 <= 0 then goto L3784b0;
  #L37849c.  v3:= v5.`e.e.c.y.n.e.u` @type ^`int`[] @kind object;
  #L3784a0.  v2:= v2 + -1;
  #L3784a4.  v4:= v3[v2];
  #L3784a8.  v4:= v4 + 1;
  #L3784ac.  v3[v2]:= v4;
  #L3784b0.  return v0 @kind wide;
}
procedure `java.lang.String` `x`(`e.e.c.y.n.e` v4 @kind this) @signature `Le/e/c/y/n/e;.x:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3782e4.  v0:= `@@e.e.c.a0.b.f` @type ^`e.e.c.a0.b` @kind object;
  #L3782e8.  call `a`(v4, v0) @signature `Le/e/c/y/n/e;.a:(Le/e/c/a0/b;)V` @kind direct;
  #L3782ee.  call temp:= `D`(v4) @signature `Le/e/c/y/n/e;.D:()Ljava/lang/Object;` @kind direct;
  #L3782f4.  v0:= temp @kind object;
  #L3782f6.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L3782fa.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L378300.  v0:= temp @kind object;
  #L378302.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L378306.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L37830c.  v1:= temp @kind object;
  #L37830e.  v1:= (`java.lang.String`) v1 @kind object;
  #L378312.  v2:= v4.`e.e.c.y.n.e.t` @type ^`java.lang.String`[] @kind object;
  #L378316.  v3:= v4.`e.e.c.y.n.e.s` @type ^`int`;
  #L37831a.  v3:= v3 + -1;
  #L37831e.  v2[v3]:= v1 @kind object;
  #L378322.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L378328.  v0:= temp @kind object;
  #L37832a.  call `a`(v4, v0) @signature `Le/e/c/y/n/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L378330.  return v1 @kind object;
}
procedure `void` `y`(`e.e.c.y.n.e` v3 @kind this) @signature `Le/e/c/y/n/e;.y:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3786e8.  v0:= `@@e.e.c.a0.b.j` @type ^`e.e.c.a0.b` @kind object;
  #L3786ec.  call `a`(v3, v0) @signature `Le/e/c/y/n/e;.a:(Le/e/c/a0/b;)V` @kind direct;
  #L3786f2.  call temp:= `E`(v3) @signature `Le/e/c/y/n/e;.E:()Ljava/lang/Object;` @kind direct;
  #L3786f8.  v0:= v3.`e.e.c.y.n.e.s` @type ^`int`;
  #L3786fc.  if v0 <= 0 then goto L378714;
  #L378700.  v1:= v3.`e.e.c.y.n.e.u` @type ^`int`[] @kind object;
  #L378704.  v0:= v0 + -1;
  #L378708.  v2:= v1[v0];
  #L37870c.  v2:= v2 + 1;
  #L378710.  v1[v0]:= v2;
  #L378714.  return @kind void;
}
procedure `java.lang.String` `z`(`e.e.c.y.n.e` v4 @kind this) @signature `Le/e/c/y/n/e;.z:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L378344.  call temp:= `A`(v4) @signature `Le/e/c/y/n/e;.A:()Le/e/c/a0/b;` @kind virtual;
  #L37834a.  v0:= temp @kind object;
  #L37834c.  v1:= `@@e.e.c.a0.b.g` @type ^`e.e.c.a0.b` @kind object;
  #L378350.  if v0 == v1 then goto L3783ae;
  #L378354.  v1:= `@@e.e.c.a0.b.h` @type ^`e.e.c.a0.b` @kind object;
  #L378358.  if v0 != v1 then goto L37835e;
  #L37835c.  goto L3783ae;
  #L37835e.  v1:= new `java.lang.IllegalStateException`;
  #L378362.  v2:= new `java.lang.StringBuilder`;
  #L378366.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37836c.  v3:= "Expected " @kind object;
  #L378370.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L378376.  v3:= `@@e.e.c.a0.b.g` @type ^`e.e.c.a0.b` @kind object;
  #L37837a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L378380.  v3:= " but was " @kind object;
  #L378384.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37838a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L378390.  call temp:= `s`(v4) @signature `Le/e/c/y/n/e;.s:()Ljava/lang/String;` @kind direct;
  #L378396.  v0:= temp @kind object;
  #L378398.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37839e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3783a4.  v0:= temp @kind object;
  #L3783a6.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3783ac.  throw v1;
  #L3783ae.  call temp:= `E`(v4) @signature `Le/e/c/y/n/e;.E:()Ljava/lang/Object;` @kind direct;
  #L3783b4.  v0:= temp @kind object;
  #L3783b6.  v0:= (`e.e.c.q`) v0 @kind object;
  #L3783ba.  call temp:= `i`(v0) @signature `Le/e/c/q;.i:()Ljava/lang/String;` @kind virtual;
  #L3783c0.  v0:= temp @kind object;
  #L3783c2.  v1:= v4.`e.e.c.y.n.e.s` @type ^`int`;
  #L3783c6.  if v1 <= 0 then goto L3783de;
  #L3783ca.  v2:= v4.`e.e.c.y.n.e.u` @type ^`int`[] @kind object;
  #L3783ce.  v1:= v1 + -1;
  #L3783d2.  v3:= v2[v1];
  #L3783d6.  v3:= v3 + 1;
  #L3783da.  v2[v1]:= v3;
  #L3783de.  return v0 @kind object;
}
