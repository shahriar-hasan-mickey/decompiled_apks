record `e.e.c.y.n.n$i0` @kind class @AccessFlag  extends `e.e.c.v` @kind class {
}
procedure `void` `<init>`(`e.e.c.y.n.n$i0` v0 @kind this) @signature `Le/e/c/y/n/n$i0;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L37c184.  call `<init>`(v0) @signature `Le/e/c/v;.<init>:()V` @kind direct;
  #L37c18a.  return @kind void;
}
procedure `java.lang.Object` `a`(`e.e.c.y.n.n$i0` v0 @kind this, `e.e.c.a0.a` v1 @kind object) @signature `Le/e/c/y/n/n$i0;.a:(Le/e/c/a0/a;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L37c144.  call temp:= `a`(v0, v1) @signature `Le/e/c/y/n/n$i0;.a:(Le/e/c/a0/a;)Ljava/util/concurrent/atomic/AtomicBoolean;` @kind virtual;
  #L37c14a.  v1:= temp @kind object;
  #L37c14c.  return v1 @kind object;
}
procedure `java.util.concurrent.atomic.AtomicBoolean` `a`(`e.e.c.y.n.n$i0` v1 @kind this, `e.e.c.a0.a` v2 @kind object) @signature `Le/e/c/y/n/n$i0;.a:(Le/e/c/a0/a;)Ljava/util/concurrent/atomic/AtomicBoolean;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37c160.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L37c164.  call temp:= `t`(v2) @signature `Le/e/c/a0/a;.t:()Z` @kind virtual;
  #L37c16a.  v2:= temp;
  #L37c16c.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L37c172.  return v0 @kind object;
}
procedure `void` `a`(`e.e.c.y.n.n$i0` v0 @kind this, `e.e.c.a0.c` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Le/e/c/y/n/n$i0;.a:(Le/e/c/a0/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L37c19c.  v2:= (`java.util.concurrent.atomic.AtomicBoolean`) v2 @kind object;
  #L37c1a0.  call `a`(v0, v1, v2) @signature `Le/e/c/y/n/n$i0;.a:(Le/e/c/a0/c;Ljava/util/concurrent/atomic/AtomicBoolean;)V` @kind virtual;
  #L37c1a6.  return @kind void;
}
procedure `void` `a`(`e.e.c.y.n.n$i0` v0 @kind this, `e.e.c.a0.c` v1 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v2 @kind object) @signature `Le/e/c/y/n/n$i0;.a:(Le/e/c/a0/c;Ljava/util/concurrent/atomic/AtomicBoolean;)V` @AccessFlag PUBLIC {
    temp;

  #L37c1b8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L37c1be.  v2:= temp;
  #L37c1c0.  call temp:= `d`(v1, v2) @signature `Le/e/c/a0/c;.d:(Z)Le/e/c/a0/c;` @kind virtual;
  #L37c1c6.  return @kind void;
}
