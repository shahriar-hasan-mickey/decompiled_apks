record `e.e.c.y.n.n$r` @kind class @AccessFlag  extends `e.e.c.w` @kind interface {
}
procedure `void` `<init>`(`e.e.c.y.n.n$r` v0 @kind this) @signature `Le/e/c/y/n/n$r;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L37aefc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L37af02.  return @kind void;
}
procedure `e.e.c.v` `create`(`e.e.c.y.n.n$r` v1 @kind this, `e.e.c.f` v2 @kind object, `e.e.c.z.a` v3 @kind object) @signature `Le/e/c/y/n/n$r;.create:(Le/e/c/f;Le/e/c/z/a;)Le/e/c/v;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37aec0.  call temp:= `a`(v3) @signature `Le/e/c/z/a;.a:()Ljava/lang/Class;` @kind virtual;
  #L37aec6.  v3:= temp @kind object;
  #L37aec8.  v0:= constclass @type ^`java.sql.Timestamp` @kind object;
  #L37aecc.  if v3 == v0 then goto L37aed4;
  #L37aed0.  v2:= 0I;
  #L37aed2.  return v2 @kind object;
  #L37aed4.  v3:= constclass @type ^`java.util.Date` @kind object;
  #L37aed8.  call temp:= `a`(v2, v3) @signature `Le/e/c/f;.a:(Ljava/lang/Class;)Le/e/c/v;` @kind virtual;
  #L37aede.  v2:= temp @kind object;
  #L37aee0.  v3:= new `e.e.c.y.n.n$r$a`;
  #L37aee4.  call `<init>`(v3, v1, v2) @signature `Le/e/c/y/n/n$r$a;.<init>:(Le/e/c/y/n/n$r;Le/e/c/v;)V` @kind direct;
  #L37aeea.  return v3 @kind object;
}
