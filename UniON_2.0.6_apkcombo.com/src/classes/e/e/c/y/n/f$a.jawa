record `e.e.c.y.n.f$a` @kind class @AccessFlag  extends `java.io.Writer` @kind class {
}
procedure `void` `<init>`(`e.e.c.y.n.f$a` v0 @kind this) @signature `Le/e/c/y/n/f$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L378864.  call `<init>`(v0) @signature `Ljava/io/Writer;.<init>:()V` @kind direct;
  #L37886a.  return @kind void;
}
procedure `void` `close`(`e.e.c.y.n.f$a` v1 @kind this) @signature `Le/e/c/y/n/f$a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37887c.  v0:= new `java.lang.AssertionError`;
  #L378880.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L378886.  throw v0;
}
procedure `void` `flush`(`e.e.c.y.n.f$a` v1 @kind this) @signature `Le/e/c/y/n/f$a;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L378898.  v0:= new `java.lang.AssertionError`;
  #L37889c.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3788a2.  throw v0;
}
procedure `void` `write`(`e.e.c.y.n.f$a` v0 @kind this, `char`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Le/e/c/y/n/f$a;.write:([CII)V` @AccessFlag PUBLIC {
    temp;

  #L3788b4.  v1:= new `java.lang.AssertionError`;
  #L3788b8.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3788be.  throw v1;
}
