record `e.e.c.y.m` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`e.e.c.y.m` v0 @kind this) @signature `Le/e/c/y/m;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L377610.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L377616.  return @kind void;
}
procedure `e.e.c.y.m` `a`() @signature `Le/e/c/y/m;.a:()Le/e/c/y/m;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3774d0.  v0:= "newInstance" @kind object;
  #L3774d4.  v1:= "sun.misc.Unsafe" @kind object;
  #L3774d8.  v2:= 0I;
  #L3774da.  v3:= 0I;
  #L3774dc.  v4:= 1I;
  #L3774de.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L3774e4.  v1:= temp @kind object;
  #L3774e6.  v5:= "theUnsafe" @kind object;
  #L3774ea.  call temp:= `getDeclaredField`(v1, v5) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L3774f0.  v5:= temp @kind object;
  #L3774f2.  call `setAccessible`(v5, v4) @signature `Ljava/lang/reflect/Field;.setAccessible:(Z)V` @kind virtual;
  #L3774f8.  call temp:= `get`(v5, v2) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3774fe.  v5:= temp @kind object;
  #L377500.  v6:= "allocateInstance" @kind object;
  #L377504.  v7:= new `java.lang.Class`[v4];
  #L377508.  v8:= constclass @type ^`java.lang.Class` @kind object;
  #L37750c.  v7[v3]:= v8 @kind object;
  #L377510.  call temp:= `getMethod`(v1, v6, v7) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L377516.  v1:= temp @kind object;
  #L377518.  v6:= new `e.e.c.y.m$a`;
  #L37751c.  call `<init>`(v6, v1, v5) @signature `Le/e/c/y/m$a;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/Object;)V` @kind direct;
  #L377522.  return v6 @kind object;
  #L377524.  v1:= 2I;
  #L377526.  v5:= constclass @type ^`java.io.ObjectStreamClass` @kind object;
  #L37752a.  v6:= "getConstructorId" @kind object;
  #L37752e.  v7:= new `java.lang.Class`[v4];
  #L377532.  v8:= constclass @type ^`java.lang.Class` @kind object;
  #L377536.  v7[v3]:= v8 @kind object;
  #L37753a.  call temp:= `getDeclaredMethod`(v5, v6, v7) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L377540.  v5:= temp @kind object;
  #L377542.  call `setAccessible`(v5, v4) @signature `Ljava/lang/reflect/Method;.setAccessible:(Z)V` @kind virtual;
  #L377548.  v6:= new `java.lang.Object`[v4];
  #L37754c.  v7:= constclass @type ^`java.lang.Object` @kind object;
  #L377550.  v6[v3]:= v7 @kind object;
  #L377554.  call temp:= `invoke`(v5, v2, v6) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L37755a.  v2:= temp @kind object;
  #L37755c.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L377560.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L377566.  v2:= temp;
  #L377568.  v5:= constclass @type ^`java.io.ObjectStreamClass` @kind object;
  #L37756c.  v6:= new `java.lang.Class`[v1];
  #L377570.  v7:= constclass @type ^`java.lang.Class` @kind object;
  #L377574.  v6[v3]:= v7 @kind object;
  #L377578.  v7:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L37757c.  v6[v4]:= v7 @kind object;
  #L377580.  call temp:= `getDeclaredMethod`(v5, v0, v6) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L377586.  v5:= temp @kind object;
  #L377588.  call `setAccessible`(v5, v4) @signature `Ljava/lang/reflect/Method;.setAccessible:(Z)V` @kind virtual;
  #L37758e.  v6:= new `e.e.c.y.m$b`;
  #L377592.  call `<init>`(v6, v5, v2) @signature `Le/e/c/y/m$b;.<init>:(Ljava/lang/reflect/Method;I)V` @kind direct;
  #L377598.  return v6 @kind object;
  #L37759a.  v2:= constclass @type ^`java.io.ObjectInputStream` @kind object;
  #L37759e.  v1:= new `java.lang.Class`[v1];
  #L3775a2.  v5:= constclass @type ^`java.lang.Class` @kind object;
  #L3775a6.  v1[v3]:= v5 @kind object;
  #L3775aa.  v3:= constclass @type ^`java.lang.Class` @kind object;
  #L3775ae.  v1[v4]:= v3 @kind object;
  #L3775b2.  call temp:= `getDeclaredMethod`(v2, v0, v1) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L3775b8.  v0:= temp @kind object;
  #L3775ba.  call `setAccessible`(v0, v4) @signature `Ljava/lang/reflect/Method;.setAccessible:(Z)V` @kind virtual;
  #L3775c0.  v1:= new `e.e.c.y.m$c`;
  #L3775c4.  call `<init>`(v1, v0) @signature `Le/e/c/y/m$c;.<init>:(Ljava/lang/reflect/Method;)V` @kind direct;
  #L3775ca.  return v1 @kind object;
  #L3775cc.  v0:= new `e.e.c.y.m$d`;
  #L3775d0.  call `<init>`(v0) @signature `Le/e/c/y/m$d;.<init>:()V` @kind direct;
  #L3775d6.  return v0 @kind object;
  catch `java.lang.Exception` @[L3774de..L377522] goto L377524;
  catch `java.lang.Exception` @[L377526..L377598] goto L37759a;
  catch `java.lang.Exception` @[L37759a..L3775ca] goto L3775cc;
}
procedure `void` `b`(`java.lang.Class` v3 @kind object) @signature `Le/e/c/y/m;.b:(Ljava/lang/Class;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L377628.  call temp:= `getModifiers`(v3) @signature `Ljava/lang/Class;.getModifiers:()I` @kind virtual;
  #L37762e.  v0:= temp;
  #L377630.  call temp:= `isInterface`(v0) @signature `Ljava/lang/reflect/Modifier;.isInterface:(I)Z` @kind static;
  #L377636.  v1:= temp;
  #L377638.  if v1 != 0 then goto L377680;
  #L37763c.  call temp:= `isAbstract`(v0) @signature `Ljava/lang/reflect/Modifier;.isAbstract:(I)Z` @kind static;
  #L377642.  v0:= temp;
  #L377644.  if v0 != 0 then goto L37764a;
  #L377648.  return @kind void;
  #L37764a.  v0:= new `java.lang.UnsupportedOperationException`;
  #L37764e.  v1:= new `java.lang.StringBuilder`;
  #L377652.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L377658.  v2:= "Abstract class can't be instantiated! Class name: " @kind object;
  #L37765c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L377662.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L377668.  v3:= temp @kind object;
  #L37766a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L377670.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L377676.  v3:= temp @kind object;
  #L377678.  call `<init>`(v0, v3) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37767e.  throw v0;
  #L377680.  v0:= new `java.lang.UnsupportedOperationException`;
  #L377684.  v1:= new `java.lang.StringBuilder`;
  #L377688.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37768e.  v2:= "Interface can't be instantiated! Interface name: " @kind object;
  #L377692.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L377698.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L37769e.  v3:= temp @kind object;
  #L3776a0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3776a6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3776ac.  v3:= temp @kind object;
  #L3776ae.  call `<init>`(v0, v3) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3776b4.  throw v0;
}
procedure `java.lang.Object` `a`(`java.lang.Class` v0 @kind object) @signature `Le/e/c/y/m;.a:(Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
