record `e.e.c.y.b$c` @kind class @AccessFlag FINAL extends `java.lang.reflect.WildcardType` @kind interface, `java.io.Serializable` @kind interface {
  `java.lang.reflect.Type` `e.e.c.y.b$c.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `e.e.c.y.b$c.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e.e.c.y.b$c` v4 @kind this, `java.lang.reflect.Type`[] v5 @kind object, `java.lang.reflect.Type`[] v6 @kind object) @signature `Le/e/c/y/b$c;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3749f0.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L3749f4.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3749fa.  v1:= length @variable v6;
  #L3749fc.  v2:= 1I;
  #L3749fe.  v3:= 0I;
  #L374a00.  if v1 > v2 then goto L374a08;
  #L374a04.  v1:= 1I;
  #L374a06.  goto L374a0a;
  #L374a08.  v1:= 0I;
  #L374a0a.  call `a`(v1) @signature `Le/e/c/y/a;.a:(Z)V` @kind static;
  #L374a10.  v1:= length @variable v5;
  #L374a12.  if v1 != v2 then goto L374a1a;
  #L374a16.  v1:= 1I;
  #L374a18.  goto L374a1c;
  #L374a1a.  v1:= 0I;
  #L374a1c.  call `a`(v1) @signature `Le/e/c/y/a;.a:(Z)V` @kind static;
  #L374a22.  v1:= length @variable v6;
  #L374a24.  if v1 != v2 then goto L374a64;
  #L374a28.  v1:= v6[v3] @kind object;
  #L374a2c.  call temp:= `a`(v1) @signature `Le/e/c/y/a;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L374a32.  v1:= v6[v3] @kind object;
  #L374a36.  call `c`(v1) @signature `Le/e/c/y/b;.c:(Ljava/lang/reflect/Type;)V` @kind static;
  #L374a3c.  v5:= v5[v3] @kind object;
  #L374a40.  if v5 != v0 then goto L374a46;
  #L374a44.  goto L374a48;
  #L374a46.  v2:= 0I;
  #L374a48.  call `a`(v2) @signature `Le/e/c/y/a;.a:(Z)V` @kind static;
  #L374a4e.  v5:= v6[v3] @kind object;
  #L374a52.  call temp:= `b`(v5) @signature `Le/e/c/y/b;.b:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L374a58.  v5:= temp @kind object;
  #L374a5a.  v4.`e.e.c.y.b$c.c` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L374a5e.  v4.`e.e.c.y.b$c.b` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L374a62.  goto L374a8e;
  #L374a64.  v6:= v5[v3] @kind object;
  #L374a68.  call temp:= `a`(v6) @signature `Le/e/c/y/a;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L374a6e.  v6:= v5[v3] @kind object;
  #L374a72.  call `c`(v6) @signature `Le/e/c/y/b;.c:(Ljava/lang/reflect/Type;)V` @kind static;
  #L374a78.  v6:= 0I;
  #L374a7a.  v4.`e.e.c.y.b$c.c` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L374a7e.  v5:= v5[v3] @kind object;
  #L374a82.  call temp:= `b`(v5) @signature `Le/e/c/y/b;.b:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L374a88.  v5:= temp @kind object;
  #L374a8a.  v4.`e.e.c.y.b$c.b` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L374a8e.  return @kind void;
}
procedure `boolean` `equals`(`e.e.c.y.b$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/c/y/b$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3748c0.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L3748c4.  if v0 == 0 then goto L3748dc;
  #L3748c8.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L3748cc.  call temp:= `a`(v1, v2) @signature `Le/e/c/y/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L3748d2.  v2:= temp;
  #L3748d4.  if v2 == 0 then goto L3748dc;
  #L3748d8.  v2:= 1I;
  #L3748da.  goto L3748de;
  #L3748dc.  v2:= 0I;
  #L3748de.  return v2;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`e.e.c.y.b$c` v3 @kind this) @signature `Le/e/c/y/b$c;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3749a0.  v0:= v3.`e.e.c.y.b$c.c` @type ^`java.lang.reflect.Type` @kind object;
  #L3749a4.  if v0 == 0 then goto L3749b6;
  #L3749a8.  v1:= 1I;
  #L3749aa.  v1:= new `java.lang.reflect.Type`[v1];
  #L3749ae.  v2:= 0I;
  #L3749b0.  v1[v2]:= v0 @kind object;
  #L3749b4.  goto L3749ba;
  #L3749b6.  v1:= `@@e.e.c.y.b.a` @type ^`java.lang.reflect.Type`[] @kind object;
  #L3749ba.  return v1 @kind object;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`e.e.c.y.b$c` v3 @kind this) @signature `Le/e/c/y/b$c;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3749cc.  v0:= 1I;
  #L3749ce.  v0:= new `java.lang.reflect.Type`[v0];
  #L3749d2.  v1:= v3.`e.e.c.y.b$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L3749d6.  v2:= 0I;
  #L3749d8.  v0[v2]:= v1 @kind object;
  #L3749dc.  return v0 @kind object;
}
procedure `int` `hashCode`(`e.e.c.y.b$c` v2 @kind this) @signature `Le/e/c/y/b$c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3748f0.  v0:= v2.`e.e.c.y.b$c.c` @type ^`java.lang.reflect.Type` @kind object;
  #L3748f4.  if v0 == 0 then goto L374906;
  #L3748f8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3748fe.  v0:= temp;
  #L374900.  v0:= v0 + 31;
  #L374904.  goto L374908;
  #L374906.  v0:= 1I;
  #L374908.  v1:= v2.`e.e.c.y.b$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L37490c.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L374912.  v1:= temp;
  #L374914.  v1:= v1 + 31;
  #L374918.  v0:= v0 ^~ v1 @kind int;
  #L37491a.  return v0;
}
procedure `java.lang.String` `toString`(`e.e.c.y.b$c` v2 @kind this) @signature `Le/e/c/y/b$c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37492c.  v0:= v2.`e.e.c.y.b$c.c` @type ^`java.lang.reflect.Type` @kind object;
  #L374930.  if v0 == 0 then goto L374964;
  #L374934.  v0:= new `java.lang.StringBuilder`;
  #L374938.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37493e.  v1:= "? super " @kind object;
  #L374942.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L374948.  v1:= v2.`e.e.c.y.b$c.c` @type ^`java.lang.reflect.Type` @kind object;
  #L37494c.  call temp:= `h`(v1) @signature `Le/e/c/y/b;.h:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L374952.  v1:= temp @kind object;
  #L374954.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37495a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L374960.  v0:= temp @kind object;
  #L374962.  return v0 @kind object;
  #L374964.  v0:= v2.`e.e.c.y.b$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L374968.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L37496c.  if v0 != v1 then goto L374976;
  #L374970.  v0:= "?" @kind object;
  #L374974.  return v0 @kind object;
  #L374976.  v0:= new `java.lang.StringBuilder`;
  #L37497a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L374980.  v1:= "? extends " @kind object;
  #L374984.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37498a.  v1:= v2.`e.e.c.y.b$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L37498e.  goto L37494c;
}
