record `e.e.c.o` @kind class @AccessFlag PUBLIC_FINAL extends `e.e.c.l` @kind class {
  `e.e.c.y.h` `e.e.c.o.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e.e.c.o` v1 @kind this) @signature `Le/e/c/o;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L373e34.  call `<init>`(v1) @signature `Le/e/c/l;.<init>:()V` @kind direct;
  #L373e3a.  v0:= new `e.e.c.y.h`;
  #L373e3e.  call `<init>`(v0) @signature `Le/e/c/y/h;.<init>:()V` @kind direct;
  #L373e44.  v1.`e.e.c.o.a` @type ^`e.e.c.y.h` := v0 @kind object;
  #L373e48.  return @kind void;
}
procedure `void` `a`(`e.e.c.o` v1 @kind this, `java.lang.String` v2 @kind object, `e.e.c.l` v3 @kind object) @signature `Le/e/c/o;.a:(Ljava/lang/String;Le/e/c/l;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L373e5c.  v0:= v1.`e.e.c.o.a` @type ^`e.e.c.y.h` @kind object;
  #L373e60.  if v3 != 0 then goto L373e68;
  #L373e64.  v3:= `@@e.e.c.n.a` @type ^`e.e.c.n` @kind object;
  #L373e68.  call temp:= `put`(v0, v2, v3) @signature `Le/e/c/y/h;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L373e6e.  return @kind void;
}
procedure `boolean` `a`(`e.e.c.o` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Le/e/c/o;.a:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L373db0.  v0:= v1.`e.e.c.o.a` @type ^`e.e.c.y.h` @kind object;
  #L373db4.  call temp:= `containsKey`(v0, v2) @signature `Le/e/c/y/h;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L373dba.  v2:= temp;
  #L373dbc.  return v2;
}
procedure `e.e.c.l` `b`(`e.e.c.o` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Le/e/c/o;.b:(Ljava/lang/String;)Le/e/c/l;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L373dd0.  v0:= v1.`e.e.c.o.a` @type ^`e.e.c.y.h` @kind object;
  #L373dd4.  call temp:= `remove`(v0, v2) @signature `Le/e/c/y/h;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L373dda.  v2:= temp @kind object;
  #L373ddc.  v2:= (`e.e.c.l`) v2 @kind object;
  #L373de0.  return v2 @kind object;
}
procedure `boolean` `equals`(`e.e.c.o` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/c/o;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L373d70.  if v2 == v1 then goto L373d9a;
  #L373d74.  v0:= instanceof @variable v2 @type ^`e.e.c.o` @kind boolean;
  #L373d78.  if v0 == 0 then goto L373d96;
  #L373d7c.  v2:= (`e.e.c.o`) v2 @kind object;
  #L373d80.  v2:= v2.`e.e.c.o.a` @type ^`e.e.c.y.h` @kind object;
  #L373d84.  v0:= v1.`e.e.c.o.a` @type ^`e.e.c.y.h` @kind object;
  #L373d88.  call temp:= `equals`(v2, v0) @signature `Ljava/util/AbstractMap;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L373d8e.  v2:= temp;
  #L373d90.  if v2 == 0 then goto L373d96;
  #L373d94.  goto L373d9a;
  #L373d96.  v2:= 0I;
  #L373d98.  goto L373d9c;
  #L373d9a.  v2:= 1I;
  #L373d9c.  return v2;
}
procedure `int` `hashCode`(`e.e.c.o` v1 @kind this) @signature `Le/e/c/o;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L373df4.  v0:= v1.`e.e.c.o.a` @type ^`e.e.c.y.h` @kind object;
  #L373df8.  call temp:= `hashCode`(v0) @signature `Ljava/util/AbstractMap;.hashCode:()I` @kind virtual;
  #L373dfe.  v0:= temp;
  #L373e00.  return v0;
}
procedure `java.util.Set` `n`(`e.e.c.o` v1 @kind this) @signature `Le/e/c/o;.n:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L373e14.  v0:= v1.`e.e.c.o.a` @type ^`e.e.c.y.h` @kind object;
  #L373e18.  call temp:= `entrySet`(v0) @signature `Le/e/c/y/h;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L373e1e.  v0:= temp @kind object;
  #L373e20.  return v0 @kind object;
}
