record `e.e.c.a` @kind class @AccessFlag FINAL extends `e.e.c.v` @kind class {
  `java.lang.Class` `e.e.c.a.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `e.e.c.a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e.e.c.a` v1 @kind this, `java.lang.Class` v2 @kind object, `int` v3 , `int` v4 ) @signature `Le/e/c/a;.<init>:(Ljava/lang/Class;II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L372170.  call `<init>`(v1) @signature `Le/e/c/v;.<init>:()V` @kind direct;
  #L372176.  v0:= new `java.util.ArrayList`;
  #L37217a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L372180.  v1.`e.e.c.a.b` @type ^`java.util.List` := v0 @kind object;
  #L372184.  call temp:= `a`(v2) @signature `Le/e/c/a;.a:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L37218a.  v1.`e.e.c.a.a` @type ^`java.lang.Class` := v2 @kind object;
  #L37218e.  v2:= v1.`e.e.c.a.b` @type ^`java.util.List` @kind object;
  #L372192.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L372196.  call temp:= `getDateTimeInstance`(v3, v4, v0) @signature `Ljava/text/DateFormat;.getDateTimeInstance:(IILjava/util/Locale;)Ljava/text/DateFormat;` @kind static;
  #L37219c.  v0:= temp @kind object;
  #L37219e.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3721a4.  call temp:= `getDefault`() @signature `Ljava/util/Locale;.getDefault:()Ljava/util/Locale;` @kind static;
  #L3721aa.  v2:= temp @kind object;
  #L3721ac.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L3721b0.  call temp:= `equals`(v2, v0) @signature `Ljava/util/Locale;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3721b6.  v2:= temp;
  #L3721b8.  if v2 != 0 then goto L3721ce;
  #L3721bc.  v2:= v1.`e.e.c.a.b` @type ^`java.util.List` @kind object;
  #L3721c0.  call temp:= `getDateTimeInstance`(v3, v4) @signature `Ljava/text/DateFormat;.getDateTimeInstance:(II)Ljava/text/DateFormat;` @kind static;
  #L3721c6.  v0:= temp @kind object;
  #L3721c8.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3721ce.  call temp:= `c`() @signature `Le/e/c/y/e;.c:()Z` @kind static;
  #L3721d4.  v2:= temp;
  #L3721d6.  if v2 == 0 then goto L3721ec;
  #L3721da.  v2:= v1.`e.e.c.a.b` @type ^`java.util.List` @kind object;
  #L3721de.  call temp:= `a`(v3, v4) @signature `Le/e/c/y/j;.a:(II)Ljava/text/DateFormat;` @kind static;
  #L3721e4.  v3:= temp @kind object;
  #L3721e6.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3721ec.  return @kind void;
}
procedure `void` `<init>`(`e.e.c.a` v2 @kind this, `java.lang.Class` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Le/e/c/a;.<init>:(Ljava/lang/Class;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L372200.  call `<init>`(v2) @signature `Le/e/c/v;.<init>:()V` @kind direct;
  #L372206.  v0:= new `java.util.ArrayList`;
  #L37220a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L372210.  v2.`e.e.c.a.b` @type ^`java.util.List` := v0 @kind object;
  #L372214.  call temp:= `a`(v3) @signature `Le/e/c/a;.a:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L37221a.  v2.`e.e.c.a.a` @type ^`java.lang.Class` := v3 @kind object;
  #L37221e.  v3:= v2.`e.e.c.a.b` @type ^`java.util.List` @kind object;
  #L372222.  v0:= new `java.text.SimpleDateFormat`;
  #L372226.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L37222a.  call `<init>`(v0, v4, v1) @signature `Ljava/text/SimpleDateFormat;.<init>:(Ljava/lang/String;Ljava/util/Locale;)V` @kind direct;
  #L372230.  call temp:= `add`(v3, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L372236.  call temp:= `getDefault`() @signature `Ljava/util/Locale;.getDefault:()Ljava/util/Locale;` @kind static;
  #L37223c.  v3:= temp @kind object;
  #L37223e.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L372242.  call temp:= `equals`(v3, v0) @signature `Ljava/util/Locale;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L372248.  v3:= temp;
  #L37224a.  if v3 != 0 then goto L372262;
  #L37224e.  v3:= v2.`e.e.c.a.b` @type ^`java.util.List` @kind object;
  #L372252.  v0:= new `java.text.SimpleDateFormat`;
  #L372256.  call `<init>`(v0, v4) @signature `Ljava/text/SimpleDateFormat;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37225c.  call temp:= `add`(v3, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L372262.  return @kind void;
}
procedure `java.lang.Class` `a`(`java.lang.Class` v3 @kind object) @signature `Le/e/c/a;.a:(Ljava/lang/Class;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L371efc.  v0:= constclass @type ^`java.util.Date` @kind object;
  #L371f00.  if v3 == v0 then goto L371f80;
  #L371f04.  v0:= constclass @type ^`java.sql.Date` @kind object;
  #L371f08.  if v3 == v0 then goto L371f80;
  #L371f0c.  v0:= constclass @type ^`java.sql.Timestamp` @kind object;
  #L371f10.  if v3 != v0 then goto L371f16;
  #L371f14.  goto L371f80;
  #L371f16.  v0:= new `java.lang.IllegalArgumentException`;
  #L371f1a.  v1:= new `java.lang.StringBuilder`;
  #L371f1e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L371f24.  v2:= "Date type must be one of " @kind object;
  #L371f28.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L371f2e.  v2:= constclass @type ^`java.util.Date` @kind object;
  #L371f32.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L371f38.  v2:= ", " @kind object;
  #L371f3c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L371f42.  v2:= constclass @type ^`java.sql.Timestamp` @kind object;
  #L371f46.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L371f4c.  v2:= ", or " @kind object;
  #L371f50.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L371f56.  v2:= constclass @type ^`java.sql.Date` @kind object;
  #L371f5a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L371f60.  v2:= " but was " @kind object;
  #L371f64.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L371f6a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L371f70.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L371f76.  v3:= temp @kind object;
  #L371f78.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L371f7e.  throw v0;
  #L371f80.  return v3 @kind object;
}
procedure `java.util.Date` `a`(`e.e.c.a` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Le/e/c/a;.a:(Ljava/lang/String;)Ljava/util/Date;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L372038.  v0:= v3.`e.e.c.a.b` @type ^`java.util.List` @kind object;
  #L37203c.  @monitorenter v0
  #L37203e.  v1:= v3.`e.e.c.a.b` @type ^`java.util.List` @kind object;
  #L372042.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L372048.  v1:= temp @kind object;
  #L37204a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L372050.  v2:= temp;
  #L372052.  if v2 == 0 then goto L37206e;
  #L372056.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L37205c.  v2:= temp @kind object;
  #L37205e.  v2:= (`java.text.DateFormat`) v2 @kind object;
  #L372062.  call temp:= `parse`(v2, v4) @signature `Ljava/text/DateFormat;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L372068.  v4:= temp @kind object;
  #L37206a.  @monitorexit v0
  #L37206c.  return v4 @kind object;
  #L37206e.  v1:= new `java.text.ParsePosition`;
  #L372072.  v2:= 0I;
  #L372074.  call `<init>`(v1, v2) @signature `Ljava/text/ParsePosition;.<init>:(I)V` @kind direct;
  #L37207a.  call temp:= `a`(v4, v1) @signature `Le/e/c/y/n/o/a;.a:(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/util/Date;` @kind static;
  #L372080.  v4:= temp @kind object;
  #L372082.  @monitorexit v0
  #L372084.  return v4 @kind object;
  #L372086.  v1:= Exception @type ^`java.text.ParseException` @kind object;
  #L372088.  v2:= new `e.e.c.t`;
  #L37208c.  call `<init>`(v2, v4, v1) @signature `Le/e/c/t;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L372092.  throw v2;
  #L372094.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L372096.  @monitorexit v0
  #L372098.  throw v4;
  catch `java.lang.Throwable` @[L37203e..L372062] goto L372094;
  catch `java.text.ParseException` @[L372062..L37206a] goto L37204a;
  catch `java.lang.Throwable` @[L372062..L37206a] goto L372094;
  catch `java.lang.Throwable` @[L37206a..L37206c] goto L372094;
  catch `java.text.ParseException` @[L37206e..L372082] goto L372086;
  catch `java.lang.Throwable` @[L37206e..L372082] goto L372094;
  catch `java.lang.Throwable` @[L372082..L372098] goto L372094;
}
procedure `java.lang.Object` `a`(`e.e.c.a` v0 @kind this, `e.e.c.a0.a` v1 @kind object) @signature `Le/e/c/a;.a:(Le/e/c/a0/a;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L371f94.  call temp:= `a`(v0, v1) @signature `Le/e/c/a;.a:(Le/e/c/a0/a;)Ljava/util/Date;` @kind virtual;
  #L371f9a.  v1:= temp @kind object;
  #L371f9c.  return v1 @kind object;
}
procedure `java.util.Date` `a`(`e.e.c.a` v3 @kind this, `e.e.c.a0.a` v4 @kind object) @signature `Le/e/c/a;.a:(Le/e/c/a0/a;)Ljava/util/Date;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3720e4.  call temp:= `A`(v4) @signature `Le/e/c/a0/a;.A:()Le/e/c/a0/b;` @kind virtual;
  #L3720ea.  v0:= temp @kind object;
  #L3720ec.  v1:= `@@e.e.c.a0.b.j` @type ^`e.e.c.a0.b` @kind object;
  #L3720f0.  if v0 != v1 then goto L3720fe;
  #L3720f4.  call `y`(v4) @signature `Le/e/c/a0/a;.y:()V` @kind virtual;
  #L3720fa.  v4:= 0I;
  #L3720fc.  return v4 @kind object;
  #L3720fe.  call temp:= `z`(v4) @signature `Le/e/c/a0/a;.z:()Ljava/lang/String;` @kind virtual;
  #L372104.  v4:= temp @kind object;
  #L372106.  call temp:= `a`(v3, v4) @signature `Le/e/c/a;.a:(Ljava/lang/String;)Ljava/util/Date;` @kind direct;
  #L37210c.  v4:= temp @kind object;
  #L37210e.  v0:= v3.`e.e.c.a.a` @type ^`java.lang.Class` @kind object;
  #L372112.  v1:= constclass @type ^`java.util.Date` @kind object;
  #L372116.  if v0 != v1 then goto L37211c;
  #L37211a.  return v4 @kind object;
  #L37211c.  v1:= constclass @type ^`java.sql.Timestamp` @kind object;
  #L372120.  if v0 != v1 then goto L372138;
  #L372124.  v0:= new `java.sql.Timestamp`;
  #L372128.  call temp:= `getTime`(v4) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L37212e.  v1:= temp @kind wide;
  #L372130.  call `<init>`(v0, v1) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L372136.  return v0 @kind object;
  #L372138.  v1:= constclass @type ^`java.sql.Date` @kind object;
  #L37213c.  if v0 != v1 then goto L372154;
  #L372140.  v0:= new `java.sql.Date`;
  #L372144.  call temp:= `getTime`(v4) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L37214a.  v1:= temp @kind wide;
  #L37214c.  call `<init>`(v0, v1) @signature `Ljava/sql/Date;.<init>:(J)V` @kind direct;
  #L372152.  return v0 @kind object;
  #L372154.  v4:= new `java.lang.AssertionError`;
  #L372158.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L37215e.  throw v4;
}
procedure `void` `a`(`e.e.c.a` v0 @kind this, `e.e.c.a0.c` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Le/e/c/a;.a:(Le/e/c/a0/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L372274.  v2:= (`java.util.Date`) v2 @kind object;
  #L372278.  call `a`(v0, v1, v2) @signature `Le/e/c/a;.a:(Le/e/c/a0/c;Ljava/util/Date;)V` @kind virtual;
  #L37227e.  return @kind void;
}
procedure `void` `a`(`e.e.c.a` v3 @kind this, `e.e.c.a0.c` v4 @kind object, `java.util.Date` v5 @kind object) @signature `Le/e/c/a;.a:(Le/e/c/a0/c;Ljava/util/Date;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L372290.  if v5 != 0 then goto L37229c;
  #L372294.  call temp:= `r`(v4) @signature `Le/e/c/a0/c;.r:()Le/e/c/a0/c;` @kind virtual;
  #L37229a.  return @kind void;
  #L37229c.  v0:= v3.`e.e.c.a.b` @type ^`java.util.List` @kind object;
  #L3722a0.  @monitorenter v0
  #L3722a2.  v1:= v3.`e.e.c.a.b` @type ^`java.util.List` @kind object;
  #L3722a6.  v2:= 0I;
  #L3722a8.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3722ae.  v1:= temp @kind object;
  #L3722b0.  v1:= (`java.text.DateFormat`) v1 @kind object;
  #L3722b4.  call temp:= `format`(v1, v5) @signature `Ljava/text/DateFormat;.format:(Ljava/util/Date;)Ljava/lang/String;` @kind virtual;
  #L3722ba.  v5:= temp @kind object;
  #L3722bc.  call temp:= `d`(v4, v5) @signature `Le/e/c/a0/c;.d:(Ljava/lang/String;)Le/e/c/a0/c;` @kind virtual;
  #L3722c2.  @monitorexit v0
  #L3722c4.  return @kind void;
  #L3722c6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3722c8.  @monitorexit v0
  #L3722ca.  throw v4;
  catch `java.lang.Throwable` @[L3722a2..L3722ca] goto L3722c6;
}
procedure `java.lang.String` `toString`(`e.e.c.a` v4 @kind this) @signature `Le/e/c/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L371fb0.  v0:= v4.`e.e.c.a.b` @type ^`java.util.List` @kind object;
  #L371fb4.  v1:= 0I;
  #L371fb6.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L371fbc.  v0:= temp @kind object;
  #L371fbe.  v0:= (`java.text.DateFormat`) v0 @kind object;
  #L371fc2.  v1:= instanceof @variable v0 @type ^`java.text.SimpleDateFormat` @kind boolean;
  #L371fc6.  v2:= 41I;
  #L371fca.  v3:= "DefaultDateTypeAdapter(" @kind object;
  #L371fce.  if v1 == 0 then goto L372004;
  #L371fd2.  v1:= new `java.lang.StringBuilder`;
  #L371fd6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L371fdc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L371fe2.  v0:= (`java.text.SimpleDateFormat`) v0 @kind object;
  #L371fe6.  call temp:= `toPattern`(v0) @signature `Ljava/text/SimpleDateFormat;.toPattern:()Ljava/lang/String;` @kind virtual;
  #L371fec.  v0:= temp @kind object;
  #L371fee.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L371ff4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L371ffa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L372000.  v0:= temp @kind object;
  #L372002.  return v0 @kind object;
  #L372004.  v1:= new `java.lang.StringBuilder`;
  #L372008.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37200e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L372014.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L37201a.  v0:= temp @kind object;
  #L37201c.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L372022.  v0:= temp @kind object;
  #L372024.  goto L371fee;
}
