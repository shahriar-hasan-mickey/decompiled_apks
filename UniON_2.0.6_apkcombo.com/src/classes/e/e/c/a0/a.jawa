record `e.e.c.a0.a` @kind class @AccessFlag PUBLIC extends `java.io.Closeable` @kind interface {
  `java.io.Reader` `e.e.c.a0.a.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `e.e.c.a0.a.c` @AccessFlag PRIVATE;
  `char`[] `e.e.c.a0.a.d` @AccessFlag PRIVATE_FINAL;
  `int` `e.e.c.a0.a.e` @AccessFlag PRIVATE;
  `int` `e.e.c.a0.a.f` @AccessFlag PRIVATE;
  `int` `e.e.c.a0.a.g` @AccessFlag PRIVATE;
  `int` `e.e.c.a0.a.h` @AccessFlag PRIVATE;
  `int` `e.e.c.a0.a.i` @AccessFlag ;
  `long` `e.e.c.a0.a.j` @AccessFlag PRIVATE;
  `int` `e.e.c.a0.a.k` @AccessFlag PRIVATE;
  `java.lang.String` `e.e.c.a0.a.l` @AccessFlag PRIVATE;
  `int`[] `e.e.c.a0.a.m` @AccessFlag PRIVATE;
  `int` `e.e.c.a0.a.n` @AccessFlag PRIVATE;
  `java.lang.String`[] `e.e.c.a0.a.o` @AccessFlag PRIVATE;
  `int`[] `e.e.c.a0.a.p` @AccessFlag PRIVATE;
}
global `char`[] `@@e.e.c.a0.a.q` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/c/a0/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L37eab0.  v0:= ")]}'\n" @kind object;
  #L37eab4.  call temp:= `toCharArray`(v0) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L37eaba.  v0:= temp @kind object;
  #L37eabc.  `@@e.e.c.a0.a.q` @type ^`char`[] := v0 @kind object;
  #L37eac0.  v0:= new `e.e.c.a0.a$a`;
  #L37eac4.  call `<init>`(v0) @signature `Le/e/c/a0/a$a;.<init>:()V` @kind direct;
  #L37eaca.  `@@e.e.c.y.f.a` @type ^`e.e.c.y.f` := v0 @kind object;
  #L37eace.  return @kind void;
}
procedure `void` `<init>`(`e.e.c.a0.a` v4 @kind this, `java.io.Reader` v5 @kind object) @signature `Le/e/c/a0/a;.<init>:(Ljava/io/Reader;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37eae0.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L37eae6.  v0:= 0I;
  #L37eae8.  v4.`e.e.c.a0.a.c` @type ^`boolean` := v0 @kind boolean;
  #L37eaec.  v1:= 1024I;
  #L37eaf0.  v1:= new `char`[v1];
  #L37eaf4.  v4.`e.e.c.a0.a.d` @type ^`char`[] := v1 @kind object;
  #L37eaf8.  v4.`e.e.c.a0.a.e` @type ^`int` := v0;
  #L37eafc.  v4.`e.e.c.a0.a.f` @type ^`int` := v0;
  #L37eb00.  v4.`e.e.c.a0.a.g` @type ^`int` := v0;
  #L37eb04.  v4.`e.e.c.a0.a.h` @type ^`int` := v0;
  #L37eb08.  v4.`e.e.c.a0.a.i` @type ^`int` := v0;
  #L37eb0c.  v1:= 32I;
  #L37eb10.  v2:= new `int`[v1];
  #L37eb14.  v4.`e.e.c.a0.a.m` @type ^`int`[] := v2 @kind object;
  #L37eb18.  v4.`e.e.c.a0.a.n` @type ^`int` := v0;
  #L37eb1c.  v0:= v4.`e.e.c.a0.a.m` @type ^`int`[] @kind object;
  #L37eb20.  v2:= v4.`e.e.c.a0.a.n` @type ^`int`;
  #L37eb24.  v3:= v2 + 1;
  #L37eb28.  v4.`e.e.c.a0.a.n` @type ^`int` := v3;
  #L37eb2c.  v3:= 6I;
  #L37eb2e.  v0[v2]:= v3;
  #L37eb32.  v0:= new `java.lang.String`[v1];
  #L37eb36.  v4.`e.e.c.a0.a.o` @type ^`java.lang.String`[] := v0 @kind object;
  #L37eb3a.  v0:= new `int`[v1];
  #L37eb3e.  v4.`e.e.c.a0.a.p` @type ^`int`[] := v0 @kind object;
  #L37eb42.  if v5 == 0 then goto L37eb4c;
  #L37eb46.  v4.`e.e.c.a0.a.b` @type ^`java.io.Reader` := v5 @kind object;
  #L37eb4a.  return @kind void;
  #L37eb4c.  v5:= new `java.lang.NullPointerException`;
  #L37eb50.  v0:= "in == null" @kind object;
  #L37eb54.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37eb5a.  throw v5;
}
procedure `void` `C`(`e.e.c.a0.a` v1 @kind this) @signature `Le/e/c/a0/a;.C:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L37ec70.  v0:= v1.`e.e.c.a0.a.c` @type ^`boolean` @kind boolean;
  #L37ec74.  if v0 == 0 then goto L37ec7a;
  #L37ec78.  return @kind void;
  #L37ec7a.  v0:= "Use JsonReader.setLenient(true) to accept malformed JSON" @kind object;
  #L37ec7e.  call temp:= `c`(v1, v0) @signature `Le/e/c/a0/a;.c:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37ec84.  v0:= 0I;
  #L37ec86.  throw v0;
}
procedure `void` `D`(`e.e.c.a0.a` v4 @kind this) @signature `Le/e/c/a0/a;.D:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37eccc.  v0:= 1I;
  #L37ecce.  call temp:= `b`(v4, v0) @signature `Le/e/c/a0/a;.b:(Z)I` @kind direct;
  #L37ecd4.  v1:= v4.`e.e.c.a0.a.e` @type ^`int`;
  #L37ecd8.  v1:= v1 - v0 @kind int;
  #L37ecda.  v4.`e.e.c.a0.a.e` @type ^`int` := v1;
  #L37ecde.  v0:= v4.`e.e.c.a0.a.e` @type ^`int`;
  #L37ece2.  v1:= `@@e.e.c.a0.a.q` @type ^`char`[] @kind object;
  #L37ece6.  v2:= length @variable v1;
  #L37ece8.  v0:= v0 + v2 @kind int;
  #L37ecea.  v2:= v4.`e.e.c.a0.a.f` @type ^`int`;
  #L37ecee.  if v0 <= v2 then goto L37ed02;
  #L37ecf2.  v0:= length @variable v1;
  #L37ecf4.  call temp:= `a`(v4, v0) @signature `Le/e/c/a0/a;.a:(I)Z` @kind direct;
  #L37ecfa.  v0:= temp;
  #L37ecfc.  if v0 != 0 then goto L37ed02;
  #L37ed00.  return @kind void;
  #L37ed02.  v0:= 0I;
  #L37ed04.  v1:= `@@e.e.c.a0.a.q` @type ^`char`[] @kind object;
  #L37ed08.  v2:= length @variable v1;
  #L37ed0a.  if v0 >= v2 then goto L37ed2c;
  #L37ed0e.  v2:= v4.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37ed12.  v3:= v4.`e.e.c.a0.a.e` @type ^`int`;
  #L37ed16.  v3:= v3 + v0 @kind int;
  #L37ed18.  v2:= v2[v3] @kind char;
  #L37ed1c.  v1:= v1[v0] @kind char;
  #L37ed20.  if v2 == v1 then goto L37ed26;
  #L37ed24.  return @kind void;
  #L37ed26.  v0:= v0 + 1;
  #L37ed2a.  goto L37ed04;
  #L37ed2c.  v0:= v4.`e.e.c.a0.a.e` @type ^`int`;
  #L37ed30.  v1:= length @variable v1;
  #L37ed32.  v0:= v0 + v1 @kind int;
  #L37ed34.  v4.`e.e.c.a0.a.e` @type ^`int` := v0;
  #L37ed38.  return @kind void;
}
procedure `java.lang.String` `E`(`e.e.c.a0.a` v6 @kind this) @signature `Le/e/c/a0/a;.E:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L37e748.  v0:= 0I;
  #L37e74a.  v1:= 0I;
  #L37e74c.  v2:= v1 @kind object;
  #L37e74e.  v1:= 0I;
  #L37e750.  v3:= v6.`e.e.c.a0.a.e` @type ^`int`;
  #L37e754.  v4:= v3 + v1 @kind int;
  #L37e758.  v5:= v6.`e.e.c.a0.a.f` @type ^`int`;
  #L37e75c.  if v4 >= v5 then goto L37e7e6;
  #L37e760.  v4:= v6.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37e764.  v3:= v3 + v1 @kind int;
  #L37e766.  v3:= v4[v3] @kind char;
  #L37e76a.  v4:= 9I;
  #L37e76e.  if v3 == v4 then goto L37e802;
  #L37e772.  v4:= 10I;
  #L37e776.  if v3 == v4 then goto L37e802;
  #L37e77a.  v4:= 12I;
  #L37e77e.  if v3 == v4 then goto L37e802;
  #L37e782.  v4:= 13I;
  #L37e786.  if v3 == v4 then goto L37e802;
  #L37e78a.  v4:= 32I;
  #L37e78e.  if v3 == v4 then goto L37e802;
  #L37e792.  v4:= 35I;
  #L37e796.  if v3 == v4 then goto L37e7de;
  #L37e79a.  v4:= 44I;
  #L37e79e.  if v3 == v4 then goto L37e802;
  #L37e7a2.  v4:= 47I;
  #L37e7a6.  if v3 == v4 then goto L37e7de;
  #L37e7aa.  v4:= 61I;
  #L37e7ae.  if v3 == v4 then goto L37e7de;
  #L37e7b2.  v4:= 123I;
  #L37e7b6.  if v3 == v4 then goto L37e802;
  #L37e7ba.  v4:= 125I;
  #L37e7be.  if v3 == v4 then goto L37e802;
  #L37e7c2.  v4:= 58I;
  #L37e7c6.  if v3 == v4 then goto L37e802;
  #L37e7ca.  v4:= 59I;
  #L37e7ce.  if v3 == v4 then goto L37e7de;
  #L37e7d2.  goto L37e880;
  #L37e7d8.  v1:= v1 + 1;
  #L37e7dc.  goto L37e750;
  #L37e7de.  call `C`(v6) @signature `Le/e/c/a0/a;.C:()V` @kind direct;
  #L37e7e4.  goto L37e802;
  #L37e7e6.  v3:= v6.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37e7ea.  v3:= length @variable v3;
  #L37e7ec.  if v1 >= v3 then goto L37e806;
  #L37e7f0.  v3:= v1 + 1;
  #L37e7f4.  call temp:= `a`(v6, v3) @signature `Le/e/c/a0/a;.a:(I)Z` @kind direct;
  #L37e7fa.  v3:= temp;
  #L37e7fc.  if v3 == 0 then goto L37e802;
  #L37e800.  goto L37e750;
  #L37e802.  v0:= v1;
  #L37e804.  goto L37e846;
  #L37e806.  if v2 != 0 then goto L37e820;
  #L37e80a.  v2:= new `java.lang.StringBuilder`;
  #L37e80e.  v3:= 16I;
  #L37e812.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L37e818.  v3:= temp;
  #L37e81a.  call `<init>`(v2, v3) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L37e820.  v3:= v6.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37e824.  v4:= v6.`e.e.c.a0.a.e` @type ^`int`;
  #L37e828.  call temp:= `append`(v2, v3, v4, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e82e.  v3:= v6.`e.e.c.a0.a.e` @type ^`int`;
  #L37e832.  v3:= v3 + v1 @kind int;
  #L37e834.  v6.`e.e.c.a0.a.e` @type ^`int` := v3;
  #L37e838.  v1:= 1I;
  #L37e83a.  call temp:= `a`(v6, v1) @signature `Le/e/c/a0/a;.a:(I)Z` @kind direct;
  #L37e840.  v1:= temp;
  #L37e842.  if v1 != 0 then goto L37e74e;
  #L37e846.  if v2 != 0 then goto L37e85e;
  #L37e84a.  v1:= new `java.lang.String`;
  #L37e84e.  v2:= v6.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37e852.  v3:= v6.`e.e.c.a0.a.e` @type ^`int`;
  #L37e856.  call `<init>`(v1, v2, v3, v0) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L37e85c.  goto L37e874;
  #L37e85e.  v1:= v6.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37e862.  v3:= v6.`e.e.c.a0.a.e` @type ^`int`;
  #L37e866.  call temp:= `append`(v2, v1, v3, v0) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e86c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37e872.  v1:= temp @kind object;
  #L37e874.  v2:= v6.`e.e.c.a0.a.e` @type ^`int`;
  #L37e878.  v2:= v2 + v0 @kind int;
  #L37e87a.  v6.`e.e.c.a0.a.e` @type ^`int` := v2;
  #L37e87e.  return v1 @kind object;
  #L37e880.  switch v3
                  | 91 => goto L37e802
                  | 92 => goto L37e7de
                  | 93 => goto L37e802
                  | else => goto L37e7d8;
}
procedure `int` `F`(`e.e.c.a0.a` v8 @kind this) @signature `Le/e/c/a0/a;.F:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L37dfec.  v0:= v8.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37dff0.  v1:= v8.`e.e.c.a0.a.e` @type ^`int`;
  #L37dff4.  v0:= v0[v1] @kind char;
  #L37dff8.  v1:= 0I;
  #L37dffa.  v2:= 116I;
  #L37dffe.  if v0 == v2 then goto L37e04a;
  #L37e002.  v2:= 84I;
  #L37e006.  if v0 != v2 then goto L37e00c;
  #L37e00a.  goto L37e04a;
  #L37e00c.  v2:= 102I;
  #L37e010.  if v0 == v2 then goto L37e03e;
  #L37e014.  v2:= 70I;
  #L37e018.  if v0 != v2 then goto L37e01e;
  #L37e01c.  goto L37e03e;
  #L37e01e.  v2:= 110I;
  #L37e022.  if v0 == v2 then goto L37e032;
  #L37e026.  v2:= 78I;
  #L37e02a.  if v0 != v2 then goto L37e030;
  #L37e02e.  goto L37e032;
  #L37e030.  return v1;
  #L37e032.  v0:= 7I;
  #L37e034.  v2:= "null" @kind object;
  #L37e038.  v3:= "NULL" @kind object;
  #L37e03c.  goto L37e054;
  #L37e03e.  v0:= 6I;
  #L37e040.  v2:= "false" @kind object;
  #L37e044.  v3:= "FALSE" @kind object;
  #L37e048.  goto L37e054;
  #L37e04a.  v0:= 5I;
  #L37e04c.  v2:= "true" @kind object;
  #L37e050.  v3:= "TRUE" @kind object;
  #L37e054.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L37e05a.  v4:= temp;
  #L37e05c.  v5:= 1I;
  #L37e05e.  if v5 >= v4 then goto L37e0b0;
  #L37e062.  v6:= v8.`e.e.c.a0.a.e` @type ^`int`;
  #L37e066.  v6:= v6 + v5 @kind int;
  #L37e068.  v7:= v8.`e.e.c.a0.a.f` @type ^`int`;
  #L37e06c.  if v6 < v7 then goto L37e082;
  #L37e070.  v6:= v5 + 1;
  #L37e074.  call temp:= `a`(v8, v6) @signature `Le/e/c/a0/a;.a:(I)Z` @kind direct;
  #L37e07a.  v6:= temp;
  #L37e07c.  if v6 != 0 then goto L37e082;
  #L37e080.  return v1;
  #L37e082.  v6:= v8.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37e086.  v7:= v8.`e.e.c.a0.a.e` @type ^`int`;
  #L37e08a.  v7:= v7 + v5 @kind int;
  #L37e08c.  v6:= v6[v7] @kind char;
  #L37e090.  call temp:= `charAt`(v2, v5) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L37e096.  v7:= temp;
  #L37e098.  if v6 == v7 then goto L37e0aa;
  #L37e09c.  call temp:= `charAt`(v3, v5) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L37e0a2.  v7:= temp;
  #L37e0a4.  if v6 == v7 then goto L37e0aa;
  #L37e0a8.  return v1;
  #L37e0aa.  v5:= v5 + 1;
  #L37e0ae.  goto L37e05e;
  #L37e0b0.  v2:= v8.`e.e.c.a0.a.e` @type ^`int`;
  #L37e0b4.  v2:= v2 + v4 @kind int;
  #L37e0b6.  v3:= v8.`e.e.c.a0.a.f` @type ^`int`;
  #L37e0ba.  if v2 < v3 then goto L37e0ce;
  #L37e0be.  v2:= v4 + 1;
  #L37e0c2.  call temp:= `a`(v8, v2) @signature `Le/e/c/a0/a;.a:(I)Z` @kind direct;
  #L37e0c8.  v2:= temp;
  #L37e0ca.  if v2 == 0 then goto L37e0ea;
  #L37e0ce.  v2:= v8.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37e0d2.  v3:= v8.`e.e.c.a0.a.e` @type ^`int`;
  #L37e0d6.  v3:= v3 + v4 @kind int;
  #L37e0d8.  v2:= v2[v3] @kind char;
  #L37e0dc.  call temp:= `a`(v8, v2) @signature `Le/e/c/a0/a;.a:(C)Z` @kind direct;
  #L37e0e2.  v2:= temp;
  #L37e0e4.  if v2 == 0 then goto L37e0ea;
  #L37e0e8.  return v1;
  #L37e0ea.  v1:= v8.`e.e.c.a0.a.e` @type ^`int`;
  #L37e0ee.  v1:= v1 + v4 @kind int;
  #L37e0f0.  v8.`e.e.c.a0.a.e` @type ^`int` := v1;
  #L37e0f4.  v8.`e.e.c.a0.a.i` @type ^`int` := v0;
  #L37e0f8.  return v0;
}
procedure `int` `G`(`e.e.c.a0.a` v18 @kind this) @signature `Le/e/c/a0/a;.G:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L37e10c.  v0:= v18 @kind object;
  #L37e110.  v1:= v0.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37e114.  v2:= v0.`e.e.c.a0.a.e` @type ^`int`;
  #L37e118.  v3:= v0.`e.e.c.a0.a.f` @type ^`int`;
  #L37e11c.  v6:= 1I;
  #L37e11e.  v7:= 0I;
  #L37e120.  v8:= v3;
  #L37e122.  v3:= 0I;
  #L37e124.  v9:= 0I;
  #L37e126.  v10:= 1I;
  #L37e128.  v11:= 0L;
  #L37e12c.  v13:= 0I;
  #L37e12e.  v14:= v2 + v3 @kind int;
  #L37e132.  v15:= 2I;
  #L37e134.  if v14 != v8 then goto L37e15c;
  #L37e138.  v2:= length @variable v1;
  #L37e13a.  if v3 != v2 then goto L37e140;
  #L37e13e.  return v7;
  #L37e140.  v2:= v3 + 1;
  #L37e144.  call temp:= `a`(v0, v2) @signature `Le/e/c/a0/a;.a:(I)Z` @kind direct;
  #L37e14a.  v2:= temp;
  #L37e14c.  if v2 != 0 then goto L37e154;
  #L37e150.  goto L37e240;
  #L37e154.  v2:= v0.`e.e.c.a0.a.e` @type ^`int`;
  #L37e158.  v8:= v0.`e.e.c.a0.a.f` @type ^`int`;
  #L37e15c.  v14:= v2 + v3 @kind int;
  #L37e160.  v14:= v1[v14] @kind char;
  #L37e164.  v7:= 43I;
  #L37e168.  v4:= 3I;
  #L37e16a.  v5:= 5I;
  #L37e16c.  if v14 == v7 then goto L37e2ee;
  #L37e170.  v7:= 69I;
  #L37e174.  if v14 == v7 then goto L37e2d6;
  #L37e178.  v7:= 101I;
  #L37e17c.  if v14 == v7 then goto L37e2d6;
  #L37e180.  v7:= 45I;
  #L37e184.  if v14 == v7 then goto L37e2bc;
  #L37e188.  v7:= 46I;
  #L37e18c.  if v14 == v7 then goto L37e2ac;
  #L37e190.  v7:= 48I;
  #L37e194.  if v14 < v7 then goto L37e234;
  #L37e198.  v7:= 57I;
  #L37e19c.  if v14 <= v7 then goto L37e1a2;
  #L37e1a0.  goto L37e234;
  #L37e1a2.  if v9 == v6 then goto L37e21e;
  #L37e1a6.  if v9 != 0 then goto L37e1ac;
  #L37e1aa.  goto L37e21e;
  #L37e1ac.  if v9 != v15 then goto L37e1fe;
  #L37e1b0.  v16:= 0L;
  #L37e1b4.  v4:= lcmp(v11, v16);
  #L37e1b8.  if v4 != 0 then goto L37e1c0;
  #L37e1bc.  v4:= 0I;
  #L37e1be.  return v4;
  #L37e1c0.  v4:= 10L;
  #L37e1c4.  v4:= v4 * v11 @kind long;
  #L37e1c8.  v14:= v14 + -48;
  #L37e1cc.  v14:= (`long`) v14 @kind i2l;
  #L37e1ce.  v4:= v4 - v14 @kind long;
  #L37e1d0.  v14:= -922337203685477580L;
  #L37e1da.  v7:= lcmp(v11, v14);
  #L37e1de.  if v7 > 0 then goto L37e1f4;
  #L37e1e2.  if v7 != 0 then goto L37e1f0;
  #L37e1e6.  v7:= lcmp(v4, v11);
  #L37e1ea.  if v7 >= 0 then goto L37e1f0;
  #L37e1ee.  goto L37e1f4;
  #L37e1f0.  v7:= 0I;
  #L37e1f2.  goto L37e1f6;
  #L37e1f4.  v7:= 1I;
  #L37e1f6.  v7:= v7 ^& v10 @kind int;
  #L37e1f8.  v11:= v4 @kind wide;
  #L37e1fa.  v10:= v7;
  #L37e1fc.  goto L37e214;
  #L37e1fe.  if v9 != v4 then goto L37e208;
  #L37e202.  v7:= 0I;
  #L37e204.  v9:= 4I;
  #L37e206.  goto L37e22c;
  #L37e208.  if v9 == v5 then goto L37e218;
  #L37e20c.  v4:= 6I;
  #L37e20e.  if v9 != v4 then goto L37e214;
  #L37e212.  goto L37e218;
  #L37e214.  v7:= 0I;
  #L37e216.  goto L37e22c;
  #L37e218.  v7:= 0I;
  #L37e21a.  v9:= 7I;
  #L37e21c.  goto L37e22c;
  #L37e21e.  v14:= v14 + -48;
  #L37e222.  v4:= -v14 @kind int;
  #L37e224.  v4:= (`long`) v4 @kind i2l;
  #L37e226.  v11:= v4 @kind wide;
  #L37e228.  v7:= 0I;
  #L37e22a.  v9:= 2I;
  #L37e22c.  v16:= 0L;
  #L37e230.  goto L37e2fc;
  #L37e234.  call temp:= `a`(v0, v14) @signature `Le/e/c/a0/a;.a:(C)Z` @kind direct;
  #L37e23a.  v1:= temp;
  #L37e23c.  if v1 != 0 then goto L37e2a8;
  #L37e240.  if v9 != v15 then goto L37e288;
  #L37e244.  if v10 == 0 then goto L37e288;
  #L37e248.  v1:= -9223372036854775808L;
  #L37e24c.  v4:= lcmp(v11, v1);
  #L37e250.  if v4 != 0 then goto L37e258;
  #L37e254.  if v13 == 0 then goto L37e288;
  #L37e258.  v16:= 0L;
  #L37e25c.  v1:= lcmp(v11, v16);
  #L37e260.  if v1 != 0 then goto L37e268;
  #L37e264.  if v13 != 0 then goto L37e288;
  #L37e268.  if v13 == 0 then goto L37e26e;
  #L37e26c.  goto L37e270;
  #L37e26e.  v11:= -v11 @kind long;
  #L37e270.  v0.`e.e.c.a0.a.j` @type ^`long` := v11 @kind wide;
  #L37e274.  v1:= v0.`e.e.c.a0.a.e` @type ^`int`;
  #L37e278.  v1:= v1 + v3 @kind int;
  #L37e27a.  v0.`e.e.c.a0.a.e` @type ^`int` := v1;
  #L37e27e.  v1:= 15I;
  #L37e282.  v0.`e.e.c.a0.a.i` @type ^`int` := v1;
  #L37e286.  return v1;
  #L37e288.  if v9 == v15 then goto L37e29e;
  #L37e28c.  v1:= 4I;
  #L37e28e.  if v9 == v1 then goto L37e29e;
  #L37e292.  v1:= 7I;
  #L37e294.  if v9 != v1 then goto L37e29a;
  #L37e298.  goto L37e29e;
  #L37e29a.  v7:= 0I;
  #L37e29c.  return v7;
  #L37e29e.  v0.`e.e.c.a0.a.k` @type ^`int` := v3;
  #L37e2a2.  v1:= 16I;
  #L37e2a6.  goto L37e282;
  #L37e2a8.  v7:= 0I;
  #L37e2aa.  return v7;
  #L37e2ac.  v7:= 0I;
  #L37e2ae.  v16:= 0L;
  #L37e2b2.  if v9 != v15 then goto L37e2ba;
  #L37e2b6.  v9:= 3I;
  #L37e2b8.  goto L37e2fc;
  #L37e2ba.  return v7;
  #L37e2bc.  v4:= 6I;
  #L37e2be.  v7:= 0I;
  #L37e2c0.  v16:= 0L;
  #L37e2c4.  if v9 != 0 then goto L37e2ce;
  #L37e2c8.  v9:= 1I;
  #L37e2ca.  v13:= 1I;
  #L37e2cc.  goto L37e2fc;
  #L37e2ce.  if v9 != v5 then goto L37e2d4;
  #L37e2d2.  goto L37e2fa;
  #L37e2d4.  return v7;
  #L37e2d6.  v7:= 0I;
  #L37e2d8.  v16:= 0L;
  #L37e2dc.  if v9 == v15 then goto L37e2ea;
  #L37e2e0.  v4:= 4I;
  #L37e2e2.  if v9 != v4 then goto L37e2e8;
  #L37e2e6.  goto L37e2ea;
  #L37e2e8.  return v7;
  #L37e2ea.  v9:= 5I;
  #L37e2ec.  goto L37e2fc;
  #L37e2ee.  v4:= 6I;
  #L37e2f0.  v7:= 0I;
  #L37e2f2.  v16:= 0L;
  #L37e2f6.  if v9 != v5 then goto L37e304;
  #L37e2fa.  v9:= 6I;
  #L37e2fc.  v3:= v3 + 1;
  #L37e300.  goto L37e12e;
  #L37e304.  return v7;
}
procedure `char` `H`(`e.e.c.a0.a` v8 @kind this) @signature `Le/e/c/a0/a;.H:()C` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L37d580.  v0:= v8.`e.e.c.a0.a.e` @type ^`int`;
  #L37d584.  v1:= v8.`e.e.c.a0.a.f` @type ^`int`;
  #L37d588.  v2:= "Unterminated escape sequence" @kind object;
  #L37d58c.  v3:= 0I;
  #L37d58e.  v4:= 1I;
  #L37d590.  if v0 != v1 then goto L37d5aa;
  #L37d594.  call temp:= `a`(v8, v4) @signature `Le/e/c/a0/a;.a:(I)Z` @kind direct;
  #L37d59a.  v0:= temp;
  #L37d59c.  if v0 == 0 then goto L37d5a2;
  #L37d5a0.  goto L37d5aa;
  #L37d5a2.  call temp:= `c`(v8, v2) @signature `Le/e/c/a0/a;.c:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37d5a8.  throw v3;
  #L37d5aa.  v0:= v8.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37d5ae.  v1:= v8.`e.e.c.a0.a.e` @type ^`int`;
  #L37d5b2.  v5:= v1 + 1;
  #L37d5b6.  v8.`e.e.c.a0.a.e` @type ^`int` := v5;
  #L37d5ba.  v0:= v0[v1] @kind char;
  #L37d5be.  v1:= 10I;
  #L37d5c2.  if v0 == v1 then goto L37d714;
  #L37d5c6.  v4:= 34I;
  #L37d5ca.  if v0 == v4 then goto L37d726;
  #L37d5ce.  v4:= 39I;
  #L37d5d2.  if v0 == v4 then goto L37d726;
  #L37d5d6.  v4:= 47I;
  #L37d5da.  if v0 == v4 then goto L37d726;
  #L37d5de.  v4:= 92I;
  #L37d5e2.  if v0 == v4 then goto L37d726;
  #L37d5e6.  v4:= 98I;
  #L37d5ea.  if v0 == v4 then goto L37d70e;
  #L37d5ee.  v4:= 102I;
  #L37d5f2.  if v0 == v4 then goto L37d708;
  #L37d5f6.  v5:= 110I;
  #L37d5fa.  if v0 == v5 then goto L37d706;
  #L37d5fe.  v5:= 114I;
  #L37d602.  if v0 == v5 then goto L37d700;
  #L37d606.  v5:= 116I;
  #L37d60a.  if v0 == v5 then goto L37d6fa;
  #L37d60e.  v5:= 117I;
  #L37d612.  if v0 != v5 then goto L37d6ee;
  #L37d616.  v0:= v8.`e.e.c.a0.a.e` @type ^`int`;
  #L37d61a.  v5:= 4I;
  #L37d61c.  v0:= v0 + v5 @kind int;
  #L37d61e.  v6:= v8.`e.e.c.a0.a.f` @type ^`int`;
  #L37d622.  if v0 <= v6 then goto L37d63c;
  #L37d626.  call temp:= `a`(v8, v5) @signature `Le/e/c/a0/a;.a:(I)Z` @kind direct;
  #L37d62c.  v0:= temp;
  #L37d62e.  if v0 == 0 then goto L37d634;
  #L37d632.  goto L37d63c;
  #L37d634.  call temp:= `c`(v8, v2) @signature `Le/e/c/a0/a;.c:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37d63a.  throw v3;
  #L37d63c.  v0:= 0I;
  #L37d63e.  v2:= v8.`e.e.c.a0.a.e` @type ^`int`;
  #L37d642.  v3:= v2 + 4;
  #L37d646.  if v2 >= v3 then goto L37d6e2;
  #L37d64a.  v6:= v8.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37d64e.  v6:= v6[v2] @kind char;
  #L37d652.  v0:= v0 ^< 4;
  #L37d656.  v0:= (`char`) v0 @kind i2c;
  #L37d658.  v7:= 48I;
  #L37d65c.  if v6 < v7 then goto L37d672;
  #L37d660.  v7:= 57I;
  #L37d664.  if v6 > v7 then goto L37d672;
  #L37d668.  v6:= v6 + -48;
  #L37d66c.  v0:= v0 + v6 @kind int;
  #L37d66e.  v0:= (`char`) v0 @kind i2c;
  #L37d670.  goto L37d69c;
  #L37d672.  v7:= 97I;
  #L37d676.  if v6 < v7 then goto L37d686;
  #L37d67a.  if v6 > v4 then goto L37d686;
  #L37d67e.  v6:= v6 + -97;
  #L37d682.  v6:= v6 + v1 @kind int;
  #L37d684.  goto L37d66c;
  #L37d686.  v7:= 65I;
  #L37d68a.  if v6 < v7 then goto L37d6a2;
  #L37d68e.  v7:= 70I;
  #L37d692.  if v6 > v7 then goto L37d6a2;
  #L37d696.  v6:= v6 + -65;
  #L37d69a.  goto L37d682;
  #L37d69c.  v2:= v2 + 1;
  #L37d6a0.  goto L37d646;
  #L37d6a2.  v0:= new `java.lang.NumberFormatException`;
  #L37d6a6.  v1:= new `java.lang.StringBuilder`;
  #L37d6aa.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37d6b0.  v2:= "\\u" @kind object;
  #L37d6b4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d6ba.  v2:= new `java.lang.String`;
  #L37d6be.  v3:= v8.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37d6c2.  v4:= v8.`e.e.c.a0.a.e` @type ^`int`;
  #L37d6c6.  call `<init>`(v2, v3, v4, v5) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L37d6cc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d6d2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37d6d8.  v1:= temp @kind object;
  #L37d6da.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37d6e0.  throw v0;
  #L37d6e2.  v1:= v8.`e.e.c.a0.a.e` @type ^`int`;
  #L37d6e6.  v1:= v1 + v5 @kind int;
  #L37d6e8.  v8.`e.e.c.a0.a.e` @type ^`int` := v1;
  #L37d6ec.  return v0;
  #L37d6ee.  v0:= "Invalid escape sequence" @kind object;
  #L37d6f2.  call temp:= `c`(v8, v0) @signature `Le/e/c/a0/a;.c:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37d6f8.  throw v3;
  #L37d6fa.  v0:= 9I;
  #L37d6fe.  return v0;
  #L37d700.  v0:= 13I;
  #L37d704.  return v0;
  #L37d706.  return v1;
  #L37d708.  v0:= 12I;
  #L37d70c.  return v0;
  #L37d70e.  v0:= 8I;
  #L37d712.  return v0;
  #L37d714.  v1:= v8.`e.e.c.a0.a.g` @type ^`int`;
  #L37d718.  v1:= v1 + v4 @kind int;
  #L37d71a.  v8.`e.e.c.a0.a.g` @type ^`int` := v1;
  #L37d71e.  v1:= v8.`e.e.c.a0.a.e` @type ^`int`;
  #L37d722.  v8.`e.e.c.a0.a.h` @type ^`int` := v1;
  #L37d726.  return v0;
}
procedure `void` `I`(`e.e.c.a0.a` v4 @kind this) @signature `Le/e/c/a0/a;.I:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37f014.  v0:= v4.`e.e.c.a0.a.e` @type ^`int`;
  #L37f018.  v1:= v4.`e.e.c.a0.a.f` @type ^`int`;
  #L37f01c.  v2:= 1I;
  #L37f01e.  if v0 < v1 then goto L37f02e;
  #L37f022.  call temp:= `a`(v4, v2) @signature `Le/e/c/a0/a;.a:(I)Z` @kind direct;
  #L37f028.  v0:= temp;
  #L37f02a.  if v0 == 0 then goto L37f066;
  #L37f02e.  v0:= v4.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37f032.  v1:= v4.`e.e.c.a0.a.e` @type ^`int`;
  #L37f036.  v3:= v1 + 1;
  #L37f03a.  v4.`e.e.c.a0.a.e` @type ^`int` := v3;
  #L37f03e.  v0:= v0[v1] @kind char;
  #L37f042.  v1:= 10I;
  #L37f046.  if v0 != v1 then goto L37f05e;
  #L37f04a.  v0:= v4.`e.e.c.a0.a.g` @type ^`int`;
  #L37f04e.  v0:= v0 + v2 @kind int;
  #L37f050.  v4.`e.e.c.a0.a.g` @type ^`int` := v0;
  #L37f054.  v0:= v4.`e.e.c.a0.a.e` @type ^`int`;
  #L37f058.  v4.`e.e.c.a0.a.h` @type ^`int` := v0;
  #L37f05c.  goto L37f066;
  #L37f05e.  v1:= 13I;
  #L37f062.  if v0 != v1 then goto L37f014;
  #L37f066.  return @kind void;
}
procedure `void` `J`(`e.e.c.a0.a` v4 @kind this) @signature `Le/e/c/a0/a;.J:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37f078.  v0:= 0I;
  #L37f07a.  v1:= v4.`e.e.c.a0.a.e` @type ^`int`;
  #L37f07e.  v2:= v1 + v0 @kind int;
  #L37f082.  v3:= v4.`e.e.c.a0.a.f` @type ^`int`;
  #L37f086.  if v2 >= v3 then goto L37f11a;
  #L37f08a.  v2:= v4.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37f08e.  v1:= v1 + v0 @kind int;
  #L37f090.  v1:= v2[v1] @kind char;
  #L37f094.  v2:= 9I;
  #L37f098.  if v1 == v2 then goto L37f10e;
  #L37f09c.  v2:= 10I;
  #L37f0a0.  if v1 == v2 then goto L37f10e;
  #L37f0a4.  v2:= 12I;
  #L37f0a8.  if v1 == v2 then goto L37f10e;
  #L37f0ac.  v2:= 13I;
  #L37f0b0.  if v1 == v2 then goto L37f10e;
  #L37f0b4.  v2:= 32I;
  #L37f0b8.  if v1 == v2 then goto L37f10e;
  #L37f0bc.  v2:= 35I;
  #L37f0c0.  if v1 == v2 then goto L37f108;
  #L37f0c4.  v2:= 44I;
  #L37f0c8.  if v1 == v2 then goto L37f10e;
  #L37f0cc.  v2:= 47I;
  #L37f0d0.  if v1 == v2 then goto L37f108;
  #L37f0d4.  v2:= 61I;
  #L37f0d8.  if v1 == v2 then goto L37f108;
  #L37f0dc.  v2:= 123I;
  #L37f0e0.  if v1 == v2 then goto L37f10e;
  #L37f0e4.  v2:= 125I;
  #L37f0e8.  if v1 == v2 then goto L37f10e;
  #L37f0ec.  v2:= 58I;
  #L37f0f0.  if v1 == v2 then goto L37f10e;
  #L37f0f4.  v2:= 59I;
  #L37f0f8.  if v1 == v2 then goto L37f108;
  #L37f0fc.  goto L37f130;
  #L37f102.  v0:= v0 + 1;
  #L37f106.  goto L37f07a;
  #L37f108.  call `C`(v4) @signature `Le/e/c/a0/a;.C:()V` @kind direct;
  #L37f10e.  v1:= v4.`e.e.c.a0.a.e` @type ^`int`;
  #L37f112.  v1:= v1 + v0 @kind int;
  #L37f114.  v4.`e.e.c.a0.a.e` @type ^`int` := v1;
  #L37f118.  return @kind void;
  #L37f11a.  v1:= v1 + v0 @kind int;
  #L37f11c.  v4.`e.e.c.a0.a.e` @type ^`int` := v1;
  #L37f120.  v0:= 1I;
  #L37f122.  call temp:= `a`(v4, v0) @signature `Le/e/c/a0/a;.a:(I)Z` @kind direct;
  #L37f128.  v0:= temp;
  #L37f12a.  if v0 != 0 then goto L37f078;
  #L37f12e.  return @kind void;
  #L37f130.  switch v1
                  | 91 => goto L37f10e
                  | 92 => goto L37f108
                  | 93 => goto L37f10e
                  | else => goto L37f102;
}
procedure `boolean` `a`(`e.e.c.a0.a` v1 @kind this, `char` v2 ) @signature `Le/e/c/a0/a;.a:(C)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L37d3a4.  v0:= 9I;
  #L37d3a8.  if v2 == v0 then goto L37d41c;
  #L37d3ac.  v0:= 10I;
  #L37d3b0.  if v2 == v0 then goto L37d41c;
  #L37d3b4.  v0:= 12I;
  #L37d3b8.  if v2 == v0 then goto L37d41c;
  #L37d3bc.  v0:= 13I;
  #L37d3c0.  if v2 == v0 then goto L37d41c;
  #L37d3c4.  v0:= 32I;
  #L37d3c8.  if v2 == v0 then goto L37d41c;
  #L37d3cc.  v0:= 35I;
  #L37d3d0.  if v2 == v0 then goto L37d416;
  #L37d3d4.  v0:= 44I;
  #L37d3d8.  if v2 == v0 then goto L37d41c;
  #L37d3dc.  v0:= 47I;
  #L37d3e0.  if v2 == v0 then goto L37d416;
  #L37d3e4.  v0:= 61I;
  #L37d3e8.  if v2 == v0 then goto L37d416;
  #L37d3ec.  v0:= 123I;
  #L37d3f0.  if v2 == v0 then goto L37d41c;
  #L37d3f4.  v0:= 125I;
  #L37d3f8.  if v2 == v0 then goto L37d41c;
  #L37d3fc.  v0:= 58I;
  #L37d400.  if v2 == v0 then goto L37d41c;
  #L37d404.  v0:= 59I;
  #L37d408.  if v2 == v0 then goto L37d416;
  #L37d40c.  goto L37d420;
  #L37d412.  v2:= 1I;
  #L37d414.  return v2;
  #L37d416.  call `C`(v1) @signature `Le/e/c/a0/a;.C:()V` @kind direct;
  #L37d41c.  v2:= 0I;
  #L37d41e.  return v2;
  #L37d420.  switch v2
                  | 91 => goto L37d41c
                  | 92 => goto L37d416
                  | 93 => goto L37d41c
                  | else => goto L37d412;
}
procedure `boolean` `a`(`e.e.c.a0.a` v6 @kind this, `int` v7 ) @signature `Le/e/c/a0/a;.a:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L37d2a4.  v0:= v6.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37d2a8.  v1:= v6.`e.e.c.a0.a.h` @type ^`int`;
  #L37d2ac.  v2:= v6.`e.e.c.a0.a.e` @type ^`int`;
  #L37d2b0.  v1:= v1 - v2 @kind int;
  #L37d2b2.  v6.`e.e.c.a0.a.h` @type ^`int` := v1;
  #L37d2b6.  v1:= v6.`e.e.c.a0.a.f` @type ^`int`;
  #L37d2ba.  v3:= 0I;
  #L37d2bc.  if v1 == v2 then goto L37d2d2;
  #L37d2c0.  v1:= v1 - v2 @kind int;
  #L37d2c2.  v6.`e.e.c.a0.a.f` @type ^`int` := v1;
  #L37d2c6.  v1:= v6.`e.e.c.a0.a.f` @type ^`int`;
  #L37d2ca.  call `arraycopy`(v0, v2, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L37d2d0.  goto L37d2d6;
  #L37d2d2.  v6.`e.e.c.a0.a.f` @type ^`int` := v3;
  #L37d2d6.  v6.`e.e.c.a0.a.e` @type ^`int` := v3;
  #L37d2da.  v1:= v6.`e.e.c.a0.a.b` @type ^`java.io.Reader` @kind object;
  #L37d2de.  v2:= v6.`e.e.c.a0.a.f` @type ^`int`;
  #L37d2e2.  v4:= length @variable v0;
  #L37d2e4.  v4:= v4 - v2 @kind int;
  #L37d2e6.  call temp:= `read`(v1, v0, v2, v4) @signature `Ljava/io/Reader;.read:([CII)I` @kind virtual;
  #L37d2ec.  v1:= temp;
  #L37d2ee.  v2:= -1I;
  #L37d2f0.  if v1 == v2 then goto L37d346;
  #L37d2f4.  v2:= v6.`e.e.c.a0.a.f` @type ^`int`;
  #L37d2f8.  v2:= v2 + v1 @kind int;
  #L37d2fa.  v6.`e.e.c.a0.a.f` @type ^`int` := v2;
  #L37d2fe.  v1:= v6.`e.e.c.a0.a.g` @type ^`int`;
  #L37d302.  v2:= 1I;
  #L37d304.  if v1 != 0 then goto L37d33c;
  #L37d308.  v1:= v6.`e.e.c.a0.a.h` @type ^`int`;
  #L37d30c.  if v1 != 0 then goto L37d33c;
  #L37d310.  v4:= v6.`e.e.c.a0.a.f` @type ^`int`;
  #L37d314.  if v4 <= 0 then goto L37d33c;
  #L37d318.  v4:= v0[v3] @kind char;
  #L37d31c.  v5:= 65279I;
  #L37d322.  if v4 != v5 then goto L37d33c;
  #L37d326.  v4:= v6.`e.e.c.a0.a.e` @type ^`int`;
  #L37d32a.  v4:= v4 + v2 @kind int;
  #L37d32c.  v6.`e.e.c.a0.a.e` @type ^`int` := v4;
  #L37d330.  v1:= v1 + 1;
  #L37d334.  v6.`e.e.c.a0.a.h` @type ^`int` := v1;
  #L37d338.  v7:= v7 + 1;
  #L37d33c.  v1:= v6.`e.e.c.a0.a.f` @type ^`int`;
  #L37d340.  if v1 < v7 then goto L37d2da;
  #L37d344.  return v2;
  #L37d346.  return v3;
}
procedure `int` `b`(`e.e.c.a0.a` v7 @kind this, `boolean` v8 ) @signature `Le/e/c/a0/a;.b:(Z)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L37de8c.  v0:= v7.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37de90.  v1:= v7.`e.e.c.a0.a.e` @type ^`int`;
  #L37de94.  v2:= v7.`e.e.c.a0.a.f` @type ^`int`;
  #L37de98.  v3:= 1I;
  #L37de9a.  if v1 != v2 then goto L37def4;
  #L37de9e.  v7.`e.e.c.a0.a.e` @type ^`int` := v1;
  #L37dea2.  call temp:= `a`(v7, v3) @signature `Le/e/c/a0/a;.a:(I)Z` @kind direct;
  #L37dea8.  v1:= temp;
  #L37deaa.  if v1 != 0 then goto L37deec;
  #L37deae.  if v8 != 0 then goto L37deb6;
  #L37deb2.  v8:= -1I;
  #L37deb4.  return v8;
  #L37deb6.  v8:= new `java.io.EOFException`;
  #L37deba.  v0:= new `java.lang.StringBuilder`;
  #L37debe.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37dec4.  v1:= "End of input" @kind object;
  #L37dec8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37dece.  call temp:= `s`(v7) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37ded4.  v1:= temp @kind object;
  #L37ded6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37dedc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37dee2.  v0:= temp @kind object;
  #L37dee4.  call `<init>`(v8, v0) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37deea.  throw v8;
  #L37deec.  v1:= v7.`e.e.c.a0.a.e` @type ^`int`;
  #L37def0.  v2:= v7.`e.e.c.a0.a.f` @type ^`int`;
  #L37def4.  v4:= v1 + 1;
  #L37def8.  v1:= v0[v1] @kind char;
  #L37defc.  v5:= 10I;
  #L37df00.  if v1 != v5 then goto L37df14;
  #L37df04.  v1:= v7.`e.e.c.a0.a.g` @type ^`int`;
  #L37df08.  v1:= v1 + v3 @kind int;
  #L37df0a.  v7.`e.e.c.a0.a.g` @type ^`int` := v1;
  #L37df0e.  v7.`e.e.c.a0.a.h` @type ^`int` := v4;
  #L37df12.  goto L37dfd4;
  #L37df14.  v5:= 32I;
  #L37df18.  if v1 == v5 then goto L37dfd4;
  #L37df1c.  v5:= 13I;
  #L37df20.  if v1 == v5 then goto L37dfd4;
  #L37df24.  v5:= 9I;
  #L37df28.  if v1 != v5 then goto L37df2e;
  #L37df2c.  goto L37dfd4;
  #L37df2e.  v5:= 47I;
  #L37df32.  if v1 != v5 then goto L37dfbe;
  #L37df36.  v7.`e.e.c.a0.a.e` @type ^`int` := v4;
  #L37df3a.  v6:= 2I;
  #L37df3c.  if v4 != v2 then goto L37df62;
  #L37df40.  v2:= v7.`e.e.c.a0.a.e` @type ^`int`;
  #L37df44.  v2:= v2 - v3 @kind int;
  #L37df46.  v7.`e.e.c.a0.a.e` @type ^`int` := v2;
  #L37df4a.  call temp:= `a`(v7, v6) @signature `Le/e/c/a0/a;.a:(I)Z` @kind direct;
  #L37df50.  v2:= temp;
  #L37df52.  v4:= v7.`e.e.c.a0.a.e` @type ^`int`;
  #L37df56.  v4:= v4 + v3 @kind int;
  #L37df58.  v7.`e.e.c.a0.a.e` @type ^`int` := v4;
  #L37df5c.  if v2 != 0 then goto L37df62;
  #L37df60.  return v1;
  #L37df62.  call `C`(v7) @signature `Le/e/c/a0/a;.C:()V` @kind direct;
  #L37df68.  v2:= v7.`e.e.c.a0.a.e` @type ^`int`;
  #L37df6c.  v3:= v0[v2] @kind char;
  #L37df70.  v4:= 42I;
  #L37df74.  if v3 == v4 then goto L37df8e;
  #L37df78.  if v3 == v5 then goto L37df7e;
  #L37df7c.  return v1;
  #L37df7e.  v2:= v2 + 1;
  #L37df82.  v7.`e.e.c.a0.a.e` @type ^`int` := v2;
  #L37df86.  call `I`(v7) @signature `Le/e/c/a0/a;.I:()V` @kind direct;
  #L37df8c.  goto L37de90;
  #L37df8e.  v2:= v2 + 1;
  #L37df92.  v7.`e.e.c.a0.a.e` @type ^`int` := v2;
  #L37df96.  v1:= "*/" @kind object;
  #L37df9a.  call temp:= `b`(v7, v1) @signature `Le/e/c/a0/a;.b:(Ljava/lang/String;)Z` @kind direct;
  #L37dfa0.  v1:= temp;
  #L37dfa2.  if v1 == 0 then goto L37dfb0;
  #L37dfa6.  v1:= v7.`e.e.c.a0.a.e` @type ^`int`;
  #L37dfaa.  v1:= v1 + v6 @kind int;
  #L37dfac.  goto L37de94;
  #L37dfb0.  v8:= "Unterminated comment" @kind object;
  #L37dfb4.  call temp:= `c`(v7, v8) @signature `Le/e/c/a0/a;.c:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37dfba.  v8:= 0I;
  #L37dfbc.  throw v8;
  #L37dfbe.  v2:= 35I;
  #L37dfc2.  v7.`e.e.c.a0.a.e` @type ^`int` := v4;
  #L37dfc6.  if v1 != v2 then goto L37dfd2;
  #L37dfca.  call `C`(v7) @signature `Le/e/c/a0/a;.C:()V` @kind direct;
  #L37dfd0.  goto L37df86;
  #L37dfd2.  return v1;
  #L37dfd4.  v1:= v4;
  #L37dfd6.  goto L37de98;
}
procedure `java.lang.String` `b`(`e.e.c.a0.a` v10 @kind this, `char` v11 ) @signature `Le/e/c/a0/a;.b:(C)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L37e530.  v0:= v10.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37e534.  v1:= 0I;
  #L37e536.  v2:= v1 @kind object;
  #L37e538.  v3:= v10.`e.e.c.a0.a.e` @type ^`int`;
  #L37e53c.  v4:= v10.`e.e.c.a0.a.f` @type ^`int`;
  #L37e540.  v5:= v3;
  #L37e542.  v6:= 16I;
  #L37e546.  v7:= 1I;
  #L37e548.  if v3 >= v4 then goto L37e5e0;
  #L37e54c.  v8:= v3 + 1;
  #L37e550.  v3:= v0[v3] @kind char;
  #L37e554.  if v3 != v11 then goto L37e580;
  #L37e558.  v10.`e.e.c.a0.a.e` @type ^`int` := v8;
  #L37e55c.  v8:= v8 - v5 @kind int;
  #L37e55e.  v8:= v8 - v7 @kind int;
  #L37e560.  if v2 != 0 then goto L37e570;
  #L37e564.  v11:= new `java.lang.String`;
  #L37e568.  call `<init>`(v11, v0, v5, v8) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L37e56e.  return v11 @kind object;
  #L37e570.  call temp:= `append`(v2, v0, v5, v8) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e576.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37e57c.  v11:= temp @kind object;
  #L37e57e.  return v11 @kind object;
  #L37e580.  v9:= 92I;
  #L37e584.  if v3 != v9 then goto L37e5c6;
  #L37e588.  v10.`e.e.c.a0.a.e` @type ^`int` := v8;
  #L37e58c.  v8:= v8 - v5 @kind int;
  #L37e58e.  v8:= v8 - v7 @kind int;
  #L37e590.  if v2 != 0 then goto L37e5b0;
  #L37e594.  v2:= v8 + 1;
  #L37e598.  v2:= v2 * 2;
  #L37e59c.  v3:= new `java.lang.StringBuilder`;
  #L37e5a0.  call temp:= `max`(v2, v6) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L37e5a6.  v2:= temp;
  #L37e5a8.  call `<init>`(v3, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L37e5ae.  v2:= v3 @kind object;
  #L37e5b0.  call temp:= `append`(v2, v0, v5, v8) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e5b6.  call temp:= `H`(v10) @signature `Le/e/c/a0/a;.H:()C` @kind direct;
  #L37e5bc.  v3:= temp;
  #L37e5be.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e5c4.  goto L37e538;
  #L37e5c6.  v6:= 10I;
  #L37e5ca.  if v3 != v6 then goto L37e5dc;
  #L37e5ce.  v3:= v10.`e.e.c.a0.a.g` @type ^`int`;
  #L37e5d2.  v3:= v3 + v7 @kind int;
  #L37e5d4.  v10.`e.e.c.a0.a.g` @type ^`int` := v3;
  #L37e5d8.  v10.`e.e.c.a0.a.h` @type ^`int` := v8;
  #L37e5dc.  v3:= v8;
  #L37e5de.  goto L37e542;
  #L37e5e0.  if v2 != 0 then goto L37e600;
  #L37e5e4.  v2:= v3 - v5 @kind int;
  #L37e5e8.  v2:= v2 * 2;
  #L37e5ec.  v4:= new `java.lang.StringBuilder`;
  #L37e5f0.  call temp:= `max`(v2, v6) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L37e5f6.  v2:= temp;
  #L37e5f8.  call `<init>`(v4, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L37e5fe.  v2:= v4 @kind object;
  #L37e600.  v4:= v3 - v5 @kind int;
  #L37e604.  call temp:= `append`(v2, v0, v5, v4) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e60a.  v10.`e.e.c.a0.a.e` @type ^`int` := v3;
  #L37e60e.  call temp:= `a`(v10, v7) @signature `Le/e/c/a0/a;.a:(I)Z` @kind direct;
  #L37e614.  v3:= temp;
  #L37e616.  if v3 == 0 then goto L37e61c;
  #L37e61a.  goto L37e538;
  #L37e61c.  v11:= "Unterminated string" @kind object;
  #L37e620.  call temp:= `c`(v10, v11) @signature `Le/e/c/a0/a;.c:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37e626.  throw v1;
}
procedure `void` `b`(`e.e.c.a0.a` v3 @kind this, `int` v4 ) @signature `Le/e/c/a0/a;.b:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L37ef10.  v0:= v3.`e.e.c.a0.a.n` @type ^`int`;
  #L37ef14.  v1:= v3.`e.e.c.a0.a.m` @type ^`int`[] @kind object;
  #L37ef18.  v2:= length @variable v1;
  #L37ef1a.  if v0 != v2 then goto L37ef52;
  #L37ef1e.  v0:= v0 * 2;
  #L37ef22.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L37ef28.  v1:= temp @kind object;
  #L37ef2a.  v3.`e.e.c.a0.a.m` @type ^`int`[] := v1 @kind object;
  #L37ef2e.  v1:= v3.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37ef32.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L37ef38.  v1:= temp @kind object;
  #L37ef3a.  v3.`e.e.c.a0.a.p` @type ^`int`[] := v1 @kind object;
  #L37ef3e.  v1:= v3.`e.e.c.a0.a.o` @type ^`java.lang.String`[] @kind object;
  #L37ef42.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L37ef48.  v0:= temp @kind object;
  #L37ef4a.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L37ef4e.  v3.`e.e.c.a0.a.o` @type ^`java.lang.String`[] := v0 @kind object;
  #L37ef52.  v0:= v3.`e.e.c.a0.a.m` @type ^`int`[] @kind object;
  #L37ef56.  v1:= v3.`e.e.c.a0.a.n` @type ^`int`;
  #L37ef5a.  v2:= v1 + 1;
  #L37ef5e.  v3.`e.e.c.a0.a.n` @type ^`int` := v2;
  #L37ef62.  v0[v1]:= v4;
  #L37ef66.  return @kind void;
}
procedure `boolean` `b`(`e.e.c.a0.a` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Le/e/c/a0/a;.b:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L37d4ec.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L37d4f2.  v0:= temp;
  #L37d4f4.  v1:= v6.`e.e.c.a0.a.e` @type ^`int`;
  #L37d4f8.  v1:= v1 + v0 @kind int;
  #L37d4fa.  v2:= v6.`e.e.c.a0.a.f` @type ^`int`;
  #L37d4fe.  v3:= 0I;
  #L37d500.  if v1 <= v2 then goto L37d514;
  #L37d504.  call temp:= `a`(v6, v0) @signature `Le/e/c/a0/a;.a:(I)Z` @kind direct;
  #L37d50a.  v1:= temp;
  #L37d50c.  if v1 == 0 then goto L37d512;
  #L37d510.  goto L37d514;
  #L37d512.  return v3;
  #L37d514.  v1:= v6.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37d518.  v2:= v6.`e.e.c.a0.a.e` @type ^`int`;
  #L37d51c.  v1:= v1[v2] @kind char;
  #L37d520.  v4:= 10I;
  #L37d524.  v5:= 1I;
  #L37d526.  if v1 != v4 then goto L37d53e;
  #L37d52a.  v1:= v6.`e.e.c.a0.a.g` @type ^`int`;
  #L37d52e.  v1:= v1 + v5 @kind int;
  #L37d530.  v6.`e.e.c.a0.a.g` @type ^`int` := v1;
  #L37d534.  v2:= v2 + 1;
  #L37d538.  v6.`e.e.c.a0.a.h` @type ^`int` := v2;
  #L37d53c.  goto L37d55c;
  #L37d53e.  if v3 >= v0 then goto L37d56e;
  #L37d542.  v1:= v6.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37d546.  v2:= v6.`e.e.c.a0.a.e` @type ^`int`;
  #L37d54a.  v2:= v2 + v3 @kind int;
  #L37d54c.  v1:= v1[v2] @kind char;
  #L37d550.  call temp:= `charAt`(v7, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L37d556.  v2:= temp;
  #L37d558.  if v1 == v2 then goto L37d568;
  #L37d55c.  v1:= v6.`e.e.c.a0.a.e` @type ^`int`;
  #L37d560.  v1:= v1 + v5 @kind int;
  #L37d562.  v6.`e.e.c.a0.a.e` @type ^`int` := v1;
  #L37d566.  goto L37d4f4;
  #L37d568.  v3:= v3 + 1;
  #L37d56c.  goto L37d53e;
  #L37d56e.  return v5;
}
procedure `java.io.IOException` `c`(`e.e.c.a0.a` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Le/e/c/a0/a;.c:(Ljava/lang/String;)Ljava/io/IOException;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L37e318.  v0:= new `e.e.c.a0.d`;
  #L37e31c.  v1:= new `java.lang.StringBuilder`;
  #L37e320.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37e326.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e32c.  call temp:= `s`(v2) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37e332.  v3:= temp @kind object;
  #L37e334.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e33a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37e340.  v3:= temp @kind object;
  #L37e342.  call `<init>`(v0, v3) @signature `Le/e/c/a0/d;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37e348.  throw v0;
}
procedure `void` `c`(`e.e.c.a0.a` v6 @kind this, `char` v7 ) @signature `Le/e/c/a0/a;.c:(C)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L37ef90.  v0:= v6.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37ef94.  v1:= v6.`e.e.c.a0.a.e` @type ^`int`;
  #L37ef98.  v2:= v6.`e.e.c.a0.a.f` @type ^`int`;
  #L37ef9c.  v3:= 1I;
  #L37ef9e.  if v1 >= v2 then goto L37efe2;
  #L37efa2.  v4:= v1 + 1;
  #L37efa6.  v1:= v0[v1] @kind char;
  #L37efaa.  if v1 != v7 then goto L37efb4;
  #L37efae.  v6.`e.e.c.a0.a.e` @type ^`int` := v4;
  #L37efb2.  return @kind void;
  #L37efb4.  v5:= 92I;
  #L37efb8.  if v1 != v5 then goto L37efc8;
  #L37efbc.  v6.`e.e.c.a0.a.e` @type ^`int` := v4;
  #L37efc0.  call temp:= `H`(v6) @signature `Le/e/c/a0/a;.H:()C` @kind direct;
  #L37efc6.  goto L37ef94;
  #L37efc8.  v5:= 10I;
  #L37efcc.  if v1 != v5 then goto L37efde;
  #L37efd0.  v1:= v6.`e.e.c.a0.a.g` @type ^`int`;
  #L37efd4.  v1:= v1 + v3 @kind int;
  #L37efd6.  v6.`e.e.c.a0.a.g` @type ^`int` := v1;
  #L37efda.  v6.`e.e.c.a0.a.h` @type ^`int` := v4;
  #L37efde.  v1:= v4;
  #L37efe0.  goto L37ef9c;
  #L37efe2.  v6.`e.e.c.a0.a.e` @type ^`int` := v1;
  #L37efe6.  call temp:= `a`(v6, v3) @signature `Le/e/c/a0/a;.a:(I)Z` @kind direct;
  #L37efec.  v1:= temp;
  #L37efee.  if v1 == 0 then goto L37eff4;
  #L37eff2.  goto L37ef94;
  #L37eff4.  v7:= "Unterminated string" @kind object;
  #L37eff8.  call temp:= `c`(v6, v7) @signature `Le/e/c/a0/a;.c:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37effe.  v7:= 0I;
  #L37f000.  throw v7;
}
procedure `e.e.c.a0.b` `A`(`e.e.c.a0.a` v1 @kind this) @signature `Le/e/c/a0/a;.A:()Le/e/c/a0/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37d738.  v0:= v1.`e.e.c.a0.a.i` @type ^`int`;
  #L37d73c.  if v0 != 0 then goto L37d748;
  #L37d740.  call temp:= `m`(v1) @signature `Le/e/c/a0/a;.m:()I` @kind virtual;
  #L37d746.  v0:= temp;
  #L37d748.  goto L37d798;
  #L37d74e.  v0:= new `java.lang.AssertionError`;
  #L37d752.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L37d758.  throw v0;
  #L37d75a.  v0:= `@@e.e.c.a0.b.k` @type ^`e.e.c.a0.b` @kind object;
  #L37d75e.  return v0 @kind object;
  #L37d760.  v0:= `@@e.e.c.a0.b.h` @type ^`e.e.c.a0.b` @kind object;
  #L37d764.  return v0 @kind object;
  #L37d766.  v0:= `@@e.e.c.a0.b.f` @type ^`e.e.c.a0.b` @kind object;
  #L37d76a.  return v0 @kind object;
  #L37d76c.  v0:= `@@e.e.c.a0.b.g` @type ^`e.e.c.a0.b` @kind object;
  #L37d770.  return v0 @kind object;
  #L37d772.  v0:= `@@e.e.c.a0.b.j` @type ^`e.e.c.a0.b` @kind object;
  #L37d776.  return v0 @kind object;
  #L37d778.  v0:= `@@e.e.c.a0.b.i` @type ^`e.e.c.a0.b` @kind object;
  #L37d77c.  return v0 @kind object;
  #L37d77e.  v0:= `@@e.e.c.a0.b.c` @type ^`e.e.c.a0.b` @kind object;
  #L37d782.  return v0 @kind object;
  #L37d784.  v0:= `@@e.e.c.a0.b.b` @type ^`e.e.c.a0.b` @kind object;
  #L37d788.  return v0 @kind object;
  #L37d78a.  v0:= `@@e.e.c.a0.b.e` @type ^`e.e.c.a0.b` @kind object;
  #L37d78e.  return v0 @kind object;
  #L37d790.  v0:= `@@e.e.c.a0.b.d` @type ^`e.e.c.a0.b` @kind object;
  #L37d794.  return v0 @kind object;
  #L37d796.  
  #L37d798.  switch v0
                  | 1 => goto L37d790
                  | 2 => goto L37d78a
                  | 3 => goto L37d784
                  | 4 => goto L37d77e
                  | 5 => goto L37d778
                  | 6 => goto L37d778
                  | 7 => goto L37d772
                  | 8 => goto L37d76c
                  | 9 => goto L37d76c
                  | 10 => goto L37d76c
                  | 11 => goto L37d76c
                  | 12 => goto L37d766
                  | 13 => goto L37d766
                  | 14 => goto L37d766
                  | 15 => goto L37d760
                  | 16 => goto L37d760
                  | 17 => goto L37d75a
                  | else => goto L37d74e;
}
procedure `void` `B`(`e.e.c.a0.a` v5 @kind this) @signature `Le/e/c/a0/a;.B:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L37f154.  v0:= 0I;
  #L37f156.  v1:= 0I;
  #L37f158.  v2:= v5.`e.e.c.a0.a.i` @type ^`int`;
  #L37f15c.  if v2 != 0 then goto L37f168;
  #L37f160.  call temp:= `m`(v5) @signature `Le/e/c/a0/a;.m:()I` @kind virtual;
  #L37f166.  v2:= temp;
  #L37f168.  v3:= 3I;
  #L37f16a.  v4:= 1I;
  #L37f16c.  if v2 != v3 then goto L37f17c;
  #L37f170.  call `b`(v5, v4) @signature `Le/e/c/a0/a;.b:(I)V` @kind direct;
  #L37f176.  v1:= v1 + 1;
  #L37f17a.  goto L37f20c;
  #L37f17c.  if v2 != v4 then goto L37f188;
  #L37f180.  call `b`(v5, v3) @signature `Le/e/c/a0/a;.b:(I)V` @kind direct;
  #L37f186.  goto L37f176;
  #L37f188.  v3:= 4I;
  #L37f18a.  if v2 != v3 then goto L37f19e;
  #L37f18e.  v2:= v5.`e.e.c.a0.a.n` @type ^`int`;
  #L37f192.  v2:= v2 - v4 @kind int;
  #L37f194.  v5.`e.e.c.a0.a.n` @type ^`int` := v2;
  #L37f198.  v1:= v1 + -1;
  #L37f19c.  goto L37f20c;
  #L37f19e.  v3:= 2I;
  #L37f1a0.  if v2 != v3 then goto L37f1a6;
  #L37f1a4.  goto L37f18e;
  #L37f1a6.  v3:= 14I;
  #L37f1aa.  if v2 == v3 then goto L37f206;
  #L37f1ae.  v3:= 10I;
  #L37f1b2.  if v2 != v3 then goto L37f1b8;
  #L37f1b6.  goto L37f206;
  #L37f1b8.  v3:= 8I;
  #L37f1bc.  if v2 == v3 then goto L37f1fa;
  #L37f1c0.  v3:= 12I;
  #L37f1c4.  if v2 != v3 then goto L37f1ca;
  #L37f1c8.  goto L37f1fa;
  #L37f1ca.  v3:= 9I;
  #L37f1ce.  if v2 == v3 then goto L37f1f4;
  #L37f1d2.  v3:= 13I;
  #L37f1d6.  if v2 != v3 then goto L37f1dc;
  #L37f1da.  goto L37f1f4;
  #L37f1dc.  v3:= 16I;
  #L37f1e0.  if v2 != v3 then goto L37f20c;
  #L37f1e4.  v2:= v5.`e.e.c.a0.a.e` @type ^`int`;
  #L37f1e8.  v3:= v5.`e.e.c.a0.a.k` @type ^`int`;
  #L37f1ec.  v2:= v2 + v3 @kind int;
  #L37f1ee.  v5.`e.e.c.a0.a.e` @type ^`int` := v2;
  #L37f1f2.  goto L37f20c;
  #L37f1f4.  v2:= 34I;
  #L37f1f8.  goto L37f1fe;
  #L37f1fa.  v2:= 39I;
  #L37f1fe.  call `c`(v5, v2) @signature `Le/e/c/a0/a;.c:(C)V` @kind direct;
  #L37f204.  goto L37f20c;
  #L37f206.  call `J`(v5) @signature `Le/e/c/a0/a;.J:()V` @kind direct;
  #L37f20c.  v5.`e.e.c.a0.a.i` @type ^`int` := v0;
  #L37f210.  if v1 != 0 then goto L37f158;
  #L37f214.  v0:= v5.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37f218.  v1:= v5.`e.e.c.a0.a.n` @type ^`int`;
  #L37f21c.  v2:= v1 + -1;
  #L37f220.  v3:= v0[v2];
  #L37f224.  v3:= v3 + v4 @kind int;
  #L37f226.  v0[v2]:= v3;
  #L37f22a.  v0:= v5.`e.e.c.a0.a.o` @type ^`java.lang.String`[] @kind object;
  #L37f22e.  v1:= v1 - v4 @kind int;
  #L37f230.  v2:= "null" @kind object;
  #L37f234.  v0[v1]:= v2 @kind object;
  #L37f238.  return @kind void;
}
procedure `void` `a`(`e.e.c.a0.a` v0 @kind this, `boolean` v1 ) @signature `Le/e/c/a0/a;.a:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L37ef78.  v0.`e.e.c.a0.a.c` @type ^`boolean` := v1 @kind boolean;
  #L37ef7c.  return @kind void;
}
procedure `void` `close`(`e.e.c.a0.a` v3 @kind this) @signature `Le/e/c/a0/a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37ec98.  v0:= 0I;
  #L37ec9a.  v3.`e.e.c.a0.a.i` @type ^`int` := v0;
  #L37ec9e.  v1:= v3.`e.e.c.a0.a.m` @type ^`int`[] @kind object;
  #L37eca2.  v2:= 8I;
  #L37eca6.  v1[v0]:= v2;
  #L37ecaa.  v0:= 1I;
  #L37ecac.  v3.`e.e.c.a0.a.n` @type ^`int` := v0;
  #L37ecb0.  v0:= v3.`e.e.c.a0.a.b` @type ^`java.io.Reader` @kind object;
  #L37ecb4.  call `close`(v0) @signature `Ljava/io/Reader;.close:()V` @kind virtual;
  #L37ecba.  return @kind void;
}
procedure `void` `k`(`e.e.c.a0.a` v3 @kind this) @signature `Le/e/c/a0/a;.k:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37eb6c.  v0:= v3.`e.e.c.a0.a.i` @type ^`int`;
  #L37eb70.  if v0 != 0 then goto L37eb7c;
  #L37eb74.  call temp:= `m`(v3) @signature `Le/e/c/a0/a;.m:()I` @kind virtual;
  #L37eb7a.  v0:= temp;
  #L37eb7c.  v1:= 3I;
  #L37eb7e.  if v0 != v1 then goto L37eba0;
  #L37eb82.  v0:= 1I;
  #L37eb84.  call `b`(v3, v0) @signature `Le/e/c/a0/a;.b:(I)V` @kind direct;
  #L37eb8a.  v1:= v3.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37eb8e.  v2:= v3.`e.e.c.a0.a.n` @type ^`int`;
  #L37eb92.  v2:= v2 - v0 @kind int;
  #L37eb94.  v0:= 0I;
  #L37eb96.  v1[v2]:= v0;
  #L37eb9a.  v3.`e.e.c.a0.a.i` @type ^`int` := v0;
  #L37eb9e.  return @kind void;
  #L37eba0.  v0:= new `java.lang.IllegalStateException`;
  #L37eba4.  v1:= new `java.lang.StringBuilder`;
  #L37eba8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37ebae.  v2:= "Expected BEGIN_ARRAY but was " @kind object;
  #L37ebb2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37ebb8.  call temp:= `A`(v3) @signature `Le/e/c/a0/a;.A:()Le/e/c/a0/b;` @kind virtual;
  #L37ebbe.  v2:= temp @kind object;
  #L37ebc0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37ebc6.  call temp:= `s`(v3) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37ebcc.  v2:= temp @kind object;
  #L37ebce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37ebd4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37ebda.  v1:= temp @kind object;
  #L37ebdc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37ebe2.  throw v0;
}
procedure `void` `l`(`e.e.c.a0.a` v3 @kind this) @signature `Le/e/c/a0/a;.l:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37ebf4.  v0:= v3.`e.e.c.a0.a.i` @type ^`int`;
  #L37ebf8.  if v0 != 0 then goto L37ec04;
  #L37ebfc.  call temp:= `m`(v3) @signature `Le/e/c/a0/a;.m:()I` @kind virtual;
  #L37ec02.  v0:= temp;
  #L37ec04.  v1:= 1I;
  #L37ec06.  if v0 != v1 then goto L37ec1a;
  #L37ec0a.  v0:= 3I;
  #L37ec0c.  call `b`(v3, v0) @signature `Le/e/c/a0/a;.b:(I)V` @kind direct;
  #L37ec12.  v0:= 0I;
  #L37ec14.  v3.`e.e.c.a0.a.i` @type ^`int` := v0;
  #L37ec18.  return @kind void;
  #L37ec1a.  v0:= new `java.lang.IllegalStateException`;
  #L37ec1e.  v1:= new `java.lang.StringBuilder`;
  #L37ec22.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37ec28.  v2:= "Expected BEGIN_OBJECT but was " @kind object;
  #L37ec2c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37ec32.  call temp:= `A`(v3) @signature `Le/e/c/a0/a;.A:()Le/e/c/a0/b;` @kind virtual;
  #L37ec38.  v2:= temp @kind object;
  #L37ec3a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37ec40.  call temp:= `s`(v3) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37ec46.  v2:= temp @kind object;
  #L37ec48.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37ec4e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37ec54.  v1:= temp @kind object;
  #L37ec56.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37ec5c.  throw v0;
}
procedure `int` `m`(`e.e.c.a0.a` v16 @kind this) @signature `Le/e/c/a0/a;.m:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L37d994.  v0:= v16 @kind object;
  #L37d998.  v1:= v0.`e.e.c.a0.a.m` @type ^`int`[] @kind object;
  #L37d99c.  v2:= v0.`e.e.c.a0.a.n` @type ^`int`;
  #L37d9a0.  v3:= v2 + -1;
  #L37d9a4.  v3:= v1[v3];
  #L37d9a8.  v4:= 8I;
  #L37d9ac.  v5:= 39I;
  #L37d9b0.  v6:= 34I;
  #L37d9b4.  v7:= 93I;
  #L37d9b8.  v8:= 3I;
  #L37d9ba.  v9:= 7I;
  #L37d9bc.  v10:= 59I;
  #L37d9c0.  v11:= 44I;
  #L37d9c4.  v12:= 4I;
  #L37d9c6.  v13:= 2I;
  #L37d9c8.  v14:= 0I;
  #L37d9ca.  v15:= 1I;
  #L37d9cc.  if v3 != v15 then goto L37d9da;
  #L37d9d0.  v2:= v2 - v15 @kind int;
  #L37d9d2.  v1[v2]:= v13;
  #L37d9d6.  goto L37dada;
  #L37d9da.  if v3 != v13 then goto L37da0c;
  #L37d9de.  call temp:= `b`(v0, v15) @signature `Le/e/c/a0/a;.b:(Z)I` @kind direct;
  #L37d9e4.  v1:= temp;
  #L37d9e6.  if v1 == v11 then goto L37dada;
  #L37d9ea.  if v1 == v10 then goto L37da04;
  #L37d9ee.  if v1 != v7 then goto L37d9f8;
  #L37d9f2.  v0.`e.e.c.a0.a.i` @type ^`int` := v12;
  #L37d9f6.  return v12;
  #L37d9f8.  v1:= "Unterminated array" @kind object;
  #L37d9fc.  call temp:= `c`(v0, v1) @signature `Le/e/c/a0/a;.c:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37da02.  throw v14;
  #L37da04.  call `C`(v16) @signature `Le/e/c/a0/a;.C:()V` @kind direct;
  #L37da0a.  goto L37dada;
  #L37da0c.  v13:= 5I;
  #L37da0e.  if v3 == v8 then goto L37dbc2;
  #L37da12.  if v3 != v13 then goto L37da1a;
  #L37da16.  goto L37dbc2;
  #L37da1a.  if v3 != v12 then goto L37da82;
  #L37da1e.  v2:= v2 - v15 @kind int;
  #L37da20.  v1[v2]:= v13;
  #L37da24.  call temp:= `b`(v0, v15) @signature `Le/e/c/a0/a;.b:(Z)I` @kind direct;
  #L37da2a.  v1:= temp;
  #L37da2c.  v2:= 58I;
  #L37da30.  if v1 == v2 then goto L37dada;
  #L37da34.  v2:= 61I;
  #L37da38.  if v1 != v2 then goto L37da76;
  #L37da3c.  call `C`(v16) @signature `Le/e/c/a0/a;.C:()V` @kind direct;
  #L37da42.  v1:= v0.`e.e.c.a0.a.e` @type ^`int`;
  #L37da46.  v2:= v0.`e.e.c.a0.a.f` @type ^`int`;
  #L37da4a.  if v1 < v2 then goto L37da5a;
  #L37da4e.  call temp:= `a`(v0, v15) @signature `Le/e/c/a0/a;.a:(I)Z` @kind direct;
  #L37da54.  v1:= temp;
  #L37da56.  if v1 == 0 then goto L37dada;
  #L37da5a.  v1:= v0.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37da5e.  v2:= v0.`e.e.c.a0.a.e` @type ^`int`;
  #L37da62.  v1:= v1[v2] @kind char;
  #L37da66.  v13:= 62I;
  #L37da6a.  if v1 != v13 then goto L37dada;
  #L37da6e.  v2:= v2 + v15 @kind int;
  #L37da70.  v0.`e.e.c.a0.a.e` @type ^`int` := v2;
  #L37da74.  goto L37dada;
  #L37da76.  v1:= "Expected ':'" @kind object;
  #L37da7a.  call temp:= `c`(v0, v1) @signature `Le/e/c/a0/a;.c:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37da80.  throw v14;
  #L37da82.  v1:= 6I;
  #L37da84.  if v3 != v1 then goto L37daa6;
  #L37da88.  v1:= v0.`e.e.c.a0.a.c` @type ^`boolean` @kind boolean;
  #L37da8c.  if v1 == 0 then goto L37da96;
  #L37da90.  call `D`(v16) @signature `Le/e/c/a0/a;.D:()V` @kind direct;
  #L37da96.  v1:= v0.`e.e.c.a0.a.m` @type ^`int`[] @kind object;
  #L37da9a.  v2:= v0.`e.e.c.a0.a.n` @type ^`int`;
  #L37da9e.  v2:= v2 - v15 @kind int;
  #L37daa0.  v1[v2]:= v9;
  #L37daa4.  goto L37dada;
  #L37daa6.  if v3 != v9 then goto L37dad6;
  #L37daaa.  v1:= 0I;
  #L37daac.  call temp:= `b`(v0, v1) @signature `Le/e/c/a0/a;.b:(Z)I` @kind direct;
  #L37dab2.  v1:= temp;
  #L37dab4.  v2:= -1I;
  #L37dab6.  if v1 != v2 then goto L37dac4;
  #L37daba.  v1:= 17I;
  #L37dabe.  v0.`e.e.c.a0.a.i` @type ^`int` := v1;
  #L37dac2.  return v1;
  #L37dac4.  call `C`(v16) @signature `Le/e/c/a0/a;.C:()V` @kind direct;
  #L37daca.  v1:= v0.`e.e.c.a0.a.e` @type ^`int`;
  #L37dace.  v1:= v1 - v15 @kind int;
  #L37dad0.  v0.`e.e.c.a0.a.e` @type ^`int` := v1;
  #L37dad4.  goto L37dada;
  #L37dad6.  if v3 == v4 then goto L37dbb2;
  #L37dada.  call temp:= `b`(v0, v15) @signature `Le/e/c/a0/a;.b:(Z)I` @kind direct;
  #L37dae0.  v1:= temp;
  #L37dae2.  if v1 == v6 then goto L37dbac;
  #L37dae6.  if v1 == v5 then goto L37dba0;
  #L37daea.  if v1 == v11 then goto L37db72;
  #L37daee.  if v1 == v10 then goto L37db72;
  #L37daf2.  v2:= 91I;
  #L37daf6.  if v1 == v2 then goto L37db6c;
  #L37dafa.  if v1 == v7 then goto L37db62;
  #L37dafe.  v2:= 123I;
  #L37db02.  if v1 == v2 then goto L37db5c;
  #L37db06.  v1:= v0.`e.e.c.a0.a.e` @type ^`int`;
  #L37db0a.  v1:= v1 - v15 @kind int;
  #L37db0c.  v0.`e.e.c.a0.a.e` @type ^`int` := v1;
  #L37db10.  call temp:= `F`(v16) @signature `Le/e/c/a0/a;.F:()I` @kind direct;
  #L37db16.  v1:= temp;
  #L37db18.  if v1 == 0 then goto L37db1e;
  #L37db1c.  return v1;
  #L37db1e.  call temp:= `G`(v16) @signature `Le/e/c/a0/a;.G:()I` @kind direct;
  #L37db24.  v1:= temp;
  #L37db26.  if v1 == 0 then goto L37db2c;
  #L37db2a.  return v1;
  #L37db2c.  v1:= v0.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37db30.  v2:= v0.`e.e.c.a0.a.e` @type ^`int`;
  #L37db34.  v1:= v1[v2] @kind char;
  #L37db38.  call temp:= `a`(v0, v1) @signature `Le/e/c/a0/a;.a:(C)Z` @kind direct;
  #L37db3e.  v1:= temp;
  #L37db40.  if v1 == 0 then goto L37db50;
  #L37db44.  call `C`(v16) @signature `Le/e/c/a0/a;.C:()V` @kind direct;
  #L37db4a.  v1:= 10I;
  #L37db4e.  goto L37dabe;
  #L37db50.  v1:= "Expected value" @kind object;
  #L37db54.  call temp:= `c`(v0, v1) @signature `Le/e/c/a0/a;.c:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37db5a.  throw v14;
  #L37db5c.  v0.`e.e.c.a0.a.i` @type ^`int` := v15;
  #L37db60.  return v15;
  #L37db62.  if v3 != v15 then goto L37db72;
  #L37db66.  v0.`e.e.c.a0.a.i` @type ^`int` := v12;
  #L37db6a.  return v12;
  #L37db6c.  v0.`e.e.c.a0.a.i` @type ^`int` := v8;
  #L37db70.  return v8;
  #L37db72.  if v3 == v15 then goto L37db8a;
  #L37db76.  v1:= 2I;
  #L37db78.  if v3 != v1 then goto L37db7e;
  #L37db7c.  goto L37db8a;
  #L37db7e.  v1:= "Unexpected value" @kind object;
  #L37db82.  call temp:= `c`(v0, v1) @signature `Le/e/c/a0/a;.c:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37db88.  throw v14;
  #L37db8a.  call `C`(v16) @signature `Le/e/c/a0/a;.C:()V` @kind direct;
  #L37db90.  v1:= v0.`e.e.c.a0.a.e` @type ^`int`;
  #L37db94.  v1:= v1 - v15 @kind int;
  #L37db96.  v0.`e.e.c.a0.a.e` @type ^`int` := v1;
  #L37db9a.  v0.`e.e.c.a0.a.i` @type ^`int` := v9;
  #L37db9e.  return v9;
  #L37dba0.  call `C`(v16) @signature `Le/e/c/a0/a;.C:()V` @kind direct;
  #L37dba6.  v0.`e.e.c.a0.a.i` @type ^`int` := v4;
  #L37dbaa.  return v4;
  #L37dbac.  v1:= 9I;
  #L37dbb0.  goto L37dabe;
  #L37dbb2.  v1:= new `java.lang.IllegalStateException`;
  #L37dbb6.  v2:= "JsonReader is closed" @kind object;
  #L37dbba.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37dbc0.  throw v1;
  #L37dbc2.  v1:= v0.`e.e.c.a0.a.m` @type ^`int`[] @kind object;
  #L37dbc6.  v2:= v0.`e.e.c.a0.a.n` @type ^`int`;
  #L37dbca.  v2:= v2 - v15 @kind int;
  #L37dbcc.  v1[v2]:= v12;
  #L37dbd0.  v1:= 125I;
  #L37dbd4.  if v3 != v13 then goto L37dc04;
  #L37dbd8.  call temp:= `b`(v0, v15) @signature `Le/e/c/a0/a;.b:(Z)I` @kind direct;
  #L37dbde.  v2:= temp;
  #L37dbe0.  if v2 == v11 then goto L37dc04;
  #L37dbe4.  if v2 == v10 then goto L37dbfe;
  #L37dbe8.  if v2 != v1 then goto L37dbf2;
  #L37dbec.  v1:= 2I;
  #L37dbee.  goto L37dabe;
  #L37dbf2.  v1:= "Unterminated object" @kind object;
  #L37dbf6.  call temp:= `c`(v0, v1) @signature `Le/e/c/a0/a;.c:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37dbfc.  throw v14;
  #L37dbfe.  call `C`(v16) @signature `Le/e/c/a0/a;.C:()V` @kind direct;
  #L37dc04.  call temp:= `b`(v0, v15) @signature `Le/e/c/a0/a;.b:(Z)I` @kind direct;
  #L37dc0a.  v2:= temp;
  #L37dc0c.  if v2 == v6 then goto L37dc66;
  #L37dc10.  if v2 == v5 then goto L37dc58;
  #L37dc14.  v4:= "Expected name" @kind object;
  #L37dc18.  if v2 == v1 then goto L37dc4a;
  #L37dc1c.  call `C`(v16) @signature `Le/e/c/a0/a;.C:()V` @kind direct;
  #L37dc22.  v1:= v0.`e.e.c.a0.a.e` @type ^`int`;
  #L37dc26.  v1:= v1 - v15 @kind int;
  #L37dc28.  v0.`e.e.c.a0.a.e` @type ^`int` := v1;
  #L37dc2c.  v1:= (`char`) v2 @kind i2c;
  #L37dc2e.  call temp:= `a`(v0, v1) @signature `Le/e/c/a0/a;.a:(C)Z` @kind direct;
  #L37dc34.  v1:= temp;
  #L37dc36.  if v1 == 0 then goto L37dc42;
  #L37dc3a.  v1:= 14I;
  #L37dc3e.  goto L37dabe;
  #L37dc42.  call temp:= `c`(v0, v4) @signature `Le/e/c/a0/a;.c:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37dc48.  throw v14;
  #L37dc4a.  if v3 == v13 then goto L37dc50;
  #L37dc4e.  goto L37dbec;
  #L37dc50.  call temp:= `c`(v0, v4) @signature `Le/e/c/a0/a;.c:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37dc56.  throw v14;
  #L37dc58.  call `C`(v16) @signature `Le/e/c/a0/a;.C:()V` @kind direct;
  #L37dc5e.  v1:= 12I;
  #L37dc62.  goto L37dabe;
  #L37dc66.  v1:= 13I;
  #L37dc6a.  goto L37dabe;
}
procedure `void` `n`(`e.e.c.a0.a` v3 @kind this) @signature `Le/e/c/a0/a;.n:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37ed4c.  v0:= v3.`e.e.c.a0.a.i` @type ^`int`;
  #L37ed50.  if v0 != 0 then goto L37ed5c;
  #L37ed54.  call temp:= `m`(v3) @signature `Le/e/c/a0/a;.m:()I` @kind virtual;
  #L37ed5a.  v0:= temp;
  #L37ed5c.  v1:= 4I;
  #L37ed5e.  if v0 != v1 then goto L37ed8e;
  #L37ed62.  v0:= v3.`e.e.c.a0.a.n` @type ^`int`;
  #L37ed66.  v0:= v0 + -1;
  #L37ed6a.  v3.`e.e.c.a0.a.n` @type ^`int` := v0;
  #L37ed6e.  v0:= v3.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37ed72.  v1:= v3.`e.e.c.a0.a.n` @type ^`int`;
  #L37ed76.  v1:= v1 + -1;
  #L37ed7a.  v2:= v0[v1];
  #L37ed7e.  v2:= v2 + 1;
  #L37ed82.  v0[v1]:= v2;
  #L37ed86.  v0:= 0I;
  #L37ed88.  v3.`e.e.c.a0.a.i` @type ^`int` := v0;
  #L37ed8c.  return @kind void;
  #L37ed8e.  v0:= new `java.lang.IllegalStateException`;
  #L37ed92.  v1:= new `java.lang.StringBuilder`;
  #L37ed96.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37ed9c.  v2:= "Expected END_ARRAY but was " @kind object;
  #L37eda0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37eda6.  call temp:= `A`(v3) @signature `Le/e/c/a0/a;.A:()Le/e/c/a0/b;` @kind virtual;
  #L37edac.  v2:= temp @kind object;
  #L37edae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37edb4.  call temp:= `s`(v3) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37edba.  v2:= temp @kind object;
  #L37edbc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37edc2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37edc8.  v1:= temp @kind object;
  #L37edca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37edd0.  throw v0;
}
procedure `void` `o`(`e.e.c.a0.a` v3 @kind this) @signature `Le/e/c/a0/a;.o:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37ede4.  v0:= v3.`e.e.c.a0.a.i` @type ^`int`;
  #L37ede8.  if v0 != 0 then goto L37edf4;
  #L37edec.  call temp:= `m`(v3) @signature `Le/e/c/a0/a;.m:()I` @kind virtual;
  #L37edf2.  v0:= temp;
  #L37edf4.  v1:= 2I;
  #L37edf6.  if v0 != v1 then goto L37ee30;
  #L37edfa.  v0:= v3.`e.e.c.a0.a.n` @type ^`int`;
  #L37edfe.  v0:= v0 + -1;
  #L37ee02.  v3.`e.e.c.a0.a.n` @type ^`int` := v0;
  #L37ee06.  v0:= v3.`e.e.c.a0.a.o` @type ^`java.lang.String`[] @kind object;
  #L37ee0a.  v1:= v3.`e.e.c.a0.a.n` @type ^`int`;
  #L37ee0e.  v2:= 0I;
  #L37ee10.  v0[v1]:= v2 @kind object;
  #L37ee14.  v0:= v3.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37ee18.  v1:= v1 + -1;
  #L37ee1c.  v2:= v0[v1];
  #L37ee20.  v2:= v2 + 1;
  #L37ee24.  v0[v1]:= v2;
  #L37ee28.  v0:= 0I;
  #L37ee2a.  v3.`e.e.c.a0.a.i` @type ^`int` := v0;
  #L37ee2e.  return @kind void;
  #L37ee30.  v0:= new `java.lang.IllegalStateException`;
  #L37ee34.  v1:= new `java.lang.StringBuilder`;
  #L37ee38.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37ee3e.  v2:= "Expected END_OBJECT but was " @kind object;
  #L37ee42.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37ee48.  call temp:= `A`(v3) @signature `Le/e/c/a0/a;.A:()Le/e/c/a0/b;` @kind virtual;
  #L37ee4e.  v2:= temp @kind object;
  #L37ee50.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37ee56.  call temp:= `s`(v3) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37ee5c.  v2:= temp @kind object;
  #L37ee5e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37ee64.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37ee6a.  v1:= temp @kind object;
  #L37ee6c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37ee72.  throw v0;
}
procedure `java.lang.String` `p`(`e.e.c.a0.a` v5 @kind this) @signature `Le/e/c/a0/a;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L37e35c.  v0:= new `java.lang.StringBuilder`;
  #L37e360.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37e366.  v1:= 36I;
  #L37e36a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e370.  v1:= v5.`e.e.c.a0.a.n` @type ^`int`;
  #L37e374.  v2:= 0I;
  #L37e376.  if v2 >= v1 then goto L37e3ec;
  #L37e37a.  v3:= v5.`e.e.c.a0.a.m` @type ^`int`[] @kind object;
  #L37e37e.  v3:= v3[v2];
  #L37e382.  v4:= 1I;
  #L37e384.  if v3 == v4 then goto L37e3c4;
  #L37e388.  v4:= 2I;
  #L37e38a.  if v3 == v4 then goto L37e3c4;
  #L37e38e.  v4:= 3I;
  #L37e390.  if v3 == v4 then goto L37e3a2;
  #L37e394.  v4:= 4I;
  #L37e396.  if v3 == v4 then goto L37e3a2;
  #L37e39a.  v4:= 5I;
  #L37e39c.  if v3 == v4 then goto L37e3a2;
  #L37e3a0.  goto L37e3e6;
  #L37e3a2.  v3:= 46I;
  #L37e3a6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e3ac.  v3:= v5.`e.e.c.a0.a.o` @type ^`java.lang.String`[] @kind object;
  #L37e3b0.  v4:= v3[v2] @kind object;
  #L37e3b4.  if v4 == 0 then goto L37e3e6;
  #L37e3b8.  v3:= v3[v2] @kind object;
  #L37e3bc.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e3c2.  goto L37e3e6;
  #L37e3c4.  v3:= 91I;
  #L37e3c8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e3ce.  v3:= v5.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37e3d2.  v3:= v3[v2];
  #L37e3d6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e3dc.  v3:= 93I;
  #L37e3e0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e3e6.  v2:= v2 + 1;
  #L37e3ea.  goto L37e376;
  #L37e3ec.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37e3f2.  v0:= temp @kind object;
  #L37e3f4.  return v0 @kind object;
}
procedure `boolean` `q`(`e.e.c.a0.a` v2 @kind this) @signature `Le/e/c/a0/a;.q:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37d358.  v0:= v2.`e.e.c.a0.a.i` @type ^`int`;
  #L37d35c.  if v0 != 0 then goto L37d368;
  #L37d360.  call temp:= `m`(v2) @signature `Le/e/c/a0/a;.m:()I` @kind virtual;
  #L37d366.  v0:= temp;
  #L37d368.  v1:= 2I;
  #L37d36a.  if v0 == v1 then goto L37d378;
  #L37d36e.  v1:= 4I;
  #L37d370.  if v0 == v1 then goto L37d378;
  #L37d374.  v0:= 1I;
  #L37d376.  goto L37d37a;
  #L37d378.  v0:= 0I;
  #L37d37a.  return v0;
}
procedure `boolean` `r`(`e.e.c.a0.a` v1 @kind this) @signature `Le/e/c/a0/a;.r:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L37d38c.  v0:= v1.`e.e.c.a0.a.c` @type ^`boolean` @kind boolean;
  #L37d390.  return v0;
}
procedure `java.lang.String` `s`(`e.e.c.a0.a` v4 @kind this) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37e408.  v0:= v4.`e.e.c.a0.a.g` @type ^`int`;
  #L37e40c.  v0:= v0 + 1;
  #L37e410.  v1:= v4.`e.e.c.a0.a.e` @type ^`int`;
  #L37e414.  v2:= v4.`e.e.c.a0.a.h` @type ^`int`;
  #L37e418.  v1:= v1 - v2 @kind int;
  #L37e41a.  v1:= v1 + 1;
  #L37e41e.  v2:= new `java.lang.StringBuilder`;
  #L37e422.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37e428.  v3:= " at line " @kind object;
  #L37e42c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e432.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e438.  v0:= " column " @kind object;
  #L37e43c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e442.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e448.  v0:= " path " @kind object;
  #L37e44c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e452.  call temp:= `p`(v4) @signature `Le/e/c/a0/a;.p:()Ljava/lang/String;` @kind virtual;
  #L37e458.  v0:= temp @kind object;
  #L37e45a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e460.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37e466.  v0:= temp @kind object;
  #L37e468.  return v0 @kind object;
}
procedure `boolean` `t`(`e.e.c.a0.a` v5 @kind this) @signature `Le/e/c/a0/a;.t:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L37d444.  v0:= v5.`e.e.c.a0.a.i` @type ^`int`;
  #L37d448.  if v0 != 0 then goto L37d454;
  #L37d44c.  call temp:= `m`(v5) @signature `Le/e/c/a0/a;.m:()I` @kind virtual;
  #L37d452.  v0:= temp;
  #L37d454.  v1:= 5I;
  #L37d456.  v2:= 0I;
  #L37d458.  v3:= 1I;
  #L37d45a.  if v0 != v1 then goto L37d478;
  #L37d45e.  v5.`e.e.c.a0.a.i` @type ^`int` := v2;
  #L37d462.  v0:= v5.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37d466.  v1:= v5.`e.e.c.a0.a.n` @type ^`int`;
  #L37d46a.  v1:= v1 - v3 @kind int;
  #L37d46c.  v2:= v0[v1];
  #L37d470.  v2:= v2 + v3 @kind int;
  #L37d472.  v0[v1]:= v2;
  #L37d476.  return v3;
  #L37d478.  v1:= 6I;
  #L37d47a.  if v0 != v1 then goto L37d498;
  #L37d47e.  v5.`e.e.c.a0.a.i` @type ^`int` := v2;
  #L37d482.  v0:= v5.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37d486.  v1:= v5.`e.e.c.a0.a.n` @type ^`int`;
  #L37d48a.  v1:= v1 - v3 @kind int;
  #L37d48c.  v4:= v0[v1];
  #L37d490.  v4:= v4 + v3 @kind int;
  #L37d492.  v0[v1]:= v4;
  #L37d496.  return v2;
  #L37d498.  v0:= new `java.lang.IllegalStateException`;
  #L37d49c.  v1:= new `java.lang.StringBuilder`;
  #L37d4a0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37d4a6.  v2:= "Expected a boolean but was " @kind object;
  #L37d4aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d4b0.  call temp:= `A`(v5) @signature `Le/e/c/a0/a;.A:()Le/e/c/a0/b;` @kind virtual;
  #L37d4b6.  v2:= temp @kind object;
  #L37d4b8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d4be.  call temp:= `s`(v5) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37d4c4.  v2:= temp @kind object;
  #L37d4c6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d4cc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37d4d2.  v1:= temp @kind object;
  #L37d4d4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37d4da.  throw v0;
}
procedure `java.lang.String` `toString`(`e.e.c.a0.a` v2 @kind this) @signature `Le/e/c/a0/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37e8a4.  v0:= new `java.lang.StringBuilder`;
  #L37e8a8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37e8ae.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L37e8b4.  v1:= temp @kind object;
  #L37e8b6.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L37e8bc.  v1:= temp @kind object;
  #L37e8be.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e8c4.  call temp:= `s`(v2) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37e8ca.  v1:= temp @kind object;
  #L37e8cc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e8d2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37e8d8.  v0:= temp @kind object;
  #L37e8da.  return v0 @kind object;
}
procedure `double` `u`(`e.e.c.a0.a` v6 @kind this) @signature `Le/e/c/a0/a;.u:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L37d7f4.  v0:= v6.`e.e.c.a0.a.i` @type ^`int`;
  #L37d7f8.  if v0 != 0 then goto L37d804;
  #L37d7fc.  call temp:= `m`(v6) @signature `Le/e/c/a0/a;.m:()I` @kind virtual;
  #L37d802.  v0:= temp;
  #L37d804.  v1:= 15I;
  #L37d808.  v2:= 0I;
  #L37d80a.  if v0 != v1 then goto L37d832;
  #L37d80e.  v6.`e.e.c.a0.a.i` @type ^`int` := v2;
  #L37d812.  v0:= v6.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37d816.  v1:= v6.`e.e.c.a0.a.n` @type ^`int`;
  #L37d81a.  v1:= v1 + -1;
  #L37d81e.  v2:= v0[v1];
  #L37d822.  v2:= v2 + 1;
  #L37d826.  v0[v1]:= v2;
  #L37d82a.  v0:= v6.`e.e.c.a0.a.j` @type ^`long` @kind wide;
  #L37d82e.  v0:= (`double`) v0 @kind l2d;
  #L37d830.  return v0 @kind wide;
  #L37d832.  v1:= 16I;
  #L37d836.  v3:= 11I;
  #L37d83a.  if v0 != v1 then goto L37d868;
  #L37d83e.  v0:= new `java.lang.String`;
  #L37d842.  v1:= v6.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37d846.  v4:= v6.`e.e.c.a0.a.e` @type ^`int`;
  #L37d84a.  v5:= v6.`e.e.c.a0.a.k` @type ^`int`;
  #L37d84e.  call `<init>`(v0, v1, v4, v5) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L37d854.  v6.`e.e.c.a0.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L37d858.  v0:= v6.`e.e.c.a0.a.e` @type ^`int`;
  #L37d85c.  v1:= v6.`e.e.c.a0.a.k` @type ^`int`;
  #L37d860.  v0:= v0 + v1 @kind int;
  #L37d862.  v6.`e.e.c.a0.a.e` @type ^`int` := v0;
  #L37d866.  goto L37d8f0;
  #L37d868.  v1:= 8I;
  #L37d86c.  if v0 == v1 then goto L37d8d6;
  #L37d870.  v4:= 9I;
  #L37d874.  if v0 != v4 then goto L37d87a;
  #L37d878.  goto L37d8d6;
  #L37d87a.  v1:= 10I;
  #L37d87e.  if v0 != v1 then goto L37d88c;
  #L37d882.  call temp:= `E`(v6) @signature `Le/e/c/a0/a;.E:()Ljava/lang/String;` @kind direct;
  #L37d888.  v0:= temp @kind object;
  #L37d88a.  goto L37d8ec;
  #L37d88c.  if v0 != v3 then goto L37d892;
  #L37d890.  goto L37d8f0;
  #L37d892.  v0:= new `java.lang.IllegalStateException`;
  #L37d896.  v1:= new `java.lang.StringBuilder`;
  #L37d89a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37d8a0.  v2:= "Expected a double but was " @kind object;
  #L37d8a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d8aa.  call temp:= `A`(v6) @signature `Le/e/c/a0/a;.A:()Le/e/c/a0/b;` @kind virtual;
  #L37d8b0.  v2:= temp @kind object;
  #L37d8b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d8b8.  call temp:= `s`(v6) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37d8be.  v2:= temp @kind object;
  #L37d8c0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d8c6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37d8cc.  v1:= temp @kind object;
  #L37d8ce.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37d8d4.  throw v0;
  #L37d8d6.  if v0 != v1 then goto L37d8e0;
  #L37d8da.  v0:= 39I;
  #L37d8de.  goto L37d8e4;
  #L37d8e0.  v0:= 34I;
  #L37d8e4.  call temp:= `b`(v6, v0) @signature `Le/e/c/a0/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L37d8ea.  v0:= temp @kind object;
  #L37d8ec.  v6.`e.e.c.a0.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L37d8f0.  v6.`e.e.c.a0.a.i` @type ^`int` := v3;
  #L37d8f4.  v0:= v6.`e.e.c.a0.a.l` @type ^`java.lang.String` @kind object;
  #L37d8f8.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L37d8fe.  v0:= temp @kind wide;
  #L37d900.  v3:= v6.`e.e.c.a0.a.c` @type ^`boolean` @kind boolean;
  #L37d904.  if v3 != 0 then goto L37d95e;
  #L37d908.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L37d90e.  v3:= temp;
  #L37d910.  if v3 != 0 then goto L37d922;
  #L37d914.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L37d91a.  v3:= temp;
  #L37d91c.  if v3 != 0 then goto L37d922;
  #L37d920.  goto L37d95e;
  #L37d922.  v2:= new `e.e.c.a0.d`;
  #L37d926.  v3:= new `java.lang.StringBuilder`;
  #L37d92a.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37d930.  v4:= "JSON forbids NaN and infinities: " @kind object;
  #L37d934.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d93a.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d940.  call temp:= `s`(v6) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37d946.  v0:= temp @kind object;
  #L37d948.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d94e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37d954.  v0:= temp @kind object;
  #L37d956.  call `<init>`(v2, v0) @signature `Le/e/c/a0/d;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37d95c.  throw v2;
  #L37d95e.  v3:= 0I;
  #L37d960.  v6.`e.e.c.a0.a.l` @type ^`java.lang.String` := v3 @kind object;
  #L37d964.  v6.`e.e.c.a0.a.i` @type ^`int` := v2;
  #L37d968.  v2:= v6.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37d96c.  v3:= v6.`e.e.c.a0.a.n` @type ^`int`;
  #L37d970.  v3:= v3 + -1;
  #L37d974.  v4:= v2[v3];
  #L37d978.  v4:= v4 + 1;
  #L37d97c.  v2[v3]:= v4;
  #L37d980.  return v0 @kind wide;
}
procedure `int` `v`(`e.e.c.a0.a` v8 @kind this) @signature `Le/e/c/a0/a;.v:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L37dc80.  v0:= v8.`e.e.c.a0.a.i` @type ^`int`;
  #L37dc84.  if v0 != 0 then goto L37dc90;
  #L37dc88.  call temp:= `m`(v8) @signature `Le/e/c/a0/a;.m:()I` @kind virtual;
  #L37dc8e.  v0:= temp;
  #L37dc90.  v1:= 15I;
  #L37dc94.  v2:= "Expected an int but was " @kind object;
  #L37dc98.  v3:= 0I;
  #L37dc9a.  if v0 != v1 then goto L37dd08;
  #L37dc9e.  v0:= v8.`e.e.c.a0.a.j` @type ^`long` @kind wide;
  #L37dca2.  v4:= (`int`) v0 @kind l2i;
  #L37dca4.  v5:= (`long`) v4 @kind i2l;
  #L37dca6.  v7:= lcmp(v0, v5);
  #L37dcaa.  if v7 != 0 then goto L37dccc;
  #L37dcae.  v8.`e.e.c.a0.a.i` @type ^`int` := v3;
  #L37dcb2.  v0:= v8.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37dcb6.  v1:= v8.`e.e.c.a0.a.n` @type ^`int`;
  #L37dcba.  v1:= v1 + -1;
  #L37dcbe.  v2:= v0[v1];
  #L37dcc2.  v2:= v2 + 1;
  #L37dcc6.  v0[v1]:= v2;
  #L37dcca.  return v4;
  #L37dccc.  v0:= new `java.lang.NumberFormatException`;
  #L37dcd0.  v1:= new `java.lang.StringBuilder`;
  #L37dcd4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37dcda.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37dce0.  v2:= v8.`e.e.c.a0.a.j` @type ^`long` @kind wide;
  #L37dce4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L37dcea.  call temp:= `s`(v8) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37dcf0.  v2:= temp @kind object;
  #L37dcf2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37dcf8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37dcfe.  v1:= temp @kind object;
  #L37dd00.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37dd06.  throw v0;
  #L37dd08.  v1:= 16I;
  #L37dd0c.  if v0 != v1 then goto L37dd3a;
  #L37dd10.  v0:= new `java.lang.String`;
  #L37dd14.  v1:= v8.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37dd18.  v4:= v8.`e.e.c.a0.a.e` @type ^`int`;
  #L37dd1c.  v5:= v8.`e.e.c.a0.a.k` @type ^`int`;
  #L37dd20.  call `<init>`(v0, v1, v4, v5) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L37dd26.  v8.`e.e.c.a0.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L37dd2a.  v0:= v8.`e.e.c.a0.a.e` @type ^`int`;
  #L37dd2e.  v1:= v8.`e.e.c.a0.a.k` @type ^`int`;
  #L37dd32.  v0:= v0 + v1 @kind int;
  #L37dd34.  v8.`e.e.c.a0.a.e` @type ^`int` := v0;
  #L37dd38.  goto L37ddea;
  #L37dd3a.  v1:= 10I;
  #L37dd3e.  v4:= 8I;
  #L37dd42.  if v0 == v4 then goto L37dd94;
  #L37dd46.  v5:= 9I;
  #L37dd4a.  if v0 == v5 then goto L37dd94;
  #L37dd4e.  if v0 != v1 then goto L37dd54;
  #L37dd52.  goto L37dd94;
  #L37dd54.  v0:= new `java.lang.IllegalStateException`;
  #L37dd58.  v1:= new `java.lang.StringBuilder`;
  #L37dd5c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37dd62.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37dd68.  call temp:= `A`(v8) @signature `Le/e/c/a0/a;.A:()Le/e/c/a0/b;` @kind virtual;
  #L37dd6e.  v2:= temp @kind object;
  #L37dd70.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37dd76.  call temp:= `s`(v8) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37dd7c.  v2:= temp @kind object;
  #L37dd7e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37dd84.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37dd8a.  v1:= temp @kind object;
  #L37dd8c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37dd92.  throw v0;
  #L37dd94.  if v0 != v1 then goto L37dda6;
  #L37dd98.  call temp:= `E`(v8) @signature `Le/e/c/a0/a;.E:()Ljava/lang/String;` @kind direct;
  #L37dd9e.  v0:= temp @kind object;
  #L37dda0.  v8.`e.e.c.a0.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L37dda4.  goto L37ddbe;
  #L37dda6.  if v0 != v4 then goto L37ddb0;
  #L37ddaa.  v0:= 39I;
  #L37ddae.  goto L37ddb4;
  #L37ddb0.  v0:= 34I;
  #L37ddb4.  call temp:= `b`(v8, v0) @signature `Le/e/c/a0/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L37ddba.  v0:= temp @kind object;
  #L37ddbc.  goto L37dda0;
  #L37ddbe.  v0:= v8.`e.e.c.a0.a.l` @type ^`java.lang.String` @kind object;
  #L37ddc2.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L37ddc8.  v0:= temp;
  #L37ddca.  v8.`e.e.c.a0.a.i` @type ^`int` := v3;
  #L37ddce.  v1:= v8.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37ddd2.  v4:= v8.`e.e.c.a0.a.n` @type ^`int`;
  #L37ddd6.  v4:= v4 + -1;
  #L37ddda.  v5:= v1[v4];
  #L37ddde.  v5:= v5 + 1;
  #L37dde2.  v1[v4]:= v5;
  #L37dde6.  return v0;
  #L37dde8.  
  #L37ddea.  v0:= 11I;
  #L37ddee.  v8.`e.e.c.a0.a.i` @type ^`int` := v0;
  #L37ddf2.  v0:= v8.`e.e.c.a0.a.l` @type ^`java.lang.String` @kind object;
  #L37ddf6.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L37ddfc.  v0:= temp @kind wide;
  #L37ddfe.  v4:= (`int`) v0 @kind d2i;
  #L37de00.  v5:= (`double`) v4 @kind i2d;
  #L37de02.  v7:= dcmpl(v5, v0);
  #L37de06.  if v7 != 0 then goto L37de2e;
  #L37de0a.  v0:= 0I;
  #L37de0c.  v8.`e.e.c.a0.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L37de10.  v8.`e.e.c.a0.a.i` @type ^`int` := v3;
  #L37de14.  v0:= v8.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37de18.  v1:= v8.`e.e.c.a0.a.n` @type ^`int`;
  #L37de1c.  v1:= v1 + -1;
  #L37de20.  v2:= v0[v1];
  #L37de24.  v2:= v2 + 1;
  #L37de28.  v0[v1]:= v2;
  #L37de2c.  return v4;
  #L37de2e.  v0:= new `java.lang.NumberFormatException`;
  #L37de32.  v1:= new `java.lang.StringBuilder`;
  #L37de36.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37de3c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37de42.  v2:= v8.`e.e.c.a0.a.l` @type ^`java.lang.String` @kind object;
  #L37de46.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37de4c.  call temp:= `s`(v8) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37de52.  v2:= temp @kind object;
  #L37de54.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37de5a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37de60.  v1:= temp @kind object;
  #L37de62.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37de68.  throw v0;
  catch `java.lang.NumberFormatException` @[L37ddbe..L37dde6] goto L37dde8;
}
procedure `long` `w`(`e.e.c.a0.a` v9 @kind this) @signature `Le/e/c/a0/a;.w:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L37e8ec.  v0:= v9.`e.e.c.a0.a.i` @type ^`int`;
  #L37e8f0.  if v0 != 0 then goto L37e8fc;
  #L37e8f4.  call temp:= `m`(v9) @signature `Le/e/c/a0/a;.m:()I` @kind virtual;
  #L37e8fa.  v0:= temp;
  #L37e8fc.  v1:= 15I;
  #L37e900.  v2:= 0I;
  #L37e902.  if v0 != v1 then goto L37e928;
  #L37e906.  v9.`e.e.c.a0.a.i` @type ^`int` := v2;
  #L37e90a.  v0:= v9.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37e90e.  v1:= v9.`e.e.c.a0.a.n` @type ^`int`;
  #L37e912.  v1:= v1 + -1;
  #L37e916.  v2:= v0[v1];
  #L37e91a.  v2:= v2 + 1;
  #L37e91e.  v0[v1]:= v2;
  #L37e922.  v0:= v9.`e.e.c.a0.a.j` @type ^`long` @kind wide;
  #L37e926.  return v0 @kind wide;
  #L37e928.  v1:= 16I;
  #L37e92c.  v3:= "Expected a long but was " @kind object;
  #L37e930.  if v0 != v1 then goto L37e95e;
  #L37e934.  v0:= new `java.lang.String`;
  #L37e938.  v1:= v9.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37e93c.  v4:= v9.`e.e.c.a0.a.e` @type ^`int`;
  #L37e940.  v5:= v9.`e.e.c.a0.a.k` @type ^`int`;
  #L37e944.  call `<init>`(v0, v1, v4, v5) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L37e94a.  v9.`e.e.c.a0.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L37e94e.  v0:= v9.`e.e.c.a0.a.e` @type ^`int`;
  #L37e952.  v1:= v9.`e.e.c.a0.a.k` @type ^`int`;
  #L37e956.  v0:= v0 + v1 @kind int;
  #L37e958.  v9.`e.e.c.a0.a.e` @type ^`int` := v0;
  #L37e95c.  goto L37ea0e;
  #L37e95e.  v1:= 10I;
  #L37e962.  v4:= 8I;
  #L37e966.  if v0 == v4 then goto L37e9b8;
  #L37e96a.  v5:= 9I;
  #L37e96e.  if v0 == v5 then goto L37e9b8;
  #L37e972.  if v0 != v1 then goto L37e978;
  #L37e976.  goto L37e9b8;
  #L37e978.  v0:= new `java.lang.IllegalStateException`;
  #L37e97c.  v1:= new `java.lang.StringBuilder`;
  #L37e980.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37e986.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e98c.  call temp:= `A`(v9) @signature `Le/e/c/a0/a;.A:()Le/e/c/a0/b;` @kind virtual;
  #L37e992.  v2:= temp @kind object;
  #L37e994.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e99a.  call temp:= `s`(v9) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37e9a0.  v2:= temp @kind object;
  #L37e9a2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e9a8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37e9ae.  v1:= temp @kind object;
  #L37e9b0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37e9b6.  throw v0;
  #L37e9b8.  if v0 != v1 then goto L37e9ca;
  #L37e9bc.  call temp:= `E`(v9) @signature `Le/e/c/a0/a;.E:()Ljava/lang/String;` @kind direct;
  #L37e9c2.  v0:= temp @kind object;
  #L37e9c4.  v9.`e.e.c.a0.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L37e9c8.  goto L37e9e2;
  #L37e9ca.  if v0 != v4 then goto L37e9d4;
  #L37e9ce.  v0:= 39I;
  #L37e9d2.  goto L37e9d8;
  #L37e9d4.  v0:= 34I;
  #L37e9d8.  call temp:= `b`(v9, v0) @signature `Le/e/c/a0/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L37e9de.  v0:= temp @kind object;
  #L37e9e0.  goto L37e9c4;
  #L37e9e2.  v0:= v9.`e.e.c.a0.a.l` @type ^`java.lang.String` @kind object;
  #L37e9e6.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L37e9ec.  v0:= temp @kind wide;
  #L37e9ee.  v9.`e.e.c.a0.a.i` @type ^`int` := v2;
  #L37e9f2.  v4:= v9.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37e9f6.  v5:= v9.`e.e.c.a0.a.n` @type ^`int`;
  #L37e9fa.  v5:= v5 + -1;
  #L37e9fe.  v6:= v4[v5];
  #L37ea02.  v6:= v6 + 1;
  #L37ea06.  v4[v5]:= v6;
  #L37ea0a.  return v0 @kind wide;
  #L37ea0c.  
  #L37ea0e.  v0:= 11I;
  #L37ea12.  v9.`e.e.c.a0.a.i` @type ^`int` := v0;
  #L37ea16.  v0:= v9.`e.e.c.a0.a.l` @type ^`java.lang.String` @kind object;
  #L37ea1a.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L37ea20.  v0:= temp @kind wide;
  #L37ea22.  v4:= (`long`) v0 @kind d2l;
  #L37ea24.  v6:= (`double`) v4 @kind l2d;
  #L37ea26.  v8:= dcmpl(v6, v0);
  #L37ea2a.  if v8 != 0 then goto L37ea52;
  #L37ea2e.  v0:= 0I;
  #L37ea30.  v9.`e.e.c.a0.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L37ea34.  v9.`e.e.c.a0.a.i` @type ^`int` := v2;
  #L37ea38.  v0:= v9.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37ea3c.  v1:= v9.`e.e.c.a0.a.n` @type ^`int`;
  #L37ea40.  v1:= v1 + -1;
  #L37ea44.  v2:= v0[v1];
  #L37ea48.  v2:= v2 + 1;
  #L37ea4c.  v0[v1]:= v2;
  #L37ea50.  return v4 @kind wide;
  #L37ea52.  v0:= new `java.lang.NumberFormatException`;
  #L37ea56.  v1:= new `java.lang.StringBuilder`;
  #L37ea5a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37ea60.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37ea66.  v2:= v9.`e.e.c.a0.a.l` @type ^`java.lang.String` @kind object;
  #L37ea6a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37ea70.  call temp:= `s`(v9) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37ea76.  v2:= temp @kind object;
  #L37ea78.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37ea7e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37ea84.  v1:= temp @kind object;
  #L37ea86.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37ea8c.  throw v0;
  catch `java.lang.NumberFormatException` @[L37e9e2..L37ea0a] goto L37ea0c;
}
procedure `java.lang.String` `x`(`e.e.c.a0.a` v3 @kind this) @signature `Le/e/c/a0/a;.x:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37e47c.  v0:= v3.`e.e.c.a0.a.i` @type ^`int`;
  #L37e480.  if v0 != 0 then goto L37e48c;
  #L37e484.  call temp:= `m`(v3) @signature `Le/e/c/a0/a;.m:()I` @kind virtual;
  #L37e48a.  v0:= temp;
  #L37e48c.  v1:= 14I;
  #L37e490.  if v0 != v1 then goto L37e49e;
  #L37e494.  call temp:= `E`(v3) @signature `Le/e/c/a0/a;.E:()Ljava/lang/String;` @kind direct;
  #L37e49a.  v0:= temp @kind object;
  #L37e49c.  goto L37e4c2;
  #L37e49e.  v1:= 12I;
  #L37e4a2.  if v0 != v1 then goto L37e4b4;
  #L37e4a6.  v0:= 39I;
  #L37e4aa.  call temp:= `b`(v3, v0) @signature `Le/e/c/a0/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L37e4b0.  v0:= temp @kind object;
  #L37e4b2.  goto L37e4c2;
  #L37e4b4.  v1:= 13I;
  #L37e4b8.  if v0 != v1 then goto L37e4da;
  #L37e4bc.  v0:= 34I;
  #L37e4c0.  goto L37e4aa;
  #L37e4c2.  v1:= 0I;
  #L37e4c4.  v3.`e.e.c.a0.a.i` @type ^`int` := v1;
  #L37e4c8.  v1:= v3.`e.e.c.a0.a.o` @type ^`java.lang.String`[] @kind object;
  #L37e4cc.  v2:= v3.`e.e.c.a0.a.n` @type ^`int`;
  #L37e4d0.  v2:= v2 + -1;
  #L37e4d4.  v1[v2]:= v0 @kind object;
  #L37e4d8.  return v0 @kind object;
  #L37e4da.  v0:= new `java.lang.IllegalStateException`;
  #L37e4de.  v1:= new `java.lang.StringBuilder`;
  #L37e4e2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37e4e8.  v2:= "Expected a name but was " @kind object;
  #L37e4ec.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e4f2.  call temp:= `A`(v3) @signature `Le/e/c/a0/a;.A:()Le/e/c/a0/b;` @kind virtual;
  #L37e4f8.  v2:= temp @kind object;
  #L37e4fa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e500.  call temp:= `s`(v3) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37e506.  v2:= temp @kind object;
  #L37e508.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e50e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37e514.  v1:= temp @kind object;
  #L37e516.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37e51c.  throw v0;
}
procedure `void` `y`(`e.e.c.a0.a` v3 @kind this) @signature `Le/e/c/a0/a;.y:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37ee84.  v0:= v3.`e.e.c.a0.a.i` @type ^`int`;
  #L37ee88.  if v0 != 0 then goto L37ee94;
  #L37ee8c.  call temp:= `m`(v3) @signature `Le/e/c/a0/a;.m:()I` @kind virtual;
  #L37ee92.  v0:= temp;
  #L37ee94.  v1:= 7I;
  #L37ee96.  if v0 != v1 then goto L37eeba;
  #L37ee9a.  v0:= 0I;
  #L37ee9c.  v3.`e.e.c.a0.a.i` @type ^`int` := v0;
  #L37eea0.  v0:= v3.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37eea4.  v1:= v3.`e.e.c.a0.a.n` @type ^`int`;
  #L37eea8.  v1:= v1 + -1;
  #L37eeac.  v2:= v0[v1];
  #L37eeb0.  v2:= v2 + 1;
  #L37eeb4.  v0[v1]:= v2;
  #L37eeb8.  return @kind void;
  #L37eeba.  v0:= new `java.lang.IllegalStateException`;
  #L37eebe.  v1:= new `java.lang.StringBuilder`;
  #L37eec2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37eec8.  v2:= "Expected null but was " @kind object;
  #L37eecc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37eed2.  call temp:= `A`(v3) @signature `Le/e/c/a0/a;.A:()Le/e/c/a0/b;` @kind virtual;
  #L37eed8.  v2:= temp @kind object;
  #L37eeda.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37eee0.  call temp:= `s`(v3) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37eee6.  v2:= temp @kind object;
  #L37eee8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37eeee.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37eef4.  v1:= temp @kind object;
  #L37eef6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37eefc.  throw v0;
}
procedure `java.lang.String` `z`(`e.e.c.a0.a` v4 @kind this) @signature `Le/e/c/a0/a;.z:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37e638.  v0:= v4.`e.e.c.a0.a.i` @type ^`int`;
  #L37e63c.  if v0 != 0 then goto L37e648;
  #L37e640.  call temp:= `m`(v4) @signature `Le/e/c/a0/a;.m:()I` @kind virtual;
  #L37e646.  v0:= temp;
  #L37e648.  v1:= 10I;
  #L37e64c.  if v0 != v1 then goto L37e65a;
  #L37e650.  call temp:= `E`(v4) @signature `Le/e/c/a0/a;.E:()Ljava/lang/String;` @kind direct;
  #L37e656.  v0:= temp @kind object;
  #L37e658.  goto L37e6d4;
  #L37e65a.  v1:= 8I;
  #L37e65e.  if v0 != v1 then goto L37e670;
  #L37e662.  v0:= 39I;
  #L37e666.  call temp:= `b`(v4, v0) @signature `Le/e/c/a0/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L37e66c.  v0:= temp @kind object;
  #L37e66e.  goto L37e6d4;
  #L37e670.  v1:= 9I;
  #L37e674.  if v0 != v1 then goto L37e67e;
  #L37e678.  v0:= 34I;
  #L37e67c.  goto L37e666;
  #L37e67e.  v1:= 11I;
  #L37e682.  if v0 != v1 then goto L37e692;
  #L37e686.  v0:= v4.`e.e.c.a0.a.l` @type ^`java.lang.String` @kind object;
  #L37e68a.  v1:= 0I;
  #L37e68c.  v4.`e.e.c.a0.a.l` @type ^`java.lang.String` := v1 @kind object;
  #L37e690.  goto L37e6d4;
  #L37e692.  v1:= 15I;
  #L37e696.  if v0 != v1 then goto L37e6a8;
  #L37e69a.  v0:= v4.`e.e.c.a0.a.j` @type ^`long` @kind wide;
  #L37e69e.  call temp:= `toString`(v0) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L37e6a4.  v0:= temp @kind object;
  #L37e6a6.  goto L37e6d4;
  #L37e6a8.  v1:= 16I;
  #L37e6ac.  if v0 != v1 then goto L37e6f4;
  #L37e6b0.  v0:= new `java.lang.String`;
  #L37e6b4.  v1:= v4.`e.e.c.a0.a.d` @type ^`char`[] @kind object;
  #L37e6b8.  v2:= v4.`e.e.c.a0.a.e` @type ^`int`;
  #L37e6bc.  v3:= v4.`e.e.c.a0.a.k` @type ^`int`;
  #L37e6c0.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L37e6c6.  v1:= v4.`e.e.c.a0.a.e` @type ^`int`;
  #L37e6ca.  v2:= v4.`e.e.c.a0.a.k` @type ^`int`;
  #L37e6ce.  v1:= v1 + v2 @kind int;
  #L37e6d0.  v4.`e.e.c.a0.a.e` @type ^`int` := v1;
  #L37e6d4.  v1:= 0I;
  #L37e6d6.  v4.`e.e.c.a0.a.i` @type ^`int` := v1;
  #L37e6da.  v1:= v4.`e.e.c.a0.a.p` @type ^`int`[] @kind object;
  #L37e6de.  v2:= v4.`e.e.c.a0.a.n` @type ^`int`;
  #L37e6e2.  v2:= v2 + -1;
  #L37e6e6.  v3:= v1[v2];
  #L37e6ea.  v3:= v3 + 1;
  #L37e6ee.  v1[v2]:= v3;
  #L37e6f2.  return v0 @kind object;
  #L37e6f4.  v0:= new `java.lang.IllegalStateException`;
  #L37e6f8.  v1:= new `java.lang.StringBuilder`;
  #L37e6fc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37e702.  v2:= "Expected a string but was " @kind object;
  #L37e706.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e70c.  call temp:= `A`(v4) @signature `Le/e/c/a0/a;.A:()Le/e/c/a0/b;` @kind virtual;
  #L37e712.  v2:= temp @kind object;
  #L37e714.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e71a.  call temp:= `s`(v4) @signature `Le/e/c/a0/a;.s:()Ljava/lang/String;` @kind virtual;
  #L37e720.  v2:= temp @kind object;
  #L37e722.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e728.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37e72e.  v1:= temp @kind object;
  #L37e730.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37e736.  throw v0;
}
