record `e.e.c.a0.c` @kind class @AccessFlag PUBLIC extends `java.io.Closeable` @kind interface, `java.io.Flushable` @kind interface {
  `java.io.Writer` `e.e.c.a0.c.b` @AccessFlag PRIVATE_FINAL;
  `int`[] `e.e.c.a0.c.c` @AccessFlag PRIVATE;
  `int` `e.e.c.a0.c.d` @AccessFlag PRIVATE;
  `java.lang.String` `e.e.c.a0.c.e` @AccessFlag PRIVATE;
  `java.lang.String` `e.e.c.a0.c.f` @AccessFlag PRIVATE;
  `boolean` `e.e.c.a0.c.g` @AccessFlag PRIVATE;
  `boolean` `e.e.c.a0.c.h` @AccessFlag PRIVATE;
  `java.lang.String` `e.e.c.a0.c.i` @AccessFlag PRIVATE;
  `boolean` `e.e.c.a0.c.j` @AccessFlag PRIVATE;
}
global `java.lang.String`[] `@@e.e.c.a0.c.k` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String`[] `@@e.e.c.a0.c.l` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/c/a0/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L37f7d8.  v0:= 128I;
  #L37f7dc.  v0:= new `java.lang.String`[v0];
  #L37f7e0.  `@@e.e.c.a0.c.k` @type ^`java.lang.String`[] := v0 @kind object;
  #L37f7e4.  v0:= 0I;
  #L37f7e6.  v1:= 0I;
  #L37f7e8.  v2:= 31I;
  #L37f7ec.  if v1 > v2 then goto L37f81c;
  #L37f7f0.  v2:= `@@e.e.c.a0.c.k` @type ^`java.lang.String`[] @kind object;
  #L37f7f4.  v3:= 1I;
  #L37f7f6.  v3:= new `java.lang.Object`[v3];
  #L37f7fa.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L37f800.  v4:= temp @kind object;
  #L37f802.  v3[v0]:= v4 @kind object;
  #L37f806.  v4:= "\\u%04x" @kind object;
  #L37f80a.  call temp:= `format`(v4, v3) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L37f810.  v3:= temp @kind object;
  #L37f812.  v2[v1]:= v3 @kind object;
  #L37f816.  v1:= v1 + 1;
  #L37f81a.  goto L37f7e8;
  #L37f81c.  v0:= `@@e.e.c.a0.c.k` @type ^`java.lang.String`[] @kind object;
  #L37f820.  v1:= 34I;
  #L37f824.  v2:= "\\\"" @kind object;
  #L37f828.  v0[v1]:= v2 @kind object;
  #L37f82c.  v1:= 92I;
  #L37f830.  v2:= "\\\\" @kind object;
  #L37f834.  v0[v1]:= v2 @kind object;
  #L37f838.  v1:= 9I;
  #L37f83c.  v2:= "\\t" @kind object;
  #L37f840.  v0[v1]:= v2 @kind object;
  #L37f844.  v1:= 8I;
  #L37f848.  v2:= "\\b" @kind object;
  #L37f84c.  v0[v1]:= v2 @kind object;
  #L37f850.  v1:= 10I;
  #L37f854.  v2:= "\\n" @kind object;
  #L37f858.  v0[v1]:= v2 @kind object;
  #L37f85c.  v1:= 13I;
  #L37f860.  v2:= "\\r" @kind object;
  #L37f864.  v0[v1]:= v2 @kind object;
  #L37f868.  v1:= 12I;
  #L37f86c.  v2:= "\\f" @kind object;
  #L37f870.  v0[v1]:= v2 @kind object;
  #L37f874.  call temp:= `clone`(v0) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L37f87a.  v0:= temp @kind object;
  #L37f87c.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L37f880.  `@@e.e.c.a0.c.l` @type ^`java.lang.String`[] := v0 @kind object;
  #L37f884.  v0:= `@@e.e.c.a0.c.l` @type ^`java.lang.String`[] @kind object;
  #L37f888.  v1:= 60I;
  #L37f88c.  v2:= "\\u003c" @kind object;
  #L37f890.  v0[v1]:= v2 @kind object;
  #L37f894.  v1:= 62I;
  #L37f898.  v2:= "\\u003e" @kind object;
  #L37f89c.  v0[v1]:= v2 @kind object;
  #L37f8a0.  v1:= 38I;
  #L37f8a4.  v2:= "\\u0026" @kind object;
  #L37f8a8.  v0[v1]:= v2 @kind object;
  #L37f8ac.  v1:= 61I;
  #L37f8b0.  v2:= "\\u003d" @kind object;
  #L37f8b4.  v0[v1]:= v2 @kind object;
  #L37f8b8.  v1:= 39I;
  #L37f8bc.  v2:= "\\u0027" @kind object;
  #L37f8c0.  v0[v1]:= v2 @kind object;
  #L37f8c4.  return @kind void;
}
procedure `void` `<init>`(`e.e.c.a0.c` v1 @kind this, `java.io.Writer` v2 @kind object) @signature `Le/e/c/a0/c;.<init>:(Ljava/io/Writer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L37f8d8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L37f8de.  v0:= 32I;
  #L37f8e2.  v0:= new `int`[v0];
  #L37f8e6.  v1.`e.e.c.a0.c.c` @type ^`int`[] := v0 @kind object;
  #L37f8ea.  v0:= 0I;
  #L37f8ec.  v1.`e.e.c.a0.c.d` @type ^`int` := v0;
  #L37f8f0.  v0:= 6I;
  #L37f8f2.  call `a`(v1, v0) @signature `Le/e/c/a0/c;.a:(I)V` @kind direct;
  #L37f8f8.  v0:= ":" @kind object;
  #L37f8fc.  v1.`e.e.c.a0.c.f` @type ^`java.lang.String` := v0 @kind object;
  #L37f900.  v0:= 1I;
  #L37f902.  v1.`e.e.c.a0.c.j` @type ^`boolean` := v0 @kind boolean;
  #L37f906.  if v2 == 0 then goto L37f910;
  #L37f90a.  v1.`e.e.c.a0.c.b` @type ^`java.io.Writer` := v2 @kind object;
  #L37f90e.  return @kind void;
  #L37f910.  v2:= new `java.lang.NullPointerException`;
  #L37f914.  v0:= "out == null" @kind object;
  #L37f918.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37f91e.  throw v2;
}
procedure `e.e.c.a0.c` `a`(`e.e.c.a0.c` v0 @kind this, `int` v1 , `char` v2 ) @signature `Le/e/c/a0/c;.a:(IC)Le/e/c/a0/c;` @AccessFlag PRIVATE {
    temp;

  #L37f5e8.  call `t`(v0) @signature `Le/e/c/a0/c;.t:()V` @kind direct;
  #L37f5ee.  call `a`(v0, v1) @signature `Le/e/c/a0/c;.a:(I)V` @kind direct;
  #L37f5f4.  v1:= v0.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37f5f8.  call `write`(v1, v2) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L37f5fe.  return v0 @kind object;
}
procedure `e.e.c.a0.c` `a`(`e.e.c.a0.c` v1 @kind this, `int` v2 , `int` v3 , `char` v4 ) @signature `Le/e/c/a0/c;.a:(IIC)Le/e/c/a0/c;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L37f478.  call temp:= `v`(v1) @signature `Le/e/c/a0/c;.v:()I` @kind direct;
  #L37f47e.  v0:= temp;
  #L37f480.  if v0 == v3 then goto L37f49a;
  #L37f484.  if v0 != v2 then goto L37f48a;
  #L37f488.  goto L37f49a;
  #L37f48a.  v2:= new `java.lang.IllegalStateException`;
  #L37f48e.  v3:= "Nesting problem." @kind object;
  #L37f492.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37f498.  throw v2;
  #L37f49a.  v2:= v1.`e.e.c.a0.c.i` @type ^`java.lang.String` @kind object;
  #L37f49e.  if v2 != 0 then goto L37f4c4;
  #L37f4a2.  v2:= v1.`e.e.c.a0.c.d` @type ^`int`;
  #L37f4a6.  v2:= v2 + -1;
  #L37f4aa.  v1.`e.e.c.a0.c.d` @type ^`int` := v2;
  #L37f4ae.  if v0 != v3 then goto L37f4b8;
  #L37f4b2.  call `u`(v1) @signature `Le/e/c/a0/c;.u:()V` @kind direct;
  #L37f4b8.  v2:= v1.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37f4bc.  call `write`(v2, v4) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L37f4c2.  return v1 @kind object;
  #L37f4c4.  v2:= new `java.lang.IllegalStateException`;
  #L37f4c8.  v3:= new `java.lang.StringBuilder`;
  #L37f4cc.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37f4d2.  v4:= "Dangling name: " @kind object;
  #L37f4d6.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37f4dc.  v4:= v1.`e.e.c.a0.c.i` @type ^`java.lang.String` @kind object;
  #L37f4e0.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37f4e6.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37f4ec.  v3:= temp @kind object;
  #L37f4ee.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37f4f4.  throw v2;
}
procedure `void` `a`(`e.e.c.a0.c` v3 @kind this, `int` v4 ) @signature `Le/e/c/a0/c;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L37faf0.  v0:= v3.`e.e.c.a0.c.d` @type ^`int`;
  #L37faf4.  v1:= v3.`e.e.c.a0.c.c` @type ^`int`[] @kind object;
  #L37faf8.  v2:= length @variable v1;
  #L37fafa.  if v0 != v2 then goto L37fb0e;
  #L37fafe.  v0:= v0 * 2;
  #L37fb02.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L37fb08.  v0:= temp @kind object;
  #L37fb0a.  v3.`e.e.c.a0.c.c` @type ^`int`[] := v0 @kind object;
  #L37fb0e.  v0:= v3.`e.e.c.a0.c.c` @type ^`int`[] @kind object;
  #L37fb12.  v1:= v3.`e.e.c.a0.c.d` @type ^`int`;
  #L37fb16.  v2:= v1 + 1;
  #L37fb1a.  v3.`e.e.c.a0.c.d` @type ^`int` := v2;
  #L37fb1e.  v0[v1]:= v4;
  #L37fb22.  return @kind void;
}
procedure `void` `b`(`e.e.c.a0.c` v2 @kind this, `int` v3 ) @signature `Le/e/c/a0/c;.b:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L37fb34.  v0:= v2.`e.e.c.a0.c.c` @type ^`int`[] @kind object;
  #L37fb38.  v1:= v2.`e.e.c.a0.c.d` @type ^`int`;
  #L37fb3c.  v1:= v1 + -1;
  #L37fb40.  v0[v1]:= v3;
  #L37fb44.  return @kind void;
}
procedure `void` `e`(`e.e.c.a0.c` v8 @kind this, `java.lang.String` v9 @kind object) @signature `Le/e/c/a0/c;.e:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L37fbd8.  v0:= v8.`e.e.c.a0.c.h` @type ^`boolean` @kind boolean;
  #L37fbdc.  if v0 == 0 then goto L37fbe6;
  #L37fbe0.  v0:= `@@e.e.c.a0.c.l` @type ^`java.lang.String`[] @kind object;
  #L37fbe4.  goto L37fbea;
  #L37fbe6.  v0:= `@@e.e.c.a0.c.k` @type ^`java.lang.String`[] @kind object;
  #L37fbea.  v1:= v8.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37fbee.  v2:= 34I;
  #L37fbf2.  call `write`(v1, v2) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L37fbf8.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L37fbfe.  v1:= temp;
  #L37fc00.  v3:= 0I;
  #L37fc02.  v4:= 0I;
  #L37fc04.  if v3 >= v1 then goto L37fc62;
  #L37fc08.  call temp:= `charAt`(v9, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L37fc0e.  v5:= temp;
  #L37fc10.  v6:= 128I;
  #L37fc14.  if v5 >= v6 then goto L37fc22;
  #L37fc18.  v5:= v0[v5] @kind object;
  #L37fc1c.  if v5 != 0 then goto L37fc3c;
  #L37fc20.  goto L37fc5c;
  #L37fc22.  v6:= 8232I;
  #L37fc26.  if v5 != v6 then goto L37fc30;
  #L37fc2a.  v5:= "\\u2028" @kind object;
  #L37fc2e.  goto L37fc3c;
  #L37fc30.  v6:= 8233I;
  #L37fc34.  if v5 != v6 then goto L37fc5c;
  #L37fc38.  v5:= "\\u2029" @kind object;
  #L37fc3c.  if v4 >= v3 then goto L37fc4e;
  #L37fc40.  v6:= v8.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37fc44.  v7:= v3 - v4 @kind int;
  #L37fc48.  call `write`(v6, v9, v4, v7) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L37fc4e.  v4:= v8.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37fc52.  call `write`(v4, v5) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L37fc58.  v4:= v3 + 1;
  #L37fc5c.  v3:= v3 + 1;
  #L37fc60.  goto L37fc04;
  #L37fc62.  if v4 >= v1 then goto L37fc72;
  #L37fc66.  v0:= v8.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37fc6a.  v1:= v1 - v4 @kind int;
  #L37fc6c.  call `write`(v0, v9, v4, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L37fc72.  v9:= v8.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37fc76.  call `write`(v9, v2) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L37fc7c.  return @kind void;
}
procedure `void` `s`(`e.e.c.a0.c` v2 @kind this) @signature `Le/e/c/a0/c;.s:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L37f930.  call temp:= `v`(v2) @signature `Le/e/c/a0/c;.v:()I` @kind direct;
  #L37f936.  v0:= temp;
  #L37f938.  v1:= 5I;
  #L37f93a.  if v0 != v1 then goto L37f94e;
  #L37f93e.  v0:= v2.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37f942.  v1:= 44I;
  #L37f946.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L37f94c.  goto L37f954;
  #L37f94e.  v1:= 3I;
  #L37f950.  if v0 != v1 then goto L37f964;
  #L37f954.  call `u`(v2) @signature `Le/e/c/a0/c;.u:()V` @kind direct;
  #L37f95a.  v0:= 4I;
  #L37f95c.  call `b`(v2, v0) @signature `Le/e/c/a0/c;.b:(I)V` @kind direct;
  #L37f962.  return @kind void;
  #L37f964.  v0:= new `java.lang.IllegalStateException`;
  #L37f968.  v1:= "Nesting problem." @kind object;
  #L37f96c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37f972.  throw v0;
}
procedure `void` `t`(`e.e.c.a0.c` v3 @kind this) @signature `Le/e/c/a0/c;.t:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L37f984.  call temp:= `v`(v3) @signature `Le/e/c/a0/c;.v:()I` @kind direct;
  #L37f98a.  v0:= temp;
  #L37f98c.  v1:= 1I;
  #L37f98e.  v2:= 2I;
  #L37f990.  if v0 == v1 then goto L37fa04;
  #L37f994.  if v0 == v2 then goto L37f9f4;
  #L37f998.  v1:= 4I;
  #L37f99a.  if v0 == v1 then goto L37f9dc;
  #L37f99e.  v1:= 6I;
  #L37f9a0.  v2:= 7I;
  #L37f9a2.  if v0 == v1 then goto L37f9d4;
  #L37f9a6.  if v0 != v2 then goto L37f9c4;
  #L37f9aa.  v0:= v3.`e.e.c.a0.c.g` @type ^`boolean` @kind boolean;
  #L37f9ae.  if v0 == 0 then goto L37f9b4;
  #L37f9b2.  goto L37f9d4;
  #L37f9b4.  v0:= new `java.lang.IllegalStateException`;
  #L37f9b8.  v1:= "JSON must have only one top-level value." @kind object;
  #L37f9bc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37f9c2.  throw v0;
  #L37f9c4.  v0:= new `java.lang.IllegalStateException`;
  #L37f9c8.  v1:= "Nesting problem." @kind object;
  #L37f9cc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37f9d2.  throw v0;
  #L37f9d4.  call `b`(v3, v2) @signature `Le/e/c/a0/c;.b:(I)V` @kind direct;
  #L37f9da.  goto L37fa10;
  #L37f9dc.  v0:= v3.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37f9e0.  v1:= v3.`e.e.c.a0.c.f` @type ^`java.lang.String` @kind object;
  #L37f9e4.  call temp:= `append`(v0, v1) @signature `Ljava/io/Writer;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @kind virtual;
  #L37f9ea.  v0:= 5I;
  #L37f9ec.  call `b`(v3, v0) @signature `Le/e/c/a0/c;.b:(I)V` @kind direct;
  #L37f9f2.  goto L37fa10;
  #L37f9f4.  v0:= v3.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37f9f8.  v1:= 44I;
  #L37f9fc.  call temp:= `append`(v0, v1) @signature `Ljava/io/Writer;.append:(C)Ljava/io/Writer;` @kind virtual;
  #L37fa02.  goto L37fa0a;
  #L37fa04.  call `b`(v3, v2) @signature `Le/e/c/a0/c;.b:(I)V` @kind direct;
  #L37fa0a.  call `u`(v3) @signature `Le/e/c/a0/c;.u:()V` @kind direct;
  #L37fa10.  return @kind void;
}
procedure `void` `u`(`e.e.c.a0.c` v4 @kind this) @signature `Le/e/c/a0/c;.u:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37faa8.  v0:= v4.`e.e.c.a0.c.e` @type ^`java.lang.String` @kind object;
  #L37faac.  if v0 != 0 then goto L37fab2;
  #L37fab0.  return @kind void;
  #L37fab2.  v0:= v4.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37fab6.  v1:= 10I;
  #L37faba.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L37fac0.  v0:= v4.`e.e.c.a0.c.d` @type ^`int`;
  #L37fac4.  v1:= 1I;
  #L37fac6.  if v1 >= v0 then goto L37fade;
  #L37faca.  v2:= v4.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37face.  v3:= v4.`e.e.c.a0.c.e` @type ^`java.lang.String` @kind object;
  #L37fad2.  call `write`(v2, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L37fad8.  v1:= v1 + 1;
  #L37fadc.  goto L37fac6;
  #L37fade.  return @kind void;
}
procedure `int` `v`(`e.e.c.a0.c` v2 @kind this) @signature `Le/e/c/a0/c;.v:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L37f7a0.  v0:= v2.`e.e.c.a0.c.d` @type ^`int`;
  #L37f7a4.  if v0 == 0 then goto L37f7b6;
  #L37f7a8.  v1:= v2.`e.e.c.a0.c.c` @type ^`int`[] @kind object;
  #L37f7ac.  v0:= v0 + -1;
  #L37f7b0.  v0:= v1[v0];
  #L37f7b4.  return v0;
  #L37f7b6.  v0:= new `java.lang.IllegalStateException`;
  #L37f7ba.  v1:= "JsonWriter is closed." @kind object;
  #L37f7be.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37f7c4.  throw v0;
}
procedure `void` `w`(`e.e.c.a0.c` v1 @kind this) @signature `Le/e/c/a0/c;.w:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L37fc90.  v0:= v1.`e.e.c.a0.c.i` @type ^`java.lang.String` @kind object;
  #L37fc94.  if v0 == 0 then goto L37fcae;
  #L37fc98.  call `s`(v1) @signature `Le/e/c/a0/c;.s:()V` @kind direct;
  #L37fc9e.  v0:= v1.`e.e.c.a0.c.i` @type ^`java.lang.String` @kind object;
  #L37fca2.  call `e`(v1, v0) @signature `Le/e/c/a0/c;.e:(Ljava/lang/String;)V` @kind direct;
  #L37fca8.  v0:= 0I;
  #L37fcaa.  v1.`e.e.c.a0.c.i` @type ^`java.lang.String` := v0 @kind object;
  #L37fcae.  return @kind void;
}
procedure `e.e.c.a0.c` `a`(`e.e.c.a0.c` v1 @kind this, `java.lang.Boolean` v2 @kind object) @signature `Le/e/c/a0/c;.a:(Ljava/lang/Boolean;)Le/e/c/a0/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37f648.  if v2 != 0 then goto L37f656;
  #L37f64c.  call temp:= `r`(v1) @signature `Le/e/c/a0/c;.r:()Le/e/c/a0/c;` @kind virtual;
  #L37f652.  v2:= temp @kind object;
  #L37f654.  return v2 @kind object;
  #L37f656.  call `w`(v1) @signature `Le/e/c/a0/c;.w:()V` @kind direct;
  #L37f65c.  call `t`(v1) @signature `Le/e/c/a0/c;.t:()V` @kind direct;
  #L37f662.  v0:= v1.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37f666.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L37f66c.  v2:= temp;
  #L37f66e.  if v2 == 0 then goto L37f678;
  #L37f672.  v2:= "true" @kind object;
  #L37f676.  goto L37f67c;
  #L37f678.  v2:= "false" @kind object;
  #L37f67c.  call `write`(v0, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L37f682.  return v1 @kind object;
}
procedure `e.e.c.a0.c` `a`(`e.e.c.a0.c` v3 @kind this, `java.lang.Number` v4 @kind object) @signature `Le/e/c/a0/c;.a:(Ljava/lang/Number;)Le/e/c/a0/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37f694.  if v4 != 0 then goto L37f6a2;
  #L37f698.  call temp:= `r`(v3) @signature `Le/e/c/a0/c;.r:()Le/e/c/a0/c;` @kind virtual;
  #L37f69e.  v4:= temp @kind object;
  #L37f6a0.  return v4 @kind object;
  #L37f6a2.  call `w`(v3) @signature `Le/e/c/a0/c;.w:()V` @kind direct;
  #L37f6a8.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L37f6ae.  v0:= temp @kind object;
  #L37f6b0.  v1:= v3.`e.e.c.a0.c.g` @type ^`boolean` @kind boolean;
  #L37f6b4.  if v1 != 0 then goto L37f718;
  #L37f6b8.  v1:= "-Infinity" @kind object;
  #L37f6bc.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L37f6c2.  v1:= temp;
  #L37f6c4.  if v1 != 0 then goto L37f6ea;
  #L37f6c8.  v1:= "Infinity" @kind object;
  #L37f6cc.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L37f6d2.  v1:= temp;
  #L37f6d4.  if v1 != 0 then goto L37f6ea;
  #L37f6d8.  v1:= "NaN" @kind object;
  #L37f6dc.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L37f6e2.  v1:= temp;
  #L37f6e4.  if v1 != 0 then goto L37f6ea;
  #L37f6e8.  goto L37f718;
  #L37f6ea.  v0:= new `java.lang.IllegalArgumentException`;
  #L37f6ee.  v1:= new `java.lang.StringBuilder`;
  #L37f6f2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37f6f8.  v2:= "Numeric values must be finite, but was " @kind object;
  #L37f6fc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37f702.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37f708.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37f70e.  v4:= temp @kind object;
  #L37f710.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37f716.  throw v0;
  #L37f718.  call `t`(v3) @signature `Le/e/c/a0/c;.t:()V` @kind direct;
  #L37f71e.  v4:= v3.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37f722.  call temp:= `append`(v4, v0) @signature `Ljava/io/Writer;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @kind virtual;
  #L37f728.  return v3 @kind object;
}
procedure `void` `a`(`e.e.c.a0.c` v0 @kind this, `boolean` v1 ) @signature `Le/e/c/a0/c;.a:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L37fb58.  v0.`e.e.c.a0.c.h` @type ^`boolean` := v1 @kind boolean;
  #L37fb5c.  return @kind void;
}
procedure `e.e.c.a0.c` `b`(`e.e.c.a0.c` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Le/e/c/a0/c;.b:(Ljava/lang/String;)Le/e/c/a0/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37f548.  if v2 == 0 then goto L37f57e;
  #L37f54c.  v0:= v1.`e.e.c.a0.c.i` @type ^`java.lang.String` @kind object;
  #L37f550.  if v0 != 0 then goto L37f572;
  #L37f554.  v0:= v1.`e.e.c.a0.c.d` @type ^`int`;
  #L37f558.  if v0 == 0 then goto L37f562;
  #L37f55c.  v1.`e.e.c.a0.c.i` @type ^`java.lang.String` := v2 @kind object;
  #L37f560.  return v1 @kind object;
  #L37f562.  v2:= new `java.lang.IllegalStateException`;
  #L37f566.  v0:= "JsonWriter is closed." @kind object;
  #L37f56a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37f570.  throw v2;
  #L37f572.  v2:= new `java.lang.IllegalStateException`;
  #L37f576.  call `<init>`(v2) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L37f57c.  throw v2;
  #L37f57e.  v2:= new `java.lang.NullPointerException`;
  #L37f582.  v0:= "name == null" @kind object;
  #L37f586.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37f58c.  throw v2;
}
procedure `void` `b`(`e.e.c.a0.c` v0 @kind this, `boolean` v1 ) @signature `Le/e/c/a0/c;.b:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L37fba8.  v0.`e.e.c.a0.c.g` @type ^`boolean` := v1 @kind boolean;
  #L37fbac.  return @kind void;
}
procedure `void` `c`(`e.e.c.a0.c` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Le/e/c/a0/c;.c:(Ljava/lang/String;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L37fb70.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L37fb76.  v0:= temp;
  #L37fb78.  if v0 != 0 then goto L37fb88;
  #L37fb7c.  v2:= 0I;
  #L37fb7e.  v1.`e.e.c.a0.c.e` @type ^`java.lang.String` := v2 @kind object;
  #L37fb82.  v2:= ":" @kind object;
  #L37fb86.  goto L37fb90;
  #L37fb88.  v1.`e.e.c.a0.c.e` @type ^`java.lang.String` := v2 @kind object;
  #L37fb8c.  v2:= ": " @kind object;
  #L37fb90.  v1.`e.e.c.a0.c.f` @type ^`java.lang.String` := v2 @kind object;
  #L37fb94.  return @kind void;
}
procedure `void` `c`(`e.e.c.a0.c` v0 @kind this, `boolean` v1 ) @signature `Le/e/c/a0/c;.c:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L37fbc0.  v0.`e.e.c.a0.c.j` @type ^`boolean` := v1 @kind boolean;
  #L37fbc4.  return @kind void;
}
procedure `void` `close`(`e.e.c.a0.c` v3 @kind this) @signature `Le/e/c/a0/c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37fa24.  v0:= v3.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37fa28.  call `close`(v0) @signature `Ljava/io/Writer;.close:()V` @kind virtual;
  #L37fa2e.  v0:= v3.`e.e.c.a0.c.d` @type ^`int`;
  #L37fa32.  v1:= 1I;
  #L37fa34.  if v0 > v1 then goto L37fa54;
  #L37fa38.  if v0 != v1 then goto L37fa4c;
  #L37fa3c.  v2:= v3.`e.e.c.a0.c.c` @type ^`int`[] @kind object;
  #L37fa40.  v0:= v0 - v1 @kind int;
  #L37fa42.  v0:= v2[v0];
  #L37fa46.  v1:= 7I;
  #L37fa48.  if v0 != v1 then goto L37fa54;
  #L37fa4c.  v0:= 0I;
  #L37fa4e.  v3.`e.e.c.a0.c.d` @type ^`int` := v0;
  #L37fa52.  return @kind void;
  #L37fa54.  v0:= new `java.io.IOException`;
  #L37fa58.  v1:= "Incomplete document" @kind object;
  #L37fa5c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37fa62.  throw v0;
}
procedure `e.e.c.a0.c` `d`(`e.e.c.a0.c` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Le/e/c/a0/c;.d:(Ljava/lang/String;)Le/e/c/a0/c;` @AccessFlag PUBLIC {
    temp;

  #L37f73c.  if v1 != 0 then goto L37f74a;
  #L37f740.  call temp:= `r`(v0) @signature `Le/e/c/a0/c;.r:()Le/e/c/a0/c;` @kind virtual;
  #L37f746.  v1:= temp @kind object;
  #L37f748.  return v1 @kind object;
  #L37f74a.  call `w`(v0) @signature `Le/e/c/a0/c;.w:()V` @kind direct;
  #L37f750.  call `t`(v0) @signature `Le/e/c/a0/c;.t:()V` @kind direct;
  #L37f756.  call `e`(v0, v1) @signature `Le/e/c/a0/c;.e:(Ljava/lang/String;)V` @kind direct;
  #L37f75c.  return v0 @kind object;
}
procedure `e.e.c.a0.c` `d`(`e.e.c.a0.c` v1 @kind this, `boolean` v2 ) @signature `Le/e/c/a0/c;.d:(Z)Le/e/c/a0/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37f610.  call `w`(v1) @signature `Le/e/c/a0/c;.w:()V` @kind direct;
  #L37f616.  call `t`(v1) @signature `Le/e/c/a0/c;.t:()V` @kind direct;
  #L37f61c.  v0:= v1.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37f620.  if v2 == 0 then goto L37f62a;
  #L37f624.  v2:= "true" @kind object;
  #L37f628.  goto L37f62e;
  #L37f62a.  v2:= "false" @kind object;
  #L37f62e.  call `write`(v0, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L37f634.  return v1 @kind object;
}
procedure `e.e.c.a0.c` `f`(`e.e.c.a0.c` v1 @kind this, `long` v2 ) @signature `Le/e/c/a0/c;.f:(J)Le/e/c/a0/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37f770.  call `w`(v1) @signature `Le/e/c/a0/c;.w:()V` @kind direct;
  #L37f776.  call `t`(v1) @signature `Le/e/c/a0/c;.t:()V` @kind direct;
  #L37f77c.  v0:= v1.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37f780.  call temp:= `toString`(v2) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L37f786.  v2:= temp @kind object;
  #L37f788.  call `write`(v0, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L37f78e.  return v1 @kind object;
}
procedure `void` `flush`(`e.e.c.a0.c` v2 @kind this) @signature `Le/e/c/a0/c;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37fa74.  v0:= v2.`e.e.c.a0.c.d` @type ^`int`;
  #L37fa78.  if v0 == 0 then goto L37fa88;
  #L37fa7c.  v0:= v2.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37fa80.  call `flush`(v0) @signature `Ljava/io/Writer;.flush:()V` @kind virtual;
  #L37fa86.  return @kind void;
  #L37fa88.  v0:= new `java.lang.IllegalStateException`;
  #L37fa8c.  v1:= "JsonWriter is closed." @kind object;
  #L37fa90.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37fa96.  throw v0;
}
procedure `e.e.c.a0.c` `k`(`e.e.c.a0.c` v2 @kind this) @signature `Le/e/c/a0/c;.k:()Le/e/c/a0/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37f430.  call `w`(v2) @signature `Le/e/c/a0/c;.w:()V` @kind direct;
  #L37f436.  v0:= 1I;
  #L37f438.  v1:= 91I;
  #L37f43c.  call temp:= `a`(v2, v0, v1) @signature `Le/e/c/a0/c;.a:(IC)Le/e/c/a0/c;` @kind direct;
  #L37f442.  return v2 @kind object;
}
procedure `e.e.c.a0.c` `l`(`e.e.c.a0.c` v2 @kind this) @signature `Le/e/c/a0/c;.l:()Le/e/c/a0/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37f454.  call `w`(v2) @signature `Le/e/c/a0/c;.w:()V` @kind direct;
  #L37f45a.  v0:= 3I;
  #L37f45c.  v1:= 123I;
  #L37f460.  call temp:= `a`(v2, v0, v1) @signature `Le/e/c/a0/c;.a:(IC)Le/e/c/a0/c;` @kind direct;
  #L37f466.  return v2 @kind object;
}
procedure `e.e.c.a0.c` `m`(`e.e.c.a0.c` v3 @kind this) @signature `Le/e/c/a0/c;.m:()Le/e/c/a0/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37f508.  v0:= 1I;
  #L37f50a.  v1:= 2I;
  #L37f50c.  v2:= 93I;
  #L37f510.  call temp:= `a`(v3, v0, v1, v2) @signature `Le/e/c/a0/c;.a:(IIC)Le/e/c/a0/c;` @kind direct;
  #L37f516.  return v3 @kind object;
}
procedure `e.e.c.a0.c` `n`(`e.e.c.a0.c` v3 @kind this) @signature `Le/e/c/a0/c;.n:()Le/e/c/a0/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37f528.  v0:= 3I;
  #L37f52a.  v1:= 5I;
  #L37f52c.  v2:= 125I;
  #L37f530.  call temp:= `a`(v3, v0, v1, v2) @signature `Le/e/c/a0/c;.a:(IIC)Le/e/c/a0/c;` @kind direct;
  #L37f536.  return v3 @kind object;
}
procedure `boolean` `o`(`e.e.c.a0.c` v1 @kind this) @signature `Le/e/c/a0/c;.o:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L37f3e8.  v0:= v1.`e.e.c.a0.c.j` @type ^`boolean` @kind boolean;
  #L37f3ec.  return v0;
}
procedure `boolean` `p`(`e.e.c.a0.c` v1 @kind this) @signature `Le/e/c/a0/c;.p:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L37f400.  v0:= v1.`e.e.c.a0.c.h` @type ^`boolean` @kind boolean;
  #L37f404.  return v0;
}
procedure `boolean` `q`(`e.e.c.a0.c` v1 @kind this) @signature `Le/e/c/a0/c;.q:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37f418.  v0:= v1.`e.e.c.a0.c.g` @type ^`boolean` @kind boolean;
  #L37f41c.  return v0;
}
procedure `e.e.c.a0.c` `r`(`e.e.c.a0.c` v2 @kind this) @signature `Le/e/c/a0/c;.r:()Le/e/c/a0/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37f5a0.  v0:= v2.`e.e.c.a0.c.i` @type ^`java.lang.String` @kind object;
  #L37f5a4.  if v0 == 0 then goto L37f5c0;
  #L37f5a8.  v0:= v2.`e.e.c.a0.c.j` @type ^`boolean` @kind boolean;
  #L37f5ac.  if v0 == 0 then goto L37f5b8;
  #L37f5b0.  call `w`(v2) @signature `Le/e/c/a0/c;.w:()V` @kind direct;
  #L37f5b6.  goto L37f5c0;
  #L37f5b8.  v0:= 0I;
  #L37f5ba.  v2.`e.e.c.a0.c.i` @type ^`java.lang.String` := v0 @kind object;
  #L37f5be.  return v2 @kind object;
  #L37f5c0.  call `t`(v2) @signature `Le/e/c/a0/c;.t:()V` @kind direct;
  #L37f5c6.  v0:= v2.`e.e.c.a0.c.b` @type ^`java.io.Writer` @kind object;
  #L37f5ca.  v1:= "null" @kind object;
  #L37f5ce.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L37f5d4.  return v2 @kind object;
}
