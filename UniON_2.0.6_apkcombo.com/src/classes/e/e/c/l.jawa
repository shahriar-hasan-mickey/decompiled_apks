record `e.e.c.l` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`e.e.c.l` v0 @kind this) @signature `Le/e/c/l;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L373c90.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L373c96.  return @kind void;
}
procedure `e.e.c.i` `d`(`e.e.c.l` v3 @kind this) @signature `Le/e/c/l;.d:()Le/e/c/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L373b0c.  call temp:= `j`(v3) @signature `Le/e/c/l;.j:()Z` @kind virtual;
  #L373b12.  v0:= temp;
  #L373b14.  if v0 == 0 then goto L373b20;
  #L373b18.  v0:= v3 @kind object;
  #L373b1a.  v0:= (`e.e.c.i`) v0 @kind object;
  #L373b1e.  return v0 @kind object;
  #L373b20.  v0:= new `java.lang.IllegalStateException`;
  #L373b24.  v1:= new `java.lang.StringBuilder`;
  #L373b28.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L373b2e.  v2:= "Not a JSON Array: " @kind object;
  #L373b32.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L373b38.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L373b3e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L373b44.  v1:= temp @kind object;
  #L373b46.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L373b4c.  throw v0;
}
procedure `e.e.c.o` `f`(`e.e.c.l` v3 @kind this) @signature `Le/e/c/l;.f:()Le/e/c/o;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L373b60.  call temp:= `l`(v3) @signature `Le/e/c/l;.l:()Z` @kind virtual;
  #L373b66.  v0:= temp;
  #L373b68.  if v0 == 0 then goto L373b74;
  #L373b6c.  v0:= v3 @kind object;
  #L373b6e.  v0:= (`e.e.c.o`) v0 @kind object;
  #L373b72.  return v0 @kind object;
  #L373b74.  v0:= new `java.lang.IllegalStateException`;
  #L373b78.  v1:= new `java.lang.StringBuilder`;
  #L373b7c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L373b82.  v2:= "Not a JSON Object: " @kind object;
  #L373b86.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L373b8c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L373b92.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L373b98.  v1:= temp @kind object;
  #L373b9a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L373ba0.  throw v0;
}
procedure `e.e.c.q` `g`(`e.e.c.l` v3 @kind this) @signature `Le/e/c/l;.g:()Le/e/c/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L373bb4.  call temp:= `m`(v3) @signature `Le/e/c/l;.m:()Z` @kind virtual;
  #L373bba.  v0:= temp;
  #L373bbc.  if v0 == 0 then goto L373bc8;
  #L373bc0.  v0:= v3 @kind object;
  #L373bc2.  v0:= (`e.e.c.q`) v0 @kind object;
  #L373bc6.  return v0 @kind object;
  #L373bc8.  v0:= new `java.lang.IllegalStateException`;
  #L373bcc.  v1:= new `java.lang.StringBuilder`;
  #L373bd0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L373bd6.  v2:= "Not a JSON Primitive: " @kind object;
  #L373bda.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L373be0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L373be6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L373bec.  v1:= temp @kind object;
  #L373bee.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L373bf4.  throw v0;
}
procedure `java.lang.String` `i`(`e.e.c.l` v2 @kind this) @signature `Le/e/c/l;.i:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L373c08.  v0:= new `java.lang.UnsupportedOperationException`;
  #L373c0c.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L373c12.  v1:= temp @kind object;
  #L373c14.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L373c1a.  v1:= temp @kind object;
  #L373c1c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L373c22.  throw v0;
}
procedure `boolean` `j`(`e.e.c.l` v1 @kind this) @signature `Le/e/c/l;.j:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L373aac.  v0:= instanceof @variable v1 @type ^`e.e.c.i` @kind boolean;
  #L373ab0.  return v0;
}
procedure `boolean` `k`(`e.e.c.l` v1 @kind this) @signature `Le/e/c/l;.k:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L373ac4.  v0:= instanceof @variable v1 @type ^`e.e.c.n` @kind boolean;
  #L373ac8.  return v0;
}
procedure `boolean` `l`(`e.e.c.l` v1 @kind this) @signature `Le/e/c/l;.l:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L373adc.  v0:= instanceof @variable v1 @type ^`e.e.c.o` @kind boolean;
  #L373ae0.  return v0;
}
procedure `boolean` `m`(`e.e.c.l` v1 @kind this) @signature `Le/e/c/l;.m:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L373af4.  v0:= instanceof @variable v1 @type ^`e.e.c.q` @kind boolean;
  #L373af8.  return v0;
}
procedure `java.lang.String` `toString`(`e.e.c.l` v3 @kind this) @signature `Le/e/c/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L373c34.  v0:= new `java.io.StringWriter`;
  #L373c38.  call `<init>`(v0) @signature `Ljava/io/StringWriter;.<init>:()V` @kind direct;
  #L373c3e.  v1:= new `e.e.c.a0.c`;
  #L373c42.  call `<init>`(v1, v0) @signature `Le/e/c/a0/c;.<init>:(Ljava/io/Writer;)V` @kind direct;
  #L373c48.  v2:= 1I;
  #L373c4a.  call `b`(v1, v2) @signature `Le/e/c/a0/c;.b:(Z)V` @kind virtual;
  #L373c50.  call `a`(v3, v1) @signature `Le/e/c/y/l;.a:(Le/e/c/l;Le/e/c/a0/c;)V` @kind static;
  #L373c56.  call temp:= `toString`(v0) @signature `Ljava/io/StringWriter;.toString:()Ljava/lang/String;` @kind virtual;
  #L373c5c.  v0:= temp @kind object;
  #L373c5e.  return v0 @kind object;
  #L373c60.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L373c62.  v1:= new `java.lang.AssertionError`;
  #L373c66.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L373c6c.  throw v1;
  catch `java.io.IOException` @[L373c34..L373c5e] goto L373c60;
}
