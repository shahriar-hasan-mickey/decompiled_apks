record `e.e.b.b.a.g` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `e.e.b.b.a.g.a` @AccessFlag PRIVATE;
  `java.lang.Boolean` `e.e.b.b.a.g.b` @AccessFlag PRIVATE;
  `java.lang.Integer` `e.e.b.b.a.g.c` @AccessFlag PRIVATE;
  `java.lang.Thread$UncaughtExceptionHandler` `e.e.b.b.a.g.d` @AccessFlag PRIVATE;
  `java.util.concurrent.ThreadFactory` `e.e.b.b.a.g.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.b.b.a.g` v1 @kind this) @signature `Le/e/b/b/a/g;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L35e810.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L35e816.  v0:= 0I;
  #L35e818.  v1.`e.e.b.b.a.g.a` @type ^`java.lang.String` := v0 @kind object;
  #L35e81c.  v1.`e.e.b.b.a.g.b` @type ^`java.lang.Boolean` := v0 @kind object;
  #L35e820.  v1.`e.e.b.b.a.g.c` @type ^`java.lang.Integer` := v0 @kind object;
  #L35e824.  v1.`e.e.b.b.a.g.d` @type ^`java.lang.Thread$UncaughtExceptionHandler` := v0 @kind object;
  #L35e828.  v1.`e.e.b.b.a.g.e` @type ^`java.util.concurrent.ThreadFactory` := v0 @kind object;
  #L35e82c.  return @kind void;
}
procedure `java.lang.String` `a`(`java.lang.String` v0 @kind object, `java.lang.Object`[] v1 @kind object) @signature `Le/e/b/b/a/g;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L35e75c.  call temp:= `b`(v0, v1) @signature `Le/e/b/b/a/g;.b:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L35e762.  v0:= temp @kind object;
  #L35e764.  return v0 @kind object;
}
procedure `java.util.concurrent.ThreadFactory` `a`(`e.e.b.b.a.g` v9 @kind object) @signature `Le/e/b/b/a/g;.a:(Le/e/b/b/a/g;)Ljava/util/concurrent/ThreadFactory;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L35e7b4.  v2:= v9.`e.e.b.b.a.g.a` @type ^`java.lang.String` @kind object;
  #L35e7b8.  v4:= v9.`e.e.b.b.a.g.b` @type ^`java.lang.Boolean` @kind object;
  #L35e7bc.  v5:= v9.`e.e.b.b.a.g.c` @type ^`java.lang.Integer` @kind object;
  #L35e7c0.  v6:= v9.`e.e.b.b.a.g.d` @type ^`java.lang.Thread$UncaughtExceptionHandler` @kind object;
  #L35e7c4.  v9:= v9.`e.e.b.b.a.g.e` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L35e7c8.  if v9 == 0 then goto L35e7ce;
  #L35e7cc.  goto L35e7d6;
  #L35e7ce.  call temp:= `defaultThreadFactory`() @signature `Ljava/util/concurrent/Executors;.defaultThreadFactory:()Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L35e7d4.  v9:= temp @kind object;
  #L35e7d6.  v1:= v9 @kind object;
  #L35e7d8.  if v2 == 0 then goto L35e7ec;
  #L35e7dc.  v9:= new `java.util.concurrent.atomic.AtomicLong`;
  #L35e7e0.  v7:= 0L;
  #L35e7e4.  call `<init>`(v9, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:(J)V` @kind direct;
  #L35e7ea.  goto L35e7ee;
  #L35e7ec.  v9:= 0I;
  #L35e7ee.  v3:= v9 @kind object;
  #L35e7f0.  v9:= new `e.e.b.b.a.g$a`;
  #L35e7f4.  v0:= v9 @kind object;
  #L35e7f6.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Le/e/b/b/a/g$a;.<init>:(Ljava/util/concurrent/ThreadFactory;Ljava/lang/String;Ljava/util/concurrent/atomic/AtomicLong;Ljava/lang/Boolean;Ljava/lang/Integer;Ljava/lang/Thread$UncaughtExceptionHandler;)V` @kind direct;
  #L35e7fc.  return v9 @kind object;
}
procedure `java.lang.String` `b`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Le/e/b/b/a/g;.b:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L35e778.  v0:= `@@java.util.Locale.ROOT` @type ^`java.util.Locale` @kind object;
  #L35e77c.  call temp:= `format`(v0, v1, v2) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L35e782.  v1:= temp @kind object;
  #L35e784.  return v1 @kind object;
}
procedure `e.e.b.b.a.g` `a`(`e.e.b.b.a.g` v4 @kind this, `int` v5 ) @signature `Le/e/b/b/a/g;.a:(I)Le/e/b/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L35e710.  v0:= 0I;
  #L35e712.  v1:= 1I;
  #L35e714.  if v5 < v1 then goto L35e71c;
  #L35e718.  v2:= 1I;
  #L35e71a.  goto L35e71e;
  #L35e71c.  v2:= 0I;
  #L35e71e.  v3:= "Thread priority (%s) must be >= %s" @kind object;
  #L35e722.  call `a`(v2, v3, v5, v1) @signature `Le/e/b/a/b;.a:(ZLjava/lang/String;II)V` @kind static;
  #L35e728.  v2:= 10I;
  #L35e72c.  if v5 > v2 then goto L35e732;
  #L35e730.  v0:= 1I;
  #L35e732.  v1:= "Thread priority (%s) must be <= %s" @kind object;
  #L35e736.  call `a`(v0, v1, v5, v2) @signature `Le/e/b/a/b;.a:(ZLjava/lang/String;II)V` @kind static;
  #L35e73c.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L35e742.  v5:= temp @kind object;
  #L35e744.  v4.`e.e.b.b.a.g.c` @type ^`java.lang.Integer` := v5 @kind object;
  #L35e748.  return v4 @kind object;
}
procedure `e.e.b.b.a.g` `a`(`e.e.b.b.a.g` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Le/e/b/b/a/g;.a:(Ljava/lang/String;)Le/e/b/b/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L35e6e0.  v0:= 1I;
  #L35e6e2.  v0:= new `java.lang.Object`[v0];
  #L35e6e6.  v1:= 0I;
  #L35e6e8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L35e6ee.  v2:= temp @kind object;
  #L35e6f0.  v0[v1]:= v2 @kind object;
  #L35e6f4.  call temp:= `b`(v4, v0) @signature `Le/e/b/b/a/g;.b:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L35e6fa.  v3.`e.e.b.b.a.g.a` @type ^`java.lang.String` := v4 @kind object;
  #L35e6fe.  return v3 @kind object;
}
procedure `java.util.concurrent.ThreadFactory` `a`(`e.e.b.b.a.g` v1 @kind this) @signature `Le/e/b/b/a/g;.a:()Ljava/util/concurrent/ThreadFactory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35e798.  call temp:= `a`(v1) @signature `Le/e/b/b/a/g;.a:(Le/e/b/b/a/g;)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L35e79e.  v0:= temp @kind object;
  #L35e7a0.  return v0 @kind object;
}
