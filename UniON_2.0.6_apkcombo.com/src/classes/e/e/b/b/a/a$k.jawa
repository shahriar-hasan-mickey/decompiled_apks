record `e.e.b.b.a.a$k` @kind class @AccessFlag FINAL extends `e.e.b.b.a.a$b` @kind class {
}
global `sun.misc.Unsafe` `@@e.e.b.b.a.a$k.a` @AccessFlag STATIC_FINAL;
global `long` `@@e.e.b.b.a.a$k.b` @AccessFlag STATIC_FINAL;
global `long` `@@e.e.b.b.a.a$k.c` @AccessFlag STATIC_FINAL;
global `long` `@@e.e.b.b.a.a$k.d` @AccessFlag STATIC_FINAL;
global `long` `@@e.e.b.b.a.a$k.e` @AccessFlag STATIC_FINAL;
global `long` `@@e.e.b.b.a.a$k.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/b/b/a/a$k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L35d2a0.  v0:= constclass @type ^`e.e.b.b.a.a$l` @kind object;
  #L35d2a4.  call temp:= `getUnsafe`() @signature `Lsun/misc/Unsafe;.getUnsafe:()Lsun/misc/Unsafe;` @kind static;
  #L35d2aa.  v1:= temp @kind object;
  #L35d2ac.  goto L35d2c4;
  #L35d2ae.  v1:= new `e.e.b.b.a.a$k$a`;
  #L35d2b2.  call `<init>`(v1) @signature `Le/e/b/b/a/a$k$a;.<init>:()V` @kind direct;
  #L35d2b8.  call temp:= `doPrivileged`(v1) @signature `Ljava/security/AccessController;.doPrivileged:(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;` @kind static;
  #L35d2be.  v1:= temp @kind object;
  #L35d2c0.  v1:= (`sun.misc.Unsafe`) v1 @kind object;
  #L35d2c4.  v2:= constclass @type ^`e.e.b.b.a.a` @kind object;
  #L35d2c8.  v3:= "d" @kind object;
  #L35d2cc.  call temp:= `getDeclaredField`(v2, v3) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L35d2d2.  v3:= temp @kind object;
  #L35d2d4.  call temp:= `objectFieldOffset`(v1, v3) @signature `Lsun/misc/Unsafe;.objectFieldOffset:(Ljava/lang/reflect/Field;)J` @kind virtual;
  #L35d2da.  v3:= temp @kind wide;
  #L35d2dc.  `@@e.e.b.b.a.a$k.c` @type ^`long` := v3 @kind wide;
  #L35d2e0.  v3:= "c" @kind object;
  #L35d2e4.  call temp:= `getDeclaredField`(v2, v3) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L35d2ea.  v3:= temp @kind object;
  #L35d2ec.  call temp:= `objectFieldOffset`(v1, v3) @signature `Lsun/misc/Unsafe;.objectFieldOffset:(Ljava/lang/reflect/Field;)J` @kind virtual;
  #L35d2f2.  v3:= temp @kind wide;
  #L35d2f4.  `@@e.e.b.b.a.a$k.b` @type ^`long` := v3 @kind wide;
  #L35d2f8.  v3:= "b" @kind object;
  #L35d2fc.  call temp:= `getDeclaredField`(v2, v3) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L35d302.  v2:= temp @kind object;
  #L35d304.  call temp:= `objectFieldOffset`(v1, v2) @signature `Lsun/misc/Unsafe;.objectFieldOffset:(Ljava/lang/reflect/Field;)J` @kind virtual;
  #L35d30a.  v2:= temp @kind wide;
  #L35d30c.  `@@e.e.b.b.a.a$k.d` @type ^`long` := v2 @kind wide;
  #L35d310.  v2:= "a" @kind object;
  #L35d314.  call temp:= `getDeclaredField`(v0, v2) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L35d31a.  v2:= temp @kind object;
  #L35d31c.  call temp:= `objectFieldOffset`(v1, v2) @signature `Lsun/misc/Unsafe;.objectFieldOffset:(Ljava/lang/reflect/Field;)J` @kind virtual;
  #L35d322.  v2:= temp @kind wide;
  #L35d324.  `@@e.e.b.b.a.a$k.e` @type ^`long` := v2 @kind wide;
  #L35d328.  v2:= "b" @kind object;
  #L35d32c.  call temp:= `getDeclaredField`(v0, v2) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L35d332.  v0:= temp @kind object;
  #L35d334.  call temp:= `objectFieldOffset`(v1, v0) @signature `Lsun/misc/Unsafe;.objectFieldOffset:(Ljava/lang/reflect/Field;)J` @kind virtual;
  #L35d33a.  v2:= temp @kind wide;
  #L35d33c.  `@@e.e.b.b.a.a$k.f` @type ^`long` := v2 @kind wide;
  #L35d340.  `@@e.e.b.b.a.a$k.a` @type ^`sun.misc.Unsafe` := v1 @kind object;
  #L35d344.  return @kind void;
  #L35d346.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L35d348.  call `a`(v0) @signature `Le/e/b/a/d;.a:(Ljava/lang/Throwable;)V` @kind static;
  #L35d34e.  v1:= new `java.lang.RuntimeException`;
  #L35d352.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L35d358.  throw v1;
  #L35d35a.  v0:= Exception @type ^`java.security.PrivilegedActionException` @kind object;
  #L35d35c.  v1:= new `java.lang.RuntimeException`;
  #L35d360.  call temp:= `getCause`(v0) @signature `Ljava/security/PrivilegedActionException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L35d366.  v0:= temp @kind object;
  #L35d368.  v2:= "Could not initialize intrinsics" @kind object;
  #L35d36c.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L35d372.  throw v1;
  catch `java.lang.SecurityException` @[L35d2a4..L35d2ac] goto L35d2ae;
  catch `java.security.PrivilegedActionException` @[L35d2ae..L35d2c4] goto L35d35a;
  catch `java.lang.Exception` @[L35d2c4..L35d2c8] goto L35d346;
  catch `java.lang.Exception` @[L35d2cc..L35d2e0] goto L35d346;
  catch `java.lang.Exception` @[L35d2e4..L35d2f8] goto L35d346;
  catch `java.lang.Exception` @[L35d2fc..L35d310] goto L35d346;
  catch `java.lang.Exception` @[L35d314..L35d328] goto L35d346;
  catch `java.lang.Exception` @[L35d32c..L35d344] goto L35d346;
}
procedure `void` `<init>`(`e.e.b.b.a.a$k` v1 @kind this) @signature `Le/e/b/b/a/a$k;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L35d3d4.  v0:= 0I;
  #L35d3d6.  call `<init>`(v1, v0) @signature `Le/e/b/b/a/a$b;.<init>:(Le/e/b/b/a/a$a;)V` @kind direct;
  #L35d3dc.  return @kind void;
}
procedure `void` `<init>`(`e.e.b.b.a.a$k` v0 @kind this, `e.e.b.b.a.a$a` v1 @kind object) @signature `Le/e/b/b/a/a$k;.<init>:(Le/e/b/b/a/a$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L35d3f0.  call `<init>`(v0) @signature `Le/e/b/b/a/a$k;.<init>:()V` @kind direct;
  #L35d3f6.  return @kind void;
}
procedure `void` `a`(`e.e.b.b.a.a$k` v3 @kind this, `e.e.b.b.a.a$l` v4 @kind object, `e.e.b.b.a.a$l` v5 @kind object) @signature `Le/e/b/b/a/a$k;.a:(Le/e/b/b/a/a$l;Le/e/b/b/a/a$l;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L35d408.  v0:= `@@e.e.b.b.a.a$k.a` @type ^`sun.misc.Unsafe` @kind object;
  #L35d40c.  v1:= `@@e.e.b.b.a.a$k.f` @type ^`long` @kind wide;
  #L35d410.  call `putObject`(v0, v4, v1, v5) @signature `Lsun/misc/Unsafe;.putObject:(Ljava/lang/Object;JLjava/lang/Object;)V` @kind virtual;
  #L35d416.  return @kind void;
}
procedure `void` `a`(`e.e.b.b.a.a$k` v3 @kind this, `e.e.b.b.a.a$l` v4 @kind object, `java.lang.Thread` v5 @kind object) @signature `Le/e/b/b/a/a$k;.a:(Le/e/b/b/a/a$l;Ljava/lang/Thread;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L35d428.  v0:= `@@e.e.b.b.a.a$k.a` @type ^`sun.misc.Unsafe` @kind object;
  #L35d42c.  v1:= `@@e.e.b.b.a.a$k.e` @type ^`long` @kind wide;
  #L35d430.  call `putObject`(v0, v4, v1, v5) @signature `Lsun/misc/Unsafe;.putObject:(Ljava/lang/Object;JLjava/lang/Object;)V` @kind virtual;
  #L35d436.  return @kind void;
}
procedure `boolean` `a`(`e.e.b.b.a.a$k` v6 @kind this, `e.e.b.b.a.a` v7 @kind object, `e.e.b.b.a.a$e` v8 @kind object, `e.e.b.b.a.a$e` v9 @kind object) @signature `Le/e/b/b/a/a$k;.a:(Le/e/b/b/a/a;Le/e/b/b/a/a$e;Le/e/b/b/a/a$e;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L35d228.  v0:= `@@e.e.b.b.a.a$k.a` @type ^`sun.misc.Unsafe` @kind object;
  #L35d22c.  v2:= `@@e.e.b.b.a.a$k.b` @type ^`long` @kind wide;
  #L35d230.  v1:= v7 @kind object;
  #L35d232.  v4:= v8 @kind object;
  #L35d234.  v5:= v9 @kind object;
  #L35d236.  call temp:= `compareAndSwapObject`(v0, v1, v2, v4, v5) @signature `Lsun/misc/Unsafe;.compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L35d23c.  v7:= temp;
  #L35d23e.  return v7;
}
procedure `boolean` `a`(`e.e.b.b.a.a$k` v6 @kind this, `e.e.b.b.a.a` v7 @kind object, `e.e.b.b.a.a$l` v8 @kind object, `e.e.b.b.a.a$l` v9 @kind object) @signature `Le/e/b/b/a/a$k;.a:(Le/e/b/b/a/a;Le/e/b/b/a/a$l;Le/e/b/b/a/a$l;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L35d278.  v0:= `@@e.e.b.b.a.a$k.a` @type ^`sun.misc.Unsafe` @kind object;
  #L35d27c.  v2:= `@@e.e.b.b.a.a$k.c` @type ^`long` @kind wide;
  #L35d280.  v1:= v7 @kind object;
  #L35d282.  v4:= v8 @kind object;
  #L35d284.  v5:= v9 @kind object;
  #L35d286.  call temp:= `compareAndSwapObject`(v0, v1, v2, v4, v5) @signature `Lsun/misc/Unsafe;.compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L35d28c.  v7:= temp;
  #L35d28e.  return v7;
}
procedure `boolean` `a`(`e.e.b.b.a.a$k` v6 @kind this, `e.e.b.b.a.a` v7 @kind object, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object) @signature `Le/e/b/b/a/a$k;.a:(Le/e/b/b/a/a;Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L35d250.  v0:= `@@e.e.b.b.a.a$k.a` @type ^`sun.misc.Unsafe` @kind object;
  #L35d254.  v2:= `@@e.e.b.b.a.a$k.d` @type ^`long` @kind wide;
  #L35d258.  v1:= v7 @kind object;
  #L35d25a.  v4:= v8 @kind object;
  #L35d25c.  v5:= v9 @kind object;
  #L35d25e.  call temp:= `compareAndSwapObject`(v0, v1, v2, v4, v5) @signature `Lsun/misc/Unsafe;.compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L35d264.  v7:= temp;
  #L35d266.  return v7;
}
