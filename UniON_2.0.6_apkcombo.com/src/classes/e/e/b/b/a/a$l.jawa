record `e.e.b.b.a.a$l` @kind class @AccessFlag FINAL {
  `java.lang.Thread` `e.e.b.b.a.a$l.a` @AccessFlag VOLATILE;
  `e.e.b.b.a.a$l` `e.e.b.b.a.a$l.b` @AccessFlag VOLATILE;
}
global `e.e.b.b.a.a$l` `@@e.e.b.b.a.a$l.c` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/b/b/a/a$l;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L35d448.  v0:= new `e.e.b.b.a.a$l`;
  #L35d44c.  v1:= 0I;
  #L35d44e.  call `<init>`(v0, v1) @signature `Le/e/b/b/a/a$l;.<init>:(Z)V` @kind direct;
  #L35d454.  `@@e.e.b.b.a.a$l.c` @type ^`e.e.b.b.a.a$l` := v0 @kind object;
  #L35d458.  return @kind void;
}
procedure `void` `<init>`(`e.e.b.b.a.a$l` v2 @kind this) @signature `Le/e/b/b/a/a$l;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L35d46c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L35d472.  call temp:= `e`() @signature `Le/e/b/b/a/a;.e:()Le/e/b/b/a/a$b;` @kind static;
  #L35d478.  v0:= temp @kind object;
  #L35d47a.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L35d480.  v1:= temp @kind object;
  #L35d482.  call `a`(v0, v2, v1) @signature `Le/e/b/b/a/a$b;.a:(Le/e/b/b/a/a$l;Ljava/lang/Thread;)V` @kind virtual;
  #L35d488.  return @kind void;
}
procedure `void` `<init>`(`e.e.b.b.a.a$l` v0 @kind this, `boolean` v1 ) @signature `Le/e/b/b/a/a$l;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L35d49c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L35d4a2.  return @kind void;
}
procedure `void` `a`(`e.e.b.b.a.a$l` v2 @kind this) @signature `Le/e/b/b/a/a$l;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L35d4d4.  v0:= v2.`e.e.b.b.a.a$l.a` @type ^`java.lang.Thread` @kind object;
  #L35d4d8.  if v0 == 0 then goto L35d4e8;
  #L35d4dc.  v1:= 0I;
  #L35d4de.  v2.`e.e.b.b.a.a$l.a` @type ^`java.lang.Thread` := v1 @kind object;
  #L35d4e2.  call `unpark`(v0) @signature `Ljava/util/concurrent/locks/LockSupport;.unpark:(Ljava/lang/Thread;)V` @kind static;
  #L35d4e8.  return @kind void;
}
procedure `void` `a`(`e.e.b.b.a.a$l` v1 @kind this, `e.e.b.b.a.a$l` v2 @kind object) @signature `Le/e/b/b/a/a$l;.a:(Le/e/b/b/a/a$l;)V` @AccessFlag  {
    temp;
    v0;

  #L35d4b4.  call temp:= `e`() @signature `Le/e/b/b/a/a;.e:()Le/e/b/b/a/a$b;` @kind static;
  #L35d4ba.  v0:= temp @kind object;
  #L35d4bc.  call `a`(v0, v1, v2) @signature `Le/e/b/b/a/a$b;.a:(Le/e/b/b/a/a$l;Le/e/b/b/a/a$l;)V` @kind virtual;
  #L35d4c2.  return @kind void;
}
