record `e.e.b.b.a.a$f` @kind class @AccessFlag FINAL extends `e.e.b.b.a.a$b` @kind class {
  `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `e.e.b.b.a.a$f.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `e.e.b.b.a.a$f.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `e.e.b.b.a.a$f.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `e.e.b.b.a.a$f.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `e.e.b.b.a.a$f.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`e.e.b.b.a.a$f` v1 @kind this, `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` v2 @kind object, `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` v3 @kind object, `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` v4 @kind object, `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` v5 @kind object, `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` v6 @kind object) @signature `Le/e/b/b/a/a$f;.<init>:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L35cee0.  v0:= 0I;
  #L35cee2.  call `<init>`(v1, v0) @signature `Le/e/b/b/a/a$b;.<init>:(Le/e/b/b/a/a$a;)V` @kind direct;
  #L35cee8.  v1.`e.e.b.b.a.a$f.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L35ceec.  v1.`e.e.b.b.a.a$f.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v3 @kind object;
  #L35cef0.  v1.`e.e.b.b.a.a$f.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v4 @kind object;
  #L35cef4.  v1.`e.e.b.b.a.a$f.d` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v5 @kind object;
  #L35cef8.  v1.`e.e.b.b.a.a$f.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v6 @kind object;
  #L35cefc.  return @kind void;
}
procedure `void` `a`(`e.e.b.b.a.a$f` v1 @kind this, `e.e.b.b.a.a$l` v2 @kind object, `e.e.b.b.a.a$l` v3 @kind object) @signature `Le/e/b/b/a/a$f;.a:(Le/e/b/b/a/a$l;Le/e/b/b/a/a$l;)V` @AccessFlag  {
    temp;
    v0;

  #L35cf10.  v0:= v1.`e.e.b.b.a.a$f.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L35cf14.  call `lazySet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L35cf1a.  return @kind void;
}
procedure `void` `a`(`e.e.b.b.a.a$f` v1 @kind this, `e.e.b.b.a.a$l` v2 @kind object, `java.lang.Thread` v3 @kind object) @signature `Le/e/b/b/a/a$f;.a:(Le/e/b/b/a/a$l;Ljava/lang/Thread;)V` @AccessFlag  {
    temp;
    v0;

  #L35cf2c.  v0:= v1.`e.e.b.b.a.a$f.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L35cf30.  call `lazySet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L35cf36.  return @kind void;
}
procedure `boolean` `a`(`e.e.b.b.a.a$f` v1 @kind this, `e.e.b.b.a.a` v2 @kind object, `e.e.b.b.a.a$e` v3 @kind object, `e.e.b.b.a.a$e` v4 @kind object) @signature `Le/e/b/b/a/a$f;.a:(Le/e/b/b/a/a;Le/e/b/b/a/a$e;Le/e/b/b/a/a$e;)Z` @AccessFlag  {
    temp;
    v0;

  #L35ce80.  v0:= v1.`e.e.b.b.a.a$f.d` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L35ce84.  call temp:= `compareAndSet`(v0, v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L35ce8a.  v2:= temp;
  #L35ce8c.  return v2;
}
procedure `boolean` `a`(`e.e.b.b.a.a$f` v1 @kind this, `e.e.b.b.a.a` v2 @kind object, `e.e.b.b.a.a$l` v3 @kind object, `e.e.b.b.a.a$l` v4 @kind object) @signature `Le/e/b/b/a/a$f;.a:(Le/e/b/b/a/a;Le/e/b/b/a/a$l;Le/e/b/b/a/a$l;)Z` @AccessFlag  {
    temp;
    v0;

  #L35cec0.  v0:= v1.`e.e.b.b.a.a$f.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L35cec4.  call temp:= `compareAndSet`(v0, v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L35ceca.  v2:= temp;
  #L35cecc.  return v2;
}
procedure `boolean` `a`(`e.e.b.b.a.a$f` v1 @kind this, `e.e.b.b.a.a` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Le/e/b/b/a/a$f;.a:(Le/e/b/b/a/a;Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag  {
    temp;
    v0;

  #L35cea0.  v0:= v1.`e.e.b.b.a.a$f.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L35cea4.  call temp:= `compareAndSet`(v0, v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L35ceaa.  v2:= temp;
  #L35ceac.  return v2;
}
