record `e.e.b.a.d` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.Object` `@@e.e.b.a.d.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/e/b/a/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L35cca8.  call temp:= `b`() @signature `Le/e/b/a/d;.b:()Ljava/lang/Object;` @kind static;
  #L35ccae.  v0:= temp @kind object;
  #L35ccb0.  `@@e.e.b.a.d.a` @type ^`java.lang.Object` := v0 @kind object;
  #L35ccb4.  v0:= `@@e.e.b.a.d.a` @type ^`java.lang.Object` @kind object;
  #L35ccb8.  if v0 != 0 then goto L35ccbe;
  #L35ccbc.  goto L35ccc4;
  #L35ccbe.  call temp:= `a`() @signature `Le/e/b/a/d;.a:()Ljava/lang/reflect/Method;` @kind static;
  #L35ccc4.  v0:= `@@e.e.b.a.d.a` @type ^`java.lang.Object` @kind object;
  #L35ccc8.  if v0 != 0 then goto L35ccce;
  #L35cccc.  goto L35ccd4;
  #L35ccce.  call temp:= `c`() @signature `Le/e/b/a/d;.c:()Ljava/lang/reflect/Method;` @kind static;
  #L35ccd4.  return @kind void;
}
procedure `java.lang.reflect.Method` `a`() @signature `Le/e/b/a/d;.a:()Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L35cbc4.  v0:= 2I;
  #L35cbc6.  v0:= new `java.lang.Class`[v0];
  #L35cbca.  v1:= constclass @type ^`java.lang.Throwable` @kind object;
  #L35cbce.  v2:= 0I;
  #L35cbd0.  v0[v2]:= v1 @kind object;
  #L35cbd4.  v1:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L35cbd8.  v2:= 1I;
  #L35cbda.  v0[v2]:= v1 @kind object;
  #L35cbde.  v1:= "getStackTraceElement" @kind object;
  #L35cbe2.  call temp:= `a`(v1, v0) @signature `Le/e/b/a/d;.a:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L35cbe8.  v0:= temp @kind object;
  #L35cbea.  return v0 @kind object;
}
procedure `java.lang.reflect.Method` `a`(`java.lang.String` v3 @kind object, `java.lang.Class`[] v4 @kind object) @signature `Le/e/b/a/d;.a:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L35cbfc.  v0:= 0I;
  #L35cbfe.  v1:= "sun.misc.JavaLangAccess" @kind object;
  #L35cc02.  v2:= 0I;
  #L35cc04.  call temp:= `forName`(v1, v2, v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;` @kind static;
  #L35cc0a.  v1:= temp @kind object;
  #L35cc0c.  call temp:= `getMethod`(v1, v3, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L35cc12.  v3:= temp @kind object;
  #L35cc14.  return v3 @kind object;
  #L35cc16.  return v0 @kind object;
  #L35cc18.  v3:= Exception @type ^`java.lang.ThreadDeath` @kind object;
  #L35cc1a.  throw v3;
  catch `java.lang.ThreadDeath` @[L35cbfe..L35cc14] goto L35cc18;
  catch `java.lang.Throwable` @[L35cbfe..L35cc14] goto L35cc16;
}
procedure `void` `a`(`java.lang.Throwable` v1 @kind object) @signature `Le/e/b/a/d;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L35cce8.  call temp:= `a`(v1) @signature `Le/e/b/a/b;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L35ccee.  v0:= instanceof @variable v1 @type ^`java.lang.RuntimeException` @kind boolean;
  #L35ccf2.  if v0 != 0 then goto L35cd06;
  #L35ccf6.  v0:= instanceof @variable v1 @type ^`java.lang.Error` @kind boolean;
  #L35ccfa.  if v0 != 0 then goto L35cd00;
  #L35ccfe.  return @kind void;
  #L35cd00.  v1:= (`java.lang.Error`) v1 @kind object;
  #L35cd04.  throw v1;
  #L35cd06.  v1:= (`java.lang.RuntimeException`) v1 @kind object;
  #L35cd0a.  throw v1;
}
procedure `java.lang.Object` `b`() @signature `Le/e/b/a/d;.b:()Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L35cb70.  v0:= 0I;
  #L35cb72.  v1:= "sun.misc.SharedSecrets" @kind object;
  #L35cb76.  v2:= 0I;
  #L35cb78.  call temp:= `forName`(v1, v2, v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;` @kind static;
  #L35cb7e.  v1:= temp @kind object;
  #L35cb80.  v3:= "getJavaLangAccess" @kind object;
  #L35cb84.  v4:= new `java.lang.Class`[v2];
  #L35cb88.  call temp:= `getMethod`(v1, v3, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L35cb8e.  v1:= temp @kind object;
  #L35cb90.  v2:= new `java.lang.Object`[v2];
  #L35cb94.  call temp:= `invoke`(v1, v0, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L35cb9a.  v0:= temp @kind object;
  #L35cb9c.  return v0 @kind object;
  #L35cb9e.  v0:= Exception @type ^`java.lang.ThreadDeath` @kind object;
  #L35cba0.  throw v0;
  catch `java.lang.ThreadDeath` @[L35cb72..L35cb9c] goto L35cb9e;
  catch `java.lang.Throwable` @[L35cb72..L35cb9c] goto L35cb9c;
}
procedure `java.lang.reflect.Method` `c`() @signature `Le/e/b/a/d;.c:()Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L35cc3c.  v0:= 0I;
  #L35cc3e.  v1:= "getStackTraceDepth" @kind object;
  #L35cc42.  v2:= 1I;
  #L35cc44.  v3:= new `java.lang.Class`[v2];
  #L35cc48.  v4:= constclass @type ^`java.lang.Throwable` @kind object;
  #L35cc4c.  v5:= 0I;
  #L35cc4e.  v3[v5]:= v4 @kind object;
  #L35cc52.  call temp:= `a`(v1, v3) @signature `Le/e/b/a/d;.a:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L35cc58.  v1:= temp @kind object;
  #L35cc5a.  if v1 != 0 then goto L35cc60;
  #L35cc5e.  return v0 @kind object;
  #L35cc60.  call temp:= `b`() @signature `Le/e/b/a/d;.b:()Ljava/lang/Object;` @kind static;
  #L35cc66.  v3:= temp @kind object;
  #L35cc68.  v2:= new `java.lang.Object`[v2];
  #L35cc6c.  v4:= new `java.lang.Throwable`;
  #L35cc70.  call `<init>`(v4) @signature `Ljava/lang/Throwable;.<init>:()V` @kind direct;
  #L35cc76.  v2[v5]:= v4 @kind object;
  #L35cc7a.  call temp:= `invoke`(v1, v3, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L35cc80.  return v1 @kind object;
  #L35cc82.  return v0 @kind object;
  catch `java.lang.UnsupportedOperationException` @[L35cc3e..L35cc80] goto L35cc82;
  catch `java.lang.IllegalAccessException` @[L35cc3e..L35cc80] goto L35cc82;
  catch `java.lang.reflect.InvocationTargetException` @[L35cc3e..L35cc80] goto L35cc82;
}
