record `e.e.d.a.q.c$a$a` @kind class @AccessFlag  extends `java.util.LinkedHashMap` @kind class {
  `e.e.d.a.q.c$a` `e.e.d.a.q.c$a$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e.e.d.a.q.c$a$a` v0 @kind this, `e.e.d.a.q.c$a` v1 @kind object, `int` v2 , `float` v3 , `boolean` v4 ) @signature `Le/e/d/a/q/c$a$a;.<init>:(Le/e/d/a/q/c$a;IFZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3886dc.  v0.`e.e.d.a.q.c$a$a.b` @type ^`e.e.d.a.q.c$a` := v1 @kind object;
  #L3886e0.  call `<init>`(v0, v2, v3, v4) @signature `Ljava/util/LinkedHashMap;.<init>:(IFZ)V` @kind direct;
  #L3886e6.  return @kind void;
}
procedure `boolean` `removeEldestEntry`(`e.e.d.a.q.c$a$a` v1 @kind this, `java.util.Map$Entry` v2 @kind object) @signature `Le/e/d/a/q/c$a$a;.removeEldestEntry:(Ljava/util/Map$Entry;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3886ac.  call temp:= `size`(v1) @signature `Ljava/util/LinkedHashMap;.size:()I` @kind virtual;
  #L3886b2.  v2:= temp;
  #L3886b4.  v0:= v1.`e.e.d.a.q.c$a$a.b` @type ^`e.e.d.a.q.c$a` @kind object;
  #L3886b8.  call temp:= `a`(v0) @signature `Le/e/d/a/q/c$a;.a:(Le/e/d/a/q/c$a;)I` @kind static;
  #L3886be.  v0:= temp;
  #L3886c0.  if v2 <= v0 then goto L3886c8;
  #L3886c4.  v2:= 1I;
  #L3886c6.  goto L3886ca;
  #L3886c8.  v2:= 0I;
  #L3886ca.  return v2;
}
