record `e.e.d.a.r.a` @kind class @AccessFlag  extends `e.e.d.a.r.e` @kind class {
  `int`[] `e.e.d.a.r.a.c` @AccessFlag PRIVATE;
  `java.lang.String`[] `e.e.d.a.r.a.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.d.a.r.a` v0 @kind this) @signature `Le/e/d/a/r/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L38884c.  call `<init>`(v0) @signature `Le/e/d/a/r/e;.<init>:()V` @kind direct;
  #L388852.  return @kind void;
}
procedure `java.lang.String` `a`(`e.e.d.a.r.a` v1 @kind this, `int` v2 ) @signature `Le/e/d/a/r/a;.a:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L388830.  v0:= v1.`e.e.d.a.r.a.d` @type ^`java.lang.String`[] @kind object;
  #L388834.  v2:= v0[v2] @kind object;
  #L388838.  return v2 @kind object;
}
procedure `void` `a`(`e.e.d.a.r.a` v4 @kind this, `java.io.ObjectInput` v5 @kind object) @signature `Le/e/d/a/r/a;.a:(Ljava/io/ObjectInput;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L388864.  call temp:= `readInt`(v5) @signature `Ljava/io/ObjectInput;.readInt:()I` @kind interface;
  #L38886a.  v0:= temp;
  #L38886c.  v4.`e.e.d.a.r.e.a` @type ^`int` := v0;
  #L388870.  v0:= v4.`e.e.d.a.r.a.c` @type ^`int`[] @kind object;
  #L388874.  if v0 == 0 then goto L388882;
  #L388878.  v0:= length @variable v0;
  #L38887a.  v1:= v4.`e.e.d.a.r.e.a` @type ^`int`;
  #L38887e.  if v0 >= v1 then goto L38888e;
  #L388882.  v0:= v4.`e.e.d.a.r.e.a` @type ^`int`;
  #L388886.  v0:= new `int`[v0];
  #L38888a.  v4.`e.e.d.a.r.a.c` @type ^`int`[] := v0 @kind object;
  #L38888e.  v0:= v4.`e.e.d.a.r.a.d` @type ^`java.lang.String`[] @kind object;
  #L388892.  if v0 == 0 then goto L3888a0;
  #L388896.  v0:= length @variable v0;
  #L388898.  v1:= v4.`e.e.d.a.r.e.a` @type ^`int`;
  #L38889c.  if v0 >= v1 then goto L3888ac;
  #L3888a0.  v0:= v4.`e.e.d.a.r.e.a` @type ^`int`;
  #L3888a4.  v0:= new `java.lang.String`[v0];
  #L3888a8.  v4.`e.e.d.a.r.a.d` @type ^`java.lang.String`[] := v0 @kind object;
  #L3888ac.  v0:= 0I;
  #L3888ae.  v1:= 0I;
  #L3888b0.  v2:= v4.`e.e.d.a.r.e.a` @type ^`int`;
  #L3888b4.  if v1 >= v2 then goto L3888de;
  #L3888b8.  v2:= v4.`e.e.d.a.r.a.c` @type ^`int`[] @kind object;
  #L3888bc.  call temp:= `readInt`(v5) @signature `Ljava/io/ObjectInput;.readInt:()I` @kind interface;
  #L3888c2.  v3:= temp;
  #L3888c4.  v2[v1]:= v3;
  #L3888c8.  v2:= v4.`e.e.d.a.r.a.d` @type ^`java.lang.String`[] @kind object;
  #L3888cc.  call temp:= `readUTF`(v5) @signature `Ljava/io/ObjectInput;.readUTF:()Ljava/lang/String;` @kind interface;
  #L3888d2.  v3:= temp @kind object;
  #L3888d4.  v2[v1]:= v3 @kind object;
  #L3888d8.  v1:= v1 + 1;
  #L3888dc.  goto L3888b0;
  #L3888de.  call temp:= `readInt`(v5) @signature `Ljava/io/ObjectInput;.readInt:()I` @kind interface;
  #L3888e4.  v1:= temp;
  #L3888e6.  v2:= v4.`e.e.d.a.r.e.b` @type ^`java.util.TreeSet` @kind object;
  #L3888ea.  call `clear`(v2) @signature `Ljava/util/TreeSet;.clear:()V` @kind virtual;
  #L3888f0.  if v0 >= v1 then goto L388914;
  #L3888f4.  v2:= v4.`e.e.d.a.r.e.b` @type ^`java.util.TreeSet` @kind object;
  #L3888f8.  call temp:= `readInt`(v5) @signature `Ljava/io/ObjectInput;.readInt:()I` @kind interface;
  #L3888fe.  v3:= temp;
  #L388900.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L388906.  v3:= temp @kind object;
  #L388908.  call temp:= `add`(v2, v3) @signature `Ljava/util/TreeSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L38890e.  v0:= v0 + 1;
  #L388912.  goto L3888f0;
  #L388914.  return @kind void;
}
procedure `void` `a`(`e.e.d.a.r.a` v2 @kind this, `java.io.ObjectOutput` v3 @kind object) @signature `Le/e/d/a/r/a;.a:(Ljava/io/ObjectOutput;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L388928.  v0:= v2.`e.e.d.a.r.e.a` @type ^`int`;
  #L38892c.  call `writeInt`(v3, v0) @signature `Ljava/io/ObjectOutput;.writeInt:(I)V` @kind interface;
  #L388932.  v0:= 0I;
  #L388934.  v1:= v2.`e.e.d.a.r.e.a` @type ^`int`;
  #L388938.  if v0 >= v1 then goto L38895e;
  #L38893c.  v1:= v2.`e.e.d.a.r.a.c` @type ^`int`[] @kind object;
  #L388940.  v1:= v1[v0];
  #L388944.  call `writeInt`(v3, v1) @signature `Ljava/io/ObjectOutput;.writeInt:(I)V` @kind interface;
  #L38894a.  v1:= v2.`e.e.d.a.r.a.d` @type ^`java.lang.String`[] @kind object;
  #L38894e.  v1:= v1[v0] @kind object;
  #L388952.  call `writeUTF`(v3, v1) @signature `Ljava/io/ObjectOutput;.writeUTF:(Ljava/lang/String;)V` @kind interface;
  #L388958.  v0:= v0 + 1;
  #L38895c.  goto L388934;
  #L38895e.  v0:= v2.`e.e.d.a.r.e.b` @type ^`java.util.TreeSet` @kind object;
  #L388962.  call temp:= `size`(v0) @signature `Ljava/util/TreeSet;.size:()I` @kind virtual;
  #L388968.  v0:= temp;
  #L38896a.  call `writeInt`(v3, v0) @signature `Ljava/io/ObjectOutput;.writeInt:(I)V` @kind interface;
  #L388970.  v0:= v2.`e.e.d.a.r.e.b` @type ^`java.util.TreeSet` @kind object;
  #L388974.  call temp:= `iterator`(v0) @signature `Ljava/util/TreeSet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L38897a.  v0:= temp @kind object;
  #L38897c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L388982.  v1:= temp;
  #L388984.  if v1 == 0 then goto L3889a4;
  #L388988.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L38898e.  v1:= temp @kind object;
  #L388990.  v1:= (`java.lang.Integer`) v1 @kind object;
  #L388994.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L38899a.  v1:= temp;
  #L38899c.  call `writeInt`(v3, v1) @signature `Ljava/io/ObjectOutput;.writeInt:(I)V` @kind interface;
  #L3889a2.  goto L38897c;
  #L3889a4.  return @kind void;
}
procedure `int` `b`(`e.e.d.a.r.a` v1 @kind this, `int` v2 ) @signature `Le/e/d/a/r/a;.b:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L388814.  v0:= v1.`e.e.d.a.r.a.c` @type ^`int`[] @kind object;
  #L388818.  v2:= v0[v2];
  #L38881c.  return v2;
}
