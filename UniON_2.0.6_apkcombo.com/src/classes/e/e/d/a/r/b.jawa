record `e.e.d.a.r.b` @kind class @AccessFlag FINAL extends `e.e.d.a.r.e` @kind class {
  `int` `e.e.d.a.r.b.c` @AccessFlag PRIVATE;
  `int` `e.e.d.a.r.b.d` @AccessFlag PRIVATE;
  `java.nio.ByteBuffer` `e.e.d.a.r.b.e` @AccessFlag PRIVATE;
  `java.nio.ByteBuffer` `e.e.d.a.r.b.f` @AccessFlag PRIVATE;
  `java.lang.String`[] `e.e.d.a.r.b.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.d.a.r.b` v0 @kind this) @signature `Le/e/d/a/r/b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L388a38.  call `<init>`(v0) @signature `Le/e/d/a/r/e;.<init>:()V` @kind direct;
  #L388a3e.  return @kind void;
}
procedure `int` `a`(`java.nio.ByteBuffer` v1 @kind object, `int` v2 , `int` v3 ) @signature `Le/e/d/a/r/b;.a:(Ljava/nio/ByteBuffer;II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3889dc.  v3:= v3 * v2 @kind int;
  #L3889e0.  v0:= 2I;
  #L3889e2.  if v2 != v0 then goto L3889f0;
  #L3889e6.  call temp:= `getShort`(v1, v3) @signature `Ljava/nio/ByteBuffer;.getShort:(I)S` @kind virtual;
  #L3889ec.  v1:= temp;
  #L3889ee.  goto L3889f8;
  #L3889f0.  call temp:= `getInt`(v1, v3) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L3889f6.  v1:= temp;
  #L3889f8.  return v1;
}
procedure `void` `a`(`java.io.ObjectInput` v1 @kind object, `int` v2 , `java.nio.ByteBuffer` v3 @kind object, `int` v4 ) @signature `Le/e/d/a/r/b;.a:(Ljava/io/ObjectInput;ILjava/nio/ByteBuffer;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L388ba0.  v4:= v4 * v2 @kind int;
  #L388ba4.  v0:= 2I;
  #L388ba6.  if v2 != v0 then goto L388bba;
  #L388baa.  call temp:= `readShort`(v1) @signature `Ljava/io/ObjectInput;.readShort:()S` @kind interface;
  #L388bb0.  v1:= temp;
  #L388bb2.  call temp:= `putShort`(v3, v4, v1) @signature `Ljava/nio/ByteBuffer;.putShort:(IS)Ljava/nio/ByteBuffer;` @kind virtual;
  #L388bb8.  goto L388bc8;
  #L388bba.  call temp:= `readInt`(v1) @signature `Ljava/io/ObjectInput;.readInt:()I` @kind interface;
  #L388bc0.  v1:= temp;
  #L388bc2.  call temp:= `putInt`(v3, v4, v1) @signature `Ljava/nio/ByteBuffer;.putInt:(II)Ljava/nio/ByteBuffer;` @kind virtual;
  #L388bc8.  return @kind void;
}
procedure `void` `a`(`java.io.ObjectOutput` v1 @kind object, `int` v2 , `java.nio.ByteBuffer` v3 @kind object, `int` v4 ) @signature `Le/e/d/a/r/b;.a:(Ljava/io/ObjectOutput;ILjava/nio/ByteBuffer;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L388ca8.  v4:= v4 * v2 @kind int;
  #L388cac.  v0:= 2I;
  #L388cae.  if v2 != v0 then goto L388cc2;
  #L388cb2.  call temp:= `getShort`(v3, v4) @signature `Ljava/nio/ByteBuffer;.getShort:(I)S` @kind virtual;
  #L388cb8.  v2:= temp;
  #L388cba.  call `writeShort`(v1, v2) @signature `Ljava/io/ObjectOutput;.writeShort:(I)V` @kind interface;
  #L388cc0.  goto L388cd0;
  #L388cc2.  call temp:= `getInt`(v3, v4) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L388cc8.  v2:= temp;
  #L388cca.  call `writeInt`(v1, v2) @signature `Ljava/io/ObjectOutput;.writeInt:(I)V` @kind interface;
  #L388cd0.  return @kind void;
}
procedure `void` `b`(`e.e.d.a.r.b` v3 @kind this, `java.io.ObjectInput` v4 @kind object) @signature `Le/e/d/a/r/b;.b:(Ljava/io/ObjectInput;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L388a50.  call temp:= `readInt`(v4) @signature `Ljava/io/ObjectInput;.readInt:()I` @kind interface;
  #L388a56.  v0:= temp;
  #L388a58.  v3.`e.e.d.a.r.e.a` @type ^`int` := v0;
  #L388a5c.  v0:= v3.`e.e.d.a.r.b.e` @type ^`java.nio.ByteBuffer` @kind object;
  #L388a60.  if v0 == 0 then goto L388a74;
  #L388a64.  call temp:= `capacity`(v0) @signature `Ljava/nio/ByteBuffer;.capacity:()I` @kind virtual;
  #L388a6a.  v0:= temp;
  #L388a6c.  v1:= v3.`e.e.d.a.r.e.a` @type ^`int`;
  #L388a70.  if v0 >= v1 then goto L388a8c;
  #L388a74.  v0:= v3.`e.e.d.a.r.e.a` @type ^`int`;
  #L388a78.  v1:= v3.`e.e.d.a.r.b.c` @type ^`int`;
  #L388a7c.  v0:= v0 * v1 @kind int;
  #L388a80.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L388a86.  v0:= temp @kind object;
  #L388a88.  v3.`e.e.d.a.r.b.e` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L388a8c.  v0:= v3.`e.e.d.a.r.b.f` @type ^`java.nio.ByteBuffer` @kind object;
  #L388a90.  if v0 == 0 then goto L388aa4;
  #L388a94.  call temp:= `capacity`(v0) @signature `Ljava/nio/ByteBuffer;.capacity:()I` @kind virtual;
  #L388a9a.  v0:= temp;
  #L388a9c.  v1:= v3.`e.e.d.a.r.e.a` @type ^`int`;
  #L388aa0.  if v0 >= v1 then goto L388abc;
  #L388aa4.  v0:= v3.`e.e.d.a.r.e.a` @type ^`int`;
  #L388aa8.  v1:= v3.`e.e.d.a.r.b.d` @type ^`int`;
  #L388aac.  v0:= v0 * v1 @kind int;
  #L388ab0.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L388ab6.  v0:= temp @kind object;
  #L388ab8.  v3.`e.e.d.a.r.b.f` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L388abc.  v0:= 0I;
  #L388abe.  v1:= v3.`e.e.d.a.r.e.a` @type ^`int`;
  #L388ac2.  if v0 >= v1 then goto L388ae8;
  #L388ac6.  v1:= v3.`e.e.d.a.r.b.c` @type ^`int`;
  #L388aca.  v2:= v3.`e.e.d.a.r.b.e` @type ^`java.nio.ByteBuffer` @kind object;
  #L388ace.  call `a`(v4, v1, v2, v0) @signature `Le/e/d/a/r/b;.a:(Ljava/io/ObjectInput;ILjava/nio/ByteBuffer;I)V` @kind static;
  #L388ad4.  v1:= v3.`e.e.d.a.r.b.d` @type ^`int`;
  #L388ad8.  v2:= v3.`e.e.d.a.r.b.f` @type ^`java.nio.ByteBuffer` @kind object;
  #L388adc.  call `a`(v4, v1, v2, v0) @signature `Le/e/d/a/r/b;.a:(Ljava/io/ObjectInput;ILjava/nio/ByteBuffer;I)V` @kind static;
  #L388ae2.  v0:= v0 + 1;
  #L388ae6.  goto L388abe;
  #L388ae8.  return @kind void;
}
procedure `java.lang.String` `a`(`e.e.d.a.r.b` v2 @kind this, `int` v3 ) @signature `Le/e/d/a/r/b;.a:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L388a0c.  v0:= v2.`e.e.d.a.r.b.f` @type ^`java.nio.ByteBuffer` @kind object;
  #L388a10.  v1:= v2.`e.e.d.a.r.b.d` @type ^`int`;
  #L388a14.  call temp:= `a`(v0, v1, v3) @signature `Le/e/d/a/r/b;.a:(Ljava/nio/ByteBuffer;II)I` @kind static;
  #L388a1a.  v3:= temp;
  #L388a1c.  v0:= v2.`e.e.d.a.r.b.g` @type ^`java.lang.String`[] @kind object;
  #L388a20.  v3:= v0[v3] @kind object;
  #L388a24.  return v3 @kind object;
}
procedure `void` `a`(`e.e.d.a.r.b` v5 @kind this, `java.io.ObjectInput` v6 @kind object) @signature `Le/e/d/a/r/b;.a:(Ljava/io/ObjectInput;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L388afc.  call temp:= `readInt`(v6) @signature `Ljava/io/ObjectInput;.readInt:()I` @kind interface;
  #L388b02.  v0:= temp;
  #L388b04.  v5.`e.e.d.a.r.b.c` @type ^`int` := v0;
  #L388b08.  call temp:= `readInt`(v6) @signature `Ljava/io/ObjectInput;.readInt:()I` @kind interface;
  #L388b0e.  v0:= temp;
  #L388b10.  v5.`e.e.d.a.r.b.d` @type ^`int` := v0;
  #L388b14.  call temp:= `readInt`(v6) @signature `Ljava/io/ObjectInput;.readInt:()I` @kind interface;
  #L388b1a.  v0:= temp;
  #L388b1c.  v1:= v5.`e.e.d.a.r.e.b` @type ^`java.util.TreeSet` @kind object;
  #L388b20.  call `clear`(v1) @signature `Ljava/util/TreeSet;.clear:()V` @kind virtual;
  #L388b26.  v1:= 0I;
  #L388b28.  v2:= 0I;
  #L388b2a.  if v2 >= v0 then goto L388b4e;
  #L388b2e.  v3:= v5.`e.e.d.a.r.e.b` @type ^`java.util.TreeSet` @kind object;
  #L388b32.  call temp:= `readInt`(v6) @signature `Ljava/io/ObjectInput;.readInt:()I` @kind interface;
  #L388b38.  v4:= temp;
  #L388b3a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L388b40.  v4:= temp @kind object;
  #L388b42.  call temp:= `add`(v3, v4) @signature `Ljava/util/TreeSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L388b48.  v2:= v2 + 1;
  #L388b4c.  goto L388b2a;
  #L388b4e.  call temp:= `readInt`(v6) @signature `Ljava/io/ObjectInput;.readInt:()I` @kind interface;
  #L388b54.  v0:= temp;
  #L388b56.  v2:= v5.`e.e.d.a.r.b.g` @type ^`java.lang.String`[] @kind object;
  #L388b5a.  if v2 == 0 then goto L388b64;
  #L388b5e.  v2:= length @variable v2;
  #L388b60.  if v2 >= v0 then goto L388b6c;
  #L388b64.  v2:= new `java.lang.String`[v0];
  #L388b68.  v5.`e.e.d.a.r.b.g` @type ^`java.lang.String`[] := v2 @kind object;
  #L388b6c.  if v1 >= v0 then goto L388b86;
  #L388b70.  call temp:= `readUTF`(v6) @signature `Ljava/io/ObjectInput;.readUTF:()Ljava/lang/String;` @kind interface;
  #L388b76.  v2:= temp @kind object;
  #L388b78.  v3:= v5.`e.e.d.a.r.b.g` @type ^`java.lang.String`[] @kind object;
  #L388b7c.  v3[v1]:= v2 @kind object;
  #L388b80.  v1:= v1 + 1;
  #L388b84.  goto L388b6c;
  #L388b86.  call `b`(v5, v6) @signature `Le/e/d/a/r/b;.b:(Ljava/io/ObjectInput;)V` @kind direct;
  #L388b8c.  return @kind void;
}
procedure `void` `a`(`e.e.d.a.r.b` v5 @kind this, `java.io.ObjectOutput` v6 @kind object) @signature `Le/e/d/a/r/b;.a:(Ljava/io/ObjectOutput;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L388bdc.  v0:= v5.`e.e.d.a.r.b.c` @type ^`int`;
  #L388be0.  call `writeInt`(v6, v0) @signature `Ljava/io/ObjectOutput;.writeInt:(I)V` @kind interface;
  #L388be6.  v0:= v5.`e.e.d.a.r.b.d` @type ^`int`;
  #L388bea.  call `writeInt`(v6, v0) @signature `Ljava/io/ObjectOutput;.writeInt:(I)V` @kind interface;
  #L388bf0.  v0:= v5.`e.e.d.a.r.e.b` @type ^`java.util.TreeSet` @kind object;
  #L388bf4.  call temp:= `size`(v0) @signature `Ljava/util/TreeSet;.size:()I` @kind virtual;
  #L388bfa.  v0:= temp;
  #L388bfc.  call `writeInt`(v6, v0) @signature `Ljava/io/ObjectOutput;.writeInt:(I)V` @kind interface;
  #L388c02.  v0:= v5.`e.e.d.a.r.e.b` @type ^`java.util.TreeSet` @kind object;
  #L388c06.  call temp:= `iterator`(v0) @signature `Ljava/util/TreeSet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L388c0c.  v0:= temp @kind object;
  #L388c0e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L388c14.  v1:= temp;
  #L388c16.  if v1 == 0 then goto L388c36;
  #L388c1a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L388c20.  v1:= temp @kind object;
  #L388c22.  v1:= (`java.lang.Integer`) v1 @kind object;
  #L388c26.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L388c2c.  v1:= temp;
  #L388c2e.  call `writeInt`(v6, v1) @signature `Ljava/io/ObjectOutput;.writeInt:(I)V` @kind interface;
  #L388c34.  goto L388c0e;
  #L388c36.  v0:= v5.`e.e.d.a.r.b.g` @type ^`java.lang.String`[] @kind object;
  #L388c3a.  v0:= length @variable v0;
  #L388c3c.  call `writeInt`(v6, v0) @signature `Ljava/io/ObjectOutput;.writeInt:(I)V` @kind interface;
  #L388c42.  v0:= v5.`e.e.d.a.r.b.g` @type ^`java.lang.String`[] @kind object;
  #L388c46.  v1:= length @variable v0;
  #L388c48.  v2:= 0I;
  #L388c4a.  v3:= 0I;
  #L388c4c.  if v3 >= v1 then goto L388c60;
  #L388c50.  v4:= v0[v3] @kind object;
  #L388c54.  call `writeUTF`(v6, v4) @signature `Ljava/io/ObjectOutput;.writeUTF:(Ljava/lang/String;)V` @kind interface;
  #L388c5a.  v3:= v3 + 1;
  #L388c5e.  goto L388c4c;
  #L388c60.  v0:= v5.`e.e.d.a.r.e.a` @type ^`int`;
  #L388c64.  call `writeInt`(v6, v0) @signature `Ljava/io/ObjectOutput;.writeInt:(I)V` @kind interface;
  #L388c6a.  v0:= v5.`e.e.d.a.r.e.a` @type ^`int`;
  #L388c6e.  if v2 >= v0 then goto L388c94;
  #L388c72.  v0:= v5.`e.e.d.a.r.b.c` @type ^`int`;
  #L388c76.  v1:= v5.`e.e.d.a.r.b.e` @type ^`java.nio.ByteBuffer` @kind object;
  #L388c7a.  call `a`(v6, v0, v1, v2) @signature `Le/e/d/a/r/b;.a:(Ljava/io/ObjectOutput;ILjava/nio/ByteBuffer;I)V` @kind static;
  #L388c80.  v0:= v5.`e.e.d.a.r.b.d` @type ^`int`;
  #L388c84.  v1:= v5.`e.e.d.a.r.b.f` @type ^`java.nio.ByteBuffer` @kind object;
  #L388c88.  call `a`(v6, v0, v1, v2) @signature `Le/e/d/a/r/b;.a:(Ljava/io/ObjectOutput;ILjava/nio/ByteBuffer;I)V` @kind static;
  #L388c8e.  v2:= v2 + 1;
  #L388c92.  goto L388c6a;
  #L388c94.  return @kind void;
}
procedure `int` `b`(`e.e.d.a.r.b` v2 @kind this, `int` v3 ) @signature `Le/e/d/a/r/b;.b:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3889b8.  v0:= v2.`e.e.d.a.r.b.e` @type ^`java.nio.ByteBuffer` @kind object;
  #L3889bc.  v1:= v2.`e.e.d.a.r.b.c` @type ^`int`;
  #L3889c0.  call temp:= `a`(v0, v1, v3) @signature `Le/e/d/a/r/b;.a:(Ljava/nio/ByteBuffer;II)I` @kind static;
  #L3889c6.  v3:= temp;
  #L3889c8.  return v3;
}
