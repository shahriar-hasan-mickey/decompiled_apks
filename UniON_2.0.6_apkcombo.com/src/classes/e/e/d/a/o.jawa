record `e.e.d.a.o` @kind class @AccessFlag PUBLIC extends `java.io.Serializable` @kind interface {
  `int` `e.e.d.a.o.b` @AccessFlag PRIVATE;
  `long` `e.e.d.a.o.c` @AccessFlag PRIVATE;
  `boolean` `e.e.d.a.o.d` @AccessFlag PRIVATE;
  `java.lang.String` `e.e.d.a.o.e` @AccessFlag PRIVATE;
  `boolean` `e.e.d.a.o.f` @AccessFlag PRIVATE;
  `boolean` `e.e.d.a.o.g` @AccessFlag PRIVATE;
  `boolean` `e.e.d.a.o.h` @AccessFlag PRIVATE;
  `int` `e.e.d.a.o.i` @AccessFlag PRIVATE;
  `boolean` `e.e.d.a.o.j` @AccessFlag PRIVATE;
  `java.lang.String` `e.e.d.a.o.k` @AccessFlag PRIVATE;
  `boolean` `e.e.d.a.o.l` @AccessFlag PRIVATE;
  `e.e.d.a.o$a` `e.e.d.a.o.m` @AccessFlag PRIVATE;
  `boolean` `e.e.d.a.o.n` @AccessFlag PRIVATE;
  `java.lang.String` `e.e.d.a.o.o` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.e.d.a.o` v3 @kind this) @signature `Le/e/d/a/o;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L387c18.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L387c1e.  v0:= 0I;
  #L387c20.  v3.`e.e.d.a.o.b` @type ^`int` := v0;
  #L387c24.  v1:= 0L;
  #L387c28.  v3.`e.e.d.a.o.c` @type ^`long` := v1 @kind wide;
  #L387c2c.  v1:= "" @kind object;
  #L387c30.  v3.`e.e.d.a.o.e` @type ^`java.lang.String` := v1 @kind object;
  #L387c34.  v3.`e.e.d.a.o.g` @type ^`boolean` := v0 @kind boolean;
  #L387c38.  v0:= 1I;
  #L387c3a.  v3.`e.e.d.a.o.i` @type ^`int` := v0;
  #L387c3e.  v3.`e.e.d.a.o.k` @type ^`java.lang.String` := v1 @kind object;
  #L387c42.  v3.`e.e.d.a.o.o` @type ^`java.lang.String` := v1 @kind object;
  #L387c46.  v0:= `@@e.e.d.a.o$a.f` @type ^`e.e.d.a.o$a` @kind object;
  #L387c4a.  v3.`e.e.d.a.o.m` @type ^`e.e.d.a.o$a` := v0 @kind object;
  #L387c4e.  return @kind void;
}
procedure `e.e.d.a.o` `a`(`e.e.d.a.o` v1 @kind this) @signature `Le/e/d/a/o;.a:()Le/e/d/a/o;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L387868.  v0:= 0I;
  #L38786a.  v1.`e.e.d.a.o.l` @type ^`boolean` := v0 @kind boolean;
  #L38786e.  v0:= `@@e.e.d.a.o$a.f` @type ^`e.e.d.a.o$a` @kind object;
  #L387872.  v1.`e.e.d.a.o.m` @type ^`e.e.d.a.o$a` := v0 @kind object;
  #L387876.  return v1 @kind object;
}
procedure `e.e.d.a.o` `a`(`e.e.d.a.o` v0 @kind this, `int` v1 ) @signature `Le/e/d/a/o;.a:(I)Le/e/d/a/o;` @AccessFlag PUBLIC {
    temp;

  #L387888.  v0.`e.e.d.a.o.b` @type ^`int` := v1;
  #L38788c.  return v0 @kind object;
}
procedure `e.e.d.a.o` `a`(`e.e.d.a.o` v0 @kind this, `long` v1 ) @signature `Le/e/d/a/o;.a:(J)Le/e/d/a/o;` @AccessFlag PUBLIC {
    temp;

  #L387914.  v0.`e.e.d.a.o.c` @type ^`long` := v1 @kind wide;
  #L387918.  return v0 @kind object;
}
procedure `e.e.d.a.o` `a`(`e.e.d.a.o` v1 @kind this, `e.e.d.a.o$a` v2 @kind object) @signature `Le/e/d/a/o;.a:(Le/e/d/a/o$a;)Le/e/d/a/o;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3878a0.  if v2 == 0 then goto L3878b0;
  #L3878a4.  v0:= 1I;
  #L3878a6.  v1.`e.e.d.a.o.l` @type ^`boolean` := v0 @kind boolean;
  #L3878aa.  v1.`e.e.d.a.o.m` @type ^`e.e.d.a.o$a` := v2 @kind object;
  #L3878ae.  return v1 @kind object;
  #L3878b0.  v2:= new `java.lang.NullPointerException`;
  #L3878b4.  call `<init>`(v2) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L3878ba.  throw v2;
}
procedure `e.e.d.a.o` `a`(`e.e.d.a.o` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Le/e/d/a/o;.a:(Ljava/lang/String;)Le/e/d/a/o;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3878cc.  if v2 == 0 then goto L3878dc;
  #L3878d0.  v0:= 1I;
  #L3878d2.  v1.`e.e.d.a.o.d` @type ^`boolean` := v0 @kind boolean;
  #L3878d6.  v1.`e.e.d.a.o.e` @type ^`java.lang.String` := v2 @kind object;
  #L3878da.  return v1 @kind object;
  #L3878dc.  v2:= new `java.lang.NullPointerException`;
  #L3878e0.  call `<init>`(v2) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L3878e6.  throw v2;
}
procedure `e.e.d.a.o` `a`(`e.e.d.a.o` v1 @kind this, `boolean` v2 ) @signature `Le/e/d/a/o;.a:(Z)Le/e/d/a/o;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3878f8.  v0:= 1I;
  #L3878fa.  v1.`e.e.d.a.o.f` @type ^`boolean` := v0 @kind boolean;
  #L3878fe.  v1.`e.e.d.a.o.g` @type ^`boolean` := v2 @kind boolean;
  #L387902.  return v1 @kind object;
}
procedure `boolean` `a`(`e.e.d.a.o` v7 @kind this, `e.e.d.a.o` v8 @kind object) @signature `Le/e/d/a/o;.a:(Le/e/d/a/o;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L38770c.  v0:= 0I;
  #L38770e.  if v8 != 0 then goto L387714;
  #L387712.  return v0;
  #L387714.  v1:= 1I;
  #L387716.  if v7 != v8 then goto L38771c;
  #L38771a.  return v1;
  #L38771c.  v2:= v7.`e.e.d.a.o.b` @type ^`int`;
  #L387720.  v3:= v8.`e.e.d.a.o.b` @type ^`int`;
  #L387724.  if v2 != v3 then goto L3877ae;
  #L387728.  v2:= v7.`e.e.d.a.o.c` @type ^`long` @kind wide;
  #L38772c.  v4:= v8.`e.e.d.a.o.c` @type ^`long` @kind wide;
  #L387730.  v6:= lcmp(v2, v4);
  #L387734.  if v6 != 0 then goto L3877ae;
  #L387738.  v2:= v7.`e.e.d.a.o.e` @type ^`java.lang.String` @kind object;
  #L38773c.  v3:= v8.`e.e.d.a.o.e` @type ^`java.lang.String` @kind object;
  #L387740.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L387746.  v2:= temp;
  #L387748.  if v2 == 0 then goto L3877ae;
  #L38774c.  v2:= v7.`e.e.d.a.o.g` @type ^`boolean` @kind boolean;
  #L387750.  v3:= v8.`e.e.d.a.o.g` @type ^`boolean` @kind boolean;
  #L387754.  if v2 != v3 then goto L3877ae;
  #L387758.  v2:= v7.`e.e.d.a.o.i` @type ^`int`;
  #L38775c.  v3:= v8.`e.e.d.a.o.i` @type ^`int`;
  #L387760.  if v2 != v3 then goto L3877ae;
  #L387764.  v2:= v7.`e.e.d.a.o.k` @type ^`java.lang.String` @kind object;
  #L387768.  v3:= v8.`e.e.d.a.o.k` @type ^`java.lang.String` @kind object;
  #L38776c.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L387772.  v2:= temp;
  #L387774.  if v2 == 0 then goto L3877ae;
  #L387778.  v2:= v7.`e.e.d.a.o.m` @type ^`e.e.d.a.o$a` @kind object;
  #L38777c.  v3:= v8.`e.e.d.a.o.m` @type ^`e.e.d.a.o$a` @kind object;
  #L387780.  if v2 != v3 then goto L3877ae;
  #L387784.  v2:= v7.`e.e.d.a.o.o` @type ^`java.lang.String` @kind object;
  #L387788.  v3:= v8.`e.e.d.a.o.o` @type ^`java.lang.String` @kind object;
  #L38778c.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L387792.  v2:= temp;
  #L387794.  if v2 == 0 then goto L3877ae;
  #L387798.  call temp:= `m`(v7) @signature `Le/e/d/a/o;.m:()Z` @kind virtual;
  #L38779e.  v2:= temp;
  #L3877a0.  call temp:= `m`(v8) @signature `Le/e/d/a/o;.m:()Z` @kind virtual;
  #L3877a6.  v8:= temp;
  #L3877a8.  if v2 != v8 then goto L3877ae;
  #L3877ac.  v0:= 1I;
  #L3877ae.  return v0;
}
procedure `int` `b`(`e.e.d.a.o` v1 @kind this) @signature `Le/e/d/a/o;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3879b8.  v0:= v1.`e.e.d.a.o.b` @type ^`int`;
  #L3879bc.  return v0;
}
procedure `e.e.d.a.o` `b`(`e.e.d.a.o` v1 @kind this, `int` v2 ) @signature `Le/e/d/a/o;.b:(I)Le/e/d/a/o;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L38792c.  v0:= 1I;
  #L38792e.  v1.`e.e.d.a.o.h` @type ^`boolean` := v0 @kind boolean;
  #L387932.  v1.`e.e.d.a.o.i` @type ^`int` := v2;
  #L387936.  return v1 @kind object;
}
procedure `e.e.d.a.o` `b`(`e.e.d.a.o` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Le/e/d/a/o;.b:(Ljava/lang/String;)Le/e/d/a/o;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L387948.  if v2 == 0 then goto L387958;
  #L38794c.  v0:= 1I;
  #L38794e.  v1.`e.e.d.a.o.n` @type ^`boolean` := v0 @kind boolean;
  #L387952.  v1.`e.e.d.a.o.o` @type ^`java.lang.String` := v2 @kind object;
  #L387956.  return v1 @kind object;
  #L387958.  v2:= new `java.lang.NullPointerException`;
  #L38795c.  call `<init>`(v2) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L387962.  throw v2;
}
procedure `e.e.d.a.o$a` `c`(`e.e.d.a.o` v1 @kind this) @signature `Le/e/d/a/o;.c:()Le/e/d/a/o$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3879a0.  v0:= v1.`e.e.d.a.o.m` @type ^`e.e.d.a.o$a` @kind object;
  #L3879a4.  return v0 @kind object;
}
procedure `e.e.d.a.o` `c`(`e.e.d.a.o` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Le/e/d/a/o;.c:(Ljava/lang/String;)Le/e/d/a/o;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L387974.  if v2 == 0 then goto L387984;
  #L387978.  v0:= 1I;
  #L38797a.  v1.`e.e.d.a.o.j` @type ^`boolean` := v0 @kind boolean;
  #L38797e.  v1.`e.e.d.a.o.k` @type ^`java.lang.String` := v2 @kind object;
  #L387982.  return v1 @kind object;
  #L387984.  v2:= new `java.lang.NullPointerException`;
  #L387988.  call `<init>`(v2) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L38798e.  throw v2;
}
procedure `java.lang.String` `d`(`e.e.d.a.o` v1 @kind this) @signature `Le/e/d/a/o;.d:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L387ac8.  v0:= v1.`e.e.d.a.o.e` @type ^`java.lang.String` @kind object;
  #L387acc.  return v0 @kind object;
}
procedure `long` `e`(`e.e.d.a.o` v2 @kind this) @signature `Le/e/d/a/o;.e:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L387c00.  v0:= v2.`e.e.d.a.o.c` @type ^`long` @kind wide;
  #L387c04.  return v0 @kind wide;
}
procedure `boolean` `equals`(`e.e.d.a.o` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Le/e/d/a/o;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3876dc.  v0:= instanceof @variable v2 @type ^`e.e.d.a.o` @kind boolean;
  #L3876e0.  if v0 == 0 then goto L3876f8;
  #L3876e4.  v2:= (`e.e.d.a.o`) v2 @kind object;
  #L3876e8.  call temp:= `a`(v1, v2) @signature `Le/e/d/a/o;.a:(Le/e/d/a/o;)Z` @kind virtual;
  #L3876ee.  v2:= temp;
  #L3876f0.  if v2 == 0 then goto L3876f8;
  #L3876f4.  v2:= 1I;
  #L3876f6.  goto L3876fa;
  #L3876f8.  v2:= 0I;
  #L3876fa.  return v2;
}
procedure `int` `f`(`e.e.d.a.o` v1 @kind this) @signature `Le/e/d/a/o;.f:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3879d0.  v0:= v1.`e.e.d.a.o.i` @type ^`int`;
  #L3879d4.  return v0;
}
procedure `java.lang.String` `g`(`e.e.d.a.o` v1 @kind this) @signature `Le/e/d/a/o;.g:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L387ae0.  v0:= v1.`e.e.d.a.o.o` @type ^`java.lang.String` @kind object;
  #L387ae4.  return v0 @kind object;
}
procedure `java.lang.String` `h`(`e.e.d.a.o` v1 @kind this) @signature `Le/e/d/a/o;.h:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L387af8.  v0:= v1.`e.e.d.a.o.k` @type ^`java.lang.String` @kind object;
  #L387afc.  return v0 @kind object;
}
procedure `int` `hashCode`(`e.e.d.a.o` v4 @kind this) @signature `Le/e/d/a/o;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3879e8.  call temp:= `b`(v4) @signature `Le/e/d/a/o;.b:()I` @kind virtual;
  #L3879ee.  v0:= temp;
  #L3879f0.  v1:= 2173I;
  #L3879f4.  v1:= v1 + v0 @kind int;
  #L3879f6.  v1:= v1 * 53;
  #L3879fa.  call temp:= `e`(v4) @signature `Le/e/d/a/o;.e:()J` @kind virtual;
  #L387a00.  v2:= temp @kind wide;
  #L387a02.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L387a08.  v0:= temp @kind object;
  #L387a0a.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Long;.hashCode:()I` @kind virtual;
  #L387a10.  v0:= temp;
  #L387a12.  v1:= v1 + v0 @kind int;
  #L387a14.  v1:= v1 * 53;
  #L387a18.  call temp:= `d`(v4) @signature `Le/e/d/a/o;.d:()Ljava/lang/String;` @kind virtual;
  #L387a1e.  v0:= temp @kind object;
  #L387a20.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L387a26.  v0:= temp;
  #L387a28.  v1:= v1 + v0 @kind int;
  #L387a2a.  v1:= v1 * 53;
  #L387a2e.  call temp:= `o`(v4) @signature `Le/e/d/a/o;.o:()Z` @kind virtual;
  #L387a34.  v0:= temp;
  #L387a36.  v2:= 1231I;
  #L387a3a.  v3:= 1237I;
  #L387a3e.  if v0 == 0 then goto L387a48;
  #L387a42.  v0:= 1231I;
  #L387a46.  goto L387a4c;
  #L387a48.  v0:= 1237I;
  #L387a4c.  v1:= v1 + v0 @kind int;
  #L387a4e.  v1:= v1 * 53;
  #L387a52.  call temp:= `f`(v4) @signature `Le/e/d/a/o;.f:()I` @kind virtual;
  #L387a58.  v0:= temp;
  #L387a5a.  v1:= v1 + v0 @kind int;
  #L387a5c.  v1:= v1 * 53;
  #L387a60.  call temp:= `h`(v4) @signature `Le/e/d/a/o;.h:()Ljava/lang/String;` @kind virtual;
  #L387a66.  v0:= temp @kind object;
  #L387a68.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L387a6e.  v0:= temp;
  #L387a70.  v1:= v1 + v0 @kind int;
  #L387a72.  v1:= v1 * 53;
  #L387a76.  call temp:= `c`(v4) @signature `Le/e/d/a/o;.c:()Le/e/d/a/o$a;` @kind virtual;
  #L387a7c.  v0:= temp @kind object;
  #L387a7e.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Enum;.hashCode:()I` @kind virtual;
  #L387a84.  v0:= temp;
  #L387a86.  v1:= v1 + v0 @kind int;
  #L387a88.  v1:= v1 * 53;
  #L387a8c.  call temp:= `g`(v4) @signature `Le/e/d/a/o;.g:()Ljava/lang/String;` @kind virtual;
  #L387a92.  v0:= temp @kind object;
  #L387a94.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L387a9a.  v0:= temp;
  #L387a9c.  v1:= v1 + v0 @kind int;
  #L387a9e.  v1:= v1 * 53;
  #L387aa2.  call temp:= `m`(v4) @signature `Le/e/d/a/o;.m:()Z` @kind virtual;
  #L387aa8.  v0:= temp;
  #L387aaa.  if v0 == 0 then goto L387ab0;
  #L387aae.  goto L387ab4;
  #L387ab0.  v2:= 1237I;
  #L387ab4.  v1:= v1 + v2 @kind int;
  #L387ab6.  return v1;
}
procedure `boolean` `i`(`e.e.d.a.o` v1 @kind this) @signature `Le/e/d/a/o;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3877c0.  v0:= v1.`e.e.d.a.o.l` @type ^`boolean` @kind boolean;
  #L3877c4.  return v0;
}
procedure `boolean` `j`(`e.e.d.a.o` v1 @kind this) @signature `Le/e/d/a/o;.j:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3877d8.  v0:= v1.`e.e.d.a.o.d` @type ^`boolean` @kind boolean;
  #L3877dc.  return v0;
}
procedure `boolean` `k`(`e.e.d.a.o` v1 @kind this) @signature `Le/e/d/a/o;.k:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3877f0.  v0:= v1.`e.e.d.a.o.f` @type ^`boolean` @kind boolean;
  #L3877f4.  return v0;
}
procedure `boolean` `l`(`e.e.d.a.o` v1 @kind this) @signature `Le/e/d/a/o;.l:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L387808.  v0:= v1.`e.e.d.a.o.h` @type ^`boolean` @kind boolean;
  #L38780c.  return v0;
}
procedure `boolean` `m`(`e.e.d.a.o` v1 @kind this) @signature `Le/e/d/a/o;.m:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L387820.  v0:= v1.`e.e.d.a.o.n` @type ^`boolean` @kind boolean;
  #L387824.  return v0;
}
procedure `boolean` `n`(`e.e.d.a.o` v1 @kind this) @signature `Le/e/d/a/o;.n:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L387838.  v0:= v1.`e.e.d.a.o.j` @type ^`boolean` @kind boolean;
  #L38783c.  return v0;
}
procedure `boolean` `o`(`e.e.d.a.o` v1 @kind this) @signature `Le/e/d/a/o;.o:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L387850.  v0:= v1.`e.e.d.a.o.g` @type ^`boolean` @kind boolean;
  #L387854.  return v0;
}
procedure `java.lang.String` `toString`(`e.e.d.a.o` v3 @kind this) @signature `Le/e/d/a/o;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L387b10.  v0:= new `java.lang.StringBuilder`;
  #L387b14.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L387b1a.  v1:= "Country Code: " @kind object;
  #L387b1e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L387b24.  v1:= v3.`e.e.d.a.o.b` @type ^`int`;
  #L387b28.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L387b2e.  v1:= " National Number: " @kind object;
  #L387b32.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L387b38.  v1:= v3.`e.e.d.a.o.c` @type ^`long` @kind wide;
  #L387b3c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L387b42.  call temp:= `k`(v3) @signature `Le/e/d/a/o;.k:()Z` @kind virtual;
  #L387b48.  v1:= temp;
  #L387b4a.  if v1 == 0 then goto L387b64;
  #L387b4e.  call temp:= `o`(v3) @signature `Le/e/d/a/o;.o:()Z` @kind virtual;
  #L387b54.  v1:= temp;
  #L387b56.  if v1 == 0 then goto L387b64;
  #L387b5a.  v1:= " Leading Zero(s): true" @kind object;
  #L387b5e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L387b64.  call temp:= `l`(v3) @signature `Le/e/d/a/o;.l:()Z` @kind virtual;
  #L387b6a.  v1:= temp;
  #L387b6c.  if v1 == 0 then goto L387b84;
  #L387b70.  v1:= " Number of leading zeros: " @kind object;
  #L387b74.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L387b7a.  v1:= v3.`e.e.d.a.o.i` @type ^`int`;
  #L387b7e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L387b84.  call temp:= `j`(v3) @signature `Le/e/d/a/o;.j:()Z` @kind virtual;
  #L387b8a.  v1:= temp;
  #L387b8c.  if v1 == 0 then goto L387ba4;
  #L387b90.  v1:= " Extension: " @kind object;
  #L387b94.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L387b9a.  v1:= v3.`e.e.d.a.o.e` @type ^`java.lang.String` @kind object;
  #L387b9e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L387ba4.  call temp:= `i`(v3) @signature `Le/e/d/a/o;.i:()Z` @kind virtual;
  #L387baa.  v1:= temp;
  #L387bac.  if v1 == 0 then goto L387bc4;
  #L387bb0.  v1:= " Country Code Source: " @kind object;
  #L387bb4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L387bba.  v1:= v3.`e.e.d.a.o.m` @type ^`e.e.d.a.o$a` @kind object;
  #L387bbe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L387bc4.  call temp:= `m`(v3) @signature `Le/e/d/a/o;.m:()Z` @kind virtual;
  #L387bca.  v1:= temp;
  #L387bcc.  if v1 == 0 then goto L387be4;
  #L387bd0.  v1:= " Preferred Domestic Carrier Code: " @kind object;
  #L387bd4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L387bda.  v1:= v3.`e.e.d.a.o.o` @type ^`java.lang.String` @kind object;
  #L387bde.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L387be4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L387bea.  v0:= temp @kind object;
  #L387bec.  return v0 @kind object;
}
