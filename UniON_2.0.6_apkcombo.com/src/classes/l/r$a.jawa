record `l.r$a` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `l.r$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`l.r$a` v2 @kind this) @signature `Ll/r$a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3dd0cc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dd0d2.  v0:= new `java.util.ArrayList`;
  #L3dd0d6.  v1:= 20I;
  #L3dd0da.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3dd0e0.  v2.`l.r$a.a` @type ^`java.util.List` := v0 @kind object;
  #L3dd0e4.  return @kind void;
}
procedure `l.r$a` `a`(`l.r$a` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Ll/r$a;.a:(Ljava/lang/String;)Ll/r$a;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3dcfa8.  v0:= ":" @kind object;
  #L3dcfac.  v1:= 1I;
  #L3dcfae.  call temp:= `indexOf`(v5, v0, v1) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;I)I` @kind virtual;
  #L3dcfb4.  v2:= temp;
  #L3dcfb6.  v3:= -1I;
  #L3dcfb8.  if v2 == v3 then goto L3dcfd8;
  #L3dcfbc.  v0:= 0I;
  #L3dcfbe.  call temp:= `substring`(v5, v0, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3dcfc4.  v0:= temp @kind object;
  #L3dcfc6.  v2:= v2 + v1 @kind int;
  #L3dcfc8.  call temp:= `substring`(v5, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3dcfce.  v5:= temp @kind object;
  #L3dcfd0.  call temp:= `b`(v4, v0, v5) @signature `Ll/r$a;.b:(Ljava/lang/String;Ljava/lang/String;)Ll/r$a;` @kind virtual;
  #L3dcfd6.  return v4 @kind object;
  #L3dcfd8.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3dcfde.  v0:= temp;
  #L3dcfe0.  v2:= "" @kind object;
  #L3dcfe4.  if v0 == 0 then goto L3dcff8;
  #L3dcfe8.  call temp:= `substring`(v5, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3dcfee.  v5:= temp @kind object;
  #L3dcff0.  call temp:= `b`(v4, v2, v5) @signature `Ll/r$a;.b:(Ljava/lang/String;Ljava/lang/String;)Ll/r$a;` @kind virtual;
  #L3dcff6.  return v4 @kind object;
  #L3dcff8.  call temp:= `b`(v4, v2, v5) @signature `Ll/r$a;.b:(Ljava/lang/String;Ljava/lang/String;)Ll/r$a;` @kind virtual;
  #L3dcffe.  return v4 @kind object;
}
procedure `l.r$a` `a`(`l.r$a` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Ll/r$a;.a:(Ljava/lang/String;Ljava/lang/String;)Ll/r$a;` @AccessFlag PUBLIC {
    temp;

  #L3dcf84.  call `c`(v1) @signature `Ll/r;.c:(Ljava/lang/String;)V` @kind static;
  #L3dcf8a.  call `a`(v2, v1) @signature `Ll/r;.a:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L3dcf90.  call temp:= `b`(v0, v1, v2) @signature `Ll/r$a;.b:(Ljava/lang/String;Ljava/lang/String;)Ll/r$a;` @kind virtual;
  #L3dcf96.  return v0 @kind object;
}
procedure `l.r` `a`(`l.r$a` v1 @kind this) @signature `Ll/r$a;.a:()Ll/r;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dcf68.  v0:= new `l.r`;
  #L3dcf6c.  call `<init>`(v0, v1) @signature `Ll/r;.<init>:(Ll/r$a;)V` @kind direct;
  #L3dcf72.  return v0 @kind object;
}
procedure `l.r$a` `b`(`l.r$a` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Ll/r$a;.b:(Ljava/lang/String;)Ll/r$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dd040.  v0:= 0I;
  #L3dd042.  v1:= v2.`l.r$a.a` @type ^`java.util.List` @kind object;
  #L3dd046.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3dd04c.  v1:= temp;
  #L3dd04e.  if v0 >= v1 then goto L3dd08c;
  #L3dd052.  v1:= v2.`l.r$a.a` @type ^`java.util.List` @kind object;
  #L3dd056.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3dd05c.  v1:= temp @kind object;
  #L3dd05e.  v1:= (`java.lang.String`) v1 @kind object;
  #L3dd062.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L3dd068.  v1:= temp;
  #L3dd06a.  if v1 == 0 then goto L3dd086;
  #L3dd06e.  v1:= v2.`l.r$a.a` @type ^`java.util.List` @kind object;
  #L3dd072.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L3dd078.  v1:= v2.`l.r$a.a` @type ^`java.util.List` @kind object;
  #L3dd07c.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L3dd082.  v0:= v0 + -2;
  #L3dd086.  v0:= v0 + 2;
  #L3dd08a.  goto L3dd042;
  #L3dd08c.  return v2 @kind object;
}
procedure `l.r$a` `b`(`l.r$a` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Ll/r$a;.b:(Ljava/lang/String;Ljava/lang/String;)Ll/r$a;` @AccessFlag  {
    temp;
    v0;

  #L3dd010.  v0:= v1.`l.r$a.a` @type ^`java.util.List` @kind object;
  #L3dd014.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3dd01a.  v2:= v1.`l.r$a.a` @type ^`java.util.List` @kind object;
  #L3dd01e.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L3dd024.  v3:= temp @kind object;
  #L3dd026.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3dd02c.  return v1 @kind object;
}
procedure `l.r$a` `c`(`l.r$a` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Ll/r$a;.c:(Ljava/lang/String;Ljava/lang/String;)Ll/r$a;` @AccessFlag PUBLIC {
    temp;

  #L3dd0a0.  call `c`(v1) @signature `Ll/r;.c:(Ljava/lang/String;)V` @kind static;
  #L3dd0a6.  call `a`(v2, v1) @signature `Ll/r;.a:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L3dd0ac.  call temp:= `b`(v0, v1) @signature `Ll/r$a;.b:(Ljava/lang/String;)Ll/r$a;` @kind virtual;
  #L3dd0b2.  call temp:= `b`(v0, v1, v2) @signature `Ll/r$a;.b:(Ljava/lang/String;Ljava/lang/String;)Ll/r$a;` @kind virtual;
  #L3dd0b8.  return v0 @kind object;
}
