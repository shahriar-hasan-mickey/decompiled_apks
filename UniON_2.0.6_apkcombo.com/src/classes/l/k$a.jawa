record `l.k$a` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `l.k$a.a` @AccessFlag ;
  `java.lang.String`[] `l.k$a.b` @AccessFlag ;
  `java.lang.String`[] `l.k$a.c` @AccessFlag ;
  `boolean` `l.k$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`l.k$a` v1 @kind this, `l.k` v2 @kind object) @signature `Ll/k$a;.<init>:(Ll/k;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3db5c0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3db5c6.  v0:= v2.`l.k.a` @type ^`boolean` @kind boolean;
  #L3db5ca.  v1.`l.k$a.a` @type ^`boolean` := v0 @kind boolean;
  #L3db5ce.  v0:= v2.`l.k.c` @type ^`java.lang.String`[] @kind object;
  #L3db5d2.  v1.`l.k$a.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L3db5d6.  v0:= v2.`l.k.d` @type ^`java.lang.String`[] @kind object;
  #L3db5da.  v1.`l.k$a.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L3db5de.  v2:= v2.`l.k.b` @type ^`boolean` @kind boolean;
  #L3db5e2.  v1.`l.k$a.d` @type ^`boolean` := v2 @kind boolean;
  #L3db5e6.  return @kind void;
}
procedure `void` `<init>`(`l.k$a` v0 @kind this, `boolean` v1 ) @signature `Ll/k$a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3db5a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3db5aa.  v0.`l.k$a.a` @type ^`boolean` := v1 @kind boolean;
  #L3db5ae.  return @kind void;
}
procedure `l.k$a` `a`(`l.k$a` v1 @kind this, `boolean` v2 ) @signature `Ll/k$a;.a:(Z)Ll/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db4d4.  v0:= v1.`l.k$a.a` @type ^`boolean` @kind boolean;
  #L3db4d8.  if v0 == 0 then goto L3db4e2;
  #L3db4dc.  v1.`l.k$a.d` @type ^`boolean` := v2 @kind boolean;
  #L3db4e0.  return v1 @kind object;
  #L3db4e2.  v2:= new `java.lang.IllegalStateException`;
  #L3db4e6.  v0:= "no TLS extensions for cleartext connections" @kind object;
  #L3db4ea.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3db4f0.  throw v2;
}
procedure `l.k$a` `a`(`l.k$a` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Ll/k$a;.a:([Ljava/lang/String;)Ll/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db434.  v0:= v1.`l.k$a.a` @type ^`boolean` @kind boolean;
  #L3db438.  if v0 == 0 then goto L3db464;
  #L3db43c.  v0:= length @variable v2;
  #L3db43e.  if v0 == 0 then goto L3db454;
  #L3db442.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3db448.  v2:= temp @kind object;
  #L3db44a.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L3db44e.  v1.`l.k$a.b` @type ^`java.lang.String`[] := v2 @kind object;
  #L3db452.  return v1 @kind object;
  #L3db454.  v2:= new `java.lang.IllegalArgumentException`;
  #L3db458.  v0:= "At least one cipher suite is required" @kind object;
  #L3db45c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3db462.  throw v2;
  #L3db464.  v2:= new `java.lang.IllegalStateException`;
  #L3db468.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L3db46c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3db472.  throw v2;
}
procedure `l.k$a` `a`(`l.k$a` v3 @kind this, `l.d0`[] v4 @kind object) @signature `Ll/k$a;.a:([Ll/d0;)Ll/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3db554.  v0:= v3.`l.k$a.a` @type ^`boolean` @kind boolean;
  #L3db558.  if v0 == 0 then goto L3db584;
  #L3db55c.  v0:= length @variable v4;
  #L3db55e.  v0:= new `java.lang.String`[v0];
  #L3db562.  v1:= 0I;
  #L3db564.  v2:= length @variable v4;
  #L3db566.  if v1 >= v2 then goto L3db57c;
  #L3db56a.  v2:= v4[v1] @kind object;
  #L3db56e.  v2:= v2.`l.d0.b` @type ^`java.lang.String` @kind object;
  #L3db572.  v0[v1]:= v2 @kind object;
  #L3db576.  v1:= v1 + 1;
  #L3db57a.  goto L3db564;
  #L3db57c.  call temp:= `b`(v3, v0) @signature `Ll/k$a;.b:([Ljava/lang/String;)Ll/k$a;` @kind virtual;
  #L3db582.  return v3 @kind object;
  #L3db584.  v4:= new `java.lang.IllegalStateException`;
  #L3db588.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L3db58c.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3db592.  throw v4;
}
procedure `l.k$a` `a`(`l.k$a` v3 @kind this, `l.h`[] v4 @kind object) @signature `Ll/k$a;.a:([Ll/h;)Ll/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3db484.  v0:= v3.`l.k$a.a` @type ^`boolean` @kind boolean;
  #L3db488.  if v0 == 0 then goto L3db4b4;
  #L3db48c.  v0:= length @variable v4;
  #L3db48e.  v0:= new `java.lang.String`[v0];
  #L3db492.  v1:= 0I;
  #L3db494.  v2:= length @variable v4;
  #L3db496.  if v1 >= v2 then goto L3db4ac;
  #L3db49a.  v2:= v4[v1] @kind object;
  #L3db49e.  v2:= v2.`l.h.a` @type ^`java.lang.String` @kind object;
  #L3db4a2.  v0[v1]:= v2 @kind object;
  #L3db4a6.  v1:= v1 + 1;
  #L3db4aa.  goto L3db494;
  #L3db4ac.  call temp:= `a`(v3, v0) @signature `Ll/k$a;.a:([Ljava/lang/String;)Ll/k$a;` @kind virtual;
  #L3db4b2.  return v3 @kind object;
  #L3db4b4.  v4:= new `java.lang.IllegalStateException`;
  #L3db4b8.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L3db4bc.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3db4c2.  throw v4;
}
procedure `l.k` `a`(`l.k$a` v1 @kind this) @signature `Ll/k$a;.a:()Ll/k;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db418.  v0:= new `l.k`;
  #L3db41c.  call `<init>`(v0, v1) @signature `Ll/k;.<init>:(Ll/k$a;)V` @kind direct;
  #L3db422.  return v0 @kind object;
}
procedure `l.k$a` `b`(`l.k$a` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Ll/k$a;.b:([Ljava/lang/String;)Ll/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db504.  v0:= v1.`l.k$a.a` @type ^`boolean` @kind boolean;
  #L3db508.  if v0 == 0 then goto L3db534;
  #L3db50c.  v0:= length @variable v2;
  #L3db50e.  if v0 == 0 then goto L3db524;
  #L3db512.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3db518.  v2:= temp @kind object;
  #L3db51a.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L3db51e.  v1.`l.k$a.c` @type ^`java.lang.String`[] := v2 @kind object;
  #L3db522.  return v1 @kind object;
  #L3db524.  v2:= new `java.lang.IllegalArgumentException`;
  #L3db528.  v0:= "At least one TLS version is required" @kind object;
  #L3db52c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3db532.  throw v2;
  #L3db534.  v2:= new `java.lang.IllegalStateException`;
  #L3db538.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L3db53c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3db542.  throw v2;
}
