record `l.j$a` @kind class @AccessFlag  extends `java.lang.Runnable` @kind interface {
  `l.j` `l.j$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`l.j$a` v0 @kind this, `l.j` v1 @kind object) @signature `Ll/j$a;.<init>:(Ll/j;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3daf98.  v0.`l.j$a.b` @type ^`l.j` := v1 @kind object;
  #L3daf9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dafa2.  return @kind void;
}
procedure `void` `run`(`l.j$a` v6 @kind this) @signature `Ll/j$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3dafb4.  v0:= v6.`l.j$a.b` @type ^`l.j` @kind object;
  #L3dafb8.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L3dafbe.  v1:= temp @kind wide;
  #L3dafc0.  call temp:= `a`(v0, v1) @signature `Ll/j;.a:(J)J` @kind virtual;
  #L3dafc6.  v0:= temp @kind wide;
  #L3dafc8.  v2:= -1L;
  #L3dafcc.  v4:= lcmp(v0, v2);
  #L3dafd0.  if v4 != 0 then goto L3dafd6;
  #L3dafd4.  return @kind void;
  #L3dafd6.  v2:= 0L;
  #L3dafda.  v4:= lcmp(v0, v2);
  #L3dafde.  if v4 <= 0 then goto L3dafb4;
  #L3dafe2.  v2:= 1000000L;
  #L3dafe8.  v4:= v0 / v2 @kind long;
  #L3dafec.  v2:= v2 * v4 @kind long;
  #L3daff0.  v0:= v0 - v2 @kind long;
  #L3daff2.  v2:= v6.`l.j$a.b` @type ^`l.j` @kind object;
  #L3daff6.  @monitorenter v2
  #L3daff8.  v3:= v6.`l.j$a.b` @type ^`l.j` @kind object;
  #L3daffc.  v1:= (`int`) v0 @kind l2i;
  #L3daffe.  call `wait`(v3, v4, v1) @signature `Ljava/lang/Object;.wait:(JI)V` @kind virtual;
  #L3db004.  goto L3db00a;
  #L3db006.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3db008.  goto L3db00e;
  #L3db00a.  @monitorexit v2
  #L3db00c.  goto L3dafb4;
  #L3db00e.  @monitorexit v2
  #L3db010.  throw v0;
  catch `java.lang.InterruptedException` @[L3daff8..L3db004] goto L3db00a;
  catch `java.lang.Throwable` @[L3daff8..L3db004] goto L3db006;
  catch `java.lang.Throwable` @[L3db00a..L3db010] goto L3db006;
}
