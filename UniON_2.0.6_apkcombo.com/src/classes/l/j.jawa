record `l.j` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `l.j.a` @AccessFlag PRIVATE_FINAL;
  `long` `l.j.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Runnable` `l.j.c` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `l.j.d` @AccessFlag PRIVATE_FINAL;
  `l.f0.f.d` `l.j.e` @AccessFlag FINAL;
  `boolean` `l.j.f` @AccessFlag ;
}
global `java.util.concurrent.Executor` `@@l.j.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ll/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3db2e4.  v8:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L3db2e8.  v1:= 0I;
  #L3db2ea.  v2:= 2147483647I;
  #L3db2f0.  v3:= 60L;
  #L3db2f4.  v5:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3db2f8.  v6:= new `java.util.concurrent.SynchronousQueue`;
  #L3db2fc.  call `<init>`(v6) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L3db302.  v0:= 1I;
  #L3db304.  v7:= "OkHttp ConnectionPool" @kind object;
  #L3db308.  call temp:= `a`(v7, v0) @signature `Ll/f0/c;.a:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L3db30e.  v7:= temp @kind object;
  #L3db310.  v0:= v8 @kind object;
  #L3db312.  call `<init>`(v0, v1, v2, v3, v5, v6, v7) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L3db318.  `@@l.j.g` @type ^`java.util.concurrent.Executor` := v8 @kind object;
  #L3db31c.  return @kind void;
}
procedure `void` `<init>`(`l.j` v4 @kind this) @signature `Ll/j;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3db330.  v0:= `@@java.util.concurrent.TimeUnit.MINUTES` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3db334.  v1:= 5I;
  #L3db336.  v2:= 5L;
  #L3db33a.  call `<init>`(v4, v1, v2, v0) @signature `Ll/j;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L3db340.  return @kind void;
}
procedure `void` `<init>`(`l.j` v2 @kind this, `int` v3 , `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Ll/j;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3db354.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3db35a.  v0:= new `l.j$a`;
  #L3db35e.  call `<init>`(v0, v2) @signature `Ll/j$a;.<init>:(Ll/j;)V` @kind direct;
  #L3db364.  v2.`l.j.c` @type ^`java.lang.Runnable` := v0 @kind object;
  #L3db368.  v0:= new `java.util.ArrayDeque`;
  #L3db36c.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L3db372.  v2.`l.j.d` @type ^`java.util.Deque` := v0 @kind object;
  #L3db376.  v0:= new `l.f0.f.d`;
  #L3db37a.  call `<init>`(v0) @signature `Ll/f0/f/d;.<init>:()V` @kind direct;
  #L3db380.  v2.`l.j.e` @type ^`l.f0.f.d` := v0 @kind object;
  #L3db384.  v2.`l.j.a` @type ^`int` := v3;
  #L3db388.  call temp:= `toNanos`(v6, v4) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L3db38e.  v0:= temp @kind wide;
  #L3db390.  v2.`l.j.b` @type ^`long` := v0 @kind wide;
  #L3db394.  v0:= 0L;
  #L3db398.  v3:= lcmp(v4, v0);
  #L3db39c.  if v3 <= 0 then goto L3db3a2;
  #L3db3a0.  return @kind void;
  #L3db3a2.  v3:= new `java.lang.IllegalArgumentException`;
  #L3db3a6.  v6:= new `java.lang.StringBuilder`;
  #L3db3aa.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3db3b0.  v0:= "keepAliveDuration <= 0: " @kind object;
  #L3db3b4.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3db3ba.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3db3c0.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3db3c6.  v4:= temp @kind object;
  #L3db3c8.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3db3ce.  throw v3;
}
procedure `int` `a`(`l.j` v6 @kind this, `l.f0.f.c` v7 @kind object, `long` v8 ) @signature `Ll/j;.a:(Ll/f0/f/c;J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3db078.  v0:= v7.`l.f0.f.c.n` @type ^`java.util.List` @kind object;
  #L3db07c.  v1:= 0I;
  #L3db07e.  v2:= 0I;
  #L3db080.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3db086.  v3:= temp;
  #L3db088.  if v2 >= v3 then goto L3db128;
  #L3db08c.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3db092.  v3:= temp @kind object;
  #L3db094.  v3:= (`java.lang.ref.Reference`) v3 @kind object;
  #L3db098.  call temp:= `get`(v3) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3db09e.  v4:= temp @kind object;
  #L3db0a0.  if v4 == 0 then goto L3db0aa;
  #L3db0a4.  v2:= v2 + 1;
  #L3db0a8.  goto L3db080;
  #L3db0aa.  v3:= (`l.f0.f.g$a`) v3 @kind object;
  #L3db0ae.  v4:= new `java.lang.StringBuilder`;
  #L3db0b2.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3db0b8.  v5:= "A connection to " @kind object;
  #L3db0bc.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3db0c2.  call temp:= `d`(v7) @signature `Ll/f0/f/c;.d:()Ll/c0;` @kind virtual;
  #L3db0c8.  v5:= temp @kind object;
  #L3db0ca.  call temp:= `a`(v5) @signature `Ll/c0;.a:()Ll/a;` @kind virtual;
  #L3db0d0.  v5:= temp @kind object;
  #L3db0d2.  call temp:= `k`(v5) @signature `Ll/a;.k:()Ll/s;` @kind virtual;
  #L3db0d8.  v5:= temp @kind object;
  #L3db0da.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3db0e0.  v5:= " was leaked. Did you forget to close a response body?" @kind object;
  #L3db0e4.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3db0ea.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3db0f0.  v4:= temp @kind object;
  #L3db0f2.  call temp:= `c`() @signature `Ll/f0/j/f;.c:()Ll/f0/j/f;` @kind static;
  #L3db0f8.  v5:= temp @kind object;
  #L3db0fa.  v3:= v3.`l.f0.f.g$a.a` @type ^`java.lang.Object` @kind object;
  #L3db0fe.  call `a`(v5, v4, v3) @signature `Ll/f0/j/f;.a:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L3db104.  call temp:= `remove`(v0, v2) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L3db10a.  v3:= 1I;
  #L3db10c.  v7.`l.f0.f.c.k` @type ^`boolean` := v3 @kind boolean;
  #L3db110.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L3db116.  v3:= temp;
  #L3db118.  if v3 == 0 then goto L3db080;
  #L3db11c.  v2:= v6.`l.j.b` @type ^`long` @kind wide;
  #L3db120.  v8:= v8 - v2 @kind long;
  #L3db122.  v7.`l.f0.f.c.o` @type ^`long` := v8 @kind wide;
  #L3db126.  return v1;
  #L3db128.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3db12e.  v7:= temp;
  #L3db130.  return v7;
}
procedure `long` `a`(`l.j` v11 @kind this, `long` v12 ) @signature `Ll/j;.a:(J)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3db1ac.  @monitorenter v11
  #L3db1ae.  v0:= v11.`l.j.d` @type ^`java.util.Deque` @kind object;
  #L3db1b2.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3db1b8.  v0:= temp @kind object;
  #L3db1ba.  v1:= 0I;
  #L3db1bc.  v2:= 0I;
  #L3db1be.  v3:= -9223372036854775808L;
  #L3db1c2.  v5:= v2 @kind object;
  #L3db1c4.  v2:= 0I;
  #L3db1c6.  v6:= 0I;
  #L3db1c8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3db1ce.  v7:= temp;
  #L3db1d0.  if v7 == 0 then goto L3db20c;
  #L3db1d4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3db1da.  v7:= temp @kind object;
  #L3db1dc.  v7:= (`l.f0.f.c`) v7 @kind object;
  #L3db1e0.  call temp:= `a`(v11, v7, v12) @signature `Ll/j;.a:(Ll/f0/f/c;J)I` @kind direct;
  #L3db1e6.  v8:= temp;
  #L3db1e8.  if v8 <= 0 then goto L3db1f2;
  #L3db1ec.  v6:= v6 + 1;
  #L3db1f0.  goto L3db1c8;
  #L3db1f2.  v2:= v2 + 1;
  #L3db1f6.  v8:= v7.`l.f0.f.c.o` @type ^`long` @kind wide;
  #L3db1fa.  v8:= v12 - v8 @kind long;
  #L3db1fe.  v10:= lcmp(v8, v3);
  #L3db202.  if v10 <= 0 then goto L3db1c8;
  #L3db206.  v5:= v7 @kind object;
  #L3db208.  v3:= v8 @kind wide;
  #L3db20a.  goto L3db1c8;
  #L3db20c.  v12:= v11.`l.j.b` @type ^`long` @kind wide;
  #L3db210.  v0:= lcmp(v3, v12);
  #L3db214.  if v0 >= 0 then goto L3db248;
  #L3db218.  v12:= v11.`l.j.a` @type ^`int`;
  #L3db21c.  if v2 <= v12 then goto L3db222;
  #L3db220.  goto L3db248;
  #L3db222.  if v2 <= 0 then goto L3db230;
  #L3db226.  v12:= v11.`l.j.b` @type ^`long` @kind wide;
  #L3db22a.  v12:= v12 - v3 @kind long;
  #L3db22c.  @monitorexit v11
  #L3db22e.  return v12 @kind wide;
  #L3db230.  if v6 <= 0 then goto L3db23c;
  #L3db234.  v12:= v11.`l.j.b` @type ^`long` @kind wide;
  #L3db238.  @monitorexit v11
  #L3db23a.  return v12 @kind wide;
  #L3db23c.  v11.`l.j.f` @type ^`boolean` := v1 @kind boolean;
  #L3db240.  v12:= -1L;
  #L3db244.  @monitorexit v11
  #L3db246.  return v12 @kind wide;
  #L3db248.  v12:= v11.`l.j.d` @type ^`java.util.Deque` @kind object;
  #L3db24c.  call temp:= `remove`(v12, v5) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L3db252.  @monitorexit v11
  #L3db254.  call temp:= `e`(v5) @signature `Ll/f0/f/c;.e:()Ljava/net/Socket;` @kind virtual;
  #L3db25a.  v12:= temp @kind object;
  #L3db25c.  call `a`(v12) @signature `Ll/f0/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L3db262.  v12:= 0L;
  #L3db266.  return v12 @kind wide;
  #L3db268.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3db26a.  @monitorexit v11
  #L3db26c.  throw v12;
  catch `java.lang.Throwable` @[L3db1ae..L3db254] goto L3db268;
  catch `java.lang.Throwable` @[L3db26a..L3db26c] goto L3db268;
}
procedure `java.net.Socket` `a`(`l.j` v3 @kind this, `l.a` v4 @kind object, `l.f0.f.g` v5 @kind object) @signature `Ll/j;.a:(Ll/a;Ll/f0/f/g;)Ljava/net/Socket;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3db144.  v0:= v3.`l.j.d` @type ^`java.util.Deque` @kind object;
  #L3db148.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3db14e.  v0:= temp @kind object;
  #L3db150.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3db156.  v1:= temp;
  #L3db158.  v2:= 0I;
  #L3db15a.  if v1 == 0 then goto L3db198;
  #L3db15e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3db164.  v1:= temp @kind object;
  #L3db166.  v1:= (`l.f0.f.c`) v1 @kind object;
  #L3db16a.  call temp:= `a`(v1, v4, v2) @signature `Ll/f0/f/c;.a:(Ll/a;Ll/c0;)Z` @kind virtual;
  #L3db170.  v2:= temp;
  #L3db172.  if v2 == 0 then goto L3db150;
  #L3db176.  call temp:= `c`(v1) @signature `Ll/f0/f/c;.c:()Z` @kind virtual;
  #L3db17c.  v2:= temp;
  #L3db17e.  if v2 == 0 then goto L3db150;
  #L3db182.  call temp:= `c`(v5) @signature `Ll/f0/f/g;.c:()Ll/f0/f/c;` @kind virtual;
  #L3db188.  v2:= temp @kind object;
  #L3db18a.  if v1 == v2 then goto L3db150;
  #L3db18e.  call temp:= `a`(v5, v1) @signature `Ll/f0/f/g;.a:(Ll/f0/f/c;)Ljava/net/Socket;` @kind virtual;
  #L3db194.  v4:= temp @kind object;
  #L3db196.  return v4 @kind object;
  #L3db198.  return v2 @kind object;
}
procedure `l.f0.f.c` `a`(`l.j` v3 @kind this, `l.a` v4 @kind object, `l.f0.f.g` v5 @kind object, `l.c0` v6 @kind object) @signature `Ll/j;.a:(Ll/a;Ll/f0/f/g;Ll/c0;)Ll/f0/f/c;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3db294.  v0:= v3.`l.j.d` @type ^`java.util.Deque` @kind object;
  #L3db298.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3db29e.  v0:= temp @kind object;
  #L3db2a0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3db2a6.  v1:= temp;
  #L3db2a8.  if v1 == 0 then goto L3db2ce;
  #L3db2ac.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3db2b2.  v1:= temp @kind object;
  #L3db2b4.  v1:= (`l.f0.f.c`) v1 @kind object;
  #L3db2b8.  call temp:= `a`(v1, v4, v6) @signature `Ll/f0/f/c;.a:(Ll/a;Ll/c0;)Z` @kind virtual;
  #L3db2be.  v2:= temp;
  #L3db2c0.  if v2 == 0 then goto L3db2a0;
  #L3db2c4.  v4:= 1I;
  #L3db2c6.  call `a`(v5, v1, v4) @signature `Ll/f0/f/g;.a:(Ll/f0/f/c;Z)V` @kind virtual;
  #L3db2cc.  return v1 @kind object;
  #L3db2ce.  v4:= 0I;
  #L3db2d0.  return v4 @kind object;
}
procedure `boolean` `a`(`l.j` v1 @kind this, `l.f0.f.c` v2 @kind object) @signature `Ll/j;.a:(Ll/f0/f/c;)Z` @AccessFlag  {
    temp;
    v0;

  #L3db03c.  v0:= v2.`l.f0.f.c.k` @type ^`boolean` @kind boolean;
  #L3db040.  if v0 != 0 then goto L3db058;
  #L3db044.  v0:= v1.`l.j.a` @type ^`int`;
  #L3db048.  if v0 != 0 then goto L3db04e;
  #L3db04c.  goto L3db058;
  #L3db04e.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L3db054.  v2:= 0I;
  #L3db056.  return v2;
  #L3db058.  v0:= v1.`l.j.d` @type ^`java.util.Deque` @kind object;
  #L3db05c.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L3db062.  v2:= 1I;
  #L3db064.  return v2;
}
procedure `void` `b`(`l.j` v2 @kind this, `l.f0.f.c` v3 @kind object) @signature `Ll/j;.b:(Ll/f0/f/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3db3e0.  v0:= v2.`l.j.f` @type ^`boolean` @kind boolean;
  #L3db3e4.  if v0 != 0 then goto L3db3fc;
  #L3db3e8.  v0:= 1I;
  #L3db3ea.  v2.`l.j.f` @type ^`boolean` := v0 @kind boolean;
  #L3db3ee.  v0:= `@@l.j.g` @type ^`java.util.concurrent.Executor` @kind object;
  #L3db3f2.  v1:= v2.`l.j.c` @type ^`java.lang.Runnable` @kind object;
  #L3db3f6.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L3db3fc.  v0:= v2.`l.j.d` @type ^`java.util.Deque` @kind object;
  #L3db400.  call temp:= `add`(v0, v3) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3db406.  return @kind void;
}
