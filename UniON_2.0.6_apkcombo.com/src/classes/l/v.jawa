record `l.v` @kind class @AccessFlag PUBLIC extends `java.lang.Cloneable` @kind interface, `l.e$a` @kind interface, `l.e0` @kind interface {
  `int` `l.v.A` @AccessFlag FINAL;
  `int` `l.v.B` @AccessFlag FINAL;
  `int` `l.v.C` @AccessFlag FINAL;
  `l.n` `l.v.b` @AccessFlag FINAL;
  `java.net.Proxy` `l.v.c` @AccessFlag FINAL;
  `java.util.List` `l.v.d` @AccessFlag FINAL;
  `java.util.List` `l.v.e` @AccessFlag FINAL;
  `java.util.List` `l.v.f` @AccessFlag FINAL;
  `java.util.List` `l.v.g` @AccessFlag FINAL;
  `l.p$c` `l.v.h` @AccessFlag FINAL;
  `java.net.ProxySelector` `l.v.i` @AccessFlag FINAL;
  `l.m` `l.v.j` @AccessFlag FINAL;
  `l.c` `l.v.k` @AccessFlag FINAL;
  `l.f0.e.d` `l.v.l` @AccessFlag FINAL;
  `javax.net.SocketFactory` `l.v.m` @AccessFlag FINAL;
  `javax.net.ssl.SSLSocketFactory` `l.v.n` @AccessFlag FINAL;
  `l.f0.l.c` `l.v.o` @AccessFlag FINAL;
  `javax.net.ssl.HostnameVerifier` `l.v.p` @AccessFlag FINAL;
  `l.g` `l.v.q` @AccessFlag FINAL;
  `l.b` `l.v.r` @AccessFlag FINAL;
  `l.b` `l.v.s` @AccessFlag FINAL;
  `l.j` `l.v.t` @AccessFlag FINAL;
  `l.o` `l.v.u` @AccessFlag FINAL;
  `boolean` `l.v.v` @AccessFlag FINAL;
  `boolean` `l.v.w` @AccessFlag FINAL;
  `boolean` `l.v.x` @AccessFlag FINAL;
  `int` `l.v.y` @AccessFlag FINAL;
  `int` `l.v.z` @AccessFlag FINAL;
}
global `java.util.List` `@@l.v.D` @AccessFlag STATIC_FINAL;
global `java.util.List` `@@l.v.E` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ll/v;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3df6a8.  v0:= 2I;
  #L3df6aa.  v1:= new `l.w`[v0];
  #L3df6ae.  v2:= `@@l.w.f` @type ^`l.w` @kind object;
  #L3df6b2.  v3:= 0I;
  #L3df6b4.  v1[v3]:= v2 @kind object;
  #L3df6b8.  v2:= `@@l.w.d` @type ^`l.w` @kind object;
  #L3df6bc.  v4:= 1I;
  #L3df6be.  v1[v4]:= v2 @kind object;
  #L3df6c2.  call temp:= `a`(v1) @signature `Ll/f0/c;.a:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L3df6c8.  v1:= temp @kind object;
  #L3df6ca.  `@@l.v.D` @type ^`java.util.List` := v1 @kind object;
  #L3df6ce.  v0:= new `l.k`[v0];
  #L3df6d2.  v1:= `@@l.k.g` @type ^`l.k` @kind object;
  #L3df6d6.  v0[v3]:= v1 @kind object;
  #L3df6da.  v1:= `@@l.k.h` @type ^`l.k` @kind object;
  #L3df6de.  v0[v4]:= v1 @kind object;
  #L3df6e2.  call temp:= `a`(v0) @signature `Ll/f0/c;.a:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L3df6e8.  v0:= temp @kind object;
  #L3df6ea.  `@@l.v.E` @type ^`java.util.List` := v0 @kind object;
  #L3df6ee.  v0:= new `l.v$a`;
  #L3df6f2.  call `<init>`(v0) @signature `Ll/v$a;.<init>:()V` @kind direct;
  #L3df6f8.  `@@l.f0.a.a` @type ^`l.f0.a` := v0 @kind object;
  #L3df6fc.  return @kind void;
}
procedure `void` `<init>`(`l.v` v1 @kind this) @signature `Ll/v;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3df710.  v0:= new `l.v$b`;
  #L3df714.  call `<init>`(v0) @signature `Ll/v$b;.<init>:()V` @kind direct;
  #L3df71a.  call `<init>`(v1, v0) @signature `Ll/v;.<init>:(Ll/v$b;)V` @kind direct;
  #L3df720.  return @kind void;
}
procedure `void` `<init>`(`l.v` v4 @kind this, `l.v$b` v5 @kind object) @signature `Ll/v;.<init>:(Ll/v$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3df734.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3df73a.  v0:= v5.`l.v$b.a` @type ^`l.n` @kind object;
  #L3df73e.  v4.`l.v.b` @type ^`l.n` := v0 @kind object;
  #L3df742.  v0:= v5.`l.v$b.b` @type ^`java.net.Proxy` @kind object;
  #L3df746.  v4.`l.v.c` @type ^`java.net.Proxy` := v0 @kind object;
  #L3df74a.  v0:= v5.`l.v$b.c` @type ^`java.util.List` @kind object;
  #L3df74e.  v4.`l.v.d` @type ^`java.util.List` := v0 @kind object;
  #L3df752.  v0:= v5.`l.v$b.d` @type ^`java.util.List` @kind object;
  #L3df756.  v4.`l.v.e` @type ^`java.util.List` := v0 @kind object;
  #L3df75a.  v0:= v5.`l.v$b.e` @type ^`java.util.List` @kind object;
  #L3df75e.  call temp:= `a`(v0) @signature `Ll/f0/c;.a:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L3df764.  v0:= temp @kind object;
  #L3df766.  v4.`l.v.f` @type ^`java.util.List` := v0 @kind object;
  #L3df76a.  v0:= v5.`l.v$b.f` @type ^`java.util.List` @kind object;
  #L3df76e.  call temp:= `a`(v0) @signature `Ll/f0/c;.a:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L3df774.  v0:= temp @kind object;
  #L3df776.  v4.`l.v.g` @type ^`java.util.List` := v0 @kind object;
  #L3df77a.  v0:= v5.`l.v$b.g` @type ^`l.p$c` @kind object;
  #L3df77e.  v4.`l.v.h` @type ^`l.p$c` := v0 @kind object;
  #L3df782.  v0:= v5.`l.v$b.h` @type ^`java.net.ProxySelector` @kind object;
  #L3df786.  v4.`l.v.i` @type ^`java.net.ProxySelector` := v0 @kind object;
  #L3df78a.  v0:= v5.`l.v$b.i` @type ^`l.m` @kind object;
  #L3df78e.  v4.`l.v.j` @type ^`l.m` := v0 @kind object;
  #L3df792.  v0:= v5.`l.v$b.j` @type ^`l.c` @kind object;
  #L3df796.  v4.`l.v.k` @type ^`l.c` := v0 @kind object;
  #L3df79a.  v0:= v5.`l.v$b.k` @type ^`l.f0.e.d` @kind object;
  #L3df79e.  v4.`l.v.l` @type ^`l.f0.e.d` := v0 @kind object;
  #L3df7a2.  v0:= v5.`l.v$b.l` @type ^`javax.net.SocketFactory` @kind object;
  #L3df7a6.  v4.`l.v.m` @type ^`javax.net.SocketFactory` := v0 @kind object;
  #L3df7aa.  v0:= v4.`l.v.e` @type ^`java.util.List` @kind object;
  #L3df7ae.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3df7b4.  v0:= temp @kind object;
  #L3df7b6.  v1:= 0I;
  #L3df7b8.  v2:= 0I;
  #L3df7ba.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3df7c0.  v3:= temp;
  #L3df7c2.  if v3 == 0 then goto L3df7e6;
  #L3df7c6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3df7cc.  v3:= temp @kind object;
  #L3df7ce.  v3:= (`l.k`) v3 @kind object;
  #L3df7d2.  if v2 != 0 then goto L3df7e2;
  #L3df7d6.  call temp:= `b`(v3) @signature `Ll/k;.b:()Z` @kind virtual;
  #L3df7dc.  v2:= temp;
  #L3df7de.  if v2 == 0 then goto L3df7b8;
  #L3df7e2.  v2:= 1I;
  #L3df7e4.  goto L3df7ba;
  #L3df7e6.  v0:= v5.`l.v$b.m` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L3df7ea.  if v0 != 0 then goto L3df812;
  #L3df7ee.  if v2 != 0 then goto L3df7f4;
  #L3df7f2.  goto L3df812;
  #L3df7f4.  call temp:= `a`() @signature `Ll/f0/c;.a:()Ljavax/net/ssl/X509TrustManager;` @kind static;
  #L3df7fa.  v0:= temp @kind object;
  #L3df7fc.  call temp:= `a`(v0) @signature `Ll/v;.a:(Ljavax/net/ssl/X509TrustManager;)Ljavax/net/ssl/SSLSocketFactory;` @kind static;
  #L3df802.  v1:= temp @kind object;
  #L3df804.  v4.`l.v.n` @type ^`javax.net.ssl.SSLSocketFactory` := v1 @kind object;
  #L3df808.  call temp:= `a`(v0) @signature `Ll/f0/l/c;.a:(Ljavax/net/ssl/X509TrustManager;)Ll/f0/l/c;` @kind static;
  #L3df80e.  v0:= temp @kind object;
  #L3df810.  goto L3df81e;
  #L3df812.  v0:= v5.`l.v$b.m` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L3df816.  v4.`l.v.n` @type ^`javax.net.ssl.SSLSocketFactory` := v0 @kind object;
  #L3df81a.  v0:= v5.`l.v$b.n` @type ^`l.f0.l.c` @kind object;
  #L3df81e.  v4.`l.v.o` @type ^`l.f0.l.c` := v0 @kind object;
  #L3df822.  v0:= v4.`l.v.n` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L3df826.  if v0 == 0 then goto L3df83c;
  #L3df82a.  call temp:= `c`() @signature `Ll/f0/j/f;.c:()Ll/f0/j/f;` @kind static;
  #L3df830.  v0:= temp @kind object;
  #L3df832.  v1:= v4.`l.v.n` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L3df836.  call `a`(v0, v1) @signature `Ll/f0/j/f;.a:(Ljavax/net/ssl/SSLSocketFactory;)V` @kind virtual;
  #L3df83c.  v0:= v5.`l.v$b.o` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L3df840.  v4.`l.v.p` @type ^`javax.net.ssl.HostnameVerifier` := v0 @kind object;
  #L3df844.  v0:= v5.`l.v$b.p` @type ^`l.g` @kind object;
  #L3df848.  v1:= v4.`l.v.o` @type ^`l.f0.l.c` @kind object;
  #L3df84c.  call temp:= `a`(v0, v1) @signature `Ll/g;.a:(Ll/f0/l/c;)Ll/g;` @kind virtual;
  #L3df852.  v0:= temp @kind object;
  #L3df854.  v4.`l.v.q` @type ^`l.g` := v0 @kind object;
  #L3df858.  v0:= v5.`l.v$b.q` @type ^`l.b` @kind object;
  #L3df85c.  v4.`l.v.r` @type ^`l.b` := v0 @kind object;
  #L3df860.  v0:= v5.`l.v$b.r` @type ^`l.b` @kind object;
  #L3df864.  v4.`l.v.s` @type ^`l.b` := v0 @kind object;
  #L3df868.  v0:= v5.`l.v$b.s` @type ^`l.j` @kind object;
  #L3df86c.  v4.`l.v.t` @type ^`l.j` := v0 @kind object;
  #L3df870.  v0:= v5.`l.v$b.t` @type ^`l.o` @kind object;
  #L3df874.  v4.`l.v.u` @type ^`l.o` := v0 @kind object;
  #L3df878.  v0:= v5.`l.v$b.u` @type ^`boolean` @kind boolean;
  #L3df87c.  v4.`l.v.v` @type ^`boolean` := v0 @kind boolean;
  #L3df880.  v0:= v5.`l.v$b.v` @type ^`boolean` @kind boolean;
  #L3df884.  v4.`l.v.w` @type ^`boolean` := v0 @kind boolean;
  #L3df888.  v0:= v5.`l.v$b.w` @type ^`boolean` @kind boolean;
  #L3df88c.  v4.`l.v.x` @type ^`boolean` := v0 @kind boolean;
  #L3df890.  v0:= v5.`l.v$b.x` @type ^`int`;
  #L3df894.  v4.`l.v.y` @type ^`int` := v0;
  #L3df898.  v0:= v5.`l.v$b.y` @type ^`int`;
  #L3df89c.  v4.`l.v.z` @type ^`int` := v0;
  #L3df8a0.  v0:= v5.`l.v$b.z` @type ^`int`;
  #L3df8a4.  v4.`l.v.A` @type ^`int` := v0;
  #L3df8a8.  v0:= v5.`l.v$b.A` @type ^`int`;
  #L3df8ac.  v4.`l.v.B` @type ^`int` := v0;
  #L3df8b0.  v5:= v5.`l.v$b.B` @type ^`int`;
  #L3df8b4.  v4.`l.v.C` @type ^`int` := v5;
  #L3df8b8.  v5:= v4.`l.v.f` @type ^`java.util.List` @kind object;
  #L3df8bc.  v0:= 0I;
  #L3df8be.  call temp:= `contains`(v5, v0) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3df8c4.  v5:= temp;
  #L3df8c6.  if v5 != 0 then goto L3df90e;
  #L3df8ca.  v5:= v4.`l.v.g` @type ^`java.util.List` @kind object;
  #L3df8ce.  call temp:= `contains`(v5, v0) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3df8d4.  v5:= temp;
  #L3df8d6.  if v5 != 0 then goto L3df8dc;
  #L3df8da.  return @kind void;
  #L3df8dc.  v5:= new `java.lang.IllegalStateException`;
  #L3df8e0.  v0:= new `java.lang.StringBuilder`;
  #L3df8e4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3df8ea.  v1:= "Null network interceptor: " @kind object;
  #L3df8ee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3df8f4.  v1:= v4.`l.v.g` @type ^`java.util.List` @kind object;
  #L3df8f8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3df8fe.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3df904.  v0:= temp @kind object;
  #L3df906.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3df90c.  throw v5;
  #L3df90e.  v5:= new `java.lang.IllegalStateException`;
  #L3df912.  v0:= new `java.lang.StringBuilder`;
  #L3df916.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3df91c.  v1:= "Null interceptor: " @kind object;
  #L3df920.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3df926.  v1:= v4.`l.v.f` @type ^`java.util.List` @kind object;
  #L3df92a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3df930.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3df936.  v0:= temp @kind object;
  #L3df938.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3df93e.  throw v5;
}
procedure `javax.net.ssl.SSLSocketFactory` `a`(`javax.net.ssl.X509TrustManager` v3 @kind object) @signature `Ll/v;.a:(Ljavax/net/ssl/X509TrustManager;)Ljavax/net/ssl/SSLSocketFactory;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3df530.  call temp:= `c`() @signature `Ll/f0/j/f;.c:()Ll/f0/j/f;` @kind static;
  #L3df536.  v0:= temp @kind object;
  #L3df538.  call temp:= `a`(v0) @signature `Ll/f0/j/f;.a:()Ljavax/net/ssl/SSLContext;` @kind virtual;
  #L3df53e.  v0:= temp @kind object;
  #L3df540.  v1:= 1I;
  #L3df542.  v1:= new `javax.net.ssl.TrustManager`[v1];
  #L3df546.  v2:= 0I;
  #L3df548.  v1[v2]:= v3 @kind object;
  #L3df54c.  v3:= 0I;
  #L3df54e.  call `init`(v0, v3, v1, v3) @signature `Ljavax/net/ssl/SSLContext;.init:([Ljavax/net/ssl/KeyManager;[Ljavax/net/ssl/TrustManager;Ljava/security/SecureRandom;)V` @kind virtual;
  #L3df554.  call temp:= `getSocketFactory`(v0) @signature `Ljavax/net/ssl/SSLContext;.getSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @kind virtual;
  #L3df55a.  v3:= temp @kind object;
  #L3df55c.  return v3 @kind object;
  #L3df55e.  v3:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L3df560.  v0:= "No System TLS" @kind object;
  #L3df564.  call temp:= `a`(v0, v3) @signature `Ll/f0/c;.a:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L3df56a.  v3:= temp @kind object;
  #L3df56c.  throw v3;
  catch `java.security.GeneralSecurityException` @[L3df530..L3df55c] goto L3df55e;
}
procedure `java.net.Proxy` `A`(`l.v` v1 @kind this) @signature `Ll/v;.A:()Ljava/net/Proxy;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df470.  v0:= v1.`l.v.c` @type ^`java.net.Proxy` @kind object;
  #L3df474.  return v0 @kind object;
}
procedure `l.b` `B`(`l.v` v1 @kind this) @signature `Ll/v;.B:()Ll/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df5c0.  v0:= v1.`l.v.r` @type ^`l.b` @kind object;
  #L3df5c4.  return v0 @kind object;
}
procedure `java.net.ProxySelector` `C`(`l.v` v1 @kind this) @signature `Ll/v;.C:()Ljava/net/ProxySelector;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df488.  v0:= v1.`l.v.i` @type ^`java.net.ProxySelector` @kind object;
  #L3df48c.  return v0 @kind object;
}
procedure `int` `D`(`l.v` v1 @kind this) @signature `Ll/v;.D:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df440.  v0:= v1.`l.v.A` @type ^`int`;
  #L3df444.  return v0;
}
procedure `boolean` `E`(`l.v` v1 @kind this) @signature `Ll/v;.E:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df3e0.  v0:= v1.`l.v.x` @type ^`boolean` @kind boolean;
  #L3df3e4.  return v0;
}
procedure `javax.net.SocketFactory` `F`(`l.v` v1 @kind this) @signature `Ll/v;.F:()Ljavax/net/SocketFactory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df500.  v0:= v1.`l.v.m` @type ^`javax.net.SocketFactory` @kind object;
  #L3df504.  return v0 @kind object;
}
procedure `javax.net.ssl.SSLSocketFactory` `G`(`l.v` v1 @kind this) @signature `Ll/v;.G:()Ljavax/net/ssl/SSLSocketFactory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df590.  v0:= v1.`l.v.n` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L3df594.  return v0 @kind object;
}
procedure `int` `H`(`l.v` v1 @kind this) @signature `Ll/v;.H:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df458.  v0:= v1.`l.v.B` @type ^`int`;
  #L3df45c.  return v0;
}
procedure `l.e` `a`(`l.v` v1 @kind this, `l.y` v2 @kind object) @signature `Ll/v;.a:(Ll/y;)Ll/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df5d8.  v0:= 0I;
  #L3df5da.  call temp:= `a`(v1, v2, v0) @signature `Ll/x;.a:(Ll/v;Ll/y;Z)Ll/x;` @kind static;
  #L3df5e0.  v2:= temp @kind object;
  #L3df5e2.  return v2 @kind object;
}
procedure `l.b` `c`(`l.v` v1 @kind this) @signature `Ll/v;.c:()Ll/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df5a8.  v0:= v1.`l.v.s` @type ^`l.b` @kind object;
  #L3df5ac.  return v0 @kind object;
}
procedure `int` `d`(`l.v` v1 @kind this) @signature `Ll/v;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df3f8.  v0:= v1.`l.v.y` @type ^`int`;
  #L3df3fc.  return v0;
}
procedure `l.g` `e`(`l.v` v1 @kind this) @signature `Ll/v;.e:()Ll/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df5f4.  v0:= v1.`l.v.q` @type ^`l.g` @kind object;
  #L3df5f8.  return v0 @kind object;
}
procedure `int` `f`(`l.v` v1 @kind this) @signature `Ll/v;.f:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df410.  v0:= v1.`l.v.z` @type ^`int`;
  #L3df414.  return v0;
}
procedure `l.j` `g`(`l.v` v1 @kind this) @signature `Ll/v;.g:()Ll/j;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df60c.  v0:= v1.`l.v.t` @type ^`l.j` @kind object;
  #L3df610.  return v0 @kind object;
}
procedure `java.util.List` `h`(`l.v` v1 @kind this) @signature `Ll/v;.h:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df4a0.  v0:= v1.`l.v.e` @type ^`java.util.List` @kind object;
  #L3df4a4.  return v0 @kind object;
}
procedure `l.m` `i`(`l.v` v1 @kind this) @signature `Ll/v;.i:()Ll/m;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df624.  v0:= v1.`l.v.j` @type ^`l.m` @kind object;
  #L3df628.  return v0 @kind object;
}
procedure `l.n` `j`(`l.v` v1 @kind this) @signature `Ll/v;.j:()Ll/n;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df63c.  v0:= v1.`l.v.b` @type ^`l.n` @kind object;
  #L3df640.  return v0 @kind object;
}
procedure `l.o` `q`(`l.v` v1 @kind this) @signature `Ll/v;.q:()Ll/o;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df654.  v0:= v1.`l.v.u` @type ^`l.o` @kind object;
  #L3df658.  return v0 @kind object;
}
procedure `l.p$c` `r`(`l.v` v1 @kind this) @signature `Ll/v;.r:()Ll/p$c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df66c.  v0:= v1.`l.v.h` @type ^`l.p$c` @kind object;
  #L3df670.  return v0 @kind object;
}
procedure `boolean` `s`(`l.v` v1 @kind this) @signature `Ll/v;.s:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df3b0.  v0:= v1.`l.v.w` @type ^`boolean` @kind boolean;
  #L3df3b4.  return v0;
}
procedure `boolean` `t`(`l.v` v1 @kind this) @signature `Ll/v;.t:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df3c8.  v0:= v1.`l.v.v` @type ^`boolean` @kind boolean;
  #L3df3cc.  return v0;
}
procedure `javax.net.ssl.HostnameVerifier` `u`(`l.v` v1 @kind this) @signature `Ll/v;.u:()Ljavax/net/ssl/HostnameVerifier;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df518.  v0:= v1.`l.v.p` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L3df51c.  return v0 @kind object;
}
procedure `java.util.List` `v`(`l.v` v1 @kind this) @signature `Ll/v;.v:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df4b8.  v0:= v1.`l.v.f` @type ^`java.util.List` @kind object;
  #L3df4bc.  return v0 @kind object;
}
procedure `l.f0.e.d` `w`(`l.v` v1 @kind this) @signature `Ll/v;.w:()Ll/f0/e/d;` @AccessFlag  {
    temp;
    v0;

  #L3df684.  v0:= v1.`l.v.k` @type ^`l.c` @kind object;
  #L3df688.  if v0 == 0 then goto L3df692;
  #L3df68c.  v0:= v0.`l.c.b` @type ^`l.f0.e.d` @kind object;
  #L3df690.  goto L3df696;
  #L3df692.  v0:= v1.`l.v.l` @type ^`l.f0.e.d` @kind object;
  #L3df696.  return v0 @kind object;
}
procedure `java.util.List` `x`(`l.v` v1 @kind this) @signature `Ll/v;.x:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df4d0.  v0:= v1.`l.v.g` @type ^`java.util.List` @kind object;
  #L3df4d4.  return v0 @kind object;
}
procedure `int` `y`(`l.v` v1 @kind this) @signature `Ll/v;.y:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df428.  v0:= v1.`l.v.C` @type ^`int`;
  #L3df42c.  return v0;
}
procedure `java.util.List` `z`(`l.v` v1 @kind this) @signature `Ll/v;.z:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df4e8.  v0:= v1.`l.v.d` @type ^`java.util.List` @kind object;
  #L3df4ec.  return v0 @kind object;
}
