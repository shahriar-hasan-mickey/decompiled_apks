record `l.n` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `l.n.a` @AccessFlag PRIVATE;
  `int` `l.n.b` @AccessFlag PRIVATE;
  `java.lang.Runnable` `l.n.c` @AccessFlag PRIVATE;
  `java.util.concurrent.ExecutorService` `l.n.d` @AccessFlag PRIVATE;
  `java.util.Deque` `l.n.e` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `l.n.f` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `l.n.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`l.n` v1 @kind this) @signature `Ll/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3dc888.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dc88e.  v0:= 64I;
  #L3dc892.  v1.`l.n.a` @type ^`int` := v0;
  #L3dc896.  v0:= 5I;
  #L3dc898.  v1.`l.n.b` @type ^`int` := v0;
  #L3dc89c.  v0:= new `java.util.ArrayDeque`;
  #L3dc8a0.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L3dc8a6.  v1.`l.n.e` @type ^`java.util.Deque` := v0 @kind object;
  #L3dc8aa.  v0:= new `java.util.ArrayDeque`;
  #L3dc8ae.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L3dc8b4.  v1.`l.n.f` @type ^`java.util.Deque` := v0 @kind object;
  #L3dc8b8.  v0:= new `java.util.ArrayDeque`;
  #L3dc8bc.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L3dc8c2.  v1.`l.n.g` @type ^`java.util.Deque` := v0 @kind object;
  #L3dc8c6.  return @kind void;
}
procedure `void` `a`(`l.n` v0 @kind this, `java.util.Deque` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Ll/n;.a:(Ljava/util/Deque;Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;

  #L3dc9c8.  @monitorenter v0
  #L3dc9ca.  call temp:= `remove`(v1, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L3dc9d0.  v1:= temp;
  #L3dc9d2.  if v1 == 0 then goto L3dc9f4;
  #L3dc9d6.  v1:= v0.`l.n.c` @type ^`java.lang.Runnable` @kind object;
  #L3dc9da.  @monitorexit v0
  #L3dc9dc.  call temp:= `d`(v0) @signature `Ll/n;.d:()Z` @kind direct;
  #L3dc9e2.  v2:= temp;
  #L3dc9e4.  if v2 != 0 then goto L3dc9f2;
  #L3dc9e8.  if v1 == 0 then goto L3dc9f2;
  #L3dc9ec.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L3dc9f2.  return @kind void;
  #L3dc9f4.  v1:= new `java.lang.AssertionError`;
  #L3dc9f8.  v2:= "Call wasn't in-flight!" @kind object;
  #L3dc9fc.  call `<init>`(v1, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3dca02.  throw v1;
  #L3dca04.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dca06.  @monitorexit v0
  #L3dca08.  throw v1;
  catch `java.lang.Throwable` @[L3dc9ca..L3dc9dc] goto L3dca04;
  catch `java.lang.Throwable` @[L3dc9f4..L3dca08] goto L3dca04;
}
procedure `int` `b`(`l.n` v4 @kind this, `l.x$b` v5 @kind object) @signature `Ll/n;.b:(Ll/x$b;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3dc7b0.  v0:= v4.`l.n.f` @type ^`java.util.Deque` @kind object;
  #L3dc7b4.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3dc7ba.  v0:= temp @kind object;
  #L3dc7bc.  v1:= 0I;
  #L3dc7be.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dc7c4.  v2:= temp;
  #L3dc7c6.  if v2 == 0 then goto L3dc80a;
  #L3dc7ca.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dc7d0.  v2:= temp @kind object;
  #L3dc7d2.  v2:= (`l.x$b`) v2 @kind object;
  #L3dc7d6.  call temp:= `c`(v2) @signature `Ll/x$b;.c:()Ll/x;` @kind virtual;
  #L3dc7dc.  v3:= temp @kind object;
  #L3dc7de.  v3:= v3.`l.x.g` @type ^`boolean` @kind boolean;
  #L3dc7e2.  if v3 == 0 then goto L3dc7e8;
  #L3dc7e6.  goto L3dc7be;
  #L3dc7e8.  call temp:= `d`(v2) @signature `Ll/x$b;.d:()Ljava/lang/String;` @kind virtual;
  #L3dc7ee.  v2:= temp @kind object;
  #L3dc7f0.  call temp:= `d`(v5) @signature `Ll/x$b;.d:()Ljava/lang/String;` @kind virtual;
  #L3dc7f6.  v3:= temp @kind object;
  #L3dc7f8.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3dc7fe.  v2:= temp;
  #L3dc800.  if v2 == 0 then goto L3dc7be;
  #L3dc804.  v1:= v1 + 1;
  #L3dc808.  goto L3dc7be;
  #L3dc80a.  return v1;
}
procedure `boolean` `d`(`l.n` v6 @kind this) @signature `Ll/n;.d:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3dc68c.  v0:= new `java.util.ArrayList`;
  #L3dc690.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3dc696.  @monitorenter v6
  #L3dc698.  v1:= v6.`l.n.e` @type ^`java.util.Deque` @kind object;
  #L3dc69c.  call temp:= `iterator`(v1) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3dc6a2.  v1:= temp @kind object;
  #L3dc6a4.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dc6aa.  v2:= temp;
  #L3dc6ac.  if v2 == 0 then goto L3dc6fc;
  #L3dc6b0.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dc6b6.  v2:= temp @kind object;
  #L3dc6b8.  v2:= (`l.x$b`) v2 @kind object;
  #L3dc6bc.  v3:= v6.`l.n.f` @type ^`java.util.Deque` @kind object;
  #L3dc6c0.  call temp:= `size`(v3) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L3dc6c6.  v3:= temp;
  #L3dc6c8.  v4:= v6.`l.n.a` @type ^`int`;
  #L3dc6cc.  if v3 < v4 then goto L3dc6d2;
  #L3dc6d0.  goto L3dc6fc;
  #L3dc6d2.  call temp:= `b`(v6, v2) @signature `Ll/n;.b:(Ll/x$b;)I` @kind direct;
  #L3dc6d8.  v3:= temp;
  #L3dc6da.  v4:= v6.`l.n.b` @type ^`int`;
  #L3dc6de.  if v3 < v4 then goto L3dc6e4;
  #L3dc6e2.  goto L3dc6a4;
  #L3dc6e4.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L3dc6ea.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3dc6f0.  v3:= v6.`l.n.f` @type ^`java.util.Deque` @kind object;
  #L3dc6f4.  call temp:= `add`(v3, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3dc6fa.  goto L3dc6a4;
  #L3dc6fc.  call temp:= `c`(v6) @signature `Ll/n;.c:()I` @kind virtual;
  #L3dc702.  v1:= temp;
  #L3dc704.  v2:= 0I;
  #L3dc706.  if v1 <= 0 then goto L3dc70e;
  #L3dc70a.  v1:= 1I;
  #L3dc70c.  goto L3dc710;
  #L3dc70e.  v1:= 0I;
  #L3dc710.  @monitorexit v6
  #L3dc712.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3dc718.  v3:= temp;
  #L3dc71a.  if v2 >= v3 then goto L3dc73e;
  #L3dc71e.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3dc724.  v4:= temp @kind object;
  #L3dc726.  v4:= (`l.x$b`) v4 @kind object;
  #L3dc72a.  call temp:= `b`(v6) @signature `Ll/n;.b:()Ljava/util/concurrent/ExecutorService;` @kind virtual;
  #L3dc730.  v5:= temp @kind object;
  #L3dc732.  call `a`(v4, v5) @signature `Ll/x$b;.a:(Ljava/util/concurrent/ExecutorService;)V` @kind virtual;
  #L3dc738.  v2:= v2 + 1;
  #L3dc73c.  goto L3dc71a;
  #L3dc73e.  return v1;
  #L3dc740.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dc742.  @monitorexit v6
  #L3dc744.  throw v0;
  catch `java.lang.Throwable` @[L3dc698..L3dc712] goto L3dc740;
  catch `java.lang.Throwable` @[L3dc742..L3dc744] goto L3dc740;
}
procedure `void` `a`(`l.n` v2 @kind this) @signature `Ll/n;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dc8d8.  @monitorenter v2
  #L3dc8da.  v0:= v2.`l.n.e` @type ^`java.util.Deque` @kind object;
  #L3dc8de.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3dc8e4.  v0:= temp @kind object;
  #L3dc8e6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dc8ec.  v1:= temp;
  #L3dc8ee.  if v1 == 0 then goto L3dc90e;
  #L3dc8f2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dc8f8.  v1:= temp @kind object;
  #L3dc8fa.  v1:= (`l.x$b`) v1 @kind object;
  #L3dc8fe.  call temp:= `c`(v1) @signature `Ll/x$b;.c:()Ll/x;` @kind virtual;
  #L3dc904.  v1:= temp @kind object;
  #L3dc906.  call `a`(v1) @signature `Ll/x;.a:()V` @kind virtual;
  #L3dc90c.  goto L3dc8e6;
  #L3dc90e.  v0:= v2.`l.n.f` @type ^`java.util.Deque` @kind object;
  #L3dc912.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3dc918.  v0:= temp @kind object;
  #L3dc91a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dc920.  v1:= temp;
  #L3dc922.  if v1 == 0 then goto L3dc942;
  #L3dc926.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dc92c.  v1:= temp @kind object;
  #L3dc92e.  v1:= (`l.x$b`) v1 @kind object;
  #L3dc932.  call temp:= `c`(v1) @signature `Ll/x$b;.c:()Ll/x;` @kind virtual;
  #L3dc938.  v1:= temp @kind object;
  #L3dc93a.  call `a`(v1) @signature `Ll/x;.a:()V` @kind virtual;
  #L3dc940.  goto L3dc91a;
  #L3dc942.  v0:= v2.`l.n.g` @type ^`java.util.Deque` @kind object;
  #L3dc946.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3dc94c.  v0:= temp @kind object;
  #L3dc94e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dc954.  v1:= temp;
  #L3dc956.  if v1 == 0 then goto L3dc96e;
  #L3dc95a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dc960.  v1:= temp @kind object;
  #L3dc962.  v1:= (`l.x`) v1 @kind object;
  #L3dc966.  call `a`(v1) @signature `Ll/x;.a:()V` @kind virtual;
  #L3dc96c.  goto L3dc94e;
  #L3dc96e.  @monitorexit v2
  #L3dc970.  return @kind void;
  #L3dc972.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dc974.  @monitorexit v2
  #L3dc976.  throw v0;
  catch `java.lang.Throwable` @[L3dc8da..L3dc96c] goto L3dc972;
}
procedure `void` `a`(`l.n` v1 @kind this, `l.x$b` v2 @kind object) @signature `Ll/n;.a:(Ll/x$b;)V` @AccessFlag  {
    temp;
    v0;

  #L3dca30.  v0:= v1.`l.n.f` @type ^`java.util.Deque` @kind object;
  #L3dca34.  call `a`(v1, v0, v2) @signature `Ll/n;.a:(Ljava/util/Deque;Ljava/lang/Object;)V` @kind direct;
  #L3dca3a.  return @kind void;
}
procedure `void` `a`(`l.n` v1 @kind this, `l.x` v2 @kind object) @signature `Ll/n;.a:(Ll/x;)V` @AccessFlag  {
    temp;
    v0;

  #L3dc994.  @monitorenter v1
  #L3dc996.  v0:= v1.`l.n.g` @type ^`java.util.Deque` @kind object;
  #L3dc99a.  call temp:= `add`(v0, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3dc9a0.  @monitorexit v1
  #L3dc9a2.  return @kind void;
  #L3dc9a4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dc9a6.  @monitorexit v1
  #L3dc9a8.  throw v2;
  catch `java.lang.Throwable` @[L3dc996..L3dc9a0] goto L3dc9a4;
}
procedure `java.util.concurrent.ExecutorService` `b`(`l.n` v9 @kind this) @signature `Ll/n;.b:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3dc81c.  @monitorenter v9
  #L3dc81e.  v0:= v9.`l.n.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L3dc822.  if v0 != 0 then goto L3dc85e;
  #L3dc826.  v0:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L3dc82a.  v2:= 0I;
  #L3dc82c.  v3:= 2147483647I;
  #L3dc832.  v4:= 60L;
  #L3dc836.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3dc83a.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L3dc83e.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L3dc844.  v1:= "OkHttp Dispatcher" @kind object;
  #L3dc848.  v8:= 0I;
  #L3dc84a.  call temp:= `a`(v1, v8) @signature `Ll/f0/c;.a:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L3dc850.  v8:= temp @kind object;
  #L3dc852.  v1:= v0 @kind object;
  #L3dc854.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L3dc85a.  v9.`l.n.d` @type ^`java.util.concurrent.ExecutorService` := v0 @kind object;
  #L3dc85e.  v0:= v9.`l.n.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L3dc862.  @monitorexit v9
  #L3dc864.  return v0 @kind object;
  #L3dc866.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dc868.  @monitorexit v9
  #L3dc86a.  throw v0;
  catch `java.lang.Throwable` @[L3dc81e..L3dc862] goto L3dc866;
}
procedure `void` `b`(`l.n` v1 @kind this, `l.x` v2 @kind object) @signature `Ll/n;.b:(Ll/x;)V` @AccessFlag  {
    temp;
    v0;

  #L3dca4c.  v0:= v1.`l.n.g` @type ^`java.util.Deque` @kind object;
  #L3dca50.  call `a`(v1, v0, v2) @signature `Ll/n;.a:(Ljava/util/Deque;Ljava/lang/Object;)V` @kind direct;
  #L3dca56.  return @kind void;
}
procedure `int` `c`(`l.n` v2 @kind this) @signature `Ll/n;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dc76c.  @monitorenter v2
  #L3dc76e.  v0:= v2.`l.n.f` @type ^`java.util.Deque` @kind object;
  #L3dc772.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L3dc778.  v0:= temp;
  #L3dc77a.  v1:= v2.`l.n.g` @type ^`java.util.Deque` @kind object;
  #L3dc77e.  call temp:= `size`(v1) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L3dc784.  v1:= temp;
  #L3dc786.  v0:= v0 + v1 @kind int;
  #L3dc788.  @monitorexit v2
  #L3dc78a.  return v0;
  #L3dc78c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dc78e.  @monitorexit v2
  #L3dc790.  throw v0;
  catch `java.lang.Throwable` @[L3dc76e..L3dc786] goto L3dc78c;
}
