record `l.g$b` @kind class @AccessFlag FINAL {
  `java.lang.String` `l.g$b.a` @AccessFlag FINAL;
  `java.lang.String` `l.g$b.b` @AccessFlag FINAL;
  `java.lang.String` `l.g$b.c` @AccessFlag FINAL;
  `m.f` `l.g$b.d` @AccessFlag FINAL;
}
procedure `boolean` `a`(`l.g$b` v10 @kind this, `java.lang.String` v11 @kind object) @signature `Ll/g$b;.a:(Ljava/lang/String;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3da0a4.  v0:= v10.`l.g$b.a` @type ^`java.lang.String` @kind object;
  #L3da0a8.  v1:= "*." @kind object;
  #L3da0ac.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3da0b2.  v0:= temp;
  #L3da0b4.  if v0 == 0 then goto L3da10a;
  #L3da0b8.  v0:= 46I;
  #L3da0bc.  call temp:= `indexOf`(v11, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L3da0c2.  v0:= temp;
  #L3da0c4.  call temp:= `length`(v11) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3da0ca.  v1:= temp;
  #L3da0cc.  v1:= v1 - v0 @kind int;
  #L3da0ce.  v2:= 1I;
  #L3da0d0.  v1:= v1 - v2 @kind int;
  #L3da0d2.  v3:= v10.`l.g$b.b` @type ^`java.lang.String` @kind object;
  #L3da0d6.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3da0dc.  v3:= temp;
  #L3da0de.  if v1 != v3 then goto L3da106;
  #L3da0e2.  v5:= 0I;
  #L3da0e4.  v6:= v0 + 1;
  #L3da0e8.  v7:= v10.`l.g$b.b` @type ^`java.lang.String` @kind object;
  #L3da0ec.  v8:= 0I;
  #L3da0ee.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3da0f4.  v9:= temp;
  #L3da0f6.  v4:= v11 @kind object;
  #L3da0f8.  call temp:= `regionMatches`(v4, v5, v6, v7, v8, v9) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L3da0fe.  v11:= temp;
  #L3da100.  if v11 == 0 then goto L3da106;
  #L3da104.  goto L3da108;
  #L3da106.  v2:= 0I;
  #L3da108.  return v2;
  #L3da10a.  v0:= v10.`l.g$b.b` @type ^`java.lang.String` @kind object;
  #L3da10e.  call temp:= `equals`(v11, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3da114.  v11:= temp;
  #L3da116.  return v11;
}
procedure `boolean` `equals`(`l.g$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Ll/g$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3da044.  v0:= instanceof @variable v3 @type ^`l.g$b` @kind boolean;
  #L3da048.  if v0 == 0 then goto L3da090;
  #L3da04c.  v0:= v2.`l.g$b.a` @type ^`java.lang.String` @kind object;
  #L3da050.  v3:= (`l.g$b`) v3 @kind object;
  #L3da054.  v1:= v3.`l.g$b.a` @type ^`java.lang.String` @kind object;
  #L3da058.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3da05e.  v0:= temp;
  #L3da060.  if v0 == 0 then goto L3da090;
  #L3da064.  v0:= v2.`l.g$b.c` @type ^`java.lang.String` @kind object;
  #L3da068.  v1:= v3.`l.g$b.c` @type ^`java.lang.String` @kind object;
  #L3da06c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3da072.  v0:= temp;
  #L3da074.  if v0 == 0 then goto L3da090;
  #L3da078.  v0:= v2.`l.g$b.d` @type ^`m.f` @kind object;
  #L3da07c.  v3:= v3.`l.g$b.d` @type ^`m.f` @kind object;
  #L3da080.  call temp:= `equals`(v0, v3) @signature `Lm/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3da086.  v3:= temp;
  #L3da088.  if v3 == 0 then goto L3da090;
  #L3da08c.  v3:= 1I;
  #L3da08e.  goto L3da092;
  #L3da090.  v3:= 0I;
  #L3da092.  return v3;
}
procedure `int` `hashCode`(`l.g$b` v2 @kind this) @signature `Ll/g$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3da128.  v0:= v2.`l.g$b.a` @type ^`java.lang.String` @kind object;
  #L3da12c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L3da132.  v0:= temp;
  #L3da134.  v1:= 527I;
  #L3da138.  v1:= v1 + v0 @kind int;
  #L3da13a.  v1:= v1 * 31;
  #L3da13e.  v0:= v2.`l.g$b.c` @type ^`java.lang.String` @kind object;
  #L3da142.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L3da148.  v0:= temp;
  #L3da14a.  v1:= v1 + v0 @kind int;
  #L3da14c.  v1:= v1 * 31;
  #L3da150.  v0:= v2.`l.g$b.d` @type ^`m.f` @kind object;
  #L3da154.  call temp:= `hashCode`(v0) @signature `Lm/f;.hashCode:()I` @kind virtual;
  #L3da15a.  v0:= temp;
  #L3da15c.  v1:= v1 + v0 @kind int;
  #L3da15e.  return v1;
}
procedure `java.lang.String` `toString`(`l.g$b` v2 @kind this) @signature `Ll/g$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3da170.  v0:= new `java.lang.StringBuilder`;
  #L3da174.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3da17a.  v1:= v2.`l.g$b.c` @type ^`java.lang.String` @kind object;
  #L3da17e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3da184.  v1:= v2.`l.g$b.d` @type ^`m.f` @kind object;
  #L3da188.  call temp:= `b`(v1) @signature `Lm/f;.b:()Ljava/lang/String;` @kind virtual;
  #L3da18e.  v1:= temp @kind object;
  #L3da190.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3da196.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3da19c.  v0:= temp @kind object;
  #L3da19e.  return v0 @kind object;
}
