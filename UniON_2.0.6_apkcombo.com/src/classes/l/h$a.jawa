record `l.h$a` @kind class @AccessFlag  extends `java.util.Comparator` @kind interface {
}
procedure `void` `<init>`(`l.h$a` v0 @kind this) @signature `Ll/h$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3da668.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3da66e.  return @kind void;
}
procedure `int` `a`(`l.h$a` v6 @kind this, `java.lang.String` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Ll/h$a;.a:(Ljava/lang/String;Ljava/lang/String;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3da5f0.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3da5f6.  v0:= temp;
  #L3da5f8.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3da5fe.  v1:= temp;
  #L3da600.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3da606.  v0:= temp;
  #L3da608.  v1:= 4I;
  #L3da60a.  v2:= -1I;
  #L3da60c.  v3:= 1I;
  #L3da60e.  if v1 >= v0 then goto L3da636;
  #L3da612.  call temp:= `charAt`(v7, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3da618.  v4:= temp;
  #L3da61a.  call temp:= `charAt`(v8, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3da620.  v5:= temp;
  #L3da622.  if v4 == v5 then goto L3da630;
  #L3da626.  if v4 >= v5 then goto L3da62c;
  #L3da62a.  goto L3da62e;
  #L3da62c.  v2:= 1I;
  #L3da62e.  return v2;
  #L3da630.  v1:= v1 + 1;
  #L3da634.  goto L3da60a;
  #L3da636.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3da63c.  v7:= temp;
  #L3da63e.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3da644.  v8:= temp;
  #L3da646.  if v7 == v8 then goto L3da654;
  #L3da64a.  if v7 >= v8 then goto L3da650;
  #L3da64e.  goto L3da652;
  #L3da650.  v2:= 1I;
  #L3da652.  return v2;
  #L3da654.  v7:= 0I;
  #L3da656.  return v7;
}
procedure `int` `compare`(`l.h$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Ll/h$a;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3da5cc.  v1:= (`java.lang.String`) v1 @kind object;
  #L3da5d0.  v2:= (`java.lang.String`) v2 @kind object;
  #L3da5d4.  call temp:= `a`(v0, v1, v2) @signature `Ll/h$a;.a:(Ljava/lang/String;Ljava/lang/String;)I` @kind virtual;
  #L3da5da.  v1:= temp;
  #L3da5dc.  return v1;
}
