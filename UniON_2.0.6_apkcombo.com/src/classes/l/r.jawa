record `l.r` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `l.r.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`l.r` v1 @kind this, `l.r$a` v2 @kind object) @signature `Ll/r;.<init>:(Ll/r$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3dd314.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dd31a.  v2:= v2.`l.r$a.a` @type ^`java.util.List` @kind object;
  #L3dd31e.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3dd324.  v0:= temp;
  #L3dd326.  v0:= new `java.lang.String`[v0];
  #L3dd32a.  call temp:= `toArray`(v2, v0) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L3dd330.  v2:= temp @kind object;
  #L3dd332.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L3dd336.  v1.`l.r.a` @type ^`java.lang.String`[] := v2 @kind object;
  #L3dd33a.  return @kind void;
}
procedure `java.lang.String` `a`(`java.lang.String`[] v2 @kind object, `java.lang.String` v3 @kind object) @signature `Ll/r;.a:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L3dd18c.  v0:= length @variable v2;
  #L3dd18e.  v0:= v0 + -2;
  #L3dd192.  if v0 < 0 then goto L3dd1b6;
  #L3dd196.  v1:= v2[v0] @kind object;
  #L3dd19a.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L3dd1a0.  v1:= temp;
  #L3dd1a2.  if v1 == 0 then goto L3dd1b0;
  #L3dd1a6.  v0:= v0 + 1;
  #L3dd1aa.  v2:= v2[v0] @kind object;
  #L3dd1ae.  return v2 @kind object;
  #L3dd1b0.  v0:= v0 + -2;
  #L3dd1b4.  goto L3dd192;
  #L3dd1b6.  v2:= 0I;
  #L3dd1b8.  return v2 @kind object;
}
procedure `void` `a`(`java.lang.String` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Ll/r;.a:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3dd3fc.  if v5 == 0 then goto L3dd47c;
  #L3dd400.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3dd406.  v0:= temp;
  #L3dd408.  v1:= 0I;
  #L3dd40a.  v2:= 0I;
  #L3dd40c.  if v2 >= v0 then goto L3dd47a;
  #L3dd410.  call temp:= `charAt`(v5, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3dd416.  v3:= temp;
  #L3dd418.  v4:= 31I;
  #L3dd41c.  if v3 > v4 then goto L3dd428;
  #L3dd420.  v4:= 9I;
  #L3dd424.  if v3 != v4 then goto L3dd436;
  #L3dd428.  v4:= 127I;
  #L3dd42c.  if v3 >= v4 then goto L3dd436;
  #L3dd430.  v2:= v2 + 1;
  #L3dd434.  goto L3dd40c;
  #L3dd436.  v0:= new `java.lang.IllegalArgumentException`;
  #L3dd43a.  v4:= 4I;
  #L3dd43c.  v4:= new `java.lang.Object`[v4];
  #L3dd440.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3dd446.  v3:= temp @kind object;
  #L3dd448.  v4[v1]:= v3 @kind object;
  #L3dd44c.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3dd452.  v1:= temp @kind object;
  #L3dd454.  v2:= 1I;
  #L3dd456.  v4[v2]:= v1 @kind object;
  #L3dd45a.  v1:= 2I;
  #L3dd45c.  v4[v1]:= v6 @kind object;
  #L3dd460.  v6:= 3I;
  #L3dd462.  v4[v6]:= v5 @kind object;
  #L3dd466.  v5:= "Unexpected char %#04x at %d in %s value: %s" @kind object;
  #L3dd46a.  call temp:= `a`(v5, v4) @signature `Ll/f0/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3dd470.  v5:= temp @kind object;
  #L3dd472.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3dd478.  throw v0;
  #L3dd47a.  return @kind void;
  #L3dd47c.  v5:= new `java.lang.NullPointerException`;
  #L3dd480.  v0:= new `java.lang.StringBuilder`;
  #L3dd484.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3dd48a.  v1:= "value for name " @kind object;
  #L3dd48e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd494.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd49a.  v6:= " == null" @kind object;
  #L3dd49e.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd4a4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3dd4aa.  v6:= temp @kind object;
  #L3dd4ac.  call `<init>`(v5, v6) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3dd4b2.  throw v5;
}
procedure `void` `c`(`java.lang.String` v5 @kind object) @signature `Ll/r;.c:(Ljava/lang/String;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3dd34c.  if v5 == 0 then goto L3dd3da;
  #L3dd350.  call temp:= `isEmpty`(v5) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L3dd356.  v0:= temp;
  #L3dd358.  if v0 != 0 then goto L3dd3ca;
  #L3dd35c.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3dd362.  v0:= temp;
  #L3dd364.  v1:= 0I;
  #L3dd366.  v2:= 0I;
  #L3dd368.  if v2 >= v0 then goto L3dd3c8;
  #L3dd36c.  call temp:= `charAt`(v5, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3dd372.  v3:= temp;
  #L3dd374.  v4:= 32I;
  #L3dd378.  if v3 <= v4 then goto L3dd38a;
  #L3dd37c.  v4:= 127I;
  #L3dd380.  if v3 >= v4 then goto L3dd38a;
  #L3dd384.  v2:= v2 + 1;
  #L3dd388.  goto L3dd368;
  #L3dd38a.  v0:= new `java.lang.IllegalArgumentException`;
  #L3dd38e.  v4:= 3I;
  #L3dd390.  v4:= new `java.lang.Object`[v4];
  #L3dd394.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3dd39a.  v3:= temp @kind object;
  #L3dd39c.  v4[v1]:= v3 @kind object;
  #L3dd3a0.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3dd3a6.  v1:= temp @kind object;
  #L3dd3a8.  v2:= 1I;
  #L3dd3aa.  v4[v2]:= v1 @kind object;
  #L3dd3ae.  v1:= 2I;
  #L3dd3b0.  v4[v1]:= v5 @kind object;
  #L3dd3b4.  v5:= "Unexpected char %#04x at %d in header name: %s" @kind object;
  #L3dd3b8.  call temp:= `a`(v5, v4) @signature `Ll/f0/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3dd3be.  v5:= temp @kind object;
  #L3dd3c0.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3dd3c6.  throw v0;
  #L3dd3c8.  return @kind void;
  #L3dd3ca.  v5:= new `java.lang.IllegalArgumentException`;
  #L3dd3ce.  v0:= "name is empty" @kind object;
  #L3dd3d2.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3dd3d8.  throw v5;
  #L3dd3da.  v5:= new `java.lang.NullPointerException`;
  #L3dd3de.  v0:= "name == null" @kind object;
  #L3dd3e2.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3dd3e8.  throw v5;
}
procedure `java.lang.String` `a`(`l.r` v1 @kind this, `int` v2 ) @signature `Ll/r;.a:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dd1cc.  v0:= v1.`l.r.a` @type ^`java.lang.String`[] @kind object;
  #L3dd1d0.  v2:= v2 * 2;
  #L3dd1d4.  v2:= v0[v2] @kind object;
  #L3dd1d8.  return v2 @kind object;
}
procedure `java.lang.String` `a`(`l.r` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Ll/r;.a:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dd16c.  v0:= v1.`l.r.a` @type ^`java.lang.String`[] @kind object;
  #L3dd170.  call temp:= `a`(v0, v2) @signature `Ll/r;.a:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3dd176.  v2:= temp @kind object;
  #L3dd178.  return v2 @kind object;
}
procedure `l.r$a` `a`(`l.r` v3 @kind this) @signature `Ll/r;.a:()Ll/r$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3dd2e8.  v0:= new `l.r$a`;
  #L3dd2ec.  call `<init>`(v0) @signature `Ll/r$a;.<init>:()V` @kind direct;
  #L3dd2f2.  v1:= v0.`l.r$a.a` @type ^`java.util.List` @kind object;
  #L3dd2f6.  v2:= v3.`l.r.a` @type ^`java.lang.String`[] @kind object;
  #L3dd2fa.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/Collections;.addAll:(Ljava/util/Collection;[Ljava/lang/Object;)Z` @kind static;
  #L3dd300.  return v0 @kind object;
}
procedure `int` `b`(`l.r` v1 @kind this) @signature `Ll/r;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dd150.  v0:= v1.`l.r.a` @type ^`java.lang.String`[] @kind object;
  #L3dd154.  v0:= length @variable v0;
  #L3dd156.  v0:= v0 / 2;
  #L3dd15a.  return v0;
}
procedure `java.lang.String` `b`(`l.r` v1 @kind this, `int` v2 ) @signature `Ll/r;.b:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dd254.  v0:= v1.`l.r.a` @type ^`java.lang.String`[] @kind object;
  #L3dd258.  v2:= v2 * 2;
  #L3dd25c.  v2:= v2 + 1;
  #L3dd260.  v2:= v0[v2] @kind object;
  #L3dd264.  return v2 @kind object;
}
procedure `java.util.List` `b`(`l.r` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Ll/r;.b:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3dd278.  call temp:= `b`(v4) @signature `Ll/r;.b:()I` @kind virtual;
  #L3dd27e.  v0:= temp;
  #L3dd280.  v1:= 0I;
  #L3dd282.  v2:= 0I;
  #L3dd284.  if v2 >= v0 then goto L3dd2c0;
  #L3dd288.  call temp:= `a`(v4, v2) @signature `Ll/r;.a:(I)Ljava/lang/String;` @kind virtual;
  #L3dd28e.  v3:= temp @kind object;
  #L3dd290.  call temp:= `equalsIgnoreCase`(v5, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L3dd296.  v3:= temp;
  #L3dd298.  if v3 == 0 then goto L3dd2ba;
  #L3dd29c.  if v1 != 0 then goto L3dd2ac;
  #L3dd2a0.  v1:= new `java.util.ArrayList`;
  #L3dd2a4.  v3:= 2I;
  #L3dd2a6.  call `<init>`(v1, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3dd2ac.  call temp:= `b`(v4, v2) @signature `Ll/r;.b:(I)Ljava/lang/String;` @kind virtual;
  #L3dd2b2.  v3:= temp @kind object;
  #L3dd2b4.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3dd2ba.  v2:= v2 + 1;
  #L3dd2be.  goto L3dd284;
  #L3dd2c0.  if v1 == 0 then goto L3dd2ce;
  #L3dd2c4.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L3dd2ca.  v5:= temp @kind object;
  #L3dd2cc.  goto L3dd2d6;
  #L3dd2ce.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L3dd2d4.  v5:= temp @kind object;
  #L3dd2d6.  return v5 @kind object;
}
procedure `boolean` `equals`(`l.r` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ll/r;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dd0f8.  v0:= instanceof @variable v2 @type ^`l.r` @kind boolean;
  #L3dd0fc.  if v0 == 0 then goto L3dd11c;
  #L3dd100.  v2:= (`l.r`) v2 @kind object;
  #L3dd104.  v2:= v2.`l.r.a` @type ^`java.lang.String`[] @kind object;
  #L3dd108.  v0:= v1.`l.r.a` @type ^`java.lang.String`[] @kind object;
  #L3dd10c.  call temp:= `equals`(v2, v0) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L3dd112.  v2:= temp;
  #L3dd114.  if v2 == 0 then goto L3dd11c;
  #L3dd118.  v2:= 1I;
  #L3dd11a.  goto L3dd11e;
  #L3dd11c.  v2:= 0I;
  #L3dd11e.  return v2;
}
procedure `int` `hashCode`(`l.r` v1 @kind this) @signature `Ll/r;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dd130.  v0:= v1.`l.r.a` @type ^`java.lang.String`[] @kind object;
  #L3dd134.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L3dd13a.  v0:= temp;
  #L3dd13c.  return v0;
}
procedure `java.lang.String` `toString`(`l.r` v4 @kind this) @signature `Ll/r;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3dd1ec.  v0:= new `java.lang.StringBuilder`;
  #L3dd1f0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3dd1f6.  call temp:= `b`(v4) @signature `Ll/r;.b:()I` @kind virtual;
  #L3dd1fc.  v1:= temp;
  #L3dd1fe.  v2:= 0I;
  #L3dd200.  if v2 >= v1 then goto L3dd23a;
  #L3dd204.  call temp:= `a`(v4, v2) @signature `Ll/r;.a:(I)Ljava/lang/String;` @kind virtual;
  #L3dd20a.  v3:= temp @kind object;
  #L3dd20c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd212.  v3:= ": " @kind object;
  #L3dd216.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd21c.  call temp:= `b`(v4, v2) @signature `Ll/r;.b:(I)Ljava/lang/String;` @kind virtual;
  #L3dd222.  v3:= temp @kind object;
  #L3dd224.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd22a.  v3:= "\n" @kind object;
  #L3dd22e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd234.  v2:= v2 + 1;
  #L3dd238.  goto L3dd200;
  #L3dd23a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3dd240.  v0:= temp @kind object;
  #L3dd242.  return v0 @kind object;
}
