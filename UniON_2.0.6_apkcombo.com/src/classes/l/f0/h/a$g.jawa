record `l.f0.h.a$g` @kind class @AccessFlag  extends `l.f0.h.a$b` @kind class {
  `boolean` `l.f0.h.a$g.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`l.f0.h.a$g` v1 @kind this, `l.f0.h.a` v2 @kind object) @signature `Ll/f0/h/a$g;.<init>:(Ll/f0/h/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3e7afc.  v0:= 0I;
  #L3e7afe.  call `<init>`(v1, v2, v0) @signature `Ll/f0/h/a$b;.<init>:(Ll/f0/h/a;Ll/f0/h/a$a;)V` @kind direct;
  #L3e7b04.  return @kind void;
}
procedure `long` `a`(`l.f0.h.a$g` v3 @kind this, `m.c` v4 @kind object, `long` v5 ) @signature `Ll/f0/h/a$g;.a:(Lm/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e7a68.  v0:= 0L;
  #L3e7a6c.  v2:= lcmp(v5, v0);
  #L3e7a70.  if v2 < 0 then goto L3e7abc;
  #L3e7a74.  v0:= v3.`l.f0.h.a$b.c` @type ^`boolean` @kind boolean;
  #L3e7a78.  if v0 != 0 then goto L3e7aac;
  #L3e7a7c.  v0:= v3.`l.f0.h.a$g.f` @type ^`boolean` @kind boolean;
  #L3e7a80.  v1:= -1L;
  #L3e7a84.  if v0 == 0 then goto L3e7a8a;
  #L3e7a88.  return v1 @kind wide;
  #L3e7a8a.  call temp:= `a`(v3, v4, v5) @signature `Ll/f0/h/a$b;.a:(Lm/c;J)J` @kind super;
  #L3e7a90.  v4:= temp @kind wide;
  #L3e7a92.  v6:= lcmp(v4, v1);
  #L3e7a96.  if v6 != 0 then goto L3e7aaa;
  #L3e7a9a.  v4:= 1I;
  #L3e7a9c.  v3.`l.f0.h.a$g.f` @type ^`boolean` := v4 @kind boolean;
  #L3e7aa0.  v5:= 0I;
  #L3e7aa2.  call `a`(v3, v4, v5) @signature `Ll/f0/h/a$b;.a:(ZLjava/io/IOException;)V` @kind virtual;
  #L3e7aa8.  return v1 @kind wide;
  #L3e7aaa.  return v4 @kind wide;
  #L3e7aac.  v4:= new `java.lang.IllegalStateException`;
  #L3e7ab0.  v5:= "closed" @kind object;
  #L3e7ab4.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e7aba.  throw v4;
  #L3e7abc.  v4:= new `java.lang.IllegalArgumentException`;
  #L3e7ac0.  v0:= new `java.lang.StringBuilder`;
  #L3e7ac4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e7aca.  v1:= "byteCount < 0: " @kind object;
  #L3e7ace.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e7ad4.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e7ada.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e7ae0.  v5:= temp @kind object;
  #L3e7ae2.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e7ae8.  throw v4;
}
procedure `void` `close`(`l.f0.h.a$g` v2 @kind this) @signature `Ll/f0/h/a$g;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e7b18.  v0:= v2.`l.f0.h.a$b.c` @type ^`boolean` @kind boolean;
  #L3e7b1c.  if v0 == 0 then goto L3e7b22;
  #L3e7b20.  return @kind void;
  #L3e7b22.  v0:= v2.`l.f0.h.a$g.f` @type ^`boolean` @kind boolean;
  #L3e7b26.  if v0 != 0 then goto L3e7b34;
  #L3e7b2a.  v0:= 0I;
  #L3e7b2c.  v1:= 0I;
  #L3e7b2e.  call `a`(v2, v0, v1) @signature `Ll/f0/h/a$b;.a:(ZLjava/io/IOException;)V` @kind virtual;
  #L3e7b34.  v0:= 1I;
  #L3e7b36.  v2.`l.f0.h.a$b.c` @type ^`boolean` := v0 @kind boolean;
  #L3e7b3a.  return @kind void;
}
