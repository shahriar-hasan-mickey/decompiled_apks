record `l.f0.h.a$c` @kind class @AccessFlag FINAL extends `m.r` @kind interface {
  `m.i` `l.f0.h.a$c.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `l.f0.h.a$c.c` @AccessFlag PRIVATE;
  `l.f0.h.a` `l.f0.h.a$c.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`l.f0.h.a$c` v1 @kind this, `l.f0.h.a` v2 @kind object) @signature `Ll/f0/h/a$c;.<init>:(Ll/f0/h/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3e73a4.  v1.`l.f0.h.a$c.d` @type ^`l.f0.h.a` := v2 @kind object;
  #L3e73a8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e73ae.  v2:= new `m.i`;
  #L3e73b2.  v0:= v1.`l.f0.h.a$c.d` @type ^`l.f0.h.a` @kind object;
  #L3e73b6.  v0:= v0.`l.f0.h.a.d` @type ^`m.d` @kind object;
  #L3e73ba.  call temp:= `d`(v0) @signature `Lm/r;.d:()Lm/t;` @kind interface;
  #L3e73c0.  v0:= temp @kind object;
  #L3e73c2.  call `<init>`(v2, v0) @signature `Lm/i;.<init>:(Lm/t;)V` @kind direct;
  #L3e73c8.  v1.`l.f0.h.a$c.b` @type ^`m.i` := v2 @kind object;
  #L3e73cc.  return @kind void;
}
procedure `void` `b`(`l.f0.h.a$c` v3 @kind this, `m.c` v4 @kind object, `long` v5 ) @signature `Ll/f0/h/a$c;.b:(Lm/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e7498.  v0:= v3.`l.f0.h.a$c.c` @type ^`boolean` @kind boolean;
  #L3e749c.  if v0 != 0 then goto L3e74ec;
  #L3e74a0.  v0:= 0L;
  #L3e74a4.  v2:= lcmp(v5, v0);
  #L3e74a8.  if v2 != 0 then goto L3e74ae;
  #L3e74ac.  return @kind void;
  #L3e74ae.  v0:= v3.`l.f0.h.a$c.d` @type ^`l.f0.h.a` @kind object;
  #L3e74b2.  v0:= v0.`l.f0.h.a.d` @type ^`m.d` @kind object;
  #L3e74b6.  call temp:= `e`(v0, v5) @signature `Lm/d;.e:(J)Lm/d;` @kind interface;
  #L3e74bc.  v0:= v3.`l.f0.h.a$c.d` @type ^`l.f0.h.a` @kind object;
  #L3e74c0.  v0:= v0.`l.f0.h.a.d` @type ^`m.d` @kind object;
  #L3e74c4.  v1:= "\r\n" @kind object;
  #L3e74c8.  call temp:= `a`(v0, v1) @signature `Lm/d;.a:(Ljava/lang/String;)Lm/d;` @kind interface;
  #L3e74ce.  v0:= v3.`l.f0.h.a$c.d` @type ^`l.f0.h.a` @kind object;
  #L3e74d2.  v0:= v0.`l.f0.h.a.d` @type ^`m.d` @kind object;
  #L3e74d6.  call `b`(v0, v4, v5) @signature `Lm/r;.b:(Lm/c;J)V` @kind interface;
  #L3e74dc.  v4:= v3.`l.f0.h.a$c.d` @type ^`l.f0.h.a` @kind object;
  #L3e74e0.  v4:= v4.`l.f0.h.a.d` @type ^`m.d` @kind object;
  #L3e74e4.  call temp:= `a`(v4, v1) @signature `Lm/d;.a:(Ljava/lang/String;)Lm/d;` @kind interface;
  #L3e74ea.  return @kind void;
  #L3e74ec.  v4:= new `java.lang.IllegalStateException`;
  #L3e74f0.  v5:= "closed" @kind object;
  #L3e74f4.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e74fa.  throw v4;
}
procedure `void` `close`(`l.f0.h.a$c` v2 @kind this) @signature `Ll/f0/h/a$c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e73e0.  @monitorenter v2
  #L3e73e2.  v0:= v2.`l.f0.h.a$c.c` @type ^`boolean` @kind boolean;
  #L3e73e6.  if v0 == 0 then goto L3e73ee;
  #L3e73ea.  @monitorexit v2
  #L3e73ec.  return @kind void;
  #L3e73ee.  v0:= 1I;
  #L3e73f0.  v2.`l.f0.h.a$c.c` @type ^`boolean` := v0 @kind boolean;
  #L3e73f4.  v0:= v2.`l.f0.h.a$c.d` @type ^`l.f0.h.a` @kind object;
  #L3e73f8.  v0:= v0.`l.f0.h.a.d` @type ^`m.d` @kind object;
  #L3e73fc.  v1:= "0\r\n\r\n" @kind object;
  #L3e7400.  call temp:= `a`(v0, v1) @signature `Lm/d;.a:(Ljava/lang/String;)Lm/d;` @kind interface;
  #L3e7406.  v0:= v2.`l.f0.h.a$c.d` @type ^`l.f0.h.a` @kind object;
  #L3e740a.  v1:= v2.`l.f0.h.a$c.b` @type ^`m.i` @kind object;
  #L3e740e.  call `a`(v0, v1) @signature `Ll/f0/h/a;.a:(Lm/i;)V` @kind virtual;
  #L3e7414.  v0:= v2.`l.f0.h.a$c.d` @type ^`l.f0.h.a` @kind object;
  #L3e7418.  v1:= 3I;
  #L3e741a.  v0.`l.f0.h.a.e` @type ^`int` := v1;
  #L3e741e.  @monitorexit v2
  #L3e7420.  return @kind void;
  #L3e7422.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3e7424.  @monitorexit v2
  #L3e7426.  throw v0;
  catch `java.lang.Throwable` @[L3e73e2..L3e73e6] goto L3e7422;
  catch `java.lang.Throwable` @[L3e73f0..L3e741e] goto L3e7422;
}
procedure `m.t` `d`(`l.f0.h.a$c` v1 @kind this) @signature `Ll/f0/h/a$c;.d:()Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e738c.  v0:= v1.`l.f0.h.a$c.b` @type ^`m.i` @kind object;
  #L3e7390.  return v0 @kind object;
}
procedure `void` `flush`(`l.f0.h.a$c` v1 @kind this) @signature `Ll/f0/h/a$c;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e744c.  @monitorenter v1
  #L3e744e.  v0:= v1.`l.f0.h.a$c.c` @type ^`boolean` @kind boolean;
  #L3e7452.  if v0 == 0 then goto L3e745a;
  #L3e7456.  @monitorexit v1
  #L3e7458.  return @kind void;
  #L3e745a.  v0:= v1.`l.f0.h.a$c.d` @type ^`l.f0.h.a` @kind object;
  #L3e745e.  v0:= v0.`l.f0.h.a.d` @type ^`m.d` @kind object;
  #L3e7462.  call `flush`(v0) @signature `Lm/d;.flush:()V` @kind interface;
  #L3e7468.  @monitorexit v1
  #L3e746a.  return @kind void;
  #L3e746c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3e746e.  @monitorexit v1
  #L3e7470.  throw v0;
  catch `java.lang.Throwable` @[L3e744e..L3e7452] goto L3e746c;
  catch `java.lang.Throwable` @[L3e745a..L3e7468] goto L3e746c;
}
