record `l.f0.h.a$d` @kind class @AccessFlag  extends `l.f0.h.a$b` @kind class {
  `l.s` `l.f0.h.a$d.f` @AccessFlag PRIVATE_FINAL;
  `long` `l.f0.h.a$d.g` @AccessFlag PRIVATE;
  `boolean` `l.f0.h.a$d.h` @AccessFlag PRIVATE;
  `l.f0.h.a` `l.f0.h.a$d.i` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`l.f0.h.a$d` v2 @kind this, `l.f0.h.a` v3 @kind object, `l.s` v4 @kind object) @signature `Ll/f0/h/a$d;.<init>:(Ll/f0/h/a;Ll/s;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3e75e0.  v2.`l.f0.h.a$d.i` @type ^`l.f0.h.a` := v3 @kind object;
  #L3e75e4.  v0:= 0I;
  #L3e75e6.  call `<init>`(v2, v3, v0) @signature `Ll/f0/h/a$b;.<init>:(Ll/f0/h/a;Ll/f0/h/a$a;)V` @kind direct;
  #L3e75ec.  v0:= -1L;
  #L3e75f0.  v2.`l.f0.h.a$d.g` @type ^`long` := v0 @kind wide;
  #L3e75f4.  v3:= 1I;
  #L3e75f6.  v2.`l.f0.h.a$d.h` @type ^`boolean` := v3 @kind boolean;
  #L3e75fa.  v2.`l.f0.h.a$d.f` @type ^`l.s` := v4 @kind object;
  #L3e75fe.  return @kind void;
}
procedure `void` `a`(`l.f0.h.a$d` v6 @kind this) @signature `Ll/f0/h/a$d;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3e7658.  v0:= v6.`l.f0.h.a$d.g` @type ^`long` @kind wide;
  #L3e765c.  v2:= -1L;
  #L3e7660.  v4:= lcmp(v0, v2);
  #L3e7664.  if v4 == 0 then goto L3e7676;
  #L3e7668.  v0:= v6.`l.f0.h.a$d.i` @type ^`l.f0.h.a` @kind object;
  #L3e766c.  v0:= v0.`l.f0.h.a.c` @type ^`m.e` @kind object;
  #L3e7670.  call temp:= `e`(v0) @signature `Lm/e;.e:()Ljava/lang/String;` @kind interface;
  #L3e7676.  v0:= v6.`l.f0.h.a$d.i` @type ^`l.f0.h.a` @kind object;
  #L3e767a.  v0:= v0.`l.f0.h.a.c` @type ^`m.e` @kind object;
  #L3e767e.  call temp:= `i`(v0) @signature `Lm/e;.i:()J` @kind interface;
  #L3e7684.  v0:= temp @kind wide;
  #L3e7686.  v6.`l.f0.h.a$d.g` @type ^`long` := v0 @kind wide;
  #L3e768a.  v0:= v6.`l.f0.h.a$d.i` @type ^`l.f0.h.a` @kind object;
  #L3e768e.  v0:= v0.`l.f0.h.a.c` @type ^`m.e` @kind object;
  #L3e7692.  call temp:= `e`(v0) @signature `Lm/e;.e:()Ljava/lang/String;` @kind interface;
  #L3e7698.  v0:= temp @kind object;
  #L3e769a.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L3e76a0.  v0:= temp @kind object;
  #L3e76a2.  v1:= v6.`l.f0.h.a$d.g` @type ^`long` @kind wide;
  #L3e76a6.  v3:= 0L;
  #L3e76aa.  v5:= lcmp(v1, v3);
  #L3e76ae.  if v5 < 0 then goto L3e7712;
  #L3e76b2.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L3e76b8.  v1:= temp;
  #L3e76ba.  if v1 != 0 then goto L3e76ce;
  #L3e76be.  v1:= ";" @kind object;
  #L3e76c2.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3e76c8.  v1:= temp;
  #L3e76ca.  if v1 == 0 then goto L3e7712;
  #L3e76ce.  v0:= v6.`l.f0.h.a$d.g` @type ^`long` @kind wide;
  #L3e76d2.  v2:= lcmp(v0, v3);
  #L3e76d6.  if v2 != 0 then goto L3e7710;
  #L3e76da.  v0:= 0I;
  #L3e76dc.  v6.`l.f0.h.a$d.h` @type ^`boolean` := v0 @kind boolean;
  #L3e76e0.  v0:= v6.`l.f0.h.a$d.i` @type ^`l.f0.h.a` @kind object;
  #L3e76e4.  v0:= v0.`l.f0.h.a.a` @type ^`l.v` @kind object;
  #L3e76e8.  call temp:= `i`(v0) @signature `Ll/v;.i:()Ll/m;` @kind virtual;
  #L3e76ee.  v0:= temp @kind object;
  #L3e76f0.  v1:= v6.`l.f0.h.a$d.f` @type ^`l.s` @kind object;
  #L3e76f4.  v2:= v6.`l.f0.h.a$d.i` @type ^`l.f0.h.a` @kind object;
  #L3e76f8.  call temp:= `e`(v2) @signature `Ll/f0/h/a;.e:()Ll/r;` @kind virtual;
  #L3e76fe.  v2:= temp @kind object;
  #L3e7700.  call `a`(v0, v1, v2) @signature `Ll/f0/g/e;.a:(Ll/m;Ll/s;Ll/r;)V` @kind static;
  #L3e7706.  v0:= 1I;
  #L3e7708.  v1:= 0I;
  #L3e770a.  call `a`(v6, v0, v1) @signature `Ll/f0/h/a$b;.a:(ZLjava/io/IOException;)V` @kind virtual;
  #L3e7710.  return @kind void;
  #L3e7712.  v1:= new `java.net.ProtocolException`;
  #L3e7716.  v2:= new `java.lang.StringBuilder`;
  #L3e771a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e7720.  v3:= "expected chunk size and optional extensions but was \"" @kind object;
  #L3e7724.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e772a.  v3:= v6.`l.f0.h.a$d.g` @type ^`long` @kind wide;
  #L3e772e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e7734.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e773a.  v0:= "\"" @kind object;
  #L3e773e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e7744.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e774a.  v0:= temp @kind object;
  #L3e774c.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e7752.  throw v1;
  #L3e7754.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L3e7756.  v1:= new `java.net.ProtocolException`;
  #L3e775a.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L3e7760.  v0:= temp @kind object;
  #L3e7762.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e7768.  throw v1;
  catch `java.lang.NumberFormatException` @[L3e7676..L3e76ca] goto L3e7754;
  catch `java.lang.NumberFormatException` @[L3e7712..L3e7754] goto L3e7754;
}
procedure `long` `a`(`l.f0.h.a$d` v7 @kind this, `m.c` v8 @kind object, `long` v9 ) @signature `Ll/f0/h/a$d;.a:(Lm/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3e750c.  v0:= 0L;
  #L3e7510.  v2:= lcmp(v9, v0);
  #L3e7514.  if v2 < 0 then goto L3e75a2;
  #L3e7518.  v2:= v7.`l.f0.h.a$b.c` @type ^`boolean` @kind boolean;
  #L3e751c.  if v2 != 0 then goto L3e7592;
  #L3e7520.  v2:= v7.`l.f0.h.a$d.h` @type ^`boolean` @kind boolean;
  #L3e7524.  v3:= -1L;
  #L3e7528.  if v2 != 0 then goto L3e752e;
  #L3e752c.  return v3 @kind wide;
  #L3e752e.  v5:= v7.`l.f0.h.a$d.g` @type ^`long` @kind wide;
  #L3e7532.  v2:= lcmp(v5, v0);
  #L3e7536.  if v2 == 0 then goto L3e7542;
  #L3e753a.  v0:= lcmp(v5, v3);
  #L3e753e.  if v0 != 0 then goto L3e7552;
  #L3e7542.  call `a`(v7) @signature `Ll/f0/h/a$d;.a:()V` @kind direct;
  #L3e7548.  v0:= v7.`l.f0.h.a$d.h` @type ^`boolean` @kind boolean;
  #L3e754c.  if v0 != 0 then goto L3e7552;
  #L3e7550.  return v3 @kind wide;
  #L3e7552.  v0:= v7.`l.f0.h.a$d.g` @type ^`long` @kind wide;
  #L3e7556.  call temp:= `min`(v9, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3e755c.  v9:= temp @kind wide;
  #L3e755e.  call temp:= `a`(v7, v8, v9) @signature `Ll/f0/h/a$b;.a:(Lm/c;J)J` @kind super;
  #L3e7564.  v8:= temp @kind wide;
  #L3e7566.  v10:= lcmp(v8, v3);
  #L3e756a.  if v10 == 0 then goto L3e757a;
  #L3e756e.  v0:= v7.`l.f0.h.a$d.g` @type ^`long` @kind wide;
  #L3e7572.  v0:= v0 - v8 @kind long;
  #L3e7574.  v7.`l.f0.h.a$d.g` @type ^`long` := v0 @kind wide;
  #L3e7578.  return v8 @kind wide;
  #L3e757a.  v8:= new `java.net.ProtocolException`;
  #L3e757e.  v9:= "unexpected end of stream" @kind object;
  #L3e7582.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e7588.  v9:= 0I;
  #L3e758a.  call `a`(v7, v9, v8) @signature `Ll/f0/h/a$b;.a:(ZLjava/io/IOException;)V` @kind virtual;
  #L3e7590.  throw v8;
  #L3e7592.  v8:= new `java.lang.IllegalStateException`;
  #L3e7596.  v9:= "closed" @kind object;
  #L3e759a.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e75a0.  throw v8;
  #L3e75a2.  v8:= new `java.lang.IllegalArgumentException`;
  #L3e75a6.  v0:= new `java.lang.StringBuilder`;
  #L3e75aa.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e75b0.  v1:= "byteCount < 0: " @kind object;
  #L3e75b4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e75ba.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e75c0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e75c6.  v9:= temp @kind object;
  #L3e75c8.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e75ce.  throw v8;
}
procedure `void` `close`(`l.f0.h.a$d` v2 @kind this) @signature `Ll/f0/h/a$d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e7610.  v0:= v2.`l.f0.h.a$b.c` @type ^`boolean` @kind boolean;
  #L3e7614.  if v0 == 0 then goto L3e761a;
  #L3e7618.  return @kind void;
  #L3e761a.  v0:= v2.`l.f0.h.a$d.h` @type ^`boolean` @kind boolean;
  #L3e761e.  if v0 == 0 then goto L3e7640;
  #L3e7622.  v0:= 100I;
  #L3e7626.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3e762a.  call temp:= `a`(v2, v0, v1) @signature `Ll/f0/c;.a:(Lm/s;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L3e7630.  v0:= temp;
  #L3e7632.  if v0 != 0 then goto L3e7640;
  #L3e7636.  v0:= 0I;
  #L3e7638.  v1:= 0I;
  #L3e763a.  call `a`(v2, v0, v1) @signature `Ll/f0/h/a$b;.a:(ZLjava/io/IOException;)V` @kind virtual;
  #L3e7640.  v0:= 1I;
  #L3e7642.  v2.`l.f0.h.a$b.c` @type ^`boolean` := v0 @kind boolean;
  #L3e7646.  return @kind void;
}
