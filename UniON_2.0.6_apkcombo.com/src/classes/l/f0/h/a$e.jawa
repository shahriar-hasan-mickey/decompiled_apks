record `l.f0.h.a$e` @kind class @AccessFlag FINAL extends `m.r` @kind interface {
  `m.i` `l.f0.h.a$e.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `l.f0.h.a$e.c` @AccessFlag PRIVATE;
  `long` `l.f0.h.a$e.d` @AccessFlag PRIVATE;
  `l.f0.h.a` `l.f0.h.a$e.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`l.f0.h.a$e` v1 @kind this, `l.f0.h.a` v2 @kind object, `long` v3 ) @signature `Ll/f0/h/a$e;.<init>:(Ll/f0/h/a;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3e77ac.  v1.`l.f0.h.a$e.e` @type ^`l.f0.h.a` := v2 @kind object;
  #L3e77b0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e77b6.  v2:= new `m.i`;
  #L3e77ba.  v0:= v1.`l.f0.h.a$e.e` @type ^`l.f0.h.a` @kind object;
  #L3e77be.  v0:= v0.`l.f0.h.a.d` @type ^`m.d` @kind object;
  #L3e77c2.  call temp:= `d`(v0) @signature `Lm/r;.d:()Lm/t;` @kind interface;
  #L3e77c8.  v0:= temp @kind object;
  #L3e77ca.  call `<init>`(v2, v0) @signature `Lm/i;.<init>:(Lm/t;)V` @kind direct;
  #L3e77d0.  v1.`l.f0.h.a$e.b` @type ^`m.i` := v2 @kind object;
  #L3e77d4.  v1.`l.f0.h.a$e.d` @type ^`long` := v3 @kind wide;
  #L3e77d8.  return @kind void;
}
procedure `void` `b`(`l.f0.h.a$e` v7 @kind this, `m.c` v8 @kind object, `long` v9 ) @signature `Ll/f0/h/a$e;.b:(Lm/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3e7874.  v0:= v7.`l.f0.h.a$e.c` @type ^`boolean` @kind boolean;
  #L3e7878.  if v0 != 0 then goto L3e78f8;
  #L3e787c.  call temp:= `v`(v8) @signature `Lm/c;.v:()J` @kind virtual;
  #L3e7882.  v1:= temp @kind wide;
  #L3e7884.  v3:= 0L;
  #L3e7888.  v5:= v9 @kind wide;
  #L3e788a.  call `a`(v1, v3, v5) @signature `Ll/f0/c;.a:(JJJ)V` @kind static;
  #L3e7890.  v0:= v7.`l.f0.h.a$e.d` @type ^`long` @kind wide;
  #L3e7894.  v2:= lcmp(v9, v0);
  #L3e7898.  if v2 > 0 then goto L3e78b6;
  #L3e789c.  v0:= v7.`l.f0.h.a$e.e` @type ^`l.f0.h.a` @kind object;
  #L3e78a0.  v0:= v0.`l.f0.h.a.d` @type ^`m.d` @kind object;
  #L3e78a4.  call `b`(v0, v8, v9) @signature `Lm/r;.b:(Lm/c;J)V` @kind interface;
  #L3e78aa.  v0:= v7.`l.f0.h.a$e.d` @type ^`long` @kind wide;
  #L3e78ae.  v0:= v0 - v9 @kind long;
  #L3e78b0.  v7.`l.f0.h.a$e.d` @type ^`long` := v0 @kind wide;
  #L3e78b4.  return @kind void;
  #L3e78b6.  v8:= new `java.net.ProtocolException`;
  #L3e78ba.  v0:= new `java.lang.StringBuilder`;
  #L3e78be.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e78c4.  v1:= "expected " @kind object;
  #L3e78c8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e78ce.  v1:= v7.`l.f0.h.a$e.d` @type ^`long` @kind wide;
  #L3e78d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e78d8.  v1:= " bytes but received " @kind object;
  #L3e78dc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e78e2.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e78e8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e78ee.  v9:= temp @kind object;
  #L3e78f0.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e78f6.  throw v8;
  #L3e78f8.  v8:= new `java.lang.IllegalStateException`;
  #L3e78fc.  v9:= "closed" @kind object;
  #L3e7900.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e7906.  throw v8;
}
procedure `void` `close`(`l.f0.h.a$e` v5 @kind this) @signature `Ll/f0/h/a$e;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e77ec.  v0:= v5.`l.f0.h.a$e.c` @type ^`boolean` @kind boolean;
  #L3e77f0.  if v0 == 0 then goto L3e77f6;
  #L3e77f4.  return @kind void;
  #L3e77f6.  v0:= 1I;
  #L3e77f8.  v5.`l.f0.h.a$e.c` @type ^`boolean` := v0 @kind boolean;
  #L3e77fc.  v0:= v5.`l.f0.h.a$e.d` @type ^`long` @kind wide;
  #L3e7800.  v2:= 0L;
  #L3e7804.  v4:= lcmp(v0, v2);
  #L3e7808.  if v4 > 0 then goto L3e7826;
  #L3e780c.  v0:= v5.`l.f0.h.a$e.e` @type ^`l.f0.h.a` @kind object;
  #L3e7810.  v1:= v5.`l.f0.h.a$e.b` @type ^`m.i` @kind object;
  #L3e7814.  call `a`(v0, v1) @signature `Ll/f0/h/a;.a:(Lm/i;)V` @kind virtual;
  #L3e781a.  v0:= v5.`l.f0.h.a$e.e` @type ^`l.f0.h.a` @kind object;
  #L3e781e.  v1:= 3I;
  #L3e7820.  v0.`l.f0.h.a.e` @type ^`int` := v1;
  #L3e7824.  return @kind void;
  #L3e7826.  v0:= new `java.net.ProtocolException`;
  #L3e782a.  v1:= "unexpected end of stream" @kind object;
  #L3e782e.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e7834.  throw v0;
}
procedure `m.t` `d`(`l.f0.h.a$e` v1 @kind this) @signature `Ll/f0/h/a$e;.d:()Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e7794.  v0:= v1.`l.f0.h.a$e.b` @type ^`m.i` @kind object;
  #L3e7798.  return v0 @kind object;
}
procedure `void` `flush`(`l.f0.h.a$e` v1 @kind this) @signature `Ll/f0/h/a$e;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e7848.  v0:= v1.`l.f0.h.a$e.c` @type ^`boolean` @kind boolean;
  #L3e784c.  if v0 == 0 then goto L3e7852;
  #L3e7850.  return @kind void;
  #L3e7852.  v0:= v1.`l.f0.h.a$e.e` @type ^`l.f0.h.a` @kind object;
  #L3e7856.  v0:= v0.`l.f0.h.a.d` @type ^`m.d` @kind object;
  #L3e785a.  call `flush`(v0) @signature `Lm/d;.flush:()V` @kind interface;
  #L3e7860.  return @kind void;
}
