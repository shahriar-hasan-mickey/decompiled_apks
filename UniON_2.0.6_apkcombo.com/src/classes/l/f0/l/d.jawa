record `l.f0.l.d` @kind class @AccessFlag PUBLIC_FINAL extends `javax.net.ssl.HostnameVerifier` @kind interface {
}
global `l.f0.l.d` `@@l.f0.l.d.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ll/f0/l/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f0d78.  v0:= new `l.f0.l.d`;
  #L3f0d7c.  call `<init>`(v0) @signature `Ll/f0/l/d;.<init>:()V` @kind direct;
  #L3f0d82.  `@@l.f0.l.d.a` @type ^`l.f0.l.d` := v0 @kind object;
  #L3f0d86.  return @kind void;
}
procedure `void` `<init>`(`l.f0.l.d` v0 @kind this) @signature `Ll/f0/l/d;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3f0d98.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f0d9e.  return @kind void;
}
procedure `java.util.List` `a`(`java.security.cert.X509Certificate` v4 @kind object) @signature `Ll/f0/l/d;.a:(Ljava/security/cert/X509Certificate;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f0c6c.  v0:= 7I;
  #L3f0c6e.  call temp:= `a`(v4, v0) @signature `Ll/f0/l/d;.a:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L3f0c74.  v0:= temp @kind object;
  #L3f0c76.  v1:= 2I;
  #L3f0c78.  call temp:= `a`(v4, v1) @signature `Ll/f0/l/d;.a:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L3f0c7e.  v4:= temp @kind object;
  #L3f0c80.  v1:= new `java.util.ArrayList`;
  #L3f0c84.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3f0c8a.  v2:= temp;
  #L3f0c8c.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3f0c92.  v3:= temp;
  #L3f0c94.  v2:= v2 + v3 @kind int;
  #L3f0c96.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3f0c9c.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3f0ca2.  call temp:= `addAll`(v1, v4) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3f0ca8.  return v1 @kind object;
}
procedure `java.util.List` `a`(`java.security.cert.X509Certificate` v4 @kind object, `int` v5 ) @signature `Ll/f0/l/d;.a:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f0cbc.  v0:= new `java.util.ArrayList`;
  #L3f0cc0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3f0cc6.  call temp:= `getSubjectAlternativeNames`(v4) @signature `Ljava/security/cert/X509Certificate;.getSubjectAlternativeNames:()Ljava/util/Collection;` @kind virtual;
  #L3f0ccc.  v4:= temp @kind object;
  #L3f0cce.  if v4 != 0 then goto L3f0cdc;
  #L3f0cd2.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L3f0cd8.  v4:= temp @kind object;
  #L3f0cda.  return v4 @kind object;
  #L3f0cdc.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f0ce2.  v4:= temp @kind object;
  #L3f0ce4.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f0cea.  v1:= temp;
  #L3f0cec.  if v1 == 0 then goto L3f0d4a;
  #L3f0cf0.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f0cf6.  v1:= temp @kind object;
  #L3f0cf8.  v1:= (`java.util.List`) v1 @kind object;
  #L3f0cfc.  if v1 == 0 then goto L3f0ce4;
  #L3f0d00.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3f0d06.  v2:= temp;
  #L3f0d08.  v3:= 2I;
  #L3f0d0a.  if v2 >= v3 then goto L3f0d10;
  #L3f0d0e.  goto L3f0ce4;
  #L3f0d10.  v2:= 0I;
  #L3f0d12.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3f0d18.  v2:= temp @kind object;
  #L3f0d1a.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L3f0d1e.  if v2 != 0 then goto L3f0d24;
  #L3f0d22.  goto L3f0ce4;
  #L3f0d24.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3f0d2a.  v2:= temp;
  #L3f0d2c.  if v2 != v5 then goto L3f0ce4;
  #L3f0d30.  v2:= 1I;
  #L3f0d32.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3f0d38.  v1:= temp @kind object;
  #L3f0d3a.  v1:= (`java.lang.String`) v1 @kind object;
  #L3f0d3e.  if v1 == 0 then goto L3f0ce4;
  #L3f0d42.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f0d48.  goto L3f0ce4;
  #L3f0d4a.  return v0 @kind object;
  #L3f0d4c.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L3f0d52.  v4:= temp @kind object;
  #L3f0d54.  return v4 @kind object;
  catch `java.security.cert.CertificateParsingException` @[L3f0cc6..L3f0d48] goto L3f0d4c;
}
procedure `boolean` `b`(`l.f0.l.d` v1 @kind this, `java.lang.String` v2 @kind object, `java.security.cert.X509Certificate` v3 @kind object) @signature `Ll/f0/l/d;.b:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f0bc0.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L3f0bc4.  call temp:= `toLowerCase`(v2, v0) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3f0bca.  v2:= temp @kind object;
  #L3f0bcc.  v0:= 2I;
  #L3f0bce.  call temp:= `a`(v3, v0) @signature `Ll/f0/l/d;.a:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L3f0bd4.  v3:= temp @kind object;
  #L3f0bd6.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f0bdc.  v3:= temp @kind object;
  #L3f0bde.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f0be4.  v0:= temp;
  #L3f0be6.  if v0 == 0 then goto L3f0c06;
  #L3f0bea.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f0bf0.  v0:= temp @kind object;
  #L3f0bf2.  v0:= (`java.lang.String`) v0 @kind object;
  #L3f0bf6.  call temp:= `a`(v1, v2, v0) @signature `Ll/f0/l/d;.a:(Ljava/lang/String;Ljava/lang/String;)Z` @kind virtual;
  #L3f0bfc.  v0:= temp;
  #L3f0bfe.  if v0 == 0 then goto L3f0bde;
  #L3f0c02.  v2:= 1I;
  #L3f0c04.  return v2;
  #L3f0c06.  v2:= 0I;
  #L3f0c08.  return v2;
}
procedure `boolean` `c`(`l.f0.l.d` v4 @kind this, `java.lang.String` v5 @kind object, `java.security.cert.X509Certificate` v6 @kind object) @signature `Ll/f0/l/d;.c:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f0c1c.  v0:= 7I;
  #L3f0c1e.  call temp:= `a`(v6, v0) @signature `Ll/f0/l/d;.a:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L3f0c24.  v6:= temp @kind object;
  #L3f0c26.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3f0c2c.  v0:= temp;
  #L3f0c2e.  v1:= 0I;
  #L3f0c30.  v2:= 0I;
  #L3f0c32.  if v2 >= v0 then goto L3f0c58;
  #L3f0c36.  call temp:= `get`(v6, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3f0c3c.  v3:= temp @kind object;
  #L3f0c3e.  v3:= (`java.lang.String`) v3 @kind object;
  #L3f0c42.  call temp:= `equalsIgnoreCase`(v5, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L3f0c48.  v3:= temp;
  #L3f0c4a.  if v3 == 0 then goto L3f0c52;
  #L3f0c4e.  v5:= 1I;
  #L3f0c50.  return v5;
  #L3f0c52.  v2:= v2 + 1;
  #L3f0c56.  goto L3f0c32;
  #L3f0c58.  return v1;
}
procedure `boolean` `a`(`l.f0.l.d` v7 @kind this, `java.lang.String` v8 @kind object, `java.lang.String` v9 @kind object) @signature `Ll/f0/l/d;.a:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f0a44.  v0:= 0I;
  #L3f0a46.  if v8 == 0 then goto L3f0bac;
  #L3f0a4a.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f0a50.  v1:= temp;
  #L3f0a52.  if v1 == 0 then goto L3f0bac;
  #L3f0a56.  v1:= "." @kind object;
  #L3f0a5a.  call temp:= `startsWith`(v8, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f0a60.  v2:= temp;
  #L3f0a62.  if v2 != 0 then goto L3f0bac;
  #L3f0a66.  v2:= ".." @kind object;
  #L3f0a6a.  call temp:= `endsWith`(v8, v2) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f0a70.  v3:= temp;
  #L3f0a72.  if v3 == 0 then goto L3f0a7a;
  #L3f0a76.  goto L3f0bac;
  #L3f0a7a.  if v9 == 0 then goto L3f0bac;
  #L3f0a7e.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f0a84.  v3:= temp;
  #L3f0a86.  if v3 == 0 then goto L3f0bac;
  #L3f0a8a.  call temp:= `startsWith`(v9, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f0a90.  v3:= temp;
  #L3f0a92.  if v3 != 0 then goto L3f0bac;
  #L3f0a96.  call temp:= `endsWith`(v9, v2) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f0a9c.  v2:= temp;
  #L3f0a9e.  if v2 == 0 then goto L3f0aa6;
  #L3f0aa2.  goto L3f0bac;
  #L3f0aa6.  call temp:= `endsWith`(v8, v1) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f0aac.  v2:= temp;
  #L3f0aae.  v3:= 46I;
  #L3f0ab2.  if v2 != 0 then goto L3f0ad4;
  #L3f0ab6.  v2:= new `java.lang.StringBuilder`;
  #L3f0aba.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f0ac0.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f0ac6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f0acc.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f0ad2.  v8:= temp @kind object;
  #L3f0ad4.  call temp:= `endsWith`(v9, v1) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f0ada.  v1:= temp;
  #L3f0adc.  if v1 != 0 then goto L3f0afe;
  #L3f0ae0.  v1:= new `java.lang.StringBuilder`;
  #L3f0ae4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f0aea.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f0af0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f0af6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f0afc.  v9:= temp @kind object;
  #L3f0afe.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L3f0b02.  call temp:= `toLowerCase`(v9, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3f0b08.  v9:= temp @kind object;
  #L3f0b0a.  v1:= "*" @kind object;
  #L3f0b0e.  call temp:= `contains`(v9, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L3f0b14.  v1:= temp;
  #L3f0b16.  if v1 != 0 then goto L3f0b24;
  #L3f0b1a.  call temp:= `equals`(v8, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f0b20.  v8:= temp;
  #L3f0b22.  return v8;
  #L3f0b24.  v1:= "*." @kind object;
  #L3f0b28.  call temp:= `startsWith`(v9, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f0b2e.  v2:= temp;
  #L3f0b30.  if v2 == 0 then goto L3f0bac;
  #L3f0b34.  v2:= 42I;
  #L3f0b38.  v4:= 1I;
  #L3f0b3a.  call temp:= `indexOf`(v9, v2, v4) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L3f0b40.  v2:= temp;
  #L3f0b42.  v5:= -1I;
  #L3f0b44.  if v2 == v5 then goto L3f0b4a;
  #L3f0b48.  goto L3f0bac;
  #L3f0b4a.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f0b50.  v2:= temp;
  #L3f0b52.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f0b58.  v6:= temp;
  #L3f0b5a.  if v2 >= v6 then goto L3f0b60;
  #L3f0b5e.  return v0;
  #L3f0b60.  call temp:= `equals`(v1, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f0b66.  v1:= temp;
  #L3f0b68.  if v1 == 0 then goto L3f0b6e;
  #L3f0b6c.  return v0;
  #L3f0b6e.  call temp:= `substring`(v9, v4) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3f0b74.  v9:= temp @kind object;
  #L3f0b76.  call temp:= `endsWith`(v8, v9) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f0b7c.  v1:= temp;
  #L3f0b7e.  if v1 != 0 then goto L3f0b84;
  #L3f0b82.  return v0;
  #L3f0b84.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f0b8a.  v1:= temp;
  #L3f0b8c.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f0b92.  v9:= temp;
  #L3f0b94.  v1:= v1 - v9 @kind int;
  #L3f0b96.  if v1 <= 0 then goto L3f0baa;
  #L3f0b9a.  v1:= v1 - v4 @kind int;
  #L3f0b9c.  call temp:= `lastIndexOf`(v8, v3, v1) @signature `Ljava/lang/String;.lastIndexOf:(II)I` @kind virtual;
  #L3f0ba2.  v8:= temp;
  #L3f0ba4.  if v8 == v5 then goto L3f0baa;
  #L3f0ba8.  return v0;
  #L3f0baa.  return v4;
  #L3f0bac.  return v0;
}
procedure `boolean` `a`(`l.f0.l.d` v1 @kind this, `java.lang.String` v2 @kind object, `java.security.cert.X509Certificate` v3 @kind object) @signature `Ll/f0/l/d;.a:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f09d4.  call temp:= `d`(v2) @signature `Ll/f0/c;.d:(Ljava/lang/String;)Z` @kind static;
  #L3f09da.  v0:= temp;
  #L3f09dc.  if v0 == 0 then goto L3f09ea;
  #L3f09e0.  call temp:= `c`(v1, v2, v3) @signature `Ll/f0/l/d;.c:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L3f09e6.  v2:= temp;
  #L3f09e8.  goto L3f09f2;
  #L3f09ea.  call temp:= `b`(v1, v2, v3) @signature `Ll/f0/l/d;.b:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L3f09f0.  v2:= temp;
  #L3f09f2.  return v2;
}
procedure `boolean` `verify`(`l.f0.l.d` v1 @kind this, `java.lang.String` v2 @kind object, `javax.net.ssl.SSLSession` v3 @kind object) @signature `Ll/f0/l/d;.verify:(Ljava/lang/String;Ljavax/net/ssl/SSLSession;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f0a04.  v0:= 0I;
  #L3f0a06.  call temp:= `getPeerCertificates`(v3) @signature `Ljavax/net/ssl/SSLSession;.getPeerCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L3f0a0c.  v3:= temp @kind object;
  #L3f0a0e.  v3:= v3[v0] @kind object;
  #L3f0a12.  v3:= (`java.security.cert.X509Certificate`) v3 @kind object;
  #L3f0a16.  call temp:= `a`(v1, v2, v3) @signature `Ll/f0/l/d;.a:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @kind virtual;
  #L3f0a1c.  v2:= temp;
  #L3f0a1e.  return v2;
  #L3f0a20.  return v0;
  catch `javax.net.ssl.SSLException` @[L3f0a06..L3f0a1e] goto L3f0a20;
}
