record `l.f0.l.a` @kind class @AccessFlag PUBLIC_FINAL extends `l.f0.l.c` @kind class {
  `l.f0.l.e` `l.f0.l.a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`l.f0.l.a` v0 @kind this, `l.f0.l.e` v1 @kind object) @signature `Ll/f0/l/a;.<init>:(Ll/f0/l/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f0834.  call `<init>`(v0) @signature `Ll/f0/l/c;.<init>:()V` @kind direct;
  #L3f083a.  v0.`l.f0.l.a.a` @type ^`l.f0.l.e` := v1 @kind object;
  #L3f083e.  return @kind void;
}
procedure `boolean` `a`(`l.f0.l.a` v2 @kind this, `java.security.cert.X509Certificate` v3 @kind object, `java.security.cert.X509Certificate` v4 @kind object) @signature `Ll/f0/l/a;.a:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f0688.  call temp:= `getIssuerDN`(v3) @signature `Ljava/security/cert/X509Certificate;.getIssuerDN:()Ljava/security/Principal;` @kind virtual;
  #L3f068e.  v0:= temp @kind object;
  #L3f0690.  call temp:= `getSubjectDN`(v4) @signature `Ljava/security/cert/X509Certificate;.getSubjectDN:()Ljava/security/Principal;` @kind virtual;
  #L3f0696.  v1:= temp @kind object;
  #L3f0698.  call temp:= `equals`(v0, v1) @signature `Ljava/security/Principal;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3f069e.  v0:= temp;
  #L3f06a0.  v1:= 0I;
  #L3f06a2.  if v0 != 0 then goto L3f06a8;
  #L3f06a6.  return v1;
  #L3f06a8.  call temp:= `getPublicKey`(v4) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L3f06ae.  v4:= temp @kind object;
  #L3f06b0.  call `verify`(v3, v4) @signature `Ljava/security/cert/X509Certificate;.verify:(Ljava/security/PublicKey;)V` @kind virtual;
  #L3f06b6.  v3:= 1I;
  #L3f06b8.  return v3;
  #L3f06ba.  return v1;
  catch `java.security.GeneralSecurityException` @[L3f06a8..L3f06b6] goto L3f06ba;
}
procedure `java.util.List` `a`(`l.f0.l.a` v6 @kind this, `java.util.List` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Ll/f0/l/a;.a:(Ljava/util/List;Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f06fc.  v8:= new `java.util.ArrayDeque`;
  #L3f0700.  call `<init>`(v8, v7) @signature `Ljava/util/ArrayDeque;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3f0706.  v7:= new `java.util.ArrayList`;
  #L3f070a.  call `<init>`(v7) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3f0710.  call temp:= `removeFirst`(v8) @signature `Ljava/util/Deque;.removeFirst:()Ljava/lang/Object;` @kind interface;
  #L3f0716.  v0:= temp @kind object;
  #L3f0718.  call temp:= `add`(v7, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f071e.  v0:= 0I;
  #L3f0720.  v1:= 0I;
  #L3f0722.  v2:= 9I;
  #L3f0726.  if v0 >= v2 then goto L3f07f4;
  #L3f072a.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3f0730.  v2:= temp;
  #L3f0732.  v3:= 1I;
  #L3f0734.  v2:= v2 - v3 @kind int;
  #L3f0736.  call temp:= `get`(v7, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3f073c.  v2:= temp @kind object;
  #L3f073e.  v2:= (`java.security.cert.X509Certificate`) v2 @kind object;
  #L3f0742.  v4:= v6.`l.f0.l.a.a` @type ^`l.f0.l.e` @kind object;
  #L3f0746.  call temp:= `a`(v4, v2) @signature `Ll/f0/l/e;.a:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @kind interface;
  #L3f074c.  v4:= temp @kind object;
  #L3f074e.  if v4 == 0 then goto L3f0782;
  #L3f0752.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3f0758.  v1:= temp;
  #L3f075a.  if v1 > v3 then goto L3f076a;
  #L3f075e.  call temp:= `equals`(v2, v4) @signature `Ljava/security/cert/X509Certificate;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f0764.  v1:= temp;
  #L3f0766.  if v1 != 0 then goto L3f0770;
  #L3f076a.  call temp:= `add`(v7, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f0770.  call temp:= `a`(v6, v4, v4) @signature `Ll/f0/l/a;.a:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L3f0776.  v1:= temp;
  #L3f0778.  if v1 == 0 then goto L3f077e;
  #L3f077c.  return v7 @kind object;
  #L3f077e.  v1:= 1I;
  #L3f0780.  goto L3f07ba;
  #L3f0782.  call temp:= `iterator`(v8) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f0788.  v3:= temp @kind object;
  #L3f078a.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f0790.  v4:= temp;
  #L3f0792.  if v4 == 0 then goto L3f07c0;
  #L3f0796.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f079c.  v4:= temp @kind object;
  #L3f079e.  v4:= (`java.security.cert.X509Certificate`) v4 @kind object;
  #L3f07a2.  call temp:= `a`(v6, v2, v4) @signature `Ll/f0/l/a;.a:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L3f07a8.  v5:= temp;
  #L3f07aa.  if v5 == 0 then goto L3f078a;
  #L3f07ae.  call `remove`(v3) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L3f07b4.  call temp:= `add`(v7, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f07ba.  v0:= v0 + 1;
  #L3f07be.  goto L3f0722;
  #L3f07c0.  if v1 == 0 then goto L3f07c6;
  #L3f07c4.  return v7 @kind object;
  #L3f07c6.  v7:= new `javax.net.ssl.SSLPeerUnverifiedException`;
  #L3f07ca.  v8:= new `java.lang.StringBuilder`;
  #L3f07ce.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f07d4.  v0:= "Failed to find a trusted cert that signed " @kind object;
  #L3f07d8.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f07de.  call temp:= `append`(v8, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f07e4.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f07ea.  v8:= temp @kind object;
  #L3f07ec.  call `<init>`(v7, v8) @signature `Ljavax/net/ssl/SSLPeerUnverifiedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f07f2.  throw v7;
  #L3f07f4.  v8:= new `javax.net.ssl.SSLPeerUnverifiedException`;
  #L3f07f8.  v0:= new `java.lang.StringBuilder`;
  #L3f07fc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f0802.  v1:= "Certificate chain too long: " @kind object;
  #L3f0806.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f080c.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f0812.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f0818.  v7:= temp @kind object;
  #L3f081a.  call `<init>`(v8, v7) @signature `Ljavax/net/ssl/SSLPeerUnverifiedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f0820.  throw v8;
}
procedure `boolean` `equals`(`l.f0.l.a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Ll/f0/l/a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f0648.  v0:= 1I;
  #L3f064a.  if v3 != v2 then goto L3f0650;
  #L3f064e.  return v0;
  #L3f0650.  v1:= instanceof @variable v3 @type ^`l.f0.l.a` @kind boolean;
  #L3f0654.  if v1 == 0 then goto L3f0672;
  #L3f0658.  v3:= (`l.f0.l.a`) v3 @kind object;
  #L3f065c.  v3:= v3.`l.f0.l.a.a` @type ^`l.f0.l.e` @kind object;
  #L3f0660.  v1:= v2.`l.f0.l.a.a` @type ^`l.f0.l.e` @kind object;
  #L3f0664.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f066a.  v3:= temp;
  #L3f066c.  if v3 == 0 then goto L3f0672;
  #L3f0670.  goto L3f0674;
  #L3f0672.  v0:= 0I;
  #L3f0674.  return v0;
}
procedure `int` `hashCode`(`l.f0.l.a` v1 @kind this) @signature `Ll/f0/l/a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f06dc.  v0:= v1.`l.f0.l.a.a` @type ^`l.f0.l.e` @kind object;
  #L3f06e0.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f06e6.  v0:= temp;
  #L3f06e8.  return v0;
}
