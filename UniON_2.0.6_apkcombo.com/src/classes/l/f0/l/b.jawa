record `l.f0.l.b` @kind class @AccessFlag PUBLIC_FINAL extends `l.f0.l.e` @kind interface {
  `java.util.Map` `l.f0.l.b.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`l.f0.l.b` v6 @kind this, `java.security.cert.X509Certificate`[] v7 @kind object) @signature `Ll/f0/l/b;.<init>:([Ljava/security/cert/X509Certificate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f0928.  call `<init>`(v6) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f092e.  v0:= new `java.util.LinkedHashMap`;
  #L3f0932.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L3f0938.  v6.`l.f0.l.b.a` @type ^`java.util.Map` := v0 @kind object;
  #L3f093c.  v0:= length @variable v7;
  #L3f093e.  v1:= 0I;
  #L3f0940.  if v1 >= v0 then goto L3f0986;
  #L3f0944.  v2:= v7[v1] @kind object;
  #L3f0948.  call temp:= `getSubjectX500Principal`(v2) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L3f094e.  v3:= temp @kind object;
  #L3f0950.  v4:= v6.`l.f0.l.b.a` @type ^`java.util.Map` @kind object;
  #L3f0954.  call temp:= `get`(v4, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f095a.  v4:= temp @kind object;
  #L3f095c.  v4:= (`java.util.Set`) v4 @kind object;
  #L3f0960.  if v4 != 0 then goto L3f097a;
  #L3f0964.  v4:= new `java.util.LinkedHashSet`;
  #L3f0968.  v5:= 1I;
  #L3f096a.  call `<init>`(v4, v5) @signature `Ljava/util/LinkedHashSet;.<init>:(I)V` @kind direct;
  #L3f0970.  v5:= v6.`l.f0.l.b.a` @type ^`java.util.Map` @kind object;
  #L3f0974.  call temp:= `put`(v5, v3, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f097a.  call temp:= `add`(v4, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f0980.  v1:= v1 + 1;
  #L3f0984.  goto L3f0940;
  #L3f0986.  return @kind void;
}
procedure `java.security.cert.X509Certificate` `a`(`l.f0.l.b` v4 @kind this, `java.security.cert.X509Certificate` v5 @kind object) @signature `Ll/f0/l/b;.a:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f08b0.  call temp:= `getIssuerX500Principal`(v5) @signature `Ljava/security/cert/X509Certificate;.getIssuerX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L3f08b6.  v0:= temp @kind object;
  #L3f08b8.  v1:= v4.`l.f0.l.b.a` @type ^`java.util.Map` @kind object;
  #L3f08bc.  call temp:= `get`(v1, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f08c2.  v0:= temp @kind object;
  #L3f08c4.  v0:= (`java.util.Set`) v0 @kind object;
  #L3f08c8.  v1:= 0I;
  #L3f08ca.  if v0 != 0 then goto L3f08d0;
  #L3f08ce.  return v1 @kind object;
  #L3f08d0.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f08d6.  v0:= temp @kind object;
  #L3f08d8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f08de.  v2:= temp;
  #L3f08e0.  if v2 == 0 then goto L3f0904;
  #L3f08e4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f08ea.  v2:= temp @kind object;
  #L3f08ec.  v2:= (`java.security.cert.X509Certificate`) v2 @kind object;
  #L3f08f0.  call temp:= `getPublicKey`(v2) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L3f08f6.  v3:= temp @kind object;
  #L3f08f8.  call `verify`(v5, v3) @signature `Ljava/security/cert/X509Certificate;.verify:(Ljava/security/PublicKey;)V` @kind virtual;
  #L3f08fe.  return v2 @kind object;
  #L3f0900.  
  #L3f0902.  goto L3f08d8;
  #L3f0904.  return v1 @kind object;
  catch `java.lang.Exception` @[L3f08f8..L3f08fe] goto L3f0900;
}
procedure `boolean` `equals`(`l.f0.l.b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Ll/f0/l/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f0850.  v0:= 1I;
  #L3f0852.  if v3 != v2 then goto L3f0858;
  #L3f0856.  return v0;
  #L3f0858.  v1:= instanceof @variable v3 @type ^`l.f0.l.b` @kind boolean;
  #L3f085c.  if v1 == 0 then goto L3f087a;
  #L3f0860.  v3:= (`l.f0.l.b`) v3 @kind object;
  #L3f0864.  v3:= v3.`l.f0.l.b.a` @type ^`java.util.Map` @kind object;
  #L3f0868.  v1:= v2.`l.f0.l.b.a` @type ^`java.util.Map` @kind object;
  #L3f086c.  call temp:= `equals`(v3, v1) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3f0872.  v3:= temp;
  #L3f0874.  if v3 == 0 then goto L3f087a;
  #L3f0878.  goto L3f087c;
  #L3f087a.  v0:= 0I;
  #L3f087c.  return v0;
}
procedure `int` `hashCode`(`l.f0.l.b` v1 @kind this) @signature `Ll/f0/l/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f0890.  v0:= v1.`l.f0.l.b.a` @type ^`java.util.Map` @kind object;
  #L3f0894.  call temp:= `hashCode`(v0) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L3f089a.  v0:= temp;
  #L3f089c.  return v0;
}
