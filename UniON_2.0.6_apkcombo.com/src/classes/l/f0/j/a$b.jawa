record `l.f0.j.a$b` @kind class @AccessFlag FINAL extends `l.f0.l.e` @kind interface {
  `javax.net.ssl.X509TrustManager` `l.f0.j.a$b.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `l.f0.j.a$b.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`l.f0.j.a$b` v0 @kind this, `javax.net.ssl.X509TrustManager` v1 @kind object, `java.lang.reflect.Method` v2 @kind object) @signature `Ll/f0/j/a$b;.<init>:(Ljavax/net/ssl/X509TrustManager;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3eeaec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3eeaf2.  v0.`l.f0.j.a$b.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L3eeaf6.  v0.`l.f0.j.a$b.a` @type ^`javax.net.ssl.X509TrustManager` := v1 @kind object;
  #L3eeafa.  return @kind void;
}
procedure `java.security.cert.X509Certificate` `a`(`l.f0.j.a$b` v5 @kind this, `java.security.cert.X509Certificate` v6 @kind object) @signature `Ll/f0/j/a$b;.a:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3eea8c.  v0:= 0I;
  #L3eea8e.  v1:= v5.`l.f0.j.a$b.b` @type ^`java.lang.reflect.Method` @kind object;
  #L3eea92.  v2:= v5.`l.f0.j.a$b.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L3eea96.  v3:= 1I;
  #L3eea98.  v3:= new `java.lang.Object`[v3];
  #L3eea9c.  v4:= 0I;
  #L3eea9e.  v3[v4]:= v6 @kind object;
  #L3eeaa2.  call temp:= `invoke`(v1, v2, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3eeaa8.  v6:= temp @kind object;
  #L3eeaaa.  v6:= (`java.security.cert.TrustAnchor`) v6 @kind object;
  #L3eeaae.  if v6 == 0 then goto L3eeaba;
  #L3eeab2.  call temp:= `getTrustedCert`(v6) @signature `Ljava/security/cert/TrustAnchor;.getTrustedCert:()Ljava/security/cert/X509Certificate;` @kind virtual;
  #L3eeab8.  v0:= temp @kind object;
  #L3eeaba.  return v0 @kind object;
  #L3eeabc.  v6:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L3eeabe.  v0:= "unable to get issues and signature" @kind object;
  #L3eeac2.  call temp:= `a`(v0, v6) @signature `Ll/f0/c;.a:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L3eeac8.  v6:= temp @kind object;
  #L3eeaca.  throw v6;
  catch `java.lang.IllegalAccessException` @[L3eea8e..L3eeaba] goto L3eeabc;
  catch `java.lang.reflect.InvocationTargetException` @[L3eea8e..L3eeaba] goto L3eeaba;
}
procedure `boolean` `equals`(`l.f0.j.a$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ll/f0/j/a$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3eea04.  v0:= 1I;
  #L3eea06.  if v5 != v4 then goto L3eea0c;
  #L3eea0a.  return v0;
  #L3eea0c.  v1:= instanceof @variable v5 @type ^`l.f0.j.a$b` @kind boolean;
  #L3eea10.  v2:= 0I;
  #L3eea12.  if v1 != 0 then goto L3eea18;
  #L3eea16.  return v2;
  #L3eea18.  v5:= (`l.f0.j.a$b`) v5 @kind object;
  #L3eea1c.  v1:= v4.`l.f0.j.a$b.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L3eea20.  v3:= v5.`l.f0.j.a$b.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L3eea24.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3eea2a.  v1:= temp;
  #L3eea2c.  if v1 == 0 then goto L3eea46;
  #L3eea30.  v1:= v4.`l.f0.j.a$b.b` @type ^`java.lang.reflect.Method` @kind object;
  #L3eea34.  v5:= v5.`l.f0.j.a$b.b` @type ^`java.lang.reflect.Method` @kind object;
  #L3eea38.  call temp:= `equals`(v1, v5) @signature `Ljava/lang/reflect/Method;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3eea3e.  v5:= temp;
  #L3eea40.  if v5 == 0 then goto L3eea46;
  #L3eea44.  goto L3eea48;
  #L3eea46.  v0:= 0I;
  #L3eea48.  return v0;
}
procedure `int` `hashCode`(`l.f0.j.a$b` v2 @kind this) @signature `Ll/f0/j/a$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3eea5c.  v0:= v2.`l.f0.j.a$b.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L3eea60.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3eea66.  v0:= temp;
  #L3eea68.  v1:= v2.`l.f0.j.a$b.b` @type ^`java.lang.reflect.Method` @kind object;
  #L3eea6c.  call temp:= `hashCode`(v1) @signature `Ljava/lang/reflect/Method;.hashCode:()I` @kind virtual;
  #L3eea72.  v1:= temp;
  #L3eea74.  v1:= v1 * 31;
  #L3eea78.  v0:= v0 + v1 @kind int;
  #L3eea7a.  return v0;
}
