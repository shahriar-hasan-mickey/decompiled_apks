record `l.f0.j.d` @kind class @AccessFlag  extends `l.f0.j.f` @kind class {
  `java.lang.reflect.Method` `l.f0.j.d.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `l.f0.j.d.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `l.f0.j.d.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `l.f0.j.d.f` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `l.f0.j.d.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`l.f0.j.d` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object, `java.lang.reflect.Method` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Ll/f0/j/d;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ef8bc.  call `<init>`(v0) @signature `Ll/f0/j/f;.<init>:()V` @kind direct;
  #L3ef8c2.  v0.`l.f0.j.d.c` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L3ef8c6.  v0.`l.f0.j.d.d` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L3ef8ca.  v0.`l.f0.j.d.e` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L3ef8ce.  v0.`l.f0.j.d.f` @type ^`java.lang.Class` := v4 @kind object;
  #L3ef8d2.  v0.`l.f0.j.d.g` @type ^`java.lang.Class` := v5 @kind object;
  #L3ef8d6.  return @kind void;
}
procedure `l.f0.j.f` `b`() @signature `Ll/f0/j/d;.b:()Ll/f0/j/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3ef7a0.  v0:= "org.eclipse.jetty.alpn.ALPN" @kind object;
  #L3ef7a4.  v1:= "org.eclipse.jetty.alpn.ALPN" @kind object;
  #L3ef7a8.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L3ef7ae.  v1:= temp @kind object;
  #L3ef7b0.  v2:= new `java.lang.StringBuilder`;
  #L3ef7b4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ef7ba.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ef7c0.  v3:= "$Provider" @kind object;
  #L3ef7c4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ef7ca.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ef7d0.  v2:= temp @kind object;
  #L3ef7d2.  call temp:= `forName`(v2) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L3ef7d8.  v2:= temp @kind object;
  #L3ef7da.  v3:= new `java.lang.StringBuilder`;
  #L3ef7de.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ef7e4.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ef7ea.  v4:= "$ClientProvider" @kind object;
  #L3ef7ee.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ef7f4.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ef7fa.  v3:= temp @kind object;
  #L3ef7fc.  call temp:= `forName`(v3) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L3ef802.  v8:= temp @kind object;
  #L3ef804.  v3:= new `java.lang.StringBuilder`;
  #L3ef808.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ef80e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ef814.  v0:= "$ServerProvider" @kind object;
  #L3ef818.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ef81e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ef824.  v0:= temp @kind object;
  #L3ef826.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L3ef82c.  v9:= temp @kind object;
  #L3ef82e.  v0:= "put" @kind object;
  #L3ef832.  v3:= 2I;
  #L3ef834.  v3:= new `java.lang.Class`[v3];
  #L3ef838.  v4:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L3ef83c.  v5:= 0I;
  #L3ef83e.  v3[v5]:= v4 @kind object;
  #L3ef842.  v4:= 1I;
  #L3ef844.  v3[v4]:= v2 @kind object;
  #L3ef848.  call temp:= `getMethod`(v1, v0, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L3ef84e.  v0:= temp @kind object;
  #L3ef850.  v2:= "get" @kind object;
  #L3ef854.  v3:= new `java.lang.Class`[v4];
  #L3ef858.  v6:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L3ef85c.  v3[v5]:= v6 @kind object;
  #L3ef860.  call temp:= `getMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L3ef866.  v6:= temp @kind object;
  #L3ef868.  v2:= "remove" @kind object;
  #L3ef86c.  v3:= new `java.lang.Class`[v4];
  #L3ef870.  v4:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L3ef874.  v3[v5]:= v4 @kind object;
  #L3ef878.  call temp:= `getMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L3ef87e.  v7:= temp @kind object;
  #L3ef880.  v1:= new `l.f0.j.d`;
  #L3ef884.  v4:= v1 @kind object;
  #L3ef886.  v5:= v0 @kind object;
  #L3ef888.  call `<init>`(v4, v5, v6, v7, v8, v9) @signature `Ll/f0/j/d;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Class;)V` @kind direct;
  #L3ef88e.  return v1 @kind object;
  #L3ef890.  v0:= 0I;
  #L3ef892.  return v0 @kind object;
  catch `java.lang.ClassNotFoundException` @[L3ef7a0..L3ef7a4] goto L3ef890;
  catch `java.lang.NoSuchMethodException` @[L3ef7a0..L3ef7a4] goto L3ef890;
  catch `java.lang.ClassNotFoundException` @[L3ef7a8..L3ef88e] goto L3ef890;
  catch `java.lang.NoSuchMethodException` @[L3ef7a8..L3ef88e] goto L3ef890;
}
procedure `void` `a`(`l.f0.j.d` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `Ll/f0/j/d;.a:(Ljavax/net/ssl/SSLSocket;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ef8e8.  v0:= v4.`l.f0.j.d.e` @type ^`java.lang.reflect.Method` @kind object;
  #L3ef8ec.  v1:= 0I;
  #L3ef8ee.  v2:= 1I;
  #L3ef8f0.  v2:= new `java.lang.Object`[v2];
  #L3ef8f4.  v3:= 0I;
  #L3ef8f6.  v2[v3]:= v5 @kind object;
  #L3ef8fa.  call temp:= `invoke`(v0, v1, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3ef900.  return @kind void;
  #L3ef902.  v5:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L3ef904.  goto L3ef908;
  #L3ef906.  v5:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L3ef908.  v0:= "unable to remove alpn" @kind object;
  #L3ef90c.  call temp:= `a`(v0, v5) @signature `Ll/f0/c;.a:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L3ef912.  v5:= temp @kind object;
  #L3ef914.  throw v5;
  catch `java.lang.IllegalAccessException` @[L3ef8e8..L3ef900] goto L3ef906;
  catch `java.lang.reflect.InvocationTargetException` @[L3ef8e8..L3ef900] goto L3ef902;
}
procedure `void` `a`(`l.f0.j.d` v5 @kind this, `javax.net.ssl.SSLSocket` v6 @kind object, `java.lang.String` v7 @kind object, `java.util.List` v8 @kind object) @signature `Ll/f0/j/d;.a:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ef938.  call temp:= `a`(v8) @signature `Ll/f0/j/f;.a:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L3ef93e.  v7:= temp @kind object;
  #L3ef940.  v8:= constclass @type ^`l.f0.j.f` @kind object;
  #L3ef944.  call temp:= `getClassLoader`(v8) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L3ef94a.  v8:= temp @kind object;
  #L3ef94c.  v0:= 2I;
  #L3ef94e.  v1:= new `java.lang.Class`[v0];
  #L3ef952.  v2:= v5.`l.f0.j.d.f` @type ^`java.lang.Class` @kind object;
  #L3ef956.  v3:= 0I;
  #L3ef958.  v1[v3]:= v2 @kind object;
  #L3ef95c.  v2:= v5.`l.f0.j.d.g` @type ^`java.lang.Class` @kind object;
  #L3ef960.  v4:= 1I;
  #L3ef962.  v1[v4]:= v2 @kind object;
  #L3ef966.  v2:= new `l.f0.j.d$a`;
  #L3ef96a.  call `<init>`(v2, v7) @signature `Ll/f0/j/d$a;.<init>:(Ljava/util/List;)V` @kind direct;
  #L3ef970.  call temp:= `newProxyInstance`(v8, v1, v2) @signature `Ljava/lang/reflect/Proxy;.newProxyInstance:(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;` @kind static;
  #L3ef976.  v7:= temp @kind object;
  #L3ef978.  v8:= v5.`l.f0.j.d.c` @type ^`java.lang.reflect.Method` @kind object;
  #L3ef97c.  v1:= 0I;
  #L3ef97e.  v0:= new `java.lang.Object`[v0];
  #L3ef982.  v0[v3]:= v6 @kind object;
  #L3ef986.  v0[v4]:= v7 @kind object;
  #L3ef98a.  call temp:= `invoke`(v8, v1, v0) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3ef990.  return @kind void;
  #L3ef992.  v6:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L3ef994.  goto L3ef998;
  #L3ef996.  v6:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L3ef998.  v7:= "unable to set alpn" @kind object;
  #L3ef99c.  call temp:= `a`(v7, v6) @signature `Ll/f0/c;.a:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L3ef9a2.  v6:= temp @kind object;
  #L3ef9a4.  throw v6;
  catch `java.lang.reflect.InvocationTargetException` @[L3ef940..L3ef990] goto L3ef996;
  catch `java.lang.IllegalAccessException` @[L3ef940..L3ef990] goto L3ef992;
}
procedure `java.lang.String` `b`(`l.f0.j.d` v3 @kind this, `javax.net.ssl.SSLSocket` v4 @kind object) @signature `Ll/f0/j/d;.b:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ef710.  v0:= v3.`l.f0.j.d.d` @type ^`java.lang.reflect.Method` @kind object;
  #L3ef714.  v1:= 1I;
  #L3ef716.  v1:= new `java.lang.Object`[v1];
  #L3ef71a.  v2:= 0I;
  #L3ef71c.  v1[v2]:= v4 @kind object;
  #L3ef720.  v4:= 0I;
  #L3ef722.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3ef728.  v0:= temp @kind object;
  #L3ef72a.  call temp:= `getInvocationHandler`(v0) @signature `Ljava/lang/reflect/Proxy;.getInvocationHandler:(Ljava/lang/Object;)Ljava/lang/reflect/InvocationHandler;` @kind static;
  #L3ef730.  v0:= temp @kind object;
  #L3ef732.  v0:= (`l.f0.j.d$a`) v0 @kind object;
  #L3ef736.  v1:= v0.`l.f0.j.d$a.b` @type ^`boolean` @kind boolean;
  #L3ef73a.  if v1 != 0 then goto L3ef75c;
  #L3ef73e.  v1:= v0.`l.f0.j.d$a.c` @type ^`java.lang.String` @kind object;
  #L3ef742.  if v1 != 0 then goto L3ef75c;
  #L3ef746.  call temp:= `c`() @signature `Ll/f0/j/f;.c:()Ll/f0/j/f;` @kind static;
  #L3ef74c.  v0:= temp @kind object;
  #L3ef74e.  v1:= 4I;
  #L3ef750.  v2:= "ALPN callback dropped: HTTP/2 is disabled. Is alpn-boot on the boot class path?" @kind object;
  #L3ef754.  call `a`(v0, v1, v2, v4) @signature `Ll/f0/j/f;.a:(ILjava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L3ef75a.  return v4 @kind object;
  #L3ef75c.  v1:= v0.`l.f0.j.d$a.b` @type ^`boolean` @kind boolean;
  #L3ef760.  if v1 == 0 then goto L3ef766;
  #L3ef764.  goto L3ef76a;
  #L3ef766.  v4:= v0.`l.f0.j.d$a.c` @type ^`java.lang.String` @kind object;
  #L3ef76a.  return v4 @kind object;
  #L3ef76c.  v4:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L3ef76e.  goto L3ef772;
  #L3ef770.  v4:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L3ef772.  v0:= "unable to get selected protocol" @kind object;
  #L3ef776.  call temp:= `a`(v0, v4) @signature `Ll/f0/c;.a:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L3ef77c.  v4:= temp @kind object;
  #L3ef77e.  throw v4;
  catch `java.lang.reflect.InvocationTargetException` @[L3ef710..L3ef76a] goto L3ef770;
  catch `java.lang.IllegalAccessException` @[L3ef710..L3ef76a] goto L3ef76c;
}
