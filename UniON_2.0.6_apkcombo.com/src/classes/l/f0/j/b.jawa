record `l.f0.j.b` @kind class @AccessFlag PUBLIC extends `l.f0.j.f` @kind class {
}
procedure `void` `<init>`(`l.f0.j.b` v0 @kind this) @signature `Ll/f0/j/b;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3ef390.  call `<init>`(v0) @signature `Ll/f0/j/f;.<init>:()V` @kind direct;
  #L3ef396.  return @kind void;
}
procedure `l.f0.j.b` `b`() @signature `Ll/f0/j/b;.b:()Ll/f0/j/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3ef348.  v0:= "org.conscrypt.Conscrypt" @kind object;
  #L3ef34c.  v1:= 0I;
  #L3ef34e.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L3ef354.  call temp:= `isAvailable`() @signature `Lorg/conscrypt/Conscrypt;.isAvailable:()Z` @kind static;
  #L3ef35a.  v0:= temp;
  #L3ef35c.  if v0 != 0 then goto L3ef362;
  #L3ef360.  return v1 @kind object;
  #L3ef362.  v0:= new `l.f0.j.b`;
  #L3ef366.  call `<init>`(v0) @signature `Ll/f0/j/b;.<init>:()V` @kind direct;
  #L3ef36c.  return v0 @kind object;
  #L3ef36e.  return v1 @kind object;
  catch `java.lang.ClassNotFoundException` @[L3ef34e..L3ef36c] goto L3ef36e;
}
procedure `java.security.Provider` `e`(`l.f0.j.b` v1 @kind this) @signature `Ll/f0/j/b;.e:()Ljava/security/Provider;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3ef2b0.  call temp:= `newProviderBuilder`() @signature `Lorg/conscrypt/Conscrypt;.newProviderBuilder:()Lorg/conscrypt/Conscrypt$ProviderBuilder;` @kind static;
  #L3ef2b6.  v0:= temp @kind object;
  #L3ef2b8.  call temp:= `provideTrustManager`(v0) @signature `Lorg/conscrypt/Conscrypt$ProviderBuilder;.provideTrustManager:()Lorg/conscrypt/Conscrypt$ProviderBuilder;` @kind virtual;
  #L3ef2be.  v0:= temp @kind object;
  #L3ef2c0.  call temp:= `build`(v0) @signature `Lorg/conscrypt/Conscrypt$ProviderBuilder;.build:()Ljava/security/Provider;` @kind virtual;
  #L3ef2c6.  v0:= temp @kind object;
  #L3ef2c8.  return v0 @kind object;
}
procedure `javax.net.ssl.SSLContext` `a`(`l.f0.j.b` v3 @kind this) @signature `Ll/f0/j/b;.a:()Ljavax/net/ssl/SSLContext;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ef2dc.  v0:= "TLSv1.3" @kind object;
  #L3ef2e0.  call temp:= `e`(v3) @signature `Ll/f0/j/b;.e:()Ljava/security/Provider;` @kind direct;
  #L3ef2e6.  v1:= temp @kind object;
  #L3ef2e8.  call temp:= `getInstance`(v0, v1) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;Ljava/security/Provider;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L3ef2ee.  v0:= temp @kind object;
  #L3ef2f0.  return v0 @kind object;
  #L3ef2f2.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L3ef2f4.  v1:= "TLS" @kind object;
  #L3ef2f8.  call temp:= `e`(v3) @signature `Ll/f0/j/b;.e:()Ljava/security/Provider;` @kind direct;
  #L3ef2fe.  v2:= temp @kind object;
  #L3ef300.  call temp:= `getInstance`(v1, v2) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;Ljava/security/Provider;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L3ef306.  v0:= temp @kind object;
  #L3ef308.  return v0 @kind object;
  #L3ef30a.  v1:= new `java.lang.IllegalStateException`;
  #L3ef30e.  v2:= "No TLS provider" @kind object;
  #L3ef312.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L3ef318.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[L3ef2dc..L3ef2f0] goto L3ef2f2;
  catch `java.security.NoSuchAlgorithmException` @[L3ef2f4..L3ef308] goto L3ef30a;
}
procedure `void` `a`(`l.f0.j.b` v1 @kind this, `javax.net.ssl.SSLSocket` v2 @kind object, `java.lang.String` v3 @kind object, `java.util.List` v4 @kind object) @signature `Ll/f0/j/b;.a:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ef3d0.  call temp:= `isConscrypt`(v2) @signature `Lorg/conscrypt/Conscrypt;.isConscrypt:(Ljavax/net/ssl/SSLSocket;)Z` @kind static;
  #L3ef3d6.  v0:= temp;
  #L3ef3d8.  if v0 == 0 then goto L3ef410;
  #L3ef3dc.  if v3 == 0 then goto L3ef3ee;
  #L3ef3e0.  v0:= 1I;
  #L3ef3e2.  call `setUseSessionTickets`(v2, v0) @signature `Lorg/conscrypt/Conscrypt;.setUseSessionTickets:(Ljavax/net/ssl/SSLSocket;Z)V` @kind static;
  #L3ef3e8.  call `setHostname`(v2, v3) @signature `Lorg/conscrypt/Conscrypt;.setHostname:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;)V` @kind static;
  #L3ef3ee.  call temp:= `a`(v4) @signature `Ll/f0/j/f;.a:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L3ef3f4.  v3:= temp @kind object;
  #L3ef3f6.  v4:= 0I;
  #L3ef3f8.  v4:= new `java.lang.String`[v4];
  #L3ef3fc.  call temp:= `toArray`(v3, v4) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L3ef402.  v3:= temp @kind object;
  #L3ef404.  v3:= (`java.lang.String`[]) v3 @kind object;
  #L3ef408.  call `setApplicationProtocols`(v2, v3) @signature `Lorg/conscrypt/Conscrypt;.setApplicationProtocols:(Ljavax/net/ssl/SSLSocket;[Ljava/lang/String;)V` @kind static;
  #L3ef40e.  goto L3ef416;
  #L3ef410.  call `a`(v1, v2, v3, v4) @signature `Ll/f0/j/f;.a:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @kind super;
  #L3ef416.  return @kind void;
}
procedure `void` `a`(`l.f0.j.b` v1 @kind this, `javax.net.ssl.SSLSocketFactory` v2 @kind object) @signature `Ll/f0/j/b;.a:(Ljavax/net/ssl/SSLSocketFactory;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ef3a8.  call temp:= `isConscrypt`(v2) @signature `Lorg/conscrypt/Conscrypt;.isConscrypt:(Ljavax/net/ssl/SSLSocketFactory;)Z` @kind static;
  #L3ef3ae.  v0:= temp;
  #L3ef3b0.  if v0 == 0 then goto L3ef3bc;
  #L3ef3b4.  v0:= 1I;
  #L3ef3b6.  call `setUseEngineSocket`(v2, v0) @signature `Lorg/conscrypt/Conscrypt;.setUseEngineSocket:(Ljavax/net/ssl/SSLSocketFactory;Z)V` @kind static;
  #L3ef3bc.  return @kind void;
}
procedure `java.lang.String` `b`(`l.f0.j.b` v1 @kind this, `javax.net.ssl.SSLSocket` v2 @kind object) @signature `Ll/f0/j/b;.b:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ef280.  call temp:= `isConscrypt`(v2) @signature `Lorg/conscrypt/Conscrypt;.isConscrypt:(Ljavax/net/ssl/SSLSocket;)Z` @kind static;
  #L3ef286.  v0:= temp;
  #L3ef288.  if v0 == 0 then goto L3ef296;
  #L3ef28c.  call temp:= `getApplicationProtocol`(v2) @signature `Lorg/conscrypt/Conscrypt;.getApplicationProtocol:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @kind static;
  #L3ef292.  v2:= temp @kind object;
  #L3ef294.  return v2 @kind object;
  #L3ef296.  call temp:= `b`(v1, v2) @signature `Ll/f0/j/f;.b:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @kind super;
  #L3ef29c.  v2:= temp @kind object;
  #L3ef29e.  return v2 @kind object;
}
