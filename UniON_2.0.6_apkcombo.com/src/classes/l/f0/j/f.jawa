record `l.f0.j.f` @kind class @AccessFlag PUBLIC {
}
global `l.f0.j.f` `@@l.f0.j.f.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.logging.Logger` `@@l.f0.j.f.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ll/f0/j/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3eff38.  call temp:= `b`() @signature `Ll/f0/j/f;.b:()Ll/f0/j/f;` @kind static;
  #L3eff3e.  v0:= temp @kind object;
  #L3eff40.  `@@l.f0.j.f.a` @type ^`l.f0.j.f` := v0 @kind object;
  #L3eff44.  v0:= constclass @type ^`l.v` @kind object;
  #L3eff48.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3eff4e.  v0:= temp @kind object;
  #L3eff50.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L3eff56.  v0:= temp @kind object;
  #L3eff58.  `@@l.f0.j.f.b` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L3eff5c.  return @kind void;
}
procedure `void` `<init>`(`l.f0.j.f` v0 @kind this) @signature `Ll/f0/j/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3eff70.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3eff76.  return @kind void;
}
procedure `java.util.List` `a`(`java.util.List` v5 @kind object) @signature `Ll/f0/j/f;.a:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3efda4.  v0:= new `java.util.ArrayList`;
  #L3efda8.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3efdae.  v1:= temp;
  #L3efdb0.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3efdb6.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3efdbc.  v1:= temp;
  #L3efdbe.  v2:= 0I;
  #L3efdc0.  if v2 >= v1 then goto L3efdee;
  #L3efdc4.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3efdca.  v3:= temp @kind object;
  #L3efdcc.  v3:= (`l.w`) v3 @kind object;
  #L3efdd0.  v4:= `@@l.w.c` @type ^`l.w` @kind object;
  #L3efdd4.  if v3 != v4 then goto L3efdda;
  #L3efdd8.  goto L3efde8;
  #L3efdda.  call temp:= `toString`(v3) @signature `Ll/w;.toString:()Ljava/lang/String;` @kind virtual;
  #L3efde0.  v3:= temp @kind object;
  #L3efde2.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3efde8.  v2:= v2 + 1;
  #L3efdec.  goto L3efdc0;
  #L3efdee.  return v0 @kind object;
}
procedure `l.f0.j.f` `b`() @signature `Ll/f0/j/f;.b:()Ll/f0/j/f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3efe78.  call temp:= `b`() @signature `Ll/f0/j/a;.b:()Ll/f0/j/f;` @kind static;
  #L3efe7e.  v0:= temp @kind object;
  #L3efe80.  if v0 == 0 then goto L3efe86;
  #L3efe84.  return v0 @kind object;
  #L3efe86.  call temp:= `d`() @signature `Ll/f0/j/f;.d:()Z` @kind static;
  #L3efe8c.  v0:= temp;
  #L3efe8e.  if v0 == 0 then goto L3efea0;
  #L3efe92.  call temp:= `b`() @signature `Ll/f0/j/b;.b:()Ll/f0/j/b;` @kind static;
  #L3efe98.  v0:= temp @kind object;
  #L3efe9a.  if v0 == 0 then goto L3efea0;
  #L3efe9e.  return v0 @kind object;
  #L3efea0.  call temp:= `b`() @signature `Ll/f0/j/c;.b:()Ll/f0/j/c;` @kind static;
  #L3efea6.  v0:= temp @kind object;
  #L3efea8.  if v0 == 0 then goto L3efeae;
  #L3efeac.  return v0 @kind object;
  #L3efeae.  call temp:= `b`() @signature `Ll/f0/j/d;.b:()Ll/f0/j/f;` @kind static;
  #L3efeb4.  v0:= temp @kind object;
  #L3efeb6.  if v0 == 0 then goto L3efebc;
  #L3efeba.  return v0 @kind object;
  #L3efebc.  v0:= new `l.f0.j.f`;
  #L3efec0.  call `<init>`(v0) @signature `Ll/f0/j/f;.<init>:()V` @kind direct;
  #L3efec6.  return v0 @kind object;
}
procedure `byte`[] `b`(`java.util.List` v5 @kind object) @signature `Ll/f0/j/f;.b:(Ljava/util/List;)[B` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3efcc4.  v0:= new `m.c`;
  #L3efcc8.  call `<init>`(v0) @signature `Lm/c;.<init>:()V` @kind direct;
  #L3efcce.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3efcd4.  v1:= temp;
  #L3efcd6.  v2:= 0I;
  #L3efcd8.  if v2 >= v1 then goto L3efd1c;
  #L3efcdc.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3efce2.  v3:= temp @kind object;
  #L3efce4.  v3:= (`l.w`) v3 @kind object;
  #L3efce8.  v4:= `@@l.w.c` @type ^`l.w` @kind object;
  #L3efcec.  if v3 != v4 then goto L3efcf2;
  #L3efcf0.  goto L3efd16;
  #L3efcf2.  call temp:= `toString`(v3) @signature `Ll/w;.toString:()Ljava/lang/String;` @kind virtual;
  #L3efcf8.  v4:= temp @kind object;
  #L3efcfa.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3efd00.  v4:= temp;
  #L3efd02.  call temp:= `writeByte`(v0, v4) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3efd08.  call temp:= `toString`(v3) @signature `Ll/w;.toString:()Ljava/lang/String;` @kind virtual;
  #L3efd0e.  v3:= temp @kind object;
  #L3efd10.  call temp:= `a`(v0, v3) @signature `Lm/c;.a:(Ljava/lang/String;)Lm/c;` @kind virtual;
  #L3efd16.  v2:= v2 + 1;
  #L3efd1a.  goto L3efcd8;
  #L3efd1c.  call temp:= `s`(v0) @signature `Lm/c;.s:()[B` @kind virtual;
  #L3efd22.  v5:= temp @kind object;
  #L3efd24.  return v5 @kind object;
}
procedure `l.f0.j.f` `c`() @signature `Ll/f0/j/f;.c:()Ll/f0/j/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3efed8.  v0:= `@@l.f0.j.f.a` @type ^`l.f0.j.f` @kind object;
  #L3efedc.  return v0 @kind object;
}
procedure `boolean` `d`() @signature `Ll/f0/j/f;.d:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3efc70.  v0:= "okhttp.platform" @kind object;
  #L3efc74.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3efc7a.  v0:= temp @kind object;
  #L3efc7c.  v1:= "conscrypt" @kind object;
  #L3efc80.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3efc86.  v0:= temp;
  #L3efc88.  if v0 == 0 then goto L3efc90;
  #L3efc8c.  v0:= 1I;
  #L3efc8e.  return v0;
  #L3efc90.  call temp:= `getProviders`() @signature `Ljava/security/Security;.getProviders:()[Ljava/security/Provider;` @kind static;
  #L3efc96.  v0:= temp @kind object;
  #L3efc98.  v1:= 0I;
  #L3efc9a.  v0:= v0[v1] @kind object;
  #L3efc9e.  call temp:= `getName`(v0) @signature `Ljava/security/Provider;.getName:()Ljava/lang/String;` @kind virtual;
  #L3efca4.  v0:= temp @kind object;
  #L3efca6.  v1:= "Conscrypt" @kind object;
  #L3efcaa.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3efcb0.  v0:= temp;
  #L3efcb2.  return v0;
}
procedure `java.lang.Object` `a`(`l.f0.j.f` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Ll/f0/j/f;.a:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3efd38.  v0:= `@@l.f0.j.f.b` @type ^`java.util.logging.Logger` @kind object;
  #L3efd3c.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L3efd40.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L3efd46.  v0:= temp;
  #L3efd48.  if v0 == 0 then goto L3efd58;
  #L3efd4c.  v0:= new `java.lang.Throwable`;
  #L3efd50.  call `<init>`(v0, v3) @signature `Ljava/lang/Throwable;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3efd56.  return v0 @kind object;
  #L3efd58.  v3:= 0I;
  #L3efd5a.  return v3 @kind object;
}
procedure `javax.net.ssl.SSLContext` `a`(`l.f0.j.f` v3 @kind this) @signature `Ll/f0/j/f;.a:()Ljavax/net/ssl/SSLContext;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3efe00.  v0:= "java.specification.version" @kind object;
  #L3efe04.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3efe0a.  v0:= temp @kind object;
  #L3efe0c.  v1:= "1.7" @kind object;
  #L3efe10.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3efe16.  v0:= temp;
  #L3efe18.  if v0 == 0 then goto L3efe2a;
  #L3efe1c.  v0:= "TLSv1.2" @kind object;
  #L3efe20.  call temp:= `getInstance`(v0) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L3efe26.  v0:= temp @kind object;
  #L3efe28.  return v0 @kind object;
  #L3efe2a.  v0:= "TLS" @kind object;
  #L3efe2e.  call temp:= `getInstance`(v0) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L3efe34.  v0:= temp @kind object;
  #L3efe36.  return v0 @kind object;
  #L3efe38.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L3efe3a.  v1:= new `java.lang.IllegalStateException`;
  #L3efe3e.  v2:= "No TLS provider" @kind object;
  #L3efe42.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L3efe48.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[L3efe1c..L3efe28] goto L3efe2a;
  catch `java.security.NoSuchAlgorithmException` @[L3efe2a..L3efe36] goto L3efe38;
}
procedure `l.f0.l.c` `a`(`l.f0.j.f` v1 @kind this, `javax.net.ssl.X509TrustManager` v2 @kind object) @signature `Ll/f0/j/f;.a:(Ljavax/net/ssl/X509TrustManager;)Ll/f0/l/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3efef0.  v0:= new `l.f0.l.a`;
  #L3efef4.  call temp:= `b`(v1, v2) @signature `Ll/f0/j/f;.b:(Ljavax/net/ssl/X509TrustManager;)Ll/f0/l/e;` @kind virtual;
  #L3efefa.  v2:= temp @kind object;
  #L3efefc.  call `<init>`(v0, v2) @signature `Ll/f0/l/a;.<init>:(Ll/f0/l/e;)V` @kind direct;
  #L3eff02.  return v0 @kind object;
}
procedure `void` `a`(`l.f0.j.f` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Ll/f0/j/f;.a:(ILjava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3effdc.  v0:= 5I;
  #L3effde.  if v2 != v0 then goto L3effe8;
  #L3effe2.  v2:= `@@java.util.logging.Level.WARNING` @type ^`java.util.logging.Level` @kind object;
  #L3effe6.  goto L3effec;
  #L3effe8.  v2:= `@@java.util.logging.Level.INFO` @type ^`java.util.logging.Level` @kind object;
  #L3effec.  v0:= `@@l.f0.j.f.b` @type ^`java.util.logging.Logger` @kind object;
  #L3efff0.  call `log`(v0, v2, v3, v4) @signature `Ljava/util/logging/Logger;.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L3efff6.  return @kind void;
}
procedure `void` `a`(`l.f0.j.f` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Ll/f0/j/f;.a:(Ljava/lang/String;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f0008.  if v3 != 0 then goto L3f002e;
  #L3f000c.  v0:= new `java.lang.StringBuilder`;
  #L3f0010.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f0016.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f001c.  v2:= " To see where this was allocated, set the OkHttpClient logger level to FINE: Logger.getLogger(OkHttpClient.class.getName()).setLevel(Level.FINE);" @kind object;
  #L3f0020.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f0026.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f002c.  v2:= temp @kind object;
  #L3f002e.  v0:= 5I;
  #L3f0030.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L3f0034.  call `a`(v1, v0, v2, v3) @signature `Ll/f0/j/f;.a:(ILjava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L3f003a.  return @kind void;
}
procedure `void` `a`(`l.f0.j.f` v0 @kind this, `java.net.Socket` v1 @kind object, `java.net.InetSocketAddress` v2 @kind object, `int` v3 ) @signature `Ll/f0/j/f;.a:(Ljava/net/Socket;Ljava/net/InetSocketAddress;I)V` @AccessFlag PUBLIC {
    temp;

  #L3effc4.  call `connect`(v1, v2, v3) @signature `Ljava/net/Socket;.connect:(Ljava/net/SocketAddress;I)V` @kind virtual;
  #L3effca.  return @kind void;
}
procedure `void` `a`(`l.f0.j.f` v0 @kind this, `javax.net.ssl.SSLSocket` v1 @kind object) @signature `Ll/f0/j/f;.a:(Ljavax/net/ssl/SSLSocket;)V` @AccessFlag PUBLIC {
    temp;

  #L3eff88.  return @kind void;
}
procedure `void` `a`(`l.f0.j.f` v0 @kind this, `javax.net.ssl.SSLSocket` v1 @kind object, `java.lang.String` v2 @kind object, `java.util.List` v3 @kind object) @signature `Ll/f0/j/f;.a:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;

  #L3effb0.  return @kind void;
}
procedure `void` `a`(`l.f0.j.f` v0 @kind this, `javax.net.ssl.SSLSocketFactory` v1 @kind object) @signature `Ll/f0/j/f;.a:(Ljavax/net/ssl/SSLSocketFactory;)V` @AccessFlag PUBLIC {
    temp;

  #L3eff9c.  return @kind void;
}
procedure `java.lang.String` `b`(`l.f0.j.f` v0 @kind this, `javax.net.ssl.SSLSocket` v1 @kind object) @signature `Ll/f0/j/f;.b:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3efd6c.  v1:= 0I;
  #L3efd6e.  return v1 @kind object;
}
procedure `l.f0.l.e` `b`(`l.f0.j.f` v1 @kind this, `javax.net.ssl.X509TrustManager` v2 @kind object) @signature `Ll/f0/j/f;.b:(Ljavax/net/ssl/X509TrustManager;)Ll/f0/l/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eff14.  v0:= new `l.f0.l.b`;
  #L3eff18.  call temp:= `getAcceptedIssuers`(v2) @signature `Ljavax/net/ssl/X509TrustManager;.getAcceptedIssuers:()[Ljava/security/cert/X509Certificate;` @kind interface;
  #L3eff1e.  v2:= temp @kind object;
  #L3eff20.  call `<init>`(v0, v2) @signature `Ll/f0/l/b;.<init>:([Ljava/security/cert/X509Certificate;)V` @kind direct;
  #L3eff26.  return v0 @kind object;
}
procedure `boolean` `b`(`l.f0.j.f` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Ll/f0/j/f;.b:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;

  #L3efc5c.  v1:= 1I;
  #L3efc5e.  return v1;
}
procedure `java.lang.String` `toString`(`l.f0.j.f` v1 @kind this) @signature `Ll/f0/j/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3efd80.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3efd86.  v0:= temp @kind object;
  #L3efd88.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L3efd8e.  v0:= temp @kind object;
  #L3efd90.  return v0 @kind object;
}
