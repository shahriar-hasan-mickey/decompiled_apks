record `l.f0.j.e` @kind class @AccessFlag  {
  `java.lang.Class` `l.f0.j.e.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `l.f0.j.e.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class`[] `l.f0.j.e.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`l.f0.j.e` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `Ll/f0/j/e;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3efc38.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3efc3e.  v0.`l.f0.j.e.a` @type ^`java.lang.Class` := v1 @kind object;
  #L3efc42.  v0.`l.f0.j.e.b` @type ^`java.lang.String` := v2 @kind object;
  #L3efc46.  v0.`l.f0.j.e.c` @type ^`java.lang.Class`[] := v3 @kind object;
  #L3efc4a.  return @kind void;
}
procedure `java.lang.reflect.Method` `a`(`l.f0.j.e` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Ll/f0/j/e;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3efba0.  v0:= v3.`l.f0.j.e.b` @type ^`java.lang.String` @kind object;
  #L3efba4.  v1:= 0I;
  #L3efba6.  if v0 == 0 then goto L3efbda;
  #L3efbaa.  v2:= v3.`l.f0.j.e.c` @type ^`java.lang.Class`[] @kind object;
  #L3efbae.  call temp:= `a`(v4, v0, v2) @signature `Ll/f0/j/e;.a:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L3efbb4.  v4:= temp @kind object;
  #L3efbb6.  if v4 == 0 then goto L3efbd8;
  #L3efbba.  v0:= v3.`l.f0.j.e.a` @type ^`java.lang.Class` @kind object;
  #L3efbbe.  if v0 == 0 then goto L3efbd8;
  #L3efbc2.  call temp:= `getReturnType`(v4) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L3efbc8.  v2:= temp @kind object;
  #L3efbca.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3efbd0.  v0:= temp;
  #L3efbd2.  if v0 != 0 then goto L3efbd8;
  #L3efbd6.  goto L3efbda;
  #L3efbd8.  v1:= v4 @kind object;
  #L3efbda.  return v1 @kind object;
}
procedure `java.lang.reflect.Method` `a`(`java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `Ll/f0/j/e;.a:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3efbec.  v0:= 0I;
  #L3efbee.  call temp:= `getMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L3efbf4.  v1:= temp @kind object;
  #L3efbf6.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L3efbfc.  v2:= temp;
  #L3efbfe.  v2:= v2 ^& 1;
  #L3efc02.  if v2 != 0 then goto L3efc08;
  #L3efc06.  v1:= v0 @kind object;
  #L3efc08.  return v1 @kind object;
  catch `java.lang.NoSuchMethodException` @[L3efbee..L3efbf6] goto L3efc06;
  catch `java.lang.NoSuchMethodException` @[L3efbf6..L3efbfe] goto L3efc08;
}
procedure `java.lang.Object` `a`(`l.f0.j.e` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Ll/f0/j/e;.a:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ef9f4.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3ef9fa.  v0:= temp @kind object;
  #L3ef9fc.  call temp:= `a`(v3, v0) @signature `Ll/f0/j/e;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L3efa02.  v0:= temp @kind object;
  #L3efa04.  if v0 == 0 then goto L3efa48;
  #L3efa08.  call temp:= `invoke`(v0, v4, v5) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3efa0e.  v4:= temp @kind object;
  #L3efa10.  return v4 @kind object;
  #L3efa12.  v4:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L3efa14.  v5:= new `java.lang.AssertionError`;
  #L3efa18.  v1:= new `java.lang.StringBuilder`;
  #L3efa1c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3efa22.  v2:= "Unexpectedly could not call: " @kind object;
  #L3efa26.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3efa2c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3efa32.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3efa38.  v0:= temp @kind object;
  #L3efa3a.  call `<init>`(v5, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3efa40.  call temp:= `initCause`(v5, v4) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3efa46.  throw v5;
  #L3efa48.  v5:= new `java.lang.AssertionError`;
  #L3efa4c.  v0:= new `java.lang.StringBuilder`;
  #L3efa50.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3efa56.  v1:= "Method " @kind object;
  #L3efa5a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3efa60.  v1:= v3.`l.f0.j.e.b` @type ^`java.lang.String` @kind object;
  #L3efa64.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3efa6a.  v1:= " not supported for object " @kind object;
  #L3efa6e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3efa74.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3efa7a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3efa80.  v4:= temp @kind object;
  #L3efa82.  call `<init>`(v5, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3efa88.  throw v5;
  catch `java.lang.IllegalAccessException` @[L3efa08..L3efa10] goto L3efa12;
}
procedure `boolean` `a`(`l.f0.j.e` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Ll/f0/j/e;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L3ef9c8.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3ef9ce.  v1:= temp @kind object;
  #L3ef9d0.  call temp:= `a`(v0, v1) @signature `Ll/f0/j/e;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L3ef9d6.  v1:= temp @kind object;
  #L3ef9d8.  if v1 == 0 then goto L3ef9e0;
  #L3ef9dc.  v1:= 1I;
  #L3ef9de.  goto L3ef9e2;
  #L3ef9e0.  v1:= 0I;
  #L3ef9e2.  return v1;
}
procedure `java.lang.Object` `b`(`l.f0.j.e` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Ll/f0/j/e;.b:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3efaac.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3efab2.  v0:= temp @kind object;
  #L3efab4.  call temp:= `a`(v2, v0) @signature `Ll/f0/j/e;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L3efaba.  v0:= temp @kind object;
  #L3efabc.  v1:= 0I;
  #L3efabe.  if v0 != 0 then goto L3efac4;
  #L3efac2.  return v1 @kind object;
  #L3efac4.  call temp:= `invoke`(v0, v3, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3efaca.  v3:= temp @kind object;
  #L3efacc.  return v3 @kind object;
  #L3eface.  return v1 @kind object;
  catch `java.lang.IllegalAccessException` @[L3efac4..L3efacc] goto L3eface;
}
procedure `java.lang.Object` `c`(`l.f0.j.e` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Ll/f0/j/e;.c:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3efaf0.  call temp:= `b`(v1, v2, v3) @signature `Ll/f0/j/e;.b:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3efaf6.  v2:= temp @kind object;
  #L3efaf8.  return v2 @kind object;
  #L3efafa.  v2:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L3efafc.  call temp:= `getTargetException`(v2) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L3efb02.  v2:= temp @kind object;
  #L3efb04.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L3efb08.  if v3 == 0 then goto L3efb12;
  #L3efb0c.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L3efb10.  throw v2;
  #L3efb12.  v3:= new `java.lang.AssertionError`;
  #L3efb16.  v0:= "Unexpected exception" @kind object;
  #L3efb1a.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3efb20.  call temp:= `initCause`(v3, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3efb26.  throw v3;
  catch `java.lang.reflect.InvocationTargetException` @[L3efaf0..L3efaf8] goto L3efafa;
}
procedure `java.lang.Object` `d`(`l.f0.j.e` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Ll/f0/j/e;.d:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3efb48.  call temp:= `a`(v1, v2, v3) @signature `Ll/f0/j/e;.a:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3efb4e.  v2:= temp @kind object;
  #L3efb50.  return v2 @kind object;
  #L3efb52.  v2:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L3efb54.  call temp:= `getTargetException`(v2) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L3efb5a.  v2:= temp @kind object;
  #L3efb5c.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L3efb60.  if v3 == 0 then goto L3efb6a;
  #L3efb64.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L3efb68.  throw v2;
  #L3efb6a.  v3:= new `java.lang.AssertionError`;
  #L3efb6e.  v0:= "Unexpected exception" @kind object;
  #L3efb72.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3efb78.  call temp:= `initCause`(v3, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3efb7e.  throw v3;
  catch `java.lang.reflect.InvocationTargetException` @[L3efb48..L3efb50] goto L3efb52;
}
