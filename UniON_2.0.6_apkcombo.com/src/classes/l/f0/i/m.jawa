record `l.f0.i.m` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `l.f0.i.m.a` @AccessFlag PRIVATE;
  `int`[] `l.f0.i.m.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`l.f0.i.m` v1 @kind this) @signature `Ll/f0/i/m;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ee85c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ee862.  v0:= 10I;
  #L3ee866.  v0:= new `int`[v0];
  #L3ee86a.  v1.`l.f0.i.m.b` @type ^`int`[] := v0 @kind object;
  #L3ee86e.  return @kind void;
}
procedure `int` `a`(`l.f0.i.m` v1 @kind this, `int` v2 ) @signature `Ll/f0/i/m;.a:(I)I` @AccessFlag  {
    temp;
    v0;

  #L3ee740.  v0:= v1.`l.f0.i.m.b` @type ^`int`[] @kind object;
  #L3ee744.  v2:= v0[v2];
  #L3ee748.  return v2;
}
procedure `l.f0.i.m` `a`(`l.f0.i.m` v3 @kind this, `int` v4 , `int` v5 ) @signature `Ll/f0/i/m;.a:(II)Ll/f0/i/m;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3ee828.  if v4 < 0 then goto L3ee84a;
  #L3ee82c.  v0:= v3.`l.f0.i.m.b` @type ^`int`[] @kind object;
  #L3ee830.  v1:= length @variable v0;
  #L3ee832.  if v4 < v1 then goto L3ee838;
  #L3ee836.  goto L3ee84a;
  #L3ee838.  v1:= 1I;
  #L3ee83a.  v1:= v1 ^< v4 @kind int;
  #L3ee83c.  v2:= v3.`l.f0.i.m.a` @type ^`int`;
  #L3ee840.  v1:= v1 ^| v2 @kind int;
  #L3ee842.  v3.`l.f0.i.m.a` @type ^`int` := v1;
  #L3ee846.  v0[v4]:= v5;
  #L3ee84a.  return v3 @kind object;
}
procedure `void` `a`(`l.f0.i.m` v2 @kind this) @signature `Ll/f0/i/m;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3ee880.  v0:= 0I;
  #L3ee882.  v2.`l.f0.i.m.a` @type ^`int` := v0;
  #L3ee886.  v1:= v2.`l.f0.i.m.b` @type ^`int`[] @kind object;
  #L3ee88a.  call `fill`(v1, v0) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L3ee890.  return @kind void;
}
procedure `void` `a`(`l.f0.i.m` v2 @kind this, `l.f0.i.m` v3 @kind object) @signature `Ll/f0/i/m;.a:(Ll/f0/i/m;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3ee8a4.  v0:= 0I;
  #L3ee8a6.  v1:= 10I;
  #L3ee8aa.  if v0 >= v1 then goto L3ee8d0;
  #L3ee8ae.  call temp:= `d`(v3, v0) @signature `Ll/f0/i/m;.d:(I)Z` @kind virtual;
  #L3ee8b4.  v1:= temp;
  #L3ee8b6.  if v1 != 0 then goto L3ee8bc;
  #L3ee8ba.  goto L3ee8ca;
  #L3ee8bc.  call temp:= `a`(v3, v0) @signature `Ll/f0/i/m;.a:(I)I` @kind virtual;
  #L3ee8c2.  v1:= temp;
  #L3ee8c4.  call temp:= `a`(v2, v0, v1) @signature `Ll/f0/i/m;.a:(II)Ll/f0/i/m;` @kind virtual;
  #L3ee8ca.  v0:= v0 + 1;
  #L3ee8ce.  goto L3ee8a6;
  #L3ee8d0.  return @kind void;
}
procedure `int` `b`(`l.f0.i.m` v2 @kind this) @signature `Ll/f0/i/m;.b:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3ee75c.  v0:= v2.`l.f0.i.m.a` @type ^`int`;
  #L3ee760.  v0:= v0 ^& 2;
  #L3ee764.  if v0 == 0 then goto L3ee774;
  #L3ee768.  v0:= v2.`l.f0.i.m.b` @type ^`int`[] @kind object;
  #L3ee76c.  v1:= 1I;
  #L3ee76e.  v0:= v0[v1];
  #L3ee772.  goto L3ee776;
  #L3ee774.  v0:= -1I;
  #L3ee776.  return v0;
}
procedure `int` `b`(`l.f0.i.m` v1 @kind this, `int` v2 ) @signature `Ll/f0/i/m;.b:(I)I` @AccessFlag  {
    temp;
    v0;

  #L3ee7b8.  v0:= v1.`l.f0.i.m.a` @type ^`int`;
  #L3ee7bc.  v0:= v0 ^& 16;
  #L3ee7c0.  if v0 == 0 then goto L3ee7ce;
  #L3ee7c4.  v2:= v1.`l.f0.i.m.b` @type ^`int`[] @kind object;
  #L3ee7c8.  v0:= 4I;
  #L3ee7ca.  v2:= v2[v0];
  #L3ee7ce.  return v2;
}
procedure `int` `c`(`l.f0.i.m` v2 @kind this) @signature `Ll/f0/i/m;.c:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3ee788.  v0:= v2.`l.f0.i.m.a` @type ^`int`;
  #L3ee78c.  v0:= v0 ^& 128;
  #L3ee790.  if v0 == 0 then goto L3ee7a0;
  #L3ee794.  v0:= v2.`l.f0.i.m.b` @type ^`int`[] @kind object;
  #L3ee798.  v1:= 7I;
  #L3ee79a.  v0:= v0[v1];
  #L3ee79e.  goto L3ee7a6;
  #L3ee7a0.  v0:= 65535I;
  #L3ee7a6.  return v0;
}
procedure `int` `c`(`l.f0.i.m` v1 @kind this, `int` v2 ) @signature `Ll/f0/i/m;.c:(I)I` @AccessFlag  {
    temp;
    v0;

  #L3ee7e0.  v0:= v1.`l.f0.i.m.a` @type ^`int`;
  #L3ee7e4.  v0:= v0 ^& 32;
  #L3ee7e8.  if v0 == 0 then goto L3ee7f6;
  #L3ee7ec.  v2:= v1.`l.f0.i.m.b` @type ^`int`[] @kind object;
  #L3ee7f0.  v0:= 5I;
  #L3ee7f2.  v2:= v2[v0];
  #L3ee7f6.  return v2;
}
procedure `int` `d`(`l.f0.i.m` v1 @kind this) @signature `Ll/f0/i/m;.d:()I` @AccessFlag  {
    temp;
    v0;

  #L3ee808.  v0:= v1.`l.f0.i.m.a` @type ^`int`;
  #L3ee80c.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L3ee812.  v0:= temp;
  #L3ee814.  return v0;
}
procedure `boolean` `d`(`l.f0.i.m` v2 @kind this, `int` v3 ) @signature `Ll/f0/i/m;.d:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3ee718.  v0:= 1I;
  #L3ee71a.  v3:= v0 ^< v3 @kind int;
  #L3ee71e.  v1:= v2.`l.f0.i.m.a` @type ^`int`;
  #L3ee722.  v3:= v3 ^& v1 @kind int;
  #L3ee724.  if v3 == 0 then goto L3ee72a;
  #L3ee728.  goto L3ee72c;
  #L3ee72a.  v0:= 0I;
  #L3ee72c.  return v0;
}
