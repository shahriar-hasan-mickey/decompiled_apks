record `l.f0.i.d$b` @kind class @AccessFlag FINAL {
  `m.c` `l.f0.i.d$b.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `l.f0.i.d$b.b` @AccessFlag PRIVATE_FINAL;
  `int` `l.f0.i.d$b.c` @AccessFlag PRIVATE;
  `boolean` `l.f0.i.d$b.d` @AccessFlag PRIVATE;
  `int` `l.f0.i.d$b.e` @AccessFlag ;
  `l.f0.i.c`[] `l.f0.i.d$b.f` @AccessFlag ;
  `int` `l.f0.i.d$b.g` @AccessFlag ;
  `int` `l.f0.i.d$b.h` @AccessFlag ;
  `int` `l.f0.i.d$b.i` @AccessFlag ;
}
procedure `void` `<init>`(`l.f0.i.d$b` v1 @kind this, `int` v2 , `boolean` v3 , `m.c` v4 @kind object) @signature `Ll/f0/i/d$b;.<init>:(IZLm/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3e8d30.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e8d36.  v0:= 2147483647I;
  #L3e8d3c.  v1.`l.f0.i.d$b.c` @type ^`int` := v0;
  #L3e8d40.  v0:= 8I;
  #L3e8d44.  v0:= new `l.f0.i.c`[v0];
  #L3e8d48.  v1.`l.f0.i.d$b.f` @type ^`l.f0.i.c`[] := v0 @kind object;
  #L3e8d4c.  v0:= v1.`l.f0.i.d$b.f` @type ^`l.f0.i.c`[] @kind object;
  #L3e8d50.  v0:= length @variable v0;
  #L3e8d52.  v0:= v0 + -1;
  #L3e8d56.  v1.`l.f0.i.d$b.g` @type ^`int` := v0;
  #L3e8d5a.  v0:= 0I;
  #L3e8d5c.  v1.`l.f0.i.d$b.h` @type ^`int` := v0;
  #L3e8d60.  v1.`l.f0.i.d$b.i` @type ^`int` := v0;
  #L3e8d64.  v1.`l.f0.i.d$b.e` @type ^`int` := v2;
  #L3e8d68.  v1.`l.f0.i.d$b.b` @type ^`boolean` := v3 @kind boolean;
  #L3e8d6c.  v1.`l.f0.i.d$b.a` @type ^`m.c` := v4 @kind object;
  #L3e8d70.  return @kind void;
}
procedure `void` `<init>`(`l.f0.i.d$b` v2 @kind this, `m.c` v3 @kind object) @signature `Ll/f0/i/d$b;.<init>:(Lm/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3e8d84.  v0:= 4096I;
  #L3e8d88.  v1:= 1I;
  #L3e8d8a.  call `<init>`(v2, v0, v1, v3) @signature `Ll/f0/i/d$b;.<init>:(IZLm/c;)V` @kind direct;
  #L3e8d90.  return @kind void;
}
procedure `void` `a`(`l.f0.i.d$b` v2 @kind this) @signature `Ll/f0/i/d$b;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e8da4.  v0:= v2.`l.f0.i.d$b.e` @type ^`int`;
  #L3e8da8.  v1:= v2.`l.f0.i.d$b.i` @type ^`int`;
  #L3e8dac.  if v0 >= v1 then goto L3e8dc4;
  #L3e8db0.  if v0 != 0 then goto L3e8dbc;
  #L3e8db4.  call `b`(v2) @signature `Ll/f0/i/d$b;.b:()V` @kind direct;
  #L3e8dba.  goto L3e8dc4;
  #L3e8dbc.  v1:= v1 - v0 @kind int;
  #L3e8dbe.  call temp:= `b`(v2, v1) @signature `Ll/f0/i/d$b;.b:(I)I` @kind direct;
  #L3e8dc4.  return @kind void;
}
procedure `void` `a`(`l.f0.i.d$b` v6 @kind this, `l.f0.i.c` v7 @kind object) @signature `Ll/f0/i/d$b;.a:(Ll/f0/i/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3e8e10.  v0:= v7.`l.f0.i.c.c` @type ^`int`;
  #L3e8e14.  v1:= v6.`l.f0.i.d$b.e` @type ^`int`;
  #L3e8e18.  if v0 <= v1 then goto L3e8e24;
  #L3e8e1c.  call `b`(v6) @signature `Ll/f0/i/d$b;.b:()V` @kind direct;
  #L3e8e22.  return @kind void;
  #L3e8e24.  v2:= v6.`l.f0.i.d$b.i` @type ^`int`;
  #L3e8e28.  v2:= v2 + v0 @kind int;
  #L3e8e2a.  v2:= v2 - v1 @kind int;
  #L3e8e2c.  call temp:= `b`(v6, v2) @signature `Ll/f0/i/d$b;.b:(I)I` @kind direct;
  #L3e8e32.  v1:= v6.`l.f0.i.d$b.h` @type ^`int`;
  #L3e8e36.  v1:= v1 + 1;
  #L3e8e3a.  v2:= v6.`l.f0.i.d$b.f` @type ^`l.f0.i.c`[] @kind object;
  #L3e8e3e.  v3:= length @variable v2;
  #L3e8e40.  if v1 <= v3 then goto L3e8e6c;
  #L3e8e44.  v1:= length @variable v2;
  #L3e8e46.  v1:= v1 * 2;
  #L3e8e4a.  v1:= new `l.f0.i.c`[v1];
  #L3e8e4e.  v3:= 0I;
  #L3e8e50.  v4:= length @variable v2;
  #L3e8e52.  v5:= length @variable v2;
  #L3e8e54.  call `arraycopy`(v2, v3, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3e8e5a.  v2:= v6.`l.f0.i.d$b.f` @type ^`l.f0.i.c`[] @kind object;
  #L3e8e5e.  v2:= length @variable v2;
  #L3e8e60.  v2:= v2 + -1;
  #L3e8e64.  v6.`l.f0.i.d$b.g` @type ^`int` := v2;
  #L3e8e68.  v6.`l.f0.i.d$b.f` @type ^`l.f0.i.c`[] := v1 @kind object;
  #L3e8e6c.  v1:= v6.`l.f0.i.d$b.g` @type ^`int`;
  #L3e8e70.  v2:= v1 + -1;
  #L3e8e74.  v6.`l.f0.i.d$b.g` @type ^`int` := v2;
  #L3e8e78.  v2:= v6.`l.f0.i.d$b.f` @type ^`l.f0.i.c`[] @kind object;
  #L3e8e7c.  v2[v1]:= v7 @kind object;
  #L3e8e80.  v7:= v6.`l.f0.i.d$b.h` @type ^`int`;
  #L3e8e84.  v7:= v7 + 1;
  #L3e8e88.  v6.`l.f0.i.d$b.h` @type ^`int` := v7;
  #L3e8e8c.  v7:= v6.`l.f0.i.d$b.i` @type ^`int`;
  #L3e8e90.  v7:= v7 + v0 @kind int;
  #L3e8e92.  v6.`l.f0.i.d$b.i` @type ^`int` := v7;
  #L3e8e96.  return @kind void;
}
procedure `int` `b`(`l.f0.i.d$b` v4 @kind this, `int` v5 ) @signature `Ll/f0/i/d$b;.b:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e8c8c.  v0:= 0I;
  #L3e8c8e.  if v5 <= 0 then goto L3e8d1e;
  #L3e8c92.  v1:= v4.`l.f0.i.d$b.f` @type ^`l.f0.i.c`[] @kind object;
  #L3e8c96.  v1:= length @variable v1;
  #L3e8c98.  v1:= v1 + -1;
  #L3e8c9c.  v2:= v4.`l.f0.i.d$b.g` @type ^`int`;
  #L3e8ca0.  if v1 < v2 then goto L3e8cde;
  #L3e8ca4.  if v5 <= 0 then goto L3e8cde;
  #L3e8ca8.  v2:= v4.`l.f0.i.d$b.f` @type ^`l.f0.i.c`[] @kind object;
  #L3e8cac.  v3:= v2[v1] @kind object;
  #L3e8cb0.  v3:= v3.`l.f0.i.c.c` @type ^`int`;
  #L3e8cb4.  v5:= v5 - v3 @kind int;
  #L3e8cb6.  v3:= v4.`l.f0.i.d$b.i` @type ^`int`;
  #L3e8cba.  v2:= v2[v1] @kind object;
  #L3e8cbe.  v2:= v2.`l.f0.i.c.c` @type ^`int`;
  #L3e8cc2.  v3:= v3 - v2 @kind int;
  #L3e8cc4.  v4.`l.f0.i.d$b.i` @type ^`int` := v3;
  #L3e8cc8.  v2:= v4.`l.f0.i.d$b.h` @type ^`int`;
  #L3e8ccc.  v2:= v2 + -1;
  #L3e8cd0.  v4.`l.f0.i.d$b.h` @type ^`int` := v2;
  #L3e8cd4.  v0:= v0 + 1;
  #L3e8cd8.  v1:= v1 + -1;
  #L3e8cdc.  goto L3e8c9c;
  #L3e8cde.  v5:= v4.`l.f0.i.d$b.f` @type ^`l.f0.i.c`[] @kind object;
  #L3e8ce2.  v1:= v4.`l.f0.i.d$b.g` @type ^`int`;
  #L3e8ce6.  v2:= v1 + 1;
  #L3e8cea.  v1:= v1 + 1;
  #L3e8cee.  v1:= v1 + v0 @kind int;
  #L3e8cf0.  v3:= v4.`l.f0.i.d$b.h` @type ^`int`;
  #L3e8cf4.  call `arraycopy`(v5, v2, v5, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3e8cfa.  v5:= v4.`l.f0.i.d$b.f` @type ^`l.f0.i.c`[] @kind object;
  #L3e8cfe.  v1:= v4.`l.f0.i.d$b.g` @type ^`int`;
  #L3e8d02.  v2:= v1 + 1;
  #L3e8d06.  v1:= v1 + 1;
  #L3e8d0a.  v1:= v1 + v0 @kind int;
  #L3e8d0c.  v3:= 0I;
  #L3e8d0e.  call `fill`(v5, v2, v1, v3) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L3e8d14.  v5:= v4.`l.f0.i.d$b.g` @type ^`int`;
  #L3e8d18.  v5:= v5 + v0 @kind int;
  #L3e8d1a.  v4.`l.f0.i.d$b.g` @type ^`int` := v5;
  #L3e8d1e.  return v0;
}
procedure `void` `b`(`l.f0.i.d$b` v2 @kind this) @signature `Ll/f0/i/d$b;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e8dd8.  v0:= v2.`l.f0.i.d$b.f` @type ^`l.f0.i.c`[] @kind object;
  #L3e8ddc.  v1:= 0I;
  #L3e8dde.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L3e8de4.  v0:= v2.`l.f0.i.d$b.f` @type ^`l.f0.i.c`[] @kind object;
  #L3e8de8.  v0:= length @variable v0;
  #L3e8dea.  v0:= v0 + -1;
  #L3e8dee.  v2.`l.f0.i.d$b.g` @type ^`int` := v0;
  #L3e8df2.  v0:= 0I;
  #L3e8df4.  v2.`l.f0.i.d$b.h` @type ^`int` := v0;
  #L3e8df8.  v2.`l.f0.i.d$b.i` @type ^`int` := v0;
  #L3e8dfc.  return @kind void;
}
procedure `void` `a`(`l.f0.i.d$b` v1 @kind this, `int` v2 ) @signature `Ll/f0/i/d$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;

  #L3e8ea8.  v0:= 16384I;
  #L3e8eac.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3e8eb2.  v2:= temp;
  #L3e8eb4.  v0:= v1.`l.f0.i.d$b.e` @type ^`int`;
  #L3e8eb8.  if v0 != v2 then goto L3e8ebe;
  #L3e8ebc.  return @kind void;
  #L3e8ebe.  if v2 >= v0 then goto L3e8ed2;
  #L3e8ec2.  v0:= v1.`l.f0.i.d$b.c` @type ^`int`;
  #L3e8ec6.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3e8ecc.  v0:= temp;
  #L3e8ece.  v1.`l.f0.i.d$b.c` @type ^`int` := v0;
  #L3e8ed2.  v0:= 1I;
  #L3e8ed4.  v1.`l.f0.i.d$b.d` @type ^`boolean` := v0 @kind boolean;
  #L3e8ed8.  v1.`l.f0.i.d$b.e` @type ^`int` := v2;
  #L3e8edc.  call `a`(v1) @signature `Ll/f0/i/d$b;.a:()V` @kind direct;
  #L3e8ee2.  return @kind void;
}
procedure `void` `a`(`l.f0.i.d$b` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Ll/f0/i/d$b;.a:(III)V` @AccessFlag  {
    temp;
    v0;

  #L3e915c.  if v2 >= v3 then goto L3e916e;
  #L3e9160.  v3:= v1.`l.f0.i.d$b.a` @type ^`m.c` @kind object;
  #L3e9164.  v2:= v2 ^| v4 @kind int;
  #L3e9166.  call temp:= `writeByte`(v3, v2) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3e916c.  return @kind void;
  #L3e916e.  v0:= v1.`l.f0.i.d$b.a` @type ^`m.c` @kind object;
  #L3e9172.  v4:= v4 ^| v3 @kind int;
  #L3e9174.  call temp:= `writeByte`(v0, v4) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3e917a.  v2:= v2 - v3 @kind int;
  #L3e917c.  v3:= 128I;
  #L3e9180.  if v2 < v3 then goto L3e919a;
  #L3e9184.  v4:= v2 ^& 127;
  #L3e9188.  v0:= v1.`l.f0.i.d$b.a` @type ^`m.c` @kind object;
  #L3e918c.  v3:= v3 ^| v4 @kind int;
  #L3e918e.  call temp:= `writeByte`(v0, v3) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3e9194.  v2:= v2 ^>> 7;
  #L3e9198.  goto L3e917c;
  #L3e919a.  v3:= v1.`l.f0.i.d$b.a` @type ^`m.c` @kind object;
  #L3e919e.  goto L3e9166;
}
procedure `void` `a`(`l.f0.i.d$b` v13 @kind this, `java.util.List` v14 @kind object) @signature `Ll/f0/i/d$b;.a:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3e8f78.  v0:= v13.`l.f0.i.d$b.d` @type ^`boolean` @kind boolean;
  #L3e8f7c.  v1:= 0I;
  #L3e8f7e.  if v0 == 0 then goto L3e8fb4;
  #L3e8f82.  v0:= v13.`l.f0.i.d$b.c` @type ^`int`;
  #L3e8f86.  v2:= v13.`l.f0.i.d$b.e` @type ^`int`;
  #L3e8f8a.  v3:= 32I;
  #L3e8f8e.  v4:= 31I;
  #L3e8f92.  if v0 >= v2 then goto L3e8f9c;
  #L3e8f96.  call `a`(v13, v0, v4, v3) @signature `Ll/f0/i/d$b;.a:(III)V` @kind virtual;
  #L3e8f9c.  v13.`l.f0.i.d$b.d` @type ^`boolean` := v1 @kind boolean;
  #L3e8fa0.  v0:= 2147483647I;
  #L3e8fa6.  v13.`l.f0.i.d$b.c` @type ^`int` := v0;
  #L3e8faa.  v0:= v13.`l.f0.i.d$b.e` @type ^`int`;
  #L3e8fae.  call `a`(v13, v0, v4, v3) @signature `Ll/f0/i/d$b;.a:(III)V` @kind virtual;
  #L3e8fb4.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3e8fba.  v0:= temp;
  #L3e8fbc.  v2:= 0I;
  #L3e8fbe.  if v2 >= v0 then goto L3e9148;
  #L3e8fc2.  call temp:= `get`(v14, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3e8fc8.  v3:= temp @kind object;
  #L3e8fca.  v3:= (`l.f0.i.c`) v3 @kind object;
  #L3e8fce.  v4:= v3.`l.f0.i.c.a` @type ^`m.f` @kind object;
  #L3e8fd2.  call temp:= `m`(v4) @signature `Lm/f;.m:()Lm/f;` @kind virtual;
  #L3e8fd8.  v4:= temp @kind object;
  #L3e8fda.  v5:= v3.`l.f0.i.c.b` @type ^`m.f` @kind object;
  #L3e8fde.  v6:= `@@l.f0.i.d.b` @type ^`java.util.Map` @kind object;
  #L3e8fe2.  call temp:= `get`(v6, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3e8fe8.  v6:= temp @kind object;
  #L3e8fea.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L3e8fee.  v7:= -1I;
  #L3e8ff0.  v8:= 1I;
  #L3e8ff2.  if v6 == 0 then goto L3e9056;
  #L3e8ff6.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3e8ffc.  v6:= temp;
  #L3e8ffe.  v6:= v6 + v8 @kind int;
  #L3e9000.  if v6 <= v8 then goto L3e9050;
  #L3e9004.  v9:= 8I;
  #L3e9008.  if v6 >= v9 then goto L3e9050;
  #L3e900c.  v9:= `@@l.f0.i.d.a` @type ^`l.f0.i.c`[] @kind object;
  #L3e9010.  v10:= v6 + -1;
  #L3e9014.  v9:= v9[v10] @kind object;
  #L3e9018.  v9:= v9.`l.f0.i.c.b` @type ^`m.f` @kind object;
  #L3e901c.  call temp:= `a`(v9, v5) @signature `Ll/f0/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3e9022.  v9:= temp;
  #L3e9024.  if v9 == 0 then goto L3e902c;
  #L3e9028.  v9:= v6;
  #L3e902a.  goto L3e905a;
  #L3e902c.  v9:= `@@l.f0.i.d.a` @type ^`l.f0.i.c`[] @kind object;
  #L3e9030.  v9:= v9[v6] @kind object;
  #L3e9034.  v9:= v9.`l.f0.i.c.b` @type ^`m.f` @kind object;
  #L3e9038.  call temp:= `a`(v9, v5) @signature `Ll/f0/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3e903e.  v9:= temp;
  #L3e9040.  if v9 == 0 then goto L3e9050;
  #L3e9044.  v9:= v6 + 1;
  #L3e9048.  v12:= v9;
  #L3e904a.  v9:= v6;
  #L3e904c.  v6:= v12;
  #L3e904e.  goto L3e905a;
  #L3e9050.  v9:= v6;
  #L3e9052.  v6:= -1I;
  #L3e9054.  goto L3e905a;
  #L3e9056.  v6:= -1I;
  #L3e9058.  v9:= -1I;
  #L3e905a.  if v6 != v7 then goto L3e90c8;
  #L3e905e.  v10:= v13.`l.f0.i.d$b.g` @type ^`int`;
  #L3e9062.  v10:= v10 + v8 @kind int;
  #L3e9064.  v8:= v13.`l.f0.i.d$b.f` @type ^`l.f0.i.c`[] @kind object;
  #L3e9068.  v8:= length @variable v8;
  #L3e906a.  if v10 >= v8 then goto L3e90c8;
  #L3e906e.  v11:= v13.`l.f0.i.d$b.f` @type ^`l.f0.i.c`[] @kind object;
  #L3e9072.  v11:= v11[v10] @kind object;
  #L3e9076.  v11:= v11.`l.f0.i.c.a` @type ^`m.f` @kind object;
  #L3e907a.  call temp:= `a`(v11, v4) @signature `Ll/f0/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3e9080.  v11:= temp;
  #L3e9082.  if v11 == 0 then goto L3e90c2;
  #L3e9086.  v11:= v13.`l.f0.i.d$b.f` @type ^`l.f0.i.c`[] @kind object;
  #L3e908a.  v11:= v11[v10] @kind object;
  #L3e908e.  v11:= v11.`l.f0.i.c.b` @type ^`m.f` @kind object;
  #L3e9092.  call temp:= `a`(v11, v5) @signature `Ll/f0/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3e9098.  v11:= temp;
  #L3e909a.  if v11 == 0 then goto L3e90ae;
  #L3e909e.  v6:= v13.`l.f0.i.d$b.g` @type ^`int`;
  #L3e90a2.  v10:= v10 - v6 @kind int;
  #L3e90a4.  v6:= `@@l.f0.i.d.a` @type ^`l.f0.i.c`[] @kind object;
  #L3e90a8.  v6:= length @variable v6;
  #L3e90aa.  v6:= v6 + v10 @kind int;
  #L3e90ac.  goto L3e90c8;
  #L3e90ae.  if v9 != v7 then goto L3e90c2;
  #L3e90b2.  v9:= v13.`l.f0.i.d$b.g` @type ^`int`;
  #L3e90b6.  v9:= v10 - v9 @kind int;
  #L3e90ba.  v11:= `@@l.f0.i.d.a` @type ^`l.f0.i.c`[] @kind object;
  #L3e90be.  v11:= length @variable v11;
  #L3e90c0.  v9:= v9 + v11 @kind int;
  #L3e90c2.  v10:= v10 + 1;
  #L3e90c6.  goto L3e906a;
  #L3e90c8.  if v6 == v7 then goto L3e90dc;
  #L3e90cc.  v3:= 127I;
  #L3e90d0.  v4:= 128I;
  #L3e90d4.  call `a`(v13, v6, v3, v4) @signature `Ll/f0/i/d$b;.a:(III)V` @kind virtual;
  #L3e90da.  goto L3e9140;
  #L3e90dc.  v6:= 64I;
  #L3e90e0.  if v9 != v7 then goto L3e9102;
  #L3e90e4.  v7:= v13.`l.f0.i.d$b.a` @type ^`m.c` @kind object;
  #L3e90e8.  call temp:= `writeByte`(v7, v6) @signature `Lm/c;.writeByte:(I)Lm/c;` @kind virtual;
  #L3e90ee.  call `a`(v13, v4) @signature `Ll/f0/i/d$b;.a:(Lm/f;)V` @kind virtual;
  #L3e90f4.  call `a`(v13, v5) @signature `Ll/f0/i/d$b;.a:(Lm/f;)V` @kind virtual;
  #L3e90fa.  call `a`(v13, v3) @signature `Ll/f0/i/d$b;.a:(Ll/f0/i/c;)V` @kind direct;
  #L3e9100.  goto L3e9140;
  #L3e9102.  v7:= `@@l.f0.i.c.d` @type ^`m.f` @kind object;
  #L3e9106.  call temp:= `b`(v4, v7) @signature `Lm/f;.b:(Lm/f;)Z` @kind virtual;
  #L3e910c.  v7:= temp;
  #L3e910e.  if v7 == 0 then goto L3e9134;
  #L3e9112.  v7:= `@@l.f0.i.c.i` @type ^`m.f` @kind object;
  #L3e9116.  call temp:= `equals`(v7, v4) @signature `Lm/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e911c.  v4:= temp;
  #L3e911e.  if v4 != 0 then goto L3e9134;
  #L3e9122.  v3:= 15I;
  #L3e9126.  call `a`(v13, v9, v3, v1) @signature `Ll/f0/i/d$b;.a:(III)V` @kind virtual;
  #L3e912c.  call `a`(v13, v5) @signature `Ll/f0/i/d$b;.a:(Lm/f;)V` @kind virtual;
  #L3e9132.  goto L3e9140;
  #L3e9134.  v4:= 63I;
  #L3e9138.  call `a`(v13, v9, v4, v6) @signature `Ll/f0/i/d$b;.a:(III)V` @kind virtual;
  #L3e913e.  goto L3e90f4;
  #L3e9140.  v2:= v2 + 1;
  #L3e9144.  goto L3e8fbe;
  #L3e9148.  return @kind void;
}
procedure `void` `a`(`l.f0.i.d$b` v3 @kind this, `m.f` v4 @kind object) @signature `Ll/f0/i/d$b;.a:(Lm/f;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3e8ef4.  v0:= v3.`l.f0.i.d$b.b` @type ^`boolean` @kind boolean;
  #L3e8ef8.  v1:= 127I;
  #L3e8efc.  if v0 == 0 then goto L3e8f4a;
  #L3e8f00.  call temp:= `b`() @signature `Ll/f0/i/k;.b:()Ll/f0/i/k;` @kind static;
  #L3e8f06.  v0:= temp @kind object;
  #L3e8f08.  call temp:= `a`(v0, v4) @signature `Ll/f0/i/k;.a:(Lm/f;)I` @kind virtual;
  #L3e8f0e.  v0:= temp;
  #L3e8f10.  call temp:= `l`(v4) @signature `Lm/f;.l:()I` @kind virtual;
  #L3e8f16.  v2:= temp;
  #L3e8f18.  if v0 >= v2 then goto L3e8f4a;
  #L3e8f1c.  v0:= new `m.c`;
  #L3e8f20.  call `<init>`(v0) @signature `Lm/c;.<init>:()V` @kind direct;
  #L3e8f26.  call temp:= `b`() @signature `Ll/f0/i/k;.b:()Ll/f0/i/k;` @kind static;
  #L3e8f2c.  v2:= temp @kind object;
  #L3e8f2e.  call `a`(v2, v4, v0) @signature `Ll/f0/i/k;.a:(Lm/f;Lm/d;)V` @kind virtual;
  #L3e8f34.  call temp:= `t`(v0) @signature `Lm/c;.t:()Lm/f;` @kind virtual;
  #L3e8f3a.  v4:= temp @kind object;
  #L3e8f3c.  call temp:= `l`(v4) @signature `Lm/f;.l:()I` @kind virtual;
  #L3e8f42.  v0:= temp;
  #L3e8f44.  v2:= 128I;
  #L3e8f48.  goto L3e8f54;
  #L3e8f4a.  call temp:= `l`(v4) @signature `Lm/f;.l:()I` @kind virtual;
  #L3e8f50.  v0:= temp;
  #L3e8f52.  v2:= 0I;
  #L3e8f54.  call `a`(v3, v0, v1, v2) @signature `Ll/f0/i/d$b;.a:(III)V` @kind virtual;
  #L3e8f5a.  v0:= v3.`l.f0.i.d$b.a` @type ^`m.c` @kind object;
  #L3e8f5e.  call temp:= `a`(v0, v4) @signature `Lm/c;.a:(Lm/f;)Lm/c;` @kind virtual;
  #L3e8f64.  return @kind void;
}
