record `l.f0.i.j` @kind class @AccessFlag FINAL extends `java.io.Closeable` @kind interface {
  `m.d` `l.f0.i.j.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `l.f0.i.j.c` @AccessFlag PRIVATE_FINAL;
  `m.c` `l.f0.i.j.d` @AccessFlag PRIVATE_FINAL;
  `int` `l.f0.i.j.e` @AccessFlag PRIVATE;
  `boolean` `l.f0.i.j.f` @AccessFlag PRIVATE;
  `l.f0.i.d$b` `l.f0.i.j.g` @AccessFlag FINAL;
}
global `java.util.logging.Logger` `@@l.f0.i.j.h` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ll/f0/i/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ed154.  v0:= constclass @type ^`l.f0.i.e` @kind object;
  #L3ed158.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3ed15e.  v0:= temp @kind object;
  #L3ed160.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L3ed166.  v0:= temp @kind object;
  #L3ed168.  `@@l.f0.i.j.h` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L3ed16c.  return @kind void;
}
procedure `void` `<init>`(`l.f0.i.j` v0 @kind this, `m.d` v1 @kind object, `boolean` v2 ) @signature `Ll/f0/i/j;.<init>:(Lm/d;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ed180.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ed186.  v0.`l.f0.i.j.b` @type ^`m.d` := v1 @kind object;
  #L3ed18a.  v0.`l.f0.i.j.c` @type ^`boolean` := v2 @kind boolean;
  #L3ed18e.  v1:= new `m.c`;
  #L3ed192.  call `<init>`(v1) @signature `Lm/c;.<init>:()V` @kind direct;
  #L3ed198.  v0.`l.f0.i.j.d` @type ^`m.c` := v1 @kind object;
  #L3ed19c.  v1:= new `l.f0.i.d$b`;
  #L3ed1a0.  v2:= v0.`l.f0.i.j.d` @type ^`m.c` @kind object;
  #L3ed1a4.  call `<init>`(v1, v2) @signature `Ll/f0/i/d$b;.<init>:(Lm/c;)V` @kind direct;
  #L3ed1aa.  v0.`l.f0.i.j.g` @type ^`l.f0.i.d$b` := v1 @kind object;
  #L3ed1ae.  v1:= 16384I;
  #L3ed1b2.  v0.`l.f0.i.j.e` @type ^`int` := v1;
  #L3ed1b6.  return @kind void;
}
procedure `void` `a`(`m.d` v1 @kind object, `int` v2 ) @signature `Ll/f0/i/j;.a:(Lm/d;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3eda00.  v0:= v2 ^>> 16;
  #L3eda04.  v0:= v0 ^& 255;
  #L3eda08.  call temp:= `writeByte`(v1, v0) @signature `Lm/d;.writeByte:(I)Lm/d;` @kind interface;
  #L3eda0e.  v0:= v2 ^>> 8;
  #L3eda12.  v0:= v0 ^& 255;
  #L3eda16.  call temp:= `writeByte`(v1, v0) @signature `Lm/d;.writeByte:(I)Lm/d;` @kind interface;
  #L3eda1c.  v2:= v2 ^& 255;
  #L3eda20.  call temp:= `writeByte`(v1, v2) @signature `Lm/d;.writeByte:(I)Lm/d;` @kind interface;
  #L3eda26.  return @kind void;
}
procedure `void` `b`(`l.f0.i.j` v7 @kind this, `int` v8 , `long` v9 ) @signature `Ll/f0/i/j;.b:(IJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ed9a4.  v0:= 0L;
  #L3ed9a8.  v2:= lcmp(v9, v0);
  #L3ed9ac.  if v2 <= 0 then goto L3ed9ec;
  #L3ed9b0.  v2:= v7.`l.f0.i.j.e` @type ^`int`;
  #L3ed9b4.  v2:= (`long`) v2 @kind i2l;
  #L3ed9b6.  call temp:= `min`(v2, v9) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3ed9bc.  v2:= temp @kind wide;
  #L3ed9be.  v3:= (`int`) v2 @kind l2i;
  #L3ed9c0.  v4:= (`long`) v3 @kind i2l;
  #L3ed9c2.  v9:= v9 - v4 @kind long;
  #L3ed9c4.  v2:= 9I;
  #L3ed9c8.  v6:= lcmp(v9, v0);
  #L3ed9cc.  if v6 != 0 then goto L3ed9d4;
  #L3ed9d0.  v0:= 4I;
  #L3ed9d2.  goto L3ed9d6;
  #L3ed9d4.  v0:= 0I;
  #L3ed9d6.  call `a`(v7, v8, v3, v2, v0) @signature `Ll/f0/i/j;.a:(IIBB)V` @kind virtual;
  #L3ed9dc.  v0:= v7.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed9e0.  v1:= v7.`l.f0.i.j.d` @type ^`m.c` @kind object;
  #L3ed9e4.  call `b`(v0, v1, v4) @signature `Lm/r;.b:(Lm/c;J)V` @kind interface;
  #L3ed9ea.  goto L3ed9a4;
  #L3ed9ec.  return @kind void;
}
procedure `void` `a`(`l.f0.i.j` v2 @kind this, `int` v3 , `byte` v4 , `m.c` v5 @kind object, `int` v6 ) @signature `Ll/f0/i/j;.a:(IBLm/c;I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3ed3a8.  v0:= 0I;
  #L3ed3aa.  call `a`(v2, v3, v6, v0, v4) @signature `Ll/f0/i/j;.a:(IIBB)V` @kind virtual;
  #L3ed3b0.  if v6 <= 0 then goto L3ed3c0;
  #L3ed3b4.  v3:= v2.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed3b8.  v0:= (`long`) v6 @kind i2l;
  #L3ed3ba.  call `b`(v3, v5, v0) @signature `Lm/r;.b:(Lm/c;J)V` @kind interface;
  #L3ed3c0.  return @kind void;
}
procedure `void` `a`(`l.f0.i.j` v4 @kind this, `int` v5 , `int` v6 , `byte` v7 , `byte` v8 ) @signature `Ll/f0/i/j;.a:(IIBB)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ed428.  v0:= `@@l.f0.i.j.h` @type ^`java.util.logging.Logger` @kind object;
  #L3ed42c.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L3ed430.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L3ed436.  v0:= temp;
  #L3ed438.  v1:= 0I;
  #L3ed43a.  if v0 == 0 then goto L3ed450;
  #L3ed43e.  v0:= `@@l.f0.i.j.h` @type ^`java.util.logging.Logger` @kind object;
  #L3ed442.  call temp:= `a`(v1, v5, v6, v7, v8) @signature `Ll/f0/i/e;.a:(ZIIBB)Ljava/lang/String;` @kind static;
  #L3ed448.  v2:= temp @kind object;
  #L3ed44a.  call `fine`(v0, v2) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L3ed450.  v0:= v4.`l.f0.i.j.e` @type ^`int`;
  #L3ed454.  v2:= 0I;
  #L3ed456.  v3:= 1I;
  #L3ed458.  if v6 > v0 then goto L3ed4bc;
  #L3ed45c.  v0:= -2147483648I;
  #L3ed460.  v0:= v0 ^& v5 @kind int;
  #L3ed462.  if v0 != 0 then goto L3ed4a0;
  #L3ed466.  v0:= v4.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed46a.  call `a`(v0, v6) @signature `Ll/f0/i/j;.a:(Lm/d;I)V` @kind static;
  #L3ed470.  v6:= v4.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed474.  v7:= v7 ^& 255;
  #L3ed478.  call temp:= `writeByte`(v6, v7) @signature `Lm/d;.writeByte:(I)Lm/d;` @kind interface;
  #L3ed47e.  v6:= v4.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed482.  v7:= v8 ^& 255;
  #L3ed486.  call temp:= `writeByte`(v6, v7) @signature `Lm/d;.writeByte:(I)Lm/d;` @kind interface;
  #L3ed48c.  v6:= v4.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed490.  v7:= 2147483647I;
  #L3ed496.  v5:= v5 ^& v7 @kind int;
  #L3ed498.  call temp:= `writeInt`(v6, v5) @signature `Lm/d;.writeInt:(I)Lm/d;` @kind interface;
  #L3ed49e.  return @kind void;
  #L3ed4a0.  v6:= new `java.lang.Object`[v3];
  #L3ed4a4.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3ed4aa.  v5:= temp @kind object;
  #L3ed4ac.  v6[v1]:= v5 @kind object;
  #L3ed4b0.  v5:= "reserved bit set: %s" @kind object;
  #L3ed4b4.  call temp:= `a`(v5, v6) @signature `Ll/f0/i/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L3ed4ba.  throw v2;
  #L3ed4bc.  v5:= 2I;
  #L3ed4be.  v5:= new `java.lang.Object`[v5];
  #L3ed4c2.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3ed4c8.  v7:= temp @kind object;
  #L3ed4ca.  v5[v1]:= v7 @kind object;
  #L3ed4ce.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3ed4d4.  v6:= temp @kind object;
  #L3ed4d6.  v5[v3]:= v6 @kind object;
  #L3ed4da.  v6:= "FRAME_SIZE_ERROR length > %d: %d" @kind object;
  #L3ed4de.  call temp:= `a`(v6, v5) @signature `Ll/f0/i/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L3ed4e4.  throw v2;
}
procedure `void` `a`(`l.f0.i.j` v8 @kind this, `int` v9 , `int` v10 , `java.util.List` v11 @kind object) @signature `Ll/f0/i/j;.a:(IILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3ed6b4.  @monitorenter v8
  #L3ed6b6.  v0:= v8.`l.f0.i.j.f` @type ^`boolean` @kind boolean;
  #L3ed6ba.  if v0 != 0 then goto L3ed732;
  #L3ed6be.  v0:= v8.`l.f0.i.j.g` @type ^`l.f0.i.d$b` @kind object;
  #L3ed6c2.  call `a`(v0, v11) @signature `Ll/f0/i/d$b;.a:(Ljava/util/List;)V` @kind virtual;
  #L3ed6c8.  v11:= v8.`l.f0.i.j.d` @type ^`m.c` @kind object;
  #L3ed6cc.  call temp:= `v`(v11) @signature `Lm/c;.v:()J` @kind virtual;
  #L3ed6d2.  v0:= temp @kind wide;
  #L3ed6d4.  v11:= v8.`l.f0.i.j.e` @type ^`int`;
  #L3ed6d8.  v2:= 4I;
  #L3ed6da.  v11:= v11 - v2 @kind int;
  #L3ed6dc.  v3:= (`long`) v11 @kind i2l;
  #L3ed6de.  call temp:= `min`(v3, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3ed6e4.  v3:= temp @kind wide;
  #L3ed6e6.  v11:= (`int`) v3 @kind l2i;
  #L3ed6e8.  v3:= 5I;
  #L3ed6ea.  v4:= (`long`) v11 @kind i2l;
  #L3ed6ec.  v6:= lcmp(v0, v4);
  #L3ed6f0.  if v6 != 0 then goto L3ed6f8;
  #L3ed6f4.  v7:= 4I;
  #L3ed6f6.  goto L3ed6fa;
  #L3ed6f8.  v7:= 0I;
  #L3ed6fa.  v11:= v11 + v2 @kind int;
  #L3ed6fc.  call `a`(v8, v9, v11, v3, v7) @signature `Ll/f0/i/j;.a:(IIBB)V` @kind virtual;
  #L3ed702.  v11:= v8.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed706.  v2:= 2147483647I;
  #L3ed70c.  v10:= v10 ^& v2 @kind int;
  #L3ed70e.  call temp:= `writeInt`(v11, v10) @signature `Lm/d;.writeInt:(I)Lm/d;` @kind interface;
  #L3ed714.  v10:= v8.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed718.  v11:= v8.`l.f0.i.j.d` @type ^`m.c` @kind object;
  #L3ed71c.  call `b`(v10, v11, v4) @signature `Lm/r;.b:(Lm/c;J)V` @kind interface;
  #L3ed722.  if v6 <= 0 then goto L3ed72e;
  #L3ed726.  v0:= v0 - v4 @kind long;
  #L3ed728.  call `b`(v8, v9, v0) @signature `Ll/f0/i/j;.b:(IJ)V` @kind direct;
  #L3ed72e.  @monitorexit v8
  #L3ed730.  return @kind void;
  #L3ed732.  v9:= new `java.io.IOException`;
  #L3ed736.  v10:= "closed" @kind object;
  #L3ed73a.  call `<init>`(v9, v10) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed740.  throw v9;
  #L3ed742.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed744.  @monitorexit v8
  #L3ed746.  throw v9;
  catch `java.lang.Throwable` @[L3ed6b6..L3ed72e] goto L3ed742;
  catch `java.lang.Throwable` @[L3ed732..L3ed742] goto L3ed742;
}
procedure `void` `a`(`l.f0.i.j` v4 @kind this, `int` v5 , `long` v6 ) @signature `Ll/f0/i/j;.a:(IJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ed8f4.  @monitorenter v4
  #L3ed8f6.  v0:= v4.`l.f0.i.j.f` @type ^`boolean` @kind boolean;
  #L3ed8fa.  if v0 != 0 then goto L3ed960;
  #L3ed8fe.  v0:= 0L;
  #L3ed902.  v2:= 0I;
  #L3ed904.  v3:= lcmp(v6, v0);
  #L3ed908.  if v3 == 0 then goto L3ed940;
  #L3ed90c.  v0:= 2147483647L;
  #L3ed912.  v3:= lcmp(v6, v0);
  #L3ed916.  if v3 > 0 then goto L3ed940;
  #L3ed91a.  v0:= 4I;
  #L3ed91c.  v1:= 8I;
  #L3ed920.  call `a`(v4, v5, v0, v1, v2) @signature `Ll/f0/i/j;.a:(IIBB)V` @kind virtual;
  #L3ed926.  v5:= v4.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed92a.  v7:= (`int`) v6 @kind l2i;
  #L3ed92c.  call temp:= `writeInt`(v5, v7) @signature `Lm/d;.writeInt:(I)Lm/d;` @kind interface;
  #L3ed932.  v5:= v4.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed936.  call `flush`(v5) @signature `Lm/d;.flush:()V` @kind interface;
  #L3ed93c.  @monitorexit v4
  #L3ed93e.  return @kind void;
  #L3ed940.  v5:= "windowSizeIncrement == 0 || windowSizeIncrement > 0x7fffffffL: %s" @kind object;
  #L3ed944.  v0:= 1I;
  #L3ed946.  v0:= new `java.lang.Object`[v0];
  #L3ed94a.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3ed950.  v6:= temp @kind object;
  #L3ed952.  v0[v2]:= v6 @kind object;
  #L3ed956.  call temp:= `a`(v5, v0) @signature `Ll/f0/i/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L3ed95c.  v5:= 0I;
  #L3ed95e.  throw v5;
  #L3ed960.  v5:= new `java.io.IOException`;
  #L3ed964.  v6:= "closed" @kind object;
  #L3ed968.  call `<init>`(v5, v6) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed96e.  throw v5;
  #L3ed970.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed972.  @monitorexit v4
  #L3ed974.  throw v5;
  catch `java.lang.Throwable` @[L3ed8f6..L3ed93c] goto L3ed970;
  catch `java.lang.Throwable` @[L3ed940..L3ed95c] goto L3ed970;
  catch `java.lang.Throwable` @[L3ed960..L3ed970] goto L3ed970;
}
procedure `void` `a`(`l.f0.i.j` v3 @kind this, `int` v4 , `l.f0.i.b` v5 @kind object) @signature `Ll/f0/i/j;.a:(ILl/f0/i/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ed76c.  @monitorenter v3
  #L3ed76e.  v0:= v3.`l.f0.i.j.f` @type ^`boolean` @kind boolean;
  #L3ed772.  if v0 != 0 then goto L3ed7b4;
  #L3ed776.  v0:= v5.`l.f0.i.b.b` @type ^`int`;
  #L3ed77a.  v1:= -1I;
  #L3ed77c.  if v0 == v1 then goto L3ed7a8;
  #L3ed780.  v0:= 4I;
  #L3ed782.  v1:= 3I;
  #L3ed784.  v2:= 0I;
  #L3ed786.  call `a`(v3, v4, v0, v1, v2) @signature `Ll/f0/i/j;.a:(IIBB)V` @kind virtual;
  #L3ed78c.  v4:= v3.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed790.  v5:= v5.`l.f0.i.b.b` @type ^`int`;
  #L3ed794.  call temp:= `writeInt`(v4, v5) @signature `Lm/d;.writeInt:(I)Lm/d;` @kind interface;
  #L3ed79a.  v4:= v3.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed79e.  call `flush`(v4) @signature `Lm/d;.flush:()V` @kind interface;
  #L3ed7a4.  @monitorexit v3
  #L3ed7a6.  return @kind void;
  #L3ed7a8.  v4:= new `java.lang.IllegalArgumentException`;
  #L3ed7ac.  call `<init>`(v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3ed7b2.  throw v4;
  #L3ed7b4.  v4:= new `java.io.IOException`;
  #L3ed7b8.  v5:= "closed" @kind object;
  #L3ed7bc.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed7c2.  throw v4;
  #L3ed7c4.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed7c6.  @monitorexit v3
  #L3ed7c8.  throw v4;
  catch `java.lang.Throwable` @[L3ed76e..L3ed7a4] goto L3ed7c4;
  catch `java.lang.Throwable` @[L3ed7a8..L3ed7c4] goto L3ed7c4;
}
procedure `void` `a`(`l.f0.i.j` v3 @kind this, `int` v4 , `l.f0.i.b` v5 @kind object, `byte`[] v6 @kind object) @signature `Ll/f0/i/j;.a:(ILl/f0/i/b;[B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ed4f8.  @monitorenter v3
  #L3ed4fa.  v0:= v3.`l.f0.i.j.f` @type ^`boolean` @kind boolean;
  #L3ed4fe.  if v0 != 0 then goto L3ed564;
  #L3ed502.  v0:= v5.`l.f0.i.b.b` @type ^`int`;
  #L3ed506.  v1:= -1I;
  #L3ed508.  v2:= 0I;
  #L3ed50a.  if v0 == v1 then goto L3ed552;
  #L3ed50e.  v0:= length @variable v6;
  #L3ed510.  v0:= v0 + 8;
  #L3ed514.  v1:= 7I;
  #L3ed516.  call `a`(v3, v2, v0, v1, v2) @signature `Ll/f0/i/j;.a:(IIBB)V` @kind virtual;
  #L3ed51c.  v0:= v3.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed520.  call temp:= `writeInt`(v0, v4) @signature `Lm/d;.writeInt:(I)Lm/d;` @kind interface;
  #L3ed526.  v4:= v3.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed52a.  v5:= v5.`l.f0.i.b.b` @type ^`int`;
  #L3ed52e.  call temp:= `writeInt`(v4, v5) @signature `Lm/d;.writeInt:(I)Lm/d;` @kind interface;
  #L3ed534.  v4:= length @variable v6;
  #L3ed536.  if v4 <= 0 then goto L3ed544;
  #L3ed53a.  v4:= v3.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed53e.  call temp:= `write`(v4, v6) @signature `Lm/d;.write:([B)Lm/d;` @kind interface;
  #L3ed544.  v4:= v3.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed548.  call `flush`(v4) @signature `Lm/d;.flush:()V` @kind interface;
  #L3ed54e.  @monitorexit v3
  #L3ed550.  return @kind void;
  #L3ed552.  v4:= "errorCode.httpCode == -1" @kind object;
  #L3ed556.  v5:= new `java.lang.Object`[v2];
  #L3ed55a.  call temp:= `a`(v4, v5) @signature `Ll/f0/i/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L3ed560.  v4:= 0I;
  #L3ed562.  throw v4;
  #L3ed564.  v4:= new `java.io.IOException`;
  #L3ed568.  v5:= "closed" @kind object;
  #L3ed56c.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed572.  throw v4;
  #L3ed574.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed576.  @monitorexit v3
  #L3ed578.  throw v4;
  catch `java.lang.Throwable` @[L3ed4fa..L3ed54e] goto L3ed574;
  catch `java.lang.Throwable` @[L3ed552..L3ed560] goto L3ed574;
  catch `java.lang.Throwable` @[L3ed564..L3ed574] goto L3ed574;
}
procedure `void` `a`(`l.f0.i.j` v2 @kind this, `l.f0.i.m` v3 @kind object) @signature `Ll/f0/i/j;.a:(Ll/f0/i/m;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ed1c8.  @monitorenter v2
  #L3ed1ca.  v0:= v2.`l.f0.i.j.f` @type ^`boolean` @kind boolean;
  #L3ed1ce.  if v0 != 0 then goto L3ed21c;
  #L3ed1d2.  v0:= v2.`l.f0.i.j.e` @type ^`int`;
  #L3ed1d6.  call temp:= `c`(v3, v0) @signature `Ll/f0/i/m;.c:(I)I` @kind virtual;
  #L3ed1dc.  v0:= temp;
  #L3ed1de.  v2.`l.f0.i.j.e` @type ^`int` := v0;
  #L3ed1e2.  call temp:= `b`(v3) @signature `Ll/f0/i/m;.b:()I` @kind virtual;
  #L3ed1e8.  v0:= temp;
  #L3ed1ea.  v1:= -1I;
  #L3ed1ec.  if v0 == v1 then goto L3ed202;
  #L3ed1f0.  v0:= v2.`l.f0.i.j.g` @type ^`l.f0.i.d$b` @kind object;
  #L3ed1f4.  call temp:= `b`(v3) @signature `Ll/f0/i/m;.b:()I` @kind virtual;
  #L3ed1fa.  v3:= temp;
  #L3ed1fc.  call `a`(v0, v3) @signature `Ll/f0/i/d$b;.a:(I)V` @kind virtual;
  #L3ed202.  v3:= 4I;
  #L3ed204.  v0:= 1I;
  #L3ed206.  v1:= 0I;
  #L3ed208.  call `a`(v2, v1, v1, v3, v0) @signature `Ll/f0/i/j;.a:(IIBB)V` @kind virtual;
  #L3ed20e.  v3:= v2.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed212.  call `flush`(v3) @signature `Lm/d;.flush:()V` @kind interface;
  #L3ed218.  @monitorexit v2
  #L3ed21a.  return @kind void;
  #L3ed21c.  v3:= new `java.io.IOException`;
  #L3ed220.  v0:= "closed" @kind object;
  #L3ed224.  call `<init>`(v3, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed22a.  throw v3;
  #L3ed22c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed22e.  @monitorexit v2
  #L3ed230.  throw v3;
  catch `java.lang.Throwable` @[L3ed1ca..L3ed218] goto L3ed22c;
  catch `java.lang.Throwable` @[L3ed21c..L3ed22c] goto L3ed22c;
}
procedure `void` `a`(`l.f0.i.j` v3 @kind this, `boolean` v4 , `int` v5 , `int` v6 ) @signature `Ll/f0/i/j;.a:(ZII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ed634.  @monitorenter v3
  #L3ed636.  v0:= v3.`l.f0.i.j.f` @type ^`boolean` @kind boolean;
  #L3ed63a.  if v0 != 0 then goto L3ed678;
  #L3ed63e.  v0:= 8I;
  #L3ed642.  v1:= 6I;
  #L3ed644.  v2:= 0I;
  #L3ed646.  if v4 == 0 then goto L3ed64e;
  #L3ed64a.  v4:= 1I;
  #L3ed64c.  goto L3ed650;
  #L3ed64e.  v4:= 0I;
  #L3ed650.  call `a`(v3, v2, v0, v1, v4) @signature `Ll/f0/i/j;.a:(IIBB)V` @kind virtual;
  #L3ed656.  v4:= v3.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed65a.  call temp:= `writeInt`(v4, v5) @signature `Lm/d;.writeInt:(I)Lm/d;` @kind interface;
  #L3ed660.  v4:= v3.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed664.  call temp:= `writeInt`(v4, v6) @signature `Lm/d;.writeInt:(I)Lm/d;` @kind interface;
  #L3ed66a.  v4:= v3.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed66e.  call `flush`(v4) @signature `Lm/d;.flush:()V` @kind interface;
  #L3ed674.  @monitorexit v3
  #L3ed676.  return @kind void;
  #L3ed678.  v4:= new `java.io.IOException`;
  #L3ed67c.  v5:= "closed" @kind object;
  #L3ed680.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed686.  throw v4;
  #L3ed688.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed68a.  @monitorexit v3
  #L3ed68c.  throw v4;
  catch `java.lang.Throwable` @[L3ed636..L3ed674] goto L3ed688;
  catch `java.lang.Throwable` @[L3ed678..L3ed688] goto L3ed688;
}
procedure `void` `a`(`l.f0.i.j` v0 @kind this, `boolean` v1 , `int` v2 , `int` v3 , `java.util.List` v4 @kind object) @signature `Ll/f0/i/j;.a:(ZIILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;

  #L3ed8a4.  @monitorenter v0
  #L3ed8a6.  v3:= v0.`l.f0.i.j.f` @type ^`boolean` @kind boolean;
  #L3ed8aa.  if v3 != 0 then goto L3ed8b8;
  #L3ed8ae.  call `a`(v0, v1, v2, v4) @signature `Ll/f0/i/j;.a:(ZILjava/util/List;)V` @kind virtual;
  #L3ed8b4.  @monitorexit v0
  #L3ed8b6.  return @kind void;
  #L3ed8b8.  v1:= new `java.io.IOException`;
  #L3ed8bc.  v2:= "closed" @kind object;
  #L3ed8c0.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed8c6.  throw v1;
  #L3ed8c8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed8ca.  @monitorexit v0
  #L3ed8cc.  throw v1;
  catch `java.lang.Throwable` @[L3ed8a6..L3ed8b4] goto L3ed8c8;
  catch `java.lang.Throwable` @[L3ed8b8..L3ed8c8] goto L3ed8c8;
}
procedure `void` `a`(`l.f0.i.j` v6 @kind this, `boolean` v7 , `int` v8 , `java.util.List` v9 @kind object) @signature `Ll/f0/i/j;.a:(ZILjava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ed5a8.  v0:= v6.`l.f0.i.j.f` @type ^`boolean` @kind boolean;
  #L3ed5ac.  if v0 != 0 then goto L3ed614;
  #L3ed5b0.  v0:= v6.`l.f0.i.j.g` @type ^`l.f0.i.d$b` @kind object;
  #L3ed5b4.  call `a`(v0, v9) @signature `Ll/f0/i/d$b;.a:(Ljava/util/List;)V` @kind virtual;
  #L3ed5ba.  v9:= v6.`l.f0.i.j.d` @type ^`m.c` @kind object;
  #L3ed5be.  call temp:= `v`(v9) @signature `Lm/c;.v:()J` @kind virtual;
  #L3ed5c4.  v0:= temp @kind wide;
  #L3ed5c6.  v9:= v6.`l.f0.i.j.e` @type ^`int`;
  #L3ed5ca.  v2:= (`long`) v9 @kind i2l;
  #L3ed5cc.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3ed5d2.  v2:= temp @kind wide;
  #L3ed5d4.  v9:= (`int`) v2 @kind l2i;
  #L3ed5d6.  v2:= (`long`) v9 @kind i2l;
  #L3ed5d8.  v4:= lcmp(v0, v2);
  #L3ed5dc.  if v4 != 0 then goto L3ed5e4;
  #L3ed5e0.  v5:= 4I;
  #L3ed5e2.  goto L3ed5e6;
  #L3ed5e4.  v5:= 0I;
  #L3ed5e6.  if v7 == 0 then goto L3ed5f0;
  #L3ed5ea.  v7:= v5 ^| 1;
  #L3ed5ee.  v5:= (`byte`) v7 @kind i2b;
  #L3ed5f0.  v7:= 1I;
  #L3ed5f2.  call `a`(v6, v8, v9, v7, v5) @signature `Ll/f0/i/j;.a:(IIBB)V` @kind virtual;
  #L3ed5f8.  v7:= v6.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed5fc.  v9:= v6.`l.f0.i.j.d` @type ^`m.c` @kind object;
  #L3ed600.  call `b`(v7, v9, v2) @signature `Lm/r;.b:(Lm/c;J)V` @kind interface;
  #L3ed606.  if v4 <= 0 then goto L3ed612;
  #L3ed60a.  v0:= v0 - v2 @kind long;
  #L3ed60c.  call `b`(v6, v8, v0) @signature `Ll/f0/i/j;.b:(IJ)V` @kind direct;
  #L3ed612.  return @kind void;
  #L3ed614.  v7:= new `java.io.IOException`;
  #L3ed618.  v8:= "closed" @kind object;
  #L3ed61c.  call `<init>`(v7, v8) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed622.  throw v7;
}
procedure `void` `a`(`l.f0.i.j` v1 @kind this, `boolean` v2 , `int` v3 , `m.c` v4 @kind object, `int` v5 ) @signature `Ll/f0/i/j;.a:(ZILm/c;I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ed350.  @monitorenter v1
  #L3ed352.  v0:= v1.`l.f0.i.j.f` @type ^`boolean` @kind boolean;
  #L3ed356.  if v0 != 0 then goto L3ed36e;
  #L3ed35a.  v0:= 0I;
  #L3ed35c.  if v2 == 0 then goto L3ed364;
  #L3ed360.  v2:= 1I;
  #L3ed362.  v0:= (`byte`) v2 @kind i2b;
  #L3ed364.  call `a`(v1, v3, v0, v4, v5) @signature `Ll/f0/i/j;.a:(IBLm/c;I)V` @kind virtual;
  #L3ed36a.  @monitorexit v1
  #L3ed36c.  return @kind void;
  #L3ed36e.  v2:= new `java.io.IOException`;
  #L3ed372.  v3:= "closed" @kind object;
  #L3ed376.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed37c.  throw v2;
  #L3ed37e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed380.  @monitorexit v1
  #L3ed382.  throw v2;
  catch `java.lang.Throwable` @[L3ed352..L3ed36a] goto L3ed37e;
  catch `java.lang.Throwable` @[L3ed36e..L3ed37e] goto L3ed37e;
}
procedure `void` `b`(`l.f0.i.j` v4 @kind this, `l.f0.i.m` v5 @kind object) @signature `Ll/f0/i/j;.b:(Ll/f0/i/m;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ed7f0.  @monitorenter v4
  #L3ed7f2.  v0:= v4.`l.f0.i.j.f` @type ^`boolean` @kind boolean;
  #L3ed7f6.  if v0 != 0 then goto L3ed86a;
  #L3ed7fa.  call temp:= `d`(v5) @signature `Ll/f0/i/m;.d:()I` @kind virtual;
  #L3ed800.  v0:= temp;
  #L3ed802.  v0:= v0 * 6;
  #L3ed806.  v1:= 0I;
  #L3ed808.  v2:= 4I;
  #L3ed80a.  call `a`(v4, v1, v0, v2, v1) @signature `Ll/f0/i/j;.a:(IIBB)V` @kind virtual;
  #L3ed810.  v0:= 10I;
  #L3ed814.  if v1 >= v0 then goto L3ed85c;
  #L3ed818.  call temp:= `d`(v5, v1) @signature `Ll/f0/i/m;.d:(I)Z` @kind virtual;
  #L3ed81e.  v0:= temp;
  #L3ed820.  if v0 != 0 then goto L3ed826;
  #L3ed824.  goto L3ed856;
  #L3ed826.  if v1 != v2 then goto L3ed82e;
  #L3ed82a.  v0:= 3I;
  #L3ed82c.  goto L3ed83a;
  #L3ed82e.  v0:= 7I;
  #L3ed830.  if v1 != v0 then goto L3ed838;
  #L3ed834.  v0:= 4I;
  #L3ed836.  goto L3ed83a;
  #L3ed838.  v0:= v1;
  #L3ed83a.  v3:= v4.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed83e.  call temp:= `writeShort`(v3, v0) @signature `Lm/d;.writeShort:(I)Lm/d;` @kind interface;
  #L3ed844.  v0:= v4.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed848.  call temp:= `a`(v5, v1) @signature `Ll/f0/i/m;.a:(I)I` @kind virtual;
  #L3ed84e.  v3:= temp;
  #L3ed850.  call temp:= `writeInt`(v0, v3) @signature `Lm/d;.writeInt:(I)Lm/d;` @kind interface;
  #L3ed856.  v1:= v1 + 1;
  #L3ed85a.  goto L3ed810;
  #L3ed85c.  v5:= v4.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed860.  call `flush`(v5) @signature `Lm/d;.flush:()V` @kind interface;
  #L3ed866.  @monitorexit v4
  #L3ed868.  return @kind void;
  #L3ed86a.  v5:= new `java.io.IOException`;
  #L3ed86e.  v0:= "closed" @kind object;
  #L3ed872.  call `<init>`(v5, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed878.  throw v5;
  #L3ed87a.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed87c.  @monitorexit v4
  #L3ed87e.  throw v5;
  catch `java.lang.Throwable` @[L3ed7f2..L3ed866] goto L3ed87a;
  catch `java.lang.Throwable` @[L3ed86a..L3ed87a] goto L3ed87a;
}
procedure `void` `close`(`l.f0.i.j` v1 @kind this) @signature `Ll/f0/i/j;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ed258.  @monitorenter v1
  #L3ed25a.  v0:= 1I;
  #L3ed25c.  v1.`l.f0.i.j.f` @type ^`boolean` := v0 @kind boolean;
  #L3ed260.  v0:= v1.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed264.  call `close`(v0) @signature `Lm/r;.close:()V` @kind interface;
  #L3ed26a.  @monitorexit v1
  #L3ed26c.  return @kind void;
  #L3ed26e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed270.  @monitorexit v1
  #L3ed272.  throw v0;
  catch `java.lang.Throwable` @[L3ed25c..L3ed26a] goto L3ed26e;
}
procedure `void` `flush`(`l.f0.i.j` v2 @kind this) @signature `Ll/f0/i/j;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ed3d4.  @monitorenter v2
  #L3ed3d6.  v0:= v2.`l.f0.i.j.f` @type ^`boolean` @kind boolean;
  #L3ed3da.  if v0 != 0 then goto L3ed3ec;
  #L3ed3de.  v0:= v2.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed3e2.  call `flush`(v0) @signature `Lm/d;.flush:()V` @kind interface;
  #L3ed3e8.  @monitorexit v2
  #L3ed3ea.  return @kind void;
  #L3ed3ec.  v0:= new `java.io.IOException`;
  #L3ed3f0.  v1:= "closed" @kind object;
  #L3ed3f4.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed3fa.  throw v0;
  #L3ed3fc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed3fe.  @monitorexit v2
  #L3ed400.  throw v0;
  catch `java.lang.Throwable` @[L3ed3d6..L3ed3e8] goto L3ed3fc;
  catch `java.lang.Throwable` @[L3ed3ec..L3ed3fc] goto L3ed3fc;
}
procedure `void` `k`(`l.f0.i.j` v5 @kind this) @signature `Ll/f0/i/j;.k:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ed290.  @monitorenter v5
  #L3ed292.  v0:= v5.`l.f0.i.j.f` @type ^`boolean` @kind boolean;
  #L3ed296.  if v0 != 0 then goto L3ed30c;
  #L3ed29a.  v0:= v5.`l.f0.i.j.c` @type ^`boolean` @kind boolean;
  #L3ed29e.  if v0 != 0 then goto L3ed2a6;
  #L3ed2a2.  @monitorexit v5
  #L3ed2a4.  return @kind void;
  #L3ed2a6.  v0:= `@@l.f0.i.j.h` @type ^`java.util.logging.Logger` @kind object;
  #L3ed2aa.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L3ed2ae.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L3ed2b4.  v0:= temp;
  #L3ed2b6.  if v0 == 0 then goto L3ed2e8;
  #L3ed2ba.  v0:= `@@l.f0.i.j.h` @type ^`java.util.logging.Logger` @kind object;
  #L3ed2be.  v1:= ">> CONNECTION %s" @kind object;
  #L3ed2c2.  v2:= 1I;
  #L3ed2c4.  v2:= new `java.lang.Object`[v2];
  #L3ed2c8.  v3:= 0I;
  #L3ed2ca.  v4:= `@@l.f0.i.e.a` @type ^`m.f` @kind object;
  #L3ed2ce.  call temp:= `e`(v4) @signature `Lm/f;.e:()Ljava/lang/String;` @kind virtual;
  #L3ed2d4.  v4:= temp @kind object;
  #L3ed2d6.  v2[v3]:= v4 @kind object;
  #L3ed2da.  call temp:= `a`(v1, v2) @signature `Ll/f0/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3ed2e0.  v1:= temp @kind object;
  #L3ed2e2.  call `fine`(v0, v1) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L3ed2e8.  v0:= v5.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed2ec.  v1:= `@@l.f0.i.e.a` @type ^`m.f` @kind object;
  #L3ed2f0.  call temp:= `n`(v1) @signature `Lm/f;.n:()[B` @kind virtual;
  #L3ed2f6.  v1:= temp @kind object;
  #L3ed2f8.  call temp:= `write`(v0, v1) @signature `Lm/d;.write:([B)Lm/d;` @kind interface;
  #L3ed2fe.  v0:= v5.`l.f0.i.j.b` @type ^`m.d` @kind object;
  #L3ed302.  call `flush`(v0) @signature `Lm/d;.flush:()V` @kind interface;
  #L3ed308.  @monitorexit v5
  #L3ed30a.  return @kind void;
  #L3ed30c.  v0:= new `java.io.IOException`;
  #L3ed310.  v1:= "closed" @kind object;
  #L3ed314.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ed31a.  throw v0;
  #L3ed31c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed31e.  @monitorexit v5
  #L3ed320.  throw v0;
  catch `java.lang.Throwable` @[L3ed292..L3ed29e] goto L3ed31c;
  catch `java.lang.Throwable` @[L3ed2a6..L3ed308] goto L3ed31c;
  catch `java.lang.Throwable` @[L3ed30c..L3ed31c] goto L3ed31c;
}
procedure `int` `l`(`l.f0.i.j` v1 @kind this) @signature `Ll/f0/i/j;.l:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ed13c.  v0:= v1.`l.f0.i.j.e` @type ^`int`;
  #L3ed140.  return v0;
}
