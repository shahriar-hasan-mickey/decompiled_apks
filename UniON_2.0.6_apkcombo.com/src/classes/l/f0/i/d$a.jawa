record `l.f0.i.d$a` @kind class @AccessFlag FINAL {
  `java.util.List` `l.f0.i.d$a.a` @AccessFlag PRIVATE_FINAL;
  `m.e` `l.f0.i.d$a.b` @AccessFlag PRIVATE_FINAL;
  `int` `l.f0.i.d$a.c` @AccessFlag PRIVATE_FINAL;
  `int` `l.f0.i.d$a.d` @AccessFlag PRIVATE;
  `l.f0.i.c`[] `l.f0.i.d$a.e` @AccessFlag ;
  `int` `l.f0.i.d$a.f` @AccessFlag ;
  `int` `l.f0.i.d$a.g` @AccessFlag ;
  `int` `l.f0.i.d$a.h` @AccessFlag ;
}
procedure `void` `<init>`(`l.f0.i.d$a` v1 @kind this, `int` v2 , `int` v3 , `m.s` v4 @kind object) @signature `Ll/f0/i/d$a;.<init>:(IILm/s;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3e8820.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e8826.  v0:= new `java.util.ArrayList`;
  #L3e882a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3e8830.  v1.`l.f0.i.d$a.a` @type ^`java.util.List` := v0 @kind object;
  #L3e8834.  v0:= 8I;
  #L3e8838.  v0:= new `l.f0.i.c`[v0];
  #L3e883c.  v1.`l.f0.i.d$a.e` @type ^`l.f0.i.c`[] := v0 @kind object;
  #L3e8840.  v0:= v1.`l.f0.i.d$a.e` @type ^`l.f0.i.c`[] @kind object;
  #L3e8844.  v0:= length @variable v0;
  #L3e8846.  v0:= v0 + -1;
  #L3e884a.  v1.`l.f0.i.d$a.f` @type ^`int` := v0;
  #L3e884e.  v0:= 0I;
  #L3e8850.  v1.`l.f0.i.d$a.g` @type ^`int` := v0;
  #L3e8854.  v1.`l.f0.i.d$a.h` @type ^`int` := v0;
  #L3e8858.  v1.`l.f0.i.d$a.c` @type ^`int` := v2;
  #L3e885c.  v1.`l.f0.i.d$a.d` @type ^`int` := v3;
  #L3e8860.  call temp:= `a`(v4) @signature `Lm/l;.a:(Lm/s;)Lm/e;` @kind static;
  #L3e8866.  v2:= temp @kind object;
  #L3e8868.  v1.`l.f0.i.d$a.b` @type ^`m.e` := v2 @kind object;
  #L3e886c.  return @kind void;
}
procedure `void` `<init>`(`l.f0.i.d$a` v0 @kind this, `int` v1 , `m.s` v2 @kind object) @signature `Ll/f0/i/d$a;.<init>:(ILm/s;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3e8880.  call `<init>`(v0, v1, v1, v2) @signature `Ll/f0/i/d$a;.<init>:(IILm/s;)V` @kind direct;
  #L3e8886.  return @kind void;
}
procedure `int` `a`(`l.f0.i.d$a` v1 @kind this, `int` v2 ) @signature `Ll/f0/i/d$a;.a:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3e85f0.  v0:= v1.`l.f0.i.d$a.f` @type ^`int`;
  #L3e85f4.  v0:= v0 + 1;
  #L3e85f8.  v0:= v0 + v2 @kind int;
  #L3e85fa.  return v0;
}
procedure `void` `a`(`l.f0.i.d$a` v5 @kind this, `int` v6 , `l.f0.i.c` v7 @kind object) @signature `Ll/f0/i/d$a;.a:(ILl/f0/i/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e8904.  v0:= v5.`l.f0.i.d$a.a` @type ^`java.util.List` @kind object;
  #L3e8908.  call temp:= `add`(v0, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e890e.  v0:= v7.`l.f0.i.c.c` @type ^`int`;
  #L3e8912.  v1:= -1I;
  #L3e8914.  if v6 == v1 then goto L3e892e;
  #L3e8918.  v2:= v5.`l.f0.i.d$a.e` @type ^`l.f0.i.c`[] @kind object;
  #L3e891c.  call temp:= `a`(v5, v6) @signature `Ll/f0/i/d$a;.a:(I)I` @kind direct;
  #L3e8922.  v3:= temp;
  #L3e8924.  v2:= v2[v3] @kind object;
  #L3e8928.  v2:= v2.`l.f0.i.c.c` @type ^`int`;
  #L3e892c.  v0:= v0 - v2 @kind int;
  #L3e892e.  v2:= v5.`l.f0.i.d$a.d` @type ^`int`;
  #L3e8932.  if v0 <= v2 then goto L3e893e;
  #L3e8936.  call `e`(v5) @signature `Ll/f0/i/d$a;.e:()V` @kind direct;
  #L3e893c.  return @kind void;
  #L3e893e.  v3:= v5.`l.f0.i.d$a.h` @type ^`int`;
  #L3e8942.  v3:= v3 + v0 @kind int;
  #L3e8944.  v3:= v3 - v2 @kind int;
  #L3e8946.  call temp:= `b`(v5, v3) @signature `Ll/f0/i/d$a;.b:(I)I` @kind direct;
  #L3e894c.  v2:= temp;
  #L3e894e.  if v6 != v1 then goto L3e89ae;
  #L3e8952.  v6:= v5.`l.f0.i.d$a.g` @type ^`int`;
  #L3e8956.  v6:= v6 + 1;
  #L3e895a.  v1:= v5.`l.f0.i.d$a.e` @type ^`l.f0.i.c`[] @kind object;
  #L3e895e.  v2:= length @variable v1;
  #L3e8960.  if v6 <= v2 then goto L3e898c;
  #L3e8964.  v6:= length @variable v1;
  #L3e8966.  v6:= v6 * 2;
  #L3e896a.  v6:= new `l.f0.i.c`[v6];
  #L3e896e.  v2:= 0I;
  #L3e8970.  v3:= length @variable v1;
  #L3e8972.  v4:= length @variable v1;
  #L3e8974.  call `arraycopy`(v1, v2, v6, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3e897a.  v1:= v5.`l.f0.i.d$a.e` @type ^`l.f0.i.c`[] @kind object;
  #L3e897e.  v1:= length @variable v1;
  #L3e8980.  v1:= v1 + -1;
  #L3e8984.  v5.`l.f0.i.d$a.f` @type ^`int` := v1;
  #L3e8988.  v5.`l.f0.i.d$a.e` @type ^`l.f0.i.c`[] := v6 @kind object;
  #L3e898c.  v6:= v5.`l.f0.i.d$a.f` @type ^`int`;
  #L3e8990.  v1:= v6 + -1;
  #L3e8994.  v5.`l.f0.i.d$a.f` @type ^`int` := v1;
  #L3e8998.  v1:= v5.`l.f0.i.d$a.e` @type ^`l.f0.i.c`[] @kind object;
  #L3e899c.  v1[v6]:= v7 @kind object;
  #L3e89a0.  v6:= v5.`l.f0.i.d$a.g` @type ^`int`;
  #L3e89a4.  v6:= v6 + 1;
  #L3e89a8.  v5.`l.f0.i.d$a.g` @type ^`int` := v6;
  #L3e89ac.  goto L3e89c2;
  #L3e89ae.  call temp:= `a`(v5, v6) @signature `Ll/f0/i/d$a;.a:(I)I` @kind direct;
  #L3e89b4.  v1:= temp;
  #L3e89b6.  v1:= v1 + v2 @kind int;
  #L3e89b8.  v6:= v6 + v1 @kind int;
  #L3e89ba.  v1:= v5.`l.f0.i.d$a.e` @type ^`l.f0.i.c`[] @kind object;
  #L3e89be.  v1[v6]:= v7 @kind object;
  #L3e89c2.  v6:= v5.`l.f0.i.d$a.h` @type ^`int`;
  #L3e89c6.  v6:= v6 + v0 @kind int;
  #L3e89c8.  v5.`l.f0.i.d$a.h` @type ^`int` := v6;
  #L3e89cc.  return @kind void;
}
procedure `int` `b`(`l.f0.i.d$a` v4 @kind this, `int` v5 ) @signature `Ll/f0/i/d$a;.b:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e860c.  v0:= 0I;
  #L3e860e.  if v5 <= 0 then goto L3e8684;
  #L3e8612.  v1:= v4.`l.f0.i.d$a.e` @type ^`l.f0.i.c`[] @kind object;
  #L3e8616.  v1:= length @variable v1;
  #L3e8618.  v1:= v1 + -1;
  #L3e861c.  v2:= v4.`l.f0.i.d$a.f` @type ^`int`;
  #L3e8620.  if v1 < v2 then goto L3e865e;
  #L3e8624.  if v5 <= 0 then goto L3e865e;
  #L3e8628.  v2:= v4.`l.f0.i.d$a.e` @type ^`l.f0.i.c`[] @kind object;
  #L3e862c.  v3:= v2[v1] @kind object;
  #L3e8630.  v3:= v3.`l.f0.i.c.c` @type ^`int`;
  #L3e8634.  v5:= v5 - v3 @kind int;
  #L3e8636.  v3:= v4.`l.f0.i.d$a.h` @type ^`int`;
  #L3e863a.  v2:= v2[v1] @kind object;
  #L3e863e.  v2:= v2.`l.f0.i.c.c` @type ^`int`;
  #L3e8642.  v3:= v3 - v2 @kind int;
  #L3e8644.  v4.`l.f0.i.d$a.h` @type ^`int` := v3;
  #L3e8648.  v2:= v4.`l.f0.i.d$a.g` @type ^`int`;
  #L3e864c.  v2:= v2 + -1;
  #L3e8650.  v4.`l.f0.i.d$a.g` @type ^`int` := v2;
  #L3e8654.  v0:= v0 + 1;
  #L3e8658.  v1:= v1 + -1;
  #L3e865c.  goto L3e861c;
  #L3e865e.  v5:= v4.`l.f0.i.d$a.e` @type ^`l.f0.i.c`[] @kind object;
  #L3e8662.  v1:= v4.`l.f0.i.d$a.f` @type ^`int`;
  #L3e8666.  v2:= v1 + 1;
  #L3e866a.  v1:= v1 + 1;
  #L3e866e.  v1:= v1 + v0 @kind int;
  #L3e8670.  v3:= v4.`l.f0.i.d$a.g` @type ^`int`;
  #L3e8674.  call `arraycopy`(v5, v2, v5, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3e867a.  v5:= v4.`l.f0.i.d$a.f` @type ^`int`;
  #L3e867e.  v5:= v5 + v0 @kind int;
  #L3e8680.  v4.`l.f0.i.d$a.f` @type ^`int` := v5;
  #L3e8684.  return v0;
}
procedure `m.f` `c`(`l.f0.i.d$a` v3 @kind this, `int` v4 ) @signature `Ll/f0/i/d$a;.c:(I)Lm/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3e8728.  call temp:= `d`(v3, v4) @signature `Ll/f0/i/d$a;.d:(I)Z` @kind direct;
  #L3e872e.  v0:= temp;
  #L3e8730.  if v0 == 0 then goto L3e8742;
  #L3e8734.  v0:= `@@l.f0.i.d.a` @type ^`l.f0.i.c`[] @kind object;
  #L3e8738.  v4:= v0[v4] @kind object;
  #L3e873c.  v4:= v4.`l.f0.i.c.a` @type ^`m.f` @kind object;
  #L3e8740.  return v4 @kind object;
  #L3e8742.  v0:= `@@l.f0.i.d.a` @type ^`l.f0.i.c`[] @kind object;
  #L3e8746.  v0:= length @variable v0;
  #L3e8748.  v0:= v4 - v0 @kind int;
  #L3e874c.  call temp:= `a`(v3, v0) @signature `Ll/f0/i/d$a;.a:(I)I` @kind direct;
  #L3e8752.  v0:= temp;
  #L3e8754.  if v0 < 0 then goto L3e8768;
  #L3e8758.  v1:= v3.`l.f0.i.d$a.e` @type ^`l.f0.i.c`[] @kind object;
  #L3e875c.  v2:= length @variable v1;
  #L3e875e.  if v0 >= v2 then goto L3e8768;
  #L3e8762.  v4:= v1[v0] @kind object;
  #L3e8766.  goto L3e873c;
  #L3e8768.  v0:= new `java.io.IOException`;
  #L3e876c.  v1:= new `java.lang.StringBuilder`;
  #L3e8770.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e8776.  v2:= "Header index too large " @kind object;
  #L3e877a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e8780.  v4:= v4 + 1;
  #L3e8784.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e878a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e8790.  v4:= temp @kind object;
  #L3e8792.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e8798.  throw v0;
}
procedure `void` `d`(`l.f0.i.d$a` v2 @kind this) @signature `Ll/f0/i/d$a;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e8898.  v0:= v2.`l.f0.i.d$a.d` @type ^`int`;
  #L3e889c.  v1:= v2.`l.f0.i.d$a.h` @type ^`int`;
  #L3e88a0.  if v0 >= v1 then goto L3e88b8;
  #L3e88a4.  if v0 != 0 then goto L3e88b0;
  #L3e88a8.  call `e`(v2) @signature `Ll/f0/i/d$a;.e:()V` @kind direct;
  #L3e88ae.  goto L3e88b8;
  #L3e88b0.  v1:= v1 - v0 @kind int;
  #L3e88b2.  call temp:= `b`(v2, v1) @signature `Ll/f0/i/d$a;.b:(I)I` @kind direct;
  #L3e88b8.  return @kind void;
}
procedure `boolean` `d`(`l.f0.i.d$a` v2 @kind this, `int` v3 ) @signature `Ll/f0/i/d$a;.d:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e85c8.  v0:= 1I;
  #L3e85ca.  if v3 < 0 then goto L3e85dc;
  #L3e85ce.  v1:= `@@l.f0.i.d.a` @type ^`l.f0.i.c`[] @kind object;
  #L3e85d2.  v1:= length @variable v1;
  #L3e85d4.  v1:= v1 - v0 @kind int;
  #L3e85d6.  if v3 > v1 then goto L3e85dc;
  #L3e85da.  goto L3e85de;
  #L3e85dc.  v0:= 0I;
  #L3e85de.  return v0;
}
procedure `void` `e`(`l.f0.i.d$a` v2 @kind this) @signature `Ll/f0/i/d$a;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e88cc.  v0:= v2.`l.f0.i.d$a.e` @type ^`l.f0.i.c`[] @kind object;
  #L3e88d0.  v1:= 0I;
  #L3e88d2.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L3e88d8.  v0:= v2.`l.f0.i.d$a.e` @type ^`l.f0.i.c`[] @kind object;
  #L3e88dc.  v0:= length @variable v0;
  #L3e88de.  v0:= v0 + -1;
  #L3e88e2.  v2.`l.f0.i.d$a.f` @type ^`int` := v0;
  #L3e88e6.  v0:= 0I;
  #L3e88e8.  v2.`l.f0.i.d$a.g` @type ^`int` := v0;
  #L3e88ec.  v2.`l.f0.i.d$a.h` @type ^`int` := v0;
  #L3e88f0.  return @kind void;
}
procedure `void` `e`(`l.f0.i.d$a` v3 @kind this, `int` v4 ) @signature `Ll/f0/i/d$a;.e:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3e8b14.  call temp:= `d`(v3, v4) @signature `Ll/f0/i/d$a;.d:(I)Z` @kind direct;
  #L3e8b1a.  v0:= temp;
  #L3e8b1c.  if v0 == 0 then goto L3e8b34;
  #L3e8b20.  v0:= `@@l.f0.i.d.a` @type ^`l.f0.i.c`[] @kind object;
  #L3e8b24.  v4:= v0[v4] @kind object;
  #L3e8b28.  v0:= v3.`l.f0.i.d$a.a` @type ^`java.util.List` @kind object;
  #L3e8b2c.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e8b32.  goto L3e8b62;
  #L3e8b34.  v0:= `@@l.f0.i.d.a` @type ^`l.f0.i.c`[] @kind object;
  #L3e8b38.  v0:= length @variable v0;
  #L3e8b3a.  v0:= v4 - v0 @kind int;
  #L3e8b3e.  call temp:= `a`(v3, v0) @signature `Ll/f0/i/d$a;.a:(I)I` @kind direct;
  #L3e8b44.  v0:= temp;
  #L3e8b46.  if v0 < 0 then goto L3e8b64;
  #L3e8b4a.  v1:= v3.`l.f0.i.d$a.e` @type ^`l.f0.i.c`[] @kind object;
  #L3e8b4e.  v2:= length @variable v1;
  #L3e8b50.  if v0 >= v2 then goto L3e8b64;
  #L3e8b54.  v4:= v3.`l.f0.i.d$a.a` @type ^`java.util.List` @kind object;
  #L3e8b58.  v0:= v1[v0] @kind object;
  #L3e8b5c.  call temp:= `add`(v4, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e8b62.  return @kind void;
  #L3e8b64.  v0:= new `java.io.IOException`;
  #L3e8b68.  v1:= new `java.lang.StringBuilder`;
  #L3e8b6c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e8b72.  v2:= "Header index too large " @kind object;
  #L3e8b76.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e8b7c.  v4:= v4 + 1;
  #L3e8b80.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e8b86.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e8b8c.  v4:= temp @kind object;
  #L3e8b8e.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e8b94.  throw v0;
}
procedure `int` `f`(`l.f0.i.d$a` v1 @kind this) @signature `Ll/f0/i/d$a;.f:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3e8698.  v0:= v1.`l.f0.i.d$a.b` @type ^`m.e` @kind object;
  #L3e869c.  call temp:= `readByte`(v0) @signature `Lm/e;.readByte:()B` @kind interface;
  #L3e86a2.  v0:= temp;
  #L3e86a4.  v0:= v0 ^& 255;
  #L3e86a8.  return v0;
}
procedure `void` `f`(`l.f0.i.d$a` v2 @kind this, `int` v3 ) @signature `Ll/f0/i/d$a;.f:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e8ba8.  call temp:= `c`(v2, v3) @signature `Ll/f0/i/d$a;.c:(I)Lm/f;` @kind direct;
  #L3e8bae.  v3:= temp @kind object;
  #L3e8bb0.  call temp:= `b`(v2) @signature `Ll/f0/i/d$a;.b:()Lm/f;` @kind virtual;
  #L3e8bb6.  v0:= temp @kind object;
  #L3e8bb8.  v1:= new `l.f0.i.c`;
  #L3e8bbc.  call `<init>`(v1, v3, v0) @signature `Ll/f0/i/c;.<init>:(Lm/f;Lm/f;)V` @kind direct;
  #L3e8bc2.  v3:= -1I;
  #L3e8bc4.  call `a`(v2, v3, v1) @signature `Ll/f0/i/d$a;.a:(ILl/f0/i/c;)V` @kind direct;
  #L3e8bca.  return @kind void;
}
procedure `void` `g`(`l.f0.i.d$a` v3 @kind this) @signature `Ll/f0/i/d$a;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3e8bdc.  call temp:= `b`(v3) @signature `Ll/f0/i/d$a;.b:()Lm/f;` @kind virtual;
  #L3e8be2.  v0:= temp @kind object;
  #L3e8be4.  call temp:= `a`(v0) @signature `Ll/f0/i/d;.a:(Lm/f;)Lm/f;` @kind static;
  #L3e8bea.  call temp:= `b`(v3) @signature `Ll/f0/i/d$a;.b:()Lm/f;` @kind virtual;
  #L3e8bf0.  v1:= temp @kind object;
  #L3e8bf2.  v2:= new `l.f0.i.c`;
  #L3e8bf6.  call `<init>`(v2, v0, v1) @signature `Ll/f0/i/c;.<init>:(Lm/f;Lm/f;)V` @kind direct;
  #L3e8bfc.  v0:= -1I;
  #L3e8bfe.  call `a`(v3, v0, v2) @signature `Ll/f0/i/d$a;.a:(ILl/f0/i/c;)V` @kind direct;
  #L3e8c04.  return @kind void;
}
procedure `void` `g`(`l.f0.i.d$a` v3 @kind this, `int` v4 ) @signature `Ll/f0/i/d$a;.g:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3e8c18.  call temp:= `c`(v3, v4) @signature `Ll/f0/i/d$a;.c:(I)Lm/f;` @kind direct;
  #L3e8c1e.  v4:= temp @kind object;
  #L3e8c20.  call temp:= `b`(v3) @signature `Ll/f0/i/d$a;.b:()Lm/f;` @kind virtual;
  #L3e8c26.  v0:= temp @kind object;
  #L3e8c28.  v1:= v3.`l.f0.i.d$a.a` @type ^`java.util.List` @kind object;
  #L3e8c2c.  v2:= new `l.f0.i.c`;
  #L3e8c30.  call `<init>`(v2, v4, v0) @signature `Ll/f0/i/c;.<init>:(Lm/f;Lm/f;)V` @kind direct;
  #L3e8c36.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e8c3c.  return @kind void;
}
procedure `void` `h`(`l.f0.i.d$a` v4 @kind this) @signature `Ll/f0/i/d$a;.h:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e8c50.  call temp:= `b`(v4) @signature `Ll/f0/i/d$a;.b:()Lm/f;` @kind virtual;
  #L3e8c56.  v0:= temp @kind object;
  #L3e8c58.  call temp:= `a`(v0) @signature `Ll/f0/i/d;.a:(Lm/f;)Lm/f;` @kind static;
  #L3e8c5e.  call temp:= `b`(v4) @signature `Ll/f0/i/d$a;.b:()Lm/f;` @kind virtual;
  #L3e8c64.  v1:= temp @kind object;
  #L3e8c66.  v2:= v4.`l.f0.i.d$a.a` @type ^`java.util.List` @kind object;
  #L3e8c6a.  v3:= new `l.f0.i.c`;
  #L3e8c6e.  call `<init>`(v3, v0, v1) @signature `Ll/f0/i/c;.<init>:(Lm/f;Lm/f;)V` @kind direct;
  #L3e8c74.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e8c7a.  return @kind void;
}
procedure `int` `a`(`l.f0.i.d$a` v2 @kind this, `int` v3 , `int` v4 ) @signature `Ll/f0/i/d$a;.a:(II)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3e86bc.  v3:= v3 ^& v4 @kind int;
  #L3e86be.  if v3 >= v4 then goto L3e86c4;
  #L3e86c2.  return v3;
  #L3e86c4.  v3:= 0I;
  #L3e86c6.  call temp:= `f`(v2) @signature `Ll/f0/i/d$a;.f:()I` @kind direct;
  #L3e86cc.  v0:= temp;
  #L3e86ce.  v1:= v0 ^& 128;
  #L3e86d2.  if v1 == 0 then goto L3e86e4;
  #L3e86d6.  v0:= v0 ^& 127;
  #L3e86da.  v0:= v0 ^< v3 @kind int;
  #L3e86dc.  v4:= v4 + v0 @kind int;
  #L3e86de.  v3:= v3 + 7;
  #L3e86e2.  goto L3e86c6;
  #L3e86e4.  v3:= v0 ^< v3 @kind int;
  #L3e86e8.  v4:= v4 + v3 @kind int;
  #L3e86ea.  return v4;
}
procedure `java.util.List` `a`(`l.f0.i.d$a` v2 @kind this) @signature `Ll/f0/i/d$a;.a:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e86fc.  v0:= new `java.util.ArrayList`;
  #L3e8700.  v1:= v2.`l.f0.i.d$a.a` @type ^`java.util.List` @kind object;
  #L3e8704.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3e870a.  v1:= v2.`l.f0.i.d$a.a` @type ^`java.util.List` @kind object;
  #L3e870e.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L3e8714.  return v0 @kind object;
}
procedure `m.f` `b`(`l.f0.i.d$a` v5 @kind this) @signature `Ll/f0/i/d$a;.b:()Lm/f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e87ac.  call temp:= `f`(v5) @signature `Ll/f0/i/d$a;.f:()I` @kind direct;
  #L3e87b2.  v0:= temp;
  #L3e87b4.  v1:= v0 ^& 128;
  #L3e87b8.  v2:= 128I;
  #L3e87bc.  if v1 != v2 then goto L3e87c4;
  #L3e87c0.  v1:= 1I;
  #L3e87c2.  goto L3e87c6;
  #L3e87c4.  v1:= 0I;
  #L3e87c6.  v2:= 127I;
  #L3e87ca.  call temp:= `a`(v5, v0, v2) @signature `Ll/f0/i/d$a;.a:(II)I` @kind virtual;
  #L3e87d0.  v0:= temp;
  #L3e87d2.  if v1 == 0 then goto L3e87fe;
  #L3e87d6.  call temp:= `b`() @signature `Ll/f0/i/k;.b:()Ll/f0/i/k;` @kind static;
  #L3e87dc.  v1:= temp @kind object;
  #L3e87de.  v2:= v5.`l.f0.i.d$a.b` @type ^`m.e` @kind object;
  #L3e87e2.  v3:= (`long`) v0 @kind i2l;
  #L3e87e4.  call temp:= `b`(v2, v3) @signature `Lm/e;.b:(J)[B` @kind interface;
  #L3e87ea.  v0:= temp @kind object;
  #L3e87ec.  call temp:= `a`(v1, v0) @signature `Ll/f0/i/k;.a:([B)[B` @kind virtual;
  #L3e87f2.  v0:= temp @kind object;
  #L3e87f4.  call temp:= `a`(v0) @signature `Lm/f;.a:([B)Lm/f;` @kind static;
  #L3e87fa.  v0:= temp @kind object;
  #L3e87fc.  return v0 @kind object;
  #L3e87fe.  v1:= v5.`l.f0.i.d$a.b` @type ^`m.e` @kind object;
  #L3e8802.  v2:= (`long`) v0 @kind i2l;
  #L3e8804.  call temp:= `a`(v1, v2) @signature `Lm/e;.a:(J)Lm/f;` @kind interface;
  #L3e880a.  v0:= temp @kind object;
  #L3e880c.  return v0 @kind object;
}
procedure `void` `c`(`l.f0.i.d$a` v3 @kind this) @signature `Ll/f0/i/d$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3e89e0.  v0:= v3.`l.f0.i.d$a.b` @type ^`m.e` @kind object;
  #L3e89e4.  call temp:= `g`(v0) @signature `Lm/e;.g:()Z` @kind interface;
  #L3e89ea.  v0:= temp;
  #L3e89ec.  if v0 != 0 then goto L3e8b00;
  #L3e89f0.  v0:= v3.`l.f0.i.d$a.b` @type ^`m.e` @kind object;
  #L3e89f4.  call temp:= `readByte`(v0) @signature `Lm/e;.readByte:()B` @kind interface;
  #L3e89fa.  v0:= temp;
  #L3e89fc.  v0:= v0 ^& 255;
  #L3e8a00.  v1:= 128I;
  #L3e8a04.  if v0 == v1 then goto L3e8af0;
  #L3e8a08.  v2:= v0 ^& 128;
  #L3e8a0c.  if v2 != v1 then goto L3e8a28;
  #L3e8a10.  v1:= 127I;
  #L3e8a14.  call temp:= `a`(v3, v0, v1) @signature `Ll/f0/i/d$a;.a:(II)I` @kind virtual;
  #L3e8a1a.  v0:= temp;
  #L3e8a1c.  v0:= v0 + -1;
  #L3e8a20.  call `e`(v3, v0) @signature `Ll/f0/i/d$a;.e:(I)V` @kind direct;
  #L3e8a26.  goto L3e89e0;
  #L3e8a28.  v1:= 64I;
  #L3e8a2c.  if v0 != v1 then goto L3e8a38;
  #L3e8a30.  call `g`(v3) @signature `Ll/f0/i/d$a;.g:()V` @kind direct;
  #L3e8a36.  goto L3e89e0;
  #L3e8a38.  v2:= v0 ^& 64;
  #L3e8a3c.  if v2 != v1 then goto L3e8a58;
  #L3e8a40.  v1:= 63I;
  #L3e8a44.  call temp:= `a`(v3, v0, v1) @signature `Ll/f0/i/d$a;.a:(II)I` @kind virtual;
  #L3e8a4a.  v0:= temp;
  #L3e8a4c.  v0:= v0 + -1;
  #L3e8a50.  call `f`(v3, v0) @signature `Ll/f0/i/d$a;.f:(I)V` @kind direct;
  #L3e8a56.  goto L3e89e0;
  #L3e8a58.  v1:= v0 ^& 32;
  #L3e8a5c.  v2:= 32I;
  #L3e8a60.  if v1 != v2 then goto L3e8abe;
  #L3e8a64.  v1:= 31I;
  #L3e8a68.  call temp:= `a`(v3, v0, v1) @signature `Ll/f0/i/d$a;.a:(II)I` @kind virtual;
  #L3e8a6e.  v0:= temp;
  #L3e8a70.  v3.`l.f0.i.d$a.d` @type ^`int` := v0;
  #L3e8a74.  v0:= v3.`l.f0.i.d$a.d` @type ^`int`;
  #L3e8a78.  if v0 < 0 then goto L3e8a8c;
  #L3e8a7c.  v1:= v3.`l.f0.i.d$a.c` @type ^`int`;
  #L3e8a80.  if v0 > v1 then goto L3e8a8c;
  #L3e8a84.  call `d`(v3) @signature `Ll/f0/i/d$a;.d:()V` @kind direct;
  #L3e8a8a.  goto L3e89e0;
  #L3e8a8c.  v0:= new `java.io.IOException`;
  #L3e8a90.  v1:= new `java.lang.StringBuilder`;
  #L3e8a94.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e8a9a.  v2:= "Invalid dynamic table size update " @kind object;
  #L3e8a9e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e8aa4.  v2:= v3.`l.f0.i.d$a.d` @type ^`int`;
  #L3e8aa8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e8aae.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e8ab4.  v1:= temp @kind object;
  #L3e8ab6.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e8abc.  throw v0;
  #L3e8abe.  v1:= 16I;
  #L3e8ac2.  if v0 == v1 then goto L3e8ae6;
  #L3e8ac6.  if v0 != 0 then goto L3e8acc;
  #L3e8aca.  goto L3e8ae6;
  #L3e8acc.  v1:= 15I;
  #L3e8ad0.  call temp:= `a`(v3, v0, v1) @signature `Ll/f0/i/d$a;.a:(II)I` @kind virtual;
  #L3e8ad6.  v0:= temp;
  #L3e8ad8.  v0:= v0 + -1;
  #L3e8adc.  call `g`(v3, v0) @signature `Ll/f0/i/d$a;.g:(I)V` @kind direct;
  #L3e8ae2.  goto L3e89e0;
  #L3e8ae6.  call `h`(v3) @signature `Ll/f0/i/d$a;.h:()V` @kind direct;
  #L3e8aec.  goto L3e89e0;
  #L3e8af0.  v0:= new `java.io.IOException`;
  #L3e8af4.  v1:= "index == 0" @kind object;
  #L3e8af8.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e8afe.  throw v0;
  #L3e8b00.  return @kind void;
}
