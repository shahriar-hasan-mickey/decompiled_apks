record `l.f0.i.i` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `l.f0.i.i.a` @AccessFlag ;
  `long` `l.f0.i.i.b` @AccessFlag ;
  `int` `l.f0.i.i.c` @AccessFlag FINAL;
  `l.f0.i.g` `l.f0.i.i.d` @AccessFlag FINAL;
  `java.util.Deque` `l.f0.i.i.e` @AccessFlag PRIVATE_FINAL;
  `l.f0.i.c$a` `l.f0.i.i.f` @AccessFlag PRIVATE;
  `boolean` `l.f0.i.i.g` @AccessFlag PRIVATE;
  `l.f0.i.i$b` `l.f0.i.i.h` @AccessFlag PRIVATE_FINAL;
  `l.f0.i.i$a` `l.f0.i.i.i` @AccessFlag FINAL;
  `l.f0.i.i$c` `l.f0.i.i.j` @AccessFlag FINAL;
  `l.f0.i.i$c` `l.f0.i.i.k` @AccessFlag FINAL;
  `l.f0.i.b` `l.f0.i.i.l` @AccessFlag ;
}
procedure `void` `<init>`(`l.f0.i.i` v2 @kind this, `int` v3 , `l.f0.i.g` v4 @kind object, `boolean` v5 , `boolean` v6 , `l.r` v7 @kind object) @signature `Ll/f0/i/i;.<init>:(ILl/f0/i/g;ZZLl/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ecd50.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ecd56.  v0:= 0L;
  #L3ecd5a.  v2.`l.f0.i.i.a` @type ^`long` := v0 @kind wide;
  #L3ecd5e.  v0:= new `java.util.ArrayDeque`;
  #L3ecd62.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L3ecd68.  v2.`l.f0.i.i.e` @type ^`java.util.Deque` := v0 @kind object;
  #L3ecd6c.  v0:= new `l.f0.i.i$c`;
  #L3ecd70.  call `<init>`(v0, v2) @signature `Ll/f0/i/i$c;.<init>:(Ll/f0/i/i;)V` @kind direct;
  #L3ecd76.  v2.`l.f0.i.i.j` @type ^`l.f0.i.i$c` := v0 @kind object;
  #L3ecd7a.  v0:= new `l.f0.i.i$c`;
  #L3ecd7e.  call `<init>`(v0, v2) @signature `Ll/f0/i/i$c;.<init>:(Ll/f0/i/i;)V` @kind direct;
  #L3ecd84.  v2.`l.f0.i.i.k` @type ^`l.f0.i.i$c` := v0 @kind object;
  #L3ecd88.  v0:= 0I;
  #L3ecd8a.  v2.`l.f0.i.i.l` @type ^`l.f0.i.b` := v0 @kind object;
  #L3ecd8e.  if v4 == 0 then goto L3ece3a;
  #L3ecd92.  v2.`l.f0.i.i.c` @type ^`int` := v3;
  #L3ecd96.  v2.`l.f0.i.i.d` @type ^`l.f0.i.g` := v4 @kind object;
  #L3ecd9a.  v3:= v4.`l.f0.i.g.p` @type ^`l.f0.i.m` @kind object;
  #L3ecd9e.  call temp:= `c`(v3) @signature `Ll/f0/i/m;.c:()I` @kind virtual;
  #L3ecda4.  v3:= temp;
  #L3ecda6.  v0:= (`long`) v3 @kind i2l;
  #L3ecda8.  v2.`l.f0.i.i.b` @type ^`long` := v0 @kind wide;
  #L3ecdac.  v3:= new `l.f0.i.i$b`;
  #L3ecdb0.  v4:= v4.`l.f0.i.g.o` @type ^`l.f0.i.m` @kind object;
  #L3ecdb4.  call temp:= `c`(v4) @signature `Ll/f0/i/m;.c:()I` @kind virtual;
  #L3ecdba.  v4:= temp;
  #L3ecdbc.  v0:= (`long`) v4 @kind i2l;
  #L3ecdbe.  call `<init>`(v3, v2, v0) @signature `Ll/f0/i/i$b;.<init>:(Ll/f0/i/i;J)V` @kind direct;
  #L3ecdc4.  v2.`l.f0.i.i.h` @type ^`l.f0.i.i$b` := v3 @kind object;
  #L3ecdc8.  v3:= new `l.f0.i.i$a`;
  #L3ecdcc.  call `<init>`(v3, v2) @signature `Ll/f0/i/i$a;.<init>:(Ll/f0/i/i;)V` @kind direct;
  #L3ecdd2.  v2.`l.f0.i.i.i` @type ^`l.f0.i.i$a` := v3 @kind object;
  #L3ecdd6.  v3:= v2.`l.f0.i.i.h` @type ^`l.f0.i.i$b` @kind object;
  #L3ecdda.  v3.`l.f0.i.i$b.f` @type ^`boolean` := v6 @kind boolean;
  #L3ecdde.  v3:= v2.`l.f0.i.i.i` @type ^`l.f0.i.i$a` @kind object;
  #L3ecde2.  v3.`l.f0.i.i$a.d` @type ^`boolean` := v5 @kind boolean;
  #L3ecde6.  if v7 == 0 then goto L3ecdf4;
  #L3ecdea.  v3:= v2.`l.f0.i.i.e` @type ^`java.util.Deque` @kind object;
  #L3ecdee.  call temp:= `add`(v3, v7) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3ecdf4.  call temp:= `f`(v2) @signature `Ll/f0/i/i;.f:()Z` @kind virtual;
  #L3ecdfa.  v3:= temp;
  #L3ecdfc.  if v3 == 0 then goto L3ece16;
  #L3ece00.  if v7 != 0 then goto L3ece06;
  #L3ece04.  goto L3ece16;
  #L3ece06.  v3:= new `java.lang.IllegalStateException`;
  #L3ece0a.  v4:= "locally-initiated streams shouldn't have headers yet" @kind object;
  #L3ece0e.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ece14.  throw v3;
  #L3ece16.  call temp:= `f`(v2) @signature `Ll/f0/i/i;.f:()Z` @kind virtual;
  #L3ece1c.  v3:= temp;
  #L3ece1e.  if v3 != 0 then goto L3ece38;
  #L3ece22.  if v7 == 0 then goto L3ece28;
  #L3ece26.  goto L3ece38;
  #L3ece28.  v3:= new `java.lang.IllegalStateException`;
  #L3ece2c.  v4:= "remotely-initiated streams should have headers" @kind object;
  #L3ece30.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ece36.  throw v3;
  #L3ece38.  return @kind void;
  #L3ece3a.  v3:= new `java.lang.NullPointerException`;
  #L3ece3e.  v4:= "connection == null" @kind object;
  #L3ece42.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ece48.  throw v3;
}
procedure `java.util.Deque` `a`(`l.f0.i.i` v0 @kind object) @signature `Ll/f0/i/i;.a:(Ll/f0/i/i;)Ljava/util/Deque;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3ecbc4.  v0:= v0.`l.f0.i.i.e` @type ^`java.util.Deque` @kind object;
  #L3ecbc8.  return v0 @kind object;
}
procedure `l.f0.i.c$a` `b`(`l.f0.i.i` v0 @kind object) @signature `Ll/f0/i/i;.b:(Ll/f0/i/i;)Ll/f0/i/c$a;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3ecc94.  v0:= v0.`l.f0.i.i.f` @type ^`l.f0.i.c$a` @kind object;
  #L3ecc98.  return v0 @kind object;
}
procedure `boolean` `d`(`l.f0.i.i` v2 @kind this, `l.f0.i.b` v3 @kind object) @signature `Ll/f0/i/i;.d:(Ll/f0/i/b;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3eca84.  @monitorenter v2
  #L3eca86.  v0:= v2.`l.f0.i.i.l` @type ^`l.f0.i.b` @kind object;
  #L3eca8a.  v1:= 0I;
  #L3eca8c.  if v0 == 0 then goto L3eca94;
  #L3eca90.  @monitorexit v2
  #L3eca92.  return v1;
  #L3eca94.  v0:= v2.`l.f0.i.i.h` @type ^`l.f0.i.i$b` @kind object;
  #L3eca98.  v0:= v0.`l.f0.i.i$b.f` @type ^`boolean` @kind boolean;
  #L3eca9c.  if v0 == 0 then goto L3ecab0;
  #L3ecaa0.  v0:= v2.`l.f0.i.i.i` @type ^`l.f0.i.i$a` @kind object;
  #L3ecaa4.  v0:= v0.`l.f0.i.i$a.d` @type ^`boolean` @kind boolean;
  #L3ecaa8.  if v0 == 0 then goto L3ecab0;
  #L3ecaac.  @monitorexit v2
  #L3ecaae.  return v1;
  #L3ecab0.  v2.`l.f0.i.i.l` @type ^`l.f0.i.b` := v3 @kind object;
  #L3ecab4.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L3ecaba.  @monitorexit v2
  #L3ecabc.  v3:= v2.`l.f0.i.i.d` @type ^`l.f0.i.g` @kind object;
  #L3ecac0.  v0:= v2.`l.f0.i.i.c` @type ^`int`;
  #L3ecac4.  call temp:= `c`(v3, v0) @signature `Ll/f0/i/g;.c:(I)Ll/f0/i/i;` @kind virtual;
  #L3ecaca.  v3:= 1I;
  #L3ecacc.  return v3;
  #L3ecace.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ecad0.  @monitorexit v2
  #L3ecad2.  throw v3;
  catch `java.lang.Throwable` @[L3eca86..L3ecabc] goto L3ecace;
  catch `java.lang.Throwable` @[L3ecad0..L3ecad2] goto L3ecace;
}
procedure `void` `a`(`l.f0.i.i` v2 @kind this) @signature `Ll/f0/i/i;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3ece8c.  @monitorenter v2
  #L3ece8e.  v0:= v2.`l.f0.i.i.h` @type ^`l.f0.i.i$b` @kind object;
  #L3ece92.  v0:= v0.`l.f0.i.i$b.f` @type ^`boolean` @kind boolean;
  #L3ece96.  if v0 != 0 then goto L3ecec2;
  #L3ece9a.  v0:= v2.`l.f0.i.i.h` @type ^`l.f0.i.i$b` @kind object;
  #L3ece9e.  v0:= v0.`l.f0.i.i$b.e` @type ^`boolean` @kind boolean;
  #L3ecea2.  if v0 == 0 then goto L3ecec2;
  #L3ecea6.  v0:= v2.`l.f0.i.i.i` @type ^`l.f0.i.i$a` @kind object;
  #L3eceaa.  v0:= v0.`l.f0.i.i$a.d` @type ^`boolean` @kind boolean;
  #L3eceae.  if v0 != 0 then goto L3ecebe;
  #L3eceb2.  v0:= v2.`l.f0.i.i.i` @type ^`l.f0.i.i$a` @kind object;
  #L3eceb6.  v0:= v0.`l.f0.i.i$a.c` @type ^`boolean` @kind boolean;
  #L3eceba.  if v0 == 0 then goto L3ecec2;
  #L3ecebe.  v0:= 1I;
  #L3ecec0.  goto L3ecec4;
  #L3ecec2.  v0:= 0I;
  #L3ecec4.  call temp:= `g`(v2) @signature `Ll/f0/i/i;.g:()Z` @kind virtual;
  #L3ececa.  v1:= temp;
  #L3ececc.  @monitorexit v2
  #L3ecece.  if v0 == 0 then goto L3ecede;
  #L3eced2.  v0:= `@@l.f0.i.b.h` @type ^`l.f0.i.b` @kind object;
  #L3eced6.  call `a`(v2, v0) @signature `Ll/f0/i/i;.a:(Ll/f0/i/b;)V` @kind virtual;
  #L3ecedc.  goto L3ecef0;
  #L3ecede.  if v1 != 0 then goto L3ecef0;
  #L3ecee2.  v0:= v2.`l.f0.i.i.d` @type ^`l.f0.i.g` @kind object;
  #L3ecee6.  v1:= v2.`l.f0.i.i.c` @type ^`int`;
  #L3eceea.  call temp:= `c`(v0, v1) @signature `Ll/f0/i/g;.c:(I)Ll/f0/i/i;` @kind virtual;
  #L3ecef0.  return @kind void;
  #L3ecef2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ecef4.  @monitorexit v2
  #L3ecef6.  throw v0;
  catch `java.lang.Throwable` @[L3ece8e..L3ecece] goto L3ecef2;
  catch `java.lang.Throwable` @[L3ecef4..L3ecef6] goto L3ecef2;
}
procedure `void` `a`(`l.f0.i.i` v3 @kind this, `long` v4 ) @signature `Ll/f0/i/i;.a:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3ece5c.  v0:= v3.`l.f0.i.i.b` @type ^`long` @kind wide;
  #L3ece60.  v0:= v0 + v4 @kind long;
  #L3ece62.  v3.`l.f0.i.i.b` @type ^`long` := v0 @kind wide;
  #L3ece66.  v0:= 0L;
  #L3ece6a.  v2:= lcmp(v4, v0);
  #L3ece6e.  if v2 <= 0 then goto L3ece78;
  #L3ece72.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L3ece78.  return @kind void;
}
procedure `void` `a`(`l.f0.i.i` v1 @kind this, `java.util.List` v2 @kind object) @signature `Ll/f0/i/i;.a:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;

  #L3ed054.  @monitorenter v1
  #L3ed056.  v0:= 1I;
  #L3ed058.  v1.`l.f0.i.i.g` @type ^`boolean` := v0 @kind boolean;
  #L3ed05c.  v0:= v1.`l.f0.i.i.e` @type ^`java.util.Deque` @kind object;
  #L3ed060.  call temp:= `b`(v2) @signature `Ll/f0/c;.b:(Ljava/util/List;)Ll/r;` @kind static;
  #L3ed066.  v2:= temp @kind object;
  #L3ed068.  call temp:= `add`(v0, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3ed06e.  call temp:= `g`(v1) @signature `Ll/f0/i/i;.g:()Z` @kind virtual;
  #L3ed074.  v2:= temp;
  #L3ed076.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L3ed07c.  @monitorexit v1
  #L3ed07e.  if v2 != 0 then goto L3ed090;
  #L3ed082.  v2:= v1.`l.f0.i.i.d` @type ^`l.f0.i.g` @kind object;
  #L3ed086.  v0:= v1.`l.f0.i.i.c` @type ^`int`;
  #L3ed08a.  call temp:= `c`(v2, v0) @signature `Ll/f0/i/g;.c:(I)Ll/f0/i/i;` @kind virtual;
  #L3ed090.  return @kind void;
  #L3ed092.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed094.  @monitorexit v1
  #L3ed096.  throw v2;
  catch `java.lang.Throwable` @[L3ed058..L3ed07e] goto L3ed092;
  catch `java.lang.Throwable` @[L3ed094..L3ed096] goto L3ed092;
}
procedure `void` `a`(`l.f0.i.i` v2 @kind this, `l.f0.i.b` v3 @kind object) @signature `Ll/f0/i/i;.a:(Ll/f0/i/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ecf78.  call temp:= `d`(v2, v3) @signature `Ll/f0/i/i;.d:(Ll/f0/i/b;)Z` @kind direct;
  #L3ecf7e.  v0:= temp;
  #L3ecf80.  if v0 != 0 then goto L3ecf86;
  #L3ecf84.  return @kind void;
  #L3ecf86.  v0:= v2.`l.f0.i.i.d` @type ^`l.f0.i.g` @kind object;
  #L3ecf8a.  v1:= v2.`l.f0.i.i.c` @type ^`int`;
  #L3ecf8e.  call `b`(v0, v1, v3) @signature `Ll/f0/i/g;.b:(ILl/f0/i/b;)V` @kind virtual;
  #L3ecf94.  return @kind void;
}
procedure `void` `a`(`l.f0.i.i` v3 @kind this, `m.e` v4 @kind object, `int` v5 ) @signature `Ll/f0/i/i;.a:(Lm/e;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3ecfd8.  v0:= v3.`l.f0.i.i.h` @type ^`l.f0.i.i$b` @kind object;
  #L3ecfdc.  v1:= (`long`) v5 @kind i2l;
  #L3ecfde.  call `a`(v0, v4, v1) @signature `Ll/f0/i/i$b;.a:(Lm/e;J)V` @kind virtual;
  #L3ecfe4.  return @kind void;
}
procedure `void` `b`(`l.f0.i.i` v2 @kind this) @signature `Ll/f0/i/i;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3ecf1c.  v0:= v2.`l.f0.i.i.i` @type ^`l.f0.i.i$a` @kind object;
  #L3ecf20.  v1:= v0.`l.f0.i.i$a.c` @type ^`boolean` @kind boolean;
  #L3ecf24.  if v1 != 0 then goto L3ecf56;
  #L3ecf28.  v0:= v0.`l.f0.i.i$a.d` @type ^`boolean` @kind boolean;
  #L3ecf2c.  if v0 != 0 then goto L3ecf46;
  #L3ecf30.  v0:= v2.`l.f0.i.i.l` @type ^`l.f0.i.b` @kind object;
  #L3ecf34.  if v0 != 0 then goto L3ecf3a;
  #L3ecf38.  return @kind void;
  #L3ecf3a.  v1:= new `l.f0.i.n`;
  #L3ecf3e.  call `<init>`(v1, v0) @signature `Ll/f0/i/n;.<init>:(Ll/f0/i/b;)V` @kind direct;
  #L3ecf44.  throw v1;
  #L3ecf46.  v0:= new `java.io.IOException`;
  #L3ecf4a.  v1:= "stream finished" @kind object;
  #L3ecf4e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ecf54.  throw v0;
  #L3ecf56.  v0:= new `java.io.IOException`;
  #L3ecf5a.  v1:= "stream closed" @kind object;
  #L3ecf5e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ecf64.  throw v0;
}
procedure `void` `b`(`l.f0.i.i` v2 @kind this, `l.f0.i.b` v3 @kind object) @signature `Ll/f0/i/i;.b:(Ll/f0/i/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ecfa8.  call temp:= `d`(v2, v3) @signature `Ll/f0/i/i;.d:(Ll/f0/i/b;)Z` @kind direct;
  #L3ecfae.  v0:= temp;
  #L3ecfb0.  if v0 != 0 then goto L3ecfb6;
  #L3ecfb4.  return @kind void;
  #L3ecfb6.  v0:= v2.`l.f0.i.i.d` @type ^`l.f0.i.g` @kind object;
  #L3ecfba.  v1:= v2.`l.f0.i.i.c` @type ^`int`;
  #L3ecfbe.  call `c`(v0, v1, v3) @signature `Ll/f0/i/g;.c:(ILl/f0/i/b;)V` @kind virtual;
  #L3ecfc4.  return @kind void;
}
procedure `int` `c`(`l.f0.i.i` v1 @kind this) @signature `Ll/f0/i/i;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ecbac.  v0:= v1.`l.f0.i.i.c` @type ^`int`;
  #L3ecbb0.  return v0;
}
procedure `void` `c`(`l.f0.i.i` v1 @kind this, `l.f0.i.b` v2 @kind object) @signature `Ll/f0/i/i;.c:(Ll/f0/i/b;)V` @AccessFlag  {
    temp;
    v0;

  #L3ed0bc.  @monitorenter v1
  #L3ed0be.  v0:= v1.`l.f0.i.i.l` @type ^`l.f0.i.b` @kind object;
  #L3ed0c2.  if v0 != 0 then goto L3ed0d0;
  #L3ed0c6.  v1.`l.f0.i.i.l` @type ^`l.f0.i.b` := v2 @kind object;
  #L3ed0ca.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L3ed0d0.  @monitorexit v1
  #L3ed0d2.  return @kind void;
  #L3ed0d4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed0d6.  @monitorexit v1
  #L3ed0d8.  throw v2;
  catch `java.lang.Throwable` @[L3ed0be..L3ed0d0] goto L3ed0d4;
}
procedure `m.r` `d`(`l.f0.i.i` v2 @kind this) @signature `Ll/f0/i/i;.d:()Lm/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3eccac.  @monitorenter v2
  #L3eccae.  v0:= v2.`l.f0.i.i.g` @type ^`boolean` @kind boolean;
  #L3eccb2.  if v0 != 0 then goto L3eccd4;
  #L3eccb6.  call temp:= `f`(v2) @signature `Ll/f0/i/i;.f:()Z` @kind virtual;
  #L3eccbc.  v0:= temp;
  #L3eccbe.  if v0 == 0 then goto L3eccc4;
  #L3eccc2.  goto L3eccd4;
  #L3eccc4.  v0:= new `java.lang.IllegalStateException`;
  #L3eccc8.  v1:= "reply before requesting the sink" @kind object;
  #L3ecccc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eccd2.  throw v0;
  #L3eccd4.  @monitorexit v2
  #L3eccd6.  v0:= v2.`l.f0.i.i.i` @type ^`l.f0.i.i$a` @kind object;
  #L3eccda.  return v0 @kind object;
  #L3eccdc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eccde.  @monitorexit v2
  #L3ecce0.  throw v0;
  catch `java.lang.Throwable` @[L3eccae..L3eccd6] goto L3eccdc;
  catch `java.lang.Throwable` @[L3eccde..L3ecce0] goto L3eccdc;
}
procedure `m.s` `e`(`l.f0.i.i` v1 @kind this) @signature `Ll/f0/i/i;.e:()Lm/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ecd08.  v0:= v1.`l.f0.i.i.h` @type ^`l.f0.i.i$b` @kind object;
  #L3ecd0c.  return v0 @kind object;
}
procedure `boolean` `f`(`l.f0.i.i` v4 @kind this) @signature `Ll/f0/i/i;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ecaf8.  v0:= v4.`l.f0.i.i.c` @type ^`int`;
  #L3ecafc.  v1:= 1I;
  #L3ecafe.  v0:= v0 ^& v1 @kind int;
  #L3ecb00.  v2:= 0I;
  #L3ecb02.  if v0 != v1 then goto L3ecb0a;
  #L3ecb06.  v0:= 1I;
  #L3ecb08.  goto L3ecb0c;
  #L3ecb0a.  v0:= 0I;
  #L3ecb0c.  v3:= v4.`l.f0.i.i.d` @type ^`l.f0.i.g` @kind object;
  #L3ecb10.  v3:= v3.`l.f0.i.g.b` @type ^`boolean` @kind boolean;
  #L3ecb14.  if v3 != v0 then goto L3ecb1a;
  #L3ecb18.  goto L3ecb1c;
  #L3ecb1a.  v1:= 0I;
  #L3ecb1c.  return v1;
}
procedure `boolean` `g`(`l.f0.i.i` v2 @kind this) @signature `Ll/f0/i/i;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ecb30.  @monitorenter v2
  #L3ecb32.  v0:= v2.`l.f0.i.i.l` @type ^`l.f0.i.b` @kind object;
  #L3ecb36.  v1:= 0I;
  #L3ecb38.  if v0 == 0 then goto L3ecb40;
  #L3ecb3c.  @monitorexit v2
  #L3ecb3e.  return v1;
  #L3ecb40.  v0:= v2.`l.f0.i.i.h` @type ^`l.f0.i.i$b` @kind object;
  #L3ecb44.  v0:= v0.`l.f0.i.i$b.f` @type ^`boolean` @kind boolean;
  #L3ecb48.  if v0 != 0 then goto L3ecb58;
  #L3ecb4c.  v0:= v2.`l.f0.i.i.h` @type ^`l.f0.i.i$b` @kind object;
  #L3ecb50.  v0:= v0.`l.f0.i.i$b.e` @type ^`boolean` @kind boolean;
  #L3ecb54.  if v0 == 0 then goto L3ecb7c;
  #L3ecb58.  v0:= v2.`l.f0.i.i.i` @type ^`l.f0.i.i$a` @kind object;
  #L3ecb5c.  v0:= v0.`l.f0.i.i$a.d` @type ^`boolean` @kind boolean;
  #L3ecb60.  if v0 != 0 then goto L3ecb70;
  #L3ecb64.  v0:= v2.`l.f0.i.i.i` @type ^`l.f0.i.i$a` @kind object;
  #L3ecb68.  v0:= v0.`l.f0.i.i$a.c` @type ^`boolean` @kind boolean;
  #L3ecb6c.  if v0 == 0 then goto L3ecb7c;
  #L3ecb70.  v0:= v2.`l.f0.i.i.g` @type ^`boolean` @kind boolean;
  #L3ecb74.  if v0 == 0 then goto L3ecb7c;
  #L3ecb78.  @monitorexit v2
  #L3ecb7a.  return v1;
  #L3ecb7c.  v0:= 1I;
  #L3ecb7e.  @monitorexit v2
  #L3ecb80.  return v0;
  #L3ecb82.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ecb84.  @monitorexit v2
  #L3ecb86.  throw v0;
  catch `java.lang.Throwable` @[L3ecb32..L3ecb36] goto L3ecb82;
  catch `java.lang.Throwable` @[L3ecb40..L3ecb74] goto L3ecb82;
}
procedure `m.t` `h`(`l.f0.i.i` v1 @kind this) @signature `Ll/f0/i/i;.h:()Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ecd20.  v0:= v1.`l.f0.i.i.j` @type ^`l.f0.i.i$c` @kind object;
  #L3ecd24.  return v0 @kind object;
}
procedure `void` `i`(`l.f0.i.i` v2 @kind this) @signature `Ll/f0/i/i;.i:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3ecff8.  @monitorenter v2
  #L3ecffa.  v0:= v2.`l.f0.i.i.h` @type ^`l.f0.i.i$b` @kind object;
  #L3ecffe.  v1:= 1I;
  #L3ed000.  v0.`l.f0.i.i$b.f` @type ^`boolean` := v1 @kind boolean;
  #L3ed004.  call temp:= `g`(v2) @signature `Ll/f0/i/i;.g:()Z` @kind virtual;
  #L3ed00a.  v0:= temp;
  #L3ed00c.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L3ed012.  @monitorexit v2
  #L3ed014.  if v0 != 0 then goto L3ed026;
  #L3ed018.  v0:= v2.`l.f0.i.i.d` @type ^`l.f0.i.g` @kind object;
  #L3ed01c.  v1:= v2.`l.f0.i.i.c` @type ^`int`;
  #L3ed020.  call temp:= `c`(v0, v1) @signature `Ll/f0/i/g;.c:(I)Ll/f0/i/i;` @kind virtual;
  #L3ed026.  return @kind void;
  #L3ed028.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ed02a.  @monitorexit v2
  #L3ed02c.  throw v0;
  catch `java.lang.Throwable` @[L3ecffa..L3ed014] goto L3ed028;
  catch `java.lang.Throwable` @[L3ed02a..L3ed02c] goto L3ed028;
}
procedure `l.r` `j`(`l.f0.i.i` v2 @kind this) @signature `Ll/f0/i/i;.j:()Ll/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ecbdc.  @monitorenter v2
  #L3ecbde.  v0:= v2.`l.f0.i.i.j` @type ^`l.f0.i.i$c` @kind object;
  #L3ecbe2.  call `g`(v0) @signature `Lm/a;.g:()V` @kind virtual;
  #L3ecbe8.  v0:= v2.`l.f0.i.i.e` @type ^`java.util.Deque` @kind object;
  #L3ecbec.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L3ecbf2.  v0:= temp;
  #L3ecbf4.  if v0 == 0 then goto L3ecc08;
  #L3ecbf8.  v0:= v2.`l.f0.i.i.l` @type ^`l.f0.i.b` @kind object;
  #L3ecbfc.  if v0 != 0 then goto L3ecc08;
  #L3ecc00.  call `k`(v2) @signature `Ll/f0/i/i;.k:()V` @kind virtual;
  #L3ecc06.  goto L3ecbe8;
  #L3ecc08.  v0:= v2.`l.f0.i.i.j` @type ^`l.f0.i.i$c` @kind object;
  #L3ecc0c.  call `k`(v0) @signature `Ll/f0/i/i$c;.k:()V` @kind virtual;
  #L3ecc12.  v0:= v2.`l.f0.i.i.e` @type ^`java.util.Deque` @kind object;
  #L3ecc16.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L3ecc1c.  v0:= temp;
  #L3ecc1e.  if v0 != 0 then goto L3ecc36;
  #L3ecc22.  v0:= v2.`l.f0.i.i.e` @type ^`java.util.Deque` @kind object;
  #L3ecc26.  call temp:= `removeFirst`(v0) @signature `Ljava/util/Deque;.removeFirst:()Ljava/lang/Object;` @kind interface;
  #L3ecc2c.  v0:= temp @kind object;
  #L3ecc2e.  v0:= (`l.r`) v0 @kind object;
  #L3ecc32.  @monitorexit v2
  #L3ecc34.  return v0 @kind object;
  #L3ecc36.  v0:= new `l.f0.i.n`;
  #L3ecc3a.  v1:= v2.`l.f0.i.i.l` @type ^`l.f0.i.b` @kind object;
  #L3ecc3e.  call `<init>`(v0, v1) @signature `Ll/f0/i/n;.<init>:(Ll/f0/i/b;)V` @kind direct;
  #L3ecc44.  throw v0;
  #L3ecc46.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ecc48.  v1:= v2.`l.f0.i.i.j` @type ^`l.f0.i.i$c` @kind object;
  #L3ecc4c.  call `k`(v1) @signature `Ll/f0/i/i$c;.k:()V` @kind virtual;
  #L3ecc52.  throw v0;
  #L3ecc54.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ecc56.  @monitorexit v2
  #L3ecc58.  throw v0;
  catch `java.lang.Throwable` @[L3ecbde..L3ecbe8] goto L3ecc54;
  catch `java.lang.Throwable` @[L3ecbe8..L3ecc06] goto L3ecc46;
  catch `java.lang.Throwable` @[L3ecc08..L3ecc32] goto L3ecc54;
  catch `java.lang.Throwable` @[L3ecc36..L3ecc54] goto L3ecc54;
}
procedure `void` `k`(`l.f0.i.i` v1 @kind this) @signature `Ll/f0/i/i;.k:()V` @AccessFlag  {
    temp;
    v0;

  #L3ed0f8.  call `wait`(v1) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #L3ed0fe.  return @kind void;
  #L3ed100.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3ed106.  v0:= temp @kind object;
  #L3ed108.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L3ed10e.  v0:= new `java.io.InterruptedIOException`;
  #L3ed112.  call `<init>`(v0) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L3ed118.  throw v0;
  catch `java.lang.InterruptedException` @[L3ed0f8..L3ed0fe] goto L3ed100;
}
procedure `m.t` `l`(`l.f0.i.i` v1 @kind this) @signature `Ll/f0/i/i;.l:()Lm/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ecd38.  v0:= v1.`l.f0.i.i.k` @type ^`l.f0.i.i$c` @kind object;
  #L3ecd3c.  return v0 @kind object;
}
