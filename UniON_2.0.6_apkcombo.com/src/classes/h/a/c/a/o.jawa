record `h.a.c.a.o` @kind class @AccessFlag PUBLIC_FINAL extends `h.a.c.a.h` @kind interface {
}
global `java.nio.charset.Charset` `@@h.a.c.a.o.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `h.a.c.a.o` `@@h.a.c.a.o.b` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lh/a/c/a/o;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3b48c0.  v0:= "UTF8" @kind object;
  #L3b48c4.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L3b48ca.  v0:= temp @kind object;
  #L3b48cc.  `@@h.a.c.a.o.a` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L3b48d0.  v0:= new `h.a.c.a.o`;
  #L3b48d4.  call `<init>`(v0) @signature `Lh/a/c/a/o;.<init>:()V` @kind direct;
  #L3b48da.  `@@h.a.c.a.o.b` @type ^`h.a.c.a.o` := v0 @kind object;
  #L3b48de.  return @kind void;
}
procedure `void` `<init>`(`h.a.c.a.o` v0 @kind this) @signature `Lh/a/c/a/o;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3b48f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b48f6.  return @kind void;
}
procedure `java.lang.Object` `a`(`h.a.c.a.o` v0 @kind this, `java.nio.ByteBuffer` v1 @kind object) @signature `Lh/a/c/a/o;.a:(Ljava/nio/ByteBuffer;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3b47f0.  call temp:= `a`(v0, v1) @signature `Lh/a/c/a/o;.a:(Ljava/nio/ByteBuffer;)Ljava/lang/String;` @kind virtual;
  #L3b47f6.  v1:= temp @kind object;
  #L3b47f8.  return v1 @kind object;
}
procedure `java.lang.String` `a`(`h.a.c.a.o` v4 @kind this, `java.nio.ByteBuffer` v5 @kind object) @signature `Lh/a/c/a/o;.a:(Ljava/nio/ByteBuffer;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b480c.  if v5 != 0 then goto L3b4814;
  #L3b4810.  v5:= 0I;
  #L3b4812.  return v5 @kind object;
  #L3b4814.  call temp:= `remaining`(v5) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L3b481a.  v0:= temp;
  #L3b481c.  call temp:= `hasArray`(v5) @signature `Ljava/nio/ByteBuffer;.hasArray:()Z` @kind virtual;
  #L3b4822.  v1:= temp;
  #L3b4824.  if v1 == 0 then goto L3b483a;
  #L3b4828.  call temp:= `array`(v5) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L3b482e.  v1:= temp @kind object;
  #L3b4830.  call temp:= `arrayOffset`(v5) @signature `Ljava/nio/ByteBuffer;.arrayOffset:()I` @kind virtual;
  #L3b4836.  v5:= temp;
  #L3b4838.  goto L3b4846;
  #L3b483a.  v1:= new `byte`[v0];
  #L3b483e.  call temp:= `get`(v5, v1) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3b4844.  v5:= 0I;
  #L3b4846.  v2:= new `java.lang.String`;
  #L3b484a.  v3:= `@@h.a.c.a.o.a` @type ^`java.nio.charset.Charset` @kind object;
  #L3b484e.  call `<init>`(v2, v1, v5, v0, v3) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L3b4854.  return v2 @kind object;
}
procedure `java.nio.ByteBuffer` `a`(`h.a.c.a.o` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lh/a/c/a/o;.a:(Ljava/lang/Object;)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3b4868.  v1:= (`java.lang.String`) v1 @kind object;
  #L3b486c.  call temp:= `a`(v0, v1) @signature `Lh/a/c/a/o;.a:(Ljava/lang/String;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3b4872.  v1:= temp @kind object;
  #L3b4874.  return v1 @kind object;
}
procedure `java.nio.ByteBuffer` `a`(`h.a.c.a.o` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lh/a/c/a/o;.a:(Ljava/lang/String;)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b4888.  if v2 != 0 then goto L3b4890;
  #L3b488c.  v2:= 0I;
  #L3b488e.  return v2 @kind object;
  #L3b4890.  v0:= `@@h.a.c.a.o.a` @type ^`java.nio.charset.Charset` @kind object;
  #L3b4894.  call temp:= `getBytes`(v2, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L3b489a.  v2:= temp @kind object;
  #L3b489c.  v0:= length @variable v2;
  #L3b489e.  call temp:= `allocateDirect`(v0) @signature `Ljava/nio/ByteBuffer;.allocateDirect:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L3b48a4.  v0:= temp @kind object;
  #L3b48a6.  call temp:= `put`(v0, v2) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3b48ac.  return v0 @kind object;
}
