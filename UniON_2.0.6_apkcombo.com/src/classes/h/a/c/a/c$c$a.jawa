record `h.a.c.a.c$c$a` @kind class @AccessFlag FINAL extends `h.a.c.a.c$b` @kind interface {
  `java.util.concurrent.atomic.AtomicBoolean` `h.a.c.a.c$c$a.a` @AccessFlag FINAL;
  `h.a.c.a.c$c` `h.a.c.a.c$c$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`h.a.c.a.c$c$a` v1 @kind this, `h.a.c.a.c$c` v2 @kind object) @signature `Lh/a/c/a/c$c$a;.<init>:(Lh/a/c/a/c$c;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3b2b60.  v1.`h.a.c.a.c$c$a.b` @type ^`h.a.c.a.c$c` := v2 @kind object;
  #L3b2b64.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b2b6a.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L3b2b6e.  v0:= 0I;
  #L3b2b70.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L3b2b76.  v1.`h.a.c.a.c$c$a.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L3b2b7a.  return @kind void;
}
procedure `void` `<init>`(`h.a.c.a.c$c$a` v0 @kind this, `h.a.c.a.c$c` v1 @kind object, `h.a.c.a.c$a` v2 @kind object) @signature `Lh/a/c/a/c$c$a;.<init>:(Lh/a/c/a/c$c;Lh/a/c/a/c$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L3b2b8c.  call `<init>`(v0, v1) @signature `Lh/a/c/a/c$c$a;.<init>:(Lh/a/c/a/c$c;)V` @kind direct;
  #L3b2b92.  return @kind void;
}
procedure `void` `a`(`h.a.c.a.c$c$a` v3 @kind this) @signature `Lh/a/c/a/c$c$a;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b2ba4.  v0:= v3.`h.a.c.a.c$c$a.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3b2ba8.  v1:= 1I;
  #L3b2baa.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.getAndSet:(Z)Z` @kind virtual;
  #L3b2bb0.  v0:= temp;
  #L3b2bb2.  if v0 != 0 then goto L3b2bf8;
  #L3b2bb6.  v0:= v3.`h.a.c.a.c$c$a.b` @type ^`h.a.c.a.c$c` @kind object;
  #L3b2bba.  call temp:= `a`(v0) @signature `Lh/a/c/a/c$c;.a:(Lh/a/c/a/c$c;)Ljava/util/concurrent/atomic/AtomicReference;` @kind static;
  #L3b2bc0.  v0:= temp @kind object;
  #L3b2bc2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3b2bc8.  v0:= temp @kind object;
  #L3b2bca.  if v0 == v3 then goto L3b2bd0;
  #L3b2bce.  goto L3b2bf8;
  #L3b2bd0.  v0:= v3.`h.a.c.a.c$c$a.b` @type ^`h.a.c.a.c$c` @kind object;
  #L3b2bd4.  v0:= v0.`h.a.c.a.c$c.c` @type ^`h.a.c.a.c` @kind object;
  #L3b2bd8.  call temp:= `c`(v0) @signature `Lh/a/c/a/c;.c:(Lh/a/c/a/c;)Lh/a/c/a/b;` @kind static;
  #L3b2bde.  v0:= temp @kind object;
  #L3b2be0.  v1:= v3.`h.a.c.a.c$c$a.b` @type ^`h.a.c.a.c$c` @kind object;
  #L3b2be4.  v1:= v1.`h.a.c.a.c$c.c` @type ^`h.a.c.a.c` @kind object;
  #L3b2be8.  call temp:= `b`(v1) @signature `Lh/a/c/a/c;.b:(Lh/a/c/a/c;)Ljava/lang/String;` @kind static;
  #L3b2bee.  v1:= temp @kind object;
  #L3b2bf0.  v2:= 0I;
  #L3b2bf2.  call `a`(v0, v1, v2) @signature `Lh/a/c/a/b;.a:(Ljava/lang/String;Ljava/nio/ByteBuffer;)V` @kind interface;
  #L3b2bf8.  return @kind void;
}
procedure `void` `a`(`h.a.c.a.c$c$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lh/a/c/a/c$c$a;.a:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b2c88.  v0:= v3.`h.a.c.a.c$c$a.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3b2c8c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L3b2c92.  v0:= temp;
  #L3b2c94.  if v0 != 0 then goto L3b2cf0;
  #L3b2c98.  v0:= v3.`h.a.c.a.c$c$a.b` @type ^`h.a.c.a.c$c` @kind object;
  #L3b2c9c.  call temp:= `a`(v0) @signature `Lh/a/c/a/c$c;.a:(Lh/a/c/a/c$c;)Ljava/util/concurrent/atomic/AtomicReference;` @kind static;
  #L3b2ca2.  v0:= temp @kind object;
  #L3b2ca4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3b2caa.  v0:= temp @kind object;
  #L3b2cac.  if v0 == v3 then goto L3b2cb2;
  #L3b2cb0.  goto L3b2cf0;
  #L3b2cb2.  v0:= v3.`h.a.c.a.c$c$a.b` @type ^`h.a.c.a.c$c` @kind object;
  #L3b2cb6.  v0:= v0.`h.a.c.a.c$c.c` @type ^`h.a.c.a.c` @kind object;
  #L3b2cba.  call temp:= `c`(v0) @signature `Lh/a/c/a/c;.c:(Lh/a/c/a/c;)Lh/a/c/a/b;` @kind static;
  #L3b2cc0.  v0:= temp @kind object;
  #L3b2cc2.  v1:= v3.`h.a.c.a.c$c$a.b` @type ^`h.a.c.a.c$c` @kind object;
  #L3b2cc6.  v1:= v1.`h.a.c.a.c$c.c` @type ^`h.a.c.a.c` @kind object;
  #L3b2cca.  call temp:= `b`(v1) @signature `Lh/a/c/a/c;.b:(Lh/a/c/a/c;)Ljava/lang/String;` @kind static;
  #L3b2cd0.  v1:= temp @kind object;
  #L3b2cd2.  v2:= v3.`h.a.c.a.c$c$a.b` @type ^`h.a.c.a.c$c` @kind object;
  #L3b2cd6.  v2:= v2.`h.a.c.a.c$c.c` @type ^`h.a.c.a.c` @kind object;
  #L3b2cda.  call temp:= `a`(v2) @signature `Lh/a/c/a/c;.a:(Lh/a/c/a/c;)Lh/a/c/a/k;` @kind static;
  #L3b2ce0.  v2:= temp @kind object;
  #L3b2ce2.  call temp:= `a`(v2, v4) @signature `Lh/a/c/a/k;.a:(Ljava/lang/Object;)Ljava/nio/ByteBuffer;` @kind interface;
  #L3b2ce8.  v4:= temp @kind object;
  #L3b2cea.  call `a`(v0, v1, v4) @signature `Lh/a/c/a/b;.a:(Ljava/lang/String;Ljava/nio/ByteBuffer;)V` @kind interface;
  #L3b2cf0.  return @kind void;
}
procedure `void` `a`(`h.a.c.a.c$c$a` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lh/a/c/a/c$c$a;.a:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b2c0c.  v0:= v3.`h.a.c.a.c$c$a.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3b2c10.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L3b2c16.  v0:= temp;
  #L3b2c18.  if v0 != 0 then goto L3b2c74;
  #L3b2c1c.  v0:= v3.`h.a.c.a.c$c$a.b` @type ^`h.a.c.a.c$c` @kind object;
  #L3b2c20.  call temp:= `a`(v0) @signature `Lh/a/c/a/c$c;.a:(Lh/a/c/a/c$c;)Ljava/util/concurrent/atomic/AtomicReference;` @kind static;
  #L3b2c26.  v0:= temp @kind object;
  #L3b2c28.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3b2c2e.  v0:= temp @kind object;
  #L3b2c30.  if v0 == v3 then goto L3b2c36;
  #L3b2c34.  goto L3b2c74;
  #L3b2c36.  v0:= v3.`h.a.c.a.c$c$a.b` @type ^`h.a.c.a.c$c` @kind object;
  #L3b2c3a.  v0:= v0.`h.a.c.a.c$c.c` @type ^`h.a.c.a.c` @kind object;
  #L3b2c3e.  call temp:= `c`(v0) @signature `Lh/a/c/a/c;.c:(Lh/a/c/a/c;)Lh/a/c/a/b;` @kind static;
  #L3b2c44.  v0:= temp @kind object;
  #L3b2c46.  v1:= v3.`h.a.c.a.c$c$a.b` @type ^`h.a.c.a.c$c` @kind object;
  #L3b2c4a.  v1:= v1.`h.a.c.a.c$c.c` @type ^`h.a.c.a.c` @kind object;
  #L3b2c4e.  call temp:= `b`(v1) @signature `Lh/a/c/a/c;.b:(Lh/a/c/a/c;)Ljava/lang/String;` @kind static;
  #L3b2c54.  v1:= temp @kind object;
  #L3b2c56.  v2:= v3.`h.a.c.a.c$c$a.b` @type ^`h.a.c.a.c$c` @kind object;
  #L3b2c5a.  v2:= v2.`h.a.c.a.c$c.c` @type ^`h.a.c.a.c` @kind object;
  #L3b2c5e.  call temp:= `a`(v2) @signature `Lh/a/c/a/c;.a:(Lh/a/c/a/c;)Lh/a/c/a/k;` @kind static;
  #L3b2c64.  v2:= temp @kind object;
  #L3b2c66.  call temp:= `a`(v2, v4, v5, v6) @signature `Lh/a/c/a/k;.a:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Ljava/nio/ByteBuffer;` @kind interface;
  #L3b2c6c.  v4:= temp @kind object;
  #L3b2c6e.  call `a`(v0, v1, v4) @signature `Lh/a/c/a/b;.a:(Ljava/lang/String;Ljava/nio/ByteBuffer;)V` @kind interface;
  #L3b2c74.  return @kind void;
}
