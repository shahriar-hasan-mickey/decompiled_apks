record `c.o.q$b` @kind class @AccessFlag  extends `c.o.n` @kind class {
  `c.o.q` `c.o.q$b.a` @AccessFlag ;
}
procedure `void` `<init>`(`c.o.q$b` v0 @kind this, `c.o.q` v1 @kind object) @signature `Lc/o/q$b;.<init>:(Lc/o/q;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1b4888.  call `<init>`(v0) @signature `Lc/o/n;.<init>:()V` @kind direct;
  #L1b488e.  v0.`c.o.q$b.a` @type ^`c.o.q` := v1 @kind object;
  #L1b4892.  return @kind void;
}
procedure `void` `a`(`c.o.q$b` v1 @kind this, `c.o.m` v2 @kind object) @signature `Lc/o/q$b;.a:(Lc/o/m;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b48e0.  v2:= v1.`c.o.q$b.a` @type ^`c.o.q` @kind object;
  #L1b48e4.  v0:= v2.`c.o.q.N` @type ^`boolean` @kind boolean;
  #L1b48e8.  if v0 != 0 then goto L1b48fc;
  #L1b48ec.  call `x`(v2) @signature `Lc/o/m;.x:()V` @kind virtual;
  #L1b48f2.  v2:= v1.`c.o.q$b.a` @type ^`c.o.q` @kind object;
  #L1b48f6.  v0:= 1I;
  #L1b48f8.  v2.`c.o.q.N` @type ^`boolean` := v0 @kind boolean;
  #L1b48fc.  return @kind void;
}
procedure `void` `e`(`c.o.q$b` v2 @kind this, `c.o.m` v3 @kind object) @signature `Lc/o/q$b;.e:(Lc/o/m;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b48a4.  v0:= v2.`c.o.q$b.a` @type ^`c.o.q` @kind object;
  #L1b48a8.  v1:= v0.`c.o.q.M` @type ^`int`;
  #L1b48ac.  v1:= v1 + -1;
  #L1b48b0.  v0.`c.o.q.M` @type ^`int` := v1;
  #L1b48b4.  v1:= v0.`c.o.q.M` @type ^`int`;
  #L1b48b8.  if v1 != 0 then goto L1b48c8;
  #L1b48bc.  v1:= 0I;
  #L1b48be.  v0.`c.o.q.N` @type ^`boolean` := v1 @kind boolean;
  #L1b48c2.  call `d`(v0) @signature `Lc/o/m;.d:()V` @kind virtual;
  #L1b48c8.  call temp:= `b`(v3, v2) @signature `Lc/o/m;.b:(Lc/o/m$f;)Lc/o/m;` @kind virtual;
  #L1b48ce.  return @kind void;
}
