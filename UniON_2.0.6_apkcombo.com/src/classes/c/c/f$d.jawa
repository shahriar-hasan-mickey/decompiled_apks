record `c.c.f$d` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface, `java.util.Map$Entry` @kind interface {
  `int` `c.c.f$d.b` @AccessFlag ;
  `int` `c.c.f$d.c` @AccessFlag ;
  `boolean` `c.c.f$d.d` @AccessFlag ;
  `c.c.f` `c.c.f$d.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.c.f$d` v1 @kind this, `c.c.f` v2 @kind object) @signature `Lc/c/f$d;.<init>:(Lc/c/f;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L15e0f0.  v1.`c.c.f$d.e` @type ^`c.c.f` := v2 @kind object;
  #L15e0f4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15e0fa.  v0:= 0I;
  #L15e0fc.  v1.`c.c.f$d.d` @type ^`boolean` := v0 @kind boolean;
  #L15e100.  call temp:= `c`(v2) @signature `Lc/c/f;.c:()I` @kind virtual;
  #L15e106.  v2:= temp;
  #L15e108.  v2:= v2 + -1;
  #L15e10c.  v1.`c.c.f$d.b` @type ^`int` := v2;
  #L15e110.  v2:= -1I;
  #L15e112.  v1.`c.c.f$d.c` @type ^`int` := v2;
  #L15e116.  return @kind void;
}
procedure `boolean` `equals`(`c.c.f$d` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lc/c/f$d;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15de80.  v0:= v4.`c.c.f$d.d` @type ^`boolean` @kind boolean;
  #L15de84.  if v0 == 0 then goto L15dee6;
  #L15de88.  v0:= instanceof @variable v5 @type ^`java.util.Map$Entry` @kind boolean;
  #L15de8c.  v1:= 0I;
  #L15de8e.  if v0 != 0 then goto L15de94;
  #L15de92.  return v1;
  #L15de94.  v5:= (`java.util.Map$Entry`) v5 @kind object;
  #L15de98.  call temp:= `getKey`(v5) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L15de9e.  v0:= temp @kind object;
  #L15dea0.  v2:= v4.`c.c.f$d.e` @type ^`c.c.f` @kind object;
  #L15dea4.  v3:= v4.`c.c.f$d.c` @type ^`int`;
  #L15dea8.  call temp:= `a`(v2, v3, v1) @signature `Lc/c/f;.a:(II)Ljava/lang/Object;` @kind virtual;
  #L15deae.  v2:= temp @kind object;
  #L15deb0.  call temp:= `a`(v0, v2) @signature `Lc/c/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L15deb6.  v0:= temp;
  #L15deb8.  v2:= 1I;
  #L15deba.  if v0 == 0 then goto L15dee4;
  #L15debe.  call temp:= `getValue`(v5) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L15dec4.  v5:= temp @kind object;
  #L15dec6.  v0:= v4.`c.c.f$d.e` @type ^`c.c.f` @kind object;
  #L15deca.  v3:= v4.`c.c.f$d.c` @type ^`int`;
  #L15dece.  call temp:= `a`(v0, v3, v2) @signature `Lc/c/f;.a:(II)Ljava/lang/Object;` @kind virtual;
  #L15ded4.  v0:= temp @kind object;
  #L15ded6.  call temp:= `a`(v5, v0) @signature `Lc/c/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L15dedc.  v5:= temp;
  #L15dede.  if v5 == 0 then goto L15dee4;
  #L15dee2.  v1:= 1I;
  #L15dee4.  return v1;
  #L15dee6.  v5:= new `java.lang.IllegalStateException`;
  #L15deea.  v0:= "This container does not support retaining Map.Entry objects" @kind object;
  #L15deee.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15def4.  throw v5;
}
procedure `java.lang.Object` `getKey`(`c.c.f$d` v3 @kind this) @signature `Lc/c/f$d;.getKey:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15df9c.  v0:= v3.`c.c.f$d.d` @type ^`boolean` @kind boolean;
  #L15dfa0.  if v0 == 0 then goto L15dfb8;
  #L15dfa4.  v0:= v3.`c.c.f$d.e` @type ^`c.c.f` @kind object;
  #L15dfa8.  v1:= v3.`c.c.f$d.c` @type ^`int`;
  #L15dfac.  v2:= 0I;
  #L15dfae.  call temp:= `a`(v0, v1, v2) @signature `Lc/c/f;.a:(II)Ljava/lang/Object;` @kind virtual;
  #L15dfb4.  v0:= temp @kind object;
  #L15dfb6.  return v0 @kind object;
  #L15dfb8.  v0:= new `java.lang.IllegalStateException`;
  #L15dfbc.  v1:= "This container does not support retaining Map.Entry objects" @kind object;
  #L15dfc0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15dfc6.  throw v0;
}
procedure `java.lang.Object` `getValue`(`c.c.f$d` v3 @kind this) @signature `Lc/c/f$d;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15dfd8.  v0:= v3.`c.c.f$d.d` @type ^`boolean` @kind boolean;
  #L15dfdc.  if v0 == 0 then goto L15dff4;
  #L15dfe0.  v0:= v3.`c.c.f$d.e` @type ^`c.c.f` @kind object;
  #L15dfe4.  v1:= v3.`c.c.f$d.c` @type ^`int`;
  #L15dfe8.  v2:= 1I;
  #L15dfea.  call temp:= `a`(v0, v1, v2) @signature `Lc/c/f;.a:(II)Ljava/lang/Object;` @kind virtual;
  #L15dff0.  v0:= temp @kind object;
  #L15dff2.  return v0 @kind object;
  #L15dff4.  v0:= new `java.lang.IllegalStateException`;
  #L15dff8.  v1:= "This container does not support retaining Map.Entry objects" @kind object;
  #L15dffc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e002.  throw v0;
}
procedure `boolean` `hasNext`(`c.c.f$d` v2 @kind this) @signature `Lc/c/f$d;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15df08.  v0:= v2.`c.c.f$d.c` @type ^`int`;
  #L15df0c.  v1:= v2.`c.c.f$d.b` @type ^`int`;
  #L15df10.  if v0 >= v1 then goto L15df18;
  #L15df14.  v0:= 1I;
  #L15df16.  goto L15df1a;
  #L15df18.  v0:= 0I;
  #L15df1a.  return v0;
}
procedure `int` `hashCode`(`c.c.f$d` v5 @kind this) @signature `Lc/c/f$d;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15df2c.  v0:= v5.`c.c.f$d.d` @type ^`boolean` @kind boolean;
  #L15df30.  if v0 == 0 then goto L15df7a;
  #L15df34.  v0:= v5.`c.c.f$d.e` @type ^`c.c.f` @kind object;
  #L15df38.  v1:= v5.`c.c.f$d.c` @type ^`int`;
  #L15df3c.  v2:= 0I;
  #L15df3e.  call temp:= `a`(v0, v1, v2) @signature `Lc/c/f;.a:(II)Ljava/lang/Object;` @kind virtual;
  #L15df44.  v0:= temp @kind object;
  #L15df46.  v1:= v5.`c.c.f$d.e` @type ^`c.c.f` @kind object;
  #L15df4a.  v3:= v5.`c.c.f$d.c` @type ^`int`;
  #L15df4e.  v4:= 1I;
  #L15df50.  call temp:= `a`(v1, v3, v4) @signature `Lc/c/f;.a:(II)Ljava/lang/Object;` @kind virtual;
  #L15df56.  v1:= temp @kind object;
  #L15df58.  if v0 != 0 then goto L15df60;
  #L15df5c.  v0:= 0I;
  #L15df5e.  goto L15df68;
  #L15df60.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L15df66.  v0:= temp;
  #L15df68.  if v1 != 0 then goto L15df6e;
  #L15df6c.  goto L15df76;
  #L15df6e.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L15df74.  v2:= temp;
  #L15df76.  v0:= v0 ^~ v2 @kind int;
  #L15df78.  return v0;
  #L15df7a.  v0:= new `java.lang.IllegalStateException`;
  #L15df7e.  v1:= "This container does not support retaining Map.Entry objects" @kind object;
  #L15df82.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15df88.  throw v0;
}
procedure `java.lang.Object` `next`(`c.c.f$d` v0 @kind this) @signature `Lc/c/f$d;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L15e014.  call temp:= `next`(v0) @signature `Lc/c/f$d;.next:()Ljava/util/Map$Entry;` @kind virtual;
  #L15e01a.  return v0 @kind object;
}
procedure `java.util.Map$Entry` `next`(`c.c.f$d` v2 @kind this) @signature `Lc/c/f$d;.next:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15e0b4.  call temp:= `hasNext`(v2) @signature `Lc/c/f$d;.hasNext:()Z` @kind virtual;
  #L15e0ba.  v0:= temp;
  #L15e0bc.  if v0 == 0 then goto L15e0d2;
  #L15e0c0.  v0:= v2.`c.c.f$d.c` @type ^`int`;
  #L15e0c4.  v1:= 1I;
  #L15e0c6.  v0:= v0 + v1 @kind int;
  #L15e0c8.  v2.`c.c.f$d.c` @type ^`int` := v0;
  #L15e0cc.  v2.`c.c.f$d.d` @type ^`boolean` := v1 @kind boolean;
  #L15e0d0.  return v2 @kind object;
  #L15e0d2.  v0:= new `java.util.NoSuchElementException`;
  #L15e0d6.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L15e0dc.  throw v0;
}
procedure `void` `remove`(`c.c.f$d` v2 @kind this) @signature `Lc/c/f$d;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15e128.  v0:= v2.`c.c.f$d.d` @type ^`boolean` @kind boolean;
  #L15e12c.  if v0 == 0 then goto L15e15e;
  #L15e130.  v0:= v2.`c.c.f$d.e` @type ^`c.c.f` @kind object;
  #L15e134.  v1:= v2.`c.c.f$d.c` @type ^`int`;
  #L15e138.  call `a`(v0, v1) @signature `Lc/c/f;.a:(I)V` @kind virtual;
  #L15e13e.  v0:= v2.`c.c.f$d.c` @type ^`int`;
  #L15e142.  v0:= v0 + -1;
  #L15e146.  v2.`c.c.f$d.c` @type ^`int` := v0;
  #L15e14a.  v0:= v2.`c.c.f$d.b` @type ^`int`;
  #L15e14e.  v0:= v0 + -1;
  #L15e152.  v2.`c.c.f$d.b` @type ^`int` := v0;
  #L15e156.  v0:= 0I;
  #L15e158.  v2.`c.c.f$d.d` @type ^`boolean` := v0 @kind boolean;
  #L15e15c.  return @kind void;
  #L15e15e.  v0:= new `java.lang.IllegalStateException`;
  #L15e162.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L15e168.  throw v0;
}
procedure `java.lang.Object` `setValue`(`c.c.f$d` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lc/c/f$d;.setValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15e02c.  v0:= v2.`c.c.f$d.d` @type ^`boolean` @kind boolean;
  #L15e030.  if v0 == 0 then goto L15e046;
  #L15e034.  v0:= v2.`c.c.f$d.e` @type ^`c.c.f` @kind object;
  #L15e038.  v1:= v2.`c.c.f$d.c` @type ^`int`;
  #L15e03c.  call temp:= `a`(v0, v1, v3) @signature `Lc/c/f;.a:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15e042.  v3:= temp @kind object;
  #L15e044.  return v3 @kind object;
  #L15e046.  v3:= new `java.lang.IllegalStateException`;
  #L15e04a.  v0:= "This container does not support retaining Map.Entry objects" @kind object;
  #L15e04e.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e054.  throw v3;
}
procedure `java.lang.String` `toString`(`c.c.f$d` v2 @kind this) @signature `Lc/c/f$d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15e068.  v0:= new `java.lang.StringBuilder`;
  #L15e06c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e072.  call temp:= `getKey`(v2) @signature `Lc/c/f$d;.getKey:()Ljava/lang/Object;` @kind virtual;
  #L15e078.  v1:= temp @kind object;
  #L15e07a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e080.  v1:= "=" @kind object;
  #L15e084.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e08a.  call temp:= `getValue`(v2) @signature `Lc/c/f$d;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L15e090.  v1:= temp @kind object;
  #L15e092.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e098.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e09e.  v0:= temp @kind object;
  #L15e0a0.  return v0 @kind object;
}
