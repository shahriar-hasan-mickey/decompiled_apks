record `c.c.f$c` @kind class @AccessFlag FINAL extends `java.util.Set` @kind interface {
  `c.c.f` `c.c.f$c.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.c.f$c` v0 @kind this, `c.c.f` v1 @kind object) @signature `Lc/c/f$c;.<init>:(Lc/c/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L15de48.  v0.`c.c.f$c.b` @type ^`c.c.f` := v1 @kind object;
  #L15de4c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15de52.  return @kind void;
}
procedure `boolean` `add`(`c.c.f$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/c/f$c;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L15dc24.  v1:= new `java.lang.UnsupportedOperationException`;
  #L15dc28.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L15dc2e.  throw v1;
}
procedure `boolean` `addAll`(`c.c.f$c` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lc/c/f$c;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L15dc40.  v1:= new `java.lang.UnsupportedOperationException`;
  #L15dc44.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L15dc4a.  throw v1;
}
procedure `void` `clear`(`c.c.f$c` v1 @kind this) @signature `Lc/c/f$c;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15de64.  v0:= v1.`c.c.f$c.b` @type ^`c.c.f` @kind object;
  #L15de68.  call `a`(v0) @signature `Lc/c/f;.a:()V` @kind virtual;
  #L15de6e.  return @kind void;
}
procedure `boolean` `contains`(`c.c.f$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/c/f$c;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15dc5c.  v0:= v1.`c.c.f$c.b` @type ^`c.c.f` @kind object;
  #L15dc60.  call temp:= `a`(v0, v2) @signature `Lc/c/f;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L15dc66.  v2:= temp;
  #L15dc68.  if v2 < 0 then goto L15dc70;
  #L15dc6c.  v2:= 1I;
  #L15dc6e.  goto L15dc72;
  #L15dc70.  v2:= 0I;
  #L15dc72.  return v2;
}
procedure `boolean` `containsAll`(`c.c.f$c` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lc/c/f$c;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15dc84.  v0:= v1.`c.c.f$c.b` @type ^`c.c.f` @kind object;
  #L15dc88.  call temp:= `b`(v0) @signature `Lc/c/f;.b:()Ljava/util/Map;` @kind virtual;
  #L15dc8e.  v0:= temp @kind object;
  #L15dc90.  call temp:= `a`(v0, v2) @signature `Lc/c/f;.a:(Ljava/util/Map;Ljava/util/Collection;)Z` @kind static;
  #L15dc96.  v2:= temp;
  #L15dc98.  return v2;
}
procedure `boolean` `equals`(`c.c.f$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/c/f$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L15dcac.  call temp:= `a`(v0, v1) @signature `Lc/c/f;.a:(Ljava/util/Set;Ljava/lang/Object;)Z` @kind static;
  #L15dcb2.  v1:= temp;
  #L15dcb4.  return v1;
}
procedure `int` `hashCode`(`c.c.f$c` v4 @kind this) @signature `Lc/c/f$c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15dd74.  v0:= v4.`c.c.f$c.b` @type ^`c.c.f` @kind object;
  #L15dd78.  call temp:= `c`(v0) @signature `Lc/c/f;.c:()I` @kind virtual;
  #L15dd7e.  v0:= temp;
  #L15dd80.  v0:= v0 + -1;
  #L15dd84.  v1:= 0I;
  #L15dd86.  v2:= 0I;
  #L15dd88.  if v0 < 0 then goto L15ddb0;
  #L15dd8c.  v3:= v4.`c.c.f$c.b` @type ^`c.c.f` @kind object;
  #L15dd90.  call temp:= `a`(v3, v0, v1) @signature `Lc/c/f;.a:(II)Ljava/lang/Object;` @kind virtual;
  #L15dd96.  v3:= temp @kind object;
  #L15dd98.  if v3 != 0 then goto L15dda0;
  #L15dd9c.  v3:= 0I;
  #L15dd9e.  goto L15dda8;
  #L15dda0.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L15dda6.  v3:= temp;
  #L15dda8.  v2:= v2 + v3 @kind int;
  #L15ddaa.  v0:= v0 + -1;
  #L15ddae.  goto L15dd88;
  #L15ddb0.  return v2;
}
procedure `boolean` `isEmpty`(`c.c.f$c` v1 @kind this) @signature `Lc/c/f$c;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15dcc8.  v0:= v1.`c.c.f$c.b` @type ^`c.c.f` @kind object;
  #L15dccc.  call temp:= `c`(v0) @signature `Lc/c/f;.c:()I` @kind virtual;
  #L15dcd2.  v0:= temp;
  #L15dcd4.  if v0 != 0 then goto L15dcdc;
  #L15dcd8.  v0:= 1I;
  #L15dcda.  goto L15dcde;
  #L15dcdc.  v0:= 0I;
  #L15dcde.  return v0;
}
procedure `java.util.Iterator` `iterator`(`c.c.f$c` v3 @kind this) @signature `Lc/c/f$c;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15de24.  v0:= new `c.c.f$a`;
  #L15de28.  v1:= v3.`c.c.f$c.b` @type ^`c.c.f` @kind object;
  #L15de2c.  v2:= 0I;
  #L15de2e.  call `<init>`(v0, v1, v2) @signature `Lc/c/f$a;.<init>:(Lc/c/f;I)V` @kind direct;
  #L15de34.  return v0 @kind object;
}
procedure `boolean` `remove`(`c.c.f$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/c/f$c;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15dcf0.  v0:= v1.`c.c.f$c.b` @type ^`c.c.f` @kind object;
  #L15dcf4.  call temp:= `a`(v0, v2) @signature `Lc/c/f;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L15dcfa.  v2:= temp;
  #L15dcfc.  if v2 < 0 then goto L15dd0e;
  #L15dd00.  v0:= v1.`c.c.f$c.b` @type ^`c.c.f` @kind object;
  #L15dd04.  call `a`(v0, v2) @signature `Lc/c/f;.a:(I)V` @kind virtual;
  #L15dd0a.  v2:= 1I;
  #L15dd0c.  return v2;
  #L15dd0e.  v2:= 0I;
  #L15dd10.  return v2;
}
procedure `boolean` `removeAll`(`c.c.f$c` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lc/c/f$c;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15dd24.  v0:= v1.`c.c.f$c.b` @type ^`c.c.f` @kind object;
  #L15dd28.  call temp:= `b`(v0) @signature `Lc/c/f;.b:()Ljava/util/Map;` @kind virtual;
  #L15dd2e.  v0:= temp @kind object;
  #L15dd30.  call temp:= `b`(v0, v2) @signature `Lc/c/f;.b:(Ljava/util/Map;Ljava/util/Collection;)Z` @kind static;
  #L15dd36.  v2:= temp;
  #L15dd38.  return v2;
}
procedure `boolean` `retainAll`(`c.c.f$c` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lc/c/f$c;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15dd4c.  v0:= v1.`c.c.f$c.b` @type ^`c.c.f` @kind object;
  #L15dd50.  call temp:= `b`(v0) @signature `Lc/c/f;.b:()Ljava/util/Map;` @kind virtual;
  #L15dd56.  v0:= temp @kind object;
  #L15dd58.  call temp:= `c`(v0, v2) @signature `Lc/c/f;.c:(Ljava/util/Map;Ljava/util/Collection;)Z` @kind static;
  #L15dd5e.  v2:= temp;
  #L15dd60.  return v2;
}
procedure `int` `size`(`c.c.f$c` v1 @kind this) @signature `Lc/c/f$c;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ddc4.  v0:= v1.`c.c.f$c.b` @type ^`c.c.f` @kind object;
  #L15ddc8.  call temp:= `c`(v0) @signature `Lc/c/f;.c:()I` @kind virtual;
  #L15ddce.  v0:= temp;
  #L15ddd0.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`c.c.f$c` v2 @kind this) @signature `Lc/c/f$c;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15dde4.  v0:= v2.`c.c.f$c.b` @type ^`c.c.f` @kind object;
  #L15dde8.  v1:= 0I;
  #L15ddea.  call temp:= `b`(v0, v1) @signature `Lc/c/f;.b:(I)[Ljava/lang/Object;` @kind virtual;
  #L15ddf0.  v0:= temp @kind object;
  #L15ddf2.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`c.c.f$c` v2 @kind this, `java.lang.Object`[] v3 @kind object) @signature `Lc/c/f$c;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15de04.  v0:= v2.`c.c.f$c.b` @type ^`c.c.f` @kind object;
  #L15de08.  v1:= 0I;
  #L15de0a.  call temp:= `a`(v0, v3, v1) @signature `Lc/c/f;.a:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind virtual;
  #L15de10.  v3:= temp @kind object;
  #L15de12.  return v3 @kind object;
}
