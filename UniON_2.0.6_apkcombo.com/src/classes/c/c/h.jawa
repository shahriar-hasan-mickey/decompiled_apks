record `c.c.h` @kind class @AccessFlag PUBLIC extends `java.lang.Cloneable` @kind interface {
  `boolean` `c.c.h.b` @AccessFlag PRIVATE;
  `int`[] `c.c.h.c` @AccessFlag PRIVATE;
  `java.lang.Object`[] `c.c.h.d` @AccessFlag PRIVATE;
  `int` `c.c.h.e` @AccessFlag PRIVATE;
}
global `java.lang.Object` `@@c.c.h.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lc/c/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15f4d0.  v0:= new `java.lang.Object`;
  #L15f4d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15f4da.  `@@c.c.h.f` @type ^`java.lang.Object` := v0 @kind object;
  #L15f4de.  return @kind void;
}
procedure `void` `<init>`(`c.c.h` v1 @kind this) @signature `Lc/c/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15f4f0.  v0:= 10I;
  #L15f4f4.  call `<init>`(v1, v0) @signature `Lc/c/h;.<init>:(I)V` @kind direct;
  #L15f4fa.  return @kind void;
}
procedure `void` `<init>`(`c.c.h` v1 @kind this, `int` v2 ) @signature `Lc/c/h;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15f50c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15f512.  v0:= 0I;
  #L15f514.  v1.`c.c.h.b` @type ^`boolean` := v0 @kind boolean;
  #L15f518.  if v2 != 0 then goto L15f52e;
  #L15f51c.  v2:= `@@c.c.c.a` @type ^`int`[] @kind object;
  #L15f520.  v1.`c.c.h.c` @type ^`int`[] := v2 @kind object;
  #L15f524.  v2:= `@@c.c.c.c` @type ^`java.lang.Object`[] @kind object;
  #L15f528.  v1.`c.c.h.d` @type ^`java.lang.Object`[] := v2 @kind object;
  #L15f52c.  goto L15f546;
  #L15f52e.  call temp:= `b`(v2) @signature `Lc/c/c;.b:(I)I` @kind static;
  #L15f534.  v2:= temp;
  #L15f536.  v0:= new `int`[v2];
  #L15f53a.  v1.`c.c.h.c` @type ^`int`[] := v0 @kind object;
  #L15f53e.  v2:= new `java.lang.Object`[v2];
  #L15f542.  v1.`c.c.h.d` @type ^`java.lang.Object`[] := v2 @kind object;
  #L15f546.  return @kind void;
}
procedure `void` `e`(`c.c.h` v8 @kind this) @signature `Lc/c/h;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L15f63c.  v0:= v8.`c.c.h.e` @type ^`int`;
  #L15f640.  v1:= v8.`c.c.h.c` @type ^`int`[] @kind object;
  #L15f644.  v2:= v8.`c.c.h.d` @type ^`java.lang.Object`[] @kind object;
  #L15f648.  v3:= 0I;
  #L15f64a.  v4:= 0I;
  #L15f64c.  v5:= 0I;
  #L15f64e.  if v4 >= v0 then goto L15f67e;
  #L15f652.  v6:= v2[v4] @kind object;
  #L15f656.  v7:= `@@c.c.h.f` @type ^`java.lang.Object` @kind object;
  #L15f65a.  if v6 == v7 then goto L15f678;
  #L15f65e.  if v4 == v5 then goto L15f674;
  #L15f662.  v7:= v1[v4];
  #L15f666.  v1[v5]:= v7;
  #L15f66a.  v2[v5]:= v6 @kind object;
  #L15f66e.  v6:= 0I;
  #L15f670.  v2[v4]:= v6 @kind object;
  #L15f674.  v5:= v5 + 1;
  #L15f678.  v4:= v4 + 1;
  #L15f67c.  goto L15f64e;
  #L15f67e.  v8.`c.c.h.b` @type ^`boolean` := v3 @kind boolean;
  #L15f682.  v8.`c.c.h.e` @type ^`int` := v5;
  #L15f686.  return @kind void;
}
procedure `java.lang.Object` `a`(`c.c.h` v1 @kind this, `int` v2 ) @signature `Lc/c/h;.a:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15f3a4.  v0:= 0I;
  #L15f3a6.  call temp:= `b`(v1, v2, v0) @signature `Lc/c/h;.b:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15f3ac.  v2:= temp @kind object;
  #L15f3ae.  return v2 @kind object;
}
procedure `void` `a`(`c.c.h` v6 @kind this, `int` v7 , `java.lang.Object` v8 @kind object) @signature `Lc/c/h;.a:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15f558.  v0:= v6.`c.c.h.e` @type ^`int`;
  #L15f55c.  if v0 == 0 then goto L15f578;
  #L15f560.  v1:= v6.`c.c.h.c` @type ^`int`[] @kind object;
  #L15f564.  v0:= v0 + -1;
  #L15f568.  v0:= v1[v0];
  #L15f56c.  if v7 > v0 then goto L15f578;
  #L15f570.  call `c`(v6, v7, v8) @signature `Lc/c/h;.c:(ILjava/lang/Object;)V` @kind virtual;
  #L15f576.  return @kind void;
  #L15f578.  v0:= v6.`c.c.h.b` @type ^`boolean` @kind boolean;
  #L15f57c.  if v0 == 0 then goto L15f594;
  #L15f580.  v0:= v6.`c.c.h.e` @type ^`int`;
  #L15f584.  v1:= v6.`c.c.h.c` @type ^`int`[] @kind object;
  #L15f588.  v1:= length @variable v1;
  #L15f58a.  if v0 < v1 then goto L15f594;
  #L15f58e.  call `e`(v6) @signature `Lc/c/h;.e:()V` @kind direct;
  #L15f594.  v0:= v6.`c.c.h.e` @type ^`int`;
  #L15f598.  v1:= v6.`c.c.h.c` @type ^`int`[] @kind object;
  #L15f59c.  v1:= length @variable v1;
  #L15f59e.  if v0 < v1 then goto L15f5d8;
  #L15f5a2.  v1:= v0 + 1;
  #L15f5a6.  call temp:= `b`(v1) @signature `Lc/c/c;.b:(I)I` @kind static;
  #L15f5ac.  v1:= temp;
  #L15f5ae.  v2:= new `int`[v1];
  #L15f5b2.  v1:= new `java.lang.Object`[v1];
  #L15f5b6.  v3:= v6.`c.c.h.c` @type ^`int`[] @kind object;
  #L15f5ba.  v4:= length @variable v3;
  #L15f5bc.  v5:= 0I;
  #L15f5be.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15f5c4.  v3:= v6.`c.c.h.d` @type ^`java.lang.Object`[] @kind object;
  #L15f5c8.  v4:= length @variable v3;
  #L15f5ca.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15f5d0.  v6.`c.c.h.c` @type ^`int`[] := v2 @kind object;
  #L15f5d4.  v6.`c.c.h.d` @type ^`java.lang.Object`[] := v1 @kind object;
  #L15f5d8.  v1:= v6.`c.c.h.c` @type ^`int`[] @kind object;
  #L15f5dc.  v1[v0]:= v7;
  #L15f5e0.  v7:= v6.`c.c.h.d` @type ^`java.lang.Object`[] @kind object;
  #L15f5e4.  v7[v0]:= v8 @kind object;
  #L15f5e8.  v0:= v0 + 1;
  #L15f5ec.  v6.`c.c.h.e` @type ^`int` := v0;
  #L15f5f0.  return @kind void;
}
procedure `int` `b`(`c.c.h` v1 @kind this, `int` v2 ) @signature `Lc/c/h;.b:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15f33c.  v0:= v1.`c.c.h.b` @type ^`boolean` @kind boolean;
  #L15f340.  if v0 == 0 then goto L15f34a;
  #L15f344.  call `e`(v1) @signature `Lc/c/h;.e:()V` @kind direct;
  #L15f34a.  v0:= v1.`c.c.h.c` @type ^`int`[] @kind object;
  #L15f34e.  v2:= v0[v2];
  #L15f352.  return v2;
}
procedure `java.lang.Object` `b`(`c.c.h` v3 @kind this, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lc/c/h;.b:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15f3c0.  v0:= v3.`c.c.h.c` @type ^`int`[] @kind object;
  #L15f3c4.  v1:= v3.`c.c.h.e` @type ^`int`;
  #L15f3c8.  call temp:= `a`(v0, v1, v4) @signature `Lc/c/c;.a:([III)I` @kind static;
  #L15f3ce.  v4:= temp;
  #L15f3d0.  if v4 < 0 then goto L15f3ec;
  #L15f3d4.  v0:= v3.`c.c.h.d` @type ^`java.lang.Object`[] @kind object;
  #L15f3d8.  v1:= v0[v4] @kind object;
  #L15f3dc.  v2:= `@@c.c.h.f` @type ^`java.lang.Object` @kind object;
  #L15f3e0.  if v1 != v2 then goto L15f3e6;
  #L15f3e4.  goto L15f3ec;
  #L15f3e6.  v4:= v0[v4] @kind object;
  #L15f3ea.  return v4 @kind object;
  #L15f3ec.  return v5 @kind object;
}
procedure `java.lang.Object` `c`(`c.c.h` v1 @kind this, `int` v2 ) @signature `Lc/c/h;.c:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15f400.  v0:= v1.`c.c.h.b` @type ^`boolean` @kind boolean;
  #L15f404.  if v0 == 0 then goto L15f40e;
  #L15f408.  call `e`(v1) @signature `Lc/c/h;.e:()V` @kind direct;
  #L15f40e.  v0:= v1.`c.c.h.d` @type ^`java.lang.Object`[] @kind object;
  #L15f412.  v2:= v0[v2] @kind object;
  #L15f416.  return v2 @kind object;
}
procedure `void` `c`(`c.c.h` v5 @kind this) @signature `Lc/c/h;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15f604.  v0:= v5.`c.c.h.e` @type ^`int`;
  #L15f608.  v1:= v5.`c.c.h.d` @type ^`java.lang.Object`[] @kind object;
  #L15f60c.  v2:= 0I;
  #L15f60e.  v3:= 0I;
  #L15f610.  if v3 >= v0 then goto L15f620;
  #L15f614.  v4:= 0I;
  #L15f616.  v1[v3]:= v4 @kind object;
  #L15f61a.  v3:= v3 + 1;
  #L15f61e.  goto L15f610;
  #L15f620.  v5.`c.c.h.e` @type ^`int` := v2;
  #L15f624.  v5.`c.c.h.b` @type ^`boolean` := v2 @kind boolean;
  #L15f628.  return @kind void;
}
procedure `void` `c`(`c.c.h` v6 @kind this, `int` v7 , `java.lang.Object` v8 @kind object) @signature `Lc/c/h;.c:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15f698.  v0:= v6.`c.c.h.c` @type ^`int`[] @kind object;
  #L15f69c.  v1:= v6.`c.c.h.e` @type ^`int`;
  #L15f6a0.  call temp:= `a`(v0, v1, v7) @signature `Lc/c/c;.a:([III)I` @kind static;
  #L15f6a6.  v0:= temp;
  #L15f6a8.  if v0 < 0 then goto L15f6b6;
  #L15f6ac.  v7:= v6.`c.c.h.d` @type ^`java.lang.Object`[] @kind object;
  #L15f6b0.  v7[v0]:= v8 @kind object;
  #L15f6b4.  goto L15f798;
  #L15f6b6.  v0:= ~v0 @kind int;
  #L15f6b8.  v1:= v6.`c.c.h.e` @type ^`int`;
  #L15f6bc.  if v0 >= v1 then goto L15f6de;
  #L15f6c0.  v1:= v6.`c.c.h.d` @type ^`java.lang.Object`[] @kind object;
  #L15f6c4.  v2:= v1[v0] @kind object;
  #L15f6c8.  v3:= `@@c.c.h.f` @type ^`java.lang.Object` @kind object;
  #L15f6cc.  if v2 != v3 then goto L15f6de;
  #L15f6d0.  v2:= v6.`c.c.h.c` @type ^`int`[] @kind object;
  #L15f6d4.  v2[v0]:= v7;
  #L15f6d8.  v1[v0]:= v8 @kind object;
  #L15f6dc.  return @kind void;
  #L15f6de.  v1:= v6.`c.c.h.b` @type ^`boolean` @kind boolean;
  #L15f6e2.  if v1 == 0 then goto L15f70c;
  #L15f6e6.  v1:= v6.`c.c.h.e` @type ^`int`;
  #L15f6ea.  v2:= v6.`c.c.h.c` @type ^`int`[] @kind object;
  #L15f6ee.  v2:= length @variable v2;
  #L15f6f0.  if v1 < v2 then goto L15f70c;
  #L15f6f4.  call `e`(v6) @signature `Lc/c/h;.e:()V` @kind direct;
  #L15f6fa.  v0:= v6.`c.c.h.c` @type ^`int`[] @kind object;
  #L15f6fe.  v1:= v6.`c.c.h.e` @type ^`int`;
  #L15f702.  call temp:= `a`(v0, v1, v7) @signature `Lc/c/c;.a:([III)I` @kind static;
  #L15f708.  v0:= temp;
  #L15f70a.  v0:= ~v0 @kind int;
  #L15f70c.  v1:= v6.`c.c.h.e` @type ^`int`;
  #L15f710.  v2:= v6.`c.c.h.c` @type ^`int`[] @kind object;
  #L15f714.  v2:= length @variable v2;
  #L15f716.  if v1 < v2 then goto L15f750;
  #L15f71a.  v1:= v1 + 1;
  #L15f71e.  call temp:= `b`(v1) @signature `Lc/c/c;.b:(I)I` @kind static;
  #L15f724.  v1:= temp;
  #L15f726.  v2:= new `int`[v1];
  #L15f72a.  v1:= new `java.lang.Object`[v1];
  #L15f72e.  v3:= v6.`c.c.h.c` @type ^`int`[] @kind object;
  #L15f732.  v4:= length @variable v3;
  #L15f734.  v5:= 0I;
  #L15f736.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15f73c.  v3:= v6.`c.c.h.d` @type ^`java.lang.Object`[] @kind object;
  #L15f740.  v4:= length @variable v3;
  #L15f742.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15f748.  v6.`c.c.h.c` @type ^`int`[] := v2 @kind object;
  #L15f74c.  v6.`c.c.h.d` @type ^`java.lang.Object`[] := v1 @kind object;
  #L15f750.  v1:= v6.`c.c.h.e` @type ^`int`;
  #L15f754.  v2:= v1 - v0 @kind int;
  #L15f758.  if v2 == 0 then goto L15f77c;
  #L15f75c.  v2:= v6.`c.c.h.c` @type ^`int`[] @kind object;
  #L15f760.  v3:= v0 + 1;
  #L15f764.  v1:= v1 - v0 @kind int;
  #L15f766.  call `arraycopy`(v2, v0, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15f76c.  v1:= v6.`c.c.h.d` @type ^`java.lang.Object`[] @kind object;
  #L15f770.  v2:= v6.`c.c.h.e` @type ^`int`;
  #L15f774.  v2:= v2 - v0 @kind int;
  #L15f776.  call `arraycopy`(v1, v0, v1, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15f77c.  v1:= v6.`c.c.h.c` @type ^`int`[] @kind object;
  #L15f780.  v1[v0]:= v7;
  #L15f784.  v7:= v6.`c.c.h.d` @type ^`java.lang.Object`[] @kind object;
  #L15f788.  v7[v0]:= v8 @kind object;
  #L15f78c.  v7:= v6.`c.c.h.e` @type ^`int`;
  #L15f790.  v7:= v7 + 1;
  #L15f794.  v6.`c.c.h.e` @type ^`int` := v7;
  #L15f798.  return @kind void;
}
procedure `c.c.h` `clone`(`c.c.h` v2 @kind this) @signature `Lc/c/h;.clone:()Lc/c/h;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15f2d8.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L15f2de.  v0:= temp @kind object;
  #L15f2e0.  v0:= (`c.c.h`) v0 @kind object;
  #L15f2e4.  v1:= v2.`c.c.h.c` @type ^`int`[] @kind object;
  #L15f2e8.  call temp:= `clone`(v1) @signature `[I.clone:()Ljava/lang/Object;` @kind virtual;
  #L15f2ee.  v1:= temp @kind object;
  #L15f2f0.  v1:= (`int`[]) v1 @kind object;
  #L15f2f4.  v0.`c.c.h.c` @type ^`int`[] := v1 @kind object;
  #L15f2f8.  v1:= v2.`c.c.h.d` @type ^`java.lang.Object`[] @kind object;
  #L15f2fc.  call temp:= `clone`(v1) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L15f302.  v1:= temp @kind object;
  #L15f304.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L15f308.  v0.`c.c.h.d` @type ^`java.lang.Object`[] := v1 @kind object;
  #L15f30c.  return v0 @kind object;
  #L15f30e.  v0:= Exception @type ^`java.lang.CloneNotSupportedException` @kind object;
  #L15f310.  v1:= new `java.lang.AssertionError`;
  #L15f314.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L15f31a.  throw v1;
  catch `java.lang.CloneNotSupportedException` @[L15f2d8..L15f30c] goto L15f30e;
}
procedure `java.lang.Object` `clone`(`c.c.h` v1 @kind this) @signature `Lc/c/h;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L15f388.  call temp:= `clone`(v1) @signature `Lc/c/h;.clone:()Lc/c/h;` @kind virtual;
  #L15f38e.  v0:= temp @kind object;
  #L15f390.  return v0 @kind object;
}
procedure `int` `d`(`c.c.h` v1 @kind this) @signature `Lc/c/h;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15f364.  v0:= v1.`c.c.h.b` @type ^`boolean` @kind boolean;
  #L15f368.  if v0 == 0 then goto L15f372;
  #L15f36c.  call `e`(v1) @signature `Lc/c/h;.e:()V` @kind direct;
  #L15f372.  v0:= v1.`c.c.h.e` @type ^`int`;
  #L15f376.  return v0;
}
procedure `java.lang.String` `toString`(`c.c.h` v3 @kind this) @signature `Lc/c/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15f428.  call temp:= `d`(v3) @signature `Lc/c/h;.d:()I` @kind virtual;
  #L15f42e.  v0:= temp;
  #L15f430.  if v0 > 0 then goto L15f43a;
  #L15f434.  v0:= "{}" @kind object;
  #L15f438.  return v0 @kind object;
  #L15f43a.  v0:= new `java.lang.StringBuilder`;
  #L15f43e.  v1:= v3.`c.c.h.e` @type ^`int`;
  #L15f442.  v1:= v1 * 28;
  #L15f446.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L15f44c.  v1:= 123I;
  #L15f450.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f456.  v1:= 0I;
  #L15f458.  v2:= v3.`c.c.h.e` @type ^`int`;
  #L15f45c.  if v1 >= v2 then goto L15f4aa;
  #L15f460.  if v1 <= 0 then goto L15f46e;
  #L15f464.  v2:= ", " @kind object;
  #L15f468.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f46e.  call temp:= `b`(v3, v1) @signature `Lc/c/h;.b:(I)I` @kind virtual;
  #L15f474.  v2:= temp;
  #L15f476.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f47c.  v2:= 61I;
  #L15f480.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f486.  call temp:= `c`(v3, v1) @signature `Lc/c/h;.c:(I)Ljava/lang/Object;` @kind virtual;
  #L15f48c.  v2:= temp @kind object;
  #L15f48e.  if v2 == v3 then goto L15f49a;
  #L15f492.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f498.  goto L15f4a4;
  #L15f49a.  v2:= "(this Map)" @kind object;
  #L15f49e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f4a4.  v1:= v1 + 1;
  #L15f4a8.  goto L15f458;
  #L15f4aa.  v1:= 125I;
  #L15f4ae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f4b4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f4ba.  v0:= temp @kind object;
  #L15f4bc.  return v0 @kind object;
}
