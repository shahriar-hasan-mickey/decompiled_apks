record `c.c.c` @kind class @AccessFlag  {
}
global `int`[] `@@c.c.c.a` @AccessFlag STATIC_FINAL;
global `long`[] `@@c.c.c.b` @AccessFlag STATIC_FINAL;
global `java.lang.Object`[] `@@c.c.c.c` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lc/c/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L15ce9c.  v0:= 0I;
  #L15ce9e.  v1:= new `int`[v0];
  #L15cea2.  `@@c.c.c.a` @type ^`int`[] := v1 @kind object;
  #L15cea6.  v1:= new `long`[v0];
  #L15ceaa.  `@@c.c.c.b` @type ^`long`[] := v1 @kind object;
  #L15ceae.  v0:= new `java.lang.Object`[v0];
  #L15ceb2.  `@@c.c.c.c` @type ^`java.lang.Object`[] := v0 @kind object;
  #L15ceb6.  return @kind void;
}
procedure `int` `a`(`int` v2 ) @signature `Lc/c/c;.a:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L15ce24.  v0:= 4I;
  #L15ce26.  v1:= 32I;
  #L15ce2a.  if v0 >= v1 then goto L15ce42;
  #L15ce2e.  v1:= 1I;
  #L15ce30.  v1:= v1 ^< v0 @kind int;
  #L15ce32.  v1:= v1 + -12;
  #L15ce36.  if v2 > v1 then goto L15ce3c;
  #L15ce3a.  return v1;
  #L15ce3c.  v0:= v0 + 1;
  #L15ce40.  goto L15ce26;
  #L15ce42.  return v2;
}
procedure `int` `a`(`int`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lc/c/c;.a:([III)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L15cd98.  v4:= v4 + -1;
  #L15cd9c.  v0:= 0I;
  #L15cd9e.  if v0 > v4 then goto L15cdc8;
  #L15cda2.  v1:= v0 + v4 @kind int;
  #L15cda6.  v1:= v1 ^>> 1;
  #L15cdaa.  v2:= v3[v1];
  #L15cdae.  if v2 >= v5 then goto L15cdba;
  #L15cdb2.  v1:= v1 + 1;
  #L15cdb6.  v0:= v1;
  #L15cdb8.  goto L15cd9e;
  #L15cdba.  if v2 <= v5 then goto L15cdc6;
  #L15cdbe.  v1:= v1 + -1;
  #L15cdc2.  v4:= v1;
  #L15cdc4.  goto L15cd9e;
  #L15cdc6.  return v1;
  #L15cdc8.  v3:= ~v0 @kind int;
  #L15cdca.  return v3;
}
procedure `int` `a`(`long`[] v5 @kind object, `int` v6 , `long` v7 ) @signature `Lc/c/c;.a:([JIJ)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15cddc.  v6:= v6 + -1;
  #L15cde0.  v0:= 0I;
  #L15cde2.  if v0 > v6 then goto L15ce10;
  #L15cde6.  v1:= v0 + v6 @kind int;
  #L15cdea.  v1:= v1 ^>> 1;
  #L15cdee.  v2:= v5[v1] @kind wide;
  #L15cdf2.  v4:= lcmp(v2, v7);
  #L15cdf6.  if v4 >= 0 then goto L15ce02;
  #L15cdfa.  v1:= v1 + 1;
  #L15cdfe.  v0:= v1;
  #L15ce00.  goto L15cde2;
  #L15ce02.  if v4 <= 0 then goto L15ce0e;
  #L15ce06.  v1:= v1 + -1;
  #L15ce0a.  v6:= v1;
  #L15ce0c.  goto L15cde2;
  #L15ce0e.  return v1;
  #L15ce10.  v5:= ~v0 @kind int;
  #L15ce12.  return v5;
}
procedure `boolean` `a`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lc/c/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L15cd68.  if v0 == v1 then goto L15cd82;
  #L15cd6c.  if v0 == 0 then goto L15cd7e;
  #L15cd70.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15cd76.  v0:= temp;
  #L15cd78.  if v0 == 0 then goto L15cd7e;
  #L15cd7c.  goto L15cd82;
  #L15cd7e.  v0:= 0I;
  #L15cd80.  goto L15cd84;
  #L15cd82.  v0:= 1I;
  #L15cd84.  return v0;
}
procedure `int` `b`(`int` v0 ) @signature `Lc/c/c;.b:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L15ce54.  v0:= v0 * 4;
  #L15ce58.  call temp:= `a`(v0) @signature `Lc/c/c;.a:(I)I` @kind static;
  #L15ce5e.  v0:= temp;
  #L15ce60.  v0:= v0 / 4;
  #L15ce64.  return v0;
}
procedure `int` `c`(`int` v0 ) @signature `Lc/c/c;.c:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L15ce78.  v0:= v0 * 8;
  #L15ce7c.  call temp:= `a`(v0) @signature `Lc/c/c;.a:(I)I` @kind static;
  #L15ce82.  v0:= temp;
  #L15ce84.  v0:= v0 / 8;
  #L15ce88.  return v0;
}
