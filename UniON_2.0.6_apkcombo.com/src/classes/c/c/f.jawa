record `c.c.f` @kind class @AccessFlag ABSTRACT {
  `c.c.f$b` `c.c.f.a` @AccessFlag ;
  `c.c.f$c` `c.c.f.b` @AccessFlag ;
  `c.c.f$e` `c.c.f.c` @AccessFlag ;
}
procedure `void` `<init>`(`c.c.f` v0 @kind this) @signature `Lc/c/f;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L15e654.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15e65a.  return @kind void;
}
procedure `boolean` `a`(`java.util.Map` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lc/c/f;.a:(Ljava/util/Map;Ljava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15e3e4.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15e3ea.  v2:= temp @kind object;
  #L15e3ec.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15e3f2.  v0:= temp;
  #L15e3f4.  if v0 == 0 then goto L15e410;
  #L15e3f8.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15e3fe.  v0:= temp @kind object;
  #L15e400.  call temp:= `containsKey`(v1, v0) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L15e406.  v0:= temp;
  #L15e408.  if v0 != 0 then goto L15e3ec;
  #L15e40c.  v1:= 0I;
  #L15e40e.  return v1;
  #L15e410.  v1:= 1I;
  #L15e412.  return v1;
}
procedure `boolean` `a`(`java.util.Set` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lc/c/f;.a:(Ljava/util/Set;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15e424.  v0:= 1I;
  #L15e426.  if v4 != v5 then goto L15e42c;
  #L15e42a.  return v0;
  #L15e42c.  v1:= instanceof @variable v5 @type ^`java.util.Set` @kind boolean;
  #L15e430.  v2:= 0I;
  #L15e432.  if v1 == 0 then goto L15e460;
  #L15e436.  v5:= (`java.util.Set`) v5 @kind object;
  #L15e43a.  call temp:= `size`(v4) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L15e440.  v1:= temp;
  #L15e442.  call temp:= `size`(v5) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L15e448.  v3:= temp;
  #L15e44a.  if v1 != v3 then goto L15e45c;
  #L15e44e.  call temp:= `containsAll`(v4, v5) @signature `Ljava/util/Set;.containsAll:(Ljava/util/Collection;)Z` @kind interface;
  #L15e454.  v4:= temp;
  #L15e456.  if v4 == 0 then goto L15e45c;
  #L15e45a.  goto L15e45e;
  #L15e45c.  v0:= 0I;
  #L15e45e.  return v0;
  #L15e460.  return v2;
  catch `java.lang.NullPointerException` @[L15e43a..L15e456] goto L15e460;
  catch `java.lang.ClassCastException` @[L15e43a..L15e456] goto L15e460;
}
procedure `boolean` `b`(`java.util.Map` v2 @kind object, `java.util.Collection` v3 @kind object) @signature `Lc/c/f;.b:(Ljava/util/Map;Ljava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L15e484.  call temp:= `size`(v2) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L15e48a.  v0:= temp;
  #L15e48c.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15e492.  v3:= temp @kind object;
  #L15e494.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15e49a.  v1:= temp;
  #L15e49c.  if v1 == 0 then goto L15e4b0;
  #L15e4a0.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15e4a6.  v1:= temp @kind object;
  #L15e4a8.  call temp:= `remove`(v2, v1) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15e4ae.  goto L15e494;
  #L15e4b0.  call temp:= `size`(v2) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L15e4b6.  v2:= temp;
  #L15e4b8.  if v0 == v2 then goto L15e4c0;
  #L15e4bc.  v2:= 1I;
  #L15e4be.  goto L15e4c2;
  #L15e4c0.  v2:= 0I;
  #L15e4c2.  return v2;
}
procedure `boolean` `c`(`java.util.Map` v3 @kind object, `java.util.Collection` v4 @kind object) @signature `Lc/c/f;.c:(Ljava/util/Map;Ljava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L15e4d4.  call temp:= `size`(v3) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L15e4da.  v0:= temp;
  #L15e4dc.  call temp:= `keySet`(v3) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L15e4e2.  v1:= temp @kind object;
  #L15e4e4.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15e4ea.  v1:= temp @kind object;
  #L15e4ec.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15e4f2.  v2:= temp;
  #L15e4f4.  if v2 == 0 then goto L15e514;
  #L15e4f8.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15e4fe.  v2:= temp @kind object;
  #L15e500.  call temp:= `contains`(v4, v2) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L15e506.  v2:= temp;
  #L15e508.  if v2 != 0 then goto L15e4ec;
  #L15e50c.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L15e512.  goto L15e4ec;
  #L15e514.  call temp:= `size`(v3) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L15e51a.  v3:= temp;
  #L15e51c.  if v0 == v3 then goto L15e524;
  #L15e520.  v3:= 1I;
  #L15e522.  goto L15e526;
  #L15e524.  v3:= 0I;
  #L15e526.  return v3;
}
procedure `int` `a`(`java.lang.Object` v0 @kind object) @signature `Lc/c/f;.a:(Ljava/lang/Object;)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `a`(`int` v0 , `int` v1 ) @signature `Lc/c/f;.a:(II)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `a`(`int` v0 , `java.lang.Object` v1 @kind object) @signature `Lc/c/f;.a:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `a`() @signature `Lc/c/f;.a:()V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `a`(`int` v0 ) @signature `Lc/c/f;.a:(I)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `a`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lc/c/f;.a:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object`[] `a`(`c.c.f` v3 @kind this, `java.lang.Object`[] v4 @kind object, `int` v5 ) @signature `Lc/c/f;.a:([Ljava/lang/Object;I)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15e570.  call temp:= `c`(v3) @signature `Lc/c/f;.c:()I` @kind virtual;
  #L15e576.  v0:= temp;
  #L15e578.  v1:= length @variable v4;
  #L15e57a.  if v1 >= v0 then goto L15e59a;
  #L15e57e.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L15e584.  v4:= temp @kind object;
  #L15e586.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L15e58c.  v4:= temp @kind object;
  #L15e58e.  call temp:= `newInstance`(v4, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L15e594.  v4:= temp @kind object;
  #L15e596.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L15e59a.  v1:= 0I;
  #L15e59c.  if v1 >= v0 then goto L15e5b2;
  #L15e5a0.  call temp:= `a`(v3, v1, v5) @signature `Lc/c/f;.a:(II)Ljava/lang/Object;` @kind virtual;
  #L15e5a6.  v2:= temp @kind object;
  #L15e5a8.  v4[v1]:= v2 @kind object;
  #L15e5ac.  v1:= v1 + 1;
  #L15e5b0.  goto L15e59c;
  #L15e5b2.  v5:= length @variable v4;
  #L15e5b4.  if v5 <= v0 then goto L15e5be;
  #L15e5b8.  v5:= 0I;
  #L15e5ba.  v4[v0]:= v5 @kind object;
  #L15e5be.  return v4 @kind object;
}
procedure `int` `b`(`java.lang.Object` v0 @kind object) @signature `Lc/c/f;.b:(Ljava/lang/Object;)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.util.Map` `b`() @signature `Lc/c/f;.b:()Ljava/util/Map;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object`[] `b`(`c.c.f` v4 @kind this, `int` v5 ) @signature `Lc/c/f;.b:(I)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15e538.  call temp:= `c`(v4) @signature `Lc/c/f;.c:()I` @kind virtual;
  #L15e53e.  v0:= temp;
  #L15e540.  v1:= new `java.lang.Object`[v0];
  #L15e544.  v2:= 0I;
  #L15e546.  if v2 >= v0 then goto L15e55c;
  #L15e54a.  call temp:= `a`(v4, v2, v5) @signature `Lc/c/f;.a:(II)Ljava/lang/Object;` @kind virtual;
  #L15e550.  v3:= temp @kind object;
  #L15e552.  v1[v2]:= v3 @kind object;
  #L15e556.  v2:= v2 + 1;
  #L15e55a.  goto L15e546;
  #L15e55c.  return v1 @kind object;
}
procedure `int` `c`() @signature `Lc/c/f;.c:()I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.util.Set` `d`(`c.c.f` v1 @kind this) @signature `Lc/c/f;.d:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e5fc.  v0:= v1.`c.c.f.a` @type ^`c.c.f$b` @kind object;
  #L15e600.  if v0 != 0 then goto L15e612;
  #L15e604.  v0:= new `c.c.f$b`;
  #L15e608.  call `<init>`(v0, v1) @signature `Lc/c/f$b;.<init>:(Lc/c/f;)V` @kind direct;
  #L15e60e.  v1.`c.c.f.a` @type ^`c.c.f$b` := v0 @kind object;
  #L15e612.  v0:= v1.`c.c.f.a` @type ^`c.c.f$b` @kind object;
  #L15e616.  return v0 @kind object;
}
procedure `java.util.Set` `e`(`c.c.f` v1 @kind this) @signature `Lc/c/f;.e:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e628.  v0:= v1.`c.c.f.b` @type ^`c.c.f$c` @kind object;
  #L15e62c.  if v0 != 0 then goto L15e63e;
  #L15e630.  v0:= new `c.c.f$c`;
  #L15e634.  call `<init>`(v0, v1) @signature `Lc/c/f$c;.<init>:(Lc/c/f;)V` @kind direct;
  #L15e63a.  v1.`c.c.f.b` @type ^`c.c.f$c` := v0 @kind object;
  #L15e63e.  v0:= v1.`c.c.f.b` @type ^`c.c.f$c` @kind object;
  #L15e642.  return v0 @kind object;
}
procedure `java.util.Collection` `f`(`c.c.f` v1 @kind this) @signature `Lc/c/f;.f:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e5d0.  v0:= v1.`c.c.f.c` @type ^`c.c.f$e` @kind object;
  #L15e5d4.  if v0 != 0 then goto L15e5e6;
  #L15e5d8.  v0:= new `c.c.f$e`;
  #L15e5dc.  call `<init>`(v0, v1) @signature `Lc/c/f$e;.<init>:(Lc/c/f;)V` @kind direct;
  #L15e5e2.  v1.`c.c.f.c` @type ^`c.c.f$e` := v0 @kind object;
  #L15e5e6.  v0:= v1.`c.c.f.c` @type ^`c.c.f$e` @kind object;
  #L15e5ea.  return v0 @kind object;
}
