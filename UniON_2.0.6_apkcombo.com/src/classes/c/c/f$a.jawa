record `c.c.f$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `int` `c.c.f$a.b` @AccessFlag FINAL;
  `int` `c.c.f$a.c` @AccessFlag ;
  `int` `c.c.f$a.d` @AccessFlag ;
  `boolean` `c.c.f$a.e` @AccessFlag ;
  `c.c.f` `c.c.f$a.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.c.f$a` v1 @kind this, `c.c.f` v2 @kind object, `int` v3 ) @signature `Lc/c/f$a;.<init>:(Lc/c/f;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L15d8a0.  v1.`c.c.f$a.f` @type ^`c.c.f` := v2 @kind object;
  #L15d8a4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15d8aa.  v0:= 0I;
  #L15d8ac.  v1.`c.c.f$a.e` @type ^`boolean` := v0 @kind boolean;
  #L15d8b0.  v1.`c.c.f$a.b` @type ^`int` := v3;
  #L15d8b4.  call temp:= `c`(v2) @signature `Lc/c/f;.c:()I` @kind virtual;
  #L15d8ba.  v2:= temp;
  #L15d8bc.  v1.`c.c.f$a.c` @type ^`int` := v2;
  #L15d8c0.  return @kind void;
}
procedure `boolean` `hasNext`(`c.c.f$a` v2 @kind this) @signature `Lc/c/f$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15d82c.  v0:= v2.`c.c.f$a.d` @type ^`int`;
  #L15d830.  v1:= v2.`c.c.f$a.c` @type ^`int`;
  #L15d834.  if v0 >= v1 then goto L15d83c;
  #L15d838.  v0:= 1I;
  #L15d83a.  goto L15d83e;
  #L15d83c.  v0:= 0I;
  #L15d83e.  return v0;
}
procedure `java.lang.Object` `next`(`c.c.f$a` v3 @kind this) @signature `Lc/c/f$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15d850.  call temp:= `hasNext`(v3) @signature `Lc/c/f$a;.hasNext:()Z` @kind virtual;
  #L15d856.  v0:= temp;
  #L15d858.  if v0 == 0 then goto L15d882;
  #L15d85c.  v0:= v3.`c.c.f$a.f` @type ^`c.c.f` @kind object;
  #L15d860.  v1:= v3.`c.c.f$a.d` @type ^`int`;
  #L15d864.  v2:= v3.`c.c.f$a.b` @type ^`int`;
  #L15d868.  call temp:= `a`(v0, v1, v2) @signature `Lc/c/f;.a:(II)Ljava/lang/Object;` @kind virtual;
  #L15d86e.  v0:= temp @kind object;
  #L15d870.  v1:= v3.`c.c.f$a.d` @type ^`int`;
  #L15d874.  v2:= 1I;
  #L15d876.  v1:= v1 + v2 @kind int;
  #L15d878.  v3.`c.c.f$a.d` @type ^`int` := v1;
  #L15d87c.  v3.`c.c.f$a.e` @type ^`boolean` := v2 @kind boolean;
  #L15d880.  return v0 @kind object;
  #L15d882.  v0:= new `java.util.NoSuchElementException`;
  #L15d886.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L15d88c.  throw v0;
}
procedure `void` `remove`(`c.c.f$a` v2 @kind this) @signature `Lc/c/f$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15d8d4.  v0:= v2.`c.c.f$a.e` @type ^`boolean` @kind boolean;
  #L15d8d8.  if v0 == 0 then goto L15d90a;
  #L15d8dc.  v0:= v2.`c.c.f$a.d` @type ^`int`;
  #L15d8e0.  v0:= v0 + -1;
  #L15d8e4.  v2.`c.c.f$a.d` @type ^`int` := v0;
  #L15d8e8.  v0:= v2.`c.c.f$a.c` @type ^`int`;
  #L15d8ec.  v0:= v0 + -1;
  #L15d8f0.  v2.`c.c.f$a.c` @type ^`int` := v0;
  #L15d8f4.  v0:= 0I;
  #L15d8f6.  v2.`c.c.f$a.e` @type ^`boolean` := v0 @kind boolean;
  #L15d8fa.  v0:= v2.`c.c.f$a.f` @type ^`c.c.f` @kind object;
  #L15d8fe.  v1:= v2.`c.c.f$a.d` @type ^`int`;
  #L15d902.  call `a`(v0, v1) @signature `Lc/c/f;.a:(I)V` @kind virtual;
  #L15d908.  return @kind void;
  #L15d90a.  v0:= new `java.lang.IllegalStateException`;
  #L15d90e.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L15d914.  throw v0;
}
