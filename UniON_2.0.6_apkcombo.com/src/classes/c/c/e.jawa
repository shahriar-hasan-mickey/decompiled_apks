record `c.c.e` @kind class @AccessFlag PUBLIC {
  `java.util.LinkedHashMap` `c.c.e.a` @AccessFlag PRIVATE_FINAL;
  `int` `c.c.e.b` @AccessFlag PRIVATE;
  `int` `c.c.e.c` @AccessFlag PRIVATE;
  `int` `c.c.e.d` @AccessFlag PRIVATE;
  `int` `c.c.e.e` @AccessFlag PRIVATE;
  `int` `c.c.e.f` @AccessFlag PRIVATE;
  `int` `c.c.e.g` @AccessFlag PRIVATE;
  `int` `c.c.e.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.c.e` v3 @kind this, `int` v4 ) @signature `Lc/c/e;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L15d6c4.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15d6ca.  if v4 <= 0 then goto L15d6ea;
  #L15d6ce.  v3.`c.c.e.c` @type ^`int` := v4;
  #L15d6d2.  v4:= new `java.util.LinkedHashMap`;
  #L15d6d6.  v0:= 0I;
  #L15d6d8.  v1:= 0.75F;
  #L15d6dc.  v2:= 1I;
  #L15d6de.  call `<init>`(v4, v0, v1, v2) @signature `Ljava/util/LinkedHashMap;.<init>:(IFZ)V` @kind direct;
  #L15d6e4.  v3.`c.c.e.a` @type ^`java.util.LinkedHashMap` := v4 @kind object;
  #L15d6e8.  return @kind void;
  #L15d6ea.  v4:= new `java.lang.IllegalArgumentException`;
  #L15d6ee.  v0:= "maxSize <= 0" @kind object;
  #L15d6f2.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d6f8.  throw v4;
}
procedure `int` `c`(`c.c.e` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lc/c/e;.c:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L15d410.  call temp:= `b`(v3, v4, v5) @signature `Lc/c/e;.b:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind virtual;
  #L15d416.  v0:= temp;
  #L15d418.  if v0 < 0 then goto L15d41e;
  #L15d41c.  return v0;
  #L15d41e.  v0:= new `java.lang.IllegalStateException`;
  #L15d422.  v1:= new `java.lang.StringBuilder`;
  #L15d426.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15d42c.  v2:= "Negative size: " @kind object;
  #L15d430.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d436.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d43c.  v4:= "=" @kind object;
  #L15d440.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d446.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d44c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15d452.  v4:= temp @kind object;
  #L15d454.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d45a.  throw v0;
}
procedure `java.lang.Object` `a`(`c.c.e` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/c/e;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;

  #L15d480.  v1:= 0I;
  #L15d482.  return v1 @kind object;
}
procedure `java.lang.Object` `a`(`c.c.e` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lc/c/e;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L15d584.  if v4 == 0 then goto L15d5ee;
  #L15d588.  if v5 == 0 then goto L15d5ee;
  #L15d58c.  @monitorenter v3
  #L15d58e.  v0:= v3.`c.c.e.d` @type ^`int`;
  #L15d592.  v0:= v0 + 1;
  #L15d596.  v3.`c.c.e.d` @type ^`int` := v0;
  #L15d59a.  v0:= v3.`c.c.e.b` @type ^`int`;
  #L15d59e.  call temp:= `c`(v3, v4, v5) @signature `Lc/c/e;.c:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind direct;
  #L15d5a4.  v1:= temp;
  #L15d5a6.  v0:= v0 + v1 @kind int;
  #L15d5a8.  v3.`c.c.e.b` @type ^`int` := v0;
  #L15d5ac.  v0:= v3.`c.c.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L15d5b0.  call temp:= `put`(v0, v4, v5) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15d5b6.  v0:= temp @kind object;
  #L15d5b8.  if v0 == 0 then goto L15d5ce;
  #L15d5bc.  v1:= v3.`c.c.e.b` @type ^`int`;
  #L15d5c0.  call temp:= `c`(v3, v4, v0) @signature `Lc/c/e;.c:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind direct;
  #L15d5c6.  v2:= temp;
  #L15d5c8.  v1:= v1 - v2 @kind int;
  #L15d5ca.  v3.`c.c.e.b` @type ^`int` := v1;
  #L15d5ce.  @monitorexit v3
  #L15d5d0.  if v0 == 0 then goto L15d5dc;
  #L15d5d4.  v1:= 0I;
  #L15d5d6.  call `a`(v3, v1, v4, v0, v5) @signature `Lc/c/e;.a:(ZLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L15d5dc.  v4:= v3.`c.c.e.c` @type ^`int`;
  #L15d5e0.  call `a`(v3, v4) @signature `Lc/c/e;.a:(I)V` @kind virtual;
  #L15d5e6.  return v0 @kind object;
  #L15d5e8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15d5ea.  @monitorexit v3
  #L15d5ec.  throw v4;
  #L15d5ee.  v4:= new `java.lang.NullPointerException`;
  #L15d5f2.  v5:= "key == null || value == null" @kind object;
  #L15d5f6.  call `<init>`(v4, v5) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d5fc.  throw v4;
  catch `java.lang.Throwable` @[L15d58e..L15d5d0] goto L15d5e8;
  catch `java.lang.Throwable` @[L15d5ea..L15d5ec] goto L15d5e8;
}
procedure `void` `a`(`c.c.e` v4 @kind this, `int` v5 ) @signature `Lc/c/e;.a:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15d720.  @monitorenter v4
  #L15d722.  v0:= v4.`c.c.e.b` @type ^`int`;
  #L15d726.  if v0 < 0 then goto L15d7c4;
  #L15d72a.  v0:= v4.`c.c.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L15d72e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/LinkedHashMap;.isEmpty:()Z` @kind virtual;
  #L15d734.  v0:= temp;
  #L15d736.  if v0 == 0 then goto L15d742;
  #L15d73a.  v0:= v4.`c.c.e.b` @type ^`int`;
  #L15d73e.  if v0 != 0 then goto L15d7c4;
  #L15d742.  v0:= v4.`c.c.e.b` @type ^`int`;
  #L15d746.  if v0 <= v5 then goto L15d7c0;
  #L15d74a.  v0:= v4.`c.c.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L15d74e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/LinkedHashMap;.isEmpty:()Z` @kind virtual;
  #L15d754.  v0:= temp;
  #L15d756.  if v0 == 0 then goto L15d75c;
  #L15d75a.  goto L15d7c0;
  #L15d75c.  v0:= v4.`c.c.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L15d760.  call temp:= `entrySet`(v0) @signature `Ljava/util/LinkedHashMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L15d766.  v0:= temp @kind object;
  #L15d768.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15d76e.  v0:= temp @kind object;
  #L15d770.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15d776.  v0:= temp @kind object;
  #L15d778.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L15d77c.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L15d782.  v1:= temp @kind object;
  #L15d784.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L15d78a.  v0:= temp @kind object;
  #L15d78c.  v2:= v4.`c.c.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L15d790.  call temp:= `remove`(v2, v1) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15d796.  v2:= v4.`c.c.e.b` @type ^`int`;
  #L15d79a.  call temp:= `c`(v4, v1, v0) @signature `Lc/c/e;.c:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind direct;
  #L15d7a0.  v3:= temp;
  #L15d7a2.  v2:= v2 - v3 @kind int;
  #L15d7a4.  v4.`c.c.e.b` @type ^`int` := v2;
  #L15d7a8.  v2:= v4.`c.c.e.f` @type ^`int`;
  #L15d7ac.  v3:= 1I;
  #L15d7ae.  v2:= v2 + v3 @kind int;
  #L15d7b0.  v4.`c.c.e.f` @type ^`int` := v2;
  #L15d7b4.  @monitorexit v4
  #L15d7b6.  v2:= 0I;
  #L15d7b8.  call `a`(v4, v3, v1, v0, v2) @signature `Lc/c/e;.a:(ZLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L15d7be.  goto L15d720;
  #L15d7c0.  @monitorexit v4
  #L15d7c2.  return @kind void;
  #L15d7c4.  v5:= new `java.lang.IllegalStateException`;
  #L15d7c8.  v0:= new `java.lang.StringBuilder`;
  #L15d7cc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15d7d2.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L15d7d8.  v1:= temp @kind object;
  #L15d7da.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L15d7e0.  v1:= temp @kind object;
  #L15d7e2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d7e8.  v1:= ".sizeOf() is reporting inconsistent results!" @kind object;
  #L15d7ec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d7f2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15d7f8.  v0:= temp @kind object;
  #L15d7fa.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d800.  throw v5;
  #L15d802.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15d804.  @monitorexit v4
  #L15d806.  throw v5;
  catch `java.lang.Throwable` @[L15d722..L15d7b6] goto L15d802;
  catch `java.lang.Throwable` @[L15d7c0..L15d806] goto L15d802;
}
procedure `void` `a`(`c.c.e` v0 @kind this, `boolean` v1 , `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lc/c/e;.a:(ZLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L15d70c.  return @kind void;
}
procedure `int` `b`(`c.c.e` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lc/c/e;.b:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PROTECTED {
    temp;

  #L15d46c.  v1:= 1I;
  #L15d46e.  return v1;
}
procedure `java.lang.Object` `b`(`c.c.e` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lc/c/e;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15d494.  if v5 == 0 then goto L15d53c;
  #L15d498.  @monitorenter v4
  #L15d49a.  v0:= v4.`c.c.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L15d49e.  call temp:= `get`(v0, v5) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15d4a4.  v0:= temp @kind object;
  #L15d4a6.  if v0 == 0 then goto L15d4ba;
  #L15d4aa.  v5:= v4.`c.c.e.g` @type ^`int`;
  #L15d4ae.  v5:= v5 + 1;
  #L15d4b2.  v4.`c.c.e.g` @type ^`int` := v5;
  #L15d4b6.  @monitorexit v4
  #L15d4b8.  return v0 @kind object;
  #L15d4ba.  v0:= v4.`c.c.e.h` @type ^`int`;
  #L15d4be.  v0:= v0 + 1;
  #L15d4c2.  v4.`c.c.e.h` @type ^`int` := v0;
  #L15d4c6.  @monitorexit v4
  #L15d4c8.  call temp:= `a`(v4, v5) @signature `Lc/c/e;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15d4ce.  v0:= temp @kind object;
  #L15d4d0.  if v0 != 0 then goto L15d4d8;
  #L15d4d4.  v5:= 0I;
  #L15d4d6.  return v5 @kind object;
  #L15d4d8.  @monitorenter v4
  #L15d4da.  v1:= v4.`c.c.e.e` @type ^`int`;
  #L15d4de.  v1:= v1 + 1;
  #L15d4e2.  v4.`c.c.e.e` @type ^`int` := v1;
  #L15d4e6.  v1:= v4.`c.c.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L15d4ea.  call temp:= `put`(v1, v5, v0) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15d4f0.  v1:= temp @kind object;
  #L15d4f2.  if v1 == 0 then goto L15d502;
  #L15d4f6.  v2:= v4.`c.c.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L15d4fa.  call temp:= `put`(v2, v5, v1) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15d500.  goto L15d514;
  #L15d502.  v2:= v4.`c.c.e.b` @type ^`int`;
  #L15d506.  call temp:= `c`(v4, v5, v0) @signature `Lc/c/e;.c:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind direct;
  #L15d50c.  v3:= temp;
  #L15d50e.  v2:= v2 + v3 @kind int;
  #L15d510.  v4.`c.c.e.b` @type ^`int` := v2;
  #L15d514.  @monitorexit v4
  #L15d516.  if v1 == 0 then goto L15d524;
  #L15d51a.  v2:= 0I;
  #L15d51c.  call `a`(v4, v2, v5, v0, v1) @signature `Lc/c/e;.a:(ZLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L15d522.  return v1 @kind object;
  #L15d524.  v5:= v4.`c.c.e.c` @type ^`int`;
  #L15d528.  call `a`(v4, v5) @signature `Lc/c/e;.a:(I)V` @kind virtual;
  #L15d52e.  return v0 @kind object;
  #L15d530.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15d532.  @monitorexit v4
  #L15d534.  throw v5;
  #L15d536.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15d538.  @monitorexit v4
  #L15d53a.  throw v5;
  #L15d53c.  v5:= new `java.lang.NullPointerException`;
  #L15d540.  v0:= "key == null" @kind object;
  #L15d544.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d54a.  throw v5;
  catch `java.lang.Throwable` @[L15d49a..L15d4c8] goto L15d536;
  catch `java.lang.Throwable` @[L15d4da..L15d516] goto L15d530;
  catch `java.lang.Throwable` @[L15d532..L15d534] goto L15d530;
  catch `java.lang.Throwable` @[L15d538..L15d53a] goto L15d536;
}
procedure `java.lang.String` `toString`(`c.c.e` v6 @kind this) @signature `Lc/c/e;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15d624.  @monitorenter v6
  #L15d626.  v0:= v6.`c.c.e.g` @type ^`int`;
  #L15d62a.  v1:= v6.`c.c.e.h` @type ^`int`;
  #L15d62e.  v0:= v0 + v1 @kind int;
  #L15d630.  v1:= 0I;
  #L15d632.  if v0 == 0 then goto L15d644;
  #L15d636.  v2:= v6.`c.c.e.g` @type ^`int`;
  #L15d63a.  v2:= v2 * 100;
  #L15d63e.  v0:= v2 / v0 @kind int;
  #L15d642.  goto L15d646;
  #L15d644.  v0:= 0I;
  #L15d646.  v2:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L15d64a.  v3:= "LruCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]" @kind object;
  #L15d64e.  v4:= 4I;
  #L15d650.  v4:= new `java.lang.Object`[v4];
  #L15d654.  v5:= v6.`c.c.e.c` @type ^`int`;
  #L15d658.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15d65e.  v5:= temp @kind object;
  #L15d660.  v4[v1]:= v5 @kind object;
  #L15d664.  v1:= 1I;
  #L15d666.  v5:= v6.`c.c.e.g` @type ^`int`;
  #L15d66a.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15d670.  v5:= temp @kind object;
  #L15d672.  v4[v1]:= v5 @kind object;
  #L15d676.  v1:= 2I;
  #L15d678.  v5:= v6.`c.c.e.h` @type ^`int`;
  #L15d67c.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15d682.  v5:= temp @kind object;
  #L15d684.  v4[v1]:= v5 @kind object;
  #L15d688.  v1:= 3I;
  #L15d68a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15d690.  v0:= temp @kind object;
  #L15d692.  v4[v1]:= v0 @kind object;
  #L15d696.  call temp:= `format`(v2, v3, v4) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L15d69c.  v0:= temp @kind object;
  #L15d69e.  @monitorexit v6
  #L15d6a0.  return v0 @kind object;
  #L15d6a2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15d6a4.  @monitorexit v6
  #L15d6a6.  throw v0;
  catch `java.lang.Throwable` @[L15d626..L15d69e] goto L15d6a2;
}
