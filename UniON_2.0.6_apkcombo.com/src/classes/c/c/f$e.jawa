record `c.c.f$e` @kind class @AccessFlag FINAL extends `java.util.Collection` @kind interface {
  `c.c.f` `c.c.f$e.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.c.f$e` v0 @kind this, `c.c.f` v1 @kind object) @signature `Lc/c/f$e;.<init>:(Lc/c/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L15e3ac.  v0.`c.c.f$e.b` @type ^`c.c.f` := v1 @kind object;
  #L15e3b0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15e3b6.  return @kind void;
}
procedure `boolean` `add`(`c.c.f$e` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/c/f$e;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L15e17c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L15e180.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L15e186.  throw v1;
}
procedure `boolean` `addAll`(`c.c.f$e` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lc/c/f$e;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L15e198.  v1:= new `java.lang.UnsupportedOperationException`;
  #L15e19c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L15e1a2.  throw v1;
}
procedure `void` `clear`(`c.c.f$e` v1 @kind this) @signature `Lc/c/f$e;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e3c8.  v0:= v1.`c.c.f$e.b` @type ^`c.c.f` @kind object;
  #L15e3cc.  call `a`(v0) @signature `Lc/c/f;.a:()V` @kind virtual;
  #L15e3d2.  return @kind void;
}
procedure `boolean` `contains`(`c.c.f$e` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/c/f$e;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e1b4.  v0:= v1.`c.c.f$e.b` @type ^`c.c.f` @kind object;
  #L15e1b8.  call temp:= `b`(v0, v2) @signature `Lc/c/f;.b:(Ljava/lang/Object;)I` @kind virtual;
  #L15e1be.  v2:= temp;
  #L15e1c0.  if v2 < 0 then goto L15e1c8;
  #L15e1c4.  v2:= 1I;
  #L15e1c6.  goto L15e1ca;
  #L15e1c8.  v2:= 0I;
  #L15e1ca.  return v2;
}
procedure `boolean` `containsAll`(`c.c.f$e` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lc/c/f$e;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e1dc.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15e1e2.  v2:= temp @kind object;
  #L15e1e4.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15e1ea.  v0:= temp;
  #L15e1ec.  if v0 == 0 then goto L15e208;
  #L15e1f0.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15e1f6.  v0:= temp @kind object;
  #L15e1f8.  call temp:= `contains`(v1, v0) @signature `Lc/c/f$e;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L15e1fe.  v0:= temp;
  #L15e200.  if v0 != 0 then goto L15e1e4;
  #L15e204.  v2:= 0I;
  #L15e206.  return v2;
  #L15e208.  v2:= 1I;
  #L15e20a.  return v2;
}
procedure `boolean` `isEmpty`(`c.c.f$e` v1 @kind this) @signature `Lc/c/f$e;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e21c.  v0:= v1.`c.c.f$e.b` @type ^`c.c.f` @kind object;
  #L15e220.  call temp:= `c`(v0) @signature `Lc/c/f;.c:()I` @kind virtual;
  #L15e226.  v0:= temp;
  #L15e228.  if v0 != 0 then goto L15e230;
  #L15e22c.  v0:= 1I;
  #L15e22e.  goto L15e232;
  #L15e230.  v0:= 0I;
  #L15e232.  return v0;
}
procedure `java.util.Iterator` `iterator`(`c.c.f$e` v3 @kind this) @signature `Lc/c/f$e;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15e388.  v0:= new `c.c.f$a`;
  #L15e38c.  v1:= v3.`c.c.f$e.b` @type ^`c.c.f` @kind object;
  #L15e390.  v2:= 1I;
  #L15e392.  call `<init>`(v0, v1, v2) @signature `Lc/c/f$a;.<init>:(Lc/c/f;I)V` @kind direct;
  #L15e398.  return v0 @kind object;
}
procedure `boolean` `remove`(`c.c.f$e` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/c/f$e;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e244.  v0:= v1.`c.c.f$e.b` @type ^`c.c.f` @kind object;
  #L15e248.  call temp:= `b`(v0, v2) @signature `Lc/c/f;.b:(Ljava/lang/Object;)I` @kind virtual;
  #L15e24e.  v2:= temp;
  #L15e250.  if v2 < 0 then goto L15e262;
  #L15e254.  v0:= v1.`c.c.f$e.b` @type ^`c.c.f` @kind object;
  #L15e258.  call `a`(v0, v2) @signature `Lc/c/f;.a:(I)V` @kind virtual;
  #L15e25e.  v2:= 1I;
  #L15e260.  return v2;
  #L15e262.  v2:= 0I;
  #L15e264.  return v2;
}
procedure `boolean` `removeAll`(`c.c.f$e` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Lc/c/f$e;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15e278.  v0:= v5.`c.c.f$e.b` @type ^`c.c.f` @kind object;
  #L15e27c.  call temp:= `c`(v0) @signature `Lc/c/f;.c:()I` @kind virtual;
  #L15e282.  v0:= temp;
  #L15e284.  v1:= 0I;
  #L15e286.  v2:= 0I;
  #L15e288.  if v1 >= v0 then goto L15e2be;
  #L15e28c.  v3:= v5.`c.c.f$e.b` @type ^`c.c.f` @kind object;
  #L15e290.  v4:= 1I;
  #L15e292.  call temp:= `a`(v3, v1, v4) @signature `Lc/c/f;.a:(II)Ljava/lang/Object;` @kind virtual;
  #L15e298.  v3:= temp @kind object;
  #L15e29a.  call temp:= `contains`(v6, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L15e2a0.  v3:= temp;
  #L15e2a2.  if v3 == 0 then goto L15e2ba;
  #L15e2a6.  v2:= v5.`c.c.f$e.b` @type ^`c.c.f` @kind object;
  #L15e2aa.  call `a`(v2, v1) @signature `Lc/c/f;.a:(I)V` @kind virtual;
  #L15e2b0.  v1:= v1 + -1;
  #L15e2b4.  v0:= v0 + -1;
  #L15e2b8.  v2:= 1I;
  #L15e2ba.  v1:= v1 + v4 @kind int;
  #L15e2bc.  goto L15e288;
  #L15e2be.  return v2;
}
procedure `boolean` `retainAll`(`c.c.f$e` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Lc/c/f$e;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15e2d0.  v0:= v5.`c.c.f$e.b` @type ^`c.c.f` @kind object;
  #L15e2d4.  call temp:= `c`(v0) @signature `Lc/c/f;.c:()I` @kind virtual;
  #L15e2da.  v0:= temp;
  #L15e2dc.  v1:= 0I;
  #L15e2de.  v2:= 0I;
  #L15e2e0.  if v1 >= v0 then goto L15e316;
  #L15e2e4.  v3:= v5.`c.c.f$e.b` @type ^`c.c.f` @kind object;
  #L15e2e8.  v4:= 1I;
  #L15e2ea.  call temp:= `a`(v3, v1, v4) @signature `Lc/c/f;.a:(II)Ljava/lang/Object;` @kind virtual;
  #L15e2f0.  v3:= temp @kind object;
  #L15e2f2.  call temp:= `contains`(v6, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L15e2f8.  v3:= temp;
  #L15e2fa.  if v3 != 0 then goto L15e312;
  #L15e2fe.  v2:= v5.`c.c.f$e.b` @type ^`c.c.f` @kind object;
  #L15e302.  call `a`(v2, v1) @signature `Lc/c/f;.a:(I)V` @kind virtual;
  #L15e308.  v1:= v1 + -1;
  #L15e30c.  v0:= v0 + -1;
  #L15e310.  v2:= 1I;
  #L15e312.  v1:= v1 + v4 @kind int;
  #L15e314.  goto L15e2e0;
  #L15e316.  return v2;
}
procedure `int` `size`(`c.c.f$e` v1 @kind this) @signature `Lc/c/f$e;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e328.  v0:= v1.`c.c.f$e.b` @type ^`c.c.f` @kind object;
  #L15e32c.  call temp:= `c`(v0) @signature `Lc/c/f;.c:()I` @kind virtual;
  #L15e332.  v0:= temp;
  #L15e334.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`c.c.f$e` v2 @kind this) @signature `Lc/c/f$e;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15e348.  v0:= v2.`c.c.f$e.b` @type ^`c.c.f` @kind object;
  #L15e34c.  v1:= 1I;
  #L15e34e.  call temp:= `b`(v0, v1) @signature `Lc/c/f;.b:(I)[Ljava/lang/Object;` @kind virtual;
  #L15e354.  v0:= temp @kind object;
  #L15e356.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`c.c.f$e` v2 @kind this, `java.lang.Object`[] v3 @kind object) @signature `Lc/c/f$e;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15e368.  v0:= v2.`c.c.f$e.b` @type ^`c.c.f` @kind object;
  #L15e36c.  v1:= 1I;
  #L15e36e.  call temp:= `a`(v0, v3, v1) @signature `Lc/c/f;.a:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind virtual;
  #L15e374.  v3:= temp @kind object;
  #L15e376.  return v3 @kind object;
}
