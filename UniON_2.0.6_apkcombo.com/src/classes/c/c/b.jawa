record `c.c.b` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Collection` @kind interface, `java.util.Set` @kind interface {
  `int`[] `c.c.b.b` @AccessFlag PRIVATE;
  `java.lang.Object`[] `c.c.b.c` @AccessFlag ;
  `int` `c.c.b.d` @AccessFlag ;
  `c.c.f` `c.c.b.e` @AccessFlag PRIVATE;
}
global `int`[] `@@c.c.b.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object`[] `@@c.c.b.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object`[] `@@c.c.b.h` @AccessFlag PRIVATE_STATIC;
global `int` `@@c.c.b.i` @AccessFlag PRIVATE_STATIC;
global `java.lang.Object`[] `@@c.c.b.j` @AccessFlag PRIVATE_STATIC;
global `int` `@@c.c.b.k` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lc/c/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L15caa0.  v0:= 0I;
  #L15caa2.  v1:= new `int`[v0];
  #L15caa6.  `@@c.c.b.f` @type ^`int`[] := v1 @kind object;
  #L15caaa.  v0:= new `java.lang.Object`[v0];
  #L15caae.  `@@c.c.b.g` @type ^`java.lang.Object`[] := v0 @kind object;
  #L15cab2.  return @kind void;
}
procedure `void` `<init>`(`c.c.b` v1 @kind this) @signature `Lc/c/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15cac4.  v0:= 0I;
  #L15cac6.  call `<init>`(v1, v0) @signature `Lc/c/b;.<init>:(I)V` @kind direct;
  #L15cacc.  return @kind void;
}
procedure `void` `<init>`(`c.c.b` v0 @kind this, `int` v1 ) @signature `Lc/c/b;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15cae0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15cae6.  if v1 != 0 then goto L15cafc;
  #L15caea.  v1:= `@@c.c.b.f` @type ^`int`[] @kind object;
  #L15caee.  v0.`c.c.b.b` @type ^`int`[] := v1 @kind object;
  #L15caf2.  v1:= `@@c.c.b.g` @type ^`java.lang.Object`[] @kind object;
  #L15caf6.  v0.`c.c.b.c` @type ^`java.lang.Object`[] := v1 @kind object;
  #L15cafa.  goto L15cb02;
  #L15cafc.  call `k`(v0, v1) @signature `Lc/c/b;.k:(I)V` @kind direct;
  #L15cb02.  v1:= 0I;
  #L15cb04.  v0.`c.c.b.d` @type ^`int` := v1;
  #L15cb08.  return @kind void;
}
procedure `int` `a`(`c.c.b` v4 @kind this, `java.lang.Object` v5 @kind object, `int` v6 ) @signature `Lc/c/b;.a:(Ljava/lang/Object;I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15c6ec.  v0:= v4.`c.c.b.d` @type ^`int`;
  #L15c6f0.  if v0 != 0 then goto L15c6f8;
  #L15c6f4.  v5:= -1I;
  #L15c6f6.  return v5;
  #L15c6f8.  v1:= v4.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c6fc.  call temp:= `a`(v1, v0, v6) @signature `Lc/c/c;.a:([III)I` @kind static;
  #L15c702.  v1:= temp;
  #L15c704.  if v1 >= 0 then goto L15c70a;
  #L15c708.  return v1;
  #L15c70a.  v2:= v4.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c70e.  v2:= v2[v1] @kind object;
  #L15c712.  call temp:= `equals`(v5, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15c718.  v2:= temp;
  #L15c71a.  if v2 == 0 then goto L15c720;
  #L15c71e.  return v1;
  #L15c720.  v2:= v1 + 1;
  #L15c724.  if v2 >= v0 then goto L15c750;
  #L15c728.  v3:= v4.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c72c.  v3:= v3[v2];
  #L15c730.  if v3 != v6 then goto L15c750;
  #L15c734.  v3:= v4.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c738.  v3:= v3[v2] @kind object;
  #L15c73c.  call temp:= `equals`(v5, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15c742.  v3:= temp;
  #L15c744.  if v3 == 0 then goto L15c74a;
  #L15c748.  return v2;
  #L15c74a.  v2:= v2 + 1;
  #L15c74e.  goto L15c724;
  #L15c750.  v1:= v1 + -1;
  #L15c754.  if v1 < 0 then goto L15c780;
  #L15c758.  v0:= v4.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c75c.  v0:= v0[v1];
  #L15c760.  if v0 != v6 then goto L15c780;
  #L15c764.  v0:= v4.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c768.  v0:= v0[v1] @kind object;
  #L15c76c.  call temp:= `equals`(v5, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15c772.  v0:= temp;
  #L15c774.  if v0 == 0 then goto L15c77a;
  #L15c778.  return v1;
  #L15c77a.  v1:= v1 + -1;
  #L15c77e.  goto L15c754;
  #L15c780.  v5:= ~v2 @kind int;
  #L15c782.  return v5;
}
procedure `void` `a`(`int`[] v7 @kind object, `java.lang.Object`[] v8 @kind object, `int` v9 ) @signature `Lc/c/b;.a:([I[Ljava/lang/Object;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L15cc9c.  v0:= length @variable v7;
  #L15cc9e.  v1:= 0I;
  #L15cca0.  v2:= 2I;
  #L15cca2.  v3:= 0I;
  #L15cca4.  v4:= 10I;
  #L15cca8.  v5:= 1I;
  #L15ccaa.  v6:= 8I;
  #L15ccae.  if v0 != v6 then goto L15ccf4;
  #L15ccb2.  v0:= constclass @type ^`c.c.b` @kind object;
  #L15ccb6.  @monitorenter v0
  #L15ccb8.  v6:= `@@c.c.b.k` @type ^`int`;
  #L15ccbc.  if v6 >= v4 then goto L15ccea;
  #L15ccc0.  v4:= `@@c.c.b.j` @type ^`java.lang.Object`[] @kind object;
  #L15ccc4.  v8[v3]:= v4 @kind object;
  #L15ccc8.  v8[v5]:= v7 @kind object;
  #L15cccc.  v9:= v9 - v5 @kind int;
  #L15ccce.  if v9 < v2 then goto L15ccdc;
  #L15ccd2.  v8[v9]:= v1 @kind object;
  #L15ccd6.  v9:= v9 + -1;
  #L15ccda.  goto L15ccce;
  #L15ccdc.  `@@c.c.b.j` @type ^`java.lang.Object`[] := v8 @kind object;
  #L15cce0.  v7:= `@@c.c.b.k` @type ^`int`;
  #L15cce4.  v7:= v7 + v5 @kind int;
  #L15cce6.  `@@c.c.b.k` @type ^`int` := v7;
  #L15ccea.  @monitorexit v0
  #L15ccec.  goto L15cd3e;
  #L15ccee.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15ccf0.  @monitorexit v0
  #L15ccf2.  throw v7;
  #L15ccf4.  v0:= length @variable v7;
  #L15ccf6.  v6:= 4I;
  #L15ccf8.  if v0 != v6 then goto L15cd3e;
  #L15ccfc.  v0:= constclass @type ^`c.c.b` @kind object;
  #L15cd00.  @monitorenter v0
  #L15cd02.  v6:= `@@c.c.b.i` @type ^`int`;
  #L15cd06.  if v6 >= v4 then goto L15cd34;
  #L15cd0a.  v4:= `@@c.c.b.h` @type ^`java.lang.Object`[] @kind object;
  #L15cd0e.  v8[v3]:= v4 @kind object;
  #L15cd12.  v8[v5]:= v7 @kind object;
  #L15cd16.  v9:= v9 - v5 @kind int;
  #L15cd18.  if v9 < v2 then goto L15cd26;
  #L15cd1c.  v8[v9]:= v1 @kind object;
  #L15cd20.  v9:= v9 + -1;
  #L15cd24.  goto L15cd18;
  #L15cd26.  `@@c.c.b.h` @type ^`java.lang.Object`[] := v8 @kind object;
  #L15cd2a.  v7:= `@@c.c.b.i` @type ^`int`;
  #L15cd2e.  v7:= v7 + v5 @kind int;
  #L15cd30.  `@@c.c.b.i` @type ^`int` := v7;
  #L15cd34.  @monitorexit v0
  #L15cd36.  goto L15cd3e;
  #L15cd38.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15cd3a.  @monitorexit v0
  #L15cd3c.  throw v7;
  #L15cd3e.  return @kind void;
  catch `java.lang.Throwable` @[L15ccb8..L15ccf2] goto L15ccee;
  catch `java.lang.Throwable` @[L15cd02..L15cd3c] goto L15cd38;
}
procedure `c.c.f` `d`(`c.c.b` v1 @kind this) @signature `Lc/c/b;.d:()Lc/c/f;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L15c384.  v0:= v1.`c.c.b.e` @type ^`c.c.f` @kind object;
  #L15c388.  if v0 != 0 then goto L15c39a;
  #L15c38c.  v0:= new `c.c.b$a`;
  #L15c390.  call `<init>`(v0, v1) @signature `Lc/c/b$a;.<init>:(Lc/c/b;)V` @kind direct;
  #L15c396.  v1.`c.c.b.e` @type ^`c.c.f` := v0 @kind object;
  #L15c39a.  v0:= v1.`c.c.b.e` @type ^`c.c.f` @kind object;
  #L15c39e.  return v0 @kind object;
}
procedure `int` `f`(`c.c.b` v4 @kind this) @signature `Lc/c/b;.f:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15c794.  v0:= v4.`c.c.b.d` @type ^`int`;
  #L15c798.  if v0 != 0 then goto L15c7a0;
  #L15c79c.  v0:= -1I;
  #L15c79e.  return v0;
  #L15c7a0.  v1:= v4.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c7a4.  v2:= 0I;
  #L15c7a6.  call temp:= `a`(v1, v0, v2) @signature `Lc/c/c;.a:([III)I` @kind static;
  #L15c7ac.  v1:= temp;
  #L15c7ae.  if v1 >= 0 then goto L15c7b4;
  #L15c7b2.  return v1;
  #L15c7b4.  v2:= v4.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c7b8.  v2:= v2[v1] @kind object;
  #L15c7bc.  if v2 != 0 then goto L15c7c2;
  #L15c7c0.  return v1;
  #L15c7c2.  v2:= v1 + 1;
  #L15c7c6.  if v2 >= v0 then goto L15c7ea;
  #L15c7ca.  v3:= v4.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c7ce.  v3:= v3[v2];
  #L15c7d2.  if v3 != 0 then goto L15c7ea;
  #L15c7d6.  v3:= v4.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c7da.  v3:= v3[v2] @kind object;
  #L15c7de.  if v3 != 0 then goto L15c7e4;
  #L15c7e2.  return v2;
  #L15c7e4.  v2:= v2 + 1;
  #L15c7e8.  goto L15c7c6;
  #L15c7ea.  v1:= v1 + -1;
  #L15c7ee.  if v1 < 0 then goto L15c812;
  #L15c7f2.  v0:= v4.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c7f6.  v0:= v0[v1];
  #L15c7fa.  if v0 != 0 then goto L15c812;
  #L15c7fe.  v0:= v4.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c802.  v0:= v0[v1] @kind object;
  #L15c806.  if v0 != 0 then goto L15c80c;
  #L15c80a.  return v1;
  #L15c80c.  v1:= v1 + -1;
  #L15c810.  goto L15c7ee;
  #L15c812.  v0:= ~v2 @kind int;
  #L15c814.  return v0;
}
procedure `void` `k`(`c.c.b` v5 @kind this, `int` v6 ) @signature `Lc/c/b;.k:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15cb1c.  v0:= 0I;
  #L15cb1e.  v1:= 0I;
  #L15cb20.  v2:= 1I;
  #L15cb22.  v3:= 8I;
  #L15cb26.  if v6 != v3 then goto L15cb78;
  #L15cb2a.  v3:= constclass @type ^`c.c.b` @kind object;
  #L15cb2e.  @monitorenter v3
  #L15cb30.  v4:= `@@c.c.b.j` @type ^`java.lang.Object`[] @kind object;
  #L15cb34.  if v4 == 0 then goto L15cb6e;
  #L15cb38.  v6:= `@@c.c.b.j` @type ^`java.lang.Object`[] @kind object;
  #L15cb3c.  v5.`c.c.b.c` @type ^`java.lang.Object`[] := v6 @kind object;
  #L15cb40.  v4:= v6[v1] @kind object;
  #L15cb44.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L15cb48.  `@@c.c.b.j` @type ^`java.lang.Object`[] := v4 @kind object;
  #L15cb4c.  v4:= v6[v2] @kind object;
  #L15cb50.  v4:= (`int`[]) v4 @kind object;
  #L15cb54.  v5.`c.c.b.b` @type ^`int`[] := v4 @kind object;
  #L15cb58.  v6[v2]:= v0 @kind object;
  #L15cb5c.  v6[v1]:= v0 @kind object;
  #L15cb60.  v6:= `@@c.c.b.k` @type ^`int`;
  #L15cb64.  v6:= v6 - v2 @kind int;
  #L15cb66.  `@@c.c.b.k` @type ^`int` := v6;
  #L15cb6a.  @monitorexit v3
  #L15cb6c.  return @kind void;
  #L15cb6e.  @monitorexit v3
  #L15cb70.  goto L15cbcc;
  #L15cb72.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15cb74.  @monitorexit v3
  #L15cb76.  throw v6;
  #L15cb78.  v3:= 4I;
  #L15cb7a.  if v6 != v3 then goto L15cbcc;
  #L15cb7e.  v3:= constclass @type ^`c.c.b` @kind object;
  #L15cb82.  @monitorenter v3
  #L15cb84.  v4:= `@@c.c.b.h` @type ^`java.lang.Object`[] @kind object;
  #L15cb88.  if v4 == 0 then goto L15cbc2;
  #L15cb8c.  v6:= `@@c.c.b.h` @type ^`java.lang.Object`[] @kind object;
  #L15cb90.  v5.`c.c.b.c` @type ^`java.lang.Object`[] := v6 @kind object;
  #L15cb94.  v4:= v6[v1] @kind object;
  #L15cb98.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L15cb9c.  `@@c.c.b.h` @type ^`java.lang.Object`[] := v4 @kind object;
  #L15cba0.  v4:= v6[v2] @kind object;
  #L15cba4.  v4:= (`int`[]) v4 @kind object;
  #L15cba8.  v5.`c.c.b.b` @type ^`int`[] := v4 @kind object;
  #L15cbac.  v6[v2]:= v0 @kind object;
  #L15cbb0.  v6[v1]:= v0 @kind object;
  #L15cbb4.  v6:= `@@c.c.b.i` @type ^`int`;
  #L15cbb8.  v6:= v6 - v2 @kind int;
  #L15cbba.  `@@c.c.b.i` @type ^`int` := v6;
  #L15cbbe.  @monitorexit v3
  #L15cbc0.  return @kind void;
  #L15cbc2.  @monitorexit v3
  #L15cbc4.  goto L15cbcc;
  #L15cbc6.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15cbc8.  @monitorexit v3
  #L15cbca.  throw v6;
  #L15cbcc.  v0:= new `int`[v6];
  #L15cbd0.  v5.`c.c.b.b` @type ^`int`[] := v0 @kind object;
  #L15cbd4.  v6:= new `java.lang.Object`[v6];
  #L15cbd8.  v5.`c.c.b.c` @type ^`java.lang.Object`[] := v6 @kind object;
  #L15cbdc.  return @kind void;
  catch `java.lang.Throwable` @[L15cb30..L15cb76] goto L15cb72;
  catch `java.lang.Throwable` @[L15cb84..L15cbca] goto L15cbc6;
}
procedure `boolean` `add`(`c.c.b` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lc/c/b;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L15c3b0.  v0:= 0I;
  #L15c3b2.  if v9 != 0 then goto L15c3c2;
  #L15c3b6.  call temp:= `f`(v8) @signature `Lc/c/b;.f:()I` @kind direct;
  #L15c3bc.  v1:= temp;
  #L15c3be.  v2:= 0I;
  #L15c3c0.  goto L15c3d8;
  #L15c3c2.  call temp:= `hashCode`(v9) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L15c3c8.  v1:= temp;
  #L15c3ca.  call temp:= `a`(v8, v9, v1) @signature `Lc/c/b;.a:(Ljava/lang/Object;I)I` @kind direct;
  #L15c3d0.  v2:= temp;
  #L15c3d2.  v7:= v2;
  #L15c3d4.  v2:= v1;
  #L15c3d6.  v1:= v7;
  #L15c3d8.  if v1 < 0 then goto L15c3de;
  #L15c3dc.  return v0;
  #L15c3de.  v1:= ~v1 @kind int;
  #L15c3e0.  v3:= v8.`c.c.b.d` @type ^`int`;
  #L15c3e4.  v4:= v8.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c3e8.  v4:= length @variable v4;
  #L15c3ea.  if v3 < v4 then goto L15c43e;
  #L15c3ee.  v4:= 4I;
  #L15c3f0.  v5:= 8I;
  #L15c3f4.  if v3 < v5 then goto L15c400;
  #L15c3f8.  v4:= v3 ^> 1;
  #L15c3fc.  v4:= v4 + v3 @kind int;
  #L15c3fe.  goto L15c408;
  #L15c400.  if v3 < v4 then goto L15c408;
  #L15c404.  v4:= 8I;
  #L15c408.  v3:= v8.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c40c.  v5:= v8.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c410.  call `k`(v8, v4) @signature `Lc/c/b;.k:(I)V` @kind direct;
  #L15c416.  v4:= v8.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c41a.  v6:= length @variable v4;
  #L15c41c.  if v6 <= 0 then goto L15c434;
  #L15c420.  v6:= length @variable v3;
  #L15c422.  call `arraycopy`(v3, v0, v4, v0, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15c428.  v4:= v8.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c42c.  v6:= length @variable v5;
  #L15c42e.  call `arraycopy`(v5, v0, v4, v0, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15c434.  v0:= v8.`c.c.b.d` @type ^`int`;
  #L15c438.  call `a`(v3, v5, v0) @signature `Lc/c/b;.a:([I[Ljava/lang/Object;I)V` @kind static;
  #L15c43e.  v0:= v8.`c.c.b.d` @type ^`int`;
  #L15c442.  if v1 >= v0 then goto L15c466;
  #L15c446.  v3:= v8.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c44a.  v4:= v1 + 1;
  #L15c44e.  v0:= v0 - v1 @kind int;
  #L15c450.  call `arraycopy`(v3, v1, v3, v4, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15c456.  v0:= v8.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c45a.  v3:= v8.`c.c.b.d` @type ^`int`;
  #L15c45e.  v3:= v3 - v1 @kind int;
  #L15c460.  call `arraycopy`(v0, v1, v0, v4, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15c466.  v0:= v8.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c46a.  v0[v1]:= v2;
  #L15c46e.  v0:= v8.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c472.  v0[v1]:= v9 @kind object;
  #L15c476.  v9:= v8.`c.c.b.d` @type ^`int`;
  #L15c47a.  v0:= 1I;
  #L15c47c.  v9:= v9 + v0 @kind int;
  #L15c47e.  v8.`c.c.b.d` @type ^`int` := v9;
  #L15c482.  return v0;
}
procedure `boolean` `addAll`(`c.c.b` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lc/c/b;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15c494.  v0:= v2.`c.c.b.d` @type ^`int`;
  #L15c498.  call temp:= `size`(v3) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L15c49e.  v1:= temp;
  #L15c4a0.  v0:= v0 + v1 @kind int;
  #L15c4a2.  call `h`(v2, v0) @signature `Lc/c/b;.h:(I)V` @kind virtual;
  #L15c4a8.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15c4ae.  v3:= temp @kind object;
  #L15c4b0.  v0:= 0I;
  #L15c4b2.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15c4b8.  v1:= temp;
  #L15c4ba.  if v1 == 0 then goto L15c4d2;
  #L15c4be.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15c4c4.  v1:= temp @kind object;
  #L15c4c6.  call temp:= `add`(v2, v1) @signature `Lc/c/b;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L15c4cc.  v1:= temp;
  #L15c4ce.  v0:= v0 ^| v1 @kind int;
  #L15c4d0.  goto L15c4b2;
  #L15c4d2.  return v0;
}
procedure `void` `clear`(`c.c.b` v3 @kind this) @signature `Lc/c/b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15cc08.  v0:= v3.`c.c.b.d` @type ^`int`;
  #L15cc0c.  if v0 == 0 then goto L15cc34;
  #L15cc10.  v1:= v3.`c.c.b.b` @type ^`int`[] @kind object;
  #L15cc14.  v2:= v3.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15cc18.  call `a`(v1, v2, v0) @signature `Lc/c/b;.a:([I[Ljava/lang/Object;I)V` @kind static;
  #L15cc1e.  v0:= `@@c.c.b.f` @type ^`int`[] @kind object;
  #L15cc22.  v3.`c.c.b.b` @type ^`int`[] := v0 @kind object;
  #L15cc26.  v0:= `@@c.c.b.g` @type ^`java.lang.Object`[] @kind object;
  #L15cc2a.  v3.`c.c.b.c` @type ^`java.lang.Object`[] := v0 @kind object;
  #L15cc2e.  v0:= 0I;
  #L15cc30.  v3.`c.c.b.d` @type ^`int` := v0;
  #L15cc34.  return @kind void;
}
procedure `boolean` `contains`(`c.c.b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/c/b;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L15c4e4.  call temp:= `indexOf`(v0, v1) @signature `Lc/c/b;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L15c4ea.  v1:= temp;
  #L15c4ec.  if v1 < 0 then goto L15c4f4;
  #L15c4f0.  v1:= 1I;
  #L15c4f2.  goto L15c4f6;
  #L15c4f4.  v1:= 0I;
  #L15c4f6.  return v1;
}
procedure `boolean` `containsAll`(`c.c.b` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lc/c/b;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c508.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15c50e.  v2:= temp @kind object;
  #L15c510.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15c516.  v0:= temp;
  #L15c518.  if v0 == 0 then goto L15c534;
  #L15c51c.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15c522.  v0:= temp @kind object;
  #L15c524.  call temp:= `contains`(v1, v0) @signature `Lc/c/b;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L15c52a.  v0:= temp;
  #L15c52c.  if v0 != 0 then goto L15c510;
  #L15c530.  v2:= 0I;
  #L15c532.  return v2;
  #L15c534.  v2:= 1I;
  #L15c536.  return v2;
}
procedure `boolean` `equals`(`c.c.b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lc/c/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15c548.  v0:= 1I;
  #L15c54a.  if v4 != v5 then goto L15c550;
  #L15c54e.  return v0;
  #L15c550.  v1:= instanceof @variable v5 @type ^`java.util.Set` @kind boolean;
  #L15c554.  v2:= 0I;
  #L15c556.  if v1 == 0 then goto L15c59c;
  #L15c55a.  v5:= (`java.util.Set`) v5 @kind object;
  #L15c55e.  call temp:= `size`(v4) @signature `Lc/c/b;.size:()I` @kind virtual;
  #L15c564.  v1:= temp;
  #L15c566.  call temp:= `size`(v5) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L15c56c.  v3:= temp;
  #L15c56e.  if v1 == v3 then goto L15c574;
  #L15c572.  return v2;
  #L15c574.  v1:= 0I;
  #L15c576.  v3:= v4.`c.c.b.d` @type ^`int`;
  #L15c57a.  if v1 >= v3 then goto L15c59a;
  #L15c57e.  call temp:= `j`(v4, v1) @signature `Lc/c/b;.j:(I)Ljava/lang/Object;` @kind virtual;
  #L15c584.  v3:= temp @kind object;
  #L15c586.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L15c58c.  v3:= temp;
  #L15c58e.  if v3 != 0 then goto L15c594;
  #L15c592.  return v2;
  #L15c594.  v1:= v1 + 1;
  #L15c598.  goto L15c576;
  #L15c59a.  return v0;
  #L15c59c.  return v2;
  catch `java.lang.NullPointerException` @[L15c576..L15c58e] goto L15c59c;
  catch `java.lang.ClassCastException` @[L15c576..L15c58e] goto L15c59c;
}
procedure `void` `h`(`c.c.b` v4 @kind this, `int` v5 ) @signature `Lc/c/b;.h:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15cc48.  v0:= v4.`c.c.b.b` @type ^`int`[] @kind object;
  #L15cc4c.  v1:= length @variable v0;
  #L15cc4e.  if v1 >= v5 then goto L15cc88;
  #L15cc52.  v1:= v4.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15cc56.  call `k`(v4, v5) @signature `Lc/c/b;.k:(I)V` @kind direct;
  #L15cc5c.  v5:= v4.`c.c.b.d` @type ^`int`;
  #L15cc60.  if v5 <= 0 then goto L15cc7e;
  #L15cc64.  v2:= v4.`c.c.b.b` @type ^`int`[] @kind object;
  #L15cc68.  v3:= 0I;
  #L15cc6a.  call `arraycopy`(v0, v3, v2, v3, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15cc70.  v5:= v4.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15cc74.  v2:= v4.`c.c.b.d` @type ^`int`;
  #L15cc78.  call `arraycopy`(v1, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15cc7e.  v5:= v4.`c.c.b.d` @type ^`int`;
  #L15cc82.  call `a`(v0, v1, v5) @signature `Lc/c/b;.a:([I[Ljava/lang/Object;I)V` @kind static;
  #L15cc88.  return @kind void;
}
procedure `int` `hashCode`(`c.c.b` v5 @kind this) @signature `Lc/c/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15c68c.  v0:= v5.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c690.  v1:= v5.`c.c.b.d` @type ^`int`;
  #L15c694.  v2:= 0I;
  #L15c696.  v3:= 0I;
  #L15c698.  if v2 >= v1 then goto L15c6a8;
  #L15c69c.  v4:= v0[v2];
  #L15c6a0.  v3:= v3 + v4 @kind int;
  #L15c6a2.  v2:= v2 + 1;
  #L15c6a6.  goto L15c698;
  #L15c6a8.  return v3;
}
procedure `java.lang.Object` `i`(`c.c.b` v7 @kind this, `int` v8 ) @signature `Lc/c/b;.i:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L15c840.  v0:= v7.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c844.  v1:= v0[v8] @kind object;
  #L15c848.  v2:= v7.`c.c.b.d` @type ^`int`;
  #L15c84c.  v3:= 0I;
  #L15c84e.  v4:= 1I;
  #L15c850.  if v2 > v4 then goto L15c874;
  #L15c854.  v8:= v7.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c858.  call `a`(v8, v0, v2) @signature `Lc/c/b;.a:([I[Ljava/lang/Object;I)V` @kind static;
  #L15c85e.  v8:= `@@c.c.b.f` @type ^`int`[] @kind object;
  #L15c862.  v7.`c.c.b.b` @type ^`int`[] := v8 @kind object;
  #L15c866.  v8:= `@@c.c.b.g` @type ^`java.lang.Object`[] @kind object;
  #L15c86a.  v7.`c.c.b.c` @type ^`java.lang.Object`[] := v8 @kind object;
  #L15c86e.  v7.`c.c.b.d` @type ^`int` := v3;
  #L15c872.  goto L15c932;
  #L15c874.  v0:= v7.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c878.  v5:= length @variable v0;
  #L15c87a.  v6:= 8I;
  #L15c87e.  if v5 <= v6 then goto L15c8f2;
  #L15c882.  v0:= length @variable v0;
  #L15c884.  v0:= v0 / 3;
  #L15c888.  if v2 >= v0 then goto L15c8f2;
  #L15c88c.  if v2 <= v6 then goto L15c898;
  #L15c890.  v0:= v2 ^> 1;
  #L15c894.  v6:= v2 + v0 @kind int;
  #L15c898.  v0:= v7.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c89c.  v2:= v7.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c8a0.  call `k`(v7, v6) @signature `Lc/c/b;.k:(I)V` @kind direct;
  #L15c8a6.  v5:= v7.`c.c.b.d` @type ^`int`;
  #L15c8aa.  v5:= v5 - v4 @kind int;
  #L15c8ac.  v7.`c.c.b.d` @type ^`int` := v5;
  #L15c8b0.  if v8 <= 0 then goto L15c8c8;
  #L15c8b4.  v4:= v7.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c8b8.  call `arraycopy`(v0, v3, v4, v3, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15c8be.  v4:= v7.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c8c2.  call `arraycopy`(v2, v3, v4, v3, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15c8c8.  v3:= v7.`c.c.b.d` @type ^`int`;
  #L15c8cc.  if v8 >= v3 then goto L15c932;
  #L15c8d0.  v4:= v8 + 1;
  #L15c8d4.  v5:= v7.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c8d8.  v3:= v3 - v8 @kind int;
  #L15c8da.  call `arraycopy`(v0, v4, v5, v8, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15c8e0.  v0:= v7.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c8e4.  v3:= v7.`c.c.b.d` @type ^`int`;
  #L15c8e8.  v3:= v3 - v8 @kind int;
  #L15c8ea.  call `arraycopy`(v2, v4, v0, v8, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15c8f0.  goto L15c932;
  #L15c8f2.  v0:= v7.`c.c.b.d` @type ^`int`;
  #L15c8f6.  v0:= v0 - v4 @kind int;
  #L15c8f8.  v7.`c.c.b.d` @type ^`int` := v0;
  #L15c8fc.  v0:= v7.`c.c.b.d` @type ^`int`;
  #L15c900.  if v8 >= v0 then goto L15c924;
  #L15c904.  v2:= v7.`c.c.b.b` @type ^`int`[] @kind object;
  #L15c908.  v3:= v8 + 1;
  #L15c90c.  v0:= v0 - v8 @kind int;
  #L15c90e.  call `arraycopy`(v2, v3, v2, v8, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15c914.  v0:= v7.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c918.  v2:= v7.`c.c.b.d` @type ^`int`;
  #L15c91c.  v2:= v2 - v8 @kind int;
  #L15c91e.  call `arraycopy`(v0, v3, v0, v8, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15c924.  v8:= v7.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c928.  v0:= v7.`c.c.b.d` @type ^`int`;
  #L15c92c.  v2:= 0I;
  #L15c92e.  v8[v0]:= v2 @kind object;
  #L15c932.  return v1 @kind object;
}
procedure `int` `indexOf`(`c.c.b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/c/b;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c6bc.  if v2 != 0 then goto L15c6ca;
  #L15c6c0.  call temp:= `f`(v1) @signature `Lc/c/b;.f:()I` @kind direct;
  #L15c6c6.  v2:= temp;
  #L15c6c8.  goto L15c6da;
  #L15c6ca.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L15c6d0.  v0:= temp;
  #L15c6d2.  call temp:= `a`(v1, v2, v0) @signature `Lc/c/b;.a:(Ljava/lang/Object;I)I` @kind direct;
  #L15c6d8.  v2:= temp;
  #L15c6da.  return v2;
}
procedure `boolean` `isEmpty`(`c.c.b` v1 @kind this) @signature `Lc/c/b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c5c0.  v0:= v1.`c.c.b.d` @type ^`int`;
  #L15c5c4.  if v0 > 0 then goto L15c5cc;
  #L15c5c8.  v0:= 1I;
  #L15c5ca.  goto L15c5ce;
  #L15c5cc.  v0:= 0I;
  #L15c5ce.  return v0;
}
procedure `java.util.Iterator` `iterator`(`c.c.b` v1 @kind this) @signature `Lc/c/b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ca74.  call temp:= `d`(v1) @signature `Lc/c/b;.d:()Lc/c/f;` @kind direct;
  #L15ca7a.  v0:= temp @kind object;
  #L15ca7c.  call temp:= `e`(v0) @signature `Lc/c/f;.e:()Ljava/util/Set;` @kind virtual;
  #L15ca82.  v0:= temp @kind object;
  #L15ca84.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15ca8a.  v0:= temp @kind object;
  #L15ca8c.  return v0 @kind object;
}
procedure `java.lang.Object` `j`(`c.c.b` v1 @kind this, `int` v2 ) @signature `Lc/c/b;.j:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c944.  v0:= v1.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c948.  v2:= v0[v2] @kind object;
  #L15c94c.  return v2 @kind object;
}
procedure `boolean` `remove`(`c.c.b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/c/b;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L15c5e0.  call temp:= `indexOf`(v0, v1) @signature `Lc/c/b;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L15c5e6.  v1:= temp;
  #L15c5e8.  if v1 < 0 then goto L15c5f6;
  #L15c5ec.  call temp:= `i`(v0, v1) @signature `Lc/c/b;.i:(I)Ljava/lang/Object;` @kind virtual;
  #L15c5f2.  v1:= 1I;
  #L15c5f4.  return v1;
  #L15c5f6.  v1:= 0I;
  #L15c5f8.  return v1;
}
procedure `boolean` `removeAll`(`c.c.b` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lc/c/b;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15c60c.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15c612.  v3:= temp @kind object;
  #L15c614.  v0:= 0I;
  #L15c616.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15c61c.  v1:= temp;
  #L15c61e.  if v1 == 0 then goto L15c636;
  #L15c622.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15c628.  v1:= temp @kind object;
  #L15c62a.  call temp:= `remove`(v2, v1) @signature `Lc/c/b;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L15c630.  v1:= temp;
  #L15c632.  v0:= v0 ^| v1 @kind int;
  #L15c634.  goto L15c616;
  #L15c636.  return v0;
}
procedure `boolean` `retainAll`(`c.c.b` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lc/c/b;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15c648.  v0:= v4.`c.c.b.d` @type ^`int`;
  #L15c64c.  v1:= 1I;
  #L15c64e.  v0:= v0 - v1 @kind int;
  #L15c650.  v2:= 0I;
  #L15c652.  if v0 < 0 then goto L15c678;
  #L15c656.  v3:= v4.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c65a.  v3:= v3[v0] @kind object;
  #L15c65e.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L15c664.  v3:= temp;
  #L15c666.  if v3 != 0 then goto L15c672;
  #L15c66a.  call temp:= `i`(v4, v0) @signature `Lc/c/b;.i:(I)Ljava/lang/Object;` @kind virtual;
  #L15c670.  v2:= 1I;
  #L15c672.  v0:= v0 + -1;
  #L15c676.  goto L15c652;
  #L15c678.  return v2;
}
procedure `int` `size`(`c.c.b` v1 @kind this) @signature `Lc/c/b;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c828.  v0:= v1.`c.c.b.d` @type ^`int`;
  #L15c82c.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`c.c.b` v4 @kind this) @signature `Lc/c/b;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15c960.  v0:= v4.`c.c.b.d` @type ^`int`;
  #L15c964.  v1:= new `java.lang.Object`[v0];
  #L15c968.  v2:= v4.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c96c.  v3:= 0I;
  #L15c96e.  call `arraycopy`(v2, v3, v1, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15c974.  return v1 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`c.c.b` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Lc/c/b;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15c988.  v0:= length @variable v4;
  #L15c98a.  v1:= v3.`c.c.b.d` @type ^`int`;
  #L15c98e.  if v0 >= v1 then goto L15c9b2;
  #L15c992.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L15c998.  v4:= temp @kind object;
  #L15c99a.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L15c9a0.  v4:= temp @kind object;
  #L15c9a2.  v0:= v3.`c.c.b.d` @type ^`int`;
  #L15c9a6.  call temp:= `newInstance`(v4, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L15c9ac.  v4:= temp @kind object;
  #L15c9ae.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L15c9b2.  v0:= v3.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c9b6.  v1:= v3.`c.c.b.d` @type ^`int`;
  #L15c9ba.  v2:= 0I;
  #L15c9bc.  call `arraycopy`(v0, v2, v4, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15c9c2.  v0:= length @variable v4;
  #L15c9c4.  v1:= v3.`c.c.b.d` @type ^`int`;
  #L15c9c8.  if v0 <= v1 then goto L15c9d2;
  #L15c9cc.  v0:= 0I;
  #L15c9ce.  v4[v1]:= v0 @kind object;
  #L15c9d2.  return v4 @kind object;
}
procedure `java.lang.String` `toString`(`c.c.b` v3 @kind this) @signature `Lc/c/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15c9e4.  call temp:= `isEmpty`(v3) @signature `Lc/c/b;.isEmpty:()Z` @kind virtual;
  #L15c9ea.  v0:= temp;
  #L15c9ec.  if v0 == 0 then goto L15c9f6;
  #L15c9f0.  v0:= "{}" @kind object;
  #L15c9f4.  return v0 @kind object;
  #L15c9f6.  v0:= new `java.lang.StringBuilder`;
  #L15c9fa.  v1:= v3.`c.c.b.d` @type ^`int`;
  #L15c9fe.  v1:= v1 * 14;
  #L15ca02.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L15ca08.  v1:= 123I;
  #L15ca0c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ca12.  v1:= 0I;
  #L15ca14.  v2:= v3.`c.c.b.d` @type ^`int`;
  #L15ca18.  if v1 >= v2 then goto L15ca4e;
  #L15ca1c.  if v1 <= 0 then goto L15ca2a;
  #L15ca20.  v2:= ", " @kind object;
  #L15ca24.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ca2a.  call temp:= `j`(v3, v1) @signature `Lc/c/b;.j:(I)Ljava/lang/Object;` @kind virtual;
  #L15ca30.  v2:= temp @kind object;
  #L15ca32.  if v2 == v3 then goto L15ca3e;
  #L15ca36.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ca3c.  goto L15ca48;
  #L15ca3e.  v2:= "(this Set)" @kind object;
  #L15ca42.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ca48.  v1:= v1 + 1;
  #L15ca4c.  goto L15ca14;
  #L15ca4e.  v1:= 125I;
  #L15ca52.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ca58.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15ca5e.  v0:= temp @kind object;
  #L15ca60.  return v0 @kind object;
}
