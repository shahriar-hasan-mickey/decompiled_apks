record `c.c.d` @kind class @AccessFlag PUBLIC extends `java.lang.Cloneable` @kind interface {
  `boolean` `c.c.d.b` @AccessFlag PRIVATE;
  `long`[] `c.c.d.c` @AccessFlag PRIVATE;
  `java.lang.Object`[] `c.c.d.d` @AccessFlag PRIVATE;
  `int` `c.c.d.e` @AccessFlag PRIVATE;
}
global `java.lang.Object` `@@c.c.d.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lc/c/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15d0f0.  v0:= new `java.lang.Object`;
  #L15d0f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15d0fa.  `@@c.c.d.f` @type ^`java.lang.Object` := v0 @kind object;
  #L15d0fe.  return @kind void;
}
procedure `void` `<init>`(`c.c.d` v1 @kind this) @signature `Lc/c/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15d110.  v0:= 10I;
  #L15d114.  call `<init>`(v1, v0) @signature `Lc/c/d;.<init>:(I)V` @kind direct;
  #L15d11a.  return @kind void;
}
procedure `void` `<init>`(`c.c.d` v1 @kind this, `int` v2 ) @signature `Lc/c/d;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15d12c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15d132.  v0:= 0I;
  #L15d134.  v1.`c.c.d.b` @type ^`boolean` := v0 @kind boolean;
  #L15d138.  if v2 != 0 then goto L15d14e;
  #L15d13c.  v2:= `@@c.c.c.b` @type ^`long`[] @kind object;
  #L15d140.  v1.`c.c.d.c` @type ^`long`[] := v2 @kind object;
  #L15d144.  v2:= `@@c.c.c.c` @type ^`java.lang.Object`[] @kind object;
  #L15d148.  v1.`c.c.d.d` @type ^`java.lang.Object`[] := v2 @kind object;
  #L15d14c.  goto L15d166;
  #L15d14e.  call temp:= `c`(v2) @signature `Lc/c/c;.c:(I)I` @kind static;
  #L15d154.  v2:= temp;
  #L15d156.  v0:= new `long`[v2];
  #L15d15a.  v1.`c.c.d.c` @type ^`long`[] := v0 @kind object;
  #L15d15e.  v2:= new `java.lang.Object`[v2];
  #L15d162.  v1.`c.c.d.d` @type ^`java.lang.Object`[] := v2 @kind object;
  #L15d166.  return @kind void;
}
procedure `void` `e`(`c.c.d` v9 @kind this) @signature `Lc/c/d;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L15d260.  v0:= v9.`c.c.d.e` @type ^`int`;
  #L15d264.  v1:= v9.`c.c.d.c` @type ^`long`[] @kind object;
  #L15d268.  v2:= v9.`c.c.d.d` @type ^`java.lang.Object`[] @kind object;
  #L15d26c.  v3:= 0I;
  #L15d26e.  v4:= 0I;
  #L15d270.  v5:= 0I;
  #L15d272.  if v4 >= v0 then goto L15d2a2;
  #L15d276.  v6:= v2[v4] @kind object;
  #L15d27a.  v7:= `@@c.c.d.f` @type ^`java.lang.Object` @kind object;
  #L15d27e.  if v6 == v7 then goto L15d29c;
  #L15d282.  if v4 == v5 then goto L15d298;
  #L15d286.  v7:= v1[v4] @kind wide;
  #L15d28a.  v1[v5]:= v7 @kind wide;
  #L15d28e.  v2[v5]:= v6 @kind object;
  #L15d292.  v6:= 0I;
  #L15d294.  v2[v4]:= v6 @kind object;
  #L15d298.  v5:= v5 + 1;
  #L15d29c.  v4:= v4 + 1;
  #L15d2a0.  goto L15d272;
  #L15d2a2.  v9.`c.c.d.b` @type ^`boolean` := v3 @kind boolean;
  #L15d2a6.  v9.`c.c.d.e` @type ^`int` := v5;
  #L15d2aa.  return @kind void;
}
procedure `long` `a`(`c.c.d` v3 @kind this, `int` v4 ) @signature `Lc/c/d;.a:(I)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15d0c8.  v0:= v3.`c.c.d.b` @type ^`boolean` @kind boolean;
  #L15d0cc.  if v0 == 0 then goto L15d0d6;
  #L15d0d0.  call `e`(v3) @signature `Lc/c/d;.e:()V` @kind direct;
  #L15d0d6.  v0:= v3.`c.c.d.c` @type ^`long`[] @kind object;
  #L15d0da.  v1:= v0[v4] @kind wide;
  #L15d0de.  return v1 @kind wide;
}
procedure `java.lang.Object` `a`(`c.c.d` v1 @kind this, `long` v2 ) @signature `Lc/c/d;.a:(J)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15cf9c.  v0:= 0I;
  #L15cf9e.  call temp:= `b`(v1, v2, v0) @signature `Lc/c/d;.b:(JLjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15cfa4.  v2:= temp @kind object;
  #L15cfa6.  return v2 @kind object;
}
procedure `void` `a`(`c.c.d` v6 @kind this, `long` v7 , `java.lang.Object` v9 @kind object) @signature `Lc/c/d;.a:(JLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15d178.  v0:= v6.`c.c.d.e` @type ^`int`;
  #L15d17c.  if v0 == 0 then goto L15d19c;
  #L15d180.  v1:= v6.`c.c.d.c` @type ^`long`[] @kind object;
  #L15d184.  v0:= v0 + -1;
  #L15d188.  v0:= v1[v0] @kind wide;
  #L15d18c.  v2:= lcmp(v7, v0);
  #L15d190.  if v2 > 0 then goto L15d19c;
  #L15d194.  call `c`(v6, v7, v9) @signature `Lc/c/d;.c:(JLjava/lang/Object;)V` @kind virtual;
  #L15d19a.  return @kind void;
  #L15d19c.  v0:= v6.`c.c.d.b` @type ^`boolean` @kind boolean;
  #L15d1a0.  if v0 == 0 then goto L15d1b8;
  #L15d1a4.  v0:= v6.`c.c.d.e` @type ^`int`;
  #L15d1a8.  v1:= v6.`c.c.d.c` @type ^`long`[] @kind object;
  #L15d1ac.  v1:= length @variable v1;
  #L15d1ae.  if v0 < v1 then goto L15d1b8;
  #L15d1b2.  call `e`(v6) @signature `Lc/c/d;.e:()V` @kind direct;
  #L15d1b8.  v0:= v6.`c.c.d.e` @type ^`int`;
  #L15d1bc.  v1:= v6.`c.c.d.c` @type ^`long`[] @kind object;
  #L15d1c0.  v1:= length @variable v1;
  #L15d1c2.  if v0 < v1 then goto L15d1fc;
  #L15d1c6.  v1:= v0 + 1;
  #L15d1ca.  call temp:= `c`(v1) @signature `Lc/c/c;.c:(I)I` @kind static;
  #L15d1d0.  v1:= temp;
  #L15d1d2.  v2:= new `long`[v1];
  #L15d1d6.  v1:= new `java.lang.Object`[v1];
  #L15d1da.  v3:= v6.`c.c.d.c` @type ^`long`[] @kind object;
  #L15d1de.  v4:= length @variable v3;
  #L15d1e0.  v5:= 0I;
  #L15d1e2.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15d1e8.  v3:= v6.`c.c.d.d` @type ^`java.lang.Object`[] @kind object;
  #L15d1ec.  v4:= length @variable v3;
  #L15d1ee.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15d1f4.  v6.`c.c.d.c` @type ^`long`[] := v2 @kind object;
  #L15d1f8.  v6.`c.c.d.d` @type ^`java.lang.Object`[] := v1 @kind object;
  #L15d1fc.  v1:= v6.`c.c.d.c` @type ^`long`[] @kind object;
  #L15d200.  v1[v0]:= v7 @kind wide;
  #L15d204.  v7:= v6.`c.c.d.d` @type ^`java.lang.Object`[] @kind object;
  #L15d208.  v7[v0]:= v9 @kind object;
  #L15d20c.  v0:= v0 + 1;
  #L15d210.  v6.`c.c.d.e` @type ^`int` := v0;
  #L15d214.  return @kind void;
}
procedure `int` `b`(`c.c.d` v2 @kind this, `long` v3 ) @signature `Lc/c/d;.b:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15cf2c.  v0:= v2.`c.c.d.b` @type ^`boolean` @kind boolean;
  #L15cf30.  if v0 == 0 then goto L15cf3a;
  #L15cf34.  call `e`(v2) @signature `Lc/c/d;.e:()V` @kind direct;
  #L15cf3a.  v0:= v2.`c.c.d.c` @type ^`long`[] @kind object;
  #L15cf3e.  v1:= v2.`c.c.d.e` @type ^`int`;
  #L15cf42.  call temp:= `a`(v0, v1, v3) @signature `Lc/c/c;.a:([JIJ)I` @kind static;
  #L15cf48.  v3:= temp;
  #L15cf4a.  return v3;
}
procedure `java.lang.Object` `b`(`c.c.d` v1 @kind this, `int` v2 ) @signature `Lc/c/d;.b:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15cff8.  v0:= v1.`c.c.d.b` @type ^`boolean` @kind boolean;
  #L15cffc.  if v0 == 0 then goto L15d006;
  #L15d000.  call `e`(v1) @signature `Lc/c/d;.e:()V` @kind direct;
  #L15d006.  v0:= v1.`c.c.d.d` @type ^`java.lang.Object`[] @kind object;
  #L15d00a.  v2:= v0[v2] @kind object;
  #L15d00e.  return v2 @kind object;
}
procedure `java.lang.Object` `b`(`c.c.d` v2 @kind this, `long` v3 , `java.lang.Object` v5 @kind object) @signature `Lc/c/d;.b:(JLjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15cfb8.  v0:= v2.`c.c.d.c` @type ^`long`[] @kind object;
  #L15cfbc.  v1:= v2.`c.c.d.e` @type ^`int`;
  #L15cfc0.  call temp:= `a`(v0, v1, v3) @signature `Lc/c/c;.a:([JIJ)I` @kind static;
  #L15cfc6.  v3:= temp;
  #L15cfc8.  if v3 < 0 then goto L15cfe4;
  #L15cfcc.  v4:= v2.`c.c.d.d` @type ^`java.lang.Object`[] @kind object;
  #L15cfd0.  v0:= v4[v3] @kind object;
  #L15cfd4.  v1:= `@@c.c.d.f` @type ^`java.lang.Object` @kind object;
  #L15cfd8.  if v0 != v1 then goto L15cfde;
  #L15cfdc.  goto L15cfe4;
  #L15cfde.  v3:= v4[v3] @kind object;
  #L15cfe2.  return v3 @kind object;
  #L15cfe4.  return v5 @kind object;
}
procedure `void` `c`(`c.c.d` v5 @kind this) @signature `Lc/c/d;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15d228.  v0:= v5.`c.c.d.e` @type ^`int`;
  #L15d22c.  v1:= v5.`c.c.d.d` @type ^`java.lang.Object`[] @kind object;
  #L15d230.  v2:= 0I;
  #L15d232.  v3:= 0I;
  #L15d234.  if v3 >= v0 then goto L15d244;
  #L15d238.  v4:= 0I;
  #L15d23a.  v1[v3]:= v4 @kind object;
  #L15d23e.  v3:= v3 + 1;
  #L15d242.  goto L15d234;
  #L15d244.  v5.`c.c.d.e` @type ^`int` := v2;
  #L15d248.  v5.`c.c.d.b` @type ^`boolean` := v2 @kind boolean;
  #L15d24c.  return @kind void;
}
procedure `void` `c`(`c.c.d` v2 @kind this, `long` v3 ) @signature `Lc/c/d;.c:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15d3d0.  v0:= v2.`c.c.d.c` @type ^`long`[] @kind object;
  #L15d3d4.  v1:= v2.`c.c.d.e` @type ^`int`;
  #L15d3d8.  call temp:= `a`(v0, v1, v3) @signature `Lc/c/c;.a:([JIJ)I` @kind static;
  #L15d3de.  v3:= temp;
  #L15d3e0.  if v3 < 0 then goto L15d3fe;
  #L15d3e4.  v4:= v2.`c.c.d.d` @type ^`java.lang.Object`[] @kind object;
  #L15d3e8.  v0:= v4[v3] @kind object;
  #L15d3ec.  v1:= `@@c.c.d.f` @type ^`java.lang.Object` @kind object;
  #L15d3f0.  if v0 == v1 then goto L15d3fe;
  #L15d3f4.  v4[v3]:= v1 @kind object;
  #L15d3f8.  v3:= 1I;
  #L15d3fa.  v2.`c.c.d.b` @type ^`boolean` := v3 @kind boolean;
  #L15d3fe.  return @kind void;
}
procedure `void` `c`(`c.c.d` v6 @kind this, `long` v7 , `java.lang.Object` v9 @kind object) @signature `Lc/c/d;.c:(JLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15d2bc.  v0:= v6.`c.c.d.c` @type ^`long`[] @kind object;
  #L15d2c0.  v1:= v6.`c.c.d.e` @type ^`int`;
  #L15d2c4.  call temp:= `a`(v0, v1, v7) @signature `Lc/c/c;.a:([JIJ)I` @kind static;
  #L15d2ca.  v0:= temp;
  #L15d2cc.  if v0 < 0 then goto L15d2da;
  #L15d2d0.  v7:= v6.`c.c.d.d` @type ^`java.lang.Object`[] @kind object;
  #L15d2d4.  v7[v0]:= v9 @kind object;
  #L15d2d8.  goto L15d3bc;
  #L15d2da.  v0:= ~v0 @kind int;
  #L15d2dc.  v1:= v6.`c.c.d.e` @type ^`int`;
  #L15d2e0.  if v0 >= v1 then goto L15d302;
  #L15d2e4.  v1:= v6.`c.c.d.d` @type ^`java.lang.Object`[] @kind object;
  #L15d2e8.  v2:= v1[v0] @kind object;
  #L15d2ec.  v3:= `@@c.c.d.f` @type ^`java.lang.Object` @kind object;
  #L15d2f0.  if v2 != v3 then goto L15d302;
  #L15d2f4.  v2:= v6.`c.c.d.c` @type ^`long`[] @kind object;
  #L15d2f8.  v2[v0]:= v7 @kind wide;
  #L15d2fc.  v1[v0]:= v9 @kind object;
  #L15d300.  return @kind void;
  #L15d302.  v1:= v6.`c.c.d.b` @type ^`boolean` @kind boolean;
  #L15d306.  if v1 == 0 then goto L15d330;
  #L15d30a.  v1:= v6.`c.c.d.e` @type ^`int`;
  #L15d30e.  v2:= v6.`c.c.d.c` @type ^`long`[] @kind object;
  #L15d312.  v2:= length @variable v2;
  #L15d314.  if v1 < v2 then goto L15d330;
  #L15d318.  call `e`(v6) @signature `Lc/c/d;.e:()V` @kind direct;
  #L15d31e.  v0:= v6.`c.c.d.c` @type ^`long`[] @kind object;
  #L15d322.  v1:= v6.`c.c.d.e` @type ^`int`;
  #L15d326.  call temp:= `a`(v0, v1, v7) @signature `Lc/c/c;.a:([JIJ)I` @kind static;
  #L15d32c.  v0:= temp;
  #L15d32e.  v0:= ~v0 @kind int;
  #L15d330.  v1:= v6.`c.c.d.e` @type ^`int`;
  #L15d334.  v2:= v6.`c.c.d.c` @type ^`long`[] @kind object;
  #L15d338.  v2:= length @variable v2;
  #L15d33a.  if v1 < v2 then goto L15d374;
  #L15d33e.  v1:= v1 + 1;
  #L15d342.  call temp:= `c`(v1) @signature `Lc/c/c;.c:(I)I` @kind static;
  #L15d348.  v1:= temp;
  #L15d34a.  v2:= new `long`[v1];
  #L15d34e.  v1:= new `java.lang.Object`[v1];
  #L15d352.  v3:= v6.`c.c.d.c` @type ^`long`[] @kind object;
  #L15d356.  v4:= length @variable v3;
  #L15d358.  v5:= 0I;
  #L15d35a.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15d360.  v3:= v6.`c.c.d.d` @type ^`java.lang.Object`[] @kind object;
  #L15d364.  v4:= length @variable v3;
  #L15d366.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15d36c.  v6.`c.c.d.c` @type ^`long`[] := v2 @kind object;
  #L15d370.  v6.`c.c.d.d` @type ^`java.lang.Object`[] := v1 @kind object;
  #L15d374.  v1:= v6.`c.c.d.e` @type ^`int`;
  #L15d378.  v2:= v1 - v0 @kind int;
  #L15d37c.  if v2 == 0 then goto L15d3a0;
  #L15d380.  v2:= v6.`c.c.d.c` @type ^`long`[] @kind object;
  #L15d384.  v3:= v0 + 1;
  #L15d388.  v1:= v1 - v0 @kind int;
  #L15d38a.  call `arraycopy`(v2, v0, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15d390.  v1:= v6.`c.c.d.d` @type ^`java.lang.Object`[] @kind object;
  #L15d394.  v2:= v6.`c.c.d.e` @type ^`int`;
  #L15d398.  v2:= v2 - v0 @kind int;
  #L15d39a.  call `arraycopy`(v1, v0, v1, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15d3a0.  v1:= v6.`c.c.d.c` @type ^`long`[] @kind object;
  #L15d3a4.  v1[v0]:= v7 @kind wide;
  #L15d3a8.  v7:= v6.`c.c.d.d` @type ^`java.lang.Object`[] @kind object;
  #L15d3ac.  v7[v0]:= v9 @kind object;
  #L15d3b0.  v7:= v6.`c.c.d.e` @type ^`int`;
  #L15d3b4.  v7:= v7 + 1;
  #L15d3b8.  v6.`c.c.d.e` @type ^`int` := v7;
  #L15d3bc.  return @kind void;
}
procedure `c.c.d` `clone`(`c.c.d` v2 @kind this) @signature `Lc/c/d;.clone:()Lc/c/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15cec8.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L15cece.  v0:= temp @kind object;
  #L15ced0.  v0:= (`c.c.d`) v0 @kind object;
  #L15ced4.  v1:= v2.`c.c.d.c` @type ^`long`[] @kind object;
  #L15ced8.  call temp:= `clone`(v1) @signature `[J.clone:()Ljava/lang/Object;` @kind virtual;
  #L15cede.  v1:= temp @kind object;
  #L15cee0.  v1:= (`long`[]) v1 @kind object;
  #L15cee4.  v0.`c.c.d.c` @type ^`long`[] := v1 @kind object;
  #L15cee8.  v1:= v2.`c.c.d.d` @type ^`java.lang.Object`[] @kind object;
  #L15ceec.  call temp:= `clone`(v1) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L15cef2.  v1:= temp @kind object;
  #L15cef4.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L15cef8.  v0.`c.c.d.d` @type ^`java.lang.Object`[] := v1 @kind object;
  #L15cefc.  return v0 @kind object;
  #L15cefe.  v0:= Exception @type ^`java.lang.CloneNotSupportedException` @kind object;
  #L15cf00.  v1:= new `java.lang.AssertionError`;
  #L15cf04.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L15cf0a.  throw v1;
  catch `java.lang.CloneNotSupportedException` @[L15cec8..L15cefc] goto L15cefe;
}
procedure `java.lang.Object` `clone`(`c.c.d` v1 @kind this) @signature `Lc/c/d;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L15cf80.  call temp:= `clone`(v1) @signature `Lc/c/d;.clone:()Lc/c/d;` @kind virtual;
  #L15cf86.  v0:= temp @kind object;
  #L15cf88.  return v0 @kind object;
}
procedure `int` `d`(`c.c.d` v1 @kind this) @signature `Lc/c/d;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15cf5c.  v0:= v1.`c.c.d.b` @type ^`boolean` @kind boolean;
  #L15cf60.  if v0 == 0 then goto L15cf6a;
  #L15cf64.  call `e`(v1) @signature `Lc/c/d;.e:()V` @kind direct;
  #L15cf6a.  v0:= v1.`c.c.d.e` @type ^`int`;
  #L15cf6e.  return v0;
}
procedure `java.lang.String` `toString`(`c.c.d` v4 @kind this) @signature `Lc/c/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15d020.  call temp:= `d`(v4) @signature `Lc/c/d;.d:()I` @kind virtual;
  #L15d026.  v0:= temp;
  #L15d028.  if v0 > 0 then goto L15d032;
  #L15d02c.  v0:= "{}" @kind object;
  #L15d030.  return v0 @kind object;
  #L15d032.  v0:= new `java.lang.StringBuilder`;
  #L15d036.  v1:= v4.`c.c.d.e` @type ^`int`;
  #L15d03a.  v1:= v1 * 28;
  #L15d03e.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L15d044.  v1:= 123I;
  #L15d048.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d04e.  v1:= 0I;
  #L15d050.  v2:= v4.`c.c.d.e` @type ^`int`;
  #L15d054.  if v1 >= v2 then goto L15d0a2;
  #L15d058.  if v1 <= 0 then goto L15d066;
  #L15d05c.  v2:= ", " @kind object;
  #L15d060.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d066.  call temp:= `a`(v4, v1) @signature `Lc/c/d;.a:(I)J` @kind virtual;
  #L15d06c.  v2:= temp @kind wide;
  #L15d06e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d074.  v2:= 61I;
  #L15d078.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d07e.  call temp:= `b`(v4, v1) @signature `Lc/c/d;.b:(I)Ljava/lang/Object;` @kind virtual;
  #L15d084.  v2:= temp @kind object;
  #L15d086.  if v2 == v4 then goto L15d092;
  #L15d08a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d090.  goto L15d09c;
  #L15d092.  v2:= "(this Map)" @kind object;
  #L15d096.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d09c.  v1:= v1 + 1;
  #L15d0a0.  goto L15d050;
  #L15d0a2.  v1:= 125I;
  #L15d0a6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d0ac.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15d0b2.  v0:= temp @kind object;
  #L15d0b4.  return v0 @kind object;
}
