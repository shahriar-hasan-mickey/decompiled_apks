record `c.c.g` @kind class @AccessFlag PUBLIC {
  `int`[] `c.c.g.b` @AccessFlag ;
  `java.lang.Object`[] `c.c.g.c` @AccessFlag ;
  `int` `c.c.g.d` @AccessFlag ;
}
global `java.lang.Object`[] `@@c.c.g.e` @AccessFlag STATIC;
global `int` `@@c.c.g.f` @AccessFlag STATIC;
global `java.lang.Object`[] `@@c.c.g.g` @AccessFlag STATIC;
global `int` `@@c.c.g.h` @AccessFlag STATIC;
procedure `void` `<init>`(`c.c.g` v1 @kind this) @signature `Lc/c/g;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15ef5c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15ef62.  v0:= `@@c.c.c.a` @type ^`int`[] @kind object;
  #L15ef66.  v1.`c.c.g.b` @type ^`int`[] := v0 @kind object;
  #L15ef6a.  v0:= `@@c.c.c.c` @type ^`java.lang.Object`[] @kind object;
  #L15ef6e.  v1.`c.c.g.c` @type ^`java.lang.Object`[] := v0 @kind object;
  #L15ef72.  v0:= 0I;
  #L15ef74.  v1.`c.c.g.d` @type ^`int` := v0;
  #L15ef78.  return @kind void;
}
procedure `void` `<init>`(`c.c.g` v0 @kind this, `int` v1 ) @signature `Lc/c/g;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15efb0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15efb6.  if v1 != 0 then goto L15efcc;
  #L15efba.  v1:= `@@c.c.c.a` @type ^`int`[] @kind object;
  #L15efbe.  v0.`c.c.g.b` @type ^`int`[] := v1 @kind object;
  #L15efc2.  v1:= `@@c.c.c.c` @type ^`java.lang.Object`[] @kind object;
  #L15efc6.  v0.`c.c.g.c` @type ^`java.lang.Object`[] := v1 @kind object;
  #L15efca.  goto L15efd2;
  #L15efcc.  call `e`(v0, v1) @signature `Lc/c/g;.e:(I)V` @kind direct;
  #L15efd2.  v1:= 0I;
  #L15efd4.  v0.`c.c.g.d` @type ^`int` := v1;
  #L15efd8.  return @kind void;
}
procedure `void` `<init>`(`c.c.g` v0 @kind this, `c.c.g` v1 @kind object) @signature `Lc/c/g;.<init>:(Lc/c/g;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15ef8c.  call `<init>`(v0) @signature `Lc/c/g;.<init>:()V` @kind direct;
  #L15ef92.  if v1 == 0 then goto L15ef9c;
  #L15ef96.  call `a`(v0, v1) @signature `Lc/c/g;.a:(Lc/c/g;)V` @kind virtual;
  #L15ef9c.  return @kind void;
}
procedure `int` `a`(`int`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lc/c/g;.a:([III)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L15e884.  call temp:= `a`(v0, v1, v2) @signature `Lc/c/c;.a:([III)I` @kind static;
  #L15e88a.  v0:= temp;
  #L15e88c.  return v0;
  #L15e88e.  v0:= new `java.util.ConcurrentModificationException`;
  #L15e892.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L15e898.  throw v0;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L15e884..L15e88c] goto L15e88e;
}
procedure `void` `a`(`int`[] v8 @kind object, `java.lang.Object`[] v9 @kind object, `int` v10 ) @signature `Lc/c/g;.a:([I[Ljava/lang/Object;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L15f190.  v0:= constclass @type ^`c.c.g` @kind object;
  #L15f194.  v1:= length @variable v8;
  #L15f196.  v2:= 0I;
  #L15f198.  v3:= 2I;
  #L15f19a.  v4:= 0I;
  #L15f19c.  v5:= 10I;
  #L15f1a0.  v6:= 1I;
  #L15f1a2.  v7:= 8I;
  #L15f1a6.  if v1 != v7 then goto L15f1ec;
  #L15f1aa.  @monitorenter v0
  #L15f1ac.  v1:= `@@c.c.g.h` @type ^`int`;
  #L15f1b0.  if v1 >= v5 then goto L15f1e2;
  #L15f1b4.  v1:= `@@c.c.g.g` @type ^`java.lang.Object`[] @kind object;
  #L15f1b8.  v9[v4]:= v1 @kind object;
  #L15f1bc.  v9[v6]:= v8 @kind object;
  #L15f1c0.  v8:= v10 ^< 1;
  #L15f1c4.  v8:= v8 - v6 @kind int;
  #L15f1c6.  if v8 < v3 then goto L15f1d4;
  #L15f1ca.  v9[v8]:= v2 @kind object;
  #L15f1ce.  v8:= v8 + -1;
  #L15f1d2.  goto L15f1c6;
  #L15f1d4.  `@@c.c.g.g` @type ^`java.lang.Object`[] := v9 @kind object;
  #L15f1d8.  v8:= `@@c.c.g.h` @type ^`int`;
  #L15f1dc.  v8:= v8 + v6 @kind int;
  #L15f1de.  `@@c.c.g.h` @type ^`int` := v8;
  #L15f1e2.  @monitorexit v0
  #L15f1e4.  goto L15f236;
  #L15f1e6.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15f1e8.  @monitorexit v0
  #L15f1ea.  throw v8;
  #L15f1ec.  v1:= length @variable v8;
  #L15f1ee.  v7:= 4I;
  #L15f1f0.  if v1 != v7 then goto L15f236;
  #L15f1f4.  @monitorenter v0
  #L15f1f6.  v1:= `@@c.c.g.f` @type ^`int`;
  #L15f1fa.  if v1 >= v5 then goto L15f22c;
  #L15f1fe.  v1:= `@@c.c.g.e` @type ^`java.lang.Object`[] @kind object;
  #L15f202.  v9[v4]:= v1 @kind object;
  #L15f206.  v9[v6]:= v8 @kind object;
  #L15f20a.  v8:= v10 ^< 1;
  #L15f20e.  v8:= v8 - v6 @kind int;
  #L15f210.  if v8 < v3 then goto L15f21e;
  #L15f214.  v9[v8]:= v2 @kind object;
  #L15f218.  v8:= v8 + -1;
  #L15f21c.  goto L15f210;
  #L15f21e.  `@@c.c.g.e` @type ^`java.lang.Object`[] := v9 @kind object;
  #L15f222.  v8:= `@@c.c.g.f` @type ^`int`;
  #L15f226.  v8:= v8 + v6 @kind int;
  #L15f228.  `@@c.c.g.f` @type ^`int` := v8;
  #L15f22c.  @monitorexit v0
  #L15f22e.  goto L15f236;
  #L15f230.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15f232.  @monitorexit v0
  #L15f234.  throw v8;
  #L15f236.  return @kind void;
  catch `java.lang.Throwable` @[L15f1ac..L15f1ea] goto L15f1e6;
  catch `java.lang.Throwable` @[L15f1f6..L15f234] goto L15f230;
}
procedure `void` `e`(`c.c.g` v5 @kind this, `int` v6 ) @signature `Lc/c/g;.e:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15efec.  v0:= constclass @type ^`c.c.g` @kind object;
  #L15eff0.  v1:= 0I;
  #L15eff2.  v2:= 0I;
  #L15eff4.  v3:= 1I;
  #L15eff6.  v4:= 8I;
  #L15effa.  if v6 != v4 then goto L15f048;
  #L15effe.  @monitorenter v0
  #L15f000.  v4:= `@@c.c.g.g` @type ^`java.lang.Object`[] @kind object;
  #L15f004.  if v4 == 0 then goto L15f03e;
  #L15f008.  v6:= `@@c.c.g.g` @type ^`java.lang.Object`[] @kind object;
  #L15f00c.  v5.`c.c.g.c` @type ^`java.lang.Object`[] := v6 @kind object;
  #L15f010.  v4:= v6[v2] @kind object;
  #L15f014.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L15f018.  `@@c.c.g.g` @type ^`java.lang.Object`[] := v4 @kind object;
  #L15f01c.  v4:= v6[v3] @kind object;
  #L15f020.  v4:= (`int`[]) v4 @kind object;
  #L15f024.  v5.`c.c.g.b` @type ^`int`[] := v4 @kind object;
  #L15f028.  v6[v3]:= v1 @kind object;
  #L15f02c.  v6[v2]:= v1 @kind object;
  #L15f030.  v6:= `@@c.c.g.h` @type ^`int`;
  #L15f034.  v6:= v6 - v3 @kind int;
  #L15f036.  `@@c.c.g.h` @type ^`int` := v6;
  #L15f03a.  @monitorexit v0
  #L15f03c.  return @kind void;
  #L15f03e.  @monitorexit v0
  #L15f040.  goto L15f098;
  #L15f042.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15f044.  @monitorexit v0
  #L15f046.  throw v6;
  #L15f048.  v4:= 4I;
  #L15f04a.  if v6 != v4 then goto L15f098;
  #L15f04e.  @monitorenter v0
  #L15f050.  v4:= `@@c.c.g.e` @type ^`java.lang.Object`[] @kind object;
  #L15f054.  if v4 == 0 then goto L15f08e;
  #L15f058.  v6:= `@@c.c.g.e` @type ^`java.lang.Object`[] @kind object;
  #L15f05c.  v5.`c.c.g.c` @type ^`java.lang.Object`[] := v6 @kind object;
  #L15f060.  v4:= v6[v2] @kind object;
  #L15f064.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L15f068.  `@@c.c.g.e` @type ^`java.lang.Object`[] := v4 @kind object;
  #L15f06c.  v4:= v6[v3] @kind object;
  #L15f070.  v4:= (`int`[]) v4 @kind object;
  #L15f074.  v5.`c.c.g.b` @type ^`int`[] := v4 @kind object;
  #L15f078.  v6[v3]:= v1 @kind object;
  #L15f07c.  v6[v2]:= v1 @kind object;
  #L15f080.  v6:= `@@c.c.g.f` @type ^`int`;
  #L15f084.  v6:= v6 - v3 @kind int;
  #L15f086.  `@@c.c.g.f` @type ^`int` := v6;
  #L15f08a.  @monitorexit v0
  #L15f08c.  return @kind void;
  #L15f08e.  @monitorexit v0
  #L15f090.  goto L15f098;
  #L15f092.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15f094.  @monitorexit v0
  #L15f096.  throw v6;
  #L15f098.  v0:= new `int`[v6];
  #L15f09c.  v5.`c.c.g.b` @type ^`int`[] := v0 @kind object;
  #L15f0a0.  v6:= v6 ^< v3 @kind int;
  #L15f0a2.  v6:= new `java.lang.Object`[v6];
  #L15f0a6.  v5.`c.c.g.c` @type ^`java.lang.Object`[] := v6 @kind object;
  #L15f0aa.  return @kind void;
  catch `java.lang.Throwable` @[L15f000..L15f046] goto L15f042;
  catch `java.lang.Throwable` @[L15f050..L15f096] goto L15f092;
}
procedure `int` `a`(`c.c.g` v5 @kind this) @signature `Lc/c/g;.a:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15e9f4.  v0:= v5.`c.c.g.d` @type ^`int`;
  #L15e9f8.  if v0 != 0 then goto L15ea00;
  #L15e9fc.  v0:= -1I;
  #L15e9fe.  return v0;
  #L15ea00.  v1:= v5.`c.c.g.b` @type ^`int`[] @kind object;
  #L15ea04.  v2:= 0I;
  #L15ea06.  call temp:= `a`(v1, v0, v2) @signature `Lc/c/g;.a:([III)I` @kind static;
  #L15ea0c.  v1:= temp;
  #L15ea0e.  if v1 >= 0 then goto L15ea14;
  #L15ea12.  return v1;
  #L15ea14.  v2:= v5.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15ea18.  v3:= v1 ^< 1;
  #L15ea1c.  v2:= v2[v3] @kind object;
  #L15ea20.  if v2 != 0 then goto L15ea26;
  #L15ea24.  return v1;
  #L15ea26.  v2:= v1 + 1;
  #L15ea2a.  if v2 >= v0 then goto L15ea52;
  #L15ea2e.  v3:= v5.`c.c.g.b` @type ^`int`[] @kind object;
  #L15ea32.  v3:= v3[v2];
  #L15ea36.  if v3 != 0 then goto L15ea52;
  #L15ea3a.  v3:= v5.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15ea3e.  v4:= v2 ^< 1;
  #L15ea42.  v3:= v3[v4] @kind object;
  #L15ea46.  if v3 != 0 then goto L15ea4c;
  #L15ea4a.  return v2;
  #L15ea4c.  v2:= v2 + 1;
  #L15ea50.  goto L15ea2a;
  #L15ea52.  v1:= v1 + -1;
  #L15ea56.  if v1 < 0 then goto L15ea7e;
  #L15ea5a.  v0:= v5.`c.c.g.b` @type ^`int`[] @kind object;
  #L15ea5e.  v0:= v0[v1];
  #L15ea62.  if v0 != 0 then goto L15ea7e;
  #L15ea66.  v0:= v5.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15ea6a.  v3:= v1 ^< 1;
  #L15ea6e.  v0:= v0[v3] @kind object;
  #L15ea72.  if v0 != 0 then goto L15ea78;
  #L15ea76.  return v1;
  #L15ea78.  v1:= v1 + -1;
  #L15ea7c.  goto L15ea56;
  #L15ea7e.  v0:= ~v2 @kind int;
  #L15ea80.  return v0;
}
procedure `int` `a`(`c.c.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/c/g;.a:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e9c4.  if v2 != 0 then goto L15e9d2;
  #L15e9c8.  call temp:= `a`(v1) @signature `Lc/c/g;.a:()I` @kind virtual;
  #L15e9ce.  v2:= temp;
  #L15e9d0.  goto L15e9e2;
  #L15e9d2.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L15e9d8.  v0:= temp;
  #L15e9da.  call temp:= `a`(v1, v2, v0) @signature `Lc/c/g;.a:(Ljava/lang/Object;I)I` @kind virtual;
  #L15e9e0.  v2:= temp;
  #L15e9e2.  return v2;
}
procedure `int` `a`(`c.c.g` v5 @kind this, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lc/c/g;.a:(Ljava/lang/Object;I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15e910.  v0:= v5.`c.c.g.d` @type ^`int`;
  #L15e914.  if v0 != 0 then goto L15e91c;
  #L15e918.  v6:= -1I;
  #L15e91a.  return v6;
  #L15e91c.  v1:= v5.`c.c.g.b` @type ^`int`[] @kind object;
  #L15e920.  call temp:= `a`(v1, v0, v7) @signature `Lc/c/g;.a:([III)I` @kind static;
  #L15e926.  v1:= temp;
  #L15e928.  if v1 >= 0 then goto L15e92e;
  #L15e92c.  return v1;
  #L15e92e.  v2:= v5.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15e932.  v3:= v1 ^< 1;
  #L15e936.  v2:= v2[v3] @kind object;
  #L15e93a.  call temp:= `equals`(v6, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15e940.  v2:= temp;
  #L15e942.  if v2 == 0 then goto L15e948;
  #L15e946.  return v1;
  #L15e948.  v2:= v1 + 1;
  #L15e94c.  if v2 >= v0 then goto L15e97c;
  #L15e950.  v3:= v5.`c.c.g.b` @type ^`int`[] @kind object;
  #L15e954.  v3:= v3[v2];
  #L15e958.  if v3 != v7 then goto L15e97c;
  #L15e95c.  v3:= v5.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15e960.  v4:= v2 ^< 1;
  #L15e964.  v3:= v3[v4] @kind object;
  #L15e968.  call temp:= `equals`(v6, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15e96e.  v3:= temp;
  #L15e970.  if v3 == 0 then goto L15e976;
  #L15e974.  return v2;
  #L15e976.  v2:= v2 + 1;
  #L15e97a.  goto L15e94c;
  #L15e97c.  v1:= v1 + -1;
  #L15e980.  if v1 < 0 then goto L15e9b0;
  #L15e984.  v0:= v5.`c.c.g.b` @type ^`int`[] @kind object;
  #L15e988.  v0:= v0[v1];
  #L15e98c.  if v0 != v7 then goto L15e9b0;
  #L15e990.  v0:= v5.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15e994.  v3:= v1 ^< 1;
  #L15e998.  v0:= v0[v3] @kind object;
  #L15e99c.  call temp:= `equals`(v6, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15e9a2.  v0:= temp;
  #L15e9a4.  if v0 == 0 then goto L15e9aa;
  #L15e9a8.  return v1;
  #L15e9aa.  v1:= v1 + -1;
  #L15e9ae.  goto L15e980;
  #L15e9b0.  v6:= ~v2 @kind int;
  #L15e9b2.  return v6;
}
procedure `java.lang.Object` `a`(`c.c.g` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lc/c/g;.a:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15ee5c.  v3:= v3 ^< 1;
  #L15ee60.  v3:= v3 + 1;
  #L15ee64.  v0:= v2.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15ee68.  v1:= v0[v3] @kind object;
  #L15ee6c.  v0[v3]:= v4 @kind object;
  #L15ee70.  return v1 @kind object;
}
procedure `void` `a`(`c.c.g` v5 @kind this, `int` v6 ) @signature `Lc/c/g;.a:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15f128.  v0:= v5.`c.c.g.d` @type ^`int`;
  #L15f12c.  v1:= v5.`c.c.g.b` @type ^`int`[] @kind object;
  #L15f130.  v2:= length @variable v1;
  #L15f132.  if v2 >= v6 then goto L15f168;
  #L15f136.  v2:= v5.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15f13a.  call `e`(v5, v6) @signature `Lc/c/g;.e:(I)V` @kind direct;
  #L15f140.  v6:= v5.`c.c.g.d` @type ^`int`;
  #L15f144.  if v6 <= 0 then goto L15f162;
  #L15f148.  v6:= v5.`c.c.g.b` @type ^`int`[] @kind object;
  #L15f14c.  v3:= 0I;
  #L15f14e.  call `arraycopy`(v1, v3, v6, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15f154.  v6:= v5.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15f158.  v4:= v0 ^< 1;
  #L15f15c.  call `arraycopy`(v2, v3, v6, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15f162.  call `a`(v1, v2, v0) @signature `Lc/c/g;.a:([I[Ljava/lang/Object;I)V` @kind static;
  #L15f168.  v6:= v5.`c.c.g.d` @type ^`int`;
  #L15f16c.  if v6 != v0 then goto L15f172;
  #L15f170.  return @kind void;
  #L15f172.  v6:= new `java.util.ConcurrentModificationException`;
  #L15f176.  call `<init>`(v6) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L15f17c.  throw v6;
}
procedure `void` `a`(`c.c.g` v4 @kind this, `c.c.g` v5 @kind object) @signature `Lc/c/g;.a:(Lc/c/g;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15f260.  v0:= v5.`c.c.g.d` @type ^`int`;
  #L15f264.  v1:= v4.`c.c.g.d` @type ^`int`;
  #L15f268.  v1:= v1 + v0 @kind int;
  #L15f26a.  call `a`(v4, v1) @signature `Lc/c/g;.a:(I)V` @kind virtual;
  #L15f270.  v1:= v4.`c.c.g.d` @type ^`int`;
  #L15f274.  v2:= 0I;
  #L15f276.  if v1 != 0 then goto L15f2a4;
  #L15f27a.  if v0 <= 0 then goto L15f2c4;
  #L15f27e.  v1:= v5.`c.c.g.b` @type ^`int`[] @kind object;
  #L15f282.  v3:= v4.`c.c.g.b` @type ^`int`[] @kind object;
  #L15f286.  call `arraycopy`(v1, v2, v3, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15f28c.  v5:= v5.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15f290.  v1:= v4.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15f294.  v3:= v0 ^< 1;
  #L15f298.  call `arraycopy`(v5, v2, v1, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15f29e.  v4.`c.c.g.d` @type ^`int` := v0;
  #L15f2a2.  goto L15f2c4;
  #L15f2a4.  if v2 >= v0 then goto L15f2c4;
  #L15f2a8.  call temp:= `b`(v5, v2) @signature `Lc/c/g;.b:(I)Ljava/lang/Object;` @kind virtual;
  #L15f2ae.  v1:= temp @kind object;
  #L15f2b0.  call temp:= `d`(v5, v2) @signature `Lc/c/g;.d:(I)Ljava/lang/Object;` @kind virtual;
  #L15f2b6.  v3:= temp @kind object;
  #L15f2b8.  call temp:= `put`(v4, v1, v3) @signature `Lc/c/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15f2be.  v2:= v2 + 1;
  #L15f2c2.  goto L15f2a4;
  #L15f2c4.  return @kind void;
}
procedure `int` `b`(`c.c.g` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lc/c/g;.b:(Ljava/lang/Object;)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15ea94.  v0:= v5.`c.c.g.d` @type ^`int`;
  #L15ea98.  v0:= v0 * 2;
  #L15ea9c.  v1:= v5.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15eaa0.  v2:= 1I;
  #L15eaa2.  if v6 != 0 then goto L15eabe;
  #L15eaa6.  v6:= 1I;
  #L15eaa8.  if v6 >= v0 then goto L15eae0;
  #L15eaac.  v3:= v1[v6] @kind object;
  #L15eab0.  if v3 != 0 then goto L15eab8;
  #L15eab4.  v6:= v6 ^> v2 @kind int;
  #L15eab6.  return v6;
  #L15eab8.  v6:= v6 + 2;
  #L15eabc.  goto L15eaa8;
  #L15eabe.  v3:= 1I;
  #L15eac0.  if v3 >= v0 then goto L15eae0;
  #L15eac4.  v4:= v1[v3] @kind object;
  #L15eac8.  call temp:= `equals`(v6, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15eace.  v4:= temp;
  #L15ead0.  if v4 == 0 then goto L15eada;
  #L15ead4.  v6:= v3 ^> 1;
  #L15ead8.  return v6;
  #L15eada.  v3:= v3 + 2;
  #L15eade.  goto L15eac0;
  #L15eae0.  v6:= -1I;
  #L15eae2.  return v6;
}
procedure `java.lang.Object` `b`(`c.c.g` v1 @kind this, `int` v2 ) @signature `Lc/c/g;.b:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15eb58.  v0:= v1.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15eb5c.  v2:= v2 ^< 1;
  #L15eb60.  v2:= v0[v2] @kind object;
  #L15eb64.  return v2 @kind object;
}
procedure `java.lang.Object` `c`(`c.c.g` v10 @kind this, `int` v11 ) @signature `Lc/c/g;.c:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L15ed04.  v0:= v10.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15ed08.  v1:= v11 ^< 1;
  #L15ed0c.  v2:= v1 + 1;
  #L15ed10.  v2:= v0[v2] @kind object;
  #L15ed14.  v3:= v10.`c.c.g.d` @type ^`int`;
  #L15ed18.  v4:= 0I;
  #L15ed1a.  v5:= 1I;
  #L15ed1c.  if v3 > v5 then goto L15ed3e;
  #L15ed20.  v11:= v10.`c.c.g.b` @type ^`int`[] @kind object;
  #L15ed24.  call `a`(v11, v0, v3) @signature `Lc/c/g;.a:([I[Ljava/lang/Object;I)V` @kind static;
  #L15ed2a.  v11:= `@@c.c.c.a` @type ^`int`[] @kind object;
  #L15ed2e.  v10.`c.c.g.b` @type ^`int`[] := v11 @kind object;
  #L15ed32.  v11:= `@@c.c.c.c` @type ^`java.lang.Object`[] @kind object;
  #L15ed36.  v10.`c.c.g.c` @type ^`java.lang.Object`[] := v11 @kind object;
  #L15ed3a.  v0:= 0I;
  #L15ed3c.  goto L15ee06;
  #L15ed3e.  v0:= v3 + -1;
  #L15ed42.  v6:= v10.`c.c.g.b` @type ^`int`[] @kind object;
  #L15ed46.  v7:= length @variable v6;
  #L15ed48.  v8:= 8I;
  #L15ed4c.  if v7 <= v8 then goto L15edca;
  #L15ed50.  v6:= length @variable v6;
  #L15ed52.  v6:= v6 / 3;
  #L15ed56.  if v3 >= v6 then goto L15edca;
  #L15ed5a.  if v3 <= v8 then goto L15ed66;
  #L15ed5e.  v6:= v3 ^> 1;
  #L15ed62.  v8:= v3 + v6 @kind int;
  #L15ed66.  v6:= v10.`c.c.g.b` @type ^`int`[] @kind object;
  #L15ed6a.  v7:= v10.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15ed6e.  call `e`(v10, v8) @signature `Lc/c/g;.e:(I)V` @kind direct;
  #L15ed74.  v8:= v10.`c.c.g.d` @type ^`int`;
  #L15ed78.  if v3 != v8 then goto L15edbe;
  #L15ed7c.  if v11 <= 0 then goto L15ed94;
  #L15ed80.  v8:= v10.`c.c.g.b` @type ^`int`[] @kind object;
  #L15ed84.  call `arraycopy`(v6, v4, v8, v4, v11) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15ed8a.  v8:= v10.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15ed8e.  call `arraycopy`(v7, v4, v8, v4, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15ed94.  if v11 >= v0 then goto L15ee06;
  #L15ed98.  v4:= v11 + 1;
  #L15ed9c.  v8:= v10.`c.c.g.b` @type ^`int`[] @kind object;
  #L15eda0.  v9:= v0 - v11 @kind int;
  #L15eda4.  call `arraycopy`(v6, v4, v8, v11, v9) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15edaa.  v11:= v4 ^< 1;
  #L15edae.  v4:= v10.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15edb2.  v5:= v9 ^< 1;
  #L15edb6.  call `arraycopy`(v7, v11, v4, v1, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15edbc.  goto L15ee06;
  #L15edbe.  v11:= new `java.util.ConcurrentModificationException`;
  #L15edc2.  call `<init>`(v11) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L15edc8.  throw v11;
  #L15edca.  if v11 >= v0 then goto L15edf2;
  #L15edce.  v4:= v10.`c.c.g.b` @type ^`int`[] @kind object;
  #L15edd2.  v6:= v11 + 1;
  #L15edd6.  v7:= v0 - v11 @kind int;
  #L15edda.  call `arraycopy`(v4, v6, v4, v11, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15ede0.  v11:= v10.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15ede4.  v4:= v6 ^< 1;
  #L15ede8.  v6:= v7 ^< 1;
  #L15edec.  call `arraycopy`(v11, v4, v11, v1, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15edf2.  v11:= v10.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15edf6.  v1:= v0 ^< 1;
  #L15edfa.  v4:= 0I;
  #L15edfc.  v11[v1]:= v4 @kind object;
  #L15ee00.  v1:= v1 + v5 @kind int;
  #L15ee02.  v11[v1]:= v4 @kind object;
  #L15ee06.  v11:= v10.`c.c.g.d` @type ^`int`;
  #L15ee0a.  if v3 != v11 then goto L15ee14;
  #L15ee0e.  v10.`c.c.g.d` @type ^`int` := v0;
  #L15ee12.  return v2 @kind object;
  #L15ee14.  v11:= new `java.util.ConcurrentModificationException`;
  #L15ee18.  call `<init>`(v11) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L15ee1e.  throw v11;
}
procedure `void` `clear`(`c.c.g` v4 @kind this) @signature `Lc/c/g;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15f0d4.  v0:= v4.`c.c.g.d` @type ^`int`;
  #L15f0d8.  if v0 <= 0 then goto L15f100;
  #L15f0dc.  v1:= v4.`c.c.g.b` @type ^`int`[] @kind object;
  #L15f0e0.  v2:= v4.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15f0e4.  v3:= `@@c.c.c.a` @type ^`int`[] @kind object;
  #L15f0e8.  v4.`c.c.g.b` @type ^`int`[] := v3 @kind object;
  #L15f0ec.  v3:= `@@c.c.c.c` @type ^`java.lang.Object`[] @kind object;
  #L15f0f0.  v4.`c.c.g.c` @type ^`java.lang.Object`[] := v3 @kind object;
  #L15f0f4.  v3:= 0I;
  #L15f0f6.  v4.`c.c.g.d` @type ^`int` := v3;
  #L15f0fa.  call `a`(v1, v2, v0) @signature `Lc/c/g;.a:([I[Ljava/lang/Object;I)V` @kind static;
  #L15f100.  v0:= v4.`c.c.g.d` @type ^`int`;
  #L15f104.  if v0 > 0 then goto L15f10a;
  #L15f108.  return @kind void;
  #L15f10a.  v0:= new `java.util.ConcurrentModificationException`;
  #L15f10e.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L15f114.  throw v0;
}
procedure `boolean` `containsKey`(`c.c.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/c/g;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L15e66c.  call temp:= `a`(v0, v1) @signature `Lc/c/g;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L15e672.  v1:= temp;
  #L15e674.  if v1 < 0 then goto L15e67c;
  #L15e678.  v1:= 1I;
  #L15e67a.  goto L15e67e;
  #L15e67c.  v1:= 0I;
  #L15e67e.  return v1;
}
procedure `boolean` `containsValue`(`c.c.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/c/g;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L15e690.  call temp:= `b`(v0, v1) @signature `Lc/c/g;.b:(Ljava/lang/Object;)I` @kind virtual;
  #L15e696.  v1:= temp;
  #L15e698.  if v1 < 0 then goto L15e6a0;
  #L15e69c.  v1:= 1I;
  #L15e69e.  goto L15e6a2;
  #L15e6a0.  v1:= 0I;
  #L15e6a2.  return v1;
}
procedure `java.lang.Object` `d`(`c.c.g` v1 @kind this, `int` v2 ) @signature `Lc/c/g;.d:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ee84.  v0:= v1.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15ee88.  v2:= v2 ^< 1;
  #L15ee8c.  v2:= v2 + 1;
  #L15ee90.  v2:= v0[v2] @kind object;
  #L15ee94.  return v2 @kind object;
}
procedure `boolean` `equals`(`c.c.g` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lc/c/g;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15e6b4.  v0:= 1I;
  #L15e6b6.  if v6 != v7 then goto L15e6bc;
  #L15e6ba.  return v0;
  #L15e6bc.  v1:= instanceof @variable v7 @type ^`c.c.g` @kind boolean;
  #L15e6c0.  v2:= 0I;
  #L15e6c2.  if v1 == 0 then goto L15e730;
  #L15e6c6.  v7:= (`c.c.g`) v7 @kind object;
  #L15e6ca.  call temp:= `size`(v6) @signature `Lc/c/g;.size:()I` @kind virtual;
  #L15e6d0.  v1:= temp;
  #L15e6d2.  call temp:= `size`(v7) @signature `Lc/c/g;.size:()I` @kind virtual;
  #L15e6d8.  v3:= temp;
  #L15e6da.  if v1 == v3 then goto L15e6e0;
  #L15e6de.  return v2;
  #L15e6e0.  v1:= 0I;
  #L15e6e2.  v3:= v6.`c.c.g.d` @type ^`int`;
  #L15e6e6.  if v1 >= v3 then goto L15e72c;
  #L15e6ea.  call temp:= `b`(v6, v1) @signature `Lc/c/g;.b:(I)Ljava/lang/Object;` @kind virtual;
  #L15e6f0.  v3:= temp @kind object;
  #L15e6f2.  call temp:= `d`(v6, v1) @signature `Lc/c/g;.d:(I)Ljava/lang/Object;` @kind virtual;
  #L15e6f8.  v4:= temp @kind object;
  #L15e6fa.  call temp:= `get`(v7, v3) @signature `Lc/c/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15e700.  v5:= temp @kind object;
  #L15e702.  if v4 != 0 then goto L15e718;
  #L15e706.  if v5 != 0 then goto L15e716;
  #L15e70a.  call temp:= `containsKey`(v7, v3) @signature `Lc/c/g;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L15e710.  v3:= temp;
  #L15e712.  if v3 != 0 then goto L15e726;
  #L15e716.  return v2;
  #L15e718.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15e71e.  v3:= temp;
  #L15e720.  if v3 != 0 then goto L15e726;
  #L15e724.  return v2;
  #L15e726.  v1:= v1 + 1;
  #L15e72a.  goto L15e6e2;
  #L15e72c.  return v0;
  #L15e72e.  return v2;
  #L15e730.  v1:= instanceof @variable v7 @type ^`java.util.Map` @kind boolean;
  #L15e734.  if v1 == 0 then goto L15e7a0;
  #L15e738.  v7:= (`java.util.Map`) v7 @kind object;
  #L15e73c.  call temp:= `size`(v6) @signature `Lc/c/g;.size:()I` @kind virtual;
  #L15e742.  v1:= temp;
  #L15e744.  call temp:= `size`(v7) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L15e74a.  v3:= temp;
  #L15e74c.  if v1 == v3 then goto L15e752;
  #L15e750.  return v2;
  #L15e752.  v1:= 0I;
  #L15e754.  v3:= v6.`c.c.g.d` @type ^`int`;
  #L15e758.  if v1 >= v3 then goto L15e79e;
  #L15e75c.  call temp:= `b`(v6, v1) @signature `Lc/c/g;.b:(I)Ljava/lang/Object;` @kind virtual;
  #L15e762.  v3:= temp @kind object;
  #L15e764.  call temp:= `d`(v6, v1) @signature `Lc/c/g;.d:(I)Ljava/lang/Object;` @kind virtual;
  #L15e76a.  v4:= temp @kind object;
  #L15e76c.  call temp:= `get`(v7, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15e772.  v5:= temp @kind object;
  #L15e774.  if v4 != 0 then goto L15e78a;
  #L15e778.  if v5 != 0 then goto L15e788;
  #L15e77c.  call temp:= `containsKey`(v7, v3) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L15e782.  v3:= temp;
  #L15e784.  if v3 != 0 then goto L15e798;
  #L15e788.  return v2;
  #L15e78a.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15e790.  v3:= temp;
  #L15e792.  if v3 != 0 then goto L15e798;
  #L15e796.  return v2;
  #L15e798.  v1:= v1 + 1;
  #L15e79c.  goto L15e754;
  #L15e79e.  return v0;
  #L15e7a0.  return v2;
  catch `java.lang.NullPointerException` @[L15e6e2..L15e720] goto L15e72e;
  catch `java.lang.ClassCastException` @[L15e6e2..L15e720] goto L15e72e;
  catch `java.lang.NullPointerException` @[L15e754..L15e792] goto L15e7a0;
  catch `java.lang.ClassCastException` @[L15e754..L15e792] goto L15e7a0;
}
procedure `java.lang.Object` `get`(`c.c.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/c/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15eb0c.  v0:= 0I;
  #L15eb0e.  call temp:= `getOrDefault`(v1, v2, v0) @signature `Lc/c/g;.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15eb14.  v2:= temp @kind object;
  #L15eb16.  return v2 @kind object;
}
procedure `java.lang.Object` `getOrDefault`(`c.c.g` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lc/c/g;.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L15eb28.  call temp:= `a`(v0, v1) @signature `Lc/c/g;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L15eb2e.  v1:= temp;
  #L15eb30.  if v1 < 0 then goto L15eb44;
  #L15eb34.  v2:= v0.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15eb38.  v1:= v1 ^< 1;
  #L15eb3c.  v1:= v1 + 1;
  #L15eb40.  v2:= v2[v1] @kind object;
  #L15eb44.  return v2 @kind object;
}
procedure `int` `hashCode`(`c.c.g` v9 @kind this) @signature `Lc/c/g;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L15e8bc.  v0:= v9.`c.c.g.b` @type ^`int`[] @kind object;
  #L15e8c0.  v1:= v9.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15e8c4.  v2:= v9.`c.c.g.d` @type ^`int`;
  #L15e8c8.  v3:= 1I;
  #L15e8ca.  v4:= 0I;
  #L15e8cc.  v3:= 0I;
  #L15e8ce.  v5:= 0I;
  #L15e8d0.  v6:= 1I;
  #L15e8d2.  if v3 >= v2 then goto L15e8fc;
  #L15e8d6.  v7:= v1[v6] @kind object;
  #L15e8da.  v8:= v0[v3];
  #L15e8de.  if v7 != 0 then goto L15e8e6;
  #L15e8e2.  v7:= 0I;
  #L15e8e4.  goto L15e8ee;
  #L15e8e6.  call temp:= `hashCode`(v7) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L15e8ec.  v7:= temp;
  #L15e8ee.  v7:= v7 ^~ v8 @kind int;
  #L15e8f0.  v5:= v5 + v7 @kind int;
  #L15e8f2.  v3:= v3 + 1;
  #L15e8f6.  v6:= v6 + 2;
  #L15e8fa.  goto L15e8d2;
  #L15e8fc.  return v5;
}
procedure `boolean` `isEmpty`(`c.c.g` v1 @kind this) @signature `Lc/c/g;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e7d4.  v0:= v1.`c.c.g.d` @type ^`int`;
  #L15e7d8.  if v0 > 0 then goto L15e7e0;
  #L15e7dc.  v0:= 1I;
  #L15e7de.  goto L15e7e2;
  #L15e7e0.  v0:= 0I;
  #L15e7e2.  return v0;
}
procedure `java.lang.Object` `put`(`c.c.g` v9 @kind this, `java.lang.Object` v10 @kind object, `java.lang.Object` v11 @kind object) @signature `Lc/c/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L15eb78.  v0:= v9.`c.c.g.d` @type ^`int`;
  #L15eb7c.  v1:= 0I;
  #L15eb7e.  if v10 != 0 then goto L15eb8e;
  #L15eb82.  call temp:= `a`(v9) @signature `Lc/c/g;.a:()I` @kind virtual;
  #L15eb88.  v2:= temp;
  #L15eb8a.  v3:= 0I;
  #L15eb8c.  goto L15eba4;
  #L15eb8e.  call temp:= `hashCode`(v10) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L15eb94.  v2:= temp;
  #L15eb96.  call temp:= `a`(v9, v10, v2) @signature `Lc/c/g;.a:(Ljava/lang/Object;I)I` @kind virtual;
  #L15eb9c.  v3:= temp;
  #L15eb9e.  v8:= v3;
  #L15eba0.  v3:= v2;
  #L15eba2.  v2:= v8;
  #L15eba4.  if v2 < 0 then goto L15ebbe;
  #L15eba8.  v10:= v2 ^< 1;
  #L15ebac.  v10:= v10 + 1;
  #L15ebb0.  v0:= v9.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15ebb4.  v1:= v0[v10] @kind object;
  #L15ebb8.  v0[v10]:= v11 @kind object;
  #L15ebbc.  return v1 @kind object;
  #L15ebbe.  v2:= ~v2 @kind int;
  #L15ebc0.  v4:= v9.`c.c.g.b` @type ^`int`[] @kind object;
  #L15ebc4.  v4:= length @variable v4;
  #L15ebc6.  if v0 < v4 then goto L15ec2c;
  #L15ebca.  v4:= 4I;
  #L15ebcc.  v5:= 8I;
  #L15ebd0.  if v0 < v5 then goto L15ebdc;
  #L15ebd4.  v4:= v0 ^> 1;
  #L15ebd8.  v4:= v4 + v0 @kind int;
  #L15ebda.  goto L15ebe4;
  #L15ebdc.  if v0 < v4 then goto L15ebe4;
  #L15ebe0.  v4:= 8I;
  #L15ebe4.  v5:= v9.`c.c.g.b` @type ^`int`[] @kind object;
  #L15ebe8.  v6:= v9.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15ebec.  call `e`(v9, v4) @signature `Lc/c/g;.e:(I)V` @kind direct;
  #L15ebf2.  v4:= v9.`c.c.g.d` @type ^`int`;
  #L15ebf6.  if v0 != v4 then goto L15ec20;
  #L15ebfa.  v4:= v9.`c.c.g.b` @type ^`int`[] @kind object;
  #L15ebfe.  v7:= length @variable v4;
  #L15ec00.  if v7 <= 0 then goto L15ec18;
  #L15ec04.  v7:= length @variable v5;
  #L15ec06.  call `arraycopy`(v5, v1, v4, v1, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15ec0c.  v4:= v9.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15ec10.  v7:= length @variable v6;
  #L15ec12.  call `arraycopy`(v6, v1, v4, v1, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15ec18.  call `a`(v5, v6, v0) @signature `Lc/c/g;.a:([I[Ljava/lang/Object;I)V` @kind static;
  #L15ec1e.  goto L15ec2c;
  #L15ec20.  v10:= new `java.util.ConcurrentModificationException`;
  #L15ec24.  call `<init>`(v10) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L15ec2a.  throw v10;
  #L15ec2c.  if v2 >= v0 then goto L15ec5e;
  #L15ec30.  v1:= v9.`c.c.g.b` @type ^`int`[] @kind object;
  #L15ec34.  v4:= v2 + 1;
  #L15ec38.  v5:= v0 - v2 @kind int;
  #L15ec3c.  call `arraycopy`(v1, v2, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15ec42.  v1:= v9.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15ec46.  v5:= v2 ^< 1;
  #L15ec4a.  v4:= v4 ^< 1;
  #L15ec4e.  v6:= v9.`c.c.g.d` @type ^`int`;
  #L15ec52.  v6:= v6 - v2 @kind int;
  #L15ec54.  v6:= v6 ^< 1;
  #L15ec58.  call `arraycopy`(v1, v5, v1, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15ec5e.  v1:= v9.`c.c.g.d` @type ^`int`;
  #L15ec62.  if v0 != v1 then goto L15ec94;
  #L15ec66.  v0:= v9.`c.c.g.b` @type ^`int`[] @kind object;
  #L15ec6a.  v4:= length @variable v0;
  #L15ec6c.  if v2 >= v4 then goto L15ec94;
  #L15ec70.  v0[v2]:= v3;
  #L15ec74.  v0:= v9.`c.c.g.c` @type ^`java.lang.Object`[] @kind object;
  #L15ec78.  v2:= v2 ^< 1;
  #L15ec7c.  v0[v2]:= v10 @kind object;
  #L15ec80.  v2:= v2 + 1;
  #L15ec84.  v0[v2]:= v11 @kind object;
  #L15ec88.  v1:= v1 + 1;
  #L15ec8c.  v9.`c.c.g.d` @type ^`int` := v1;
  #L15ec90.  v10:= 0I;
  #L15ec92.  return v10 @kind object;
  #L15ec94.  v10:= new `java.util.ConcurrentModificationException`;
  #L15ec98.  call `<init>`(v10) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L15ec9e.  throw v10;
}
procedure `java.lang.Object` `putIfAbsent`(`c.c.g` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lc/c/g;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ecb0.  call temp:= `get`(v1, v2) @signature `Lc/c/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15ecb6.  v0:= temp @kind object;
  #L15ecb8.  if v0 != 0 then goto L15ecc4;
  #L15ecbc.  call temp:= `put`(v1, v2, v3) @signature `Lc/c/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15ecc2.  v0:= temp @kind object;
  #L15ecc4.  return v0 @kind object;
}
procedure `java.lang.Object` `remove`(`c.c.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/c/g;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L15ecd8.  call temp:= `a`(v0, v1) @signature `Lc/c/g;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L15ecde.  v1:= temp;
  #L15ece0.  if v1 < 0 then goto L15ecee;
  #L15ece4.  call temp:= `c`(v0, v1) @signature `Lc/c/g;.c:(I)Ljava/lang/Object;` @kind virtual;
  #L15ecea.  v1:= temp @kind object;
  #L15ecec.  return v1 @kind object;
  #L15ecee.  v1:= 0I;
  #L15ecf0.  return v1 @kind object;
}
procedure `boolean` `remove`(`c.c.g` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lc/c/g;.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e7f4.  call temp:= `a`(v1, v2) @signature `Lc/c/g;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L15e7fa.  v2:= temp;
  #L15e7fc.  if v2 < 0 then goto L15e826;
  #L15e800.  call temp:= `d`(v1, v2) @signature `Lc/c/g;.d:(I)Ljava/lang/Object;` @kind virtual;
  #L15e806.  v0:= temp @kind object;
  #L15e808.  if v3 == v0 then goto L15e81c;
  #L15e80c.  if v3 == 0 then goto L15e826;
  #L15e810.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15e816.  v3:= temp;
  #L15e818.  if v3 == 0 then goto L15e826;
  #L15e81c.  call temp:= `c`(v1, v2) @signature `Lc/c/g;.c:(I)Ljava/lang/Object;` @kind virtual;
  #L15e822.  v2:= 1I;
  #L15e824.  return v2;
  #L15e826.  v2:= 0I;
  #L15e828.  return v2;
}
procedure `java.lang.Object` `replace`(`c.c.g` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lc/c/g;.replace:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L15ee30.  call temp:= `a`(v0, v1) @signature `Lc/c/g;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L15ee36.  v1:= temp;
  #L15ee38.  if v1 < 0 then goto L15ee46;
  #L15ee3c.  call temp:= `a`(v0, v1, v2) @signature `Lc/c/g;.a:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15ee42.  v1:= temp @kind object;
  #L15ee44.  return v1 @kind object;
  #L15ee46.  v1:= 0I;
  #L15ee48.  return v1 @kind object;
}
procedure `boolean` `replace`(`c.c.g` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lc/c/g;.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e83c.  call temp:= `a`(v1, v2) @signature `Lc/c/g;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L15e842.  v2:= temp;
  #L15e844.  if v2 < 0 then goto L15e86e;
  #L15e848.  call temp:= `d`(v1, v2) @signature `Lc/c/g;.d:(I)Ljava/lang/Object;` @kind virtual;
  #L15e84e.  v0:= temp @kind object;
  #L15e850.  if v0 == v3 then goto L15e864;
  #L15e854.  if v3 == 0 then goto L15e86e;
  #L15e858.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15e85e.  v3:= temp;
  #L15e860.  if v3 == 0 then goto L15e86e;
  #L15e864.  call temp:= `a`(v1, v2, v4) @signature `Lc/c/g;.a:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15e86a.  v2:= 1I;
  #L15e86c.  return v2;
  #L15e86e.  v2:= 0I;
  #L15e870.  return v2;
}
procedure `int` `size`(`c.c.g` v1 @kind this) @signature `Lc/c/g;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15eaf4.  v0:= v1.`c.c.g.d` @type ^`int`;
  #L15eaf8.  return v0;
}
procedure `java.lang.String` `toString`(`c.c.g` v4 @kind this) @signature `Lc/c/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15eea8.  call temp:= `isEmpty`(v4) @signature `Lc/c/g;.isEmpty:()Z` @kind virtual;
  #L15eeae.  v0:= temp;
  #L15eeb0.  if v0 == 0 then goto L15eeba;
  #L15eeb4.  v0:= "{}" @kind object;
  #L15eeb8.  return v0 @kind object;
  #L15eeba.  v0:= new `java.lang.StringBuilder`;
  #L15eebe.  v1:= v4.`c.c.g.d` @type ^`int`;
  #L15eec2.  v1:= v1 * 28;
  #L15eec6.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L15eecc.  v1:= 123I;
  #L15eed0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eed6.  v1:= 0I;
  #L15eed8.  v2:= v4.`c.c.g.d` @type ^`int`;
  #L15eedc.  if v1 >= v2 then goto L15ef36;
  #L15eee0.  if v1 <= 0 then goto L15eeee;
  #L15eee4.  v2:= ", " @kind object;
  #L15eee8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eeee.  call temp:= `b`(v4, v1) @signature `Lc/c/g;.b:(I)Ljava/lang/Object;` @kind virtual;
  #L15eef4.  v2:= temp @kind object;
  #L15eef6.  v3:= "(this Map)" @kind object;
  #L15eefa.  if v2 == v4 then goto L15ef06;
  #L15eefe.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ef04.  goto L15ef0c;
  #L15ef06.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ef0c.  v2:= 61I;
  #L15ef10.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ef16.  call temp:= `d`(v4, v1) @signature `Lc/c/g;.d:(I)Ljava/lang/Object;` @kind virtual;
  #L15ef1c.  v2:= temp @kind object;
  #L15ef1e.  if v2 == v4 then goto L15ef2a;
  #L15ef22.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ef28.  goto L15ef30;
  #L15ef2a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ef30.  v1:= v1 + 1;
  #L15ef34.  goto L15eed8;
  #L15ef36.  v1:= 125I;
  #L15ef3a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ef40.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15ef46.  v0:= temp @kind object;
  #L15ef48.  return v0 @kind object;
}
