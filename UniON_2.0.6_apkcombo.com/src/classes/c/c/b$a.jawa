record `c.c.b$a` @kind class @AccessFlag  extends `c.c.f` @kind class {
  `c.c.b` `c.c.b$a.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.c.b$a` v0 @kind this, `c.c.b` v1 @kind object) @signature `Lc/c/b$a;.<init>:(Lc/c/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L15c314.  v0.`c.c.b$a.d` @type ^`c.c.b` := v1 @kind object;
  #L15c318.  call `<init>`(v0) @signature `Lc/c/f;.<init>:()V` @kind direct;
  #L15c31e.  return @kind void;
}
procedure `int` `a`(`c.c.b$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/c/b$a;.a:(Ljava/lang/Object;)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15c274.  v0:= v1.`c.c.b$a.d` @type ^`c.c.b` @kind object;
  #L15c278.  call temp:= `indexOf`(v0, v2) @signature `Lc/c/b;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L15c27e.  v2:= temp;
  #L15c280.  return v2;
}
procedure `java.lang.Object` `a`(`c.c.b$a` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lc/c/b$a;.a:(II)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;

  #L15c2b4.  v2:= v0.`c.c.b$a.d` @type ^`c.c.b` @kind object;
  #L15c2b8.  v2:= v2.`c.c.b.c` @type ^`java.lang.Object`[] @kind object;
  #L15c2bc.  v1:= v2[v1] @kind object;
  #L15c2c0.  return v1 @kind object;
}
procedure `java.lang.Object` `a`(`c.c.b$a` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lc/c/b$a;.a:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;

  #L15c2d4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L15c2d8.  v2:= "not a map" @kind object;
  #L15c2dc.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15c2e2.  throw v1;
}
procedure `void` `a`(`c.c.b$a` v1 @kind this) @signature `Lc/c/b$a;.a:()V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15c330.  v0:= v1.`c.c.b$a.d` @type ^`c.c.b` @kind object;
  #L15c334.  call `clear`(v0) @signature `Lc/c/b;.clear:()V` @kind virtual;
  #L15c33a.  return @kind void;
}
procedure `void` `a`(`c.c.b$a` v1 @kind this, `int` v2 ) @signature `Lc/c/b$a;.a:(I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15c368.  v0:= v1.`c.c.b$a.d` @type ^`c.c.b` @kind object;
  #L15c36c.  call temp:= `i`(v0, v2) @signature `Lc/c/b;.i:(I)Ljava/lang/Object;` @kind virtual;
  #L15c372.  return @kind void;
}
procedure `void` `a`(`c.c.b$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lc/c/b$a;.a:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L15c34c.  v2:= v0.`c.c.b$a.d` @type ^`c.c.b` @kind object;
  #L15c350.  call temp:= `add`(v2, v1) @signature `Lc/c/b;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L15c356.  return @kind void;
}
procedure `int` `b`(`c.c.b$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/c/b$a;.b:(Ljava/lang/Object;)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15c294.  v0:= v1.`c.c.b$a.d` @type ^`c.c.b` @kind object;
  #L15c298.  call temp:= `indexOf`(v0, v2) @signature `Lc/c/b;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L15c29e.  v2:= temp;
  #L15c2a0.  return v2;
}
procedure `java.util.Map` `b`(`c.c.b$a` v2 @kind this) @signature `Lc/c/b$a;.b:()Ljava/util/Map;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L15c2f4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L15c2f8.  v1:= "not a map" @kind object;
  #L15c2fc.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15c302.  throw v0;
}
procedure `int` `c`(`c.c.b$a` v1 @kind this) @signature `Lc/c/b$a;.c:()I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15c258.  v0:= v1.`c.c.b$a.d` @type ^`c.c.b` @kind object;
  #L15c25c.  v0:= v0.`c.c.b.d` @type ^`int`;
  #L15c260.  return v0;
}
