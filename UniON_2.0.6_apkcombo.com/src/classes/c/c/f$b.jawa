record `c.c.f$b` @kind class @AccessFlag FINAL extends `java.util.Set` @kind interface {
  `c.c.f` `c.c.f$b.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.c.f$b` v0 @kind this, `c.c.f` v1 @kind object) @signature `Lc/c/f$b;.<init>:(Lc/c/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L15dbec.  v0.`c.c.f$b.b` @type ^`c.c.f` := v1 @kind object;
  #L15dbf0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15dbf6.  return @kind void;
}
procedure `boolean` `a`(`c.c.f$b` v0 @kind this, `java.util.Map$Entry` v1 @kind object) @signature `Lc/c/f$b;.a:(Ljava/util/Map$Entry;)Z` @AccessFlag PUBLIC {
    temp;

  #L15d948.  v1:= new `java.lang.UnsupportedOperationException`;
  #L15d94c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L15d952.  throw v1;
}
procedure `boolean` `add`(`c.c.f$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/c/f$b;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L15d928.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L15d92c.  call temp:= `a`(v0, v1) @signature `Lc/c/f$b;.a:(Ljava/util/Map$Entry;)Z` @kind virtual;
  #L15d932.  v1:= 0I;
  #L15d934.  throw v1;
}
procedure `boolean` `addAll`(`c.c.f$b` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lc/c/f$b;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15d964.  v0:= v4.`c.c.f$b.b` @type ^`c.c.f` @kind object;
  #L15d968.  call temp:= `c`(v0) @signature `Lc/c/f;.c:()I` @kind virtual;
  #L15d96e.  v0:= temp;
  #L15d970.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15d976.  v5:= temp @kind object;
  #L15d978.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15d97e.  v1:= temp;
  #L15d980.  if v1 == 0 then goto L15d9ac;
  #L15d984.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15d98a.  v1:= temp @kind object;
  #L15d98c.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L15d990.  v2:= v4.`c.c.f$b.b` @type ^`c.c.f` @kind object;
  #L15d994.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L15d99a.  v3:= temp @kind object;
  #L15d99c.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L15d9a2.  v1:= temp @kind object;
  #L15d9a4.  call `a`(v2, v3, v1) @signature `Lc/c/f;.a:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L15d9aa.  goto L15d978;
  #L15d9ac.  v5:= v4.`c.c.f$b.b` @type ^`c.c.f` @kind object;
  #L15d9b0.  call temp:= `c`(v5) @signature `Lc/c/f;.c:()I` @kind virtual;
  #L15d9b6.  v5:= temp;
  #L15d9b8.  if v0 == v5 then goto L15d9c0;
  #L15d9bc.  v5:= 1I;
  #L15d9be.  goto L15d9c2;
  #L15d9c0.  v5:= 0I;
  #L15d9c2.  return v5;
}
procedure `void` `clear`(`c.c.f$b` v1 @kind this) @signature `Lc/c/f$b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15dc08.  v0:= v1.`c.c.f$b.b` @type ^`c.c.f` @kind object;
  #L15dc0c.  call `a`(v0) @signature `Lc/c/f;.a:()V` @kind virtual;
  #L15dc12.  return @kind void;
}
procedure `boolean` `contains`(`c.c.f$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lc/c/f$b;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15d9d4.  v0:= instanceof @variable v4 @type ^`java.util.Map$Entry` @kind boolean;
  #L15d9d8.  v1:= 0I;
  #L15d9da.  if v0 != 0 then goto L15d9e0;
  #L15d9de.  return v1;
  #L15d9e0.  v4:= (`java.util.Map$Entry`) v4 @kind object;
  #L15d9e4.  v0:= v3.`c.c.f$b.b` @type ^`c.c.f` @kind object;
  #L15d9e8.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L15d9ee.  v2:= temp @kind object;
  #L15d9f0.  call temp:= `a`(v0, v2) @signature `Lc/c/f;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L15d9f6.  v0:= temp;
  #L15d9f8.  if v0 >= 0 then goto L15d9fe;
  #L15d9fc.  return v1;
  #L15d9fe.  v1:= v3.`c.c.f$b.b` @type ^`c.c.f` @kind object;
  #L15da02.  v2:= 1I;
  #L15da04.  call temp:= `a`(v1, v0, v2) @signature `Lc/c/f;.a:(II)Ljava/lang/Object;` @kind virtual;
  #L15da0a.  v0:= temp @kind object;
  #L15da0c.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L15da12.  v4:= temp @kind object;
  #L15da14.  call temp:= `a`(v0, v4) @signature `Lc/c/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L15da1a.  v4:= temp;
  #L15da1c.  return v4;
}
procedure `boolean` `containsAll`(`c.c.f$b` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lc/c/f$b;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15da30.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15da36.  v2:= temp @kind object;
  #L15da38.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15da3e.  v0:= temp;
  #L15da40.  if v0 == 0 then goto L15da5c;
  #L15da44.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15da4a.  v0:= temp @kind object;
  #L15da4c.  call temp:= `contains`(v1, v0) @signature `Lc/c/f$b;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L15da52.  v0:= temp;
  #L15da54.  if v0 != 0 then goto L15da38;
  #L15da58.  v2:= 0I;
  #L15da5a.  return v2;
  #L15da5c.  v2:= 1I;
  #L15da5e.  return v2;
}
procedure `boolean` `equals`(`c.c.f$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/c/f$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L15da70.  call temp:= `a`(v0, v1) @signature `Lc/c/f;.a:(Ljava/util/Set;Ljava/lang/Object;)Z` @kind static;
  #L15da76.  v1:= temp;
  #L15da78.  return v1;
}
procedure `int` `hashCode`(`c.c.f$b` v6 @kind this) @signature `Lc/c/f$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15db08.  v0:= v6.`c.c.f$b.b` @type ^`c.c.f` @kind object;
  #L15db0c.  call temp:= `c`(v0) @signature `Lc/c/f;.c:()I` @kind virtual;
  #L15db12.  v0:= temp;
  #L15db14.  v1:= 1I;
  #L15db16.  v0:= v0 - v1 @kind int;
  #L15db18.  v2:= 0I;
  #L15db1a.  v3:= 0I;
  #L15db1c.  if v0 < 0 then goto L15db62;
  #L15db20.  v4:= v6.`c.c.f$b.b` @type ^`c.c.f` @kind object;
  #L15db24.  call temp:= `a`(v4, v0, v2) @signature `Lc/c/f;.a:(II)Ljava/lang/Object;` @kind virtual;
  #L15db2a.  v4:= temp @kind object;
  #L15db2c.  v5:= v6.`c.c.f$b.b` @type ^`c.c.f` @kind object;
  #L15db30.  call temp:= `a`(v5, v0, v1) @signature `Lc/c/f;.a:(II)Ljava/lang/Object;` @kind virtual;
  #L15db36.  v5:= temp @kind object;
  #L15db38.  if v4 != 0 then goto L15db40;
  #L15db3c.  v4:= 0I;
  #L15db3e.  goto L15db48;
  #L15db40.  call temp:= `hashCode`(v4) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L15db46.  v4:= temp;
  #L15db48.  if v5 != 0 then goto L15db50;
  #L15db4c.  v5:= 0I;
  #L15db4e.  goto L15db58;
  #L15db50.  call temp:= `hashCode`(v5) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L15db56.  v5:= temp;
  #L15db58.  v4:= v4 ^~ v5 @kind int;
  #L15db5a.  v3:= v3 + v4 @kind int;
  #L15db5c.  v0:= v0 + -1;
  #L15db60.  goto L15db1c;
  #L15db62.  return v3;
}
procedure `boolean` `isEmpty`(`c.c.f$b` v1 @kind this) @signature `Lc/c/f$b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15da8c.  v0:= v1.`c.c.f$b.b` @type ^`c.c.f` @kind object;
  #L15da90.  call temp:= `c`(v0) @signature `Lc/c/f;.c:()I` @kind virtual;
  #L15da96.  v0:= temp;
  #L15da98.  if v0 != 0 then goto L15daa0;
  #L15da9c.  v0:= 1I;
  #L15da9e.  goto L15daa2;
  #L15daa0.  v0:= 0I;
  #L15daa2.  return v0;
}
procedure `java.util.Iterator` `iterator`(`c.c.f$b` v2 @kind this) @signature `Lc/c/f$b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15dbcc.  v0:= new `c.c.f$d`;
  #L15dbd0.  v1:= v2.`c.c.f$b.b` @type ^`c.c.f` @kind object;
  #L15dbd4.  call `<init>`(v0, v1) @signature `Lc/c/f$d;.<init>:(Lc/c/f;)V` @kind direct;
  #L15dbda.  return v0 @kind object;
}
procedure `boolean` `remove`(`c.c.f$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/c/f$b;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L15dab4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L15dab8.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L15dabe.  throw v1;
}
procedure `boolean` `removeAll`(`c.c.f$b` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lc/c/f$b;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L15dad0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L15dad4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L15dada.  throw v1;
}
procedure `boolean` `retainAll`(`c.c.f$b` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lc/c/f$b;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L15daec.  v1:= new `java.lang.UnsupportedOperationException`;
  #L15daf0.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L15daf6.  throw v1;
}
procedure `int` `size`(`c.c.f$b` v1 @kind this) @signature `Lc/c/f$b;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15db74.  v0:= v1.`c.c.f$b.b` @type ^`c.c.f` @kind object;
  #L15db78.  call temp:= `c`(v0) @signature `Lc/c/f;.c:()I` @kind virtual;
  #L15db7e.  v0:= temp;
  #L15db80.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`c.c.f$b` v1 @kind this) @signature `Lc/c/f$b;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15db94.  v0:= new `java.lang.UnsupportedOperationException`;
  #L15db98.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L15db9e.  throw v0;
}
procedure `java.lang.Object`[] `toArray`(`c.c.f$b` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lc/c/f$b;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L15dbb0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L15dbb4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L15dbba.  throw v1;
}
