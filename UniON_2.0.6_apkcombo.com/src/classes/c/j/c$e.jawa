record `c.j.c$e` @kind class @AccessFlag  {
  `boolean` `c.j.c$e.a` @AccessFlag FINAL;
  `long` `c.j.c$e.b` @AccessFlag ;
  `long` `c.j.c$e.c` @AccessFlag ;
  `long` `c.j.c$e.d` @AccessFlag ;
  `long` `c.j.c$e.e` @AccessFlag ;
  `long` `c.j.c$e.f` @AccessFlag ;
  `boolean` `c.j.c$e.g` @AccessFlag ;
  `c.j.c` `c.j.c$e.h` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.j.c$e` v2 @kind this, `c.j.c` v3 @kind object, `boolean` v4 ) @signature `Lc/j/c$e;.<init>:(Lc/j/c;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1aa8c4.  v2.`c.j.c$e.h` @type ^`c.j.c` := v3 @kind object;
  #L1aa8c8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1aa8ce.  v0:= -1L;
  #L1aa8d2.  v2.`c.j.c$e.b` @type ^`long` := v0 @kind wide;
  #L1aa8d6.  v2.`c.j.c$e.c` @type ^`long` := v0 @kind wide;
  #L1aa8da.  v2.`c.j.c$e.d` @type ^`long` := v0 @kind wide;
  #L1aa8de.  v2.`c.j.c$e.e` @type ^`long` := v0 @kind wide;
  #L1aa8e2.  v2.`c.j.c$e.f` @type ^`long` := v0 @kind wide;
  #L1aa8e6.  v2.`c.j.c$e.a` @type ^`boolean` := v4 @kind boolean;
  #L1aa8ea.  return @kind void;
}
procedure `void` `a`(`c.j.c$e` v2 @kind this) @signature `Lc/j/c$e;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1aa8fc.  v0:= v2.`c.j.c$e.h` @type ^`c.j.c` @kind object;
  #L1aa900.  v0:= v0.`c.j.c.e` @type ^`android.os.Handler` @kind object;
  #L1aa904.  v1:= new `c.j.c$e$a`;
  #L1aa908.  call `<init>`(v1, v2) @signature `Lc/j/c$e$a;.<init>:(Lc/j/c$e;)V` @kind direct;
  #L1aa90e.  call temp:= `post`(v0, v1) @signature `Landroid/os/Handler;.post:(Ljava/lang/Runnable;)Z` @kind virtual;
  #L1aa914.  v0:= 1I;
  #L1aa916.  v2.`c.j.c$e.g` @type ^`boolean` := v0 @kind boolean;
  #L1aa91a.  return @kind void;
}
procedure `void` `b`(`c.j.c$e` v7 @kind this) @signature `Lc/j/c$e;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1aa92c.  v0:= v7.`c.j.c$e.g` @type ^`boolean` @kind boolean;
  #L1aa930.  if v0 == 0 then goto L1aa936;
  #L1aa934.  return @kind void;
  #L1aa936.  v0:= v7.`c.j.c$e.d` @type ^`long` @kind wide;
  #L1aa93a.  v2:= 0L;
  #L1aa93e.  v4:= lcmp(v0, v2);
  #L1aa942.  if v4 >= 0 then goto L1aa976;
  #L1aa946.  v0:= v7.`c.j.c$e.b` @type ^`long` @kind wide;
  #L1aa94a.  v4:= lcmp(v0, v2);
  #L1aa94e.  if v4 < 0 then goto L1aa976;
  #L1aa952.  v4:= v7.`c.j.c$e.c` @type ^`long` @kind wide;
  #L1aa956.  v6:= lcmp(v4, v0);
  #L1aa95a.  if v6 < 0 then goto L1aa976;
  #L1aa95e.  v0:= v7.`c.j.c$e.e` @type ^`long` @kind wide;
  #L1aa962.  v4:= lcmp(v0, v2);
  #L1aa966.  if v4 >= 0 then goto L1aa972;
  #L1aa96a.  call `a`(v7) @signature `Lc/j/c$e;.a:()V` @kind direct;
  #L1aa970.  return @kind void;
  #L1aa972.  v7.`c.j.c$e.d` @type ^`long` := v0 @kind wide;
  #L1aa976.  v0:= v7.`c.j.c$e.d` @type ^`long` @kind wide;
  #L1aa97a.  v4:= lcmp(v0, v2);
  #L1aa97e.  if v4 < 0 then goto L1aa994;
  #L1aa982.  v2:= v7.`c.j.c$e.f` @type ^`long` @kind wide;
  #L1aa986.  v4:= lcmp(v0, v2);
  #L1aa98a.  if v4 > 0 then goto L1aa994;
  #L1aa98e.  call `a`(v7) @signature `Lc/j/c$e;.a:()V` @kind direct;
  #L1aa994.  return @kind void;
}
procedure `void` `a`(`c.j.c$e` v5 @kind this, `long` v6 ) @signature `Lc/j/c$e;.a:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1aa9a8.  @monitorenter v5
  #L1aa9aa.  v0:= v5.`c.j.c$e.a` @type ^`boolean` @kind boolean;
  #L1aa9ae.  v1:= 0L;
  #L1aa9b2.  if v0 == 0 then goto L1aa9c8;
  #L1aa9b6.  v3:= v5.`c.j.c$e.b` @type ^`long` @kind wide;
  #L1aa9ba.  v0:= lcmp(v3, v1);
  #L1aa9be.  if v0 >= 0 then goto L1aa9de;
  #L1aa9c2.  v5.`c.j.c$e.b` @type ^`long` := v6 @kind wide;
  #L1aa9c6.  goto L1aa9de;
  #L1aa9c8.  v3:= v5.`c.j.c$e.d` @type ^`long` @kind wide;
  #L1aa9cc.  v0:= lcmp(v3, v1);
  #L1aa9d0.  if v0 >= 0 then goto L1aa9de;
  #L1aa9d4.  v0:= 1000L;
  #L1aa9d8.  v6:= v6 / v0 @kind long;
  #L1aa9da.  v5.`c.j.c$e.d` @type ^`long` := v6 @kind wide;
  #L1aa9de.  call `b`(v5) @signature `Lc/j/c$e;.b:()V` @kind direct;
  #L1aa9e4.  @monitorexit v5
  #L1aa9e6.  return @kind void;
  #L1aa9e8.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1aa9ea.  @monitorexit v5
  #L1aa9ec.  throw v6;
  catch `java.lang.Throwable` @[L1aa9aa..L1aa9e4] goto L1aa9e8;
}
procedure `boolean` `a`(`c.j.c$e` v5 @kind this, `long` v6 , `long` v8 ) @signature `Lc/j/c$e;.a:(JJ)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1aa864.  @monitorenter v5
  #L1aa866.  v0:= v5.`c.j.c$e.b` @type ^`long` @kind wide;
  #L1aa86a.  v2:= 0L;
  #L1aa86e.  v4:= lcmp(v0, v2);
  #L1aa872.  if v4 < 0 then goto L1aa888;
  #L1aa876.  v0:= v5.`c.j.c$e.b` @type ^`long` @kind wide;
  #L1aa87a.  v2:= lcmp(v6, v0);
  #L1aa87e.  if v2 > 0 then goto L1aa884;
  #L1aa882.  goto L1aa888;
  #L1aa884.  v0:= 0I;
  #L1aa886.  goto L1aa88a;
  #L1aa888.  v0:= 1I;
  #L1aa88a.  if v0 == 0 then goto L1aa892;
  #L1aa88e.  v5.`c.j.c$e.e` @type ^`long` := v8 @kind wide;
  #L1aa892.  v5.`c.j.c$e.c` @type ^`long` := v6 @kind wide;
  #L1aa896.  call `b`(v5) @signature `Lc/j/c$e;.b:()V` @kind direct;
  #L1aa89c.  @monitorexit v5
  #L1aa89e.  return v0;
  #L1aa8a0.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1aa8a2.  @monitorexit v5
  #L1aa8a4.  throw v6;
  catch `java.lang.Throwable` @[L1aa866..L1aa89c] goto L1aa8a0;
}
procedure `void` `b`(`c.j.c$e` v0 @kind this, `long` v1 ) @signature `Lc/j/c$e;.b:(J)V` @AccessFlag  {
    temp;

  #L1aaa0c.  @monitorenter v0
  #L1aaa0e.  v0.`c.j.c$e.f` @type ^`long` := v1 @kind wide;
  #L1aaa12.  call `b`(v0) @signature `Lc/j/c$e;.b:()V` @kind direct;
  #L1aaa18.  @monitorexit v0
  #L1aaa1a.  return @kind void;
  #L1aaa1c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1aaa1e.  @monitorexit v0
  #L1aaa20.  throw v1;
  catch `java.lang.Throwable` @[L1aaa0e..L1aaa18] goto L1aaa1c;
}
