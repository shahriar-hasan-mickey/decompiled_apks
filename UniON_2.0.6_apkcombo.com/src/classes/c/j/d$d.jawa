record `c.j.d$d` @kind class @AccessFlag  {
  `boolean` `c.j.d$d.a` @AccessFlag PRIVATE;
  `java.lang.Exception` `c.j.d$d.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.j.d$d` v0 @kind this) @signature `Lc/j/d$d;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1abc48.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1abc4e.  return @kind void;
}
procedure `void` `a`(`c.j.d$d` v6 @kind this, `long` v7 ) @signature `Lc/j/d$d;.a:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1abca0.  @monitorenter v6
  #L1abca2.  v0:= 0L;
  #L1abca6.  v2:= lcmp(v7, v0);
  #L1abcaa.  if v2 < 0 then goto L1abd20;
  #L1abcae.  if v2 != 0 then goto L1abcc2;
  #L1abcb2.  v7:= v6.`c.j.d$d.a` @type ^`boolean` @kind boolean;
  #L1abcb6.  if v7 != 0 then goto L1abcee;
  #L1abcba.  call `wait`(v6) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #L1abcc0.  goto L1abcb2;
  #L1abcc2.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L1abcc8.  v2:= temp @kind wide;
  #L1abcca.  v4:= v6.`c.j.d$d.a` @type ^`boolean` @kind boolean;
  #L1abcce.  if v4 != 0 then goto L1abcee;
  #L1abcd2.  v4:= lcmp(v7, v0);
  #L1abcd6.  if v4 <= 0 then goto L1abcee;
  #L1abcda.  call `wait`(v6, v7) @signature `Ljava/lang/Object;.wait:(J)V` @kind virtual;
  #L1abce0.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L1abce6.  v4:= temp @kind wide;
  #L1abce8.  v4:= v4 - v2 @kind long;
  #L1abcea.  v7:= v7 - v4 @kind long;
  #L1abcec.  goto L1abcca;
  #L1abcee.  v7:= v6.`c.j.d$d.a` @type ^`boolean` @kind boolean;
  #L1abcf2.  if v7 != 0 then goto L1abd0e;
  #L1abcf6.  v7:= 1I;
  #L1abcf8.  v6.`c.j.d$d.a` @type ^`boolean` := v7 @kind boolean;
  #L1abcfc.  v7:= new `java.util.concurrent.TimeoutException`;
  #L1abd00.  v8:= "timed out waiting for result" @kind object;
  #L1abd04.  call `<init>`(v7, v8) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1abd0a.  v6.`c.j.d$d.b` @type ^`java.lang.Exception` := v7 @kind object;
  #L1abd0e.  v7:= v6.`c.j.d$d.b` @type ^`java.lang.Exception` @kind object;
  #L1abd12.  if v7 != 0 then goto L1abd1a;
  #L1abd16.  @monitorexit v6
  #L1abd18.  return @kind void;
  #L1abd1a.  v7:= v6.`c.j.d$d.b` @type ^`java.lang.Exception` @kind object;
  #L1abd1e.  throw v7;
  #L1abd20.  v7:= new `java.lang.IllegalArgumentException`;
  #L1abd24.  v8:= "timeoutMs is negative" @kind object;
  #L1abd28.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1abd2e.  throw v7;
  #L1abd30.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1abd32.  @monitorexit v6
  #L1abd34.  throw v7;
  catch `java.lang.Throwable` @[L1abcb2..L1abcb6] goto L1abd30;
  catch `java.lang.InterruptedException` @[L1abcba..L1abcc0] goto L1abcb2;
  catch `java.lang.Throwable` @[L1abcba..L1abcc0] goto L1abd30;
  catch `java.lang.Throwable` @[L1abcc2..L1abcce] goto L1abd30;
  catch `java.lang.InterruptedException` @[L1abcda..L1abce0] goto L1abce0;
  catch `java.lang.Throwable` @[L1abcda..L1abce0] goto L1abd30;
  catch `java.lang.Throwable` @[L1abce0..L1abd12] goto L1abd30;
  catch `java.lang.Throwable` @[L1abd1a..L1abd30] goto L1abd30;
}
procedure `void` `a`(`c.j.d$d` v1 @kind this, `java.lang.Exception` v2 @kind object) @signature `Lc/j/d$d;.a:(Ljava/lang/Exception;)V` @AccessFlag  {
    temp;
    v0;

  #L1abc60.  @monitorenter v1
  #L1abc62.  v0:= v1.`c.j.d$d.a` @type ^`boolean` @kind boolean;
  #L1abc66.  if v0 != 0 then goto L1abc7a;
  #L1abc6a.  v0:= 1I;
  #L1abc6c.  v1.`c.j.d$d.a` @type ^`boolean` := v0 @kind boolean;
  #L1abc70.  v1.`c.j.d$d.b` @type ^`java.lang.Exception` := v2 @kind object;
  #L1abc74.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1abc7a.  @monitorexit v1
  #L1abc7c.  return @kind void;
  #L1abc7e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1abc80.  @monitorexit v1
  #L1abc82.  throw v2;
  catch `java.lang.Throwable` @[L1abc62..L1abc7a] goto L1abc7e;
}
