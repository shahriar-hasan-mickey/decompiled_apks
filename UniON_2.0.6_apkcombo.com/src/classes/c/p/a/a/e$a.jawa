record `c.p.a.a.e$a` @kind class @AccessFlag  extends `android.animation.TypeEvaluator` @kind interface {
  `c.e.i.c$b`[] `c.p.a.a.e$a.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.p.a.a.e$a` v0 @kind this) @signature `Lc/p/a/a/e$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1ba1c4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ba1ca.  return @kind void;
}
procedure `c.e.i.c$b`[] `a`(`c.p.a.a.e$a` v4 @kind this, `float` v5 , `c.e.i.c$b`[] v6 @kind object, `c.e.i.c$b`[] v7 @kind object) @signature `Lc/p/a/a/e$a;.a:(F[Lc/e/i/c$b;[Lc/e/i/c$b;)[Lc/e/i/c$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ba12c.  call temp:= `a`(v6, v7) @signature `Lc/e/i/c;.a:([Lc/e/i/c$b;[Lc/e/i/c$b;)Z` @kind static;
  #L1ba132.  v0:= temp;
  #L1ba134.  if v0 == 0 then goto L1ba17e;
  #L1ba138.  v0:= v4.`c.p.a.a.e$a.a` @type ^`c.e.i.c$b`[] @kind object;
  #L1ba13c.  call temp:= `a`(v0, v6) @signature `Lc/e/i/c;.a:([Lc/e/i/c$b;[Lc/e/i/c$b;)Z` @kind static;
  #L1ba142.  v0:= temp;
  #L1ba144.  if v0 != 0 then goto L1ba154;
  #L1ba148.  call temp:= `a`(v6) @signature `Lc/e/i/c;.a:([Lc/e/i/c$b;)[Lc/e/i/c$b;` @kind static;
  #L1ba14e.  v0:= temp @kind object;
  #L1ba150.  v4.`c.p.a.a.e$a.a` @type ^`c.e.i.c$b`[] := v0 @kind object;
  #L1ba154.  v0:= 0I;
  #L1ba156.  v1:= length @variable v6;
  #L1ba158.  if v0 >= v1 then goto L1ba178;
  #L1ba15c.  v1:= v4.`c.p.a.a.e$a.a` @type ^`c.e.i.c$b`[] @kind object;
  #L1ba160.  v1:= v1[v0] @kind object;
  #L1ba164.  v2:= v6[v0] @kind object;
  #L1ba168.  v3:= v7[v0] @kind object;
  #L1ba16c.  call `a`(v1, v2, v3, v5) @signature `Lc/e/i/c$b;.a:(Lc/e/i/c$b;Lc/e/i/c$b;F)V` @kind virtual;
  #L1ba172.  v0:= v0 + 1;
  #L1ba176.  goto L1ba156;
  #L1ba178.  v5:= v4.`c.p.a.a.e$a.a` @type ^`c.e.i.c$b`[] @kind object;
  #L1ba17c.  return v5 @kind object;
  #L1ba17e.  v5:= new `java.lang.IllegalArgumentException`;
  #L1ba182.  v6:= "Can't interpolate between two incompatible pathData" @kind object;
  #L1ba186.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ba18c.  throw v5;
}
procedure `java.lang.Object` `evaluate`(`c.p.a.a.e$a` v0 @kind this, `float` v1 , `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lc/p/a/a/e$a;.evaluate:(FLjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1ba1a0.  v2:= (`c.e.i.c$b`[]) v2 @kind object;
  #L1ba1a4.  v3:= (`c.e.i.c$b`[]) v3 @kind object;
  #L1ba1a8.  call temp:= `a`(v0, v1, v2, v3) @signature `Lc/p/a/a/e$a;.a:(F[Lc/e/i/c$b;[Lc/e/i/c$b;)[Lc/e/i/c$b;` @kind virtual;
  #L1ba1ae.  v1:= temp @kind object;
  #L1ba1b0.  return v1 @kind object;
}
