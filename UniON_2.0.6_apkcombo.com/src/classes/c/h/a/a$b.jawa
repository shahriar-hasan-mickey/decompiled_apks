record `c.h.a.a$b` @kind class @AccessFlag  extends `java.io.InputStream` @kind class, `java.io.DataInput` @kind interface {
  `java.io.DataInputStream` `c.h.a.a$b.b` @AccessFlag PRIVATE;
  `java.nio.ByteOrder` `c.h.a.a$b.c` @AccessFlag PRIVATE;
  `int` `c.h.a.a$b.d` @AccessFlag FINAL;
  `int` `c.h.a.a$b.e` @AccessFlag ;
}
global `java.nio.ByteOrder` `@@c.h.a.a$b.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.ByteOrder` `@@c.h.a.a$b.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lc/h/a/a$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L18eae0.  v0:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L18eae4.  `@@c.h.a.a$b.f` @type ^`java.nio.ByteOrder` := v0 @kind object;
  #L18eae8.  v0:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L18eaec.  `@@c.h.a.a$b.g` @type ^`java.nio.ByteOrder` := v0 @kind object;
  #L18eaf0.  return @kind void;
}
procedure `void` `<init>`(`c.h.a.a$b` v1 @kind this, `java.io.InputStream` v2 @kind object) @signature `Lc/h/a/a$b;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L18eb28.  v0:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L18eb2c.  call `<init>`(v1, v2, v0) @signature `Lc/h/a/a$b;.<init>:(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V` @kind direct;
  #L18eb32.  return @kind void;
}
procedure `void` `<init>`(`c.h.a.a$b` v1 @kind this, `java.io.InputStream` v2 @kind object, `java.nio.ByteOrder` v3 @kind object) @signature `Lc/h/a/a$b;.<init>:(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L18eb44.  call `<init>`(v1) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L18eb4a.  v0:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L18eb4e.  v1.`c.h.a.a$b.c` @type ^`java.nio.ByteOrder` := v0 @kind object;
  #L18eb52.  v0:= new `java.io.DataInputStream`;
  #L18eb56.  call `<init>`(v0, v2) @signature `Ljava/io/DataInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L18eb5c.  v1.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` := v0 @kind object;
  #L18eb60.  v2:= v1.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18eb64.  call temp:= `available`(v2) @signature `Ljava/io/DataInputStream;.available:()I` @kind virtual;
  #L18eb6a.  v2:= temp;
  #L18eb6c.  v1.`c.h.a.a$b.d` @type ^`int` := v2;
  #L18eb70.  v2:= 0I;
  #L18eb72.  v1.`c.h.a.a$b.e` @type ^`int` := v2;
  #L18eb76.  v2:= v1.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18eb7a.  v0:= v1.`c.h.a.a$b.d` @type ^`int`;
  #L18eb7e.  call `mark`(v2, v0) @signature `Ljava/io/DataInputStream;.mark:(I)V` @kind virtual;
  #L18eb84.  v1.`c.h.a.a$b.c` @type ^`java.nio.ByteOrder` := v3 @kind object;
  #L18eb88.  return @kind void;
}
procedure `void` `<init>`(`c.h.a.a$b` v1 @kind this, `byte`[] v2 @kind object) @signature `Lc/h/a/a$b;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L18eb04.  v0:= new `java.io.ByteArrayInputStream`;
  #L18eb08.  call `<init>`(v0, v2) @signature `Ljava/io/ByteArrayInputStream;.<init>:([B)V` @kind direct;
  #L18eb0e.  call `<init>`(v1, v0) @signature `Lc/h/a/a$b;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L18eb14.  return @kind void;
}
procedure `void` `a`(`c.h.a.a$b` v0 @kind this, `java.nio.ByteOrder` v1 @kind object) @signature `Lc/h/a/a$b;.a:(Ljava/nio/ByteOrder;)V` @AccessFlag PUBLIC {
    temp;

  #L18ece4.  v0.`c.h.a.a$b.c` @type ^`java.nio.ByteOrder` := v1 @kind object;
  #L18ece8.  return @kind void;
}
procedure `int` `available`(`c.h.a.a$b` v1 @kind this) @signature `Lc/h/a/a$b;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18e55c.  v0:= v1.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e560.  call temp:= `available`(v0) @signature `Ljava/io/DataInputStream;.available:()I` @kind virtual;
  #L18e566.  v0:= temp;
  #L18e568.  return v0;
}
procedure `void` `f`(`c.h.a.a$b` v4 @kind this, `long` v5 ) @signature `Lc/h/a/a$b;.f:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L18ec80.  v0:= v4.`c.h.a.a$b.e` @type ^`int`;
  #L18ec84.  v1:= (`long`) v0 @kind i2l;
  #L18ec86.  v3:= lcmp(v1, v5);
  #L18ec8a.  if v3 <= 0 then goto L18ecae;
  #L18ec8e.  v0:= 0I;
  #L18ec90.  v4.`c.h.a.a$b.e` @type ^`int` := v0;
  #L18ec94.  v0:= v4.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18ec98.  call `reset`(v0) @signature `Ljava/io/DataInputStream;.reset:()V` @kind virtual;
  #L18ec9e.  v0:= v4.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18eca2.  v1:= v4.`c.h.a.a$b.d` @type ^`int`;
  #L18eca6.  call `mark`(v0, v1) @signature `Ljava/io/DataInputStream;.mark:(I)V` @kind virtual;
  #L18ecac.  goto L18ecb2;
  #L18ecae.  v0:= (`long`) v0 @kind i2l;
  #L18ecb0.  v5:= v5 - v0 @kind long;
  #L18ecb2.  v6:= (`int`) v5 @kind l2i;
  #L18ecb4.  call temp:= `skipBytes`(v4, v6) @signature `Lc/h/a/a$b;.skipBytes:(I)I` @kind virtual;
  #L18ecba.  v5:= temp;
  #L18ecbc.  if v5 != v6 then goto L18ecc2;
  #L18ecc0.  return @kind void;
  #L18ecc2.  v5:= new `java.io.IOException`;
  #L18ecc6.  v6:= "Couldn't seek up to the byteCount" @kind object;
  #L18ecca.  call `<init>`(v5, v6) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18ecd0.  throw v5;
}
procedure `int` `k`(`c.h.a.a$b` v1 @kind this) @signature `Lc/h/a/a$b;.k:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18e57c.  v0:= v1.`c.h.a.a$b.d` @type ^`int`;
  #L18e580.  return v0;
}
procedure `int` `l`(`c.h.a.a$b` v1 @kind this) @signature `Lc/h/a/a$b;.l:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18e594.  v0:= v1.`c.h.a.a$b.e` @type ^`int`;
  #L18e598.  return v0;
}
procedure `long` `m`(`c.h.a.a$b` v4 @kind this) @signature `Lc/h/a/a$b;.m:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L18e9fc.  call temp:= `readInt`(v4) @signature `Lc/h/a/a$b;.readInt:()I` @kind virtual;
  #L18ea02.  v0:= temp;
  #L18ea04.  v0:= (`long`) v0 @kind i2l;
  #L18ea06.  v2:= 4294967295L;
  #L18ea10.  v0:= v0 ^& v2 @kind long;
  #L18ea12.  return v0 @kind wide;
}
procedure `void` `mark`(`c.h.a.a$b` v1 @kind this, `int` v2 ) @signature `Lc/h/a/a$b;.mark:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18eb9c.  @monitorenter v1
  #L18eb9e.  v0:= v1.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18eba2.  call `mark`(v0, v2) @signature `Ljava/io/DataInputStream;.mark:(I)V` @kind virtual;
  #L18eba8.  @monitorexit v1
  #L18ebaa.  return @kind void;
  #L18ebac.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L18ebae.  @monitorexit v1
  #L18ebb0.  throw v2;
  catch `java.lang.Throwable` @[L18eb9e..L18eba8] goto L18ebac;
}
procedure `int` `read`(`c.h.a.a$b` v1 @kind this) @signature `Lc/h/a/a$b;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18e5ac.  v0:= v1.`c.h.a.a$b.e` @type ^`int`;
  #L18e5b0.  v0:= v0 + 1;
  #L18e5b4.  v1.`c.h.a.a$b.e` @type ^`int` := v0;
  #L18e5b8.  v0:= v1.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e5bc.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18e5c2.  v0:= temp;
  #L18e5c4.  return v0;
}
procedure `int` `read`(`c.h.a.a$b` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lc/h/a/a$b;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18e5d8.  v0:= v1.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e5dc.  call temp:= `read`(v0, v2, v3, v4) @signature `Ljava/io/DataInputStream;.read:([BII)I` @kind virtual;
  #L18e5e2.  v2:= temp;
  #L18e5e4.  v3:= v1.`c.h.a.a$b.e` @type ^`int`;
  #L18e5e8.  v3:= v3 + v2 @kind int;
  #L18e5ea.  v1.`c.h.a.a$b.e` @type ^`int` := v3;
  #L18e5ee.  return v2;
}
procedure `boolean` `readBoolean`(`c.h.a.a$b` v1 @kind this) @signature `Lc/h/a/a$b;.readBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18e468.  v0:= v1.`c.h.a.a$b.e` @type ^`int`;
  #L18e46c.  v0:= v0 + 1;
  #L18e470.  v1.`c.h.a.a$b.e` @type ^`int` := v0;
  #L18e474.  v0:= v1.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e478.  call temp:= `readBoolean`(v0) @signature `Ljava/io/DataInputStream;.readBoolean:()Z` @kind virtual;
  #L18e47e.  v0:= temp;
  #L18e480.  return v0;
}
procedure `byte` `readByte`(`c.h.a.a$b` v2 @kind this) @signature `Lc/h/a/a$b;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L18e494.  v0:= v2.`c.h.a.a$b.e` @type ^`int`;
  #L18e498.  v0:= v0 + 1;
  #L18e49c.  v2.`c.h.a.a$b.e` @type ^`int` := v0;
  #L18e4a0.  v0:= v2.`c.h.a.a$b.e` @type ^`int`;
  #L18e4a4.  v1:= v2.`c.h.a.a$b.d` @type ^`int`;
  #L18e4a8.  if v0 > v1 then goto L18e4cc;
  #L18e4ac.  v0:= v2.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e4b0.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18e4b6.  v0:= temp;
  #L18e4b8.  if v0 < 0 then goto L18e4c0;
  #L18e4bc.  v0:= (`byte`) v0 @kind i2b;
  #L18e4be.  return v0;
  #L18e4c0.  v0:= new `java.io.EOFException`;
  #L18e4c4.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L18e4ca.  throw v0;
  #L18e4cc.  v0:= new `java.io.EOFException`;
  #L18e4d0.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L18e4d6.  throw v0;
}
procedure `char` `readChar`(`c.h.a.a$b` v1 @kind this) @signature `Lc/h/a/a$b;.readChar:()C` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18e4e8.  v0:= v1.`c.h.a.a$b.e` @type ^`int`;
  #L18e4ec.  v0:= v0 + 2;
  #L18e4f0.  v1.`c.h.a.a$b.e` @type ^`int` := v0;
  #L18e4f4.  v0:= v1.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e4f8.  call temp:= `readChar`(v0) @signature `Ljava/io/DataInputStream;.readChar:()C` @kind virtual;
  #L18e4fe.  v0:= temp;
  #L18e500.  return v0;
}
procedure `double` `readDouble`(`c.h.a.a$b` v2 @kind this) @signature `Lc/h/a/a$b;.readDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L18e514.  call temp:= `readLong`(v2) @signature `Lc/h/a/a$b;.readLong:()J` @kind virtual;
  #L18e51a.  v0:= temp @kind wide;
  #L18e51c.  call temp:= `longBitsToDouble`(v0) @signature `Ljava/lang/Double;.longBitsToDouble:(J)D` @kind static;
  #L18e522.  v0:= temp @kind wide;
  #L18e524.  return v0 @kind wide;
}
procedure `float` `readFloat`(`c.h.a.a$b` v1 @kind this) @signature `Lc/h/a/a$b;.readFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18e538.  call temp:= `readInt`(v1) @signature `Lc/h/a/a$b;.readInt:()I` @kind virtual;
  #L18e53e.  v0:= temp;
  #L18e540.  call temp:= `intBitsToFloat`(v0) @signature `Ljava/lang/Float;.intBitsToFloat:(I)F` @kind static;
  #L18e546.  v0:= temp;
  #L18e548.  return v0;
}
procedure `void` `readFully`(`c.h.a.a$b` v3 @kind this, `byte`[] v4 @kind object) @signature `Lc/h/a/a$b;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L18ebd0.  v0:= v3.`c.h.a.a$b.e` @type ^`int`;
  #L18ebd4.  v1:= length @variable v4;
  #L18ebd6.  v0:= v0 + v1 @kind int;
  #L18ebd8.  v3.`c.h.a.a$b.e` @type ^`int` := v0;
  #L18ebdc.  v0:= v3.`c.h.a.a$b.e` @type ^`int`;
  #L18ebe0.  v1:= v3.`c.h.a.a$b.d` @type ^`int`;
  #L18ebe4.  if v0 > v1 then goto L18ec10;
  #L18ebe8.  v0:= v3.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18ebec.  v1:= 0I;
  #L18ebee.  v2:= length @variable v4;
  #L18ebf0.  call temp:= `read`(v0, v4, v1, v2) @signature `Ljava/io/DataInputStream;.read:([BII)I` @kind virtual;
  #L18ebf6.  v0:= temp;
  #L18ebf8.  v4:= length @variable v4;
  #L18ebfa.  if v0 != v4 then goto L18ec00;
  #L18ebfe.  return @kind void;
  #L18ec00.  v4:= new `java.io.IOException`;
  #L18ec04.  v0:= "Couldn't read up to the length of buffer" @kind object;
  #L18ec08.  call `<init>`(v4, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18ec0e.  throw v4;
  #L18ec10.  v4:= new `java.io.EOFException`;
  #L18ec14.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L18ec1a.  throw v4;
}
procedure `void` `readFully`(`c.h.a.a$b` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lc/h/a/a$b;.readFully:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L18ec2c.  v0:= v2.`c.h.a.a$b.e` @type ^`int`;
  #L18ec30.  v0:= v0 + v5 @kind int;
  #L18ec32.  v2.`c.h.a.a$b.e` @type ^`int` := v0;
  #L18ec36.  v0:= v2.`c.h.a.a$b.e` @type ^`int`;
  #L18ec3a.  v1:= v2.`c.h.a.a$b.d` @type ^`int`;
  #L18ec3e.  if v0 > v1 then goto L18ec64;
  #L18ec42.  v0:= v2.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18ec46.  call temp:= `read`(v0, v3, v4, v5) @signature `Ljava/io/DataInputStream;.read:([BII)I` @kind virtual;
  #L18ec4c.  v3:= temp;
  #L18ec4e.  if v3 != v5 then goto L18ec54;
  #L18ec52.  return @kind void;
  #L18ec54.  v3:= new `java.io.IOException`;
  #L18ec58.  v4:= "Couldn't read up to the length of buffer" @kind object;
  #L18ec5c.  call `<init>`(v3, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18ec62.  throw v3;
  #L18ec64.  v3:= new `java.io.EOFException`;
  #L18ec68.  call `<init>`(v3) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L18ec6e.  throw v3;
}
procedure `int` `readInt`(`c.h.a.a$b` v6 @kind this) @signature `Lc/h/a/a$b;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L18e600.  v0:= v6.`c.h.a.a$b.e` @type ^`int`;
  #L18e604.  v0:= v0 + 4;
  #L18e608.  v6.`c.h.a.a$b.e` @type ^`int` := v0;
  #L18e60c.  v0:= v6.`c.h.a.a$b.e` @type ^`int`;
  #L18e610.  v1:= v6.`c.h.a.a$b.d` @type ^`int`;
  #L18e614.  if v0 > v1 then goto L18e6ce;
  #L18e618.  v0:= v6.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e61c.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18e622.  v0:= temp;
  #L18e624.  v1:= v6.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e628.  call temp:= `read`(v1) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18e62e.  v1:= temp;
  #L18e630.  v2:= v6.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e634.  call temp:= `read`(v2) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18e63a.  v2:= temp;
  #L18e63c.  v3:= v6.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e640.  call temp:= `read`(v3) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18e646.  v3:= temp;
  #L18e648.  v4:= v0 ^| v1 @kind int;
  #L18e64c.  v4:= v4 ^| v2 @kind int;
  #L18e64e.  v4:= v4 ^| v3 @kind int;
  #L18e650.  if v4 < 0 then goto L18e6c2;
  #L18e654.  v4:= v6.`c.h.a.a$b.c` @type ^`java.nio.ByteOrder` @kind object;
  #L18e658.  v5:= `@@c.h.a.a$b.f` @type ^`java.nio.ByteOrder` @kind object;
  #L18e65c.  if v4 != v5 then goto L18e674;
  #L18e660.  v3:= v3 ^< 24;
  #L18e664.  v2:= v2 ^< 16;
  #L18e668.  v3:= v3 + v2 @kind int;
  #L18e66a.  v1:= v1 ^< 8;
  #L18e66e.  v3:= v3 + v1 @kind int;
  #L18e670.  v3:= v3 + v0 @kind int;
  #L18e672.  return v3;
  #L18e674.  v5:= `@@c.h.a.a$b.g` @type ^`java.nio.ByteOrder` @kind object;
  #L18e678.  if v4 != v5 then goto L18e690;
  #L18e67c.  v0:= v0 ^< 24;
  #L18e680.  v1:= v1 ^< 16;
  #L18e684.  v0:= v0 + v1 @kind int;
  #L18e686.  v1:= v2 ^< 8;
  #L18e68a.  v0:= v0 + v1 @kind int;
  #L18e68c.  v0:= v0 + v3 @kind int;
  #L18e68e.  return v0;
  #L18e690.  v0:= new `java.io.IOException`;
  #L18e694.  v1:= new `java.lang.StringBuilder`;
  #L18e698.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18e69e.  v2:= "Invalid byte order: " @kind object;
  #L18e6a2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18e6a8.  v2:= v6.`c.h.a.a$b.c` @type ^`java.nio.ByteOrder` @kind object;
  #L18e6ac.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18e6b2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L18e6b8.  v1:= temp @kind object;
  #L18e6ba.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18e6c0.  throw v0;
  #L18e6c2.  v0:= new `java.io.EOFException`;
  #L18e6c6.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L18e6cc.  throw v0;
  #L18e6ce.  v0:= new `java.io.EOFException`;
  #L18e6d2.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L18e6d8.  throw v0;
}
procedure `java.lang.String` `readLine`(`c.h.a.a$b` v2 @kind this) @signature `Lc/h/a/a$b;.readLine:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L18e818.  v0:= "ExifInterface" @kind object;
  #L18e81c.  v1:= "Currently unsupported" @kind object;
  #L18e820.  call temp:= `d`(v0, v1) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L18e826.  v0:= 0I;
  #L18e828.  return v0 @kind object;
}
procedure `long` `readLong`(`c.h.a.a$b` v19 @kind this) @signature `Lc/h/a/a$b;.readLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L18e868.  v0:= v19 @kind object;
  #L18e86c.  v1:= v0.`c.h.a.a$b.e` @type ^`int`;
  #L18e870.  v2:= 8I;
  #L18e874.  v1:= v1 + v2 @kind int;
  #L18e876.  v0.`c.h.a.a$b.e` @type ^`int` := v1;
  #L18e87a.  v1:= v0.`c.h.a.a$b.e` @type ^`int`;
  #L18e87e.  v3:= v0.`c.h.a.a$b.d` @type ^`int`;
  #L18e882.  if v1 > v3 then goto L18e9de;
  #L18e886.  v1:= v0.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e88a.  call temp:= `read`(v1) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18e890.  v1:= temp;
  #L18e892.  v3:= v0.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e896.  call temp:= `read`(v3) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18e89c.  v3:= temp;
  #L18e89e.  v4:= v0.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e8a2.  call temp:= `read`(v4) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18e8a8.  v4:= temp;
  #L18e8aa.  v5:= v0.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e8ae.  call temp:= `read`(v5) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18e8b4.  v5:= temp;
  #L18e8b6.  v6:= v0.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e8ba.  call temp:= `read`(v6) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18e8c0.  v6:= temp;
  #L18e8c2.  v7:= v0.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e8c6.  call temp:= `read`(v7) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18e8cc.  v7:= temp;
  #L18e8ce.  v8:= v0.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e8d2.  call temp:= `read`(v8) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18e8d8.  v8:= temp;
  #L18e8da.  v9:= v0.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e8de.  call temp:= `read`(v9) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18e8e4.  v9:= temp;
  #L18e8e6.  v10:= v1 ^| v3 @kind int;
  #L18e8ea.  v10:= v10 ^| v4 @kind int;
  #L18e8ec.  v10:= v10 ^| v5 @kind int;
  #L18e8ee.  v10:= v10 ^| v6 @kind int;
  #L18e8f0.  v10:= v10 ^| v7 @kind int;
  #L18e8f2.  v10:= v10 ^| v8 @kind int;
  #L18e8f4.  v10:= v10 ^| v9 @kind int;
  #L18e8f6.  if v10 < 0 then goto L18e9d2;
  #L18e8fa.  v10:= v0.`c.h.a.a$b.c` @type ^`java.nio.ByteOrder` @kind object;
  #L18e8fe.  v11:= `@@c.h.a.a$b.f` @type ^`java.nio.ByteOrder` @kind object;
  #L18e902.  v12:= 16I;
  #L18e906.  v13:= 24I;
  #L18e90a.  v14:= 32I;
  #L18e90e.  v15:= 40I;
  #L18e912.  v16:= 48I;
  #L18e916.  v17:= 56I;
  #L18e91a.  if v10 != v11 then goto L18e95c;
  #L18e91e.  v9:= (`long`) v9 @kind i2l;
  #L18e920.  v9:= v9 ^< v17 @kind long;
  #L18e924.  v18:= v3;
  #L18e928.  v2:= (`long`) v8 @kind i2l;
  #L18e92a.  v2:= v2 ^< v16 @kind long;
  #L18e92e.  v9:= v9 + v2 @kind long;
  #L18e930.  v2:= (`long`) v7 @kind i2l;
  #L18e932.  v2:= v2 ^< v15 @kind long;
  #L18e934.  v9:= v9 + v2 @kind long;
  #L18e936.  v2:= (`long`) v6 @kind i2l;
  #L18e938.  v2:= v2 ^< v14 @kind long;
  #L18e93a.  v9:= v9 + v2 @kind long;
  #L18e93c.  v2:= (`long`) v5 @kind i2l;
  #L18e93e.  v2:= v2 ^< v13 @kind long;
  #L18e940.  v9:= v9 + v2 @kind long;
  #L18e942.  v2:= (`long`) v4 @kind i2l;
  #L18e944.  v2:= v2 ^< v12 @kind long;
  #L18e946.  v9:= v9 + v2 @kind long;
  #L18e948.  v2:= v18;
  #L18e94c.  v2:= (`long`) v2 @kind i2l;
  #L18e94e.  v4:= 8I;
  #L18e952.  v2:= v2 ^< v4 @kind long;
  #L18e954.  v9:= v9 + v2 @kind long;
  #L18e956.  v1:= (`long`) v1 @kind i2l;
  #L18e958.  v9:= v9 + v1 @kind long;
  #L18e95a.  return v9 @kind wide;
  #L18e95c.  v2:= v3;
  #L18e95e.  v3:= `@@c.h.a.a$b.g` @type ^`java.nio.ByteOrder` @kind object;
  #L18e962.  if v10 != v3 then goto L18e9a0;
  #L18e966.  v11:= (`long`) v1 @kind i2l;
  #L18e968.  v11:= v11 ^< v17 @kind long;
  #L18e96c.  v1:= (`long`) v2 @kind i2l;
  #L18e96e.  v1:= v1 ^< v16 @kind long;
  #L18e972.  v11:= v11 + v1 @kind long;
  #L18e974.  v1:= (`long`) v4 @kind i2l;
  #L18e976.  v1:= v1 ^< v15 @kind long;
  #L18e978.  v11:= v11 + v1 @kind long;
  #L18e97a.  v1:= (`long`) v5 @kind i2l;
  #L18e97c.  v1:= v1 ^< v14 @kind long;
  #L18e97e.  v11:= v11 + v1 @kind long;
  #L18e980.  v1:= (`long`) v6 @kind i2l;
  #L18e982.  v1:= v1 ^< v13 @kind long;
  #L18e984.  v11:= v11 + v1 @kind long;
  #L18e986.  v1:= (`long`) v7 @kind i2l;
  #L18e988.  v4:= 16I;
  #L18e98c.  v1:= v1 ^< v4 @kind long;
  #L18e98e.  v11:= v11 + v1 @kind long;
  #L18e990.  v1:= (`long`) v8 @kind i2l;
  #L18e992.  v3:= 8I;
  #L18e996.  v1:= v1 ^< v3 @kind long;
  #L18e998.  v11:= v11 + v1 @kind long;
  #L18e99a.  v1:= (`long`) v9 @kind i2l;
  #L18e99c.  v11:= v11 + v1 @kind long;
  #L18e99e.  return v11 @kind wide;
  #L18e9a0.  v1:= new `java.io.IOException`;
  #L18e9a4.  v2:= new `java.lang.StringBuilder`;
  #L18e9a8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18e9ae.  v3:= "Invalid byte order: " @kind object;
  #L18e9b2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18e9b8.  v3:= v0.`c.h.a.a$b.c` @type ^`java.nio.ByteOrder` @kind object;
  #L18e9bc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18e9c2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L18e9c8.  v2:= temp @kind object;
  #L18e9ca.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18e9d0.  throw v1;
  #L18e9d2.  v1:= new `java.io.EOFException`;
  #L18e9d6.  call `<init>`(v1) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L18e9dc.  throw v1;
  #L18e9de.  v1:= new `java.io.EOFException`;
  #L18e9e2.  call `<init>`(v1) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L18e9e8.  throw v1;
}
procedure `short` `readShort`(`c.h.a.a$b` v4 @kind this) @signature `Lc/h/a/a$b;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L18ea24.  v0:= v4.`c.h.a.a$b.e` @type ^`int`;
  #L18ea28.  v0:= v0 + 2;
  #L18ea2c.  v4.`c.h.a.a$b.e` @type ^`int` := v0;
  #L18ea30.  v0:= v4.`c.h.a.a$b.e` @type ^`int`;
  #L18ea34.  v1:= v4.`c.h.a.a$b.d` @type ^`int`;
  #L18ea38.  if v0 > v1 then goto L18eac2;
  #L18ea3c.  v0:= v4.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18ea40.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18ea46.  v0:= temp;
  #L18ea48.  v1:= v4.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18ea4c.  call temp:= `read`(v1) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18ea52.  v1:= temp;
  #L18ea54.  v2:= v0 ^| v1 @kind int;
  #L18ea58.  if v2 < 0 then goto L18eab6;
  #L18ea5c.  v2:= v4.`c.h.a.a$b.c` @type ^`java.nio.ByteOrder` @kind object;
  #L18ea60.  v3:= `@@c.h.a.a$b.f` @type ^`java.nio.ByteOrder` @kind object;
  #L18ea64.  if v2 != v3 then goto L18ea72;
  #L18ea68.  v1:= v1 ^< 8;
  #L18ea6c.  v1:= v1 + v0 @kind int;
  #L18ea6e.  v0:= (`short`) v1 @kind i2s;
  #L18ea70.  return v0;
  #L18ea72.  v3:= `@@c.h.a.a$b.g` @type ^`java.nio.ByteOrder` @kind object;
  #L18ea76.  if v2 != v3 then goto L18ea84;
  #L18ea7a.  v0:= v0 ^< 8;
  #L18ea7e.  v0:= v0 + v1 @kind int;
  #L18ea80.  v0:= (`short`) v0 @kind i2s;
  #L18ea82.  return v0;
  #L18ea84.  v0:= new `java.io.IOException`;
  #L18ea88.  v1:= new `java.lang.StringBuilder`;
  #L18ea8c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18ea92.  v2:= "Invalid byte order: " @kind object;
  #L18ea96.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18ea9c.  v2:= v4.`c.h.a.a$b.c` @type ^`java.nio.ByteOrder` @kind object;
  #L18eaa0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18eaa6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L18eaac.  v1:= temp @kind object;
  #L18eaae.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18eab4.  throw v0;
  #L18eab6.  v0:= new `java.io.EOFException`;
  #L18eaba.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L18eac0.  throw v0;
  #L18eac2.  v0:= new `java.io.EOFException`;
  #L18eac6.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L18eacc.  throw v0;
}
procedure `java.lang.String` `readUTF`(`c.h.a.a$b` v1 @kind this) @signature `Lc/h/a/a$b;.readUTF:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18e83c.  v0:= v1.`c.h.a.a$b.e` @type ^`int`;
  #L18e840.  v0:= v0 + 2;
  #L18e844.  v1.`c.h.a.a$b.e` @type ^`int` := v0;
  #L18e848.  v0:= v1.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e84c.  call temp:= `readUTF`(v0) @signature `Ljava/io/DataInputStream;.readUTF:()Ljava/lang/String;` @kind virtual;
  #L18e852.  v0:= temp @kind object;
  #L18e854.  return v0 @kind object;
}
procedure `int` `readUnsignedByte`(`c.h.a.a$b` v1 @kind this) @signature `Lc/h/a/a$b;.readUnsignedByte:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18e6ec.  v0:= v1.`c.h.a.a$b.e` @type ^`int`;
  #L18e6f0.  v0:= v0 + 1;
  #L18e6f4.  v1.`c.h.a.a$b.e` @type ^`int` := v0;
  #L18e6f8.  v0:= v1.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e6fc.  call temp:= `readUnsignedByte`(v0) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L18e702.  v0:= temp;
  #L18e704.  return v0;
}
procedure `int` `readUnsignedShort`(`c.h.a.a$b` v4 @kind this) @signature `Lc/h/a/a$b;.readUnsignedShort:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L18e718.  v0:= v4.`c.h.a.a$b.e` @type ^`int`;
  #L18e71c.  v0:= v0 + 2;
  #L18e720.  v4.`c.h.a.a$b.e` @type ^`int` := v0;
  #L18e724.  v0:= v4.`c.h.a.a$b.e` @type ^`int`;
  #L18e728.  v1:= v4.`c.h.a.a$b.d` @type ^`int`;
  #L18e72c.  if v0 > v1 then goto L18e7b2;
  #L18e730.  v0:= v4.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e734.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18e73a.  v0:= temp;
  #L18e73c.  v1:= v4.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e740.  call temp:= `read`(v1) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L18e746.  v1:= temp;
  #L18e748.  v2:= v0 ^| v1 @kind int;
  #L18e74c.  if v2 < 0 then goto L18e7a6;
  #L18e750.  v2:= v4.`c.h.a.a$b.c` @type ^`java.nio.ByteOrder` @kind object;
  #L18e754.  v3:= `@@c.h.a.a$b.f` @type ^`java.nio.ByteOrder` @kind object;
  #L18e758.  if v2 != v3 then goto L18e764;
  #L18e75c.  v1:= v1 ^< 8;
  #L18e760.  v1:= v1 + v0 @kind int;
  #L18e762.  return v1;
  #L18e764.  v3:= `@@c.h.a.a$b.g` @type ^`java.nio.ByteOrder` @kind object;
  #L18e768.  if v2 != v3 then goto L18e774;
  #L18e76c.  v0:= v0 ^< 8;
  #L18e770.  v0:= v0 + v1 @kind int;
  #L18e772.  return v0;
  #L18e774.  v0:= new `java.io.IOException`;
  #L18e778.  v1:= new `java.lang.StringBuilder`;
  #L18e77c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18e782.  v2:= "Invalid byte order: " @kind object;
  #L18e786.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18e78c.  v2:= v4.`c.h.a.a$b.c` @type ^`java.nio.ByteOrder` @kind object;
  #L18e790.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L18e796.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L18e79c.  v1:= temp @kind object;
  #L18e79e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L18e7a4.  throw v0;
  #L18e7a6.  v0:= new `java.io.EOFException`;
  #L18e7aa.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L18e7b0.  throw v0;
  #L18e7b2.  v0:= new `java.io.EOFException`;
  #L18e7b6.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L18e7bc.  throw v0;
}
procedure `int` `skipBytes`(`c.h.a.a$b` v3 @kind this, `int` v4 ) @signature `Lc/h/a/a$b;.skipBytes:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L18e7d0.  v0:= v3.`c.h.a.a$b.d` @type ^`int`;
  #L18e7d4.  v1:= v3.`c.h.a.a$b.e` @type ^`int`;
  #L18e7d8.  v0:= v0 - v1 @kind int;
  #L18e7da.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L18e7e0.  v4:= temp;
  #L18e7e2.  v0:= 0I;
  #L18e7e4.  if v0 >= v4 then goto L18e7fc;
  #L18e7e8.  v1:= v3.`c.h.a.a$b.b` @type ^`java.io.DataInputStream` @kind object;
  #L18e7ec.  v2:= v4 - v0 @kind int;
  #L18e7f0.  call temp:= `skipBytes`(v1, v2) @signature `Ljava/io/DataInputStream;.skipBytes:(I)I` @kind virtual;
  #L18e7f6.  v1:= temp;
  #L18e7f8.  v0:= v0 + v1 @kind int;
  #L18e7fa.  goto L18e7e4;
  #L18e7fc.  v4:= v3.`c.h.a.a$b.e` @type ^`int`;
  #L18e800.  v4:= v4 + v0 @kind int;
  #L18e802.  v3.`c.h.a.a$b.e` @type ^`int` := v4;
  #L18e806.  return v0;
}
