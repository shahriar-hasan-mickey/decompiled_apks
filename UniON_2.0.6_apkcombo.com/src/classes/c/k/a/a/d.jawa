record `c.k.a.a.d` @kind class @AccessFlag ABSTRACT extends `android.view.animation.Interpolator` @kind interface {
  `float`[] `c.k.a.a.d.a` @AccessFlag PRIVATE_FINAL;
  `float` `c.k.a.a.d.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`c.k.a.a.d` v1 @kind this, `float`[] v2 @kind object) @signature `Lc/k/a/a/d;.<init>:([F)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L1ad274.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ad27a.  v1.`c.k.a.a.d.a` @type ^`float`[] := v2 @kind object;
  #L1ad27e.  v2:= v1.`c.k.a.a.d.a` @type ^`float`[] @kind object;
  #L1ad282.  v2:= length @variable v2;
  #L1ad284.  v2:= v2 + -1;
  #L1ad288.  v2:= (`float`) v2 @kind i2f;
  #L1ad28a.  v0:= 1.0F;
  #L1ad28e.  v0:= v0 / v2 @kind float;
  #L1ad290.  v1.`c.k.a.a.d.b` @type ^`float` := v0;
  #L1ad294.  return @kind void;
}
procedure `float` `getInterpolation`(`c.k.a.a.d` v4 @kind this, `float` v5 ) @signature `Lc/k/a/a/d;.getInterpolation:(F)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ad1fc.  v0:= 1.0F;
  #L1ad200.  v1:= fcmpl(v5, v0);
  #L1ad204.  if v1 < 0 then goto L1ad20a;
  #L1ad208.  return v0;
  #L1ad20a.  v0:= 0I;
  #L1ad20c.  v1:= fcmpg(v5, v0);
  #L1ad210.  if v1 > 0 then goto L1ad216;
  #L1ad214.  return v0;
  #L1ad216.  v0:= v4.`c.k.a.a.d.a` @type ^`float`[] @kind object;
  #L1ad21a.  v1:= length @variable v0;
  #L1ad21c.  v1:= v1 + -1;
  #L1ad220.  v1:= (`float`) v1 @kind i2f;
  #L1ad222.  v1:= v1 * v5 @kind float;
  #L1ad226.  v1:= (`int`) v1 @kind f2i;
  #L1ad228.  v0:= length @variable v0;
  #L1ad22a.  v0:= v0 + -2;
  #L1ad22e.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1ad234.  v0:= temp;
  #L1ad236.  v1:= (`float`) v0 @kind i2f;
  #L1ad238.  v2:= v4.`c.k.a.a.d.b` @type ^`float`;
  #L1ad23c.  v1:= v1 * v2 @kind float;
  #L1ad240.  v5:= v5 - v1 @kind float;
  #L1ad242.  v5:= v5 / v2 @kind float;
  #L1ad244.  v1:= v4.`c.k.a.a.d.a` @type ^`float`[] @kind object;
  #L1ad248.  v2:= v1[v0];
  #L1ad24c.  v3:= v0 + 1;
  #L1ad250.  v3:= v1[v3];
  #L1ad254.  v0:= v1[v0];
  #L1ad258.  v3:= v3 - v0 @kind float;
  #L1ad25a.  v5:= v5 * v3 @kind float;
  #L1ad25e.  v2:= v2 + v5 @kind float;
  #L1ad260.  return v2;
}
