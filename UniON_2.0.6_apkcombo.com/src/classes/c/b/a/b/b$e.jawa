record `c.b.a.b.b$e` @kind class @AccessFlag ABSTRACT extends `java.util.Iterator` @kind interface, `c.b.a.b.b$f` @kind interface {
  `c.b.a.b.b$c` `c.b.a.b.b$e.b` @AccessFlag ;
  `c.b.a.b.b$c` `c.b.a.b.b$e.c` @AccessFlag ;
}
procedure `void` `<init>`(`c.b.a.b.b$e` v0 @kind this, `c.b.a.b.b$c` v1 @kind object, `c.b.a.b.b$c` v2 @kind object) @signature `Lc/b/a/b/b$e;.<init>:(Lc/b/a/b/b$c;Lc/b/a/b/b$c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L15bb70.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15bb76.  v0.`c.b.a.b.b$e.b` @type ^`c.b.a.b.b$c` := v2 @kind object;
  #L15bb7a.  v0.`c.b.a.b.b$e.c` @type ^`c.b.a.b.b$c` := v1 @kind object;
  #L15bb7e.  return @kind void;
}
procedure `c.b.a.b.b$c` `a`(`c.b.a.b.b$e` v2 @kind this) @signature `Lc/b/a/b/b$e;.a:()Lc/b/a/b/b$c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L15bae0.  v0:= v2.`c.b.a.b.b$e.c` @type ^`c.b.a.b.b$c` @kind object;
  #L15bae4.  v1:= v2.`c.b.a.b.b$e.b` @type ^`c.b.a.b.b$c` @kind object;
  #L15bae8.  if v0 == v1 then goto L15bafc;
  #L15baec.  if v1 != 0 then goto L15baf2;
  #L15baf0.  goto L15bafc;
  #L15baf2.  call temp:= `c`(v2, v0) @signature `Lc/b/a/b/b$e;.c:(Lc/b/a/b/b$c;)Lc/b/a/b/b$c;` @kind virtual;
  #L15baf8.  v0:= temp @kind object;
  #L15bafa.  return v0 @kind object;
  #L15bafc.  v0:= 0I;
  #L15bafe.  return v0 @kind object;
}
procedure `void` `a`(`c.b.a.b.b$e` v1 @kind this, `c.b.a.b.b$c` v2 @kind object) @signature `Lc/b/a/b/b$e;.a:(Lc/b/a/b/b$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15bb90.  v0:= v1.`c.b.a.b.b$e.b` @type ^`c.b.a.b.b$c` @kind object;
  #L15bb94.  if v0 != v2 then goto L15bbaa;
  #L15bb98.  v0:= v1.`c.b.a.b.b$e.c` @type ^`c.b.a.b.b$c` @kind object;
  #L15bb9c.  if v2 != v0 then goto L15bbaa;
  #L15bba0.  v0:= 0I;
  #L15bba2.  v1.`c.b.a.b.b$e.c` @type ^`c.b.a.b.b$c` := v0 @kind object;
  #L15bba6.  v1.`c.b.a.b.b$e.b` @type ^`c.b.a.b.b$c` := v0 @kind object;
  #L15bbaa.  v0:= v1.`c.b.a.b.b$e.b` @type ^`c.b.a.b.b$c` @kind object;
  #L15bbae.  if v0 != v2 then goto L15bbbe;
  #L15bbb2.  call temp:= `b`(v1, v0) @signature `Lc/b/a/b/b$e;.b:(Lc/b/a/b/b$c;)Lc/b/a/b/b$c;` @kind virtual;
  #L15bbb8.  v0:= temp @kind object;
  #L15bbba.  v1.`c.b.a.b.b$e.b` @type ^`c.b.a.b.b$c` := v0 @kind object;
  #L15bbbe.  v0:= v1.`c.b.a.b.b$e.c` @type ^`c.b.a.b.b$c` @kind object;
  #L15bbc2.  if v0 != v2 then goto L15bbd2;
  #L15bbc6.  call temp:= `a`(v1) @signature `Lc/b/a/b/b$e;.a:()Lc/b/a/b/b$c;` @kind direct;
  #L15bbcc.  v2:= temp @kind object;
  #L15bbce.  v1.`c.b.a.b.b$e.c` @type ^`c.b.a.b.b$c` := v2 @kind object;
  #L15bbd2.  return @kind void;
}
procedure `c.b.a.b.b$c` `b`(`c.b.a.b.b$c` v0 @kind object) @signature `Lc/b/a/b/b$e;.b:(Lc/b/a/b/b$c;)Lc/b/a/b/b$c;` @AccessFlag ABSTRACT {

  # return;
}
procedure `c.b.a.b.b$c` `c`(`c.b.a.b.b$c` v0 @kind object) @signature `Lc/b/a/b/b$e;.c:(Lc/b/a/b/b$c;)Lc/b/a/b/b$c;` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `hasNext`(`c.b.a.b.b$e` v1 @kind this) @signature `Lc/b/a/b/b$e;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15bb10.  v0:= v1.`c.b.a.b.b$e.c` @type ^`c.b.a.b.b$c` @kind object;
  #L15bb14.  if v0 == 0 then goto L15bb1c;
  #L15bb18.  v0:= 1I;
  #L15bb1a.  goto L15bb1e;
  #L15bb1c.  v0:= 0I;
  #L15bb1e.  return v0;
}
procedure `java.lang.Object` `next`(`c.b.a.b.b$e` v1 @kind this) @signature `Lc/b/a/b/b$e;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L15bb30.  call temp:= `next`(v1) @signature `Lc/b/a/b/b$e;.next:()Ljava/util/Map$Entry;` @kind virtual;
  #L15bb36.  v0:= temp @kind object;
  #L15bb38.  return v0 @kind object;
}
procedure `java.util.Map$Entry` `next`(`c.b.a.b.b$e` v2 @kind this) @signature `Lc/b/a/b/b$e;.next:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15bb4c.  v0:= v2.`c.b.a.b.b$e.c` @type ^`c.b.a.b.b$c` @kind object;
  #L15bb50.  call temp:= `a`(v2) @signature `Lc/b/a/b/b$e;.a:()Lc/b/a/b/b$c;` @kind direct;
  #L15bb56.  v1:= temp @kind object;
  #L15bb58.  v2.`c.b.a.b.b$e.c` @type ^`c.b.a.b.b$c` := v1 @kind object;
  #L15bb5c.  return v0 @kind object;
}
