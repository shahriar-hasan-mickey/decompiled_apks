record `c.b.a.b.b` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface {
  `c.b.a.b.b$c` `c.b.a.b.b.b` @AccessFlag ;
  `c.b.a.b.b$c` `c.b.a.b.b.c` @AccessFlag PRIVATE;
  `java.util.WeakHashMap` `c.b.a.b.b.d` @AccessFlag PRIVATE;
  `int` `c.b.a.b.b.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.b.a.b.b` v1 @kind this) @signature `Lc/b/a/b/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15bfa0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15bfa6.  v0:= new `java.util.WeakHashMap`;
  #L15bfaa.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L15bfb0.  v1.`c.b.a.b.b.d` @type ^`java.util.WeakHashMap` := v0 @kind object;
  #L15bfb4.  v0:= 0I;
  #L15bfb6.  v1.`c.b.a.b.b.e` @type ^`int` := v0;
  #L15bfba.  return @kind void;
}
procedure `c.b.a.b.b$c` `a`(`c.b.a.b.b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lc/b/a/b/b;.a:(Ljava/lang/Object;)Lc/b/a/b/b$c;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L15bbe4.  v0:= v2.`c.b.a.b.b.b` @type ^`c.b.a.b.b$c` @kind object;
  #L15bbe8.  if v0 == 0 then goto L15bc04;
  #L15bbec.  v1:= v0.`c.b.a.b.b$c.b` @type ^`java.lang.Object` @kind object;
  #L15bbf0.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15bbf6.  v1:= temp;
  #L15bbf8.  if v1 == 0 then goto L15bbfe;
  #L15bbfc.  goto L15bc04;
  #L15bbfe.  v0:= v0.`c.b.a.b.b$c.d` @type ^`c.b.a.b.b$c` @kind object;
  #L15bc02.  goto L15bbe8;
  #L15bc04.  return v0 @kind object;
}
procedure `c.b.a.b.b$c` `a`(`c.b.a.b.b` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lc/b/a/b/b;.a:(Ljava/lang/Object;Ljava/lang/Object;)Lc/b/a/b/b$c;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15bc18.  v0:= new `c.b.a.b.b$c`;
  #L15bc1c.  call `<init>`(v0, v2, v3) @signature `Lc/b/a/b/b$c;.<init>:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind direct;
  #L15bc22.  v2:= v1.`c.b.a.b.b.e` @type ^`int`;
  #L15bc26.  v2:= v2 + 1;
  #L15bc2a.  v1.`c.b.a.b.b.e` @type ^`int` := v2;
  #L15bc2e.  v2:= v1.`c.b.a.b.b.c` @type ^`c.b.a.b.b$c` @kind object;
  #L15bc32.  if v2 != 0 then goto L15bc44;
  #L15bc36.  v1.`c.b.a.b.b.b` @type ^`c.b.a.b.b$c` := v0 @kind object;
  #L15bc3a.  v2:= v1.`c.b.a.b.b.b` @type ^`c.b.a.b.b$c` @kind object;
  #L15bc3e.  v1.`c.b.a.b.b.c` @type ^`c.b.a.b.b$c` := v2 @kind object;
  #L15bc42.  return v0 @kind object;
  #L15bc44.  v2.`c.b.a.b.b$c.d` @type ^`c.b.a.b.b$c` := v0 @kind object;
  #L15bc48.  v0.`c.b.a.b.b$c.e` @type ^`c.b.a.b.b$c` := v2 @kind object;
  #L15bc4c.  v1.`c.b.a.b.b.c` @type ^`c.b.a.b.b$c` := v0 @kind object;
  #L15bc50.  return v0 @kind object;
}
procedure `java.lang.Object` `b`(`c.b.a.b.b` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lc/b/a/b/b;.b:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15bda0.  call temp:= `a`(v1, v2) @signature `Lc/b/a/b/b;.a:(Ljava/lang/Object;)Lc/b/a/b/b$c;` @kind virtual;
  #L15bda6.  v0:= temp @kind object;
  #L15bda8.  if v0 == 0 then goto L15bdb2;
  #L15bdac.  v2:= v0.`c.b.a.b.b$c.c` @type ^`java.lang.Object` @kind object;
  #L15bdb0.  return v2 @kind object;
  #L15bdb2.  call temp:= `a`(v1, v2, v3) @signature `Lc/b/a/b/b;.a:(Ljava/lang/Object;Ljava/lang/Object;)Lc/b/a/b/b$c;` @kind virtual;
  #L15bdb8.  v2:= 0I;
  #L15bdba.  return v2 @kind object;
}
procedure `java.util.Iterator` `d`(`c.b.a.b.b` v3 @kind this) @signature `Lc/b/a/b/b;.d:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15bf00.  v0:= new `c.b.a.b.b$b`;
  #L15bf04.  v1:= v3.`c.b.a.b.b.c` @type ^`c.b.a.b.b$c` @kind object;
  #L15bf08.  v2:= v3.`c.b.a.b.b.b` @type ^`c.b.a.b.b$c` @kind object;
  #L15bf0c.  call `<init>`(v0, v1, v2) @signature `Lc/b/a/b/b$b;.<init>:(Lc/b/a/b/b$c;Lc/b/a/b/b$c;)V` @kind direct;
  #L15bf12.  v1:= v3.`c.b.a.b.b.d` @type ^`java.util.WeakHashMap` @kind object;
  #L15bf16.  v2:= 0I;
  #L15bf18.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L15bf1e.  v2:= temp @kind object;
  #L15bf20.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15bf26.  return v0 @kind object;
}
procedure `boolean` `equals`(`c.b.a.b.b` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lc/b/a/b/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15bc94.  v0:= 1I;
  #L15bc96.  if v6 != v5 then goto L15bc9c;
  #L15bc9a.  return v0;
  #L15bc9c.  v1:= instanceof @variable v6 @type ^`c.b.a.b.b` @kind boolean;
  #L15bca0.  v2:= 0I;
  #L15bca2.  if v1 != 0 then goto L15bca8;
  #L15bca6.  return v2;
  #L15bca8.  v6:= (`c.b.a.b.b`) v6 @kind object;
  #L15bcac.  call temp:= `size`(v5) @signature `Lc/b/a/b/b;.size:()I` @kind virtual;
  #L15bcb2.  v1:= temp;
  #L15bcb4.  call temp:= `size`(v6) @signature `Lc/b/a/b/b;.size:()I` @kind virtual;
  #L15bcba.  v3:= temp;
  #L15bcbc.  if v1 == v3 then goto L15bcc2;
  #L15bcc0.  return v2;
  #L15bcc2.  call temp:= `iterator`(v5) @signature `Lc/b/a/b/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L15bcc8.  v1:= temp @kind object;
  #L15bcca.  call temp:= `iterator`(v6) @signature `Lc/b/a/b/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L15bcd0.  v6:= temp @kind object;
  #L15bcd2.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15bcd8.  v3:= temp;
  #L15bcda.  if v3 == 0 then goto L15bd18;
  #L15bcde.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15bce4.  v3:= temp;
  #L15bce6.  if v3 == 0 then goto L15bd18;
  #L15bcea.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15bcf0.  v3:= temp @kind object;
  #L15bcf2.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L15bcf6.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15bcfc.  v4:= temp @kind object;
  #L15bcfe.  if v3 != 0 then goto L15bd06;
  #L15bd02.  if v4 != 0 then goto L15bd16;
  #L15bd06.  if v3 == 0 then goto L15bcd2;
  #L15bd0a.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Map$Entry;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L15bd10.  v3:= temp;
  #L15bd12.  if v3 != 0 then goto L15bcd2;
  #L15bd16.  return v2;
  #L15bd18.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15bd1e.  v1:= temp;
  #L15bd20.  if v1 != 0 then goto L15bd32;
  #L15bd24.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15bd2a.  v6:= temp;
  #L15bd2c.  if v6 != 0 then goto L15bd32;
  #L15bd30.  goto L15bd34;
  #L15bd32.  v0:= 0I;
  #L15bd34.  return v0;
}
procedure `java.util.Map$Entry` `f`(`c.b.a.b.b` v1 @kind this) @signature `Lc/b/a/b/b;.f:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15bf70.  v0:= v1.`c.b.a.b.b.b` @type ^`c.b.a.b.b$c` @kind object;
  #L15bf74.  return v0 @kind object;
}
procedure `c.b.a.b.b$d` `g`(`c.b.a.b.b` v3 @kind this) @signature `Lc/b/a/b/b;.g:()Lc/b/a/b/b$d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15bc64.  v0:= new `c.b.a.b.b$d`;
  #L15bc68.  call `<init>`(v0, v3) @signature `Lc/b/a/b/b$d;.<init>:(Lc/b/a/b/b;)V` @kind direct;
  #L15bc6e.  v1:= v3.`c.b.a.b.b.d` @type ^`java.util.WeakHashMap` @kind object;
  #L15bc72.  v2:= 0I;
  #L15bc74.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L15bc7a.  v2:= temp @kind object;
  #L15bc7c.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15bc82.  return v0 @kind object;
}
procedure `int` `hashCode`(`c.b.a.b.b` v3 @kind this) @signature `Lc/b/a/b/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15bd48.  call temp:= `iterator`(v3) @signature `Lc/b/a/b/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L15bd4e.  v0:= temp @kind object;
  #L15bd50.  v1:= 0I;
  #L15bd52.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15bd58.  v2:= temp;
  #L15bd5a.  if v2 == 0 then goto L15bd76;
  #L15bd5e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15bd64.  v2:= temp @kind object;
  #L15bd66.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L15bd6a.  call temp:= `hashCode`(v2) @signature `Ljava/util/Map$Entry;.hashCode:()I` @kind interface;
  #L15bd70.  v2:= temp;
  #L15bd72.  v1:= v1 + v2 @kind int;
  #L15bd74.  goto L15bd52;
  #L15bd76.  return v1;
}
procedure `java.util.Map$Entry` `i`(`c.b.a.b.b` v1 @kind this) @signature `Lc/b/a/b/b;.i:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15bf88.  v0:= v1.`c.b.a.b.b.c` @type ^`c.b.a.b.b$c` @kind object;
  #L15bf8c.  return v0 @kind object;
}
procedure `java.util.Iterator` `iterator`(`c.b.a.b.b` v3 @kind this) @signature `Lc/b/a/b/b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15bf38.  v0:= new `c.b.a.b.b$a`;
  #L15bf3c.  v1:= v3.`c.b.a.b.b.b` @type ^`c.b.a.b.b$c` @kind object;
  #L15bf40.  v2:= v3.`c.b.a.b.b.c` @type ^`c.b.a.b.b$c` @kind object;
  #L15bf44.  call `<init>`(v0, v1, v2) @signature `Lc/b/a/b/b$a;.<init>:(Lc/b/a/b/b$c;Lc/b/a/b/b$c;)V` @kind direct;
  #L15bf4a.  v1:= v3.`c.b.a.b.b.d` @type ^`java.util.WeakHashMap` @kind object;
  #L15bf4e.  v2:= 0I;
  #L15bf50.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L15bf56.  v2:= temp @kind object;
  #L15bf58.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15bf5e.  return v0 @kind object;
}
procedure `java.lang.Object` `remove`(`c.b.a.b.b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lc/b/a/b/b;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15bdcc.  call temp:= `a`(v3, v4) @signature `Lc/b/a/b/b;.a:(Ljava/lang/Object;)Lc/b/a/b/b$c;` @kind virtual;
  #L15bdd2.  v4:= temp @kind object;
  #L15bdd4.  v0:= 0I;
  #L15bdd6.  if v4 != 0 then goto L15bddc;
  #L15bdda.  return v0 @kind object;
  #L15bddc.  v1:= v3.`c.b.a.b.b.e` @type ^`int`;
  #L15bde0.  v1:= v1 + -1;
  #L15bde4.  v3.`c.b.a.b.b.e` @type ^`int` := v1;
  #L15bde8.  v1:= v3.`c.b.a.b.b.d` @type ^`java.util.WeakHashMap` @kind object;
  #L15bdec.  call temp:= `isEmpty`(v1) @signature `Ljava/util/WeakHashMap;.isEmpty:()Z` @kind virtual;
  #L15bdf2.  v1:= temp;
  #L15bdf4.  if v1 != 0 then goto L15be2c;
  #L15bdf8.  v1:= v3.`c.b.a.b.b.d` @type ^`java.util.WeakHashMap` @kind object;
  #L15bdfc.  call temp:= `keySet`(v1) @signature `Ljava/util/WeakHashMap;.keySet:()Ljava/util/Set;` @kind virtual;
  #L15be02.  v1:= temp @kind object;
  #L15be04.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15be0a.  v1:= temp @kind object;
  #L15be0c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15be12.  v2:= temp;
  #L15be14.  if v2 == 0 then goto L15be2c;
  #L15be18.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15be1e.  v2:= temp @kind object;
  #L15be20.  v2:= (`c.b.a.b.b$f`) v2 @kind object;
  #L15be24.  call `a`(v2, v4) @signature `Lc/b/a/b/b$f;.a:(Lc/b/a/b/b$c;)V` @kind interface;
  #L15be2a.  goto L15be0c;
  #L15be2c.  v1:= v4.`c.b.a.b.b$c.e` @type ^`c.b.a.b.b$c` @kind object;
  #L15be30.  if v1 == 0 then goto L15be3e;
  #L15be34.  v2:= v4.`c.b.a.b.b$c.d` @type ^`c.b.a.b.b$c` @kind object;
  #L15be38.  v1.`c.b.a.b.b$c.d` @type ^`c.b.a.b.b$c` := v2 @kind object;
  #L15be3c.  goto L15be46;
  #L15be3e.  v1:= v4.`c.b.a.b.b$c.d` @type ^`c.b.a.b.b$c` @kind object;
  #L15be42.  v3.`c.b.a.b.b.b` @type ^`c.b.a.b.b$c` := v1 @kind object;
  #L15be46.  v1:= v4.`c.b.a.b.b$c.d` @type ^`c.b.a.b.b$c` @kind object;
  #L15be4a.  if v1 == 0 then goto L15be58;
  #L15be4e.  v2:= v4.`c.b.a.b.b$c.e` @type ^`c.b.a.b.b$c` @kind object;
  #L15be52.  v1.`c.b.a.b.b$c.e` @type ^`c.b.a.b.b$c` := v2 @kind object;
  #L15be56.  goto L15be60;
  #L15be58.  v1:= v4.`c.b.a.b.b$c.e` @type ^`c.b.a.b.b$c` @kind object;
  #L15be5c.  v3.`c.b.a.b.b.c` @type ^`c.b.a.b.b$c` := v1 @kind object;
  #L15be60.  v4.`c.b.a.b.b$c.d` @type ^`c.b.a.b.b$c` := v0 @kind object;
  #L15be64.  v4.`c.b.a.b.b$c.e` @type ^`c.b.a.b.b$c` := v0 @kind object;
  #L15be68.  v4:= v4.`c.b.a.b.b$c.c` @type ^`java.lang.Object` @kind object;
  #L15be6c.  return v4 @kind object;
}
procedure `int` `size`(`c.b.a.b.b` v1 @kind this) @signature `Lc/b/a/b/b;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15bd88.  v0:= v1.`c.b.a.b.b.e` @type ^`int`;
  #L15bd8c.  return v0;
}
procedure `java.lang.String` `toString`(`c.b.a.b.b` v3 @kind this) @signature `Lc/b/a/b/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15be80.  v0:= new `java.lang.StringBuilder`;
  #L15be84.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15be8a.  v1:= "[" @kind object;
  #L15be8e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15be94.  call temp:= `iterator`(v3) @signature `Lc/b/a/b/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L15be9a.  v1:= temp @kind object;
  #L15be9c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15bea2.  v2:= temp;
  #L15bea4.  if v2 == 0 then goto L15beda;
  #L15bea8.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15beae.  v2:= temp @kind object;
  #L15beb0.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L15beb4.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L15beba.  v2:= temp @kind object;
  #L15bebc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15bec2.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15bec8.  v2:= temp;
  #L15beca.  if v2 == 0 then goto L15be9c;
  #L15bece.  v2:= ", " @kind object;
  #L15bed2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15bed8.  goto L15be9c;
  #L15beda.  v1:= "]" @kind object;
  #L15bede.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15bee4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15beea.  v0:= temp @kind object;
  #L15beec.  return v0 @kind object;
}
