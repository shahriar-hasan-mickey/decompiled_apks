record `c.b.a.b.b$d` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface, `c.b.a.b.b$f` @kind interface {
  `c.b.a.b.b$c` `c.b.a.b.b$d.b` @AccessFlag PRIVATE;
  `boolean` `c.b.a.b.b$d.c` @AccessFlag PRIVATE;
  `c.b.a.b.b` `c.b.a.b.b$d.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.b.a.b.b$d` v0 @kind this, `c.b.a.b.b` v1 @kind object) @signature `Lc/b/a/b/b$d;.<init>:(Lc/b/a/b/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L15ba88.  v0.`c.b.a.b.b$d.d` @type ^`c.b.a.b.b` := v1 @kind object;
  #L15ba8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15ba92.  v1:= 1I;
  #L15ba94.  v0.`c.b.a.b.b$d.c` @type ^`boolean` := v1 @kind boolean;
  #L15ba98.  return @kind void;
}
procedure `void` `a`(`c.b.a.b.b$d` v1 @kind this, `c.b.a.b.b$c` v2 @kind object) @signature `Lc/b/a/b/b$d;.a:(Lc/b/a/b/b$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15baac.  v0:= v1.`c.b.a.b.b$d.b` @type ^`c.b.a.b.b$c` @kind object;
  #L15bab0.  if v2 != v0 then goto L15bace;
  #L15bab4.  v2:= v0.`c.b.a.b.b$c.e` @type ^`c.b.a.b.b$c` @kind object;
  #L15bab8.  v1.`c.b.a.b.b$d.b` @type ^`c.b.a.b.b$c` := v2 @kind object;
  #L15babc.  v2:= v1.`c.b.a.b.b$d.b` @type ^`c.b.a.b.b$c` @kind object;
  #L15bac0.  if v2 != 0 then goto L15bac8;
  #L15bac4.  v2:= 1I;
  #L15bac6.  goto L15baca;
  #L15bac8.  v2:= 0I;
  #L15baca.  v1.`c.b.a.b.b$d.c` @type ^`boolean` := v2 @kind boolean;
  #L15bace.  return @kind void;
}
procedure `boolean` `hasNext`(`c.b.a.b.b$d` v3 @kind this) @signature `Lc/b/a/b/b$d;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15b9e4.  v0:= v3.`c.b.a.b.b$d.c` @type ^`boolean` @kind boolean;
  #L15b9e8.  v1:= 1I;
  #L15b9ea.  v2:= 0I;
  #L15b9ec.  if v0 == 0 then goto L15ba02;
  #L15b9f0.  v0:= v3.`c.b.a.b.b$d.d` @type ^`c.b.a.b.b` @kind object;
  #L15b9f4.  v0:= v0.`c.b.a.b.b.b` @type ^`c.b.a.b.b$c` @kind object;
  #L15b9f8.  if v0 == 0 then goto L15b9fe;
  #L15b9fc.  goto L15ba00;
  #L15b9fe.  v1:= 0I;
  #L15ba00.  return v1;
  #L15ba02.  v0:= v3.`c.b.a.b.b$d.b` @type ^`c.b.a.b.b$c` @kind object;
  #L15ba06.  if v0 == 0 then goto L15ba14;
  #L15ba0a.  v0:= v0.`c.b.a.b.b$c.d` @type ^`c.b.a.b.b$c` @kind object;
  #L15ba0e.  if v0 == 0 then goto L15ba14;
  #L15ba12.  goto L15ba16;
  #L15ba14.  v1:= 0I;
  #L15ba16.  return v1;
}
procedure `java.lang.Object` `next`(`c.b.a.b.b$d` v1 @kind this) @signature `Lc/b/a/b/b$d;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L15ba28.  call temp:= `next`(v1) @signature `Lc/b/a/b/b$d;.next:()Ljava/util/Map$Entry;` @kind virtual;
  #L15ba2e.  v0:= temp @kind object;
  #L15ba30.  return v0 @kind object;
}
procedure `java.util.Map$Entry` `next`(`c.b.a.b.b$d` v1 @kind this) @signature `Lc/b/a/b/b$d;.next:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ba44.  v0:= v1.`c.b.a.b.b$d.c` @type ^`boolean` @kind boolean;
  #L15ba48.  if v0 == 0 then goto L15ba60;
  #L15ba4c.  v0:= 0I;
  #L15ba4e.  v1.`c.b.a.b.b$d.c` @type ^`boolean` := v0 @kind boolean;
  #L15ba52.  v0:= v1.`c.b.a.b.b$d.d` @type ^`c.b.a.b.b` @kind object;
  #L15ba56.  v0:= v0.`c.b.a.b.b.b` @type ^`c.b.a.b.b$c` @kind object;
  #L15ba5a.  v1.`c.b.a.b.b$d.b` @type ^`c.b.a.b.b$c` := v0 @kind object;
  #L15ba5e.  goto L15ba72;
  #L15ba60.  v0:= v1.`c.b.a.b.b$d.b` @type ^`c.b.a.b.b$c` @kind object;
  #L15ba64.  if v0 == 0 then goto L15ba6e;
  #L15ba68.  v0:= v0.`c.b.a.b.b$c.d` @type ^`c.b.a.b.b$c` @kind object;
  #L15ba6c.  goto L15ba5a;
  #L15ba6e.  v0:= 0I;
  #L15ba70.  goto L15ba5a;
  #L15ba72.  v0:= v1.`c.b.a.b.b$d.b` @type ^`c.b.a.b.b$c` @kind object;
  #L15ba76.  return v0 @kind object;
}
