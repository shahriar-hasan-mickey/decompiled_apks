record `c.b.a.b.a` @kind class @AccessFlag PUBLIC extends `c.b.a.b.b` @kind class {
  `java.util.HashMap` `c.b.a.b.a.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.b.a.b.a` v1 @kind this) @signature `Lc/b/a/b/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15b7f4.  call `<init>`(v1) @signature `Lc/b/a/b/b;.<init>:()V` @kind direct;
  #L15b7fa.  v0:= new `java.util.HashMap`;
  #L15b7fe.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L15b804.  v1.`c.b.a.b.a.f` @type ^`java.util.HashMap` := v0 @kind object;
  #L15b808.  return @kind void;
}
procedure `c.b.a.b.b$c` `a`(`c.b.a.b.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/b/a/b/a;.a:(Ljava/lang/Object;)Lc/b/a/b/b$c;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15b71c.  v0:= v1.`c.b.a.b.a.f` @type ^`java.util.HashMap` @kind object;
  #L15b720.  call temp:= `get`(v0, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15b726.  v2:= temp @kind object;
  #L15b728.  v2:= (`c.b.a.b.b$c`) v2 @kind object;
  #L15b72c.  return v2 @kind object;
}
procedure `java.lang.Object` `b`(`c.b.a.b.a` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lc/b/a/b/a;.b:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b760.  call temp:= `a`(v1, v2) @signature `Lc/b/a/b/a;.a:(Ljava/lang/Object;)Lc/b/a/b/b$c;` @kind virtual;
  #L15b766.  v0:= temp @kind object;
  #L15b768.  if v0 == 0 then goto L15b772;
  #L15b76c.  v2:= v0.`c.b.a.b.b$c.c` @type ^`java.lang.Object` @kind object;
  #L15b770.  return v2 @kind object;
  #L15b772.  v0:= v1.`c.b.a.b.a.f` @type ^`java.util.HashMap` @kind object;
  #L15b776.  call temp:= `a`(v1, v2, v3) @signature `Lc/b/a/b/b;.a:(Ljava/lang/Object;Ljava/lang/Object;)Lc/b/a/b/b$c;` @kind virtual;
  #L15b77c.  v3:= temp @kind object;
  #L15b77e.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15b784.  v2:= 0I;
  #L15b786.  return v2 @kind object;
}
procedure `java.util.Map$Entry` `b`(`c.b.a.b.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/b/a/b/a;.b:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b7bc.  call temp:= `contains`(v1, v2) @signature `Lc/b/a/b/a;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L15b7c2.  v0:= temp;
  #L15b7c4.  if v0 == 0 then goto L15b7de;
  #L15b7c8.  v0:= v1.`c.b.a.b.a.f` @type ^`java.util.HashMap` @kind object;
  #L15b7cc.  call temp:= `get`(v0, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15b7d2.  v2:= temp @kind object;
  #L15b7d4.  v2:= (`c.b.a.b.b$c`) v2 @kind object;
  #L15b7d8.  v2:= v2.`c.b.a.b.b$c.e` @type ^`c.b.a.b.b$c` @kind object;
  #L15b7dc.  return v2 @kind object;
  #L15b7de.  v2:= 0I;
  #L15b7e0.  return v2 @kind object;
}
procedure `boolean` `contains`(`c.b.a.b.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/b/a/b/a;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b740.  v0:= v1.`c.b.a.b.a.f` @type ^`java.util.HashMap` @kind object;
  #L15b744.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L15b74a.  v2:= temp;
  #L15b74c.  return v2;
}
procedure `java.lang.Object` `remove`(`c.b.a.b.a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lc/b/a/b/a;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15b798.  call temp:= `remove`(v2, v3) @signature `Lc/b/a/b/b;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind super;
  #L15b79e.  v0:= temp @kind object;
  #L15b7a0.  v1:= v2.`c.b.a.b.a.f` @type ^`java.util.HashMap` @kind object;
  #L15b7a4.  call temp:= `remove`(v1, v3) @signature `Ljava/util/HashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15b7aa.  return v0 @kind object;
}
