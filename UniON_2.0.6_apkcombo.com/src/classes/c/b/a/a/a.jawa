record `c.b.a.a.a` @kind class @AccessFlag PUBLIC extends `c.b.a.a.c` @kind class {
  `c.b.a.a.c` `c.b.a.a.a.a` @AccessFlag PRIVATE;
  `c.b.a.a.c` `c.b.a.a.a.b` @AccessFlag PRIVATE;
}
global `c.b.a.a.a` `@@c.b.a.a.a.c` @AccessFlag PRIVATE_STATIC_VOLATILE;
procedure `void` `<clinit>`() @signature `Lc/b/a/a/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15b458.  v0:= new `c.b.a.a.a$a`;
  #L15b45c.  call `<init>`(v0) @signature `Lc/b/a/a/a$a;.<init>:()V` @kind direct;
  #L15b462.  v0:= new `c.b.a.a.a$b`;
  #L15b466.  call `<init>`(v0) @signature `Lc/b/a/a/a$b;.<init>:()V` @kind direct;
  #L15b46c.  return @kind void;
}
procedure `void` `<init>`(`c.b.a.a.a` v1 @kind this) @signature `Lc/b/a/a/a;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L15b480.  call `<init>`(v1) @signature `Lc/b/a/a/c;.<init>:()V` @kind direct;
  #L15b486.  v0:= new `c.b.a.a.b`;
  #L15b48a.  call `<init>`(v0) @signature `Lc/b/a/a/b;.<init>:()V` @kind direct;
  #L15b490.  v1.`c.b.a.a.a.b` @type ^`c.b.a.a.c` := v0 @kind object;
  #L15b494.  v0:= v1.`c.b.a.a.a.b` @type ^`c.b.a.a.c` @kind object;
  #L15b498.  v1.`c.b.a.a.a.a` @type ^`c.b.a.a.c` := v0 @kind object;
  #L15b49c.  return @kind void;
}
procedure `c.b.a.a.a` `b`() @signature `Lc/b/a/a/a;.b:()Lc/b/a/a/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L15b3dc.  v0:= `@@c.b.a.a.a.c` @type ^`c.b.a.a.a` @kind object;
  #L15b3e0.  if v0 == 0 then goto L15b3ea;
  #L15b3e4.  v0:= `@@c.b.a.a.a.c` @type ^`c.b.a.a.a` @kind object;
  #L15b3e8.  return v0 @kind object;
  #L15b3ea.  v0:= constclass @type ^`c.b.a.a.a` @kind object;
  #L15b3ee.  @monitorenter v0
  #L15b3f0.  v1:= `@@c.b.a.a.a.c` @type ^`c.b.a.a.a` @kind object;
  #L15b3f4.  if v1 != 0 then goto L15b406;
  #L15b3f8.  v1:= new `c.b.a.a.a`;
  #L15b3fc.  call `<init>`(v1) @signature `Lc/b/a/a/a;.<init>:()V` @kind direct;
  #L15b402.  `@@c.b.a.a.a.c` @type ^`c.b.a.a.a` := v1 @kind object;
  #L15b406.  @monitorexit v0
  #L15b408.  v0:= `@@c.b.a.a.a.c` @type ^`c.b.a.a.a` @kind object;
  #L15b40c.  return v0 @kind object;
  #L15b40e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15b410.  @monitorexit v0
  #L15b412.  throw v1;
  catch `java.lang.Throwable` @[L15b3f0..L15b408] goto L15b40e;
  catch `java.lang.Throwable` @[L15b410..L15b412] goto L15b40e;
}
procedure `void` `a`(`c.b.a.a.a` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lc/b/a/a/a;.a:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b4b0.  v0:= v1.`c.b.a.a.a.a` @type ^`c.b.a.a.c` @kind object;
  #L15b4b4.  call `a`(v0, v2) @signature `Lc/b/a/a/c;.a:(Ljava/lang/Runnable;)V` @kind virtual;
  #L15b4ba.  return @kind void;
}
procedure `boolean` `a`(`c.b.a.a.a` v1 @kind this) @signature `Lc/b/a/a/a;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b438.  v0:= v1.`c.b.a.a.a.a` @type ^`c.b.a.a.c` @kind object;
  #L15b43c.  call temp:= `a`(v0) @signature `Lc/b/a/a/c;.a:()Z` @kind virtual;
  #L15b442.  v0:= temp;
  #L15b444.  return v0;
}
procedure `void` `b`(`c.b.a.a.a` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lc/b/a/a/a;.b:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b4cc.  v0:= v1.`c.b.a.a.a.a` @type ^`c.b.a.a.c` @kind object;
  #L15b4d0.  call `b`(v0, v2) @signature `Lc/b/a/a/c;.b:(Ljava/lang/Runnable;)V` @kind virtual;
  #L15b4d6.  return @kind void;
}
