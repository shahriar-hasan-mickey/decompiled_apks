record `c.b.a.a.b$a` @kind class @AccessFlag  extends `java.util.concurrent.ThreadFactory` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `c.b.a.a.b$a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`c.b.a.a.b$a` v1 @kind this, `c.b.a.a.b` v2 @kind object) @signature `Lc/b/a/a/b$a;.<init>:(Lc/b/a/a/b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L15b538.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15b53e.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L15b542.  v0:= 0I;
  #L15b544.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L15b54a.  v1.`c.b.a.a.b$a.a` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L15b54e.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`c.b.a.a.b$a` v3 @kind this, `java.lang.Runnable` v4 @kind object) @signature `Lc/b/a/a/b$a;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15b4e8.  v0:= new `java.lang.Thread`;
  #L15b4ec.  call `<init>`(v0, v4) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L15b4f2.  v4:= 1I;
  #L15b4f4.  v4:= new `java.lang.Object`[v4];
  #L15b4f8.  v1:= v3.`c.b.a.a.b$a.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L15b4fc.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L15b502.  v1:= temp;
  #L15b504.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15b50a.  v1:= temp @kind object;
  #L15b50c.  v2:= 0I;
  #L15b50e.  v4[v2]:= v1 @kind object;
  #L15b512.  v1:= "arch_disk_io_%d" @kind object;
  #L15b516.  call temp:= `format`(v1, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L15b51c.  v4:= temp @kind object;
  #L15b51e.  call `setName`(v0, v4) @signature `Ljava/lang/Thread;.setName:(Ljava/lang/String;)V` @kind virtual;
  #L15b524.  return v0 @kind object;
}
