record `c.e.n.a$b` @kind class @AccessFlag  {
  `java.lang.CharSequence` `c.e.n.a$b.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `c.e.n.a$b.b` @AccessFlag PRIVATE_FINAL;
  `int` `c.e.n.a$b.c` @AccessFlag PRIVATE_FINAL;
  `int` `c.e.n.a$b.d` @AccessFlag PRIVATE;
  `char` `c.e.n.a$b.e` @AccessFlag PRIVATE;
}
global `byte`[] `@@c.e.n.a$b.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lc/e/n/a$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L180664.  v0:= 1792I;
  #L180668.  v1:= new `byte`[v0];
  #L18066c.  `@@c.e.n.a$b.f` @type ^`byte`[] := v1 @kind object;
  #L180670.  v1:= 0I;
  #L180672.  if v1 >= v0 then goto L18068c;
  #L180676.  v2:= `@@c.e.n.a$b.f` @type ^`byte`[] @kind object;
  #L18067a.  call temp:= `getDirectionality`(v1) @signature `Ljava/lang/Character;.getDirectionality:(I)B` @kind static;
  #L180680.  v3:= temp;
  #L180682.  v2[v1]:= v3 @kind byte;
  #L180686.  v1:= v1 + 1;
  #L18068a.  goto L180672;
  #L18068c.  return @kind void;
}
procedure `void` `<init>`(`c.e.n.a$b` v0 @kind this, `java.lang.CharSequence` v1 @kind object, `boolean` v2 ) @signature `Lc/e/n/a$b;.<init>:(Ljava/lang/CharSequence;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1806a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1806a6.  v0.`c.e.n.a$b.a` @type ^`java.lang.CharSequence` := v1 @kind object;
  #L1806aa.  v0.`c.e.n.a$b.b` @type ^`boolean` := v2 @kind boolean;
  #L1806ae.  call temp:= `length`(v1) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L1806b4.  v1:= temp;
  #L1806b6.  v0.`c.e.n.a$b.c` @type ^`int` := v1;
  #L1806ba.  return @kind void;
}
procedure `byte` `a`(`char` v1 ) @signature `Lc/e/n/a$b;.a:(C)B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L1802cc.  v0:= 1792I;
  #L1802d0.  if v1 >= v0 then goto L1802de;
  #L1802d4.  v0:= `@@c.e.n.a$b.f` @type ^`byte`[] @kind object;
  #L1802d8.  v1:= v0[v1] @kind byte;
  #L1802dc.  goto L1802e6;
  #L1802de.  call temp:= `getDirectionality`(v1) @signature `Ljava/lang/Character;.getDirectionality:(C)B` @kind static;
  #L1802e4.  v1:= temp;
  #L1802e6.  return v1;
}
procedure `byte` `e`(`c.e.n.a$b` v4 @kind this) @signature `Lc/e/n/a$b;.e:()B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1802f8.  v0:= v4.`c.e.n.a$b.d` @type ^`int`;
  #L1802fc.  v1:= v4.`c.e.n.a$b.d` @type ^`int`;
  #L180300.  v2:= 59I;
  #L180304.  if v1 <= 0 then goto L180336;
  #L180308.  v3:= v4.`c.e.n.a$b.a` @type ^`java.lang.CharSequence` @kind object;
  #L18030c.  v1:= v1 + -1;
  #L180310.  v4.`c.e.n.a$b.d` @type ^`int` := v1;
  #L180314.  call temp:= `charAt`(v3, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L18031a.  v1:= temp;
  #L18031c.  v4.`c.e.n.a$b.e` @type ^`char` := v1 @kind char;
  #L180320.  v1:= v4.`c.e.n.a$b.e` @type ^`char` @kind char;
  #L180324.  v3:= 38I;
  #L180328.  if v1 != v3 then goto L180332;
  #L18032c.  v0:= 12I;
  #L180330.  return v0;
  #L180332.  if v1 != v2 then goto L1802fc;
  #L180336.  v4.`c.e.n.a$b.d` @type ^`int` := v0;
  #L18033a.  v4.`c.e.n.a$b.e` @type ^`char` := v2 @kind char;
  #L18033e.  v0:= 13I;
  #L180342.  return v0;
}
procedure `byte` `f`(`c.e.n.a$b` v3 @kind this) @signature `Lc/e/n/a$b;.f:()B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L180354.  v0:= v3.`c.e.n.a$b.d` @type ^`int`;
  #L180358.  v1:= v3.`c.e.n.a$b.c` @type ^`int`;
  #L18035c.  if v0 >= v1 then goto L180382;
  #L180360.  v1:= v3.`c.e.n.a$b.a` @type ^`java.lang.CharSequence` @kind object;
  #L180364.  v2:= v0 + 1;
  #L180368.  v3.`c.e.n.a$b.d` @type ^`int` := v2;
  #L18036c.  call temp:= `charAt`(v1, v0) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L180372.  v0:= temp;
  #L180374.  v3.`c.e.n.a$b.e` @type ^`char` := v0 @kind char;
  #L180378.  v1:= 59I;
  #L18037c.  if v0 == v1 then goto L180382;
  #L180380.  goto L180354;
  #L180382.  v0:= 12I;
  #L180386.  return v0;
}
procedure `byte` `g`(`c.e.n.a$b` v4 @kind this) @signature `Lc/e/n/a$b;.g:()B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L180398.  v0:= v4.`c.e.n.a$b.d` @type ^`int`;
  #L18039c.  v1:= v4.`c.e.n.a$b.d` @type ^`int`;
  #L1803a0.  v2:= 62I;
  #L1803a4.  if v1 <= 0 then goto L180412;
  #L1803a8.  v3:= v4.`c.e.n.a$b.a` @type ^`java.lang.CharSequence` @kind object;
  #L1803ac.  v1:= v1 + -1;
  #L1803b0.  v4.`c.e.n.a$b.d` @type ^`int` := v1;
  #L1803b4.  call temp:= `charAt`(v3, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L1803ba.  v1:= temp;
  #L1803bc.  v4.`c.e.n.a$b.e` @type ^`char` := v1 @kind char;
  #L1803c0.  v1:= v4.`c.e.n.a$b.e` @type ^`char` @kind char;
  #L1803c4.  v3:= 60I;
  #L1803c8.  if v1 != v3 then goto L1803d2;
  #L1803cc.  v0:= 12I;
  #L1803d0.  return v0;
  #L1803d2.  if v1 != v2 then goto L1803d8;
  #L1803d6.  goto L180412;
  #L1803d8.  v2:= 34I;
  #L1803dc.  if v1 == v2 then goto L1803e8;
  #L1803e0.  v2:= 39I;
  #L1803e4.  if v1 != v2 then goto L18039c;
  #L1803e8.  v1:= v4.`c.e.n.a$b.e` @type ^`char` @kind char;
  #L1803ec.  v2:= v4.`c.e.n.a$b.d` @type ^`int`;
  #L1803f0.  if v2 <= 0 then goto L18039c;
  #L1803f4.  v3:= v4.`c.e.n.a$b.a` @type ^`java.lang.CharSequence` @kind object;
  #L1803f8.  v2:= v2 + -1;
  #L1803fc.  v4.`c.e.n.a$b.d` @type ^`int` := v2;
  #L180400.  call temp:= `charAt`(v3, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L180406.  v2:= temp;
  #L180408.  v4.`c.e.n.a$b.e` @type ^`char` := v2 @kind char;
  #L18040c.  if v2 == v1 then goto L18039c;
  #L180410.  goto L1803ec;
  #L180412.  v4.`c.e.n.a$b.d` @type ^`int` := v0;
  #L180416.  v4.`c.e.n.a$b.e` @type ^`char` := v2 @kind char;
  #L18041a.  v0:= 13I;
  #L18041e.  return v0;
}
procedure `byte` `h`(`c.e.n.a$b` v5 @kind this) @signature `Lc/e/n/a$b;.h:()B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L180430.  v0:= v5.`c.e.n.a$b.d` @type ^`int`;
  #L180434.  v1:= v5.`c.e.n.a$b.d` @type ^`int`;
  #L180438.  v2:= v5.`c.e.n.a$b.c` @type ^`int`;
  #L18043c.  if v1 >= v2 then goto L1804a8;
  #L180440.  v2:= v5.`c.e.n.a$b.a` @type ^`java.lang.CharSequence` @kind object;
  #L180444.  v3:= v1 + 1;
  #L180448.  v5.`c.e.n.a$b.d` @type ^`int` := v3;
  #L18044c.  call temp:= `charAt`(v2, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L180452.  v1:= temp;
  #L180454.  v5.`c.e.n.a$b.e` @type ^`char` := v1 @kind char;
  #L180458.  v1:= v5.`c.e.n.a$b.e` @type ^`char` @kind char;
  #L18045c.  v2:= 62I;
  #L180460.  if v1 != v2 then goto L18046a;
  #L180464.  v0:= 12I;
  #L180468.  return v0;
  #L18046a.  v2:= 34I;
  #L18046e.  if v1 == v2 then goto L18047a;
  #L180472.  v2:= 39I;
  #L180476.  if v1 != v2 then goto L180434;
  #L18047a.  v1:= v5.`c.e.n.a$b.e` @type ^`char` @kind char;
  #L18047e.  v2:= v5.`c.e.n.a$b.d` @type ^`int`;
  #L180482.  v3:= v5.`c.e.n.a$b.c` @type ^`int`;
  #L180486.  if v2 >= v3 then goto L180434;
  #L18048a.  v3:= v5.`c.e.n.a$b.a` @type ^`java.lang.CharSequence` @kind object;
  #L18048e.  v4:= v2 + 1;
  #L180492.  v5.`c.e.n.a$b.d` @type ^`int` := v4;
  #L180496.  call temp:= `charAt`(v3, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L18049c.  v2:= temp;
  #L18049e.  v5.`c.e.n.a$b.e` @type ^`char` := v2 @kind char;
  #L1804a2.  if v2 == v1 then goto L180434;
  #L1804a6.  goto L18047e;
  #L1804a8.  v5.`c.e.n.a$b.d` @type ^`int` := v0;
  #L1804ac.  v0:= 60I;
  #L1804b0.  v5.`c.e.n.a$b.e` @type ^`char` := v0 @kind char;
  #L1804b4.  v0:= 13I;
  #L1804b8.  return v0;
}
procedure `byte` `a`(`c.e.n.a$b` v3 @kind this) @signature `Lc/e/n/a$b;.a:()B` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L180178.  v0:= v3.`c.e.n.a$b.a` @type ^`java.lang.CharSequence` @kind object;
  #L18017c.  v1:= v3.`c.e.n.a$b.d` @type ^`int`;
  #L180180.  v1:= v1 + -1;
  #L180184.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L18018a.  v0:= temp;
  #L18018c.  v3.`c.e.n.a$b.e` @type ^`char` := v0 @kind char;
  #L180190.  v0:= v3.`c.e.n.a$b.e` @type ^`char` @kind char;
  #L180194.  call temp:= `isLowSurrogate`(v0) @signature `Ljava/lang/Character;.isLowSurrogate:(C)Z` @kind static;
  #L18019a.  v0:= temp;
  #L18019c.  if v0 == 0 then goto L1801cc;
  #L1801a0.  v0:= v3.`c.e.n.a$b.a` @type ^`java.lang.CharSequence` @kind object;
  #L1801a4.  v1:= v3.`c.e.n.a$b.d` @type ^`int`;
  #L1801a8.  call temp:= `codePointBefore`(v0, v1) @signature `Ljava/lang/Character;.codePointBefore:(Ljava/lang/CharSequence;I)I` @kind static;
  #L1801ae.  v0:= temp;
  #L1801b0.  v1:= v3.`c.e.n.a$b.d` @type ^`int`;
  #L1801b4.  call temp:= `charCount`(v0) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L1801ba.  v2:= temp;
  #L1801bc.  v1:= v1 - v2 @kind int;
  #L1801be.  v3.`c.e.n.a$b.d` @type ^`int` := v1;
  #L1801c2.  call temp:= `getDirectionality`(v0) @signature `Ljava/lang/Character;.getDirectionality:(I)B` @kind static;
  #L1801c8.  v0:= temp;
  #L1801ca.  return v0;
  #L1801cc.  v0:= v3.`c.e.n.a$b.d` @type ^`int`;
  #L1801d0.  v0:= v0 + -1;
  #L1801d4.  v3.`c.e.n.a$b.d` @type ^`int` := v0;
  #L1801d8.  v0:= v3.`c.e.n.a$b.e` @type ^`char` @kind char;
  #L1801dc.  call temp:= `a`(v0) @signature `Lc/e/n/a$b;.a:(C)B` @kind static;
  #L1801e2.  v0:= temp;
  #L1801e4.  v1:= v3.`c.e.n.a$b.b` @type ^`boolean` @kind boolean;
  #L1801e8.  if v1 == 0 then goto L180212;
  #L1801ec.  v1:= v3.`c.e.n.a$b.e` @type ^`char` @kind char;
  #L1801f0.  v2:= 62I;
  #L1801f4.  if v1 != v2 then goto L180202;
  #L1801f8.  call temp:= `g`(v3) @signature `Lc/e/n/a$b;.g:()B` @kind direct;
  #L1801fe.  v0:= temp;
  #L180200.  goto L180212;
  #L180202.  v2:= 59I;
  #L180206.  if v1 != v2 then goto L180212;
  #L18020a.  call temp:= `e`(v3) @signature `Lc/e/n/a$b;.e:()B` @kind direct;
  #L180210.  v0:= temp;
  #L180212.  return v0;
}
procedure `byte` `b`(`c.e.n.a$b` v3 @kind this) @signature `Lc/e/n/a$b;.b:()B` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L180224.  v0:= v3.`c.e.n.a$b.a` @type ^`java.lang.CharSequence` @kind object;
  #L180228.  v1:= v3.`c.e.n.a$b.d` @type ^`int`;
  #L18022c.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L180232.  v0:= temp;
  #L180234.  v3.`c.e.n.a$b.e` @type ^`char` := v0 @kind char;
  #L180238.  v0:= v3.`c.e.n.a$b.e` @type ^`char` @kind char;
  #L18023c.  call temp:= `isHighSurrogate`(v0) @signature `Ljava/lang/Character;.isHighSurrogate:(C)Z` @kind static;
  #L180242.  v0:= temp;
  #L180244.  if v0 == 0 then goto L180274;
  #L180248.  v0:= v3.`c.e.n.a$b.a` @type ^`java.lang.CharSequence` @kind object;
  #L18024c.  v1:= v3.`c.e.n.a$b.d` @type ^`int`;
  #L180250.  call temp:= `codePointAt`(v0, v1) @signature `Ljava/lang/Character;.codePointAt:(Ljava/lang/CharSequence;I)I` @kind static;
  #L180256.  v0:= temp;
  #L180258.  v1:= v3.`c.e.n.a$b.d` @type ^`int`;
  #L18025c.  call temp:= `charCount`(v0) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L180262.  v2:= temp;
  #L180264.  v1:= v1 + v2 @kind int;
  #L180266.  v3.`c.e.n.a$b.d` @type ^`int` := v1;
  #L18026a.  call temp:= `getDirectionality`(v0) @signature `Ljava/lang/Character;.getDirectionality:(I)B` @kind static;
  #L180270.  v0:= temp;
  #L180272.  return v0;
  #L180274.  v0:= v3.`c.e.n.a$b.d` @type ^`int`;
  #L180278.  v0:= v0 + 1;
  #L18027c.  v3.`c.e.n.a$b.d` @type ^`int` := v0;
  #L180280.  v0:= v3.`c.e.n.a$b.e` @type ^`char` @kind char;
  #L180284.  call temp:= `a`(v0) @signature `Lc/e/n/a$b;.a:(C)B` @kind static;
  #L18028a.  v0:= temp;
  #L18028c.  v1:= v3.`c.e.n.a$b.b` @type ^`boolean` @kind boolean;
  #L180290.  if v1 == 0 then goto L1802ba;
  #L180294.  v1:= v3.`c.e.n.a$b.e` @type ^`char` @kind char;
  #L180298.  v2:= 60I;
  #L18029c.  if v1 != v2 then goto L1802aa;
  #L1802a0.  call temp:= `h`(v3) @signature `Lc/e/n/a$b;.h:()B` @kind direct;
  #L1802a6.  v0:= temp;
  #L1802a8.  goto L1802ba;
  #L1802aa.  v2:= 38I;
  #L1802ae.  if v1 != v2 then goto L1802ba;
  #L1802b2.  call temp:= `f`(v3) @signature `Lc/e/n/a$b;.f:()B` @kind direct;
  #L1802b8.  v0:= temp;
  #L1802ba.  return v0;
}
procedure `int` `c`(`c.e.n.a$b` v8 @kind this) @signature `Lc/e/n/a$b;.c:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1804cc.  v0:= 0I;
  #L1804ce.  v8.`c.e.n.a$b.d` @type ^`int` := v0;
  #L1804d2.  v1:= -1I;
  #L1804d4.  v2:= 1I;
  #L1804d6.  v3:= 0I;
  #L1804d8.  v4:= 0I;
  #L1804da.  v5:= 0I;
  #L1804dc.  v6:= v8.`c.e.n.a$b.d` @type ^`int`;
  #L1804e0.  v7:= v8.`c.e.n.a$b.c` @type ^`int`;
  #L1804e4.  if v6 >= v7 then goto L18053a;
  #L1804e8.  if v3 != 0 then goto L18053a;
  #L1804ec.  call temp:= `b`(v8) @signature `Lc/e/n/a$b;.b:()B` @kind virtual;
  #L1804f2.  v6:= temp;
  #L1804f4.  if v6 == 0 then goto L180530;
  #L1804f8.  if v6 == v2 then goto L18052a;
  #L1804fc.  v7:= 2I;
  #L1804fe.  if v6 == v7 then goto L18052a;
  #L180502.  v7:= 9I;
  #L180506.  if v6 == v7 then goto L1804dc;
  #L18050a.  goto L180578;
  #L180510.  goto L180536;
  #L180512.  v5:= v5 + -1;
  #L180516.  v4:= 0I;
  #L180518.  goto L1804dc;
  #L18051a.  v5:= v5 + 1;
  #L18051e.  v4:= 1I;
  #L180520.  goto L1804dc;
  #L180522.  v5:= v5 + 1;
  #L180526.  v4:= -1I;
  #L180528.  goto L1804dc;
  #L18052a.  if v5 != 0 then goto L180536;
  #L18052e.  return v2;
  #L180530.  if v5 != 0 then goto L180536;
  #L180534.  return v1;
  #L180536.  v3:= v5;
  #L180538.  goto L1804dc;
  #L18053a.  if v3 != 0 then goto L180540;
  #L18053e.  return v0;
  #L180540.  if v4 == 0 then goto L180546;
  #L180544.  return v4;
  #L180546.  v4:= v8.`c.e.n.a$b.d` @type ^`int`;
  #L18054a.  if v4 <= 0 then goto L180576;
  #L18054e.  call temp:= `a`(v8) @signature `Lc/e/n/a$b;.a:()B` @kind virtual;
  #L180554.  v4:= temp;
  #L180556.  goto L180594;
  #L18055c.  goto L180546;
  #L18055e.  v5:= v5 + 1;
  #L180562.  goto L180546;
  #L180564.  if v3 != v5 then goto L180570;
  #L180568.  return v2;
  #L18056a.  if v3 != v5 then goto L180570;
  #L18056e.  return v1;
  #L180570.  v5:= v5 + -1;
  #L180574.  goto L180546;
  #L180576.  return v0;
  #L180578.  switch v6
                  | 14 => goto L180522
                  | 15 => goto L180522
                  | 16 => goto L18051a
                  | 17 => goto L18051a
                  | 18 => goto L180512
                  | else => goto L180510;
  #L180594.  switch v4
                  | 14 => goto L18056a
                  | 15 => goto L18056a
                  | 16 => goto L180564
                  | 17 => goto L180564
                  | 18 => goto L18055e
                  | else => goto L18055c;
}
procedure `int` `d`(`c.e.n.a$b` v7 @kind this) @signature `Lc/e/n/a$b;.d:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1805c0.  v0:= v7.`c.e.n.a$b.c` @type ^`int`;
  #L1805c4.  v7.`c.e.n.a$b.d` @type ^`int` := v0;
  #L1805c8.  v0:= 0I;
  #L1805ca.  v1:= 0I;
  #L1805cc.  v2:= 0I;
  #L1805ce.  v3:= v7.`c.e.n.a$b.d` @type ^`int`;
  #L1805d2.  if v3 <= 0 then goto L180636;
  #L1805d6.  call temp:= `a`(v7) @signature `Lc/e/n/a$b;.a:()B` @kind virtual;
  #L1805dc.  v3:= temp;
  #L1805de.  v4:= -1I;
  #L1805e0.  if v3 == 0 then goto L180628;
  #L1805e4.  v5:= 1I;
  #L1805e6.  if v3 == v5 then goto L18061c;
  #L1805ea.  v6:= 2I;
  #L1805ec.  if v3 == v6 then goto L18061c;
  #L1805f0.  v6:= 9I;
  #L1805f4.  if v3 == v6 then goto L1805ce;
  #L1805f8.  goto L180638;
  #L1805fe.  if v1 != 0 then goto L1805ce;
  #L180602.  goto L180632;
  #L180604.  v2:= v2 + 1;
  #L180608.  goto L1805ce;
  #L18060a.  if v1 != v2 then goto L180616;
  #L18060e.  return v5;
  #L180610.  if v1 != v2 then goto L180616;
  #L180614.  return v4;
  #L180616.  v2:= v2 + -1;
  #L18061a.  goto L1805ce;
  #L18061c.  if v2 != 0 then goto L180622;
  #L180620.  return v5;
  #L180622.  if v1 != 0 then goto L1805ce;
  #L180626.  goto L180632;
  #L180628.  if v2 != 0 then goto L18062e;
  #L18062c.  return v4;
  #L18062e.  if v1 != 0 then goto L1805ce;
  #L180632.  v1:= v2;
  #L180634.  goto L1805ce;
  #L180636.  return v0;
  #L180638.  switch v3
                  | 14 => goto L180610
                  | 15 => goto L180610
                  | 16 => goto L18060a
                  | 17 => goto L18060a
                  | 18 => goto L180604
                  | else => goto L1805fe;
}
