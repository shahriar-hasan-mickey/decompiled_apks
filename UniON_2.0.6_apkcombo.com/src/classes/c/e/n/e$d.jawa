record `c.e.n.e$d` @kind class @AccessFlag ABSTRACT extends `c.e.n.d` @kind interface {
  `c.e.n.e$c` `c.e.n.e$d.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`c.e.n.e$d` v0 @kind this, `c.e.n.e$c` v1 @kind object) @signature `Lc/e/n/e$d;.<init>:(Lc/e/n/e$c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L181ab0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L181ab6.  v0.`c.e.n.e$d.a` @type ^`c.e.n.e$c` := v1 @kind object;
  #L181aba.  return @kind void;
}
procedure `boolean` `b`(`c.e.n.e$d` v1 @kind this, `java.lang.CharSequence` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lc/e/n/e$d;.b:(Ljava/lang/CharSequence;II)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L181a24.  v0:= v1.`c.e.n.e$d.a` @type ^`c.e.n.e$c` @kind object;
  #L181a28.  call temp:= `a`(v0, v2, v3, v4) @signature `Lc/e/n/e$c;.a:(Ljava/lang/CharSequence;II)I` @kind interface;
  #L181a2e.  v2:= temp;
  #L181a30.  v3:= 1I;
  #L181a32.  if v2 == 0 then goto L181a48;
  #L181a36.  if v2 == v3 then goto L181a44;
  #L181a3a.  call temp:= `a`(v1) @signature `Lc/e/n/e$d;.a:()Z` @kind virtual;
  #L181a40.  v2:= temp;
  #L181a42.  return v2;
  #L181a44.  v2:= 0I;
  #L181a46.  return v2;
  #L181a48.  return v3;
}
procedure `boolean` `a`() @signature `Lc/e/n/e$d;.a:()Z` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `a`(`c.e.n.e$d` v1 @kind this, `java.lang.CharSequence` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lc/e/n/e$d;.a:(Ljava/lang/CharSequence;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L181a5c.  if v2 == 0 then goto L181a92;
  #L181a60.  if v3 < 0 then goto L181a92;
  #L181a64.  if v4 < 0 then goto L181a92;
  #L181a68.  call temp:= `length`(v2) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L181a6e.  v0:= temp;
  #L181a70.  v0:= v0 - v4 @kind int;
  #L181a72.  if v0 < v3 then goto L181a92;
  #L181a76.  v0:= v1.`c.e.n.e$d.a` @type ^`c.e.n.e$c` @kind object;
  #L181a7a.  if v0 != 0 then goto L181a88;
  #L181a7e.  call temp:= `a`(v1) @signature `Lc/e/n/e$d;.a:()Z` @kind virtual;
  #L181a84.  v2:= temp;
  #L181a86.  return v2;
  #L181a88.  call temp:= `b`(v1, v2, v3, v4) @signature `Lc/e/n/e$d;.b:(Ljava/lang/CharSequence;II)Z` @kind direct;
  #L181a8e.  v2:= temp;
  #L181a90.  return v2;
  #L181a92.  v2:= new `java.lang.IllegalArgumentException`;
  #L181a96.  call `<init>`(v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L181a9c.  throw v2;
}
