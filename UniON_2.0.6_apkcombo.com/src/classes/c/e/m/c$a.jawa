record `c.e.m.c$a` @kind class @AccessFlag  extends `java.util.Comparator` @kind interface {
}
procedure `void` `<init>`(`c.e.m.c$a` v0 @kind this) @signature `Lc/e/m/c$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L17f050.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L17f056.  return @kind void;
}
procedure `int` `a`(`c.e.m.c$a` v4 @kind this, `byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lc/e/m/c$a;.a:([B[B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L17efe4.  v0:= length @variable v5;
  #L17efe6.  v1:= length @variable v6;
  #L17efe8.  if v0 == v1 then goto L17eff4;
  #L17efec.  v5:= length @variable v5;
  #L17efee.  v6:= length @variable v6;
  #L17eff0.  v5:= v5 - v6 @kind int;
  #L17eff2.  return v5;
  #L17eff4.  v0:= 0I;
  #L17eff6.  v1:= 0I;
  #L17eff8.  v2:= length @variable v5;
  #L17effa.  if v1 >= v2 then goto L17f01a;
  #L17effe.  v2:= v5[v1] @kind byte;
  #L17f002.  v3:= v6[v1] @kind byte;
  #L17f006.  if v2 == v3 then goto L17f014;
  #L17f00a.  v5:= v5[v1] @kind byte;
  #L17f00e.  v6:= v6[v1] @kind byte;
  #L17f012.  goto L17eff0;
  #L17f014.  v1:= v1 + 1;
  #L17f018.  goto L17eff8;
  #L17f01a.  return v0;
}
procedure `int` `compare`(`c.e.m.c$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lc/e/m/c$a;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L17f02c.  v1:= (`byte`[]) v1 @kind object;
  #L17f030.  v2:= (`byte`[]) v2 @kind object;
  #L17f034.  call temp:= `a`(v0, v1, v2) @signature `Lc/e/m/c$a;.a:([B[B)I` @kind virtual;
  #L17f03a.  v1:= temp;
  #L17f03c.  return v1;
}
