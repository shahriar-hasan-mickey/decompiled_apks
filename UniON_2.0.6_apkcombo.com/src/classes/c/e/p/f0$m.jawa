record `c.e.p.f0$m` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v3 ) @signature `Lc/e/p/f0$m;.a:(I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L187038.  v0:= 1I;
  #L18703a.  if v3 == v0 then goto L1870c0;
  #L18703e.  v1:= 2I;
  #L187040.  if v3 == v1 then goto L1870be;
  #L187044.  v0:= 4I;
  #L187046.  if v3 == v0 then goto L1870bc;
  #L18704a.  v1:= 8I;
  #L18704e.  if v3 == v1 then goto L1870b8;
  #L187052.  v2:= 16I;
  #L187056.  if v3 == v2 then goto L1870b6;
  #L18705a.  v0:= 32I;
  #L18705e.  if v3 == v0 then goto L1870b2;
  #L187062.  v0:= 64I;
  #L187066.  if v3 == v0 then goto L1870ae;
  #L18706a.  v0:= 128I;
  #L18706e.  if v3 == v0 then goto L1870aa;
  #L187072.  v0:= 256I;
  #L187076.  if v3 != v0 then goto L18707c;
  #L18707a.  return v1;
  #L18707c.  v0:= new `java.lang.IllegalArgumentException`;
  #L187080.  v1:= new `java.lang.StringBuilder`;
  #L187084.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L18708a.  v2:= "type needs to be >= FIRST and <= LAST, type=" @kind object;
  #L18708e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L187094.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L18709a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1870a0.  v3:= temp @kind object;
  #L1870a2.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1870a8.  throw v0;
  #L1870aa.  v3:= 7I;
  #L1870ac.  return v3;
  #L1870ae.  v3:= 6I;
  #L1870b0.  return v3;
  #L1870b2.  v3:= 5I;
  #L1870b4.  return v3;
  #L1870b6.  return v0;
  #L1870b8.  v3:= 3I;
  #L1870ba.  return v3;
  #L1870bc.  return v1;
  #L1870be.  return v0;
  #L1870c0.  v3:= 0I;
  #L1870c2.  return v3;
}
