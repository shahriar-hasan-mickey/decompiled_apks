record `c.d.a.j.n` @kind class @AccessFlag PUBLIC extends `c.d.a.j.o` @kind class {
  `float` `c.d.a.j.n.c` @AccessFlag ;
}
procedure `void` `<init>`(`c.d.a.j.n` v1 @kind this) @signature `Lc/d/a/j/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L16a14c.  call `<init>`(v1) @signature `Lc/d/a/j/o;.<init>:()V` @kind direct;
  #L16a152.  v0:= 0I;
  #L16a154.  v1.`c.d.a.j.n.c` @type ^`float` := v0;
  #L16a158.  return @kind void;
}
procedure `void` `a`(`c.d.a.j.n` v2 @kind this, `int` v3 ) @signature `Lc/d/a/j/n;.a:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16a1a4.  v0:= v2.`c.d.a.j.o.b` @type ^`int`;
  #L16a1a8.  if v0 == 0 then goto L16a1ba;
  #L16a1ac.  v0:= v2.`c.d.a.j.n.c` @type ^`float`;
  #L16a1b0.  v1:= (`float`) v3 @kind i2f;
  #L16a1b2.  v0:= fcmpl(v0, v1);
  #L16a1b6.  if v0 == 0 then goto L16a1d6;
  #L16a1ba.  v3:= (`float`) v3 @kind i2f;
  #L16a1bc.  v2.`c.d.a.j.n.c` @type ^`float` := v3;
  #L16a1c0.  v3:= v2.`c.d.a.j.o.b` @type ^`int`;
  #L16a1c4.  v0:= 1I;
  #L16a1c6.  if v3 != v0 then goto L16a1d0;
  #L16a1ca.  call `b`(v2) @signature `Lc/d/a/j/o;.b:()V` @kind virtual;
  #L16a1d0.  call `a`(v2) @signature `Lc/d/a/j/o;.a:()V` @kind virtual;
  #L16a1d6.  return @kind void;
}
procedure `void` `d`(`c.d.a.j.n` v1 @kind this) @signature `Lc/d/a/j/n;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a184.  call `d`(v1) @signature `Lc/d/a/j/o;.d:()V` @kind super;
  #L16a18a.  v0:= 0I;
  #L16a18c.  v1.`c.d.a.j.n.c` @type ^`float` := v0;
  #L16a190.  return @kind void;
}
procedure `void` `f`(`c.d.a.j.n` v1 @kind this) @signature `Lc/d/a/j/n;.f:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a16c.  v0:= 2I;
  #L16a16e.  v1.`c.d.a.j.o.b` @type ^`int` := v0;
  #L16a172.  return @kind void;
}
