record `c.d.a.j.h` @kind class @AccessFlag PUBLIC {
  `java.util.List` `c.d.a.j.h.a` @AccessFlag PUBLIC;
  `int` `c.d.a.j.h.b` @AccessFlag ;
  `int` `c.d.a.j.h.c` @AccessFlag ;
  `boolean` `c.d.a.j.h.d` @AccessFlag PUBLIC;
  `int`[] `c.d.a.j.h.e` @AccessFlag PUBLIC_FINAL;
  `java.util.List` `c.d.a.j.h.f` @AccessFlag ;
  `java.util.List` `c.d.a.j.h.g` @AccessFlag ;
  `java.util.HashSet` `c.d.a.j.h.h` @AccessFlag ;
  `java.util.HashSet` `c.d.a.j.h.i` @AccessFlag ;
  `java.util.List` `c.d.a.j.h.j` @AccessFlag ;
  `java.util.List` `c.d.a.j.h.k` @AccessFlag ;
}
procedure `void` `<init>`(`c.d.a.j.h` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lc/d/a/j/h;.<init>:(Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L165a7c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L165a82.  v0:= -1I;
  #L165a84.  v3.`c.d.a.j.h.b` @type ^`int` := v0;
  #L165a88.  v3.`c.d.a.j.h.c` @type ^`int` := v0;
  #L165a8c.  v0:= 0I;
  #L165a8e.  v3.`c.d.a.j.h.d` @type ^`boolean` := v0 @kind boolean;
  #L165a92.  v1:= 2I;
  #L165a94.  v1:= new `int`[v1];
  #L165a98.  v2:= v3.`c.d.a.j.h.b` @type ^`int`;
  #L165a9c.  v1[v0]:= v2;
  #L165aa0.  v0:= v3.`c.d.a.j.h.c` @type ^`int`;
  #L165aa4.  v2:= 1I;
  #L165aa6.  v1[v2]:= v0;
  #L165aaa.  v3.`c.d.a.j.h.e` @type ^`int`[] := v1 @kind object;
  #L165aae.  v0:= new `java.util.ArrayList`;
  #L165ab2.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L165ab8.  v3.`c.d.a.j.h.f` @type ^`java.util.List` := v0 @kind object;
  #L165abc.  v0:= new `java.util.ArrayList`;
  #L165ac0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L165ac6.  v3.`c.d.a.j.h.g` @type ^`java.util.List` := v0 @kind object;
  #L165aca.  v0:= new `java.util.HashSet`;
  #L165ace.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L165ad4.  v3.`c.d.a.j.h.h` @type ^`java.util.HashSet` := v0 @kind object;
  #L165ad8.  v0:= new `java.util.HashSet`;
  #L165adc.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L165ae2.  v3.`c.d.a.j.h.i` @type ^`java.util.HashSet` := v0 @kind object;
  #L165ae6.  v0:= new `java.util.ArrayList`;
  #L165aea.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L165af0.  v3.`c.d.a.j.h.j` @type ^`java.util.List` := v0 @kind object;
  #L165af4.  v0:= new `java.util.ArrayList`;
  #L165af8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L165afe.  v3.`c.d.a.j.h.k` @type ^`java.util.List` := v0 @kind object;
  #L165b02.  v3.`c.d.a.j.h.a` @type ^`java.util.List` := v4 @kind object;
  #L165b06.  return @kind void;
}
procedure `void` `<init>`(`c.d.a.j.h` v3 @kind this, `java.util.List` v4 @kind object, `boolean` v5 ) @signature `Lc/d/a/j/h;.<init>:(Ljava/util/List;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L165b18.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L165b1e.  v0:= -1I;
  #L165b20.  v3.`c.d.a.j.h.b` @type ^`int` := v0;
  #L165b24.  v3.`c.d.a.j.h.c` @type ^`int` := v0;
  #L165b28.  v0:= 0I;
  #L165b2a.  v3.`c.d.a.j.h.d` @type ^`boolean` := v0 @kind boolean;
  #L165b2e.  v1:= 2I;
  #L165b30.  v1:= new `int`[v1];
  #L165b34.  v2:= v3.`c.d.a.j.h.b` @type ^`int`;
  #L165b38.  v1[v0]:= v2;
  #L165b3c.  v0:= v3.`c.d.a.j.h.c` @type ^`int`;
  #L165b40.  v2:= 1I;
  #L165b42.  v1[v2]:= v0;
  #L165b46.  v3.`c.d.a.j.h.e` @type ^`int`[] := v1 @kind object;
  #L165b4a.  v0:= new `java.util.ArrayList`;
  #L165b4e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L165b54.  v3.`c.d.a.j.h.f` @type ^`java.util.List` := v0 @kind object;
  #L165b58.  v0:= new `java.util.ArrayList`;
  #L165b5c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L165b62.  v3.`c.d.a.j.h.g` @type ^`java.util.List` := v0 @kind object;
  #L165b66.  v0:= new `java.util.HashSet`;
  #L165b6a.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L165b70.  v3.`c.d.a.j.h.h` @type ^`java.util.HashSet` := v0 @kind object;
  #L165b74.  v0:= new `java.util.HashSet`;
  #L165b78.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L165b7e.  v3.`c.d.a.j.h.i` @type ^`java.util.HashSet` := v0 @kind object;
  #L165b82.  v0:= new `java.util.ArrayList`;
  #L165b86.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L165b8c.  v3.`c.d.a.j.h.j` @type ^`java.util.List` := v0 @kind object;
  #L165b90.  v0:= new `java.util.ArrayList`;
  #L165b94.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L165b9a.  v3.`c.d.a.j.h.k` @type ^`java.util.List` := v0 @kind object;
  #L165b9e.  v3.`c.d.a.j.h.a` @type ^`java.util.List` := v4 @kind object;
  #L165ba2.  v3.`c.d.a.j.h.d` @type ^`boolean` := v5 @kind boolean;
  #L165ba6.  return @kind void;
}
procedure `void` `a`(`c.d.a.j.h` v6 @kind this, `c.d.a.j.f` v7 @kind object) @signature `Lc/d/a/j/h;.a:(Lc/d/a/j/f;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L165c88.  v0:= v7.`c.d.a.j.f.b0` @type ^`boolean` @kind boolean;
  #L165c8c.  if v0 == 0 then goto L165e3a;
  #L165c90.  call temp:= `y`(v7) @signature `Lc/d/a/j/f;.y:()Z` @kind virtual;
  #L165c96.  v0:= temp;
  #L165c98.  if v0 == 0 then goto L165c9e;
  #L165c9c.  return @kind void;
  #L165c9e.  v0:= v7.`c.d.a.j.f.u` @type ^`c.d.a.j.e` @kind object;
  #L165ca2.  v0:= v0.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L165ca6.  v1:= 0I;
  #L165ca8.  v2:= 1I;
  #L165caa.  if v0 == 0 then goto L165cb2;
  #L165cae.  v0:= 1I;
  #L165cb0.  goto L165cb4;
  #L165cb2.  v0:= 0I;
  #L165cb4.  if v0 == 0 then goto L165cbe;
  #L165cb8.  v3:= v7.`c.d.a.j.f.u` @type ^`c.d.a.j.e` @kind object;
  #L165cbc.  goto L165cc2;
  #L165cbe.  v3:= v7.`c.d.a.j.f.s` @type ^`c.d.a.j.e` @kind object;
  #L165cc2.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L165cc6.  if v3 == 0 then goto L165d0e;
  #L165cca.  v4:= v3.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L165cce.  v5:= v4.`c.d.a.j.f.c0` @type ^`boolean` @kind boolean;
  #L165cd2.  if v5 != 0 then goto L165cdc;
  #L165cd6.  call `a`(v6, v4) @signature `Lc/d/a/j/h;.a:(Lc/d/a/j/f;)V` @kind direct;
  #L165cdc.  v4:= v3.`c.d.a.j.e.c` @type ^`c.d.a.j.e$d` @kind object;
  #L165ce0.  v5:= `@@c.d.a.j.e$d.e` @type ^`c.d.a.j.e$d` @kind object;
  #L165ce4.  if v4 != v5 then goto L165cfc;
  #L165ce8.  v3:= v3.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L165cec.  v4:= v3.`c.d.a.j.f.I` @type ^`int`;
  #L165cf0.  call temp:= `s`(v3) @signature `Lc/d/a/j/f;.s:()I` @kind virtual;
  #L165cf6.  v3:= temp;
  #L165cf8.  v3:= v3 + v4 @kind int;
  #L165cfa.  goto L165d10;
  #L165cfc.  v5:= `@@c.d.a.j.e$d.c` @type ^`c.d.a.j.e$d` @kind object;
  #L165d00.  if v4 != v5 then goto L165d0e;
  #L165d04.  v3:= v3.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L165d08.  v3:= v3.`c.d.a.j.f.I` @type ^`int`;
  #L165d0c.  goto L165d10;
  #L165d0e.  v3:= 0I;
  #L165d10.  if v0 == 0 then goto L165d24;
  #L165d14.  v0:= v7.`c.d.a.j.f.u` @type ^`c.d.a.j.e` @kind object;
  #L165d18.  call temp:= `b`(v0) @signature `Lc/d/a/j/e;.b:()I` @kind virtual;
  #L165d1e.  v0:= temp;
  #L165d20.  v3:= v3 - v0 @kind int;
  #L165d22.  goto L165d3c;
  #L165d24.  v0:= v7.`c.d.a.j.f.s` @type ^`c.d.a.j.e` @kind object;
  #L165d28.  call temp:= `b`(v0) @signature `Lc/d/a/j/e;.b:()I` @kind virtual;
  #L165d2e.  v0:= temp;
  #L165d30.  call temp:= `s`(v7) @signature `Lc/d/a/j/f;.s:()I` @kind virtual;
  #L165d36.  v4:= temp;
  #L165d38.  v0:= v0 + v4 @kind int;
  #L165d3a.  v3:= v3 + v0 @kind int;
  #L165d3c.  call temp:= `s`(v7) @signature `Lc/d/a/j/f;.s:()I` @kind virtual;
  #L165d42.  v0:= temp;
  #L165d44.  v0:= v3 - v0 @kind int;
  #L165d48.  call `a`(v7, v0, v3) @signature `Lc/d/a/j/f;.a:(II)V` @kind virtual;
  #L165d4e.  v0:= v7.`c.d.a.j.f.w` @type ^`c.d.a.j.e` @kind object;
  #L165d52.  v0:= v0.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L165d56.  if v0 == 0 then goto L165d92;
  #L165d5a.  v1:= v0.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L165d5e.  v3:= v1.`c.d.a.j.f.c0` @type ^`boolean` @kind boolean;
  #L165d62.  if v3 != 0 then goto L165d6c;
  #L165d66.  call `a`(v6, v1) @signature `Lc/d/a/j/h;.a:(Lc/d/a/j/f;)V` @kind direct;
  #L165d6c.  v0:= v0.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L165d70.  v1:= v0.`c.d.a.j.f.J` @type ^`int`;
  #L165d74.  v0:= v0.`c.d.a.j.f.Q` @type ^`int`;
  #L165d78.  v1:= v1 + v0 @kind int;
  #L165d7a.  v0:= v7.`c.d.a.j.f.Q` @type ^`int`;
  #L165d7e.  v1:= v1 - v0 @kind int;
  #L165d80.  v0:= v7.`c.d.a.j.f.F` @type ^`int`;
  #L165d84.  v0:= v0 + v1 @kind int;
  #L165d86.  call `e`(v7, v1, v0) @signature `Lc/d/a/j/f;.e:(II)V` @kind virtual;
  #L165d8c.  v7.`c.d.a.j.f.c0` @type ^`boolean` := v2 @kind boolean;
  #L165d90.  return @kind void;
  #L165d92.  v0:= v7.`c.d.a.j.f.v` @type ^`c.d.a.j.e` @kind object;
  #L165d96.  v0:= v0.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L165d9a.  if v0 == 0 then goto L165da0;
  #L165d9e.  v1:= 1I;
  #L165da0.  if v1 == 0 then goto L165daa;
  #L165da4.  v0:= v7.`c.d.a.j.f.v` @type ^`c.d.a.j.e` @kind object;
  #L165da8.  goto L165dae;
  #L165daa.  v0:= v7.`c.d.a.j.f.t` @type ^`c.d.a.j.e` @kind object;
  #L165dae.  v0:= v0.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L165db2.  if v0 == 0 then goto L165df8;
  #L165db6.  v4:= v0.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L165dba.  v5:= v4.`c.d.a.j.f.c0` @type ^`boolean` @kind boolean;
  #L165dbe.  if v5 != 0 then goto L165dc8;
  #L165dc2.  call `a`(v6, v4) @signature `Lc/d/a/j/h;.a:(Lc/d/a/j/f;)V` @kind direct;
  #L165dc8.  v4:= v0.`c.d.a.j.e.c` @type ^`c.d.a.j.e$d` @kind object;
  #L165dcc.  v5:= `@@c.d.a.j.e$d.f` @type ^`c.d.a.j.e$d` @kind object;
  #L165dd0.  if v4 != v5 then goto L165de8;
  #L165dd4.  v0:= v0.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L165dd8.  v3:= v0.`c.d.a.j.f.J` @type ^`int`;
  #L165ddc.  call temp:= `i`(v0) @signature `Lc/d/a/j/f;.i:()I` @kind virtual;
  #L165de2.  v0:= temp;
  #L165de4.  v3:= v3 + v0 @kind int;
  #L165de6.  goto L165df8;
  #L165de8.  v5:= `@@c.d.a.j.e$d.d` @type ^`c.d.a.j.e$d` @kind object;
  #L165dec.  if v4 != v5 then goto L165df8;
  #L165df0.  v0:= v0.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L165df4.  v3:= v0.`c.d.a.j.f.J` @type ^`int`;
  #L165df8.  if v1 == 0 then goto L165e0c;
  #L165dfc.  v0:= v7.`c.d.a.j.f.v` @type ^`c.d.a.j.e` @kind object;
  #L165e00.  call temp:= `b`(v0) @signature `Lc/d/a/j/e;.b:()I` @kind virtual;
  #L165e06.  v0:= temp;
  #L165e08.  v3:= v3 - v0 @kind int;
  #L165e0a.  goto L165e24;
  #L165e0c.  v0:= v7.`c.d.a.j.f.t` @type ^`c.d.a.j.e` @kind object;
  #L165e10.  call temp:= `b`(v0) @signature `Lc/d/a/j/e;.b:()I` @kind virtual;
  #L165e16.  v0:= temp;
  #L165e18.  call temp:= `i`(v7) @signature `Lc/d/a/j/f;.i:()I` @kind virtual;
  #L165e1e.  v1:= temp;
  #L165e20.  v0:= v0 + v1 @kind int;
  #L165e22.  v3:= v3 + v0 @kind int;
  #L165e24.  call temp:= `i`(v7) @signature `Lc/d/a/j/f;.i:()I` @kind virtual;
  #L165e2a.  v0:= temp;
  #L165e2c.  v0:= v3 - v0 @kind int;
  #L165e30.  call `e`(v7, v0, v3) @signature `Lc/d/a/j/f;.e:(II)V` @kind virtual;
  #L165e36.  v7.`c.d.a.j.f.c0` @type ^`boolean` := v2 @kind boolean;
  #L165e3a.  return @kind void;
}
procedure `void` `a`(`c.d.a.j.h` v5 @kind this, `java.util.ArrayList` v6 @kind object, `c.d.a.j.f` v7 @kind object) @signature `Lc/d/a/j/h;.a:(Ljava/util/ArrayList;Lc/d/a/j/f;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L165be8.  v0:= v7.`c.d.a.j.f.d0` @type ^`boolean` @kind boolean;
  #L165bec.  if v0 == 0 then goto L165bf2;
  #L165bf0.  return @kind void;
  #L165bf2.  call temp:= `add`(v6, v7) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L165bf8.  v0:= 1I;
  #L165bfa.  v7.`c.d.a.j.f.d0` @type ^`boolean` := v0 @kind boolean;
  #L165bfe.  call temp:= `y`(v7) @signature `Lc/d/a/j/f;.y:()Z` @kind virtual;
  #L165c04.  v0:= temp;
  #L165c06.  if v0 == 0 then goto L165c0c;
  #L165c0a.  return @kind void;
  #L165c0c.  v0:= instanceof @variable v7 @type ^`c.d.a.j.j` @kind boolean;
  #L165c10.  v1:= 0I;
  #L165c12.  if v0 == 0 then goto L165c3a;
  #L165c16.  v0:= v7 @kind object;
  #L165c18.  v0:= (`c.d.a.j.j`) v0 @kind object;
  #L165c1c.  v2:= v0.`c.d.a.j.j.l0` @type ^`int`;
  #L165c20.  v3:= 0I;
  #L165c22.  if v3 >= v2 then goto L165c3a;
  #L165c26.  v4:= v0.`c.d.a.j.j.k0` @type ^`c.d.a.j.f`[] @kind object;
  #L165c2a.  v4:= v4[v3] @kind object;
  #L165c2e.  call `a`(v5, v6, v4) @signature `Lc/d/a/j/h;.a:(Ljava/util/ArrayList;Lc/d/a/j/f;)V` @kind direct;
  #L165c34.  v3:= v3 + 1;
  #L165c38.  goto L165c22;
  #L165c3a.  v0:= v7.`c.d.a.j.f.A` @type ^`c.d.a.j.e`[] @kind object;
  #L165c3e.  v0:= length @variable v0;
  #L165c40.  if v1 >= v0 then goto L165c74;
  #L165c44.  v2:= v7.`c.d.a.j.f.A` @type ^`c.d.a.j.e`[] @kind object;
  #L165c48.  v2:= v2[v1] @kind object;
  #L165c4c.  v2:= v2.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L165c50.  if v2 == 0 then goto L165c6e;
  #L165c54.  v3:= v2.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L165c58.  if v2 == 0 then goto L165c6e;
  #L165c5c.  call temp:= `k`(v7) @signature `Lc/d/a/j/f;.k:()Lc/d/a/j/f;` @kind virtual;
  #L165c62.  v2:= temp @kind object;
  #L165c64.  if v3 == v2 then goto L165c6e;
  #L165c68.  call `a`(v5, v6, v3) @signature `Lc/d/a/j/h;.a:(Ljava/util/ArrayList;Lc/d/a/j/f;)V` @kind direct;
  #L165c6e.  v1:= v1 + 1;
  #L165c72.  goto L165c40;
  #L165c74.  return @kind void;
}
procedure `java.util.List` `a`(`c.d.a.j.h` v4 @kind this) @signature `Lc/d/a/j/h;.a:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1659c0.  v0:= v4.`c.d.a.j.h.j` @type ^`java.util.List` @kind object;
  #L1659c4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1659ca.  v0:= temp;
  #L1659cc.  if v0 != 0 then goto L1659d6;
  #L1659d0.  v0:= v4.`c.d.a.j.h.j` @type ^`java.util.List` @kind object;
  #L1659d4.  return v0 @kind object;
  #L1659d6.  v0:= v4.`c.d.a.j.h.a` @type ^`java.util.List` @kind object;
  #L1659da.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1659e0.  v0:= temp;
  #L1659e2.  v1:= 0I;
  #L1659e4.  if v1 >= v0 then goto L165a14;
  #L1659e8.  v2:= v4.`c.d.a.j.h.a` @type ^`java.util.List` @kind object;
  #L1659ec.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1659f2.  v2:= temp @kind object;
  #L1659f4.  v2:= (`c.d.a.j.f`) v2 @kind object;
  #L1659f8.  v3:= v2.`c.d.a.j.f.b0` @type ^`boolean` @kind boolean;
  #L1659fc.  if v3 != 0 then goto L165a0e;
  #L165a00.  v3:= v4.`c.d.a.j.h.j` @type ^`java.util.List` @kind object;
  #L165a04.  v3:= (`java.util.ArrayList`) v3 @kind object;
  #L165a08.  call `a`(v4, v3, v2) @signature `Lc/d/a/j/h;.a:(Ljava/util/ArrayList;Lc/d/a/j/f;)V` @kind direct;
  #L165a0e.  v1:= v1 + 1;
  #L165a12.  goto L1659e4;
  #L165a14.  v0:= v4.`c.d.a.j.h.k` @type ^`java.util.List` @kind object;
  #L165a18.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L165a1e.  v0:= v4.`c.d.a.j.h.k` @type ^`java.util.List` @kind object;
  #L165a22.  v1:= v4.`c.d.a.j.h.a` @type ^`java.util.List` @kind object;
  #L165a26.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L165a2c.  v0:= v4.`c.d.a.j.h.k` @type ^`java.util.List` @kind object;
  #L165a30.  v1:= v4.`c.d.a.j.h.j` @type ^`java.util.List` @kind object;
  #L165a34.  call temp:= `removeAll`(v0, v1) @signature `Ljava/util/List;.removeAll:(Ljava/util/Collection;)Z` @kind interface;
  #L165a3a.  v0:= v4.`c.d.a.j.h.j` @type ^`java.util.List` @kind object;
  #L165a3e.  return v0 @kind object;
}
procedure `java.util.List` `a`(`c.d.a.j.h` v1 @kind this, `int` v2 ) @signature `Lc/d/a/j/h;.a:(I)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L165994.  if v2 != 0 then goto L16599e;
  #L165998.  v2:= v1.`c.d.a.j.h.f` @type ^`java.util.List` @kind object;
  #L16599c.  return v2 @kind object;
  #L16599e.  v0:= 1I;
  #L1659a0.  if v2 != v0 then goto L1659aa;
  #L1659a4.  v2:= v1.`c.d.a.j.h.g` @type ^`java.util.List` @kind object;
  #L1659a8.  return v2 @kind object;
  #L1659aa.  v2:= 0I;
  #L1659ac.  return v2 @kind object;
}
procedure `void` `a`(`c.d.a.j.h` v1 @kind this, `c.d.a.j.f` v2 @kind object, `int` v3 ) @signature `Lc/d/a/j/h;.a:(Lc/d/a/j/f;I)V` @AccessFlag  {
    temp;
    v0;

  #L165bb8.  if v3 != 0 then goto L165bc8;
  #L165bbc.  v3:= v1.`c.d.a.j.h.h` @type ^`java.util.HashSet` @kind object;
  #L165bc0.  call temp:= `add`(v3, v2) @signature `Ljava/util/HashSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L165bc6.  goto L165bd4;
  #L165bc8.  v0:= 1I;
  #L165bca.  if v3 != v0 then goto L165bd4;
  #L165bce.  v3:= v1.`c.d.a.j.h.i` @type ^`java.util.HashSet` @kind object;
  #L165bd2.  goto L165bc0;
  #L165bd4.  return @kind void;
}
procedure `java.util.Set` `b`(`c.d.a.j.h` v1 @kind this, `int` v2 ) @signature `Lc/d/a/j/h;.b:(I)Ljava/util/Set;` @AccessFlag  {
    temp;
    v0;

  #L165a50.  if v2 != 0 then goto L165a5a;
  #L165a54.  v2:= v1.`c.d.a.j.h.h` @type ^`java.util.HashSet` @kind object;
  #L165a58.  return v2 @kind object;
  #L165a5a.  v0:= 1I;
  #L165a5c.  if v2 != v0 then goto L165a66;
  #L165a60.  v2:= v1.`c.d.a.j.h.i` @type ^`java.util.HashSet` @kind object;
  #L165a64.  return v2 @kind object;
  #L165a66.  v2:= 0I;
  #L165a68.  return v2 @kind object;
}
procedure `void` `b`(`c.d.a.j.h` v3 @kind this) @signature `Lc/d/a/j/h;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L165e4c.  v0:= v3.`c.d.a.j.h.k` @type ^`java.util.List` @kind object;
  #L165e50.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L165e56.  v0:= temp;
  #L165e58.  v1:= 0I;
  #L165e5a.  if v1 >= v0 then goto L165e7a;
  #L165e5e.  v2:= v3.`c.d.a.j.h.k` @type ^`java.util.List` @kind object;
  #L165e62.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L165e68.  v2:= temp @kind object;
  #L165e6a.  v2:= (`c.d.a.j.f`) v2 @kind object;
  #L165e6e.  call `a`(v3, v2) @signature `Lc/d/a/j/h;.a:(Lc/d/a/j/f;)V` @kind direct;
  #L165e74.  v1:= v1 + 1;
  #L165e78.  goto L165e5a;
  #L165e7a.  return @kind void;
}
