record `c.d.a.j.j` @kind class @AccessFlag PUBLIC extends `c.d.a.j.f` @kind class {
  `c.d.a.j.f`[] `c.d.a.j.j.k0` @AccessFlag PROTECTED;
  `int` `c.d.a.j.j.l0` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`c.d.a.j.j` v1 @kind this) @signature `Lc/d/a/j/j;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L16897c.  call `<init>`(v1) @signature `Lc/d/a/j/f;.<init>:()V` @kind direct;
  #L168982.  v0:= 4I;
  #L168984.  v0:= new `c.d.a.j.f`[v0];
  #L168988.  v1.`c.d.a.j.j.k0` @type ^`c.d.a.j.f`[] := v0 @kind object;
  #L16898c.  v0:= 0I;
  #L16898e.  v1.`c.d.a.j.j.l0` @type ^`int` := v0;
  #L168992.  return @kind void;
}
procedure `void` `J`(`c.d.a.j.j` v1 @kind this) @signature `Lc/d/a/j/j;.J:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1689f4.  v0:= 0I;
  #L1689f6.  v1.`c.d.a.j.j.l0` @type ^`int` := v0;
  #L1689fa.  return @kind void;
}
procedure `void` `b`(`c.d.a.j.j` v3 @kind this, `c.d.a.j.f` v4 @kind object) @signature `Lc/d/a/j/j;.b:(Lc/d/a/j/f;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1689a4.  v0:= v3.`c.d.a.j.j.l0` @type ^`int`;
  #L1689a8.  v0:= v0 + 1;
  #L1689ac.  v1:= v3.`c.d.a.j.j.k0` @type ^`c.d.a.j.f`[] @kind object;
  #L1689b0.  v2:= length @variable v1;
  #L1689b2.  if v0 <= v2 then goto L1689cc;
  #L1689b6.  v0:= length @variable v1;
  #L1689b8.  v0:= v0 * 2;
  #L1689bc.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L1689c2.  v0:= temp @kind object;
  #L1689c4.  v0:= (`c.d.a.j.f`[]) v0 @kind object;
  #L1689c8.  v3.`c.d.a.j.j.k0` @type ^`c.d.a.j.f`[] := v0 @kind object;
  #L1689cc.  v0:= v3.`c.d.a.j.j.k0` @type ^`c.d.a.j.f`[] @kind object;
  #L1689d0.  v1:= v3.`c.d.a.j.j.l0` @type ^`int`;
  #L1689d4.  v0[v1]:= v4 @kind object;
  #L1689d8.  v1:= v1 + 1;
  #L1689dc.  v3.`c.d.a.j.j.l0` @type ^`int` := v1;
  #L1689e0.  return @kind void;
}
