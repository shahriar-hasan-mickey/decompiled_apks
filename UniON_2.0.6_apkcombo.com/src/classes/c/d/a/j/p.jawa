record `c.d.a.j.p` @kind class @AccessFlag PUBLIC {
  `int` `c.d.a.j.p.a` @AccessFlag PRIVATE;
  `int` `c.d.a.j.p.b` @AccessFlag PRIVATE;
  `int` `c.d.a.j.p.c` @AccessFlag PRIVATE;
  `int` `c.d.a.j.p.d` @AccessFlag PRIVATE;
  `java.util.ArrayList` `c.d.a.j.p.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.d.a.j.p` v5 @kind this, `c.d.a.j.f` v6 @kind object) @signature `Lc/d/a/j/p;.<init>:(Lc/d/a/j/f;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16a420.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L16a426.  v0:= new `java.util.ArrayList`;
  #L16a42a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L16a430.  v5.`c.d.a.j.p.e` @type ^`java.util.ArrayList` := v0 @kind object;
  #L16a434.  call temp:= `v`(v6) @signature `Lc/d/a/j/f;.v:()I` @kind virtual;
  #L16a43a.  v0:= temp;
  #L16a43c.  v5.`c.d.a.j.p.a` @type ^`int` := v0;
  #L16a440.  call temp:= `w`(v6) @signature `Lc/d/a/j/f;.w:()I` @kind virtual;
  #L16a446.  v0:= temp;
  #L16a448.  v5.`c.d.a.j.p.b` @type ^`int` := v0;
  #L16a44c.  call temp:= `s`(v6) @signature `Lc/d/a/j/f;.s:()I` @kind virtual;
  #L16a452.  v0:= temp;
  #L16a454.  v5.`c.d.a.j.p.c` @type ^`int` := v0;
  #L16a458.  call temp:= `i`(v6) @signature `Lc/d/a/j/f;.i:()I` @kind virtual;
  #L16a45e.  v0:= temp;
  #L16a460.  v5.`c.d.a.j.p.d` @type ^`int` := v0;
  #L16a464.  call temp:= `b`(v6) @signature `Lc/d/a/j/f;.b:()Ljava/util/ArrayList;` @kind virtual;
  #L16a46a.  v6:= temp @kind object;
  #L16a46c.  call temp:= `size`(v6) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L16a472.  v0:= temp;
  #L16a474.  v1:= 0I;
  #L16a476.  if v1 >= v0 then goto L16a4a0;
  #L16a47a.  call temp:= `get`(v6, v1) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L16a480.  v2:= temp @kind object;
  #L16a482.  v2:= (`c.d.a.j.e`) v2 @kind object;
  #L16a486.  v3:= v5.`c.d.a.j.p.e` @type ^`java.util.ArrayList` @kind object;
  #L16a48a.  v4:= new `c.d.a.j.p$a`;
  #L16a48e.  call `<init>`(v4, v2) @signature `Lc/d/a/j/p$a;.<init>:(Lc/d/a/j/e;)V` @kind direct;
  #L16a494.  call temp:= `add`(v3, v4) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L16a49a.  v1:= v1 + 1;
  #L16a49e.  goto L16a476;
  #L16a4a0.  return @kind void;
}
procedure `void` `a`(`c.d.a.j.p` v3 @kind this, `c.d.a.j.f` v4 @kind object) @signature `Lc/d/a/j/p;.a:(Lc/d/a/j/f;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16a4b4.  v0:= v3.`c.d.a.j.p.a` @type ^`int`;
  #L16a4b8.  call `r`(v4, v0) @signature `Lc/d/a/j/f;.r:(I)V` @kind virtual;
  #L16a4be.  v0:= v3.`c.d.a.j.p.b` @type ^`int`;
  #L16a4c2.  call `s`(v4, v0) @signature `Lc/d/a/j/f;.s:(I)V` @kind virtual;
  #L16a4c8.  v0:= v3.`c.d.a.j.p.c` @type ^`int`;
  #L16a4cc.  call `o`(v4, v0) @signature `Lc/d/a/j/f;.o:(I)V` @kind virtual;
  #L16a4d2.  v0:= v3.`c.d.a.j.p.d` @type ^`int`;
  #L16a4d6.  call `g`(v4, v0) @signature `Lc/d/a/j/f;.g:(I)V` @kind virtual;
  #L16a4dc.  v0:= v3.`c.d.a.j.p.e` @type ^`java.util.ArrayList` @kind object;
  #L16a4e0.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L16a4e6.  v0:= temp;
  #L16a4e8.  v1:= 0I;
  #L16a4ea.  if v1 >= v0 then goto L16a50a;
  #L16a4ee.  v2:= v3.`c.d.a.j.p.e` @type ^`java.util.ArrayList` @kind object;
  #L16a4f2.  call temp:= `get`(v2, v1) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L16a4f8.  v2:= temp @kind object;
  #L16a4fa.  v2:= (`c.d.a.j.p$a`) v2 @kind object;
  #L16a4fe.  call `a`(v2, v4) @signature `Lc/d/a/j/p$a;.a:(Lc/d/a/j/f;)V` @kind virtual;
  #L16a504.  v1:= v1 + 1;
  #L16a508.  goto L16a4ea;
  #L16a50a.  return @kind void;
}
procedure `void` `b`(`c.d.a.j.p` v3 @kind this, `c.d.a.j.f` v4 @kind object) @signature `Lc/d/a/j/p;.b:(Lc/d/a/j/f;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16a51c.  call temp:= `v`(v4) @signature `Lc/d/a/j/f;.v:()I` @kind virtual;
  #L16a522.  v0:= temp;
  #L16a524.  v3.`c.d.a.j.p.a` @type ^`int` := v0;
  #L16a528.  call temp:= `w`(v4) @signature `Lc/d/a/j/f;.w:()I` @kind virtual;
  #L16a52e.  v0:= temp;
  #L16a530.  v3.`c.d.a.j.p.b` @type ^`int` := v0;
  #L16a534.  call temp:= `s`(v4) @signature `Lc/d/a/j/f;.s:()I` @kind virtual;
  #L16a53a.  v0:= temp;
  #L16a53c.  v3.`c.d.a.j.p.c` @type ^`int` := v0;
  #L16a540.  call temp:= `i`(v4) @signature `Lc/d/a/j/f;.i:()I` @kind virtual;
  #L16a546.  v0:= temp;
  #L16a548.  v3.`c.d.a.j.p.d` @type ^`int` := v0;
  #L16a54c.  v0:= v3.`c.d.a.j.p.e` @type ^`java.util.ArrayList` @kind object;
  #L16a550.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L16a556.  v0:= temp;
  #L16a558.  v1:= 0I;
  #L16a55a.  if v1 >= v0 then goto L16a57a;
  #L16a55e.  v2:= v3.`c.d.a.j.p.e` @type ^`java.util.ArrayList` @kind object;
  #L16a562.  call temp:= `get`(v2, v1) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L16a568.  v2:= temp @kind object;
  #L16a56a.  v2:= (`c.d.a.j.p$a`) v2 @kind object;
  #L16a56e.  call `b`(v2, v4) @signature `Lc/d/a/j/p$a;.b:(Lc/d/a/j/f;)V` @kind virtual;
  #L16a574.  v1:= v1 + 1;
  #L16a578.  goto L16a55a;
  #L16a57a.  return @kind void;
}
