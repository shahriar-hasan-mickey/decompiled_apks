record `c.d.a.j.a` @kind class @AccessFlag PUBLIC {
}
procedure `int` `a`(`c.d.a.j.f` v2 @kind object) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L162b68.  call temp:= `j`(v2) @signature `Lc/d/a/j/f;.j:()Lc/d/a/j/f$b;` @kind virtual;
  #L162b6e.  v0:= temp @kind object;
  #L162b70.  v1:= `@@c.d.a.j.f$b.d` @type ^`c.d.a.j.f$b` @kind object;
  #L162b74.  if v0 != v1 then goto L162bae;
  #L162b78.  v0:= v2.`c.d.a.j.f.H` @type ^`int`;
  #L162b7c.  if v0 != 0 then goto L162b94;
  #L162b80.  call temp:= `i`(v2) @signature `Lc/d/a/j/f;.i:()I` @kind virtual;
  #L162b86.  v0:= temp;
  #L162b88.  v0:= (`float`) v0 @kind i2f;
  #L162b8a.  v1:= v2.`c.d.a.j.f.G` @type ^`float`;
  #L162b8e.  v0:= v0 * v1 @kind float;
  #L162b92.  goto L162ba4;
  #L162b94.  call temp:= `i`(v2) @signature `Lc/d/a/j/f;.i:()I` @kind virtual;
  #L162b9a.  v0:= temp;
  #L162b9c.  v0:= (`float`) v0 @kind i2f;
  #L162b9e.  v1:= v2.`c.d.a.j.f.G` @type ^`float`;
  #L162ba2.  v0:= v0 / v1 @kind float;
  #L162ba4.  v0:= (`int`) v0 @kind f2i;
  #L162ba6.  call `o`(v2, v0) @signature `Lc/d/a/j/f;.o:(I)V` @kind virtual;
  #L162bac.  goto L162bf8;
  #L162bae.  call temp:= `q`(v2) @signature `Lc/d/a/j/f;.q:()Lc/d/a/j/f$b;` @kind virtual;
  #L162bb4.  v0:= temp @kind object;
  #L162bb6.  v1:= `@@c.d.a.j.f$b.d` @type ^`c.d.a.j.f$b` @kind object;
  #L162bba.  if v0 != v1 then goto L162bf6;
  #L162bbe.  v0:= v2.`c.d.a.j.f.H` @type ^`int`;
  #L162bc2.  v1:= 1I;
  #L162bc4.  if v0 != v1 then goto L162bdc;
  #L162bc8.  call temp:= `s`(v2) @signature `Lc/d/a/j/f;.s:()I` @kind virtual;
  #L162bce.  v0:= temp;
  #L162bd0.  v0:= (`float`) v0 @kind i2f;
  #L162bd2.  v1:= v2.`c.d.a.j.f.G` @type ^`float`;
  #L162bd6.  v0:= v0 * v1 @kind float;
  #L162bda.  goto L162bec;
  #L162bdc.  call temp:= `s`(v2) @signature `Lc/d/a/j/f;.s:()I` @kind virtual;
  #L162be2.  v0:= temp;
  #L162be4.  v0:= (`float`) v0 @kind i2f;
  #L162be6.  v1:= v2.`c.d.a.j.f.G` @type ^`float`;
  #L162bea.  v0:= v0 / v1 @kind float;
  #L162bec.  v0:= (`int`) v0 @kind f2i;
  #L162bee.  call `g`(v2, v0) @signature `Lc/d/a/j/f;.g:(I)V` @kind virtual;
  #L162bf4.  goto L162bf8;
  #L162bf6.  v0:= -1I;
  #L162bf8.  return v0;
}
procedure `int` `a`(`c.d.a.j.f` v4 @kind object, `int` v5 ) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L162adc.  v0:= v5 * 2;
  #L162ae0.  v1:= v4.`c.d.a.j.f.A` @type ^`c.d.a.j.e`[] @kind object;
  #L162ae4.  v2:= v1[v0] @kind object;
  #L162ae8.  v0:= v0 + 1;
  #L162aec.  v0:= v1[v0] @kind object;
  #L162af0.  v1:= v2.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162af4.  if v1 == 0 then goto L162b52;
  #L162af8.  v1:= v1.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L162afc.  v3:= v4.`c.d.a.j.f.D` @type ^`c.d.a.j.f` @kind object;
  #L162b00.  if v1 != v3 then goto L162b52;
  #L162b04.  v1:= v0.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162b08.  if v1 == 0 then goto L162b52;
  #L162b0c.  v1:= v1.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L162b10.  if v1 != v3 then goto L162b52;
  #L162b14.  call temp:= `d`(v3, v5) @signature `Lc/d/a/j/f;.d:(I)I` @kind virtual;
  #L162b1a.  v1:= temp;
  #L162b1c.  if v5 != 0 then goto L162b26;
  #L162b20.  v3:= v4.`c.d.a.j.f.V` @type ^`float`;
  #L162b24.  goto L162b2a;
  #L162b26.  v3:= v4.`c.d.a.j.f.W` @type ^`float`;
  #L162b2a.  call temp:= `d`(v4, v5) @signature `Lc/d/a/j/f;.d:(I)I` @kind virtual;
  #L162b30.  v4:= temp;
  #L162b32.  call temp:= `b`(v2) @signature `Lc/d/a/j/e;.b:()I` @kind virtual;
  #L162b38.  v5:= temp;
  #L162b3a.  v1:= v1 - v5 @kind int;
  #L162b3c.  call temp:= `b`(v0) @signature `Lc/d/a/j/e;.b:()I` @kind virtual;
  #L162b42.  v5:= temp;
  #L162b44.  v1:= v1 - v5 @kind int;
  #L162b46.  v1:= v1 - v4 @kind int;
  #L162b48.  v4:= (`float`) v1 @kind i2f;
  #L162b4a.  v4:= v4 * v3 @kind float;
  #L162b4e.  v4:= (`int`) v4 @kind f2i;
  #L162b50.  return v4;
  #L162b52.  v4:= 0I;
  #L162b54.  return v4;
}
procedure `int` `a`(`c.d.a.j.f` v20 @kind object, `int` v21 , `boolean` v22 , `int` v23 ) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;IZI)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L162754.  v0:= v20 @kind object;
  #L162758.  v1:= v21;
  #L16275c.  v2:= v22;
  #L162760.  v3:= v0.`c.d.a.j.f.b0` @type ^`boolean` @kind boolean;
  #L162764.  v4:= 0I;
  #L162766.  if v3 != 0 then goto L16276c;
  #L16276a.  return v4;
  #L16276c.  v3:= v0.`c.d.a.j.f.w` @type ^`c.d.a.j.e` @kind object;
  #L162770.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162774.  v5:= 1I;
  #L162776.  if v3 == 0 then goto L162782;
  #L16277a.  if v1 != v5 then goto L162782;
  #L16277e.  v3:= 1I;
  #L162780.  goto L162784;
  #L162782.  v3:= 0I;
  #L162784.  if v2 == 0 then goto L1627ac;
  #L162788.  call temp:= `c`(v20) @signature `Lc/d/a/j/f;.c:()I` @kind virtual;
  #L16278e.  v6:= temp;
  #L162790.  call temp:= `i`(v20) @signature `Lc/d/a/j/f;.i:()I` @kind virtual;
  #L162796.  v7:= temp;
  #L162798.  call temp:= `c`(v20) @signature `Lc/d/a/j/f;.c:()I` @kind virtual;
  #L16279e.  v8:= temp;
  #L1627a0.  v7:= v7 - v8 @kind int;
  #L1627a2.  v8:= v1 * 2;
  #L1627a6.  v9:= v8 + 1;
  #L1627aa.  goto L1627ce;
  #L1627ac.  call temp:= `i`(v20) @signature `Lc/d/a/j/f;.i:()I` @kind virtual;
  #L1627b2.  v6:= temp;
  #L1627b4.  call temp:= `c`(v20) @signature `Lc/d/a/j/f;.c:()I` @kind virtual;
  #L1627ba.  v7:= temp;
  #L1627bc.  v6:= v6 - v7 @kind int;
  #L1627be.  call temp:= `c`(v20) @signature `Lc/d/a/j/f;.c:()I` @kind virtual;
  #L1627c4.  v7:= temp;
  #L1627c6.  v9:= v1 * 2;
  #L1627ca.  v8:= v9 + 1;
  #L1627ce.  v10:= v0.`c.d.a.j.f.A` @type ^`c.d.a.j.e`[] @kind object;
  #L1627d2.  v11:= v10[v9] @kind object;
  #L1627d6.  v11:= v11.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L1627da.  if v11 == 0 then goto L1627f2;
  #L1627de.  v10:= v10[v8] @kind object;
  #L1627e2.  v10:= v10.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L1627e6.  if v10 != 0 then goto L1627f2;
  #L1627ea.  v10:= v8;
  #L1627ec.  v8:= v9;
  #L1627ee.  v9:= -1I;
  #L1627f0.  goto L1627f6;
  #L1627f2.  v10:= v9;
  #L1627f4.  v9:= 1I;
  #L1627f6.  if v3 == 0 then goto L162800;
  #L1627fa.  v11:= v23 - v6 @kind int;
  #L1627fe.  goto L162804;
  #L162800.  v11:= v23;
  #L162804.  v13:= v0.`c.d.a.j.f.A` @type ^`c.d.a.j.e`[] @kind object;
  #L162808.  v13:= v13[v8] @kind object;
  #L16280c.  call temp:= `b`(v13) @signature `Lc/d/a/j/e;.b:()I` @kind virtual;
  #L162812.  v13:= temp;
  #L162814.  v13:= v13 * v9 @kind int;
  #L162818.  call temp:= `a`(v20, v21) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;I)I` @kind static;
  #L16281e.  v14:= temp;
  #L162820.  v13:= v13 + v14 @kind int;
  #L162822.  v11:= v11 + v13 @kind int;
  #L162824.  if v1 != 0 then goto L162832;
  #L162828.  call temp:= `s`(v20) @signature `Lc/d/a/j/f;.s:()I` @kind virtual;
  #L16282e.  v14:= temp;
  #L162830.  goto L16283a;
  #L162832.  call temp:= `i`(v20) @signature `Lc/d/a/j/f;.i:()I` @kind virtual;
  #L162838.  v14:= temp;
  #L16283a.  v14:= v14 * v9 @kind int;
  #L16283e.  v15:= v0.`c.d.a.j.f.A` @type ^`c.d.a.j.e`[] @kind object;
  #L162842.  v15:= v15[v8] @kind object;
  #L162846.  call temp:= `d`(v15) @signature `Lc/d/a/j/e;.d:()Lc/d/a/j/m;` @kind virtual;
  #L16284c.  v15:= temp @kind object;
  #L16284e.  v15:= v15.`c.d.a.j.o.a` @type ^`java.util.HashSet` @kind object;
  #L162852.  call temp:= `iterator`(v15) @signature `Ljava/util/HashSet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L162858.  v15:= temp @kind object;
  #L16285a.  call temp:= `hasNext`(v15) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L162860.  v17:= temp;
  #L162862.  if v17 == 0 then goto L162890;
  #L162866.  call temp:= `next`(v15) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L16286c.  v17:= temp @kind object;
  #L16286e.  v12:= v17 @kind object;
  #L162872.  v12:= (`c.d.a.j.m`) v12 @kind object;
  #L162876.  v12:= v12.`c.d.a.j.m.c` @type ^`c.d.a.j.e` @kind object;
  #L16287a.  v12:= v12.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L16287e.  call temp:= `a`(v12, v1, v2, v11) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;IZI)I` @kind static;
  #L162884.  v12:= temp;
  #L162886.  call temp:= `max`(v4, v12) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L16288c.  v4:= temp;
  #L16288e.  goto L16285a;
  #L162890.  v12:= v0.`c.d.a.j.f.A` @type ^`c.d.a.j.e`[] @kind object;
  #L162894.  v12:= v12[v10] @kind object;
  #L162898.  call temp:= `d`(v12) @signature `Lc/d/a/j/e;.d:()Lc/d/a/j/m;` @kind virtual;
  #L16289e.  v12:= temp @kind object;
  #L1628a0.  v12:= v12.`c.d.a.j.o.a` @type ^`java.util.HashSet` @kind object;
  #L1628a4.  call temp:= `iterator`(v12) @signature `Ljava/util/HashSet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1628aa.  v12:= temp @kind object;
  #L1628ac.  v15:= 0I;
  #L1628ae.  call temp:= `hasNext`(v12) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1628b4.  v17:= temp;
  #L1628b6.  if v17 == 0 then goto L1628f2;
  #L1628ba.  call temp:= `next`(v12) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1628c0.  v17:= temp @kind object;
  #L1628c2.  v5:= v17 @kind object;
  #L1628c6.  v5:= (`c.d.a.j.m`) v5 @kind object;
  #L1628ca.  v5:= v5.`c.d.a.j.m.c` @type ^`c.d.a.j.e` @kind object;
  #L1628ce.  v5:= v5.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L1628d2.  v23:= v12 @kind object;
  #L1628d6.  v12:= v14 + v11 @kind int;
  #L1628da.  call temp:= `a`(v5, v1, v2, v12) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;IZI)I` @kind static;
  #L1628e0.  v5:= temp;
  #L1628e2.  call temp:= `max`(v15, v5) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1628e8.  v15:= temp;
  #L1628ea.  v12:= v23 @kind object;
  #L1628ee.  v5:= 1I;
  #L1628f0.  goto L1628ae;
  #L1628f2.  if v3 == 0 then goto L1628fe;
  #L1628f6.  v4:= v4 - v6 @kind int;
  #L1628f8.  v15:= v15 + v7 @kind int;
  #L1628fa.  v5:= 1I;
  #L1628fc.  goto L16291c;
  #L1628fe.  if v1 != 0 then goto L16290c;
  #L162902.  call temp:= `s`(v20) @signature `Lc/d/a/j/f;.s:()I` @kind virtual;
  #L162908.  v5:= temp;
  #L16290a.  goto L162914;
  #L16290c.  call temp:= `i`(v20) @signature `Lc/d/a/j/f;.i:()I` @kind virtual;
  #L162912.  v5:= temp;
  #L162914.  v5:= v5 * v9 @kind int;
  #L162918.  v15:= v15 + v5 @kind int;
  #L16291a.  goto L1628fa;
  #L16291c.  if v1 != v5 then goto L162a00;
  #L162920.  v12:= v0.`c.d.a.j.f.w` @type ^`c.d.a.j.e` @kind object;
  #L162924.  call temp:= `d`(v12) @signature `Lc/d/a/j/e;.d:()Lc/d/a/j/m;` @kind virtual;
  #L16292a.  v12:= temp @kind object;
  #L16292c.  v12:= v12.`c.d.a.j.o.a` @type ^`java.util.HashSet` @kind object;
  #L162930.  call temp:= `iterator`(v12) @signature `Ljava/util/HashSet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L162936.  v12:= temp @kind object;
  #L162938.  v18:= 0I;
  #L16293c.  call temp:= `hasNext`(v12) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L162942.  v16:= temp;
  #L162944.  if v16 == 0 then goto L1629c2;
  #L162948.  call temp:= `next`(v12) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L16294e.  v16:= temp @kind object;
  #L162950.  v23:= v12 @kind object;
  #L162954.  v12:= v16 @kind object;
  #L162958.  v12:= (`c.d.a.j.m`) v12 @kind object;
  #L16295c.  if v9 != v5 then goto L16298a;
  #L162960.  v5:= v12.`c.d.a.j.m.c` @type ^`c.d.a.j.e` @kind object;
  #L162964.  v5:= v5.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L162968.  v12:= v6 + v11 @kind int;
  #L16296c.  call temp:= `a`(v5, v1, v2, v12) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;IZI)I` @kind static;
  #L162972.  v5:= temp;
  #L162974.  v12:= v18;
  #L162978.  call temp:= `max`(v12, v5) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L16297e.  v5:= temp;
  #L162980.  v18:= v5;
  #L162984.  v17:= v10;
  #L162988.  goto L1629b6;
  #L16298a.  v5:= v18;
  #L16298e.  v12:= v12.`c.d.a.j.m.c` @type ^`c.d.a.j.e` @kind object;
  #L162992.  v12:= v12.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L162996.  v16:= v7 * v9 @kind int;
  #L16299a.  v17:= v10;
  #L16299e.  v10:= v16 + v11 @kind int;
  #L1629a2.  call temp:= `a`(v12, v1, v2, v10) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;IZI)I` @kind static;
  #L1629a8.  v10:= temp;
  #L1629aa.  call temp:= `max`(v5, v10) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1629b0.  v5:= temp;
  #L1629b2.  v18:= v5;
  #L1629b6.  v12:= v23 @kind object;
  #L1629ba.  v10:= v17;
  #L1629be.  v5:= 1I;
  #L1629c0.  goto L16293c;
  #L1629c2.  v17:= v10;
  #L1629c6.  v5:= v18;
  #L1629ca.  v10:= v0.`c.d.a.j.f.w` @type ^`c.d.a.j.e` @kind object;
  #L1629ce.  call temp:= `d`(v10) @signature `Lc/d/a/j/e;.d:()Lc/d/a/j/m;` @kind virtual;
  #L1629d4.  v10:= temp @kind object;
  #L1629d6.  v10:= v10.`c.d.a.j.o.a` @type ^`java.util.HashSet` @kind object;
  #L1629da.  call temp:= `size`(v10) @signature `Ljava/util/HashSet;.size:()I` @kind virtual;
  #L1629e0.  v10:= temp;
  #L1629e2.  if v10 <= 0 then goto L1629fc;
  #L1629e6.  if v3 != 0 then goto L1629fc;
  #L1629ea.  v3:= 1I;
  #L1629ec.  if v9 != v3 then goto L1629f6;
  #L1629f0.  v3:= v5 + v6 @kind int;
  #L1629f4.  goto L162a06;
  #L1629f6.  v3:= v5 - v7 @kind int;
  #L1629fa.  goto L162a06;
  #L1629fc.  v3:= v5;
  #L1629fe.  goto L162a06;
  #L162a00.  v17:= v10;
  #L162a04.  v3:= 0I;
  #L162a06.  call temp:= `max`(v15, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L162a0c.  v3:= temp;
  #L162a0e.  call temp:= `max`(v4, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L162a14.  v3:= temp;
  #L162a16.  v13:= v13 + v3 @kind int;
  #L162a18.  v3:= v11 + v14 @kind int;
  #L162a1c.  v4:= -1I;
  #L162a1e.  if v9 != v4 then goto L162a24;
  #L162a22.  goto L162a2e;
  #L162a24.  v19:= v11;
  #L162a28.  v11:= v3;
  #L162a2a.  v3:= v19;
  #L162a2e.  if v2 == 0 then goto L162a40;
  #L162a32.  call `a`(v0, v1, v3) @signature `Lc/d/a/j/k;.a:(Lc/d/a/j/f;II)V` @kind static;
  #L162a38.  call `a`(v0, v3, v11, v1) @signature `Lc/d/a/j/f;.a:(III)V` @kind virtual;
  #L162a3e.  goto L162a50;
  #L162a40.  v2:= v0.`c.d.a.j.f.p` @type ^`c.d.a.j.h` @kind object;
  #L162a44.  call `a`(v2, v0, v1) @signature `Lc/d/a/j/h;.a:(Lc/d/a/j/f;I)V` @kind virtual;
  #L162a4a.  call `d`(v0, v3, v1) @signature `Lc/d/a/j/f;.d:(II)V` @kind virtual;
  #L162a50.  call temp:= `c`(v20, v21) @signature `Lc/d/a/j/f;.c:(I)Lc/d/a/j/f$b;` @kind virtual;
  #L162a56.  v2:= temp @kind object;
  #L162a58.  v3:= `@@c.d.a.j.f$b.d` @type ^`c.d.a.j.f$b` @kind object;
  #L162a5c.  if v2 != v3 then goto L162a78;
  #L162a60.  v2:= v0.`c.d.a.j.f.G` @type ^`float`;
  #L162a64.  v3:= 0I;
  #L162a66.  v2:= fcmpl(v2, v3);
  #L162a6a.  if v2 == 0 then goto L162a78;
  #L162a6e.  v2:= v0.`c.d.a.j.f.p` @type ^`c.d.a.j.h` @kind object;
  #L162a72.  call `a`(v2, v0, v1) @signature `Lc/d/a/j/h;.a:(Lc/d/a/j/f;I)V` @kind virtual;
  #L162a78.  v2:= v0.`c.d.a.j.f.A` @type ^`c.d.a.j.e`[] @kind object;
  #L162a7c.  v3:= v2[v8] @kind object;
  #L162a80.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162a84.  if v3 == 0 then goto L162aca;
  #L162a88.  v2:= v2[v17] @kind object;
  #L162a8c.  v2:= v2.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162a90.  if v2 == 0 then goto L162aca;
  #L162a94.  call temp:= `k`(v20) @signature `Lc/d/a/j/f;.k:()Lc/d/a/j/f;` @kind virtual;
  #L162a9a.  v2:= temp @kind object;
  #L162a9c.  v3:= v0.`c.d.a.j.f.A` @type ^`c.d.a.j.e`[] @kind object;
  #L162aa0.  v4:= v3[v8] @kind object;
  #L162aa4.  v4:= v4.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162aa8.  v4:= v4.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L162aac.  if v4 != v2 then goto L162aca;
  #L162ab0.  v3:= v3[v17] @kind object;
  #L162ab4.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162ab8.  v3:= v3.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L162abc.  if v3 != v2 then goto L162aca;
  #L162ac0.  v2:= v0.`c.d.a.j.f.p` @type ^`c.d.a.j.h` @kind object;
  #L162ac4.  call `a`(v2, v0, v1) @signature `Lc/d/a/j/h;.a:(Lc/d/a/j/f;I)V` @kind virtual;
  #L162aca.  return v13;
}
procedure `int` `a`(`c.d.a.j.h` v10 @kind object, `int` v11 ) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/h;I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1626c4.  v0:= v11 * 2;
  #L1626c8.  call temp:= `a`(v10, v11) @signature `Lc/d/a/j/h;.a:(I)Ljava/util/List;` @kind virtual;
  #L1626ce.  v1:= temp @kind object;
  #L1626d0.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1626d6.  v2:= temp;
  #L1626d8.  v3:= 0I;
  #L1626da.  v4:= 0I;
  #L1626dc.  v5:= 0I;
  #L1626de.  if v4 >= v2 then goto L162738;
  #L1626e2.  call temp:= `get`(v1, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1626e8.  v6:= temp @kind object;
  #L1626ea.  v6:= (`c.d.a.j.f`) v6 @kind object;
  #L1626ee.  v7:= v6.`c.d.a.j.f.A` @type ^`c.d.a.j.e`[] @kind object;
  #L1626f2.  v8:= v0 + 1;
  #L1626f6.  v9:= v7[v8] @kind object;
  #L1626fa.  v9:= v9.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L1626fe.  if v9 == 0 then goto L162720;
  #L162702.  v9:= v7[v0] @kind object;
  #L162706.  v9:= v9.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L16270a.  if v9 == 0 then goto L16271c;
  #L16270e.  v7:= v7[v8] @kind object;
  #L162712.  v7:= v7.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162716.  if v7 == 0 then goto L16271c;
  #L16271a.  goto L162720;
  #L16271c.  v7:= 0I;
  #L16271e.  goto L162722;
  #L162720.  v7:= 1I;
  #L162722.  call temp:= `a`(v6, v11, v7, v3) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;IZI)I` @kind static;
  #L162728.  v6:= temp;
  #L16272a.  call temp:= `max`(v5, v6) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L162730.  v5:= temp;
  #L162732.  v4:= v4 + 1;
  #L162736.  goto L1626de;
  #L162738.  v10:= v10.`c.d.a.j.h.e` @type ^`int`[] @kind object;
  #L16273c.  v10[v11]:= v5;
  #L162740.  return v5;
}
procedure `void` `a`(`c.d.a.j.e` v3 @kind object) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/e;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L162dcc.  call temp:= `d`(v3) @signature `Lc/d/a/j/e;.d:()Lc/d/a/j/m;` @kind virtual;
  #L162dd2.  v0:= temp @kind object;
  #L162dd4.  v1:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162dd8.  if v1 == 0 then goto L162df2;
  #L162ddc.  v2:= v1.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162de0.  if v2 == v3 then goto L162df2;
  #L162de4.  call temp:= `d`(v1) @signature `Lc/d/a/j/e;.d:()Lc/d/a/j/m;` @kind virtual;
  #L162dea.  v3:= temp @kind object;
  #L162dec.  call `a`(v3, v0) @signature `Lc/d/a/j/o;.a:(Lc/d/a/j/o;)V` @kind virtual;
  #L162df2.  return @kind void;
}
procedure `void` `a`(`c.d.a.j.f` v6 @kind object, `int` v7 , `int` v8 ) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;II)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L162ea8.  v0:= v7 * 2;
  #L162eac.  v1:= v6.`c.d.a.j.f.A` @type ^`c.d.a.j.e`[] @kind object;
  #L162eb0.  v2:= v1[v0] @kind object;
  #L162eb4.  v3:= v0 + 1;
  #L162eb8.  v1:= v1[v3] @kind object;
  #L162ebc.  v3:= v2.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162ec0.  v4:= 1I;
  #L162ec2.  if v3 == 0 then goto L162ed2;
  #L162ec6.  v3:= v1.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162eca.  if v3 == 0 then goto L162ed2;
  #L162ece.  v3:= 1I;
  #L162ed0.  goto L162ed4;
  #L162ed2.  v3:= 0I;
  #L162ed4.  if v3 == 0 then goto L162ef2;
  #L162ed8.  call temp:= `a`(v6, v7) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;I)I` @kind static;
  #L162ede.  v8:= temp;
  #L162ee0.  call temp:= `b`(v2) @signature `Lc/d/a/j/e;.b:()I` @kind virtual;
  #L162ee6.  v0:= temp;
  #L162ee8.  v8:= v8 + v0 @kind int;
  #L162eea.  call `a`(v6, v7, v8) @signature `Lc/d/a/j/k;.a:(Lc/d/a/j/f;II)V` @kind static;
  #L162ef0.  return @kind void;
  #L162ef2.  v3:= v6.`c.d.a.j.f.G` @type ^`float`;
  #L162ef6.  v5:= 0I;
  #L162ef8.  v3:= fcmpl(v3, v5);
  #L162efc.  if v3 == 0 then goto L162f68;
  #L162f00.  call temp:= `c`(v6, v7) @signature `Lc/d/a/j/f;.c:(I)Lc/d/a/j/f$b;` @kind virtual;
  #L162f06.  v3:= temp @kind object;
  #L162f08.  v5:= `@@c.d.a.j.f$b.d` @type ^`c.d.a.j.f$b` @kind object;
  #L162f0c.  if v3 != v5 then goto L162f68;
  #L162f10.  call temp:= `a`(v6) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;)I` @kind static;
  #L162f16.  v8:= temp;
  #L162f18.  v3:= v6.`c.d.a.j.f.A` @type ^`c.d.a.j.e`[] @kind object;
  #L162f1c.  v0:= v3[v0] @kind object;
  #L162f20.  call temp:= `d`(v0) @signature `Lc/d/a/j/e;.d:()Lc/d/a/j/m;` @kind virtual;
  #L162f26.  v0:= temp @kind object;
  #L162f28.  v0:= v0.`c.d.a.j.m.g` @type ^`float`;
  #L162f2c.  v0:= (`int`) v0 @kind f2i;
  #L162f2e.  v3:= v0 + v8 @kind int;
  #L162f32.  call temp:= `d`(v1) @signature `Lc/d/a/j/e;.d:()Lc/d/a/j/m;` @kind virtual;
  #L162f38.  v5:= temp @kind object;
  #L162f3a.  call temp:= `d`(v2) @signature `Lc/d/a/j/e;.d:()Lc/d/a/j/m;` @kind virtual;
  #L162f40.  v2:= temp @kind object;
  #L162f42.  v5.`c.d.a.j.m.f` @type ^`c.d.a.j.m` := v2 @kind object;
  #L162f46.  call temp:= `d`(v1) @signature `Lc/d/a/j/e;.d:()Lc/d/a/j/m;` @kind virtual;
  #L162f4c.  v2:= temp @kind object;
  #L162f4e.  v8:= (`float`) v8 @kind i2f;
  #L162f50.  v2.`c.d.a.j.m.g` @type ^`float` := v8;
  #L162f54.  call temp:= `d`(v1) @signature `Lc/d/a/j/e;.d:()Lc/d/a/j/m;` @kind virtual;
  #L162f5a.  v8:= temp @kind object;
  #L162f5c.  v8.`c.d.a.j.o.b` @type ^`int` := v4;
  #L162f60.  call `a`(v6, v0, v3, v7) @signature `Lc/d/a/j/f;.a:(III)V` @kind virtual;
  #L162f66.  return @kind void;
  #L162f68.  call temp:= `e`(v6, v7) @signature `Lc/d/a/j/f;.e:(I)I` @kind virtual;
  #L162f6e.  v0:= temp;
  #L162f70.  v8:= v8 - v0 @kind int;
  #L162f72.  call temp:= `d`(v6, v7) @signature `Lc/d/a/j/f;.d:(I)I` @kind virtual;
  #L162f78.  v0:= temp;
  #L162f7a.  v0:= v8 - v0 @kind int;
  #L162f7e.  call `a`(v6, v0, v8, v7) @signature `Lc/d/a/j/f;.a:(III)V` @kind virtual;
  #L162f84.  call `a`(v6, v7, v0) @signature `Lc/d/a/j/k;.a:(Lc/d/a/j/f;II)V` @kind static;
  #L162f8a.  return @kind void;
}
procedure `void` `a`(`c.d.a.j.g` v10 @kind object) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/g;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L162c0c.  call temp:= `M`(v10) @signature `Lc/d/a/j/g;.M:()I` @kind virtual;
  #L162c12.  v0:= temp;
  #L162c14.  v1:= 32I;
  #L162c18.  v0:= v0 ^& v1 @kind int;
  #L162c1a.  if v0 == v1 then goto L162c26;
  #L162c1e.  call `b`(v10) @signature `Lc/d/a/j/a;.b:(Lc/d/a/j/g;)V` @kind static;
  #L162c24.  return @kind void;
  #L162c26.  v0:= 1I;
  #L162c28.  v10.`c.d.a.j.g.D0` @type ^`boolean` := v0 @kind boolean;
  #L162c2c.  v1:= 0I;
  #L162c2e.  v10.`c.d.a.j.g.x0` @type ^`boolean` := v1 @kind boolean;
  #L162c32.  v10.`c.d.a.j.g.y0` @type ^`boolean` := v1 @kind boolean;
  #L162c36.  v10.`c.d.a.j.g.z0` @type ^`boolean` := v1 @kind boolean;
  #L162c3a.  v2:= v10.`c.d.a.j.q.k0` @type ^`java.util.ArrayList` @kind object;
  #L162c3e.  v3:= v10.`c.d.a.j.g.w0` @type ^`java.util.List` @kind object;
  #L162c42.  call temp:= `j`(v10) @signature `Lc/d/a/j/f;.j:()Lc/d/a/j/f$b;` @kind virtual;
  #L162c48.  v4:= temp @kind object;
  #L162c4a.  v5:= `@@c.d.a.j.f$b.c` @type ^`c.d.a.j.f$b` @kind object;
  #L162c4e.  if v4 != v5 then goto L162c56;
  #L162c52.  v4:= 1I;
  #L162c54.  goto L162c58;
  #L162c56.  v4:= 0I;
  #L162c58.  call temp:= `q`(v10) @signature `Lc/d/a/j/f;.q:()Lc/d/a/j/f$b;` @kind virtual;
  #L162c5e.  v5:= temp @kind object;
  #L162c60.  v6:= `@@c.d.a.j.f$b.c` @type ^`c.d.a.j.f$b` @kind object;
  #L162c64.  if v5 != v6 then goto L162c6c;
  #L162c68.  v5:= 1I;
  #L162c6a.  goto L162c6e;
  #L162c6c.  v5:= 0I;
  #L162c6e.  if v4 != 0 then goto L162c7c;
  #L162c72.  if v5 == 0 then goto L162c78;
  #L162c76.  goto L162c7c;
  #L162c78.  v6:= 0I;
  #L162c7a.  goto L162c7e;
  #L162c7c.  v6:= 1I;
  #L162c7e.  call `clear`(v3) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L162c84.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L162c8a.  v7:= temp @kind object;
  #L162c8c.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L162c92.  v8:= temp;
  #L162c94.  if v8 == 0 then goto L162cb6;
  #L162c98.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L162c9e.  v8:= temp @kind object;
  #L162ca0.  v8:= (`c.d.a.j.f`) v8 @kind object;
  #L162ca4.  v9:= 0I;
  #L162ca6.  v8.`c.d.a.j.f.p` @type ^`c.d.a.j.h` := v9 @kind object;
  #L162caa.  v8.`c.d.a.j.f.d0` @type ^`boolean` := v1 @kind boolean;
  #L162cae.  call `F`(v8) @signature `Lc/d/a/j/f;.F:()V` @kind virtual;
  #L162cb4.  goto L162c8c;
  #L162cb6.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L162cbc.  v2:= temp @kind object;
  #L162cbe.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L162cc4.  v7:= temp;
  #L162cc6.  if v7 == 0 then goto L162cf6;
  #L162cca.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L162cd0.  v7:= temp @kind object;
  #L162cd2.  v7:= (`c.d.a.j.f`) v7 @kind object;
  #L162cd6.  v8:= v7.`c.d.a.j.f.p` @type ^`c.d.a.j.h` @kind object;
  #L162cda.  if v8 != 0 then goto L162cbe;
  #L162cde.  call temp:= `a`(v7, v3, v6) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;Ljava/util/List;Z)Z` @kind static;
  #L162ce4.  v7:= temp;
  #L162ce6.  if v7 != 0 then goto L162cbe;
  #L162cea.  call `b`(v10) @signature `Lc/d/a/j/a;.b:(Lc/d/a/j/g;)V` @kind static;
  #L162cf0.  v10.`c.d.a.j.g.D0` @type ^`boolean` := v1 @kind boolean;
  #L162cf4.  return @kind void;
  #L162cf6.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L162cfc.  v2:= temp @kind object;
  #L162cfe.  v6:= 0I;
  #L162d00.  v7:= 0I;
  #L162d02.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L162d08.  v8:= temp;
  #L162d0a.  if v8 == 0 then goto L162d3c;
  #L162d0e.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L162d14.  v8:= temp @kind object;
  #L162d16.  v8:= (`c.d.a.j.h`) v8 @kind object;
  #L162d1a.  call temp:= `a`(v8, v1) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/h;I)I` @kind static;
  #L162d20.  v9:= temp;
  #L162d22.  call temp:= `max`(v6, v9) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L162d28.  v6:= temp;
  #L162d2a.  call temp:= `a`(v8, v0) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/h;I)I` @kind static;
  #L162d30.  v8:= temp;
  #L162d32.  call temp:= `max`(v7, v8) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L162d38.  v7:= temp;
  #L162d3a.  goto L162d02;
  #L162d3c.  if v4 == 0 then goto L162d5c;
  #L162d40.  v2:= `@@c.d.a.j.f$b.b` @type ^`c.d.a.j.f$b` @kind object;
  #L162d44.  call `a`(v10, v2) @signature `Lc/d/a/j/f;.a:(Lc/d/a/j/f$b;)V` @kind virtual;
  #L162d4a.  call `o`(v10, v6) @signature `Lc/d/a/j/f;.o:(I)V` @kind virtual;
  #L162d50.  v10.`c.d.a.j.g.x0` @type ^`boolean` := v0 @kind boolean;
  #L162d54.  v10.`c.d.a.j.g.y0` @type ^`boolean` := v0 @kind boolean;
  #L162d58.  v10.`c.d.a.j.g.A0` @type ^`int` := v6;
  #L162d5c.  if v5 == 0 then goto L162d7c;
  #L162d60.  v2:= `@@c.d.a.j.f$b.b` @type ^`c.d.a.j.f$b` @kind object;
  #L162d64.  call `b`(v10, v2) @signature `Lc/d/a/j/f;.b:(Lc/d/a/j/f$b;)V` @kind virtual;
  #L162d6a.  call `g`(v10, v7) @signature `Lc/d/a/j/f;.g:(I)V` @kind virtual;
  #L162d70.  v10.`c.d.a.j.g.x0` @type ^`boolean` := v0 @kind boolean;
  #L162d74.  v10.`c.d.a.j.g.z0` @type ^`boolean` := v0 @kind boolean;
  #L162d78.  v10.`c.d.a.j.g.B0` @type ^`int` := v7;
  #L162d7c.  call temp:= `s`(v10) @signature `Lc/d/a/j/f;.s:()I` @kind virtual;
  #L162d82.  v2:= temp;
  #L162d84.  call `a`(v3, v1, v2) @signature `Lc/d/a/j/a;.a:(Ljava/util/List;II)V` @kind static;
  #L162d8a.  call temp:= `i`(v10) @signature `Lc/d/a/j/f;.i:()I` @kind virtual;
  #L162d90.  v10:= temp;
  #L162d92.  call `a`(v3, v0, v10) @signature `Lc/d/a/j/a;.a:(Ljava/util/List;II)V` @kind static;
  #L162d98.  return @kind void;
}
procedure `void` `a`(`c.d.a.j.g` v1 @kind object, `c.d.a.j.f` v2 @kind object, `c.d.a.j.h` v3 @kind object) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/g;Lc/d/a/j/f;Lc/d/a/j/h;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L162dac.  v0:= 0I;
  #L162dae.  v3.`c.d.a.j.h.d` @type ^`boolean` := v0 @kind boolean;
  #L162db2.  v1.`c.d.a.j.g.D0` @type ^`boolean` := v0 @kind boolean;
  #L162db6.  v2.`c.d.a.j.f.b0` @type ^`boolean` := v0 @kind boolean;
  #L162dba.  return @kind void;
}
procedure `void` `a`(`java.util.List` v5 @kind object, `int` v6 , `int` v7 ) @signature `Lc/d/a/j/a;.a:(Ljava/util/List;II)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L162e04.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L162e0a.  v0:= temp;
  #L162e0c.  v1:= 0I;
  #L162e0e.  if v1 >= v0 then goto L162e5c;
  #L162e12.  call temp:= `get`(v5, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L162e18.  v2:= temp @kind object;
  #L162e1a.  v2:= (`c.d.a.j.h`) v2 @kind object;
  #L162e1e.  call temp:= `b`(v2, v6) @signature `Lc/d/a/j/h;.b:(I)Ljava/util/Set;` @kind virtual;
  #L162e24.  v2:= temp @kind object;
  #L162e26.  call temp:= `iterator`(v2) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L162e2c.  v2:= temp @kind object;
  #L162e2e.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L162e34.  v3:= temp;
  #L162e36.  if v3 == 0 then goto L162e56;
  #L162e3a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L162e40.  v3:= temp @kind object;
  #L162e42.  v3:= (`c.d.a.j.f`) v3 @kind object;
  #L162e46.  v4:= v3.`c.d.a.j.f.b0` @type ^`boolean` @kind boolean;
  #L162e4a.  if v4 == 0 then goto L162e2e;
  #L162e4e.  call `a`(v3, v6, v7) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;II)V` @kind static;
  #L162e54.  goto L162e2e;
  #L162e56.  v1:= v1 + 1;
  #L162e5a.  goto L162e0e;
  #L162e5c.  return @kind void;
}
procedure `boolean` `a`(`c.d.a.j.f` v8 @kind object, `c.d.a.j.h` v9 @kind object, `java.util.List` v10 @kind object, `boolean` v11 ) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;Lc/d/a/j/h;Ljava/util/List;Z)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L162254.  v0:= 1I;
  #L162256.  if v8 != 0 then goto L16225c;
  #L16225a.  return v0;
  #L16225c.  v1:= 0I;
  #L16225e.  v8.`c.d.a.j.f.c0` @type ^`boolean` := v1 @kind boolean;
  #L162262.  call temp:= `k`(v8) @signature `Lc/d/a/j/f;.k:()Lc/d/a/j/f;` @kind virtual;
  #L162268.  v2:= temp @kind object;
  #L16226a.  v2:= (`c.d.a.j.g`) v2 @kind object;
  #L16226e.  v3:= v8.`c.d.a.j.f.p` @type ^`c.d.a.j.h` @kind object;
  #L162272.  if v3 != 0 then goto L162634;
  #L162276.  v8.`c.d.a.j.f.b0` @type ^`boolean` := v0 @kind boolean;
  #L16227a.  v3:= v9.`c.d.a.j.h.a` @type ^`java.util.List` @kind object;
  #L16227e.  call temp:= `add`(v3, v8) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L162284.  v8.`c.d.a.j.f.p` @type ^`c.d.a.j.h` := v9 @kind object;
  #L162288.  v3:= v8.`c.d.a.j.f.s` @type ^`c.d.a.j.e` @kind object;
  #L16228c.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162290.  if v3 != 0 then goto L1622dc;
  #L162294.  v3:= v8.`c.d.a.j.f.u` @type ^`c.d.a.j.e` @kind object;
  #L162298.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L16229c.  if v3 != 0 then goto L1622dc;
  #L1622a0.  v3:= v8.`c.d.a.j.f.t` @type ^`c.d.a.j.e` @kind object;
  #L1622a4.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L1622a8.  if v3 != 0 then goto L1622dc;
  #L1622ac.  v3:= v8.`c.d.a.j.f.v` @type ^`c.d.a.j.e` @kind object;
  #L1622b0.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L1622b4.  if v3 != 0 then goto L1622dc;
  #L1622b8.  v3:= v8.`c.d.a.j.f.w` @type ^`c.d.a.j.e` @kind object;
  #L1622bc.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L1622c0.  if v3 != 0 then goto L1622dc;
  #L1622c4.  v3:= v8.`c.d.a.j.f.z` @type ^`c.d.a.j.e` @kind object;
  #L1622c8.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L1622cc.  if v3 != 0 then goto L1622dc;
  #L1622d0.  call `a`(v2, v8, v9) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/g;Lc/d/a/j/f;Lc/d/a/j/h;)V` @kind static;
  #L1622d6.  if v11 == 0 then goto L1622dc;
  #L1622da.  return v1;
  #L1622dc.  v3:= v8.`c.d.a.j.f.t` @type ^`c.d.a.j.e` @kind object;
  #L1622e0.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L1622e4.  if v3 == 0 then goto L162342;
  #L1622e8.  v3:= v8.`c.d.a.j.f.v` @type ^`c.d.a.j.e` @kind object;
  #L1622ec.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L1622f0.  if v3 == 0 then goto L162342;
  #L1622f4.  call temp:= `q`(v2) @signature `Lc/d/a/j/f;.q:()Lc/d/a/j/f$b;` @kind virtual;
  #L1622fa.  v3:= temp @kind object;
  #L1622fc.  v4:= `@@c.d.a.j.f$b.c` @type ^`c.d.a.j.f$b` @kind object;
  #L162300.  if v11 == 0 then goto L16230c;
  #L162304.  call `a`(v2, v8, v9) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/g;Lc/d/a/j/f;Lc/d/a/j/h;)V` @kind static;
  #L16230a.  return v1;
  #L16230c.  v3:= v8.`c.d.a.j.f.t` @type ^`c.d.a.j.e` @kind object;
  #L162310.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162314.  v3:= v3.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L162318.  call temp:= `k`(v8) @signature `Lc/d/a/j/f;.k:()Lc/d/a/j/f;` @kind virtual;
  #L16231e.  v4:= temp @kind object;
  #L162320.  if v3 != v4 then goto L16233c;
  #L162324.  v3:= v8.`c.d.a.j.f.v` @type ^`c.d.a.j.e` @kind object;
  #L162328.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L16232c.  v3:= v3.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L162330.  call temp:= `k`(v8) @signature `Lc/d/a/j/f;.k:()Lc/d/a/j/f;` @kind virtual;
  #L162336.  v4:= temp @kind object;
  #L162338.  if v3 == v4 then goto L162342;
  #L16233c.  call `a`(v2, v8, v9) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/g;Lc/d/a/j/f;Lc/d/a/j/h;)V` @kind static;
  #L162342.  v3:= v8.`c.d.a.j.f.s` @type ^`c.d.a.j.e` @kind object;
  #L162346.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L16234a.  if v3 == 0 then goto L1623a8;
  #L16234e.  v3:= v8.`c.d.a.j.f.u` @type ^`c.d.a.j.e` @kind object;
  #L162352.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162356.  if v3 == 0 then goto L1623a8;
  #L16235a.  call temp:= `j`(v2) @signature `Lc/d/a/j/f;.j:()Lc/d/a/j/f$b;` @kind virtual;
  #L162360.  v3:= temp @kind object;
  #L162362.  v4:= `@@c.d.a.j.f$b.c` @type ^`c.d.a.j.f$b` @kind object;
  #L162366.  if v11 == 0 then goto L162372;
  #L16236a.  call `a`(v2, v8, v9) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/g;Lc/d/a/j/f;Lc/d/a/j/h;)V` @kind static;
  #L162370.  return v1;
  #L162372.  v3:= v8.`c.d.a.j.f.s` @type ^`c.d.a.j.e` @kind object;
  #L162376.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L16237a.  v3:= v3.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L16237e.  call temp:= `k`(v8) @signature `Lc/d/a/j/f;.k:()Lc/d/a/j/f;` @kind virtual;
  #L162384.  v4:= temp @kind object;
  #L162386.  if v3 != v4 then goto L1623a2;
  #L16238a.  v3:= v8.`c.d.a.j.f.u` @type ^`c.d.a.j.e` @kind object;
  #L16238e.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162392.  v3:= v3.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L162396.  call temp:= `k`(v8) @signature `Lc/d/a/j/f;.k:()Lc/d/a/j/f;` @kind virtual;
  #L16239c.  v4:= temp @kind object;
  #L16239e.  if v3 == v4 then goto L1623a8;
  #L1623a2.  call `a`(v2, v8, v9) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/g;Lc/d/a/j/f;Lc/d/a/j/h;)V` @kind static;
  #L1623a8.  call temp:= `j`(v8) @signature `Lc/d/a/j/f;.j:()Lc/d/a/j/f$b;` @kind virtual;
  #L1623ae.  v3:= temp @kind object;
  #L1623b0.  v4:= `@@c.d.a.j.f$b.d` @type ^`c.d.a.j.f$b` @kind object;
  #L1623b4.  if v3 != v4 then goto L1623bc;
  #L1623b8.  v3:= 1I;
  #L1623ba.  goto L1623be;
  #L1623bc.  v3:= 0I;
  #L1623be.  call temp:= `q`(v8) @signature `Lc/d/a/j/f;.q:()Lc/d/a/j/f$b;` @kind virtual;
  #L1623c4.  v4:= temp @kind object;
  #L1623c6.  v5:= `@@c.d.a.j.f$b.d` @type ^`c.d.a.j.f$b` @kind object;
  #L1623ca.  if v4 != v5 then goto L1623d2;
  #L1623ce.  v4:= 1I;
  #L1623d0.  goto L1623d4;
  #L1623d2.  v4:= 0I;
  #L1623d4.  v3:= v3 ^~ v4 @kind int;
  #L1623d6.  if v3 == 0 then goto L1623f0;
  #L1623da.  v3:= v8.`c.d.a.j.f.G` @type ^`float`;
  #L1623de.  v4:= 0I;
  #L1623e0.  v3:= fcmpl(v3, v4);
  #L1623e4.  if v3 == 0 then goto L1623f0;
  #L1623e8.  call temp:= `a`(v8) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;)I` @kind static;
  #L1623ee.  goto L16241c;
  #L1623f0.  call temp:= `j`(v8) @signature `Lc/d/a/j/f;.j:()Lc/d/a/j/f$b;` @kind virtual;
  #L1623f6.  v3:= temp @kind object;
  #L1623f8.  v4:= `@@c.d.a.j.f$b.d` @type ^`c.d.a.j.f$b` @kind object;
  #L1623fc.  if v3 == v4 then goto L162410;
  #L162400.  call temp:= `q`(v8) @signature `Lc/d/a/j/f;.q:()Lc/d/a/j/f$b;` @kind virtual;
  #L162406.  v3:= temp @kind object;
  #L162408.  v4:= `@@c.d.a.j.f$b.d` @type ^`c.d.a.j.f$b` @kind object;
  #L16240c.  if v3 != v4 then goto L16241c;
  #L162410.  call `a`(v2, v8, v9) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/g;Lc/d/a/j/f;Lc/d/a/j/h;)V` @kind static;
  #L162416.  if v11 == 0 then goto L16241c;
  #L16241a.  return v1;
  #L16241c.  v3:= v8.`c.d.a.j.f.s` @type ^`c.d.a.j.e` @kind object;
  #L162420.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162424.  if v3 != 0 then goto L162434;
  #L162428.  v3:= v8.`c.d.a.j.f.u` @type ^`c.d.a.j.e` @kind object;
  #L16242c.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162430.  if v3 == 0 then goto L1624a8;
  #L162434.  v3:= v8.`c.d.a.j.f.s` @type ^`c.d.a.j.e` @kind object;
  #L162438.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L16243c.  if v3 == 0 then goto L162458;
  #L162440.  v3:= v3.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L162444.  v4:= v8.`c.d.a.j.f.D` @type ^`c.d.a.j.f` @kind object;
  #L162448.  if v3 != v4 then goto L162458;
  #L16244c.  v3:= v8.`c.d.a.j.f.u` @type ^`c.d.a.j.e` @kind object;
  #L162450.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162454.  if v3 == 0 then goto L1624a8;
  #L162458.  v3:= v8.`c.d.a.j.f.u` @type ^`c.d.a.j.e` @kind object;
  #L16245c.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162460.  if v3 == 0 then goto L16247c;
  #L162464.  v3:= v3.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L162468.  v4:= v8.`c.d.a.j.f.D` @type ^`c.d.a.j.f` @kind object;
  #L16246c.  if v3 != v4 then goto L16247c;
  #L162470.  v3:= v8.`c.d.a.j.f.s` @type ^`c.d.a.j.e` @kind object;
  #L162474.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162478.  if v3 == 0 then goto L1624a8;
  #L16247c.  v3:= v8.`c.d.a.j.f.s` @type ^`c.d.a.j.e` @kind object;
  #L162480.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162484.  if v3 == 0 then goto L1624ce;
  #L162488.  v3:= v3.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L16248c.  v4:= v8.`c.d.a.j.f.D` @type ^`c.d.a.j.f` @kind object;
  #L162490.  if v3 != v4 then goto L1624ce;
  #L162494.  v3:= v8.`c.d.a.j.f.u` @type ^`c.d.a.j.e` @kind object;
  #L162498.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L16249c.  if v3 == 0 then goto L1624ce;
  #L1624a0.  v3:= v3.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L1624a4.  if v3 != v4 then goto L1624ce;
  #L1624a8.  v3:= v8.`c.d.a.j.f.z` @type ^`c.d.a.j.e` @kind object;
  #L1624ac.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L1624b0.  if v3 != 0 then goto L1624ce;
  #L1624b4.  v3:= instanceof @variable v8 @type ^`c.d.a.j.i` @kind boolean;
  #L1624b8.  if v3 != 0 then goto L1624ce;
  #L1624bc.  v3:= instanceof @variable v8 @type ^`c.d.a.j.j` @kind boolean;
  #L1624c0.  if v3 != 0 then goto L1624ce;
  #L1624c4.  v3:= v9.`c.d.a.j.h.f` @type ^`java.util.List` @kind object;
  #L1624c8.  call temp:= `add`(v3, v8) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1624ce.  v3:= v8.`c.d.a.j.f.t` @type ^`c.d.a.j.e` @kind object;
  #L1624d2.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L1624d6.  if v3 != 0 then goto L1624e6;
  #L1624da.  v3:= v8.`c.d.a.j.f.v` @type ^`c.d.a.j.e` @kind object;
  #L1624de.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L1624e2.  if v3 == 0 then goto L16255a;
  #L1624e6.  v3:= v8.`c.d.a.j.f.t` @type ^`c.d.a.j.e` @kind object;
  #L1624ea.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L1624ee.  if v3 == 0 then goto L16250a;
  #L1624f2.  v3:= v3.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L1624f6.  v4:= v8.`c.d.a.j.f.D` @type ^`c.d.a.j.f` @kind object;
  #L1624fa.  if v3 != v4 then goto L16250a;
  #L1624fe.  v3:= v8.`c.d.a.j.f.v` @type ^`c.d.a.j.e` @kind object;
  #L162502.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162506.  if v3 == 0 then goto L16255a;
  #L16250a.  v3:= v8.`c.d.a.j.f.v` @type ^`c.d.a.j.e` @kind object;
  #L16250e.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162512.  if v3 == 0 then goto L16252e;
  #L162516.  v3:= v3.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L16251a.  v4:= v8.`c.d.a.j.f.D` @type ^`c.d.a.j.f` @kind object;
  #L16251e.  if v3 != v4 then goto L16252e;
  #L162522.  v3:= v8.`c.d.a.j.f.t` @type ^`c.d.a.j.e` @kind object;
  #L162526.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L16252a.  if v3 == 0 then goto L16255a;
  #L16252e.  v3:= v8.`c.d.a.j.f.t` @type ^`c.d.a.j.e` @kind object;
  #L162532.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162536.  if v3 == 0 then goto L16258c;
  #L16253a.  v3:= v3.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L16253e.  v4:= v8.`c.d.a.j.f.D` @type ^`c.d.a.j.f` @kind object;
  #L162542.  if v3 != v4 then goto L16258c;
  #L162546.  v3:= v8.`c.d.a.j.f.v` @type ^`c.d.a.j.e` @kind object;
  #L16254a.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L16254e.  if v3 == 0 then goto L16258c;
  #L162552.  v3:= v3.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L162556.  if v3 != v4 then goto L16258c;
  #L16255a.  v3:= v8.`c.d.a.j.f.z` @type ^`c.d.a.j.e` @kind object;
  #L16255e.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L162562.  if v3 != 0 then goto L16258c;
  #L162566.  v3:= v8.`c.d.a.j.f.w` @type ^`c.d.a.j.e` @kind object;
  #L16256a.  v3:= v3.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L16256e.  if v3 != 0 then goto L16258c;
  #L162572.  v3:= instanceof @variable v8 @type ^`c.d.a.j.i` @kind boolean;
  #L162576.  if v3 != 0 then goto L16258c;
  #L16257a.  v3:= instanceof @variable v8 @type ^`c.d.a.j.j` @kind boolean;
  #L16257e.  if v3 != 0 then goto L16258c;
  #L162582.  v3:= v9.`c.d.a.j.h.g` @type ^`java.util.List` @kind object;
  #L162586.  call temp:= `add`(v3, v8) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L16258c.  v3:= instanceof @variable v8 @type ^`c.d.a.j.j` @kind boolean;
  #L162590.  if v3 == 0 then goto L1625cc;
  #L162594.  call `a`(v2, v8, v9) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/g;Lc/d/a/j/f;Lc/d/a/j/h;)V` @kind static;
  #L16259a.  if v11 == 0 then goto L1625a0;
  #L16259e.  return v1;
  #L1625a0.  v3:= v8 @kind object;
  #L1625a2.  v3:= (`c.d.a.j.j`) v3 @kind object;
  #L1625a6.  v4:= 0I;
  #L1625a8.  v5:= v3.`c.d.a.j.j.l0` @type ^`int`;
  #L1625ac.  if v4 >= v5 then goto L1625cc;
  #L1625b0.  v5:= v3.`c.d.a.j.j.k0` @type ^`c.d.a.j.f`[] @kind object;
  #L1625b4.  v5:= v5[v4] @kind object;
  #L1625b8.  call temp:= `a`(v5, v9, v10, v11) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;Lc/d/a/j/h;Ljava/util/List;Z)Z` @kind static;
  #L1625be.  v5:= temp;
  #L1625c0.  if v5 != 0 then goto L1625c6;
  #L1625c4.  return v1;
  #L1625c6.  v4:= v4 + 1;
  #L1625ca.  goto L1625a8;
  #L1625cc.  v3:= v8.`c.d.a.j.f.A` @type ^`c.d.a.j.e`[] @kind object;
  #L1625d0.  v3:= length @variable v3;
  #L1625d2.  v4:= 0I;
  #L1625d4.  if v4 >= v3 then goto L162632;
  #L1625d8.  v5:= v8.`c.d.a.j.f.A` @type ^`c.d.a.j.e`[] @kind object;
  #L1625dc.  v5:= v5[v4] @kind object;
  #L1625e0.  v6:= v5.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L1625e4.  if v6 == 0 then goto L16262c;
  #L1625e8.  v6:= v6.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L1625ec.  call temp:= `k`(v8) @signature `Lc/d/a/j/f;.k:()Lc/d/a/j/f;` @kind virtual;
  #L1625f2.  v7:= temp @kind object;
  #L1625f4.  if v6 == v7 then goto L16262c;
  #L1625f8.  v6:= v5.`c.d.a.j.e.c` @type ^`c.d.a.j.e$d` @kind object;
  #L1625fc.  v7:= `@@c.d.a.j.e$d.h` @type ^`c.d.a.j.e$d` @kind object;
  #L162600.  if v6 != v7 then goto L162610;
  #L162604.  call `a`(v2, v8, v9) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/g;Lc/d/a/j/f;Lc/d/a/j/h;)V` @kind static;
  #L16260a.  if v11 == 0 then goto L162616;
  #L16260e.  return v1;
  #L162610.  call `a`(v5) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/e;)V` @kind static;
  #L162616.  v5:= v5.`c.d.a.j.e.d` @type ^`c.d.a.j.e` @kind object;
  #L16261a.  v5:= v5.`c.d.a.j.e.b` @type ^`c.d.a.j.f` @kind object;
  #L16261e.  call temp:= `a`(v5, v9, v10, v11) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;Lc/d/a/j/h;Ljava/util/List;Z)Z` @kind static;
  #L162624.  v5:= temp;
  #L162626.  if v5 != 0 then goto L16262c;
  #L16262a.  return v1;
  #L16262c.  v4:= v4 + 1;
  #L162630.  goto L1625d4;
  #L162632.  return v0;
  #L162634.  if v3 == v9 then goto L1626b2;
  #L162638.  v11:= v9.`c.d.a.j.h.a` @type ^`java.util.List` @kind object;
  #L16263c.  v2:= v3.`c.d.a.j.h.a` @type ^`java.util.List` @kind object;
  #L162640.  call temp:= `addAll`(v11, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L162646.  v11:= v9.`c.d.a.j.h.f` @type ^`java.util.List` @kind object;
  #L16264a.  v2:= v8.`c.d.a.j.f.p` @type ^`c.d.a.j.h` @kind object;
  #L16264e.  v2:= v2.`c.d.a.j.h.f` @type ^`java.util.List` @kind object;
  #L162652.  call temp:= `addAll`(v11, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L162658.  v11:= v9.`c.d.a.j.h.g` @type ^`java.util.List` @kind object;
  #L16265c.  v2:= v8.`c.d.a.j.f.p` @type ^`c.d.a.j.h` @kind object;
  #L162660.  v2:= v2.`c.d.a.j.h.g` @type ^`java.util.List` @kind object;
  #L162664.  call temp:= `addAll`(v11, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L16266a.  v11:= v8.`c.d.a.j.f.p` @type ^`c.d.a.j.h` @kind object;
  #L16266e.  v11:= v11.`c.d.a.j.h.d` @type ^`boolean` @kind boolean;
  #L162672.  if v11 != 0 then goto L16267a;
  #L162676.  v9.`c.d.a.j.h.d` @type ^`boolean` := v1 @kind boolean;
  #L16267a.  v11:= v8.`c.d.a.j.f.p` @type ^`c.d.a.j.h` @kind object;
  #L16267e.  call temp:= `remove`(v10, v11) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L162684.  v8:= v8.`c.d.a.j.f.p` @type ^`c.d.a.j.h` @kind object;
  #L162688.  v8:= v8.`c.d.a.j.h.a` @type ^`java.util.List` @kind object;
  #L16268c.  call temp:= `iterator`(v8) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L162692.  v8:= temp @kind object;
  #L162694.  call temp:= `hasNext`(v8) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L16269a.  v10:= temp;
  #L16269c.  if v10 == 0 then goto L1626b2;
  #L1626a0.  call temp:= `next`(v8) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1626a6.  v10:= temp @kind object;
  #L1626a8.  v10:= (`c.d.a.j.f`) v10 @kind object;
  #L1626ac.  v10.`c.d.a.j.f.p` @type ^`c.d.a.j.h` := v9 @kind object;
  #L1626b0.  goto L162694;
  #L1626b2.  return v0;
}
procedure `boolean` `a`(`c.d.a.j.f` v3 @kind object, `java.util.List` v4 @kind object, `boolean` v5 ) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;Ljava/util/List;Z)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L16221c.  v0:= new `c.d.a.j.h`;
  #L162220.  v1:= new `java.util.ArrayList`;
  #L162224.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L16222a.  v2:= 1I;
  #L16222c.  call `<init>`(v0, v1, v2) @signature `Lc/d/a/j/h;.<init>:(Ljava/util/List;Z)V` @kind direct;
  #L162232.  call temp:= `add`(v4, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L162238.  call temp:= `a`(v3, v0, v4, v5) @signature `Lc/d/a/j/a;.a:(Lc/d/a/j/f;Lc/d/a/j/h;Ljava/util/List;Z)Z` @kind static;
  #L16223e.  v3:= temp;
  #L162240.  return v3;
}
procedure `void` `b`(`c.d.a.j.g` v2 @kind object) @signature `Lc/d/a/j/a;.b:(Lc/d/a/j/g;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L162e70.  v0:= v2.`c.d.a.j.g.w0` @type ^`java.util.List` @kind object;
  #L162e74.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L162e7a.  v0:= v2.`c.d.a.j.g.w0` @type ^`java.util.List` @kind object;
  #L162e7e.  v1:= new `c.d.a.j.h`;
  #L162e82.  v2:= v2.`c.d.a.j.q.k0` @type ^`java.util.ArrayList` @kind object;
  #L162e86.  call `<init>`(v1, v2) @signature `Lc/d/a/j/h;.<init>:(Ljava/util/List;)V` @kind direct;
  #L162e8c.  v2:= 0I;
  #L162e8e.  call `add`(v0, v2, v1) @signature `Ljava/util/List;.add:(ILjava/lang/Object;)V` @kind interface;
  #L162e94.  return @kind void;
}
