record `c.d.a.b` @kind class @AccessFlag PUBLIC extends `c.d.a.e$a` @kind interface {
  `c.d.a.i` `c.d.a.b.a` @AccessFlag ;
  `float` `c.d.a.b.b` @AccessFlag ;
  `boolean` `c.d.a.b.c` @AccessFlag ;
  `c.d.a.a` `c.d.a.b.d` @AccessFlag PUBLIC_FINAL;
  `boolean` `c.d.a.b.e` @AccessFlag ;
}
procedure `void` `<init>`(`c.d.a.b` v1 @kind this, `c.d.a.c` v2 @kind object) @signature `Lc/d/a/b;.<init>:(Lc/d/a/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L160bdc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L160be2.  v0:= 0I;
  #L160be4.  v1.`c.d.a.b.a` @type ^`c.d.a.i` := v0 @kind object;
  #L160be8.  v0:= 0I;
  #L160bea.  v1.`c.d.a.b.b` @type ^`float` := v0;
  #L160bee.  v0:= 0I;
  #L160bf0.  v1.`c.d.a.b.e` @type ^`boolean` := v0 @kind boolean;
  #L160bf4.  v0:= new `c.d.a.a`;
  #L160bf8.  call `<init>`(v0, v1, v2) @signature `Lc/d/a/a;.<init>:(Lc/d/a/b;Lc/d/a/c;)V` @kind direct;
  #L160bfe.  v1.`c.d.a.b.d` @type ^`c.d.a.a` := v0 @kind object;
  #L160c02.  return @kind void;
}
procedure `c.d.a.b` `a`(`c.d.a.b` v4 @kind this, `float` v5 , `float` v6 , `float` v7 , `c.d.a.i` v8 @kind object, `c.d.a.i` v9 @kind object, `c.d.a.i` v10 @kind object, `c.d.a.i` v11 @kind object) @signature `Lc/d/a/b;.a:(FFFLc/d/a/i;Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;)Lc/d/a/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L160620.  v0:= 0I;
  #L160622.  v4.`c.d.a.b.b` @type ^`float` := v0;
  #L160626.  v1:= -1.0F;
  #L16062a.  v2:= 1.0F;
  #L16062e.  v3:= fcmpl(v6, v0);
  #L160632.  if v3 == 0 then goto L1606ae;
  #L160636.  v3:= fcmpl(v5, v7);
  #L16063a.  if v3 != 0 then goto L160640;
  #L16063e.  goto L1606ae;
  #L160640.  v3:= fcmpl(v5, v0);
  #L160644.  if v3 != 0 then goto L16065e;
  #L160648.  v5:= v4.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L16064c.  call `a`(v5, v8, v2) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160652.  v5:= v4.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160656.  call `a`(v5, v9, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L16065c.  goto L1606d6;
  #L16065e.  v0:= fcmpl(v7, v0);
  #L160662.  if v0 != 0 then goto L16067c;
  #L160666.  v5:= v4.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L16066a.  call `a`(v5, v10, v2) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160670.  v5:= v4.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160674.  call `a`(v5, v11, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L16067a.  goto L1606d6;
  #L16067c.  v5:= v5 / v6 @kind float;
  #L16067e.  v7:= v7 / v6 @kind float;
  #L160680.  v5:= v5 / v7 @kind float;
  #L160682.  v6:= v4.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160686.  call `a`(v6, v8, v2) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L16068c.  v6:= v4.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160690.  call `a`(v6, v9, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160696.  v6:= v4.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L16069a.  call `a`(v6, v11, v5) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1606a0.  v6:= v4.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1606a4.  v5:= -v5 @kind float;
  #L1606a6.  call `a`(v6, v10, v5) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1606ac.  goto L1606d6;
  #L1606ae.  v5:= v4.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1606b2.  call `a`(v5, v8, v2) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1606b8.  v5:= v4.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1606bc.  call `a`(v5, v9, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1606c2.  v5:= v4.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1606c6.  call `a`(v5, v11, v2) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1606cc.  v5:= v4.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1606d0.  call `a`(v5, v10, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1606d6.  return v4 @kind object;
}
procedure `c.d.a.b` `a`(`c.d.a.b` v3 @kind this, `c.d.a.e` v4 @kind object, `int` v5 ) @signature `Lc/d/a/b;.a:(Lc/d/a/e;I)Lc/d/a/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1603ec.  v0:= v3.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1603f0.  v1:= "ep" @kind object;
  #L1603f4.  call temp:= `a`(v4, v5, v1) @signature `Lc/d/a/e;.a:(ILjava/lang/String;)Lc/d/a/i;` @kind virtual;
  #L1603fa.  v1:= temp @kind object;
  #L1603fc.  v2:= 1.0F;
  #L160400.  call `a`(v0, v1, v2) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160406.  v0:= v3.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L16040a.  v1:= "em" @kind object;
  #L16040e.  call temp:= `a`(v4, v5, v1) @signature `Lc/d/a/e;.a:(ILjava/lang/String;)Lc/d/a/i;` @kind virtual;
  #L160414.  v4:= temp @kind object;
  #L160416.  v5:= -1.0F;
  #L16041a.  call `a`(v0, v4, v5) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160420.  return v3 @kind object;
}
procedure `c.d.a.b` `a`(`c.d.a.b` v1 @kind this, `c.d.a.i` v2 @kind object, `int` v3 ) @signature `Lc/d/a/b;.a:(Lc/d/a/i;I)Lc/d/a/b;` @AccessFlag  {
    temp;
    v0;

  #L160434.  v0:= v1.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160438.  v3:= (`float`) v3 @kind i2f;
  #L16043a.  call `a`(v0, v2, v3) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160440.  return v1 @kind object;
}
procedure `c.d.a.b` `a`(`c.d.a.b` v2 @kind this, `c.d.a.i` v3 @kind object, `c.d.a.i` v4 @kind object, `int` v5 ) @signature `Lc/d/a/b;.a:(Lc/d/a/i;Lc/d/a/i;I)Lc/d/a/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1606e8.  v0:= 0I;
  #L1606ea.  if v5 == 0 then goto L1606fe;
  #L1606ee.  if v5 >= 0 then goto L1606f8;
  #L1606f2.  v5:= v5 * -1;
  #L1606f6.  v0:= 1I;
  #L1606f8.  v5:= (`float`) v5 @kind i2f;
  #L1606fa.  v2.`c.d.a.b.b` @type ^`float` := v5;
  #L1606fe.  v5:= -1.0F;
  #L160702.  v1:= 1.0F;
  #L160706.  if v0 != 0 then goto L160720;
  #L16070a.  v0:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L16070e.  call `a`(v0, v3, v5) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160714.  v3:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160718.  call `a`(v3, v4, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L16071e.  goto L160734;
  #L160720.  v0:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160724.  call `a`(v0, v3, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L16072a.  v3:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L16072e.  call `a`(v3, v4, v5) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160734.  return v2 @kind object;
}
procedure `c.d.a.b` `a`(`c.d.a.b` v5 @kind this, `c.d.a.i` v6 @kind object, `c.d.a.i` v7 @kind object, `int` v8 , `float` v9 , `c.d.a.i` v10 @kind object, `c.d.a.i` v11 @kind object, `int` v12 ) @signature `Lc/d/a/b;.a:(Lc/d/a/i;Lc/d/a/i;IFLc/d/a/i;Lc/d/a/i;I)Lc/d/a/b;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L160454.  v0:= 1.0F;
  #L160458.  if v7 != v10 then goto L160480;
  #L16045c.  v8:= v5.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160460.  call `a`(v8, v6, v0) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160466.  v6:= v5.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L16046a.  call `a`(v6, v11, v0) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160470.  v6:= v5.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160474.  v8:= -2.0F;
  #L160478.  call `a`(v6, v7, v8) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L16047e.  return v5 @kind object;
  #L160480.  v1:= 0.5F;
  #L160484.  v2:= -1.0F;
  #L160488.  v1:= fcmpl(v9, v1);
  #L16048c.  if v1 != 0 then goto L1604c8;
  #L160490.  v9:= v5.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160494.  call `a`(v9, v6, v0) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L16049a.  v6:= v5.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L16049e.  call `a`(v6, v7, v2) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1604a4.  v6:= v5.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1604a8.  call `a`(v6, v10, v2) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1604ae.  v6:= v5.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1604b2.  call `a`(v6, v11, v0) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1604b8.  if v8 > 0 then goto L1604c0;
  #L1604bc.  if v12 <= 0 then goto L160564;
  #L1604c0.  v6:= -v8 @kind int;
  #L1604c2.  v6:= v6 + v12 @kind int;
  #L1604c4.  v6:= (`float`) v6 @kind i2f;
  #L1604c6.  goto L1604e8;
  #L1604c8.  v1:= 0I;
  #L1604ca.  v1:= fcmpg(v9, v1);
  #L1604ce.  if v1 > 0 then goto L1604ee;
  #L1604d2.  v9:= v5.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1604d6.  call `a`(v9, v6, v2) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1604dc.  v6:= v5.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1604e0.  call `a`(v6, v7, v0) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1604e6.  v6:= (`float`) v8 @kind i2f;
  #L1604e8.  v5.`c.d.a.b.b` @type ^`float` := v6;
  #L1604ec.  goto L160564;
  #L1604ee.  v1:= fcmpl(v9, v0);
  #L1604f2.  if v1 < 0 then goto L16050e;
  #L1604f6.  v6:= v5.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1604fa.  call `a`(v6, v10, v2) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160500.  v6:= v5.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160504.  call `a`(v6, v11, v0) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L16050a.  v6:= (`float`) v12 @kind i2f;
  #L16050c.  goto L1604e8;
  #L16050e.  v1:= v5.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160512.  v3:= v0 - v9 @kind float;
  #L160516.  v4:= v3 * v0 @kind float;
  #L16051a.  call `a`(v1, v6, v4) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160520.  v6:= v5.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160524.  v1:= v3 * v2 @kind float;
  #L160528.  call `a`(v6, v7, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L16052e.  v6:= v5.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160532.  v2:= v2 * v9 @kind float;
  #L160536.  call `a`(v6, v10, v2) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L16053c.  v6:= v5.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160540.  v0:= v0 * v9 @kind float;
  #L160544.  call `a`(v6, v11, v0) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L16054a.  if v8 > 0 then goto L160552;
  #L16054e.  if v12 <= 0 then goto L160564;
  #L160552.  v6:= -v8 @kind int;
  #L160554.  v6:= (`float`) v6 @kind i2f;
  #L160556.  v6:= v6 * v3 @kind float;
  #L16055a.  v7:= (`float`) v12 @kind i2f;
  #L16055c.  v7:= v7 * v9 @kind float;
  #L160560.  v6:= v6 + v7 @kind float;
  #L160562.  goto L1604e8;
  #L160564.  return v5 @kind object;
}
procedure `c.d.a.b` `a`(`c.d.a.b` v2 @kind this, `c.d.a.i` v3 @kind object, `c.d.a.i` v4 @kind object, `c.d.a.i` v5 @kind object, `float` v6 ) @signature `Lc/d/a/b;.a:(Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;F)Lc/d/a/b;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1605a0.  v0:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1605a4.  v1:= -1.0F;
  #L1605a8.  call `a`(v0, v3, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1605ae.  v3:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1605b2.  v0:= 1.0F;
  #L1605b6.  v0:= v0 - v6 @kind float;
  #L1605b8.  call `a`(v3, v4, v0) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1605be.  v3:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1605c2.  call `a`(v3, v5, v6) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1605c8.  return v2 @kind object;
}
procedure `c.d.a.b` `a`(`c.d.a.b` v2 @kind this, `c.d.a.i` v3 @kind object, `c.d.a.i` v4 @kind object, `c.d.a.i` v5 @kind object, `int` v6 ) @signature `Lc/d/a/b;.a:(Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;I)Lc/d/a/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L160788.  v0:= 0I;
  #L16078a.  if v6 == 0 then goto L16079e;
  #L16078e.  if v6 >= 0 then goto L160798;
  #L160792.  v6:= v6 * -1;
  #L160796.  v0:= 1I;
  #L160798.  v6:= (`float`) v6 @kind i2f;
  #L16079a.  v2.`c.d.a.b.b` @type ^`float` := v6;
  #L16079e.  v6:= -1.0F;
  #L1607a2.  v1:= 1.0F;
  #L1607a6.  if v0 != 0 then goto L1607ca;
  #L1607aa.  v0:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1607ae.  call `a`(v0, v3, v6) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1607b4.  v3:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1607b8.  call `a`(v3, v4, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1607be.  v3:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1607c2.  call `a`(v3, v5, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1607c8.  goto L1607e8;
  #L1607ca.  v0:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1607ce.  call `a`(v0, v3, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1607d4.  v3:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1607d8.  call `a`(v3, v4, v6) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1607de.  v3:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1607e2.  call `a`(v3, v5, v6) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1607e8.  return v2 @kind object;
}
procedure `c.d.a.b` `a`(`c.d.a.b` v2 @kind this, `c.d.a.i` v3 @kind object, `c.d.a.i` v4 @kind object, `c.d.a.i` v5 @kind object, `c.d.a.i` v6 @kind object, `float` v7 ) @signature `Lc/d/a/b;.a:(Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;F)Lc/d/a/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1605dc.  v0:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1605e0.  v1:= -1.0F;
  #L1605e4.  call `a`(v0, v3, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1605ea.  v3:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1605ee.  v0:= 1.0F;
  #L1605f2.  call `a`(v3, v4, v0) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1605f8.  v3:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1605fc.  call `a`(v3, v5, v7) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160602.  v3:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160606.  v4:= -v7 @kind float;
  #L160608.  call `a`(v3, v6, v4) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L16060e.  return v2 @kind object;
}
procedure `c.d.a.i` `a`(`c.d.a.b` v1 @kind this, `c.d.a.e` v2 @kind object, `boolean`[] v3 @kind object) @signature `Lc/d/a/b;.a:(Lc/d/a/e;[Z)Lc/d/a/i;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1608d0.  v2:= v1.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1608d4.  v0:= 0I;
  #L1608d6.  call temp:= `a`(v2, v3, v0) @signature `Lc/d/a/a;.a:([ZLc/d/a/i;)Lc/d/a/i;` @kind virtual;
  #L1608dc.  v2:= temp @kind object;
  #L1608de.  return v2 @kind object;
}
procedure `void` `a`(`c.d.a.b` v2 @kind this) @signature `Lc/d/a/b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L160c9c.  v0:= v2.`c.d.a.b.b` @type ^`float`;
  #L160ca0.  v1:= 0I;
  #L160ca2.  v1:= fcmpg(v0, v1);
  #L160ca6.  if v1 >= 0 then goto L160cc0;
  #L160caa.  v1:= -1.0F;
  #L160cae.  v0:= v0 * v1 @kind float;
  #L160cb2.  v2.`c.d.a.b.b` @type ^`float` := v0;
  #L160cb6.  v0:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160cba.  call `b`(v0) @signature `Lc/d/a/a;.b:()V` @kind virtual;
  #L160cc0.  return @kind void;
}
procedure `void` `a`(`c.d.a.b` v5 @kind this, `c.d.a.e$a` v6 @kind object) @signature `Lc/d/a/b;.a:(Lc/d/a/e$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L160cd4.  v0:= instanceof @variable v6 @type ^`c.d.a.b` @kind boolean;
  #L160cd8.  if v0 == 0 then goto L160d24;
  #L160cdc.  v6:= (`c.d.a.b`) v6 @kind object;
  #L160ce0.  v0:= 0I;
  #L160ce2.  v5.`c.d.a.b.a` @type ^`c.d.a.i` := v0 @kind object;
  #L160ce6.  v0:= v5.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160cea.  call `a`(v0) @signature `Lc/d/a/a;.a:()V` @kind virtual;
  #L160cf0.  v0:= 0I;
  #L160cf2.  v1:= v6.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160cf6.  v2:= v1.`c.d.a.a.a` @type ^`int`;
  #L160cfa.  if v0 >= v2 then goto L160d24;
  #L160cfe.  call temp:= `a`(v1, v0) @signature `Lc/d/a/a;.a:(I)Lc/d/a/i;` @kind virtual;
  #L160d04.  v1:= temp @kind object;
  #L160d06.  v2:= v6.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160d0a.  call temp:= `b`(v2, v0) @signature `Lc/d/a/a;.b:(I)F` @kind virtual;
  #L160d10.  v2:= temp;
  #L160d12.  v3:= v5.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160d16.  v4:= 1I;
  #L160d18.  call `a`(v3, v1, v2, v4) @signature `Lc/d/a/a;.a:(Lc/d/a/i;FZ)V` @kind virtual;
  #L160d1e.  v0:= v0 + 1;
  #L160d22.  goto L160cf2;
  #L160d24.  return @kind void;
}
procedure `void` `a`(`c.d.a.b` v3 @kind this, `c.d.a.i` v4 @kind object) @signature `Lc/d/a/b;.a:(Lc/d/a/i;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L160c14.  v0:= v4.`c.d.a.i.d` @type ^`int`;
  #L160c18.  v1:= 1.0F;
  #L160c1c.  v2:= 1I;
  #L160c1e.  if v0 != v2 then goto L160c24;
  #L160c22.  goto L160c58;
  #L160c24.  v2:= 2I;
  #L160c26.  if v0 != v2 then goto L160c30;
  #L160c2a.  v1:= 1000.0F;
  #L160c2e.  goto L160c58;
  #L160c30.  v2:= 3I;
  #L160c32.  if v0 != v2 then goto L160c3e;
  #L160c36.  v1:= 1232348160I;
  #L160c3c.  goto L160c58;
  #L160c3e.  v2:= 4I;
  #L160c40.  if v0 != v2 then goto L160c4c;
  #L160c44.  v1:= 1315859240I;
  #L160c4a.  goto L160c58;
  #L160c4c.  v2:= 5I;
  #L160c4e.  if v0 != v2 then goto L160c58;
  #L160c52.  v1:= 1399379109I;
  #L160c58.  v0:= v3.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160c5c.  call `a`(v0, v4, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160c62.  return @kind void;
}
procedure `boolean` `a`(`c.d.a.b` v2 @kind this, `c.d.a.e` v3 @kind object) @signature `Lc/d/a/b;.a:(Lc/d/a/e;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L160910.  v0:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160914.  call temp:= `a`(v0, v3) @signature `Lc/d/a/a;.a:(Lc/d/a/e;)Lc/d/a/i;` @kind virtual;
  #L16091a.  v3:= temp @kind object;
  #L16091c.  v0:= 1I;
  #L16091e.  if v3 != 0 then goto L160926;
  #L160922.  v3:= 1I;
  #L160924.  goto L16092e;
  #L160926.  call `d`(v2, v3) @signature `Lc/d/a/b;.d:(Lc/d/a/i;)V` @kind virtual;
  #L16092c.  v3:= 0I;
  #L16092e.  v1:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160932.  v1:= v1.`c.d.a.a.a` @type ^`int`;
  #L160936.  if v1 != 0 then goto L16093e;
  #L16093a.  v2.`c.d.a.b.e` @type ^`boolean` := v0 @kind boolean;
  #L16093e.  return v3;
}
procedure `c.d.a.b` `b`(`c.d.a.b` v0 @kind this, `c.d.a.i` v1 @kind object, `int` v2 ) @signature `Lc/d/a/b;.b:(Lc/d/a/i;I)Lc/d/a/b;` @AccessFlag  {
    temp;

  #L160578.  v0.`c.d.a.b.a` @type ^`c.d.a.i` := v1 @kind object;
  #L16057c.  v2:= (`float`) v2 @kind i2f;
  #L16057e.  v1.`c.d.a.i.e` @type ^`float` := v2;
  #L160582.  v0.`c.d.a.b.b` @type ^`float` := v2;
  #L160586.  v1:= 1I;
  #L160588.  v0.`c.d.a.b.e` @type ^`boolean` := v1 @kind boolean;
  #L16058c.  return v0 @kind object;
}
procedure `c.d.a.b` `b`(`c.d.a.b` v2 @kind this, `c.d.a.i` v3 @kind object, `c.d.a.i` v4 @kind object, `c.d.a.i` v5 @kind object, `int` v6 ) @signature `Lc/d/a/b;.b:(Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;I)Lc/d/a/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1607fc.  v0:= 0I;
  #L1607fe.  if v6 == 0 then goto L160812;
  #L160802.  if v6 >= 0 then goto L16080c;
  #L160806.  v6:= v6 * -1;
  #L16080a.  v0:= 1I;
  #L16080c.  v6:= (`float`) v6 @kind i2f;
  #L16080e.  v2.`c.d.a.b.b` @type ^`float` := v6;
  #L160812.  v6:= -1.0F;
  #L160816.  v1:= 1.0F;
  #L16081a.  if v0 != 0 then goto L16083e;
  #L16081e.  v0:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160822.  call `a`(v0, v3, v6) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160828.  v3:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L16082c.  call `a`(v3, v4, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160832.  v3:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160836.  call `a`(v3, v5, v6) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L16083c.  goto L16085c;
  #L16083e.  v0:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160842.  call `a`(v0, v3, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160848.  v3:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L16084c.  call `a`(v3, v4, v6) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160852.  v3:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160856.  call `a`(v3, v5, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L16085c.  return v2 @kind object;
}
procedure `c.d.a.b` `b`(`c.d.a.b` v2 @kind this, `c.d.a.i` v3 @kind object, `c.d.a.i` v4 @kind object, `c.d.a.i` v5 @kind object, `c.d.a.i` v6 @kind object, `float` v7 ) @signature `Lc/d/a/b;.b:(Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;F)Lc/d/a/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L160870.  v0:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160874.  v1:= 0.5F;
  #L160878.  call `a`(v0, v5, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L16087e.  v5:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160882.  call `a`(v5, v6, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160888.  v5:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L16088c.  v6:= -0.5F;
  #L160890.  call `a`(v5, v3, v6) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160896.  v3:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L16089a.  call `a`(v3, v4, v6) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L1608a0.  v3:= -v7 @kind float;
  #L1608a2.  v2.`c.d.a.b.b` @type ^`float` := v3;
  #L1608a6.  return v2 @kind object;
}
procedure `boolean` `b`(`c.d.a.b` v2 @kind this) @signature `Lc/d/a/b;.b:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L160950.  v0:= v2.`c.d.a.b.a` @type ^`c.d.a.i` @kind object;
  #L160954.  if v0 == 0 then goto L160976;
  #L160958.  v0:= v0.`c.d.a.i.g` @type ^`c.d.a.i$a` @kind object;
  #L16095c.  v1:= `@@c.d.a.i$a.b` @type ^`c.d.a.i$a` @kind object;
  #L160960.  if v0 == v1 then goto L160972;
  #L160964.  v0:= v2.`c.d.a.b.b` @type ^`float`;
  #L160968.  v1:= 0I;
  #L16096a.  v0:= fcmpg(v0, v1);
  #L16096e.  if v0 < 0 then goto L160976;
  #L160972.  v0:= 1I;
  #L160974.  goto L160978;
  #L160976.  v0:= 0I;
  #L160978.  return v0;
}
procedure `boolean` `b`(`c.d.a.b` v1 @kind this, `c.d.a.i` v2 @kind object) @signature `Lc/d/a/b;.b:(Lc/d/a/i;)Z` @AccessFlag  {
    temp;
    v0;

  #L16098c.  v0:= v1.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160990.  call temp:= `a`(v0, v2) @signature `Lc/d/a/a;.a:(Lc/d/a/i;)Z` @kind virtual;
  #L160996.  v2:= temp;
  #L160998.  return v2;
}
procedure `c.d.a.b` `c`(`c.d.a.b` v1 @kind this, `c.d.a.i` v2 @kind object, `int` v3 ) @signature `Lc/d/a/b;.c:(Lc/d/a/i;I)Lc/d/a/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160748.  if v3 >= 0 then goto L160760;
  #L16074c.  v3:= v3 * -1;
  #L160750.  v3:= (`float`) v3 @kind i2f;
  #L160752.  v1.`c.d.a.b.b` @type ^`float` := v3;
  #L160756.  v3:= v1.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L16075a.  v0:= 1.0F;
  #L16075e.  goto L16076e;
  #L160760.  v3:= (`float`) v3 @kind i2f;
  #L160762.  v1.`c.d.a.b.b` @type ^`float` := v3;
  #L160766.  v3:= v1.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L16076a.  v0:= -1.0F;
  #L16076e.  call `a`(v3, v2, v0) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160774.  return v1 @kind object;
}
procedure `c.d.a.i` `c`(`c.d.a.b` v2 @kind this, `c.d.a.i` v3 @kind object) @signature `Lc/d/a/b;.c:(Lc/d/a/i;)Lc/d/a/i;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1608f0.  v0:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1608f4.  v1:= 0I;
  #L1608f6.  call temp:= `a`(v0, v1, v3) @signature `Lc/d/a/a;.a:([ZLc/d/a/i;)Lc/d/a/i;` @kind virtual;
  #L1608fc.  v3:= temp @kind object;
  #L1608fe.  return v3 @kind object;
}
procedure `boolean` `c`(`c.d.a.b` v2 @kind this) @signature `Lc/d/a/b;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1609ac.  v0:= v2.`c.d.a.b.a` @type ^`c.d.a.i` @kind object;
  #L1609b0.  if v0 != 0 then goto L1609d2;
  #L1609b4.  v0:= v2.`c.d.a.b.b` @type ^`float`;
  #L1609b8.  v1:= 0I;
  #L1609ba.  v0:= fcmpl(v0, v1);
  #L1609be.  if v0 != 0 then goto L1609d2;
  #L1609c2.  v0:= v2.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1609c6.  v0:= v0.`c.d.a.a.a` @type ^`int`;
  #L1609ca.  if v0 != 0 then goto L1609d2;
  #L1609ce.  v0:= 1I;
  #L1609d0.  goto L1609d4;
  #L1609d2.  v0:= 0I;
  #L1609d4.  return v0;
}
procedure `void` `clear`(`c.d.a.b` v1 @kind this) @signature `Lc/d/a/b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160c74.  v0:= v1.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160c78.  call `a`(v0) @signature `Lc/d/a/a;.a:()V` @kind virtual;
  #L160c7e.  v0:= 0I;
  #L160c80.  v1.`c.d.a.b.a` @type ^`c.d.a.i` := v0 @kind object;
  #L160c84.  v0:= 0I;
  #L160c86.  v1.`c.d.a.b.b` @type ^`float` := v0;
  #L160c8a.  return @kind void;
}
procedure `void` `d`(`c.d.a.b` v1 @kind this) @signature `Lc/d/a/b;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160da0.  v0:= 0I;
  #L160da2.  v1.`c.d.a.b.a` @type ^`c.d.a.i` := v0 @kind object;
  #L160da6.  v0:= v1.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160daa.  call `a`(v0) @signature `Lc/d/a/a;.a:()V` @kind virtual;
  #L160db0.  v0:= 0I;
  #L160db2.  v1.`c.d.a.b.b` @type ^`float` := v0;
  #L160db6.  v0:= 0I;
  #L160db8.  v1.`c.d.a.b.e` @type ^`boolean` := v0 @kind boolean;
  #L160dbc.  return @kind void;
}
procedure `void` `d`(`c.d.a.b` v3 @kind this, `c.d.a.i` v4 @kind object) @signature `Lc/d/a/b;.d:(Lc/d/a/i;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L160d38.  v0:= v3.`c.d.a.b.a` @type ^`c.d.a.i` @kind object;
  #L160d3c.  v1:= -1.0F;
  #L160d40.  if v0 == 0 then goto L160d54;
  #L160d44.  v2:= v3.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160d48.  call `a`(v2, v0, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/i;F)V` @kind virtual;
  #L160d4e.  v0:= 0I;
  #L160d50.  v3.`c.d.a.b.a` @type ^`c.d.a.i` := v0 @kind object;
  #L160d54.  v0:= v3.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160d58.  v2:= 1I;
  #L160d5a.  call temp:= `a`(v0, v4, v2) @signature `Lc/d/a/a;.a:(Lc/d/a/i;Z)F` @kind virtual;
  #L160d60.  v0:= temp;
  #L160d62.  v0:= v0 * v1 @kind float;
  #L160d66.  v3.`c.d.a.b.a` @type ^`c.d.a.i` := v4 @kind object;
  #L160d6a.  v4:= 1.0F;
  #L160d6e.  v4:= fcmpl(v0, v4);
  #L160d72.  if v4 != 0 then goto L160d78;
  #L160d76.  return @kind void;
  #L160d78.  v4:= v3.`c.d.a.b.b` @type ^`float`;
  #L160d7c.  v4:= v4 / v0 @kind float;
  #L160d7e.  v3.`c.d.a.b.b` @type ^`float` := v4;
  #L160d82.  v4:= v3.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160d86.  call `a`(v4, v0) @signature `Lc/d/a/a;.a:(F)V` @kind virtual;
  #L160d8c.  return @kind void;
}
procedure `java.lang.String` `e`(`c.d.a.b` v10 @kind this) @signature `Lc/d/a/b;.e:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1609e8.  v0:= v10.`c.d.a.b.a` @type ^`c.d.a.i` @kind object;
  #L1609ec.  v1:= "" @kind object;
  #L1609f0.  if v0 != 0 then goto L160a10;
  #L1609f4.  v0:= new `java.lang.StringBuilder`;
  #L1609f8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1609fe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160a04.  v1:= "0" @kind object;
  #L160a08.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160a0e.  goto L160a2a;
  #L160a10.  v0:= new `java.lang.StringBuilder`;
  #L160a14.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160a1a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160a20.  v1:= v10.`c.d.a.b.a` @type ^`c.d.a.i` @kind object;
  #L160a24.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160a2a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L160a30.  v0:= temp @kind object;
  #L160a32.  v1:= new `java.lang.StringBuilder`;
  #L160a36.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160a3c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160a42.  v0:= " = " @kind object;
  #L160a46.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160a4c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L160a52.  v0:= temp @kind object;
  #L160a54.  v1:= v10.`c.d.a.b.b` @type ^`float`;
  #L160a58.  v2:= 0I;
  #L160a5a.  v3:= 1I;
  #L160a5c.  v4:= 0I;
  #L160a5e.  v1:= fcmpl(v1, v4);
  #L160a62.  if v1 == 0 then goto L160a8c;
  #L160a66.  v1:= new `java.lang.StringBuilder`;
  #L160a6a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160a70.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160a76.  v0:= v10.`c.d.a.b.b` @type ^`float`;
  #L160a7a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L160a80.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L160a86.  v0:= temp @kind object;
  #L160a88.  v1:= 1I;
  #L160a8a.  goto L160a8e;
  #L160a8c.  v1:= 0I;
  #L160a8e.  v5:= v10.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160a92.  v5:= v5.`c.d.a.a.a` @type ^`int`;
  #L160a96.  if v2 >= v5 then goto L160b88;
  #L160a9a.  v6:= v10.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160a9e.  call temp:= `a`(v6, v2) @signature `Lc/d/a/a;.a:(I)Lc/d/a/i;` @kind virtual;
  #L160aa4.  v6:= temp @kind object;
  #L160aa6.  if v6 != 0 then goto L160aac;
  #L160aaa.  goto L160b82;
  #L160aac.  v7:= v10.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L160ab0.  call temp:= `b`(v7, v2) @signature `Lc/d/a/a;.b:(I)F` @kind virtual;
  #L160ab6.  v7:= temp;
  #L160ab8.  v8:= fcmpl(v7, v4);
  #L160abc.  if v8 != 0 then goto L160ac2;
  #L160ac0.  goto L160b82;
  #L160ac2.  call temp:= `toString`(v6) @signature `Lc/d/a/i;.toString:()Ljava/lang/String;` @kind virtual;
  #L160ac8.  v6:= temp @kind object;
  #L160aca.  v9:= -1.0F;
  #L160ace.  if v1 != 0 then goto L160af0;
  #L160ad2.  v1:= fcmpg(v7, v4);
  #L160ad6.  if v1 >= 0 then goto L160b3a;
  #L160ada.  v1:= new `java.lang.StringBuilder`;
  #L160ade.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160ae4.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160aea.  v0:= "- " @kind object;
  #L160aee.  goto L160b28;
  #L160af0.  v1:= new `java.lang.StringBuilder`;
  #L160af4.  if v8 <= 0 then goto L160b18;
  #L160af8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160afe.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160b04.  v0:= " + " @kind object;
  #L160b08.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160b0e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L160b14.  v0:= temp @kind object;
  #L160b16.  goto L160b3a;
  #L160b18.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160b1e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160b24.  v0:= " - " @kind object;
  #L160b28.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160b2e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L160b34.  v0:= temp @kind object;
  #L160b36.  v7:= v7 * v9 @kind float;
  #L160b3a.  v1:= 1.0F;
  #L160b3e.  v1:= fcmpl(v7, v1);
  #L160b42.  if v1 != 0 then goto L160b52;
  #L160b46.  v1:= new `java.lang.StringBuilder`;
  #L160b4a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160b50.  goto L160b6c;
  #L160b52.  v1:= new `java.lang.StringBuilder`;
  #L160b56.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160b5c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160b62.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L160b68.  v0:= " " @kind object;
  #L160b6c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160b72.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160b78.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L160b7e.  v0:= temp @kind object;
  #L160b80.  v1:= 1I;
  #L160b82.  v2:= v2 + 1;
  #L160b86.  goto L160a96;
  #L160b88.  if v1 != 0 then goto L160bae;
  #L160b8c.  v1:= new `java.lang.StringBuilder`;
  #L160b90.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160b96.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160b9c.  v0:= "0.0" @kind object;
  #L160ba0.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160ba6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L160bac.  v0:= temp @kind object;
  #L160bae.  return v0 @kind object;
}
procedure `c.d.a.i` `getKey`(`c.d.a.b` v1 @kind this) @signature `Lc/d/a/b;.getKey:()Lc/d/a/i;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1608b8.  v0:= v1.`c.d.a.b.a` @type ^`c.d.a.i` @kind object;
  #L1608bc.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`c.d.a.b` v1 @kind this) @signature `Lc/d/a/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160bc0.  call temp:= `e`(v1) @signature `Lc/d/a/b;.e:()Ljava/lang/String;` @kind virtual;
  #L160bc6.  v0:= temp @kind object;
  #L160bc8.  return v0 @kind object;
}
