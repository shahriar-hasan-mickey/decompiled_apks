record `c.d.a.e` @kind class @AccessFlag PUBLIC {
  `int` `c.d.a.e.a` @AccessFlag ;
  `java.util.HashMap` `c.d.a.e.b` @AccessFlag PRIVATE;
  `c.d.a.e$a` `c.d.a.e.c` @AccessFlag PRIVATE;
  `int` `c.d.a.e.d` @AccessFlag PRIVATE;
  `int` `c.d.a.e.e` @AccessFlag PRIVATE;
  `c.d.a.b`[] `c.d.a.e.f` @AccessFlag ;
  `boolean` `c.d.a.e.g` @AccessFlag PUBLIC;
  `boolean`[] `c.d.a.e.h` @AccessFlag PRIVATE;
  `int` `c.d.a.e.i` @AccessFlag ;
  `int` `c.d.a.e.j` @AccessFlag ;
  `int` `c.d.a.e.k` @AccessFlag PRIVATE;
  `c.d.a.c` `c.d.a.e.l` @AccessFlag FINAL;
  `c.d.a.i`[] `c.d.a.e.m` @AccessFlag PRIVATE;
  `int` `c.d.a.e.n` @AccessFlag PRIVATE;
  `c.d.a.e$a` `c.d.a.e.o` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@c.d.a.e.p` @AccessFlag PRIVATE_STATIC;
global `c.d.a.f` `@@c.d.a.e.q` @AccessFlag PUBLIC_STATIC;
procedure `void` `<init>`(`c.d.a.e` v3 @kind this) @signature `Lc/d/a/e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L161540.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L161546.  v0:= 0I;
  #L161548.  v3.`c.d.a.e.a` @type ^`int` := v0;
  #L16154c.  v1:= 0I;
  #L16154e.  v3.`c.d.a.e.b` @type ^`java.util.HashMap` := v1 @kind object;
  #L161552.  v2:= 32I;
  #L161556.  v3.`c.d.a.e.d` @type ^`int` := v2;
  #L16155a.  v2:= v3.`c.d.a.e.d` @type ^`int`;
  #L16155e.  v3.`c.d.a.e.e` @type ^`int` := v2;
  #L161562.  v3.`c.d.a.e.f` @type ^`c.d.a.b`[] := v1 @kind object;
  #L161566.  v3.`c.d.a.e.g` @type ^`boolean` := v0 @kind boolean;
  #L16156a.  v1:= new `boolean`[v2];
  #L16156e.  v3.`c.d.a.e.h` @type ^`boolean`[] := v1 @kind object;
  #L161572.  v1:= 1I;
  #L161574.  v3.`c.d.a.e.i` @type ^`int` := v1;
  #L161578.  v3.`c.d.a.e.j` @type ^`int` := v0;
  #L16157c.  v3.`c.d.a.e.k` @type ^`int` := v2;
  #L161580.  v1:= `@@c.d.a.e.p` @type ^`int`;
  #L161584.  v1:= new `c.d.a.i`[v1];
  #L161588.  v3.`c.d.a.e.m` @type ^`c.d.a.i`[] := v1 @kind object;
  #L16158c.  v3.`c.d.a.e.n` @type ^`int` := v0;
  #L161590.  v0:= new `c.d.a.b`[v2];
  #L161594.  v0:= new `c.d.a.b`[v2];
  #L161598.  v3.`c.d.a.e.f` @type ^`c.d.a.b`[] := v0 @kind object;
  #L16159c.  call `j`(v3) @signature `Lc/d/a/e;.j:()V` @kind direct;
  #L1615a2.  v0:= new `c.d.a.c`;
  #L1615a6.  call `<init>`(v0) @signature `Lc/d/a/c;.<init>:()V` @kind direct;
  #L1615ac.  v3.`c.d.a.e.l` @type ^`c.d.a.c` := v0 @kind object;
  #L1615b0.  v0:= new `c.d.a.d`;
  #L1615b4.  v1:= v3.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L1615b8.  call `<init>`(v0, v1) @signature `Lc/d/a/d;.<init>:(Lc/d/a/c;)V` @kind direct;
  #L1615be.  v3.`c.d.a.e.c` @type ^`c.d.a.e$a` := v0 @kind object;
  #L1615c2.  v0:= new `c.d.a.b`;
  #L1615c6.  v1:= v3.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L1615ca.  call `<init>`(v0, v1) @signature `Lc/d/a/b;.<init>:(Lc/d/a/c;)V` @kind direct;
  #L1615d0.  v3.`c.d.a.e.o` @type ^`c.d.a.e$a` := v0 @kind object;
  #L1615d4.  return @kind void;
}
procedure `int` `a`(`c.d.a.e` v13 @kind this, `c.d.a.e$a` v14 @kind object, `boolean` v15 ) @signature `Lc/d/a/e;.a:(Lc/d/a/e$a;Z)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L1613c8.  v15:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L1613cc.  v0:= 1L;
  #L1613d0.  if v15 == 0 then goto L1613de;
  #L1613d4.  v2:= v15.`c.d.a.f.h` @type ^`long` @kind wide;
  #L1613d8.  v2:= v2 + v0 @kind long;
  #L1613da.  v15.`c.d.a.f.h` @type ^`long` := v2 @kind wide;
  #L1613de.  v15:= 0I;
  #L1613e0.  v2:= 0I;
  #L1613e2.  v3:= v13.`c.d.a.e.i` @type ^`int`;
  #L1613e6.  if v2 >= v3 then goto L1613f8;
  #L1613ea.  v3:= v13.`c.d.a.e.h` @type ^`boolean`[] @kind object;
  #L1613ee.  v3[v2]:= v15 @kind boolean;
  #L1613f2.  v2:= v2 + 1;
  #L1613f6.  goto L1613e2;
  #L1613f8.  v2:= 0I;
  #L1613fa.  v3:= 0I;
  #L1613fc.  if v2 != 0 then goto L16152e;
  #L161400.  v4:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L161404.  if v4 == 0 then goto L161412;
  #L161408.  v5:= v4.`c.d.a.f.i` @type ^`long` @kind wide;
  #L16140c.  v5:= v5 + v0 @kind long;
  #L16140e.  v4.`c.d.a.f.i` @type ^`long` := v5 @kind wide;
  #L161412.  v3:= v3 + 1;
  #L161416.  v4:= v13.`c.d.a.e.i` @type ^`int`;
  #L16141a.  v4:= v4 * 2;
  #L16141e.  if v3 < v4 then goto L161424;
  #L161422.  return v3;
  #L161424.  call temp:= `getKey`(v14) @signature `Lc/d/a/e$a;.getKey:()Lc/d/a/i;` @kind interface;
  #L16142a.  v4:= temp @kind object;
  #L16142c.  v5:= 1I;
  #L16142e.  if v4 == 0 then goto L161446;
  #L161432.  v4:= v13.`c.d.a.e.h` @type ^`boolean`[] @kind object;
  #L161436.  call temp:= `getKey`(v14) @signature `Lc/d/a/e$a;.getKey:()Lc/d/a/i;` @kind interface;
  #L16143c.  v6:= temp @kind object;
  #L16143e.  v6:= v6.`c.d.a.i.b` @type ^`int`;
  #L161442.  v4[v6]:= v5 @kind boolean;
  #L161446.  v4:= v13.`c.d.a.e.h` @type ^`boolean`[] @kind object;
  #L16144a.  call temp:= `a`(v14, v13, v4) @signature `Lc/d/a/e$a;.a:(Lc/d/a/e;[Z)Lc/d/a/i;` @kind interface;
  #L161450.  v4:= temp @kind object;
  #L161452.  if v4 == 0 then goto L16146c;
  #L161456.  v6:= v13.`c.d.a.e.h` @type ^`boolean`[] @kind object;
  #L16145a.  v7:= v4.`c.d.a.i.b` @type ^`int`;
  #L16145e.  v8:= v6[v7] @kind boolean;
  #L161462.  if v8 == 0 then goto L161468;
  #L161466.  return v3;
  #L161468.  v6[v7]:= v5 @kind boolean;
  #L16146c.  if v4 == 0 then goto L161528;
  #L161470.  v6:= 2139095039I;
  #L161476.  v7:= -1I;
  #L161478.  v6:= 0I;
  #L16147a.  v8:= -1I;
  #L16147c.  v9:= 2139095039I;
  #L161482.  v10:= v13.`c.d.a.e.j` @type ^`int`;
  #L161486.  if v6 >= v10 then goto L1614ea;
  #L16148a.  v10:= v13.`c.d.a.e.f` @type ^`c.d.a.b`[] @kind object;
  #L16148e.  v10:= v10[v6] @kind object;
  #L161492.  v11:= v10.`c.d.a.b.a` @type ^`c.d.a.i` @kind object;
  #L161496.  v11:= v11.`c.d.a.i.g` @type ^`c.d.a.i$a` @kind object;
  #L16149a.  v12:= `@@c.d.a.i$a.b` @type ^`c.d.a.i$a` @kind object;
  #L16149e.  if v11 != v12 then goto L1614a4;
  #L1614a2.  goto L1614e4;
  #L1614a4.  v11:= v10.`c.d.a.b.e` @type ^`boolean` @kind boolean;
  #L1614a8.  if v11 == 0 then goto L1614ae;
  #L1614ac.  goto L1614e4;
  #L1614ae.  call temp:= `b`(v10, v4) @signature `Lc/d/a/b;.b:(Lc/d/a/i;)Z` @kind virtual;
  #L1614b4.  v11:= temp;
  #L1614b6.  if v11 == 0 then goto L1614e4;
  #L1614ba.  v11:= v10.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1614be.  call temp:= `b`(v11, v4) @signature `Lc/d/a/a;.b:(Lc/d/a/i;)F` @kind virtual;
  #L1614c4.  v11:= temp;
  #L1614c6.  v12:= 0I;
  #L1614c8.  v12:= fcmpg(v11, v12);
  #L1614cc.  if v12 >= 0 then goto L1614e4;
  #L1614d0.  v10:= v10.`c.d.a.b.b` @type ^`float`;
  #L1614d4.  v10:= -v10 @kind float;
  #L1614d6.  v10:= v10 / v11 @kind float;
  #L1614d8.  v11:= fcmpg(v10, v9);
  #L1614dc.  if v11 >= 0 then goto L1614e4;
  #L1614e0.  v8:= v6;
  #L1614e2.  v9:= v10;
  #L1614e4.  v6:= v6 + 1;
  #L1614e8.  goto L161482;
  #L1614ea.  if v8 <= v7 then goto L161528;
  #L1614ee.  v5:= v13.`c.d.a.e.f` @type ^`c.d.a.b`[] @kind object;
  #L1614f2.  v5:= v5[v8] @kind object;
  #L1614f6.  v6:= v5.`c.d.a.b.a` @type ^`c.d.a.i` @kind object;
  #L1614fa.  v6.`c.d.a.i.c` @type ^`int` := v7;
  #L1614fe.  v6:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L161502.  if v6 == 0 then goto L161510;
  #L161506.  v9:= v6.`c.d.a.f.j` @type ^`long` @kind wide;
  #L16150a.  v9:= v9 + v0 @kind long;
  #L16150c.  v6.`c.d.a.f.j` @type ^`long` := v9 @kind wide;
  #L161510.  call `d`(v5, v4) @signature `Lc/d/a/b;.d:(Lc/d/a/i;)V` @kind virtual;
  #L161516.  v4:= v5.`c.d.a.b.a` @type ^`c.d.a.i` @kind object;
  #L16151a.  v4.`c.d.a.i.c` @type ^`int` := v8;
  #L16151e.  call `c`(v4, v5) @signature `Lc/d/a/i;.c:(Lc/d/a/b;)V` @kind virtual;
  #L161524.  goto L1613fc;
  #L161528.  v2:= 1I;
  #L16152a.  goto L1613fc;
  #L16152e.  return v3;
}
procedure `c.d.a.b` `a`(`c.d.a.e` v1 @kind object, `c.d.a.i` v2 @kind object, `c.d.a.i` v3 @kind object, `c.d.a.i` v4 @kind object, `float` v5 , `boolean` v6 ) @signature `Lc/d/a/e;.a:(Lc/d/a/e;Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;FZ)Lc/d/a/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L160ecc.  call temp:= `b`(v1) @signature `Lc/d/a/e;.b:()Lc/d/a/b;` @kind virtual;
  #L160ed2.  v0:= temp @kind object;
  #L160ed4.  if v6 == 0 then goto L160ede;
  #L160ed8.  call `b`(v1, v0) @signature `Lc/d/a/e;.b:(Lc/d/a/b;)V` @kind direct;
  #L160ede.  call temp:= `a`(v0, v2, v3, v4, v5) @signature `Lc/d/a/b;.a:(Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;F)Lc/d/a/b;` @kind virtual;
  #L160ee4.  return v0 @kind object;
}
procedure `c.d.a.i` `a`(`c.d.a.e` v2 @kind this, `c.d.a.i$a` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lc/d/a/e;.a:(Lc/d/a/i$a;Ljava/lang/String;)Lc/d/a/i;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L160f28.  v0:= v2.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L160f2c.  v0:= v0.`c.d.a.c.b` @type ^`c.d.a.g` @kind object;
  #L160f30.  call temp:= `a`(v0) @signature `Lc/d/a/g;.a:()Ljava/lang/Object;` @kind interface;
  #L160f36.  v0:= temp @kind object;
  #L160f38.  v0:= (`c.d.a.i`) v0 @kind object;
  #L160f3c.  if v0 != 0 then goto L160f4c;
  #L160f40.  v0:= new `c.d.a.i`;
  #L160f44.  call `<init>`(v0, v3, v4) @signature `Lc/d/a/i;.<init>:(Lc/d/a/i$a;Ljava/lang/String;)V` @kind direct;
  #L160f4a.  goto L160f52;
  #L160f4c.  call `a`(v0) @signature `Lc/d/a/i;.a:()V` @kind virtual;
  #L160f52.  call `a`(v0, v3, v4) @signature `Lc/d/a/i;.a:(Lc/d/a/i$a;Ljava/lang/String;)V` @kind virtual;
  #L160f58.  v3:= v2.`c.d.a.e.n` @type ^`int`;
  #L160f5c.  v4:= `@@c.d.a.e.p` @type ^`int`;
  #L160f60.  if v3 < v4 then goto L160f84;
  #L160f64.  v4:= v4 * 2;
  #L160f68.  `@@c.d.a.e.p` @type ^`int` := v4;
  #L160f6c.  v3:= v2.`c.d.a.e.m` @type ^`c.d.a.i`[] @kind object;
  #L160f70.  v4:= `@@c.d.a.e.p` @type ^`int`;
  #L160f74.  call temp:= `copyOf`(v3, v4) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L160f7a.  v3:= temp @kind object;
  #L160f7c.  v3:= (`c.d.a.i`[]) v3 @kind object;
  #L160f80.  v2.`c.d.a.e.m` @type ^`c.d.a.i`[] := v3 @kind object;
  #L160f84.  v3:= v2.`c.d.a.e.m` @type ^`c.d.a.i`[] @kind object;
  #L160f88.  v4:= v2.`c.d.a.e.n` @type ^`int`;
  #L160f8c.  v1:= v4 + 1;
  #L160f90.  v2.`c.d.a.e.n` @type ^`int` := v1;
  #L160f94.  v3[v4]:= v0 @kind object;
  #L160f98.  return v0 @kind object;
}
procedure `int` `b`(`c.d.a.e` v17 @kind this, `c.d.a.e$a` v18 @kind object) @signature `Lc/d/a/e;.b:(Lc/d/a/e$a;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L1611e0.  v0:= v17 @kind object;
  #L1611e4.  v2:= 0I;
  #L1611e6.  v3:= v0.`c.d.a.e.j` @type ^`int`;
  #L1611ea.  v4:= 0I;
  #L1611ec.  if v2 >= v3 then goto L161224;
  #L1611f0.  v3:= v0.`c.d.a.e.f` @type ^`c.d.a.b`[] @kind object;
  #L1611f4.  v6:= v3[v2] @kind object;
  #L1611f8.  v6:= v6.`c.d.a.b.a` @type ^`c.d.a.i` @kind object;
  #L1611fc.  v6:= v6.`c.d.a.i.g` @type ^`c.d.a.i$a` @kind object;
  #L161200.  v7:= `@@c.d.a.i$a.b` @type ^`c.d.a.i$a` @kind object;
  #L161204.  if v6 != v7 then goto L16120a;
  #L161208.  goto L16121e;
  #L16120a.  v3:= v3[v2] @kind object;
  #L16120e.  v3:= v3.`c.d.a.b.b` @type ^`float`;
  #L161212.  v3:= fcmpg(v3, v4);
  #L161216.  if v3 >= 0 then goto L16121e;
  #L16121a.  v2:= 1I;
  #L16121c.  goto L161226;
  #L16121e.  v2:= v2 + 1;
  #L161222.  goto L1611e6;
  #L161224.  v2:= 0I;
  #L161226.  if v2 == 0 then goto L161380;
  #L16122a.  v2:= 0I;
  #L16122c.  v3:= 0I;
  #L16122e.  if v2 != 0 then goto L161382;
  #L161232.  v6:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L161236.  v7:= 1L;
  #L16123a.  if v6 == 0 then goto L161248;
  #L16123e.  v9:= v6.`c.d.a.f.k` @type ^`long` @kind wide;
  #L161242.  v9:= v9 + v7 @kind long;
  #L161244.  v6.`c.d.a.f.k` @type ^`long` := v9 @kind wide;
  #L161248.  v3:= v3 + 1;
  #L16124c.  v6:= 2139095039I;
  #L161252.  v9:= -1I;
  #L161254.  v6:= 0I;
  #L161256.  v10:= -1I;
  #L161258.  v11:= -1I;
  #L16125a.  v12:= 2139095039I;
  #L161260.  v13:= 0I;
  #L161262.  v14:= v0.`c.d.a.e.j` @type ^`int`;
  #L161266.  if v6 >= v14 then goto L16131e;
  #L16126a.  v14:= v0.`c.d.a.e.f` @type ^`c.d.a.b`[] @kind object;
  #L16126e.  v14:= v14[v6] @kind object;
  #L161272.  v15:= v14.`c.d.a.b.a` @type ^`c.d.a.i` @kind object;
  #L161276.  v15:= v15.`c.d.a.i.g` @type ^`c.d.a.i$a` @kind object;
  #L16127a.  v1:= `@@c.d.a.i$a.b` @type ^`c.d.a.i$a` @kind object;
  #L16127e.  if v15 != v1 then goto L161284;
  #L161282.  goto L161312;
  #L161284.  v1:= v14.`c.d.a.b.e` @type ^`boolean` @kind boolean;
  #L161288.  if v1 == 0 then goto L16128e;
  #L16128c.  goto L161312;
  #L16128e.  v1:= v14.`c.d.a.b.b` @type ^`float`;
  #L161292.  v1:= fcmpg(v1, v4);
  #L161296.  if v1 >= 0 then goto L161312;
  #L16129a.  v1:= 1I;
  #L16129c.  v15:= v0.`c.d.a.e.i` @type ^`int`;
  #L1612a0.  if v1 >= v15 then goto L161312;
  #L1612a4.  v15:= v0.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L1612a8.  v15:= v15.`c.d.a.c.c` @type ^`c.d.a.i`[] @kind object;
  #L1612ac.  v15:= v15[v1] @kind object;
  #L1612b0.  v5:= v14.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1612b4.  call temp:= `b`(v5, v15) @signature `Lc/d/a/a;.b:(Lc/d/a/i;)F` @kind virtual;
  #L1612ba.  v5:= temp;
  #L1612bc.  v16:= fcmpg(v5, v4);
  #L1612c0.  if v16 > 0 then goto L1612c6;
  #L1612c4.  goto L161306;
  #L1612c6.  v4:= v13;
  #L1612c8.  v13:= v12;
  #L1612ca.  v12:= v11;
  #L1612cc.  v11:= v10;
  #L1612ce.  v10:= 0I;
  #L1612d0.  v7:= 7I;
  #L1612d2.  if v10 >= v7 then goto L1612fe;
  #L1612d6.  v7:= v15.`c.d.a.i.f` @type ^`float`[] @kind object;
  #L1612da.  v7:= v7[v10];
  #L1612de.  v7:= v7 / v5 @kind float;
  #L1612e0.  v8:= fcmpg(v7, v13);
  #L1612e4.  if v8 >= 0 then goto L1612ec;
  #L1612e8.  if v10 == v4 then goto L1612f0;
  #L1612ec.  if v10 <= v4 then goto L1612f8;
  #L1612f0.  v12:= v1;
  #L1612f2.  v11:= v6;
  #L1612f4.  v13:= v7;
  #L1612f6.  v4:= v10;
  #L1612f8.  v10:= v10 + 1;
  #L1612fc.  goto L1612d0;
  #L1612fe.  v10:= v11;
  #L161300.  v11:= v12;
  #L161302.  v12:= v13;
  #L161304.  v13:= v4;
  #L161306.  v1:= v1 + 1;
  #L16130a.  v4:= 0I;
  #L16130c.  v7:= 1L;
  #L161310.  goto L16129c;
  #L161312.  v6:= v6 + 1;
  #L161316.  v4:= 0I;
  #L161318.  v7:= 1L;
  #L16131c.  goto L161262;
  #L16131e.  if v10 == v9 then goto L16136a;
  #L161322.  v1:= v0.`c.d.a.e.f` @type ^`c.d.a.b`[] @kind object;
  #L161326.  v1:= v1[v10] @kind object;
  #L16132a.  v4:= v1.`c.d.a.b.a` @type ^`c.d.a.i` @kind object;
  #L16132e.  v4.`c.d.a.i.c` @type ^`int` := v9;
  #L161332.  v4:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L161336.  if v4 == 0 then goto L161348;
  #L16133a.  v5:= v4.`c.d.a.f.j` @type ^`long` @kind wide;
  #L16133e.  v7:= 1L;
  #L161342.  v5:= v5 + v7 @kind long;
  #L161344.  v4.`c.d.a.f.j` @type ^`long` := v5 @kind wide;
  #L161348.  v4:= v0.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L16134c.  v4:= v4.`c.d.a.c.c` @type ^`c.d.a.i`[] @kind object;
  #L161350.  v4:= v4[v11] @kind object;
  #L161354.  call `d`(v1, v4) @signature `Lc/d/a/b;.d:(Lc/d/a/i;)V` @kind virtual;
  #L16135a.  v4:= v1.`c.d.a.b.a` @type ^`c.d.a.i` @kind object;
  #L16135e.  v4.`c.d.a.i.c` @type ^`int` := v10;
  #L161362.  call `c`(v4, v1) @signature `Lc/d/a/i;.c:(Lc/d/a/b;)V` @kind virtual;
  #L161368.  goto L16136c;
  #L16136a.  v2:= 1I;
  #L16136c.  v1:= v0.`c.d.a.e.i` @type ^`int`;
  #L161370.  v1:= v1 / 2;
  #L161374.  if v3 <= v1 then goto L16137a;
  #L161378.  v2:= 1I;
  #L16137a.  v4:= 0I;
  #L16137c.  goto L16122e;
  #L161380.  v3:= 0I;
  #L161382.  return v3;
}
procedure `void` `b`(`c.d.a.e` v1 @kind this, `c.d.a.b` v2 @kind object) @signature `Lc/d/a/e;.b:(Lc/d/a/b;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1618f0.  v0:= 0I;
  #L1618f2.  call temp:= `a`(v2, v1, v0) @signature `Lc/d/a/b;.a:(Lc/d/a/e;I)Lc/d/a/b;` @kind virtual;
  #L1618f8.  return @kind void;
}
procedure `void` `c`(`c.d.a.e` v3 @kind this, `c.d.a.b` v4 @kind object) @signature `Lc/d/a/e;.c:(Lc/d/a/b;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L161aac.  v0:= v3.`c.d.a.e.f` @type ^`c.d.a.b`[] @kind object;
  #L161ab0.  v1:= v3.`c.d.a.e.j` @type ^`int`;
  #L161ab4.  v2:= v0[v1] @kind object;
  #L161ab8.  if v2 == 0 then goto L161ace;
  #L161abc.  v2:= v3.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L161ac0.  v2:= v2.`c.d.a.c.a` @type ^`c.d.a.g` @kind object;
  #L161ac4.  v0:= v0[v1] @kind object;
  #L161ac8.  call temp:= `a`(v2, v0) @signature `Lc/d/a/g;.a:(Ljava/lang/Object;)Z` @kind interface;
  #L161ace.  v0:= v3.`c.d.a.e.f` @type ^`c.d.a.b`[] @kind object;
  #L161ad2.  v1:= v3.`c.d.a.e.j` @type ^`int`;
  #L161ad6.  v0[v1]:= v4 @kind object;
  #L161ada.  v0:= v4.`c.d.a.b.a` @type ^`c.d.a.i` @kind object;
  #L161ade.  v0.`c.d.a.i.c` @type ^`int` := v1;
  #L161ae2.  v1:= v1 + 1;
  #L161ae6.  v3.`c.d.a.e.j` @type ^`int` := v1;
  #L161aea.  call `c`(v0, v4) @signature `Lc/d/a/i;.c:(Lc/d/a/b;)V` @kind virtual;
  #L161af0.  return @kind void;
}
procedure `void` `d`(`c.d.a.e` v2 @kind this, `c.d.a.b` v3 @kind object) @signature `Lc/d/a/e;.d:(Lc/d/a/b;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L161df4.  v0:= v2.`c.d.a.e.j` @type ^`int`;
  #L161df8.  if v0 <= 0 then goto L161e1c;
  #L161dfc.  v0:= v3.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L161e00.  v1:= v2.`c.d.a.e.f` @type ^`c.d.a.b`[] @kind object;
  #L161e04.  call `a`(v0, v3, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/b;[Lc/d/a/b;)V` @kind virtual;
  #L161e0a.  v0:= v3.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L161e0e.  v0:= v0.`c.d.a.a.a` @type ^`int`;
  #L161e12.  if v0 != 0 then goto L161e1c;
  #L161e16.  v0:= 1I;
  #L161e18.  v3.`c.d.a.b.e` @type ^`boolean` := v0 @kind boolean;
  #L161e1c.  return @kind void;
}
procedure `void` `g`(`c.d.a.e` v3 @kind this) @signature `Lc/d/a/e;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L161b28.  v0:= 0I;
  #L161b2a.  v1:= v3.`c.d.a.e.j` @type ^`int`;
  #L161b2e.  if v0 >= v1 then goto L161b4c;
  #L161b32.  v1:= v3.`c.d.a.e.f` @type ^`c.d.a.b`[] @kind object;
  #L161b36.  v1:= v1[v0] @kind object;
  #L161b3a.  v2:= v1.`c.d.a.b.a` @type ^`c.d.a.i` @kind object;
  #L161b3e.  v1:= v1.`c.d.a.b.b` @type ^`float`;
  #L161b42.  v2.`c.d.a.i.e` @type ^`float` := v1;
  #L161b46.  v0:= v0 + 1;
  #L161b4a.  goto L161b2a;
  #L161b4c.  return @kind void;
}
procedure `c.d.a.f` `h`() @signature `Lc/d/a/e;.h:()Lc/d/a/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L160f10.  v0:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L160f14.  return v0 @kind object;
}
procedure `void` `i`(`c.d.a.e` v6 @kind this) @signature `Lc/d/a/e;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L161b60.  v0:= v6.`c.d.a.e.d` @type ^`int`;
  #L161b64.  v0:= v0 * 2;
  #L161b68.  v6.`c.d.a.e.d` @type ^`int` := v0;
  #L161b6c.  v0:= v6.`c.d.a.e.f` @type ^`c.d.a.b`[] @kind object;
  #L161b70.  v1:= v6.`c.d.a.e.d` @type ^`int`;
  #L161b74.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L161b7a.  v0:= temp @kind object;
  #L161b7c.  v0:= (`c.d.a.b`[]) v0 @kind object;
  #L161b80.  v6.`c.d.a.e.f` @type ^`c.d.a.b`[] := v0 @kind object;
  #L161b84.  v0:= v6.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L161b88.  v1:= v0.`c.d.a.c.c` @type ^`c.d.a.i`[] @kind object;
  #L161b8c.  v2:= v6.`c.d.a.e.d` @type ^`int`;
  #L161b90.  call temp:= `copyOf`(v1, v2) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L161b96.  v1:= temp @kind object;
  #L161b98.  v1:= (`c.d.a.i`[]) v1 @kind object;
  #L161b9c.  v0.`c.d.a.c.c` @type ^`c.d.a.i`[] := v1 @kind object;
  #L161ba0.  v0:= v6.`c.d.a.e.d` @type ^`int`;
  #L161ba4.  v1:= new `boolean`[v0];
  #L161ba8.  v6.`c.d.a.e.h` @type ^`boolean`[] := v1 @kind object;
  #L161bac.  v6.`c.d.a.e.e` @type ^`int` := v0;
  #L161bb0.  v6.`c.d.a.e.k` @type ^`int` := v0;
  #L161bb4.  v1:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L161bb8.  if v1 == 0 then goto L161be8;
  #L161bbc.  v2:= v1.`c.d.a.f.d` @type ^`long` @kind wide;
  #L161bc0.  v4:= 1L;
  #L161bc4.  v2:= v2 + v4 @kind long;
  #L161bc6.  v1.`c.d.a.f.d` @type ^`long` := v2 @kind wide;
  #L161bca.  v2:= v1.`c.d.a.f.o` @type ^`long` @kind wide;
  #L161bce.  v4:= (`long`) v0 @kind i2l;
  #L161bd0.  call temp:= `max`(v2, v4) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L161bd6.  v2:= temp @kind wide;
  #L161bd8.  v1.`c.d.a.f.o` @type ^`long` := v2 @kind wide;
  #L161bdc.  v0:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L161be0.  v1:= v0.`c.d.a.f.o` @type ^`long` @kind wide;
  #L161be4.  v0.`c.d.a.f.A` @type ^`long` := v1 @kind wide;
  #L161be8.  return @kind void;
}
procedure `void` `j`(`c.d.a.e` v3 @kind this) @signature `Lc/d/a/e;.j:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L161d08.  v0:= 0I;
  #L161d0a.  v1:= v3.`c.d.a.e.f` @type ^`c.d.a.b`[] @kind object;
  #L161d0e.  v2:= length @variable v1;
  #L161d10.  if v0 >= v2 then goto L161d3a;
  #L161d14.  v1:= v1[v0] @kind object;
  #L161d18.  if v1 == 0 then goto L161d2a;
  #L161d1c.  v2:= v3.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L161d20.  v2:= v2.`c.d.a.c.a` @type ^`c.d.a.g` @kind object;
  #L161d24.  call temp:= `a`(v2, v1) @signature `Lc/d/a/g;.a:(Ljava/lang/Object;)Z` @kind interface;
  #L161d2a.  v1:= v3.`c.d.a.e.f` @type ^`c.d.a.b`[] @kind object;
  #L161d2e.  v2:= 0I;
  #L161d30.  v1[v0]:= v2 @kind object;
  #L161d34.  v0:= v0 + 1;
  #L161d38.  goto L161d0a;
  #L161d3a.  return @kind void;
}
procedure `c.d.a.b` `a`(`c.d.a.e` v1 @kind this, `c.d.a.i` v2 @kind object, `c.d.a.i` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lc/d/a/e;.a:(Lc/d/a/i;Lc/d/a/i;II)Lc/d/a/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160e50.  call temp:= `b`(v1) @signature `Lc/d/a/e;.b:()Lc/d/a/b;` @kind virtual;
  #L160e56.  v0:= temp @kind object;
  #L160e58.  call temp:= `a`(v0, v2, v3, v4) @signature `Lc/d/a/b;.a:(Lc/d/a/i;Lc/d/a/i;I)Lc/d/a/b;` @kind virtual;
  #L160e5e.  v2:= 6I;
  #L160e60.  if v5 == v2 then goto L160e6a;
  #L160e64.  call temp:= `a`(v0, v1, v5) @signature `Lc/d/a/b;.a:(Lc/d/a/e;I)Lc/d/a/b;` @kind virtual;
  #L160e6a.  call `a`(v1, v0) @signature `Lc/d/a/e;.a:(Lc/d/a/b;)V` @kind virtual;
  #L160e70.  return v0 @kind object;
}
procedure `c.d.a.i` `a`(`c.d.a.e` v5 @kind this) @signature `Lc/d/a/e;.a:()Lc/d/a/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L161030.  v0:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L161034.  if v0 == 0 then goto L161046;
  #L161038.  v1:= v0.`c.d.a.f.n` @type ^`long` @kind wide;
  #L16103c.  v3:= 1L;
  #L161040.  v1:= v1 + v3 @kind long;
  #L161042.  v0.`c.d.a.f.n` @type ^`long` := v1 @kind wide;
  #L161046.  v0:= v5.`c.d.a.e.i` @type ^`int`;
  #L16104a.  v0:= v0 + 1;
  #L16104e.  v1:= v5.`c.d.a.e.e` @type ^`int`;
  #L161052.  if v0 < v1 then goto L16105c;
  #L161056.  call `i`(v5) @signature `Lc/d/a/e;.i:()V` @kind direct;
  #L16105c.  v0:= `@@c.d.a.i$a.d` @type ^`c.d.a.i$a` @kind object;
  #L161060.  v1:= 0I;
  #L161062.  call temp:= `a`(v5, v0, v1) @signature `Lc/d/a/e;.a:(Lc/d/a/i$a;Ljava/lang/String;)Lc/d/a/i;` @kind direct;
  #L161068.  v0:= temp @kind object;
  #L16106a.  v1:= v5.`c.d.a.e.a` @type ^`int`;
  #L16106e.  v1:= v1 + 1;
  #L161072.  v5.`c.d.a.e.a` @type ^`int` := v1;
  #L161076.  v1:= v5.`c.d.a.e.i` @type ^`int`;
  #L16107a.  v1:= v1 + 1;
  #L16107e.  v5.`c.d.a.e.i` @type ^`int` := v1;
  #L161082.  v1:= v5.`c.d.a.e.a` @type ^`int`;
  #L161086.  v0.`c.d.a.i.b` @type ^`int` := v1;
  #L16108a.  v2:= v5.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L16108e.  v2:= v2.`c.d.a.c.c` @type ^`c.d.a.i`[] @kind object;
  #L161092.  v2[v1]:= v0 @kind object;
  #L161096.  return v0 @kind object;
}
procedure `c.d.a.i` `a`(`c.d.a.e` v5 @kind this, `int` v6 , `java.lang.String` v7 @kind object) @signature `Lc/d/a/e;.a:(ILjava/lang/String;)Lc/d/a/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L160fac.  v0:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L160fb0.  if v0 == 0 then goto L160fc2;
  #L160fb4.  v1:= v0.`c.d.a.f.l` @type ^`long` @kind wide;
  #L160fb8.  v3:= 1L;
  #L160fbc.  v1:= v1 + v3 @kind long;
  #L160fbe.  v0.`c.d.a.f.l` @type ^`long` := v1 @kind wide;
  #L160fc2.  v0:= v5.`c.d.a.e.i` @type ^`int`;
  #L160fc6.  v0:= v0 + 1;
  #L160fca.  v1:= v5.`c.d.a.e.e` @type ^`int`;
  #L160fce.  if v0 < v1 then goto L160fd8;
  #L160fd2.  call `i`(v5) @signature `Lc/d/a/e;.i:()V` @kind direct;
  #L160fd8.  v0:= `@@c.d.a.i$a.e` @type ^`c.d.a.i$a` @kind object;
  #L160fdc.  call temp:= `a`(v5, v0, v7) @signature `Lc/d/a/e;.a:(Lc/d/a/i$a;Ljava/lang/String;)Lc/d/a/i;` @kind direct;
  #L160fe2.  v7:= temp @kind object;
  #L160fe4.  v0:= v5.`c.d.a.e.a` @type ^`int`;
  #L160fe8.  v0:= v0 + 1;
  #L160fec.  v5.`c.d.a.e.a` @type ^`int` := v0;
  #L160ff0.  v0:= v5.`c.d.a.e.i` @type ^`int`;
  #L160ff4.  v0:= v0 + 1;
  #L160ff8.  v5.`c.d.a.e.i` @type ^`int` := v0;
  #L160ffc.  v0:= v5.`c.d.a.e.a` @type ^`int`;
  #L161000.  v7.`c.d.a.i.b` @type ^`int` := v0;
  #L161004.  v7.`c.d.a.i.d` @type ^`int` := v6;
  #L161008.  v6:= v5.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L16100c.  v6:= v6.`c.d.a.c.c` @type ^`c.d.a.i`[] @kind object;
  #L161010.  v6[v0]:= v7 @kind object;
  #L161014.  v6:= v5.`c.d.a.e.c` @type ^`c.d.a.e$a` @kind object;
  #L161018.  call `a`(v6, v7) @signature `Lc/d/a/e$a;.a:(Lc/d/a/i;)V` @kind interface;
  #L16101e.  return v7 @kind object;
}
procedure `c.d.a.i` `a`(`c.d.a.e` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lc/d/a/e;.a:(Ljava/lang/Object;)Lc/d/a/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1610a8.  v0:= 0I;
  #L1610aa.  if v4 != 0 then goto L1610b0;
  #L1610ae.  return v0 @kind object;
  #L1610b0.  v1:= v3.`c.d.a.e.i` @type ^`int`;
  #L1610b4.  v1:= v1 + 1;
  #L1610b8.  v2:= v3.`c.d.a.e.e` @type ^`int`;
  #L1610bc.  if v1 < v2 then goto L1610c6;
  #L1610c0.  call `i`(v3) @signature `Lc/d/a/e;.i:()V` @kind direct;
  #L1610c6.  v1:= instanceof @variable v4 @type ^`c.d.a.j.e` @kind boolean;
  #L1610ca.  if v1 == 0 then goto L161156;
  #L1610ce.  v4:= (`c.d.a.j.e`) v4 @kind object;
  #L1610d2.  call temp:= `e`(v4) @signature `Lc/d/a/j/e;.e:()Lc/d/a/i;` @kind virtual;
  #L1610d8.  v0:= temp @kind object;
  #L1610da.  if v0 != 0 then goto L1610f2;
  #L1610de.  v0:= v3.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L1610e2.  call `a`(v4, v0) @signature `Lc/d/a/j/e;.a:(Lc/d/a/c;)V` @kind virtual;
  #L1610e8.  call temp:= `e`(v4) @signature `Lc/d/a/j/e;.e:()Lc/d/a/i;` @kind virtual;
  #L1610ee.  v4:= temp @kind object;
  #L1610f0.  v0:= v4 @kind object;
  #L1610f2.  v4:= v0.`c.d.a.i.b` @type ^`int`;
  #L1610f6.  v1:= -1I;
  #L1610f8.  if v4 == v1 then goto L161114;
  #L1610fc.  v2:= v3.`c.d.a.e.a` @type ^`int`;
  #L161100.  if v4 > v2 then goto L161114;
  #L161104.  v2:= v3.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L161108.  v2:= v2.`c.d.a.c.c` @type ^`c.d.a.i`[] @kind object;
  #L16110c.  v4:= v2[v4] @kind object;
  #L161110.  if v4 != 0 then goto L161156;
  #L161114.  v4:= v0.`c.d.a.i.b` @type ^`int`;
  #L161118.  if v4 == v1 then goto L161122;
  #L16111c.  call `a`(v0) @signature `Lc/d/a/i;.a:()V` @kind virtual;
  #L161122.  v4:= v3.`c.d.a.e.a` @type ^`int`;
  #L161126.  v4:= v4 + 1;
  #L16112a.  v3.`c.d.a.e.a` @type ^`int` := v4;
  #L16112e.  v4:= v3.`c.d.a.e.i` @type ^`int`;
  #L161132.  v4:= v4 + 1;
  #L161136.  v3.`c.d.a.e.i` @type ^`int` := v4;
  #L16113a.  v4:= v3.`c.d.a.e.a` @type ^`int`;
  #L16113e.  v0.`c.d.a.i.b` @type ^`int` := v4;
  #L161142.  v1:= `@@c.d.a.i$a.b` @type ^`c.d.a.i$a` @kind object;
  #L161146.  v0.`c.d.a.i.g` @type ^`c.d.a.i$a` := v1 @kind object;
  #L16114a.  v1:= v3.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L16114e.  v1:= v1.`c.d.a.c.c` @type ^`c.d.a.i`[] @kind object;
  #L161152.  v1[v4]:= v0 @kind object;
  #L161156.  return v0 @kind object;
}
procedure `void` `a`(`c.d.a.e` v7 @kind this, `c.d.a.b` v8 @kind object) @signature `Lc/d/a/e;.a:(Lc/d/a/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L16175c.  if v8 != 0 then goto L161762;
  #L161760.  return @kind void;
  #L161762.  v0:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L161766.  v1:= 1L;
  #L16176a.  if v0 == 0 then goto L16178a;
  #L16176e.  v3:= v0.`c.d.a.f.f` @type ^`long` @kind wide;
  #L161772.  v3:= v3 + v1 @kind long;
  #L161774.  v0.`c.d.a.f.f` @type ^`long` := v3 @kind wide;
  #L161778.  v3:= v8.`c.d.a.b.e` @type ^`boolean` @kind boolean;
  #L16177c.  if v3 == 0 then goto L16178a;
  #L161780.  v3:= v0.`c.d.a.f.g` @type ^`long` @kind wide;
  #L161784.  v3:= v3 + v1 @kind long;
  #L161786.  v0.`c.d.a.f.g` @type ^`long` := v3 @kind wide;
  #L16178a.  v0:= v7.`c.d.a.e.j` @type ^`int`;
  #L16178e.  v3:= 1I;
  #L161790.  v0:= v0 + v3 @kind int;
  #L161792.  v4:= v7.`c.d.a.e.k` @type ^`int`;
  #L161796.  if v0 >= v4 then goto L1617a8;
  #L16179a.  v0:= v7.`c.d.a.e.i` @type ^`int`;
  #L16179e.  v0:= v0 + v3 @kind int;
  #L1617a0.  v4:= v7.`c.d.a.e.e` @type ^`int`;
  #L1617a4.  if v0 < v4 then goto L1617ae;
  #L1617a8.  call `i`(v7) @signature `Lc/d/a/e;.i:()V` @kind direct;
  #L1617ae.  v0:= 0I;
  #L1617b0.  v4:= v8.`c.d.a.b.e` @type ^`boolean` @kind boolean;
  #L1617b4.  if v4 != 0 then goto L161866;
  #L1617b8.  call `d`(v7, v8) @signature `Lc/d/a/e;.d:(Lc/d/a/b;)V` @kind direct;
  #L1617be.  call temp:= `c`(v8) @signature `Lc/d/a/b;.c:()Z` @kind virtual;
  #L1617c4.  v4:= temp;
  #L1617c6.  if v4 == 0 then goto L1617cc;
  #L1617ca.  return @kind void;
  #L1617cc.  call `a`(v8) @signature `Lc/d/a/b;.a:()V` @kind virtual;
  #L1617d2.  call temp:= `a`(v8, v7) @signature `Lc/d/a/b;.a:(Lc/d/a/e;)Z` @kind virtual;
  #L1617d8.  v4:= temp;
  #L1617da.  if v4 == 0 then goto L161858;
  #L1617de.  call temp:= `a`(v7) @signature `Lc/d/a/e;.a:()Lc/d/a/i;` @kind virtual;
  #L1617e4.  v0:= temp @kind object;
  #L1617e6.  v8.`c.d.a.b.a` @type ^`c.d.a.i` := v0 @kind object;
  #L1617ea.  call `c`(v7, v8) @signature `Lc/d/a/e;.c:(Lc/d/a/b;)V` @kind direct;
  #L1617f0.  v4:= v7.`c.d.a.e.o` @type ^`c.d.a.e$a` @kind object;
  #L1617f4.  call `a`(v4, v8) @signature `Lc/d/a/e$a;.a:(Lc/d/a/e$a;)V` @kind interface;
  #L1617fa.  v4:= v7.`c.d.a.e.o` @type ^`c.d.a.e$a` @kind object;
  #L1617fe.  call temp:= `a`(v7, v4, v3) @signature `Lc/d/a/e;.a:(Lc/d/a/e$a;Z)I` @kind direct;
  #L161804.  v4:= v0.`c.d.a.i.c` @type ^`int`;
  #L161808.  v5:= -1I;
  #L16180a.  if v4 != v5 then goto L161856;
  #L16180e.  v4:= v8.`c.d.a.b.a` @type ^`c.d.a.i` @kind object;
  #L161812.  if v4 != v0 then goto L16183a;
  #L161816.  call temp:= `c`(v8, v0) @signature `Lc/d/a/b;.c:(Lc/d/a/i;)Lc/d/a/i;` @kind virtual;
  #L16181c.  v0:= temp @kind object;
  #L16181e.  if v0 == 0 then goto L16183a;
  #L161822.  v4:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L161826.  if v4 == 0 then goto L161834;
  #L16182a.  v5:= v4.`c.d.a.f.j` @type ^`long` @kind wide;
  #L16182e.  v5:= v5 + v1 @kind long;
  #L161830.  v4.`c.d.a.f.j` @type ^`long` := v5 @kind wide;
  #L161834.  call `d`(v8, v0) @signature `Lc/d/a/b;.d:(Lc/d/a/i;)V` @kind virtual;
  #L16183a.  v0:= v8.`c.d.a.b.e` @type ^`boolean` @kind boolean;
  #L16183e.  if v0 != 0 then goto L16184c;
  #L161842.  v0:= v8.`c.d.a.b.a` @type ^`c.d.a.i` @kind object;
  #L161846.  call `c`(v0, v8) @signature `Lc/d/a/i;.c:(Lc/d/a/b;)V` @kind virtual;
  #L16184c.  v0:= v7.`c.d.a.e.j` @type ^`int`;
  #L161850.  v0:= v0 - v3 @kind int;
  #L161852.  v7.`c.d.a.e.j` @type ^`int` := v0;
  #L161856.  v0:= 1I;
  #L161858.  call temp:= `b`(v8) @signature `Lc/d/a/b;.b:()Z` @kind virtual;
  #L16185e.  v1:= temp;
  #L161860.  if v1 != 0 then goto L161866;
  #L161864.  return @kind void;
  #L161866.  if v0 != 0 then goto L161870;
  #L16186a.  call `c`(v7, v8) @signature `Lc/d/a/e;.c:(Lc/d/a/b;)V` @kind direct;
  #L161870.  return @kind void;
}
procedure `void` `a`(`c.d.a.e` v1 @kind this, `c.d.a.b` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lc/d/a/e;.a:(Lc/d/a/b;II)V` @AccessFlag  {
    temp;
    v0;

  #L161b04.  v0:= 0I;
  #L161b06.  call temp:= `a`(v1, v4, v0) @signature `Lc/d/a/e;.a:(ILjava/lang/String;)Lc/d/a/i;` @kind virtual;
  #L161b0c.  v4:= temp @kind object;
  #L161b0e.  call temp:= `a`(v2, v4, v3) @signature `Lc/d/a/b;.a:(Lc/d/a/i;I)Lc/d/a/b;` @kind virtual;
  #L161b14.  return @kind void;
}
procedure `void` `a`(`c.d.a.e` v5 @kind this, `c.d.a.e$a` v6 @kind object) @signature `Lc/d/a/e;.a:(Lc/d/a/e$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L161c90.  v0:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L161c94.  if v0 == 0 then goto L161cd6;
  #L161c98.  v1:= v0.`c.d.a.f.s` @type ^`long` @kind wide;
  #L161c9c.  v3:= 1L;
  #L161ca0.  v1:= v1 + v3 @kind long;
  #L161ca2.  v0.`c.d.a.f.s` @type ^`long` := v1 @kind wide;
  #L161ca6.  v1:= v0.`c.d.a.f.t` @type ^`long` @kind wide;
  #L161caa.  v3:= v5.`c.d.a.e.i` @type ^`int`;
  #L161cae.  v3:= (`long`) v3 @kind i2l;
  #L161cb0.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L161cb6.  v1:= temp @kind wide;
  #L161cb8.  v0.`c.d.a.f.t` @type ^`long` := v1 @kind wide;
  #L161cbc.  v0:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L161cc0.  v1:= v0.`c.d.a.f.u` @type ^`long` @kind wide;
  #L161cc4.  v3:= v5.`c.d.a.e.j` @type ^`int`;
  #L161cc8.  v3:= (`long`) v3 @kind i2l;
  #L161cca.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L161cd0.  v1:= temp @kind wide;
  #L161cd2.  v0.`c.d.a.f.u` @type ^`long` := v1 @kind wide;
  #L161cd6.  v0:= v6 @kind object;
  #L161cd8.  v0:= (`c.d.a.b`) v0 @kind object;
  #L161cdc.  call `d`(v5, v0) @signature `Lc/d/a/e;.d:(Lc/d/a/b;)V` @kind direct;
  #L161ce2.  call temp:= `b`(v5, v6) @signature `Lc/d/a/e;.b:(Lc/d/a/e$a;)I` @kind direct;
  #L161ce8.  v0:= 0I;
  #L161cea.  call temp:= `a`(v5, v6, v0) @signature `Lc/d/a/e;.a:(Lc/d/a/e$a;Z)I` @kind direct;
  #L161cf0.  call `g`(v5) @signature `Lc/d/a/e;.g:()V` @kind direct;
  #L161cf6.  return @kind void;
}
procedure `void` `a`(`c.d.a.e` v2 @kind this, `c.d.a.i` v3 @kind object, `int` v4 ) @signature `Lc/d/a/e;.a:(Lc/d/a/i;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L161884.  v0:= v3.`c.d.a.i.c` @type ^`int`;
  #L161888.  v1:= -1I;
  #L16188a.  if v0 == v1 then goto L1618ca;
  #L16188e.  v1:= v2.`c.d.a.e.f` @type ^`c.d.a.b`[] @kind object;
  #L161892.  v0:= v1[v0] @kind object;
  #L161896.  v1:= v0.`c.d.a.b.e` @type ^`boolean` @kind boolean;
  #L16189a.  if v1 == 0 then goto L1618a6;
  #L16189e.  v3:= (`float`) v4 @kind i2f;
  #L1618a0.  v0.`c.d.a.b.b` @type ^`float` := v3;
  #L1618a4.  goto L1618de;
  #L1618a6.  v1:= v0.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1618aa.  v1:= v1.`c.d.a.a.a` @type ^`int`;
  #L1618ae.  if v1 != 0 then goto L1618ba;
  #L1618b2.  v3:= 1I;
  #L1618b4.  v0.`c.d.a.b.e` @type ^`boolean` := v3 @kind boolean;
  #L1618b8.  goto L16189e;
  #L1618ba.  call temp:= `b`(v2) @signature `Lc/d/a/e;.b:()Lc/d/a/b;` @kind virtual;
  #L1618c0.  v0:= temp @kind object;
  #L1618c2.  call temp:= `c`(v0, v3, v4) @signature `Lc/d/a/b;.c:(Lc/d/a/i;I)Lc/d/a/b;` @kind virtual;
  #L1618c8.  goto L1618d8;
  #L1618ca.  call temp:= `b`(v2) @signature `Lc/d/a/e;.b:()Lc/d/a/b;` @kind virtual;
  #L1618d0.  v0:= temp @kind object;
  #L1618d2.  call temp:= `b`(v0, v3, v4) @signature `Lc/d/a/b;.b:(Lc/d/a/i;I)Lc/d/a/b;` @kind virtual;
  #L1618d8.  call `a`(v2, v0) @signature `Lc/d/a/e;.a:(Lc/d/a/b;)V` @kind virtual;
  #L1618de.  return @kind void;
}
procedure `void` `a`(`c.d.a.e` v11 @kind this, `c.d.a.i` v12 @kind object, `c.d.a.i` v13 @kind object, `int` v14 , `float` v15 , `c.d.a.i` v16 @kind object, `c.d.a.i` v17 @kind object, `int` v18 , `int` v19 ) @signature `Lc/d/a/e;.a:(Lc/d/a/i;Lc/d/a/i;IFLc/d/a/i;Lc/d/a/i;II)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L16170c.  v0:= v11 @kind object;
  #L16170e.  v1:= v19;
  #L161712.  call temp:= `b`(v11) @signature `Lc/d/a/e;.b:()Lc/d/a/b;` @kind virtual;
  #L161718.  v10:= temp @kind object;
  #L16171a.  v2:= v10 @kind object;
  #L16171c.  v3:= v12 @kind object;
  #L16171e.  v4:= v13 @kind object;
  #L161720.  v5:= v14;
  #L161722.  v6:= v15;
  #L161724.  v7:= v16 @kind object;
  #L161728.  v8:= v17 @kind object;
  #L16172c.  v9:= v18;
  #L161730.  call temp:= `a`(v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lc/d/a/b;.a:(Lc/d/a/i;Lc/d/a/i;IFLc/d/a/i;Lc/d/a/i;I)Lc/d/a/b;` @kind virtual;
  #L161736.  v2:= 6I;
  #L161738.  if v1 == v2 then goto L161742;
  #L16173c.  call temp:= `a`(v10, v11, v1) @signature `Lc/d/a/b;.a:(Lc/d/a/e;I)Lc/d/a/b;` @kind virtual;
  #L161742.  call `a`(v11, v10) @signature `Lc/d/a/e;.a:(Lc/d/a/b;)V` @kind virtual;
  #L161748.  return @kind void;
}
procedure `void` `a`(`c.d.a.e` v7 @kind this, `c.d.a.i` v8 @kind object, `c.d.a.i` v9 @kind object, `c.d.a.i` v10 @kind object, `c.d.a.i` v11 @kind object, `float` v12 , `int` v13 ) @signature `Lc/d/a/e;.a:(Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;FI)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L161a6c.  call temp:= `b`(v7) @signature `Lc/d/a/e;.b:()Lc/d/a/b;` @kind virtual;
  #L161a72.  v6:= temp @kind object;
  #L161a74.  v0:= v6 @kind object;
  #L161a76.  v1:= v8 @kind object;
  #L161a78.  v2:= v9 @kind object;
  #L161a7a.  v3:= v10 @kind object;
  #L161a7c.  v4:= v11 @kind object;
  #L161a7e.  v5:= v12;
  #L161a80.  call temp:= `a`(v0, v1, v2, v3, v4, v5) @signature `Lc/d/a/b;.a:(Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;F)Lc/d/a/b;` @kind virtual;
  #L161a86.  v8:= 6I;
  #L161a88.  if v13 == v8 then goto L161a92;
  #L161a8c.  call temp:= `a`(v6, v7, v13) @signature `Lc/d/a/b;.a:(Lc/d/a/e;I)Lc/d/a/b;` @kind virtual;
  #L161a92.  call `a`(v7, v6) @signature `Lc/d/a/e;.a:(Lc/d/a/b;)V` @kind virtual;
  #L161a98.  return @kind void;
}
procedure `void` `a`(`c.d.a.e` v3 @kind this, `c.d.a.i` v4 @kind object, `c.d.a.i` v5 @kind object, `boolean` v6 ) @signature `Lc/d/a/e;.a:(Lc/d/a/i;Lc/d/a/i;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16190c.  call temp:= `b`(v3) @signature `Lc/d/a/e;.b:()Lc/d/a/b;` @kind virtual;
  #L161912.  v0:= temp @kind object;
  #L161914.  call temp:= `c`(v3) @signature `Lc/d/a/e;.c:()Lc/d/a/i;` @kind virtual;
  #L16191a.  v1:= temp @kind object;
  #L16191c.  v2:= 0I;
  #L16191e.  v1.`c.d.a.i.d` @type ^`int` := v2;
  #L161922.  call temp:= `a`(v0, v4, v5, v1, v2) @signature `Lc/d/a/b;.a:(Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;I)Lc/d/a/b;` @kind virtual;
  #L161928.  if v6 == 0 then goto L16194a;
  #L16192c.  v4:= v0.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L161930.  call temp:= `b`(v4, v1) @signature `Lc/d/a/a;.b:(Lc/d/a/i;)F` @kind virtual;
  #L161936.  v4:= temp;
  #L161938.  v5:= -1.0F;
  #L16193c.  v4:= v4 * v5 @kind float;
  #L161940.  v4:= (`int`) v4 @kind f2i;
  #L161942.  v5:= 1I;
  #L161944.  call `a`(v3, v0, v4, v5) @signature `Lc/d/a/e;.a:(Lc/d/a/b;II)V` @kind virtual;
  #L16194a.  call `a`(v3, v0) @signature `Lc/d/a/e;.a:(Lc/d/a/b;)V` @kind virtual;
  #L161950.  return @kind void;
}
procedure `void` `a`(`c.d.a.e` v18 @kind this, `c.d.a.j.f` v19 @kind object, `c.d.a.j.f` v20 @kind object, `float` v21 , `int` v22 ) @signature `Lc/d/a/e;.a:(Lc/d/a/j/f;Lc/d/a/j/f;FI)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L1615e8.  v0:= v18 @kind object;
  #L1615ec.  v1:= v19 @kind object;
  #L1615f0.  v2:= v20 @kind object;
  #L1615f4.  v3:= `@@c.d.a.j.e$d.c` @type ^`c.d.a.j.e$d` @kind object;
  #L1615f8.  call temp:= `a`(v1, v3) @signature `Lc/d/a/j/f;.a:(Lc/d/a/j/e$d;)Lc/d/a/j/e;` @kind virtual;
  #L1615fe.  v3:= temp @kind object;
  #L161600.  call temp:= `a`(v0, v3) @signature `Lc/d/a/e;.a:(Ljava/lang/Object;)Lc/d/a/i;` @kind virtual;
  #L161606.  v5:= temp @kind object;
  #L161608.  v3:= `@@c.d.a.j.e$d.d` @type ^`c.d.a.j.e$d` @kind object;
  #L16160c.  call temp:= `a`(v1, v3) @signature `Lc/d/a/j/f;.a:(Lc/d/a/j/e$d;)Lc/d/a/j/e;` @kind virtual;
  #L161612.  v3:= temp @kind object;
  #L161614.  call temp:= `a`(v0, v3) @signature `Lc/d/a/e;.a:(Ljava/lang/Object;)Lc/d/a/i;` @kind virtual;
  #L16161a.  v7:= temp @kind object;
  #L16161c.  v3:= `@@c.d.a.j.e$d.e` @type ^`c.d.a.j.e$d` @kind object;
  #L161620.  call temp:= `a`(v1, v3) @signature `Lc/d/a/j/f;.a:(Lc/d/a/j/e$d;)Lc/d/a/j/e;` @kind virtual;
  #L161626.  v3:= temp @kind object;
  #L161628.  call temp:= `a`(v0, v3) @signature `Lc/d/a/e;.a:(Ljava/lang/Object;)Lc/d/a/i;` @kind virtual;
  #L16162e.  v3:= temp @kind object;
  #L161630.  v4:= `@@c.d.a.j.e$d.f` @type ^`c.d.a.j.e$d` @kind object;
  #L161634.  call temp:= `a`(v1, v4) @signature `Lc/d/a/j/f;.a:(Lc/d/a/j/e$d;)Lc/d/a/j/e;` @kind virtual;
  #L16163a.  v1:= temp @kind object;
  #L16163c.  call temp:= `a`(v0, v1) @signature `Lc/d/a/e;.a:(Ljava/lang/Object;)Lc/d/a/i;` @kind virtual;
  #L161642.  v8:= temp @kind object;
  #L161644.  v1:= `@@c.d.a.j.e$d.c` @type ^`c.d.a.j.e$d` @kind object;
  #L161648.  call temp:= `a`(v2, v1) @signature `Lc/d/a/j/f;.a:(Lc/d/a/j/e$d;)Lc/d/a/j/e;` @kind virtual;
  #L16164e.  v1:= temp @kind object;
  #L161650.  call temp:= `a`(v0, v1) @signature `Lc/d/a/e;.a:(Ljava/lang/Object;)Lc/d/a/i;` @kind virtual;
  #L161656.  v1:= temp @kind object;
  #L161658.  v4:= `@@c.d.a.j.e$d.d` @type ^`c.d.a.j.e$d` @kind object;
  #L16165c.  call temp:= `a`(v2, v4) @signature `Lc/d/a/j/f;.a:(Lc/d/a/j/e$d;)Lc/d/a/j/e;` @kind virtual;
  #L161662.  v4:= temp @kind object;
  #L161664.  call temp:= `a`(v0, v4) @signature `Lc/d/a/e;.a:(Ljava/lang/Object;)Lc/d/a/i;` @kind virtual;
  #L16166a.  v9:= temp @kind object;
  #L16166c.  v4:= `@@c.d.a.j.e$d.e` @type ^`c.d.a.j.e$d` @kind object;
  #L161670.  call temp:= `a`(v2, v4) @signature `Lc/d/a/j/f;.a:(Lc/d/a/j/e$d;)Lc/d/a/j/e;` @kind virtual;
  #L161676.  v4:= temp @kind object;
  #L161678.  call temp:= `a`(v0, v4) @signature `Lc/d/a/e;.a:(Ljava/lang/Object;)Lc/d/a/i;` @kind virtual;
  #L16167e.  v12:= temp @kind object;
  #L161680.  v4:= `@@c.d.a.j.e$d.f` @type ^`c.d.a.j.e$d` @kind object;
  #L161684.  call temp:= `a`(v2, v4) @signature `Lc/d/a/j/f;.a:(Lc/d/a/j/e$d;)Lc/d/a/j/e;` @kind virtual;
  #L16168a.  v2:= temp @kind object;
  #L16168c.  call temp:= `a`(v0, v2) @signature `Lc/d/a/e;.a:(Ljava/lang/Object;)Lc/d/a/i;` @kind virtual;
  #L161692.  v10:= temp @kind object;
  #L161694.  call temp:= `b`(v18) @signature `Lc/d/a/e;.b:()Lc/d/a/b;` @kind virtual;
  #L16169a.  v2:= temp @kind object;
  #L16169c.  v4:= v21;
  #L1616a0.  v13:= (`double`) v4 @kind f2d;
  #L1616a2.  call temp:= `sin`(v13) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L1616a8.  v15:= temp @kind wide;
  #L1616aa.  v4:= v22;
  #L1616ae.  v17:= v3 @kind object;
  #L1616b2.  v3:= (`double`) v4 @kind i2d;
  #L1616b4.  v19:= v12 @kind object;
  #L1616b8.  v11:= v15 * v3 @kind double;
  #L1616bc.  v11:= (`float`) v11 @kind d2f;
  #L1616be.  v6:= v2 @kind object;
  #L1616c0.  call temp:= `b`(v6, v7, v8, v9, v10, v11) @signature `Lc/d/a/b;.b:(Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;F)Lc/d/a/b;` @kind virtual;
  #L1616c6.  call `a`(v0, v2) @signature `Lc/d/a/e;.a:(Lc/d/a/b;)V` @kind virtual;
  #L1616cc.  call temp:= `b`(v18) @signature `Lc/d/a/e;.b:()Lc/d/a/b;` @kind virtual;
  #L1616d2.  v2:= temp @kind object;
  #L1616d4.  call temp:= `cos`(v13) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L1616da.  v6:= temp @kind wide;
  #L1616dc.  v6:= v6 * v3 @kind double;
  #L1616e0.  v9:= (`float`) v6 @kind d2f;
  #L1616e2.  v4:= v2 @kind object;
  #L1616e4.  v6:= v17 @kind object;
  #L1616e8.  v7:= v1 @kind object;
  #L1616ea.  v8:= v19 @kind object;
  #L1616ee.  call temp:= `b`(v4, v5, v6, v7, v8, v9) @signature `Lc/d/a/b;.b:(Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;F)Lc/d/a/b;` @kind virtual;
  #L1616f4.  call `a`(v0, v2) @signature `Lc/d/a/e;.a:(Lc/d/a/b;)V` @kind virtual;
  #L1616fa.  return @kind void;
}
procedure `int` `b`(`c.d.a.e` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/d/a/e;.b:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L161394.  v2:= (`c.d.a.j.e`) v2 @kind object;
  #L161398.  call temp:= `e`(v2) @signature `Lc/d/a/j/e;.e:()Lc/d/a/i;` @kind virtual;
  #L16139e.  v2:= temp @kind object;
  #L1613a0.  if v2 == 0 then goto L1613b2;
  #L1613a4.  v2:= v2.`c.d.a.i.e` @type ^`float`;
  #L1613a8.  v0:= 0.5F;
  #L1613ac.  v2:= v2 + v0 @kind float;
  #L1613ae.  v2:= (`int`) v2 @kind f2i;
  #L1613b0.  return v2;
  #L1613b2.  v2:= 0I;
  #L1613b4.  return v2;
}
procedure `c.d.a.b` `b`(`c.d.a.e` v2 @kind this) @signature `Lc/d/a/e;.b:()Lc/d/a/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L160e84.  v0:= v2.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L160e88.  v0:= v0.`c.d.a.c.a` @type ^`c.d.a.g` @kind object;
  #L160e8c.  call temp:= `a`(v0) @signature `Lc/d/a/g;.a:()Ljava/lang/Object;` @kind interface;
  #L160e92.  v0:= temp @kind object;
  #L160e94.  v0:= (`c.d.a.b`) v0 @kind object;
  #L160e98.  if v0 != 0 then goto L160eac;
  #L160e9c.  v0:= new `c.d.a.b`;
  #L160ea0.  v1:= v2.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L160ea4.  call `<init>`(v0, v1) @signature `Lc/d/a/b;.<init>:(Lc/d/a/c;)V` @kind direct;
  #L160eaa.  goto L160eb2;
  #L160eac.  call `d`(v0) @signature `Lc/d/a/b;.d:()V` @kind virtual;
  #L160eb2.  call `b`() @signature `Lc/d/a/i;.b:()V` @kind static;
  #L160eb8.  return v0 @kind object;
}
procedure `void` `b`(`c.d.a.e` v3 @kind this, `c.d.a.i` v4 @kind object, `c.d.a.i` v5 @kind object, `int` v6 , `int` v7 ) @signature `Lc/d/a/e;.b:(Lc/d/a/i;Lc/d/a/i;II)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L161964.  call temp:= `b`(v3) @signature `Lc/d/a/e;.b:()Lc/d/a/b;` @kind virtual;
  #L16196a.  v0:= temp @kind object;
  #L16196c.  call temp:= `c`(v3) @signature `Lc/d/a/e;.c:()Lc/d/a/i;` @kind virtual;
  #L161972.  v1:= temp @kind object;
  #L161974.  v2:= 0I;
  #L161976.  v1.`c.d.a.i.d` @type ^`int` := v2;
  #L16197a.  call temp:= `a`(v0, v4, v5, v1, v6) @signature `Lc/d/a/b;.a:(Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;I)Lc/d/a/b;` @kind virtual;
  #L161980.  v4:= 6I;
  #L161982.  if v7 == v4 then goto L1619a2;
  #L161986.  v4:= v0.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L16198a.  call temp:= `b`(v4, v1) @signature `Lc/d/a/a;.b:(Lc/d/a/i;)F` @kind virtual;
  #L161990.  v4:= temp;
  #L161992.  v5:= -1.0F;
  #L161996.  v4:= v4 * v5 @kind float;
  #L16199a.  v4:= (`int`) v4 @kind f2i;
  #L16199c.  call `a`(v3, v0, v4, v7) @signature `Lc/d/a/e;.a:(Lc/d/a/b;II)V` @kind virtual;
  #L1619a2.  call `a`(v3, v0) @signature `Lc/d/a/e;.a:(Lc/d/a/b;)V` @kind virtual;
  #L1619a8.  return @kind void;
}
procedure `void` `b`(`c.d.a.e` v3 @kind this, `c.d.a.i` v4 @kind object, `c.d.a.i` v5 @kind object, `boolean` v6 ) @signature `Lc/d/a/e;.b:(Lc/d/a/i;Lc/d/a/i;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1619bc.  call temp:= `b`(v3) @signature `Lc/d/a/e;.b:()Lc/d/a/b;` @kind virtual;
  #L1619c2.  v0:= temp @kind object;
  #L1619c4.  call temp:= `c`(v3) @signature `Lc/d/a/e;.c:()Lc/d/a/i;` @kind virtual;
  #L1619ca.  v1:= temp @kind object;
  #L1619cc.  v2:= 0I;
  #L1619ce.  v1.`c.d.a.i.d` @type ^`int` := v2;
  #L1619d2.  call temp:= `b`(v0, v4, v5, v1, v2) @signature `Lc/d/a/b;.b:(Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;I)Lc/d/a/b;` @kind virtual;
  #L1619d8.  if v6 == 0 then goto L1619fa;
  #L1619dc.  v4:= v0.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1619e0.  call temp:= `b`(v4, v1) @signature `Lc/d/a/a;.b:(Lc/d/a/i;)F` @kind virtual;
  #L1619e6.  v4:= temp;
  #L1619e8.  v5:= -1.0F;
  #L1619ec.  v4:= v4 * v5 @kind float;
  #L1619f0.  v4:= (`int`) v4 @kind f2i;
  #L1619f2.  v5:= 1I;
  #L1619f4.  call `a`(v3, v0, v4, v5) @signature `Lc/d/a/e;.a:(Lc/d/a/b;II)V` @kind virtual;
  #L1619fa.  call `a`(v3, v0) @signature `Lc/d/a/e;.a:(Lc/d/a/b;)V` @kind virtual;
  #L161a00.  return @kind void;
}
procedure `c.d.a.i` `c`(`c.d.a.e` v5 @kind this) @signature `Lc/d/a/e;.c:()Lc/d/a/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L161168.  v0:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L16116c.  if v0 == 0 then goto L16117e;
  #L161170.  v1:= v0.`c.d.a.f.m` @type ^`long` @kind wide;
  #L161174.  v3:= 1L;
  #L161178.  v1:= v1 + v3 @kind long;
  #L16117a.  v0.`c.d.a.f.m` @type ^`long` := v1 @kind wide;
  #L16117e.  v0:= v5.`c.d.a.e.i` @type ^`int`;
  #L161182.  v0:= v0 + 1;
  #L161186.  v1:= v5.`c.d.a.e.e` @type ^`int`;
  #L16118a.  if v0 < v1 then goto L161194;
  #L16118e.  call `i`(v5) @signature `Lc/d/a/e;.i:()V` @kind direct;
  #L161194.  v0:= `@@c.d.a.i$a.d` @type ^`c.d.a.i$a` @kind object;
  #L161198.  v1:= 0I;
  #L16119a.  call temp:= `a`(v5, v0, v1) @signature `Lc/d/a/e;.a:(Lc/d/a/i$a;Ljava/lang/String;)Lc/d/a/i;` @kind direct;
  #L1611a0.  v0:= temp @kind object;
  #L1611a2.  v1:= v5.`c.d.a.e.a` @type ^`int`;
  #L1611a6.  v1:= v1 + 1;
  #L1611aa.  v5.`c.d.a.e.a` @type ^`int` := v1;
  #L1611ae.  v1:= v5.`c.d.a.e.i` @type ^`int`;
  #L1611b2.  v1:= v1 + 1;
  #L1611b6.  v5.`c.d.a.e.i` @type ^`int` := v1;
  #L1611ba.  v1:= v5.`c.d.a.e.a` @type ^`int`;
  #L1611be.  v0.`c.d.a.i.b` @type ^`int` := v1;
  #L1611c2.  v2:= v5.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L1611c6.  v2:= v2.`c.d.a.c.c` @type ^`c.d.a.i`[] @kind object;
  #L1611ca.  v2[v1]:= v0 @kind object;
  #L1611ce.  return v0 @kind object;
}
procedure `void` `c`(`c.d.a.e` v3 @kind this, `c.d.a.i` v4 @kind object, `c.d.a.i` v5 @kind object, `int` v6 , `int` v7 ) @signature `Lc/d/a/e;.c:(Lc/d/a/i;Lc/d/a/i;II)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L161a14.  call temp:= `b`(v3) @signature `Lc/d/a/e;.b:()Lc/d/a/b;` @kind virtual;
  #L161a1a.  v0:= temp @kind object;
  #L161a1c.  call temp:= `c`(v3) @signature `Lc/d/a/e;.c:()Lc/d/a/i;` @kind virtual;
  #L161a22.  v1:= temp @kind object;
  #L161a24.  v2:= 0I;
  #L161a26.  v1.`c.d.a.i.d` @type ^`int` := v2;
  #L161a2a.  call temp:= `b`(v0, v4, v5, v1, v6) @signature `Lc/d/a/b;.b:(Lc/d/a/i;Lc/d/a/i;Lc/d/a/i;I)Lc/d/a/b;` @kind virtual;
  #L161a30.  v4:= 6I;
  #L161a32.  if v7 == v4 then goto L161a52;
  #L161a36.  v4:= v0.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L161a3a.  call temp:= `b`(v4, v1) @signature `Lc/d/a/a;.b:(Lc/d/a/i;)F` @kind virtual;
  #L161a40.  v4:= temp;
  #L161a42.  v5:= -1.0F;
  #L161a46.  v4:= v4 * v5 @kind float;
  #L161a4a.  v4:= (`int`) v4 @kind f2i;
  #L161a4c.  call `a`(v3, v0, v4, v7) @signature `Lc/d/a/e;.a:(Lc/d/a/b;II)V` @kind virtual;
  #L161a52.  call `a`(v3, v0) @signature `Lc/d/a/e;.a:(Lc/d/a/b;)V` @kind virtual;
  #L161a58.  return @kind void;
}
procedure `c.d.a.c` `d`(`c.d.a.e` v1 @kind this) @signature `Lc/d/a/e;.d:()Lc/d/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160ef8.  v0:= v1.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L160efc.  return v0 @kind object;
}
procedure `void` `e`(`c.d.a.e` v5 @kind this) @signature `Lc/d/a/e;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L161bfc.  v0:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L161c00.  v1:= 1L;
  #L161c04.  if v0 == 0 then goto L161c12;
  #L161c08.  v3:= v0.`c.d.a.f.e` @type ^`long` @kind wide;
  #L161c0c.  v3:= v3 + v1 @kind long;
  #L161c0e.  v0.`c.d.a.f.e` @type ^`long` := v3 @kind wide;
  #L161c12.  v0:= v5.`c.d.a.e.g` @type ^`boolean` @kind boolean;
  #L161c16.  if v0 == 0 then goto L161c72;
  #L161c1a.  v0:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L161c1e.  if v0 == 0 then goto L161c2c;
  #L161c22.  v3:= v0.`c.d.a.f.q` @type ^`long` @kind wide;
  #L161c26.  v3:= v3 + v1 @kind long;
  #L161c28.  v0.`c.d.a.f.q` @type ^`long` := v3 @kind wide;
  #L161c2c.  v0:= 0I;
  #L161c2e.  v3:= 0I;
  #L161c30.  v4:= v5.`c.d.a.e.j` @type ^`int`;
  #L161c34.  if v3 >= v4 then goto L161c50;
  #L161c38.  v4:= v5.`c.d.a.e.f` @type ^`c.d.a.b`[] @kind object;
  #L161c3c.  v4:= v4[v3] @kind object;
  #L161c40.  v4:= v4.`c.d.a.b.e` @type ^`boolean` @kind boolean;
  #L161c44.  if v4 != 0 then goto L161c4a;
  #L161c48.  goto L161c52;
  #L161c4a.  v3:= v3 + 1;
  #L161c4e.  goto L161c30;
  #L161c50.  v0:= 1I;
  #L161c52.  if v0 != 0 then goto L161c58;
  #L161c56.  goto L161c72;
  #L161c58.  v0:= `@@c.d.a.e.q` @type ^`c.d.a.f` @kind object;
  #L161c5c.  if v0 == 0 then goto L161c6a;
  #L161c60.  v3:= v0.`c.d.a.f.p` @type ^`long` @kind wide;
  #L161c64.  v3:= v3 + v1 @kind long;
  #L161c66.  v0.`c.d.a.f.p` @type ^`long` := v3 @kind wide;
  #L161c6a.  call `g`(v5) @signature `Lc/d/a/e;.g:()V` @kind direct;
  #L161c70.  goto L161c7c;
  #L161c72.  v0:= v5.`c.d.a.e.c` @type ^`c.d.a.e$a` @kind object;
  #L161c76.  call `a`(v5, v0) @signature `Lc/d/a/e;.a:(Lc/d/a/e$a;)V` @kind virtual;
  #L161c7c.  return @kind void;
}
procedure `void` `f`(`c.d.a.e` v5 @kind this) @signature `Lc/d/a/e;.f:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L161d4c.  v0:= 0I;
  #L161d4e.  v1:= 0I;
  #L161d50.  v2:= v5.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L161d54.  v3:= v2.`c.d.a.c.c` @type ^`c.d.a.i`[] @kind object;
  #L161d58.  v4:= length @variable v3;
  #L161d5a.  if v1 >= v4 then goto L161d72;
  #L161d5e.  v2:= v3[v1] @kind object;
  #L161d62.  if v2 == 0 then goto L161d6c;
  #L161d66.  call `a`(v2) @signature `Lc/d/a/i;.a:()V` @kind virtual;
  #L161d6c.  v1:= v1 + 1;
  #L161d70.  goto L161d50;
  #L161d72.  v1:= v2.`c.d.a.c.b` @type ^`c.d.a.g` @kind object;
  #L161d76.  v2:= v5.`c.d.a.e.m` @type ^`c.d.a.i`[] @kind object;
  #L161d7a.  v3:= v5.`c.d.a.e.n` @type ^`int`;
  #L161d7e.  call `a`(v1, v2, v3) @signature `Lc/d/a/g;.a:([Ljava/lang/Object;I)V` @kind interface;
  #L161d84.  v5.`c.d.a.e.n` @type ^`int` := v0;
  #L161d88.  v1:= v5.`c.d.a.e.l` @type ^`c.d.a.c` @kind object;
  #L161d8c.  v1:= v1.`c.d.a.c.c` @type ^`c.d.a.i`[] @kind object;
  #L161d90.  v2:= 0I;
  #L161d92.  call `fill`(v1, v2) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L161d98.  v1:= v5.`c.d.a.e.b` @type ^`java.util.HashMap` @kind object;
  #L161d9c.  if v1 == 0 then goto L161da6;
  #L161da0.  call `clear`(v1) @signature `Ljava/util/HashMap;.clear:()V` @kind virtual;
  #L161da6.  v5.`c.d.a.e.a` @type ^`int` := v0;
  #L161daa.  v1:= v5.`c.d.a.e.c` @type ^`c.d.a.e$a` @kind object;
  #L161dae.  call `clear`(v1) @signature `Lc/d/a/e$a;.clear:()V` @kind interface;
  #L161db4.  v1:= 1I;
  #L161db6.  v5.`c.d.a.e.i` @type ^`int` := v1;
  #L161dba.  v1:= 0I;
  #L161dbc.  v2:= v5.`c.d.a.e.j` @type ^`int`;
  #L161dc0.  if v1 >= v2 then goto L161dd6;
  #L161dc4.  v2:= v5.`c.d.a.e.f` @type ^`c.d.a.b`[] @kind object;
  #L161dc8.  v2:= v2[v1] @kind object;
  #L161dcc.  v2.`c.d.a.b.c` @type ^`boolean` := v0 @kind boolean;
  #L161dd0.  v1:= v1 + 1;
  #L161dd4.  goto L161dbc;
  #L161dd6.  call `j`(v5) @signature `Lc/d/a/e;.j:()V` @kind direct;
  #L161ddc.  v5.`c.d.a.e.j` @type ^`int` := v0;
  #L161de0.  return @kind void;
}
