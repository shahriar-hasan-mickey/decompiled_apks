record `c.d.a.h` @kind class @AccessFlag  extends `c.d.a.g` @kind interface {
  `java.lang.Object`[] `c.d.a.h.a` @AccessFlag PRIVATE_FINAL;
  `int` `c.d.a.h.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.d.a.h` v1 @kind this, `int` v2 ) @signature `Lc/d/a/h;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L161e98.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L161e9e.  if v2 <= 0 then goto L161eac;
  #L161ea2.  v2:= new `java.lang.Object`[v2];
  #L161ea6.  v1.`c.d.a.h.a` @type ^`java.lang.Object`[] := v2 @kind object;
  #L161eaa.  return @kind void;
  #L161eac.  v2:= new `java.lang.IllegalArgumentException`;
  #L161eb0.  v0:= "The max pool size must be > 0" @kind object;
  #L161eb4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L161eba.  throw v2;
}
procedure `java.lang.Object` `a`(`c.d.a.h` v5 @kind this) @signature `Lc/d/a/h;.a:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L161e60.  v0:= v5.`c.d.a.h.b` @type ^`int`;
  #L161e64.  v1:= 0I;
  #L161e66.  if v0 <= 0 then goto L161e84;
  #L161e6a.  v2:= v0 + -1;
  #L161e6e.  v3:= v5.`c.d.a.h.a` @type ^`java.lang.Object`[] @kind object;
  #L161e72.  v4:= v3[v2] @kind object;
  #L161e76.  v3[v2]:= v1 @kind object;
  #L161e7a.  v0:= v0 + -1;
  #L161e7e.  v5.`c.d.a.h.b` @type ^`int` := v0;
  #L161e82.  return v4 @kind object;
  #L161e84.  return v1 @kind object;
}
procedure `void` `a`(`c.d.a.h` v5 @kind this, `java.lang.Object`[] v6 @kind object, `int` v7 ) @signature `Lc/d/a/h;.a:([Ljava/lang/Object;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L161ecc.  v0:= length @variable v6;
  #L161ece.  if v7 <= v0 then goto L161ed4;
  #L161ed2.  v7:= length @variable v6;
  #L161ed4.  v0:= 0I;
  #L161ed6.  if v0 >= v7 then goto L161efe;
  #L161eda.  v1:= v6[v0] @kind object;
  #L161ede.  v2:= v5.`c.d.a.h.b` @type ^`int`;
  #L161ee2.  v3:= v5.`c.d.a.h.a` @type ^`java.lang.Object`[] @kind object;
  #L161ee6.  v4:= length @variable v3;
  #L161ee8.  if v2 >= v4 then goto L161ef8;
  #L161eec.  v3[v2]:= v1 @kind object;
  #L161ef0.  v2:= v2 + 1;
  #L161ef4.  v5.`c.d.a.h.b` @type ^`int` := v2;
  #L161ef8.  v0:= v0 + 1;
  #L161efc.  goto L161ed6;
  #L161efe.  return @kind void;
}
procedure `boolean` `a`(`c.d.a.h` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lc/d/a/h;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L161e30.  v0:= v3.`c.d.a.h.b` @type ^`int`;
  #L161e34.  v1:= v3.`c.d.a.h.a` @type ^`java.lang.Object`[] @kind object;
  #L161e38.  v2:= length @variable v1;
  #L161e3a.  if v0 >= v2 then goto L161e4c;
  #L161e3e.  v1[v0]:= v4 @kind object;
  #L161e42.  v4:= 1I;
  #L161e44.  v0:= v0 + v4 @kind int;
  #L161e46.  v3.`c.d.a.h.b` @type ^`int` := v0;
  #L161e4a.  return v4;
  #L161e4c.  v4:= 0I;
  #L161e4e.  return v4;
}
