record `c.d.a.i` @kind class @AccessFlag PUBLIC {
  `java.lang.String` `c.d.a.i.a` @AccessFlag PRIVATE;
  `int` `c.d.a.i.b` @AccessFlag PUBLIC;
  `int` `c.d.a.i.c` @AccessFlag ;
  `int` `c.d.a.i.d` @AccessFlag PUBLIC;
  `float` `c.d.a.i.e` @AccessFlag PUBLIC;
  `float`[] `c.d.a.i.f` @AccessFlag ;
  `c.d.a.i$a` `c.d.a.i.g` @AccessFlag ;
  `c.d.a.b`[] `c.d.a.i.h` @AccessFlag ;
  `int` `c.d.a.i.i` @AccessFlag ;
  `int` `c.d.a.i.j` @AccessFlag PUBLIC;
}
global `int` `@@c.d.a.i.k` @AccessFlag PRIVATE_STATIC;
procedure `void` `<init>`(`c.d.a.i` v1 @kind this, `c.d.a.i$a` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lc/d/a/i;.<init>:(Lc/d/a/i$a;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L162050.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L162056.  v3:= -1I;
  #L162058.  v1.`c.d.a.i.b` @type ^`int` := v3;
  #L16205c.  v1.`c.d.a.i.c` @type ^`int` := v3;
  #L162060.  v3:= 0I;
  #L162062.  v1.`c.d.a.i.d` @type ^`int` := v3;
  #L162066.  v0:= 7I;
  #L162068.  v0:= new `float`[v0];
  #L16206c.  v1.`c.d.a.i.f` @type ^`float`[] := v0 @kind object;
  #L162070.  v0:= 8I;
  #L162074.  v0:= new `c.d.a.b`[v0];
  #L162078.  v1.`c.d.a.i.h` @type ^`c.d.a.b`[] := v0 @kind object;
  #L16207c.  v1.`c.d.a.i.i` @type ^`int` := v3;
  #L162080.  v1.`c.d.a.i.j` @type ^`int` := v3;
  #L162084.  v1.`c.d.a.i.g` @type ^`c.d.a.i$a` := v2 @kind object;
  #L162088.  return @kind void;
}
procedure `void` `b`() @signature `Lc/d/a/i;.b:()V` @AccessFlag STATIC {
    temp;
    v0;

  #L162100.  v0:= `@@c.d.a.i.k` @type ^`int`;
  #L162104.  v0:= v0 + 1;
  #L162108.  `@@c.d.a.i.k` @type ^`int` := v0;
  #L16210c.  return @kind void;
}
procedure `void` `a`(`c.d.a.i` v2 @kind this) @signature `Lc/d/a/i;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L162184.  v0:= 0I;
  #L162186.  v2.`c.d.a.i.a` @type ^`java.lang.String` := v0 @kind object;
  #L16218a.  v0:= `@@c.d.a.i$a.f` @type ^`c.d.a.i$a` @kind object;
  #L16218e.  v2.`c.d.a.i.g` @type ^`c.d.a.i$a` := v0 @kind object;
  #L162192.  v0:= 0I;
  #L162194.  v2.`c.d.a.i.d` @type ^`int` := v0;
  #L162198.  v1:= -1I;
  #L16219a.  v2.`c.d.a.i.b` @type ^`int` := v1;
  #L16219e.  v2.`c.d.a.i.c` @type ^`int` := v1;
  #L1621a2.  v1:= 0I;
  #L1621a4.  v2.`c.d.a.i.e` @type ^`float` := v1;
  #L1621a8.  v2.`c.d.a.i.i` @type ^`int` := v0;
  #L1621ac.  v2.`c.d.a.i.j` @type ^`int` := v0;
  #L1621b0.  return @kind void;
}
procedure `void` `a`(`c.d.a.i` v3 @kind this, `c.d.a.b` v4 @kind object) @signature `Lc/d/a/i;.a:(Lc/d/a/b;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L16209c.  v0:= 0I;
  #L16209e.  v1:= v3.`c.d.a.i.i` @type ^`int`;
  #L1620a2.  if v0 >= v1 then goto L1620ba;
  #L1620a6.  v1:= v3.`c.d.a.i.h` @type ^`c.d.a.b`[] @kind object;
  #L1620aa.  v1:= v1[v0] @kind object;
  #L1620ae.  if v1 != v4 then goto L1620b4;
  #L1620b2.  return @kind void;
  #L1620b4.  v0:= v0 + 1;
  #L1620b8.  goto L16209e;
  #L1620ba.  v0:= v3.`c.d.a.i.h` @type ^`c.d.a.b`[] @kind object;
  #L1620be.  v2:= length @variable v0;
  #L1620c0.  if v1 < v2 then goto L1620da;
  #L1620c4.  v1:= length @variable v0;
  #L1620c6.  v1:= v1 * 2;
  #L1620ca.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L1620d0.  v0:= temp @kind object;
  #L1620d2.  v0:= (`c.d.a.b`[]) v0 @kind object;
  #L1620d6.  v3.`c.d.a.i.h` @type ^`c.d.a.b`[] := v0 @kind object;
  #L1620da.  v0:= v3.`c.d.a.i.h` @type ^`c.d.a.b`[] @kind object;
  #L1620de.  v1:= v3.`c.d.a.i.i` @type ^`int`;
  #L1620e2.  v0[v1]:= v4 @kind object;
  #L1620e6.  v1:= v1 + 1;
  #L1620ea.  v3.`c.d.a.i.i` @type ^`int` := v1;
  #L1620ee.  return @kind void;
}
procedure `void` `a`(`c.d.a.i` v0 @kind this, `c.d.a.i$a` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lc/d/a/i;.a:(Lc/d/a/i$a;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L1621c4.  v0.`c.d.a.i.g` @type ^`c.d.a.i$a` := v1 @kind object;
  #L1621c8.  return @kind void;
}
procedure `void` `b`(`c.d.a.i` v5 @kind this, `c.d.a.b` v6 @kind object) @signature `Lc/d/a/i;.b:(Lc/d/a/b;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L162120.  v0:= v5.`c.d.a.i.i` @type ^`int`;
  #L162124.  v1:= 0I;
  #L162126.  v2:= 0I;
  #L162128.  if v2 >= v0 then goto L162172;
  #L16212c.  v3:= v5.`c.d.a.i.h` @type ^`c.d.a.b`[] @kind object;
  #L162130.  v3:= v3[v2] @kind object;
  #L162134.  if v3 != v6 then goto L16216c;
  #L162138.  v6:= v0 - v2 @kind int;
  #L16213c.  v6:= v6 + -1;
  #L162140.  if v1 >= v6 then goto L16215e;
  #L162144.  v6:= v5.`c.d.a.i.h` @type ^`c.d.a.b`[] @kind object;
  #L162148.  v3:= v2 + v1 @kind int;
  #L16214c.  v4:= v3 + 1;
  #L162150.  v4:= v6[v4] @kind object;
  #L162154.  v6[v3]:= v4 @kind object;
  #L162158.  v1:= v1 + 1;
  #L16215c.  goto L162138;
  #L16215e.  v6:= v5.`c.d.a.i.i` @type ^`int`;
  #L162162.  v6:= v6 + -1;
  #L162166.  v5.`c.d.a.i.i` @type ^`int` := v6;
  #L16216a.  return @kind void;
  #L16216c.  v2:= v2 + 1;
  #L162170.  goto L162128;
  #L162172.  return @kind void;
}
procedure `void` `c`(`c.d.a.i` v5 @kind this, `c.d.a.b` v6 @kind object) @signature `Lc/d/a/i;.c:(Lc/d/a/b;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1621dc.  v0:= v5.`c.d.a.i.i` @type ^`int`;
  #L1621e0.  v1:= 0I;
  #L1621e2.  v2:= 0I;
  #L1621e4.  if v2 >= v0 then goto L162204;
  #L1621e8.  v3:= v5.`c.d.a.i.h` @type ^`c.d.a.b`[] @kind object;
  #L1621ec.  v4:= v3[v2] @kind object;
  #L1621f0.  v4:= v4.`c.d.a.b.d` @type ^`c.d.a.a` @kind object;
  #L1621f4.  v3:= v3[v2] @kind object;
  #L1621f8.  call `a`(v4, v3, v6, v1) @signature `Lc/d/a/a;.a:(Lc/d/a/b;Lc/d/a/b;Z)V` @kind virtual;
  #L1621fe.  v2:= v2 + 1;
  #L162202.  goto L1621e4;
  #L162204.  v5.`c.d.a.i.i` @type ^`int` := v1;
  #L162208.  return @kind void;
}
procedure `java.lang.String` `toString`(`c.d.a.i` v2 @kind this) @signature `Lc/d/a/i;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L162018.  v0:= new `java.lang.StringBuilder`;
  #L16201c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L162022.  v1:= "" @kind object;
  #L162026.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16202c.  v1:= v2.`c.d.a.i.a` @type ^`java.lang.String` @kind object;
  #L162030.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162036.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16203c.  v0:= temp @kind object;
  #L16203e.  return v0 @kind object;
}
