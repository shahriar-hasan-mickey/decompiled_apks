record `com.squareup.okhttp.ConnectionPool` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.LinkedList` `com.squareup.okhttp.ConnectionPool.connections` @AccessFlag PRIVATE_FINAL;
  `java.lang.Runnable` `com.squareup.okhttp.ConnectionPool.connectionsCleanupRunnable` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.Executor` `com.squareup.okhttp.ConnectionPool.executor` @AccessFlag PRIVATE;
  `long` `com.squareup.okhttp.ConnectionPool.keepAliveDurationNs` @AccessFlag PRIVATE_FINAL;
  `int` `com.squareup.okhttp.ConnectionPool.maxIdleConnections` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@com.squareup.okhttp.ConnectionPool.DEFAULT_KEEP_ALIVE_DURATION_MS` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.squareup.okhttp.ConnectionPool` `@@com.squareup.okhttp.ConnectionPool.systemDefault` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/squareup/okhttp/ConnectionPool;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.squareup.okhttp.ConnectionPool` v9 @kind this, `int` v10 , `long` v11 ) @signature `Lcom/squareup/okhttp/ConnectionPool;.<init>:(IJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `access$000`(`com.squareup.okhttp.ConnectionPool` v0 @kind object) @signature `Lcom/squareup/okhttp/ConnectionPool;.access$000:(Lcom/squareup/okhttp/ConnectionPool;)V` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `addConnection`(`com.squareup.okhttp.ConnectionPool` v2 @kind this, `com.squareup.okhttp.Connection` v3 @kind object) @signature `Lcom/squareup/okhttp/ConnectionPool;.addConnection:(Lcom/squareup/okhttp/Connection;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `com.squareup.okhttp.ConnectionPool` `getDefault`() @signature `Lcom/squareup/okhttp/ConnectionPool;.getDefault:()Lcom/squareup/okhttp/ConnectionPool;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `runCleanupUntilPoolIsEmpty`(`com.squareup.okhttp.ConnectionPool` v1 @kind this) @signature `Lcom/squareup/okhttp/ConnectionPool;.runCleanupUntilPoolIsEmpty:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `evictAll`(`com.squareup.okhttp.ConnectionPool` v4 @kind this) @signature `Lcom/squareup/okhttp/ConnectionPool;.evictAll:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `com.squareup.okhttp.Connection` `get`(`com.squareup.okhttp.ConnectionPool` v8 @kind this, `com.squareup.okhttp.Address` v9 @kind object) @signature `Lcom/squareup/okhttp/ConnectionPool;.get:(Lcom/squareup/okhttp/Address;)Lcom/squareup/okhttp/Connection;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getConnectionCount`(`com.squareup.okhttp.ConnectionPool` v1 @kind this) @signature `Lcom/squareup/okhttp/ConnectionPool;.getConnectionCount:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.List` `getConnections`(`com.squareup.okhttp.ConnectionPool` v2 @kind this) @signature `Lcom/squareup/okhttp/ConnectionPool;.getConnections:()Ljava/util/List;` @AccessFlag  {

  # return;
}
procedure `int` `getHttpConnectionCount`(`com.squareup.okhttp.ConnectionPool` v2 @kind this) @signature `Lcom/squareup/okhttp/ConnectionPool;.getHttpConnectionCount:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getMultiplexedConnectionCount`(`com.squareup.okhttp.ConnectionPool` v3 @kind this) @signature `Lcom/squareup/okhttp/ConnectionPool;.getMultiplexedConnectionCount:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getSpdyConnectionCount`(`com.squareup.okhttp.ConnectionPool` v1 @kind this) @signature `Lcom/squareup/okhttp/ConnectionPool;.getSpdyConnectionCount:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `performCleanup`(`com.squareup.okhttp.ConnectionPool` v14 @kind this) @signature `Lcom/squareup/okhttp/ConnectionPool;.performCleanup:()Z` @AccessFlag  {

  # return;
}
procedure `void` `recycle`(`com.squareup.okhttp.ConnectionPool` v4 @kind this, `com.squareup.okhttp.Connection` v5 @kind object) @signature `Lcom/squareup/okhttp/ConnectionPool;.recycle:(Lcom/squareup/okhttp/Connection;)V` @AccessFlag  {

  # return;
}
procedure `void` `replaceCleanupExecutorForTests`(`com.squareup.okhttp.ConnectionPool` v0 @kind this, `java.util.concurrent.Executor` v1 @kind object) @signature `Lcom/squareup/okhttp/ConnectionPool;.replaceCleanupExecutorForTests:(Ljava/util/concurrent/Executor;)V` @AccessFlag  {

  # return;
}
procedure `void` `share`(`com.squareup.okhttp.ConnectionPool` v1 @kind this, `com.squareup.okhttp.Connection` v2 @kind object) @signature `Lcom/squareup/okhttp/ConnectionPool;.share:(Lcom/squareup/okhttp/Connection;)V` @AccessFlag  {

  # return;
}
