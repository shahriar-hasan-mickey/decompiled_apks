record `androidx.room.p` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `java.util.concurrent.atomic.AtomicBoolean` `androidx.room.p.a` @AccessFlag PRIVATE_FINAL;
  `androidx.room.j` `androidx.room.p.b` @AccessFlag PRIVATE_FINAL;
  `c.r.a.f` `androidx.room.p.c` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`androidx.room.p` v2 @kind this, `androidx.room.j` v3 @kind object) @signature `Landroidx/room/p;.<init>:(Landroidx/room/j;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `c.r.a.f` `a`(`androidx.room.p` v2 @kind this) @signature `Landroidx/room/p;.a:()Lc/r/a/f;` @AccessFlag PRIVATE {

  # return;
}
procedure `c.r.a.f` `a`(`androidx.room.p` v0 @kind this, `boolean` v1 ) @signature `Landroidx/room/p;.a:(Z)Lc/r/a/f;` @AccessFlag PRIVATE {

  # return;
}
procedure `c.r.a.f` `acquire`(`androidx.room.p` v3 @kind this) @signature `Landroidx/room/p;.acquire:()Lc/r/a/f;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `assertNotMainThread`(`androidx.room.p` v1 @kind this) @signature `Landroidx/room/p;.assertNotMainThread:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `java.lang.String` `createQuery`() @signature `Landroidx/room/p;.createQuery:()Ljava/lang/String;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `release`(`androidx.room.p` v1 @kind this, `c.r.a.f` v2 @kind object) @signature `Landroidx/room/p;.release:(Lc/r/a/f;)V` @AccessFlag PUBLIC {

  # return;
}
