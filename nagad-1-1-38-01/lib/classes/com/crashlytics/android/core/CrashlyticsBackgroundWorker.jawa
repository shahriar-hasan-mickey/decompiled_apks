record `com.crashlytics.android.core.CrashlyticsBackgroundWorker` @kind class @AccessFlag  {
  `java.util.concurrent.ExecutorService` `com.crashlytics.android.core.CrashlyticsBackgroundWorker.executorService` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.crashlytics.android.core.CrashlyticsBackgroundWorker` v0 @kind this, `java.util.concurrent.ExecutorService` v1 @kind object) @signature `Lcom/crashlytics/android/core/CrashlyticsBackgroundWorker;.<init>:(Ljava/util/concurrent/ExecutorService;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `java.util.concurrent.Future` `submit`(`com.crashlytics.android.core.CrashlyticsBackgroundWorker` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lcom/crashlytics/android/core/CrashlyticsBackgroundWorker;.submit:(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;` @AccessFlag  {

  # return;
}
procedure `java.util.concurrent.Future` `submit`(`com.crashlytics.android.core.CrashlyticsBackgroundWorker` v2 @kind this, `java.util.concurrent.Callable` v3 @kind object) @signature `Lcom/crashlytics/android/core/CrashlyticsBackgroundWorker;.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;` @AccessFlag  {

  # return;
}
procedure `java.lang.Object` `submitAndWait`(`com.crashlytics.android.core.CrashlyticsBackgroundWorker` v5 @kind this, `java.util.concurrent.Callable` v6 @kind object) @signature `Lcom/crashlytics/android/core/CrashlyticsBackgroundWorker;.submitAndWait:(Ljava/util/concurrent/Callable;)Ljava/lang/Object;` @AccessFlag  {

  # return;
}
