record `com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy` @kind class @AccessFlag  extends `com.crashlytics.android.answers.SessionAnalyticsManagerStrategy` @kind interface {
  `io.fabric.sdk.android.m.b.g` `com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.apiKey` @AccessFlag ;
  `android.content.Context` `com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.context` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.customEventsEnabled` @AccessFlag ;
  `com.crashlytics.android.answers.EventFilter` `com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.eventFilter` @AccessFlag ;
  `java.util.concurrent.ScheduledExecutorService` `com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.executorService` @AccessFlag PRIVATE_FINAL;
  `com.crashlytics.android.answers.SessionAnalyticsFilesManager` `com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.filesManager` @AccessFlag PRIVATE_FINAL;
  `io.fabric.sdk.android.m.c.f` `com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.filesSender` @AccessFlag ;
  `com.crashlytics.android.answers.FirebaseAnalyticsApiAdapter` `com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.firebaseAnalyticsApiAdapter` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.forwardToFirebaseAnalyticsEnabled` @AccessFlag ;
  `io.fabric.sdk.android.services.network.d` `com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.httpRequestFactory` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.includePurchaseEventsInForwardedEvents` @AccessFlag ;
  `io.fabric.sdk.android.h` `com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.kit` @AccessFlag PRIVATE_FINAL;
  `com.crashlytics.android.answers.SessionEventMetadata` `com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.metadata` @AccessFlag FINAL;
  `boolean` `com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.predefinedEventsEnabled` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.rolloverFutureRef` @AccessFlag PRIVATE_FINAL;
  `int` `com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.rolloverIntervalSeconds` @AccessFlag VOLATILE;
}
global `int` `@@com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy.UNDEFINED_ROLLOVER_INTERVAL_SECONDS` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy` v1 @kind this, `io.fabric.sdk.android.h` v2 @kind object, `android.content.Context` v3 @kind object, `java.util.concurrent.ScheduledExecutorService` v4 @kind object, `com.crashlytics.android.answers.SessionAnalyticsFilesManager` v5 @kind object, `io.fabric.sdk.android.services.network.d` v6 @kind object, `com.crashlytics.android.answers.SessionEventMetadata` v7 @kind object, `com.crashlytics.android.answers.FirebaseAnalyticsApiAdapter` v8 @kind object) @signature `Lcom/crashlytics/android/answers/EnabledSessionAnalyticsManagerStrategy;.<init>:(Lio/fabric/sdk/android/h;Landroid/content/Context;Ljava/util/concurrent/ScheduledExecutorService;Lcom/crashlytics/android/answers/SessionAnalyticsFilesManager;Lio/fabric/sdk/android/services/network/d;Lcom/crashlytics/android/answers/SessionEventMetadata;Lcom/crashlytics/android/answers/FirebaseAnalyticsApiAdapter;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `cancelTimeBasedFileRollOver`(`com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy` v2 @kind this) @signature `Lcom/crashlytics/android/answers/EnabledSessionAnalyticsManagerStrategy;.cancelTimeBasedFileRollOver:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `deleteAllEvents`(`com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy` v1 @kind this) @signature `Lcom/crashlytics/android/answers/EnabledSessionAnalyticsManagerStrategy;.deleteAllEvents:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processEvent`(`com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy` v5 @kind this, `com.crashlytics.android.answers.SessionEvent$Builder` v6 @kind object) @signature `Lcom/crashlytics/android/answers/EnabledSessionAnalyticsManagerStrategy;.processEvent:(Lcom/crashlytics/android/answers/SessionEvent$Builder;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `rollFileOver`(`com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy` v3 @kind this) @signature `Lcom/crashlytics/android/answers/EnabledSessionAnalyticsManagerStrategy;.rollFileOver:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `scheduleTimeBasedFileRollOver`(`com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy` v8 @kind this, `long` v9 , `long` v11 ) @signature `Lcom/crashlytics/android/answers/EnabledSessionAnalyticsManagerStrategy;.scheduleTimeBasedFileRollOver:(JJ)V` @AccessFlag  {

  # return;
}
procedure `void` `scheduleTimeBasedRollOverIfNeeded`(`com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy` v4 @kind this) @signature `Lcom/crashlytics/android/answers/EnabledSessionAnalyticsManagerStrategy;.scheduleTimeBasedRollOverIfNeeded:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `sendEvents`(`com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy` v8 @kind this) @signature `Lcom/crashlytics/android/answers/EnabledSessionAnalyticsManagerStrategy;.sendEvents:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `setAnalyticsSettingsData`(`com.crashlytics.android.answers.EnabledSessionAnalyticsManagerStrategy` v7 @kind this, `io.fabric.sdk.android.m.e.b` v8 @kind object, `java.lang.String` v9 @kind object) @signature `Lcom/crashlytics/android/answers/EnabledSessionAnalyticsManagerStrategy;.setAnalyticsSettingsData:(Lio/fabric/sdk/android/m/e/b;Ljava/lang/String;)V` @AccessFlag PUBLIC {

  # return;
}
