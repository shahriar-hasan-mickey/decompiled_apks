record `retrofit2.Utils$ParameterizedTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.ParameterizedType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.Utils$ParameterizedTypeImpl.ownerType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.Utils$ParameterizedTypeImpl.rawType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Utils$ParameterizedTypeImpl` v4 @kind this, `java.lang.reflect.Type` v5 @kind object, `java.lang.reflect.Type` v6 @kind object, `java.lang.reflect.Type`[] v7 @kind object) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25904c.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L259052.  v0:= instanceof @variable v6 @type ^`java.lang.Class` @kind boolean;
  #L259056.  v1:= 0I;
  #L259058.  if v0 == 0 then goto L259090;
  #L25905c.  v0:= 1I;
  #L25905e.  if v5 != 0 then goto L259066;
  #L259062.  v2:= 1I;
  #L259064.  goto L259068;
  #L259066.  v2:= 0I;
  #L259068.  v3:= v6 @kind object;
  #L25906a.  v3:= (`java.lang.Class`) v3 @kind object;
  #L25906e.  call temp:= `getEnclosingClass`(v3) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L259074.  v3:= temp @kind object;
  #L259076.  if v3 != 0 then goto L25907c;
  #L25907a.  goto L25907e;
  #L25907c.  v0:= 0I;
  #L25907e.  if v2 != v0 then goto L259084;
  #L259082.  goto L259090;
  #L259084.  v5:= new `java.lang.IllegalArgumentException`;
  #L259088.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L25908e.  throw v5;
  #L259090.  v0:= length @variable v7;
  #L259092.  if v1 >= v0 then goto L2590b0;
  #L259096.  v2:= v7[v1] @kind object;
  #L25909a.  v3:= "typeArgument == null" @kind object;
  #L25909e.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2590a4.  call `checkNotPrimitive`(v2) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L2590aa.  v1:= v1 + 1;
  #L2590ae.  goto L259092;
  #L2590b0.  v4.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L2590b4.  v4.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L2590b8.  call temp:= `clone`(v7) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L2590be.  v5:= temp @kind object;
  #L2590c0.  v5:= (`java.lang.reflect.Type`[]) v5 @kind object;
  #L2590c4.  v4.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] := v5 @kind object;
  #L2590c8.  return @kind void;
}
procedure `boolean` `equals`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L258ed0.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L258ed4.  if v0 == 0 then goto L258eec;
  #L258ed8.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L258edc.  call temp:= `equals`(v1, v2) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L258ee2.  v2:= temp;
  #L258ee4.  if v2 == 0 then goto L258eec;
  #L258ee8.  v2:= 1I;
  #L258eea.  goto L258eee;
  #L258eec.  v2:= 0I;
  #L258eee.  return v2;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L259028.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L25902c.  call temp:= `clone`(v0) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L259032.  v0:= temp @kind object;
  #L259034.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L259038.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L258ff8.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L258ffc.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L259010.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L259014.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.Utils$ParameterizedTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L258f00.  v0:= v2.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L258f04.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L258f0a.  v0:= temp;
  #L258f0c.  v1:= v2.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L258f10.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L258f16.  v1:= temp;
  #L258f18.  v0:= v0 ^~ v1 @kind int;
  #L258f1a.  v1:= v2.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L258f1e.  if v1 == 0 then goto L258f2c;
  #L258f22.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L258f28.  v1:= temp;
  #L258f2a.  goto L258f2e;
  #L258f2c.  v1:= 0I;
  #L258f2e.  v0:= v0 ^~ v1 @kind int;
  #L258f30.  return v0;
}
procedure `java.lang.String` `toString`(`retrofit2.Utils$ParameterizedTypeImpl` v4 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L258f44.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L258f48.  v1:= length @variable v0;
  #L258f4a.  if v1 != 0 then goto L258f5c;
  #L258f4e.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L258f52.  call temp:= `typeToString`(v0) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L258f58.  v0:= temp @kind object;
  #L258f5a.  return v0 @kind object;
  #L258f5c.  v1:= new `java.lang.StringBuilder`;
  #L258f60.  v0:= length @variable v0;
  #L258f62.  v2:= 1I;
  #L258f64.  v0:= v0 + v2 @kind int;
  #L258f66.  v0:= v0 * 30;
  #L258f6a.  call `<init>`(v1, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L258f70.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L258f74.  call temp:= `typeToString`(v0) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L258f7a.  v0:= temp @kind object;
  #L258f7c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L258f82.  v0:= "<" @kind object;
  #L258f86.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L258f8c.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L258f90.  v3:= 0I;
  #L258f92.  v0:= v0[v3] @kind object;
  #L258f96.  call temp:= `typeToString`(v0) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L258f9c.  v0:= temp @kind object;
  #L258f9e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L258fa4.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L258fa8.  v0:= length @variable v0;
  #L258faa.  if v2 >= v0 then goto L258fd4;
  #L258fae.  v0:= ", " @kind object;
  #L258fb2.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L258fb8.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L258fbc.  v0:= v0[v2] @kind object;
  #L258fc0.  call temp:= `typeToString`(v0) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L258fc6.  v0:= temp @kind object;
  #L258fc8.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L258fce.  v2:= v2 + 1;
  #L258fd2.  goto L258fa4;
  #L258fd4.  v0:= ">" @kind object;
  #L258fd8.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L258fde.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L258fe4.  v0:= temp @kind object;
  #L258fe6.  return v0 @kind object;
}
