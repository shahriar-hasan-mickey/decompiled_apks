record `retrofit2.OkHttpCall$ExceptionCatchingResponseBody$1` @kind class @AccessFlag  extends `i.k` @kind class {
  `retrofit2.OkHttpCall$ExceptionCatchingResponseBody` `retrofit2.OkHttpCall$ExceptionCatchingResponseBody$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit2.OkHttpCall$ExceptionCatchingResponseBody$1` v0 @kind this, `retrofit2.OkHttpCall$ExceptionCatchingResponseBody` v1 @kind object, `i.z` v2 @kind object) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody$1;.<init>:(Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;Li/z;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25477c.  v0.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody$1.this$0` @type ^`retrofit2.OkHttpCall$ExceptionCatchingResponseBody` := v1 @kind object;
  #L254780.  call `<init>`(v0, v2) @signature `Li/k;.<init>:(Li/z;)V` @kind direct;
  #L254786.  return @kind void;
}
procedure `long` `read`(`retrofit2.OkHttpCall$ExceptionCatchingResponseBody$1` v0 @kind this, `i.e` v1 @kind object, `long` v2 ) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody$1;.read:(Li/e;J)J` @AccessFlag PUBLIC {
    temp;

  #L254744.  call temp:= `read`(v0, v1, v2) @signature `Li/k;.read:(Li/e;J)J` @kind super;
  #L25474a.  v1:= temp @kind wide;
  #L25474c.  return v1 @kind wide;
  #L25474e.  v1:= Exception @type ^`java.io.IOException` @kind object;
  #L254750.  v2:= v0.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody$1.this$0` @type ^`retrofit2.OkHttpCall$ExceptionCatchingResponseBody` @kind object;
  #L254754.  v2.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody.thrownException` @type ^`java.io.IOException` := v1 @kind object;
  #L254758.  throw v1;
  catch `java.io.IOException` @[L254744..L25474c] goto L25474e;
}
