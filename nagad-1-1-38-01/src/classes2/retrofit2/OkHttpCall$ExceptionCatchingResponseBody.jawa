record `retrofit2.OkHttpCall$ExceptionCatchingResponseBody` @kind class @AccessFlag FINAL extends `h.j0` @kind class {
  `h.j0` `retrofit2.OkHttpCall$ExceptionCatchingResponseBody.delegate` @AccessFlag PRIVATE_FINAL;
  `i.g` `retrofit2.OkHttpCall$ExceptionCatchingResponseBody.delegateSource` @AccessFlag PRIVATE_FINAL;
  `java.io.IOException` `retrofit2.OkHttpCall$ExceptionCatchingResponseBody.thrownException` @AccessFlag ;
}
procedure `void` `<init>`(`retrofit2.OkHttpCall$ExceptionCatchingResponseBody` v1 @kind this, `h.j0` v2 @kind object) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;.<init>:(Lh/j0;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2547f0.  call `<init>`(v1) @signature `Lh/j0;.<init>:()V` @kind direct;
  #L2547f6.  v1.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody.delegate` @type ^`h.j0` := v2 @kind object;
  #L2547fa.  v0:= new `retrofit2.OkHttpCall$ExceptionCatchingResponseBody$1`;
  #L2547fe.  call temp:= `source`(v2) @signature `Lh/j0;.source:()Li/g;` @kind virtual;
  #L254804.  v2:= temp @kind object;
  #L254806.  call `<init>`(v0, v1, v2) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody$1;.<init>:(Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;Li/z;)V` @kind direct;
  #L25480c.  call temp:= `buffer`(v0) @signature `Li/p;.buffer:(Li/z;)Li/g;` @kind static;
  #L254812.  v2:= temp @kind object;
  #L254814.  v1.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody.delegateSource` @type ^`i.g` := v2 @kind object;
  #L254818.  return @kind void;
}
procedure `void` `close`(`retrofit2.OkHttpCall$ExceptionCatchingResponseBody` v1 @kind this) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25482c.  v0:= v1.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody.delegate` @type ^`h.j0` @kind object;
  #L254830.  call `close`(v0) @signature `Lh/j0;.close:()V` @kind virtual;
  #L254836.  return @kind void;
}
procedure `long` `contentLength`(`retrofit2.OkHttpCall$ExceptionCatchingResponseBody` v2 @kind this) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;.contentLength:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L254798.  v0:= v2.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody.delegate` @type ^`h.j0` @kind object;
  #L25479c.  call temp:= `contentLength`(v0) @signature `Lh/j0;.contentLength:()J` @kind virtual;
  #L2547a2.  v0:= temp @kind wide;
  #L2547a4.  return v0 @kind wide;
}
procedure `h.b0` `contentType`(`retrofit2.OkHttpCall$ExceptionCatchingResponseBody` v1 @kind this) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;.contentType:()Lh/b0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2547b8.  v0:= v1.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody.delegate` @type ^`h.j0` @kind object;
  #L2547bc.  call temp:= `contentType`(v0) @signature `Lh/j0;.contentType:()Lh/b0;` @kind virtual;
  #L2547c2.  v0:= temp @kind object;
  #L2547c4.  return v0 @kind object;
}
procedure `i.g` `source`(`retrofit2.OkHttpCall$ExceptionCatchingResponseBody` v1 @kind this) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;.source:()Li/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2547d8.  v0:= v1.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody.delegateSource` @type ^`i.g` @kind object;
  #L2547dc.  return v0 @kind object;
}
procedure `void` `throwIfCaught`(`retrofit2.OkHttpCall$ExceptionCatchingResponseBody` v1 @kind this) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;.throwIfCaught:()V` @AccessFlag  {
    temp;
    v0;

  #L254848.  v0:= v1.`retrofit2.OkHttpCall$ExceptionCatchingResponseBody.thrownException` @type ^`java.io.IOException` @kind object;
  #L25484c.  if v0 != 0 then goto L254852;
  #L254850.  return @kind void;
  #L254852.  throw v0;
}
