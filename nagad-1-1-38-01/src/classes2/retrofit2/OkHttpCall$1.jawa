record `retrofit2.OkHttpCall$1` @kind class @AccessFlag  extends `h.k` @kind interface {
  `retrofit2.OkHttpCall` `retrofit2.OkHttpCall$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `retrofit2.Callback` `retrofit2.OkHttpCall$1.val$callback` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit2.OkHttpCall$1` v0 @kind this, `retrofit2.OkHttpCall` v1 @kind object, `retrofit2.Callback` v2 @kind object) @signature `Lretrofit2/OkHttpCall$1;.<init>:(Lretrofit2/OkHttpCall;Lretrofit2/Callback;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25466c.  v0.`retrofit2.OkHttpCall$1.this$0` @type ^`retrofit2.OkHttpCall` := v1 @kind object;
  #L254670.  v0.`retrofit2.OkHttpCall$1.val$callback` @type ^`retrofit2.Callback` := v2 @kind object;
  #L254674.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L25467a.  return @kind void;
}
procedure `void` `callFailure`(`retrofit2.OkHttpCall$1` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lretrofit2/OkHttpCall$1;.callFailure:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L25468c.  v0:= v2.`retrofit2.OkHttpCall$1.val$callback` @type ^`retrofit2.Callback` @kind object;
  #L254690.  v1:= v2.`retrofit2.OkHttpCall$1.this$0` @type ^`retrofit2.OkHttpCall` @kind object;
  #L254694.  call `onFailure`(v0, v1, v3) @signature `Lretrofit2/Callback;.onFailure:(Lretrofit2/Call;Ljava/lang/Throwable;)V` @kind interface;
  #L25469a.  goto L2546aa;
  #L25469c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25469e.  call `throwIfFatal`(v3) @signature `Lretrofit2/Utils;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L2546a4.  call `printStackTrace`(v3) @signature `Ljava/lang/Throwable;.printStackTrace:()V` @kind virtual;
  #L2546aa.  return @kind void;
  catch `java.lang.Throwable` @[L25468c..L25469a] goto L25469c;
}
procedure `void` `onFailure`(`retrofit2.OkHttpCall$1` v0 @kind this, `h.j` v1 @kind object, `java.io.IOException` v2 @kind object) @signature `Lretrofit2/OkHttpCall$1;.onFailure:(Lh/j;Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;

  #L2546c8.  call `callFailure`(v0, v2) @signature `Lretrofit2/OkHttpCall$1;.callFailure:(Ljava/lang/Throwable;)V` @kind direct;
  #L2546ce.  return @kind void;
}
procedure `void` `onResponse`(`retrofit2.OkHttpCall$1` v1 @kind this, `h.j` v2 @kind object, `h.i0` v3 @kind object) @signature `Lretrofit2/OkHttpCall$1;.onResponse:(Lh/j;Lh/i0;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2546e0.  v2:= v1.`retrofit2.OkHttpCall$1.this$0` @type ^`retrofit2.OkHttpCall` @kind object;
  #L2546e4.  call temp:= `parseResponse`(v2, v3) @signature `Lretrofit2/OkHttpCall;.parseResponse:(Lh/i0;)Lretrofit2/Response;` @kind virtual;
  #L2546ea.  v2:= temp @kind object;
  #L2546ec.  v3:= v1.`retrofit2.OkHttpCall$1.val$callback` @type ^`retrofit2.Callback` @kind object;
  #L2546f0.  v0:= v1.`retrofit2.OkHttpCall$1.this$0` @type ^`retrofit2.OkHttpCall` @kind object;
  #L2546f4.  call `onResponse`(v3, v0, v2) @signature `Lretrofit2/Callback;.onResponse:(Lretrofit2/Call;Lretrofit2/Response;)V` @kind interface;
  #L2546fa.  goto L25470a;
  #L2546fc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2546fe.  call `throwIfFatal`(v2) @signature `Lretrofit2/Utils;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L254704.  call `printStackTrace`(v2) @signature `Ljava/lang/Throwable;.printStackTrace:()V` @kind virtual;
  #L25470a.  return @kind void;
  #L25470c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25470e.  call `throwIfFatal`(v2) @signature `Lretrofit2/Utils;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L254714.  call `callFailure`(v1, v2) @signature `Lretrofit2/OkHttpCall$1;.callFailure:(Ljava/lang/Throwable;)V` @kind direct;
  #L25471a.  return @kind void;
  catch `java.lang.Throwable` @[L2546e0..L2546ec] goto L25470c;
  catch `java.lang.Throwable` @[L2546ec..L2546fa] goto L2546fc;
}
