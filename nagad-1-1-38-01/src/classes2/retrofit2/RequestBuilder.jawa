record `retrofit2.RequestBuilder` @kind class @AccessFlag FINAL {
  `h.z` `retrofit2.RequestBuilder.baseUrl` @AccessFlag PRIVATE_FINAL;
  `h.h0` `retrofit2.RequestBuilder.body` @AccessFlag PRIVATE;
  `h.b0` `retrofit2.RequestBuilder.contentType` @AccessFlag PRIVATE;
  `h.w$a` `retrofit2.RequestBuilder.formBuilder` @AccessFlag PRIVATE;
  `boolean` `retrofit2.RequestBuilder.hasBody` @AccessFlag PRIVATE_FINAL;
  `h.y$a` `retrofit2.RequestBuilder.headersBuilder` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `retrofit2.RequestBuilder.method` @AccessFlag PRIVATE_FINAL;
  `h.c0$a` `retrofit2.RequestBuilder.multipartBuilder` @AccessFlag PRIVATE;
  `java.lang.String` `retrofit2.RequestBuilder.relativeUrl` @AccessFlag PRIVATE;
  `h.g0$a` `retrofit2.RequestBuilder.requestBuilder` @AccessFlag PRIVATE_FINAL;
  `h.z$a` `retrofit2.RequestBuilder.urlBuilder` @AccessFlag PRIVATE;
}
global `char`[] `@@retrofit2.RequestBuilder.HEX_DIGITS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@retrofit2.RequestBuilder.PATH_SEGMENT_ALWAYS_ENCODE_SET` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@retrofit2.RequestBuilder.PATH_TRAVERSAL` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/RequestBuilder;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L256024.  v0:= 16I;
  #L256028.  v0:= new `char`[v0];
  #L25602c.  goto L256048;
  #L256032.  `@@retrofit2.RequestBuilder.HEX_DIGITS` @type ^`char`[] := v0 @kind object;
  #L256036.  v0:= "(.*/)?(\\.|%2e|%2E){1,2}(/.*)?" @kind object;
  #L25603a.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L256040.  v0:= temp @kind object;
  #L256042.  `@@retrofit2.RequestBuilder.PATH_TRAVERSAL` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L256046.  return @kind void;
  #L256048.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 65I, 66I, 67I, 68I, 69I, 70I) @kind object;
  #L25606f.  goto L256032;
}
procedure `void` `<init>`(`retrofit2.RequestBuilder` v0 @kind this, `java.lang.String` v1 @kind object, `h.z` v2 @kind object, `java.lang.String` v3 @kind object, `h.y` v4 @kind object, `h.b0` v5 @kind object, `boolean` v6 , `boolean` v7 , `boolean` v8 ) @signature `Lretrofit2/RequestBuilder;.<init>:(Ljava/lang/String;Lh/z;Ljava/lang/String;Lh/y;Lh/b0;ZZZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L256080.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L256086.  v0.`retrofit2.RequestBuilder.method` @type ^`java.lang.String` := v1 @kind object;
  #L25608a.  v0.`retrofit2.RequestBuilder.baseUrl` @type ^`h.z` := v2 @kind object;
  #L25608e.  v0.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` := v3 @kind object;
  #L256092.  v1:= new `h.g0$a`;
  #L256096.  call `<init>`(v1) @signature `Lh/g0$a;.<init>:()V` @kind direct;
  #L25609c.  v0.`retrofit2.RequestBuilder.requestBuilder` @type ^`h.g0$a` := v1 @kind object;
  #L2560a0.  v0.`retrofit2.RequestBuilder.contentType` @type ^`h.b0` := v5 @kind object;
  #L2560a4.  v0.`retrofit2.RequestBuilder.hasBody` @type ^`boolean` := v6 @kind boolean;
  #L2560a8.  if v4 == 0 then goto L2560ba;
  #L2560ac.  call temp:= `newBuilder`(v4) @signature `Lh/y;.newBuilder:()Lh/y$a;` @kind virtual;
  #L2560b2.  v1:= temp @kind object;
  #L2560b4.  v0.`retrofit2.RequestBuilder.headersBuilder` @type ^`h.y$a` := v1 @kind object;
  #L2560b8.  goto L2560c8;
  #L2560ba.  v1:= new `h.y$a`;
  #L2560be.  call `<init>`(v1) @signature `Lh/y$a;.<init>:()V` @kind direct;
  #L2560c4.  v0.`retrofit2.RequestBuilder.headersBuilder` @type ^`h.y$a` := v1 @kind object;
  #L2560c8.  if v7 == 0 then goto L2560dc;
  #L2560cc.  v1:= new `h.w$a`;
  #L2560d0.  call `<init>`(v1) @signature `Lh/w$a;.<init>:()V` @kind direct;
  #L2560d6.  v0.`retrofit2.RequestBuilder.formBuilder` @type ^`h.w$a` := v1 @kind object;
  #L2560da.  goto L2560fc;
  #L2560dc.  if v8 == 0 then goto L2560fc;
  #L2560e0.  v1:= new `h.c0$a`;
  #L2560e4.  call `<init>`(v1) @signature `Lh/c0$a;.<init>:()V` @kind direct;
  #L2560ea.  v0.`retrofit2.RequestBuilder.multipartBuilder` @type ^`h.c0$a` := v1 @kind object;
  #L2560ee.  v1:= v0.`retrofit2.RequestBuilder.multipartBuilder` @type ^`h.c0$a` @kind object;
  #L2560f2.  v2:= `@@h.c0.f` @type ^`h.b0` @kind object;
  #L2560f6.  call temp:= `setType`(v1, v2) @signature `Lh/c0$a;.setType:(Lh/b0;)Lh/c0$a;` @kind virtual;
  #L2560fc.  return @kind void;
}
procedure `java.lang.String` `canonicalizeForPath`(`java.lang.String` v6 @kind object, `boolean` v7 ) @signature `Lretrofit2/RequestBuilder;.canonicalizeForPath:(Ljava/lang/String;Z)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L255e80.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L255e86.  v0:= temp;
  #L255e88.  v1:= 0I;
  #L255e8a.  v2:= 0I;
  #L255e8c.  if v2 >= v0 then goto L255efa;
  #L255e90.  call temp:= `codePointAt`(v6, v2) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L255e96.  v3:= temp;
  #L255e98.  v4:= 32I;
  #L255e9c.  if v3 < v4 then goto L255edc;
  #L255ea0.  v4:= 127I;
  #L255ea4.  if v3 >= v4 then goto L255edc;
  #L255ea8.  v4:= " \"<>^`{}|\\?#" @kind object;
  #L255eac.  call temp:= `indexOf`(v4, v3) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L255eb2.  v4:= temp;
  #L255eb4.  v5:= -1I;
  #L255eb6.  if v4 != v5 then goto L255edc;
  #L255eba.  if v7 != 0 then goto L255ed0;
  #L255ebe.  v4:= 47I;
  #L255ec2.  if v3 == v4 then goto L255edc;
  #L255ec6.  v4:= 37I;
  #L255eca.  if v3 != v4 then goto L255ed0;
  #L255ece.  goto L255edc;
  #L255ed0.  call temp:= `charCount`(v3) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L255ed6.  v3:= temp;
  #L255ed8.  v2:= v2 + v3 @kind int;
  #L255eda.  goto L255e8c;
  #L255edc.  v3:= new `i.e`;
  #L255ee0.  call `<init>`(v3) @signature `Li/e;.<init>:()V` @kind direct;
  #L255ee6.  call temp:= `writeUtf8`(v3, v6, v1, v2) @signature `Li/e;.writeUtf8:(Ljava/lang/String;II)Li/e;` @kind virtual;
  #L255eec.  call `canonicalizeForPath`(v3, v6, v2, v0, v7) @signature `Lretrofit2/RequestBuilder;.canonicalizeForPath:(Li/e;Ljava/lang/String;IIZ)V` @kind static;
  #L255ef2.  call temp:= `readUtf8`(v3) @signature `Li/e;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L255ef8.  v6:= temp @kind object;
  #L255efa.  return v6 @kind object;
}
procedure `void` `canonicalizeForPath`(`i.e` v6 @kind object, `java.lang.String` v7 @kind object, `int` v8 , `int` v9 , `boolean` v10 ) @signature `Lretrofit2/RequestBuilder;.canonicalizeForPath:(Li/e;Ljava/lang/String;IIZ)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L256374.  v0:= 0I;
  #L256376.  if v8 >= v9 then goto L256450;
  #L25637a.  call temp:= `codePointAt`(v7, v8) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L256380.  v1:= temp;
  #L256382.  if v10 == 0 then goto L2563a8;
  #L256386.  v2:= 9I;
  #L25638a.  if v1 == v2 then goto L256444;
  #L25638e.  v2:= 10I;
  #L256392.  if v1 == v2 then goto L256444;
  #L256396.  v2:= 12I;
  #L25639a.  if v1 == v2 then goto L256444;
  #L25639e.  v2:= 13I;
  #L2563a2.  if v1 != v2 then goto L2563a8;
  #L2563a6.  goto L256444;
  #L2563a8.  v2:= 32I;
  #L2563ac.  v3:= 37I;
  #L2563b0.  if v1 < v2 then goto L2563e8;
  #L2563b4.  v2:= 127I;
  #L2563b8.  if v1 >= v2 then goto L2563e8;
  #L2563bc.  v2:= " \"<>^`{}|\\?#" @kind object;
  #L2563c0.  call temp:= `indexOf`(v2, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L2563c6.  v2:= temp;
  #L2563c8.  v4:= -1I;
  #L2563ca.  if v2 != v4 then goto L2563e8;
  #L2563ce.  if v10 != 0 then goto L2563e0;
  #L2563d2.  v2:= 47I;
  #L2563d6.  if v1 == v2 then goto L2563e8;
  #L2563da.  if v1 != v3 then goto L2563e0;
  #L2563de.  goto L2563e8;
  #L2563e0.  call temp:= `writeUtf8CodePoint`(v6, v1) @signature `Li/e;.writeUtf8CodePoint:(I)Li/e;` @kind virtual;
  #L2563e6.  goto L256444;
  #L2563e8.  if v0 != 0 then goto L2563f6;
  #L2563ec.  v0:= new `i.e`;
  #L2563f0.  call `<init>`(v0) @signature `Li/e;.<init>:()V` @kind direct;
  #L2563f6.  call temp:= `writeUtf8CodePoint`(v0, v1) @signature `Li/e;.writeUtf8CodePoint:(I)Li/e;` @kind virtual;
  #L2563fc.  call temp:= `exhausted`(v0) @signature `Li/e;.exhausted:()Z` @kind virtual;
  #L256402.  v2:= temp;
  #L256404.  if v2 != 0 then goto L256444;
  #L256408.  call temp:= `readByte`(v0) @signature `Li/e;.readByte:()B` @kind virtual;
  #L25640e.  v2:= temp;
  #L256410.  v2:= v2 ^& 255;
  #L256414.  call temp:= `writeByte`(v6, v3) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L25641a.  v4:= `@@retrofit2.RequestBuilder.HEX_DIGITS` @type ^`char`[] @kind object;
  #L25641e.  v5:= v2 ^> 4;
  #L256422.  v5:= v5 ^& 15;
  #L256426.  v4:= v4[v5] @kind char;
  #L25642a.  call temp:= `writeByte`(v6, v4) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L256430.  v4:= `@@retrofit2.RequestBuilder.HEX_DIGITS` @type ^`char`[] @kind object;
  #L256434.  v2:= v2 ^& 15;
  #L256438.  v2:= v4[v2] @kind char;
  #L25643c.  call temp:= `writeByte`(v6, v2) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L256442.  goto L2563fc;
  #L256444.  call temp:= `charCount`(v1) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L25644a.  v1:= temp;
  #L25644c.  v8:= v8 + v1 @kind int;
  #L25644e.  goto L256376;
  #L256450.  return @kind void;
}
procedure `void` `addFormField`(`retrofit2.RequestBuilder` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object, `boolean` v3 ) @signature `Lretrofit2/RequestBuilder;.addFormField:(Ljava/lang/String;Ljava/lang/String;Z)V` @AccessFlag  {
    temp;

  #L256110.  if v3 == 0 then goto L256120;
  #L256114.  v3:= v0.`retrofit2.RequestBuilder.formBuilder` @type ^`h.w$a` @kind object;
  #L256118.  call temp:= `addEncoded`(v3, v1, v2) @signature `Lh/w$a;.addEncoded:(Ljava/lang/String;Ljava/lang/String;)Lh/w$a;` @kind virtual;
  #L25611e.  goto L25612a;
  #L256120.  v3:= v0.`retrofit2.RequestBuilder.formBuilder` @type ^`h.w$a` @kind object;
  #L256124.  call temp:= `add`(v3, v1, v2) @signature `Lh/w$a;.add:(Ljava/lang/String;Ljava/lang/String;)Lh/w$a;` @kind virtual;
  #L25612a.  return @kind void;
}
procedure `void` `addHeader`(`retrofit2.RequestBuilder` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lretrofit2/RequestBuilder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L25613c.  v0:= "Content-Type" @kind object;
  #L256140.  call temp:= `equalsIgnoreCase`(v0, v4) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L256146.  v0:= temp;
  #L256148.  if v0 == 0 then goto L25618a;
  #L25614c.  call temp:= `get`(v5) @signature `Lh/b0;.get:(Ljava/lang/String;)Lh/b0;` @kind static;
  #L256152.  v4:= temp @kind object;
  #L256154.  v3.`retrofit2.RequestBuilder.contentType` @type ^`h.b0` := v4 @kind object;
  #L256158.  goto L256194;
  #L25615a.  v4:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L25615c.  v0:= new `java.lang.IllegalArgumentException`;
  #L256160.  v1:= new `java.lang.StringBuilder`;
  #L256164.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L25616a.  v2:= "Malformed content type: " @kind object;
  #L25616e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256174.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25617a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L256180.  v5:= temp @kind object;
  #L256182.  call `<init>`(v0, v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L256188.  throw v0;
  #L25618a.  v0:= v3.`retrofit2.RequestBuilder.headersBuilder` @type ^`h.y$a` @kind object;
  #L25618e.  call temp:= `add`(v0, v4, v5) @signature `Lh/y$a;.add:(Ljava/lang/String;Ljava/lang/String;)Lh/y$a;` @kind virtual;
  #L256194.  return @kind void;
  catch `java.lang.IllegalArgumentException` @[L25614c..L256158] goto L25615a;
}
procedure `void` `addHeaders`(`retrofit2.RequestBuilder` v1 @kind this, `h.y` v2 @kind object) @signature `Lretrofit2/RequestBuilder;.addHeaders:(Lh/y;)V` @AccessFlag  {
    temp;
    v0;

  #L2561b8.  v0:= v1.`retrofit2.RequestBuilder.headersBuilder` @type ^`h.y$a` @kind object;
  #L2561bc.  call temp:= `addAll`(v0, v2) @signature `Lh/y$a;.addAll:(Lh/y;)Lh/y$a;` @kind virtual;
  #L2561c2.  return @kind void;
}
procedure `void` `addPart`(`retrofit2.RequestBuilder` v1 @kind this, `h.c0$b` v2 @kind object) @signature `Lretrofit2/RequestBuilder;.addPart:(Lh/c0$b;)V` @AccessFlag  {
    temp;
    v0;

  #L2561f0.  v0:= v1.`retrofit2.RequestBuilder.multipartBuilder` @type ^`h.c0$a` @kind object;
  #L2561f4.  call temp:= `addPart`(v0, v2) @signature `Lh/c0$a;.addPart:(Lh/c0$b;)Lh/c0$a;` @kind virtual;
  #L2561fa.  return @kind void;
}
procedure `void` `addPart`(`retrofit2.RequestBuilder` v1 @kind this, `h.y` v2 @kind object, `h.h0` v3 @kind object) @signature `Lretrofit2/RequestBuilder;.addPart:(Lh/y;Lh/h0;)V` @AccessFlag  {
    temp;
    v0;

  #L2561d4.  v0:= v1.`retrofit2.RequestBuilder.multipartBuilder` @type ^`h.c0$a` @kind object;
  #L2561d8.  call temp:= `addPart`(v0, v2, v3) @signature `Lh/c0$a;.addPart:(Lh/y;Lh/h0;)Lh/c0$a;` @kind virtual;
  #L2561de.  return @kind void;
}
procedure `void` `addPathParam`(`retrofit2.RequestBuilder` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object, `boolean` v6 ) @signature `Lretrofit2/RequestBuilder;.addPathParam:(Ljava/lang/String;Ljava/lang/String;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L25620c.  v0:= v3.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L256210.  if v0 == 0 then goto L2562a0;
  #L256214.  call temp:= `canonicalizeForPath`(v5, v6) @signature `Lretrofit2/RequestBuilder;.canonicalizeForPath:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L25621a.  v6:= temp @kind object;
  #L25621c.  v0:= v3.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L256220.  v1:= new `java.lang.StringBuilder`;
  #L256224.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L25622a.  v2:= "{" @kind object;
  #L25622e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256234.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25623a.  v4:= "}" @kind object;
  #L25623e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256244.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L25624a.  v4:= temp @kind object;
  #L25624c.  call temp:= `replace`(v0, v4, v6) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L256252.  v4:= temp @kind object;
  #L256254.  v6:= `@@retrofit2.RequestBuilder.PATH_TRAVERSAL` @type ^`java.util.regex.Pattern` @kind object;
  #L256258.  call temp:= `matcher`(v6, v4) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L25625e.  v6:= temp @kind object;
  #L256260.  call temp:= `matches`(v6) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L256266.  v6:= temp;
  #L256268.  if v6 != 0 then goto L256272;
  #L25626c.  v3.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` := v4 @kind object;
  #L256270.  return @kind void;
  #L256272.  v4:= new `java.lang.IllegalArgumentException`;
  #L256276.  v6:= new `java.lang.StringBuilder`;
  #L25627a.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L256280.  v0:= "@Path parameters shouldn't perform path traversal ('.' or '..'): " @kind object;
  #L256284.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25628a.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256290.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L256296.  v5:= temp @kind object;
  #L256298.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25629e.  throw v4;
  #L2562a0.  v4:= new `java.lang.AssertionError`;
  #L2562a4.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2562aa.  throw v4;
}
procedure `void` `addQueryParam`(`retrofit2.RequestBuilder` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object, `boolean` v5 ) @signature `Lretrofit2/RequestBuilder;.addQueryParam:(Ljava/lang/String;Ljava/lang/String;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2562bc.  v0:= v2.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L2562c0.  if v0 == 0 then goto L25632a;
  #L2562c4.  v1:= v2.`retrofit2.RequestBuilder.baseUrl` @type ^`h.z` @kind object;
  #L2562c8.  call temp:= `newBuilder`(v1, v0) @signature `Lh/z;.newBuilder:(Ljava/lang/String;)Lh/z$a;` @kind virtual;
  #L2562ce.  v0:= temp @kind object;
  #L2562d0.  v2.`retrofit2.RequestBuilder.urlBuilder` @type ^`h.z$a` := v0 @kind object;
  #L2562d4.  v0:= v2.`retrofit2.RequestBuilder.urlBuilder` @type ^`h.z$a` @kind object;
  #L2562d8.  if v0 == 0 then goto L2562e4;
  #L2562dc.  v0:= 0I;
  #L2562de.  v2.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` := v0 @kind object;
  #L2562e2.  goto L25632a;
  #L2562e4.  v3:= new `java.lang.IllegalArgumentException`;
  #L2562e8.  v4:= new `java.lang.StringBuilder`;
  #L2562ec.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2562f2.  v5:= "Malformed URL. Base: " @kind object;
  #L2562f6.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2562fc.  v5:= v2.`retrofit2.RequestBuilder.baseUrl` @type ^`h.z` @kind object;
  #L256300.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256306.  v5:= ", Relative: " @kind object;
  #L25630a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256310.  v5:= v2.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L256314.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25631a.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L256320.  v4:= temp @kind object;
  #L256322.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L256328.  throw v3;
  #L25632a.  if v5 == 0 then goto L25633a;
  #L25632e.  v5:= v2.`retrofit2.RequestBuilder.urlBuilder` @type ^`h.z$a` @kind object;
  #L256332.  call temp:= `addEncodedQueryParameter`(v5, v3, v4) @signature `Lh/z$a;.addEncodedQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lh/z$a;` @kind virtual;
  #L256338.  goto L256344;
  #L25633a.  v5:= v2.`retrofit2.RequestBuilder.urlBuilder` @type ^`h.z$a` @kind object;
  #L25633e.  call temp:= `addQueryParameter`(v5, v3, v4) @signature `Lh/z$a;.addQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lh/z$a;` @kind virtual;
  #L256344.  return @kind void;
}
procedure `void` `addTag`(`retrofit2.RequestBuilder` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lretrofit2/RequestBuilder;.addTag:(Ljava/lang/Class;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L256358.  v0:= v1.`retrofit2.RequestBuilder.requestBuilder` @type ^`h.g0$a` @kind object;
  #L25635c.  call temp:= `tag`(v0, v2, v3) @signature `Lh/g0$a;.tag:(Ljava/lang/Class;Ljava/lang/Object;)Lh/g0$a;` @kind virtual;
  #L256362.  return @kind void;
}
procedure `h.g0$a` `get`(`retrofit2.RequestBuilder` v5 @kind this) @signature `Lretrofit2/RequestBuilder;.get:()Lh/g0$a;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L255f0c.  v0:= v5.`retrofit2.RequestBuilder.urlBuilder` @type ^`h.z$a` @kind object;
  #L255f10.  if v0 == 0 then goto L255f1e;
  #L255f14.  call temp:= `build`(v0) @signature `Lh/z$a;.build:()Lh/z;` @kind virtual;
  #L255f1a.  v0:= temp @kind object;
  #L255f1c.  goto L255f32;
  #L255f1e.  v0:= v5.`retrofit2.RequestBuilder.baseUrl` @type ^`h.z` @kind object;
  #L255f22.  v1:= v5.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L255f26.  call temp:= `resolve`(v0, v1) @signature `Lh/z;.resolve:(Ljava/lang/String;)Lh/z;` @kind virtual;
  #L255f2c.  v0:= temp @kind object;
  #L255f2e.  if v0 == 0 then goto L255fce;
  #L255f32.  v1:= v5.`retrofit2.RequestBuilder.body` @type ^`h.h0` @kind object;
  #L255f36.  if v1 != 0 then goto L255f76;
  #L255f3a.  v2:= v5.`retrofit2.RequestBuilder.formBuilder` @type ^`h.w$a` @kind object;
  #L255f3e.  if v2 == 0 then goto L255f4c;
  #L255f42.  call temp:= `build`(v2) @signature `Lh/w$a;.build:()Lh/w;` @kind virtual;
  #L255f48.  v1:= temp @kind object;
  #L255f4a.  goto L255f76;
  #L255f4c.  v2:= v5.`retrofit2.RequestBuilder.multipartBuilder` @type ^`h.c0$a` @kind object;
  #L255f50.  if v2 == 0 then goto L255f5e;
  #L255f54.  call temp:= `build`(v2) @signature `Lh/c0$a;.build:()Lh/c0;` @kind virtual;
  #L255f5a.  v1:= temp @kind object;
  #L255f5c.  goto L255f76;
  #L255f5e.  v2:= v5.`retrofit2.RequestBuilder.hasBody` @type ^`boolean` @kind boolean;
  #L255f62.  if v2 == 0 then goto L255f76;
  #L255f66.  v1:= 0I;
  #L255f68.  v2:= 0I;
  #L255f6a.  v2:= new `byte`[v2];
  #L255f6e.  call temp:= `create`(v1, v2) @signature `Lh/h0;.create:(Lh/b0;[B)Lh/h0;` @kind static;
  #L255f74.  v1:= temp @kind object;
  #L255f76.  v2:= v5.`retrofit2.RequestBuilder.contentType` @type ^`h.b0` @kind object;
  #L255f7a.  if v2 == 0 then goto L255fa6;
  #L255f7e.  if v1 == 0 then goto L255f90;
  #L255f82.  v3:= new `retrofit2.RequestBuilder$ContentTypeOverridingRequestBody`;
  #L255f86.  call `<init>`(v3, v1, v2) @signature `Lretrofit2/RequestBuilder$ContentTypeOverridingRequestBody;.<init>:(Lh/h0;Lh/b0;)V` @kind direct;
  #L255f8c.  v1:= v3 @kind object;
  #L255f8e.  goto L255fa6;
  #L255f90.  v3:= v5.`retrofit2.RequestBuilder.headersBuilder` @type ^`h.y$a` @kind object;
  #L255f94.  call temp:= `toString`(v2) @signature `Lh/b0;.toString:()Ljava/lang/String;` @kind virtual;
  #L255f9a.  v2:= temp @kind object;
  #L255f9c.  v4:= "Content-Type" @kind object;
  #L255fa0.  call temp:= `add`(v3, v4, v2) @signature `Lh/y$a;.add:(Ljava/lang/String;Ljava/lang/String;)Lh/y$a;` @kind virtual;
  #L255fa6.  v2:= v5.`retrofit2.RequestBuilder.requestBuilder` @type ^`h.g0$a` @kind object;
  #L255faa.  call temp:= `url`(v2, v0) @signature `Lh/g0$a;.url:(Lh/z;)Lh/g0$a;` @kind virtual;
  #L255fb0.  v0:= v5.`retrofit2.RequestBuilder.headersBuilder` @type ^`h.y$a` @kind object;
  #L255fb4.  call temp:= `build`(v0) @signature `Lh/y$a;.build:()Lh/y;` @kind virtual;
  #L255fba.  v0:= temp @kind object;
  #L255fbc.  call temp:= `headers`(v2, v0) @signature `Lh/g0$a;.headers:(Lh/y;)Lh/g0$a;` @kind virtual;
  #L255fc2.  v0:= v5.`retrofit2.RequestBuilder.method` @type ^`java.lang.String` @kind object;
  #L255fc6.  call temp:= `method`(v2, v0, v1) @signature `Lh/g0$a;.method:(Ljava/lang/String;Lh/h0;)Lh/g0$a;` @kind virtual;
  #L255fcc.  return v2 @kind object;
  #L255fce.  v0:= new `java.lang.IllegalArgumentException`;
  #L255fd2.  v1:= new `java.lang.StringBuilder`;
  #L255fd6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L255fdc.  v2:= "Malformed URL. Base: " @kind object;
  #L255fe0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L255fe6.  v2:= v5.`retrofit2.RequestBuilder.baseUrl` @type ^`h.z` @kind object;
  #L255fea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L255ff0.  v2:= ", Relative: " @kind object;
  #L255ff4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L255ffa.  v2:= v5.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L255ffe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256004.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L25600a.  v1:= temp @kind object;
  #L25600c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L256012.  throw v0;
}
procedure `void` `setBody`(`retrofit2.RequestBuilder` v0 @kind this, `h.h0` v1 @kind object) @signature `Lretrofit2/RequestBuilder;.setBody:(Lh/h0;)V` @AccessFlag  {
    temp;

  #L256464.  v0.`retrofit2.RequestBuilder.body` @type ^`h.h0` := v1 @kind object;
  #L256468.  return @kind void;
}
procedure `void` `setRelativeUrl`(`retrofit2.RequestBuilder` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lretrofit2/RequestBuilder;.setRelativeUrl:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L25647c.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L256482.  v1:= temp @kind object;
  #L256484.  v0.`retrofit2.RequestBuilder.relativeUrl` @type ^`java.lang.String` := v1 @kind object;
  #L256488.  return @kind void;
}
