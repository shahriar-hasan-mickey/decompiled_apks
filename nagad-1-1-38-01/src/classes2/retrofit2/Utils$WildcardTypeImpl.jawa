record `retrofit2.Utils$WildcardTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.WildcardType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.Utils$WildcardTypeImpl.lowerBound` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.Utils$WildcardTypeImpl.upperBound` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Utils$WildcardTypeImpl` v4 @kind this, `java.lang.reflect.Type`[] v5 @kind object, `java.lang.reflect.Type`[] v6 @kind object) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L259224.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L259228.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L25922e.  v1:= length @variable v6;
  #L259230.  v2:= 1I;
  #L259232.  if v1 > v2 then goto L2592be;
  #L259236.  v1:= length @variable v5;
  #L259238.  if v1 != v2 then goto L2592b2;
  #L25923c.  v1:= length @variable v6;
  #L25923e.  v3:= 0I;
  #L259240.  if v1 != v2 then goto L259284;
  #L259244.  v1:= v6[v3] @kind object;
  #L259248.  if v1 == 0 then goto L259278;
  #L25924c.  v1:= v6[v3] @kind object;
  #L259250.  call `checkNotPrimitive`(v1) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L259256.  v5:= v5[v3] @kind object;
  #L25925a.  if v5 != v0 then goto L25926c;
  #L25925e.  v5:= v6[v3] @kind object;
  #L259262.  v4.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L259266.  v4.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L25926a.  goto L2592a4;
  #L25926c.  v5:= new `java.lang.IllegalArgumentException`;
  #L259270.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L259276.  throw v5;
  #L259278.  v5:= new `java.lang.NullPointerException`;
  #L25927c.  call `<init>`(v5) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L259282.  throw v5;
  #L259284.  v6:= v5[v3] @kind object;
  #L259288.  if v6 == 0 then goto L2592a6;
  #L25928c.  v6:= v5[v3] @kind object;
  #L259290.  call `checkNotPrimitive`(v6) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L259296.  v6:= 0I;
  #L259298.  v4.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L25929c.  v5:= v5[v3] @kind object;
  #L2592a0.  v4.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L2592a4.  return @kind void;
  #L2592a6.  v5:= new `java.lang.NullPointerException`;
  #L2592aa.  call `<init>`(v5) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L2592b0.  throw v5;
  #L2592b2.  v5:= new `java.lang.IllegalArgumentException`;
  #L2592b6.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L2592bc.  throw v5;
  #L2592be.  v5:= new `java.lang.IllegalArgumentException`;
  #L2592c2.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L2592c8.  throw v5;
}
procedure `boolean` `equals`(`retrofit2.Utils$WildcardTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lretrofit2/Utils$WildcardTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2590dc.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L2590e0.  if v0 == 0 then goto L2590f8;
  #L2590e4.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L2590e8.  call temp:= `equals`(v1, v2) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L2590ee.  v2:= temp;
  #L2590f0.  if v2 == 0 then goto L2590f8;
  #L2590f4.  v2:= 1I;
  #L2590f6.  goto L2590fa;
  #L2590f8.  v2:= 0I;
  #L2590fa.  return v2;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2591d4.  v0:= v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L2591d8.  if v0 == 0 then goto L2591ea;
  #L2591dc.  v1:= 1I;
  #L2591de.  v1:= new `java.lang.reflect.Type`[v1];
  #L2591e2.  v2:= 0I;
  #L2591e4.  v1[v2]:= v0 @kind object;
  #L2591e8.  goto L2591ee;
  #L2591ea.  v1:= `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L2591ee.  return v1 @kind object;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L259200.  v0:= 1I;
  #L259202.  v0:= new `java.lang.reflect.Type`[v0];
  #L259206.  v1:= v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L25920a.  v2:= 0I;
  #L25920c.  v0[v2]:= v1 @kind object;
  #L259210.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.Utils$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25910c.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L259110.  if v0 == 0 then goto L259122;
  #L259114.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L25911a.  v0:= temp;
  #L25911c.  v0:= v0 + 31;
  #L259120.  goto L259124;
  #L259122.  v0:= 1I;
  #L259124.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L259128.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L25912e.  v1:= temp;
  #L259130.  v1:= v1 + 31;
  #L259134.  v0:= v0 ^~ v1 @kind int;
  #L259136.  return v0;
}
procedure `java.lang.String` `toString`(`retrofit2.Utils$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L259148.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L25914c.  if v0 == 0 then goto L259180;
  #L259150.  v0:= new `java.lang.StringBuilder`;
  #L259154.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L25915a.  v1:= "? super " @kind object;
  #L25915e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L259164.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L259168.  call temp:= `typeToString`(v1) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L25916e.  v1:= temp @kind object;
  #L259170.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L259176.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L25917c.  v0:= temp @kind object;
  #L25917e.  return v0 @kind object;
  #L259180.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L259184.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L259188.  if v0 != v1 then goto L259192;
  #L25918c.  v0:= "?" @kind object;
  #L259190.  return v0 @kind object;
  #L259192.  v0:= new `java.lang.StringBuilder`;
  #L259196.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L25919c.  v1:= "? extends " @kind object;
  #L2591a0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2591a6.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L2591aa.  call temp:= `typeToString`(v1) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L2591b0.  v1:= temp @kind object;
  #L2591b2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2591b8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2591be.  v0:= temp @kind object;
  #L2591c0.  return v0 @kind object;
}
