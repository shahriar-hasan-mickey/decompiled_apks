record `retrofit2.RequestFactory$Builder` @kind class @AccessFlag FINAL {
  `h.b0` `retrofit2.RequestFactory$Builder.contentType` @AccessFlag ;
  `boolean` `retrofit2.RequestFactory$Builder.gotBody` @AccessFlag ;
  `boolean` `retrofit2.RequestFactory$Builder.gotField` @AccessFlag ;
  `boolean` `retrofit2.RequestFactory$Builder.gotPart` @AccessFlag ;
  `boolean` `retrofit2.RequestFactory$Builder.gotPath` @AccessFlag ;
  `boolean` `retrofit2.RequestFactory$Builder.gotQuery` @AccessFlag ;
  `boolean` `retrofit2.RequestFactory$Builder.gotQueryMap` @AccessFlag ;
  `boolean` `retrofit2.RequestFactory$Builder.gotQueryName` @AccessFlag ;
  `boolean` `retrofit2.RequestFactory$Builder.gotUrl` @AccessFlag ;
  `boolean` `retrofit2.RequestFactory$Builder.hasBody` @AccessFlag ;
  `h.y` `retrofit2.RequestFactory$Builder.headers` @AccessFlag ;
  `java.lang.String` `retrofit2.RequestFactory$Builder.httpMethod` @AccessFlag ;
  `boolean` `retrofit2.RequestFactory$Builder.isFormEncoded` @AccessFlag ;
  `boolean` `retrofit2.RequestFactory$Builder.isKotlinSuspendFunction` @AccessFlag ;
  `boolean` `retrofit2.RequestFactory$Builder.isMultipart` @AccessFlag ;
  `java.lang.reflect.Method` `retrofit2.RequestFactory$Builder.method` @AccessFlag FINAL;
  `java.lang.annotation.Annotation`[] `retrofit2.RequestFactory$Builder.methodAnnotations` @AccessFlag FINAL;
  `java.lang.annotation.Annotation`[][] `retrofit2.RequestFactory$Builder.parameterAnnotationsArray` @AccessFlag FINAL;
  `retrofit2.ParameterHandler`[] `retrofit2.RequestFactory$Builder.parameterHandlers` @AccessFlag ;
  `java.lang.reflect.Type`[] `retrofit2.RequestFactory$Builder.parameterTypes` @AccessFlag FINAL;
  `java.lang.String` `retrofit2.RequestFactory$Builder.relativeUrl` @AccessFlag ;
  `java.util.Set` `retrofit2.RequestFactory$Builder.relativeUrlParamNames` @AccessFlag ;
  `retrofit2.Retrofit` `retrofit2.RequestFactory$Builder.retrofit` @AccessFlag FINAL;
}
global `java.lang.String` `@@retrofit2.RequestFactory$Builder.PARAM` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@retrofit2.RequestFactory$Builder.PARAM_NAME_REGEX` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@retrofit2.RequestFactory$Builder.PARAM_URL_REGEX` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/RequestFactory$Builder;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L257770.  v0:= "\\{([a-zA-Z][a-zA-Z0-9_-]*)\\}" @kind object;
  #L257774.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L25777a.  v0:= temp @kind object;
  #L25777c.  `@@retrofit2.RequestFactory$Builder.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L257780.  v0:= "[a-zA-Z][a-zA-Z0-9_-]*" @kind object;
  #L257784.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L25778a.  v0:= temp @kind object;
  #L25778c.  `@@retrofit2.RequestFactory$Builder.PARAM_NAME_REGEX` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L257790.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.RequestFactory$Builder` v0 @kind this, `retrofit2.Retrofit` v1 @kind object, `java.lang.reflect.Method` v2 @kind object) @signature `Lretrofit2/RequestFactory$Builder;.<init>:(Lretrofit2/Retrofit;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2577a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2577aa.  v0.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` := v1 @kind object;
  #L2577ae.  v0.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L2577b2.  call temp:= `getAnnotations`(v2) @signature `Ljava/lang/reflect/Method;.getAnnotations:()[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L2577b8.  v1:= temp @kind object;
  #L2577ba.  v0.`retrofit2.RequestFactory$Builder.methodAnnotations` @type ^`java.lang.annotation.Annotation`[] := v1 @kind object;
  #L2577be.  call temp:= `getGenericParameterTypes`(v2) @signature `Ljava/lang/reflect/Method;.getGenericParameterTypes:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L2577c4.  v1:= temp @kind object;
  #L2577c6.  v0.`retrofit2.RequestFactory$Builder.parameterTypes` @type ^`java.lang.reflect.Type`[] := v1 @kind object;
  #L2577ca.  call temp:= `getParameterAnnotations`(v2) @signature `Ljava/lang/reflect/Method;.getParameterAnnotations:()[[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L2577d0.  v1:= temp @kind object;
  #L2577d2.  v0.`retrofit2.RequestFactory$Builder.parameterAnnotationsArray` @type ^`java.lang.annotation.Annotation`[][] := v1 @kind object;
  #L2577d6.  return @kind void;
}
procedure `java.lang.Class` `boxIfPrimitive`(`java.lang.Class` v1 @kind object) @signature `Lretrofit2/RequestFactory$Builder;.boxIfPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L25649c.  v0:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L2564a0.  if v0 != v1 then goto L2564aa;
  #L2564a4.  v1:= constclass @type ^`java.lang.Boolean` @kind object;
  #L2564a8.  return v1 @kind object;
  #L2564aa.  v0:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L2564ae.  if v0 != v1 then goto L2564b8;
  #L2564b2.  v1:= constclass @type ^`java.lang.Byte` @kind object;
  #L2564b6.  return v1 @kind object;
  #L2564b8.  v0:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L2564bc.  if v0 != v1 then goto L2564c6;
  #L2564c0.  v1:= constclass @type ^`java.lang.Character` @kind object;
  #L2564c4.  return v1 @kind object;
  #L2564c6.  v0:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L2564ca.  if v0 != v1 then goto L2564d4;
  #L2564ce.  v1:= constclass @type ^`java.lang.Double` @kind object;
  #L2564d2.  return v1 @kind object;
  #L2564d4.  v0:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L2564d8.  if v0 != v1 then goto L2564e2;
  #L2564dc.  v1:= constclass @type ^`java.lang.Float` @kind object;
  #L2564e0.  return v1 @kind object;
  #L2564e2.  v0:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L2564e6.  if v0 != v1 then goto L2564f0;
  #L2564ea.  v1:= constclass @type ^`java.lang.Integer` @kind object;
  #L2564ee.  return v1 @kind object;
  #L2564f0.  v0:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L2564f4.  if v0 != v1 then goto L2564fe;
  #L2564f8.  v1:= constclass @type ^`java.lang.Long` @kind object;
  #L2564fc.  return v1 @kind object;
  #L2564fe.  v0:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L256502.  if v0 != v1 then goto L25650a;
  #L256506.  v1:= constclass @type ^`java.lang.Short` @kind object;
  #L25650a.  return v1 @kind object;
}
procedure `h.y` `parseHeaders`(`retrofit2.RequestFactory$Builder` v8 @kind this, `java.lang.String`[] v9 @kind object) @signature `Lretrofit2/RequestFactory$Builder;.parseHeaders:([Ljava/lang/String;)Lh/y;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L256564.  v0:= new `h.y$a`;
  #L256568.  call `<init>`(v0) @signature `Lh/y$a;.<init>:()V` @kind direct;
  #L25656e.  v1:= length @variable v9;
  #L256570.  v2:= 0I;
  #L256572.  v3:= 0I;
  #L256574.  if v3 >= v1 then goto L25661e;
  #L256578.  v4:= v9[v3] @kind object;
  #L25657c.  v5:= 58I;
  #L256580.  call temp:= `indexOf`(v4, v5) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L256586.  v5:= temp;
  #L256588.  v6:= -1I;
  #L25658a.  v7:= 1I;
  #L25658c.  if v5 == v6 then goto L256604;
  #L256590.  if v5 == 0 then goto L256604;
  #L256594.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L25659a.  v6:= temp;
  #L25659c.  v6:= v6 - v7 @kind int;
  #L25659e.  if v5 == v6 then goto L256604;
  #L2565a2.  call temp:= `substring`(v4, v2, v5) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2565a8.  v6:= temp @kind object;
  #L2565aa.  v5:= v5 + 1;
  #L2565ae.  call temp:= `substring`(v4, v5) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L2565b4.  v4:= temp @kind object;
  #L2565b6.  call temp:= `trim`(v4) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2565bc.  v4:= temp @kind object;
  #L2565be.  v5:= "Content-Type" @kind object;
  #L2565c2.  call temp:= `equalsIgnoreCase`(v5, v6) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2565c8.  v5:= temp;
  #L2565ca.  if v5 == 0 then goto L2565f8;
  #L2565ce.  call temp:= `get`(v4) @signature `Lh/b0;.get:(Ljava/lang/String;)Lh/b0;` @kind static;
  #L2565d4.  v5:= temp @kind object;
  #L2565d6.  v8.`retrofit2.RequestFactory$Builder.contentType` @type ^`h.b0` := v5 @kind object;
  #L2565da.  goto L2565fe;
  #L2565dc.  v9:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L2565de.  v0:= v8.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2565e2.  v1:= new `java.lang.Object`[v7];
  #L2565e6.  v1[v2]:= v4 @kind object;
  #L2565ea.  v2:= "Malformed content type: %s" @kind object;
  #L2565ee.  call temp:= `methodError`(v0, v9, v2, v1) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2565f4.  v9:= temp @kind object;
  #L2565f6.  throw v9;
  #L2565f8.  call temp:= `add`(v0, v6, v4) @signature `Lh/y$a;.add:(Ljava/lang/String;Ljava/lang/String;)Lh/y$a;` @kind virtual;
  #L2565fe.  v3:= v3 + 1;
  #L256602.  goto L256574;
  #L256604.  v9:= v8.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256608.  v0:= new `java.lang.Object`[v7];
  #L25660c.  v0[v2]:= v4 @kind object;
  #L256610.  v1:= "@Headers value must be in the form \"Name: Value\". Found: \"%s\"" @kind object;
  #L256614.  call temp:= `methodError`(v9, v1, v0) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L25661a.  v9:= temp @kind object;
  #L25661c.  throw v9;
  #L25661e.  call temp:= `build`(v0) @signature `Lh/y$a;.build:()Lh/y;` @kind virtual;
  #L256624.  v9:= temp @kind object;
  #L256626.  return v9 @kind object;
  catch `java.lang.IllegalArgumentException` @[L2565ce..L2565da] goto L2565dc;
}
procedure `void` `parseHttpMethodAndPath`(`retrofit2.RequestFactory$Builder` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object, `boolean` v6 ) @signature `Lretrofit2/RequestFactory$Builder;.parseHttpMethodAndPath:(Ljava/lang/String;Ljava/lang/String;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2577e8.  v0:= v3.`retrofit2.RequestFactory$Builder.httpMethod` @type ^`java.lang.String` @kind object;
  #L2577ec.  v1:= 0I;
  #L2577ee.  v2:= 1I;
  #L2577f0.  if v0 != 0 then goto L25787a;
  #L2577f4.  v3.`retrofit2.RequestFactory$Builder.httpMethod` @type ^`java.lang.String` := v4 @kind object;
  #L2577f8.  v3.`retrofit2.RequestFactory$Builder.hasBody` @type ^`boolean` := v6 @kind boolean;
  #L2577fc.  call temp:= `isEmpty`(v5) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L257802.  v4:= temp;
  #L257804.  if v4 == 0 then goto L25780a;
  #L257808.  return @kind void;
  #L25780a.  v4:= 63I;
  #L25780e.  call temp:= `indexOf`(v5, v4) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L257814.  v4:= temp;
  #L257816.  v6:= -1I;
  #L257818.  if v4 == v6 then goto L257868;
  #L25781c.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L257822.  v6:= temp;
  #L257824.  v6:= v6 - v2 @kind int;
  #L257826.  if v4 >= v6 then goto L257868;
  #L25782a.  v4:= v4 + v2 @kind int;
  #L25782c.  call temp:= `substring`(v5, v4) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L257832.  v4:= temp @kind object;
  #L257834.  v6:= `@@retrofit2.RequestFactory$Builder.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` @kind object;
  #L257838.  call temp:= `matcher`(v6, v4) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L25783e.  v6:= temp @kind object;
  #L257840.  call temp:= `find`(v6) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L257846.  v6:= temp;
  #L257848.  if v6 != 0 then goto L25784e;
  #L25784c.  goto L257868;
  #L25784e.  v5:= v3.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L257852.  v6:= new `java.lang.Object`[v2];
  #L257856.  v6[v1]:= v4 @kind object;
  #L25785a.  v4:= "URL query string \"%s\" must not have replace block. For dynamic query parameters use @Query." @kind object;
  #L25785e.  call temp:= `methodError`(v5, v4, v6) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257864.  v4:= temp @kind object;
  #L257866.  throw v4;
  #L257868.  v3.`retrofit2.RequestFactory$Builder.relativeUrl` @type ^`java.lang.String` := v5 @kind object;
  #L25786c.  call temp:= `parsePathParameters`(v5) @signature `Lretrofit2/RequestFactory$Builder;.parsePathParameters:(Ljava/lang/String;)Ljava/util/Set;` @kind static;
  #L257872.  v4:= temp @kind object;
  #L257874.  v3.`retrofit2.RequestFactory$Builder.relativeUrlParamNames` @type ^`java.util.Set` := v4 @kind object;
  #L257878.  return @kind void;
  #L25787a.  v5:= v3.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L25787e.  v6:= 2I;
  #L257880.  v6:= new `java.lang.Object`[v6];
  #L257884.  v6[v1]:= v0 @kind object;
  #L257888.  v6[v2]:= v4 @kind object;
  #L25788c.  v4:= "Only one HTTP method is allowed. Found: %s and %s." @kind object;
  #L257890.  call temp:= `methodError`(v5, v4, v6) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257896.  v4:= temp @kind object;
  #L257898.  throw v4;
}
procedure `void` `parseMethodAnnotation`(`retrofit2.RequestFactory$Builder` v4 @kind this, `java.lang.annotation.Annotation` v5 @kind object) @signature `Lretrofit2/RequestFactory$Builder;.parseMethodAnnotation:(Ljava/lang/annotation/Annotation;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2578ac.  v0:= instanceof @variable v5 @type ^`retrofit2.http.DELETE` @kind boolean;
  #L2578b0.  v1:= 0I;
  #L2578b2.  if v0 == 0 then goto L2578d0;
  #L2578b6.  v5:= (`retrofit2.http.DELETE`) v5 @kind object;
  #L2578ba.  call temp:= `value`(v5) @signature `Lretrofit2/http/DELETE;.value:()Ljava/lang/String;` @kind interface;
  #L2578c0.  v5:= temp @kind object;
  #L2578c2.  v0:= "DELETE" @kind object;
  #L2578c6.  call `parseHttpMethodAndPath`(v4, v0, v5, v1) @signature `Lretrofit2/RequestFactory$Builder;.parseHttpMethodAndPath:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L2578cc.  goto L257a5a;
  #L2578d0.  v0:= instanceof @variable v5 @type ^`retrofit2.http.GET` @kind boolean;
  #L2578d4.  if v0 == 0 then goto L2578f2;
  #L2578d8.  v5:= (`retrofit2.http.GET`) v5 @kind object;
  #L2578dc.  call temp:= `value`(v5) @signature `Lretrofit2/http/GET;.value:()Ljava/lang/String;` @kind interface;
  #L2578e2.  v5:= temp @kind object;
  #L2578e4.  v0:= "GET" @kind object;
  #L2578e8.  call `parseHttpMethodAndPath`(v4, v0, v5, v1) @signature `Lretrofit2/RequestFactory$Builder;.parseHttpMethodAndPath:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L2578ee.  goto L257a5a;
  #L2578f2.  v0:= instanceof @variable v5 @type ^`retrofit2.http.HEAD` @kind boolean;
  #L2578f6.  if v0 == 0 then goto L257914;
  #L2578fa.  v5:= (`retrofit2.http.HEAD`) v5 @kind object;
  #L2578fe.  call temp:= `value`(v5) @signature `Lretrofit2/http/HEAD;.value:()Ljava/lang/String;` @kind interface;
  #L257904.  v5:= temp @kind object;
  #L257906.  v0:= "HEAD" @kind object;
  #L25790a.  call `parseHttpMethodAndPath`(v4, v0, v5, v1) @signature `Lretrofit2/RequestFactory$Builder;.parseHttpMethodAndPath:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L257910.  goto L257a5a;
  #L257914.  v0:= instanceof @variable v5 @type ^`retrofit2.http.PATCH` @kind boolean;
  #L257918.  v2:= 1I;
  #L25791a.  if v0 == 0 then goto L257938;
  #L25791e.  v5:= (`retrofit2.http.PATCH`) v5 @kind object;
  #L257922.  call temp:= `value`(v5) @signature `Lretrofit2/http/PATCH;.value:()Ljava/lang/String;` @kind interface;
  #L257928.  v5:= temp @kind object;
  #L25792a.  v0:= "PATCH" @kind object;
  #L25792e.  call `parseHttpMethodAndPath`(v4, v0, v5, v2) @signature `Lretrofit2/RequestFactory$Builder;.parseHttpMethodAndPath:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L257934.  goto L257a5a;
  #L257938.  v0:= instanceof @variable v5 @type ^`retrofit2.http.POST` @kind boolean;
  #L25793c.  if v0 == 0 then goto L25795a;
  #L257940.  v5:= (`retrofit2.http.POST`) v5 @kind object;
  #L257944.  call temp:= `value`(v5) @signature `Lretrofit2/http/POST;.value:()Ljava/lang/String;` @kind interface;
  #L25794a.  v5:= temp @kind object;
  #L25794c.  v0:= "POST" @kind object;
  #L257950.  call `parseHttpMethodAndPath`(v4, v0, v5, v2) @signature `Lretrofit2/RequestFactory$Builder;.parseHttpMethodAndPath:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L257956.  goto L257a5a;
  #L25795a.  v0:= instanceof @variable v5 @type ^`retrofit2.http.PUT` @kind boolean;
  #L25795e.  if v0 == 0 then goto L25797c;
  #L257962.  v5:= (`retrofit2.http.PUT`) v5 @kind object;
  #L257966.  call temp:= `value`(v5) @signature `Lretrofit2/http/PUT;.value:()Ljava/lang/String;` @kind interface;
  #L25796c.  v5:= temp @kind object;
  #L25796e.  v0:= "PUT" @kind object;
  #L257972.  call `parseHttpMethodAndPath`(v4, v0, v5, v2) @signature `Lretrofit2/RequestFactory$Builder;.parseHttpMethodAndPath:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L257978.  goto L257a5a;
  #L25797c.  v0:= instanceof @variable v5 @type ^`retrofit2.http.OPTIONS` @kind boolean;
  #L257980.  if v0 == 0 then goto L25799c;
  #L257984.  v5:= (`retrofit2.http.OPTIONS`) v5 @kind object;
  #L257988.  call temp:= `value`(v5) @signature `Lretrofit2/http/OPTIONS;.value:()Ljava/lang/String;` @kind interface;
  #L25798e.  v5:= temp @kind object;
  #L257990.  v0:= "OPTIONS" @kind object;
  #L257994.  call `parseHttpMethodAndPath`(v4, v0, v5, v1) @signature `Lretrofit2/RequestFactory$Builder;.parseHttpMethodAndPath:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L25799a.  goto L257a5a;
  #L25799c.  v0:= instanceof @variable v5 @type ^`retrofit2.http.HTTP` @kind boolean;
  #L2579a0.  if v0 == 0 then goto L2579c8;
  #L2579a4.  v5:= (`retrofit2.http.HTTP`) v5 @kind object;
  #L2579a8.  call temp:= `method`(v5) @signature `Lretrofit2/http/HTTP;.method:()Ljava/lang/String;` @kind interface;
  #L2579ae.  v0:= temp @kind object;
  #L2579b0.  call temp:= `path`(v5) @signature `Lretrofit2/http/HTTP;.path:()Ljava/lang/String;` @kind interface;
  #L2579b6.  v1:= temp @kind object;
  #L2579b8.  call temp:= `hasBody`(v5) @signature `Lretrofit2/http/HTTP;.hasBody:()Z` @kind interface;
  #L2579be.  v5:= temp;
  #L2579c0.  call `parseHttpMethodAndPath`(v4, v0, v1, v5) @signature `Lretrofit2/RequestFactory$Builder;.parseHttpMethodAndPath:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L2579c6.  goto L257a5a;
  #L2579c8.  v0:= instanceof @variable v5 @type ^`retrofit2.http.Headers` @kind boolean;
  #L2579cc.  if v0 == 0 then goto L257a06;
  #L2579d0.  v5:= (`retrofit2.http.Headers`) v5 @kind object;
  #L2579d4.  call temp:= `value`(v5) @signature `Lretrofit2/http/Headers;.value:()[Ljava/lang/String;` @kind interface;
  #L2579da.  v5:= temp @kind object;
  #L2579dc.  v0:= length @variable v5;
  #L2579de.  if v0 == 0 then goto L2579f0;
  #L2579e2.  call temp:= `parseHeaders`(v4, v5) @signature `Lretrofit2/RequestFactory$Builder;.parseHeaders:([Ljava/lang/String;)Lh/y;` @kind direct;
  #L2579e8.  v5:= temp @kind object;
  #L2579ea.  v4.`retrofit2.RequestFactory$Builder.headers` @type ^`h.y` := v5 @kind object;
  #L2579ee.  goto L257a5a;
  #L2579f0.  v5:= v4.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2579f4.  v0:= new `java.lang.Object`[v1];
  #L2579f8.  v1:= "@Headers annotation is empty." @kind object;
  #L2579fc.  call temp:= `methodError`(v5, v1, v0) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257a02.  v5:= temp @kind object;
  #L257a04.  throw v5;
  #L257a06.  v0:= instanceof @variable v5 @type ^`retrofit2.http.Multipart` @kind boolean;
  #L257a0a.  v3:= "Only one encoding annotation is allowed." @kind object;
  #L257a0e.  if v0 == 0 then goto L257a32;
  #L257a12.  v5:= v4.`retrofit2.RequestFactory$Builder.isFormEncoded` @type ^`boolean` @kind boolean;
  #L257a16.  if v5 != 0 then goto L257a20;
  #L257a1a.  v4.`retrofit2.RequestFactory$Builder.isMultipart` @type ^`boolean` := v2 @kind boolean;
  #L257a1e.  goto L257a5a;
  #L257a20.  v5:= v4.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L257a24.  v0:= new `java.lang.Object`[v1];
  #L257a28.  call temp:= `methodError`(v5, v3, v0) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257a2e.  v5:= temp @kind object;
  #L257a30.  throw v5;
  #L257a32.  v5:= instanceof @variable v5 @type ^`retrofit2.http.FormUrlEncoded` @kind boolean;
  #L257a36.  if v5 == 0 then goto L257a5a;
  #L257a3a.  v5:= v4.`retrofit2.RequestFactory$Builder.isMultipart` @type ^`boolean` @kind boolean;
  #L257a3e.  if v5 != 0 then goto L257a48;
  #L257a42.  v4.`retrofit2.RequestFactory$Builder.isFormEncoded` @type ^`boolean` := v2 @kind boolean;
  #L257a46.  goto L257a5a;
  #L257a48.  v5:= v4.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L257a4c.  v0:= new `java.lang.Object`[v1];
  #L257a50.  call temp:= `methodError`(v5, v3, v0) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257a56.  v5:= temp @kind object;
  #L257a58.  throw v5;
  #L257a5a.  return @kind void;
}
procedure `retrofit2.ParameterHandler` `parseParameter`(`retrofit2.RequestFactory$Builder` v6 @kind this, `int` v7 , `java.lang.reflect.Type` v8 @kind object, `java.lang.annotation.Annotation`[] v9 @kind object, `boolean` v10 ) @signature `Lretrofit2/RequestFactory$Builder;.parseParameter:(ILjava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Z)Lretrofit2/ParameterHandler;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L256648.  v0:= 0I;
  #L25664a.  v1:= 0I;
  #L25664c.  if v9 == 0 then goto L25668e;
  #L256650.  v2:= length @variable v9;
  #L256652.  v4:= v0 @kind object;
  #L256654.  v3:= 0I;
  #L256656.  if v3 >= v2 then goto L256690;
  #L25665a.  v5:= v9[v3] @kind object;
  #L25665e.  call temp:= `parseParameterAnnotation`(v6, v7, v8, v9, v5) @signature `Lretrofit2/RequestFactory$Builder;.parseParameterAnnotation:(ILjava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Ljava/lang/annotation/Annotation;)Lretrofit2/ParameterHandler;` @kind direct;
  #L256664.  v5:= temp @kind object;
  #L256666.  if v5 != 0 then goto L25666c;
  #L25666a.  goto L256672;
  #L25666c.  if v4 != 0 then goto L256678;
  #L256670.  v4:= v5 @kind object;
  #L256672.  v3:= v3 + 1;
  #L256676.  goto L256656;
  #L256678.  v8:= v6.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L25667c.  v9:= new `java.lang.Object`[v1];
  #L256680.  v10:= "Multiple Retrofit annotations found, only one allowed." @kind object;
  #L256684.  call temp:= `parameterError`(v8, v7, v10, v9) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L25668a.  v7:= temp @kind object;
  #L25668c.  throw v7;
  #L25668e.  v4:= v0 @kind object;
  #L256690.  if v4 != 0 then goto L2566c6;
  #L256694.  if v10 == 0 then goto L2566b0;
  #L256698.  call temp:= `getRawType`(v8) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L25669e.  v8:= temp @kind object;
  #L2566a0.  v9:= constclass @type ^`kotlin.t.d` @kind object;
  #L2566a4.  if v8 != v9 then goto L2566b0;
  #L2566a8.  v8:= 1I;
  #L2566aa.  v6.`retrofit2.RequestFactory$Builder.isKotlinSuspendFunction` @type ^`boolean` := v8 @kind boolean;
  #L2566ae.  return v0 @kind object;
  #L2566b0.  v8:= v6.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2566b4.  v9:= new `java.lang.Object`[v1];
  #L2566b8.  v10:= "No Retrofit annotation found." @kind object;
  #L2566bc.  call temp:= `parameterError`(v8, v7, v10, v9) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2566c2.  v7:= temp @kind object;
  #L2566c4.  throw v7;
  #L2566c6.  return v4 @kind object;
  catch `java.lang.NoClassDefFoundError` @[L256698..L2566ae] goto L2566b0;
}
procedure `retrofit2.ParameterHandler` `parseParameterAnnotation`(`retrofit2.RequestFactory$Builder` v10 @kind this, `int` v11 , `java.lang.reflect.Type` v12 @kind object, `java.lang.annotation.Annotation`[] v13 @kind object, `java.lang.annotation.Annotation` v14 @kind object) @signature `Lretrofit2/RequestFactory$Builder;.parseParameterAnnotation:(ILjava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Ljava/lang/annotation/Annotation;)Lretrofit2/ParameterHandler;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2566e8.  v0:= constclass @type ^`h.c0$b` @kind object;
  #L2566ec.  v1:= instanceof @variable v14 @type ^`retrofit2.http.Url` @kind boolean;
  #L2566f0.  v2:= "@Path parameters may not be used with @Url." @kind object;
  #L2566f4.  v3:= 1I;
  #L2566f6.  v4:= 0I;
  #L2566f8.  if v1 == 0 then goto L256822;
  #L2566fc.  call `validateResolvableType`(v10, v11, v12) @signature `Lretrofit2/RequestFactory$Builder;.validateResolvableType:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L256702.  v13:= v10.`retrofit2.RequestFactory$Builder.gotUrl` @type ^`boolean` @kind boolean;
  #L256706.  if v13 != 0 then goto L25680c;
  #L25670a.  v13:= v10.`retrofit2.RequestFactory$Builder.gotPath` @type ^`boolean` @kind boolean;
  #L25670e.  if v13 != 0 then goto L2567fa;
  #L256712.  v13:= v10.`retrofit2.RequestFactory$Builder.gotQuery` @type ^`boolean` @kind boolean;
  #L256716.  if v13 != 0 then goto L2567e4;
  #L25671a.  v13:= v10.`retrofit2.RequestFactory$Builder.gotQueryName` @type ^`boolean` @kind boolean;
  #L25671e.  if v13 != 0 then goto L2567ce;
  #L256722.  v13:= v10.`retrofit2.RequestFactory$Builder.gotQueryMap` @type ^`boolean` @kind boolean;
  #L256726.  if v13 != 0 then goto L2567b8;
  #L25672a.  v13:= v10.`retrofit2.RequestFactory$Builder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L25672e.  if v13 != 0 then goto L25679a;
  #L256732.  v10.`retrofit2.RequestFactory$Builder.gotUrl` @type ^`boolean` := v3 @kind boolean;
  #L256736.  v13:= constclass @type ^`h.z` @kind object;
  #L25673a.  if v12 == v13 then goto L25678a;
  #L25673e.  v13:= constclass @type ^`java.lang.String` @kind object;
  #L256742.  if v12 == v13 then goto L25678a;
  #L256746.  v13:= constclass @type ^`java.net.URI` @kind object;
  #L25674a.  if v12 == v13 then goto L25678a;
  #L25674e.  v13:= instanceof @variable v12 @type ^`java.lang.Class` @kind boolean;
  #L256752.  if v13 == 0 then goto L256774;
  #L256756.  v12:= (`java.lang.Class`) v12 @kind object;
  #L25675a.  call temp:= `getName`(v12) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L256760.  v12:= temp @kind object;
  #L256762.  v13:= "android.net.Uri" @kind object;
  #L256766.  call temp:= `equals`(v13, v12) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L25676c.  v12:= temp;
  #L25676e.  if v12 == 0 then goto L256774;
  #L256772.  goto L25678a;
  #L256774.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256778.  v13:= new `java.lang.Object`[v4];
  #L25677c.  v14:= "@Url must be okhttp3.HttpUrl, String, java.net.URI, or android.net.Uri type." @kind object;
  #L256780.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L256786.  v11:= temp @kind object;
  #L256788.  throw v11;
  #L25678a.  v12:= new `retrofit2.ParameterHandler$RelativeUrl`;
  #L25678e.  v13:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256792.  call `<init>`(v12, v13, v11) @signature `Lretrofit2/ParameterHandler$RelativeUrl;.<init>:(Ljava/lang/reflect/Method;I)V` @kind direct;
  #L256798.  return v12 @kind object;
  #L25679a.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L25679e.  v13:= new `java.lang.Object`[v3];
  #L2567a2.  v14:= v10.`retrofit2.RequestFactory$Builder.httpMethod` @type ^`java.lang.String` @kind object;
  #L2567a6.  v13[v4]:= v14 @kind object;
  #L2567aa.  v14:= "@Url cannot be used with @%s URL" @kind object;
  #L2567ae.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2567b4.  v11:= temp @kind object;
  #L2567b6.  throw v11;
  #L2567b8.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2567bc.  v13:= new `java.lang.Object`[v4];
  #L2567c0.  v14:= "A @Url parameter must not come after a @QueryMap." @kind object;
  #L2567c4.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2567ca.  v11:= temp @kind object;
  #L2567cc.  throw v11;
  #L2567ce.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2567d2.  v13:= new `java.lang.Object`[v4];
  #L2567d6.  v14:= "A @Url parameter must not come after a @QueryName." @kind object;
  #L2567da.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2567e0.  v11:= temp @kind object;
  #L2567e2.  throw v11;
  #L2567e4.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2567e8.  v13:= new `java.lang.Object`[v4];
  #L2567ec.  v14:= "A @Url parameter must not come after a @Query." @kind object;
  #L2567f0.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2567f6.  v11:= temp @kind object;
  #L2567f8.  throw v11;
  #L2567fa.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2567fe.  v13:= new `java.lang.Object`[v4];
  #L256802.  call temp:= `parameterError`(v12, v11, v2, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L256808.  v11:= temp @kind object;
  #L25680a.  throw v11;
  #L25680c.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256810.  v13:= new `java.lang.Object`[v4];
  #L256814.  v14:= "Multiple @Url method annotations found." @kind object;
  #L256818.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L25681e.  v11:= temp @kind object;
  #L256820.  throw v11;
  #L256822.  v1:= instanceof @variable v14 @type ^`retrofit2.http.Path` @kind boolean;
  #L256826.  if v1 == 0 then goto L256908;
  #L25682a.  call `validateResolvableType`(v10, v11, v12) @signature `Lretrofit2/RequestFactory$Builder;.validateResolvableType:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L256830.  v0:= v10.`retrofit2.RequestFactory$Builder.gotQuery` @type ^`boolean` @kind boolean;
  #L256834.  if v0 != 0 then goto L2568f2;
  #L256838.  v0:= v10.`retrofit2.RequestFactory$Builder.gotQueryName` @type ^`boolean` @kind boolean;
  #L25683c.  if v0 != 0 then goto L2568dc;
  #L256840.  v0:= v10.`retrofit2.RequestFactory$Builder.gotQueryMap` @type ^`boolean` @kind boolean;
  #L256844.  if v0 != 0 then goto L2568c6;
  #L256848.  v0:= v10.`retrofit2.RequestFactory$Builder.gotUrl` @type ^`boolean` @kind boolean;
  #L25684c.  if v0 != 0 then goto L2568b4;
  #L256850.  v0:= v10.`retrofit2.RequestFactory$Builder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L256854.  if v0 == 0 then goto L256896;
  #L256858.  v10.`retrofit2.RequestFactory$Builder.gotPath` @type ^`boolean` := v3 @kind boolean;
  #L25685c.  v14:= (`retrofit2.http.Path`) v14 @kind object;
  #L256860.  call temp:= `value`(v14) @signature `Lretrofit2/http/Path;.value:()Ljava/lang/String;` @kind interface;
  #L256866.  v3:= temp @kind object;
  #L256868.  call `validatePathName`(v10, v11, v3) @signature `Lretrofit2/RequestFactory$Builder;.validatePathName:(ILjava/lang/String;)V` @kind direct;
  #L25686e.  v0:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L256872.  call temp:= `stringConverter`(v0, v12, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L256878.  v4:= temp @kind object;
  #L25687a.  v12:= new `retrofit2.ParameterHandler$Path`;
  #L25687e.  v1:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256882.  call temp:= `encoded`(v14) @signature `Lretrofit2/http/Path;.encoded:()Z` @kind interface;
  #L256888.  v5:= temp;
  #L25688a.  v0:= v12 @kind object;
  #L25688c.  v2:= v11;
  #L25688e.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lretrofit2/ParameterHandler$Path;.<init>:(Ljava/lang/reflect/Method;ILjava/lang/String;Lretrofit2/Converter;Z)V` @kind direct;
  #L256894.  return v12 @kind object;
  #L256896.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L25689a.  v13:= new `java.lang.Object`[v3];
  #L25689e.  v14:= v10.`retrofit2.RequestFactory$Builder.httpMethod` @type ^`java.lang.String` @kind object;
  #L2568a2.  v13[v4]:= v14 @kind object;
  #L2568a6.  v14:= "@Path can only be used with relative url on @%s" @kind object;
  #L2568aa.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2568b0.  v11:= temp @kind object;
  #L2568b2.  throw v11;
  #L2568b4.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2568b8.  v13:= new `java.lang.Object`[v4];
  #L2568bc.  call temp:= `parameterError`(v12, v11, v2, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2568c2.  v11:= temp @kind object;
  #L2568c4.  throw v11;
  #L2568c6.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2568ca.  v13:= new `java.lang.Object`[v4];
  #L2568ce.  v14:= "A @Path parameter must not come after a @QueryMap." @kind object;
  #L2568d2.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2568d8.  v11:= temp @kind object;
  #L2568da.  throw v11;
  #L2568dc.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2568e0.  v13:= new `java.lang.Object`[v4];
  #L2568e4.  v14:= "A @Path parameter must not come after a @QueryName." @kind object;
  #L2568e8.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2568ee.  v11:= temp @kind object;
  #L2568f0.  throw v11;
  #L2568f2.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2568f6.  v13:= new `java.lang.Object`[v4];
  #L2568fa.  v14:= "A @Path parameter must not come after a @Query." @kind object;
  #L2568fe.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L256904.  v11:= temp @kind object;
  #L256906.  throw v11;
  #L256908.  v1:= instanceof @variable v14 @type ^`retrofit2.http.Query` @kind boolean;
  #L25690c.  v2:= "<String>)" @kind object;
  #L256910.  v5:= " must include generic type (e.g., " @kind object;
  #L256914.  if v1 == 0 then goto L256a22;
  #L256918.  call `validateResolvableType`(v10, v11, v12) @signature `Lretrofit2/RequestFactory$Builder;.validateResolvableType:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L25691e.  v14:= (`retrofit2.http.Query`) v14 @kind object;
  #L256922.  call temp:= `value`(v14) @signature `Lretrofit2/http/Query;.value:()Ljava/lang/String;` @kind interface;
  #L256928.  v0:= temp @kind object;
  #L25692a.  call temp:= `encoded`(v14) @signature `Lretrofit2/http/Query;.encoded:()Z` @kind interface;
  #L256930.  v14:= temp;
  #L256932.  call temp:= `getRawType`(v12) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L256938.  v1:= temp @kind object;
  #L25693a.  v10.`retrofit2.RequestFactory$Builder.gotQuery` @type ^`boolean` := v3 @kind boolean;
  #L25693e.  v3:= constclass @type ^`java.lang.Iterable` @kind object;
  #L256942.  call temp:= `isAssignableFrom`(v3, v1) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L256948.  v3:= temp;
  #L25694a.  if v3 == 0 then goto L2569ce;
  #L25694e.  v3:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L256952.  if v3 == 0 then goto L256982;
  #L256956.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L25695a.  call temp:= `getParameterUpperBound`(v4, v12) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L256960.  v11:= temp @kind object;
  #L256962.  v12:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L256966.  call temp:= `stringConverter`(v12, v11, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L25696c.  v11:= temp @kind object;
  #L25696e.  v12:= new `retrofit2.ParameterHandler$Query`;
  #L256972.  call `<init>`(v12, v0, v11, v14) @signature `Lretrofit2/ParameterHandler$Query;.<init>:(Ljava/lang/String;Lretrofit2/Converter;Z)V` @kind direct;
  #L256978.  call temp:= `iterable`(v12) @signature `Lretrofit2/ParameterHandler;.iterable:()Lretrofit2/ParameterHandler;` @kind virtual;
  #L25697e.  v11:= temp @kind object;
  #L256980.  return v11 @kind object;
  #L256982.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256986.  v13:= new `java.lang.StringBuilder`;
  #L25698a.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L256990.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L256996.  v14:= temp @kind object;
  #L256998.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25699e.  call temp:= `append`(v13, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2569a4.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L2569aa.  v14:= temp @kind object;
  #L2569ac.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2569b2.  call temp:= `append`(v13, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2569b8.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2569be.  v13:= temp @kind object;
  #L2569c0.  v14:= new `java.lang.Object`[v4];
  #L2569c4.  call temp:= `parameterError`(v12, v11, v13, v14) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2569ca.  v11:= temp @kind object;
  #L2569cc.  throw v11;
  #L2569ce.  call temp:= `isArray`(v1) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L2569d4.  v11:= temp;
  #L2569d6.  if v11 == 0 then goto L256a0a;
  #L2569da.  call temp:= `getComponentType`(v1) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L2569e0.  v11:= temp @kind object;
  #L2569e2.  call temp:= `boxIfPrimitive`(v11) @signature `Lretrofit2/RequestFactory$Builder;.boxIfPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L2569e8.  v11:= temp @kind object;
  #L2569ea.  v12:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L2569ee.  call temp:= `stringConverter`(v12, v11, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L2569f4.  v11:= temp @kind object;
  #L2569f6.  v12:= new `retrofit2.ParameterHandler$Query`;
  #L2569fa.  call `<init>`(v12, v0, v11, v14) @signature `Lretrofit2/ParameterHandler$Query;.<init>:(Ljava/lang/String;Lretrofit2/Converter;Z)V` @kind direct;
  #L256a00.  call temp:= `array`(v12) @signature `Lretrofit2/ParameterHandler;.array:()Lretrofit2/ParameterHandler;` @kind virtual;
  #L256a06.  v11:= temp @kind object;
  #L256a08.  return v11 @kind object;
  #L256a0a.  v11:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L256a0e.  call temp:= `stringConverter`(v11, v12, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L256a14.  v11:= temp @kind object;
  #L256a16.  v12:= new `retrofit2.ParameterHandler$Query`;
  #L256a1a.  call `<init>`(v12, v0, v11, v14) @signature `Lretrofit2/ParameterHandler$Query;.<init>:(Ljava/lang/String;Lretrofit2/Converter;Z)V` @kind direct;
  #L256a20.  return v12 @kind object;
  #L256a22.  v1:= instanceof @variable v14 @type ^`retrofit2.http.QueryName` @kind boolean;
  #L256a26.  if v1 == 0 then goto L256b2c;
  #L256a2a.  call `validateResolvableType`(v10, v11, v12) @signature `Lretrofit2/RequestFactory$Builder;.validateResolvableType:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L256a30.  v14:= (`retrofit2.http.QueryName`) v14 @kind object;
  #L256a34.  call temp:= `encoded`(v14) @signature `Lretrofit2/http/QueryName;.encoded:()Z` @kind interface;
  #L256a3a.  v14:= temp;
  #L256a3c.  call temp:= `getRawType`(v12) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L256a42.  v0:= temp @kind object;
  #L256a44.  v10.`retrofit2.RequestFactory$Builder.gotQueryName` @type ^`boolean` := v3 @kind boolean;
  #L256a48.  v1:= constclass @type ^`java.lang.Iterable` @kind object;
  #L256a4c.  call temp:= `isAssignableFrom`(v1, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L256a52.  v1:= temp;
  #L256a54.  if v1 == 0 then goto L256ad8;
  #L256a58.  v1:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L256a5c.  if v1 == 0 then goto L256a8c;
  #L256a60.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L256a64.  call temp:= `getParameterUpperBound`(v4, v12) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L256a6a.  v11:= temp @kind object;
  #L256a6c.  v12:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L256a70.  call temp:= `stringConverter`(v12, v11, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L256a76.  v11:= temp @kind object;
  #L256a78.  v12:= new `retrofit2.ParameterHandler$QueryName`;
  #L256a7c.  call `<init>`(v12, v11, v14) @signature `Lretrofit2/ParameterHandler$QueryName;.<init>:(Lretrofit2/Converter;Z)V` @kind direct;
  #L256a82.  call temp:= `iterable`(v12) @signature `Lretrofit2/ParameterHandler;.iterable:()Lretrofit2/ParameterHandler;` @kind virtual;
  #L256a88.  v11:= temp @kind object;
  #L256a8a.  return v11 @kind object;
  #L256a8c.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256a90.  v13:= new `java.lang.StringBuilder`;
  #L256a94.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L256a9a.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L256aa0.  v14:= temp @kind object;
  #L256aa2.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256aa8.  call temp:= `append`(v13, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256aae.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L256ab4.  v14:= temp @kind object;
  #L256ab6.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256abc.  call temp:= `append`(v13, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256ac2.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L256ac8.  v13:= temp @kind object;
  #L256aca.  v14:= new `java.lang.Object`[v4];
  #L256ace.  call temp:= `parameterError`(v12, v11, v13, v14) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L256ad4.  v11:= temp @kind object;
  #L256ad6.  throw v11;
  #L256ad8.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L256ade.  v11:= temp;
  #L256ae0.  if v11 == 0 then goto L256b14;
  #L256ae4.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L256aea.  v11:= temp @kind object;
  #L256aec.  call temp:= `boxIfPrimitive`(v11) @signature `Lretrofit2/RequestFactory$Builder;.boxIfPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L256af2.  v11:= temp @kind object;
  #L256af4.  v12:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L256af8.  call temp:= `stringConverter`(v12, v11, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L256afe.  v11:= temp @kind object;
  #L256b00.  v12:= new `retrofit2.ParameterHandler$QueryName`;
  #L256b04.  call `<init>`(v12, v11, v14) @signature `Lretrofit2/ParameterHandler$QueryName;.<init>:(Lretrofit2/Converter;Z)V` @kind direct;
  #L256b0a.  call temp:= `array`(v12) @signature `Lretrofit2/ParameterHandler;.array:()Lretrofit2/ParameterHandler;` @kind virtual;
  #L256b10.  v11:= temp @kind object;
  #L256b12.  return v11 @kind object;
  #L256b14.  v11:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L256b18.  call temp:= `stringConverter`(v11, v12, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L256b1e.  v11:= temp @kind object;
  #L256b20.  v12:= new `retrofit2.ParameterHandler$QueryName`;
  #L256b24.  call `<init>`(v12, v11, v14) @signature `Lretrofit2/ParameterHandler$QueryName;.<init>:(Lretrofit2/Converter;Z)V` @kind direct;
  #L256b2a.  return v12 @kind object;
  #L256b2c.  v1:= instanceof @variable v14 @type ^`retrofit2.http.QueryMap` @kind boolean;
  #L256b30.  v6:= "Map must include generic types (e.g., Map<String, String>)" @kind object;
  #L256b34.  if v1 == 0 then goto L256c0e;
  #L256b38.  call `validateResolvableType`(v10, v11, v12) @signature `Lretrofit2/RequestFactory$Builder;.validateResolvableType:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L256b3e.  call temp:= `getRawType`(v12) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L256b44.  v0:= temp @kind object;
  #L256b46.  v10.`retrofit2.RequestFactory$Builder.gotQueryMap` @type ^`boolean` := v3 @kind boolean;
  #L256b4a.  v1:= constclass @type ^`java.util.Map` @kind object;
  #L256b4e.  call temp:= `isAssignableFrom`(v1, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L256b54.  v1:= temp;
  #L256b56.  if v1 == 0 then goto L256bf8;
  #L256b5a.  v1:= constclass @type ^`java.util.Map` @kind object;
  #L256b5e.  call temp:= `getSupertype`(v12, v0, v1) @signature `Lretrofit2/Utils;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L256b64.  v12:= temp @kind object;
  #L256b66.  v0:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L256b6a.  if v0 == 0 then goto L256be6;
  #L256b6e.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L256b72.  call temp:= `getParameterUpperBound`(v4, v12) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L256b78.  v0:= temp @kind object;
  #L256b7a.  v1:= constclass @type ^`java.lang.String` @kind object;
  #L256b7e.  if v1 != v0 then goto L256bb2;
  #L256b82.  call temp:= `getParameterUpperBound`(v3, v12) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L256b88.  v12:= temp @kind object;
  #L256b8a.  v0:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L256b8e.  call temp:= `stringConverter`(v0, v12, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L256b94.  v12:= temp @kind object;
  #L256b96.  v13:= new `retrofit2.ParameterHandler$QueryMap`;
  #L256b9a.  v0:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256b9e.  v14:= (`retrofit2.http.QueryMap`) v14 @kind object;
  #L256ba2.  call temp:= `encoded`(v14) @signature `Lretrofit2/http/QueryMap;.encoded:()Z` @kind interface;
  #L256ba8.  v14:= temp;
  #L256baa.  call `<init>`(v13, v0, v11, v12, v14) @signature `Lretrofit2/ParameterHandler$QueryMap;.<init>:(Ljava/lang/reflect/Method;ILretrofit2/Converter;Z)V` @kind direct;
  #L256bb0.  return v13 @kind object;
  #L256bb2.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256bb6.  v13:= new `java.lang.StringBuilder`;
  #L256bba.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L256bc0.  v14:= "@QueryMap keys must be of type String: " @kind object;
  #L256bc4.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256bca.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256bd0.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L256bd6.  v13:= temp @kind object;
  #L256bd8.  v14:= new `java.lang.Object`[v4];
  #L256bdc.  call temp:= `parameterError`(v12, v11, v13, v14) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L256be2.  v11:= temp @kind object;
  #L256be4.  throw v11;
  #L256be6.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256bea.  v13:= new `java.lang.Object`[v4];
  #L256bee.  call temp:= `parameterError`(v12, v11, v6, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L256bf4.  v11:= temp @kind object;
  #L256bf6.  throw v11;
  #L256bf8.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256bfc.  v13:= new `java.lang.Object`[v4];
  #L256c00.  v14:= "@QueryMap parameter type must be Map." @kind object;
  #L256c04.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L256c0a.  v11:= temp @kind object;
  #L256c0c.  throw v11;
  #L256c0e.  v1:= instanceof @variable v14 @type ^`retrofit2.http.Header` @kind boolean;
  #L256c12.  if v1 == 0 then goto L256d14;
  #L256c16.  call `validateResolvableType`(v10, v11, v12) @signature `Lretrofit2/RequestFactory$Builder;.validateResolvableType:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L256c1c.  v14:= (`retrofit2.http.Header`) v14 @kind object;
  #L256c20.  call temp:= `value`(v14) @signature `Lretrofit2/http/Header;.value:()Ljava/lang/String;` @kind interface;
  #L256c26.  v14:= temp @kind object;
  #L256c28.  call temp:= `getRawType`(v12) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L256c2e.  v0:= temp @kind object;
  #L256c30.  v1:= constclass @type ^`java.lang.Iterable` @kind object;
  #L256c34.  call temp:= `isAssignableFrom`(v1, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L256c3a.  v1:= temp;
  #L256c3c.  if v1 == 0 then goto L256cc0;
  #L256c40.  v1:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L256c44.  if v1 == 0 then goto L256c74;
  #L256c48.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L256c4c.  call temp:= `getParameterUpperBound`(v4, v12) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L256c52.  v11:= temp @kind object;
  #L256c54.  v12:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L256c58.  call temp:= `stringConverter`(v12, v11, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L256c5e.  v11:= temp @kind object;
  #L256c60.  v12:= new `retrofit2.ParameterHandler$Header`;
  #L256c64.  call `<init>`(v12, v14, v11) @signature `Lretrofit2/ParameterHandler$Header;.<init>:(Ljava/lang/String;Lretrofit2/Converter;)V` @kind direct;
  #L256c6a.  call temp:= `iterable`(v12) @signature `Lretrofit2/ParameterHandler;.iterable:()Lretrofit2/ParameterHandler;` @kind virtual;
  #L256c70.  v11:= temp @kind object;
  #L256c72.  return v11 @kind object;
  #L256c74.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256c78.  v13:= new `java.lang.StringBuilder`;
  #L256c7c.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L256c82.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L256c88.  v14:= temp @kind object;
  #L256c8a.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256c90.  call temp:= `append`(v13, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256c96.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L256c9c.  v14:= temp @kind object;
  #L256c9e.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256ca4.  call temp:= `append`(v13, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256caa.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L256cb0.  v13:= temp @kind object;
  #L256cb2.  v14:= new `java.lang.Object`[v4];
  #L256cb6.  call temp:= `parameterError`(v12, v11, v13, v14) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L256cbc.  v11:= temp @kind object;
  #L256cbe.  throw v11;
  #L256cc0.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L256cc6.  v11:= temp;
  #L256cc8.  if v11 == 0 then goto L256cfc;
  #L256ccc.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L256cd2.  v11:= temp @kind object;
  #L256cd4.  call temp:= `boxIfPrimitive`(v11) @signature `Lretrofit2/RequestFactory$Builder;.boxIfPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L256cda.  v11:= temp @kind object;
  #L256cdc.  v12:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L256ce0.  call temp:= `stringConverter`(v12, v11, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L256ce6.  v11:= temp @kind object;
  #L256ce8.  v12:= new `retrofit2.ParameterHandler$Header`;
  #L256cec.  call `<init>`(v12, v14, v11) @signature `Lretrofit2/ParameterHandler$Header;.<init>:(Ljava/lang/String;Lretrofit2/Converter;)V` @kind direct;
  #L256cf2.  call temp:= `array`(v12) @signature `Lretrofit2/ParameterHandler;.array:()Lretrofit2/ParameterHandler;` @kind virtual;
  #L256cf8.  v11:= temp @kind object;
  #L256cfa.  return v11 @kind object;
  #L256cfc.  v11:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L256d00.  call temp:= `stringConverter`(v11, v12, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L256d06.  v11:= temp @kind object;
  #L256d08.  v12:= new `retrofit2.ParameterHandler$Header`;
  #L256d0c.  call `<init>`(v12, v14, v11) @signature `Lretrofit2/ParameterHandler$Header;.<init>:(Ljava/lang/String;Lretrofit2/Converter;)V` @kind direct;
  #L256d12.  return v12 @kind object;
  #L256d14.  v1:= instanceof @variable v14 @type ^`retrofit2.http.HeaderMap` @kind boolean;
  #L256d18.  if v1 == 0 then goto L256dfa;
  #L256d1c.  v14:= constclass @type ^`h.y` @kind object;
  #L256d20.  if v12 != v14 then goto L256d34;
  #L256d24.  v12:= new `retrofit2.ParameterHandler$Headers`;
  #L256d28.  v13:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256d2c.  call `<init>`(v12, v13, v11) @signature `Lretrofit2/ParameterHandler$Headers;.<init>:(Ljava/lang/reflect/Method;I)V` @kind direct;
  #L256d32.  return v12 @kind object;
  #L256d34.  call `validateResolvableType`(v10, v11, v12) @signature `Lretrofit2/RequestFactory$Builder;.validateResolvableType:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L256d3a.  call temp:= `getRawType`(v12) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L256d40.  v14:= temp @kind object;
  #L256d42.  v0:= constclass @type ^`java.util.Map` @kind object;
  #L256d46.  call temp:= `isAssignableFrom`(v0, v14) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L256d4c.  v0:= temp;
  #L256d4e.  if v0 == 0 then goto L256de4;
  #L256d52.  v0:= constclass @type ^`java.util.Map` @kind object;
  #L256d56.  call temp:= `getSupertype`(v12, v14, v0) @signature `Lretrofit2/Utils;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L256d5c.  v12:= temp @kind object;
  #L256d5e.  v14:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L256d62.  if v14 == 0 then goto L256dd2;
  #L256d66.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L256d6a.  call temp:= `getParameterUpperBound`(v4, v12) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L256d70.  v14:= temp @kind object;
  #L256d72.  v0:= constclass @type ^`java.lang.String` @kind object;
  #L256d76.  if v0 != v14 then goto L256d9e;
  #L256d7a.  call temp:= `getParameterUpperBound`(v3, v12) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L256d80.  v12:= temp @kind object;
  #L256d82.  v14:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L256d86.  call temp:= `stringConverter`(v14, v12, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L256d8c.  v12:= temp @kind object;
  #L256d8e.  v13:= new `retrofit2.ParameterHandler$HeaderMap`;
  #L256d92.  v14:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256d96.  call `<init>`(v13, v14, v11, v12) @signature `Lretrofit2/ParameterHandler$HeaderMap;.<init>:(Ljava/lang/reflect/Method;ILretrofit2/Converter;)V` @kind direct;
  #L256d9c.  return v13 @kind object;
  #L256d9e.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256da2.  v13:= new `java.lang.StringBuilder`;
  #L256da6.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L256dac.  v0:= "@HeaderMap keys must be of type String: " @kind object;
  #L256db0.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256db6.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256dbc.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L256dc2.  v13:= temp @kind object;
  #L256dc4.  v14:= new `java.lang.Object`[v4];
  #L256dc8.  call temp:= `parameterError`(v12, v11, v13, v14) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L256dce.  v11:= temp @kind object;
  #L256dd0.  throw v11;
  #L256dd2.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256dd6.  v13:= new `java.lang.Object`[v4];
  #L256dda.  call temp:= `parameterError`(v12, v11, v6, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L256de0.  v11:= temp @kind object;
  #L256de2.  throw v11;
  #L256de4.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256de8.  v13:= new `java.lang.Object`[v4];
  #L256dec.  v14:= "@HeaderMap parameter type must be Map." @kind object;
  #L256df0.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L256df6.  v11:= temp @kind object;
  #L256df8.  throw v11;
  #L256dfa.  v1:= instanceof @variable v14 @type ^`retrofit2.http.Field` @kind boolean;
  #L256dfe.  if v1 == 0 then goto L256f2a;
  #L256e02.  call `validateResolvableType`(v10, v11, v12) @signature `Lretrofit2/RequestFactory$Builder;.validateResolvableType:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L256e08.  v0:= v10.`retrofit2.RequestFactory$Builder.isFormEncoded` @type ^`boolean` @kind boolean;
  #L256e0c.  if v0 == 0 then goto L256f14;
  #L256e10.  v14:= (`retrofit2.http.Field`) v14 @kind object;
  #L256e14.  call temp:= `value`(v14) @signature `Lretrofit2/http/Field;.value:()Ljava/lang/String;` @kind interface;
  #L256e1a.  v0:= temp @kind object;
  #L256e1c.  call temp:= `encoded`(v14) @signature `Lretrofit2/http/Field;.encoded:()Z` @kind interface;
  #L256e22.  v14:= temp;
  #L256e24.  v10.`retrofit2.RequestFactory$Builder.gotField` @type ^`boolean` := v3 @kind boolean;
  #L256e28.  call temp:= `getRawType`(v12) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L256e2e.  v1:= temp @kind object;
  #L256e30.  v3:= constclass @type ^`java.lang.Iterable` @kind object;
  #L256e34.  call temp:= `isAssignableFrom`(v3, v1) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L256e3a.  v3:= temp;
  #L256e3c.  if v3 == 0 then goto L256ec0;
  #L256e40.  v3:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L256e44.  if v3 == 0 then goto L256e74;
  #L256e48.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L256e4c.  call temp:= `getParameterUpperBound`(v4, v12) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L256e52.  v11:= temp @kind object;
  #L256e54.  v12:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L256e58.  call temp:= `stringConverter`(v12, v11, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L256e5e.  v11:= temp @kind object;
  #L256e60.  v12:= new `retrofit2.ParameterHandler$Field`;
  #L256e64.  call `<init>`(v12, v0, v11, v14) @signature `Lretrofit2/ParameterHandler$Field;.<init>:(Ljava/lang/String;Lretrofit2/Converter;Z)V` @kind direct;
  #L256e6a.  call temp:= `iterable`(v12) @signature `Lretrofit2/ParameterHandler;.iterable:()Lretrofit2/ParameterHandler;` @kind virtual;
  #L256e70.  v11:= temp @kind object;
  #L256e72.  return v11 @kind object;
  #L256e74.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256e78.  v13:= new `java.lang.StringBuilder`;
  #L256e7c.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L256e82.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L256e88.  v14:= temp @kind object;
  #L256e8a.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256e90.  call temp:= `append`(v13, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256e96.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L256e9c.  v14:= temp @kind object;
  #L256e9e.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256ea4.  call temp:= `append`(v13, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256eaa.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L256eb0.  v13:= temp @kind object;
  #L256eb2.  v14:= new `java.lang.Object`[v4];
  #L256eb6.  call temp:= `parameterError`(v12, v11, v13, v14) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L256ebc.  v11:= temp @kind object;
  #L256ebe.  throw v11;
  #L256ec0.  call temp:= `isArray`(v1) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L256ec6.  v11:= temp;
  #L256ec8.  if v11 == 0 then goto L256efc;
  #L256ecc.  call temp:= `getComponentType`(v1) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L256ed2.  v11:= temp @kind object;
  #L256ed4.  call temp:= `boxIfPrimitive`(v11) @signature `Lretrofit2/RequestFactory$Builder;.boxIfPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L256eda.  v11:= temp @kind object;
  #L256edc.  v12:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L256ee0.  call temp:= `stringConverter`(v12, v11, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L256ee6.  v11:= temp @kind object;
  #L256ee8.  v12:= new `retrofit2.ParameterHandler$Field`;
  #L256eec.  call `<init>`(v12, v0, v11, v14) @signature `Lretrofit2/ParameterHandler$Field;.<init>:(Ljava/lang/String;Lretrofit2/Converter;Z)V` @kind direct;
  #L256ef2.  call temp:= `array`(v12) @signature `Lretrofit2/ParameterHandler;.array:()Lretrofit2/ParameterHandler;` @kind virtual;
  #L256ef8.  v11:= temp @kind object;
  #L256efa.  return v11 @kind object;
  #L256efc.  v11:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L256f00.  call temp:= `stringConverter`(v11, v12, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L256f06.  v11:= temp @kind object;
  #L256f08.  v12:= new `retrofit2.ParameterHandler$Field`;
  #L256f0c.  call `<init>`(v12, v0, v11, v14) @signature `Lretrofit2/ParameterHandler$Field;.<init>:(Ljava/lang/String;Lretrofit2/Converter;Z)V` @kind direct;
  #L256f12.  return v12 @kind object;
  #L256f14.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256f18.  v13:= new `java.lang.Object`[v4];
  #L256f1c.  v14:= "@Field parameters can only be used with form encoding." @kind object;
  #L256f20.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L256f26.  v11:= temp @kind object;
  #L256f28.  throw v11;
  #L256f2a.  v1:= instanceof @variable v14 @type ^`retrofit2.http.FieldMap` @kind boolean;
  #L256f2e.  if v1 == 0 then goto L257026;
  #L256f32.  call `validateResolvableType`(v10, v11, v12) @signature `Lretrofit2/RequestFactory$Builder;.validateResolvableType:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L256f38.  v0:= v10.`retrofit2.RequestFactory$Builder.isFormEncoded` @type ^`boolean` @kind boolean;
  #L256f3c.  if v0 == 0 then goto L257010;
  #L256f40.  call temp:= `getRawType`(v12) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L256f46.  v0:= temp @kind object;
  #L256f48.  v1:= constclass @type ^`java.util.Map` @kind object;
  #L256f4c.  call temp:= `isAssignableFrom`(v1, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L256f52.  v1:= temp;
  #L256f54.  if v1 == 0 then goto L256ffa;
  #L256f58.  v1:= constclass @type ^`java.util.Map` @kind object;
  #L256f5c.  call temp:= `getSupertype`(v12, v0, v1) @signature `Lretrofit2/Utils;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L256f62.  v12:= temp @kind object;
  #L256f64.  v0:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L256f68.  if v0 == 0 then goto L256fe8;
  #L256f6c.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L256f70.  call temp:= `getParameterUpperBound`(v4, v12) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L256f76.  v0:= temp @kind object;
  #L256f78.  v1:= constclass @type ^`java.lang.String` @kind object;
  #L256f7c.  if v1 != v0 then goto L256fb4;
  #L256f80.  call temp:= `getParameterUpperBound`(v3, v12) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L256f86.  v12:= temp @kind object;
  #L256f88.  v0:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L256f8c.  call temp:= `stringConverter`(v0, v12, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L256f92.  v12:= temp @kind object;
  #L256f94.  v10.`retrofit2.RequestFactory$Builder.gotField` @type ^`boolean` := v3 @kind boolean;
  #L256f98.  v13:= new `retrofit2.ParameterHandler$FieldMap`;
  #L256f9c.  v0:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256fa0.  v14:= (`retrofit2.http.FieldMap`) v14 @kind object;
  #L256fa4.  call temp:= `encoded`(v14) @signature `Lretrofit2/http/FieldMap;.encoded:()Z` @kind interface;
  #L256faa.  v14:= temp;
  #L256fac.  call `<init>`(v13, v0, v11, v12, v14) @signature `Lretrofit2/ParameterHandler$FieldMap;.<init>:(Ljava/lang/reflect/Method;ILretrofit2/Converter;Z)V` @kind direct;
  #L256fb2.  return v13 @kind object;
  #L256fb4.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256fb8.  v13:= new `java.lang.StringBuilder`;
  #L256fbc.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L256fc2.  v14:= "@FieldMap keys must be of type String: " @kind object;
  #L256fc6.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256fcc.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L256fd2.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L256fd8.  v13:= temp @kind object;
  #L256fda.  v14:= new `java.lang.Object`[v4];
  #L256fde.  call temp:= `parameterError`(v12, v11, v13, v14) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L256fe4.  v11:= temp @kind object;
  #L256fe6.  throw v11;
  #L256fe8.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256fec.  v13:= new `java.lang.Object`[v4];
  #L256ff0.  call temp:= `parameterError`(v12, v11, v6, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L256ff6.  v11:= temp @kind object;
  #L256ff8.  throw v11;
  #L256ffa.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L256ffe.  v13:= new `java.lang.Object`[v4];
  #L257002.  v14:= "@FieldMap parameter type must be Map." @kind object;
  #L257006.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L25700c.  v11:= temp @kind object;
  #L25700e.  throw v11;
  #L257010.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L257014.  v13:= new `java.lang.Object`[v4];
  #L257018.  v14:= "@FieldMap parameters can only be used with form encoding." @kind object;
  #L25701c.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257022.  v11:= temp @kind object;
  #L257024.  throw v11;
  #L257026.  v1:= instanceof @variable v14 @type ^`retrofit2.http.Part` @kind boolean;
  #L25702a.  if v1 == 0 then goto L257342;
  #L25702e.  call `validateResolvableType`(v10, v11, v12) @signature `Lretrofit2/RequestFactory$Builder;.validateResolvableType:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L257034.  v1:= v10.`retrofit2.RequestFactory$Builder.isMultipart` @type ^`boolean` @kind boolean;
  #L257038.  if v1 == 0 then goto L25732c;
  #L25703c.  v14:= (`retrofit2.http.Part`) v14 @kind object;
  #L257040.  v10.`retrofit2.RequestFactory$Builder.gotPart` @type ^`boolean` := v3 @kind boolean;
  #L257044.  call temp:= `value`(v14) @signature `Lretrofit2/http/Part;.value:()Ljava/lang/String;` @kind interface;
  #L25704a.  v1:= temp @kind object;
  #L25704c.  call temp:= `getRawType`(v12) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L257052.  v6:= temp @kind object;
  #L257054.  call temp:= `isEmpty`(v1) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L25705a.  v7:= temp;
  #L25705c.  if v7 == 0 then goto L25716c;
  #L257060.  v13:= constclass @type ^`java.lang.Iterable` @kind object;
  #L257064.  call temp:= `isAssignableFrom`(v13, v6) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L25706a.  v13:= temp;
  #L25706c.  v14:= "@Part annotation must supply a name or use MultipartBody.Part parameter type." @kind object;
  #L257070.  if v13 == 0 then goto L257108;
  #L257074.  v13:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L257078.  if v13 == 0 then goto L2570bc;
  #L25707c.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L257080.  call temp:= `getParameterUpperBound`(v4, v12) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L257086.  v12:= temp @kind object;
  #L257088.  call temp:= `getRawType`(v12) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L25708e.  v12:= temp @kind object;
  #L257090.  call temp:= `isAssignableFrom`(v0, v12) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L257096.  v12:= temp;
  #L257098.  if v12 == 0 then goto L2570aa;
  #L25709c.  v11:= `@@retrofit2.ParameterHandler$RawPart.INSTANCE` @type ^`retrofit2.ParameterHandler$RawPart` @kind object;
  #L2570a0.  call temp:= `iterable`(v11) @signature `Lretrofit2/ParameterHandler;.iterable:()Lretrofit2/ParameterHandler;` @kind virtual;
  #L2570a6.  v11:= temp @kind object;
  #L2570a8.  return v11 @kind object;
  #L2570aa.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2570ae.  v13:= new `java.lang.Object`[v4];
  #L2570b2.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2570b8.  v11:= temp @kind object;
  #L2570ba.  throw v11;
  #L2570bc.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2570c0.  v13:= new `java.lang.StringBuilder`;
  #L2570c4.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2570ca.  call temp:= `getSimpleName`(v6) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L2570d0.  v14:= temp @kind object;
  #L2570d2.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2570d8.  call temp:= `append`(v13, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2570de.  call temp:= `getSimpleName`(v6) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L2570e4.  v14:= temp @kind object;
  #L2570e6.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2570ec.  call temp:= `append`(v13, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2570f2.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2570f8.  v13:= temp @kind object;
  #L2570fa.  v14:= new `java.lang.Object`[v4];
  #L2570fe.  call temp:= `parameterError`(v12, v11, v13, v14) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257104.  v11:= temp @kind object;
  #L257106.  throw v11;
  #L257108.  call temp:= `isArray`(v6) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L25710e.  v12:= temp;
  #L257110.  if v12 == 0 then goto L257148;
  #L257114.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L25711a.  v12:= temp @kind object;
  #L25711c.  call temp:= `isAssignableFrom`(v0, v12) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L257122.  v12:= temp;
  #L257124.  if v12 == 0 then goto L257136;
  #L257128.  v11:= `@@retrofit2.ParameterHandler$RawPart.INSTANCE` @type ^`retrofit2.ParameterHandler$RawPart` @kind object;
  #L25712c.  call temp:= `array`(v11) @signature `Lretrofit2/ParameterHandler;.array:()Lretrofit2/ParameterHandler;` @kind virtual;
  #L257132.  v11:= temp @kind object;
  #L257134.  return v11 @kind object;
  #L257136.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L25713a.  v13:= new `java.lang.Object`[v4];
  #L25713e.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257144.  v11:= temp @kind object;
  #L257146.  throw v11;
  #L257148.  call temp:= `isAssignableFrom`(v0, v6) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L25714e.  v12:= temp;
  #L257150.  if v12 == 0 then goto L25715a;
  #L257154.  v11:= `@@retrofit2.ParameterHandler$RawPart.INSTANCE` @type ^`retrofit2.ParameterHandler$RawPart` @kind object;
  #L257158.  return v11 @kind object;
  #L25715a.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L25715e.  v13:= new `java.lang.Object`[v4];
  #L257162.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257168.  v11:= temp @kind object;
  #L25716a.  throw v11;
  #L25716c.  v7:= 4I;
  #L25716e.  v7:= new `java.lang.String`[v7];
  #L257172.  v8:= "Content-Disposition" @kind object;
  #L257176.  v7[v4]:= v8 @kind object;
  #L25717a.  v8:= new `java.lang.StringBuilder`;
  #L25717e.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L257184.  v9:= "form-data; name=\"" @kind object;
  #L257188.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25718e.  call temp:= `append`(v8, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L257194.  v1:= "\"" @kind object;
  #L257198.  call temp:= `append`(v8, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25719e.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2571a4.  v1:= temp @kind object;
  #L2571a6.  v7[v3]:= v1 @kind object;
  #L2571aa.  v1:= 2I;
  #L2571ac.  v3:= "Content-Transfer-Encoding" @kind object;
  #L2571b0.  v7[v1]:= v3 @kind object;
  #L2571b4.  v1:= 3I;
  #L2571b6.  call temp:= `encoding`(v14) @signature `Lretrofit2/http/Part;.encoding:()Ljava/lang/String;` @kind interface;
  #L2571bc.  v14:= temp @kind object;
  #L2571be.  v7[v1]:= v14 @kind object;
  #L2571c2.  call temp:= `of`(v7) @signature `Lh/y;.of:([Ljava/lang/String;)Lh/y;` @kind static;
  #L2571c8.  v14:= temp @kind object;
  #L2571ca.  v1:= constclass @type ^`java.lang.Iterable` @kind object;
  #L2571ce.  call temp:= `isAssignableFrom`(v1, v6) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L2571d4.  v1:= temp;
  #L2571d6.  v3:= "@Part parameters using the MultipartBody.Part must not include a part name in the annotation." @kind object;
  #L2571da.  if v1 == 0 then goto L25728c;
  #L2571de.  v1:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L2571e2.  if v1 == 0 then goto L257240;
  #L2571e6.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L2571ea.  call temp:= `getParameterUpperBound`(v4, v12) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L2571f0.  v12:= temp @kind object;
  #L2571f2.  call temp:= `getRawType`(v12) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L2571f8.  v1:= temp @kind object;
  #L2571fa.  call temp:= `isAssignableFrom`(v0, v1) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L257200.  v0:= temp;
  #L257202.  if v0 != 0 then goto L25722e;
  #L257206.  v0:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L25720a.  v1:= v10.`retrofit2.RequestFactory$Builder.methodAnnotations` @type ^`java.lang.annotation.Annotation`[] @kind object;
  #L25720e.  call temp:= `requestBodyConverter`(v0, v12, v13, v1) @signature `Lretrofit2/Retrofit;.requestBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L257214.  v12:= temp @kind object;
  #L257216.  v13:= new `retrofit2.ParameterHandler$Part`;
  #L25721a.  v0:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L25721e.  call `<init>`(v13, v0, v11, v14, v12) @signature `Lretrofit2/ParameterHandler$Part;.<init>:(Ljava/lang/reflect/Method;ILh/y;Lretrofit2/Converter;)V` @kind direct;
  #L257224.  call temp:= `iterable`(v13) @signature `Lretrofit2/ParameterHandler;.iterable:()Lretrofit2/ParameterHandler;` @kind virtual;
  #L25722a.  v11:= temp @kind object;
  #L25722c.  return v11 @kind object;
  #L25722e.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L257232.  v13:= new `java.lang.Object`[v4];
  #L257236.  call temp:= `parameterError`(v12, v11, v3, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L25723c.  v11:= temp @kind object;
  #L25723e.  throw v11;
  #L257240.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L257244.  v13:= new `java.lang.StringBuilder`;
  #L257248.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L25724e.  call temp:= `getSimpleName`(v6) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L257254.  v14:= temp @kind object;
  #L257256.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25725c.  call temp:= `append`(v13, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L257262.  call temp:= `getSimpleName`(v6) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L257268.  v14:= temp @kind object;
  #L25726a.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L257270.  call temp:= `append`(v13, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L257276.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L25727c.  v13:= temp @kind object;
  #L25727e.  v14:= new `java.lang.Object`[v4];
  #L257282.  call temp:= `parameterError`(v12, v11, v13, v14) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257288.  v11:= temp @kind object;
  #L25728a.  throw v11;
  #L25728c.  call temp:= `isArray`(v6) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L257292.  v1:= temp;
  #L257294.  if v1 == 0 then goto L2572ee;
  #L257298.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L25729e.  v12:= temp @kind object;
  #L2572a0.  call temp:= `boxIfPrimitive`(v12) @signature `Lretrofit2/RequestFactory$Builder;.boxIfPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L2572a6.  v12:= temp @kind object;
  #L2572a8.  call temp:= `isAssignableFrom`(v0, v12) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L2572ae.  v0:= temp;
  #L2572b0.  if v0 != 0 then goto L2572dc;
  #L2572b4.  v0:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L2572b8.  v1:= v10.`retrofit2.RequestFactory$Builder.methodAnnotations` @type ^`java.lang.annotation.Annotation`[] @kind object;
  #L2572bc.  call temp:= `requestBodyConverter`(v0, v12, v13, v1) @signature `Lretrofit2/Retrofit;.requestBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L2572c2.  v12:= temp @kind object;
  #L2572c4.  v13:= new `retrofit2.ParameterHandler$Part`;
  #L2572c8.  v0:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2572cc.  call `<init>`(v13, v0, v11, v14, v12) @signature `Lretrofit2/ParameterHandler$Part;.<init>:(Ljava/lang/reflect/Method;ILh/y;Lretrofit2/Converter;)V` @kind direct;
  #L2572d2.  call temp:= `array`(v13) @signature `Lretrofit2/ParameterHandler;.array:()Lretrofit2/ParameterHandler;` @kind virtual;
  #L2572d8.  v11:= temp @kind object;
  #L2572da.  return v11 @kind object;
  #L2572dc.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2572e0.  v13:= new `java.lang.Object`[v4];
  #L2572e4.  call temp:= `parameterError`(v12, v11, v3, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2572ea.  v11:= temp @kind object;
  #L2572ec.  throw v11;
  #L2572ee.  call temp:= `isAssignableFrom`(v0, v6) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L2572f4.  v0:= temp;
  #L2572f6.  if v0 != 0 then goto L25731a;
  #L2572fa.  v0:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L2572fe.  v1:= v10.`retrofit2.RequestFactory$Builder.methodAnnotations` @type ^`java.lang.annotation.Annotation`[] @kind object;
  #L257302.  call temp:= `requestBodyConverter`(v0, v12, v13, v1) @signature `Lretrofit2/Retrofit;.requestBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L257308.  v12:= temp @kind object;
  #L25730a.  v13:= new `retrofit2.ParameterHandler$Part`;
  #L25730e.  v0:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L257312.  call `<init>`(v13, v0, v11, v14, v12) @signature `Lretrofit2/ParameterHandler$Part;.<init>:(Ljava/lang/reflect/Method;ILh/y;Lretrofit2/Converter;)V` @kind direct;
  #L257318.  return v13 @kind object;
  #L25731a.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L25731e.  v13:= new `java.lang.Object`[v4];
  #L257322.  call temp:= `parameterError`(v12, v11, v3, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257328.  v11:= temp @kind object;
  #L25732a.  throw v11;
  #L25732c.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L257330.  v13:= new `java.lang.Object`[v4];
  #L257334.  v14:= "@Part parameters can only be used with multipart encoding." @kind object;
  #L257338.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L25733e.  v11:= temp @kind object;
  #L257340.  throw v11;
  #L257342.  v1:= instanceof @variable v14 @type ^`retrofit2.http.PartMap` @kind boolean;
  #L257346.  if v1 == 0 then goto L25746c;
  #L25734a.  call `validateResolvableType`(v10, v11, v12) @signature `Lretrofit2/RequestFactory$Builder;.validateResolvableType:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L257350.  v1:= v10.`retrofit2.RequestFactory$Builder.isMultipart` @type ^`boolean` @kind boolean;
  #L257354.  if v1 == 0 then goto L257456;
  #L257358.  v10.`retrofit2.RequestFactory$Builder.gotPart` @type ^`boolean` := v3 @kind boolean;
  #L25735c.  call temp:= `getRawType`(v12) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L257362.  v1:= temp @kind object;
  #L257364.  v2:= constclass @type ^`java.util.Map` @kind object;
  #L257368.  call temp:= `isAssignableFrom`(v2, v1) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L25736e.  v2:= temp;
  #L257370.  if v2 == 0 then goto L257440;
  #L257374.  v2:= constclass @type ^`java.util.Map` @kind object;
  #L257378.  call temp:= `getSupertype`(v12, v1, v2) @signature `Lretrofit2/Utils;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L25737e.  v12:= temp @kind object;
  #L257380.  v1:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L257384.  if v1 == 0 then goto L25742e;
  #L257388.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L25738c.  call temp:= `getParameterUpperBound`(v4, v12) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L257392.  v1:= temp @kind object;
  #L257394.  v2:= constclass @type ^`java.lang.String` @kind object;
  #L257398.  if v2 != v1 then goto L2573fa;
  #L25739c.  call temp:= `getParameterUpperBound`(v3, v12) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L2573a2.  v12:= temp @kind object;
  #L2573a4.  call temp:= `getRawType`(v12) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L2573aa.  v1:= temp @kind object;
  #L2573ac.  call temp:= `isAssignableFrom`(v0, v1) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L2573b2.  v0:= temp;
  #L2573b4.  if v0 != 0 then goto L2573e4;
  #L2573b8.  v0:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L2573bc.  v1:= v10.`retrofit2.RequestFactory$Builder.methodAnnotations` @type ^`java.lang.annotation.Annotation`[] @kind object;
  #L2573c0.  call temp:= `requestBodyConverter`(v0, v12, v13, v1) @signature `Lretrofit2/Retrofit;.requestBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L2573c6.  v12:= temp @kind object;
  #L2573c8.  v14:= (`retrofit2.http.PartMap`) v14 @kind object;
  #L2573cc.  v13:= new `retrofit2.ParameterHandler$PartMap`;
  #L2573d0.  v0:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2573d4.  call temp:= `encoding`(v14) @signature `Lretrofit2/http/PartMap;.encoding:()Ljava/lang/String;` @kind interface;
  #L2573da.  v14:= temp @kind object;
  #L2573dc.  call `<init>`(v13, v0, v11, v12, v14) @signature `Lretrofit2/ParameterHandler$PartMap;.<init>:(Ljava/lang/reflect/Method;ILretrofit2/Converter;Ljava/lang/String;)V` @kind direct;
  #L2573e2.  return v13 @kind object;
  #L2573e4.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2573e8.  v13:= new `java.lang.Object`[v4];
  #L2573ec.  v14:= "@PartMap values cannot be MultipartBody.Part. Use @Part List<Part> or a different value type instead." @kind object;
  #L2573f0.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2573f6.  v11:= temp @kind object;
  #L2573f8.  throw v11;
  #L2573fa.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2573fe.  v13:= new `java.lang.StringBuilder`;
  #L257402.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L257408.  v14:= "@PartMap keys must be of type String: " @kind object;
  #L25740c.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L257412.  call temp:= `append`(v13, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L257418.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L25741e.  v13:= temp @kind object;
  #L257420.  v14:= new `java.lang.Object`[v4];
  #L257424.  call temp:= `parameterError`(v12, v11, v13, v14) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L25742a.  v11:= temp @kind object;
  #L25742c.  throw v11;
  #L25742e.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L257432.  v13:= new `java.lang.Object`[v4];
  #L257436.  call temp:= `parameterError`(v12, v11, v6, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L25743c.  v11:= temp @kind object;
  #L25743e.  throw v11;
  #L257440.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L257444.  v13:= new `java.lang.Object`[v4];
  #L257448.  v14:= "@PartMap parameter type must be Map." @kind object;
  #L25744c.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257452.  v11:= temp @kind object;
  #L257454.  throw v11;
  #L257456.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L25745a.  v13:= new `java.lang.Object`[v4];
  #L25745e.  v14:= "@PartMap parameters can only be used with multipart encoding." @kind object;
  #L257462.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257468.  v11:= temp @kind object;
  #L25746a.  throw v11;
  #L25746c.  v0:= instanceof @variable v14 @type ^`retrofit2.http.Body` @kind boolean;
  #L257470.  if v0 == 0 then goto L2574fe;
  #L257474.  call `validateResolvableType`(v10, v11, v12) @signature `Lretrofit2/RequestFactory$Builder;.validateResolvableType:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L25747a.  v14:= v10.`retrofit2.RequestFactory$Builder.isFormEncoded` @type ^`boolean` @kind boolean;
  #L25747e.  if v14 != 0 then goto L2574e8;
  #L257482.  v14:= v10.`retrofit2.RequestFactory$Builder.isMultipart` @type ^`boolean` @kind boolean;
  #L257486.  if v14 != 0 then goto L2574e8;
  #L25748a.  v14:= v10.`retrofit2.RequestFactory$Builder.gotBody` @type ^`boolean` @kind boolean;
  #L25748e.  if v14 != 0 then goto L2574d2;
  #L257492.  v14:= v10.`retrofit2.RequestFactory$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L257496.  v0:= v10.`retrofit2.RequestFactory$Builder.methodAnnotations` @type ^`java.lang.annotation.Annotation`[] @kind object;
  #L25749a.  call temp:= `requestBodyConverter`(v14, v12, v13, v0) @signature `Lretrofit2/Retrofit;.requestBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L2574a0.  v12:= temp @kind object;
  #L2574a2.  v10.`retrofit2.RequestFactory$Builder.gotBody` @type ^`boolean` := v3 @kind boolean;
  #L2574a6.  v13:= new `retrofit2.ParameterHandler$Body`;
  #L2574aa.  v14:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2574ae.  call `<init>`(v13, v14, v11, v12) @signature `Lretrofit2/ParameterHandler$Body;.<init>:(Ljava/lang/reflect/Method;ILretrofit2/Converter;)V` @kind direct;
  #L2574b4.  return v13 @kind object;
  #L2574b6.  v13:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L2574b8.  v14:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2574bc.  v0:= new `java.lang.Object`[v3];
  #L2574c0.  v0[v4]:= v12 @kind object;
  #L2574c4.  v12:= "Unable to create @Body converter for %s" @kind object;
  #L2574c8.  call temp:= `parameterError`(v14, v13, v11, v12, v0) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2574ce.  v11:= temp @kind object;
  #L2574d0.  throw v11;
  #L2574d2.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2574d6.  v13:= new `java.lang.Object`[v4];
  #L2574da.  v14:= "Multiple @Body method annotations found." @kind object;
  #L2574de.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2574e4.  v11:= temp @kind object;
  #L2574e6.  throw v11;
  #L2574e8.  v12:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2574ec.  v13:= new `java.lang.Object`[v4];
  #L2574f0.  v14:= "@Body parameters cannot be used with form or multi-part encoding." @kind object;
  #L2574f4.  call temp:= `parameterError`(v12, v11, v14, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2574fa.  v11:= temp @kind object;
  #L2574fc.  throw v11;
  #L2574fe.  v13:= instanceof @variable v14 @type ^`retrofit2.http.Tag` @kind boolean;
  #L257502.  if v13 == 0 then goto L2575ac;
  #L257506.  call `validateResolvableType`(v10, v11, v12) @signature `Lretrofit2/RequestFactory$Builder;.validateResolvableType:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L25750c.  call temp:= `getRawType`(v12) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L257512.  v12:= temp @kind object;
  #L257514.  v13:= v11 + -1;
  #L257518.  if v13 < 0 then goto L2575a0;
  #L25751c.  v14:= v10.`retrofit2.RequestFactory$Builder.parameterHandlers` @type ^`retrofit2.ParameterHandler`[] @kind object;
  #L257520.  v14:= v14[v13] @kind object;
  #L257524.  v0:= instanceof @variable v14 @type ^`retrofit2.ParameterHandler$Tag` @kind boolean;
  #L257528.  if v0 == 0 then goto L25759a;
  #L25752c.  v14:= (`retrofit2.ParameterHandler$Tag`) v14 @kind object;
  #L257530.  v14:= v14.`retrofit2.ParameterHandler$Tag.cls` @type ^`java.lang.Class` @kind object;
  #L257534.  call temp:= `equals`(v14, v12) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L25753a.  v14:= temp;
  #L25753c.  if v14 != 0 then goto L257542;
  #L257540.  goto L25759a;
  #L257542.  v14:= v10.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L257546.  v0:= new `java.lang.StringBuilder`;
  #L25754a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L257550.  v1:= "@Tag type " @kind object;
  #L257554.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25755a.  call temp:= `getName`(v12) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L257560.  v12:= temp @kind object;
  #L257562.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L257568.  v12:= " is duplicate of parameter #" @kind object;
  #L25756c.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L257572.  v13:= v13 + v3 @kind int;
  #L257574.  call temp:= `append`(v0, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L25757a.  v12:= " and would always overwrite its value." @kind object;
  #L25757e.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L257584.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L25758a.  v12:= temp @kind object;
  #L25758c.  v13:= new `java.lang.Object`[v4];
  #L257590.  call temp:= `parameterError`(v14, v11, v12, v13) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257596.  v11:= temp @kind object;
  #L257598.  throw v11;
  #L25759a.  v13:= v13 + -1;
  #L25759e.  goto L257518;
  #L2575a0.  v11:= new `retrofit2.ParameterHandler$Tag`;
  #L2575a4.  call `<init>`(v11, v12) @signature `Lretrofit2/ParameterHandler$Tag;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L2575aa.  return v11 @kind object;
  #L2575ac.  v11:= 0I;
  #L2575ae.  return v11 @kind object;
  catch `java.lang.RuntimeException` @[L257492..L2574a2] goto L2574b6;
}
procedure `java.util.Set` `parsePathParameters`(`java.lang.String` v2 @kind object) @signature `Lretrofit2/RequestFactory$Builder;.parsePathParameters:(Ljava/lang/String;)Ljava/util/Set;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L25651c.  v0:= `@@retrofit2.RequestFactory$Builder.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` @kind object;
  #L256520.  call temp:= `matcher`(v0, v2) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L256526.  v2:= temp @kind object;
  #L256528.  v0:= new `java.util.LinkedHashSet`;
  #L25652c.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L256532.  call temp:= `find`(v2) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L256538.  v1:= temp;
  #L25653a.  if v1 == 0 then goto L256550;
  #L25653e.  v1:= 1I;
  #L256540.  call temp:= `group`(v2, v1) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L256546.  v1:= temp @kind object;
  #L256548.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L25654e.  goto L256532;
  #L256550.  return v0 @kind object;
}
procedure `void` `validatePathName`(`retrofit2.RequestFactory$Builder` v5 @kind this, `int` v6 , `java.lang.String` v7 @kind object) @signature `Lretrofit2/RequestFactory$Builder;.validatePathName:(ILjava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L257a6c.  v0:= `@@retrofit2.RequestFactory$Builder.PARAM_NAME_REGEX` @type ^`java.util.regex.Pattern` @kind object;
  #L257a70.  call temp:= `matcher`(v0, v7) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L257a76.  v0:= temp @kind object;
  #L257a78.  call temp:= `matches`(v0) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L257a7e.  v0:= temp;
  #L257a80.  v1:= 1I;
  #L257a82.  v2:= 0I;
  #L257a84.  v3:= 2I;
  #L257a86.  if v0 == 0 then goto L257abe;
  #L257a8a.  v0:= v5.`retrofit2.RequestFactory$Builder.relativeUrlParamNames` @type ^`java.util.Set` @kind object;
  #L257a8e.  call temp:= `contains`(v0, v7) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L257a94.  v0:= temp;
  #L257a96.  if v0 == 0 then goto L257a9c;
  #L257a9a.  return @kind void;
  #L257a9c.  v0:= v5.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L257aa0.  v3:= new `java.lang.Object`[v3];
  #L257aa4.  v4:= v5.`retrofit2.RequestFactory$Builder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L257aa8.  v3[v2]:= v4 @kind object;
  #L257aac.  v3[v1]:= v7 @kind object;
  #L257ab0.  v7:= "URL \"%s\" does not contain \"{%s}\"." @kind object;
  #L257ab4.  call temp:= `parameterError`(v0, v6, v7, v3) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257aba.  v6:= temp @kind object;
  #L257abc.  throw v6;
  #L257abe.  v0:= v5.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L257ac2.  v3:= new `java.lang.Object`[v3];
  #L257ac6.  v4:= `@@retrofit2.RequestFactory$Builder.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` @kind object;
  #L257aca.  call temp:= `pattern`(v4) @signature `Ljava/util/regex/Pattern;.pattern:()Ljava/lang/String;` @kind virtual;
  #L257ad0.  v4:= temp @kind object;
  #L257ad2.  v3[v2]:= v4 @kind object;
  #L257ad6.  v3[v1]:= v7 @kind object;
  #L257ada.  v7:= "@Path parameter name must match %s. Found: %s" @kind object;
  #L257ade.  call temp:= `parameterError`(v0, v6, v7, v3) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257ae4.  v6:= temp @kind object;
  #L257ae6.  throw v6;
}
procedure `void` `validateResolvableType`(`retrofit2.RequestFactory$Builder` v3 @kind this, `int` v4 , `java.lang.reflect.Type` v5 @kind object) @signature `Lretrofit2/RequestFactory$Builder;.validateResolvableType:(ILjava/lang/reflect/Type;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L257af8.  call temp:= `hasUnresolvableType`(v5) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L257afe.  v0:= temp;
  #L257b00.  if v0 != 0 then goto L257b06;
  #L257b04.  return @kind void;
  #L257b06.  v0:= v3.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L257b0a.  v1:= 1I;
  #L257b0c.  v1:= new `java.lang.Object`[v1];
  #L257b10.  v2:= 0I;
  #L257b12.  v1[v2]:= v5 @kind object;
  #L257b16.  v5:= "Parameter type must not include a type variable or wildcard: %s" @kind object;
  #L257b1a.  call temp:= `parameterError`(v0, v4, v5, v1) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257b20.  v4:= temp @kind object;
  #L257b22.  throw v4;
}
procedure `retrofit2.RequestFactory` `build`(`retrofit2.RequestFactory$Builder` v8 @kind this) @signature `Lretrofit2/RequestFactory$Builder;.build:()Lretrofit2/RequestFactory;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2575d0.  v0:= v8.`retrofit2.RequestFactory$Builder.methodAnnotations` @type ^`java.lang.annotation.Annotation`[] @kind object;
  #L2575d4.  v1:= length @variable v0;
  #L2575d6.  v2:= 0I;
  #L2575d8.  v3:= 0I;
  #L2575da.  if v3 >= v1 then goto L2575ee;
  #L2575de.  v4:= v0[v3] @kind object;
  #L2575e2.  call `parseMethodAnnotation`(v8, v4) @signature `Lretrofit2/RequestFactory$Builder;.parseMethodAnnotation:(Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L2575e8.  v3:= v3 + 1;
  #L2575ec.  goto L2575da;
  #L2575ee.  v0:= v8.`retrofit2.RequestFactory$Builder.httpMethod` @type ^`java.lang.String` @kind object;
  #L2575f2.  if v0 == 0 then goto L257748;
  #L2575f6.  v0:= v8.`retrofit2.RequestFactory$Builder.hasBody` @type ^`boolean` @kind boolean;
  #L2575fa.  if v0 != 0 then goto L25763c;
  #L2575fe.  v0:= v8.`retrofit2.RequestFactory$Builder.isMultipart` @type ^`boolean` @kind boolean;
  #L257602.  if v0 != 0 then goto L257626;
  #L257606.  v0:= v8.`retrofit2.RequestFactory$Builder.isFormEncoded` @type ^`boolean` @kind boolean;
  #L25760a.  if v0 != 0 then goto L257610;
  #L25760e.  goto L25763c;
  #L257610.  v0:= v8.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L257614.  v1:= new `java.lang.Object`[v2];
  #L257618.  v2:= "FormUrlEncoded can only be specified on HTTP methods with request body (e.g., @POST)." @kind object;
  #L25761c.  call temp:= `methodError`(v0, v2, v1) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257622.  v0:= temp @kind object;
  #L257624.  throw v0;
  #L257626.  v0:= v8.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L25762a.  v1:= new `java.lang.Object`[v2];
  #L25762e.  v2:= "Multipart can only be specified on HTTP methods with request body (e.g., @POST)." @kind object;
  #L257632.  call temp:= `methodError`(v0, v2, v1) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257638.  v0:= temp @kind object;
  #L25763a.  throw v0;
  #L25763c.  v0:= v8.`retrofit2.RequestFactory$Builder.parameterAnnotationsArray` @type ^`java.lang.annotation.Annotation`[][] @kind object;
  #L257640.  v0:= length @variable v0;
  #L257642.  v1:= new `retrofit2.ParameterHandler`[v0];
  #L257646.  v8.`retrofit2.RequestFactory$Builder.parameterHandlers` @type ^`retrofit2.ParameterHandler`[] := v1 @kind object;
  #L25764a.  v1:= v0 + -1;
  #L25764e.  v3:= 0I;
  #L257650.  v4:= 1I;
  #L257652.  if v3 >= v0 then goto L257684;
  #L257656.  v5:= v8.`retrofit2.RequestFactory$Builder.parameterHandlers` @type ^`retrofit2.ParameterHandler`[] @kind object;
  #L25765a.  v6:= v8.`retrofit2.RequestFactory$Builder.parameterTypes` @type ^`java.lang.reflect.Type`[] @kind object;
  #L25765e.  v6:= v6[v3] @kind object;
  #L257662.  v7:= v8.`retrofit2.RequestFactory$Builder.parameterAnnotationsArray` @type ^`java.lang.annotation.Annotation`[][] @kind object;
  #L257666.  v7:= v7[v3] @kind object;
  #L25766a.  if v3 != v1 then goto L257670;
  #L25766e.  goto L257672;
  #L257670.  v4:= 0I;
  #L257672.  call temp:= `parseParameter`(v8, v3, v6, v7, v4) @signature `Lretrofit2/RequestFactory$Builder;.parseParameter:(ILjava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Z)Lretrofit2/ParameterHandler;` @kind direct;
  #L257678.  v4:= temp @kind object;
  #L25767a.  v5[v3]:= v4 @kind object;
  #L25767e.  v3:= v3 + 1;
  #L257682.  goto L257650;
  #L257684.  v0:= v8.`retrofit2.RequestFactory$Builder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L257688.  if v0 != 0 then goto L2576b4;
  #L25768c.  v0:= v8.`retrofit2.RequestFactory$Builder.gotUrl` @type ^`boolean` @kind boolean;
  #L257690.  if v0 == 0 then goto L257696;
  #L257694.  goto L2576b4;
  #L257696.  v0:= v8.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L25769a.  v1:= new `java.lang.Object`[v4];
  #L25769e.  v3:= v8.`retrofit2.RequestFactory$Builder.httpMethod` @type ^`java.lang.String` @kind object;
  #L2576a2.  v1[v2]:= v3 @kind object;
  #L2576a6.  v2:= "Missing either @%s URL or @Url parameter." @kind object;
  #L2576aa.  call temp:= `methodError`(v0, v2, v1) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2576b0.  v0:= temp @kind object;
  #L2576b2.  throw v0;
  #L2576b4.  v0:= v8.`retrofit2.RequestFactory$Builder.isFormEncoded` @type ^`boolean` @kind boolean;
  #L2576b8.  if v0 != 0 then goto L2576ec;
  #L2576bc.  v0:= v8.`retrofit2.RequestFactory$Builder.isMultipart` @type ^`boolean` @kind boolean;
  #L2576c0.  if v0 != 0 then goto L2576ec;
  #L2576c4.  v0:= v8.`retrofit2.RequestFactory$Builder.hasBody` @type ^`boolean` @kind boolean;
  #L2576c8.  if v0 != 0 then goto L2576ec;
  #L2576cc.  v0:= v8.`retrofit2.RequestFactory$Builder.gotBody` @type ^`boolean` @kind boolean;
  #L2576d0.  if v0 != 0 then goto L2576d6;
  #L2576d4.  goto L2576ec;
  #L2576d6.  v0:= v8.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L2576da.  v1:= new `java.lang.Object`[v2];
  #L2576de.  v2:= "Non-body HTTP method cannot contain @Body." @kind object;
  #L2576e2.  call temp:= `methodError`(v0, v2, v1) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2576e8.  v0:= temp @kind object;
  #L2576ea.  throw v0;
  #L2576ec.  v0:= v8.`retrofit2.RequestFactory$Builder.isFormEncoded` @type ^`boolean` @kind boolean;
  #L2576f0.  if v0 == 0 then goto L257714;
  #L2576f4.  v0:= v8.`retrofit2.RequestFactory$Builder.gotField` @type ^`boolean` @kind boolean;
  #L2576f8.  if v0 == 0 then goto L2576fe;
  #L2576fc.  goto L257714;
  #L2576fe.  v0:= v8.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L257702.  v1:= new `java.lang.Object`[v2];
  #L257706.  v2:= "Form-encoded method must contain at least one @Field." @kind object;
  #L25770a.  call temp:= `methodError`(v0, v2, v1) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257710.  v0:= temp @kind object;
  #L257712.  throw v0;
  #L257714.  v0:= v8.`retrofit2.RequestFactory$Builder.isMultipart` @type ^`boolean` @kind boolean;
  #L257718.  if v0 == 0 then goto L25773c;
  #L25771c.  v0:= v8.`retrofit2.RequestFactory$Builder.gotPart` @type ^`boolean` @kind boolean;
  #L257720.  if v0 == 0 then goto L257726;
  #L257724.  goto L25773c;
  #L257726.  v0:= v8.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L25772a.  v1:= new `java.lang.Object`[v2];
  #L25772e.  v2:= "Multipart method must contain at least one @Part." @kind object;
  #L257732.  call temp:= `methodError`(v0, v2, v1) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L257738.  v0:= temp @kind object;
  #L25773a.  throw v0;
  #L25773c.  v0:= new `retrofit2.RequestFactory`;
  #L257740.  call `<init>`(v0, v8) @signature `Lretrofit2/RequestFactory;.<init>:(Lretrofit2/RequestFactory$Builder;)V` @kind direct;
  #L257746.  return v0 @kind object;
  #L257748.  v0:= v8.`retrofit2.RequestFactory$Builder.method` @type ^`java.lang.reflect.Method` @kind object;
  #L25774c.  v1:= new `java.lang.Object`[v2];
  #L257750.  v2:= "HTTP method annotation is required (e.g., @GET, @POST, etc.)." @kind object;
  #L257754.  call temp:= `methodError`(v0, v2, v1) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L25775a.  v0:= temp @kind object;
  #L25775c.  throw v0;
}
