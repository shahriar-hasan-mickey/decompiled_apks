record `retrofit2.CompletableFutureCallAdapterFactory` @kind class @AccessFlag FINAL extends `retrofit2.CallAdapter$Factory` @kind class {
}
global `retrofit2.CallAdapter$Factory` `@@retrofit2.CompletableFutureCallAdapterFactory.INSTANCE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/CompletableFutureCallAdapterFactory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2535f8.  v0:= new `retrofit2.CompletableFutureCallAdapterFactory`;
  #L2535fc.  call `<init>`(v0) @signature `Lretrofit2/CompletableFutureCallAdapterFactory;.<init>:()V` @kind direct;
  #L253602.  `@@retrofit2.CompletableFutureCallAdapterFactory.INSTANCE` @type ^`retrofit2.CallAdapter$Factory` := v0 @kind object;
  #L253606.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.CompletableFutureCallAdapterFactory` v0 @kind this) @signature `Lretrofit2/CompletableFutureCallAdapterFactory;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L253618.  call `<init>`(v0) @signature `Lretrofit2/CallAdapter$Factory;.<init>:()V` @kind direct;
  #L25361e.  return @kind void;
}
procedure `retrofit2.CallAdapter` `get`(`retrofit2.CompletableFutureCallAdapterFactory` v1 @kind this, `java.lang.reflect.Type` v2 @kind object, `java.lang.annotation.Annotation`[] v3 @kind object, `retrofit2.Retrofit` v4 @kind object) @signature `Lretrofit2/CompletableFutureCallAdapterFactory;.get:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/CallAdapter;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L253560.  call temp:= `getRawType`(v2) @signature `Lretrofit2/CallAdapter$Factory;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L253566.  v3:= temp @kind object;
  #L253568.  v4:= constclass @type ^`java.util.concurrent.CompletableFuture` @kind object;
  #L25356c.  if v3 == v4 then goto L253574;
  #L253570.  v2:= 0I;
  #L253572.  return v2 @kind object;
  #L253574.  v3:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L253578.  if v3 == 0 then goto L2535d6;
  #L25357c.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L253580.  v3:= 0I;
  #L253582.  call temp:= `getParameterUpperBound`(v3, v2) @signature `Lretrofit2/CallAdapter$Factory;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L253588.  v2:= temp @kind object;
  #L25358a.  call temp:= `getRawType`(v2) @signature `Lretrofit2/CallAdapter$Factory;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L253590.  v4:= temp @kind object;
  #L253592.  v0:= constclass @type ^`retrofit2.Response` @kind object;
  #L253596.  if v4 == v0 then goto L2535a6;
  #L25359a.  v3:= new `retrofit2.CompletableFutureCallAdapterFactory$BodyCallAdapter`;
  #L25359e.  call `<init>`(v3, v2) @signature `Lretrofit2/CompletableFutureCallAdapterFactory$BodyCallAdapter;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L2535a4.  return v3 @kind object;
  #L2535a6.  v4:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L2535aa.  if v4 == 0 then goto L2535c6;
  #L2535ae.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L2535b2.  call temp:= `getParameterUpperBound`(v3, v2) @signature `Lretrofit2/CallAdapter$Factory;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L2535b8.  v2:= temp @kind object;
  #L2535ba.  v3:= new `retrofit2.CompletableFutureCallAdapterFactory$ResponseCallAdapter`;
  #L2535be.  call `<init>`(v3, v2) @signature `Lretrofit2/CompletableFutureCallAdapterFactory$ResponseCallAdapter;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L2535c4.  return v3 @kind object;
  #L2535c6.  v2:= new `java.lang.IllegalStateException`;
  #L2535ca.  v3:= "Response must be parameterized as Response<Foo> or Response<? extends Foo>" @kind object;
  #L2535ce.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2535d4.  throw v2;
  #L2535d6.  v2:= new `java.lang.IllegalStateException`;
  #L2535da.  v3:= "CompletableFuture return type must be parameterized as CompletableFuture<Foo> or CompletableFuture<? extends Foo>" @kind object;
  #L2535de.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2535e4.  throw v2;
}
