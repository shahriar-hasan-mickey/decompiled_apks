record `retrofit2.Utils` @kind class @AccessFlag FINAL {
}
global `java.lang.reflect.Type`[] `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/Utils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L259c68.  v0:= 0I;
  #L259c6a.  v0:= new `java.lang.reflect.Type`[v0];
  #L259c6e.  `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] := v0 @kind object;
  #L259c72.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Utils` v0 @kind this) @signature `Lretrofit2/Utils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L259c84.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L259c8a.  return @kind void;
}
procedure `h.j0` `buffer`(`h.j0` v4 @kind object) @signature `Lretrofit2/Utils;.buffer:(Lh/j0;)Lh/j0;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L259c24.  v0:= new `i.e`;
  #L259c28.  call `<init>`(v0) @signature `Li/e;.<init>:()V` @kind direct;
  #L259c2e.  call temp:= `source`(v4) @signature `Lh/j0;.source:()Li/g;` @kind virtual;
  #L259c34.  v1:= temp @kind object;
  #L259c36.  call temp:= `readAll`(v1, v0) @signature `Li/g;.readAll:(Li/x;)J` @kind interface;
  #L259c3c.  call temp:= `contentType`(v4) @signature `Lh/j0;.contentType:()Lh/b0;` @kind virtual;
  #L259c42.  v1:= temp @kind object;
  #L259c44.  call temp:= `contentLength`(v4) @signature `Lh/j0;.contentLength:()J` @kind virtual;
  #L259c4a.  v2:= temp @kind wide;
  #L259c4c.  call temp:= `create`(v1, v2, v0) @signature `Lh/j0;.create:(Lh/b0;JLi/g;)Lh/j0;` @kind static;
  #L259c52.  v4:= temp @kind object;
  #L259c54.  return v4 @kind object;
}
procedure `void` `checkNotPrimitive`(`java.lang.reflect.Type` v1 @kind object) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L259c9c.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L259ca0.  if v0 == 0 then goto L259cc2;
  #L259ca4.  v1:= (`java.lang.Class`) v1 @kind object;
  #L259ca8.  call temp:= `isPrimitive`(v1) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L259cae.  v1:= temp;
  #L259cb0.  if v1 != 0 then goto L259cb6;
  #L259cb4.  goto L259cc2;
  #L259cb6.  v1:= new `java.lang.IllegalArgumentException`;
  #L259cba.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L259cc0.  throw v1;
  #L259cc2.  return @kind void;
}
procedure `java.lang.Class` `declaringClassOf`(`java.lang.reflect.TypeVariable` v1 @kind object) @signature `Lretrofit2/Utils;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2595b8.  call temp:= `getGenericDeclaration`(v1) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L2595be.  v1:= temp @kind object;
  #L2595c0.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L2595c4.  if v0 == 0 then goto L2595ce;
  #L2595c8.  v1:= (`java.lang.Class`) v1 @kind object;
  #L2595cc.  goto L2595d0;
  #L2595ce.  v1:= 0I;
  #L2595d0.  return v1 @kind object;
}
procedure `boolean` `equals`(`java.lang.reflect.Type` v4 @kind object, `java.lang.reflect.Type` v5 @kind object) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2592dc.  v0:= 1I;
  #L2592de.  if v4 != v5 then goto L2592e4;
  #L2592e2.  return v0;
  #L2592e4.  v1:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L2592e8.  if v1 == 0 then goto L2592f6;
  #L2592ec.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2592f2.  v4:= temp;
  #L2592f4.  return v4;
  #L2592f6.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L2592fa.  v2:= 0I;
  #L2592fc.  if v1 == 0 then goto L259374;
  #L259300.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L259304.  if v1 != 0 then goto L25930a;
  #L259308.  return v2;
  #L25930a.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L25930e.  v5:= (`java.lang.reflect.ParameterizedType`) v5 @kind object;
  #L259312.  call temp:= `getOwnerType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L259318.  v1:= temp @kind object;
  #L25931a.  call temp:= `getOwnerType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L259320.  v3:= temp @kind object;
  #L259322.  if v1 == v3 then goto L259336;
  #L259326.  if v1 == 0 then goto L259370;
  #L25932a.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L259330.  v1:= temp;
  #L259332.  if v1 == 0 then goto L259370;
  #L259336.  call temp:= `getRawType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L25933c.  v1:= temp @kind object;
  #L25933e.  call temp:= `getRawType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L259344.  v3:= temp @kind object;
  #L259346.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L25934c.  v1:= temp;
  #L25934e.  if v1 == 0 then goto L259370;
  #L259352.  call temp:= `getActualTypeArguments`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L259358.  v4:= temp @kind object;
  #L25935a.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L259360.  v5:= temp @kind object;
  #L259362.  call temp:= `equals`(v4, v5) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L259368.  v4:= temp;
  #L25936a.  if v4 == 0 then goto L259370;
  #L25936e.  goto L259372;
  #L259370.  v0:= 0I;
  #L259372.  return v0;
  #L259374.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L259378.  if v1 == 0 then goto L2593a8;
  #L25937c.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L259380.  if v0 != 0 then goto L259386;
  #L259384.  return v2;
  #L259386.  v4:= (`java.lang.reflect.GenericArrayType`) v4 @kind object;
  #L25938a.  v5:= (`java.lang.reflect.GenericArrayType`) v5 @kind object;
  #L25938e.  call temp:= `getGenericComponentType`(v4) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L259394.  v4:= temp @kind object;
  #L259396.  call temp:= `getGenericComponentType`(v5) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L25939c.  v5:= temp @kind object;
  #L25939e.  call temp:= `equals`(v4, v5) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L2593a4.  v4:= temp;
  #L2593a6.  return v4;
  #L2593a8.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L2593ac.  if v1 == 0 then goto L259400;
  #L2593b0.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L2593b4.  if v1 != 0 then goto L2593ba;
  #L2593b8.  return v2;
  #L2593ba.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L2593be.  v5:= (`java.lang.reflect.WildcardType`) v5 @kind object;
  #L2593c2.  call temp:= `getUpperBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L2593c8.  v1:= temp @kind object;
  #L2593ca.  call temp:= `getUpperBounds`(v5) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L2593d0.  v3:= temp @kind object;
  #L2593d2.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L2593d8.  v1:= temp;
  #L2593da.  if v1 == 0 then goto L2593fc;
  #L2593de.  call temp:= `getLowerBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L2593e4.  v4:= temp @kind object;
  #L2593e6.  call temp:= `getLowerBounds`(v5) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L2593ec.  v5:= temp @kind object;
  #L2593ee.  call temp:= `equals`(v4, v5) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L2593f4.  v4:= temp;
  #L2593f6.  if v4 == 0 then goto L2593fc;
  #L2593fa.  goto L2593fe;
  #L2593fc.  v0:= 0I;
  #L2593fe.  return v0;
  #L259400.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L259404.  if v1 == 0 then goto L259450;
  #L259408.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L25940c.  if v1 != 0 then goto L259412;
  #L259410.  return v2;
  #L259412.  v4:= (`java.lang.reflect.TypeVariable`) v4 @kind object;
  #L259416.  v5:= (`java.lang.reflect.TypeVariable`) v5 @kind object;
  #L25941a.  call temp:= `getGenericDeclaration`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L259420.  v1:= temp @kind object;
  #L259422.  call temp:= `getGenericDeclaration`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L259428.  v3:= temp @kind object;
  #L25942a.  if v1 != v3 then goto L25944c;
  #L25942e.  call temp:= `getName`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L259434.  v4:= temp @kind object;
  #L259436.  call temp:= `getName`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L25943c.  v5:= temp @kind object;
  #L25943e.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L259444.  v4:= temp;
  #L259446.  if v4 == 0 then goto L25944c;
  #L25944a.  goto L25944e;
  #L25944c.  v0:= 0I;
  #L25944e.  return v0;
  #L259450.  return v2;
}
procedure `java.lang.reflect.Type` `getGenericSupertype`(`java.lang.reflect.Type` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L259848.  if v5 != v4 then goto L25984e;
  #L25984c.  return v3 @kind object;
  #L25984e.  call temp:= `isInterface`(v5) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L259854.  v3:= temp;
  #L259856.  if v3 == 0 then goto L2598b0;
  #L25985a.  call temp:= `getInterfaces`(v4) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L259860.  v3:= temp @kind object;
  #L259862.  v0:= 0I;
  #L259864.  v1:= length @variable v3;
  #L259866.  if v0 >= v1 then goto L2598b0;
  #L25986a.  v2:= v3[v0] @kind object;
  #L25986e.  if v2 != v5 then goto L259880;
  #L259872.  call temp:= `getGenericInterfaces`(v4) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L259878.  v3:= temp @kind object;
  #L25987a.  v3:= v3[v0] @kind object;
  #L25987e.  return v3 @kind object;
  #L259880.  v2:= v3[v0] @kind object;
  #L259884.  call temp:= `isAssignableFrom`(v5, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L25988a.  v2:= temp;
  #L25988c.  if v2 == 0 then goto L2598aa;
  #L259890.  call temp:= `getGenericInterfaces`(v4) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L259896.  v4:= temp @kind object;
  #L259898.  v4:= v4[v0] @kind object;
  #L25989c.  v3:= v3[v0] @kind object;
  #L2598a0.  call temp:= `getGenericSupertype`(v4, v3, v5) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L2598a6.  v3:= temp @kind object;
  #L2598a8.  return v3 @kind object;
  #L2598aa.  v0:= v0 + 1;
  #L2598ae.  goto L259866;
  #L2598b0.  call temp:= `isInterface`(v4) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L2598b6.  v3:= temp;
  #L2598b8.  if v3 != 0 then goto L2598fc;
  #L2598bc.  v3:= constclass @type ^`java.lang.Object` @kind object;
  #L2598c0.  if v4 == v3 then goto L2598fc;
  #L2598c4.  call temp:= `getSuperclass`(v4) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L2598ca.  v3:= temp @kind object;
  #L2598cc.  if v3 != v5 then goto L2598da;
  #L2598d0.  call temp:= `getGenericSuperclass`(v4) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L2598d6.  v3:= temp @kind object;
  #L2598d8.  return v3 @kind object;
  #L2598da.  call temp:= `isAssignableFrom`(v5, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L2598e0.  v0:= temp;
  #L2598e2.  if v0 == 0 then goto L2598f8;
  #L2598e6.  call temp:= `getGenericSuperclass`(v4) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L2598ec.  v4:= temp @kind object;
  #L2598ee.  call temp:= `getGenericSupertype`(v4, v3, v5) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L2598f4.  v3:= temp @kind object;
  #L2598f6.  return v3 @kind object;
  #L2598f8.  v4:= v3 @kind object;
  #L2598fa.  goto L2598bc;
  #L2598fc.  return v5 @kind object;
}
procedure `java.lang.reflect.Type` `getParameterLowerBound`(`int` v0 , `java.lang.reflect.ParameterizedType` v1 @kind object) @signature `Lretrofit2/Utils;.getParameterLowerBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;

  #L259910.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L259916.  v1:= temp @kind object;
  #L259918.  v0:= v1[v0] @kind object;
  #L25991c.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L259920.  if v1 == 0 then goto L259936;
  #L259924.  v0:= (`java.lang.reflect.WildcardType`) v0 @kind object;
  #L259928.  call temp:= `getLowerBounds`(v0) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L25992e.  v0:= temp @kind object;
  #L259930.  v1:= 0I;
  #L259932.  v0:= v0[v1] @kind object;
  #L259936.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getParameterUpperBound`(`int` v4 , `java.lang.reflect.ParameterizedType` v5 @kind object) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L259948.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L25994e.  v0:= temp @kind object;
  #L259950.  if v4 < 0 then goto L25997a;
  #L259954.  v1:= length @variable v0;
  #L259956.  if v4 >= v1 then goto L25997a;
  #L25995a.  v4:= v0[v4] @kind object;
  #L25995e.  v5:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L259962.  if v5 == 0 then goto L259978;
  #L259966.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L25996a.  call temp:= `getUpperBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L259970.  v4:= temp @kind object;
  #L259972.  v5:= 0I;
  #L259974.  v4:= v4[v5] @kind object;
  #L259978.  return v4 @kind object;
  #L25997a.  v1:= new `java.lang.IllegalArgumentException`;
  #L25997e.  v2:= new `java.lang.StringBuilder`;
  #L259982.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L259988.  v3:= "Index " @kind object;
  #L25998c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L259992.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L259998.  v4:= " not in range [0," @kind object;
  #L25999c.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2599a2.  v4:= length @variable v0;
  #L2599a4.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2599aa.  v4:= ") for " @kind object;
  #L2599ae.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2599b4.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2599ba.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2599c0.  v4:= temp @kind object;
  #L2599c2.  call `<init>`(v1, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2599c8.  throw v1;
}
procedure `java.lang.Class` `getRawType`(`java.lang.reflect.Type` v3 @kind object) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2595e4.  v0:= "type == null" @kind object;
  #L2595e8.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2595ee.  v0:= instanceof @variable v3 @type ^`java.lang.Class` @kind boolean;
  #L2595f2.  if v0 == 0 then goto L2595fc;
  #L2595f6.  v3:= (`java.lang.Class`) v3 @kind object;
  #L2595fa.  return v3 @kind object;
  #L2595fc.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L259600.  if v0 == 0 then goto L25962a;
  #L259604.  v3:= (`java.lang.reflect.ParameterizedType`) v3 @kind object;
  #L259608.  call temp:= `getRawType`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L25960e.  v3:= temp @kind object;
  #L259610.  v0:= instanceof @variable v3 @type ^`java.lang.Class` @kind boolean;
  #L259614.  if v0 == 0 then goto L25961e;
  #L259618.  v3:= (`java.lang.Class`) v3 @kind object;
  #L25961c.  return v3 @kind object;
  #L25961e.  v3:= new `java.lang.IllegalArgumentException`;
  #L259622.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L259628.  throw v3;
  #L25962a.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L25962e.  v1:= 0I;
  #L259630.  if v0 == 0 then goto L25965a;
  #L259634.  v3:= (`java.lang.reflect.GenericArrayType`) v3 @kind object;
  #L259638.  call temp:= `getGenericComponentType`(v3) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L25963e.  v3:= temp @kind object;
  #L259640.  call temp:= `getRawType`(v3) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L259646.  v3:= temp @kind object;
  #L259648.  call temp:= `newInstance`(v3, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L25964e.  v3:= temp @kind object;
  #L259650.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L259656.  v3:= temp @kind object;
  #L259658.  return v3 @kind object;
  #L25965a.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L25965e.  if v0 == 0 then goto L259668;
  #L259662.  v3:= constclass @type ^`java.lang.Object` @kind object;
  #L259666.  return v3 @kind object;
  #L259668.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L25966c.  if v0 == 0 then goto L25968a;
  #L259670.  v3:= (`java.lang.reflect.WildcardType`) v3 @kind object;
  #L259674.  call temp:= `getUpperBounds`(v3) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L25967a.  v3:= temp @kind object;
  #L25967c.  v3:= v3[v1] @kind object;
  #L259680.  call temp:= `getRawType`(v3) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L259686.  v3:= temp @kind object;
  #L259688.  return v3 @kind object;
  #L25968a.  v0:= new `java.lang.IllegalArgumentException`;
  #L25968e.  v1:= new `java.lang.StringBuilder`;
  #L259692.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L259698.  v2:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L25969c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2596a2.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2596a8.  v2:= "> is of type " @kind object;
  #L2596ac.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2596b2.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2596b8.  v3:= temp @kind object;
  #L2596ba.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2596c0.  v3:= temp @kind object;
  #L2596c2.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2596c8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2596ce.  v3:= temp @kind object;
  #L2596d0.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2596d6.  throw v0;
}
procedure `java.lang.reflect.Type` `getSupertype`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lretrofit2/Utils;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;

  #L2599dc.  call temp:= `isAssignableFrom`(v3, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L2599e2.  v0:= temp;
  #L2599e4.  if v0 == 0 then goto L2599fa;
  #L2599e8.  call temp:= `getGenericSupertype`(v1, v2, v3) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L2599ee.  v3:= temp @kind object;
  #L2599f0.  call temp:= `resolve`(v1, v2, v3) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L2599f6.  v1:= temp @kind object;
  #L2599f8.  return v1 @kind object;
  #L2599fa.  v1:= new `java.lang.IllegalArgumentException`;
  #L2599fe.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L259a04.  throw v1;
}
procedure `boolean` `hasUnresolvableType`(`java.lang.reflect.Type` v5 @kind object) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L259464.  v0:= instanceof @variable v5 @type ^`java.lang.Class` @kind boolean;
  #L259468.  v1:= 0I;
  #L25946a.  if v0 == 0 then goto L259470;
  #L25946e.  return v1;
  #L259470.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L259474.  v2:= 1I;
  #L259476.  if v0 == 0 then goto L2594a8;
  #L25947a.  v5:= (`java.lang.reflect.ParameterizedType`) v5 @kind object;
  #L25947e.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L259484.  v5:= temp @kind object;
  #L259486.  v0:= length @variable v5;
  #L259488.  v3:= 0I;
  #L25948a.  if v3 >= v0 then goto L2594a6;
  #L25948e.  v4:= v5[v3] @kind object;
  #L259492.  call temp:= `hasUnresolvableType`(v4) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L259498.  v4:= temp;
  #L25949a.  if v4 == 0 then goto L2594a0;
  #L25949e.  return v2;
  #L2594a0.  v3:= v3 + 1;
  #L2594a4.  goto L25948a;
  #L2594a6.  return v1;
  #L2594a8.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L2594ac.  if v0 == 0 then goto L2594c6;
  #L2594b0.  v5:= (`java.lang.reflect.GenericArrayType`) v5 @kind object;
  #L2594b4.  call temp:= `getGenericComponentType`(v5) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L2594ba.  v5:= temp @kind object;
  #L2594bc.  call temp:= `hasUnresolvableType`(v5) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L2594c2.  v5:= temp;
  #L2594c4.  return v5;
  #L2594c6.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L2594ca.  if v0 == 0 then goto L2594d0;
  #L2594ce.  return v2;
  #L2594d0.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L2594d4.  if v0 == 0 then goto L2594da;
  #L2594d8.  return v2;
  #L2594da.  if v5 != 0 then goto L2594e4;
  #L2594de.  v0:= "null" @kind object;
  #L2594e2.  goto L2594f4;
  #L2594e4.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2594ea.  v0:= temp @kind object;
  #L2594ec.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2594f2.  v0:= temp @kind object;
  #L2594f4.  v1:= new `java.lang.IllegalArgumentException`;
  #L2594f8.  v2:= new `java.lang.StringBuilder`;
  #L2594fc.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L259502.  v3:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L259506.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25950c.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L259512.  v5:= "> is of type " @kind object;
  #L259516.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25951c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L259522.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L259528.  v5:= temp @kind object;
  #L25952a.  call `<init>`(v1, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L259530.  throw v1;
}
procedure `int` `indexOf`(`java.lang.Object`[] v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lretrofit2/Utils;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L25957c.  v0:= 0I;
  #L25957e.  v1:= length @variable v2;
  #L259580.  if v0 >= v1 then goto L25959c;
  #L259584.  v1:= v2[v0] @kind object;
  #L259588.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L25958e.  v1:= temp;
  #L259590.  if v1 == 0 then goto L259596;
  #L259594.  return v0;
  #L259596.  v0:= v0 + 1;
  #L25959a.  goto L25957e;
  #L25959c.  v2:= new `java.util.NoSuchElementException`;
  #L2595a0.  call `<init>`(v2) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2595a6.  throw v2;
}
procedure `boolean` `isAnnotationPresent`(`java.lang.annotation.Annotation`[] v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lretrofit2/Utils;.isAnnotationPresent:([Ljava/lang/annotation/Annotation;Ljava/lang/Class;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L259544.  v0:= length @variable v4;
  #L259546.  v1:= 0I;
  #L259548.  v2:= 0I;
  #L25954a.  if v2 >= v0 then goto L259568;
  #L25954e.  v3:= v4[v2] @kind object;
  #L259552.  call temp:= `isInstance`(v5, v3) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L259558.  v3:= temp;
  #L25955a.  if v3 == 0 then goto L259562;
  #L25955e.  v4:= 1I;
  #L259560.  return v4;
  #L259562.  v2:= v2 + 1;
  #L259566.  goto L25954a;
  #L259568.  return v1;
}
procedure `java.lang.RuntimeException` `methodError`(`java.lang.reflect.Method` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag STATIC {
    temp;
    v0;

  #L2596e8.  v0:= 0I;
  #L2596ea.  call temp:= `methodError`(v1, v0, v2, v3) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2596f0.  v1:= temp @kind object;
  #L2596f2.  return v1 @kind object;
}
procedure `java.lang.RuntimeException` `methodError`(`java.lang.reflect.Method` v1 @kind object, `java.lang.Throwable` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag STATIC {
    temp;
    v0;

  #L259704.  call temp:= `format`(v3, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L25970a.  v3:= temp @kind object;
  #L25970c.  v4:= new `java.lang.IllegalArgumentException`;
  #L259710.  v0:= new `java.lang.StringBuilder`;
  #L259714.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L25971a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L259720.  v3:= "\n    for method " @kind object;
  #L259724.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25972a.  call temp:= `getDeclaringClass`(v1) @signature `Ljava/lang/reflect/Method;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L259730.  v3:= temp @kind object;
  #L259732.  call temp:= `getSimpleName`(v3) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L259738.  v3:= temp @kind object;
  #L25973a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L259740.  v3:= "." @kind object;
  #L259744.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25974a.  call temp:= `getName`(v1) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L259750.  v1:= temp @kind object;
  #L259752.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L259758.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L25975e.  v1:= temp @kind object;
  #L259760.  call `<init>`(v4, v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L259766.  return v4 @kind object;
}
procedure `java.lang.RuntimeException` `parameterError`(`java.lang.reflect.Method` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag STATIC {
    temp;
    v0;

  #L259778.  v0:= new `java.lang.StringBuilder`;
  #L25977c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L259782.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L259788.  v3:= " (parameter #" @kind object;
  #L25978c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L259792.  v2:= v2 + 1;
  #L259796.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L25979c.  v2:= ")" @kind object;
  #L2597a0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2597a6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2597ac.  v2:= temp @kind object;
  #L2597ae.  call temp:= `methodError`(v1, v2, v4) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L2597b4.  v1:= temp @kind object;
  #L2597b6.  return v1 @kind object;
}
procedure `java.lang.RuntimeException` `parameterError`(`java.lang.reflect.Method` v1 @kind object, `java.lang.Throwable` v2 @kind object, `int` v3 , `java.lang.String` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag STATIC {
    temp;
    v0;

  #L2597c8.  v0:= new `java.lang.StringBuilder`;
  #L2597cc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2597d2.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2597d8.  v4:= " (parameter #" @kind object;
  #L2597dc.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2597e2.  v3:= v3 + 1;
  #L2597e6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2597ec.  v3:= ")" @kind object;
  #L2597f0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2597f6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2597fc.  v3:= temp @kind object;
  #L2597fe.  call temp:= `methodError`(v1, v2, v3, v5) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L259804.  v1:= temp @kind object;
  #L259806.  return v1 @kind object;
}
procedure `java.lang.reflect.Type` `resolve`(`java.lang.reflect.Type` v8 @kind object, `java.lang.Class` v9 @kind object, `java.lang.reflect.Type` v10 @kind object) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L259a18.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L259a1c.  if v0 == 0 then goto L259a36;
  #L259a20.  v10:= (`java.lang.reflect.TypeVariable`) v10 @kind object;
  #L259a24.  call temp:= `resolveTypeVariable`(v8, v9, v10) @signature `Lretrofit2/Utils;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @kind static;
  #L259a2a.  v0:= temp @kind object;
  #L259a2c.  if v0 != v10 then goto L259a32;
  #L259a30.  return v0 @kind object;
  #L259a32.  v10:= v0 @kind object;
  #L259a34.  goto L259a18;
  #L259a36.  v0:= instanceof @variable v10 @type ^`java.lang.Class` @kind boolean;
  #L259a3a.  if v0 == 0 then goto L259a72;
  #L259a3e.  v0:= v10 @kind object;
  #L259a40.  v0:= (`java.lang.Class`) v0 @kind object;
  #L259a44.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L259a4a.  v1:= temp;
  #L259a4c.  if v1 == 0 then goto L259a72;
  #L259a50.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L259a56.  v10:= temp @kind object;
  #L259a58.  call temp:= `resolve`(v8, v9, v10) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L259a5e.  v8:= temp @kind object;
  #L259a60.  if v10 != v8 then goto L259a66;
  #L259a64.  goto L259a70;
  #L259a66.  v0:= new `retrofit2.Utils$GenericArrayTypeImpl`;
  #L259a6a.  call `<init>`(v0, v8) @signature `Lretrofit2/Utils$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L259a70.  return v0 @kind object;
  #L259a72.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L259a76.  if v0 == 0 then goto L259aa0;
  #L259a7a.  v10:= (`java.lang.reflect.GenericArrayType`) v10 @kind object;
  #L259a7e.  call temp:= `getGenericComponentType`(v10) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L259a84.  v0:= temp @kind object;
  #L259a86.  call temp:= `resolve`(v8, v9, v0) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L259a8c.  v8:= temp @kind object;
  #L259a8e.  if v0 != v8 then goto L259a94;
  #L259a92.  goto L259a9e;
  #L259a94.  v10:= new `retrofit2.Utils$GenericArrayTypeImpl`;
  #L259a98.  call `<init>`(v10, v8) @signature `Lretrofit2/Utils$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L259a9e.  return v10 @kind object;
  #L259aa0.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L259aa4.  v1:= 1I;
  #L259aa6.  v2:= 0I;
  #L259aa8.  if v0 == 0 then goto L259b26;
  #L259aac.  v10:= (`java.lang.reflect.ParameterizedType`) v10 @kind object;
  #L259ab0.  call temp:= `getOwnerType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L259ab6.  v0:= temp @kind object;
  #L259ab8.  call temp:= `resolve`(v8, v9, v0) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L259abe.  v3:= temp @kind object;
  #L259ac0.  if v3 == v0 then goto L259ac8;
  #L259ac4.  v0:= 1I;
  #L259ac6.  goto L259aca;
  #L259ac8.  v0:= 0I;
  #L259aca.  call temp:= `getActualTypeArguments`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L259ad0.  v4:= temp @kind object;
  #L259ad2.  v5:= length @variable v4;
  #L259ad4.  if v2 >= v5 then goto L259b0a;
  #L259ad8.  v6:= v4[v2] @kind object;
  #L259adc.  call temp:= `resolve`(v8, v9, v6) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L259ae2.  v6:= temp @kind object;
  #L259ae4.  v7:= v4[v2] @kind object;
  #L259ae8.  if v6 == v7 then goto L259b04;
  #L259aec.  if v0 != 0 then goto L259b00;
  #L259af0.  call temp:= `clone`(v4) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L259af6.  v0:= temp @kind object;
  #L259af8.  v4:= v0 @kind object;
  #L259afa.  v4:= (`java.lang.reflect.Type`[]) v4 @kind object;
  #L259afe.  v0:= 1I;
  #L259b00.  v4[v2]:= v6 @kind object;
  #L259b04.  v2:= v2 + 1;
  #L259b08.  goto L259ad4;
  #L259b0a.  if v0 == 0 then goto L259b22;
  #L259b0e.  v8:= new `retrofit2.Utils$ParameterizedTypeImpl`;
  #L259b12.  call temp:= `getRawType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L259b18.  v9:= temp @kind object;
  #L259b1a.  call `<init>`(v8, v3, v9, v4) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L259b20.  goto L259b24;
  #L259b22.  v8:= v10 @kind object;
  #L259b24.  return v8 @kind object;
  #L259b26.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L259b2a.  if v0 == 0 then goto L259bae;
  #L259b2e.  v10:= (`java.lang.reflect.WildcardType`) v10 @kind object;
  #L259b32.  call temp:= `getLowerBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L259b38.  v0:= temp @kind object;
  #L259b3a.  call temp:= `getUpperBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L259b40.  v3:= temp @kind object;
  #L259b42.  v4:= length @variable v0;
  #L259b44.  if v4 != v1 then goto L259b7c;
  #L259b48.  v3:= v0[v2] @kind object;
  #L259b4c.  call temp:= `resolve`(v8, v9, v3) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L259b52.  v8:= temp @kind object;
  #L259b54.  v9:= v0[v2] @kind object;
  #L259b58.  if v8 == v9 then goto L259bae;
  #L259b5c.  v9:= new `retrofit2.Utils$WildcardTypeImpl`;
  #L259b60.  v10:= new `java.lang.reflect.Type`[v1];
  #L259b64.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L259b68.  v10[v2]:= v0 @kind object;
  #L259b6c.  v0:= new `java.lang.reflect.Type`[v1];
  #L259b70.  v0[v2]:= v8 @kind object;
  #L259b74.  call `<init>`(v9, v10, v0) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L259b7a.  return v9 @kind object;
  #L259b7c.  v0:= length @variable v3;
  #L259b7e.  if v0 != v1 then goto L259bae;
  #L259b82.  v0:= v3[v2] @kind object;
  #L259b86.  call temp:= `resolve`(v8, v9, v0) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L259b8c.  v8:= temp @kind object;
  #L259b8e.  v9:= v3[v2] @kind object;
  #L259b92.  if v8 == v9 then goto L259bae;
  #L259b96.  v9:= new `retrofit2.Utils$WildcardTypeImpl`;
  #L259b9a.  v10:= new `java.lang.reflect.Type`[v1];
  #L259b9e.  v10[v2]:= v8 @kind object;
  #L259ba2.  v8:= `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L259ba6.  call `<init>`(v9, v10, v8) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L259bac.  return v9 @kind object;
  #L259bae.  return v10 @kind object;
  #L259bb0.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L259bb2.  throw v8;
  catch `java.lang.Throwable` @[L259b86..L259b8e] goto L259bb0;
}
procedure `java.lang.reflect.Type` `resolveTypeVariable`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.reflect.TypeVariable` v3 @kind object) @signature `Lretrofit2/Utils;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L259bd0.  call temp:= `declaringClassOf`(v3) @signature `Lretrofit2/Utils;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @kind static;
  #L259bd6.  v0:= temp @kind object;
  #L259bd8.  if v0 != 0 then goto L259bde;
  #L259bdc.  return v3 @kind object;
  #L259bde.  call temp:= `getGenericSupertype`(v1, v2, v0) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L259be4.  v1:= temp @kind object;
  #L259be6.  v2:= instanceof @variable v1 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L259bea.  if v2 == 0 then goto L259c10;
  #L259bee.  call temp:= `getTypeParameters`(v0) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L259bf4.  v2:= temp @kind object;
  #L259bf6.  call temp:= `indexOf`(v2, v3) @signature `Lretrofit2/Utils;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L259bfc.  v2:= temp;
  #L259bfe.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L259c02.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L259c08.  v1:= temp @kind object;
  #L259c0a.  v1:= v1[v2] @kind object;
  #L259c0e.  return v1 @kind object;
  #L259c10.  return v3 @kind object;
}
procedure `void` `throwIfFatal`(`java.lang.Throwable` v1 @kind object) @signature `Lretrofit2/Utils;.throwIfFatal:(Ljava/lang/Throwable;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L259cd4.  v0:= instanceof @variable v1 @type ^`java.lang.VirtualMachineError` @kind boolean;
  #L259cd8.  if v0 != 0 then goto L259cfa;
  #L259cdc.  v0:= instanceof @variable v1 @type ^`java.lang.ThreadDeath` @kind boolean;
  #L259ce0.  if v0 != 0 then goto L259cf4;
  #L259ce4.  v0:= instanceof @variable v1 @type ^`java.lang.LinkageError` @kind boolean;
  #L259ce8.  if v0 != 0 then goto L259cee;
  #L259cec.  return @kind void;
  #L259cee.  v1:= (`java.lang.LinkageError`) v1 @kind object;
  #L259cf2.  throw v1;
  #L259cf4.  v1:= (`java.lang.ThreadDeath`) v1 @kind object;
  #L259cf8.  throw v1;
  #L259cfa.  v1:= (`java.lang.VirtualMachineError`) v1 @kind object;
  #L259cfe.  throw v1;
}
procedure `java.lang.String` `typeToString`(`java.lang.reflect.Type` v1 @kind object) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;

  #L259818.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L25981c.  if v0 == 0 then goto L25982e;
  #L259820.  v1:= (`java.lang.Class`) v1 @kind object;
  #L259824.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L25982a.  v1:= temp @kind object;
  #L25982c.  goto L259836;
  #L25982e.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L259834.  v1:= temp @kind object;
  #L259836.  return v1 @kind object;
}
