record `retrofit2.OkHttpCall` @kind class @AccessFlag FINAL extends `retrofit2.Call` @kind interface {
  `java.lang.Object`[] `retrofit2.OkHttpCall.args` @AccessFlag PRIVATE_FINAL;
  `h.j$a` `retrofit2.OkHttpCall.callFactory` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.OkHttpCall.canceled` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Throwable` `retrofit2.OkHttpCall.creationFailure` @AccessFlag PRIVATE;
  `boolean` `retrofit2.OkHttpCall.executed` @AccessFlag PRIVATE;
  `h.j` `retrofit2.OkHttpCall.rawCall` @AccessFlag PRIVATE;
  `retrofit2.RequestFactory` `retrofit2.OkHttpCall.requestFactory` @AccessFlag PRIVATE_FINAL;
  `retrofit2.Converter` `retrofit2.OkHttpCall.responseConverter` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.OkHttpCall` v0 @kind this, `retrofit2.RequestFactory` v1 @kind object, `java.lang.Object`[] v2 @kind object, `h.j$a` v3 @kind object, `retrofit2.Converter` v4 @kind object) @signature `Lretrofit2/OkHttpCall;.<init>:(Lretrofit2/RequestFactory;[Ljava/lang/Object;Lh/j$a;Lretrofit2/Converter;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L254c84.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L254c8a.  v0.`retrofit2.OkHttpCall.requestFactory` @type ^`retrofit2.RequestFactory` := v1 @kind object;
  #L254c8e.  v0.`retrofit2.OkHttpCall.args` @type ^`java.lang.Object`[] := v2 @kind object;
  #L254c92.  v0.`retrofit2.OkHttpCall.callFactory` @type ^`h.j$a` := v3 @kind object;
  #L254c96.  v0.`retrofit2.OkHttpCall.responseConverter` @type ^`retrofit2.Converter` := v4 @kind object;
  #L254c9a.  return @kind void;
}
procedure `h.j` `createRawCall`(`retrofit2.OkHttpCall` v3 @kind this) @signature `Lretrofit2/OkHttpCall;.createRawCall:()Lh/j;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L25496c.  v0:= v3.`retrofit2.OkHttpCall.callFactory` @type ^`h.j$a` @kind object;
  #L254970.  v1:= v3.`retrofit2.OkHttpCall.requestFactory` @type ^`retrofit2.RequestFactory` @kind object;
  #L254974.  v2:= v3.`retrofit2.OkHttpCall.args` @type ^`java.lang.Object`[] @kind object;
  #L254978.  call temp:= `create`(v1, v2) @signature `Lretrofit2/RequestFactory;.create:([Ljava/lang/Object;)Lh/g0;` @kind virtual;
  #L25497e.  v1:= temp @kind object;
  #L254980.  call temp:= `newCall`(v0, v1) @signature `Lh/j$a;.newCall:(Lh/g0;)Lh/j;` @kind interface;
  #L254986.  v0:= temp @kind object;
  #L254988.  if v0 == 0 then goto L25498e;
  #L25498c.  return v0 @kind object;
  #L25498e.  v0:= new `java.lang.NullPointerException`;
  #L254992.  v1:= "Call.Factory returned null." @kind object;
  #L254996.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25499c.  throw v0;
}
procedure `h.j` `getRawCall`(`retrofit2.OkHttpCall` v2 @kind this) @signature `Lretrofit2/OkHttpCall;.getRawCall:()Lh/j;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2549b0.  v0:= v2.`retrofit2.OkHttpCall.rawCall` @type ^`h.j` @kind object;
  #L2549b4.  if v0 == 0 then goto L2549ba;
  #L2549b8.  return v0 @kind object;
  #L2549ba.  v0:= v2.`retrofit2.OkHttpCall.creationFailure` @type ^`java.lang.Throwable` @kind object;
  #L2549be.  if v0 == 0 then goto L2549e4;
  #L2549c2.  v1:= instanceof @variable v0 @type ^`java.io.IOException` @kind boolean;
  #L2549c6.  if v1 != 0 then goto L2549de;
  #L2549ca.  v1:= instanceof @variable v0 @type ^`java.lang.RuntimeException` @kind boolean;
  #L2549ce.  if v1 == 0 then goto L2549d8;
  #L2549d2.  v0:= (`java.lang.RuntimeException`) v0 @kind object;
  #L2549d6.  throw v0;
  #L2549d8.  v0:= (`java.lang.Error`) v0 @kind object;
  #L2549dc.  throw v0;
  #L2549de.  v0:= (`java.io.IOException`) v0 @kind object;
  #L2549e2.  throw v0;
  #L2549e4.  call temp:= `createRawCall`(v2) @signature `Lretrofit2/OkHttpCall;.createRawCall:()Lh/j;` @kind direct;
  #L2549ea.  v0:= temp @kind object;
  #L2549ec.  v2.`retrofit2.OkHttpCall.rawCall` @type ^`h.j` := v0 @kind object;
  #L2549f0.  return v0 @kind object;
  #L2549f2.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L2549f4.  goto L2549fc;
  #L2549f6.  v0:= Exception @type ^`java.lang.Error` @kind object;
  #L2549f8.  goto L2549fc;
  #L2549fa.  v0:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L2549fc.  call `throwIfFatal`(v0) @signature `Lretrofit2/Utils;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L254a02.  v2.`retrofit2.OkHttpCall.creationFailure` @type ^`java.lang.Throwable` := v0 @kind object;
  #L254a06.  throw v0;
  catch `java.lang.RuntimeException` @[L2549e4..L2549f0] goto L2549fa;
  catch `java.lang.Error` @[L2549e4..L2549f0] goto L2549f6;
  catch `java.io.IOException` @[L2549e4..L2549f0] goto L2549f2;
}
procedure `void` `cancel`(`retrofit2.OkHttpCall` v1 @kind this) @signature `Lretrofit2/OkHttpCall;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254cac.  v0:= 1I;
  #L254cae.  v1.`retrofit2.OkHttpCall.canceled` @type ^`boolean` := v0 @kind boolean;
  #L254cb2.  @monitorenter v1
  #L254cb4.  v0:= v1.`retrofit2.OkHttpCall.rawCall` @type ^`h.j` @kind object;
  #L254cb8.  @monitorexit v1
  #L254cba.  if v0 == 0 then goto L254cc4;
  #L254cbe.  call `cancel`(v0) @signature `Lh/j;.cancel:()V` @kind interface;
  #L254cc4.  return @kind void;
  #L254cc6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L254cc8.  @monitorexit v1
  #L254cca.  throw v0;
  catch `java.lang.Throwable` @[L254cb4..L254cba] goto L254cc6;
  catch `java.lang.Throwable` @[L254cc8..L254cca] goto L254cc6;
}
procedure `java.lang.Object` `clone`(`retrofit2.OkHttpCall` v1 @kind this) @signature `Lretrofit2/OkHttpCall;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L254950.  call temp:= `clone`(v1) @signature `Lretrofit2/OkHttpCall;.clone:()Lretrofit2/OkHttpCall;` @kind virtual;
  #L254956.  v0:= temp @kind object;
  #L254958.  return v0 @kind object;
}
procedure `retrofit2.Call` `clone`(`retrofit2.OkHttpCall` v1 @kind this) @signature `Lretrofit2/OkHttpCall;.clone:()Lretrofit2/Call;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L254adc.  call temp:= `clone`(v1) @signature `Lretrofit2/OkHttpCall;.clone:()Lretrofit2/OkHttpCall;` @kind virtual;
  #L254ae2.  v0:= temp @kind object;
  #L254ae4.  return v0 @kind object;
}
procedure `retrofit2.OkHttpCall` `clone`(`retrofit2.OkHttpCall` v5 @kind this) @signature `Lretrofit2/OkHttpCall;.clone:()Lretrofit2/OkHttpCall;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L254af8.  v0:= new `retrofit2.OkHttpCall`;
  #L254afc.  v1:= v5.`retrofit2.OkHttpCall.requestFactory` @type ^`retrofit2.RequestFactory` @kind object;
  #L254b00.  v2:= v5.`retrofit2.OkHttpCall.args` @type ^`java.lang.Object`[] @kind object;
  #L254b04.  v3:= v5.`retrofit2.OkHttpCall.callFactory` @type ^`h.j$a` @kind object;
  #L254b08.  v4:= v5.`retrofit2.OkHttpCall.responseConverter` @type ^`retrofit2.Converter` @kind object;
  #L254b0c.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lretrofit2/OkHttpCall;.<init>:(Lretrofit2/RequestFactory;[Ljava/lang/Object;Lh/j$a;Lretrofit2/Converter;)V` @kind direct;
  #L254b12.  return v0 @kind object;
}
procedure `void` `enqueue`(`retrofit2.OkHttpCall` v3 @kind this, `retrofit2.Callback` v4 @kind object) @signature `Lretrofit2/OkHttpCall;.enqueue:(Lretrofit2/Callback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L254cf0.  v0:= "callback == null" @kind object;
  #L254cf4.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L254cfa.  @monitorenter v3
  #L254cfc.  v0:= v3.`retrofit2.OkHttpCall.executed` @type ^`boolean` @kind boolean;
  #L254d00.  if v0 != 0 then goto L254d64;
  #L254d04.  v0:= 1I;
  #L254d06.  v3.`retrofit2.OkHttpCall.executed` @type ^`boolean` := v0 @kind boolean;
  #L254d0a.  v0:= v3.`retrofit2.OkHttpCall.rawCall` @type ^`h.j` @kind object;
  #L254d0e.  v1:= v3.`retrofit2.OkHttpCall.creationFailure` @type ^`java.lang.Throwable` @kind object;
  #L254d12.  if v0 != 0 then goto L254d36;
  #L254d16.  if v1 != 0 then goto L254d36;
  #L254d1a.  call temp:= `createRawCall`(v3) @signature `Lretrofit2/OkHttpCall;.createRawCall:()Lh/j;` @kind direct;
  #L254d20.  v2:= temp @kind object;
  #L254d22.  v3.`retrofit2.OkHttpCall.rawCall` @type ^`h.j` := v2 @kind object;
  #L254d26.  v0:= v2 @kind object;
  #L254d28.  goto L254d36;
  #L254d2a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L254d2c.  call `throwIfFatal`(v1) @signature `Lretrofit2/Utils;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L254d32.  v3.`retrofit2.OkHttpCall.creationFailure` @type ^`java.lang.Throwable` := v1 @kind object;
  #L254d36.  @monitorexit v3
  #L254d38.  if v1 == 0 then goto L254d44;
  #L254d3c.  call `onFailure`(v4, v3, v1) @signature `Lretrofit2/Callback;.onFailure:(Lretrofit2/Call;Ljava/lang/Throwable;)V` @kind interface;
  #L254d42.  return @kind void;
  #L254d44.  v1:= v3.`retrofit2.OkHttpCall.canceled` @type ^`boolean` @kind boolean;
  #L254d48.  if v1 == 0 then goto L254d52;
  #L254d4c.  call `cancel`(v0) @signature `Lh/j;.cancel:()V` @kind interface;
  #L254d52.  v1:= new `retrofit2.OkHttpCall$1`;
  #L254d56.  call `<init>`(v1, v3, v4) @signature `Lretrofit2/OkHttpCall$1;.<init>:(Lretrofit2/OkHttpCall;Lretrofit2/Callback;)V` @kind direct;
  #L254d5c.  call `enqueue`(v0, v1) @signature `Lh/j;.enqueue:(Lh/k;)V` @kind interface;
  #L254d62.  return @kind void;
  #L254d64.  v4:= new `java.lang.IllegalStateException`;
  #L254d68.  v0:= "Already executed." @kind object;
  #L254d6c.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L254d72.  throw v4;
  #L254d74.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L254d76.  @monitorexit v3
  #L254d78.  throw v4;
  catch `java.lang.Throwable` @[L254cfc..L254d12] goto L254d74;
  catch `java.lang.Throwable` @[L254d1a..L254d26] goto L254d2a;
  catch `java.lang.Throwable` @[L254d2c..L254d38] goto L254d74;
  catch `java.lang.Throwable` @[L254d64..L254d78] goto L254d74;
}
procedure `retrofit2.Response` `execute`(`retrofit2.OkHttpCall` v2 @kind this) @signature `Lretrofit2/OkHttpCall;.execute:()Lretrofit2/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L254b24.  @monitorenter v2
  #L254b26.  v0:= v2.`retrofit2.OkHttpCall.executed` @type ^`boolean` @kind boolean;
  #L254b2a.  if v0 != 0 then goto L254b5e;
  #L254b2e.  v0:= 1I;
  #L254b30.  v2.`retrofit2.OkHttpCall.executed` @type ^`boolean` := v0 @kind boolean;
  #L254b34.  call temp:= `getRawCall`(v2) @signature `Lretrofit2/OkHttpCall;.getRawCall:()Lh/j;` @kind direct;
  #L254b3a.  v0:= temp @kind object;
  #L254b3c.  @monitorexit v2
  #L254b3e.  v1:= v2.`retrofit2.OkHttpCall.canceled` @type ^`boolean` @kind boolean;
  #L254b42.  if v1 == 0 then goto L254b4c;
  #L254b46.  call `cancel`(v0) @signature `Lh/j;.cancel:()V` @kind interface;
  #L254b4c.  call temp:= `execute`(v0) @signature `Lh/j;.execute:()Lh/i0;` @kind interface;
  #L254b52.  v0:= temp @kind object;
  #L254b54.  call temp:= `parseResponse`(v2, v0) @signature `Lretrofit2/OkHttpCall;.parseResponse:(Lh/i0;)Lretrofit2/Response;` @kind virtual;
  #L254b5a.  v0:= temp @kind object;
  #L254b5c.  return v0 @kind object;
  #L254b5e.  v0:= new `java.lang.IllegalStateException`;
  #L254b62.  v1:= "Already executed." @kind object;
  #L254b66.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L254b6c.  throw v0;
  #L254b6e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L254b70.  @monitorexit v2
  #L254b72.  throw v0;
  catch `java.lang.Throwable` @[L254b26..L254b3e] goto L254b6e;
  catch `java.lang.Throwable` @[L254b5e..L254b72] goto L254b6e;
}
procedure `boolean` `isCanceled`(`retrofit2.OkHttpCall` v2 @kind this) @signature `Lretrofit2/OkHttpCall;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2548d4.  v0:= v2.`retrofit2.OkHttpCall.canceled` @type ^`boolean` @kind boolean;
  #L2548d8.  v1:= 1I;
  #L2548da.  if v0 == 0 then goto L2548e0;
  #L2548de.  return v1;
  #L2548e0.  @monitorenter v2
  #L2548e2.  v0:= v2.`retrofit2.OkHttpCall.rawCall` @type ^`h.j` @kind object;
  #L2548e6.  if v0 == 0 then goto L2548fc;
  #L2548ea.  v0:= v2.`retrofit2.OkHttpCall.rawCall` @type ^`h.j` @kind object;
  #L2548ee.  call temp:= `isCanceled`(v0) @signature `Lh/j;.isCanceled:()Z` @kind interface;
  #L2548f4.  v0:= temp;
  #L2548f6.  if v0 == 0 then goto L2548fc;
  #L2548fa.  goto L2548fe;
  #L2548fc.  v1:= 0I;
  #L2548fe.  @monitorexit v2
  #L254900.  return v1;
  #L254902.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L254904.  @monitorexit v2
  #L254906.  throw v0;
  catch `java.lang.Throwable` @[L2548e2..L254906] goto L254902;
}
procedure `boolean` `isExecuted`(`retrofit2.OkHttpCall` v1 @kind this) @signature `Lretrofit2/OkHttpCall;.isExecuted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254924.  @monitorenter v1
  #L254926.  v0:= v1.`retrofit2.OkHttpCall.executed` @type ^`boolean` @kind boolean;
  #L25492a.  @monitorexit v1
  #L25492c.  return v0;
  #L25492e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L254930.  @monitorexit v1
  #L254932.  throw v0;
  catch `java.lang.Throwable` @[L254926..L25492a] goto L25492e;
}
procedure `retrofit2.Response` `parseResponse`(`retrofit2.OkHttpCall` v5 @kind this, `h.i0` v6 @kind object) @signature `Lretrofit2/OkHttpCall;.parseResponse:(Lh/i0;)Lretrofit2/Response;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L254b98.  call temp:= `body`(v6) @signature `Lh/i0;.body:()Lh/j0;` @kind virtual;
  #L254b9e.  v0:= temp @kind object;
  #L254ba0.  call temp:= `newBuilder`(v6) @signature `Lh/i0;.newBuilder:()Lh/i0$a;` @kind virtual;
  #L254ba6.  v6:= temp @kind object;
  #L254ba8.  v1:= new `retrofit2.OkHttpCall$NoContentResponseBody`;
  #L254bac.  call temp:= `contentType`(v0) @signature `Lh/j0;.contentType:()Lh/b0;` @kind virtual;
  #L254bb2.  v2:= temp @kind object;
  #L254bb4.  call temp:= `contentLength`(v0) @signature `Lh/j0;.contentLength:()J` @kind virtual;
  #L254bba.  v3:= temp @kind wide;
  #L254bbc.  call `<init>`(v1, v2, v3) @signature `Lretrofit2/OkHttpCall$NoContentResponseBody;.<init>:(Lh/b0;J)V` @kind direct;
  #L254bc2.  call temp:= `body`(v6, v1) @signature `Lh/i0$a;.body:(Lh/j0;)Lh/i0$a;` @kind virtual;
  #L254bc8.  call temp:= `build`(v6) @signature `Lh/i0$a;.build:()Lh/i0;` @kind virtual;
  #L254bce.  v6:= temp @kind object;
  #L254bd0.  call temp:= `code`(v6) @signature `Lh/i0;.code:()I` @kind virtual;
  #L254bd6.  v1:= temp;
  #L254bd8.  v2:= 200I;
  #L254bdc.  if v1 < v2 then goto L254c38;
  #L254be0.  v2:= 300I;
  #L254be4.  if v1 < v2 then goto L254bea;
  #L254be8.  goto L254c38;
  #L254bea.  v2:= 204I;
  #L254bee.  if v1 == v2 then goto L254c26;
  #L254bf2.  v2:= 205I;
  #L254bf6.  if v1 != v2 then goto L254bfc;
  #L254bfa.  goto L254c26;
  #L254bfc.  v1:= new `retrofit2.OkHttpCall$ExceptionCatchingResponseBody`;
  #L254c00.  call `<init>`(v1, v0) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;.<init>:(Lh/j0;)V` @kind direct;
  #L254c06.  v0:= v5.`retrofit2.OkHttpCall.responseConverter` @type ^`retrofit2.Converter` @kind object;
  #L254c0a.  call temp:= `convert`(v0, v1) @signature `Lretrofit2/Converter;.convert:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L254c10.  v0:= temp @kind object;
  #L254c12.  call temp:= `success`(v0, v6) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lh/i0;)Lretrofit2/Response;` @kind static;
  #L254c18.  v6:= temp @kind object;
  #L254c1a.  return v6 @kind object;
  #L254c1c.  v6:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L254c1e.  call `throwIfCaught`(v1) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingResponseBody;.throwIfCaught:()V` @kind virtual;
  #L254c24.  throw v6;
  #L254c26.  call `close`(v0) @signature `Lh/j0;.close:()V` @kind virtual;
  #L254c2c.  v0:= 0I;
  #L254c2e.  call temp:= `success`(v0, v6) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lh/i0;)Lretrofit2/Response;` @kind static;
  #L254c34.  v6:= temp @kind object;
  #L254c36.  return v6 @kind object;
  #L254c38.  call temp:= `buffer`(v0) @signature `Lretrofit2/Utils;.buffer:(Lh/j0;)Lh/j0;` @kind static;
  #L254c3e.  v1:= temp @kind object;
  #L254c40.  call temp:= `error`(v1, v6) @signature `Lretrofit2/Response;.error:(Lh/j0;Lh/i0;)Lretrofit2/Response;` @kind static;
  #L254c46.  v6:= temp @kind object;
  #L254c48.  call `close`(v0) @signature `Lh/j0;.close:()V` @kind virtual;
  #L254c4e.  return v6 @kind object;
  #L254c50.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L254c52.  call `close`(v0) @signature `Lh/j0;.close:()V` @kind virtual;
  #L254c58.  throw v6;
  catch `java.lang.RuntimeException` @[L254c06..L254c1a] goto L254c1c;
  catch `java.lang.Throwable` @[L254c38..L254c48] goto L254c50;
}
procedure `h.g0` `request`(`retrofit2.OkHttpCall` v3 @kind this) @signature `Lretrofit2/OkHttpCall;.request:()Lh/g0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L254a2c.  @monitorenter v3
  #L254a2e.  call temp:= `getRawCall`(v3) @signature `Lretrofit2/OkHttpCall;.getRawCall:()Lh/j;` @kind direct;
  #L254a34.  v0:= temp @kind object;
  #L254a36.  call temp:= `request`(v0) @signature `Lh/j;.request:()Lh/g0;` @kind interface;
  #L254a3c.  v0:= temp @kind object;
  #L254a3e.  @monitorexit v3
  #L254a40.  return v0 @kind object;
  #L254a42.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L254a44.  goto L254a58;
  #L254a46.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L254a48.  v1:= new `java.lang.RuntimeException`;
  #L254a4c.  v2:= "Unable to create request." @kind object;
  #L254a50.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L254a56.  throw v1;
  #L254a58.  @monitorexit v3
  #L254a5a.  throw v0;
  catch `java.io.IOException` @[L254a2e..L254a3e] goto L254a46;
  catch `java.lang.Throwable` @[L254a2e..L254a3e] goto L254a42;
  catch `java.lang.Throwable` @[L254a48..L254a58] goto L254a42;
}
procedure `i.a0` `timeout`(`retrofit2.OkHttpCall` v3 @kind this) @signature `Lretrofit2/OkHttpCall;.timeout:()Li/a0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L254a84.  @monitorenter v3
  #L254a86.  call temp:= `getRawCall`(v3) @signature `Lretrofit2/OkHttpCall;.getRawCall:()Lh/j;` @kind direct;
  #L254a8c.  v0:= temp @kind object;
  #L254a8e.  call temp:= `timeout`(v0) @signature `Lh/j;.timeout:()Li/a0;` @kind interface;
  #L254a94.  v0:= temp @kind object;
  #L254a96.  @monitorexit v3
  #L254a98.  return v0 @kind object;
  #L254a9a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L254a9c.  goto L254ab0;
  #L254a9e.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L254aa0.  v1:= new `java.lang.RuntimeException`;
  #L254aa4.  v2:= "Unable to create call." @kind object;
  #L254aa8.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L254aae.  throw v1;
  #L254ab0.  @monitorexit v3
  #L254ab2.  throw v0;
  catch `java.io.IOException` @[L254a86..L254a96] goto L254a9e;
  catch `java.lang.Throwable` @[L254a86..L254a96] goto L254a9a;
  catch `java.lang.Throwable` @[L254aa0..L254ab0] goto L254a9a;
}
