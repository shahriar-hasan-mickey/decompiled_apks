record `retrofit2.HttpException` @kind class @AccessFlag PUBLIC extends `java.lang.RuntimeException` @kind class {
  `int` `retrofit2.HttpException.code` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `retrofit2.HttpException.message` @AccessFlag PRIVATE_FINAL;
  `retrofit2.Response` `retrofit2.HttpException.response` @AccessFlag PRIVATE_FINAL_TRANSIENT;
}
procedure `void` `<init>`(`retrofit2.HttpException` v1 @kind this, `retrofit2.Response` v2 @kind object) @signature `Lretrofit2/HttpException;.<init>:(Lretrofit2/Response;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L253aa8.  call temp:= `getMessage`(v2) @signature `Lretrofit2/HttpException;.getMessage:(Lretrofit2/Response;)Ljava/lang/String;` @kind static;
  #L253aae.  v0:= temp @kind object;
  #L253ab0.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L253ab6.  call temp:= `code`(v2) @signature `Lretrofit2/Response;.code:()I` @kind virtual;
  #L253abc.  v0:= temp;
  #L253abe.  v1.`retrofit2.HttpException.code` @type ^`int` := v0;
  #L253ac2.  call temp:= `message`(v2) @signature `Lretrofit2/Response;.message:()Ljava/lang/String;` @kind virtual;
  #L253ac8.  v0:= temp @kind object;
  #L253aca.  v1.`retrofit2.HttpException.message` @type ^`java.lang.String` := v0 @kind object;
  #L253ace.  v1.`retrofit2.HttpException.response` @type ^`retrofit2.Response` := v2 @kind object;
  #L253ad2.  return @kind void;
}
procedure `java.lang.String` `getMessage`(`retrofit2.Response` v2 @kind object) @signature `Lretrofit2/HttpException;.getMessage:(Lretrofit2/Response;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L253a18.  v0:= "response == null" @kind object;
  #L253a1c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L253a22.  v0:= new `java.lang.StringBuilder`;
  #L253a26.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L253a2c.  v1:= "HTTP " @kind object;
  #L253a30.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L253a36.  call temp:= `code`(v2) @signature `Lretrofit2/Response;.code:()I` @kind virtual;
  #L253a3c.  v1:= temp;
  #L253a3e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L253a44.  v1:= " " @kind object;
  #L253a48.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L253a4e.  call temp:= `message`(v2) @signature `Lretrofit2/Response;.message:()Ljava/lang/String;` @kind virtual;
  #L253a54.  v2:= temp @kind object;
  #L253a56.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L253a5c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L253a62.  v2:= temp @kind object;
  #L253a64.  return v2 @kind object;
}
procedure `int` `code`(`retrofit2.HttpException` v1 @kind this) @signature `Lretrofit2/HttpException;.code:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L253a00.  v0:= v1.`retrofit2.HttpException.code` @type ^`int`;
  #L253a04.  return v0;
}
procedure `java.lang.String` `message`(`retrofit2.HttpException` v1 @kind this) @signature `Lretrofit2/HttpException;.message:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L253a78.  v0:= v1.`retrofit2.HttpException.message` @type ^`java.lang.String` @kind object;
  #L253a7c.  return v0 @kind object;
}
procedure `retrofit2.Response` `response`(`retrofit2.HttpException` v1 @kind this) @signature `Lretrofit2/HttpException;.response:()Lretrofit2/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L253a90.  v0:= v1.`retrofit2.HttpException.response` @type ^`retrofit2.Response` @kind object;
  #L253a94.  return v0 @kind object;
}
