record `e.c.b.a.e.f` @kind class @AccessFlag PUBLIC {
  `e.c.a.a.c` `e.c.b.a.e.f.a` @AccessFlag PRIVATE;
  `e.c.a.a.c` `e.c.b.a.e.f.b` @AccessFlag PRIVATE;
  `e.c.a.a.c` `e.c.b.a.e.f.c` @AccessFlag PRIVATE;
  `e.c.a.a.c` `e.c.b.a.e.f.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.c.b.a.e.f` v0 @kind this) @signature `Le/c/b/a/e/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L162a1c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L162a22.  return @kind void;
}
procedure `void` `<init>`(`e.c.b.a.e.f` v0 @kind this, `e.c.a.a.c` v1 @kind object, `e.c.a.a.c` v2 @kind object, `e.c.a.a.c` v3 @kind object, `e.c.a.a.c` v4 @kind object) @signature `Le/c/b/a/e/f;.<init>:(Le/c/a/a/c;Le/c/a/a/c;Le/c/a/a/c;Le/c/a/a/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L162a34.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L162a3a.  v0.`e.c.b.a.e.f.a` @type ^`e.c.a.a.c` := v1 @kind object;
  #L162a3e.  v0.`e.c.b.a.e.f.b` @type ^`e.c.a.a.c` := v2 @kind object;
  #L162a42.  v0.`e.c.b.a.e.f.c` @type ^`e.c.a.a.c` := v3 @kind object;
  #L162a46.  v0.`e.c.b.a.e.f.d` @type ^`e.c.a.a.c` := v4 @kind object;
  #L162a4a.  return @kind void;
}
procedure `void` `fillMissingData`(`e.c.b.a.e.f` v3 @kind this) @signature `Le/c/b/a/e/f;.fillMissingData:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L162a5c.  call temp:= `getInstance`() @signature `Le/c/a/a/d;.getInstance:()Le/c/a/a/d;` @kind static;
  #L162a62.  v0:= temp @kind object;
  #L162a64.  v1:= v3.`e.c.b.a.e.f.a` @type ^`e.c.a.a.c` @kind object;
  #L162a68.  v2:= 16I;
  #L162a6c.  if v1 != 0 then goto L162a84;
  #L162a70.  call temp:= `getInstance`() @signature `Lcom/mastercard/api/crypto/b;.getInstance:()Lcom/mastercard/api/crypto/b;` @kind static;
  #L162a76.  v1:= temp @kind object;
  #L162a78.  call temp:= `generateRandom`(v1, v2) @signature `Lcom/mastercard/api/crypto/b;.generateRandom:(I)Le/c/a/a/c;` @kind virtual;
  #L162a7e.  v1:= temp @kind object;
  #L162a80.  v3.`e.c.b.a.e.f.a` @type ^`e.c.a.a.c` := v1 @kind object;
  #L162a84.  v1:= v3.`e.c.b.a.e.f.b` @type ^`e.c.a.a.c` @kind object;
  #L162a88.  if v1 != 0 then goto L162aa0;
  #L162a8c.  call temp:= `getInstance`() @signature `Lcom/mastercard/api/crypto/b;.getInstance:()Lcom/mastercard/api/crypto/b;` @kind static;
  #L162a92.  v1:= temp @kind object;
  #L162a94.  call temp:= `generateRandom`(v1, v2) @signature `Lcom/mastercard/api/crypto/b;.generateRandom:(I)Le/c/a/a/c;` @kind virtual;
  #L162a9a.  v1:= temp @kind object;
  #L162a9c.  v3.`e.c.b.a.e.f.b` @type ^`e.c.a.a.c` := v1 @kind object;
  #L162aa0.  v1:= v3.`e.c.b.a.e.f.d` @type ^`e.c.a.a.c` @kind object;
  #L162aa4.  if v1 != 0 then goto L162ac0;
  #L162aa8.  call temp:= `getInstance`() @signature `Lcom/mastercard/api/crypto/b;.getInstance:()Lcom/mastercard/api/crypto/b;` @kind static;
  #L162aae.  v1:= temp @kind object;
  #L162ab0.  v2:= 8I;
  #L162ab4.  call temp:= `generateRandom`(v1, v2) @signature `Lcom/mastercard/api/crypto/b;.generateRandom:(I)Le/c/a/a/c;` @kind virtual;
  #L162aba.  v1:= temp @kind object;
  #L162abc.  v3.`e.c.b.a.e.f.d` @type ^`e.c.a.a.c` := v1 @kind object;
  #L162ac0.  v1:= v3.`e.c.b.a.e.f.c` @type ^`e.c.a.a.c` @kind object;
  #L162ac4.  if v1 != 0 then goto L162ad6;
  #L162ac8.  v1:= 1I;
  #L162aca.  call temp:= `getFromWord`(v0, v1) @signature `Le/c/a/a/d;.getFromWord:(I)Le/c/a/a/c;` @kind virtual;
  #L162ad0.  v0:= temp @kind object;
  #L162ad2.  v3.`e.c.b.a.e.f.c` @type ^`e.c.a.a.c` := v0 @kind object;
  #L162ad6.  return @kind void;
}
procedure `e.c.a.a.c` `getATC`(`e.c.b.a.e.f` v1 @kind this) @signature `Le/c/b/a/e/f;.getATC:()Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16291c.  v0:= v1.`e.c.b.a.e.f.c` @type ^`e.c.a.a.c` @kind object;
  #L162920.  return v0 @kind object;
}
procedure `e.c.a.a.c` `getIDN`(`e.c.b.a.e.f` v1 @kind this) @signature `Le/c/b/a/e/f;.getIDN:()Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L162934.  v0:= v1.`e.c.b.a.e.f.d` @type ^`e.c.a.a.c` @kind object;
  #L162938.  return v0 @kind object;
}
procedure `e.c.a.a.c` `getMDSessionKey`(`e.c.b.a.e.f` v1 @kind this) @signature `Le/c/b/a/e/f;.getMDSessionKey:()Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16294c.  v0:= v1.`e.c.b.a.e.f.b` @type ^`e.c.a.a.c` @kind object;
  #L162950.  return v0 @kind object;
}
procedure `e.c.a.a.c` `getUMDSessionKey`(`e.c.b.a.e.f` v1 @kind this) @signature `Le/c/b/a/e/f;.getUMDSessionKey:()Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L162964.  v0:= v1.`e.c.b.a.e.f.a` @type ^`e.c.a.a.c` @kind object;
  #L162968.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`e.c.b.a.e.f` v2 @kind this) @signature `Le/c/b/a/e/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16297c.  v0:= new `java.lang.StringBuilder`;
  #L162980.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L162986.  v1:= "TransactionCredentials{UMDSessionKey=" @kind object;
  #L16298a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162990.  v1:= v2.`e.c.b.a.e.f.a` @type ^`e.c.a.a.c` @kind object;
  #L162994.  call temp:= `getHexString`(v1) @signature `Le/c/a/a/c;.getHexString:()Ljava/lang/String;` @kind interface;
  #L16299a.  v1:= temp @kind object;
  #L16299c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1629a2.  v1:= ", MDSessionKey=" @kind object;
  #L1629a6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1629ac.  v1:= v2.`e.c.b.a.e.f.b` @type ^`e.c.a.a.c` @kind object;
  #L1629b0.  call temp:= `getHexString`(v1) @signature `Le/c/a/a/c;.getHexString:()Ljava/lang/String;` @kind interface;
  #L1629b6.  v1:= temp @kind object;
  #L1629b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1629be.  v1:= ", ATC=" @kind object;
  #L1629c2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1629c8.  v1:= v2.`e.c.b.a.e.f.c` @type ^`e.c.a.a.c` @kind object;
  #L1629cc.  call temp:= `getHexString`(v1) @signature `Le/c/a/a/c;.getHexString:()Ljava/lang/String;` @kind interface;
  #L1629d2.  v1:= temp @kind object;
  #L1629d4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1629da.  v1:= ", IDN=" @kind object;
  #L1629de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1629e4.  v1:= v2.`e.c.b.a.e.f.d` @type ^`e.c.a.a.c` @kind object;
  #L1629e8.  call temp:= `getHexString`(v1) @signature `Le/c/a/a/c;.getHexString:()Ljava/lang/String;` @kind interface;
  #L1629ee.  v1:= temp @kind object;
  #L1629f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1629f6.  v1:= 125I;
  #L1629fa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L162a00.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L162a06.  v0:= temp @kind object;
  #L162a08.  return v0 @kind object;
}
procedure `void` `wipe`(`e.c.b.a.e.f` v1 @kind this) @signature `Le/c/b/a/e/f;.wipe:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L162ae8.  v0:= v1.`e.c.b.a.e.f.a` @type ^`e.c.a.a.c` @kind object;
  #L162aec.  call `clearByteArray`(v0) @signature `Le/c/a/d/b;.clearByteArray:(Le/c/a/a/c;)V` @kind static;
  #L162af2.  v0:= v1.`e.c.b.a.e.f.b` @type ^`e.c.a.a.c` @kind object;
  #L162af6.  call `clearByteArray`(v0) @signature `Le/c/a/d/b;.clearByteArray:(Le/c/a/a/c;)V` @kind static;
  #L162afc.  v0:= v1.`e.c.b.a.e.f.c` @type ^`e.c.a.a.c` @kind object;
  #L162b00.  call `clearByteArray`(v0) @signature `Le/c/a/d/b;.clearByteArray:(Le/c/a/a/c;)V` @kind static;
  #L162b06.  v0:= v1.`e.c.b.a.e.f.d` @type ^`e.c.a.a.c` @kind object;
  #L162b0a.  call `clearByteArray`(v0) @signature `Le/c/a/d/b;.clearByteArray:(Le/c/a/a/c;)V` @kind static;
  #L162b10.  return @kind void;
}
