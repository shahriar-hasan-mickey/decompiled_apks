record `e.c.a.a.b` @kind class @AccessFlag PUBLIC extends `e.c.a.a.d` @kind class {
}
procedure `void` `<init>`(`e.c.a.a.b` v0 @kind this) @signature `Le/c/a/a/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15c4f4.  call `<init>`(v0) @signature `Le/c/a/a/d;.<init>:()V` @kind direct;
  #L15c4fa.  return @kind void;
}
procedure `e.c.a.a.c` `fromHexString`(`e.c.a.a.b` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Le/c/a/a/b;.fromHexString:(Ljava/lang/String;)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c3a8.  v0:= new `e.c.a.a.a`;
  #L15c3ac.  call `<init>`(v0, v2) @signature `Le/c/a/a/a;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15c3b2.  return v0 @kind object;
}
procedure `e.c.a.a.c` `getByteArray`(`e.c.a.a.b` v1 @kind this, `int` v2 ) @signature `Le/c/a/a/b;.getByteArray:(I)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c3e0.  v0:= new `e.c.a.a.a`;
  #L15c3e4.  call `<init>`(v0, v2) @signature `Le/c/a/a/a;.<init>:(I)V` @kind direct;
  #L15c3ea.  return v0 @kind object;
}
procedure `e.c.a.a.c` `getByteArray`(`e.c.a.a.b` v1 @kind this, `byte`[] v2 @kind object, `int` v3 ) @signature `Le/c/a/a/b;.getByteArray:([BI)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c3c4.  v0:= new `e.c.a.a.a`;
  #L15c3c8.  call `<init>`(v0, v2, v3) @signature `Le/c/a/a/a;.<init>:([BI)V` @kind direct;
  #L15c3ce.  return v0 @kind object;
}
procedure `e.c.a.a.c` `getFromByteArray`(`e.c.a.a.b` v1 @kind this, `e.c.a.a.c` v2 @kind object) @signature `Le/c/a/a/b;.getFromByteArray:(Le/c/a/a/c;)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c3fc.  v0:= new `e.c.a.a.a`;
  #L15c400.  call temp:= `getBytes`(v2) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15c406.  v2:= temp @kind object;
  #L15c408.  call `<init>`(v0, v2) @signature `Le/c/a/a/a;.<init>:([B)V` @kind direct;
  #L15c40e.  return v0 @kind object;
}
procedure `e.c.a.a.c` `getFromWord`(`e.c.a.a.b` v3 @kind this, `int` v4 ) @signature `Le/c/a/a/b;.getFromWord:(I)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15c420.  v0:= new `e.c.a.a.a`;
  #L15c424.  v1:= 2I;
  #L15c426.  call temp:= `allocate`(v1) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L15c42c.  v2:= temp @kind object;
  #L15c42e.  v4:= (`short`) v4 @kind i2s;
  #L15c430.  call temp:= `putShort`(v2, v4) @signature `Ljava/nio/ByteBuffer;.putShort:(S)Ljava/nio/ByteBuffer;` @kind virtual;
  #L15c436.  v4:= temp @kind object;
  #L15c438.  call temp:= `array`(v4) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L15c43e.  v4:= temp @kind object;
  #L15c440.  call `<init>`(v0, v4, v1) @signature `Le/c/a/a/a;.<init>:([BI)V` @kind direct;
  #L15c446.  return v0 @kind object;
}
procedure `java.lang.String` `integerToHex`(`e.c.a.a.b` v2 @kind this, `int` v3 ) @signature `Le/c/a/a/b;.integerToHex:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15c458.  call temp:= `toHexString`(v3) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L15c45e.  v3:= temp @kind object;
  #L15c460.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15c466.  v0:= temp;
  #L15c468.  v0:= v0 %% 2;
  #L15c46c.  if v0 == 0 then goto L15c488;
  #L15c470.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15c476.  v0:= temp;
  #L15c478.  v0:= v0 + 1;
  #L15c47c.  v1:= 48I;
  #L15c480.  call temp:= `padleft`(v2, v3, v0, v1) @signature `Le/c/a/a/b;.padleft:(Ljava/lang/String;IC)Ljava/lang/String;` @kind virtual;
  #L15c486.  v3:= temp @kind object;
  #L15c488.  call temp:= `toUpperCase`(v3) @signature `Ljava/lang/String;.toUpperCase:()Ljava/lang/String;` @kind virtual;
  #L15c48e.  v3:= temp @kind object;
  #L15c490.  return v3 @kind object;
}
procedure `java.lang.String` `padleft`(`e.c.a.a.b` v2 @kind this, `java.lang.String` v3 @kind object, `int` v4 , `char` v5 ) @signature `Le/c/a/a/b;.padleft:(Ljava/lang/String;IC)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15c4a4.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L15c4aa.  v3:= temp @kind object;
  #L15c4ac.  v0:= new `java.lang.StringBuilder`;
  #L15c4b0.  call `<init>`(v0, v4) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L15c4b6.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15c4bc.  v1:= temp;
  #L15c4be.  v4:= v4 - v1 @kind int;
  #L15c4c0.  v1:= v4 + -1;
  #L15c4c4.  if v4 <= 0 then goto L15c4d2;
  #L15c4c8.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c4ce.  v4:= v1;
  #L15c4d0.  goto L15c4c0;
  #L15c4d2.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c4d8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15c4de.  v3:= temp @kind object;
  #L15c4e0.  return v3 @kind object;
}
