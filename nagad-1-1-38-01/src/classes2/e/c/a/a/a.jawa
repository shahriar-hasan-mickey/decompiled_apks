record `e.c.a.a.a` @kind class @AccessFlag PUBLIC extends `e.c.a.a.c` @kind interface {
  `byte`[] `e.c.a.a.a.a` @AccessFlag PRIVATE;
  `int` `e.c.a.a.a.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.c.a.a.a` v0 @kind this, `int` v1 ) @signature `Le/c/a/a/a;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15c7f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15c7f6.  v0.`e.c.a.a.a.b` @type ^`int` := v1;
  #L15c7fa.  v1:= new `byte`[v1];
  #L15c7fe.  v0.`e.c.a.a.a.a` @type ^`byte`[] := v1 @kind object;
  #L15c802.  return @kind void;
}
procedure `void` `<init>`(`e.c.a.a.a` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Le/c/a/a/a;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15c814.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15c81a.  v0:= 0I;
  #L15c81c.  if v5 != 0 then goto L15c826;
  #L15c820.  v4.`e.c.a.a.a.b` @type ^`int` := v0;
  #L15c824.  return @kind void;
  #L15c826.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15c82c.  v1:= temp;
  #L15c82e.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15c834.  v2:= temp;
  #L15c836.  v2:= v2 %% 2;
  #L15c83a.  if v2 != 0 then goto L15c888;
  #L15c83e.  v1:= v1 / 2;
  #L15c842.  v4.`e.c.a.a.a.b` @type ^`int` := v1;
  #L15c846.  v1:= v4.`e.c.a.a.a.b` @type ^`int`;
  #L15c84a.  v1:= new `byte`[v1];
  #L15c84e.  v4.`e.c.a.a.a.a` @type ^`byte`[] := v1 @kind object;
  #L15c852.  v1:= v4.`e.c.a.a.a.b` @type ^`int`;
  #L15c856.  if v0 >= v1 then goto L15c886;
  #L15c85a.  v1:= v0 * 2;
  #L15c85e.  v2:= v1 + 2;
  #L15c862.  call temp:= `substring`(v5, v1, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L15c868.  v1:= temp @kind object;
  #L15c86a.  v2:= v4.`e.c.a.a.a.a` @type ^`byte`[] @kind object;
  #L15c86e.  v3:= 16I;
  #L15c872.  call temp:= `parseInt`(v1, v3) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;I)I` @kind static;
  #L15c878.  v1:= temp;
  #L15c87a.  v1:= (`byte`) v1 @kind i2b;
  #L15c87c.  v2[v0]:= v1 @kind byte;
  #L15c880.  v0:= v0 + 1;
  #L15c884.  goto L15c852;
  #L15c886.  return @kind void;
  #L15c888.  v5:= new `java.lang.IllegalArgumentException`;
  #L15c88c.  v0:= "Number of characters should be even for a hexadecimal buffer" @kind object;
  #L15c890.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15c896.  throw v5;
}
procedure `void` `<init>`(`e.c.a.a.a` v3 @kind this, `byte`[] v4 @kind object) @signature `Le/c/a/a/a;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L15c788.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15c78e.  v0:= length @variable v4;
  #L15c790.  v3.`e.c.a.a.a.b` @type ^`int` := v0;
  #L15c794.  v0:= v3.`e.c.a.a.a.b` @type ^`int`;
  #L15c798.  v1:= new `byte`[v0];
  #L15c79c.  v3.`e.c.a.a.a.a` @type ^`byte`[] := v1 @kind object;
  #L15c7a0.  v1:= v3.`e.c.a.a.a.a` @type ^`byte`[] @kind object;
  #L15c7a4.  v2:= 0I;
  #L15c7a6.  call `arraycopy`(v4, v2, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15c7ac.  return @kind void;
}
procedure `void` `<init>`(`e.c.a.a.a` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Le/c/a/a/a;.<init>:([BI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L15c7c0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15c7c6.  v2.`e.c.a.a.a.b` @type ^`int` := v4;
  #L15c7ca.  v0:= new `byte`[v4];
  #L15c7ce.  v2.`e.c.a.a.a.a` @type ^`byte`[] := v0 @kind object;
  #L15c7d2.  v0:= v2.`e.c.a.a.a.a` @type ^`byte`[] @kind object;
  #L15c7d6.  v1:= 0I;
  #L15c7d8.  call `arraycopy`(v3, v1, v0, v1, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15c7de.  return @kind void;
}
procedure `e.c.a.a.c` `append`(`e.c.a.a.a` v4 @kind this, `e.c.a.a.c` v5 @kind object) @signature `Le/c/a/a/a;.append:(Le/c/a/a/c;)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15c568.  v0:= v4.`e.c.a.a.a.b` @type ^`int`;
  #L15c56c.  call temp:= `getBytes`(v5) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15c572.  v1:= temp @kind object;
  #L15c574.  if v1 != 0 then goto L15c57a;
  #L15c578.  return v4 @kind object;
  #L15c57a.  v1:= v4.`e.c.a.a.a.b` @type ^`int`;
  #L15c57e.  call temp:= `getLength`(v5) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15c584.  v2:= temp;
  #L15c586.  v1:= v1 + v2 @kind int;
  #L15c588.  call `resize`(v4, v1) @signature `Le/c/a/a/a;.resize:(I)V` @kind virtual;
  #L15c58e.  call temp:= `getBytes`(v5) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15c594.  v1:= temp @kind object;
  #L15c596.  v2:= 0I;
  #L15c598.  v3:= v4.`e.c.a.a.a.a` @type ^`byte`[] @kind object;
  #L15c59c.  call temp:= `getLength`(v5) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15c5a2.  v5:= temp;
  #L15c5a4.  call `arraycopy`(v1, v2, v3, v0, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15c5aa.  return v4 @kind object;
}
procedure `e.c.a.a.c` `appendByte`(`e.c.a.a.a` v2 @kind this, `byte` v3 ) @signature `Le/c/a/a/a;.appendByte:(B)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15c5bc.  v0:= v2.`e.c.a.a.a.b` @type ^`int`;
  #L15c5c0.  v1:= v0 + 1;
  #L15c5c4.  call `resize`(v2, v1) @signature `Le/c/a/a/a;.resize:(I)V` @kind virtual;
  #L15c5ca.  v1:= v2.`e.c.a.a.a.a` @type ^`byte`[] @kind object;
  #L15c5ce.  v1[v0]:= v3 @kind byte;
  #L15c5d2.  return v2 @kind object;
}
procedure `e.c.a.a.c` `bitWiseAnd`(`e.c.a.a.a` v5 @kind this, `e.c.a.a.c` v6 @kind object) @signature `Le/c/a/a/a;.bitWiseAnd:(Le/c/a/a/c;)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15c5e4.  if v6 != 0 then goto L15c5f2;
  #L15c5e8.  call temp:= `clone`(v5) @signature `Le/c/a/a/a;.clone:()Le/c/a/a/c;` @kind virtual;
  #L15c5ee.  v6:= temp @kind object;
  #L15c5f0.  return v6 @kind object;
  #L15c5f2.  call temp:= `getLength`(v5) @signature `Le/c/a/a/a;.getLength:()I` @kind virtual;
  #L15c5f8.  v0:= temp;
  #L15c5fa.  call temp:= `getLength`(v6) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15c600.  v1:= temp;
  #L15c602.  if v0 >= v1 then goto L15c610;
  #L15c606.  call temp:= `getLength`(v5) @signature `Le/c/a/a/a;.getLength:()I` @kind virtual;
  #L15c60c.  v0:= temp;
  #L15c60e.  goto L15c618;
  #L15c610.  call temp:= `getLength`(v6) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15c616.  v0:= temp;
  #L15c618.  v1:= new `e.c.a.a.a`;
  #L15c61c.  call temp:= `getLength`(v5) @signature `Le/c/a/a/a;.getLength:()I` @kind virtual;
  #L15c622.  v2:= temp;
  #L15c624.  call `<init>`(v1, v2) @signature `Le/c/a/a/a;.<init>:(I)V` @kind direct;
  #L15c62a.  v2:= 0I;
  #L15c62c.  if v2 >= v0 then goto L15c650;
  #L15c630.  v3:= v5.`e.c.a.a.a.a` @type ^`byte`[] @kind object;
  #L15c634.  v3:= v3[v2] @kind byte;
  #L15c638.  call temp:= `getByte`(v6, v2) @signature `Le/c/a/a/c;.getByte:(I)B` @kind interface;
  #L15c63e.  v4:= temp;
  #L15c640.  v3:= v3 ^& v4 @kind int;
  #L15c642.  v3:= (`byte`) v3 @kind i2b;
  #L15c644.  call `setByte`(v1, v2, v3) @signature `Le/c/a/a/c;.setByte:(IB)V` @kind interface;
  #L15c64a.  v2:= v2 + 1;
  #L15c64e.  goto L15c62c;
  #L15c650.  return v1 @kind object;
}
procedure `void` `clear`(`e.c.a.a.a` v1 @kind this) @signature `Le/c/a/a/a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c8a8.  v0:= 0I;
  #L15c8aa.  call temp:= `fill`(v1, v0) @signature `Le/c/a/a/a;.fill:(B)Le/c/a/a/c;` @kind virtual;
  #L15c8b0.  return @kind void;
}
procedure `e.c.a.a.c` `clone`(`e.c.a.a.a` v2 @kind this) @signature `Le/c/a/a/a;.clone:()Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15c664.  v0:= new `e.c.a.a.a`;
  #L15c668.  call temp:= `getBytes`(v2) @signature `Le/c/a/a/a;.getBytes:()[B` @kind virtual;
  #L15c66e.  v1:= temp @kind object;
  #L15c670.  call `<init>`(v0, v1) @signature `Le/c/a/a/a;.<init>:([B)V` @kind direct;
  #L15c676.  return v0 @kind object;
}
procedure `java.lang.Object` `clone`(`e.c.a.a.a` v1 @kind this) @signature `Le/c/a/a/a;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L15c6e8.  call temp:= `clone`(v1) @signature `Le/c/a/a/a;.clone:()Le/c/a/a/c;` @kind virtual;
  #L15c6ee.  v0:= temp @kind object;
  #L15c6f0.  return v0 @kind object;
}
procedure `void` `copyBytes`(`e.c.a.a.a` v2 @kind this, `e.c.a.a.c` v3 @kind object, `int` v4 , `int` v5 , `int` v6 ) @signature `Le/c/a/a/a;.copyBytes:(Le/c/a/a/c;III)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15c8c4.  v0:= v5 + v6 @kind int;
  #L15c8c8.  v1:= v2.`e.c.a.a.a.b` @type ^`int`;
  #L15c8cc.  if v0 <= v1 then goto L15c8da;
  #L15c8d0.  v0:= v0 - v1 @kind int;
  #L15c8d2.  v1:= v1 + v0 @kind int;
  #L15c8d4.  call `resize`(v2, v1) @signature `Le/c/a/a/a;.resize:(I)V` @kind virtual;
  #L15c8da.  call temp:= `getBytes`(v3) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15c8e0.  v3:= temp @kind object;
  #L15c8e2.  v0:= v2.`e.c.a.a.a.a` @type ^`byte`[] @kind object;
  #L15c8e6.  call `arraycopy`(v3, v4, v0, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15c8ec.  return @kind void;
}
procedure `e.c.a.a.c` `copyOfRange`(`e.c.a.a.a` v3 @kind this, `int` v4 , `int` v5 ) @signature `Le/c/a/a/a;.copyOfRange:(II)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15c688.  v0:= v5 - v4 @kind int;
  #L15c68c.  v1:= new `e.c.a.a.a`;
  #L15c690.  v2:= v3.`e.c.a.a.a.a` @type ^`byte`[] @kind object;
  #L15c694.  call temp:= `copyOfRange`(v2, v4, v5) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L15c69a.  v4:= temp @kind object;
  #L15c69c.  call `<init>`(v1, v4, v0) @signature `Le/c/a/a/a;.<init>:([BI)V` @kind direct;
  #L15c6a2.  return v1 @kind object;
}
procedure `e.c.a.a.c` `fill`(`e.c.a.a.a` v1 @kind this, `byte` v2 ) @signature `Le/c/a/a/a;.fill:(B)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c6b4.  v0:= v1.`e.c.a.a.a.a` @type ^`byte`[] @kind object;
  #L15c6b8.  call `fill`(v0, v2) @signature `Ljava/util/Arrays;.fill:([BB)V` @kind static;
  #L15c6be.  return v1 @kind object;
}
procedure `byte` `getByte`(`e.c.a.a.a` v1 @kind this, `int` v2 ) @signature `Le/c/a/a/a;.getByte:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c534.  v0:= v1.`e.c.a.a.a.a` @type ^`byte`[] @kind object;
  #L15c538.  v2:= v0[v2] @kind byte;
  #L15c53c.  return v2;
}
procedure `byte`[] `getBytes`(`e.c.a.a.a` v1 @kind this) @signature `Le/c/a/a/a;.getBytes:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c550.  v0:= v1.`e.c.a.a.a.a` @type ^`byte`[] @kind object;
  #L15c554.  return v0 @kind object;
}
procedure `java.lang.String` `getHexString`(`e.c.a.a.a` v1 @kind this) @signature `Le/c/a/a/a;.getHexString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c704.  call temp:= `toHexString`(v1) @signature `Le/c/a/a/a;.toHexString:()Ljava/lang/String;` @kind virtual;
  #L15c70a.  v0:= temp @kind object;
  #L15c70c.  return v0 @kind object;
}
procedure `int` `getLength`(`e.c.a.a.a` v1 @kind this) @signature `Le/c/a/a/a;.getLength:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c6d0.  v0:= v1.`e.c.a.a.a.b` @type ^`int`;
  #L15c6d4.  return v0;
}
procedure `boolean` `isEqual`(`e.c.a.a.a` v1 @kind this, `e.c.a.a.c` v2 @kind object) @signature `Le/c/a/a/a;.isEqual:(Le/c/a/a/c;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c50c.  v0:= v1.`e.c.a.a.a.a` @type ^`byte`[] @kind object;
  #L15c510.  call temp:= `getBytes`(v2) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15c516.  v2:= temp @kind object;
  #L15c518.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Arrays;.equals:([B[B)Z` @kind static;
  #L15c51e.  v2:= temp;
  #L15c520.  return v2;
}
procedure `void` `resize`(`e.c.a.a.a` v4 @kind this, `int` v5 ) @signature `Le/c/a/a/a;.resize:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15c900.  v0:= v4.`e.c.a.a.a.b` @type ^`int`;
  #L15c904.  if v5 <= v0 then goto L15c92a;
  #L15c908.  v1:= new `byte`[v5];
  #L15c90c.  v2:= v4.`e.c.a.a.a.a` @type ^`byte`[] @kind object;
  #L15c910.  if v2 == 0 then goto L15c926;
  #L15c914.  v3:= 0I;
  #L15c916.  call `arraycopy`(v2, v3, v1, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15c91c.  v0:= v4.`e.c.a.a.a.a` @type ^`byte`[] @kind object;
  #L15c920.  call `clearByteArray`(v0) @signature `Le/c/a/d/b;.clearByteArray:([B)V` @kind static;
  #L15c926.  v4.`e.c.a.a.a.a` @type ^`byte`[] := v1 @kind object;
  #L15c92a.  v4.`e.c.a.a.a.b` @type ^`int` := v5;
  #L15c92e.  return @kind void;
}
procedure `void` `setByte`(`e.c.a.a.a` v1 @kind this, `int` v2 , `byte` v3 ) @signature `Le/c/a/a/a;.setByte:(IB)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c940.  v0:= v1.`e.c.a.a.a.a` @type ^`byte`[] @kind object;
  #L15c944.  v0[v2]:= v3 @kind byte;
  #L15c948.  return @kind void;
}
procedure `java.lang.String` `toHexString`(`e.c.a.a.a` v5 @kind this) @signature `Le/c/a/a/a;.toHexString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15c720.  v0:= new `java.lang.StringBuffer`;
  #L15c724.  call `<init>`(v0) @signature `Ljava/lang/StringBuffer;.<init>:()V` @kind direct;
  #L15c72a.  v1:= 0I;
  #L15c72c.  v2:= v5.`e.c.a.a.a.b` @type ^`int`;
  #L15c730.  if v1 >= v2 then goto L15c76e;
  #L15c734.  v2:= v5.`e.c.a.a.a.a` @type ^`byte`[] @kind object;
  #L15c738.  v2:= v2[v1] @kind byte;
  #L15c73c.  v3:= "0123456789ABCDEF" @kind object;
  #L15c740.  v4:= v2 ^> 4;
  #L15c744.  v4:= v4 ^& 15;
  #L15c748.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L15c74e.  v4:= temp;
  #L15c750.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L15c756.  v2:= v2 ^& 15;
  #L15c75a.  call temp:= `charAt`(v3, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L15c760.  v2:= temp;
  #L15c762.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L15c768.  v1:= v1 + 1;
  #L15c76c.  goto L15c72c;
  #L15c76e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L15c774.  v0:= temp @kind object;
  #L15c776.  return v0 @kind object;
}
