record `e.c.a.a.e` @kind class @AccessFlag PUBLIC extends `e.c.a.a.c` @kind interface {
  `byte`[] `e.c.a.a.e.a` @AccessFlag PRIVATE;
  `int` `e.c.a.a.e.b` @AccessFlag PRIVATE;
}
global `java.lang.String` `@@e.c.a.a.e.c` @AccessFlag PRIVATE_STATIC;
procedure `void` `<init>`(`e.c.a.a.e` v0 @kind this) @signature `Le/c/a/a/e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15cc40.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15cc46.  return @kind void;
}
procedure `void` `<init>`(`e.c.a.a.e` v0 @kind this, `int` v1 ) @signature `Le/c/a/a/e;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15ccc0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15ccc6.  v0.`e.c.a.a.e.b` @type ^`int` := v1;
  #L15ccca.  v1:= new `byte`[v1];
  #L15ccce.  v0.`e.c.a.a.e.a` @type ^`byte`[] := v1 @kind object;
  #L15ccd2.  return @kind void;
}
procedure `void` `<init>`(`e.c.a.a.e` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Le/c/a/a/e;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15cce4.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15ccea.  v0:= 0I;
  #L15ccec.  if v5 != 0 then goto L15ccf6;
  #L15ccf0.  v4.`e.c.a.a.e.b` @type ^`int` := v0;
  #L15ccf4.  return @kind void;
  #L15ccf6.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15ccfc.  v1:= temp;
  #L15ccfe.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15cd04.  v2:= temp;
  #L15cd06.  v2:= v2 %% 2;
  #L15cd0a.  if v2 != 0 then goto L15cd58;
  #L15cd0e.  v1:= v1 / 2;
  #L15cd12.  v4.`e.c.a.a.e.b` @type ^`int` := v1;
  #L15cd16.  v1:= v4.`e.c.a.a.e.b` @type ^`int`;
  #L15cd1a.  v1:= new `byte`[v1];
  #L15cd1e.  v4.`e.c.a.a.e.a` @type ^`byte`[] := v1 @kind object;
  #L15cd22.  v1:= v4.`e.c.a.a.e.b` @type ^`int`;
  #L15cd26.  if v0 >= v1 then goto L15cd56;
  #L15cd2a.  v1:= v0 * 2;
  #L15cd2e.  v2:= v1 + 2;
  #L15cd32.  call temp:= `substring`(v5, v1, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L15cd38.  v1:= temp @kind object;
  #L15cd3a.  v2:= v4.`e.c.a.a.e.a` @type ^`byte`[] @kind object;
  #L15cd3e.  v3:= 16I;
  #L15cd42.  call temp:= `parseInt`(v1, v3) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;I)I` @kind static;
  #L15cd48.  v1:= temp;
  #L15cd4a.  v1:= (`byte`) v1 @kind i2b;
  #L15cd4c.  v2[v0]:= v1 @kind byte;
  #L15cd50.  v0:= v0 + 1;
  #L15cd54.  goto L15cd22;
  #L15cd56.  return @kind void;
  #L15cd58.  v5:= new `java.lang.IllegalArgumentException`;
  #L15cd5c.  v0:= "Number of characters should be even for a hexadecimal buffer" @kind object;
  #L15cd60.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15cd66.  throw v5;
}
procedure `void` `<init>`(`e.c.a.a.e` v3 @kind this, `byte`[] v4 @kind object) @signature `Le/c/a/a/e;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L15cc58.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15cc5e.  v0:= length @variable v4;
  #L15cc60.  v3.`e.c.a.a.e.b` @type ^`int` := v0;
  #L15cc64.  v0:= v3.`e.c.a.a.e.b` @type ^`int`;
  #L15cc68.  v1:= new `byte`[v0];
  #L15cc6c.  v3.`e.c.a.a.e.a` @type ^`byte`[] := v1 @kind object;
  #L15cc70.  v1:= v3.`e.c.a.a.e.a` @type ^`byte`[] @kind object;
  #L15cc74.  v2:= 0I;
  #L15cc76.  call `arraycopy`(v4, v2, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15cc7c.  return @kind void;
}
procedure `void` `<init>`(`e.c.a.a.e` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Le/c/a/a/e;.<init>:([BI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L15cc90.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15cc96.  v2.`e.c.a.a.e.b` @type ^`int` := v4;
  #L15cc9a.  v0:= new `byte`[v4];
  #L15cc9e.  v2.`e.c.a.a.e.a` @type ^`byte`[] := v0 @kind object;
  #L15cca2.  v0:= v2.`e.c.a.a.e.a` @type ^`byte`[] @kind object;
  #L15cca6.  v1:= 0I;
  #L15cca8.  call `arraycopy`(v3, v1, v0, v1, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15ccae.  return @kind void;
}
procedure `e.c.a.a.c` `append`(`e.c.a.a.e` v4 @kind this, `e.c.a.a.c` v5 @kind object) @signature `Le/c/a/a/e;.append:(Le/c/a/a/c;)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15ca00.  v0:= v4.`e.c.a.a.e.b` @type ^`int`;
  #L15ca04.  call temp:= `getBytes`(v5) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15ca0a.  v1:= temp @kind object;
  #L15ca0c.  if v1 != 0 then goto L15ca12;
  #L15ca10.  return v4 @kind object;
  #L15ca12.  v1:= v4.`e.c.a.a.e.b` @type ^`int`;
  #L15ca16.  call temp:= `getLength`(v5) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15ca1c.  v2:= temp;
  #L15ca1e.  v1:= v1 + v2 @kind int;
  #L15ca20.  call `resize`(v4, v1) @signature `Le/c/a/a/e;.resize:(I)V` @kind virtual;
  #L15ca26.  call temp:= `getBytes`(v5) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15ca2c.  v1:= temp @kind object;
  #L15ca2e.  v2:= 0I;
  #L15ca30.  v3:= v4.`e.c.a.a.e.a` @type ^`byte`[] @kind object;
  #L15ca34.  call temp:= `getLength`(v5) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15ca3a.  v5:= temp;
  #L15ca3c.  call `arraycopy`(v1, v2, v3, v0, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15ca42.  return v4 @kind object;
}
procedure `e.c.a.a.c` `appendByte`(`e.c.a.a.e` v2 @kind this, `byte` v3 ) @signature `Le/c/a/a/e;.appendByte:(B)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15ca54.  v0:= v2.`e.c.a.a.e.b` @type ^`int`;
  #L15ca58.  v1:= v0 + 1;
  #L15ca5c.  call `resize`(v2, v1) @signature `Le/c/a/a/e;.resize:(I)V` @kind virtual;
  #L15ca62.  v1:= v2.`e.c.a.a.e.a` @type ^`byte`[] @kind object;
  #L15ca66.  v1[v0]:= v3 @kind byte;
  #L15ca6a.  return v2 @kind object;
}
procedure `e.c.a.a.c` `bitWiseAnd`(`e.c.a.a.e` v5 @kind this, `e.c.a.a.c` v6 @kind object) @signature `Le/c/a/a/e;.bitWiseAnd:(Le/c/a/a/c;)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15ca7c.  if v6 != 0 then goto L15ca8a;
  #L15ca80.  call temp:= `clone`(v5) @signature `Le/c/a/a/e;.clone:()Le/c/a/a/c;` @kind virtual;
  #L15ca86.  v6:= temp @kind object;
  #L15ca88.  return v6 @kind object;
  #L15ca8a.  call temp:= `getLength`(v5) @signature `Le/c/a/a/e;.getLength:()I` @kind virtual;
  #L15ca90.  v0:= temp;
  #L15ca92.  call temp:= `getLength`(v6) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15ca98.  v1:= temp;
  #L15ca9a.  if v0 >= v1 then goto L15caa8;
  #L15ca9e.  call temp:= `getLength`(v5) @signature `Le/c/a/a/e;.getLength:()I` @kind virtual;
  #L15caa4.  v0:= temp;
  #L15caa6.  goto L15cab0;
  #L15caa8.  call temp:= `getLength`(v6) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15caae.  v0:= temp;
  #L15cab0.  v1:= new `e.c.a.a.e`;
  #L15cab4.  call temp:= `getLength`(v5) @signature `Le/c/a/a/e;.getLength:()I` @kind virtual;
  #L15caba.  v2:= temp;
  #L15cabc.  call `<init>`(v1, v2) @signature `Le/c/a/a/e;.<init>:(I)V` @kind direct;
  #L15cac2.  v2:= 0I;
  #L15cac4.  if v2 >= v0 then goto L15cae8;
  #L15cac8.  v3:= v5.`e.c.a.a.e.a` @type ^`byte`[] @kind object;
  #L15cacc.  v3:= v3[v2] @kind byte;
  #L15cad0.  call temp:= `getByte`(v6, v2) @signature `Le/c/a/a/c;.getByte:(I)B` @kind interface;
  #L15cad6.  v4:= temp;
  #L15cad8.  v3:= v3 ^& v4 @kind int;
  #L15cada.  v3:= (`byte`) v3 @kind i2b;
  #L15cadc.  call `setByte`(v1, v2, v3) @signature `Le/c/a/a/c;.setByte:(IB)V` @kind interface;
  #L15cae2.  v2:= v2 + 1;
  #L15cae6.  goto L15cac4;
  #L15cae8.  return v1 @kind object;
}
procedure `void` `clear`(`e.c.a.a.e` v1 @kind this) @signature `Le/c/a/a/e;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15cd78.  v0:= 0I;
  #L15cd7a.  call temp:= `fill`(v1, v0) @signature `Le/c/a/a/e;.fill:(B)Le/c/a/a/c;` @kind virtual;
  #L15cd80.  return @kind void;
}
procedure `e.c.a.a.c` `clone`(`e.c.a.a.e` v2 @kind this) @signature `Le/c/a/a/e;.clone:()Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15cafc.  v0:= new `e.c.a.a.e`;
  #L15cb00.  call temp:= `getBytes`(v2) @signature `Le/c/a/a/e;.getBytes:()[B` @kind virtual;
  #L15cb06.  v1:= temp @kind object;
  #L15cb08.  call `<init>`(v0, v1) @signature `Le/c/a/a/e;.<init>:([B)V` @kind direct;
  #L15cb0e.  return v0 @kind object;
}
procedure `java.lang.Object` `clone`(`e.c.a.a.e` v1 @kind this) @signature `Le/c/a/a/e;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L15cb80.  call temp:= `clone`(v1) @signature `Le/c/a/a/e;.clone:()Le/c/a/a/c;` @kind virtual;
  #L15cb86.  v0:= temp @kind object;
  #L15cb88.  return v0 @kind object;
}
procedure `void` `copyBytes`(`e.c.a.a.e` v2 @kind this, `e.c.a.a.c` v3 @kind object, `int` v4 , `int` v5 , `int` v6 ) @signature `Le/c/a/a/e;.copyBytes:(Le/c/a/a/c;III)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15cd94.  v0:= v5 + v6 @kind int;
  #L15cd98.  v1:= v2.`e.c.a.a.e.b` @type ^`int`;
  #L15cd9c.  if v0 <= v1 then goto L15cdaa;
  #L15cda0.  v0:= v0 - v1 @kind int;
  #L15cda2.  v1:= v1 + v0 @kind int;
  #L15cda4.  call `resize`(v2, v1) @signature `Le/c/a/a/e;.resize:(I)V` @kind virtual;
  #L15cdaa.  call temp:= `getBytes`(v3) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15cdb0.  v3:= temp @kind object;
  #L15cdb2.  v0:= v2.`e.c.a.a.e.a` @type ^`byte`[] @kind object;
  #L15cdb6.  call `arraycopy`(v3, v4, v0, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15cdbc.  return @kind void;
}
procedure `e.c.a.a.c` `copyOfRange`(`e.c.a.a.e` v3 @kind this, `int` v4 , `int` v5 ) @signature `Le/c/a/a/e;.copyOfRange:(II)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15cb20.  v0:= v5 - v4 @kind int;
  #L15cb24.  v1:= new `e.c.a.a.e`;
  #L15cb28.  v2:= v3.`e.c.a.a.e.a` @type ^`byte`[] @kind object;
  #L15cb2c.  call temp:= `copyOfRange`(v2, v4, v5) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L15cb32.  v4:= temp @kind object;
  #L15cb34.  call `<init>`(v1, v4, v0) @signature `Le/c/a/a/e;.<init>:([BI)V` @kind direct;
  #L15cb3a.  return v1 @kind object;
}
procedure `e.c.a.a.c` `fill`(`e.c.a.a.e` v1 @kind this, `byte` v2 ) @signature `Le/c/a/a/e;.fill:(B)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15cb4c.  v0:= v1.`e.c.a.a.e.a` @type ^`byte`[] @kind object;
  #L15cb50.  call `fill`(v0, v2) @signature `Ljava/util/Arrays;.fill:([BB)V` @kind static;
  #L15cb56.  return v1 @kind object;
}
procedure `byte` `getByte`(`e.c.a.a.e` v1 @kind this, `int` v2 ) @signature `Le/c/a/a/e;.getByte:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c9cc.  v0:= v1.`e.c.a.a.e.a` @type ^`byte`[] @kind object;
  #L15c9d0.  v2:= v0[v2] @kind byte;
  #L15c9d4.  return v2;
}
procedure `byte`[] `getBytes`(`e.c.a.a.e` v1 @kind this) @signature `Le/c/a/a/e;.getBytes:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c9e8.  v0:= v1.`e.c.a.a.e.a` @type ^`byte`[] @kind object;
  #L15c9ec.  return v0 @kind object;
}
procedure `java.lang.String` `getHexString`(`e.c.a.a.e` v1 @kind this) @signature `Le/c/a/a/e;.getHexString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15cb9c.  call temp:= `toHexString`(v1) @signature `Le/c/a/a/e;.toHexString:()Ljava/lang/String;` @kind virtual;
  #L15cba2.  v0:= temp @kind object;
  #L15cba4.  return v0 @kind object;
}
procedure `int` `getLength`(`e.c.a.a.e` v1 @kind this) @signature `Le/c/a/a/e;.getLength:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15cb68.  v0:= v1.`e.c.a.a.e.b` @type ^`int`;
  #L15cb6c.  return v0;
}
procedure `boolean` `isEqual`(`e.c.a.a.e` v1 @kind this, `e.c.a.a.c` v2 @kind object) @signature `Le/c/a/a/e;.isEqual:(Le/c/a/a/c;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c9a4.  v0:= v1.`e.c.a.a.e.a` @type ^`byte`[] @kind object;
  #L15c9a8.  call temp:= `getBytes`(v2) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15c9ae.  v2:= temp @kind object;
  #L15c9b0.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Arrays;.equals:([B[B)Z` @kind static;
  #L15c9b6.  v2:= temp;
  #L15c9b8.  return v2;
}
procedure `void` `resize`(`e.c.a.a.e` v4 @kind this, `int` v5 ) @signature `Le/c/a/a/e;.resize:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15cdd0.  v0:= v4.`e.c.a.a.e.b` @type ^`int`;
  #L15cdd4.  if v5 <= v0 then goto L15cdf0;
  #L15cdd8.  v1:= new `byte`[v5];
  #L15cddc.  v2:= v4.`e.c.a.a.e.a` @type ^`byte`[] @kind object;
  #L15cde0.  if v2 == 0 then goto L15cdec;
  #L15cde4.  v3:= 0I;
  #L15cde6.  call `arraycopy`(v2, v3, v1, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15cdec.  v4.`e.c.a.a.e.a` @type ^`byte`[] := v1 @kind object;
  #L15cdf0.  v4.`e.c.a.a.e.b` @type ^`int` := v5;
  #L15cdf4.  return @kind void;
}
procedure `void` `setByte`(`e.c.a.a.e` v1 @kind this, `int` v2 , `byte` v3 ) @signature `Le/c/a/a/e;.setByte:(IB)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ce08.  v0:= v1.`e.c.a.a.e.a` @type ^`byte`[] @kind object;
  #L15ce0c.  v0[v2]:= v3 @kind byte;
  #L15ce10.  return @kind void;
}
procedure `java.lang.String` `toHexString`(`e.c.a.a.e` v5 @kind this) @signature `Le/c/a/a/e;.toHexString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15cbb8.  v0:= new `java.lang.StringBuffer`;
  #L15cbbc.  call `<init>`(v0) @signature `Ljava/lang/StringBuffer;.<init>:()V` @kind direct;
  #L15cbc2.  v1:= 0I;
  #L15cbc4.  v2:= v5.`e.c.a.a.e.b` @type ^`int`;
  #L15cbc8.  if v1 >= v2 then goto L15cc0a;
  #L15cbcc.  v2:= v5.`e.c.a.a.e.a` @type ^`byte`[] @kind object;
  #L15cbd0.  v2:= v2[v1] @kind byte;
  #L15cbd4.  v3:= `@@e.c.a.a.e.c` @type ^`java.lang.String` @kind object;
  #L15cbd8.  v4:= v2 ^> 4;
  #L15cbdc.  v4:= v4 ^& 15;
  #L15cbe0.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L15cbe6.  v3:= temp;
  #L15cbe8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L15cbee.  v3:= `@@e.c.a.a.e.c` @type ^`java.lang.String` @kind object;
  #L15cbf2.  v2:= v2 ^& 15;
  #L15cbf6.  call temp:= `charAt`(v3, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L15cbfc.  v2:= temp;
  #L15cbfe.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L15cc04.  v1:= v1 + 1;
  #L15cc08.  goto L15cbc4;
  #L15cc0a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L15cc10.  v0:= temp @kind object;
  #L15cc12.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`e.c.a.a.e` v1 @kind this) @signature `Le/c/a/a/e;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15cc24.  call temp:= `getHexString`(v1) @signature `Le/c/a/a/e;.getHexString:()Ljava/lang/String;` @kind virtual;
  #L15cc2a.  v0:= temp @kind object;
  #L15cc2c.  return v0 @kind object;
}
