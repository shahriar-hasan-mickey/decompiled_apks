record `e.c.a.d.a` @kind class @AccessFlag PUBLIC {
}
procedure `e.c.a.a.c` `create`(`byte` v5 , `e.c.a.a.c` v6 @kind object) @signature `Le/c/a/d/a;.create:(BLe/c/a/a/c;)Le/c/a/a/c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15f91c.  call temp:= `lengthBytes`(v6) @signature `Le/c/a/d/a;.lengthBytes:(Le/c/a/a/c;)Le/c/a/a/c;` @kind static;
  #L15f922.  v0:= temp @kind object;
  #L15f924.  call temp:= `getLength`(v0) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15f92a.  v1:= temp;
  #L15f92c.  v2:= v1 + 1;
  #L15f930.  call temp:= `getLength`(v6) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15f936.  v3:= temp;
  #L15f938.  v3:= v3 + v2 @kind int;
  #L15f93a.  call temp:= `getInstance`() @signature `Le/c/a/a/d;.getInstance:()Le/c/a/a/d;` @kind static;
  #L15f940.  v4:= temp @kind object;
  #L15f942.  call temp:= `getByteArray`(v4, v3) @signature `Le/c/a/a/d;.getByteArray:(I)Le/c/a/a/c;` @kind virtual;
  #L15f948.  v3:= temp @kind object;
  #L15f94a.  v4:= 0I;
  #L15f94c.  call `setByte`(v3, v4, v5) @signature `Le/c/a/a/c;.setByte:(IB)V` @kind interface;
  #L15f952.  v5:= 1I;
  #L15f954.  call `copyBytes`(v3, v0, v4, v5, v1) @signature `Le/c/a/a/c;.copyBytes:(Le/c/a/a/c;III)V` @kind interface;
  #L15f95a.  call temp:= `getLength`(v6) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15f960.  v5:= temp;
  #L15f962.  call `copyBytes`(v3, v6, v4, v2, v5) @signature `Le/c/a/a/c;.copyBytes:(Le/c/a/a/c;III)V` @kind interface;
  #L15f968.  return v3 @kind object;
}
procedure `e.c.a.a.c` `create`(`e.c.a.a.c` v1 @kind object, `e.c.a.a.c` v2 @kind object) @signature `Le/c/a/d/a;.create:(Le/c/a/a/c;Le/c/a/a/c;)Le/c/a/a/c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15f97c.  call temp:= `getInstance`() @signature `Le/c/a/a/d;.getInstance:()Le/c/a/a/d;` @kind static;
  #L15f982.  v0:= temp @kind object;
  #L15f984.  call temp:= `getFromByteArray`(v0, v1) @signature `Le/c/a/a/d;.getFromByteArray:(Le/c/a/a/c;)Le/c/a/a/c;` @kind virtual;
  #L15f98a.  v1:= temp @kind object;
  #L15f98c.  call temp:= `lengthBytes`(v2) @signature `Le/c/a/d/a;.lengthBytes:(Le/c/a/a/c;)Le/c/a/a/c;` @kind static;
  #L15f992.  v0:= temp @kind object;
  #L15f994.  call temp:= `append`(v1, v0) @signature `Le/c/a/a/c;.append:(Le/c/a/a/c;)Le/c/a/a/c;` @kind interface;
  #L15f99a.  call temp:= `append`(v1, v2) @signature `Le/c/a/a/c;.append:(Le/c/a/a/c;)Le/c/a/a/c;` @kind interface;
  #L15f9a0.  return v1 @kind object;
}
procedure `e.c.a.a.c` `lengthBytes`(`e.c.a.a.c` v5 @kind object) @signature `Le/c/a/d/a;.lengthBytes:(Le/c/a/a/c;)Le/c/a/a/c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15f9b4.  call temp:= `getLength`(v5) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15f9ba.  v5:= temp;
  #L15f9bc.  v0:= 0I;
  #L15f9be.  v1:= 1I;
  #L15f9c0.  v2:= 127I;
  #L15f9c4.  if v5 > v2 then goto L15f9e2;
  #L15f9c8.  call temp:= `getInstance`() @signature `Le/c/a/a/d;.getInstance:()Le/c/a/a/d;` @kind static;
  #L15f9ce.  v2:= temp @kind object;
  #L15f9d0.  call temp:= `getByteArray`(v2, v1) @signature `Le/c/a/a/d;.getByteArray:(I)Le/c/a/a/c;` @kind virtual;
  #L15f9d6.  v1:= temp @kind object;
  #L15f9d8.  v5:= (`byte`) v5 @kind i2b;
  #L15f9da.  call `setByte`(v1, v0, v5) @signature `Le/c/a/a/c;.setByte:(IB)V` @kind interface;
  #L15f9e0.  return v1 @kind object;
  #L15f9e2.  v2:= 255I;
  #L15f9e6.  if v5 > v2 then goto L15fa10;
  #L15f9ea.  call temp:= `getInstance`() @signature `Le/c/a/a/d;.getInstance:()Le/c/a/a/d;` @kind static;
  #L15f9f0.  v2:= temp @kind object;
  #L15f9f2.  v3:= 2I;
  #L15f9f4.  call temp:= `getByteArray`(v2, v3) @signature `Le/c/a/a/d;.getByteArray:(I)Le/c/a/a/c;` @kind virtual;
  #L15f9fa.  v2:= temp @kind object;
  #L15f9fc.  v3:= -127I;
  #L15fa00.  call `setByte`(v2, v0, v3) @signature `Le/c/a/a/c;.setByte:(IB)V` @kind interface;
  #L15fa06.  v5:= (`byte`) v5 @kind i2b;
  #L15fa08.  call `setByte`(v2, v1, v5) @signature `Le/c/a/a/c;.setByte:(IB)V` @kind interface;
  #L15fa0e.  return v2 @kind object;
  #L15fa10.  v2:= 65535I;
  #L15fa16.  v3:= 4I;
  #L15fa18.  if v5 > v2 then goto L15fa42;
  #L15fa1c.  call temp:= `getInstance`() @signature `Le/c/a/a/d;.getInstance:()Le/c/a/a/d;` @kind static;
  #L15fa22.  v2:= temp @kind object;
  #L15fa24.  v4:= 3I;
  #L15fa26.  call temp:= `getByteArray`(v2, v4) @signature `Le/c/a/a/d;.getByteArray:(I)Le/c/a/a/c;` @kind virtual;
  #L15fa2c.  v2:= temp @kind object;
  #L15fa2e.  v4:= -126I;
  #L15fa32.  call `setByte`(v2, v0, v4) @signature `Le/c/a/a/c;.setByte:(IB)V` @kind interface;
  #L15fa38.  v4:= (`byte`) v5 @kind i2b;
  #L15fa3a.  call `setByte`(v2, v1, v4) @signature `Le/c/a/a/c;.setByte:(IB)V` @kind interface;
  #L15fa40.  goto L15fa70;
  #L15fa42.  v2:= 16777215I;
  #L15fa48.  if v5 > v2 then goto L15fa70;
  #L15fa4c.  call temp:= `getInstance`() @signature `Le/c/a/a/d;.getInstance:()Le/c/a/a/d;` @kind static;
  #L15fa52.  v2:= temp @kind object;
  #L15fa54.  call temp:= `getByteArray`(v2, v3) @signature `Le/c/a/a/d;.getByteArray:(I)Le/c/a/a/c;` @kind virtual;
  #L15fa5a.  v2:= temp @kind object;
  #L15fa5c.  v3:= -125I;
  #L15fa60.  call `setByte`(v2, v0, v3) @signature `Le/c/a/a/c;.setByte:(IB)V` @kind interface;
  #L15fa66.  v5:= (`byte`) v5 @kind i2b;
  #L15fa68.  call `setByte`(v2, v1, v5) @signature `Le/c/a/a/c;.setByte:(IB)V` @kind interface;
  #L15fa6e.  return v2 @kind object;
  #L15fa70.  call temp:= `getInstance`() @signature `Le/c/a/a/d;.getInstance:()Le/c/a/a/d;` @kind static;
  #L15fa76.  v2:= temp @kind object;
  #L15fa78.  call temp:= `getByteArray`(v2, v3) @signature `Le/c/a/a/d;.getByteArray:(I)Le/c/a/a/c;` @kind virtual;
  #L15fa7e.  v2:= temp @kind object;
  #L15fa80.  v3:= -124I;
  #L15fa84.  call `setByte`(v2, v0, v3) @signature `Le/c/a/a/c;.setByte:(IB)V` @kind interface;
  #L15fa8a.  v5:= (`byte`) v5 @kind i2b;
  #L15fa8c.  call `setByte`(v2, v1, v5) @signature `Le/c/a/a/c;.setByte:(IB)V` @kind interface;
  #L15fa92.  return v2 @kind object;
}
