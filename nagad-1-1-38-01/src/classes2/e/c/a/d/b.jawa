record `e.c.a.d.b` @kind class @AccessFlag PUBLIC {
}
procedure `void` `a`(`int` v2 , `java.lang.StringBuffer` v3 @kind object) @signature `Le/c/a/d/b;.a:(ILjava/lang/StringBuffer;)V` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L15ff1c.  v2:= v2 ^& 255;
  #L15ff20.  call temp:= `toHexString`(v2) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L15ff26.  v2:= temp @kind object;
  #L15ff28.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15ff2e.  v0:= temp;
  #L15ff30.  v1:= 2I;
  #L15ff32.  if v0 >= v1 then goto L15ff40;
  #L15ff36.  v0:= 48I;
  #L15ff3a.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L15ff40.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L15ff46.  return @kind void;
}
procedure `java.lang.String` `bcdAmountArrayToString`(`e.c.a.a.c` v2 @kind object) @signature `Le/c/a/d/b;.bcdAmountArrayToString:(Le/c/a/a/c;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L15fde0.  call temp:= `getBytes`(v2) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15fde6.  v0:= temp @kind object;
  #L15fde8.  call temp:= `getLength`(v2) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15fdee.  v2:= temp;
  #L15fdf0.  v1:= 0I;
  #L15fdf2.  call temp:= `bcdAmountArrayToString`(v0, v1, v2) @signature `Le/c/a/d/b;.bcdAmountArrayToString:([BII)Ljava/lang/String;` @kind static;
  #L15fdf8.  v2:= temp @kind object;
  #L15fdfa.  return v2 @kind object;
}
procedure `java.lang.String` `bcdAmountArrayToString`(`byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Le/c/a/d/b;.bcdAmountArrayToString:([BII)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L15fc90.  v0:= length @variable v8;
  #L15fc92.  if v9 >= v0 then goto L15fdc4;
  #L15fc96.  v10:= v10 + v9 @kind int;
  #L15fc98.  v0:= length @variable v8;
  #L15fc9a.  if v10 > v0 then goto L15fdc4;
  #L15fc9e.  v0:= 1I;
  #L15fca0.  v1:= "" @kind object;
  #L15fca4.  v0:= v1 @kind object;
  #L15fca6.  v2:= 1I;
  #L15fca8.  v3:= 0I;
  #L15fcaa.  if v9 >= v10 then goto L15fd84;
  #L15fcae.  v4:= v8[v9] @kind byte;
  #L15fcb2.  v4:= v4 ^>> 4;
  #L15fcb6.  v4:= v4 ^& 15;
  #L15fcba.  v4:= (`byte`) v4 @kind i2b;
  #L15fcbc.  v5:= v8[v9] @kind byte;
  #L15fcc0.  v5:= v5 ^& 15;
  #L15fcc4.  v5:= (`byte`) v5 @kind i2b;
  #L15fcc6.  v6:= 9I;
  #L15fcca.  if v4 > v6 then goto L15fd78;
  #L15fcce.  if v5 > v6 then goto L15fd78;
  #L15fcd2.  v6:= new `java.lang.Integer`;
  #L15fcd6.  call `<init>`(v6, v4) @signature `Ljava/lang/Integer;.<init>:(I)V` @kind direct;
  #L15fcdc.  v7:= new `java.lang.Integer`;
  #L15fce0.  call `<init>`(v7, v5) @signature `Ljava/lang/Integer;.<init>:(I)V` @kind direct;
  #L15fce6.  if v2 == 0 then goto L15fcee;
  #L15fcea.  if v4 == 0 then goto L15fd16;
  #L15fcee.  v2:= new `java.lang.StringBuilder`;
  #L15fcf2.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15fcf8.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15fcfe.  call temp:= `toString`(v6) @signature `Ljava/lang/Integer;.toString:()Ljava/lang/String;` @kind virtual;
  #L15fd04.  v0:= temp @kind object;
  #L15fd06.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15fd0c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15fd12.  v0:= temp @kind object;
  #L15fd14.  v2:= 0I;
  #L15fd16.  if v2 == 0 then goto L15fd1e;
  #L15fd1a.  if v5 == 0 then goto L15fd46;
  #L15fd1e.  v2:= new `java.lang.StringBuilder`;
  #L15fd22.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15fd28.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15fd2e.  call temp:= `toString`(v7) @signature `Ljava/lang/Integer;.toString:()Ljava/lang/String;` @kind virtual;
  #L15fd34.  v0:= temp @kind object;
  #L15fd36.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15fd3c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15fd42.  v0:= temp @kind object;
  #L15fd44.  v2:= 0I;
  #L15fd46.  v4:= v10 + -2;
  #L15fd4a.  if v9 != v4 then goto L15fd72;
  #L15fd4e.  v2:= new `java.lang.StringBuilder`;
  #L15fd52.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15fd58.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15fd5e.  v0:= "." @kind object;
  #L15fd62.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15fd68.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15fd6e.  v0:= temp @kind object;
  #L15fd70.  v2:= 0I;
  #L15fd72.  v9:= v9 + 1;
  #L15fd76.  goto L15fca8;
  #L15fd78.  v8:= new `java.lang.IllegalArgumentException`;
  #L15fd7c.  call `<init>`(v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L15fd82.  throw v8;
  #L15fd84.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L15fd8a.  v8:= temp;
  #L15fd8c.  if v8 != 0 then goto L15fda0;
  #L15fd90.  call temp:= `charAt`(v0, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L15fd96.  v8:= temp;
  #L15fd98.  v9:= 46I;
  #L15fd9c.  if v8 != v9 then goto L15fdc2;
  #L15fda0.  v8:= new `java.lang.StringBuilder`;
  #L15fda4.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15fdaa.  v9:= "0" @kind object;
  #L15fdae.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15fdb4.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15fdba.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15fdc0.  v0:= temp @kind object;
  #L15fdc2.  return v0 @kind object;
  #L15fdc4.  v8:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L15fdc8.  call `<init>`(v8) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L15fdce.  throw v8;
}
procedure `void` `clearByteArray`(`e.c.a.a.c` v0 @kind object) @signature `Le/c/a/d/b;.clearByteArray:(Le/c/a/a/c;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L15ff84.  if v0 == 0 then goto L15ff8e;
  #L15ff88.  call `clear`(v0) @signature `Le/c/a/a/c;.clear:()V` @kind interface;
  #L15ff8e.  return @kind void;
}
procedure `void` `clearByteArray`(`byte`[] v3 @kind object) @signature `Le/c/a/d/b;.clearByteArray:([B)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L15ff58.  if v3 != 0 then goto L15ff5e;
  #L15ff5c.  return @kind void;
  #L15ff5e.  v0:= length @variable v3;
  #L15ff60.  v1:= 0I;
  #L15ff62.  v2:= 0I;
  #L15ff64.  if v2 >= v0 then goto L15ff72;
  #L15ff68.  v3[v2]:= v1 @kind byte;
  #L15ff6c.  v2:= v2 + 1;
  #L15ff70.  goto L15ff64;
  #L15ff72.  return @kind void;
}
procedure `java.lang.String` `getAsHexString`(`byte`[] v1 @kind object) @signature `Le/c/a/d/b;.getAsHexString:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15fe0c.  v0:= 0I;
  #L15fe0e.  call temp:= `getAsHexString`(v1, v0) @signature `Le/c/a/d/b;.getAsHexString:([BZ)Ljava/lang/String;` @kind static;
  #L15fe14.  v1:= temp @kind object;
  #L15fe16.  return v1 @kind object;
}
procedure `java.lang.String` `getAsHexString`(`byte`[] v2 @kind object, `int` v3 , `int` v4 , `boolean` v5 ) @signature `Le/c/a/d/b;.getAsHexString:([BIIZ)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L15fe48.  v5:= new `java.lang.StringBuffer`;
  #L15fe4c.  call `<init>`(v5) @signature `Ljava/lang/StringBuffer;.<init>:()V` @kind direct;
  #L15fe52.  v0:= v3 + v4 @kind int;
  #L15fe56.  v1:= length @variable v2;
  #L15fe58.  if v0 <= v1 then goto L15fe60;
  #L15fe5c.  v4:= length @variable v2;
  #L15fe5e.  v4:= v4 - v3 @kind int;
  #L15fe60.  v0:= v3;
  #L15fe62.  v1:= v3 + v4 @kind int;
  #L15fe66.  if v0 >= v1 then goto L15fe7a;
  #L15fe6a.  v1:= v2[v0] @kind byte;
  #L15fe6e.  call `a`(v1, v5) @signature `Le/c/a/d/b;.a:(ILjava/lang/StringBuffer;)V` @kind static;
  #L15fe74.  v0:= v0 + 1;
  #L15fe78.  goto L15fe62;
  #L15fe7a.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L15fe80.  v2:= temp @kind object;
  #L15fe82.  call temp:= `toUpperCase`(v2) @signature `Ljava/lang/String;.toUpperCase:()Ljava/lang/String;` @kind virtual;
  #L15fe88.  v2:= temp @kind object;
  #L15fe8a.  return v2 @kind object;
}
procedure `java.lang.String` `getAsHexString`(`byte`[] v2 @kind object, `boolean` v3 ) @signature `Le/c/a/d/b;.getAsHexString:([BZ)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L15fe28.  v0:= length @variable v2;
  #L15fe2a.  v1:= 0I;
  #L15fe2c.  call temp:= `getAsHexString`(v2, v1, v0, v3) @signature `Le/c/a/d/b;.getAsHexString:([BIIZ)Ljava/lang/String;` @kind static;
  #L15fe32.  v2:= temp @kind object;
  #L15fe34.  return v2 @kind object;
}
procedure `boolean` `isZero`(`e.c.a.a.c` v4 @kind object) @signature `Le/c/a/d/b;.isZero:(Le/c/a/a/c;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15faa4.  v0:= 0I;
  #L15faa6.  if v4 != 0 then goto L15faac;
  #L15faaa.  return v0;
  #L15faac.  call temp:= `getLength`(v4) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15fab2.  v1:= temp;
  #L15fab4.  call temp:= `getBytes`(v4) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15faba.  v4:= temp @kind object;
  #L15fabc.  v2:= 0I;
  #L15fabe.  if v2 >= v1 then goto L15fad2;
  #L15fac2.  v3:= v4[v2] @kind byte;
  #L15fac6.  if v3 == 0 then goto L15facc;
  #L15faca.  return v0;
  #L15facc.  v2:= v2 + 1;
  #L15fad0.  goto L15fabe;
  #L15fad2.  v4:= 1I;
  #L15fad4.  return v4;
}
procedure `byte`[] `longToBCD`(`long` v12 , `int` v14 ) @signature `Le/c/a/d/b;.longToBCD:(JI)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L15fb40.  v0:= 0I;
  #L15fb42.  v3:= 0I;
  #L15fb44.  v1:= v12 @kind wide;
  #L15fb46.  v4:= 0L;
  #L15fb4a.  v6:= 10L;
  #L15fb4e.  v8:= lcmp(v1, v4);
  #L15fb52.  if v8 == 0 then goto L15fb5e;
  #L15fb56.  v3:= v3 + 1;
  #L15fb5a.  v1:= v1 / v6 @kind long;
  #L15fb5c.  goto L15fb46;
  #L15fb5e.  v1:= v3 %% 2;
  #L15fb62.  if v1 != 0 then goto L15fb6c;
  #L15fb66.  v2:= v3 / 2;
  #L15fb6a.  goto L15fb74;
  #L15fb6c.  v2:= v3 + 1;
  #L15fb70.  v2:= v2 / 2;
  #L15fb74.  v4:= 1I;
  #L15fb76.  if v1 == 0 then goto L15fb7e;
  #L15fb7a.  v1:= 1I;
  #L15fb7c.  goto L15fb80;
  #L15fb7e.  v1:= 0I;
  #L15fb80.  v5:= new `byte`[v2];
  #L15fb84.  v8:= v12 @kind wide;
  #L15fb86.  v12:= 0I;
  #L15fb88.  if v12 >= v3 then goto L15fbda;
  #L15fb8c.  v10:= v8 %% v6 @kind long;
  #L15fb90.  v13:= (`int`) v10 @kind l2i;
  #L15fb92.  v13:= (`byte`) v13 @kind i2b;
  #L15fb94.  v10:= v3 + -1;
  #L15fb98.  if v12 != v10 then goto L15fbaa;
  #L15fb9c.  if v1 == 0 then goto L15fbaa;
  #L15fba0.  v10:= v12 / 2;
  #L15fba4.  v5[v10]:= v13 @kind byte;
  #L15fba8.  goto L15fbd2;
  #L15fbaa.  v10:= v12 %% 2;
  #L15fbae.  if v10 != 0 then goto L15fbbc;
  #L15fbb2.  v10:= v12 / 2;
  #L15fbb6.  v5[v10]:= v13 @kind byte;
  #L15fbba.  goto L15fbd2;
  #L15fbbc.  v13:= v13 ^< 4;
  #L15fbc0.  v13:= (`byte`) v13 @kind i2b;
  #L15fbc2.  v10:= v12 / 2;
  #L15fbc6.  v11:= v5[v10] @kind byte;
  #L15fbca.  v13:= v13 ^| v11 @kind int;
  #L15fbcc.  v13:= (`byte`) v13 @kind i2b;
  #L15fbce.  v5[v10]:= v13 @kind byte;
  #L15fbd2.  v8:= v8 / v6 @kind long;
  #L15fbd4.  v12:= v12 + 1;
  #L15fbd8.  goto L15fb88;
  #L15fbda.  v12:= 0I;
  #L15fbdc.  v13:= v2 / 2;
  #L15fbe0.  if v12 >= v13 then goto L15fc00;
  #L15fbe4.  v13:= v5[v12] @kind byte;
  #L15fbe8.  v1:= v2 - v12 @kind int;
  #L15fbec.  v1:= v1 - v4 @kind int;
  #L15fbee.  v3:= v5[v1] @kind byte;
  #L15fbf2.  v5[v12]:= v3 @kind byte;
  #L15fbf6.  v5[v1]:= v13 @kind byte;
  #L15fbfa.  v12:= v12 + 1;
  #L15fbfe.  goto L15fbdc;
  #L15fc00.  if v14 != v2 then goto L15fc06;
  #L15fc04.  return v5 @kind object;
  #L15fc06.  v12:= new `byte`[v14];
  #L15fc0a.  v14:= v14 - v2 @kind int;
  #L15fc0c.  call `arraycopy`(v5, v0, v12, v14, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15fc12.  return v12 @kind object;
}
procedure `int` `readShort`(`e.c.a.a.c` v1 @kind object) @signature `Le/c/a/d/b;.readShort:(Le/c/a/a/c;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15fc6c.  call temp:= `getBytes`(v1) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15fc72.  v1:= temp @kind object;
  #L15fc74.  v0:= 0I;
  #L15fc76.  call temp:= `readShort`(v1, v0) @signature `Le/c/a/d/b;.readShort:([BI)S` @kind static;
  #L15fc7c.  v1:= temp;
  #L15fc7e.  return v1;
}
procedure `int` `readShort`(`byte`[] v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Le/c/a/d/b;.readShort:([BIZ)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L15fc24.  v0:= 65535I;
  #L15fc2a.  if v3 == 0 then goto L15fc48;
  #L15fc2e.  v3:= v2 + 1;
  #L15fc32.  v3:= v1[v3] @kind byte;
  #L15fc36.  v3:= v3 ^< 8;
  #L15fc3a.  v1:= v1[v2] @kind byte;
  #L15fc3e.  v1:= v1 ^& 255;
  #L15fc42.  v1:= v1 ^| v3 @kind int;
  #L15fc44.  v1:= v1 ^& v0 @kind int;
  #L15fc46.  return v1;
  #L15fc48.  v3:= v1[v2] @kind byte;
  #L15fc4c.  v3:= v3 ^< 8;
  #L15fc50.  v2:= v2 + 1;
  #L15fc54.  v1:= v1[v2] @kind byte;
  #L15fc58.  goto L15fc3e;
}
procedure `short` `readShort`(`byte`[] v1 @kind object, `int` v2 ) @signature `Le/c/a/d/b;.readShort:([BI)S` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L15fefc.  v0:= 0I;
  #L15fefe.  call temp:= `readShort`(v1, v2, v0) @signature `Le/c/a/d/b;.readShort:([BIZ)I` @kind static;
  #L15ff04.  v1:= temp;
  #L15ff06.  v1:= (`short`) v1 @kind i2s;
  #L15ff08.  return v1;
}
procedure `boolean` `superior`(`e.c.a.a.c` v5 @kind object, `e.c.a.a.c` v6 @kind object) @signature `Le/c/a/d/b;.superior:(Le/c/a/a/c;Le/c/a/a/c;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15fae8.  v0:= 0I;
  #L15faea.  if v6 == 0 then goto L15fb2e;
  #L15faee.  if v5 != 0 then goto L15faf4;
  #L15faf2.  goto L15fb2e;
  #L15faf4.  call temp:= `getLength`(v5) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15fafa.  v1:= temp;
  #L15fafc.  v2:= 1I;
  #L15fafe.  v1:= v1 - v2 @kind int;
  #L15fb00.  if v1 < 0 then goto L15fb2e;
  #L15fb04.  call temp:= `getByte`(v5, v1) @signature `Le/c/a/a/c;.getByte:(I)B` @kind interface;
  #L15fb0a.  v3:= temp;
  #L15fb0c.  v3:= v3 ^& 255;
  #L15fb10.  call temp:= `getByte`(v6, v1) @signature `Le/c/a/a/c;.getByte:(I)B` @kind interface;
  #L15fb16.  v4:= temp;
  #L15fb18.  v4:= v4 ^& 255;
  #L15fb1c.  if v3 == v4 then goto L15fb28;
  #L15fb20.  if v3 <= v4 then goto L15fb26;
  #L15fb24.  v0:= 1I;
  #L15fb26.  return v0;
  #L15fb28.  v1:= v1 + -1;
  #L15fb2c.  goto L15fb00;
  #L15fb2e.  return v0;
}
procedure `java.lang.String` `toHexString`(`byte`[] v5 @kind object, `int` v6 ) @signature `Le/c/a/d/b;.toHexString:([BI)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15fe9c.  v0:= new `java.lang.StringBuffer`;
  #L15fea0.  call `<init>`(v0) @signature `Ljava/lang/StringBuffer;.<init>:()V` @kind direct;
  #L15fea6.  v1:= 0I;
  #L15fea8.  if v1 >= v6 then goto L15fee2;
  #L15feac.  v2:= v5[v1] @kind byte;
  #L15feb0.  v3:= v2 ^> 4;
  #L15feb4.  v3:= v3 ^& 15;
  #L15feb8.  v4:= "0123456789ABCDEF" @kind object;
  #L15febc.  call temp:= `charAt`(v4, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L15fec2.  v3:= temp;
  #L15fec4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L15feca.  v2:= v2 ^& 15;
  #L15fece.  call temp:= `charAt`(v4, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L15fed4.  v2:= temp;
  #L15fed6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L15fedc.  v1:= v1 + 1;
  #L15fee0.  goto L15fea8;
  #L15fee2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L15fee8.  v5:= temp @kind object;
  #L15feea.  return v5 @kind object;
}
