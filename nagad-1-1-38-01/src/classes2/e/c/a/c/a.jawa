record `e.c.a.c.a` @kind class @AccessFlag PUBLIC {
  `javax.crypto.spec.IvParameterSpec` `e.c.a.c.a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e.c.a.c.a` v2 @kind this) @signature `Le/c/a/c/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L15f0fc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15f102.  v0:= new `javax.crypto.spec.IvParameterSpec`;
  #L15f106.  v1:= 8I;
  #L15f10a.  v1:= new `byte`[v1];
  #L15f10e.  call `<init>`(v0, v1) @signature `Ljavax/crypto/spec/IvParameterSpec;.<init>:([B)V` @kind direct;
  #L15f114.  v2.`e.c.a.c.a.a` @type ^`javax.crypto.spec.IvParameterSpec` := v0 @kind object;
  #L15f118.  return @kind void;
}
procedure `java.security.PrivateKey` `a`(`e.c.a.c.a` v2 @kind this, `byte`[] v3 @kind object) @signature `Le/c/a/c/a;.a:([B)Ljava/security/PrivateKey;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L15f0cc.  v0:= "RSA" @kind object;
  #L15f0d0.  call temp:= `getInstance`(v0) @signature `Ljava/security/KeyFactory;.getInstance:(Ljava/lang/String;)Ljava/security/KeyFactory;` @kind static;
  #L15f0d6.  v0:= temp @kind object;
  #L15f0d8.  v1:= new `java.security.spec.PKCS8EncodedKeySpec`;
  #L15f0dc.  call `<init>`(v1, v3) @signature `Ljava/security/spec/PKCS8EncodedKeySpec;.<init>:([B)V` @kind direct;
  #L15f0e2.  call temp:= `generatePrivate`(v0, v1) @signature `Ljava/security/KeyFactory;.generatePrivate:(Ljava/security/spec/KeySpec;)Ljava/security/PrivateKey;` @kind virtual;
  #L15f0e8.  v3:= temp @kind object;
  #L15f0ea.  return v3 @kind object;
}
procedure `byte`[] `b`(`e.c.a.c.a` v4 @kind this, `byte`[] v5 @kind object) @signature `Le/c/a/c/a;.b:([B)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15f098.  v0:= 24I;
  #L15f09c.  v0:= new `byte`[v0];
  #L15f0a0.  v1:= length @variable v5;
  #L15f0a2.  v2:= 0I;
  #L15f0a4.  call `arraycopy`(v5, v2, v0, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15f0aa.  v1:= length @variable v5;
  #L15f0ac.  v3:= length @variable v5;
  #L15f0ae.  v3:= v3 / 2;
  #L15f0b2.  call `arraycopy`(v5, v2, v0, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15f0b8.  return v0 @kind object;
}
procedure `byte`[] `decryptData`(`e.c.a.c.a` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Le/c/a/c/a;.decryptData:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15ee8c.  v0:= length @variable v5;
  #L15ee8e.  v1:= 16I;
  #L15ee92.  if v0 != v1 then goto L15ee9e;
  #L15ee96.  call temp:= `b`(v3, v5) @signature `Le/c/a/c/a;.b:([B)[B` @kind direct;
  #L15ee9c.  v5:= temp @kind object;
  #L15ee9e.  v0:= length @variable v5;
  #L15eea0.  v1:= 24I;
  #L15eea4.  if v0 == v1 then goto L15eeb6;
  #L15eea8.  v0:= new `com.mastercard.api.exception.CryptoOperationFailedException`;
  #L15eeac.  v1:= "Key length must be 24" @kind object;
  #L15eeb0.  call `<init>`(v0, v1) @signature `Lcom/mastercard/api/exception/CryptoOperationFailedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15eeb6.  v0:= new `javax.crypto.spec.DESedeKeySpec`;
  #L15eeba.  call `<init>`(v0, v5) @signature `Ljavax/crypto/spec/DESedeKeySpec;.<init>:([B)V` @kind direct;
  #L15eec0.  v5:= "DESede" @kind object;
  #L15eec4.  call temp:= `getInstance`(v5) @signature `Ljavax/crypto/SecretKeyFactory;.getInstance:(Ljava/lang/String;)Ljavax/crypto/SecretKeyFactory;` @kind static;
  #L15eeca.  v5:= temp @kind object;
  #L15eecc.  call temp:= `generateSecret`(v5, v0) @signature `Ljavax/crypto/SecretKeyFactory;.generateSecret:(Ljava/security/spec/KeySpec;)Ljavax/crypto/SecretKey;` @kind virtual;
  #L15eed2.  v5:= temp @kind object;
  #L15eed4.  v0:= "DESede/CBC/PKCS5Padding" @kind object;
  #L15eed8.  call temp:= `getInstance`(v0) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L15eede.  v0:= temp @kind object;
  #L15eee0.  v1:= 2I;
  #L15eee2.  v2:= v3.`e.c.a.c.a.a` @type ^`javax.crypto.spec.IvParameterSpec` @kind object;
  #L15eee6.  call `init`(v0, v1, v5, v2) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L15eeec.  call temp:= `doFinal`(v0, v4) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L15eef2.  v4:= temp @kind object;
  #L15eef4.  return v4 @kind object;
  #L15eef6.  v4:= Exception @type ^`java.security.spec.InvalidKeySpecException` @kind object;
  #L15eef8.  v5:= new `com.mastercard.api.exception.CryptoOperationFailedException`;
  #L15eefc.  v0:= "InvalidKeySpecException" @kind object;
  #L15ef00.  call `<init>`(v5, v0, v4) @signature `Lcom/mastercard/api/exception/CryptoOperationFailedException;.<init>:(Ljava/lang/String;Ljava/lang/Exception;)V` @kind direct;
  #L15ef06.  throw v5;
  #L15ef08.  v4:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L15ef0a.  v5:= new `com.mastercard.api.exception.CryptoOperationFailedException`;
  #L15ef0e.  v0:= "InvalidKeyException" @kind object;
  #L15ef12.  call `<init>`(v5, v0, v4) @signature `Lcom/mastercard/api/exception/CryptoOperationFailedException;.<init>:(Ljava/lang/String;Ljava/lang/Exception;)V` @kind direct;
  #L15ef18.  throw v5;
  #L15ef1a.  v4:= Exception @type ^`javax.crypto.BadPaddingException` @kind object;
  #L15ef1c.  v5:= new `com.mastercard.api.exception.CryptoOperationFailedException`;
  #L15ef20.  v0:= "BadPaddingException" @kind object;
  #L15ef24.  call `<init>`(v5, v0, v4) @signature `Lcom/mastercard/api/exception/CryptoOperationFailedException;.<init>:(Ljava/lang/String;Ljava/lang/Exception;)V` @kind direct;
  #L15ef2a.  throw v5;
  #L15ef2c.  v4:= Exception @type ^`javax.crypto.IllegalBlockSizeException` @kind object;
  #L15ef2e.  v5:= new `com.mastercard.api.exception.CryptoOperationFailedException`;
  #L15ef32.  v0:= "IllegalBlockSizeException" @kind object;
  #L15ef36.  call `<init>`(v5, v0, v4) @signature `Lcom/mastercard/api/exception/CryptoOperationFailedException;.<init>:(Ljava/lang/String;Ljava/lang/Exception;)V` @kind direct;
  #L15ef3c.  throw v5;
  #L15ef3e.  v4:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L15ef40.  v5:= new `com.mastercard.api.exception.CryptoOperationFailedException`;
  #L15ef44.  v0:= "NoSuchAlgorithmException" @kind object;
  #L15ef48.  call `<init>`(v5, v0, v4) @signature `Lcom/mastercard/api/exception/CryptoOperationFailedException;.<init>:(Ljava/lang/String;Ljava/lang/Exception;)V` @kind direct;
  #L15ef4e.  throw v5;
  #L15ef50.  v4:= Exception @type ^`java.security.InvalidAlgorithmParameterException` @kind object;
  #L15ef52.  v5:= new `com.mastercard.api.exception.CryptoOperationFailedException`;
  #L15ef56.  v0:= "InvalidAlgorithmParameterException" @kind object;
  #L15ef5a.  call `<init>`(v5, v0, v4) @signature `Lcom/mastercard/api/exception/CryptoOperationFailedException;.<init>:(Ljava/lang/String;Ljava/lang/Exception;)V` @kind direct;
  #L15ef60.  throw v5;
  #L15ef62.  v4:= Exception @type ^`javax.crypto.NoSuchPaddingException` @kind object;
  #L15ef64.  v5:= new `com.mastercard.api.exception.CryptoOperationFailedException`;
  #L15ef68.  v0:= "NoSuchPaddingException" @kind object;
  #L15ef6c.  call `<init>`(v5, v0, v4) @signature `Lcom/mastercard/api/exception/CryptoOperationFailedException;.<init>:(Ljava/lang/String;Ljava/lang/Exception;)V` @kind direct;
  #L15ef72.  throw v5;
  catch `javax.crypto.NoSuchPaddingException` @[L15eeb6..L15eef4] goto L15ef62;
  catch `java.security.InvalidAlgorithmParameterException` @[L15eeb6..L15eef4] goto L15ef50;
  catch `java.security.NoSuchAlgorithmException` @[L15eeb6..L15eef4] goto L15ef3e;
  catch `javax.crypto.IllegalBlockSizeException` @[L15eeb6..L15eef4] goto L15ef2c;
  catch `javax.crypto.BadPaddingException` @[L15eeb6..L15eef4] goto L15ef1a;
  catch `java.security.InvalidKeyException` @[L15eeb6..L15eef4] goto L15ef08;
  catch `java.security.spec.InvalidKeySpecException` @[L15eeb6..L15eef4] goto L15eef6;
}
procedure `byte`[] `decryptWithPrivateKey`(`e.c.a.c.a` v2 @kind this, `byte`[] v3 @kind object, `byte`[] v4 @kind object) @signature `Le/c/a/c/a;.decryptWithPrivateKey:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15efa4.  v0:= "RSA/ECB/PKCS1Padding" @kind object;
  #L15efa8.  call temp:= `getInstance`(v0) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L15efae.  v0:= temp @kind object;
  #L15efb0.  call temp:= `a`(v2, v4) @signature `Le/c/a/c/a;.a:([B)Ljava/security/PrivateKey;` @kind direct;
  #L15efb6.  v4:= temp @kind object;
  #L15efb8.  v1:= 2I;
  #L15efba.  call `init`(v0, v1, v4) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L15efc0.  call temp:= `doFinal`(v0, v3) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L15efc6.  v3:= temp @kind object;
  #L15efc8.  return v3 @kind object;
}
procedure `byte`[] `encryptData`(`e.c.a.c.a` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Le/c/a/c/a;.encryptData:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15efdc.  v0:= length @variable v5;
  #L15efde.  v1:= 16I;
  #L15efe2.  if v0 != v1 then goto L15efee;
  #L15efe6.  call temp:= `b`(v3, v5) @signature `Le/c/a/c/a;.b:([B)[B` @kind direct;
  #L15efec.  v5:= temp @kind object;
  #L15efee.  v0:= length @variable v5;
  #L15eff0.  v1:= 24I;
  #L15eff4.  if v0 != v1 then goto L15f046;
  #L15eff8.  v0:= new `javax.crypto.spec.DESedeKeySpec`;
  #L15effc.  call `<init>`(v0, v5) @signature `Ljavax/crypto/spec/DESedeKeySpec;.<init>:([B)V` @kind direct;
  #L15f002.  v5:= "DESede" @kind object;
  #L15f006.  call temp:= `getInstance`(v5) @signature `Ljavax/crypto/SecretKeyFactory;.getInstance:(Ljava/lang/String;)Ljavax/crypto/SecretKeyFactory;` @kind static;
  #L15f00c.  v5:= temp @kind object;
  #L15f00e.  call temp:= `generateSecret`(v5, v0) @signature `Ljavax/crypto/SecretKeyFactory;.generateSecret:(Ljava/security/spec/KeySpec;)Ljavax/crypto/SecretKey;` @kind virtual;
  #L15f014.  v5:= temp @kind object;
  #L15f016.  v0:= "DESede/CBC/PKCS5Padding" @kind object;
  #L15f01a.  call temp:= `getInstance`(v0) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L15f020.  v0:= temp @kind object;
  #L15f022.  v1:= new `javax.crypto.spec.IvParameterSpec`;
  #L15f026.  v2:= 8I;
  #L15f02a.  v2:= new `byte`[v2];
  #L15f02e.  call `<init>`(v1, v2) @signature `Ljavax/crypto/spec/IvParameterSpec;.<init>:([B)V` @kind direct;
  #L15f034.  v2:= 1I;
  #L15f036.  call `init`(v0, v2, v5, v1) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L15f03c.  call temp:= `doFinal`(v0, v4) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L15f042.  v4:= temp @kind object;
  #L15f044.  return v4 @kind object;
  #L15f046.  v4:= new `com.mastercard.api.exception.CryptoOperationFailedException`;
  #L15f04a.  v5:= "Invalid key length found." @kind object;
  #L15f04e.  call `<init>`(v4, v5) @signature `Lcom/mastercard/api/exception/CryptoOperationFailedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f054.  throw v4;
}
procedure `byte`[] `encryptWithCertificate`(`e.c.a.c.a` v2 @kind this, `byte`[] v3 @kind object, `java.security.cert.Certificate` v4 @kind object) @signature `Le/c/a/c/a;.encryptWithCertificate:([BLjava/security/cert/Certificate;)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15f068.  v0:= "RSA/ECB/PKCS1Padding" @kind object;
  #L15f06c.  call temp:= `getInstance`(v0) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L15f072.  v0:= temp @kind object;
  #L15f074.  v1:= 1I;
  #L15f076.  call `init`(v0, v1, v4) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/cert/Certificate;)V` @kind virtual;
  #L15f07c.  call temp:= `doFinal`(v0, v3) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L15f082.  v3:= temp @kind object;
  #L15f084.  return v3 @kind object;
}
