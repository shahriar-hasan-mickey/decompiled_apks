record `e.b.b.b.a` @kind class @AccessFlag PUBLIC {
}
procedure `byte` `a`(`char` v1 , `char` v2 ) @signature `Le/b/b/b/a;.a:(CC)B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L15c0d0.  v0:= 16I;
  #L15c0d4.  call temp:= `digit`(v1, v0) @signature `Ljava/lang/Character;.digit:(CI)I` @kind static;
  #L15c0da.  v1:= temp;
  #L15c0dc.  v1:= v1 ^< 4;
  #L15c0e0.  call temp:= `digit`(v2, v0) @signature `Ljava/lang/Character;.digit:(CI)I` @kind static;
  #L15c0e6.  v2:= temp;
  #L15c0e8.  v1:= v1 + v2 @kind int;
  #L15c0ea.  v1:= (`byte`) v1 @kind i2b;
  #L15c0ec.  return v1;
}
procedure `byte`[] `concat`(`byte`[][] v7 @kind object) @signature `Le/b/b/b/a;.concat:([[B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L15c100.  v0:= 0I;
  #L15c102.  v1:= 0I;
  #L15c104.  v2:= 0I;
  #L15c106.  v3:= length @variable v7;
  #L15c108.  if v1 >= v3 then goto L15c11a;
  #L15c10c.  v3:= v7[v1] @kind object;
  #L15c110.  v3:= length @variable v3;
  #L15c112.  v2:= v2 + v3 @kind int;
  #L15c114.  v1:= v1 + 1;
  #L15c118.  goto L15c106;
  #L15c11a.  v1:= new `byte`[v2];
  #L15c11e.  v2:= 0I;
  #L15c120.  v3:= 0I;
  #L15c122.  v4:= length @variable v7;
  #L15c124.  if v2 >= v4 then goto L15c156;
  #L15c128.  v4:= v3;
  #L15c12a.  v3:= 0I;
  #L15c12c.  v5:= v7[v2] @kind object;
  #L15c130.  v5:= length @variable v5;
  #L15c132.  if v3 >= v5 then goto L15c14e;
  #L15c136.  v5:= v4 + 1;
  #L15c13a.  v6:= v7[v2] @kind object;
  #L15c13e.  v6:= v6[v3] @kind byte;
  #L15c142.  v1[v4]:= v6 @kind byte;
  #L15c146.  v3:= v3 + 1;
  #L15c14a.  v4:= v5;
  #L15c14c.  goto L15c12c;
  #L15c14e.  v2:= v2 + 1;
  #L15c152.  v3:= v4;
  #L15c154.  goto L15c122;
  #L15c156.  return v1 @kind object;
}
procedure `void` `copyArray`(`byte`[] v3 @kind object, `int` v4 , `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Le/b/b/b/a;.copyArray:([BI[BII)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L15c334.  v0:= 0I;
  #L15c336.  if v0 >= v7 then goto L15c350;
  #L15c33a.  v1:= v6 + v0 @kind int;
  #L15c33e.  v2:= v4 + v0 @kind int;
  #L15c342.  v2:= v3[v2] @kind byte;
  #L15c346.  v5[v1]:= v2 @kind byte;
  #L15c34a.  v0:= v0 + 1;
  #L15c34e.  goto L15c336;
  #L15c350.  return @kind void;
}
procedure `short` `extractStatusCode`(`byte`[] v2 @kind object) @signature `Le/b/b/b/a;.extractStatusCode:([B)S` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L15c2f0.  if v2 == 0 then goto L15c31c;
  #L15c2f4.  v0:= length @variable v2;
  #L15c2f6.  v1:= 2I;
  #L15c2f8.  if v0 >= v1 then goto L15c2fe;
  #L15c2fc.  goto L15c31c;
  #L15c2fe.  v0:= 0I;
  #L15c300.  v0:= v2[v0] @kind byte;
  #L15c304.  v0:= v0 ^< 8;
  #L15c308.  v0:= v0 ^& 32512;
  #L15c30c.  v1:= 1I;
  #L15c30e.  v2:= v2[v1] @kind byte;
  #L15c312.  v2:= v2 ^& 255;
  #L15c316.  v2:= v2 ^| v0 @kind int;
  #L15c318.  v2:= (`short`) v2 @kind i2s;
  #L15c31a.  return v2;
  #L15c31c.  v2:= 32767I;
  #L15c320.  return v2;
}
procedure `void` `fillArray`(`byte`[] v2 @kind object, `byte` v3 ) @signature `Le/b/b/b/a;.fillArray:([BB)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L15c364.  v0:= length @variable v2;
  #L15c366.  v1:= 0I;
  #L15c368.  call `fillArray`(v2, v1, v0, v3) @signature `Le/b/b/b/a;.fillArray:([BIIB)V` @kind static;
  #L15c36e.  return @kind void;
}
procedure `void` `fillArray`(`byte`[] v2 @kind object, `int` v3 , `int` v4 , `byte` v5 ) @signature `Le/b/b/b/a;.fillArray:([BIIB)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L15c380.  v0:= 0I;
  #L15c382.  if v0 >= v4 then goto L15c394;
  #L15c386.  v1:= v3 + v0 @kind int;
  #L15c38a.  v2[v1]:= v5 @kind byte;
  #L15c38e.  v0:= v0 + 1;
  #L15c392.  goto L15c382;
  #L15c394.  return @kind void;
}
procedure `byte`[] `fromHex`(`java.lang.String` v5 @kind object) @signature `Le/b/b/b/a;.fromHex:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15c168.  if v5 != 0 then goto L15c170;
  #L15c16c.  v5:= 0I;
  #L15c16e.  return v5 @kind object;
  #L15c170.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15c176.  v0:= temp;
  #L15c178.  v0:= v0 / 2;
  #L15c17c.  v1:= new `byte`[v0];
  #L15c180.  v2:= 0I;
  #L15c182.  if v2 >= v0 then goto L15c1b0;
  #L15c186.  v3:= v2 * 2;
  #L15c18a.  call temp:= `charAt`(v5, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L15c190.  v4:= temp;
  #L15c192.  v3:= v3 + 1;
  #L15c196.  call temp:= `charAt`(v5, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L15c19c.  v3:= temp;
  #L15c19e.  call temp:= `a`(v4, v3) @signature `Le/b/b/b/a;.a:(CC)B` @kind static;
  #L15c1a4.  v3:= temp;
  #L15c1a6.  v1[v2]:= v3 @kind byte;
  #L15c1aa.  v2:= v2 + 1;
  #L15c1ae.  goto L15c182;
  #L15c1b0.  return v1 @kind object;
}
procedure `byte`[] `subArray`(`byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Le/b/b/b/a;.subArray:([BII)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L15c1c4.  v0:= new `byte`[v4];
  #L15c1c8.  v1:= 0I;
  #L15c1ca.  call `copyArray`(v2, v3, v0, v1, v4) @signature `Le/b/b/b/a;.copyArray:([BI[BII)V` @kind static;
  #L15c1d0.  return v0 @kind object;
}
procedure `java.lang.String` `toHex`(`byte`[] v7 @kind object) @signature `Le/b/b/b/a;.toHex:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L15c228.  v0:= new `java.lang.StringBuffer`;
  #L15c22c.  call `<init>`(v0) @signature `Ljava/lang/StringBuffer;.<init>:()V` @kind direct;
  #L15c232.  v1:= 0I;
  #L15c234.  v2:= 0I;
  #L15c236.  v3:= length @variable v7;
  #L15c238.  if v2 >= v3 then goto L15c290;
  #L15c23c.  v3:= v7[v2] @kind byte;
  #L15c240.  v3:= v3 ^>> 4;
  #L15c244.  v3:= v3 ^& 15;
  #L15c248.  v4:= 0I;
  #L15c24a.  if v3 < 0 then goto L15c264;
  #L15c24e.  v5:= 9I;
  #L15c252.  if v3 > v5 then goto L15c264;
  #L15c256.  v3:= v3 + 48;
  #L15c25a.  v3:= (`char`) v3 @kind i2c;
  #L15c25c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L15c262.  goto L15c274;
  #L15c264.  v3:= v3 + -10;
  #L15c268.  v3:= v3 + 65;
  #L15c26c.  v3:= (`char`) v3 @kind i2c;
  #L15c26e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L15c274.  v3:= v7[v2] @kind byte;
  #L15c278.  v3:= v3 ^& 15;
  #L15c27c.  v5:= v4 + 1;
  #L15c280.  v6:= 1I;
  #L15c282.  if v4 < v6 then goto L15c28c;
  #L15c286.  v2:= v2 + 1;
  #L15c28a.  goto L15c236;
  #L15c28c.  v4:= v5;
  #L15c28e.  goto L15c24a;
  #L15c290.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L15c296.  v7:= temp @kind object;
  #L15c298.  return v7 @kind object;
}
procedure `java.lang.String` `toStringFromUtf`(`byte`[] v2 @kind object) @signature `Le/b/b/b/a;.toStringFromUtf:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L15c2ac.  if v2 == 0 then goto L15c2c8;
  #L15c2b0.  v0:= new `java.lang.String`;
  #L15c2b4.  v1:= "UTF-8" @kind object;
  #L15c2b8.  call `<init>`(v0, v2, v1) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L15c2be.  return v0 @kind object;
  #L15c2c0.  v2:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L15c2c2.  call `printStackTrace`(v2) @signature `Ljava/io/UnsupportedEncodingException;.printStackTrace:()V` @kind virtual;
  #L15c2c8.  v2:= "" @kind object;
  #L15c2cc.  return v2 @kind object;
  catch `java.io.UnsupportedEncodingException` @[L15c2b0..L15c2be] goto L15c2c0;
}
procedure `byte`[] `toUtf8Bytes`(`java.lang.String` v1 @kind object) @signature `Le/b/b/b/a;.toUtf8Bytes:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15c1e4.  if v1 == 0 then goto L15c1fe;
  #L15c1e8.  v0:= "UTF-8" @kind object;
  #L15c1ec.  call temp:= `getBytes`(v1, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L15c1f2.  v1:= temp @kind object;
  #L15c1f4.  return v1 @kind object;
  #L15c1f6.  v1:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L15c1f8.  call `printStackTrace`(v1) @signature `Ljava/io/UnsupportedEncodingException;.printStackTrace:()V` @kind virtual;
  #L15c1fe.  v1:= 0I;
  #L15c200.  v1:= new `byte`[v1];
  #L15c204.  return v1 @kind object;
  catch `java.io.UnsupportedEncodingException` @[L15c1e8..L15c1f4] goto L15c1f6;
}
