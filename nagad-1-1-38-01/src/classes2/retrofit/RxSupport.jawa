record `retrofit.RxSupport` @kind class @AccessFlag FINAL {
  `retrofit.ErrorHandler` `retrofit.RxSupport.errorHandler` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.Executor` `retrofit.RxSupport.executor` @AccessFlag PRIVATE_FINAL;
  `retrofit.RequestInterceptor` `retrofit.RxSupport.requestInterceptor` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit.RxSupport` v0 @kind this, `java.util.concurrent.Executor` v1 @kind object, `retrofit.ErrorHandler` v2 @kind object, `retrofit.RequestInterceptor` v3 @kind object) @signature `Lretrofit/RxSupport;.<init>:(Ljava/util/concurrent/Executor;Lretrofit/ErrorHandler;Lretrofit/RequestInterceptor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L250080.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L250086.  v0.`retrofit.RxSupport.executor` @type ^`java.util.concurrent.Executor` := v1 @kind object;
  #L25008a.  v0.`retrofit.RxSupport.errorHandler` @type ^`retrofit.ErrorHandler` := v2 @kind object;
  #L25008e.  v0.`retrofit.RxSupport.requestInterceptor` @type ^`retrofit.RequestInterceptor` := v3 @kind object;
  #L250092.  return @kind void;
}
procedure `retrofit.RequestInterceptor` `access$000`(`retrofit.RxSupport` v0 @kind object) @signature `Lretrofit/RxSupport;.access$000:(Lretrofit/RxSupport;)Lretrofit/RequestInterceptor;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L250044.  v0:= v0.`retrofit.RxSupport.requestInterceptor` @type ^`retrofit.RequestInterceptor` @kind object;
  #L250048.  return v0 @kind object;
}
procedure `java.lang.Runnable` `access$100`(`retrofit.RxSupport` v0 @kind object, `rx.Subscriber` v1 @kind object, `retrofit.RxSupport$Invoker` v2 @kind object, `retrofit.RequestInterceptorTape` v3 @kind object) @signature `Lretrofit/RxSupport;.access$100:(Lretrofit/RxSupport;Lrx/Subscriber;Lretrofit/RxSupport$Invoker;Lretrofit/RequestInterceptorTape;)Ljava/lang/Runnable;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L24ffdc.  call temp:= `getRunnable`(v0, v1, v2, v3) @signature `Lretrofit/RxSupport;.getRunnable:(Lrx/Subscriber;Lretrofit/RxSupport$Invoker;Lretrofit/RequestInterceptorTape;)Ljava/lang/Runnable;` @kind direct;
  #L24ffe2.  v0:= temp @kind object;
  #L24ffe4.  return v0 @kind object;
}
procedure `java.util.concurrent.Executor` `access$200`(`retrofit.RxSupport` v0 @kind object) @signature `Lretrofit/RxSupport;.access$200:(Lretrofit/RxSupport;)Ljava/util/concurrent/Executor;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L250014.  v0:= v0.`retrofit.RxSupport.executor` @type ^`java.util.concurrent.Executor` @kind object;
  #L250018.  return v0 @kind object;
}
procedure `retrofit.ErrorHandler` `access$300`(`retrofit.RxSupport` v0 @kind object) @signature `Lretrofit/RxSupport;.access$300:(Lretrofit/RxSupport;)Lretrofit/ErrorHandler;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L25002c.  v0:= v0.`retrofit.RxSupport.errorHandler` @type ^`retrofit.ErrorHandler` @kind object;
  #L250030.  return v0 @kind object;
}
procedure `java.lang.Runnable` `getRunnable`(`retrofit.RxSupport` v1 @kind this, `rx.Subscriber` v2 @kind object, `retrofit.RxSupport$Invoker` v3 @kind object, `retrofit.RequestInterceptorTape` v4 @kind object) @signature `Lretrofit/RxSupport;.getRunnable:(Lrx/Subscriber;Lretrofit/RxSupport$Invoker;Lretrofit/RequestInterceptorTape;)Ljava/lang/Runnable;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L24fff8.  v0:= new `retrofit.RxSupport$2`;
  #L24fffc.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lretrofit/RxSupport$2;.<init>:(Lretrofit/RxSupport;Lrx/Subscriber;Lretrofit/RxSupport$Invoker;Lretrofit/RequestInterceptorTape;)V` @kind direct;
  #L250002.  return v0 @kind object;
}
procedure `rx.Observable` `createRequestObservable`(`retrofit.RxSupport` v1 @kind this, `retrofit.RxSupport$Invoker` v2 @kind object) @signature `Lretrofit/RxSupport;.createRequestObservable:(Lretrofit/RxSupport$Invoker;)Lrx/Observable;` @AccessFlag  {
    temp;
    v0;

  #L25005c.  v0:= new `retrofit.RxSupport$1`;
  #L250060.  call `<init>`(v0, v1, v2) @signature `Lretrofit/RxSupport$1;.<init>:(Lretrofit/RxSupport;Lretrofit/RxSupport$Invoker;)V` @kind direct;
  #L250066.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L25006c.  v2:= temp @kind object;
  #L25006e.  return v2 @kind object;
}
