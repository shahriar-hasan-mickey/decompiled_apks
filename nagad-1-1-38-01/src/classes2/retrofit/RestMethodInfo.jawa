record `retrofit.RestMethodInfo` @kind class @AccessFlag FINAL {
  `java.lang.String` `retrofit.RestMethodInfo.contentTypeHeader` @AccessFlag ;
  `java.util.List` `retrofit.RestMethodInfo.headers` @AccessFlag ;
  `boolean` `retrofit.RestMethodInfo.isObservable` @AccessFlag FINAL;
  `boolean` `retrofit.RestMethodInfo.isStreaming` @AccessFlag ;
  `boolean` `retrofit.RestMethodInfo.isSynchronous` @AccessFlag FINAL;
  `boolean` `retrofit.RestMethodInfo.loaded` @AccessFlag ;
  `java.lang.reflect.Method` `retrofit.RestMethodInfo.method` @AccessFlag FINAL;
  `boolean` `retrofit.RestMethodInfo.requestHasBody` @AccessFlag ;
  `java.lang.String` `retrofit.RestMethodInfo.requestMethod` @AccessFlag ;
  `java.lang.annotation.Annotation`[] `retrofit.RestMethodInfo.requestParamAnnotations` @AccessFlag ;
  `java.lang.String` `retrofit.RestMethodInfo.requestQuery` @AccessFlag ;
  `retrofit.RestMethodInfo$RequestType` `retrofit.RestMethodInfo.requestType` @AccessFlag ;
  `java.lang.String` `retrofit.RestMethodInfo.requestUrl` @AccessFlag ;
  `java.util.Set` `retrofit.RestMethodInfo.requestUrlParamNames` @AccessFlag ;
  `java.lang.reflect.Type` `retrofit.RestMethodInfo.responseObjectType` @AccessFlag ;
  `retrofit.RestMethodInfo$ResponseType` `retrofit.RestMethodInfo.responseType` @AccessFlag FINAL;
}
global `java.lang.String` `@@retrofit.RestMethodInfo.PARAM` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@retrofit.RestMethodInfo.PARAM_NAME_REGEX` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@retrofit.RestMethodInfo.PARAM_URL_REGEX` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit/RestMethodInfo;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L24f37c.  v0:= "[a-zA-Z][a-zA-Z0-9_-]*" @kind object;
  #L24f380.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L24f386.  v0:= temp @kind object;
  #L24f388.  `@@retrofit.RestMethodInfo.PARAM_NAME_REGEX` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L24f38c.  v0:= "\\{([a-zA-Z][a-zA-Z0-9_-]*)\\}" @kind object;
  #L24f390.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L24f396.  v0:= temp @kind object;
  #L24f398.  `@@retrofit.RestMethodInfo.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L24f39c.  return @kind void;
}
procedure `void` `<init>`(`retrofit.RestMethodInfo` v3 @kind this, `java.lang.reflect.Method` v4 @kind object) @signature `Lretrofit/RestMethodInfo;.<init>:(Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L24f3b0.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L24f3b6.  v0:= 0I;
  #L24f3b8.  v3.`retrofit.RestMethodInfo.loaded` @type ^`boolean` := v0 @kind boolean;
  #L24f3bc.  v1:= `@@retrofit.RestMethodInfo$RequestType.SIMPLE` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f3c0.  v3.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` := v1 @kind object;
  #L24f3c4.  v3.`retrofit.RestMethodInfo.method` @type ^`java.lang.reflect.Method` := v4 @kind object;
  #L24f3c8.  call temp:= `parseResponseType`(v3) @signature `Lretrofit/RestMethodInfo;.parseResponseType:()Lretrofit/RestMethodInfo$ResponseType;` @kind direct;
  #L24f3ce.  v4:= temp @kind object;
  #L24f3d0.  v3.`retrofit.RestMethodInfo.responseType` @type ^`retrofit.RestMethodInfo$ResponseType` := v4 @kind object;
  #L24f3d4.  v4:= v3.`retrofit.RestMethodInfo.responseType` @type ^`retrofit.RestMethodInfo$ResponseType` @kind object;
  #L24f3d8.  v1:= `@@retrofit.RestMethodInfo$ResponseType.OBJECT` @type ^`retrofit.RestMethodInfo$ResponseType` @kind object;
  #L24f3dc.  v2:= 1I;
  #L24f3de.  if v4 != v1 then goto L24f3e6;
  #L24f3e2.  v4:= 1I;
  #L24f3e4.  goto L24f3e8;
  #L24f3e6.  v4:= 0I;
  #L24f3e8.  v3.`retrofit.RestMethodInfo.isSynchronous` @type ^`boolean` := v4 @kind boolean;
  #L24f3ec.  v4:= v3.`retrofit.RestMethodInfo.responseType` @type ^`retrofit.RestMethodInfo$ResponseType` @kind object;
  #L24f3f0.  v1:= `@@retrofit.RestMethodInfo$ResponseType.OBSERVABLE` @type ^`retrofit.RestMethodInfo$ResponseType` @kind object;
  #L24f3f4.  if v4 != v1 then goto L24f3fa;
  #L24f3f8.  v0:= 1I;
  #L24f3fa.  v3.`retrofit.RestMethodInfo.isObservable` @type ^`boolean` := v0 @kind boolean;
  #L24f3fe.  return @kind void;
}
procedure `java.lang.reflect.Type` `getParameterUpperBound`(`java.lang.reflect.ParameterizedType` v4 @kind object) @signature `Lretrofit/RestMethodInfo;.getParameterUpperBound:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24f0e4.  call temp:= `getActualTypeArguments`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L24f0ea.  v4:= temp @kind object;
  #L24f0ec.  v0:= 0I;
  #L24f0ee.  v1:= 0I;
  #L24f0f0.  v2:= length @variable v4;
  #L24f0f2.  if v1 >= v2 then goto L24f11c;
  #L24f0f6.  v2:= v4[v1] @kind object;
  #L24f0fa.  v3:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L24f0fe.  if v3 == 0 then goto L24f116;
  #L24f102.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L24f106.  call temp:= `getUpperBounds`(v2) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L24f10c.  v2:= temp @kind object;
  #L24f10e.  v2:= v2[v0] @kind object;
  #L24f112.  v4[v1]:= v2 @kind object;
  #L24f116.  v1:= v1 + 1;
  #L24f11a.  goto L24f0f0;
  #L24f11c.  v4:= v4[v0] @kind object;
  #L24f120.  return v4 @kind object;
}
procedure `java.lang.RuntimeException` `methodError`(`retrofit.RestMethodInfo` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L24f010.  v0:= length @variable v4;
  #L24f012.  if v0 <= 0 then goto L24f01e;
  #L24f016.  call temp:= `format`(v3, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L24f01c.  v3:= temp @kind object;
  #L24f01e.  v4:= new `java.lang.IllegalArgumentException`;
  #L24f022.  v0:= new `java.lang.StringBuilder`;
  #L24f026.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24f02c.  v1:= v2.`retrofit.RestMethodInfo.method` @type ^`java.lang.reflect.Method` @kind object;
  #L24f030.  call temp:= `getDeclaringClass`(v1) @signature `Ljava/lang/reflect/Method;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L24f036.  v1:= temp @kind object;
  #L24f038.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L24f03e.  v1:= temp @kind object;
  #L24f040.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24f046.  v1:= "." @kind object;
  #L24f04a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24f050.  v1:= v2.`retrofit.RestMethodInfo.method` @type ^`java.lang.reflect.Method` @kind object;
  #L24f054.  call temp:= `getName`(v1) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L24f05a.  v1:= temp @kind object;
  #L24f05c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24f062.  v1:= ": " @kind object;
  #L24f066.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24f06c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24f072.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24f078.  v3:= temp @kind object;
  #L24f07a.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24f080.  return v4 @kind object;
}
procedure `java.lang.RuntimeException` `parameterError`(`retrofit.RestMethodInfo` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L24f094.  v0:= new `java.lang.StringBuilder`;
  #L24f098.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24f09e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24f0a4.  v3:= " (parameter #" @kind object;
  #L24f0a8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24f0ae.  v2:= v2 + 1;
  #L24f0b2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24f0b8.  v2:= ")" @kind object;
  #L24f0bc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24f0c2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24f0c8.  v2:= temp @kind object;
  #L24f0ca.  call temp:= `methodError`(v1, v2, v4) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f0d0.  v2:= temp @kind object;
  #L24f0d2.  return v2 @kind object;
}
procedure `void` `parseMethodAnnotations`(`retrofit.RestMethodInfo` v14 @kind this) @signature `Lretrofit/RestMethodInfo;.parseMethodAnnotations:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L24f460.  v0:= constclass @type ^`retrofit.client.Response` @kind object;
  #L24f464.  v1:= v14.`retrofit.RestMethodInfo.method` @type ^`java.lang.reflect.Method` @kind object;
  #L24f468.  call temp:= `getAnnotations`(v1) @signature `Ljava/lang/reflect/Method;.getAnnotations:()[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L24f46e.  v1:= temp @kind object;
  #L24f470.  v2:= length @variable v1;
  #L24f472.  v3:= 0I;
  #L24f474.  v4:= 0I;
  #L24f476.  if v4 >= v2 then goto L24f62e;
  #L24f47a.  v5:= v1[v4] @kind object;
  #L24f47e.  call temp:= `annotationType`(v5) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L24f484.  v6:= temp @kind object;
  #L24f486.  v7:= 0I;
  #L24f488.  call temp:= `getAnnotations`(v6) @signature `Ljava/lang/Class;.getAnnotations:()[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L24f48e.  v8:= temp @kind object;
  #L24f490.  v9:= length @variable v8;
  #L24f492.  v10:= 0I;
  #L24f494.  if v10 >= v9 then goto L24f4ba;
  #L24f498.  v11:= v8[v10] @kind object;
  #L24f49c.  v12:= constclass @type ^`retrofit.http.RestMethod` @kind object;
  #L24f4a0.  call temp:= `annotationType`(v11) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L24f4a6.  v13:= temp @kind object;
  #L24f4a8.  if v12 != v13 then goto L24f4b4;
  #L24f4ac.  v7:= v11 @kind object;
  #L24f4ae.  v7:= (`retrofit.http.RestMethod`) v7 @kind object;
  #L24f4b2.  goto L24f4ba;
  #L24f4b4.  v10:= v10 + 1;
  #L24f4b8.  goto L24f494;
  #L24f4ba.  v8:= 2I;
  #L24f4bc.  v9:= 1I;
  #L24f4be.  if v7 == 0 then goto L24f54c;
  #L24f4c2.  v10:= v14.`retrofit.RestMethodInfo.requestMethod` @type ^`java.lang.String` @kind object;
  #L24f4c6.  if v10 != 0 then goto L24f52a;
  #L24f4ca.  v8:= "value" @kind object;
  #L24f4ce.  v10:= new `java.lang.Class`[v3];
  #L24f4d2.  call temp:= `getMethod`(v6, v8, v10) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L24f4d8.  v8:= temp @kind object;
  #L24f4da.  v10:= new `java.lang.Object`[v3];
  #L24f4de.  call temp:= `invoke`(v8, v5, v10) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L24f4e4.  v5:= temp @kind object;
  #L24f4e6.  v5:= (`java.lang.String`) v5 @kind object;
  #L24f4ea.  call `parsePath`(v14, v5) @signature `Lretrofit/RestMethodInfo;.parsePath:(Ljava/lang/String;)V` @kind direct;
  #L24f4f0.  call temp:= `value`(v7) @signature `Lretrofit/http/RestMethod;.value:()Ljava/lang/String;` @kind interface;
  #L24f4f6.  v5:= temp @kind object;
  #L24f4f8.  v14.`retrofit.RestMethodInfo.requestMethod` @type ^`java.lang.String` := v5 @kind object;
  #L24f4fc.  call temp:= `hasBody`(v7) @signature `Lretrofit/http/RestMethod;.hasBody:()Z` @kind interface;
  #L24f502.  v5:= temp;
  #L24f504.  v14.`retrofit.RestMethodInfo.requestHasBody` @type ^`boolean` := v5 @kind boolean;
  #L24f508.  goto L24f626;
  #L24f50c.  v0:= new `java.lang.Object`[v9];
  #L24f510.  call temp:= `getSimpleName`(v6) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L24f516.  v1:= temp @kind object;
  #L24f518.  v0[v3]:= v1 @kind object;
  #L24f51c.  v1:= "Failed to extract String 'value' from @%s annotation." @kind object;
  #L24f520.  call temp:= `methodError`(v14, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f526.  v0:= temp @kind object;
  #L24f528.  throw v0;
  #L24f52a.  v0:= new `java.lang.Object`[v8];
  #L24f52e.  v0[v3]:= v10 @kind object;
  #L24f532.  call temp:= `value`(v7) @signature `Lretrofit/http/RestMethod;.value:()Ljava/lang/String;` @kind interface;
  #L24f538.  v1:= temp @kind object;
  #L24f53a.  v0[v9]:= v1 @kind object;
  #L24f53e.  v1:= "Only one HTTP method is allowed. Found: %s and %s." @kind object;
  #L24f542.  call temp:= `methodError`(v14, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f548.  v0:= temp @kind object;
  #L24f54a.  throw v0;
  #L24f54c.  v7:= constclass @type ^`retrofit.http.Headers` @kind object;
  #L24f550.  if v6 != v7 then goto L24f586;
  #L24f554.  v5:= (`retrofit.http.Headers`) v5 @kind object;
  #L24f558.  call temp:= `value`(v5) @signature `Lretrofit/http/Headers;.value:()[Ljava/lang/String;` @kind interface;
  #L24f55e.  v5:= temp @kind object;
  #L24f560.  v6:= length @variable v5;
  #L24f562.  if v6 == 0 then goto L24f574;
  #L24f566.  call temp:= `parseHeaders`(v14, v5) @signature `Lretrofit/RestMethodInfo;.parseHeaders:([Ljava/lang/String;)Ljava/util/List;` @kind virtual;
  #L24f56c.  v5:= temp @kind object;
  #L24f56e.  v14.`retrofit.RestMethodInfo.headers` @type ^`java.util.List` := v5 @kind object;
  #L24f572.  goto L24f626;
  #L24f574.  v0:= new `java.lang.Object`[v3];
  #L24f578.  v1:= "@Headers annotation is empty." @kind object;
  #L24f57c.  call temp:= `methodError`(v14, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f582.  v0:= temp @kind object;
  #L24f584.  throw v0;
  #L24f586.  v5:= constclass @type ^`retrofit.http.Multipart` @kind object;
  #L24f58a.  v7:= "Only one encoding annotation is allowed." @kind object;
  #L24f58e.  if v6 != v5 then goto L24f5b6;
  #L24f592.  v5:= v14.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f596.  v6:= `@@retrofit.RestMethodInfo$RequestType.SIMPLE` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f59a.  if v5 != v6 then goto L24f5a8;
  #L24f59e.  v5:= `@@retrofit.RestMethodInfo$RequestType.MULTIPART` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f5a2.  v14.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` := v5 @kind object;
  #L24f5a6.  goto L24f626;
  #L24f5a8.  v0:= new `java.lang.Object`[v3];
  #L24f5ac.  call temp:= `methodError`(v14, v7, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f5b2.  v0:= temp @kind object;
  #L24f5b4.  throw v0;
  #L24f5b6.  v5:= constclass @type ^`retrofit.http.FormUrlEncoded` @kind object;
  #L24f5ba.  if v6 != v5 then goto L24f5e2;
  #L24f5be.  v5:= v14.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f5c2.  v6:= `@@retrofit.RestMethodInfo$RequestType.SIMPLE` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f5c6.  if v5 != v6 then goto L24f5d4;
  #L24f5ca.  v5:= `@@retrofit.RestMethodInfo$RequestType.FORM_URL_ENCODED` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f5ce.  v14.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` := v5 @kind object;
  #L24f5d2.  goto L24f626;
  #L24f5d4.  v0:= new `java.lang.Object`[v3];
  #L24f5d8.  call temp:= `methodError`(v14, v7, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f5de.  v0:= temp @kind object;
  #L24f5e0.  throw v0;
  #L24f5e2.  v5:= constclass @type ^`retrofit.http.Streaming` @kind object;
  #L24f5e6.  if v6 != v5 then goto L24f626;
  #L24f5ea.  v5:= v14.`retrofit.RestMethodInfo.responseObjectType` @type ^`java.lang.reflect.Type` @kind object;
  #L24f5ee.  if v5 != v0 then goto L24f5f8;
  #L24f5f2.  v14.`retrofit.RestMethodInfo.isStreaming` @type ^`boolean` := v9 @kind boolean;
  #L24f5f6.  goto L24f626;
  #L24f5f8.  v1:= new `java.lang.Object`[v8];
  #L24f5fc.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L24f602.  v0:= temp @kind object;
  #L24f604.  v1[v3]:= v0 @kind object;
  #L24f608.  v0:= constclass @type ^`retrofit.http.Streaming` @kind object;
  #L24f60c.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L24f612.  v0:= temp @kind object;
  #L24f614.  v1[v9]:= v0 @kind object;
  #L24f618.  v0:= "Only methods having %s as data type are allowed to have @%s annotation." @kind object;
  #L24f61c.  call temp:= `methodError`(v14, v0, v1) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f622.  v0:= temp @kind object;
  #L24f624.  throw v0;
  #L24f626.  v4:= v4 + 1;
  #L24f62a.  goto L24f476;
  #L24f62e.  v0:= v14.`retrofit.RestMethodInfo.requestMethod` @type ^`java.lang.String` @kind object;
  #L24f632.  if v0 == 0 then goto L24f67a;
  #L24f636.  v0:= v14.`retrofit.RestMethodInfo.requestHasBody` @type ^`boolean` @kind boolean;
  #L24f63a.  if v0 != 0 then goto L24f678;
  #L24f63e.  v0:= v14.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f642.  v1:= `@@retrofit.RestMethodInfo$RequestType.MULTIPART` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f646.  if v0 == v1 then goto L24f666;
  #L24f64a.  v1:= `@@retrofit.RestMethodInfo$RequestType.FORM_URL_ENCODED` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f64e.  if v0 == v1 then goto L24f654;
  #L24f652.  goto L24f678;
  #L24f654.  v0:= new `java.lang.Object`[v3];
  #L24f658.  v1:= "FormUrlEncoded can only be specified on HTTP methods with request body (e.g., @POST)." @kind object;
  #L24f65c.  call temp:= `methodError`(v14, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f662.  v0:= temp @kind object;
  #L24f664.  throw v0;
  #L24f666.  v0:= new `java.lang.Object`[v3];
  #L24f66a.  v1:= "Multipart can only be specified on HTTP methods with request body (e.g., @POST)." @kind object;
  #L24f66e.  call temp:= `methodError`(v14, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f674.  v0:= temp @kind object;
  #L24f676.  throw v0;
  #L24f678.  return @kind void;
  #L24f67a.  v0:= new `java.lang.Object`[v3];
  #L24f67e.  v1:= "HTTP method annotation is required (e.g., @GET, @POST, etc.)." @kind object;
  #L24f682.  call temp:= `methodError`(v14, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f688.  v0:= temp @kind object;
  #L24f68a.  throw v0;
  catch `java.lang.Exception` @[L24f4ca..L24f4ea] goto L24f50c;
}
procedure `void` `parseParameters`(`retrofit.RestMethodInfo` v18 @kind this) @signature `Lretrofit/RestMethodInfo;.parseParameters:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L24f6ac.  v0:= v18 @kind object;
  #L24f6b0.  v1:= v0.`retrofit.RestMethodInfo.method` @type ^`java.lang.reflect.Method` @kind object;
  #L24f6b4.  call temp:= `getParameterTypes`(v1) @signature `Ljava/lang/reflect/Method;.getParameterTypes:()[Ljava/lang/Class;` @kind virtual;
  #L24f6ba.  v1:= temp @kind object;
  #L24f6bc.  v2:= v0.`retrofit.RestMethodInfo.method` @type ^`java.lang.reflect.Method` @kind object;
  #L24f6c0.  call temp:= `getParameterAnnotations`(v2) @signature `Ljava/lang/reflect/Method;.getParameterAnnotations:()[[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L24f6c6.  v2:= temp @kind object;
  #L24f6c8.  v3:= length @variable v2;
  #L24f6ca.  v4:= v0.`retrofit.RestMethodInfo.isSynchronous` @type ^`boolean` @kind boolean;
  #L24f6ce.  if v4 != 0 then goto L24f6de;
  #L24f6d2.  v4:= v0.`retrofit.RestMethodInfo.isObservable` @type ^`boolean` @kind boolean;
  #L24f6d6.  if v4 != 0 then goto L24f6de;
  #L24f6da.  v3:= v3 + -1;
  #L24f6de.  v4:= new `java.lang.annotation.Annotation`[v3];
  #L24f6e2.  v6:= 0I;
  #L24f6e4.  v7:= 0I;
  #L24f6e6.  v8:= 0I;
  #L24f6e8.  v9:= 0I;
  #L24f6ea.  if v6 >= v3 then goto L24f9a0;
  #L24f6ee.  v10:= v1[v6] @kind object;
  #L24f6f2.  v11:= v2[v6] @kind object;
  #L24f6f6.  if v11 == 0 then goto L24f974;
  #L24f6fa.  v12:= length @variable v11;
  #L24f6fc.  v13:= v7;
  #L24f6fe.  v7:= 0I;
  #L24f700.  if v7 >= v12 then goto L24f96c;
  #L24f704.  v14:= v11[v7] @kind object;
  #L24f708.  call temp:= `annotationType`(v14) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L24f70e.  v15:= temp @kind object;
  #L24f710.  v5:= constclass @type ^`retrofit.http.Path` @kind object;
  #L24f714.  v16:= 1I;
  #L24f718.  if v15 != v5 then goto L24f732;
  #L24f71c.  v5:= v14 @kind object;
  #L24f71e.  v5:= (`retrofit.http.Path`) v5 @kind object;
  #L24f722.  call temp:= `value`(v5) @signature `Lretrofit/http/Path;.value:()Ljava/lang/String;` @kind interface;
  #L24f728.  v5:= temp @kind object;
  #L24f72a.  call `validatePathName`(v0, v6, v5) @signature `Lretrofit/RestMethodInfo;.validatePathName:(ILjava/lang/String;)V` @kind direct;
  #L24f730.  goto L24f7c8;
  #L24f732.  v5:= constclass @type ^`retrofit.http.EncodedPath` @kind object;
  #L24f736.  if v15 != v5 then goto L24f750;
  #L24f73a.  v5:= v14 @kind object;
  #L24f73c.  v5:= (`retrofit.http.EncodedPath`) v5 @kind object;
  #L24f740.  call temp:= `value`(v5) @signature `Lretrofit/http/EncodedPath;.value:()Ljava/lang/String;` @kind interface;
  #L24f746.  v5:= temp @kind object;
  #L24f748.  call `validatePathName`(v0, v6, v5) @signature `Lretrofit/RestMethodInfo;.validatePathName:(ILjava/lang/String;)V` @kind direct;
  #L24f74e.  goto L24f7c8;
  #L24f750.  v5:= constclass @type ^`retrofit.http.Query` @kind object;
  #L24f754.  if v15 != v5 then goto L24f75a;
  #L24f758.  goto L24f7c8;
  #L24f75a.  v5:= constclass @type ^`retrofit.http.EncodedQuery` @kind object;
  #L24f75e.  if v15 != v5 then goto L24f764;
  #L24f762.  goto L24f7c8;
  #L24f764.  v5:= constclass @type ^`retrofit.http.QueryMap` @kind object;
  #L24f768.  if v15 != v5 then goto L24f792;
  #L24f76c.  v5:= constclass @type ^`java.util.Map` @kind object;
  #L24f770.  call temp:= `isAssignableFrom`(v5, v10) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L24f776.  v5:= temp;
  #L24f778.  if v5 == 0 then goto L24f77e;
  #L24f77c.  goto L24f7c8;
  #L24f77e.  v5:= 0I;
  #L24f780.  v1:= new `java.lang.Object`[v5];
  #L24f784.  v2:= "@QueryMap parameter type must be Map." @kind object;
  #L24f788.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f78e.  v1:= temp @kind object;
  #L24f790.  throw v1;
  #L24f792.  v5:= constclass @type ^`retrofit.http.EncodedQueryMap` @kind object;
  #L24f796.  if v15 != v5 then goto L24f7c0;
  #L24f79a.  v5:= constclass @type ^`java.util.Map` @kind object;
  #L24f79e.  call temp:= `isAssignableFrom`(v5, v10) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L24f7a4.  v5:= temp;
  #L24f7a6.  if v5 == 0 then goto L24f7ac;
  #L24f7aa.  goto L24f7c8;
  #L24f7ac.  v5:= 0I;
  #L24f7ae.  v1:= new `java.lang.Object`[v5];
  #L24f7b2.  v2:= "@EncodedQueryMap parameter type must be Map." @kind object;
  #L24f7b6.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f7bc.  v1:= temp @kind object;
  #L24f7be.  throw v1;
  #L24f7c0.  v5:= constclass @type ^`retrofit.http.Header` @kind object;
  #L24f7c4.  if v15 != v5 then goto L24f7d0;
  #L24f7c8.  v17:= v1 @kind object;
  #L24f7cc.  goto L24f8ec;
  #L24f7d0.  v5:= constclass @type ^`retrofit.http.Field` @kind object;
  #L24f7d4.  if v15 != v5 then goto L24f802;
  #L24f7d8.  v5:= v0.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f7dc.  v8:= `@@retrofit.RestMethodInfo$RequestType.FORM_URL_ENCODED` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f7e0.  if v5 != v8 then goto L24f7ee;
  #L24f7e4.  v17:= v1 @kind object;
  #L24f7e8.  v8:= 1I;
  #L24f7ea.  goto L24f8ec;
  #L24f7ee.  v5:= 0I;
  #L24f7f0.  v1:= new `java.lang.Object`[v5];
  #L24f7f4.  v2:= "@Field parameters can only be used with form encoding." @kind object;
  #L24f7f8.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f7fe.  v1:= temp @kind object;
  #L24f800.  throw v1;
  #L24f802.  v5:= constclass @type ^`retrofit.http.FieldMap` @kind object;
  #L24f806.  if v15 != v5 then goto L24f850;
  #L24f80a.  v5:= v0.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f80e.  v8:= `@@retrofit.RestMethodInfo$RequestType.FORM_URL_ENCODED` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f812.  if v5 != v8 then goto L24f83c;
  #L24f816.  v5:= constclass @type ^`java.util.Map` @kind object;
  #L24f81a.  call temp:= `isAssignableFrom`(v5, v10) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L24f820.  v5:= temp;
  #L24f822.  if v5 == 0 then goto L24f828;
  #L24f826.  goto L24f7e4;
  #L24f828.  v5:= 0I;
  #L24f82a.  v1:= new `java.lang.Object`[v5];
  #L24f82e.  v2:= "@FieldMap parameter type must be Map." @kind object;
  #L24f832.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f838.  v1:= temp @kind object;
  #L24f83a.  throw v1;
  #L24f83c.  v5:= 0I;
  #L24f83e.  v1:= new `java.lang.Object`[v5];
  #L24f842.  v2:= "@FieldMap parameters can only be used with form encoding." @kind object;
  #L24f846.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f84c.  v1:= temp @kind object;
  #L24f84e.  throw v1;
  #L24f850.  v5:= constclass @type ^`retrofit.http.Part` @kind object;
  #L24f854.  if v15 != v5 then goto L24f880;
  #L24f858.  v5:= v0.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f85c.  v9:= `@@retrofit.RestMethodInfo$RequestType.MULTIPART` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f860.  if v5 != v9 then goto L24f86c;
  #L24f864.  v17:= v1 @kind object;
  #L24f868.  v9:= 1I;
  #L24f86a.  goto L24f8ec;
  #L24f86c.  v5:= 0I;
  #L24f86e.  v1:= new `java.lang.Object`[v5];
  #L24f872.  v2:= "@Part parameters can only be used with multipart encoding." @kind object;
  #L24f876.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f87c.  v1:= temp @kind object;
  #L24f87e.  throw v1;
  #L24f880.  v5:= constclass @type ^`retrofit.http.PartMap` @kind object;
  #L24f884.  if v15 != v5 then goto L24f8ce;
  #L24f888.  v5:= v0.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f88c.  v9:= `@@retrofit.RestMethodInfo$RequestType.MULTIPART` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f890.  if v5 != v9 then goto L24f8ba;
  #L24f894.  v5:= constclass @type ^`java.util.Map` @kind object;
  #L24f898.  call temp:= `isAssignableFrom`(v5, v10) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L24f89e.  v5:= temp;
  #L24f8a0.  if v5 == 0 then goto L24f8a6;
  #L24f8a4.  goto L24f864;
  #L24f8a6.  v5:= 0I;
  #L24f8a8.  v1:= new `java.lang.Object`[v5];
  #L24f8ac.  v2:= "@PartMap parameter type must be Map." @kind object;
  #L24f8b0.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f8b6.  v1:= temp @kind object;
  #L24f8b8.  throw v1;
  #L24f8ba.  v5:= 0I;
  #L24f8bc.  v1:= new `java.lang.Object`[v5];
  #L24f8c0.  v2:= "@PartMap parameters can only be used with multipart encoding." @kind object;
  #L24f8c4.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f8ca.  v1:= temp @kind object;
  #L24f8cc.  throw v1;
  #L24f8ce.  v5:= constclass @type ^`retrofit.http.Body` @kind object;
  #L24f8d2.  if v15 != v5 then goto L24f95c;
  #L24f8d6.  v5:= v0.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f8da.  v17:= v1 @kind object;
  #L24f8de.  v1:= `@@retrofit.RestMethodInfo$RequestType.SIMPLE` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f8e2.  if v5 != v1 then goto L24f948;
  #L24f8e6.  if v13 != 0 then goto L24f934;
  #L24f8ea.  v13:= 1I;
  #L24f8ec.  v1:= v4[v6] @kind object;
  #L24f8f0.  if v1 != 0 then goto L24f8fa;
  #L24f8f4.  v4[v6]:= v14 @kind object;
  #L24f8f8.  goto L24f960;
  #L24f8fa.  v1:= 2I;
  #L24f8fc.  v1:= new `java.lang.Object`[v1];
  #L24f900.  v2:= v4[v6] @kind object;
  #L24f904.  call temp:= `annotationType`(v2) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L24f90a.  v2:= temp @kind object;
  #L24f90c.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L24f912.  v2:= temp @kind object;
  #L24f914.  v3:= 0I;
  #L24f916.  v1[v3]:= v2 @kind object;
  #L24f91a.  call temp:= `getSimpleName`(v15) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L24f920.  v2:= temp @kind object;
  #L24f922.  v1[v16]:= v2 @kind object;
  #L24f926.  v2:= "Multiple Retrofit annotations found, only one allowed: @%s, @%s." @kind object;
  #L24f92a.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f930.  v1:= temp @kind object;
  #L24f932.  throw v1;
  #L24f934.  v3:= 0I;
  #L24f936.  v1:= new `java.lang.Object`[v3];
  #L24f93a.  v2:= "Multiple @Body method annotations found." @kind object;
  #L24f93e.  call temp:= `methodError`(v0, v2, v1) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f944.  v1:= temp @kind object;
  #L24f946.  throw v1;
  #L24f948.  v3:= 0I;
  #L24f94a.  v1:= new `java.lang.Object`[v3];
  #L24f94e.  v2:= "@Body parameters cannot be used with form or multi-part encoding." @kind object;
  #L24f952.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f958.  v1:= temp @kind object;
  #L24f95a.  throw v1;
  #L24f95c.  v17:= v1 @kind object;
  #L24f960.  v7:= v7 + 1;
  #L24f964.  v1:= v17 @kind object;
  #L24f968.  goto L24f700;
  #L24f96c.  v17:= v1 @kind object;
  #L24f970.  v7:= v13;
  #L24f972.  goto L24f978;
  #L24f974.  v17:= v1 @kind object;
  #L24f978.  v1:= v4[v6] @kind object;
  #L24f97c.  if v1 == 0 then goto L24f98c;
  #L24f980.  v6:= v6 + 1;
  #L24f984.  v1:= v17 @kind object;
  #L24f988.  goto L24f6ea;
  #L24f98c.  v1:= 0I;
  #L24f98e.  v1:= new `java.lang.Object`[v1];
  #L24f992.  v2:= "No Retrofit annotation found." @kind object;
  #L24f996.  call temp:= `parameterError`(v0, v6, v2, v1) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f99c.  v1:= temp @kind object;
  #L24f99e.  throw v1;
  #L24f9a0.  v1:= 0I;
  #L24f9a2.  v2:= v0.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f9a6.  v3:= `@@retrofit.RestMethodInfo$RequestType.SIMPLE` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f9aa.  if v2 != v3 then goto L24f9ce;
  #L24f9ae.  v2:= v0.`retrofit.RestMethodInfo.requestHasBody` @type ^`boolean` @kind boolean;
  #L24f9b2.  if v2 != 0 then goto L24f9ce;
  #L24f9b6.  if v7 != 0 then goto L24f9bc;
  #L24f9ba.  goto L24f9ce;
  #L24f9bc.  v1:= new `java.lang.Object`[v1];
  #L24f9c0.  v2:= "Non-body HTTP method cannot contain @Body or @TypedOutput." @kind object;
  #L24f9c4.  call temp:= `methodError`(v0, v2, v1) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f9ca.  v1:= temp @kind object;
  #L24f9cc.  throw v1;
  #L24f9ce.  v2:= v0.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f9d2.  v3:= `@@retrofit.RestMethodInfo$RequestType.FORM_URL_ENCODED` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f9d6.  if v2 != v3 then goto L24f9f2;
  #L24f9da.  if v8 == 0 then goto L24f9e0;
  #L24f9de.  goto L24f9f2;
  #L24f9e0.  v1:= new `java.lang.Object`[v1];
  #L24f9e4.  v2:= "Form-encoded method must contain at least one @Field." @kind object;
  #L24f9e8.  call temp:= `methodError`(v0, v2, v1) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f9ee.  v1:= temp @kind object;
  #L24f9f0.  throw v1;
  #L24f9f2.  v2:= v0.`retrofit.RestMethodInfo.requestType` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f9f6.  v3:= `@@retrofit.RestMethodInfo$RequestType.MULTIPART` @type ^`retrofit.RestMethodInfo$RequestType` @kind object;
  #L24f9fa.  if v2 != v3 then goto L24fa16;
  #L24f9fe.  if v9 == 0 then goto L24fa04;
  #L24fa02.  goto L24fa16;
  #L24fa04.  v1:= new `java.lang.Object`[v1];
  #L24fa08.  v2:= "Multipart method must contain at least one @Part." @kind object;
  #L24fa0c.  call temp:= `methodError`(v0, v2, v1) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24fa12.  v1:= temp @kind object;
  #L24fa14.  throw v1;
  #L24fa16.  v0.`retrofit.RestMethodInfo.requestParamAnnotations` @type ^`java.lang.annotation.Annotation`[] := v4 @kind object;
  #L24fa1a.  return @kind void;
}
procedure `void` `parsePath`(`retrofit.RestMethodInfo` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lretrofit/RestMethodInfo;.parsePath:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24fa2c.  v0:= 0I;
  #L24fa2e.  v1:= 1I;
  #L24fa30.  if v6 == 0 then goto L24face;
  #L24fa34.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L24fa3a.  v2:= temp;
  #L24fa3c.  if v2 == 0 then goto L24face;
  #L24fa40.  call temp:= `charAt`(v6, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L24fa46.  v2:= temp;
  #L24fa48.  v3:= 47I;
  #L24fa4c.  if v2 != v3 then goto L24face;
  #L24fa50.  v2:= 0I;
  #L24fa52.  v3:= 63I;
  #L24fa56.  call temp:= `indexOf`(v6, v3) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L24fa5c.  v3:= temp;
  #L24fa5e.  v4:= -1I;
  #L24fa60.  if v3 == v4 then goto L24fab4;
  #L24fa64.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L24fa6a.  v4:= temp;
  #L24fa6c.  v4:= v4 - v1 @kind int;
  #L24fa6e.  if v3 >= v4 then goto L24fab4;
  #L24fa72.  call temp:= `substring`(v6, v0, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L24fa78.  v2:= temp @kind object;
  #L24fa7a.  v3:= v3 + v1 @kind int;
  #L24fa7c.  call temp:= `substring`(v6, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L24fa82.  v3:= temp @kind object;
  #L24fa84.  v4:= `@@retrofit.RestMethodInfo.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` @kind object;
  #L24fa88.  call temp:= `matcher`(v4, v3) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L24fa8e.  v4:= temp @kind object;
  #L24fa90.  call temp:= `find`(v4) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L24fa96.  v4:= temp;
  #L24fa98.  if v4 != 0 then goto L24fa9e;
  #L24fa9c.  goto L24fab8;
  #L24fa9e.  v6:= new `java.lang.Object`[v1];
  #L24faa2.  v6[v0]:= v3 @kind object;
  #L24faa6.  v0:= "URL query string \"%s\" must not have replace block. For dynamic query parameters use @Query." @kind object;
  #L24faaa.  call temp:= `methodError`(v5, v0, v6) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24fab0.  v6:= temp @kind object;
  #L24fab2.  throw v6;
  #L24fab4.  v3:= v2 @kind object;
  #L24fab6.  v2:= v6 @kind object;
  #L24fab8.  call temp:= `parsePathParameters`(v6) @signature `Lretrofit/RestMethodInfo;.parsePathParameters:(Ljava/lang/String;)Ljava/util/Set;` @kind static;
  #L24fabe.  v6:= temp @kind object;
  #L24fac0.  v5.`retrofit.RestMethodInfo.requestUrl` @type ^`java.lang.String` := v2 @kind object;
  #L24fac4.  v5.`retrofit.RestMethodInfo.requestUrlParamNames` @type ^`java.util.Set` := v6 @kind object;
  #L24fac8.  v5.`retrofit.RestMethodInfo.requestQuery` @type ^`java.lang.String` := v3 @kind object;
  #L24facc.  return @kind void;
  #L24face.  v1:= new `java.lang.Object`[v1];
  #L24fad2.  v1[v0]:= v6 @kind object;
  #L24fad6.  v6:= "URL path \"%s\" must start with '/'." @kind object;
  #L24fada.  call temp:= `methodError`(v5, v6, v1) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24fae0.  v6:= temp @kind object;
  #L24fae2.  throw v6;
}
procedure `java.util.Set` `parsePathParameters`(`java.lang.String` v2 @kind object) @signature `Lretrofit/RestMethodInfo;.parsePathParameters:(Ljava/lang/String;)Ljava/util/Set;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L24f1e4.  v0:= `@@retrofit.RestMethodInfo.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` @kind object;
  #L24f1e8.  call temp:= `matcher`(v0, v2) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L24f1ee.  v2:= temp @kind object;
  #L24f1f0.  v0:= new `java.util.LinkedHashSet`;
  #L24f1f4.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L24f1fa.  call temp:= `find`(v2) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L24f200.  v1:= temp;
  #L24f202.  if v1 == 0 then goto L24f218;
  #L24f206.  v1:= 1I;
  #L24f208.  call temp:= `group`(v2, v1) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L24f20e.  v1:= temp @kind object;
  #L24f210.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24f216.  goto L24f1fa;
  #L24f218.  return v0 @kind object;
}
procedure `retrofit.RestMethodInfo$ResponseType` `parseResponseType`(`retrofit.RestMethodInfo` v7 @kind this) @signature `Lretrofit/RestMethodInfo;.parseResponseType:()Lretrofit/RestMethodInfo$ResponseType;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L24f22c.  v0:= constclass @type ^`retrofit.Callback` @kind object;
  #L24f230.  v1:= v7.`retrofit.RestMethodInfo.method` @type ^`java.lang.reflect.Method` @kind object;
  #L24f234.  call temp:= `getGenericReturnType`(v1) @signature `Ljava/lang/reflect/Method;.getGenericReturnType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L24f23a.  v1:= temp @kind object;
  #L24f23c.  v2:= v7.`retrofit.RestMethodInfo.method` @type ^`java.lang.reflect.Method` @kind object;
  #L24f240.  call temp:= `getGenericParameterTypes`(v2) @signature `Ljava/lang/reflect/Method;.getGenericParameterTypes:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L24f246.  v2:= temp @kind object;
  #L24f248.  v3:= length @variable v2;
  #L24f24a.  v4:= 0I;
  #L24f24c.  v5:= 1I;
  #L24f24e.  if v3 <= 0 then goto L24f284;
  #L24f252.  v3:= length @variable v2;
  #L24f254.  v3:= v3 - v5 @kind int;
  #L24f256.  v2:= v2[v3] @kind object;
  #L24f25a.  v3:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L24f25e.  if v3 == 0 then goto L24f272;
  #L24f262.  v3:= v2 @kind object;
  #L24f264.  v3:= (`java.lang.reflect.ParameterizedType`) v3 @kind object;
  #L24f268.  call temp:= `getRawType`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L24f26e.  v3:= temp @kind object;
  #L24f270.  goto L24f274;
  #L24f272.  v3:= v2 @kind object;
  #L24f274.  v6:= instanceof @variable v3 @type ^`java.lang.Class` @kind boolean;
  #L24f278.  if v6 == 0 then goto L24f286;
  #L24f27c.  v4:= v3 @kind object;
  #L24f27e.  v4:= (`java.lang.Class`) v4 @kind object;
  #L24f282.  goto L24f286;
  #L24f284.  v2:= v4 @kind object;
  #L24f286.  v3:= `@@java.lang.Void.TYPE` @type ^`java.lang.Class` @kind object;
  #L24f28a.  v6:= 0I;
  #L24f28c.  if v1 == v3 then goto L24f294;
  #L24f290.  v3:= 1I;
  #L24f292.  goto L24f296;
  #L24f294.  v3:= 0I;
  #L24f296.  if v4 == 0 then goto L24f2a8;
  #L24f29a.  call temp:= `isAssignableFrom`(v0, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L24f2a0.  v4:= temp;
  #L24f2a2.  if v4 == 0 then goto L24f2a8;
  #L24f2a6.  goto L24f2aa;
  #L24f2a8.  v5:= 0I;
  #L24f2aa.  if v3 == 0 then goto L24f2c6;
  #L24f2ae.  if v5 != 0 then goto L24f2b4;
  #L24f2b2.  goto L24f2c6;
  #L24f2b4.  v0:= new `java.lang.Object`[v6];
  #L24f2b8.  v1:= "Must have return type or Callback as last argument, not both." @kind object;
  #L24f2bc.  call temp:= `methodError`(v7, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f2c2.  v0:= temp @kind object;
  #L24f2c4.  throw v0;
  #L24f2c6.  if v3 != 0 then goto L24f2e2;
  #L24f2ca.  if v5 == 0 then goto L24f2d0;
  #L24f2ce.  goto L24f2e2;
  #L24f2d0.  v0:= new `java.lang.Object`[v6];
  #L24f2d4.  v1:= "Must have either a return type or Callback as last argument." @kind object;
  #L24f2d8.  call temp:= `methodError`(v7, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f2de.  v0:= temp @kind object;
  #L24f2e0.  throw v0;
  #L24f2e2.  if v3 == 0 then goto L24f32a;
  #L24f2e6.  v0:= `@@retrofit.Platform.HAS_RX_JAVA` @type ^`boolean` @kind boolean;
  #L24f2ea.  if v0 == 0 then goto L24f320;
  #L24f2ee.  call temp:= `getRawType`(v1) @signature `Lretrofit/Types;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L24f2f4.  v0:= temp @kind object;
  #L24f2f6.  call temp:= `isObservable`(v0) @signature `Lretrofit/RestMethodInfo$RxSupport;.isObservable:(Ljava/lang/Class;)Z` @kind static;
  #L24f2fc.  v2:= temp;
  #L24f2fe.  if v2 == 0 then goto L24f320;
  #L24f302.  call temp:= `getObservableType`(v1, v0) @signature `Lretrofit/RestMethodInfo$RxSupport;.getObservableType:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L24f308.  v0:= temp @kind object;
  #L24f30a.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L24f30e.  call temp:= `getParameterUpperBound`(v0) @signature `Lretrofit/RestMethodInfo;.getParameterUpperBound:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L24f314.  v0:= temp @kind object;
  #L24f316.  v7.`retrofit.RestMethodInfo.responseObjectType` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L24f31a.  v0:= `@@retrofit.RestMethodInfo$ResponseType.OBSERVABLE` @type ^`retrofit.RestMethodInfo$ResponseType` @kind object;
  #L24f31e.  return v0 @kind object;
  #L24f320.  v7.`retrofit.RestMethodInfo.responseObjectType` @type ^`java.lang.reflect.Type` := v1 @kind object;
  #L24f324.  v0:= `@@retrofit.RestMethodInfo$ResponseType.OBJECT` @type ^`retrofit.RestMethodInfo$ResponseType` @kind object;
  #L24f328.  return v0 @kind object;
  #L24f32a.  call temp:= `getRawType`(v2) @signature `Lretrofit/Types;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L24f330.  v1:= temp @kind object;
  #L24f332.  call temp:= `getSupertype`(v2, v1, v0) @signature `Lretrofit/Types;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L24f338.  v0:= temp @kind object;
  #L24f33a.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L24f33e.  if v1 == 0 then goto L24f358;
  #L24f342.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L24f346.  call temp:= `getParameterUpperBound`(v0) @signature `Lretrofit/RestMethodInfo;.getParameterUpperBound:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L24f34c.  v0:= temp @kind object;
  #L24f34e.  v7.`retrofit.RestMethodInfo.responseObjectType` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L24f352.  v0:= `@@retrofit.RestMethodInfo$ResponseType.VOID` @type ^`retrofit.RestMethodInfo$ResponseType` @kind object;
  #L24f356.  return v0 @kind object;
  #L24f358.  v0:= new `java.lang.Object`[v6];
  #L24f35c.  v1:= "Last parameter must be of type Callback<X> or Callback<? super X>." @kind object;
  #L24f360.  call temp:= `methodError`(v7, v1, v0) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f366.  v0:= temp @kind object;
  #L24f368.  throw v0;
}
procedure `void` `validatePathName`(`retrofit.RestMethodInfo` v4 @kind this, `int` v5 , `java.lang.String` v6 @kind object) @signature `Lretrofit/RestMethodInfo;.validatePathName:(ILjava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24faf4.  v0:= `@@retrofit.RestMethodInfo.PARAM_NAME_REGEX` @type ^`java.util.regex.Pattern` @kind object;
  #L24faf8.  call temp:= `matcher`(v0, v6) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L24fafe.  v0:= temp @kind object;
  #L24fb00.  call temp:= `matches`(v0) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L24fb06.  v0:= temp;
  #L24fb08.  v1:= 1I;
  #L24fb0a.  v2:= 0I;
  #L24fb0c.  v3:= 2I;
  #L24fb0e.  if v0 == 0 then goto L24fb42;
  #L24fb12.  v0:= v4.`retrofit.RestMethodInfo.requestUrlParamNames` @type ^`java.util.Set` @kind object;
  #L24fb16.  call temp:= `contains`(v0, v6) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L24fb1c.  v0:= temp;
  #L24fb1e.  if v0 == 0 then goto L24fb24;
  #L24fb22.  return @kind void;
  #L24fb24.  v0:= new `java.lang.Object`[v3];
  #L24fb28.  v3:= v4.`retrofit.RestMethodInfo.requestUrl` @type ^`java.lang.String` @kind object;
  #L24fb2c.  v0[v2]:= v3 @kind object;
  #L24fb30.  v0[v1]:= v6 @kind object;
  #L24fb34.  v6:= "URL \"%s\" does not contain \"{%s}\"." @kind object;
  #L24fb38.  call temp:= `parameterError`(v4, v5, v6, v0) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24fb3e.  v5:= temp @kind object;
  #L24fb40.  throw v5;
  #L24fb42.  v0:= new `java.lang.Object`[v3];
  #L24fb46.  v3:= `@@retrofit.RestMethodInfo.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` @kind object;
  #L24fb4a.  call temp:= `pattern`(v3) @signature `Ljava/util/regex/Pattern;.pattern:()Ljava/lang/String;` @kind virtual;
  #L24fb50.  v3:= temp @kind object;
  #L24fb52.  v0[v2]:= v3 @kind object;
  #L24fb56.  v0[v1]:= v6 @kind object;
  #L24fb5a.  v6:= "@Path parameter name must match %s. Found: %s" @kind object;
  #L24fb5e.  call temp:= `parameterError`(v4, v5, v6, v0) @signature `Lretrofit/RestMethodInfo;.parameterError:(ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24fb64.  v5:= temp @kind object;
  #L24fb66.  throw v5;
}
procedure `void` `init`(`retrofit.RestMethodInfo` v1 @kind this) @signature `Lretrofit/RestMethodInfo;.init:()V` @AccessFlag  {
    temp;
    v0;

  #L24f410.  @monitorenter v1
  #L24f412.  v0:= v1.`retrofit.RestMethodInfo.loaded` @type ^`boolean` @kind boolean;
  #L24f416.  if v0 == 0 then goto L24f41e;
  #L24f41a.  @monitorexit v1
  #L24f41c.  return @kind void;
  #L24f41e.  call `parseMethodAnnotations`(v1) @signature `Lretrofit/RestMethodInfo;.parseMethodAnnotations:()V` @kind direct;
  #L24f424.  call `parseParameters`(v1) @signature `Lretrofit/RestMethodInfo;.parseParameters:()V` @kind direct;
  #L24f42a.  v0:= 1I;
  #L24f42c.  v1.`retrofit.RestMethodInfo.loaded` @type ^`boolean` := v0 @kind boolean;
  #L24f430.  @monitorexit v1
  #L24f432.  return @kind void;
  #L24f434.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24f436.  @monitorexit v1
  #L24f438.  throw v0;
  catch `java.lang.Throwable` @[L24f412..L24f416] goto L24f434;
  catch `java.lang.Throwable` @[L24f41e..L24f430] goto L24f434;
}
procedure `java.util.List` `parseHeaders`(`retrofit.RestMethodInfo` v8 @kind this, `java.lang.String`[] v9 @kind object) @signature `Lretrofit/RestMethodInfo;.parseHeaders:([Ljava/lang/String;)Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L24f134.  v0:= new `java.util.ArrayList`;
  #L24f138.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L24f13e.  v1:= length @variable v9;
  #L24f140.  v2:= 0I;
  #L24f142.  v3:= 0I;
  #L24f144.  if v3 >= v1 then goto L24f1d0;
  #L24f148.  v4:= v9[v3] @kind object;
  #L24f14c.  v5:= 58I;
  #L24f150.  call temp:= `indexOf`(v4, v5) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L24f156.  v5:= temp;
  #L24f158.  v6:= -1I;
  #L24f15a.  v7:= 1I;
  #L24f15c.  if v5 == v6 then goto L24f1ba;
  #L24f160.  if v5 == 0 then goto L24f1ba;
  #L24f164.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L24f16a.  v6:= temp;
  #L24f16c.  v6:= v6 - v7 @kind int;
  #L24f16e.  if v5 == v6 then goto L24f1ba;
  #L24f172.  call temp:= `substring`(v4, v2, v5) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L24f178.  v6:= temp @kind object;
  #L24f17a.  v5:= v5 + 1;
  #L24f17e.  call temp:= `substring`(v4, v5) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L24f184.  v4:= temp @kind object;
  #L24f186.  call temp:= `trim`(v4) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L24f18c.  v4:= temp @kind object;
  #L24f18e.  v5:= "Content-Type" @kind object;
  #L24f192.  call temp:= `equalsIgnoreCase`(v5, v6) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L24f198.  v5:= temp;
  #L24f19a.  if v5 == 0 then goto L24f1a4;
  #L24f19e.  v8.`retrofit.RestMethodInfo.contentTypeHeader` @type ^`java.lang.String` := v4 @kind object;
  #L24f1a2.  goto L24f1b4;
  #L24f1a4.  v5:= new `retrofit.client.Header`;
  #L24f1a8.  call `<init>`(v5, v6, v4) @signature `Lretrofit/client/Header;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L24f1ae.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24f1b4.  v3:= v3 + 1;
  #L24f1b8.  goto L24f144;
  #L24f1ba.  v9:= new `java.lang.Object`[v7];
  #L24f1be.  v9[v2]:= v4 @kind object;
  #L24f1c2.  v0:= "@Headers value must be in the form \"Name: Value\". Found: \"%s\"" @kind object;
  #L24f1c6.  call temp:= `methodError`(v8, v0, v9) @signature `Lretrofit/RestMethodInfo;.methodError:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind direct;
  #L24f1cc.  v9:= temp @kind object;
  #L24f1ce.  throw v9;
  #L24f1d0.  return v0 @kind object;
}
