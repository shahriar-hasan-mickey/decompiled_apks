record `retrofit.RestMethodInfo$RxSupport` @kind class @AccessFlag FINAL {
}
procedure `void` `<init>`(`retrofit.RestMethodInfo$RxSupport` v0 @kind this) @signature `Lretrofit/RestMethodInfo$RxSupport;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L24eff8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L24effe.  return @kind void;
}
procedure `java.lang.reflect.Type` `getObservableType`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lretrofit/RestMethodInfo$RxSupport;.getObservableType:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L24efd8.  v0:= constclass @type ^`rx.Observable` @kind object;
  #L24efdc.  call temp:= `getSupertype`(v1, v2, v0) @signature `Lretrofit/Types;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L24efe2.  v1:= temp @kind object;
  #L24efe4.  return v1 @kind object;
}
procedure `boolean` `isObservable`(`java.lang.Class` v1 @kind object) @signature `Lretrofit/RestMethodInfo$RxSupport;.isObservable:(Ljava/lang/Class;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L24efb8.  v0:= constclass @type ^`rx.Observable` @kind object;
  #L24efbc.  if v1 != v0 then goto L24efc4;
  #L24efc0.  v1:= 1I;
  #L24efc2.  goto L24efc6;
  #L24efc4.  v1:= 0I;
  #L24efc6.  return v1;
}
