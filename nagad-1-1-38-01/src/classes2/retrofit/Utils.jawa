record `retrofit.Utils` @kind class @AccessFlag FINAL {
}
global `int` `@@retrofit.Utils.BUFFER_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`retrofit.Utils` v0 @kind this) @signature `Lretrofit/Utils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L250e70.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L250e76.  return @kind void;
}
procedure `retrofit.client.Request` `readBodyToBytesIfNecessary`(`retrofit.client.Request` v4 @kind object) @signature `Lretrofit/Utils;.readBodyToBytesIfNecessary:(Lretrofit/client/Request;)Lretrofit/client/Request;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L250d28.  call temp:= `getBody`(v4) @signature `Lretrofit/client/Request;.getBody:()Lretrofit/mime/TypedOutput;` @kind virtual;
  #L250d2e.  v0:= temp @kind object;
  #L250d30.  if v0 == 0 then goto L250d8c;
  #L250d34.  v1:= instanceof @variable v0 @type ^`retrofit.mime.TypedByteArray` @kind boolean;
  #L250d38.  if v1 == 0 then goto L250d3e;
  #L250d3c.  goto L250d8c;
  #L250d3e.  call temp:= `mimeType`(v0) @signature `Lretrofit/mime/TypedOutput;.mimeType:()Ljava/lang/String;` @kind interface;
  #L250d44.  v1:= temp @kind object;
  #L250d46.  v2:= new `java.io.ByteArrayOutputStream`;
  #L250d4a.  call `<init>`(v2) @signature `Ljava/io/ByteArrayOutputStream;.<init>:()V` @kind direct;
  #L250d50.  call `writeTo`(v0, v2) @signature `Lretrofit/mime/TypedOutput;.writeTo:(Ljava/io/OutputStream;)V` @kind interface;
  #L250d56.  v0:= new `retrofit.mime.TypedByteArray`;
  #L250d5a.  call temp:= `toByteArray`(v2) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L250d60.  v2:= temp @kind object;
  #L250d62.  call `<init>`(v0, v1, v2) @signature `Lretrofit/mime/TypedByteArray;.<init>:(Ljava/lang/String;[B)V` @kind direct;
  #L250d68.  v1:= new `retrofit.client.Request`;
  #L250d6c.  call temp:= `getMethod`(v4) @signature `Lretrofit/client/Request;.getMethod:()Ljava/lang/String;` @kind virtual;
  #L250d72.  v2:= temp @kind object;
  #L250d74.  call temp:= `getUrl`(v4) @signature `Lretrofit/client/Request;.getUrl:()Ljava/lang/String;` @kind virtual;
  #L250d7a.  v3:= temp @kind object;
  #L250d7c.  call temp:= `getHeaders`(v4) @signature `Lretrofit/client/Request;.getHeaders:()Ljava/util/List;` @kind virtual;
  #L250d82.  v4:= temp @kind object;
  #L250d84.  call `<init>`(v1, v2, v3, v4, v0) @signature `Lretrofit/client/Request;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Lretrofit/mime/TypedOutput;)V` @kind direct;
  #L250d8a.  return v1 @kind object;
  #L250d8c.  return v4 @kind object;
}
procedure `retrofit.client.Response` `readBodyToBytesIfNecessary`(`retrofit.client.Response` v4 @kind object) @signature `Lretrofit/Utils;.readBodyToBytesIfNecessary:(Lretrofit/client/Response;)Lretrofit/client/Response;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L250da0.  call temp:= `getBody`(v4) @signature `Lretrofit/client/Response;.getBody:()Lretrofit/mime/TypedInput;` @kind virtual;
  #L250da6.  v0:= temp @kind object;
  #L250da8.  if v0 == 0 then goto L250dfa;
  #L250dac.  v1:= instanceof @variable v0 @type ^`retrofit.mime.TypedByteArray` @kind boolean;
  #L250db0.  if v1 == 0 then goto L250db6;
  #L250db4.  goto L250dfa;
  #L250db6.  call temp:= `mimeType`(v0) @signature `Lretrofit/mime/TypedInput;.mimeType:()Ljava/lang/String;` @kind interface;
  #L250dbc.  v1:= temp @kind object;
  #L250dbe.  call temp:= `in`(v0) @signature `Lretrofit/mime/TypedInput;.in:()Ljava/io/InputStream;` @kind interface;
  #L250dc4.  v0:= temp @kind object;
  #L250dc6.  call temp:= `streamToBytes`(v0) @signature `Lretrofit/Utils;.streamToBytes:(Ljava/io/InputStream;)[B` @kind static;
  #L250dcc.  v2:= temp @kind object;
  #L250dce.  v3:= new `retrofit.mime.TypedByteArray`;
  #L250dd2.  call `<init>`(v3, v1, v2) @signature `Lretrofit/mime/TypedByteArray;.<init>:(Ljava/lang/String;[B)V` @kind direct;
  #L250dd8.  call temp:= `replaceResponseBody`(v4, v3) @signature `Lretrofit/Utils;.replaceResponseBody:(Lretrofit/client/Response;Lretrofit/mime/TypedInput;)Lretrofit/client/Response;` @kind static;
  #L250dde.  v4:= temp @kind object;
  #L250de0.  if v0 == 0 then goto L250dea;
  #L250de4.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L250dea.  return v4 @kind object;
  #L250dec.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L250dee.  if v0 == 0 then goto L250df8;
  #L250df2.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L250df8.  throw v4;
  #L250dfa.  return v4 @kind object;
  catch `java.lang.Throwable` @[L250dc6..L250de0] goto L250dec;
  catch `java.io.IOException` @[L250de4..L250dea] goto L250dea;
  catch `java.io.IOException` @[L250df2..L250df8] goto L250df8;
}
procedure `retrofit.client.Response` `replaceResponseBody`(`retrofit.client.Response` v7 @kind object, `retrofit.mime.TypedInput` v8 @kind object) @signature `Lretrofit/Utils;.replaceResponseBody:(Lretrofit/client/Response;Lretrofit/mime/TypedInput;)Lretrofit/client/Response;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L250e30.  v6:= new `retrofit.client.Response`;
  #L250e34.  call temp:= `getUrl`(v7) @signature `Lretrofit/client/Response;.getUrl:()Ljava/lang/String;` @kind virtual;
  #L250e3a.  v1:= temp @kind object;
  #L250e3c.  call temp:= `getStatus`(v7) @signature `Lretrofit/client/Response;.getStatus:()I` @kind virtual;
  #L250e42.  v2:= temp;
  #L250e44.  call temp:= `getReason`(v7) @signature `Lretrofit/client/Response;.getReason:()Ljava/lang/String;` @kind virtual;
  #L250e4a.  v3:= temp @kind object;
  #L250e4c.  call temp:= `getHeaders`(v7) @signature `Lretrofit/client/Response;.getHeaders:()Ljava/util/List;` @kind virtual;
  #L250e52.  v4:= temp @kind object;
  #L250e54.  v0:= v6 @kind object;
  #L250e56.  v5:= v8 @kind object;
  #L250e58.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lretrofit/client/Response;.<init>:(Ljava/lang/String;ILjava/lang/String;Ljava/util/List;Lretrofit/mime/TypedInput;)V` @kind direct;
  #L250e5e.  return v6 @kind object;
}
procedure `byte`[] `streamToBytes`(`java.io.InputStream` v4 @kind object) @signature `Lretrofit/Utils;.streamToBytes:(Ljava/io/InputStream;)[B` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L250ce0.  v0:= new `java.io.ByteArrayOutputStream`;
  #L250ce4.  call `<init>`(v0) @signature `Ljava/io/ByteArrayOutputStream;.<init>:()V` @kind direct;
  #L250cea.  if v4 == 0 then goto L250d0e;
  #L250cee.  v1:= 4096I;
  #L250cf2.  v1:= new `byte`[v1];
  #L250cf6.  call temp:= `read`(v4, v1) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L250cfc.  v2:= temp;
  #L250cfe.  v3:= -1I;
  #L250d00.  if v2 == v3 then goto L250d0e;
  #L250d04.  v3:= 0I;
  #L250d06.  call `write`(v0, v1, v3, v2) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L250d0c.  goto L250cf6;
  #L250d0e.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L250d14.  v4:= temp @kind object;
  #L250d16.  return v4 @kind object;
}
procedure `void` `validateServiceClass`(`java.lang.Class` v1 @kind object) @signature `Lretrofit/Utils;.validateServiceClass:(Ljava/lang/Class;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L250e88.  call temp:= `isInterface`(v1) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L250e8e.  v0:= temp;
  #L250e90.  if v0 == 0 then goto L250eb4;
  #L250e94.  call temp:= `getInterfaces`(v1) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L250e9a.  v1:= temp @kind object;
  #L250e9c.  v1:= length @variable v1;
  #L250e9e.  if v1 > 0 then goto L250ea4;
  #L250ea2.  return @kind void;
  #L250ea4.  v1:= new `java.lang.IllegalArgumentException`;
  #L250ea8.  v0:= "Interface definitions must not extend other interfaces." @kind object;
  #L250eac.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L250eb2.  throw v1;
  #L250eb4.  v1:= new `java.lang.IllegalArgumentException`;
  #L250eb8.  v0:= "Only interface endpoint definitions are supported." @kind object;
  #L250ebc.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L250ec2.  throw v1;
}
