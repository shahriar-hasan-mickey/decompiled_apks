record `retrofit.Types$WildcardTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.WildcardType` @kind interface {
  `java.lang.reflect.Type` `retrofit.Types$WildcardTypeImpl.lowerBound` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit.Types$WildcardTypeImpl.upperBound` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit.Types$WildcardTypeImpl` v4 @kind this, `java.lang.reflect.Type`[] v5 @kind object, `java.lang.reflect.Type`[] v6 @kind object) @signature `Lretrofit/Types$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2504c0.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L2504c4.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2504ca.  v1:= length @variable v6;
  #L2504cc.  v2:= 1I;
  #L2504ce.  if v1 > v2 then goto L25055a;
  #L2504d2.  v1:= length @variable v5;
  #L2504d4.  if v1 != v2 then goto L25054e;
  #L2504d8.  v1:= length @variable v6;
  #L2504da.  v3:= 0I;
  #L2504dc.  if v1 != v2 then goto L250520;
  #L2504e0.  v1:= v6[v3] @kind object;
  #L2504e4.  if v1 == 0 then goto L250514;
  #L2504e8.  v1:= v6[v3] @kind object;
  #L2504ec.  call `access$000`(v1) @signature `Lretrofit/Types;.access$000:(Ljava/lang/reflect/Type;)V` @kind static;
  #L2504f2.  v5:= v5[v3] @kind object;
  #L2504f6.  if v5 != v0 then goto L250508;
  #L2504fa.  v5:= v6[v3] @kind object;
  #L2504fe.  v4.`retrofit.Types$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L250502.  v4.`retrofit.Types$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L250506.  goto L250540;
  #L250508.  v5:= new `java.lang.IllegalArgumentException`;
  #L25050c.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L250512.  throw v5;
  #L250514.  v5:= new `java.lang.NullPointerException`;
  #L250518.  call `<init>`(v5) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L25051e.  throw v5;
  #L250520.  v6:= v5[v3] @kind object;
  #L250524.  if v6 == 0 then goto L250542;
  #L250528.  v6:= v5[v3] @kind object;
  #L25052c.  call `access$000`(v6) @signature `Lretrofit/Types;.access$000:(Ljava/lang/reflect/Type;)V` @kind static;
  #L250532.  v6:= 0I;
  #L250534.  v4.`retrofit.Types$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L250538.  v5:= v5[v3] @kind object;
  #L25053c.  v4.`retrofit.Types$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L250540.  return @kind void;
  #L250542.  v5:= new `java.lang.NullPointerException`;
  #L250546.  call `<init>`(v5) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L25054c.  throw v5;
  #L25054e.  v5:= new `java.lang.IllegalArgumentException`;
  #L250552.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L250558.  throw v5;
  #L25055a.  v5:= new `java.lang.IllegalArgumentException`;
  #L25055e.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L250564.  throw v5;
}
procedure `boolean` `equals`(`retrofit.Types$WildcardTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lretrofit/Types$WildcardTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250374.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L250378.  if v0 == 0 then goto L250390;
  #L25037c.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L250380.  call temp:= `equals`(v1, v2) @signature `Lretrofit/Types;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L250386.  v2:= temp;
  #L250388.  if v2 == 0 then goto L250390;
  #L25038c.  v2:= 1I;
  #L25038e.  goto L250392;
  #L250390.  v2:= 0I;
  #L250392.  return v2;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`retrofit.Types$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit/Types$WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L25046c.  v0:= v3.`retrofit.Types$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L250470.  if v0 == 0 then goto L250482;
  #L250474.  v1:= 1I;
  #L250476.  v1:= new `java.lang.reflect.Type`[v1];
  #L25047a.  v2:= 0I;
  #L25047c.  v1[v2]:= v0 @kind object;
  #L250480.  goto L25048a;
  #L250482.  call temp:= `access$200`() @signature `Lretrofit/Types;.access$200:()[Ljava/lang/reflect/Type;` @kind static;
  #L250488.  v1:= temp @kind object;
  #L25048a.  return v1 @kind object;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`retrofit.Types$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit/Types$WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L25049c.  v0:= 1I;
  #L25049e.  v0:= new `java.lang.reflect.Type`[v0];
  #L2504a2.  v1:= v3.`retrofit.Types$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L2504a6.  v2:= 0I;
  #L2504a8.  v0[v2]:= v1 @kind object;
  #L2504ac.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit.Types$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit/Types$WildcardTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2503a4.  v0:= v2.`retrofit.Types$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L2503a8.  if v0 == 0 then goto L2503ba;
  #L2503ac.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2503b2.  v0:= temp;
  #L2503b4.  v0:= v0 + 31;
  #L2503b8.  goto L2503bc;
  #L2503ba.  v0:= 1I;
  #L2503bc.  v1:= v2.`retrofit.Types$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L2503c0.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2503c6.  v1:= temp;
  #L2503c8.  v1:= v1 + 31;
  #L2503cc.  v0:= v0 ^~ v1 @kind int;
  #L2503ce.  return v0;
}
procedure `java.lang.String` `toString`(`retrofit.Types$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit/Types$WildcardTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2503e0.  v0:= v2.`retrofit.Types$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L2503e4.  if v0 == 0 then goto L250418;
  #L2503e8.  v0:= new `java.lang.StringBuilder`;
  #L2503ec.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2503f2.  v1:= "? super " @kind object;
  #L2503f6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2503fc.  v1:= v2.`retrofit.Types$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L250400.  call temp:= `typeToString`(v1) @signature `Lretrofit/Types;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L250406.  v1:= temp @kind object;
  #L250408.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25040e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L250414.  v0:= temp @kind object;
  #L250416.  return v0 @kind object;
  #L250418.  v0:= v2.`retrofit.Types$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L25041c.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L250420.  if v0 != v1 then goto L25042a;
  #L250424.  v0:= "?" @kind object;
  #L250428.  return v0 @kind object;
  #L25042a.  v0:= new `java.lang.StringBuilder`;
  #L25042e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L250434.  v1:= "? extends " @kind object;
  #L250438.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25043e.  v1:= v2.`retrofit.Types$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L250442.  call temp:= `typeToString`(v1) @signature `Lretrofit/Types;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L250448.  v1:= temp @kind object;
  #L25044a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L250450.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L250456.  v0:= temp @kind object;
  #L250458.  return v0 @kind object;
}
