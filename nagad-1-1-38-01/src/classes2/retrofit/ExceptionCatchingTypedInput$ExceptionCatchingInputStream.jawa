record `retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` @kind class @AccessFlag  extends `java.io.InputStream` @kind class {
  `java.io.InputStream` `retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @AccessFlag PRIVATE_FINAL;
  `java.io.IOException` `retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.<init>:(Ljava/io/InputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24c148.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L24c14e.  v0.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` := v1 @kind object;
  #L24c152.  return @kind void;
}
procedure `java.io.IOException` `access$000`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v0 @kind object) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.access$000:(Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;)Ljava/io/IOException;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L24c0f8.  v0:= v0.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @type ^`java.io.IOException` @kind object;
  #L24c0fc.  return v0 @kind object;
}
procedure `int` `available`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24c018.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L24c01c.  call temp:= `available`(v0) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L24c022.  v0:= temp;
  #L24c024.  return v0;
  #L24c026.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L24c028.  v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @type ^`java.io.IOException` := v0 @kind object;
  #L24c02c.  throw v0;
  catch `java.io.IOException` @[L24c018..L24c024] goto L24c026;
}
procedure `void` `close`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24c164.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L24c168.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L24c16e.  return @kind void;
  #L24c170.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L24c172.  v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @type ^`java.io.IOException` := v0 @kind object;
  #L24c176.  throw v0;
  catch `java.io.IOException` @[L24c164..L24c16e] goto L24c170;
}
procedure `void` `mark`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this, `int` v2 ) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.mark:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24c198.  @monitorenter v1
  #L24c19a.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L24c19e.  call `mark`(v0, v2) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L24c1a4.  @monitorexit v1
  #L24c1a6.  return @kind void;
  #L24c1a8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24c1aa.  @monitorexit v1
  #L24c1ac.  throw v2;
  catch `java.lang.Throwable` @[L24c19a..L24c1a4] goto L24c1a8;
}
procedure `boolean` `markSupported`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24bff8.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L24bffc.  call temp:= `markSupported`(v0) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L24c002.  v0:= temp;
  #L24c004.  return v0;
}
procedure `int` `read`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24c050.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L24c054.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L24c05a.  v0:= temp;
  #L24c05c.  return v0;
  #L24c05e.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L24c060.  v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @type ^`java.io.IOException` := v0 @kind object;
  #L24c064.  throw v0;
  catch `java.io.IOException` @[L24c050..L24c05c] goto L24c05e;
}
procedure `int` `read`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this, `byte`[] v2 @kind object) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24c088.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L24c08c.  call temp:= `read`(v0, v2) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L24c092.  v2:= temp;
  #L24c094.  return v2;
  #L24c096.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L24c098.  v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @type ^`java.io.IOException` := v2 @kind object;
  #L24c09c.  throw v2;
  catch `java.io.IOException` @[L24c088..L24c094] goto L24c096;
}
procedure `int` `read`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24c0c0.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L24c0c4.  call temp:= `read`(v0, v2, v3, v4) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L24c0ca.  v2:= temp;
  #L24c0cc.  return v2;
  #L24c0ce.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L24c0d0.  v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @type ^`java.io.IOException` := v2 @kind object;
  #L24c0d4.  throw v2;
  catch `java.io.IOException` @[L24c0c0..L24c0cc] goto L24c0ce;
}
procedure `void` `reset`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24c1cc.  @monitorenter v1
  #L24c1ce.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L24c1d2.  call `reset`(v0) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L24c1d8.  @monitorexit v1
  #L24c1da.  return @kind void;
  #L24c1dc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24c1de.  goto L24c1e8;
  #L24c1e0.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L24c1e2.  v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @type ^`java.io.IOException` := v0 @kind object;
  #L24c1e6.  throw v0;
  #L24c1e8.  @monitorexit v1
  #L24c1ea.  throw v0;
  catch `java.io.IOException` @[L24c1ce..L24c1d8] goto L24c1e0;
  catch `java.lang.Throwable` @[L24c1ce..L24c1d8] goto L24c1dc;
  catch `java.lang.Throwable` @[L24c1e2..L24c1e8] goto L24c1dc;
}
procedure `long` `skip`(`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream` v1 @kind this, `long` v2 ) @signature `Lretrofit/ExceptionCatchingTypedInput$ExceptionCatchingInputStream;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24c110.  v0:= v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.delegate` @type ^`java.io.InputStream` @kind object;
  #L24c114.  call temp:= `skip`(v0, v2) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L24c11a.  v2:= temp @kind wide;
  #L24c11c.  return v2 @kind wide;
  #L24c11e.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L24c120.  v1.`retrofit.ExceptionCatchingTypedInput$ExceptionCatchingInputStream.thrownException` @type ^`java.io.IOException` := v2 @kind object;
  #L24c124.  throw v2;
  catch `java.io.IOException` @[L24c110..L24c11c] goto L24c11e;
}
