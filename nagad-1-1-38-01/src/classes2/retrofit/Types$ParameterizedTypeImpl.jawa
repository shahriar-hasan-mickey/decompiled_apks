record `retrofit.Types$ParameterizedTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.ParameterizedType` @kind interface {
  `java.lang.reflect.Type` `retrofit.Types$ParameterizedTypeImpl.ownerType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit.Types$ParameterizedTypeImpl.rawType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `retrofit.Types$ParameterizedTypeImpl.typeArguments` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit.Types$ParameterizedTypeImpl` v4 @kind this, `java.lang.reflect.Type` v5 @kind object, `java.lang.reflect.Type` v6 @kind object, `java.lang.reflect.Type`[] v7 @kind object) @signature `Lretrofit/Types$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2502dc.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2502e2.  v0:= instanceof @variable v6 @type ^`java.lang.Class` @kind boolean;
  #L2502e6.  v1:= 0I;
  #L2502e8.  if v0 == 0 then goto L250320;
  #L2502ec.  v0:= 1I;
  #L2502ee.  if v5 != 0 then goto L2502f6;
  #L2502f2.  v2:= 1I;
  #L2502f4.  goto L2502f8;
  #L2502f6.  v2:= 0I;
  #L2502f8.  v3:= v6 @kind object;
  #L2502fa.  v3:= (`java.lang.Class`) v3 @kind object;
  #L2502fe.  call temp:= `getEnclosingClass`(v3) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L250304.  v3:= temp @kind object;
  #L250306.  if v3 != 0 then goto L25030c;
  #L25030a.  goto L25030e;
  #L25030c.  v0:= 0I;
  #L25030e.  if v2 != v0 then goto L250314;
  #L250312.  goto L250320;
  #L250314.  v5:= new `java.lang.IllegalArgumentException`;
  #L250318.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L25031e.  throw v5;
  #L250320.  v4.`retrofit.Types$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L250324.  v4.`retrofit.Types$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L250328.  call temp:= `clone`(v7) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L25032e.  v5:= temp @kind object;
  #L250330.  v5:= (`java.lang.reflect.Type`[]) v5 @kind object;
  #L250334.  v4.`retrofit.Types$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] := v5 @kind object;
  #L250338.  v5:= v4.`retrofit.Types$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L25033c.  v6:= length @variable v5;
  #L25033e.  if v1 >= v6 then goto L250362;
  #L250342.  v7:= v5[v1] @kind object;
  #L250346.  if v7 == 0 then goto L250356;
  #L25034a.  call `access$000`(v7) @signature `Lretrofit/Types;.access$000:(Ljava/lang/reflect/Type;)V` @kind static;
  #L250350.  v1:= v1 + 1;
  #L250354.  goto L25033e;
  #L250356.  v5:= new `java.lang.NullPointerException`;
  #L25035a.  call `<init>`(v5) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L250360.  throw v5;
  #L250362.  return @kind void;
}
procedure `boolean` `equals`(`retrofit.Types$ParameterizedTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lretrofit/Types$ParameterizedTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250168.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L25016c.  if v0 == 0 then goto L250184;
  #L250170.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L250174.  call temp:= `equals`(v1, v2) @signature `Lretrofit/Types;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L25017a.  v2:= temp;
  #L25017c.  if v2 == 0 then goto L250184;
  #L250180.  v2:= 1I;
  #L250182.  goto L250186;
  #L250184.  v2:= 0I;
  #L250186.  return v2;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`retrofit.Types$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit/Types$ParameterizedTypeImpl;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2502b8.  v0:= v1.`retrofit.Types$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L2502bc.  call temp:= `clone`(v0) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L2502c2.  v0:= temp @kind object;
  #L2502c4.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L2502c8.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`retrofit.Types$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit/Types$ParameterizedTypeImpl;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250288.  v0:= v1.`retrofit.Types$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L25028c.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`retrofit.Types$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit/Types$ParameterizedTypeImpl;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2502a0.  v0:= v1.`retrofit.Types$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L2502a4.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit.Types$ParameterizedTypeImpl` v2 @kind this) @signature `Lretrofit/Types$ParameterizedTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L250198.  v0:= v2.`retrofit.Types$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L25019c.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L2501a2.  v0:= temp;
  #L2501a4.  v1:= v2.`retrofit.Types$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L2501a8.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2501ae.  v1:= temp;
  #L2501b0.  v0:= v0 ^~ v1 @kind int;
  #L2501b2.  v1:= v2.`retrofit.Types$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L2501b6.  call temp:= `access$100`(v1) @signature `Lretrofit/Types;.access$100:(Ljava/lang/Object;)I` @kind static;
  #L2501bc.  v1:= temp;
  #L2501be.  v0:= v0 ^~ v1 @kind int;
  #L2501c0.  return v0;
}
procedure `java.lang.String` `toString`(`retrofit.Types$ParameterizedTypeImpl` v4 @kind this) @signature `Lretrofit/Types$ParameterizedTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2501d4.  v0:= new `java.lang.StringBuilder`;
  #L2501d8.  v1:= v4.`retrofit.Types$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L2501dc.  v1:= length @variable v1;
  #L2501de.  v2:= 1I;
  #L2501e0.  v1:= v1 + v2 @kind int;
  #L2501e2.  v1:= v1 * 30;
  #L2501e6.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2501ec.  v1:= v4.`retrofit.Types$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L2501f0.  call temp:= `typeToString`(v1) @signature `Lretrofit/Types;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L2501f6.  v1:= temp @kind object;
  #L2501f8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2501fe.  v1:= v4.`retrofit.Types$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L250202.  v1:= length @variable v1;
  #L250204.  if v1 != 0 then goto L250212;
  #L250208.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L25020e.  v0:= temp @kind object;
  #L250210.  return v0 @kind object;
  #L250212.  v1:= "<" @kind object;
  #L250216.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25021c.  v1:= v4.`retrofit.Types$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L250220.  v3:= 0I;
  #L250222.  v1:= v1[v3] @kind object;
  #L250226.  call temp:= `typeToString`(v1) @signature `Lretrofit/Types;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L25022c.  v1:= temp @kind object;
  #L25022e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L250234.  v1:= v4.`retrofit.Types$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L250238.  v1:= length @variable v1;
  #L25023a.  if v2 >= v1 then goto L250264;
  #L25023e.  v1:= ", " @kind object;
  #L250242.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L250248.  v1:= v4.`retrofit.Types$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L25024c.  v1:= v1[v2] @kind object;
  #L250250.  call temp:= `typeToString`(v1) @signature `Lretrofit/Types;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L250256.  v1:= temp @kind object;
  #L250258.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25025e.  v2:= v2 + 1;
  #L250262.  goto L250234;
  #L250264.  v1:= ">" @kind object;
  #L250268.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25026e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L250274.  v0:= temp @kind object;
  #L250276.  return v0 @kind object;
}
