record `retrofit.Types` @kind class @AccessFlag FINAL {
}
global `java.lang.reflect.Type`[] `@@retrofit.Types.EMPTY_TYPE_ARRAY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit/Types;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L250c2c.  v0:= 0I;
  #L250c2e.  v0:= new `java.lang.reflect.Type`[v0];
  #L250c32.  `@@retrofit.Types.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] := v0 @kind object;
  #L250c36.  return @kind void;
}
procedure `void` `<init>`(`retrofit.Types` v0 @kind this) @signature `Lretrofit/Types;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L250c48.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L250c4e.  return @kind void;
}
procedure `void` `access$000`(`java.lang.reflect.Type` v0 @kind object) @signature `Lretrofit/Types;.access$000:(Ljava/lang/reflect/Type;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L250c60.  call `checkNotPrimitive`(v0) @signature `Lretrofit/Types;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L250c66.  return @kind void;
}
procedure `int` `access$100`(`java.lang.Object` v0 @kind object) @signature `Lretrofit/Types;.access$100:(Ljava/lang/Object;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L250728.  call temp:= `hashCodeOrZero`(v0) @signature `Lretrofit/Types;.hashCodeOrZero:(Ljava/lang/Object;)I` @kind static;
  #L25072e.  v0:= temp;
  #L250730.  return v0;
}
procedure `java.lang.reflect.Type`[] `access$200`() @signature `Lretrofit/Types;.access$200:()[Ljava/lang/reflect/Type;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L250c14.  v0:= `@@retrofit.Types.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L250c18.  return v0 @kind object;
}
procedure `void` `checkNotPrimitive`(`java.lang.reflect.Type` v1 @kind object) @signature `Lretrofit/Types;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L250c78.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L250c7c.  if v0 == 0 then goto L250c9e;
  #L250c80.  v1:= (`java.lang.Class`) v1 @kind object;
  #L250c84.  call temp:= `isPrimitive`(v1) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L250c8a.  v1:= temp;
  #L250c8c.  if v1 != 0 then goto L250c92;
  #L250c90.  goto L250c9e;
  #L250c92.  v1:= new `java.lang.IllegalArgumentException`;
  #L250c96.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L250c9c.  throw v1;
  #L250c9e.  return @kind void;
}
procedure `java.lang.Class` `declaringClassOf`(`java.lang.reflect.TypeVariable` v1 @kind object) @signature `Lretrofit/Types;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2507a4.  call temp:= `getGenericDeclaration`(v1) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L2507aa.  v1:= temp @kind object;
  #L2507ac.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L2507b0.  if v0 == 0 then goto L2507ba;
  #L2507b4.  v1:= (`java.lang.Class`) v1 @kind object;
  #L2507b8.  goto L2507bc;
  #L2507ba.  v1:= 0I;
  #L2507bc.  return v1 @kind object;
}
procedure `boolean` `equal`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lretrofit/Types;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PRIVATE_STATIC {
    temp;

  #L250578.  if v0 == v1 then goto L250592;
  #L25057c.  if v0 == 0 then goto L25058e;
  #L250580.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L250586.  v0:= temp;
  #L250588.  if v0 == 0 then goto L25058e;
  #L25058c.  goto L250592;
  #L25058e.  v0:= 0I;
  #L250590.  goto L250594;
  #L250592.  v0:= 1I;
  #L250594.  return v0;
}
procedure `boolean` `equals`(`java.lang.reflect.Type` v4 @kind object, `java.lang.reflect.Type` v5 @kind object) @signature `Lretrofit/Types;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2505a8.  v0:= 1I;
  #L2505aa.  if v4 != v5 then goto L2505b0;
  #L2505ae.  return v0;
  #L2505b0.  v1:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L2505b4.  if v1 == 0 then goto L2505c2;
  #L2505b8.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2505be.  v4:= temp;
  #L2505c0.  return v4;
  #L2505c2.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L2505c6.  v2:= 0I;
  #L2505c8.  if v1 == 0 then goto L250638;
  #L2505cc.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L2505d0.  if v1 != 0 then goto L2505d6;
  #L2505d4.  return v2;
  #L2505d6.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L2505da.  v5:= (`java.lang.reflect.ParameterizedType`) v5 @kind object;
  #L2505de.  call temp:= `getOwnerType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L2505e4.  v1:= temp @kind object;
  #L2505e6.  call temp:= `getOwnerType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L2505ec.  v3:= temp @kind object;
  #L2505ee.  call temp:= `equal`(v1, v3) @signature `Lretrofit/Types;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2505f4.  v1:= temp;
  #L2505f6.  if v1 == 0 then goto L250634;
  #L2505fa.  call temp:= `getRawType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L250600.  v1:= temp @kind object;
  #L250602.  call temp:= `getRawType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L250608.  v3:= temp @kind object;
  #L25060a.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L250610.  v1:= temp;
  #L250612.  if v1 == 0 then goto L250634;
  #L250616.  call temp:= `getActualTypeArguments`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L25061c.  v4:= temp @kind object;
  #L25061e.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L250624.  v5:= temp @kind object;
  #L250626.  call temp:= `equals`(v4, v5) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L25062c.  v4:= temp;
  #L25062e.  if v4 == 0 then goto L250634;
  #L250632.  goto L250636;
  #L250634.  v0:= 0I;
  #L250636.  return v0;
  #L250638.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L25063c.  if v1 == 0 then goto L25066c;
  #L250640.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L250644.  if v0 != 0 then goto L25064a;
  #L250648.  return v2;
  #L25064a.  v4:= (`java.lang.reflect.GenericArrayType`) v4 @kind object;
  #L25064e.  v5:= (`java.lang.reflect.GenericArrayType`) v5 @kind object;
  #L250652.  call temp:= `getGenericComponentType`(v4) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L250658.  v4:= temp @kind object;
  #L25065a.  call temp:= `getGenericComponentType`(v5) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L250660.  v5:= temp @kind object;
  #L250662.  call temp:= `equals`(v4, v5) @signature `Lretrofit/Types;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L250668.  v4:= temp;
  #L25066a.  return v4;
  #L25066c.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L250670.  if v1 == 0 then goto L2506c4;
  #L250674.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L250678.  if v1 != 0 then goto L25067e;
  #L25067c.  return v2;
  #L25067e.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L250682.  v5:= (`java.lang.reflect.WildcardType`) v5 @kind object;
  #L250686.  call temp:= `getUpperBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L25068c.  v1:= temp @kind object;
  #L25068e.  call temp:= `getUpperBounds`(v5) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L250694.  v3:= temp @kind object;
  #L250696.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L25069c.  v1:= temp;
  #L25069e.  if v1 == 0 then goto L2506c0;
  #L2506a2.  call temp:= `getLowerBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L2506a8.  v4:= temp @kind object;
  #L2506aa.  call temp:= `getLowerBounds`(v5) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L2506b0.  v5:= temp @kind object;
  #L2506b2.  call temp:= `equals`(v4, v5) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L2506b8.  v4:= temp;
  #L2506ba.  if v4 == 0 then goto L2506c0;
  #L2506be.  goto L2506c2;
  #L2506c0.  v0:= 0I;
  #L2506c2.  return v0;
  #L2506c4.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L2506c8.  if v1 == 0 then goto L250714;
  #L2506cc.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L2506d0.  if v1 != 0 then goto L2506d6;
  #L2506d4.  return v2;
  #L2506d6.  v4:= (`java.lang.reflect.TypeVariable`) v4 @kind object;
  #L2506da.  v5:= (`java.lang.reflect.TypeVariable`) v5 @kind object;
  #L2506de.  call temp:= `getGenericDeclaration`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L2506e4.  v1:= temp @kind object;
  #L2506e6.  call temp:= `getGenericDeclaration`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L2506ec.  v3:= temp @kind object;
  #L2506ee.  if v1 != v3 then goto L250710;
  #L2506f2.  call temp:= `getName`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L2506f8.  v4:= temp @kind object;
  #L2506fa.  call temp:= `getName`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L250700.  v5:= temp @kind object;
  #L250702.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L250708.  v4:= temp;
  #L25070a.  if v4 == 0 then goto L250710;
  #L25070e.  goto L250712;
  #L250710.  v0:= 0I;
  #L250712.  return v0;
  #L250714.  return v2;
}
procedure `java.lang.reflect.Type` `getGenericSupertype`(`java.lang.reflect.Type` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lretrofit/Types;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L250904.  if v5 != v4 then goto L25090a;
  #L250908.  return v3 @kind object;
  #L25090a.  call temp:= `isInterface`(v5) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L250910.  v3:= temp;
  #L250912.  if v3 == 0 then goto L25096c;
  #L250916.  call temp:= `getInterfaces`(v4) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L25091c.  v3:= temp @kind object;
  #L25091e.  v0:= 0I;
  #L250920.  v1:= length @variable v3;
  #L250922.  if v0 >= v1 then goto L25096c;
  #L250926.  v2:= v3[v0] @kind object;
  #L25092a.  if v2 != v5 then goto L25093c;
  #L25092e.  call temp:= `getGenericInterfaces`(v4) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L250934.  v3:= temp @kind object;
  #L250936.  v3:= v3[v0] @kind object;
  #L25093a.  return v3 @kind object;
  #L25093c.  v2:= v3[v0] @kind object;
  #L250940.  call temp:= `isAssignableFrom`(v5, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L250946.  v2:= temp;
  #L250948.  if v2 == 0 then goto L250966;
  #L25094c.  call temp:= `getGenericInterfaces`(v4) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L250952.  v4:= temp @kind object;
  #L250954.  v4:= v4[v0] @kind object;
  #L250958.  v3:= v3[v0] @kind object;
  #L25095c.  call temp:= `getGenericSupertype`(v4, v3, v5) @signature `Lretrofit/Types;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L250962.  v3:= temp @kind object;
  #L250964.  return v3 @kind object;
  #L250966.  v0:= v0 + 1;
  #L25096a.  goto L250922;
  #L25096c.  call temp:= `isInterface`(v4) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L250972.  v3:= temp;
  #L250974.  if v3 != 0 then goto L2509b8;
  #L250978.  v3:= constclass @type ^`java.lang.Object` @kind object;
  #L25097c.  if v4 == v3 then goto L2509b8;
  #L250980.  call temp:= `getSuperclass`(v4) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L250986.  v3:= temp @kind object;
  #L250988.  if v3 != v5 then goto L250996;
  #L25098c.  call temp:= `getGenericSuperclass`(v4) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L250992.  v3:= temp @kind object;
  #L250994.  return v3 @kind object;
  #L250996.  call temp:= `isAssignableFrom`(v5, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L25099c.  v0:= temp;
  #L25099e.  if v0 == 0 then goto L2509b4;
  #L2509a2.  call temp:= `getGenericSuperclass`(v4) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L2509a8.  v4:= temp @kind object;
  #L2509aa.  call temp:= `getGenericSupertype`(v4, v3, v5) @signature `Lretrofit/Types;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L2509b0.  v3:= temp @kind object;
  #L2509b2.  return v3 @kind object;
  #L2509b4.  v4:= v3 @kind object;
  #L2509b6.  goto L250978;
  #L2509b8.  return v5 @kind object;
}
procedure `java.lang.Class` `getRawType`(`java.lang.reflect.Type` v4 @kind object) @signature `Lretrofit/Types;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2507d0.  v0:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L2507d4.  if v0 == 0 then goto L2507de;
  #L2507d8.  v4:= (`java.lang.Class`) v4 @kind object;
  #L2507dc.  return v4 @kind object;
  #L2507de.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L2507e2.  if v0 == 0 then goto L25080c;
  #L2507e6.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L2507ea.  call temp:= `getRawType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L2507f0.  v4:= temp @kind object;
  #L2507f2.  v0:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L2507f6.  if v0 == 0 then goto L250800;
  #L2507fa.  v4:= (`java.lang.Class`) v4 @kind object;
  #L2507fe.  return v4 @kind object;
  #L250800.  v4:= new `java.lang.IllegalArgumentException`;
  #L250804.  call `<init>`(v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L25080a.  throw v4;
  #L25080c.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L250810.  v1:= 0I;
  #L250812.  if v0 == 0 then goto L25083c;
  #L250816.  v4:= (`java.lang.reflect.GenericArrayType`) v4 @kind object;
  #L25081a.  call temp:= `getGenericComponentType`(v4) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L250820.  v4:= temp @kind object;
  #L250822.  call temp:= `getRawType`(v4) @signature `Lretrofit/Types;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L250828.  v4:= temp @kind object;
  #L25082a.  call temp:= `newInstance`(v4, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L250830.  v4:= temp @kind object;
  #L250832.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L250838.  v4:= temp @kind object;
  #L25083a.  return v4 @kind object;
  #L25083c.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L250840.  if v0 == 0 then goto L25084a;
  #L250844.  v4:= constclass @type ^`java.lang.Object` @kind object;
  #L250848.  return v4 @kind object;
  #L25084a.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L25084e.  if v0 == 0 then goto L25086c;
  #L250852.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L250856.  call temp:= `getUpperBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L25085c.  v4:= temp @kind object;
  #L25085e.  v4:= v4[v1] @kind object;
  #L250862.  call temp:= `getRawType`(v4) @signature `Lretrofit/Types;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L250868.  v4:= temp @kind object;
  #L25086a.  return v4 @kind object;
  #L25086c.  if v4 != 0 then goto L250876;
  #L250870.  v0:= "null" @kind object;
  #L250874.  goto L250886;
  #L250876.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L25087c.  v0:= temp @kind object;
  #L25087e.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L250884.  v0:= temp @kind object;
  #L250886.  v1:= new `java.lang.IllegalArgumentException`;
  #L25088a.  v2:= new `java.lang.StringBuilder`;
  #L25088e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L250894.  v3:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L250898.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25089e.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2508a4.  v4:= "> is of type " @kind object;
  #L2508a8.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2508ae.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2508b4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2508ba.  v4:= temp @kind object;
  #L2508bc.  call `<init>`(v1, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2508c2.  throw v1;
}
procedure `java.lang.reflect.Type` `getSupertype`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lretrofit/Types;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2509cc.  call temp:= `isAssignableFrom`(v3, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L2509d2.  v0:= temp;
  #L2509d4.  if v0 == 0 then goto L2509ea;
  #L2509d8.  call temp:= `getGenericSupertype`(v1, v2, v3) @signature `Lretrofit/Types;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L2509de.  v3:= temp @kind object;
  #L2509e0.  call temp:= `resolve`(v1, v2, v3) @signature `Lretrofit/Types;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L2509e6.  v1:= temp @kind object;
  #L2509e8.  return v1 @kind object;
  #L2509ea.  v1:= new `java.lang.IllegalArgumentException`;
  #L2509ee.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L2509f4.  throw v1;
}
procedure `int` `hashCodeOrZero`(`java.lang.Object` v0 @kind object) @signature `Lretrofit/Types;.hashCodeOrZero:(Ljava/lang/Object;)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L250744.  if v0 == 0 then goto L250752;
  #L250748.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L25074e.  v0:= temp;
  #L250750.  goto L250754;
  #L250752.  v0:= 0I;
  #L250754.  return v0;
}
procedure `int` `indexOf`(`java.lang.Object`[] v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lretrofit/Types;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L250768.  v0:= 0I;
  #L25076a.  v1:= length @variable v2;
  #L25076c.  if v0 >= v1 then goto L250788;
  #L250770.  v1:= v2[v0] @kind object;
  #L250774.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L25077a.  v1:= temp;
  #L25077c.  if v1 == 0 then goto L250782;
  #L250780.  return v0;
  #L250782.  v0:= v0 + 1;
  #L250786.  goto L25076a;
  #L250788.  v2:= new `java.util.NoSuchElementException`;
  #L25078c.  call `<init>`(v2) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L250792.  throw v2;
}
procedure `java.lang.reflect.Type` `resolve`(`java.lang.reflect.Type` v8 @kind object, `java.lang.Class` v9 @kind object, `java.lang.reflect.Type` v10 @kind object) @signature `Lretrofit/Types;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L250a08.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L250a0c.  if v0 == 0 then goto L250a26;
  #L250a10.  v10:= (`java.lang.reflect.TypeVariable`) v10 @kind object;
  #L250a14.  call temp:= `resolveTypeVariable`(v8, v9, v10) @signature `Lretrofit/Types;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @kind static;
  #L250a1a.  v0:= temp @kind object;
  #L250a1c.  if v0 != v10 then goto L250a22;
  #L250a20.  return v0 @kind object;
  #L250a22.  v10:= v0 @kind object;
  #L250a24.  goto L250a08;
  #L250a26.  v0:= instanceof @variable v10 @type ^`java.lang.Class` @kind boolean;
  #L250a2a.  if v0 == 0 then goto L250a62;
  #L250a2e.  v0:= v10 @kind object;
  #L250a30.  v0:= (`java.lang.Class`) v0 @kind object;
  #L250a34.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L250a3a.  v1:= temp;
  #L250a3c.  if v1 == 0 then goto L250a62;
  #L250a40.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L250a46.  v10:= temp @kind object;
  #L250a48.  call temp:= `resolve`(v8, v9, v10) @signature `Lretrofit/Types;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L250a4e.  v8:= temp @kind object;
  #L250a50.  if v10 != v8 then goto L250a56;
  #L250a54.  goto L250a60;
  #L250a56.  v0:= new `retrofit.Types$GenericArrayTypeImpl`;
  #L250a5a.  call `<init>`(v0, v8) @signature `Lretrofit/Types$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L250a60.  return v0 @kind object;
  #L250a62.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L250a66.  if v0 == 0 then goto L250a90;
  #L250a6a.  v10:= (`java.lang.reflect.GenericArrayType`) v10 @kind object;
  #L250a6e.  call temp:= `getGenericComponentType`(v10) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L250a74.  v0:= temp @kind object;
  #L250a76.  call temp:= `resolve`(v8, v9, v0) @signature `Lretrofit/Types;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L250a7c.  v8:= temp @kind object;
  #L250a7e.  if v0 != v8 then goto L250a84;
  #L250a82.  goto L250a8e;
  #L250a84.  v10:= new `retrofit.Types$GenericArrayTypeImpl`;
  #L250a88.  call `<init>`(v10, v8) @signature `Lretrofit/Types$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L250a8e.  return v10 @kind object;
  #L250a90.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L250a94.  v1:= 1I;
  #L250a96.  v2:= 0I;
  #L250a98.  if v0 == 0 then goto L250b16;
  #L250a9c.  v10:= (`java.lang.reflect.ParameterizedType`) v10 @kind object;
  #L250aa0.  call temp:= `getOwnerType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L250aa6.  v0:= temp @kind object;
  #L250aa8.  call temp:= `resolve`(v8, v9, v0) @signature `Lretrofit/Types;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L250aae.  v3:= temp @kind object;
  #L250ab0.  if v3 == v0 then goto L250ab8;
  #L250ab4.  v0:= 1I;
  #L250ab6.  goto L250aba;
  #L250ab8.  v0:= 0I;
  #L250aba.  call temp:= `getActualTypeArguments`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L250ac0.  v4:= temp @kind object;
  #L250ac2.  v5:= length @variable v4;
  #L250ac4.  if v2 >= v5 then goto L250afa;
  #L250ac8.  v6:= v4[v2] @kind object;
  #L250acc.  call temp:= `resolve`(v8, v9, v6) @signature `Lretrofit/Types;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L250ad2.  v6:= temp @kind object;
  #L250ad4.  v7:= v4[v2] @kind object;
  #L250ad8.  if v6 == v7 then goto L250af4;
  #L250adc.  if v0 != 0 then goto L250af0;
  #L250ae0.  call temp:= `clone`(v4) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L250ae6.  v0:= temp @kind object;
  #L250ae8.  v4:= v0 @kind object;
  #L250aea.  v4:= (`java.lang.reflect.Type`[]) v4 @kind object;
  #L250aee.  v0:= 1I;
  #L250af0.  v4[v2]:= v6 @kind object;
  #L250af4.  v2:= v2 + 1;
  #L250af8.  goto L250ac4;
  #L250afa.  if v0 == 0 then goto L250b12;
  #L250afe.  v8:= new `retrofit.Types$ParameterizedTypeImpl`;
  #L250b02.  call temp:= `getRawType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L250b08.  v9:= temp @kind object;
  #L250b0a.  call `<init>`(v8, v3, v9, v4) @signature `Lretrofit/Types$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L250b10.  goto L250b14;
  #L250b12.  v8:= v10 @kind object;
  #L250b14.  return v8 @kind object;
  #L250b16.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L250b1a.  if v0 == 0 then goto L250b9e;
  #L250b1e.  v10:= (`java.lang.reflect.WildcardType`) v10 @kind object;
  #L250b22.  call temp:= `getLowerBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L250b28.  v0:= temp @kind object;
  #L250b2a.  call temp:= `getUpperBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L250b30.  v3:= temp @kind object;
  #L250b32.  v4:= length @variable v0;
  #L250b34.  if v4 != v1 then goto L250b6c;
  #L250b38.  v3:= v0[v2] @kind object;
  #L250b3c.  call temp:= `resolve`(v8, v9, v3) @signature `Lretrofit/Types;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L250b42.  v8:= temp @kind object;
  #L250b44.  v9:= v0[v2] @kind object;
  #L250b48.  if v8 == v9 then goto L250b9e;
  #L250b4c.  v9:= new `retrofit.Types$WildcardTypeImpl`;
  #L250b50.  v10:= new `java.lang.reflect.Type`[v1];
  #L250b54.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L250b58.  v10[v2]:= v0 @kind object;
  #L250b5c.  v0:= new `java.lang.reflect.Type`[v1];
  #L250b60.  v0[v2]:= v8 @kind object;
  #L250b64.  call `<init>`(v9, v10, v0) @signature `Lretrofit/Types$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L250b6a.  return v9 @kind object;
  #L250b6c.  v0:= length @variable v3;
  #L250b6e.  if v0 != v1 then goto L250b9e;
  #L250b72.  v0:= v3[v2] @kind object;
  #L250b76.  call temp:= `resolve`(v8, v9, v0) @signature `Lretrofit/Types;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L250b7c.  v8:= temp @kind object;
  #L250b7e.  v9:= v3[v2] @kind object;
  #L250b82.  if v8 == v9 then goto L250b9e;
  #L250b86.  v9:= new `retrofit.Types$WildcardTypeImpl`;
  #L250b8a.  v10:= new `java.lang.reflect.Type`[v1];
  #L250b8e.  v10[v2]:= v8 @kind object;
  #L250b92.  v8:= `@@retrofit.Types.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L250b96.  call `<init>`(v9, v10, v8) @signature `Lretrofit/Types$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L250b9c.  return v9 @kind object;
  #L250b9e.  return v10 @kind object;
  #L250ba0.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L250ba2.  throw v8;
  catch `java.lang.Throwable` @[L250b76..L250b7e] goto L250ba0;
}
procedure `java.lang.reflect.Type` `resolveTypeVariable`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.reflect.TypeVariable` v3 @kind object) @signature `Lretrofit/Types;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L250bc0.  call temp:= `declaringClassOf`(v3) @signature `Lretrofit/Types;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @kind static;
  #L250bc6.  v0:= temp @kind object;
  #L250bc8.  if v0 != 0 then goto L250bce;
  #L250bcc.  return v3 @kind object;
  #L250bce.  call temp:= `getGenericSupertype`(v1, v2, v0) @signature `Lretrofit/Types;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L250bd4.  v1:= temp @kind object;
  #L250bd6.  v2:= instanceof @variable v1 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L250bda.  if v2 == 0 then goto L250c00;
  #L250bde.  call temp:= `getTypeParameters`(v0) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L250be4.  v2:= temp @kind object;
  #L250be6.  call temp:= `indexOf`(v2, v3) @signature `Lretrofit/Types;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L250bec.  v2:= temp;
  #L250bee.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L250bf2.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L250bf8.  v1:= temp @kind object;
  #L250bfa.  v1:= v1[v2] @kind object;
  #L250bfe.  return v1 @kind object;
  #L250c00.  return v3 @kind object;
}
procedure `java.lang.String` `typeToString`(`java.lang.reflect.Type` v1 @kind object) @signature `Lretrofit/Types;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2508d4.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L2508d8.  if v0 == 0 then goto L2508ea;
  #L2508dc.  v1:= (`java.lang.Class`) v1 @kind object;
  #L2508e0.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2508e6.  v1:= temp @kind object;
  #L2508e8.  goto L2508f2;
  #L2508ea.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2508f0.  v1:= temp @kind object;
  #L2508f2.  return v1 @kind object;
}
