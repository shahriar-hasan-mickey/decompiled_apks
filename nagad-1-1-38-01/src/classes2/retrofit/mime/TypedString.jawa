record `retrofit.mime.TypedString` @kind class @AccessFlag PUBLIC extends `retrofit.mime.TypedByteArray` @kind class {
}
procedure `void` `<init>`(`retrofit.mime.TypedString` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lretrofit/mime/TypedString;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L252ebc.  call temp:= `convertToBytes`(v2) @signature `Lretrofit/mime/TypedString;.convertToBytes:(Ljava/lang/String;)[B` @kind static;
  #L252ec2.  v2:= temp @kind object;
  #L252ec4.  v0:= "text/plain; charset=UTF-8" @kind object;
  #L252ec8.  call `<init>`(v1, v0, v2) @signature `Lretrofit/mime/TypedByteArray;.<init>:(Ljava/lang/String;[B)V` @kind direct;
  #L252ece.  return @kind void;
}
procedure `byte`[] `convertToBytes`(`java.lang.String` v1 @kind object) @signature `Lretrofit/mime/TypedString;.convertToBytes:(Ljava/lang/String;)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L252e0c.  v0:= "UTF-8" @kind object;
  #L252e10.  call temp:= `getBytes`(v1, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L252e16.  v1:= temp @kind object;
  #L252e18.  return v1 @kind object;
  #L252e1a.  v1:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L252e1c.  v0:= new `java.lang.RuntimeException`;
  #L252e20.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L252e26.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[L252e0c..L252e18] goto L252e1a;
}
procedure `java.lang.String` `toString`(`retrofit.mime.TypedString` v4 @kind this) @signature `Lretrofit/mime/TypedString;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L252e48.  v0:= new `java.lang.StringBuilder`;
  #L252e4c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L252e52.  v1:= "TypedString[" @kind object;
  #L252e56.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252e5c.  v1:= new `java.lang.String`;
  #L252e60.  call temp:= `getBytes`(v4) @signature `Lretrofit/mime/TypedByteArray;.getBytes:()[B` @kind virtual;
  #L252e66.  v2:= temp @kind object;
  #L252e68.  v3:= "UTF-8" @kind object;
  #L252e6c.  call `<init>`(v1, v2, v3) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L252e72.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252e78.  v1:= "]" @kind object;
  #L252e7c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252e82.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L252e88.  v0:= temp @kind object;
  #L252e8a.  return v0 @kind object;
  #L252e8c.  v0:= new `java.lang.AssertionError`;
  #L252e90.  v1:= "Must be able to decode UTF-8" @kind object;
  #L252e94.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L252e9a.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[L252e48..L252e8a] goto L252e8c;
}
