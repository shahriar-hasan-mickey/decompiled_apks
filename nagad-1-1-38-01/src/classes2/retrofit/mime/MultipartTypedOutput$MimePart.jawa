record `retrofit.mime.MultipartTypedOutput$MimePart` @kind class @AccessFlag FINAL {
  `retrofit.mime.TypedOutput` `retrofit.mime.MultipartTypedOutput$MimePart.body` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `retrofit.mime.MultipartTypedOutput$MimePart.boundary` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit.mime.MultipartTypedOutput$MimePart.isBuilt` @AccessFlag PRIVATE;
  `boolean` `retrofit.mime.MultipartTypedOutput$MimePart.isFirst` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `retrofit.mime.MultipartTypedOutput$MimePart.name` @AccessFlag PRIVATE_FINAL;
  `byte`[] `retrofit.mime.MultipartTypedOutput$MimePart.partBoundary` @AccessFlag PRIVATE;
  `byte`[] `retrofit.mime.MultipartTypedOutput$MimePart.partHeader` @AccessFlag PRIVATE;
  `java.lang.String` `retrofit.mime.MultipartTypedOutput$MimePart.transferEncoding` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit.mime.MultipartTypedOutput$MimePart` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object, `retrofit.mime.TypedOutput` v3 @kind object, `java.lang.String` v4 @kind object, `boolean` v5 ) @signature `Lretrofit/mime/MultipartTypedOutput$MimePart;.<init>:(Ljava/lang/String;Ljava/lang/String;Lretrofit/mime/TypedOutput;Ljava/lang/String;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L252540.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L252546.  v0.`retrofit.mime.MultipartTypedOutput$MimePart.name` @type ^`java.lang.String` := v1 @kind object;
  #L25254a.  v0.`retrofit.mime.MultipartTypedOutput$MimePart.transferEncoding` @type ^`java.lang.String` := v2 @kind object;
  #L25254e.  v0.`retrofit.mime.MultipartTypedOutput$MimePart.body` @type ^`retrofit.mime.TypedOutput` := v3 @kind object;
  #L252552.  v0.`retrofit.mime.MultipartTypedOutput$MimePart.isFirst` @type ^`boolean` := v5 @kind boolean;
  #L252556.  v0.`retrofit.mime.MultipartTypedOutput$MimePart.boundary` @type ^`java.lang.String` := v4 @kind object;
  #L25255a.  return @kind void;
}
procedure `void` `build`(`retrofit.mime.MultipartTypedOutput$MimePart` v3 @kind this) @signature `Lretrofit/mime/MultipartTypedOutput$MimePart;.build:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L25256c.  v0:= v3.`retrofit.mime.MultipartTypedOutput$MimePart.isBuilt` @type ^`boolean` @kind boolean;
  #L252570.  if v0 == 0 then goto L252576;
  #L252574.  return @kind void;
  #L252576.  v0:= v3.`retrofit.mime.MultipartTypedOutput$MimePart.boundary` @type ^`java.lang.String` @kind object;
  #L25257a.  v1:= v3.`retrofit.mime.MultipartTypedOutput$MimePart.isFirst` @type ^`boolean` @kind boolean;
  #L25257e.  v2:= 0I;
  #L252580.  call temp:= `access$000`(v0, v1, v2) @signature `Lretrofit/mime/MultipartTypedOutput;.access$000:(Ljava/lang/String;ZZ)[B` @kind static;
  #L252586.  v0:= temp @kind object;
  #L252588.  v3.`retrofit.mime.MultipartTypedOutput$MimePart.partBoundary` @type ^`byte`[] := v0 @kind object;
  #L25258c.  v0:= v3.`retrofit.mime.MultipartTypedOutput$MimePart.name` @type ^`java.lang.String` @kind object;
  #L252590.  v1:= v3.`retrofit.mime.MultipartTypedOutput$MimePart.transferEncoding` @type ^`java.lang.String` @kind object;
  #L252594.  v2:= v3.`retrofit.mime.MultipartTypedOutput$MimePart.body` @type ^`retrofit.mime.TypedOutput` @kind object;
  #L252598.  call temp:= `access$100`(v0, v1, v2) @signature `Lretrofit/mime/MultipartTypedOutput;.access$100:(Ljava/lang/String;Ljava/lang/String;Lretrofit/mime/TypedOutput;)[B` @kind static;
  #L25259e.  v0:= temp @kind object;
  #L2525a0.  v3.`retrofit.mime.MultipartTypedOutput$MimePart.partHeader` @type ^`byte`[] := v0 @kind object;
  #L2525a4.  v0:= 1I;
  #L2525a6.  v3.`retrofit.mime.MultipartTypedOutput$MimePart.isBuilt` @type ^`boolean` := v0 @kind boolean;
  #L2525aa.  return @kind void;
}
procedure `long` `size`(`retrofit.mime.MultipartTypedOutput$MimePart` v5 @kind this) @signature `Lretrofit/mime/MultipartTypedOutput$MimePart;.size:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2524ec.  call `build`(v5) @signature `Lretrofit/mime/MultipartTypedOutput$MimePart;.build:()V` @kind direct;
  #L2524f2.  v0:= v5.`retrofit.mime.MultipartTypedOutput$MimePart.body` @type ^`retrofit.mime.TypedOutput` @kind object;
  #L2524f6.  call temp:= `length`(v0) @signature `Lretrofit/mime/TypedOutput;.length:()J` @kind interface;
  #L2524fc.  v0:= temp @kind wide;
  #L2524fe.  v2:= -1L;
  #L252502.  v4:= lcmp(v0, v2);
  #L252506.  if v4 <= 0 then goto L25252c;
  #L25250a.  v0:= v5.`retrofit.mime.MultipartTypedOutput$MimePart.body` @type ^`retrofit.mime.TypedOutput` @kind object;
  #L25250e.  call temp:= `length`(v0) @signature `Lretrofit/mime/TypedOutput;.length:()J` @kind interface;
  #L252514.  v0:= temp @kind wide;
  #L252516.  v2:= v5.`retrofit.mime.MultipartTypedOutput$MimePart.partBoundary` @type ^`byte`[] @kind object;
  #L25251a.  v2:= length @variable v2;
  #L25251c.  v2:= (`long`) v2 @kind i2l;
  #L25251e.  v0:= v0 + v2 @kind long;
  #L252520.  v2:= v5.`retrofit.mime.MultipartTypedOutput$MimePart.partHeader` @type ^`byte`[] @kind object;
  #L252524.  v2:= length @variable v2;
  #L252526.  v2:= (`long`) v2 @kind i2l;
  #L252528.  v0:= v0 + v2 @kind long;
  #L25252a.  return v0 @kind wide;
  #L25252c.  return v2 @kind wide;
}
procedure `void` `writeTo`(`retrofit.mime.MultipartTypedOutput$MimePart` v1 @kind this, `java.io.OutputStream` v2 @kind object) @signature `Lretrofit/mime/MultipartTypedOutput$MimePart;.writeTo:(Ljava/io/OutputStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2525bc.  call `build`(v1) @signature `Lretrofit/mime/MultipartTypedOutput$MimePart;.build:()V` @kind direct;
  #L2525c2.  v0:= v1.`retrofit.mime.MultipartTypedOutput$MimePart.partBoundary` @type ^`byte`[] @kind object;
  #L2525c6.  call `write`(v2, v0) @signature `Ljava/io/OutputStream;.write:([B)V` @kind virtual;
  #L2525cc.  v0:= v1.`retrofit.mime.MultipartTypedOutput$MimePart.partHeader` @type ^`byte`[] @kind object;
  #L2525d0.  call `write`(v2, v0) @signature `Ljava/io/OutputStream;.write:([B)V` @kind virtual;
  #L2525d6.  v0:= v1.`retrofit.mime.MultipartTypedOutput$MimePart.body` @type ^`retrofit.mime.TypedOutput` @kind object;
  #L2525da.  call `writeTo`(v0, v2) @signature `Lretrofit/mime/TypedOutput;.writeTo:(Ljava/io/OutputStream;)V` @kind interface;
  #L2525e0.  return @kind void;
}
