record `retrofit.RxSupport$1` @kind class @AccessFlag  extends `rx.Observable$OnSubscribe` @kind interface {
  `retrofit.RxSupport` `retrofit.RxSupport$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `retrofit.RxSupport$Invoker` `retrofit.RxSupport$1.val$invoker` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit.RxSupport$1` v0 @kind this, `retrofit.RxSupport` v1 @kind object, `retrofit.RxSupport$Invoker` v2 @kind object) @signature `Lretrofit/RxSupport$1;.<init>:(Lretrofit/RxSupport;Lretrofit/RxSupport$Invoker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24fe8c.  v0.`retrofit.RxSupport$1.this$0` @type ^`retrofit.RxSupport` := v1 @kind object;
  #L24fe90.  v0.`retrofit.RxSupport$1.val$invoker` @type ^`retrofit.RxSupport$Invoker` := v2 @kind object;
  #L24fe94.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L24fe9a.  return @kind void;
}
procedure `void` `call`(`retrofit.RxSupport$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lretrofit/RxSupport$1;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24feac.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L24feb0.  call `call`(v0, v1) @signature `Lretrofit/RxSupport$1;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L24feb6.  return @kind void;
}
procedure `void` `call`(`retrofit.RxSupport$1` v3 @kind this, `rx.Subscriber` v4 @kind object) @signature `Lretrofit/RxSupport$1;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24fec8.  v0:= new `retrofit.RequestInterceptorTape`;
  #L24fecc.  call `<init>`(v0) @signature `Lretrofit/RequestInterceptorTape;.<init>:()V` @kind direct;
  #L24fed2.  v1:= v3.`retrofit.RxSupport$1.this$0` @type ^`retrofit.RxSupport` @kind object;
  #L24fed6.  call temp:= `access$000`(v1) @signature `Lretrofit/RxSupport;.access$000:(Lretrofit/RxSupport;)Lretrofit/RequestInterceptor;` @kind static;
  #L24fedc.  v1:= temp @kind object;
  #L24fede.  call `intercept`(v1, v0) @signature `Lretrofit/RequestInterceptor;.intercept:(Lretrofit/RequestInterceptor$RequestFacade;)V` @kind interface;
  #L24fee4.  v1:= v3.`retrofit.RxSupport$1.this$0` @type ^`retrofit.RxSupport` @kind object;
  #L24fee8.  v2:= v3.`retrofit.RxSupport$1.val$invoker` @type ^`retrofit.RxSupport$Invoker` @kind object;
  #L24feec.  call temp:= `access$100`(v1, v4, v2, v0) @signature `Lretrofit/RxSupport;.access$100:(Lretrofit/RxSupport;Lrx/Subscriber;Lretrofit/RxSupport$Invoker;Lretrofit/RequestInterceptorTape;)Ljava/lang/Runnable;` @kind static;
  #L24fef2.  v0:= temp @kind object;
  #L24fef4.  v1:= new `java.util.concurrent.FutureTask`;
  #L24fef8.  v2:= 0I;
  #L24fefa.  call `<init>`(v1, v0, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L24ff00.  call temp:= `from`(v1) @signature `Lrx/subscriptions/Subscriptions;.from:(Ljava/util/concurrent/Future;)Lrx/Subscription;` @kind static;
  #L24ff06.  v0:= temp @kind object;
  #L24ff08.  call `add`(v4, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L24ff0e.  v4:= v3.`retrofit.RxSupport$1.this$0` @type ^`retrofit.RxSupport` @kind object;
  #L24ff12.  call temp:= `access$200`(v4) @signature `Lretrofit/RxSupport;.access$200:(Lretrofit/RxSupport;)Ljava/util/concurrent/Executor;` @kind static;
  #L24ff18.  v4:= temp @kind object;
  #L24ff1a.  call `execute`(v4, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L24ff20.  return @kind void;
}
