record `f.a.a.c.a` @kind class @AccessFlag PUBLIC_FINAL extends `f.a.a.c.c` @kind interface, `f.a.a.c.d` @kind interface {
  `f.a.a.e.h.b` `f.a.a.c.a.f` @AccessFlag ;
  `boolean` `f.a.a.c.a.g` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`f.a.a.c.a` v0 @kind this) @signature `Lf/a/a/c/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1ce88c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ce892.  return @kind void;
}
procedure `void` `a`(`f.a.a.c.a` v6 @kind this, `f.a.a.e.h.b` v7 @kind object) @signature `Lf/a/a/c/a;.a:(Lf/a/a/e/h/b;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ce900.  if v7 != 0 then goto L1ce906;
  #L1ce904.  return @kind void;
  #L1ce906.  v0:= 0I;
  #L1ce908.  call temp:= `keys`(v7) @signature `Lf/a/a/e/h/b;.keys:()[Ljava/lang/Object;` @kind virtual;
  #L1ce90e.  v7:= temp @kind object;
  #L1ce910.  v1:= length @variable v7;
  #L1ce912.  v2:= 0I;
  #L1ce914.  v3:= v0 @kind object;
  #L1ce916.  v0:= 0I;
  #L1ce918.  if v0 >= v1 then goto L1ce956;
  #L1ce91c.  v4:= v7[v0] @kind object;
  #L1ce920.  v5:= instanceof @variable v4 @type ^`f.a.a.c.c` @kind boolean;
  #L1ce924.  if v5 == 0 then goto L1ce950;
  #L1ce928.  v4:= (`f.a.a.c.c`) v4 @kind object;
  #L1ce92c.  call `dispose`(v4) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1ce932.  goto L1ce950;
  #L1ce934.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ce936.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/a;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L1ce93c.  if v3 != 0 then goto L1ce94a;
  #L1ce940.  v3:= new `java.util.ArrayList`;
  #L1ce944.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1ce94a.  call temp:= `add`(v3, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1ce950.  v0:= v0 + 1;
  #L1ce954.  goto L1ce918;
  #L1ce956.  if v3 == 0 then goto L1ce98a;
  #L1ce95a.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1ce960.  v7:= temp;
  #L1ce962.  v0:= 1I;
  #L1ce964.  if v7 != v0 then goto L1ce97e;
  #L1ce968.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1ce96e.  v7:= temp @kind object;
  #L1ce970.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L1ce974.  call temp:= `wrapOrThrow`(v7) @signature `Lf/a/a/e/h/a;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L1ce97a.  v7:= temp @kind object;
  #L1ce97c.  throw v7;
  #L1ce97e.  v7:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L1ce982.  call `<init>`(v7, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L1ce988.  throw v7;
  #L1ce98a.  return @kind void;
  catch `java.lang.Throwable` @[L1ce928..L1ce932] goto L1ce934;
}
procedure `boolean` `add`(`f.a.a.c.a` v1 @kind this, `f.a.a.c.c` v2 @kind object) @signature `Lf/a/a/c/a;.add:(Lf/a/a/c/c;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ce770.  v0:= "disposable is null" @kind object;
  #L1ce774.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1ce77a.  v0:= v1.`f.a.a.c.a.g` @type ^`boolean` @kind boolean;
  #L1ce77e.  if v0 != 0 then goto L1ce7b8;
  #L1ce782.  @monitorenter v1
  #L1ce784.  v0:= v1.`f.a.a.c.a.g` @type ^`boolean` @kind boolean;
  #L1ce788.  if v0 != 0 then goto L1ce7ae;
  #L1ce78c.  v0:= v1.`f.a.a.c.a.f` @type ^`f.a.a.e.h.b` @kind object;
  #L1ce790.  if v0 != 0 then goto L1ce7a2;
  #L1ce794.  v0:= new `f.a.a.e.h.b`;
  #L1ce798.  call `<init>`(v0) @signature `Lf/a/a/e/h/b;.<init>:()V` @kind direct;
  #L1ce79e.  v1.`f.a.a.c.a.f` @type ^`f.a.a.e.h.b` := v0 @kind object;
  #L1ce7a2.  call temp:= `add`(v0, v2) @signature `Lf/a/a/e/h/b;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1ce7a8.  v2:= 1I;
  #L1ce7aa.  @monitorexit v1
  #L1ce7ac.  return v2;
  #L1ce7ae.  @monitorexit v1
  #L1ce7b0.  goto L1ce7b8;
  #L1ce7b2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ce7b4.  @monitorexit v1
  #L1ce7b6.  throw v2;
  #L1ce7b8.  call `dispose`(v2) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1ce7be.  v2:= 0I;
  #L1ce7c0.  return v2;
  catch `java.lang.Throwable` @[L1ce784..L1ce7b6] goto L1ce7b2;
}
procedure `boolean` `delete`(`f.a.a.c.a` v2 @kind this, `f.a.a.c.c` v3 @kind object) @signature `Lf/a/a/c/a;.delete:(Lf/a/a/c/c;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ce7e0.  v0:= "disposable is null" @kind object;
  #L1ce7e4.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1ce7ea.  v0:= v2.`f.a.a.c.a.g` @type ^`boolean` @kind boolean;
  #L1ce7ee.  v1:= 0I;
  #L1ce7f0.  if v0 == 0 then goto L1ce7f6;
  #L1ce7f4.  return v1;
  #L1ce7f6.  @monitorenter v2
  #L1ce7f8.  v0:= v2.`f.a.a.c.a.g` @type ^`boolean` @kind boolean;
  #L1ce7fc.  if v0 == 0 then goto L1ce804;
  #L1ce800.  @monitorexit v2
  #L1ce802.  return v1;
  #L1ce804.  v0:= v2.`f.a.a.c.a.f` @type ^`f.a.a.e.h.b` @kind object;
  #L1ce808.  if v0 == 0 then goto L1ce820;
  #L1ce80c.  call temp:= `remove`(v0, v3) @signature `Lf/a/a/e/h/b;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L1ce812.  v3:= temp;
  #L1ce814.  if v3 != 0 then goto L1ce81a;
  #L1ce818.  goto L1ce820;
  #L1ce81a.  @monitorexit v2
  #L1ce81c.  v3:= 1I;
  #L1ce81e.  return v3;
  #L1ce820.  @monitorexit v2
  #L1ce822.  return v1;
  #L1ce824.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ce826.  @monitorexit v2
  #L1ce828.  throw v3;
  catch `java.lang.Throwable` @[L1ce7f8..L1ce828] goto L1ce824;
}
procedure `void` `dispose`(`f.a.a.c.a` v2 @kind this) @signature `Lf/a/a/c/a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ce8a4.  v0:= v2.`f.a.a.c.a.g` @type ^`boolean` @kind boolean;
  #L1ce8a8.  if v0 == 0 then goto L1ce8ae;
  #L1ce8ac.  return @kind void;
  #L1ce8ae.  @monitorenter v2
  #L1ce8b0.  v0:= v2.`f.a.a.c.a.g` @type ^`boolean` @kind boolean;
  #L1ce8b4.  if v0 == 0 then goto L1ce8bc;
  #L1ce8b8.  @monitorexit v2
  #L1ce8ba.  return @kind void;
  #L1ce8bc.  v0:= 1I;
  #L1ce8be.  v2.`f.a.a.c.a.g` @type ^`boolean` := v0 @kind boolean;
  #L1ce8c2.  v0:= v2.`f.a.a.c.a.f` @type ^`f.a.a.e.h.b` @kind object;
  #L1ce8c6.  v1:= 0I;
  #L1ce8c8.  v2.`f.a.a.c.a.f` @type ^`f.a.a.e.h.b` := v1 @kind object;
  #L1ce8cc.  @monitorexit v2
  #L1ce8ce.  call `a`(v2, v0) @signature `Lf/a/a/c/a;.a:(Lf/a/a/e/h/b;)V` @kind virtual;
  #L1ce8d4.  return @kind void;
  #L1ce8d6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ce8d8.  @monitorexit v2
  #L1ce8da.  throw v0;
  catch `java.lang.Throwable` @[L1ce8b0..L1ce8ce] goto L1ce8d6;
  catch `java.lang.Throwable` @[L1ce8d8..L1ce8da] goto L1ce8d6;
}
procedure `boolean` `isDisposed`(`f.a.a.c.a` v1 @kind this) @signature `Lf/a/a/c/a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ce848.  v0:= v1.`f.a.a.c.a.g` @type ^`boolean` @kind boolean;
  #L1ce84c.  return v0;
}
procedure `boolean` `remove`(`f.a.a.c.a` v1 @kind this, `f.a.a.c.c` v2 @kind object) @signature `Lf/a/a/c/a;.remove:(Lf/a/a/c/c;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ce860.  call temp:= `delete`(v1, v2) @signature `Lf/a/a/c/a;.delete:(Lf/a/a/c/c;)Z` @kind virtual;
  #L1ce866.  v0:= temp;
  #L1ce868.  if v0 == 0 then goto L1ce876;
  #L1ce86c.  call `dispose`(v2) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1ce872.  v2:= 1I;
  #L1ce874.  return v2;
  #L1ce876.  v2:= 0I;
  #L1ce878.  return v2;
}
