record `f.a.a.c.f` @kind class @AccessFlag FINAL extends `f.a.a.c.e` @kind class {
}
global `long` `@@f.a.a.c.f.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`f.a.a.c.f` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lf/a/a/c/f;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1ceac4.  call `<init>`(v0, v1) @signature `Lf/a/a/c/e;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1ceaca.  return @kind void;
}
procedure `void` `onDisposed`(`f.a.a.c.f` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lf/a/a/c/f;.onDisposed:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_SYNTHETIC {
    temp;

  #L1ceadc.  v1:= (`java.lang.Runnable`) v1 @kind object;
  #L1ceae0.  call `onDisposed`(v0, v1) @signature `Lf/a/a/c/f;.onDisposed:(Ljava/lang/Runnable;)V` @kind virtual;
  #L1ceae6.  return @kind void;
}
procedure `void` `onDisposed`(`f.a.a.c.f` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lf/a/a/c/f;.onDisposed:(Ljava/lang/Runnable;)V` @AccessFlag PROTECTED {
    temp;

  #L1ceaf8.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L1ceafe.  return @kind void;
}
procedure `java.lang.String` `toString`(`f.a.a.c.f` v2 @kind this) @signature `Lf/a/a/c/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cea64.  v0:= new `java.lang.StringBuilder`;
  #L1cea68.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cea6e.  v1:= "RunnableDisposable(disposed=" @kind object;
  #L1cea72.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cea78.  call temp:= `isDisposed`(v2) @signature `Lf/a/a/c/e;.isDisposed:()Z` @kind virtual;
  #L1cea7e.  v1:= temp;
  #L1cea80.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cea86.  v1:= ", " @kind object;
  #L1cea8a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cea90.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1cea96.  v1:= temp @kind object;
  #L1cea98.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cea9e.  v1:= ")" @kind object;
  #L1ceaa2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ceaa8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ceaae.  v0:= temp @kind object;
  #L1ceab0.  return v0 @kind object;
}
