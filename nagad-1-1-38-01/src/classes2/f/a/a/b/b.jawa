record `f.a.a.b.b` @kind class @AccessFlag PUBLIC_ABSTRACT extends `f.a.a.b.c` @kind interface {
}
procedure `void` `<init>`(`f.a.a.b.b` v0 @kind this) @signature `Lf/a/a/b/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1ce530.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ce536.  return @kind void;
}
procedure `int` `bufferSize`() @signature `Lf/a/a/b/b;.bufferSize:()I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1ce3e4.  call temp:= `bufferSize`() @signature `Lf/a/a/b/a;.bufferSize:()I` @kind static;
  #L1ce3ea.  v0:= temp;
  #L1ce3ec.  return v0;
}
procedure `f.a.a.b.b` `fromCallable`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lf/a/a/b/b;.fromCallable:(Ljava/util/concurrent/Callable;)Lf/a/a/b/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1ce400.  v0:= "callable is null" @kind object;
  #L1ce404.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1ce40a.  v0:= new `f.a.a.e.e.a.b`;
  #L1ce40e.  call `<init>`(v0, v1) @signature `Lf/a/a/e/e/a/b;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L1ce414.  call temp:= `onAssembly`(v0) @signature `Lf/a/a/g/a;.onAssembly:(Lf/a/a/b/b;)Lf/a/a/b/b;` @kind static;
  #L1ce41a.  v1:= temp @kind object;
  #L1ce41c.  return v1 @kind object;
}
procedure `f.a.a.b.b` `observeOn`(`f.a.a.b.b` v2 @kind this, `f.a.a.b.e` v3 @kind object) @signature `Lf/a/a/b/b;.observeOn:(Lf/a/a/b/e;)Lf/a/a/b/b;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1ce430.  call temp:= `bufferSize`() @signature `Lf/a/a/b/b;.bufferSize:()I` @kind static;
  #L1ce436.  v0:= temp;
  #L1ce438.  v1:= 0I;
  #L1ce43a.  call temp:= `observeOn`(v2, v3, v1, v0) @signature `Lf/a/a/b/b;.observeOn:(Lf/a/a/b/e;ZI)Lf/a/a/b/b;` @kind virtual;
  #L1ce440.  v3:= temp @kind object;
  #L1ce442.  return v3 @kind object;
}
procedure `f.a.a.b.b` `observeOn`(`f.a.a.b.b` v1 @kind this, `f.a.a.b.e` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lf/a/a/b/b;.observeOn:(Lf/a/a/b/e;ZI)Lf/a/a/b/b;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ce454.  v0:= "scheduler is null" @kind object;
  #L1ce458.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1ce45e.  v0:= "bufferSize" @kind object;
  #L1ce462.  call temp:= `verifyPositive`(v4, v0) @signature `Lf/a/a/e/b/b;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L1ce468.  v0:= new `f.a.a.e.e.a.c`;
  #L1ce46c.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lf/a/a/e/e/a/c;.<init>:(Lf/a/a/b/c;Lf/a/a/b/e;ZI)V` @kind direct;
  #L1ce472.  call temp:= `onAssembly`(v0) @signature `Lf/a/a/g/a;.onAssembly:(Lf/a/a/b/b;)Lf/a/a/b/b;` @kind static;
  #L1ce478.  v2:= temp @kind object;
  #L1ce47a.  return v2 @kind object;
}
procedure `f.a.a.c.c` `subscribe`(`f.a.a.b.b` v3 @kind this) @signature `Lf/a/a/b/b;.subscribe:()Lf/a/a/c/c;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1ce4bc.  call temp:= `emptyConsumer`() @signature `Lf/a/a/e/b/a;.emptyConsumer:()Lf/a/a/d/d;` @kind static;
  #L1ce4c2.  v0:= temp @kind object;
  #L1ce4c4.  v1:= `@@f.a.a.e.b.a.d` @type ^`f.a.a.d.d` @kind object;
  #L1ce4c8.  v2:= `@@f.a.a.e.b.a.b` @type ^`f.a.a.d.a` @kind object;
  #L1ce4cc.  call temp:= `subscribe`(v3, v0, v1, v2) @signature `Lf/a/a/b/b;.subscribe:(Lf/a/a/d/d;Lf/a/a/d/d;Lf/a/a/d/a;)Lf/a/a/c/c;` @kind virtual;
  #L1ce4d2.  v0:= temp @kind object;
  #L1ce4d4.  return v0 @kind object;
}
procedure `f.a.a.c.c` `subscribe`(`f.a.a.b.b` v2 @kind this, `f.a.a.d.d` v3 @kind object, `f.a.a.d.d` v4 @kind object, `f.a.a.d.a` v5 @kind object) @signature `Lf/a/a/b/b;.subscribe:(Lf/a/a/d/d;Lf/a/a/d/d;Lf/a/a/d/a;)Lf/a/a/c/c;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1ce4e8.  v0:= "onNext is null" @kind object;
  #L1ce4ec.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1ce4f2.  v0:= "onError is null" @kind object;
  #L1ce4f6.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1ce4fc.  v0:= "onComplete is null" @kind object;
  #L1ce500.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1ce506.  v0:= new `f.a.a.e.d.c`;
  #L1ce50a.  call temp:= `emptyConsumer`() @signature `Lf/a/a/e/b/a;.emptyConsumer:()Lf/a/a/d/d;` @kind static;
  #L1ce510.  v1:= temp @kind object;
  #L1ce512.  call `<init>`(v0, v3, v4, v5, v1) @signature `Lf/a/a/e/d/c;.<init>:(Lf/a/a/d/d;Lf/a/a/d/d;Lf/a/a/d/a;Lf/a/a/d/d;)V` @kind direct;
  #L1ce518.  call `subscribe`(v2, v0) @signature `Lf/a/a/b/b;.subscribe:(Lf/a/a/b/d;)V` @kind virtual;
  #L1ce51e.  return v0 @kind object;
}
procedure `void` `subscribe`(`f.a.a.b.b` v2 @kind this, `f.a.a.b.d` v3 @kind object) @signature `Lf/a/a/b/b;.subscribe:(Lf/a/a/b/d;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1ce548.  v0:= "observer is null" @kind object;
  #L1ce54c.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1ce552.  call temp:= `onSubscribe`(v2, v3) @signature `Lf/a/a/g/a;.onSubscribe:(Lf/a/a/b/b;Lf/a/a/b/d;)Lf/a/a/b/d;` @kind static;
  #L1ce558.  v3:= temp @kind object;
  #L1ce55a.  v0:= "The RxJavaPlugins.onSubscribe hook returned a null Observer. Please change the handler provided to RxJavaPlugins.setOnObservableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins" @kind object;
  #L1ce55e.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1ce564.  call `subscribeActual`(v2, v3) @signature `Lf/a/a/b/b;.subscribeActual:(Lf/a/a/b/d;)V` @kind virtual;
  #L1ce56a.  return @kind void;
  #L1ce56c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ce56e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/a;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L1ce574.  call `onError`(v3) @signature `Lf/a/a/g/a;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L1ce57a.  v0:= new `java.lang.NullPointerException`;
  #L1ce57e.  v1:= "Actually not, but can't throw other exceptions due to RS" @kind object;
  #L1ce582.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ce588.  call temp:= `initCause`(v0, v3) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L1ce58e.  throw v0;
  #L1ce590.  v3:= Exception @type ^`java.lang.NullPointerException` @kind object;
  #L1ce592.  throw v3;
  catch `java.lang.NullPointerException` @[L1ce552..L1ce56a] goto L1ce590;
  catch `java.lang.Throwable` @[L1ce552..L1ce56a] goto L1ce56c;
}
procedure `void` `subscribeActual`(`f.a.a.b.d` v0 @kind object) @signature `Lf/a/a/b/b;.subscribeActual:(Lf/a/a/b/d;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `f.a.a.b.b` `subscribeOn`(`f.a.a.b.b` v1 @kind this, `f.a.a.b.e` v2 @kind object) @signature `Lf/a/a/b/b;.subscribeOn:(Lf/a/a/b/e;)Lf/a/a/b/b;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ce48c.  v0:= "scheduler is null" @kind object;
  #L1ce490.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1ce496.  v0:= new `f.a.a.e.e.a.d`;
  #L1ce49a.  call `<init>`(v0, v1, v2) @signature `Lf/a/a/e/e/a/d;.<init>:(Lf/a/a/b/c;Lf/a/a/b/e;)V` @kind direct;
  #L1ce4a0.  call temp:= `onAssembly`(v0) @signature `Lf/a/a/g/a;.onAssembly:(Lf/a/a/b/b;)Lf/a/a/b/b;` @kind static;
  #L1ce4a6.  v2:= temp @kind object;
  #L1ce4a8.  return v2 @kind object;
}
