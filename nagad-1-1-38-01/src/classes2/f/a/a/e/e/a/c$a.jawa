record `f.a.a.e.e.a.c$a` @kind class @AccessFlag FINAL extends `f.a.a.e.d.a` @kind class, `f.a.a.b.d` @kind interface, `java.lang.Runnable` @kind interface {
  `f.a.a.b.d` `f.a.a.e.e.a.c$a.f` @AccessFlag FINAL;
  `f.a.a.b.e$b` `f.a.a.e.e.a.c$a.g` @AccessFlag FINAL;
  `boolean` `f.a.a.e.e.a.c$a.h` @AccessFlag FINAL;
  `int` `f.a.a.e.e.a.c$a.i` @AccessFlag FINAL;
  `f.a.a.e.c.e` `f.a.a.e.e.a.c$a.j` @AccessFlag ;
  `f.a.a.c.c` `f.a.a.e.e.a.c$a.k` @AccessFlag ;
  `java.lang.Throwable` `f.a.a.e.e.a.c$a.l` @AccessFlag ;
  `boolean` `f.a.a.e.e.a.c$a.m` @AccessFlag VOLATILE;
  `boolean` `f.a.a.e.e.a.c$a.n` @AccessFlag VOLATILE;
  `int` `f.a.a.e.e.a.c$a.o` @AccessFlag ;
  `boolean` `f.a.a.e.e.a.c$a.p` @AccessFlag ;
}
global `long` `@@f.a.a.e.e.a.c$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`f.a.a.e.e.a.c$a` v0 @kind this, `f.a.a.b.d` v1 @kind object, `f.a.a.b.e$b` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lf/a/a/e/e/a/c$a;.<init>:(Lf/a/a/b/d;Lf/a/a/b/e$b;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1d0084.  call `<init>`(v0) @signature `Lf/a/a/e/d/a;.<init>:()V` @kind direct;
  #L1d008a.  v0.`f.a.a.e.e.a.c$a.f` @type ^`f.a.a.b.d` := v1 @kind object;
  #L1d008e.  v0.`f.a.a.e.e.a.c$a.g` @type ^`f.a.a.b.e$b` := v2 @kind object;
  #L1d0092.  v0.`f.a.a.e.e.a.c$a.h` @type ^`boolean` := v3 @kind boolean;
  #L1d0096.  v0.`f.a.a.e.e.a.c$a.i` @type ^`int` := v4;
  #L1d009a.  return @kind void;
}
procedure `void` `a`(`f.a.a.e.e.a.c$a` v5 @kind this) @signature `Lf/a/a/e/e/a/c$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d011c.  v0:= 1I;
  #L1d011e.  v1:= 1I;
  #L1d0120.  v2:= v5.`f.a.a.e.e.a.c$a.n` @type ^`boolean` @kind boolean;
  #L1d0124.  if v2 == 0 then goto L1d012a;
  #L1d0128.  return @kind void;
  #L1d012a.  v2:= v5.`f.a.a.e.e.a.c$a.m` @type ^`boolean` @kind boolean;
  #L1d012e.  v3:= v5.`f.a.a.e.e.a.c$a.l` @type ^`java.lang.Throwable` @kind object;
  #L1d0132.  v4:= v5.`f.a.a.e.e.a.c$a.h` @type ^`boolean` @kind boolean;
  #L1d0136.  if v4 != 0 then goto L1d015c;
  #L1d013a.  if v2 == 0 then goto L1d015c;
  #L1d013e.  if v3 == 0 then goto L1d015c;
  #L1d0142.  v5.`f.a.a.e.e.a.c$a.n` @type ^`boolean` := v0 @kind boolean;
  #L1d0146.  v0:= v5.`f.a.a.e.e.a.c$a.f` @type ^`f.a.a.b.d` @kind object;
  #L1d014a.  call `onError`(v0, v3) @signature `Lf/a/a/b/d;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L1d0150.  v0:= v5.`f.a.a.e.e.a.c$a.g` @type ^`f.a.a.b.e$b` @kind object;
  #L1d0154.  call `dispose`(v0) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1d015a.  return @kind void;
  #L1d015c.  v3:= v5.`f.a.a.e.e.a.c$a.f` @type ^`f.a.a.b.d` @kind object;
  #L1d0160.  v4:= 0I;
  #L1d0162.  call `onNext`(v3, v4) @signature `Lf/a/a/b/d;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L1d0168.  if v2 == 0 then goto L1d019a;
  #L1d016c.  v5.`f.a.a.e.e.a.c$a.n` @type ^`boolean` := v0 @kind boolean;
  #L1d0170.  v0:= v5.`f.a.a.e.e.a.c$a.l` @type ^`java.lang.Throwable` @kind object;
  #L1d0174.  if v0 == 0 then goto L1d0184;
  #L1d0178.  v1:= v5.`f.a.a.e.e.a.c$a.f` @type ^`f.a.a.b.d` @kind object;
  #L1d017c.  call `onError`(v1, v0) @signature `Lf/a/a/b/d;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L1d0182.  goto L1d018e;
  #L1d0184.  v0:= v5.`f.a.a.e.e.a.c$a.f` @type ^`f.a.a.b.d` @kind object;
  #L1d0188.  call `onComplete`(v0) @signature `Lf/a/a/b/d;.onComplete:()V` @kind interface;
  #L1d018e.  v0:= v5.`f.a.a.e.e.a.c$a.g` @type ^`f.a.a.b.e$b` @kind object;
  #L1d0192.  call `dispose`(v0) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1d0198.  return @kind void;
  #L1d019a.  v1:= -v1 @kind int;
  #L1d019c.  call temp:= `addAndGet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L1d01a2.  v1:= temp;
  #L1d01a4.  if v1 != 0 then goto L1d0120;
  #L1d01a8.  return @kind void;
}
procedure `boolean` `a`(`f.a.a.e.e.a.c$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `f.a.a.b.d` v5 @kind object) @signature `Lf/a/a/e/e/a/c$a;.a:(ZZLf/a/a/b/d;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1cff80.  v0:= v2.`f.a.a.e.e.a.c$a.n` @type ^`boolean` @kind boolean;
  #L1cff84.  v1:= 1I;
  #L1cff86.  if v0 == 0 then goto L1cff96;
  #L1cff8a.  v3:= v2.`f.a.a.e.e.a.c$a.j` @type ^`f.a.a.e.c.e` @kind object;
  #L1cff8e.  call `clear`(v3) @signature `Lf/a/a/e/c/e;.clear:()V` @kind interface;
  #L1cff94.  return v1;
  #L1cff96.  if v3 == 0 then goto L1d000a;
  #L1cff9a.  v3:= v2.`f.a.a.e.e.a.c$a.l` @type ^`java.lang.Throwable` @kind object;
  #L1cff9e.  v0:= v2.`f.a.a.e.e.a.c$a.h` @type ^`boolean` @kind boolean;
  #L1cffa2.  if v0 == 0 then goto L1cffcc;
  #L1cffa6.  if v4 == 0 then goto L1d000a;
  #L1cffaa.  v2.`f.a.a.e.e.a.c$a.n` @type ^`boolean` := v1 @kind boolean;
  #L1cffae.  if v3 == 0 then goto L1cffba;
  #L1cffb2.  call `onError`(v5, v3) @signature `Lf/a/a/b/d;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L1cffb8.  goto L1cffc0;
  #L1cffba.  call `onComplete`(v5) @signature `Lf/a/a/b/d;.onComplete:()V` @kind interface;
  #L1cffc0.  v3:= v2.`f.a.a.e.e.a.c$a.g` @type ^`f.a.a.b.e$b` @kind object;
  #L1cffc4.  call `dispose`(v3) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1cffca.  return v1;
  #L1cffcc.  if v3 == 0 then goto L1cfff0;
  #L1cffd0.  v2.`f.a.a.e.e.a.c$a.n` @type ^`boolean` := v1 @kind boolean;
  #L1cffd4.  v4:= v2.`f.a.a.e.e.a.c$a.j` @type ^`f.a.a.e.c.e` @kind object;
  #L1cffd8.  call `clear`(v4) @signature `Lf/a/a/e/c/e;.clear:()V` @kind interface;
  #L1cffde.  call `onError`(v5, v3) @signature `Lf/a/a/b/d;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L1cffe4.  v3:= v2.`f.a.a.e.e.a.c$a.g` @type ^`f.a.a.b.e$b` @kind object;
  #L1cffe8.  call `dispose`(v3) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1cffee.  return v1;
  #L1cfff0.  if v4 == 0 then goto L1d000a;
  #L1cfff4.  v2.`f.a.a.e.e.a.c$a.n` @type ^`boolean` := v1 @kind boolean;
  #L1cfff8.  call `onComplete`(v5) @signature `Lf/a/a/b/d;.onComplete:()V` @kind interface;
  #L1cfffe.  v3:= v2.`f.a.a.e.e.a.c$a.g` @type ^`f.a.a.b.e$b` @kind object;
  #L1d0002.  call `dispose`(v3) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1d0008.  return v1;
  #L1d000a.  v3:= 0I;
  #L1d000c.  return v3;
}
procedure `void` `b`(`f.a.a.e.e.a.c$a` v7 @kind this) @signature `Lf/a/a/e/e/a/c$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1d01bc.  v0:= v7.`f.a.a.e.e.a.c$a.j` @type ^`f.a.a.e.c.e` @kind object;
  #L1d01c0.  v1:= v7.`f.a.a.e.e.a.c$a.f` @type ^`f.a.a.b.d` @kind object;
  #L1d01c4.  v2:= 1I;
  #L1d01c6.  v3:= 1I;
  #L1d01c8.  v4:= v7.`f.a.a.e.e.a.c$a.m` @type ^`boolean` @kind boolean;
  #L1d01cc.  call temp:= `isEmpty`(v0) @signature `Lf/a/a/e/c/e;.isEmpty:()Z` @kind interface;
  #L1d01d2.  v5:= temp;
  #L1d01d4.  call temp:= `a`(v7, v4, v5, v1) @signature `Lf/a/a/e/e/a/c$a;.a:(ZZLf/a/a/b/d;)Z` @kind virtual;
  #L1d01da.  v4:= temp;
  #L1d01dc.  if v4 == 0 then goto L1d01e2;
  #L1d01e0.  return @kind void;
  #L1d01e2.  v4:= v7.`f.a.a.e.e.a.c$a.m` @type ^`boolean` @kind boolean;
  #L1d01e6.  call temp:= `poll`(v0) @signature `Lf/a/a/e/c/e;.poll:()Ljava/lang/Object;` @kind interface;
  #L1d01ec.  v5:= temp @kind object;
  #L1d01ee.  if v5 != 0 then goto L1d01f6;
  #L1d01f2.  v6:= 1I;
  #L1d01f4.  goto L1d01f8;
  #L1d01f6.  v6:= 0I;
  #L1d01f8.  call temp:= `a`(v7, v4, v6, v1) @signature `Lf/a/a/e/e/a/c$a;.a:(ZZLf/a/a/b/d;)Z` @kind virtual;
  #L1d01fe.  v4:= temp;
  #L1d0200.  if v4 == 0 then goto L1d0206;
  #L1d0204.  return @kind void;
  #L1d0206.  if v6 == 0 then goto L1d021a;
  #L1d020a.  v3:= -v3 @kind int;
  #L1d020c.  call temp:= `addAndGet`(v7, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L1d0212.  v3:= temp;
  #L1d0214.  if v3 != 0 then goto L1d01c8;
  #L1d0218.  return @kind void;
  #L1d021a.  call `onNext`(v1, v5) @signature `Lf/a/a/b/d;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L1d0220.  goto L1d01e2;
  #L1d0222.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d0224.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/a;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L1d022a.  v7.`f.a.a.e.e.a.c$a.n` @type ^`boolean` := v2 @kind boolean;
  #L1d022e.  v2:= v7.`f.a.a.e.e.a.c$a.k` @type ^`f.a.a.c.c` @kind object;
  #L1d0232.  call `dispose`(v2) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1d0238.  call `clear`(v0) @signature `Lf/a/a/e/c/e;.clear:()V` @kind interface;
  #L1d023e.  call `onError`(v1, v3) @signature `Lf/a/a/b/d;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L1d0244.  v0:= v7.`f.a.a.e.e.a.c$a.g` @type ^`f.a.a.b.e$b` @kind object;
  #L1d0248.  call `dispose`(v0) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1d024e.  return @kind void;
  catch `java.lang.Throwable` @[L1d01e6..L1d01ee] goto L1d0222;
}
procedure `void` `c`(`f.a.a.e.e.a.c$a` v1 @kind this) @signature `Lf/a/a/e/e/a/c$a;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L1d03c0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L1d03c6.  v0:= temp;
  #L1d03c8.  if v0 != 0 then goto L1d03d6;
  #L1d03cc.  v0:= v1.`f.a.a.e.e.a.c$a.g` @type ^`f.a.a.b.e$b` @kind object;
  #L1d03d0.  call temp:= `schedule`(v0, v1) @signature `Lf/a/a/b/e$b;.schedule:(Ljava/lang/Runnable;)Lf/a/a/c/c;` @kind virtual;
  #L1d03d6.  return @kind void;
}
procedure `void` `clear`(`f.a.a.e.e.a.c$a` v1 @kind this) @signature `Lf/a/a/e/e/a/c$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d00ac.  v0:= v1.`f.a.a.e.e.a.c$a.j` @type ^`f.a.a.e.c.e` @kind object;
  #L1d00b0.  call `clear`(v0) @signature `Lf/a/a/e/c/e;.clear:()V` @kind interface;
  #L1d00b6.  return @kind void;
}
procedure `void` `dispose`(`f.a.a.e.e.a.c$a` v1 @kind this) @signature `Lf/a/a/e/e/a/c$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d00c8.  v0:= v1.`f.a.a.e.e.a.c$a.n` @type ^`boolean` @kind boolean;
  #L1d00cc.  if v0 != 0 then goto L1d0108;
  #L1d00d0.  v0:= 1I;
  #L1d00d2.  v1.`f.a.a.e.e.a.c$a.n` @type ^`boolean` := v0 @kind boolean;
  #L1d00d6.  v0:= v1.`f.a.a.e.e.a.c$a.k` @type ^`f.a.a.c.c` @kind object;
  #L1d00da.  call `dispose`(v0) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1d00e0.  v0:= v1.`f.a.a.e.e.a.c$a.g` @type ^`f.a.a.b.e$b` @kind object;
  #L1d00e4.  call `dispose`(v0) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1d00ea.  v0:= v1.`f.a.a.e.e.a.c$a.p` @type ^`boolean` @kind boolean;
  #L1d00ee.  if v0 != 0 then goto L1d0108;
  #L1d00f2.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L1d00f8.  v0:= temp;
  #L1d00fa.  if v0 != 0 then goto L1d0108;
  #L1d00fe.  v0:= v1.`f.a.a.e.e.a.c$a.j` @type ^`f.a.a.e.c.e` @kind object;
  #L1d0102.  call `clear`(v0) @signature `Lf/a/a/e/c/e;.clear:()V` @kind interface;
  #L1d0108.  return @kind void;
}
procedure `boolean` `isEmpty`(`f.a.a.e.e.a.c$a` v1 @kind this) @signature `Lf/a/a/e/e/a/c$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d0020.  v0:= v1.`f.a.a.e.e.a.c$a.j` @type ^`f.a.a.e.c.e` @kind object;
  #L1d0024.  call temp:= `isEmpty`(v0) @signature `Lf/a/a/e/c/e;.isEmpty:()Z` @kind interface;
  #L1d002a.  v0:= temp;
  #L1d002c.  return v0;
}
procedure `void` `onComplete`(`f.a.a.e.e.a.c$a` v1 @kind this) @signature `Lf/a/a/e/e/a/c$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d026c.  v0:= v1.`f.a.a.e.e.a.c$a.m` @type ^`boolean` @kind boolean;
  #L1d0270.  if v0 == 0 then goto L1d0276;
  #L1d0274.  return @kind void;
  #L1d0276.  v0:= 1I;
  #L1d0278.  v1.`f.a.a.e.e.a.c$a.m` @type ^`boolean` := v0 @kind boolean;
  #L1d027c.  call `c`(v1) @signature `Lf/a/a/e/e/a/c$a;.c:()V` @kind virtual;
  #L1d0282.  return @kind void;
}
procedure `void` `onError`(`f.a.a.e.e.a.c$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lf/a/a/e/e/a/c$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d0294.  v0:= v1.`f.a.a.e.e.a.c$a.m` @type ^`boolean` @kind boolean;
  #L1d0298.  if v0 == 0 then goto L1d02a4;
  #L1d029c.  call `onError`(v2) @signature `Lf/a/a/g/a;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L1d02a2.  return @kind void;
  #L1d02a4.  v1.`f.a.a.e.e.a.c$a.l` @type ^`java.lang.Throwable` := v2 @kind object;
  #L1d02a8.  v2:= 1I;
  #L1d02aa.  v1.`f.a.a.e.e.a.c$a.m` @type ^`boolean` := v2 @kind boolean;
  #L1d02ae.  call `c`(v1) @signature `Lf/a/a/e/e/a/c$a;.c:()V` @kind virtual;
  #L1d02b4.  return @kind void;
}
procedure `void` `onNext`(`f.a.a.e.e.a.c$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lf/a/a/e/e/a/c$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d02c8.  v0:= v2.`f.a.a.e.e.a.c$a.m` @type ^`boolean` @kind boolean;
  #L1d02cc.  if v0 == 0 then goto L1d02d2;
  #L1d02d0.  return @kind void;
  #L1d02d2.  v0:= v2.`f.a.a.e.e.a.c$a.o` @type ^`int`;
  #L1d02d6.  v1:= 2I;
  #L1d02d8.  if v0 == v1 then goto L1d02e6;
  #L1d02dc.  v0:= v2.`f.a.a.e.e.a.c$a.j` @type ^`f.a.a.e.c.e` @kind object;
  #L1d02e0.  call temp:= `offer`(v0, v3) @signature `Lf/a/a/e/c/e;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L1d02e6.  call `c`(v2) @signature `Lf/a/a/e/e/a/c$a;.c:()V` @kind virtual;
  #L1d02ec.  return @kind void;
}
procedure `void` `onSubscribe`(`f.a.a.e.e.a.c$a` v2 @kind this, `f.a.a.c.c` v3 @kind object) @signature `Lf/a/a/e/e/a/c$a;.onSubscribe:(Lf/a/a/c/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d0300.  v0:= v2.`f.a.a.e.e.a.c$a.k` @type ^`f.a.a.c.c` @kind object;
  #L1d0304.  call temp:= `validate`(v0, v3) @signature `Lf/a/a/e/a/a;.validate:(Lf/a/a/c/c;Lf/a/a/c/c;)Z` @kind static;
  #L1d030a.  v0:= temp;
  #L1d030c.  if v0 == 0 then goto L1d0384;
  #L1d0310.  v2.`f.a.a.e.e.a.c$a.k` @type ^`f.a.a.c.c` := v3 @kind object;
  #L1d0314.  v0:= instanceof @variable v3 @type ^`f.a.a.e.c.b` @kind boolean;
  #L1d0318.  if v0 == 0 then goto L1d0368;
  #L1d031c.  v3:= (`f.a.a.e.c.b`) v3 @kind object;
  #L1d0320.  v0:= 7I;
  #L1d0322.  call temp:= `requestFusion`(v3, v0) @signature `Lf/a/a/e/c/c;.requestFusion:(I)I` @kind interface;
  #L1d0328.  v0:= temp;
  #L1d032a.  v1:= 1I;
  #L1d032c.  if v0 != v1 then goto L1d034e;
  #L1d0330.  v2.`f.a.a.e.e.a.c$a.o` @type ^`int` := v0;
  #L1d0334.  v2.`f.a.a.e.e.a.c$a.j` @type ^`f.a.a.e.c.e` := v3 @kind object;
  #L1d0338.  v2.`f.a.a.e.e.a.c$a.m` @type ^`boolean` := v1 @kind boolean;
  #L1d033c.  v3:= v2.`f.a.a.e.e.a.c$a.f` @type ^`f.a.a.b.d` @kind object;
  #L1d0340.  call `onSubscribe`(v3, v2) @signature `Lf/a/a/b/d;.onSubscribe:(Lf/a/a/c/c;)V` @kind interface;
  #L1d0346.  call `c`(v2) @signature `Lf/a/a/e/e/a/c$a;.c:()V` @kind virtual;
  #L1d034c.  return @kind void;
  #L1d034e.  v1:= 2I;
  #L1d0350.  if v0 != v1 then goto L1d0368;
  #L1d0354.  v2.`f.a.a.e.e.a.c$a.o` @type ^`int` := v0;
  #L1d0358.  v2.`f.a.a.e.e.a.c$a.j` @type ^`f.a.a.e.c.e` := v3 @kind object;
  #L1d035c.  v3:= v2.`f.a.a.e.e.a.c$a.f` @type ^`f.a.a.b.d` @kind object;
  #L1d0360.  call `onSubscribe`(v3, v2) @signature `Lf/a/a/b/d;.onSubscribe:(Lf/a/a/c/c;)V` @kind interface;
  #L1d0366.  return @kind void;
  #L1d0368.  v3:= new `f.a.a.e.f.a`;
  #L1d036c.  v0:= v2.`f.a.a.e.e.a.c$a.i` @type ^`int`;
  #L1d0370.  call `<init>`(v3, v0) @signature `Lf/a/a/e/f/a;.<init>:(I)V` @kind direct;
  #L1d0376.  v2.`f.a.a.e.e.a.c$a.j` @type ^`f.a.a.e.c.e` := v3 @kind object;
  #L1d037a.  v3:= v2.`f.a.a.e.e.a.c$a.f` @type ^`f.a.a.b.d` @kind object;
  #L1d037e.  call `onSubscribe`(v3, v2) @signature `Lf/a/a/b/d;.onSubscribe:(Lf/a/a/c/c;)V` @kind interface;
  #L1d0384.  return @kind void;
}
procedure `java.lang.Object` `poll`(`f.a.a.e.e.a.c$a` v1 @kind this) @signature `Lf/a/a/e/e/a/c$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d0064.  v0:= v1.`f.a.a.e.e.a.c$a.j` @type ^`f.a.a.e.c.e` @kind object;
  #L1d0068.  call temp:= `poll`(v0) @signature `Lf/a/a/e/c/e;.poll:()Ljava/lang/Object;` @kind interface;
  #L1d006e.  v0:= temp @kind object;
  #L1d0070.  return v0 @kind object;
}
procedure `int` `requestFusion`(`f.a.a.e.e.a.c$a` v1 @kind this, `int` v2 ) @signature `Lf/a/a/e/e/a/c$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d0040.  v0:= 2I;
  #L1d0042.  v2:= v2 ^& v0 @kind int;
  #L1d0044.  if v2 == 0 then goto L1d0050;
  #L1d0048.  v2:= 1I;
  #L1d004a.  v1.`f.a.a.e.e.a.c$a.p` @type ^`boolean` := v2 @kind boolean;
  #L1d004e.  return v0;
  #L1d0050.  v2:= 0I;
  #L1d0052.  return v2;
}
procedure `void` `run`(`f.a.a.e.e.a.c$a` v1 @kind this) @signature `Lf/a/a/e/e/a/c$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d0398.  v0:= v1.`f.a.a.e.e.a.c$a.p` @type ^`boolean` @kind boolean;
  #L1d039c.  if v0 == 0 then goto L1d03a8;
  #L1d03a0.  call `a`(v1) @signature `Lf/a/a/e/e/a/c$a;.a:()V` @kind virtual;
  #L1d03a6.  goto L1d03ae;
  #L1d03a8.  call `b`(v1) @signature `Lf/a/a/e/e/a/c$a;.b:()V` @kind virtual;
  #L1d03ae.  return @kind void;
}
