record `f.a.a.e.e.a.d$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `f.a.a.b.d` @kind interface, `f.a.a.c.c` @kind interface {
  `f.a.a.b.d` `f.a.a.e.e.a.d$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `f.a.a.e.e.a.d$a.g` @AccessFlag FINAL;
}
global `long` `@@f.a.a.e.e.a.d$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`f.a.a.e.e.a.d$a` v0 @kind this, `f.a.a.b.d` v1 @kind object) @signature `Lf/a/a/e/e/a/d$a;.<init>:(Lf/a/a/b/d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1d045c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L1d0462.  v0.`f.a.a.e.e.a.d$a.f` @type ^`f.a.a.b.d` := v1 @kind object;
  #L1d0466.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L1d046a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L1d0470.  v0.`f.a.a.e.e.a.d$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L1d0474.  return @kind void;
}
procedure `void` `a`(`f.a.a.e.e.a.d$a` v0 @kind this, `f.a.a.c.c` v1 @kind object) @signature `Lf/a/a/e/e/a/d$a;.a:(Lf/a/a/c/c;)V` @AccessFlag  {
    temp;

  #L1d051c.  call temp:= `setOnce`(v0, v1) @signature `Lf/a/a/e/a/a;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lf/a/a/c/c;)Z` @kind static;
  #L1d0522.  return @kind void;
}
procedure `void` `dispose`(`f.a.a.e.e.a.d$a` v1 @kind this) @signature `Lf/a/a/e/e/a/d$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d0488.  v0:= v1.`f.a.a.e.e.a.d$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L1d048c.  call temp:= `dispose`(v0) @signature `Lf/a/a/e/a/a;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L1d0492.  call temp:= `dispose`(v1) @signature `Lf/a/a/e/a/a;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L1d0498.  return @kind void;
}
procedure `void` `onComplete`(`f.a.a.e.e.a.d$a` v1 @kind this) @signature `Lf/a/a/e/e/a/d$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d04ac.  v0:= v1.`f.a.a.e.e.a.d$a.f` @type ^`f.a.a.b.d` @kind object;
  #L1d04b0.  call `onComplete`(v0) @signature `Lf/a/a/b/d;.onComplete:()V` @kind interface;
  #L1d04b6.  return @kind void;
}
procedure `void` `onError`(`f.a.a.e.e.a.d$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lf/a/a/e/e/a/d$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d04c8.  v0:= v1.`f.a.a.e.e.a.d$a.f` @type ^`f.a.a.b.d` @kind object;
  #L1d04cc.  call `onError`(v0, v2) @signature `Lf/a/a/b/d;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L1d04d2.  return @kind void;
}
procedure `void` `onNext`(`f.a.a.e.e.a.d$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lf/a/a/e/e/a/d$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d04e4.  v0:= v1.`f.a.a.e.e.a.d$a.f` @type ^`f.a.a.b.d` @kind object;
  #L1d04e8.  call `onNext`(v0, v2) @signature `Lf/a/a/b/d;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L1d04ee.  return @kind void;
}
procedure `void` `onSubscribe`(`f.a.a.e.e.a.d$a` v1 @kind this, `f.a.a.c.c` v2 @kind object) @signature `Lf/a/a/e/e/a/d$a;.onSubscribe:(Lf/a/a/c/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d0500.  v0:= v1.`f.a.a.e.e.a.d$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L1d0504.  call temp:= `setOnce`(v0, v2) @signature `Lf/a/a/e/a/a;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lf/a/a/c/c;)Z` @kind static;
  #L1d050a.  return @kind void;
}
