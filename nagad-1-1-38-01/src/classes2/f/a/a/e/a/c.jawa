record `f.a.a.e.a.c` @kind class @AccessFlag PUBLIC_FINAL extends `f.a.a.c.c` @kind interface, `f.a.a.c.d` @kind interface {
  `java.util.List` `f.a.a.e.a.c.f` @AccessFlag ;
  `boolean` `f.a.a.e.a.c.g` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`f.a.a.e.a.c` v0 @kind this) @signature `Lf/a/a/e/a/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1cf660.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1cf666.  return @kind void;
}
procedure `void` `a`(`f.a.a.e.a.c` v2 @kind this, `java.util.List` v3 @kind object) @signature `Lf/a/a/e/a/c;.a:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1cf6d4.  if v3 != 0 then goto L1cf6da;
  #L1cf6d8.  return @kind void;
  #L1cf6da.  v0:= 0I;
  #L1cf6dc.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1cf6e2.  v3:= temp @kind object;
  #L1cf6e4.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1cf6ea.  v1:= temp;
  #L1cf6ec.  if v1 == 0 then goto L1cf722;
  #L1cf6f0.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1cf6f6.  v1:= temp @kind object;
  #L1cf6f8.  v1:= (`f.a.a.c.c`) v1 @kind object;
  #L1cf6fc.  call `dispose`(v1) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1cf702.  goto L1cf6e4;
  #L1cf704.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1cf706.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/a;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L1cf70c.  if v0 != 0 then goto L1cf71a;
  #L1cf710.  v0:= new `java.util.ArrayList`;
  #L1cf714.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1cf71a.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1cf720.  goto L1cf6e4;
  #L1cf722.  if v0 == 0 then goto L1cf758;
  #L1cf726.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1cf72c.  v3:= temp;
  #L1cf72e.  v1:= 1I;
  #L1cf730.  if v3 != v1 then goto L1cf74c;
  #L1cf734.  v3:= 0I;
  #L1cf736.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1cf73c.  v3:= temp @kind object;
  #L1cf73e.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L1cf742.  call temp:= `wrapOrThrow`(v3) @signature `Lf/a/a/e/h/a;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L1cf748.  v3:= temp @kind object;
  #L1cf74a.  throw v3;
  #L1cf74c.  v3:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L1cf750.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L1cf756.  throw v3;
  #L1cf758.  return @kind void;
  catch `java.lang.Throwable` @[L1cf6fc..L1cf702] goto L1cf704;
}
procedure `boolean` `add`(`f.a.a.e.a.c` v1 @kind this, `f.a.a.c.c` v2 @kind object) @signature `Lf/a/a/e/a/c;.add:(Lf/a/a/c/c;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cf55c.  v0:= "d is null" @kind object;
  #L1cf560.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1cf566.  v0:= v1.`f.a.a.e.a.c.g` @type ^`boolean` @kind boolean;
  #L1cf56a.  if v0 != 0 then goto L1cf5a4;
  #L1cf56e.  @monitorenter v1
  #L1cf570.  v0:= v1.`f.a.a.e.a.c.g` @type ^`boolean` @kind boolean;
  #L1cf574.  if v0 != 0 then goto L1cf59a;
  #L1cf578.  v0:= v1.`f.a.a.e.a.c.f` @type ^`java.util.List` @kind object;
  #L1cf57c.  if v0 != 0 then goto L1cf58e;
  #L1cf580.  v0:= new `java.util.LinkedList`;
  #L1cf584.  call `<init>`(v0) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L1cf58a.  v1.`f.a.a.e.a.c.f` @type ^`java.util.List` := v0 @kind object;
  #L1cf58e.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1cf594.  v2:= 1I;
  #L1cf596.  @monitorexit v1
  #L1cf598.  return v2;
  #L1cf59a.  @monitorexit v1
  #L1cf59c.  goto L1cf5a4;
  #L1cf59e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1cf5a0.  @monitorexit v1
  #L1cf5a2.  throw v2;
  #L1cf5a4.  call `dispose`(v2) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1cf5aa.  v2:= 0I;
  #L1cf5ac.  return v2;
  catch `java.lang.Throwable` @[L1cf570..L1cf5a2] goto L1cf59e;
}
procedure `boolean` `delete`(`f.a.a.e.a.c` v2 @kind this, `f.a.a.c.c` v3 @kind object) @signature `Lf/a/a/e/a/c;.delete:(Lf/a/a/c/c;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cf5cc.  v0:= "Disposable item is null" @kind object;
  #L1cf5d0.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1cf5d6.  v0:= v2.`f.a.a.e.a.c.g` @type ^`boolean` @kind boolean;
  #L1cf5da.  v1:= 0I;
  #L1cf5dc.  if v0 == 0 then goto L1cf5e2;
  #L1cf5e0.  return v1;
  #L1cf5e2.  @monitorenter v2
  #L1cf5e4.  v0:= v2.`f.a.a.e.a.c.g` @type ^`boolean` @kind boolean;
  #L1cf5e8.  if v0 == 0 then goto L1cf5f0;
  #L1cf5ec.  @monitorexit v2
  #L1cf5ee.  return v1;
  #L1cf5f0.  v0:= v2.`f.a.a.e.a.c.f` @type ^`java.util.List` @kind object;
  #L1cf5f4.  if v0 == 0 then goto L1cf60c;
  #L1cf5f8.  call temp:= `remove`(v0, v3) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L1cf5fe.  v3:= temp;
  #L1cf600.  if v3 != 0 then goto L1cf606;
  #L1cf604.  goto L1cf60c;
  #L1cf606.  @monitorexit v2
  #L1cf608.  v3:= 1I;
  #L1cf60a.  return v3;
  #L1cf60c.  @monitorexit v2
  #L1cf60e.  return v1;
  #L1cf610.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1cf612.  @monitorexit v2
  #L1cf614.  throw v3;
  catch `java.lang.Throwable` @[L1cf5e4..L1cf614] goto L1cf610;
}
procedure `void` `dispose`(`f.a.a.e.a.c` v2 @kind this) @signature `Lf/a/a/e/a/c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cf678.  v0:= v2.`f.a.a.e.a.c.g` @type ^`boolean` @kind boolean;
  #L1cf67c.  if v0 == 0 then goto L1cf682;
  #L1cf680.  return @kind void;
  #L1cf682.  @monitorenter v2
  #L1cf684.  v0:= v2.`f.a.a.e.a.c.g` @type ^`boolean` @kind boolean;
  #L1cf688.  if v0 == 0 then goto L1cf690;
  #L1cf68c.  @monitorexit v2
  #L1cf68e.  return @kind void;
  #L1cf690.  v0:= 1I;
  #L1cf692.  v2.`f.a.a.e.a.c.g` @type ^`boolean` := v0 @kind boolean;
  #L1cf696.  v0:= v2.`f.a.a.e.a.c.f` @type ^`java.util.List` @kind object;
  #L1cf69a.  v1:= 0I;
  #L1cf69c.  v2.`f.a.a.e.a.c.f` @type ^`java.util.List` := v1 @kind object;
  #L1cf6a0.  @monitorexit v2
  #L1cf6a2.  call `a`(v2, v0) @signature `Lf/a/a/e/a/c;.a:(Ljava/util/List;)V` @kind virtual;
  #L1cf6a8.  return @kind void;
  #L1cf6aa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1cf6ac.  @monitorexit v2
  #L1cf6ae.  throw v0;
  catch `java.lang.Throwable` @[L1cf684..L1cf6a2] goto L1cf6aa;
  catch `java.lang.Throwable` @[L1cf6ac..L1cf6ae] goto L1cf6aa;
}
procedure `boolean` `remove`(`f.a.a.e.a.c` v1 @kind this, `f.a.a.c.c` v2 @kind object) @signature `Lf/a/a/e/a/c;.remove:(Lf/a/a/c/c;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cf634.  call temp:= `delete`(v1, v2) @signature `Lf/a/a/e/a/c;.delete:(Lf/a/a/c/c;)Z` @kind virtual;
  #L1cf63a.  v0:= temp;
  #L1cf63c.  if v0 == 0 then goto L1cf64a;
  #L1cf640.  call `dispose`(v2) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1cf646.  v2:= 1I;
  #L1cf648.  return v2;
  #L1cf64a.  v2:= 0I;
  #L1cf64c.  return v2;
}
