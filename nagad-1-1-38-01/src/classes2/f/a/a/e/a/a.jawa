record `f.a.a.e.a.a` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `f.a.a.c.c` @kind interface {
}
global `f.a.a.e.a.a` `@@f.a.a.e.a.a.f` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `f.a.a.e.a.a`[] `@@f.a.a.e.a.a.g` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lf/a/a/e/a/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1cf394.  v0:= new `f.a.a.e.a.a`;
  #L1cf398.  v1:= 0I;
  #L1cf39a.  v2:= "DISPOSED" @kind object;
  #L1cf39e.  call `<init>`(v0, v2, v1) @signature `Lf/a/a/e/a/a;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1cf3a4.  `@@f.a.a.e.a.a.f` @type ^`f.a.a.e.a.a` := v0 @kind object;
  #L1cf3a8.  v0:= 1I;
  #L1cf3aa.  v0:= new `f.a.a.e.a.a`[v0];
  #L1cf3ae.  v2:= `@@f.a.a.e.a.a.f` @type ^`f.a.a.e.a.a` @kind object;
  #L1cf3b2.  v0[v1]:= v2 @kind object;
  #L1cf3b6.  `@@f.a.a.e.a.a.g` @type ^`f.a.a.e.a.a`[] := v0 @kind object;
  #L1cf3ba.  return @kind void;
}
procedure `void` `<init>`(`f.a.a.e.a.a` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lf/a/a/e/a/a;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1cf3cc.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1cf3d2.  return @kind void;
}
procedure `boolean` `dispose`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lf/a/a/e/a/a;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1cf274.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1cf27a.  v0:= temp @kind object;
  #L1cf27c.  v0:= (`f.a.a.c.c`) v0 @kind object;
  #L1cf280.  v1:= `@@f.a.a.e.a.a.f` @type ^`f.a.a.e.a.a` @kind object;
  #L1cf284.  if v0 == v1 then goto L1cf2a6;
  #L1cf288.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1cf28e.  v2:= temp @kind object;
  #L1cf290.  v2:= (`f.a.a.c.c`) v2 @kind object;
  #L1cf294.  if v2 == v1 then goto L1cf2a6;
  #L1cf298.  if v2 == 0 then goto L1cf2a2;
  #L1cf29c.  call `dispose`(v2) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1cf2a2.  v2:= 1I;
  #L1cf2a4.  return v2;
  #L1cf2a6.  v2:= 0I;
  #L1cf2a8.  return v2;
}
procedure `void` `reportDisposableSet`() @signature `Lf/a/a/e/a/a;.reportDisposableSet:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1cf3f8.  v0:= new `io.reactivex.rxjava3.exceptions.ProtocolViolationException`;
  #L1cf3fc.  v1:= "Disposable already set!" @kind object;
  #L1cf400.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cf406.  call `onError`(v0) @signature `Lf/a/a/g/a;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L1cf40c.  return @kind void;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `f.a.a.c.c` v2 @kind object) @signature `Lf/a/a/e/a/a;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lf/a/a/c/c;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1cf2bc.  v0:= "d is null" @kind object;
  #L1cf2c0.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1cf2c6.  v0:= 0I;
  #L1cf2c8.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1cf2ce.  v0:= temp;
  #L1cf2d0.  if v0 != 0 then goto L1cf2f4;
  #L1cf2d4.  call `dispose`(v2) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1cf2da.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1cf2e0.  v1:= temp @kind object;
  #L1cf2e2.  v2:= `@@f.a.a.e.a.a.f` @type ^`f.a.a.e.a.a` @kind object;
  #L1cf2e6.  if v1 == v2 then goto L1cf2f0;
  #L1cf2ea.  call `reportDisposableSet`() @signature `Lf/a/a/e/a/a;.reportDisposableSet:()V` @kind static;
  #L1cf2f0.  v1:= 0I;
  #L1cf2f2.  return v1;
  #L1cf2f4.  v1:= 1I;
  #L1cf2f6.  return v1;
}
procedure `boolean` `validate`(`f.a.a.c.c` v1 @kind object, `f.a.a.c.c` v2 @kind object) @signature `Lf/a/a/e/a/a;.validate:(Lf/a/a/c/c;Lf/a/a/c/c;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1cf308.  v0:= 0I;
  #L1cf30a.  if v2 != 0 then goto L1cf324;
  #L1cf30e.  v1:= new `java.lang.NullPointerException`;
  #L1cf312.  v2:= "next is null" @kind object;
  #L1cf316.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cf31c.  call `onError`(v1) @signature `Lf/a/a/g/a;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L1cf322.  return v0;
  #L1cf324.  if v1 == 0 then goto L1cf336;
  #L1cf328.  call `dispose`(v2) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1cf32e.  call `reportDisposableSet`() @signature `Lf/a/a/e/a/a;.reportDisposableSet:()V` @kind static;
  #L1cf334.  return v0;
  #L1cf336.  v1:= 1I;
  #L1cf338.  return v1;
}
procedure `f.a.a.e.a.a` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lf/a/a/e/a/a;.valueOf:(Ljava/lang/String;)Lf/a/a/e/a/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1cf34c.  v0:= constclass @type ^`f.a.a.e.a.a` @kind object;
  #L1cf350.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L1cf356.  v1:= temp @kind object;
  #L1cf358.  v1:= (`f.a.a.e.a.a`) v1 @kind object;
  #L1cf35c.  return v1 @kind object;
}
procedure `f.a.a.e.a.a`[] `values`() @signature `Lf/a/a/e/a/a;.values:()[Lf/a/a/e/a/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1cf370.  v0:= `@@f.a.a.e.a.a.g` @type ^`f.a.a.e.a.a`[] @kind object;
  #L1cf374.  call temp:= `clone`(v0) @signature `[Lf/a/a/e/a/a;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1cf37a.  v0:= temp @kind object;
  #L1cf37c.  v0:= (`f.a.a.e.a.a`[]) v0 @kind object;
  #L1cf380.  return v0 @kind object;
}
procedure `void` `dispose`(`f.a.a.e.a.a` v0 @kind this) @signature `Lf/a/a/e/a/a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L1cf3e4.  return @kind void;
}
