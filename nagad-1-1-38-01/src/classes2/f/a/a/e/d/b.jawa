record `f.a.a.e.d.b` @kind class @AccessFlag PUBLIC extends `f.a.a.e.d.a` @kind class {
  `f.a.a.b.d` `f.a.a.e.d.b.f` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `f.a.a.e.d.b.g` @AccessFlag PROTECTED;
}
global `long` `@@f.a.a.e.d.b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`f.a.a.e.d.b` v0 @kind this, `f.a.a.b.d` v1 @kind object) @signature `Lf/a/a/e/d/b;.<init>:(Lf/a/a/b/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1cfc08.  call `<init>`(v0) @signature `Lf/a/a/e/d/a;.<init>:()V` @kind direct;
  #L1cfc0e.  v0.`f.a.a.e.d.b.f` @type ^`f.a.a.b.d` := v1 @kind object;
  #L1cfc12.  return @kind void;
}
procedure `void` `clear`(`f.a.a.e.d.b` v1 @kind this) @signature `Lf/a/a/e/d/b;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1cfc24.  v0:= 32I;
  #L1cfc28.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L1cfc2e.  v0:= 0I;
  #L1cfc30.  v1.`f.a.a.e.d.b.g` @type ^`java.lang.Object` := v0 @kind object;
  #L1cfc34.  return @kind void;
}
procedure `void` `complete`(`f.a.a.e.d.b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lf/a/a/e/d/b;.complete:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1cfc48.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L1cfc4e.  v0:= temp;
  #L1cfc50.  v1:= v0 ^& 54;
  #L1cfc54.  if v1 == 0 then goto L1cfc5a;
  #L1cfc58.  return @kind void;
  #L1cfc5a.  v1:= v3.`f.a.a.e.d.b.f` @type ^`f.a.a.b.d` @kind object;
  #L1cfc5e.  v2:= 8I;
  #L1cfc62.  if v0 != v2 then goto L1cfc7e;
  #L1cfc66.  v3.`f.a.a.e.d.b.g` @type ^`java.lang.Object` := v4 @kind object;
  #L1cfc6a.  v4:= 16I;
  #L1cfc6e.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L1cfc74.  v4:= 0I;
  #L1cfc76.  call `onNext`(v1, v4) @signature `Lf/a/a/b/d;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L1cfc7c.  goto L1cfc8c;
  #L1cfc7e.  v0:= 2I;
  #L1cfc80.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L1cfc86.  call `onNext`(v1, v4) @signature `Lf/a/a/b/d;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L1cfc8c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L1cfc92.  v4:= temp;
  #L1cfc94.  v0:= 4I;
  #L1cfc96.  if v4 == v0 then goto L1cfca0;
  #L1cfc9a.  call `onComplete`(v1) @signature `Lf/a/a/b/d;.onComplete:()V` @kind interface;
  #L1cfca0.  return @kind void;
}
procedure `void` `dispose`(`f.a.a.e.d.b` v1 @kind this) @signature `Lf/a/a/e/d/b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cfcb4.  v0:= 4I;
  #L1cfcb6.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L1cfcbc.  v0:= 0I;
  #L1cfcbe.  v1.`f.a.a.e.d.b.g` @type ^`java.lang.Object` := v0 @kind object;
  #L1cfcc2.  return @kind void;
}
procedure `boolean` `isDisposed`(`f.a.a.e.d.b` v2 @kind this) @signature `Lf/a/a/e/d/b;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1cfb58.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L1cfb5e.  v0:= temp;
  #L1cfb60.  v1:= 4I;
  #L1cfb62.  if v0 != v1 then goto L1cfb6a;
  #L1cfb66.  v0:= 1I;
  #L1cfb68.  goto L1cfb6c;
  #L1cfb6a.  v0:= 0I;
  #L1cfb6c.  return v0;
}
procedure `boolean` `isEmpty`(`f.a.a.e.d.b` v2 @kind this) @signature `Lf/a/a/e/d/b;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1cfb80.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L1cfb86.  v0:= temp;
  #L1cfb88.  v1:= 16I;
  #L1cfb8c.  if v0 == v1 then goto L1cfb94;
  #L1cfb90.  v0:= 1I;
  #L1cfb92.  goto L1cfb96;
  #L1cfb94.  v0:= 0I;
  #L1cfb96.  return v0;
}
procedure `java.lang.Object` `poll`(`f.a.a.e.d.b` v3 @kind this) @signature `Lf/a/a/e/d/b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1cfbd0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L1cfbd6.  v0:= temp;
  #L1cfbd8.  v1:= 0I;
  #L1cfbda.  v2:= 16I;
  #L1cfbde.  if v0 != v2 then goto L1cfbf6;
  #L1cfbe2.  v0:= v3.`f.a.a.e.d.b.g` @type ^`java.lang.Object` @kind object;
  #L1cfbe6.  v3.`f.a.a.e.d.b.g` @type ^`java.lang.Object` := v1 @kind object;
  #L1cfbea.  v1:= 32I;
  #L1cfbee.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L1cfbf4.  return v0 @kind object;
  #L1cfbf6.  return v1 @kind object;
}
procedure `int` `requestFusion`(`f.a.a.e.d.b` v1 @kind this, `int` v2 ) @signature `Lf/a/a/e/d/b;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1cfba8.  v0:= 2I;
  #L1cfbaa.  v2:= v2 ^& v0 @kind int;
  #L1cfbac.  if v2 == 0 then goto L1cfbbc;
  #L1cfbb0.  v2:= 8I;
  #L1cfbb4.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L1cfbba.  return v0;
  #L1cfbbc.  v2:= 0I;
  #L1cfbbe.  return v2;
}
