record `f.a.a.e.d.c` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `f.a.a.b.d` @kind interface, `f.a.a.c.c` @kind interface, `f.a.a.f.a` @kind interface {
  `f.a.a.d.d` `f.a.a.e.d.c.f` @AccessFlag FINAL;
  `f.a.a.d.d` `f.a.a.e.d.c.g` @AccessFlag FINAL;
  `f.a.a.d.a` `f.a.a.e.d.c.h` @AccessFlag FINAL;
  `f.a.a.d.d` `f.a.a.e.d.c.i` @AccessFlag FINAL;
}
global `long` `@@f.a.a.e.d.c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`f.a.a.e.d.c` v0 @kind this, `f.a.a.d.d` v1 @kind object, `f.a.a.d.d` v2 @kind object, `f.a.a.d.a` v3 @kind object, `f.a.a.d.d` v4 @kind object) @signature `Lf/a/a/e/d/c;.<init>:(Lf/a/a/d/d;Lf/a/a/d/d;Lf/a/a/d/a;Lf/a/a/d/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1cfcfc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L1cfd02.  v0.`f.a.a.e.d.c.f` @type ^`f.a.a.d.d` := v1 @kind object;
  #L1cfd06.  v0.`f.a.a.e.d.c.g` @type ^`f.a.a.d.d` := v2 @kind object;
  #L1cfd0a.  v0.`f.a.a.e.d.c.h` @type ^`f.a.a.d.a` := v3 @kind object;
  #L1cfd0e.  v0.`f.a.a.e.d.c.i` @type ^`f.a.a.d.d` := v4 @kind object;
  #L1cfd12.  return @kind void;
}
procedure `void` `dispose`(`f.a.a.e.d.c` v0 @kind this) @signature `Lf/a/a/e/d/c;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L1cfd24.  call temp:= `dispose`(v0) @signature `Lf/a/a/e/a/a;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L1cfd2a.  return @kind void;
}
procedure `boolean` `isDisposed`(`f.a.a.e.d.c` v2 @kind this) @signature `Lf/a/a/e/d/c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cfcd4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1cfcda.  v0:= temp @kind object;
  #L1cfcdc.  v1:= `@@f.a.a.e.a.a.f` @type ^`f.a.a.e.a.a` @kind object;
  #L1cfce0.  if v0 != v1 then goto L1cfce8;
  #L1cfce4.  v0:= 1I;
  #L1cfce6.  goto L1cfcea;
  #L1cfce8.  v0:= 0I;
  #L1cfcea.  return v0;
}
procedure `void` `onComplete`(`f.a.a.e.d.c` v1 @kind this) @signature `Lf/a/a/e/d/c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cfd3c.  call temp:= `isDisposed`(v1) @signature `Lf/a/a/e/d/c;.isDisposed:()Z` @kind virtual;
  #L1cfd42.  v0:= temp;
  #L1cfd44.  if v0 != 0 then goto L1cfd6c;
  #L1cfd48.  v0:= `@@f.a.a.e.a.a.f` @type ^`f.a.a.e.a.a` @kind object;
  #L1cfd4c.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L1cfd52.  v0:= v1.`f.a.a.e.d.c.h` @type ^`f.a.a.d.a` @kind object;
  #L1cfd56.  call `run`(v0) @signature `Lf/a/a/d/a;.run:()V` @kind interface;
  #L1cfd5c.  goto L1cfd6c;
  #L1cfd5e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1cfd60.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/a;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L1cfd66.  call `onError`(v0) @signature `Lf/a/a/g/a;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L1cfd6c.  return @kind void;
  catch `java.lang.Throwable` @[L1cfd52..L1cfd5c] goto L1cfd5e;
}
procedure `void` `onError`(`f.a.a.e.d.c` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lf/a/a/e/d/c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1cfd8c.  call temp:= `isDisposed`(v4) @signature `Lf/a/a/e/d/c;.isDisposed:()Z` @kind virtual;
  #L1cfd92.  v0:= temp;
  #L1cfd94.  if v0 != 0 then goto L1cfdda;
  #L1cfd98.  v0:= `@@f.a.a.e.a.a.f` @type ^`f.a.a.e.a.a` @kind object;
  #L1cfd9c.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L1cfda2.  v0:= v4.`f.a.a.e.d.c.g` @type ^`f.a.a.d.d` @kind object;
  #L1cfda6.  call `accept`(v0, v5) @signature `Lf/a/a/d/d;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L1cfdac.  goto L1cfde0;
  #L1cfdae.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1cfdb0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/a;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L1cfdb6.  v1:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L1cfdba.  v2:= 2I;
  #L1cfdbc.  v2:= new `java.lang.Throwable`[v2];
  #L1cfdc0.  v3:= 0I;
  #L1cfdc2.  v2[v3]:= v5 @kind object;
  #L1cfdc6.  v5:= 1I;
  #L1cfdc8.  v2[v5]:= v0 @kind object;
  #L1cfdcc.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L1cfdd2.  call `onError`(v1) @signature `Lf/a/a/g/a;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L1cfdd8.  goto L1cfde0;
  #L1cfdda.  call `onError`(v5) @signature `Lf/a/a/g/a;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L1cfde0.  return @kind void;
  catch `java.lang.Throwable` @[L1cfda2..L1cfdac] goto L1cfdae;
}
procedure `void` `onNext`(`f.a.a.e.d.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lf/a/a/e/d/c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cfe00.  call temp:= `isDisposed`(v1) @signature `Lf/a/a/e/d/c;.isDisposed:()Z` @kind virtual;
  #L1cfe06.  v0:= temp;
  #L1cfe08.  if v0 != 0 then goto L1cfe38;
  #L1cfe0c.  v0:= v1.`f.a.a.e.d.c.f` @type ^`f.a.a.d.d` @kind object;
  #L1cfe10.  call `accept`(v0, v2) @signature `Lf/a/a/d/d;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L1cfe16.  goto L1cfe38;
  #L1cfe18.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1cfe1a.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/a;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L1cfe20.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1cfe26.  v0:= temp @kind object;
  #L1cfe28.  v0:= (`f.a.a.c.c`) v0 @kind object;
  #L1cfe2c.  call `dispose`(v0) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1cfe32.  call `onError`(v1, v2) @signature `Lf/a/a/e/d/c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L1cfe38.  return @kind void;
  catch `java.lang.Throwable` @[L1cfe0c..L1cfe16] goto L1cfe18;
}
procedure `void` `onSubscribe`(`f.a.a.e.d.c` v1 @kind this, `f.a.a.c.c` v2 @kind object) @signature `Lf/a/a/e/d/c;.onSubscribe:(Lf/a/a/c/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cfe58.  call temp:= `setOnce`(v1, v2) @signature `Lf/a/a/e/a/a;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lf/a/a/c/c;)Z` @kind static;
  #L1cfe5e.  v0:= temp;
  #L1cfe60.  if v0 == 0 then goto L1cfe84;
  #L1cfe64.  v0:= v1.`f.a.a.e.d.c.i` @type ^`f.a.a.d.d` @kind object;
  #L1cfe68.  call `accept`(v0, v1) @signature `Lf/a/a/d/d;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L1cfe6e.  goto L1cfe84;
  #L1cfe70.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1cfe72.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/a;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L1cfe78.  call `dispose`(v2) @signature `Lf/a/a/c/c;.dispose:()V` @kind interface;
  #L1cfe7e.  call `onError`(v1, v0) @signature `Lf/a/a/e/d/c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L1cfe84.  return @kind void;
  catch `java.lang.Throwable` @[L1cfe64..L1cfe6e] goto L1cfe70;
}
