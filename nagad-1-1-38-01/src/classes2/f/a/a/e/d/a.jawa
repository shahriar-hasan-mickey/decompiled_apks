record `f.a.a.e.d.a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `f.a.a.e.c.b` @kind interface {
}
global `long` `@@f.a.a.e.d.a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`f.a.a.e.d.a` v0 @kind this) @signature `Lf/a/a/e/d/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1cfb40.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L1cfb46.  return @kind void;
}
procedure `boolean` `offer`(`f.a.a.e.d.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lf/a/a/e/d/a;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1cfb20.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1cfb24.  v0:= "Should not be called" @kind object;
  #L1cfb28.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cfb2e.  throw v2;
}
