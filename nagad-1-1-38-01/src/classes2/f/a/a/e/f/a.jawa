record `f.a.a.e.f.a` @kind class @AccessFlag PUBLIC_FINAL extends `f.a.a.e.c.d` @kind interface {
  `java.util.concurrent.atomic.AtomicLong` `f.a.a.e.f.a.f` @AccessFlag FINAL;
  `int` `f.a.a.e.f.a.g` @AccessFlag ;
  `long` `f.a.a.e.f.a.h` @AccessFlag ;
  `int` `f.a.a.e.f.a.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `f.a.a.e.f.a.j` @AccessFlag ;
  `int` `f.a.a.e.f.a.k` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `f.a.a.e.f.a.l` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `f.a.a.e.f.a.m` @AccessFlag FINAL;
}
global `int` `@@f.a.a.e.f.a.n` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@f.a.a.e.f.a.o` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lf/a/a/e/f/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1d08a4.  v0:= "jctools.spsc.max.lookahead.step" @kind object;
  #L1d08a8.  v1:= 4096I;
  #L1d08ac.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L1d08b2.  v0:= temp @kind object;
  #L1d08b4.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1d08ba.  v0:= temp;
  #L1d08bc.  `@@f.a.a.e.f.a.n` @type ^`int` := v0;
  #L1d08c0.  v0:= new `java.lang.Object`;
  #L1d08c4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d08ca.  `@@f.a.a.e.f.a.o` @type ^`java.lang.Object` := v0 @kind object;
  #L1d08ce.  return @kind void;
}
procedure `void` `<init>`(`f.a.a.e.f.a` v3 @kind this, `int` v4 ) @signature `Lf/a/a/e/f/a;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1d08e0.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d08e6.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L1d08ea.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L1d08f0.  v3.`f.a.a.e.f.a.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L1d08f4.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L1d08f8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L1d08fe.  v3.`f.a.a.e.f.a.m` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L1d0902.  v0:= 8I;
  #L1d0906.  call temp:= `max`(v0, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1d090c.  v4:= temp;
  #L1d090e.  call temp:= `roundToPowerOfTwo`(v4) @signature `Lf/a/a/e/h/c;.roundToPowerOfTwo:(I)I` @kind static;
  #L1d0914.  v4:= temp;
  #L1d0916.  v0:= v4 + -1;
  #L1d091a.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L1d091e.  v2:= v4 + 1;
  #L1d0922.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L1d0928.  v3.`f.a.a.e.f.a.j` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L1d092c.  v3.`f.a.a.e.f.a.i` @type ^`int` := v0;
  #L1d0930.  call `a`(v3, v4) @signature `Lf/a/a/e/f/a;.a:(I)V` @kind direct;
  #L1d0936.  v3.`f.a.a.e.f.a.l` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L1d093a.  v3.`f.a.a.e.f.a.k` @type ^`int` := v0;
  #L1d093e.  v0:= v0 + -1;
  #L1d0942.  v0:= (`long`) v0 @kind i2l;
  #L1d0944.  v3.`f.a.a.e.f.a.h` @type ^`long` := v0 @kind wide;
  #L1d0948.  v0:= 0L;
  #L1d094c.  call `b`(v3, v0) @signature `Lf/a/a/e/f/a;.b:(J)V` @kind direct;
  #L1d0952.  return @kind void;
}
procedure `int` `a`(`long` v0 , `int` v2 ) @signature `Lf/a/a/e/f/a;.a:(JI)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L1d0704.  v1:= (`int`) v0 @kind l2i;
  #L1d0706.  v0:= v1 ^& v2 @kind int;
  #L1d070a.  call temp:= `b`(v0) @signature `Lf/a/a/e/f/a;.b:(I)I` @kind static;
  #L1d0710.  return v0;
}
procedure `long` `a`(`f.a.a.e.f.a` v2 @kind this) @signature `Lf/a/a/e/f/a;.a:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1d0824.  v0:= v2.`f.a.a.e.f.a.m` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L1d0828.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L1d082e.  v0:= temp @kind wide;
  #L1d0830.  return v0 @kind wide;
}
procedure `java.lang.Object` `a`(`java.util.concurrent.atomic.AtomicReferenceArray` v0 @kind object, `int` v1 ) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L1d0724.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d072a.  v0:= temp @kind object;
  #L1d072c.  return v0 @kind object;
}
procedure `java.lang.Object` `a`(`f.a.a.e.f.a` v3 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v4 @kind object, `long` v5 , `int` v7 ) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1d0740.  v3.`f.a.a.e.f.a.l` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v4 @kind object;
  #L1d0744.  call temp:= `a`(v5, v7) @signature `Lf/a/a/e/f/a;.a:(JI)I` @kind static;
  #L1d074a.  v7:= temp;
  #L1d074c.  call temp:= `a`(v4, v7) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L1d0752.  v0:= temp @kind object;
  #L1d0754.  if v0 == 0 then goto L1d076c;
  #L1d0758.  v1:= 0I;
  #L1d075a.  call `a`(v4, v7, v1) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L1d0760.  v1:= 1L;
  #L1d0764.  v5:= v5 + v1 @kind long;
  #L1d0766.  call `a`(v3, v5) @signature `Lf/a/a/e/f/a;.a:(J)V` @kind direct;
  #L1d076c.  return v0 @kind object;
}
procedure `void` `a`(`f.a.a.e.f.a` v1 @kind this, `int` v2 ) @signature `Lf/a/a/e/f/a;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1d0964.  v2:= v2 / 4;
  #L1d0968.  v0:= `@@f.a.a.e.f.a.n` @type ^`int`;
  #L1d096c.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d0972.  v2:= temp;
  #L1d0974.  v1.`f.a.a.e.f.a.g` @type ^`int` := v2;
  #L1d0978.  return @kind void;
}
procedure `void` `a`(`f.a.a.e.f.a` v1 @kind this, `long` v2 ) @signature `Lf/a/a/e/f/a;.a:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1d0a0c.  v0:= v1.`f.a.a.e.f.a.m` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L1d0a10.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L1d0a16.  return @kind void;
}
procedure `void` `a`(`java.util.concurrent.atomic.AtomicReferenceArray` v0 @kind object, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L1d0a28.  call `lazySet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L1d0a2e.  return @kind void;
}
procedure `void` `a`(`f.a.a.e.f.a` v4 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v5 @kind object, `long` v6 , `int` v8 , `java.lang.Object` v9 @kind object, `long` v10 ) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d09b8.  call temp:= `length`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L1d09be.  v0:= temp;
  #L1d09c0.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L1d09c4.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L1d09ca.  v4.`f.a.a.e.f.a.j` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L1d09ce.  v10:= v10 + v6 @kind long;
  #L1d09d0.  v2:= 1L;
  #L1d09d4.  v10:= v10 - v2 @kind long;
  #L1d09d6.  v4.`f.a.a.e.f.a.h` @type ^`long` := v10 @kind wide;
  #L1d09da.  call `a`(v1, v8, v9) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L1d09e0.  call `a`(v4, v5, v1) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V` @kind direct;
  #L1d09e6.  v9:= `@@f.a.a.e.f.a.o` @type ^`java.lang.Object` @kind object;
  #L1d09ea.  call `a`(v5, v8, v9) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L1d09f0.  v6:= v6 + v2 @kind long;
  #L1d09f2.  call `b`(v4, v6) @signature `Lf/a/a/e/f/a;.b:(J)V` @kind direct;
  #L1d09f8.  return @kind void;
}
procedure `void` `a`(`f.a.a.e.f.a` v1 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v2 @kind object, `java.util.concurrent.atomic.AtomicReferenceArray` v3 @kind object) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1d0a40.  call temp:= `length`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L1d0a46.  v0:= temp;
  #L1d0a48.  v0:= v0 + -1;
  #L1d0a4c.  call temp:= `b`(v0) @signature `Lf/a/a/e/f/a;.b:(I)I` @kind static;
  #L1d0a52.  call `a`(v2, v0, v3) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L1d0a58.  return @kind void;
}
procedure `boolean` `a`(`f.a.a.e.f.a` v0 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v1 @kind object, `java.lang.Object` v2 @kind object, `long` v3 , `int` v5 ) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @AccessFlag PRIVATE {
    temp;

  #L1d06c8.  call `a`(v1, v5, v2) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L1d06ce.  v1:= 1L;
  #L1d06d2.  v3:= v3 + v1 @kind long;
  #L1d06d4.  call `b`(v0, v3) @signature `Lf/a/a/e/f/a;.b:(J)V` @kind direct;
  #L1d06da.  v1:= 1I;
  #L1d06dc.  return v1;
}
procedure `int` `b`(`int` v0 ) @signature `Lf/a/a/e/f/a;.b:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L1d06f0.  return v0;
}
procedure `long` `b`(`f.a.a.e.f.a` v2 @kind this) @signature `Lf/a/a/e/f/a;.b:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1d0844.  v0:= v2.`f.a.a.e.f.a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L1d0848.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L1d084e.  v0:= temp @kind wide;
  #L1d0850.  return v0 @kind wide;
}
procedure `java.util.concurrent.atomic.AtomicReferenceArray` `b`(`f.a.a.e.f.a` v2 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v3 @kind object, `int` v4 ) @signature `Lf/a/a/e/f/a;.b:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/util/concurrent/atomic/AtomicReferenceArray;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1d07f8.  call temp:= `b`(v4) @signature `Lf/a/a/e/f/a;.b:(I)I` @kind static;
  #L1d07fe.  call temp:= `a`(v3, v4) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L1d0804.  v0:= temp @kind object;
  #L1d0806.  v0:= (`java.util.concurrent.atomic.AtomicReferenceArray`) v0 @kind object;
  #L1d080a.  v1:= 0I;
  #L1d080c.  call `a`(v3, v4, v1) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L1d0812.  return v0 @kind object;
}
procedure `void` `b`(`f.a.a.e.f.a` v1 @kind this, `long` v2 ) @signature `Lf/a/a/e/f/a;.b:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1d0a6c.  v0:= v1.`f.a.a.e.f.a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L1d0a70.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L1d0a76.  return @kind void;
}
procedure `long` `c`(`f.a.a.e.f.a` v2 @kind this) @signature `Lf/a/a/e/f/a;.c:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1d0864.  v0:= v2.`f.a.a.e.f.a.m` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L1d0868.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L1d086e.  v0:= temp @kind wide;
  #L1d0870.  return v0 @kind wide;
}
procedure `long` `d`(`f.a.a.e.f.a` v2 @kind this) @signature `Lf/a/a/e/f/a;.d:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1d0884.  v0:= v2.`f.a.a.e.f.a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L1d0888.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L1d088e.  v0:= temp @kind wide;
  #L1d0890.  return v0 @kind wide;
}
procedure `void` `clear`(`f.a.a.e.f.a` v1 @kind this) @signature `Lf/a/a/e/f/a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d098c.  call temp:= `poll`(v1) @signature `Lf/a/a/e/f/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L1d0992.  v0:= temp @kind object;
  #L1d0994.  if v0 != 0 then goto L1d098c;
  #L1d0998.  call temp:= `isEmpty`(v1) @signature `Lf/a/a/e/f/a;.isEmpty:()Z` @kind virtual;
  #L1d099e.  v0:= temp;
  #L1d09a0.  if v0 != 0 then goto L1d09a6;
  #L1d09a4.  goto L1d098c;
  #L1d09a6.  return @kind void;
}
procedure `boolean` `isEmpty`(`f.a.a.e.f.a` v5 @kind this) @signature `Lf/a/a/e/f/a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d05d4.  call temp:= `d`(v5) @signature `Lf/a/a/e/f/a;.d:()J` @kind direct;
  #L1d05da.  v0:= temp @kind wide;
  #L1d05dc.  call temp:= `c`(v5) @signature `Lf/a/a/e/f/a;.c:()J` @kind direct;
  #L1d05e2.  v2:= temp @kind wide;
  #L1d05e4.  v4:= lcmp(v0, v2);
  #L1d05e8.  if v4 != 0 then goto L1d05f0;
  #L1d05ec.  v0:= 1I;
  #L1d05ee.  goto L1d05f2;
  #L1d05f0.  v0:= 0I;
  #L1d05f2.  return v0;
}
procedure `boolean` `offer`(`f.a.a.e.f.a` v10 @kind this, `java.lang.Object` v11 @kind object) @signature `Lf/a/a/e/f/a;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1d0604.  if v11 == 0 then goto L1d06a6;
  #L1d0608.  v1:= v10.`f.a.a.e.f.a.j` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1d060c.  call temp:= `b`(v10) @signature `Lf/a/a/e/f/a;.b:()J` @kind direct;
  #L1d0612.  v3:= temp @kind wide;
  #L1d0614.  v0:= v10.`f.a.a.e.f.a.i` @type ^`int`;
  #L1d0618.  call temp:= `a`(v3, v0) @signature `Lf/a/a/e/f/a;.a:(JI)I` @kind static;
  #L1d061e.  v5:= temp;
  #L1d0620.  v6:= v10.`f.a.a.e.f.a.h` @type ^`long` @kind wide;
  #L1d0624.  v2:= lcmp(v3, v6);
  #L1d0628.  if v2 >= 0 then goto L1d063a;
  #L1d062c.  v0:= v10 @kind object;
  #L1d062e.  v2:= v11 @kind object;
  #L1d0630.  call temp:= `a`(v0, v1, v2, v3, v5) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L1d0636.  v11:= temp;
  #L1d0638.  return v11;
  #L1d063a.  v2:= v10.`f.a.a.e.f.a.g` @type ^`int`;
  #L1d063e.  v6:= (`long`) v2 @kind i2l;
  #L1d0640.  v6:= v6 + v3 @kind long;
  #L1d0642.  call temp:= `a`(v6, v0) @signature `Lf/a/a/e/f/a;.a:(JI)I` @kind static;
  #L1d0648.  v2:= temp;
  #L1d064a.  call temp:= `a`(v1, v2) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L1d0650.  v2:= temp @kind object;
  #L1d0652.  v8:= 1L;
  #L1d0656.  if v2 != 0 then goto L1d066e;
  #L1d065a.  v6:= v6 - v8 @kind long;
  #L1d065c.  v10.`f.a.a.e.f.a.h` @type ^`long` := v6 @kind wide;
  #L1d0660.  v0:= v10 @kind object;
  #L1d0662.  v2:= v11 @kind object;
  #L1d0664.  call temp:= `a`(v0, v1, v2, v3, v5) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L1d066a.  v11:= temp;
  #L1d066c.  return v11;
  #L1d066e.  v8:= v8 + v3 @kind long;
  #L1d0670.  call temp:= `a`(v8, v0) @signature `Lf/a/a/e/f/a;.a:(JI)I` @kind static;
  #L1d0676.  v2:= temp;
  #L1d0678.  call temp:= `a`(v1, v2) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L1d067e.  v2:= temp @kind object;
  #L1d0680.  if v2 != 0 then goto L1d0692;
  #L1d0684.  v0:= v10 @kind object;
  #L1d0686.  v2:= v11 @kind object;
  #L1d0688.  call temp:= `a`(v0, v1, v2, v3, v5) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L1d068e.  v11:= temp;
  #L1d0690.  return v11;
  #L1d0692.  v6:= (`long`) v0 @kind i2l;
  #L1d0694.  v0:= v10 @kind object;
  #L1d0696.  v2:= v3 @kind wide;
  #L1d0698.  v4:= v5;
  #L1d069a.  v5:= v11 @kind object;
  #L1d069c.  call `a`(v0, v1, v2, v4, v5, v6) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V` @kind direct;
  #L1d06a2.  v11:= 1I;
  #L1d06a4.  return v11;
  #L1d06a6.  v11:= new `java.lang.NullPointerException`;
  #L1d06aa.  v0:= "Null is not a valid element" @kind object;
  #L1d06ae.  call `<init>`(v11, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d06b4.  throw v11;
}
procedure `java.lang.Object` `poll`(`f.a.a.e.f.a` v8 @kind this) @signature `Lf/a/a/e/f/a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1d0780.  v0:= v8.`f.a.a.e.f.a.l` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1d0784.  call temp:= `a`(v8) @signature `Lf/a/a/e/f/a;.a:()J` @kind direct;
  #L1d078a.  v1:= temp @kind wide;
  #L1d078c.  v3:= v8.`f.a.a.e.f.a.k` @type ^`int`;
  #L1d0790.  call temp:= `a`(v1, v3) @signature `Lf/a/a/e/f/a;.a:(JI)I` @kind static;
  #L1d0796.  v4:= temp;
  #L1d0798.  call temp:= `a`(v0, v4) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L1d079e.  v5:= temp @kind object;
  #L1d07a0.  v6:= `@@f.a.a.e.f.a.o` @type ^`java.lang.Object` @kind object;
  #L1d07a4.  if v5 != v6 then goto L1d07ac;
  #L1d07a8.  v6:= 1I;
  #L1d07aa.  goto L1d07ae;
  #L1d07ac.  v6:= 0I;
  #L1d07ae.  v7:= 0I;
  #L1d07b0.  if v5 == 0 then goto L1d07cc;
  #L1d07b4.  if v6 != 0 then goto L1d07cc;
  #L1d07b8.  call `a`(v0, v4, v7) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L1d07be.  v3:= 1L;
  #L1d07c2.  v1:= v1 + v3 @kind long;
  #L1d07c4.  call `a`(v8, v1) @signature `Lf/a/a/e/f/a;.a:(J)V` @kind direct;
  #L1d07ca.  return v5 @kind object;
  #L1d07cc.  if v6 == 0 then goto L1d07e6;
  #L1d07d0.  v4:= v3 + 1;
  #L1d07d4.  call temp:= `b`(v8, v0, v4) @signature `Lf/a/a/e/f/a;.b:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/util/concurrent/atomic/AtomicReferenceArray;` @kind direct;
  #L1d07da.  v0:= temp @kind object;
  #L1d07dc.  call temp:= `a`(v8, v0, v1, v3) @signature `Lf/a/a/e/f/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @kind direct;
  #L1d07e2.  v0:= temp @kind object;
  #L1d07e4.  return v0 @kind object;
  #L1d07e6.  return v7 @kind object;
}
