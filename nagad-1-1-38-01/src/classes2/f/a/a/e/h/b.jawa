record `f.a.a.e.h.b` @kind class @AccessFlag PUBLIC_FINAL {
  `float` `f.a.a.e.h.b.a` @AccessFlag FINAL;
  `int` `f.a.a.e.h.b.b` @AccessFlag ;
  `int` `f.a.a.e.h.b.c` @AccessFlag ;
  `int` `f.a.a.e.h.b.d` @AccessFlag ;
  `java.lang.Object`[] `f.a.a.e.h.b.e` @AccessFlag ;
}
procedure `void` `<init>`(`f.a.a.e.h.b` v2 @kind this) @signature `Lf/a/a/e/h/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1d2650.  v0:= 16I;
  #L1d2654.  v1:= 0.75F;
  #L1d2658.  call `<init>`(v2, v0, v1) @signature `Lf/a/a/e/h/b;.<init>:(IF)V` @kind direct;
  #L1d265e.  return @kind void;
}
procedure `void` `<init>`(`f.a.a.e.h.b` v1 @kind this, `int` v2 , `float` v3 ) @signature `Lf/a/a/e/h/b;.<init>:(IF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d2670.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d2676.  v1.`f.a.a.e.h.b.a` @type ^`float` := v3;
  #L1d267a.  call temp:= `roundToPowerOfTwo`(v2) @signature `Lf/a/a/e/h/c;.roundToPowerOfTwo:(I)I` @kind static;
  #L1d2680.  v2:= temp;
  #L1d2682.  v0:= v2 + -1;
  #L1d2686.  v1.`f.a.a.e.h.b.b` @type ^`int` := v0;
  #L1d268a.  v0:= (`float`) v2 @kind i2f;
  #L1d268c.  v3:= v3 * v0 @kind float;
  #L1d2690.  v3:= (`int`) v3 @kind f2i;
  #L1d2692.  v1.`f.a.a.e.h.b.d` @type ^`int` := v3;
  #L1d2696.  v2:= new `java.lang.Object`[v2];
  #L1d269a.  v1.`f.a.a.e.h.b.e` @type ^`java.lang.Object`[] := v2 @kind object;
  #L1d269e.  return @kind void;
}
procedure `int` `a`(`int` v1 ) @signature `Lf/a/a/e/h/b;.a:(I)I` @AccessFlag STATIC {
    temp;
    v0;

  #L1d2614.  v0:= -1640531527I;
  #L1d261a.  v1:= v1 * v0 @kind int;
  #L1d261e.  v0:= v1 ^>> 16;
  #L1d2622.  v1:= v1 ^~ v0 @kind int;
  #L1d2624.  return v1;
}
procedure `void` `a`(`f.a.a.e.h.b` v8 @kind this) @signature `Lf/a/a/e/h/b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1d26b0.  v0:= v8.`f.a.a.e.h.b.e` @type ^`java.lang.Object`[] @kind object;
  #L1d26b4.  v1:= length @variable v0;
  #L1d26b6.  v2:= v1 ^< 1;
  #L1d26ba.  v3:= v2 + -1;
  #L1d26be.  v4:= new `java.lang.Object`[v2];
  #L1d26c2.  v5:= v8.`f.a.a.e.h.b.c` @type ^`int`;
  #L1d26c6.  v6:= v5 + -1;
  #L1d26ca.  if v5 == 0 then goto L1d2714;
  #L1d26ce.  v1:= v1 + -1;
  #L1d26d2.  v5:= v0[v1] @kind object;
  #L1d26d6.  if v5 != 0 then goto L1d26dc;
  #L1d26da.  goto L1d26ce;
  #L1d26dc.  v5:= v0[v1] @kind object;
  #L1d26e0.  call temp:= `hashCode`(v5) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1d26e6.  v5:= temp;
  #L1d26e8.  call temp:= `a`(v5) @signature `Lf/a/a/e/h/b;.a:(I)I` @kind static;
  #L1d26ee.  v5:= temp;
  #L1d26f0.  v5:= v5 ^& v3 @kind int;
  #L1d26f2.  v7:= v4[v5] @kind object;
  #L1d26f6.  if v7 == 0 then goto L1d2708;
  #L1d26fa.  v5:= v5 + 1;
  #L1d26fe.  v5:= v5 ^& v3 @kind int;
  #L1d2700.  v7:= v4[v5] @kind object;
  #L1d2704.  if v7 != 0 then goto L1d26fa;
  #L1d2708.  v7:= v0[v1] @kind object;
  #L1d270c.  v4[v5]:= v7 @kind object;
  #L1d2710.  v5:= v6;
  #L1d2712.  goto L1d26c6;
  #L1d2714.  v8.`f.a.a.e.h.b.b` @type ^`int` := v3;
  #L1d2718.  v0:= (`float`) v2 @kind i2f;
  #L1d271a.  v1:= v8.`f.a.a.e.h.b.a` @type ^`float`;
  #L1d271e.  v0:= v0 * v1 @kind float;
  #L1d2722.  v0:= (`int`) v0 @kind f2i;
  #L1d2724.  v8.`f.a.a.e.h.b.d` @type ^`int` := v0;
  #L1d2728.  v8.`f.a.a.e.h.b.e` @type ^`java.lang.Object`[] := v4 @kind object;
  #L1d272c.  return @kind void;
}
procedure `boolean` `a`(`f.a.a.e.h.b` v4 @kind this, `int` v5 , `java.lang.Object`[] v6 @kind object, `int` v7 ) @signature `Lf/a/a/e/h/b;.a:(I[Ljava/lang/Object;I)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d25ac.  v0:= v4.`f.a.a.e.h.b.c` @type ^`int`;
  #L1d25b0.  v1:= 1I;
  #L1d25b2.  v0:= v0 - v1 @kind int;
  #L1d25b4.  v4.`f.a.a.e.h.b.c` @type ^`int` := v0;
  #L1d25b8.  v0:= v5 + 1;
  #L1d25bc.  v0:= v0 ^& v7 @kind int;
  #L1d25be.  v2:= v6[v0] @kind object;
  #L1d25c2.  if v2 != 0 then goto L1d25ce;
  #L1d25c6.  v7:= 0I;
  #L1d25c8.  v6[v5]:= v7 @kind object;
  #L1d25cc.  return v1;
  #L1d25ce.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1d25d4.  v3:= temp;
  #L1d25d6.  call temp:= `a`(v3) @signature `Lf/a/a/e/h/b;.a:(I)I` @kind static;
  #L1d25dc.  v3:= temp;
  #L1d25de.  v3:= v3 ^& v7 @kind int;
  #L1d25e0.  if v5 > v0 then goto L1d25ee;
  #L1d25e4.  if v5 >= v3 then goto L1d25f6;
  #L1d25e8.  if v3 <= v0 then goto L1d25fe;
  #L1d25ec.  goto L1d25f6;
  #L1d25ee.  if v5 < v3 then goto L1d25fe;
  #L1d25f2.  if v3 <= v0 then goto L1d25fe;
  #L1d25f6.  v6[v5]:= v2 @kind object;
  #L1d25fa.  v5:= v0;
  #L1d25fc.  goto L1d25b8;
  #L1d25fe.  v0:= v0 + 1;
  #L1d2602.  goto L1d25bc;
}
procedure `boolean` `add`(`f.a.a.e.h.b` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lf/a/a/e/h/b;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1d24b8.  v0:= v6.`f.a.a.e.h.b.e` @type ^`java.lang.Object`[] @kind object;
  #L1d24bc.  v1:= v6.`f.a.a.e.h.b.b` @type ^`int`;
  #L1d24c0.  call temp:= `hashCode`(v7) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1d24c6.  v2:= temp;
  #L1d24c8.  call temp:= `a`(v2) @signature `Lf/a/a/e/h/b;.a:(I)I` @kind static;
  #L1d24ce.  v2:= temp;
  #L1d24d0.  v2:= v2 ^& v1 @kind int;
  #L1d24d2.  v3:= v0[v2] @kind object;
  #L1d24d6.  v4:= 1I;
  #L1d24d8.  if v3 == 0 then goto L1d2508;
  #L1d24dc.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d24e2.  v3:= temp;
  #L1d24e4.  v5:= 0I;
  #L1d24e6.  if v3 == 0 then goto L1d24ec;
  #L1d24ea.  return v5;
  #L1d24ec.  v2:= v2 + v4 @kind int;
  #L1d24ee.  v2:= v2 ^& v1 @kind int;
  #L1d24f0.  v3:= v0[v2] @kind object;
  #L1d24f4.  if v3 != 0 then goto L1d24fa;
  #L1d24f8.  goto L1d2508;
  #L1d24fa.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d2500.  v3:= temp;
  #L1d2502.  if v3 == 0 then goto L1d24ec;
  #L1d2506.  return v5;
  #L1d2508.  v0[v2]:= v7 @kind object;
  #L1d250c.  v7:= v6.`f.a.a.e.h.b.c` @type ^`int`;
  #L1d2510.  v7:= v7 + v4 @kind int;
  #L1d2512.  v6.`f.a.a.e.h.b.c` @type ^`int` := v7;
  #L1d2516.  v0:= v6.`f.a.a.e.h.b.d` @type ^`int`;
  #L1d251a.  if v7 < v0 then goto L1d2524;
  #L1d251e.  call `a`(v6) @signature `Lf/a/a/e/h/b;.a:()V` @kind virtual;
  #L1d2524.  return v4;
}
procedure `java.lang.Object`[] `keys`(`f.a.a.e.h.b` v1 @kind this) @signature `Lf/a/a/e/h/b;.keys:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d2638.  v0:= v1.`f.a.a.e.h.b.e` @type ^`java.lang.Object`[] @kind object;
  #L1d263c.  return v0 @kind object;
}
procedure `boolean` `remove`(`f.a.a.e.h.b` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lf/a/a/e/h/b;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d2538.  v0:= v5.`f.a.a.e.h.b.e` @type ^`java.lang.Object`[] @kind object;
  #L1d253c.  v1:= v5.`f.a.a.e.h.b.b` @type ^`int`;
  #L1d2540.  call temp:= `hashCode`(v6) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1d2546.  v2:= temp;
  #L1d2548.  call temp:= `a`(v2) @signature `Lf/a/a/e/h/b;.a:(I)I` @kind static;
  #L1d254e.  v2:= temp;
  #L1d2550.  v2:= v2 ^& v1 @kind int;
  #L1d2552.  v3:= v0[v2] @kind object;
  #L1d2556.  v4:= 0I;
  #L1d2558.  if v3 != 0 then goto L1d255e;
  #L1d255c.  return v4;
  #L1d255e.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d2564.  v3:= temp;
  #L1d2566.  if v3 == 0 then goto L1d2574;
  #L1d256a.  call temp:= `a`(v5, v2, v0, v1) @signature `Lf/a/a/e/h/b;.a:(I[Ljava/lang/Object;I)Z` @kind virtual;
  #L1d2570.  v6:= temp;
  #L1d2572.  return v6;
  #L1d2574.  v2:= v2 + 1;
  #L1d2578.  v2:= v2 ^& v1 @kind int;
  #L1d257a.  v3:= v0[v2] @kind object;
  #L1d257e.  if v3 != 0 then goto L1d2584;
  #L1d2582.  return v4;
  #L1d2584.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d258a.  v3:= temp;
  #L1d258c.  if v3 == 0 then goto L1d2574;
  #L1d2590.  call temp:= `a`(v5, v2, v0, v1) @signature `Lf/a/a/e/h/b;.a:(I[Ljava/lang/Object;I)Z` @kind virtual;
  #L1d2596.  v6:= temp;
  #L1d2598.  return v6;
}
