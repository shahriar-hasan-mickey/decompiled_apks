record `f.a.a.e.b.b` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<clinit>`() @signature `Lf/a/a/e/b/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1cfb04.  v0:= new `f.a.a.e.b.b$a`;
  #L1cfb08.  call `<init>`(v0) @signature `Lf/a/a/e/b/b$a;.<init>:()V` @kind direct;
  #L1cfb0e.  return @kind void;
}
procedure `int` `verifyPositive`(`int` v2 , `java.lang.String` v3 @kind object) @signature `Lf/a/a/e/b/b;.verifyPositive:(ILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1cfab8.  if v2 <= 0 then goto L1cfabe;
  #L1cfabc.  return v2;
  #L1cfabe.  v0:= new `java.lang.IllegalArgumentException`;
  #L1cfac2.  v1:= new `java.lang.StringBuilder`;
  #L1cfac6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cfacc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cfad2.  v3:= " > 0 required but it was " @kind object;
  #L1cfad6.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cfadc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cfae2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cfae8.  v2:= temp @kind object;
  #L1cfaea.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cfaf0.  throw v0;
}
