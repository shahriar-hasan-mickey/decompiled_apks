record `f.a.a.e.g.l$a` @kind class @AccessFlag FINAL extends `f.a.a.b.e$b` @kind class {
  `java.util.concurrent.ScheduledExecutorService` `f.a.a.e.g.l$a.f` @AccessFlag FINAL;
  `f.a.a.c.a` `f.a.a.e.g.l$a.g` @AccessFlag FINAL;
  `boolean` `f.a.a.e.g.l$a.h` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`f.a.a.e.g.l$a` v0 @kind this, `java.util.concurrent.ScheduledExecutorService` v1 @kind object) @signature `Lf/a/a/e/g/l$a;.<init>:(Ljava/util/concurrent/ScheduledExecutorService;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1d1df8.  call `<init>`(v0) @signature `Lf/a/a/b/e$b;.<init>:()V` @kind direct;
  #L1d1dfe.  v0.`f.a.a.e.g.l$a.f` @type ^`java.util.concurrent.ScheduledExecutorService` := v1 @kind object;
  #L1d1e02.  v1:= new `f.a.a.c.a`;
  #L1d1e06.  call `<init>`(v1) @signature `Lf/a/a/c/a;.<init>:()V` @kind direct;
  #L1d1e0c.  v0.`f.a.a.e.g.l$a.g` @type ^`f.a.a.c.a` := v1 @kind object;
  #L1d1e10.  return @kind void;
}
procedure `void` `dispose`(`f.a.a.e.g.l$a` v1 @kind this) @signature `Lf/a/a/e/g/l$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d1e24.  v0:= v1.`f.a.a.e.g.l$a.h` @type ^`boolean` @kind boolean;
  #L1d1e28.  if v0 != 0 then goto L1d1e3c;
  #L1d1e2c.  v0:= 1I;
  #L1d1e2e.  v1.`f.a.a.e.g.l$a.h` @type ^`boolean` := v0 @kind boolean;
  #L1d1e32.  v0:= v1.`f.a.a.e.g.l$a.g` @type ^`f.a.a.c.a` @kind object;
  #L1d1e36.  call `dispose`(v0) @signature `Lf/a/a/c/a;.dispose:()V` @kind virtual;
  #L1d1e3c.  return @kind void;
}
procedure `f.a.a.c.c` `schedule`(`f.a.a.e.g.l$a` v3 @kind this, `java.lang.Runnable` v4 @kind object, `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object) @signature `Lf/a/a/e/g/l$a;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lf/a/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d1d68.  v0:= v3.`f.a.a.e.g.l$a.h` @type ^`boolean` @kind boolean;
  #L1d1d6c.  if v0 == 0 then goto L1d1d76;
  #L1d1d70.  v4:= `@@f.a.a.e.a.b.f` @type ^`f.a.a.e.a.b` @kind object;
  #L1d1d74.  return v4 @kind object;
  #L1d1d76.  call temp:= `onSchedule`(v4) @signature `Lf/a/a/g/a;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @kind static;
  #L1d1d7c.  v4:= temp @kind object;
  #L1d1d7e.  v0:= new `f.a.a.e.g.i`;
  #L1d1d82.  v1:= v3.`f.a.a.e.g.l$a.g` @type ^`f.a.a.c.a` @kind object;
  #L1d1d86.  call `<init>`(v0, v4, v1) @signature `Lf/a/a/e/g/i;.<init>:(Ljava/lang/Runnable;Lf/a/a/c/d;)V` @kind direct;
  #L1d1d8c.  v4:= v3.`f.a.a.e.g.l$a.g` @type ^`f.a.a.c.a` @kind object;
  #L1d1d90.  call temp:= `add`(v4, v0) @signature `Lf/a/a/c/a;.add:(Lf/a/a/c/c;)Z` @kind virtual;
  #L1d1d96.  v1:= 0L;
  #L1d1d9a.  v4:= lcmp(v5, v1);
  #L1d1d9e.  if v4 > 0 then goto L1d1db0;
  #L1d1da2.  v4:= v3.`f.a.a.e.g.l$a.f` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L1d1da6.  call temp:= `submit`(v4, v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;` @kind interface;
  #L1d1dac.  v4:= temp @kind object;
  #L1d1dae.  goto L1d1dbc;
  #L1d1db0.  v4:= v3.`f.a.a.e.g.l$a.f` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L1d1db4.  call temp:= `schedule`(v4, v0, v5, v7) @signature `Ljava/util/concurrent/ScheduledExecutorService;.schedule:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L1d1dba.  v4:= temp @kind object;
  #L1d1dbc.  call `setFuture`(v0, v4) @signature `Lf/a/a/e/g/i;.setFuture:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L1d1dc2.  return v0 @kind object;
  #L1d1dc4.  v4:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L1d1dc6.  call `dispose`(v3) @signature `Lf/a/a/e/g/l$a;.dispose:()V` @kind virtual;
  #L1d1dcc.  call `onError`(v4) @signature `Lf/a/a/g/a;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L1d1dd2.  v4:= `@@f.a.a.e.a.b.f` @type ^`f.a.a.e.a.b` @kind object;
  #L1d1dd6.  return v4 @kind object;
  catch `java.util.concurrent.RejectedExecutionException` @[L1d1da2..L1d1dc2] goto L1d1dc4;
}
