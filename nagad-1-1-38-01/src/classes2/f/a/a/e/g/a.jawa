record `f.a.a.e.g.a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `f.a.a.c.c` @kind interface, `f.a.a.h.a` @kind interface {
  `java.lang.Runnable` `f.a.a.e.g.a.f` @AccessFlag PROTECTED_FINAL;
  `java.lang.Thread` `f.a.a.e.g.a.g` @AccessFlag PROTECTED;
}
global `java.util.concurrent.FutureTask` `@@f.a.a.e.g.a.h` @AccessFlag PROTECTED_STATIC_FINAL;
global `java.util.concurrent.FutureTask` `@@f.a.a.e.g.a.i` @AccessFlag PROTECTED_STATIC_FINAL;
global `long` `@@f.a.a.e.g.a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lf/a/a/e/g/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1d0a88.  v0:= new `java.util.concurrent.FutureTask`;
  #L1d0a8c.  v1:= `@@f.a.a.e.b.a.a` @type ^`java.lang.Runnable` @kind object;
  #L1d0a90.  v2:= 0I;
  #L1d0a92.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L1d0a98.  `@@f.a.a.e.g.a.h` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L1d0a9c.  v0:= new `java.util.concurrent.FutureTask`;
  #L1d0aa0.  v1:= `@@f.a.a.e.b.a.a` @type ^`java.lang.Runnable` @kind object;
  #L1d0aa4.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L1d0aaa.  `@@f.a.a.e.g.a.i` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L1d0aae.  return @kind void;
}
procedure `void` `<init>`(`f.a.a.e.g.a` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lf/a/a/e/g/a;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1d0ac0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L1d0ac6.  v0.`f.a.a.e.g.a.f` @type ^`java.lang.Runnable` := v1 @kind object;
  #L1d0aca.  return @kind void;
}
procedure `void` `dispose`(`f.a.a.e.g.a` v3 @kind this) @signature `Lf/a/a/e/g/a;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1d0adc.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1d0ae2.  v0:= temp @kind object;
  #L1d0ae4.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L1d0ae8.  v1:= `@@f.a.a.e.g.a.h` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L1d0aec.  if v0 == v1 then goto L1d0b24;
  #L1d0af0.  v1:= `@@f.a.a.e.g.a.i` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L1d0af4.  if v0 == v1 then goto L1d0b24;
  #L1d0af8.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1d0afe.  v1:= temp;
  #L1d0b00.  if v1 == 0 then goto L1d0b24;
  #L1d0b04.  if v0 == 0 then goto L1d0b24;
  #L1d0b08.  v1:= v3.`f.a.a.e.g.a.g` @type ^`java.lang.Thread` @kind object;
  #L1d0b0c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1d0b12.  v2:= temp @kind object;
  #L1d0b14.  if v1 == v2 then goto L1d0b1c;
  #L1d0b18.  v1:= 1I;
  #L1d0b1a.  goto L1d0b1e;
  #L1d0b1c.  v1:= 0I;
  #L1d0b1e.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L1d0b24.  return @kind void;
}
procedure `void` `setFuture`(`f.a.a.e.g.a` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lf/a/a/e/g/a;.setFuture:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1d0b38.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1d0b3e.  v0:= temp @kind object;
  #L1d0b40.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L1d0b44.  v1:= `@@f.a.a.e.g.a.h` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L1d0b48.  if v0 != v1 then goto L1d0b4e;
  #L1d0b4c.  goto L1d0b80;
  #L1d0b4e.  v1:= `@@f.a.a.e.g.a.i` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L1d0b52.  if v0 != v1 then goto L1d0b74;
  #L1d0b56.  v0:= v2.`f.a.a.e.g.a.g` @type ^`java.lang.Thread` @kind object;
  #L1d0b5a.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1d0b60.  v1:= temp @kind object;
  #L1d0b62.  if v0 == v1 then goto L1d0b6a;
  #L1d0b66.  v0:= 1I;
  #L1d0b68.  goto L1d0b6c;
  #L1d0b6a.  v0:= 0I;
  #L1d0b6c.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L1d0b72.  goto L1d0b80;
  #L1d0b74.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1d0b7a.  v0:= temp;
  #L1d0b7c.  if v0 == 0 then goto L1d0b38;
  #L1d0b80.  return @kind void;
}
