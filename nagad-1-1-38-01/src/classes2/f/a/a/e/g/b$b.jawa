record `f.a.a.e.g.b$b` @kind class @AccessFlag FINAL extends `f.a.a.e.g.j` @kind interface {
  `int` `f.a.a.e.g.b$b.a` @AccessFlag FINAL;
  `f.a.a.e.g.b$c`[] `f.a.a.e.g.b$b.b` @AccessFlag FINAL;
  `long` `f.a.a.e.g.b$b.c` @AccessFlag ;
}
procedure `void` `<init>`(`f.a.a.e.g.b$b` v3 @kind this, `int` v4 , `java.util.concurrent.ThreadFactory` v5 @kind object) @signature `Lf/a/a/e/g/b$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1d0cd4.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d0cda.  v3.`f.a.a.e.g.b$b.a` @type ^`int` := v4;
  #L1d0cde.  v0:= new `f.a.a.e.g.b$c`[v4];
  #L1d0ce2.  v3.`f.a.a.e.g.b$b.b` @type ^`f.a.a.e.g.b$c`[] := v0 @kind object;
  #L1d0ce6.  v0:= 0I;
  #L1d0ce8.  if v0 >= v4 then goto L1d0d04;
  #L1d0cec.  v1:= v3.`f.a.a.e.g.b$b.b` @type ^`f.a.a.e.g.b$c`[] @kind object;
  #L1d0cf0.  v2:= new `f.a.a.e.g.b$c`;
  #L1d0cf4.  call `<init>`(v2, v5) @signature `Lf/a/a/e/g/b$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1d0cfa.  v1[v0]:= v2 @kind object;
  #L1d0cfe.  v0:= v0 + 1;
  #L1d0d02.  goto L1d0ce8;
  #L1d0d04.  return @kind void;
}
procedure `f.a.a.e.g.b$c` `getEventLoop`(`f.a.a.e.g.b$b` v6 @kind this) @signature `Lf/a/a/e/g/b$b;.getEventLoop:()Lf/a/a/e/g/b$c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1d0c98.  v0:= v6.`f.a.a.e.g.b$b.a` @type ^`int`;
  #L1d0c9c.  if v0 != 0 then goto L1d0ca6;
  #L1d0ca0.  v0:= `@@f.a.a.e.g.b.f` @type ^`f.a.a.e.g.b$c` @kind object;
  #L1d0ca4.  return v0 @kind object;
  #L1d0ca6.  v1:= v6.`f.a.a.e.g.b$b.b` @type ^`f.a.a.e.g.b$c`[] @kind object;
  #L1d0caa.  v2:= v6.`f.a.a.e.g.b$b.c` @type ^`long` @kind wide;
  #L1d0cae.  v4:= 1L;
  #L1d0cb2.  v4:= v4 + v2 @kind long;
  #L1d0cb4.  v6.`f.a.a.e.g.b$b.c` @type ^`long` := v4 @kind wide;
  #L1d0cb8.  v4:= (`long`) v0 @kind i2l;
  #L1d0cba.  v2:= v2 %% v4 @kind long;
  #L1d0cbc.  v0:= (`int`) v2 @kind l2i;
  #L1d0cbe.  v0:= v1[v0] @kind object;
  #L1d0cc2.  return v0 @kind object;
}
procedure `void` `shutdown`(`f.a.a.e.g.b$b` v4 @kind this) @signature `Lf/a/a/e/g/b$b;.shutdown:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d0d18.  v0:= v4.`f.a.a.e.g.b$b.b` @type ^`f.a.a.e.g.b$c`[] @kind object;
  #L1d0d1c.  v1:= length @variable v0;
  #L1d0d1e.  v2:= 0I;
  #L1d0d20.  if v2 >= v1 then goto L1d0d34;
  #L1d0d24.  v3:= v0[v2] @kind object;
  #L1d0d28.  call `dispose`(v3) @signature `Lf/a/a/e/g/e;.dispose:()V` @kind virtual;
  #L1d0d2e.  v2:= v2 + 1;
  #L1d0d32.  goto L1d0d20;
  #L1d0d34.  return @kind void;
}
