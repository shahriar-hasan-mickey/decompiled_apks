record `f.a.a.e.g.c` @kind class @AccessFlag PUBLIC_FINAL extends `f.a.a.b.e` @kind class {
  `java.util.concurrent.ThreadFactory` `f.a.a.e.g.c.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `f.a.a.e.g.c.b` @AccessFlag FINAL;
}
global `f.a.a.e.g.g` `@@f.a.a.e.g.c.c` @AccessFlag STATIC_FINAL;
global `f.a.a.e.g.g` `@@f.a.a.e.g.c.d` @AccessFlag STATIC_FINAL;
global `long` `@@f.a.a.e.g.c.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.TimeUnit` `@@f.a.a.e.g.c.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `f.a.a.e.g.c$c` `@@f.a.a.e.g.c.g` @AccessFlag STATIC_FINAL;
global `f.a.a.e.g.c$a` `@@f.a.a.e.g.c.h` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lf/a/a/e/g/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d127c.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1d1280.  `@@f.a.a.e.g.c.f` @type ^`java.util.concurrent.TimeUnit` := v0 @kind object;
  #L1d1284.  v0:= "rx3.io-keep-alive-time" @kind object;
  #L1d1288.  v1:= 60L;
  #L1d128c.  call temp:= `getLong`(v0, v1) @signature `Ljava/lang/Long;.getLong:(Ljava/lang/String;J)Ljava/lang/Long;` @kind static;
  #L1d1292.  v0:= temp @kind object;
  #L1d1294.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L1d129a.  v0:= temp @kind wide;
  #L1d129c.  `@@f.a.a.e.g.c.e` @type ^`long` := v0 @kind wide;
  #L1d12a0.  v0:= new `f.a.a.e.g.c$c`;
  #L1d12a4.  v1:= new `f.a.a.e.g.g`;
  #L1d12a8.  v2:= "RxCachedThreadSchedulerShutdown" @kind object;
  #L1d12ac.  call `<init>`(v1, v2) @signature `Lf/a/a/e/g/g;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d12b2.  call `<init>`(v0, v1) @signature `Lf/a/a/e/g/c$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1d12b8.  `@@f.a.a.e.g.c.g` @type ^`f.a.a.e.g.c$c` := v0 @kind object;
  #L1d12bc.  v0:= `@@f.a.a.e.g.c.g` @type ^`f.a.a.e.g.c$c` @kind object;
  #L1d12c0.  call `dispose`(v0) @signature `Lf/a/a/e/g/e;.dispose:()V` @kind virtual;
  #L1d12c6.  v0:= "rx3.io-priority" @kind object;
  #L1d12ca.  v1:= 5I;
  #L1d12cc.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L1d12d2.  v0:= temp @kind object;
  #L1d12d4.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1d12da.  v0:= temp;
  #L1d12dc.  v1:= 10I;
  #L1d12e0.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d12e6.  v0:= temp;
  #L1d12e8.  v1:= 1I;
  #L1d12ea.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1d12f0.  v0:= temp;
  #L1d12f2.  v1:= new `f.a.a.e.g.g`;
  #L1d12f6.  v2:= "RxCachedThreadScheduler" @kind object;
  #L1d12fa.  call `<init>`(v1, v2, v0) @signature `Lf/a/a/e/g/g;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1d1300.  `@@f.a.a.e.g.c.c` @type ^`f.a.a.e.g.g` := v1 @kind object;
  #L1d1304.  v1:= new `f.a.a.e.g.g`;
  #L1d1308.  v2:= "RxCachedWorkerPoolEvictor" @kind object;
  #L1d130c.  call `<init>`(v1, v2, v0) @signature `Lf/a/a/e/g/g;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1d1312.  `@@f.a.a.e.g.c.d` @type ^`f.a.a.e.g.g` := v1 @kind object;
  #L1d1316.  v0:= new `f.a.a.e.g.c$a`;
  #L1d131a.  v1:= `@@f.a.a.e.g.c.c` @type ^`f.a.a.e.g.g` @kind object;
  #L1d131e.  v2:= 0L;
  #L1d1322.  v4:= 0I;
  #L1d1324.  call `<init>`(v0, v2, v4, v1) @signature `Lf/a/a/e/g/c$a;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1d132a.  `@@f.a.a.e.g.c.h` @type ^`f.a.a.e.g.c$a` := v0 @kind object;
  #L1d132e.  v0:= `@@f.a.a.e.g.c.h` @type ^`f.a.a.e.g.c$a` @kind object;
  #L1d1332.  call `b`(v0) @signature `Lf/a/a/e/g/c$a;.b:()V` @kind virtual;
  #L1d1338.  return @kind void;
}
procedure `void` `<init>`(`f.a.a.e.g.c` v1 @kind this) @signature `Lf/a/a/e/g/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d134c.  v0:= `@@f.a.a.e.g.c.c` @type ^`f.a.a.e.g.g` @kind object;
  #L1d1350.  call `<init>`(v1, v0) @signature `Lf/a/a/e/g/c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1d1356.  return @kind void;
}
procedure `void` `<init>`(`f.a.a.e.g.c` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lf/a/a/e/g/c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d1368.  call `<init>`(v1) @signature `Lf/a/a/b/e;.<init>:()V` @kind direct;
  #L1d136e.  v1.`f.a.a.e.g.c.a` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L1d1372.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L1d1376.  v0:= `@@f.a.a.e.g.c.h` @type ^`f.a.a.e.g.c$a` @kind object;
  #L1d137a.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1d1380.  v1.`f.a.a.e.g.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L1d1384.  call `start`(v1) @signature `Lf/a/a/e/g/c;.start:()V` @kind virtual;
  #L1d138a.  return @kind void;
}
procedure `f.a.a.b.e$b` `createWorker`(`f.a.a.e.g.c` v2 @kind this) @signature `Lf/a/a/e/g/c;.createWorker:()Lf/a/a/b/e$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d1250.  v0:= new `f.a.a.e.g.c$b`;
  #L1d1254.  v1:= v2.`f.a.a.e.g.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L1d1258.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1d125e.  v1:= temp @kind object;
  #L1d1260.  v1:= (`f.a.a.e.g.c$a`) v1 @kind object;
  #L1d1264.  call `<init>`(v0, v1) @signature `Lf/a/a/e/g/c$b;.<init>:(Lf/a/a/e/g/c$a;)V` @kind direct;
  #L1d126a.  return v0 @kind object;
}
procedure `void` `start`(`f.a.a.e.g.c` v5 @kind this) @signature `Lf/a/a/e/g/c;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d139c.  v0:= new `f.a.a.e.g.c$a`;
  #L1d13a0.  v1:= `@@f.a.a.e.g.c.e` @type ^`long` @kind wide;
  #L1d13a4.  v3:= `@@f.a.a.e.g.c.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1d13a8.  v4:= v5.`f.a.a.e.g.c.a` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L1d13ac.  call `<init>`(v0, v1, v3, v4) @signature `Lf/a/a/e/g/c$a;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1d13b2.  v1:= v5.`f.a.a.e.g.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L1d13b6.  v2:= `@@f.a.a.e.g.c.h` @type ^`f.a.a.e.g.c$a` @kind object;
  #L1d13ba.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1d13c0.  v1:= temp;
  #L1d13c2.  if v1 != 0 then goto L1d13cc;
  #L1d13c6.  call `b`(v0) @signature `Lf/a/a/e/g/c$a;.b:()V` @kind virtual;
  #L1d13cc.  return @kind void;
}
