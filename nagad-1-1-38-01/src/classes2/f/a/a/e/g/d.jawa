record `f.a.a.e.g.d` @kind class @AccessFlag PUBLIC_FINAL extends `f.a.a.b.e` @kind class {
  `java.util.concurrent.ThreadFactory` `f.a.a.e.g.d.a` @AccessFlag FINAL;
}
global `f.a.a.e.g.g` `@@f.a.a.e.g.d.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lf/a/a/e/g/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1d1400.  v0:= "rx3.newthread-priority" @kind object;
  #L1d1404.  v1:= 5I;
  #L1d1406.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L1d140c.  v0:= temp @kind object;
  #L1d140e.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1d1414.  v0:= temp;
  #L1d1416.  v1:= 10I;
  #L1d141a.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d1420.  v0:= temp;
  #L1d1422.  v1:= 1I;
  #L1d1424.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1d142a.  v0:= temp;
  #L1d142c.  v1:= new `f.a.a.e.g.g`;
  #L1d1430.  v2:= "RxNewThreadScheduler" @kind object;
  #L1d1434.  call `<init>`(v1, v2, v0) @signature `Lf/a/a/e/g/g;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1d143a.  `@@f.a.a.e.g.d.b` @type ^`f.a.a.e.g.g` := v1 @kind object;
  #L1d143e.  return @kind void;
}
procedure `void` `<init>`(`f.a.a.e.g.d` v1 @kind this) @signature `Lf/a/a/e/g/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d1450.  v0:= `@@f.a.a.e.g.d.b` @type ^`f.a.a.e.g.g` @kind object;
  #L1d1454.  call `<init>`(v1, v0) @signature `Lf/a/a/e/g/d;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1d145a.  return @kind void;
}
procedure `void` `<init>`(`f.a.a.e.g.d` v0 @kind this, `java.util.concurrent.ThreadFactory` v1 @kind object) @signature `Lf/a/a/e/g/d;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1d146c.  call `<init>`(v0) @signature `Lf/a/a/b/e;.<init>:()V` @kind direct;
  #L1d1472.  v0.`f.a.a.e.g.d.a` @type ^`java.util.concurrent.ThreadFactory` := v1 @kind object;
  #L1d1476.  return @kind void;
}
procedure `f.a.a.b.e$b` `createWorker`(`f.a.a.e.g.d` v2 @kind this) @signature `Lf/a/a/e/g/d;.createWorker:()Lf/a/a/b/e$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d13e0.  v0:= new `f.a.a.e.g.e`;
  #L1d13e4.  v1:= v2.`f.a.a.e.g.d.a` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L1d13e8.  call `<init>`(v0, v1) @signature `Lf/a/a/e/g/e;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1d13ee.  return v0 @kind object;
}
