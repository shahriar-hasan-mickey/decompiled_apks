record `f.a.a.e.g.i` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `java.lang.Runnable` @kind interface, `java.util.concurrent.Callable` @kind interface, `f.a.a.c.c` @kind interface {
  `java.lang.Runnable` `f.a.a.e.g.i.f` @AccessFlag FINAL;
}
global `java.lang.Object` `@@f.a.a.e.g.i.g` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@f.a.a.e.g.i.h` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@f.a.a.e.g.i.i` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@f.a.a.e.g.i.j` @AccessFlag STATIC_FINAL;
global `long` `@@f.a.a.e.g.i.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lf/a/a/e/g/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d1820.  v0:= new `java.lang.Object`;
  #L1d1824.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d182a.  `@@f.a.a.e.g.i.g` @type ^`java.lang.Object` := v0 @kind object;
  #L1d182e.  v0:= new `java.lang.Object`;
  #L1d1832.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d1838.  `@@f.a.a.e.g.i.h` @type ^`java.lang.Object` := v0 @kind object;
  #L1d183c.  v0:= new `java.lang.Object`;
  #L1d1840.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d1846.  `@@f.a.a.e.g.i.i` @type ^`java.lang.Object` := v0 @kind object;
  #L1d184a.  v0:= new `java.lang.Object`;
  #L1d184e.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d1854.  `@@f.a.a.e.g.i.j` @type ^`java.lang.Object` := v0 @kind object;
  #L1d1858.  return @kind void;
}
procedure `void` `<init>`(`f.a.a.e.g.i` v1 @kind this, `java.lang.Runnable` v2 @kind object, `f.a.a.c.d` v3 @kind object) @signature `Lf/a/a/e/g/i;.<init>:(Ljava/lang/Runnable;Lf/a/a/c/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d186c.  v0:= 3I;
  #L1d186e.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L1d1874.  v1.`f.a.a.e.g.i.f` @type ^`java.lang.Runnable` := v2 @kind object;
  #L1d1878.  v2:= 0I;
  #L1d187a.  call `lazySet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L1d1880.  return @kind void;
}
procedure `java.lang.Object` `call`(`f.a.a.e.g.i` v1 @kind this) @signature `Lf/a/a/e/g/i;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d1804.  call `run`(v1) @signature `Lf/a/a/e/g/i;.run:()V` @kind virtual;
  #L1d180a.  v0:= 0I;
  #L1d180c.  return v0 @kind object;
}
procedure `void` `dispose`(`f.a.a.e.g.i` v5 @kind this) @signature `Lf/a/a/e/g/i;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d1894.  v0:= 1I;
  #L1d1896.  call temp:= `get`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d189c.  v1:= temp @kind object;
  #L1d189e.  v2:= `@@f.a.a.e.g.i.j` @type ^`java.lang.Object` @kind object;
  #L1d18a2.  v3:= 0I;
  #L1d18a4.  if v1 == v2 then goto L1d18fe;
  #L1d18a8.  v2:= `@@f.a.a.e.g.i.h` @type ^`java.lang.Object` @kind object;
  #L1d18ac.  if v1 == v2 then goto L1d18fe;
  #L1d18b0.  v2:= `@@f.a.a.e.g.i.i` @type ^`java.lang.Object` @kind object;
  #L1d18b4.  if v1 != v2 then goto L1d18ba;
  #L1d18b8.  goto L1d18fe;
  #L1d18ba.  v2:= 2I;
  #L1d18bc.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d18c2.  v2:= temp @kind object;
  #L1d18c4.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1d18ca.  v4:= temp @kind object;
  #L1d18cc.  if v2 == v4 then goto L1d18d4;
  #L1d18d0.  v2:= 1I;
  #L1d18d2.  goto L1d18d6;
  #L1d18d4.  v2:= 0I;
  #L1d18d6.  if v2 == 0 then goto L1d18e0;
  #L1d18da.  v4:= `@@f.a.a.e.g.i.i` @type ^`java.lang.Object` @kind object;
  #L1d18de.  goto L1d18e4;
  #L1d18e0.  v4:= `@@f.a.a.e.g.i.h` @type ^`java.lang.Object` @kind object;
  #L1d18e4.  call temp:= `compareAndSet`(v5, v0, v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1d18ea.  v0:= temp;
  #L1d18ec.  if v0 == 0 then goto L1d1894;
  #L1d18f0.  if v1 == 0 then goto L1d18fe;
  #L1d18f4.  v1:= (`java.util.concurrent.Future`) v1 @kind object;
  #L1d18f8.  call temp:= `cancel`(v1, v2) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L1d18fe.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d1904.  v0:= temp @kind object;
  #L1d1906.  v1:= `@@f.a.a.e.g.i.j` @type ^`java.lang.Object` @kind object;
  #L1d190a.  if v0 == v1 then goto L1d1932;
  #L1d190e.  v1:= `@@f.a.a.e.g.i.g` @type ^`java.lang.Object` @kind object;
  #L1d1912.  if v0 == v1 then goto L1d1932;
  #L1d1916.  if v0 != 0 then goto L1d191c;
  #L1d191a.  goto L1d1932;
  #L1d191c.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1d1922.  v1:= temp;
  #L1d1924.  if v1 == 0 then goto L1d18fe;
  #L1d1928.  v0:= (`f.a.a.c.d`) v0 @kind object;
  #L1d192c.  call temp:= `delete`(v0, v5) @signature `Lf/a/a/c/d;.delete:(Lf/a/a/c/c;)Z` @kind interface;
  #L1d1932.  return @kind void;
}
procedure `void` `run`(`f.a.a.e.g.i` v5 @kind this) @signature `Lf/a/a/e/g/i;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d1944.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1d194a.  v0:= temp @kind object;
  #L1d194c.  v1:= 2I;
  #L1d194e.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L1d1954.  v0:= 0I;
  #L1d1956.  v2:= 1I;
  #L1d1958.  v3:= 0I;
  #L1d195a.  v4:= v5.`f.a.a.e.g.i.f` @type ^`java.lang.Runnable` @kind object;
  #L1d195e.  call `run`(v4) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L1d1964.  goto L1d196e;
  #L1d1966.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d1968.  call `onError`(v4) @signature `Lf/a/a/g/a;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L1d196e.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L1d1974.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d197a.  v0:= temp @kind object;
  #L1d197c.  v1:= `@@f.a.a.e.g.i.g` @type ^`java.lang.Object` @kind object;
  #L1d1980.  if v0 == v1 then goto L1d19a2;
  #L1d1984.  v1:= `@@f.a.a.e.g.i.j` @type ^`java.lang.Object` @kind object;
  #L1d1988.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1d198e.  v1:= temp;
  #L1d1990.  if v1 == 0 then goto L1d19a2;
  #L1d1994.  if v0 == 0 then goto L1d19a2;
  #L1d1998.  v0:= (`f.a.a.c.d`) v0 @kind object;
  #L1d199c.  call temp:= `delete`(v0, v5) @signature `Lf/a/a/c/d;.delete:(Lf/a/a/c/c;)Z` @kind interface;
  #L1d19a2.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d19a8.  v0:= temp @kind object;
  #L1d19aa.  v1:= `@@f.a.a.e.g.i.h` @type ^`java.lang.Object` @kind object;
  #L1d19ae.  if v0 == v1 then goto L1d19ca;
  #L1d19b2.  v1:= `@@f.a.a.e.g.i.i` @type ^`java.lang.Object` @kind object;
  #L1d19b6.  if v0 == v1 then goto L1d19ca;
  #L1d19ba.  v1:= `@@f.a.a.e.g.i.j` @type ^`java.lang.Object` @kind object;
  #L1d19be.  call temp:= `compareAndSet`(v5, v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1d19c4.  v0:= temp;
  #L1d19c6.  if v0 == 0 then goto L1d19a2;
  #L1d19ca.  return @kind void;
  #L1d19cc.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d19ce.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L1d19d4.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d19da.  v0:= temp @kind object;
  #L1d19dc.  v1:= `@@f.a.a.e.g.i.g` @type ^`java.lang.Object` @kind object;
  #L1d19e0.  if v0 == v1 then goto L1d1a02;
  #L1d19e4.  v1:= `@@f.a.a.e.g.i.j` @type ^`java.lang.Object` @kind object;
  #L1d19e8.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1d19ee.  v1:= temp;
  #L1d19f0.  if v1 == 0 then goto L1d1a02;
  #L1d19f4.  if v0 == 0 then goto L1d1a02;
  #L1d19f8.  v0:= (`f.a.a.c.d`) v0 @kind object;
  #L1d19fc.  call temp:= `delete`(v0, v5) @signature `Lf/a/a/c/d;.delete:(Lf/a/a/c/c;)Z` @kind interface;
  #L1d1a02.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d1a08.  v0:= temp @kind object;
  #L1d1a0a.  v1:= `@@f.a.a.e.g.i.h` @type ^`java.lang.Object` @kind object;
  #L1d1a0e.  if v0 == v1 then goto L1d1a2c;
  #L1d1a12.  v1:= `@@f.a.a.e.g.i.i` @type ^`java.lang.Object` @kind object;
  #L1d1a16.  if v0 == v1 then goto L1d1a2c;
  #L1d1a1a.  v1:= `@@f.a.a.e.g.i.j` @type ^`java.lang.Object` @kind object;
  #L1d1a1e.  call temp:= `compareAndSet`(v5, v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1d1a24.  v0:= temp;
  #L1d1a26.  if v0 != 0 then goto L1d1a2c;
  #L1d1a2a.  goto L1d1a02;
  #L1d1a2c.  throw v4;
  catch `java.lang.Throwable` @[L1d195a..L1d1964] goto L1d1966;
  catch `java.lang.Throwable` @[L1d1968..L1d196e] goto L1d19cc;
}
procedure `void` `setFuture`(`f.a.a.e.g.i` v3 @kind this, `java.util.concurrent.Future` v4 @kind object) @signature `Lf/a/a/e/g/i;.setFuture:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d1a58.  v0:= 1I;
  #L1d1a5a.  call temp:= `get`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d1a60.  v1:= temp @kind object;
  #L1d1a62.  v2:= `@@f.a.a.e.g.i.j` @type ^`java.lang.Object` @kind object;
  #L1d1a66.  if v1 != v2 then goto L1d1a6c;
  #L1d1a6a.  return @kind void;
  #L1d1a6c.  v2:= `@@f.a.a.e.g.i.h` @type ^`java.lang.Object` @kind object;
  #L1d1a70.  if v1 != v2 then goto L1d1a7e;
  #L1d1a74.  v0:= 0I;
  #L1d1a76.  call temp:= `cancel`(v4, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L1d1a7c.  return @kind void;
  #L1d1a7e.  v2:= `@@f.a.a.e.g.i.i` @type ^`java.lang.Object` @kind object;
  #L1d1a82.  if v1 != v2 then goto L1d1a8e;
  #L1d1a86.  call temp:= `cancel`(v4, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L1d1a8c.  return @kind void;
  #L1d1a8e.  call temp:= `compareAndSet`(v3, v0, v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1d1a94.  v0:= temp;
  #L1d1a96.  if v0 == 0 then goto L1d1a58;
  #L1d1a9a.  return @kind void;
}
