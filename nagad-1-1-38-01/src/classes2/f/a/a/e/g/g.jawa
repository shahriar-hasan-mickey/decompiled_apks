record `f.a.a.e.g.g` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `java.util.concurrent.ThreadFactory` @kind interface {
  `java.lang.String` `f.a.a.e.g.g.f` @AccessFlag FINAL;
  `int` `f.a.a.e.g.g.g` @AccessFlag FINAL;
  `boolean` `f.a.a.e.g.g.h` @AccessFlag FINAL;
}
global `long` `@@f.a.a.e.g.g.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`f.a.a.e.g.g` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lf/a/a/e/g/g;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1d171c.  v0:= 5I;
  #L1d171e.  v1:= 0I;
  #L1d1720.  call `<init>`(v2, v3, v0, v1) @signature `Lf/a/a/e/g/g;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L1d1726.  return @kind void;
}
procedure `void` `<init>`(`f.a.a.e.g.g` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 ) @signature `Lf/a/a/e/g/g;.<init>:(Ljava/lang/String;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d1738.  v0:= 0I;
  #L1d173a.  call `<init>`(v1, v2, v3, v0) @signature `Lf/a/a/e/g/g;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L1d1740.  return @kind void;
}
procedure `void` `<init>`(`f.a.a.e.g.g` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lf/a/a/e/g/g;.<init>:(Ljava/lang/String;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1d1754.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L1d175a.  v0.`f.a.a.e.g.g.f` @type ^`java.lang.String` := v1 @kind object;
  #L1d175e.  v0.`f.a.a.e.g.g.g` @type ^`int` := v2;
  #L1d1762.  v0.`f.a.a.e.g.g.h` @type ^`boolean` := v3 @kind boolean;
  #L1d1766.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`f.a.a.e.g.g` v3 @kind this, `java.lang.Runnable` v4 @kind object) @signature `Lf/a/a/e/g/g;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d16ac.  v0:= new `java.lang.StringBuilder`;
  #L1d16b0.  v1:= v3.`f.a.a.e.g.g.f` @type ^`java.lang.String` @kind object;
  #L1d16b4.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d16ba.  v1:= 45I;
  #L1d16be.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d16c4.  call temp:= `incrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.incrementAndGet:()J` @kind virtual;
  #L1d16ca.  v1:= temp @kind wide;
  #L1d16cc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d16d2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d16d8.  v0:= temp @kind object;
  #L1d16da.  v1:= v3.`f.a.a.e.g.g.h` @type ^`boolean` @kind boolean;
  #L1d16de.  if v1 == 0 then goto L1d16ee;
  #L1d16e2.  v1:= new `f.a.a.e.g.g$a`;
  #L1d16e6.  call `<init>`(v1, v4, v0) @signature `Lf/a/a/e/g/g$a;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L1d16ec.  goto L1d16f8;
  #L1d16ee.  v1:= new `java.lang.Thread`;
  #L1d16f2.  call `<init>`(v1, v4, v0) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L1d16f8.  v4:= v3.`f.a.a.e.g.g.g` @type ^`int`;
  #L1d16fc.  call `setPriority`(v1, v4) @signature `Ljava/lang/Thread;.setPriority:(I)V` @kind virtual;
  #L1d1702.  v4:= 1I;
  #L1d1704.  call `setDaemon`(v1, v4) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L1d170a.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`f.a.a.e.g.g` v2 @kind this) @signature `Lf/a/a/e/g/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d1668.  v0:= new `java.lang.StringBuilder`;
  #L1d166c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d1672.  v1:= "RxThreadFactory[" @kind object;
  #L1d1676.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d167c.  v1:= v2.`f.a.a.e.g.g.f` @type ^`java.lang.String` @kind object;
  #L1d1680.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d1686.  v1:= "]" @kind object;
  #L1d168a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d1690.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d1696.  v0:= temp @kind object;
  #L1d1698.  return v0 @kind object;
}
