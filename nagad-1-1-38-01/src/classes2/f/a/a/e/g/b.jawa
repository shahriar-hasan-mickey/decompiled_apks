record `f.a.a.e.g.b` @kind class @AccessFlag PUBLIC_FINAL extends `f.a.a.b.e` @kind class, `f.a.a.e.g.j` @kind interface {
  `java.util.concurrent.ThreadFactory` `f.a.a.e.g.b.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `f.a.a.e.g.b.b` @AccessFlag FINAL;
}
global `f.a.a.e.g.b$b` `@@f.a.a.e.g.b.c` @AccessFlag STATIC_FINAL;
global `f.a.a.e.g.g` `@@f.a.a.e.g.b.d` @AccessFlag STATIC_FINAL;
global `int` `@@f.a.a.e.g.b.e` @AccessFlag STATIC_FINAL;
global `f.a.a.e.g.b$c` `@@f.a.a.e.g.b.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lf/a/a/e/g/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d0de8.  call temp:= `getRuntime`() @signature `Ljava/lang/Runtime;.getRuntime:()Ljava/lang/Runtime;` @kind static;
  #L1d0dee.  v0:= temp @kind object;
  #L1d0df0.  call temp:= `availableProcessors`(v0) @signature `Ljava/lang/Runtime;.availableProcessors:()I` @kind virtual;
  #L1d0df6.  v0:= temp;
  #L1d0df8.  v1:= 0I;
  #L1d0dfa.  v2:= "rx3.computation-threads" @kind object;
  #L1d0dfe.  call temp:= `getInteger`(v2, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L1d0e04.  v2:= temp @kind object;
  #L1d0e06.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1d0e0c.  v2:= temp;
  #L1d0e0e.  call temp:= `a`(v0, v2) @signature `Lf/a/a/e/g/b;.a:(II)I` @kind static;
  #L1d0e14.  v0:= temp;
  #L1d0e16.  `@@f.a.a.e.g.b.e` @type ^`int` := v0;
  #L1d0e1a.  v0:= new `f.a.a.e.g.b$c`;
  #L1d0e1e.  v2:= new `f.a.a.e.g.g`;
  #L1d0e22.  v3:= "RxComputationShutdown" @kind object;
  #L1d0e26.  call `<init>`(v2, v3) @signature `Lf/a/a/e/g/g;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d0e2c.  call `<init>`(v0, v2) @signature `Lf/a/a/e/g/b$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1d0e32.  `@@f.a.a.e.g.b.f` @type ^`f.a.a.e.g.b$c` := v0 @kind object;
  #L1d0e36.  v0:= `@@f.a.a.e.g.b.f` @type ^`f.a.a.e.g.b$c` @kind object;
  #L1d0e3a.  call `dispose`(v0) @signature `Lf/a/a/e/g/e;.dispose:()V` @kind virtual;
  #L1d0e40.  v0:= "rx3.computation-priority" @kind object;
  #L1d0e44.  v2:= 5I;
  #L1d0e46.  call temp:= `getInteger`(v0, v2) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L1d0e4c.  v0:= temp @kind object;
  #L1d0e4e.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1d0e54.  v0:= temp;
  #L1d0e56.  v2:= 10I;
  #L1d0e5a.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d0e60.  v0:= temp;
  #L1d0e62.  v2:= 1I;
  #L1d0e64.  call temp:= `max`(v2, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1d0e6a.  v0:= temp;
  #L1d0e6c.  v3:= new `f.a.a.e.g.g`;
  #L1d0e70.  v4:= "RxComputationThreadPool" @kind object;
  #L1d0e74.  call `<init>`(v3, v4, v0, v2) @signature `Lf/a/a/e/g/g;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L1d0e7a.  `@@f.a.a.e.g.b.d` @type ^`f.a.a.e.g.g` := v3 @kind object;
  #L1d0e7e.  v0:= new `f.a.a.e.g.b$b`;
  #L1d0e82.  v2:= `@@f.a.a.e.g.b.d` @type ^`f.a.a.e.g.g` @kind object;
  #L1d0e86.  call `<init>`(v0, v1, v2) @signature `Lf/a/a/e/g/b$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1d0e8c.  `@@f.a.a.e.g.b.c` @type ^`f.a.a.e.g.b$b` := v0 @kind object;
  #L1d0e90.  v0:= `@@f.a.a.e.g.b.c` @type ^`f.a.a.e.g.b$b` @kind object;
  #L1d0e94.  call `shutdown`(v0) @signature `Lf/a/a/e/g/b$b;.shutdown:()V` @kind virtual;
  #L1d0e9a.  return @kind void;
}
procedure `void` `<init>`(`f.a.a.e.g.b` v1 @kind this) @signature `Lf/a/a/e/g/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d0eac.  v0:= `@@f.a.a.e.g.b.d` @type ^`f.a.a.e.g.g` @kind object;
  #L1d0eb0.  call `<init>`(v1, v0) @signature `Lf/a/a/e/g/b;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1d0eb6.  return @kind void;
}
procedure `void` `<init>`(`f.a.a.e.g.b` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lf/a/a/e/g/b;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d0ec8.  call `<init>`(v1) @signature `Lf/a/a/b/e;.<init>:()V` @kind direct;
  #L1d0ece.  v1.`f.a.a.e.g.b.a` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L1d0ed2.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L1d0ed6.  v0:= `@@f.a.a.e.g.b.c` @type ^`f.a.a.e.g.b$b` @kind object;
  #L1d0eda.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1d0ee0.  v1.`f.a.a.e.g.b.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L1d0ee4.  call `start`(v1) @signature `Lf/a/a/e/g/b;.start:()V` @kind virtual;
  #L1d0eea.  return @kind void;
}
procedure `int` `a`(`int` v0 , `int` v1 ) @signature `Lf/a/a/e/g/b;.a:(II)I` @AccessFlag STATIC {
    temp;

  #L1d0d60.  if v1 <= 0 then goto L1d0d6c;
  #L1d0d64.  if v1 <= v0 then goto L1d0d6a;
  #L1d0d68.  goto L1d0d6c;
  #L1d0d6a.  v0:= v1;
  #L1d0d6c.  return v0;
}
procedure `f.a.a.b.e$b` `createWorker`(`f.a.a.e.g.b` v2 @kind this) @signature `Lf/a/a/e/g/b;.createWorker:()Lf/a/a/b/e$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d0d80.  v0:= new `f.a.a.e.g.b$a`;
  #L1d0d84.  v1:= v2.`f.a.a.e.g.b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L1d0d88.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1d0d8e.  v1:= temp @kind object;
  #L1d0d90.  v1:= (`f.a.a.e.g.b$b`) v1 @kind object;
  #L1d0d94.  call temp:= `getEventLoop`(v1) @signature `Lf/a/a/e/g/b$b;.getEventLoop:()Lf/a/a/e/g/b$c;` @kind virtual;
  #L1d0d9a.  v1:= temp @kind object;
  #L1d0d9c.  call `<init>`(v0, v1) @signature `Lf/a/a/e/g/b$a;.<init>:(Lf/a/a/e/g/b$c;)V` @kind direct;
  #L1d0da2.  return v0 @kind object;
}
procedure `f.a.a.c.c` `scheduleDirect`(`f.a.a.e.g.b` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lf/a/a/e/g/b;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lf/a/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d0db4.  v0:= v1.`f.a.a.e.g.b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L1d0db8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1d0dbe.  v0:= temp @kind object;
  #L1d0dc0.  v0:= (`f.a.a.e.g.b$b`) v0 @kind object;
  #L1d0dc4.  call temp:= `getEventLoop`(v0) @signature `Lf/a/a/e/g/b$b;.getEventLoop:()Lf/a/a/e/g/b$c;` @kind virtual;
  #L1d0dca.  v0:= temp @kind object;
  #L1d0dcc.  call temp:= `scheduleDirect`(v0, v2, v3, v5) @signature `Lf/a/a/e/g/e;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lf/a/a/c/c;` @kind virtual;
  #L1d0dd2.  v2:= temp @kind object;
  #L1d0dd4.  return v2 @kind object;
}
procedure `void` `start`(`f.a.a.e.g.b` v3 @kind this) @signature `Lf/a/a/e/g/b;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d0efc.  v0:= new `f.a.a.e.g.b$b`;
  #L1d0f00.  v1:= `@@f.a.a.e.g.b.e` @type ^`int`;
  #L1d0f04.  v2:= v3.`f.a.a.e.g.b.a` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L1d0f08.  call `<init>`(v0, v1, v2) @signature `Lf/a/a/e/g/b$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1d0f0e.  v1:= v3.`f.a.a.e.g.b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L1d0f12.  v2:= `@@f.a.a.e.g.b.c` @type ^`f.a.a.e.g.b$b` @kind object;
  #L1d0f16.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1d0f1c.  v1:= temp;
  #L1d0f1e.  if v1 != 0 then goto L1d0f28;
  #L1d0f22.  call `shutdown`(v0) @signature `Lf/a/a/e/g/b$b;.shutdown:()V` @kind virtual;
  #L1d0f28.  return @kind void;
}
