record `f.a.a.e.g.c$b` @kind class @AccessFlag FINAL extends `f.a.a.b.e$b` @kind class {
  `f.a.a.c.a` `f.a.a.e.g.c$b.f` @AccessFlag PRIVATE_FINAL;
  `f.a.a.e.g.c$a` `f.a.a.e.g.c$b.g` @AccessFlag PRIVATE_FINAL;
  `f.a.a.e.g.c$c` `f.a.a.e.g.c$b.h` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `f.a.a.e.g.c$b.i` @AccessFlag FINAL;
}
procedure `void` `<init>`(`f.a.a.e.g.c$b` v1 @kind this, `f.a.a.e.g.c$a` v2 @kind object) @signature `Lf/a/a/e/g/c$b;.<init>:(Lf/a/a/e/g/c$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1d117c.  call `<init>`(v1) @signature `Lf/a/a/b/e$b;.<init>:()V` @kind direct;
  #L1d1182.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L1d1186.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L1d118c.  v1.`f.a.a.e.g.c$b.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L1d1190.  v1.`f.a.a.e.g.c$b.g` @type ^`f.a.a.e.g.c$a` := v2 @kind object;
  #L1d1194.  v0:= new `f.a.a.c.a`;
  #L1d1198.  call `<init>`(v0) @signature `Lf/a/a/c/a;.<init>:()V` @kind direct;
  #L1d119e.  v1.`f.a.a.e.g.c$b.f` @type ^`f.a.a.c.a` := v0 @kind object;
  #L1d11a2.  call temp:= `a`(v2) @signature `Lf/a/a/e/g/c$a;.a:()Lf/a/a/e/g/c$c;` @kind virtual;
  #L1d11a8.  v2:= temp @kind object;
  #L1d11aa.  v1.`f.a.a.e.g.c$b.h` @type ^`f.a.a.e.g.c$c` := v2 @kind object;
  #L1d11ae.  return @kind void;
}
procedure `void` `dispose`(`f.a.a.e.g.c$b` v3 @kind this) @signature `Lf/a/a/e/g/c$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d11c0.  v0:= v3.`f.a.a.e.g.c$b.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L1d11c4.  v1:= 0I;
  #L1d11c6.  v2:= 1I;
  #L1d11c8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L1d11ce.  v0:= temp;
  #L1d11d0.  if v0 == 0 then goto L1d11ec;
  #L1d11d4.  v0:= v3.`f.a.a.e.g.c$b.f` @type ^`f.a.a.c.a` @kind object;
  #L1d11d8.  call `dispose`(v0) @signature `Lf/a/a/c/a;.dispose:()V` @kind virtual;
  #L1d11de.  v0:= v3.`f.a.a.e.g.c$b.g` @type ^`f.a.a.e.g.c$a` @kind object;
  #L1d11e2.  v1:= v3.`f.a.a.e.g.c$b.h` @type ^`f.a.a.e.g.c$c` @kind object;
  #L1d11e6.  call `a`(v0, v1) @signature `Lf/a/a/e/g/c$a;.a:(Lf/a/a/e/g/c$c;)V` @kind virtual;
  #L1d11ec.  return @kind void;
}
procedure `f.a.a.c.c` `schedule`(`f.a.a.e.g.c$b` v6 @kind this, `java.lang.Runnable` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lf/a/a/e/g/c$b;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lf/a/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1d113c.  v0:= v6.`f.a.a.e.g.c$b.f` @type ^`f.a.a.c.a` @kind object;
  #L1d1140.  call temp:= `isDisposed`(v0) @signature `Lf/a/a/c/a;.isDisposed:()Z` @kind virtual;
  #L1d1146.  v0:= temp;
  #L1d1148.  if v0 == 0 then goto L1d1152;
  #L1d114c.  v7:= `@@f.a.a.e.a.b.f` @type ^`f.a.a.e.a.b` @kind object;
  #L1d1150.  return v7 @kind object;
  #L1d1152.  v0:= v6.`f.a.a.e.g.c$b.h` @type ^`f.a.a.e.g.c$c` @kind object;
  #L1d1156.  v5:= v6.`f.a.a.e.g.c$b.f` @type ^`f.a.a.c.a` @kind object;
  #L1d115a.  v1:= v7 @kind object;
  #L1d115c.  v2:= v8 @kind wide;
  #L1d115e.  v4:= v10 @kind object;
  #L1d1160.  call temp:= `scheduleActual`(v0, v1, v2, v4, v5) @signature `Lf/a/a/e/g/e;.scheduleActual:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;Lf/a/a/c/d;)Lf/a/a/e/g/i;` @kind virtual;
  #L1d1166.  v7:= temp @kind object;
  #L1d1168.  return v7 @kind object;
}
