record `f.a.a.e.g.k` @kind class @AccessFlag PUBLIC_FINAL {
}
global `boolean` `@@f.a.a.e.g.k.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@f.a.a.e.g.k.b` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@f.a.a.e.g.k.c` @AccessFlag STATIC_FINAL;
global `java.util.Map` `@@f.a.a.e.g.k.d` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lf/a/a/e/g/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d1c3c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L1d1c40.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L1d1c46.  `@@f.a.a.e.g.k.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L1d1c4a.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L1d1c4e.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L1d1c54.  `@@f.a.a.e.g.k.d` @type ^`java.util.Map` := v0 @kind object;
  #L1d1c58.  v0:= new `f.a.a.e.g.k$b`;
  #L1d1c5c.  call `<init>`(v0) @signature `Lf/a/a/e/g/k$b;.<init>:()V` @kind direct;
  #L1d1c62.  v1:= 1I;
  #L1d1c64.  v2:= "rx3.purge-enabled" @kind object;
  #L1d1c68.  call temp:= `a`(v1, v2, v1, v1, v0) @signature `Lf/a/a/e/g/k;.a:(ZLjava/lang/String;ZZLf/a/a/d/e;)Z` @kind static;
  #L1d1c6e.  v2:= temp;
  #L1d1c70.  `@@f.a.a.e.g.k.a` @type ^`boolean` := v2 @kind boolean;
  #L1d1c74.  v2:= `@@f.a.a.e.g.k.a` @type ^`boolean` @kind boolean;
  #L1d1c78.  v3:= "rx3.purge-period-seconds" @kind object;
  #L1d1c7c.  call temp:= `a`(v2, v3, v1, v1, v0) @signature `Lf/a/a/e/g/k;.a:(ZLjava/lang/String;IILf/a/a/d/e;)I` @kind static;
  #L1d1c82.  v0:= temp;
  #L1d1c84.  `@@f.a.a.e.g.k.b` @type ^`int` := v0;
  #L1d1c88.  call `start`() @signature `Lf/a/a/e/g/k;.start:()V` @kind static;
  #L1d1c8e.  return @kind void;
}
procedure `int` `a`(`boolean` v0 , `java.lang.String` v1 @kind object, `int` v2 , `int` v3 , `f.a.a.d.e` v4 @kind object) @signature `Lf/a/a/e/g/k;.a:(ZLjava/lang/String;IILf/a/a/d/e;)I` @AccessFlag STATIC {
    temp;

  #L1d1bcc.  if v0 == 0 then goto L1d1bf6;
  #L1d1bd0.  call temp:= `apply`(v4, v1) @signature `Lf/a/a/d/e;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1d1bd6.  v0:= temp @kind object;
  #L1d1bd8.  v0:= (`java.lang.String`) v0 @kind object;
  #L1d1bdc.  if v0 != 0 then goto L1d1be2;
  #L1d1be0.  return v2;
  #L1d1be2.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L1d1be8.  v0:= temp;
  #L1d1bea.  return v0;
  #L1d1bec.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d1bee.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/a;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L1d1bf4.  return v2;
  #L1d1bf6.  return v3;
  catch `java.lang.Throwable` @[L1d1bd0..L1d1bea] goto L1d1bec;
}
procedure `void` `a`(`boolean` v10 ) @signature `Lf/a/a/e/g/k;.a:(Z)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1d1cec.  if v10 == 0 then goto L1d1d54;
  #L1d1cf0.  v10:= `@@f.a.a.e.g.k.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L1d1cf4.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1d1cfa.  v10:= temp @kind object;
  #L1d1cfc.  v10:= (`java.util.concurrent.ScheduledExecutorService`) v10 @kind object;
  #L1d1d00.  if v10 == 0 then goto L1d1d06;
  #L1d1d04.  return @kind void;
  #L1d1d06.  v0:= 1I;
  #L1d1d08.  v1:= new `f.a.a.e.g.g`;
  #L1d1d0c.  v2:= "RxSchedulerPurge" @kind object;
  #L1d1d10.  call `<init>`(v1, v2) @signature `Lf/a/a/e/g/g;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d1d16.  call temp:= `newScheduledThreadPool`(v0, v1) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L1d1d1c.  v3:= temp @kind object;
  #L1d1d1e.  v0:= `@@f.a.a.e.g.k.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L1d1d22.  call temp:= `compareAndSet`(v0, v10, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1d1d28.  v10:= temp;
  #L1d1d2a.  if v10 == 0 then goto L1d1d4c;
  #L1d1d2e.  v4:= new `f.a.a.e.g.k$a`;
  #L1d1d32.  call `<init>`(v4) @signature `Lf/a/a/e/g/k$a;.<init>:()V` @kind direct;
  #L1d1d38.  v10:= `@@f.a.a.e.g.k.b` @type ^`int`;
  #L1d1d3c.  v5:= (`long`) v10 @kind i2l;
  #L1d1d3e.  v7:= (`long`) v10 @kind i2l;
  #L1d1d40.  v9:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1d1d44.  call temp:= `scheduleAtFixedRate`(v3, v4, v5, v7, v9) @signature `Ljava/util/concurrent/ScheduledExecutorService;.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L1d1d4a.  return @kind void;
  #L1d1d4c.  call temp:= `shutdownNow`(v3) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L1d1d52.  goto L1d1cf0;
  #L1d1d54.  return @kind void;
}
procedure `void` `a`(`boolean` v1 , `java.util.concurrent.ScheduledExecutorService` v2 @kind object) @signature `Lf/a/a/e/g/k;.a:(ZLjava/util/concurrent/ScheduledExecutorService;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L1d1cbc.  if v1 == 0 then goto L1d1cd8;
  #L1d1cc0.  v1:= instanceof @variable v2 @type ^`java.util.concurrent.ScheduledThreadPoolExecutor` @kind boolean;
  #L1d1cc4.  if v1 == 0 then goto L1d1cd8;
  #L1d1cc8.  v1:= v2 @kind object;
  #L1d1cca.  v1:= (`java.util.concurrent.ScheduledThreadPoolExecutor`) v1 @kind object;
  #L1d1cce.  v0:= `@@f.a.a.e.g.k.d` @type ^`java.util.Map` @kind object;
  #L1d1cd2.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1d1cd8.  return @kind void;
}
procedure `boolean` `a`(`boolean` v0 , `java.lang.String` v1 @kind object, `boolean` v2 , `boolean` v3 , `f.a.a.d.e` v4 @kind object) @signature `Lf/a/a/e/g/k;.a:(ZLjava/lang/String;ZZLf/a/a/d/e;)Z` @AccessFlag STATIC {
    temp;

  #L1d1b80.  if v0 == 0 then goto L1d1bae;
  #L1d1b84.  call temp:= `apply`(v4, v1) @signature `Lf/a/a/d/e;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1d1b8a.  v0:= temp @kind object;
  #L1d1b8c.  v0:= (`java.lang.String`) v0 @kind object;
  #L1d1b90.  if v0 != 0 then goto L1d1b96;
  #L1d1b94.  return v2;
  #L1d1b96.  v1:= "true" @kind object;
  #L1d1b9a.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d1ba0.  v0:= temp;
  #L1d1ba2.  return v0;
  #L1d1ba4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d1ba6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/a;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L1d1bac.  return v2;
  #L1d1bae.  return v3;
  catch `java.lang.Throwable` @[L1d1b84..L1d1ba2] goto L1d1ba4;
}
procedure `java.util.concurrent.ScheduledExecutorService` `create`(`java.util.concurrent.ThreadFactory` v1 @kind object) @signature `Lf/a/a/e/g/k;.create:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d1c14.  v0:= 1I;
  #L1d1c16.  call temp:= `newScheduledThreadPool`(v0, v1) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L1d1c1c.  v1:= temp @kind object;
  #L1d1c1e.  v0:= `@@f.a.a.e.g.k.a` @type ^`boolean` @kind boolean;
  #L1d1c22.  call `a`(v0, v1) @signature `Lf/a/a/e/g/k;.a:(ZLjava/util/concurrent/ScheduledExecutorService;)V` @kind static;
  #L1d1c28.  return v1 @kind object;
}
procedure `void` `start`() @signature `Lf/a/a/e/g/k;.start:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d1ca0.  v0:= `@@f.a.a.e.g.k.a` @type ^`boolean` @kind boolean;
  #L1d1ca4.  call `a`(v0) @signature `Lf/a/a/e/g/k;.a:(Z)V` @kind static;
  #L1d1caa.  return @kind void;
}
