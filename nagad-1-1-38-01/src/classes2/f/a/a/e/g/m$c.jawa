record `f.a.a.e.g.m$c` @kind class @AccessFlag FINAL extends `f.a.a.b.e$b` @kind class, `f.a.a.c.c` @kind interface {
  `java.util.concurrent.PriorityBlockingQueue` `f.a.a.e.g.m$c.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `f.a.a.e.g.m$c.g` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `f.a.a.e.g.m$c.h` @AccessFlag FINAL;
  `boolean` `f.a.a.e.g.m$c.i` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`f.a.a.e.g.m$c` v1 @kind this) @signature `Lf/a/a/e/g/m$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1d227c.  call `<init>`(v1) @signature `Lf/a/a/b/e$b;.<init>:()V` @kind direct;
  #L1d2282.  v0:= new `java.util.concurrent.PriorityBlockingQueue`;
  #L1d2286.  call `<init>`(v0) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.<init>:()V` @kind direct;
  #L1d228c.  v1.`f.a.a.e.g.m$c.f` @type ^`java.util.concurrent.PriorityBlockingQueue` := v0 @kind object;
  #L1d2290.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L1d2294.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L1d229a.  v1.`f.a.a.e.g.m$c.g` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L1d229e.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L1d22a2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L1d22a8.  v1.`f.a.a.e.g.m$c.h` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L1d22ac.  return @kind void;
}
procedure `f.a.a.c.c` `a`(`f.a.a.e.g.m$c` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 ) @signature `Lf/a/a/e/g/m$c;.a:(Ljava/lang/Runnable;J)Lf/a/a/c/c;` @AccessFlag  {
    temp;
    v0;

  #L1d2154.  v0:= v1.`f.a.a.e.g.m$c.i` @type ^`boolean` @kind boolean;
  #L1d2158.  if v0 == 0 then goto L1d2162;
  #L1d215c.  v2:= `@@f.a.a.e.a.b.f` @type ^`f.a.a.e.a.b` @kind object;
  #L1d2160.  return v2 @kind object;
  #L1d2162.  v0:= new `f.a.a.e.g.m$b`;
  #L1d2166.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1d216c.  v3:= temp @kind object;
  #L1d216e.  v4:= v1.`f.a.a.e.g.m$c.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L1d2172.  call temp:= `incrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L1d2178.  v4:= temp;
  #L1d217a.  call `<init>`(v0, v2, v3, v4) @signature `Lf/a/a/e/g/m$b;.<init>:(Ljava/lang/Runnable;Ljava/lang/Long;I)V` @kind direct;
  #L1d2180.  v2:= v1.`f.a.a.e.g.m$c.f` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L1d2184.  call temp:= `add`(v2, v0) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d218a.  v2:= v1.`f.a.a.e.g.m$c.g` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L1d218e.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L1d2194.  v2:= temp;
  #L1d2196.  if v2 != 0 then goto L1d21f4;
  #L1d219a.  v2:= 1I;
  #L1d219c.  v3:= v1.`f.a.a.e.g.m$c.i` @type ^`boolean` @kind boolean;
  #L1d21a0.  if v3 == 0 then goto L1d21b4;
  #L1d21a4.  v2:= v1.`f.a.a.e.g.m$c.f` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L1d21a8.  call `clear`(v2) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.clear:()V` @kind virtual;
  #L1d21ae.  v2:= `@@f.a.a.e.a.b.f` @type ^`f.a.a.e.a.b` @kind object;
  #L1d21b2.  return v2 @kind object;
  #L1d21b4.  v3:= v1.`f.a.a.e.g.m$c.f` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L1d21b8.  call temp:= `poll`(v3) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L1d21be.  v3:= temp @kind object;
  #L1d21c0.  v3:= (`f.a.a.e.g.m$b`) v3 @kind object;
  #L1d21c4.  if v3 != 0 then goto L1d21e0;
  #L1d21c8.  v3:= v1.`f.a.a.e.g.m$c.g` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L1d21cc.  v2:= -v2 @kind int;
  #L1d21ce.  call temp:= `addAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L1d21d4.  v2:= temp;
  #L1d21d6.  if v2 != 0 then goto L1d219c;
  #L1d21da.  v2:= `@@f.a.a.e.a.b.f` @type ^`f.a.a.e.a.b` @kind object;
  #L1d21de.  return v2 @kind object;
  #L1d21e0.  v4:= v3.`f.a.a.e.g.m$b.i` @type ^`boolean` @kind boolean;
  #L1d21e4.  if v4 != 0 then goto L1d219c;
  #L1d21e8.  v3:= v3.`f.a.a.e.g.m$b.f` @type ^`java.lang.Runnable` @kind object;
  #L1d21ec.  call `run`(v3) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L1d21f2.  goto L1d219c;
  #L1d21f4.  v2:= new `f.a.a.e.g.m$c$a`;
  #L1d21f8.  call `<init>`(v2, v1, v0) @signature `Lf/a/a/e/g/m$c$a;.<init>:(Lf/a/a/e/g/m$c;Lf/a/a/e/g/m$b;)V` @kind direct;
  #L1d21fe.  call temp:= `a`(v2) @signature `Lf/a/a/c/b;.a:(Ljava/lang/Runnable;)Lf/a/a/c/c;` @kind static;
  #L1d2204.  v2:= temp @kind object;
  #L1d2206.  return v2 @kind object;
}
procedure `void` `dispose`(`f.a.a.e.g.m$c` v1 @kind this) @signature `Lf/a/a/e/g/m$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d22c0.  v0:= 1I;
  #L1d22c2.  v1.`f.a.a.e.g.m$c.i` @type ^`boolean` := v0 @kind boolean;
  #L1d22c6.  return @kind void;
}
procedure `f.a.a.c.c` `schedule`(`f.a.a.e.g.m$c` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lf/a/a/e/g/m$c;.schedule:(Ljava/lang/Runnable;)Lf/a/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d2218.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1d221c.  call temp:= `now`(v2, v0) @signature `Lf/a/a/b/e$b;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L1d2222.  v0:= temp @kind wide;
  #L1d2224.  call temp:= `a`(v2, v3, v0) @signature `Lf/a/a/e/g/m$c;.a:(Ljava/lang/Runnable;J)Lf/a/a/c/c;` @kind virtual;
  #L1d222a.  v3:= temp @kind object;
  #L1d222c.  return v3 @kind object;
}
procedure `f.a.a.c.c` `schedule`(`f.a.a.e.g.m$c` v2 @kind this, `java.lang.Runnable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Lf/a/a/e/g/m$c;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lf/a/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d2240.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1d2244.  call temp:= `now`(v2, v0) @signature `Lf/a/a/b/e$b;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L1d224a.  v0:= temp @kind wide;
  #L1d224c.  call temp:= `toMillis`(v6, v4) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L1d2252.  v4:= temp @kind wide;
  #L1d2254.  v0:= v0 + v4 @kind long;
  #L1d2256.  v4:= new `f.a.a.e.g.m$a`;
  #L1d225a.  call `<init>`(v4, v3, v2, v0) @signature `Lf/a/a/e/g/m$a;.<init>:(Ljava/lang/Runnable;Lf/a/a/e/g/m$c;J)V` @kind direct;
  #L1d2260.  call temp:= `a`(v2, v4, v0) @signature `Lf/a/a/e/g/m$c;.a:(Ljava/lang/Runnable;J)Lf/a/a/c/c;` @kind virtual;
  #L1d2266.  v3:= temp @kind object;
  #L1d2268.  return v3 @kind object;
}
