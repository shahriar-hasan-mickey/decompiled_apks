record `f.a.a.e.g.l` @kind class @AccessFlag PUBLIC_FINAL extends `f.a.a.b.e` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `f.a.a.e.g.l.a` @AccessFlag FINAL;
}
global `f.a.a.e.g.g` `@@f.a.a.e.g.l.b` @AccessFlag STATIC_FINAL;
global `java.util.concurrent.ScheduledExecutorService` `@@f.a.a.e.g.l.c` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lf/a/a/e/g/l;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d1f20.  v0:= 0I;
  #L1d1f22.  call temp:= `newScheduledThreadPool`(v0) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(I)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L1d1f28.  v0:= temp @kind object;
  #L1d1f2a.  `@@f.a.a.e.g.l.c` @type ^`java.util.concurrent.ScheduledExecutorService` := v0 @kind object;
  #L1d1f2e.  v0:= `@@f.a.a.e.g.l.c` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L1d1f32.  call `shutdown`(v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdown:()V` @kind interface;
  #L1d1f38.  v0:= "rx3.single-priority" @kind object;
  #L1d1f3c.  v1:= 5I;
  #L1d1f3e.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L1d1f44.  v0:= temp @kind object;
  #L1d1f46.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1d1f4c.  v0:= temp;
  #L1d1f4e.  v1:= 10I;
  #L1d1f52.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d1f58.  v0:= temp;
  #L1d1f5a.  v1:= 1I;
  #L1d1f5c.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1d1f62.  v0:= temp;
  #L1d1f64.  v2:= new `f.a.a.e.g.g`;
  #L1d1f68.  v3:= "RxSingleScheduler" @kind object;
  #L1d1f6c.  call `<init>`(v2, v3, v0, v1) @signature `Lf/a/a/e/g/g;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L1d1f72.  `@@f.a.a.e.g.l.b` @type ^`f.a.a.e.g.g` := v2 @kind object;
  #L1d1f76.  return @kind void;
}
procedure `void` `<init>`(`f.a.a.e.g.l` v1 @kind this) @signature `Lf/a/a/e/g/l;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d1f88.  v0:= `@@f.a.a.e.g.l.b` @type ^`f.a.a.e.g.g` @kind object;
  #L1d1f8c.  call `<init>`(v1, v0) @signature `Lf/a/a/e/g/l;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1d1f92.  return @kind void;
}
procedure `void` `<init>`(`f.a.a.e.g.l` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lf/a/a/e/g/l;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d1fa4.  call `<init>`(v1) @signature `Lf/a/a/b/e;.<init>:()V` @kind direct;
  #L1d1faa.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L1d1fae.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L1d1fb4.  v1.`f.a.a.e.g.l.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L1d1fb8.  v0:= v1.`f.a.a.e.g.l.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L1d1fbc.  call temp:= `a`(v2) @signature `Lf/a/a/e/g/l;.a:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L1d1fc2.  v2:= temp @kind object;
  #L1d1fc4.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L1d1fca.  return @kind void;
}
procedure `java.util.concurrent.ScheduledExecutorService` `a`(`java.util.concurrent.ThreadFactory` v0 @kind object) @signature `Lf/a/a/e/g/l;.a:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @AccessFlag STATIC {
    temp;

  #L1d1f04.  call temp:= `create`(v0) @signature `Lf/a/a/e/g/k;.create:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L1d1f0a.  v0:= temp @kind object;
  #L1d1f0c.  return v0 @kind object;
}
procedure `f.a.a.b.e$b` `createWorker`(`f.a.a.e.g.l` v2 @kind this) @signature `Lf/a/a/e/g/l;.createWorker:()Lf/a/a/b/e$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d1e50.  v0:= new `f.a.a.e.g.l$a`;
  #L1d1e54.  v1:= v2.`f.a.a.e.g.l.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L1d1e58.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1d1e5e.  v1:= temp @kind object;
  #L1d1e60.  v1:= (`java.util.concurrent.ScheduledExecutorService`) v1 @kind object;
  #L1d1e64.  call `<init>`(v0, v1) @signature `Lf/a/a/e/g/l$a;.<init>:(Ljava/util/concurrent/ScheduledExecutorService;)V` @kind direct;
  #L1d1e6a.  return v0 @kind object;
}
procedure `f.a.a.c.c` `scheduleDirect`(`f.a.a.e.g.l` v3 @kind this, `java.lang.Runnable` v4 @kind object, `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object) @signature `Lf/a/a/e/g/l;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lf/a/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d1e7c.  v0:= new `f.a.a.e.g.h`;
  #L1d1e80.  call temp:= `onSchedule`(v4) @signature `Lf/a/a/g/a;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @kind static;
  #L1d1e86.  v4:= temp @kind object;
  #L1d1e88.  call `<init>`(v0, v4) @signature `Lf/a/a/e/g/h;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L1d1e8e.  v1:= 0L;
  #L1d1e92.  v4:= lcmp(v5, v1);
  #L1d1e96.  if v4 > 0 then goto L1d1eb4;
  #L1d1e9a.  v4:= v3.`f.a.a.e.g.l.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L1d1e9e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1d1ea4.  v4:= temp @kind object;
  #L1d1ea6.  v4:= (`java.util.concurrent.ScheduledExecutorService`) v4 @kind object;
  #L1d1eaa.  call temp:= `submit`(v4, v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;` @kind interface;
  #L1d1eb0.  v4:= temp @kind object;
  #L1d1eb2.  goto L1d1ecc;
  #L1d1eb4.  v4:= v3.`f.a.a.e.g.l.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L1d1eb8.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1d1ebe.  v4:= temp @kind object;
  #L1d1ec0.  v4:= (`java.util.concurrent.ScheduledExecutorService`) v4 @kind object;
  #L1d1ec4.  call temp:= `schedule`(v4, v0, v5, v7) @signature `Ljava/util/concurrent/ScheduledExecutorService;.schedule:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L1d1eca.  v4:= temp @kind object;
  #L1d1ecc.  call `setFuture`(v0, v4) @signature `Lf/a/a/e/g/a;.setFuture:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L1d1ed2.  return v0 @kind object;
  #L1d1ed4.  v4:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L1d1ed6.  call `onError`(v4) @signature `Lf/a/a/g/a;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L1d1edc.  v4:= `@@f.a.a.e.a.b.f` @type ^`f.a.a.e.a.b` @kind object;
  #L1d1ee0.  return v4 @kind object;
  catch `java.util.concurrent.RejectedExecutionException` @[L1d1e9a..L1d1ed2] goto L1d1ed4;
}
