record `f.a.a.g.a` @kind class @AccessFlag PUBLIC_FINAL {
}
global `f.a.a.d.d` `@@f.a.a.g.a.a` @AccessFlag STATIC_VOLATILE;
global `f.a.a.d.e` `@@f.a.a.g.a.b` @AccessFlag STATIC_VOLATILE;
global `f.a.a.d.e` `@@f.a.a.g.a.c` @AccessFlag STATIC_VOLATILE;
global `f.a.a.d.e` `@@f.a.a.g.a.d` @AccessFlag STATIC_VOLATILE;
global `f.a.a.d.e` `@@f.a.a.g.a.e` @AccessFlag STATIC_VOLATILE;
global `f.a.a.d.e` `@@f.a.a.g.a.f` @AccessFlag STATIC_VOLATILE;
global `f.a.a.d.e` `@@f.a.a.g.a.g` @AccessFlag STATIC_VOLATILE;
global `f.a.a.d.e` `@@f.a.a.g.a.h` @AccessFlag STATIC_VOLATILE;
global `f.a.a.d.e` `@@f.a.a.g.a.i` @AccessFlag STATIC_VOLATILE;
global `f.a.a.d.b` `@@f.a.a.g.a.j` @AccessFlag STATIC_VOLATILE;
procedure `f.a.a.b.e` `a`(`f.a.a.d.e` v0 @kind object, `f.a.a.d.h` v1 @kind object) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/e;Lf/a/a/d/h;)Lf/a/a/b/e;` @AccessFlag STATIC {
    temp;

  #L1d280c.  call temp:= `a`(v0, v1) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/e;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1d2812.  v0:= temp @kind object;
  #L1d2814.  v1:= "Scheduler Supplier result can't be null" @kind object;
  #L1d2818.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1d281e.  v0:= temp @kind object;
  #L1d2820.  v0:= (`f.a.a.b.e`) v0 @kind object;
  #L1d2824.  return v0 @kind object;
}
procedure `f.a.a.b.e` `a`(`f.a.a.d.h` v1 @kind object) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/h;)Lf/a/a/b/e;` @AccessFlag STATIC {
    temp;
    v0;

  #L1d2838.  call temp:= `get`(v1) @signature `Lf/a/a/d/h;.get:()Ljava/lang/Object;` @kind interface;
  #L1d283e.  v1:= temp @kind object;
  #L1d2840.  v0:= "Scheduler Supplier result can't be null" @kind object;
  #L1d2844.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1d284a.  v1:= temp @kind object;
  #L1d284c.  v1:= (`f.a.a.b.e`) v1 @kind object;
  #L1d2850.  return v1 @kind object;
  #L1d2852.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d2854.  call temp:= `wrapOrThrow`(v1) @signature `Lf/a/a/e/h/a;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L1d285a.  v1:= temp @kind object;
  #L1d285c.  throw v1;
  catch `java.lang.Throwable` @[L1d2838..L1d2850] goto L1d2852;
}
procedure `java.lang.Object` `a`(`f.a.a.d.b` v0 @kind object, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/b;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;

  #L1d29ac.  call temp:= `apply`(v0, v1, v2) @signature `Lf/a/a/d/b;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1d29b2.  v0:= temp @kind object;
  #L1d29b4.  return v0 @kind object;
  #L1d29b6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d29b8.  call temp:= `wrapOrThrow`(v0) @signature `Lf/a/a/e/h/a;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L1d29be.  v0:= temp @kind object;
  #L1d29c0.  throw v0;
  catch `java.lang.Throwable` @[L1d29ac..L1d29b4] goto L1d29b6;
}
procedure `java.lang.Object` `a`(`f.a.a.d.e` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/e;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;

  #L1d29e0.  call temp:= `apply`(v0, v1) @signature `Lf/a/a/d/e;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1d29e6.  v0:= temp @kind object;
  #L1d29e8.  return v0 @kind object;
  #L1d29ea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d29ec.  call temp:= `wrapOrThrow`(v0) @signature `Lf/a/a/e/h/a;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L1d29f2.  v0:= temp @kind object;
  #L1d29f4.  throw v0;
  catch `java.lang.Throwable` @[L1d29e0..L1d29e8] goto L1d29ea;
}
procedure `boolean` `a`(`java.lang.Throwable` v2 @kind object) @signature `Lf/a/a/g/a;.a:(Ljava/lang/Throwable;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1d2768.  v0:= instanceof @variable v2 @type ^`io.reactivex.rxjava3.exceptions.OnErrorNotImplementedException` @kind boolean;
  #L1d276c.  v1:= 1I;
  #L1d276e.  if v0 == 0 then goto L1d2774;
  #L1d2772.  return v1;
  #L1d2774.  v0:= instanceof @variable v2 @type ^`io.reactivex.rxjava3.exceptions.MissingBackpressureException` @kind boolean;
  #L1d2778.  if v0 == 0 then goto L1d277e;
  #L1d277c.  return v1;
  #L1d277e.  v0:= instanceof @variable v2 @type ^`java.lang.IllegalStateException` @kind boolean;
  #L1d2782.  if v0 == 0 then goto L1d2788;
  #L1d2786.  return v1;
  #L1d2788.  v0:= instanceof @variable v2 @type ^`java.lang.NullPointerException` @kind boolean;
  #L1d278c.  if v0 == 0 then goto L1d2792;
  #L1d2790.  return v1;
  #L1d2792.  v0:= instanceof @variable v2 @type ^`java.lang.IllegalArgumentException` @kind boolean;
  #L1d2796.  if v0 == 0 then goto L1d279c;
  #L1d279a.  return v1;
  #L1d279c.  v2:= instanceof @variable v2 @type ^`io.reactivex.rxjava3.exceptions.CompositeException` @kind boolean;
  #L1d27a0.  if v2 == 0 then goto L1d27a6;
  #L1d27a4.  return v1;
  #L1d27a6.  v2:= 0I;
  #L1d27a8.  return v2;
}
procedure `void` `b`(`java.lang.Throwable` v2 @kind object) @signature `Lf/a/a/g/a;.b:(Ljava/lang/Throwable;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1d2abc.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1d2ac2.  v0:= temp @kind object;
  #L1d2ac4.  call temp:= `getUncaughtExceptionHandler`(v0) @signature `Ljava/lang/Thread;.getUncaughtExceptionHandler:()Ljava/lang/Thread$UncaughtExceptionHandler;` @kind virtual;
  #L1d2aca.  v1:= temp @kind object;
  #L1d2acc.  call `uncaughtException`(v1, v0, v2) @signature `Ljava/lang/Thread$UncaughtExceptionHandler;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @kind interface;
  #L1d2ad2.  return @kind void;
}
procedure `f.a.a.b.e` `initComputationScheduler`(`f.a.a.d.h` v1 @kind object) @signature `Lf/a/a/g/a;.initComputationScheduler:(Lf/a/a/d/h;)Lf/a/a/b/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d287c.  v0:= "Scheduler Supplier can't be null" @kind object;
  #L1d2880.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1d2886.  v0:= `@@f.a.a.g.a.c` @type ^`f.a.a.d.e` @kind object;
  #L1d288a.  if v0 != 0 then goto L1d2898;
  #L1d288e.  call temp:= `a`(v1) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/h;)Lf/a/a/b/e;` @kind static;
  #L1d2894.  v1:= temp @kind object;
  #L1d2896.  return v1 @kind object;
  #L1d2898.  call temp:= `a`(v0, v1) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/e;Lf/a/a/d/h;)Lf/a/a/b/e;` @kind static;
  #L1d289e.  v1:= temp @kind object;
  #L1d28a0.  return v1 @kind object;
}
procedure `f.a.a.b.e` `initIoScheduler`(`f.a.a.d.h` v1 @kind object) @signature `Lf/a/a/g/a;.initIoScheduler:(Lf/a/a/d/h;)Lf/a/a/b/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d28b4.  v0:= "Scheduler Supplier can't be null" @kind object;
  #L1d28b8.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1d28be.  v0:= `@@f.a.a.g.a.e` @type ^`f.a.a.d.e` @kind object;
  #L1d28c2.  if v0 != 0 then goto L1d28d0;
  #L1d28c6.  call temp:= `a`(v1) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/h;)Lf/a/a/b/e;` @kind static;
  #L1d28cc.  v1:= temp @kind object;
  #L1d28ce.  return v1 @kind object;
  #L1d28d0.  call temp:= `a`(v0, v1) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/e;Lf/a/a/d/h;)Lf/a/a/b/e;` @kind static;
  #L1d28d6.  v1:= temp @kind object;
  #L1d28d8.  return v1 @kind object;
}
procedure `f.a.a.b.e` `initNewThreadScheduler`(`f.a.a.d.h` v1 @kind object) @signature `Lf/a/a/g/a;.initNewThreadScheduler:(Lf/a/a/d/h;)Lf/a/a/b/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d28ec.  v0:= "Scheduler Supplier can't be null" @kind object;
  #L1d28f0.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1d28f6.  v0:= `@@f.a.a.g.a.f` @type ^`f.a.a.d.e` @kind object;
  #L1d28fa.  if v0 != 0 then goto L1d2908;
  #L1d28fe.  call temp:= `a`(v1) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/h;)Lf/a/a/b/e;` @kind static;
  #L1d2904.  v1:= temp @kind object;
  #L1d2906.  return v1 @kind object;
  #L1d2908.  call temp:= `a`(v0, v1) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/e;Lf/a/a/d/h;)Lf/a/a/b/e;` @kind static;
  #L1d290e.  v1:= temp @kind object;
  #L1d2910.  return v1 @kind object;
}
procedure `f.a.a.b.e` `initSingleScheduler`(`f.a.a.d.h` v1 @kind object) @signature `Lf/a/a/g/a;.initSingleScheduler:(Lf/a/a/d/h;)Lf/a/a/b/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d2924.  v0:= "Scheduler Supplier can't be null" @kind object;
  #L1d2928.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1d292e.  v0:= `@@f.a.a.g.a.d` @type ^`f.a.a.d.e` @kind object;
  #L1d2932.  if v0 != 0 then goto L1d2940;
  #L1d2936.  call temp:= `a`(v1) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/h;)Lf/a/a/b/e;` @kind static;
  #L1d293c.  v1:= temp @kind object;
  #L1d293e.  return v1 @kind object;
  #L1d2940.  call temp:= `a`(v0, v1) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/e;Lf/a/a/d/h;)Lf/a/a/b/e;` @kind static;
  #L1d2946.  v1:= temp @kind object;
  #L1d2948.  return v1 @kind object;
}
procedure `f.a.a.b.b` `onAssembly`(`f.a.a.b.b` v1 @kind object) @signature `Lf/a/a/g/a;.onAssembly:(Lf/a/a/b/b;)Lf/a/a/b/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d27bc.  v0:= `@@f.a.a.g.a.i` @type ^`f.a.a.d.e` @kind object;
  #L1d27c0.  if v0 == 0 then goto L1d27d0;
  #L1d27c4.  call temp:= `a`(v0, v1) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/e;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1d27ca.  v1:= temp @kind object;
  #L1d27cc.  v1:= (`f.a.a.b.b`) v1 @kind object;
  #L1d27d0.  return v1 @kind object;
}
procedure `f.a.a.b.e` `onComputationScheduler`(`f.a.a.b.e` v1 @kind object) @signature `Lf/a/a/g/a;.onComputationScheduler:(Lf/a/a/b/e;)Lf/a/a/b/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d295c.  v0:= `@@f.a.a.g.a.g` @type ^`f.a.a.d.e` @kind object;
  #L1d2960.  if v0 != 0 then goto L1d2966;
  #L1d2964.  return v1 @kind object;
  #L1d2966.  call temp:= `a`(v0, v1) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/e;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1d296c.  v1:= temp @kind object;
  #L1d296e.  v1:= (`f.a.a.b.e`) v1 @kind object;
  #L1d2972.  return v1 @kind object;
}
procedure `void` `onError`(`java.lang.Throwable` v2 @kind object) @signature `Lf/a/a/g/a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1d2a48.  v0:= `@@f.a.a.g.a.a` @type ^`f.a.a.d.d` @kind object;
  #L1d2a4c.  if v2 != 0 then goto L1d2a5e;
  #L1d2a50.  v2:= "onError called with a null Throwable." @kind object;
  #L1d2a54.  call temp:= `createNullPointerException`(v2) @signature `Lf/a/a/e/h/a;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L1d2a5a.  v2:= temp @kind object;
  #L1d2a5c.  goto L1d2a76;
  #L1d2a5e.  call temp:= `a`(v2) @signature `Lf/a/a/g/a;.a:(Ljava/lang/Throwable;)Z` @kind static;
  #L1d2a64.  v1:= temp;
  #L1d2a66.  if v1 != 0 then goto L1d2a76;
  #L1d2a6a.  v1:= new `io.reactivex.rxjava3.exceptions.UndeliverableException`;
  #L1d2a6e.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/UndeliverableException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1d2a74.  v2:= v1 @kind object;
  #L1d2a76.  if v0 == 0 then goto L1d2a90;
  #L1d2a7a.  call `accept`(v0, v2) @signature `Lf/a/a/d/d;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L1d2a80.  return @kind void;
  #L1d2a82.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d2a84.  call `printStackTrace`(v0) @signature `Ljava/lang/Throwable;.printStackTrace:()V` @kind virtual;
  #L1d2a8a.  call `b`(v0) @signature `Lf/a/a/g/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L1d2a90.  call `printStackTrace`(v2) @signature `Ljava/lang/Throwable;.printStackTrace:()V` @kind virtual;
  #L1d2a96.  call `b`(v2) @signature `Lf/a/a/g/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L1d2a9c.  return @kind void;
  catch `java.lang.Throwable` @[L1d2a7a..L1d2a80] goto L1d2a82;
}
procedure `f.a.a.b.e` `onIoScheduler`(`f.a.a.b.e` v1 @kind object) @signature `Lf/a/a/g/a;.onIoScheduler:(Lf/a/a/b/e;)Lf/a/a/b/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d2984.  v0:= `@@f.a.a.g.a.h` @type ^`f.a.a.d.e` @kind object;
  #L1d2988.  if v0 != 0 then goto L1d298e;
  #L1d298c.  return v1 @kind object;
  #L1d298e.  call temp:= `a`(v0, v1) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/e;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1d2994.  v1:= temp @kind object;
  #L1d2996.  v1:= (`f.a.a.b.e`) v1 @kind object;
  #L1d299a.  return v1 @kind object;
}
procedure `java.lang.Runnable` `onSchedule`(`java.lang.Runnable` v1 @kind object) @signature `Lf/a/a/g/a;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d2a14.  v0:= "run is null" @kind object;
  #L1d2a18.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1d2a1e.  v0:= `@@f.a.a.g.a.b` @type ^`f.a.a.d.e` @kind object;
  #L1d2a22.  if v0 != 0 then goto L1d2a28;
  #L1d2a26.  return v1 @kind object;
  #L1d2a28.  call temp:= `a`(v0, v1) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/e;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1d2a2e.  v1:= temp @kind object;
  #L1d2a30.  v1:= (`java.lang.Runnable`) v1 @kind object;
  #L1d2a34.  return v1 @kind object;
}
procedure `f.a.a.b.d` `onSubscribe`(`f.a.a.b.b` v1 @kind object, `f.a.a.b.d` v2 @kind object) @signature `Lf/a/a/g/a;.onSubscribe:(Lf/a/a/b/b;Lf/a/a/b/d;)Lf/a/a/b/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d27e4.  v0:= `@@f.a.a.g.a.j` @type ^`f.a.a.d.b` @kind object;
  #L1d27e8.  if v0 == 0 then goto L1d27fa;
  #L1d27ec.  call temp:= `a`(v0, v1, v2) @signature `Lf/a/a/g/a;.a:(Lf/a/a/d/b;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1d27f2.  v1:= temp @kind object;
  #L1d27f4.  v1:= (`f.a.a.b.d`) v1 @kind object;
  #L1d27f8.  return v1 @kind object;
  #L1d27fa.  return v2 @kind object;
}
