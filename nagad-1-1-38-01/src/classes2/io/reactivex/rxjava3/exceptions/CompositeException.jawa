record `io.reactivex.rxjava3.exceptions.CompositeException` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.RuntimeException` @kind class {
  `java.util.List` `io.reactivex.rxjava3.exceptions.CompositeException.f` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `io.reactivex.rxjava3.exceptions.CompositeException.g` @AccessFlag PRIVATE_FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.exceptions.CompositeException.h` @AccessFlag PRIVATE;
}
global `long` `@@io.reactivex.rxjava3.exceptions.CompositeException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.exceptions.CompositeException` v3 @kind this, `java.lang.Iterable` v4 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1cee70.  call `<init>`(v3) @signature `Ljava/lang/RuntimeException;.<init>:()V` @kind direct;
  #L1cee76.  v0:= new `java.util.LinkedHashSet`;
  #L1cee7a.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L1cee80.  if v4 == 0 then goto L1ceee2;
  #L1cee84.  call temp:= `iterator`(v4) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1cee8a.  v4:= temp @kind object;
  #L1cee8c.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1cee92.  v1:= temp;
  #L1cee94.  if v1 == 0 then goto L1ceef6;
  #L1cee98.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1cee9e.  v1:= temp @kind object;
  #L1ceea0.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L1ceea4.  v2:= instanceof @variable v1 @type ^`io.reactivex.rxjava3.exceptions.CompositeException` @kind boolean;
  #L1ceea8.  if v2 == 0 then goto L1ceec0;
  #L1ceeac.  v1:= (`io.reactivex.rxjava3.exceptions.CompositeException`) v1 @kind object;
  #L1ceeb0.  call temp:= `getExceptions`(v1) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L1ceeb6.  v1:= temp @kind object;
  #L1ceeb8.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/Set;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1ceebe.  goto L1cee8c;
  #L1ceec0.  if v1 == 0 then goto L1ceecc;
  #L1ceec4.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1ceeca.  goto L1cee8c;
  #L1ceecc.  v1:= new `java.lang.NullPointerException`;
  #L1ceed0.  v2:= "Throwable was null!" @kind object;
  #L1ceed4.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ceeda.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1ceee0.  goto L1cee8c;
  #L1ceee2.  v4:= new `java.lang.NullPointerException`;
  #L1ceee6.  v1:= "errors was null" @kind object;
  #L1ceeea.  call `<init>`(v4, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ceef0.  call temp:= `add`(v0, v4) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1ceef6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L1ceefc.  v4:= temp;
  #L1ceefe.  if v4 != 0 then goto L1cef4c;
  #L1cef02.  v4:= new `java.util.ArrayList`;
  #L1cef06.  call `<init>`(v4, v0) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L1cef0c.  call temp:= `unmodifiableList`(v4) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1cef12.  v4:= temp @kind object;
  #L1cef14.  v3.`io.reactivex.rxjava3.exceptions.CompositeException.f` @type ^`java.util.List` := v4 @kind object;
  #L1cef18.  v4:= new `java.lang.StringBuilder`;
  #L1cef1c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cef22.  v0:= v3.`io.reactivex.rxjava3.exceptions.CompositeException.f` @type ^`java.util.List` @kind object;
  #L1cef26.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1cef2c.  v0:= temp;
  #L1cef2e.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cef34.  v0:= " exceptions occurred. " @kind object;
  #L1cef38.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cef3e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cef44.  v4:= temp @kind object;
  #L1cef46.  v3.`io.reactivex.rxjava3.exceptions.CompositeException.g` @type ^`java.lang.String` := v4 @kind object;
  #L1cef4a.  return @kind void;
  #L1cef4c.  v4:= new `java.lang.IllegalArgumentException`;
  #L1cef50.  v0:= "errors is empty" @kind object;
  #L1cef54.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cef5a.  throw v4;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this, `java.lang.Throwable`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1cef6c.  if v2 != 0 then goto L1cef88;
  #L1cef70.  v2:= new `java.lang.NullPointerException`;
  #L1cef74.  v0:= "exceptions was null" @kind object;
  #L1cef78.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cef7e.  call temp:= `singletonList`(v2) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L1cef84.  v2:= temp @kind object;
  #L1cef86.  goto L1cef90;
  #L1cef88.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L1cef8e.  v2:= temp @kind object;
  #L1cef90.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L1cef96.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.exceptions.CompositeException` v7 @kind this, `io.reactivex.rxjava3.exceptions.CompositeException$b` v8 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.a:(Lio/reactivex/rxjava3/exceptions/CompositeException$b;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1cf044.  v0:= new `java.lang.StringBuilder`;
  #L1cf048.  v1:= 128I;
  #L1cf04c.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1cf052.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cf058.  v1:= 10I;
  #L1cf05c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cf062.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/RuntimeException;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L1cf068.  v2:= temp @kind object;
  #L1cf06a.  v3:= length @variable v2;
  #L1cf06c.  v4:= 0I;
  #L1cf06e.  if v4 >= v3 then goto L1cf092;
  #L1cf072.  v5:= v2[v4] @kind object;
  #L1cf076.  v6:= "\tat " @kind object;
  #L1cf07a.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cf080.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cf086.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cf08c.  v4:= v4 + 1;
  #L1cf090.  goto L1cf06e;
  #L1cf092.  v1:= v7.`io.reactivex.rxjava3.exceptions.CompositeException.f` @type ^`java.util.List` @kind object;
  #L1cf096.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1cf09c.  v1:= temp @kind object;
  #L1cf09e.  v2:= 1I;
  #L1cf0a0.  v3:= 1I;
  #L1cf0a2.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1cf0a8.  v4:= temp;
  #L1cf0aa.  if v4 == 0 then goto L1cf0e2;
  #L1cf0ae.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1cf0b4.  v4:= temp @kind object;
  #L1cf0b6.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L1cf0ba.  v5:= "  ComposedException " @kind object;
  #L1cf0be.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cf0c4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cf0ca.  v5:= " :\n" @kind object;
  #L1cf0ce.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cf0d4.  v5:= "\t" @kind object;
  #L1cf0d8.  call `a`(v7, v0, v4, v5) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L1cf0de.  v3:= v3 + v2 @kind int;
  #L1cf0e0.  goto L1cf0a2;
  #L1cf0e2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cf0e8.  v0:= temp @kind object;
  #L1cf0ea.  call `a`(v8, v0) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException$b;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L1cf0f0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.exceptions.CompositeException` v5 @kind this, `java.lang.StringBuilder` v6 @kind object, `java.lang.Throwable` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1cefa8.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cefae.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cefb4.  v8:= 10I;
  #L1cefb8.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cefbe.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L1cefc4.  v0:= temp @kind object;
  #L1cefc6.  v1:= length @variable v0;
  #L1cefc8.  v2:= 0I;
  #L1cefca.  if v2 >= v1 then goto L1cefee;
  #L1cefce.  v3:= v0[v2] @kind object;
  #L1cefd2.  v4:= "\t\tat " @kind object;
  #L1cefd6.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cefdc.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cefe2.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cefe8.  v2:= v2 + 1;
  #L1cefec.  goto L1cefca;
  #L1cefee.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L1ceff4.  v8:= temp @kind object;
  #L1ceff6.  if v8 == 0 then goto L1cf016;
  #L1ceffa.  v8:= "\tCaused by: " @kind object;
  #L1ceffe.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cf004.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L1cf00a.  v7:= temp @kind object;
  #L1cf00c.  v8:= "" @kind object;
  #L1cf010.  call `a`(v5, v6, v7, v8) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L1cf016.  return @kind void;
}
procedure `java.lang.Throwable` `getCause`(`io.reactivex.rxjava3.exceptions.CompositeException` v14 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.getCause:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L1cebe0.  @monitorenter v14
  #L1cebe2.  v0:= v14.`io.reactivex.rxjava3.exceptions.CompositeException.h` @type ^`java.lang.Throwable` @kind object;
  #L1cebe6.  if v0 != 0 then goto L1cee2c;
  #L1cebea.  v0:= "line.separator" @kind object;
  #L1cebee.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L1cebf4.  v0:= temp @kind object;
  #L1cebf6.  v1:= v14.`io.reactivex.rxjava3.exceptions.CompositeException.f` @type ^`java.util.List` @kind object;
  #L1cebfa.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1cec00.  v1:= temp;
  #L1cec02.  v2:= 0I;
  #L1cec04.  v3:= 1I;
  #L1cec06.  if v1 <= v3 then goto L1cee18;
  #L1cec0a.  v1:= new `java.util.IdentityHashMap`;
  #L1cec0e.  call `<init>`(v1) @signature `Ljava/util/IdentityHashMap;.<init>:()V` @kind direct;
  #L1cec14.  v4:= new `java.lang.StringBuilder`;
  #L1cec18.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cec1e.  v5:= "Multiple exceptions (" @kind object;
  #L1cec22.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cec28.  v5:= v14.`io.reactivex.rxjava3.exceptions.CompositeException.f` @type ^`java.util.List` @kind object;
  #L1cec2c.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1cec32.  v5:= temp;
  #L1cec34.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cec3a.  v5:= ")" @kind object;
  #L1cec3e.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cec44.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cec4a.  v5:= v14.`io.reactivex.rxjava3.exceptions.CompositeException.f` @type ^`java.util.List` @kind object;
  #L1cec4e.  call temp:= `iterator`(v5) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1cec54.  v5:= temp @kind object;
  #L1cec56.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1cec5c.  v6:= temp;
  #L1cec5e.  if v6 == 0 then goto L1cedf8;
  #L1cec62.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1cec68.  v6:= temp @kind object;
  #L1cec6a.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L1cec6e.  v7:= 0I;
  #L1cec70.  if v6 == 0 then goto L1cec56;
  #L1cec74.  v8:= 0I;
  #L1cec76.  if v8 >= v7 then goto L1cec8a;
  #L1cec7a.  v9:= "  " @kind object;
  #L1cec7e.  call temp:= `append`(v4, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cec84.  v8:= v8 + 1;
  #L1cec88.  goto L1cec76;
  #L1cec8a.  v8:= "|-- " @kind object;
  #L1cec8e.  call temp:= `append`(v4, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cec94.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1cec9a.  v8:= temp @kind object;
  #L1cec9c.  call temp:= `getCanonicalName`(v8) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L1ceca2.  v8:= temp @kind object;
  #L1ceca4.  call temp:= `append`(v4, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cecaa.  v8:= ": " @kind object;
  #L1cecae.  call temp:= `append`(v4, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cecb4.  call temp:= `getMessage`(v6) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1cecba.  v8:= temp @kind object;
  #L1cecbc.  if v8 == 0 then goto L1ced12;
  #L1cecc0.  call temp:= `contains`(v8, v0) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L1cecc6.  v9:= temp;
  #L1cecc8.  if v9 == 0 then goto L1ced12;
  #L1ceccc.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cecd2.  call temp:= `split`(v8, v0) @signature `Ljava/lang/String;.split:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L1cecd8.  v8:= temp @kind object;
  #L1cecda.  v9:= length @variable v8;
  #L1cecdc.  v10:= 0I;
  #L1cecde.  if v10 >= v9 then goto L1ced1e;
  #L1cece2.  v11:= v8[v10] @kind object;
  #L1cece6.  v12:= 0I;
  #L1cece8.  v13:= v7 + 2;
  #L1cecec.  if v12 >= v13 then goto L1ced00;
  #L1cecf0.  v13:= "  " @kind object;
  #L1cecf4.  call temp:= `append`(v4, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cecfa.  v12:= v12 + 1;
  #L1cecfe.  goto L1cece8;
  #L1ced00.  call temp:= `append`(v4, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ced06.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ced0c.  v10:= v10 + 1;
  #L1ced10.  goto L1cecde;
  #L1ced12.  call temp:= `append`(v4, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ced18.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ced1e.  v8:= 0I;
  #L1ced20.  v9:= v7 + 2;
  #L1ced24.  if v8 >= v9 then goto L1ced38;
  #L1ced28.  v9:= "  " @kind object;
  #L1ced2c.  call temp:= `append`(v4, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ced32.  v8:= v8 + 1;
  #L1ced36.  goto L1ced20;
  #L1ced38.  call temp:= `getStackTrace`(v6) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L1ced3e.  v8:= temp @kind object;
  #L1ced40.  v10:= length @variable v8;
  #L1ced42.  if v10 <= 0 then goto L1ced60;
  #L1ced46.  v10:= "at " @kind object;
  #L1ced4a.  call temp:= `append`(v4, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ced50.  v8:= v8[v2] @kind object;
  #L1ced54.  call temp:= `append`(v4, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ced5a.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ced60.  call temp:= `containsKey`(v1, v6) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L1ced66.  v8:= temp;
  #L1ced68.  if v8 != 0 then goto L1ced8a;
  #L1ced6c.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1ced72.  v8:= temp @kind object;
  #L1ced74.  call temp:= `put`(v1, v6, v8) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1ced7a.  call temp:= `getCause`(v6) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L1ced80.  v6:= temp @kind object;
  #L1ced82.  v7:= v7 + 1;
  #L1ced86.  goto L1cec70;
  #L1ced8a.  call temp:= `getCause`(v6) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L1ced90.  v6:= temp @kind object;
  #L1ced92.  if v6 == 0 then goto L1cec56;
  #L1ced96.  v7:= 0I;
  #L1ced98.  if v7 >= v9 then goto L1cedac;
  #L1ced9c.  v8:= "  " @kind object;
  #L1ceda0.  call temp:= `append`(v4, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ceda6.  v7:= v7 + 1;
  #L1cedaa.  goto L1ced98;
  #L1cedac.  v7:= "|-- " @kind object;
  #L1cedb0.  call temp:= `append`(v4, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cedb6.  v7:= "(cause not expanded again) " @kind object;
  #L1cedba.  call temp:= `append`(v4, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cedc0.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1cedc6.  v7:= temp @kind object;
  #L1cedc8.  call temp:= `getCanonicalName`(v7) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L1cedce.  v7:= temp @kind object;
  #L1cedd0.  call temp:= `append`(v4, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cedd6.  v7:= ": " @kind object;
  #L1cedda.  call temp:= `append`(v4, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cede0.  call temp:= `getMessage`(v6) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1cede6.  v6:= temp @kind object;
  #L1cede8.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cedee.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cedf4.  goto L1cec56;
  #L1cedf8.  v0:= new `io.reactivex.rxjava3.exceptions.CompositeException$a`;
  #L1cedfc.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cee02.  v1:= temp @kind object;
  #L1cee04.  call temp:= `trim`(v1) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L1cee0a.  v1:= temp @kind object;
  #L1cee0c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException$a;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cee12.  v14.`io.reactivex.rxjava3.exceptions.CompositeException.h` @type ^`java.lang.Throwable` := v0 @kind object;
  #L1cee16.  goto L1cee2c;
  #L1cee18.  v0:= v14.`io.reactivex.rxjava3.exceptions.CompositeException.f` @type ^`java.util.List` @kind object;
  #L1cee1c.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1cee22.  v0:= temp @kind object;
  #L1cee24.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L1cee28.  v14.`io.reactivex.rxjava3.exceptions.CompositeException.h` @type ^`java.lang.Throwable` := v0 @kind object;
  #L1cee2c.  v0:= v14.`io.reactivex.rxjava3.exceptions.CompositeException.h` @type ^`java.lang.Throwable` @kind object;
  #L1cee30.  @monitorexit v14
  #L1cee32.  return v0 @kind object;
  #L1cee34.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1cee36.  @monitorexit v14
  #L1cee38.  throw v0;
  catch `java.lang.Throwable` @[L1cebe2..L1cee30] goto L1cee34;
}
procedure `java.util.List` `getExceptions`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cee58.  v0:= v1.`io.reactivex.rxjava3.exceptions.CompositeException.f` @type ^`java.util.List` @kind object;
  #L1cee5c.  return v0 @kind object;
}
procedure `java.lang.String` `getMessage`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cebc8.  v0:= v1.`io.reactivex.rxjava3.exceptions.CompositeException.g` @type ^`java.lang.String` @kind object;
  #L1cebcc.  return v0 @kind object;
}
procedure `void` `printStackTrace`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.printStackTrace:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cf028.  v0:= `@@java.lang.System.err` @type ^`java.io.PrintStream` @kind object;
  #L1cf02c.  call `printStackTrace`(v1, v0) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @kind virtual;
  #L1cf032.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this, `java.io.PrintStream` v2 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cf104.  v0:= new `io.reactivex.rxjava3.exceptions.CompositeException$c`;
  #L1cf108.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException$c;.<init>:(Ljava/io/PrintStream;)V` @kind direct;
  #L1cf10e.  call `a`(v1, v0) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.a:(Lio/reactivex/rxjava3/exceptions/CompositeException$b;)V` @kind direct;
  #L1cf114.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this, `java.io.PrintWriter` v2 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintWriter;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cf128.  v0:= new `io.reactivex.rxjava3.exceptions.CompositeException$d`;
  #L1cf12c.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException$d;.<init>:(Ljava/io/PrintWriter;)V` @kind direct;
  #L1cf132.  call `a`(v1, v0) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.a:(Lio/reactivex/rxjava3/exceptions/CompositeException$b;)V` @kind direct;
  #L1cf138.  return @kind void;
}
