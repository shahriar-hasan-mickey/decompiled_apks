record `io.fabric.sdk.android.services.concurrency.l$a` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.ThreadFactory` @kind interface {
  `int` `io.fabric.sdk.android.services.concurrency.l$a.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.fabric.sdk.android.services.concurrency.l$a` v0 @kind this, `int` v1 ) @signature `Lio/fabric/sdk/android/services/concurrency/l$a;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1c9a14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c9a1a.  v0.`io.fabric.sdk.android.services.concurrency.l$a.f` @type ^`int` := v1;
  #L1c9a1e.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`io.fabric.sdk.android.services.concurrency.l$a` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lio/fabric/sdk/android/services/concurrency/l$a;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c99e4.  v0:= new `java.lang.Thread`;
  #L1c99e8.  call `<init>`(v0, v2) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L1c99ee.  v2:= v1.`io.fabric.sdk.android.services.concurrency.l$a.f` @type ^`int`;
  #L1c99f2.  call `setPriority`(v0, v2) @signature `Ljava/lang/Thread;.setPriority:(I)V` @kind virtual;
  #L1c99f8.  v2:= "Queue" @kind object;
  #L1c99fc.  call `setName`(v0, v2) @signature `Ljava/lang/Thread;.setName:(Ljava/lang/String;)V` @kind virtual;
  #L1c9a02.  return v0 @kind object;
}
