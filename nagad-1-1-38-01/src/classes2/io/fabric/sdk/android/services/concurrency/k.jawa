record `io.fabric.sdk.android.services.concurrency.k` @kind class @AccessFlag PUBLIC extends `io.fabric.sdk.android.services.concurrency.c` @kind interface, `io.fabric.sdk.android.services.concurrency.j` @kind interface, `io.fabric.sdk.android.services.concurrency.m` @kind interface {
  `java.util.List` `io.fabric.sdk.android.services.concurrency.k.dependencies` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.fabric.sdk.android.services.concurrency.k.hasRun` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.fabric.sdk.android.services.concurrency.k.throwable` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.fabric.sdk.android.services.concurrency.k` v2 @kind this) @signature `Lio/fabric/sdk/android/services/concurrency/k;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1c98fc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c9902.  v0:= new `java.util.ArrayList`;
  #L1c9906.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1c990c.  v2.`io.fabric.sdk.android.services.concurrency.k.dependencies` @type ^`java.util.List` := v0 @kind object;
  #L1c9910.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L1c9914.  v1:= 0I;
  #L1c9916.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L1c991c.  v2.`io.fabric.sdk.android.services.concurrency.k.hasRun` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L1c9920.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L1c9924.  v1:= 0I;
  #L1c9926.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1c992c.  v2.`io.fabric.sdk.android.services.concurrency.k.throwable` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L1c9930.  return @kind void;
}
procedure `boolean` `isProperDelegate`(`java.lang.Object` v3 @kind object) @signature `Lio/fabric/sdk/android/services/concurrency/k;.isProperDelegate:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1c982c.  v0:= 0I;
  #L1c982e.  v1:= v3 @kind object;
  #L1c9830.  v1:= (`io.fabric.sdk.android.services.concurrency.c`) v1 @kind object;
  #L1c9834.  v2:= v3 @kind object;
  #L1c9836.  v2:= (`io.fabric.sdk.android.services.concurrency.m`) v2 @kind object;
  #L1c983a.  v3:= (`io.fabric.sdk.android.services.concurrency.j`) v3 @kind object;
  #L1c983e.  if v1 == 0 then goto L1c984c;
  #L1c9842.  if v2 == 0 then goto L1c984c;
  #L1c9846.  if v3 == 0 then goto L1c984c;
  #L1c984a.  v0:= 1I;
  #L1c984c.  return v0;
  catch `java.lang.ClassCastException` @[L1c982e..L1c983e] goto L1c984c;
}
procedure `void` `addDependency`(`io.fabric.sdk.android.services.concurrency.k` v1 @kind this, `io.fabric.sdk.android.services.concurrency.m` v2 @kind object) @signature `Lio/fabric/sdk/android/services/concurrency/k;.addDependency:(Lio/fabric/sdk/android/services/concurrency/m;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c9944.  @monitorenter v1
  #L1c9946.  v0:= v1.`io.fabric.sdk.android.services.concurrency.k.dependencies` @type ^`java.util.List` @kind object;
  #L1c994a.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1c9950.  @monitorexit v1
  #L1c9952.  return @kind void;
  #L1c9954.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c9956.  @monitorexit v1
  #L1c9958.  throw v2;
  catch `java.lang.Throwable` @[L1c9946..L1c9950] goto L1c9954;
}
procedure `void` `addDependency`(`io.fabric.sdk.android.services.concurrency.k` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/fabric/sdk/android/services/concurrency/k;.addDependency:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1c9978.  v1:= (`io.fabric.sdk.android.services.concurrency.m`) v1 @kind object;
  #L1c997c.  call `addDependency`(v0, v1) @signature `Lio/fabric/sdk/android/services/concurrency/k;.addDependency:(Lio/fabric/sdk/android/services/concurrency/m;)V` @kind virtual;
  #L1c9982.  return @kind void;
}
procedure `boolean` `areDependenciesMet`(`io.fabric.sdk.android.services.concurrency.k` v2 @kind this) @signature `Lio/fabric/sdk/android/services/concurrency/k;.areDependenciesMet:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c97c0.  call temp:= `getDependencies`(v2) @signature `Lio/fabric/sdk/android/services/concurrency/k;.getDependencies:()Ljava/util/Collection;` @kind virtual;
  #L1c97c6.  v0:= temp @kind object;
  #L1c97c8.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c97ce.  v0:= temp @kind object;
  #L1c97d0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c97d6.  v1:= temp;
  #L1c97d8.  if v1 == 0 then goto L1c97f8;
  #L1c97dc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c97e2.  v1:= temp @kind object;
  #L1c97e4.  v1:= (`io.fabric.sdk.android.services.concurrency.m`) v1 @kind object;
  #L1c97e8.  call temp:= `isFinished`(v1) @signature `Lio/fabric/sdk/android/services/concurrency/m;.isFinished:()Z` @kind interface;
  #L1c97ee.  v1:= temp;
  #L1c97f0.  if v1 != 0 then goto L1c97d0;
  #L1c97f4.  v0:= 0I;
  #L1c97f6.  return v0;
  #L1c97f8.  v0:= 1I;
  #L1c97fa.  return v0;
}
procedure `int` `compareTo`(`io.fabric.sdk.android.services.concurrency.k` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/fabric/sdk/android/services/concurrency/k;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;

  #L1c9870.  call temp:= `a`(v0, v1) @signature `Lio/fabric/sdk/android/services/concurrency/f;.a:(Lio/fabric/sdk/android/services/concurrency/j;Ljava/lang/Object;)I` @kind static;
  #L1c9876.  v1:= temp;
  #L1c9878.  return v1;
}
procedure `java.util.Collection` `getDependencies`(`io.fabric.sdk.android.services.concurrency.k` v1 @kind this) @signature `Lio/fabric/sdk/android/services/concurrency/k;.getDependencies:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c98c8.  @monitorenter v1
  #L1c98ca.  v0:= v1.`io.fabric.sdk.android.services.concurrency.k.dependencies` @type ^`java.util.List` @kind object;
  #L1c98ce.  call temp:= `unmodifiableCollection`(v0) @signature `Ljava/util/Collections;.unmodifiableCollection:(Ljava/util/Collection;)Ljava/util/Collection;` @kind static;
  #L1c98d4.  v0:= temp @kind object;
  #L1c98d6.  @monitorexit v1
  #L1c98d8.  return v0 @kind object;
  #L1c98da.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c98dc.  @monitorexit v1
  #L1c98de.  throw v0;
  catch `java.lang.Throwable` @[L1c98ca..L1c98d6] goto L1c98da;
}
procedure `java.lang.Throwable` `getError`(`io.fabric.sdk.android.services.concurrency.k` v1 @kind this) @signature `Lio/fabric/sdk/android/services/concurrency/k;.getError:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c98a4.  v0:= v1.`io.fabric.sdk.android.services.concurrency.k.throwable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L1c98a8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1c98ae.  v0:= temp @kind object;
  #L1c98b0.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L1c98b4.  return v0 @kind object;
}
procedure `io.fabric.sdk.android.services.concurrency.f` `getPriority`(`io.fabric.sdk.android.services.concurrency.k` v1 @kind this) @signature `Lio/fabric/sdk/android/services/concurrency/k;.getPriority:()Lio/fabric/sdk/android/services/concurrency/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c988c.  v0:= `@@io.fabric.sdk.android.services.concurrency.f.g` @type ^`io.fabric.sdk.android.services.concurrency.f` @kind object;
  #L1c9890.  return v0 @kind object;
}
procedure `boolean` `isFinished`(`io.fabric.sdk.android.services.concurrency.k` v1 @kind this) @signature `Lio/fabric/sdk/android/services/concurrency/k;.isFinished:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c980c.  v0:= v1.`io.fabric.sdk.android.services.concurrency.k.hasRun` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L1c9810.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L1c9816.  v0:= temp;
  #L1c9818.  return v0;
}
procedure `void` `setError`(`io.fabric.sdk.android.services.concurrency.k` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/fabric/sdk/android/services/concurrency/k;.setError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c9994.  v0:= v1.`io.fabric.sdk.android.services.concurrency.k.throwable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L1c9998.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L1c999e.  return @kind void;
}
procedure `void` `setFinished`(`io.fabric.sdk.android.services.concurrency.k` v1 @kind this, `boolean` v2 ) @signature `Lio/fabric/sdk/android/services/concurrency/k;.setFinished:(Z)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c99b0.  @monitorenter v1
  #L1c99b2.  v0:= v1.`io.fabric.sdk.android.services.concurrency.k.hasRun` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L1c99b6.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L1c99bc.  @monitorexit v1
  #L1c99be.  return @kind void;
  #L1c99c0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c99c2.  @monitorexit v1
  #L1c99c4.  throw v2;
  catch `java.lang.Throwable` @[L1c99b2..L1c99bc] goto L1c99c0;
}
