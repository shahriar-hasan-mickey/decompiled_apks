record `kotlinx.coroutines.o` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.w0` @kind class {
}
global `int` `@@kotlinx.coroutines.o.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `boolean` `@@kotlinx.coroutines.o.h` @AccessFlag PRIVATE_STATIC;
global `kotlinx.coroutines.o` `@@kotlinx.coroutines.o.i` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.Executor` `@@kotlinx.coroutines.o.pool` @AccessFlag PRIVATE_STATIC_VOLATILE;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/o;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e05a8.  v0:= new `kotlinx.coroutines.o`;
  #L1e05ac.  call `<init>`(v0) @signature `Lkotlinx/coroutines/o;.<init>:()V` @kind direct;
  #L1e05b2.  `@@kotlinx.coroutines.o.i` @type ^`kotlinx.coroutines.o` := v0 @kind object;
  #L1e05b6.  v0:= "kotlinx.coroutines.default.parallelism" @kind object;
  #L1e05ba.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L1e05c0.  v0:= temp @kind object;
  #L1e05c2.  goto L1e05c6;
  #L1e05c4.  v0:= 0I;
  #L1e05c6.  if v0 == 0 then goto L1e0624;
  #L1e05ca.  call temp:= `toIntOrNull`(v0) @signature `Lkotlin/a0/h;.toIntOrNull:(Ljava/lang/String;)Ljava/lang/Integer;` @kind static;
  #L1e05d0.  v1:= temp @kind object;
  #L1e05d2.  if v1 == 0 then goto L1e05ee;
  #L1e05d6.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1e05dc.  v2:= temp;
  #L1e05de.  v3:= 1I;
  #L1e05e0.  if v2 < v3 then goto L1e05ee;
  #L1e05e4.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1e05ea.  v0:= temp;
  #L1e05ec.  goto L1e0626;
  #L1e05ee.  v1:= new `java.lang.StringBuilder`;
  #L1e05f2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e05f8.  v2:= "Expected positive number in kotlinx.coroutines.default.parallelism, but has " @kind object;
  #L1e05fc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e0602.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e0608.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e060e.  v0:= temp @kind object;
  #L1e0610.  v1:= new `java.lang.IllegalStateException`;
  #L1e0614.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e061a.  v0:= temp @kind object;
  #L1e061c.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e0622.  throw v1;
  #L1e0624.  v0:= -1I;
  #L1e0626.  `@@kotlinx.coroutines.o.g` @type ^`int` := v0;
  #L1e062a.  return @kind void;
  catch `java.lang.Throwable` @[L1e05b6..L1e05c2] goto L1e05c4;
}
procedure `void` `<init>`(`kotlinx.coroutines.o` v0 @kind this) @signature `Lkotlinx/coroutines/o;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1e0648.  call `<init>`(v0) @signature `Lkotlinx/coroutines/w0;.<init>:()V` @kind direct;
  #L1e064e.  return @kind void;
}
procedure `java.util.concurrent.ExecutorService` `a`(`kotlinx.coroutines.o` v3 @kind this) @signature `Lkotlinx/coroutines/o;.a:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1e0448.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L1e044c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L1e0452.  call temp:= `d`(v3) @signature `Lkotlinx/coroutines/o;.d:()I` @kind direct;
  #L1e0458.  v1:= temp;
  #L1e045a.  v2:= new `kotlinx.coroutines.o$a`;
  #L1e045e.  call `<init>`(v2, v0) @signature `Lkotlinx/coroutines/o$a;.<init>:(Ljava/util/concurrent/atomic/AtomicInteger;)V` @kind direct;
  #L1e0464.  call temp:= `newFixedThreadPool`(v1, v2) @signature `Ljava/util/concurrent/Executors;.newFixedThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;` @kind static;
  #L1e046a.  v0:= temp @kind object;
  #L1e046c.  return v0 @kind object;
}
procedure `java.util.concurrent.ExecutorService` `b`(`kotlinx.coroutines.o` v6 @kind this) @signature `Lkotlinx/coroutines/o;.b:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1e0480.  call temp:= `getSecurityManager`() @signature `Ljava/lang/System;.getSecurityManager:()Ljava/lang/SecurityManager;` @kind static;
  #L1e0486.  v0:= temp @kind object;
  #L1e0488.  if v0 == 0 then goto L1e0496;
  #L1e048c.  call temp:= `a`(v6) @signature `Lkotlinx/coroutines/o;.a:()Ljava/util/concurrent/ExecutorService;` @kind direct;
  #L1e0492.  v0:= temp @kind object;
  #L1e0494.  return v0 @kind object;
  #L1e0496.  v0:= "java.util.concurrent.ForkJoinPool" @kind object;
  #L1e049a.  v1:= 0I;
  #L1e049c.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L1e04a2.  v0:= temp @kind object;
  #L1e04a4.  goto L1e04a8;
  #L1e04a6.  v0:= v1 @kind object;
  #L1e04a8.  if v0 == 0 then goto L1e056e;
  #L1e04ac.  v2:= `@@kotlinx.coroutines.o.h` @type ^`boolean` @kind boolean;
  #L1e04b0.  v3:= 0I;
  #L1e04b2.  if v2 != 0 then goto L1e0512;
  #L1e04b6.  v2:= `@@kotlinx.coroutines.o.g` @type ^`int`;
  #L1e04ba.  if v2 >= 0 then goto L1e0512;
  #L1e04be.  v2:= "commonPool" @kind object;
  #L1e04c2.  v4:= new `java.lang.Class`[v3];
  #L1e04c6.  call temp:= `getMethod`(v0, v2, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L1e04cc.  v2:= temp @kind object;
  #L1e04ce.  if v2 == 0 then goto L1e04e0;
  #L1e04d2.  v4:= new `java.lang.Object`[v3];
  #L1e04d6.  call temp:= `invoke`(v2, v1, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1e04dc.  v2:= temp @kind object;
  #L1e04de.  goto L1e04e2;
  #L1e04e0.  v2:= v1 @kind object;
  #L1e04e2.  v4:= instanceof @variable v2 @type ^`java.util.concurrent.ExecutorService` @kind boolean;
  #L1e04e6.  if v4 != 0 then goto L1e04ec;
  #L1e04ea.  v2:= v1 @kind object;
  #L1e04ec.  v2:= (`java.util.concurrent.ExecutorService`) v2 @kind object;
  #L1e04f0.  goto L1e04f4;
  #L1e04f2.  v2:= v1 @kind object;
  #L1e04f4.  if v2 == 0 then goto L1e0512;
  #L1e04f8.  v4:= `@@kotlinx.coroutines.o.i` @type ^`kotlinx.coroutines.o` @kind object;
  #L1e04fc.  call temp:= `isGoodCommonPool$kotlinx_coroutines_core`(v4, v0, v2) @signature `Lkotlinx/coroutines/o;.isGoodCommonPool$kotlinx_coroutines_core:(Ljava/lang/Class;Ljava/util/concurrent/ExecutorService;)Z` @kind virtual;
  #L1e0502.  v4:= temp;
  #L1e0504.  if v4 == 0 then goto L1e050a;
  #L1e0508.  goto L1e050c;
  #L1e050a.  v2:= v1 @kind object;
  #L1e050c.  if v2 == 0 then goto L1e0512;
  #L1e0510.  return v2 @kind object;
  #L1e0512.  v2:= 1I;
  #L1e0514.  v4:= new `java.lang.Class`[v2];
  #L1e0518.  v5:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L1e051c.  v4[v3]:= v5 @kind object;
  #L1e0520.  call temp:= `getConstructor`(v0, v4) @signature `Ljava/lang/Class;.getConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L1e0526.  v0:= temp @kind object;
  #L1e0528.  v2:= new `java.lang.Object`[v2];
  #L1e052c.  v4:= `@@kotlinx.coroutines.o.i` @type ^`kotlinx.coroutines.o` @kind object;
  #L1e0530.  call temp:= `d`(v4) @signature `Lkotlinx/coroutines/o;.d:()I` @kind direct;
  #L1e0536.  v4:= temp;
  #L1e0538.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1e053e.  v4:= temp @kind object;
  #L1e0540.  v2[v3]:= v4 @kind object;
  #L1e0544.  call temp:= `newInstance`(v0, v2) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1e054a.  v0:= temp @kind object;
  #L1e054c.  v2:= instanceof @variable v0 @type ^`java.util.concurrent.ExecutorService` @kind boolean;
  #L1e0550.  if v2 != 0 then goto L1e0556;
  #L1e0554.  v0:= v1 @kind object;
  #L1e0556.  v0:= (`java.util.concurrent.ExecutorService`) v0 @kind object;
  #L1e055a.  goto L1e055e;
  #L1e055c.  v0:= v1 @kind object;
  #L1e055e.  if v0 == 0 then goto L1e0564;
  #L1e0562.  return v0 @kind object;
  #L1e0564.  call temp:= `a`(v6) @signature `Lkotlinx/coroutines/o;.a:()Ljava/util/concurrent/ExecutorService;` @kind direct;
  #L1e056a.  v0:= temp @kind object;
  #L1e056c.  return v0 @kind object;
  #L1e056e.  call temp:= `a`(v6) @signature `Lkotlinx/coroutines/o;.a:()Ljava/util/concurrent/ExecutorService;` @kind direct;
  #L1e0574.  v0:= temp @kind object;
  #L1e0576.  return v0 @kind object;
  catch `java.lang.Throwable` @[L1e049c..L1e04a4] goto L1e04a6;
  catch `java.lang.Throwable` @[L1e04be..L1e04f0] goto L1e04f2;
  catch `java.lang.Throwable` @[L1e0514..L1e055a] goto L1e055c;
}
procedure `java.util.concurrent.Executor` `c`(`kotlinx.coroutines.o` v1 @kind this) @signature `Lkotlinx/coroutines/o;.c:()Ljava/util/concurrent/Executor;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1e0408.  @monitorenter v1
  #L1e040a.  v0:= `@@kotlinx.coroutines.o.pool` @type ^`java.util.concurrent.Executor` @kind object;
  #L1e040e.  if v0 == 0 then goto L1e0414;
  #L1e0412.  goto L1e0420;
  #L1e0414.  call temp:= `b`(v1) @signature `Lkotlinx/coroutines/o;.b:()Ljava/util/concurrent/ExecutorService;` @kind direct;
  #L1e041a.  v0:= temp @kind object;
  #L1e041c.  `@@kotlinx.coroutines.o.pool` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L1e0420.  @monitorexit v1
  #L1e0422.  return v0 @kind object;
  #L1e0424.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1e0426.  @monitorexit v1
  #L1e0428.  throw v0;
  catch `java.lang.Throwable` @[L1e040a..L1e0420] goto L1e0424;
}
procedure `int` `d`(`kotlinx.coroutines.o` v3 @kind this) @signature `Lkotlinx/coroutines/o;.d:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1e038c.  v0:= `@@kotlinx.coroutines.o.g` @type ^`int`;
  #L1e0390.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1e0396.  v0:= temp @kind object;
  #L1e0398.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L1e039e.  v1:= temp;
  #L1e03a0.  v2:= 1I;
  #L1e03a2.  if v1 <= 0 then goto L1e03aa;
  #L1e03a6.  v1:= 1I;
  #L1e03a8.  goto L1e03ac;
  #L1e03aa.  v1:= 0I;
  #L1e03ac.  if v1 == 0 then goto L1e03b2;
  #L1e03b0.  goto L1e03b4;
  #L1e03b2.  v0:= 0I;
  #L1e03b4.  if v0 == 0 then goto L1e03c2;
  #L1e03b8.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1e03be.  v0:= temp;
  #L1e03c0.  goto L1e03dc;
  #L1e03c2.  call temp:= `getRuntime`() @signature `Ljava/lang/Runtime;.getRuntime:()Ljava/lang/Runtime;` @kind static;
  #L1e03c8.  v0:= temp @kind object;
  #L1e03ca.  call temp:= `availableProcessors`(v0) @signature `Ljava/lang/Runtime;.availableProcessors:()I` @kind virtual;
  #L1e03d0.  v0:= temp;
  #L1e03d2.  v0:= v0 - v2 @kind int;
  #L1e03d4.  call temp:= `coerceAtLeast`(v0, v2) @signature `Lkotlin/x/e;.coerceAtLeast:(II)I` @kind static;
  #L1e03da.  v0:= temp;
  #L1e03dc.  return v0;
}
procedure `void` `close`(`kotlinx.coroutines.o` v2 @kind this) @signature `Lkotlinx/coroutines/o;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1e0660.  v0:= new `java.lang.IllegalStateException`;
  #L1e0664.  v1:= "Close cannot be invoked on CommonPool" @kind object;
  #L1e0668.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e066e.  v1:= temp @kind object;
  #L1e0670.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e0676.  throw v0;
}
procedure `void` `dispatch`(`kotlinx.coroutines.o` v1 @kind this, `kotlin.t.g` v2 @kind object, `java.lang.Runnable` v3 @kind object) @signature `Lkotlinx/coroutines/o;.dispatch:(Lkotlin/t/g;Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e0688.  v2:= `@@kotlinx.coroutines.o.pool` @type ^`java.util.concurrent.Executor` @kind object;
  #L1e068c.  if v2 == 0 then goto L1e0692;
  #L1e0690.  goto L1e069a;
  #L1e0692.  call temp:= `c`(v1) @signature `Lkotlinx/coroutines/o;.c:()Ljava/util/concurrent/Executor;` @kind direct;
  #L1e0698.  v2:= temp @kind object;
  #L1e069a.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/x1;.getTimeSource:()Lkotlinx/coroutines/w1;` @kind static;
  #L1e06a0.  v0:= temp @kind object;
  #L1e06a2.  if v0 == 0 then goto L1e06b4;
  #L1e06a6.  call temp:= `wrapTask`(v0, v3) @signature `Lkotlinx/coroutines/w1;.wrapTask:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @kind interface;
  #L1e06ac.  v0:= temp @kind object;
  #L1e06ae.  if v0 == 0 then goto L1e06b4;
  #L1e06b2.  goto L1e06b6;
  #L1e06b4.  v0:= v3 @kind object;
  #L1e06b6.  call `execute`(v2, v0) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L1e06bc.  goto L1e06dc;
  #L1e06be.  
  #L1e06c0.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/x1;.getTimeSource:()Lkotlinx/coroutines/w1;` @kind static;
  #L1e06c6.  v2:= temp @kind object;
  #L1e06c8.  if v2 == 0 then goto L1e06d2;
  #L1e06cc.  call `unTrackTask`(v2) @signature `Lkotlinx/coroutines/w1;.unTrackTask:()V` @kind interface;
  #L1e06d2.  v2:= `@@kotlinx.coroutines.j0.m` @type ^`kotlinx.coroutines.j0` @kind object;
  #L1e06d6.  call `enqueue`(v2, v3) @signature `Lkotlinx/coroutines/s0;.enqueue:(Ljava/lang/Runnable;)V` @kind virtual;
  #L1e06dc.  return @kind void;
  catch `java.util.concurrent.RejectedExecutionException` @[L1e0688..L1e06bc] goto L1e06be;
}
procedure `boolean` `isGoodCommonPool$kotlinx_coroutines_core`(`kotlinx.coroutines.o` v4 @kind this, `java.lang.Class` v5 @kind object, `java.util.concurrent.ExecutorService` v6 @kind object) @signature `Lkotlinx/coroutines/o;.isGoodCommonPool$kotlinx_coroutines_core:(Ljava/lang/Class;Ljava/util/concurrent/ExecutorService;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e0318.  v0:= `@@kotlinx.coroutines.o$b.f` @type ^`kotlinx.coroutines.o$b` @kind object;
  #L1e031c.  call temp:= `submit`(v6, v0) @signature `Ljava/util/concurrent/ExecutorService;.submit:(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;` @kind interface;
  #L1e0322.  v0:= 0I;
  #L1e0324.  v1:= 0I;
  #L1e0326.  v2:= "getPoolSize" @kind object;
  #L1e032a.  v3:= new `java.lang.Class`[v1];
  #L1e032e.  call temp:= `getMethod`(v5, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L1e0334.  v5:= temp @kind object;
  #L1e0336.  v2:= new `java.lang.Object`[v1];
  #L1e033a.  call temp:= `invoke`(v5, v6, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1e0340.  v5:= temp @kind object;
  #L1e0342.  v6:= instanceof @variable v5 @type ^`java.lang.Integer` @kind boolean;
  #L1e0346.  if v6 != 0 then goto L1e034c;
  #L1e034a.  v5:= v0 @kind object;
  #L1e034c.  v5:= (`java.lang.Integer`) v5 @kind object;
  #L1e0350.  goto L1e0354;
  #L1e0352.  v5:= v0 @kind object;
  #L1e0354.  if v5 == 0 then goto L1e036c;
  #L1e0358.  call temp:= `intValue`(v5) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1e035e.  v5:= temp;
  #L1e0360.  v6:= 1I;
  #L1e0362.  if v5 < v6 then goto L1e0368;
  #L1e0366.  goto L1e036a;
  #L1e0368.  v6:= 0I;
  #L1e036a.  return v6;
  #L1e036c.  return v1;
  catch `java.lang.Throwable` @[L1e0326..L1e0350] goto L1e0352;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.o` v1 @kind this) @signature `Lkotlinx/coroutines/o;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e03f0.  v0:= "CommonPool" @kind object;
  #L1e03f4.  return v0 @kind object;
}
