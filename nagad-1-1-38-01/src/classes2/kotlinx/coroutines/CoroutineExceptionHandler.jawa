record `kotlinx.coroutines.CoroutineExceptionHandler` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE extends `kotlin.t.g$b` @kind interface {
}
global `kotlinx.coroutines.CoroutineExceptionHandler$a` `@@kotlinx.coroutines.CoroutineExceptionHandler.d` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/CoroutineExceptionHandler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e12c8.  v0:= `@@kotlinx.coroutines.CoroutineExceptionHandler$a.a` @type ^`kotlinx.coroutines.CoroutineExceptionHandler$a` @kind object;
  #L1e12cc.  `@@kotlinx.coroutines.CoroutineExceptionHandler.d` @type ^`kotlinx.coroutines.CoroutineExceptionHandler$a` := v0 @kind object;
  #L1e12d0.  return @kind void;
}
procedure `void` `handleException`(`kotlin.t.g` v0 @kind object, `java.lang.Throwable` v1 @kind object) @signature `Lkotlinx/coroutines/CoroutineExceptionHandler;.handleException:(Lkotlin/t/g;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
