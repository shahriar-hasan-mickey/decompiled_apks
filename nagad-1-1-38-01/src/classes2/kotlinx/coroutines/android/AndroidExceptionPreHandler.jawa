record `kotlinx.coroutines.android.AndroidExceptionPreHandler` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.t.a` @kind class, `kotlinx.coroutines.CoroutineExceptionHandler` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`kotlinx.coroutines.android.AndroidExceptionPreHandler` v1 @kind this) @signature `Lkotlinx/coroutines/android/AndroidExceptionPreHandler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e66b0.  v0:= `@@kotlinx.coroutines.CoroutineExceptionHandler.d` @type ^`kotlinx.coroutines.CoroutineExceptionHandler$a` @kind object;
  #L1e66b4.  call `<init>`(v1, v0) @signature `Lkotlin/t/a;.<init>:(Lkotlin/t/g$c;)V` @kind direct;
  #L1e66ba.  v1.`kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler` @type ^`java.lang.Object` := v1 @kind object;
  #L1e66be.  return @kind void;
}
procedure `java.lang.reflect.Method` `preHandler`(`kotlinx.coroutines.android.AndroidExceptionPreHandler` v5 @kind this) @signature `Lkotlinx/coroutines/android/AndroidExceptionPreHandler;.preHandler:()Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e6638.  v0:= v5.`kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler` @type ^`java.lang.Object` @kind object;
  #L1e663c.  if v0 == v5 then goto L1e6646;
  #L1e6640.  v0:= (`java.lang.reflect.Method`) v0 @kind object;
  #L1e6644.  return v0 @kind object;
  #L1e6646.  v0:= 0I;
  #L1e6648.  v1:= constclass @type ^`java.lang.Thread` @kind object;
  #L1e664c.  v2:= "getUncaughtExceptionPreHandler" @kind object;
  #L1e6650.  v3:= 0I;
  #L1e6652.  v4:= new `java.lang.Class`[v3];
  #L1e6656.  call temp:= `getDeclaredMethod`(v1, v2, v4) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L1e665c.  v1:= temp @kind object;
  #L1e665e.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L1e6664.  v2:= temp;
  #L1e6666.  call temp:= `isPublic`(v2) @signature `Ljava/lang/reflect/Modifier;.isPublic:(I)Z` @kind static;
  #L1e666c.  v2:= temp;
  #L1e666e.  if v2 == 0 then goto L1e6688;
  #L1e6672.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L1e6678.  v2:= temp;
  #L1e667a.  call temp:= `isStatic`(v2) @signature `Ljava/lang/reflect/Modifier;.isStatic:(I)Z` @kind static;
  #L1e6680.  v2:= temp;
  #L1e6682.  if v2 == 0 then goto L1e6688;
  #L1e6686.  v3:= 1I;
  #L1e6688.  if v3 == 0 then goto L1e668e;
  #L1e668c.  v0:= v1 @kind object;
  #L1e668e.  v5.`kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler` @type ^`java.lang.Object` := v0 @kind object;
  #L1e6692.  return v0 @kind object;
  catch `java.lang.Throwable` @[L1e6648..L1e6682] goto L1e668e;
}
procedure `void` `handleException`(`kotlinx.coroutines.android.AndroidExceptionPreHandler` v3 @kind this, `kotlin.t.g` v4 @kind object, `java.lang.Throwable` v5 @kind object) @signature `Lkotlinx/coroutines/android/AndroidExceptionPreHandler;.handleException:(Lkotlin/t/g;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1e66d0.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1e66d6.  v4:= temp @kind object;
  #L1e66d8.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L1e66dc.  v1:= 28I;
  #L1e66e0.  if v0 < v1 then goto L1e66f4;
  #L1e66e4.  call temp:= `getUncaughtExceptionHandler`(v4) @signature `Ljava/lang/Thread;.getUncaughtExceptionHandler:()Ljava/lang/Thread$UncaughtExceptionHandler;` @kind virtual;
  #L1e66ea.  v0:= temp @kind object;
  #L1e66ec.  call `uncaughtException`(v0, v4, v5) @signature `Ljava/lang/Thread$UncaughtExceptionHandler;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @kind interface;
  #L1e66f2.  goto L1e672c;
  #L1e66f4.  call temp:= `preHandler`(v3) @signature `Lkotlinx/coroutines/android/AndroidExceptionPreHandler;.preHandler:()Ljava/lang/reflect/Method;` @kind direct;
  #L1e66fa.  v0:= temp @kind object;
  #L1e66fc.  v1:= 0I;
  #L1e66fe.  if v0 == 0 then goto L1e6712;
  #L1e6702.  v2:= 0I;
  #L1e6704.  v2:= new `java.lang.Object`[v2];
  #L1e6708.  call temp:= `invoke`(v0, v1, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1e670e.  v0:= temp @kind object;
  #L1e6710.  goto L1e6714;
  #L1e6712.  v0:= v1 @kind object;
  #L1e6714.  v2:= instanceof @variable v0 @type ^`java.lang.Thread$UncaughtExceptionHandler` @kind boolean;
  #L1e6718.  if v2 != 0 then goto L1e671e;
  #L1e671c.  v0:= v1 @kind object;
  #L1e671e.  v0:= (`java.lang.Thread$UncaughtExceptionHandler`) v0 @kind object;
  #L1e6722.  if v0 == 0 then goto L1e672c;
  #L1e6726.  call `uncaughtException`(v0, v4, v5) @signature `Ljava/lang/Thread$UncaughtExceptionHandler;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @kind interface;
  #L1e672c.  return @kind void;
}
