record `kotlinx.coroutines.r0` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.x` @kind class {
  `long` `kotlinx.coroutines.r0.g` @AccessFlag PRIVATE;
  `boolean` `kotlinx.coroutines.r0.h` @AccessFlag PRIVATE;
  `kotlinx.coroutines.internal.a` `kotlinx.coroutines.r0.i` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.r0` v0 @kind this) @signature `Lkotlinx/coroutines/r0;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1e3408.  call `<init>`(v0) @signature `Lkotlinx/coroutines/x;.<init>:()V` @kind direct;
  #L1e340e.  return @kind void;
}
procedure `long` `a`(`kotlinx.coroutines.r0` v2 @kind this, `boolean` v3 ) @signature `Lkotlinx/coroutines/r0;.a:(Z)J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1e33a8.  if v3 == 0 then goto L1e33b8;
  #L1e33ac.  v0:= 4294967296L;
  #L1e33b6.  goto L1e33bc;
  #L1e33b8.  v0:= 1L;
  #L1e33bc.  return v0 @kind wide;
}
procedure `void` `incrementUseCount$default`(`kotlinx.coroutines.r0` v0 @kind object, `boolean` v1 , `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/r0;.incrementUseCount$default:(Lkotlinx/coroutines/r0;ZILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1e34c4.  if v3 != 0 then goto L1e34da;
  #L1e34c8.  v2:= v2 ^& 1;
  #L1e34cc.  if v2 == 0 then goto L1e34d2;
  #L1e34d0.  v1:= 0I;
  #L1e34d2.  call `incrementUseCount`(v0, v1) @signature `Lkotlinx/coroutines/r0;.incrementUseCount:(Z)V` @kind virtual;
  #L1e34d8.  return @kind void;
  #L1e34da.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1e34de.  v1:= "Super calls with default arguments not supported in this target, function: incrementUseCount" @kind object;
  #L1e34e2.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e34e8.  throw v0;
}
procedure `void` `decrementUseCount`(`kotlinx.coroutines.r0` v4 @kind this, `boolean` v5 ) @signature `Lkotlinx/coroutines/r0;.decrementUseCount:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e3420.  v0:= v4.`kotlinx.coroutines.r0.g` @type ^`long` @kind wide;
  #L1e3424.  call temp:= `a`(v4, v5) @signature `Lkotlinx/coroutines/r0;.a:(Z)J` @kind direct;
  #L1e342a.  v2:= temp @kind wide;
  #L1e342c.  v0:= v0 - v2 @kind long;
  #L1e342e.  v4.`kotlinx.coroutines.r0.g` @type ^`long` := v0 @kind wide;
  #L1e3432.  v0:= v4.`kotlinx.coroutines.r0.g` @type ^`long` @kind wide;
  #L1e3436.  v2:= 0L;
  #L1e343a.  v5:= lcmp(v0, v2);
  #L1e343e.  if v5 <= 0 then goto L1e3444;
  #L1e3442.  return @kind void;
  #L1e3444.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1e344a.  v5:= temp;
  #L1e344c.  if v5 == 0 then goto L1e3474;
  #L1e3450.  v0:= v4.`kotlinx.coroutines.r0.g` @type ^`long` @kind wide;
  #L1e3454.  v5:= lcmp(v0, v2);
  #L1e3458.  if v5 != 0 then goto L1e3460;
  #L1e345c.  v5:= 1I;
  #L1e345e.  goto L1e3462;
  #L1e3460.  v5:= 0I;
  #L1e3462.  if v5 == 0 then goto L1e3468;
  #L1e3466.  goto L1e3474;
  #L1e3468.  v5:= new `java.lang.AssertionError`;
  #L1e346c.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1e3472.  throw v5;
  #L1e3474.  v5:= v4.`kotlinx.coroutines.r0.h` @type ^`boolean` @kind boolean;
  #L1e3478.  if v5 == 0 then goto L1e3482;
  #L1e347c.  call `shutdown`(v4) @signature `Lkotlinx/coroutines/r0;.shutdown:()V` @kind virtual;
  #L1e3482.  return @kind void;
}
procedure `void` `dispatchUnconfined`(`kotlinx.coroutines.r0` v1 @kind this, `kotlinx.coroutines.m0` v2 @kind object) @signature `Lkotlinx/coroutines/r0;.dispatchUnconfined:(Lkotlinx/coroutines/m0;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1e3494.  v0:= v1.`kotlinx.coroutines.r0.i` @type ^`kotlinx.coroutines.internal.a` @kind object;
  #L1e3498.  if v0 == 0 then goto L1e349e;
  #L1e349c.  goto L1e34ac;
  #L1e349e.  v0:= new `kotlinx.coroutines.internal.a`;
  #L1e34a2.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/a;.<init>:()V` @kind direct;
  #L1e34a8.  v1.`kotlinx.coroutines.r0.i` @type ^`kotlinx.coroutines.internal.a` := v0 @kind object;
  #L1e34ac.  call `addLast`(v0, v2) @signature `Lkotlinx/coroutines/internal/a;.addLast:(Ljava/lang/Object;)V` @kind virtual;
  #L1e34b2.  return @kind void;
}
procedure `long` `getNextTime`(`kotlinx.coroutines.r0` v3 @kind this) @signature `Lkotlinx/coroutines/r0;.getNextTime:()J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L1e33d0.  v0:= v3.`kotlinx.coroutines.r0.i` @type ^`kotlinx.coroutines.internal.a` @kind object;
  #L1e33d4.  v1:= 9223372036854775807L;
  #L1e33de.  if v0 == 0 then goto L1e33f4;
  #L1e33e2.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/a;.isEmpty:()Z` @kind virtual;
  #L1e33e8.  v0:= temp;
  #L1e33ea.  if v0 == 0 then goto L1e33f0;
  #L1e33ee.  goto L1e33f4;
  #L1e33f0.  v1:= 0L;
  #L1e33f4.  return v1 @kind wide;
}
procedure `void` `incrementUseCount`(`kotlinx.coroutines.r0` v4 @kind this, `boolean` v5 ) @signature `Lkotlinx/coroutines/r0;.incrementUseCount:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e34fc.  v0:= v4.`kotlinx.coroutines.r0.g` @type ^`long` @kind wide;
  #L1e3500.  call temp:= `a`(v4, v5) @signature `Lkotlinx/coroutines/r0;.a:(Z)J` @kind direct;
  #L1e3506.  v2:= temp @kind wide;
  #L1e3508.  v0:= v0 + v2 @kind long;
  #L1e350a.  v4.`kotlinx.coroutines.r0.g` @type ^`long` := v0 @kind wide;
  #L1e350e.  if v5 != 0 then goto L1e3518;
  #L1e3512.  v5:= 1I;
  #L1e3514.  v4.`kotlinx.coroutines.r0.h` @type ^`boolean` := v5 @kind boolean;
  #L1e3518.  return @kind void;
}
procedure `boolean` `isUnconfinedLoopActive`(`kotlinx.coroutines.r0` v6 @kind this) @signature `Lkotlinx/coroutines/r0;.isUnconfinedLoopActive:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1e331c.  v0:= v6.`kotlinx.coroutines.r0.g` @type ^`long` @kind wide;
  #L1e3320.  v2:= 1I;
  #L1e3322.  call temp:= `a`(v6, v2) @signature `Lkotlinx/coroutines/r0;.a:(Z)J` @kind direct;
  #L1e3328.  v3:= temp @kind wide;
  #L1e332a.  v5:= lcmp(v0, v3);
  #L1e332e.  if v5 < 0 then goto L1e3334;
  #L1e3332.  goto L1e3336;
  #L1e3334.  v2:= 0I;
  #L1e3336.  return v2;
}
procedure `boolean` `isUnconfinedQueueEmpty`(`kotlinx.coroutines.r0` v1 @kind this) @signature `Lkotlinx/coroutines/r0;.isUnconfinedQueueEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1e3348.  v0:= v1.`kotlinx.coroutines.r0.i` @type ^`kotlinx.coroutines.internal.a` @kind object;
  #L1e334c.  if v0 == 0 then goto L1e335a;
  #L1e3350.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/a;.isEmpty:()Z` @kind virtual;
  #L1e3356.  v0:= temp;
  #L1e3358.  goto L1e335c;
  #L1e335a.  v0:= 1I;
  #L1e335c.  return v0;
}
procedure `boolean` `processUnconfinedEvent`(`kotlinx.coroutines.r0` v2 @kind this) @signature `Lkotlinx/coroutines/r0;.processUnconfinedEvent:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1e3370.  v0:= v2.`kotlinx.coroutines.r0.i` @type ^`kotlinx.coroutines.internal.a` @kind object;
  #L1e3374.  v1:= 0I;
  #L1e3376.  if v0 == 0 then goto L1e3394;
  #L1e337a.  call temp:= `removeFirstOrNull`(v0) @signature `Lkotlinx/coroutines/internal/a;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L1e3380.  v0:= temp @kind object;
  #L1e3382.  v0:= (`kotlinx.coroutines.m0`) v0 @kind object;
  #L1e3386.  if v0 == 0 then goto L1e3394;
  #L1e338a.  call `run`(v0) @signature `Lkotlinx/coroutines/m0;.run:()V` @kind virtual;
  #L1e3390.  v0:= 1I;
  #L1e3392.  return v0;
  #L1e3394.  return v1;
}
procedure `void` `shutdown`(`kotlinx.coroutines.r0` v0 @kind this) @signature `Lkotlinx/coroutines/r0;.shutdown:()V` @AccessFlag PROTECTED {
    temp;

  #L1e352c.  return @kind void;
}
