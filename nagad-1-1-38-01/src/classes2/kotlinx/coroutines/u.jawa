record `kotlinx.coroutines.u` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.Object` `recoverResult`(`java.lang.Object` v1 @kind object, `kotlin.t.d` v2 @kind object) @signature `Lkotlinx/coroutines/u;.recoverResult:(Ljava/lang/Object;Lkotlin/t/d;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1e0c4c.  v0:= instanceof @variable v1 @type ^`kotlinx.coroutines.r` @kind boolean;
  #L1e0c50.  if v0 == 0 then goto L1e0c92;
  #L1e0c54.  v0:= `@@kotlin.l.f` @type ^`kotlin.l$a` @kind object;
  #L1e0c58.  v1:= (`kotlinx.coroutines.r`) v1 @kind object;
  #L1e0c5c.  v1:= v1.`kotlinx.coroutines.r.a` @type ^`java.lang.Throwable` @kind object;
  #L1e0c60.  call temp:= `getRECOVER_STACK_TRACES`() @signature `Lkotlinx/coroutines/h0;.getRECOVER_STACK_TRACES:()Z` @kind static;
  #L1e0c66.  v0:= temp;
  #L1e0c68.  if v0 == 0 then goto L1e0c82;
  #L1e0c6c.  v0:= instanceof @variable v2 @type ^`kotlin.t.j.a.d` @kind boolean;
  #L1e0c70.  if v0 != 0 then goto L1e0c76;
  #L1e0c74.  goto L1e0c82;
  #L1e0c76.  v2:= (`kotlin.t.j.a.d`) v2 @kind object;
  #L1e0c7a.  call temp:= `access$recoverFromStackFrame`(v1, v2) @signature `Lkotlinx/coroutines/internal/u;.access$recoverFromStackFrame:(Ljava/lang/Throwable;Lkotlin/t/j/a/d;)Ljava/lang/Throwable;` @kind static;
  #L1e0c80.  v1:= temp @kind object;
  #L1e0c82.  call temp:= `createFailure`(v1) @signature `Lkotlin/m;.createFailure:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L1e0c88.  v1:= temp @kind object;
  #L1e0c8a.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/l;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1e0c90.  goto L1e0c9c;
  #L1e0c92.  v2:= `@@kotlin.l.f` @type ^`kotlin.l$a` @kind object;
  #L1e0c96.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/l;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1e0c9c.  return v1 @kind object;
}
procedure `java.lang.Object` `toState`(`java.lang.Object` v3 @kind object, `kotlin.v.b.l` v4 @kind object) @signature `Lkotlinx/coroutines/u;.toState:(Ljava/lang/Object;Lkotlin/v/b/l;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1e0cd4.  call temp:= `exceptionOrNull-impl`(v3) @signature `Lkotlin/l;.exceptionOrNull-impl:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L1e0cda.  v0:= temp @kind object;
  #L1e0cdc.  if v0 != 0 then goto L1e0cf2;
  #L1e0ce0.  if v4 == 0 then goto L1e0d02;
  #L1e0ce4.  v0:= new `kotlinx.coroutines.s`;
  #L1e0ce8.  call `<init>`(v0, v3, v4) @signature `Lkotlinx/coroutines/s;.<init>:(Ljava/lang/Object;Lkotlin/v/b/l;)V` @kind direct;
  #L1e0cee.  v3:= v0 @kind object;
  #L1e0cf0.  goto L1e0d02;
  #L1e0cf2.  v3:= new `kotlinx.coroutines.r`;
  #L1e0cf6.  v4:= 0I;
  #L1e0cf8.  v1:= 2I;
  #L1e0cfa.  v2:= 0I;
  #L1e0cfc.  call `<init>`(v3, v0, v4, v1, v2) @signature `Lkotlinx/coroutines/r;.<init>:(Ljava/lang/Throwable;ZILkotlin/v/c/f;)V` @kind direct;
  #L1e0d02.  return v3 @kind object;
}
procedure `java.lang.Object` `toState`(`java.lang.Object` v3 @kind object, `kotlinx.coroutines.h` v4 @kind object) @signature `Lkotlinx/coroutines/u;.toState:(Ljava/lang/Object;Lkotlinx/coroutines/h;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1e0d14.  call temp:= `exceptionOrNull-impl`(v3) @signature `Lkotlin/l;.exceptionOrNull-impl:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L1e0d1a.  v0:= temp @kind object;
  #L1e0d1c.  if v0 != 0 then goto L1e0d22;
  #L1e0d20.  goto L1e0d54;
  #L1e0d22.  v3:= new `kotlinx.coroutines.r`;
  #L1e0d26.  call temp:= `getRECOVER_STACK_TRACES`() @signature `Lkotlinx/coroutines/h0;.getRECOVER_STACK_TRACES:()Z` @kind static;
  #L1e0d2c.  v1:= temp;
  #L1e0d2e.  if v1 == 0 then goto L1e0d48;
  #L1e0d32.  v1:= instanceof @variable v4 @type ^`kotlin.t.j.a.d` @kind boolean;
  #L1e0d36.  if v1 != 0 then goto L1e0d3c;
  #L1e0d3a.  goto L1e0d48;
  #L1e0d3c.  v4:= (`kotlin.t.j.a.d`) v4 @kind object;
  #L1e0d40.  call temp:= `access$recoverFromStackFrame`(v0, v4) @signature `Lkotlinx/coroutines/internal/u;.access$recoverFromStackFrame:(Ljava/lang/Throwable;Lkotlin/t/j/a/d;)Ljava/lang/Throwable;` @kind static;
  #L1e0d46.  v0:= temp @kind object;
  #L1e0d48.  v4:= 0I;
  #L1e0d4a.  v1:= 2I;
  #L1e0d4c.  v2:= 0I;
  #L1e0d4e.  call `<init>`(v3, v0, v4, v1, v2) @signature `Lkotlinx/coroutines/r;.<init>:(Ljava/lang/Throwable;ZILkotlin/v/c/f;)V` @kind direct;
  #L1e0d54.  return v3 @kind object;
}
procedure `java.lang.Object` `toState$default`(`java.lang.Object` v0 @kind object, `kotlin.v.b.l` v1 @kind object, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/u;.toState$default:(Ljava/lang/Object;Lkotlin/v/b/l;ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1e0cb0.  v2:= v2 ^& 1;
  #L1e0cb4.  if v2 == 0 then goto L1e0cba;
  #L1e0cb8.  v1:= 0I;
  #L1e0cba.  call temp:= `toState`(v0, v1) @signature `Lkotlinx/coroutines/u;.toState:(Ljava/lang/Object;Lkotlin/v/b/l;)Ljava/lang/Object;` @kind static;
  #L1e0cc0.  v0:= temp @kind object;
  #L1e0cc2.  return v0 @kind object;
}
