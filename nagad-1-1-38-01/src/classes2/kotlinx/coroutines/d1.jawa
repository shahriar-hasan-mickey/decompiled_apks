record `kotlinx.coroutines.d1` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE extends `kotlin.t.g$b` @kind interface {
}
global `kotlinx.coroutines.d1$b` `@@kotlinx.coroutines.d1.e` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/d1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e5ebc.  v0:= `@@kotlinx.coroutines.d1$b.a` @type ^`kotlinx.coroutines.d1$b` @kind object;
  #L1e5ec0.  `@@kotlinx.coroutines.d1.e` @type ^`kotlinx.coroutines.d1$b` := v0 @kind object;
  #L1e5ec4.  return @kind void;
}
procedure `kotlinx.coroutines.l` `attachChild`(`kotlinx.coroutines.n` v0 @kind object) @signature `Lkotlinx/coroutines/d1;.attachChild:(Lkotlinx/coroutines/n;)Lkotlinx/coroutines/l;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `cancel`(`java.util.concurrent.CancellationException` v0 @kind object) @signature `Lkotlinx/coroutines/d1;.cancel:(Ljava/util/concurrent/CancellationException;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.concurrent.CancellationException` `getCancellationException`() @signature `Lkotlinx/coroutines/d1;.getCancellationException:()Ljava/util/concurrent/CancellationException;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.p0` `invokeOnCompletion`(`boolean` v0 , `boolean` v1 , `kotlin.v.b.l` v2 @kind object) @signature `Lkotlinx/coroutines/d1;.invokeOnCompletion:(ZZLkotlin/v/b/l;)Lkotlinx/coroutines/p0;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isActive`() @signature `Lkotlinx/coroutines/d1;.isActive:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `start`() @signature `Lkotlinx/coroutines/d1;.start:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
