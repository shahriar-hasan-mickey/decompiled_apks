record `kotlinx.coroutines.b2` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `checkCompletion`(`kotlin.t.g` v1 @kind object) @signature `Lkotlinx/coroutines/b2;.checkCompletion:(Lkotlin/t/g;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1e6560.  v0:= `@@kotlinx.coroutines.d1.e` @type ^`kotlinx.coroutines.d1$b` @kind object;
  #L1e6564.  call temp:= `get`(v1, v0) @signature `Lkotlin/t/g;.get:(Lkotlin/t/g$c;)Lkotlin/t/g$b;` @kind interface;
  #L1e656a.  v1:= temp @kind object;
  #L1e656c.  v1:= (`kotlinx.coroutines.d1`) v1 @kind object;
  #L1e6570.  if v1 == 0 then goto L1e658c;
  #L1e6574.  call temp:= `isActive`(v1) @signature `Lkotlinx/coroutines/d1;.isActive:()Z` @kind interface;
  #L1e657a.  v0:= temp;
  #L1e657c.  if v0 == 0 then goto L1e6582;
  #L1e6580.  goto L1e658c;
  #L1e6582.  call temp:= `getCancellationException`(v1) @signature `Lkotlinx/coroutines/d1;.getCancellationException:()Ljava/util/concurrent/CancellationException;` @kind interface;
  #L1e6588.  v1:= temp @kind object;
  #L1e658a.  throw v1;
  #L1e658c.  return @kind void;
}
