record `kotlinx.coroutines.s0$a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.lang.Runnable` @kind interface, `java.lang.Comparable` @kind interface, `kotlinx.coroutines.p0` @kind interface, `kotlinx.coroutines.internal.b0` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.s0$a.f` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.s0$a.g` @AccessFlag PRIVATE;
  `long` `kotlinx.coroutines.s0$a.h` @AccessFlag PUBLIC;
}
procedure `int` `compareTo`(`kotlinx.coroutines.s0$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/s0$a;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1e2880.  v1:= (`kotlinx.coroutines.s0$a`) v1 @kind object;
  #L1e2884.  call temp:= `compareTo`(v0, v1) @signature `Lkotlinx/coroutines/s0$a;.compareTo:(Lkotlinx/coroutines/s0$a;)I` @kind virtual;
  #L1e288a.  v1:= temp;
  #L1e288c.  return v1;
}
procedure `int` `compareTo`(`kotlinx.coroutines.s0$a` v4 @kind this, `kotlinx.coroutines.s0$a` v5 @kind object) @signature `Lkotlinx/coroutines/s0$a;.compareTo:(Lkotlinx/coroutines/s0$a;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e28a0.  v0:= v4.`kotlinx.coroutines.s0$a.h` @type ^`long` @kind wide;
  #L1e28a4.  v2:= v5.`kotlinx.coroutines.s0$a.h` @type ^`long` @kind wide;
  #L1e28a8.  v0:= v0 - v2 @kind long;
  #L1e28aa.  v2:= 0L;
  #L1e28ae.  v5:= lcmp(v0, v2);
  #L1e28b2.  if v5 <= 0 then goto L1e28ba;
  #L1e28b6.  v5:= 1I;
  #L1e28b8.  goto L1e28c4;
  #L1e28ba.  if v5 >= 0 then goto L1e28c2;
  #L1e28be.  v5:= -1I;
  #L1e28c0.  goto L1e28c4;
  #L1e28c2.  v5:= 0I;
  #L1e28c4.  return v5;
}
procedure `void` `dispose`(`kotlinx.coroutines.s0$a` v2 @kind this) @signature `Lkotlinx/coroutines/s0$a;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1e2a4c.  @monitorenter v2
  #L1e2a4e.  v0:= v2.`kotlinx.coroutines.s0$a.f` @type ^`java.lang.Object` @kind object;
  #L1e2a52.  call temp:= `access$getDISPOSED_TASK$p`() @signature `Lkotlinx/coroutines/v0;.access$getDISPOSED_TASK$p:()Lkotlinx/coroutines/internal/v;` @kind static;
  #L1e2a58.  v1:= temp @kind object;
  #L1e2a5a.  if v0 != v1 then goto L1e2a62;
  #L1e2a5e.  @monitorexit v2
  #L1e2a60.  return @kind void;
  #L1e2a62.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.s0$b` @kind boolean;
  #L1e2a66.  if v1 != 0 then goto L1e2a6c;
  #L1e2a6a.  v0:= 0I;
  #L1e2a6c.  v0:= (`kotlinx.coroutines.s0$b`) v0 @kind object;
  #L1e2a70.  if v0 == 0 then goto L1e2a7a;
  #L1e2a74.  call temp:= `remove`(v0, v2) @signature `Lkotlinx/coroutines/internal/a0;.remove:(Lkotlinx/coroutines/internal/b0;)Z` @kind virtual;
  #L1e2a7a.  call temp:= `access$getDISPOSED_TASK$p`() @signature `Lkotlinx/coroutines/v0;.access$getDISPOSED_TASK$p:()Lkotlinx/coroutines/internal/v;` @kind static;
  #L1e2a80.  v0:= temp @kind object;
  #L1e2a82.  v2.`kotlinx.coroutines.s0$a.f` @type ^`java.lang.Object` := v0 @kind object;
  #L1e2a86.  @monitorexit v2
  #L1e2a88.  return @kind void;
  #L1e2a8a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1e2a8c.  @monitorexit v2
  #L1e2a8e.  throw v0;
  catch `java.lang.Throwable` @[L1e2a4e..L1e2a5a] goto L1e2a8a;
  catch `java.lang.Throwable` @[L1e2a62..L1e2a86] goto L1e2a8a;
}
procedure `kotlinx.coroutines.internal.a0` `getHeap`(`kotlinx.coroutines.s0$a` v2 @kind this) @signature `Lkotlinx/coroutines/s0$a;.getHeap:()Lkotlinx/coroutines/internal/a0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1e2a28.  v0:= v2.`kotlinx.coroutines.s0$a.f` @type ^`java.lang.Object` @kind object;
  #L1e2a2c.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.a0` @kind boolean;
  #L1e2a30.  if v1 != 0 then goto L1e2a36;
  #L1e2a34.  v0:= 0I;
  #L1e2a36.  v0:= (`kotlinx.coroutines.internal.a0`) v0 @kind object;
  #L1e2a3a.  return v0 @kind object;
}
procedure `int` `getIndex`(`kotlinx.coroutines.s0$a` v1 @kind this) @signature `Lkotlinx/coroutines/s0$a;.getIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e28d8.  v0:= v1.`kotlinx.coroutines.s0$a.g` @type ^`int`;
  #L1e28dc.  return v0;
}
procedure `int` `scheduleTask`(`kotlinx.coroutines.s0$a` v7 @kind this, `long` v8 , `kotlinx.coroutines.s0$b` v10 @kind object, `kotlinx.coroutines.s0` v11 @kind object) @signature `Lkotlinx/coroutines/s0$a;.scheduleTask:(JLkotlinx/coroutines/s0$b;Lkotlinx/coroutines/s0;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1e28f0.  @monitorenter v7
  #L1e28f2.  v0:= v7.`kotlinx.coroutines.s0$a.f` @type ^`java.lang.Object` @kind object;
  #L1e28f6.  call temp:= `access$getDISPOSED_TASK$p`() @signature `Lkotlinx/coroutines/v0;.access$getDISPOSED_TASK$p:()Lkotlinx/coroutines/internal/v;` @kind static;
  #L1e28fc.  v1:= temp @kind object;
  #L1e28fe.  if v0 != v1 then goto L1e2908;
  #L1e2902.  v8:= 2I;
  #L1e2904.  @monitorexit v7
  #L1e2906.  return v8;
  #L1e2908.  @monitorenter v10
  #L1e290a.  call temp:= `firstImpl`(v10) @signature `Lkotlinx/coroutines/internal/a0;.firstImpl:()Lkotlinx/coroutines/internal/b0;` @kind virtual;
  #L1e2910.  v0:= temp @kind object;
  #L1e2912.  v0:= (`kotlinx.coroutines.s0$a`) v0 @kind object;
  #L1e2916.  call temp:= `access$isCompleted$p`(v11) @signature `Lkotlinx/coroutines/s0;.access$isCompleted$p:(Lkotlinx/coroutines/s0;)Z` @kind static;
  #L1e291c.  v11:= temp;
  #L1e291e.  if v11 == 0 then goto L1e292a;
  #L1e2922.  v8:= 1I;
  #L1e2924.  @monitorexit v10
  #L1e2926.  @monitorexit v7
  #L1e2928.  return v8;
  #L1e292a.  v1:= 0L;
  #L1e292e.  if v0 != 0 then goto L1e2938;
  #L1e2932.  v10.`kotlinx.coroutines.s0$b.b` @type ^`long` := v8 @kind wide;
  #L1e2936.  goto L1e2960;
  #L1e2938.  v3:= v0.`kotlinx.coroutines.s0$a.h` @type ^`long` @kind wide;
  #L1e293c.  v5:= v3 - v8 @kind long;
  #L1e2940.  v11:= lcmp(v5, v1);
  #L1e2944.  if v11 < 0 then goto L1e294a;
  #L1e2948.  goto L1e294c;
  #L1e294a.  v8:= v3 @kind wide;
  #L1e294c.  v3:= v10.`kotlinx.coroutines.s0$b.b` @type ^`long` @kind wide;
  #L1e2950.  v3:= v8 - v3 @kind long;
  #L1e2954.  v11:= lcmp(v3, v1);
  #L1e2958.  if v11 <= 0 then goto L1e2960;
  #L1e295c.  v10.`kotlinx.coroutines.s0$b.b` @type ^`long` := v8 @kind wide;
  #L1e2960.  v8:= v7.`kotlinx.coroutines.s0$a.h` @type ^`long` @kind wide;
  #L1e2964.  v3:= v10.`kotlinx.coroutines.s0$b.b` @type ^`long` @kind wide;
  #L1e2968.  v8:= v8 - v3 @kind long;
  #L1e296a.  v11:= lcmp(v8, v1);
  #L1e296e.  if v11 >= 0 then goto L1e297a;
  #L1e2972.  v8:= v10.`kotlinx.coroutines.s0$b.b` @type ^`long` @kind wide;
  #L1e2976.  v7.`kotlinx.coroutines.s0$a.h` @type ^`long` := v8 @kind wide;
  #L1e297a.  call `addImpl`(v10, v7) @signature `Lkotlinx/coroutines/internal/a0;.addImpl:(Lkotlinx/coroutines/internal/b0;)V` @kind virtual;
  #L1e2980.  @monitorexit v10
  #L1e2982.  v8:= 0I;
  #L1e2984.  @monitorexit v7
  #L1e2986.  return v8;
  #L1e2988.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1e298a.  @monitorexit v10
  #L1e298c.  throw v8;
  #L1e298e.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1e2990.  @monitorexit v7
  #L1e2992.  throw v8;
  catch `java.lang.Throwable` @[L1e28f2..L1e28fe] goto L1e298e;
  catch `java.lang.Throwable` @[L1e2908..L1e290a] goto L1e298e;
  catch `java.lang.Throwable` @[L1e290a..L1e291e] goto L1e2988;
  catch `java.lang.Throwable` @[L1e2924..L1e2926] goto L1e298e;
  catch `java.lang.Throwable` @[L1e2932..L1e2980] goto L1e2988;
  catch `java.lang.Throwable` @[L1e2980..L1e2982] goto L1e298e;
  catch `java.lang.Throwable` @[L1e298a..L1e298e] goto L1e298e;
}
procedure `void` `setHeap`(`kotlinx.coroutines.s0$a` v2 @kind this, `kotlinx.coroutines.internal.a0` v3 @kind object) @signature `Lkotlinx/coroutines/s0$a;.setHeap:(Lkotlinx/coroutines/internal/a0;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1e2ab4.  v0:= v2.`kotlinx.coroutines.s0$a.f` @type ^`java.lang.Object` @kind object;
  #L1e2ab8.  call temp:= `access$getDISPOSED_TASK$p`() @signature `Lkotlinx/coroutines/v0;.access$getDISPOSED_TASK$p:()Lkotlinx/coroutines/internal/v;` @kind static;
  #L1e2abe.  v1:= temp @kind object;
  #L1e2ac0.  if v0 == v1 then goto L1e2ac8;
  #L1e2ac4.  v0:= 1I;
  #L1e2ac6.  goto L1e2aca;
  #L1e2ac8.  v0:= 0I;
  #L1e2aca.  if v0 == 0 then goto L1e2ad4;
  #L1e2ace.  v2.`kotlinx.coroutines.s0$a.f` @type ^`java.lang.Object` := v3 @kind object;
  #L1e2ad2.  return @kind void;
  #L1e2ad4.  v3:= new `java.lang.IllegalArgumentException`;
  #L1e2ad8.  v0:= "Failed requirement." @kind object;
  #L1e2adc.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e2ae2.  v0:= temp @kind object;
  #L1e2ae4.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e2aea.  throw v3;
}
procedure `void` `setIndex`(`kotlinx.coroutines.s0$a` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/s0$a;.setIndex:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1e2afc.  v0.`kotlinx.coroutines.s0$a.g` @type ^`int` := v1;
  #L1e2b00.  return @kind void;
}
procedure `boolean` `timeToExecute`(`kotlinx.coroutines.s0$a` v3 @kind this, `long` v4 ) @signature `Lkotlinx/coroutines/s0$a;.timeToExecute:(J)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1e2854.  v0:= v3.`kotlinx.coroutines.s0$a.h` @type ^`long` @kind wide;
  #L1e2858.  v4:= v4 - v0 @kind long;
  #L1e285a.  v0:= 0L;
  #L1e285e.  v2:= lcmp(v4, v0);
  #L1e2862.  if v2 < 0 then goto L1e286a;
  #L1e2866.  v4:= 1I;
  #L1e2868.  goto L1e286c;
  #L1e286a.  v4:= 0I;
  #L1e286c.  return v4;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.s0$a` v3 @kind this) @signature `Lkotlinx/coroutines/s0$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1e29e4.  v0:= new `java.lang.StringBuilder`;
  #L1e29e8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e29ee.  v1:= "Delayed[nanos=" @kind object;
  #L1e29f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e29f8.  v1:= v3.`kotlinx.coroutines.s0$a.h` @type ^`long` @kind wide;
  #L1e29fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e2a02.  v1:= 93I;
  #L1e2a06.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e2a0c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e2a12.  v0:= temp @kind object;
  #L1e2a14.  return v0 @kind object;
}
