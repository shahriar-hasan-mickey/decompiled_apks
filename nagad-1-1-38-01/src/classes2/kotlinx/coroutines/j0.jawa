record `kotlinx.coroutines.j0` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.s0` @kind class, `java.lang.Runnable` @kind interface {
}
global `java.lang.Thread` `@@kotlinx.coroutines.j0._thread` @AccessFlag PRIVATE_STATIC_VOLATILE;
global `int` `@@kotlinx.coroutines.j0.debugStatus` @AccessFlag PRIVATE_STATIC_VOLATILE;
global `long` `@@kotlinx.coroutines.j0.l` @AccessFlag PRIVATE_STATIC_FINAL;
global `kotlinx.coroutines.j0` `@@kotlinx.coroutines.j0.m` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/j0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e1da8.  v0:= new `kotlinx.coroutines.j0`;
  #L1e1dac.  call `<init>`(v0) @signature `Lkotlinx/coroutines/j0;.<init>:()V` @kind direct;
  #L1e1db2.  `@@kotlinx.coroutines.j0.m` @type ^`kotlinx.coroutines.j0` := v0 @kind object;
  #L1e1db6.  v1:= 0I;
  #L1e1db8.  v2:= 1I;
  #L1e1dba.  v3:= 0I;
  #L1e1dbc.  call `incrementUseCount$default`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/r0;.incrementUseCount$default:(Lkotlinx/coroutines/r0;ZILjava/lang/Object;)V` @kind static;
  #L1e1dc2.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1e1dc6.  v1:= 1000L;
  #L1e1dca.  v3:= "kotlinx.coroutines.DefaultExecutor.keepAlive" @kind object;
  #L1e1dce.  call temp:= `getLong`(v3, v1) @signature `Ljava/lang/Long;.getLong:(Ljava/lang/String;J)Ljava/lang/Long;` @kind static;
  #L1e1dd4.  v1:= temp @kind object;
  #L1e1dd6.  goto L1e1de0;
  #L1e1dd8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1e1dde.  v1:= temp @kind object;
  #L1e1de0.  call temp:= `longValue`(v1) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L1e1de6.  v1:= temp @kind wide;
  #L1e1de8.  call temp:= `toNanos`(v0, v1) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L1e1dee.  v0:= temp @kind wide;
  #L1e1df0.  `@@kotlinx.coroutines.j0.l` @type ^`long` := v0 @kind wide;
  #L1e1df4.  return @kind void;
  catch `java.lang.SecurityException` @[L1e1dca..L1e1dd6] goto L1e1dd8;
}
procedure `void` `<init>`(`kotlinx.coroutines.j0` v0 @kind this) @signature `Lkotlinx/coroutines/j0;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1e1e18.  call `<init>`(v0) @signature `Lkotlinx/coroutines/s0;.<init>:()V` @kind direct;
  #L1e1e1e.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.j0` v1 @kind this) @signature `Lkotlinx/coroutines/j0;.a:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1e1e30.  @monitorenter v1
  #L1e1e32.  call temp:= `c`(v1) @signature `Lkotlinx/coroutines/j0;.c:()Z` @kind direct;
  #L1e1e38.  v0:= temp;
  #L1e1e3a.  if v0 != 0 then goto L1e1e42;
  #L1e1e3e.  @monitorexit v1
  #L1e1e40.  return @kind void;
  #L1e1e42.  v0:= 3I;
  #L1e1e44.  `@@kotlinx.coroutines.j0.debugStatus` @type ^`int` := v0;
  #L1e1e48.  call `resetAll`(v1) @signature `Lkotlinx/coroutines/s0;.resetAll:()V` @kind virtual;
  #L1e1e4e.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1e1e54.  @monitorexit v1
  #L1e1e56.  return @kind void;
  #L1e1e58.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1e1e5a.  @monitorexit v1
  #L1e1e5c.  throw v0;
  catch `java.lang.Throwable` @[L1e1e32..L1e1e3a] goto L1e1e58;
  catch `java.lang.Throwable` @[L1e1e44..L1e1e54] goto L1e1e58;
}
procedure `java.lang.Thread` `b`(`kotlinx.coroutines.j0` v2 @kind this) @signature `Lkotlinx/coroutines/j0;.b:()Ljava/lang/Thread;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1e1d30.  @monitorenter v2
  #L1e1d32.  v0:= `@@kotlinx.coroutines.j0._thread` @type ^`java.lang.Thread` @kind object;
  #L1e1d36.  if v0 == 0 then goto L1e1d3c;
  #L1e1d3a.  goto L1e1d5c;
  #L1e1d3c.  v0:= new `java.lang.Thread`;
  #L1e1d40.  v1:= "kotlinx.coroutines.DefaultExecutor" @kind object;
  #L1e1d44.  call `<init>`(v0, v2, v1) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L1e1d4a.  `@@kotlinx.coroutines.j0._thread` @type ^`java.lang.Thread` := v0 @kind object;
  #L1e1d4e.  v1:= 1I;
  #L1e1d50.  call `setDaemon`(v0, v1) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L1e1d56.  call `start`(v0) @signature `Ljava/lang/Thread;.start:()V` @kind virtual;
  #L1e1d5c.  @monitorexit v2
  #L1e1d5e.  return v0 @kind object;
  #L1e1d60.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1e1d62.  @monitorexit v2
  #L1e1d64.  throw v0;
  catch `java.lang.Throwable` @[L1e1d32..L1e1d5c] goto L1e1d60;
}
procedure `boolean` `c`(`kotlinx.coroutines.j0` v2 @kind this) @signature `Lkotlinx/coroutines/j0;.c:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1e1cb4.  v0:= `@@kotlinx.coroutines.j0.debugStatus` @type ^`int`;
  #L1e1cb8.  v1:= 2I;
  #L1e1cba.  if v0 == v1 then goto L1e1cca;
  #L1e1cbe.  v1:= 3I;
  #L1e1cc0.  if v0 != v1 then goto L1e1cc6;
  #L1e1cc4.  goto L1e1cca;
  #L1e1cc6.  v0:= 0I;
  #L1e1cc8.  goto L1e1ccc;
  #L1e1cca.  v0:= 1I;
  #L1e1ccc.  return v0;
}
procedure `boolean` `d`(`kotlinx.coroutines.j0` v1 @kind this) @signature `Lkotlinx/coroutines/j0;.d:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1e1ce0.  @monitorenter v1
  #L1e1ce2.  call temp:= `c`(v1) @signature `Lkotlinx/coroutines/j0;.c:()Z` @kind direct;
  #L1e1ce8.  v0:= temp;
  #L1e1cea.  if v0 == 0 then goto L1e1cf4;
  #L1e1cee.  v0:= 0I;
  #L1e1cf0.  @monitorexit v1
  #L1e1cf2.  return v0;
  #L1e1cf4.  v0:= 1I;
  #L1e1cf6.  `@@kotlinx.coroutines.j0.debugStatus` @type ^`int` := v0;
  #L1e1cfa.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1e1d00.  @monitorexit v1
  #L1e1d02.  return v0;
  #L1e1d04.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1e1d06.  @monitorexit v1
  #L1e1d08.  throw v0;
  catch `java.lang.Throwable` @[L1e1ce2..L1e1cea] goto L1e1d04;
  catch `java.lang.Throwable` @[L1e1cf6..L1e1d00] goto L1e1d04;
}
procedure `java.lang.Thread` `getThread`(`kotlinx.coroutines.j0` v1 @kind this) @signature `Lkotlinx/coroutines/j0;.getThread:()Ljava/lang/Thread;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1e1d84.  v0:= `@@kotlinx.coroutines.j0._thread` @type ^`java.lang.Thread` @kind object;
  #L1e1d88.  if v0 == 0 then goto L1e1d8e;
  #L1e1d8c.  goto L1e1d96;
  #L1e1d8e.  call temp:= `b`(v1) @signature `Lkotlinx/coroutines/j0;.b:()Ljava/lang/Thread;` @kind direct;
  #L1e1d94.  v0:= temp @kind object;
  #L1e1d96.  return v0 @kind object;
}
procedure `void` `run`(`kotlinx.coroutines.j0` v12 @kind this) @signature `Lkotlinx/coroutines/j0;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1e1e84.  v0:= `@@kotlinx.coroutines.v1.b` @type ^`kotlinx.coroutines.v1` @kind object;
  #L1e1e88.  call `setEventLoop$kotlinx_coroutines_core`(v0, v12) @signature `Lkotlinx/coroutines/v1;.setEventLoop$kotlinx_coroutines_core:(Lkotlinx/coroutines/r0;)V` @kind virtual;
  #L1e1e8e.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/x1;.getTimeSource:()Lkotlinx/coroutines/w1;` @kind static;
  #L1e1e94.  v0:= temp @kind object;
  #L1e1e96.  if v0 == 0 then goto L1e1ea0;
  #L1e1e9a.  call `registerTimeLoopThread`(v0) @signature `Lkotlinx/coroutines/w1;.registerTimeLoopThread:()V` @kind interface;
  #L1e1ea0.  v0:= 0I;
  #L1e1ea2.  call temp:= `d`(v12) @signature `Lkotlinx/coroutines/j0;.d:()Z` @kind direct;
  #L1e1ea8.  v1:= temp;
  #L1e1eaa.  if v1 != 0 then goto L1e1ede;
  #L1e1eae.  `@@kotlinx.coroutines.j0._thread` @type ^`java.lang.Thread` := v0 @kind object;
  #L1e1eb2.  call `a`(v12) @signature `Lkotlinx/coroutines/j0;.a:()V` @kind direct;
  #L1e1eb8.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/x1;.getTimeSource:()Lkotlinx/coroutines/w1;` @kind static;
  #L1e1ebe.  v0:= temp @kind object;
  #L1e1ec0.  if v0 == 0 then goto L1e1eca;
  #L1e1ec4.  call `unregisterTimeLoopThread`(v0) @signature `Lkotlinx/coroutines/w1;.unregisterTimeLoopThread:()V` @kind interface;
  #L1e1eca.  call temp:= `isEmpty`(v12) @signature `Lkotlinx/coroutines/s0;.isEmpty:()Z` @kind virtual;
  #L1e1ed0.  v0:= temp;
  #L1e1ed2.  if v0 != 0 then goto L1e1edc;
  #L1e1ed6.  call temp:= `getThread`(v12) @signature `Lkotlinx/coroutines/j0;.getThread:()Ljava/lang/Thread;` @kind virtual;
  #L1e1edc.  return @kind void;
  #L1e1ede.  v1:= 9223372036854775807L;
  #L1e1ee8.  v3:= v1 @kind wide;
  #L1e1eea.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L1e1ef0.  call temp:= `processNextEvent`(v12) @signature `Lkotlinx/coroutines/s0;.processNextEvent:()J` @kind virtual;
  #L1e1ef6.  v5:= temp @kind wide;
  #L1e1ef8.  v7:= 0L;
  #L1e1efc.  v9:= lcmp(v5, v1);
  #L1e1f00.  if v9 != 0 then goto L1e1f76;
  #L1e1f04.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/x1;.getTimeSource:()Lkotlinx/coroutines/w1;` @kind static;
  #L1e1f0a.  v9:= temp @kind object;
  #L1e1f0c.  if v9 == 0 then goto L1e1f1a;
  #L1e1f10.  call temp:= `nanoTime`(v9) @signature `Lkotlinx/coroutines/w1;.nanoTime:()J` @kind interface;
  #L1e1f16.  v9:= temp @kind wide;
  #L1e1f18.  goto L1e1f22;
  #L1e1f1a.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L1e1f20.  v9:= temp @kind wide;
  #L1e1f22.  v11:= lcmp(v3, v1);
  #L1e1f26.  if v11 != 0 then goto L1e1f30;
  #L1e1f2a.  v3:= `@@kotlinx.coroutines.j0.l` @type ^`long` @kind wide;
  #L1e1f2e.  v3:= v3 + v9 @kind long;
  #L1e1f30.  v9:= v3 - v9 @kind long;
  #L1e1f34.  v11:= lcmp(v9, v7);
  #L1e1f38.  if v11 > 0 then goto L1e1f6c;
  #L1e1f3c.  `@@kotlinx.coroutines.j0._thread` @type ^`java.lang.Thread` := v0 @kind object;
  #L1e1f40.  call `a`(v12) @signature `Lkotlinx/coroutines/j0;.a:()V` @kind direct;
  #L1e1f46.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/x1;.getTimeSource:()Lkotlinx/coroutines/w1;` @kind static;
  #L1e1f4c.  v0:= temp @kind object;
  #L1e1f4e.  if v0 == 0 then goto L1e1f58;
  #L1e1f52.  call `unregisterTimeLoopThread`(v0) @signature `Lkotlinx/coroutines/w1;.unregisterTimeLoopThread:()V` @kind interface;
  #L1e1f58.  call temp:= `isEmpty`(v12) @signature `Lkotlinx/coroutines/s0;.isEmpty:()Z` @kind virtual;
  #L1e1f5e.  v0:= temp;
  #L1e1f60.  if v0 != 0 then goto L1e1f6a;
  #L1e1f64.  call temp:= `getThread`(v12) @signature `Lkotlinx/coroutines/j0;.getThread:()Ljava/lang/Thread;` @kind virtual;
  #L1e1f6a.  return @kind void;
  #L1e1f6c.  call temp:= `coerceAtMost`(v5, v9) @signature `Lkotlin/x/e;.coerceAtMost:(JJ)J` @kind static;
  #L1e1f72.  v5:= temp @kind wide;
  #L1e1f74.  goto L1e1f78;
  #L1e1f76.  v3:= v1 @kind wide;
  #L1e1f78.  v9:= lcmp(v5, v7);
  #L1e1f7c.  if v9 <= 0 then goto L1e1eea;
  #L1e1f80.  call temp:= `c`(v12) @signature `Lkotlinx/coroutines/j0;.c:()Z` @kind direct;
  #L1e1f86.  v7:= temp;
  #L1e1f88.  if v7 == 0 then goto L1e1fbc;
  #L1e1f8c.  `@@kotlinx.coroutines.j0._thread` @type ^`java.lang.Thread` := v0 @kind object;
  #L1e1f90.  call `a`(v12) @signature `Lkotlinx/coroutines/j0;.a:()V` @kind direct;
  #L1e1f96.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/x1;.getTimeSource:()Lkotlinx/coroutines/w1;` @kind static;
  #L1e1f9c.  v0:= temp @kind object;
  #L1e1f9e.  if v0 == 0 then goto L1e1fa8;
  #L1e1fa2.  call `unregisterTimeLoopThread`(v0) @signature `Lkotlinx/coroutines/w1;.unregisterTimeLoopThread:()V` @kind interface;
  #L1e1fa8.  call temp:= `isEmpty`(v12) @signature `Lkotlinx/coroutines/s0;.isEmpty:()Z` @kind virtual;
  #L1e1fae.  v0:= temp;
  #L1e1fb0.  if v0 != 0 then goto L1e1fba;
  #L1e1fb4.  call temp:= `getThread`(v12) @signature `Lkotlinx/coroutines/j0;.getThread:()Ljava/lang/Thread;` @kind virtual;
  #L1e1fba.  return @kind void;
  #L1e1fbc.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/x1;.getTimeSource:()Lkotlinx/coroutines/w1;` @kind static;
  #L1e1fc2.  v7:= temp @kind object;
  #L1e1fc4.  if v7 == 0 then goto L1e1fd0;
  #L1e1fc8.  call `parkNanos`(v7, v12, v5) @signature `Lkotlinx/coroutines/w1;.parkNanos:(Ljava/lang/Object;J)V` @kind interface;
  #L1e1fce.  goto L1e1eea;
  #L1e1fd0.  call `parkNanos`(v12, v5) @signature `Ljava/util/concurrent/locks/LockSupport;.parkNanos:(Ljava/lang/Object;J)V` @kind static;
  #L1e1fd6.  goto L1e1eea;
  #L1e1fd8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1e1fda.  `@@kotlinx.coroutines.j0._thread` @type ^`java.lang.Thread` := v0 @kind object;
  #L1e1fde.  call `a`(v12) @signature `Lkotlinx/coroutines/j0;.a:()V` @kind direct;
  #L1e1fe4.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/x1;.getTimeSource:()Lkotlinx/coroutines/w1;` @kind static;
  #L1e1fea.  v0:= temp @kind object;
  #L1e1fec.  if v0 == 0 then goto L1e1ff6;
  #L1e1ff0.  call `unregisterTimeLoopThread`(v0) @signature `Lkotlinx/coroutines/w1;.unregisterTimeLoopThread:()V` @kind interface;
  #L1e1ff6.  call temp:= `isEmpty`(v12) @signature `Lkotlinx/coroutines/s0;.isEmpty:()Z` @kind virtual;
  #L1e1ffc.  v0:= temp;
  #L1e1ffe.  if v0 != 0 then goto L1e2008;
  #L1e2002.  call temp:= `getThread`(v12) @signature `Lkotlinx/coroutines/j0;.getThread:()Ljava/lang/Thread;` @kind virtual;
  #L1e2008.  throw v1;
  catch `java.lang.Throwable` @[L1e1ea2..L1e1eaa] goto L1e1fd8;
  catch `java.lang.Throwable` @[L1e1eea..L1e1f2e] goto L1e1fd8;
  catch `java.lang.Throwable` @[L1e1f6c..L1e1f88] goto L1e1fd8;
  catch `java.lang.Throwable` @[L1e1fbc..L1e1fd6] goto L1e1fd8;
}
