record `kotlinx.coroutines.d2.a` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.Executor` @kind interface, `java.io.Closeable` @kind interface {
  `int` `kotlinx.coroutines.d2.a._isTerminated` @AccessFlag PRIVATE_VOLATILE;
  `long` `kotlinx.coroutines.d2.a.controlState` @AccessFlag VOLATILE;
  `kotlinx.coroutines.d2.e` `kotlinx.coroutines.d2.a.f` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.d2.e` `kotlinx.coroutines.d2.a.g` @AccessFlag PUBLIC_FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.d2.a.h` @AccessFlag PUBLIC_FINAL;
  `int` `kotlinx.coroutines.d2.a.i` @AccessFlag PUBLIC_FINAL;
  `int` `kotlinx.coroutines.d2.a.j` @AccessFlag PUBLIC_FINAL;
  `long` `kotlinx.coroutines.d2.a.k` @AccessFlag PUBLIC_FINAL;
  `java.lang.String` `kotlinx.coroutines.d2.a.l` @AccessFlag PUBLIC_FINAL;
  `long` `kotlinx.coroutines.d2.a.parkedWorkersStack` @AccessFlag PRIVATE_VOLATILE;
}
global `java.util.concurrent.atomic.AtomicLongFieldUpdater` `@@kotlinx.coroutines.d2.a.m` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicLongFieldUpdater` `@@kotlinx.coroutines.d2.a.n` @AccessFlag STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.d2.a.o` @AccessFlag PRIVATE_STATIC_FINAL;
global `kotlinx.coroutines.internal.v` `@@kotlinx.coroutines.d2.a.p` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/d2/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1ebcf8.  v0:= new `kotlinx.coroutines.d2.a$a`;
  #L1ebcfc.  v1:= 0I;
  #L1ebcfe.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/d2/a$a;.<init>:(Lkotlin/v/c/f;)V` @kind direct;
  #L1ebd04.  v0:= new `kotlinx.coroutines.internal.v`;
  #L1ebd08.  v1:= "NOT_IN_STACK" @kind object;
  #L1ebd0c.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/v;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ebd12.  `@@kotlinx.coroutines.d2.a.p` @type ^`kotlinx.coroutines.internal.v` := v0 @kind object;
  #L1ebd16.  v0:= constclass @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1ebd1a.  v1:= "parkedWorkersStack" @kind object;
  #L1ebd1e.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;` @kind static;
  #L1ebd24.  v0:= temp @kind object;
  #L1ebd26.  `@@kotlinx.coroutines.d2.a.m` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` := v0 @kind object;
  #L1ebd2a.  v0:= constclass @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1ebd2e.  v1:= "controlState" @kind object;
  #L1ebd32.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;` @kind static;
  #L1ebd38.  v0:= temp @kind object;
  #L1ebd3a.  `@@kotlinx.coroutines.d2.a.n` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` := v0 @kind object;
  #L1ebd3e.  v0:= constclass @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1ebd42.  v1:= "_isTerminated" @kind object;
  #L1ebd46.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L1ebd4c.  v0:= temp @kind object;
  #L1ebd4e.  `@@kotlinx.coroutines.d2.a.o` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L1ebd52.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.d2.a` v2 @kind this, `int` v3 , `int` v4 , `long` v5 , `java.lang.String` v7 @kind object) @signature `Lkotlinx/coroutines/d2/a;.<init>:(IIJLjava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1ebd64.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ebd6a.  v2.`kotlinx.coroutines.d2.a.i` @type ^`int` := v3;
  #L1ebd6e.  v2.`kotlinx.coroutines.d2.a.j` @type ^`int` := v4;
  #L1ebd72.  v2.`kotlinx.coroutines.d2.a.k` @type ^`long` := v5 @kind wide;
  #L1ebd76.  v2.`kotlinx.coroutines.d2.a.l` @type ^`java.lang.String` := v7 @kind object;
  #L1ebd7a.  v3:= v2.`kotlinx.coroutines.d2.a.i` @type ^`int`;
  #L1ebd7e.  v4:= 0I;
  #L1ebd80.  v5:= 1I;
  #L1ebd82.  if v3 < v5 then goto L1ebd8a;
  #L1ebd86.  v3:= 1I;
  #L1ebd88.  goto L1ebd8c;
  #L1ebd8a.  v3:= 0I;
  #L1ebd8c.  if v3 == 0 then goto L1ebef4;
  #L1ebd90.  v3:= v2.`kotlinx.coroutines.d2.a.j` @type ^`int`;
  #L1ebd94.  v6:= v2.`kotlinx.coroutines.d2.a.i` @type ^`int`;
  #L1ebd98.  if v3 < v6 then goto L1ebda0;
  #L1ebd9c.  v3:= 1I;
  #L1ebd9e.  goto L1ebda2;
  #L1ebda0.  v3:= 0I;
  #L1ebda2.  v6:= "Max pool size " @kind object;
  #L1ebda6.  if v3 == 0 then goto L1ebeaa;
  #L1ebdaa.  v3:= v2.`kotlinx.coroutines.d2.a.j` @type ^`int`;
  #L1ebdae.  v7:= 2097150I;
  #L1ebdb4.  if v3 > v7 then goto L1ebdbc;
  #L1ebdb8.  v3:= 1I;
  #L1ebdba.  goto L1ebdbe;
  #L1ebdbc.  v3:= 0I;
  #L1ebdbe.  if v3 == 0 then goto L1ebe6a;
  #L1ebdc2.  v6:= v2.`kotlinx.coroutines.d2.a.k` @type ^`long` @kind wide;
  #L1ebdc6.  v0:= 0L;
  #L1ebdca.  v3:= lcmp(v6, v0);
  #L1ebdce.  if v3 <= 0 then goto L1ebdd6;
  #L1ebdd2.  v3:= 1I;
  #L1ebdd4.  goto L1ebdd8;
  #L1ebdd6.  v3:= 0I;
  #L1ebdd8.  if v3 == 0 then goto L1ebe26;
  #L1ebddc.  v3:= new `kotlinx.coroutines.d2.e`;
  #L1ebde0.  call `<init>`(v3) @signature `Lkotlinx/coroutines/d2/e;.<init>:()V` @kind direct;
  #L1ebde6.  v2.`kotlinx.coroutines.d2.a.f` @type ^`kotlinx.coroutines.d2.e` := v3 @kind object;
  #L1ebdea.  v3:= new `kotlinx.coroutines.d2.e`;
  #L1ebdee.  call `<init>`(v3) @signature `Lkotlinx/coroutines/d2/e;.<init>:()V` @kind direct;
  #L1ebdf4.  v2.`kotlinx.coroutines.d2.a.g` @type ^`kotlinx.coroutines.d2.e` := v3 @kind object;
  #L1ebdf8.  v2.`kotlinx.coroutines.d2.a.parkedWorkersStack` @type ^`long` := v0 @kind wide;
  #L1ebdfc.  v3:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L1ebe00.  v6:= v2.`kotlinx.coroutines.d2.a.j` @type ^`int`;
  #L1ebe04.  v6:= v6 + v5 @kind int;
  #L1ebe06.  call `<init>`(v3, v6) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L1ebe0c.  v2.`kotlinx.coroutines.d2.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v3 @kind object;
  #L1ebe10.  v3:= v2.`kotlinx.coroutines.d2.a.i` @type ^`int`;
  #L1ebe14.  v5:= (`long`) v3 @kind i2l;
  #L1ebe16.  v3:= 42I;
  #L1ebe1a.  v5:= v5 ^< v3 @kind long;
  #L1ebe1c.  v2.`kotlinx.coroutines.d2.a.controlState` @type ^`long` := v5 @kind wide;
  #L1ebe20.  v2.`kotlinx.coroutines.d2.a._isTerminated` @type ^`int` := v4;
  #L1ebe24.  return @kind void;
  #L1ebe26.  v3:= new `java.lang.StringBuilder`;
  #L1ebe2a.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ebe30.  v4:= "Idle worker keep alive time " @kind object;
  #L1ebe34.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebe3a.  v4:= v2.`kotlinx.coroutines.d2.a.k` @type ^`long` @kind wide;
  #L1ebe3e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebe44.  v4:= " must be positive" @kind object;
  #L1ebe48.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebe4e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ebe54.  v3:= temp @kind object;
  #L1ebe56.  v4:= new `java.lang.IllegalArgumentException`;
  #L1ebe5a.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ebe60.  v3:= temp @kind object;
  #L1ebe62.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ebe68.  throw v4;
  #L1ebe6a.  v3:= new `java.lang.StringBuilder`;
  #L1ebe6e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ebe74.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebe7a.  v4:= v2.`kotlinx.coroutines.d2.a.j` @type ^`int`;
  #L1ebe7e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebe84.  v4:= " should not exceed maximal supported number of threads 2097150" @kind object;
  #L1ebe88.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebe8e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ebe94.  v3:= temp @kind object;
  #L1ebe96.  v4:= new `java.lang.IllegalArgumentException`;
  #L1ebe9a.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ebea0.  v3:= temp @kind object;
  #L1ebea2.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ebea8.  throw v4;
  #L1ebeaa.  v3:= new `java.lang.StringBuilder`;
  #L1ebeae.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ebeb4.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebeba.  v4:= v2.`kotlinx.coroutines.d2.a.j` @type ^`int`;
  #L1ebebe.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebec4.  v4:= " should be greater than or equals to core pool size " @kind object;
  #L1ebec8.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebece.  v4:= v2.`kotlinx.coroutines.d2.a.i` @type ^`int`;
  #L1ebed2.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebed8.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ebede.  v3:= temp @kind object;
  #L1ebee0.  v4:= new `java.lang.IllegalArgumentException`;
  #L1ebee4.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ebeea.  v3:= temp @kind object;
  #L1ebeec.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ebef2.  throw v4;
  #L1ebef4.  v3:= new `java.lang.StringBuilder`;
  #L1ebef8.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ebefe.  v4:= "Core pool size " @kind object;
  #L1ebf02.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebf08.  v4:= v2.`kotlinx.coroutines.d2.a.i` @type ^`int`;
  #L1ebf0c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebf12.  v4:= " should be at least 1" @kind object;
  #L1ebf16.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebf1c.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ebf22.  v3:= temp @kind object;
  #L1ebf24.  v4:= new `java.lang.IllegalArgumentException`;
  #L1ebf28.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ebf2e.  v3:= temp @kind object;
  #L1ebf30.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ebf36.  throw v4;
}
procedure `int` `a`(`kotlinx.coroutines.d2.a` v10 @kind this) @signature `Lkotlinx/coroutines/d2/a;.a:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1eb6dc.  v0:= v10.`kotlinx.coroutines.d2.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1eb6e0.  @monitorenter v0
  #L1eb6e2.  call temp:= `isTerminated`(v10) @signature `Lkotlinx/coroutines/d2/a;.isTerminated:()Z` @kind virtual;
  #L1eb6e8.  v1:= temp;
  #L1eb6ea.  if v1 == 0 then goto L1eb6f4;
  #L1eb6ee.  v1:= -1I;
  #L1eb6f0.  @monitorexit v0
  #L1eb6f2.  return v1;
  #L1eb6f4.  v1:= v10.`kotlinx.coroutines.d2.a.controlState` @type ^`long` @kind wide;
  #L1eb6f8.  v3:= 2097151L;
  #L1eb6fe.  v5:= v1 ^& v3 @kind long;
  #L1eb702.  v6:= (`int`) v5 @kind l2i;
  #L1eb704.  v7:= 4398044413952L;
  #L1eb70e.  v1:= v1 ^& v7 @kind long;
  #L1eb710.  v5:= 21I;
  #L1eb714.  v1:= v1 ^> v5 @kind long;
  #L1eb716.  v2:= (`int`) v1 @kind l2i;
  #L1eb718.  v1:= v6 - v2 @kind int;
  #L1eb71c.  v2:= 0I;
  #L1eb71e.  call temp:= `coerceAtLeast`(v1, v2) @signature `Lkotlin/x/e;.coerceAtLeast:(II)I` @kind static;
  #L1eb724.  v1:= temp;
  #L1eb726.  v5:= v10.`kotlinx.coroutines.d2.a.i` @type ^`int`;
  #L1eb72a.  if v1 < v5 then goto L1eb732;
  #L1eb72e.  @monitorexit v0
  #L1eb730.  return v2;
  #L1eb732.  v5:= v10.`kotlinx.coroutines.d2.a.j` @type ^`int`;
  #L1eb736.  if v6 < v5 then goto L1eb73e;
  #L1eb73a.  @monitorexit v0
  #L1eb73c.  return v2;
  #L1eb73e.  v5:= v10.`kotlinx.coroutines.d2.a.controlState` @type ^`long` @kind wide;
  #L1eb742.  v5:= v5 ^& v3 @kind long;
  #L1eb744.  v6:= (`int`) v5 @kind l2i;
  #L1eb746.  v5:= 1I;
  #L1eb748.  v6:= v6 + v5 @kind int;
  #L1eb74a.  if v6 <= 0 then goto L1eb762;
  #L1eb74e.  v7:= v10.`kotlinx.coroutines.d2.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1eb752.  call temp:= `get`(v7, v6) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1eb758.  v7:= temp @kind object;
  #L1eb75a.  if v7 != 0 then goto L1eb762;
  #L1eb75e.  v7:= 1I;
  #L1eb760.  goto L1eb764;
  #L1eb762.  v7:= 0I;
  #L1eb764.  if v7 == 0 then goto L1eb7ba;
  #L1eb768.  v7:= new `kotlinx.coroutines.d2.a$b`;
  #L1eb76c.  call `<init>`(v7, v10, v6) @signature `Lkotlinx/coroutines/d2/a$b;.<init>:(Lkotlinx/coroutines/d2/a;I)V` @kind direct;
  #L1eb772.  v8:= v10.`kotlinx.coroutines.d2.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1eb776.  call `set`(v8, v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L1eb77c.  v8:= `@@kotlinx.coroutines.d2.a.n` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1eb780.  call temp:= `incrementAndGet`(v8, v10) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)J` @kind virtual;
  #L1eb786.  v8:= temp @kind wide;
  #L1eb788.  v3:= v3 ^& v8 @kind long;
  #L1eb78a.  v4:= (`int`) v3 @kind l2i;
  #L1eb78c.  if v6 != v4 then goto L1eb792;
  #L1eb790.  v2:= 1I;
  #L1eb792.  if v2 == 0 then goto L1eb7a2;
  #L1eb796.  call `start`(v7) @signature `Ljava/lang/Thread;.start:()V` @kind virtual;
  #L1eb79c.  v1:= v1 + v5 @kind int;
  #L1eb79e.  @monitorexit v0
  #L1eb7a0.  return v1;
  #L1eb7a2.  v1:= "Failed requirement." @kind object;
  #L1eb7a6.  v2:= new `java.lang.IllegalArgumentException`;
  #L1eb7aa.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1eb7b0.  v1:= temp @kind object;
  #L1eb7b2.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1eb7b8.  throw v2;
  #L1eb7ba.  v1:= "Failed requirement." @kind object;
  #L1eb7be.  v2:= new `java.lang.IllegalArgumentException`;
  #L1eb7c2.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1eb7c8.  v1:= temp @kind object;
  #L1eb7ca.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1eb7d0.  throw v2;
  #L1eb7d2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1eb7d4.  @monitorexit v0
  #L1eb7d6.  throw v1;
  catch `java.lang.Throwable` @[L1eb6e2..L1eb6ea] goto L1eb7d2;
  catch `java.lang.Throwable` @[L1eb6f4..L1eb72a] goto L1eb7d2;
  catch `java.lang.Throwable` @[L1eb732..L1eb736] goto L1eb7d2;
  catch `java.lang.Throwable` @[L1eb73e..L1eb79c] goto L1eb7d2;
  catch `java.lang.Throwable` @[L1eb7a2..L1eb7d2] goto L1eb7d2;
}
procedure `int` `a`(`kotlinx.coroutines.d2.a` v1 @kind this, `kotlinx.coroutines.d2.a$b` v2 @kind object) @signature `Lkotlinx/coroutines/d2/a;.a:(Lkotlinx/coroutines/d2/a$b;)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1eb834.  call temp:= `getNextParkedWorker`(v2) @signature `Lkotlinx/coroutines/d2/a$b;.getNextParkedWorker:()Ljava/lang/Object;` @kind virtual;
  #L1eb83a.  v2:= temp @kind object;
  #L1eb83c.  v0:= `@@kotlinx.coroutines.d2.a.p` @type ^`kotlinx.coroutines.internal.v` @kind object;
  #L1eb840.  if v2 != v0 then goto L1eb848;
  #L1eb844.  v2:= -1I;
  #L1eb846.  return v2;
  #L1eb848.  if v2 != 0 then goto L1eb850;
  #L1eb84c.  v2:= 0I;
  #L1eb84e.  return v2;
  #L1eb850.  v2:= (`kotlinx.coroutines.d2.a$b`) v2 @kind object;
  #L1eb854.  call temp:= `getIndexInArray`(v2) @signature `Lkotlinx/coroutines/d2/a$b;.getIndexInArray:()I` @kind virtual;
  #L1eb85a.  v0:= temp;
  #L1eb85c.  if v0 == 0 then goto L1eb862;
  #L1eb860.  return v0;
  #L1eb862.  call temp:= `getNextParkedWorker`(v2) @signature `Lkotlinx/coroutines/d2/a$b;.getNextParkedWorker:()Ljava/lang/Object;` @kind virtual;
  #L1eb868.  v2:= temp @kind object;
  #L1eb86a.  goto L1eb83c;
}
procedure `kotlinx.coroutines.d2.i` `a`(`kotlinx.coroutines.d2.a` v2 @kind this, `kotlinx.coroutines.d2.a$b` v3 @kind object, `kotlinx.coroutines.d2.i` v4 @kind object, `boolean` v5 ) @signature `Lkotlinx/coroutines/d2/a;.a:(Lkotlinx/coroutines/d2/a$b;Lkotlinx/coroutines/d2/i;Z)Lkotlinx/coroutines/d2/i;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1ebca0.  if v3 != 0 then goto L1ebca6;
  #L1ebca4.  return v4 @kind object;
  #L1ebca6.  v0:= v3.`kotlinx.coroutines.d2.a$b.g` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1ebcaa.  v1:= `@@kotlinx.coroutines.d2.a$c.j` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1ebcae.  if v0 != v1 then goto L1ebcb4;
  #L1ebcb2.  return v4 @kind object;
  #L1ebcb4.  v0:= v4.`kotlinx.coroutines.d2.i.g` @type ^`kotlinx.coroutines.d2.j` @kind object;
  #L1ebcb8.  call temp:= `getTaskMode`(v0) @signature `Lkotlinx/coroutines/d2/j;.getTaskMode:()I` @kind interface;
  #L1ebcbe.  v0:= temp;
  #L1ebcc0.  if v0 != 0 then goto L1ebcd2;
  #L1ebcc4.  v0:= v3.`kotlinx.coroutines.d2.a$b.g` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1ebcc8.  v1:= `@@kotlinx.coroutines.d2.a$c.g` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1ebccc.  if v0 != v1 then goto L1ebcd2;
  #L1ebcd0.  return v4 @kind object;
  #L1ebcd2.  v0:= 1I;
  #L1ebcd4.  v3.`kotlinx.coroutines.d2.a$b.k` @type ^`boolean` := v0 @kind boolean;
  #L1ebcd8.  v3:= v3.`kotlinx.coroutines.d2.a$b.f` @type ^`kotlinx.coroutines.d2.n` @kind object;
  #L1ebcdc.  call temp:= `add`(v3, v4, v5) @signature `Lkotlinx/coroutines/d2/n;.add:(Lkotlinx/coroutines/d2/i;Z)Lkotlinx/coroutines/d2/i;` @kind virtual;
  #L1ebce2.  v3:= temp @kind object;
  #L1ebce4.  return v3 @kind object;
}
procedure `void` `a`(`kotlinx.coroutines.d2.a` v3 @kind this, `boolean` v4 ) @signature `Lkotlinx/coroutines/d2/a;.a:(Z)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1ec2e0.  v0:= `@@kotlinx.coroutines.d2.a.n` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1ec2e4.  v1:= 2097152L;
  #L1ec2ea.  call temp:= `addAndGet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.addAndGet:(Ljava/lang/Object;J)J` @kind virtual;
  #L1ec2f0.  v0:= temp @kind wide;
  #L1ec2f2.  if v4 == 0 then goto L1ec2f8;
  #L1ec2f6.  return @kind void;
  #L1ec2f8.  call temp:= `e`(v3) @signature `Lkotlinx/coroutines/d2/a;.e:()Z` @kind direct;
  #L1ec2fe.  v4:= temp;
  #L1ec300.  if v4 == 0 then goto L1ec306;
  #L1ec304.  return @kind void;
  #L1ec306.  call temp:= `a`(v3, v0) @signature `Lkotlinx/coroutines/d2/a;.a:(J)Z` @kind direct;
  #L1ec30c.  v4:= temp;
  #L1ec30e.  if v4 == 0 then goto L1ec314;
  #L1ec312.  return @kind void;
  #L1ec314.  call temp:= `e`(v3) @signature `Lkotlinx/coroutines/d2/a;.e:()Z` @kind direct;
  #L1ec31a.  return @kind void;
}
procedure `boolean` `a`(`kotlinx.coroutines.d2.a` v4 @kind this, `long` v5 ) @signature `Lkotlinx/coroutines/d2/a;.a:(J)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1eb61c.  v0:= 2097151L;
  #L1eb622.  v0:= v0 ^& v5 @kind long;
  #L1eb624.  v1:= (`int`) v0 @kind l2i;
  #L1eb626.  v2:= 4398044413952L;
  #L1eb630.  v5:= v5 ^& v2 @kind long;
  #L1eb632.  v0:= 21I;
  #L1eb636.  v5:= v5 ^> v0 @kind long;
  #L1eb638.  v6:= (`int`) v5 @kind l2i;
  #L1eb63a.  v1:= v1 - v6 @kind int;
  #L1eb63c.  v5:= 0I;
  #L1eb63e.  call temp:= `coerceAtLeast`(v1, v5) @signature `Lkotlin/x/e;.coerceAtLeast:(II)I` @kind static;
  #L1eb644.  v6:= temp;
  #L1eb646.  v0:= v4.`kotlinx.coroutines.d2.a.i` @type ^`int`;
  #L1eb64a.  if v6 >= v0 then goto L1eb670;
  #L1eb64e.  call temp:= `a`(v4) @signature `Lkotlinx/coroutines/d2/a;.a:()I` @kind direct;
  #L1eb654.  v6:= temp;
  #L1eb656.  v0:= 1I;
  #L1eb658.  if v6 != v0 then goto L1eb66a;
  #L1eb65c.  v1:= v4.`kotlinx.coroutines.d2.a.i` @type ^`int`;
  #L1eb660.  if v1 <= v0 then goto L1eb66a;
  #L1eb664.  call temp:= `a`(v4) @signature `Lkotlinx/coroutines/d2/a;.a:()I` @kind direct;
  #L1eb66a.  if v6 <= 0 then goto L1eb670;
  #L1eb66e.  return v0;
  #L1eb670.  return v5;
}
procedure `boolean` `a`(`kotlinx.coroutines.d2.a` v0 @kind object, `long` v1 , `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/d2/a;.a:(Lkotlinx/coroutines/d2/a;JILjava/lang/Object;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1eb5f4.  v3:= v3 ^& 1;
  #L1eb5f8.  if v3 == 0 then goto L1eb600;
  #L1eb5fc.  v1:= v0.`kotlinx.coroutines.d2.a.controlState` @type ^`long` @kind wide;
  #L1eb600.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/d2/a;.a:(J)Z` @kind direct;
  #L1eb606.  v0:= temp;
  #L1eb608.  return v0;
}
procedure `boolean` `a`(`kotlinx.coroutines.d2.a` v2 @kind this, `kotlinx.coroutines.d2.i` v3 @kind object) @signature `Lkotlinx/coroutines/d2/a;.a:(Lkotlinx/coroutines/d2/i;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1eb4f4.  v0:= v3.`kotlinx.coroutines.d2.i.g` @type ^`kotlinx.coroutines.d2.j` @kind object;
  #L1eb4f8.  call temp:= `getTaskMode`(v0) @signature `Lkotlinx/coroutines/d2/j;.getTaskMode:()I` @kind interface;
  #L1eb4fe.  v0:= temp;
  #L1eb500.  v1:= 1I;
  #L1eb502.  if v0 != v1 then goto L1eb508;
  #L1eb506.  goto L1eb50a;
  #L1eb508.  v1:= 0I;
  #L1eb50a.  if v1 == 0 then goto L1eb51c;
  #L1eb50e.  v0:= v2.`kotlinx.coroutines.d2.a.g` @type ^`kotlinx.coroutines.d2.e` @kind object;
  #L1eb512.  call temp:= `addLast`(v0, v3) @signature `Lkotlinx/coroutines/internal/m;.addLast:(Ljava/lang/Object;)Z` @kind virtual;
  #L1eb518.  v3:= temp;
  #L1eb51a.  goto L1eb528;
  #L1eb51c.  v0:= v2.`kotlinx.coroutines.d2.a.f` @type ^`kotlinx.coroutines.d2.e` @kind object;
  #L1eb520.  call temp:= `addLast`(v0, v3) @signature `Lkotlinx/coroutines/internal/m;.addLast:(Ljava/lang/Object;)Z` @kind virtual;
  #L1eb526.  v3:= temp;
  #L1eb528.  return v3;
}
procedure `int` `access$getCreatedWorkers$p`(`kotlinx.coroutines.d2.a` v0 @kind object) @signature `Lkotlinx/coroutines/d2/a;.access$getCreatedWorkers$p:(Lkotlinx/coroutines/d2/a;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1eb6c0.  call temp:= `c`(v0) @signature `Lkotlinx/coroutines/d2/a;.c:()I` @kind direct;
  #L1eb6c6.  v0:= temp;
  #L1eb6c8.  return v0;
}
procedure `kotlinx.coroutines.d2.a$b` `b`(`kotlinx.coroutines.d2.a` v3 @kind this) @signature `Lkotlinx/coroutines/d2/a;.b:()Lkotlinx/coroutines/d2/a$b;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1ebba4.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1ebbaa.  v0:= temp @kind object;
  #L1ebbac.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.d2.a$b` @kind boolean;
  #L1ebbb0.  v2:= 0I;
  #L1ebbb2.  if v1 != 0 then goto L1ebbb8;
  #L1ebbb6.  v0:= v2 @kind object;
  #L1ebbb8.  v0:= (`kotlinx.coroutines.d2.a$b`) v0 @kind object;
  #L1ebbbc.  if v0 == 0 then goto L1ebbd2;
  #L1ebbc0.  v1:= v0.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1ebbc4.  call temp:= `areEqual`(v1, v3) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1ebbca.  v1:= temp;
  #L1ebbcc.  if v1 == 0 then goto L1ebbd2;
  #L1ebbd0.  v2:= v0 @kind object;
  #L1ebbd2.  return v2 @kind object;
}
procedure `int` `c`(`kotlinx.coroutines.d2.a` v4 @kind this) @signature `Lkotlinx/coroutines/d2/a;.c:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1eb814.  v0:= v4.`kotlinx.coroutines.d2.a.controlState` @type ^`long` @kind wide;
  #L1eb818.  v2:= 2097151L;
  #L1eb81e.  v0:= v0 ^& v2 @kind long;
  #L1eb820.  v1:= (`int`) v0 @kind l2i;
  #L1eb822.  return v1;
}
procedure `kotlinx.coroutines.d2.a$b` `d`(`kotlinx.coroutines.d2.a` v9 @kind this) @signature `Lkotlinx/coroutines/d2/a;.d:()Lkotlinx/coroutines/d2/a$b;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1ebbe4.  v2:= v9.`kotlinx.coroutines.d2.a.parkedWorkersStack` @type ^`long` @kind wide;
  #L1ebbe8.  v0:= 2097151L;
  #L1ebbee.  v0:= v0 ^& v2 @kind long;
  #L1ebbf0.  v1:= (`int`) v0 @kind l2i;
  #L1ebbf2.  v0:= v9.`kotlinx.coroutines.d2.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1ebbf6.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1ebbfc.  v0:= temp @kind object;
  #L1ebbfe.  v6:= v0 @kind object;
  #L1ebc00.  v6:= (`kotlinx.coroutines.d2.a$b`) v6 @kind object;
  #L1ebc04.  if v6 == 0 then goto L1ebc4c;
  #L1ebc08.  v0:= 2097152L;
  #L1ebc0e.  v0:= v0 + v2 @kind long;
  #L1ebc10.  v4:= -2097152L;
  #L1ebc16.  v0:= v0 ^& v4 @kind long;
  #L1ebc18.  call temp:= `a`(v9, v6) @signature `Lkotlinx/coroutines/d2/a;.a:(Lkotlinx/coroutines/d2/a$b;)I` @kind direct;
  #L1ebc1e.  v4:= temp;
  #L1ebc20.  if v4 >= 0 then goto L1ebc26;
  #L1ebc24.  goto L1ebbe4;
  #L1ebc26.  v5:= `@@kotlinx.coroutines.d2.a.m` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1ebc2a.  v7:= (`long`) v4 @kind i2l;
  #L1ebc2c.  v7:= v7 ^| v0 @kind long;
  #L1ebc2e.  v0:= v5 @kind object;
  #L1ebc30.  v1:= v9 @kind object;
  #L1ebc32.  v4:= v7 @kind wide;
  #L1ebc34.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L1ebc3a.  v0:= temp;
  #L1ebc3c.  if v0 == 0 then goto L1ebbe4;
  #L1ebc40.  v0:= `@@kotlinx.coroutines.d2.a.p` @type ^`kotlinx.coroutines.internal.v` @kind object;
  #L1ebc44.  call `setNextParkedWorker`(v6, v0) @signature `Lkotlinx/coroutines/d2/a$b;.setNextParkedWorker:(Ljava/lang/Object;)V` @kind virtual;
  #L1ebc4a.  return v6 @kind object;
  #L1ebc4c.  v0:= 0I;
  #L1ebc4e.  return v0 @kind object;
}
procedure `void` `dispatch$default`(`kotlinx.coroutines.d2.a` v0 @kind object, `java.lang.Runnable` v1 @kind object, `kotlinx.coroutines.d2.j` v2 @kind object, `boolean` v3 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/d2/a;.dispatch$default:(Lkotlinx/coroutines/d2/a;Ljava/lang/Runnable;Lkotlinx/coroutines/d2/j;ZILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1ebf64.  v5:= v4 ^& 2;
  #L1ebf68.  if v5 == 0 then goto L1ebf70;
  #L1ebf6c.  v2:= `@@kotlinx.coroutines.d2.h.g` @type ^`kotlinx.coroutines.d2.h` @kind object;
  #L1ebf70.  v4:= v4 ^& 4;
  #L1ebf74.  if v4 == 0 then goto L1ebf7a;
  #L1ebf78.  v3:= 0I;
  #L1ebf7a.  call `dispatch`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/d2/a;.dispatch:(Ljava/lang/Runnable;Lkotlinx/coroutines/d2/j;Z)V` @kind virtual;
  #L1ebf80.  return @kind void;
}
procedure `boolean` `e`(`kotlinx.coroutines.d2.a` v4 @kind this) @signature `Lkotlinx/coroutines/d2/a;.e:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1eb684.  call temp:= `d`(v4) @signature `Lkotlinx/coroutines/d2/a;.d:()Lkotlinx/coroutines/d2/a$b;` @kind direct;
  #L1eb68a.  v0:= temp @kind object;
  #L1eb68c.  v1:= 0I;
  #L1eb68e.  if v0 == 0 then goto L1eb6ae;
  #L1eb692.  v2:= `@@kotlinx.coroutines.d2.a$b.m` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1eb696.  v3:= -1I;
  #L1eb698.  call temp:= `compareAndSet`(v2, v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L1eb69e.  v1:= temp;
  #L1eb6a0.  if v1 == 0 then goto L1eb684;
  #L1eb6a4.  call `unpark`(v0) @signature `Ljava/util/concurrent/locks/LockSupport;.unpark:(Ljava/lang/Thread;)V` @kind static;
  #L1eb6aa.  v0:= 1I;
  #L1eb6ac.  return v0;
  #L1eb6ae.  return v1;
}
procedure `void` `close`(`kotlinx.coroutines.d2.a` v2 @kind this) @signature `Lkotlinx/coroutines/d2/a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ebf48.  v0:= 10000L;
  #L1ebf4c.  call `shutdown`(v2, v0) @signature `Lkotlinx/coroutines/d2/a;.shutdown:(J)V` @kind virtual;
  #L1ebf52.  return @kind void;
}
procedure `kotlinx.coroutines.d2.i` `createTask$kotlinx_coroutines_core`(`kotlinx.coroutines.d2.a` v3 @kind this, `java.lang.Runnable` v4 @kind object, `kotlinx.coroutines.d2.j` v5 @kind object) @signature `Lkotlinx/coroutines/d2/a;.createTask$kotlinx_coroutines_core:(Ljava/lang/Runnable;Lkotlinx/coroutines/d2/j;)Lkotlinx/coroutines/d2/i;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1ebc60.  v0:= `@@kotlinx.coroutines.d2.l.e` @type ^`kotlinx.coroutines.d2.m` @kind object;
  #L1ebc64.  call temp:= `nanoTime`(v0) @signature `Lkotlinx/coroutines/d2/m;.nanoTime:()J` @kind virtual;
  #L1ebc6a.  v0:= temp @kind wide;
  #L1ebc6c.  v2:= instanceof @variable v4 @type ^`kotlinx.coroutines.d2.i` @kind boolean;
  #L1ebc70.  if v2 == 0 then goto L1ebc82;
  #L1ebc74.  v4:= (`kotlinx.coroutines.d2.i`) v4 @kind object;
  #L1ebc78.  v4.`kotlinx.coroutines.d2.i.f` @type ^`long` := v0 @kind wide;
  #L1ebc7c.  v4.`kotlinx.coroutines.d2.i.g` @type ^`kotlinx.coroutines.d2.j` := v5 @kind object;
  #L1ebc80.  return v4 @kind object;
  #L1ebc82.  v2:= new `kotlinx.coroutines.d2.k`;
  #L1ebc86.  call `<init>`(v2, v4, v0, v5) @signature `Lkotlinx/coroutines/d2/k;.<init>:(Ljava/lang/Runnable;JLkotlinx/coroutines/d2/j;)V` @kind direct;
  #L1ebc8c.  return v2 @kind object;
}
procedure `void` `dispatch`(`kotlinx.coroutines.d2.a` v1 @kind this, `java.lang.Runnable` v2 @kind object, `kotlinx.coroutines.d2.j` v3 @kind object, `boolean` v4 ) @signature `Lkotlinx/coroutines/d2/a;.dispatch:(Ljava/lang/Runnable;Lkotlinx/coroutines/d2/j;Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ebf94.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/x1;.getTimeSource:()Lkotlinx/coroutines/w1;` @kind static;
  #L1ebf9a.  v0:= temp @kind object;
  #L1ebf9c.  if v0 == 0 then goto L1ebfa6;
  #L1ebfa0.  call `trackTask`(v0) @signature `Lkotlinx/coroutines/w1;.trackTask:()V` @kind interface;
  #L1ebfa6.  call temp:= `createTask$kotlinx_coroutines_core`(v1, v2, v3) @signature `Lkotlinx/coroutines/d2/a;.createTask$kotlinx_coroutines_core:(Ljava/lang/Runnable;Lkotlinx/coroutines/d2/j;)Lkotlinx/coroutines/d2/i;` @kind virtual;
  #L1ebfac.  v2:= temp @kind object;
  #L1ebfae.  call temp:= `b`(v1) @signature `Lkotlinx/coroutines/d2/a;.b:()Lkotlinx/coroutines/d2/a$b;` @kind direct;
  #L1ebfb4.  v3:= temp @kind object;
  #L1ebfb6.  call temp:= `a`(v1, v3, v2, v4) @signature `Lkotlinx/coroutines/d2/a;.a:(Lkotlinx/coroutines/d2/a$b;Lkotlinx/coroutines/d2/i;Z)Lkotlinx/coroutines/d2/i;` @kind direct;
  #L1ebfbc.  v0:= temp @kind object;
  #L1ebfbe.  if v0 == 0 then goto L1ec002;
  #L1ebfc2.  call temp:= `a`(v1, v0) @signature `Lkotlinx/coroutines/d2/a;.a:(Lkotlinx/coroutines/d2/i;)Z` @kind direct;
  #L1ebfc8.  v0:= temp;
  #L1ebfca.  if v0 == 0 then goto L1ebfd0;
  #L1ebfce.  goto L1ec002;
  #L1ebfd0.  v2:= new `java.util.concurrent.RejectedExecutionException`;
  #L1ebfd4.  v3:= new `java.lang.StringBuilder`;
  #L1ebfd8.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ebfde.  v4:= v1.`kotlinx.coroutines.d2.a.l` @type ^`java.lang.String` @kind object;
  #L1ebfe2.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebfe8.  v4:= " was terminated" @kind object;
  #L1ebfec.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebff2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ebff8.  v3:= temp @kind object;
  #L1ebffa.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/RejectedExecutionException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ec000.  throw v2;
  #L1ec002.  if v4 == 0 then goto L1ec00e;
  #L1ec006.  if v3 == 0 then goto L1ec00e;
  #L1ec00a.  v3:= 1I;
  #L1ec00c.  goto L1ec010;
  #L1ec00e.  v3:= 0I;
  #L1ec010.  v2:= v2.`kotlinx.coroutines.d2.i.g` @type ^`kotlinx.coroutines.d2.j` @kind object;
  #L1ec014.  call temp:= `getTaskMode`(v2) @signature `Lkotlinx/coroutines/d2/j;.getTaskMode:()I` @kind interface;
  #L1ec01a.  v2:= temp;
  #L1ec01c.  if v2 != 0 then goto L1ec02e;
  #L1ec020.  if v3 == 0 then goto L1ec026;
  #L1ec024.  return @kind void;
  #L1ec026.  call `signalCpuWork$kotlinx_coroutines_core`(v1) @signature `Lkotlinx/coroutines/d2/a;.signalCpuWork$kotlinx_coroutines_core:()V` @kind virtual;
  #L1ec02c.  goto L1ec034;
  #L1ec02e.  call `a`(v1, v3) @signature `Lkotlinx/coroutines/d2/a;.a:(Z)V` @kind direct;
  #L1ec034.  return @kind void;
}
procedure `void` `execute`(`kotlinx.coroutines.d2.a` v6 @kind this, `java.lang.Runnable` v7 @kind object) @signature `Lkotlinx/coroutines/d2/a;.execute:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ec048.  v2:= 0I;
  #L1ec04a.  v3:= 0I;
  #L1ec04c.  v4:= 6I;
  #L1ec04e.  v5:= 0I;
  #L1ec050.  v0:= v6 @kind object;
  #L1ec052.  v1:= v7 @kind object;
  #L1ec054.  call `dispatch$default`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/d2/a;.dispatch$default:(Lkotlinx/coroutines/d2/a;Ljava/lang/Runnable;Lkotlinx/coroutines/d2/j;ZILjava/lang/Object;)V` @kind static;
  #L1ec05a.  return @kind void;
}
procedure `boolean` `isTerminated`(`kotlinx.coroutines.d2.a` v1 @kind this) @signature `Lkotlinx/coroutines/d2/a;.isTerminated:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1eb53c.  v0:= v1.`kotlinx.coroutines.d2.a._isTerminated` @type ^`int`;
  #L1eb540.  return v0;
}
procedure `boolean` `parkedWorkersStackPush$kotlinx_coroutines_core`(`kotlinx.coroutines.d2.a` v10 @kind this, `kotlinx.coroutines.d2.a$b` v11 @kind object) @signature `Lkotlinx/coroutines/d2/a;.parkedWorkersStackPush$kotlinx_coroutines_core:(Lkotlinx/coroutines/d2/a$b;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1eb554.  call temp:= `getNextParkedWorker`(v11) @signature `Lkotlinx/coroutines/d2/a$b;.getNextParkedWorker:()Ljava/lang/Object;` @kind virtual;
  #L1eb55a.  v0:= temp @kind object;
  #L1eb55c.  v1:= `@@kotlinx.coroutines.d2.a.p` @type ^`kotlinx.coroutines.internal.v` @kind object;
  #L1eb560.  v2:= 0I;
  #L1eb562.  if v0 == v1 then goto L1eb568;
  #L1eb566.  return v2;
  #L1eb568.  v5:= v10.`kotlinx.coroutines.d2.a.parkedWorkersStack` @type ^`long` @kind wide;
  #L1eb56c.  v0:= 2097151L;
  #L1eb572.  v0:= v0 ^& v5 @kind long;
  #L1eb574.  v1:= (`int`) v0 @kind l2i;
  #L1eb576.  v3:= 2097152L;
  #L1eb57c.  v3:= v3 + v5 @kind long;
  #L1eb57e.  v7:= -2097152L;
  #L1eb584.  v3:= v3 ^& v7 @kind long;
  #L1eb586.  call temp:= `getIndexInArray`(v11) @signature `Lkotlinx/coroutines/d2/a$b;.getIndexInArray:()I` @kind virtual;
  #L1eb58c.  v0:= temp;
  #L1eb58e.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1eb594.  v7:= temp;
  #L1eb596.  v9:= 1I;
  #L1eb598.  if v7 == 0 then goto L1eb5b8;
  #L1eb59c.  if v0 == 0 then goto L1eb5a4;
  #L1eb5a0.  v7:= 1I;
  #L1eb5a2.  goto L1eb5a6;
  #L1eb5a4.  v7:= 0I;
  #L1eb5a6.  if v7 == 0 then goto L1eb5ac;
  #L1eb5aa.  goto L1eb5b8;
  #L1eb5ac.  v11:= new `java.lang.AssertionError`;
  #L1eb5b0.  call `<init>`(v11) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1eb5b6.  throw v11;
  #L1eb5b8.  v7:= v10.`kotlinx.coroutines.d2.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1eb5bc.  call temp:= `get`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1eb5c2.  v1:= temp @kind object;
  #L1eb5c4.  call `setNextParkedWorker`(v11, v1) @signature `Lkotlinx/coroutines/d2/a$b;.setNextParkedWorker:(Ljava/lang/Object;)V` @kind virtual;
  #L1eb5ca.  v1:= `@@kotlinx.coroutines.d2.a.m` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1eb5ce.  v7:= (`long`) v0 @kind i2l;
  #L1eb5d0.  v7:= v7 ^| v3 @kind long;
  #L1eb5d2.  v3:= v1 @kind object;
  #L1eb5d4.  v4:= v10 @kind object;
  #L1eb5d6.  call temp:= `compareAndSet`(v3, v4, v5, v7) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L1eb5dc.  v0:= temp;
  #L1eb5de.  if v0 == 0 then goto L1eb568;
  #L1eb5e2.  return v9;
}
procedure `void` `parkedWorkersStackTopUpdate$kotlinx_coroutines_core`(`kotlinx.coroutines.d2.a` v8 @kind this, `kotlinx.coroutines.d2.a$b` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lkotlinx/coroutines/d2/a;.parkedWorkersStackTopUpdate$kotlinx_coroutines_core:(Lkotlinx/coroutines/d2/a$b;II)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1ec06c.  v2:= v8.`kotlinx.coroutines.d2.a.parkedWorkersStack` @type ^`long` @kind wide;
  #L1ec070.  v0:= 2097151L;
  #L1ec076.  v0:= v0 ^& v2 @kind long;
  #L1ec078.  v1:= (`int`) v0 @kind l2i;
  #L1ec07a.  v4:= 2097152L;
  #L1ec080.  v4:= v4 + v2 @kind long;
  #L1ec082.  v6:= -2097152L;
  #L1ec088.  v4:= v4 ^& v6 @kind long;
  #L1ec08a.  if v1 != v10 then goto L1ec0a0;
  #L1ec08e.  if v11 != 0 then goto L1ec09c;
  #L1ec092.  call temp:= `a`(v8, v9) @signature `Lkotlinx/coroutines/d2/a;.a:(Lkotlinx/coroutines/d2/a$b;)I` @kind direct;
  #L1ec098.  v0:= temp;
  #L1ec09a.  goto L1ec0a2;
  #L1ec09c.  v0:= v11;
  #L1ec09e.  goto L1ec0a2;
  #L1ec0a0.  v0:= v1;
  #L1ec0a2.  if v0 >= 0 then goto L1ec0a8;
  #L1ec0a6.  goto L1ec06c;
  #L1ec0a8.  v1:= `@@kotlinx.coroutines.d2.a.m` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1ec0ac.  v6:= (`long`) v0 @kind i2l;
  #L1ec0ae.  v4:= v4 ^| v6 @kind long;
  #L1ec0b0.  v0:= v1 @kind object;
  #L1ec0b2.  v1:= v8 @kind object;
  #L1ec0b4.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L1ec0ba.  v0:= temp;
  #L1ec0bc.  if v0 == 0 then goto L1ec06c;
  #L1ec0c0.  return @kind void;
}
procedure `void` `runSafely`(`kotlinx.coroutines.d2.a` v2 @kind this, `kotlinx.coroutines.d2.i` v3 @kind object) @signature `Lkotlinx/coroutines/d2/a;.runSafely:(Lkotlinx/coroutines/d2/i;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1ec0d4.  call `run`(v3) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L1ec0da.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/x1;.getTimeSource:()Lkotlinx/coroutines/w1;` @kind static;
  #L1ec0e0.  v3:= temp @kind object;
  #L1ec0e2.  if v3 == 0 then goto L1ec114;
  #L1ec0e6.  call `unTrackTask`(v3) @signature `Lkotlinx/coroutines/w1;.unTrackTask:()V` @kind interface;
  #L1ec0ec.  goto L1ec114;
  #L1ec0ee.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ec0f0.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1ec0f6.  v0:= temp @kind object;
  #L1ec0f8.  call temp:= `getUncaughtExceptionHandler`(v0) @signature `Ljava/lang/Thread;.getUncaughtExceptionHandler:()Ljava/lang/Thread$UncaughtExceptionHandler;` @kind virtual;
  #L1ec0fe.  v1:= temp @kind object;
  #L1ec100.  call `uncaughtException`(v1, v0, v3) @signature `Ljava/lang/Thread$UncaughtExceptionHandler;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @kind interface;
  #L1ec106.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/x1;.getTimeSource:()Lkotlinx/coroutines/w1;` @kind static;
  #L1ec10c.  v3:= temp @kind object;
  #L1ec10e.  if v3 == 0 then goto L1ec114;
  #L1ec112.  goto L1ec0e6;
  #L1ec114.  return @kind void;
  #L1ec116.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ec118.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/x1;.getTimeSource:()Lkotlinx/coroutines/w1;` @kind static;
  #L1ec11e.  v0:= temp @kind object;
  #L1ec120.  if v0 == 0 then goto L1ec12a;
  #L1ec124.  call `unTrackTask`(v0) @signature `Lkotlinx/coroutines/w1;.unTrackTask:()V` @kind interface;
  #L1ec12a.  throw v3;
  catch `java.lang.Throwable` @[L1ec0d4..L1ec0da] goto L1ec0ee;
  catch `java.lang.Throwable` @[L1ec0f0..L1ec106] goto L1ec116;
}
procedure `void` `shutdown`(`kotlinx.coroutines.d2.a` v8 @kind this, `long` v9 ) @signature `Lkotlinx/coroutines/d2/a;.shutdown:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1ec154.  v0:= `@@kotlinx.coroutines.d2.a.o` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1ec158.  v1:= 0I;
  #L1ec15a.  v2:= 1I;
  #L1ec15c.  call temp:= `compareAndSet`(v0, v8, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L1ec162.  v0:= temp;
  #L1ec164.  if v0 != 0 then goto L1ec16a;
  #L1ec168.  return @kind void;
  #L1ec16a.  call temp:= `b`(v8) @signature `Lkotlinx/coroutines/d2/a;.b:()Lkotlinx/coroutines/d2/a$b;` @kind direct;
  #L1ec170.  v0:= temp @kind object;
  #L1ec172.  v3:= v8.`kotlinx.coroutines.d2.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1ec176.  @monitorenter v3
  #L1ec178.  v4:= v8.`kotlinx.coroutines.d2.a.controlState` @type ^`long` @kind wide;
  #L1ec17c.  v6:= 2097151L;
  #L1ec182.  v4:= v4 ^& v6 @kind long;
  #L1ec184.  v5:= (`int`) v4 @kind l2i;
  #L1ec186.  @monitorexit v3
  #L1ec188.  if v2 > v5 then goto L1ec20a;
  #L1ec18c.  v3:= 1I;
  #L1ec18e.  v4:= v8.`kotlinx.coroutines.d2.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1ec192.  call temp:= `get`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1ec198.  v4:= temp @kind object;
  #L1ec19a.  call `checkNotNull`(v4) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ec1a0.  v4:= (`kotlinx.coroutines.d2.a$b`) v4 @kind object;
  #L1ec1a4.  if v4 == v0 then goto L1ec200;
  #L1ec1a8.  call temp:= `isAlive`(v4) @signature `Ljava/lang/Thread;.isAlive:()Z` @kind virtual;
  #L1ec1ae.  v6:= temp;
  #L1ec1b0.  if v6 == 0 then goto L1ec1c2;
  #L1ec1b4.  call `unpark`(v4) @signature `Ljava/util/concurrent/locks/LockSupport;.unpark:(Ljava/lang/Thread;)V` @kind static;
  #L1ec1ba.  call `join`(v4, v9) @signature `Ljava/lang/Thread;.join:(J)V` @kind virtual;
  #L1ec1c0.  goto L1ec1a8;
  #L1ec1c2.  v6:= v4.`kotlinx.coroutines.d2.a$b.g` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1ec1c6.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1ec1cc.  v7:= temp;
  #L1ec1ce.  if v7 == 0 then goto L1ec1f2;
  #L1ec1d2.  v7:= `@@kotlinx.coroutines.d2.a$c.j` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1ec1d6.  if v6 != v7 then goto L1ec1de;
  #L1ec1da.  v6:= 1I;
  #L1ec1dc.  goto L1ec1e0;
  #L1ec1de.  v6:= 0I;
  #L1ec1e0.  if v6 == 0 then goto L1ec1e6;
  #L1ec1e4.  goto L1ec1f2;
  #L1ec1e6.  v9:= new `java.lang.AssertionError`;
  #L1ec1ea.  call `<init>`(v9) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1ec1f0.  throw v9;
  #L1ec1f2.  v4:= v4.`kotlinx.coroutines.d2.a$b.f` @type ^`kotlinx.coroutines.d2.n` @kind object;
  #L1ec1f6.  v6:= v8.`kotlinx.coroutines.d2.a.g` @type ^`kotlinx.coroutines.d2.e` @kind object;
  #L1ec1fa.  call `offloadAllWorkTo`(v4, v6) @signature `Lkotlinx/coroutines/d2/n;.offloadAllWorkTo:(Lkotlinx/coroutines/d2/e;)V` @kind virtual;
  #L1ec200.  if v3 == v5 then goto L1ec20a;
  #L1ec204.  v3:= v3 + 1;
  #L1ec208.  goto L1ec18e;
  #L1ec20a.  v9:= v8.`kotlinx.coroutines.d2.a.g` @type ^`kotlinx.coroutines.d2.e` @kind object;
  #L1ec20e.  call `close`(v9) @signature `Lkotlinx/coroutines/internal/m;.close:()V` @kind virtual;
  #L1ec214.  v9:= v8.`kotlinx.coroutines.d2.a.f` @type ^`kotlinx.coroutines.d2.e` @kind object;
  #L1ec218.  call `close`(v9) @signature `Lkotlinx/coroutines/internal/m;.close:()V` @kind virtual;
  #L1ec21e.  if v0 == 0 then goto L1ec230;
  #L1ec222.  call temp:= `findTask`(v0, v2) @signature `Lkotlinx/coroutines/d2/a$b;.findTask:(Z)Lkotlinx/coroutines/d2/i;` @kind virtual;
  #L1ec228.  v9:= temp @kind object;
  #L1ec22a.  if v9 == 0 then goto L1ec230;
  #L1ec22e.  goto L1ec240;
  #L1ec230.  v9:= v8.`kotlinx.coroutines.d2.a.f` @type ^`kotlinx.coroutines.d2.e` @kind object;
  #L1ec234.  call temp:= `removeFirstOrNull`(v9) @signature `Lkotlinx/coroutines/internal/m;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L1ec23a.  v9:= temp @kind object;
  #L1ec23c.  v9:= (`kotlinx.coroutines.d2.i`) v9 @kind object;
  #L1ec240.  if v9 == 0 then goto L1ec246;
  #L1ec244.  goto L1ec256;
  #L1ec246.  v9:= v8.`kotlinx.coroutines.d2.a.g` @type ^`kotlinx.coroutines.d2.e` @kind object;
  #L1ec24a.  call temp:= `removeFirstOrNull`(v9) @signature `Lkotlinx/coroutines/internal/m;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L1ec250.  v9:= temp @kind object;
  #L1ec252.  v9:= (`kotlinx.coroutines.d2.i`) v9 @kind object;
  #L1ec256.  if v9 == 0 then goto L1ec262;
  #L1ec25a.  call `runSafely`(v8, v9) @signature `Lkotlinx/coroutines/d2/a;.runSafely:(Lkotlinx/coroutines/d2/i;)V` @kind virtual;
  #L1ec260.  goto L1ec21e;
  #L1ec262.  if v0 == 0 then goto L1ec270;
  #L1ec266.  v9:= `@@kotlinx.coroutines.d2.a$c.j` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1ec26a.  call temp:= `tryReleaseCpu$kotlinx_coroutines_core`(v0, v9) @signature `Lkotlinx/coroutines/d2/a$b;.tryReleaseCpu$kotlinx_coroutines_core:(Lkotlinx/coroutines/d2/a$c;)Z` @kind virtual;
  #L1ec270.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1ec276.  v9:= temp;
  #L1ec278.  if v9 == 0 then goto L1ec2b0;
  #L1ec27c.  v9:= v8.`kotlinx.coroutines.d2.a.controlState` @type ^`long` @kind wide;
  #L1ec280.  v3:= 9223367638808264704L;
  #L1ec28a.  v9:= v9 ^& v3 @kind long;
  #L1ec28c.  v0:= 42I;
  #L1ec290.  v9:= v9 ^> v0 @kind long;
  #L1ec292.  v10:= (`int`) v9 @kind l2i;
  #L1ec294.  v9:= v8.`kotlinx.coroutines.d2.a.i` @type ^`int`;
  #L1ec298.  if v10 != v9 then goto L1ec29e;
  #L1ec29c.  v1:= 1I;
  #L1ec29e.  if v1 == 0 then goto L1ec2a4;
  #L1ec2a2.  goto L1ec2b0;
  #L1ec2a4.  v9:= new `java.lang.AssertionError`;
  #L1ec2a8.  call `<init>`(v9) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1ec2ae.  throw v9;
  #L1ec2b0.  v9:= 0L;
  #L1ec2b4.  v8.`kotlinx.coroutines.d2.a.parkedWorkersStack` @type ^`long` := v9 @kind wide;
  #L1ec2b8.  v8.`kotlinx.coroutines.d2.a.controlState` @type ^`long` := v9 @kind wide;
  #L1ec2bc.  return @kind void;
  #L1ec2be.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ec2c0.  @monitorexit v3
  #L1ec2c2.  throw v9;
  catch `java.lang.Throwable` @[L1ec178..L1ec17c] goto L1ec2be;
}
procedure `void` `signalCpuWork$kotlinx_coroutines_core`(`kotlinx.coroutines.d2.a` v4 @kind this) @signature `Lkotlinx/coroutines/d2/a;.signalCpuWork$kotlinx_coroutines_core:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ec32c.  call temp:= `e`(v4) @signature `Lkotlinx/coroutines/d2/a;.e:()Z` @kind direct;
  #L1ec332.  v0:= temp;
  #L1ec334.  if v0 == 0 then goto L1ec33a;
  #L1ec338.  return @kind void;
  #L1ec33a.  v0:= 0L;
  #L1ec33e.  v2:= 1I;
  #L1ec340.  v3:= 0I;
  #L1ec342.  call temp:= `a`(v4, v0, v2, v3) @signature `Lkotlinx/coroutines/d2/a;.a:(Lkotlinx/coroutines/d2/a;JILjava/lang/Object;)Z` @kind static;
  #L1ec348.  v0:= temp;
  #L1ec34a.  if v0 == 0 then goto L1ec350;
  #L1ec34e.  return @kind void;
  #L1ec350.  call temp:= `e`(v4) @signature `Lkotlinx/coroutines/d2/a;.e:()Z` @kind direct;
  #L1ec356.  return @kind void;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.d2.a` v12 @kind this) @signature `Lkotlinx/coroutines/d2/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1eb87c.  v0:= new `java.util.ArrayList`;
  #L1eb880.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1eb886.  v1:= v12.`kotlinx.coroutines.d2.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1eb88a.  call temp:= `length`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L1eb890.  v1:= temp;
  #L1eb892.  v2:= 0I;
  #L1eb894.  v3:= 1I;
  #L1eb896.  v2:= 1I;
  #L1eb898.  v4:= 0I;
  #L1eb89a.  v5:= 0I;
  #L1eb89c.  v6:= 0I;
  #L1eb89e.  v7:= 0I;
  #L1eb8a0.  v8:= 0I;
  #L1eb8a2.  if v2 >= v1 then goto L1eb9b0;
  #L1eb8a6.  v9:= v12.`kotlinx.coroutines.d2.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1eb8aa.  call temp:= `get`(v9, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1eb8b0.  v9:= temp @kind object;
  #L1eb8b2.  v9:= (`kotlinx.coroutines.d2.a$b`) v9 @kind object;
  #L1eb8b6.  if v9 == 0 then goto L1eb9a8;
  #L1eb8ba.  v10:= v9.`kotlinx.coroutines.d2.a$b.f` @type ^`kotlinx.coroutines.d2.n` @kind object;
  #L1eb8be.  call temp:= `getSize$kotlinx_coroutines_core`(v10) @signature `Lkotlinx/coroutines/d2/n;.getSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L1eb8c4.  v10:= temp;
  #L1eb8c6.  v9:= v9.`kotlinx.coroutines.d2.a$b.g` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb8ca.  v11:= `@@kotlinx.coroutines.d2.b.a` @type ^`int`[] @kind object;
  #L1eb8ce.  call temp:= `ordinal`(v9) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1eb8d4.  v9:= temp;
  #L1eb8d6.  v9:= v11[v9];
  #L1eb8da.  if v9 == v3 then goto L1eb9a4;
  #L1eb8de.  v11:= 2I;
  #L1eb8e0.  if v9 == v11 then goto L1eb96e;
  #L1eb8e4.  v11:= 3I;
  #L1eb8e6.  if v9 == v11 then goto L1eb938;
  #L1eb8ea.  v11:= 4I;
  #L1eb8ec.  if v9 == v11 then goto L1eb8fe;
  #L1eb8f0.  v10:= 5I;
  #L1eb8f2.  if v9 == v10 then goto L1eb8f8;
  #L1eb8f6.  goto L1eb9a8;
  #L1eb8f8.  v8:= v8 + 1;
  #L1eb8fc.  goto L1eb9a8;
  #L1eb8fe.  v7:= v7 + 1;
  #L1eb902.  if v10 <= 0 then goto L1eb9a8;
  #L1eb906.  v9:= new `java.lang.StringBuilder`;
  #L1eb90a.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1eb910.  call temp:= `valueOf`(v10) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L1eb916.  v10:= temp @kind object;
  #L1eb918.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eb91e.  v10:= "d" @kind object;
  #L1eb922.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eb928.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1eb92e.  v9:= temp @kind object;
  #L1eb930.  call temp:= `add`(v0, v9) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1eb936.  goto L1eb9a8;
  #L1eb938.  v4:= v4 + 1;
  #L1eb93c.  v9:= new `java.lang.StringBuilder`;
  #L1eb940.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1eb946.  call temp:= `valueOf`(v10) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L1eb94c.  v10:= temp @kind object;
  #L1eb94e.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eb954.  v10:= "c" @kind object;
  #L1eb958.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eb95e.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1eb964.  v9:= temp @kind object;
  #L1eb966.  call temp:= `add`(v0, v9) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1eb96c.  goto L1eb9a8;
  #L1eb96e.  v5:= v5 + 1;
  #L1eb972.  v9:= new `java.lang.StringBuilder`;
  #L1eb976.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1eb97c.  call temp:= `valueOf`(v10) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L1eb982.  v10:= temp @kind object;
  #L1eb984.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eb98a.  v10:= "b" @kind object;
  #L1eb98e.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eb994.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1eb99a.  v9:= temp @kind object;
  #L1eb99c.  call temp:= `add`(v0, v9) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1eb9a2.  goto L1eb9a8;
  #L1eb9a4.  v6:= v6 + 1;
  #L1eb9a8.  v2:= v2 + 1;
  #L1eb9ac.  goto L1eb8a2;
  #L1eb9b0.  v1:= v12.`kotlinx.coroutines.d2.a.controlState` @type ^`long` @kind wide;
  #L1eb9b4.  v3:= new `java.lang.StringBuilder`;
  #L1eb9b8.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1eb9be.  v9:= v12.`kotlinx.coroutines.d2.a.l` @type ^`java.lang.String` @kind object;
  #L1eb9c2.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eb9c8.  v9:= 64I;
  #L1eb9cc.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eb9d2.  call temp:= `getHexAddress`(v12) @signature `Lkotlinx/coroutines/i0;.getHexAddress:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1eb9d8.  v9:= temp @kind object;
  #L1eb9da.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eb9e0.  v9:= 91I;
  #L1eb9e4.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eb9ea.  v9:= "Pool Size {" @kind object;
  #L1eb9ee.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eb9f4.  v9:= "core = " @kind object;
  #L1eb9f8.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eb9fe.  v9:= v12.`kotlinx.coroutines.d2.a.i` @type ^`int`;
  #L1eba02.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba08.  v9:= ", " @kind object;
  #L1eba0c.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba12.  v10:= "max = " @kind object;
  #L1eba16.  call temp:= `append`(v3, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba1c.  v10:= v12.`kotlinx.coroutines.d2.a.j` @type ^`int`;
  #L1eba20.  call temp:= `append`(v3, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba26.  v10:= "}, " @kind object;
  #L1eba2a.  call temp:= `append`(v3, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba30.  v11:= "Worker States {" @kind object;
  #L1eba34.  call temp:= `append`(v3, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba3a.  v11:= "CPU = " @kind object;
  #L1eba3e.  call temp:= `append`(v3, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba44.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba4a.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba50.  v4:= "blocking = " @kind object;
  #L1eba54.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba5a.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba60.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba66.  v4:= "parked = " @kind object;
  #L1eba6a.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba70.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba76.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba7c.  v4:= "dormant = " @kind object;
  #L1eba80.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba86.  call temp:= `append`(v3, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba8c.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba92.  v4:= "terminated = " @kind object;
  #L1eba96.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eba9c.  call temp:= `append`(v3, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebaa2.  call temp:= `append`(v3, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebaa8.  v4:= "running workers queues = " @kind object;
  #L1ebaac.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebab2.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebab8.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebabe.  v0:= "global CPU queue size = " @kind object;
  #L1ebac2.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebac8.  v0:= v12.`kotlinx.coroutines.d2.a.f` @type ^`kotlinx.coroutines.d2.e` @kind object;
  #L1ebacc.  call temp:= `getSize`(v0) @signature `Lkotlinx/coroutines/internal/m;.getSize:()I` @kind virtual;
  #L1ebad2.  v0:= temp;
  #L1ebad4.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebada.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebae0.  v0:= "global blocking queue size = " @kind object;
  #L1ebae4.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebaea.  v0:= v12.`kotlinx.coroutines.d2.a.g` @type ^`kotlinx.coroutines.d2.e` @kind object;
  #L1ebaee.  call temp:= `getSize`(v0) @signature `Lkotlinx/coroutines/internal/m;.getSize:()I` @kind virtual;
  #L1ebaf4.  v0:= temp;
  #L1ebaf6.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebafc.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebb02.  v0:= "Control State {" @kind object;
  #L1ebb06.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebb0c.  v0:= "created workers= " @kind object;
  #L1ebb10.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebb16.  v4:= 2097151L;
  #L1ebb1c.  v4:= v4 ^& v1 @kind long;
  #L1ebb1e.  v0:= (`int`) v4 @kind l2i;
  #L1ebb20.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebb26.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebb2c.  v0:= "blocking tasks = " @kind object;
  #L1ebb30.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebb36.  v4:= 4398044413952L;
  #L1ebb40.  v4:= v4 ^& v1 @kind long;
  #L1ebb42.  v0:= 21I;
  #L1ebb46.  v4:= v4 ^> v0 @kind long;
  #L1ebb48.  v0:= (`int`) v4 @kind l2i;
  #L1ebb4a.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebb50.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebb56.  v0:= "CPUs acquired = " @kind object;
  #L1ebb5a.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebb60.  v0:= v12.`kotlinx.coroutines.d2.a.i` @type ^`int`;
  #L1ebb64.  v4:= 9223367638808264704L;
  #L1ebb6e.  v1:= v1 ^& v4 @kind long;
  #L1ebb70.  v4:= 42I;
  #L1ebb74.  v1:= v1 ^> v4 @kind long;
  #L1ebb76.  v2:= (`int`) v1 @kind l2i;
  #L1ebb78.  v0:= v0 - v2 @kind int;
  #L1ebb7a.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebb80.  v0:= "}]" @kind object;
  #L1ebb84.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebb8a.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ebb90.  v0:= temp @kind object;
  #L1ebb92.  return v0 @kind object;
}
