record `kotlinx.coroutines.d2.f` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.w0` @kind class, `kotlinx.coroutines.d2.j` @kind interface, `java.util.concurrent.Executor` @kind interface {
  `java.util.concurrent.ConcurrentLinkedQueue` `kotlinx.coroutines.d2.f.g` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.d2.d` `kotlinx.coroutines.d2.f.h` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.d2.f.i` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.d2.f.inFlightTasks` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.String` `kotlinx.coroutines.d2.f.j` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.d2.f.k` @AccessFlag PRIVATE_FINAL;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.d2.f.l` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/d2/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1ec618.  v0:= constclass @type ^`kotlinx.coroutines.d2.f` @kind object;
  #L1ec61c.  v1:= "inFlightTasks" @kind object;
  #L1ec620.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L1ec626.  v0:= temp @kind object;
  #L1ec628.  `@@kotlinx.coroutines.d2.f.l` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L1ec62c.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.d2.f` v0 @kind this, `kotlinx.coroutines.d2.d` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lkotlinx/coroutines/d2/f;.<init>:(Lkotlinx/coroutines/d2/d;ILjava/lang/String;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1ec640.  call `<init>`(v0) @signature `Lkotlinx/coroutines/w0;.<init>:()V` @kind direct;
  #L1ec646.  v0.`kotlinx.coroutines.d2.f.h` @type ^`kotlinx.coroutines.d2.d` := v1 @kind object;
  #L1ec64a.  v0.`kotlinx.coroutines.d2.f.i` @type ^`int` := v2;
  #L1ec64e.  v0.`kotlinx.coroutines.d2.f.j` @type ^`java.lang.String` := v3 @kind object;
  #L1ec652.  v0.`kotlinx.coroutines.d2.f.k` @type ^`int` := v4;
  #L1ec656.  v1:= new `java.util.concurrent.ConcurrentLinkedQueue`;
  #L1ec65a.  call `<init>`(v1) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L1ec660.  v0.`kotlinx.coroutines.d2.f.g` @type ^`java.util.concurrent.ConcurrentLinkedQueue` := v1 @kind object;
  #L1ec664.  v1:= 0I;
  #L1ec666.  v0.`kotlinx.coroutines.d2.f.inFlightTasks` @type ^`int` := v1;
  #L1ec66a.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.d2.f` v2 @kind this, `java.lang.Runnable` v3 @kind object, `boolean` v4 ) @signature `Lkotlinx/coroutines/d2/f;.a:(Ljava/lang/Runnable;Z)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1ec6fc.  v0:= `@@kotlinx.coroutines.d2.f.l` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1ec700.  call temp:= `incrementAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L1ec706.  v0:= temp;
  #L1ec708.  v1:= v2.`kotlinx.coroutines.d2.f.i` @type ^`int`;
  #L1ec70c.  if v0 > v1 then goto L1ec71c;
  #L1ec710.  v0:= v2.`kotlinx.coroutines.d2.f.h` @type ^`kotlinx.coroutines.d2.d` @kind object;
  #L1ec714.  call `dispatchWithContext$kotlinx_coroutines_core`(v0, v3, v2, v4) @signature `Lkotlinx/coroutines/d2/d;.dispatchWithContext$kotlinx_coroutines_core:(Ljava/lang/Runnable;Lkotlinx/coroutines/d2/j;Z)V` @kind virtual;
  #L1ec71a.  return @kind void;
  #L1ec71c.  v0:= v2.`kotlinx.coroutines.d2.f.g` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L1ec720.  call temp:= `add`(v0, v3) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1ec726.  v3:= `@@kotlinx.coroutines.d2.f.l` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1ec72a.  call temp:= `decrementAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L1ec730.  v3:= temp;
  #L1ec732.  v0:= v2.`kotlinx.coroutines.d2.f.i` @type ^`int`;
  #L1ec736.  if v3 < v0 then goto L1ec73c;
  #L1ec73a.  return @kind void;
  #L1ec73c.  v3:= v2.`kotlinx.coroutines.d2.f.g` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L1ec740.  call temp:= `poll`(v3) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L1ec746.  v3:= temp @kind object;
  #L1ec748.  v3:= (`java.lang.Runnable`) v3 @kind object;
  #L1ec74c.  if v3 == 0 then goto L1ec752;
  #L1ec750.  goto L1ec6fc;
  #L1ec752.  return @kind void;
}
procedure `void` `afterTask`(`kotlinx.coroutines.d2.f` v3 @kind this) @signature `Lkotlinx/coroutines/d2/f;.afterTask:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1ec67c.  v0:= v3.`kotlinx.coroutines.d2.f.g` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L1ec680.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L1ec686.  v0:= temp @kind object;
  #L1ec688.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L1ec68c.  v1:= 1I;
  #L1ec68e.  if v0 == 0 then goto L1ec69e;
  #L1ec692.  v2:= v3.`kotlinx.coroutines.d2.f.h` @type ^`kotlinx.coroutines.d2.d` @kind object;
  #L1ec696.  call `dispatchWithContext$kotlinx_coroutines_core`(v2, v0, v3, v1) @signature `Lkotlinx/coroutines/d2/d;.dispatchWithContext$kotlinx_coroutines_core:(Ljava/lang/Runnable;Lkotlinx/coroutines/d2/j;Z)V` @kind virtual;
  #L1ec69c.  return @kind void;
  #L1ec69e.  v0:= `@@kotlinx.coroutines.d2.f.l` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1ec6a2.  call temp:= `decrementAndGet`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L1ec6a8.  v0:= v3.`kotlinx.coroutines.d2.f.g` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L1ec6ac.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L1ec6b2.  v0:= temp @kind object;
  #L1ec6b4.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L1ec6b8.  if v0 == 0 then goto L1ec6c2;
  #L1ec6bc.  call `a`(v3, v0, v1) @signature `Lkotlinx/coroutines/d2/f;.a:(Ljava/lang/Runnable;Z)V` @kind direct;
  #L1ec6c2.  return @kind void;
}
procedure `void` `close`(`kotlinx.coroutines.d2.f` v2 @kind this) @signature `Lkotlinx/coroutines/d2/f;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ec6d4.  v0:= new `java.lang.IllegalStateException`;
  #L1ec6d8.  v1:= "Close cannot be invoked on LimitingBlockingDispatcher" @kind object;
  #L1ec6dc.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ec6e2.  v1:= temp @kind object;
  #L1ec6e4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ec6ea.  throw v0;
}
procedure `void` `dispatch`(`kotlinx.coroutines.d2.f` v0 @kind this, `kotlin.t.g` v1 @kind object, `java.lang.Runnable` v2 @kind object) @signature `Lkotlinx/coroutines/d2/f;.dispatch:(Lkotlin/t/g;Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;

  #L1ec764.  v1:= 0I;
  #L1ec766.  call `a`(v0, v2, v1) @signature `Lkotlinx/coroutines/d2/f;.a:(Ljava/lang/Runnable;Z)V` @kind direct;
  #L1ec76c.  return @kind void;
}
procedure `void` `execute`(`kotlinx.coroutines.d2.f` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lkotlinx/coroutines/d2/f;.execute:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ec780.  v0:= 0I;
  #L1ec782.  call `a`(v1, v2, v0) @signature `Lkotlinx/coroutines/d2/f;.a:(Ljava/lang/Runnable;Z)V` @kind direct;
  #L1ec788.  return @kind void;
}
procedure `int` `getTaskMode`(`kotlinx.coroutines.d2.f` v1 @kind this) @signature `Lkotlinx/coroutines/d2/f;.getTaskMode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ec5a4.  v0:= v1.`kotlinx.coroutines.d2.f.k` @type ^`int`;
  #L1ec5a8.  return v0;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.d2.f` v2 @kind this) @signature `Lkotlinx/coroutines/d2/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ec5bc.  v0:= v2.`kotlinx.coroutines.d2.f.j` @type ^`java.lang.String` @kind object;
  #L1ec5c0.  if v0 == 0 then goto L1ec5c6;
  #L1ec5c4.  goto L1ec604;
  #L1ec5c6.  v0:= new `java.lang.StringBuilder`;
  #L1ec5ca.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ec5d0.  call temp:= `toString`(v2) @signature `Lkotlinx/coroutines/x;.toString:()Ljava/lang/String;` @kind super;
  #L1ec5d6.  v1:= temp @kind object;
  #L1ec5d8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ec5de.  v1:= "[dispatcher = " @kind object;
  #L1ec5e2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ec5e8.  v1:= v2.`kotlinx.coroutines.d2.f.h` @type ^`kotlinx.coroutines.d2.d` @kind object;
  #L1ec5ec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ec5f2.  v1:= 93I;
  #L1ec5f6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ec5fc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ec602.  v0:= temp @kind object;
  #L1ec604.  return v0 @kind object;
}
