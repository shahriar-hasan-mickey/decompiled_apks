record `kotlinx.coroutines.d2.n` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.d2.n.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.d2.n.blockingTasksInBuffer` @AccessFlag PRIVATE_VOLATILE;
  `int` `kotlinx.coroutines.d2.n.consumerIndex` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `kotlinx.coroutines.d2.n.lastScheduledTask` @AccessFlag PRIVATE_VOLATILE;
  `int` `kotlinx.coroutines.d2.n.producerIndex` @AccessFlag PRIVATE_VOLATILE;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.d2.n.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.d2.n.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.d2.n.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.d2.n.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/d2/n;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1ece3c.  v0:= constclass @type ^`kotlinx.coroutines.d2.n` @kind object;
  #L1ece40.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L1ece44.  v2:= "lastScheduledTask" @kind object;
  #L1ece48.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L1ece4e.  v1:= temp @kind object;
  #L1ece50.  `@@kotlinx.coroutines.d2.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v1 @kind object;
  #L1ece54.  v1:= "producerIndex" @kind object;
  #L1ece58.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L1ece5e.  v1:= temp @kind object;
  #L1ece60.  `@@kotlinx.coroutines.d2.n.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v1 @kind object;
  #L1ece64.  v1:= "consumerIndex" @kind object;
  #L1ece68.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L1ece6e.  v1:= temp @kind object;
  #L1ece70.  `@@kotlinx.coroutines.d2.n.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v1 @kind object;
  #L1ece74.  v1:= "blockingTasksInBuffer" @kind object;
  #L1ece78.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L1ece7e.  v0:= temp @kind object;
  #L1ece80.  `@@kotlinx.coroutines.d2.n.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L1ece84.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.d2.n` v2 @kind this) @signature `Lkotlinx/coroutines/d2/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1ece98.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ece9e.  v0:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L1ecea2.  v1:= 128I;
  #L1ecea6.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L1eceac.  v2.`kotlinx.coroutines.d2.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v0 @kind object;
  #L1eceb0.  v0:= 0I;
  #L1eceb2.  v2.`kotlinx.coroutines.d2.n.lastScheduledTask` @type ^`java.lang.Object` := v0 @kind object;
  #L1eceb6.  v0:= 0I;
  #L1eceb8.  v2.`kotlinx.coroutines.d2.n.producerIndex` @type ^`int` := v0;
  #L1ecebc.  v2.`kotlinx.coroutines.d2.n.consumerIndex` @type ^`int` := v0;
  #L1ecec0.  v2.`kotlinx.coroutines.d2.n.blockingTasksInBuffer` @type ^`int` := v0;
  #L1ecec4.  return @kind void;
}
procedure `long` `a`(`kotlinx.coroutines.d2.n` v7 @kind this, `kotlinx.coroutines.d2.n` v8 @kind object, `boolean` v9 ) @signature `Lkotlinx/coroutines/d2/n;.a:(Lkotlinx/coroutines/d2/n;Z)J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1ecdb4.  v0:= v8.`kotlinx.coroutines.d2.n.lastScheduledTask` @type ^`java.lang.Object` @kind object;
  #L1ecdb8.  v0:= (`kotlinx.coroutines.d2.i`) v0 @kind object;
  #L1ecdbc.  v1:= -2L;
  #L1ecdc0.  if v0 == 0 then goto L1ece28;
  #L1ecdc4.  v3:= 0I;
  #L1ecdc6.  if v9 == 0 then goto L1ecde6;
  #L1ecdca.  v4:= v0.`kotlinx.coroutines.d2.i.g` @type ^`kotlinx.coroutines.d2.j` @kind object;
  #L1ecdce.  call temp:= `getTaskMode`(v4) @signature `Lkotlinx/coroutines/d2/j;.getTaskMode:()I` @kind interface;
  #L1ecdd4.  v4:= temp;
  #L1ecdd6.  v5:= 1I;
  #L1ecdd8.  if v4 != v5 then goto L1ecdde;
  #L1ecddc.  goto L1ecde0;
  #L1ecdde.  v5:= 0I;
  #L1ecde0.  if v5 != 0 then goto L1ecde6;
  #L1ecde4.  return v1 @kind wide;
  #L1ecde6.  v1:= `@@kotlinx.coroutines.d2.l.e` @type ^`kotlinx.coroutines.d2.m` @kind object;
  #L1ecdea.  call temp:= `nanoTime`(v1) @signature `Lkotlinx/coroutines/d2/m;.nanoTime:()J` @kind virtual;
  #L1ecdf0.  v1:= temp @kind wide;
  #L1ecdf2.  v4:= v0.`kotlinx.coroutines.d2.i.f` @type ^`long` @kind wide;
  #L1ecdf6.  v1:= v1 - v4 @kind long;
  #L1ecdf8.  v4:= `@@kotlinx.coroutines.d2.l.a` @type ^`long` @kind wide;
  #L1ecdfc.  v6:= lcmp(v1, v4);
  #L1ece00.  if v6 >= 0 then goto L1ece08;
  #L1ece04.  v4:= v4 - v1 @kind long;
  #L1ece06.  return v4 @kind wide;
  #L1ece08.  v1:= `@@kotlinx.coroutines.d2.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1ece0c.  v2:= 0I;
  #L1ece0e.  call temp:= `compareAndSet`(v1, v8, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1ece14.  v1:= temp;
  #L1ece16.  if v1 == 0 then goto L1ecdb4;
  #L1ece1a.  v8:= 2I;
  #L1ece1c.  call temp:= `add$default`(v7, v0, v3, v8, v2) @signature `Lkotlinx/coroutines/d2/n;.add$default:(Lkotlinx/coroutines/d2/n;Lkotlinx/coroutines/d2/i;ZILjava/lang/Object;)Lkotlinx/coroutines/d2/i;` @kind static;
  #L1ece22.  v8:= -1L;
  #L1ece26.  return v8 @kind wide;
  #L1ece28.  return v1 @kind wide;
}
procedure `kotlinx.coroutines.d2.i` `a`(`kotlinx.coroutines.d2.n` v5 @kind this) @signature `Lkotlinx/coroutines/d2/n;.a:()Lkotlinx/coroutines/d2/i;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ecc04.  v0:= v5.`kotlinx.coroutines.d2.n.consumerIndex` @type ^`int`;
  #L1ecc08.  v1:= v5.`kotlinx.coroutines.d2.n.producerIndex` @type ^`int`;
  #L1ecc0c.  v1:= v0 - v1 @kind int;
  #L1ecc10.  v2:= 0I;
  #L1ecc12.  if v1 != 0 then goto L1ecc18;
  #L1ecc16.  return v2 @kind object;
  #L1ecc18.  v1:= v0 ^& 127;
  #L1ecc1c.  v3:= `@@kotlinx.coroutines.d2.n.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1ecc20.  v4:= v0 + 1;
  #L1ecc24.  call temp:= `compareAndSet`(v3, v5, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L1ecc2a.  v0:= temp;
  #L1ecc2c.  if v0 == 0 then goto L1ecc04;
  #L1ecc30.  v0:= v5.`kotlinx.coroutines.d2.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1ecc34.  call temp:= `getAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.getAndSet:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1ecc3a.  v0:= temp @kind object;
  #L1ecc3c.  v0:= (`kotlinx.coroutines.d2.i`) v0 @kind object;
  #L1ecc40.  if v0 == 0 then goto L1ecc04;
  #L1ecc44.  call `b`(v5, v0) @signature `Lkotlinx/coroutines/d2/n;.b:(Lkotlinx/coroutines/d2/i;)V` @kind direct;
  #L1ecc4a.  return v0 @kind object;
}
procedure `kotlinx.coroutines.d2.i` `a`(`kotlinx.coroutines.d2.n` v2 @kind this, `kotlinx.coroutines.d2.i` v3 @kind object) @signature `Lkotlinx/coroutines/d2/n;.a:(Lkotlinx/coroutines/d2/i;)Lkotlinx/coroutines/d2/i;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1ecb54.  v0:= v3.`kotlinx.coroutines.d2.i.g` @type ^`kotlinx.coroutines.d2.j` @kind object;
  #L1ecb58.  call temp:= `getTaskMode`(v0) @signature `Lkotlinx/coroutines/d2/j;.getTaskMode:()I` @kind interface;
  #L1ecb5e.  v0:= temp;
  #L1ecb60.  v1:= 1I;
  #L1ecb62.  if v0 != v1 then goto L1ecb68;
  #L1ecb66.  goto L1ecb6a;
  #L1ecb68.  v1:= 0I;
  #L1ecb6a.  if v1 == 0 then goto L1ecb78;
  #L1ecb6e.  v0:= `@@kotlinx.coroutines.d2.n.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1ecb72.  call temp:= `incrementAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L1ecb78.  call temp:= `getBufferSize$kotlinx_coroutines_core`(v2) @signature `Lkotlinx/coroutines/d2/n;.getBufferSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L1ecb7e.  v0:= temp;
  #L1ecb80.  v1:= 127I;
  #L1ecb84.  if v0 != v1 then goto L1ecb8a;
  #L1ecb88.  return v3 @kind object;
  #L1ecb8a.  v0:= v2.`kotlinx.coroutines.d2.n.producerIndex` @type ^`int`;
  #L1ecb8e.  v0:= v0 ^& v1 @kind int;
  #L1ecb90.  v1:= v2.`kotlinx.coroutines.d2.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1ecb94.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1ecb9a.  v1:= temp @kind object;
  #L1ecb9c.  if v1 == 0 then goto L1ecba8;
  #L1ecba0.  call `yield`() @signature `Ljava/lang/Thread;.yield:()V` @kind static;
  #L1ecba6.  goto L1ecb90;
  #L1ecba8.  v1:= v2.`kotlinx.coroutines.d2.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1ecbac.  call `lazySet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L1ecbb2.  v3:= `@@kotlinx.coroutines.d2.n.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1ecbb6.  call temp:= `incrementAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L1ecbbc.  v3:= 0I;
  #L1ecbbe.  return v3 @kind object;
}
procedure `boolean` `a`(`kotlinx.coroutines.d2.n` v1 @kind this, `kotlinx.coroutines.d2.e` v2 @kind object) @signature `Lkotlinx/coroutines/d2/n;.a:(Lkotlinx/coroutines/d2/e;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1eca78.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/d2/n;.a:()Lkotlinx/coroutines/d2/i;` @kind direct;
  #L1eca7e.  v0:= temp @kind object;
  #L1eca80.  if v0 == 0 then goto L1eca8e;
  #L1eca84.  call temp:= `addLast`(v2, v0) @signature `Lkotlinx/coroutines/internal/m;.addLast:(Ljava/lang/Object;)Z` @kind virtual;
  #L1eca8a.  v2:= 1I;
  #L1eca8c.  return v2;
  #L1eca8e.  v2:= 0I;
  #L1eca90.  return v2;
}
procedure `kotlinx.coroutines.d2.i` `add$default`(`kotlinx.coroutines.d2.n` v0 @kind object, `kotlinx.coroutines.d2.i` v1 @kind object, `boolean` v2 , `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/d2/n;.add$default:(Lkotlinx/coroutines/d2/n;Lkotlinx/coroutines/d2/i;ZILjava/lang/Object;)Lkotlinx/coroutines/d2/i;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1ecaf0.  v3:= v3 ^& 2;
  #L1ecaf4.  if v3 == 0 then goto L1ecafa;
  #L1ecaf8.  v2:= 0I;
  #L1ecafa.  call temp:= `add`(v0, v1, v2) @signature `Lkotlinx/coroutines/d2/n;.add:(Lkotlinx/coroutines/d2/i;Z)Lkotlinx/coroutines/d2/i;` @kind virtual;
  #L1ecb00.  v0:= temp @kind object;
  #L1ecb02.  return v0 @kind object;
}
procedure `void` `b`(`kotlinx.coroutines.d2.n` v3 @kind this, `kotlinx.coroutines.d2.i` v4 @kind object) @signature `Lkotlinx/coroutines/d2/n;.b:(Lkotlinx/coroutines/d2/i;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1eced8.  if v4 == 0 then goto L1ecf2a;
  #L1ecedc.  v4:= v4.`kotlinx.coroutines.d2.i.g` @type ^`kotlinx.coroutines.d2.j` @kind object;
  #L1ecee0.  call temp:= `getTaskMode`(v4) @signature `Lkotlinx/coroutines/d2/j;.getTaskMode:()I` @kind interface;
  #L1ecee6.  v4:= temp;
  #L1ecee8.  v0:= 0I;
  #L1eceea.  v1:= 1I;
  #L1eceec.  if v4 != v1 then goto L1ecef4;
  #L1ecef0.  v4:= 1I;
  #L1ecef2.  goto L1ecef6;
  #L1ecef4.  v4:= 0I;
  #L1ecef6.  if v4 == 0 then goto L1ecf2a;
  #L1ecefa.  v4:= `@@kotlinx.coroutines.d2.n.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1ecefe.  call temp:= `decrementAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L1ecf04.  v4:= temp;
  #L1ecf06.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1ecf0c.  v2:= temp;
  #L1ecf0e.  if v2 == 0 then goto L1ecf2a;
  #L1ecf12.  if v4 < 0 then goto L1ecf18;
  #L1ecf16.  v0:= 1I;
  #L1ecf18.  if v0 == 0 then goto L1ecf1e;
  #L1ecf1c.  goto L1ecf2a;
  #L1ecf1e.  v4:= new `java.lang.AssertionError`;
  #L1ecf22.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1ecf28.  throw v4;
  #L1ecf2a.  return @kind void;
}
procedure `kotlinx.coroutines.d2.i` `add`(`kotlinx.coroutines.d2.n` v0 @kind this, `kotlinx.coroutines.d2.i` v1 @kind object, `boolean` v2 ) @signature `Lkotlinx/coroutines/d2/n;.add:(Lkotlinx/coroutines/d2/i;Z)Lkotlinx/coroutines/d2/i;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1ecb14.  if v2 == 0 then goto L1ecb22;
  #L1ecb18.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/d2/n;.a:(Lkotlinx/coroutines/d2/i;)Lkotlinx/coroutines/d2/i;` @kind direct;
  #L1ecb1e.  v1:= temp @kind object;
  #L1ecb20.  return v1 @kind object;
  #L1ecb22.  v2:= `@@kotlinx.coroutines.d2.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1ecb26.  call temp:= `getAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1ecb2c.  v1:= temp @kind object;
  #L1ecb2e.  v1:= (`kotlinx.coroutines.d2.i`) v1 @kind object;
  #L1ecb32.  if v1 == 0 then goto L1ecb40;
  #L1ecb36.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/d2/n;.a:(Lkotlinx/coroutines/d2/i;)Lkotlinx/coroutines/d2/i;` @kind direct;
  #L1ecb3c.  v1:= temp @kind object;
  #L1ecb3e.  return v1 @kind object;
  #L1ecb40.  v1:= 0I;
  #L1ecb42.  return v1 @kind object;
}
procedure `int` `getBufferSize$kotlinx_coroutines_core`(`kotlinx.coroutines.d2.n` v2 @kind this) @signature `Lkotlinx/coroutines/d2/n;.getBufferSize$kotlinx_coroutines_core:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1ecaa4.  v0:= v2.`kotlinx.coroutines.d2.n.producerIndex` @type ^`int`;
  #L1ecaa8.  v1:= v2.`kotlinx.coroutines.d2.n.consumerIndex` @type ^`int`;
  #L1ecaac.  v0:= v0 - v1 @kind int;
  #L1ecaae.  return v0;
}
procedure `int` `getSize$kotlinx_coroutines_core`(`kotlinx.coroutines.d2.n` v1 @kind this) @signature `Lkotlinx/coroutines/d2/n;.getSize$kotlinx_coroutines_core:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ecac0.  v0:= v1.`kotlinx.coroutines.d2.n.lastScheduledTask` @type ^`java.lang.Object` @kind object;
  #L1ecac4.  if v0 == 0 then goto L1ecad6;
  #L1ecac8.  call temp:= `getBufferSize$kotlinx_coroutines_core`(v1) @signature `Lkotlinx/coroutines/d2/n;.getBufferSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L1ecace.  v0:= temp;
  #L1ecad0.  v0:= v0 + 1;
  #L1ecad4.  goto L1ecade;
  #L1ecad6.  call temp:= `getBufferSize$kotlinx_coroutines_core`(v1) @signature `Lkotlinx/coroutines/d2/n;.getBufferSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L1ecadc.  v0:= temp;
  #L1ecade.  return v0;
}
procedure `void` `offloadAllWorkTo`(`kotlinx.coroutines.d2.n` v2 @kind this, `kotlinx.coroutines.d2.e` v3 @kind object) @signature `Lkotlinx/coroutines/d2/n;.offloadAllWorkTo:(Lkotlinx/coroutines/d2/e;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1ecf3c.  v0:= `@@kotlinx.coroutines.d2.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1ecf40.  v1:= 0I;
  #L1ecf42.  call temp:= `getAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1ecf48.  v0:= temp @kind object;
  #L1ecf4a.  v0:= (`kotlinx.coroutines.d2.i`) v0 @kind object;
  #L1ecf4e.  if v0 == 0 then goto L1ecf58;
  #L1ecf52.  call temp:= `addLast`(v3, v0) @signature `Lkotlinx/coroutines/internal/m;.addLast:(Ljava/lang/Object;)Z` @kind virtual;
  #L1ecf58.  call temp:= `a`(v2, v3) @signature `Lkotlinx/coroutines/d2/n;.a:(Lkotlinx/coroutines/d2/e;)Z` @kind direct;
  #L1ecf5e.  v0:= temp;
  #L1ecf60.  if v0 == 0 then goto L1ecf66;
  #L1ecf64.  goto L1ecf58;
  #L1ecf66.  return @kind void;
}
procedure `kotlinx.coroutines.d2.i` `poll`(`kotlinx.coroutines.d2.n` v2 @kind this) @signature `Lkotlinx/coroutines/d2/n;.poll:()Lkotlinx/coroutines/d2/i;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1ecbd0.  v0:= `@@kotlinx.coroutines.d2.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1ecbd4.  v1:= 0I;
  #L1ecbd6.  call temp:= `getAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1ecbdc.  v0:= temp @kind object;
  #L1ecbde.  v0:= (`kotlinx.coroutines.d2.i`) v0 @kind object;
  #L1ecbe2.  if v0 == 0 then goto L1ecbe8;
  #L1ecbe6.  goto L1ecbf0;
  #L1ecbe8.  call temp:= `a`(v2) @signature `Lkotlinx/coroutines/d2/n;.a:()Lkotlinx/coroutines/d2/i;` @kind direct;
  #L1ecbee.  v0:= temp @kind object;
  #L1ecbf0.  return v0 @kind object;
}
procedure `long` `tryStealBlockingFrom`(`kotlinx.coroutines.d2.n` v8 @kind this, `kotlinx.coroutines.d2.n` v9 @kind object) @signature `Lkotlinx/coroutines/d2/n;.tryStealBlockingFrom:(Lkotlinx/coroutines/d2/n;)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1ecc5c.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1ecc62.  v0:= temp;
  #L1ecc64.  v1:= 0I;
  #L1ecc66.  v2:= 1I;
  #L1ecc68.  if v0 == 0 then goto L1ecc90;
  #L1ecc6c.  call temp:= `getBufferSize$kotlinx_coroutines_core`(v8) @signature `Lkotlinx/coroutines/d2/n;.getBufferSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L1ecc72.  v0:= temp;
  #L1ecc74.  if v0 != 0 then goto L1ecc7c;
  #L1ecc78.  v0:= 1I;
  #L1ecc7a.  goto L1ecc7e;
  #L1ecc7c.  v0:= 0I;
  #L1ecc7e.  if v0 == 0 then goto L1ecc84;
  #L1ecc82.  goto L1ecc90;
  #L1ecc84.  v9:= new `java.lang.AssertionError`;
  #L1ecc88.  call `<init>`(v9) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1ecc8e.  throw v9;
  #L1ecc90.  v0:= v9.`kotlinx.coroutines.d2.n.consumerIndex` @type ^`int`;
  #L1ecc94.  v3:= v9.`kotlinx.coroutines.d2.n.producerIndex` @type ^`int`;
  #L1ecc98.  v4:= v9.`kotlinx.coroutines.d2.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1ecc9c.  if v0 == v3 then goto L1ecd04;
  #L1ecca0.  v5:= v0 ^& 127;
  #L1ecca4.  v6:= v9.`kotlinx.coroutines.d2.n.blockingTasksInBuffer` @type ^`int`;
  #L1ecca8.  if v6 != 0 then goto L1eccae;
  #L1eccac.  goto L1ecd04;
  #L1eccae.  call temp:= `get`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1eccb4.  v6:= temp @kind object;
  #L1eccb6.  v6:= (`kotlinx.coroutines.d2.i`) v6 @kind object;
  #L1eccba.  if v6 == 0 then goto L1eccfe;
  #L1eccbe.  v7:= v6.`kotlinx.coroutines.d2.i.g` @type ^`kotlinx.coroutines.d2.j` @kind object;
  #L1eccc2.  call temp:= `getTaskMode`(v7) @signature `Lkotlinx/coroutines/d2/j;.getTaskMode:()I` @kind interface;
  #L1eccc8.  v7:= temp;
  #L1eccca.  if v7 != v2 then goto L1eccd2;
  #L1eccce.  v7:= 1I;
  #L1eccd0.  goto L1eccd4;
  #L1eccd2.  v7:= 0I;
  #L1eccd4.  if v7 == 0 then goto L1eccfe;
  #L1eccd8.  v7:= 0I;
  #L1eccda.  call temp:= `compareAndSet`(v4, v5, v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1ecce0.  v5:= temp;
  #L1ecce2.  if v5 == 0 then goto L1eccfe;
  #L1ecce6.  v0:= `@@kotlinx.coroutines.d2.n.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1eccea.  call temp:= `decrementAndGet`(v0, v9) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L1eccf0.  v9:= 2I;
  #L1eccf2.  call temp:= `add$default`(v8, v6, v1, v9, v7) @signature `Lkotlinx/coroutines/d2/n;.add$default:(Lkotlinx/coroutines/d2/n;Lkotlinx/coroutines/d2/i;ZILjava/lang/Object;)Lkotlinx/coroutines/d2/i;` @kind static;
  #L1eccf8.  v0:= -1L;
  #L1eccfc.  return v0 @kind wide;
  #L1eccfe.  v0:= v0 + 1;
  #L1ecd02.  goto L1ecc9c;
  #L1ecd04.  call temp:= `a`(v8, v9, v2) @signature `Lkotlinx/coroutines/d2/n;.a:(Lkotlinx/coroutines/d2/n;Z)J` @kind direct;
  #L1ecd0a.  v0:= temp @kind wide;
  #L1ecd0c.  return v0 @kind wide;
}
procedure `long` `tryStealFrom`(`kotlinx.coroutines.d2.n` v4 @kind this, `kotlinx.coroutines.d2.n` v5 @kind object) @signature `Lkotlinx/coroutines/d2/n;.tryStealFrom:(Lkotlinx/coroutines/d2/n;)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ecd20.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1ecd26.  v0:= temp;
  #L1ecd28.  v1:= 1I;
  #L1ecd2a.  v2:= 0I;
  #L1ecd2c.  if v0 == 0 then goto L1ecd54;
  #L1ecd30.  call temp:= `getBufferSize$kotlinx_coroutines_core`(v4) @signature `Lkotlinx/coroutines/d2/n;.getBufferSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L1ecd36.  v0:= temp;
  #L1ecd38.  if v0 != 0 then goto L1ecd40;
  #L1ecd3c.  v0:= 1I;
  #L1ecd3e.  goto L1ecd42;
  #L1ecd40.  v0:= 0I;
  #L1ecd42.  if v0 == 0 then goto L1ecd48;
  #L1ecd46.  goto L1ecd54;
  #L1ecd48.  v5:= new `java.lang.AssertionError`;
  #L1ecd4c.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1ecd52.  throw v5;
  #L1ecd54.  call temp:= `a`(v5) @signature `Lkotlinx/coroutines/d2/n;.a:()Lkotlinx/coroutines/d2/i;` @kind direct;
  #L1ecd5a.  v0:= temp @kind object;
  #L1ecd5c.  if v0 == 0 then goto L1ecd98;
  #L1ecd60.  v5:= 2I;
  #L1ecd62.  v3:= 0I;
  #L1ecd64.  call temp:= `add$default`(v4, v0, v2, v5, v3) @signature `Lkotlinx/coroutines/d2/n;.add$default:(Lkotlinx/coroutines/d2/n;Lkotlinx/coroutines/d2/i;ZILjava/lang/Object;)Lkotlinx/coroutines/d2/i;` @kind static;
  #L1ecd6a.  v5:= temp @kind object;
  #L1ecd6c.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1ecd72.  v0:= temp;
  #L1ecd74.  if v0 == 0 then goto L1ecd92;
  #L1ecd78.  if v5 != 0 then goto L1ecd7e;
  #L1ecd7c.  goto L1ecd80;
  #L1ecd7e.  v1:= 0I;
  #L1ecd80.  if v1 == 0 then goto L1ecd86;
  #L1ecd84.  goto L1ecd92;
  #L1ecd86.  v5:= new `java.lang.AssertionError`;
  #L1ecd8a.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1ecd90.  throw v5;
  #L1ecd92.  v0:= -1L;
  #L1ecd96.  return v0 @kind wide;
  #L1ecd98.  call temp:= `a`(v4, v5, v2) @signature `Lkotlinx/coroutines/d2/n;.a:(Lkotlinx/coroutines/d2/n;Z)J` @kind direct;
  #L1ecd9e.  v0:= temp @kind wide;
  #L1ecda0.  return v0 @kind wide;
}
