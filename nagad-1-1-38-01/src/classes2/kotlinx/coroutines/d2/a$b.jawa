record `kotlinx.coroutines.d2.a$b` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Thread` @kind class {
  `kotlinx.coroutines.d2.n` `kotlinx.coroutines.d2.a$b.f` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.d2.a$c` `kotlinx.coroutines.d2.a$b.g` @AccessFlag PUBLIC;
  `long` `kotlinx.coroutines.d2.a$b.h` @AccessFlag PRIVATE;
  `long` `kotlinx.coroutines.d2.a$b.i` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.d2.a$b.indexInArray` @AccessFlag PRIVATE_VOLATILE;
  `int` `kotlinx.coroutines.d2.a$b.j` @AccessFlag PRIVATE;
  `boolean` `kotlinx.coroutines.d2.a$b.k` @AccessFlag PUBLIC;
  `kotlinx.coroutines.d2.a` `kotlinx.coroutines.d2.a$b.l` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.d2.a$b.nextParkedWorker` @AccessFlag PRIVATE_VOLATILE;
  `int` `kotlinx.coroutines.d2.a$b.workerCtl` @AccessFlag VOLATILE;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.d2.a$b.m` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/d2/a$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1eafcc.  v0:= constclass @type ^`kotlinx.coroutines.d2.a$b` @kind object;
  #L1eafd0.  v1:= "workerCtl" @kind object;
  #L1eafd4.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L1eafda.  v0:= temp @kind object;
  #L1eafdc.  `@@kotlinx.coroutines.d2.a$b.m` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L1eafe0.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.d2.a$b` v0 @kind this, `kotlinx.coroutines.d2.a` v1 @kind object) @signature `Lkotlinx/coroutines/d2/a$b;.<init>:(Lkotlinx/coroutines/d2/a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1eaff4.  v0.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` := v1 @kind object;
  #L1eaff8.  call `<init>`(v0) @signature `Ljava/lang/Thread;.<init>:()V` @kind direct;
  #L1eaffe.  v1:= 1I;
  #L1eb000.  call `setDaemon`(v0, v1) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L1eb006.  v1:= new `kotlinx.coroutines.d2.n`;
  #L1eb00a.  call `<init>`(v1) @signature `Lkotlinx/coroutines/d2/n;.<init>:()V` @kind direct;
  #L1eb010.  v0.`kotlinx.coroutines.d2.a$b.f` @type ^`kotlinx.coroutines.d2.n` := v1 @kind object;
  #L1eb014.  v1:= `@@kotlinx.coroutines.d2.a$c.i` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb018.  v0.`kotlinx.coroutines.d2.a$b.g` @type ^`kotlinx.coroutines.d2.a$c` := v1 @kind object;
  #L1eb01c.  v1:= 0I;
  #L1eb01e.  v0.`kotlinx.coroutines.d2.a$b.workerCtl` @type ^`int` := v1;
  #L1eb022.  v1:= `@@kotlinx.coroutines.d2.a.p` @type ^`kotlinx.coroutines.internal.v` @kind object;
  #L1eb026.  v0.`kotlinx.coroutines.d2.a$b.nextParkedWorker` @type ^`java.lang.Object` := v1 @kind object;
  #L1eb02a.  v1:= `@@kotlin.w.c.b` @type ^`kotlin.w.c$a` @kind object;
  #L1eb02e.  call temp:= `nextInt`(v1) @signature `Lkotlin/w/c$a;.nextInt:()I` @kind virtual;
  #L1eb034.  v1:= temp;
  #L1eb036.  v0.`kotlinx.coroutines.d2.a$b.j` @type ^`int` := v1;
  #L1eb03a.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.d2.a$b` v0 @kind this, `kotlinx.coroutines.d2.a` v1 @kind object, `int` v2 ) @signature `Lkotlinx/coroutines/d2/a$b;.<init>:(Lkotlinx/coroutines/d2/a;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1eb04c.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/d2/a$b;.<init>:(Lkotlinx/coroutines/d2/a;)V` @kind direct;
  #L1eb052.  call `setIndexInArray`(v0, v2) @signature `Lkotlinx/coroutines/d2/a$b;.setIndexInArray:(I)V` @kind virtual;
  #L1eb058.  return @kind void;
}
procedure `kotlinx.coroutines.d2.i` `a`(`kotlinx.coroutines.d2.a$b` v2 @kind this, `boolean` v3 ) @signature `Lkotlinx/coroutines/d2/a$b;.a:(Z)Lkotlinx/coroutines/d2/i;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1ead0c.  v0:= 0I;
  #L1ead0e.  if v3 == 0 then goto L1ead66;
  #L1ead12.  v3:= v2.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1ead16.  v3:= v3.`kotlinx.coroutines.d2.a.i` @type ^`int`;
  #L1ead1a.  v3:= v3 * 2;
  #L1ead1e.  call temp:= `nextInt$kotlinx_coroutines_core`(v2, v3) @signature `Lkotlinx/coroutines/d2/a$b;.nextInt$kotlinx_coroutines_core:(I)I` @kind virtual;
  #L1ead24.  v3:= temp;
  #L1ead26.  if v3 != 0 then goto L1ead2e;
  #L1ead2a.  v3:= 1I;
  #L1ead2c.  goto L1ead30;
  #L1ead2e.  v3:= 0I;
  #L1ead30.  if v3 == 0 then goto L1ead42;
  #L1ead34.  call temp:= `c`(v2) @signature `Lkotlinx/coroutines/d2/a$b;.c:()Lkotlinx/coroutines/d2/i;` @kind direct;
  #L1ead3a.  v1:= temp @kind object;
  #L1ead3c.  if v1 == 0 then goto L1ead42;
  #L1ead40.  return v1 @kind object;
  #L1ead42.  v1:= v2.`kotlinx.coroutines.d2.a$b.f` @type ^`kotlinx.coroutines.d2.n` @kind object;
  #L1ead46.  call temp:= `poll`(v1) @signature `Lkotlinx/coroutines/d2/n;.poll:()Lkotlinx/coroutines/d2/i;` @kind virtual;
  #L1ead4c.  v1:= temp @kind object;
  #L1ead4e.  if v1 == 0 then goto L1ead54;
  #L1ead52.  return v1 @kind object;
  #L1ead54.  if v3 != 0 then goto L1ead74;
  #L1ead58.  call temp:= `c`(v2) @signature `Lkotlinx/coroutines/d2/a$b;.c:()Lkotlinx/coroutines/d2/i;` @kind direct;
  #L1ead5e.  v3:= temp @kind object;
  #L1ead60.  if v3 == 0 then goto L1ead74;
  #L1ead64.  return v3 @kind object;
  #L1ead66.  call temp:= `c`(v2) @signature `Lkotlinx/coroutines/d2/a$b;.c:()Lkotlinx/coroutines/d2/i;` @kind direct;
  #L1ead6c.  v3:= temp @kind object;
  #L1ead6e.  if v3 == 0 then goto L1ead74;
  #L1ead72.  return v3 @kind object;
  #L1ead74.  call temp:= `b`(v2, v0) @signature `Lkotlinx/coroutines/d2/a$b;.b:(Z)Lkotlinx/coroutines/d2/i;` @kind direct;
  #L1ead7a.  v3:= temp @kind object;
  #L1ead7c.  return v3 @kind object;
}
procedure `void` `a`(`kotlinx.coroutines.d2.a$b` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/d2/a$b;.a:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1eb06c.  if v4 != 0 then goto L1eb072;
  #L1eb070.  return @kind void;
  #L1eb072.  v4:= v3.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb076.  v0:= `@@kotlinx.coroutines.d2.a.n` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1eb07a.  v1:= -2097152L;
  #L1eb080.  call temp:= `addAndGet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.addAndGet:(Ljava/lang/Object;J)J` @kind virtual;
  #L1eb086.  v4:= v3.`kotlinx.coroutines.d2.a$b.g` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb08a.  v0:= `@@kotlinx.coroutines.d2.a$c.j` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb08e.  if v4 == v0 then goto L1eb0c6;
  #L1eb092.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1eb098.  v0:= temp;
  #L1eb09a.  if v0 == 0 then goto L1eb0be;
  #L1eb09e.  v0:= `@@kotlinx.coroutines.d2.a$c.g` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb0a2.  if v4 != v0 then goto L1eb0aa;
  #L1eb0a6.  v4:= 1I;
  #L1eb0a8.  goto L1eb0ac;
  #L1eb0aa.  v4:= 0I;
  #L1eb0ac.  if v4 == 0 then goto L1eb0b2;
  #L1eb0b0.  goto L1eb0be;
  #L1eb0b2.  v4:= new `java.lang.AssertionError`;
  #L1eb0b6.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1eb0bc.  throw v4;
  #L1eb0be.  v4:= `@@kotlinx.coroutines.d2.a$c.i` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb0c2.  v3.`kotlinx.coroutines.d2.a$b.g` @type ^`kotlinx.coroutines.d2.a$c` := v4 @kind object;
  #L1eb0c6.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.d2.a$b` v2 @kind this, `kotlinx.coroutines.d2.i` v3 @kind object) @signature `Lkotlinx/coroutines/d2/a$b;.a:(Lkotlinx/coroutines/d2/i;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1eb10c.  v0:= v3.`kotlinx.coroutines.d2.i.g` @type ^`kotlinx.coroutines.d2.j` @kind object;
  #L1eb110.  call temp:= `getTaskMode`(v0) @signature `Lkotlinx/coroutines/d2/j;.getTaskMode:()I` @kind interface;
  #L1eb116.  v0:= temp;
  #L1eb118.  call `c`(v2, v0) @signature `Lkotlinx/coroutines/d2/a$b;.c:(I)V` @kind direct;
  #L1eb11e.  call `b`(v2, v0) @signature `Lkotlinx/coroutines/d2/a$b;.b:(I)V` @kind direct;
  #L1eb124.  v1:= v2.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb128.  call `runSafely`(v1, v3) @signature `Lkotlinx/coroutines/d2/a;.runSafely:(Lkotlinx/coroutines/d2/i;)V` @kind virtual;
  #L1eb12e.  call `a`(v2, v0) @signature `Lkotlinx/coroutines/d2/a$b;.a:(I)V` @kind direct;
  #L1eb134.  return @kind void;
}
procedure `boolean` `a`(`kotlinx.coroutines.d2.a$b` v2 @kind this) @signature `Lkotlinx/coroutines/d2/a$b;.a:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1eabac.  v0:= v2.`kotlinx.coroutines.d2.a$b.nextParkedWorker` @type ^`java.lang.Object` @kind object;
  #L1eabb0.  v1:= `@@kotlinx.coroutines.d2.a.p` @type ^`kotlinx.coroutines.internal.v` @kind object;
  #L1eabb4.  if v0 == v1 then goto L1eabbc;
  #L1eabb8.  v0:= 1I;
  #L1eabba.  goto L1eabbe;
  #L1eabbc.  v0:= 0I;
  #L1eabbe.  return v0;
}
procedure `kotlinx.coroutines.d2.i` `b`(`kotlinx.coroutines.d2.a$b` v18 @kind this, `boolean` v19 ) @signature `Lkotlinx/coroutines/d2/a$b;.b:(Z)Lkotlinx/coroutines/d2/i;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L1eae88.  v0:= v18 @kind object;
  #L1eae8c.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1eae92.  v1:= temp;
  #L1eae94.  v2:= 0I;
  #L1eae96.  v3:= 1I;
  #L1eae98.  if v1 == 0 then goto L1eaec4;
  #L1eae9c.  v1:= v0.`kotlinx.coroutines.d2.a$b.f` @type ^`kotlinx.coroutines.d2.n` @kind object;
  #L1eaea0.  call temp:= `getSize$kotlinx_coroutines_core`(v1) @signature `Lkotlinx/coroutines/d2/n;.getSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L1eaea6.  v1:= temp;
  #L1eaea8.  if v1 != 0 then goto L1eaeb0;
  #L1eaeac.  v1:= 1I;
  #L1eaeae.  goto L1eaeb2;
  #L1eaeb0.  v1:= 0I;
  #L1eaeb2.  if v1 == 0 then goto L1eaeb8;
  #L1eaeb6.  goto L1eaec4;
  #L1eaeb8.  v1:= new `java.lang.AssertionError`;
  #L1eaebc.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1eaec2.  throw v1;
  #L1eaec4.  v1:= v0.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eaec8.  call temp:= `access$getCreatedWorkers$p`(v1) @signature `Lkotlinx/coroutines/d2/a;.access$getCreatedWorkers$p:(Lkotlinx/coroutines/d2/a;)I` @kind static;
  #L1eaece.  v1:= temp;
  #L1eaed0.  v4:= 2I;
  #L1eaed2.  v5:= 0I;
  #L1eaed4.  if v1 >= v4 then goto L1eaeda;
  #L1eaed8.  return v5 @kind object;
  #L1eaeda.  call temp:= `nextInt$kotlinx_coroutines_core`(v0, v1) @signature `Lkotlinx/coroutines/d2/a$b;.nextInt$kotlinx_coroutines_core:(I)I` @kind virtual;
  #L1eaee0.  v4:= temp;
  #L1eaee2.  v6:= 9223372036854775807L;
  #L1eaeec.  v10:= v4;
  #L1eaeee.  v8:= v6 @kind wide;
  #L1eaef0.  v4:= 0I;
  #L1eaef2.  v11:= 0L;
  #L1eaef6.  if v4 >= v1 then goto L1eafa8;
  #L1eaefa.  v10:= v10 + v3 @kind int;
  #L1eaefc.  if v10 <= v1 then goto L1eaf02;
  #L1eaf00.  v10:= 1I;
  #L1eaf02.  v13:= v0.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eaf06.  v13:= v13.`kotlinx.coroutines.d2.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1eaf0a.  call temp:= `get`(v13, v10) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1eaf10.  v13:= temp @kind object;
  #L1eaf12.  v13:= (`kotlinx.coroutines.d2.a$b`) v13 @kind object;
  #L1eaf16.  if v13 == 0 then goto L1eafa2;
  #L1eaf1a.  if v13 == v0 then goto L1eafa2;
  #L1eaf1e.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1eaf24.  v14:= temp;
  #L1eaf26.  if v14 == 0 then goto L1eaf52;
  #L1eaf2a.  v14:= v0.`kotlinx.coroutines.d2.a$b.f` @type ^`kotlinx.coroutines.d2.n` @kind object;
  #L1eaf2e.  call temp:= `getSize$kotlinx_coroutines_core`(v14) @signature `Lkotlinx/coroutines/d2/n;.getSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L1eaf34.  v14:= temp;
  #L1eaf36.  if v14 != 0 then goto L1eaf3e;
  #L1eaf3a.  v14:= 1I;
  #L1eaf3c.  goto L1eaf40;
  #L1eaf3e.  v14:= 0I;
  #L1eaf40.  if v14 == 0 then goto L1eaf46;
  #L1eaf44.  goto L1eaf52;
  #L1eaf46.  v1:= new `java.lang.AssertionError`;
  #L1eaf4a.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1eaf50.  throw v1;
  #L1eaf52.  if v19 == 0 then goto L1eaf68;
  #L1eaf56.  v14:= v0.`kotlinx.coroutines.d2.a$b.f` @type ^`kotlinx.coroutines.d2.n` @kind object;
  #L1eaf5a.  v13:= v13.`kotlinx.coroutines.d2.a$b.f` @type ^`kotlinx.coroutines.d2.n` @kind object;
  #L1eaf5e.  call temp:= `tryStealBlockingFrom`(v14, v13) @signature `Lkotlinx/coroutines/d2/n;.tryStealBlockingFrom:(Lkotlinx/coroutines/d2/n;)J` @kind virtual;
  #L1eaf64.  v13:= temp @kind wide;
  #L1eaf66.  goto L1eaf78;
  #L1eaf68.  v14:= v0.`kotlinx.coroutines.d2.a$b.f` @type ^`kotlinx.coroutines.d2.n` @kind object;
  #L1eaf6c.  v13:= v13.`kotlinx.coroutines.d2.a$b.f` @type ^`kotlinx.coroutines.d2.n` @kind object;
  #L1eaf70.  call temp:= `tryStealFrom`(v14, v13) @signature `Lkotlinx/coroutines/d2/n;.tryStealFrom:(Lkotlinx/coroutines/d2/n;)J` @kind virtual;
  #L1eaf76.  v13:= temp @kind wide;
  #L1eaf78.  v15:= -1L;
  #L1eaf7c.  v17:= lcmp(v13, v15);
  #L1eaf80.  if v17 != 0 then goto L1eaf92;
  #L1eaf84.  v1:= v0.`kotlinx.coroutines.d2.a$b.f` @type ^`kotlinx.coroutines.d2.n` @kind object;
  #L1eaf88.  call temp:= `poll`(v1) @signature `Lkotlinx/coroutines/d2/n;.poll:()Lkotlinx/coroutines/d2/i;` @kind virtual;
  #L1eaf8e.  v1:= temp @kind object;
  #L1eaf90.  return v1 @kind object;
  #L1eaf92.  v15:= lcmp(v13, v11);
  #L1eaf96.  if v15 <= 0 then goto L1eafa2;
  #L1eaf9a.  call temp:= `min`(v8, v13) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1eafa0.  v8:= temp @kind wide;
  #L1eafa2.  v4:= v4 + 1;
  #L1eafa6.  goto L1eaef2;
  #L1eafa8.  v1:= lcmp(v8, v6);
  #L1eafac.  if v1 == 0 then goto L1eafb2;
  #L1eafb0.  goto L1eafb4;
  #L1eafb2.  v8:= v11 @kind wide;
  #L1eafb4.  v0.`kotlinx.coroutines.d2.a$b.i` @type ^`long` := v8 @kind wide;
  #L1eafb8.  return v5 @kind object;
}
procedure `void` `b`(`kotlinx.coroutines.d2.a$b` v6 @kind this) @signature `Lkotlinx/coroutines/d2/a$b;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1eb1a0.  v0:= v6.`kotlinx.coroutines.d2.a$b.h` @type ^`long` @kind wide;
  #L1eb1a4.  v2:= 0L;
  #L1eb1a8.  v4:= lcmp(v0, v2);
  #L1eb1ac.  if v4 != 0 then goto L1eb1c6;
  #L1eb1b0.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L1eb1b6.  v0:= temp @kind wide;
  #L1eb1b8.  v4:= v6.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb1bc.  v4:= v4.`kotlinx.coroutines.d2.a.k` @type ^`long` @kind wide;
  #L1eb1c0.  v0:= v0 + v4 @kind long;
  #L1eb1c2.  v6.`kotlinx.coroutines.d2.a$b.h` @type ^`long` := v0 @kind wide;
  #L1eb1c6.  v0:= v6.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb1ca.  v0:= v0.`kotlinx.coroutines.d2.a.k` @type ^`long` @kind wide;
  #L1eb1ce.  call `parkNanos`(v0) @signature `Ljava/util/concurrent/locks/LockSupport;.parkNanos:(J)V` @kind static;
  #L1eb1d4.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L1eb1da.  v0:= temp @kind wide;
  #L1eb1dc.  v4:= v6.`kotlinx.coroutines.d2.a$b.h` @type ^`long` @kind wide;
  #L1eb1e0.  v0:= v0 - v4 @kind long;
  #L1eb1e2.  v4:= lcmp(v0, v2);
  #L1eb1e6.  if v4 < 0 then goto L1eb1f4;
  #L1eb1ea.  v6.`kotlinx.coroutines.d2.a$b.h` @type ^`long` := v2 @kind wide;
  #L1eb1ee.  call `g`(v6) @signature `Lkotlinx/coroutines/d2/a$b;.g:()V` @kind direct;
  #L1eb1f4.  return @kind void;
}
procedure `void` `b`(`kotlinx.coroutines.d2.a$b` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/d2/a$b;.b:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;

  #L1eb0d8.  if v1 != 0 then goto L1eb0de;
  #L1eb0dc.  return @kind void;
  #L1eb0de.  v1:= `@@kotlinx.coroutines.d2.a$c.g` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb0e2.  call temp:= `tryReleaseCpu$kotlinx_coroutines_core`(v0, v1) @signature `Lkotlinx/coroutines/d2/a$b;.tryReleaseCpu$kotlinx_coroutines_core:(Lkotlinx/coroutines/d2/a$c;)Z` @kind virtual;
  #L1eb0e8.  v1:= temp;
  #L1eb0ea.  if v1 == 0 then goto L1eb0f8;
  #L1eb0ee.  v1:= v0.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb0f2.  call `signalCpuWork$kotlinx_coroutines_core`(v1) @signature `Lkotlinx/coroutines/d2/a;.signalCpuWork$kotlinx_coroutines_core:()V` @kind virtual;
  #L1eb0f8.  return @kind void;
}
procedure `kotlinx.coroutines.d2.i` `c`(`kotlinx.coroutines.d2.a$b` v1 @kind this) @signature `Lkotlinx/coroutines/d2/a$b;.c:()Lkotlinx/coroutines/d2/i;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1eae08.  v0:= 2I;
  #L1eae0a.  call temp:= `nextInt$kotlinx_coroutines_core`(v1, v0) @signature `Lkotlinx/coroutines/d2/a$b;.nextInt$kotlinx_coroutines_core:(I)I` @kind virtual;
  #L1eae10.  v0:= temp;
  #L1eae12.  if v0 != 0 then goto L1eae46;
  #L1eae16.  v0:= v1.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eae1a.  v0:= v0.`kotlinx.coroutines.d2.a.f` @type ^`kotlinx.coroutines.d2.e` @kind object;
  #L1eae1e.  call temp:= `removeFirstOrNull`(v0) @signature `Lkotlinx/coroutines/internal/m;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L1eae24.  v0:= temp @kind object;
  #L1eae26.  v0:= (`kotlinx.coroutines.d2.i`) v0 @kind object;
  #L1eae2a.  if v0 == 0 then goto L1eae30;
  #L1eae2e.  return v0 @kind object;
  #L1eae30.  v0:= v1.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eae34.  v0:= v0.`kotlinx.coroutines.d2.a.g` @type ^`kotlinx.coroutines.d2.e` @kind object;
  #L1eae38.  call temp:= `removeFirstOrNull`(v0) @signature `Lkotlinx/coroutines/internal/m;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L1eae3e.  v0:= temp @kind object;
  #L1eae40.  v0:= (`kotlinx.coroutines.d2.i`) v0 @kind object;
  #L1eae44.  return v0 @kind object;
  #L1eae46.  v0:= v1.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eae4a.  v0:= v0.`kotlinx.coroutines.d2.a.g` @type ^`kotlinx.coroutines.d2.e` @kind object;
  #L1eae4e.  call temp:= `removeFirstOrNull`(v0) @signature `Lkotlinx/coroutines/internal/m;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L1eae54.  v0:= temp @kind object;
  #L1eae56.  v0:= (`kotlinx.coroutines.d2.i`) v0 @kind object;
  #L1eae5a.  if v0 == 0 then goto L1eae60;
  #L1eae5e.  return v0 @kind object;
  #L1eae60.  v0:= v1.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eae64.  v0:= v0.`kotlinx.coroutines.d2.a.f` @type ^`kotlinx.coroutines.d2.e` @kind object;
  #L1eae68.  call temp:= `removeFirstOrNull`(v0) @signature `Lkotlinx/coroutines/internal/m;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L1eae6e.  v0:= temp @kind object;
  #L1eae70.  v0:= (`kotlinx.coroutines.d2.i`) v0 @kind object;
  #L1eae74.  return v0 @kind object;
}
procedure `void` `c`(`kotlinx.coroutines.d2.a$b` v2 @kind this, `int` v3 ) @signature `Lkotlinx/coroutines/d2/a$b;.c:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1eb148.  v0:= 0L;
  #L1eb14c.  v2.`kotlinx.coroutines.d2.a$b.h` @type ^`long` := v0 @kind wide;
  #L1eb150.  v0:= v2.`kotlinx.coroutines.d2.a$b.g` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb154.  v1:= `@@kotlinx.coroutines.d2.a$c.h` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb158.  if v0 != v1 then goto L1eb18c;
  #L1eb15c.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1eb162.  v0:= temp;
  #L1eb164.  if v0 == 0 then goto L1eb184;
  #L1eb168.  v0:= 1I;
  #L1eb16a.  if v3 != v0 then goto L1eb170;
  #L1eb16e.  goto L1eb172;
  #L1eb170.  v0:= 0I;
  #L1eb172.  if v0 == 0 then goto L1eb178;
  #L1eb176.  goto L1eb184;
  #L1eb178.  v3:= new `java.lang.AssertionError`;
  #L1eb17c.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1eb182.  throw v3;
  #L1eb184.  v3:= `@@kotlinx.coroutines.d2.a$c.g` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb188.  v2.`kotlinx.coroutines.d2.a$b.g` @type ^`kotlinx.coroutines.d2.a$c` := v3 @kind object;
  #L1eb18c.  return @kind void;
}
procedure `void` `d`(`kotlinx.coroutines.d2.a$b` v7 @kind this) @signature `Lkotlinx/coroutines/d2/a$b;.d:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1eb220.  v0:= 0I;
  #L1eb222.  v1:= 0I;
  #L1eb224.  v2:= v7.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb228.  call temp:= `isTerminated`(v2) @signature `Lkotlinx/coroutines/d2/a;.isTerminated:()Z` @kind virtual;
  #L1eb22e.  v2:= temp;
  #L1eb230.  if v2 != 0 then goto L1eb2a0;
  #L1eb234.  v2:= v7.`kotlinx.coroutines.d2.a$b.g` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb238.  v3:= `@@kotlinx.coroutines.d2.a$c.j` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb23c.  if v2 == v3 then goto L1eb2a0;
  #L1eb240.  v2:= v7.`kotlinx.coroutines.d2.a$b.k` @type ^`boolean` @kind boolean;
  #L1eb244.  call temp:= `findTask`(v7, v2) @signature `Lkotlinx/coroutines/d2/a$b;.findTask:(Z)Lkotlinx/coroutines/d2/i;` @kind virtual;
  #L1eb24a.  v2:= temp @kind object;
  #L1eb24c.  v3:= 0L;
  #L1eb250.  if v2 == 0 then goto L1eb260;
  #L1eb254.  v7.`kotlinx.coroutines.d2.a$b.i` @type ^`long` := v3 @kind wide;
  #L1eb258.  call `a`(v7, v2) @signature `Lkotlinx/coroutines/d2/a$b;.a:(Lkotlinx/coroutines/d2/i;)V` @kind direct;
  #L1eb25e.  goto L1eb222;
  #L1eb260.  v7.`kotlinx.coroutines.d2.a$b.k` @type ^`boolean` := v0 @kind boolean;
  #L1eb264.  v5:= v7.`kotlinx.coroutines.d2.a$b.i` @type ^`long` @kind wide;
  #L1eb268.  v2:= lcmp(v5, v3);
  #L1eb26c.  if v2 == 0 then goto L1eb298;
  #L1eb270.  if v1 != 0 then goto L1eb278;
  #L1eb274.  v1:= 1I;
  #L1eb276.  goto L1eb224;
  #L1eb278.  v1:= `@@kotlinx.coroutines.d2.a$c.h` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb27c.  call temp:= `tryReleaseCpu$kotlinx_coroutines_core`(v7, v1) @signature `Lkotlinx/coroutines/d2/a$b;.tryReleaseCpu$kotlinx_coroutines_core:(Lkotlinx/coroutines/d2/a$c;)Z` @kind virtual;
  #L1eb282.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L1eb288.  v1:= v7.`kotlinx.coroutines.d2.a$b.i` @type ^`long` @kind wide;
  #L1eb28c.  call `parkNanos`(v1) @signature `Ljava/util/concurrent/locks/LockSupport;.parkNanos:(J)V` @kind static;
  #L1eb292.  v7.`kotlinx.coroutines.d2.a$b.i` @type ^`long` := v3 @kind wide;
  #L1eb296.  goto L1eb222;
  #L1eb298.  call `f`(v7) @signature `Lkotlinx/coroutines/d2/a$b;.f:()V` @kind direct;
  #L1eb29e.  goto L1eb224;
  #L1eb2a0.  v0:= `@@kotlinx.coroutines.d2.a$c.j` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb2a4.  call temp:= `tryReleaseCpu$kotlinx_coroutines_core`(v7, v0) @signature `Lkotlinx/coroutines/d2/a$b;.tryReleaseCpu$kotlinx_coroutines_core:(Lkotlinx/coroutines/d2/a$c;)Z` @kind virtual;
  #L1eb2aa.  return @kind void;
}
procedure `boolean` `e`(`kotlinx.coroutines.d2.a$b` v10 @kind this) @signature `Lkotlinx/coroutines/d2/a$b;.e:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1eabd0.  v0:= v10.`kotlinx.coroutines.d2.a$b.g` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eabd4.  v1:= `@@kotlinx.coroutines.d2.a$c.f` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eabd8.  v2:= 0I;
  #L1eabda.  v3:= 1I;
  #L1eabdc.  if v0 != v1 then goto L1eabe2;
  #L1eabe0.  goto L1eac38;
  #L1eabe2.  v0:= v10.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eabe6.  v6:= v0.`kotlinx.coroutines.d2.a.controlState` @type ^`long` @kind wide;
  #L1eabea.  v4:= 9223367638808264704L;
  #L1eabf4.  v4:= v4 ^& v6 @kind long;
  #L1eabf6.  v1:= 42I;
  #L1eabfa.  v4:= v4 ^> v1 @kind long;
  #L1eabfc.  v1:= (`int`) v4 @kind l2i;
  #L1eabfe.  if v1 != 0 then goto L1eac06;
  #L1eac02.  v0:= 0I;
  #L1eac04.  goto L1eac28;
  #L1eac06.  v4:= 4398046511104L;
  #L1eac10.  v8:= v6 - v4 @kind long;
  #L1eac14.  v4:= `@@kotlinx.coroutines.d2.a.n` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1eac18.  v5:= v0 @kind object;
  #L1eac1a.  call temp:= `compareAndSet`(v4, v5, v6, v8) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L1eac20.  v1:= temp;
  #L1eac22.  if v1 == 0 then goto L1eabe6;
  #L1eac26.  v0:= 1I;
  #L1eac28.  if v0 == 0 then goto L1eac36;
  #L1eac2c.  v0:= `@@kotlinx.coroutines.d2.a$c.f` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eac30.  v10.`kotlinx.coroutines.d2.a$b.g` @type ^`kotlinx.coroutines.d2.a$c` := v0 @kind object;
  #L1eac34.  goto L1eac38;
  #L1eac36.  v3:= 0I;
  #L1eac38.  return v3;
}
procedure `void` `f`(`kotlinx.coroutines.d2.a$b` v2 @kind this) @signature `Lkotlinx/coroutines/d2/a$b;.f:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1eb334.  call temp:= `a`(v2) @signature `Lkotlinx/coroutines/d2/a$b;.a:()Z` @kind direct;
  #L1eb33a.  v0:= temp;
  #L1eb33c.  if v0 != 0 then goto L1eb34c;
  #L1eb340.  v0:= v2.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb344.  call temp:= `parkedWorkersStackPush$kotlinx_coroutines_core`(v0, v2) @signature `Lkotlinx/coroutines/d2/a;.parkedWorkersStackPush$kotlinx_coroutines_core:(Lkotlinx/coroutines/d2/a$b;)Z` @kind virtual;
  #L1eb34a.  return @kind void;
  #L1eb34c.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1eb352.  v0:= temp;
  #L1eb354.  if v0 == 0 then goto L1eb380;
  #L1eb358.  v0:= v2.`kotlinx.coroutines.d2.a$b.f` @type ^`kotlinx.coroutines.d2.n` @kind object;
  #L1eb35c.  call temp:= `getSize$kotlinx_coroutines_core`(v0) @signature `Lkotlinx/coroutines/d2/n;.getSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L1eb362.  v0:= temp;
  #L1eb364.  if v0 != 0 then goto L1eb36c;
  #L1eb368.  v0:= 1I;
  #L1eb36a.  goto L1eb36e;
  #L1eb36c.  v0:= 0I;
  #L1eb36e.  if v0 == 0 then goto L1eb374;
  #L1eb372.  goto L1eb380;
  #L1eb374.  v0:= new `java.lang.AssertionError`;
  #L1eb378.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1eb37e.  throw v0;
  #L1eb380.  v0:= -1I;
  #L1eb382.  v2.`kotlinx.coroutines.d2.a$b.workerCtl` @type ^`int` := v0;
  #L1eb386.  call temp:= `a`(v2) @signature `Lkotlinx/coroutines/d2/a$b;.a:()Z` @kind direct;
  #L1eb38c.  v0:= temp;
  #L1eb38e.  if v0 == 0 then goto L1eb3c8;
  #L1eb392.  v0:= v2.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb396.  call temp:= `isTerminated`(v0) @signature `Lkotlinx/coroutines/d2/a;.isTerminated:()Z` @kind virtual;
  #L1eb39c.  v0:= temp;
  #L1eb39e.  if v0 != 0 then goto L1eb3c8;
  #L1eb3a2.  v0:= v2.`kotlinx.coroutines.d2.a$b.g` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb3a6.  v1:= `@@kotlinx.coroutines.d2.a$c.j` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb3aa.  if v0 != v1 then goto L1eb3b0;
  #L1eb3ae.  goto L1eb3c8;
  #L1eb3b0.  v0:= `@@kotlinx.coroutines.d2.a$c.h` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb3b4.  call temp:= `tryReleaseCpu$kotlinx_coroutines_core`(v2, v0) @signature `Lkotlinx/coroutines/d2/a$b;.tryReleaseCpu$kotlinx_coroutines_core:(Lkotlinx/coroutines/d2/a$c;)Z` @kind virtual;
  #L1eb3ba.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L1eb3c0.  call `b`(v2) @signature `Lkotlinx/coroutines/d2/a$b;.b:()V` @kind direct;
  #L1eb3c6.  goto L1eb386;
  #L1eb3c8.  return @kind void;
}
procedure `void` `g`(`kotlinx.coroutines.d2.a$b` v6 @kind this) @signature `Lkotlinx/coroutines/d2/a$b;.g:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1eb3dc.  v0:= v6.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb3e0.  v0:= v0.`kotlinx.coroutines.d2.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1eb3e4.  @monitorenter v0
  #L1eb3e6.  v1:= v6.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb3ea.  call temp:= `isTerminated`(v1) @signature `Lkotlinx/coroutines/d2/a;.isTerminated:()Z` @kind virtual;
  #L1eb3f0.  v1:= temp;
  #L1eb3f2.  if v1 == 0 then goto L1eb3fa;
  #L1eb3f6.  @monitorexit v0
  #L1eb3f8.  return @kind void;
  #L1eb3fa.  v1:= v6.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb3fe.  call temp:= `access$getCreatedWorkers$p`(v1) @signature `Lkotlinx/coroutines/d2/a;.access$getCreatedWorkers$p:(Lkotlinx/coroutines/d2/a;)I` @kind static;
  #L1eb404.  v1:= temp;
  #L1eb406.  v2:= v6.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb40a.  v2:= v2.`kotlinx.coroutines.d2.a.i` @type ^`int`;
  #L1eb40e.  if v1 > v2 then goto L1eb416;
  #L1eb412.  @monitorexit v0
  #L1eb414.  return @kind void;
  #L1eb416.  v1:= `@@kotlinx.coroutines.d2.a$b.m` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1eb41a.  v2:= -1I;
  #L1eb41c.  v3:= 1I;
  #L1eb41e.  call temp:= `compareAndSet`(v1, v6, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L1eb424.  v1:= temp;
  #L1eb426.  if v1 != 0 then goto L1eb42e;
  #L1eb42a.  @monitorexit v0
  #L1eb42c.  return @kind void;
  #L1eb42e.  v1:= v6.`kotlinx.coroutines.d2.a$b.indexInArray` @type ^`int`;
  #L1eb432.  v2:= 0I;
  #L1eb434.  call `setIndexInArray`(v6, v2) @signature `Lkotlinx/coroutines/d2/a$b;.setIndexInArray:(I)V` @kind virtual;
  #L1eb43a.  v3:= v6.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb43e.  call `parkedWorkersStackTopUpdate$kotlinx_coroutines_core`(v3, v6, v1, v2) @signature `Lkotlinx/coroutines/d2/a;.parkedWorkersStackTopUpdate$kotlinx_coroutines_core:(Lkotlinx/coroutines/d2/a$b;II)V` @kind virtual;
  #L1eb444.  v2:= v6.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb448.  v3:= `@@kotlinx.coroutines.d2.a.n` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1eb44c.  call temp:= `getAndDecrement`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.getAndDecrement:(Ljava/lang/Object;)J` @kind virtual;
  #L1eb452.  v2:= temp @kind wide;
  #L1eb454.  v4:= 2097151L;
  #L1eb45a.  v2:= v2 ^& v4 @kind long;
  #L1eb45c.  v3:= (`int`) v2 @kind l2i;
  #L1eb45e.  if v3 == v1 then goto L1eb49a;
  #L1eb462.  v2:= v6.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb466.  v2:= v2.`kotlinx.coroutines.d2.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1eb46a.  call temp:= `get`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1eb470.  v2:= temp @kind object;
  #L1eb472.  call `checkNotNull`(v2) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1eb478.  v2:= (`kotlinx.coroutines.d2.a$b`) v2 @kind object;
  #L1eb47c.  v4:= v6.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb480.  v4:= v4.`kotlinx.coroutines.d2.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1eb484.  call `set`(v4, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L1eb48a.  call `setIndexInArray`(v2, v1) @signature `Lkotlinx/coroutines/d2/a$b;.setIndexInArray:(I)V` @kind virtual;
  #L1eb490.  v4:= v6.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb494.  call `parkedWorkersStackTopUpdate$kotlinx_coroutines_core`(v4, v2, v3, v1) @signature `Lkotlinx/coroutines/d2/a;.parkedWorkersStackTopUpdate$kotlinx_coroutines_core:(Lkotlinx/coroutines/d2/a$b;II)V` @kind virtual;
  #L1eb49a.  v1:= v6.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb49e.  v1:= v1.`kotlinx.coroutines.d2.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1eb4a2.  v2:= 0I;
  #L1eb4a4.  call `set`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L1eb4aa.  v1:= `@@kotlin.q.a` @type ^`kotlin.q` @kind object;
  #L1eb4ae.  @monitorexit v0
  #L1eb4b0.  v0:= `@@kotlinx.coroutines.d2.a$c.j` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eb4b4.  v6.`kotlinx.coroutines.d2.a$b.g` @type ^`kotlinx.coroutines.d2.a$c` := v0 @kind object;
  #L1eb4b8.  return @kind void;
  #L1eb4ba.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1eb4bc.  @monitorexit v0
  #L1eb4be.  throw v1;
  catch `java.lang.Throwable` @[L1eb3e6..L1eb3f2] goto L1eb4ba;
  catch `java.lang.Throwable` @[L1eb3fa..L1eb40e] goto L1eb4ba;
  catch `java.lang.Throwable` @[L1eb416..L1eb426] goto L1eb4ba;
  catch `java.lang.Throwable` @[L1eb42e..L1eb4ae] goto L1eb4ba;
}
procedure `kotlinx.coroutines.d2.i` `findTask`(`kotlinx.coroutines.d2.a$b` v1 @kind this, `boolean` v2 ) @signature `Lkotlinx/coroutines/d2/a$b;.findTask:(Z)Lkotlinx/coroutines/d2/i;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ead90.  call temp:= `e`(v1) @signature `Lkotlinx/coroutines/d2/a$b;.e:()Z` @kind direct;
  #L1ead96.  v0:= temp;
  #L1ead98.  if v0 == 0 then goto L1eada6;
  #L1ead9c.  call temp:= `a`(v1, v2) @signature `Lkotlinx/coroutines/d2/a$b;.a:(Z)Lkotlinx/coroutines/d2/i;` @kind direct;
  #L1eada2.  v2:= temp @kind object;
  #L1eada4.  return v2 @kind object;
  #L1eada6.  if v2 == 0 then goto L1eadd2;
  #L1eadaa.  v2:= v1.`kotlinx.coroutines.d2.a$b.f` @type ^`kotlinx.coroutines.d2.n` @kind object;
  #L1eadae.  call temp:= `poll`(v2) @signature `Lkotlinx/coroutines/d2/n;.poll:()Lkotlinx/coroutines/d2/i;` @kind virtual;
  #L1eadb4.  v2:= temp @kind object;
  #L1eadb6.  if v2 == 0 then goto L1eadbc;
  #L1eadba.  goto L1eade6;
  #L1eadbc.  v2:= v1.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eadc0.  v2:= v2.`kotlinx.coroutines.d2.a.g` @type ^`kotlinx.coroutines.d2.e` @kind object;
  #L1eadc4.  call temp:= `removeFirstOrNull`(v2) @signature `Lkotlinx/coroutines/internal/m;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L1eadca.  v2:= temp @kind object;
  #L1eadcc.  v2:= (`kotlinx.coroutines.d2.i`) v2 @kind object;
  #L1eadd0.  goto L1eade6;
  #L1eadd2.  v2:= v1.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eadd6.  v2:= v2.`kotlinx.coroutines.d2.a.g` @type ^`kotlinx.coroutines.d2.e` @kind object;
  #L1eadda.  call temp:= `removeFirstOrNull`(v2) @signature `Lkotlinx/coroutines/internal/m;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L1eade0.  v2:= temp @kind object;
  #L1eade2.  v2:= (`kotlinx.coroutines.d2.i`) v2 @kind object;
  #L1eade6.  if v2 == 0 then goto L1eadec;
  #L1eadea.  goto L1eadf6;
  #L1eadec.  v2:= 1I;
  #L1eadee.  call temp:= `b`(v1, v2) @signature `Lkotlinx/coroutines/d2/a$b;.b:(Z)Lkotlinx/coroutines/d2/i;` @kind direct;
  #L1eadf4.  v2:= temp @kind object;
  #L1eadf6.  return v2 @kind object;
}
procedure `int` `getIndexInArray`(`kotlinx.coroutines.d2.a$b` v1 @kind this) @signature `Lkotlinx/coroutines/d2/a$b;.getIndexInArray:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1eac94.  v0:= v1.`kotlinx.coroutines.d2.a$b.indexInArray` @type ^`int`;
  #L1eac98.  return v0;
}
procedure `java.lang.Object` `getNextParkedWorker`(`kotlinx.coroutines.d2.a$b` v1 @kind this) @signature `Lkotlinx/coroutines/d2/a$b;.getNextParkedWorker:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1eacf4.  v0:= v1.`kotlinx.coroutines.d2.a$b.nextParkedWorker` @type ^`java.lang.Object` @kind object;
  #L1eacf8.  return v0 @kind object;
}
procedure `int` `nextInt$kotlinx_coroutines_core`(`kotlinx.coroutines.d2.a$b` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/d2/a$b;.nextInt$kotlinx_coroutines_core:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1eacac.  v0:= v3.`kotlinx.coroutines.d2.a$b.j` @type ^`int`;
  #L1eacb0.  v1:= v0 ^< 13;
  #L1eacb4.  v0:= v0 ^~ v1 @kind int;
  #L1eacb6.  v1:= v0 ^> 17;
  #L1eacba.  v0:= v0 ^~ v1 @kind int;
  #L1eacbc.  v1:= v0 ^< 5;
  #L1eacc0.  v0:= v0 ^~ v1 @kind int;
  #L1eacc2.  v3.`kotlinx.coroutines.d2.a$b.j` @type ^`int` := v0;
  #L1eacc6.  v1:= v4 + -1;
  #L1eacca.  v2:= v1 ^& v4 @kind int;
  #L1eacce.  if v2 != 0 then goto L1eacd8;
  #L1eacd2.  v4:= v0 ^& v1 @kind int;
  #L1eacd6.  return v4;
  #L1eacd8.  v1:= 2147483647I;
  #L1eacde.  v0:= v0 ^& v1 @kind int;
  #L1eace0.  v0:= v0 %% v4 @kind int;
  #L1eace2.  return v0;
}
procedure `void` `run`(`kotlinx.coroutines.d2.a$b` v0 @kind this) @signature `Lkotlinx/coroutines/d2/a$b;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L1eb208.  call `d`(v0) @signature `Lkotlinx/coroutines/d2/a$b;.d:()V` @kind direct;
  #L1eb20e.  return @kind void;
}
procedure `void` `setIndexInArray`(`kotlinx.coroutines.d2.a$b` v2 @kind this, `int` v3 ) @signature `Lkotlinx/coroutines/d2/a$b;.setIndexInArray:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1eb2bc.  v0:= new `java.lang.StringBuilder`;
  #L1eb2c0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1eb2c6.  v1:= v2.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eb2ca.  v1:= v1.`kotlinx.coroutines.d2.a.l` @type ^`java.lang.String` @kind object;
  #L1eb2ce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eb2d4.  v1:= "-worker-" @kind object;
  #L1eb2d8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eb2de.  if v3 != 0 then goto L1eb2e8;
  #L1eb2e2.  v1:= "TERMINATED" @kind object;
  #L1eb2e6.  goto L1eb2f0;
  #L1eb2e8.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L1eb2ee.  v1:= temp @kind object;
  #L1eb2f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eb2f6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1eb2fc.  v0:= temp @kind object;
  #L1eb2fe.  call `setName`(v2, v0) @signature `Ljava/lang/Thread;.setName:(Ljava/lang/String;)V` @kind virtual;
  #L1eb304.  v2.`kotlinx.coroutines.d2.a$b.indexInArray` @type ^`int` := v3;
  #L1eb308.  return @kind void;
}
procedure `void` `setNextParkedWorker`(`kotlinx.coroutines.d2.a$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/d2/a$b;.setNextParkedWorker:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1eb31c.  v0.`kotlinx.coroutines.d2.a$b.nextParkedWorker` @type ^`java.lang.Object` := v1 @kind object;
  #L1eb320.  return @kind void;
}
procedure `boolean` `tryReleaseCpu$kotlinx_coroutines_core`(`kotlinx.coroutines.d2.a$b` v6 @kind this, `kotlinx.coroutines.d2.a$c` v7 @kind object) @signature `Lkotlinx/coroutines/d2/a$b;.tryReleaseCpu$kotlinx_coroutines_core:(Lkotlinx/coroutines/d2/a$c;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1eac4c.  v0:= v6.`kotlinx.coroutines.d2.a$b.g` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eac50.  v1:= `@@kotlinx.coroutines.d2.a$c.f` @type ^`kotlinx.coroutines.d2.a$c` @kind object;
  #L1eac54.  if v0 != v1 then goto L1eac5c;
  #L1eac58.  v1:= 1I;
  #L1eac5a.  goto L1eac5e;
  #L1eac5c.  v1:= 0I;
  #L1eac5e.  if v1 == 0 then goto L1eac7a;
  #L1eac62.  v2:= v6.`kotlinx.coroutines.d2.a$b.l` @type ^`kotlinx.coroutines.d2.a` @kind object;
  #L1eac66.  v3:= `@@kotlinx.coroutines.d2.a.n` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1eac6a.  v4:= 4398046511104L;
  #L1eac74.  call temp:= `addAndGet`(v3, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.addAndGet:(Ljava/lang/Object;J)J` @kind virtual;
  #L1eac7a.  if v0 == v7 then goto L1eac82;
  #L1eac7e.  v6.`kotlinx.coroutines.d2.a$b.g` @type ^`kotlinx.coroutines.d2.a$c` := v7 @kind object;
  #L1eac82.  return v1;
}
