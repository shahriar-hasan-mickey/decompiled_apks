record `kotlinx.coroutines.internal.l` @kind class @AccessFlag PUBLIC {
  `java.lang.Object` `kotlinx.coroutines.internal.l._next` @AccessFlag VOLATILE;
  `java.lang.Object` `kotlinx.coroutines.internal.l._prev` @AccessFlag VOLATILE;
  `java.lang.Object` `kotlinx.coroutines.internal.l._removedRef` @AccessFlag PRIVATE_VOLATILE;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.l.f` @AccessFlag STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.l.g` @AccessFlag STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.l.h` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/l;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1e87dc.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L1e87e0.  v1:= constclass @type ^`kotlinx.coroutines.internal.l` @kind object;
  #L1e87e4.  v2:= "_next" @kind object;
  #L1e87e8.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L1e87ee.  v2:= temp @kind object;
  #L1e87f0.  `@@kotlinx.coroutines.internal.l.f` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L1e87f4.  v2:= "_prev" @kind object;
  #L1e87f8.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L1e87fe.  v2:= temp @kind object;
  #L1e8800.  `@@kotlinx.coroutines.internal.l.g` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L1e8804.  v2:= "_removedRef" @kind object;
  #L1e8808.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L1e880e.  v0:= temp @kind object;
  #L1e8810.  `@@kotlinx.coroutines.internal.l.h` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L1e8814.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.l` v1 @kind this) @signature `Lkotlinx/coroutines/internal/l;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e8828.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e882e.  v1.`kotlinx.coroutines.internal.l._next` @type ^`java.lang.Object` := v1 @kind object;
  #L1e8832.  v1.`kotlinx.coroutines.internal.l._prev` @type ^`java.lang.Object` := v1 @kind object;
  #L1e8836.  v0:= 0I;
  #L1e8838.  v1.`kotlinx.coroutines.internal.l._removedRef` @type ^`java.lang.Object` := v0 @kind object;
  #L1e883c.  return @kind void;
}
procedure `kotlinx.coroutines.internal.l` `a`(`kotlinx.coroutines.internal.l` v1 @kind this, `kotlinx.coroutines.internal.l` v2 @kind object) @signature `Lkotlinx/coroutines/internal/l;.a:(Lkotlinx/coroutines/internal/l;)Lkotlinx/coroutines/internal/l;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1e86b8.  call temp:= `isRemoved`(v2) @signature `Lkotlinx/coroutines/internal/l;.isRemoved:()Z` @kind virtual;
  #L1e86be.  v0:= temp;
  #L1e86c0.  if v0 != 0 then goto L1e86c6;
  #L1e86c4.  return v2 @kind object;
  #L1e86c6.  v2:= v2.`kotlinx.coroutines.internal.l._prev` @type ^`java.lang.Object` @kind object;
  #L1e86ca.  v2:= (`kotlinx.coroutines.internal.l`) v2 @kind object;
  #L1e86ce.  goto L1e86b8;
}
procedure `kotlinx.coroutines.internal.l` `a`(`kotlinx.coroutines.internal.l` v6 @kind this, `kotlinx.coroutines.internal.r` v7 @kind object) @signature `Lkotlinx/coroutines/internal/l;.a:(Lkotlinx/coroutines/internal/r;)Lkotlinx/coroutines/internal/l;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1e85e4.  v0:= v6.`kotlinx.coroutines.internal.l._prev` @type ^`java.lang.Object` @kind object;
  #L1e85e8.  v0:= (`kotlinx.coroutines.internal.l`) v0 @kind object;
  #L1e85ec.  v1:= 0I;
  #L1e85ee.  v2:= v0 @kind object;
  #L1e85f0.  v3:= v1 @kind object;
  #L1e85f2.  v4:= v2.`kotlinx.coroutines.internal.l._next` @type ^`java.lang.Object` @kind object;
  #L1e85f6.  if v4 != v6 then goto L1e8614;
  #L1e85fa.  if v0 != v2 then goto L1e8600;
  #L1e85fe.  return v2 @kind object;
  #L1e8600.  v1:= `@@kotlinx.coroutines.internal.l.g` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e8604.  call temp:= `compareAndSet`(v1, v6, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e860a.  v0:= temp;
  #L1e860c.  if v0 != 0 then goto L1e8612;
  #L1e8610.  goto L1e85e4;
  #L1e8612.  return v2 @kind object;
  #L1e8614.  call temp:= `isRemoved`(v6) @signature `Lkotlinx/coroutines/internal/l;.isRemoved:()Z` @kind virtual;
  #L1e861a.  v5:= temp;
  #L1e861c.  if v5 == 0 then goto L1e8622;
  #L1e8620.  return v1 @kind object;
  #L1e8622.  if v4 != v7 then goto L1e8628;
  #L1e8626.  return v2 @kind object;
  #L1e8628.  v5:= instanceof @variable v4 @type ^`kotlinx.coroutines.internal.r` @kind boolean;
  #L1e862c.  if v5 == 0 then goto L1e8654;
  #L1e8630.  if v7 == 0 then goto L1e8648;
  #L1e8634.  v0:= v4 @kind object;
  #L1e8636.  v0:= (`kotlinx.coroutines.internal.r`) v0 @kind object;
  #L1e863a.  call temp:= `isEarlierThan`(v7, v0) @signature `Lkotlinx/coroutines/internal/r;.isEarlierThan:(Lkotlinx/coroutines/internal/r;)Z` @kind virtual;
  #L1e8640.  v0:= temp;
  #L1e8642.  if v0 == 0 then goto L1e8648;
  #L1e8646.  return v1 @kind object;
  #L1e8648.  v4:= (`kotlinx.coroutines.internal.r`) v4 @kind object;
  #L1e864c.  call temp:= `perform`(v4, v2) @signature `Lkotlinx/coroutines/internal/r;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1e8652.  goto L1e85e4;
  #L1e8654.  v5:= instanceof @variable v4 @type ^`kotlinx.coroutines.internal.s` @kind boolean;
  #L1e8658.  if v5 == 0 then goto L1e8688;
  #L1e865c.  if v3 == 0 then goto L1e867e;
  #L1e8660.  v5:= `@@kotlinx.coroutines.internal.l.f` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e8664.  v4:= (`kotlinx.coroutines.internal.s`) v4 @kind object;
  #L1e8668.  v4:= v4.`kotlinx.coroutines.internal.s.a` @type ^`kotlinx.coroutines.internal.l` @kind object;
  #L1e866c.  call temp:= `compareAndSet`(v5, v3, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e8672.  v2:= temp;
  #L1e8674.  if v2 != 0 then goto L1e867a;
  #L1e8678.  goto L1e85e4;
  #L1e867a.  v2:= v3 @kind object;
  #L1e867c.  goto L1e85f0;
  #L1e867e.  v2:= v2.`kotlinx.coroutines.internal.l._prev` @type ^`java.lang.Object` @kind object;
  #L1e8682.  v2:= (`kotlinx.coroutines.internal.l`) v2 @kind object;
  #L1e8686.  goto L1e85f2;
  #L1e8688.  if v4 == 0 then goto L1e8696;
  #L1e868c.  v4:= (`kotlinx.coroutines.internal.l`) v4 @kind object;
  #L1e8690.  v3:= v2 @kind object;
  #L1e8692.  v2:= v4 @kind object;
  #L1e8694.  goto L1e85f2;
  #L1e8696.  v7:= new `java.lang.NullPointerException`;
  #L1e869a.  v0:= "null cannot be cast to non-null type kotlinx.coroutines.internal.Node /* = kotlinx.coroutines.internal.LockFreeLinkedListNode */" @kind object;
  #L1e869e.  call `<init>`(v7, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e86a4.  throw v7;
}
procedure `kotlinx.coroutines.internal.s` `a`(`kotlinx.coroutines.internal.l` v2 @kind this) @signature `Lkotlinx/coroutines/internal/l;.a:()Lkotlinx/coroutines/internal/s;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1e87a8.  v0:= v2.`kotlinx.coroutines.internal.l._removedRef` @type ^`java.lang.Object` @kind object;
  #L1e87ac.  v0:= (`kotlinx.coroutines.internal.s`) v0 @kind object;
  #L1e87b0.  if v0 == 0 then goto L1e87b6;
  #L1e87b4.  goto L1e87ca;
  #L1e87b6.  v0:= new `kotlinx.coroutines.internal.s`;
  #L1e87ba.  call `<init>`(v0, v2) @signature `Lkotlinx/coroutines/internal/s;.<init>:(Lkotlinx/coroutines/internal/l;)V` @kind direct;
  #L1e87c0.  v1:= `@@kotlinx.coroutines.internal.l.h` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e87c4.  call `lazySet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1e87ca.  return v0 @kind object;
}
procedure `void` `access$finishAdd`(`kotlinx.coroutines.internal.l` v0 @kind object, `kotlinx.coroutines.internal.l` v1 @kind object) @signature `Lkotlinx/coroutines/internal/l;.access$finishAdd:(Lkotlinx/coroutines/internal/l;Lkotlinx/coroutines/internal/l;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1e8850.  call `b`(v0, v1) @signature `Lkotlinx/coroutines/internal/l;.b:(Lkotlinx/coroutines/internal/l;)V` @kind direct;
  #L1e8856.  return @kind void;
}
procedure `void` `b`(`kotlinx.coroutines.internal.l` v2 @kind this, `kotlinx.coroutines.internal.l` v3 @kind object) @signature `Lkotlinx/coroutines/internal/l;.b:(Lkotlinx/coroutines/internal/l;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1e8868.  v0:= v3.`kotlinx.coroutines.internal.l._prev` @type ^`java.lang.Object` @kind object;
  #L1e886c.  v0:= (`kotlinx.coroutines.internal.l`) v0 @kind object;
  #L1e8870.  call temp:= `getNext`(v2) @signature `Lkotlinx/coroutines/internal/l;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L1e8876.  v1:= temp @kind object;
  #L1e8878.  if v1 == v3 then goto L1e887e;
  #L1e887c.  return @kind void;
  #L1e887e.  v1:= `@@kotlinx.coroutines.internal.l.g` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e8882.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e8888.  v0:= temp;
  #L1e888a.  if v0 == 0 then goto L1e8868;
  #L1e888e.  call temp:= `isRemoved`(v2) @signature `Lkotlinx/coroutines/internal/l;.isRemoved:()Z` @kind virtual;
  #L1e8894.  v0:= temp;
  #L1e8896.  if v0 == 0 then goto L1e88a2;
  #L1e889a.  v0:= 0I;
  #L1e889c.  call temp:= `a`(v3, v0) @signature `Lkotlinx/coroutines/internal/l;.a:(Lkotlinx/coroutines/internal/r;)Lkotlinx/coroutines/internal/l;` @kind direct;
  #L1e88a2.  return @kind void;
}
procedure `boolean` `addOneIfEmpty`(`kotlinx.coroutines.internal.l` v1 @kind this, `kotlinx.coroutines.internal.l` v2 @kind object) @signature `Lkotlinx/coroutines/internal/l;.addOneIfEmpty:(Lkotlinx/coroutines/internal/l;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1e8478.  v0:= `@@kotlinx.coroutines.internal.l.g` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e847c.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1e8482.  v0:= `@@kotlinx.coroutines.internal.l.f` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e8486.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1e848c.  call temp:= `getNext`(v1) @signature `Lkotlinx/coroutines/internal/l;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L1e8492.  v0:= temp @kind object;
  #L1e8494.  if v0 == v1 then goto L1e849c;
  #L1e8498.  v2:= 0I;
  #L1e849a.  return v2;
  #L1e849c.  v0:= `@@kotlinx.coroutines.internal.l.f` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e84a0.  call temp:= `compareAndSet`(v0, v1, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e84a6.  v0:= temp;
  #L1e84a8.  if v0 == 0 then goto L1e848c;
  #L1e84ac.  call `b`(v2, v1) @signature `Lkotlinx/coroutines/internal/l;.b:(Lkotlinx/coroutines/internal/l;)V` @kind direct;
  #L1e84b2.  v2:= 1I;
  #L1e84b4.  return v2;
}
procedure `java.lang.Object` `getNext`(`kotlinx.coroutines.internal.l` v2 @kind this) @signature `Lkotlinx/coroutines/internal/l;.getNext:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1e855c.  v0:= v2.`kotlinx.coroutines.internal.l._next` @type ^`java.lang.Object` @kind object;
  #L1e8560.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.r` @kind boolean;
  #L1e8564.  if v1 != 0 then goto L1e856a;
  #L1e8568.  return v0 @kind object;
  #L1e856a.  v0:= (`kotlinx.coroutines.internal.r`) v0 @kind object;
  #L1e856e.  call temp:= `perform`(v0, v2) @signature `Lkotlinx/coroutines/internal/r;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1e8574.  goto L1e855c;
}
procedure `kotlinx.coroutines.internal.l` `getNextNode`(`kotlinx.coroutines.internal.l` v1 @kind this) @signature `Lkotlinx/coroutines/internal/l;.getNextNode:()Lkotlinx/coroutines/internal/l;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1e86e0.  call temp:= `getNext`(v1) @signature `Lkotlinx/coroutines/internal/l;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L1e86e6.  v0:= temp @kind object;
  #L1e86e8.  call temp:= `unwrap`(v0) @signature `Lkotlinx/coroutines/internal/k;.unwrap:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/l;` @kind static;
  #L1e86ee.  v0:= temp @kind object;
  #L1e86f0.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.l` `getPrevNode`(`kotlinx.coroutines.internal.l` v1 @kind this) @signature `Lkotlinx/coroutines/internal/l;.getPrevNode:()Lkotlinx/coroutines/internal/l;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1e8704.  v0:= 0I;
  #L1e8706.  call temp:= `a`(v1, v0) @signature `Lkotlinx/coroutines/internal/l;.a:(Lkotlinx/coroutines/internal/r;)Lkotlinx/coroutines/internal/l;` @kind direct;
  #L1e870c.  v0:= temp @kind object;
  #L1e870e.  if v0 == 0 then goto L1e8714;
  #L1e8712.  goto L1e8724;
  #L1e8714.  v0:= v1.`kotlinx.coroutines.internal.l._prev` @type ^`java.lang.Object` @kind object;
  #L1e8718.  v0:= (`kotlinx.coroutines.internal.l`) v0 @kind object;
  #L1e871c.  call temp:= `a`(v1, v0) @signature `Lkotlinx/coroutines/internal/l;.a:(Lkotlinx/coroutines/internal/l;)Lkotlinx/coroutines/internal/l;` @kind direct;
  #L1e8722.  v0:= temp @kind object;
  #L1e8724.  return v0 @kind object;
}
procedure `boolean` `isRemoved`(`kotlinx.coroutines.internal.l` v1 @kind this) @signature `Lkotlinx/coroutines/internal/l;.isRemoved:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e84c8.  call temp:= `getNext`(v1) @signature `Lkotlinx/coroutines/internal/l;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L1e84ce.  v0:= temp @kind object;
  #L1e84d0.  v0:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.s` @kind boolean;
  #L1e84d4.  return v0;
}
procedure `boolean` `remove`(`kotlinx.coroutines.internal.l` v1 @kind this) @signature `Lkotlinx/coroutines/internal/l;.remove:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e84e8.  call temp:= `removeOrNext`(v1) @signature `Lkotlinx/coroutines/internal/l;.removeOrNext:()Lkotlinx/coroutines/internal/l;` @kind virtual;
  #L1e84ee.  v0:= temp @kind object;
  #L1e84f0.  if v0 != 0 then goto L1e84f8;
  #L1e84f4.  v0:= 1I;
  #L1e84f6.  goto L1e84fa;
  #L1e84f8.  v0:= 0I;
  #L1e84fa.  return v0;
}
procedure `kotlinx.coroutines.internal.l` `removeOrNext`(`kotlinx.coroutines.internal.l` v4 @kind this) @signature `Lkotlinx/coroutines/internal/l;.removeOrNext:()Lkotlinx/coroutines/internal/l;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e8738.  call temp:= `getNext`(v4) @signature `Lkotlinx/coroutines/internal/l;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L1e873e.  v0:= temp @kind object;
  #L1e8740.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.s` @kind boolean;
  #L1e8744.  if v1 == 0 then goto L1e8752;
  #L1e8748.  v0:= (`kotlinx.coroutines.internal.s`) v0 @kind object;
  #L1e874c.  v0:= v0.`kotlinx.coroutines.internal.s.a` @type ^`kotlinx.coroutines.internal.l` @kind object;
  #L1e8750.  return v0 @kind object;
  #L1e8752.  if v0 != v4 then goto L1e875c;
  #L1e8756.  v0:= (`kotlinx.coroutines.internal.l`) v0 @kind object;
  #L1e875a.  return v0 @kind object;
  #L1e875c.  if v0 == 0 then goto L1e8788;
  #L1e8760.  v1:= v0 @kind object;
  #L1e8762.  v1:= (`kotlinx.coroutines.internal.l`) v1 @kind object;
  #L1e8766.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/internal/l;.a:()Lkotlinx/coroutines/internal/s;` @kind direct;
  #L1e876c.  v2:= temp @kind object;
  #L1e876e.  v3:= `@@kotlinx.coroutines.internal.l.f` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e8772.  call temp:= `compareAndSet`(v3, v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e8778.  v0:= temp;
  #L1e877a.  if v0 == 0 then goto L1e8738;
  #L1e877e.  v0:= 0I;
  #L1e8780.  call temp:= `a`(v1, v0) @signature `Lkotlinx/coroutines/internal/l;.a:(Lkotlinx/coroutines/internal/r;)Lkotlinx/coroutines/internal/l;` @kind direct;
  #L1e8786.  return v0 @kind object;
  #L1e8788.  v0:= new `java.lang.NullPointerException`;
  #L1e878c.  v1:= "null cannot be cast to non-null type kotlinx.coroutines.internal.Node /* = kotlinx.coroutines.internal.LockFreeLinkedListNode */" @kind object;
  #L1e8790.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e8796.  throw v0;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.internal.l` v2 @kind this) @signature `Lkotlinx/coroutines/internal/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1e8588.  v0:= new `java.lang.StringBuilder`;
  #L1e858c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e8592.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1e8598.  v1:= temp @kind object;
  #L1e859a.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1e85a0.  v1:= temp @kind object;
  #L1e85a2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e85a8.  v1:= 64I;
  #L1e85ac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e85b2.  call temp:= `identityHashCode`(v2) @signature `Ljava/lang/System;.identityHashCode:(Ljava/lang/Object;)I` @kind static;
  #L1e85b8.  v1:= temp;
  #L1e85ba.  call temp:= `toHexString`(v1) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L1e85c0.  v1:= temp @kind object;
  #L1e85c2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e85c8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e85ce.  v0:= temp @kind object;
  #L1e85d0.  return v0 @kind object;
}
procedure `int` `tryCondAddNext`(`kotlinx.coroutines.internal.l` v1 @kind this, `kotlinx.coroutines.internal.l` v2 @kind object, `kotlinx.coroutines.internal.l` v3 @kind object, `kotlinx.coroutines.internal.l$a` v4 @kind object) @signature `Lkotlinx/coroutines/internal/l;.tryCondAddNext:(Lkotlinx/coroutines/internal/l;Lkotlinx/coroutines/internal/l;Lkotlinx/coroutines/internal/l$a;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1e850c.  v0:= `@@kotlinx.coroutines.internal.l.g` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e8510.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1e8516.  v0:= `@@kotlinx.coroutines.internal.l.f` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e851a.  call `lazySet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1e8520.  v4.`kotlinx.coroutines.internal.l$a.b` @type ^`kotlinx.coroutines.internal.l` := v3 @kind object;
  #L1e8524.  v2:= `@@kotlinx.coroutines.internal.l.f` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e8528.  call temp:= `compareAndSet`(v2, v1, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e852e.  v2:= temp;
  #L1e8530.  if v2 != 0 then goto L1e8538;
  #L1e8534.  v2:= 0I;
  #L1e8536.  return v2;
  #L1e8538.  call temp:= `perform`(v4, v1) @signature `Lkotlinx/coroutines/internal/c;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1e853e.  v2:= temp @kind object;
  #L1e8540.  if v2 != 0 then goto L1e8548;
  #L1e8544.  v2:= 1I;
  #L1e8546.  goto L1e854a;
  #L1e8548.  v2:= 2I;
  #L1e854a.  return v2;
}
