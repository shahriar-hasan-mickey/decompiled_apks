record `kotlinx.coroutines.internal.t` @kind class @AccessFlag PUBLIC extends `kotlinx.coroutines.a` @kind class, `kotlin.t.j.a.d` @kind interface {
  `kotlin.t.d` `kotlinx.coroutines.internal.t.i` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.t` v1 @kind this, `kotlin.t.g` v2 @kind object, `kotlin.t.d` v3 @kind object) @signature `Lkotlinx/coroutines/internal/t;.<init>:(Lkotlin/t/g;Lkotlin/t/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e95b0.  v0:= 1I;
  #L1e95b2.  call `<init>`(v1, v2, v0) @signature `Lkotlinx/coroutines/a;.<init>:(Lkotlin/t/g;Z)V` @kind direct;
  #L1e95b8.  v1.`kotlinx.coroutines.internal.t.i` @type ^`kotlin.t.d` := v3 @kind object;
  #L1e95bc.  return @kind void;
}
procedure `void` `afterCompletion`(`kotlinx.coroutines.internal.t` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/internal/t;.afterCompletion:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L1e95d0.  v0:= v3.`kotlinx.coroutines.internal.t.i` @type ^`kotlin.t.d` @kind object;
  #L1e95d4.  call temp:= `intercepted`(v0) @signature `Lkotlin/t/i/b;.intercepted:(Lkotlin/t/d;)Lkotlin/t/d;` @kind static;
  #L1e95da.  v0:= temp @kind object;
  #L1e95dc.  v1:= v3.`kotlinx.coroutines.internal.t.i` @type ^`kotlin.t.d` @kind object;
  #L1e95e0.  call temp:= `recoverResult`(v4, v1) @signature `Lkotlinx/coroutines/u;.recoverResult:(Ljava/lang/Object;Lkotlin/t/d;)Ljava/lang/Object;` @kind static;
  #L1e95e6.  v4:= temp @kind object;
  #L1e95e8.  v1:= 0I;
  #L1e95ea.  v2:= 2I;
  #L1e95ec.  call `resumeCancellableWith$default`(v0, v4, v1, v2, v1) @signature `Lkotlinx/coroutines/internal/f;.resumeCancellableWith$default:(Lkotlin/t/d;Ljava/lang/Object;Lkotlin/v/b/l;ILjava/lang/Object;)V` @kind static;
  #L1e95f2.  return @kind void;
}
procedure `void` `afterResume`(`kotlinx.coroutines.internal.t` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/internal/t;.afterResume:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1e9604.  v0:= v1.`kotlinx.coroutines.internal.t.i` @type ^`kotlin.t.d` @kind object;
  #L1e9608.  call temp:= `recoverResult`(v2, v0) @signature `Lkotlinx/coroutines/u;.recoverResult:(Ljava/lang/Object;Lkotlin/t/d;)Ljava/lang/Object;` @kind static;
  #L1e960e.  v2:= temp @kind object;
  #L1e9610.  call `resumeWith`(v0, v2) @signature `Lkotlin/t/d;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L1e9616.  return @kind void;
}
procedure `kotlin.t.j.a.d` `getCallerFrame`(`kotlinx.coroutines.internal.t` v1 @kind this) @signature `Lkotlinx/coroutines/internal/t;.getCallerFrame:()Lkotlin/t/j/a/d;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1e9594.  v0:= v1.`kotlinx.coroutines.internal.t.i` @type ^`kotlin.t.d` @kind object;
  #L1e9598.  v0:= (`kotlin.t.j.a.d`) v0 @kind object;
  #L1e959c.  return v0 @kind object;
}
procedure `java.lang.StackTraceElement` `getStackTraceElement`(`kotlinx.coroutines.internal.t` v1 @kind this) @signature `Lkotlinx/coroutines/internal/t;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1e9580.  v0:= 0I;
  #L1e9582.  return v0 @kind object;
}
procedure `boolean` `isScopedCoroutine`(`kotlinx.coroutines.internal.t` v1 @kind this) @signature `Lkotlinx/coroutines/internal/t;.isScopedCoroutine:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1e956c.  v0:= 1I;
  #L1e956e.  return v0;
}
