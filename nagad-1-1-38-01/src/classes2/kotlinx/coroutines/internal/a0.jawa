record `kotlinx.coroutines.internal.a0` @kind class @AccessFlag PUBLIC {
  `int` `kotlinx.coroutines.internal.a0._size` @AccessFlag PRIVATE_VOLATILE;
  `kotlinx.coroutines.internal.b0`[] `kotlinx.coroutines.internal.a0.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.a0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/a0;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1ea4f0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ea4f6.  v0:= 0I;
  #L1ea4f8.  v1.`kotlinx.coroutines.internal.a0._size` @type ^`int` := v0;
  #L1ea4fc.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.internal.a0` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/internal/a0;.a:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;

  #L1ea584.  v0.`kotlinx.coroutines.internal.a0._size` @type ^`int` := v1;
  #L1ea588.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.internal.a0` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lkotlinx/coroutines/internal/a0;.a:(II)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1ea68c.  v0:= v3.`kotlinx.coroutines.internal.a0.a` @type ^`kotlinx.coroutines.internal.b0`[] @kind object;
  #L1ea690.  call `checkNotNull`(v0) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ea696.  v1:= v0[v5] @kind object;
  #L1ea69a.  call `checkNotNull`(v1) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ea6a0.  v2:= v0[v4] @kind object;
  #L1ea6a4.  call `checkNotNull`(v2) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ea6aa.  v0[v4]:= v1 @kind object;
  #L1ea6ae.  v0[v5]:= v2 @kind object;
  #L1ea6b2.  call `setIndex`(v1, v4) @signature `Lkotlinx/coroutines/internal/b0;.setIndex:(I)V` @kind interface;
  #L1ea6b8.  call `setIndex`(v2, v5) @signature `Lkotlinx/coroutines/internal/b0;.setIndex:(I)V` @kind interface;
  #L1ea6be.  return @kind void;
}
procedure `kotlinx.coroutines.internal.b0`[] `a`(`kotlinx.coroutines.internal.a0` v3 @kind this) @signature `Lkotlinx/coroutines/internal/a0;.a:()[Lkotlinx/coroutines/internal/b0;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1ea494.  v0:= v3.`kotlinx.coroutines.internal.a0.a` @type ^`kotlinx.coroutines.internal.b0`[] @kind object;
  #L1ea498.  if v0 != 0 then goto L1ea4a8;
  #L1ea49c.  v0:= 4I;
  #L1ea49e.  v0:= new `kotlinx.coroutines.internal.b0`[v0];
  #L1ea4a2.  v3.`kotlinx.coroutines.internal.a0.a` @type ^`kotlinx.coroutines.internal.b0`[] := v0 @kind object;
  #L1ea4a6.  goto L1ea4dc;
  #L1ea4a8.  call temp:= `getSize`(v3) @signature `Lkotlinx/coroutines/internal/a0;.getSize:()I` @kind virtual;
  #L1ea4ae.  v1:= temp;
  #L1ea4b0.  v2:= length @variable v0;
  #L1ea4b2.  if v1 < v2 then goto L1ea4dc;
  #L1ea4b6.  call temp:= `getSize`(v3) @signature `Lkotlinx/coroutines/internal/a0;.getSize:()I` @kind virtual;
  #L1ea4bc.  v1:= temp;
  #L1ea4be.  v1:= v1 * 2;
  #L1ea4c2.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L1ea4c8.  v0:= temp @kind object;
  #L1ea4ca.  v1:= "java.util.Arrays.copyOf(this, newSize)" @kind object;
  #L1ea4ce.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ea4d4.  v0:= (`kotlinx.coroutines.internal.b0`[]) v0 @kind object;
  #L1ea4d8.  v3.`kotlinx.coroutines.internal.a0.a` @type ^`kotlinx.coroutines.internal.b0`[] := v0 @kind object;
  #L1ea4dc.  return v0 @kind object;
}
procedure `void` `b`(`kotlinx.coroutines.internal.a0` v5 @kind this, `int` v6 ) @signature `Lkotlinx/coroutines/internal/a0;.b:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ea59c.  v0:= v6 * 2;
  #L1ea5a0.  v0:= v0 + 1;
  #L1ea5a4.  call temp:= `getSize`(v5) @signature `Lkotlinx/coroutines/internal/a0;.getSize:()I` @kind virtual;
  #L1ea5aa.  v1:= temp;
  #L1ea5ac.  if v0 < v1 then goto L1ea5b2;
  #L1ea5b0.  return @kind void;
  #L1ea5b2.  v1:= v5.`kotlinx.coroutines.internal.a0.a` @type ^`kotlinx.coroutines.internal.b0`[] @kind object;
  #L1ea5b6.  call `checkNotNull`(v1) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ea5bc.  v2:= v0 + 1;
  #L1ea5c0.  call temp:= `getSize`(v5) @signature `Lkotlinx/coroutines/internal/a0;.getSize:()I` @kind virtual;
  #L1ea5c6.  v3:= temp;
  #L1ea5c8.  if v2 >= v3 then goto L1ea5f2;
  #L1ea5cc.  v3:= v1[v2] @kind object;
  #L1ea5d0.  call `checkNotNull`(v3) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ea5d6.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L1ea5da.  v4:= v1[v0] @kind object;
  #L1ea5de.  call `checkNotNull`(v4) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ea5e4.  call temp:= `compareTo`(v3, v4) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L1ea5ea.  v3:= temp;
  #L1ea5ec.  if v3 >= 0 then goto L1ea5f2;
  #L1ea5f0.  v0:= v2;
  #L1ea5f2.  v2:= v1[v6] @kind object;
  #L1ea5f6.  call `checkNotNull`(v2) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ea5fc.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L1ea600.  v1:= v1[v0] @kind object;
  #L1ea604.  call `checkNotNull`(v1) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ea60a.  call temp:= `compareTo`(v2, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L1ea610.  v1:= temp;
  #L1ea612.  if v1 > 0 then goto L1ea618;
  #L1ea616.  return @kind void;
  #L1ea618.  call `a`(v5, v6, v0) @signature `Lkotlinx/coroutines/internal/a0;.a:(II)V` @kind direct;
  #L1ea61e.  v6:= v0;
  #L1ea620.  goto L1ea59c;
}
procedure `void` `c`(`kotlinx.coroutines.internal.a0` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/internal/a0;.c:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1ea634.  if v4 > 0 then goto L1ea63a;
  #L1ea638.  return @kind void;
  #L1ea63a.  v0:= v3.`kotlinx.coroutines.internal.a0.a` @type ^`kotlinx.coroutines.internal.b0`[] @kind object;
  #L1ea63e.  call `checkNotNull`(v0) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ea644.  v1:= v4 + -1;
  #L1ea648.  v1:= v1 / 2;
  #L1ea64c.  v2:= v0[v1] @kind object;
  #L1ea650.  call `checkNotNull`(v2) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ea656.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L1ea65a.  v0:= v0[v4] @kind object;
  #L1ea65e.  call `checkNotNull`(v0) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ea664.  call temp:= `compareTo`(v2, v0) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L1ea66a.  v0:= temp;
  #L1ea66c.  if v0 > 0 then goto L1ea672;
  #L1ea670.  return @kind void;
  #L1ea672.  call `a`(v3, v4, v1) @signature `Lkotlinx/coroutines/internal/a0;.a:(II)V` @kind direct;
  #L1ea678.  v4:= v1;
  #L1ea67a.  goto L1ea634;
}
procedure `void` `addImpl`(`kotlinx.coroutines.internal.a0` v3 @kind this, `kotlinx.coroutines.internal.b0` v4 @kind object) @signature `Lkotlinx/coroutines/internal/a0;.addImpl:(Lkotlinx/coroutines/internal/b0;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1ea510.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1ea516.  v0:= temp;
  #L1ea518.  if v0 == 0 then goto L1ea540;
  #L1ea51c.  call temp:= `getHeap`(v4) @signature `Lkotlinx/coroutines/internal/b0;.getHeap:()Lkotlinx/coroutines/internal/a0;` @kind interface;
  #L1ea522.  v0:= temp @kind object;
  #L1ea524.  if v0 != 0 then goto L1ea52c;
  #L1ea528.  v0:= 1I;
  #L1ea52a.  goto L1ea52e;
  #L1ea52c.  v0:= 0I;
  #L1ea52e.  if v0 == 0 then goto L1ea534;
  #L1ea532.  goto L1ea540;
  #L1ea534.  v4:= new `java.lang.AssertionError`;
  #L1ea538.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1ea53e.  throw v4;
  #L1ea540.  call `setHeap`(v4, v3) @signature `Lkotlinx/coroutines/internal/b0;.setHeap:(Lkotlinx/coroutines/internal/a0;)V` @kind interface;
  #L1ea546.  call temp:= `a`(v3) @signature `Lkotlinx/coroutines/internal/a0;.a:()[Lkotlinx/coroutines/internal/b0;` @kind direct;
  #L1ea54c.  v0:= temp @kind object;
  #L1ea54e.  call temp:= `getSize`(v3) @signature `Lkotlinx/coroutines/internal/a0;.getSize:()I` @kind virtual;
  #L1ea554.  v1:= temp;
  #L1ea556.  v2:= v1 + 1;
  #L1ea55a.  call `a`(v3, v2) @signature `Lkotlinx/coroutines/internal/a0;.a:(I)V` @kind direct;
  #L1ea560.  v0[v1]:= v4 @kind object;
  #L1ea564.  call `setIndex`(v4, v1) @signature `Lkotlinx/coroutines/internal/b0;.setIndex:(I)V` @kind interface;
  #L1ea56a.  call `c`(v3, v1) @signature `Lkotlinx/coroutines/internal/a0;.c:(I)V` @kind direct;
  #L1ea570.  return @kind void;
}
procedure `kotlinx.coroutines.internal.b0` `firstImpl`(`kotlinx.coroutines.internal.a0` v2 @kind this) @signature `Lkotlinx/coroutines/internal/a0;.firstImpl:()Lkotlinx/coroutines/internal/b0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1ea2e4.  v0:= v2.`kotlinx.coroutines.internal.a0.a` @type ^`kotlinx.coroutines.internal.b0`[] @kind object;
  #L1ea2e8.  if v0 == 0 then goto L1ea2f4;
  #L1ea2ec.  v1:= 0I;
  #L1ea2ee.  v0:= v0[v1] @kind object;
  #L1ea2f2.  goto L1ea2f6;
  #L1ea2f4.  v0:= 0I;
  #L1ea2f6.  return v0 @kind object;
}
procedure `int` `getSize`(`kotlinx.coroutines.internal.a0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/a0;.getSize:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ea2cc.  v0:= v1.`kotlinx.coroutines.internal.a0._size` @type ^`int`;
  #L1ea2d0.  return v0;
}
procedure `boolean` `isEmpty`(`kotlinx.coroutines.internal.a0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/a0;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ea238.  call temp:= `getSize`(v1) @signature `Lkotlinx/coroutines/internal/a0;.getSize:()I` @kind virtual;
  #L1ea23e.  v0:= temp;
  #L1ea240.  if v0 != 0 then goto L1ea248;
  #L1ea244.  v0:= 1I;
  #L1ea246.  goto L1ea24a;
  #L1ea248.  v0:= 0I;
  #L1ea24a.  return v0;
}
procedure `kotlinx.coroutines.internal.b0` `peek`(`kotlinx.coroutines.internal.a0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/a0;.peek:()Lkotlinx/coroutines/internal/b0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ea308.  @monitorenter v1
  #L1ea30a.  call temp:= `firstImpl`(v1) @signature `Lkotlinx/coroutines/internal/a0;.firstImpl:()Lkotlinx/coroutines/internal/b0;` @kind virtual;
  #L1ea310.  v0:= temp @kind object;
  #L1ea312.  @monitorexit v1
  #L1ea314.  return v0 @kind object;
  #L1ea316.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ea318.  @monitorexit v1
  #L1ea31a.  throw v0;
  catch `java.lang.Throwable` @[L1ea30a..L1ea312] goto L1ea316;
}
procedure `boolean` `remove`(`kotlinx.coroutines.internal.a0` v3 @kind this, `kotlinx.coroutines.internal.b0` v4 @kind object) @signature `Lkotlinx/coroutines/internal/a0;.remove:(Lkotlinx/coroutines/internal/b0;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1ea25c.  @monitorenter v3
  #L1ea25e.  call temp:= `getHeap`(v4) @signature `Lkotlinx/coroutines/internal/b0;.getHeap:()Lkotlinx/coroutines/internal/a0;` @kind interface;
  #L1ea264.  v0:= temp @kind object;
  #L1ea266.  v1:= 1I;
  #L1ea268.  v2:= 0I;
  #L1ea26a.  if v0 != 0 then goto L1ea272;
  #L1ea26e.  v1:= 0I;
  #L1ea270.  goto L1ea2a4;
  #L1ea272.  call temp:= `getIndex`(v4) @signature `Lkotlinx/coroutines/internal/b0;.getIndex:()I` @kind interface;
  #L1ea278.  v4:= temp;
  #L1ea27a.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1ea280.  v0:= temp;
  #L1ea282.  if v0 == 0 then goto L1ea29e;
  #L1ea286.  if v4 < 0 then goto L1ea28c;
  #L1ea28a.  v2:= 1I;
  #L1ea28c.  if v2 == 0 then goto L1ea292;
  #L1ea290.  goto L1ea29e;
  #L1ea292.  v4:= new `java.lang.AssertionError`;
  #L1ea296.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1ea29c.  throw v4;
  #L1ea29e.  call temp:= `removeAtImpl`(v3, v4) @signature `Lkotlinx/coroutines/internal/a0;.removeAtImpl:(I)Lkotlinx/coroutines/internal/b0;` @kind virtual;
  #L1ea2a4.  @monitorexit v3
  #L1ea2a6.  return v1;
  #L1ea2a8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ea2aa.  @monitorexit v3
  #L1ea2ac.  throw v4;
  catch `java.lang.Throwable` @[L1ea25e..L1ea2a4] goto L1ea2a8;
}
procedure `kotlinx.coroutines.internal.b0` `removeAtImpl`(`kotlinx.coroutines.internal.a0` v7 @kind this, `int` v8 ) @signature `Lkotlinx/coroutines/internal/a0;.removeAtImpl:(I)Lkotlinx/coroutines/internal/b0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1ea338.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1ea33e.  v0:= temp;
  #L1ea340.  v1:= 0I;
  #L1ea342.  v2:= 1I;
  #L1ea344.  if v0 == 0 then goto L1ea36c;
  #L1ea348.  call temp:= `getSize`(v7) @signature `Lkotlinx/coroutines/internal/a0;.getSize:()I` @kind virtual;
  #L1ea34e.  v0:= temp;
  #L1ea350.  if v0 <= 0 then goto L1ea358;
  #L1ea354.  v0:= 1I;
  #L1ea356.  goto L1ea35a;
  #L1ea358.  v0:= 0I;
  #L1ea35a.  if v0 == 0 then goto L1ea360;
  #L1ea35e.  goto L1ea36c;
  #L1ea360.  v8:= new `java.lang.AssertionError`;
  #L1ea364.  call `<init>`(v8) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1ea36a.  throw v8;
  #L1ea36c.  v0:= v7.`kotlinx.coroutines.internal.a0.a` @type ^`kotlinx.coroutines.internal.b0`[] @kind object;
  #L1ea370.  call `checkNotNull`(v0) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ea376.  call temp:= `getSize`(v7) @signature `Lkotlinx/coroutines/internal/a0;.getSize:()I` @kind virtual;
  #L1ea37c.  v3:= temp;
  #L1ea37e.  v4:= -1I;
  #L1ea380.  v3:= v3 + v4 @kind int;
  #L1ea382.  call `a`(v7, v3) @signature `Lkotlinx/coroutines/internal/a0;.a:(I)V` @kind direct;
  #L1ea388.  call temp:= `getSize`(v7) @signature `Lkotlinx/coroutines/internal/a0;.getSize:()I` @kind virtual;
  #L1ea38e.  v3:= temp;
  #L1ea390.  if v8 >= v3 then goto L1ea3e6;
  #L1ea394.  call temp:= `getSize`(v7) @signature `Lkotlinx/coroutines/internal/a0;.getSize:()I` @kind virtual;
  #L1ea39a.  v3:= temp;
  #L1ea39c.  call `a`(v7, v8, v3) @signature `Lkotlinx/coroutines/internal/a0;.a:(II)V` @kind direct;
  #L1ea3a2.  v3:= v8 + -1;
  #L1ea3a6.  v3:= v3 / 2;
  #L1ea3aa.  if v8 <= 0 then goto L1ea3e0;
  #L1ea3ae.  v5:= v0[v8] @kind object;
  #L1ea3b2.  call `checkNotNull`(v5) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ea3b8.  v5:= (`java.lang.Comparable`) v5 @kind object;
  #L1ea3bc.  v6:= v0[v3] @kind object;
  #L1ea3c0.  call `checkNotNull`(v6) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ea3c6.  call temp:= `compareTo`(v5, v6) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L1ea3cc.  v5:= temp;
  #L1ea3ce.  if v5 >= 0 then goto L1ea3e0;
  #L1ea3d2.  call `a`(v7, v8, v3) @signature `Lkotlinx/coroutines/internal/a0;.a:(II)V` @kind direct;
  #L1ea3d8.  call `c`(v7, v3) @signature `Lkotlinx/coroutines/internal/a0;.c:(I)V` @kind direct;
  #L1ea3de.  goto L1ea3e6;
  #L1ea3e0.  call `b`(v7, v8) @signature `Lkotlinx/coroutines/internal/a0;.b:(I)V` @kind direct;
  #L1ea3e6.  call temp:= `getSize`(v7) @signature `Lkotlinx/coroutines/internal/a0;.getSize:()I` @kind virtual;
  #L1ea3ec.  v8:= temp;
  #L1ea3ee.  v8:= v0[v8] @kind object;
  #L1ea3f2.  call `checkNotNull`(v8) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ea3f8.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1ea3fe.  v3:= temp;
  #L1ea400.  if v3 == 0 then goto L1ea424;
  #L1ea404.  call temp:= `getHeap`(v8) @signature `Lkotlinx/coroutines/internal/b0;.getHeap:()Lkotlinx/coroutines/internal/a0;` @kind interface;
  #L1ea40a.  v3:= temp @kind object;
  #L1ea40c.  if v3 != v7 then goto L1ea412;
  #L1ea410.  v1:= 1I;
  #L1ea412.  if v1 == 0 then goto L1ea418;
  #L1ea416.  goto L1ea424;
  #L1ea418.  v8:= new `java.lang.AssertionError`;
  #L1ea41c.  call `<init>`(v8) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1ea422.  throw v8;
  #L1ea424.  v1:= 0I;
  #L1ea426.  call `setHeap`(v8, v1) @signature `Lkotlinx/coroutines/internal/b0;.setHeap:(Lkotlinx/coroutines/internal/a0;)V` @kind interface;
  #L1ea42c.  call `setIndex`(v8, v4) @signature `Lkotlinx/coroutines/internal/b0;.setIndex:(I)V` @kind interface;
  #L1ea432.  call temp:= `getSize`(v7) @signature `Lkotlinx/coroutines/internal/a0;.getSize:()I` @kind virtual;
  #L1ea438.  v2:= temp;
  #L1ea43a.  v0[v2]:= v1 @kind object;
  #L1ea43e.  return v8 @kind object;
}
procedure `kotlinx.coroutines.internal.b0` `removeFirstOrNull`(`kotlinx.coroutines.internal.a0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/a0;.removeFirstOrNull:()Lkotlinx/coroutines/internal/b0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ea450.  @monitorenter v1
  #L1ea452.  call temp:= `getSize`(v1) @signature `Lkotlinx/coroutines/internal/a0;.getSize:()I` @kind virtual;
  #L1ea458.  v0:= temp;
  #L1ea45a.  if v0 <= 0 then goto L1ea46a;
  #L1ea45e.  v0:= 0I;
  #L1ea460.  call temp:= `removeAtImpl`(v1, v0) @signature `Lkotlinx/coroutines/internal/a0;.removeAtImpl:(I)Lkotlinx/coroutines/internal/b0;` @kind virtual;
  #L1ea466.  v0:= temp @kind object;
  #L1ea468.  goto L1ea46c;
  #L1ea46a.  v0:= 0I;
  #L1ea46c.  @monitorexit v1
  #L1ea46e.  return v0 @kind object;
  #L1ea470.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ea472.  @monitorexit v1
  #L1ea474.  throw v0;
  catch `java.lang.Throwable` @[L1ea452..L1ea468] goto L1ea470;
}
