record `kotlinx.coroutines.internal.g` @kind class @AccessFlag PUBLIC_FINAL {
}
global `int` `@@kotlinx.coroutines.internal.g.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.locks.ReentrantReadWriteLock` `@@kotlinx.coroutines.internal.g.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.WeakHashMap` `@@kotlinx.coroutines.internal.g.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1e7cd4.  v0:= constclass @type ^`java.lang.Throwable` @kind object;
  #L1e7cd8.  v1:= -1I;
  #L1e7cda.  call temp:= `b`(v0, v1) @signature `Lkotlinx/coroutines/internal/g;.b:(Ljava/lang/Class;I)I` @kind static;
  #L1e7ce0.  v0:= temp;
  #L1e7ce2.  `@@kotlinx.coroutines.internal.g.a` @type ^`int` := v0;
  #L1e7ce6.  v0:= new `java.util.concurrent.locks.ReentrantReadWriteLock`;
  #L1e7cea.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.<init>:()V` @kind direct;
  #L1e7cf0.  `@@kotlinx.coroutines.internal.g.b` @type ^`java.util.concurrent.locks.ReentrantReadWriteLock` := v0 @kind object;
  #L1e7cf4.  v0:= new `java.util.WeakHashMap`;
  #L1e7cf8.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L1e7cfe.  `@@kotlinx.coroutines.internal.g.c` @type ^`java.util.WeakHashMap` := v0 @kind object;
  #L1e7d02.  return @kind void;
}
procedure `int` `a`(`java.lang.Class` v5 @kind object, `int` v6 ) @signature `Lkotlinx/coroutines/internal/g;.a:(Ljava/lang/Class;I)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e78d8.  call temp:= `getDeclaredFields`(v5) @signature `Ljava/lang/Class;.getDeclaredFields:()[Ljava/lang/reflect/Field;` @kind virtual;
  #L1e78de.  v0:= temp @kind object;
  #L1e78e0.  v1:= length @variable v0;
  #L1e78e2.  v2:= 0I;
  #L1e78e4.  v3:= 0I;
  #L1e78e6.  if v2 >= v1 then goto L1e7910;
  #L1e78ea.  v4:= v0[v2] @kind object;
  #L1e78ee.  call temp:= `getModifiers`(v4) @signature `Ljava/lang/reflect/Field;.getModifiers:()I` @kind virtual;
  #L1e78f4.  v4:= temp;
  #L1e78f6.  call temp:= `isStatic`(v4) @signature `Ljava/lang/reflect/Modifier;.isStatic:(I)Z` @kind static;
  #L1e78fc.  v4:= temp;
  #L1e78fe.  v4:= v4 ^~ 1;
  #L1e7902.  if v4 == 0 then goto L1e790a;
  #L1e7906.  v3:= v3 + 1;
  #L1e790a.  v2:= v2 + 1;
  #L1e790e.  goto L1e78e6;
  #L1e7910.  v6:= v6 + v3 @kind int;
  #L1e7912.  call temp:= `getSuperclass`(v5) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L1e7918.  v5:= temp @kind object;
  #L1e791a.  if v5 == 0 then goto L1e7920;
  #L1e791e.  goto L1e78d8;
  #L1e7920.  return v6;
}
procedure `int` `a`(`java.lang.Class` v0 @kind object, `int` v1 , `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/internal/g;.a:(Ljava/lang/Class;IILjava/lang/Object;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1e78b4.  v2:= v2 ^& 1;
  #L1e78b8.  if v2 == 0 then goto L1e78be;
  #L1e78bc.  v1:= 0I;
  #L1e78be.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/internal/g;.a:(Ljava/lang/Class;I)I` @kind static;
  #L1e78c4.  v0:= temp;
  #L1e78c6.  return v0;
}
procedure `kotlin.v.b.l` `a`(`java.lang.reflect.Constructor` v6 @kind object) @signature `Lkotlinx/coroutines/internal/g;.a:(Ljava/lang/reflect/Constructor;)Lkotlin/v/b/l;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1e7c28.  call temp:= `getParameterTypes`(v6) @signature `Ljava/lang/reflect/Constructor;.getParameterTypes:()[Ljava/lang/Class;` @kind virtual;
  #L1e7c2e.  v0:= temp @kind object;
  #L1e7c30.  v1:= length @variable v0;
  #L1e7c32.  v2:= 0I;
  #L1e7c34.  if v1 == 0 then goto L1e7cb8;
  #L1e7c38.  v3:= 0I;
  #L1e7c3a.  v4:= 1I;
  #L1e7c3c.  if v1 == v4 then goto L1e7c7c;
  #L1e7c40.  v5:= 2I;
  #L1e7c42.  if v1 == v5 then goto L1e7c48;
  #L1e7c46.  goto L1e7cc2;
  #L1e7c48.  v1:= v0[v3] @kind object;
  #L1e7c4c.  v3:= constclass @type ^`java.lang.String` @kind object;
  #L1e7c50.  call temp:= `areEqual`(v1, v3) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1e7c56.  v1:= temp;
  #L1e7c58.  if v1 == 0 then goto L1e7cc2;
  #L1e7c5c.  v0:= v0[v4] @kind object;
  #L1e7c60.  v1:= constclass @type ^`java.lang.Throwable` @kind object;
  #L1e7c64.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1e7c6a.  v0:= temp;
  #L1e7c6c.  if v0 == 0 then goto L1e7cc2;
  #L1e7c70.  v2:= new `kotlinx.coroutines.internal.g$a`;
  #L1e7c74.  call `<init>`(v2, v6) @signature `Lkotlinx/coroutines/internal/g$a;.<init>:(Ljava/lang/reflect/Constructor;)V` @kind direct;
  #L1e7c7a.  goto L1e7cc2;
  #L1e7c7c.  v0:= v0[v3] @kind object;
  #L1e7c80.  v1:= constclass @type ^`java.lang.Throwable` @kind object;
  #L1e7c84.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1e7c8a.  v1:= temp;
  #L1e7c8c.  if v1 == 0 then goto L1e7c9c;
  #L1e7c90.  v2:= new `kotlinx.coroutines.internal.g$b`;
  #L1e7c94.  call `<init>`(v2, v6) @signature `Lkotlinx/coroutines/internal/g$b;.<init>:(Ljava/lang/reflect/Constructor;)V` @kind direct;
  #L1e7c9a.  goto L1e7cc2;
  #L1e7c9c.  v1:= constclass @type ^`java.lang.String` @kind object;
  #L1e7ca0.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1e7ca6.  v0:= temp;
  #L1e7ca8.  if v0 == 0 then goto L1e7cc2;
  #L1e7cac.  v2:= new `kotlinx.coroutines.internal.g$c`;
  #L1e7cb0.  call `<init>`(v2, v6) @signature `Lkotlinx/coroutines/internal/g$c;.<init>:(Ljava/lang/reflect/Constructor;)V` @kind direct;
  #L1e7cb6.  goto L1e7cc2;
  #L1e7cb8.  v2:= new `kotlinx.coroutines.internal.g$d`;
  #L1e7cbc.  call `<init>`(v2, v6) @signature `Lkotlinx/coroutines/internal/g$d;.<init>:(Ljava/lang/reflect/Constructor;)V` @kind direct;
  #L1e7cc2.  return v2 @kind object;
}
procedure `int` `b`(`java.lang.Class` v3 @kind object, `int` v4 ) @signature `Lkotlinx/coroutines/internal/g;.b:(Ljava/lang/Class;I)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1e7934.  call temp:= `getKotlinClass`(v3) @signature `Lkotlin/v/a;.getKotlinClass:(Ljava/lang/Class;)Lkotlin/y/b;` @kind static;
  #L1e793a.  v0:= `@@kotlin.l.f` @type ^`kotlin.l$a` @kind object;
  #L1e793e.  v0:= 0I;
  #L1e7940.  v1:= 1I;
  #L1e7942.  v2:= 0I;
  #L1e7944.  call temp:= `a`(v3, v0, v1, v2) @signature `Lkotlinx/coroutines/internal/g;.a:(Ljava/lang/Class;IILjava/lang/Object;)I` @kind static;
  #L1e794a.  v3:= temp;
  #L1e794c.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1e7952.  v3:= temp @kind object;
  #L1e7954.  call temp:= `constructor-impl`(v3) @signature `Lkotlin/l;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1e795a.  goto L1e7970;
  #L1e795c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1e795e.  v0:= `@@kotlin.l.f` @type ^`kotlin.l$a` @kind object;
  #L1e7962.  call temp:= `createFailure`(v3) @signature `Lkotlin/m;.createFailure:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L1e7968.  v3:= temp @kind object;
  #L1e796a.  call temp:= `constructor-impl`(v3) @signature `Lkotlin/l;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1e7970.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1e7976.  v4:= temp @kind object;
  #L1e7978.  call temp:= `isFailure-impl`(v3) @signature `Lkotlin/l;.isFailure-impl:(Ljava/lang/Object;)Z` @kind static;
  #L1e797e.  v0:= temp;
  #L1e7980.  if v0 == 0 then goto L1e7986;
  #L1e7984.  v3:= v4 @kind object;
  #L1e7986.  v3:= (`java.lang.Number`) v3 @kind object;
  #L1e798a.  call temp:= `intValue`(v3) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L1e7990.  v3:= temp;
  #L1e7992.  return v3;
  catch `java.lang.Throwable` @[L1e793a..L1e795a] goto L1e795c;
}
procedure `java.lang.Throwable` `tryCopyException`(`java.lang.Throwable` v9 @kind object) @signature `Lkotlinx/coroutines/internal/g;.tryCopyException:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1e79b0.  v0:= instanceof @variable v9 @type ^`kotlinx.coroutines.v` @kind boolean;
  #L1e79b4.  v1:= 0I;
  #L1e79b6.  if v0 == 0 then goto L1e79fa;
  #L1e79ba.  v0:= `@@kotlin.l.f` @type ^`kotlin.l$a` @kind object;
  #L1e79be.  v9:= (`kotlinx.coroutines.v`) v9 @kind object;
  #L1e79c2.  call temp:= `createCopy`(v9) @signature `Lkotlinx/coroutines/v;.createCopy:()Ljava/lang/Throwable;` @kind interface;
  #L1e79c8.  v9:= temp @kind object;
  #L1e79ca.  call temp:= `constructor-impl`(v9) @signature `Lkotlin/l;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1e79d0.  goto L1e79e6;
  #L1e79d2.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1e79d4.  v0:= `@@kotlin.l.f` @type ^`kotlin.l$a` @kind object;
  #L1e79d8.  call temp:= `createFailure`(v9) @signature `Lkotlin/m;.createFailure:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L1e79de.  v9:= temp @kind object;
  #L1e79e0.  call temp:= `constructor-impl`(v9) @signature `Lkotlin/l;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1e79e6.  call temp:= `isFailure-impl`(v9) @signature `Lkotlin/l;.isFailure-impl:(Ljava/lang/Object;)Z` @kind static;
  #L1e79ec.  v0:= temp;
  #L1e79ee.  if v0 == 0 then goto L1e79f4;
  #L1e79f2.  v9:= v1 @kind object;
  #L1e79f4.  v9:= (`java.lang.Throwable`) v9 @kind object;
  #L1e79f8.  return v9 @kind object;
  #L1e79fa.  v0:= `@@kotlinx.coroutines.internal.g.b` @type ^`java.util.concurrent.locks.ReentrantReadWriteLock` @kind object;
  #L1e79fe.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;` @kind virtual;
  #L1e7a04.  v0:= temp @kind object;
  #L1e7a06.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L1e7a0c.  v2:= `@@kotlinx.coroutines.internal.g.c` @type ^`java.util.WeakHashMap` @kind object;
  #L1e7a10.  call temp:= `getClass`(v9) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1e7a16.  v3:= temp @kind object;
  #L1e7a18.  call temp:= `get`(v2, v3) @signature `Ljava/util/WeakHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1e7a1e.  v2:= temp @kind object;
  #L1e7a20.  v2:= (`kotlin.v.b.l`) v2 @kind object;
  #L1e7a24.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L1e7a2a.  if v2 == 0 then goto L1e7a3c;
  #L1e7a2e.  call temp:= `invoke`(v2, v9) @signature `Lkotlin/v/b/l;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1e7a34.  v9:= temp @kind object;
  #L1e7a36.  v9:= (`java.lang.Throwable`) v9 @kind object;
  #L1e7a3a.  return v9 @kind object;
  #L1e7a3c.  v0:= `@@kotlinx.coroutines.internal.g.a` @type ^`int`;
  #L1e7a40.  call temp:= `getClass`(v9) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1e7a46.  v2:= temp @kind object;
  #L1e7a48.  v3:= 0I;
  #L1e7a4a.  call temp:= `b`(v2, v3) @signature `Lkotlinx/coroutines/internal/g;.b:(Ljava/lang/Class;I)I` @kind static;
  #L1e7a50.  v2:= temp;
  #L1e7a52.  if v0 == v2 then goto L1e7ae6;
  #L1e7a56.  v0:= `@@kotlinx.coroutines.internal.g.b` @type ^`java.util.concurrent.locks.ReentrantReadWriteLock` @kind object;
  #L1e7a5a.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;` @kind virtual;
  #L1e7a60.  v2:= temp @kind object;
  #L1e7a62.  call temp:= `getWriteHoldCount`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.getWriteHoldCount:()I` @kind virtual;
  #L1e7a68.  v4:= temp;
  #L1e7a6a.  if v4 != 0 then goto L1e7a78;
  #L1e7a6e.  call temp:= `getReadHoldCount`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.getReadHoldCount:()I` @kind virtual;
  #L1e7a74.  v4:= temp;
  #L1e7a76.  goto L1e7a7a;
  #L1e7a78.  v4:= 0I;
  #L1e7a7a.  v5:= 0I;
  #L1e7a7c.  if v5 >= v4 then goto L1e7a8c;
  #L1e7a80.  call `unlock`(v2) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L1e7a86.  v5:= v5 + 1;
  #L1e7a8a.  goto L1e7a7c;
  #L1e7a8c.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;` @kind virtual;
  #L1e7a92.  v0:= temp @kind object;
  #L1e7a94.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.lock:()V` @kind virtual;
  #L1e7a9a.  v5:= `@@kotlinx.coroutines.internal.g.c` @type ^`java.util.WeakHashMap` @kind object;
  #L1e7a9e.  call temp:= `getClass`(v9) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1e7aa4.  v9:= temp @kind object;
  #L1e7aa6.  v6:= `@@kotlinx.coroutines.internal.g$f.f` @type ^`kotlinx.coroutines.internal.g$f` @kind object;
  #L1e7aaa.  call temp:= `put`(v5, v9, v6) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1e7ab0.  v9:= `@@kotlin.q.a` @type ^`kotlin.q` @kind object;
  #L1e7ab4.  if v3 >= v4 then goto L1e7ac4;
  #L1e7ab8.  call `lock`(v2) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L1e7abe.  v3:= v3 + 1;
  #L1e7ac2.  goto L1e7ab4;
  #L1e7ac4.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L1e7aca.  return v1 @kind object;
  #L1e7acc.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1e7ace.  if v3 >= v4 then goto L1e7ade;
  #L1e7ad2.  call `lock`(v2) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L1e7ad8.  v3:= v3 + 1;
  #L1e7adc.  goto L1e7ace;
  #L1e7ade.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L1e7ae4.  throw v9;
  #L1e7ae6.  call temp:= `getClass`(v9) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1e7aec.  v0:= temp @kind object;
  #L1e7aee.  call temp:= `getConstructors`(v0) @signature `Ljava/lang/Class;.getConstructors:()[Ljava/lang/reflect/Constructor;` @kind virtual;
  #L1e7af4.  v0:= temp @kind object;
  #L1e7af6.  v2:= new `kotlinx.coroutines.internal.g$e`;
  #L1e7afa.  call `<init>`(v2) @signature `Lkotlinx/coroutines/internal/g$e;.<init>:()V` @kind direct;
  #L1e7b00.  call temp:= `sortedWith`(v0, v2) @signature `Lkotlin/r/d;.sortedWith:([Ljava/lang/Object;Ljava/util/Comparator;)Ljava/util/List;` @kind static;
  #L1e7b06.  v0:= temp @kind object;
  #L1e7b08.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1e7b0e.  v0:= temp @kind object;
  #L1e7b10.  v2:= v1 @kind object;
  #L1e7b12.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1e7b18.  v4:= temp;
  #L1e7b1a.  if v4 == 0 then goto L1e7b36;
  #L1e7b1e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1e7b24.  v2:= temp @kind object;
  #L1e7b26.  v2:= (`java.lang.reflect.Constructor`) v2 @kind object;
  #L1e7b2a.  call temp:= `a`(v2) @signature `Lkotlinx/coroutines/internal/g;.a:(Ljava/lang/reflect/Constructor;)Lkotlin/v/b/l;` @kind static;
  #L1e7b30.  v2:= temp @kind object;
  #L1e7b32.  if v2 == 0 then goto L1e7b12;
  #L1e7b36.  v0:= `@@kotlinx.coroutines.internal.g.b` @type ^`java.util.concurrent.locks.ReentrantReadWriteLock` @kind object;
  #L1e7b3a.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;` @kind virtual;
  #L1e7b40.  v4:= temp @kind object;
  #L1e7b42.  call temp:= `getWriteHoldCount`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.getWriteHoldCount:()I` @kind virtual;
  #L1e7b48.  v5:= temp;
  #L1e7b4a.  if v5 != 0 then goto L1e7b58;
  #L1e7b4e.  call temp:= `getReadHoldCount`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.getReadHoldCount:()I` @kind virtual;
  #L1e7b54.  v5:= temp;
  #L1e7b56.  goto L1e7b5a;
  #L1e7b58.  v5:= 0I;
  #L1e7b5a.  v6:= 0I;
  #L1e7b5c.  if v6 >= v5 then goto L1e7b6c;
  #L1e7b60.  call `unlock`(v4) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L1e7b66.  v6:= v6 + 1;
  #L1e7b6a.  goto L1e7b5c;
  #L1e7b6c.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;` @kind virtual;
  #L1e7b72.  v0:= temp @kind object;
  #L1e7b74.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.lock:()V` @kind virtual;
  #L1e7b7a.  v6:= `@@kotlinx.coroutines.internal.g.c` @type ^`java.util.WeakHashMap` @kind object;
  #L1e7b7e.  call temp:= `getClass`(v9) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1e7b84.  v7:= temp @kind object;
  #L1e7b86.  if v2 == 0 then goto L1e7b8e;
  #L1e7b8a.  v8:= v2 @kind object;
  #L1e7b8c.  goto L1e7b92;
  #L1e7b8e.  v8:= `@@kotlinx.coroutines.internal.g$g.f` @type ^`kotlinx.coroutines.internal.g$g` @kind object;
  #L1e7b92.  call temp:= `put`(v6, v7, v8) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1e7b98.  v6:= `@@kotlin.q.a` @type ^`kotlin.q` @kind object;
  #L1e7b9c.  if v3 >= v5 then goto L1e7bac;
  #L1e7ba0.  call `lock`(v4) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L1e7ba6.  v3:= v3 + 1;
  #L1e7baa.  goto L1e7b9c;
  #L1e7bac.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L1e7bb2.  if v2 == 0 then goto L1e7bc4;
  #L1e7bb6.  call temp:= `invoke`(v2, v9) @signature `Lkotlin/v/b/l;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1e7bbc.  v9:= temp @kind object;
  #L1e7bbe.  v1:= v9 @kind object;
  #L1e7bc0.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L1e7bc4.  return v1 @kind object;
  #L1e7bc6.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1e7bc8.  if v3 >= v5 then goto L1e7bd8;
  #L1e7bcc.  call `lock`(v4) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L1e7bd2.  v3:= v3 + 1;
  #L1e7bd6.  goto L1e7bc8;
  #L1e7bd8.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L1e7bde.  throw v9;
  #L1e7be0.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1e7be2.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L1e7be8.  throw v9;
  catch `java.lang.Throwable` @[L1e79ba..L1e79d0] goto L1e79d2;
  catch `java.lang.Throwable` @[L1e7a0c..L1e7a24] goto L1e7be0;
  catch `java.lang.Throwable` @[L1e7a9a..L1e7ab4] goto L1e7acc;
  catch `java.lang.Throwable` @[L1e7b7a..L1e7b9c] goto L1e7bc6;
}
