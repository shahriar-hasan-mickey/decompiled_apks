record `kotlinx.coroutines.internal.m` @kind class @AccessFlag PUBLIC {
  `java.lang.Object` `kotlinx.coroutines.internal.m._cur` @AccessFlag PRIVATE_VOLATILE;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.m.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/m;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1e9034.  v0:= constclass @type ^`kotlinx.coroutines.internal.m` @kind object;
  #L1e9038.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L1e903c.  v2:= "_cur" @kind object;
  #L1e9040.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L1e9046.  v0:= temp @kind object;
  #L1e9048.  `@@kotlinx.coroutines.internal.m.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L1e904c.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.m` v2 @kind this, `boolean` v3 ) @signature `Lkotlinx/coroutines/internal/m;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1e9060.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e9066.  v0:= new `kotlinx.coroutines.internal.n`;
  #L1e906a.  v1:= 8I;
  #L1e906e.  call `<init>`(v0, v1, v3) @signature `Lkotlinx/coroutines/internal/n;.<init>:(IZ)V` @kind direct;
  #L1e9074.  v2.`kotlinx.coroutines.internal.m._cur` @type ^`java.lang.Object` := v0 @kind object;
  #L1e9078.  return @kind void;
}
procedure `boolean` `addLast`(`kotlinx.coroutines.internal.m` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/internal/m;.addLast:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1e8f84.  v0:= v3.`kotlinx.coroutines.internal.m._cur` @type ^`java.lang.Object` @kind object;
  #L1e8f88.  v0:= (`kotlinx.coroutines.internal.n`) v0 @kind object;
  #L1e8f8c.  call temp:= `addLast`(v0, v4) @signature `Lkotlinx/coroutines/internal/n;.addLast:(Ljava/lang/Object;)I` @kind virtual;
  #L1e8f92.  v1:= temp;
  #L1e8f94.  v2:= 1I;
  #L1e8f96.  if v1 == 0 then goto L1e8fbe;
  #L1e8f9a.  if v1 == v2 then goto L1e8faa;
  #L1e8f9e.  v0:= 2I;
  #L1e8fa0.  if v1 == v0 then goto L1e8fa6;
  #L1e8fa4.  goto L1e8f84;
  #L1e8fa6.  v4:= 0I;
  #L1e8fa8.  return v4;
  #L1e8faa.  v1:= `@@kotlinx.coroutines.internal.m.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e8fae.  call temp:= `next`(v0) @signature `Lkotlinx/coroutines/internal/n;.next:()Lkotlinx/coroutines/internal/n;` @kind virtual;
  #L1e8fb4.  v2:= temp @kind object;
  #L1e8fb6.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e8fbc.  goto L1e8f84;
  #L1e8fbe.  return v2;
}
procedure `void` `close`(`kotlinx.coroutines.internal.m` v3 @kind this) @signature `Lkotlinx/coroutines/internal/m;.close:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1e908c.  v0:= v3.`kotlinx.coroutines.internal.m._cur` @type ^`java.lang.Object` @kind object;
  #L1e9090.  v0:= (`kotlinx.coroutines.internal.n`) v0 @kind object;
  #L1e9094.  call temp:= `close`(v0) @signature `Lkotlinx/coroutines/internal/n;.close:()Z` @kind virtual;
  #L1e909a.  v1:= temp;
  #L1e909c.  if v1 == 0 then goto L1e90a2;
  #L1e90a0.  return @kind void;
  #L1e90a2.  v1:= `@@kotlinx.coroutines.internal.m.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e90a6.  call temp:= `next`(v0) @signature `Lkotlinx/coroutines/internal/n;.next:()Lkotlinx/coroutines/internal/n;` @kind virtual;
  #L1e90ac.  v2:= temp @kind object;
  #L1e90ae.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e90b4.  goto L1e908c;
}
procedure `int` `getSize`(`kotlinx.coroutines.internal.m` v1 @kind this) @signature `Lkotlinx/coroutines/internal/m;.getSize:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1e8fd0.  v0:= v1.`kotlinx.coroutines.internal.m._cur` @type ^`java.lang.Object` @kind object;
  #L1e8fd4.  v0:= (`kotlinx.coroutines.internal.n`) v0 @kind object;
  #L1e8fd8.  call temp:= `getSize`(v0) @signature `Lkotlinx/coroutines/internal/n;.getSize:()I` @kind virtual;
  #L1e8fde.  v0:= temp;
  #L1e8fe0.  return v0;
}
procedure `java.lang.Object` `removeFirstOrNull`(`kotlinx.coroutines.internal.m` v3 @kind this) @signature `Lkotlinx/coroutines/internal/m;.removeFirstOrNull:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1e8ff4.  v0:= v3.`kotlinx.coroutines.internal.m._cur` @type ^`java.lang.Object` @kind object;
  #L1e8ff8.  v0:= (`kotlinx.coroutines.internal.n`) v0 @kind object;
  #L1e8ffc.  call temp:= `removeFirstOrNull`(v0) @signature `Lkotlinx/coroutines/internal/n;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L1e9002.  v1:= temp @kind object;
  #L1e9004.  v2:= `@@kotlinx.coroutines.internal.n.g` @type ^`kotlinx.coroutines.internal.v` @kind object;
  #L1e9008.  if v1 == v2 then goto L1e900e;
  #L1e900c.  return v1 @kind object;
  #L1e900e.  v1:= `@@kotlinx.coroutines.internal.m.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e9012.  call temp:= `next`(v0) @signature `Lkotlinx/coroutines/internal/n;.next:()Lkotlinx/coroutines/internal/n;` @kind virtual;
  #L1e9018.  v2:= temp @kind object;
  #L1e901a.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e9020.  goto L1e8ff4;
}
