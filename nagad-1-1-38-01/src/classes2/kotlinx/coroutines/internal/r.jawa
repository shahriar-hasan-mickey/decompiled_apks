record `kotlinx.coroutines.internal.r` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.r` v0 @kind this) @signature `Lkotlinx/coroutines/internal/r;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1e94f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e94fa.  return @kind void;
}
procedure `kotlinx.coroutines.internal.c` `getAtomicOp`() @signature `Lkotlinx/coroutines/internal/r;.getAtomicOp:()Lkotlinx/coroutines/internal/c;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEarlierThan`(`kotlinx.coroutines.internal.r` v6 @kind this, `kotlinx.coroutines.internal.r` v7 @kind object) @signature `Lkotlinx/coroutines/internal/r;.isEarlierThan:(Lkotlinx/coroutines/internal/r;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1e9460.  call temp:= `getAtomicOp`(v6) @signature `Lkotlinx/coroutines/internal/r;.getAtomicOp:()Lkotlinx/coroutines/internal/c;` @kind virtual;
  #L1e9466.  v0:= temp @kind object;
  #L1e9468.  v1:= 0I;
  #L1e946a.  if v0 == 0 then goto L1e9494;
  #L1e946e.  call temp:= `getAtomicOp`(v7) @signature `Lkotlinx/coroutines/internal/r;.getAtomicOp:()Lkotlinx/coroutines/internal/c;` @kind virtual;
  #L1e9474.  v7:= temp @kind object;
  #L1e9476.  if v7 == 0 then goto L1e9494;
  #L1e947a.  call temp:= `getOpSequence`(v0) @signature `Lkotlinx/coroutines/internal/c;.getOpSequence:()J` @kind virtual;
  #L1e9480.  v2:= temp @kind wide;
  #L1e9482.  call temp:= `getOpSequence`(v7) @signature `Lkotlinx/coroutines/internal/c;.getOpSequence:()J` @kind virtual;
  #L1e9488.  v4:= temp @kind wide;
  #L1e948a.  v7:= lcmp(v2, v4);
  #L1e948e.  if v7 >= 0 then goto L1e9494;
  #L1e9492.  v1:= 1I;
  #L1e9494.  return v1;
}
procedure `java.lang.Object` `perform`(`java.lang.Object` v0 @kind object) @signature `Lkotlinx/coroutines/internal/r;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.internal.r` v2 @kind this) @signature `Lkotlinx/coroutines/internal/r;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1e94a8.  v0:= new `java.lang.StringBuilder`;
  #L1e94ac.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e94b2.  call temp:= `getClassSimpleName`(v2) @signature `Lkotlinx/coroutines/i0;.getClassSimpleName:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1e94b8.  v1:= temp @kind object;
  #L1e94ba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e94c0.  v1:= 64I;
  #L1e94c4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e94ca.  call temp:= `getHexAddress`(v2) @signature `Lkotlinx/coroutines/i0;.getHexAddress:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1e94d0.  v1:= temp @kind object;
  #L1e94d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e94d8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e94de.  v0:= temp @kind object;
  #L1e94e0.  return v0 @kind object;
}
