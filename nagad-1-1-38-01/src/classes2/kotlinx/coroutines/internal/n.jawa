record `kotlinx.coroutines.internal.n` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Object` `kotlinx.coroutines.internal.n._next` @AccessFlag PRIVATE_VOLATILE;
  `long` `kotlinx.coroutines.internal.n._state` @AccessFlag PRIVATE_VOLATILE;
  `int` `kotlinx.coroutines.internal.n.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.internal.n.b` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.internal.n.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlinx.coroutines.internal.n.d` @AccessFlag PRIVATE_FINAL;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.n.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicLongFieldUpdater` `@@kotlinx.coroutines.internal.n.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `kotlinx.coroutines.internal.v` `@@kotlinx.coroutines.internal.n.g` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlinx.coroutines.internal.n$a` `@@kotlinx.coroutines.internal.n.h` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/n;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1e8e84.  v0:= constclass @type ^`kotlinx.coroutines.internal.n` @kind object;
  #L1e8e88.  v1:= new `kotlinx.coroutines.internal.n$a`;
  #L1e8e8c.  v2:= 0I;
  #L1e8e8e.  call `<init>`(v1, v2) @signature `Lkotlinx/coroutines/internal/n$a;.<init>:(Lkotlin/v/c/f;)V` @kind direct;
  #L1e8e94.  `@@kotlinx.coroutines.internal.n.h` @type ^`kotlinx.coroutines.internal.n$a` := v1 @kind object;
  #L1e8e98.  v1:= new `kotlinx.coroutines.internal.v`;
  #L1e8e9c.  v2:= "REMOVE_FROZEN" @kind object;
  #L1e8ea0.  call `<init>`(v1, v2) @signature `Lkotlinx/coroutines/internal/v;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e8ea6.  `@@kotlinx.coroutines.internal.n.g` @type ^`kotlinx.coroutines.internal.v` := v1 @kind object;
  #L1e8eaa.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L1e8eae.  v2:= "_next" @kind object;
  #L1e8eb2.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L1e8eb8.  v1:= temp @kind object;
  #L1e8eba.  `@@kotlinx.coroutines.internal.n.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v1 @kind object;
  #L1e8ebe.  v1:= "_state" @kind object;
  #L1e8ec2.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;` @kind static;
  #L1e8ec8.  v0:= temp @kind object;
  #L1e8eca.  `@@kotlinx.coroutines.internal.n.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` := v0 @kind object;
  #L1e8ece.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.n` v3 @kind this, `int` v4 , `boolean` v5 ) @signature `Lkotlinx/coroutines/internal/n;.<init>:(IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1e8ee0.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e8ee6.  v3.`kotlinx.coroutines.internal.n.c` @type ^`int` := v4;
  #L1e8eea.  v3.`kotlinx.coroutines.internal.n.d` @type ^`boolean` := v5 @kind boolean;
  #L1e8eee.  v4:= v3.`kotlinx.coroutines.internal.n.c` @type ^`int`;
  #L1e8ef2.  v5:= v4 + -1;
  #L1e8ef6.  v3.`kotlinx.coroutines.internal.n.a` @type ^`int` := v5;
  #L1e8efa.  v5:= 0I;
  #L1e8efc.  v3.`kotlinx.coroutines.internal.n._next` @type ^`java.lang.Object` := v5 @kind object;
  #L1e8f00.  v0:= 0L;
  #L1e8f04.  v3.`kotlinx.coroutines.internal.n._state` @type ^`long` := v0 @kind wide;
  #L1e8f08.  v5:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L1e8f0c.  call `<init>`(v5, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L1e8f12.  v3.`kotlinx.coroutines.internal.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v5 @kind object;
  #L1e8f16.  v4:= v3.`kotlinx.coroutines.internal.n.a` @type ^`int`;
  #L1e8f1a.  v5:= 0I;
  #L1e8f1c.  v0:= 1I;
  #L1e8f1e.  v1:= 1073741823I;
  #L1e8f24.  if v4 > v1 then goto L1e8f2c;
  #L1e8f28.  v4:= 1I;
  #L1e8f2a.  goto L1e8f2e;
  #L1e8f2c.  v4:= 0I;
  #L1e8f2e.  v1:= "Check failed." @kind object;
  #L1e8f32.  if v4 == 0 then goto L1e8f60;
  #L1e8f36.  v4:= v3.`kotlinx.coroutines.internal.n.c` @type ^`int`;
  #L1e8f3a.  v2:= v3.`kotlinx.coroutines.internal.n.a` @type ^`int`;
  #L1e8f3e.  v4:= v4 ^& v2 @kind int;
  #L1e8f40.  if v4 != 0 then goto L1e8f46;
  #L1e8f44.  v5:= 1I;
  #L1e8f46.  if v5 == 0 then goto L1e8f4c;
  #L1e8f4a.  return @kind void;
  #L1e8f4c.  v4:= new `java.lang.IllegalStateException`;
  #L1e8f50.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e8f56.  v5:= temp @kind object;
  #L1e8f58.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e8f5e.  throw v4;
  #L1e8f60.  v4:= new `java.lang.IllegalStateException`;
  #L1e8f64.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e8f6a.  v5:= temp @kind object;
  #L1e8f6c.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e8f72.  throw v4;
}
procedure `long` `a`(`kotlinx.coroutines.internal.n` v9 @kind this) @signature `Lkotlinx/coroutines/internal/n;.a:()J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1e8e40.  v2:= v9.`kotlinx.coroutines.internal.n._state` @type ^`long` @kind wide;
  #L1e8e44.  v0:= 1152921504606846976L;
  #L1e8e48.  v4:= v2 ^& v0 @kind long;
  #L1e8e4c.  v6:= 0L;
  #L1e8e50.  v8:= lcmp(v4, v6);
  #L1e8e54.  if v8 == 0 then goto L1e8e5a;
  #L1e8e58.  return v2 @kind wide;
  #L1e8e5a.  v6:= v2 ^| v0 @kind long;
  #L1e8e5e.  v0:= `@@kotlinx.coroutines.internal.n.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1e8e62.  v1:= v9 @kind object;
  #L1e8e64.  v4:= v6 @kind wide;
  #L1e8e66.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L1e8e6c.  v0:= temp;
  #L1e8e6e.  if v0 == 0 then goto L1e8e40;
  #L1e8e72.  return v6 @kind wide;
}
procedure `kotlinx.coroutines.internal.n` `a`(`kotlinx.coroutines.internal.n` v8 @kind this, `int` v9 , `int` v10 ) @signature `Lkotlinx/coroutines/internal/n;.a:(II)Lkotlinx/coroutines/internal/n;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1e8dac.  v2:= v8.`kotlinx.coroutines.internal.n._state` @type ^`long` @kind wide;
  #L1e8db0.  v0:= 1073741823L;
  #L1e8db6.  v0:= v0 ^& v2 @kind long;
  #L1e8db8.  v4:= 0I;
  #L1e8dba.  v0:= v0 ^> v4 @kind long;
  #L1e8dbc.  v6:= (`int`) v0 @kind l2i;
  #L1e8dbe.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1e8dc4.  v0:= temp;
  #L1e8dc6.  if v0 == 0 then goto L1e8de2;
  #L1e8dca.  if v6 != v9 then goto L1e8dd0;
  #L1e8dce.  v4:= 1I;
  #L1e8dd0.  if v4 == 0 then goto L1e8dd6;
  #L1e8dd4.  goto L1e8de2;
  #L1e8dd6.  v9:= new `java.lang.AssertionError`;
  #L1e8dda.  call `<init>`(v9) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1e8de0.  throw v9;
  #L1e8de2.  v0:= 1152921504606846976L;
  #L1e8de6.  v0:= v0 ^& v2 @kind long;
  #L1e8de8.  v4:= 0L;
  #L1e8dec.  v7:= lcmp(v0, v4);
  #L1e8df0.  if v7 == 0 then goto L1e8dfe;
  #L1e8df4.  call temp:= `next`(v8) @signature `Lkotlinx/coroutines/internal/n;.next:()Lkotlinx/coroutines/internal/n;` @kind virtual;
  #L1e8dfa.  v9:= temp @kind object;
  #L1e8dfc.  return v9 @kind object;
  #L1e8dfe.  v0:= `@@kotlinx.coroutines.internal.n.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1e8e02.  v1:= `@@kotlinx.coroutines.internal.n.h` @type ^`kotlinx.coroutines.internal.n$a` @kind object;
  #L1e8e06.  call temp:= `updateHead`(v1, v2, v10) @signature `Lkotlinx/coroutines/internal/n$a;.updateHead:(JI)J` @kind virtual;
  #L1e8e0c.  v4:= temp @kind wide;
  #L1e8e0e.  v1:= v8 @kind object;
  #L1e8e10.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L1e8e16.  v0:= temp;
  #L1e8e18.  if v0 == 0 then goto L1e8dac;
  #L1e8e1c.  v9:= v8.`kotlinx.coroutines.internal.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1e8e20.  v10:= v8.`kotlinx.coroutines.internal.n.a` @type ^`int`;
  #L1e8e24.  v10:= v10 ^& v6 @kind int;
  #L1e8e26.  v0:= 0I;
  #L1e8e28.  call `set`(v9, v10, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L1e8e2e.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.n` `a`(`kotlinx.coroutines.internal.n` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/internal/n;.a:(ILjava/lang/Object;)Lkotlinx/coroutines/internal/n;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1e8d3c.  v0:= v2.`kotlinx.coroutines.internal.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1e8d40.  v1:= v2.`kotlinx.coroutines.internal.n.a` @type ^`int`;
  #L1e8d44.  v1:= v1 ^& v3 @kind int;
  #L1e8d46.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1e8d4c.  v0:= temp @kind object;
  #L1e8d4e.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.n$b` @kind boolean;
  #L1e8d52.  if v1 == 0 then goto L1e8d74;
  #L1e8d56.  v0:= (`kotlinx.coroutines.internal.n$b`) v0 @kind object;
  #L1e8d5a.  v0:= v0.`kotlinx.coroutines.internal.n$b.a` @type ^`int`;
  #L1e8d5e.  if v0 != v3 then goto L1e8d74;
  #L1e8d62.  v0:= v2.`kotlinx.coroutines.internal.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1e8d66.  v1:= v2.`kotlinx.coroutines.internal.n.a` @type ^`int`;
  #L1e8d6a.  v3:= v3 ^& v1 @kind int;
  #L1e8d6c.  call `set`(v0, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L1e8d72.  return v2 @kind object;
  #L1e8d74.  v3:= 0I;
  #L1e8d76.  return v3 @kind object;
}
procedure `kotlinx.coroutines.internal.n` `a`(`kotlinx.coroutines.internal.n` v6 @kind this, `long` v7 ) @signature `Lkotlinx/coroutines/internal/n;.a:(J)Lkotlinx/coroutines/internal/n;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1e8c64.  v0:= new `kotlinx.coroutines.internal.n`;
  #L1e8c68.  v1:= v6.`kotlinx.coroutines.internal.n.c` @type ^`int`;
  #L1e8c6c.  v1:= v1 * 2;
  #L1e8c70.  v2:= v6.`kotlinx.coroutines.internal.n.d` @type ^`boolean` @kind boolean;
  #L1e8c74.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/internal/n;.<init>:(IZ)V` @kind direct;
  #L1e8c7a.  v1:= 1073741823L;
  #L1e8c80.  v1:= v1 ^& v7 @kind long;
  #L1e8c82.  v3:= 0I;
  #L1e8c84.  v1:= v1 ^> v3 @kind long;
  #L1e8c86.  v2:= (`int`) v1 @kind l2i;
  #L1e8c88.  v3:= 1152921503533105152L;
  #L1e8c92.  v3:= v3 ^& v7 @kind long;
  #L1e8c94.  v1:= 30I;
  #L1e8c98.  v3:= v3 ^> v1 @kind long;
  #L1e8c9a.  v1:= (`int`) v3 @kind l2i;
  #L1e8c9c.  v3:= v6.`kotlinx.coroutines.internal.n.a` @type ^`int`;
  #L1e8ca0.  v4:= v2 ^& v3 @kind int;
  #L1e8ca4.  v5:= v1 ^& v3 @kind int;
  #L1e8ca8.  if v4 == v5 then goto L1e8ce0;
  #L1e8cac.  v4:= v6.`kotlinx.coroutines.internal.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1e8cb0.  v3:= v3 ^& v2 @kind int;
  #L1e8cb2.  call temp:= `get`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1e8cb8.  v3:= temp @kind object;
  #L1e8cba.  if v3 == 0 then goto L1e8cc0;
  #L1e8cbe.  goto L1e8cca;
  #L1e8cc0.  v3:= new `kotlinx.coroutines.internal.n$b`;
  #L1e8cc4.  call `<init>`(v3, v2) @signature `Lkotlinx/coroutines/internal/n$b;.<init>:(I)V` @kind direct;
  #L1e8cca.  v4:= v0.`kotlinx.coroutines.internal.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1e8cce.  v5:= v0.`kotlinx.coroutines.internal.n.a` @type ^`int`;
  #L1e8cd2.  v5:= v5 ^& v2 @kind int;
  #L1e8cd4.  call `set`(v4, v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L1e8cda.  v2:= v2 + 1;
  #L1e8cde.  goto L1e8c9c;
  #L1e8ce0.  v1:= `@@kotlinx.coroutines.internal.n.h` @type ^`kotlinx.coroutines.internal.n$a` @kind object;
  #L1e8ce4.  v2:= 1152921504606846976L;
  #L1e8ce8.  call temp:= `wo`(v1, v7, v2) @signature `Lkotlinx/coroutines/internal/n$a;.wo:(JJ)J` @kind virtual;
  #L1e8cee.  v7:= temp @kind wide;
  #L1e8cf0.  v0.`kotlinx.coroutines.internal.n._state` @type ^`long` := v7 @kind wide;
  #L1e8cf4.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.n` `b`(`kotlinx.coroutines.internal.n` v3 @kind this, `long` v4 ) @signature `Lkotlinx/coroutines/internal/n;.b:(J)Lkotlinx/coroutines/internal/n;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1e8d08.  v0:= v3.`kotlinx.coroutines.internal.n._next` @type ^`java.lang.Object` @kind object;
  #L1e8d0c.  v0:= (`kotlinx.coroutines.internal.n`) v0 @kind object;
  #L1e8d10.  if v0 == 0 then goto L1e8d16;
  #L1e8d14.  return v0 @kind object;
  #L1e8d16.  v0:= `@@kotlinx.coroutines.internal.n.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e8d1a.  v1:= 0I;
  #L1e8d1c.  call temp:= `a`(v3, v4) @signature `Lkotlinx/coroutines/internal/n;.a:(J)Lkotlinx/coroutines/internal/n;` @kind direct;
  #L1e8d22.  v2:= temp @kind object;
  #L1e8d24.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e8d2a.  goto L1e8d08;
}
procedure `int` `addLast`(`kotlinx.coroutines.internal.n` v12 @kind this, `java.lang.Object` v13 @kind object) @signature `Lkotlinx/coroutines/internal/n;.addLast:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1e8a34.  v2:= v12.`kotlinx.coroutines.internal.n._state` @type ^`long` @kind wide;
  #L1e8a38.  v0:= 1.727233711018889E-77D;
  #L1e8a3c.  v0:= v0 ^& v2 @kind long;
  #L1e8a3e.  v6:= 0L;
  #L1e8a42.  v4:= lcmp(v0, v6);
  #L1e8a46.  if v4 == 0 then goto L1e8a58;
  #L1e8a4a.  v13:= `@@kotlinx.coroutines.internal.n.h` @type ^`kotlinx.coroutines.internal.n$a` @kind object;
  #L1e8a4e.  call temp:= `addFailReason`(v13, v2) @signature `Lkotlinx/coroutines/internal/n$a;.addFailReason:(J)I` @kind virtual;
  #L1e8a54.  v13:= temp;
  #L1e8a56.  return v13;
  #L1e8a58.  v0:= 1073741823L;
  #L1e8a5e.  v0:= v0 ^& v2 @kind long;
  #L1e8a60.  v8:= 0I;
  #L1e8a62.  v0:= v0 ^> v8 @kind long;
  #L1e8a64.  v1:= (`int`) v0 @kind l2i;
  #L1e8a66.  v4:= 1152921503533105152L;
  #L1e8a70.  v4:= v4 ^& v2 @kind long;
  #L1e8a72.  v0:= 30I;
  #L1e8a76.  v4:= v4 ^> v0 @kind long;
  #L1e8a78.  v9:= (`int`) v4 @kind l2i;
  #L1e8a7a.  v10:= v12.`kotlinx.coroutines.internal.n.a` @type ^`int`;
  #L1e8a7e.  v0:= v9 + 2;
  #L1e8a82.  v0:= v0 ^& v10 @kind int;
  #L1e8a84.  v4:= v1 ^& v10 @kind int;
  #L1e8a88.  v5:= 1I;
  #L1e8a8a.  if v0 != v4 then goto L1e8a90;
  #L1e8a8e.  return v5;
  #L1e8a90.  v0:= v12.`kotlinx.coroutines.internal.n.d` @type ^`boolean` @kind boolean;
  #L1e8a94.  v4:= 1073741823I;
  #L1e8a9a.  if v0 != 0 then goto L1e8ace;
  #L1e8a9e.  v0:= v12.`kotlinx.coroutines.internal.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1e8aa2.  v11:= v9 ^& v10 @kind int;
  #L1e8aa6.  call temp:= `get`(v0, v11) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1e8aac.  v0:= temp @kind object;
  #L1e8aae.  if v0 == 0 then goto L1e8ace;
  #L1e8ab2.  v0:= v12.`kotlinx.coroutines.internal.n.c` @type ^`int`;
  #L1e8ab6.  v2:= 1024I;
  #L1e8aba.  if v0 < v2 then goto L1e8acc;
  #L1e8abe.  v9:= v9 - v1 @kind int;
  #L1e8ac0.  v1:= v9 ^& v4 @kind int;
  #L1e8ac4.  v0:= v0 ^> 1;
  #L1e8ac8.  if v1 <= v0 then goto L1e8a34;
  #L1e8acc.  return v5;
  #L1e8ace.  v0:= v9 + 1;
  #L1e8ad2.  v0:= v0 ^& v4 @kind int;
  #L1e8ad4.  v1:= `@@kotlinx.coroutines.internal.n.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1e8ad8.  v4:= `@@kotlinx.coroutines.internal.n.h` @type ^`kotlinx.coroutines.internal.n$a` @kind object;
  #L1e8adc.  call temp:= `updateTail`(v4, v2, v0) @signature `Lkotlinx/coroutines/internal/n$a;.updateTail:(JI)J` @kind virtual;
  #L1e8ae2.  v4:= temp @kind wide;
  #L1e8ae4.  v0:= v1 @kind object;
  #L1e8ae6.  v1:= v12 @kind object;
  #L1e8ae8.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L1e8aee.  v0:= temp;
  #L1e8af0.  if v0 == 0 then goto L1e8a34;
  #L1e8af4.  v0:= v12.`kotlinx.coroutines.internal.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1e8af8.  v1:= v9 ^& v10 @kind int;
  #L1e8afc.  call `set`(v0, v1, v13) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L1e8b02.  v0:= v12 @kind object;
  #L1e8b04.  v1:= v0.`kotlinx.coroutines.internal.n._state` @type ^`long` @kind wide;
  #L1e8b08.  v3:= 1152921504606846976L;
  #L1e8b0c.  v1:= v1 ^& v3 @kind long;
  #L1e8b0e.  v3:= lcmp(v1, v6);
  #L1e8b12.  if v3 != 0 then goto L1e8b18;
  #L1e8b16.  goto L1e8b2e;
  #L1e8b18.  call temp:= `next`(v0) @signature `Lkotlinx/coroutines/internal/n;.next:()Lkotlinx/coroutines/internal/n;` @kind virtual;
  #L1e8b1e.  v0:= temp @kind object;
  #L1e8b20.  call temp:= `a`(v0, v9, v13) @signature `Lkotlinx/coroutines/internal/n;.a:(ILjava/lang/Object;)Lkotlinx/coroutines/internal/n;` @kind direct;
  #L1e8b26.  v0:= temp @kind object;
  #L1e8b28.  if v0 == 0 then goto L1e8b2e;
  #L1e8b2c.  goto L1e8b04;
  #L1e8b2e.  return v8;
}
procedure `boolean` `close`(`kotlinx.coroutines.internal.n` v10 @kind this) @signature `Lkotlinx/coroutines/internal/n;.close:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1e899c.  v2:= v10.`kotlinx.coroutines.internal.n._state` @type ^`long` @kind wide;
  #L1e89a0.  v0:= 2305843009213693952L;
  #L1e89a4.  v4:= v2 ^& v0 @kind long;
  #L1e89a8.  v6:= 1I;
  #L1e89aa.  v7:= 0L;
  #L1e89ae.  v9:= lcmp(v4, v7);
  #L1e89b2.  if v9 == 0 then goto L1e89b8;
  #L1e89b6.  return v6;
  #L1e89b8.  v4:= 1152921504606846976L;
  #L1e89bc.  v4:= v4 ^& v2 @kind long;
  #L1e89be.  v9:= lcmp(v4, v7);
  #L1e89c2.  if v9 == 0 then goto L1e89ca;
  #L1e89c6.  v0:= 0I;
  #L1e89c8.  return v0;
  #L1e89ca.  v4:= v2 ^| v0 @kind long;
  #L1e89ce.  v0:= `@@kotlinx.coroutines.internal.n.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1e89d2.  v1:= v10 @kind object;
  #L1e89d4.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L1e89da.  v0:= temp;
  #L1e89dc.  if v0 == 0 then goto L1e899c;
  #L1e89e0.  return v6;
}
procedure `int` `getSize`(`kotlinx.coroutines.internal.n` v6 @kind this) @signature `Lkotlinx/coroutines/internal/n;.getSize:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1e8b40.  v0:= v6.`kotlinx.coroutines.internal.n._state` @type ^`long` @kind wide;
  #L1e8b44.  v2:= 1073741823L;
  #L1e8b4a.  v2:= v2 ^& v0 @kind long;
  #L1e8b4c.  v4:= 0I;
  #L1e8b4e.  v2:= v2 ^> v4 @kind long;
  #L1e8b50.  v3:= (`int`) v2 @kind l2i;
  #L1e8b52.  v4:= 1152921503533105152L;
  #L1e8b5c.  v0:= v0 ^& v4 @kind long;
  #L1e8b5e.  v2:= 30I;
  #L1e8b62.  v0:= v0 ^> v2 @kind long;
  #L1e8b64.  v1:= (`int`) v0 @kind l2i;
  #L1e8b66.  v1:= v1 - v3 @kind int;
  #L1e8b68.  v0:= 1073741823I;
  #L1e8b6e.  v0:= v0 ^& v1 @kind int;
  #L1e8b70.  return v0;
}
procedure `boolean` `isEmpty`(`kotlinx.coroutines.internal.n` v7 @kind this) @signature `Lkotlinx/coroutines/internal/n;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1e89f4.  v0:= v7.`kotlinx.coroutines.internal.n._state` @type ^`long` @kind wide;
  #L1e89f8.  v2:= 1073741823L;
  #L1e89fe.  v2:= v2 ^& v0 @kind long;
  #L1e8a00.  v4:= 0I;
  #L1e8a02.  v2:= v2 ^> v4 @kind long;
  #L1e8a04.  v3:= (`int`) v2 @kind l2i;
  #L1e8a06.  v5:= 1152921503533105152L;
  #L1e8a10.  v0:= v0 ^& v5 @kind long;
  #L1e8a12.  v2:= 30I;
  #L1e8a16.  v0:= v0 ^> v2 @kind long;
  #L1e8a18.  v1:= (`int`) v0 @kind l2i;
  #L1e8a1a.  if v3 != v1 then goto L1e8a20;
  #L1e8a1e.  v4:= 1I;
  #L1e8a20.  return v4;
}
procedure `kotlinx.coroutines.internal.n` `next`(`kotlinx.coroutines.internal.n` v2 @kind this) @signature `Lkotlinx/coroutines/internal/n;.next:()Lkotlinx/coroutines/internal/n;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1e8d88.  call temp:= `a`(v2) @signature `Lkotlinx/coroutines/internal/n;.a:()J` @kind direct;
  #L1e8d8e.  v0:= temp @kind wide;
  #L1e8d90.  call temp:= `b`(v2, v0) @signature `Lkotlinx/coroutines/internal/n;.b:(J)Lkotlinx/coroutines/internal/n;` @kind direct;
  #L1e8d96.  v0:= temp @kind object;
  #L1e8d98.  return v0 @kind object;
}
procedure `java.lang.Object` `removeFirstOrNull`(`kotlinx.coroutines.internal.n` v10 @kind this) @signature `Lkotlinx/coroutines/internal/n;.removeFirstOrNull:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1e8b84.  v2:= v10.`kotlinx.coroutines.internal.n._state` @type ^`long` @kind wide;
  #L1e8b88.  v0:= 1152921504606846976L;
  #L1e8b8c.  v0:= v0 ^& v2 @kind long;
  #L1e8b8e.  v4:= 0L;
  #L1e8b92.  v6:= lcmp(v0, v4);
  #L1e8b96.  if v6 == 0 then goto L1e8ba0;
  #L1e8b9a.  v0:= `@@kotlinx.coroutines.internal.n.g` @type ^`kotlinx.coroutines.internal.v` @kind object;
  #L1e8b9e.  return v0 @kind object;
  #L1e8ba0.  v0:= 1073741823L;
  #L1e8ba6.  v0:= v0 ^& v2 @kind long;
  #L1e8ba8.  v4:= 0I;
  #L1e8baa.  v0:= v0 ^> v4 @kind long;
  #L1e8bac.  v6:= (`int`) v0 @kind l2i;
  #L1e8bae.  v0:= 1152921503533105152L;
  #L1e8bb8.  v0:= v0 ^& v2 @kind long;
  #L1e8bba.  v4:= 30I;
  #L1e8bbe.  v0:= v0 ^> v4 @kind long;
  #L1e8bc0.  v1:= (`int`) v0 @kind l2i;
  #L1e8bc2.  v0:= v10.`kotlinx.coroutines.internal.n.a` @type ^`int`;
  #L1e8bc6.  v1:= v1 ^& v0 @kind int;
  #L1e8bc8.  v4:= v6 ^& v0 @kind int;
  #L1e8bcc.  v7:= 0I;
  #L1e8bce.  if v1 != v4 then goto L1e8bd4;
  #L1e8bd2.  return v7 @kind object;
  #L1e8bd4.  v1:= v10.`kotlinx.coroutines.internal.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1e8bd8.  v0:= v0 ^& v6 @kind int;
  #L1e8bda.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1e8be0.  v8:= temp @kind object;
  #L1e8be2.  if v8 != 0 then goto L1e8bf0;
  #L1e8be6.  v0:= v10.`kotlinx.coroutines.internal.n.d` @type ^`boolean` @kind boolean;
  #L1e8bea.  if v0 == 0 then goto L1e8b84;
  #L1e8bee.  return v7 @kind object;
  #L1e8bf0.  v0:= instanceof @variable v8 @type ^`kotlinx.coroutines.internal.n$b` @kind boolean;
  #L1e8bf4.  if v0 == 0 then goto L1e8bfa;
  #L1e8bf8.  return v7 @kind object;
  #L1e8bfa.  v0:= v6 + 1;
  #L1e8bfe.  v1:= 1073741823I;
  #L1e8c04.  v9:= v0 ^& v1 @kind int;
  #L1e8c08.  v0:= `@@kotlinx.coroutines.internal.n.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1e8c0c.  v1:= `@@kotlinx.coroutines.internal.n.h` @type ^`kotlinx.coroutines.internal.n$a` @kind object;
  #L1e8c10.  call temp:= `updateHead`(v1, v2, v9) @signature `Lkotlinx/coroutines/internal/n$a;.updateHead:(JI)J` @kind virtual;
  #L1e8c16.  v4:= temp @kind wide;
  #L1e8c18.  v1:= v10 @kind object;
  #L1e8c1a.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L1e8c20.  v0:= temp;
  #L1e8c22.  if v0 == 0 then goto L1e8c38;
  #L1e8c26.  v0:= v10.`kotlinx.coroutines.internal.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1e8c2a.  v1:= v10.`kotlinx.coroutines.internal.n.a` @type ^`int`;
  #L1e8c2e.  v1:= v1 ^& v6 @kind int;
  #L1e8c30.  call `set`(v0, v1, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L1e8c36.  return v8 @kind object;
  #L1e8c38.  v0:= v10.`kotlinx.coroutines.internal.n.d` @type ^`boolean` @kind boolean;
  #L1e8c3c.  if v0 != 0 then goto L1e8c42;
  #L1e8c40.  goto L1e8b84;
  #L1e8c42.  v0:= v10 @kind object;
  #L1e8c44.  call temp:= `a`(v0, v6, v9) @signature `Lkotlinx/coroutines/internal/n;.a:(II)Lkotlinx/coroutines/internal/n;` @kind direct;
  #L1e8c4a.  v0:= temp @kind object;
  #L1e8c4c.  if v0 == 0 then goto L1e8c52;
  #L1e8c50.  goto L1e8c44;
  #L1e8c52.  return v8 @kind object;
}
