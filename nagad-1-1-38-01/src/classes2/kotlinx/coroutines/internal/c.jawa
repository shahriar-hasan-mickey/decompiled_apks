record `kotlinx.coroutines.internal.c` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.internal.r` @kind class {
  `java.lang.Object` `kotlinx.coroutines.internal.c._consensus` @AccessFlag PRIVATE_VOLATILE;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.c.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1e6d78.  v0:= constclass @type ^`kotlinx.coroutines.internal.c` @kind object;
  #L1e6d7c.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L1e6d80.  v2:= "_consensus" @kind object;
  #L1e6d84.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L1e6d8a.  v0:= temp @kind object;
  #L1e6d8c.  `@@kotlinx.coroutines.internal.c.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L1e6d90.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.c` v1 @kind this) @signature `Lkotlinx/coroutines/internal/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e6da4.  call `<init>`(v1) @signature `Lkotlinx/coroutines/internal/r;.<init>:()V` @kind direct;
  #L1e6daa.  v0:= `@@kotlinx.coroutines.internal.b.a` @type ^`java.lang.Object` @kind object;
  #L1e6dae.  v1.`kotlinx.coroutines.internal.c._consensus` @type ^`java.lang.Object` := v0 @kind object;
  #L1e6db2.  return @kind void;
}
procedure `void` `complete`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/internal/c;.complete:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `decide`(`kotlinx.coroutines.internal.c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/internal/c;.decide:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1e6cb4.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1e6cba.  v0:= temp;
  #L1e6cbc.  if v0 == 0 then goto L1e6ce0;
  #L1e6cc0.  v0:= `@@kotlinx.coroutines.internal.b.a` @type ^`java.lang.Object` @kind object;
  #L1e6cc4.  if v3 == v0 then goto L1e6ccc;
  #L1e6cc8.  v0:= 1I;
  #L1e6cca.  goto L1e6cce;
  #L1e6ccc.  v0:= 0I;
  #L1e6cce.  if v0 == 0 then goto L1e6cd4;
  #L1e6cd2.  goto L1e6ce0;
  #L1e6cd4.  v3:= new `java.lang.AssertionError`;
  #L1e6cd8.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1e6cde.  throw v3;
  #L1e6ce0.  v0:= v2.`kotlinx.coroutines.internal.c._consensus` @type ^`java.lang.Object` @kind object;
  #L1e6ce4.  v1:= `@@kotlinx.coroutines.internal.b.a` @type ^`java.lang.Object` @kind object;
  #L1e6ce8.  if v0 == v1 then goto L1e6cee;
  #L1e6cec.  return v0 @kind object;
  #L1e6cee.  v0:= `@@kotlinx.coroutines.internal.c.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e6cf2.  call temp:= `compareAndSet`(v0, v2, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e6cf8.  v0:= temp;
  #L1e6cfa.  if v0 == 0 then goto L1e6d00;
  #L1e6cfe.  return v3 @kind object;
  #L1e6d00.  v3:= v2.`kotlinx.coroutines.internal.c._consensus` @type ^`java.lang.Object` @kind object;
  #L1e6d04.  return v3 @kind object;
}
procedure `kotlinx.coroutines.internal.c` `getAtomicOp`(`kotlinx.coroutines.internal.c` v0 @kind this) @signature `Lkotlinx/coroutines/internal/c;.getAtomicOp:()Lkotlinx/coroutines/internal/c;` @AccessFlag PUBLIC {
    temp;

  #L1e6d4c.  return v0 @kind object;
}
procedure `long` `getOpSequence`(`kotlinx.coroutines.internal.c` v2 @kind this) @signature `Lkotlinx/coroutines/internal/c;.getOpSequence:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1e6d60.  v0:= 0L;
  #L1e6d64.  return v0 @kind wide;
}
procedure `java.lang.Object` `perform`(`kotlinx.coroutines.internal.c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/internal/c;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1e6d18.  v0:= v2.`kotlinx.coroutines.internal.c._consensus` @type ^`java.lang.Object` @kind object;
  #L1e6d1c.  v1:= `@@kotlinx.coroutines.internal.b.a` @type ^`java.lang.Object` @kind object;
  #L1e6d20.  if v0 != v1 then goto L1e6d34;
  #L1e6d24.  call temp:= `prepare`(v2, v3) @signature `Lkotlinx/coroutines/internal/c;.prepare:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1e6d2a.  v0:= temp @kind object;
  #L1e6d2c.  call temp:= `decide`(v2, v0) @signature `Lkotlinx/coroutines/internal/c;.decide:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1e6d32.  v0:= temp @kind object;
  #L1e6d34.  call `complete`(v2, v3, v0) @signature `Lkotlinx/coroutines/internal/c;.complete:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1e6d3a.  return v0 @kind object;
}
procedure `java.lang.Object` `prepare`(`java.lang.Object` v0 @kind object) @signature `Lkotlinx/coroutines/internal/c;.prepare:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
