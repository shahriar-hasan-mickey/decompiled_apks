record `kotlinx.coroutines.r1` @kind class @AccessFlag  extends `kotlinx.coroutines.a` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.r1` v0 @kind this, `kotlin.t.g` v1 @kind object, `boolean` v2 ) @signature `Lkotlinx/coroutines/r1;.<init>:(Lkotlin/t/g;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1e619c.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/a;.<init>:(Lkotlin/t/g;Z)V` @kind direct;
  #L1e61a2.  return @kind void;
}
procedure `boolean` `handleJobException`(`kotlinx.coroutines.r1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lkotlinx/coroutines/r1;.handleJobException:(Ljava/lang/Throwable;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1e6178.  call temp:= `getContext`(v1) @signature `Lkotlinx/coroutines/a;.getContext:()Lkotlin/t/g;` @kind virtual;
  #L1e617e.  v0:= temp @kind object;
  #L1e6180.  call `handleCoroutineException`(v0, v2) @signature `Lkotlinx/coroutines/z;.handleCoroutineException:(Lkotlin/t/g;Ljava/lang/Throwable;)V` @kind static;
  #L1e6186.  v2:= 1I;
  #L1e6188.  return v2;
}
