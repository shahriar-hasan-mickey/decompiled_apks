record `kotlinx.coroutines.JobCancellationException` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CancellationException` @kind class, `kotlinx.coroutines.v` @kind interface {
  `kotlinx.coroutines.d1` `kotlinx.coroutines.JobCancellationException.f` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.JobCancellationException` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.Throwable` v2 @kind object, `kotlinx.coroutines.d1` v3 @kind object) @signature `Lkotlinx/coroutines/JobCancellationException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;Lkotlinx/coroutines/d1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1e3c0c.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/CancellationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e3c12.  v0.`kotlinx.coroutines.JobCancellationException.f` @type ^`kotlinx.coroutines.d1` := v3 @kind object;
  #L1e3c16.  if v2 == 0 then goto L1e3c20;
  #L1e3c1a.  call temp:= `initCause`(v0, v2) @signature `Ljava/util/concurrent/CancellationException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L1e3c20.  return @kind void;
}
procedure `java.lang.Throwable` `createCopy`(`kotlinx.coroutines.JobCancellationException` v1 @kind this) @signature `Lkotlinx/coroutines/JobCancellationException;.createCopy:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1e3b7c.  call temp:= `createCopy`(v1) @signature `Lkotlinx/coroutines/JobCancellationException;.createCopy:()Lkotlinx/coroutines/JobCancellationException;` @kind virtual;
  #L1e3b82.  v0:= temp @kind object;
  #L1e3b84.  return v0 @kind object;
}
procedure `kotlinx.coroutines.JobCancellationException` `createCopy`(`kotlinx.coroutines.JobCancellationException` v3 @kind this) @signature `Lkotlinx/coroutines/JobCancellationException;.createCopy:()Lkotlinx/coroutines/JobCancellationException;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1e3bcc.  call temp:= `getDEBUG`() @signature `Lkotlinx/coroutines/h0;.getDEBUG:()Z` @kind static;
  #L1e3bd2.  v0:= temp;
  #L1e3bd4.  if v0 == 0 then goto L1e3bf6;
  #L1e3bd8.  v0:= new `kotlinx.coroutines.JobCancellationException`;
  #L1e3bdc.  call temp:= `getMessage`(v3) @signature `Ljava/util/concurrent/CancellationException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1e3be2.  v1:= temp @kind object;
  #L1e3be4.  call `checkNotNull`(v1) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1e3bea.  v2:= v3.`kotlinx.coroutines.JobCancellationException.f` @type ^`kotlinx.coroutines.d1` @kind object;
  #L1e3bee.  call `<init>`(v0, v1, v3, v2) @signature `Lkotlinx/coroutines/JobCancellationException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;Lkotlinx/coroutines/d1;)V` @kind direct;
  #L1e3bf4.  return v0 @kind object;
  #L1e3bf6.  v0:= 0I;
  #L1e3bf8.  return v0 @kind object;
}
procedure `boolean` `equals`(`kotlinx.coroutines.JobCancellationException` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/JobCancellationException;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1e3a64.  if v3 == v2 then goto L1e3ac6;
  #L1e3a68.  v0:= instanceof @variable v3 @type ^`kotlinx.coroutines.JobCancellationException` @kind boolean;
  #L1e3a6c.  if v0 == 0 then goto L1e3ac2;
  #L1e3a70.  v3:= (`kotlinx.coroutines.JobCancellationException`) v3 @kind object;
  #L1e3a74.  call temp:= `getMessage`(v3) @signature `Ljava/util/concurrent/CancellationException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1e3a7a.  v0:= temp @kind object;
  #L1e3a7c.  call temp:= `getMessage`(v2) @signature `Ljava/util/concurrent/CancellationException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1e3a82.  v1:= temp @kind object;
  #L1e3a84.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1e3a8a.  v0:= temp;
  #L1e3a8c.  if v0 == 0 then goto L1e3ac2;
  #L1e3a90.  v0:= v3.`kotlinx.coroutines.JobCancellationException.f` @type ^`kotlinx.coroutines.d1` @kind object;
  #L1e3a94.  v1:= v2.`kotlinx.coroutines.JobCancellationException.f` @type ^`kotlinx.coroutines.d1` @kind object;
  #L1e3a98.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1e3a9e.  v0:= temp;
  #L1e3aa0.  if v0 == 0 then goto L1e3ac2;
  #L1e3aa4.  call temp:= `getCause`(v3) @signature `Ljava/util/concurrent/CancellationException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L1e3aaa.  v3:= temp @kind object;
  #L1e3aac.  call temp:= `getCause`(v2) @signature `Ljava/util/concurrent/CancellationException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L1e3ab2.  v0:= temp @kind object;
  #L1e3ab4.  call temp:= `areEqual`(v3, v0) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1e3aba.  v3:= temp;
  #L1e3abc.  if v3 == 0 then goto L1e3ac2;
  #L1e3ac0.  goto L1e3ac6;
  #L1e3ac2.  v3:= 0I;
  #L1e3ac4.  goto L1e3ac8;
  #L1e3ac6.  v3:= 1I;
  #L1e3ac8.  return v3;
}
procedure `java.lang.Throwable` `fillInStackTrace`(`kotlinx.coroutines.JobCancellationException` v1 @kind this) @signature `Lkotlinx/coroutines/JobCancellationException;.fillInStackTrace:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e3b98.  call temp:= `getDEBUG`() @signature `Lkotlinx/coroutines/h0;.getDEBUG:()Z` @kind static;
  #L1e3b9e.  v0:= temp;
  #L1e3ba0.  if v0 == 0 then goto L1e3bae;
  #L1e3ba4.  call temp:= `fillInStackTrace`(v1) @signature `Ljava/util/concurrent/CancellationException;.fillInStackTrace:()Ljava/lang/Throwable;` @kind super;
  #L1e3baa.  v0:= temp @kind object;
  #L1e3bac.  return v0 @kind object;
  #L1e3bae.  v0:= 0I;
  #L1e3bb0.  v0:= new `java.lang.StackTraceElement`[v0];
  #L1e3bb4.  call `setStackTrace`(v1, v0) @signature `Ljava/util/concurrent/CancellationException;.setStackTrace:([Ljava/lang/StackTraceElement;)V` @kind virtual;
  #L1e3bba.  return v1 @kind object;
}
procedure `int` `hashCode`(`kotlinx.coroutines.JobCancellationException` v2 @kind this) @signature `Lkotlinx/coroutines/JobCancellationException;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1e3adc.  call temp:= `getMessage`(v2) @signature `Ljava/util/concurrent/CancellationException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1e3ae2.  v0:= temp @kind object;
  #L1e3ae4.  call `checkNotNull`(v0) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1e3aea.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L1e3af0.  v0:= temp;
  #L1e3af2.  v0:= v0 * 31;
  #L1e3af6.  v1:= v2.`kotlinx.coroutines.JobCancellationException.f` @type ^`kotlinx.coroutines.d1` @kind object;
  #L1e3afa.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1e3b00.  v1:= temp;
  #L1e3b02.  v0:= v0 + v1 @kind int;
  #L1e3b04.  v0:= v0 * 31;
  #L1e3b08.  call temp:= `getCause`(v2) @signature `Ljava/util/concurrent/CancellationException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L1e3b0e.  v1:= temp @kind object;
  #L1e3b10.  if v1 == 0 then goto L1e3b1e;
  #L1e3b14.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Throwable;.hashCode:()I` @kind virtual;
  #L1e3b1a.  v1:= temp;
  #L1e3b1c.  goto L1e3b20;
  #L1e3b1e.  v1:= 0I;
  #L1e3b20.  v0:= v0 + v1 @kind int;
  #L1e3b22.  return v0;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.JobCancellationException` v2 @kind this) @signature `Lkotlinx/coroutines/JobCancellationException;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1e3b34.  v0:= new `java.lang.StringBuilder`;
  #L1e3b38.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e3b3e.  call temp:= `toString`(v2) @signature `Ljava/util/concurrent/CancellationException;.toString:()Ljava/lang/String;` @kind super;
  #L1e3b44.  v1:= temp @kind object;
  #L1e3b46.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e3b4c.  v1:= "; job=" @kind object;
  #L1e3b50.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e3b56.  v1:= v2.`kotlinx.coroutines.JobCancellationException.f` @type ^`kotlinx.coroutines.d1` @kind object;
  #L1e3b5a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e3b60.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e3b66.  v0:= temp @kind object;
  #L1e3b68.  return v0 @kind object;
}
