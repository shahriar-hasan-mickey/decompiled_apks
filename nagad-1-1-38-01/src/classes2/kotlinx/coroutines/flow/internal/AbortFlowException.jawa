record `kotlinx.coroutines.flow.internal.AbortFlowException` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CancellationException` @kind class {
}
procedure `java.lang.Throwable` `fillInStackTrace`(`kotlinx.coroutines.flow.internal.AbortFlowException` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/AbortFlowException;.fillInStackTrace:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e6ab8.  call temp:= `getDEBUG`() @signature `Lkotlinx/coroutines/h0;.getDEBUG:()Z` @kind static;
  #L1e6abe.  v0:= temp;
  #L1e6ac0.  if v0 == 0 then goto L1e6ace;
  #L1e6ac4.  call temp:= `fillInStackTrace`(v1) @signature `Ljava/util/concurrent/CancellationException;.fillInStackTrace:()Ljava/lang/Throwable;` @kind super;
  #L1e6aca.  v0:= temp @kind object;
  #L1e6acc.  return v0 @kind object;
  #L1e6ace.  v0:= 0I;
  #L1e6ad0.  v0:= new `java.lang.StackTraceElement`[v0];
  #L1e6ad4.  call `setStackTrace`(v1, v0) @signature `Ljava/util/concurrent/CancellationException;.setStackTrace:([Ljava/lang/StackTraceElement;)V` @kind virtual;
  #L1e6ada.  return v1 @kind object;
}
