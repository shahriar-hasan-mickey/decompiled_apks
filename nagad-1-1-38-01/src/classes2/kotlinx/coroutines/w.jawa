record `kotlinx.coroutines.w` @kind class @AccessFlag PUBLIC_FINAL {
}
global `boolean` `@@kotlinx.coroutines.w.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/w;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1e0e9c.  v0:= "kotlinx.coroutines.scheduler" @kind object;
  #L1e0ea0.  call temp:= `systemProp`(v0) @signature `Lkotlinx/coroutines/internal/w;.systemProp:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L1e0ea6.  v0:= temp @kind object;
  #L1e0ea8.  if v0 != 0 then goto L1e0eae;
  #L1e0eac.  goto L1e0f02;
  #L1e0eae.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L1e0eb4.  v1:= temp;
  #L1e0eb6.  if v1 == 0 then goto L1e0ef2;
  #L1e0eba.  v2:= 3551I;
  #L1e0ebe.  if v1 == v2 then goto L1e0ee0;
  #L1e0ec2.  v2:= 109935I;
  #L1e0ec8.  if v1 != v2 then goto L1e0f0a;
  #L1e0ecc.  v1:= "off" @kind object;
  #L1e0ed0.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e0ed6.  v1:= temp;
  #L1e0ed8.  if v1 == 0 then goto L1e0f0a;
  #L1e0edc.  v0:= 0I;
  #L1e0ede.  goto L1e0f04;
  #L1e0ee0.  v1:= "on" @kind object;
  #L1e0ee4.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e0eea.  v1:= temp;
  #L1e0eec.  if v1 == 0 then goto L1e0f0a;
  #L1e0ef0.  goto L1e0f02;
  #L1e0ef2.  v1:= "" @kind object;
  #L1e0ef6.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e0efc.  v1:= temp;
  #L1e0efe.  if v1 == 0 then goto L1e0f0a;
  #L1e0f02.  v0:= 1I;
  #L1e0f04.  `@@kotlinx.coroutines.w.a` @type ^`boolean` := v0 @kind boolean;
  #L1e0f08.  return @kind void;
  #L1e0f0a.  v1:= new `java.lang.StringBuilder`;
  #L1e0f0e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e0f14.  v2:= "System property 'kotlinx.coroutines.scheduler' has unrecognized value '" @kind object;
  #L1e0f18.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e0f1e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e0f24.  v0:= 39I;
  #L1e0f28.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e0f2e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e0f34.  v0:= temp @kind object;
  #L1e0f36.  v1:= new `java.lang.IllegalStateException`;
  #L1e0f3a.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e0f40.  v0:= temp @kind object;
  #L1e0f42.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e0f48.  throw v1;
}
procedure `kotlinx.coroutines.x` `createDefaultDispatcher`() @signature `Lkotlinx/coroutines/w;.createDefaultDispatcher:()Lkotlinx/coroutines/x;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1e0e78.  v0:= `@@kotlinx.coroutines.w.a` @type ^`boolean` @kind boolean;
  #L1e0e7c.  if v0 == 0 then goto L1e0e86;
  #L1e0e80.  v0:= `@@kotlinx.coroutines.d2.c.m` @type ^`kotlinx.coroutines.d2.c` @kind object;
  #L1e0e84.  goto L1e0e8a;
  #L1e0e86.  v0:= `@@kotlinx.coroutines.o.i` @type ^`kotlinx.coroutines.o` @kind object;
  #L1e0e8a.  return v0 @kind object;
}
procedure `java.lang.String` `getCoroutineName`(`kotlin.t.g` v4 @kind object) @signature `Lkotlinx/coroutines/w;.getCoroutineName:(Lkotlin/t/g;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e0d68.  call temp:= `getDEBUG`() @signature `Lkotlinx/coroutines/h0;.getDEBUG:()Z` @kind static;
  #L1e0d6e.  v0:= temp;
  #L1e0d70.  v1:= 0I;
  #L1e0d72.  if v0 != 0 then goto L1e0d78;
  #L1e0d76.  return v1 @kind object;
  #L1e0d78.  v0:= `@@kotlinx.coroutines.a0.g` @type ^`kotlinx.coroutines.a0$a` @kind object;
  #L1e0d7c.  call temp:= `get`(v4, v0) @signature `Lkotlin/t/g;.get:(Lkotlin/t/g$c;)Lkotlin/t/g$b;` @kind interface;
  #L1e0d82.  v0:= temp @kind object;
  #L1e0d84.  v0:= (`kotlinx.coroutines.a0`) v0 @kind object;
  #L1e0d88.  if v0 == 0 then goto L1e0de4;
  #L1e0d8c.  v1:= `@@kotlinx.coroutines.b0.g` @type ^`kotlinx.coroutines.b0$a` @kind object;
  #L1e0d90.  call temp:= `get`(v4, v1) @signature `Lkotlin/t/g;.get:(Lkotlin/t/g$c;)Lkotlin/t/g$b;` @kind interface;
  #L1e0d96.  v4:= temp @kind object;
  #L1e0d98.  v4:= (`kotlinx.coroutines.b0`) v4 @kind object;
  #L1e0d9c.  if v4 == 0 then goto L1e0dae;
  #L1e0da0.  call temp:= `getName`(v4) @signature `Lkotlinx/coroutines/b0;.getName:()Ljava/lang/String;` @kind virtual;
  #L1e0da6.  v4:= temp @kind object;
  #L1e0da8.  if v4 == 0 then goto L1e0dae;
  #L1e0dac.  goto L1e0db2;
  #L1e0dae.  v4:= "coroutine" @kind object;
  #L1e0db2.  v1:= new `java.lang.StringBuilder`;
  #L1e0db6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e0dbc.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e0dc2.  v4:= 35I;
  #L1e0dc6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e0dcc.  call temp:= `getId`(v0) @signature `Lkotlinx/coroutines/a0;.getId:()J` @kind virtual;
  #L1e0dd2.  v2:= temp @kind wide;
  #L1e0dd4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e0dda.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e0de0.  v4:= temp @kind object;
  #L1e0de2.  return v4 @kind object;
  #L1e0de4.  return v1 @kind object;
}
procedure `kotlin.t.g` `newCoroutineContext`(`kotlinx.coroutines.c0` v2 @kind object, `kotlin.t.g` v3 @kind object) @signature `Lkotlinx/coroutines/w;.newCoroutineContext:(Lkotlinx/coroutines/c0;Lkotlin/t/g;)Lkotlin/t/g;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1e0df8.  call temp:= `getCoroutineContext`(v2) @signature `Lkotlinx/coroutines/c0;.getCoroutineContext:()Lkotlin/t/g;` @kind interface;
  #L1e0dfe.  v2:= temp @kind object;
  #L1e0e00.  call temp:= `plus`(v2, v3) @signature `Lkotlin/t/g;.plus:(Lkotlin/t/g;)Lkotlin/t/g;` @kind interface;
  #L1e0e06.  v2:= temp @kind object;
  #L1e0e08.  call temp:= `getDEBUG`() @signature `Lkotlinx/coroutines/h0;.getDEBUG:()Z` @kind static;
  #L1e0e0e.  v3:= temp;
  #L1e0e10.  if v3 == 0 then goto L1e0e38;
  #L1e0e14.  v3:= new `kotlinx.coroutines.a0`;
  #L1e0e18.  call temp:= `getCOROUTINE_ID`() @signature `Lkotlinx/coroutines/h0;.getCOROUTINE_ID:()Ljava/util/concurrent/atomic/AtomicLong;` @kind static;
  #L1e0e1e.  v0:= temp @kind object;
  #L1e0e20.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.incrementAndGet:()J` @kind virtual;
  #L1e0e26.  v0:= temp @kind wide;
  #L1e0e28.  call `<init>`(v3, v0) @signature `Lkotlinx/coroutines/a0;.<init>:(J)V` @kind direct;
  #L1e0e2e.  call temp:= `plus`(v2, v3) @signature `Lkotlin/t/g;.plus:(Lkotlin/t/g;)Lkotlin/t/g;` @kind interface;
  #L1e0e34.  v3:= temp @kind object;
  #L1e0e36.  goto L1e0e3a;
  #L1e0e38.  v3:= v2 @kind object;
  #L1e0e3a.  call temp:= `getDefault`() @signature `Lkotlinx/coroutines/o0;.getDefault:()Lkotlinx/coroutines/x;` @kind static;
  #L1e0e40.  v0:= temp @kind object;
  #L1e0e42.  if v2 == v0 then goto L1e0e66;
  #L1e0e46.  v0:= `@@kotlin.t.e.c` @type ^`kotlin.t.e$b` @kind object;
  #L1e0e4a.  call temp:= `get`(v2, v0) @signature `Lkotlin/t/g;.get:(Lkotlin/t/g$c;)Lkotlin/t/g$b;` @kind interface;
  #L1e0e50.  v2:= temp @kind object;
  #L1e0e52.  if v2 != 0 then goto L1e0e66;
  #L1e0e56.  call temp:= `getDefault`() @signature `Lkotlinx/coroutines/o0;.getDefault:()Lkotlinx/coroutines/x;` @kind static;
  #L1e0e5c.  v2:= temp @kind object;
  #L1e0e5e.  call temp:= `plus`(v3, v2) @signature `Lkotlin/t/g;.plus:(Lkotlin/t/g;)Lkotlin/t/g;` @kind interface;
  #L1e0e64.  v3:= temp @kind object;
  #L1e0e66.  return v3 @kind object;
}
