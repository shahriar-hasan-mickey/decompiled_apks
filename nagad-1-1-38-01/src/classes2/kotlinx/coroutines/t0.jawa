record `kotlinx.coroutines.t0` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.r0` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.t0` v0 @kind this) @signature `Lkotlinx/coroutines/t0;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1e31f0.  call `<init>`(v0) @signature `Lkotlinx/coroutines/r0;.<init>:()V` @kind direct;
  #L1e31f6.  return @kind void;
}
procedure `java.lang.Thread` `getThread`() @signature `Lkotlinx/coroutines/t0;.getThread:()Ljava/lang/Thread;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `reschedule`(`kotlinx.coroutines.t0` v1 @kind this, `long` v2 , `kotlinx.coroutines.s0$a` v4 @kind object) @signature `Lkotlinx/coroutines/t0;.reschedule:(JLkotlinx/coroutines/s0$a;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1e3208.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1e320e.  v0:= temp;
  #L1e3210.  if v0 == 0 then goto L1e3234;
  #L1e3214.  v0:= `@@kotlinx.coroutines.j0.m` @type ^`kotlinx.coroutines.j0` @kind object;
  #L1e3218.  if v1 == v0 then goto L1e3220;
  #L1e321c.  v0:= 1I;
  #L1e321e.  goto L1e3222;
  #L1e3220.  v0:= 0I;
  #L1e3222.  if v0 == 0 then goto L1e3228;
  #L1e3226.  goto L1e3234;
  #L1e3228.  v2:= new `java.lang.AssertionError`;
  #L1e322c.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1e3232.  throw v2;
  #L1e3234.  v0:= `@@kotlinx.coroutines.j0.m` @type ^`kotlinx.coroutines.j0` @kind object;
  #L1e3238.  call `schedule`(v0, v2, v4) @signature `Lkotlinx/coroutines/s0;.schedule:(JLkotlinx/coroutines/s0$a;)V` @kind virtual;
  #L1e323e.  return @kind void;
}
procedure `void` `unpark`(`kotlinx.coroutines.t0` v2 @kind this) @signature `Lkotlinx/coroutines/t0;.unpark:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L1e3250.  call temp:= `getThread`(v2) @signature `Lkotlinx/coroutines/t0;.getThread:()Ljava/lang/Thread;` @kind virtual;
  #L1e3256.  v0:= temp @kind object;
  #L1e3258.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1e325e.  v1:= temp @kind object;
  #L1e3260.  if v1 == v0 then goto L1e327e;
  #L1e3264.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/x1;.getTimeSource:()Lkotlinx/coroutines/w1;` @kind static;
  #L1e326a.  v1:= temp @kind object;
  #L1e326c.  if v1 == 0 then goto L1e3278;
  #L1e3270.  call `unpark`(v1, v0) @signature `Lkotlinx/coroutines/w1;.unpark:(Ljava/lang/Thread;)V` @kind interface;
  #L1e3276.  goto L1e327e;
  #L1e3278.  call `unpark`(v0) @signature `Ljava/util/concurrent/locks/LockSupport;.unpark:(Ljava/lang/Thread;)V` @kind static;
  #L1e327e.  return @kind void;
}
