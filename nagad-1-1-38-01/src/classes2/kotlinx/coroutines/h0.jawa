record `kotlinx.coroutines.h0` @kind class @AccessFlag PUBLIC_FINAL {
}
global `boolean` `@@kotlinx.coroutines.h0.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `boolean` `@@kotlinx.coroutines.h0.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `boolean` `@@kotlinx.coroutines.h0.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicLong` `@@kotlinx.coroutines.h0.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/h0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e1a78.  v0:= constclass @type ^`kotlinx.coroutines.a0` @kind object;
  #L1e1a7c.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L1e1a82.  v0:= temp;
  #L1e1a84.  `@@kotlinx.coroutines.h0.a` @type ^`boolean` := v0 @kind boolean;
  #L1e1a88.  v0:= "kotlinx.coroutines.debug" @kind object;
  #L1e1a8c.  call temp:= `systemProp`(v0) @signature `Lkotlinx/coroutines/internal/w;.systemProp:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L1e1a92.  v0:= temp @kind object;
  #L1e1a94.  v1:= 0I;
  #L1e1a96.  v2:= 1I;
  #L1e1a98.  if v0 != 0 then goto L1e1a9e;
  #L1e1a9c.  goto L1e1ad6;
  #L1e1a9e.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L1e1aa4.  v3:= temp;
  #L1e1aa6.  if v3 == 0 then goto L1e1b02;
  #L1e1aaa.  v4:= 3551I;
  #L1e1aae.  if v3 == v4 then goto L1e1af0;
  #L1e1ab2.  v4:= 109935I;
  #L1e1ab8.  if v3 == v4 then goto L1e1adc;
  #L1e1abc.  v4:= 3005871I;
  #L1e1ac2.  if v3 != v4 then goto L1e1b4a;
  #L1e1ac6.  v3:= "auto" @kind object;
  #L1e1aca.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e1ad0.  v3:= temp;
  #L1e1ad2.  if v3 == 0 then goto L1e1b4a;
  #L1e1ad6.  v0:= `@@kotlinx.coroutines.h0.a` @type ^`boolean` @kind boolean;
  #L1e1ada.  goto L1e1b14;
  #L1e1adc.  v3:= "off" @kind object;
  #L1e1ae0.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e1ae6.  v3:= temp;
  #L1e1ae8.  if v3 == 0 then goto L1e1b4a;
  #L1e1aec.  v0:= 0I;
  #L1e1aee.  goto L1e1b14;
  #L1e1af0.  v3:= "on" @kind object;
  #L1e1af4.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e1afa.  v3:= temp;
  #L1e1afc.  if v3 == 0 then goto L1e1b4a;
  #L1e1b00.  goto L1e1b12;
  #L1e1b02.  v3:= "" @kind object;
  #L1e1b06.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e1b0c.  v3:= temp;
  #L1e1b0e.  if v3 == 0 then goto L1e1b4a;
  #L1e1b12.  v0:= 1I;
  #L1e1b14.  `@@kotlinx.coroutines.h0.b` @type ^`boolean` := v0 @kind boolean;
  #L1e1b18.  v0:= `@@kotlinx.coroutines.h0.b` @type ^`boolean` @kind boolean;
  #L1e1b1c.  if v0 == 0 then goto L1e1b32;
  #L1e1b20.  v0:= "kotlinx.coroutines.stacktrace.recovery" @kind object;
  #L1e1b24.  call temp:= `systemProp`(v0, v2) @signature `Lkotlinx/coroutines/internal/w;.systemProp:(Ljava/lang/String;Z)Z` @kind static;
  #L1e1b2a.  v0:= temp;
  #L1e1b2c.  if v0 == 0 then goto L1e1b32;
  #L1e1b30.  v1:= 1I;
  #L1e1b32.  `@@kotlinx.coroutines.h0.c` @type ^`boolean` := v1 @kind boolean;
  #L1e1b36.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L1e1b3a.  v1:= 0L;
  #L1e1b3e.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:(J)V` @kind direct;
  #L1e1b44.  `@@kotlinx.coroutines.h0.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L1e1b48.  return @kind void;
  #L1e1b4a.  v1:= new `java.lang.StringBuilder`;
  #L1e1b4e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e1b54.  v2:= "System property 'kotlinx.coroutines.debug' has unrecognized value '" @kind object;
  #L1e1b58.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e1b5e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e1b64.  v0:= 39I;
  #L1e1b68.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e1b6e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e1b74.  v0:= temp @kind object;
  #L1e1b76.  v1:= new `java.lang.IllegalStateException`;
  #L1e1b7a.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e1b80.  v0:= temp @kind object;
  #L1e1b82.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e1b88.  throw v1;
}
procedure `boolean` `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1e1a18.  v0:= `@@kotlinx.coroutines.h0.a` @type ^`boolean` @kind boolean;
  #L1e1a1c.  return v0;
}
procedure `java.util.concurrent.atomic.AtomicLong` `getCOROUTINE_ID`() @signature `Lkotlinx/coroutines/h0;.getCOROUTINE_ID:()Ljava/util/concurrent/atomic/AtomicLong;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1e1a60.  v0:= `@@kotlinx.coroutines.h0.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L1e1a64.  return v0 @kind object;
}
procedure `boolean` `getDEBUG`() @signature `Lkotlinx/coroutines/h0;.getDEBUG:()Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1e1a30.  v0:= `@@kotlinx.coroutines.h0.b` @type ^`boolean` @kind boolean;
  #L1e1a34.  return v0;
}
procedure `boolean` `getRECOVER_STACK_TRACES`() @signature `Lkotlinx/coroutines/h0;.getRECOVER_STACK_TRACES:()Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1e1a48.  v0:= `@@kotlinx.coroutines.h0.c` @type ^`boolean` @kind boolean;
  #L1e1a4c.  return v0;
}
