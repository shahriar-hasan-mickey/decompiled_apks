record `kotlinx.coroutines.f1` @kind class @AccessFlag PUBLIC extends `kotlinx.coroutines.j1` @kind class, `kotlinx.coroutines.p` @kind interface {
  `boolean` `kotlinx.coroutines.f1.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.f1` v1 @kind this, `kotlinx.coroutines.d1` v2 @kind object) @signature `Lkotlinx/coroutines/f1;.<init>:(Lkotlinx/coroutines/d1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e3cec.  v0:= 1I;
  #L1e3cee.  call `<init>`(v1, v0) @signature `Lkotlinx/coroutines/j1;.<init>:(Z)V` @kind direct;
  #L1e3cf4.  call `initParentJobInternal$kotlinx_coroutines_core`(v1, v2) @signature `Lkotlinx/coroutines/j1;.initParentJobInternal$kotlinx_coroutines_core:(Lkotlinx/coroutines/d1;)V` @kind virtual;
  #L1e3cfa.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/f1;.a:()Z` @kind direct;
  #L1e3d00.  v2:= temp;
  #L1e3d02.  v1.`kotlinx.coroutines.f1.g` @type ^`boolean` := v2 @kind boolean;
  #L1e3d06.  return @kind void;
}
procedure `boolean` `a`(`kotlinx.coroutines.f1` v4 @kind this) @signature `Lkotlinx/coroutines/f1;.a:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e3c78.  call temp:= `getParentHandle$kotlinx_coroutines_core`(v4) @signature `Lkotlinx/coroutines/j1;.getParentHandle$kotlinx_coroutines_core:()Lkotlinx/coroutines/l;` @kind virtual;
  #L1e3c7e.  v0:= temp @kind object;
  #L1e3c80.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.m` @kind boolean;
  #L1e3c84.  v2:= 0I;
  #L1e3c86.  if v1 != 0 then goto L1e3c8c;
  #L1e3c8a.  v0:= v2 @kind object;
  #L1e3c8c.  v0:= (`kotlinx.coroutines.m`) v0 @kind object;
  #L1e3c90.  v1:= 0I;
  #L1e3c92.  if v0 == 0 then goto L1e3cda;
  #L1e3c96.  v0:= v0.`kotlinx.coroutines.i1.i` @type ^`kotlinx.coroutines.d1` @kind object;
  #L1e3c9a.  v0:= (`kotlinx.coroutines.j1`) v0 @kind object;
  #L1e3c9e.  if v0 == 0 then goto L1e3cda;
  #L1e3ca2.  call temp:= `getHandlesException$kotlinx_coroutines_core`(v0) @signature `Lkotlinx/coroutines/j1;.getHandlesException$kotlinx_coroutines_core:()Z` @kind virtual;
  #L1e3ca8.  v3:= temp;
  #L1e3caa.  if v3 == 0 then goto L1e3cb2;
  #L1e3cae.  v0:= 1I;
  #L1e3cb0.  return v0;
  #L1e3cb2.  call temp:= `getParentHandle$kotlinx_coroutines_core`(v0) @signature `Lkotlinx/coroutines/j1;.getParentHandle$kotlinx_coroutines_core:()Lkotlinx/coroutines/l;` @kind virtual;
  #L1e3cb8.  v0:= temp @kind object;
  #L1e3cba.  v3:= instanceof @variable v0 @type ^`kotlinx.coroutines.m` @kind boolean;
  #L1e3cbe.  if v3 != 0 then goto L1e3cc4;
  #L1e3cc2.  v0:= v2 @kind object;
  #L1e3cc4.  v0:= (`kotlinx.coroutines.m`) v0 @kind object;
  #L1e3cc8.  if v0 == 0 then goto L1e3cda;
  #L1e3ccc.  v0:= v0.`kotlinx.coroutines.i1.i` @type ^`kotlinx.coroutines.d1` @kind object;
  #L1e3cd0.  v0:= (`kotlinx.coroutines.j1`) v0 @kind object;
  #L1e3cd4.  if v0 == 0 then goto L1e3cda;
  #L1e3cd8.  goto L1e3ca2;
  #L1e3cda.  return v1;
}
procedure `boolean` `getHandlesException$kotlinx_coroutines_core`(`kotlinx.coroutines.f1` v1 @kind this) @signature `Lkotlinx/coroutines/f1;.getHandlesException$kotlinx_coroutines_core:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e3c4c.  v0:= v1.`kotlinx.coroutines.f1.g` @type ^`boolean` @kind boolean;
  #L1e3c50.  return v0;
}
procedure `boolean` `getOnCancelComplete$kotlinx_coroutines_core`(`kotlinx.coroutines.f1` v1 @kind this) @signature `Lkotlinx/coroutines/f1;.getOnCancelComplete$kotlinx_coroutines_core:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e3c64.  v0:= 1I;
  #L1e3c66.  return v0;
}
