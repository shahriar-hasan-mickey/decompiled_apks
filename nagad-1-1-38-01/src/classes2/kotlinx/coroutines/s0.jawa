record `kotlinx.coroutines.s0` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.t0` @kind class, `kotlinx.coroutines.k0` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.s0._delayed` @AccessFlag PRIVATE_VOLATILE;
  `int` `kotlinx.coroutines.s0._isCompleted` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `kotlinx.coroutines.s0._queue` @AccessFlag PRIVATE_VOLATILE;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.s0.j` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.s0.k` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/s0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1e2f54.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L1e2f58.  v1:= constclass @type ^`kotlinx.coroutines.s0` @kind object;
  #L1e2f5c.  v2:= "_queue" @kind object;
  #L1e2f60.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L1e2f66.  v2:= temp @kind object;
  #L1e2f68.  `@@kotlinx.coroutines.s0.j` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L1e2f6c.  v2:= "_delayed" @kind object;
  #L1e2f70.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L1e2f76.  v0:= temp @kind object;
  #L1e2f78.  `@@kotlinx.coroutines.s0.k` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L1e2f7c.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.s0` v1 @kind this) @signature `Lkotlinx/coroutines/s0;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e2f90.  call `<init>`(v1) @signature `Lkotlinx/coroutines/t0;.<init>:()V` @kind direct;
  #L1e2f96.  v0:= 0I;
  #L1e2f98.  v1.`kotlinx.coroutines.s0._queue` @type ^`java.lang.Object` := v0 @kind object;
  #L1e2f9c.  v1.`kotlinx.coroutines.s0._delayed` @type ^`java.lang.Object` := v0 @kind object;
  #L1e2fa0.  v0:= 0I;
  #L1e2fa2.  v1.`kotlinx.coroutines.s0._isCompleted` @type ^`int` := v0;
  #L1e2fa6.  return @kind void;
}
procedure `int` `a`(`kotlinx.coroutines.s0` v3 @kind this, `long` v4 , `kotlinx.coroutines.s0$a` v6 @kind object) @signature `Lkotlinx/coroutines/s0;.a:(JLkotlinx/coroutines/s0$a;)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1e2cd4.  call temp:= `c`(v3) @signature `Lkotlinx/coroutines/s0;.c:()Z` @kind direct;
  #L1e2cda.  v0:= temp;
  #L1e2cdc.  if v0 == 0 then goto L1e2ce4;
  #L1e2ce0.  v4:= 1I;
  #L1e2ce2.  return v4;
  #L1e2ce4.  v0:= v3.`kotlinx.coroutines.s0._delayed` @type ^`java.lang.Object` @kind object;
  #L1e2ce8.  v0:= (`kotlinx.coroutines.s0$b`) v0 @kind object;
  #L1e2cec.  if v0 == 0 then goto L1e2cf2;
  #L1e2cf0.  goto L1e2d16;
  #L1e2cf2.  v0:= `@@kotlinx.coroutines.s0.k` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e2cf6.  v1:= 0I;
  #L1e2cf8.  v2:= new `kotlinx.coroutines.s0$b`;
  #L1e2cfc.  call `<init>`(v2, v4) @signature `Lkotlinx/coroutines/s0$b;.<init>:(J)V` @kind direct;
  #L1e2d02.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e2d08.  v0:= v3.`kotlinx.coroutines.s0._delayed` @type ^`java.lang.Object` @kind object;
  #L1e2d0c.  call `checkNotNull`(v0) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1e2d12.  v0:= (`kotlinx.coroutines.s0$b`) v0 @kind object;
  #L1e2d16.  call temp:= `scheduleTask`(v6, v4, v0, v3) @signature `Lkotlinx/coroutines/s0$a;.scheduleTask:(JLkotlinx/coroutines/s0$b;Lkotlinx/coroutines/s0;)I` @kind virtual;
  #L1e2d1c.  v4:= temp;
  #L1e2d1e.  return v4;
}
procedure `void` `a`(`kotlinx.coroutines.s0` v4 @kind this) @signature `Lkotlinx/coroutines/s0;.a:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e2fb8.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/h0;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L1e2fbe.  v0:= temp;
  #L1e2fc0.  if v0 == 0 then goto L1e2fde;
  #L1e2fc4.  call temp:= `c`(v4) @signature `Lkotlinx/coroutines/s0;.c:()Z` @kind direct;
  #L1e2fca.  v0:= temp;
  #L1e2fcc.  if v0 == 0 then goto L1e2fd2;
  #L1e2fd0.  goto L1e2fde;
  #L1e2fd2.  v0:= new `java.lang.AssertionError`;
  #L1e2fd6.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1e2fdc.  throw v0;
  #L1e2fde.  v0:= v4.`kotlinx.coroutines.s0._queue` @type ^`java.lang.Object` @kind object;
  #L1e2fe2.  if v0 != 0 then goto L1e3002;
  #L1e2fe6.  v0:= `@@kotlinx.coroutines.s0.j` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e2fea.  v1:= 0I;
  #L1e2fec.  call temp:= `access$getCLOSED_EMPTY$p`() @signature `Lkotlinx/coroutines/v0;.access$getCLOSED_EMPTY$p:()Lkotlinx/coroutines/internal/v;` @kind static;
  #L1e2ff2.  v2:= temp @kind object;
  #L1e2ff4.  call temp:= `compareAndSet`(v0, v4, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e2ffa.  v0:= temp;
  #L1e2ffc.  if v0 == 0 then goto L1e2fde;
  #L1e3000.  return @kind void;
  #L1e3002.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.n` @kind boolean;
  #L1e3006.  if v1 == 0 then goto L1e3016;
  #L1e300a.  v0:= (`kotlinx.coroutines.internal.n`) v0 @kind object;
  #L1e300e.  call temp:= `close`(v0) @signature `Lkotlinx/coroutines/internal/n;.close:()Z` @kind virtual;
  #L1e3014.  return @kind void;
  #L1e3016.  call temp:= `access$getCLOSED_EMPTY$p`() @signature `Lkotlinx/coroutines/v0;.access$getCLOSED_EMPTY$p:()Lkotlinx/coroutines/internal/v;` @kind static;
  #L1e301c.  v1:= temp @kind object;
  #L1e301e.  if v0 != v1 then goto L1e3024;
  #L1e3022.  return @kind void;
  #L1e3024.  v1:= new `kotlinx.coroutines.internal.n`;
  #L1e3028.  v2:= 8I;
  #L1e302c.  v3:= 1I;
  #L1e302e.  call `<init>`(v1, v2, v3) @signature `Lkotlinx/coroutines/internal/n;.<init>:(IZ)V` @kind direct;
  #L1e3034.  if v0 == 0 then goto L1e3056;
  #L1e3038.  v2:= v0 @kind object;
  #L1e303a.  v2:= (`java.lang.Runnable`) v2 @kind object;
  #L1e303e.  call temp:= `addLast`(v1, v2) @signature `Lkotlinx/coroutines/internal/n;.addLast:(Ljava/lang/Object;)I` @kind virtual;
  #L1e3044.  v2:= `@@kotlinx.coroutines.s0.j` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e3048.  call temp:= `compareAndSet`(v2, v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e304e.  v0:= temp;
  #L1e3050.  if v0 == 0 then goto L1e2fde;
  #L1e3054.  return @kind void;
  #L1e3056.  v0:= new `java.lang.NullPointerException`;
  #L1e305a.  v1:= "null cannot be cast to non-null type kotlinx.coroutines.Runnable /* = java.lang.Runnable */" @kind object;
  #L1e305e.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e3064.  throw v0;
}
procedure `void` `a`(`kotlinx.coroutines.s0` v0 @kind this, `boolean` v1 ) @signature `Lkotlinx/coroutines/s0;.a:(Z)V` @AccessFlag PRIVATE_FINAL {
    temp;

  #L1e3190.  v0.`kotlinx.coroutines.s0._isCompleted` @type ^`int` := v1;
  #L1e3194.  return @kind void;
}
procedure `boolean` `a`(`kotlinx.coroutines.s0` v5 @kind this, `java.lang.Runnable` v6 @kind object) @signature `Lkotlinx/coroutines/s0;.a:(Ljava/lang/Runnable;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e2b30.  v0:= v5.`kotlinx.coroutines.s0._queue` @type ^`java.lang.Object` @kind object;
  #L1e2b34.  call temp:= `c`(v5) @signature `Lkotlinx/coroutines/s0;.c:()Z` @kind direct;
  #L1e2b3a.  v1:= temp;
  #L1e2b3c.  v2:= 0I;
  #L1e2b3e.  if v1 == 0 then goto L1e2b44;
  #L1e2b42.  return v2;
  #L1e2b44.  v1:= 1I;
  #L1e2b46.  if v0 != 0 then goto L1e2b5e;
  #L1e2b4a.  v0:= `@@kotlinx.coroutines.s0.j` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e2b4e.  v2:= 0I;
  #L1e2b50.  call temp:= `compareAndSet`(v0, v5, v2, v6) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e2b56.  v0:= temp;
  #L1e2b58.  if v0 == 0 then goto L1e2b30;
  #L1e2b5c.  return v1;
  #L1e2b5e.  v3:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.n` @kind boolean;
  #L1e2b62.  if v3 == 0 then goto L1e2bb0;
  #L1e2b66.  if v0 == 0 then goto L1e2ba0;
  #L1e2b6a.  v3:= v0 @kind object;
  #L1e2b6c.  v3:= (`kotlinx.coroutines.internal.n`) v3 @kind object;
  #L1e2b70.  call temp:= `addLast`(v3, v6) @signature `Lkotlinx/coroutines/internal/n;.addLast:(Ljava/lang/Object;)I` @kind virtual;
  #L1e2b76.  v4:= temp;
  #L1e2b78.  if v4 == 0 then goto L1e2b9e;
  #L1e2b7c.  if v4 == v1 then goto L1e2b8a;
  #L1e2b80.  v0:= 2I;
  #L1e2b82.  if v4 == v0 then goto L1e2b88;
  #L1e2b86.  goto L1e2b30;
  #L1e2b88.  return v2;
  #L1e2b8a.  v1:= `@@kotlinx.coroutines.s0.j` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e2b8e.  call temp:= `next`(v3) @signature `Lkotlinx/coroutines/internal/n;.next:()Lkotlinx/coroutines/internal/n;` @kind virtual;
  #L1e2b94.  v2:= temp @kind object;
  #L1e2b96.  call temp:= `compareAndSet`(v1, v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e2b9c.  goto L1e2b30;
  #L1e2b9e.  return v1;
  #L1e2ba0.  v6:= new `java.lang.NullPointerException`;
  #L1e2ba4.  v0:= "null cannot be cast to non-null type kotlinx.coroutines.Queue<kotlinx.coroutines.Runnable /* = java.lang.Runnable */> /* = kotlinx.coroutines.internal.LockFreeTaskQueueCore<kotlinx.coroutines.Runnable /* = java.lang.Runnable */> */" @kind object;
  #L1e2ba8.  call `<init>`(v6, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e2bae.  throw v6;
  #L1e2bb0.  call temp:= `access$getCLOSED_EMPTY$p`() @signature `Lkotlinx/coroutines/v0;.access$getCLOSED_EMPTY$p:()Lkotlinx/coroutines/internal/v;` @kind static;
  #L1e2bb6.  v3:= temp @kind object;
  #L1e2bb8.  if v0 != v3 then goto L1e2bbe;
  #L1e2bbc.  return v2;
  #L1e2bbe.  v2:= new `kotlinx.coroutines.internal.n`;
  #L1e2bc2.  v3:= 8I;
  #L1e2bc6.  call `<init>`(v2, v3, v1) @signature `Lkotlinx/coroutines/internal/n;.<init>:(IZ)V` @kind direct;
  #L1e2bcc.  if v0 == 0 then goto L1e2bf4;
  #L1e2bd0.  v3:= v0 @kind object;
  #L1e2bd2.  v3:= (`java.lang.Runnable`) v3 @kind object;
  #L1e2bd6.  call temp:= `addLast`(v2, v3) @signature `Lkotlinx/coroutines/internal/n;.addLast:(Ljava/lang/Object;)I` @kind virtual;
  #L1e2bdc.  call temp:= `addLast`(v2, v6) @signature `Lkotlinx/coroutines/internal/n;.addLast:(Ljava/lang/Object;)I` @kind virtual;
  #L1e2be2.  v3:= `@@kotlinx.coroutines.s0.j` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e2be6.  call temp:= `compareAndSet`(v3, v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e2bec.  v0:= temp;
  #L1e2bee.  if v0 == 0 then goto L1e2b30;
  #L1e2bf2.  return v1;
  #L1e2bf4.  v6:= new `java.lang.NullPointerException`;
  #L1e2bf8.  v0:= "null cannot be cast to non-null type kotlinx.coroutines.Runnable /* = java.lang.Runnable */" @kind object;
  #L1e2bfc.  call `<init>`(v6, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e2c02.  throw v6;
}
procedure `boolean` `a`(`kotlinx.coroutines.s0` v1 @kind this, `kotlinx.coroutines.s0$a` v2 @kind object) @signature `Lkotlinx/coroutines/s0;.a:(Lkotlinx/coroutines/s0$a;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1e2c9c.  v0:= v1.`kotlinx.coroutines.s0._delayed` @type ^`java.lang.Object` @kind object;
  #L1e2ca0.  v0:= (`kotlinx.coroutines.s0$b`) v0 @kind object;
  #L1e2ca4.  if v0 == 0 then goto L1e2cb6;
  #L1e2ca8.  call temp:= `peek`(v0) @signature `Lkotlinx/coroutines/internal/a0;.peek:()Lkotlinx/coroutines/internal/b0;` @kind virtual;
  #L1e2cae.  v0:= temp @kind object;
  #L1e2cb0.  v0:= (`kotlinx.coroutines.s0$a`) v0 @kind object;
  #L1e2cb4.  goto L1e2cb8;
  #L1e2cb6.  v0:= 0I;
  #L1e2cb8.  if v0 != v2 then goto L1e2cc0;
  #L1e2cbc.  v2:= 1I;
  #L1e2cbe.  goto L1e2cc2;
  #L1e2cc0.  v2:= 0I;
  #L1e2cc2.  return v2;
}
procedure `boolean` `access$isCompleted$p`(`kotlinx.coroutines.s0` v0 @kind object) @signature `Lkotlinx/coroutines/s0;.access$isCompleted$p:(Lkotlinx/coroutines/s0;)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1e2b14.  call temp:= `c`(v0) @signature `Lkotlinx/coroutines/s0;.c:()Z` @kind direct;
  #L1e2b1a.  v0:= temp;
  #L1e2b1c.  return v0;
}
procedure `java.lang.Runnable` `b`(`kotlinx.coroutines.s0` v4 @kind this) @signature `Lkotlinx/coroutines/s0;.b:()Ljava/lang/Runnable;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e2d30.  v0:= v4.`kotlinx.coroutines.s0._queue` @type ^`java.lang.Object` @kind object;
  #L1e2d34.  v1:= 0I;
  #L1e2d36.  if v0 != 0 then goto L1e2d3c;
  #L1e2d3a.  return v1 @kind object;
  #L1e2d3c.  v2:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.n` @kind boolean;
  #L1e2d40.  if v2 == 0 then goto L1e2d88;
  #L1e2d44.  if v0 == 0 then goto L1e2d78;
  #L1e2d48.  v1:= v0 @kind object;
  #L1e2d4a.  v1:= (`kotlinx.coroutines.internal.n`) v1 @kind object;
  #L1e2d4e.  call temp:= `removeFirstOrNull`(v1) @signature `Lkotlinx/coroutines/internal/n;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L1e2d54.  v2:= temp @kind object;
  #L1e2d56.  v3:= `@@kotlinx.coroutines.internal.n.g` @type ^`kotlinx.coroutines.internal.v` @kind object;
  #L1e2d5a.  if v2 == v3 then goto L1e2d64;
  #L1e2d5e.  v2:= (`java.lang.Runnable`) v2 @kind object;
  #L1e2d62.  return v2 @kind object;
  #L1e2d64.  v2:= `@@kotlinx.coroutines.s0.j` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e2d68.  call temp:= `next`(v1) @signature `Lkotlinx/coroutines/internal/n;.next:()Lkotlinx/coroutines/internal/n;` @kind virtual;
  #L1e2d6e.  v1:= temp @kind object;
  #L1e2d70.  call temp:= `compareAndSet`(v2, v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e2d76.  goto L1e2d30;
  #L1e2d78.  v0:= new `java.lang.NullPointerException`;
  #L1e2d7c.  v1:= "null cannot be cast to non-null type kotlinx.coroutines.Queue<kotlinx.coroutines.Runnable /* = java.lang.Runnable */> /* = kotlinx.coroutines.internal.LockFreeTaskQueueCore<kotlinx.coroutines.Runnable /* = java.lang.Runnable */> */" @kind object;
  #L1e2d80.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e2d86.  throw v0;
  #L1e2d88.  call temp:= `access$getCLOSED_EMPTY$p`() @signature `Lkotlinx/coroutines/v0;.access$getCLOSED_EMPTY$p:()Lkotlinx/coroutines/internal/v;` @kind static;
  #L1e2d8e.  v2:= temp @kind object;
  #L1e2d90.  if v0 != v2 then goto L1e2d96;
  #L1e2d94.  return v1 @kind object;
  #L1e2d96.  v2:= `@@kotlinx.coroutines.s0.j` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1e2d9a.  call temp:= `compareAndSet`(v2, v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L1e2da0.  v1:= temp;
  #L1e2da2.  if v1 == 0 then goto L1e2d30;
  #L1e2da6.  if v0 == 0 then goto L1e2db0;
  #L1e2daa.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L1e2dae.  return v0 @kind object;
  #L1e2db0.  v0:= new `java.lang.NullPointerException`;
  #L1e2db4.  v1:= "null cannot be cast to non-null type kotlinx.coroutines.Runnable /* = java.lang.Runnable */" @kind object;
  #L1e2db8.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e2dbe.  throw v0;
}
procedure `boolean` `c`(`kotlinx.coroutines.s0` v1 @kind this) @signature `Lkotlinx/coroutines/s0;.c:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1e2c14.  v0:= v1.`kotlinx.coroutines.s0._isCompleted` @type ^`int`;
  #L1e2c18.  return v0;
}
procedure `void` `d`(`kotlinx.coroutines.s0` v3 @kind this) @signature `Lkotlinx/coroutines/s0;.d:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1e30c0.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/x1;.getTimeSource:()Lkotlinx/coroutines/w1;` @kind static;
  #L1e30c6.  v0:= temp @kind object;
  #L1e30c8.  if v0 == 0 then goto L1e30d6;
  #L1e30cc.  call temp:= `nanoTime`(v0) @signature `Lkotlinx/coroutines/w1;.nanoTime:()J` @kind interface;
  #L1e30d2.  v0:= temp @kind wide;
  #L1e30d4.  goto L1e30de;
  #L1e30d6.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L1e30dc.  v0:= temp @kind wide;
  #L1e30de.  v2:= v3.`kotlinx.coroutines.s0._delayed` @type ^`java.lang.Object` @kind object;
  #L1e30e2.  v2:= (`kotlinx.coroutines.s0$b`) v2 @kind object;
  #L1e30e6.  if v2 == 0 then goto L1e3102;
  #L1e30ea.  call temp:= `removeFirstOrNull`(v2) @signature `Lkotlinx/coroutines/internal/a0;.removeFirstOrNull:()Lkotlinx/coroutines/internal/b0;` @kind virtual;
  #L1e30f0.  v2:= temp @kind object;
  #L1e30f2.  v2:= (`kotlinx.coroutines.s0$a`) v2 @kind object;
  #L1e30f6.  if v2 == 0 then goto L1e3102;
  #L1e30fa.  call `reschedule`(v3, v0, v2) @signature `Lkotlinx/coroutines/t0;.reschedule:(JLkotlinx/coroutines/s0$a;)V` @kind virtual;
  #L1e3100.  goto L1e30de;
  #L1e3102.  return @kind void;
}
procedure `void` `dispatch`(`kotlinx.coroutines.s0` v0 @kind this, `kotlin.t.g` v1 @kind object, `java.lang.Runnable` v2 @kind object) @signature `Lkotlinx/coroutines/s0;.dispatch:(Lkotlin/t/g;Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1e3078.  call `enqueue`(v0, v2) @signature `Lkotlinx/coroutines/s0;.enqueue:(Ljava/lang/Runnable;)V` @kind virtual;
  #L1e307e.  return @kind void;
}
procedure `void` `enqueue`(`kotlinx.coroutines.s0` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lkotlinx/coroutines/s0;.enqueue:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1e3090.  call temp:= `a`(v1, v2) @signature `Lkotlinx/coroutines/s0;.a:(Ljava/lang/Runnable;)Z` @kind direct;
  #L1e3096.  v0:= temp;
  #L1e3098.  if v0 == 0 then goto L1e30a4;
  #L1e309c.  call `unpark`(v1) @signature `Lkotlinx/coroutines/t0;.unpark:()V` @kind virtual;
  #L1e30a2.  goto L1e30ae;
  #L1e30a4.  v0:= `@@kotlinx.coroutines.j0.m` @type ^`kotlinx.coroutines.j0` @kind object;
  #L1e30a8.  call `enqueue`(v0, v2) @signature `Lkotlinx/coroutines/s0;.enqueue:(Ljava/lang/Runnable;)V` @kind virtual;
  #L1e30ae.  return @kind void;
}
procedure `long` `getNextTime`(`kotlinx.coroutines.s0` v6 @kind this) @signature `Lkotlinx/coroutines/s0;.getNextTime:()J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1e2dd0.  call temp:= `getNextTime`(v6) @signature `Lkotlinx/coroutines/r0;.getNextTime:()J` @kind super;
  #L1e2dd6.  v0:= temp @kind wide;
  #L1e2dd8.  v2:= 0L;
  #L1e2ddc.  v4:= lcmp(v0, v2);
  #L1e2de0.  if v4 != 0 then goto L1e2de6;
  #L1e2de4.  return v2 @kind wide;
  #L1e2de6.  v0:= v6.`kotlinx.coroutines.s0._queue` @type ^`java.lang.Object` @kind object;
  #L1e2dea.  v4:= 9223372036854775807L;
  #L1e2df4.  if v0 != 0 then goto L1e2dfa;
  #L1e2df8.  goto L1e2e14;
  #L1e2dfa.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.n` @kind boolean;
  #L1e2dfe.  if v1 == 0 then goto L1e2e60;
  #L1e2e02.  v0:= (`kotlinx.coroutines.internal.n`) v0 @kind object;
  #L1e2e06.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/n;.isEmpty:()Z` @kind virtual;
  #L1e2e0c.  v0:= temp;
  #L1e2e0e.  if v0 != 0 then goto L1e2e14;
  #L1e2e12.  return v2 @kind wide;
  #L1e2e14.  v0:= v6.`kotlinx.coroutines.s0._delayed` @type ^`java.lang.Object` @kind object;
  #L1e2e18.  v0:= (`kotlinx.coroutines.s0$b`) v0 @kind object;
  #L1e2e1c.  if v0 == 0 then goto L1e2e5e;
  #L1e2e20.  call temp:= `peek`(v0) @signature `Lkotlinx/coroutines/internal/a0;.peek:()Lkotlinx/coroutines/internal/b0;` @kind virtual;
  #L1e2e26.  v0:= temp @kind object;
  #L1e2e28.  v0:= (`kotlinx.coroutines.s0$a`) v0 @kind object;
  #L1e2e2c.  if v0 == 0 then goto L1e2e5e;
  #L1e2e30.  v0:= v0.`kotlinx.coroutines.s0$a.h` @type ^`long` @kind wide;
  #L1e2e34.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/x1;.getTimeSource:()Lkotlinx/coroutines/w1;` @kind static;
  #L1e2e3a.  v4:= temp @kind object;
  #L1e2e3c.  if v4 == 0 then goto L1e2e4a;
  #L1e2e40.  call temp:= `nanoTime`(v4) @signature `Lkotlinx/coroutines/w1;.nanoTime:()J` @kind interface;
  #L1e2e46.  v4:= temp @kind wide;
  #L1e2e48.  goto L1e2e52;
  #L1e2e4a.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L1e2e50.  v4:= temp @kind wide;
  #L1e2e52.  v0:= v0 - v4 @kind long;
  #L1e2e54.  call temp:= `coerceAtLeast`(v0, v2) @signature `Lkotlin/x/e;.coerceAtLeast:(JJ)J` @kind static;
  #L1e2e5a.  v0:= temp @kind wide;
  #L1e2e5c.  return v0 @kind wide;
  #L1e2e5e.  return v4 @kind wide;
  #L1e2e60.  call temp:= `access$getCLOSED_EMPTY$p`() @signature `Lkotlinx/coroutines/v0;.access$getCLOSED_EMPTY$p:()Lkotlinx/coroutines/internal/v;` @kind static;
  #L1e2e66.  v1:= temp @kind object;
  #L1e2e68.  if v0 != v1 then goto L1e2e6e;
  #L1e2e6c.  return v4 @kind wide;
  #L1e2e6e.  return v2 @kind wide;
}
procedure `boolean` `isEmpty`(`kotlinx.coroutines.s0` v4 @kind this) @signature `Lkotlinx/coroutines/s0;.isEmpty:()Z` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e2c2c.  call temp:= `isUnconfinedQueueEmpty`(v4) @signature `Lkotlinx/coroutines/r0;.isUnconfinedQueueEmpty:()Z` @kind virtual;
  #L1e2c32.  v0:= temp;
  #L1e2c34.  v1:= 0I;
  #L1e2c36.  if v0 != 0 then goto L1e2c3c;
  #L1e2c3a.  return v1;
  #L1e2c3c.  v0:= v4.`kotlinx.coroutines.s0._delayed` @type ^`java.lang.Object` @kind object;
  #L1e2c40.  v0:= (`kotlinx.coroutines.s0$b`) v0 @kind object;
  #L1e2c44.  if v0 == 0 then goto L1e2c56;
  #L1e2c48.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/a0;.isEmpty:()Z` @kind virtual;
  #L1e2c4e.  v0:= temp;
  #L1e2c50.  if v0 != 0 then goto L1e2c56;
  #L1e2c54.  return v1;
  #L1e2c56.  v0:= v4.`kotlinx.coroutines.s0._queue` @type ^`java.lang.Object` @kind object;
  #L1e2c5a.  v2:= 1I;
  #L1e2c5c.  if v0 != 0 then goto L1e2c64;
  #L1e2c60.  v1:= 1I;
  #L1e2c62.  goto L1e2c88;
  #L1e2c64.  v3:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.n` @kind boolean;
  #L1e2c68.  if v3 == 0 then goto L1e2c7a;
  #L1e2c6c.  v0:= (`kotlinx.coroutines.internal.n`) v0 @kind object;
  #L1e2c70.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/n;.isEmpty:()Z` @kind virtual;
  #L1e2c76.  v1:= temp;
  #L1e2c78.  goto L1e2c88;
  #L1e2c7a.  call temp:= `access$getCLOSED_EMPTY$p`() @signature `Lkotlinx/coroutines/v0;.access$getCLOSED_EMPTY$p:()Lkotlinx/coroutines/internal/v;` @kind static;
  #L1e2c80.  v3:= temp @kind object;
  #L1e2c82.  if v0 != v3 then goto L1e2c88;
  #L1e2c86.  goto L1e2c60;
  #L1e2c88.  return v1;
}
procedure `long` `processNextEvent`(`kotlinx.coroutines.s0` v9 @kind this) @signature `Lkotlinx/coroutines/s0;.processNextEvent:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1e2e80.  call temp:= `processUnconfinedEvent`(v9) @signature `Lkotlinx/coroutines/r0;.processUnconfinedEvent:()Z` @kind virtual;
  #L1e2e86.  v0:= temp;
  #L1e2e88.  v1:= 0L;
  #L1e2e8c.  if v0 == 0 then goto L1e2e92;
  #L1e2e90.  return v1 @kind wide;
  #L1e2e92.  v0:= v9.`kotlinx.coroutines.s0._delayed` @type ^`java.lang.Object` @kind object;
  #L1e2e96.  v0:= (`kotlinx.coroutines.s0$b`) v0 @kind object;
  #L1e2e9a.  if v0 == 0 then goto L1e2f1a;
  #L1e2e9e.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/a0;.isEmpty:()Z` @kind virtual;
  #L1e2ea4.  v3:= temp;
  #L1e2ea6.  if v3 != 0 then goto L1e2f1a;
  #L1e2eaa.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/x1;.getTimeSource:()Lkotlinx/coroutines/w1;` @kind static;
  #L1e2eb0.  v3:= temp @kind object;
  #L1e2eb2.  if v3 == 0 then goto L1e2ec0;
  #L1e2eb6.  call temp:= `nanoTime`(v3) @signature `Lkotlinx/coroutines/w1;.nanoTime:()J` @kind interface;
  #L1e2ebc.  v3:= temp @kind wide;
  #L1e2ebe.  goto L1e2ec8;
  #L1e2ec0.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L1e2ec6.  v3:= temp @kind wide;
  #L1e2ec8.  @monitorenter v0
  #L1e2eca.  call temp:= `firstImpl`(v0) @signature `Lkotlinx/coroutines/internal/a0;.firstImpl:()Lkotlinx/coroutines/internal/b0;` @kind virtual;
  #L1e2ed0.  v5:= temp @kind object;
  #L1e2ed2.  v6:= 0I;
  #L1e2ed4.  if v5 == 0 then goto L1e2f08;
  #L1e2ed8.  v5:= (`kotlinx.coroutines.s0$a`) v5 @kind object;
  #L1e2edc.  call temp:= `timeToExecute`(v5, v3) @signature `Lkotlinx/coroutines/s0$a;.timeToExecute:(J)Z` @kind virtual;
  #L1e2ee2.  v7:= temp;
  #L1e2ee4.  v8:= 0I;
  #L1e2ee6.  if v7 == 0 then goto L1e2ef4;
  #L1e2eea.  call temp:= `a`(v9, v5) @signature `Lkotlinx/coroutines/s0;.a:(Ljava/lang/Runnable;)Z` @kind direct;
  #L1e2ef0.  v5:= temp;
  #L1e2ef2.  goto L1e2ef6;
  #L1e2ef4.  v5:= 0I;
  #L1e2ef6.  if v5 == 0 then goto L1e2f04;
  #L1e2efa.  call temp:= `removeAtImpl`(v0, v8) @signature `Lkotlinx/coroutines/internal/a0;.removeAtImpl:(I)Lkotlinx/coroutines/internal/b0;` @kind virtual;
  #L1e2f00.  v5:= temp @kind object;
  #L1e2f02.  v6:= v5 @kind object;
  #L1e2f04.  @monitorexit v0
  #L1e2f06.  goto L1e2f0a;
  #L1e2f08.  @monitorexit v0
  #L1e2f0a.  v6:= (`kotlinx.coroutines.s0$a`) v6 @kind object;
  #L1e2f0e.  if v6 == 0 then goto L1e2f1a;
  #L1e2f12.  goto L1e2ec8;
  #L1e2f14.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1e2f16.  @monitorexit v0
  #L1e2f18.  throw v1;
  #L1e2f1a.  call temp:= `b`(v9) @signature `Lkotlinx/coroutines/s0;.b:()Ljava/lang/Runnable;` @kind direct;
  #L1e2f20.  v0:= temp @kind object;
  #L1e2f22.  if v0 == 0 then goto L1e2f2e;
  #L1e2f26.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L1e2f2c.  return v1 @kind wide;
  #L1e2f2e.  call temp:= `getNextTime`(v9) @signature `Lkotlinx/coroutines/s0;.getNextTime:()J` @kind virtual;
  #L1e2f34.  v0:= temp @kind wide;
  #L1e2f36.  return v0 @kind wide;
  catch `java.lang.Throwable` @[L1e2eca..L1e2f02] goto L1e2f14;
}
procedure `void` `resetAll`(`kotlinx.coroutines.s0` v1 @kind this) @signature `Lkotlinx/coroutines/s0;.resetAll:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1e3114.  v0:= 0I;
  #L1e3116.  v1.`kotlinx.coroutines.s0._queue` @type ^`java.lang.Object` := v0 @kind object;
  #L1e311a.  v1.`kotlinx.coroutines.s0._delayed` @type ^`java.lang.Object` := v0 @kind object;
  #L1e311e.  return @kind void;
}
procedure `void` `schedule`(`kotlinx.coroutines.s0` v2 @kind this, `long` v3 , `kotlinx.coroutines.s0$a` v5 @kind object) @signature `Lkotlinx/coroutines/s0;.schedule:(JLkotlinx/coroutines/s0$a;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1e3130.  call temp:= `a`(v2, v3, v5) @signature `Lkotlinx/coroutines/s0;.a:(JLkotlinx/coroutines/s0$a;)I` @kind direct;
  #L1e3136.  v0:= temp;
  #L1e3138.  if v0 == 0 then goto L1e316a;
  #L1e313c.  v1:= 1I;
  #L1e313e.  if v0 == v1 then goto L1e3162;
  #L1e3142.  v3:= 2I;
  #L1e3144.  if v0 != v3 then goto L1e314a;
  #L1e3148.  goto L1e317c;
  #L1e314a.  v3:= new `java.lang.IllegalStateException`;
  #L1e314e.  v4:= "unexpected result" @kind object;
  #L1e3152.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e3158.  v4:= temp @kind object;
  #L1e315a.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e3160.  throw v3;
  #L1e3162.  call `reschedule`(v2, v3, v5) @signature `Lkotlinx/coroutines/t0;.reschedule:(JLkotlinx/coroutines/s0$a;)V` @kind virtual;
  #L1e3168.  goto L1e317c;
  #L1e316a.  call temp:= `a`(v2, v5) @signature `Lkotlinx/coroutines/s0;.a:(Lkotlinx/coroutines/s0$a;)Z` @kind direct;
  #L1e3170.  v3:= temp;
  #L1e3172.  if v3 == 0 then goto L1e317c;
  #L1e3176.  call `unpark`(v2) @signature `Lkotlinx/coroutines/t0;.unpark:()V` @kind virtual;
  #L1e317c.  return @kind void;
}
procedure `void` `shutdown`(`kotlinx.coroutines.s0` v5 @kind this) @signature `Lkotlinx/coroutines/s0;.shutdown:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e31a8.  v0:= `@@kotlinx.coroutines.v1.b` @type ^`kotlinx.coroutines.v1` @kind object;
  #L1e31ac.  call `resetEventLoop$kotlinx_coroutines_core`(v0) @signature `Lkotlinx/coroutines/v1;.resetEventLoop$kotlinx_coroutines_core:()V` @kind virtual;
  #L1e31b2.  v0:= 1I;
  #L1e31b4.  call `a`(v5, v0) @signature `Lkotlinx/coroutines/s0;.a:(Z)V` @kind direct;
  #L1e31ba.  call `a`(v5) @signature `Lkotlinx/coroutines/s0;.a:()V` @kind direct;
  #L1e31c0.  call temp:= `processNextEvent`(v5) @signature `Lkotlinx/coroutines/s0;.processNextEvent:()J` @kind virtual;
  #L1e31c6.  v0:= temp @kind wide;
  #L1e31c8.  v2:= 0L;
  #L1e31cc.  v4:= lcmp(v0, v2);
  #L1e31d0.  if v4 > 0 then goto L1e31d6;
  #L1e31d4.  goto L1e31c0;
  #L1e31d6.  call `d`(v5) @signature `Lkotlinx/coroutines/s0;.d:()V` @kind direct;
  #L1e31dc.  return @kind void;
}
