record `kotlinx.coroutines.l1` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.r1` @kind class {
  `kotlin.t.d` `kotlinx.coroutines.l1.i` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.l1` v1 @kind this, `kotlin.t.g` v2 @kind object, `kotlin.v.b.p` v3 @kind object) @signature `Lkotlinx/coroutines/l1;.<init>:(Lkotlin/t/g;Lkotlin/v/b/p;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e5ed8.  v0:= 0I;
  #L1e5eda.  call `<init>`(v1, v2, v0) @signature `Lkotlinx/coroutines/r1;.<init>:(Lkotlin/t/g;Z)V` @kind direct;
  #L1e5ee0.  call temp:= `createCoroutineUnintercepted`(v3, v1, v1) @signature `Lkotlin/t/i/b;.createCoroutineUnintercepted:(Lkotlin/v/b/p;Ljava/lang/Object;Lkotlin/t/d;)Lkotlin/t/d;` @kind static;
  #L1e5ee6.  v2:= temp @kind object;
  #L1e5ee8.  v1.`kotlinx.coroutines.l1.i` @type ^`kotlin.t.d` := v2 @kind object;
  #L1e5eec.  return @kind void;
}
procedure `void` `onStart`(`kotlinx.coroutines.l1` v1 @kind this) @signature `Lkotlinx/coroutines/l1;.onStart:()V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1e5f00.  v0:= v1.`kotlinx.coroutines.l1.i` @type ^`kotlin.t.d` @kind object;
  #L1e5f04.  call `startCoroutineCancellable`(v0, v1) @signature `Lkotlinx/coroutines/c2/a;.startCoroutineCancellable:(Lkotlin/t/d;Lkotlin/t/d;)V` @kind static;
  #L1e5f0a.  return @kind void;
}
