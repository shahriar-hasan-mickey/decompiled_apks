record `kotlinx.coroutines.y1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.x` @kind class {
}
global `kotlinx.coroutines.y1` `@@kotlinx.coroutines.y1.g` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/y1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e6404.  v0:= new `kotlinx.coroutines.y1`;
  #L1e6408.  call `<init>`(v0) @signature `Lkotlinx/coroutines/y1;.<init>:()V` @kind direct;
  #L1e640e.  `@@kotlinx.coroutines.y1.g` @type ^`kotlinx.coroutines.y1` := v0 @kind object;
  #L1e6412.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.y1` v0 @kind this) @signature `Lkotlinx/coroutines/y1;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1e6424.  call `<init>`(v0) @signature `Lkotlinx/coroutines/x;.<init>:()V` @kind direct;
  #L1e642a.  return @kind void;
}
procedure `void` `dispatch`(`kotlinx.coroutines.y1` v0 @kind this, `kotlin.t.g` v1 @kind object, `java.lang.Runnable` v2 @kind object) @signature `Lkotlinx/coroutines/y1;.dispatch:(Lkotlin/t/g;Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;

  #L1e643c.  v2:= `@@kotlinx.coroutines.a2.g` @type ^`kotlinx.coroutines.a2$a` @kind object;
  #L1e6440.  call temp:= `get`(v1, v2) @signature `Lkotlin/t/g;.get:(Lkotlin/t/g$c;)Lkotlin/t/g$b;` @kind interface;
  #L1e6446.  v1:= temp @kind object;
  #L1e6448.  v1:= (`kotlinx.coroutines.a2`) v1 @kind object;
  #L1e644c.  if v1 == 0 then goto L1e6458;
  #L1e6450.  v2:= 1I;
  #L1e6452.  v1.`kotlinx.coroutines.a2.f` @type ^`boolean` := v2 @kind boolean;
  #L1e6456.  return @kind void;
  #L1e6458.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1e645c.  v2:= "Dispatchers.Unconfined.dispatch function can only be used by the yield function. If you wrap Unconfined dispatcher in your code, make sure you properly delegate isDispatchNeeded and dispatch calls." @kind object;
  #L1e6460.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e6466.  throw v1;
}
procedure `boolean` `isDispatchNeeded`(`kotlinx.coroutines.y1` v0 @kind this, `kotlin.t.g` v1 @kind object) @signature `Lkotlinx/coroutines/y1;.isDispatchNeeded:(Lkotlin/t/g;)Z` @AccessFlag PUBLIC {
    temp;

  #L1e63d8.  v1:= 0I;
  #L1e63da.  return v1;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.y1` v1 @kind this) @signature `Lkotlinx/coroutines/y1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e63ec.  v0:= "Dispatchers.Unconfined" @kind object;
  #L1e63f0.  return v0 @kind object;
}
