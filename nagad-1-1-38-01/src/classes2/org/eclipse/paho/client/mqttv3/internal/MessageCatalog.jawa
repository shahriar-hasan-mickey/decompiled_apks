record `org.eclipse.paho.client.mqttv3.internal.MessageCatalog` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `org.eclipse.paho.client.mqttv3.internal.MessageCatalog` `@@org.eclipse.paho.client.mqttv3.internal.MessageCatalog.INSTANCE` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lorg/eclipse/paho/client/mqttv3/internal/MessageCatalog;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L231804.  return @kind void;
}
procedure `void` `<init>`(`org.eclipse.paho.client.mqttv3.internal.MessageCatalog` v0 @kind this) @signature `Lorg/eclipse/paho/client/mqttv3/internal/MessageCatalog;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L231818.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23181e.  return @kind void;
}
procedure `java.lang.String` `getMessage`(`int` v2 ) @signature `Lorg/eclipse/paho/client/mqttv3/internal/MessageCatalog;.getMessage:(I)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L23175c.  v0:= `@@org.eclipse.paho.client.mqttv3.internal.MessageCatalog.INSTANCE` @type ^`org.eclipse.paho.client.mqttv3.internal.MessageCatalog` @kind object;
  #L231760.  if v0 != 0 then goto L2317c8;
  #L231764.  v0:= "java.util.ResourceBundle" @kind object;
  #L231768.  call temp:= `isClassAvailable`(v0) @signature `Lorg/eclipse/paho/client/mqttv3/internal/ExceptionHelper;.isClassAvailable:(Ljava/lang/String;)Z` @kind static;
  #L23176e.  v0:= temp;
  #L231770.  v1:= "" @kind object;
  #L231774.  if v0 == 0 then goto L231798;
  #L231778.  v0:= "org.eclipse.paho.client.mqttv3.internal.ResourceBundleCatalog" @kind object;
  #L23177c.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L231782.  v0:= temp @kind object;
  #L231784.  call temp:= `newInstance`(v0) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L23178a.  v0:= temp @kind object;
  #L23178c.  v0:= (`org.eclipse.paho.client.mqttv3.internal.MessageCatalog`) v0 @kind object;
  #L231790.  `@@org.eclipse.paho.client.mqttv3.internal.MessageCatalog.INSTANCE` @type ^`org.eclipse.paho.client.mqttv3.internal.MessageCatalog` := v0 @kind object;
  #L231794.  goto L2317c8;
  #L231796.  return v1 @kind object;
  #L231798.  v0:= "org.eclipse.paho.client.mqttv3.internal.MIDPCatalog" @kind object;
  #L23179c.  call temp:= `isClassAvailable`(v0) @signature `Lorg/eclipse/paho/client/mqttv3/internal/ExceptionHelper;.isClassAvailable:(Ljava/lang/String;)Z` @kind static;
  #L2317a2.  v0:= temp;
  #L2317a4.  if v0 == 0 then goto L2317c8;
  #L2317a8.  v0:= "org.eclipse.paho.client.mqttv3.internal.MIDPCatalog" @kind object;
  #L2317ac.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L2317b2.  v0:= temp @kind object;
  #L2317b4.  call temp:= `newInstance`(v0) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L2317ba.  v0:= temp @kind object;
  #L2317bc.  v0:= (`org.eclipse.paho.client.mqttv3.internal.MessageCatalog`) v0 @kind object;
  #L2317c0.  `@@org.eclipse.paho.client.mqttv3.internal.MessageCatalog.INSTANCE` @type ^`org.eclipse.paho.client.mqttv3.internal.MessageCatalog` := v0 @kind object;
  #L2317c4.  goto L2317c8;
  #L2317c6.  return v1 @kind object;
  #L2317c8.  v0:= `@@org.eclipse.paho.client.mqttv3.internal.MessageCatalog.INSTANCE` @type ^`org.eclipse.paho.client.mqttv3.internal.MessageCatalog` @kind object;
  #L2317cc.  call temp:= `getLocalizedMessage`(v0, v2) @signature `Lorg/eclipse/paho/client/mqttv3/internal/MessageCatalog;.getLocalizedMessage:(I)Ljava/lang/String;` @kind virtual;
  #L2317d2.  v2:= temp @kind object;
  #L2317d4.  return v2 @kind object;
  catch `java.lang.Exception` @[L23177c..L231794] goto L231796;
  catch `java.lang.Exception` @[L2317ac..L2317c4] goto L2317c6;
}
procedure `java.lang.String` `getLocalizedMessage`(`int` v0 ) @signature `Lorg/eclipse/paho/client/mqttv3/internal/MessageCatalog;.getLocalizedMessage:(I)Ljava/lang/String;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
