record `com.yalantis.ucrop.util.CubicEasing` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.yalantis.ucrop.util.CubicEasing` v0 @kind this) @signature `Lcom/yalantis/ucrop/util/CubicEasing;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1bcde0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bcde6.  return @kind void;
}
procedure `float` `easeIn`(`float` v0 , `float` v1 , `float` v2 , `float` v3 ) @signature `Lcom/yalantis/ucrop/util/CubicEasing;.easeIn:(FFFF)F` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1bcd48.  v0:= v0 / v3 @kind float;
  #L1bcd4a.  v2:= v2 * v0 @kind float;
  #L1bcd4e.  v2:= v2 * v0 @kind float;
  #L1bcd52.  v2:= v2 * v0 @kind float;
  #L1bcd56.  v2:= v2 + v1 @kind float;
  #L1bcd58.  return v2;
}
procedure `float` `easeInOut`(`float` v1 , `float` v2 , `float` v3 , `float` v4 ) @signature `Lcom/yalantis/ucrop/util/CubicEasing;.easeInOut:(FFFF)F` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1bcd6c.  v0:= 2.0F;
  #L1bcd70.  v4:= v4 / v0 @kind float;
  #L1bcd72.  v1:= v1 / v4 @kind float;
  #L1bcd74.  v4:= 1.0F;
  #L1bcd78.  v4:= fcmpg(v1, v4);
  #L1bcd7c.  v3:= v3 / v0 @kind float;
  #L1bcd7e.  if v4 >= 0 then goto L1bcd90;
  #L1bcd82.  v3:= v3 * v1 @kind float;
  #L1bcd86.  v3:= v3 * v1 @kind float;
  #L1bcd8a.  v3:= v3 * v1 @kind float;
  #L1bcd8e.  goto L1bcda0;
  #L1bcd90.  v1:= v1 - v0 @kind float;
  #L1bcd92.  v4:= v1 * v1 @kind float;
  #L1bcd96.  v4:= v4 * v1 @kind float;
  #L1bcd9a.  v4:= v4 + v0 @kind float;
  #L1bcd9c.  v3:= v3 * v4 @kind float;
  #L1bcda0.  v3:= v3 + v2 @kind float;
  #L1bcda2.  return v3;
}
procedure `float` `easeOut`(`float` v1 , `float` v2 , `float` v3 , `float` v4 ) @signature `Lcom/yalantis/ucrop/util/CubicEasing;.easeOut:(FFFF)F` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1bcdb4.  v1:= v1 / v4 @kind float;
  #L1bcdb6.  v4:= 1.0F;
  #L1bcdba.  v1:= v1 - v4 @kind float;
  #L1bcdbc.  v0:= v1 * v1 @kind float;
  #L1bcdc0.  v0:= v0 * v1 @kind float;
  #L1bcdc4.  v0:= v0 + v4 @kind float;
  #L1bcdc6.  v3:= v3 * v0 @kind float;
  #L1bcdca.  v3:= v3 + v2 @kind float;
  #L1bcdcc.  return v3;
}
