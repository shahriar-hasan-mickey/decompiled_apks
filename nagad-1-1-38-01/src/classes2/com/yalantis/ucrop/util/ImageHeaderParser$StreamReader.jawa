record `com.yalantis.ucrop.util.ImageHeaderParser$StreamReader` @kind class @AccessFlag  extends `com.yalantis.ucrop.util.ImageHeaderParser$Reader` @kind interface {
  `java.io.InputStream` `com.yalantis.ucrop.util.ImageHeaderParser$StreamReader.is` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lcom/yalantis/ucrop/util/ImageHeaderParser$StreamReader;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1bd880.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bd886.  v0.`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` := v1 @kind object;
  #L1bd88a.  return @kind void;
}
procedure `int` `getUInt16`(`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader` v2 @kind this) @signature `Lcom/yalantis/ucrop/util/ImageHeaderParser$StreamReader;.getUInt16:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1bd78c.  v0:= v2.`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L1bd790.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L1bd796.  v0:= temp;
  #L1bd798.  v0:= v0 ^< 8;
  #L1bd79c.  v1:= 65280I;
  #L1bd7a2.  v0:= v0 ^& v1 @kind int;
  #L1bd7a4.  v1:= v2.`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L1bd7a8.  call temp:= `read`(v1) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L1bd7ae.  v1:= temp;
  #L1bd7b0.  v1:= v1 ^& 255;
  #L1bd7b4.  v0:= v0 ^| v1 @kind int;
  #L1bd7b6.  return v0;
}
procedure `short` `getUInt8`(`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader` v1 @kind this) @signature `Lcom/yalantis/ucrop/util/ImageHeaderParser$StreamReader;.getUInt8:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bd85c.  v0:= v1.`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L1bd860.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L1bd866.  v0:= temp;
  #L1bd868.  v0:= v0 ^& 255;
  #L1bd86c.  v0:= (`short`) v0 @kind i2s;
  #L1bd86e.  return v0;
}
procedure `int` `read`(`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader` v3 @kind this, `byte`[] v4 @kind object, `int` v5 ) @signature `Lcom/yalantis/ucrop/util/ImageHeaderParser$StreamReader;.read:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1bd7c8.  v0:= v5;
  #L1bd7ca.  if v0 <= 0 then goto L1bd7e8;
  #L1bd7ce.  v1:= v3.`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L1bd7d2.  v2:= v5 - v0 @kind int;
  #L1bd7d6.  call temp:= `read`(v1, v4, v2, v0) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L1bd7dc.  v1:= temp;
  #L1bd7de.  v2:= -1I;
  #L1bd7e0.  if v1 == v2 then goto L1bd7e8;
  #L1bd7e4.  v0:= v0 - v1 @kind int;
  #L1bd7e6.  goto L1bd7ca;
  #L1bd7e8.  v5:= v5 - v0 @kind int;
  #L1bd7ea.  return v5;
}
procedure `long` `skip`(`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader` v7 @kind this, `long` v8 ) @signature `Lcom/yalantis/ucrop/util/ImageHeaderParser$StreamReader;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1bd7fc.  v0:= 0L;
  #L1bd800.  v2:= lcmp(v8, v0);
  #L1bd804.  if v2 >= 0 then goto L1bd80a;
  #L1bd808.  return v0 @kind wide;
  #L1bd80a.  v2:= v8 @kind wide;
  #L1bd80c.  v4:= lcmp(v2, v0);
  #L1bd810.  if v4 <= 0 then goto L1bd846;
  #L1bd814.  v4:= v7.`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L1bd818.  call temp:= `skip`(v4, v2) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L1bd81e.  v4:= temp @kind wide;
  #L1bd820.  v6:= lcmp(v4, v0);
  #L1bd824.  if v6 <= 0 then goto L1bd82c;
  #L1bd828.  v2:= v2 - v4 @kind long;
  #L1bd82a.  goto L1bd80c;
  #L1bd82c.  v4:= v7.`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L1bd830.  call temp:= `read`(v4) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L1bd836.  v4:= temp;
  #L1bd838.  v5:= -1I;
  #L1bd83a.  if v4 != v5 then goto L1bd840;
  #L1bd83e.  goto L1bd846;
  #L1bd840.  v4:= 1L;
  #L1bd844.  goto L1bd828;
  #L1bd846.  v8:= v8 - v2 @kind long;
  #L1bd848.  return v8 @kind wide;
}
