record `com.konasl.security.service.des.DesCipherJni` @kind class @AccessFlag PUBLIC extends `com.konasl.security.service.des.a` @kind interface {
  `long` `com.konasl.security.service.des.DesCipherJni.context` @AccessFlag PRIVATE;
  `int` `com.konasl.security.service.des.DesCipherJni.option` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.konasl.security.service.des.DesCipherJni` v0 @kind this) @signature `Lcom/konasl/security/service/des/DesCipherJni;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15b53c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15b542.  return @kind void;
}
procedure `byte`[][] `decrypt`(`long` v0 , `byte`[] v2 @kind object, `byte`[] v3 @kind object, `int` v4 ) @signature `Lcom/konasl/security/service/des/DesCipherJni;.decrypt:(J[B[BI)[[B` @AccessFlag PRIVATE_STATIC_NATIVE {

  # return;
}
procedure `void` `destroy_context`(`long` v0 ) @signature `Lcom/konasl/security/service/des/DesCipherJni;.destroy_context:(J)V` @AccessFlag PRIVATE_STATIC_NATIVE {

  # return;
}
procedure `byte`[][] `encrypt`(`long` v0 , `byte`[] v2 @kind object, `byte`[] v3 @kind object, `int` v4 ) @signature `Lcom/konasl/security/service/des/DesCipherJni;.encrypt:(J[B[BI)[[B` @AccessFlag PRIVATE_STATIC_NATIVE {

  # return;
}
procedure `long` `init_context`(`byte`[] v0 @kind object, `int` v1 ) @signature `Lcom/konasl/security/service/des/DesCipherJni;.init_context:([BI)J` @AccessFlag PRIVATE_STATIC_NATIVE {

  # return;
}
procedure `byte`[] `decrypt`(`com.konasl.security.service.des.DesCipherJni` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/konasl/security/service/des/DesCipherJni;.decrypt:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15b43c.  v0:= 8I;
  #L15b440.  v0:= new `byte`[v0];
  #L15b444.  v1:= 0I;
  #L15b446.  call `fillArray`(v0, v1) @signature `Le/b/b/b/a;.fillArray:([BB)V` @kind static;
  #L15b44c.  call temp:= `decrypt`(v2, v3, v0) @signature `Lcom/konasl/security/service/des/DesCipherJni;.decrypt:([B[B)[B` @kind virtual;
  #L15b452.  v3:= temp @kind object;
  #L15b454.  return v3 @kind object;
}
procedure `byte`[] `decrypt`(`com.konasl.security.service.des.DesCipherJni` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/konasl/security/service/des/DesCipherJni;.decrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15b468.  v0:= v3.`com.konasl.security.service.des.DesCipherJni.context` @type ^`long` @kind wide;
  #L15b46c.  v2:= v3.`com.konasl.security.service.des.DesCipherJni.option` @type ^`int`;
  #L15b470.  call temp:= `decrypt`(v0, v4, v5, v2) @signature `Lcom/konasl/security/service/des/DesCipherJni;.decrypt:(J[B[BI)[[B` @kind static;
  #L15b476.  v4:= temp @kind object;
  #L15b478.  if v4 != 0 then goto L15b480;
  #L15b47c.  v5:= 0I;
  #L15b47e.  goto L15b486;
  #L15b480.  v5:= 0I;
  #L15b482.  v5:= v4[v5] @kind object;
  #L15b486.  call temp:= `extractStatusCode`(v5) @signature `Le/b/b/b/a;.extractStatusCode:([B)S` @kind static;
  #L15b48c.  v5:= temp;
  #L15b48e.  if v5 != 0 then goto L15b49a;
  #L15b492.  v5:= 1I;
  #L15b494.  v4:= v4[v5] @kind object;
  #L15b498.  return v4 @kind object;
  #L15b49a.  v4:= new `com.konasl.security.exception.KonaCipherException`;
  #L15b49e.  v5:= "DES Decryption Failed" @kind object;
  #L15b4a2.  call `<init>`(v4, v5) @signature `Lcom/konasl/security/exception/KonaCipherException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15b4a8.  throw v4;
}
procedure `void` `destroy`(`com.konasl.security.service.des.DesCipherJni` v5 @kind this) @signature `Lcom/konasl/security/service/des/DesCipherJni;.destroy:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15b554.  v0:= v5.`com.konasl.security.service.des.DesCipherJni.context` @type ^`long` @kind wide;
  #L15b558.  v2:= 0L;
  #L15b55c.  v4:= lcmp(v0, v2);
  #L15b560.  if v4 <= 0 then goto L15b56e;
  #L15b564.  call `destroy_context`(v0) @signature `Lcom/konasl/security/service/des/DesCipherJni;.destroy_context:(J)V` @kind static;
  #L15b56a.  v5.`com.konasl.security.service.des.DesCipherJni.context` @type ^`long` := v2 @kind wide;
  #L15b56e.  return @kind void;
}
procedure `byte`[] `encrypt`(`com.konasl.security.service.des.DesCipherJni` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/konasl/security/service/des/DesCipherJni;.encrypt:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15b4bc.  v0:= 8I;
  #L15b4c0.  v0:= new `byte`[v0];
  #L15b4c4.  v1:= 0I;
  #L15b4c6.  call `fillArray`(v0, v1) @signature `Le/b/b/b/a;.fillArray:([BB)V` @kind static;
  #L15b4cc.  call temp:= `encrypt`(v2, v3, v0) @signature `Lcom/konasl/security/service/des/DesCipherJni;.encrypt:([B[B)[B` @kind virtual;
  #L15b4d2.  v3:= temp @kind object;
  #L15b4d4.  return v3 @kind object;
}
procedure `byte`[] `encrypt`(`com.konasl.security.service.des.DesCipherJni` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/konasl/security/service/des/DesCipherJni;.encrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15b4e8.  v0:= v3.`com.konasl.security.service.des.DesCipherJni.context` @type ^`long` @kind wide;
  #L15b4ec.  v2:= v3.`com.konasl.security.service.des.DesCipherJni.option` @type ^`int`;
  #L15b4f0.  call temp:= `encrypt`(v0, v4, v5, v2) @signature `Lcom/konasl/security/service/des/DesCipherJni;.encrypt:(J[B[BI)[[B` @kind static;
  #L15b4f6.  v4:= temp @kind object;
  #L15b4f8.  if v4 != 0 then goto L15b500;
  #L15b4fc.  v5:= 0I;
  #L15b4fe.  goto L15b506;
  #L15b500.  v5:= 0I;
  #L15b502.  v5:= v4[v5] @kind object;
  #L15b506.  call temp:= `extractStatusCode`(v5) @signature `Le/b/b/b/a;.extractStatusCode:([B)S` @kind static;
  #L15b50c.  v5:= temp;
  #L15b50e.  if v5 != 0 then goto L15b51a;
  #L15b512.  v5:= 1I;
  #L15b514.  v4:= v4[v5] @kind object;
  #L15b518.  return v4 @kind object;
  #L15b51a.  v4:= new `com.konasl.security.exception.KonaCipherException`;
  #L15b51e.  v5:= "DES Encryption Failed" @kind object;
  #L15b522.  call `<init>`(v4, v5) @signature `Lcom/konasl/security/exception/KonaCipherException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15b528.  throw v4;
}
procedure `void` `init`(`com.konasl.security.service.des.DesCipherJni` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lcom/konasl/security/service/des/DesCipherJni;.init:([BI)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15b580.  v0:= v4 ^& 240;
  #L15b584.  if v0 == 0 then goto L15b5aa;
  #L15b588.  v1:= 16I;
  #L15b58c.  if v0 == v1 then goto L15b5ae;
  #L15b590.  v1:= 32I;
  #L15b594.  if v0 != v1 then goto L15b59a;
  #L15b598.  goto L15b5ae;
  #L15b59a.  v3:= new `com.konasl.security.exception.KonaCipherException`;
  #L15b59e.  v4:= "Unsupported Block Operation Mode" @kind object;
  #L15b5a2.  call `<init>`(v3, v4) @signature `Lcom/konasl/security/exception/KonaCipherException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15b5a8.  throw v3;
  #L15b5aa.  v4:= v4 ^| 16;
  #L15b5ae.  v0:= v4 ^& 3840;
  #L15b5b2.  if v0 == 0 then goto L15b5d8;
  #L15b5b6.  v1:= 256I;
  #L15b5ba.  if v0 == v1 then goto L15b5dc;
  #L15b5be.  v1:= 512I;
  #L15b5c2.  if v0 != v1 then goto L15b5c8;
  #L15b5c6.  goto L15b5dc;
  #L15b5c8.  v3:= new `com.konasl.security.exception.KonaCipherException`;
  #L15b5cc.  v4:= "Unsupported Padding Type Operation Mode" @kind object;
  #L15b5d0.  call `<init>`(v3, v4) @signature `Lcom/konasl/security/exception/KonaCipherException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15b5d6.  throw v3;
  #L15b5d8.  v4:= v4 ^| 512;
  #L15b5dc.  call temp:= `init_context`(v3, v4) @signature `Lcom/konasl/security/service/des/DesCipherJni;.init_context:([BI)J` @kind static;
  #L15b5e2.  v0:= temp @kind wide;
  #L15b5e4.  v2.`com.konasl.security.service.des.DesCipherJni.context` @type ^`long` := v0 @kind wide;
  #L15b5e8.  v2.`com.konasl.security.service.des.DesCipherJni.option` @type ^`int` := v4;
  #L15b5ec.  return @kind void;
}
