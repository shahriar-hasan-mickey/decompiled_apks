record `com.konasl.security.service.seed.KisaSeedCipherJni` @kind class @AccessFlag PUBLIC extends `com.konasl.security.service.seed.a` @kind interface {
  `long` `com.konasl.security.service.seed.KisaSeedCipherJni.context` @AccessFlag PRIVATE;
  `int` `com.konasl.security.service.seed.KisaSeedCipherJni.option` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.konasl.security.service.seed.KisaSeedCipherJni` v0 @kind this) @signature `Lcom/konasl/security/service/seed/KisaSeedCipherJni;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15c00c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15c012.  return @kind void;
}
procedure `byte`[][] `decrypt`(`long` v0 , `byte`[] v2 @kind object, `byte`[] v3 @kind object, `int` v4 ) @signature `Lcom/konasl/security/service/seed/KisaSeedCipherJni;.decrypt:(J[B[BI)[[B` @AccessFlag PRIVATE_STATIC_NATIVE {

  # return;
}
procedure `void` `destroy_context`(`long` v0 ) @signature `Lcom/konasl/security/service/seed/KisaSeedCipherJni;.destroy_context:(J)V` @AccessFlag PRIVATE_STATIC_NATIVE {

  # return;
}
procedure `byte`[][] `encrypt`(`long` v0 , `byte`[] v2 @kind object, `byte`[] v3 @kind object, `int` v4 ) @signature `Lcom/konasl/security/service/seed/KisaSeedCipherJni;.encrypt:(J[B[BI)[[B` @AccessFlag PRIVATE_STATIC_NATIVE {

  # return;
}
procedure `long` `init_context`(`byte`[] v0 @kind object, `int` v1 ) @signature `Lcom/konasl/security/service/seed/KisaSeedCipherJni;.init_context:([BI)J` @AccessFlag PRIVATE_STATIC_NATIVE {

  # return;
}
procedure `byte`[] `decrypt`(`com.konasl.security.service.seed.KisaSeedCipherJni` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/konasl/security/service/seed/KisaSeedCipherJni;.decrypt:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15bef4.  v0:= 16I;
  #L15bef8.  v0:= new `byte`[v0];
  #L15befc.  v1:= 0I;
  #L15befe.  call `fillArray`(v0, v1) @signature `Le/b/b/b/a;.fillArray:([BB)V` @kind static;
  #L15bf04.  call temp:= `decrypt`(v2, v3, v0) @signature `Lcom/konasl/security/service/seed/KisaSeedCipherJni;.decrypt:([B[B)[B` @kind virtual;
  #L15bf0a.  v3:= temp @kind object;
  #L15bf0c.  return v3 @kind object;
}
procedure `byte`[] `decrypt`(`com.konasl.security.service.seed.KisaSeedCipherJni` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/konasl/security/service/seed/KisaSeedCipherJni;.decrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15bf20.  if v4 == 0 then goto L15bf6e;
  #L15bf24.  v0:= length @variable v4;
  #L15bf26.  if v0 != 0 then goto L15bf2c;
  #L15bf2a.  goto L15bf6e;
  #L15bf2c.  v0:= v3.`com.konasl.security.service.seed.KisaSeedCipherJni.context` @type ^`long` @kind wide;
  #L15bf30.  v2:= v3.`com.konasl.security.service.seed.KisaSeedCipherJni.option` @type ^`int`;
  #L15bf34.  call temp:= `decrypt`(v0, v4, v5, v2) @signature `Lcom/konasl/security/service/seed/KisaSeedCipherJni;.decrypt:(J[B[BI)[[B` @kind static;
  #L15bf3a.  v4:= temp @kind object;
  #L15bf3c.  if v4 != 0 then goto L15bf44;
  #L15bf40.  v5:= 0I;
  #L15bf42.  goto L15bf4a;
  #L15bf44.  v5:= 0I;
  #L15bf46.  v5:= v4[v5] @kind object;
  #L15bf4a.  call temp:= `extractStatusCode`(v5) @signature `Le/b/b/b/a;.extractStatusCode:([B)S` @kind static;
  #L15bf50.  v5:= temp;
  #L15bf52.  if v5 != 0 then goto L15bf5e;
  #L15bf56.  v5:= 1I;
  #L15bf58.  v4:= v4[v5] @kind object;
  #L15bf5c.  return v4 @kind object;
  #L15bf5e.  v4:= new `com.konasl.security.exception.KonaCipherException`;
  #L15bf62.  v5:= "Kisa Decryption Failed" @kind object;
  #L15bf66.  call `<init>`(v4, v5) @signature `Lcom/konasl/security/exception/KonaCipherException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15bf6c.  throw v4;
  #L15bf6e.  return v4 @kind object;
}
procedure `void` `destroy`(`com.konasl.security.service.seed.KisaSeedCipherJni` v5 @kind this) @signature `Lcom/konasl/security/service/seed/KisaSeedCipherJni;.destroy:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15c024.  v0:= v5.`com.konasl.security.service.seed.KisaSeedCipherJni.context` @type ^`long` @kind wide;
  #L15c028.  v2:= 0L;
  #L15c02c.  v4:= lcmp(v0, v2);
  #L15c030.  if v4 <= 0 then goto L15c03e;
  #L15c034.  call `destroy_context`(v0) @signature `Lcom/konasl/security/service/seed/KisaSeedCipherJni;.destroy_context:(J)V` @kind static;
  #L15c03a.  v5.`com.konasl.security.service.seed.KisaSeedCipherJni.context` @type ^`long` := v2 @kind wide;
  #L15c03e.  return @kind void;
}
procedure `byte`[] `encrypt`(`com.konasl.security.service.seed.KisaSeedCipherJni` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/konasl/security/service/seed/KisaSeedCipherJni;.encrypt:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15bf80.  v0:= 16I;
  #L15bf84.  v0:= new `byte`[v0];
  #L15bf88.  v1:= 0I;
  #L15bf8a.  call `fillArray`(v0, v1) @signature `Le/b/b/b/a;.fillArray:([BB)V` @kind static;
  #L15bf90.  call temp:= `encrypt`(v2, v3, v0) @signature `Lcom/konasl/security/service/seed/KisaSeedCipherJni;.encrypt:([B[B)[B` @kind virtual;
  #L15bf96.  v3:= temp @kind object;
  #L15bf98.  return v3 @kind object;
}
procedure `byte`[] `encrypt`(`com.konasl.security.service.seed.KisaSeedCipherJni` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/konasl/security/service/seed/KisaSeedCipherJni;.encrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15bfac.  if v4 == 0 then goto L15bffa;
  #L15bfb0.  v0:= length @variable v4;
  #L15bfb2.  if v0 != 0 then goto L15bfb8;
  #L15bfb6.  goto L15bffa;
  #L15bfb8.  v0:= v3.`com.konasl.security.service.seed.KisaSeedCipherJni.context` @type ^`long` @kind wide;
  #L15bfbc.  v2:= v3.`com.konasl.security.service.seed.KisaSeedCipherJni.option` @type ^`int`;
  #L15bfc0.  call temp:= `encrypt`(v0, v4, v5, v2) @signature `Lcom/konasl/security/service/seed/KisaSeedCipherJni;.encrypt:(J[B[BI)[[B` @kind static;
  #L15bfc6.  v4:= temp @kind object;
  #L15bfc8.  if v4 != 0 then goto L15bfd0;
  #L15bfcc.  v5:= 0I;
  #L15bfce.  goto L15bfd6;
  #L15bfd0.  v5:= 0I;
  #L15bfd2.  v5:= v4[v5] @kind object;
  #L15bfd6.  call temp:= `extractStatusCode`(v5) @signature `Le/b/b/b/a;.extractStatusCode:([B)S` @kind static;
  #L15bfdc.  v5:= temp;
  #L15bfde.  if v5 != 0 then goto L15bfea;
  #L15bfe2.  v5:= 1I;
  #L15bfe4.  v4:= v4[v5] @kind object;
  #L15bfe8.  return v4 @kind object;
  #L15bfea.  v4:= new `com.konasl.security.exception.KonaCipherException`;
  #L15bfee.  v5:= "Kisa Encryption Failed" @kind object;
  #L15bff2.  call `<init>`(v4, v5) @signature `Lcom/konasl/security/exception/KonaCipherException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15bff8.  throw v4;
  #L15bffa.  return v4 @kind object;
}
procedure `void` `init`(`com.konasl.security.service.seed.KisaSeedCipherJni` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lcom/konasl/security/service/seed/KisaSeedCipherJni;.init:([BI)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15c050.  v0:= v4 ^& 240;
  #L15c054.  if v0 == 0 then goto L15c07a;
  #L15c058.  v1:= 16I;
  #L15c05c.  if v0 == v1 then goto L15c07e;
  #L15c060.  v1:= 32I;
  #L15c064.  if v0 != v1 then goto L15c06a;
  #L15c068.  goto L15c07e;
  #L15c06a.  v3:= new `com.konasl.security.exception.KonaCipherException`;
  #L15c06e.  v4:= "Unsupported Block Operation Mode" @kind object;
  #L15c072.  call `<init>`(v3, v4) @signature `Lcom/konasl/security/exception/KonaCipherException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15c078.  throw v3;
  #L15c07a.  v4:= v4 ^| 16;
  #L15c07e.  v0:= v4 ^& 3840;
  #L15c082.  if v0 == 0 then goto L15c0a8;
  #L15c086.  v1:= 256I;
  #L15c08a.  if v0 == v1 then goto L15c0ac;
  #L15c08e.  v1:= 512I;
  #L15c092.  if v0 != v1 then goto L15c098;
  #L15c096.  goto L15c0ac;
  #L15c098.  v3:= new `com.konasl.security.exception.KonaCipherException`;
  #L15c09c.  v4:= "Unsupported Padding Type Operation Mode" @kind object;
  #L15c0a0.  call `<init>`(v3, v4) @signature `Lcom/konasl/security/exception/KonaCipherException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15c0a6.  throw v3;
  #L15c0a8.  v4:= v4 ^| 512;
  #L15c0ac.  call temp:= `init_context`(v3, v4) @signature `Lcom/konasl/security/service/seed/KisaSeedCipherJni;.init_context:([BI)J` @kind static;
  #L15c0b2.  v0:= temp @kind wide;
  #L15c0b4.  v2.`com.konasl.security.service.seed.KisaSeedCipherJni.context` @type ^`long` := v0 @kind wide;
  #L15c0b8.  v2.`com.konasl.security.service.seed.KisaSeedCipherJni.option` @type ^`int` := v4;
  #L15c0bc.  return @kind void;
}
