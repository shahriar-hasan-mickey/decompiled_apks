record `com.konasl.sdk.storage.lde.a.e` @kind class @AccessFlag PUBLIC {
  `int`[] `com.konasl.sdk.storage.lde.a.e.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.konasl.sdk.storage.lde.a.e` v6 @kind this, `byte`[] v7 @kind object) @signature `Lcom/konasl/sdk/storage/lde/a/e;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L157b10.  call `<init>`(v6) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L157b16.  v0:= 16I;
  #L157b1a.  v1:= new `int`[v0];
  #L157b1e.  v6.`com.konasl.sdk.storage.lde.a.e.a` @type ^`int`[] := v1 @kind object;
  #L157b22.  call temp:= `toHexString`(v7) @signature `Lcom/konasl/sdk/storage/lde/c/b;.toHexString:([B)Ljava/lang/String;` @kind static;
  #L157b28.  v7:= temp @kind object;
  #L157b2a.  call temp:= `toCharArray`(v7) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L157b30.  v7:= temp @kind object;
  #L157b32.  v1:= length @variable v7;
  #L157b34.  v1:= v1 %% v0 @kind int;
  #L157b36.  if v1 != 0 then goto L157b84;
  #L157b3a.  v1:= 0I;
  #L157b3c.  if v1 >= v0 then goto L157b82;
  #L157b40.  v2:= v6.`com.konasl.sdk.storage.lde.a.e.a` @type ^`int`[] @kind object;
  #L157b44.  v3:= v7[v1] @kind char;
  #L157b48.  v3:= v3 ^& 255;
  #L157b4c.  v2[v1]:= v3;
  #L157b50.  v2:= v1 + 16;
  #L157b54.  v3:= length @variable v7;
  #L157b56.  if v2 >= v3 then goto L157b7c;
  #L157b5a.  v3:= v6.`com.konasl.sdk.storage.lde.a.e.a` @type ^`int`[] @kind object;
  #L157b5e.  v4:= v3[v1];
  #L157b62.  v5:= v7[v2] @kind char;
  #L157b66.  v5:= v5 ^& 255;
  #L157b6a.  call temp:= `gmul`(v4, v5) @signature `Lcom/konasl/sdk/storage/lde/c/a;.gmul:(II)I` @kind static;
  #L157b70.  v4:= temp;
  #L157b72.  v3[v1]:= v4;
  #L157b76.  v2:= v2 + 16;
  #L157b7a.  goto L157b54;
  #L157b7c.  v1:= v1 + 1;
  #L157b80.  goto L157b3c;
  #L157b82.  return @kind void;
  #L157b84.  v7:= new `java.lang.IllegalArgumentException`;
  #L157b88.  v0:= "Unsigned Nonzero Diversifier array must be multiple of 16" @kind object;
  #L157b8c.  call `<init>`(v7, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L157b92.  throw v7;
}
procedure `void` `decode`(`com.konasl.sdk.storage.lde.a.e` v5 @kind this, `int`[] v6 @kind object) @signature `Lcom/konasl/sdk/storage/lde/a/e;.decode:([I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L157ba4.  v0:= 0I;
  #L157ba6.  v1:= 0I;
  #L157ba8.  v2:= length @variable v6;
  #L157baa.  if v0 >= v2 then goto L157bdc;
  #L157bae.  v2:= v6[v0];
  #L157bb2.  v3:= v5.`com.konasl.sdk.storage.lde.a.e.a` @type ^`int`[] @kind object;
  #L157bb6.  v4:= v1 ^& 15;
  #L157bba.  v3:= v3[v4];
  #L157bbe.  call temp:= `inverseGF2mField`(v3) @signature `Lcom/konasl/sdk/storage/lde/c/a;.inverseGF2mField:(I)I` @kind static;
  #L157bc4.  v3:= temp;
  #L157bc6.  call temp:= `gmul`(v2, v3) @signature `Lcom/konasl/sdk/storage/lde/c/a;.gmul:(II)I` @kind static;
  #L157bcc.  v2:= temp;
  #L157bce.  v6[v0]:= v2;
  #L157bd2.  v0:= v0 + 1;
  #L157bd6.  v1:= v1 + 1;
  #L157bda.  goto L157ba8;
  #L157bdc.  return @kind void;
}
procedure `void` `encode`(`com.konasl.sdk.storage.lde.a.e` v5 @kind this, `int`[] v6 @kind object) @signature `Lcom/konasl/sdk/storage/lde/a/e;.encode:([I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L157bf0.  v0:= 0I;
  #L157bf2.  v1:= 0I;
  #L157bf4.  v2:= length @variable v6;
  #L157bf6.  if v0 >= v2 then goto L157c20;
  #L157bfa.  v2:= v6[v0];
  #L157bfe.  v3:= v5.`com.konasl.sdk.storage.lde.a.e.a` @type ^`int`[] @kind object;
  #L157c02.  v4:= v1 ^& 15;
  #L157c06.  v3:= v3[v4];
  #L157c0a.  call temp:= `gmul`(v2, v3) @signature `Lcom/konasl/sdk/storage/lde/c/a;.gmul:(II)I` @kind static;
  #L157c10.  v2:= temp;
  #L157c12.  v6[v0]:= v2;
  #L157c16.  v0:= v0 + 1;
  #L157c1a.  v1:= v1 + 1;
  #L157c1e.  goto L157bf4;
  #L157c20.  return @kind void;
}
