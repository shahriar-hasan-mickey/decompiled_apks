record `com.konasl.sdk.storage.lde.c.b` @kind class @AccessFlag PUBLIC {
}
procedure `byte` `a`(`char` v1 , `char` v2 ) @signature `Lcom/konasl/sdk/storage/lde/c/b;.a:(CC)B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L157f00.  v0:= 16I;
  #L157f04.  call temp:= `digit`(v1, v0) @signature `Ljava/lang/Character;.digit:(CI)I` @kind static;
  #L157f0a.  v1:= temp;
  #L157f0c.  v1:= v1 ^< 4;
  #L157f10.  call temp:= `digit`(v2, v0) @signature `Ljava/lang/Character;.digit:(CI)I` @kind static;
  #L157f16.  v2:= temp;
  #L157f18.  v1:= v1 + v2 @kind int;
  #L157f1a.  v1:= (`byte`) v1 @kind i2b;
  #L157f1c.  return v1;
}
procedure `int` `a`(`int` v1 , `int` v2 ) @signature `Lcom/konasl/sdk/storage/lde/c/b;.a:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L158024.  v0:= 1I;
  #L158026.  v1:= v1 + v0 @kind int;
  #L158028.  v1:= v1 %% v2 @kind int;
  #L15802a.  if v1 == 0 then goto L158032;
  #L15802e.  v2:= v2 - v1 @kind int;
  #L158030.  v0:= v0 + v2 @kind int;
  #L158032.  return v0;
}
procedure `byte`[] `addPkcs5Padding`(`byte`[] v3 @kind object, `int` v4 ) @signature `Lcom/konasl/sdk/storage/lde/c/b;.addPkcs5Padding:([BI)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L157f30.  v0:= length @variable v3;
  #L157f32.  call temp:= `a`(v0, v4) @signature `Lcom/konasl/sdk/storage/lde/c/b;.a:(II)I` @kind static;
  #L157f38.  v4:= temp;
  #L157f3a.  v1:= v0 + v4 @kind int;
  #L157f3e.  v2:= new `byte`[v1];
  #L157f42.  call `copy`(v3, v2) @signature `Lcom/konasl/sdk/storage/lde/c/b;.copy:([B[B)V` @kind static;
  #L157f48.  if v0 >= v1 then goto L157f58;
  #L157f4c.  v3:= (`byte`) v4 @kind i2b;
  #L157f4e.  v2[v0]:= v3 @kind byte;
  #L157f52.  v0:= v0 + 1;
  #L157f56.  goto L157f48;
  #L157f58.  return v2 @kind object;
}
procedure `void` `copy`(`byte`[] v2 @kind object, `byte`[] v3 @kind object) @signature `Lcom/konasl/sdk/storage/lde/c/b;.copy:([B[B)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1580c8.  v0:= 0I;
  #L1580ca.  v1:= length @variable v2;
  #L1580cc.  if v0 >= v1 then goto L1580de;
  #L1580d0.  v1:= v2[v0] @kind byte;
  #L1580d4.  v3[v0]:= v1 @kind byte;
  #L1580d8.  v0:= v0 + 1;
  #L1580dc.  goto L1580ca;
  #L1580de.  return @kind void;
}
procedure `byte`[] `removePkcs5Padding`(`byte`[] v6 @kind object) @signature `Lcom/konasl/sdk/storage/lde/c/b;.removePkcs5Padding:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L157f6c.  v0:= length @variable v6;
  #L157f6e.  v1:= length @variable v6;
  #L157f70.  v1:= v1 + -1;
  #L157f74.  v1:= v6[v1] @kind byte;
  #L157f78.  v2:= v1 ^& 255;
  #L157f7c.  v3:= v0 - v2 @kind int;
  #L157f80.  v4:= 0I;
  #L157f82.  if v2 <= v0 then goto L157f88;
  #L157f86.  return v4 @kind object;
  #L157f88.  v2:= v3;
  #L157f8a.  if v2 >= v0 then goto L157f9e;
  #L157f8e.  v5:= v6[v2] @kind byte;
  #L157f92.  if v5 == v1 then goto L157f98;
  #L157f96.  return v4 @kind object;
  #L157f98.  v2:= v2 + 1;
  #L157f9c.  goto L157f8a;
  #L157f9e.  v0:= new `byte`[v3];
  #L157fa2.  v1:= 0I;
  #L157fa4.  if v1 >= v3 then goto L157fb6;
  #L157fa8.  v2:= v6[v1] @kind byte;
  #L157fac.  v0[v1]:= v2 @kind byte;
  #L157fb0.  v1:= v1 + 1;
  #L157fb4.  goto L157fa4;
  #L157fb6.  return v0 @kind object;
}
procedure `void` `shrinkAndCopy`(`int`[] v3 @kind object, `int` v4 , `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lcom/konasl/sdk/storage/lde/c/b;.shrinkAndCopy:([II[BII)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1580f0.  v0:= 0I;
  #L1580f2.  if v0 >= v7 then goto L15810e;
  #L1580f6.  v1:= v6 + v0 @kind int;
  #L1580fa.  v2:= v4 + v0 @kind int;
  #L1580fe.  v2:= v3[v2];
  #L158102.  v2:= (`byte`) v2 @kind i2b;
  #L158104.  v5[v1]:= v2 @kind byte;
  #L158108.  v0:= v0 + 1;
  #L15810c.  goto L1580f2;
  #L15810e.  return @kind void;
}
procedure `void` `spanAndCopy`(`byte`[] v3 @kind object, `int` v4 , `int`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lcom/konasl/sdk/storage/lde/c/b;.spanAndCopy:([BI[III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L158120.  v0:= 0I;
  #L158122.  if v0 >= v7 then goto L158140;
  #L158126.  v1:= v6 + v0 @kind int;
  #L15812a.  v2:= v4 + v0 @kind int;
  #L15812e.  v2:= v3[v2] @kind byte;
  #L158132.  v2:= v2 ^& 255;
  #L158136.  v5[v1]:= v2;
  #L15813a.  v0:= v0 + 1;
  #L15813e.  goto L158122;
  #L158140.  return @kind void;
}
procedure `byte`[] `toByteArray`(`java.lang.String` v5 @kind object) @signature `Lcom/konasl/sdk/storage/lde/c/b;.toByteArray:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L157fc8.  if v5 != 0 then goto L157fd0;
  #L157fcc.  v5:= 0I;
  #L157fce.  return v5 @kind object;
  #L157fd0.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L157fd6.  v0:= temp;
  #L157fd8.  v0:= v0 / 2;
  #L157fdc.  v1:= new `byte`[v0];
  #L157fe0.  v2:= 0I;
  #L157fe2.  if v2 >= v0 then goto L158010;
  #L157fe6.  v3:= v2 * 2;
  #L157fea.  call temp:= `charAt`(v5, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L157ff0.  v4:= temp;
  #L157ff2.  v3:= v3 + 1;
  #L157ff6.  call temp:= `charAt`(v5, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L157ffc.  v3:= temp;
  #L157ffe.  call temp:= `a`(v4, v3) @signature `Lcom/konasl/sdk/storage/lde/c/b;.a:(CC)B` @kind static;
  #L158004.  v3:= temp;
  #L158006.  v1[v2]:= v3 @kind byte;
  #L15800a.  v2:= v2 + 1;
  #L15800e.  goto L157fe2;
  #L158010.  return v1 @kind object;
}
procedure `java.lang.String` `toHexString`(`byte`[] v7 @kind object) @signature `Lcom/konasl/sdk/storage/lde/c/b;.toHexString:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L158044.  v0:= new `java.lang.StringBuffer`;
  #L158048.  call `<init>`(v0) @signature `Ljava/lang/StringBuffer;.<init>:()V` @kind direct;
  #L15804e.  v1:= 0I;
  #L158050.  v2:= 0I;
  #L158052.  v3:= length @variable v7;
  #L158054.  if v2 >= v3 then goto L1580ac;
  #L158058.  v3:= v7[v2] @kind byte;
  #L15805c.  v3:= v3 ^>> 4;
  #L158060.  v3:= v3 ^& 15;
  #L158064.  v4:= 0I;
  #L158066.  if v3 < 0 then goto L158080;
  #L15806a.  v5:= 9I;
  #L15806e.  if v3 > v5 then goto L158080;
  #L158072.  v3:= v3 + 48;
  #L158076.  v3:= (`char`) v3 @kind i2c;
  #L158078.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L15807e.  goto L158090;
  #L158080.  v3:= v3 + -10;
  #L158084.  v3:= v3 + 65;
  #L158088.  v3:= (`char`) v3 @kind i2c;
  #L15808a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L158090.  v3:= v7[v2] @kind byte;
  #L158094.  v3:= v3 ^& 15;
  #L158098.  v5:= v4 + 1;
  #L15809c.  v6:= 1I;
  #L15809e.  if v4 < v6 then goto L1580a8;
  #L1580a2.  v2:= v2 + 1;
  #L1580a6.  goto L158052;
  #L1580a8.  v4:= v5;
  #L1580aa.  goto L158066;
  #L1580ac.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L1580b2.  v7:= temp @kind object;
  #L1580b4.  return v7 @kind object;
}
