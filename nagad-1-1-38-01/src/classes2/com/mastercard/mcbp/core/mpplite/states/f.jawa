record `com.mastercard.mcbp.core.mpplite.states.f` @kind class @AccessFlag PUBLIC {
}
procedure `void` `processAddCheckTable`(`e.c.a.a.c` v11 @kind object, `e.c.a.a.c` v12 @kind object, `e.c.a.a.c` v13 @kind object) @signature `Lcom/mastercard/mcbp/core/mpplite/states/f;.processAddCheckTable:(Le/c/a/a/c;Le/c/a/a/c;Le/c/a/a/c;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L165194.  v0:= 0I;
  #L165196.  call temp:= `getByte`(v12, v0) @signature `Le/c/a/a/c;.getByte:(I)B` @kind interface;
  #L16519c.  v1:= temp;
  #L16519e.  v2:= 1I;
  #L1651a0.  call temp:= `getByte`(v12, v2) @signature `Le/c/a/a/c;.getByte:(I)B` @kind interface;
  #L1651a6.  v3:= temp;
  #L1651a8.  v4:= 2I;
  #L1651aa.  call temp:= `getByte`(v12, v4) @signature `Le/c/a/a/c;.getByte:(I)B` @kind interface;
  #L1651b0.  v5:= temp;
  #L1651b2.  v6:= 4I;
  #L1651b4.  if v1 == v6 then goto L165270;
  #L1651b8.  v6:= v1 + v3 @kind int;
  #L1651bc.  v7:= 5I;
  #L1651be.  v6:= v6 - v7 @kind int;
  #L1651c0.  call temp:= `getLength`(v11) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L1651c6.  v8:= temp;
  #L1651c8.  if v6 > v8 then goto L165270;
  #L1651cc.  if v5 <= v2 then goto L165270;
  #L1651d0.  if v3 <= 0 then goto L165270;
  #L1651d4.  v6:= v5 * v3 @kind int;
  #L1651d8.  v8:= 15I;
  #L1651dc.  if v6 > v8 then goto L165270;
  #L1651e0.  call temp:= `getInstance`() @signature `Le/c/a/a/d;.getInstance:()Le/c/a/a/d;` @kind static;
  #L1651e6.  v6:= temp @kind object;
  #L1651e8.  call temp:= `getByteArray`(v6, v3) @signature `Le/c/a/a/d;.getByteArray:(I)Le/c/a/a/c;` @kind virtual;
  #L1651ee.  v6:= temp @kind object;
  #L1651f0.  v8:= 0I;
  #L1651f2.  if v8 >= v3 then goto L16521e;
  #L1651f6.  v9:= v8 + 3;
  #L1651fa.  call temp:= `getByte`(v12, v9) @signature `Le/c/a/a/c;.getByte:(I)B` @kind interface;
  #L165200.  v9:= temp;
  #L165202.  v10:= v1 + v8 @kind int;
  #L165206.  call temp:= `getByte`(v11, v10) @signature `Le/c/a/a/c;.getByte:(I)B` @kind interface;
  #L16520c.  v10:= temp;
  #L16520e.  v9:= v9 ^& v10 @kind int;
  #L165210.  v9:= (`byte`) v9 @kind i2b;
  #L165212.  call `setByte`(v6, v8, v9) @signature `Le/c/a/a/c;.setByte:(IB)V` @kind interface;
  #L165218.  v8:= v8 + 1;
  #L16521c.  goto L1651f2;
  #L16521e.  v11:= 1I;
  #L165220.  if v11 >= v5 then goto L16524e;
  #L165224.  v1:= v11 * v3 @kind int;
  #L165228.  v1:= v1 + 3;
  #L16522c.  v11:= v11 + 1;
  #L165230.  v8:= v11 * v3 @kind int;
  #L165234.  v8:= v8 + 3;
  #L165238.  call temp:= `copyOfRange`(v12, v1, v8) @signature `Le/c/a/a/c;.copyOfRange:(II)Le/c/a/a/c;` @kind interface;
  #L16523e.  v1:= temp @kind object;
  #L165240.  call temp:= `isEqual`(v6, v1) @signature `Le/c/a/a/c;.isEqual:(Le/c/a/a/c;)Z` @kind interface;
  #L165246.  v1:= temp;
  #L165248.  if v1 == 0 then goto L165220;
  #L16524c.  v0:= 1I;
  #L16524e.  call temp:= `getByte`(v13, v7) @signature `Le/c/a/a/c;.getByte:(I)B` @kind interface;
  #L165254.  v11:= temp;
  #L165256.  if v0 == 0 then goto L165266;
  #L16525a.  v11:= v11 ^| v4 @kind int;
  #L16525c.  v11:= (`byte`) v11 @kind i2b;
  #L16525e.  call `setByte`(v13, v7, v11) @signature `Le/c/a/a/c;.setByte:(IB)V` @kind interface;
  #L165264.  goto L165270;
  #L165266.  v11:= v11 ^| v2 @kind int;
  #L165268.  v11:= (`byte`) v11 @kind i2b;
  #L16526a.  call `setByte`(v13, v7, v11) @signature `Le/c/a/a/c;.setByte:(IB)V` @kind interface;
  #L165270.  return @kind void;
}
