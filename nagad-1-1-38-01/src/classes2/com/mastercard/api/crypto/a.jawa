record `com.mastercard.api.crypto.a` @kind class @AccessFlag PUBLIC extends `com.mastercard.api.crypto.b` @kind class {
}
global `javax.crypto.Cipher` `@@com.mastercard.api.crypto.a.b` @AccessFlag PRIVATE_STATIC;
procedure `void` `<init>`(`com.mastercard.api.crypto.a` v0 @kind this) @signature `Lcom/mastercard/api/crypto/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15d91c.  call `<init>`(v0) @signature `Lcom/mastercard/api/crypto/b;.<init>:()V` @kind direct;
  #L15d922.  return @kind void;
}
procedure `void` `a`(`com.mastercard.api.crypto.a` v2 @kind this, `java.security.interfaces.RSAPrivateKey` v3 @kind object) @signature `Lcom/mastercard/api/crypto/a;.a:(Ljava/security/interfaces/RSAPrivateKey;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L15d934.  v0:= "RSA" @kind object;
  #L15d938.  call temp:= `getInstance`(v0) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L15d93e.  v0:= temp @kind object;
  #L15d940.  `@@com.mastercard.api.crypto.a.b` @type ^`javax.crypto.Cipher` := v0 @kind object;
  #L15d944.  v0:= `@@com.mastercard.api.crypto.a.b` @type ^`javax.crypto.Cipher` @kind object;
  #L15d948.  v1:= 1I;
  #L15d94a.  call `init`(v0, v1, v3) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L15d950.  return @kind void;
  #L15d952.  v3:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L15d954.  call `printStackTrace`(v3) @signature `Le/c/a/d/d/a;.printStackTrace:(Ljava/lang/Throwable;)V` @kind static;
  #L15d95a.  v3:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d95e.  call `<init>`(v3) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:()V` @kind direct;
  #L15d964.  throw v3;
  #L15d966.  v3:= Exception @type ^`javax.crypto.NoSuchPaddingException` @kind object;
  #L15d968.  call `printStackTrace`(v3) @signature `Le/c/a/d/d/a;.printStackTrace:(Ljava/lang/Throwable;)V` @kind static;
  #L15d96e.  v3:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d972.  call `<init>`(v3) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:()V` @kind direct;
  #L15d978.  throw v3;
  #L15d97a.  v3:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L15d97c.  call `printStackTrace`(v3) @signature `Le/c/a/d/d/a;.printStackTrace:(Ljava/lang/Throwable;)V` @kind static;
  #L15d982.  v3:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d986.  call `<init>`(v3) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:()V` @kind direct;
  #L15d98c.  throw v3;
  catch `java.security.NoSuchAlgorithmException` @[L15d934..L15d950] goto L15d97a;
  catch `javax.crypto.NoSuchPaddingException` @[L15d934..L15d950] goto L15d966;
  catch `java.security.InvalidKeyException` @[L15d934..L15d950] goto L15d952;
}
procedure `byte`[] `a`(`byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lcom/mastercard/api/crypto/a;.a:([BI[BII)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15ce24.  v0:= new `byte`[v8];
  #L15ce28.  v1:= 0I;
  #L15ce2a.  if v1 >= v8 then goto L15ce4c;
  #L15ce2e.  v2:= v1 + v5 @kind int;
  #L15ce32.  v2:= v4[v2] @kind byte;
  #L15ce36.  v3:= v1 + v7 @kind int;
  #L15ce3a.  v3:= v6[v3] @kind byte;
  #L15ce3e.  v2:= v2 ^~ v3 @kind int;
  #L15ce40.  v2:= (`byte`) v2 @kind i2b;
  #L15ce42.  v0[v1]:= v2 @kind byte;
  #L15ce46.  v1:= v1 + 1;
  #L15ce4a.  goto L15ce2a;
  #L15ce4c.  return v0 @kind object;
}
procedure `e.c.a.a.c` `AES`(`com.mastercard.api.crypto.a` v3 @kind this, `e.c.a.a.c` v4 @kind object, `e.c.a.a.c` v5 @kind object, `boolean` v6 ) @signature `Lcom/mastercard/api/crypto/a;.AES:(Le/c/a/a/c;Le/c/a/a/c;Z)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15ce60.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L15ce64.  call temp:= `getBytes`(v5) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15ce6a.  v1:= temp @kind object;
  #L15ce6c.  v2:= "AES" @kind object;
  #L15ce70.  call `<init>`(v0, v1, v2) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L15ce76.  v1:= "AES/ECB/NoPadding" @kind object;
  #L15ce7a.  call temp:= `getInstance`(v1) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L15ce80.  v1:= temp @kind object;
  #L15ce82.  if v6 == 0 then goto L15ce90;
  #L15ce86.  v6:= 1I;
  #L15ce88.  call `init`(v1, v6, v0) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L15ce8e.  goto L15ce98;
  #L15ce90.  v6:= 2I;
  #L15ce92.  call `init`(v1, v6, v0) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L15ce98.  call temp:= `getBytes`(v4) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15ce9e.  v4:= temp @kind object;
  #L15cea0.  call temp:= `doFinal`(v1, v4) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L15cea6.  v4:= temp @kind object;
  #L15cea8.  v6:= new `e.c.a.a.e`;
  #L15ceac.  call `<init>`(v6, v4) @signature `Le/c/a/a/e;.<init>:([B)V` @kind direct;
  #L15ceb2.  call `clearByteArray`(v5) @signature `Le/c/a/d/b;.clearByteArray:(Le/c/a/a/c;)V` @kind static;
  #L15ceb8.  return v6 @kind object;
  #L15ceba.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15cebc.  goto L15cf2c;
  #L15cebe.  v4:= Exception @type ^`javax.crypto.IllegalBlockSizeException` @kind object;
  #L15cec0.  v6:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15cec4.  call temp:= `toString`(v4) @signature `Ljavax/crypto/IllegalBlockSizeException;.toString:()Ljava/lang/String;` @kind virtual;
  #L15ceca.  v4:= temp @kind object;
  #L15cecc.  call `<init>`(v6, v4) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15ced2.  throw v6;
  #L15ced4.  v4:= Exception @type ^`javax.crypto.BadPaddingException` @kind object;
  #L15ced6.  v6:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15ceda.  call temp:= `toString`(v4) @signature `Ljavax/crypto/BadPaddingException;.toString:()Ljava/lang/String;` @kind virtual;
  #L15cee0.  v4:= temp @kind object;
  #L15cee2.  call `<init>`(v6, v4) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15cee8.  throw v6;
  #L15ceea.  v4:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L15ceec.  v6:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15cef0.  call temp:= `toString`(v4) @signature `Ljava/security/InvalidKeyException;.toString:()Ljava/lang/String;` @kind virtual;
  #L15cef6.  v4:= temp @kind object;
  #L15cef8.  call `<init>`(v6, v4) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15cefe.  throw v6;
  #L15cf00.  v4:= Exception @type ^`javax.crypto.NoSuchPaddingException` @kind object;
  #L15cf02.  v6:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15cf06.  call temp:= `toString`(v4) @signature `Ljavax/crypto/NoSuchPaddingException;.toString:()Ljava/lang/String;` @kind virtual;
  #L15cf0c.  v4:= temp @kind object;
  #L15cf0e.  call `<init>`(v6, v4) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15cf14.  throw v6;
  #L15cf16.  v4:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L15cf18.  v6:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15cf1c.  call temp:= `toString`(v4) @signature `Ljava/security/NoSuchAlgorithmException;.toString:()Ljava/lang/String;` @kind virtual;
  #L15cf22.  v4:= temp @kind object;
  #L15cf24.  call `<init>`(v6, v4) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15cf2a.  throw v6;
  #L15cf2c.  call `clearByteArray`(v5) @signature `Le/c/a/d/b;.clearByteArray:(Le/c/a/a/c;)V` @kind static;
  #L15cf32.  throw v4;
  catch `java.security.NoSuchAlgorithmException` @[L15ce76..L15ceb2] goto L15cf16;
  catch `javax.crypto.NoSuchPaddingException` @[L15ce76..L15ceb2] goto L15cf00;
  catch `java.security.InvalidKeyException` @[L15ce76..L15ceb2] goto L15ceea;
  catch `javax.crypto.BadPaddingException` @[L15ce76..L15ceb2] goto L15ced4;
  catch `javax.crypto.IllegalBlockSizeException` @[L15ce76..L15ceb2] goto L15cebe;
  catch `java.lang.Throwable` @[L15ce76..L15ceb2] goto L15ceba;
  catch `java.lang.Throwable` @[L15cec0..L15cf2c] goto L15ceba;
}
procedure `e.c.a.a.c` `AESCBCMAC`(`com.mastercard.api.crypto.a` v7 @kind this, `e.c.a.a.c` v8 @kind object, `e.c.a.a.c` v9 @kind object) @signature `Lcom/mastercard/api/crypto/a;.AESCBCMAC:(Le/c/a/a/c;Le/c/a/a/c;)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L15cf68.  call temp:= `getBytes`(v8) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15cf6e.  v0:= temp @kind object;
  #L15cf70.  call temp:= `getLength`(v8) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15cf76.  v8:= temp;
  #L15cf78.  v1:= v8 %% 16;
  #L15cf7c.  v2:= 16I;
  #L15cf80.  v1:= v1 - 16;
  #L15cf84.  v1:= v1 + v8 @kind int;
  #L15cf86.  v1:= new `byte`[v1];
  #L15cf8a.  v3:= 0I;
  #L15cf8c.  v4:= 0I;
  #L15cf8e.  if v4 >= v8 then goto L15cfa0;
  #L15cf92.  v5:= v0[v4] @kind byte;
  #L15cf96.  v1[v4]:= v5 @kind byte;
  #L15cf9a.  v4:= v4 + 1;
  #L15cf9e.  goto L15cf8e;
  #L15cfa0.  v0:= v8;
  #L15cfa2.  v4:= length @variable v1;
  #L15cfa4.  if v0 >= v4 then goto L15cfc0;
  #L15cfa8.  if v0 != v8 then goto L15cfb6;
  #L15cfac.  v4:= -128I;
  #L15cfb0.  v1[v0]:= v4 @kind byte;
  #L15cfb4.  goto L15cfba;
  #L15cfb6.  v1[v0]:= v3 @kind byte;
  #L15cfba.  v0:= v0 + 1;
  #L15cfbe.  goto L15cfa2;
  #L15cfc0.  v8:= new `javax.crypto.spec.SecretKeySpec`;
  #L15cfc4.  call temp:= `getBytes`(v9) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15cfca.  v9:= temp @kind object;
  #L15cfcc.  v0:= "AES" @kind object;
  #L15cfd0.  call `<init>`(v8, v9, v0) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L15cfd6.  v9:= new `byte`[v2];
  #L15cfda.  v9[v3]:= v3 @kind byte;
  #L15cfde.  v0:= 1I;
  #L15cfe0.  v9[v0]:= v3 @kind byte;
  #L15cfe4.  v4:= 2I;
  #L15cfe6.  v9[v4]:= v3 @kind byte;
  #L15cfea.  v4:= 3I;
  #L15cfec.  v9[v4]:= v3 @kind byte;
  #L15cff0.  v4:= 4I;
  #L15cff2.  v9[v4]:= v3 @kind byte;
  #L15cff6.  v4:= 5I;
  #L15cff8.  v9[v4]:= v3 @kind byte;
  #L15cffc.  v4:= 6I;
  #L15cffe.  v9[v4]:= v3 @kind byte;
  #L15d002.  v4:= 7I;
  #L15d004.  v9[v4]:= v3 @kind byte;
  #L15d008.  v4:= 8I;
  #L15d00c.  v9[v4]:= v3 @kind byte;
  #L15d010.  v5:= 9I;
  #L15d014.  v9[v5]:= v3 @kind byte;
  #L15d018.  v5:= 10I;
  #L15d01c.  v9[v5]:= v3 @kind byte;
  #L15d020.  v5:= 11I;
  #L15d024.  v9[v5]:= v3 @kind byte;
  #L15d028.  v5:= 12I;
  #L15d02c.  v9[v5]:= v3 @kind byte;
  #L15d030.  v5:= 13I;
  #L15d034.  v9[v5]:= v3 @kind byte;
  #L15d038.  v5:= 14I;
  #L15d03c.  v9[v5]:= v3 @kind byte;
  #L15d040.  v5:= 15I;
  #L15d044.  v9[v5]:= v3 @kind byte;
  #L15d048.  v5:= "AES/CBC/NoPadding" @kind object;
  #L15d04c.  call temp:= `getInstance`(v5) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L15d052.  v5:= temp @kind object;
  #L15d054.  v6:= new `javax.crypto.spec.IvParameterSpec`;
  #L15d058.  call `<init>`(v6, v9) @signature `Ljavax/crypto/spec/IvParameterSpec;.<init>:([B)V` @kind direct;
  #L15d05e.  call `init`(v5, v0, v8, v6) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L15d064.  v8:= 0I;
  #L15d066.  v0:= length @variable v1;
  #L15d068.  v0:= v0 / v2 @kind int;
  #L15d06a.  if v8 >= v0 then goto L15d088;
  #L15d06e.  v0:= v8 * 16;
  #L15d072.  call temp:= `a`(v1, v0, v9, v3, v2) @signature `Lcom/mastercard/api/crypto/a;.a:([BI[BII)[B` @kind static;
  #L15d078.  v9:= temp @kind object;
  #L15d07a.  call temp:= `doFinal`(v5, v9) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L15d080.  v9:= temp @kind object;
  #L15d082.  v8:= v8 + 1;
  #L15d086.  goto L15d066;
  #L15d088.  v8:= new `byte`[v4];
  #L15d08c.  call `arraycopy`(v9, v3, v8, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15d092.  v9:= new `e.c.a.a.e`;
  #L15d096.  call `<init>`(v9, v8) @signature `Le/c/a/a/e;.<init>:([B)V` @kind direct;
  #L15d09c.  return v9 @kind object;
  #L15d09e.  v8:= Exception @type ^`java.lang.Exception` @kind object;
  #L15d0a0.  v9:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d0a4.  call temp:= `toString`(v8) @signature `Ljava/lang/Exception;.toString:()Ljava/lang/String;` @kind virtual;
  #L15d0aa.  v8:= temp @kind object;
  #L15d0ac.  call `<init>`(v9, v8) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d0b2.  throw v9;
  catch `java.lang.Exception` @[L15cf68..L15d09c] goto L15d09e;
}
procedure `e.c.a.a.c` `DES`(`com.mastercard.api.crypto.a` v2 @kind this, `e.c.a.a.c` v3 @kind object, `e.c.a.a.c` v4 @kind object, `boolean` v5 ) @signature `Lcom/mastercard/api/crypto/a;.DES:(Le/c/a/a/c;Le/c/a/a/c;Z)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15d0d4.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L15d0d8.  call temp:= `getBytes`(v4) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d0de.  v4:= temp @kind object;
  #L15d0e0.  v1:= "DES" @kind object;
  #L15d0e4.  call `<init>`(v0, v4, v1) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L15d0ea.  v4:= "DES/ECB/noPadding" @kind object;
  #L15d0ee.  call temp:= `getInstance`(v4) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L15d0f4.  v4:= temp @kind object;
  #L15d0f6.  if v5 == 0 then goto L15d104;
  #L15d0fa.  v5:= 1I;
  #L15d0fc.  call `init`(v4, v5, v0) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L15d102.  goto L15d10c;
  #L15d104.  v5:= 2I;
  #L15d106.  call `init`(v4, v5, v0) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L15d10c.  call temp:= `getBytes`(v3) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d112.  v3:= temp @kind object;
  #L15d114.  call temp:= `doFinal`(v4, v3) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L15d11a.  v3:= temp @kind object;
  #L15d11c.  v4:= new `e.c.a.a.e`;
  #L15d120.  call `<init>`(v4, v3) @signature `Le/c/a/a/e;.<init>:([B)V` @kind direct;
  #L15d126.  return v4 @kind object;
  #L15d128.  v3:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d12c.  call `<init>`(v3) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:()V` @kind direct;
  #L15d132.  throw v3;
  catch `java.security.NoSuchAlgorithmException` @[L15d0ea..L15d126] goto L15d128;
  catch `javax.crypto.NoSuchPaddingException` @[L15d0ea..L15d126] goto L15d128;
  catch `javax.crypto.IllegalBlockSizeException` @[L15d0ea..L15d126] goto L15d128;
  catch `javax.crypto.BadPaddingException` @[L15d0ea..L15d126] goto L15d128;
  catch `java.security.InvalidKeyException` @[L15d0ea..L15d126] goto L15d128;
}
procedure `e.c.a.a.c` `DES3`(`com.mastercard.api.crypto.a` v4 @kind this, `e.c.a.a.c` v5 @kind object, `e.c.a.a.c` v6 @kind object, `boolean` v7 ) @signature `Lcom/mastercard/api/crypto/a;.DES3:(Le/c/a/a/c;Le/c/a/a/c;Z)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15d160.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L15d164.  call temp:= `getBytes`(v6) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d16a.  v1:= temp @kind object;
  #L15d16c.  v2:= "DESede" @kind object;
  #L15d170.  call `<init>`(v0, v1, v2) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L15d176.  v1:= "DESede/CBC/noPadding" @kind object;
  #L15d17a.  v2:= "BC" @kind object;
  #L15d17e.  call temp:= `getInstance`(v1, v2) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L15d184.  v1:= temp @kind object;
  #L15d186.  v2:= new `javax.crypto.spec.IvParameterSpec`;
  #L15d18a.  v3:= 8I;
  #L15d18e.  v3:= new `byte`[v3];
  #L15d192.  call `<init>`(v2, v3) @signature `Ljavax/crypto/spec/IvParameterSpec;.<init>:([B)V` @kind direct;
  #L15d198.  if v7 == 0 then goto L15d1a6;
  #L15d19c.  v7:= 1I;
  #L15d19e.  call `init`(v1, v7, v0, v2) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L15d1a4.  goto L15d1ae;
  #L15d1a6.  v7:= 2I;
  #L15d1a8.  call `init`(v1, v7, v0, v2) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L15d1ae.  v7:= new `e.c.a.a.e`;
  #L15d1b2.  call temp:= `getBytes`(v5) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d1b8.  v5:= temp @kind object;
  #L15d1ba.  call temp:= `doFinal`(v1, v5) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L15d1c0.  v5:= temp @kind object;
  #L15d1c2.  call `<init>`(v7, v5) @signature `Le/c/a/a/e;.<init>:([B)V` @kind direct;
  #L15d1c8.  call `clearByteArray`(v6) @signature `Le/c/a/d/b;.clearByteArray:(Le/c/a/a/c;)V` @kind static;
  #L15d1ce.  return v7 @kind object;
  #L15d1d0.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15d1d2.  goto L15d238;
  #L15d1d4.  v5:= Exception @type ^`java.security.NoSuchProviderException` @kind object;
  #L15d1d6.  call temp:= `getMessage`(v5) @signature `Ljava/security/NoSuchProviderException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L15d1dc.  v5:= temp @kind object;
  #L15d1de.  goto L15d226;
  #L15d1e0.  v5:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L15d1e2.  call temp:= `getMessage`(v5) @signature `Ljava/security/InvalidKeyException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L15d1e8.  v5:= temp @kind object;
  #L15d1ea.  goto L15d226;
  #L15d1ec.  v5:= Exception @type ^`java.security.InvalidAlgorithmParameterException` @kind object;
  #L15d1ee.  call temp:= `getMessage`(v5) @signature `Ljava/security/InvalidAlgorithmParameterException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L15d1f4.  v5:= temp @kind object;
  #L15d1f6.  goto L15d226;
  #L15d1f8.  v5:= Exception @type ^`javax.crypto.BadPaddingException` @kind object;
  #L15d1fa.  call temp:= `getMessage`(v5) @signature `Ljavax/crypto/BadPaddingException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L15d200.  v5:= temp @kind object;
  #L15d202.  goto L15d226;
  #L15d204.  v5:= Exception @type ^`javax.crypto.IllegalBlockSizeException` @kind object;
  #L15d206.  call temp:= `getMessage`(v5) @signature `Ljavax/crypto/IllegalBlockSizeException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L15d20c.  v5:= temp @kind object;
  #L15d20e.  goto L15d226;
  #L15d210.  v5:= Exception @type ^`javax.crypto.NoSuchPaddingException` @kind object;
  #L15d212.  call temp:= `getMessage`(v5) @signature `Ljavax/crypto/NoSuchPaddingException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L15d218.  v5:= temp @kind object;
  #L15d21a.  goto L15d226;
  #L15d21c.  v5:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L15d21e.  call temp:= `getMessage`(v5) @signature `Ljava/security/NoSuchAlgorithmException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L15d224.  v5:= temp @kind object;
  #L15d226.  call `clearByteArray`(v6) @signature `Le/c/a/d/b;.clearByteArray:(Le/c/a/a/c;)V` @kind static;
  #L15d22c.  v6:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d230.  call `<init>`(v6, v5) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d236.  throw v6;
  #L15d238.  call `clearByteArray`(v6) @signature `Le/c/a/d/b;.clearByteArray:(Le/c/a/a/c;)V` @kind static;
  #L15d23e.  throw v5;
  catch `java.security.NoSuchAlgorithmException` @[L15d176..L15d1c8] goto L15d21c;
  catch `javax.crypto.NoSuchPaddingException` @[L15d176..L15d1c8] goto L15d210;
  catch `javax.crypto.IllegalBlockSizeException` @[L15d176..L15d1c8] goto L15d204;
  catch `javax.crypto.BadPaddingException` @[L15d176..L15d1c8] goto L15d1f8;
  catch `java.security.InvalidAlgorithmParameterException` @[L15d176..L15d1c8] goto L15d1ec;
  catch `java.security.InvalidKeyException` @[L15d176..L15d1c8] goto L15d1e0;
  catch `java.security.NoSuchProviderException` @[L15d176..L15d1c8] goto L15d1d4;
  catch `java.lang.Throwable` @[L15d176..L15d1c8] goto L15d1d0;
  catch `java.lang.Throwable` @[L15d1d6..L15d226] goto L15d1d0;
}
procedure `e.c.a.a.c` `DESCBC`(`com.mastercard.api.crypto.a` v3 @kind this, `e.c.a.a.c` v4 @kind object, `e.c.a.a.c` v5 @kind object, `boolean` v6 ) @signature `Lcom/mastercard/api/crypto/a;.DESCBC:(Le/c/a/a/c;Le/c/a/a/c;Z)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15d27c.  v0:= "DES" @kind object;
  #L15d280.  call temp:= `getInstance`(v0) @signature `Ljavax/crypto/SecretKeyFactory;.getInstance:(Ljava/lang/String;)Ljavax/crypto/SecretKeyFactory;` @kind static;
  #L15d286.  v0:= temp @kind object;
  #L15d288.  v1:= new `javax.crypto.spec.DESKeySpec`;
  #L15d28c.  call temp:= `getBytes`(v5) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d292.  v5:= temp @kind object;
  #L15d294.  call `<init>`(v1, v5) @signature `Ljavax/crypto/spec/DESKeySpec;.<init>:([B)V` @kind direct;
  #L15d29a.  call temp:= `generateSecret`(v0, v1) @signature `Ljavax/crypto/SecretKeyFactory;.generateSecret:(Ljava/security/spec/KeySpec;)Ljavax/crypto/SecretKey;` @kind virtual;
  #L15d2a0.  v5:= temp @kind object;
  #L15d2a2.  v0:= "DES/CBC/noPadding" @kind object;
  #L15d2a6.  call temp:= `getInstance`(v0) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L15d2ac.  v0:= temp @kind object;
  #L15d2ae.  v1:= new `javax.crypto.spec.IvParameterSpec`;
  #L15d2b2.  v2:= 8I;
  #L15d2b6.  v2:= new `byte`[v2];
  #L15d2ba.  call `<init>`(v1, v2) @signature `Ljavax/crypto/spec/IvParameterSpec;.<init>:([B)V` @kind direct;
  #L15d2c0.  if v6 == 0 then goto L15d2ce;
  #L15d2c4.  v6:= 1I;
  #L15d2c6.  call `init`(v0, v6, v5, v1) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L15d2cc.  goto L15d2d6;
  #L15d2ce.  v6:= 2I;
  #L15d2d0.  call `init`(v0, v6, v5, v1) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L15d2d6.  v5:= new `e.c.a.a.e`;
  #L15d2da.  call temp:= `getBytes`(v4) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d2e0.  v4:= temp @kind object;
  #L15d2e2.  call temp:= `doFinal`(v0, v4) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L15d2e8.  v4:= temp @kind object;
  #L15d2ea.  call `<init>`(v5, v4) @signature `Le/c/a/a/e;.<init>:([B)V` @kind direct;
  #L15d2f0.  return v5 @kind object;
  #L15d2f2.  v4:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d2f6.  call `<init>`(v4) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:()V` @kind direct;
  #L15d2fc.  throw v4;
  catch `java.security.spec.InvalidKeySpecException` @[L15d27c..L15d2f0] goto L15d2f2;
  catch `java.security.NoSuchAlgorithmException` @[L15d27c..L15d2f0] goto L15d2f2;
  catch `java.security.InvalidKeyException` @[L15d27c..L15d2f0] goto L15d2f2;
  catch `javax.crypto.IllegalBlockSizeException` @[L15d27c..L15d2f0] goto L15d2f2;
  catch `javax.crypto.BadPaddingException` @[L15d27c..L15d2f0] goto L15d2f2;
  catch `java.security.InvalidAlgorithmParameterException` @[L15d27c..L15d2f0] goto L15d2f2;
  catch `javax.crypto.NoSuchPaddingException` @[L15d27c..L15d2f0] goto L15d2f2;
}
procedure `e.c.a.a.c` `RSA`(`com.mastercard.api.crypto.a` v2 @kind this, `e.c.a.a.c` v3 @kind object) @signature `Lcom/mastercard/api/crypto/a;.RSA:(Le/c/a/a/c;)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15d330.  v0:= new `e.c.a.a.e`;
  #L15d334.  v1:= `@@com.mastercard.api.crypto.a.b` @type ^`javax.crypto.Cipher` @kind object;
  #L15d338.  call temp:= `getBytes`(v3) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d33e.  v3:= temp @kind object;
  #L15d340.  call temp:= `doFinal`(v1, v3) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L15d346.  v3:= temp @kind object;
  #L15d348.  call `<init>`(v0, v3) @signature `Le/c/a/a/e;.<init>:([B)V` @kind direct;
  #L15d34e.  return v0 @kind object;
  #L15d350.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15d352.  goto L15d37c;
  #L15d354.  v3:= Exception @type ^`java.lang.Exception` @kind object;
  #L15d356.  call `printStackTrace`(v3) @signature `Le/c/a/d/d/a;.printStackTrace:(Ljava/lang/Throwable;)V` @kind static;
  #L15d35c.  goto L15d370;
  #L15d35e.  v3:= Exception @type ^`javax.crypto.BadPaddingException` @kind object;
  #L15d360.  call `printStackTrace`(v3) @signature `Le/c/a/d/d/a;.printStackTrace:(Ljava/lang/Throwable;)V` @kind static;
  #L15d366.  goto L15d370;
  #L15d368.  v3:= Exception @type ^`javax.crypto.IllegalBlockSizeException` @kind object;
  #L15d36a.  call `printStackTrace`(v3) @signature `Le/c/a/d/d/a;.printStackTrace:(Ljava/lang/Throwable;)V` @kind static;
  #L15d370.  v3:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d374.  call `<init>`(v3) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:()V` @kind direct;
  #L15d37a.  throw v3;
  #L15d37c.  throw v3;
  catch `javax.crypto.IllegalBlockSizeException` @[L15d330..L15d34e] goto L15d368;
  catch `javax.crypto.BadPaddingException` @[L15d330..L15d34e] goto L15d35e;
  catch `java.lang.Exception` @[L15d330..L15d34e] goto L15d354;
  catch `java.lang.Throwable` @[L15d330..L15d34e] goto L15d350;
  catch `java.lang.Throwable` @[L15d356..L15d370] goto L15d350;
}
procedure `e.c.a.a.c` `SHA1`(`com.mastercard.api.crypto.a` v1 @kind this, `e.c.a.a.c` v2 @kind object) @signature `Lcom/mastercard/api/crypto/a;.SHA1:(Le/c/a/a/c;)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15d3b0.  v0:= "SHA-1" @kind object;
  #L15d3b4.  call temp:= `getInstance`(v0) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L15d3ba.  v0:= temp @kind object;
  #L15d3bc.  call temp:= `getBytes`(v2) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d3c2.  v2:= temp @kind object;
  #L15d3c4.  call `update`(v0, v2) @signature `Ljava/security/MessageDigest;.update:([B)V` @kind virtual;
  #L15d3ca.  v2:= new `e.c.a.a.e`;
  #L15d3ce.  call temp:= `digest`(v0) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L15d3d4.  v0:= temp @kind object;
  #L15d3d6.  call `<init>`(v2, v0) @signature `Le/c/a/a/e;.<init>:([B)V` @kind direct;
  #L15d3dc.  return v2 @kind object;
  #L15d3de.  v2:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d3e2.  call `<init>`(v2) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:()V` @kind direct;
  #L15d3e8.  throw v2;
  catch `java.security.NoSuchAlgorithmException` @[L15d3b0..L15d3dc] goto L15d3de;
}
procedure `e.c.a.a.c` `SHA256`(`com.mastercard.api.crypto.a` v3 @kind this, `e.c.a.a.c` v4 @kind object) @signature `Lcom/mastercard/api/crypto/a;.SHA256:(Le/c/a/a/c;)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15d40c.  v0:= "SHA-256" @kind object;
  #L15d410.  call temp:= `getInstance`(v0) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L15d416.  v0:= temp @kind object;
  #L15d418.  v1:= new `e.c.a.a.e`;
  #L15d41c.  call temp:= `getBytes`(v4) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d422.  v2:= temp @kind object;
  #L15d424.  call temp:= `digest`(v0, v2) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L15d42a.  v0:= temp @kind object;
  #L15d42c.  call `<init>`(v1, v0) @signature `Le/c/a/a/e;.<init>:([B)V` @kind direct;
  #L15d432.  call `clearByteArray`(v4) @signature `Le/c/a/d/b;.clearByteArray:(Le/c/a/a/c;)V` @kind static;
  #L15d438.  return v1 @kind object;
  #L15d43a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15d43c.  call `clearByteArray`(v4) @signature `Le/c/a/d/b;.clearByteArray:(Le/c/a/a/c;)V` @kind static;
  #L15d442.  throw v0;
  #L15d444.  call `clearByteArray`(v4) @signature `Le/c/a/d/b;.clearByteArray:(Le/c/a/a/c;)V` @kind static;
  #L15d44a.  v4:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d44e.  call `<init>`(v4) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:()V` @kind direct;
  #L15d454.  throw v4;
  catch `java.security.NoSuchAlgorithmException` @[L15d40c..L15d432] goto L15d444;
  catch `java.lang.Throwable` @[L15d40c..L15d432] goto L15d43a;
}
procedure `e.c.a.a.c` `encryptDecryptUsingCTRMode`(`com.mastercard.api.crypto.a` v1 @kind this, `e.c.a.a.c` v2 @kind object, `e.c.a.a.c` v3 @kind object, `byte`[] v4 @kind object, `boolean` v5 , `boolean` v6 ) @signature `Lcom/mastercard/api/crypto/a;.encryptDecryptUsingCTRMode:(Le/c/a/a/c;Le/c/a/a/c;[BZZ)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15d478.  v5:= new `javax.crypto.spec.SecretKeySpec`;
  #L15d47c.  call temp:= `getBytes`(v3) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d482.  v3:= temp @kind object;
  #L15d484.  v0:= "AES" @kind object;
  #L15d488.  call `<init>`(v5, v3, v0) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L15d48e.  v3:= new `javax.crypto.spec.IvParameterSpec`;
  #L15d492.  call `<init>`(v3, v4) @signature `Ljavax/crypto/spec/IvParameterSpec;.<init>:([B)V` @kind direct;
  #L15d498.  v4:= "AES/CTR/NoPadding" @kind object;
  #L15d49c.  call temp:= `getInstance`(v4) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L15d4a2.  v4:= temp @kind object;
  #L15d4a4.  if v6 == 0 then goto L15d4b2;
  #L15d4a8.  v0:= 1I;
  #L15d4aa.  call `init`(v4, v0, v5, v3) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L15d4b0.  goto L15d4ba;
  #L15d4b2.  v0:= 2I;
  #L15d4b4.  call `init`(v4, v0, v5, v3) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L15d4ba.  if v6 == 0 then goto L15d4d0;
  #L15d4be.  call temp:= `getBytes`(v2) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d4c4.  v2:= temp @kind object;
  #L15d4c6.  call temp:= `doFinal`(v4, v2) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L15d4cc.  v2:= temp @kind object;
  #L15d4ce.  goto L15d4e0;
  #L15d4d0.  call temp:= `getBytes`(v2) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d4d6.  v2:= temp @kind object;
  #L15d4d8.  call temp:= `doFinal`(v4, v2) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L15d4de.  v2:= temp @kind object;
  #L15d4e0.  v3:= new `e.c.a.a.e`;
  #L15d4e4.  call `<init>`(v3, v2) @signature `Le/c/a/a/e;.<init>:([B)V` @kind direct;
  #L15d4ea.  return v3 @kind object;
  #L15d4ec.  v2:= Exception @type ^`javax.crypto.BadPaddingException` @kind object;
  #L15d4ee.  v3:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d4f2.  call temp:= `getMessage`(v2) @signature `Ljavax/crypto/BadPaddingException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L15d4f8.  v2:= temp @kind object;
  #L15d4fa.  call `<init>`(v3, v2) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d500.  throw v3;
  #L15d502.  v2:= Exception @type ^`javax.crypto.IllegalBlockSizeException` @kind object;
  #L15d504.  v3:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d508.  call temp:= `getMessage`(v2) @signature `Ljavax/crypto/IllegalBlockSizeException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L15d50e.  v2:= temp @kind object;
  #L15d510.  call `<init>`(v3, v2) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d516.  throw v3;
  #L15d518.  v2:= Exception @type ^`java.security.InvalidAlgorithmParameterException` @kind object;
  #L15d51a.  v3:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d51e.  call temp:= `getMessage`(v2) @signature `Ljava/security/InvalidAlgorithmParameterException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L15d524.  v2:= temp @kind object;
  #L15d526.  call `<init>`(v3, v2) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d52c.  throw v3;
  #L15d52e.  v2:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L15d530.  v3:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d534.  call temp:= `getMessage`(v2) @signature `Ljava/security/InvalidKeyException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L15d53a.  v2:= temp @kind object;
  #L15d53c.  call `<init>`(v3, v2) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d542.  throw v3;
  #L15d544.  v2:= Exception @type ^`javax.crypto.NoSuchPaddingException` @kind object;
  #L15d546.  v3:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d54a.  call temp:= `getMessage`(v2) @signature `Ljavax/crypto/NoSuchPaddingException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L15d550.  v2:= temp @kind object;
  #L15d552.  call `<init>`(v3, v2) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d558.  throw v3;
  #L15d55a.  v2:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L15d55c.  v3:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d560.  call temp:= `getMessage`(v2) @signature `Ljava/security/NoSuchAlgorithmException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L15d566.  v2:= temp @kind object;
  #L15d568.  call `<init>`(v3, v2) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d56e.  throw v3;
  catch `java.security.NoSuchAlgorithmException` @[L15d498..L15d4ea] goto L15d55a;
  catch `javax.crypto.NoSuchPaddingException` @[L15d498..L15d4ea] goto L15d544;
  catch `java.security.InvalidKeyException` @[L15d498..L15d4ea] goto L15d52e;
  catch `java.security.InvalidAlgorithmParameterException` @[L15d498..L15d4ea] goto L15d518;
  catch `javax.crypto.IllegalBlockSizeException` @[L15d498..L15d4ea] goto L15d502;
  catch `javax.crypto.BadPaddingException` @[L15d498..L15d4ea] goto L15d4ec;
}
procedure `e.c.a.a.c` `generateRandom`(`com.mastercard.api.crypto.a` v3 @kind this, `int` v4 ) @signature `Lcom/mastercard/api/crypto/a;.generateRandom:(I)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15d59c.  v0:= new `byte`[v4];
  #L15d5a0.  v1:= "SHA1PRNG" @kind object;
  #L15d5a4.  call temp:= `getInstance`(v1) @signature `Ljava/security/SecureRandom;.getInstance:(Ljava/lang/String;)Ljava/security/SecureRandom;` @kind static;
  #L15d5aa.  v1:= temp @kind object;
  #L15d5ac.  v2:= 1I;
  #L15d5ae.  v2:= new `byte`[v2];
  #L15d5b2.  call `nextBytes`(v1, v2) @signature `Ljava/security/SecureRandom;.nextBytes:([B)V` @kind virtual;
  #L15d5b8.  call `nextBytes`(v1, v0) @signature `Ljava/security/SecureRandom;.nextBytes:([B)V` @kind virtual;
  #L15d5be.  goto L15d5d0;
  #L15d5c0.  v1:= new `java.security.SecureRandom`;
  #L15d5c4.  call `<init>`(v1) @signature `Ljava/security/SecureRandom;.<init>:()V` @kind direct;
  #L15d5ca.  call `nextBytes`(v1, v0) @signature `Ljava/security/SecureRandom;.nextBytes:([B)V` @kind virtual;
  #L15d5d0.  v1:= new `e.c.a.a.e`;
  #L15d5d4.  call `<init>`(v1, v0, v4) @signature `Le/c/a/a/e;.<init>:([BI)V` @kind direct;
  #L15d5da.  return v1 @kind object;
  catch `java.security.NoSuchAlgorithmException` @[L15d5a0..L15d5be] goto L15d5c0;
}
procedure `int` `initRSAPrivateKey`(`com.mastercard.api.crypto.a` v9 @kind this, `e.c.a.a.c` v10 @kind object, `e.c.a.a.c` v11 @kind object, `e.c.a.a.c` v12 @kind object, `e.c.a.a.c` v13 @kind object, `e.c.a.a.c` v14 @kind object) @signature `Lcom/mastercard/api/crypto/a;.initRSAPrivateKey:(Le/c/a/a/c;Le/c/a/a/c;Le/c/a/a/c;Le/c/a/a/c;Le/c/a/a/c;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L15d7ac.  v4:= new `java.math.BigInteger`;
  #L15d7b0.  call temp:= `getHexString`(v10) @signature `Le/c/a/a/c;.getHexString:()Ljava/lang/String;` @kind interface;
  #L15d7b6.  v10:= temp @kind object;
  #L15d7b8.  v0:= 16I;
  #L15d7bc.  call `<init>`(v4, v10, v0) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L15d7c2.  v5:= new `java.math.BigInteger`;
  #L15d7c6.  call temp:= `getHexString`(v11) @signature `Le/c/a/a/c;.getHexString:()Ljava/lang/String;` @kind interface;
  #L15d7cc.  v10:= temp @kind object;
  #L15d7ce.  call `<init>`(v5, v10, v0) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L15d7d4.  v6:= new `java.math.BigInteger`;
  #L15d7d8.  call temp:= `getHexString`(v12) @signature `Le/c/a/a/c;.getHexString:()Ljava/lang/String;` @kind interface;
  #L15d7de.  v10:= temp @kind object;
  #L15d7e0.  call `<init>`(v6, v10, v0) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L15d7e6.  v7:= new `java.math.BigInteger`;
  #L15d7ea.  call temp:= `getHexString`(v13) @signature `Le/c/a/a/c;.getHexString:()Ljava/lang/String;` @kind interface;
  #L15d7f0.  v10:= temp @kind object;
  #L15d7f2.  call `<init>`(v7, v10, v0) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L15d7f8.  v8:= new `java.math.BigInteger`;
  #L15d7fc.  call temp:= `getHexString`(v14) @signature `Le/c/a/a/c;.getHexString:()Ljava/lang/String;` @kind interface;
  #L15d802.  v10:= temp @kind object;
  #L15d804.  call `<init>`(v8, v10, v0) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L15d80a.  call temp:= `multiply`(v4, v5) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L15d810.  v10:= temp @kind object;
  #L15d812.  v11:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L15d816.  call temp:= `subtract`(v4, v11) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L15d81c.  v11:= temp @kind object;
  #L15d81e.  call temp:= `modInverse`(v6, v11) @signature `Ljava/math/BigInteger;.modInverse:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L15d824.  v2:= temp @kind object;
  #L15d826.  v11:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L15d82a.  call temp:= `subtract`(v4, v11) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L15d830.  v11:= temp @kind object;
  #L15d832.  v12:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L15d836.  call temp:= `subtract`(v5, v12) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L15d83c.  v12:= temp @kind object;
  #L15d83e.  call temp:= `multiply`(v11, v12) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L15d844.  v11:= temp @kind object;
  #L15d846.  v12:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L15d84a.  call temp:= `subtract`(v4, v12) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L15d850.  v12:= temp @kind object;
  #L15d852.  v13:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L15d856.  call temp:= `subtract`(v5, v13) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L15d85c.  v13:= temp @kind object;
  #L15d85e.  call temp:= `gcd`(v12, v13) @signature `Ljava/math/BigInteger;.gcd:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L15d864.  v12:= temp @kind object;
  #L15d866.  call temp:= `divide`(v11, v12) @signature `Ljava/math/BigInteger;.divide:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L15d86c.  v11:= temp @kind object;
  #L15d86e.  call temp:= `modInverse`(v2, v11) @signature `Ljava/math/BigInteger;.modInverse:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L15d874.  v3:= temp @kind object;
  #L15d876.  v11:= "RSA" @kind object;
  #L15d87a.  call temp:= `getInstance`(v11) @signature `Ljava/security/KeyFactory;.getInstance:(Ljava/lang/String;)Ljava/security/KeyFactory;` @kind static;
  #L15d880.  v11:= temp @kind object;
  #L15d882.  v12:= new `java.security.spec.RSAPrivateCrtKeySpec`;
  #L15d886.  v0:= v12 @kind object;
  #L15d888.  v1:= v10 @kind object;
  #L15d88a.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Ljava/security/spec/RSAPrivateCrtKeySpec;.<init>:(Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L15d890.  call temp:= `generatePrivate`(v11, v12) @signature `Ljava/security/KeyFactory;.generatePrivate:(Ljava/security/spec/KeySpec;)Ljava/security/PrivateKey;` @kind virtual;
  #L15d896.  v11:= temp @kind object;
  #L15d898.  v11:= (`java.security.interfaces.RSAPrivateKey`) v11 @kind object;
  #L15d89c.  call `a`(v9, v11) @signature `Lcom/mastercard/api/crypto/a;.a:(Ljava/security/interfaces/RSAPrivateKey;)V` @kind direct;
  #L15d8a2.  call temp:= `bitLength`(v10) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L15d8a8.  v10:= temp;
  #L15d8aa.  v10:= v10 / 8;
  #L15d8ae.  return v10;
  #L15d8b0.  v10:= Exception @type ^`java.lang.Exception` @kind object;
  #L15d8b2.  call `printStackTrace`(v10) @signature `Le/c/a/d/d/a;.printStackTrace:(Ljava/lang/Throwable;)V` @kind static;
  #L15d8b8.  v10:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d8bc.  call `<init>`(v10) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:()V` @kind direct;
  #L15d8c2.  throw v10;
  #L15d8c4.  v10:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d8c8.  call `<init>`(v10) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:()V` @kind direct;
  #L15d8ce.  throw v10;
  #L15d8d0.  v10:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d8d4.  call `<init>`(v10) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:()V` @kind direct;
  #L15d8da.  throw v10;
  #L15d8dc.  v10:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L15d8de.  call `printStackTrace`(v10) @signature `Le/c/a/d/d/a;.printStackTrace:(Ljava/lang/Throwable;)V` @kind static;
  #L15d8e4.  v10:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d8e8.  call `<init>`(v10) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:()V` @kind direct;
  #L15d8ee.  throw v10;
  catch `java.security.NoSuchAlgorithmException` @[L15d7ac..L15d8ae] goto L15d8dc;
  catch `java.security.spec.InvalidKeySpecException` @[L15d7ac..L15d8ae] goto L15d8d0;
  catch `com.mastercard.api.crypto.MMPPCryptoException` @[L15d7ac..L15d8ae] goto L15d8c4;
  catch `java.lang.Exception` @[L15d7ac..L15d8ae] goto L15d8b0;
}
procedure `e.c.a.a.c` `mac`(`com.mastercard.api.crypto.a` v5 @kind this, `e.c.a.a.c` v6 @kind object, `e.c.a.a.c` v7 @kind object) @signature `Lcom/mastercard/api/crypto/a;.mac:(Le/c/a/a/c;Le/c/a/a/c;)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15d5fc.  call temp:= `getBytes`(v6) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d602.  v0:= temp @kind object;
  #L15d604.  v0:= length @variable v0;
  #L15d606.  v0:= (`double`) v0 @kind i2d;
  #L15d608.  v2:= 1.0D;
  #L15d60c.  v0:= v0 + v2 @kind double;
  #L15d60e.  v2:= 8.0D;
  #L15d612.  v0:= v0 / v2 @kind double;
  #L15d614.  call temp:= `ceil`(v0) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L15d61a.  v0:= temp @kind wide;
  #L15d61c.  v0:= (`int`) v0 @kind d2i;
  #L15d61e.  v0:= v0 * 8;
  #L15d622.  v0:= new `byte`[v0];
  #L15d626.  call temp:= `getBytes`(v6) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d62c.  v1:= temp @kind object;
  #L15d62e.  call temp:= `getLength`(v6) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15d634.  v2:= temp;
  #L15d636.  v3:= 0I;
  #L15d638.  call `arraycopy`(v1, v3, v0, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L15d63e.  call temp:= `getLength`(v6) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15d644.  v6:= temp;
  #L15d646.  v1:= -128I;
  #L15d64a.  v0[v6]:= v1 @kind byte;
  #L15d64e.  v6:= new `java.lang.StringBuilder`;
  #L15d652.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15d658.  v1:= "Cryptogram data : " @kind object;
  #L15d65c.  call temp:= `append`(v6, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d662.  v1:= length @variable v0;
  #L15d664.  call temp:= `toHexString`(v0, v1) @signature `Le/c/a/d/b;.toHexString:([BI)Ljava/lang/String;` @kind static;
  #L15d66a.  v1:= temp @kind object;
  #L15d66c.  call temp:= `append`(v6, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d672.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15d678.  v6:= temp @kind object;
  #L15d67a.  call `println`(v6) @signature `Le/c/a/d/d/a;.println:(Ljava/lang/String;)V` @kind static;
  #L15d680.  call temp:= `getBytes`(v7) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d686.  v6:= temp @kind object;
  #L15d688.  call temp:= `getBytes`(v7) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d68e.  v1:= temp @kind object;
  #L15d690.  v1:= length @variable v1;
  #L15d692.  v1:= v1 / 2;
  #L15d696.  call temp:= `copyOfRange`(v6, v3, v1) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L15d69c.  v6:= temp @kind object;
  #L15d69e.  call temp:= `getBytes`(v7) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d6a4.  v1:= temp @kind object;
  #L15d6a6.  call temp:= `getBytes`(v7) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d6ac.  v2:= temp @kind object;
  #L15d6ae.  v2:= length @variable v2;
  #L15d6b0.  v2:= v2 / 2;
  #L15d6b4.  call temp:= `getLength`(v7) @signature `Le/c/a/a/c;.getLength:()I` @kind interface;
  #L15d6ba.  v7:= temp;
  #L15d6bc.  call temp:= `copyOfRange`(v1, v2, v7) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L15d6c2.  v7:= temp @kind object;
  #L15d6c4.  v1:= new `e.c.a.a.e`;
  #L15d6c8.  call `<init>`(v1, v0) @signature `Le/c/a/a/e;.<init>:([B)V` @kind direct;
  #L15d6ce.  v0:= new `e.c.a.a.e`;
  #L15d6d2.  call `<init>`(v0, v6) @signature `Le/c/a/a/e;.<init>:([B)V` @kind direct;
  #L15d6d8.  v2:= 1I;
  #L15d6da.  call temp:= `DESCBC`(v5, v1, v0, v2) @signature `Lcom/mastercard/api/crypto/a;.DESCBC:(Le/c/a/a/c;Le/c/a/a/c;Z)Le/c/a/a/c;` @kind virtual;
  #L15d6e0.  v0:= temp @kind object;
  #L15d6e2.  v0:= (`e.c.a.a.e`) v0 @kind object;
  #L15d6e6.  call temp:= `getLength`(v0) @signature `Le/c/a/a/e;.getLength:()I` @kind virtual;
  #L15d6ec.  v1:= temp;
  #L15d6ee.  v1:= v1 + -8;
  #L15d6f2.  call temp:= `getLength`(v0) @signature `Le/c/a/a/e;.getLength:()I` @kind virtual;
  #L15d6f8.  v4:= temp;
  #L15d6fa.  call temp:= `copyOfRange`(v0, v1, v4) @signature `Le/c/a/a/e;.copyOfRange:(II)Le/c/a/a/c;` @kind virtual;
  #L15d700.  v0:= temp @kind object;
  #L15d702.  v0:= (`e.c.a.a.e`) v0 @kind object;
  #L15d706.  v1:= new `e.c.a.a.e`;
  #L15d70a.  call `<init>`(v1, v7) @signature `Le/c/a/a/e;.<init>:([B)V` @kind direct;
  #L15d710.  call temp:= `DES`(v5, v0, v1, v3) @signature `Lcom/mastercard/api/crypto/a;.DES:(Le/c/a/a/c;Le/c/a/a/c;Z)Le/c/a/a/c;` @kind virtual;
  #L15d716.  v7:= temp @kind object;
  #L15d718.  v0:= new `e.c.a.a.e`;
  #L15d71c.  call `<init>`(v0, v6) @signature `Le/c/a/a/e;.<init>:([B)V` @kind direct;
  #L15d722.  call temp:= `DES`(v5, v7, v0, v2) @signature `Lcom/mastercard/api/crypto/a;.DES:(Le/c/a/a/c;Le/c/a/a/c;Z)Le/c/a/a/c;` @kind virtual;
  #L15d728.  v6:= temp @kind object;
  #L15d72a.  return v6 @kind object;
}
procedure `e.c.a.a.c` `macSHA256`(`com.mastercard.api.crypto.a` v2 @kind this, `e.c.a.a.c` v3 @kind object, `e.c.a.a.c` v4 @kind object) @signature `Lcom/mastercard/api/crypto/a;.macSHA256:(Le/c/a/a/c;Le/c/a/a/c;)Le/c/a/a/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15d73c.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L15d740.  call temp:= `getBytes`(v4) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d746.  v4:= temp @kind object;
  #L15d748.  v1:= "AES" @kind object;
  #L15d74c.  call `<init>`(v0, v4, v1) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L15d752.  v4:= "HmacSHA256" @kind object;
  #L15d756.  call temp:= `getInstance`(v4) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L15d75c.  v4:= temp @kind object;
  #L15d75e.  call `init`(v4, v0) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L15d764.  call temp:= `getBytes`(v3) @signature `Le/c/a/a/c;.getBytes:()[B` @kind interface;
  #L15d76a.  v3:= temp @kind object;
  #L15d76c.  call temp:= `doFinal`(v4, v3) @signature `Ljavax/crypto/Mac;.doFinal:([B)[B` @kind virtual;
  #L15d772.  v3:= temp @kind object;
  #L15d774.  v4:= new `e.c.a.a.e`;
  #L15d778.  call `<init>`(v4, v3) @signature `Le/c/a/a/e;.<init>:([B)V` @kind direct;
  #L15d77e.  return v4 @kind object;
  #L15d780.  v3:= new `com.mastercard.api.crypto.MMPPCryptoException`;
  #L15d784.  call `<init>`(v3) @signature `Lcom/mastercard/api/crypto/MMPPCryptoException;.<init>:()V` @kind direct;
  #L15d78a.  throw v3;
  catch `java.security.InvalidKeyException` @[L15d752..L15d77e] goto L15d780;
  catch `java.security.NoSuchAlgorithmException` @[L15d752..L15d77e] goto L15d780;
}
