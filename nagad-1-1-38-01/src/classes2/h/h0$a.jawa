record `h.h0$a` @kind class @AccessFlag  extends `h.h0` @kind class {
  `h.b0` `h.h0$a.a` @AccessFlag FINAL_SYNTHETIC;
  `i.h` `h.h0$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`h.h0$a` v0 @kind this, `h.b0` v1 @kind object, `i.h` v2 @kind object) @signature `Lh/h0$a;.<init>:(Lh/b0;Li/h;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1fc334.  v0.`h.h0$a.a` @type ^`h.b0` := v1 @kind object;
  #L1fc338.  v0.`h.h0$a.b` @type ^`i.h` := v2 @kind object;
  #L1fc33c.  call `<init>`(v0) @signature `Lh/h0;.<init>:()V` @kind direct;
  #L1fc342.  return @kind void;
}
procedure `long` `contentLength`(`h.h0$a` v2 @kind this) @signature `Lh/h0$a;.contentLength:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fc2fc.  v0:= v2.`h.h0$a.b` @type ^`i.h` @kind object;
  #L1fc300.  call temp:= `size`(v0) @signature `Li/h;.size:()I` @kind virtual;
  #L1fc306.  v0:= temp;
  #L1fc308.  v0:= (`long`) v0 @kind i2l;
  #L1fc30a.  return v0 @kind wide;
}
procedure `h.b0` `contentType`(`h.h0$a` v1 @kind this) @signature `Lh/h0$a;.contentType:()Lh/b0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fc31c.  v0:= v1.`h.h0$a.a` @type ^`h.b0` @kind object;
  #L1fc320.  return v0 @kind object;
}
procedure `void` `writeTo`(`h.h0$a` v1 @kind this, `i.f` v2 @kind object) @signature `Lh/h0$a;.writeTo:(Li/f;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fc354.  v0:= v1.`h.h0$a.b` @type ^`i.h` @kind object;
  #L1fc358.  call temp:= `write`(v2, v0) @signature `Li/f;.write:(Li/h;)Li/f;` @kind interface;
  #L1fc35e.  return @kind void;
}
