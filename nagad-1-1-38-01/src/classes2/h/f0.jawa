record `h.f0` @kind class @AccessFlag FINAL extends `h.j` @kind interface {
  `h.d0` `h.f0.f` @AccessFlag FINAL;
  `okhttp3.internal.connection.j` `h.f0.g` @AccessFlag PRIVATE;
  `h.g0` `h.f0.h` @AccessFlag FINAL;
  `boolean` `h.f0.i` @AccessFlag FINAL;
  `boolean` `h.f0.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`h.f0` v0 @kind this, `h.d0` v1 @kind object, `h.g0` v2 @kind object, `boolean` v3 ) @signature `Lh/f0;.<init>:(Lh/d0;Lh/g0;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1fbe64.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1fbe6a.  v0.`h.f0.f` @type ^`h.d0` := v1 @kind object;
  #L1fbe6e.  v0.`h.f0.h` @type ^`h.g0` := v2 @kind object;
  #L1fbe72.  v0.`h.f0.i` @type ^`boolean` := v3 @kind boolean;
  #L1fbe76.  return @kind void;
}
procedure `h.f0` `a`(`h.d0` v1 @kind object, `h.g0` v2 @kind object, `boolean` v3 ) @signature `Lh/f0;.a:(Lh/d0;Lh/g0;Z)Lh/f0;` @AccessFlag STATIC {
    temp;
    v0;

  #L1fbbac.  v0:= new `h.f0`;
  #L1fbbb0.  call `<init>`(v0, v1, v2, v3) @signature `Lh/f0;.<init>:(Lh/d0;Lh/g0;Z)V` @kind direct;
  #L1fbbb6.  v2:= new `okhttp3.internal.connection.j`;
  #L1fbbba.  call `<init>`(v2, v1, v0) @signature `Lokhttp3/internal/connection/j;.<init>:(Lh/d0;Lh/j;)V` @kind direct;
  #L1fbbc0.  v0.`h.f0.g` @type ^`okhttp3.internal.connection.j` := v2 @kind object;
  #L1fbbc4.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.j` `a`(`h.f0` v0 @kind object) @signature `Lh/f0;.a:(Lh/f0;)Lokhttp3/internal/connection/j;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1fbe2c.  v0:= v0.`h.f0.g` @type ^`okhttp3.internal.connection.j` @kind object;
  #L1fbe30.  return v0 @kind object;
}
procedure `h.i0` `a`(`h.f0` v11 @kind this) @signature `Lh/f0;.a:()Lh/i0;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1fbca0.  v1:= new `java.util.ArrayList`;
  #L1fbca4.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1fbcaa.  v0:= v11.`h.f0.f` @type ^`h.d0` @kind object;
  #L1fbcae.  call temp:= `interceptors`(v0) @signature `Lh/d0;.interceptors:()Ljava/util/List;` @kind virtual;
  #L1fbcb4.  v0:= temp @kind object;
  #L1fbcb6.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1fbcbc.  v0:= new `h.n0.h.j`;
  #L1fbcc0.  v2:= v11.`h.f0.f` @type ^`h.d0` @kind object;
  #L1fbcc4.  call `<init>`(v0, v2) @signature `Lh/n0/h/j;.<init>:(Lh/d0;)V` @kind direct;
  #L1fbcca.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1fbcd0.  v0:= new `h.n0.h.a`;
  #L1fbcd4.  v2:= v11.`h.f0.f` @type ^`h.d0` @kind object;
  #L1fbcd8.  call temp:= `cookieJar`(v2) @signature `Lh/d0;.cookieJar:()Lh/r;` @kind virtual;
  #L1fbcde.  v2:= temp @kind object;
  #L1fbce0.  call `<init>`(v0, v2) @signature `Lh/n0/h/a;.<init>:(Lh/r;)V` @kind direct;
  #L1fbce6.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1fbcec.  v0:= new `h.n0.g.a`;
  #L1fbcf0.  v2:= v11.`h.f0.f` @type ^`h.d0` @kind object;
  #L1fbcf4.  call temp:= `a`(v2) @signature `Lh/d0;.a:()Lh/n0/g/d;` @kind virtual;
  #L1fbcfa.  v2:= temp @kind object;
  #L1fbcfc.  call `<init>`(v0, v2) @signature `Lh/n0/g/a;.<init>:(Lh/n0/g/d;)V` @kind direct;
  #L1fbd02.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1fbd08.  v0:= new `okhttp3.internal.connection.b`;
  #L1fbd0c.  v2:= v11.`h.f0.f` @type ^`h.d0` @kind object;
  #L1fbd10.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/connection/b;.<init>:(Lh/d0;)V` @kind direct;
  #L1fbd16.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1fbd1c.  v0:= v11.`h.f0.i` @type ^`boolean` @kind boolean;
  #L1fbd20.  if v0 != 0 then goto L1fbd36;
  #L1fbd24.  v0:= v11.`h.f0.f` @type ^`h.d0` @kind object;
  #L1fbd28.  call temp:= `networkInterceptors`(v0) @signature `Lh/d0;.networkInterceptors:()Ljava/util/List;` @kind virtual;
  #L1fbd2e.  v0:= temp @kind object;
  #L1fbd30.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1fbd36.  v0:= new `h.n0.h.b`;
  #L1fbd3a.  v2:= v11.`h.f0.i` @type ^`boolean` @kind boolean;
  #L1fbd3e.  call `<init>`(v0, v2) @signature `Lh/n0/h/b;.<init>:(Z)V` @kind direct;
  #L1fbd44.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1fbd4a.  v10:= new `h.n0.h.g`;
  #L1fbd4e.  v2:= v11.`h.f0.g` @type ^`okhttp3.internal.connection.j` @kind object;
  #L1fbd52.  v3:= 0I;
  #L1fbd54.  v4:= 0I;
  #L1fbd56.  v5:= v11.`h.f0.h` @type ^`h.g0` @kind object;
  #L1fbd5a.  v0:= v11.`h.f0.f` @type ^`h.d0` @kind object;
  #L1fbd5e.  call temp:= `connectTimeoutMillis`(v0) @signature `Lh/d0;.connectTimeoutMillis:()I` @kind virtual;
  #L1fbd64.  v7:= temp;
  #L1fbd66.  v0:= v11.`h.f0.f` @type ^`h.d0` @kind object;
  #L1fbd6a.  call temp:= `readTimeoutMillis`(v0) @signature `Lh/d0;.readTimeoutMillis:()I` @kind virtual;
  #L1fbd70.  v8:= temp;
  #L1fbd72.  v0:= v11.`h.f0.f` @type ^`h.d0` @kind object;
  #L1fbd76.  call temp:= `writeTimeoutMillis`(v0) @signature `Lh/d0;.writeTimeoutMillis:()I` @kind virtual;
  #L1fbd7c.  v9:= temp;
  #L1fbd7e.  v0:= v10 @kind object;
  #L1fbd80.  v6:= v11 @kind object;
  #L1fbd82.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lh/n0/h/g;.<init>:(Ljava/util/List;Lokhttp3/internal/connection/j;Lokhttp3/internal/connection/d;ILh/g0;Lh/j;III)V` @kind direct;
  #L1fbd88.  v0:= 0I;
  #L1fbd8a.  v1:= 0I;
  #L1fbd8c.  v2:= v11.`h.f0.h` @type ^`h.g0` @kind object;
  #L1fbd90.  call temp:= `proceed`(v10, v2) @signature `Lh/a0$a;.proceed:(Lh/g0;)Lh/i0;` @kind interface;
  #L1fbd96.  v2:= temp @kind object;
  #L1fbd98.  v3:= v11.`h.f0.g` @type ^`okhttp3.internal.connection.j` @kind object;
  #L1fbd9c.  call temp:= `isCanceled`(v3) @signature `Lokhttp3/internal/connection/j;.isCanceled:()Z` @kind virtual;
  #L1fbda2.  v3:= temp;
  #L1fbda4.  if v3 != 0 then goto L1fbdb4;
  #L1fbda8.  v0:= v11.`h.f0.g` @type ^`okhttp3.internal.connection.j` @kind object;
  #L1fbdac.  call temp:= `noMoreExchanges`(v0, v1) @signature `Lokhttp3/internal/connection/j;.noMoreExchanges:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1fbdb2.  return v2 @kind object;
  #L1fbdb4.  call `closeQuietly`(v2) @signature `Lh/n0/e;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L1fbdba.  v2:= new `java.io.IOException`;
  #L1fbdbe.  v3:= "Canceled" @kind object;
  #L1fbdc2.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fbdc8.  throw v2;
  #L1fbdca.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1fbdcc.  goto L1fbde6;
  #L1fbdce.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L1fbdd0.  v2:= 1I;
  #L1fbdd2.  v3:= v11.`h.f0.g` @type ^`okhttp3.internal.connection.j` @kind object;
  #L1fbdd6.  call temp:= `noMoreExchanges`(v3, v0) @signature `Lokhttp3/internal/connection/j;.noMoreExchanges:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1fbddc.  v0:= temp @kind object;
  #L1fbdde.  throw v0;
  #L1fbde0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1fbde2.  v2:= v0 @kind object;
  #L1fbde4.  v0:= 1I;
  #L1fbde6.  if v0 != 0 then goto L1fbdf4;
  #L1fbdea.  v0:= v11.`h.f0.g` @type ^`okhttp3.internal.connection.j` @kind object;
  #L1fbdee.  call temp:= `noMoreExchanges`(v0, v1) @signature `Lokhttp3/internal/connection/j;.noMoreExchanges:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1fbdf4.  throw v2;
  catch `java.io.IOException` @[L1fbd8c..L1fbda4] goto L1fbdce;
  catch `java.lang.Throwable` @[L1fbd8c..L1fbda4] goto L1fbdca;
  catch `java.io.IOException` @[L1fbdb4..L1fbdca] goto L1fbdce;
  catch `java.lang.Throwable` @[L1fbdb4..L1fbdca] goto L1fbdca;
  catch `java.lang.Throwable` @[L1fbdd2..L1fbde0] goto L1fbde0;
}
procedure `java.lang.String` `b`(`h.f0` v1 @kind this) @signature `Lh/f0;.b:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;

  #L1fbaec.  v0:= v1.`h.f0.h` @type ^`h.g0` @kind object;
  #L1fbaf0.  call temp:= `url`(v0) @signature `Lh/g0;.url:()Lh/z;` @kind virtual;
  #L1fbaf6.  v0:= temp @kind object;
  #L1fbaf8.  call temp:= `redact`(v0) @signature `Lh/z;.redact:()Ljava/lang/String;` @kind virtual;
  #L1fbafe.  v0:= temp @kind object;
  #L1fbb00.  return v0 @kind object;
}
procedure `java.lang.String` `c`(`h.f0` v2 @kind this) @signature `Lh/f0;.c:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1fbb14.  v0:= new `java.lang.StringBuilder`;
  #L1fbb18.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1fbb1e.  call temp:= `isCanceled`(v2) @signature `Lh/f0;.isCanceled:()Z` @kind virtual;
  #L1fbb24.  v1:= temp;
  #L1fbb26.  if v1 == 0 then goto L1fbb30;
  #L1fbb2a.  v1:= "canceled " @kind object;
  #L1fbb2e.  goto L1fbb34;
  #L1fbb30.  v1:= "" @kind object;
  #L1fbb34.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fbb3a.  v1:= v2.`h.f0.i` @type ^`boolean` @kind boolean;
  #L1fbb3e.  if v1 == 0 then goto L1fbb48;
  #L1fbb42.  v1:= "web socket" @kind object;
  #L1fbb46.  goto L1fbb4c;
  #L1fbb48.  v1:= "call" @kind object;
  #L1fbb4c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fbb52.  v1:= " to " @kind object;
  #L1fbb56.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fbb5c.  call temp:= `b`(v2) @signature `Lh/f0;.b:()Ljava/lang/String;` @kind virtual;
  #L1fbb62.  v1:= temp @kind object;
  #L1fbb64.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fbb6a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fbb70.  v0:= temp @kind object;
  #L1fbb72.  return v0 @kind object;
}
procedure `void` `cancel`(`h.f0` v1 @kind this) @signature `Lh/f0;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fbe88.  v0:= v1.`h.f0.g` @type ^`okhttp3.internal.connection.j` @kind object;
  #L1fbe8c.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/j;.cancel:()V` @kind virtual;
  #L1fbe92.  return @kind void;
}
procedure `h.f0` `clone`(`h.f0` v3 @kind this) @signature `Lh/f0;.clone:()Lh/f0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1fbb84.  v0:= v3.`h.f0.f` @type ^`h.d0` @kind object;
  #L1fbb88.  v1:= v3.`h.f0.h` @type ^`h.g0` @kind object;
  #L1fbb8c.  v2:= v3.`h.f0.i` @type ^`boolean` @kind boolean;
  #L1fbb90.  call temp:= `a`(v0, v1, v2) @signature `Lh/f0;.a:(Lh/d0;Lh/g0;Z)Lh/f0;` @kind static;
  #L1fbb96.  v0:= temp @kind object;
  #L1fbb98.  return v0 @kind object;
}
procedure `java.lang.Object` `clone`(`h.f0` v1 @kind this) @signature `Lh/f0;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1fbad0.  call temp:= `clone`(v1) @signature `Lh/f0;.clone:()Lh/f0;` @kind virtual;
  #L1fbad6.  v0:= temp @kind object;
  #L1fbad8.  return v0 @kind object;
}
procedure `void` `enqueue`(`h.f0` v2 @kind this, `h.k` v3 @kind object) @signature `Lh/f0;.enqueue:(Lh/k;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fbea4.  @monitorenter v2
  #L1fbea6.  v0:= v2.`h.f0.j` @type ^`boolean` @kind boolean;
  #L1fbeaa.  if v0 != 0 then goto L1fbede;
  #L1fbeae.  v0:= 1I;
  #L1fbeb0.  v2.`h.f0.j` @type ^`boolean` := v0 @kind boolean;
  #L1fbeb4.  @monitorexit v2
  #L1fbeb6.  v0:= v2.`h.f0.g` @type ^`okhttp3.internal.connection.j` @kind object;
  #L1fbeba.  call `callStart`(v0) @signature `Lokhttp3/internal/connection/j;.callStart:()V` @kind virtual;
  #L1fbec0.  v0:= v2.`h.f0.f` @type ^`h.d0` @kind object;
  #L1fbec4.  call temp:= `dispatcher`(v0) @signature `Lh/d0;.dispatcher:()Lh/s;` @kind virtual;
  #L1fbeca.  v0:= temp @kind object;
  #L1fbecc.  v1:= new `h.f0$a`;
  #L1fbed0.  call `<init>`(v1, v2, v3) @signature `Lh/f0$a;.<init>:(Lh/f0;Lh/k;)V` @kind direct;
  #L1fbed6.  call `a`(v0, v1) @signature `Lh/s;.a:(Lh/f0$a;)V` @kind virtual;
  #L1fbedc.  return @kind void;
  #L1fbede.  v3:= new `java.lang.IllegalStateException`;
  #L1fbee2.  v0:= "Already Executed" @kind object;
  #L1fbee6.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fbeec.  throw v3;
  #L1fbeee.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1fbef0.  @monitorexit v2
  #L1fbef2.  throw v3;
  catch `java.lang.Throwable` @[L1fbea6..L1fbeb6] goto L1fbeee;
  catch `java.lang.Throwable` @[L1fbede..L1fbef2] goto L1fbeee;
}
procedure `h.i0` `execute`(`h.f0` v2 @kind this) @signature `Lh/f0;.execute:()Lh/i0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fbbf0.  @monitorenter v2
  #L1fbbf2.  v0:= v2.`h.f0.j` @type ^`boolean` @kind boolean;
  #L1fbbf6.  if v0 != 0 then goto L1fbc5a;
  #L1fbbfa.  v0:= 1I;
  #L1fbbfc.  v2.`h.f0.j` @type ^`boolean` := v0 @kind boolean;
  #L1fbc00.  @monitorexit v2
  #L1fbc02.  v0:= v2.`h.f0.g` @type ^`okhttp3.internal.connection.j` @kind object;
  #L1fbc06.  call `timeoutEnter`(v0) @signature `Lokhttp3/internal/connection/j;.timeoutEnter:()V` @kind virtual;
  #L1fbc0c.  v0:= v2.`h.f0.g` @type ^`okhttp3.internal.connection.j` @kind object;
  #L1fbc10.  call `callStart`(v0) @signature `Lokhttp3/internal/connection/j;.callStart:()V` @kind virtual;
  #L1fbc16.  v0:= v2.`h.f0.f` @type ^`h.d0` @kind object;
  #L1fbc1a.  call temp:= `dispatcher`(v0) @signature `Lh/d0;.dispatcher:()Lh/s;` @kind virtual;
  #L1fbc20.  v0:= temp @kind object;
  #L1fbc22.  call `a`(v0, v2) @signature `Lh/s;.a:(Lh/f0;)V` @kind virtual;
  #L1fbc28.  call temp:= `a`(v2) @signature `Lh/f0;.a:()Lh/i0;` @kind virtual;
  #L1fbc2e.  v0:= temp @kind object;
  #L1fbc30.  v1:= v2.`h.f0.f` @type ^`h.d0` @kind object;
  #L1fbc34.  call temp:= `dispatcher`(v1) @signature `Lh/d0;.dispatcher:()Lh/s;` @kind virtual;
  #L1fbc3a.  v1:= temp @kind object;
  #L1fbc3c.  call `b`(v1, v2) @signature `Lh/s;.b:(Lh/f0;)V` @kind virtual;
  #L1fbc42.  return v0 @kind object;
  #L1fbc44.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1fbc46.  v1:= v2.`h.f0.f` @type ^`h.d0` @kind object;
  #L1fbc4a.  call temp:= `dispatcher`(v1) @signature `Lh/d0;.dispatcher:()Lh/s;` @kind virtual;
  #L1fbc50.  v1:= temp @kind object;
  #L1fbc52.  call `b`(v1, v2) @signature `Lh/s;.b:(Lh/f0;)V` @kind virtual;
  #L1fbc58.  throw v0;
  #L1fbc5a.  v0:= new `java.lang.IllegalStateException`;
  #L1fbc5e.  v1:= "Already Executed" @kind object;
  #L1fbc62.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fbc68.  throw v0;
  #L1fbc6a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1fbc6c.  @monitorexit v2
  #L1fbc6e.  throw v0;
  catch `java.lang.Throwable` @[L1fbbf2..L1fbc02] goto L1fbc6a;
  catch `java.lang.Throwable` @[L1fbc16..L1fbc30] goto L1fbc44;
  catch `java.lang.Throwable` @[L1fbc5a..L1fbc6e] goto L1fbc6a;
}
procedure `boolean` `isCanceled`(`h.f0` v1 @kind this) @signature `Lh/f0;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fbab0.  v0:= v1.`h.f0.g` @type ^`okhttp3.internal.connection.j` @kind object;
  #L1fbab4.  call temp:= `isCanceled`(v0) @signature `Lokhttp3/internal/connection/j;.isCanceled:()Z` @kind virtual;
  #L1fbaba.  v0:= temp;
  #L1fbabc.  return v0;
}
procedure `h.g0` `request`(`h.f0` v1 @kind this) @signature `Lh/f0;.request:()Lh/g0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fbbd8.  v0:= v1.`h.f0.h` @type ^`h.g0` @kind object;
  #L1fbbdc.  return v0 @kind object;
}
procedure `i.a0` `timeout`(`h.f0` v1 @kind this) @signature `Lh/f0;.timeout:()Li/a0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fbe44.  v0:= v1.`h.f0.g` @type ^`okhttp3.internal.connection.j` @kind object;
  #L1fbe48.  call temp:= `timeout`(v0) @signature `Lokhttp3/internal/connection/j;.timeout:()Li/a0;` @kind virtual;
  #L1fbe4e.  v0:= temp @kind object;
  #L1fbe50.  return v0 @kind object;
}
