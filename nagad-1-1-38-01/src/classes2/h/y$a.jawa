record `h.y$a` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `h.y$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`h.y$a` v2 @kind this) @signature `Lh/y$a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1f8260.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f8266.  v0:= new `java.util.ArrayList`;
  #L1f826a.  v1:= 20I;
  #L1f826e.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L1f8274.  v2.`h.y$a.a` @type ^`java.util.List` := v0 @kind object;
  #L1f8278.  return @kind void;
}
procedure `h.y$a` `a`(`h.y$a` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lh/y$a;.a:(Ljava/lang/String;)Lh/y$a;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f811c.  v0:= ":" @kind object;
  #L1f8120.  v1:= 1I;
  #L1f8122.  call temp:= `indexOf`(v5, v0, v1) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;I)I` @kind virtual;
  #L1f8128.  v2:= temp;
  #L1f812a.  v3:= -1I;
  #L1f812c.  if v2 == v3 then goto L1f814c;
  #L1f8130.  v0:= 0I;
  #L1f8132.  call temp:= `substring`(v5, v0, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1f8138.  v0:= temp @kind object;
  #L1f813a.  v2:= v2 + v1 @kind int;
  #L1f813c.  call temp:= `substring`(v5, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L1f8142.  v5:= temp @kind object;
  #L1f8144.  call temp:= `a`(v4, v0, v5) @signature `Lh/y$a;.a:(Ljava/lang/String;Ljava/lang/String;)Lh/y$a;` @kind virtual;
  #L1f814a.  return v4 @kind object;
  #L1f814c.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1f8152.  v0:= temp;
  #L1f8154.  v2:= "" @kind object;
  #L1f8158.  if v0 == 0 then goto L1f816c;
  #L1f815c.  call temp:= `substring`(v5, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L1f8162.  v5:= temp @kind object;
  #L1f8164.  call temp:= `a`(v4, v2, v5) @signature `Lh/y$a;.a:(Ljava/lang/String;Ljava/lang/String;)Lh/y$a;` @kind virtual;
  #L1f816a.  return v4 @kind object;
  #L1f816c.  call temp:= `a`(v4, v2, v5) @signature `Lh/y$a;.a:(Ljava/lang/String;Ljava/lang/String;)Lh/y$a;` @kind virtual;
  #L1f8172.  return v4 @kind object;
}
procedure `h.y$a` `a`(`h.y$a` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lh/y$a;.a:(Ljava/lang/String;Ljava/lang/String;)Lh/y$a;` @AccessFlag  {
    temp;
    v0;

  #L1f8184.  v0:= v1.`h.y$a.a` @type ^`java.util.List` @kind object;
  #L1f8188.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f818e.  v2:= v1.`h.y$a.a` @type ^`java.util.List` @kind object;
  #L1f8192.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L1f8198.  v3:= temp @kind object;
  #L1f819a.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f81a0.  return v1 @kind object;
}
procedure `h.y$a` `add`(`h.y$a` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lh/y$a;.add:(Ljava/lang/String;Ljava/lang/String;)Lh/y$a;` @AccessFlag PUBLIC {
    temp;

  #L1f80bc.  call `a`(v1) @signature `Lh/y;.a:(Ljava/lang/String;)V` @kind static;
  #L1f80c2.  call `a`(v2, v1) @signature `Lh/y;.a:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L1f80c8.  call temp:= `a`(v0, v1, v2) @signature `Lh/y$a;.a:(Ljava/lang/String;Ljava/lang/String;)Lh/y$a;` @kind virtual;
  #L1f80ce.  return v0 @kind object;
}
procedure `h.y$a` `addAll`(`h.y$a` v4 @kind this, `h.y` v5 @kind object) @signature `Lh/y$a;.addAll:(Lh/y;)Lh/y$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f80e0.  call temp:= `size`(v5) @signature `Lh/y;.size:()I` @kind virtual;
  #L1f80e6.  v0:= temp;
  #L1f80e8.  v1:= 0I;
  #L1f80ea.  if v1 >= v0 then goto L1f810a;
  #L1f80ee.  call temp:= `name`(v5, v1) @signature `Lh/y;.name:(I)Ljava/lang/String;` @kind virtual;
  #L1f80f4.  v2:= temp @kind object;
  #L1f80f6.  call temp:= `value`(v5, v1) @signature `Lh/y;.value:(I)Ljava/lang/String;` @kind virtual;
  #L1f80fc.  v3:= temp @kind object;
  #L1f80fe.  call temp:= `a`(v4, v2, v3) @signature `Lh/y$a;.a:(Ljava/lang/String;Ljava/lang/String;)Lh/y$a;` @kind virtual;
  #L1f8104.  v1:= v1 + 1;
  #L1f8108.  goto L1f80ea;
  #L1f810a.  return v4 @kind object;
}
procedure `h.y$a` `addUnsafeNonAscii`(`h.y$a` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lh/y$a;.addUnsafeNonAscii:(Ljava/lang/String;Ljava/lang/String;)Lh/y$a;` @AccessFlag PUBLIC {
    temp;

  #L1f81b4.  call `a`(v1) @signature `Lh/y;.a:(Ljava/lang/String;)V` @kind static;
  #L1f81ba.  call temp:= `a`(v0, v1, v2) @signature `Lh/y$a;.a:(Ljava/lang/String;Ljava/lang/String;)Lh/y$a;` @kind virtual;
  #L1f81c0.  return v0 @kind object;
}
procedure `h.y` `build`(`h.y$a` v1 @kind this) @signature `Lh/y$a;.build:()Lh/y;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f80a0.  v0:= new `h.y`;
  #L1f80a4.  call `<init>`(v0, v1) @signature `Lh/y;.<init>:(Lh/y$a;)V` @kind direct;
  #L1f80aa.  return v0 @kind object;
}
procedure `h.y$a` `removeAll`(`h.y$a` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lh/y$a;.removeAll:(Ljava/lang/String;)Lh/y$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f81d4.  v0:= 0I;
  #L1f81d6.  v1:= v2.`h.y$a.a` @type ^`java.util.List` @kind object;
  #L1f81da.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1f81e0.  v1:= temp;
  #L1f81e2.  if v0 >= v1 then goto L1f8220;
  #L1f81e6.  v1:= v2.`h.y$a.a` @type ^`java.util.List` @kind object;
  #L1f81ea.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1f81f0.  v1:= temp @kind object;
  #L1f81f2.  v1:= (`java.lang.String`) v1 @kind object;
  #L1f81f6.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1f81fc.  v1:= temp;
  #L1f81fe.  if v1 == 0 then goto L1f821a;
  #L1f8202.  v1:= v2.`h.y$a.a` @type ^`java.util.List` @kind object;
  #L1f8206.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1f820c.  v1:= v2.`h.y$a.a` @type ^`java.util.List` @kind object;
  #L1f8210.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1f8216.  v0:= v0 + -2;
  #L1f821a.  v0:= v0 + 2;
  #L1f821e.  goto L1f81d6;
  #L1f8220.  return v2 @kind object;
}
procedure `h.y$a` `set`(`h.y$a` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lh/y$a;.set:(Ljava/lang/String;Ljava/lang/String;)Lh/y$a;` @AccessFlag PUBLIC {
    temp;

  #L1f8234.  call `a`(v1) @signature `Lh/y;.a:(Ljava/lang/String;)V` @kind static;
  #L1f823a.  call `a`(v2, v1) @signature `Lh/y;.a:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L1f8240.  call temp:= `removeAll`(v0, v1) @signature `Lh/y$a;.removeAll:(Ljava/lang/String;)Lh/y$a;` @kind virtual;
  #L1f8246.  call temp:= `a`(v0, v1, v2) @signature `Lh/y$a;.a:(Ljava/lang/String;Ljava/lang/String;)Lh/y$a;` @kind virtual;
  #L1f824c.  return v0 @kind object;
}
