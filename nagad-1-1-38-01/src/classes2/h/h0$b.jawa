record `h.h0$b` @kind class @AccessFlag  extends `h.h0` @kind class {
  `h.b0` `h.h0$b.a` @AccessFlag FINAL_SYNTHETIC;
  `int` `h.h0$b.b` @AccessFlag FINAL_SYNTHETIC;
  `byte`[] `h.h0$b.c` @AccessFlag FINAL_SYNTHETIC;
  `int` `h.h0$b.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`h.h0$b` v0 @kind this, `h.b0` v1 @kind object, `int` v2 , `byte`[] v3 @kind object, `int` v4 ) @signature `Lh/h0$b;.<init>:(Lh/b0;I[BI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1fc3a0.  v0.`h.h0$b.a` @type ^`h.b0` := v1 @kind object;
  #L1fc3a4.  v0.`h.h0$b.b` @type ^`int` := v2;
  #L1fc3a8.  v0.`h.h0$b.c` @type ^`byte`[] := v3 @kind object;
  #L1fc3ac.  v0.`h.h0$b.d` @type ^`int` := v4;
  #L1fc3b0.  call `<init>`(v0) @signature `Lh/h0;.<init>:()V` @kind direct;
  #L1fc3b6.  return @kind void;
}
procedure `long` `contentLength`(`h.h0$b` v2 @kind this) @signature `Lh/h0$b;.contentLength:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fc370.  v0:= v2.`h.h0$b.b` @type ^`int`;
  #L1fc374.  v0:= (`long`) v0 @kind i2l;
  #L1fc376.  return v0 @kind wide;
}
procedure `h.b0` `contentType`(`h.h0$b` v1 @kind this) @signature `Lh/h0$b;.contentType:()Lh/b0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fc388.  v0:= v1.`h.h0$b.a` @type ^`h.b0` @kind object;
  #L1fc38c.  return v0 @kind object;
}
procedure `void` `writeTo`(`h.h0$b` v3 @kind this, `i.f` v4 @kind object) @signature `Lh/h0$b;.writeTo:(Li/f;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1fc3c8.  v0:= v3.`h.h0$b.c` @type ^`byte`[] @kind object;
  #L1fc3cc.  v1:= v3.`h.h0$b.d` @type ^`int`;
  #L1fc3d0.  v2:= v3.`h.h0$b.b` @type ^`int`;
  #L1fc3d4.  call temp:= `write`(v4, v0, v1, v2) @signature `Li/f;.write:([BII)Li/f;` @kind interface;
  #L1fc3da.  return @kind void;
}
