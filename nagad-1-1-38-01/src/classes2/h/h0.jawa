record `h.h0` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`h.h0` v0 @kind this) @signature `Lh/h0;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1fc600.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1fc606.  return @kind void;
}
procedure `h.h0` `create`(`h.b0` v1 @kind object, `i.h` v2 @kind object) @signature `Lh/h0;.create:(Lh/b0;Li/h;)Lh/h0;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1fc5e4.  v0:= new `h.h0$a`;
  #L1fc5e8.  call `<init>`(v0, v1, v2) @signature `Lh/h0$a;.<init>:(Lh/b0;Li/h;)V` @kind direct;
  #L1fc5ee.  return v0 @kind object;
}
procedure `h.h0` `create`(`h.b0` v1 @kind object, `java.io.File` v2 @kind object) @signature `Lh/h0;.create:(Lh/b0;Ljava/io/File;)Lh/h0;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1fc550.  if v2 == 0 then goto L1fc560;
  #L1fc554.  v0:= new `h.h0$c`;
  #L1fc558.  call `<init>`(v0, v1, v2) @signature `Lh/h0$c;.<init>:(Lh/b0;Ljava/io/File;)V` @kind direct;
  #L1fc55e.  return v0 @kind object;
  #L1fc560.  v1:= new `java.lang.NullPointerException`;
  #L1fc564.  v2:= "file == null" @kind object;
  #L1fc568.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fc56e.  throw v1;
}
procedure `h.h0` `create`(`h.b0` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lh/h0;.create:(Lh/b0;Ljava/lang/String;)Lh/h0;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1fc580.  v0:= `@@java.nio.charset.StandardCharsets.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L1fc584.  if v2 == 0 then goto L1fc5c2;
  #L1fc588.  call temp:= `charset`(v2) @signature `Lh/b0;.charset:()Ljava/nio/charset/Charset;` @kind virtual;
  #L1fc58e.  v0:= temp @kind object;
  #L1fc590.  if v0 != 0 then goto L1fc5c2;
  #L1fc594.  v0:= `@@java.nio.charset.StandardCharsets.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L1fc598.  v1:= new `java.lang.StringBuilder`;
  #L1fc59c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1fc5a2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fc5a8.  v2:= "; charset=utf-8" @kind object;
  #L1fc5ac.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fc5b2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fc5b8.  v2:= temp @kind object;
  #L1fc5ba.  call temp:= `parse`(v2) @signature `Lh/b0;.parse:(Ljava/lang/String;)Lh/b0;` @kind static;
  #L1fc5c0.  v2:= temp @kind object;
  #L1fc5c2.  call temp:= `getBytes`(v3, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L1fc5c8.  v3:= temp @kind object;
  #L1fc5ca.  call temp:= `create`(v2, v3) @signature `Lh/h0;.create:(Lh/b0;[B)Lh/h0;` @kind static;
  #L1fc5d0.  v2:= temp @kind object;
  #L1fc5d2.  return v2 @kind object;
}
procedure `h.h0` `create`(`h.b0` v2 @kind object, `byte`[] v3 @kind object) @signature `Lh/h0;.create:(Lh/b0;[B)Lh/h0;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1fc4f0.  v0:= length @variable v3;
  #L1fc4f2.  v1:= 0I;
  #L1fc4f4.  call temp:= `create`(v2, v3, v1, v0) @signature `Lh/h0;.create:(Lh/b0;[BII)Lh/h0;` @kind static;
  #L1fc4fa.  v2:= temp @kind object;
  #L1fc4fc.  return v2 @kind object;
}
procedure `h.h0` `create`(`h.b0` v7 @kind object, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lh/h0;.create:(Lh/b0;[BII)Lh/h0;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1fc510.  if v8 == 0 then goto L1fc52e;
  #L1fc514.  v0:= length @variable v8;
  #L1fc516.  v1:= (`long`) v0 @kind i2l;
  #L1fc518.  v3:= (`long`) v9 @kind i2l;
  #L1fc51a.  v5:= (`long`) v10 @kind i2l;
  #L1fc51c.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lh/n0/e;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1fc522.  v0:= new `h.h0$b`;
  #L1fc526.  call `<init>`(v0, v7, v10, v8, v9) @signature `Lh/h0$b;.<init>:(Lh/b0;I[BI)V` @kind direct;
  #L1fc52c.  return v0 @kind object;
  #L1fc52e.  v7:= new `java.lang.NullPointerException`;
  #L1fc532.  v8:= "content == null" @kind object;
  #L1fc536.  call `<init>`(v7, v8) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fc53c.  throw v7;
}
procedure `long` `contentLength`(`h.h0` v2 @kind this) @signature `Lh/h0;.contentLength:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fc4d8.  v0:= -1L;
  #L1fc4dc.  return v0 @kind wide;
}
procedure `h.b0` `contentType`() @signature `Lh/h0;.contentType:()Lh/b0;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isDuplex`(`h.h0` v1 @kind this) @signature `Lh/h0;.isDuplex:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fc4b0.  v0:= 0I;
  #L1fc4b2.  return v0;
}
procedure `boolean` `isOneShot`(`h.h0` v1 @kind this) @signature `Lh/h0;.isOneShot:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fc4c4.  v0:= 0I;
  #L1fc4c6.  return v0;
}
procedure `void` `writeTo`(`i.f` v0 @kind object) @signature `Lh/h0;.writeTo:(Li/f;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
