record `h.p$a` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `h.p$a.a` @AccessFlag ;
  `java.lang.String`[] `h.p$a.b` @AccessFlag ;
  `java.lang.String`[] `h.p$a.c` @AccessFlag ;
  `boolean` `h.p$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`h.p$a` v1 @kind this, `h.p` v2 @kind object) @signature `Lh/p$a;.<init>:(Lh/p;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1f62cc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f62d2.  v0:= v2.`h.p.a` @type ^`boolean` @kind boolean;
  #L1f62d6.  v1.`h.p$a.a` @type ^`boolean` := v0 @kind boolean;
  #L1f62da.  v0:= v2.`h.p.c` @type ^`java.lang.String`[] @kind object;
  #L1f62de.  v1.`h.p$a.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L1f62e2.  v0:= v2.`h.p.d` @type ^`java.lang.String`[] @kind object;
  #L1f62e6.  v1.`h.p$a.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L1f62ea.  v2:= v2.`h.p.b` @type ^`boolean` @kind boolean;
  #L1f62ee.  v1.`h.p$a.d` @type ^`boolean` := v2 @kind boolean;
  #L1f62f2.  return @kind void;
}
procedure `void` `<init>`(`h.p$a` v0 @kind this, `boolean` v1 ) @signature `Lh/p$a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1f62b0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f62b6.  v0.`h.p$a.a` @type ^`boolean` := v1 @kind boolean;
  #L1f62ba.  return @kind void;
}
procedure `h.p` `build`(`h.p$a` v1 @kind this) @signature `Lh/p$a;.build:()Lh/p;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f6124.  v0:= new `h.p`;
  #L1f6128.  call `<init>`(v0, v1) @signature `Lh/p;.<init>:(Lh/p$a;)V` @kind direct;
  #L1f612e.  return v0 @kind object;
}
procedure `h.p$a` `cipherSuites`(`h.p$a` v3 @kind this, `h.m`[] v4 @kind object) @signature `Lh/p$a;.cipherSuites:([Lh/m;)Lh/p$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1f6190.  v0:= v3.`h.p$a.a` @type ^`boolean` @kind boolean;
  #L1f6194.  if v0 == 0 then goto L1f61c0;
  #L1f6198.  v0:= length @variable v4;
  #L1f619a.  v0:= new `java.lang.String`[v0];
  #L1f619e.  v1:= 0I;
  #L1f61a0.  v2:= length @variable v4;
  #L1f61a2.  if v1 >= v2 then goto L1f61b8;
  #L1f61a6.  v2:= v4[v1] @kind object;
  #L1f61aa.  v2:= v2.`h.m.a` @type ^`java.lang.String` @kind object;
  #L1f61ae.  v0[v1]:= v2 @kind object;
  #L1f61b2.  v1:= v1 + 1;
  #L1f61b6.  goto L1f61a0;
  #L1f61b8.  call temp:= `cipherSuites`(v3, v0) @signature `Lh/p$a;.cipherSuites:([Ljava/lang/String;)Lh/p$a;` @kind virtual;
  #L1f61be.  return v3 @kind object;
  #L1f61c0.  v4:= new `java.lang.IllegalStateException`;
  #L1f61c4.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L1f61c8.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f61ce.  throw v4;
}
procedure `h.p$a` `cipherSuites`(`h.p$a` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lh/p$a;.cipherSuites:([Ljava/lang/String;)Lh/p$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f6140.  v0:= v1.`h.p$a.a` @type ^`boolean` @kind boolean;
  #L1f6144.  if v0 == 0 then goto L1f6170;
  #L1f6148.  v0:= length @variable v2;
  #L1f614a.  if v0 == 0 then goto L1f6160;
  #L1f614e.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1f6154.  v2:= temp @kind object;
  #L1f6156.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L1f615a.  v1.`h.p$a.b` @type ^`java.lang.String`[] := v2 @kind object;
  #L1f615e.  return v1 @kind object;
  #L1f6160.  v2:= new `java.lang.IllegalArgumentException`;
  #L1f6164.  v0:= "At least one cipher suite is required" @kind object;
  #L1f6168.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f616e.  throw v2;
  #L1f6170.  v2:= new `java.lang.IllegalStateException`;
  #L1f6174.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L1f6178.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f617e.  throw v2;
}
procedure `h.p$a` `supportsTlsExtensions`(`h.p$a` v1 @kind this, `boolean` v2 ) @signature `Lh/p$a;.supportsTlsExtensions:(Z)Lh/p$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f61e0.  v0:= v1.`h.p$a.a` @type ^`boolean` @kind boolean;
  #L1f61e4.  if v0 == 0 then goto L1f61ee;
  #L1f61e8.  v1.`h.p$a.d` @type ^`boolean` := v2 @kind boolean;
  #L1f61ec.  return v1 @kind object;
  #L1f61ee.  v2:= new `java.lang.IllegalStateException`;
  #L1f61f2.  v0:= "no TLS extensions for cleartext connections" @kind object;
  #L1f61f6.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f61fc.  throw v2;
}
procedure `h.p$a` `tlsVersions`(`h.p$a` v3 @kind this, `h.l0`[] v4 @kind object) @signature `Lh/p$a;.tlsVersions:([Lh/l0;)Lh/p$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1f6260.  v0:= v3.`h.p$a.a` @type ^`boolean` @kind boolean;
  #L1f6264.  if v0 == 0 then goto L1f6290;
  #L1f6268.  v0:= length @variable v4;
  #L1f626a.  v0:= new `java.lang.String`[v0];
  #L1f626e.  v1:= 0I;
  #L1f6270.  v2:= length @variable v4;
  #L1f6272.  if v1 >= v2 then goto L1f6288;
  #L1f6276.  v2:= v4[v1] @kind object;
  #L1f627a.  v2:= v2.`h.l0.f` @type ^`java.lang.String` @kind object;
  #L1f627e.  v0[v1]:= v2 @kind object;
  #L1f6282.  v1:= v1 + 1;
  #L1f6286.  goto L1f6270;
  #L1f6288.  call temp:= `tlsVersions`(v3, v0) @signature `Lh/p$a;.tlsVersions:([Ljava/lang/String;)Lh/p$a;` @kind virtual;
  #L1f628e.  return v3 @kind object;
  #L1f6290.  v4:= new `java.lang.IllegalStateException`;
  #L1f6294.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L1f6298.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f629e.  throw v4;
}
procedure `h.p$a` `tlsVersions`(`h.p$a` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lh/p$a;.tlsVersions:([Ljava/lang/String;)Lh/p$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f6210.  v0:= v1.`h.p$a.a` @type ^`boolean` @kind boolean;
  #L1f6214.  if v0 == 0 then goto L1f6240;
  #L1f6218.  v0:= length @variable v2;
  #L1f621a.  if v0 == 0 then goto L1f6230;
  #L1f621e.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1f6224.  v2:= temp @kind object;
  #L1f6226.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L1f622a.  v1.`h.p$a.c` @type ^`java.lang.String`[] := v2 @kind object;
  #L1f622e.  return v1 @kind object;
  #L1f6230.  v2:= new `java.lang.IllegalArgumentException`;
  #L1f6234.  v0:= "At least one TLS version is required" @kind object;
  #L1f6238.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f623e.  throw v2;
  #L1f6240.  v2:= new `java.lang.IllegalStateException`;
  #L1f6244.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L1f6248.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f624e.  throw v2;
}
