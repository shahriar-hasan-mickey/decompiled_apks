record `h.i0` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `h.g0` `h.i0.f` @AccessFlag FINAL;
  `h.e0` `h.i0.g` @AccessFlag FINAL;
  `int` `h.i0.h` @AccessFlag FINAL;
  `java.lang.String` `h.i0.i` @AccessFlag FINAL;
  `h.x` `h.i0.j` @AccessFlag FINAL;
  `h.y` `h.i0.k` @AccessFlag FINAL;
  `h.j0` `h.i0.l` @AccessFlag FINAL;
  `h.i0` `h.i0.m` @AccessFlag FINAL;
  `h.i0` `h.i0.n` @AccessFlag FINAL;
  `h.i0` `h.i0.o` @AccessFlag FINAL;
  `long` `h.i0.p` @AccessFlag FINAL;
  `long` `h.i0.q` @AccessFlag FINAL;
  `okhttp3.internal.connection.d` `h.i0.r` @AccessFlag FINAL;
  `h.i` `h.i0.s` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`h.i0` v2 @kind this, `h.i0$a` v3 @kind object) @signature `Lh/i0;.<init>:(Lh/i0$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1fd30c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1fd312.  v0:= v3.`h.i0$a.a` @type ^`h.g0` @kind object;
  #L1fd316.  v2.`h.i0.f` @type ^`h.g0` := v0 @kind object;
  #L1fd31a.  v0:= v3.`h.i0$a.b` @type ^`h.e0` @kind object;
  #L1fd31e.  v2.`h.i0.g` @type ^`h.e0` := v0 @kind object;
  #L1fd322.  v0:= v3.`h.i0$a.c` @type ^`int`;
  #L1fd326.  v2.`h.i0.h` @type ^`int` := v0;
  #L1fd32a.  v0:= v3.`h.i0$a.d` @type ^`java.lang.String` @kind object;
  #L1fd32e.  v2.`h.i0.i` @type ^`java.lang.String` := v0 @kind object;
  #L1fd332.  v0:= v3.`h.i0$a.e` @type ^`h.x` @kind object;
  #L1fd336.  v2.`h.i0.j` @type ^`h.x` := v0 @kind object;
  #L1fd33a.  v0:= v3.`h.i0$a.f` @type ^`h.y$a` @kind object;
  #L1fd33e.  call temp:= `build`(v0) @signature `Lh/y$a;.build:()Lh/y;` @kind virtual;
  #L1fd344.  v0:= temp @kind object;
  #L1fd346.  v2.`h.i0.k` @type ^`h.y` := v0 @kind object;
  #L1fd34a.  v0:= v3.`h.i0$a.g` @type ^`h.j0` @kind object;
  #L1fd34e.  v2.`h.i0.l` @type ^`h.j0` := v0 @kind object;
  #L1fd352.  v0:= v3.`h.i0$a.h` @type ^`h.i0` @kind object;
  #L1fd356.  v2.`h.i0.m` @type ^`h.i0` := v0 @kind object;
  #L1fd35a.  v0:= v3.`h.i0$a.i` @type ^`h.i0` @kind object;
  #L1fd35e.  v2.`h.i0.n` @type ^`h.i0` := v0 @kind object;
  #L1fd362.  v0:= v3.`h.i0$a.j` @type ^`h.i0` @kind object;
  #L1fd366.  v2.`h.i0.o` @type ^`h.i0` := v0 @kind object;
  #L1fd36a.  v0:= v3.`h.i0$a.k` @type ^`long` @kind wide;
  #L1fd36e.  v2.`h.i0.p` @type ^`long` := v0 @kind wide;
  #L1fd372.  v0:= v3.`h.i0$a.l` @type ^`long` @kind wide;
  #L1fd376.  v2.`h.i0.q` @type ^`long` := v0 @kind wide;
  #L1fd37a.  v3:= v3.`h.i0$a.m` @type ^`okhttp3.internal.connection.d` @kind object;
  #L1fd37e.  v2.`h.i0.r` @type ^`okhttp3.internal.connection.d` := v3 @kind object;
  #L1fd382.  return @kind void;
}
procedure `h.j0` `body`(`h.i0` v1 @kind this) @signature `Lh/i0;.body:()Lh/j0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fd2f4.  v0:= v1.`h.i0.l` @type ^`h.j0` @kind object;
  #L1fd2f8.  return v0 @kind object;
}
procedure `h.i` `cacheControl`(`h.i0` v1 @kind this) @signature `Lh/i0;.cacheControl:()Lh/i;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fd204.  v0:= v1.`h.i0.s` @type ^`h.i` @kind object;
  #L1fd208.  if v0 == 0 then goto L1fd20e;
  #L1fd20c.  goto L1fd21e;
  #L1fd20e.  v0:= v1.`h.i0.k` @type ^`h.y` @kind object;
  #L1fd212.  call temp:= `parse`(v0) @signature `Lh/i;.parse:(Lh/y;)Lh/i;` @kind static;
  #L1fd218.  v0:= temp @kind object;
  #L1fd21a.  v1.`h.i0.s` @type ^`h.i` := v0 @kind object;
  #L1fd21e.  return v0 @kind object;
}
procedure `h.i0` `cacheResponse`(`h.i0` v1 @kind this) @signature `Lh/i0;.cacheResponse:()Lh/i0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fd290.  v0:= v1.`h.i0.n` @type ^`h.i0` @kind object;
  #L1fd294.  return v0 @kind object;
}
procedure `void` `close`(`h.i0` v2 @kind this) @signature `Lh/i0;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fd394.  v0:= v2.`h.i0.l` @type ^`h.j0` @kind object;
  #L1fd398.  if v0 == 0 then goto L1fd3a4;
  #L1fd39c.  call `close`(v0) @signature `Lh/j0;.close:()V` @kind virtual;
  #L1fd3a2.  return @kind void;
  #L1fd3a4.  v0:= new `java.lang.IllegalStateException`;
  #L1fd3a8.  v1:= "response is not eligible for a body and must not be closed" @kind object;
  #L1fd3ac.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fd3b2.  throw v0;
}
procedure `int` `code`(`h.i0` v1 @kind this) @signature `Lh/i0;.code:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fd0d8.  v0:= v1.`h.i0.h` @type ^`int`;
  #L1fd0dc.  return v0;
}
procedure `h.x` `handshake`(`h.i0` v1 @kind this) @signature `Lh/i0;.handshake:()Lh/x;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fd230.  v0:= v1.`h.i0.j` @type ^`h.x` @kind object;
  #L1fd234.  return v0 @kind object;
}
procedure `java.lang.String` `header`(`h.i0` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lh/i0;.header:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fd0f0.  v0:= 0I;
  #L1fd0f2.  call temp:= `header`(v1, v2, v0) @signature `Lh/i0;.header:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L1fd0f8.  v2:= temp @kind object;
  #L1fd0fa.  return v2 @kind object;
}
procedure `java.lang.String` `header`(`h.i0` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lh/i0;.header:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fd10c.  v0:= v1.`h.i0.k` @type ^`h.y` @kind object;
  #L1fd110.  call temp:= `get`(v0, v2) @signature `Lh/y;.get:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L1fd116.  v2:= temp @kind object;
  #L1fd118.  if v2 == 0 then goto L1fd11e;
  #L1fd11c.  goto L1fd120;
  #L1fd11e.  v2:= v3 @kind object;
  #L1fd120.  return v2 @kind object;
}
procedure `h.y` `headers`(`h.i0` v1 @kind this) @signature `Lh/i0;.headers:()Lh/y;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fd248.  v0:= v1.`h.i0.k` @type ^`h.y` @kind object;
  #L1fd24c.  return v0 @kind object;
}
procedure `boolean` `isSuccessful`(`h.i0` v2 @kind this) @signature `Lh/i0;.isSuccessful:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fd0ac.  v0:= v2.`h.i0.h` @type ^`int`;
  #L1fd0b0.  v1:= 200I;
  #L1fd0b4.  if v0 < v1 then goto L1fd0c4;
  #L1fd0b8.  v1:= 300I;
  #L1fd0bc.  if v0 >= v1 then goto L1fd0c4;
  #L1fd0c0.  v0:= 1I;
  #L1fd0c2.  goto L1fd0c6;
  #L1fd0c4.  v0:= 0I;
  #L1fd0c6.  return v0;
}
procedure `java.lang.String` `message`(`h.i0` v1 @kind this) @signature `Lh/i0;.message:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fd134.  v0:= v1.`h.i0.i` @type ^`java.lang.String` @kind object;
  #L1fd138.  return v0 @kind object;
}
procedure `h.i0` `networkResponse`(`h.i0` v1 @kind this) @signature `Lh/i0;.networkResponse:()Lh/i0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fd2a8.  v0:= v1.`h.i0.m` @type ^`h.i0` @kind object;
  #L1fd2ac.  return v0 @kind object;
}
procedure `h.i0$a` `newBuilder`(`h.i0` v1 @kind this) @signature `Lh/i0;.newBuilder:()Lh/i0$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fd2d8.  v0:= new `h.i0$a`;
  #L1fd2dc.  call `<init>`(v0, v1) @signature `Lh/i0$a;.<init>:(Lh/i0;)V` @kind direct;
  #L1fd2e2.  return v0 @kind object;
}
procedure `h.i0` `priorResponse`(`h.i0` v1 @kind this) @signature `Lh/i0;.priorResponse:()Lh/i0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fd2c0.  v0:= v1.`h.i0.o` @type ^`h.i0` @kind object;
  #L1fd2c4.  return v0 @kind object;
}
procedure `h.e0` `protocol`(`h.i0` v1 @kind this) @signature `Lh/i0;.protocol:()Lh/e0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fd260.  v0:= v1.`h.i0.g` @type ^`h.e0` @kind object;
  #L1fd264.  return v0 @kind object;
}
procedure `long` `receivedResponseAtMillis`(`h.i0` v2 @kind this) @signature `Lh/i0;.receivedResponseAtMillis:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fd1d4.  v0:= v2.`h.i0.q` @type ^`long` @kind wide;
  #L1fd1d8.  return v0 @kind wide;
}
procedure `h.g0` `request`(`h.i0` v1 @kind this) @signature `Lh/i0;.request:()Lh/g0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fd278.  v0:= v1.`h.i0.f` @type ^`h.g0` @kind object;
  #L1fd27c.  return v0 @kind object;
}
procedure `long` `sentRequestAtMillis`(`h.i0` v2 @kind this) @signature `Lh/i0;.sentRequestAtMillis:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fd1ec.  v0:= v2.`h.i0.p` @type ^`long` @kind wide;
  #L1fd1f0.  return v0 @kind wide;
}
procedure `java.lang.String` `toString`(`h.i0` v2 @kind this) @signature `Lh/i0;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fd14c.  v0:= new `java.lang.StringBuilder`;
  #L1fd150.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1fd156.  v1:= "Response{protocol=" @kind object;
  #L1fd15a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fd160.  v1:= v2.`h.i0.g` @type ^`h.e0` @kind object;
  #L1fd164.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fd16a.  v1:= ", code=" @kind object;
  #L1fd16e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fd174.  v1:= v2.`h.i0.h` @type ^`int`;
  #L1fd178.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fd17e.  v1:= ", message=" @kind object;
  #L1fd182.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fd188.  v1:= v2.`h.i0.i` @type ^`java.lang.String` @kind object;
  #L1fd18c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fd192.  v1:= ", url=" @kind object;
  #L1fd196.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fd19c.  v1:= v2.`h.i0.f` @type ^`h.g0` @kind object;
  #L1fd1a0.  call temp:= `url`(v1) @signature `Lh/g0;.url:()Lh/z;` @kind virtual;
  #L1fd1a6.  v1:= temp @kind object;
  #L1fd1a8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fd1ae.  v1:= 125I;
  #L1fd1b2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fd1b8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fd1be.  v0:= temp @kind object;
  #L1fd1c0.  return v0 @kind object;
}
