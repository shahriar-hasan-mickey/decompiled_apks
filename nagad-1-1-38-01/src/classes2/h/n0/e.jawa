record `h.n0.e` @kind class @AccessFlag PUBLIC_FINAL {
}
global `byte`[] `@@h.n0.e.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String`[] `@@h.n0.e.b` @AccessFlag PUBLIC_STATIC_FINAL;
global `h.y` `@@h.n0.e.c` @AccessFlag PUBLIC_STATIC_FINAL;
global `h.j0` `@@h.n0.e.d` @AccessFlag PUBLIC_STATIC_FINAL;
global `i.q` `@@h.n0.e.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.charset.Charset` `@@h.n0.e.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.charset.Charset` `@@h.n0.e.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.TimeZone` `@@h.n0.e.h` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.Comparator` `@@h.n0.e.i` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.reflect.Method` `@@h.n0.e.j` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@h.n0.e.k` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lh/n0/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1fe748.  v0:= 0I;
  #L1fe74a.  v1:= new `byte`[v0];
  #L1fe74e.  `@@h.n0.e.a` @type ^`byte`[] := v1 @kind object;
  #L1fe752.  v1:= new `java.lang.String`[v0];
  #L1fe756.  `@@h.n0.e.b` @type ^`java.lang.String`[] := v1 @kind object;
  #L1fe75a.  v1:= new `java.lang.String`[v0];
  #L1fe75e.  call temp:= `of`(v1) @signature `Lh/y;.of:([Ljava/lang/String;)Lh/y;` @kind static;
  #L1fe764.  v1:= temp @kind object;
  #L1fe766.  `@@h.n0.e.c` @type ^`h.y` := v1 @kind object;
  #L1fe76a.  v1:= `@@h.n0.e.a` @type ^`byte`[] @kind object;
  #L1fe76e.  v2:= 0I;
  #L1fe770.  call temp:= `create`(v2, v1) @signature `Lh/j0;.create:(Lh/b0;[B)Lh/j0;` @kind static;
  #L1fe776.  v1:= temp @kind object;
  #L1fe778.  `@@h.n0.e.d` @type ^`h.j0` := v1 @kind object;
  #L1fe77c.  v1:= `@@h.n0.e.a` @type ^`byte`[] @kind object;
  #L1fe780.  call temp:= `create`(v2, v1) @signature `Lh/h0;.create:(Lh/b0;[B)Lh/h0;` @kind static;
  #L1fe786.  v1:= 5I;
  #L1fe788.  v1:= new `i.h`[v1];
  #L1fe78c.  v3:= "efbbbf" @kind object;
  #L1fe790.  call temp:= `decodeHex`(v3) @signature `Li/h;.decodeHex:(Ljava/lang/String;)Li/h;` @kind static;
  #L1fe796.  v3:= temp @kind object;
  #L1fe798.  v1[v0]:= v3 @kind object;
  #L1fe79c.  v3:= "feff" @kind object;
  #L1fe7a0.  call temp:= `decodeHex`(v3) @signature `Li/h;.decodeHex:(Ljava/lang/String;)Li/h;` @kind static;
  #L1fe7a6.  v3:= temp @kind object;
  #L1fe7a8.  v4:= 1I;
  #L1fe7aa.  v1[v4]:= v3 @kind object;
  #L1fe7ae.  v3:= "fffe" @kind object;
  #L1fe7b2.  call temp:= `decodeHex`(v3) @signature `Li/h;.decodeHex:(Ljava/lang/String;)Li/h;` @kind static;
  #L1fe7b8.  v3:= temp @kind object;
  #L1fe7ba.  v5:= 2I;
  #L1fe7bc.  v1[v5]:= v3 @kind object;
  #L1fe7c0.  v3:= "0000ffff" @kind object;
  #L1fe7c4.  call temp:= `decodeHex`(v3) @signature `Li/h;.decodeHex:(Ljava/lang/String;)Li/h;` @kind static;
  #L1fe7ca.  v3:= temp @kind object;
  #L1fe7cc.  v5:= 3I;
  #L1fe7ce.  v1[v5]:= v3 @kind object;
  #L1fe7d2.  v3:= "ffff0000" @kind object;
  #L1fe7d6.  call temp:= `decodeHex`(v3) @signature `Li/h;.decodeHex:(Ljava/lang/String;)Li/h;` @kind static;
  #L1fe7dc.  v3:= temp @kind object;
  #L1fe7de.  v5:= 4I;
  #L1fe7e0.  v1[v5]:= v3 @kind object;
  #L1fe7e4.  call temp:= `of`(v1) @signature `Li/q;.of:([Li/h;)Li/q;` @kind static;
  #L1fe7ea.  v1:= temp @kind object;
  #L1fe7ec.  `@@h.n0.e.e` @type ^`i.q` := v1 @kind object;
  #L1fe7f0.  v1:= "UTF-32BE" @kind object;
  #L1fe7f4.  call temp:= `forName`(v1) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L1fe7fa.  v1:= temp @kind object;
  #L1fe7fc.  `@@h.n0.e.f` @type ^`java.nio.charset.Charset` := v1 @kind object;
  #L1fe800.  v1:= "UTF-32LE" @kind object;
  #L1fe804.  call temp:= `forName`(v1) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L1fe80a.  v1:= temp @kind object;
  #L1fe80c.  `@@h.n0.e.g` @type ^`java.nio.charset.Charset` := v1 @kind object;
  #L1fe810.  v1:= "GMT" @kind object;
  #L1fe814.  call temp:= `getTimeZone`(v1) @signature `Ljava/util/TimeZone;.getTimeZone:(Ljava/lang/String;)Ljava/util/TimeZone;` @kind static;
  #L1fe81a.  v1:= temp @kind object;
  #L1fe81c.  `@@h.n0.e.h` @type ^`java.util.TimeZone` := v1 @kind object;
  #L1fe820.  v1:= `@@h.n0.a.f` @type ^`h.n0.a` @kind object;
  #L1fe824.  `@@h.n0.e.i` @type ^`java.util.Comparator` := v1 @kind object;
  #L1fe828.  v1:= constclass @type ^`java.lang.Throwable` @kind object;
  #L1fe82c.  v3:= new `java.lang.Class`[v4];
  #L1fe830.  v4:= constclass @type ^`java.lang.Throwable` @kind object;
  #L1fe834.  v3[v0]:= v4 @kind object;
  #L1fe838.  v0:= "addSuppressed" @kind object;
  #L1fe83c.  call temp:= `getDeclaredMethod`(v1, v0, v3) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L1fe842.  v2:= temp @kind object;
  #L1fe844.  `@@h.n0.e.j` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L1fe848.  v0:= "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([\\d.]+)" @kind object;
  #L1fe84c.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L1fe852.  v0:= temp @kind object;
  #L1fe854.  `@@h.n0.e.k` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L1fe858.  return @kind void;
  catch `java.lang.Exception` @[L1fe828..L1fe838] goto L1fe844;
  catch `java.lang.Exception` @[L1fe83c..L1fe844] goto L1fe844;
}
procedure `java.lang.String` `a`(`byte`[] v8 @kind object) @signature `Lh/n0/e;.a:([B)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1fe1c8.  v0:= 0I;
  #L1fe1ca.  v1:= -1I;
  #L1fe1cc.  v1:= 0I;
  #L1fe1ce.  v2:= -1I;
  #L1fe1d0.  v3:= 0I;
  #L1fe1d2.  v4:= length @variable v8;
  #L1fe1d4.  v5:= 16I;
  #L1fe1d8.  if v1 >= v4 then goto L1fe214;
  #L1fe1dc.  v4:= v1;
  #L1fe1de.  if v4 >= v5 then goto L1fe1fc;
  #L1fe1e2.  v6:= v8[v4] @kind byte;
  #L1fe1e6.  if v6 != 0 then goto L1fe1fc;
  #L1fe1ea.  v6:= v4 + 1;
  #L1fe1ee.  v6:= v8[v6] @kind byte;
  #L1fe1f2.  if v6 != 0 then goto L1fe1fc;
  #L1fe1f6.  v4:= v4 + 2;
  #L1fe1fa.  goto L1fe1de;
  #L1fe1fc.  v5:= v4 - v1 @kind int;
  #L1fe200.  if v5 <= v3 then goto L1fe20e;
  #L1fe204.  v6:= 4I;
  #L1fe206.  if v5 < v6 then goto L1fe20e;
  #L1fe20a.  v2:= v1;
  #L1fe20c.  v3:= v5;
  #L1fe20e.  v1:= v4 + 2;
  #L1fe212.  goto L1fe1d2;
  #L1fe214.  v1:= new `i.e`;
  #L1fe218.  call `<init>`(v1) @signature `Li/e;.<init>:()V` @kind direct;
  #L1fe21e.  v4:= length @variable v8;
  #L1fe220.  if v0 >= v4 then goto L1fe272;
  #L1fe224.  v4:= 58I;
  #L1fe228.  if v0 != v2 then goto L1fe240;
  #L1fe22c.  call temp:= `writeByte`(v1, v4) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L1fe232.  v0:= v0 + v3 @kind int;
  #L1fe234.  if v0 != v5 then goto L1fe21e;
  #L1fe238.  call temp:= `writeByte`(v1, v4) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L1fe23e.  goto L1fe21e;
  #L1fe240.  if v0 <= 0 then goto L1fe24a;
  #L1fe244.  call temp:= `writeByte`(v1, v4) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L1fe24a.  v4:= v8[v0] @kind byte;
  #L1fe24e.  v4:= v4 ^& 255;
  #L1fe252.  v4:= v4 ^< 8;
  #L1fe256.  v6:= v0 + 1;
  #L1fe25a.  v6:= v8[v6] @kind byte;
  #L1fe25e.  v6:= v6 ^& 255;
  #L1fe262.  v4:= v4 ^| v6 @kind int;
  #L1fe264.  v6:= (`long`) v4 @kind i2l;
  #L1fe266.  call temp:= `writeHexadecimalUnsignedLong`(v1, v6) @signature `Li/e;.writeHexadecimalUnsignedLong:(J)Li/e;` @kind virtual;
  #L1fe26c.  v0:= v0 + 2;
  #L1fe270.  goto L1fe21e;
  #L1fe272.  call temp:= `readUtf8`(v1) @signature `Li/e;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L1fe278.  v8:= temp @kind object;
  #L1fe27a.  return v8 @kind object;
}
procedure `java.lang.Thread` `a`(`java.lang.String` v1 @kind object, `boolean` v2 , `java.lang.Runnable` v3 @kind object) @signature `Lh/n0/e;.a:(Ljava/lang/String;ZLjava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L1fe358.  v0:= new `java.lang.Thread`;
  #L1fe35c.  call `<init>`(v0, v3, v1) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L1fe362.  call `setDaemon`(v0, v2) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L1fe368.  return v0 @kind object;
}
procedure `java.net.InetAddress` `a`(`java.lang.String` v10 @kind object, `int` v11 , `int` v12 ) @signature `Lh/n0/e;.a:(Ljava/lang/String;II)Ljava/net/InetAddress;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1fe37c.  v0:= 16I;
  #L1fe380.  v0:= new `byte`[v0];
  #L1fe384.  v1:= -1I;
  #L1fe386.  v2:= 0I;
  #L1fe388.  v3:= 0I;
  #L1fe38a.  v4:= -1I;
  #L1fe38c.  v5:= -1I;
  #L1fe38e.  v6:= 0I;
  #L1fe390.  if v11 >= v12 then goto L1fe472;
  #L1fe394.  v7:= length @variable v0;
  #L1fe396.  if v3 != v7 then goto L1fe39c;
  #L1fe39a.  return v6 @kind object;
  #L1fe39c.  v7:= v11 + 2;
  #L1fe3a0.  if v7 > v12 then goto L1fe3cc;
  #L1fe3a4.  v8:= 2I;
  #L1fe3a6.  v9:= "::" @kind object;
  #L1fe3aa.  call temp:= `regionMatches`(v10, v11, v9, v2, v8) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L1fe3b0.  v8:= temp;
  #L1fe3b2.  if v8 == 0 then goto L1fe3cc;
  #L1fe3b6.  if v4 == v1 then goto L1fe3bc;
  #L1fe3ba.  return v6 @kind object;
  #L1fe3bc.  v3:= v3 + 2;
  #L1fe3c0.  v4:= v3;
  #L1fe3c2.  if v7 != v12 then goto L1fe3c8;
  #L1fe3c6.  goto L1fe472;
  #L1fe3c8.  v5:= v7;
  #L1fe3ca.  goto L1fe414;
  #L1fe3cc.  if v3 == 0 then goto L1fe412;
  #L1fe3d0.  v7:= 1I;
  #L1fe3d2.  v8:= ":" @kind object;
  #L1fe3d6.  call temp:= `regionMatches`(v10, v11, v8, v2, v7) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L1fe3dc.  v8:= temp;
  #L1fe3de.  if v8 == 0 then goto L1fe3e8;
  #L1fe3e2.  v11:= v11 + 1;
  #L1fe3e6.  goto L1fe412;
  #L1fe3e8.  v8:= "." @kind object;
  #L1fe3ec.  call temp:= `regionMatches`(v10, v11, v8, v2, v7) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L1fe3f2.  v11:= temp;
  #L1fe3f4.  if v11 == 0 then goto L1fe410;
  #L1fe3f8.  v11:= v3 + -2;
  #L1fe3fc.  call temp:= `a`(v10, v5, v12, v0, v11) @signature `Lh/n0/e;.a:(Ljava/lang/String;II[BI)Z` @kind static;
  #L1fe402.  v10:= temp;
  #L1fe404.  if v10 != 0 then goto L1fe40a;
  #L1fe408.  return v6 @kind object;
  #L1fe40a.  v3:= v3 + 2;
  #L1fe40e.  goto L1fe472;
  #L1fe410.  return v6 @kind object;
  #L1fe412.  v5:= v11;
  #L1fe414.  v11:= v5;
  #L1fe416.  v7:= 0I;
  #L1fe418.  if v11 >= v12 then goto L1fe43e;
  #L1fe41c.  call temp:= `charAt`(v10, v11) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1fe422.  v8:= temp;
  #L1fe424.  call temp:= `decodeHexDigit`(v8) @signature `Lh/n0/e;.decodeHexDigit:(C)I` @kind static;
  #L1fe42a.  v8:= temp;
  #L1fe42c.  if v8 != v1 then goto L1fe432;
  #L1fe430.  goto L1fe43e;
  #L1fe432.  v7:= v7 ^< 4;
  #L1fe436.  v7:= v7 + v8 @kind int;
  #L1fe438.  v11:= v11 + 1;
  #L1fe43c.  goto L1fe418;
  #L1fe43e.  v8:= v11 - v5 @kind int;
  #L1fe442.  if v8 == 0 then goto L1fe470;
  #L1fe446.  v9:= 4I;
  #L1fe448.  if v8 <= v9 then goto L1fe44e;
  #L1fe44c.  goto L1fe470;
  #L1fe44e.  v6:= v3 + 1;
  #L1fe452.  v8:= v7 ^>> 8;
  #L1fe456.  v8:= v8 ^& 255;
  #L1fe45a.  v8:= (`byte`) v8 @kind i2b;
  #L1fe45c.  v0[v3]:= v8 @kind byte;
  #L1fe460.  v3:= v6 + 1;
  #L1fe464.  v7:= v7 ^& 255;
  #L1fe468.  v7:= (`byte`) v7 @kind i2b;
  #L1fe46a.  v0[v6]:= v7 @kind byte;
  #L1fe46e.  goto L1fe38e;
  #L1fe470.  return v6 @kind object;
  #L1fe472.  v10:= length @variable v0;
  #L1fe474.  if v3 == v10 then goto L1fe498;
  #L1fe478.  if v4 != v1 then goto L1fe47e;
  #L1fe47c.  return v6 @kind object;
  #L1fe47e.  v10:= length @variable v0;
  #L1fe480.  v11:= v3 - v4 @kind int;
  #L1fe484.  v10:= v10 - v11 @kind int;
  #L1fe486.  call `arraycopy`(v0, v4, v0, v10, v11) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1fe48c.  v10:= length @variable v0;
  #L1fe48e.  v10:= v10 - v3 @kind int;
  #L1fe490.  v10:= v10 + v4 @kind int;
  #L1fe492.  call `fill`(v0, v4, v10, v2) @signature `Ljava/util/Arrays;.fill:([BIIB)V` @kind static;
  #L1fe498.  call temp:= `getByAddress`(v0) @signature `Ljava/net/InetAddress;.getByAddress:([B)Ljava/net/InetAddress;` @kind static;
  #L1fe49e.  v10:= temp @kind object;
  #L1fe4a0.  return v10 @kind object;
  #L1fe4a2.  v10:= new `java.lang.AssertionError`;
  #L1fe4a6.  call `<init>`(v10) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1fe4ac.  throw v10;
  catch `java.net.UnknownHostException` @[L1fe498..L1fe4a0] goto L1fe4a2;
}
procedure `boolean` `a`(`java.lang.String` v5 @kind object) @signature `Lh/n0/e;.a:(Ljava/lang/String;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1fd954.  v0:= 0I;
  #L1fd956.  v1:= 0I;
  #L1fd958.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1fd95e.  v2:= temp;
  #L1fd960.  if v1 >= v2 then goto L1fd99c;
  #L1fd964.  call temp:= `charAt`(v5, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1fd96a.  v2:= temp;
  #L1fd96c.  v3:= 31I;
  #L1fd970.  v4:= 1I;
  #L1fd972.  if v2 <= v3 then goto L1fd99a;
  #L1fd976.  v3:= 127I;
  #L1fd97a.  if v2 < v3 then goto L1fd980;
  #L1fd97e.  goto L1fd99a;
  #L1fd980.  v3:= " #%/:?@[\\]" @kind object;
  #L1fd984.  call temp:= `indexOf`(v3, v2) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L1fd98a.  v2:= temp;
  #L1fd98c.  v3:= -1I;
  #L1fd98e.  if v2 == v3 then goto L1fd994;
  #L1fd992.  return v4;
  #L1fd994.  v1:= v1 + 1;
  #L1fd998.  goto L1fd958;
  #L1fd99a.  return v4;
  #L1fd99c.  return v0;
}
procedure `boolean` `a`(`java.lang.String` v7 @kind object, `int` v8 , `int` v9 , `byte`[] v10 @kind object, `int` v11 ) @signature `Lh/n0/e;.a:(Ljava/lang/String;II[BI)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1fd9b0.  v0:= v11;
  #L1fd9b2.  v1:= 0I;
  #L1fd9b4.  if v8 >= v9 then goto L1fda38;
  #L1fd9b8.  v2:= length @variable v10;
  #L1fd9ba.  if v0 != v2 then goto L1fd9c0;
  #L1fd9be.  return v1;
  #L1fd9c0.  if v0 == v11 then goto L1fd9da;
  #L1fd9c4.  call temp:= `charAt`(v7, v8) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1fd9ca.  v2:= temp;
  #L1fd9cc.  v3:= 46I;
  #L1fd9d0.  if v2 == v3 then goto L1fd9d6;
  #L1fd9d4.  return v1;
  #L1fd9d6.  v8:= v8 + 1;
  #L1fd9da.  v2:= v8;
  #L1fd9dc.  v3:= 0I;
  #L1fd9de.  if v2 >= v9 then goto L1fda1e;
  #L1fd9e2.  call temp:= `charAt`(v7, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1fd9e8.  v4:= temp;
  #L1fd9ea.  v5:= 48I;
  #L1fd9ee.  if v4 < v5 then goto L1fda1e;
  #L1fd9f2.  v6:= 57I;
  #L1fd9f6.  if v4 <= v6 then goto L1fd9fc;
  #L1fd9fa.  goto L1fda1e;
  #L1fd9fc.  if v3 != 0 then goto L1fda06;
  #L1fda00.  if v8 == v2 then goto L1fda06;
  #L1fda04.  return v1;
  #L1fda06.  v3:= v3 * 10;
  #L1fda0a.  v3:= v3 + v4 @kind int;
  #L1fda0c.  v3:= v3 - v5 @kind int;
  #L1fda0e.  v4:= 255I;
  #L1fda12.  if v3 <= v4 then goto L1fda18;
  #L1fda16.  return v1;
  #L1fda18.  v2:= v2 + 1;
  #L1fda1c.  goto L1fd9de;
  #L1fda1e.  v8:= v2 - v8 @kind int;
  #L1fda22.  if v8 != 0 then goto L1fda28;
  #L1fda26.  return v1;
  #L1fda28.  v8:= v0 + 1;
  #L1fda2c.  v1:= (`byte`) v3 @kind i2b;
  #L1fda2e.  v10[v0]:= v1 @kind byte;
  #L1fda32.  v0:= v8;
  #L1fda34.  v8:= v2;
  #L1fda36.  goto L1fd9b2;
  #L1fda38.  v11:= v11 + 4;
  #L1fda3c.  if v0 == v11 then goto L1fda42;
  #L1fda40.  return v1;
  #L1fda42.  v7:= 1I;
  #L1fda44.  return v7;
}
procedure `void` `addSuppressedIfPossible`(`java.lang.Throwable` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lh/n0/e;.addSuppressedIfPossible:(Ljava/lang/Throwable;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1fe884.  v0:= `@@h.n0.e.j` @type ^`java.lang.reflect.Method` @kind object;
  #L1fe888.  if v0 == 0 then goto L1fe89e;
  #L1fe88c.  v1:= 1I;
  #L1fe88e.  v1:= new `java.lang.Object`[v1];
  #L1fe892.  v2:= 0I;
  #L1fe894.  v1[v2]:= v4 @kind object;
  #L1fe898.  call temp:= `invoke`(v0, v3, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1fe89e.  return @kind void;
  catch `java.lang.reflect.InvocationTargetException` @[L1fe88e..L1fe89e] goto L1fe89e;
  catch `java.lang.IllegalAccessException` @[L1fe88e..L1fe89e] goto L1fe89e;
}
procedure `java.nio.charset.Charset` `bomAwareCharset`(`i.g` v1 @kind object, `java.nio.charset.Charset` v2 @kind object) @signature `Lh/n0/e;.bomAwareCharset:(Li/g;Ljava/nio/charset/Charset;)Ljava/nio/charset/Charset;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1fe4d0.  v0:= `@@h.n0.e.e` @type ^`i.q` @kind object;
  #L1fe4d4.  call temp:= `select`(v1, v0) @signature `Li/g;.select:(Li/q;)I` @kind interface;
  #L1fe4da.  v1:= temp;
  #L1fe4dc.  v0:= -1I;
  #L1fe4de.  if v1 == v0 then goto L1fe528;
  #L1fe4e2.  if v1 == 0 then goto L1fe522;
  #L1fe4e6.  v2:= 1I;
  #L1fe4e8.  if v1 == v2 then goto L1fe51c;
  #L1fe4ec.  v2:= 2I;
  #L1fe4ee.  if v1 == v2 then goto L1fe516;
  #L1fe4f2.  v2:= 3I;
  #L1fe4f4.  if v1 == v2 then goto L1fe510;
  #L1fe4f8.  v2:= 4I;
  #L1fe4fa.  if v1 != v2 then goto L1fe504;
  #L1fe4fe.  v1:= `@@h.n0.e.g` @type ^`java.nio.charset.Charset` @kind object;
  #L1fe502.  return v1 @kind object;
  #L1fe504.  v1:= new `java.lang.AssertionError`;
  #L1fe508.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1fe50e.  throw v1;
  #L1fe510.  v1:= `@@h.n0.e.f` @type ^`java.nio.charset.Charset` @kind object;
  #L1fe514.  return v1 @kind object;
  #L1fe516.  v1:= `@@java.nio.charset.StandardCharsets.UTF_16LE` @type ^`java.nio.charset.Charset` @kind object;
  #L1fe51a.  return v1 @kind object;
  #L1fe51c.  v1:= `@@java.nio.charset.StandardCharsets.UTF_16BE` @type ^`java.nio.charset.Charset` @kind object;
  #L1fe520.  return v1 @kind object;
  #L1fe522.  v1:= `@@java.nio.charset.StandardCharsets.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L1fe526.  return v1 @kind object;
  #L1fe528.  return v2 @kind object;
}
procedure `java.lang.String` `canonicalizeHost`(`java.lang.String` v4 @kind object) @signature `Lh/n0/e;.canonicalizeHost:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1fdfa4.  v0:= ":" @kind object;
  #L1fdfa8.  call temp:= `contains`(v4, v0) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L1fdfae.  v0:= temp;
  #L1fdfb0.  v1:= 0I;
  #L1fdfb2.  if v0 == 0 then goto L1fe06a;
  #L1fdfb6.  v0:= "[" @kind object;
  #L1fdfba.  call temp:= `startsWith`(v4, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1fdfc0.  v0:= temp;
  #L1fdfc2.  if v0 == 0 then goto L1fdfec;
  #L1fdfc6.  v0:= "]" @kind object;
  #L1fdfca.  call temp:= `endsWith`(v4, v0) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1fdfd0.  v0:= temp;
  #L1fdfd2.  if v0 == 0 then goto L1fdfec;
  #L1fdfd6.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1fdfdc.  v0:= temp;
  #L1fdfde.  v2:= 1I;
  #L1fdfe0.  v0:= v0 - v2 @kind int;
  #L1fdfe2.  call temp:= `a`(v4, v2, v0) @signature `Lh/n0/e;.a:(Ljava/lang/String;II)Ljava/net/InetAddress;` @kind static;
  #L1fdfe8.  v0:= temp @kind object;
  #L1fdfea.  goto L1fdffe;
  #L1fdfec.  v0:= 0I;
  #L1fdfee.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1fdff4.  v2:= temp;
  #L1fdff6.  call temp:= `a`(v4, v0, v2) @signature `Lh/n0/e;.a:(Ljava/lang/String;II)Ljava/net/InetAddress;` @kind static;
  #L1fdffc.  v0:= temp @kind object;
  #L1fdffe.  if v0 != 0 then goto L1fe004;
  #L1fe002.  return v1 @kind object;
  #L1fe004.  call temp:= `getAddress`(v0) @signature `Ljava/net/InetAddress;.getAddress:()[B` @kind virtual;
  #L1fe00a.  v1:= temp @kind object;
  #L1fe00c.  v2:= length @variable v1;
  #L1fe00e.  v3:= 16I;
  #L1fe012.  if v2 != v3 then goto L1fe020;
  #L1fe016.  call temp:= `a`(v1) @signature `Lh/n0/e;.a:([B)Ljava/lang/String;` @kind static;
  #L1fe01c.  v4:= temp @kind object;
  #L1fe01e.  return v4 @kind object;
  #L1fe020.  v1:= length @variable v1;
  #L1fe022.  v2:= 4I;
  #L1fe024.  if v1 != v2 then goto L1fe032;
  #L1fe028.  call temp:= `getHostAddress`(v0) @signature `Ljava/net/InetAddress;.getHostAddress:()Ljava/lang/String;` @kind virtual;
  #L1fe02e.  v4:= temp @kind object;
  #L1fe030.  return v4 @kind object;
  #L1fe032.  v0:= new `java.lang.AssertionError`;
  #L1fe036.  v1:= new `java.lang.StringBuilder`;
  #L1fe03a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1fe040.  v2:= "Invalid IPv6 address: '" @kind object;
  #L1fe044.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fe04a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fe050.  v4:= "'" @kind object;
  #L1fe054.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fe05a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fe060.  v4:= temp @kind object;
  #L1fe062.  call `<init>`(v0, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1fe068.  throw v0;
  #L1fe06a.  call temp:= `toASCII`(v4) @signature `Ljava/net/IDN;.toASCII:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L1fe070.  v4:= temp @kind object;
  #L1fe072.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L1fe076.  call temp:= `toLowerCase`(v4, v0) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L1fe07c.  v4:= temp @kind object;
  #L1fe07e.  call temp:= `isEmpty`(v4) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L1fe084.  v0:= temp;
  #L1fe086.  if v0 == 0 then goto L1fe08c;
  #L1fe08a.  return v1 @kind object;
  #L1fe08c.  call temp:= `a`(v4) @signature `Lh/n0/e;.a:(Ljava/lang/String;)Z` @kind static;
  #L1fe092.  v0:= temp;
  #L1fe094.  if v0 == 0 then goto L1fe09a;
  #L1fe098.  return v1 @kind object;
  #L1fe09a.  return v4 @kind object;
  #L1fe09c.  return v1 @kind object;
  catch `java.lang.IllegalArgumentException` @[L1fe06a..L1fe094] goto L1fe09c;
}
procedure `int` `checkDuration`(`java.lang.String` v5 @kind object, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lh/n0/e;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1fdcec.  v0:= 0L;
  #L1fdcf0.  v2:= lcmp(v6, v0);
  #L1fdcf4.  if v2 < 0 then goto L1fdd90;
  #L1fdcf8.  if v8 == 0 then goto L1fdd80;
  #L1fdcfc.  call temp:= `toMillis`(v8, v6) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L1fdd02.  v6:= temp @kind wide;
  #L1fdd04.  v3:= 2147483647L;
  #L1fdd0a.  v8:= lcmp(v6, v3);
  #L1fdd0e.  if v8 > 0 then goto L1fdd52;
  #L1fdd12.  v8:= lcmp(v6, v0);
  #L1fdd16.  if v8 != 0 then goto L1fdd4e;
  #L1fdd1a.  if v2 > 0 then goto L1fdd20;
  #L1fdd1e.  goto L1fdd4e;
  #L1fdd20.  v6:= new `java.lang.IllegalArgumentException`;
  #L1fdd24.  v7:= new `java.lang.StringBuilder`;
  #L1fdd28.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1fdd2e.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fdd34.  v5:= " too small." @kind object;
  #L1fdd38.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fdd3e.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fdd44.  v5:= temp @kind object;
  #L1fdd46.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fdd4c.  throw v6;
  #L1fdd4e.  v5:= (`int`) v6 @kind l2i;
  #L1fdd50.  return v5;
  #L1fdd52.  v6:= new `java.lang.IllegalArgumentException`;
  #L1fdd56.  v7:= new `java.lang.StringBuilder`;
  #L1fdd5a.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1fdd60.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fdd66.  v5:= " too large." @kind object;
  #L1fdd6a.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fdd70.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fdd76.  v5:= temp @kind object;
  #L1fdd78.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fdd7e.  throw v6;
  #L1fdd80.  v5:= new `java.lang.NullPointerException`;
  #L1fdd84.  v6:= "unit == null" @kind object;
  #L1fdd88.  call `<init>`(v5, v6) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fdd8e.  throw v5;
  #L1fdd90.  v6:= new `java.lang.IllegalArgumentException`;
  #L1fdd94.  v7:= new `java.lang.StringBuilder`;
  #L1fdd98.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1fdd9e.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fdda4.  v5:= " < 0" @kind object;
  #L1fdda8.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fddae.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fddb4.  v5:= temp @kind object;
  #L1fddb6.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fddbc.  throw v6;
}
procedure `void` `checkOffsetAndCount`(`long` v5 , `long` v7 , `long` v9 ) @signature `Lh/n0/e;.checkOffsetAndCount:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1fe8c0.  v0:= v7 ^| v9 @kind long;
  #L1fe8c4.  v2:= 0L;
  #L1fe8c8.  v4:= lcmp(v0, v2);
  #L1fe8cc.  if v4 < 0 then goto L1fe8e4;
  #L1fe8d0.  v0:= lcmp(v7, v5);
  #L1fe8d4.  if v0 > 0 then goto L1fe8e4;
  #L1fe8d8.  v5:= v5 - v7 @kind long;
  #L1fe8da.  v7:= lcmp(v5, v9);
  #L1fe8de.  if v7 < 0 then goto L1fe8e4;
  #L1fe8e2.  return @kind void;
  #L1fe8e4.  v5:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L1fe8e8.  call `<init>`(v5) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L1fe8ee.  throw v5;
}
procedure `void` `closeQuietly`(`java.io.Closeable` v0 @kind object) @signature `Lh/n0/e;.closeQuietly:(Ljava/io/Closeable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1fe900.  if v0 == 0 then goto L1fe910;
  #L1fe904.  call `close`(v0) @signature `Ljava/io/Closeable;.close:()V` @kind interface;
  #L1fe90a.  goto L1fe910;
  #L1fe90c.  v0:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L1fe90e.  throw v0;
  #L1fe910.  return @kind void;
  catch `java.lang.RuntimeException` @[L1fe904..L1fe90a] goto L1fe90c;
  catch `java.lang.Exception` @[L1fe904..L1fe90a] goto L1fe910;
}
procedure `void` `closeQuietly`(`java.net.Socket` v1 @kind object) @signature `Lh/n0/e;.closeQuietly:(Ljava/net/Socket;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1fe934.  if v1 == 0 then goto L1fe956;
  #L1fe938.  call `close`(v1) @signature `Ljava/net/Socket;.close:()V` @kind virtual;
  #L1fe93e.  goto L1fe956;
  #L1fe940.  v1:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L1fe942.  throw v1;
  #L1fe944.  v1:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L1fe946.  call temp:= `isAndroidGetsocknameError`(v1) @signature `Lh/n0/e;.isAndroidGetsocknameError:(Ljava/lang/AssertionError;)Z` @kind static;
  #L1fe94c.  v0:= temp;
  #L1fe94e.  if v0 == 0 then goto L1fe954;
  #L1fe952.  goto L1fe956;
  #L1fe954.  throw v1;
  #L1fe956.  return @kind void;
  catch `java.lang.AssertionError` @[L1fe938..L1fe93e] goto L1fe944;
  catch `java.lang.RuntimeException` @[L1fe938..L1fe93e] goto L1fe940;
  catch `java.lang.Exception` @[L1fe938..L1fe93e] goto L1fe956;
}
procedure `java.lang.String`[] `concat`(`java.lang.String`[] v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lh/n0/e;.concat:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1fe2b8.  v0:= length @variable v3;
  #L1fe2ba.  v0:= v0 + 1;
  #L1fe2be.  v0:= new `java.lang.String`[v0];
  #L1fe2c2.  v1:= length @variable v3;
  #L1fe2c4.  v2:= 0I;
  #L1fe2c6.  call `arraycopy`(v3, v2, v0, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1fe2cc.  v3:= length @variable v0;
  #L1fe2ce.  v3:= v3 + -1;
  #L1fe2d2.  v0[v3]:= v4 @kind object;
  #L1fe2d6.  return v0 @kind object;
}
procedure `int` `decodeHexDigit`(`char` v2 ) @signature `Lh/n0/e;.decodeHexDigit:(C)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1fddd0.  v0:= 48I;
  #L1fddd4.  if v2 < v0 then goto L1fdde4;
  #L1fddd8.  v1:= 57I;
  #L1fdddc.  if v2 > v1 then goto L1fdde4;
  #L1fdde0.  v2:= v2 - v0 @kind int;
  #L1fdde2.  return v2;
  #L1fdde4.  v0:= 97I;
  #L1fdde8.  if v2 < v0 then goto L1fddfc;
  #L1fddec.  v1:= 102I;
  #L1fddf0.  if v2 > v1 then goto L1fddfc;
  #L1fddf4.  v2:= v2 - v0 @kind int;
  #L1fddf6.  v2:= v2 + 10;
  #L1fddfa.  return v2;
  #L1fddfc.  v0:= 65I;
  #L1fde00.  if v2 < v0 then goto L1fde0e;
  #L1fde04.  v1:= 70I;
  #L1fde08.  if v2 > v1 then goto L1fde0e;
  #L1fde0c.  goto L1fddf4;
  #L1fde0e.  v2:= -1I;
  #L1fde10.  return v2;
}
procedure `int` `delimiterOffset`(`java.lang.String` v1 @kind object, `int` v2 , `int` v3 , `char` v4 ) @signature `Lh/n0/e;.delimiterOffset:(Ljava/lang/String;IIC)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1fde24.  if v2 >= v3 then goto L1fde3c;
  #L1fde28.  call temp:= `charAt`(v1, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1fde2e.  v0:= temp;
  #L1fde30.  if v0 != v4 then goto L1fde36;
  #L1fde34.  return v2;
  #L1fde36.  v2:= v2 + 1;
  #L1fde3a.  goto L1fde24;
  #L1fde3c.  return v3;
}
procedure `int` `delimiterOffset`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.lang.String` v5 @kind object) @signature `Lh/n0/e;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1fde50.  if v3 >= v4 then goto L1fde72;
  #L1fde54.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1fde5a.  v0:= temp;
  #L1fde5c.  call temp:= `indexOf`(v5, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L1fde62.  v0:= temp;
  #L1fde64.  v1:= -1I;
  #L1fde66.  if v0 == v1 then goto L1fde6c;
  #L1fde6a.  return v3;
  #L1fde6c.  v3:= v3 + 1;
  #L1fde70.  goto L1fde50;
  #L1fde72.  return v4;
}
procedure `boolean` `discard`(`i.z` v0 @kind object, `int` v1 , `java.util.concurrent.TimeUnit` v2 @kind object) @signature `Lh/n0/e;.discard:(Li/z;ILjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1fda58.  call temp:= `skipAll`(v0, v1, v2) @signature `Lh/n0/e;.skipAll:(Li/z;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L1fda5e.  v0:= temp;
  #L1fda60.  return v0;
  #L1fda62.  v0:= 0I;
  #L1fda64.  return v0;
  catch `java.io.IOException` @[L1fda58..L1fda60] goto L1fda62;
}
procedure `java.lang.String` `format`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lh/n0/e;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1fe0c0.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L1fe0c4.  call temp:= `format`(v0, v1, v2) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1fe0ca.  v1:= temp @kind object;
  #L1fe0cc.  return v1 @kind object;
}
procedure `java.lang.String` `getSystemProperty`(`java.lang.String` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lh/n0/e;.getSystemProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1fe0e0.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L1fe0e6.  v0:= temp @kind object;
  #L1fe0e8.  if v0 == 0 then goto L1fe0ee;
  #L1fe0ec.  goto L1fe0f0;
  #L1fe0ee.  v0:= v1 @kind object;
  #L1fe0f0.  return v0 @kind object;
  #L1fe0f2.  return v1 @kind object;
  catch `java.security.AccessControlException` @[L1fe0e0..L1fe0e8] goto L1fe0f2;
}
procedure `java.lang.String` `hostHeader`(`h.z` v3 @kind object, `boolean` v4 ) @signature `Lh/n0/e;.hostHeader:(Lh/z;Z)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1fe114.  call temp:= `host`(v3) @signature `Lh/z;.host:()Ljava/lang/String;` @kind virtual;
  #L1fe11a.  v0:= temp @kind object;
  #L1fe11c.  v1:= ":" @kind object;
  #L1fe120.  call temp:= `contains`(v0, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L1fe126.  v0:= temp;
  #L1fe128.  if v0 == 0 then goto L1fe162;
  #L1fe12c.  v0:= new `java.lang.StringBuilder`;
  #L1fe130.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1fe136.  v2:= "[" @kind object;
  #L1fe13a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fe140.  call temp:= `host`(v3) @signature `Lh/z;.host:()Ljava/lang/String;` @kind virtual;
  #L1fe146.  v2:= temp @kind object;
  #L1fe148.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fe14e.  v2:= "]" @kind object;
  #L1fe152.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fe158.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fe15e.  v0:= temp @kind object;
  #L1fe160.  goto L1fe16a;
  #L1fe162.  call temp:= `host`(v3) @signature `Lh/z;.host:()Ljava/lang/String;` @kind virtual;
  #L1fe168.  v0:= temp @kind object;
  #L1fe16a.  if v4 != 0 then goto L1fe18a;
  #L1fe16e.  call temp:= `port`(v3) @signature `Lh/z;.port:()I` @kind virtual;
  #L1fe174.  v4:= temp;
  #L1fe176.  call temp:= `scheme`(v3) @signature `Lh/z;.scheme:()Ljava/lang/String;` @kind virtual;
  #L1fe17c.  v2:= temp @kind object;
  #L1fe17e.  call temp:= `defaultPort`(v2) @signature `Lh/z;.defaultPort:(Ljava/lang/String;)I` @kind static;
  #L1fe184.  v2:= temp;
  #L1fe186.  if v4 == v2 then goto L1fe1b6;
  #L1fe18a.  v4:= new `java.lang.StringBuilder`;
  #L1fe18e.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1fe194.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fe19a.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fe1a0.  call temp:= `port`(v3) @signature `Lh/z;.port:()I` @kind virtual;
  #L1fe1a6.  v3:= temp;
  #L1fe1a8.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fe1ae.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fe1b4.  v0:= temp @kind object;
  #L1fe1b6.  return v0 @kind object;
}
procedure `java.util.List` `immutableList`(`java.util.List` v1 @kind object) @signature `Lh/n0/e;.immutableList:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1fe56c.  v0:= new `java.util.ArrayList`;
  #L1fe570.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L1fe576.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1fe57c.  v1:= temp @kind object;
  #L1fe57e.  return v1 @kind object;
}
procedure `java.util.List` `immutableList`(`java.lang.Object`[] v0 @kind object) @signature `Lh/n0/e;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1fe53c.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1fe542.  v0:= temp @kind object;
  #L1fe544.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L1fe548.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L1fe54e.  v0:= temp @kind object;
  #L1fe550.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1fe556.  v0:= temp @kind object;
  #L1fe558.  return v0 @kind object;
}
procedure `java.util.Map` `immutableMap`(`java.util.Map` v1 @kind object) @signature `Lh/n0/e;.immutableMap:(Ljava/util/Map;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1fe5e0.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L1fe5e6.  v0:= temp;
  #L1fe5e8.  if v0 == 0 then goto L1fe5f6;
  #L1fe5ec.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L1fe5f2.  v1:= temp @kind object;
  #L1fe5f4.  goto L1fe608;
  #L1fe5f6.  v0:= new `java.util.LinkedHashMap`;
  #L1fe5fa.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L1fe600.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L1fe606.  v1:= temp @kind object;
  #L1fe608.  return v1 @kind object;
}
procedure `int` `indexOf`(`java.util.Comparator` v3 @kind object, `java.lang.String`[] v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lh/n0/e;.indexOf:(Ljava/util/Comparator;[Ljava/lang/String;Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1fde84.  v0:= length @variable v4;
  #L1fde86.  v1:= 0I;
  #L1fde88.  if v1 >= v0 then goto L1fdea4;
  #L1fde8c.  v2:= v4[v1] @kind object;
  #L1fde90.  call temp:= `compare`(v3, v2, v5) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L1fde96.  v2:= temp;
  #L1fde98.  if v2 != 0 then goto L1fde9e;
  #L1fde9c.  return v1;
  #L1fde9e.  v1:= v1 + 1;
  #L1fdea2.  goto L1fde88;
  #L1fdea4.  v3:= -1I;
  #L1fdea6.  return v3;
}
procedure `int` `indexOfControlOrNonAscii`(`java.lang.String` v4 @kind object) @signature `Lh/n0/e;.indexOfControlOrNonAscii:(Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1fdeb8.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1fdebe.  v0:= temp;
  #L1fdec0.  v1:= 0I;
  #L1fdec2.  if v1 >= v0 then goto L1fdee8;
  #L1fdec6.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1fdecc.  v2:= temp;
  #L1fdece.  v3:= 31I;
  #L1fded2.  if v2 <= v3 then goto L1fdee6;
  #L1fded6.  v3:= 127I;
  #L1fdeda.  if v2 < v3 then goto L1fdee0;
  #L1fdede.  goto L1fdee6;
  #L1fdee0.  v1:= v1 + 1;
  #L1fdee4.  goto L1fdec2;
  #L1fdee6.  return v1;
  #L1fdee8.  v4:= -1I;
  #L1fdeea.  return v4;
}
procedure `java.lang.String`[] `intersect`(`java.util.Comparator` v8 @kind object, `java.lang.String`[] v9 @kind object, `java.lang.String`[] v10 @kind object) @signature `Lh/n0/e;.intersect:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1fe2e8.  v0:= new `java.util.ArrayList`;
  #L1fe2ec.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1fe2f2.  v1:= length @variable v9;
  #L1fe2f4.  v2:= 0I;
  #L1fe2f6.  v3:= 0I;
  #L1fe2f8.  if v3 >= v1 then goto L1fe32c;
  #L1fe2fc.  v4:= v9[v3] @kind object;
  #L1fe300.  v5:= length @variable v10;
  #L1fe302.  v6:= 0I;
  #L1fe304.  if v6 >= v5 then goto L1fe326;
  #L1fe308.  v7:= v10[v6] @kind object;
  #L1fe30c.  call temp:= `compare`(v8, v4, v7) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L1fe312.  v7:= temp;
  #L1fe314.  if v7 != 0 then goto L1fe320;
  #L1fe318.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1fe31e.  goto L1fe326;
  #L1fe320.  v6:= v6 + 1;
  #L1fe324.  goto L1fe304;
  #L1fe326.  v3:= v3 + 1;
  #L1fe32a.  goto L1fe2f8;
  #L1fe32c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1fe332.  v8:= temp;
  #L1fe334.  v8:= new `java.lang.String`[v8];
  #L1fe338.  call temp:= `toArray`(v0, v8) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L1fe33e.  v8:= temp @kind object;
  #L1fe340.  v8:= (`java.lang.String`[]) v8 @kind object;
  #L1fe344.  return v8 @kind object;
}
procedure `boolean` `isAndroidGetsocknameError`(`java.lang.AssertionError` v1 @kind object) @signature `Lh/n0/e;.isAndroidGetsocknameError:(Ljava/lang/AssertionError;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1fda88.  call temp:= `getCause`(v1) @signature `Ljava/lang/AssertionError;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L1fda8e.  v0:= temp @kind object;
  #L1fda90.  if v0 == 0 then goto L1fdabc;
  #L1fda94.  call temp:= `getMessage`(v1) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1fda9a.  v0:= temp @kind object;
  #L1fda9c.  if v0 == 0 then goto L1fdabc;
  #L1fdaa0.  call temp:= `getMessage`(v1) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1fdaa6.  v1:= temp @kind object;
  #L1fdaa8.  v0:= "getsockname failed" @kind object;
  #L1fdaac.  call temp:= `contains`(v1, v0) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L1fdab2.  v1:= temp;
  #L1fdab4.  if v1 == 0 then goto L1fdabc;
  #L1fdab8.  v1:= 1I;
  #L1fdaba.  goto L1fdabe;
  #L1fdabc.  v1:= 0I;
  #L1fdabe.  return v1;
}
procedure `boolean` `nonEmptyIntersection`(`java.util.Comparator` v7 @kind object, `java.lang.String`[] v8 @kind object, `java.lang.String`[] v9 @kind object) @signature `Lh/n0/e;.nonEmptyIntersection:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1fdad0.  v0:= 0I;
  #L1fdad2.  if v8 == 0 then goto L1fdb1c;
  #L1fdad6.  if v9 == 0 then goto L1fdb1c;
  #L1fdada.  v1:= length @variable v8;
  #L1fdadc.  if v1 == 0 then goto L1fdb1c;
  #L1fdae0.  v1:= length @variable v9;
  #L1fdae2.  if v1 != 0 then goto L1fdae8;
  #L1fdae6.  goto L1fdb1c;
  #L1fdae8.  v1:= length @variable v8;
  #L1fdaea.  v2:= 0I;
  #L1fdaec.  if v2 >= v1 then goto L1fdb1c;
  #L1fdaf0.  v3:= v8[v2] @kind object;
  #L1fdaf4.  v4:= length @variable v9;
  #L1fdaf6.  v5:= 0I;
  #L1fdaf8.  if v5 >= v4 then goto L1fdb16;
  #L1fdafc.  v6:= v9[v5] @kind object;
  #L1fdb00.  call temp:= `compare`(v7, v3, v6) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L1fdb06.  v6:= temp;
  #L1fdb08.  if v6 != 0 then goto L1fdb10;
  #L1fdb0c.  v7:= 1I;
  #L1fdb0e.  return v7;
  #L1fdb10.  v5:= v5 + 1;
  #L1fdb14.  goto L1fdaf8;
  #L1fdb16.  v2:= v2 + 1;
  #L1fdb1a.  goto L1fdaec;
  #L1fdb1c.  return v0;
}
procedure `javax.net.ssl.X509TrustManager` `platformTrustManager`() @signature `Lh/n0/e;.platformTrustManager:()Ljavax/net/ssl/X509TrustManager;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1fe638.  call temp:= `getDefaultAlgorithm`() @signature `Ljavax/net/ssl/TrustManagerFactory;.getDefaultAlgorithm:()Ljava/lang/String;` @kind static;
  #L1fe63e.  v0:= temp @kind object;
  #L1fe640.  call temp:= `getInstance`(v0) @signature `Ljavax/net/ssl/TrustManagerFactory;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/TrustManagerFactory;` @kind static;
  #L1fe646.  v0:= temp @kind object;
  #L1fe648.  v1:= 0I;
  #L1fe64a.  call `init`(v0, v1) @signature `Ljavax/net/ssl/TrustManagerFactory;.init:(Ljava/security/KeyStore;)V` @kind virtual;
  #L1fe650.  call temp:= `getTrustManagers`(v0) @signature `Ljavax/net/ssl/TrustManagerFactory;.getTrustManagers:()[Ljavax/net/ssl/TrustManager;` @kind virtual;
  #L1fe656.  v0:= temp @kind object;
  #L1fe658.  v1:= length @variable v0;
  #L1fe65a.  v2:= 1I;
  #L1fe65c.  if v1 != v2 then goto L1fe678;
  #L1fe660.  v1:= 0I;
  #L1fe662.  v2:= v0[v1] @kind object;
  #L1fe666.  v2:= instanceof @variable v2 @type ^`javax.net.ssl.X509TrustManager` @kind boolean;
  #L1fe66a.  if v2 == 0 then goto L1fe678;
  #L1fe66e.  v0:= v0[v1] @kind object;
  #L1fe672.  v0:= (`javax.net.ssl.X509TrustManager`) v0 @kind object;
  #L1fe676.  return v0 @kind object;
  #L1fe678.  v1:= new `java.lang.IllegalStateException`;
  #L1fe67c.  v2:= new `java.lang.StringBuilder`;
  #L1fe680.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1fe686.  v3:= "Unexpected default trust managers:" @kind object;
  #L1fe68a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fe690.  call temp:= `toString`(v0) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1fe696.  v0:= temp @kind object;
  #L1fe698.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fe69e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fe6a4.  v0:= temp @kind object;
  #L1fe6a6.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fe6ac.  throw v1;
  #L1fe6ae.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L1fe6b0.  v1:= new `java.lang.AssertionError`;
  #L1fe6b4.  v2:= "No System TLS" @kind object;
  #L1fe6b8.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L1fe6be.  throw v1;
  catch `java.security.GeneralSecurityException` @[L1fe638..L1fe6ae] goto L1fe6ae;
}
procedure `boolean` `sameConnection`(`h.z` v2 @kind object, `h.z` v3 @kind object) @signature `Lh/n0/e;.sameConnection:(Lh/z;Lh/z;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1fdb30.  call temp:= `host`(v2) @signature `Lh/z;.host:()Ljava/lang/String;` @kind virtual;
  #L1fdb36.  v0:= temp @kind object;
  #L1fdb38.  call temp:= `host`(v3) @signature `Lh/z;.host:()Ljava/lang/String;` @kind virtual;
  #L1fdb3e.  v1:= temp @kind object;
  #L1fdb40.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1fdb46.  v0:= temp;
  #L1fdb48.  if v0 == 0 then goto L1fdb80;
  #L1fdb4c.  call temp:= `port`(v2) @signature `Lh/z;.port:()I` @kind virtual;
  #L1fdb52.  v0:= temp;
  #L1fdb54.  call temp:= `port`(v3) @signature `Lh/z;.port:()I` @kind virtual;
  #L1fdb5a.  v1:= temp;
  #L1fdb5c.  if v0 != v1 then goto L1fdb80;
  #L1fdb60.  call temp:= `scheme`(v2) @signature `Lh/z;.scheme:()Ljava/lang/String;` @kind virtual;
  #L1fdb66.  v2:= temp @kind object;
  #L1fdb68.  call temp:= `scheme`(v3) @signature `Lh/z;.scheme:()Ljava/lang/String;` @kind virtual;
  #L1fdb6e.  v3:= temp @kind object;
  #L1fdb70.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1fdb76.  v2:= temp;
  #L1fdb78.  if v2 == 0 then goto L1fdb80;
  #L1fdb7c.  v2:= 1I;
  #L1fdb7e.  goto L1fdb82;
  #L1fdb80.  v2:= 0I;
  #L1fdb82.  return v2;
}
procedure `boolean` `skipAll`(`i.z` v11 @kind object, `int` v12 , `java.util.concurrent.TimeUnit` v13 @kind object) @signature `Lh/n0/e;.skipAll:(Li/z;ILjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1fdb94.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L1fdb9a.  v0:= temp @kind wide;
  #L1fdb9c.  call temp:= `timeout`(v11) @signature `Li/z;.timeout:()Li/a0;` @kind interface;
  #L1fdba2.  v2:= temp @kind object;
  #L1fdba4.  call temp:= `hasDeadline`(v2) @signature `Li/a0;.hasDeadline:()Z` @kind virtual;
  #L1fdbaa.  v2:= temp;
  #L1fdbac.  v3:= 9223372036854775807L;
  #L1fdbb6.  if v2 == 0 then goto L1fdbce;
  #L1fdbba.  call temp:= `timeout`(v11) @signature `Li/z;.timeout:()Li/a0;` @kind interface;
  #L1fdbc0.  v2:= temp @kind object;
  #L1fdbc2.  call temp:= `deadlineNanoTime`(v2) @signature `Li/a0;.deadlineNanoTime:()J` @kind virtual;
  #L1fdbc8.  v5:= temp @kind wide;
  #L1fdbca.  v5:= v5 - v0 @kind long;
  #L1fdbcc.  goto L1fdbd0;
  #L1fdbce.  v5:= v3 @kind wide;
  #L1fdbd0.  call temp:= `timeout`(v11) @signature `Li/z;.timeout:()Li/a0;` @kind interface;
  #L1fdbd6.  v2:= temp @kind object;
  #L1fdbd8.  v7:= (`long`) v12 @kind i2l;
  #L1fdbda.  call temp:= `toNanos`(v13, v7) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L1fdbe0.  v12:= temp @kind wide;
  #L1fdbe2.  call temp:= `min`(v5, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1fdbe8.  v12:= temp @kind wide;
  #L1fdbea.  v12:= v12 + v0 @kind long;
  #L1fdbec.  call temp:= `deadlineNanoTime`(v2, v12) @signature `Li/a0;.deadlineNanoTime:(J)Li/a0;` @kind virtual;
  #L1fdbf2.  v12:= new `i.e`;
  #L1fdbf6.  call `<init>`(v12) @signature `Li/e;.<init>:()V` @kind direct;
  #L1fdbfc.  v7:= 8192L;
  #L1fdc00.  call temp:= `read`(v11, v12, v7) @signature `Li/z;.read:(Li/e;J)J` @kind interface;
  #L1fdc06.  v7:= temp @kind wide;
  #L1fdc08.  v9:= -1L;
  #L1fdc0c.  v13:= lcmp(v7, v9);
  #L1fdc10.  if v13 == 0 then goto L1fdc1c;
  #L1fdc14.  call `clear`(v12) @signature `Li/e;.clear:()V` @kind virtual;
  #L1fdc1a.  goto L1fdbfc;
  #L1fdc1c.  v12:= 1I;
  #L1fdc1e.  v13:= lcmp(v5, v3);
  #L1fdc22.  if v13 != 0 then goto L1fdc36;
  #L1fdc26.  call temp:= `timeout`(v11) @signature `Li/z;.timeout:()Li/a0;` @kind interface;
  #L1fdc2c.  v11:= temp @kind object;
  #L1fdc2e.  call temp:= `clearDeadline`(v11) @signature `Li/a0;.clearDeadline:()Li/a0;` @kind virtual;
  #L1fdc34.  goto L1fdc46;
  #L1fdc36.  call temp:= `timeout`(v11) @signature `Li/z;.timeout:()Li/a0;` @kind interface;
  #L1fdc3c.  v11:= temp @kind object;
  #L1fdc3e.  v0:= v0 + v5 @kind long;
  #L1fdc40.  call temp:= `deadlineNanoTime`(v11, v0) @signature `Li/a0;.deadlineNanoTime:(J)Li/a0;` @kind virtual;
  #L1fdc46.  return v12;
  #L1fdc48.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1fdc4a.  v13:= lcmp(v5, v3);
  #L1fdc4e.  if v13 != 0 then goto L1fdc62;
  #L1fdc52.  call temp:= `timeout`(v11) @signature `Li/z;.timeout:()Li/a0;` @kind interface;
  #L1fdc58.  v11:= temp @kind object;
  #L1fdc5a.  call temp:= `clearDeadline`(v11) @signature `Li/a0;.clearDeadline:()Li/a0;` @kind virtual;
  #L1fdc60.  goto L1fdc72;
  #L1fdc62.  call temp:= `timeout`(v11) @signature `Li/z;.timeout:()Li/a0;` @kind interface;
  #L1fdc68.  v11:= temp @kind object;
  #L1fdc6a.  v0:= v0 + v5 @kind long;
  #L1fdc6c.  call temp:= `deadlineNanoTime`(v11, v0) @signature `Li/a0;.deadlineNanoTime:(J)Li/a0;` @kind virtual;
  #L1fdc72.  throw v12;
  #L1fdc74.  
  #L1fdc76.  v12:= 0I;
  #L1fdc78.  v13:= lcmp(v5, v3);
  #L1fdc7c.  if v13 != 0 then goto L1fdc90;
  #L1fdc80.  call temp:= `timeout`(v11) @signature `Li/z;.timeout:()Li/a0;` @kind interface;
  #L1fdc86.  v11:= temp @kind object;
  #L1fdc88.  call temp:= `clearDeadline`(v11) @signature `Li/a0;.clearDeadline:()Li/a0;` @kind virtual;
  #L1fdc8e.  goto L1fdca0;
  #L1fdc90.  call temp:= `timeout`(v11) @signature `Li/z;.timeout:()Li/a0;` @kind interface;
  #L1fdc96.  v11:= temp @kind object;
  #L1fdc98.  v0:= v0 + v5 @kind long;
  #L1fdc9a.  call temp:= `deadlineNanoTime`(v11, v0) @signature `Li/a0;.deadlineNanoTime:(J)Li/a0;` @kind virtual;
  #L1fdca0.  return v12;
  catch `java.io.InterruptedIOException` @[L1fdbf2..L1fdc1a] goto L1fdc74;
  catch `java.lang.Throwable` @[L1fdbf2..L1fdc1a] goto L1fdc48;
}
procedure `int` `skipLeadingAsciiWhitespace`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lh/n0/e;.skipLeadingAsciiWhitespace:(Ljava/lang/String;II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1fdefc.  if v3 >= v4 then goto L1fdf38;
  #L1fdf00.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1fdf06.  v0:= temp;
  #L1fdf08.  v1:= 9I;
  #L1fdf0c.  if v0 == v1 then goto L1fdf32;
  #L1fdf10.  v1:= 10I;
  #L1fdf14.  if v0 == v1 then goto L1fdf32;
  #L1fdf18.  v1:= 12I;
  #L1fdf1c.  if v0 == v1 then goto L1fdf32;
  #L1fdf20.  v1:= 13I;
  #L1fdf24.  if v0 == v1 then goto L1fdf32;
  #L1fdf28.  v1:= 32I;
  #L1fdf2c.  if v0 == v1 then goto L1fdf32;
  #L1fdf30.  return v3;
  #L1fdf32.  v3:= v3 + 1;
  #L1fdf36.  goto L1fdefc;
  #L1fdf38.  return v4;
}
procedure `int` `skipTrailingAsciiWhitespace`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lh/n0/e;.skipTrailingAsciiWhitespace:(Ljava/lang/String;II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1fdf4c.  v4:= v4 + -1;
  #L1fdf50.  if v4 < v3 then goto L1fdf90;
  #L1fdf54.  call temp:= `charAt`(v2, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1fdf5a.  v0:= temp;
  #L1fdf5c.  v1:= 9I;
  #L1fdf60.  if v0 == v1 then goto L1fdf8a;
  #L1fdf64.  v1:= 10I;
  #L1fdf68.  if v0 == v1 then goto L1fdf8a;
  #L1fdf6c.  v1:= 12I;
  #L1fdf70.  if v0 == v1 then goto L1fdf8a;
  #L1fdf74.  v1:= 13I;
  #L1fdf78.  if v0 == v1 then goto L1fdf8a;
  #L1fdf7c.  v1:= 32I;
  #L1fdf80.  if v0 == v1 then goto L1fdf8a;
  #L1fdf84.  v4:= v4 + 1;
  #L1fdf88.  return v4;
  #L1fdf8a.  v4:= v4 + -1;
  #L1fdf8e.  goto L1fdf50;
  #L1fdf90.  return v3;
}
procedure `java.util.concurrent.ThreadFactory` `threadFactory`(`java.lang.String` v1 @kind object, `boolean` v2 ) @signature `Lh/n0/e;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1fe61c.  v0:= new `h.n0.b`;
  #L1fe620.  call `<init>`(v0, v1, v2) @signature `Lh/n0/b;.<init>:(Ljava/lang/String;Z)V` @kind direct;
  #L1fe626.  return v0 @kind object;
}
procedure `java.util.List` `toHeaderBlock`(`h.y` v5 @kind object) @signature `Lh/n0/e;.toHeaderBlock:(Lh/y;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1fe590.  v0:= new `java.util.ArrayList`;
  #L1fe594.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1fe59a.  v1:= 0I;
  #L1fe59c.  call temp:= `size`(v5) @signature `Lh/y;.size:()I` @kind virtual;
  #L1fe5a2.  v2:= temp;
  #L1fe5a4.  if v1 >= v2 then goto L1fe5ce;
  #L1fe5a8.  v2:= new `okhttp3.internal.http2.b`;
  #L1fe5ac.  call temp:= `name`(v5, v1) @signature `Lh/y;.name:(I)Ljava/lang/String;` @kind virtual;
  #L1fe5b2.  v3:= temp @kind object;
  #L1fe5b4.  call temp:= `value`(v5, v1) @signature `Lh/y;.value:(I)Ljava/lang/String;` @kind virtual;
  #L1fe5ba.  v4:= temp @kind object;
  #L1fe5bc.  call `<init>`(v2, v3, v4) @signature `Lokhttp3/internal/http2/b;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L1fe5c2.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1fe5c8.  v1:= v1 + 1;
  #L1fe5cc.  goto L1fe59c;
  #L1fe5ce.  return v0 @kind object;
}
procedure `h.y` `toHeaders`(`java.util.List` v4 @kind object) @signature `Lh/n0/e;.toHeaders:(Ljava/util/List;)Lh/y;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1fe6e0.  v0:= new `h.y$a`;
  #L1fe6e4.  call `<init>`(v0) @signature `Lh/y$a;.<init>:()V` @kind direct;
  #L1fe6ea.  call temp:= `iterator`(v4) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1fe6f0.  v4:= temp @kind object;
  #L1fe6f2.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1fe6f8.  v1:= temp;
  #L1fe6fa.  if v1 == 0 then goto L1fe72e;
  #L1fe6fe.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1fe704.  v1:= temp @kind object;
  #L1fe706.  v1:= (`okhttp3.internal.http2.b`) v1 @kind object;
  #L1fe70a.  v2:= `@@h.n0.c.a` @type ^`h.n0.c` @kind object;
  #L1fe70e.  v3:= v1.`okhttp3.internal.http2.b.a` @type ^`i.h` @kind object;
  #L1fe712.  call temp:= `utf8`(v3) @signature `Li/h;.utf8:()Ljava/lang/String;` @kind virtual;
  #L1fe718.  v3:= temp @kind object;
  #L1fe71a.  v1:= v1.`okhttp3.internal.http2.b.b` @type ^`i.h` @kind object;
  #L1fe71e.  call temp:= `utf8`(v1) @signature `Li/h;.utf8:()Ljava/lang/String;` @kind virtual;
  #L1fe724.  v1:= temp @kind object;
  #L1fe726.  call `addLenient`(v2, v0, v3, v1) @signature `Lh/n0/c;.addLenient:(Lh/y$a;Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L1fe72c.  goto L1fe6f2;
  #L1fe72e.  call temp:= `build`(v0) @signature `Lh/y$a;.build:()Lh/y;` @kind virtual;
  #L1fe734.  v4:= temp @kind object;
  #L1fe736.  return v4 @kind object;
}
procedure `java.lang.String` `trimSubstring`(`java.lang.String` v0 @kind object, `int` v1 , `int` v2 ) @signature `Lh/n0/e;.trimSubstring:(Ljava/lang/String;II)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1fe28c.  call temp:= `skipLeadingAsciiWhitespace`(v0, v1, v2) @signature `Lh/n0/e;.skipLeadingAsciiWhitespace:(Ljava/lang/String;II)I` @kind static;
  #L1fe292.  v1:= temp;
  #L1fe294.  call temp:= `skipTrailingAsciiWhitespace`(v0, v1, v2) @signature `Lh/n0/e;.skipTrailingAsciiWhitespace:(Ljava/lang/String;II)I` @kind static;
  #L1fe29a.  v2:= temp;
  #L1fe29c.  call temp:= `substring`(v0, v1, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1fe2a2.  v0:= temp @kind object;
  #L1fe2a4.  return v0 @kind object;
}
procedure `boolean` `verifyAsIpAddress`(`java.lang.String` v1 @kind object) @signature `Lh/n0/e;.verifyAsIpAddress:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1fdcc4.  v0:= `@@h.n0.e.k` @type ^`java.util.regex.Pattern` @kind object;
  #L1fdcc8.  call temp:= `matcher`(v0, v1) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L1fdcce.  v1:= temp @kind object;
  #L1fdcd0.  call temp:= `matches`(v1) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L1fdcd6.  v1:= temp;
  #L1fdcd8.  return v1;
}
