record `h.n0.j.e` @kind class @AccessFlag FINAL extends `h.n0.j.f` @kind class {
  `java.lang.reflect.Method` `h.n0.j.e.c` @AccessFlag FINAL;
  `java.lang.reflect.Method` `h.n0.j.e.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`h.n0.j.e` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object) @signature `Lh/n0/j/e;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L20d060.  call `<init>`(v0) @signature `Lh/n0/j/f;.<init>:()V` @kind direct;
  #L20d066.  v0.`h.n0.j.e.c` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L20d06a.  v0.`h.n0.j.e.d` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L20d06e.  return @kind void;
}
procedure `h.n0.j.e` `buildIfSupported`() @signature `Lh/n0/j/e;.buildIfSupported:()Lh/n0/j/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L20cfec.  v0:= constclass @type ^`javax.net.ssl.SSLParameters` @kind object;
  #L20cff0.  v1:= 1I;
  #L20cff2.  v1:= new `java.lang.Class`[v1];
  #L20cff6.  v2:= constclass @type ^`java.lang.String`[] @kind object;
  #L20cffa.  v3:= 0I;
  #L20cffc.  v1[v3]:= v2 @kind object;
  #L20d000.  v2:= "setApplicationProtocols" @kind object;
  #L20d004.  call temp:= `getMethod`(v0, v2, v1) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L20d00a.  v0:= temp @kind object;
  #L20d00c.  v1:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L20d010.  v2:= new `java.lang.Class`[v3];
  #L20d014.  v3:= "getApplicationProtocol" @kind object;
  #L20d018.  call temp:= `getMethod`(v1, v3, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L20d01e.  v1:= temp @kind object;
  #L20d020.  v2:= new `h.n0.j.e`;
  #L20d024.  call `<init>`(v2, v0, v1) @signature `Lh/n0/j/e;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @kind direct;
  #L20d02a.  return v2 @kind object;
  #L20d02c.  v0:= 0I;
  #L20d02e.  return v0 @kind object;
  catch `java.lang.NoSuchMethodException` @[L20cfec..L20d000] goto L20d02c;
  catch `java.lang.NoSuchMethodException` @[L20d004..L20d014] goto L20d02c;
  catch `java.lang.NoSuchMethodException` @[L20d018..L20d02a] goto L20d02c;
}
procedure `void` `configureTlsExtensions`(`h.n0.j.e` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object, `java.lang.String` v6 @kind object, `java.util.List` v7 @kind object) @signature `Lh/n0/j/e;.configureTlsExtensions:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L20d080.  call temp:= `getSSLParameters`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getSSLParameters:()Ljavax/net/ssl/SSLParameters;` @kind virtual;
  #L20d086.  v6:= temp @kind object;
  #L20d088.  call temp:= `alpnProtocolNames`(v7) @signature `Lh/n0/j/f;.alpnProtocolNames:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L20d08e.  v7:= temp @kind object;
  #L20d090.  v0:= v4.`h.n0.j.e.c` @type ^`java.lang.reflect.Method` @kind object;
  #L20d094.  v1:= 1I;
  #L20d096.  v1:= new `java.lang.Object`[v1];
  #L20d09a.  v2:= 0I;
  #L20d09c.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L20d0a2.  v3:= temp;
  #L20d0a4.  v3:= new `java.lang.String`[v3];
  #L20d0a8.  call temp:= `toArray`(v7, v3) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L20d0ae.  v7:= temp @kind object;
  #L20d0b0.  v1[v2]:= v7 @kind object;
  #L20d0b4.  call temp:= `invoke`(v0, v6, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L20d0ba.  call `setSSLParameters`(v5, v6) @signature `Ljavax/net/ssl/SSLSocket;.setSSLParameters:(Ljavax/net/ssl/SSLParameters;)V` @kind virtual;
  #L20d0c0.  return @kind void;
  #L20d0c2.  v5:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L20d0c4.  goto L20d0c8;
  #L20d0c6.  v5:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L20d0c8.  v6:= new `java.lang.AssertionError`;
  #L20d0cc.  v7:= "failed to set SSL parameters" @kind object;
  #L20d0d0.  call `<init>`(v6, v7, v5) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L20d0d6.  throw v6;
  catch `java.lang.IllegalAccessException` @[L20d080..L20d0c0] goto L20d0c6;
  catch `java.lang.reflect.InvocationTargetException` @[L20d080..L20d0c0] goto L20d0c2;
}
procedure `java.lang.String` `getSelectedProtocol`(`h.n0.j.e` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `Lh/n0/j/e;.getSelectedProtocol:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L20cf48.  v0:= "failed to get ALPN selected protocol" @kind object;
  #L20cf4c.  v1:= 0I;
  #L20cf4e.  v2:= v4.`h.n0.j.e.d` @type ^`java.lang.reflect.Method` @kind object;
  #L20cf52.  v3:= 0I;
  #L20cf54.  v3:= new `java.lang.Object`[v3];
  #L20cf58.  call temp:= `invoke`(v2, v5, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L20cf5e.  v5:= temp @kind object;
  #L20cf60.  v5:= (`java.lang.String`) v5 @kind object;
  #L20cf64.  if v5 == 0 then goto L20cf7c;
  #L20cf68.  v2:= "" @kind object;
  #L20cf6c.  call temp:= `equals`(v5, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L20cf72.  v0:= temp;
  #L20cf74.  if v0 == 0 then goto L20cf7a;
  #L20cf78.  goto L20cf7c;
  #L20cf7a.  return v5 @kind object;
  #L20cf7c.  return v1 @kind object;
  #L20cf7e.  v5:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L20cf80.  v1:= new `java.lang.AssertionError`;
  #L20cf84.  call `<init>`(v1, v0, v5) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L20cf8a.  throw v1;
  #L20cf8c.  v5:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L20cf8e.  call temp:= `getCause`(v5) @signature `Ljava/lang/reflect/InvocationTargetException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L20cf94.  v2:= temp @kind object;
  #L20cf96.  v2:= instanceof @variable v2 @type ^`java.lang.UnsupportedOperationException` @kind boolean;
  #L20cf9a.  if v2 == 0 then goto L20cfa0;
  #L20cf9e.  return v1 @kind object;
  #L20cfa0.  v1:= new `java.lang.AssertionError`;
  #L20cfa4.  call `<init>`(v1, v0, v5) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L20cfaa.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[L20cf4e..L20cf74] goto L20cf8c;
  catch `java.lang.IllegalAccessException` @[L20cf4e..L20cf74] goto L20cf7e;
}
procedure `javax.net.ssl.X509TrustManager` `trustManager`(`h.n0.j.e` v1 @kind this, `javax.net.ssl.SSLSocketFactory` v2 @kind object) @signature `Lh/n0/j/e;.trustManager:(Ljavax/net/ssl/SSLSocketFactory;)Ljavax/net/ssl/X509TrustManager;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20cfcc.  v2:= new `java.lang.UnsupportedOperationException`;
  #L20cfd0.  v0:= "clientBuilder.sslSocketFactory(SSLSocketFactory) not supported on JDK 9+" @kind object;
  #L20cfd4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20cfda.  throw v2;
}
