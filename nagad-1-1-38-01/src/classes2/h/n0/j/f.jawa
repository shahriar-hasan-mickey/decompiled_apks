record `h.n0.j.f` @kind class @AccessFlag PUBLIC {
}
global `h.n0.j.f` `@@h.n0.j.f.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.logging.Logger` `@@h.n0.j.f.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lh/n0/j/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L20d598.  call temp:= `c`() @signature `Lh/n0/j/f;.c:()Lh/n0/j/f;` @kind static;
  #L20d59e.  v0:= temp @kind object;
  #L20d5a0.  `@@h.n0.j.f.a` @type ^`h.n0.j.f` := v0 @kind object;
  #L20d5a4.  v0:= constclass @type ^`h.d0` @kind object;
  #L20d5a8.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L20d5ae.  v0:= temp @kind object;
  #L20d5b0.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L20d5b6.  v0:= temp @kind object;
  #L20d5b8.  `@@h.n0.j.f.b` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L20d5bc.  return @kind void;
}
procedure `void` `<init>`(`h.n0.j.f` v0 @kind this) @signature `Lh/n0/j/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L20d5d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L20d5d6.  return @kind void;
}
procedure `h.n0.j.f` `a`() @signature `Lh/n0/j/f;.a:()Lh/n0/j/f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L20d404.  call temp:= `buildIfSupported`() @signature `Lh/n0/j/a;.buildIfSupported:()Lh/n0/j/f;` @kind static;
  #L20d40a.  v0:= temp @kind object;
  #L20d40c.  if v0 == 0 then goto L20d412;
  #L20d410.  return v0 @kind object;
  #L20d412.  call temp:= `buildIfSupported`() @signature `Lh/n0/j/b;.buildIfSupported:()Lh/n0/j/f;` @kind static;
  #L20d418.  v0:= temp @kind object;
  #L20d41a.  if v0 == 0 then goto L20d420;
  #L20d41e.  return v0 @kind object;
  #L20d420.  v0:= new `java.lang.NullPointerException`;
  #L20d424.  v1:= "No platform found on Android" @kind object;
  #L20d428.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20d42e.  throw v0;
}
procedure `java.lang.Object` `a`(`java.lang.Object` v5 @kind object, `java.lang.Class` v6 @kind object, `java.lang.String` v7 @kind object) @signature `Lh/n0/j/f;.a:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L20d238.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L20d23c.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L20d242.  v1:= temp @kind object;
  #L20d244.  v2:= 0I;
  #L20d246.  if v1 == v0 then goto L20d290;
  #L20d24a.  call temp:= `getDeclaredField`(v1, v7) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L20d250.  v3:= temp @kind object;
  #L20d252.  v4:= 1I;
  #L20d254.  call `setAccessible`(v3, v4) @signature `Ljava/lang/reflect/Field;.setAccessible:(Z)V` @kind virtual;
  #L20d25a.  call temp:= `get`(v3, v5) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L20d260.  v3:= temp @kind object;
  #L20d262.  call temp:= `isInstance`(v6, v3) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L20d268.  v4:= temp;
  #L20d26a.  if v4 != 0 then goto L20d270;
  #L20d26e.  return v2 @kind object;
  #L20d270.  call temp:= `cast`(v6, v3) @signature `Ljava/lang/Class;.cast:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L20d276.  v5:= temp @kind object;
  #L20d278.  return v5 @kind object;
  #L20d27a.  v5:= new `java.lang.AssertionError`;
  #L20d27e.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L20d284.  throw v5;
  #L20d286.  call temp:= `getSuperclass`(v1) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L20d28c.  v1:= temp @kind object;
  #L20d28e.  goto L20d244;
  #L20d290.  v1:= "delegate" @kind object;
  #L20d294.  call temp:= `equals`(v7, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L20d29a.  v3:= temp;
  #L20d29c.  if v3 != 0 then goto L20d2b6;
  #L20d2a0.  call temp:= `a`(v5, v0, v1) @signature `Lh/n0/j/f;.a:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L20d2a6.  v5:= temp @kind object;
  #L20d2a8.  if v5 == 0 then goto L20d2b6;
  #L20d2ac.  call temp:= `a`(v5, v6, v7) @signature `Lh/n0/j/f;.a:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L20d2b2.  v5:= temp @kind object;
  #L20d2b4.  return v5 @kind object;
  #L20d2b6.  return v2 @kind object;
  catch `java.lang.NoSuchFieldException` @[L20d24a..L20d278] goto L20d286;
  catch `java.lang.IllegalAccessException` @[L20d24a..L20d278] goto L20d27a;
}
procedure `byte`[] `a`(`java.util.List` v5 @kind object) @signature `Lh/n0/j/f;.a:(Ljava/util/List;)[B` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L20d190.  v0:= new `i.e`;
  #L20d194.  call `<init>`(v0) @signature `Li/e;.<init>:()V` @kind direct;
  #L20d19a.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L20d1a0.  v1:= temp;
  #L20d1a2.  v2:= 0I;
  #L20d1a4.  if v2 >= v1 then goto L20d1e8;
  #L20d1a8.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L20d1ae.  v3:= temp @kind object;
  #L20d1b0.  v3:= (`h.e0`) v3 @kind object;
  #L20d1b4.  v4:= `@@h.e0.g` @type ^`h.e0` @kind object;
  #L20d1b8.  if v3 != v4 then goto L20d1be;
  #L20d1bc.  goto L20d1e2;
  #L20d1be.  call temp:= `toString`(v3) @signature `Lh/e0;.toString:()Ljava/lang/String;` @kind virtual;
  #L20d1c4.  v4:= temp @kind object;
  #L20d1c6.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L20d1cc.  v4:= temp;
  #L20d1ce.  call temp:= `writeByte`(v0, v4) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L20d1d4.  call temp:= `toString`(v3) @signature `Lh/e0;.toString:()Ljava/lang/String;` @kind virtual;
  #L20d1da.  v3:= temp @kind object;
  #L20d1dc.  call temp:= `writeUtf8`(v0, v3) @signature `Li/e;.writeUtf8:(Ljava/lang/String;)Li/e;` @kind virtual;
  #L20d1e2.  v2:= v2 + 1;
  #L20d1e6.  goto L20d1a4;
  #L20d1e8.  call temp:= `readByteArray`(v0) @signature `Li/e;.readByteArray:()[B` @kind virtual;
  #L20d1ee.  v5:= temp @kind object;
  #L20d1f0.  return v5 @kind object;
}
procedure `java.util.List` `alpnProtocolNames`(`java.util.List` v5 @kind object) @signature `Lh/n0/j/f;.alpnProtocolNames:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L20d310.  v0:= new `java.util.ArrayList`;
  #L20d314.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L20d31a.  v1:= temp;
  #L20d31c.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L20d322.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L20d328.  v1:= temp;
  #L20d32a.  v2:= 0I;
  #L20d32c.  if v2 >= v1 then goto L20d35a;
  #L20d330.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L20d336.  v3:= temp @kind object;
  #L20d338.  v3:= (`h.e0`) v3 @kind object;
  #L20d33c.  v4:= `@@h.e0.g` @type ^`h.e0` @kind object;
  #L20d340.  if v3 != v4 then goto L20d346;
  #L20d344.  goto L20d354;
  #L20d346.  call temp:= `toString`(v3) @signature `Lh/e0;.toString:()Ljava/lang/String;` @kind virtual;
  #L20d34c.  v3:= temp @kind object;
  #L20d34e.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L20d354.  v2:= v2 + 1;
  #L20d358.  goto L20d32c;
  #L20d35a.  return v0 @kind object;
}
procedure `h.n0.j.f` `b`() @signature `Lh/n0/j/f;.b:()Lh/n0/j/f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L20d440.  call temp:= `isConscryptPreferred`() @signature `Lh/n0/j/f;.isConscryptPreferred:()Z` @kind static;
  #L20d446.  v0:= temp;
  #L20d448.  if v0 == 0 then goto L20d45a;
  #L20d44c.  call temp:= `buildIfSupported`() @signature `Lh/n0/j/c;.buildIfSupported:()Lh/n0/j/c;` @kind static;
  #L20d452.  v0:= temp @kind object;
  #L20d454.  if v0 == 0 then goto L20d45a;
  #L20d458.  return v0 @kind object;
  #L20d45a.  call temp:= `buildIfSupported`() @signature `Lh/n0/j/e;.buildIfSupported:()Lh/n0/j/e;` @kind static;
  #L20d460.  v0:= temp @kind object;
  #L20d462.  if v0 == 0 then goto L20d468;
  #L20d466.  return v0 @kind object;
  #L20d468.  call temp:= `buildIfSupported`() @signature `Lh/n0/j/d;.buildIfSupported:()Lh/n0/j/f;` @kind static;
  #L20d46e.  v0:= temp @kind object;
  #L20d470.  if v0 == 0 then goto L20d476;
  #L20d474.  return v0 @kind object;
  #L20d476.  v0:= new `h.n0.j.f`;
  #L20d47a.  call `<init>`(v0) @signature `Lh/n0/j/f;.<init>:()V` @kind direct;
  #L20d480.  return v0 @kind object;
}
procedure `h.n0.j.f` `c`() @signature `Lh/n0/j/f;.c:()Lh/n0/j/f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L20d494.  call temp:= `isAndroid`() @signature `Lh/n0/j/f;.isAndroid:()Z` @kind static;
  #L20d49a.  v0:= temp;
  #L20d49c.  if v0 == 0 then goto L20d4aa;
  #L20d4a0.  call temp:= `a`() @signature `Lh/n0/j/f;.a:()Lh/n0/j/f;` @kind static;
  #L20d4a6.  v0:= temp @kind object;
  #L20d4a8.  return v0 @kind object;
  #L20d4aa.  call temp:= `b`() @signature `Lh/n0/j/f;.b:()Lh/n0/j/f;` @kind static;
  #L20d4b0.  v0:= temp @kind object;
  #L20d4b2.  return v0 @kind object;
}
procedure `h.n0.j.f` `get`() @signature `Lh/n0/j/f;.get:()Lh/n0/j/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L20d4c4.  v0:= `@@h.n0.j.f.a` @type ^`h.n0.j.f` @kind object;
  #L20d4c8.  return v0 @kind object;
}
procedure `boolean` `isAndroid`() @signature `Lh/n0/j/f;.isAndroid:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L20d0f8.  v0:= "java.vm.name" @kind object;
  #L20d0fc.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L20d102.  v0:= temp @kind object;
  #L20d104.  v1:= "Dalvik" @kind object;
  #L20d108.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L20d10e.  v0:= temp;
  #L20d110.  return v0;
}
procedure `boolean` `isConscryptPreferred`() @signature `Lh/n0/j/f;.isConscryptPreferred:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L20d138.  v0:= "okhttp.platform" @kind object;
  #L20d13c.  v1:= 0I;
  #L20d13e.  call temp:= `getSystemProperty`(v0, v1) @signature `Lh/n0/e;.getSystemProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L20d144.  v0:= temp @kind object;
  #L20d146.  v1:= "conscrypt" @kind object;
  #L20d14a.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L20d150.  v0:= temp;
  #L20d152.  if v0 == 0 then goto L20d15a;
  #L20d156.  v0:= 1I;
  #L20d158.  return v0;
  #L20d15a.  call temp:= `getProviders`() @signature `Ljava/security/Security;.getProviders:()[Ljava/security/Provider;` @kind static;
  #L20d160.  v0:= temp @kind object;
  #L20d162.  v1:= 0I;
  #L20d164.  v0:= v0[v1] @kind object;
  #L20d168.  call temp:= `getName`(v0) @signature `Ljava/security/Provider;.getName:()Ljava/lang/String;` @kind virtual;
  #L20d16e.  v0:= temp @kind object;
  #L20d170.  v1:= "Conscrypt" @kind object;
  #L20d174.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L20d17a.  v0:= temp;
  #L20d17c.  return v0;
}
procedure `void` `afterHandshake`(`h.n0.j.f` v0 @kind this, `javax.net.ssl.SSLSocket` v1 @kind object) @signature `Lh/n0/j/f;.afterHandshake:(Ljavax/net/ssl/SSLSocket;)V` @AccessFlag PUBLIC {
    temp;

  #L20d5e8.  return @kind void;
}
procedure `h.n0.l.c` `buildCertificateChainCleaner`(`h.n0.j.f` v3 @kind this, `javax.net.ssl.SSLSocketFactory` v4 @kind object) @signature `Lh/n0/j/f;.buildCertificateChainCleaner:(Ljavax/net/ssl/SSLSocketFactory;)Lh/n0/l/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L20d4dc.  call temp:= `trustManager`(v3, v4) @signature `Lh/n0/j/f;.trustManager:(Ljavax/net/ssl/SSLSocketFactory;)Ljavax/net/ssl/X509TrustManager;` @kind virtual;
  #L20d4e2.  v0:= temp @kind object;
  #L20d4e4.  if v0 == 0 then goto L20d4f2;
  #L20d4e8.  call temp:= `buildCertificateChainCleaner`(v3, v0) @signature `Lh/n0/j/f;.buildCertificateChainCleaner:(Ljavax/net/ssl/X509TrustManager;)Lh/n0/l/c;` @kind virtual;
  #L20d4ee.  v4:= temp @kind object;
  #L20d4f0.  return v4 @kind object;
  #L20d4f2.  v0:= new `java.lang.IllegalStateException`;
  #L20d4f6.  v1:= new `java.lang.StringBuilder`;
  #L20d4fa.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L20d500.  v2:= "Unable to extract the trust manager on " @kind object;
  #L20d504.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20d50a.  call temp:= `get`() @signature `Lh/n0/j/f;.get:()Lh/n0/j/f;` @kind static;
  #L20d510.  v2:= temp @kind object;
  #L20d512.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20d518.  v2:= ", sslSocketFactory is " @kind object;
  #L20d51c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20d522.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L20d528.  v4:= temp @kind object;
  #L20d52a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20d530.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L20d536.  v4:= temp @kind object;
  #L20d538.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20d53e.  throw v0;
}
procedure `h.n0.l.c` `buildCertificateChainCleaner`(`h.n0.j.f` v1 @kind this, `javax.net.ssl.X509TrustManager` v2 @kind object) @signature `Lh/n0/j/f;.buildCertificateChainCleaner:(Ljavax/net/ssl/X509TrustManager;)Lh/n0/l/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20d550.  v0:= new `h.n0.l.a`;
  #L20d554.  call temp:= `buildTrustRootIndex`(v1, v2) @signature `Lh/n0/j/f;.buildTrustRootIndex:(Ljavax/net/ssl/X509TrustManager;)Lh/n0/l/e;` @kind virtual;
  #L20d55a.  v2:= temp @kind object;
  #L20d55c.  call `<init>`(v0, v2) @signature `Lh/n0/l/a;.<init>:(Lh/n0/l/e;)V` @kind direct;
  #L20d562.  return v0 @kind object;
}
procedure `h.n0.l.e` `buildTrustRootIndex`(`h.n0.j.f` v1 @kind this, `javax.net.ssl.X509TrustManager` v2 @kind object) @signature `Lh/n0/j/f;.buildTrustRootIndex:(Ljavax/net/ssl/X509TrustManager;)Lh/n0/l/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20d574.  v0:= new `h.n0.l.b`;
  #L20d578.  call temp:= `getAcceptedIssuers`(v2) @signature `Ljavax/net/ssl/X509TrustManager;.getAcceptedIssuers:()[Ljava/security/cert/X509Certificate;` @kind interface;
  #L20d57e.  v2:= temp @kind object;
  #L20d580.  call `<init>`(v0, v2) @signature `Lh/n0/l/b;.<init>:([Ljava/security/cert/X509Certificate;)V` @kind direct;
  #L20d586.  return v0 @kind object;
}
procedure `void` `configureSslSocketFactory`(`h.n0.j.f` v0 @kind this, `javax.net.ssl.SSLSocketFactory` v1 @kind object) @signature `Lh/n0/j/f;.configureSslSocketFactory:(Ljavax/net/ssl/SSLSocketFactory;)V` @AccessFlag PUBLIC {
    temp;

  #L20d5fc.  return @kind void;
}
procedure `void` `configureTlsExtensions`(`h.n0.j.f` v0 @kind this, `javax.net.ssl.SSLSocket` v1 @kind object, `java.lang.String` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lh/n0/j/f;.configureTlsExtensions:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;

  #L20d610.  return @kind void;
}
procedure `void` `connectSocket`(`h.n0.j.f` v0 @kind this, `java.net.Socket` v1 @kind object, `java.net.InetSocketAddress` v2 @kind object, `int` v3 ) @signature `Lh/n0/j/f;.connectSocket:(Ljava/net/Socket;Ljava/net/InetSocketAddress;I)V` @AccessFlag PUBLIC {
    temp;

  #L20d624.  call `connect`(v1, v2, v3) @signature `Ljava/net/Socket;.connect:(Ljava/net/SocketAddress;I)V` @kind virtual;
  #L20d62a.  return @kind void;
}
procedure `javax.net.ssl.SSLContext` `getSSLContext`(`h.n0.j.f` v3 @kind this) @signature `Lh/n0/j/f;.getSSLContext:()Ljavax/net/ssl/SSLContext;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L20d36c.  v0:= "TLS" @kind object;
  #L20d370.  call temp:= `getInstance`(v0) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L20d376.  v0:= temp @kind object;
  #L20d378.  return v0 @kind object;
  #L20d37a.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L20d37c.  v1:= new `java.lang.IllegalStateException`;
  #L20d380.  v2:= "No TLS provider" @kind object;
  #L20d384.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L20d38a.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[L20d36c..L20d378] goto L20d37a;
}
procedure `java.lang.String` `getSelectedProtocol`(`h.n0.j.f` v0 @kind this, `javax.net.ssl.SSLSocket` v1 @kind object) @signature `Lh/n0/j/f;.getSelectedProtocol:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L20d2d8.  v1:= 0I;
  #L20d2da.  return v1 @kind object;
}
procedure `java.lang.Object` `getStackTraceForCloseable`(`h.n0.j.f` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lh/n0/j/f;.getStackTraceForCloseable:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L20d204.  v0:= `@@h.n0.j.f.b` @type ^`java.util.logging.Logger` @kind object;
  #L20d208.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L20d20c.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L20d212.  v0:= temp;
  #L20d214.  if v0 == 0 then goto L20d224;
  #L20d218.  v0:= new `java.lang.Throwable`;
  #L20d21c.  call `<init>`(v0, v3) @signature `Ljava/lang/Throwable;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20d222.  return v0 @kind object;
  #L20d224.  v3:= 0I;
  #L20d226.  return v3 @kind object;
}
procedure `boolean` `isCleartextTrafficPermitted`(`h.n0.j.f` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lh/n0/j/f;.isCleartextTrafficPermitted:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;

  #L20d124.  v1:= 1I;
  #L20d126.  return v1;
}
procedure `void` `log`(`h.n0.j.f` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lh/n0/j/f;.log:(ILjava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20d63c.  v0:= 5I;
  #L20d63e.  if v2 != v0 then goto L20d648;
  #L20d642.  v2:= `@@java.util.logging.Level.WARNING` @type ^`java.util.logging.Level` @kind object;
  #L20d646.  goto L20d64c;
  #L20d648.  v2:= `@@java.util.logging.Level.INFO` @type ^`java.util.logging.Level` @kind object;
  #L20d64c.  v0:= `@@h.n0.j.f.b` @type ^`java.util.logging.Logger` @kind object;
  #L20d650.  call `log`(v0, v2, v3, v4) @signature `Ljava/util/logging/Logger;.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L20d656.  return @kind void;
}
procedure `void` `logCloseableLeak`(`h.n0.j.f` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lh/n0/j/f;.logCloseableLeak:(Ljava/lang/String;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20d668.  if v3 != 0 then goto L20d68e;
  #L20d66c.  v0:= new `java.lang.StringBuilder`;
  #L20d670.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L20d676.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20d67c.  v2:= " To see where this was allocated, set the OkHttpClient logger level to FINE: Logger.getLogger(OkHttpClient.class.getName()).setLevel(Level.FINE);" @kind object;
  #L20d680.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20d686.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L20d68c.  v2:= temp @kind object;
  #L20d68e.  v0:= 5I;
  #L20d690.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L20d694.  call `log`(v1, v0, v2, v3) @signature `Lh/n0/j/f;.log:(ILjava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L20d69a.  return @kind void;
}
procedure `java.lang.String` `toString`(`h.n0.j.f` v1 @kind this) @signature `Lh/n0/j/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20d2ec.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L20d2f2.  v0:= temp @kind object;
  #L20d2f4.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L20d2fa.  v0:= temp @kind object;
  #L20d2fc.  return v0 @kind object;
}
procedure `javax.net.ssl.X509TrustManager` `trustManager`(`h.n0.j.f` v3 @kind this, `javax.net.ssl.SSLSocketFactory` v4 @kind object) @signature `Lh/n0/j/f;.trustManager:(Ljavax/net/ssl/SSLSocketFactory;)Ljavax/net/ssl/X509TrustManager;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L20d3ac.  v0:= "sun.security.ssl.SSLContextImpl" @kind object;
  #L20d3b0.  v1:= 0I;
  #L20d3b2.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L20d3b8.  v0:= temp @kind object;
  #L20d3ba.  v2:= "context" @kind object;
  #L20d3be.  call temp:= `a`(v4, v0, v2) @signature `Lh/n0/j/f;.a:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L20d3c4.  v4:= temp @kind object;
  #L20d3c6.  if v4 != 0 then goto L20d3cc;
  #L20d3ca.  return v1 @kind object;
  #L20d3cc.  v0:= constclass @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L20d3d0.  v2:= "trustManager" @kind object;
  #L20d3d4.  call temp:= `a`(v4, v0, v2) @signature `Lh/n0/j/f;.a:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L20d3da.  v4:= temp @kind object;
  #L20d3dc.  v4:= (`javax.net.ssl.X509TrustManager`) v4 @kind object;
  #L20d3e0.  return v4 @kind object;
  #L20d3e2.  return v1 @kind object;
  catch `java.lang.ClassNotFoundException` @[L20d3b2..L20d3e0] goto L20d3e2;
}
