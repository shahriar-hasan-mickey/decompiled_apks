record `h.n0.j.d` @kind class @AccessFlag  extends `h.n0.j.f` @kind class {
  `java.lang.reflect.Method` `h.n0.j.d.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `h.n0.j.d.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `h.n0.j.d.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `h.n0.j.d.f` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `h.n0.j.d.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`h.n0.j.d` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object, `java.lang.reflect.Method` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lh/n0/j/d;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L20ce3c.  call `<init>`(v0) @signature `Lh/n0/j/f;.<init>:()V` @kind direct;
  #L20ce42.  v0.`h.n0.j.d.c` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L20ce46.  v0.`h.n0.j.d.d` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L20ce4a.  v0.`h.n0.j.d.e` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L20ce4e.  v0.`h.n0.j.d.f` @type ^`java.lang.Class` := v4 @kind object;
  #L20ce52.  v0.`h.n0.j.d.g` @type ^`java.lang.Class` := v5 @kind object;
  #L20ce56.  return @kind void;
}
procedure `h.n0.j.f` `buildIfSupported`() @signature `Lh/n0/j/d;.buildIfSupported:()Lh/n0/j/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L20cd2c.  v0:= 0I;
  #L20cd2e.  v1:= "org.eclipse.jetty.alpn.ALPN" @kind object;
  #L20cd32.  v2:= 1I;
  #L20cd34.  call temp:= `forName`(v1, v2, v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;` @kind static;
  #L20cd3a.  v3:= temp @kind object;
  #L20cd3c.  v4:= new `java.lang.StringBuilder`;
  #L20cd40.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L20cd46.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20cd4c.  v5:= "$Provider" @kind object;
  #L20cd50.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20cd56.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L20cd5c.  v4:= temp @kind object;
  #L20cd5e.  call temp:= `forName`(v4, v2, v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;` @kind static;
  #L20cd64.  v4:= temp @kind object;
  #L20cd66.  v5:= new `java.lang.StringBuilder`;
  #L20cd6a.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L20cd70.  call temp:= `append`(v5, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20cd76.  v6:= "$ClientProvider" @kind object;
  #L20cd7a.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20cd80.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L20cd86.  v5:= temp @kind object;
  #L20cd88.  call temp:= `forName`(v5, v2, v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;` @kind static;
  #L20cd8e.  v10:= temp @kind object;
  #L20cd90.  v5:= new `java.lang.StringBuilder`;
  #L20cd94.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L20cd9a.  call temp:= `append`(v5, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20cda0.  v1:= "$ServerProvider" @kind object;
  #L20cda4.  call temp:= `append`(v5, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20cdaa.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L20cdb0.  v1:= temp @kind object;
  #L20cdb2.  call temp:= `forName`(v1, v2, v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;` @kind static;
  #L20cdb8.  v11:= temp @kind object;
  #L20cdba.  v1:= "put" @kind object;
  #L20cdbe.  v5:= 2I;
  #L20cdc0.  v5:= new `java.lang.Class`[v5];
  #L20cdc4.  v6:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L20cdc8.  v7:= 0I;
  #L20cdca.  v5[v7]:= v6 @kind object;
  #L20cdce.  v5[v2]:= v4 @kind object;
  #L20cdd2.  call temp:= `getMethod`(v3, v1, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L20cdd8.  v1:= temp @kind object;
  #L20cdda.  v4:= "get" @kind object;
  #L20cdde.  v5:= new `java.lang.Class`[v2];
  #L20cde2.  v6:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L20cde6.  v5[v7]:= v6 @kind object;
  #L20cdea.  call temp:= `getMethod`(v3, v4, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L20cdf0.  v8:= temp @kind object;
  #L20cdf2.  v4:= "remove" @kind object;
  #L20cdf6.  v2:= new `java.lang.Class`[v2];
  #L20cdfa.  v5:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L20cdfe.  v2[v7]:= v5 @kind object;
  #L20ce02.  call temp:= `getMethod`(v3, v4, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L20ce08.  v9:= temp @kind object;
  #L20ce0a.  v2:= new `h.n0.j.d`;
  #L20ce0e.  v6:= v2 @kind object;
  #L20ce10.  v7:= v1 @kind object;
  #L20ce12.  call `<init>`(v6, v7, v8, v9, v10, v11) @signature `Lh/n0/j/d;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Class;)V` @kind direct;
  #L20ce18.  return v2 @kind object;
  #L20ce1a.  return v0 @kind object;
  catch `java.lang.ClassNotFoundException` @[L20cd2e..L20ce18] goto L20ce1a;
  catch `java.lang.NoSuchMethodException` @[L20cd2e..L20ce18] goto L20ce1a;
}
procedure `void` `afterHandshake`(`h.n0.j.d` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `Lh/n0/j/d;.afterHandshake:(Ljavax/net/ssl/SSLSocket;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L20ce68.  v0:= v4.`h.n0.j.d.e` @type ^`java.lang.reflect.Method` @kind object;
  #L20ce6c.  v1:= 0I;
  #L20ce6e.  v2:= 1I;
  #L20ce70.  v2:= new `java.lang.Object`[v2];
  #L20ce74.  v3:= 0I;
  #L20ce76.  v2[v3]:= v5 @kind object;
  #L20ce7a.  call temp:= `invoke`(v0, v1, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L20ce80.  return @kind void;
  #L20ce82.  v5:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L20ce84.  goto L20ce88;
  #L20ce86.  v5:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L20ce88.  v0:= new `java.lang.AssertionError`;
  #L20ce8c.  v1:= "failed to remove ALPN" @kind object;
  #L20ce90.  call `<init>`(v0, v1, v5) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L20ce96.  throw v0;
  catch `java.lang.IllegalAccessException` @[L20ce68..L20ce80] goto L20ce86;
  catch `java.lang.reflect.InvocationTargetException` @[L20ce68..L20ce80] goto L20ce82;
}
procedure `void` `configureTlsExtensions`(`h.n0.j.d` v5 @kind this, `javax.net.ssl.SSLSocket` v6 @kind object, `java.lang.String` v7 @kind object, `java.util.List` v8 @kind object) @signature `Lh/n0/j/d;.configureTlsExtensions:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L20ceb8.  call temp:= `alpnProtocolNames`(v8) @signature `Lh/n0/j/f;.alpnProtocolNames:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L20cebe.  v7:= temp @kind object;
  #L20cec0.  v8:= constclass @type ^`h.n0.j.f` @kind object;
  #L20cec4.  call temp:= `getClassLoader`(v8) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L20ceca.  v8:= temp @kind object;
  #L20cecc.  v0:= 2I;
  #L20cece.  v1:= new `java.lang.Class`[v0];
  #L20ced2.  v2:= v5.`h.n0.j.d.f` @type ^`java.lang.Class` @kind object;
  #L20ced6.  v3:= 0I;
  #L20ced8.  v1[v3]:= v2 @kind object;
  #L20cedc.  v2:= v5.`h.n0.j.d.g` @type ^`java.lang.Class` @kind object;
  #L20cee0.  v4:= 1I;
  #L20cee2.  v1[v4]:= v2 @kind object;
  #L20cee6.  v2:= new `h.n0.j.d$a`;
  #L20ceea.  call `<init>`(v2, v7) @signature `Lh/n0/j/d$a;.<init>:(Ljava/util/List;)V` @kind direct;
  #L20cef0.  call temp:= `newProxyInstance`(v8, v1, v2) @signature `Ljava/lang/reflect/Proxy;.newProxyInstance:(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;` @kind static;
  #L20cef6.  v7:= temp @kind object;
  #L20cef8.  v8:= v5.`h.n0.j.d.c` @type ^`java.lang.reflect.Method` @kind object;
  #L20cefc.  v1:= 0I;
  #L20cefe.  v0:= new `java.lang.Object`[v0];
  #L20cf02.  v0[v3]:= v6 @kind object;
  #L20cf06.  v0[v4]:= v7 @kind object;
  #L20cf0a.  call temp:= `invoke`(v8, v1, v0) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L20cf10.  return @kind void;
  #L20cf12.  v6:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L20cf14.  goto L20cf18;
  #L20cf16.  v6:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L20cf18.  v7:= new `java.lang.AssertionError`;
  #L20cf1c.  v8:= "failed to set ALPN" @kind object;
  #L20cf20.  call `<init>`(v7, v8, v6) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L20cf26.  throw v7;
  catch `java.lang.reflect.InvocationTargetException` @[L20cec0..L20cf10] goto L20cf16;
  catch `java.lang.IllegalAccessException` @[L20cec0..L20cf10] goto L20cf12;
}
procedure `java.lang.String` `getSelectedProtocol`(`h.n0.j.d` v3 @kind this, `javax.net.ssl.SSLSocket` v4 @kind object) @signature `Lh/n0/j/d;.getSelectedProtocol:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L20cc98.  v0:= v3.`h.n0.j.d.d` @type ^`java.lang.reflect.Method` @kind object;
  #L20cc9c.  v1:= 1I;
  #L20cc9e.  v1:= new `java.lang.Object`[v1];
  #L20cca2.  v2:= 0I;
  #L20cca4.  v1[v2]:= v4 @kind object;
  #L20cca8.  v4:= 0I;
  #L20ccaa.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L20ccb0.  v0:= temp @kind object;
  #L20ccb2.  call temp:= `getInvocationHandler`(v0) @signature `Ljava/lang/reflect/Proxy;.getInvocationHandler:(Ljava/lang/Object;)Ljava/lang/reflect/InvocationHandler;` @kind static;
  #L20ccb8.  v0:= temp @kind object;
  #L20ccba.  v0:= (`h.n0.j.d$a`) v0 @kind object;
  #L20ccbe.  v1:= v0.`h.n0.j.d$a.b` @type ^`boolean` @kind boolean;
  #L20ccc2.  if v1 != 0 then goto L20cce4;
  #L20ccc6.  v1:= v0.`h.n0.j.d$a.c` @type ^`java.lang.String` @kind object;
  #L20ccca.  if v1 != 0 then goto L20cce4;
  #L20ccce.  call temp:= `get`() @signature `Lh/n0/j/f;.get:()Lh/n0/j/f;` @kind static;
  #L20ccd4.  v0:= temp @kind object;
  #L20ccd6.  v1:= 4I;
  #L20ccd8.  v2:= "ALPN callback dropped: HTTP/2 is disabled. Is alpn-boot on the boot class path?" @kind object;
  #L20ccdc.  call `log`(v0, v1, v2, v4) @signature `Lh/n0/j/f;.log:(ILjava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L20cce2.  return v4 @kind object;
  #L20cce4.  v1:= v0.`h.n0.j.d$a.b` @type ^`boolean` @kind boolean;
  #L20cce8.  if v1 == 0 then goto L20ccee;
  #L20ccec.  goto L20ccf2;
  #L20ccee.  v4:= v0.`h.n0.j.d$a.c` @type ^`java.lang.String` @kind object;
  #L20ccf2.  return v4 @kind object;
  #L20ccf4.  v4:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L20ccf6.  goto L20ccfa;
  #L20ccf8.  v4:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L20ccfa.  v0:= new `java.lang.AssertionError`;
  #L20ccfe.  v1:= "failed to get ALPN selected protocol" @kind object;
  #L20cd02.  call `<init>`(v0, v1, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L20cd08.  throw v0;
  catch `java.lang.reflect.InvocationTargetException` @[L20cc98..L20ccf2] goto L20ccf8;
  catch `java.lang.IllegalAccessException` @[L20cc98..L20ccf2] goto L20ccf4;
}
