record `h.n0.j.b$b` @kind class @AccessFlag FINAL {
  `java.lang.reflect.Method` `h.n0.j.b$b.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `h.n0.j.b$b.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `h.n0.j.b$b.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`h.n0.j.b$b` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object, `java.lang.reflect.Method` v3 @kind object) @signature `Lh/n0/j/b$b;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L20c0b4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L20c0ba.  v0.`h.n0.j.b$b.a` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L20c0be.  v0.`h.n0.j.b$b.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L20c0c2.  v0.`h.n0.j.b$b.c` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L20c0c6.  return @kind void;
}
procedure `h.n0.j.b$b` `a`() @signature `Lh/n0/j/b$b;.a:()Lh/n0/j/b$b;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L20c034.  v0:= "dalvik.system.CloseGuard" @kind object;
  #L20c038.  v1:= 0I;
  #L20c03a.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L20c040.  v0:= temp @kind object;
  #L20c042.  v2:= "get" @kind object;
  #L20c046.  v3:= 0I;
  #L20c048.  v4:= new `java.lang.Class`[v3];
  #L20c04c.  call temp:= `getMethod`(v0, v2, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L20c052.  v2:= temp @kind object;
  #L20c054.  v4:= "open" @kind object;
  #L20c058.  v5:= 1I;
  #L20c05a.  v5:= new `java.lang.Class`[v5];
  #L20c05e.  v6:= constclass @type ^`java.lang.String` @kind object;
  #L20c062.  v5[v3]:= v6 @kind object;
  #L20c066.  call temp:= `getMethod`(v0, v4, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L20c06c.  v4:= temp @kind object;
  #L20c06e.  v5:= "warnIfOpen" @kind object;
  #L20c072.  v3:= new `java.lang.Class`[v3];
  #L20c076.  call temp:= `getMethod`(v0, v5, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L20c07c.  v1:= temp @kind object;
  #L20c07e.  v0:= v1 @kind object;
  #L20c080.  v1:= v2 @kind object;
  #L20c082.  goto L20c088;
  #L20c084.  v0:= v1 @kind object;
  #L20c086.  v4:= v0 @kind object;
  #L20c088.  v2:= new `h.n0.j.b$b`;
  #L20c08c.  call `<init>`(v2, v1, v4, v0) @signature `Lh/n0/j/b$b;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @kind direct;
  #L20c092.  return v2 @kind object;
  catch `java.lang.Exception` @[L20c03a..L20c07e] goto L20c084;
}
procedure `java.lang.Object` `a`(`h.n0.j.b$b` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lh/n0/j/b$b;.a:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L20bfe4.  v0:= v5.`h.n0.j.b$b.a` @type ^`java.lang.reflect.Method` @kind object;
  #L20bfe8.  v1:= 0I;
  #L20bfea.  if v0 == 0 then goto L20c012;
  #L20bfee.  v2:= 0I;
  #L20bff0.  v3:= new `java.lang.Object`[v2];
  #L20bff4.  call temp:= `invoke`(v0, v1, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L20bffa.  v0:= temp @kind object;
  #L20bffc.  v3:= v5.`h.n0.j.b$b.b` @type ^`java.lang.reflect.Method` @kind object;
  #L20c000.  v4:= 1I;
  #L20c002.  v4:= new `java.lang.Object`[v4];
  #L20c006.  v4[v2]:= v6 @kind object;
  #L20c00a.  call temp:= `invoke`(v3, v0, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L20c010.  return v0 @kind object;
  #L20c012.  return v1 @kind object;
  catch `java.lang.Exception` @[L20bff0..L20c010] goto L20c012;
}
procedure `boolean` `a`(`h.n0.j.b$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lh/n0/j/b$b;.a:(Ljava/lang/Object;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L20bfac.  v0:= 0I;
  #L20bfae.  if v4 == 0 then goto L20bfc2;
  #L20bfb2.  v1:= v3.`h.n0.j.b$b.c` @type ^`java.lang.reflect.Method` @kind object;
  #L20bfb6.  v2:= new `java.lang.Object`[v0];
  #L20bfba.  call temp:= `invoke`(v1, v4, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L20bfc0.  v0:= 1I;
  #L20bfc2.  return v0;
  catch `java.lang.Exception` @[L20bfb2..L20bfc0] goto L20bfc2;
}
