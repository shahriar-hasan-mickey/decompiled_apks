record `h.n0.i.a$c` @kind class @AccessFlag FINAL extends `i.x` @kind interface {
  `i.l` `h.n0.i.a$c.f` @AccessFlag PRIVATE_FINAL;
  `boolean` `h.n0.i.a$c.g` @AccessFlag PRIVATE;
  `h.n0.i.a` `h.n0.i.a$c.h` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`h.n0.i.a$c` v1 @kind this, `h.n0.i.a` v2 @kind object) @signature `Lh/n0/i/a$c;.<init>:(Lh/n0/i/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2044f4.  v1.`h.n0.i.a$c.h` @type ^`h.n0.i.a` := v2 @kind object;
  #L2044f8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2044fe.  v2:= new `i.l`;
  #L204502.  v0:= v1.`h.n0.i.a$c.h` @type ^`h.n0.i.a` @kind object;
  #L204506.  call temp:= `b`(v0) @signature `Lh/n0/i/a;.b:(Lh/n0/i/a;)Li/f;` @kind static;
  #L20450c.  v0:= temp @kind object;
  #L20450e.  call temp:= `timeout`(v0) @signature `Li/x;.timeout:()Li/a0;` @kind interface;
  #L204514.  v0:= temp @kind object;
  #L204516.  call `<init>`(v2, v0) @signature `Li/l;.<init>:(Li/a0;)V` @kind direct;
  #L20451c.  v1.`h.n0.i.a$c.f` @type ^`i.l` := v2 @kind object;
  #L204520.  return @kind void;
}
procedure `void` `close`(`h.n0.i.a$c` v2 @kind this) @signature `Lh/n0/i/a$c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L204534.  @monitorenter v2
  #L204536.  v0:= v2.`h.n0.i.a$c.g` @type ^`boolean` @kind boolean;
  #L20453a.  if v0 == 0 then goto L204542;
  #L20453e.  @monitorexit v2
  #L204540.  return @kind void;
  #L204542.  v0:= 1I;
  #L204544.  v2.`h.n0.i.a$c.g` @type ^`boolean` := v0 @kind boolean;
  #L204548.  v0:= v2.`h.n0.i.a$c.h` @type ^`h.n0.i.a` @kind object;
  #L20454c.  call temp:= `b`(v0) @signature `Lh/n0/i/a;.b:(Lh/n0/i/a;)Li/f;` @kind static;
  #L204552.  v0:= temp @kind object;
  #L204554.  v1:= "0\r\n\r\n" @kind object;
  #L204558.  call temp:= `writeUtf8`(v0, v1) @signature `Li/f;.writeUtf8:(Ljava/lang/String;)Li/f;` @kind interface;
  #L20455e.  v0:= v2.`h.n0.i.a$c.h` @type ^`h.n0.i.a` @kind object;
  #L204562.  v1:= v2.`h.n0.i.a$c.f` @type ^`i.l` @kind object;
  #L204566.  call `a`(v0, v1) @signature `Lh/n0/i/a;.a:(Lh/n0/i/a;Li/l;)V` @kind static;
  #L20456c.  v0:= v2.`h.n0.i.a$c.h` @type ^`h.n0.i.a` @kind object;
  #L204570.  v1:= 3I;
  #L204572.  call temp:= `a`(v0, v1) @signature `Lh/n0/i/a;.a:(Lh/n0/i/a;I)I` @kind static;
  #L204578.  @monitorexit v2
  #L20457a.  return @kind void;
  #L20457c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L20457e.  @monitorexit v2
  #L204580.  throw v0;
  catch `java.lang.Throwable` @[L204536..L20453a] goto L20457c;
  catch `java.lang.Throwable` @[L204544..L204578] goto L20457c;
}
procedure `void` `flush`(`h.n0.i.a$c` v1 @kind this) @signature `Lh/n0/i/a$c;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2045a8.  @monitorenter v1
  #L2045aa.  v0:= v1.`h.n0.i.a$c.g` @type ^`boolean` @kind boolean;
  #L2045ae.  if v0 == 0 then goto L2045b6;
  #L2045b2.  @monitorexit v1
  #L2045b4.  return @kind void;
  #L2045b6.  v0:= v1.`h.n0.i.a$c.h` @type ^`h.n0.i.a` @kind object;
  #L2045ba.  call temp:= `b`(v0) @signature `Lh/n0/i/a;.b:(Lh/n0/i/a;)Li/f;` @kind static;
  #L2045c0.  v0:= temp @kind object;
  #L2045c2.  call `flush`(v0) @signature `Li/f;.flush:()V` @kind interface;
  #L2045c8.  @monitorexit v1
  #L2045ca.  return @kind void;
  #L2045cc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2045ce.  @monitorexit v1
  #L2045d0.  throw v0;
  catch `java.lang.Throwable` @[L2045aa..L2045ae] goto L2045cc;
  catch `java.lang.Throwable` @[L2045b6..L2045c8] goto L2045cc;
}
procedure `i.a0` `timeout`(`h.n0.i.a$c` v1 @kind this) @signature `Lh/n0/i/a$c;.timeout:()Li/a0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2044dc.  v0:= v1.`h.n0.i.a$c.f` @type ^`i.l` @kind object;
  #L2044e0.  return v0 @kind object;
}
procedure `void` `write`(`h.n0.i.a$c` v3 @kind this, `i.e` v4 @kind object, `long` v5 ) @signature `Lh/n0/i/a$c;.write:(Li/e;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2045f8.  v0:= v3.`h.n0.i.a$c.g` @type ^`boolean` @kind boolean;
  #L2045fc.  if v0 != 0 then goto L20465c;
  #L204600.  v0:= 0L;
  #L204604.  v2:= lcmp(v5, v0);
  #L204608.  if v2 != 0 then goto L20460e;
  #L20460c.  return @kind void;
  #L20460e.  v0:= v3.`h.n0.i.a$c.h` @type ^`h.n0.i.a` @kind object;
  #L204612.  call temp:= `b`(v0) @signature `Lh/n0/i/a;.b:(Lh/n0/i/a;)Li/f;` @kind static;
  #L204618.  v0:= temp @kind object;
  #L20461a.  call temp:= `writeHexadecimalUnsignedLong`(v0, v5) @signature `Li/f;.writeHexadecimalUnsignedLong:(J)Li/f;` @kind interface;
  #L204620.  v0:= v3.`h.n0.i.a$c.h` @type ^`h.n0.i.a` @kind object;
  #L204624.  call temp:= `b`(v0) @signature `Lh/n0/i/a;.b:(Lh/n0/i/a;)Li/f;` @kind static;
  #L20462a.  v0:= temp @kind object;
  #L20462c.  v1:= "\r\n" @kind object;
  #L204630.  call temp:= `writeUtf8`(v0, v1) @signature `Li/f;.writeUtf8:(Ljava/lang/String;)Li/f;` @kind interface;
  #L204636.  v0:= v3.`h.n0.i.a$c.h` @type ^`h.n0.i.a` @kind object;
  #L20463a.  call temp:= `b`(v0) @signature `Lh/n0/i/a;.b:(Lh/n0/i/a;)Li/f;` @kind static;
  #L204640.  v0:= temp @kind object;
  #L204642.  call `write`(v0, v4, v5) @signature `Li/x;.write:(Li/e;J)V` @kind interface;
  #L204648.  v4:= v3.`h.n0.i.a$c.h` @type ^`h.n0.i.a` @kind object;
  #L20464c.  call temp:= `b`(v4) @signature `Lh/n0/i/a;.b:(Lh/n0/i/a;)Li/f;` @kind static;
  #L204652.  v4:= temp @kind object;
  #L204654.  call temp:= `writeUtf8`(v4, v1) @signature `Li/f;.writeUtf8:(Ljava/lang/String;)Li/f;` @kind interface;
  #L20465a.  return @kind void;
  #L20465c.  v4:= new `java.lang.IllegalStateException`;
  #L204660.  v5:= "closed" @kind object;
  #L204664.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20466a.  throw v4;
}
