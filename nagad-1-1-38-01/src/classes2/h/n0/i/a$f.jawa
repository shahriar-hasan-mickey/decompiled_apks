record `h.n0.i.a$f` @kind class @AccessFlag FINAL extends `i.x` @kind interface {
  `i.l` `h.n0.i.a$f.f` @AccessFlag PRIVATE_FINAL;
  `boolean` `h.n0.i.a$f.g` @AccessFlag PRIVATE;
  `h.n0.i.a` `h.n0.i.a$f.h` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`h.n0.i.a$f` v1 @kind this, `h.n0.i.a` v2 @kind object) @signature `Lh/n0/i/a$f;.<init>:(Lh/n0/i/a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L204ac4.  v1.`h.n0.i.a$f.h` @type ^`h.n0.i.a` := v2 @kind object;
  #L204ac8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L204ace.  v2:= new `i.l`;
  #L204ad2.  v0:= v1.`h.n0.i.a$f.h` @type ^`h.n0.i.a` @kind object;
  #L204ad6.  call temp:= `b`(v0) @signature `Lh/n0/i/a;.b:(Lh/n0/i/a;)Li/f;` @kind static;
  #L204adc.  v0:= temp @kind object;
  #L204ade.  call temp:= `timeout`(v0) @signature `Li/x;.timeout:()Li/a0;` @kind interface;
  #L204ae4.  v0:= temp @kind object;
  #L204ae6.  call `<init>`(v2, v0) @signature `Li/l;.<init>:(Li/a0;)V` @kind direct;
  #L204aec.  v1.`h.n0.i.a$f.f` @type ^`i.l` := v2 @kind object;
  #L204af0.  return @kind void;
}
procedure `void` `<init>`(`h.n0.i.a$f` v0 @kind this, `h.n0.i.a` v1 @kind object, `h.n0.i.a$a` v2 @kind object) @signature `Lh/n0/i/a$f;.<init>:(Lh/n0/i/a;Lh/n0/i/a$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L204b04.  call `<init>`(v0, v1) @signature `Lh/n0/i/a$f;.<init>:(Lh/n0/i/a;)V` @kind direct;
  #L204b0a.  return @kind void;
}
procedure `void` `close`(`h.n0.i.a$f` v2 @kind this) @signature `Lh/n0/i/a$f;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L204b1c.  v0:= v2.`h.n0.i.a$f.g` @type ^`boolean` @kind boolean;
  #L204b20.  if v0 == 0 then goto L204b26;
  #L204b24.  return @kind void;
  #L204b26.  v0:= 1I;
  #L204b28.  v2.`h.n0.i.a$f.g` @type ^`boolean` := v0 @kind boolean;
  #L204b2c.  v0:= v2.`h.n0.i.a$f.h` @type ^`h.n0.i.a` @kind object;
  #L204b30.  v1:= v2.`h.n0.i.a$f.f` @type ^`i.l` @kind object;
  #L204b34.  call `a`(v0, v1) @signature `Lh/n0/i/a;.a:(Lh/n0/i/a;Li/l;)V` @kind static;
  #L204b3a.  v0:= v2.`h.n0.i.a$f.h` @type ^`h.n0.i.a` @kind object;
  #L204b3e.  v1:= 3I;
  #L204b40.  call temp:= `a`(v0, v1) @signature `Lh/n0/i/a;.a:(Lh/n0/i/a;I)I` @kind static;
  #L204b46.  return @kind void;
}
procedure `void` `flush`(`h.n0.i.a$f` v1 @kind this) @signature `Lh/n0/i/a$f;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L204b58.  v0:= v1.`h.n0.i.a$f.g` @type ^`boolean` @kind boolean;
  #L204b5c.  if v0 == 0 then goto L204b62;
  #L204b60.  return @kind void;
  #L204b62.  v0:= v1.`h.n0.i.a$f.h` @type ^`h.n0.i.a` @kind object;
  #L204b66.  call temp:= `b`(v0) @signature `Lh/n0/i/a;.b:(Lh/n0/i/a;)Li/f;` @kind static;
  #L204b6c.  v0:= temp @kind object;
  #L204b6e.  call `flush`(v0) @signature `Li/f;.flush:()V` @kind interface;
  #L204b74.  return @kind void;
}
procedure `i.a0` `timeout`(`h.n0.i.a$f` v1 @kind this) @signature `Lh/n0/i/a$f;.timeout:()Li/a0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L204aac.  v0:= v1.`h.n0.i.a$f.f` @type ^`i.l` @kind object;
  #L204ab0.  return v0 @kind object;
}
procedure `void` `write`(`h.n0.i.a$f` v7 @kind this, `i.e` v8 @kind object, `long` v9 ) @signature `Lh/n0/i/a$f;.write:(Li/e;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L204b88.  v0:= v7.`h.n0.i.a$f.g` @type ^`boolean` @kind boolean;
  #L204b8c.  if v0 != 0 then goto L204bb8;
  #L204b90.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L204b96.  v1:= temp @kind wide;
  #L204b98.  v3:= 0L;
  #L204b9c.  v5:= v9 @kind wide;
  #L204b9e.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lh/n0/e;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L204ba4.  v0:= v7.`h.n0.i.a$f.h` @type ^`h.n0.i.a` @kind object;
  #L204ba8.  call temp:= `b`(v0) @signature `Lh/n0/i/a;.b:(Lh/n0/i/a;)Li/f;` @kind static;
  #L204bae.  v0:= temp @kind object;
  #L204bb0.  call `write`(v0, v8, v9) @signature `Li/x;.write:(Li/e;J)V` @kind interface;
  #L204bb6.  return @kind void;
  #L204bb8.  v8:= new `java.lang.IllegalStateException`;
  #L204bbc.  v9:= "closed" @kind object;
  #L204bc0.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L204bc6.  throw v8;
}
