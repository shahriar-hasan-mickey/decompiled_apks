record `h.n0.i.a` @kind class @AccessFlag PUBLIC_FINAL extends `h.n0.h.c` @kind interface {
  `h.d0` `h.n0.i.a.a` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.f` `h.n0.i.a.b` @AccessFlag PRIVATE_FINAL;
  `i.g` `h.n0.i.a.c` @AccessFlag PRIVATE_FINAL;
  `i.f` `h.n0.i.a.d` @AccessFlag PRIVATE_FINAL;
  `int` `h.n0.i.a.e` @AccessFlag PRIVATE;
  `long` `h.n0.i.a.f` @AccessFlag PRIVATE;
  `h.y` `h.n0.i.a.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`h.n0.i.a` v2 @kind this, `h.d0` v3 @kind object, `okhttp3.internal.connection.f` v4 @kind object, `i.g` v5 @kind object, `i.f` v6 @kind object) @signature `Lh/n0/i/a;.<init>:(Lh/d0;Lokhttp3/internal/connection/f;Li/g;Li/f;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2052c4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2052ca.  v0:= 0I;
  #L2052cc.  v2.`h.n0.i.a.e` @type ^`int` := v0;
  #L2052d0.  v0:= 262144L;
  #L2052d6.  v2.`h.n0.i.a.f` @type ^`long` := v0 @kind wide;
  #L2052da.  v2.`h.n0.i.a.a` @type ^`h.d0` := v3 @kind object;
  #L2052de.  v2.`h.n0.i.a.b` @type ^`okhttp3.internal.connection.f` := v4 @kind object;
  #L2052e2.  v2.`h.n0.i.a.c` @type ^`i.g` := v5 @kind object;
  #L2052e6.  v2.`h.n0.i.a.d` @type ^`i.f` := v6 @kind object;
  #L2052ea.  return @kind void;
}
procedure `int` `a`(`h.n0.i.a` v0 @kind object, `int` v1 ) @signature `Lh/n0/i/a;.a:(Lh/n0/i/a;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L204ce4.  v0.`h.n0.i.a.e` @type ^`int` := v1;
  #L204ce8.  return v1;
}
procedure `h.d0` `a`(`h.n0.i.a` v0 @kind object) @signature `Lh/n0/i/a;.a:(Lh/n0/i/a;)Lh/d0;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L204e14.  v0:= v0.`h.n0.i.a.a` @type ^`h.d0` @kind object;
  #L204e18.  return v0 @kind object;
}
procedure `h.y` `a`(`h.n0.i.a` v0 @kind object, `h.y` v1 @kind object) @signature `Lh/n0/i/a;.a:(Lh/n0/i/a;Lh/y;)Lh/y;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L204d9c.  v0.`h.n0.i.a.g` @type ^`h.y` := v1 @kind object;
  #L204da0.  return v1 @kind object;
}
procedure `i.x` `a`(`h.n0.i.a` v3 @kind this) @signature `Lh/n0/i/a;.a:()Li/x;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L205050.  v0:= v3.`h.n0.i.a.e` @type ^`int`;
  #L205054.  v1:= 1I;
  #L205056.  if v0 != v1 then goto L20506c;
  #L20505a.  v0:= 2I;
  #L20505c.  v3.`h.n0.i.a.e` @type ^`int` := v0;
  #L205060.  v0:= new `h.n0.i.a$c`;
  #L205064.  call `<init>`(v0, v3) @signature `Lh/n0/i/a$c;.<init>:(Lh/n0/i/a;)V` @kind direct;
  #L20506a.  return v0 @kind object;
  #L20506c.  v0:= new `java.lang.IllegalStateException`;
  #L205070.  v1:= new `java.lang.StringBuilder`;
  #L205074.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L20507a.  v2:= "state: " @kind object;
  #L20507e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L205084.  v2:= v3.`h.n0.i.a.e` @type ^`int`;
  #L205088.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L20508e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L205094.  v1:= temp @kind object;
  #L205096.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20509c.  throw v0;
}
procedure `i.z` `a`(`h.n0.i.a` v2 @kind this, `long` v3 ) @signature `Lh/n0/i/a;.a:(J)Li/z;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L205170.  v0:= v2.`h.n0.i.a.e` @type ^`int`;
  #L205174.  v1:= 4I;
  #L205176.  if v0 != v1 then goto L20518c;
  #L20517a.  v0:= 5I;
  #L20517c.  v2.`h.n0.i.a.e` @type ^`int` := v0;
  #L205180.  v0:= new `h.n0.i.a$e`;
  #L205184.  call `<init>`(v0, v2, v3) @signature `Lh/n0/i/a$e;.<init>:(Lh/n0/i/a;J)V` @kind direct;
  #L20518a.  return v0 @kind object;
  #L20518c.  v3:= new `java.lang.IllegalStateException`;
  #L205190.  v4:= new `java.lang.StringBuilder`;
  #L205194.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L20519a.  v0:= "state: " @kind object;
  #L20519e.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2051a4.  v0:= v2.`h.n0.i.a.e` @type ^`int`;
  #L2051a8.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2051ae.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2051b4.  v4:= temp @kind object;
  #L2051b6.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2051bc.  throw v3;
}
procedure `i.z` `a`(`h.n0.i.a` v2 @kind this, `h.z` v3 @kind object) @signature `Lh/n0/i/a;.a:(Lh/z;)Li/z;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L205110.  v0:= v2.`h.n0.i.a.e` @type ^`int`;
  #L205114.  v1:= 4I;
  #L205116.  if v0 != v1 then goto L20512c;
  #L20511a.  v0:= 5I;
  #L20511c.  v2.`h.n0.i.a.e` @type ^`int` := v0;
  #L205120.  v0:= new `h.n0.i.a$d`;
  #L205124.  call `<init>`(v0, v2, v3) @signature `Lh/n0/i/a$d;.<init>:(Lh/n0/i/a;Lh/z;)V` @kind direct;
  #L20512a.  return v0 @kind object;
  #L20512c.  v3:= new `java.lang.IllegalStateException`;
  #L205130.  v0:= new `java.lang.StringBuilder`;
  #L205134.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L20513a.  v1:= "state: " @kind object;
  #L20513e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L205144.  v1:= v2.`h.n0.i.a.e` @type ^`int`;
  #L205148.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L20514e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L205154.  v0:= temp @kind object;
  #L205156.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20515c.  throw v3;
}
procedure `void` `a`(`h.n0.i.a` v0 @kind object, `i.l` v1 @kind object) @signature `Lh/n0/i/a;.a:(Lh/n0/i/a;Li/l;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2052fc.  call `a`(v0, v1) @signature `Lh/n0/i/a;.a:(Li/l;)V` @kind direct;
  #L205302.  return @kind void;
}
procedure `void` `a`(`h.n0.i.a` v2 @kind this, `i.l` v3 @kind object) @signature `Lh/n0/i/a;.a:(Li/l;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L205334.  call temp:= `delegate`(v3) @signature `Li/l;.delegate:()Li/a0;` @kind virtual;
  #L20533a.  v0:= temp @kind object;
  #L20533c.  v1:= `@@i.a0.NONE` @type ^`i.a0` @kind object;
  #L205340.  call temp:= `setDelegate`(v3, v1) @signature `Li/l;.setDelegate:(Li/a0;)Li/l;` @kind virtual;
  #L205346.  call temp:= `clearDeadline`(v0) @signature `Li/a0;.clearDeadline:()Li/a0;` @kind virtual;
  #L20534c.  call temp:= `clearTimeout`(v0) @signature `Li/a0;.clearTimeout:()Li/a0;` @kind virtual;
  #L205352.  return @kind void;
}
procedure `i.f` `b`(`h.n0.i.a` v0 @kind object) @signature `Lh/n0/i/a;.b:(Lh/n0/i/a;)Li/f;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L204f90.  v0:= v0.`h.n0.i.a.d` @type ^`i.f` @kind object;
  #L204f94.  return v0 @kind object;
}
procedure `i.x` `b`(`h.n0.i.a` v3 @kind this) @signature `Lh/n0/i/a;.b:()Li/x;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2050b0.  v0:= v3.`h.n0.i.a.e` @type ^`int`;
  #L2050b4.  v1:= 1I;
  #L2050b6.  if v0 != v1 then goto L2050ce;
  #L2050ba.  v0:= 2I;
  #L2050bc.  v3.`h.n0.i.a.e` @type ^`int` := v0;
  #L2050c0.  v0:= new `h.n0.i.a$f`;
  #L2050c4.  v1:= 0I;
  #L2050c6.  call `<init>`(v0, v3, v1) @signature `Lh/n0/i/a$f;.<init>:(Lh/n0/i/a;Lh/n0/i/a$a;)V` @kind direct;
  #L2050cc.  return v0 @kind object;
  #L2050ce.  v0:= new `java.lang.IllegalStateException`;
  #L2050d2.  v1:= new `java.lang.StringBuilder`;
  #L2050d6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2050dc.  v2:= "state: " @kind object;
  #L2050e0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2050e6.  v2:= v3.`h.n0.i.a.e` @type ^`int`;
  #L2050ea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2050f0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2050f6.  v1:= temp @kind object;
  #L2050f8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2050fe.  throw v0;
}
procedure `int` `c`(`h.n0.i.a` v0 @kind object) @signature `Lh/n0/i/a;.c:(Lh/n0/i/a;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L204ccc.  v0:= v0.`h.n0.i.a.e` @type ^`int`;
  #L204cd0.  return v0;
}
procedure `i.z` `c`(`h.n0.i.a` v3 @kind this) @signature `Lh/n0/i/a;.c:()Li/z;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2051d0.  v0:= v3.`h.n0.i.a.e` @type ^`int`;
  #L2051d4.  v1:= 4I;
  #L2051d6.  if v0 != v1 then goto L2051f8;
  #L2051da.  v0:= 5I;
  #L2051dc.  v3.`h.n0.i.a.e` @type ^`int` := v0;
  #L2051e0.  v0:= v3.`h.n0.i.a.b` @type ^`okhttp3.internal.connection.f` @kind object;
  #L2051e4.  call `noNewExchanges`(v0) @signature `Lokhttp3/internal/connection/f;.noNewExchanges:()V` @kind virtual;
  #L2051ea.  v0:= new `h.n0.i.a$g`;
  #L2051ee.  v1:= 0I;
  #L2051f0.  call `<init>`(v0, v3, v1) @signature `Lh/n0/i/a$g;.<init>:(Lh/n0/i/a;Lh/n0/i/a$a;)V` @kind direct;
  #L2051f6.  return v0 @kind object;
  #L2051f8.  v0:= new `java.lang.IllegalStateException`;
  #L2051fc.  v1:= new `java.lang.StringBuilder`;
  #L205200.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L205206.  v2:= "state: " @kind object;
  #L20520a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L205210.  v2:= v3.`h.n0.i.a.e` @type ^`int`;
  #L205214.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L20521a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L205220.  v1:= temp @kind object;
  #L205222.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L205228.  throw v0;
}
procedure `i.g` `d`(`h.n0.i.a` v0 @kind object) @signature `Lh/n0/i/a;.d:(Lh/n0/i/a;)Li/g;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L204fa8.  v0:= v0.`h.n0.i.a.c` @type ^`i.g` @kind object;
  #L204fac.  return v0 @kind object;
}
procedure `java.lang.String` `d`(`h.n0.i.a` v5 @kind this) @signature `Lh/n0/i/a;.d:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L204cfc.  v0:= v5.`h.n0.i.a.c` @type ^`i.g` @kind object;
  #L204d00.  v1:= v5.`h.n0.i.a.f` @type ^`long` @kind wide;
  #L204d04.  call temp:= `readUtf8LineStrict`(v0, v1) @signature `Li/g;.readUtf8LineStrict:(J)Ljava/lang/String;` @kind interface;
  #L204d0a.  v0:= temp @kind object;
  #L204d0c.  v1:= v5.`h.n0.i.a.f` @type ^`long` @kind wide;
  #L204d10.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L204d16.  v3:= temp;
  #L204d18.  v3:= (`long`) v3 @kind i2l;
  #L204d1a.  v1:= v1 - v3 @kind long;
  #L204d1c.  v5.`h.n0.i.a.f` @type ^`long` := v1 @kind wide;
  #L204d20.  return v0 @kind object;
}
procedure `h.y` `e`(`h.n0.i.a` v3 @kind this) @signature `Lh/n0/i/a;.e:()Lh/y;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L204dd0.  v0:= new `h.y$a`;
  #L204dd4.  call `<init>`(v0) @signature `Lh/y$a;.<init>:()V` @kind direct;
  #L204dda.  call temp:= `d`(v3) @signature `Lh/n0/i/a;.d:()Ljava/lang/String;` @kind direct;
  #L204de0.  v1:= temp @kind object;
  #L204de2.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L204de8.  v2:= temp;
  #L204dea.  if v2 == 0 then goto L204dfa;
  #L204dee.  v2:= `@@h.n0.c.a` @type ^`h.n0.c` @kind object;
  #L204df2.  call `addLenient`(v2, v0, v1) @signature `Lh/n0/c;.addLenient:(Lh/y$a;Ljava/lang/String;)V` @kind virtual;
  #L204df8.  goto L204dda;
  #L204dfa.  call temp:= `build`(v0) @signature `Lh/y$a;.build:()Lh/y;` @kind virtual;
  #L204e00.  v0:= temp @kind object;
  #L204e02.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.f` `e`(`h.n0.i.a` v0 @kind object) @signature `Lh/n0/i/a;.e:(Lh/n0/i/a;)Lokhttp3/internal/connection/f;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L204f60.  v0:= v0.`h.n0.i.a.b` @type ^`okhttp3.internal.connection.f` @kind object;
  #L204f64.  return v0 @kind object;
}
procedure `h.y` `f`(`h.n0.i.a` v0 @kind object) @signature `Lh/n0/i/a;.f:(Lh/n0/i/a;)Lh/y;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L204d84.  v0:= v0.`h.n0.i.a.g` @type ^`h.y` @kind object;
  #L204d88.  return v0 @kind object;
}
procedure `h.y` `g`(`h.n0.i.a` v0 @kind object) @signature `Lh/n0/i/a;.g:(Lh/n0/i/a;)Lh/y;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L204db4.  call temp:= `e`(v0) @signature `Lh/n0/i/a;.e:()Lh/y;` @kind direct;
  #L204dba.  v0:= temp @kind object;
  #L204dbc.  return v0 @kind object;
}
procedure `void` `cancel`(`h.n0.i.a` v1 @kind this) @signature `Lh/n0/i/a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L205314.  v0:= v1.`h.n0.i.a.b` @type ^`okhttp3.internal.connection.f` @kind object;
  #L205318.  if v0 == 0 then goto L205322;
  #L20531c.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/f;.cancel:()V` @kind virtual;
  #L205322.  return @kind void;
}
procedure `okhttp3.internal.connection.f` `connection`(`h.n0.i.a` v1 @kind this) @signature `Lh/n0/i/a;.connection:()Lokhttp3/internal/connection/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L204f78.  v0:= v1.`h.n0.i.a.b` @type ^`okhttp3.internal.connection.f` @kind object;
  #L204f7c.  return v0 @kind object;
}
procedure `i.x` `createRequestBody`(`h.n0.i.a` v2 @kind this, `h.g0` v3 @kind object, `long` v4 ) @signature `Lh/n0/i/a;.createRequestBody:(Lh/g0;J)Li/x;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L204fc0.  call temp:= `body`(v3) @signature `Lh/g0;.body:()Lh/h0;` @kind virtual;
  #L204fc6.  v0:= temp @kind object;
  #L204fc8.  if v0 == 0 then goto L204ff2;
  #L204fcc.  call temp:= `body`(v3) @signature `Lh/g0;.body:()Lh/h0;` @kind virtual;
  #L204fd2.  v0:= temp @kind object;
  #L204fd4.  call temp:= `isDuplex`(v0) @signature `Lh/h0;.isDuplex:()Z` @kind virtual;
  #L204fda.  v0:= temp;
  #L204fdc.  if v0 != 0 then goto L204fe2;
  #L204fe0.  goto L204ff2;
  #L204fe2.  v3:= new `java.net.ProtocolException`;
  #L204fe6.  v4:= "Duplex connections are not supported for HTTP/1" @kind object;
  #L204fea.  call `<init>`(v3, v4) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L204ff0.  throw v3;
  #L204ff2.  v0:= "Transfer-Encoding" @kind object;
  #L204ff6.  call temp:= `header`(v3, v0) @signature `Lh/g0;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L204ffc.  v3:= temp @kind object;
  #L204ffe.  v0:= "chunked" @kind object;
  #L205002.  call temp:= `equalsIgnoreCase`(v0, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L205008.  v3:= temp;
  #L20500a.  if v3 == 0 then goto L205018;
  #L20500e.  call temp:= `a`(v2) @signature `Lh/n0/i/a;.a:()Li/x;` @kind direct;
  #L205014.  v3:= temp @kind object;
  #L205016.  return v3 @kind object;
  #L205018.  v0:= -1L;
  #L20501c.  v3:= lcmp(v4, v0);
  #L205020.  if v3 == 0 then goto L20502e;
  #L205024.  call temp:= `b`(v2) @signature `Lh/n0/i/a;.b:()Li/x;` @kind direct;
  #L20502a.  v3:= temp @kind object;
  #L20502c.  return v3 @kind object;
  #L20502e.  v3:= new `java.lang.IllegalStateException`;
  #L205032.  v4:= "Cannot stream a request body without chunked encoding or a known content length!" @kind object;
  #L205036.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20503c.  throw v3;
}
procedure `void` `finishRequest`(`h.n0.i.a` v1 @kind this) @signature `Lh/n0/i/a;.finishRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L205364.  v0:= v1.`h.n0.i.a.d` @type ^`i.f` @kind object;
  #L205368.  call `flush`(v0) @signature `Li/f;.flush:()V` @kind interface;
  #L20536e.  return @kind void;
}
procedure `void` `flushRequest`(`h.n0.i.a` v1 @kind this) @signature `Lh/n0/i/a;.flushRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L205380.  v0:= v1.`h.n0.i.a.d` @type ^`i.f` @kind object;
  #L205384.  call `flush`(v0) @signature `Li/f;.flush:()V` @kind interface;
  #L20538a.  return @kind void;
}
procedure `i.z` `openResponseBodySource`(`h.n0.i.a` v4 @kind this, `h.i0` v5 @kind object) @signature `Lh/n0/i/a;.openResponseBodySource:(Lh/i0;)Li/z;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L20523c.  call temp:= `hasBody`(v5) @signature `Lh/n0/h/e;.hasBody:(Lh/i0;)Z` @kind static;
  #L205242.  v0:= temp;
  #L205244.  if v0 != 0 then goto L205256;
  #L205248.  v0:= 0L;
  #L20524c.  call temp:= `a`(v4, v0) @signature `Lh/n0/i/a;.a:(J)Li/z;` @kind direct;
  #L205252.  v5:= temp @kind object;
  #L205254.  return v5 @kind object;
  #L205256.  v0:= "Transfer-Encoding" @kind object;
  #L20525a.  call temp:= `header`(v5, v0) @signature `Lh/i0;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L205260.  v0:= temp @kind object;
  #L205262.  v1:= "chunked" @kind object;
  #L205266.  call temp:= `equalsIgnoreCase`(v1, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L20526c.  v0:= temp;
  #L20526e.  if v0 == 0 then goto L20528c;
  #L205272.  call temp:= `request`(v5) @signature `Lh/i0;.request:()Lh/g0;` @kind virtual;
  #L205278.  v5:= temp @kind object;
  #L20527a.  call temp:= `url`(v5) @signature `Lh/g0;.url:()Lh/z;` @kind virtual;
  #L205280.  v5:= temp @kind object;
  #L205282.  call temp:= `a`(v4, v5) @signature `Lh/n0/i/a;.a:(Lh/z;)Li/z;` @kind direct;
  #L205288.  v5:= temp @kind object;
  #L20528a.  return v5 @kind object;
  #L20528c.  call temp:= `contentLength`(v5) @signature `Lh/n0/h/e;.contentLength:(Lh/i0;)J` @kind static;
  #L205292.  v0:= temp @kind wide;
  #L205294.  v2:= -1L;
  #L205298.  v5:= lcmp(v0, v2);
  #L20529c.  if v5 == 0 then goto L2052aa;
  #L2052a0.  call temp:= `a`(v4, v0) @signature `Lh/n0/i/a;.a:(J)Li/z;` @kind direct;
  #L2052a6.  v5:= temp @kind object;
  #L2052a8.  return v5 @kind object;
  #L2052aa.  call temp:= `c`(v4) @signature `Lh/n0/i/a;.c:()Li/z;` @kind direct;
  #L2052b0.  v5:= temp @kind object;
  #L2052b2.  return v5 @kind object;
}
procedure `h.i0$a` `readResponseHeaders`(`h.n0.i.a` v4 @kind this, `boolean` v5 ) @signature `Lh/n0/i/a;.readResponseHeaders:(Z)Lh/i0$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L204e2c.  v0:= v4.`h.n0.i.a.e` @type ^`int`;
  #L204e30.  v1:= 3I;
  #L204e32.  v2:= 1I;
  #L204e34.  if v0 == v2 then goto L204e70;
  #L204e38.  if v0 != v1 then goto L204e3e;
  #L204e3c.  goto L204e70;
  #L204e3e.  v5:= new `java.lang.IllegalStateException`;
  #L204e42.  v0:= new `java.lang.StringBuilder`;
  #L204e46.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L204e4c.  v1:= "state: " @kind object;
  #L204e50.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L204e56.  v1:= v4.`h.n0.i.a.e` @type ^`int`;
  #L204e5a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L204e60.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L204e66.  v0:= temp @kind object;
  #L204e68.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L204e6e.  throw v5;
  #L204e70.  call temp:= `d`(v4) @signature `Lh/n0/i/a;.d:()Ljava/lang/String;` @kind direct;
  #L204e76.  v0:= temp @kind object;
  #L204e78.  call temp:= `parse`(v0) @signature `Lh/n0/h/k;.parse:(Ljava/lang/String;)Lh/n0/h/k;` @kind static;
  #L204e7e.  v0:= temp @kind object;
  #L204e80.  v2:= new `h.i0$a`;
  #L204e84.  call `<init>`(v2) @signature `Lh/i0$a;.<init>:()V` @kind direct;
  #L204e8a.  v3:= v0.`h.n0.h.k.a` @type ^`h.e0` @kind object;
  #L204e8e.  call temp:= `protocol`(v2, v3) @signature `Lh/i0$a;.protocol:(Lh/e0;)Lh/i0$a;` @kind virtual;
  #L204e94.  v3:= v0.`h.n0.h.k.b` @type ^`int`;
  #L204e98.  call temp:= `code`(v2, v3) @signature `Lh/i0$a;.code:(I)Lh/i0$a;` @kind virtual;
  #L204e9e.  v3:= v0.`h.n0.h.k.c` @type ^`java.lang.String` @kind object;
  #L204ea2.  call temp:= `message`(v2, v3) @signature `Lh/i0$a;.message:(Ljava/lang/String;)Lh/i0$a;` @kind virtual;
  #L204ea8.  call temp:= `e`(v4) @signature `Lh/n0/i/a;.e:()Lh/y;` @kind direct;
  #L204eae.  v3:= temp @kind object;
  #L204eb0.  call temp:= `headers`(v2, v3) @signature `Lh/i0$a;.headers:(Lh/y;)Lh/i0$a;` @kind virtual;
  #L204eb6.  v3:= 100I;
  #L204eba.  if v5 == 0 then goto L204eca;
  #L204ebe.  v5:= v0.`h.n0.h.k.b` @type ^`int`;
  #L204ec2.  if v5 != v3 then goto L204eca;
  #L204ec6.  v5:= 0I;
  #L204ec8.  return v5 @kind object;
  #L204eca.  v5:= v0.`h.n0.h.k.b` @type ^`int`;
  #L204ece.  if v5 != v3 then goto L204ed8;
  #L204ed2.  v4.`h.n0.i.a.e` @type ^`int` := v1;
  #L204ed6.  return v2 @kind object;
  #L204ed8.  v5:= 4I;
  #L204eda.  v4.`h.n0.i.a.e` @type ^`int` := v5;
  #L204ede.  return v2 @kind object;
  #L204ee0.  v5:= Exception @type ^`java.io.EOFException` @kind object;
  #L204ee2.  v0:= v4.`h.n0.i.a.b` @type ^`okhttp3.internal.connection.f` @kind object;
  #L204ee6.  if v0 == 0 then goto L204f0c;
  #L204eea.  call temp:= `route`(v0) @signature `Lokhttp3/internal/connection/f;.route:()Lh/k0;` @kind virtual;
  #L204ef0.  v0:= temp @kind object;
  #L204ef2.  call temp:= `address`(v0) @signature `Lh/k0;.address:()Lh/e;` @kind virtual;
  #L204ef8.  v0:= temp @kind object;
  #L204efa.  call temp:= `url`(v0) @signature `Lh/e;.url:()Lh/z;` @kind virtual;
  #L204f00.  v0:= temp @kind object;
  #L204f02.  call temp:= `redact`(v0) @signature `Lh/z;.redact:()Ljava/lang/String;` @kind virtual;
  #L204f08.  v0:= temp @kind object;
  #L204f0a.  goto L204f10;
  #L204f0c.  v0:= "unknown" @kind object;
  #L204f10.  v1:= new `java.io.IOException`;
  #L204f14.  v2:= new `java.lang.StringBuilder`;
  #L204f18.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L204f1e.  v3:= "unexpected end of stream on " @kind object;
  #L204f22.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L204f28.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L204f2e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L204f34.  v0:= temp @kind object;
  #L204f36.  call `<init>`(v1, v0, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L204f3c.  throw v1;
  catch `java.io.EOFException` @[L204e70..L204ede] goto L204ee0;
}
procedure `long` `reportedContentLength`(`h.n0.i.a` v2 @kind this, `h.i0` v3 @kind object) @signature `Lh/n0/i/a;.reportedContentLength:(Lh/i0;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L204d34.  call temp:= `hasBody`(v3) @signature `Lh/n0/h/e;.hasBody:(Lh/i0;)Z` @kind static;
  #L204d3a.  v0:= temp;
  #L204d3c.  if v0 != 0 then goto L204d46;
  #L204d40.  v0:= 0L;
  #L204d44.  return v0 @kind wide;
  #L204d46.  v0:= "Transfer-Encoding" @kind object;
  #L204d4a.  call temp:= `header`(v3, v0) @signature `Lh/i0;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L204d50.  v0:= temp @kind object;
  #L204d52.  v1:= "chunked" @kind object;
  #L204d56.  call temp:= `equalsIgnoreCase`(v1, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L204d5c.  v0:= temp;
  #L204d5e.  if v0 == 0 then goto L204d68;
  #L204d62.  v0:= -1L;
  #L204d66.  return v0 @kind wide;
  #L204d68.  call temp:= `contentLength`(v3) @signature `Lh/n0/h/e;.contentLength:(Lh/i0;)J` @kind static;
  #L204d6e.  v0:= temp @kind wide;
  #L204d70.  return v0 @kind wide;
}
procedure `void` `skipConnectBody`(`h.n0.i.a` v4 @kind this, `h.i0` v5 @kind object) @signature `Lh/n0/i/a;.skipConnectBody:(Lh/i0;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L20539c.  call temp:= `contentLength`(v5) @signature `Lh/n0/h/e;.contentLength:(Lh/i0;)J` @kind static;
  #L2053a2.  v0:= temp @kind wide;
  #L2053a4.  v2:= -1L;
  #L2053a8.  v5:= lcmp(v0, v2);
  #L2053ac.  if v5 != 0 then goto L2053b2;
  #L2053b0.  return @kind void;
  #L2053b2.  call temp:= `a`(v4, v0) @signature `Lh/n0/i/a;.a:(J)Li/z;` @kind direct;
  #L2053b8.  v5:= temp @kind object;
  #L2053ba.  v0:= 2147483647I;
  #L2053c0.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2053c4.  call temp:= `skipAll`(v5, v0, v1) @signature `Lh/n0/e;.skipAll:(Li/z;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L2053ca.  call `close`(v5) @signature `Li/z;.close:()V` @kind interface;
  #L2053d0.  return @kind void;
}
procedure `void` `writeRequest`(`h.n0.i.a` v4 @kind this, `h.y` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lh/n0/i/a;.writeRequest:(Lh/y;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2053e4.  v0:= v4.`h.n0.i.a.e` @type ^`int`;
  #L2053e8.  if v0 != 0 then goto L20545e;
  #L2053ec.  v0:= v4.`h.n0.i.a.d` @type ^`i.f` @kind object;
  #L2053f0.  call temp:= `writeUtf8`(v0, v6) @signature `Li/f;.writeUtf8:(Ljava/lang/String;)Li/f;` @kind interface;
  #L2053f6.  v6:= temp @kind object;
  #L2053f8.  v0:= "\r\n" @kind object;
  #L2053fc.  call temp:= `writeUtf8`(v6, v0) @signature `Li/f;.writeUtf8:(Ljava/lang/String;)Li/f;` @kind interface;
  #L205402.  v6:= 0I;
  #L205404.  call temp:= `size`(v5) @signature `Lh/y;.size:()I` @kind virtual;
  #L20540a.  v1:= temp;
  #L20540c.  if v6 >= v1 then goto L20544c;
  #L205410.  v2:= v4.`h.n0.i.a.d` @type ^`i.f` @kind object;
  #L205414.  call temp:= `name`(v5, v6) @signature `Lh/y;.name:(I)Ljava/lang/String;` @kind virtual;
  #L20541a.  v3:= temp @kind object;
  #L20541c.  call temp:= `writeUtf8`(v2, v3) @signature `Li/f;.writeUtf8:(Ljava/lang/String;)Li/f;` @kind interface;
  #L205422.  v2:= temp @kind object;
  #L205424.  v3:= ": " @kind object;
  #L205428.  call temp:= `writeUtf8`(v2, v3) @signature `Li/f;.writeUtf8:(Ljava/lang/String;)Li/f;` @kind interface;
  #L20542e.  v2:= temp @kind object;
  #L205430.  call temp:= `value`(v5, v6) @signature `Lh/y;.value:(I)Ljava/lang/String;` @kind virtual;
  #L205436.  v3:= temp @kind object;
  #L205438.  call temp:= `writeUtf8`(v2, v3) @signature `Li/f;.writeUtf8:(Ljava/lang/String;)Li/f;` @kind interface;
  #L20543e.  v2:= temp @kind object;
  #L205440.  call temp:= `writeUtf8`(v2, v0) @signature `Li/f;.writeUtf8:(Ljava/lang/String;)Li/f;` @kind interface;
  #L205446.  v6:= v6 + 1;
  #L20544a.  goto L20540c;
  #L20544c.  v5:= v4.`h.n0.i.a.d` @type ^`i.f` @kind object;
  #L205450.  call temp:= `writeUtf8`(v5, v0) @signature `Li/f;.writeUtf8:(Ljava/lang/String;)Li/f;` @kind interface;
  #L205456.  v5:= 1I;
  #L205458.  v4.`h.n0.i.a.e` @type ^`int` := v5;
  #L20545c.  return @kind void;
  #L20545e.  v5:= new `java.lang.IllegalStateException`;
  #L205462.  v6:= new `java.lang.StringBuilder`;
  #L205466.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L20546c.  v0:= "state: " @kind object;
  #L205470.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L205476.  v0:= v4.`h.n0.i.a.e` @type ^`int`;
  #L20547a.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L205480.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L205486.  v6:= temp @kind object;
  #L205488.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20548e.  throw v5;
}
procedure `void` `writeRequestHeaders`(`h.n0.i.a` v1 @kind this, `h.g0` v2 @kind object) @signature `Lh/n0/i/a;.writeRequestHeaders:(Lh/g0;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2054a0.  v0:= v1.`h.n0.i.a.b` @type ^`okhttp3.internal.connection.f` @kind object;
  #L2054a4.  call temp:= `route`(v0) @signature `Lokhttp3/internal/connection/f;.route:()Lh/k0;` @kind virtual;
  #L2054aa.  v0:= temp @kind object;
  #L2054ac.  call temp:= `proxy`(v0) @signature `Lh/k0;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L2054b2.  v0:= temp @kind object;
  #L2054b4.  call temp:= `type`(v0) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L2054ba.  v0:= temp @kind object;
  #L2054bc.  call temp:= `get`(v2, v0) @signature `Lh/n0/h/i;.get:(Lh/g0;Ljava/net/Proxy$Type;)Ljava/lang/String;` @kind static;
  #L2054c2.  v0:= temp @kind object;
  #L2054c4.  call temp:= `headers`(v2) @signature `Lh/g0;.headers:()Lh/y;` @kind virtual;
  #L2054ca.  v2:= temp @kind object;
  #L2054cc.  call `writeRequest`(v1, v2, v0) @signature `Lh/n0/i/a;.writeRequest:(Lh/y;Ljava/lang/String;)V` @kind virtual;
  #L2054d2.  return @kind void;
}
