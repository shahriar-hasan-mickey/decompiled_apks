record `h.n0.i.a$d` @kind class @AccessFlag  extends `h.n0.i.a$b` @kind class {
  `h.z` `h.n0.i.a$d.i` @AccessFlag PRIVATE_FINAL;
  `long` `h.n0.i.a$d.j` @AccessFlag PRIVATE;
  `boolean` `h.n0.i.a$d.k` @AccessFlag PRIVATE;
  `h.n0.i.a` `h.n0.i.a$d.l` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`h.n0.i.a$d` v2 @kind this, `h.n0.i.a` v3 @kind object, `h.z` v4 @kind object) @signature `Lh/n0/i/a$d;.<init>:(Lh/n0/i/a;Lh/z;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L204760.  v2.`h.n0.i.a$d.l` @type ^`h.n0.i.a` := v3 @kind object;
  #L204764.  v0:= 0I;
  #L204766.  call `<init>`(v2, v3, v0) @signature `Lh/n0/i/a$b;.<init>:(Lh/n0/i/a;Lh/n0/i/a$a;)V` @kind direct;
  #L20476c.  v0:= -1L;
  #L204770.  v2.`h.n0.i.a$d.j` @type ^`long` := v0 @kind wide;
  #L204774.  v3:= 1I;
  #L204776.  v2.`h.n0.i.a$d.k` @type ^`boolean` := v3 @kind boolean;
  #L20477a.  v2.`h.n0.i.a$d.i` @type ^`h.z` := v4 @kind object;
  #L20477e.  return @kind void;
}
procedure `void` `b`(`h.n0.i.a$d` v6 @kind this) @signature `Lh/n0/i/a$d;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2047e8.  v0:= v6.`h.n0.i.a$d.j` @type ^`long` @kind wide;
  #L2047ec.  v2:= -1L;
  #L2047f0.  v4:= lcmp(v0, v2);
  #L2047f4.  if v4 == 0 then goto L20480a;
  #L2047f8.  v0:= v6.`h.n0.i.a$d.l` @type ^`h.n0.i.a` @kind object;
  #L2047fc.  call temp:= `d`(v0) @signature `Lh/n0/i/a;.d:(Lh/n0/i/a;)Li/g;` @kind static;
  #L204802.  v0:= temp @kind object;
  #L204804.  call temp:= `readUtf8LineStrict`(v0) @signature `Li/g;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L20480a.  v0:= v6.`h.n0.i.a$d.l` @type ^`h.n0.i.a` @kind object;
  #L20480e.  call temp:= `d`(v0) @signature `Lh/n0/i/a;.d:(Lh/n0/i/a;)Li/g;` @kind static;
  #L204814.  v0:= temp @kind object;
  #L204816.  call temp:= `readHexadecimalUnsignedLong`(v0) @signature `Li/g;.readHexadecimalUnsignedLong:()J` @kind interface;
  #L20481c.  v0:= temp @kind wide;
  #L20481e.  v6.`h.n0.i.a$d.j` @type ^`long` := v0 @kind wide;
  #L204822.  v0:= v6.`h.n0.i.a$d.l` @type ^`h.n0.i.a` @kind object;
  #L204826.  call temp:= `d`(v0) @signature `Lh/n0/i/a;.d:(Lh/n0/i/a;)Li/g;` @kind static;
  #L20482c.  v0:= temp @kind object;
  #L20482e.  call temp:= `readUtf8LineStrict`(v0) @signature `Li/g;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L204834.  v0:= temp @kind object;
  #L204836.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L20483c.  v0:= temp @kind object;
  #L20483e.  v1:= v6.`h.n0.i.a$d.j` @type ^`long` @kind wide;
  #L204842.  v3:= 0L;
  #L204846.  v5:= lcmp(v1, v3);
  #L20484a.  if v5 < 0 then goto L2048c0;
  #L20484e.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L204854.  v1:= temp;
  #L204856.  if v1 != 0 then goto L20486a;
  #L20485a.  v1:= ";" @kind object;
  #L20485e.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L204864.  v1:= temp;
  #L204866.  if v1 == 0 then goto L2048c0;
  #L20486a.  v0:= v6.`h.n0.i.a$d.j` @type ^`long` @kind wide;
  #L20486e.  v2:= lcmp(v0, v3);
  #L204872.  if v2 != 0 then goto L2048be;
  #L204876.  v0:= 0I;
  #L204878.  v6.`h.n0.i.a$d.k` @type ^`boolean` := v0 @kind boolean;
  #L20487c.  v0:= v6.`h.n0.i.a$d.l` @type ^`h.n0.i.a` @kind object;
  #L204880.  call temp:= `g`(v0) @signature `Lh/n0/i/a;.g:(Lh/n0/i/a;)Lh/y;` @kind static;
  #L204886.  v1:= temp @kind object;
  #L204888.  call temp:= `a`(v0, v1) @signature `Lh/n0/i/a;.a:(Lh/n0/i/a;Lh/y;)Lh/y;` @kind static;
  #L20488e.  v0:= v6.`h.n0.i.a$d.l` @type ^`h.n0.i.a` @kind object;
  #L204892.  call temp:= `a`(v0) @signature `Lh/n0/i/a;.a:(Lh/n0/i/a;)Lh/d0;` @kind static;
  #L204898.  v0:= temp @kind object;
  #L20489a.  call temp:= `cookieJar`(v0) @signature `Lh/d0;.cookieJar:()Lh/r;` @kind virtual;
  #L2048a0.  v0:= temp @kind object;
  #L2048a2.  v1:= v6.`h.n0.i.a$d.i` @type ^`h.z` @kind object;
  #L2048a6.  v2:= v6.`h.n0.i.a$d.l` @type ^`h.n0.i.a` @kind object;
  #L2048aa.  call temp:= `f`(v2) @signature `Lh/n0/i/a;.f:(Lh/n0/i/a;)Lh/y;` @kind static;
  #L2048b0.  v2:= temp @kind object;
  #L2048b2.  call `receiveHeaders`(v0, v1, v2) @signature `Lh/n0/h/e;.receiveHeaders:(Lh/r;Lh/z;Lh/y;)V` @kind static;
  #L2048b8.  call `a`(v6) @signature `Lh/n0/i/a$b;.a:()V` @kind virtual;
  #L2048be.  return @kind void;
  #L2048c0.  v1:= new `java.net.ProtocolException`;
  #L2048c4.  v2:= new `java.lang.StringBuilder`;
  #L2048c8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2048ce.  v3:= "expected chunk size and optional extensions but was \"" @kind object;
  #L2048d2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2048d8.  v3:= v6.`h.n0.i.a$d.j` @type ^`long` @kind wide;
  #L2048dc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2048e2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2048e8.  v0:= "\"" @kind object;
  #L2048ec.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2048f2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2048f8.  v0:= temp @kind object;
  #L2048fa.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L204900.  throw v1;
  #L204902.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L204904.  v1:= new `java.net.ProtocolException`;
  #L204908.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L20490e.  v0:= temp @kind object;
  #L204910.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L204916.  throw v1;
  catch `java.lang.NumberFormatException` @[L20480a..L204866] goto L204902;
  catch `java.lang.NumberFormatException` @[L2048c0..L204902] goto L204902;
}
procedure `void` `close`(`h.n0.i.a$d` v2 @kind this) @signature `Lh/n0/i/a$d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L204790.  v0:= v2.`h.n0.i.a$b.g` @type ^`boolean` @kind boolean;
  #L204794.  if v0 == 0 then goto L20479a;
  #L204798.  return @kind void;
  #L20479a.  v0:= v2.`h.n0.i.a$d.k` @type ^`boolean` @kind boolean;
  #L20479e.  if v0 == 0 then goto L2047ce;
  #L2047a2.  v0:= 100I;
  #L2047a6.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2047aa.  call temp:= `discard`(v2, v0, v1) @signature `Lh/n0/e;.discard:(Li/z;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L2047b0.  v0:= temp;
  #L2047b2.  if v0 != 0 then goto L2047ce;
  #L2047b6.  v0:= v2.`h.n0.i.a$d.l` @type ^`h.n0.i.a` @kind object;
  #L2047ba.  call temp:= `e`(v0) @signature `Lh/n0/i/a;.e:(Lh/n0/i/a;)Lokhttp3/internal/connection/f;` @kind static;
  #L2047c0.  v0:= temp @kind object;
  #L2047c2.  call `noNewExchanges`(v0) @signature `Lokhttp3/internal/connection/f;.noNewExchanges:()V` @kind virtual;
  #L2047c8.  call `a`(v2) @signature `Lh/n0/i/a$b;.a:()V` @kind virtual;
  #L2047ce.  v0:= 1I;
  #L2047d0.  v2.`h.n0.i.a$b.g` @type ^`boolean` := v0 @kind boolean;
  #L2047d4.  return @kind void;
}
procedure `long` `read`(`h.n0.i.a$d` v7 @kind this, `i.e` v8 @kind object, `long` v9 ) @signature `Lh/n0/i/a$d;.read:(Li/e;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L20467c.  v0:= 0L;
  #L204680.  v2:= lcmp(v9, v0);
  #L204684.  if v2 < 0 then goto L204722;
  #L204688.  v2:= v7.`h.n0.i.a$b.g` @type ^`boolean` @kind boolean;
  #L20468c.  if v2 != 0 then goto L204712;
  #L204690.  v2:= v7.`h.n0.i.a$d.k` @type ^`boolean` @kind boolean;
  #L204694.  v3:= -1L;
  #L204698.  if v2 != 0 then goto L20469e;
  #L20469c.  return v3 @kind wide;
  #L20469e.  v5:= v7.`h.n0.i.a$d.j` @type ^`long` @kind wide;
  #L2046a2.  v2:= lcmp(v5, v0);
  #L2046a6.  if v2 == 0 then goto L2046b2;
  #L2046aa.  v0:= lcmp(v5, v3);
  #L2046ae.  if v0 != 0 then goto L2046c2;
  #L2046b2.  call `b`(v7) @signature `Lh/n0/i/a$d;.b:()V` @kind direct;
  #L2046b8.  v0:= v7.`h.n0.i.a$d.k` @type ^`boolean` @kind boolean;
  #L2046bc.  if v0 != 0 then goto L2046c2;
  #L2046c0.  return v3 @kind wide;
  #L2046c2.  v0:= v7.`h.n0.i.a$d.j` @type ^`long` @kind wide;
  #L2046c6.  call temp:= `min`(v9, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2046cc.  v9:= temp @kind wide;
  #L2046ce.  call temp:= `read`(v7, v8, v9) @signature `Lh/n0/i/a$b;.read:(Li/e;J)J` @kind super;
  #L2046d4.  v8:= temp @kind wide;
  #L2046d6.  v10:= lcmp(v8, v3);
  #L2046da.  if v10 == 0 then goto L2046ea;
  #L2046de.  v0:= v7.`h.n0.i.a$d.j` @type ^`long` @kind wide;
  #L2046e2.  v0:= v0 - v8 @kind long;
  #L2046e4.  v7.`h.n0.i.a$d.j` @type ^`long` := v0 @kind wide;
  #L2046e8.  return v8 @kind wide;
  #L2046ea.  v8:= v7.`h.n0.i.a$d.l` @type ^`h.n0.i.a` @kind object;
  #L2046ee.  call temp:= `e`(v8) @signature `Lh/n0/i/a;.e:(Lh/n0/i/a;)Lokhttp3/internal/connection/f;` @kind static;
  #L2046f4.  v8:= temp @kind object;
  #L2046f6.  call `noNewExchanges`(v8) @signature `Lokhttp3/internal/connection/f;.noNewExchanges:()V` @kind virtual;
  #L2046fc.  v8:= new `java.net.ProtocolException`;
  #L204700.  v9:= "unexpected end of stream" @kind object;
  #L204704.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20470a.  call `a`(v7) @signature `Lh/n0/i/a$b;.a:()V` @kind virtual;
  #L204710.  throw v8;
  #L204712.  v8:= new `java.lang.IllegalStateException`;
  #L204716.  v9:= "closed" @kind object;
  #L20471a.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L204720.  throw v8;
  #L204722.  v8:= new `java.lang.IllegalArgumentException`;
  #L204726.  v0:= new `java.lang.StringBuilder`;
  #L20472a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L204730.  v1:= "byteCount < 0: " @kind object;
  #L204734.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20473a.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L204740.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L204746.  v9:= temp @kind object;
  #L204748.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20474e.  throw v8;
}
