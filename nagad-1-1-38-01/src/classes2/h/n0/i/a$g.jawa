record `h.n0.i.a$g` @kind class @AccessFlag  extends `h.n0.i.a$b` @kind class {
  `boolean` `h.n0.i.a$g.i` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`h.n0.i.a$g` v1 @kind this, `h.n0.i.a` v2 @kind object) @signature `Lh/n0/i/a$g;.<init>:(Lh/n0/i/a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L204c68.  v0:= 0I;
  #L204c6a.  call `<init>`(v1, v2, v0) @signature `Lh/n0/i/a$b;.<init>:(Lh/n0/i/a;Lh/n0/i/a$a;)V` @kind direct;
  #L204c70.  return @kind void;
}
procedure `void` `<init>`(`h.n0.i.a$g` v0 @kind this, `h.n0.i.a` v1 @kind object, `h.n0.i.a$a` v2 @kind object) @signature `Lh/n0/i/a$g;.<init>:(Lh/n0/i/a;Lh/n0/i/a$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L204c84.  call `<init>`(v0, v1) @signature `Lh/n0/i/a$g;.<init>:(Lh/n0/i/a;)V` @kind direct;
  #L204c8a.  return @kind void;
}
procedure `void` `close`(`h.n0.i.a$g` v1 @kind this) @signature `Lh/n0/i/a$g;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L204c9c.  v0:= v1.`h.n0.i.a$b.g` @type ^`boolean` @kind boolean;
  #L204ca0.  if v0 == 0 then goto L204ca6;
  #L204ca4.  return @kind void;
  #L204ca6.  v0:= v1.`h.n0.i.a$g.i` @type ^`boolean` @kind boolean;
  #L204caa.  if v0 != 0 then goto L204cb4;
  #L204cae.  call `a`(v1) @signature `Lh/n0/i/a$b;.a:()V` @kind virtual;
  #L204cb4.  v0:= 1I;
  #L204cb6.  v1.`h.n0.i.a$b.g` @type ^`boolean` := v0 @kind boolean;
  #L204cba.  return @kind void;
}
procedure `long` `read`(`h.n0.i.a$g` v3 @kind this, `i.e` v4 @kind object, `long` v5 ) @signature `Lh/n0/i/a$g;.read:(Li/e;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L204bd8.  v0:= 0L;
  #L204bdc.  v2:= lcmp(v5, v0);
  #L204be0.  if v2 < 0 then goto L204c2a;
  #L204be4.  v0:= v3.`h.n0.i.a$b.g` @type ^`boolean` @kind boolean;
  #L204be8.  if v0 != 0 then goto L204c1a;
  #L204bec.  v0:= v3.`h.n0.i.a$g.i` @type ^`boolean` @kind boolean;
  #L204bf0.  v1:= -1L;
  #L204bf4.  if v0 == 0 then goto L204bfa;
  #L204bf8.  return v1 @kind wide;
  #L204bfa.  call temp:= `read`(v3, v4, v5) @signature `Lh/n0/i/a$b;.read:(Li/e;J)J` @kind super;
  #L204c00.  v4:= temp @kind wide;
  #L204c02.  v6:= lcmp(v4, v1);
  #L204c06.  if v6 != 0 then goto L204c18;
  #L204c0a.  v4:= 1I;
  #L204c0c.  v3.`h.n0.i.a$g.i` @type ^`boolean` := v4 @kind boolean;
  #L204c10.  call `a`(v3) @signature `Lh/n0/i/a$b;.a:()V` @kind virtual;
  #L204c16.  return v1 @kind wide;
  #L204c18.  return v4 @kind wide;
  #L204c1a.  v4:= new `java.lang.IllegalStateException`;
  #L204c1e.  v5:= "closed" @kind object;
  #L204c22.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L204c28.  throw v4;
  #L204c2a.  v4:= new `java.lang.IllegalArgumentException`;
  #L204c2e.  v0:= new `java.lang.StringBuilder`;
  #L204c32.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L204c38.  v1:= "byteCount < 0: " @kind object;
  #L204c3c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L204c42.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L204c48.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L204c4e.  v5:= temp @kind object;
  #L204c50.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L204c56.  throw v4;
}
