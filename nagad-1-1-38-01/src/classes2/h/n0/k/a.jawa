record `h.n0.k.a` @kind class @AccessFlag PUBLIC extends `java.net.ProxySelector` @kind class {
}
procedure `void` `<init>`(`h.n0.k.a` v0 @kind this) @signature `Lh/n0/k/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L20d6e0.  call `<init>`(v0) @signature `Ljava/net/ProxySelector;.<init>:()V` @kind direct;
  #L20d6e6.  return @kind void;
}
procedure `void` `connectFailed`(`h.n0.k.a` v0 @kind this, `java.net.URI` v1 @kind object, `java.net.SocketAddress` v2 @kind object, `java.io.IOException` v3 @kind object) @signature `Lh/n0/k/a;.connectFailed:(Ljava/net/URI;Ljava/net/SocketAddress;Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;

  #L20d6f8.  return @kind void;
}
procedure `java.util.List` `select`(`h.n0.k.a` v1 @kind this, `java.net.URI` v2 @kind object) @signature `Lh/n0/k/a;.select:(Ljava/net/URI;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20d6ac.  if v2 == 0 then goto L20d6be;
  #L20d6b0.  v2:= `@@java.net.Proxy.NO_PROXY` @type ^`java.net.Proxy` @kind object;
  #L20d6b4.  call temp:= `singletonList`(v2) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L20d6ba.  v2:= temp @kind object;
  #L20d6bc.  return v2 @kind object;
  #L20d6be.  v2:= new `java.lang.IllegalArgumentException`;
  #L20d6c2.  v0:= "uri must not be null" @kind object;
  #L20d6c6.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20d6cc.  throw v2;
}
