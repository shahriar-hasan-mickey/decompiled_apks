record `h.n0.h.e` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<clinit>`() @signature `Lh/n0/h/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L20349c.  v0:= "\"\\" @kind object;
  #L2034a0.  call temp:= `encodeUtf8`(v0) @signature `Li/h;.encodeUtf8:(Ljava/lang/String;)Li/h;` @kind static;
  #L2034a6.  v0:= "\t ,=" @kind object;
  #L2034aa.  call temp:= `encodeUtf8`(v0) @signature `Li/h;.encodeUtf8:(Ljava/lang/String;)Li/h;` @kind static;
  #L2034b0.  return @kind void;
}
procedure `long` `a`(`java.lang.String` v2 @kind object) @signature `Lh/n0/h/e;.a:(Ljava/lang/String;)J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L203468.  v0:= -1L;
  #L20346c.  if v2 != 0 then goto L203472;
  #L203470.  return v0 @kind wide;
  #L203472.  call temp:= `parseLong`(v2) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L203478.  v0:= temp @kind wide;
  #L20347a.  return v0 @kind wide;
  catch `java.lang.NumberFormatException` @[L203472..L20347a] goto L20347a;
}
procedure `long` `contentLength`(`h.i0` v2 @kind object) @signature `Lh/n0/h/e;.contentLength:(Lh/i0;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L203444.  call temp:= `headers`(v2) @signature `Lh/i0;.headers:()Lh/y;` @kind virtual;
  #L20344a.  v2:= temp @kind object;
  #L20344c.  call temp:= `contentLength`(v2) @signature `Lh/n0/h/e;.contentLength:(Lh/y;)J` @kind static;
  #L203452.  v0:= temp @kind wide;
  #L203454.  return v0 @kind wide;
}
procedure `long` `contentLength`(`h.y` v2 @kind object) @signature `Lh/n0/h/e;.contentLength:(Lh/y;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L20341c.  v0:= "Content-Length" @kind object;
  #L203420.  call temp:= `get`(v2, v0) @signature `Lh/y;.get:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L203426.  v2:= temp @kind object;
  #L203428.  call temp:= `a`(v2) @signature `Lh/n0/h/e;.a:(Ljava/lang/String;)J` @kind static;
  #L20342e.  v0:= temp @kind wide;
  #L203430.  return v0 @kind wide;
}
procedure `boolean` `hasBody`(`h.i0` v8 @kind object) @signature `Lh/n0/h/e;.hasBody:(Lh/i0;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2032b4.  call temp:= `request`(v8) @signature `Lh/i0;.request:()Lh/g0;` @kind virtual;
  #L2032ba.  v0:= temp @kind object;
  #L2032bc.  call temp:= `method`(v0) @signature `Lh/g0;.method:()Ljava/lang/String;` @kind virtual;
  #L2032c2.  v0:= temp @kind object;
  #L2032c4.  v1:= "HEAD" @kind object;
  #L2032c8.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2032ce.  v0:= temp;
  #L2032d0.  v1:= 0I;
  #L2032d2.  if v0 == 0 then goto L2032d8;
  #L2032d6.  return v1;
  #L2032d8.  call temp:= `code`(v8) @signature `Lh/i0;.code:()I` @kind virtual;
  #L2032de.  v0:= temp;
  #L2032e0.  v2:= 100I;
  #L2032e4.  v3:= 1I;
  #L2032e6.  if v0 < v2 then goto L2032f2;
  #L2032ea.  v2:= 200I;
  #L2032ee.  if v0 < v2 then goto L203304;
  #L2032f2.  v2:= 204I;
  #L2032f6.  if v0 == v2 then goto L203304;
  #L2032fa.  v2:= 304I;
  #L2032fe.  if v0 == v2 then goto L203304;
  #L203302.  return v3;
  #L203304.  call temp:= `contentLength`(v8) @signature `Lh/n0/h/e;.contentLength:(Lh/i0;)J` @kind static;
  #L20330a.  v4:= temp @kind wide;
  #L20330c.  v6:= -1L;
  #L203310.  v0:= lcmp(v4, v6);
  #L203314.  if v0 != 0 then goto L203338;
  #L203318.  v0:= "Transfer-Encoding" @kind object;
  #L20331c.  call temp:= `header`(v8, v0) @signature `Lh/i0;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L203322.  v8:= temp @kind object;
  #L203324.  v0:= "chunked" @kind object;
  #L203328.  call temp:= `equalsIgnoreCase`(v0, v8) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L20332e.  v8:= temp;
  #L203330.  if v8 == 0 then goto L203336;
  #L203334.  goto L203338;
  #L203336.  return v1;
  #L203338.  return v3;
}
procedure `int` `parseSeconds`(`java.lang.String` v3 @kind object, `int` v4 ) @signature `Lh/n0/h/e;.parseSeconds:(Ljava/lang/String;I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L20334c.  call temp:= `parseLong`(v3) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L203352.  v3:= temp @kind wide;
  #L203354.  v0:= 2147483647L;
  #L20335a.  v2:= lcmp(v3, v0);
  #L20335e.  if v2 <= 0 then goto L20336a;
  #L203362.  v3:= 2147483647I;
  #L203368.  return v3;
  #L20336a.  v0:= 0L;
  #L20336e.  v2:= lcmp(v3, v0);
  #L203372.  if v2 >= 0 then goto L20337a;
  #L203376.  v3:= 0I;
  #L203378.  return v3;
  #L20337a.  v4:= (`int`) v3 @kind l2i;
  #L20337c.  return v4;
  catch `java.lang.NumberFormatException` @[L20334c..L203354] goto L20337c;
}
procedure `void` `receiveHeaders`(`h.r` v1 @kind object, `h.z` v2 @kind object, `h.y` v3 @kind object) @signature `Lh/n0/h/e;.receiveHeaders:(Lh/r;Lh/z;Lh/y;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2034c4.  v0:= `@@h.r.a` @type ^`h.r` @kind object;
  #L2034c8.  if v1 != v0 then goto L2034ce;
  #L2034cc.  return @kind void;
  #L2034ce.  call temp:= `parseAll`(v2, v3) @signature `Lh/q;.parseAll:(Lh/z;Lh/y;)Ljava/util/List;` @kind static;
  #L2034d4.  v3:= temp @kind object;
  #L2034d6.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2034dc.  v0:= temp;
  #L2034de.  if v0 == 0 then goto L2034e4;
  #L2034e2.  return @kind void;
  #L2034e4.  call `saveFromResponse`(v1, v2, v3) @signature `Lh/r;.saveFromResponse:(Lh/z;Ljava/util/List;)V` @kind interface;
  #L2034ea.  return @kind void;
}
procedure `int` `skipUntil`(`java.lang.String` v2 @kind object, `int` v3 , `java.lang.String` v4 @kind object) @signature `Lh/n0/h/e;.skipUntil:(Ljava/lang/String;ILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2033a0.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2033a6.  v0:= temp;
  #L2033a8.  if v3 >= v0 then goto L2033ca;
  #L2033ac.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2033b2.  v0:= temp;
  #L2033b4.  call temp:= `indexOf`(v4, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L2033ba.  v0:= temp;
  #L2033bc.  v1:= -1I;
  #L2033be.  if v0 == v1 then goto L2033c4;
  #L2033c2.  goto L2033ca;
  #L2033c4.  v3:= v3 + 1;
  #L2033c8.  goto L2033a0;
  #L2033ca.  return v3;
}
procedure `int` `skipWhitespace`(`java.lang.String` v2 @kind object, `int` v3 ) @signature `Lh/n0/h/e;.skipWhitespace:(Ljava/lang/String;I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2033dc.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2033e2.  v0:= temp;
  #L2033e4.  if v3 >= v0 then goto L203408;
  #L2033e8.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2033ee.  v0:= temp;
  #L2033f0.  v1:= 32I;
  #L2033f4.  if v0 == v1 then goto L203402;
  #L2033f8.  v1:= 9I;
  #L2033fc.  if v0 == v1 then goto L203402;
  #L203400.  goto L203408;
  #L203402.  v3:= v3 + 1;
  #L203406.  goto L2033dc;
  #L203408.  return v3;
}
