record `h.c0` @kind class @AccessFlag PUBLIC_FINAL extends `h.h0` @kind class {
  `i.h` `h.c0.a` @AccessFlag PRIVATE_FINAL;
  `h.b0` `h.c0.b` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `h.c0.c` @AccessFlag PRIVATE_FINAL;
  `long` `h.c0.d` @AccessFlag PRIVATE;
}
global `h.b0` `@@h.c0.e` @AccessFlag PUBLIC_STATIC_FINAL;
global `h.b0` `@@h.c0.f` @AccessFlag PUBLIC_STATIC_FINAL;
global `byte`[] `@@h.c0.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@h.c0.h` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@h.c0.i` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lh/c0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1fa9e8.  v0:= "multipart/mixed" @kind object;
  #L1fa9ec.  call temp:= `get`(v0) @signature `Lh/b0;.get:(Ljava/lang/String;)Lh/b0;` @kind static;
  #L1fa9f2.  v0:= temp @kind object;
  #L1fa9f4.  `@@h.c0.e` @type ^`h.b0` := v0 @kind object;
  #L1fa9f8.  v0:= "multipart/alternative" @kind object;
  #L1fa9fc.  call temp:= `get`(v0) @signature `Lh/b0;.get:(Ljava/lang/String;)Lh/b0;` @kind static;
  #L1faa02.  v0:= "multipart/digest" @kind object;
  #L1faa06.  call temp:= `get`(v0) @signature `Lh/b0;.get:(Ljava/lang/String;)Lh/b0;` @kind static;
  #L1faa0c.  v0:= "multipart/parallel" @kind object;
  #L1faa10.  call temp:= `get`(v0) @signature `Lh/b0;.get:(Ljava/lang/String;)Lh/b0;` @kind static;
  #L1faa16.  v0:= "multipart/form-data" @kind object;
  #L1faa1a.  call temp:= `get`(v0) @signature `Lh/b0;.get:(Ljava/lang/String;)Lh/b0;` @kind static;
  #L1faa20.  v0:= temp @kind object;
  #L1faa22.  `@@h.c0.f` @type ^`h.b0` := v0 @kind object;
  #L1faa26.  v0:= 2I;
  #L1faa28.  v1:= new `byte`[v0];
  #L1faa2c.  goto L1faa54;
  #L1faa32.  `@@h.c0.g` @type ^`byte`[] := v1 @kind object;
  #L1faa36.  v1:= new `byte`[v0];
  #L1faa3a.  goto L1faa60;
  #L1faa40.  `@@h.c0.h` @type ^`byte`[] := v1 @kind object;
  #L1faa44.  v0:= new `byte`[v0];
  #L1faa48.  goto L1faa6c;
  #L1faa4e.  `@@h.c0.i` @type ^`byte`[] := v0 @kind object;
  #L1faa52.  return @kind void;
  #L1faa54.  v1:= (58I, 32I) @kind object;
  #L1faa5d.  goto L1faa32;
  #L1faa5e.  
  #L1faa60.  v1:= (13I, 10I) @kind object;
  #L1faa69.  goto L1faa40;
  #L1faa6a.  
  #L1faa6c.  v0:= (45I, 45I) @kind object;
  #L1faa75.  goto L1faa4e;
}
procedure `void` `<init>`(`h.c0` v2 @kind this, `i.h` v3 @kind object, `h.b0` v4 @kind object, `java.util.List` v5 @kind object) @signature `Lh/c0;.<init>:(Li/h;Lh/b0;Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1faa88.  call `<init>`(v2) @signature `Lh/h0;.<init>:()V` @kind direct;
  #L1faa8e.  v0:= -1L;
  #L1faa92.  v2.`h.c0.d` @type ^`long` := v0 @kind wide;
  #L1faa96.  v2.`h.c0.a` @type ^`i.h` := v3 @kind object;
  #L1faa9a.  v0:= new `java.lang.StringBuilder`;
  #L1faa9e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1faaa4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1faaaa.  v4:= "; boundary=" @kind object;
  #L1faaae.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1faab4.  call temp:= `utf8`(v3) @signature `Li/h;.utf8:()Ljava/lang/String;` @kind virtual;
  #L1faaba.  v3:= temp @kind object;
  #L1faabc.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1faac2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1faac8.  v3:= temp @kind object;
  #L1faaca.  call temp:= `get`(v3) @signature `Lh/b0;.get:(Ljava/lang/String;)Lh/b0;` @kind static;
  #L1faad0.  v3:= temp @kind object;
  #L1faad2.  v2.`h.c0.b` @type ^`h.b0` := v3 @kind object;
  #L1faad6.  call temp:= `immutableList`(v5) @signature `Lh/n0/e;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1faadc.  v3:= temp @kind object;
  #L1faade.  v2.`h.c0.c` @type ^`java.util.List` := v3 @kind object;
  #L1faae2.  return @kind void;
}
procedure `long` `a`(`h.c0` v12 @kind this, `i.f` v13 @kind object, `boolean` v14 ) @signature `Lh/c0;.a:(Li/f;Z)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1fa834.  if v14 == 0 then goto L1fa846;
  #L1fa838.  v13:= new `i.e`;
  #L1fa83c.  call `<init>`(v13) @signature `Li/e;.<init>:()V` @kind direct;
  #L1fa842.  v0:= v13 @kind object;
  #L1fa844.  goto L1fa848;
  #L1fa846.  v0:= 0I;
  #L1fa848.  v1:= v12.`h.c0.c` @type ^`java.util.List` @kind object;
  #L1fa84c.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1fa852.  v1:= temp;
  #L1fa854.  v2:= 0I;
  #L1fa856.  v3:= 0L;
  #L1fa85a.  v4:= v3 @kind wide;
  #L1fa85c.  v3:= 0I;
  #L1fa85e.  if v3 >= v1 then goto L1fa982;
  #L1fa862.  v6:= v12.`h.c0.c` @type ^`java.util.List` @kind object;
  #L1fa866.  call temp:= `get`(v6, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1fa86c.  v6:= temp @kind object;
  #L1fa86e.  v6:= (`h.c0$b`) v6 @kind object;
  #L1fa872.  v7:= v6.`h.c0$b.a` @type ^`h.y` @kind object;
  #L1fa876.  v6:= v6.`h.c0$b.b` @type ^`h.h0` @kind object;
  #L1fa87a.  v8:= `@@h.c0.i` @type ^`byte`[] @kind object;
  #L1fa87e.  call temp:= `write`(v13, v8) @signature `Li/f;.write:([B)Li/f;` @kind interface;
  #L1fa884.  v8:= v12.`h.c0.a` @type ^`i.h` @kind object;
  #L1fa888.  call temp:= `write`(v13, v8) @signature `Li/f;.write:(Li/h;)Li/f;` @kind interface;
  #L1fa88e.  v8:= `@@h.c0.h` @type ^`byte`[] @kind object;
  #L1fa892.  call temp:= `write`(v13, v8) @signature `Li/f;.write:([B)Li/f;` @kind interface;
  #L1fa898.  if v7 == 0 then goto L1fa8e6;
  #L1fa89c.  call temp:= `size`(v7) @signature `Lh/y;.size:()I` @kind virtual;
  #L1fa8a2.  v8:= temp;
  #L1fa8a4.  v9:= 0I;
  #L1fa8a6.  if v9 >= v8 then goto L1fa8e6;
  #L1fa8aa.  call temp:= `name`(v7, v9) @signature `Lh/y;.name:(I)Ljava/lang/String;` @kind virtual;
  #L1fa8b0.  v10:= temp @kind object;
  #L1fa8b2.  call temp:= `writeUtf8`(v13, v10) @signature `Li/f;.writeUtf8:(Ljava/lang/String;)Li/f;` @kind interface;
  #L1fa8b8.  v10:= temp @kind object;
  #L1fa8ba.  v11:= `@@h.c0.g` @type ^`byte`[] @kind object;
  #L1fa8be.  call temp:= `write`(v10, v11) @signature `Li/f;.write:([B)Li/f;` @kind interface;
  #L1fa8c4.  v10:= temp @kind object;
  #L1fa8c6.  call temp:= `value`(v7, v9) @signature `Lh/y;.value:(I)Ljava/lang/String;` @kind virtual;
  #L1fa8cc.  v11:= temp @kind object;
  #L1fa8ce.  call temp:= `writeUtf8`(v10, v11) @signature `Li/f;.writeUtf8:(Ljava/lang/String;)Li/f;` @kind interface;
  #L1fa8d4.  v10:= temp @kind object;
  #L1fa8d6.  v11:= `@@h.c0.h` @type ^`byte`[] @kind object;
  #L1fa8da.  call temp:= `write`(v10, v11) @signature `Li/f;.write:([B)Li/f;` @kind interface;
  #L1fa8e0.  v9:= v9 + 1;
  #L1fa8e4.  goto L1fa8a6;
  #L1fa8e6.  call temp:= `contentType`(v6) @signature `Lh/h0;.contentType:()Lh/b0;` @kind virtual;
  #L1fa8ec.  v7:= temp @kind object;
  #L1fa8ee.  if v7 == 0 then goto L1fa918;
  #L1fa8f2.  v8:= "Content-Type: " @kind object;
  #L1fa8f6.  call temp:= `writeUtf8`(v13, v8) @signature `Li/f;.writeUtf8:(Ljava/lang/String;)Li/f;` @kind interface;
  #L1fa8fc.  v8:= temp @kind object;
  #L1fa8fe.  call temp:= `toString`(v7) @signature `Lh/b0;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fa904.  v7:= temp @kind object;
  #L1fa906.  call temp:= `writeUtf8`(v8, v7) @signature `Li/f;.writeUtf8:(Ljava/lang/String;)Li/f;` @kind interface;
  #L1fa90c.  v7:= temp @kind object;
  #L1fa90e.  v8:= `@@h.c0.h` @type ^`byte`[] @kind object;
  #L1fa912.  call temp:= `write`(v7, v8) @signature `Li/f;.write:([B)Li/f;` @kind interface;
  #L1fa918.  call temp:= `contentLength`(v6) @signature `Lh/h0;.contentLength:()J` @kind virtual;
  #L1fa91e.  v7:= temp @kind wide;
  #L1fa920.  v9:= -1L;
  #L1fa924.  v11:= lcmp(v7, v9);
  #L1fa928.  if v11 == 0 then goto L1fa94c;
  #L1fa92c.  v9:= "Content-Length: " @kind object;
  #L1fa930.  call temp:= `writeUtf8`(v13, v9) @signature `Li/f;.writeUtf8:(Ljava/lang/String;)Li/f;` @kind interface;
  #L1fa936.  v9:= temp @kind object;
  #L1fa938.  call temp:= `writeDecimalLong`(v9, v7) @signature `Li/f;.writeDecimalLong:(J)Li/f;` @kind interface;
  #L1fa93e.  v9:= temp @kind object;
  #L1fa940.  v10:= `@@h.c0.h` @type ^`byte`[] @kind object;
  #L1fa944.  call temp:= `write`(v9, v10) @signature `Li/f;.write:([B)Li/f;` @kind interface;
  #L1fa94a.  goto L1fa958;
  #L1fa94c.  if v14 == 0 then goto L1fa958;
  #L1fa950.  call `clear`(v0) @signature `Li/e;.clear:()V` @kind virtual;
  #L1fa956.  return v9 @kind wide;
  #L1fa958.  v9:= `@@h.c0.h` @type ^`byte`[] @kind object;
  #L1fa95c.  call temp:= `write`(v13, v9) @signature `Li/f;.write:([B)Li/f;` @kind interface;
  #L1fa962.  if v14 == 0 then goto L1fa96a;
  #L1fa966.  v4:= v4 + v7 @kind long;
  #L1fa968.  goto L1fa970;
  #L1fa96a.  call `writeTo`(v6, v13) @signature `Lh/h0;.writeTo:(Li/f;)V` @kind virtual;
  #L1fa970.  v6:= `@@h.c0.h` @type ^`byte`[] @kind object;
  #L1fa974.  call temp:= `write`(v13, v6) @signature `Li/f;.write:([B)Li/f;` @kind interface;
  #L1fa97a.  v3:= v3 + 1;
  #L1fa97e.  goto L1fa85e;
  #L1fa982.  v1:= `@@h.c0.i` @type ^`byte`[] @kind object;
  #L1fa986.  call temp:= `write`(v13, v1) @signature `Li/f;.write:([B)Li/f;` @kind interface;
  #L1fa98c.  v1:= v12.`h.c0.a` @type ^`i.h` @kind object;
  #L1fa990.  call temp:= `write`(v13, v1) @signature `Li/f;.write:(Li/h;)Li/f;` @kind interface;
  #L1fa996.  v1:= `@@h.c0.i` @type ^`byte`[] @kind object;
  #L1fa99a.  call temp:= `write`(v13, v1) @signature `Li/f;.write:([B)Li/f;` @kind interface;
  #L1fa9a0.  v1:= `@@h.c0.h` @type ^`byte`[] @kind object;
  #L1fa9a4.  call temp:= `write`(v13, v1) @signature `Li/f;.write:([B)Li/f;` @kind interface;
  #L1fa9aa.  if v14 == 0 then goto L1fa9be;
  #L1fa9ae.  call temp:= `size`(v0) @signature `Li/e;.size:()J` @kind virtual;
  #L1fa9b4.  v13:= temp @kind wide;
  #L1fa9b6.  v4:= v4 + v13 @kind long;
  #L1fa9b8.  call `clear`(v0) @signature `Li/e;.clear:()V` @kind virtual;
  #L1fa9be.  return v4 @kind wide;
}
procedure `void` `a`(`java.lang.StringBuilder` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lh/c0;.a:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1faaf4.  v0:= 34I;
  #L1faaf8.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1faafe.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1fab04.  v1:= temp;
  #L1fab06.  v2:= 0I;
  #L1fab08.  if v2 >= v1 then goto L1fab58;
  #L1fab0c.  call temp:= `charAt`(v6, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1fab12.  v3:= temp;
  #L1fab14.  v4:= 10I;
  #L1fab18.  if v3 == v4 then goto L1fab48;
  #L1fab1c.  v4:= 13I;
  #L1fab20.  if v3 == v4 then goto L1fab3c;
  #L1fab24.  if v3 == v0 then goto L1fab30;
  #L1fab28.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fab2e.  goto L1fab52;
  #L1fab30.  v3:= "%22" @kind object;
  #L1fab34.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fab3a.  goto L1fab52;
  #L1fab3c.  v3:= "%0D" @kind object;
  #L1fab40.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fab46.  goto L1fab52;
  #L1fab48.  v3:= "%0A" @kind object;
  #L1fab4c.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fab52.  v2:= v2 + 1;
  #L1fab56.  goto L1fab08;
  #L1fab58.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fab5e.  return @kind void;
}
procedure `long` `contentLength`(`h.c0` v5 @kind this) @signature `Lh/c0;.contentLength:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1fa800.  v0:= v5.`h.c0.d` @type ^`long` @kind wide;
  #L1fa804.  v2:= -1L;
  #L1fa808.  v4:= lcmp(v0, v2);
  #L1fa80c.  if v4 == 0 then goto L1fa812;
  #L1fa810.  return v0 @kind wide;
  #L1fa812.  v0:= 0I;
  #L1fa814.  v1:= 1I;
  #L1fa816.  call temp:= `a`(v5, v0, v1) @signature `Lh/c0;.a:(Li/f;Z)J` @kind direct;
  #L1fa81c.  v0:= temp @kind wide;
  #L1fa81e.  v5.`h.c0.d` @type ^`long` := v0 @kind wide;
  #L1fa822.  return v0 @kind wide;
}
procedure `h.b0` `contentType`(`h.c0` v1 @kind this) @signature `Lh/c0;.contentType:()Lh/b0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fa9d0.  v0:= v1.`h.c0.b` @type ^`h.b0` @kind object;
  #L1fa9d4.  return v0 @kind object;
}
procedure `void` `writeTo`(`h.c0` v1 @kind this, `i.f` v2 @kind object) @signature `Lh/c0;.writeTo:(Li/f;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fab70.  v0:= 0I;
  #L1fab72.  call temp:= `a`(v1, v2, v0) @signature `Lh/c0;.a:(Li/f;Z)J` @kind direct;
  #L1fab78.  return @kind void;
}
