record `h.x` @kind class @AccessFlag PUBLIC_FINAL {
  `h.l0` `h.x.a` @AccessFlag PRIVATE_FINAL;
  `h.m` `h.x.b` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `h.x.c` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `h.x.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`h.x` v0 @kind this, `h.l0` v1 @kind object, `h.m` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lh/x;.<init>:(Lh/l0;Lh/m;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1f8078.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f807e.  v0.`h.x.a` @type ^`h.l0` := v1 @kind object;
  #L1f8082.  v0.`h.x.b` @type ^`h.m` := v2 @kind object;
  #L1f8086.  v0.`h.x.c` @type ^`java.util.List` := v3 @kind object;
  #L1f808a.  v0.`h.x.d` @type ^`java.util.List` := v4 @kind object;
  #L1f808e.  return @kind void;
}
procedure `java.util.List` `a`(`h.x` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lh/x;.a:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1f7ee4.  v0:= new `java.util.ArrayList`;
  #L1f7ee8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1f7eee.  call temp:= `iterator`(v4) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1f7ef4.  v4:= temp @kind object;
  #L1f7ef6.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f7efc.  v1:= temp;
  #L1f7efe.  if v1 == 0 then goto L1f7f42;
  #L1f7f02.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f7f08.  v1:= temp @kind object;
  #L1f7f0a.  v1:= (`java.security.cert.Certificate`) v1 @kind object;
  #L1f7f0e.  v2:= instanceof @variable v1 @type ^`java.security.cert.X509Certificate` @kind boolean;
  #L1f7f12.  if v2 == 0 then goto L1f7f32;
  #L1f7f16.  v1:= (`java.security.cert.X509Certificate`) v1 @kind object;
  #L1f7f1a.  call temp:= `getSubjectDN`(v1) @signature `Ljava/security/cert/X509Certificate;.getSubjectDN:()Ljava/security/Principal;` @kind virtual;
  #L1f7f20.  v1:= temp @kind object;
  #L1f7f22.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f7f28.  v1:= temp @kind object;
  #L1f7f2a.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f7f30.  goto L1f7ef6;
  #L1f7f32.  call temp:= `getType`(v1) @signature `Ljava/security/cert/Certificate;.getType:()Ljava/lang/String;` @kind virtual;
  #L1f7f38.  v1:= temp @kind object;
  #L1f7f3a.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f7f40.  goto L1f7ef6;
  #L1f7f42.  return v0 @kind object;
}
procedure `h.x` `get`(`javax.net.ssl.SSLSession` v4 @kind object) @signature `Lh/x;.get:(Ljavax/net/ssl/SSLSession;)Lh/x;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f7f84.  call temp:= `getCipherSuite`(v4) @signature `Ljavax/net/ssl/SSLSession;.getCipherSuite:()Ljava/lang/String;` @kind interface;
  #L1f7f8a.  v0:= temp @kind object;
  #L1f7f8c.  if v0 == 0 then goto L1f8048;
  #L1f7f90.  v1:= "SSL_NULL_WITH_NULL_NULL" @kind object;
  #L1f7f94.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f7f9a.  v1:= temp;
  #L1f7f9c.  if v1 != 0 then goto L1f8038;
  #L1f7fa0.  call temp:= `forJavaName`(v0) @signature `Lh/m;.forJavaName:(Ljava/lang/String;)Lh/m;` @kind static;
  #L1f7fa6.  v0:= temp @kind object;
  #L1f7fa8.  call temp:= `getProtocol`(v4) @signature `Ljavax/net/ssl/SSLSession;.getProtocol:()Ljava/lang/String;` @kind interface;
  #L1f7fae.  v1:= temp @kind object;
  #L1f7fb0.  if v1 == 0 then goto L1f8028;
  #L1f7fb4.  v2:= "NONE" @kind object;
  #L1f7fb8.  call temp:= `equals`(v2, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f7fbe.  v2:= temp;
  #L1f7fc0.  if v2 != 0 then goto L1f8018;
  #L1f7fc4.  call temp:= `forJavaName`(v1) @signature `Lh/l0;.forJavaName:(Ljava/lang/String;)Lh/l0;` @kind static;
  #L1f7fca.  v1:= temp @kind object;
  #L1f7fcc.  call temp:= `getPeerCertificates`(v4) @signature `Ljavax/net/ssl/SSLSession;.getPeerCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L1f7fd2.  v2:= temp @kind object;
  #L1f7fd4.  goto L1f7fd8;
  #L1f7fd6.  v2:= 0I;
  #L1f7fd8.  if v2 == 0 then goto L1f7fe6;
  #L1f7fdc.  call temp:= `immutableList`(v2) @signature `Lh/n0/e;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L1f7fe2.  v2:= temp @kind object;
  #L1f7fe4.  goto L1f7fee;
  #L1f7fe6.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L1f7fec.  v2:= temp @kind object;
  #L1f7fee.  call temp:= `getLocalCertificates`(v4) @signature `Ljavax/net/ssl/SSLSession;.getLocalCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L1f7ff4.  v4:= temp @kind object;
  #L1f7ff6.  if v4 == 0 then goto L1f8004;
  #L1f7ffa.  call temp:= `immutableList`(v4) @signature `Lh/n0/e;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L1f8000.  v4:= temp @kind object;
  #L1f8002.  goto L1f800c;
  #L1f8004.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L1f800a.  v4:= temp @kind object;
  #L1f800c.  v3:= new `h.x`;
  #L1f8010.  call `<init>`(v3, v1, v0, v2, v4) @signature `Lh/x;.<init>:(Lh/l0;Lh/m;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L1f8016.  return v3 @kind object;
  #L1f8018.  v4:= new `java.io.IOException`;
  #L1f801c.  v0:= "tlsVersion == NONE" @kind object;
  #L1f8020.  call `<init>`(v4, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f8026.  throw v4;
  #L1f8028.  v4:= new `java.lang.IllegalStateException`;
  #L1f802c.  v0:= "tlsVersion == null" @kind object;
  #L1f8030.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f8036.  throw v4;
  #L1f8038.  v4:= new `java.io.IOException`;
  #L1f803c.  v0:= "cipherSuite == SSL_NULL_WITH_NULL_NULL" @kind object;
  #L1f8040.  call `<init>`(v4, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f8046.  throw v4;
  #L1f8048.  v4:= new `java.lang.IllegalStateException`;
  #L1f804c.  v0:= "cipherSuite == null" @kind object;
  #L1f8050.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f8056.  throw v4;
  catch `javax.net.ssl.SSLPeerUnverifiedException` @[L1f7fcc..L1f7fd4] goto L1f7fd6;
}
procedure `h.m` `cipherSuite`(`h.x` v1 @kind this) @signature `Lh/x;.cipherSuite:()Lh/m;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f7f6c.  v0:= v1.`h.x.b` @type ^`h.m` @kind object;
  #L1f7f70.  return v0 @kind object;
}
procedure `boolean` `equals`(`h.x` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lh/x;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1f7d84.  v0:= instanceof @variable v4 @type ^`h.x` @kind boolean;
  #L1f7d88.  v1:= 0I;
  #L1f7d8a.  if v0 != 0 then goto L1f7d90;
  #L1f7d8e.  return v1;
  #L1f7d90.  v4:= (`h.x`) v4 @kind object;
  #L1f7d94.  v0:= v3.`h.x.a` @type ^`h.l0` @kind object;
  #L1f7d98.  v2:= v4.`h.x.a` @type ^`h.l0` @kind object;
  #L1f7d9c.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Enum;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f7da2.  v0:= temp;
  #L1f7da4.  if v0 == 0 then goto L1f7de6;
  #L1f7da8.  v0:= v3.`h.x.b` @type ^`h.m` @kind object;
  #L1f7dac.  v2:= v4.`h.x.b` @type ^`h.m` @kind object;
  #L1f7db0.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f7db6.  v0:= temp;
  #L1f7db8.  if v0 == 0 then goto L1f7de6;
  #L1f7dbc.  v0:= v3.`h.x.c` @type ^`java.util.List` @kind object;
  #L1f7dc0.  v2:= v4.`h.x.c` @type ^`java.util.List` @kind object;
  #L1f7dc4.  call temp:= `equals`(v0, v2) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L1f7dca.  v0:= temp;
  #L1f7dcc.  if v0 == 0 then goto L1f7de6;
  #L1f7dd0.  v0:= v3.`h.x.d` @type ^`java.util.List` @kind object;
  #L1f7dd4.  v4:= v4.`h.x.d` @type ^`java.util.List` @kind object;
  #L1f7dd8.  call temp:= `equals`(v0, v4) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L1f7dde.  v4:= temp;
  #L1f7de0.  if v4 == 0 then goto L1f7de6;
  #L1f7de4.  v1:= 1I;
  #L1f7de6.  return v1;
}
procedure `int` `hashCode`(`h.x` v2 @kind this) @signature `Lh/x;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f7df8.  v0:= v2.`h.x.a` @type ^`h.l0` @kind object;
  #L1f7dfc.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Enum;.hashCode:()I` @kind virtual;
  #L1f7e02.  v0:= temp;
  #L1f7e04.  v1:= 527I;
  #L1f7e08.  v1:= v1 + v0 @kind int;
  #L1f7e0a.  v1:= v1 * 31;
  #L1f7e0e.  v0:= v2.`h.x.b` @type ^`h.m` @kind object;
  #L1f7e12.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1f7e18.  v0:= temp;
  #L1f7e1a.  v1:= v1 + v0 @kind int;
  #L1f7e1c.  v1:= v1 * 31;
  #L1f7e20.  v0:= v2.`h.x.c` @type ^`java.util.List` @kind object;
  #L1f7e24.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L1f7e2a.  v0:= temp;
  #L1f7e2c.  v1:= v1 + v0 @kind int;
  #L1f7e2e.  v1:= v1 * 31;
  #L1f7e32.  v0:= v2.`h.x.d` @type ^`java.util.List` @kind object;
  #L1f7e36.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L1f7e3c.  v0:= temp;
  #L1f7e3e.  v1:= v1 + v0 @kind int;
  #L1f7e40.  return v1;
}
procedure `java.util.List` `peerCertificates`(`h.x` v1 @kind this) @signature `Lh/x;.peerCertificates:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f7f54.  v0:= v1.`h.x.c` @type ^`java.util.List` @kind object;
  #L1f7f58.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`h.x` v2 @kind this) @signature `Lh/x;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f7e54.  v0:= new `java.lang.StringBuilder`;
  #L1f7e58.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1f7e5e.  v1:= "Handshake{tlsVersion=" @kind object;
  #L1f7e62.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f7e68.  v1:= v2.`h.x.a` @type ^`h.l0` @kind object;
  #L1f7e6c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f7e72.  v1:= " cipherSuite=" @kind object;
  #L1f7e76.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f7e7c.  v1:= v2.`h.x.b` @type ^`h.m` @kind object;
  #L1f7e80.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f7e86.  v1:= " peerCertificates=" @kind object;
  #L1f7e8a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f7e90.  v1:= v2.`h.x.c` @type ^`java.util.List` @kind object;
  #L1f7e94.  call temp:= `a`(v2, v1) @signature `Lh/x;.a:(Ljava/util/List;)Ljava/util/List;` @kind direct;
  #L1f7e9a.  v1:= temp @kind object;
  #L1f7e9c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f7ea2.  v1:= " localCertificates=" @kind object;
  #L1f7ea6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f7eac.  v1:= v2.`h.x.d` @type ^`java.util.List` @kind object;
  #L1f7eb0.  call temp:= `a`(v2, v1) @signature `Lh/x;.a:(Ljava/util/List;)Ljava/util/List;` @kind direct;
  #L1f7eb6.  v1:= temp @kind object;
  #L1f7eb8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f7ebe.  v1:= 125I;
  #L1f7ec2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f7ec8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f7ece.  v0:= temp @kind object;
  #L1f7ed0.  return v0 @kind object;
}
