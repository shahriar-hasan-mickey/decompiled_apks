record `h.z` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `h.z.a` @AccessFlag FINAL;
  `java.lang.String` `h.z.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `h.z.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `h.z.d` @AccessFlag FINAL;
  `int` `h.z.e` @AccessFlag FINAL;
  `java.util.List` `h.z.f` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `h.z.g` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `h.z.h` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `h.z.i` @AccessFlag PRIVATE_FINAL;
}
global `char`[] `@@h.z.j` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lh/z;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1f9e2c.  v0:= 16I;
  #L1f9e30.  v0:= new `char`[v0];
  #L1f9e34.  goto L1f9e40;
  #L1f9e3a.  `@@h.z.j` @type ^`char`[] := v0 @kind object;
  #L1f9e3e.  return @kind void;
  #L1f9e40.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 65I, 66I, 67I, 68I, 69I, 70I) @kind object;
  #L1f9e67.  goto L1f9e3a;
}
procedure `void` `<init>`(`h.z` v4 @kind this, `h.z$a` v5 @kind object) @signature `Lh/z;.<init>:(Lh/z$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f9e78.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f9e7e.  v0:= v5.`h.z$a.a` @type ^`java.lang.String` @kind object;
  #L1f9e82.  v4.`h.z.a` @type ^`java.lang.String` := v0 @kind object;
  #L1f9e86.  v0:= v5.`h.z$a.b` @type ^`java.lang.String` @kind object;
  #L1f9e8a.  v1:= 0I;
  #L1f9e8c.  call temp:= `a`(v0, v1) @signature `Lh/z;.a:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L1f9e92.  v0:= temp @kind object;
  #L1f9e94.  v4.`h.z.b` @type ^`java.lang.String` := v0 @kind object;
  #L1f9e98.  v0:= v5.`h.z$a.c` @type ^`java.lang.String` @kind object;
  #L1f9e9c.  call temp:= `a`(v0, v1) @signature `Lh/z;.a:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L1f9ea2.  v0:= temp @kind object;
  #L1f9ea4.  v4.`h.z.c` @type ^`java.lang.String` := v0 @kind object;
  #L1f9ea8.  v0:= v5.`h.z$a.d` @type ^`java.lang.String` @kind object;
  #L1f9eac.  v4.`h.z.d` @type ^`java.lang.String` := v0 @kind object;
  #L1f9eb0.  call temp:= `a`(v5) @signature `Lh/z$a;.a:()I` @kind virtual;
  #L1f9eb6.  v0:= temp;
  #L1f9eb8.  v4.`h.z.e` @type ^`int` := v0;
  #L1f9ebc.  v0:= v5.`h.z$a.f` @type ^`java.util.List` @kind object;
  #L1f9ec0.  call temp:= `a`(v4, v0, v1) @signature `Lh/z;.a:(Ljava/util/List;Z)Ljava/util/List;` @kind direct;
  #L1f9ec6.  v0:= temp @kind object;
  #L1f9ec8.  v4.`h.z.f` @type ^`java.util.List` := v0 @kind object;
  #L1f9ecc.  v0:= v5.`h.z$a.g` @type ^`java.util.List` @kind object;
  #L1f9ed0.  v2:= 0I;
  #L1f9ed2.  if v0 == 0 then goto L1f9ee2;
  #L1f9ed6.  v3:= 1I;
  #L1f9ed8.  call temp:= `a`(v4, v0, v3) @signature `Lh/z;.a:(Ljava/util/List;Z)Ljava/util/List;` @kind direct;
  #L1f9ede.  v0:= temp @kind object;
  #L1f9ee0.  goto L1f9ee4;
  #L1f9ee2.  v0:= v2 @kind object;
  #L1f9ee4.  v4.`h.z.g` @type ^`java.util.List` := v0 @kind object;
  #L1f9ee8.  v0:= v5.`h.z$a.h` @type ^`java.lang.String` @kind object;
  #L1f9eec.  if v0 == 0 then goto L1f9ef8;
  #L1f9ef0.  call temp:= `a`(v0, v1) @signature `Lh/z;.a:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L1f9ef6.  v2:= temp @kind object;
  #L1f9ef8.  v4.`h.z.h` @type ^`java.lang.String` := v2 @kind object;
  #L1f9efc.  call temp:= `toString`(v5) @signature `Lh/z$a;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f9f02.  v5:= temp @kind object;
  #L1f9f04.  v4.`h.z.i` @type ^`java.lang.String` := v5 @kind object;
  #L1f9f08.  return @kind void;
}
procedure `java.lang.String` `a`(`java.lang.String` v11 @kind object, `int` v12 , `int` v13 , `java.lang.String` v14 @kind object, `boolean` v15 , `boolean` v16 , `boolean` v17 , `boolean` v18 , `java.nio.charset.Charset` v19 @kind object) @signature `Lh/z;.a:(Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1f9694.  v1:= v11 @kind object;
  #L1f9696.  v3:= v13;
  #L1f9698.  v2:= v12;
  #L1f969a.  if v2 >= v3 then goto L1f9746;
  #L1f969e.  call temp:= `codePointAt`(v11, v2) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L1f96a4.  v0:= temp;
  #L1f96a6.  v4:= 32I;
  #L1f96aa.  if v0 < v4 then goto L1f9708;
  #L1f96ae.  v4:= 127I;
  #L1f96b2.  if v0 == v4 then goto L1f9708;
  #L1f96b6.  v4:= 128I;
  #L1f96ba.  if v0 < v4 then goto L1f96c2;
  #L1f96be.  if v18 != 0 then goto L1f9708;
  #L1f96c2.  v4:= v14 @kind object;
  #L1f96c4.  call temp:= `indexOf`(v14, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L1f96ca.  v5:= temp;
  #L1f96cc.  v6:= -1I;
  #L1f96ce.  if v5 != v6 then goto L1f970a;
  #L1f96d2.  v5:= 37I;
  #L1f96d6.  if v0 != v5 then goto L1f96ee;
  #L1f96da.  if v15 == 0 then goto L1f970a;
  #L1f96de.  if v16 == 0 then goto L1f96ee;
  #L1f96e2.  call temp:= `a`(v11, v2, v13) @signature `Lh/z;.a:(Ljava/lang/String;II)Z` @kind static;
  #L1f96e8.  v5:= temp;
  #L1f96ea.  if v5 == 0 then goto L1f970a;
  #L1f96ee.  v5:= 43I;
  #L1f96f2.  if v0 != v5 then goto L1f96fc;
  #L1f96f6.  if v17 == 0 then goto L1f96fc;
  #L1f96fa.  goto L1f970a;
  #L1f96fc.  call temp:= `charCount`(v0) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L1f9702.  v0:= temp;
  #L1f9704.  v2:= v2 + v0 @kind int;
  #L1f9706.  goto L1f969a;
  #L1f9708.  v4:= v14 @kind object;
  #L1f970a.  v10:= new `i.e`;
  #L1f970e.  call `<init>`(v10) @signature `Li/e;.<init>:()V` @kind direct;
  #L1f9714.  v0:= v12;
  #L1f9716.  call temp:= `writeUtf8`(v10, v11, v12, v2) @signature `Li/e;.writeUtf8:(Ljava/lang/String;II)Li/e;` @kind virtual;
  #L1f971c.  v0:= v10 @kind object;
  #L1f971e.  v1:= v11 @kind object;
  #L1f9720.  v3:= v13;
  #L1f9722.  v4:= v14 @kind object;
  #L1f9724.  v5:= v15;
  #L1f9726.  v6:= v16;
  #L1f972a.  v7:= v17;
  #L1f972e.  v8:= v18;
  #L1f9732.  v9:= v19 @kind object;
  #L1f9736.  call `a`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lh/z;.a:(Li/e;Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)V` @kind static;
  #L1f973c.  call temp:= `readUtf8`(v10) @signature `Li/e;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L1f9742.  v0:= temp @kind object;
  #L1f9744.  return v0 @kind object;
  #L1f9746.  v0:= v12;
  #L1f9748.  call temp:= `substring`(v11, v12, v13) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1f974e.  v0:= temp @kind object;
  #L1f9750.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`java.lang.String` v3 @kind object, `int` v4 , `int` v5 , `boolean` v6 ) @signature `Lh/z;.a:(Ljava/lang/String;IIZ)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1f99bc.  v0:= v4;
  #L1f99be.  if v0 >= v5 then goto L1f9a06;
  #L1f99c2.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1f99c8.  v1:= temp;
  #L1f99ca.  v2:= 37I;
  #L1f99ce.  if v1 == v2 then goto L1f99e6;
  #L1f99d2.  v2:= 43I;
  #L1f99d6.  if v1 != v2 then goto L1f99e0;
  #L1f99da.  if v6 == 0 then goto L1f99e0;
  #L1f99de.  goto L1f99e6;
  #L1f99e0.  v0:= v0 + 1;
  #L1f99e4.  goto L1f99be;
  #L1f99e6.  v1:= new `i.e`;
  #L1f99ea.  call `<init>`(v1) @signature `Li/e;.<init>:()V` @kind direct;
  #L1f99f0.  call temp:= `writeUtf8`(v1, v3, v4, v0) @signature `Li/e;.writeUtf8:(Ljava/lang/String;II)Li/e;` @kind virtual;
  #L1f99f6.  call `a`(v1, v3, v0, v5, v6) @signature `Lh/z;.a:(Li/e;Ljava/lang/String;IIZ)V` @kind static;
  #L1f99fc.  call temp:= `readUtf8`(v1) @signature `Li/e;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L1f9a02.  v3:= temp @kind object;
  #L1f9a04.  return v3 @kind object;
  #L1f9a06.  call temp:= `substring`(v3, v4, v5) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1f9a0c.  v3:= temp @kind object;
  #L1f9a0e.  return v3 @kind object;
}
procedure `java.lang.String` `a`(`java.lang.String` v9 @kind object, `java.lang.String` v10 @kind object, `boolean` v11 , `boolean` v12 , `boolean` v13 , `boolean` v14 ) @signature `Lh/z;.a:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1f9764.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f976a.  v2:= temp;
  #L1f976c.  v1:= 0I;
  #L1f976e.  v8:= 0I;
  #L1f9770.  v0:= v9 @kind object;
  #L1f9772.  v3:= v10 @kind object;
  #L1f9774.  v4:= v11;
  #L1f9776.  v5:= v12;
  #L1f9778.  v6:= v13;
  #L1f977a.  v7:= v14;
  #L1f977c.  call temp:= `a`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lh/z;.a:(Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @kind static;
  #L1f9782.  v9:= temp @kind object;
  #L1f9784.  return v9 @kind object;
}
procedure `java.lang.String` `a`(`java.lang.String` v9 @kind object, `java.lang.String` v10 @kind object, `boolean` v11 , `boolean` v12 , `boolean` v13 , `boolean` v14 , `java.nio.charset.Charset` v15 @kind object) @signature `Lh/z;.a:(Ljava/lang/String;Ljava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1f9798.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f979e.  v2:= temp;
  #L1f97a0.  v1:= 0I;
  #L1f97a2.  v0:= v9 @kind object;
  #L1f97a4.  v3:= v10 @kind object;
  #L1f97a6.  v4:= v11;
  #L1f97a8.  v5:= v12;
  #L1f97aa.  v6:= v13;
  #L1f97ac.  v7:= v14;
  #L1f97ae.  v8:= v15 @kind object;
  #L1f97b0.  call temp:= `a`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lh/z;.a:(Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @kind static;
  #L1f97b6.  v9:= temp @kind object;
  #L1f97b8.  return v9 @kind object;
}
procedure `java.lang.String` `a`(`java.lang.String` v2 @kind object, `boolean` v3 ) @signature `Lh/z;.a:(Ljava/lang/String;Z)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1f9998.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f999e.  v0:= temp;
  #L1f99a0.  v1:= 0I;
  #L1f99a2.  call temp:= `a`(v2, v1, v0, v3) @signature `Lh/z;.a:(Ljava/lang/String;IIZ)Ljava/lang/String;` @kind static;
  #L1f99a8.  v2:= temp @kind object;
  #L1f99aa.  return v2 @kind object;
}
procedure `java.util.List` `a`(`java.lang.String` v5 @kind object) @signature `Lh/z;.a:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1f9c38.  v0:= new `java.util.ArrayList`;
  #L1f9c3c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1f9c42.  v1:= 0I;
  #L1f9c44.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f9c4a.  v2:= temp;
  #L1f9c4c.  if v1 > v2 then goto L1f9cbe;
  #L1f9c50.  v2:= 38I;
  #L1f9c54.  call temp:= `indexOf`(v5, v2, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L1f9c5a.  v2:= temp;
  #L1f9c5c.  v3:= -1I;
  #L1f9c5e.  if v2 != v3 then goto L1f9c6a;
  #L1f9c62.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f9c68.  v2:= temp;
  #L1f9c6a.  v4:= 61I;
  #L1f9c6e.  call temp:= `indexOf`(v5, v4, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L1f9c74.  v4:= temp;
  #L1f9c76.  if v4 == v3 then goto L1f9ca2;
  #L1f9c7a.  if v4 <= v2 then goto L1f9c80;
  #L1f9c7e.  goto L1f9ca2;
  #L1f9c80.  call temp:= `substring`(v5, v1, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1f9c86.  v1:= temp @kind object;
  #L1f9c88.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f9c8e.  v4:= v4 + 1;
  #L1f9c92.  call temp:= `substring`(v5, v4, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1f9c98.  v1:= temp @kind object;
  #L1f9c9a.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f9ca0.  goto L1f9cb8;
  #L1f9ca2.  call temp:= `substring`(v5, v1, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1f9ca8.  v1:= temp @kind object;
  #L1f9caa.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f9cb0.  v1:= 0I;
  #L1f9cb2.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f9cb8.  v1:= v2 + 1;
  #L1f9cbc.  goto L1f9c44;
  #L1f9cbe.  return v0 @kind object;
}
procedure `java.util.List` `a`(`h.z` v4 @kind this, `java.util.List` v5 @kind object, `boolean` v6 ) @signature `Lh/z;.a:(Ljava/util/List;Z)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f9bdc.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1f9be2.  v0:= temp;
  #L1f9be4.  v1:= new `java.util.ArrayList`;
  #L1f9be8.  call `<init>`(v1, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L1f9bee.  v2:= 0I;
  #L1f9bf0.  if v2 >= v0 then goto L1f9c1c;
  #L1f9bf4.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1f9bfa.  v3:= temp @kind object;
  #L1f9bfc.  v3:= (`java.lang.String`) v3 @kind object;
  #L1f9c00.  if v3 == 0 then goto L1f9c0e;
  #L1f9c04.  call temp:= `a`(v3, v6) @signature `Lh/z;.a:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L1f9c0a.  v3:= temp @kind object;
  #L1f9c0c.  goto L1f9c10;
  #L1f9c0e.  v3:= 0I;
  #L1f9c10.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f9c16.  v2:= v2 + 1;
  #L1f9c1a.  goto L1f9bf0;
  #L1f9c1c.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1f9c22.  v5:= temp @kind object;
  #L1f9c24.  return v5 @kind object;
}
procedure `void` `a`(`i.e` v6 @kind object, `java.lang.String` v7 @kind object, `int` v8 , `int` v9 , `java.lang.String` v10 @kind object, `boolean` v11 , `boolean` v12 , `boolean` v13 , `boolean` v14 , `java.nio.charset.Charset` v15 @kind object) @signature `Lh/z;.a:(Li/e;Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1f9f1c.  v0:= 0I;
  #L1f9f1e.  if v8 >= v9 then goto L1fa058;
  #L1f9f22.  call temp:= `codePointAt`(v7, v8) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L1f9f28.  v1:= temp;
  #L1f9f2a.  if v11 == 0 then goto L1f9f52;
  #L1f9f2e.  v2:= 9I;
  #L1f9f32.  if v1 == v2 then goto L1fa04a;
  #L1f9f36.  v2:= 10I;
  #L1f9f3a.  if v1 == v2 then goto L1fa04a;
  #L1f9f3e.  v2:= 12I;
  #L1f9f42.  if v1 == v2 then goto L1fa04a;
  #L1f9f46.  v2:= 13I;
  #L1f9f4a.  if v1 != v2 then goto L1f9f52;
  #L1f9f4e.  goto L1fa04a;
  #L1f9f52.  v2:= 43I;
  #L1f9f56.  if v1 != v2 then goto L1f9f76;
  #L1f9f5a.  if v13 == 0 then goto L1f9f76;
  #L1f9f5e.  if v11 == 0 then goto L1f9f68;
  #L1f9f62.  v2:= "+" @kind object;
  #L1f9f66.  goto L1f9f6c;
  #L1f9f68.  v2:= "%2B" @kind object;
  #L1f9f6c.  call temp:= `writeUtf8`(v6, v2) @signature `Li/e;.writeUtf8:(Ljava/lang/String;)Li/e;` @kind virtual;
  #L1f9f72.  goto L1fa04a;
  #L1f9f76.  v2:= 32I;
  #L1f9f7a.  v3:= 37I;
  #L1f9f7e.  if v1 < v2 then goto L1f9fc6;
  #L1f9f82.  v2:= 127I;
  #L1f9f86.  if v1 == v2 then goto L1f9fc6;
  #L1f9f8a.  v2:= 128I;
  #L1f9f8e.  if v1 < v2 then goto L1f9f96;
  #L1f9f92.  if v14 != 0 then goto L1f9fc6;
  #L1f9f96.  call temp:= `indexOf`(v10, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L1f9f9c.  v2:= temp;
  #L1f9f9e.  v4:= -1I;
  #L1f9fa0.  if v2 != v4 then goto L1f9fc6;
  #L1f9fa4.  if v1 != v3 then goto L1f9fbe;
  #L1f9fa8.  if v11 == 0 then goto L1f9fc6;
  #L1f9fac.  if v12 == 0 then goto L1f9fbe;
  #L1f9fb0.  call temp:= `a`(v7, v8, v9) @signature `Lh/z;.a:(Ljava/lang/String;II)Z` @kind static;
  #L1f9fb6.  v2:= temp;
  #L1f9fb8.  if v2 != 0 then goto L1f9fbe;
  #L1f9fbc.  goto L1f9fc6;
  #L1f9fbe.  call temp:= `writeUtf8CodePoint`(v6, v1) @signature `Li/e;.writeUtf8CodePoint:(I)Li/e;` @kind virtual;
  #L1f9fc4.  goto L1fa04a;
  #L1f9fc6.  if v0 != 0 then goto L1f9fd4;
  #L1f9fca.  v0:= new `i.e`;
  #L1f9fce.  call `<init>`(v0) @signature `Li/e;.<init>:()V` @kind direct;
  #L1f9fd4.  if v15 == 0 then goto L1f9ffc;
  #L1f9fd8.  v2:= `@@java.nio.charset.StandardCharsets.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L1f9fdc.  call temp:= `equals`(v15, v2) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f9fe2.  v2:= temp;
  #L1f9fe4.  if v2 == 0 then goto L1f9fea;
  #L1f9fe8.  goto L1f9ffc;
  #L1f9fea.  call temp:= `charCount`(v1) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L1f9ff0.  v2:= temp;
  #L1f9ff2.  v2:= v2 + v8 @kind int;
  #L1f9ff4.  call temp:= `writeString`(v0, v7, v8, v2, v15) @signature `Li/e;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Li/e;` @kind virtual;
  #L1f9ffa.  goto L1fa002;
  #L1f9ffc.  call temp:= `writeUtf8CodePoint`(v0, v1) @signature `Li/e;.writeUtf8CodePoint:(I)Li/e;` @kind virtual;
  #L1fa002.  call temp:= `exhausted`(v0) @signature `Li/e;.exhausted:()Z` @kind virtual;
  #L1fa008.  v2:= temp;
  #L1fa00a.  if v2 != 0 then goto L1fa04a;
  #L1fa00e.  call temp:= `readByte`(v0) @signature `Li/e;.readByte:()B` @kind virtual;
  #L1fa014.  v2:= temp;
  #L1fa016.  v2:= v2 ^& 255;
  #L1fa01a.  call temp:= `writeByte`(v6, v3) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L1fa020.  v4:= `@@h.z.j` @type ^`char`[] @kind object;
  #L1fa024.  v5:= v2 ^> 4;
  #L1fa028.  v5:= v5 ^& 15;
  #L1fa02c.  v4:= v4[v5] @kind char;
  #L1fa030.  call temp:= `writeByte`(v6, v4) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L1fa036.  v4:= `@@h.z.j` @type ^`char`[] @kind object;
  #L1fa03a.  v2:= v2 ^& 15;
  #L1fa03e.  v2:= v4[v2] @kind char;
  #L1fa042.  call temp:= `writeByte`(v6, v2) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L1fa048.  goto L1fa002;
  #L1fa04a.  call temp:= `charCount`(v1) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L1fa050.  v1:= temp;
  #L1fa052.  v8:= v8 + v1 @kind int;
  #L1fa054.  goto L1f9f1e;
  #L1fa058.  return @kind void;
}
procedure `void` `a`(`i.e` v5 @kind object, `java.lang.String` v6 @kind object, `int` v7 , `int` v8 , `boolean` v9 ) @signature `Lh/z;.a:(Li/e;Ljava/lang/String;IIZ)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1fa11c.  if v7 >= v8 then goto L1fa1a0;
  #L1fa120.  call temp:= `codePointAt`(v6, v7) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L1fa126.  v0:= temp;
  #L1fa128.  v1:= 37I;
  #L1fa12c.  if v0 != v1 then goto L1fa176;
  #L1fa130.  v1:= v7 + 2;
  #L1fa134.  if v1 >= v8 then goto L1fa176;
  #L1fa138.  v2:= v7 + 1;
  #L1fa13c.  call temp:= `charAt`(v6, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1fa142.  v2:= temp;
  #L1fa144.  call temp:= `decodeHexDigit`(v2) @signature `Lh/n0/e;.decodeHexDigit:(C)I` @kind static;
  #L1fa14a.  v2:= temp;
  #L1fa14c.  call temp:= `charAt`(v6, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1fa152.  v3:= temp;
  #L1fa154.  call temp:= `decodeHexDigit`(v3) @signature `Lh/n0/e;.decodeHexDigit:(C)I` @kind static;
  #L1fa15a.  v3:= temp;
  #L1fa15c.  v4:= -1I;
  #L1fa15e.  if v2 == v4 then goto L1fa18e;
  #L1fa162.  if v3 == v4 then goto L1fa18e;
  #L1fa166.  v7:= v2 ^< 4;
  #L1fa16a.  v7:= v7 + v3 @kind int;
  #L1fa16c.  call temp:= `writeByte`(v5, v7) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L1fa172.  v7:= v1;
  #L1fa174.  goto L1fa194;
  #L1fa176.  v1:= 43I;
  #L1fa17a.  if v0 != v1 then goto L1fa18e;
  #L1fa17e.  if v9 == 0 then goto L1fa18e;
  #L1fa182.  v1:= 32I;
  #L1fa186.  call temp:= `writeByte`(v5, v1) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L1fa18c.  goto L1fa194;
  #L1fa18e.  call temp:= `writeUtf8CodePoint`(v5, v0) @signature `Li/e;.writeUtf8CodePoint:(I)Li/e;` @kind virtual;
  #L1fa194.  call temp:= `charCount`(v0) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L1fa19a.  v0:= temp;
  #L1fa19c.  v7:= v7 + v0 @kind int;
  #L1fa19e.  goto L1fa11c;
  #L1fa1a0.  return @kind void;
}
procedure `void` `a`(`java.lang.StringBuilder` v5 @kind object, `java.util.List` v6 @kind object) @signature `Lh/z;.a:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1fa06c.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1fa072.  v0:= temp;
  #L1fa074.  v1:= 0I;
  #L1fa076.  if v1 >= v0 then goto L1fa0c4;
  #L1fa07a.  call temp:= `get`(v6, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1fa080.  v2:= temp @kind object;
  #L1fa082.  v2:= (`java.lang.String`) v2 @kind object;
  #L1fa086.  v3:= v1 + 1;
  #L1fa08a.  call temp:= `get`(v6, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1fa090.  v3:= temp @kind object;
  #L1fa092.  v3:= (`java.lang.String`) v3 @kind object;
  #L1fa096.  if v1 <= 0 then goto L1fa0a4;
  #L1fa09a.  v4:= 38I;
  #L1fa09e.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa0a4.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa0aa.  if v3 == 0 then goto L1fa0be;
  #L1fa0ae.  v2:= 61I;
  #L1fa0b2.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa0b8.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa0be.  v1:= v1 + 2;
  #L1fa0c2.  goto L1fa076;
  #L1fa0c4.  return @kind void;
}
procedure `boolean` `a`(`java.lang.String` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lh/z;.a:(Ljava/lang/String;II)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1f95c0.  v0:= v4 + 2;
  #L1f95c4.  v1:= 1I;
  #L1f95c6.  if v0 >= v5 then goto L1f9608;
  #L1f95ca.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1f95d0.  v5:= temp;
  #L1f95d2.  v2:= 37I;
  #L1f95d6.  if v5 != v2 then goto L1f9608;
  #L1f95da.  v4:= v4 + v1 @kind int;
  #L1f95dc.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1f95e2.  v4:= temp;
  #L1f95e4.  call temp:= `decodeHexDigit`(v4) @signature `Lh/n0/e;.decodeHexDigit:(C)I` @kind static;
  #L1f95ea.  v4:= temp;
  #L1f95ec.  v5:= -1I;
  #L1f95ee.  if v4 == v5 then goto L1f9608;
  #L1f95f2.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1f95f8.  v3:= temp;
  #L1f95fa.  call temp:= `decodeHexDigit`(v3) @signature `Lh/n0/e;.decodeHexDigit:(C)I` @kind static;
  #L1f9600.  v3:= temp;
  #L1f9602.  if v3 == v5 then goto L1f9608;
  #L1f9606.  goto L1f960a;
  #L1f9608.  v1:= 0I;
  #L1f960a.  return v1;
}
procedure `void` `b`(`java.lang.StringBuilder` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lh/z;.b:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1fa0d8.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1fa0de.  v0:= temp;
  #L1fa0e0.  v1:= 0I;
  #L1fa0e2.  if v1 >= v0 then goto L1fa108;
  #L1fa0e6.  v2:= 47I;
  #L1fa0ea.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa0f0.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1fa0f6.  v2:= temp @kind object;
  #L1fa0f8.  v2:= (`java.lang.String`) v2 @kind object;
  #L1fa0fc.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fa102.  v1:= v1 + 1;
  #L1fa106.  goto L1fa0e2;
  #L1fa108.  return @kind void;
}
procedure `int` `defaultPort`(`java.lang.String` v1 @kind object) @signature `Lh/z;.defaultPort:(Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1f961c.  v0:= "http" @kind object;
  #L1f9620.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f9626.  v0:= temp;
  #L1f9628.  if v0 == 0 then goto L1f9632;
  #L1f962c.  v1:= 80I;
  #L1f9630.  return v1;
  #L1f9632.  v0:= "https" @kind object;
  #L1f9636.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f963c.  v1:= temp;
  #L1f963e.  if v1 == 0 then goto L1f9648;
  #L1f9642.  v1:= 443I;
  #L1f9646.  return v1;
  #L1f9648.  v1:= -1I;
  #L1f964a.  return v1;
}
procedure `h.z` `get`(`java.lang.String` v2 @kind object) @signature `Lh/z;.get:(Ljava/lang/String;)Lh/z;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1f9cd0.  v0:= new `h.z$a`;
  #L1f9cd4.  call `<init>`(v0) @signature `Lh/z$a;.<init>:()V` @kind direct;
  #L1f9cda.  v1:= 0I;
  #L1f9cdc.  call temp:= `a`(v0, v1, v2) @signature `Lh/z$a;.a:(Lh/z;Ljava/lang/String;)Lh/z$a;` @kind virtual;
  #L1f9ce2.  call temp:= `build`(v0) @signature `Lh/z$a;.build:()Lh/z;` @kind virtual;
  #L1f9ce8.  v2:= temp @kind object;
  #L1f9cea.  return v2 @kind object;
}
procedure `h.z` `parse`(`java.lang.String` v0 @kind object) @signature `Lh/z;.parse:(Ljava/lang/String;)Lh/z;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1f9cfc.  call temp:= `get`(v0) @signature `Lh/z;.get:(Ljava/lang/String;)Lh/z;` @kind static;
  #L1f9d02.  v0:= temp @kind object;
  #L1f9d04.  return v0 @kind object;
  #L1f9d06.  v0:= 0I;
  #L1f9d08.  return v0 @kind object;
  catch `java.lang.IllegalArgumentException` @[L1f9cfc..L1f9d04] goto L1f9d06;
}
procedure `java.lang.String` `encodedFragment`(`h.z` v2 @kind this) @signature `Lh/z;.encodedFragment:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f97cc.  v0:= v2.`h.z.h` @type ^`java.lang.String` @kind object;
  #L1f97d0.  if v0 != 0 then goto L1f97d8;
  #L1f97d4.  v0:= 0I;
  #L1f97d6.  return v0 @kind object;
  #L1f97d8.  v0:= v2.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f97dc.  v1:= 35I;
  #L1f97e0.  call temp:= `indexOf`(v0, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L1f97e6.  v0:= temp;
  #L1f97e8.  v0:= v0 + 1;
  #L1f97ec.  v1:= v2.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f97f0.  call temp:= `substring`(v1, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L1f97f6.  v0:= temp @kind object;
  #L1f97f8.  return v0 @kind object;
}
procedure `java.lang.String` `encodedPassword`(`h.z` v3 @kind this) @signature `Lh/z;.encodedPassword:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1f980c.  v0:= v3.`h.z.c` @type ^`java.lang.String` @kind object;
  #L1f9810.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L1f9816.  v0:= temp;
  #L1f9818.  if v0 == 0 then goto L1f9822;
  #L1f981c.  v0:= "" @kind object;
  #L1f9820.  return v0 @kind object;
  #L1f9822.  v0:= v3.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f9826.  v1:= 58I;
  #L1f982a.  v2:= v3.`h.z.a` @type ^`java.lang.String` @kind object;
  #L1f982e.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f9834.  v2:= temp;
  #L1f9836.  v2:= v2 + 3;
  #L1f983a.  call temp:= `indexOf`(v0, v1, v2) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L1f9840.  v0:= temp;
  #L1f9842.  v0:= v0 + 1;
  #L1f9846.  v1:= v3.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f984a.  v2:= 64I;
  #L1f984e.  call temp:= `indexOf`(v1, v2) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L1f9854.  v1:= temp;
  #L1f9856.  v2:= v3.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f985a.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1f9860.  v0:= temp @kind object;
  #L1f9862.  return v0 @kind object;
}
procedure `java.lang.String` `encodedPath`(`h.z` v4 @kind this) @signature `Lh/z;.encodedPath:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f9874.  v0:= v4.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f9878.  v1:= v4.`h.z.a` @type ^`java.lang.String` @kind object;
  #L1f987c.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f9882.  v1:= temp;
  #L1f9884.  v1:= v1 + 3;
  #L1f9888.  v2:= 47I;
  #L1f988c.  call temp:= `indexOf`(v0, v2, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L1f9892.  v0:= temp;
  #L1f9894.  v1:= v4.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f9898.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f989e.  v2:= temp;
  #L1f98a0.  v3:= "?#" @kind object;
  #L1f98a4.  call temp:= `delimiterOffset`(v1, v0, v2, v3) @signature `Lh/n0/e;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L1f98aa.  v1:= temp;
  #L1f98ac.  v2:= v4.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f98b0.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1f98b6.  v0:= temp @kind object;
  #L1f98b8.  return v0 @kind object;
}
procedure `java.util.List` `encodedPathSegments`(`h.z` v6 @kind this) @signature `Lh/z;.encodedPathSegments:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1f9b44.  v0:= v6.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f9b48.  v1:= v6.`h.z.a` @type ^`java.lang.String` @kind object;
  #L1f9b4c.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f9b52.  v1:= temp;
  #L1f9b54.  v1:= v1 + 3;
  #L1f9b58.  v2:= 47I;
  #L1f9b5c.  call temp:= `indexOf`(v0, v2, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L1f9b62.  v0:= temp;
  #L1f9b64.  v1:= v6.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f9b68.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f9b6e.  v3:= temp;
  #L1f9b70.  v4:= "?#" @kind object;
  #L1f9b74.  call temp:= `delimiterOffset`(v1, v0, v3, v4) @signature `Lh/n0/e;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L1f9b7a.  v1:= temp;
  #L1f9b7c.  v3:= new `java.util.ArrayList`;
  #L1f9b80.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1f9b86.  if v0 >= v1 then goto L1f9bb0;
  #L1f9b8a.  v0:= v0 + 1;
  #L1f9b8e.  v4:= v6.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f9b92.  call temp:= `delimiterOffset`(v4, v0, v1, v2) @signature `Lh/n0/e;.delimiterOffset:(Ljava/lang/String;IIC)I` @kind static;
  #L1f9b98.  v4:= temp;
  #L1f9b9a.  v5:= v6.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f9b9e.  call temp:= `substring`(v5, v0, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1f9ba4.  v0:= temp @kind object;
  #L1f9ba6.  call temp:= `add`(v3, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f9bac.  v0:= v4;
  #L1f9bae.  goto L1f9b86;
  #L1f9bb0.  return v3 @kind object;
}
procedure `java.lang.String` `encodedQuery`(`h.z` v4 @kind this) @signature `Lh/z;.encodedQuery:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f98cc.  v0:= v4.`h.z.g` @type ^`java.util.List` @kind object;
  #L1f98d0.  if v0 != 0 then goto L1f98d8;
  #L1f98d4.  v0:= 0I;
  #L1f98d6.  return v0 @kind object;
  #L1f98d8.  v0:= v4.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f98dc.  v1:= 63I;
  #L1f98e0.  call temp:= `indexOf`(v0, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L1f98e6.  v0:= temp;
  #L1f98e8.  v0:= v0 + 1;
  #L1f98ec.  v1:= v4.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f98f0.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f98f6.  v2:= temp;
  #L1f98f8.  v3:= 35I;
  #L1f98fc.  call temp:= `delimiterOffset`(v1, v0, v2, v3) @signature `Lh/n0/e;.delimiterOffset:(Ljava/lang/String;IIC)I` @kind static;
  #L1f9902.  v1:= temp;
  #L1f9904.  v2:= v4.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f9908.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1f990e.  v0:= temp @kind object;
  #L1f9910.  return v0 @kind object;
}
procedure `java.lang.String` `encodedUsername`(`h.z` v4 @kind this) @signature `Lh/z;.encodedUsername:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f9924.  v0:= v4.`h.z.b` @type ^`java.lang.String` @kind object;
  #L1f9928.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L1f992e.  v0:= temp;
  #L1f9930.  if v0 == 0 then goto L1f993a;
  #L1f9934.  v0:= "" @kind object;
  #L1f9938.  return v0 @kind object;
  #L1f993a.  v0:= v4.`h.z.a` @type ^`java.lang.String` @kind object;
  #L1f993e.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f9944.  v0:= temp;
  #L1f9946.  v0:= v0 + 3;
  #L1f994a.  v1:= v4.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f994e.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f9954.  v2:= temp;
  #L1f9956.  v3:= ":@" @kind object;
  #L1f995a.  call temp:= `delimiterOffset`(v1, v0, v2, v3) @signature `Lh/n0/e;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L1f9960.  v1:= temp;
  #L1f9962.  v2:= v4.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f9966.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1f996c.  v0:= temp @kind object;
  #L1f996e.  return v0 @kind object;
}
procedure `boolean` `equals`(`h.z` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lh/z;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f9564.  v0:= instanceof @variable v2 @type ^`h.z` @kind boolean;
  #L1f9568.  if v0 == 0 then goto L1f9588;
  #L1f956c.  v2:= (`h.z`) v2 @kind object;
  #L1f9570.  v2:= v2.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f9574.  v0:= v1.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f9578.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f957e.  v2:= temp;
  #L1f9580.  if v2 == 0 then goto L1f9588;
  #L1f9584.  v2:= 1I;
  #L1f9586.  goto L1f958a;
  #L1f9588.  v2:= 0I;
  #L1f958a.  return v2;
}
procedure `int` `hashCode`(`h.z` v1 @kind this) @signature `Lh/z;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f965c.  v0:= v1.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f9660.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L1f9666.  v0:= temp;
  #L1f9668.  return v0;
}
procedure `java.lang.String` `host`(`h.z` v1 @kind this) @signature `Lh/z;.host:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f9980.  v0:= v1.`h.z.d` @type ^`java.lang.String` @kind object;
  #L1f9984.  return v0 @kind object;
}
procedure `boolean` `isHttps`(`h.z` v2 @kind this) @signature `Lh/z;.isHttps:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f959c.  v0:= v2.`h.z.a` @type ^`java.lang.String` @kind object;
  #L1f95a0.  v1:= "https" @kind object;
  #L1f95a4.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f95aa.  v0:= temp;
  #L1f95ac.  return v0;
}
procedure `h.z$a` `newBuilder`(`h.z` v3 @kind this) @signature `Lh/z;.newBuilder:()Lh/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1f9d58.  v0:= new `h.z$a`;
  #L1f9d5c.  call `<init>`(v0) @signature `Lh/z$a;.<init>:()V` @kind direct;
  #L1f9d62.  v1:= v3.`h.z.a` @type ^`java.lang.String` @kind object;
  #L1f9d66.  v0.`h.z$a.a` @type ^`java.lang.String` := v1 @kind object;
  #L1f9d6a.  call temp:= `encodedUsername`(v3) @signature `Lh/z;.encodedUsername:()Ljava/lang/String;` @kind virtual;
  #L1f9d70.  v1:= temp @kind object;
  #L1f9d72.  v0.`h.z$a.b` @type ^`java.lang.String` := v1 @kind object;
  #L1f9d76.  call temp:= `encodedPassword`(v3) @signature `Lh/z;.encodedPassword:()Ljava/lang/String;` @kind virtual;
  #L1f9d7c.  v1:= temp @kind object;
  #L1f9d7e.  v0.`h.z$a.c` @type ^`java.lang.String` := v1 @kind object;
  #L1f9d82.  v1:= v3.`h.z.d` @type ^`java.lang.String` @kind object;
  #L1f9d86.  v0.`h.z$a.d` @type ^`java.lang.String` := v1 @kind object;
  #L1f9d8a.  v1:= v3.`h.z.e` @type ^`int`;
  #L1f9d8e.  v2:= v3.`h.z.a` @type ^`java.lang.String` @kind object;
  #L1f9d92.  call temp:= `defaultPort`(v2) @signature `Lh/z;.defaultPort:(Ljava/lang/String;)I` @kind static;
  #L1f9d98.  v2:= temp;
  #L1f9d9a.  if v1 == v2 then goto L1f9da4;
  #L1f9d9e.  v1:= v3.`h.z.e` @type ^`int`;
  #L1f9da2.  goto L1f9da6;
  #L1f9da4.  v1:= -1I;
  #L1f9da6.  v0.`h.z$a.e` @type ^`int` := v1;
  #L1f9daa.  v1:= v0.`h.z$a.f` @type ^`java.util.List` @kind object;
  #L1f9dae.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L1f9db4.  v1:= v0.`h.z$a.f` @type ^`java.util.List` @kind object;
  #L1f9db8.  call temp:= `encodedPathSegments`(v3) @signature `Lh/z;.encodedPathSegments:()Ljava/util/List;` @kind virtual;
  #L1f9dbe.  v2:= temp @kind object;
  #L1f9dc0.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1f9dc6.  call temp:= `encodedQuery`(v3) @signature `Lh/z;.encodedQuery:()Ljava/lang/String;` @kind virtual;
  #L1f9dcc.  v1:= temp @kind object;
  #L1f9dce.  call temp:= `encodedQuery`(v0, v1) @signature `Lh/z$a;.encodedQuery:(Ljava/lang/String;)Lh/z$a;` @kind virtual;
  #L1f9dd4.  call temp:= `encodedFragment`(v3) @signature `Lh/z;.encodedFragment:()Ljava/lang/String;` @kind virtual;
  #L1f9dda.  v1:= temp @kind object;
  #L1f9ddc.  v0.`h.z$a.h` @type ^`java.lang.String` := v1 @kind object;
  #L1f9de0.  return v0 @kind object;
}
procedure `h.z$a` `newBuilder`(`h.z` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lh/z;.newBuilder:(Ljava/lang/String;)Lh/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f9df4.  v0:= new `h.z$a`;
  #L1f9df8.  call `<init>`(v0) @signature `Lh/z$a;.<init>:()V` @kind direct;
  #L1f9dfe.  call temp:= `a`(v0, v1, v2) @signature `Lh/z$a;.a:(Lh/z;Ljava/lang/String;)Lh/z$a;` @kind virtual;
  #L1f9e04.  return v0 @kind object;
  #L1f9e06.  v2:= 0I;
  #L1f9e08.  return v2 @kind object;
  catch `java.lang.IllegalArgumentException` @[L1f9df4..L1f9e04] goto L1f9e06;
}
procedure `java.util.List` `pathSegments`(`h.z` v1 @kind this) @signature `Lh/z;.pathSegments:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f9bc4.  v0:= v1.`h.z.f` @type ^`java.util.List` @kind object;
  #L1f9bc8.  return v0 @kind object;
}
procedure `int` `port`(`h.z` v1 @kind this) @signature `Lh/z;.port:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f967c.  v0:= v1.`h.z.e` @type ^`int`;
  #L1f9680.  return v0;
}
procedure `java.lang.String` `query`(`h.z` v2 @kind this) @signature `Lh/z;.query:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f9a20.  v0:= v2.`h.z.g` @type ^`java.util.List` @kind object;
  #L1f9a24.  if v0 != 0 then goto L1f9a2c;
  #L1f9a28.  v0:= 0I;
  #L1f9a2a.  return v0 @kind object;
  #L1f9a2c.  v0:= new `java.lang.StringBuilder`;
  #L1f9a30.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1f9a36.  v1:= v2.`h.z.g` @type ^`java.util.List` @kind object;
  #L1f9a3a.  call `a`(v0, v1) @signature `Lh/z;.a:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind static;
  #L1f9a40.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f9a46.  v0:= temp @kind object;
  #L1f9a48.  return v0 @kind object;
}
procedure `java.lang.String` `redact`(`h.z` v2 @kind this) @signature `Lh/z;.redact:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f9a5c.  v0:= "/..." @kind object;
  #L1f9a60.  call temp:= `newBuilder`(v2, v0) @signature `Lh/z;.newBuilder:(Ljava/lang/String;)Lh/z$a;` @kind virtual;
  #L1f9a66.  v0:= temp @kind object;
  #L1f9a68.  v1:= "" @kind object;
  #L1f9a6c.  call temp:= `username`(v0, v1) @signature `Lh/z$a;.username:(Ljava/lang/String;)Lh/z$a;` @kind virtual;
  #L1f9a72.  call temp:= `password`(v0, v1) @signature `Lh/z$a;.password:(Ljava/lang/String;)Lh/z$a;` @kind virtual;
  #L1f9a78.  call temp:= `build`(v0) @signature `Lh/z$a;.build:()Lh/z;` @kind virtual;
  #L1f9a7e.  v0:= temp @kind object;
  #L1f9a80.  call temp:= `toString`(v0) @signature `Lh/z;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f9a86.  v0:= temp @kind object;
  #L1f9a88.  return v0 @kind object;
}
procedure `h.z` `resolve`(`h.z` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lh/z;.resolve:(Ljava/lang/String;)Lh/z;` @AccessFlag PUBLIC {
    temp;

  #L1f9d2c.  call temp:= `newBuilder`(v0, v1) @signature `Lh/z;.newBuilder:(Ljava/lang/String;)Lh/z$a;` @kind virtual;
  #L1f9d32.  v1:= temp @kind object;
  #L1f9d34.  if v1 == 0 then goto L1f9d42;
  #L1f9d38.  call temp:= `build`(v1) @signature `Lh/z$a;.build:()Lh/z;` @kind virtual;
  #L1f9d3e.  v1:= temp @kind object;
  #L1f9d40.  goto L1f9d44;
  #L1f9d42.  v1:= 0I;
  #L1f9d44.  return v1 @kind object;
}
procedure `java.lang.String` `scheme`(`h.z` v1 @kind this) @signature `Lh/z;.scheme:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f9a9c.  v0:= v1.`h.z.a` @type ^`java.lang.String` @kind object;
  #L1f9aa0.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`h.z` v1 @kind this) @signature `Lh/z;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f9ab4.  v0:= v1.`h.z.i` @type ^`java.lang.String` @kind object;
  #L1f9ab8.  return v0 @kind object;
}
procedure `java.net.URI` `uri`(`h.z` v4 @kind this) @signature `Lh/z;.uri:()Ljava/net/URI;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f9acc.  call temp:= `newBuilder`(v4) @signature `Lh/z;.newBuilder:()Lh/z$a;` @kind virtual;
  #L1f9ad2.  v0:= temp @kind object;
  #L1f9ad4.  call temp:= `b`(v0) @signature `Lh/z$a;.b:()Lh/z$a;` @kind virtual;
  #L1f9ada.  call temp:= `toString`(v0) @signature `Lh/z$a;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f9ae0.  v0:= temp @kind object;
  #L1f9ae2.  v1:= new `java.net.URI`;
  #L1f9ae6.  call `<init>`(v1, v0) @signature `Ljava/net/URI;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f9aec.  return v1 @kind object;
  #L1f9aee.  v1:= Exception @type ^`java.net.URISyntaxException` @kind object;
  #L1f9af0.  v2:= "[\\u0000-\\u001F\\u007F-\\u009F\\p{javaWhitespace}]" @kind object;
  #L1f9af4.  v3:= "" @kind object;
  #L1f9af8.  call temp:= `replaceAll`(v0, v2, v3) @signature `Ljava/lang/String;.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L1f9afe.  v0:= temp @kind object;
  #L1f9b00.  call temp:= `create`(v0) @signature `Ljava/net/URI;.create:(Ljava/lang/String;)Ljava/net/URI;` @kind static;
  #L1f9b06.  v0:= temp @kind object;
  #L1f9b08.  return v0 @kind object;
  #L1f9b0a.  v0:= new `java.lang.RuntimeException`;
  #L1f9b0e.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1f9b14.  throw v0;
  catch `java.net.URISyntaxException` @[L1f9ae2..L1f9aec] goto L1f9aee;
  catch `java.lang.Exception` @[L1f9af0..L1f9b08] goto L1f9b0a;
}
