record `h.l$b` @kind class @AccessFlag FINAL {
  `java.lang.String` `h.l$b.a` @AccessFlag FINAL;
  `java.lang.String` `h.l$b.b` @AccessFlag FINAL;
  `java.lang.String` `h.l$b.c` @AccessFlag FINAL;
  `i.h` `h.l$b.d` @AccessFlag FINAL;
}
procedure `boolean` `a`(`h.l$b` v10 @kind this, `java.lang.String` v11 @kind object) @signature `Lh/l$b;.a:(Ljava/lang/String;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1f5238.  v0:= v10.`h.l$b.a` @type ^`java.lang.String` @kind object;
  #L1f523c.  v1:= "*." @kind object;
  #L1f5240.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1f5246.  v0:= temp;
  #L1f5248.  if v0 == 0 then goto L1f529e;
  #L1f524c.  v0:= 46I;
  #L1f5250.  call temp:= `indexOf`(v11, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L1f5256.  v0:= temp;
  #L1f5258.  call temp:= `length`(v11) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f525e.  v1:= temp;
  #L1f5260.  v1:= v1 - v0 @kind int;
  #L1f5262.  v2:= 1I;
  #L1f5264.  v1:= v1 - v2 @kind int;
  #L1f5266.  v3:= v10.`h.l$b.b` @type ^`java.lang.String` @kind object;
  #L1f526a.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f5270.  v3:= temp;
  #L1f5272.  if v1 != v3 then goto L1f529a;
  #L1f5276.  v5:= 0I;
  #L1f5278.  v6:= v0 + 1;
  #L1f527c.  v7:= v10.`h.l$b.b` @type ^`java.lang.String` @kind object;
  #L1f5280.  v8:= 0I;
  #L1f5282.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f5288.  v9:= temp;
  #L1f528a.  v4:= v11 @kind object;
  #L1f528c.  call temp:= `regionMatches`(v4, v5, v6, v7, v8, v9) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L1f5292.  v11:= temp;
  #L1f5294.  if v11 == 0 then goto L1f529a;
  #L1f5298.  goto L1f529c;
  #L1f529a.  v2:= 0I;
  #L1f529c.  return v2;
  #L1f529e.  v0:= v10.`h.l$b.b` @type ^`java.lang.String` @kind object;
  #L1f52a2.  call temp:= `equals`(v11, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f52a8.  v11:= temp;
  #L1f52aa.  return v11;
}
procedure `boolean` `equals`(`h.l$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lh/l$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f51d8.  v0:= instanceof @variable v3 @type ^`h.l$b` @kind boolean;
  #L1f51dc.  if v0 == 0 then goto L1f5224;
  #L1f51e0.  v0:= v2.`h.l$b.a` @type ^`java.lang.String` @kind object;
  #L1f51e4.  v3:= (`h.l$b`) v3 @kind object;
  #L1f51e8.  v1:= v3.`h.l$b.a` @type ^`java.lang.String` @kind object;
  #L1f51ec.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f51f2.  v0:= temp;
  #L1f51f4.  if v0 == 0 then goto L1f5224;
  #L1f51f8.  v0:= v2.`h.l$b.c` @type ^`java.lang.String` @kind object;
  #L1f51fc.  v1:= v3.`h.l$b.c` @type ^`java.lang.String` @kind object;
  #L1f5200.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f5206.  v0:= temp;
  #L1f5208.  if v0 == 0 then goto L1f5224;
  #L1f520c.  v0:= v2.`h.l$b.d` @type ^`i.h` @kind object;
  #L1f5210.  v3:= v3.`h.l$b.d` @type ^`i.h` @kind object;
  #L1f5214.  call temp:= `equals`(v0, v3) @signature `Li/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f521a.  v3:= temp;
  #L1f521c.  if v3 == 0 then goto L1f5224;
  #L1f5220.  v3:= 1I;
  #L1f5222.  goto L1f5226;
  #L1f5224.  v3:= 0I;
  #L1f5226.  return v3;
}
procedure `int` `hashCode`(`h.l$b` v2 @kind this) @signature `Lh/l$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f52bc.  v0:= v2.`h.l$b.a` @type ^`java.lang.String` @kind object;
  #L1f52c0.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L1f52c6.  v0:= temp;
  #L1f52c8.  v1:= 527I;
  #L1f52cc.  v1:= v1 + v0 @kind int;
  #L1f52ce.  v1:= v1 * 31;
  #L1f52d2.  v0:= v2.`h.l$b.c` @type ^`java.lang.String` @kind object;
  #L1f52d6.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L1f52dc.  v0:= temp;
  #L1f52de.  v1:= v1 + v0 @kind int;
  #L1f52e0.  v1:= v1 * 31;
  #L1f52e4.  v0:= v2.`h.l$b.d` @type ^`i.h` @kind object;
  #L1f52e8.  call temp:= `hashCode`(v0) @signature `Li/h;.hashCode:()I` @kind virtual;
  #L1f52ee.  v0:= temp;
  #L1f52f0.  v1:= v1 + v0 @kind int;
  #L1f52f2.  return v1;
}
procedure `java.lang.String` `toString`(`h.l$b` v2 @kind this) @signature `Lh/l$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f5304.  v0:= new `java.lang.StringBuilder`;
  #L1f5308.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1f530e.  v1:= v2.`h.l$b.c` @type ^`java.lang.String` @kind object;
  #L1f5312.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f5318.  v1:= v2.`h.l$b.d` @type ^`i.h` @kind object;
  #L1f531c.  call temp:= `base64`(v1) @signature `Li/h;.base64:()Ljava/lang/String;` @kind virtual;
  #L1f5322.  v1:= temp @kind object;
  #L1f5324.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f532a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f5330.  v0:= temp @kind object;
  #L1f5332.  return v0 @kind object;
}
