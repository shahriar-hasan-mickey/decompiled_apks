record `h.w` @kind class @AccessFlag PUBLIC_FINAL extends `h.h0` @kind class {
  `java.util.List` `h.w.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `h.w.b` @AccessFlag PRIVATE_FINAL;
}
global `h.b0` `@@h.w.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lh/w;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1f7d14.  v0:= "application/x-www-form-urlencoded" @kind object;
  #L1f7d18.  call temp:= `get`(v0) @signature `Lh/b0;.get:(Ljava/lang/String;)Lh/b0;` @kind static;
  #L1f7d1e.  v0:= temp @kind object;
  #L1f7d20.  `@@h.w.c` @type ^`h.b0` := v0 @kind object;
  #L1f7d24.  return @kind void;
}
procedure `void` `<init>`(`h.w` v0 @kind this, `java.util.List` v1 @kind object, `java.util.List` v2 @kind object) @signature `Lh/w;.<init>:(Ljava/util/List;Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1f7d38.  call `<init>`(v0) @signature `Lh/h0;.<init>:()V` @kind direct;
  #L1f7d3e.  call temp:= `immutableList`(v1) @signature `Lh/n0/e;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1f7d44.  v1:= temp @kind object;
  #L1f7d46.  v0.`h.w.a` @type ^`java.util.List` := v1 @kind object;
  #L1f7d4a.  call temp:= `immutableList`(v2) @signature `Lh/n0/e;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1f7d50.  v1:= temp @kind object;
  #L1f7d52.  v0.`h.w.b` @type ^`java.util.List` := v1 @kind object;
  #L1f7d56.  return @kind void;
}
procedure `long` `a`(`h.w` v3 @kind this, `i.f` v4 @kind object, `boolean` v5 ) @signature `Lh/w;.a:(Li/f;Z)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1f7c5c.  if v5 == 0 then goto L1f7c6c;
  #L1f7c60.  v4:= new `i.e`;
  #L1f7c64.  call `<init>`(v4) @signature `Li/e;.<init>:()V` @kind direct;
  #L1f7c6a.  goto L1f7c74;
  #L1f7c6c.  call temp:= `buffer`(v4) @signature `Li/f;.buffer:()Li/e;` @kind interface;
  #L1f7c72.  v4:= temp @kind object;
  #L1f7c74.  v0:= 0I;
  #L1f7c76.  v1:= v3.`h.w.a` @type ^`java.util.List` @kind object;
  #L1f7c7a.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1f7c80.  v1:= temp;
  #L1f7c82.  if v0 >= v1 then goto L1f7cd0;
  #L1f7c86.  if v0 <= 0 then goto L1f7c94;
  #L1f7c8a.  v2:= 38I;
  #L1f7c8e.  call temp:= `writeByte`(v4, v2) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L1f7c94.  v2:= v3.`h.w.a` @type ^`java.util.List` @kind object;
  #L1f7c98.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1f7c9e.  v2:= temp @kind object;
  #L1f7ca0.  v2:= (`java.lang.String`) v2 @kind object;
  #L1f7ca4.  call temp:= `writeUtf8`(v4, v2) @signature `Li/e;.writeUtf8:(Ljava/lang/String;)Li/e;` @kind virtual;
  #L1f7caa.  v2:= 61I;
  #L1f7cae.  call temp:= `writeByte`(v4, v2) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L1f7cb4.  v2:= v3.`h.w.b` @type ^`java.util.List` @kind object;
  #L1f7cb8.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1f7cbe.  v2:= temp @kind object;
  #L1f7cc0.  v2:= (`java.lang.String`) v2 @kind object;
  #L1f7cc4.  call temp:= `writeUtf8`(v4, v2) @signature `Li/e;.writeUtf8:(Ljava/lang/String;)Li/e;` @kind virtual;
  #L1f7cca.  v0:= v0 + 1;
  #L1f7cce.  goto L1f7c82;
  #L1f7cd0.  if v5 == 0 then goto L1f7ce4;
  #L1f7cd4.  call temp:= `size`(v4) @signature `Li/e;.size:()J` @kind virtual;
  #L1f7cda.  v0:= temp @kind wide;
  #L1f7cdc.  call `clear`(v4) @signature `Li/e;.clear:()V` @kind virtual;
  #L1f7ce2.  goto L1f7ce8;
  #L1f7ce4.  v0:= 0L;
  #L1f7ce8.  return v0 @kind wide;
}
procedure `long` `contentLength`(`h.w` v2 @kind this) @signature `Lh/w;.contentLength:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f7c3c.  v0:= 0I;
  #L1f7c3e.  v1:= 1I;
  #L1f7c40.  call temp:= `a`(v2, v0, v1) @signature `Lh/w;.a:(Li/f;Z)J` @kind direct;
  #L1f7c46.  v0:= temp @kind wide;
  #L1f7c48.  return v0 @kind wide;
}
procedure `h.b0` `contentType`(`h.w` v1 @kind this) @signature `Lh/w;.contentType:()Lh/b0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f7cfc.  v0:= `@@h.w.c` @type ^`h.b0` @kind object;
  #L1f7d00.  return v0 @kind object;
}
procedure `void` `writeTo`(`h.w` v1 @kind this, `i.f` v2 @kind object) @signature `Lh/w;.writeTo:(Li/f;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f7d68.  v0:= 0I;
  #L1f7d6a.  call temp:= `a`(v1, v2, v0) @signature `Lh/w;.a:(Li/f;Z)J` @kind direct;
  #L1f7d70.  return @kind void;
}
