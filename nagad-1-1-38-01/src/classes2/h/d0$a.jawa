record `h.d0$a` @kind class @AccessFlag  extends `h.n0.c` @kind class {
}
procedure `void` `<init>`(`h.d0$a` v0 @kind this) @signature `Lh/d0$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1fabf0.  call `<init>`(v0) @signature `Lh/n0/c;.<init>:()V` @kind direct;
  #L1fabf6.  return @kind void;
}
procedure `void` `addLenient`(`h.d0$a` v0 @kind this, `h.y$a` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lh/d0$a;.addLenient:(Lh/y$a;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L1fac08.  call temp:= `a`(v1, v2) @signature `Lh/y$a;.a:(Ljava/lang/String;)Lh/y$a;` @kind virtual;
  #L1fac0e.  return @kind void;
}
procedure `void` `addLenient`(`h.d0$a` v0 @kind this, `h.y$a` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lh/d0$a;.addLenient:(Lh/y$a;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L1fac20.  call temp:= `a`(v1, v2, v3) @signature `Lh/y$a;.a:(Ljava/lang/String;Ljava/lang/String;)Lh/y$a;` @kind virtual;
  #L1fac26.  return @kind void;
}
procedure `void` `apply`(`h.d0$a` v0 @kind this, `h.p` v1 @kind object, `javax.net.ssl.SSLSocket` v2 @kind object, `boolean` v3 ) @signature `Lh/d0$a;.apply:(Lh/p;Ljavax/net/ssl/SSLSocket;Z)V` @AccessFlag PUBLIC {
    temp;

  #L1fac38.  call `a`(v1, v2, v3) @signature `Lh/p;.a:(Ljavax/net/ssl/SSLSocket;Z)V` @kind virtual;
  #L1fac3e.  return @kind void;
}
procedure `int` `code`(`h.d0$a` v0 @kind this, `h.i0$a` v1 @kind object) @signature `Lh/d0$a;.code:(Lh/i0$a;)I` @AccessFlag PUBLIC {
    temp;

  #L1faba8.  v1:= v1.`h.i0$a.c` @type ^`int`;
  #L1fabac.  return v1;
}
procedure `boolean` `equalsNonHost`(`h.d0$a` v0 @kind this, `h.e` v1 @kind object, `h.e` v2 @kind object) @signature `Lh/d0$a;.equalsNonHost:(Lh/e;Lh/e;)Z` @AccessFlag PUBLIC {
    temp;

  #L1fab8c.  call temp:= `a`(v1, v2) @signature `Lh/e;.a:(Lh/e;)Z` @kind virtual;
  #L1fab92.  v1:= temp;
  #L1fab94.  return v1;
}
procedure `okhttp3.internal.connection.d` `exchange`(`h.d0$a` v0 @kind this, `h.i0` v1 @kind object) @signature `Lh/d0$a;.exchange:(Lh/i0;)Lokhttp3/internal/connection/d;` @AccessFlag PUBLIC {
    temp;

  #L1fabc0.  v1:= v1.`h.i0.r` @type ^`okhttp3.internal.connection.d` @kind object;
  #L1fabc4.  return v1 @kind object;
}
procedure `void` `initExchange`(`h.d0$a` v0 @kind this, `h.i0$a` v1 @kind object, `okhttp3.internal.connection.d` v2 @kind object) @signature `Lh/d0$a;.initExchange:(Lh/i0$a;Lokhttp3/internal/connection/d;)V` @AccessFlag PUBLIC {
    temp;

  #L1fac50.  call `a`(v1, v2) @signature `Lh/i0$a;.a:(Lokhttp3/internal/connection/d;)V` @kind virtual;
  #L1fac56.  return @kind void;
}
procedure `okhttp3.internal.connection.g` `realConnectionPool`(`h.d0$a` v0 @kind this, `h.o` v1 @kind object) @signature `Lh/d0$a;.realConnectionPool:(Lh/o;)Lokhttp3/internal/connection/g;` @AccessFlag PUBLIC {
    temp;

  #L1fabd8.  v1:= v1.`h.o.a` @type ^`okhttp3.internal.connection.g` @kind object;
  #L1fabdc.  return v1 @kind object;
}
