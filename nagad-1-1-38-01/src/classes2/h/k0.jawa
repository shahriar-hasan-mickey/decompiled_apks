record `h.k0` @kind class @AccessFlag PUBLIC_FINAL {
  `h.e` `h.k0.a` @AccessFlag FINAL;
  `java.net.Proxy` `h.k0.b` @AccessFlag FINAL;
  `java.net.InetSocketAddress` `h.k0.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`h.k0` v0 @kind this, `h.e` v1 @kind object, `java.net.Proxy` v2 @kind object, `java.net.InetSocketAddress` v3 @kind object) @signature `Lh/k0;.<init>:(Lh/e;Ljava/net/Proxy;Ljava/net/InetSocketAddress;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1fd530.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1fd536.  if v1 == 0 then goto L1fd570;
  #L1fd53a.  if v2 == 0 then goto L1fd560;
  #L1fd53e.  if v3 == 0 then goto L1fd550;
  #L1fd542.  v0.`h.k0.a` @type ^`h.e` := v1 @kind object;
  #L1fd546.  v0.`h.k0.b` @type ^`java.net.Proxy` := v2 @kind object;
  #L1fd54a.  v0.`h.k0.c` @type ^`java.net.InetSocketAddress` := v3 @kind object;
  #L1fd54e.  return @kind void;
  #L1fd550.  v1:= new `java.lang.NullPointerException`;
  #L1fd554.  v2:= "inetSocketAddress == null" @kind object;
  #L1fd558.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fd55e.  throw v1;
  #L1fd560.  v1:= new `java.lang.NullPointerException`;
  #L1fd564.  v2:= "proxy == null" @kind object;
  #L1fd568.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fd56e.  throw v1;
  #L1fd570.  v1:= new `java.lang.NullPointerException`;
  #L1fd574.  v2:= "address == null" @kind object;
  #L1fd578.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fd57e.  throw v1;
}
procedure `h.e` `address`(`h.k0` v1 @kind this) @signature `Lh/k0;.address:()Lh/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fd518.  v0:= v1.`h.k0.a` @type ^`h.e` @kind object;
  #L1fd51c.  return v0 @kind object;
}
procedure `boolean` `equals`(`h.k0` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lh/k0;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fd3c4.  v0:= instanceof @variable v3 @type ^`h.k0` @kind boolean;
  #L1fd3c8.  if v0 == 0 then goto L1fd410;
  #L1fd3cc.  v3:= (`h.k0`) v3 @kind object;
  #L1fd3d0.  v0:= v3.`h.k0.a` @type ^`h.e` @kind object;
  #L1fd3d4.  v1:= v2.`h.k0.a` @type ^`h.e` @kind object;
  #L1fd3d8.  call temp:= `equals`(v0, v1) @signature `Lh/e;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1fd3de.  v0:= temp;
  #L1fd3e0.  if v0 == 0 then goto L1fd410;
  #L1fd3e4.  v0:= v3.`h.k0.b` @type ^`java.net.Proxy` @kind object;
  #L1fd3e8.  v1:= v2.`h.k0.b` @type ^`java.net.Proxy` @kind object;
  #L1fd3ec.  call temp:= `equals`(v0, v1) @signature `Ljava/net/Proxy;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1fd3f2.  v0:= temp;
  #L1fd3f4.  if v0 == 0 then goto L1fd410;
  #L1fd3f8.  v3:= v3.`h.k0.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L1fd3fc.  v0:= v2.`h.k0.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L1fd400.  call temp:= `equals`(v3, v0) @signature `Ljava/net/InetSocketAddress;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1fd406.  v3:= temp;
  #L1fd408.  if v3 == 0 then goto L1fd410;
  #L1fd40c.  v3:= 1I;
  #L1fd40e.  goto L1fd412;
  #L1fd410.  v3:= 0I;
  #L1fd412.  return v3;
}
procedure `int` `hashCode`(`h.k0` v2 @kind this) @signature `Lh/k0;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fd45c.  v0:= v2.`h.k0.a` @type ^`h.e` @kind object;
  #L1fd460.  call temp:= `hashCode`(v0) @signature `Lh/e;.hashCode:()I` @kind virtual;
  #L1fd466.  v0:= temp;
  #L1fd468.  v1:= 527I;
  #L1fd46c.  v1:= v1 + v0 @kind int;
  #L1fd46e.  v1:= v1 * 31;
  #L1fd472.  v0:= v2.`h.k0.b` @type ^`java.net.Proxy` @kind object;
  #L1fd476.  call temp:= `hashCode`(v0) @signature `Ljava/net/Proxy;.hashCode:()I` @kind virtual;
  #L1fd47c.  v0:= temp;
  #L1fd47e.  v1:= v1 + v0 @kind int;
  #L1fd480.  v1:= v1 * 31;
  #L1fd484.  v0:= v2.`h.k0.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L1fd488.  call temp:= `hashCode`(v0) @signature `Ljava/net/InetSocketAddress;.hashCode:()I` @kind virtual;
  #L1fd48e.  v0:= temp;
  #L1fd490.  v1:= v1 + v0 @kind int;
  #L1fd492.  return v1;
}
procedure `java.net.Proxy` `proxy`(`h.k0` v1 @kind this) @signature `Lh/k0;.proxy:()Ljava/net/Proxy;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fd500.  v0:= v1.`h.k0.b` @type ^`java.net.Proxy` @kind object;
  #L1fd504.  return v0 @kind object;
}
procedure `boolean` `requiresTunnel`(`h.k0` v2 @kind this) @signature `Lh/k0;.requiresTunnel:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fd424.  v0:= v2.`h.k0.a` @type ^`h.e` @kind object;
  #L1fd428.  v0:= v0.`h.e.i` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L1fd42c.  if v0 == 0 then goto L1fd448;
  #L1fd430.  v0:= v2.`h.k0.b` @type ^`java.net.Proxy` @kind object;
  #L1fd434.  call temp:= `type`(v0) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L1fd43a.  v0:= temp @kind object;
  #L1fd43c.  v1:= `@@java.net.Proxy$Type.HTTP` @type ^`java.net.Proxy$Type` @kind object;
  #L1fd440.  if v0 != v1 then goto L1fd448;
  #L1fd444.  v0:= 1I;
  #L1fd446.  goto L1fd44a;
  #L1fd448.  v0:= 0I;
  #L1fd44a.  return v0;
}
procedure `java.net.InetSocketAddress` `socketAddress`(`h.k0` v1 @kind this) @signature `Lh/k0;.socketAddress:()Ljava/net/InetSocketAddress;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fd4e8.  v0:= v1.`h.k0.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L1fd4ec.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`h.k0` v2 @kind this) @signature `Lh/k0;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fd4a4.  v0:= new `java.lang.StringBuilder`;
  #L1fd4a8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1fd4ae.  v1:= "Route{" @kind object;
  #L1fd4b2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fd4b8.  v1:= v2.`h.k0.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L1fd4bc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fd4c2.  v1:= "}" @kind object;
  #L1fd4c6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fd4cc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fd4d2.  v0:= temp @kind object;
  #L1fd4d4.  return v0 @kind object;
}
