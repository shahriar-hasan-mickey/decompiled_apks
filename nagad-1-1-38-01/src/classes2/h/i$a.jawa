record `h.i$a` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `h.i$a.a` @AccessFlag ;
  `boolean` `h.i$a.b` @AccessFlag ;
  `int` `h.i$a.c` @AccessFlag ;
  `int` `h.i$a.d` @AccessFlag ;
  `int` `h.i$a.e` @AccessFlag ;
  `boolean` `h.i$a.f` @AccessFlag ;
  `boolean` `h.i$a.g` @AccessFlag ;
  `boolean` `h.i$a.h` @AccessFlag ;
}
procedure `void` `<init>`(`h.i$a` v1 @kind this) @signature `Lh/i$a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1f4b2c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f4b32.  v0:= -1I;
  #L1f4b34.  v1.`h.i$a.c` @type ^`int` := v0;
  #L1f4b38.  v1.`h.i$a.d` @type ^`int` := v0;
  #L1f4b3c.  v1.`h.i$a.e` @type ^`int` := v0;
  #L1f4b40.  return @kind void;
}
procedure `h.i` `build`(`h.i$a` v1 @kind this) @signature `Lh/i$a;.build:()Lh/i;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f4a74.  v0:= new `h.i`;
  #L1f4a78.  call `<init>`(v0, v1) @signature `Lh/i;.<init>:(Lh/i$a;)V` @kind direct;
  #L1f4a7e.  return v0 @kind object;
}
procedure `h.i$a` `maxStale`(`h.i$a` v3 @kind this, `int` v4 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lh/i$a;.maxStale:(ILjava/util/concurrent/TimeUnit;)Lh/i$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1f4a90.  if v4 < 0 then goto L1f4abc;
  #L1f4a94.  v0:= (`long`) v4 @kind i2l;
  #L1f4a96.  call temp:= `toSeconds`(v5, v0) @signature `Ljava/util/concurrent/TimeUnit;.toSeconds:(J)J` @kind virtual;
  #L1f4a9c.  v4:= temp @kind wide;
  #L1f4a9e.  v0:= 2147483647L;
  #L1f4aa4.  v2:= lcmp(v4, v0);
  #L1f4aa8.  if v2 <= 0 then goto L1f4ab4;
  #L1f4aac.  v4:= 2147483647I;
  #L1f4ab2.  goto L1f4ab6;
  #L1f4ab4.  v4:= (`int`) v4 @kind l2i;
  #L1f4ab6.  v3.`h.i$a.d` @type ^`int` := v4;
  #L1f4aba.  return v3 @kind object;
  #L1f4abc.  v5:= new `java.lang.IllegalArgumentException`;
  #L1f4ac0.  v0:= new `java.lang.StringBuilder`;
  #L1f4ac4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1f4aca.  v1:= "maxStale < 0: " @kind object;
  #L1f4ace.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4ad4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4ada.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f4ae0.  v4:= temp @kind object;
  #L1f4ae2.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f4ae8.  throw v5;
}
procedure `h.i$a` `noCache`(`h.i$a` v1 @kind this) @signature `Lh/i$a;.noCache:()Lh/i$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f4afc.  v0:= 1I;
  #L1f4afe.  v1.`h.i$a.a` @type ^`boolean` := v0 @kind boolean;
  #L1f4b02.  return v1 @kind object;
}
procedure `h.i$a` `onlyIfCached`(`h.i$a` v1 @kind this) @signature `Lh/i$a;.onlyIfCached:()Lh/i$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f4b14.  v0:= 1I;
  #L1f4b16.  v1.`h.i$a.f` @type ^`boolean` := v0 @kind boolean;
  #L1f4b1a.  return v1 @kind object;
}
