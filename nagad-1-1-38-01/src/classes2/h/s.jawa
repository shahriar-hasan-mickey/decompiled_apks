record `h.s` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `h.s.a` @AccessFlag PRIVATE;
  `int` `h.s.b` @AccessFlag PRIVATE;
  `java.lang.Runnable` `h.s.c` @AccessFlag PRIVATE;
  `java.util.concurrent.ExecutorService` `h.s.d` @AccessFlag PRIVATE;
  `java.util.Deque` `h.s.e` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `h.s.f` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `h.s.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`h.s` v1 @kind this) @signature `Lh/s;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1f7598.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f759e.  v0:= 64I;
  #L1f75a2.  v1.`h.s.a` @type ^`int` := v0;
  #L1f75a6.  v0:= 5I;
  #L1f75a8.  v1.`h.s.b` @type ^`int` := v0;
  #L1f75ac.  v0:= new `java.util.ArrayDeque`;
  #L1f75b0.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L1f75b6.  v1.`h.s.e` @type ^`java.util.Deque` := v0 @kind object;
  #L1f75ba.  v0:= new `java.util.ArrayDeque`;
  #L1f75be.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L1f75c4.  v1.`h.s.f` @type ^`java.util.Deque` := v0 @kind object;
  #L1f75c8.  v0:= new `java.util.ArrayDeque`;
  #L1f75cc.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L1f75d2.  v1.`h.s.g` @type ^`java.util.Deque` := v0 @kind object;
  #L1f75d6.  return @kind void;
}
procedure `h.f0$a` `a`(`h.s` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lh/s;.a:(Ljava/lang/String;)Lh/f0$a;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1f7510.  v0:= v3.`h.s.f` @type ^`java.util.Deque` @kind object;
  #L1f7514.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1f751a.  v0:= temp @kind object;
  #L1f751c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f7522.  v1:= temp;
  #L1f7524.  if v1 == 0 then goto L1f754a;
  #L1f7528.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f752e.  v1:= temp @kind object;
  #L1f7530.  v1:= (`h.f0$a`) v1 @kind object;
  #L1f7534.  call temp:= `c`(v1) @signature `Lh/f0$a;.c:()Ljava/lang/String;` @kind virtual;
  #L1f753a.  v2:= temp @kind object;
  #L1f753c.  call temp:= `equals`(v2, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f7542.  v2:= temp;
  #L1f7544.  if v2 == 0 then goto L1f751c;
  #L1f7548.  return v1 @kind object;
  #L1f754a.  v0:= v3.`h.s.e` @type ^`java.util.Deque` @kind object;
  #L1f754e.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1f7554.  v0:= temp @kind object;
  #L1f7556.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f755c.  v1:= temp;
  #L1f755e.  if v1 == 0 then goto L1f7584;
  #L1f7562.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f7568.  v1:= temp @kind object;
  #L1f756a.  v1:= (`h.f0$a`) v1 @kind object;
  #L1f756e.  call temp:= `c`(v1) @signature `Lh/f0$a;.c:()Ljava/lang/String;` @kind virtual;
  #L1f7574.  v2:= temp @kind object;
  #L1f7576.  call temp:= `equals`(v2, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f757c.  v2:= temp;
  #L1f757e.  if v2 == 0 then goto L1f7556;
  #L1f7582.  return v1 @kind object;
  #L1f7584.  v4:= 0I;
  #L1f7586.  return v4 @kind object;
}
procedure `void` `a`(`h.s` v0 @kind this, `java.util.Deque` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lh/s;.a:(Ljava/util/Deque;Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;

  #L1f7744.  @monitorenter v0
  #L1f7746.  call temp:= `remove`(v1, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L1f774c.  v1:= temp;
  #L1f774e.  if v1 == 0 then goto L1f7770;
  #L1f7752.  v1:= v0.`h.s.c` @type ^`java.lang.Runnable` @kind object;
  #L1f7756.  @monitorexit v0
  #L1f7758.  call temp:= `a`(v0) @signature `Lh/s;.a:()Z` @kind direct;
  #L1f775e.  v2:= temp;
  #L1f7760.  if v2 != 0 then goto L1f776e;
  #L1f7764.  if v1 == 0 then goto L1f776e;
  #L1f7768.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L1f776e.  return @kind void;
  #L1f7770.  v1:= new `java.lang.AssertionError`;
  #L1f7774.  v2:= "Call wasn't in-flight!" @kind object;
  #L1f7778.  call `<init>`(v1, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1f777e.  throw v1;
  #L1f7780.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1f7782.  @monitorexit v0
  #L1f7784.  throw v1;
  catch `java.lang.Throwable` @[L1f7746..L1f7758] goto L1f7780;
  catch `java.lang.Throwable` @[L1f7770..L1f7784] goto L1f7780;
}
procedure `boolean` `a`(`h.s` v6 @kind this) @signature `Lh/s;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1f736c.  v0:= new `java.util.ArrayList`;
  #L1f7370.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1f7376.  @monitorenter v6
  #L1f7378.  v1:= v6.`h.s.e` @type ^`java.util.Deque` @kind object;
  #L1f737c.  call temp:= `iterator`(v1) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1f7382.  v1:= temp @kind object;
  #L1f7384.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f738a.  v2:= temp;
  #L1f738c.  if v2 == 0 then goto L1f73f2;
  #L1f7390.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f7396.  v2:= temp @kind object;
  #L1f7398.  v2:= (`h.f0$a`) v2 @kind object;
  #L1f739c.  v3:= v6.`h.s.f` @type ^`java.util.Deque` @kind object;
  #L1f73a0.  call temp:= `size`(v3) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L1f73a6.  v3:= temp;
  #L1f73a8.  v4:= v6.`h.s.a` @type ^`int`;
  #L1f73ac.  if v3 < v4 then goto L1f73b2;
  #L1f73b0.  goto L1f73f2;
  #L1f73b2.  call temp:= `a`(v2) @signature `Lh/f0$a;.a:()Ljava/util/concurrent/atomic/AtomicInteger;` @kind virtual;
  #L1f73b8.  v3:= temp @kind object;
  #L1f73ba.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L1f73c0.  v3:= temp;
  #L1f73c2.  v4:= v6.`h.s.b` @type ^`int`;
  #L1f73c6.  if v3 < v4 then goto L1f73cc;
  #L1f73ca.  goto L1f7384;
  #L1f73cc.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L1f73d2.  call temp:= `a`(v2) @signature `Lh/f0$a;.a:()Ljava/util/concurrent/atomic/AtomicInteger;` @kind virtual;
  #L1f73d8.  v3:= temp @kind object;
  #L1f73da.  call temp:= `incrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L1f73e0.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f73e6.  v3:= v6.`h.s.f` @type ^`java.util.Deque` @kind object;
  #L1f73ea.  call temp:= `add`(v3, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f73f0.  goto L1f7384;
  #L1f73f2.  call temp:= `runningCallsCount`(v6) @signature `Lh/s;.runningCallsCount:()I` @kind virtual;
  #L1f73f8.  v1:= temp;
  #L1f73fa.  v2:= 0I;
  #L1f73fc.  if v1 <= 0 then goto L1f7404;
  #L1f7400.  v1:= 1I;
  #L1f7402.  goto L1f7406;
  #L1f7404.  v1:= 0I;
  #L1f7406.  @monitorexit v6
  #L1f7408.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1f740e.  v3:= temp;
  #L1f7410.  if v2 >= v3 then goto L1f7434;
  #L1f7414.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1f741a.  v4:= temp @kind object;
  #L1f741c.  v4:= (`h.f0$a`) v4 @kind object;
  #L1f7420.  call temp:= `executorService`(v6) @signature `Lh/s;.executorService:()Ljava/util/concurrent/ExecutorService;` @kind virtual;
  #L1f7426.  v5:= temp @kind object;
  #L1f7428.  call `a`(v4, v5) @signature `Lh/f0$a;.a:(Ljava/util/concurrent/ExecutorService;)V` @kind virtual;
  #L1f742e.  v2:= v2 + 1;
  #L1f7432.  goto L1f7410;
  #L1f7434.  return v1;
  #L1f7436.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1f7438.  @monitorexit v6
  #L1f743a.  throw v0;
  catch `java.lang.Throwable` @[L1f7378..L1f7408] goto L1f7436;
  catch `java.lang.Throwable` @[L1f7438..L1f743a] goto L1f7436;
}
procedure `void` `a`(`h.s` v1 @kind this, `h.f0$a` v2 @kind object) @signature `Lh/s;.a:(Lh/f0$a;)V` @AccessFlag  {
    temp;
    v0;

  #L1f76a4.  @monitorenter v1
  #L1f76a6.  v0:= v1.`h.s.e` @type ^`java.util.Deque` @kind object;
  #L1f76aa.  call temp:= `add`(v0, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f76b0.  call temp:= `b`(v2) @signature `Lh/f0$a;.b:()Lh/f0;` @kind virtual;
  #L1f76b6.  v0:= temp @kind object;
  #L1f76b8.  v0:= v0.`h.f0.i` @type ^`boolean` @kind boolean;
  #L1f76bc.  if v0 != 0 then goto L1f76da;
  #L1f76c0.  call temp:= `c`(v2) @signature `Lh/f0$a;.c:()Ljava/lang/String;` @kind virtual;
  #L1f76c6.  v0:= temp @kind object;
  #L1f76c8.  call temp:= `a`(v1, v0) @signature `Lh/s;.a:(Ljava/lang/String;)Lh/f0$a;` @kind direct;
  #L1f76ce.  v0:= temp @kind object;
  #L1f76d0.  if v0 == 0 then goto L1f76da;
  #L1f76d4.  call `a`(v2, v0) @signature `Lh/f0$a;.a:(Lh/f0$a;)V` @kind virtual;
  #L1f76da.  @monitorexit v1
  #L1f76dc.  call temp:= `a`(v1) @signature `Lh/s;.a:()Z` @kind direct;
  #L1f76e2.  return @kind void;
  #L1f76e4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1f76e6.  @monitorexit v1
  #L1f76e8.  throw v2;
  catch `java.lang.Throwable` @[L1f76a6..L1f76dc] goto L1f76e4;
  catch `java.lang.Throwable` @[L1f76e6..L1f76e8] goto L1f76e4;
}
procedure `void` `a`(`h.s` v1 @kind this, `h.f0` v2 @kind object) @signature `Lh/s;.a:(Lh/f0;)V` @AccessFlag  {
    temp;
    v0;

  #L1f7710.  @monitorenter v1
  #L1f7712.  v0:= v1.`h.s.g` @type ^`java.util.Deque` @kind object;
  #L1f7716.  call temp:= `add`(v0, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f771c.  @monitorexit v1
  #L1f771e.  return @kind void;
  #L1f7720.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1f7722.  @monitorexit v1
  #L1f7724.  throw v2;
  catch `java.lang.Throwable` @[L1f7712..L1f771c] goto L1f7720;
}
procedure `void` `b`(`h.s` v1 @kind this, `h.f0$a` v2 @kind object) @signature `Lh/s;.b:(Lh/f0$a;)V` @AccessFlag  {
    temp;
    v0;

  #L1f77ac.  call temp:= `a`(v2) @signature `Lh/f0$a;.a:()Ljava/util/concurrent/atomic/AtomicInteger;` @kind virtual;
  #L1f77b2.  v0:= temp @kind object;
  #L1f77b4.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L1f77ba.  v0:= v1.`h.s.f` @type ^`java.util.Deque` @kind object;
  #L1f77be.  call `a`(v1, v0, v2) @signature `Lh/s;.a:(Ljava/util/Deque;Ljava/lang/Object;)V` @kind direct;
  #L1f77c4.  return @kind void;
}
procedure `void` `b`(`h.s` v1 @kind this, `h.f0` v2 @kind object) @signature `Lh/s;.b:(Lh/f0;)V` @AccessFlag  {
    temp;
    v0;

  #L1f77d8.  v0:= v1.`h.s.g` @type ^`java.util.Deque` @kind object;
  #L1f77dc.  call `a`(v1, v0, v2) @signature `Lh/s;.a:(Ljava/util/Deque;Ljava/lang/Object;)V` @kind direct;
  #L1f77e2.  return @kind void;
}
procedure `void` `cancelAll`(`h.s` v2 @kind this) @signature `Lh/s;.cancelAll:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f75e8.  @monitorenter v2
  #L1f75ea.  v0:= v2.`h.s.e` @type ^`java.util.Deque` @kind object;
  #L1f75ee.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1f75f4.  v0:= temp @kind object;
  #L1f75f6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f75fc.  v1:= temp;
  #L1f75fe.  if v1 == 0 then goto L1f761e;
  #L1f7602.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f7608.  v1:= temp @kind object;
  #L1f760a.  v1:= (`h.f0$a`) v1 @kind object;
  #L1f760e.  call temp:= `b`(v1) @signature `Lh/f0$a;.b:()Lh/f0;` @kind virtual;
  #L1f7614.  v1:= temp @kind object;
  #L1f7616.  call `cancel`(v1) @signature `Lh/f0;.cancel:()V` @kind virtual;
  #L1f761c.  goto L1f75f6;
  #L1f761e.  v0:= v2.`h.s.f` @type ^`java.util.Deque` @kind object;
  #L1f7622.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1f7628.  v0:= temp @kind object;
  #L1f762a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f7630.  v1:= temp;
  #L1f7632.  if v1 == 0 then goto L1f7652;
  #L1f7636.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f763c.  v1:= temp @kind object;
  #L1f763e.  v1:= (`h.f0$a`) v1 @kind object;
  #L1f7642.  call temp:= `b`(v1) @signature `Lh/f0$a;.b:()Lh/f0;` @kind virtual;
  #L1f7648.  v1:= temp @kind object;
  #L1f764a.  call `cancel`(v1) @signature `Lh/f0;.cancel:()V` @kind virtual;
  #L1f7650.  goto L1f762a;
  #L1f7652.  v0:= v2.`h.s.g` @type ^`java.util.Deque` @kind object;
  #L1f7656.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1f765c.  v0:= temp @kind object;
  #L1f765e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1f7664.  v1:= temp;
  #L1f7666.  if v1 == 0 then goto L1f767e;
  #L1f766a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1f7670.  v1:= temp @kind object;
  #L1f7672.  v1:= (`h.f0`) v1 @kind object;
  #L1f7676.  call `cancel`(v1) @signature `Lh/f0;.cancel:()V` @kind virtual;
  #L1f767c.  goto L1f765e;
  #L1f767e.  @monitorexit v2
  #L1f7680.  return @kind void;
  #L1f7682.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1f7684.  @monitorexit v2
  #L1f7686.  throw v0;
  catch `java.lang.Throwable` @[L1f75ea..L1f767c] goto L1f7682;
}
procedure `java.util.concurrent.ExecutorService` `executorService`(`h.s` v9 @kind this) @signature `Lh/s;.executorService:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1f74a4.  @monitorenter v9
  #L1f74a6.  v0:= v9.`h.s.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L1f74aa.  if v0 != 0 then goto L1f74e6;
  #L1f74ae.  v0:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L1f74b2.  v2:= 0I;
  #L1f74b4.  v3:= 2147483647I;
  #L1f74ba.  v4:= 60L;
  #L1f74be.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1f74c2.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L1f74c6.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L1f74cc.  v1:= "OkHttp Dispatcher" @kind object;
  #L1f74d0.  v8:= 0I;
  #L1f74d2.  call temp:= `threadFactory`(v1, v8) @signature `Lh/n0/e;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L1f74d8.  v8:= temp @kind object;
  #L1f74da.  v1:= v0 @kind object;
  #L1f74dc.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1f74e2.  v9.`h.s.d` @type ^`java.util.concurrent.ExecutorService` := v0 @kind object;
  #L1f74e6.  v0:= v9.`h.s.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L1f74ea.  @monitorexit v9
  #L1f74ec.  return v0 @kind object;
  #L1f74ee.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1f74f0.  @monitorexit v9
  #L1f74f2.  throw v0;
  catch `java.lang.Throwable` @[L1f74a6..L1f74ea] goto L1f74ee;
}
procedure `int` `runningCallsCount`(`h.s` v2 @kind this) @signature `Lh/s;.runningCallsCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f7460.  @monitorenter v2
  #L1f7462.  v0:= v2.`h.s.f` @type ^`java.util.Deque` @kind object;
  #L1f7466.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L1f746c.  v0:= temp;
  #L1f746e.  v1:= v2.`h.s.g` @type ^`java.util.Deque` @kind object;
  #L1f7472.  call temp:= `size`(v1) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L1f7478.  v1:= temp;
  #L1f747a.  v0:= v0 + v1 @kind int;
  #L1f747c.  @monitorexit v2
  #L1f747e.  return v0;
  #L1f7480.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1f7482.  @monitorexit v2
  #L1f7484.  throw v0;
  catch `java.lang.Throwable` @[L1f7462..L1f747a] goto L1f7480;
}
