record `h.i` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `h.i.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `h.i.b` @AccessFlag PRIVATE_FINAL;
  `int` `h.i.c` @AccessFlag PRIVATE_FINAL;
  `int` `h.i.d` @AccessFlag PRIVATE_FINAL;
  `boolean` `h.i.e` @AccessFlag PRIVATE_FINAL;
  `boolean` `h.i.f` @AccessFlag PRIVATE_FINAL;
  `boolean` `h.i.g` @AccessFlag PRIVATE_FINAL;
  `int` `h.i.h` @AccessFlag PRIVATE_FINAL;
  `int` `h.i.i` @AccessFlag PRIVATE_FINAL;
  `boolean` `h.i.j` @AccessFlag PRIVATE_FINAL;
  `boolean` `h.i.k` @AccessFlag PRIVATE_FINAL;
  `boolean` `h.i.l` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `h.i.m` @AccessFlag ;
}
procedure `void` `<clinit>`() @signature `Lh/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1f507c.  v0:= new `h.i$a`;
  #L1f5080.  call `<init>`(v0) @signature `Lh/i$a;.<init>:()V` @kind direct;
  #L1f5086.  call temp:= `noCache`(v0) @signature `Lh/i$a;.noCache:()Lh/i$a;` @kind virtual;
  #L1f508c.  call temp:= `build`(v0) @signature `Lh/i$a;.build:()Lh/i;` @kind virtual;
  #L1f5092.  v0:= new `h.i$a`;
  #L1f5096.  call `<init>`(v0) @signature `Lh/i$a;.<init>:()V` @kind direct;
  #L1f509c.  call temp:= `onlyIfCached`(v0) @signature `Lh/i$a;.onlyIfCached:()Lh/i$a;` @kind virtual;
  #L1f50a2.  v1:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1f50a6.  v2:= 2147483647I;
  #L1f50ac.  call temp:= `maxStale`(v0, v2, v1) @signature `Lh/i$a;.maxStale:(ILjava/util/concurrent/TimeUnit;)Lh/i$a;` @kind virtual;
  #L1f50b2.  call temp:= `build`(v0) @signature `Lh/i$a;.build:()Lh/i;` @kind virtual;
  #L1f50b8.  return @kind void;
}
procedure `void` `<init>`(`h.i` v1 @kind this, `h.i$a` v2 @kind object) @signature `Lh/i;.<init>:(Lh/i$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1f5118.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f511e.  v0:= v2.`h.i$a.a` @type ^`boolean` @kind boolean;
  #L1f5122.  v1.`h.i.a` @type ^`boolean` := v0 @kind boolean;
  #L1f5126.  v0:= v2.`h.i$a.b` @type ^`boolean` @kind boolean;
  #L1f512a.  v1.`h.i.b` @type ^`boolean` := v0 @kind boolean;
  #L1f512e.  v0:= v2.`h.i$a.c` @type ^`int`;
  #L1f5132.  v1.`h.i.c` @type ^`int` := v0;
  #L1f5136.  v0:= -1I;
  #L1f5138.  v1.`h.i.d` @type ^`int` := v0;
  #L1f513c.  v0:= 0I;
  #L1f513e.  v1.`h.i.e` @type ^`boolean` := v0 @kind boolean;
  #L1f5142.  v1.`h.i.f` @type ^`boolean` := v0 @kind boolean;
  #L1f5146.  v1.`h.i.g` @type ^`boolean` := v0 @kind boolean;
  #L1f514a.  v0:= v2.`h.i$a.d` @type ^`int`;
  #L1f514e.  v1.`h.i.h` @type ^`int` := v0;
  #L1f5152.  v0:= v2.`h.i$a.e` @type ^`int`;
  #L1f5156.  v1.`h.i.i` @type ^`int` := v0;
  #L1f515a.  v0:= v2.`h.i$a.f` @type ^`boolean` @kind boolean;
  #L1f515e.  v1.`h.i.j` @type ^`boolean` := v0 @kind boolean;
  #L1f5162.  v0:= v2.`h.i$a.g` @type ^`boolean` @kind boolean;
  #L1f5166.  v1.`h.i.k` @type ^`boolean` := v0 @kind boolean;
  #L1f516a.  v2:= v2.`h.i$a.h` @type ^`boolean` @kind boolean;
  #L1f516e.  v1.`h.i.l` @type ^`boolean` := v2 @kind boolean;
  #L1f5172.  return @kind void;
}
procedure `void` `<init>`(`h.i` v0 @kind this, `boolean` v1 , `boolean` v2 , `int` v3 , `int` v4 , `boolean` v5 , `boolean` v6 , `boolean` v7 , `int` v8 , `int` v9 , `boolean` v10 , `boolean` v11 , `boolean` v12 , `java.lang.String` v13 @kind object) @signature `Lh/i;.<init>:(ZZIIZZZIIZZZLjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1f50cc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f50d2.  v0.`h.i.a` @type ^`boolean` := v1 @kind boolean;
  #L1f50d6.  v0.`h.i.b` @type ^`boolean` := v2 @kind boolean;
  #L1f50da.  v0.`h.i.c` @type ^`int` := v3;
  #L1f50de.  v0.`h.i.d` @type ^`int` := v4;
  #L1f50e2.  v0.`h.i.e` @type ^`boolean` := v5 @kind boolean;
  #L1f50e6.  v0.`h.i.f` @type ^`boolean` := v6 @kind boolean;
  #L1f50ea.  v0.`h.i.g` @type ^`boolean` := v7 @kind boolean;
  #L1f50ee.  v0.`h.i.h` @type ^`int` := v8;
  #L1f50f2.  v0.`h.i.i` @type ^`int` := v9;
  #L1f50f6.  v0.`h.i.j` @type ^`boolean` := v10 @kind boolean;
  #L1f50fa.  v0.`h.i.k` @type ^`boolean` := v11 @kind boolean;
  #L1f50fe.  v0.`h.i.l` @type ^`boolean` := v12 @kind boolean;
  #L1f5102.  v0.`h.i.m` @type ^`java.lang.String` := v13 @kind object;
  #L1f5106.  return @kind void;
}
procedure `java.lang.String` `a`(`h.i` v4 @kind this) @signature `Lh/i;.a:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f4c2c.  v0:= new `java.lang.StringBuilder`;
  #L1f4c30.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1f4c36.  v1:= v4.`h.i.a` @type ^`boolean` @kind boolean;
  #L1f4c3a.  if v1 == 0 then goto L1f4c48;
  #L1f4c3e.  v1:= "no-cache, " @kind object;
  #L1f4c42.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4c48.  v1:= v4.`h.i.b` @type ^`boolean` @kind boolean;
  #L1f4c4c.  if v1 == 0 then goto L1f4c5a;
  #L1f4c50.  v1:= "no-store, " @kind object;
  #L1f4c54.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4c5a.  v1:= v4.`h.i.c` @type ^`int`;
  #L1f4c5e.  v2:= ", " @kind object;
  #L1f4c62.  v3:= -1I;
  #L1f4c64.  if v1 == v3 then goto L1f4c82;
  #L1f4c68.  v1:= "max-age=" @kind object;
  #L1f4c6c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4c72.  v1:= v4.`h.i.c` @type ^`int`;
  #L1f4c76.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4c7c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4c82.  v1:= v4.`h.i.d` @type ^`int`;
  #L1f4c86.  if v1 == v3 then goto L1f4ca4;
  #L1f4c8a.  v1:= "s-maxage=" @kind object;
  #L1f4c8e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4c94.  v1:= v4.`h.i.d` @type ^`int`;
  #L1f4c98.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4c9e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4ca4.  v1:= v4.`h.i.e` @type ^`boolean` @kind boolean;
  #L1f4ca8.  if v1 == 0 then goto L1f4cb6;
  #L1f4cac.  v1:= "private, " @kind object;
  #L1f4cb0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4cb6.  v1:= v4.`h.i.f` @type ^`boolean` @kind boolean;
  #L1f4cba.  if v1 == 0 then goto L1f4cc8;
  #L1f4cbe.  v1:= "public, " @kind object;
  #L1f4cc2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4cc8.  v1:= v4.`h.i.g` @type ^`boolean` @kind boolean;
  #L1f4ccc.  if v1 == 0 then goto L1f4cda;
  #L1f4cd0.  v1:= "must-revalidate, " @kind object;
  #L1f4cd4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4cda.  v1:= v4.`h.i.h` @type ^`int`;
  #L1f4cde.  if v1 == v3 then goto L1f4cfc;
  #L1f4ce2.  v1:= "max-stale=" @kind object;
  #L1f4ce6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4cec.  v1:= v4.`h.i.h` @type ^`int`;
  #L1f4cf0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4cf6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4cfc.  v1:= v4.`h.i.i` @type ^`int`;
  #L1f4d00.  if v1 == v3 then goto L1f4d1e;
  #L1f4d04.  v1:= "min-fresh=" @kind object;
  #L1f4d08.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4d0e.  v1:= v4.`h.i.i` @type ^`int`;
  #L1f4d12.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4d18.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4d1e.  v1:= v4.`h.i.j` @type ^`boolean` @kind boolean;
  #L1f4d22.  if v1 == 0 then goto L1f4d30;
  #L1f4d26.  v1:= "only-if-cached, " @kind object;
  #L1f4d2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4d30.  v1:= v4.`h.i.k` @type ^`boolean` @kind boolean;
  #L1f4d34.  if v1 == 0 then goto L1f4d42;
  #L1f4d38.  v1:= "no-transform, " @kind object;
  #L1f4d3c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4d42.  v1:= v4.`h.i.l` @type ^`boolean` @kind boolean;
  #L1f4d46.  if v1 == 0 then goto L1f4d54;
  #L1f4d4a.  v1:= "immutable, " @kind object;
  #L1f4d4e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4d54.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L1f4d5a.  v1:= temp;
  #L1f4d5c.  if v1 != 0 then goto L1f4d66;
  #L1f4d60.  v0:= "" @kind object;
  #L1f4d64.  return v0 @kind object;
  #L1f4d66.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L1f4d6c.  v1:= temp;
  #L1f4d6e.  v1:= v1 + -2;
  #L1f4d72.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L1f4d78.  v2:= temp;
  #L1f4d7a.  call temp:= `delete`(v0, v1, v2) @signature `Ljava/lang/StringBuilder;.delete:(II)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f4d80.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f4d86.  v0:= temp @kind object;
  #L1f4d88.  return v0 @kind object;
}
procedure `h.i` `parse`(`h.y` v22 @kind object) @signature `Lh/i;.parse:(Lh/y;)Lh/i;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L1f4dc4.  v0:= v22 @kind object;
  #L1f4dc8.  call temp:= `size`(v22) @signature `Lh/y;.size:()I` @kind virtual;
  #L1f4dce.  v1:= temp;
  #L1f4dd0.  v6:= 0I;
  #L1f4dd2.  v7:= 1I;
  #L1f4dd4.  v8:= 0I;
  #L1f4dd6.  v9:= 0I;
  #L1f4dd8.  v10:= 0I;
  #L1f4dda.  v11:= -1I;
  #L1f4ddc.  v12:= -1I;
  #L1f4dde.  v13:= 0I;
  #L1f4de0.  v14:= 0I;
  #L1f4de2.  v15:= 0I;
  #L1f4de4.  v16:= -1I;
  #L1f4de8.  v17:= -1I;
  #L1f4dec.  v18:= 0I;
  #L1f4df0.  v19:= 0I;
  #L1f4df4.  v20:= 0I;
  #L1f4df8.  if v6 >= v1 then goto L1f5050;
  #L1f4dfc.  call temp:= `name`(v0, v6) @signature `Lh/y;.name:(I)Ljava/lang/String;` @kind virtual;
  #L1f4e02.  v2:= temp @kind object;
  #L1f4e04.  call temp:= `value`(v0, v6) @signature `Lh/y;.value:(I)Ljava/lang/String;` @kind virtual;
  #L1f4e0a.  v4:= temp @kind object;
  #L1f4e0c.  v3:= "Cache-Control" @kind object;
  #L1f4e10.  call temp:= `equalsIgnoreCase`(v2, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1f4e16.  v3:= temp;
  #L1f4e18.  if v3 == 0 then goto L1f4e26;
  #L1f4e1c.  if v8 == 0 then goto L1f4e22;
  #L1f4e20.  goto L1f4e36;
  #L1f4e22.  v8:= v4 @kind object;
  #L1f4e24.  goto L1f4e38;
  #L1f4e26.  v3:= "Pragma" @kind object;
  #L1f4e2a.  call temp:= `equalsIgnoreCase`(v2, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1f4e30.  v2:= temp;
  #L1f4e32.  if v2 == 0 then goto L1f5042;
  #L1f4e36.  v7:= 0I;
  #L1f4e38.  v2:= 0I;
  #L1f4e3a.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f4e40.  v3:= temp;
  #L1f4e42.  if v2 >= v3 then goto L1f5042;
  #L1f4e46.  v3:= "=,;" @kind object;
  #L1f4e4a.  call temp:= `skipUntil`(v4, v2, v3) @signature `Lh/n0/h/e;.skipUntil:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L1f4e50.  v3:= temp;
  #L1f4e52.  call temp:= `substring`(v4, v2, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1f4e58.  v2:= temp @kind object;
  #L1f4e5a.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L1f4e60.  v2:= temp @kind object;
  #L1f4e62.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f4e68.  v5:= temp;
  #L1f4e6a.  if v3 == v5 then goto L1f4ef6;
  #L1f4e6e.  call temp:= `charAt`(v4, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1f4e74.  v5:= temp;
  #L1f4e76.  v0:= 44I;
  #L1f4e7a.  if v5 == v0 then goto L1f4ef6;
  #L1f4e7e.  call temp:= `charAt`(v4, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1f4e84.  v0:= temp;
  #L1f4e86.  v5:= 59I;
  #L1f4e8a.  if v0 != v5 then goto L1f4e90;
  #L1f4e8e.  goto L1f4ef6;
  #L1f4e90.  v3:= v3 + 1;
  #L1f4e94.  call temp:= `skipWhitespace`(v4, v3) @signature `Lh/n0/h/e;.skipWhitespace:(Ljava/lang/String;I)I` @kind static;
  #L1f4e9a.  v0:= temp;
  #L1f4e9c.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f4ea2.  v3:= temp;
  #L1f4ea4.  if v0 >= v3 then goto L1f4ed6;
  #L1f4ea8.  call temp:= `charAt`(v4, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1f4eae.  v3:= temp;
  #L1f4eb0.  v5:= 34I;
  #L1f4eb4.  if v3 != v5 then goto L1f4ed6;
  #L1f4eb8.  v0:= v0 + 1;
  #L1f4ebc.  v3:= "\"" @kind object;
  #L1f4ec0.  call temp:= `skipUntil`(v4, v0, v3) @signature `Lh/n0/h/e;.skipUntil:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L1f4ec6.  v3:= temp;
  #L1f4ec8.  call temp:= `substring`(v4, v0, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1f4ece.  v0:= temp @kind object;
  #L1f4ed0.  v5:= 1I;
  #L1f4ed2.  v3:= v3 + v5 @kind int;
  #L1f4ed4.  goto L1f4efe;
  #L1f4ed6.  v5:= 1I;
  #L1f4ed8.  v3:= ",;" @kind object;
  #L1f4edc.  call temp:= `skipUntil`(v4, v0, v3) @signature `Lh/n0/h/e;.skipUntil:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L1f4ee2.  v3:= temp;
  #L1f4ee4.  call temp:= `substring`(v4, v0, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1f4eea.  v0:= temp @kind object;
  #L1f4eec.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L1f4ef2.  v0:= temp @kind object;
  #L1f4ef4.  goto L1f4efe;
  #L1f4ef6.  v5:= 1I;
  #L1f4ef8.  v3:= v3 + 1;
  #L1f4efc.  v0:= 0I;
  #L1f4efe.  v5:= "no-cache" @kind object;
  #L1f4f02.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1f4f08.  v5:= temp;
  #L1f4f0a.  if v5 == 0 then goto L1f4f16;
  #L1f4f0e.  v5:= -1I;
  #L1f4f10.  v9:= 1I;
  #L1f4f12.  goto L1f5038;
  #L1f4f16.  v5:= "no-store" @kind object;
  #L1f4f1a.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1f4f20.  v5:= temp;
  #L1f4f22.  if v5 == 0 then goto L1f4f2e;
  #L1f4f26.  v5:= -1I;
  #L1f4f28.  v10:= 1I;
  #L1f4f2a.  goto L1f5038;
  #L1f4f2e.  v5:= "max-age" @kind object;
  #L1f4f32.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1f4f38.  v5:= temp;
  #L1f4f3a.  if v5 == 0 then goto L1f4f4e;
  #L1f4f3e.  v5:= -1I;
  #L1f4f40.  call temp:= `parseSeconds`(v0, v5) @signature `Lh/n0/h/e;.parseSeconds:(Ljava/lang/String;I)I` @kind static;
  #L1f4f46.  v0:= temp;
  #L1f4f48.  v11:= v0;
  #L1f4f4a.  goto L1f5038;
  #L1f4f4e.  v5:= "s-maxage" @kind object;
  #L1f4f52.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1f4f58.  v5:= temp;
  #L1f4f5a.  if v5 == 0 then goto L1f4f6e;
  #L1f4f5e.  v5:= -1I;
  #L1f4f60.  call temp:= `parseSeconds`(v0, v5) @signature `Lh/n0/h/e;.parseSeconds:(Ljava/lang/String;I)I` @kind static;
  #L1f4f66.  v0:= temp;
  #L1f4f68.  v12:= v0;
  #L1f4f6a.  goto L1f5038;
  #L1f4f6e.  v5:= "private" @kind object;
  #L1f4f72.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1f4f78.  v5:= temp;
  #L1f4f7a.  if v5 == 0 then goto L1f4f84;
  #L1f4f7e.  v5:= -1I;
  #L1f4f80.  v13:= 1I;
  #L1f4f82.  goto L1f5038;
  #L1f4f84.  v5:= "public" @kind object;
  #L1f4f88.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1f4f8e.  v5:= temp;
  #L1f4f90.  if v5 == 0 then goto L1f4f9a;
  #L1f4f94.  v5:= -1I;
  #L1f4f96.  v14:= 1I;
  #L1f4f98.  goto L1f5038;
  #L1f4f9a.  v5:= "must-revalidate" @kind object;
  #L1f4f9e.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1f4fa4.  v5:= temp;
  #L1f4fa6.  if v5 == 0 then goto L1f4fb0;
  #L1f4faa.  v5:= -1I;
  #L1f4fac.  v15:= 1I;
  #L1f4fae.  goto L1f5038;
  #L1f4fb0.  v5:= "max-stale" @kind object;
  #L1f4fb4.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1f4fba.  v5:= temp;
  #L1f4fbc.  if v5 == 0 then goto L1f4fd6;
  #L1f4fc0.  v2:= 2147483647I;
  #L1f4fc6.  call temp:= `parseSeconds`(v0, v2) @signature `Lh/n0/h/e;.parseSeconds:(Ljava/lang/String;I)I` @kind static;
  #L1f4fcc.  v0:= temp;
  #L1f4fce.  v16:= v0;
  #L1f4fd2.  v5:= -1I;
  #L1f4fd4.  goto L1f5038;
  #L1f4fd6.  v5:= "min-fresh" @kind object;
  #L1f4fda.  call temp:= `equalsIgnoreCase`(v5, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1f4fe0.  v5:= temp;
  #L1f4fe2.  if v5 == 0 then goto L1f4ff6;
  #L1f4fe6.  v5:= -1I;
  #L1f4fe8.  call temp:= `parseSeconds`(v0, v5) @signature `Lh/n0/h/e;.parseSeconds:(Ljava/lang/String;I)I` @kind static;
  #L1f4fee.  v0:= temp;
  #L1f4ff0.  v17:= v0;
  #L1f4ff4.  goto L1f5038;
  #L1f4ff6.  v5:= -1I;
  #L1f4ff8.  v0:= "only-if-cached" @kind object;
  #L1f4ffc.  call temp:= `equalsIgnoreCase`(v0, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1f5002.  v0:= temp;
  #L1f5004.  if v0 == 0 then goto L1f500e;
  #L1f5008.  v18:= 1I;
  #L1f500c.  goto L1f5038;
  #L1f500e.  v0:= "no-transform" @kind object;
  #L1f5012.  call temp:= `equalsIgnoreCase`(v0, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1f5018.  v0:= temp;
  #L1f501a.  if v0 == 0 then goto L1f5024;
  #L1f501e.  v19:= 1I;
  #L1f5022.  goto L1f5038;
  #L1f5024.  v0:= "immutable" @kind object;
  #L1f5028.  call temp:= `equalsIgnoreCase`(v0, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1f502e.  v0:= temp;
  #L1f5030.  if v0 == 0 then goto L1f5038;
  #L1f5034.  v20:= 1I;
  #L1f5038.  v0:= v22 @kind object;
  #L1f503c.  v2:= v3;
  #L1f503e.  goto L1f4e3a;
  #L1f5042.  v5:= -1I;
  #L1f5044.  v6:= v6 + 1;
  #L1f5048.  v0:= v22 @kind object;
  #L1f504c.  goto L1f4df8;
  #L1f5050.  if v7 != 0 then goto L1f505a;
  #L1f5054.  v21:= 0I;
  #L1f5058.  goto L1f505e;
  #L1f505a.  v21:= v8 @kind object;
  #L1f505e.  v0:= new `h.i`;
  #L1f5062.  v8:= v0 @kind object;
  #L1f5064.  call `<init>`(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21) @signature `Lh/i;.<init>:(ZZIIZZZIIZZZLjava/lang/String;)V` @kind direct;
  #L1f506a.  return v0 @kind object;
}
procedure `boolean` `isPrivate`(`h.i` v1 @kind this) @signature `Lh/i;.isPrivate:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f4b54.  v0:= v1.`h.i.e` @type ^`boolean` @kind boolean;
  #L1f4b58.  return v0;
}
procedure `boolean` `isPublic`(`h.i` v1 @kind this) @signature `Lh/i;.isPublic:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f4b6c.  v0:= v1.`h.i.f` @type ^`boolean` @kind boolean;
  #L1f4b70.  return v0;
}
procedure `int` `maxAgeSeconds`(`h.i` v1 @kind this) @signature `Lh/i;.maxAgeSeconds:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f4be4.  v0:= v1.`h.i.c` @type ^`int`;
  #L1f4be8.  return v0;
}
procedure `int` `maxStaleSeconds`(`h.i` v1 @kind this) @signature `Lh/i;.maxStaleSeconds:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f4bfc.  v0:= v1.`h.i.h` @type ^`int`;
  #L1f4c00.  return v0;
}
procedure `int` `minFreshSeconds`(`h.i` v1 @kind this) @signature `Lh/i;.minFreshSeconds:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f4c14.  v0:= v1.`h.i.i` @type ^`int`;
  #L1f4c18.  return v0;
}
procedure `boolean` `mustRevalidate`(`h.i` v1 @kind this) @signature `Lh/i;.mustRevalidate:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f4b84.  v0:= v1.`h.i.g` @type ^`boolean` @kind boolean;
  #L1f4b88.  return v0;
}
procedure `boolean` `noCache`(`h.i` v1 @kind this) @signature `Lh/i;.noCache:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f4b9c.  v0:= v1.`h.i.a` @type ^`boolean` @kind boolean;
  #L1f4ba0.  return v0;
}
procedure `boolean` `noStore`(`h.i` v1 @kind this) @signature `Lh/i;.noStore:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f4bb4.  v0:= v1.`h.i.b` @type ^`boolean` @kind boolean;
  #L1f4bb8.  return v0;
}
procedure `boolean` `onlyIfCached`(`h.i` v1 @kind this) @signature `Lh/i;.onlyIfCached:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f4bcc.  v0:= v1.`h.i.j` @type ^`boolean` @kind boolean;
  #L1f4bd0.  return v0;
}
procedure `java.lang.String` `toString`(`h.i` v1 @kind this) @signature `Lh/i;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f4d9c.  v0:= v1.`h.i.m` @type ^`java.lang.String` @kind object;
  #L1f4da0.  if v0 == 0 then goto L1f4da6;
  #L1f4da4.  goto L1f4db2;
  #L1f4da6.  call temp:= `a`(v1) @signature `Lh/i;.a:()Ljava/lang/String;` @kind direct;
  #L1f4dac.  v0:= temp @kind object;
  #L1f4dae.  v1.`h.i.m` @type ^`java.lang.String` := v0 @kind object;
  #L1f4db2.  return v0 @kind object;
}
