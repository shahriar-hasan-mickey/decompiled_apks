record `h.y` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `h.y.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`h.y` v1 @kind this, `h.y$a` v2 @kind object) @signature `Lh/y;.<init>:(Lh/y$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1f8578.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f857e.  v2:= v2.`h.y$a.a` @type ^`java.util.List` @kind object;
  #L1f8582.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1f8588.  v0:= temp;
  #L1f858a.  v0:= new `java.lang.String`[v0];
  #L1f858e.  call temp:= `toArray`(v2, v0) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L1f8594.  v2:= temp @kind object;
  #L1f8596.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L1f859a.  v1.`h.y.a` @type ^`java.lang.String`[] := v2 @kind object;
  #L1f859e.  return @kind void;
}
procedure `void` `<init>`(`h.y` v0 @kind this, `java.lang.String`[] v1 @kind object) @signature `Lh/y;.<init>:([Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1f855c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f8562.  v0.`h.y.a` @type ^`java.lang.String`[] := v1 @kind object;
  #L1f8566.  return @kind void;
}
procedure `java.lang.String` `a`(`java.lang.String`[] v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lh/y;.a:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1f8320.  v0:= length @variable v2;
  #L1f8322.  v0:= v0 + -2;
  #L1f8326.  if v0 < 0 then goto L1f834a;
  #L1f832a.  v1:= v2[v0] @kind object;
  #L1f832e.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1f8334.  v1:= temp;
  #L1f8336.  if v1 == 0 then goto L1f8344;
  #L1f833a.  v0:= v0 + 1;
  #L1f833e.  v2:= v2[v0] @kind object;
  #L1f8342.  return v2 @kind object;
  #L1f8344.  v0:= v0 + -2;
  #L1f8348.  goto L1f8326;
  #L1f834a.  v2:= 0I;
  #L1f834c.  return v2 @kind object;
}
procedure `void` `a`(`java.lang.String` v5 @kind object) @signature `Lh/y;.a:(Ljava/lang/String;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1f85b0.  if v5 == 0 then goto L1f863e;
  #L1f85b4.  call temp:= `isEmpty`(v5) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L1f85ba.  v0:= temp;
  #L1f85bc.  if v0 != 0 then goto L1f862e;
  #L1f85c0.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f85c6.  v0:= temp;
  #L1f85c8.  v1:= 0I;
  #L1f85ca.  v2:= 0I;
  #L1f85cc.  if v2 >= v0 then goto L1f862c;
  #L1f85d0.  call temp:= `charAt`(v5, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1f85d6.  v3:= temp;
  #L1f85d8.  v4:= 32I;
  #L1f85dc.  if v3 <= v4 then goto L1f85ee;
  #L1f85e0.  v4:= 127I;
  #L1f85e4.  if v3 >= v4 then goto L1f85ee;
  #L1f85e8.  v2:= v2 + 1;
  #L1f85ec.  goto L1f85cc;
  #L1f85ee.  v0:= new `java.lang.IllegalArgumentException`;
  #L1f85f2.  v4:= 3I;
  #L1f85f4.  v4:= new `java.lang.Object`[v4];
  #L1f85f8.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1f85fe.  v3:= temp @kind object;
  #L1f8600.  v4[v1]:= v3 @kind object;
  #L1f8604.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1f860a.  v1:= temp @kind object;
  #L1f860c.  v2:= 1I;
  #L1f860e.  v4[v2]:= v1 @kind object;
  #L1f8612.  v1:= 2I;
  #L1f8614.  v4[v1]:= v5 @kind object;
  #L1f8618.  v5:= "Unexpected char %#04x at %d in header name: %s" @kind object;
  #L1f861c.  call temp:= `format`(v5, v4) @signature `Lh/n0/e;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f8622.  v5:= temp @kind object;
  #L1f8624.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f862a.  throw v0;
  #L1f862c.  return @kind void;
  #L1f862e.  v5:= new `java.lang.IllegalArgumentException`;
  #L1f8632.  v0:= "name is empty" @kind object;
  #L1f8636.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f863c.  throw v5;
  #L1f863e.  v5:= new `java.lang.NullPointerException`;
  #L1f8642.  v0:= "name == null" @kind object;
  #L1f8646.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f864c.  throw v5;
}
procedure `void` `a`(`java.lang.String` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lh/y;.a:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1f8660.  if v5 == 0 then goto L1f86e0;
  #L1f8664.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f866a.  v0:= temp;
  #L1f866c.  v1:= 0I;
  #L1f866e.  v2:= 0I;
  #L1f8670.  if v2 >= v0 then goto L1f86de;
  #L1f8674.  call temp:= `charAt`(v5, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1f867a.  v3:= temp;
  #L1f867c.  v4:= 31I;
  #L1f8680.  if v3 > v4 then goto L1f868c;
  #L1f8684.  v4:= 9I;
  #L1f8688.  if v3 != v4 then goto L1f869a;
  #L1f868c.  v4:= 127I;
  #L1f8690.  if v3 >= v4 then goto L1f869a;
  #L1f8694.  v2:= v2 + 1;
  #L1f8698.  goto L1f8670;
  #L1f869a.  v0:= new `java.lang.IllegalArgumentException`;
  #L1f869e.  v4:= 4I;
  #L1f86a0.  v4:= new `java.lang.Object`[v4];
  #L1f86a4.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1f86aa.  v3:= temp @kind object;
  #L1f86ac.  v4[v1]:= v3 @kind object;
  #L1f86b0.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1f86b6.  v1:= temp @kind object;
  #L1f86b8.  v2:= 1I;
  #L1f86ba.  v4[v2]:= v1 @kind object;
  #L1f86be.  v1:= 2I;
  #L1f86c0.  v4[v1]:= v6 @kind object;
  #L1f86c4.  v6:= 3I;
  #L1f86c6.  v4[v6]:= v5 @kind object;
  #L1f86ca.  v5:= "Unexpected char %#04x at %d in %s value: %s" @kind object;
  #L1f86ce.  call temp:= `format`(v5, v4) @signature `Lh/n0/e;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f86d4.  v5:= temp @kind object;
  #L1f86d6.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f86dc.  throw v0;
  #L1f86de.  return @kind void;
  #L1f86e0.  v5:= new `java.lang.NullPointerException`;
  #L1f86e4.  v0:= new `java.lang.StringBuilder`;
  #L1f86e8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1f86ee.  v1:= "value for name " @kind object;
  #L1f86f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f86f8.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f86fe.  v6:= " == null" @kind object;
  #L1f8702.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f8708.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f870e.  v6:= temp @kind object;
  #L1f8710.  call `<init>`(v5, v6) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f8716.  throw v5;
}
procedure `h.y` `of`(`java.lang.String`[] v3 @kind object) @signature `Lh/y;.of:([Ljava/lang/String;)Lh/y;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1f847c.  if v3 == 0 then goto L1f850e;
  #L1f8480.  v0:= length @variable v3;
  #L1f8482.  v0:= v0 %% 2;
  #L1f8486.  if v0 != 0 then goto L1f84fe;
  #L1f848a.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1f8490.  v3:= temp @kind object;
  #L1f8492.  v3:= (`java.lang.String`[]) v3 @kind object;
  #L1f8496.  v0:= 0I;
  #L1f8498.  v1:= 0I;
  #L1f849a.  v2:= length @variable v3;
  #L1f849c.  if v1 >= v2 then goto L1f84ce;
  #L1f84a0.  v2:= v3[v1] @kind object;
  #L1f84a4.  if v2 == 0 then goto L1f84be;
  #L1f84a8.  v2:= v3[v1] @kind object;
  #L1f84ac.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L1f84b2.  v2:= temp @kind object;
  #L1f84b4.  v3[v1]:= v2 @kind object;
  #L1f84b8.  v1:= v1 + 1;
  #L1f84bc.  goto L1f849a;
  #L1f84be.  v3:= new `java.lang.IllegalArgumentException`;
  #L1f84c2.  v0:= "Headers cannot be null" @kind object;
  #L1f84c6.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f84cc.  throw v3;
  #L1f84ce.  v1:= length @variable v3;
  #L1f84d0.  if v0 >= v1 then goto L1f84f2;
  #L1f84d4.  v1:= v3[v0] @kind object;
  #L1f84d8.  v2:= v0 + 1;
  #L1f84dc.  v2:= v3[v2] @kind object;
  #L1f84e0.  call `a`(v1) @signature `Lh/y;.a:(Ljava/lang/String;)V` @kind static;
  #L1f84e6.  call `a`(v2, v1) @signature `Lh/y;.a:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L1f84ec.  v0:= v0 + 2;
  #L1f84f0.  goto L1f84ce;
  #L1f84f2.  v0:= new `h.y`;
  #L1f84f6.  call `<init>`(v0, v3) @signature `Lh/y;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L1f84fc.  return v0 @kind object;
  #L1f84fe.  v3:= new `java.lang.IllegalArgumentException`;
  #L1f8502.  v0:= "Expected alternating header names and values" @kind object;
  #L1f8506.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f850c.  throw v3;
  #L1f850e.  v3:= new `java.lang.NullPointerException`;
  #L1f8512.  v0:= "namesAndValues == null" @kind object;
  #L1f8516.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f851c.  throw v3;
}
procedure `boolean` `equals`(`h.y` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lh/y;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f828c.  v0:= instanceof @variable v2 @type ^`h.y` @kind boolean;
  #L1f8290.  if v0 == 0 then goto L1f82b0;
  #L1f8294.  v2:= (`h.y`) v2 @kind object;
  #L1f8298.  v2:= v2.`h.y.a` @type ^`java.lang.String`[] @kind object;
  #L1f829c.  v0:= v1.`h.y.a` @type ^`java.lang.String`[] @kind object;
  #L1f82a0.  call temp:= `equals`(v2, v0) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1f82a6.  v2:= temp;
  #L1f82a8.  if v2 == 0 then goto L1f82b0;
  #L1f82ac.  v2:= 1I;
  #L1f82ae.  goto L1f82b2;
  #L1f82b0.  v2:= 0I;
  #L1f82b2.  return v2;
}
procedure `java.lang.String` `get`(`h.y` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lh/y;.get:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f8300.  v0:= v1.`h.y.a` @type ^`java.lang.String`[] @kind object;
  #L1f8304.  call temp:= `a`(v0, v2) @signature `Lh/y;.a:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L1f830a.  v2:= temp @kind object;
  #L1f830c.  return v2 @kind object;
}
procedure `int` `hashCode`(`h.y` v1 @kind this) @signature `Lh/y;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f82c4.  v0:= v1.`h.y.a` @type ^`java.lang.String`[] @kind object;
  #L1f82c8.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L1f82ce.  v0:= temp;
  #L1f82d0.  return v0;
}
procedure `java.lang.String` `name`(`h.y` v1 @kind this, `int` v2 ) @signature `Lh/y;.name:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f8360.  v0:= v1.`h.y.a` @type ^`java.lang.String`[] @kind object;
  #L1f8364.  v2:= v2 * 2;
  #L1f8368.  v2:= v0[v2] @kind object;
  #L1f836c.  return v2 @kind object;
}
procedure `h.y$a` `newBuilder`(`h.y` v3 @kind this) @signature `Lh/y;.newBuilder:()Lh/y$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1f8530.  v0:= new `h.y$a`;
  #L1f8534.  call `<init>`(v0) @signature `Lh/y$a;.<init>:()V` @kind direct;
  #L1f853a.  v1:= v0.`h.y$a.a` @type ^`java.util.List` @kind object;
  #L1f853e.  v2:= v3.`h.y.a` @type ^`java.lang.String`[] @kind object;
  #L1f8542.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/Collections;.addAll:(Ljava/util/Collection;[Ljava/lang/Object;)Z` @kind static;
  #L1f8548.  return v0 @kind object;
}
procedure `int` `size`(`h.y` v1 @kind this) @signature `Lh/y;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f82e4.  v0:= v1.`h.y.a` @type ^`java.lang.String`[] @kind object;
  #L1f82e8.  v0:= length @variable v0;
  #L1f82ea.  v0:= v0 / 2;
  #L1f82ee.  return v0;
}
procedure `java.lang.String` `toString`(`h.y` v4 @kind this) @signature `Lh/y;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f8380.  v0:= new `java.lang.StringBuilder`;
  #L1f8384.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1f838a.  call temp:= `size`(v4) @signature `Lh/y;.size:()I` @kind virtual;
  #L1f8390.  v1:= temp;
  #L1f8392.  v2:= 0I;
  #L1f8394.  if v2 >= v1 then goto L1f83ce;
  #L1f8398.  call temp:= `name`(v4, v2) @signature `Lh/y;.name:(I)Ljava/lang/String;` @kind virtual;
  #L1f839e.  v3:= temp @kind object;
  #L1f83a0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f83a6.  v3:= ": " @kind object;
  #L1f83aa.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f83b0.  call temp:= `value`(v4, v2) @signature `Lh/y;.value:(I)Ljava/lang/String;` @kind virtual;
  #L1f83b6.  v3:= temp @kind object;
  #L1f83b8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f83be.  v3:= "\n" @kind object;
  #L1f83c2.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f83c8.  v2:= v2 + 1;
  #L1f83cc.  goto L1f8394;
  #L1f83ce.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f83d4.  v0:= temp @kind object;
  #L1f83d6.  return v0 @kind object;
}
procedure `java.lang.String` `value`(`h.y` v1 @kind this, `int` v2 ) @signature `Lh/y;.value:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f83e8.  v0:= v1.`h.y.a` @type ^`java.lang.String`[] @kind object;
  #L1f83ec.  v2:= v2 * 2;
  #L1f83f0.  v2:= v2 + 1;
  #L1f83f4.  v2:= v0[v2] @kind object;
  #L1f83f8.  return v2 @kind object;
}
procedure `java.util.List` `values`(`h.y` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lh/y;.values:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f840c.  call temp:= `size`(v4) @signature `Lh/y;.size:()I` @kind virtual;
  #L1f8412.  v0:= temp;
  #L1f8414.  v1:= 0I;
  #L1f8416.  v2:= 0I;
  #L1f8418.  if v2 >= v0 then goto L1f8454;
  #L1f841c.  call temp:= `name`(v4, v2) @signature `Lh/y;.name:(I)Ljava/lang/String;` @kind virtual;
  #L1f8422.  v3:= temp @kind object;
  #L1f8424.  call temp:= `equalsIgnoreCase`(v5, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1f842a.  v3:= temp;
  #L1f842c.  if v3 == 0 then goto L1f844e;
  #L1f8430.  if v1 != 0 then goto L1f8440;
  #L1f8434.  v1:= new `java.util.ArrayList`;
  #L1f8438.  v3:= 2I;
  #L1f843a.  call `<init>`(v1, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L1f8440.  call temp:= `value`(v4, v2) @signature `Lh/y;.value:(I)Ljava/lang/String;` @kind virtual;
  #L1f8446.  v3:= temp @kind object;
  #L1f8448.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1f844e.  v2:= v2 + 1;
  #L1f8452.  goto L1f8418;
  #L1f8454.  if v1 == 0 then goto L1f8462;
  #L1f8458.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1f845e.  v5:= temp @kind object;
  #L1f8460.  goto L1f846a;
  #L1f8462.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L1f8468.  v5:= temp @kind object;
  #L1f846a.  return v5 @kind object;
}
