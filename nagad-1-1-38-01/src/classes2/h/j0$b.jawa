record `h.j0$b` @kind class @AccessFlag FINAL extends `java.io.Reader` @kind class {
  `i.g` `h.j0$b.f` @AccessFlag PRIVATE_FINAL;
  `java.nio.charset.Charset` `h.j0$b.g` @AccessFlag PRIVATE_FINAL;
  `boolean` `h.j0$b.h` @AccessFlag PRIVATE;
  `java.io.Reader` `h.j0$b.i` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`h.j0$b` v0 @kind this, `i.g` v1 @kind object, `java.nio.charset.Charset` v2 @kind object) @signature `Lh/j0$b;.<init>:(Li/g;Ljava/nio/charset/Charset;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1fcce4.  call `<init>`(v0) @signature `Ljava/io/Reader;.<init>:()V` @kind direct;
  #L1fccea.  v0.`h.j0$b.f` @type ^`i.g` := v1 @kind object;
  #L1fccee.  v0.`h.j0$b.g` @type ^`java.nio.charset.Charset` := v2 @kind object;
  #L1fccf2.  return @kind void;
}
procedure `void` `close`(`h.j0$b` v1 @kind this) @signature `Lh/j0$b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fcd04.  v0:= 1I;
  #L1fcd06.  v1.`h.j0$b.h` @type ^`boolean` := v0 @kind boolean;
  #L1fcd0a.  v0:= v1.`h.j0$b.i` @type ^`java.io.Reader` @kind object;
  #L1fcd0e.  if v0 == 0 then goto L1fcd1a;
  #L1fcd12.  call `close`(v0) @signature `Ljava/io/Reader;.close:()V` @kind virtual;
  #L1fcd18.  goto L1fcd24;
  #L1fcd1a.  v0:= v1.`h.j0$b.f` @type ^`i.g` @kind object;
  #L1fcd1e.  call `close`(v0) @signature `Li/z;.close:()V` @kind interface;
  #L1fcd24.  return @kind void;
}
procedure `int` `read`(`h.j0$b` v3 @kind this, `char`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lh/j0$b;.read:([CII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1fcc7c.  v0:= v3.`h.j0$b.h` @type ^`boolean` @kind boolean;
  #L1fcc80.  if v0 != 0 then goto L1fccc2;
  #L1fcc84.  v0:= v3.`h.j0$b.i` @type ^`java.io.Reader` @kind object;
  #L1fcc88.  if v0 != 0 then goto L1fccb8;
  #L1fcc8c.  v0:= v3.`h.j0$b.f` @type ^`i.g` @kind object;
  #L1fcc90.  v1:= v3.`h.j0$b.g` @type ^`java.nio.charset.Charset` @kind object;
  #L1fcc94.  call temp:= `bomAwareCharset`(v0, v1) @signature `Lh/n0/e;.bomAwareCharset:(Li/g;Ljava/nio/charset/Charset;)Ljava/nio/charset/Charset;` @kind static;
  #L1fcc9a.  v0:= temp @kind object;
  #L1fcc9c.  v1:= new `java.io.InputStreamReader`;
  #L1fcca0.  v2:= v3.`h.j0$b.f` @type ^`i.g` @kind object;
  #L1fcca4.  call temp:= `inputStream`(v2) @signature `Li/g;.inputStream:()Ljava/io/InputStream;` @kind interface;
  #L1fccaa.  v2:= temp @kind object;
  #L1fccac.  call `<init>`(v1, v2, v0) @signature `Ljava/io/InputStreamReader;.<init>:(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V` @kind direct;
  #L1fccb2.  v3.`h.j0$b.i` @type ^`java.io.Reader` := v1 @kind object;
  #L1fccb6.  v0:= v1 @kind object;
  #L1fccb8.  call temp:= `read`(v0, v4, v5, v6) @signature `Ljava/io/Reader;.read:([CII)I` @kind virtual;
  #L1fccbe.  v4:= temp;
  #L1fccc0.  return v4;
  #L1fccc2.  v4:= new `java.io.IOException`;
  #L1fccc6.  v5:= "Stream closed" @kind object;
  #L1fccca.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fccd0.  throw v4;
}
