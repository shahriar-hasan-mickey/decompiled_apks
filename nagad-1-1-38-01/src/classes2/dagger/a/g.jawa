record `dagger.a.g` @kind class @AccessFlag PUBLIC_FINAL extends `dagger.a.a` @kind class, `dagger.Lazy` @kind interface {
}
procedure `void` `<init>`(`dagger.a.g` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Ldagger/a/g;.<init>:(Ljava/util/Map;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1c1c1c.  call `<init>`(v0, v1) @signature `Ldagger/a/a;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L1c1c22.  return @kind void;
}
procedure `void` `<init>`(`dagger.a.g` v0 @kind this, `java.util.Map` v1 @kind object, `dagger.a.g$a` v2 @kind object) @signature `Ldagger/a/g;.<init>:(Ljava/util/Map;Ldagger/a/g$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1c1c34.  call `<init>`(v0, v1) @signature `Ldagger/a/g;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L1c1c3a.  return @kind void;
}
procedure `dagger.a.g$b` `builder`(`int` v2 ) @signature `Ldagger/a/g;.builder:(I)Ldagger/a/g$b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1c1bc4.  v0:= new `dagger.a.g$b`;
  #L1c1bc8.  v1:= 0I;
  #L1c1bca.  call `<init>`(v0, v2, v1) @signature `Ldagger/a/g$b;.<init>:(ILdagger/a/g$a;)V` @kind direct;
  #L1c1bd0.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`dagger.a.g` v1 @kind this) @signature `Ldagger/a/g;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1c1be4.  call temp:= `get`(v1) @signature `Ldagger/a/g;.get:()Ljava/util/Map;` @kind virtual;
  #L1c1bea.  v0:= temp @kind object;
  #L1c1bec.  return v0 @kind object;
}
procedure `java.util.Map` `get`(`dagger.a.g` v1 @kind this) @signature `Ldagger/a/g;.get:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c1c00.  call temp:= `a`(v1) @signature `Ldagger/a/a;.a:()Ljava/util/Map;` @kind virtual;
  #L1c1c06.  v0:= temp @kind object;
  #L1c1c08.  return v0 @kind object;
}
