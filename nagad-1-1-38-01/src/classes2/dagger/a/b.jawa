record `dagger.a.b` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v1 ) @signature `Ldagger/a/b;.a:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L1c1868.  v0:= 3I;
  #L1c186a.  if v1 >= v0 then goto L1c1874;
  #L1c186e.  v1:= v1 + 1;
  #L1c1872.  return v1;
  #L1c1874.  v0:= 2.0F;
  #L1c1878.  if v1 >= v0 then goto L1c188e;
  #L1c187c.  v1:= (`float`) v1 @kind i2f;
  #L1c187e.  v0:= 0.75F;
  #L1c1882.  v1:= v1 / v0 @kind float;
  #L1c1884.  v0:= 1.0F;
  #L1c1888.  v1:= v1 + v0 @kind float;
  #L1c188a.  v1:= (`int`) v1 @kind f2i;
  #L1c188c.  return v1;
  #L1c188e.  v1:= 2147483647I;
  #L1c1894.  return v1;
}
procedure `java.util.LinkedHashMap` `newLinkedHashMapWithExpectedSize`(`int` v1 ) @signature `Ldagger/a/b;.newLinkedHashMapWithExpectedSize:(I)Ljava/util/LinkedHashMap;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1c18a8.  v0:= new `java.util.LinkedHashMap`;
  #L1c18ac.  call temp:= `a`(v1) @signature `Ldagger/a/b;.a:(I)I` @kind static;
  #L1c18b2.  v1:= temp;
  #L1c18b4.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(I)V` @kind direct;
  #L1c18ba.  return v0 @kind object;
}
