record `dagger.a.e` @kind class @AccessFlag PUBLIC_FINAL extends `dagger.a.d` @kind interface, `dagger.Lazy` @kind interface {
  `java.lang.Object` `dagger.a.e.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<clinit>`() @signature `Ldagger/a/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1c1a88.  v0:= new `dagger.a.e`;
  #L1c1a8c.  v1:= 0I;
  #L1c1a8e.  call `<init>`(v0, v1) @signature `Ldagger/a/e;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1c1a94.  return @kind void;
}
procedure `void` `<init>`(`dagger.a.e` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Ldagger/a/e;.<init>:(Ljava/lang/Object;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1c1aa8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c1aae.  v0.`dagger.a.e.a` @type ^`java.lang.Object` := v1 @kind object;
  #L1c1ab2.  return @kind void;
}
procedure `dagger.a.d` `create`(`java.lang.Object` v2 @kind object) @signature `Ldagger/a/e;.create:(Ljava/lang/Object;)Ldagger/a/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1c1a48.  v0:= new `dagger.a.e`;
  #L1c1a4c.  v1:= "instance cannot be null" @kind object;
  #L1c1a50.  call temp:= `checkNotNull`(v2, v1) @signature `Ldagger/a/h;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c1a56.  call `<init>`(v0, v2) @signature `Ldagger/a/e;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1c1a5c.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`dagger.a.e` v1 @kind this) @signature `Ldagger/a/e;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c1a70.  v0:= v1.`dagger.a.e.a` @type ^`java.lang.Object` @kind object;
  #L1c1a74.  return v0 @kind object;
}
