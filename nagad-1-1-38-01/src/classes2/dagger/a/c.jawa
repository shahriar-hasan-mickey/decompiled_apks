record `dagger.a.c` @kind class @AccessFlag PUBLIC_FINAL extends `javax.inject.Provider` @kind interface, `dagger.Lazy` @kind interface {
  `javax.inject.Provider` `dagger.a.c.a` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `dagger.a.c.b` @AccessFlag PRIVATE_VOLATILE;
}
global `java.lang.Object` `@@dagger.a.c.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ldagger/a/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c1a04.  v0:= new `java.lang.Object`;
  #L1c1a08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c1a0e.  `@@dagger.a.c.c` @type ^`java.lang.Object` := v0 @kind object;
  #L1c1a12.  return @kind void;
}
procedure `void` `<init>`(`dagger.a.c` v1 @kind this, `javax.inject.Provider` v2 @kind object) @signature `Ldagger/a/c;.<init>:(Ljavax/inject/Provider;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L1c1a24.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c1a2a.  v0:= `@@dagger.a.c.c` @type ^`java.lang.Object` @kind object;
  #L1c1a2e.  v1.`dagger.a.c.b` @type ^`java.lang.Object` := v0 @kind object;
  #L1c1a32.  v1.`dagger.a.c.a` @type ^`javax.inject.Provider` := v2 @kind object;
  #L1c1a36.  return @kind void;
}
procedure `dagger.Lazy` `lazy`(`javax.inject.Provider` v1 @kind object) @signature `Ldagger/a/c;.lazy:(Ljavax/inject/Provider;)Ldagger/Lazy;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1c18cc.  v0:= instanceof @variable v1 @type ^`dagger.Lazy` @kind boolean;
  #L1c18d0.  if v0 == 0 then goto L1c18da;
  #L1c18d4.  v1:= (`dagger.Lazy`) v1 @kind object;
  #L1c18d8.  return v1 @kind object;
  #L1c18da.  v0:= new `dagger.a.c`;
  #L1c18de.  call temp:= `checkNotNull`(v1) @signature `Ldagger/a/h;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1c18e4.  v1:= (`javax.inject.Provider`) v1 @kind object;
  #L1c18e8.  call `<init>`(v0, v1) @signature `Ldagger/a/c;.<init>:(Ljavax/inject/Provider;)V` @kind direct;
  #L1c18ee.  return v0 @kind object;
}
procedure `javax.inject.Provider` `provider`(`javax.inject.Provider` v1 @kind object) @signature `Ldagger/a/c;.provider:(Ljavax/inject/Provider;)Ljavax/inject/Provider;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1c19d8.  call temp:= `checkNotNull`(v1) @signature `Ldagger/a/h;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1c19de.  v0:= instanceof @variable v1 @type ^`dagger.a.c` @kind boolean;
  #L1c19e2.  if v0 == 0 then goto L1c19e8;
  #L1c19e6.  return v1 @kind object;
  #L1c19e8.  v0:= new `dagger.a.c`;
  #L1c19ec.  call `<init>`(v0, v1) @signature `Ldagger/a/c;.<init>:(Ljavax/inject/Provider;)V` @kind direct;
  #L1c19f2.  return v0 @kind object;
}
procedure `java.lang.Object` `reentrantCheck`(`java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Ldagger/a/c;.reentrantCheck:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1c1964.  v0:= `@@dagger.a.c.c` @type ^`java.lang.Object` @kind object;
  #L1c1968.  if v3 == v0 then goto L1c1970;
  #L1c196c.  v0:= 1I;
  #L1c196e.  goto L1c1972;
  #L1c1970.  v0:= 0I;
  #L1c1972.  if v0 == 0 then goto L1c19c4;
  #L1c1976.  if v3 != v4 then goto L1c197c;
  #L1c197a.  goto L1c19c4;
  #L1c197c.  v0:= new `java.lang.IllegalStateException`;
  #L1c1980.  v1:= new `java.lang.StringBuilder`;
  #L1c1984.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c198a.  v2:= "Scoped provider was invoked recursively returning different results: " @kind object;
  #L1c198e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1994.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c199a.  v3:= " & " @kind object;
  #L1c199e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c19a4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c19aa.  v3:= ". This is likely due to a circular dependency." @kind object;
  #L1c19ae.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c19b4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c19ba.  v3:= temp @kind object;
  #L1c19bc.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c19c2.  throw v0;
  #L1c19c4.  return v4 @kind object;
}
procedure `java.lang.Object` `get`(`dagger.a.c` v2 @kind this) @signature `Ldagger/a/c;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c1900.  v0:= v2.`dagger.a.c.b` @type ^`java.lang.Object` @kind object;
  #L1c1904.  v1:= `@@dagger.a.c.c` @type ^`java.lang.Object` @kind object;
  #L1c1908.  if v0 != v1 then goto L1c1944;
  #L1c190c.  @monitorenter v2
  #L1c190e.  v0:= v2.`dagger.a.c.b` @type ^`java.lang.Object` @kind object;
  #L1c1912.  v1:= `@@dagger.a.c.c` @type ^`java.lang.Object` @kind object;
  #L1c1916.  if v0 != v1 then goto L1c193a;
  #L1c191a.  v0:= v2.`dagger.a.c.a` @type ^`javax.inject.Provider` @kind object;
  #L1c191e.  call temp:= `get`(v0) @signature `Ljavax/inject/Provider;.get:()Ljava/lang/Object;` @kind interface;
  #L1c1924.  v0:= temp @kind object;
  #L1c1926.  v1:= v2.`dagger.a.c.b` @type ^`java.lang.Object` @kind object;
  #L1c192a.  call temp:= `reentrantCheck`(v1, v0) @signature `Ldagger/a/c;.reentrantCheck:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1c1930.  v2.`dagger.a.c.b` @type ^`java.lang.Object` := v0 @kind object;
  #L1c1934.  v1:= 0I;
  #L1c1936.  v2.`dagger.a.c.a` @type ^`javax.inject.Provider` := v1 @kind object;
  #L1c193a.  @monitorexit v2
  #L1c193c.  goto L1c1944;
  #L1c193e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c1940.  @monitorexit v2
  #L1c1942.  throw v0;
  #L1c1944.  return v0 @kind object;
  catch `java.lang.Throwable` @[L1c190e..L1c1942] goto L1c193e;
}
