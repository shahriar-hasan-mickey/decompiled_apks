record `dagger.a.h` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `checkBuilderRequirement`(`java.lang.Object` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Ldagger/a/h;.checkBuilderRequirement:(Ljava/lang/Object;Ljava/lang/Class;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1c1d20.  if v1 == 0 then goto L1c1d26;
  #L1c1d24.  return @kind void;
  #L1c1d26.  v1:= new `java.lang.IllegalStateException`;
  #L1c1d2a.  v0:= new `java.lang.StringBuilder`;
  #L1c1d2e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c1d34.  call temp:= `getCanonicalName`(v2) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L1c1d3a.  v2:= temp @kind object;
  #L1c1d3c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1d42.  v2:= " must be set" @kind object;
  #L1c1d46.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1d4c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c1d52.  v2:= temp @kind object;
  #L1c1d54.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c1d5a.  throw v1;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object) @signature `Ldagger/a/h;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1c1c4c.  if v0 == 0 then goto L1c1c52;
  #L1c1c50.  return v0 @kind object;
  #L1c1c52.  v0:= new `java.lang.NullPointerException`;
  #L1c1c56.  call `<init>`(v0) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L1c1c5c.  throw v0;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Ldagger/a/h;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1c1c70.  if v0 == 0 then goto L1c1c76;
  #L1c1c74.  return v0 @kind object;
  #L1c1c76.  v0:= new `java.lang.NullPointerException`;
  #L1c1c7a.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c1c80.  throw v0;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Ldagger/a/h;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1c1c94.  if v2 != 0 then goto L1c1d0e;
  #L1c1c98.  v2:= "%s" @kind object;
  #L1c1c9c.  call temp:= `contains`(v3, v2) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L1c1ca2.  v0:= temp;
  #L1c1ca4.  if v0 == 0 then goto L1c1cfe;
  #L1c1ca8.  call temp:= `indexOf`(v3, v2) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L1c1cae.  v0:= temp;
  #L1c1cb0.  call temp:= `lastIndexOf`(v3, v2) @signature `Ljava/lang/String;.lastIndexOf:(Ljava/lang/String;)I` @kind virtual;
  #L1c1cb6.  v1:= temp;
  #L1c1cb8.  if v0 != v1 then goto L1c1cee;
  #L1c1cbc.  v0:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L1c1cc0.  if v0 == 0 then goto L1c1cd2;
  #L1c1cc4.  v4:= (`java.lang.Class`) v4 @kind object;
  #L1c1cc8.  call temp:= `getCanonicalName`(v4) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L1c1cce.  v4:= temp @kind object;
  #L1c1cd0.  goto L1c1cda;
  #L1c1cd2.  call temp:= `valueOf`(v4) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1c1cd8.  v4:= temp @kind object;
  #L1c1cda.  v0:= new `java.lang.NullPointerException`;
  #L1c1cde.  call temp:= `replace`(v3, v2, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L1c1ce4.  v2:= temp @kind object;
  #L1c1ce6.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c1cec.  throw v0;
  #L1c1cee.  v2:= new `java.lang.IllegalArgumentException`;
  #L1c1cf2.  v3:= "errorMessageTemplate has more than one format specifier" @kind object;
  #L1c1cf6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c1cfc.  throw v2;
  #L1c1cfe.  v2:= new `java.lang.IllegalArgumentException`;
  #L1c1d02.  v3:= "errorMessageTemplate has no format specifiers" @kind object;
  #L1c1d06.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c1d0c.  throw v2;
  #L1c1d0e.  return v2 @kind object;
}
