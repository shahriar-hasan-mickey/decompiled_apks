record `dagger.android.DispatchingAndroidInjector` @kind class @AccessFlag PUBLIC_FINAL extends `dagger.android.c` @kind interface {
  `java.util.Map` `dagger.android.DispatchingAndroidInjector.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`dagger.android.DispatchingAndroidInjector` v0 @kind this, `java.util.Map` v1 @kind object, `java.util.Map` v2 @kind object) @signature `Ldagger/android/DispatchingAndroidInjector;.<init>:(Ljava/util/Map;Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c1780.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c1786.  call temp:= `a`(v1, v2) @signature `Ldagger/android/DispatchingAndroidInjector;.a:(Ljava/util/Map;Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L1c178c.  v1:= temp @kind object;
  #L1c178e.  v0.`dagger.android.DispatchingAndroidInjector.a` @type ^`java.util.Map` := v1 @kind object;
  #L1c1792.  return @kind void;
}
procedure `java.lang.String` `a`(`dagger.android.DispatchingAndroidInjector` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ldagger/android/DispatchingAndroidInjector;.a:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c1634.  v0:= new `java.util.ArrayList`;
  #L1c1638.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1c163e.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c1644.  v1:= temp @kind object;
  #L1c1646.  if v1 == 0 then goto L1c167a;
  #L1c164a.  v2:= v4.`dagger.android.DispatchingAndroidInjector.a` @type ^`java.util.Map` @kind object;
  #L1c164e.  call temp:= `getCanonicalName`(v1) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L1c1654.  v3:= temp @kind object;
  #L1c1656.  call temp:= `containsKey`(v2, v3) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L1c165c.  v2:= temp;
  #L1c165e.  if v2 == 0 then goto L1c1670;
  #L1c1662.  call temp:= `getCanonicalName`(v1) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L1c1668.  v2:= temp @kind object;
  #L1c166a.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1c1670.  call temp:= `getSuperclass`(v1) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L1c1676.  v1:= temp @kind object;
  #L1c1678.  goto L1c1646;
  #L1c167a.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1c1680.  v1:= temp;
  #L1c1682.  v2:= 1I;
  #L1c1684.  v3:= 0I;
  #L1c1686.  if v1 == 0 then goto L1c16b0;
  #L1c168a.  v0:= new `java.lang.Object`[v2];
  #L1c168e.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c1694.  v5:= temp @kind object;
  #L1c1696.  call temp:= `getCanonicalName`(v5) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L1c169c.  v5:= temp @kind object;
  #L1c169e.  v0[v3]:= v5 @kind object;
  #L1c16a2.  v5:= "No injector factory bound for Class<%s>" @kind object;
  #L1c16a6.  call temp:= `format`(v5, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1c16ac.  v5:= temp @kind object;
  #L1c16ae.  goto L1c16da;
  #L1c16b0.  v1:= 2I;
  #L1c16b2.  v1:= new `java.lang.Object`[v1];
  #L1c16b6.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c16bc.  v5:= temp @kind object;
  #L1c16be.  call temp:= `getCanonicalName`(v5) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L1c16c4.  v5:= temp @kind object;
  #L1c16c6.  v1[v3]:= v5 @kind object;
  #L1c16ca.  v1[v2]:= v0 @kind object;
  #L1c16ce.  v5:= "No injector factory bound for Class<%1$s>. Injector factories were bound for supertypes of %1$s: %2$s. Did you mean to bind an injector factory for the subtype?" @kind object;
  #L1c16d2.  call temp:= `format`(v5, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1c16d8.  v5:= temp @kind object;
  #L1c16da.  return v5 @kind object;
}
procedure `java.util.Map` `a`(`java.util.Map` v2 @kind object, `java.util.Map` v3 @kind object) @signature `Ldagger/android/DispatchingAndroidInjector;.a:(Ljava/util/Map;Ljava/util/Map;)Ljava/util/Map;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1c16ec.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L1c16f2.  v0:= temp;
  #L1c16f4.  if v0 == 0 then goto L1c16fa;
  #L1c16f8.  return v3 @kind object;
  #L1c16fa.  call temp:= `size`(v2) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L1c1700.  v0:= temp;
  #L1c1702.  call temp:= `size`(v3) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L1c1708.  v1:= temp;
  #L1c170a.  v0:= v0 + v1 @kind int;
  #L1c170c.  call temp:= `newLinkedHashMapWithExpectedSize`(v0) @signature `Ldagger/a/b;.newLinkedHashMapWithExpectedSize:(I)Ljava/util/LinkedHashMap;` @kind static;
  #L1c1712.  v0:= temp @kind object;
  #L1c1714.  call `putAll`(v0, v3) @signature `Ljava/util/Map;.putAll:(Ljava/util/Map;)V` @kind interface;
  #L1c171a.  call temp:= `entrySet`(v2) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L1c1720.  v2:= temp @kind object;
  #L1c1722.  call temp:= `iterator`(v2) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c1728.  v2:= temp @kind object;
  #L1c172a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c1730.  v3:= temp;
  #L1c1732.  if v3 == 0 then goto L1c1766;
  #L1c1736.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c173c.  v3:= temp @kind object;
  #L1c173e.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L1c1742.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L1c1748.  v1:= temp @kind object;
  #L1c174a.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1c174e.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c1754.  v1:= temp @kind object;
  #L1c1756.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1c175c.  v3:= temp @kind object;
  #L1c175e.  call temp:= `put`(v0, v1, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1c1764.  goto L1c172a;
  #L1c1766.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L1c176c.  v2:= temp @kind object;
  #L1c176e.  return v2 @kind object;
}
procedure `void` `inject`(`dagger.android.DispatchingAndroidInjector` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ldagger/android/DispatchingAndroidInjector;.inject:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c17a4.  call temp:= `maybeInject`(v1, v2) @signature `Ldagger/android/DispatchingAndroidInjector;.maybeInject:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c17aa.  v0:= temp;
  #L1c17ac.  if v0 == 0 then goto L1c17b2;
  #L1c17b0.  return @kind void;
  #L1c17b2.  v0:= new `java.lang.IllegalArgumentException`;
  #L1c17b6.  call temp:= `a`(v1, v2) @signature `Ldagger/android/DispatchingAndroidInjector;.a:(Ljava/lang/Object;)Ljava/lang/String;` @kind direct;
  #L1c17bc.  v2:= temp @kind object;
  #L1c17be.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c17c4.  throw v0;
}
procedure `boolean` `maybeInject`(`dagger.android.DispatchingAndroidInjector` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Ldagger/android/DispatchingAndroidInjector;.maybeInject:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1c1570.  v0:= v6.`dagger.android.DispatchingAndroidInjector.a` @type ^`java.util.Map` @kind object;
  #L1c1574.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c157a.  v1:= temp @kind object;
  #L1c157c.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c1582.  v1:= temp @kind object;
  #L1c1584.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1c158a.  v0:= temp @kind object;
  #L1c158c.  v0:= (`javax.inject.Provider`) v0 @kind object;
  #L1c1590.  v1:= 0I;
  #L1c1592.  if v0 != 0 then goto L1c1598;
  #L1c1596.  return v1;
  #L1c1598.  call temp:= `get`(v0) @signature `Ljavax/inject/Provider;.get:()Ljava/lang/Object;` @kind interface;
  #L1c159e.  v0:= temp @kind object;
  #L1c15a0.  v0:= (`dagger.android.c$a`) v0 @kind object;
  #L1c15a4.  v2:= 1I;
  #L1c15a6.  call temp:= `create`(v0, v7) @signature `Ldagger/android/c$a;.create:(Ljava/lang/Object;)Ldagger/android/c;` @kind interface;
  #L1c15ac.  v3:= temp @kind object;
  #L1c15ae.  v4:= "%s.create(I) should not return null." @kind object;
  #L1c15b2.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c15b8.  v5:= temp @kind object;
  #L1c15ba.  call temp:= `checkNotNull`(v3, v4, v5) @signature `Ldagger/a/h;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1c15c0.  v3:= (`dagger.android.c`) v3 @kind object;
  #L1c15c4.  call `inject`(v3, v7) @signature `Ldagger/android/c;.inject:(Ljava/lang/Object;)V` @kind interface;
  #L1c15ca.  return v2;
  #L1c15cc.  v3:= Exception @type ^`java.lang.ClassCastException` @kind object;
  #L1c15ce.  v4:= new `dagger.android.DispatchingAndroidInjector$InvalidInjectorBindingException`;
  #L1c15d2.  v5:= 2I;
  #L1c15d4.  v5:= new `java.lang.Object`[v5];
  #L1c15d8.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c15de.  v0:= temp @kind object;
  #L1c15e0.  call temp:= `getCanonicalName`(v0) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L1c15e6.  v0:= temp @kind object;
  #L1c15e8.  v5[v1]:= v0 @kind object;
  #L1c15ec.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c15f2.  v7:= temp @kind object;
  #L1c15f4.  call temp:= `getCanonicalName`(v7) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L1c15fa.  v7:= temp @kind object;
  #L1c15fc.  v5[v2]:= v7 @kind object;
  #L1c1600.  v7:= "%s does not implement AndroidInjector.Factory<%s>" @kind object;
  #L1c1604.  call temp:= `format`(v7, v5) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1c160a.  v7:= temp @kind object;
  #L1c160c.  call `<init>`(v4, v7, v3) @signature `Ldagger/android/DispatchingAndroidInjector$InvalidInjectorBindingException;.<init>:(Ljava/lang/String;Ljava/lang/ClassCastException;)V` @kind direct;
  #L1c1612.  throw v4;
  catch `java.lang.ClassCastException` @[L1c15a6..L1c15ca] goto L1c15cc;
}
