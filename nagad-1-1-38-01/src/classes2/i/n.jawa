record `i.n` @kind class @AccessFlag PUBLIC_FINAL extends `i.z` @kind interface {
  `int` `i.n.f` @AccessFlag PRIVATE;
  `boolean` `i.n.g` @AccessFlag PRIVATE;
  `i.g` `i.n.h` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `i.n.i` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`i.n` v1 @kind this, `i.g` v2 @kind object, `java.util.zip.Inflater` v3 @kind object) @signature `Li/n;.<init>:(Li/g;Ljava/util/zip/Inflater;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L214510.  v0:= "source" @kind object;
  #L214514.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L21451a.  v0:= "inflater" @kind object;
  #L21451e.  call `checkParameterIsNotNull`(v3, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L214524.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21452a.  v1.`i.n.h` @type ^`i.g` := v2 @kind object;
  #L21452e.  v1.`i.n.i` @type ^`java.util.zip.Inflater` := v3 @kind object;
  #L214532.  return @kind void;
}
procedure `void` `<init>`(`i.n` v1 @kind this, `i.z` v2 @kind object, `java.util.zip.Inflater` v3 @kind object) @signature `Li/n;.<init>:(Li/z;Ljava/util/zip/Inflater;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L214544.  v0:= "source" @kind object;
  #L214548.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L21454e.  v0:= "inflater" @kind object;
  #L214552.  call `checkParameterIsNotNull`(v3, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L214558.  call temp:= `buffer`(v2) @signature `Li/p;.buffer:(Li/z;)Li/g;` @kind static;
  #L21455e.  v2:= temp @kind object;
  #L214560.  call `<init>`(v1, v2, v3) @signature `Li/n;.<init>:(Li/g;Ljava/util/zip/Inflater;)V` @kind direct;
  #L214566.  return @kind void;
}
procedure `void` `a`(`i.n` v4 @kind this) @signature `Li/n;.a:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2145b0.  v0:= v4.`i.n.f` @type ^`int`;
  #L2145b4.  if v0 != 0 then goto L2145ba;
  #L2145b8.  return @kind void;
  #L2145ba.  v1:= v4.`i.n.i` @type ^`java.util.zip.Inflater` @kind object;
  #L2145be.  call temp:= `getRemaining`(v1) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L2145c4.  v1:= temp;
  #L2145c6.  v0:= v0 - v1 @kind int;
  #L2145c8.  v1:= v4.`i.n.f` @type ^`int`;
  #L2145cc.  v1:= v1 - v0 @kind int;
  #L2145ce.  v4.`i.n.f` @type ^`int` := v1;
  #L2145d2.  v1:= v4.`i.n.h` @type ^`i.g` @kind object;
  #L2145d6.  v2:= (`long`) v0 @kind i2l;
  #L2145d8.  call `skip`(v1, v2) @signature `Li/g;.skip:(J)V` @kind interface;
  #L2145de.  return @kind void;
}
procedure `void` `close`(`i.n` v1 @kind this) @signature `Li/n;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L214578.  v0:= v1.`i.n.g` @type ^`boolean` @kind boolean;
  #L21457c.  if v0 == 0 then goto L214582;
  #L214580.  return @kind void;
  #L214582.  v0:= v1.`i.n.i` @type ^`java.util.zip.Inflater` @kind object;
  #L214586.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L21458c.  v0:= 1I;
  #L21458e.  v1.`i.n.g` @type ^`boolean` := v0 @kind boolean;
  #L214592.  v0:= v1.`i.n.h` @type ^`i.g` @kind object;
  #L214596.  call `close`(v0) @signature `Li/z;.close:()V` @kind interface;
  #L21459c.  return @kind void;
}
procedure `long` `read`(`i.n` v7 @kind this, `i.e` v8 @kind object, `long` v9 ) @signature `Li/n;.read:(Li/e;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L214380.  v0:= "sink" @kind object;
  #L214384.  call `checkParameterIsNotNull`(v8, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L21438a.  v0:= 0L;
  #L21438e.  v2:= 1I;
  #L214390.  v3:= lcmp(v9, v0);
  #L214394.  if v3 < 0 then goto L21439c;
  #L214398.  v4:= 1I;
  #L21439a.  goto L21439e;
  #L21439c.  v4:= 0I;
  #L21439e.  if v4 == 0 then goto L214498;
  #L2143a2.  v4:= v7.`i.n.g` @type ^`boolean` @kind boolean;
  #L2143a6.  v4:= v4 ^~ v2 @kind int;
  #L2143a8.  if v4 == 0 then goto L214480;
  #L2143ac.  if v3 != 0 then goto L2143b2;
  #L2143b0.  return v0 @kind wide;
  #L2143b2.  call temp:= `refill`(v7) @signature `Li/n;.refill:()Z` @kind virtual;
  #L2143b8.  v0:= temp;
  #L2143ba.  call temp:= `writableSegment$okio`(v8, v2) @signature `Li/e;.writableSegment$okio:(I)Li/u;` @kind virtual;
  #L2143c0.  v1:= temp @kind object;
  #L2143c2.  v3:= v1.`i.u.c` @type ^`int`;
  #L2143c6.  v3:= v3 - 8192;
  #L2143ca.  v3:= (`long`) v3 @kind i2l;
  #L2143cc.  call temp:= `min`(v9, v3) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2143d2.  v3:= temp @kind wide;
  #L2143d4.  v4:= (`int`) v3 @kind l2i;
  #L2143d6.  v3:= v7.`i.n.i` @type ^`java.util.zip.Inflater` @kind object;
  #L2143da.  v5:= v1.`i.u.a` @type ^`byte`[] @kind object;
  #L2143de.  v6:= v1.`i.u.c` @type ^`int`;
  #L2143e2.  call temp:= `inflate`(v3, v5, v6, v4) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind virtual;
  #L2143e8.  v3:= temp;
  #L2143ea.  if v3 <= 0 then goto L21440c;
  #L2143ee.  v9:= v1.`i.u.c` @type ^`int`;
  #L2143f2.  v9:= v9 + v3 @kind int;
  #L2143f4.  v1.`i.u.c` @type ^`int` := v9;
  #L2143f8.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L2143fe.  v9:= temp @kind wide;
  #L214400.  v0:= (`long`) v3 @kind i2l;
  #L214402.  v9:= v9 + v0 @kind long;
  #L214404.  call `setSize$okio`(v8, v9) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L21440a.  return v0 @kind wide;
  #L21440c.  v3:= v7.`i.n.i` @type ^`java.util.zip.Inflater` @kind object;
  #L214410.  call temp:= `finished`(v3) @signature `Ljava/util/zip/Inflater;.finished:()Z` @kind virtual;
  #L214416.  v3:= temp;
  #L214418.  if v3 != 0 then goto L214444;
  #L21441c.  v3:= v7.`i.n.i` @type ^`java.util.zip.Inflater` @kind object;
  #L214420.  call temp:= `needsDictionary`(v3) @signature `Ljava/util/zip/Inflater;.needsDictionary:()Z` @kind virtual;
  #L214426.  v3:= temp;
  #L214428.  if v3 == 0 then goto L21442e;
  #L21442c.  goto L214444;
  #L21442e.  if v0 != 0 then goto L214434;
  #L214432.  goto L2143b2;
  #L214434.  v8:= new `java.io.EOFException`;
  #L214438.  v9:= "source exhausted prematurely" @kind object;
  #L21443c.  call `<init>`(v8, v9) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L214442.  throw v8;
  #L214444.  call `a`(v7) @signature `Li/n;.a:()V` @kind direct;
  #L21444a.  v9:= v1.`i.u.b` @type ^`int`;
  #L21444e.  v10:= v1.`i.u.c` @type ^`int`;
  #L214452.  if v9 != v10 then goto L21446c;
  #L214456.  call temp:= `pop`(v1) @signature `Li/u;.pop:()Li/u;` @kind virtual;
  #L21445c.  v9:= temp @kind object;
  #L21445e.  v8.`i.e.f` @type ^`i.u` := v9 @kind object;
  #L214462.  v8:= `@@i.v.c` @type ^`i.v` @kind object;
  #L214466.  call `recycle`(v8, v1) @signature `Li/v;.recycle:(Li/u;)V` @kind virtual;
  #L21446c.  v8:= -1L;
  #L214470.  return v8 @kind wide;
  #L214472.  v8:= Exception @type ^`java.util.zip.DataFormatException` @kind object;
  #L214474.  v9:= new `java.io.IOException`;
  #L214478.  call `<init>`(v9, v8) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L21447e.  throw v9;
  #L214480.  v8:= new `java.lang.IllegalStateException`;
  #L214484.  v9:= "closed" @kind object;
  #L214488.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L21448e.  v9:= temp @kind object;
  #L214490.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L214496.  throw v8;
  #L214498.  v8:= new `java.lang.StringBuilder`;
  #L21449c.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2144a2.  v0:= "byteCount < 0: " @kind object;
  #L2144a6.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2144ac.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2144b2.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2144b8.  v8:= temp @kind object;
  #L2144ba.  v9:= new `java.lang.IllegalArgumentException`;
  #L2144be.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2144c4.  v8:= temp @kind object;
  #L2144c6.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2144cc.  throw v9;
  catch `java.util.zip.DataFormatException` @[L2143ba..L21446c] goto L214472;
}
procedure `boolean` `refill`(`i.n` v5 @kind this) @signature `Li/n;.refill:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2142d0.  v0:= v5.`i.n.i` @type ^`java.util.zip.Inflater` @kind object;
  #L2142d4.  call temp:= `needsInput`(v0) @signature `Ljava/util/zip/Inflater;.needsInput:()Z` @kind virtual;
  #L2142da.  v0:= temp;
  #L2142dc.  v1:= 0I;
  #L2142de.  if v0 != 0 then goto L2142e4;
  #L2142e2.  return v1;
  #L2142e4.  call `a`(v5) @signature `Li/n;.a:()V` @kind direct;
  #L2142ea.  v0:= v5.`i.n.i` @type ^`java.util.zip.Inflater` @kind object;
  #L2142ee.  call temp:= `getRemaining`(v0) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L2142f4.  v0:= temp;
  #L2142f6.  v2:= 1I;
  #L2142f8.  if v0 != 0 then goto L214300;
  #L2142fc.  v0:= 1I;
  #L2142fe.  goto L214302;
  #L214300.  v0:= 0I;
  #L214302.  if v0 == 0 then goto L214358;
  #L214306.  v0:= v5.`i.n.h` @type ^`i.g` @kind object;
  #L21430a.  call temp:= `exhausted`(v0) @signature `Li/g;.exhausted:()Z` @kind interface;
  #L214310.  v0:= temp;
  #L214312.  if v0 == 0 then goto L214318;
  #L214316.  return v2;
  #L214318.  v0:= v5.`i.n.h` @type ^`i.g` @kind object;
  #L21431c.  call temp:= `getBuffer`(v0) @signature `Li/g;.getBuffer:()Li/e;` @kind interface;
  #L214322.  v0:= temp @kind object;
  #L214324.  v0:= v0.`i.e.f` @type ^`i.u` @kind object;
  #L214328.  if v0 == 0 then goto L21434e;
  #L21432c.  v2:= v0.`i.u.c` @type ^`int`;
  #L214330.  v3:= v0.`i.u.b` @type ^`int`;
  #L214334.  v2:= v2 - v3 @kind int;
  #L214336.  v5.`i.n.f` @type ^`int` := v2;
  #L21433a.  v2:= v5.`i.n.i` @type ^`java.util.zip.Inflater` @kind object;
  #L21433e.  v0:= v0.`i.u.a` @type ^`byte`[] @kind object;
  #L214342.  v4:= v5.`i.n.f` @type ^`int`;
  #L214346.  call `setInput`(v2, v0, v3, v4) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #L21434c.  return v1;
  #L21434e.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L214354.  v0:= 0I;
  #L214356.  throw v0;
  #L214358.  v0:= new `java.lang.IllegalStateException`;
  #L21435c.  v1:= "?" @kind object;
  #L214360.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L214366.  v1:= temp @kind object;
  #L214368.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21436e.  throw v0;
}
procedure `i.a0` `timeout`(`i.n` v1 @kind this) @signature `Li/n;.timeout:()Li/a0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2144f0.  v0:= v1.`i.n.h` @type ^`i.g` @kind object;
  #L2144f4.  call temp:= `timeout`(v0) @signature `Li/z;.timeout:()Li/a0;` @kind interface;
  #L2144fa.  v0:= temp @kind object;
  #L2144fc.  return v0 @kind object;
}
