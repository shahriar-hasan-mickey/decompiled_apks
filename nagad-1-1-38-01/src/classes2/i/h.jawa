record `i.h` @kind class @AccessFlag PUBLIC extends `java.io.Serializable` @kind interface, `java.lang.Comparable` @kind interface {
  `int` `i.h.f` @AccessFlag PRIVATE_TRANSIENT;
  `java.lang.String` `i.h.g` @AccessFlag PRIVATE_TRANSIENT;
  `byte`[] `i.h.h` @AccessFlag PRIVATE_FINAL;
}
global `i.h` `@@i.h.i` @AccessFlag PUBLIC_STATIC_FINAL;
global `i.h$a` `@@i.h.j` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@i.h.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Li/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2135dc.  v0:= new `i.h$a`;
  #L2135e0.  v1:= 0I;
  #L2135e2.  call `<init>`(v0, v1) @signature `Li/h$a;.<init>:(Lkotlin/v/c/f;)V` @kind direct;
  #L2135e8.  `@@i.h.j` @type ^`i.h$a` := v0 @kind object;
  #L2135ec.  v0:= new `i.h`;
  #L2135f0.  v1:= 0I;
  #L2135f2.  v1:= new `byte`[v1];
  #L2135f6.  call `<init>`(v0, v1) @signature `Li/h;.<init>:([B)V` @kind direct;
  #L2135fc.  `@@i.h.i` @type ^`i.h` := v0 @kind object;
  #L213600.  return @kind void;
}
procedure `void` `<init>`(`i.h` v1 @kind this, `byte`[] v2 @kind object) @signature `Li/h;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L213614.  v0:= "data" @kind object;
  #L213618.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L21361e.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L213624.  v1.`i.h.h` @type ^`byte`[] := v2 @kind object;
  #L213628.  return @kind void;
}
procedure `i.h` `decodeBase64`(`java.lang.String` v1 @kind object) @signature `Li/h;.decodeBase64:(Ljava/lang/String;)Li/h;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L213430.  v0:= `@@i.h.j` @type ^`i.h$a` @kind object;
  #L213434.  call temp:= `decodeBase64`(v0, v1) @signature `Li/h$a;.decodeBase64:(Ljava/lang/String;)Li/h;` @kind virtual;
  #L21343a.  v1:= temp @kind object;
  #L21343c.  return v1 @kind object;
}
procedure `i.h` `decodeHex`(`java.lang.String` v1 @kind object) @signature `Li/h;.decodeHex:(Ljava/lang/String;)Li/h;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L213450.  v0:= `@@i.h.j` @type ^`i.h$a` @kind object;
  #L213454.  call temp:= `decodeHex`(v0, v1) @signature `Li/h$a;.decodeHex:(Ljava/lang/String;)Li/h;` @kind virtual;
  #L21345a.  v1:= temp @kind object;
  #L21345c.  return v1 @kind object;
}
procedure `i.h` `encodeUtf8`(`java.lang.String` v1 @kind object) @signature `Li/h;.encodeUtf8:(Ljava/lang/String;)Li/h;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L2134b4.  v0:= `@@i.h.j` @type ^`i.h$a` @kind object;
  #L2134b8.  call temp:= `encodeUtf8`(v0, v1) @signature `Li/h$a;.encodeUtf8:(Ljava/lang/String;)Li/h;` @kind virtual;
  #L2134be.  v1:= temp @kind object;
  #L2134c0.  return v1 @kind object;
}
procedure `i.h` `of`(`byte`[] v1 @kind object) @signature `Li/h;.of:([B)Li/h;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L2134d4.  v0:= `@@i.h.j` @type ^`i.h$a` @kind object;
  #L2134d8.  call temp:= `of`(v0, v1) @signature `Li/h$a;.of:([B)Li/h;` @kind virtual;
  #L2134de.  v1:= temp @kind object;
  #L2134e0.  return v1 @kind object;
}
procedure `void` `readObject`(`i.h` v2 @kind this, `java.io.ObjectInputStream` v3 @kind object) @signature `Li/h;.readObject:(Ljava/io/ObjectInputStream;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L21363c.  call temp:= `readInt`(v3) @signature `Ljava/io/ObjectInputStream;.readInt:()I` @kind virtual;
  #L213642.  v0:= temp;
  #L213644.  v1:= `@@i.h.j` @type ^`i.h$a` @kind object;
  #L213648.  call temp:= `read`(v1, v3, v0) @signature `Li/h$a;.read:(Ljava/io/InputStream;I)Li/h;` @kind virtual;
  #L21364e.  v3:= temp @kind object;
  #L213650.  v0:= constclass @type ^`i.h` @kind object;
  #L213654.  v1:= "h" @kind object;
  #L213658.  call temp:= `getDeclaredField`(v0, v1) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L21365e.  v0:= temp @kind object;
  #L213660.  v1:= "field" @kind object;
  #L213664.  call `checkExpressionValueIsNotNull`(v0, v1) @signature `Lkotlin/v/c/i;.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L21366a.  v1:= 1I;
  #L21366c.  call `setAccessible`(v0, v1) @signature `Ljava/lang/reflect/Field;.setAccessible:(Z)V` @kind virtual;
  #L213672.  v3:= v3.`i.h.h` @type ^`byte`[] @kind object;
  #L213676.  call `set`(v0, v2, v3) @signature `Ljava/lang/reflect/Field;.set:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L21367c.  return @kind void;
}
procedure `void` `writeObject`(`i.h` v1 @kind this, `java.io.ObjectOutputStream` v2 @kind object) @signature `Li/h;.writeObject:(Ljava/io/ObjectOutputStream;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2136e4.  v0:= v1.`i.h.h` @type ^`byte`[] @kind object;
  #L2136e8.  v0:= length @variable v0;
  #L2136ea.  call `writeInt`(v2, v0) @signature `Ljava/io/ObjectOutputStream;.writeInt:(I)V` @kind virtual;
  #L2136f0.  v0:= v1.`i.h.h` @type ^`byte`[] @kind object;
  #L2136f4.  call `write`(v2, v0) @signature `Ljava/io/ObjectOutputStream;.write:([B)V` @kind virtual;
  #L2136fa.  return @kind void;
}
procedure `java.lang.String` `base64`(`i.h` v3 @kind this) @signature `Li/h;.base64:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2130e0.  call temp:= `getData$okio`(v3) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L2130e6.  v0:= temp @kind object;
  #L2130e8.  v1:= 0I;
  #L2130ea.  v2:= 1I;
  #L2130ec.  call temp:= `encodeBase64$default`(v0, v1, v2, v1) @signature `Li/a;.encodeBase64$default:([B[BILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2130f2.  v0:= temp @kind object;
  #L2130f4.  return v0 @kind object;
}
procedure `int` `compareTo`(`i.h` v9 @kind this, `i.h` v10 @kind object) @signature `Li/h;.compareTo:(Li/h;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L212fd8.  v0:= "other" @kind object;
  #L212fdc.  call `checkParameterIsNotNull`(v10, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L212fe2.  call temp:= `size`(v9) @signature `Li/h;.size:()I` @kind virtual;
  #L212fe8.  v0:= temp;
  #L212fea.  call temp:= `size`(v10) @signature `Li/h;.size:()I` @kind virtual;
  #L212ff0.  v1:= temp;
  #L212ff2.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L212ff8.  v2:= temp;
  #L212ffa.  v3:= 0I;
  #L212ffc.  v4:= 0I;
  #L212ffe.  v5:= -1I;
  #L213000.  v6:= 1I;
  #L213002.  if v4 >= v2 then goto L21302e;
  #L213006.  call temp:= `getByte`(v9, v4) @signature `Li/h;.getByte:(I)B` @kind virtual;
  #L21300c.  v7:= temp;
  #L21300e.  v7:= v7 ^& 255;
  #L213012.  call temp:= `getByte`(v10, v4) @signature `Li/h;.getByte:(I)B` @kind virtual;
  #L213018.  v8:= temp;
  #L21301a.  v8:= v8 ^& 255;
  #L21301e.  if v7 != v8 then goto L213028;
  #L213022.  v4:= v4 + 1;
  #L213026.  goto L212ffe;
  #L213028.  if v7 >= v8 then goto L21303c;
  #L21302c.  goto L213038;
  #L21302e.  if v0 != v1 then goto L213034;
  #L213032.  goto L21303e;
  #L213034.  if v0 >= v1 then goto L21303c;
  #L213038.  v3:= -1I;
  #L21303a.  goto L21303e;
  #L21303c.  v3:= 1I;
  #L21303e.  return v3;
}
procedure `int` `compareTo`(`i.h` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Li/h;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L212fb8.  v1:= (`i.h`) v1 @kind object;
  #L212fbc.  call temp:= `compareTo`(v0, v1) @signature `Li/h;.compareTo:(Li/h;)I` @kind virtual;
  #L212fc2.  v1:= temp;
  #L212fc4.  return v1;
}
procedure `i.h` `digest$okio`(`i.h` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Li/h;.digest$okio:(Ljava/lang/String;)Li/h;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L213470.  v0:= "algorithm" @kind object;
  #L213474.  call `checkParameterIsNotNull`(v3, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L21347a.  v0:= new `i.h`;
  #L21347e.  call temp:= `getInstance`(v3) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L213484.  v3:= temp @kind object;
  #L213486.  v1:= v2.`i.h.h` @type ^`byte`[] @kind object;
  #L21348a.  call temp:= `digest`(v3, v1) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L213490.  v3:= temp @kind object;
  #L213492.  v1:= "MessageDigest.getInstance(algorithm).digest(data)" @kind object;
  #L213496.  call `checkExpressionValueIsNotNull`(v3, v1) @signature `Lkotlin/v/c/i;.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L21349c.  call `<init>`(v0, v3) @signature `Li/h;.<init>:([B)V` @kind direct;
  #L2134a2.  return v0 @kind object;
}
procedure `boolean` `equals`(`i.h` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Li/h;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L212e04.  v0:= 1I;
  #L212e06.  v1:= 0I;
  #L212e08.  if v5 != v4 then goto L212e0e;
  #L212e0c.  goto L212e52;
  #L212e0e.  v2:= instanceof @variable v5 @type ^`i.h` @kind boolean;
  #L212e12.  if v2 == 0 then goto L212e50;
  #L212e16.  v5:= (`i.h`) v5 @kind object;
  #L212e1a.  call temp:= `size`(v5) @signature `Li/h;.size:()I` @kind virtual;
  #L212e20.  v2:= temp;
  #L212e22.  call temp:= `getData$okio`(v4) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L212e28.  v3:= temp @kind object;
  #L212e2a.  v3:= length @variable v3;
  #L212e2c.  if v2 != v3 then goto L212e50;
  #L212e30.  call temp:= `getData$okio`(v4) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L212e36.  v2:= temp @kind object;
  #L212e38.  call temp:= `getData$okio`(v4) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L212e3e.  v3:= temp @kind object;
  #L212e40.  v3:= length @variable v3;
  #L212e42.  call temp:= `rangeEquals`(v5, v1, v2, v1, v3) @signature `Li/h;.rangeEquals:(I[BII)Z` @kind virtual;
  #L212e48.  v5:= temp;
  #L212e4a.  if v5 == 0 then goto L212e50;
  #L212e4e.  goto L212e52;
  #L212e50.  v0:= 0I;
  #L212e52.  return v0;
}
procedure `byte` `getByte`(`i.h` v0 @kind this, `int` v1 ) @signature `Li/h;.getByte:(I)B` @AccessFlag PUBLIC_FINAL {
    temp;

  #L212f18.  call temp:= `internalGet$okio`(v0, v1) @signature `Li/h;.internalGet$okio:(I)B` @kind virtual;
  #L212f1e.  v1:= temp;
  #L212f20.  return v1;
}
procedure `byte`[] `getData$okio`(`i.h` v1 @kind this) @signature `Li/h;.getData$okio:()[B` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L212f54.  v0:= v1.`i.h.h` @type ^`byte`[] @kind object;
  #L212f58.  return v0 @kind object;
}
procedure `int` `getHashCode$okio`(`i.h` v1 @kind this) @signature `Li/h;.getHashCode$okio:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L213050.  v0:= v1.`i.h.f` @type ^`int`;
  #L213054.  return v0;
}
procedure `int` `getSize$okio`(`i.h` v1 @kind this) @signature `Li/h;.getSize$okio:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L213068.  call temp:= `getData$okio`(v1) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L21306e.  v0:= temp @kind object;
  #L213070.  v0:= length @variable v0;
  #L213072.  return v0;
}
procedure `java.lang.String` `getUtf8$okio`(`i.h` v1 @kind this) @signature `Li/h;.getUtf8$okio:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L213108.  v0:= v1.`i.h.g` @type ^`java.lang.String` @kind object;
  #L21310c.  return v0 @kind object;
}
procedure `int` `hashCode`(`i.h` v1 @kind this) @signature `Li/h;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L213084.  call temp:= `getHashCode$okio`(v1) @signature `Li/h;.getHashCode$okio:()I` @kind virtual;
  #L21308a.  v0:= temp;
  #L21308c.  if v0 == 0 then goto L213092;
  #L213090.  goto L2130b0;
  #L213092.  call temp:= `getData$okio`(v1) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L213098.  v0:= temp @kind object;
  #L21309a.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L2130a0.  v0:= temp;
  #L2130a2.  call `setHashCode$okio`(v1, v0) @signature `Li/h;.setHashCode$okio:(I)V` @kind virtual;
  #L2130a8.  call temp:= `getHashCode$okio`(v1) @signature `Li/h;.getHashCode$okio:()I` @kind virtual;
  #L2130ae.  v0:= temp;
  #L2130b0.  return v0;
}
procedure `java.lang.String` `hex`(`i.h` v9 @kind this) @signature `Li/h;.hex:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L213120.  call temp:= `getData$okio`(v9) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L213126.  v0:= temp @kind object;
  #L213128.  v0:= length @variable v0;
  #L21312a.  v0:= v0 * 2;
  #L21312e.  v0:= new `char`[v0];
  #L213132.  call temp:= `getData$okio`(v9) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L213138.  v1:= temp @kind object;
  #L21313a.  v2:= length @variable v1;
  #L21313c.  v3:= 0I;
  #L21313e.  v4:= 0I;
  #L213140.  if v3 >= v2 then goto L213182;
  #L213144.  v5:= v1[v3] @kind byte;
  #L213148.  v6:= v4 + 1;
  #L21314c.  call temp:= `getHEX_DIGIT_CHARS`() @signature `Li/b0/b;.getHEX_DIGIT_CHARS:()[C` @kind static;
  #L213152.  v7:= temp @kind object;
  #L213154.  v8:= v5 ^> 4;
  #L213158.  v8:= v8 ^& 15;
  #L21315c.  v7:= v7[v8] @kind char;
  #L213160.  v0[v4]:= v7 @kind char;
  #L213164.  v4:= v6 + 1;
  #L213168.  call temp:= `getHEX_DIGIT_CHARS`() @signature `Li/b0/b;.getHEX_DIGIT_CHARS:()[C` @kind static;
  #L21316e.  v7:= temp @kind object;
  #L213170.  v5:= v5 ^& 15;
  #L213174.  v5:= v7[v5] @kind char;
  #L213178.  v0[v6]:= v5 @kind char;
  #L21317c.  v3:= v3 + 1;
  #L213180.  goto L213140;
  #L213182.  v1:= new `java.lang.String`;
  #L213186.  call `<init>`(v1, v0) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L21318c.  return v1 @kind object;
}
procedure `byte`[] `internalArray$okio`(`i.h` v1 @kind this) @signature `Li/h;.internalArray$okio:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L212f6c.  call temp:= `getData$okio`(v1) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L212f72.  v0:= temp @kind object;
  #L212f74.  return v0 @kind object;
}
procedure `byte` `internalGet$okio`(`i.h` v1 @kind this, `int` v2 ) @signature `Li/h;.internalGet$okio:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L212f34.  call temp:= `getData$okio`(v1) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L212f3a.  v0:= temp @kind object;
  #L212f3c.  v2:= v0[v2] @kind byte;
  #L212f40.  return v2;
}
procedure `boolean` `rangeEquals`(`i.h` v1 @kind this, `int` v2 , `i.h` v3 @kind object, `int` v4 , `int` v5 ) @signature `Li/h;.rangeEquals:(ILi/h;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L212ebc.  v0:= "other" @kind object;
  #L212ec0.  call `checkParameterIsNotNull`(v3, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L212ec6.  call temp:= `getData$okio`(v1) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L212ecc.  v0:= temp @kind object;
  #L212ece.  call temp:= `rangeEquals`(v3, v4, v0, v2, v5) @signature `Li/h;.rangeEquals:(I[BII)Z` @kind virtual;
  #L212ed4.  v2:= temp;
  #L212ed6.  return v2;
}
procedure `boolean` `rangeEquals`(`i.h` v1 @kind this, `int` v2 , `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Li/h;.rangeEquals:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L212e64.  v0:= "other" @kind object;
  #L212e68.  call `checkParameterIsNotNull`(v3, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L212e6e.  if v2 < 0 then goto L212ea6;
  #L212e72.  call temp:= `getData$okio`(v1) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L212e78.  v0:= temp @kind object;
  #L212e7a.  v0:= length @variable v0;
  #L212e7c.  v0:= v0 - v5 @kind int;
  #L212e7e.  if v2 > v0 then goto L212ea6;
  #L212e82.  if v4 < 0 then goto L212ea6;
  #L212e86.  v0:= length @variable v3;
  #L212e88.  v0:= v0 - v5 @kind int;
  #L212e8a.  if v4 > v0 then goto L212ea6;
  #L212e8e.  call temp:= `getData$okio`(v1) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L212e94.  v0:= temp @kind object;
  #L212e96.  call temp:= `arrayRangeEquals`(v0, v2, v3, v4, v5) @signature `Li/c;.arrayRangeEquals:([BI[BII)Z` @kind static;
  #L212e9c.  v2:= temp;
  #L212e9e.  if v2 == 0 then goto L212ea6;
  #L212ea2.  v2:= 1I;
  #L212ea4.  goto L212ea8;
  #L212ea6.  v2:= 0I;
  #L212ea8.  return v2;
}
procedure `void` `setHashCode$okio`(`i.h` v0 @kind this, `int` v1 ) @signature `Li/h;.setHashCode$okio:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L213690.  v0.`i.h.f` @type ^`int` := v1;
  #L213694.  return @kind void;
}
procedure `void` `setUtf8$okio`(`i.h` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Li/h;.setUtf8$okio:(Ljava/lang/String;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2136a8.  v0.`i.h.g` @type ^`java.lang.String` := v1 @kind object;
  #L2136ac.  return @kind void;
}
procedure `i.h` `sha1`(`i.h` v1 @kind this) @signature `Li/h;.sha1:()Li/h;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2134f4.  v0:= "SHA-1" @kind object;
  #L2134f8.  call temp:= `digest$okio`(v1, v0) @signature `Li/h;.digest$okio:(Ljava/lang/String;)Li/h;` @kind virtual;
  #L2134fe.  v0:= temp @kind object;
  #L213500.  return v0 @kind object;
}
procedure `i.h` `sha256`(`i.h` v1 @kind this) @signature `Li/h;.sha256:()Li/h;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L213514.  v0:= "SHA-256" @kind object;
  #L213518.  call temp:= `digest$okio`(v1, v0) @signature `Li/h;.digest$okio:(Ljava/lang/String;)Li/h;` @kind virtual;
  #L21351e.  v0:= temp @kind object;
  #L213520.  return v0 @kind object;
}
procedure `int` `size`(`i.h` v1 @kind this) @signature `Li/h;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2130c4.  call temp:= `getSize$okio`(v1) @signature `Li/h;.getSize$okio:()I` @kind virtual;
  #L2130ca.  v0:= temp;
  #L2130cc.  return v0;
}
procedure `boolean` `startsWith`(`i.h` v2 @kind this, `i.h` v3 @kind object) @signature `Li/h;.startsWith:(Li/h;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L212ee8.  v0:= "prefix" @kind object;
  #L212eec.  call `checkParameterIsNotNull`(v3, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L212ef2.  call temp:= `size`(v3) @signature `Li/h;.size:()I` @kind virtual;
  #L212ef8.  v0:= temp;
  #L212efa.  v1:= 0I;
  #L212efc.  call temp:= `rangeEquals`(v2, v1, v3, v1, v0) @signature `Li/h;.rangeEquals:(ILi/h;II)Z` @kind virtual;
  #L212f02.  v3:= temp;
  #L212f04.  return v3;
}
procedure `i.h` `toAsciiLowercase`(`i.h` v6 @kind this) @signature `Li/h;.toAsciiLowercase:()Li/h;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L213534.  v0:= 0I;
  #L213536.  call temp:= `getData$okio`(v6) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L21353c.  v1:= temp @kind object;
  #L21353e.  v1:= length @variable v1;
  #L213540.  if v0 >= v1 then goto L2135c6;
  #L213544.  call temp:= `getData$okio`(v6) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L21354a.  v1:= temp @kind object;
  #L21354c.  v1:= v1[v0] @kind byte;
  #L213550.  v2:= 65I;
  #L213554.  v2:= (`byte`) v2 @kind i2b;
  #L213556.  if v1 < v2 then goto L2135c0;
  #L21355a.  v3:= 90I;
  #L21355e.  v3:= (`byte`) v3 @kind i2b;
  #L213560.  if v1 <= v3 then goto L213566;
  #L213564.  goto L2135c0;
  #L213566.  call temp:= `getData$okio`(v6) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L21356c.  v4:= temp @kind object;
  #L21356e.  v5:= length @variable v4;
  #L213570.  call temp:= `copyOf`(v4, v5) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L213576.  v4:= temp @kind object;
  #L213578.  v5:= "java.util.Arrays.copyOf(this, size)" @kind object;
  #L21357c.  call `checkExpressionValueIsNotNull`(v4, v5) @signature `Lkotlin/v/c/i;.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L213582.  v5:= v0 + 1;
  #L213586.  v1:= v1 + 32;
  #L21358a.  v1:= (`byte`) v1 @kind i2b;
  #L21358c.  v4[v0]:= v1 @kind byte;
  #L213590.  v0:= length @variable v4;
  #L213592.  if v5 >= v0 then goto L2135b4;
  #L213596.  v0:= v4[v5] @kind byte;
  #L21359a.  if v0 < v2 then goto L2135ae;
  #L21359e.  if v0 <= v3 then goto L2135a4;
  #L2135a2.  goto L2135ae;
  #L2135a4.  v0:= v0 + 32;
  #L2135a8.  v0:= (`byte`) v0 @kind i2b;
  #L2135aa.  v4[v5]:= v0 @kind byte;
  #L2135ae.  v5:= v5 + 1;
  #L2135b2.  goto L213590;
  #L2135b4.  v0:= new `i.h`;
  #L2135b8.  call `<init>`(v0, v4) @signature `Li/h;.<init>:([B)V` @kind direct;
  #L2135be.  goto L2135c8;
  #L2135c0.  v0:= v0 + 1;
  #L2135c4.  goto L213536;
  #L2135c6.  v0:= v6 @kind object;
  #L2135c8.  return v0 @kind object;
}
procedure `byte`[] `toByteArray`(`i.h` v2 @kind this) @signature `Li/h;.toByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L212f88.  call temp:= `getData$okio`(v2) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L212f8e.  v0:= temp @kind object;
  #L212f90.  v1:= length @variable v0;
  #L212f92.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L212f98.  v0:= temp @kind object;
  #L212f9a.  v1:= "java.util.Arrays.copyOf(this, size)" @kind object;
  #L212f9e.  call `checkExpressionValueIsNotNull`(v0, v1) @signature `Lkotlin/v/c/i;.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L212fa4.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`i.h` v20 @kind this) @signature `Li/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L2131a0.  call temp:= `getData$okio`(v20) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L2131a6.  v0:= temp @kind object;
  #L2131a8.  v0:= length @variable v0;
  #L2131aa.  v1:= 1I;
  #L2131ac.  v2:= 0I;
  #L2131ae.  if v0 != 0 then goto L2131b6;
  #L2131b2.  v0:= 1I;
  #L2131b4.  goto L2131b8;
  #L2131b6.  v0:= 0I;
  #L2131b8.  if v0 == 0 then goto L2131c4;
  #L2131bc.  v0:= "[size=0]" @kind object;
  #L2131c0.  goto L2133d8;
  #L2131c4.  call temp:= `getData$okio`(v20) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L2131ca.  v0:= temp @kind object;
  #L2131cc.  v3:= 64I;
  #L2131d0.  call temp:= `access$codePointIndexToCharIndex`(v0, v3) @signature `Li/b0/b;.access$codePointIndexToCharIndex:([BI)I` @kind static;
  #L2131d6.  v0:= temp;
  #L2131d8.  v4:= -1I;
  #L2131da.  v5:= "…]" @kind object;
  #L2131de.  v6:= 93I;
  #L2131e2.  v7:= "[size=" @kind object;
  #L2131e6.  if v0 != v4 then goto L213304;
  #L2131ea.  call temp:= `getData$okio`(v20) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L2131f0.  v0:= temp @kind object;
  #L2131f2.  v0:= length @variable v0;
  #L2131f4.  if v0 > v3 then goto L21322c;
  #L2131f8.  v0:= new `java.lang.StringBuilder`;
  #L2131fc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L213202.  v1:= "[hex=" @kind object;
  #L213206.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21320c.  call temp:= `hex`(v20) @signature `Li/h;.hex:()Ljava/lang/String;` @kind virtual;
  #L213212.  v1:= temp @kind object;
  #L213214.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21321a.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L213220.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L213226.  v0:= temp @kind object;
  #L213228.  goto L2133d8;
  #L21322c.  v0:= new `java.lang.StringBuilder`;
  #L213230.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L213236.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21323c.  call temp:= `getData$okio`(v20) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L213242.  v4:= temp @kind object;
  #L213244.  v4:= length @variable v4;
  #L213246.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L21324c.  v4:= " hex=" @kind object;
  #L213250.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L213256.  call temp:= `getData$okio`(v20) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L21325c.  v4:= temp @kind object;
  #L21325e.  v4:= length @variable v4;
  #L213260.  if v3 > v4 then goto L213266;
  #L213264.  goto L213268;
  #L213266.  v1:= 0I;
  #L213268.  if v1 == 0 then goto L2132ba;
  #L21326c.  call temp:= `getData$okio`(v20) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L213272.  v1:= temp @kind object;
  #L213274.  v1:= length @variable v1;
  #L213276.  if v3 != v1 then goto L213280;
  #L21327a.  v2:= v20 @kind object;
  #L21327e.  goto L21329a;
  #L213280.  call temp:= `getData$okio`(v20) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L213286.  v1:= temp @kind object;
  #L213288.  call temp:= `copyOfRange`(v1, v2, v3) @signature `Lkotlin/r/d;.copyOfRange:([BII)[B` @kind static;
  #L21328e.  v1:= temp @kind object;
  #L213290.  v2:= new `i.h`;
  #L213294.  call `<init>`(v2, v1) @signature `Li/h;.<init>:([B)V` @kind direct;
  #L21329a.  call temp:= `hex`(v2) @signature `Li/h;.hex:()Ljava/lang/String;` @kind virtual;
  #L2132a0.  v1:= temp @kind object;
  #L2132a2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2132a8.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2132ae.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2132b4.  v0:= temp @kind object;
  #L2132b6.  goto L2133d8;
  #L2132ba.  v0:= new `java.lang.StringBuilder`;
  #L2132be.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2132c4.  v1:= "endIndex > length(" @kind object;
  #L2132c8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2132ce.  call temp:= `getData$okio`(v20) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L2132d4.  v1:= temp @kind object;
  #L2132d6.  v1:= length @variable v1;
  #L2132d8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2132de.  v1:= 41I;
  #L2132e2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2132e8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2132ee.  v0:= temp @kind object;
  #L2132f0.  v1:= new `java.lang.IllegalArgumentException`;
  #L2132f4.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2132fa.  v0:= temp @kind object;
  #L2132fc.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L213302.  throw v1;
  #L213304.  call temp:= `utf8`(v20) @signature `Li/h;.utf8:()Ljava/lang/String;` @kind virtual;
  #L21330a.  v1:= temp @kind object;
  #L21330c.  if v1 == 0 then goto L2133da;
  #L213310.  call temp:= `substring`(v1, v2, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L213316.  v8:= temp @kind object;
  #L213318.  v2:= "(this as java.lang.Strin…ing(startIndex, endIndex)" @kind object;
  #L21331c.  call `checkExpressionValueIsNotNull`(v8, v2) @signature `Lkotlin/v/c/i;.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L213322.  v11:= 0I;
  #L213324.  v12:= 4I;
  #L213326.  v13:= 0I;
  #L213328.  v9:= "\\" @kind object;
  #L21332c.  v10:= "\\\\" @kind object;
  #L213330.  call temp:= `replace$default`(v8, v9, v10, v11, v12, v13) @signature `Lkotlin/a0/h;.replace$default:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L213336.  v14:= temp @kind object;
  #L213338.  v17:= 0I;
  #L21333c.  v18:= 4I;
  #L213340.  v19:= 0I;
  #L213344.  v15:= "\n" @kind object;
  #L213348.  v16:= "\\n" @kind object;
  #L21334c.  call temp:= `replace$default`(v14, v15, v16, v17, v18, v19) @signature `Lkotlin/a0/h;.replace$default:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L213352.  v8:= temp @kind object;
  #L213354.  v9:= "\r" @kind object;
  #L213358.  v10:= "\\r" @kind object;
  #L21335c.  call temp:= `replace$default`(v8, v9, v10, v11, v12, v13) @signature `Lkotlin/a0/h;.replace$default:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L213362.  v2:= temp @kind object;
  #L213364.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L21336a.  v1:= temp;
  #L21336c.  if v0 >= v1 then goto L2133b0;
  #L213370.  v0:= new `java.lang.StringBuilder`;
  #L213374.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L21337a.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L213380.  call temp:= `getData$okio`(v20) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L213386.  v1:= temp @kind object;
  #L213388.  v1:= length @variable v1;
  #L21338a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L213390.  v1:= " text=" @kind object;
  #L213394.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21339a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2133a0.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2133a6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2133ac.  v0:= temp @kind object;
  #L2133ae.  goto L2133d8;
  #L2133b0.  v0:= new `java.lang.StringBuilder`;
  #L2133b4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2133ba.  v1:= "[text=" @kind object;
  #L2133be.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2133c4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2133ca.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2133d0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2133d6.  v0:= temp @kind object;
  #L2133d8.  return v0 @kind object;
  #L2133da.  v0:= new `kotlin.TypeCastException`;
  #L2133de.  v1:= "null cannot be cast to non-null type java.lang.String" @kind object;
  #L2133e2.  call `<init>`(v0, v1) @signature `Lkotlin/TypeCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2133e8.  throw v0;
}
procedure `java.lang.String` `utf8`(`i.h` v1 @kind this) @signature `Li/h;.utf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2133fc.  call temp:= `getUtf8$okio`(v1) @signature `Li/h;.getUtf8$okio:()Ljava/lang/String;` @kind virtual;
  #L213402.  v0:= temp @kind object;
  #L213404.  if v0 != 0 then goto L21341e;
  #L213408.  call temp:= `internalArray$okio`(v1) @signature `Li/h;.internalArray$okio:()[B` @kind virtual;
  #L21340e.  v0:= temp @kind object;
  #L213410.  call temp:= `toUtf8String`(v0) @signature `Li/b;.toUtf8String:([B)Ljava/lang/String;` @kind static;
  #L213416.  v0:= temp @kind object;
  #L213418.  call `setUtf8$okio`(v1, v0) @signature `Li/h;.setUtf8$okio:(Ljava/lang/String;)V` @kind virtual;
  #L21341e.  return v0 @kind object;
}
procedure `void` `write$okio`(`i.h` v1 @kind this, `i.e` v2 @kind object) @signature `Li/h;.write$okio:(Li/e;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2136c0.  v0:= "buffer" @kind object;
  #L2136c4.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2136ca.  call `commonWrite`(v1, v2) @signature `Li/b0/b;.commonWrite:(Li/h;Li/e;)V` @kind static;
  #L2136d0.  return @kind void;
}
