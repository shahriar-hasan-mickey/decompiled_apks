record `i.h$a` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`i.h$a` v0 @kind this) @signature `Li/h$a;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L212dd4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L212dda.  return @kind void;
}
procedure `void` `<init>`(`i.h$a` v0 @kind this, `kotlin.v.c.f` v1 @kind object) @signature `Li/h$a;.<init>:(Lkotlin/v/c/f;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L212dec.  call `<init>`(v0) @signature `Li/h$a;.<init>:()V` @kind direct;
  #L212df2.  return @kind void;
}
procedure `i.h` `decodeBase64`(`i.h$a` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Li/h$a;.decodeBase64:(Ljava/lang/String;)Li/h;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L212bcc.  v0:= "$this$decodeBase64" @kind object;
  #L212bd0.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L212bd6.  call temp:= `decodeBase64ToArray`(v2) @signature `Li/a;.decodeBase64ToArray:(Ljava/lang/String;)[B` @kind static;
  #L212bdc.  v2:= temp @kind object;
  #L212bde.  if v2 == 0 then goto L212bee;
  #L212be2.  v0:= new `i.h`;
  #L212be6.  call `<init>`(v0, v2) @signature `Li/h;.<init>:([B)V` @kind direct;
  #L212bec.  goto L212bf0;
  #L212bee.  v0:= 0I;
  #L212bf0.  return v0 @kind object;
}
procedure `i.h` `decodeHex`(`i.h$a` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Li/h$a;.decodeHex:(Ljava/lang/String;)Li/h;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L212c04.  v0:= "$this$decodeHex" @kind object;
  #L212c08.  call `checkParameterIsNotNull`(v7, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L212c0e.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L212c14.  v0:= temp;
  #L212c16.  v0:= v0 %% 2;
  #L212c1a.  v1:= 0I;
  #L212c1c.  v2:= 1I;
  #L212c1e.  if v0 != 0 then goto L212c26;
  #L212c22.  v0:= 1I;
  #L212c24.  goto L212c28;
  #L212c26.  v0:= 0I;
  #L212c28.  if v0 == 0 then goto L212c86;
  #L212c2c.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L212c32.  v0:= temp;
  #L212c34.  v0:= v0 / 2;
  #L212c38.  v0:= new `byte`[v0];
  #L212c3c.  v3:= length @variable v0;
  #L212c3e.  if v1 >= v3 then goto L212c7a;
  #L212c42.  v4:= v1 * 2;
  #L212c46.  call temp:= `charAt`(v7, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L212c4c.  v5:= temp;
  #L212c4e.  call temp:= `access$decodeHexDigit`(v5) @signature `Li/b0/b;.access$decodeHexDigit:(C)I` @kind static;
  #L212c54.  v5:= temp;
  #L212c56.  v5:= v5 ^< 4;
  #L212c5a.  v4:= v4 + v2 @kind int;
  #L212c5c.  call temp:= `charAt`(v7, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L212c62.  v4:= temp;
  #L212c64.  call temp:= `access$decodeHexDigit`(v4) @signature `Li/b0/b;.access$decodeHexDigit:(C)I` @kind static;
  #L212c6a.  v4:= temp;
  #L212c6c.  v5:= v5 + v4 @kind int;
  #L212c6e.  v4:= (`byte`) v5 @kind i2b;
  #L212c70.  v0[v1]:= v4 @kind byte;
  #L212c74.  v1:= v1 + 1;
  #L212c78.  goto L212c3e;
  #L212c7a.  v7:= new `i.h`;
  #L212c7e.  call `<init>`(v7, v0) @signature `Li/h;.<init>:([B)V` @kind direct;
  #L212c84.  return v7 @kind object;
  #L212c86.  v0:= new `java.lang.StringBuilder`;
  #L212c8a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L212c90.  v1:= "Unexpected hex string: " @kind object;
  #L212c94.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L212c9a.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L212ca0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L212ca6.  v7:= temp @kind object;
  #L212ca8.  v0:= new `java.lang.IllegalArgumentException`;
  #L212cac.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L212cb2.  v7:= temp @kind object;
  #L212cb4.  call `<init>`(v0, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L212cba.  throw v0;
}
procedure `i.h` `encodeUtf8`(`i.h$a` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Li/h$a;.encodeUtf8:(Ljava/lang/String;)Li/h;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L212ccc.  v0:= "$this$encodeUtf8" @kind object;
  #L212cd0.  call `checkParameterIsNotNull`(v3, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L212cd6.  v0:= new `i.h`;
  #L212cda.  call temp:= `asUtf8ToByteArray`(v3) @signature `Li/b;.asUtf8ToByteArray:(Ljava/lang/String;)[B` @kind static;
  #L212ce0.  v1:= temp @kind object;
  #L212ce2.  call `<init>`(v0, v1) @signature `Li/h;.<init>:([B)V` @kind direct;
  #L212ce8.  call `setUtf8$okio`(v0, v3) @signature `Li/h;.setUtf8$okio:(Ljava/lang/String;)V` @kind virtual;
  #L212cee.  return v0 @kind object;
}
procedure `i.h` `of`(`i.h$a` v1 @kind this, `byte`[] v2 @kind object) @signature `Li/h$a;.of:([B)Li/h;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L212d00.  v0:= "data" @kind object;
  #L212d04.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L212d0a.  v0:= length @variable v2;
  #L212d0c.  call temp:= `copyOf`(v2, v0) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L212d12.  v2:= temp @kind object;
  #L212d14.  v0:= "java.util.Arrays.copyOf(this, size)" @kind object;
  #L212d18.  call `checkExpressionValueIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L212d1e.  v0:= new `i.h`;
  #L212d22.  call `<init>`(v0, v2) @signature `Li/h;.<init>:([B)V` @kind direct;
  #L212d28.  return v0 @kind object;
}
procedure `i.h` `read`(`i.h$a` v4 @kind this, `java.io.InputStream` v5 @kind object, `int` v6 ) @signature `Li/h$a;.read:(Ljava/io/InputStream;I)Li/h;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L212d3c.  v0:= "$this$readByteString" @kind object;
  #L212d40.  call `checkParameterIsNotNull`(v5, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L212d46.  v0:= 0I;
  #L212d48.  if v6 < 0 then goto L212d50;
  #L212d4c.  v1:= 1I;
  #L212d4e.  goto L212d52;
  #L212d50.  v1:= 0I;
  #L212d52.  if v1 == 0 then goto L212d8c;
  #L212d56.  v1:= new `byte`[v6];
  #L212d5a.  if v0 >= v6 then goto L212d80;
  #L212d5e.  v2:= v6 - v0 @kind int;
  #L212d62.  call temp:= `read`(v5, v1, v0, v2) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L212d68.  v2:= temp;
  #L212d6a.  v3:= -1I;
  #L212d6c.  if v2 == v3 then goto L212d74;
  #L212d70.  v0:= v0 + v2 @kind int;
  #L212d72.  goto L212d5a;
  #L212d74.  v5:= new `java.io.EOFException`;
  #L212d78.  call `<init>`(v5) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L212d7e.  throw v5;
  #L212d80.  v5:= new `i.h`;
  #L212d84.  call `<init>`(v5, v1) @signature `Li/h;.<init>:([B)V` @kind direct;
  #L212d8a.  return v5 @kind object;
  #L212d8c.  v5:= new `java.lang.StringBuilder`;
  #L212d90.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L212d96.  v0:= "byteCount < 0: " @kind object;
  #L212d9a.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L212da0.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L212da6.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L212dac.  v5:= temp @kind object;
  #L212dae.  v6:= new `java.lang.IllegalArgumentException`;
  #L212db2.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L212db8.  v5:= temp @kind object;
  #L212dba.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L212dc0.  throw v6;
}
