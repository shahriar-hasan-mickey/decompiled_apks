record `i.w` @kind class @AccessFlag PUBLIC_FINAL extends `i.h` @kind class {
  `byte`[][] `i.w.k` @AccessFlag PRIVATE_FINAL_TRANSIENT;
  `int`[] `i.w.l` @AccessFlag PRIVATE_FINAL_TRANSIENT;
}
procedure `void` `<init>`(`i.w` v1 @kind this, `byte`[][] v2 @kind object, `int`[] v3 @kind object) @signature `Li/w;.<init>:([[B[I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2170ec.  v0:= "segments" @kind object;
  #L2170f0.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2170f6.  v0:= "directory" @kind object;
  #L2170fa.  call `checkParameterIsNotNull`(v3, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L217100.  v0:= `@@i.h.i` @type ^`i.h` @kind object;
  #L217104.  call temp:= `getData$okio`(v0) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L21710a.  v0:= temp @kind object;
  #L21710c.  call `<init>`(v1, v0) @signature `Li/h;.<init>:([B)V` @kind direct;
  #L217112.  v1.`i.w.k` @type ^`byte`[][] := v2 @kind object;
  #L217116.  v1.`i.w.l` @type ^`int`[] := v3 @kind object;
  #L21711a.  return @kind void;
}
procedure `i.h` `a`(`i.w` v2 @kind this) @signature `Li/w;.a:()Li/h;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2170c8.  v0:= new `i.h`;
  #L2170cc.  call temp:= `toByteArray`(v2) @signature `Li/w;.toByteArray:()[B` @kind virtual;
  #L2170d2.  v1:= temp @kind object;
  #L2170d4.  call `<init>`(v0, v1) @signature `Li/h;.<init>:([B)V` @kind direct;
  #L2170da.  return v0 @kind object;
}
procedure `java.lang.Object` `writeReplace`(`i.w` v2 @kind this) @signature `Li/w;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L216f7c.  call temp:= `a`(v2) @signature `Li/w;.a:()Li/h;` @kind direct;
  #L216f82.  v0:= temp @kind object;
  #L216f84.  if v0 == 0 then goto L216f8a;
  #L216f88.  return v0 @kind object;
  #L216f8a.  v0:= new `kotlin.TypeCastException`;
  #L216f8e.  v1:= "null cannot be cast to non-null type java.lang.Object" @kind object;
  #L216f92.  call `<init>`(v0, v1) @signature `Lkotlin/TypeCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L216f98.  throw v0;
}
procedure `java.lang.String` `base64`(`i.w` v1 @kind this) @signature `Li/w;.base64:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L216fac.  call temp:= `a`(v1) @signature `Li/w;.a:()Li/h;` @kind direct;
  #L216fb2.  v0:= temp @kind object;
  #L216fb4.  call temp:= `base64`(v0) @signature `Li/h;.base64:()Ljava/lang/String;` @kind virtual;
  #L216fba.  v0:= temp @kind object;
  #L216fbc.  return v0 @kind object;
}
procedure `i.h` `digest$okio`(`i.w` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Li/w;.digest$okio:(Ljava/lang/String;)Li/h;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L217018.  v0:= "algorithm" @kind object;
  #L21701c.  call `checkParameterIsNotNull`(v7, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L217022.  call temp:= `getInstance`(v7) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L217028.  v7:= temp @kind object;
  #L21702a.  call temp:= `getSegments$okio`(v6) @signature `Li/w;.getSegments$okio:()[[B` @kind virtual;
  #L217030.  v0:= temp @kind object;
  #L217032.  v0:= length @variable v0;
  #L217034.  v1:= 0I;
  #L217036.  v2:= 0I;
  #L217038.  if v1 >= v0 then goto L217076;
  #L21703c.  call temp:= `getDirectory$okio`(v6) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L217042.  v3:= temp @kind object;
  #L217044.  v4:= v0 + v1 @kind int;
  #L217048.  v3:= v3[v4];
  #L21704c.  call temp:= `getDirectory$okio`(v6) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L217052.  v4:= temp @kind object;
  #L217054.  v4:= v4[v1];
  #L217058.  call temp:= `getSegments$okio`(v6) @signature `Li/w;.getSegments$okio:()[[B` @kind virtual;
  #L21705e.  v5:= temp @kind object;
  #L217060.  v5:= v5[v1] @kind object;
  #L217064.  v2:= v4 - v2 @kind int;
  #L217068.  call `update`(v7, v5, v3, v2) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L21706e.  v1:= v1 + 1;
  #L217072.  v2:= v4;
  #L217074.  goto L217038;
  #L217076.  v0:= new `i.h`;
  #L21707a.  call temp:= `digest`(v7) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L217080.  v7:= temp @kind object;
  #L217082.  v1:= "digest.digest()" @kind object;
  #L217086.  call `checkExpressionValueIsNotNull`(v7, v1) @signature `Lkotlin/v/c/i;.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L21708c.  call `<init>`(v0, v7) @signature `Li/h;.<init>:([B)V` @kind direct;
  #L217092.  return v0 @kind object;
}
procedure `boolean` `equals`(`i.w` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Li/w;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L216bb0.  v0:= 1I;
  #L216bb2.  v1:= 0I;
  #L216bb4.  if v5 != v4 then goto L216bba;
  #L216bb8.  goto L216bf2;
  #L216bba.  v2:= instanceof @variable v5 @type ^`i.h` @kind boolean;
  #L216bbe.  if v2 == 0 then goto L216bf0;
  #L216bc2.  v5:= (`i.h`) v5 @kind object;
  #L216bc6.  call temp:= `size`(v5) @signature `Li/h;.size:()I` @kind virtual;
  #L216bcc.  v2:= temp;
  #L216bce.  call temp:= `size`(v4) @signature `Li/h;.size:()I` @kind virtual;
  #L216bd4.  v3:= temp;
  #L216bd6.  if v2 != v3 then goto L216bf0;
  #L216bda.  call temp:= `size`(v4) @signature `Li/h;.size:()I` @kind virtual;
  #L216be0.  v2:= temp;
  #L216be2.  call temp:= `rangeEquals`(v4, v1, v5, v1, v2) @signature `Li/w;.rangeEquals:(ILi/h;II)Z` @kind virtual;
  #L216be8.  v5:= temp;
  #L216bea.  if v5 == 0 then goto L216bf0;
  #L216bee.  goto L216bf2;
  #L216bf0.  v0:= 0I;
  #L216bf2.  return v0;
}
procedure `int`[] `getDirectory$okio`(`i.w` v1 @kind this) @signature `Li/w;.getDirectory$okio:()[I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L216f64.  v0:= v1.`i.w.l` @type ^`int`[] @kind object;
  #L216f68.  return v0 @kind object;
}
procedure `byte`[][] `getSegments$okio`(`i.w` v1 @kind this) @signature `Li/w;.getSegments$okio:()[[B` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L216e98.  v0:= v1.`i.w.k` @type ^`byte`[][] @kind object;
  #L216e9c.  return v0 @kind object;
}
procedure `int` `getSize$okio`(`i.w` v2 @kind this) @signature `Li/w;.getSize$okio:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L216eb0.  call temp:= `getDirectory$okio`(v2) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L216eb6.  v0:= temp @kind object;
  #L216eb8.  call temp:= `getSegments$okio`(v2) @signature `Li/w;.getSegments$okio:()[[B` @kind virtual;
  #L216ebe.  v1:= temp @kind object;
  #L216ec0.  v1:= length @variable v1;
  #L216ec2.  v1:= v1 + -1;
  #L216ec6.  v0:= v0[v1];
  #L216eca.  return v0;
}
procedure `int` `hashCode`(`i.w` v8 @kind this) @signature `Li/w;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L216edc.  call temp:= `getHashCode$okio`(v8) @signature `Li/h;.getHashCode$okio:()I` @kind virtual;
  #L216ee2.  v0:= temp;
  #L216ee4.  if v0 == 0 then goto L216eea;
  #L216ee8.  goto L216f50;
  #L216eea.  call temp:= `getSegments$okio`(v8) @signature `Li/w;.getSegments$okio:()[[B` @kind virtual;
  #L216ef0.  v0:= temp @kind object;
  #L216ef2.  v0:= length @variable v0;
  #L216ef4.  v1:= 0I;
  #L216ef6.  v2:= 1I;
  #L216ef8.  v3:= 0I;
  #L216efa.  if v1 >= v0 then goto L216f48;
  #L216efe.  call temp:= `getDirectory$okio`(v8) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L216f04.  v4:= temp @kind object;
  #L216f06.  v5:= v0 + v1 @kind int;
  #L216f0a.  v4:= v4[v5];
  #L216f0e.  call temp:= `getDirectory$okio`(v8) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L216f14.  v5:= temp @kind object;
  #L216f16.  v5:= v5[v1];
  #L216f1a.  call temp:= `getSegments$okio`(v8) @signature `Li/w;.getSegments$okio:()[[B` @kind virtual;
  #L216f20.  v6:= temp @kind object;
  #L216f22.  v6:= v6[v1] @kind object;
  #L216f26.  v3:= v5 - v3 @kind int;
  #L216f2a.  v3:= v3 + v4 @kind int;
  #L216f2c.  if v4 >= v3 then goto L216f40;
  #L216f30.  v2:= v2 * 31;
  #L216f34.  v7:= v6[v4] @kind byte;
  #L216f38.  v2:= v2 + v7 @kind int;
  #L216f3a.  v4:= v4 + 1;
  #L216f3e.  goto L216f2c;
  #L216f40.  v1:= v1 + 1;
  #L216f44.  v3:= v5;
  #L216f46.  goto L216efa;
  #L216f48.  call `setHashCode$okio`(v8, v2) @signature `Li/h;.setHashCode$okio:(I)V` @kind virtual;
  #L216f4e.  v0:= v2;
  #L216f50.  return v0;
}
procedure `java.lang.String` `hex`(`i.w` v1 @kind this) @signature `Li/w;.hex:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L216fd0.  call temp:= `a`(v1) @signature `Li/w;.a:()Li/h;` @kind direct;
  #L216fd6.  v0:= temp @kind object;
  #L216fd8.  call temp:= `hex`(v0) @signature `Li/h;.hex:()Ljava/lang/String;` @kind virtual;
  #L216fde.  v0:= temp @kind object;
  #L216fe0.  return v0 @kind object;
}
procedure `byte`[] `internalArray$okio`(`i.w` v1 @kind this) @signature `Li/w;.internalArray$okio:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L216e08.  call temp:= `toByteArray`(v1) @signature `Li/w;.toByteArray:()[B` @kind virtual;
  #L216e0e.  v0:= temp @kind object;
  #L216e10.  return v0 @kind object;
}
procedure `byte` `internalGet$okio`(`i.w` v7 @kind this, `int` v8 ) @signature `Li/w;.internalGet$okio:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L216d80.  call temp:= `getDirectory$okio`(v7) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L216d86.  v0:= temp @kind object;
  #L216d88.  call temp:= `getSegments$okio`(v7) @signature `Li/w;.getSegments$okio:()[[B` @kind virtual;
  #L216d8e.  v1:= temp @kind object;
  #L216d90.  v1:= length @variable v1;
  #L216d92.  v1:= v1 + -1;
  #L216d96.  v0:= v0[v1];
  #L216d9a.  v1:= (`long`) v0 @kind i2l;
  #L216d9c.  v3:= (`long`) v8 @kind i2l;
  #L216d9e.  v5:= 1L;
  #L216da2.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Li/c;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L216da8.  call temp:= `segment`(v7, v8) @signature `Li/b0/c;.segment:(Li/w;I)I` @kind static;
  #L216dae.  v0:= temp;
  #L216db0.  if v0 != 0 then goto L216db8;
  #L216db4.  v1:= 0I;
  #L216db6.  goto L216dc8;
  #L216db8.  call temp:= `getDirectory$okio`(v7) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L216dbe.  v1:= temp @kind object;
  #L216dc0.  v2:= v0 + -1;
  #L216dc4.  v1:= v1[v2];
  #L216dc8.  call temp:= `getDirectory$okio`(v7) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L216dce.  v2:= temp @kind object;
  #L216dd0.  call temp:= `getSegments$okio`(v7) @signature `Li/w;.getSegments$okio:()[[B` @kind virtual;
  #L216dd6.  v3:= temp @kind object;
  #L216dd8.  v3:= length @variable v3;
  #L216dda.  v3:= v3 + v0 @kind int;
  #L216ddc.  v2:= v2[v3];
  #L216de0.  call temp:= `getSegments$okio`(v7) @signature `Li/w;.getSegments$okio:()[[B` @kind virtual;
  #L216de6.  v3:= temp @kind object;
  #L216de8.  v0:= v3[v0] @kind object;
  #L216dec.  v8:= v8 - v1 @kind int;
  #L216dee.  v8:= v8 + v2 @kind int;
  #L216df0.  v8:= v0[v8] @kind byte;
  #L216df4.  return v8;
}
procedure `boolean` `rangeEquals`(`i.w` v6 @kind this, `int` v7 , `i.h` v8 @kind object, `int` v9 , `int` v10 ) @signature `Li/w;.rangeEquals:(ILi/h;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L216cc8.  v0:= "other" @kind object;
  #L216ccc.  call `checkParameterIsNotNull`(v8, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L216cd2.  v0:= 0I;
  #L216cd4.  if v7 < 0 then goto L216d6c;
  #L216cd8.  call temp:= `size`(v6) @signature `Li/h;.size:()I` @kind virtual;
  #L216cde.  v1:= temp;
  #L216ce0.  v1:= v1 - v10 @kind int;
  #L216ce2.  if v7 <= v1 then goto L216ce8;
  #L216ce6.  goto L216d6c;
  #L216ce8.  v10:= v10 + v7 @kind int;
  #L216cea.  call temp:= `segment`(v6, v7) @signature `Li/b0/c;.segment:(Li/w;I)I` @kind static;
  #L216cf0.  v1:= temp;
  #L216cf2.  if v7 >= v10 then goto L216d6a;
  #L216cf6.  if v1 != 0 then goto L216cfe;
  #L216cfa.  v2:= 0I;
  #L216cfc.  goto L216d0e;
  #L216cfe.  call temp:= `getDirectory$okio`(v6) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L216d04.  v2:= temp @kind object;
  #L216d06.  v3:= v1 + -1;
  #L216d0a.  v2:= v2[v3];
  #L216d0e.  call temp:= `getDirectory$okio`(v6) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L216d14.  v3:= temp @kind object;
  #L216d16.  v3:= v3[v1];
  #L216d1a.  v3:= v3 - v2 @kind int;
  #L216d1c.  call temp:= `getDirectory$okio`(v6) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L216d22.  v4:= temp @kind object;
  #L216d24.  call temp:= `getSegments$okio`(v6) @signature `Li/w;.getSegments$okio:()[[B` @kind virtual;
  #L216d2a.  v5:= temp @kind object;
  #L216d2c.  v5:= length @variable v5;
  #L216d2e.  v5:= v5 + v1 @kind int;
  #L216d30.  v4:= v4[v5];
  #L216d34.  v3:= v3 + v2 @kind int;
  #L216d36.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L216d3c.  v3:= temp;
  #L216d3e.  v3:= v3 - v7 @kind int;
  #L216d40.  v2:= v7 - v2 @kind int;
  #L216d44.  v4:= v4 + v2 @kind int;
  #L216d46.  call temp:= `getSegments$okio`(v6) @signature `Li/w;.getSegments$okio:()[[B` @kind virtual;
  #L216d4c.  v2:= temp @kind object;
  #L216d4e.  v2:= v2[v1] @kind object;
  #L216d52.  call temp:= `rangeEquals`(v8, v9, v2, v4, v3) @signature `Li/h;.rangeEquals:(I[BII)Z` @kind virtual;
  #L216d58.  v2:= temp;
  #L216d5a.  if v2 != 0 then goto L216d60;
  #L216d5e.  goto L216d6c;
  #L216d60.  v9:= v9 + v3 @kind int;
  #L216d62.  v7:= v7 + v3 @kind int;
  #L216d64.  v1:= v1 + 1;
  #L216d68.  goto L216cf2;
  #L216d6a.  v0:= 1I;
  #L216d6c.  return v0;
}
procedure `boolean` `rangeEquals`(`i.w` v6 @kind this, `int` v7 , `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Li/w;.rangeEquals:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L216c04.  v0:= "other" @kind object;
  #L216c08.  call `checkParameterIsNotNull`(v8, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L216c0e.  v0:= 0I;
  #L216c10.  if v7 < 0 then goto L216cb4;
  #L216c14.  call temp:= `size`(v6) @signature `Li/h;.size:()I` @kind virtual;
  #L216c1a.  v1:= temp;
  #L216c1c.  v1:= v1 - v10 @kind int;
  #L216c1e.  if v7 > v1 then goto L216cb4;
  #L216c22.  if v9 < 0 then goto L216cb4;
  #L216c26.  v1:= length @variable v8;
  #L216c28.  v1:= v1 - v10 @kind int;
  #L216c2a.  if v9 <= v1 then goto L216c30;
  #L216c2e.  goto L216cb4;
  #L216c30.  v10:= v10 + v7 @kind int;
  #L216c32.  call temp:= `segment`(v6, v7) @signature `Li/b0/c;.segment:(Li/w;I)I` @kind static;
  #L216c38.  v1:= temp;
  #L216c3a.  if v7 >= v10 then goto L216cb2;
  #L216c3e.  if v1 != 0 then goto L216c46;
  #L216c42.  v2:= 0I;
  #L216c44.  goto L216c56;
  #L216c46.  call temp:= `getDirectory$okio`(v6) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L216c4c.  v2:= temp @kind object;
  #L216c4e.  v3:= v1 + -1;
  #L216c52.  v2:= v2[v3];
  #L216c56.  call temp:= `getDirectory$okio`(v6) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L216c5c.  v3:= temp @kind object;
  #L216c5e.  v3:= v3[v1];
  #L216c62.  v3:= v3 - v2 @kind int;
  #L216c64.  call temp:= `getDirectory$okio`(v6) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L216c6a.  v4:= temp @kind object;
  #L216c6c.  call temp:= `getSegments$okio`(v6) @signature `Li/w;.getSegments$okio:()[[B` @kind virtual;
  #L216c72.  v5:= temp @kind object;
  #L216c74.  v5:= length @variable v5;
  #L216c76.  v5:= v5 + v1 @kind int;
  #L216c78.  v4:= v4[v5];
  #L216c7c.  v3:= v3 + v2 @kind int;
  #L216c7e.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L216c84.  v3:= temp;
  #L216c86.  v3:= v3 - v7 @kind int;
  #L216c88.  v2:= v7 - v2 @kind int;
  #L216c8c.  v4:= v4 + v2 @kind int;
  #L216c8e.  call temp:= `getSegments$okio`(v6) @signature `Li/w;.getSegments$okio:()[[B` @kind virtual;
  #L216c94.  v2:= temp @kind object;
  #L216c96.  v2:= v2[v1] @kind object;
  #L216c9a.  call temp:= `arrayRangeEquals`(v2, v4, v8, v9, v3) @signature `Li/c;.arrayRangeEquals:([BI[BII)Z` @kind static;
  #L216ca0.  v2:= temp;
  #L216ca2.  if v2 != 0 then goto L216ca8;
  #L216ca6.  goto L216cb4;
  #L216ca8.  v9:= v9 + v3 @kind int;
  #L216caa.  v7:= v7 + v3 @kind int;
  #L216cac.  v1:= v1 + 1;
  #L216cb0.  goto L216c3a;
  #L216cb2.  v0:= 1I;
  #L216cb4.  return v0;
}
procedure `i.h` `toAsciiLowercase`(`i.w` v1 @kind this) @signature `Li/w;.toAsciiLowercase:()Li/h;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2170a4.  call temp:= `a`(v1) @signature `Li/w;.a:()Li/h;` @kind direct;
  #L2170aa.  v0:= temp @kind object;
  #L2170ac.  call temp:= `toAsciiLowercase`(v0) @signature `Li/h;.toAsciiLowercase:()Li/h;` @kind virtual;
  #L2170b2.  v0:= temp @kind object;
  #L2170b4.  return v0 @kind object;
}
procedure `byte`[] `toByteArray`(`i.w` v9 @kind this) @signature `Li/w;.toByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L216e24.  call temp:= `size`(v9) @signature `Li/h;.size:()I` @kind virtual;
  #L216e2a.  v0:= temp;
  #L216e2c.  v0:= new `byte`[v0];
  #L216e30.  call temp:= `getSegments$okio`(v9) @signature `Li/w;.getSegments$okio:()[[B` @kind virtual;
  #L216e36.  v1:= temp @kind object;
  #L216e38.  v1:= length @variable v1;
  #L216e3a.  v2:= 0I;
  #L216e3c.  v3:= 0I;
  #L216e3e.  v4:= 0I;
  #L216e40.  if v2 >= v1 then goto L216e84;
  #L216e44.  call temp:= `getDirectory$okio`(v9) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L216e4a.  v5:= temp @kind object;
  #L216e4c.  v6:= v1 + v2 @kind int;
  #L216e50.  v5:= v5[v6];
  #L216e54.  call temp:= `getDirectory$okio`(v9) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L216e5a.  v6:= temp @kind object;
  #L216e5c.  v6:= v6[v2];
  #L216e60.  call temp:= `getSegments$okio`(v9) @signature `Li/w;.getSegments$okio:()[[B` @kind virtual;
  #L216e66.  v7:= temp @kind object;
  #L216e68.  v7:= v7[v2] @kind object;
  #L216e6c.  v3:= v6 - v3 @kind int;
  #L216e70.  v8:= v5 + v3 @kind int;
  #L216e74.  call temp:= `copyInto`(v7, v0, v4, v5, v8) @signature `Lkotlin/r/d;.copyInto:([B[BIII)[B` @kind static;
  #L216e7a.  v4:= v4 + v3 @kind int;
  #L216e7c.  v2:= v2 + 1;
  #L216e80.  v3:= v6;
  #L216e82.  goto L216e40;
  #L216e84.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`i.w` v1 @kind this) @signature `Li/w;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L216ff4.  call temp:= `a`(v1) @signature `Li/w;.a:()Li/h;` @kind direct;
  #L216ffa.  v0:= temp @kind object;
  #L216ffc.  call temp:= `toString`(v0) @signature `Li/h;.toString:()Ljava/lang/String;` @kind virtual;
  #L217002.  v0:= temp @kind object;
  #L217004.  return v0 @kind object;
}
procedure `void` `write$okio`(`i.w` v11 @kind this, `i.e` v12 @kind object) @signature `Li/w;.write$okio:(Li/e;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L21712c.  v0:= "buffer" @kind object;
  #L217130.  call `checkParameterIsNotNull`(v12, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L217136.  call temp:= `getSegments$okio`(v11) @signature `Li/w;.getSegments$okio:()[[B` @kind virtual;
  #L21713c.  v0:= temp @kind object;
  #L21713e.  v0:= length @variable v0;
  #L217140.  v1:= 0I;
  #L217142.  v2:= 0I;
  #L217144.  if v1 >= v0 then goto L2171d2;
  #L217148.  call temp:= `getDirectory$okio`(v11) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L21714e.  v3:= temp @kind object;
  #L217150.  v4:= v0 + v1 @kind int;
  #L217154.  v7:= v3[v4];
  #L217158.  call temp:= `getDirectory$okio`(v11) @signature `Li/w;.getDirectory$okio:()[I` @kind virtual;
  #L21715e.  v3:= temp @kind object;
  #L217160.  v3:= v3[v1];
  #L217164.  call temp:= `getSegments$okio`(v11) @signature `Li/w;.getSegments$okio:()[[B` @kind virtual;
  #L21716a.  v4:= temp @kind object;
  #L21716c.  v6:= v4[v1] @kind object;
  #L217170.  v2:= v3 - v2 @kind int;
  #L217174.  v4:= new `i.u`;
  #L217178.  v8:= v7 + v2 @kind int;
  #L21717c.  v9:= 1I;
  #L21717e.  v10:= 0I;
  #L217180.  v5:= v4 @kind object;
  #L217182.  call `<init>`(v5, v6, v7, v8, v9, v10) @signature `Li/u;.<init>:([BIIZZ)V` @kind direct;
  #L217188.  v2:= v12.`i.e.f` @type ^`i.u` @kind object;
  #L21718c.  if v2 != 0 then goto L2171a6;
  #L217190.  v4.`i.u.g` @type ^`i.u` := v4 @kind object;
  #L217194.  v2:= v4.`i.u.g` @type ^`i.u` @kind object;
  #L217198.  v4.`i.u.f` @type ^`i.u` := v2 @kind object;
  #L21719c.  v2:= v4.`i.u.f` @type ^`i.u` @kind object;
  #L2171a0.  v12.`i.e.f` @type ^`i.u` := v2 @kind object;
  #L2171a4.  goto L2171ba;
  #L2171a6.  v5:= 0I;
  #L2171a8.  if v2 == 0 then goto L2171ca;
  #L2171ac.  v2:= v2.`i.u.g` @type ^`i.u` @kind object;
  #L2171b0.  if v2 == 0 then goto L2171c2;
  #L2171b4.  call temp:= `push`(v2, v4) @signature `Li/u;.push:(Li/u;)Li/u;` @kind virtual;
  #L2171ba.  v1:= v1 + 1;
  #L2171be.  v2:= v3;
  #L2171c0.  goto L217144;
  #L2171c2.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L2171c8.  throw v5;
  #L2171ca.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L2171d0.  throw v5;
  #L2171d2.  call temp:= `size`(v12) @signature `Li/e;.size:()J` @kind virtual;
  #L2171d8.  v0:= temp @kind wide;
  #L2171da.  call temp:= `size`(v11) @signature `Li/h;.size:()I` @kind virtual;
  #L2171e0.  v2:= temp;
  #L2171e2.  v2:= (`long`) v2 @kind i2l;
  #L2171e4.  v0:= v0 + v2 @kind long;
  #L2171e6.  call `setSize$okio`(v12, v0) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L2171ec.  return @kind void;
}
