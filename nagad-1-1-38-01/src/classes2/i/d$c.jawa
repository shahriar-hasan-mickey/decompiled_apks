record `i.d$c` @kind class @AccessFlag PUBLIC_FINAL extends `i.x` @kind interface {
  `i.d` `i.d$c.f` @AccessFlag FINAL_SYNTHETIC;
  `i.x` `i.d$c.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`i.d$c` v0 @kind this, `i.d` v1 @kind object, `i.x` v2 @kind object) @signature `Li/d$c;.<init>:(Li/d;Li/x;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L20fa30.  v0.`i.d$c.f` @type ^`i.d` := v1 @kind object;
  #L20fa34.  v0.`i.d$c.g` @type ^`i.x` := v2 @kind object;
  #L20fa38.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L20fa3e.  return @kind void;
}
procedure `void` `close`(`i.d$c` v3 @kind this) @signature `Li/d$c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L20fa50.  v0:= v3.`i.d$c.f` @type ^`i.d` @kind object;
  #L20fa54.  call `enter`(v0) @signature `Li/d;.enter:()V` @kind virtual;
  #L20fa5a.  v0:= v3.`i.d$c.g` @type ^`i.x` @kind object;
  #L20fa5e.  call `close`(v0) @signature `Li/x;.close:()V` @kind interface;
  #L20fa64.  v0:= 1I;
  #L20fa66.  v1:= v3.`i.d$c.f` @type ^`i.d` @kind object;
  #L20fa6a.  call `exit$okio`(v1, v0) @signature `Li/d;.exit$okio:(Z)V` @kind virtual;
  #L20fa70.  return @kind void;
  #L20fa72.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L20fa74.  goto L20fa86;
  #L20fa76.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L20fa78.  v1:= v3.`i.d$c.f` @type ^`i.d` @kind object;
  #L20fa7c.  call temp:= `exit$okio`(v1, v0) @signature `Li/d;.exit$okio:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L20fa82.  v0:= temp @kind object;
  #L20fa84.  throw v0;
  #L20fa86.  v1:= v3.`i.d$c.f` @type ^`i.d` @kind object;
  #L20fa8a.  v2:= 0I;
  #L20fa8c.  call `exit$okio`(v1, v2) @signature `Li/d;.exit$okio:(Z)V` @kind virtual;
  #L20fa92.  throw v0;
  catch `java.io.IOException` @[L20fa5a..L20fa64] goto L20fa76;
  catch `java.lang.Throwable` @[L20fa5a..L20fa64] goto L20fa72;
  catch `java.lang.Throwable` @[L20fa78..L20fa86] goto L20fa72;
}
procedure `void` `flush`(`i.d$c` v3 @kind this) @signature `Li/d$c;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L20fabc.  v0:= v3.`i.d$c.f` @type ^`i.d` @kind object;
  #L20fac0.  call `enter`(v0) @signature `Li/d;.enter:()V` @kind virtual;
  #L20fac6.  v0:= v3.`i.d$c.g` @type ^`i.x` @kind object;
  #L20faca.  call `flush`(v0) @signature `Li/x;.flush:()V` @kind interface;
  #L20fad0.  v0:= 1I;
  #L20fad2.  v1:= v3.`i.d$c.f` @type ^`i.d` @kind object;
  #L20fad6.  call `exit$okio`(v1, v0) @signature `Li/d;.exit$okio:(Z)V` @kind virtual;
  #L20fadc.  return @kind void;
  #L20fade.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L20fae0.  goto L20faf2;
  #L20fae2.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L20fae4.  v1:= v3.`i.d$c.f` @type ^`i.d` @kind object;
  #L20fae8.  call temp:= `exit$okio`(v1, v0) @signature `Li/d;.exit$okio:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L20faee.  v0:= temp @kind object;
  #L20faf0.  throw v0;
  #L20faf2.  v1:= v3.`i.d$c.f` @type ^`i.d` @kind object;
  #L20faf6.  v2:= 0I;
  #L20faf8.  call `exit$okio`(v1, v2) @signature `Li/d;.exit$okio:(Z)V` @kind virtual;
  #L20fafe.  throw v0;
  catch `java.io.IOException` @[L20fac6..L20fad0] goto L20fae2;
  catch `java.lang.Throwable` @[L20fac6..L20fad0] goto L20fade;
  catch `java.lang.Throwable` @[L20fae4..L20faf2] goto L20fade;
}
procedure `i.a0` `timeout`(`i.d$c` v1 @kind this) @signature `Li/d$c;.timeout:()Li/a0;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L20fa14.  call temp:= `timeout`(v1) @signature `Li/d$c;.timeout:()Li/d;` @kind virtual;
  #L20fa1a.  v0:= temp @kind object;
  #L20fa1c.  return v0 @kind object;
}
procedure `i.d` `timeout`(`i.d$c` v1 @kind this) @signature `Li/d$c;.timeout:()Li/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20f9fc.  v0:= v1.`i.d$c.f` @type ^`i.d` @kind object;
  #L20fa00.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`i.d$c` v2 @kind this) @signature `Li/d$c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L20f9b8.  v0:= new `java.lang.StringBuilder`;
  #L20f9bc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L20f9c2.  v1:= "AsyncTimeout.sink(" @kind object;
  #L20f9c6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20f9cc.  v1:= v2.`i.d$c.g` @type ^`i.x` @kind object;
  #L20f9d0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20f9d6.  v1:= 41I;
  #L20f9da.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L20f9e0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L20f9e6.  v0:= temp @kind object;
  #L20f9e8.  return v0 @kind object;
}
procedure `void` `write`(`i.d$c` v7 @kind this, `i.e` v8 @kind object, `long` v9 ) @signature `Li/d$c;.write:(Li/e;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L20fb28.  v0:= "source" @kind object;
  #L20fb2c.  call `checkParameterIsNotNull`(v8, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L20fb32.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L20fb38.  v1:= temp @kind wide;
  #L20fb3a.  v3:= 0L;
  #L20fb3e.  v5:= v9 @kind wide;
  #L20fb40.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Li/c;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L20fb46.  v0:= 0L;
  #L20fb4a.  v2:= lcmp(v9, v0);
  #L20fb4e.  if v2 <= 0 then goto L20fbe4;
  #L20fb52.  v2:= v8.`i.e.f` @type ^`i.u` @kind object;
  #L20fb56.  v3:= 0I;
  #L20fb58.  if v2 == 0 then goto L20fbdc;
  #L20fb5c.  v4:= 65536I;
  #L20fb60.  v4:= (`long`) v4 @kind i2l;
  #L20fb62.  v6:= lcmp(v0, v4);
  #L20fb66.  if v6 >= 0 then goto L20fb96;
  #L20fb6a.  v4:= v2.`i.u.c` @type ^`int`;
  #L20fb6e.  v5:= v2.`i.u.b` @type ^`int`;
  #L20fb72.  v4:= v4 - v5 @kind int;
  #L20fb74.  v4:= (`long`) v4 @kind i2l;
  #L20fb76.  v0:= v0 + v4 @kind long;
  #L20fb78.  v4:= lcmp(v0, v9);
  #L20fb7c.  if v4 < 0 then goto L20fb84;
  #L20fb80.  v0:= v9 @kind wide;
  #L20fb82.  goto L20fb96;
  #L20fb84.  v2:= v2.`i.u.f` @type ^`i.u` @kind object;
  #L20fb88.  if v2 == 0 then goto L20fb8e;
  #L20fb8c.  goto L20fb5c;
  #L20fb8e.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L20fb94.  throw v3;
  #L20fb96.  v2:= 0I;
  #L20fb98.  v3:= v7.`i.d$c.f` @type ^`i.d` @kind object;
  #L20fb9c.  call `enter`(v3) @signature `Li/d;.enter:()V` @kind virtual;
  #L20fba2.  v3:= v7.`i.d$c.g` @type ^`i.x` @kind object;
  #L20fba6.  call `write`(v3, v8, v0) @signature `Li/x;.write:(Li/e;J)V` @kind interface;
  #L20fbac.  v9:= v9 - v0 @kind long;
  #L20fbae.  v0:= 1I;
  #L20fbb0.  v1:= v7.`i.d$c.f` @type ^`i.d` @kind object;
  #L20fbb4.  call `exit$okio`(v1, v0) @signature `Li/d;.exit$okio:(Z)V` @kind virtual;
  #L20fbba.  goto L20fb46;
  #L20fbbc.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L20fbbe.  goto L20fbd0;
  #L20fbc0.  v8:= Exception @type ^`java.io.IOException` @kind object;
  #L20fbc2.  v9:= v7.`i.d$c.f` @type ^`i.d` @kind object;
  #L20fbc6.  call temp:= `exit$okio`(v9, v8) @signature `Li/d;.exit$okio:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L20fbcc.  v8:= temp @kind object;
  #L20fbce.  throw v8;
  #L20fbd0.  v9:= v7.`i.d$c.f` @type ^`i.d` @kind object;
  #L20fbd4.  call `exit$okio`(v9, v2) @signature `Li/d;.exit$okio:(Z)V` @kind virtual;
  #L20fbda.  throw v8;
  #L20fbdc.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L20fbe2.  throw v3;
  #L20fbe4.  return @kind void;
  catch `java.io.IOException` @[L20fba2..L20fbac] goto L20fbc0;
  catch `java.lang.Throwable` @[L20fba2..L20fbac] goto L20fbbc;
  catch `java.lang.Throwable` @[L20fbc2..L20fbd0] goto L20fbbc;
}
