record `i.f` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE extends `i.x` @kind interface, `java.nio.channels.WritableByteChannel` @kind interface {
}
procedure `i.e` `buffer`() @signature `Li/f;.buffer:()Li/e;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `i.f` `emit`() @signature `Li/f;.emit:()Li/f;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `i.f` `emitCompleteSegments`() @signature `Li/f;.emitCompleteSegments:()Li/f;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `flush`() @signature `Li/f;.flush:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `i.e` `getBuffer`() @signature `Li/f;.getBuffer:()Li/e;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.io.OutputStream` `outputStream`() @signature `Li/f;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `i.f` `write`(`i.h` v0 @kind object) @signature `Li/f;.write:(Li/h;)Li/f;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `i.f` `write`(`byte`[] v0 @kind object) @signature `Li/f;.write:([B)Li/f;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `i.f` `write`(`byte`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Li/f;.write:([BII)Li/f;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `writeAll`(`i.z` v0 @kind object) @signature `Li/f;.writeAll:(Li/z;)J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `i.f` `writeByte`(`int` v0 ) @signature `Li/f;.writeByte:(I)Li/f;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `i.f` `writeDecimalLong`(`long` v0 ) @signature `Li/f;.writeDecimalLong:(J)Li/f;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `i.f` `writeHexadecimalUnsignedLong`(`long` v0 ) @signature `Li/f;.writeHexadecimalUnsignedLong:(J)Li/f;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `i.f` `writeInt`(`int` v0 ) @signature `Li/f;.writeInt:(I)Li/f;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `i.f` `writeShort`(`int` v0 ) @signature `Li/f;.writeShort:(I)Li/f;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `i.f` `writeUtf8`(`java.lang.String` v0 @kind object) @signature `Li/f;.writeUtf8:(Ljava/lang/String;)Li/f;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
