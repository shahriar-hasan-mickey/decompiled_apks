record `i.r` @kind class @AccessFlag FINAL extends `i.x` @kind interface {
  `java.io.OutputStream` `i.r.f` @AccessFlag PRIVATE_FINAL;
  `i.a0` `i.r.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`i.r` v1 @kind this, `java.io.OutputStream` v2 @kind object, `i.a0` v3 @kind object) @signature `Li/r;.<init>:(Ljava/io/OutputStream;Li/a0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L21536c.  v0:= "out" @kind object;
  #L215370.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L215376.  v0:= "timeout" @kind object;
  #L21537a.  call `checkParameterIsNotNull`(v3, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L215380.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L215386.  v1.`i.r.f` @type ^`java.io.OutputStream` := v2 @kind object;
  #L21538a.  v1.`i.r.g` @type ^`i.a0` := v3 @kind object;
  #L21538e.  return @kind void;
}
procedure `void` `close`(`i.r` v1 @kind this) @signature `Li/r;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2153a0.  v0:= v1.`i.r.f` @type ^`java.io.OutputStream` @kind object;
  #L2153a4.  call `close`(v0) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L2153aa.  return @kind void;
}
procedure `void` `flush`(`i.r` v1 @kind this) @signature `Li/r;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2153bc.  v0:= v1.`i.r.f` @type ^`java.io.OutputStream` @kind object;
  #L2153c0.  call `flush`(v0) @signature `Ljava/io/OutputStream;.flush:()V` @kind virtual;
  #L2153c6.  return @kind void;
}
procedure `i.a0` `timeout`(`i.r` v1 @kind this) @signature `Li/r;.timeout:()Li/a0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L215354.  v0:= v1.`i.r.g` @type ^`i.a0` @kind object;
  #L215358.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`i.r` v2 @kind this) @signature `Li/r;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L215310.  v0:= new `java.lang.StringBuilder`;
  #L215314.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L21531a.  v1:= "sink(" @kind object;
  #L21531e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L215324.  v1:= v2.`i.r.f` @type ^`java.io.OutputStream` @kind object;
  #L215328.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21532e.  v1:= 41I;
  #L215332.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L215338.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21533e.  v0:= temp @kind object;
  #L215340.  return v0 @kind object;
}
procedure `void` `write`(`i.r` v7 @kind this, `i.e` v8 @kind object, `long` v9 ) @signature `Li/r;.write:(Li/e;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2153d8.  v0:= "source" @kind object;
  #L2153dc.  call `checkParameterIsNotNull`(v8, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2153e2.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L2153e8.  v1:= temp @kind wide;
  #L2153ea.  v3:= 0L;
  #L2153ee.  v5:= v9 @kind wide;
  #L2153f0.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Li/c;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2153f6.  v0:= 0L;
  #L2153fa.  v2:= lcmp(v9, v0);
  #L2153fe.  if v2 <= 0 then goto L215488;
  #L215402.  v0:= v7.`i.r.g` @type ^`i.a0` @kind object;
  #L215406.  call `throwIfReached`(v0) @signature `Li/a0;.throwIfReached:()V` @kind virtual;
  #L21540c.  v0:= v8.`i.e.f` @type ^`i.u` @kind object;
  #L215410.  if v0 == 0 then goto L21547e;
  #L215414.  v1:= v0.`i.u.c` @type ^`int`;
  #L215418.  v2:= v0.`i.u.b` @type ^`int`;
  #L21541c.  v1:= v1 - v2 @kind int;
  #L21541e.  v1:= (`long`) v1 @kind i2l;
  #L215420.  call temp:= `min`(v9, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L215426.  v1:= temp @kind wide;
  #L215428.  v2:= (`int`) v1 @kind l2i;
  #L21542a.  v1:= v7.`i.r.f` @type ^`java.io.OutputStream` @kind object;
  #L21542e.  v3:= v0.`i.u.a` @type ^`byte`[] @kind object;
  #L215432.  v4:= v0.`i.u.b` @type ^`int`;
  #L215436.  call `write`(v1, v3, v4, v2) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L21543c.  v1:= v0.`i.u.b` @type ^`int`;
  #L215440.  v1:= v1 + v2 @kind int;
  #L215442.  v0.`i.u.b` @type ^`int` := v1;
  #L215446.  v1:= (`long`) v2 @kind i2l;
  #L215448.  v9:= v9 - v1 @kind long;
  #L21544a.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L215450.  v3:= temp @kind wide;
  #L215452.  v3:= v3 - v1 @kind long;
  #L215454.  call `setSize$okio`(v8, v3) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L21545a.  v1:= v0.`i.u.b` @type ^`int`;
  #L21545e.  v2:= v0.`i.u.c` @type ^`int`;
  #L215462.  if v1 != v2 then goto L2153f6;
  #L215466.  call temp:= `pop`(v0) @signature `Li/u;.pop:()Li/u;` @kind virtual;
  #L21546c.  v1:= temp @kind object;
  #L21546e.  v8.`i.e.f` @type ^`i.u` := v1 @kind object;
  #L215472.  v1:= `@@i.v.c` @type ^`i.v` @kind object;
  #L215476.  call `recycle`(v1, v0) @signature `Li/v;.recycle:(Li/u;)V` @kind virtual;
  #L21547c.  goto L2153f6;
  #L21547e.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L215484.  v8:= 0I;
  #L215486.  throw v8;
  #L215488.  return @kind void;
}
