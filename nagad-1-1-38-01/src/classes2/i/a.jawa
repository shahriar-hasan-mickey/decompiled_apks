record `i.a` @kind class @AccessFlag PUBLIC_FINAL {
}
global `byte`[] `@@i.a.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Li/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L20f26c.  v0:= `@@i.h.j` @type ^`i.h$a` @kind object;
  #L20f270.  v1:= "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" @kind object;
  #L20f274.  call temp:= `encodeUtf8`(v0, v1) @signature `Li/h$a;.encodeUtf8:(Ljava/lang/String;)Li/h;` @kind virtual;
  #L20f27a.  v0:= temp @kind object;
  #L20f27c.  call temp:= `getData$okio`(v0) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L20f282.  v0:= temp @kind object;
  #L20f284.  `@@i.a.a` @type ^`byte`[] := v0 @kind object;
  #L20f288.  v0:= `@@i.h.j` @type ^`i.h$a` @kind object;
  #L20f28c.  v1:= "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_" @kind object;
  #L20f290.  call temp:= `encodeUtf8`(v0, v1) @signature `Li/h$a;.encodeUtf8:(Ljava/lang/String;)Li/h;` @kind virtual;
  #L20f296.  v0:= temp @kind object;
  #L20f298.  call temp:= `getData$okio`(v0) @signature `Li/h;.getData$okio:()[B` @kind virtual;
  #L20f29e.  return @kind void;
}
procedure `byte`[] `decodeBase64ToArray`(`java.lang.String` v14 @kind object) @signature `Li/a;.decodeBase64ToArray:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L20ef10.  v0:= "$this$decodeBase64ToArray" @kind object;
  #L20ef14.  call `checkParameterIsNotNull`(v14, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L20ef1a.  call temp:= `length`(v14) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L20ef20.  v0:= temp;
  #L20ef22.  v1:= 9I;
  #L20ef26.  v2:= 32I;
  #L20ef2a.  v3:= 13I;
  #L20ef2e.  v4:= 10I;
  #L20ef32.  if v0 <= 0 then goto L20ef62;
  #L20ef36.  v5:= v0 + -1;
  #L20ef3a.  call temp:= `charAt`(v14, v5) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L20ef40.  v5:= temp;
  #L20ef42.  v6:= 61I;
  #L20ef46.  if v5 == v6 then goto L20ef5c;
  #L20ef4a.  if v5 == v4 then goto L20ef5c;
  #L20ef4e.  if v5 == v3 then goto L20ef5c;
  #L20ef52.  if v5 == v2 then goto L20ef5c;
  #L20ef56.  if v5 == v1 then goto L20ef5c;
  #L20ef5a.  goto L20ef62;
  #L20ef5c.  v0:= v0 + -1;
  #L20ef60.  goto L20ef22;
  #L20ef62.  v5:= (`long`) v0 @kind i2l;
  #L20ef64.  v7:= 6L;
  #L20ef68.  v5:= v5 * v7 @kind long;
  #L20ef6c.  v7:= 8L;
  #L20ef70.  v5:= v5 / v7 @kind long;
  #L20ef72.  v6:= (`int`) v5 @kind l2i;
  #L20ef74.  v5:= new `byte`[v6];
  #L20ef78.  v6:= 0I;
  #L20ef7a.  v7:= 0I;
  #L20ef7c.  v8:= 0I;
  #L20ef7e.  v9:= 0I;
  #L20ef80.  v10:= 0I;
  #L20ef82.  if v6 >= v0 then goto L20f058;
  #L20ef86.  call temp:= `charAt`(v14, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L20ef8c.  v11:= temp;
  #L20ef8e.  v12:= 90I;
  #L20ef92.  v13:= 65I;
  #L20ef96.  if v13 <= v11 then goto L20ef9c;
  #L20ef9a.  goto L20efa6;
  #L20ef9c.  if v12 < v11 then goto L20efa6;
  #L20efa0.  v11:= v11 + -65;
  #L20efa4.  goto L20f018;
  #L20efa6.  v12:= 122I;
  #L20efaa.  v13:= 97I;
  #L20efae.  if v13 <= v11 then goto L20efb4;
  #L20efb2.  goto L20efbe;
  #L20efb4.  if v12 < v11 then goto L20efbe;
  #L20efb8.  v11:= v11 + -71;
  #L20efbc.  goto L20f018;
  #L20efbe.  v12:= 57I;
  #L20efc2.  v13:= 48I;
  #L20efc6.  if v13 <= v11 then goto L20efcc;
  #L20efca.  goto L20efd6;
  #L20efcc.  if v12 < v11 then goto L20efd6;
  #L20efd0.  v11:= v11 + 4;
  #L20efd4.  goto L20f018;
  #L20efd6.  v12:= 43I;
  #L20efda.  if v11 == v12 then goto L20f014;
  #L20efde.  v12:= 45I;
  #L20efe2.  if v11 != v12 then goto L20efe8;
  #L20efe6.  goto L20f014;
  #L20efe8.  v12:= 47I;
  #L20efec.  if v11 == v12 then goto L20f00e;
  #L20eff0.  v12:= 95I;
  #L20eff4.  if v11 != v12 then goto L20effa;
  #L20eff8.  goto L20f00e;
  #L20effa.  if v11 == v4 then goto L20f052;
  #L20effe.  if v11 == v3 then goto L20f052;
  #L20f002.  if v11 == v2 then goto L20f052;
  #L20f006.  if v11 != v1 then goto L20f00c;
  #L20f00a.  goto L20f052;
  #L20f00c.  return v10 @kind object;
  #L20f00e.  v11:= 63I;
  #L20f012.  goto L20f018;
  #L20f014.  v11:= 62I;
  #L20f018.  v8:= v8 ^< 6;
  #L20f01c.  v8:= v8 ^| v11 @kind int;
  #L20f01e.  v7:= v7 + 1;
  #L20f022.  v10:= v7 %% 4;
  #L20f026.  if v10 != 0 then goto L20f052;
  #L20f02a.  v10:= v9 + 1;
  #L20f02e.  v11:= v8 ^> 16;
  #L20f032.  v11:= (`byte`) v11 @kind i2b;
  #L20f034.  v5[v9]:= v11 @kind byte;
  #L20f038.  v9:= v10 + 1;
  #L20f03c.  v11:= v8 ^> 8;
  #L20f040.  v11:= (`byte`) v11 @kind i2b;
  #L20f042.  v5[v10]:= v11 @kind byte;
  #L20f046.  v10:= v9 + 1;
  #L20f04a.  v11:= (`byte`) v8 @kind i2b;
  #L20f04c.  v5[v9]:= v11 @kind byte;
  #L20f050.  v9:= v10;
  #L20f052.  v6:= v6 + 1;
  #L20f056.  goto L20ef80;
  #L20f058.  v7:= v7 %% 4;
  #L20f05c.  v14:= 1I;
  #L20f05e.  if v7 == v14 then goto L20f0c2;
  #L20f062.  v14:= 2I;
  #L20f064.  if v7 == v14 then goto L20f092;
  #L20f068.  v14:= 3I;
  #L20f06a.  if v7 == v14 then goto L20f070;
  #L20f06e.  goto L20f0a6;
  #L20f070.  v14:= v8 ^< 6;
  #L20f074.  v0:= v9 + 1;
  #L20f078.  v1:= v14 ^> 16;
  #L20f07c.  v1:= (`byte`) v1 @kind i2b;
  #L20f07e.  v5[v9]:= v1 @kind byte;
  #L20f082.  v9:= v0 + 1;
  #L20f086.  v14:= v14 ^> 8;
  #L20f08a.  v14:= (`byte`) v14 @kind i2b;
  #L20f08c.  v5[v0]:= v14 @kind byte;
  #L20f090.  goto L20f0a6;
  #L20f092.  v14:= v8 ^< 12;
  #L20f096.  v0:= v9 + 1;
  #L20f09a.  v14:= v14 ^> 16;
  #L20f09e.  v14:= (`byte`) v14 @kind i2b;
  #L20f0a0.  v5[v9]:= v14 @kind byte;
  #L20f0a4.  v9:= v0;
  #L20f0a6.  v14:= length @variable v5;
  #L20f0a8.  if v9 != v14 then goto L20f0ae;
  #L20f0ac.  return v5 @kind object;
  #L20f0ae.  call temp:= `copyOf`(v5, v9) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L20f0b4.  v14:= temp @kind object;
  #L20f0b6.  v0:= "java.util.Arrays.copyOf(this, newSize)" @kind object;
  #L20f0ba.  call `checkExpressionValueIsNotNull`(v14, v0) @signature `Lkotlin/v/c/i;.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L20f0c0.  return v14 @kind object;
  #L20f0c2.  return v10 @kind object;
}
procedure `java.lang.String` `encodeBase64`(`byte`[] v10 @kind object, `byte`[] v11 @kind object) @signature `Li/a;.encodeBase64:([B[B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L20f0fc.  v0:= "$this$encodeBase64" @kind object;
  #L20f100.  call `checkParameterIsNotNull`(v10, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L20f106.  v0:= "map" @kind object;
  #L20f10a.  call `checkParameterIsNotNull`(v11, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L20f110.  v0:= length @variable v10;
  #L20f112.  v1:= 2I;
  #L20f114.  v0:= v0 + v1 @kind int;
  #L20f116.  v0:= v0 / 3;
  #L20f11a.  v0:= v0 * 4;
  #L20f11e.  v0:= new `byte`[v0];
  #L20f122.  v2:= length @variable v10;
  #L20f124.  v3:= length @variable v10;
  #L20f126.  v3:= v3 %% 3;
  #L20f12a.  v2:= v2 - v3 @kind int;
  #L20f12c.  v3:= 0I;
  #L20f12e.  v4:= 0I;
  #L20f130.  if v3 >= v2 then goto L20f1ac;
  #L20f134.  v5:= v3 + 1;
  #L20f138.  v3:= v10[v3] @kind byte;
  #L20f13c.  v6:= v5 + 1;
  #L20f140.  v5:= v10[v5] @kind byte;
  #L20f144.  v7:= v6 + 1;
  #L20f148.  v6:= v10[v6] @kind byte;
  #L20f14c.  v8:= v4 + 1;
  #L20f150.  v9:= v3 ^& 255;
  #L20f154.  v9:= v9 ^> v1 @kind int;
  #L20f156.  v9:= v11[v9] @kind byte;
  #L20f15a.  v0[v4]:= v9 @kind byte;
  #L20f15e.  v4:= v8 + 1;
  #L20f162.  v3:= v3 ^& 3;
  #L20f166.  v3:= v3 ^< 4;
  #L20f16a.  v9:= v5 ^& 255;
  #L20f16e.  v9:= v9 ^> 4;
  #L20f172.  v3:= v3 ^| v9 @kind int;
  #L20f174.  v3:= v11[v3] @kind byte;
  #L20f178.  v0[v8]:= v3 @kind byte;
  #L20f17c.  v3:= v4 + 1;
  #L20f180.  v5:= v5 ^& 15;
  #L20f184.  v5:= v5 ^< v1 @kind int;
  #L20f186.  v8:= v6 ^& 255;
  #L20f18a.  v8:= v8 ^> 6;
  #L20f18e.  v5:= v5 ^| v8 @kind int;
  #L20f190.  v5:= v11[v5] @kind byte;
  #L20f194.  v0[v4]:= v5 @kind byte;
  #L20f198.  v4:= v3 + 1;
  #L20f19c.  v5:= v6 ^& 63;
  #L20f1a0.  v5:= v11[v5] @kind byte;
  #L20f1a4.  v0[v3]:= v5 @kind byte;
  #L20f1a8.  v3:= v7;
  #L20f1aa.  goto L20f130;
  #L20f1ac.  v5:= length @variable v10;
  #L20f1ae.  v5:= v5 - v2 @kind int;
  #L20f1b0.  v2:= 61I;
  #L20f1b4.  v6:= 1I;
  #L20f1b6.  if v5 == v6 then goto L20f216;
  #L20f1ba.  if v5 == v1 then goto L20f1c0;
  #L20f1be.  goto L20f250;
  #L20f1c0.  v5:= v3 + 1;
  #L20f1c4.  v3:= v10[v3] @kind byte;
  #L20f1c8.  v10:= v10[v5] @kind byte;
  #L20f1cc.  v5:= v4 + 1;
  #L20f1d0.  v6:= v3 ^& 255;
  #L20f1d4.  v6:= v6 ^> v1 @kind int;
  #L20f1d6.  v6:= v11[v6] @kind byte;
  #L20f1da.  v0[v4]:= v6 @kind byte;
  #L20f1de.  v4:= v5 + 1;
  #L20f1e2.  v3:= v3 ^& 3;
  #L20f1e6.  v3:= v3 ^< 4;
  #L20f1ea.  v6:= v10 ^& 255;
  #L20f1ee.  v6:= v6 ^> 4;
  #L20f1f2.  v3:= v3 ^| v6 @kind int;
  #L20f1f4.  v3:= v11[v3] @kind byte;
  #L20f1f8.  v0[v5]:= v3 @kind byte;
  #L20f1fc.  v3:= v4 + 1;
  #L20f200.  v10:= v10 ^& 15;
  #L20f204.  v10:= v10 ^< v1 @kind int;
  #L20f206.  v10:= v11[v10] @kind byte;
  #L20f20a.  v0[v4]:= v10 @kind byte;
  #L20f20e.  v10:= (`byte`) v2 @kind i2b;
  #L20f210.  v0[v3]:= v10 @kind byte;
  #L20f214.  goto L20f250;
  #L20f216.  v10:= v10[v3] @kind byte;
  #L20f21a.  v3:= v4 + 1;
  #L20f21e.  v5:= v10 ^& 255;
  #L20f222.  v1:= v5 ^> 2;
  #L20f226.  v1:= v11[v1] @kind byte;
  #L20f22a.  v0[v4]:= v1 @kind byte;
  #L20f22e.  v1:= v3 + 1;
  #L20f232.  v10:= v10 ^& 3;
  #L20f236.  v10:= v10 ^< 4;
  #L20f23a.  v10:= v11[v10] @kind byte;
  #L20f23e.  v0[v3]:= v10 @kind byte;
  #L20f242.  v10:= v1 + 1;
  #L20f246.  v11:= (`byte`) v2 @kind i2b;
  #L20f248.  v0[v1]:= v11 @kind byte;
  #L20f24c.  v0[v10]:= v11 @kind byte;
  #L20f250.  call temp:= `toUtf8String`(v0) @signature `Li/b;.toUtf8String:([B)Ljava/lang/String;` @kind static;
  #L20f256.  v10:= temp @kind object;
  #L20f258.  return v10 @kind object;
}
procedure `java.lang.String` `encodeBase64$default`(`byte`[] v0 @kind object, `byte`[] v1 @kind object, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Li/a;.encodeBase64$default:([B[BILjava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L20f0d4.  v2:= v2 ^& 1;
  #L20f0d8.  if v2 == 0 then goto L20f0e0;
  #L20f0dc.  v1:= `@@i.a.a` @type ^`byte`[] @kind object;
  #L20f0e0.  call temp:= `encodeBase64`(v0, v1) @signature `Li/a;.encodeBase64:([B[B)Ljava/lang/String;` @kind static;
  #L20f0e6.  v0:= temp @kind object;
  #L20f0e8.  return v0 @kind object;
}
