record `i.e$a` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.InputStream` @kind class {
  `i.e` `i.e$a.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`i.e$a` v0 @kind this, `i.e` v1 @kind object) @signature `Li/e$a;.<init>:(Li/e;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L210140.  v0.`i.e$a.f` @type ^`i.e` := v1 @kind object;
  #L210144.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L21014a.  return @kind void;
}
procedure `int` `available`(`i.e$a` v4 @kind this) @signature `Li/e$a;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L210070.  v0:= v4.`i.e$a.f` @type ^`i.e` @kind object;
  #L210074.  call temp:= `size`(v0) @signature `Li/e;.size:()J` @kind virtual;
  #L21007a.  v0:= temp @kind wide;
  #L21007c.  v2:= 2147483647I;
  #L210082.  v2:= (`long`) v2 @kind i2l;
  #L210084.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L21008a.  v0:= temp @kind wide;
  #L21008c.  v1:= (`int`) v0 @kind l2i;
  #L21008e.  return v1;
}
procedure `void` `close`(`i.e$a` v0 @kind this) @signature `Li/e$a;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L21015c.  return @kind void;
}
procedure `int` `read`(`i.e$a` v5 @kind this) @signature `Li/e$a;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2100a0.  v0:= v5.`i.e$a.f` @type ^`i.e` @kind object;
  #L2100a4.  call temp:= `size`(v0) @signature `Li/e;.size:()J` @kind virtual;
  #L2100aa.  v0:= temp @kind wide;
  #L2100ac.  v2:= 0L;
  #L2100b0.  v4:= lcmp(v0, v2);
  #L2100b4.  if v4 <= 0 then goto L2100ca;
  #L2100b8.  v0:= v5.`i.e$a.f` @type ^`i.e` @kind object;
  #L2100bc.  call temp:= `readByte`(v0) @signature `Li/e;.readByte:()B` @kind virtual;
  #L2100c2.  v0:= temp;
  #L2100c4.  v0:= v0 ^& 255;
  #L2100c8.  goto L2100cc;
  #L2100ca.  v0:= -1I;
  #L2100cc.  return v0;
}
procedure `int` `read`(`i.e$a` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Li/e$a;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2100e0.  v0:= "sink" @kind object;
  #L2100e4.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2100ea.  v0:= v1.`i.e$a.f` @type ^`i.e` @kind object;
  #L2100ee.  call temp:= `read`(v0, v2, v3, v4) @signature `Li/e;.read:([BII)I` @kind virtual;
  #L2100f4.  v2:= temp;
  #L2100f6.  return v2;
}
procedure `java.lang.String` `toString`(`i.e$a` v2 @kind this) @signature `Li/e$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L210108.  v0:= new `java.lang.StringBuilder`;
  #L21010c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L210112.  v1:= v2.`i.e$a.f` @type ^`i.e` @kind object;
  #L210116.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21011c.  v1:= ".inputStream()" @kind object;
  #L210120.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L210126.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21012c.  v0:= temp @kind object;
  #L21012e.  return v0 @kind object;
}
