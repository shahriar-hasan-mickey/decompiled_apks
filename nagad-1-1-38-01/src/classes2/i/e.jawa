record `i.e` @kind class @AccessFlag PUBLIC_FINAL extends `i.g` @kind interface, `i.f` @kind interface, `java.lang.Cloneable` @kind interface, `java.nio.channels.ByteChannel` @kind interface {
  `i.u` `i.e.f` @AccessFlag PUBLIC;
  `long` `i.e.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`i.e` v0 @kind this) @signature `Li/e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L212880.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L212886.  return @kind void;
}
procedure `i.e` `buffer`(`i.e` v0 @kind this) @signature `Li/e;.buffer:()Li/e;` @AccessFlag PUBLIC {
    temp;

  #L2115bc.  return v0 @kind object;
}
procedure `void` `clear`(`i.e` v2 @kind this) @signature `Li/e;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L212898.  call temp:= `size`(v2) @signature `Li/e;.size:()J` @kind virtual;
  #L21289e.  v0:= temp @kind wide;
  #L2128a0.  call `skip`(v2, v0) @signature `Li/e;.skip:(J)V` @kind virtual;
  #L2128a6.  return @kind void;
}
procedure `i.e` `clone`(`i.e` v6 @kind this) @signature `Li/e;.clone:()Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2115d0.  v0:= new `i.e`;
  #L2115d4.  call `<init>`(v0) @signature `Li/e;.<init>:()V` @kind direct;
  #L2115da.  v1:= v6.`i.e.g` @type ^`long` @kind wide;
  #L2115de.  v3:= 0L;
  #L2115e2.  v5:= lcmp(v1, v3);
  #L2115e6.  if v5 != 0 then goto L2115ec;
  #L2115ea.  return v0 @kind object;
  #L2115ec.  v1:= v6.`i.e.f` @type ^`i.u` @kind object;
  #L2115f0.  v2:= 0I;
  #L2115f2.  if v1 == 0 then goto L21169c;
  #L2115f6.  call temp:= `sharedCopy`(v1) @signature `Li/u;.sharedCopy:()Li/u;` @kind virtual;
  #L2115fc.  v1:= temp @kind object;
  #L2115fe.  v0.`i.e.f` @type ^`i.u` := v1 @kind object;
  #L211602.  v1:= v0.`i.e.f` @type ^`i.u` @kind object;
  #L211606.  if v1 == 0 then goto L211694;
  #L21160a.  v1.`i.u.g` @type ^`i.u` := v1 @kind object;
  #L21160e.  if v1 == 0 then goto L21168c;
  #L211612.  if v1 == 0 then goto L211684;
  #L211616.  v3:= v1.`i.u.g` @type ^`i.u` @kind object;
  #L21161a.  v1.`i.u.f` @type ^`i.u` := v3 @kind object;
  #L21161e.  v1:= v6.`i.e.f` @type ^`i.u` @kind object;
  #L211622.  if v1 == 0 then goto L21167c;
  #L211626.  v1:= v1.`i.u.f` @type ^`i.u` @kind object;
  #L21162a.  v3:= v6.`i.e.f` @type ^`i.u` @kind object;
  #L21162e.  if v1 == v3 then goto L211672;
  #L211632.  v3:= v0.`i.e.f` @type ^`i.u` @kind object;
  #L211636.  if v3 == 0 then goto L21166a;
  #L21163a.  v3:= v3.`i.u.g` @type ^`i.u` @kind object;
  #L21163e.  if v3 == 0 then goto L211662;
  #L211642.  if v1 == 0 then goto L21165a;
  #L211646.  call temp:= `sharedCopy`(v1) @signature `Li/u;.sharedCopy:()Li/u;` @kind virtual;
  #L21164c.  v4:= temp @kind object;
  #L21164e.  call temp:= `push`(v3, v4) @signature `Li/u;.push:(Li/u;)Li/u;` @kind virtual;
  #L211654.  v1:= v1.`i.u.f` @type ^`i.u` @kind object;
  #L211658.  goto L21162a;
  #L21165a.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L211660.  throw v2;
  #L211662.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L211668.  throw v2;
  #L21166a.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L211670.  throw v2;
  #L211672.  v1:= v6.`i.e.g` @type ^`long` @kind wide;
  #L211676.  v0.`i.e.g` @type ^`long` := v1 @kind wide;
  #L21167a.  return v0 @kind object;
  #L21167c.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L211682.  throw v2;
  #L211684.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L21168a.  throw v2;
  #L21168c.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L211692.  throw v2;
  #L211694.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L21169a.  throw v2;
  #L21169c.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L2116a2.  throw v2;
}
procedure `java.lang.Object` `clone`(`i.e` v1 @kind this) @signature `Li/e;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L210b34.  call temp:= `clone`(v1) @signature `Li/e;.clone:()Li/e;` @kind virtual;
  #L210b3a.  v0:= temp @kind object;
  #L210b3c.  return v0 @kind object;
}
procedure `void` `close`(`i.e` v0 @kind this) @signature `Li/e;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L2128b8.  return @kind void;
}
procedure `long` `completeSegmentByteCount`(`i.e` v5 @kind this) @signature `Li/e;.completeSegmentByteCount:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L210e98.  call temp:= `size`(v5) @signature `Li/e;.size:()J` @kind virtual;
  #L210e9e.  v0:= temp @kind wide;
  #L210ea0.  v2:= 0L;
  #L210ea4.  v4:= lcmp(v0, v2);
  #L210ea8.  if v4 != 0 then goto L210eae;
  #L210eac.  goto L210ee0;
  #L210eae.  v2:= v5.`i.e.f` @type ^`i.u` @kind object;
  #L210eb2.  v3:= 0I;
  #L210eb4.  if v2 == 0 then goto L210eea;
  #L210eb8.  v2:= v2.`i.u.g` @type ^`i.u` @kind object;
  #L210ebc.  if v2 == 0 then goto L210ee2;
  #L210ec0.  v3:= v2.`i.u.c` @type ^`int`;
  #L210ec4.  v4:= 8192I;
  #L210ec8.  if v3 >= v4 then goto L210ede;
  #L210ecc.  v4:= v2.`i.u.e` @type ^`boolean` @kind boolean;
  #L210ed0.  if v4 == 0 then goto L210ede;
  #L210ed4.  v2:= v2.`i.u.b` @type ^`int`;
  #L210ed8.  v3:= v3 - v2 @kind int;
  #L210eda.  v2:= (`long`) v3 @kind i2l;
  #L210edc.  v0:= v0 - v2 @kind long;
  #L210ede.  v2:= v0 @kind wide;
  #L210ee0.  return v2 @kind wide;
  #L210ee2.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L210ee8.  throw v3;
  #L210eea.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L210ef0.  throw v3;
}
procedure `i.e` `copyTo`(`i.e` v9 @kind this, `i.e` v10 @kind object, `long` v11 , `long` v13 ) @signature `Li/e;.copyTo:(Li/e;JJ)Li/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2116b4.  v0:= "out" @kind object;
  #L2116b8.  call `checkParameterIsNotNull`(v10, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2116be.  call temp:= `size`(v9) @signature `Li/e;.size:()J` @kind virtual;
  #L2116c4.  v1:= temp @kind wide;
  #L2116c6.  v3:= v11 @kind wide;
  #L2116c8.  v5:= v13 @kind wide;
  #L2116ca.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Li/c;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2116d0.  v0:= 0L;
  #L2116d4.  v2:= lcmp(v13, v0);
  #L2116d8.  if v2 != 0 then goto L2116de;
  #L2116dc.  goto L2117b0;
  #L2116de.  call temp:= `size`(v10) @signature `Li/e;.size:()J` @kind virtual;
  #L2116e4.  v2:= temp @kind wide;
  #L2116e6.  v2:= v2 + v13 @kind long;
  #L2116e8.  call `setSize$okio`(v10, v2) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L2116ee.  v2:= v9.`i.e.f` @type ^`i.u` @kind object;
  #L2116f2.  v3:= 0I;
  #L2116f4.  if v2 == 0 then goto L2117b2;
  #L2116f8.  v4:= v2.`i.u.c` @type ^`int`;
  #L2116fc.  v5:= v2.`i.u.b` @type ^`int`;
  #L211700.  v6:= v4 - v5 @kind int;
  #L211704.  v6:= (`long`) v6 @kind i2l;
  #L211706.  v8:= lcmp(v11, v6);
  #L21170a.  if v8 < 0 then goto L21171a;
  #L21170e.  v4:= v4 - v5 @kind int;
  #L211710.  v3:= (`long`) v4 @kind i2l;
  #L211712.  v11:= v11 - v3 @kind long;
  #L211714.  v2:= v2.`i.u.f` @type ^`i.u` @kind object;
  #L211718.  goto L2116f2;
  #L21171a.  v4:= lcmp(v13, v0);
  #L21171e.  if v4 <= 0 then goto L2117b0;
  #L211722.  if v2 == 0 then goto L2117a8;
  #L211726.  call temp:= `sharedCopy`(v2) @signature `Li/u;.sharedCopy:()Li/u;` @kind virtual;
  #L21172c.  v4:= temp @kind object;
  #L21172e.  v5:= v4.`i.u.b` @type ^`int`;
  #L211732.  v12:= (`int`) v11 @kind l2i;
  #L211734.  v5:= v5 + v12 @kind int;
  #L211736.  v4.`i.u.b` @type ^`int` := v5;
  #L21173a.  v11:= v4.`i.u.b` @type ^`int`;
  #L21173e.  v12:= (`int`) v13 @kind l2i;
  #L211740.  v11:= v11 + v12 @kind int;
  #L211742.  v12:= v4.`i.u.c` @type ^`int`;
  #L211746.  call temp:= `min`(v11, v12) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L21174c.  v11:= temp;
  #L21174e.  v4.`i.u.c` @type ^`int` := v11;
  #L211752.  v11:= v10.`i.e.f` @type ^`i.u` @kind object;
  #L211756.  if v11 != 0 then goto L211770;
  #L21175a.  v4.`i.u.g` @type ^`i.u` := v4 @kind object;
  #L21175e.  v11:= v4.`i.u.g` @type ^`i.u` @kind object;
  #L211762.  v4.`i.u.f` @type ^`i.u` := v11 @kind object;
  #L211766.  v11:= v4.`i.u.f` @type ^`i.u` @kind object;
  #L21176a.  v10.`i.e.f` @type ^`i.u` := v11 @kind object;
  #L21176e.  goto L211782;
  #L211770.  if v11 == 0 then goto L2117a0;
  #L211774.  v11:= v11.`i.u.g` @type ^`i.u` @kind object;
  #L211778.  if v11 == 0 then goto L211798;
  #L21177c.  call temp:= `push`(v11, v4) @signature `Li/u;.push:(Li/u;)Li/u;` @kind virtual;
  #L211782.  v11:= v4.`i.u.c` @type ^`int`;
  #L211786.  v12:= v4.`i.u.b` @type ^`int`;
  #L21178a.  v11:= v11 - v12 @kind int;
  #L21178c.  v11:= (`long`) v11 @kind i2l;
  #L21178e.  v13:= v13 - v11 @kind long;
  #L211790.  v2:= v2.`i.u.f` @type ^`i.u` @kind object;
  #L211794.  v11:= v0 @kind wide;
  #L211796.  goto L21171a;
  #L211798.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L21179e.  throw v3;
  #L2117a0.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L2117a6.  throw v3;
  #L2117a8.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L2117ae.  throw v3;
  #L2117b0.  return v9 @kind object;
  #L2117b2.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L2117b8.  throw v3;
}
procedure `i.e` `emit`(`i.e` v0 @kind this) @signature `Li/e;.emit:()Li/e;` @AccessFlag PUBLIC {
    temp;

  #L2117cc.  return v0 @kind object;
}
procedure `i.f` `emit`(`i.e` v0 @kind this) @signature `Li/e;.emit:()Li/f;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L212418.  call temp:= `emit`(v0) @signature `Li/e;.emit:()Li/e;` @kind virtual;
  #L21241e.  return v0 @kind object;
}
procedure `i.e` `emitCompleteSegments`(`i.e` v0 @kind this) @signature `Li/e;.emitCompleteSegments:()Li/e;` @AccessFlag PUBLIC {
    temp;

  #L2117e0.  return v0 @kind object;
}
procedure `i.f` `emitCompleteSegments`(`i.e` v0 @kind this) @signature `Li/e;.emitCompleteSegments:()Li/f;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L212430.  call temp:= `emitCompleteSegments`(v0) @signature `Li/e;.emitCompleteSegments:()Li/e;` @kind virtual;
  #L212436.  return v0 @kind object;
}
procedure `boolean` `equals`(`i.e` v19 @kind this, `java.lang.Object` v20 @kind object) @signature `Li/e;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L210230.  v0:= v19 @kind object;
  #L210234.  v1:= v20 @kind object;
  #L210238.  v3:= 1I;
  #L21023a.  if v0 != v1 then goto L210242;
  #L21023e.  goto L21034e;
  #L210242.  v4:= instanceof @variable v1 @type ^`i.e` @kind boolean;
  #L210246.  if v4 != 0 then goto L210250;
  #L21024a.  v3:= 0I;
  #L21024c.  goto L21034e;
  #L210250.  call temp:= `size`(v19) @signature `Li/e;.size:()J` @kind virtual;
  #L210256.  v4:= temp @kind wide;
  #L210258.  v1:= (`i.e`) v1 @kind object;
  #L21025c.  call temp:= `size`(v1) @signature `Li/e;.size:()J` @kind virtual;
  #L210262.  v6:= temp @kind wide;
  #L210264.  v8:= lcmp(v4, v6);
  #L210268.  if v8 == 0 then goto L21026e;
  #L21026c.  goto L21024a;
  #L21026e.  call temp:= `size`(v19) @signature `Li/e;.size:()J` @kind virtual;
  #L210274.  v4:= temp @kind wide;
  #L210276.  v6:= 0L;
  #L21027a.  v8:= lcmp(v4, v6);
  #L21027e.  if v8 != 0 then goto L210286;
  #L210282.  goto L21034e;
  #L210286.  v4:= v0.`i.e.f` @type ^`i.u` @kind object;
  #L21028a.  v5:= 0I;
  #L21028c.  if v4 == 0 then goto L210358;
  #L210290.  v1:= v1.`i.e.f` @type ^`i.u` @kind object;
  #L210294.  if v1 == 0 then goto L210350;
  #L210298.  v8:= v4.`i.u.b` @type ^`int`;
  #L21029c.  v9:= v1.`i.u.b` @type ^`int`;
  #L2102a0.  v10:= v1 @kind object;
  #L2102a2.  v1:= v8;
  #L2102a4.  v11:= v9;
  #L2102a6.  v8:= v6 @kind wide;
  #L2102a8.  call temp:= `size`(v19) @signature `Li/e;.size:()J` @kind virtual;
  #L2102ae.  v12:= temp @kind wide;
  #L2102b0.  v14:= lcmp(v8, v12);
  #L2102b4.  if v14 >= 0 then goto L21034e;
  #L2102b8.  v12:= v4.`i.u.c` @type ^`int`;
  #L2102bc.  v12:= v12 - v1 @kind int;
  #L2102be.  v13:= v10.`i.u.c` @type ^`int`;
  #L2102c2.  v13:= v13 - v11 @kind int;
  #L2102c4.  call temp:= `min`(v12, v13) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2102ca.  v12:= temp;
  #L2102cc.  v12:= (`long`) v12 @kind i2l;
  #L2102ce.  v14:= v6 @kind wide;
  #L2102d0.  v16:= lcmp(v14, v12);
  #L2102d4.  if v16 >= 0 then goto L210306;
  #L2102d8.  v2:= v4.`i.u.a` @type ^`byte`[] @kind object;
  #L2102dc.  v17:= v1 + 1;
  #L2102e0.  v1:= v2[v1] @kind byte;
  #L2102e4.  v2:= v10.`i.u.a` @type ^`byte`[] @kind object;
  #L2102e8.  v18:= v11 + 1;
  #L2102ec.  v2:= v2[v11] @kind byte;
  #L2102f0.  if v1 == v2 then goto L2102f6;
  #L2102f4.  goto L21024a;
  #L2102f6.  v1:= 1L;
  #L2102fa.  v14:= v14 + v1 @kind long;
  #L2102fc.  v1:= v17;
  #L210300.  v11:= v18;
  #L210304.  goto L2102d0;
  #L210306.  v2:= v4.`i.u.c` @type ^`int`;
  #L21030a.  if v1 != v2 then goto L210328;
  #L21030e.  v1:= v4.`i.u.f` @type ^`i.u` @kind object;
  #L210312.  if v1 == 0 then goto L210320;
  #L210316.  v2:= v1.`i.u.b` @type ^`int`;
  #L21031a.  v4:= v1 @kind object;
  #L21031c.  v1:= v2;
  #L21031e.  goto L210328;
  #L210320.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L210326.  throw v5;
  #L210328.  v2:= v10.`i.u.c` @type ^`int`;
  #L21032c.  if v11 != v2 then goto L21034a;
  #L210330.  v2:= v10.`i.u.f` @type ^`i.u` @kind object;
  #L210334.  if v2 == 0 then goto L210342;
  #L210338.  v10:= v2.`i.u.b` @type ^`int`;
  #L21033c.  v11:= v10;
  #L21033e.  v10:= v2 @kind object;
  #L210340.  goto L21034a;
  #L210342.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L210348.  throw v5;
  #L21034a.  v8:= v8 + v12 @kind long;
  #L21034c.  goto L2102a8;
  #L21034e.  return v3;
  #L210350.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L210356.  throw v5;
  #L210358.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L21035e.  throw v5;
}
procedure `boolean` `exhausted`(`i.e` v5 @kind this) @signature `Li/e;.exhausted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L210370.  v0:= v5.`i.e.g` @type ^`long` @kind wide;
  #L210374.  v2:= 0L;
  #L210378.  v4:= lcmp(v0, v2);
  #L21037c.  if v4 != 0 then goto L210384;
  #L210380.  v0:= 1I;
  #L210382.  goto L210386;
  #L210384.  v0:= 0I;
  #L210386.  return v0;
}
procedure `void` `flush`(`i.e` v0 @kind this) @signature `Li/e;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L2128cc.  return @kind void;
}
procedure `i.e` `getBuffer`(`i.e` v0 @kind this) @signature `Li/e;.getBuffer:()Li/e;` @AccessFlag PUBLIC {
    temp;

  #L2117f4.  return v0 @kind object;
}
procedure `byte` `getByte`(`i.e` v8 @kind this, `long` v9 ) @signature `Li/e;.getByte:(J)B` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2103d0.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L2103d6.  v0:= temp @kind wide;
  #L2103d8.  v4:= 1L;
  #L2103dc.  v2:= v9 @kind wide;
  #L2103de.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Li/c;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2103e4.  v0:= v8.`i.e.f` @type ^`i.u` @kind object;
  #L2103e8.  v1:= 0I;
  #L2103ea.  if v0 == 0 then goto L21049e;
  #L2103ee.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L2103f4.  v2:= temp @kind wide;
  #L2103f6.  v2:= v2 - v9 @kind long;
  #L2103f8.  v4:= lcmp(v2, v9);
  #L2103fc.  if v4 >= 0 then goto L210452;
  #L210400.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L210406.  v2:= temp @kind wide;
  #L210408.  v4:= lcmp(v2, v9);
  #L21040c.  if v4 <= 0 then goto L210430;
  #L210410.  v0:= v0.`i.u.g` @type ^`i.u` @kind object;
  #L210414.  if v0 == 0 then goto L210428;
  #L210418.  v4:= v0.`i.u.c` @type ^`int`;
  #L21041c.  v5:= v0.`i.u.b` @type ^`int`;
  #L210420.  v4:= v4 - v5 @kind int;
  #L210422.  v4:= (`long`) v4 @kind i2l;
  #L210424.  v2:= v2 - v4 @kind long;
  #L210426.  goto L210408;
  #L210428.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L21042e.  throw v1;
  #L210430.  if v0 == 0 then goto L21044a;
  #L210434.  v1:= v0.`i.u.a` @type ^`byte`[] @kind object;
  #L210438.  v0:= v0.`i.u.b` @type ^`int`;
  #L21043c.  v4:= (`long`) v0 @kind i2l;
  #L21043e.  v4:= v4 + v9 @kind long;
  #L210440.  v4:= v4 - v2 @kind long;
  #L210442.  v9:= (`int`) v4 @kind l2i;
  #L210444.  v9:= v1[v9] @kind byte;
  #L210448.  goto L210480;
  #L21044a.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L210450.  throw v1;
  #L210452.  v2:= 0L;
  #L210456.  v4:= v0.`i.u.c` @type ^`int`;
  #L21045a.  v5:= v0.`i.u.b` @type ^`int`;
  #L21045e.  v4:= v4 - v5 @kind int;
  #L210460.  v6:= (`long`) v4 @kind i2l;
  #L210462.  v6:= v6 + v2 @kind long;
  #L210464.  v4:= lcmp(v6, v9);
  #L210468.  if v4 <= 0 then goto L21048a;
  #L21046c.  if v0 == 0 then goto L210482;
  #L210470.  v0:= v0.`i.u.a` @type ^`byte`[] @kind object;
  #L210474.  v4:= (`long`) v5 @kind i2l;
  #L210476.  v4:= v4 + v9 @kind long;
  #L210478.  v4:= v4 - v2 @kind long;
  #L21047a.  v9:= (`int`) v4 @kind l2i;
  #L21047c.  v9:= v0[v9] @kind byte;
  #L210480.  return v9;
  #L210482.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L210488.  throw v1;
  #L21048a.  v0:= v0.`i.u.f` @type ^`i.u` @kind object;
  #L21048e.  if v0 == 0 then goto L210496;
  #L210492.  v2:= v6 @kind wide;
  #L210494.  goto L210456;
  #L210496.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L21049c.  throw v1;
  #L21049e.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L2104a4.  throw v1;
}
procedure `int` `hashCode`(`i.e` v5 @kind this) @signature `Li/e;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L210600.  v0:= v5.`i.e.f` @type ^`i.u` @kind object;
  #L210604.  if v0 == 0 then goto L210646;
  #L210608.  v1:= 1I;
  #L21060a.  v2:= v0.`i.u.b` @type ^`int`;
  #L21060e.  v3:= v0.`i.u.c` @type ^`int`;
  #L210612.  if v2 >= v3 then goto L21062a;
  #L210616.  v1:= v1 * 31;
  #L21061a.  v4:= v0.`i.u.a` @type ^`byte`[] @kind object;
  #L21061e.  v4:= v4[v2] @kind byte;
  #L210622.  v1:= v1 + v4 @kind int;
  #L210624.  v2:= v2 + 1;
  #L210628.  goto L210612;
  #L21062a.  v0:= v0.`i.u.f` @type ^`i.u` @kind object;
  #L21062e.  if v0 == 0 then goto L21063c;
  #L210632.  v2:= v5.`i.e.f` @type ^`i.u` @kind object;
  #L210636.  if v0 != v2 then goto L21060a;
  #L21063a.  goto L210648;
  #L21063c.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L210642.  v0:= 0I;
  #L210644.  throw v0;
  #L210646.  v1:= 0I;
  #L210648.  return v1;
}
procedure `long` `indexOf`(`i.e` v16 @kind this, `byte` v17 , `long` v18 , `long` v20 ) @signature `Li/e;.indexOf:(BJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L210f04.  v0:= v17;
  #L210f08.  v1:= v18 @kind wide;
  #L210f0c.  v3:= v20 @kind wide;
  #L210f10.  v5:= 0L;
  #L210f14.  v7:= lcmp(v5, v1);
  #L210f18.  if v7 <= 0 then goto L210f1e;
  #L210f1c.  goto L210f2a;
  #L210f1e.  v7:= lcmp(v3, v1);
  #L210f22.  if v7 < 0 then goto L210f2a;
  #L210f26.  v7:= 1I;
  #L210f28.  goto L210f2c;
  #L210f2a.  v7:= 0I;
  #L210f2c.  if v7 == 0 then goto L2110c0;
  #L210f30.  call temp:= `size`(v16) @signature `Li/e;.size:()J` @kind virtual;
  #L210f36.  v7:= temp @kind wide;
  #L210f38.  v9:= lcmp(v3, v7);
  #L210f3c.  if v9 <= 0 then goto L210f48;
  #L210f40.  call temp:= `size`(v16) @signature `Li/e;.size:()J` @kind virtual;
  #L210f46.  v3:= temp @kind wide;
  #L210f48.  v9:= lcmp(v1, v3);
  #L210f4c.  if v9 != 0 then goto L210f5c;
  #L210f50.  v7:= -1L;
  #L210f54.  v9:= v16 @kind object;
  #L210f58.  goto L2110be;
  #L210f5c.  v9:= v16 @kind object;
  #L210f60.  v10:= v9.`i.e.f` @type ^`i.u` @kind object;
  #L210f64.  if v10 == 0 then goto L2110ba;
  #L210f68.  call temp:= `size`(v16) @signature `Li/e;.size:()J` @kind virtual;
  #L210f6e.  v11:= temp @kind wide;
  #L210f70.  v11:= v11 - v1 @kind long;
  #L210f72.  v13:= 0I;
  #L210f74.  v14:= lcmp(v11, v1);
  #L210f78.  if v14 >= 0 then goto L211024;
  #L210f7c.  call temp:= `size`(v16) @signature `Li/e;.size:()J` @kind virtual;
  #L210f82.  v5:= temp @kind wide;
  #L210f84.  v11:= lcmp(v5, v1);
  #L210f88.  if v11 <= 0 then goto L210fac;
  #L210f8c.  v10:= v10.`i.u.g` @type ^`i.u` @kind object;
  #L210f90.  if v10 == 0 then goto L210fa4;
  #L210f94.  v11:= v10.`i.u.c` @type ^`int`;
  #L210f98.  v12:= v10.`i.u.b` @type ^`int`;
  #L210f9c.  v11:= v11 - v12 @kind int;
  #L210f9e.  v11:= (`long`) v11 @kind i2l;
  #L210fa0.  v5:= v5 - v11 @kind long;
  #L210fa2.  goto L210f84;
  #L210fa4.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L210faa.  throw v13;
  #L210fac.  if v10 == 0 then goto L2110ba;
  #L210fb0.  v11:= lcmp(v5, v3);
  #L210fb4.  if v11 >= 0 then goto L2110ba;
  #L210fb8.  v11:= v10.`i.u.a` @type ^`byte`[] @kind object;
  #L210fbc.  v12:= v10.`i.u.c` @type ^`int`;
  #L210fc0.  v14:= (`long`) v12 @kind i2l;
  #L210fc2.  v12:= v10.`i.u.b` @type ^`int`;
  #L210fc6.  v7:= (`long`) v12 @kind i2l;
  #L210fc8.  v7:= v7 + v3 @kind long;
  #L210fca.  v7:= v7 - v5 @kind long;
  #L210fcc.  call temp:= `min`(v14, v7) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L210fd2.  v7:= temp @kind wide;
  #L210fd4.  v8:= (`int`) v7 @kind l2i;
  #L210fd6.  v7:= v10.`i.u.b` @type ^`int`;
  #L210fda.  v14:= (`long`) v7 @kind i2l;
  #L210fdc.  v14:= v14 + v1 @kind long;
  #L210fde.  v14:= v14 - v5 @kind long;
  #L210fe0.  v1:= (`int`) v14 @kind l2i;
  #L210fe2.  if v1 >= v8 then goto L211002;
  #L210fe6.  v2:= v11[v1] @kind byte;
  #L210fea.  if v2 != v0 then goto L210ffc;
  #L210fee.  v0:= v10.`i.u.b` @type ^`int`;
  #L210ff2.  v1:= v1 - v0 @kind int;
  #L210ff4.  v0:= (`long`) v1 @kind i2l;
  #L210ff6.  v7:= v0 + v5 @kind long;
  #L210ffa.  goto L2110be;
  #L210ffc.  v1:= v1 + 1;
  #L211000.  goto L210fe2;
  #L211002.  v1:= v10.`i.u.c` @type ^`int`;
  #L211006.  v2:= v10.`i.u.b` @type ^`int`;
  #L21100a.  v1:= v1 - v2 @kind int;
  #L21100c.  v1:= (`long`) v1 @kind i2l;
  #L21100e.  v1:= v1 + v5 @kind long;
  #L211010.  v10:= v10.`i.u.f` @type ^`i.u` @kind object;
  #L211014.  if v10 == 0 then goto L21101c;
  #L211018.  v5:= v1 @kind wide;
  #L21101a.  goto L210fb0;
  #L21101c.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L211022.  throw v13;
  #L211024.  v7:= v10.`i.u.c` @type ^`int`;
  #L211028.  v8:= v10.`i.u.b` @type ^`int`;
  #L21102c.  v7:= v7 - v8 @kind int;
  #L21102e.  v7:= (`long`) v7 @kind i2l;
  #L211030.  v7:= v7 + v5 @kind long;
  #L211032.  v11:= lcmp(v7, v1);
  #L211036.  if v11 <= 0 then goto L2110a6;
  #L21103a.  if v10 == 0 then goto L2110ba;
  #L21103e.  v7:= lcmp(v5, v3);
  #L211042.  if v7 >= 0 then goto L2110ba;
  #L211046.  v7:= v10.`i.u.a` @type ^`byte`[] @kind object;
  #L21104a.  v8:= v10.`i.u.c` @type ^`int`;
  #L21104e.  v11:= (`long`) v8 @kind i2l;
  #L211050.  v8:= v10.`i.u.b` @type ^`int`;
  #L211054.  v14:= (`long`) v8 @kind i2l;
  #L211056.  v14:= v14 + v3 @kind long;
  #L211058.  v14:= v14 - v5 @kind long;
  #L21105a.  call temp:= `min`(v11, v14) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L211060.  v11:= temp @kind wide;
  #L211062.  v8:= (`int`) v11 @kind l2i;
  #L211064.  v11:= v10.`i.u.b` @type ^`int`;
  #L211068.  v11:= (`long`) v11 @kind i2l;
  #L21106a.  v11:= v11 + v1 @kind long;
  #L21106c.  v11:= v11 - v5 @kind long;
  #L21106e.  v1:= (`int`) v11 @kind l2i;
  #L211070.  if v1 >= v8 then goto L211084;
  #L211074.  v2:= v7[v1] @kind byte;
  #L211078.  if v2 != v0 then goto L21107e;
  #L21107c.  goto L210fee;
  #L21107e.  v1:= v1 + 1;
  #L211082.  goto L211070;
  #L211084.  v1:= v10.`i.u.c` @type ^`int`;
  #L211088.  v2:= v10.`i.u.b` @type ^`int`;
  #L21108c.  v1:= v1 - v2 @kind int;
  #L21108e.  v1:= (`long`) v1 @kind i2l;
  #L211090.  v1:= v1 + v5 @kind long;
  #L211092.  v10:= v10.`i.u.f` @type ^`i.u` @kind object;
  #L211096.  if v10 == 0 then goto L21109e;
  #L21109a.  v5:= v1 @kind wide;
  #L21109c.  goto L21103e;
  #L21109e.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L2110a4.  throw v13;
  #L2110a6.  v10:= v10.`i.u.f` @type ^`i.u` @kind object;
  #L2110aa.  if v10 == 0 then goto L2110b2;
  #L2110ae.  v5:= v7 @kind wide;
  #L2110b0.  goto L211024;
  #L2110b2.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L2110b8.  throw v13;
  #L2110ba.  v7:= -1L;
  #L2110be.  return v7 @kind wide;
  #L2110c0.  v9:= v16 @kind object;
  #L2110c4.  v0:= new `java.lang.StringBuilder`;
  #L2110c8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2110ce.  v5:= "size=" @kind object;
  #L2110d2.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2110d8.  call temp:= `size`(v16) @signature `Li/e;.size:()J` @kind virtual;
  #L2110de.  v5:= temp @kind wide;
  #L2110e0.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2110e6.  v5:= " fromIndex=" @kind object;
  #L2110ea.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2110f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2110f6.  v1:= " toIndex=" @kind object;
  #L2110fa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L211100.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L211106.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21110c.  v0:= temp @kind object;
  #L21110e.  v1:= new `java.lang.IllegalArgumentException`;
  #L211112.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L211118.  v0:= temp @kind object;
  #L21111a.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L211120.  throw v1;
}
procedure `java.io.InputStream` `inputStream`(`i.e` v1 @kind this) @signature `Li/e;.inputStream:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L210afc.  v0:= new `i.e$a`;
  #L210b00.  call `<init>`(v0, v1) @signature `Li/e$a;.<init>:(Li/e;)V` @kind direct;
  #L210b06.  return v0 @kind object;
}
procedure `boolean` `isOpen`(`i.e` v1 @kind this) @signature `Li/e;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L210398.  v0:= 1I;
  #L21039a.  return v0;
}
procedure `java.io.OutputStream` `outputStream`(`i.e` v1 @kind this) @signature `Li/e;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L210b18.  v0:= new `i.e$b`;
  #L210b1c.  call `<init>`(v0, v1) @signature `Li/e$b;.<init>:(Li/e;)V` @kind direct;
  #L210b22.  return v0 @kind object;
}
procedure `int` `read`(`i.e` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Li/e;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2106f4.  v0:= "sink" @kind object;
  #L2106f8.  call `checkParameterIsNotNull`(v7, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2106fe.  v0:= v6.`i.e.f` @type ^`i.u` @kind object;
  #L210702.  if v0 == 0 then goto L210768;
  #L210706.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L21070c.  v1:= temp;
  #L21070e.  v2:= v0.`i.u.c` @type ^`int`;
  #L210712.  v3:= v0.`i.u.b` @type ^`int`;
  #L210716.  v2:= v2 - v3 @kind int;
  #L210718.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L21071e.  v1:= temp;
  #L210720.  v2:= v0.`i.u.a` @type ^`byte`[] @kind object;
  #L210724.  v3:= v0.`i.u.b` @type ^`int`;
  #L210728.  call temp:= `put`(v7, v2, v3, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L21072e.  v7:= v0.`i.u.b` @type ^`int`;
  #L210732.  v7:= v7 + v1 @kind int;
  #L210734.  v0.`i.u.b` @type ^`int` := v7;
  #L210738.  v2:= v6.`i.e.g` @type ^`long` @kind wide;
  #L21073c.  v4:= (`long`) v1 @kind i2l;
  #L21073e.  v2:= v2 - v4 @kind long;
  #L210740.  v6.`i.e.g` @type ^`long` := v2 @kind wide;
  #L210744.  v7:= v0.`i.u.b` @type ^`int`;
  #L210748.  v2:= v0.`i.u.c` @type ^`int`;
  #L21074c.  if v7 != v2 then goto L210766;
  #L210750.  call temp:= `pop`(v0) @signature `Li/u;.pop:()Li/u;` @kind virtual;
  #L210756.  v7:= temp @kind object;
  #L210758.  v6.`i.e.f` @type ^`i.u` := v7 @kind object;
  #L21075c.  v7:= `@@i.v.c` @type ^`i.v` @kind object;
  #L210760.  call `recycle`(v7, v0) @signature `Li/v;.recycle:(Li/u;)V` @kind virtual;
  #L210766.  return v1;
  #L210768.  v7:= -1I;
  #L21076a.  return v7;
}
procedure `int` `read`(`i.e` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Li/e;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L21065c.  v0:= "sink" @kind object;
  #L210660.  call `checkParameterIsNotNull`(v8, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L210666.  v0:= length @variable v8;
  #L210668.  v1:= (`long`) v0 @kind i2l;
  #L21066a.  v3:= (`long`) v9 @kind i2l;
  #L21066c.  v5:= (`long`) v10 @kind i2l;
  #L21066e.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Li/c;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L210674.  v0:= v7.`i.e.f` @type ^`i.u` @kind object;
  #L210678.  if v0 == 0 then goto L2106e0;
  #L21067c.  v1:= v0.`i.u.c` @type ^`int`;
  #L210680.  v2:= v0.`i.u.b` @type ^`int`;
  #L210684.  v1:= v1 - v2 @kind int;
  #L210686.  call temp:= `min`(v10, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L21068c.  v10:= temp;
  #L21068e.  v1:= v0.`i.u.a` @type ^`byte`[] @kind object;
  #L210692.  v2:= v0.`i.u.b` @type ^`int`;
  #L210696.  v3:= v2 + v10 @kind int;
  #L21069a.  call temp:= `copyInto`(v1, v8, v9, v2, v3) @signature `Lkotlin/r/d;.copyInto:([B[BIII)[B` @kind static;
  #L2106a0.  v8:= v0.`i.u.b` @type ^`int`;
  #L2106a4.  v8:= v8 + v10 @kind int;
  #L2106a6.  v0.`i.u.b` @type ^`int` := v8;
  #L2106aa.  call temp:= `size`(v7) @signature `Li/e;.size:()J` @kind virtual;
  #L2106b0.  v8:= temp @kind wide;
  #L2106b2.  v1:= (`long`) v10 @kind i2l;
  #L2106b4.  v8:= v8 - v1 @kind long;
  #L2106b6.  call `setSize$okio`(v7, v8) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L2106bc.  v8:= v0.`i.u.b` @type ^`int`;
  #L2106c0.  v9:= v0.`i.u.c` @type ^`int`;
  #L2106c4.  if v8 != v9 then goto L2106e2;
  #L2106c8.  call temp:= `pop`(v0) @signature `Li/u;.pop:()Li/u;` @kind virtual;
  #L2106ce.  v8:= temp @kind object;
  #L2106d0.  v7.`i.e.f` @type ^`i.u` := v8 @kind object;
  #L2106d4.  v8:= `@@i.v.c` @type ^`i.v` @kind object;
  #L2106d8.  call `recycle`(v8, v0) @signature `Li/v;.recycle:(Li/u;)V` @kind virtual;
  #L2106de.  goto L2106e2;
  #L2106e0.  v10:= -1I;
  #L2106e2.  return v10;
}
procedure `long` `read`(`i.e` v5 @kind this, `i.e` v6 @kind object, `long` v7 ) @signature `Li/e;.read:(Li/e;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L211134.  v0:= "sink" @kind object;
  #L211138.  call `checkParameterIsNotNull`(v6, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L21113e.  v0:= 0L;
  #L211142.  v2:= lcmp(v7, v0);
  #L211146.  if v2 < 0 then goto L21114e;
  #L21114a.  v2:= 1I;
  #L21114c.  goto L211150;
  #L21114e.  v2:= 0I;
  #L211150.  if v2 == 0 then goto L21118c;
  #L211154.  call temp:= `size`(v5) @signature `Li/e;.size:()J` @kind virtual;
  #L21115a.  v2:= temp @kind wide;
  #L21115c.  v4:= lcmp(v2, v0);
  #L211160.  if v4 != 0 then goto L21116a;
  #L211164.  v6:= -1L;
  #L211168.  goto L21118a;
  #L21116a.  call temp:= `size`(v5) @signature `Li/e;.size:()J` @kind virtual;
  #L211170.  v0:= temp @kind wide;
  #L211172.  v2:= lcmp(v7, v0);
  #L211176.  if v2 <= 0 then goto L211182;
  #L21117a.  call temp:= `size`(v5) @signature `Li/e;.size:()J` @kind virtual;
  #L211180.  v7:= temp @kind wide;
  #L211182.  call `write`(v6, v5, v7) @signature `Li/e;.write:(Li/e;J)V` @kind virtual;
  #L211188.  v6:= v7 @kind wide;
  #L21118a.  return v6 @kind wide;
  #L21118c.  v6:= new `java.lang.StringBuilder`;
  #L211190.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L211196.  v0:= "byteCount < 0: " @kind object;
  #L21119a.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2111a0.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2111a6.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2111ac.  v6:= temp @kind object;
  #L2111ae.  v7:= new `java.lang.IllegalArgumentException`;
  #L2111b2.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2111b8.  v6:= temp @kind object;
  #L2111ba.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2111c0.  throw v7;
}
procedure `long` `readAll`(`i.e` v5 @kind this, `i.x` v6 @kind object) @signature `Li/e;.readAll:(Li/x;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2111d4.  v0:= "sink" @kind object;
  #L2111d8.  call `checkParameterIsNotNull`(v6, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2111de.  call temp:= `size`(v5) @signature `Li/e;.size:()J` @kind virtual;
  #L2111e4.  v0:= temp @kind wide;
  #L2111e6.  v2:= 0L;
  #L2111ea.  v4:= lcmp(v0, v2);
  #L2111ee.  if v4 <= 0 then goto L2111f8;
  #L2111f2.  call `write`(v6, v5, v0) @signature `Li/x;.write:(Li/e;J)V` @kind interface;
  #L2111f8.  return v0 @kind wide;
}
procedure `byte` `readByte`(`i.e` v9 @kind this) @signature `Li/e;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2104b8.  call temp:= `size`(v9) @signature `Li/e;.size:()J` @kind virtual;
  #L2104be.  v0:= temp @kind wide;
  #L2104c0.  v2:= 0L;
  #L2104c4.  v4:= lcmp(v0, v2);
  #L2104c8.  if v4 == 0 then goto L210528;
  #L2104cc.  v0:= v9.`i.e.f` @type ^`i.u` @kind object;
  #L2104d0.  if v0 == 0 then goto L21051e;
  #L2104d4.  v1:= v0.`i.u.b` @type ^`int`;
  #L2104d8.  v2:= v0.`i.u.c` @type ^`int`;
  #L2104dc.  v3:= v0.`i.u.a` @type ^`byte`[] @kind object;
  #L2104e0.  v4:= v1 + 1;
  #L2104e4.  v1:= v3[v1] @kind byte;
  #L2104e8.  call temp:= `size`(v9) @signature `Li/e;.size:()J` @kind virtual;
  #L2104ee.  v5:= temp @kind wide;
  #L2104f0.  v7:= 1L;
  #L2104f4.  v5:= v5 - v7 @kind long;
  #L2104f6.  call `setSize$okio`(v9, v5) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L2104fc.  if v4 != v2 then goto L210518;
  #L210500.  call temp:= `pop`(v0) @signature `Li/u;.pop:()Li/u;` @kind virtual;
  #L210506.  v2:= temp @kind object;
  #L210508.  v9.`i.e.f` @type ^`i.u` := v2 @kind object;
  #L21050c.  v2:= `@@i.v.c` @type ^`i.v` @kind object;
  #L210510.  call `recycle`(v2, v0) @signature `Li/v;.recycle:(Li/u;)V` @kind virtual;
  #L210516.  goto L21051c;
  #L210518.  v0.`i.u.b` @type ^`int` := v4;
  #L21051c.  return v1;
  #L21051e.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L210524.  v0:= 0I;
  #L210526.  throw v0;
  #L210528.  v0:= new `java.io.EOFException`;
  #L21052c.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L210532.  throw v0;
}
procedure `byte`[] `readByteArray`(`i.e` v2 @kind this) @signature `Li/e;.readByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L210544.  call temp:= `size`(v2) @signature `Li/e;.size:()J` @kind virtual;
  #L21054a.  v0:= temp @kind wide;
  #L21054c.  call temp:= `readByteArray`(v2, v0) @signature `Li/e;.readByteArray:(J)[B` @kind virtual;
  #L210552.  v0:= temp @kind object;
  #L210554.  return v0 @kind object;
}
procedure `byte`[] `readByteArray`(`i.e` v3 @kind this, `long` v4 ) @signature `Li/e;.readByteArray:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L210568.  v0:= 0L;
  #L21056c.  v2:= lcmp(v4, v0);
  #L210570.  if v2 < 0 then goto L210588;
  #L210574.  v0:= 2147483647I;
  #L21057a.  v0:= (`long`) v0 @kind i2l;
  #L21057c.  v2:= lcmp(v4, v0);
  #L210580.  if v2 > 0 then goto L210588;
  #L210584.  v0:= 1I;
  #L210586.  goto L21058a;
  #L210588.  v0:= 0I;
  #L21058a.  if v0 == 0 then goto L2105b8;
  #L21058e.  call temp:= `size`(v3) @signature `Li/e;.size:()J` @kind virtual;
  #L210594.  v0:= temp @kind wide;
  #L210596.  v2:= lcmp(v0, v4);
  #L21059a.  if v2 < 0 then goto L2105ac;
  #L21059e.  v5:= (`int`) v4 @kind l2i;
  #L2105a0.  v4:= new `byte`[v5];
  #L2105a4.  call `readFully`(v3, v4) @signature `Li/e;.readFully:([B)V` @kind virtual;
  #L2105aa.  return v4 @kind object;
  #L2105ac.  v4:= new `java.io.EOFException`;
  #L2105b0.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L2105b6.  throw v4;
  #L2105b8.  v0:= new `java.lang.StringBuilder`;
  #L2105bc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2105c2.  v1:= "byteCount: " @kind object;
  #L2105c6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2105cc.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2105d2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2105d8.  v4:= temp @kind object;
  #L2105da.  v5:= new `java.lang.IllegalArgumentException`;
  #L2105de.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2105e4.  v4:= temp @kind object;
  #L2105e6.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2105ec.  throw v5;
}
procedure `i.h` `readByteString`(`i.e` v2 @kind this) @signature `Li/e;.readByteString:()Li/h;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L212520.  v0:= new `i.h`;
  #L212524.  call temp:= `readByteArray`(v2) @signature `Li/e;.readByteArray:()[B` @kind virtual;
  #L21252a.  v1:= temp @kind object;
  #L21252c.  call `<init>`(v0, v1) @signature `Li/h;.<init>:([B)V` @kind direct;
  #L212532.  return v0 @kind object;
}
procedure `i.h` `readByteString`(`i.e` v1 @kind this, `long` v2 ) @signature `Li/e;.readByteString:(J)Li/h;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L212544.  v0:= new `i.h`;
  #L212548.  call temp:= `readByteArray`(v1, v2) @signature `Li/e;.readByteArray:(J)[B` @kind virtual;
  #L21254e.  v2:= temp @kind object;
  #L212550.  call `<init>`(v0, v2) @signature `Li/h;.<init>:([B)V` @kind direct;
  #L212556.  return v0 @kind object;
}
procedure `long` `readDecimalLong`(`i.e` v17 @kind this) @signature `Li/e;.readDecimalLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L21120c.  v0:= v17 @kind object;
  #L211210.  call temp:= `size`(v17) @signature `Li/e;.size:()J` @kind virtual;
  #L211216.  v1:= temp @kind wide;
  #L211218.  v3:= 0L;
  #L21121c.  v5:= lcmp(v1, v3);
  #L211220.  if v5 == 0 then goto L2113b2;
  #L211224.  v1:= -7L;
  #L211228.  v5:= 0I;
  #L21122a.  v6:= v1 @kind wide;
  #L21122c.  v1:= 0I;
  #L21122e.  v2:= 0I;
  #L211230.  v8:= v0.`i.e.f` @type ^`i.u` @kind object;
  #L211234.  if v8 == 0 then goto L2113a8;
  #L211238.  v9:= v8.`i.u.a` @type ^`byte`[] @kind object;
  #L21123c.  v10:= v8.`i.u.b` @type ^`int`;
  #L211240.  v11:= v8.`i.u.c` @type ^`int`;
  #L211244.  v12:= 1I;
  #L211246.  if v10 >= v11 then goto L21135a;
  #L21124a.  v13:= v9[v10] @kind byte;
  #L21124e.  v14:= 48I;
  #L211252.  v14:= (`byte`) v14 @kind i2b;
  #L211254.  if v13 < v14 then goto L2112f0;
  #L211258.  v15:= 57I;
  #L21125c.  v15:= (`byte`) v15 @kind i2b;
  #L21125e.  if v13 > v15 then goto L2112f0;
  #L211262.  v14:= v14 - v13 @kind int;
  #L211264.  v15:= -922337203685477580L;
  #L21126e.  v12:= lcmp(v3, v15);
  #L211272.  if v12 < 0 then goto L21129a;
  #L211276.  v15:= v8 @kind object;
  #L211278.  v16:= v9 @kind object;
  #L21127c.  if v12 != 0 then goto L21128c;
  #L211280.  v8:= (`long`) v14 @kind i2l;
  #L211282.  v12:= lcmp(v8, v6);
  #L211286.  if v12 >= 0 then goto L21128c;
  #L21128a.  goto L21129a;
  #L21128c.  v8:= 10L;
  #L211290.  v3:= v3 * v8 @kind long;
  #L211294.  v8:= (`long`) v14 @kind i2l;
  #L211296.  v3:= v3 + v8 @kind long;
  #L211298.  goto L21130c;
  #L21129a.  v2:= new `i.e`;
  #L21129e.  call `<init>`(v2) @signature `Li/e;.<init>:()V` @kind direct;
  #L2112a4.  call temp:= `writeDecimalLong`(v2, v3) @signature `Li/e;.writeDecimalLong:(J)Li/e;` @kind virtual;
  #L2112aa.  call temp:= `writeByte`(v2, v13) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L2112b0.  if v1 != 0 then goto L2112ba;
  #L2112b4.  call temp:= `readByte`(v2) @signature `Li/e;.readByte:()B` @kind virtual;
  #L2112ba.  v1:= new `java.lang.NumberFormatException`;
  #L2112be.  v3:= new `java.lang.StringBuilder`;
  #L2112c2.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2112c8.  v4:= "Number too large: " @kind object;
  #L2112cc.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2112d2.  call temp:= `readUtf8`(v2) @signature `Li/e;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L2112d8.  v2:= temp @kind object;
  #L2112da.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2112e0.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2112e6.  v2:= temp @kind object;
  #L2112e8.  call `<init>`(v1, v2) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2112ee.  throw v1;
  #L2112f0.  v15:= v8 @kind object;
  #L2112f2.  v16:= v9 @kind object;
  #L2112f6.  v8:= 45I;
  #L2112fa.  v8:= (`byte`) v8 @kind i2b;
  #L2112fc.  if v13 != v8 then goto L21131c;
  #L211300.  if v5 != 0 then goto L21131c;
  #L211304.  v8:= 1L;
  #L211308.  v6:= v6 - v8 @kind long;
  #L21130a.  v1:= 1I;
  #L21130c.  v10:= v10 + 1;
  #L211310.  v5:= v5 + 1;
  #L211314.  v8:= v15 @kind object;
  #L211316.  v9:= v16 @kind object;
  #L21131a.  goto L211244;
  #L21131c.  if v5 == 0 then goto L211324;
  #L211320.  v2:= 1I;
  #L211322.  goto L21135c;
  #L211324.  v1:= new `java.lang.NumberFormatException`;
  #L211328.  v2:= new `java.lang.StringBuilder`;
  #L21132c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L211332.  v3:= "Expected leading [0-9] or '-' character but was " @kind object;
  #L211336.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21133c.  call temp:= `toHexString`(v13) @signature `Li/c;.toHexString:(B)Ljava/lang/String;` @kind static;
  #L211342.  v3:= temp @kind object;
  #L211344.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21134a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L211350.  v2:= temp @kind object;
  #L211352.  call `<init>`(v1, v2) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L211358.  throw v1;
  #L21135a.  v15:= v8 @kind object;
  #L21135c.  if v10 != v11 then goto L21137a;
  #L211360.  call temp:= `pop`(v15) @signature `Li/u;.pop:()Li/u;` @kind virtual;
  #L211366.  v8:= temp @kind object;
  #L211368.  v0.`i.e.f` @type ^`i.u` := v8 @kind object;
  #L21136c.  v8:= `@@i.v.c` @type ^`i.v` @kind object;
  #L211370.  v9:= v15 @kind object;
  #L211372.  call `recycle`(v8, v9) @signature `Li/v;.recycle:(Li/u;)V` @kind virtual;
  #L211378.  goto L211380;
  #L21137a.  v9:= v15 @kind object;
  #L21137c.  v9.`i.u.b` @type ^`int` := v10;
  #L211380.  if v2 != 0 then goto L21138c;
  #L211384.  v8:= v0.`i.e.f` @type ^`i.u` @kind object;
  #L211388.  if v8 != 0 then goto L211230;
  #L21138c.  call temp:= `size`(v17) @signature `Li/e;.size:()J` @kind virtual;
  #L211392.  v6:= temp @kind wide;
  #L211394.  v8:= (`long`) v5 @kind i2l;
  #L211396.  v6:= v6 - v8 @kind long;
  #L211398.  call `setSize$okio`(v0, v6) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L21139e.  if v1 == 0 then goto L2113a4;
  #L2113a2.  goto L2113a6;
  #L2113a4.  v3:= -v3 @kind long;
  #L2113a6.  return v3 @kind wide;
  #L2113a8.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L2113ae.  v1:= 0I;
  #L2113b0.  throw v1;
  #L2113b2.  v1:= new `java.io.EOFException`;
  #L2113b6.  call `<init>`(v1) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L2113bc.  throw v1;
}
procedure `void` `readFully`(`i.e` v3 @kind this, `byte`[] v4 @kind object) @signature `Li/e;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2128e0.  v0:= "sink" @kind object;
  #L2128e4.  call `checkParameterIsNotNull`(v4, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2128ea.  v0:= 0I;
  #L2128ec.  v1:= length @variable v4;
  #L2128ee.  if v0 >= v1 then goto L212914;
  #L2128f2.  v1:= length @variable v4;
  #L2128f4.  v1:= v1 - v0 @kind int;
  #L2128f6.  call temp:= `read`(v3, v4, v0, v1) @signature `Li/e;.read:([BII)I` @kind virtual;
  #L2128fc.  v1:= temp;
  #L2128fe.  v2:= -1I;
  #L212900.  if v1 == v2 then goto L212908;
  #L212904.  v0:= v0 + v1 @kind int;
  #L212906.  goto L2128ec;
  #L212908.  v4:= new `java.io.EOFException`;
  #L21290c.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L212912.  throw v4;
  #L212914.  return @kind void;
}
procedure `long` `readHexadecimalUnsignedLong`(`i.e` v15 @kind this) @signature `Li/e;.readHexadecimalUnsignedLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L2113d0.  call temp:= `size`(v15) @signature `Li/e;.size:()J` @kind virtual;
  #L2113d6.  v0:= temp @kind wide;
  #L2113d8.  v2:= 0L;
  #L2113dc.  v4:= lcmp(v0, v2);
  #L2113e0.  if v4 == 0 then goto L211548;
  #L2113e4.  v0:= 0I;
  #L2113e6.  v4:= v2 @kind wide;
  #L2113e8.  v1:= 0I;
  #L2113ea.  v6:= v15.`i.e.f` @type ^`i.u` @kind object;
  #L2113ee.  if v6 == 0 then goto L21153e;
  #L2113f2.  v7:= v6.`i.u.a` @type ^`byte`[] @kind object;
  #L2113f6.  v8:= v6.`i.u.b` @type ^`int`;
  #L2113fa.  v9:= v6.`i.u.c` @type ^`int`;
  #L2113fe.  if v8 >= v9 then goto L2114fe;
  #L211402.  v10:= v7[v8] @kind byte;
  #L211406.  v11:= 48I;
  #L21140a.  v11:= (`byte`) v11 @kind i2b;
  #L21140c.  if v10 < v11 then goto L211420;
  #L211410.  v12:= 57I;
  #L211414.  v12:= (`byte`) v12 @kind i2b;
  #L211416.  if v10 > v12 then goto L211420;
  #L21141a.  v11:= v10 - v11 @kind int;
  #L21141e.  goto L211454;
  #L211420.  v11:= 97I;
  #L211424.  v11:= (`byte`) v11 @kind i2b;
  #L211426.  if v10 < v11 then goto L21143e;
  #L21142a.  v12:= 102I;
  #L21142e.  v12:= (`byte`) v12 @kind i2b;
  #L211430.  if v10 > v12 then goto L21143e;
  #L211434.  v11:= v10 - v11 @kind int;
  #L211438.  v11:= v11 + 10;
  #L21143c.  goto L211454;
  #L21143e.  v11:= 65I;
  #L211442.  v11:= (`byte`) v11 @kind i2b;
  #L211444.  if v10 < v11 then goto L2114c0;
  #L211448.  v12:= 70I;
  #L21144c.  v12:= (`byte`) v12 @kind i2b;
  #L21144e.  if v10 > v12 then goto L2114c0;
  #L211452.  goto L211434;
  #L211454.  v12:= -3.105036184601418E231D;
  #L211458.  v12:= v12 ^& v4 @kind long;
  #L21145a.  v14:= lcmp(v12, v2);
  #L21145e.  if v14 != 0 then goto L211474;
  #L211462.  v10:= 4I;
  #L211464.  v4:= v4 ^< v10 @kind long;
  #L211466.  v10:= (`long`) v11 @kind i2l;
  #L211468.  v4:= v4 ^| v10 @kind long;
  #L21146a.  v8:= v8 + 1;
  #L21146e.  v0:= v0 + 1;
  #L211472.  goto L2113fe;
  #L211474.  v0:= new `i.e`;
  #L211478.  call `<init>`(v0) @signature `Li/e;.<init>:()V` @kind direct;
  #L21147e.  call temp:= `writeHexadecimalUnsignedLong`(v0, v4) @signature `Li/e;.writeHexadecimalUnsignedLong:(J)Li/e;` @kind virtual;
  #L211484.  call temp:= `writeByte`(v0, v10) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L21148a.  v1:= new `java.lang.NumberFormatException`;
  #L21148e.  v2:= new `java.lang.StringBuilder`;
  #L211492.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L211498.  v3:= "Number too large: " @kind object;
  #L21149c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2114a2.  call temp:= `readUtf8`(v0) @signature `Li/e;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L2114a8.  v0:= temp @kind object;
  #L2114aa.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2114b0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2114b6.  v0:= temp @kind object;
  #L2114b8.  call `<init>`(v1, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2114be.  throw v1;
  #L2114c0.  if v0 == 0 then goto L2114c8;
  #L2114c4.  v1:= 1I;
  #L2114c6.  goto L2114fe;
  #L2114c8.  v0:= new `java.lang.NumberFormatException`;
  #L2114cc.  v1:= new `java.lang.StringBuilder`;
  #L2114d0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2114d6.  v2:= "Expected leading [0-9a-fA-F] character but was " @kind object;
  #L2114da.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2114e0.  call temp:= `toHexString`(v10) @signature `Li/c;.toHexString:(B)Ljava/lang/String;` @kind static;
  #L2114e6.  v2:= temp @kind object;
  #L2114e8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2114ee.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2114f4.  v1:= temp @kind object;
  #L2114f6.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2114fc.  throw v0;
  #L2114fe.  if v8 != v9 then goto L21151a;
  #L211502.  call temp:= `pop`(v6) @signature `Li/u;.pop:()Li/u;` @kind virtual;
  #L211508.  v7:= temp @kind object;
  #L21150a.  v15.`i.e.f` @type ^`i.u` := v7 @kind object;
  #L21150e.  v7:= `@@i.v.c` @type ^`i.v` @kind object;
  #L211512.  call `recycle`(v7, v6) @signature `Li/v;.recycle:(Li/u;)V` @kind virtual;
  #L211518.  goto L21151e;
  #L21151a.  v6.`i.u.b` @type ^`int` := v8;
  #L21151e.  if v1 != 0 then goto L21152a;
  #L211522.  v6:= v15.`i.e.f` @type ^`i.u` @kind object;
  #L211526.  if v6 != 0 then goto L2113ea;
  #L21152a.  call temp:= `size`(v15) @signature `Li/e;.size:()J` @kind virtual;
  #L211530.  v1:= temp @kind wide;
  #L211532.  v6:= (`long`) v0 @kind i2l;
  #L211534.  v1:= v1 - v6 @kind long;
  #L211536.  call `setSize$okio`(v15, v1) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L21153c.  return v4 @kind wide;
  #L21153e.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L211544.  v0:= 0I;
  #L211546.  throw v0;
  #L211548.  v0:= new `java.io.EOFException`;
  #L21154c.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L211552.  throw v0;
}
procedure `int` `readInt`(`i.e` v8 @kind this) @signature `Li/e;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L21077c.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L210782.  v0:= temp @kind wide;
  #L210784.  v2:= 4L;
  #L210788.  v4:= lcmp(v0, v2);
  #L21078c.  if v4 < 0 then goto L210876;
  #L210790.  v0:= v8.`i.e.f` @type ^`i.u` @kind object;
  #L210794.  if v0 == 0 then goto L21086c;
  #L210798.  v1:= v0.`i.u.b` @type ^`int`;
  #L21079c.  v4:= v0.`i.u.c` @type ^`int`;
  #L2107a0.  v5:= v4 - v1 @kind int;
  #L2107a4.  v5:= (`long`) v5 @kind i2l;
  #L2107a6.  v7:= lcmp(v5, v2);
  #L2107aa.  if v7 >= 0 then goto L2107f2;
  #L2107ae.  call temp:= `readByte`(v8) @signature `Li/e;.readByte:()B` @kind virtual;
  #L2107b4.  v0:= temp;
  #L2107b6.  v0:= v0 ^& 255;
  #L2107ba.  v0:= v0 ^< 24;
  #L2107be.  call temp:= `readByte`(v8) @signature `Li/e;.readByte:()B` @kind virtual;
  #L2107c4.  v1:= temp;
  #L2107c6.  v1:= v1 ^& 255;
  #L2107ca.  v1:= v1 ^< 16;
  #L2107ce.  v0:= v0 ^| v1 @kind int;
  #L2107d0.  call temp:= `readByte`(v8) @signature `Li/e;.readByte:()B` @kind virtual;
  #L2107d6.  v1:= temp;
  #L2107d8.  v1:= v1 ^& 255;
  #L2107dc.  v1:= v1 ^< 8;
  #L2107e0.  v0:= v0 ^| v1 @kind int;
  #L2107e2.  call temp:= `readByte`(v8) @signature `Li/e;.readByte:()B` @kind virtual;
  #L2107e8.  v1:= temp;
  #L2107ea.  v1:= v1 ^& 255;
  #L2107ee.  v0:= v0 ^| v1 @kind int;
  #L2107f0.  goto L21086a;
  #L2107f2.  v5:= v0.`i.u.a` @type ^`byte`[] @kind object;
  #L2107f6.  v6:= v1 + 1;
  #L2107fa.  v1:= v5[v1] @kind byte;
  #L2107fe.  v1:= v1 ^& 255;
  #L210802.  v1:= v1 ^< 24;
  #L210806.  v7:= v6 + 1;
  #L21080a.  v6:= v5[v6] @kind byte;
  #L21080e.  v6:= v6 ^& 255;
  #L210812.  v6:= v6 ^< 16;
  #L210816.  v1:= v1 ^| v6 @kind int;
  #L210818.  v6:= v7 + 1;
  #L21081c.  v7:= v5[v7] @kind byte;
  #L210820.  v7:= v7 ^& 255;
  #L210824.  v7:= v7 ^< 8;
  #L210828.  v1:= v1 ^| v7 @kind int;
  #L21082a.  v7:= v6 + 1;
  #L21082e.  v5:= v5[v6] @kind byte;
  #L210832.  v5:= v5 ^& 255;
  #L210836.  v1:= v1 ^| v5 @kind int;
  #L210838.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L21083e.  v5:= temp @kind wide;
  #L210840.  v5:= v5 - v2 @kind long;
  #L210842.  call `setSize$okio`(v8, v5) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L210848.  if v7 != v4 then goto L210864;
  #L21084c.  call temp:= `pop`(v0) @signature `Li/u;.pop:()Li/u;` @kind virtual;
  #L210852.  v2:= temp @kind object;
  #L210854.  v8.`i.e.f` @type ^`i.u` := v2 @kind object;
  #L210858.  v2:= `@@i.v.c` @type ^`i.v` @kind object;
  #L21085c.  call `recycle`(v2, v0) @signature `Li/v;.recycle:(Li/u;)V` @kind virtual;
  #L210862.  goto L210868;
  #L210864.  v0.`i.u.b` @type ^`int` := v7;
  #L210868.  v0:= v1;
  #L21086a.  return v0;
  #L21086c.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L210872.  v0:= 0I;
  #L210874.  throw v0;
  #L210876.  v0:= new `java.io.EOFException`;
  #L21087a.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L210880.  throw v0;
}
procedure `int` `readIntLe`(`i.e` v1 @kind this) @signature `Li/e;.readIntLe:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L210894.  call temp:= `readInt`(v1) @signature `Li/e;.readInt:()I` @kind virtual;
  #L21089a.  v0:= temp;
  #L21089c.  call temp:= `reverseBytes`(v0) @signature `Li/c;.reverseBytes:(I)I` @kind static;
  #L2108a2.  v0:= temp;
  #L2108a4.  return v0;
}
procedure `short` `readShort`(`i.e` v8 @kind this) @signature `Li/e;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L212790.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L212796.  v0:= temp @kind wide;
  #L212798.  v2:= 2L;
  #L21279c.  v4:= lcmp(v0, v2);
  #L2127a0.  if v4 < 0 then goto L212840;
  #L2127a4.  v0:= v8.`i.e.f` @type ^`i.u` @kind object;
  #L2127a8.  if v0 == 0 then goto L212836;
  #L2127ac.  v1:= v0.`i.u.b` @type ^`int`;
  #L2127b0.  v4:= v0.`i.u.c` @type ^`int`;
  #L2127b4.  v5:= v4 - v1 @kind int;
  #L2127b8.  v6:= 2I;
  #L2127ba.  if v5 >= v6 then goto L2127e0;
  #L2127be.  call temp:= `readByte`(v8) @signature `Li/e;.readByte:()B` @kind virtual;
  #L2127c4.  v0:= temp;
  #L2127c6.  v0:= v0 ^& 255;
  #L2127ca.  v0:= v0 ^< 8;
  #L2127ce.  call temp:= `readByte`(v8) @signature `Li/e;.readByte:()B` @kind virtual;
  #L2127d4.  v1:= temp;
  #L2127d6.  v1:= v1 ^& 255;
  #L2127da.  v0:= v0 ^| v1 @kind int;
  #L2127dc.  v0:= (`short`) v0 @kind i2s;
  #L2127de.  goto L212834;
  #L2127e0.  v5:= v0.`i.u.a` @type ^`byte`[] @kind object;
  #L2127e4.  v6:= v1 + 1;
  #L2127e8.  v1:= v5[v1] @kind byte;
  #L2127ec.  v1:= v1 ^& 255;
  #L2127f0.  v1:= v1 ^< 8;
  #L2127f4.  v7:= v6 + 1;
  #L2127f8.  v5:= v5[v6] @kind byte;
  #L2127fc.  v5:= v5 ^& 255;
  #L212800.  v1:= v1 ^| v5 @kind int;
  #L212802.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L212808.  v5:= temp @kind wide;
  #L21280a.  v5:= v5 - v2 @kind long;
  #L21280c.  call `setSize$okio`(v8, v5) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L212812.  if v7 != v4 then goto L21282e;
  #L212816.  call temp:= `pop`(v0) @signature `Li/u;.pop:()Li/u;` @kind virtual;
  #L21281c.  v2:= temp @kind object;
  #L21281e.  v8.`i.e.f` @type ^`i.u` := v2 @kind object;
  #L212822.  v2:= `@@i.v.c` @type ^`i.v` @kind object;
  #L212826.  call `recycle`(v2, v0) @signature `Li/v;.recycle:(Li/u;)V` @kind virtual;
  #L21282c.  goto L212832;
  #L21282e.  v0.`i.u.b` @type ^`int` := v7;
  #L212832.  v0:= (`short`) v1 @kind i2s;
  #L212834.  return v0;
  #L212836.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L21283c.  v0:= 0I;
  #L21283e.  throw v0;
  #L212840.  v0:= new `java.io.EOFException`;
  #L212844.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L21284a.  throw v0;
}
procedure `short` `readShortLe`(`i.e` v1 @kind this) @signature `Li/e;.readShortLe:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21285c.  call temp:= `readShort`(v1) @signature `Li/e;.readShort:()S` @kind virtual;
  #L212862.  v0:= temp;
  #L212864.  call temp:= `reverseBytes`(v0) @signature `Li/c;.reverseBytes:(S)S` @kind static;
  #L21286a.  v0:= temp;
  #L21286c.  return v0;
}
procedure `java.lang.String` `readString`(`i.e` v7 @kind this, `long` v8 , `java.nio.charset.Charset` v10 @kind object) @signature `Li/e;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L210b78.  v0:= "charset" @kind object;
  #L210b7c.  call `checkParameterIsNotNull`(v10, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L210b82.  v0:= 0L;
  #L210b86.  v2:= lcmp(v8, v0);
  #L210b8a.  if v2 < 0 then goto L210ba2;
  #L210b8e.  v0:= 2147483647I;
  #L210b94.  v0:= (`long`) v0 @kind i2l;
  #L210b96.  v3:= lcmp(v8, v0);
  #L210b9a.  if v3 > 0 then goto L210ba2;
  #L210b9e.  v0:= 1I;
  #L210ba0.  goto L210ba4;
  #L210ba2.  v0:= 0I;
  #L210ba4.  if v0 == 0 then goto L210c4e;
  #L210ba8.  v0:= v7.`i.e.g` @type ^`long` @kind wide;
  #L210bac.  v3:= lcmp(v0, v8);
  #L210bb0.  if v3 < 0 then goto L210c42;
  #L210bb4.  if v2 != 0 then goto L210bbe;
  #L210bb8.  v8:= "" @kind object;
  #L210bbc.  return v8 @kind object;
  #L210bbe.  v0:= v7.`i.e.f` @type ^`i.u` @kind object;
  #L210bc2.  if v0 == 0 then goto L210c38;
  #L210bc6.  v1:= v0.`i.u.b` @type ^`int`;
  #L210bca.  v2:= (`long`) v1 @kind i2l;
  #L210bcc.  v2:= v2 + v8 @kind long;
  #L210bce.  v4:= v0.`i.u.c` @type ^`int`;
  #L210bd2.  v4:= (`long`) v4 @kind i2l;
  #L210bd4.  v6:= lcmp(v2, v4);
  #L210bd8.  if v6 <= 0 then goto L210bf0;
  #L210bdc.  call temp:= `readByteArray`(v7, v8) @signature `Li/e;.readByteArray:(J)[B` @kind virtual;
  #L210be2.  v8:= temp @kind object;
  #L210be4.  v9:= new `java.lang.String`;
  #L210be8.  call `<init>`(v9, v8, v10) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L210bee.  return v9 @kind object;
  #L210bf0.  v2:= v0.`i.u.a` @type ^`byte`[] @kind object;
  #L210bf4.  v3:= (`int`) v8 @kind l2i;
  #L210bf6.  v4:= new `java.lang.String`;
  #L210bfa.  call `<init>`(v4, v2, v1, v3, v10) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L210c00.  v10:= v0.`i.u.b` @type ^`int`;
  #L210c04.  v10:= v10 + v3 @kind int;
  #L210c06.  v0.`i.u.b` @type ^`int` := v10;
  #L210c0a.  v1:= v7.`i.e.g` @type ^`long` @kind wide;
  #L210c0e.  v1:= v1 - v8 @kind long;
  #L210c10.  v7.`i.e.g` @type ^`long` := v1 @kind wide;
  #L210c14.  v8:= v0.`i.u.b` @type ^`int`;
  #L210c18.  v9:= v0.`i.u.c` @type ^`int`;
  #L210c1c.  if v8 != v9 then goto L210c36;
  #L210c20.  call temp:= `pop`(v0) @signature `Li/u;.pop:()Li/u;` @kind virtual;
  #L210c26.  v8:= temp @kind object;
  #L210c28.  v7.`i.e.f` @type ^`i.u` := v8 @kind object;
  #L210c2c.  v8:= `@@i.v.c` @type ^`i.v` @kind object;
  #L210c30.  call `recycle`(v8, v0) @signature `Li/v;.recycle:(Li/u;)V` @kind virtual;
  #L210c36.  return v4 @kind object;
  #L210c38.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L210c3e.  v8:= 0I;
  #L210c40.  throw v8;
  #L210c42.  v8:= new `java.io.EOFException`;
  #L210c46.  call `<init>`(v8) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L210c4c.  throw v8;
  #L210c4e.  v10:= new `java.lang.StringBuilder`;
  #L210c52.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L210c58.  v0:= "byteCount: " @kind object;
  #L210c5c.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L210c62.  call temp:= `append`(v10, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L210c68.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L210c6e.  v8:= temp @kind object;
  #L210c70.  v9:= new `java.lang.IllegalArgumentException`;
  #L210c74.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L210c7a.  v8:= temp @kind object;
  #L210c7c.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L210c82.  throw v9;
}
procedure `java.lang.String` `readString`(`i.e` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Li/e;.readString:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L210b50.  v0:= "charset" @kind object;
  #L210b54.  call `checkParameterIsNotNull`(v3, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L210b5a.  v0:= v2.`i.e.g` @type ^`long` @kind wide;
  #L210b5e.  call temp:= `readString`(v2, v0, v3) @signature `Li/e;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L210b64.  v3:= temp @kind object;
  #L210b66.  return v3 @kind object;
}
procedure `java.lang.String` `readUtf8`(`i.e` v3 @kind this) @signature `Li/e;.readUtf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L210c94.  v0:= v3.`i.e.g` @type ^`long` @kind wide;
  #L210c98.  v2:= `@@kotlin.a0.d.a` @type ^`java.nio.charset.Charset` @kind object;
  #L210c9c.  call temp:= `readString`(v3, v0, v2) @signature `Li/e;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L210ca2.  v0:= temp @kind object;
  #L210ca4.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8`(`i.e` v1 @kind this, `long` v2 ) @signature `Li/e;.readUtf8:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L210cb8.  v0:= `@@kotlin.a0.d.a` @type ^`java.nio.charset.Charset` @kind object;
  #L210cbc.  call temp:= `readString`(v1, v2, v0) @signature `Li/e;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L210cc2.  v2:= temp @kind object;
  #L210cc4.  return v2 @kind object;
}
procedure `int` `readUtf8CodePoint`(`i.e` v12 @kind this) @signature `Li/e;.readUtf8CodePoint:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L2108b8.  call temp:= `size`(v12) @signature `Li/e;.size:()J` @kind virtual;
  #L2108be.  v0:= temp @kind wide;
  #L2108c0.  v2:= 0L;
  #L2108c4.  v4:= lcmp(v0, v2);
  #L2108c8.  if v4 == 0 then goto L210a22;
  #L2108cc.  call temp:= `getByte`(v12, v2) @signature `Li/e;.getByte:(J)B` @kind virtual;
  #L2108d2.  v0:= temp;
  #L2108d4.  v1:= v0 ^& 128;
  #L2108d8.  v2:= 1I;
  #L2108da.  v3:= 128I;
  #L2108de.  v4:= 65533I;
  #L2108e4.  if v1 != 0 then goto L2108f4;
  #L2108e8.  v1:= v0 ^& 127;
  #L2108ec.  v5:= 0I;
  #L2108ee.  v5:= 1I;
  #L2108f0.  v6:= 0I;
  #L2108f2.  goto L21093a;
  #L2108f4.  v1:= v0 ^& 224;
  #L2108f8.  v5:= 192I;
  #L2108fc.  if v1 != v5 then goto L21090c;
  #L210900.  v1:= v0 ^& 31;
  #L210904.  v5:= 2I;
  #L210906.  v6:= 128I;
  #L21090a.  goto L21093a;
  #L21090c.  v1:= v0 ^& 240;
  #L210910.  v5:= 224I;
  #L210914.  if v1 != v5 then goto L210924;
  #L210918.  v1:= v0 ^& 15;
  #L21091c.  v5:= 3I;
  #L21091e.  v6:= 2048I;
  #L210922.  goto L21093a;
  #L210924.  v1:= v0 ^& 248;
  #L210928.  v5:= 240I;
  #L21092c.  if v1 != v5 then goto L210a16;
  #L210930.  v1:= v0 ^& 7;
  #L210934.  v5:= 4I;
  #L210936.  v6:= 65536I;
  #L21093a.  call temp:= `size`(v12) @signature `Li/e;.size:()J` @kind virtual;
  #L210940.  v7:= temp @kind wide;
  #L210942.  v9:= (`long`) v5 @kind i2l;
  #L210944.  v11:= lcmp(v7, v9);
  #L210948.  if v11 < 0 then goto L2109ae;
  #L21094c.  if v2 >= v5 then goto L21097a;
  #L210950.  v7:= (`long`) v2 @kind i2l;
  #L210952.  call temp:= `getByte`(v12, v7) @signature `Li/e;.getByte:(J)B` @kind virtual;
  #L210958.  v0:= temp;
  #L21095a.  v11:= v0 ^& 192;
  #L21095e.  if v11 != v3 then goto L210972;
  #L210962.  v1:= v1 ^< 6;
  #L210966.  v0:= v0 ^& 63;
  #L21096a.  v1:= v1 ^| v0 @kind int;
  #L21096c.  v2:= v2 + 1;
  #L210970.  goto L21094c;
  #L210972.  call `skip`(v12, v7) @signature `Li/e;.skip:(J)V` @kind virtual;
  #L210978.  goto L210a20;
  #L21097a.  call `skip`(v12, v9) @signature `Li/e;.skip:(J)V` @kind virtual;
  #L210980.  v0:= 1114111I;
  #L210986.  if v1 <= v0 then goto L21098c;
  #L21098a.  goto L210a20;
  #L21098c.  v0:= 57343I;
  #L210992.  v2:= 55296I;
  #L210998.  if v2 <= v1 then goto L21099e;
  #L21099c.  goto L2109a4;
  #L21099e.  if v0 < v1 then goto L2109a4;
  #L2109a2.  goto L210a20;
  #L2109a4.  if v1 >= v6 then goto L2109aa;
  #L2109a8.  goto L210a20;
  #L2109aa.  v4:= v1;
  #L2109ac.  goto L210a20;
  #L2109ae.  v1:= new `java.io.EOFException`;
  #L2109b2.  v2:= new `java.lang.StringBuilder`;
  #L2109b6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2109bc.  v3:= "size < " @kind object;
  #L2109c0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2109c6.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2109cc.  v3:= ": " @kind object;
  #L2109d0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2109d6.  call temp:= `size`(v12) @signature `Li/e;.size:()J` @kind virtual;
  #L2109dc.  v3:= temp @kind wide;
  #L2109de.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2109e4.  v3:= " (to read code point prefixed " @kind object;
  #L2109e8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2109ee.  call temp:= `toHexString`(v0) @signature `Li/c;.toHexString:(B)Ljava/lang/String;` @kind static;
  #L2109f4.  v0:= temp @kind object;
  #L2109f6.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2109fc.  v0:= 41I;
  #L210a00.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L210a06.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L210a0c.  v0:= temp @kind object;
  #L210a0e.  call `<init>`(v1, v0) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L210a14.  throw v1;
  #L210a16.  v0:= 1L;
  #L210a1a.  call `skip`(v12, v0) @signature `Li/e;.skip:(J)V` @kind virtual;
  #L210a20.  return v4;
  #L210a22.  v0:= new `java.io.EOFException`;
  #L210a26.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L210a2c.  throw v0;
}
procedure `java.lang.String` `readUtf8LineStrict`(`i.e` v2 @kind this) @signature `Li/e;.readUtf8LineStrict:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L210cd8.  v0:= 9223372036854775807L;
  #L210ce2.  call temp:= `readUtf8LineStrict`(v2, v0) @signature `Li/e;.readUtf8LineStrict:(J)Ljava/lang/String;` @kind virtual;
  #L210ce8.  v0:= temp @kind object;
  #L210cea.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8LineStrict`(`i.e` v11 @kind this, `long` v12 ) @signature `Li/e;.readUtf8LineStrict:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L210cfc.  v0:= 0L;
  #L210d00.  v2:= lcmp(v12, v0);
  #L210d04.  if v2 < 0 then goto L210d0c;
  #L210d08.  v0:= 1I;
  #L210d0a.  goto L210d0e;
  #L210d0c.  v0:= 0I;
  #L210d0e.  if v0 == 0 then goto L210e2e;
  #L210d12.  v0:= 1L;
  #L210d16.  v2:= 9223372036854775807L;
  #L210d20.  v4:= lcmp(v12, v2);
  #L210d24.  if v4 != 0 then goto L210d2a;
  #L210d28.  goto L210d2e;
  #L210d2a.  v2:= v12 + v0 @kind long;
  #L210d2e.  v4:= 10I;
  #L210d32.  v10:= (`byte`) v4 @kind i2b;
  #L210d34.  v6:= 0L;
  #L210d38.  v4:= v11 @kind object;
  #L210d3a.  v5:= v10;
  #L210d3c.  v8:= v2 @kind wide;
  #L210d3e.  call temp:= `indexOf`(v4, v5, v6, v8) @signature `Li/e;.indexOf:(BJJ)J` @kind virtual;
  #L210d44.  v4:= temp @kind wide;
  #L210d46.  v6:= -1L;
  #L210d4a.  v8:= lcmp(v4, v6);
  #L210d4e.  if v8 == 0 then goto L210d5c;
  #L210d52.  call temp:= `readUtf8Line`(v11, v4) @signature `Li/b0/a;.readUtf8Line:(Li/e;J)Ljava/lang/String;` @kind static;
  #L210d58.  v12:= temp @kind object;
  #L210d5a.  goto L210d96;
  #L210d5c.  call temp:= `size`(v11) @signature `Li/e;.size:()J` @kind virtual;
  #L210d62.  v4:= temp @kind wide;
  #L210d64.  v6:= lcmp(v2, v4);
  #L210d68.  if v6 >= 0 then goto L210d98;
  #L210d6c.  v0:= v2 - v0 @kind long;
  #L210d70.  call temp:= `getByte`(v11, v0) @signature `Li/e;.getByte:(J)B` @kind virtual;
  #L210d76.  v0:= temp;
  #L210d78.  v1:= 13I;
  #L210d7c.  v1:= (`byte`) v1 @kind i2b;
  #L210d7e.  if v0 != v1 then goto L210d98;
  #L210d82.  call temp:= `getByte`(v11, v2) @signature `Li/e;.getByte:(J)B` @kind virtual;
  #L210d88.  v0:= temp;
  #L210d8a.  if v0 != v10 then goto L210d98;
  #L210d8e.  call temp:= `readUtf8Line`(v11, v2) @signature `Li/b0/a;.readUtf8Line:(Li/e;J)Ljava/lang/String;` @kind static;
  #L210d94.  v12:= temp @kind object;
  #L210d96.  return v12 @kind object;
  #L210d98.  v6:= new `i.e`;
  #L210d9c.  call `<init>`(v6) @signature `Li/e;.<init>:()V` @kind direct;
  #L210da2.  v2:= 0L;
  #L210da6.  v0:= 32I;
  #L210daa.  call temp:= `size`(v11) @signature `Li/e;.size:()J` @kind virtual;
  #L210db0.  v4:= temp @kind wide;
  #L210db2.  v0:= (`long`) v0 @kind i2l;
  #L210db4.  call temp:= `min`(v0, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L210dba.  v4:= temp @kind wide;
  #L210dbc.  v0:= v11 @kind object;
  #L210dbe.  v1:= v6 @kind object;
  #L210dc0.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Li/e;.copyTo:(Li/e;JJ)Li/e;` @kind virtual;
  #L210dc6.  v0:= new `java.lang.StringBuilder`;
  #L210dca.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L210dd0.  v1:= "\\n not found: limit=" @kind object;
  #L210dd4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L210dda.  call temp:= `size`(v11) @signature `Li/e;.size:()J` @kind virtual;
  #L210de0.  v1:= temp @kind wide;
  #L210de2.  call temp:= `min`(v1, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L210de8.  v12:= temp @kind wide;
  #L210dea.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L210df0.  v12:= " content=" @kind object;
  #L210df4.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L210dfa.  call temp:= `readByteString`(v6) @signature `Li/e;.readByteString:()Li/h;` @kind virtual;
  #L210e00.  v12:= temp @kind object;
  #L210e02.  call temp:= `hex`(v12) @signature `Li/h;.hex:()Ljava/lang/String;` @kind virtual;
  #L210e08.  v12:= temp @kind object;
  #L210e0a.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L210e10.  v12:= 8230I;
  #L210e14.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L210e1a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L210e20.  v12:= temp @kind object;
  #L210e22.  v13:= new `java.io.EOFException`;
  #L210e26.  call `<init>`(v13, v12) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L210e2c.  throw v13;
  #L210e2e.  v0:= new `java.lang.StringBuilder`;
  #L210e32.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L210e38.  v1:= "limit < 0: " @kind object;
  #L210e3c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L210e42.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L210e48.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L210e4e.  v12:= temp @kind object;
  #L210e50.  v13:= new `java.lang.IllegalArgumentException`;
  #L210e54.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L210e5a.  v12:= temp @kind object;
  #L210e5c.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L210e62.  throw v13;
}
procedure `boolean` `request`(`i.e` v3 @kind this, `long` v4 ) @signature `Li/e;.request:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2103ac.  v0:= v3.`i.e.g` @type ^`long` @kind wide;
  #L2103b0.  v2:= lcmp(v0, v4);
  #L2103b4.  if v2 < 0 then goto L2103bc;
  #L2103b8.  v4:= 1I;
  #L2103ba.  goto L2103be;
  #L2103bc.  v4:= 0I;
  #L2103be.  return v4;
}
procedure `void` `require`(`i.e` v3 @kind this, `long` v4 ) @signature `Li/e;.require:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L212928.  v0:= v3.`i.e.g` @type ^`long` @kind wide;
  #L21292c.  v2:= lcmp(v0, v4);
  #L212930.  if v2 < 0 then goto L212936;
  #L212934.  return @kind void;
  #L212936.  v4:= new `java.io.EOFException`;
  #L21293a.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L212940.  throw v4;
}
procedure `int` `select`(`i.e` v3 @kind this, `i.q` v4 @kind object) @signature `Li/e;.select:(Li/q;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L210a40.  v0:= "options" @kind object;
  #L210a44.  call `checkParameterIsNotNull`(v4, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L210a4a.  v0:= 0I;
  #L210a4c.  v1:= 2I;
  #L210a4e.  v2:= 0I;
  #L210a50.  call temp:= `selectPrefix$default`(v3, v4, v0, v1, v2) @signature `Li/b0/a;.selectPrefix$default:(Li/e;Li/q;ZILjava/lang/Object;)I` @kind static;
  #L210a56.  v0:= temp;
  #L210a58.  v1:= -1I;
  #L210a5a.  if v0 != v1 then goto L210a62;
  #L210a5e.  v0:= -1I;
  #L210a60.  goto L210a7e;
  #L210a62.  call temp:= `getByteStrings$okio`(v4) @signature `Li/q;.getByteStrings$okio:()[Li/h;` @kind virtual;
  #L210a68.  v4:= temp @kind object;
  #L210a6a.  v4:= v4[v0] @kind object;
  #L210a6e.  call temp:= `size`(v4) @signature `Li/h;.size:()I` @kind virtual;
  #L210a74.  v4:= temp;
  #L210a76.  v1:= (`long`) v4 @kind i2l;
  #L210a78.  call `skip`(v3, v1) @signature `Li/e;.skip:(J)V` @kind virtual;
  #L210a7e.  return v0;
}
procedure `void` `setSize$okio`(`i.e` v0 @kind this, `long` v1 ) @signature `Li/e;.setSize$okio:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L212954.  v0.`i.e.g` @type ^`long` := v1 @kind wide;
  #L212958.  return @kind void;
}
procedure `long` `size`(`i.e` v2 @kind this) @signature `Li/e;.size:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L211564.  v0:= v2.`i.e.g` @type ^`long` @kind wide;
  #L211568.  return v0 @kind wide;
}
procedure `void` `skip`(`i.e` v7 @kind this, `long` v8 ) @signature `Li/e;.skip:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L21296c.  v0:= 0L;
  #L212970.  v2:= lcmp(v8, v0);
  #L212974.  if v2 <= 0 then goto L2129e4;
  #L212978.  v0:= v7.`i.e.f` @type ^`i.u` @kind object;
  #L21297c.  if v0 == 0 then goto L2129d8;
  #L212980.  v1:= v0.`i.u.c` @type ^`int`;
  #L212984.  v2:= v0.`i.u.b` @type ^`int`;
  #L212988.  v1:= v1 - v2 @kind int;
  #L21298a.  v1:= (`long`) v1 @kind i2l;
  #L21298c.  call temp:= `min`(v8, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L212992.  v1:= temp @kind wide;
  #L212994.  v2:= (`int`) v1 @kind l2i;
  #L212996.  call temp:= `size`(v7) @signature `Li/e;.size:()J` @kind virtual;
  #L21299c.  v3:= temp @kind wide;
  #L21299e.  v5:= (`long`) v2 @kind i2l;
  #L2129a0.  v3:= v3 - v5 @kind long;
  #L2129a2.  call `setSize$okio`(v7, v3) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L2129a8.  v8:= v8 - v5 @kind long;
  #L2129aa.  v1:= v0.`i.u.b` @type ^`int`;
  #L2129ae.  v1:= v1 + v2 @kind int;
  #L2129b0.  v0.`i.u.b` @type ^`int` := v1;
  #L2129b4.  v1:= v0.`i.u.b` @type ^`int`;
  #L2129b8.  v2:= v0.`i.u.c` @type ^`int`;
  #L2129bc.  if v1 != v2 then goto L21296c;
  #L2129c0.  call temp:= `pop`(v0) @signature `Li/u;.pop:()Li/u;` @kind virtual;
  #L2129c6.  v1:= temp @kind object;
  #L2129c8.  v7.`i.e.f` @type ^`i.u` := v1 @kind object;
  #L2129cc.  v1:= `@@i.v.c` @type ^`i.v` @kind object;
  #L2129d0.  call `recycle`(v1, v0) @signature `Li/v;.recycle:(Li/u;)V` @kind virtual;
  #L2129d6.  goto L21296c;
  #L2129d8.  v8:= new `java.io.EOFException`;
  #L2129dc.  call `<init>`(v8) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L2129e2.  throw v8;
  #L2129e4.  return @kind void;
}
procedure `i.h` `snapshot`(`i.e` v5 @kind this) @signature `Li/e;.snapshot:()Li/h;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L212568.  call temp:= `size`(v5) @signature `Li/e;.size:()J` @kind virtual;
  #L21256e.  v0:= temp @kind wide;
  #L212570.  v2:= 2147483647I;
  #L212576.  v2:= (`long`) v2 @kind i2l;
  #L212578.  v4:= lcmp(v0, v2);
  #L21257c.  if v4 > 0 then goto L212584;
  #L212580.  v0:= 1I;
  #L212582.  goto L212586;
  #L212584.  v0:= 0I;
  #L212586.  if v0 == 0 then goto L21259e;
  #L21258a.  call temp:= `size`(v5) @signature `Li/e;.size:()J` @kind virtual;
  #L212590.  v0:= temp @kind wide;
  #L212592.  v1:= (`int`) v0 @kind l2i;
  #L212594.  call temp:= `snapshot`(v5, v1) @signature `Li/e;.snapshot:(I)Li/h;` @kind virtual;
  #L21259a.  v0:= temp @kind object;
  #L21259c.  return v0 @kind object;
  #L21259e.  v0:= new `java.lang.StringBuilder`;
  #L2125a2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2125a8.  v1:= "size > Int.MAX_VALUE: " @kind object;
  #L2125ac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2125b2.  call temp:= `size`(v5) @signature `Li/e;.size:()J` @kind virtual;
  #L2125b8.  v1:= temp @kind wide;
  #L2125ba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2125c0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2125c6.  v0:= temp @kind object;
  #L2125c8.  v1:= new `java.lang.IllegalStateException`;
  #L2125cc.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2125d2.  v0:= temp @kind object;
  #L2125d4.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2125da.  throw v1;
}
procedure `i.h` `snapshot`(`i.e` v8 @kind this, `int` v9 ) @signature `Li/e;.snapshot:(I)Li/h;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2125ec.  if v9 != 0 then goto L2125f6;
  #L2125f0.  v9:= `@@i.h.i` @type ^`i.h` @kind object;
  #L2125f4.  goto L2126ba;
  #L2125f6.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L2125fc.  v0:= temp @kind wide;
  #L2125fe.  v2:= 0L;
  #L212602.  v4:= (`long`) v9 @kind i2l;
  #L212604.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Li/c;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L21260a.  v0:= v8.`i.e.f` @type ^`i.u` @kind object;
  #L21260e.  v1:= 0I;
  #L212610.  v3:= v0 @kind object;
  #L212612.  v0:= 0I;
  #L212614.  v2:= 0I;
  #L212616.  v4:= 0I;
  #L212618.  if v0 >= v9 then goto L212652;
  #L21261c.  if v3 == 0 then goto L21264a;
  #L212620.  v4:= v3.`i.u.c` @type ^`int`;
  #L212624.  v5:= v3.`i.u.b` @type ^`int`;
  #L212628.  if v4 == v5 then goto L21263a;
  #L21262c.  v4:= v4 - v5 @kind int;
  #L21262e.  v0:= v0 + v4 @kind int;
  #L212630.  v2:= v2 + 1;
  #L212634.  v3:= v3.`i.u.f` @type ^`i.u` @kind object;
  #L212638.  goto L212616;
  #L21263a.  v9:= new `java.lang.AssertionError`;
  #L21263e.  v0:= "s.limit == s.pos" @kind object;
  #L212642.  call `<init>`(v9, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L212648.  throw v9;
  #L21264a.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L212650.  throw v4;
  #L212652.  v0:= new `byte`[][v2];
  #L212656.  v2:= v2 * 2;
  #L21265a.  v2:= new `int`[v2];
  #L21265e.  v3:= v8.`i.e.f` @type ^`i.u` @kind object;
  #L212662.  v5:= v3 @kind object;
  #L212664.  v3:= 0I;
  #L212666.  if v1 >= v9 then goto L2126b0;
  #L21266a.  if v5 == 0 then goto L2126a8;
  #L21266e.  v6:= v5.`i.u.a` @type ^`byte`[] @kind object;
  #L212672.  v0[v3]:= v6 @kind object;
  #L212676.  v6:= v5.`i.u.c` @type ^`int`;
  #L21267a.  v7:= v5.`i.u.b` @type ^`int`;
  #L21267e.  v6:= v6 - v7 @kind int;
  #L212680.  v1:= v1 + v6 @kind int;
  #L212682.  call temp:= `min`(v1, v9) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L212688.  v6:= temp;
  #L21268a.  v2[v3]:= v6;
  #L21268e.  v6:= length @variable v0;
  #L212690.  v6:= v6 + v3 @kind int;
  #L212692.  v7:= v5.`i.u.b` @type ^`int`;
  #L212696.  v2[v6]:= v7;
  #L21269a.  v6:= 1I;
  #L21269c.  v5.`i.u.d` @type ^`boolean` := v6 @kind boolean;
  #L2126a0.  v3:= v3 + v6 @kind int;
  #L2126a2.  v5:= v5.`i.u.f` @type ^`i.u` @kind object;
  #L2126a6.  goto L212666;
  #L2126a8.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L2126ae.  throw v4;
  #L2126b0.  v9:= new `i.w`;
  #L2126b4.  call `<init>`(v9, v0, v2) @signature `Li/w;.<init>:([[B[I)V` @kind direct;
  #L2126ba.  return v9 @kind object;
}
procedure `i.a0` `timeout`(`i.e` v1 @kind this) @signature `Li/e;.timeout:()Li/a0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L212778.  v0:= `@@i.a0.NONE` @type ^`i.a0` @kind object;
  #L21277c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`i.e` v1 @kind this) @signature `Li/e;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L210e74.  call temp:= `snapshot`(v1) @signature `Li/e;.snapshot:()Li/h;` @kind virtual;
  #L210e7a.  v0:= temp @kind object;
  #L210e7c.  call temp:= `toString`(v0) @signature `Li/h;.toString:()Ljava/lang/String;` @kind virtual;
  #L210e82.  v0:= temp @kind object;
  #L210e84.  return v0 @kind object;
}
procedure `i.u` `writableSegment$okio`(`i.e` v3 @kind this, `int` v4 ) @signature `Li/e;.writableSegment$okio:(I)Li/u;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2126cc.  v0:= 8192I;
  #L2126d0.  v1:= 1I;
  #L2126d2.  if v4 < v1 then goto L2126dc;
  #L2126d6.  if v4 > v0 then goto L2126dc;
  #L2126da.  goto L2126de;
  #L2126dc.  v1:= 0I;
  #L2126de.  if v1 == 0 then goto L21274e;
  #L2126e2.  v1:= v3.`i.e.f` @type ^`i.u` @kind object;
  #L2126e6.  if v1 != 0 then goto L212704;
  #L2126ea.  v4:= `@@i.v.c` @type ^`i.v` @kind object;
  #L2126ee.  call temp:= `take`(v4) @signature `Li/v;.take:()Li/u;` @kind virtual;
  #L2126f4.  v4:= temp @kind object;
  #L2126f6.  v3.`i.e.f` @type ^`i.u` := v4 @kind object;
  #L2126fa.  v4.`i.u.g` @type ^`i.u` := v4 @kind object;
  #L2126fe.  v4.`i.u.f` @type ^`i.u` := v4 @kind object;
  #L212702.  goto L21273c;
  #L212704.  v2:= 0I;
  #L212706.  if v1 == 0 then goto L212746;
  #L21270a.  v1:= v1.`i.u.g` @type ^`i.u` @kind object;
  #L21270e.  if v1 == 0 then goto L21273e;
  #L212712.  v2:= v1.`i.u.c` @type ^`int`;
  #L212716.  v2:= v2 + v4 @kind int;
  #L212718.  if v2 > v0 then goto L21272a;
  #L21271c.  v4:= v1.`i.u.e` @type ^`boolean` @kind boolean;
  #L212720.  if v4 != 0 then goto L212726;
  #L212724.  goto L21272a;
  #L212726.  v4:= v1 @kind object;
  #L212728.  goto L21273c;
  #L21272a.  v4:= `@@i.v.c` @type ^`i.v` @kind object;
  #L21272e.  call temp:= `take`(v4) @signature `Li/v;.take:()Li/u;` @kind virtual;
  #L212734.  v4:= temp @kind object;
  #L212736.  call temp:= `push`(v1, v4) @signature `Li/u;.push:(Li/u;)Li/u;` @kind virtual;
  #L21273c.  return v4 @kind object;
  #L21273e.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L212744.  throw v2;
  #L212746.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L21274c.  throw v2;
  #L21274e.  v4:= new `java.lang.IllegalArgumentException`;
  #L212752.  v0:= "unexpected capacity" @kind object;
  #L212756.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L21275c.  v0:= temp @kind object;
  #L21275e.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L212764.  throw v4;
}
procedure `int` `write`(`i.e` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Li/e;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L210a90.  v0:= "source" @kind object;
  #L210a94.  call `checkParameterIsNotNull`(v7, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L210a9a.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L210aa0.  v0:= temp;
  #L210aa2.  v1:= v0;
  #L210aa4.  if v1 <= 0 then goto L210ade;
  #L210aa8.  v2:= 1I;
  #L210aaa.  call temp:= `writableSegment$okio`(v6, v2) @signature `Li/e;.writableSegment$okio:(I)Li/u;` @kind virtual;
  #L210ab0.  v2:= temp @kind object;
  #L210ab2.  v3:= v2.`i.u.c` @type ^`int`;
  #L210ab6.  v3:= v3 - 8192;
  #L210aba.  call temp:= `min`(v1, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L210ac0.  v3:= temp;
  #L210ac2.  v4:= v2.`i.u.a` @type ^`byte`[] @kind object;
  #L210ac6.  v5:= v2.`i.u.c` @type ^`int`;
  #L210aca.  call temp:= `get`(v7, v4, v5, v3) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L210ad0.  v1:= v1 - v3 @kind int;
  #L210ad2.  v4:= v2.`i.u.c` @type ^`int`;
  #L210ad6.  v4:= v4 + v3 @kind int;
  #L210ad8.  v2.`i.u.c` @type ^`int` := v4;
  #L210adc.  goto L210aa4;
  #L210ade.  v1:= v6.`i.e.g` @type ^`long` @kind wide;
  #L210ae2.  v3:= (`long`) v0 @kind i2l;
  #L210ae4.  v1:= v1 + v3 @kind long;
  #L210ae6.  v6.`i.e.g` @type ^`long` := v1 @kind wide;
  #L210aea.  return v0;
}
procedure `i.e` `write`(`i.e` v1 @kind this, `i.h` v2 @kind object) @signature `Li/e;.write:(Li/h;)Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2118b0.  v0:= "byteString" @kind object;
  #L2118b4.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2118ba.  call `write$okio`(v2, v1) @signature `Li/h;.write$okio:(Li/e;)V` @kind virtual;
  #L2118c0.  return v1 @kind object;
}
procedure `i.e` `write`(`i.e` v2 @kind this, `byte`[] v3 @kind object) @signature `Li/e;.write:([B)Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L211808.  v0:= "source" @kind object;
  #L21180c.  call `checkParameterIsNotNull`(v3, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L211812.  v0:= length @variable v3;
  #L211814.  v1:= 0I;
  #L211816.  call temp:= `write`(v2, v3, v1, v0) @signature `Li/e;.write:([BII)Li/e;` @kind virtual;
  #L21181c.  return v2 @kind object;
}
procedure `i.e` `write`(`i.e` v9 @kind this, `byte`[] v10 @kind object, `int` v11 , `int` v12 ) @signature `Li/e;.write:([BII)Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L211830.  v0:= "source" @kind object;
  #L211834.  call `checkParameterIsNotNull`(v10, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L21183a.  v0:= length @variable v10;
  #L21183c.  v1:= (`long`) v0 @kind i2l;
  #L21183e.  v3:= (`long`) v11 @kind i2l;
  #L211840.  v7:= (`long`) v12 @kind i2l;
  #L211842.  v5:= v7 @kind wide;
  #L211844.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Li/c;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L21184a.  v12:= v12 + v11 @kind int;
  #L21184c.  if v11 >= v12 then goto L21188e;
  #L211850.  v0:= 1I;
  #L211852.  call temp:= `writableSegment$okio`(v9, v0) @signature `Li/e;.writableSegment$okio:(I)Li/u;` @kind virtual;
  #L211858.  v0:= temp @kind object;
  #L21185a.  v1:= v12 - v11 @kind int;
  #L21185e.  v2:= v0.`i.u.c` @type ^`int`;
  #L211862.  v2:= v2 - 8192;
  #L211866.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L21186c.  v1:= temp;
  #L21186e.  v2:= v0.`i.u.a` @type ^`byte`[] @kind object;
  #L211872.  v3:= v0.`i.u.c` @type ^`int`;
  #L211876.  v4:= v11 + v1 @kind int;
  #L21187a.  call temp:= `copyInto`(v10, v2, v3, v11, v4) @signature `Lkotlin/r/d;.copyInto:([B[BIII)[B` @kind static;
  #L211880.  v11:= v0.`i.u.c` @type ^`int`;
  #L211884.  v11:= v11 + v1 @kind int;
  #L211886.  v0.`i.u.c` @type ^`int` := v11;
  #L21188a.  v11:= v4;
  #L21188c.  goto L21184c;
  #L21188e.  call temp:= `size`(v9) @signature `Li/e;.size:()J` @kind virtual;
  #L211894.  v10:= temp @kind wide;
  #L211896.  v10:= v10 + v7 @kind long;
  #L211898.  call `setSize$okio`(v9, v10) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L21189e.  return v9 @kind object;
}
procedure `i.f` `write`(`i.e` v0 @kind this, `i.h` v1 @kind object) @signature `Li/e;.write:(Li/h;)Li/f;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L212478.  call temp:= `write`(v0, v1) @signature `Li/e;.write:(Li/h;)Li/e;` @kind virtual;
  #L21247e.  return v0 @kind object;
}
procedure `i.f` `write`(`i.e` v0 @kind this, `byte`[] v1 @kind object) @signature `Li/e;.write:([B)Li/f;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L212448.  call temp:= `write`(v0, v1) @signature `Li/e;.write:([B)Li/e;` @kind virtual;
  #L21244e.  return v0 @kind object;
}
procedure `i.f` `write`(`i.e` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Li/e;.write:([BII)Li/f;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L212460.  call temp:= `write`(v0, v1, v2, v3) @signature `Li/e;.write:([BII)Li/e;` @kind virtual;
  #L212466.  return v0 @kind object;
}
procedure `void` `write`(`i.e` v8 @kind this, `i.e` v9 @kind object, `long` v10 ) @signature `Li/e;.write:(Li/e;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2129f8.  v0:= "source" @kind object;
  #L2129fc.  call `checkParameterIsNotNull`(v9, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L212a02.  v0:= 0I;
  #L212a04.  if v9 == v8 then goto L212a0c;
  #L212a08.  v1:= 1I;
  #L212a0a.  goto L212a0e;
  #L212a0c.  v1:= 0I;
  #L212a0e.  if v1 == 0 then goto L212ba2;
  #L212a12.  call temp:= `size`(v9) @signature `Li/e;.size:()J` @kind virtual;
  #L212a18.  v2:= temp @kind wide;
  #L212a1a.  v4:= 0L;
  #L212a1e.  v6:= v10 @kind wide;
  #L212a20.  call `checkOffsetAndCount`(v2, v4, v6) @signature `Li/c;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L212a26.  v1:= 0L;
  #L212a2a.  v3:= lcmp(v10, v1);
  #L212a2e.  if v3 <= 0 then goto L212ba0;
  #L212a32.  v1:= v9.`i.e.f` @type ^`i.u` @kind object;
  #L212a36.  v2:= 0I;
  #L212a38.  if v1 == 0 then goto L212b98;
  #L212a3c.  v3:= v1.`i.u.c` @type ^`int`;
  #L212a40.  if v1 == 0 then goto L212b90;
  #L212a44.  v1:= v1.`i.u.b` @type ^`int`;
  #L212a48.  v3:= v3 - v1 @kind int;
  #L212a4a.  v3:= (`long`) v3 @kind i2l;
  #L212a4c.  v1:= lcmp(v10, v3);
  #L212a50.  if v1 >= 0 then goto L212b00;
  #L212a54.  v1:= v8.`i.e.f` @type ^`i.u` @kind object;
  #L212a58.  if v1 == 0 then goto L212a6e;
  #L212a5c.  if v1 == 0 then goto L212a66;
  #L212a60.  v1:= v1.`i.u.g` @type ^`i.u` @kind object;
  #L212a64.  goto L212a70;
  #L212a66.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L212a6c.  throw v2;
  #L212a6e.  v1:= v2 @kind object;
  #L212a70.  if v1 == 0 then goto L212ae0;
  #L212a74.  v3:= v1.`i.u.e` @type ^`boolean` @kind boolean;
  #L212a78.  if v3 == 0 then goto L212ae0;
  #L212a7c.  v3:= v1.`i.u.c` @type ^`int`;
  #L212a80.  v3:= (`long`) v3 @kind i2l;
  #L212a82.  v3:= v3 + v10 @kind long;
  #L212a84.  v5:= v1.`i.u.d` @type ^`boolean` @kind boolean;
  #L212a88.  if v5 == 0 then goto L212a90;
  #L212a8c.  v5:= 0I;
  #L212a8e.  goto L212a94;
  #L212a90.  v5:= v1.`i.u.b` @type ^`int`;
  #L212a94.  v5:= (`long`) v5 @kind i2l;
  #L212a96.  v3:= v3 - v5 @kind long;
  #L212a98.  v5:= 8192I;
  #L212a9c.  v5:= (`long`) v5 @kind i2l;
  #L212a9e.  v7:= lcmp(v3, v5);
  #L212aa2.  if v7 > 0 then goto L212ae0;
  #L212aa6.  v0:= v9.`i.e.f` @type ^`i.u` @kind object;
  #L212aaa.  if v0 == 0 then goto L212ad8;
  #L212aae.  v2:= (`int`) v10 @kind l2i;
  #L212ab0.  call `writeTo`(v0, v1, v2) @signature `Li/u;.writeTo:(Li/u;I)V` @kind virtual;
  #L212ab6.  call temp:= `size`(v9) @signature `Li/e;.size:()J` @kind virtual;
  #L212abc.  v0:= temp @kind wide;
  #L212abe.  v0:= v0 - v10 @kind long;
  #L212ac0.  call `setSize$okio`(v9, v0) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L212ac6.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L212acc.  v0:= temp @kind wide;
  #L212ace.  v0:= v0 + v10 @kind long;
  #L212ad0.  call `setSize$okio`(v8, v0) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L212ad6.  goto L212ba0;
  #L212ad8.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L212ade.  throw v2;
  #L212ae0.  v1:= v9.`i.e.f` @type ^`i.u` @kind object;
  #L212ae4.  if v1 == 0 then goto L212af8;
  #L212ae8.  v3:= (`int`) v10 @kind l2i;
  #L212aea.  call temp:= `split`(v1, v3) @signature `Li/u;.split:(I)Li/u;` @kind virtual;
  #L212af0.  v1:= temp @kind object;
  #L212af2.  v9.`i.e.f` @type ^`i.u` := v1 @kind object;
  #L212af6.  goto L212b00;
  #L212af8.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L212afe.  throw v2;
  #L212b00.  v1:= v9.`i.e.f` @type ^`i.u` @kind object;
  #L212b04.  if v1 == 0 then goto L212b88;
  #L212b08.  v3:= v1.`i.u.c` @type ^`int`;
  #L212b0c.  v4:= v1.`i.u.b` @type ^`int`;
  #L212b10.  v3:= v3 - v4 @kind int;
  #L212b12.  v3:= (`long`) v3 @kind i2l;
  #L212b14.  call temp:= `pop`(v1) @signature `Li/u;.pop:()Li/u;` @kind virtual;
  #L212b1a.  v5:= temp @kind object;
  #L212b1c.  v9.`i.e.f` @type ^`i.u` := v5 @kind object;
  #L212b20.  v5:= v8.`i.e.f` @type ^`i.u` @kind object;
  #L212b24.  if v5 != 0 then goto L212b3a;
  #L212b28.  v8.`i.e.f` @type ^`i.u` := v1 @kind object;
  #L212b2c.  v1.`i.u.g` @type ^`i.u` := v1 @kind object;
  #L212b30.  v2:= v1.`i.u.g` @type ^`i.u` @kind object;
  #L212b34.  v1.`i.u.f` @type ^`i.u` := v2 @kind object;
  #L212b38.  goto L212b52;
  #L212b3a.  if v5 == 0 then goto L212b80;
  #L212b3e.  v5:= v5.`i.u.g` @type ^`i.u` @kind object;
  #L212b42.  if v5 == 0 then goto L212b78;
  #L212b46.  call temp:= `push`(v5, v1) @signature `Li/u;.push:(Li/u;)Li/u;` @kind virtual;
  #L212b4c.  call `compact`(v1) @signature `Li/u;.compact:()V` @kind virtual;
  #L212b52.  call temp:= `size`(v9) @signature `Li/e;.size:()J` @kind virtual;
  #L212b58.  v1:= temp @kind wide;
  #L212b5a.  v1:= v1 - v3 @kind long;
  #L212b5c.  call `setSize$okio`(v9, v1) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L212b62.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L212b68.  v1:= temp @kind wide;
  #L212b6a.  v1:= v1 + v3 @kind long;
  #L212b6c.  call `setSize$okio`(v8, v1) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L212b72.  v10:= v10 - v3 @kind long;
  #L212b74.  goto L212a26;
  #L212b78.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L212b7e.  throw v2;
  #L212b80.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L212b86.  throw v2;
  #L212b88.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L212b8e.  throw v2;
  #L212b90.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L212b96.  throw v2;
  #L212b98.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L212b9e.  throw v2;
  #L212ba0.  return @kind void;
  #L212ba2.  v9:= new `java.lang.IllegalArgumentException`;
  #L212ba6.  v10:= "source == this" @kind object;
  #L212baa.  call temp:= `toString`(v10) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L212bb0.  v10:= temp @kind object;
  #L212bb2.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L212bb8.  throw v9;
}
procedure `long` `writeAll`(`i.e` v7 @kind this, `i.z` v8 @kind object) @signature `Li/e;.writeAll:(Li/z;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L21157c.  v0:= "source" @kind object;
  #L211580.  call `checkParameterIsNotNull`(v8, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L211586.  v0:= 0L;
  #L21158a.  v2:= 8192I;
  #L21158e.  v2:= (`long`) v2 @kind i2l;
  #L211590.  call temp:= `read`(v8, v7, v2) @signature `Li/z;.read:(Li/e;J)J` @kind interface;
  #L211596.  v2:= temp @kind wide;
  #L211598.  v4:= -1L;
  #L21159c.  v6:= lcmp(v2, v4);
  #L2115a0.  if v6 != 0 then goto L2115a6;
  #L2115a4.  return v0 @kind wide;
  #L2115a6.  v0:= v0 + v2 @kind long;
  #L2115a8.  goto L21158a;
}
procedure `i.e` `writeByte`(`i.e` v4 @kind this, `int` v5 ) @signature `Li/e;.writeByte:(I)Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2118d4.  v0:= 1I;
  #L2118d6.  call temp:= `writableSegment$okio`(v4, v0) @signature `Li/e;.writableSegment$okio:(I)Li/u;` @kind virtual;
  #L2118dc.  v0:= temp @kind object;
  #L2118de.  v1:= v0.`i.u.a` @type ^`byte`[] @kind object;
  #L2118e2.  v2:= v0.`i.u.c` @type ^`int`;
  #L2118e6.  v3:= v2 + 1;
  #L2118ea.  v0.`i.u.c` @type ^`int` := v3;
  #L2118ee.  v5:= (`byte`) v5 @kind i2b;
  #L2118f0.  v1[v2]:= v5 @kind byte;
  #L2118f4.  call temp:= `size`(v4) @signature `Li/e;.size:()J` @kind virtual;
  #L2118fa.  v0:= temp @kind wide;
  #L2118fc.  v2:= 1L;
  #L211900.  v0:= v0 + v2 @kind long;
  #L211902.  call `setSize$okio`(v4, v0) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L211908.  return v4 @kind object;
}
procedure `i.f` `writeByte`(`i.e` v0 @kind this, `int` v1 ) @signature `Li/e;.writeByte:(I)Li/f;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L212490.  call temp:= `writeByte`(v0, v1) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L212496.  return v0 @kind object;
}
procedure `i.e` `writeDecimalLong`(`i.e` v12 @kind this, `long` v13 ) @signature `Li/e;.writeDecimalLong:(J)Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L21191c.  v0:= 0L;
  #L211920.  v2:= lcmp(v13, v0);
  #L211924.  if v2 != 0 then goto L211936;
  #L211928.  v13:= 48I;
  #L21192c.  call temp:= `writeByte`(v12, v13) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L211932.  goto L211b54;
  #L211936.  v3:= 0I;
  #L211938.  v4:= 1I;
  #L21193a.  if v2 >= 0 then goto L211958;
  #L21193e.  v13:= -v13 @kind long;
  #L211940.  v2:= lcmp(v13, v0);
  #L211944.  if v2 >= 0 then goto L211956;
  #L211948.  v13:= "-9223372036854775808" @kind object;
  #L21194c.  call temp:= `writeUtf8`(v12, v13) @signature `Li/e;.writeUtf8:(Ljava/lang/String;)Li/e;` @kind virtual;
  #L211952.  goto L211b54;
  #L211956.  v3:= 1I;
  #L211958.  v5:= 100000000L;
  #L21195e.  v2:= 10I;
  #L211962.  v7:= lcmp(v13, v5);
  #L211966.  if v7 >= 0 then goto L2119f4;
  #L21196a.  v5:= 10000L;
  #L21196e.  v7:= lcmp(v13, v5);
  #L211972.  if v7 >= 0 then goto L2119b0;
  #L211976.  v5:= 100L;
  #L21197a.  v7:= lcmp(v13, v5);
  #L21197e.  if v7 >= 0 then goto L211998;
  #L211982.  v5:= 10L;
  #L211986.  v7:= lcmp(v13, v5);
  #L21198a.  if v7 >= 0 then goto L211992;
  #L21198e.  goto L211ae4;
  #L211992.  v4:= 2I;
  #L211994.  goto L211ae4;
  #L211998.  v4:= 1000L;
  #L21199c.  v6:= lcmp(v13, v4);
  #L2119a0.  if v6 >= 0 then goto L2119aa;
  #L2119a4.  v4:= 3I;
  #L2119a6.  goto L211ae4;
  #L2119aa.  v4:= 4I;
  #L2119ac.  goto L211ae4;
  #L2119b0.  v4:= 1000000L;
  #L2119b6.  v6:= lcmp(v13, v4);
  #L2119ba.  if v6 >= 0 then goto L2119d8;
  #L2119be.  v4:= 100000L;
  #L2119c4.  v6:= lcmp(v13, v4);
  #L2119c8.  if v6 >= 0 then goto L2119d2;
  #L2119cc.  v4:= 5I;
  #L2119ce.  goto L211ae4;
  #L2119d2.  v4:= 6I;
  #L2119d4.  goto L211ae4;
  #L2119d8.  v4:= 10000000L;
  #L2119de.  v6:= lcmp(v13, v4);
  #L2119e2.  if v6 >= 0 then goto L2119ec;
  #L2119e6.  v4:= 7I;
  #L2119e8.  goto L211ae4;
  #L2119ec.  v4:= 8I;
  #L2119f0.  goto L211ae4;
  #L2119f4.  v4:= 1000000000000L;
  #L2119fe.  v6:= lcmp(v13, v4);
  #L211a02.  if v6 >= 0 then goto L211a50;
  #L211a06.  v4:= 10000000000L;
  #L211a10.  v6:= lcmp(v13, v4);
  #L211a14.  if v6 >= 0 then goto L211a32;
  #L211a18.  v4:= 1000000000L;
  #L211a1e.  v6:= lcmp(v13, v4);
  #L211a22.  if v6 >= 0 then goto L211a2c;
  #L211a26.  v4:= 9I;
  #L211a2a.  goto L211ae4;
  #L211a2c.  v4:= 10I;
  #L211a30.  goto L211ae4;
  #L211a32.  v4:= 100000000000L;
  #L211a3c.  v6:= lcmp(v13, v4);
  #L211a40.  if v6 >= 0 then goto L211a4a;
  #L211a44.  v4:= 11I;
  #L211a48.  goto L211ae4;
  #L211a4a.  v4:= 12I;
  #L211a4e.  goto L211ae4;
  #L211a50.  v4:= 1000000000000000L;
  #L211a5a.  v6:= lcmp(v13, v4);
  #L211a5e.  if v6 >= 0 then goto L211a98;
  #L211a62.  v4:= 10000000000000L;
  #L211a6c.  v6:= lcmp(v13, v4);
  #L211a70.  if v6 >= 0 then goto L211a7a;
  #L211a74.  v4:= 13I;
  #L211a78.  goto L211ae4;
  #L211a7a.  v4:= 100000000000000L;
  #L211a84.  v6:= lcmp(v13, v4);
  #L211a88.  if v6 >= 0 then goto L211a92;
  #L211a8c.  v4:= 14I;
  #L211a90.  goto L211ae4;
  #L211a92.  v4:= 15I;
  #L211a96.  goto L211ae4;
  #L211a98.  v4:= 100000000000000000L;
  #L211aa2.  v6:= lcmp(v13, v4);
  #L211aa6.  if v6 >= 0 then goto L211ac8;
  #L211aaa.  v4:= 10000000000000000L;
  #L211ab4.  v6:= lcmp(v13, v4);
  #L211ab8.  if v6 >= 0 then goto L211ac2;
  #L211abc.  v4:= 16I;
  #L211ac0.  goto L211ae4;
  #L211ac2.  v4:= 17I;
  #L211ac6.  goto L211ae4;
  #L211ac8.  v4:= 1000000000000000000L;
  #L211ad2.  v6:= lcmp(v13, v4);
  #L211ad6.  if v6 >= 0 then goto L211ae0;
  #L211ada.  v4:= 18I;
  #L211ade.  goto L211ae4;
  #L211ae0.  v4:= 19I;
  #L211ae4.  if v3 == 0 then goto L211aec;
  #L211ae8.  v4:= v4 + 1;
  #L211aec.  call temp:= `writableSegment$okio`(v12, v4) @signature `Li/e;.writableSegment$okio:(I)Li/u;` @kind virtual;
  #L211af2.  v5:= temp @kind object;
  #L211af4.  v6:= v5.`i.u.a` @type ^`byte`[] @kind object;
  #L211af8.  v7:= v5.`i.u.c` @type ^`int`;
  #L211afc.  v7:= v7 + v4 @kind int;
  #L211afe.  v8:= lcmp(v13, v0);
  #L211b02.  if v8 == 0 then goto L211b26;
  #L211b06.  v8:= (`long`) v2 @kind i2l;
  #L211b08.  v10:= v13 %% v8 @kind long;
  #L211b0c.  v11:= (`int`) v10 @kind l2i;
  #L211b0e.  v7:= v7 + -1;
  #L211b12.  call temp:= `getHEX_DIGIT_BYTES`() @signature `Li/b0/a;.getHEX_DIGIT_BYTES:()[B` @kind static;
  #L211b18.  v10:= temp @kind object;
  #L211b1a.  v10:= v10[v11] @kind byte;
  #L211b1e.  v6[v7]:= v10 @kind byte;
  #L211b22.  v13:= v13 / v8 @kind long;
  #L211b24.  goto L211afe;
  #L211b26.  if v3 == 0 then goto L211b38;
  #L211b2a.  v7:= v7 + -1;
  #L211b2e.  v13:= 45I;
  #L211b32.  v13:= (`byte`) v13 @kind i2b;
  #L211b34.  v6[v7]:= v13 @kind byte;
  #L211b38.  v13:= v5.`i.u.c` @type ^`int`;
  #L211b3c.  v13:= v13 + v4 @kind int;
  #L211b3e.  v5.`i.u.c` @type ^`int` := v13;
  #L211b42.  call temp:= `size`(v12) @signature `Li/e;.size:()J` @kind virtual;
  #L211b48.  v13:= temp @kind wide;
  #L211b4a.  v0:= (`long`) v4 @kind i2l;
  #L211b4c.  v13:= v13 + v0 @kind long;
  #L211b4e.  call `setSize$okio`(v12, v13) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L211b54.  return v12 @kind object;
}
procedure `i.f` `writeDecimalLong`(`i.e` v0 @kind this, `long` v1 ) @signature `Li/e;.writeDecimalLong:(J)Li/f;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2124a8.  call temp:= `writeDecimalLong`(v0, v1) @signature `Li/e;.writeDecimalLong:(J)Li/e;` @kind virtual;
  #L2124ae.  return v0 @kind object;
}
procedure `i.e` `writeHexadecimalUnsignedLong`(`i.e` v12 @kind this, `long` v13 ) @signature `Li/e;.writeHexadecimalUnsignedLong:(J)Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L211b68.  v0:= 0L;
  #L211b6c.  v2:= lcmp(v13, v0);
  #L211b70.  if v2 != 0 then goto L211b80;
  #L211b74.  v13:= 48I;
  #L211b78.  call temp:= `writeByte`(v12, v13) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L211b7e.  goto L211c6a;
  #L211b80.  v0:= 1I;
  #L211b82.  v1:= v13 ^>> v0 @kind long;
  #L211b86.  v1:= v1 ^| v13 @kind long;
  #L211b88.  v3:= 2I;
  #L211b8a.  v4:= v1 ^>> v3 @kind long;
  #L211b8e.  v1:= v1 ^| v4 @kind long;
  #L211b90.  v4:= 4I;
  #L211b92.  v5:= v1 ^>> v4 @kind long;
  #L211b96.  v1:= v1 ^| v5 @kind long;
  #L211b98.  v5:= 8I;
  #L211b9c.  v6:= v1 ^>> v5 @kind long;
  #L211ba0.  v1:= v1 ^| v6 @kind long;
  #L211ba2.  v6:= 16I;
  #L211ba6.  v7:= v1 ^>> v6 @kind long;
  #L211baa.  v1:= v1 ^| v7 @kind long;
  #L211bac.  v7:= 32I;
  #L211bb0.  v8:= v1 ^>> v7 @kind long;
  #L211bb4.  v1:= v1 ^| v8 @kind long;
  #L211bb6.  v8:= v1 ^>> v0 @kind long;
  #L211bba.  v10:= 1.1945305291614955E103D;
  #L211bc4.  v8:= v8 ^& v10 @kind long;
  #L211bc6.  v1:= v1 - v8 @kind long;
  #L211bc8.  v8:= v1 ^>> v3 @kind long;
  #L211bcc.  v10:= 4.667261458395856E-62D;
  #L211bd6.  v8:= v8 ^& v10 @kind long;
  #L211bd8.  v1:= v1 ^& v10 @kind long;
  #L211bda.  v8:= v8 + v1 @kind long;
  #L211bdc.  v1:= v8 ^>> v4 @kind long;
  #L211be0.  v1:= v1 + v8 @kind long;
  #L211be2.  v8:= 3.815736827118017E-236D;
  #L211bec.  v1:= v1 ^& v8 @kind long;
  #L211bee.  v8:= v1 ^>> v5 @kind long;
  #L211bf2.  v1:= v1 + v8 @kind long;
  #L211bf4.  v5:= v1 ^>> v6 @kind long;
  #L211bf8.  v1:= v1 + v5 @kind long;
  #L211bfa.  v5:= 63L;
  #L211bfe.  v8:= v1 ^& v5 @kind long;
  #L211c02.  v1:= v1 ^>> v7 @kind long;
  #L211c04.  v1:= v1 ^& v5 @kind long;
  #L211c06.  v8:= v8 + v1 @kind long;
  #L211c08.  v1:= 3I;
  #L211c0a.  v1:= (`long`) v1 @kind i2l;
  #L211c0c.  v8:= v8 + v1 @kind long;
  #L211c0e.  v1:= (`long`) v4 @kind i2l;
  #L211c10.  v8:= v8 / v1 @kind long;
  #L211c12.  v1:= (`int`) v8 @kind l2i;
  #L211c14.  call temp:= `writableSegment$okio`(v12, v1) @signature `Li/e;.writableSegment$okio:(I)Li/u;` @kind virtual;
  #L211c1a.  v2:= temp @kind object;
  #L211c1c.  v3:= v2.`i.u.a` @type ^`byte`[] @kind object;
  #L211c20.  v5:= v2.`i.u.c` @type ^`int`;
  #L211c24.  v6:= v5 + v1 @kind int;
  #L211c28.  v6:= v6 - v0 @kind int;
  #L211c2a.  if v6 < v5 then goto L211c4e;
  #L211c2e.  call temp:= `getHEX_DIGIT_BYTES`() @signature `Li/b0/a;.getHEX_DIGIT_BYTES:()[B` @kind static;
  #L211c34.  v0:= temp @kind object;
  #L211c36.  v7:= 15L;
  #L211c3a.  v7:= v7 ^& v13 @kind long;
  #L211c3c.  v8:= (`int`) v7 @kind l2i;
  #L211c3e.  v0:= v0[v8] @kind byte;
  #L211c42.  v3[v6]:= v0 @kind byte;
  #L211c46.  v13:= v13 ^>> v4 @kind long;
  #L211c48.  v6:= v6 + -1;
  #L211c4c.  goto L211c2a;
  #L211c4e.  v13:= v2.`i.u.c` @type ^`int`;
  #L211c52.  v13:= v13 + v1 @kind int;
  #L211c54.  v2.`i.u.c` @type ^`int` := v13;
  #L211c58.  call temp:= `size`(v12) @signature `Li/e;.size:()J` @kind virtual;
  #L211c5e.  v13:= temp @kind wide;
  #L211c60.  v0:= (`long`) v1 @kind i2l;
  #L211c62.  v13:= v13 + v0 @kind long;
  #L211c64.  call `setSize$okio`(v12, v13) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L211c6a.  return v12 @kind object;
}
procedure `i.f` `writeHexadecimalUnsignedLong`(`i.e` v0 @kind this, `long` v1 ) @signature `Li/e;.writeHexadecimalUnsignedLong:(J)Li/f;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2124c0.  call temp:= `writeHexadecimalUnsignedLong`(v0, v1) @signature `Li/e;.writeHexadecimalUnsignedLong:(J)Li/e;` @kind virtual;
  #L2124c6.  return v0 @kind object;
}
procedure `i.e` `writeInt`(`i.e` v5 @kind this, `int` v6 ) @signature `Li/e;.writeInt:(I)Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L211c7c.  v0:= 4I;
  #L211c7e.  call temp:= `writableSegment$okio`(v5, v0) @signature `Li/e;.writableSegment$okio:(I)Li/u;` @kind virtual;
  #L211c84.  v0:= temp @kind object;
  #L211c86.  v1:= v0.`i.u.a` @type ^`byte`[] @kind object;
  #L211c8a.  v2:= v0.`i.u.c` @type ^`int`;
  #L211c8e.  v3:= v2 + 1;
  #L211c92.  v4:= v6 ^>> 24;
  #L211c96.  v4:= v4 ^& 255;
  #L211c9a.  v4:= (`byte`) v4 @kind i2b;
  #L211c9c.  v1[v2]:= v4 @kind byte;
  #L211ca0.  v2:= v3 + 1;
  #L211ca4.  v4:= v6 ^>> 16;
  #L211ca8.  v4:= v4 ^& 255;
  #L211cac.  v4:= (`byte`) v4 @kind i2b;
  #L211cae.  v1[v3]:= v4 @kind byte;
  #L211cb2.  v3:= v2 + 1;
  #L211cb6.  v4:= v6 ^>> 8;
  #L211cba.  v4:= v4 ^& 255;
  #L211cbe.  v4:= (`byte`) v4 @kind i2b;
  #L211cc0.  v1[v2]:= v4 @kind byte;
  #L211cc4.  v2:= v3 + 1;
  #L211cc8.  v6:= v6 ^& 255;
  #L211ccc.  v6:= (`byte`) v6 @kind i2b;
  #L211cce.  v1[v3]:= v6 @kind byte;
  #L211cd2.  v0.`i.u.c` @type ^`int` := v2;
  #L211cd6.  call temp:= `size`(v5) @signature `Li/e;.size:()J` @kind virtual;
  #L211cdc.  v0:= temp @kind wide;
  #L211cde.  v2:= 4L;
  #L211ce2.  v0:= v0 + v2 @kind long;
  #L211ce4.  call `setSize$okio`(v5, v0) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L211cea.  return v5 @kind object;
}
procedure `i.f` `writeInt`(`i.e` v0 @kind this, `int` v1 ) @signature `Li/e;.writeInt:(I)Li/f;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2124d8.  call temp:= `writeInt`(v0, v1) @signature `Li/e;.writeInt:(I)Li/e;` @kind virtual;
  #L2124de.  return v0 @kind object;
}
procedure `i.e` `writeShort`(`i.e` v5 @kind this, `int` v6 ) @signature `Li/e;.writeShort:(I)Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L211cfc.  v0:= 2I;
  #L211cfe.  call temp:= `writableSegment$okio`(v5, v0) @signature `Li/e;.writableSegment$okio:(I)Li/u;` @kind virtual;
  #L211d04.  v0:= temp @kind object;
  #L211d06.  v1:= v0.`i.u.a` @type ^`byte`[] @kind object;
  #L211d0a.  v2:= v0.`i.u.c` @type ^`int`;
  #L211d0e.  v3:= v2 + 1;
  #L211d12.  v4:= v6 ^>> 8;
  #L211d16.  v4:= v4 ^& 255;
  #L211d1a.  v4:= (`byte`) v4 @kind i2b;
  #L211d1c.  v1[v2]:= v4 @kind byte;
  #L211d20.  v2:= v3 + 1;
  #L211d24.  v6:= v6 ^& 255;
  #L211d28.  v6:= (`byte`) v6 @kind i2b;
  #L211d2a.  v1[v3]:= v6 @kind byte;
  #L211d2e.  v0.`i.u.c` @type ^`int` := v2;
  #L211d32.  call temp:= `size`(v5) @signature `Li/e;.size:()J` @kind virtual;
  #L211d38.  v0:= temp @kind wide;
  #L211d3a.  v2:= 2L;
  #L211d3e.  v0:= v0 + v2 @kind long;
  #L211d40.  call `setSize$okio`(v5, v0) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L211d46.  return v5 @kind object;
}
procedure `i.f` `writeShort`(`i.e` v0 @kind this, `int` v1 ) @signature `Li/e;.writeShort:(I)Li/f;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2124f0.  call temp:= `writeShort`(v0, v1) @signature `Li/e;.writeShort:(I)Li/e;` @kind virtual;
  #L2124f6.  return v0 @kind object;
}
procedure `i.e` `writeString`(`i.e` v3 @kind this, `java.lang.String` v4 @kind object, `int` v5 , `int` v6 , `java.nio.charset.Charset` v7 @kind object) @signature `Li/e;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L211d58.  v0:= "string" @kind object;
  #L211d5c.  call `checkParameterIsNotNull`(v4, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L211d62.  v0:= "charset" @kind object;
  #L211d66.  call `checkParameterIsNotNull`(v7, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L211d6c.  v0:= 1I;
  #L211d6e.  v1:= 0I;
  #L211d70.  if v5 < 0 then goto L211d78;
  #L211d74.  v2:= 1I;
  #L211d76.  goto L211d7a;
  #L211d78.  v2:= 0I;
  #L211d7a.  if v2 == 0 then goto L211e8e;
  #L211d7e.  if v6 < v5 then goto L211d86;
  #L211d82.  v2:= 1I;
  #L211d84.  goto L211d88;
  #L211d86.  v2:= 0I;
  #L211d88.  if v2 == 0 then goto L211e48;
  #L211d8c.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L211d92.  v2:= temp;
  #L211d94.  if v6 > v2 then goto L211d9a;
  #L211d98.  goto L211d9c;
  #L211d9a.  v0:= 0I;
  #L211d9c.  if v0 == 0 then goto L211dfa;
  #L211da0.  v0:= `@@kotlin.a0.d.a` @type ^`java.nio.charset.Charset` @kind object;
  #L211da4.  call temp:= `areEqual`(v7, v0) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L211daa.  v0:= temp;
  #L211dac.  if v0 == 0 then goto L211db8;
  #L211db0.  call temp:= `writeUtf8`(v3, v4, v5, v6) @signature `Li/e;.writeUtf8:(Ljava/lang/String;II)Li/e;` @kind virtual;
  #L211db6.  return v3 @kind object;
  #L211db8.  call temp:= `substring`(v4, v5, v6) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L211dbe.  v4:= temp @kind object;
  #L211dc0.  v5:= "(this as java.lang.Strin…ing(startIndex, endIndex)" @kind object;
  #L211dc4.  call `checkExpressionValueIsNotNull`(v4, v5) @signature `Lkotlin/v/c/i;.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L211dca.  if v4 == 0 then goto L211dea;
  #L211dce.  call temp:= `getBytes`(v4, v7) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L211dd4.  v4:= temp @kind object;
  #L211dd6.  v5:= "(this as java.lang.String).getBytes(charset)" @kind object;
  #L211dda.  call `checkExpressionValueIsNotNull`(v4, v5) @signature `Lkotlin/v/c/i;.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L211de0.  v5:= length @variable v4;
  #L211de2.  call temp:= `write`(v3, v4, v1, v5) @signature `Li/e;.write:([BII)Li/e;` @kind virtual;
  #L211de8.  return v3 @kind object;
  #L211dea.  v4:= new `kotlin.TypeCastException`;
  #L211dee.  v5:= "null cannot be cast to non-null type java.lang.String" @kind object;
  #L211df2.  call `<init>`(v4, v5) @signature `Lkotlin/TypeCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L211df8.  throw v4;
  #L211dfa.  v5:= new `java.lang.StringBuilder`;
  #L211dfe.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L211e04.  v7:= "endIndex > string.length: " @kind object;
  #L211e08.  call temp:= `append`(v5, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L211e0e.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L211e14.  v6:= " > " @kind object;
  #L211e18.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L211e1e.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L211e24.  v4:= temp;
  #L211e26.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L211e2c.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L211e32.  v4:= temp @kind object;
  #L211e34.  v5:= new `java.lang.IllegalArgumentException`;
  #L211e38.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L211e3e.  v4:= temp @kind object;
  #L211e40.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L211e46.  throw v5;
  #L211e48.  v4:= new `java.lang.StringBuilder`;
  #L211e4c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L211e52.  v7:= "endIndex < beginIndex: " @kind object;
  #L211e56.  call temp:= `append`(v4, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L211e5c.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L211e62.  v6:= " < " @kind object;
  #L211e66.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L211e6c.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L211e72.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L211e78.  v4:= temp @kind object;
  #L211e7a.  v5:= new `java.lang.IllegalArgumentException`;
  #L211e7e.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L211e84.  v4:= temp @kind object;
  #L211e86.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L211e8c.  throw v5;
  #L211e8e.  v4:= new `java.lang.StringBuilder`;
  #L211e92.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L211e98.  v6:= "beginIndex < 0: " @kind object;
  #L211e9c.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L211ea2.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L211ea8.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L211eae.  v4:= temp @kind object;
  #L211eb0.  v5:= new `java.lang.IllegalArgumentException`;
  #L211eb4.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L211eba.  v4:= temp @kind object;
  #L211ebc.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L211ec2.  throw v5;
}
procedure `i.e` `writeString`(`i.e` v2 @kind this, `java.lang.String` v3 @kind object, `java.nio.charset.Charset` v4 @kind object) @signature `Li/e;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L211ed4.  v0:= "string" @kind object;
  #L211ed8.  call `checkParameterIsNotNull`(v3, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L211ede.  v0:= "charset" @kind object;
  #L211ee2.  call `checkParameterIsNotNull`(v4, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L211ee8.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L211eee.  v0:= temp;
  #L211ef0.  v1:= 0I;
  #L211ef2.  call temp:= `writeString`(v2, v3, v1, v0, v4) @signature `Li/e;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Li/e;` @kind virtual;
  #L211ef8.  return v2 @kind object;
}
procedure `i.e` `writeUtf8`(`i.e` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Li/e;.writeUtf8:(Ljava/lang/String;)Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L211f0c.  v0:= "string" @kind object;
  #L211f10.  call `checkParameterIsNotNull`(v3, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L211f16.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L211f1c.  v0:= temp;
  #L211f1e.  v1:= 0I;
  #L211f20.  call temp:= `writeUtf8`(v2, v3, v1, v0) @signature `Li/e;.writeUtf8:(Ljava/lang/String;II)Li/e;` @kind virtual;
  #L211f26.  return v2 @kind object;
}
procedure `i.e` `writeUtf8`(`i.e` v11 @kind this, `java.lang.String` v12 @kind object, `int` v13 , `int` v14 ) @signature `Li/e;.writeUtf8:(Ljava/lang/String;II)Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L211f38.  v0:= "string" @kind object;
  #L211f3c.  call `checkParameterIsNotNull`(v12, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L211f42.  v0:= 0I;
  #L211f44.  v1:= 1I;
  #L211f46.  if v13 < 0 then goto L211f4e;
  #L211f4a.  v2:= 1I;
  #L211f4c.  goto L211f50;
  #L211f4e.  v2:= 0I;
  #L211f50.  if v2 == 0 then goto L212226;
  #L211f54.  if v14 < v13 then goto L211f5c;
  #L211f58.  v2:= 1I;
  #L211f5a.  goto L211f5e;
  #L211f5c.  v2:= 0I;
  #L211f5e.  if v2 == 0 then goto L2121e0;
  #L211f62.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L211f68.  v2:= temp;
  #L211f6a.  if v14 > v2 then goto L211f72;
  #L211f6e.  v2:= 1I;
  #L211f70.  goto L211f74;
  #L211f72.  v2:= 0I;
  #L211f74.  if v2 == 0 then goto L212192;
  #L211f78.  if v13 >= v14 then goto L212190;
  #L211f7c.  call temp:= `charAt`(v12, v13) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L211f82.  v2:= temp;
  #L211f84.  v3:= 128I;
  #L211f88.  if v2 >= v3 then goto L211ffc;
  #L211f8c.  call temp:= `writableSegment$okio`(v11, v1) @signature `Li/e;.writableSegment$okio:(I)Li/u;` @kind virtual;
  #L211f92.  v4:= temp @kind object;
  #L211f94.  v5:= v4.`i.u.a` @type ^`byte`[] @kind object;
  #L211f98.  v6:= v4.`i.u.c` @type ^`int`;
  #L211f9c.  v6:= v6 - v13 @kind int;
  #L211f9e.  v7:= v6 - 8192;
  #L211fa2.  call temp:= `min`(v14, v7) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L211fa8.  v7:= temp;
  #L211faa.  v8:= v13 + 1;
  #L211fae.  v13:= v13 + v6 @kind int;
  #L211fb0.  v2:= (`byte`) v2 @kind i2b;
  #L211fb2.  v5[v13]:= v2 @kind byte;
  #L211fb6.  if v8 >= v7 then goto L211fd8;
  #L211fba.  call temp:= `charAt`(v12, v8) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L211fc0.  v13:= temp;
  #L211fc2.  if v13 < v3 then goto L211fc8;
  #L211fc6.  goto L211fd8;
  #L211fc8.  v2:= v8 + 1;
  #L211fcc.  v8:= v8 + v6 @kind int;
  #L211fce.  v13:= (`byte`) v13 @kind i2b;
  #L211fd0.  v5[v8]:= v13 @kind byte;
  #L211fd4.  v8:= v2;
  #L211fd6.  goto L211fb6;
  #L211fd8.  v6:= v6 + v8 @kind int;
  #L211fda.  v13:= v4.`i.u.c` @type ^`int`;
  #L211fde.  v6:= v6 - v13 @kind int;
  #L211fe0.  v13:= v13 + v6 @kind int;
  #L211fe2.  v4.`i.u.c` @type ^`int` := v13;
  #L211fe6.  call temp:= `size`(v11) @signature `Li/e;.size:()J` @kind virtual;
  #L211fec.  v2:= temp @kind wide;
  #L211fee.  v4:= (`long`) v6 @kind i2l;
  #L211ff0.  v2:= v2 + v4 @kind long;
  #L211ff2.  call `setSize$okio`(v11, v2) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L211ff8.  v13:= v8;
  #L211ffa.  goto L211f78;
  #L211ffc.  v4:= 2048I;
  #L212000.  if v2 >= v4 then goto L212054;
  #L212004.  v4:= 2I;
  #L212006.  call temp:= `writableSegment$okio`(v11, v4) @signature `Li/e;.writableSegment$okio:(I)Li/u;` @kind virtual;
  #L21200c.  v5:= temp @kind object;
  #L21200e.  v6:= v5.`i.u.a` @type ^`byte`[] @kind object;
  #L212012.  v7:= v5.`i.u.c` @type ^`int`;
  #L212016.  v8:= v2 ^> 6;
  #L21201a.  v8:= v8 ^| 192;
  #L21201e.  v8:= (`byte`) v8 @kind i2b;
  #L212020.  v6[v7]:= v8 @kind byte;
  #L212024.  v8:= v7 + 1;
  #L212028.  v2:= v2 ^& 63;
  #L21202c.  v2:= v2 ^| v3 @kind int;
  #L21202e.  v2:= (`byte`) v2 @kind i2b;
  #L212030.  v6[v8]:= v2 @kind byte;
  #L212034.  v7:= v7 + v4 @kind int;
  #L212036.  v5.`i.u.c` @type ^`int` := v7;
  #L21203a.  call temp:= `size`(v11) @signature `Li/e;.size:()J` @kind virtual;
  #L212040.  v2:= temp @kind wide;
  #L212042.  v4:= 2L;
  #L212046.  v2:= v2 + v4 @kind long;
  #L212048.  call `setSize$okio`(v11, v2) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L21204e.  v13:= v13 + 1;
  #L212052.  goto L211f78;
  #L212054.  v4:= 55296I;
  #L21205a.  v5:= 63I;
  #L21205e.  if v2 < v4 then goto L212130;
  #L212062.  v4:= 57343I;
  #L212068.  if v2 <= v4 then goto L21206e;
  #L21206c.  goto L212130;
  #L21206e.  v6:= v13 + 1;
  #L212072.  if v6 >= v14 then goto L212080;
  #L212076.  call temp:= `charAt`(v12, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L21207c.  v7:= temp;
  #L21207e.  goto L212082;
  #L212080.  v7:= 0I;
  #L212082.  v8:= 56319I;
  #L212088.  if v2 > v8 then goto L212124;
  #L21208c.  v8:= 56320I;
  #L212092.  if v8 > v7 then goto L212124;
  #L212096.  if v4 >= v7 then goto L21209c;
  #L21209a.  goto L212124;
  #L21209c.  v4:= 65536I;
  #L2120a0.  v2:= v2 ^& 1023;
  #L2120a4.  v2:= v2 ^< 10;
  #L2120a8.  v6:= v7 ^& 1023;
  #L2120ac.  v2:= v2 ^| v6 @kind int;
  #L2120ae.  v2:= v2 + v4 @kind int;
  #L2120b0.  v4:= 4I;
  #L2120b2.  call temp:= `writableSegment$okio`(v11, v4) @signature `Li/e;.writableSegment$okio:(I)Li/u;` @kind virtual;
  #L2120b8.  v6:= temp @kind object;
  #L2120ba.  v7:= v6.`i.u.a` @type ^`byte`[] @kind object;
  #L2120be.  v8:= v6.`i.u.c` @type ^`int`;
  #L2120c2.  v9:= v2 ^> 18;
  #L2120c6.  v9:= v9 ^| 240;
  #L2120ca.  v9:= (`byte`) v9 @kind i2b;
  #L2120cc.  v7[v8]:= v9 @kind byte;
  #L2120d0.  v9:= v8 + 1;
  #L2120d4.  v10:= v2 ^> 12;
  #L2120d8.  v10:= v10 ^& v5 @kind int;
  #L2120da.  v10:= v10 ^| v3 @kind int;
  #L2120dc.  v10:= (`byte`) v10 @kind i2b;
  #L2120de.  v7[v9]:= v10 @kind byte;
  #L2120e2.  v9:= v8 + 2;
  #L2120e6.  v10:= v2 ^> 6;
  #L2120ea.  v10:= v10 ^& v5 @kind int;
  #L2120ec.  v10:= v10 ^| v3 @kind int;
  #L2120ee.  v10:= (`byte`) v10 @kind i2b;
  #L2120f0.  v7[v9]:= v10 @kind byte;
  #L2120f4.  v9:= v8 + 3;
  #L2120f8.  v2:= v2 ^& v5 @kind int;
  #L2120fa.  v2:= v2 ^| v3 @kind int;
  #L2120fc.  v2:= (`byte`) v2 @kind i2b;
  #L2120fe.  v7[v9]:= v2 @kind byte;
  #L212102.  v8:= v8 + v4 @kind int;
  #L212104.  v6.`i.u.c` @type ^`int` := v8;
  #L212108.  call temp:= `size`(v11) @signature `Li/e;.size:()J` @kind virtual;
  #L21210e.  v2:= temp @kind wide;
  #L212110.  v4:= 4L;
  #L212114.  v2:= v2 + v4 @kind long;
  #L212116.  call `setSize$okio`(v11, v2) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L21211c.  v13:= v13 + 2;
  #L212120.  goto L211f78;
  #L212124.  call temp:= `writeByte`(v11, v5) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L21212a.  v13:= v6;
  #L21212c.  goto L211f78;
  #L212130.  v4:= 3I;
  #L212132.  call temp:= `writableSegment$okio`(v11, v4) @signature `Li/e;.writableSegment$okio:(I)Li/u;` @kind virtual;
  #L212138.  v6:= temp @kind object;
  #L21213a.  v7:= v6.`i.u.a` @type ^`byte`[] @kind object;
  #L21213e.  v8:= v6.`i.u.c` @type ^`int`;
  #L212142.  v9:= v2 ^> 12;
  #L212146.  v9:= v9 ^| 224;
  #L21214a.  v9:= (`byte`) v9 @kind i2b;
  #L21214c.  v7[v8]:= v9 @kind byte;
  #L212150.  v9:= v8 + 1;
  #L212154.  v10:= v2 ^> 6;
  #L212158.  v5:= v5 ^& v10 @kind int;
  #L21215a.  v5:= v5 ^| v3 @kind int;
  #L21215c.  v5:= (`byte`) v5 @kind i2b;
  #L21215e.  v7[v9]:= v5 @kind byte;
  #L212162.  v5:= v8 + 2;
  #L212166.  v2:= v2 ^& 63;
  #L21216a.  v2:= v2 ^| v3 @kind int;
  #L21216c.  v2:= (`byte`) v2 @kind i2b;
  #L21216e.  v7[v5]:= v2 @kind byte;
  #L212172.  v8:= v8 + v4 @kind int;
  #L212174.  v6.`i.u.c` @type ^`int` := v8;
  #L212178.  call temp:= `size`(v11) @signature `Li/e;.size:()J` @kind virtual;
  #L21217e.  v2:= temp @kind wide;
  #L212180.  v4:= 3L;
  #L212184.  v2:= v2 + v4 @kind long;
  #L212186.  call `setSize$okio`(v11, v2) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L21218c.  goto L21204e;
  #L212190.  return v11 @kind object;
  #L212192.  v13:= new `java.lang.StringBuilder`;
  #L212196.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L21219c.  v0:= "endIndex > string.length: " @kind object;
  #L2121a0.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2121a6.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2121ac.  v14:= " > " @kind object;
  #L2121b0.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2121b6.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2121bc.  v12:= temp;
  #L2121be.  call temp:= `append`(v13, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2121c4.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2121ca.  v12:= temp @kind object;
  #L2121cc.  v13:= new `java.lang.IllegalArgumentException`;
  #L2121d0.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2121d6.  v12:= temp @kind object;
  #L2121d8.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2121de.  throw v13;
  #L2121e0.  v12:= new `java.lang.StringBuilder`;
  #L2121e4.  call `<init>`(v12) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2121ea.  v0:= "endIndex < beginIndex: " @kind object;
  #L2121ee.  call temp:= `append`(v12, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2121f4.  call temp:= `append`(v12, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2121fa.  v14:= " < " @kind object;
  #L2121fe.  call temp:= `append`(v12, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L212204.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L21220a.  call temp:= `toString`(v12) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L212210.  v12:= temp @kind object;
  #L212212.  v13:= new `java.lang.IllegalArgumentException`;
  #L212216.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L21221c.  v12:= temp @kind object;
  #L21221e.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L212224.  throw v13;
  #L212226.  v12:= new `java.lang.StringBuilder`;
  #L21222a.  call `<init>`(v12) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L212230.  v14:= "beginIndex < 0: " @kind object;
  #L212234.  call temp:= `append`(v12, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21223a.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L212240.  call temp:= `toString`(v12) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L212246.  v12:= temp @kind object;
  #L212248.  v13:= new `java.lang.IllegalArgumentException`;
  #L21224c.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L212252.  v12:= temp @kind object;
  #L212254.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21225a.  throw v13;
}
procedure `i.f` `writeUtf8`(`i.e` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Li/e;.writeUtf8:(Ljava/lang/String;)Li/f;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L212508.  call temp:= `writeUtf8`(v0, v1) @signature `Li/e;.writeUtf8:(Ljava/lang/String;)Li/e;` @kind virtual;
  #L21250e.  return v0 @kind object;
}
procedure `i.e` `writeUtf8CodePoint`(`i.e` v8 @kind this, `int` v9 ) @signature `Li/e;.writeUtf8CodePoint:(I)Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L21226c.  v0:= 128I;
  #L212270.  if v9 >= v0 then goto L21227e;
  #L212274.  call temp:= `writeByte`(v8, v9) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L21227a.  goto L2123ce;
  #L21227e.  v1:= 2048I;
  #L212282.  v2:= 63I;
  #L212286.  if v9 >= v1 then goto L2122d6;
  #L21228a.  v1:= 2I;
  #L21228c.  call temp:= `writableSegment$okio`(v8, v1) @signature `Li/e;.writableSegment$okio:(I)Li/u;` @kind virtual;
  #L212292.  v3:= temp @kind object;
  #L212294.  v4:= v3.`i.u.a` @type ^`byte`[] @kind object;
  #L212298.  v5:= v3.`i.u.c` @type ^`int`;
  #L21229c.  v6:= v9 ^> 6;
  #L2122a0.  v6:= v6 ^| 192;
  #L2122a4.  v6:= (`byte`) v6 @kind i2b;
  #L2122a6.  v4[v5]:= v6 @kind byte;
  #L2122aa.  v6:= v5 + 1;
  #L2122ae.  v9:= v9 ^& v2 @kind int;
  #L2122b0.  v9:= v9 ^| v0 @kind int;
  #L2122b2.  v9:= (`byte`) v9 @kind i2b;
  #L2122b4.  v4[v6]:= v9 @kind byte;
  #L2122b8.  v5:= v5 + v1 @kind int;
  #L2122ba.  v3.`i.u.c` @type ^`int` := v5;
  #L2122be.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L2122c4.  v0:= temp @kind wide;
  #L2122c6.  v2:= 2L;
  #L2122ca.  v0:= v0 + v2 @kind long;
  #L2122cc.  call `setSize$okio`(v8, v0) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L2122d2.  goto L2123ce;
  #L2122d6.  v1:= 57343I;
  #L2122dc.  v3:= 55296I;
  #L2122e2.  if v3 <= v9 then goto L2122e8;
  #L2122e6.  goto L2122f4;
  #L2122e8.  if v1 < v9 then goto L2122f4;
  #L2122ec.  call temp:= `writeByte`(v8, v2) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L2122f2.  goto L2123ce;
  #L2122f4.  v1:= 65536I;
  #L2122f8.  if v9 >= v1 then goto L212358;
  #L2122fc.  v1:= 3I;
  #L2122fe.  call temp:= `writableSegment$okio`(v8, v1) @signature `Li/e;.writableSegment$okio:(I)Li/u;` @kind virtual;
  #L212304.  v3:= temp @kind object;
  #L212306.  v4:= v3.`i.u.a` @type ^`byte`[] @kind object;
  #L21230a.  v5:= v3.`i.u.c` @type ^`int`;
  #L21230e.  v6:= v9 ^> 12;
  #L212312.  v6:= v6 ^| 224;
  #L212316.  v6:= (`byte`) v6 @kind i2b;
  #L212318.  v4[v5]:= v6 @kind byte;
  #L21231c.  v6:= v5 + 1;
  #L212320.  v7:= v9 ^> 6;
  #L212324.  v7:= v7 ^& v2 @kind int;
  #L212326.  v7:= v7 ^| v0 @kind int;
  #L212328.  v7:= (`byte`) v7 @kind i2b;
  #L21232a.  v4[v6]:= v7 @kind byte;
  #L21232e.  v6:= v5 + 2;
  #L212332.  v9:= v9 ^& v2 @kind int;
  #L212334.  v9:= v9 ^| v0 @kind int;
  #L212336.  v9:= (`byte`) v9 @kind i2b;
  #L212338.  v4[v6]:= v9 @kind byte;
  #L21233c.  v5:= v5 + v1 @kind int;
  #L21233e.  v3.`i.u.c` @type ^`int` := v5;
  #L212342.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L212348.  v0:= temp @kind wide;
  #L21234a.  v2:= 3L;
  #L21234e.  v0:= v0 + v2 @kind long;
  #L212350.  call `setSize$okio`(v8, v0) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L212356.  goto L2123ce;
  #L212358.  v1:= 1114111I;
  #L21235e.  if v9 > v1 then goto L2123d0;
  #L212362.  v1:= 4I;
  #L212364.  call temp:= `writableSegment$okio`(v8, v1) @signature `Li/e;.writableSegment$okio:(I)Li/u;` @kind virtual;
  #L21236a.  v3:= temp @kind object;
  #L21236c.  v4:= v3.`i.u.a` @type ^`byte`[] @kind object;
  #L212370.  v5:= v3.`i.u.c` @type ^`int`;
  #L212374.  v6:= v9 ^> 18;
  #L212378.  v6:= v6 ^| 240;
  #L21237c.  v6:= (`byte`) v6 @kind i2b;
  #L21237e.  v4[v5]:= v6 @kind byte;
  #L212382.  v6:= v5 + 1;
  #L212386.  v7:= v9 ^> 12;
  #L21238a.  v7:= v7 ^& v2 @kind int;
  #L21238c.  v7:= v7 ^| v0 @kind int;
  #L21238e.  v7:= (`byte`) v7 @kind i2b;
  #L212390.  v4[v6]:= v7 @kind byte;
  #L212394.  v6:= v5 + 2;
  #L212398.  v7:= v9 ^> 6;
  #L21239c.  v7:= v7 ^& v2 @kind int;
  #L21239e.  v7:= v7 ^| v0 @kind int;
  #L2123a0.  v7:= (`byte`) v7 @kind i2b;
  #L2123a2.  v4[v6]:= v7 @kind byte;
  #L2123a6.  v6:= v5 + 3;
  #L2123aa.  v9:= v9 ^& v2 @kind int;
  #L2123ac.  v9:= v9 ^| v0 @kind int;
  #L2123ae.  v9:= (`byte`) v9 @kind i2b;
  #L2123b0.  v4[v6]:= v9 @kind byte;
  #L2123b4.  v5:= v5 + v1 @kind int;
  #L2123b6.  v3.`i.u.c` @type ^`int` := v5;
  #L2123ba.  call temp:= `size`(v8) @signature `Li/e;.size:()J` @kind virtual;
  #L2123c0.  v0:= temp @kind wide;
  #L2123c2.  v2:= 4L;
  #L2123c6.  v0:= v0 + v2 @kind long;
  #L2123c8.  call `setSize$okio`(v8, v0) @signature `Li/e;.setSize$okio:(J)V` @kind virtual;
  #L2123ce.  return v8 @kind object;
  #L2123d0.  v0:= new `java.lang.IllegalArgumentException`;
  #L2123d4.  v1:= new `java.lang.StringBuilder`;
  #L2123d8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2123de.  v2:= "Unexpected code point: " @kind object;
  #L2123e2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2123e8.  call temp:= `toHexString`(v9) @signature `Li/c;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L2123ee.  v9:= temp @kind object;
  #L2123f0.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2123f6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2123fc.  v9:= temp @kind object;
  #L2123fe.  call `<init>`(v0, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L212404.  throw v0;
}
