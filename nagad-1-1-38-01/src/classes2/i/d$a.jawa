record `i.d$a` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`i.d$a` v0 @kind this) @signature `Li/d$a;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L20f760.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L20f766.  return @kind void;
}
procedure `void` `<init>`(`i.d$a` v0 @kind this, `kotlin.v.c.f` v1 @kind object) @signature `Li/d$a;.<init>:(Lkotlin/v/c/f;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L20f778.  call `<init>`(v0) @signature `Li/d$a;.<init>:()V` @kind direct;
  #L20f77e.  return @kind void;
}
procedure `void` `a`(`i.d$a` v7 @kind this, `i.d` v8 @kind object, `long` v9 , `boolean` v11 ) @signature `Li/d$a;.a:(Li/d;JZ)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L20f7a8.  v0:= constclass @type ^`i.d` @kind object;
  #L20f7ac.  @monitorenter v0
  #L20f7ae.  call temp:= `access$getHead$cp`() @signature `Li/d;.access$getHead$cp:()Li/d;` @kind static;
  #L20f7b4.  v1:= temp @kind object;
  #L20f7b6.  if v1 != 0 then goto L20f7da;
  #L20f7ba.  v1:= new `i.d`;
  #L20f7be.  call `<init>`(v1) @signature `Li/d;.<init>:()V` @kind direct;
  #L20f7c4.  call `access$setHead$cp`(v1) @signature `Li/d;.access$setHead$cp:(Li/d;)V` @kind static;
  #L20f7ca.  v1:= new `i.d$b`;
  #L20f7ce.  call `<init>`(v1) @signature `Li/d$b;.<init>:()V` @kind direct;
  #L20f7d4.  call `start`(v1) @signature `Ljava/lang/Thread;.start:()V` @kind virtual;
  #L20f7da.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L20f7e0.  v1:= temp @kind wide;
  #L20f7e2.  v3:= 0L;
  #L20f7e6.  v5:= lcmp(v9, v3);
  #L20f7ea.  if v5 == 0 then goto L20f80e;
  #L20f7ee.  if v11 == 0 then goto L20f80e;
  #L20f7f2.  call temp:= `deadlineNanoTime`(v8) @signature `Li/a0;.deadlineNanoTime:()J` @kind virtual;
  #L20f7f8.  v3:= temp @kind wide;
  #L20f7fa.  v3:= v3 - v1 @kind long;
  #L20f7fc.  call temp:= `min`(v9, v3) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L20f802.  v9:= temp @kind wide;
  #L20f804.  v9:= v9 + v1 @kind long;
  #L20f806.  call `access$setTimeoutAt$p`(v8, v9) @signature `Li/d;.access$setTimeoutAt$p:(Li/d;J)V` @kind static;
  #L20f80c.  goto L20f82e;
  #L20f80e.  if v5 == 0 then goto L20f81c;
  #L20f812.  v9:= v9 + v1 @kind long;
  #L20f814.  call `access$setTimeoutAt$p`(v8, v9) @signature `Li/d;.access$setTimeoutAt$p:(Li/d;J)V` @kind static;
  #L20f81a.  goto L20f82e;
  #L20f81c.  if v11 == 0 then goto L20f8c2;
  #L20f820.  call temp:= `deadlineNanoTime`(v8) @signature `Li/a0;.deadlineNanoTime:()J` @kind virtual;
  #L20f826.  v9:= temp @kind wide;
  #L20f828.  call `access$setTimeoutAt$p`(v8, v9) @signature `Li/d;.access$setTimeoutAt$p:(Li/d;J)V` @kind static;
  #L20f82e.  call temp:= `access$remainingNanos`(v8, v1) @signature `Li/d;.access$remainingNanos:(Li/d;J)J` @kind static;
  #L20f834.  v9:= temp @kind wide;
  #L20f836.  call temp:= `access$getHead$cp`() @signature `Li/d;.access$getHead$cp:()Li/d;` @kind static;
  #L20f83c.  v11:= temp @kind object;
  #L20f83e.  v3:= 0I;
  #L20f840.  if v11 == 0 then goto L20f8ba;
  #L20f844.  call temp:= `access$getNext$p`(v11) @signature `Li/d;.access$getNext$p:(Li/d;)Li/d;` @kind static;
  #L20f84a.  v4:= temp @kind object;
  #L20f84c.  if v4 == 0 then goto L20f88c;
  #L20f850.  call temp:= `access$getNext$p`(v11) @signature `Li/d;.access$getNext$p:(Li/d;)Li/d;` @kind static;
  #L20f856.  v4:= temp @kind object;
  #L20f858.  if v4 == 0 then goto L20f884;
  #L20f85c.  call temp:= `access$remainingNanos`(v4, v1) @signature `Li/d;.access$remainingNanos:(Li/d;J)J` @kind static;
  #L20f862.  v4:= temp @kind wide;
  #L20f864.  v6:= lcmp(v9, v4);
  #L20f868.  if v6 >= 0 then goto L20f86e;
  #L20f86c.  goto L20f88c;
  #L20f86e.  call temp:= `access$getNext$p`(v11) @signature `Li/d;.access$getNext$p:(Li/d;)Li/d;` @kind static;
  #L20f874.  v11:= temp @kind object;
  #L20f876.  if v11 == 0 then goto L20f87c;
  #L20f87a.  goto L20f844;
  #L20f87c.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L20f882.  throw v3;
  #L20f884.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L20f88a.  throw v3;
  #L20f88c.  call temp:= `access$getNext$p`(v11) @signature `Li/d;.access$getNext$p:(Li/d;)Li/d;` @kind static;
  #L20f892.  v9:= temp @kind object;
  #L20f894.  call `access$setNext$p`(v8, v9) @signature `Li/d;.access$setNext$p:(Li/d;Li/d;)V` @kind static;
  #L20f89a.  call `access$setNext$p`(v11, v8) @signature `Li/d;.access$setNext$p:(Li/d;Li/d;)V` @kind static;
  #L20f8a0.  call temp:= `access$getHead$cp`() @signature `Li/d;.access$getHead$cp:()Li/d;` @kind static;
  #L20f8a6.  v8:= temp @kind object;
  #L20f8a8.  if v11 != v8 then goto L20f8b2;
  #L20f8ac.  call `notify`(v0) @signature `Ljava/lang/Object;.notify:()V` @kind virtual;
  #L20f8b2.  v8:= `@@kotlin.q.a` @type ^`kotlin.q` @kind object;
  #L20f8b6.  @monitorexit v0
  #L20f8b8.  return @kind void;
  #L20f8ba.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L20f8c0.  throw v3;
  #L20f8c2.  v8:= new `java.lang.AssertionError`;
  #L20f8c6.  call `<init>`(v8) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L20f8cc.  throw v8;
  #L20f8ce.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L20f8d0.  @monitorexit v0
  #L20f8d2.  throw v8;
  catch `java.lang.Throwable` @[L20f7ae..L20f882] goto L20f8ce;
  catch `java.lang.Throwable` @[L20f884..L20f88a] goto L20f8ce;
  catch `java.lang.Throwable` @[L20f88c..L20f8b6] goto L20f8ce;
  catch `java.lang.Throwable` @[L20f8ba..L20f8c0] goto L20f8ce;
  catch `java.lang.Throwable` @[L20f8c2..L20f8ce] goto L20f8ce;
}
procedure `boolean` `a`(`i.d$a` v3 @kind this, `i.d` v4 @kind object) @signature `Li/d$a;.a:(Li/d;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L20f5fc.  v0:= constclass @type ^`i.d` @kind object;
  #L20f600.  @monitorenter v0
  #L20f602.  call temp:= `access$getHead$cp`() @signature `Li/d;.access$getHead$cp:()Li/d;` @kind static;
  #L20f608.  v1:= temp @kind object;
  #L20f60a.  if v1 == 0 then goto L20f640;
  #L20f60e.  call temp:= `access$getNext$p`(v1) @signature `Li/d;.access$getNext$p:(Li/d;)Li/d;` @kind static;
  #L20f614.  v2:= temp @kind object;
  #L20f616.  if v2 != v4 then goto L20f636;
  #L20f61a.  call temp:= `access$getNext$p`(v4) @signature `Li/d;.access$getNext$p:(Li/d;)Li/d;` @kind static;
  #L20f620.  v2:= temp @kind object;
  #L20f622.  call `access$setNext$p`(v1, v2) @signature `Li/d;.access$setNext$p:(Li/d;Li/d;)V` @kind static;
  #L20f628.  v1:= 0I;
  #L20f62a.  call `access$setNext$p`(v4, v1) @signature `Li/d;.access$setNext$p:(Li/d;Li/d;)V` @kind static;
  #L20f630.  v4:= 0I;
  #L20f632.  @monitorexit v0
  #L20f634.  return v4;
  #L20f636.  call temp:= `access$getNext$p`(v1) @signature `Li/d;.access$getNext$p:(Li/d;)Li/d;` @kind static;
  #L20f63c.  v1:= temp @kind object;
  #L20f63e.  goto L20f60a;
  #L20f640.  v4:= 1I;
  #L20f642.  @monitorexit v0
  #L20f644.  return v4;
  #L20f646.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L20f648.  @monitorexit v0
  #L20f64a.  throw v4;
  catch `java.lang.Throwable` @[L20f602..L20f630] goto L20f646;
  catch `java.lang.Throwable` @[L20f636..L20f63e] goto L20f646;
}
procedure `boolean` `access$cancelScheduledTimeout`(`i.d$a` v0 @kind object, `i.d` v1 @kind object) @signature `Li/d$a;.access$cancelScheduledTimeout:(Li/d$a;Li/d;)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L20f5e0.  call temp:= `a`(v0, v1) @signature `Li/d$a;.a:(Li/d;)Z` @kind direct;
  #L20f5e6.  v0:= temp;
  #L20f5e8.  return v0;
}
procedure `void` `access$scheduleTimeout`(`i.d$a` v0 @kind object, `i.d` v1 @kind object, `long` v2 , `boolean` v4 ) @signature `Li/d$a;.access$scheduleTimeout:(Li/d$a;Li/d;JZ)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L20f790.  call `a`(v0, v1, v2, v4) @signature `Li/d$a;.a:(Li/d;JZ)V` @kind direct;
  #L20f796.  return @kind void;
}
procedure `i.d` `awaitTimeout$okio`(`i.d$a` v9 @kind this) @signature `Li/d$a;.awaitTimeout$okio:()Li/d;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L20f670.  v0:= constclass @type ^`i.d` @kind object;
  #L20f674.  call temp:= `access$getHead$cp`() @signature `Li/d;.access$getHead$cp:()Li/d;` @kind static;
  #L20f67a.  v1:= temp @kind object;
  #L20f67c.  v2:= 0I;
  #L20f67e.  if v1 == 0 then goto L20f748;
  #L20f682.  call temp:= `access$getNext$p`(v1) @signature `Li/d;.access$getNext$p:(Li/d;)Li/d;` @kind static;
  #L20f688.  v1:= temp @kind object;
  #L20f68a.  if v1 != 0 then goto L20f6e8;
  #L20f68e.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L20f694.  v3:= temp @kind wide;
  #L20f696.  call temp:= `access$getIDLE_TIMEOUT_MILLIS$cp`() @signature `Li/d;.access$getIDLE_TIMEOUT_MILLIS$cp:()J` @kind static;
  #L20f69c.  v5:= temp @kind wide;
  #L20f69e.  call `wait`(v0, v5) @signature `Ljava/lang/Object;.wait:(J)V` @kind virtual;
  #L20f6a4.  call temp:= `access$getHead$cp`() @signature `Li/d;.access$getHead$cp:()Li/d;` @kind static;
  #L20f6aa.  v0:= temp @kind object;
  #L20f6ac.  if v0 == 0 then goto L20f6e0;
  #L20f6b0.  call temp:= `access$getNext$p`(v0) @signature `Li/d;.access$getNext$p:(Li/d;)Li/d;` @kind static;
  #L20f6b6.  v0:= temp @kind object;
  #L20f6b8.  if v0 != 0 then goto L20f6de;
  #L20f6bc.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L20f6c2.  v0:= temp @kind wide;
  #L20f6c4.  v0:= v0 - v3 @kind long;
  #L20f6c6.  call temp:= `access$getIDLE_TIMEOUT_NANOS$cp`() @signature `Li/d;.access$getIDLE_TIMEOUT_NANOS$cp:()J` @kind static;
  #L20f6cc.  v3:= temp @kind wide;
  #L20f6ce.  v5:= lcmp(v0, v3);
  #L20f6d2.  if v5 < 0 then goto L20f6de;
  #L20f6d6.  call temp:= `access$getHead$cp`() @signature `Li/d;.access$getHead$cp:()Li/d;` @kind static;
  #L20f6dc.  v2:= temp @kind object;
  #L20f6de.  return v2 @kind object;
  #L20f6e0.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L20f6e6.  throw v2;
  #L20f6e8.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L20f6ee.  v3:= temp @kind wide;
  #L20f6f0.  call temp:= `access$remainingNanos`(v1, v3) @signature `Li/d;.access$remainingNanos:(Li/d;J)J` @kind static;
  #L20f6f6.  v3:= temp @kind wide;
  #L20f6f8.  v5:= 0L;
  #L20f6fc.  v7:= lcmp(v3, v5);
  #L20f700.  if v7 <= 0 then goto L20f71e;
  #L20f704.  v5:= 1000000L;
  #L20f70a.  v7:= v3 / v5 @kind long;
  #L20f70e.  v5:= v5 * v7 @kind long;
  #L20f712.  v3:= v3 - v5 @kind long;
  #L20f714.  v1:= (`int`) v3 @kind l2i;
  #L20f716.  call `wait`(v0, v7, v1) @signature `Ljava/lang/Object;.wait:(JI)V` @kind virtual;
  #L20f71c.  return v2 @kind object;
  #L20f71e.  call temp:= `access$getHead$cp`() @signature `Li/d;.access$getHead$cp:()Li/d;` @kind static;
  #L20f724.  v0:= temp @kind object;
  #L20f726.  if v0 == 0 then goto L20f740;
  #L20f72a.  call temp:= `access$getNext$p`(v1) @signature `Li/d;.access$getNext$p:(Li/d;)Li/d;` @kind static;
  #L20f730.  v3:= temp @kind object;
  #L20f732.  call `access$setNext$p`(v0, v3) @signature `Li/d;.access$setNext$p:(Li/d;Li/d;)V` @kind static;
  #L20f738.  call `access$setNext$p`(v1, v2) @signature `Li/d;.access$setNext$p:(Li/d;Li/d;)V` @kind static;
  #L20f73e.  return v1 @kind object;
  #L20f740.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L20f746.  throw v2;
  #L20f748.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L20f74e.  throw v2;
}
