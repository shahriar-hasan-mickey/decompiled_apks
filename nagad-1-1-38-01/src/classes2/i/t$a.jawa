record `i.t$a` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.InputStream` @kind class {
  `i.t` `i.t$a.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`i.t$a` v0 @kind this, `i.t` v1 @kind object) @signature `Li/t$a;.<init>:(Li/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L215db0.  v0.`i.t$a.f` @type ^`i.t` := v1 @kind object;
  #L215db4.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L215dba.  return @kind void;
}
procedure `int` `available`(`i.t$a` v4 @kind this) @signature `Li/t$a;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L215c0c.  v0:= v4.`i.t$a.f` @type ^`i.t` @kind object;
  #L215c10.  v1:= v0.`i.t.g` @type ^`boolean` @kind boolean;
  #L215c14.  if v1 != 0 then goto L215c38;
  #L215c18.  v0:= v0.`i.t.f` @type ^`i.e` @kind object;
  #L215c1c.  call temp:= `size`(v0) @signature `Li/e;.size:()J` @kind virtual;
  #L215c22.  v0:= temp @kind wide;
  #L215c24.  v2:= 2147483647I;
  #L215c2a.  v2:= (`long`) v2 @kind i2l;
  #L215c2c.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L215c32.  v0:= temp @kind wide;
  #L215c34.  v1:= (`int`) v0 @kind l2i;
  #L215c36.  return v1;
  #L215c38.  v0:= new `java.io.IOException`;
  #L215c3c.  v1:= "closed" @kind object;
  #L215c40.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L215c46.  throw v0;
}
procedure `void` `close`(`i.t$a` v1 @kind this) @signature `Li/t$a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L215dcc.  v0:= v1.`i.t$a.f` @type ^`i.t` @kind object;
  #L215dd0.  call `close`(v0) @signature `Li/t;.close:()V` @kind virtual;
  #L215dd6.  return @kind void;
}
procedure `int` `read`(`i.t$a` v5 @kind this) @signature `Li/t$a;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L215c58.  v0:= v5.`i.t$a.f` @type ^`i.t` @kind object;
  #L215c5c.  v1:= v0.`i.t.g` @type ^`boolean` @kind boolean;
  #L215c60.  if v1 != 0 then goto L215cbc;
  #L215c64.  v0:= v0.`i.t.f` @type ^`i.e` @kind object;
  #L215c68.  call temp:= `size`(v0) @signature `Li/e;.size:()J` @kind virtual;
  #L215c6e.  v0:= temp @kind wide;
  #L215c70.  v2:= 0L;
  #L215c74.  v4:= lcmp(v0, v2);
  #L215c78.  if v4 != 0 then goto L215ca6;
  #L215c7c.  v0:= v5.`i.t$a.f` @type ^`i.t` @kind object;
  #L215c80.  v1:= v0.`i.t.h` @type ^`i.z` @kind object;
  #L215c84.  v0:= v0.`i.t.f` @type ^`i.e` @kind object;
  #L215c88.  v2:= 8192I;
  #L215c8c.  v2:= (`long`) v2 @kind i2l;
  #L215c8e.  call temp:= `read`(v1, v0, v2) @signature `Li/z;.read:(Li/e;J)J` @kind interface;
  #L215c94.  v0:= temp @kind wide;
  #L215c96.  v2:= -1L;
  #L215c9a.  v4:= lcmp(v0, v2);
  #L215c9e.  if v4 != 0 then goto L215ca6;
  #L215ca2.  v0:= -1I;
  #L215ca4.  return v0;
  #L215ca6.  v0:= v5.`i.t$a.f` @type ^`i.t` @kind object;
  #L215caa.  v0:= v0.`i.t.f` @type ^`i.e` @kind object;
  #L215cae.  call temp:= `readByte`(v0) @signature `Li/e;.readByte:()B` @kind virtual;
  #L215cb4.  v0:= temp;
  #L215cb6.  v0:= v0 ^& 255;
  #L215cba.  return v0;
  #L215cbc.  v0:= new `java.io.IOException`;
  #L215cc0.  v1:= "closed" @kind object;
  #L215cc4.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L215cca.  throw v0;
}
procedure `int` `read`(`i.t$a` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Li/t$a;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L215cdc.  v0:= "data" @kind object;
  #L215ce0.  call `checkParameterIsNotNull`(v8, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L215ce6.  v0:= v7.`i.t$a.f` @type ^`i.t` @kind object;
  #L215cea.  v0:= v0.`i.t.g` @type ^`boolean` @kind boolean;
  #L215cee.  if v0 != 0 then goto L215d58;
  #L215cf2.  v0:= length @variable v8;
  #L215cf4.  v1:= (`long`) v0 @kind i2l;
  #L215cf6.  v3:= (`long`) v9 @kind i2l;
  #L215cf8.  v5:= (`long`) v10 @kind i2l;
  #L215cfa.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Li/c;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L215d00.  v0:= v7.`i.t$a.f` @type ^`i.t` @kind object;
  #L215d04.  v0:= v0.`i.t.f` @type ^`i.e` @kind object;
  #L215d08.  call temp:= `size`(v0) @signature `Li/e;.size:()J` @kind virtual;
  #L215d0e.  v0:= temp @kind wide;
  #L215d10.  v2:= 0L;
  #L215d14.  v4:= lcmp(v0, v2);
  #L215d18.  if v4 != 0 then goto L215d46;
  #L215d1c.  v0:= v7.`i.t$a.f` @type ^`i.t` @kind object;
  #L215d20.  v1:= v0.`i.t.h` @type ^`i.z` @kind object;
  #L215d24.  v0:= v0.`i.t.f` @type ^`i.e` @kind object;
  #L215d28.  v2:= 8192I;
  #L215d2c.  v2:= (`long`) v2 @kind i2l;
  #L215d2e.  call temp:= `read`(v1, v0, v2) @signature `Li/z;.read:(Li/e;J)J` @kind interface;
  #L215d34.  v0:= temp @kind wide;
  #L215d36.  v2:= -1L;
  #L215d3a.  v4:= lcmp(v0, v2);
  #L215d3e.  if v4 != 0 then goto L215d46;
  #L215d42.  v8:= -1I;
  #L215d44.  return v8;
  #L215d46.  v0:= v7.`i.t$a.f` @type ^`i.t` @kind object;
  #L215d4a.  v0:= v0.`i.t.f` @type ^`i.e` @kind object;
  #L215d4e.  call temp:= `read`(v0, v8, v9, v10) @signature `Li/e;.read:([BII)I` @kind virtual;
  #L215d54.  v8:= temp;
  #L215d56.  return v8;
  #L215d58.  v8:= new `java.io.IOException`;
  #L215d5c.  v9:= "closed" @kind object;
  #L215d60.  call `<init>`(v8, v9) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L215d66.  throw v8;
}
procedure `java.lang.String` `toString`(`i.t$a` v2 @kind this) @signature `Li/t$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L215d78.  v0:= new `java.lang.StringBuilder`;
  #L215d7c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L215d82.  v1:= v2.`i.t$a.f` @type ^`i.t` @kind object;
  #L215d86.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L215d8c.  v1:= ".inputStream()" @kind object;
  #L215d90.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L215d96.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L215d9c.  v0:= temp @kind object;
  #L215d9e.  return v0 @kind object;
}
