record `i.c` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `boolean` `arrayRangeEquals`(`byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Li/c;.arrayRangeEquals:([BI[BII)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L20f310.  v0:= "a" @kind object;
  #L20f314.  call `checkParameterIsNotNull`(v4, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L20f31a.  v0:= "b" @kind object;
  #L20f31e.  call `checkParameterIsNotNull`(v6, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L20f324.  v0:= 0I;
  #L20f326.  v1:= 0I;
  #L20f328.  if v1 >= v8 then goto L20f348;
  #L20f32c.  v2:= v1 + v5 @kind int;
  #L20f330.  v2:= v4[v2] @kind byte;
  #L20f334.  v3:= v1 + v7 @kind int;
  #L20f338.  v3:= v6[v3] @kind byte;
  #L20f33c.  if v2 == v3 then goto L20f342;
  #L20f340.  return v0;
  #L20f342.  v1:= v1 + 1;
  #L20f346.  goto L20f328;
  #L20f348.  v4:= 1I;
  #L20f34a.  return v4;
}
procedure `void` `checkOffsetAndCount`(`long` v5 , `long` v7 , `long` v9 ) @signature `Li/c;.checkOffsetAndCount:(JJJ)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L20f55c.  v0:= v7 ^| v9 @kind long;
  #L20f560.  v2:= 0L;
  #L20f564.  v4:= lcmp(v0, v2);
  #L20f568.  if v4 < 0 then goto L20f582;
  #L20f56c.  v0:= lcmp(v7, v5);
  #L20f570.  if v0 > 0 then goto L20f582;
  #L20f574.  v0:= v5 - v7 @kind long;
  #L20f578.  v2:= lcmp(v0, v9);
  #L20f57c.  if v2 < 0 then goto L20f582;
  #L20f580.  return @kind void;
  #L20f582.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L20f586.  v1:= new `java.lang.StringBuilder`;
  #L20f58a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L20f590.  v2:= "size=" @kind object;
  #L20f594.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20f59a.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L20f5a0.  v5:= " offset=" @kind object;
  #L20f5a4.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20f5aa.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L20f5b0.  v5:= " byteCount=" @kind object;
  #L20f5b4.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20f5ba.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L20f5c0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L20f5c6.  v5:= temp @kind object;
  #L20f5c8.  call `<init>`(v0, v5) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20f5ce.  throw v0;
}
procedure `int` `reverseBytes`(`int` v2 ) @signature `Li/c;.reverseBytes:(I)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L20f35c.  v0:= -16777216I;
  #L20f360.  v0:= v0 ^& v2 @kind int;
  #L20f362.  v0:= v0 ^>> 24;
  #L20f366.  v1:= 16711680I;
  #L20f36a.  v1:= v1 ^& v2 @kind int;
  #L20f36c.  v1:= v1 ^>> 8;
  #L20f370.  v0:= v0 ^| v1 @kind int;
  #L20f372.  v1:= 65280I;
  #L20f378.  v1:= v1 ^& v2 @kind int;
  #L20f37a.  v1:= v1 ^< 8;
  #L20f37e.  v0:= v0 ^| v1 @kind int;
  #L20f380.  v2:= v2 ^& 255;
  #L20f384.  v2:= v2 ^< 24;
  #L20f388.  v2:= v2 ^| v0 @kind int;
  #L20f38a.  return v2;
}
procedure `short` `reverseBytes`(`short` v1 ) @signature `Li/c;.reverseBytes:(S)S` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L20f528.  v0:= 65535I;
  #L20f52e.  v1:= v1 ^& v0 @kind int;
  #L20f530.  v0:= 65280I;
  #L20f536.  v0:= v0 ^& v1 @kind int;
  #L20f538.  v0:= v0 ^>> 8;
  #L20f53c.  v1:= v1 ^& 255;
  #L20f540.  v1:= v1 ^< 8;
  #L20f544.  v1:= v1 ^| v0 @kind int;
  #L20f546.  v1:= (`short`) v1 @kind i2s;
  #L20f548.  return v1;
}
procedure `java.lang.String` `toHexString`(`byte` v3 ) @signature `Li/c;.toHexString:(B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L20f39c.  v0:= 4I;
  #L20f39e.  v0:= new `char`[v0];
  #L20f3a2.  v1:= 0I;
  #L20f3a4.  v2:= 48I;
  #L20f3a8.  v0[v1]:= v2 @kind char;
  #L20f3ac.  v1:= 1I;
  #L20f3ae.  v2:= 120I;
  #L20f3b2.  v0[v1]:= v2 @kind char;
  #L20f3b6.  call temp:= `getHEX_DIGIT_CHARS`() @signature `Li/b0/b;.getHEX_DIGIT_CHARS:()[C` @kind static;
  #L20f3bc.  v1:= temp @kind object;
  #L20f3be.  v2:= v3 ^> 4;
  #L20f3c2.  v2:= v2 ^& 15;
  #L20f3c6.  v1:= v1[v2] @kind char;
  #L20f3ca.  v2:= 2I;
  #L20f3cc.  v0[v2]:= v1 @kind char;
  #L20f3d0.  call temp:= `getHEX_DIGIT_CHARS`() @signature `Li/b0/b;.getHEX_DIGIT_CHARS:()[C` @kind static;
  #L20f3d6.  v1:= temp @kind object;
  #L20f3d8.  v3:= v3 ^& 15;
  #L20f3dc.  v3:= v1[v3] @kind char;
  #L20f3e0.  v1:= 3I;
  #L20f3e2.  v0[v1]:= v3 @kind char;
  #L20f3e6.  v3:= new `java.lang.String`;
  #L20f3ea.  call `<init>`(v3, v0) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L20f3f0.  return v3 @kind object;
}
procedure `java.lang.String` `toHexString`(`int` v5 ) @signature `Li/c;.toHexString:(I)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L20f404.  v0:= 10I;
  #L20f408.  v1:= new `char`[v0];
  #L20f40c.  call temp:= `getHEX_DIGIT_CHARS`() @signature `Li/b0/b;.getHEX_DIGIT_CHARS:()[C` @kind static;
  #L20f412.  v2:= temp @kind object;
  #L20f414.  v3:= v5 ^> 28;
  #L20f418.  v3:= v3 ^& 15;
  #L20f41c.  v2:= v2[v3] @kind char;
  #L20f420.  v3:= 2I;
  #L20f422.  v1[v3]:= v2 @kind char;
  #L20f426.  call temp:= `getHEX_DIGIT_CHARS`() @signature `Li/b0/b;.getHEX_DIGIT_CHARS:()[C` @kind static;
  #L20f42c.  v2:= temp @kind object;
  #L20f42e.  v4:= v5 ^> 24;
  #L20f432.  v4:= v4 ^& 15;
  #L20f436.  v2:= v2[v4] @kind char;
  #L20f43a.  v4:= 3I;
  #L20f43c.  v1[v4]:= v2 @kind char;
  #L20f440.  call temp:= `getHEX_DIGIT_CHARS`() @signature `Li/b0/b;.getHEX_DIGIT_CHARS:()[C` @kind static;
  #L20f446.  v2:= temp @kind object;
  #L20f448.  v4:= v5 ^> 20;
  #L20f44c.  v4:= v4 ^& 15;
  #L20f450.  v2:= v2[v4] @kind char;
  #L20f454.  v4:= 4I;
  #L20f456.  v1[v4]:= v2 @kind char;
  #L20f45a.  call temp:= `getHEX_DIGIT_CHARS`() @signature `Li/b0/b;.getHEX_DIGIT_CHARS:()[C` @kind static;
  #L20f460.  v2:= temp @kind object;
  #L20f462.  v4:= v5 ^> 16;
  #L20f466.  v4:= v4 ^& 15;
  #L20f46a.  v2:= v2[v4] @kind char;
  #L20f46e.  v4:= 5I;
  #L20f470.  v1[v4]:= v2 @kind char;
  #L20f474.  call temp:= `getHEX_DIGIT_CHARS`() @signature `Li/b0/b;.getHEX_DIGIT_CHARS:()[C` @kind static;
  #L20f47a.  v2:= temp @kind object;
  #L20f47c.  v4:= v5 ^> 12;
  #L20f480.  v4:= v4 ^& 15;
  #L20f484.  v2:= v2[v4] @kind char;
  #L20f488.  v4:= 6I;
  #L20f48a.  v1[v4]:= v2 @kind char;
  #L20f48e.  call temp:= `getHEX_DIGIT_CHARS`() @signature `Li/b0/b;.getHEX_DIGIT_CHARS:()[C` @kind static;
  #L20f494.  v2:= temp @kind object;
  #L20f496.  v4:= v5 ^> 8;
  #L20f49a.  v4:= v4 ^& 15;
  #L20f49e.  v2:= v2[v4] @kind char;
  #L20f4a2.  v4:= 7I;
  #L20f4a4.  v1[v4]:= v2 @kind char;
  #L20f4a8.  call temp:= `getHEX_DIGIT_CHARS`() @signature `Li/b0/b;.getHEX_DIGIT_CHARS:()[C` @kind static;
  #L20f4ae.  v2:= temp @kind object;
  #L20f4b0.  v4:= v5 ^> 4;
  #L20f4b4.  v4:= v4 ^& 15;
  #L20f4b8.  v2:= v2[v4] @kind char;
  #L20f4bc.  v4:= 8I;
  #L20f4c0.  v1[v4]:= v2 @kind char;
  #L20f4c4.  call temp:= `getHEX_DIGIT_CHARS`() @signature `Li/b0/b;.getHEX_DIGIT_CHARS:()[C` @kind static;
  #L20f4ca.  v2:= temp @kind object;
  #L20f4cc.  v5:= v5 ^& 15;
  #L20f4d0.  v5:= v2[v5] @kind char;
  #L20f4d4.  v2:= 9I;
  #L20f4d8.  v1[v2]:= v5 @kind char;
  #L20f4dc.  v5:= 2I;
  #L20f4de.  v2:= 48I;
  #L20f4e2.  if v5 >= v0 then goto L20f4f6;
  #L20f4e6.  v4:= v1[v5] @kind char;
  #L20f4ea.  if v4 == v2 then goto L20f4f0;
  #L20f4ee.  goto L20f4f6;
  #L20f4f0.  v5:= v5 + 1;
  #L20f4f4.  goto L20f4de;
  #L20f4f6.  v5:= v5 - v3 @kind int;
  #L20f4f8.  v1[v5]:= v2 @kind char;
  #L20f4fc.  v2:= v5 + 1;
  #L20f500.  v3:= 120I;
  #L20f504.  v1[v2]:= v3 @kind char;
  #L20f508.  v0:= v0 - v5 @kind int;
  #L20f50a.  v2:= new `java.lang.String`;
  #L20f50e.  call `<init>`(v2, v1, v5, v0) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L20f514.  return v2 @kind object;
}
