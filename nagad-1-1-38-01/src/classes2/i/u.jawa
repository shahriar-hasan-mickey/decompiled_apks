record `i.u` @kind class @AccessFlag PUBLIC_FINAL {
  `byte`[] `i.u.a` @AccessFlag PUBLIC_FINAL;
  `int` `i.u.b` @AccessFlag PUBLIC;
  `int` `i.u.c` @AccessFlag PUBLIC;
  `boolean` `i.u.d` @AccessFlag PUBLIC;
  `boolean` `i.u.e` @AccessFlag PUBLIC;
  `i.u` `i.u.f` @AccessFlag PUBLIC;
  `i.u` `i.u.g` @AccessFlag PUBLIC;
}
procedure `void` `<clinit>`() @signature `Li/u;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L217378.  v0:= new `i.u$a`;
  #L21737c.  v1:= 0I;
  #L21737e.  call `<init>`(v0, v1) @signature `Li/u$a;.<init>:(Lkotlin/v/c/f;)V` @kind direct;
  #L217384.  return @kind void;
}
procedure `void` `<init>`(`i.u` v1 @kind this) @signature `Li/u;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L217398.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21739e.  v0:= 8192I;
  #L2173a2.  v0:= new `byte`[v0];
  #L2173a6.  v1.`i.u.a` @type ^`byte`[] := v0 @kind object;
  #L2173aa.  v0:= 1I;
  #L2173ac.  v1.`i.u.e` @type ^`boolean` := v0 @kind boolean;
  #L2173b0.  v0:= 0I;
  #L2173b2.  v1.`i.u.d` @type ^`boolean` := v0 @kind boolean;
  #L2173b6.  return @kind void;
}
procedure `void` `<init>`(`i.u` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 , `boolean` v5 , `boolean` v6 ) @signature `Li/u;.<init>:([BIIZZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2173c8.  v0:= "data" @kind object;
  #L2173cc.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2173d2.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2173d8.  v1.`i.u.a` @type ^`byte`[] := v2 @kind object;
  #L2173dc.  v1.`i.u.b` @type ^`int` := v3;
  #L2173e0.  v1.`i.u.c` @type ^`int` := v4;
  #L2173e4.  v1.`i.u.d` @type ^`boolean` := v5 @kind boolean;
  #L2173e8.  v1.`i.u.e` @type ^`boolean` := v6 @kind boolean;
  #L2173ec.  return @kind void;
}
procedure `void` `compact`(`i.u` v6 @kind this) @signature `Li/u;.compact:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L217400.  v0:= v6.`i.u.g` @type ^`i.u` @kind object;
  #L217404.  v1:= 0I;
  #L217406.  if v0 == v6 then goto L21740e;
  #L21740a.  v0:= 1I;
  #L21740c.  goto L217410;
  #L21740e.  v0:= 0I;
  #L217410.  if v0 == 0 then goto L2174a4;
  #L217414.  v0:= v6.`i.u.g` @type ^`i.u` @kind object;
  #L217418.  v2:= 0I;
  #L21741a.  if v0 == 0 then goto L21749c;
  #L21741e.  v3:= v0.`i.u.e` @type ^`boolean` @kind boolean;
  #L217422.  if v3 != 0 then goto L217428;
  #L217426.  return @kind void;
  #L217428.  v3:= v6.`i.u.c` @type ^`int`;
  #L21742c.  v4:= v6.`i.u.b` @type ^`int`;
  #L217430.  v3:= v3 - v4 @kind int;
  #L217432.  if v0 == 0 then goto L217494;
  #L217436.  v4:= v0.`i.u.c` @type ^`int`;
  #L21743a.  v4:= v4 - 8192;
  #L21743e.  if v0 == 0 then goto L21748c;
  #L217442.  v5:= v0.`i.u.d` @type ^`boolean` @kind boolean;
  #L217446.  if v5 == 0 then goto L21744c;
  #L21744a.  goto L217454;
  #L21744c.  if v0 == 0 then goto L217484;
  #L217450.  v1:= v0.`i.u.b` @type ^`int`;
  #L217454.  v4:= v4 + v1 @kind int;
  #L217456.  if v3 <= v4 then goto L21745c;
  #L21745a.  return @kind void;
  #L21745c.  v0:= v6.`i.u.g` @type ^`i.u` @kind object;
  #L217460.  if v0 == 0 then goto L21747c;
  #L217464.  call `writeTo`(v6, v0, v3) @signature `Li/u;.writeTo:(Li/u;I)V` @kind virtual;
  #L21746a.  call temp:= `pop`(v6) @signature `Li/u;.pop:()Li/u;` @kind virtual;
  #L217470.  v0:= `@@i.v.c` @type ^`i.v` @kind object;
  #L217474.  call `recycle`(v0, v6) @signature `Li/v;.recycle:(Li/u;)V` @kind virtual;
  #L21747a.  return @kind void;
  #L21747c.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L217482.  throw v2;
  #L217484.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L21748a.  throw v2;
  #L21748c.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L217492.  throw v2;
  #L217494.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L21749a.  throw v2;
  #L21749c.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L2174a2.  throw v2;
  #L2174a4.  v0:= new `java.lang.IllegalStateException`;
  #L2174a8.  v1:= "cannot compact" @kind object;
  #L2174ac.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2174b2.  v1:= temp @kind object;
  #L2174b4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2174ba.  throw v0;
}
procedure `i.u` `pop`(`i.u` v4 @kind this) @signature `Li/u;.pop:()Li/u;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L217200.  v0:= v4.`i.u.f` @type ^`i.u` @kind object;
  #L217204.  v1:= 0I;
  #L217206.  if v0 == v4 then goto L21720c;
  #L21720a.  goto L21720e;
  #L21720c.  v0:= v1 @kind object;
  #L21720e.  v2:= v4.`i.u.g` @type ^`i.u` @kind object;
  #L217212.  if v2 == 0 then goto L21723c;
  #L217216.  v3:= v4.`i.u.f` @type ^`i.u` @kind object;
  #L21721a.  v2.`i.u.f` @type ^`i.u` := v3 @kind object;
  #L21721e.  v3:= v4.`i.u.f` @type ^`i.u` @kind object;
  #L217222.  if v3 == 0 then goto L217234;
  #L217226.  v3.`i.u.g` @type ^`i.u` := v2 @kind object;
  #L21722a.  v4.`i.u.f` @type ^`i.u` := v1 @kind object;
  #L21722e.  v4.`i.u.g` @type ^`i.u` := v1 @kind object;
  #L217232.  return v0 @kind object;
  #L217234.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L21723a.  throw v1;
  #L21723c.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L217242.  throw v1;
}
procedure `i.u` `push`(`i.u` v1 @kind this, `i.u` v2 @kind object) @signature `Li/u;.push:(Li/u;)Li/u;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L217254.  v0:= "segment" @kind object;
  #L217258.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L21725e.  v2.`i.u.g` @type ^`i.u` := v1 @kind object;
  #L217262.  v0:= v1.`i.u.f` @type ^`i.u` @kind object;
  #L217266.  v2.`i.u.f` @type ^`i.u` := v0 @kind object;
  #L21726a.  v0:= v1.`i.u.f` @type ^`i.u` @kind object;
  #L21726e.  if v0 == 0 then goto L21727c;
  #L217272.  v0.`i.u.g` @type ^`i.u` := v2 @kind object;
  #L217276.  v1.`i.u.f` @type ^`i.u` := v2 @kind object;
  #L21727a.  return v2 @kind object;
  #L21727c.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L217282.  v2:= 0I;
  #L217284.  throw v2;
}
procedure `i.u` `sharedCopy`(`i.u` v7 @kind this) @signature `Li/u;.sharedCopy:()Li/u;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L217298.  v0:= 1I;
  #L21729a.  v7.`i.u.d` @type ^`boolean` := v0 @kind boolean;
  #L21729e.  v0:= new `i.u`;
  #L2172a2.  v2:= v7.`i.u.a` @type ^`byte`[] @kind object;
  #L2172a6.  v3:= v7.`i.u.b` @type ^`int`;
  #L2172aa.  v4:= v7.`i.u.c` @type ^`int`;
  #L2172ae.  v5:= 1I;
  #L2172b0.  v6:= 0I;
  #L2172b2.  v1:= v0 @kind object;
  #L2172b4.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Li/u;.<init>:([BIIZZ)V` @kind direct;
  #L2172ba.  return v0 @kind object;
}
procedure `i.u` `split`(`i.u` v8 @kind this, `int` v9 ) @signature `Li/u;.split:(I)Li/u;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2172cc.  if v9 <= 0 then goto L2172e2;
  #L2172d0.  v0:= v8.`i.u.c` @type ^`int`;
  #L2172d4.  v1:= v8.`i.u.b` @type ^`int`;
  #L2172d8.  v0:= v0 - v1 @kind int;
  #L2172da.  if v9 > v0 then goto L2172e2;
  #L2172de.  v0:= 1I;
  #L2172e0.  goto L2172e4;
  #L2172e2.  v0:= 0I;
  #L2172e4.  if v0 == 0 then goto L217350;
  #L2172e8.  v0:= 1024I;
  #L2172ec.  if v9 < v0 then goto L2172fa;
  #L2172f0.  call temp:= `sharedCopy`(v8) @signature `Li/u;.sharedCopy:()Li/u;` @kind virtual;
  #L2172f6.  v0:= temp @kind object;
  #L2172f8.  goto L217322;
  #L2172fa.  v0:= `@@i.v.c` @type ^`i.v` @kind object;
  #L2172fe.  call temp:= `take`(v0) @signature `Li/v;.take:()Li/u;` @kind virtual;
  #L217304.  v0:= temp @kind object;
  #L217306.  v1:= v8.`i.u.a` @type ^`byte`[] @kind object;
  #L21730a.  v2:= v0.`i.u.a` @type ^`byte`[] @kind object;
  #L21730e.  v3:= 0I;
  #L217310.  v4:= v8.`i.u.b` @type ^`int`;
  #L217314.  v5:= v4 + v9 @kind int;
  #L217318.  v6:= 2I;
  #L21731a.  v7:= 0I;
  #L21731c.  call temp:= `copyInto$default`(v1, v2, v3, v4, v5, v6, v7) @signature `Lkotlin/r/d;.copyInto$default:([B[BIIIILjava/lang/Object;)[B` @kind static;
  #L217322.  v1:= v0.`i.u.b` @type ^`int`;
  #L217326.  v1:= v1 + v9 @kind int;
  #L217328.  v0.`i.u.c` @type ^`int` := v1;
  #L21732c.  v1:= v8.`i.u.b` @type ^`int`;
  #L217330.  v1:= v1 + v9 @kind int;
  #L217332.  v8.`i.u.b` @type ^`int` := v1;
  #L217336.  v9:= v8.`i.u.g` @type ^`i.u` @kind object;
  #L21733a.  if v9 == 0 then goto L217346;
  #L21733e.  call temp:= `push`(v9, v0) @signature `Li/u;.push:(Li/u;)Li/u;` @kind virtual;
  #L217344.  return v0 @kind object;
  #L217346.  call `throwNpe`() @signature `Lkotlin/v/c/i;.throwNpe:()V` @kind static;
  #L21734c.  v9:= 0I;
  #L21734e.  throw v9;
  #L217350.  v9:= new `java.lang.IllegalArgumentException`;
  #L217354.  v0:= "byteCount out of range" @kind object;
  #L217358.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L21735e.  v0:= temp @kind object;
  #L217360.  call `<init>`(v9, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L217366.  throw v9;
}
procedure `void` `writeTo`(`i.u` v8 @kind this, `i.u` v9 @kind object, `int` v10 ) @signature `Li/u;.writeTo:(Li/u;I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2174cc.  v0:= "sink" @kind object;
  #L2174d0.  call `checkParameterIsNotNull`(v9, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2174d6.  v0:= v9.`i.u.e` @type ^`boolean` @kind boolean;
  #L2174da.  if v0 == 0 then goto L217574;
  #L2174de.  v5:= v9.`i.u.c` @type ^`int`;
  #L2174e2.  v0:= v5 + v10 @kind int;
  #L2174e6.  v1:= 8192I;
  #L2174ea.  if v0 <= v1 then goto L217544;
  #L2174ee.  v0:= v9.`i.u.d` @type ^`boolean` @kind boolean;
  #L2174f2.  if v0 != 0 then goto L217538;
  #L2174f6.  v0:= v5 + v10 @kind int;
  #L2174fa.  v4:= v9.`i.u.b` @type ^`int`;
  #L2174fe.  v0:= v0 - v4 @kind int;
  #L217500.  if v0 > v1 then goto L21752c;
  #L217504.  v2:= v9.`i.u.a` @type ^`byte`[] @kind object;
  #L217508.  v3:= 0I;
  #L21750a.  v6:= 2I;
  #L21750c.  v7:= 0I;
  #L21750e.  v1:= v2 @kind object;
  #L217510.  call temp:= `copyInto$default`(v1, v2, v3, v4, v5, v6, v7) @signature `Lkotlin/r/d;.copyInto$default:([B[BIIIILjava/lang/Object;)[B` @kind static;
  #L217516.  v0:= v9.`i.u.c` @type ^`int`;
  #L21751a.  v1:= v9.`i.u.b` @type ^`int`;
  #L21751e.  v0:= v0 - v1 @kind int;
  #L217520.  v9.`i.u.c` @type ^`int` := v0;
  #L217524.  v0:= 0I;
  #L217526.  v9.`i.u.b` @type ^`int` := v0;
  #L21752a.  goto L217544;
  #L21752c.  v9:= new `java.lang.IllegalArgumentException`;
  #L217530.  call `<init>`(v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L217536.  throw v9;
  #L217538.  v9:= new `java.lang.IllegalArgumentException`;
  #L21753c.  call `<init>`(v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L217542.  throw v9;
  #L217544.  v0:= v8.`i.u.a` @type ^`byte`[] @kind object;
  #L217548.  v1:= v9.`i.u.a` @type ^`byte`[] @kind object;
  #L21754c.  v2:= v9.`i.u.c` @type ^`int`;
  #L217550.  v3:= v8.`i.u.b` @type ^`int`;
  #L217554.  v4:= v3 + v10 @kind int;
  #L217558.  call temp:= `copyInto`(v0, v1, v2, v3, v4) @signature `Lkotlin/r/d;.copyInto:([B[BIII)[B` @kind static;
  #L21755e.  v0:= v9.`i.u.c` @type ^`int`;
  #L217562.  v0:= v0 + v10 @kind int;
  #L217564.  v9.`i.u.c` @type ^`int` := v0;
  #L217568.  v9:= v8.`i.u.b` @type ^`int`;
  #L21756c.  v9:= v9 + v10 @kind int;
  #L21756e.  v8.`i.u.b` @type ^`int` := v9;
  #L217572.  return @kind void;
  #L217574.  v9:= new `java.lang.IllegalStateException`;
  #L217578.  v10:= "only owner can write" @kind object;
  #L21757c.  call temp:= `toString`(v10) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L217582.  v10:= temp @kind object;
  #L217584.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21758a.  throw v9;
}
