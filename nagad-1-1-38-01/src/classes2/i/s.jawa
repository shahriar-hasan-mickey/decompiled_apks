record `i.s` @kind class @AccessFlag PUBLIC_FINAL extends `i.f` @kind interface {
  `i.e` `i.s.f` @AccessFlag PUBLIC_FINAL;
  `boolean` `i.s.g` @AccessFlag PUBLIC;
  `i.x` `i.s.h` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`i.s` v1 @kind this, `i.x` v2 @kind object) @signature `Li/s;.<init>:(Li/x;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L215a8c.  v0:= "sink" @kind object;
  #L215a90.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L215a96.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L215a9c.  v1.`i.s.h` @type ^`i.x` := v2 @kind object;
  #L215aa0.  v2:= new `i.e`;
  #L215aa4.  call `<init>`(v2) @signature `Li/e;.<init>:()V` @kind direct;
  #L215aaa.  v1.`i.s.f` @type ^`i.e` := v2 @kind object;
  #L215aae.  return @kind void;
}
procedure `i.e` `buffer`(`i.s` v1 @kind this) @signature `Li/s;.buffer:()Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2156d8.  v0:= v1.`i.s.f` @type ^`i.e` @kind object;
  #L2156dc.  return v0 @kind object;
}
procedure `void` `close`(`i.s` v6 @kind this) @signature `Li/s;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L215ac0.  v0:= v6.`i.s.g` @type ^`boolean` @kind boolean;
  #L215ac4.  if v0 == 0 then goto L215aca;
  #L215ac8.  return @kind void;
  #L215aca.  v0:= 0I;
  #L215acc.  v1:= v6.`i.s.f` @type ^`i.e` @kind object;
  #L215ad0.  call temp:= `size`(v1) @signature `Li/e;.size:()J` @kind virtual;
  #L215ad6.  v1:= temp @kind wide;
  #L215ad8.  v3:= 0L;
  #L215adc.  v5:= lcmp(v1, v3);
  #L215ae0.  if v5 <= 0 then goto L215b02;
  #L215ae4.  v1:= v6.`i.s.h` @type ^`i.x` @kind object;
  #L215ae8.  v2:= v6.`i.s.f` @type ^`i.e` @kind object;
  #L215aec.  v3:= v6.`i.s.f` @type ^`i.e` @kind object;
  #L215af0.  call temp:= `size`(v3) @signature `Li/e;.size:()J` @kind virtual;
  #L215af6.  v3:= temp @kind wide;
  #L215af8.  call `write`(v1, v2, v3) @signature `Li/x;.write:(Li/e;J)V` @kind interface;
  #L215afe.  goto L215b02;
  #L215b00.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L215b02.  v1:= v6.`i.s.h` @type ^`i.x` @kind object;
  #L215b06.  call `close`(v1) @signature `Li/x;.close:()V` @kind interface;
  #L215b0c.  goto L215b16;
  #L215b0e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L215b10.  if v0 != 0 then goto L215b16;
  #L215b14.  v0:= v1 @kind object;
  #L215b16.  v1:= 1I;
  #L215b18.  v6.`i.s.g` @type ^`boolean` := v1 @kind boolean;
  #L215b1c.  if v0 != 0 then goto L215b22;
  #L215b20.  return @kind void;
  #L215b22.  throw v0;
  catch `java.lang.Throwable` @[L215acc..L215afe] goto L215b00;
  catch `java.lang.Throwable` @[L215b02..L215b0c] goto L215b0e;
}
procedure `i.f` `emit`(`i.s` v5 @kind this) @signature `Li/s;.emit:()Li/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L215708.  v0:= v5.`i.s.g` @type ^`boolean` @kind boolean;
  #L21570c.  v0:= v0 ^~ 1;
  #L215710.  if v0 == 0 then goto L21573c;
  #L215714.  v0:= v5.`i.s.f` @type ^`i.e` @kind object;
  #L215718.  call temp:= `size`(v0) @signature `Li/e;.size:()J` @kind virtual;
  #L21571e.  v0:= temp @kind wide;
  #L215720.  v2:= 0L;
  #L215724.  v4:= lcmp(v0, v2);
  #L215728.  if v4 <= 0 then goto L21573a;
  #L21572c.  v2:= v5.`i.s.h` @type ^`i.x` @kind object;
  #L215730.  v3:= v5.`i.s.f` @type ^`i.e` @kind object;
  #L215734.  call `write`(v2, v3, v0) @signature `Li/x;.write:(Li/e;J)V` @kind interface;
  #L21573a.  return v5 @kind object;
  #L21573c.  v0:= new `java.lang.IllegalStateException`;
  #L215740.  v1:= "closed" @kind object;
  #L215744.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L21574a.  v1:= temp @kind object;
  #L21574c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L215752.  throw v0;
}
procedure `i.f` `emitCompleteSegments`(`i.s` v5 @kind this) @signature `Li/s;.emitCompleteSegments:()Li/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L215764.  v0:= v5.`i.s.g` @type ^`boolean` @kind boolean;
  #L215768.  v0:= v0 ^~ 1;
  #L21576c.  if v0 == 0 then goto L215798;
  #L215770.  v0:= v5.`i.s.f` @type ^`i.e` @kind object;
  #L215774.  call temp:= `completeSegmentByteCount`(v0) @signature `Li/e;.completeSegmentByteCount:()J` @kind virtual;
  #L21577a.  v0:= temp @kind wide;
  #L21577c.  v2:= 0L;
  #L215780.  v4:= lcmp(v0, v2);
  #L215784.  if v4 <= 0 then goto L215796;
  #L215788.  v2:= v5.`i.s.h` @type ^`i.x` @kind object;
  #L21578c.  v3:= v5.`i.s.f` @type ^`i.e` @kind object;
  #L215790.  call `write`(v2, v3, v0) @signature `Li/x;.write:(Li/e;J)V` @kind interface;
  #L215796.  return v5 @kind object;
  #L215798.  v0:= new `java.lang.IllegalStateException`;
  #L21579c.  v1:= "closed" @kind object;
  #L2157a0.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2157a6.  v1:= temp @kind object;
  #L2157a8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2157ae.  throw v0;
}
procedure `void` `flush`(`i.s` v5 @kind this) @signature `Li/s;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L215b4c.  v0:= v5.`i.s.g` @type ^`boolean` @kind boolean;
  #L215b50.  v0:= v0 ^~ 1;
  #L215b54.  if v0 == 0 then goto L215b92;
  #L215b58.  v0:= v5.`i.s.f` @type ^`i.e` @kind object;
  #L215b5c.  call temp:= `size`(v0) @signature `Li/e;.size:()J` @kind virtual;
  #L215b62.  v0:= temp @kind wide;
  #L215b64.  v2:= 0L;
  #L215b68.  v4:= lcmp(v0, v2);
  #L215b6c.  if v4 <= 0 then goto L215b86;
  #L215b70.  v0:= v5.`i.s.h` @type ^`i.x` @kind object;
  #L215b74.  v1:= v5.`i.s.f` @type ^`i.e` @kind object;
  #L215b78.  call temp:= `size`(v1) @signature `Li/e;.size:()J` @kind virtual;
  #L215b7e.  v2:= temp @kind wide;
  #L215b80.  call `write`(v0, v1, v2) @signature `Li/x;.write:(Li/e;J)V` @kind interface;
  #L215b86.  v0:= v5.`i.s.h` @type ^`i.x` @kind object;
  #L215b8a.  call `flush`(v0) @signature `Li/x;.flush:()V` @kind interface;
  #L215b90.  return @kind void;
  #L215b92.  v0:= new `java.lang.IllegalStateException`;
  #L215b96.  v1:= "closed" @kind object;
  #L215b9a.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L215ba0.  v1:= temp @kind object;
  #L215ba2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L215ba8.  throw v0;
}
procedure `i.e` `getBuffer`(`i.s` v1 @kind this) @signature `Li/s;.getBuffer:()Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2156f0.  v0:= v1.`i.s.f` @type ^`i.e` @kind object;
  #L2156f4.  return v0 @kind object;
}
procedure `boolean` `isOpen`(`i.s` v1 @kind this) @signature `Li/s;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2155c0.  v0:= v1.`i.s.g` @type ^`boolean` @kind boolean;
  #L2155c4.  v0:= v0 ^~ 1;
  #L2155c8.  return v0;
}
procedure `java.io.OutputStream` `outputStream`(`i.s` v1 @kind this) @signature `Li/s;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L215630.  v0:= new `i.s$a`;
  #L215634.  call `<init>`(v0, v1) @signature `Li/s$a;.<init>:(Li/s;)V` @kind direct;
  #L21563a.  return v0 @kind object;
}
procedure `i.a0` `timeout`(`i.s` v1 @kind this) @signature `Li/s;.timeout:()Li/a0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L215a6c.  v0:= v1.`i.s.h` @type ^`i.x` @kind object;
  #L215a70.  call temp:= `timeout`(v0) @signature `Li/x;.timeout:()Li/a0;` @kind interface;
  #L215a76.  v0:= temp @kind object;
  #L215a78.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`i.s` v2 @kind this) @signature `Li/s;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L21564c.  v0:= new `java.lang.StringBuilder`;
  #L215650.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L215656.  v1:= "buffer(" @kind object;
  #L21565a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L215660.  v1:= v2.`i.s.h` @type ^`i.x` @kind object;
  #L215664.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21566a.  v1:= 41I;
  #L21566e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L215674.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21567a.  v0:= temp @kind object;
  #L21567c.  return v0 @kind object;
}
procedure `int` `write`(`i.s` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Li/s;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2155dc.  v0:= "source" @kind object;
  #L2155e0.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2155e6.  v0:= v1.`i.s.g` @type ^`boolean` @kind boolean;
  #L2155ea.  v0:= v0 ^~ 1;
  #L2155ee.  if v0 == 0 then goto L215606;
  #L2155f2.  v0:= v1.`i.s.f` @type ^`i.e` @kind object;
  #L2155f6.  call temp:= `write`(v0, v2) @signature `Li/e;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L2155fc.  v2:= temp;
  #L2155fe.  call temp:= `emitCompleteSegments`(v1) @signature `Li/s;.emitCompleteSegments:()Li/f;` @kind virtual;
  #L215604.  return v2;
  #L215606.  v2:= new `java.lang.IllegalStateException`;
  #L21560a.  v0:= "closed" @kind object;
  #L21560e.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L215614.  v0:= temp @kind object;
  #L215616.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21561c.  throw v2;
}
procedure `i.f` `write`(`i.s` v1 @kind this, `i.h` v2 @kind object) @signature `Li/s;.write:(Li/h;)Li/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L215860.  v0:= "byteString" @kind object;
  #L215864.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L21586a.  v0:= v1.`i.s.g` @type ^`boolean` @kind boolean;
  #L21586e.  v0:= v0 ^~ 1;
  #L215872.  if v0 == 0 then goto L215888;
  #L215876.  v0:= v1.`i.s.f` @type ^`i.e` @kind object;
  #L21587a.  call temp:= `write`(v0, v2) @signature `Li/e;.write:(Li/h;)Li/e;` @kind virtual;
  #L215880.  call temp:= `emitCompleteSegments`(v1) @signature `Li/s;.emitCompleteSegments:()Li/f;` @kind virtual;
  #L215886.  return v1 @kind object;
  #L215888.  v2:= new `java.lang.IllegalStateException`;
  #L21588c.  v0:= "closed" @kind object;
  #L215890.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L215896.  v0:= temp @kind object;
  #L215898.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21589e.  throw v2;
}
procedure `i.f` `write`(`i.s` v1 @kind this, `byte`[] v2 @kind object) @signature `Li/s;.write:([B)Li/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2157c0.  v0:= "source" @kind object;
  #L2157c4.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2157ca.  v0:= v1.`i.s.g` @type ^`boolean` @kind boolean;
  #L2157ce.  v0:= v0 ^~ 1;
  #L2157d2.  if v0 == 0 then goto L2157e8;
  #L2157d6.  v0:= v1.`i.s.f` @type ^`i.e` @kind object;
  #L2157da.  call temp:= `write`(v0, v2) @signature `Li/e;.write:([B)Li/e;` @kind virtual;
  #L2157e0.  call temp:= `emitCompleteSegments`(v1) @signature `Li/s;.emitCompleteSegments:()Li/f;` @kind virtual;
  #L2157e6.  return v1 @kind object;
  #L2157e8.  v2:= new `java.lang.IllegalStateException`;
  #L2157ec.  v0:= "closed" @kind object;
  #L2157f0.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2157f6.  v0:= temp @kind object;
  #L2157f8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2157fe.  throw v2;
}
procedure `i.f` `write`(`i.s` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Li/s;.write:([BII)Li/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L215810.  v0:= "source" @kind object;
  #L215814.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L21581a.  v0:= v1.`i.s.g` @type ^`boolean` @kind boolean;
  #L21581e.  v0:= v0 ^~ 1;
  #L215822.  if v0 == 0 then goto L215838;
  #L215826.  v0:= v1.`i.s.f` @type ^`i.e` @kind object;
  #L21582a.  call temp:= `write`(v0, v2, v3, v4) @signature `Li/e;.write:([BII)Li/e;` @kind virtual;
  #L215830.  call temp:= `emitCompleteSegments`(v1) @signature `Li/s;.emitCompleteSegments:()Li/f;` @kind virtual;
  #L215836.  return v1 @kind object;
  #L215838.  v2:= new `java.lang.IllegalStateException`;
  #L21583c.  v3:= "closed" @kind object;
  #L215840.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L215846.  v3:= temp @kind object;
  #L215848.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21584e.  throw v2;
}
procedure `void` `write`(`i.s` v1 @kind this, `i.e` v2 @kind object, `long` v3 ) @signature `Li/s;.write:(Li/e;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L215bbc.  v0:= "source" @kind object;
  #L215bc0.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L215bc6.  v0:= v1.`i.s.g` @type ^`boolean` @kind boolean;
  #L215bca.  v0:= v0 ^~ 1;
  #L215bce.  if v0 == 0 then goto L215be4;
  #L215bd2.  v0:= v1.`i.s.f` @type ^`i.e` @kind object;
  #L215bd6.  call `write`(v0, v2, v3) @signature `Li/e;.write:(Li/e;J)V` @kind virtual;
  #L215bdc.  call temp:= `emitCompleteSegments`(v1) @signature `Li/s;.emitCompleteSegments:()Li/f;` @kind virtual;
  #L215be2.  return @kind void;
  #L215be4.  v2:= new `java.lang.IllegalStateException`;
  #L215be8.  v3:= "closed" @kind object;
  #L215bec.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L215bf2.  v3:= temp @kind object;
  #L215bf4.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L215bfa.  throw v2;
}
procedure `long` `writeAll`(`i.s` v7 @kind this, `i.z` v8 @kind object) @signature `Li/s;.writeAll:(Li/z;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L215690.  v0:= "source" @kind object;
  #L215694.  call `checkParameterIsNotNull`(v8, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L21569a.  v0:= 0L;
  #L21569e.  v2:= v7.`i.s.f` @type ^`i.e` @kind object;
  #L2156a2.  v3:= 8192I;
  #L2156a6.  v3:= (`long`) v3 @kind i2l;
  #L2156a8.  call temp:= `read`(v8, v2, v3) @signature `Li/z;.read:(Li/e;J)J` @kind interface;
  #L2156ae.  v2:= temp @kind wide;
  #L2156b0.  v4:= -1L;
  #L2156b4.  v6:= lcmp(v2, v4);
  #L2156b8.  if v6 != 0 then goto L2156be;
  #L2156bc.  return v0 @kind wide;
  #L2156be.  v0:= v0 + v2 @kind long;
  #L2156c0.  call temp:= `emitCompleteSegments`(v7) @signature `Li/s;.emitCompleteSegments:()Li/f;` @kind virtual;
  #L2156c6.  goto L21569e;
}
procedure `i.f` `writeByte`(`i.s` v1 @kind this, `int` v2 ) @signature `Li/s;.writeByte:(I)Li/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2158b0.  v0:= v1.`i.s.g` @type ^`boolean` @kind boolean;
  #L2158b4.  v0:= v0 ^~ 1;
  #L2158b8.  if v0 == 0 then goto L2158ce;
  #L2158bc.  v0:= v1.`i.s.f` @type ^`i.e` @kind object;
  #L2158c0.  call temp:= `writeByte`(v0, v2) @signature `Li/e;.writeByte:(I)Li/e;` @kind virtual;
  #L2158c6.  call temp:= `emitCompleteSegments`(v1) @signature `Li/s;.emitCompleteSegments:()Li/f;` @kind virtual;
  #L2158cc.  return v1 @kind object;
  #L2158ce.  v2:= new `java.lang.IllegalStateException`;
  #L2158d2.  v0:= "closed" @kind object;
  #L2158d6.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2158dc.  v0:= temp @kind object;
  #L2158de.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2158e4.  throw v2;
}
procedure `i.f` `writeDecimalLong`(`i.s` v1 @kind this, `long` v2 ) @signature `Li/s;.writeDecimalLong:(J)Li/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2158f8.  v0:= v1.`i.s.g` @type ^`boolean` @kind boolean;
  #L2158fc.  v0:= v0 ^~ 1;
  #L215900.  if v0 == 0 then goto L215916;
  #L215904.  v0:= v1.`i.s.f` @type ^`i.e` @kind object;
  #L215908.  call temp:= `writeDecimalLong`(v0, v2) @signature `Li/e;.writeDecimalLong:(J)Li/e;` @kind virtual;
  #L21590e.  call temp:= `emitCompleteSegments`(v1) @signature `Li/s;.emitCompleteSegments:()Li/f;` @kind virtual;
  #L215914.  return v1 @kind object;
  #L215916.  v2:= new `java.lang.IllegalStateException`;
  #L21591a.  v3:= "closed" @kind object;
  #L21591e.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L215924.  v3:= temp @kind object;
  #L215926.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21592c.  throw v2;
}
procedure `i.f` `writeHexadecimalUnsignedLong`(`i.s` v1 @kind this, `long` v2 ) @signature `Li/s;.writeHexadecimalUnsignedLong:(J)Li/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L215940.  v0:= v1.`i.s.g` @type ^`boolean` @kind boolean;
  #L215944.  v0:= v0 ^~ 1;
  #L215948.  if v0 == 0 then goto L215960;
  #L21594c.  v0:= v1.`i.s.f` @type ^`i.e` @kind object;
  #L215950.  call temp:= `writeHexadecimalUnsignedLong`(v0, v2) @signature `Li/e;.writeHexadecimalUnsignedLong:(J)Li/e;` @kind virtual;
  #L215956.  call temp:= `emitCompleteSegments`(v1) @signature `Li/s;.emitCompleteSegments:()Li/f;` @kind virtual;
  #L21595c.  v2:= temp @kind object;
  #L21595e.  return v2 @kind object;
  #L215960.  v2:= new `java.lang.IllegalStateException`;
  #L215964.  v3:= "closed" @kind object;
  #L215968.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L21596e.  v3:= temp @kind object;
  #L215970.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L215976.  throw v2;
}
procedure `i.f` `writeInt`(`i.s` v1 @kind this, `int` v2 ) @signature `Li/s;.writeInt:(I)Li/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L215988.  v0:= v1.`i.s.g` @type ^`boolean` @kind boolean;
  #L21598c.  v0:= v0 ^~ 1;
  #L215990.  if v0 == 0 then goto L2159a8;
  #L215994.  v0:= v1.`i.s.f` @type ^`i.e` @kind object;
  #L215998.  call temp:= `writeInt`(v0, v2) @signature `Li/e;.writeInt:(I)Li/e;` @kind virtual;
  #L21599e.  call temp:= `emitCompleteSegments`(v1) @signature `Li/s;.emitCompleteSegments:()Li/f;` @kind virtual;
  #L2159a4.  v2:= temp @kind object;
  #L2159a6.  return v2 @kind object;
  #L2159a8.  v2:= new `java.lang.IllegalStateException`;
  #L2159ac.  v0:= "closed" @kind object;
  #L2159b0.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2159b6.  v0:= temp @kind object;
  #L2159b8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2159be.  throw v2;
}
procedure `i.f` `writeShort`(`i.s` v1 @kind this, `int` v2 ) @signature `Li/s;.writeShort:(I)Li/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2159d0.  v0:= v1.`i.s.g` @type ^`boolean` @kind boolean;
  #L2159d4.  v0:= v0 ^~ 1;
  #L2159d8.  if v0 == 0 then goto L2159ee;
  #L2159dc.  v0:= v1.`i.s.f` @type ^`i.e` @kind object;
  #L2159e0.  call temp:= `writeShort`(v0, v2) @signature `Li/e;.writeShort:(I)Li/e;` @kind virtual;
  #L2159e6.  call temp:= `emitCompleteSegments`(v1) @signature `Li/s;.emitCompleteSegments:()Li/f;` @kind virtual;
  #L2159ec.  return v1 @kind object;
  #L2159ee.  v2:= new `java.lang.IllegalStateException`;
  #L2159f2.  v0:= "closed" @kind object;
  #L2159f6.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2159fc.  v0:= temp @kind object;
  #L2159fe.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L215a04.  throw v2;
}
procedure `i.f` `writeUtf8`(`i.s` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Li/s;.writeUtf8:(Ljava/lang/String;)Li/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L215a18.  v0:= "string" @kind object;
  #L215a1c.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L215a22.  v0:= v1.`i.s.g` @type ^`boolean` @kind boolean;
  #L215a26.  v0:= v0 ^~ 1;
  #L215a2a.  if v0 == 0 then goto L215a42;
  #L215a2e.  v0:= v1.`i.s.f` @type ^`i.e` @kind object;
  #L215a32.  call temp:= `writeUtf8`(v0, v2) @signature `Li/e;.writeUtf8:(Ljava/lang/String;)Li/e;` @kind virtual;
  #L215a38.  call temp:= `emitCompleteSegments`(v1) @signature `Li/s;.emitCompleteSegments:()Li/f;` @kind virtual;
  #L215a3e.  v2:= temp @kind object;
  #L215a40.  return v2 @kind object;
  #L215a42.  v2:= new `java.lang.IllegalStateException`;
  #L215a46.  v0:= "closed" @kind object;
  #L215a4a.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L215a50.  v0:= temp @kind object;
  #L215a52.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L215a58.  throw v2;
}
