record `i.t` @kind class @AccessFlag PUBLIC_FINAL extends `i.g` @kind interface {
  `i.e` `i.t.f` @AccessFlag PUBLIC_FINAL;
  `boolean` `i.t.g` @AccessFlag PUBLIC;
  `i.z` `i.t.h` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`i.t` v1 @kind this, `i.z` v2 @kind object) @signature `Li/t;.<init>:(Li/z;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L216864.  v0:= "source" @kind object;
  #L216868.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L21686e.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L216874.  v1.`i.t.h` @type ^`i.z` := v2 @kind object;
  #L216878.  v2:= new `i.e`;
  #L21687c.  call `<init>`(v2) @signature `Li/e;.<init>:()V` @kind direct;
  #L216882.  v1.`i.t.f` @type ^`i.e` := v2 @kind object;
  #L216886.  return @kind void;
}
procedure `i.e` `buffer`(`i.t` v1 @kind this) @signature `Li/t;.buffer:()Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2167a0.  v0:= v1.`i.t.f` @type ^`i.e` @kind object;
  #L2167a4.  return v0 @kind object;
}
procedure `void` `close`(`i.t` v1 @kind this) @signature `Li/t;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L216898.  v0:= v1.`i.t.g` @type ^`boolean` @kind boolean;
  #L21689c.  if v0 == 0 then goto L2168a2;
  #L2168a0.  return @kind void;
  #L2168a2.  v0:= 1I;
  #L2168a4.  v1.`i.t.g` @type ^`boolean` := v0 @kind boolean;
  #L2168a8.  v0:= v1.`i.t.h` @type ^`i.z` @kind object;
  #L2168ac.  call `close`(v0) @signature `Li/z;.close:()V` @kind interface;
  #L2168b2.  v0:= v1.`i.t.f` @type ^`i.e` @kind object;
  #L2168b6.  call `clear`(v0) @signature `Li/e;.clear:()V` @kind virtual;
  #L2168bc.  return @kind void;
}
procedure `boolean` `exhausted`(`i.t` v6 @kind this) @signature `Li/t;.exhausted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L215de8.  v0:= v6.`i.t.g` @type ^`boolean` @kind boolean;
  #L215dec.  v1:= 1I;
  #L215dee.  v0:= v0 ^~ v1 @kind int;
  #L215df0.  if v0 == 0 then goto L215e2c;
  #L215df4.  v0:= v6.`i.t.f` @type ^`i.e` @kind object;
  #L215df8.  call temp:= `exhausted`(v0) @signature `Li/e;.exhausted:()Z` @kind virtual;
  #L215dfe.  v0:= temp;
  #L215e00.  if v0 == 0 then goto L215e28;
  #L215e04.  v0:= v6.`i.t.h` @type ^`i.z` @kind object;
  #L215e08.  v2:= v6.`i.t.f` @type ^`i.e` @kind object;
  #L215e0c.  v3:= 8192I;
  #L215e10.  v3:= (`long`) v3 @kind i2l;
  #L215e12.  call temp:= `read`(v0, v2, v3) @signature `Li/z;.read:(Li/e;J)J` @kind interface;
  #L215e18.  v2:= temp @kind wide;
  #L215e1a.  v4:= -1L;
  #L215e1e.  v0:= lcmp(v2, v4);
  #L215e22.  if v0 != 0 then goto L215e28;
  #L215e26.  goto L215e2a;
  #L215e28.  v1:= 0I;
  #L215e2a.  return v1;
  #L215e2c.  v0:= new `java.lang.IllegalStateException`;
  #L215e30.  v1:= "closed" @kind object;
  #L215e34.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L215e3a.  v1:= temp @kind object;
  #L215e3c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L215e42.  throw v0;
}
procedure `i.e` `getBuffer`(`i.t` v1 @kind this) @signature `Li/t;.getBuffer:()Li/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2167b8.  v0:= v1.`i.t.f` @type ^`i.e` @kind object;
  #L2167bc.  return v0 @kind object;
}
procedure `long` `indexOf`(`i.t` v6 @kind this, `byte` v7 ) @signature `Li/t;.indexOf:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L21635c.  v2:= 0L;
  #L216360.  v4:= 9223372036854775807L;
  #L21636a.  v0:= v6 @kind object;
  #L21636c.  v1:= v7;
  #L21636e.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Li/t;.indexOf:(BJJ)J` @kind virtual;
  #L216374.  v0:= temp @kind wide;
  #L216376.  return v0 @kind wide;
}
procedure `long` `indexOf`(`i.t` v8 @kind this, `byte` v9 , `long` v10 , `long` v12 ) @signature `Li/t;.indexOf:(BJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L216388.  v0:= v8.`i.t.g` @type ^`boolean` @kind boolean;
  #L21638c.  v1:= 1I;
  #L21638e.  v0:= v0 ^~ v1 @kind int;
  #L216390.  if v0 == 0 then goto L216460;
  #L216394.  v2:= 0L;
  #L216398.  v0:= lcmp(v2, v10);
  #L21639c.  if v0 <= 0 then goto L2163a2;
  #L2163a0.  goto L2163ac;
  #L2163a2.  v0:= lcmp(v12, v10);
  #L2163a6.  if v0 < 0 then goto L2163ac;
  #L2163aa.  goto L2163ae;
  #L2163ac.  v1:= 0I;
  #L2163ae.  if v1 == 0 then goto L21641a;
  #L2163b2.  v0:= -1L;
  #L2163b6.  v2:= lcmp(v10, v12);
  #L2163ba.  if v2 >= 0 then goto L216418;
  #L2163be.  v2:= v8.`i.t.f` @type ^`i.e` @kind object;
  #L2163c2.  v3:= v9;
  #L2163c4.  v4:= v10 @kind wide;
  #L2163c6.  v6:= v12 @kind wide;
  #L2163c8.  call temp:= `indexOf`(v2, v3, v4, v6) @signature `Li/e;.indexOf:(BJJ)J` @kind virtual;
  #L2163ce.  v2:= temp @kind wide;
  #L2163d0.  v4:= lcmp(v2, v0);
  #L2163d4.  if v4 == 0 then goto L2163da;
  #L2163d8.  return v2 @kind wide;
  #L2163da.  v2:= v8.`i.t.f` @type ^`i.e` @kind object;
  #L2163de.  call temp:= `size`(v2) @signature `Li/e;.size:()J` @kind virtual;
  #L2163e4.  v2:= temp @kind wide;
  #L2163e6.  v4:= lcmp(v2, v12);
  #L2163ea.  if v4 >= 0 then goto L216418;
  #L2163ee.  v4:= v8.`i.t.h` @type ^`i.z` @kind object;
  #L2163f2.  v5:= v8.`i.t.f` @type ^`i.e` @kind object;
  #L2163f6.  v6:= 8192I;
  #L2163fa.  v6:= (`long`) v6 @kind i2l;
  #L2163fc.  call temp:= `read`(v4, v5, v6) @signature `Li/z;.read:(Li/e;J)J` @kind interface;
  #L216402.  v4:= temp @kind wide;
  #L216404.  v6:= lcmp(v4, v0);
  #L216408.  if v6 != 0 then goto L21640e;
  #L21640c.  goto L216418;
  #L21640e.  call temp:= `max`(v10, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L216414.  v10:= temp @kind wide;
  #L216416.  goto L2163b2;
  #L216418.  return v0 @kind wide;
  #L21641a.  v9:= new `java.lang.StringBuilder`;
  #L21641e.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L216424.  v0:= "fromIndex=" @kind object;
  #L216428.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21642e.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L216434.  v10:= " toIndex=" @kind object;
  #L216438.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21643e.  call temp:= `append`(v9, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L216444.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21644a.  v9:= temp @kind object;
  #L21644c.  v10:= new `java.lang.IllegalArgumentException`;
  #L216450.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L216456.  v9:= temp @kind object;
  #L216458.  call `<init>`(v10, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21645e.  throw v10;
  #L216460.  v9:= new `java.lang.IllegalStateException`;
  #L216464.  v10:= "closed" @kind object;
  #L216468.  call temp:= `toString`(v10) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L21646e.  v10:= temp @kind object;
  #L216470.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L216476.  throw v9;
}
procedure `java.io.InputStream` `inputStream`(`i.t` v1 @kind this) @signature `Li/t;.inputStream:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2160fc.  v0:= new `i.t$a`;
  #L216100.  call `<init>`(v0, v1) @signature `Li/t$a;.<init>:(Li/t;)V` @kind direct;
  #L216106.  return v0 @kind object;
}
procedure `boolean` `isOpen`(`i.t` v1 @kind this) @signature `Li/t;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L215e54.  v0:= v1.`i.t.g` @type ^`boolean` @kind boolean;
  #L215e58.  v0:= v0 ^~ 1;
  #L215e5c.  return v0;
}
procedure `int` `read`(`i.t` v5 @kind this, `java.nio.ByteBuffer` v6 @kind object) @signature `Li/t;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L215fa4.  v0:= "sink" @kind object;
  #L215fa8.  call `checkParameterIsNotNull`(v6, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L215fae.  v0:= v5.`i.t.f` @type ^`i.e` @kind object;
  #L215fb2.  call temp:= `size`(v0) @signature `Li/e;.size:()J` @kind virtual;
  #L215fb8.  v0:= temp @kind wide;
  #L215fba.  v2:= 0L;
  #L215fbe.  v4:= lcmp(v0, v2);
  #L215fc2.  if v4 != 0 then goto L215fec;
  #L215fc6.  v0:= v5.`i.t.h` @type ^`i.z` @kind object;
  #L215fca.  v1:= v5.`i.t.f` @type ^`i.e` @kind object;
  #L215fce.  v2:= 8192I;
  #L215fd2.  v2:= (`long`) v2 @kind i2l;
  #L215fd4.  call temp:= `read`(v0, v1, v2) @signature `Li/z;.read:(Li/e;J)J` @kind interface;
  #L215fda.  v0:= temp @kind wide;
  #L215fdc.  v2:= -1L;
  #L215fe0.  v4:= lcmp(v0, v2);
  #L215fe4.  if v4 != 0 then goto L215fec;
  #L215fe8.  v6:= -1I;
  #L215fea.  return v6;
  #L215fec.  v0:= v5.`i.t.f` @type ^`i.e` @kind object;
  #L215ff0.  call temp:= `read`(v0, v6) @signature `Li/e;.read:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L215ff6.  v6:= temp;
  #L215ff8.  return v6;
}
procedure `long` `read`(`i.t` v5 @kind this, `i.e` v6 @kind object, `long` v7 ) @signature `Li/t;.read:(Li/e;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L216488.  v0:= "sink" @kind object;
  #L21648c.  call `checkParameterIsNotNull`(v6, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L216492.  v0:= 1I;
  #L216494.  v1:= 0L;
  #L216498.  v3:= lcmp(v7, v1);
  #L21649c.  if v3 < 0 then goto L2164a4;
  #L2164a0.  v3:= 1I;
  #L2164a2.  goto L2164a6;
  #L2164a4.  v3:= 0I;
  #L2164a6.  if v3 == 0 then goto L216526;
  #L2164aa.  v3:= v5.`i.t.g` @type ^`boolean` @kind boolean;
  #L2164ae.  v0:= v0 ^~ v3 @kind int;
  #L2164b0.  if v0 == 0 then goto L21650e;
  #L2164b4.  v0:= v5.`i.t.f` @type ^`i.e` @kind object;
  #L2164b8.  call temp:= `size`(v0) @signature `Li/e;.size:()J` @kind virtual;
  #L2164be.  v3:= temp @kind wide;
  #L2164c0.  v0:= lcmp(v3, v1);
  #L2164c4.  if v0 != 0 then goto L2164ec;
  #L2164c8.  v0:= v5.`i.t.h` @type ^`i.z` @kind object;
  #L2164cc.  v1:= v5.`i.t.f` @type ^`i.e` @kind object;
  #L2164d0.  v2:= 8192I;
  #L2164d4.  v2:= (`long`) v2 @kind i2l;
  #L2164d6.  call temp:= `read`(v0, v1, v2) @signature `Li/z;.read:(Li/e;J)J` @kind interface;
  #L2164dc.  v0:= temp @kind wide;
  #L2164de.  v2:= -1L;
  #L2164e2.  v4:= lcmp(v0, v2);
  #L2164e6.  if v4 != 0 then goto L2164ec;
  #L2164ea.  return v2 @kind wide;
  #L2164ec.  v0:= v5.`i.t.f` @type ^`i.e` @kind object;
  #L2164f0.  call temp:= `size`(v0) @signature `Li/e;.size:()J` @kind virtual;
  #L2164f6.  v0:= temp @kind wide;
  #L2164f8.  call temp:= `min`(v7, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2164fe.  v7:= temp @kind wide;
  #L216500.  v0:= v5.`i.t.f` @type ^`i.e` @kind object;
  #L216504.  call temp:= `read`(v0, v6, v7) @signature `Li/e;.read:(Li/e;J)J` @kind virtual;
  #L21650a.  v6:= temp @kind wide;
  #L21650c.  return v6 @kind wide;
  #L21650e.  v6:= new `java.lang.IllegalStateException`;
  #L216512.  v7:= "closed" @kind object;
  #L216516.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L21651c.  v7:= temp @kind object;
  #L21651e.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L216524.  throw v6;
  #L216526.  v6:= new `java.lang.StringBuilder`;
  #L21652a.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L216530.  v0:= "byteCount < 0: " @kind object;
  #L216534.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21653a.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L216540.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L216546.  v6:= temp @kind object;
  #L216548.  v7:= new `java.lang.IllegalArgumentException`;
  #L21654c.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L216552.  v6:= temp @kind object;
  #L216554.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21655a.  throw v7;
}
procedure `long` `readAll`(`i.t` v9 @kind this, `i.x` v10 @kind object) @signature `Li/t;.readAll:(Li/x;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L21656c.  v0:= "sink" @kind object;
  #L216570.  call `checkParameterIsNotNull`(v10, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L216576.  v0:= 0L;
  #L21657a.  v2:= v0 @kind wide;
  #L21657c.  v4:= v9.`i.t.h` @type ^`i.z` @kind object;
  #L216580.  v5:= v9.`i.t.f` @type ^`i.e` @kind object;
  #L216584.  v6:= 8192I;
  #L216588.  v6:= (`long`) v6 @kind i2l;
  #L21658a.  call temp:= `read`(v4, v5, v6) @signature `Li/z;.read:(Li/e;J)J` @kind interface;
  #L216590.  v4:= temp @kind wide;
  #L216592.  v6:= -1L;
  #L216596.  v8:= lcmp(v4, v6);
  #L21659a.  if v8 == 0 then goto L2165c0;
  #L21659e.  v4:= v9.`i.t.f` @type ^`i.e` @kind object;
  #L2165a2.  call temp:= `completeSegmentByteCount`(v4) @signature `Li/e;.completeSegmentByteCount:()J` @kind virtual;
  #L2165a8.  v4:= temp @kind wide;
  #L2165aa.  v6:= lcmp(v4, v0);
  #L2165ae.  if v6 <= 0 then goto L21657c;
  #L2165b2.  v2:= v2 + v4 @kind long;
  #L2165b4.  v6:= v9.`i.t.f` @type ^`i.e` @kind object;
  #L2165b8.  call `write`(v10, v6, v4) @signature `Li/x;.write:(Li/e;J)V` @kind interface;
  #L2165be.  goto L21657c;
  #L2165c0.  v4:= v9.`i.t.f` @type ^`i.e` @kind object;
  #L2165c4.  call temp:= `size`(v4) @signature `Li/e;.size:()J` @kind virtual;
  #L2165ca.  v4:= temp @kind wide;
  #L2165cc.  v6:= lcmp(v4, v0);
  #L2165d0.  if v6 <= 0 then goto L2165f4;
  #L2165d4.  v0:= v9.`i.t.f` @type ^`i.e` @kind object;
  #L2165d8.  call temp:= `size`(v0) @signature `Li/e;.size:()J` @kind virtual;
  #L2165de.  v0:= temp @kind wide;
  #L2165e0.  v2:= v2 + v0 @kind long;
  #L2165e2.  v0:= v9.`i.t.f` @type ^`i.e` @kind object;
  #L2165e6.  call temp:= `size`(v0) @signature `Li/e;.size:()J` @kind virtual;
  #L2165ec.  v4:= temp @kind wide;
  #L2165ee.  call `write`(v10, v0, v4) @signature `Li/x;.write:(Li/e;J)V` @kind interface;
  #L2165f4.  return v2 @kind wide;
}
procedure `byte` `readByte`(`i.t` v2 @kind this) @signature `Li/t;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L215f2c.  v0:= 1L;
  #L215f30.  call `require`(v2, v0) @signature `Li/t;.require:(J)V` @kind virtual;
  #L215f36.  v0:= v2.`i.t.f` @type ^`i.e` @kind object;
  #L215f3a.  call temp:= `readByte`(v0) @signature `Li/e;.readByte:()B` @kind virtual;
  #L215f40.  v0:= temp;
  #L215f42.  return v0;
}
procedure `byte`[] `readByteArray`(`i.t` v2 @kind this) @signature `Li/t;.readByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L215f54.  v0:= v2.`i.t.f` @type ^`i.e` @kind object;
  #L215f58.  v1:= v2.`i.t.h` @type ^`i.z` @kind object;
  #L215f5c.  call temp:= `writeAll`(v0, v1) @signature `Li/e;.writeAll:(Li/z;)J` @kind virtual;
  #L215f62.  v0:= v2.`i.t.f` @type ^`i.e` @kind object;
  #L215f66.  call temp:= `readByteArray`(v0) @signature `Li/e;.readByteArray:()[B` @kind virtual;
  #L215f6c.  v0:= temp @kind object;
  #L215f6e.  return v0 @kind object;
}
procedure `byte`[] `readByteArray`(`i.t` v1 @kind this, `long` v2 ) @signature `Li/t;.readByteArray:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L215f80.  call `require`(v1, v2) @signature `Li/t;.require:(J)V` @kind virtual;
  #L215f86.  v0:= v1.`i.t.f` @type ^`i.e` @kind object;
  #L215f8a.  call temp:= `readByteArray`(v0, v2) @signature `Li/e;.readByteArray:(J)[B` @kind virtual;
  #L215f90.  v2:= temp @kind object;
  #L215f92.  return v2 @kind object;
}
procedure `i.h` `readByteString`(`i.t` v1 @kind this, `long` v2 ) @signature `Li/t;.readByteString:(J)Li/h;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2167d0.  call `require`(v1, v2) @signature `Li/t;.require:(J)V` @kind virtual;
  #L2167d6.  v0:= v1.`i.t.f` @type ^`i.e` @kind object;
  #L2167da.  call temp:= `readByteString`(v0, v2) @signature `Li/e;.readByteString:(J)Li/h;` @kind virtual;
  #L2167e0.  v2:= temp @kind object;
  #L2167e2.  return v2 @kind object;
}
procedure `long` `readDecimalLong`(`i.t` v10 @kind this) @signature `Li/t;.readDecimalLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L216608.  v0:= 1L;
  #L21660c.  call `require`(v10, v0) @signature `Li/t;.require:(J)V` @kind virtual;
  #L216612.  v2:= 0L;
  #L216616.  v4:= v2 @kind wide;
  #L216618.  v6:= v4 + v0 @kind long;
  #L21661c.  call temp:= `request`(v10, v6) @signature `Li/t;.request:(J)Z` @kind virtual;
  #L216622.  v8:= temp;
  #L216624.  if v8 == 0 then goto L2166aa;
  #L216628.  v8:= v10.`i.t.f` @type ^`i.e` @kind object;
  #L21662c.  call temp:= `getByte`(v8, v4) @signature `Li/e;.getByte:(J)B` @kind virtual;
  #L216632.  v8:= temp;
  #L216634.  v9:= 48I;
  #L216638.  v9:= (`byte`) v9 @kind i2b;
  #L21663a.  if v8 < v9 then goto L216648;
  #L21663e.  v9:= 57I;
  #L216642.  v9:= (`byte`) v9 @kind i2b;
  #L216644.  if v8 <= v9 then goto L21665c;
  #L216648.  v9:= lcmp(v4, v2);
  #L21664c.  if v9 != 0 then goto L216660;
  #L216650.  v4:= 45I;
  #L216654.  v4:= (`byte`) v4 @kind i2b;
  #L216656.  if v8 == v4 then goto L21665c;
  #L21665a.  goto L216660;
  #L21665c.  v4:= v6 @kind wide;
  #L21665e.  goto L216618;
  #L216660.  if v9 == 0 then goto L216666;
  #L216664.  goto L2166aa;
  #L216666.  v0:= `@@kotlin.v.c.o.a` @type ^`kotlin.v.c.o` @kind object;
  #L21666a.  v0:= 1I;
  #L21666c.  v0:= new `java.lang.Object`[v0];
  #L216670.  v1:= 0I;
  #L216672.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L216678.  v2:= temp @kind object;
  #L21667a.  v0[v1]:= v2 @kind object;
  #L21667e.  v1:= length @variable v0;
  #L216680.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L216686.  v0:= temp @kind object;
  #L216688.  v1:= "Expected leading [0-9] or '-' character but was %#x" @kind object;
  #L21668c.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L216692.  v0:= temp @kind object;
  #L216694.  v1:= "java.lang.String.format(format, *args)" @kind object;
  #L216698.  call `checkExpressionValueIsNotNull`(v0, v1) @signature `Lkotlin/v/c/i;.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L21669e.  v1:= new `java.lang.NumberFormatException`;
  #L2166a2.  call `<init>`(v1, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2166a8.  throw v1;
  #L2166aa.  v0:= v10.`i.t.f` @type ^`i.e` @kind object;
  #L2166ae.  call temp:= `readDecimalLong`(v0) @signature `Li/e;.readDecimalLong:()J` @kind virtual;
  #L2166b4.  v0:= temp @kind wide;
  #L2166b6.  return v0 @kind wide;
}
procedure `void` `readFully`(`i.t` v7 @kind this, `byte`[] v8 @kind object) @signature `Li/t;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2168d0.  v0:= "sink" @kind object;
  #L2168d4.  call `checkParameterIsNotNull`(v8, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2168da.  v0:= length @variable v8;
  #L2168dc.  v0:= (`long`) v0 @kind i2l;
  #L2168de.  call `require`(v7, v0) @signature `Li/t;.require:(J)V` @kind virtual;
  #L2168e4.  v0:= v7.`i.t.f` @type ^`i.e` @kind object;
  #L2168e8.  call `readFully`(v0, v8) @signature `Li/e;.readFully:([B)V` @kind virtual;
  #L2168ee.  return @kind void;
  #L2168f0.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L2168f2.  v1:= 0I;
  #L2168f4.  v2:= v7.`i.t.f` @type ^`i.e` @kind object;
  #L2168f8.  call temp:= `size`(v2) @signature `Li/e;.size:()J` @kind virtual;
  #L2168fe.  v2:= temp @kind wide;
  #L216900.  v4:= 0L;
  #L216904.  v6:= lcmp(v2, v4);
  #L216908.  if v6 <= 0 then goto L216938;
  #L21690c.  v2:= v7.`i.t.f` @type ^`i.e` @kind object;
  #L216910.  call temp:= `size`(v2) @signature `Li/e;.size:()J` @kind virtual;
  #L216916.  v3:= temp @kind wide;
  #L216918.  v4:= (`int`) v3 @kind l2i;
  #L21691a.  call temp:= `read`(v2, v8, v1, v4) @signature `Li/e;.read:([BII)I` @kind virtual;
  #L216920.  v2:= temp;
  #L216922.  v3:= -1I;
  #L216924.  if v2 == v3 then goto L21692c;
  #L216928.  v1:= v1 + v2 @kind int;
  #L21692a.  goto L2168f4;
  #L21692c.  v8:= new `java.lang.AssertionError`;
  #L216930.  call `<init>`(v8) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L216936.  throw v8;
  #L216938.  throw v0;
  catch `java.io.EOFException` @[L2168da..L2168e4] goto L2168f0;
}
procedure `long` `readHexadecimalUnsignedLong`(`i.t` v6 @kind this) @signature `Li/t;.readHexadecimalUnsignedLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2166c8.  v0:= 1L;
  #L2166cc.  call `require`(v6, v0) @signature `Li/t;.require:(J)V` @kind virtual;
  #L2166d2.  v0:= 0I;
  #L2166d4.  v1:= 0I;
  #L2166d6.  v2:= v1 + 1;
  #L2166da.  v3:= (`long`) v2 @kind i2l;
  #L2166dc.  call temp:= `request`(v6, v3) @signature `Li/t;.request:(J)Z` @kind virtual;
  #L2166e2.  v3:= temp;
  #L2166e4.  if v3 == 0 then goto L216780;
  #L2166e8.  v3:= v6.`i.t.f` @type ^`i.e` @kind object;
  #L2166ec.  v4:= (`long`) v1 @kind i2l;
  #L2166ee.  call temp:= `getByte`(v3, v4) @signature `Li/e;.getByte:(J)B` @kind virtual;
  #L2166f4.  v3:= temp;
  #L2166f6.  v4:= 48I;
  #L2166fa.  v4:= (`byte`) v4 @kind i2b;
  #L2166fc.  if v3 < v4 then goto L21670a;
  #L216700.  v4:= 57I;
  #L216704.  v4:= (`byte`) v4 @kind i2b;
  #L216706.  if v3 <= v4 then goto L216734;
  #L21670a.  v4:= 97I;
  #L21670e.  v4:= (`byte`) v4 @kind i2b;
  #L216710.  if v3 < v4 then goto L21671e;
  #L216714.  v4:= 102I;
  #L216718.  v4:= (`byte`) v4 @kind i2b;
  #L21671a.  if v3 <= v4 then goto L216734;
  #L21671e.  v4:= 65I;
  #L216722.  v4:= (`byte`) v4 @kind i2b;
  #L216724.  if v3 < v4 then goto L216738;
  #L216728.  v4:= 70I;
  #L21672c.  v4:= (`byte`) v4 @kind i2b;
  #L21672e.  if v3 <= v4 then goto L216734;
  #L216732.  goto L216738;
  #L216734.  v1:= v2;
  #L216736.  goto L2166d6;
  #L216738.  if v1 == 0 then goto L21673e;
  #L21673c.  goto L216780;
  #L21673e.  v1:= `@@kotlin.v.c.o.a` @type ^`kotlin.v.c.o` @kind object;
  #L216742.  v1:= 1I;
  #L216744.  v1:= new `java.lang.Object`[v1];
  #L216748.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L21674e.  v2:= temp @kind object;
  #L216750.  v1[v0]:= v2 @kind object;
  #L216754.  v0:= length @variable v1;
  #L216756.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L21675c.  v0:= temp @kind object;
  #L21675e.  v1:= "Expected leading [0-9a-fA-F] character but was %#x" @kind object;
  #L216762.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L216768.  v0:= temp @kind object;
  #L21676a.  v1:= "java.lang.String.format(format, *args)" @kind object;
  #L21676e.  call `checkExpressionValueIsNotNull`(v0, v1) @signature `Lkotlin/v/c/i;.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L216774.  v1:= new `java.lang.NumberFormatException`;
  #L216778.  call `<init>`(v1, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21677e.  throw v1;
  #L216780.  v0:= v6.`i.t.f` @type ^`i.e` @kind object;
  #L216784.  call temp:= `readHexadecimalUnsignedLong`(v0) @signature `Li/e;.readHexadecimalUnsignedLong:()J` @kind virtual;
  #L21678a.  v0:= temp @kind wide;
  #L21678c.  return v0 @kind wide;
}
procedure `int` `readInt`(`i.t` v2 @kind this) @signature `Li/t;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L21600c.  v0:= 4L;
  #L216010.  call `require`(v2, v0) @signature `Li/t;.require:(J)V` @kind virtual;
  #L216016.  v0:= v2.`i.t.f` @type ^`i.e` @kind object;
  #L21601a.  call temp:= `readInt`(v0) @signature `Li/e;.readInt:()I` @kind virtual;
  #L216020.  v0:= temp;
  #L216022.  return v0;
}
procedure `int` `readIntLe`(`i.t` v2 @kind this) @signature `Li/t;.readIntLe:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L216034.  v0:= 4L;
  #L216038.  call `require`(v2, v0) @signature `Li/t;.require:(J)V` @kind virtual;
  #L21603e.  v0:= v2.`i.t.f` @type ^`i.e` @kind object;
  #L216042.  call temp:= `readIntLe`(v0) @signature `Li/e;.readIntLe:()I` @kind virtual;
  #L216048.  v0:= temp;
  #L21604a.  return v0;
}
procedure `short` `readShort`(`i.t` v2 @kind this) @signature `Li/t;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L216814.  v0:= 2L;
  #L216818.  call `require`(v2, v0) @signature `Li/t;.require:(J)V` @kind virtual;
  #L21681e.  v0:= v2.`i.t.f` @type ^`i.e` @kind object;
  #L216822.  call temp:= `readShort`(v0) @signature `Li/e;.readShort:()S` @kind virtual;
  #L216828.  v0:= temp;
  #L21682a.  return v0;
}
procedure `short` `readShortLe`(`i.t` v2 @kind this) @signature `Li/t;.readShortLe:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L21683c.  v0:= 2L;
  #L216840.  call `require`(v2, v0) @signature `Li/t;.require:(J)V` @kind virtual;
  #L216846.  v0:= v2.`i.t.f` @type ^`i.e` @kind object;
  #L21684a.  call temp:= `readShortLe`(v0) @signature `Li/e;.readShortLe:()S` @kind virtual;
  #L216850.  v0:= temp;
  #L216852.  return v0;
}
procedure `java.lang.String` `readString`(`i.t` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Li/t;.readString:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L216118.  v0:= "charset" @kind object;
  #L21611c.  call `checkParameterIsNotNull`(v3, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L216122.  v0:= v2.`i.t.f` @type ^`i.e` @kind object;
  #L216126.  v1:= v2.`i.t.h` @type ^`i.z` @kind object;
  #L21612a.  call temp:= `writeAll`(v0, v1) @signature `Li/e;.writeAll:(Li/z;)J` @kind virtual;
  #L216130.  v0:= v2.`i.t.f` @type ^`i.e` @kind object;
  #L216134.  call temp:= `readString`(v0, v3) @signature `Li/e;.readString:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L21613a.  v3:= temp @kind object;
  #L21613c.  return v3 @kind object;
}
procedure `java.lang.String` `readUtf8LineStrict`(`i.t` v2 @kind this) @signature `Li/t;.readUtf8LineStrict:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L216150.  v0:= 9223372036854775807L;
  #L21615a.  call temp:= `readUtf8LineStrict`(v2, v0) @signature `Li/t;.readUtf8LineStrict:(J)Ljava/lang/String;` @kind virtual;
  #L216160.  v0:= temp @kind object;
  #L216162.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8LineStrict`(`i.t` v13 @kind this, `long` v14 ) @signature `Li/t;.readUtf8LineStrict:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L216174.  v0:= 0L;
  #L216178.  v2:= lcmp(v14, v0);
  #L21617c.  if v2 < 0 then goto L216184;
  #L216180.  v0:= 1I;
  #L216182.  goto L216186;
  #L216184.  v0:= 0I;
  #L216186.  if v0 == 0 then goto L2162d0;
  #L21618a.  v0:= 1L;
  #L21618e.  v2:= 9223372036854775807L;
  #L216198.  v4:= lcmp(v14, v2);
  #L21619c.  if v4 != 0 then goto L2161a4;
  #L2161a0.  v4:= v2 @kind wide;
  #L2161a2.  goto L2161a8;
  #L2161a4.  v4:= v14 + v0 @kind long;
  #L2161a8.  v6:= 10I;
  #L2161ac.  v12:= (`byte`) v6 @kind i2b;
  #L2161ae.  v8:= 0L;
  #L2161b2.  v6:= v13 @kind object;
  #L2161b4.  v7:= v12;
  #L2161b6.  v10:= v4 @kind wide;
  #L2161b8.  call temp:= `indexOf`(v6, v7, v8, v10) @signature `Li/t;.indexOf:(BJJ)J` @kind virtual;
  #L2161be.  v6:= temp @kind wide;
  #L2161c0.  v8:= -1L;
  #L2161c4.  v10:= lcmp(v6, v8);
  #L2161c8.  if v10 == 0 then goto L2161da;
  #L2161cc.  v14:= v13.`i.t.f` @type ^`i.e` @kind object;
  #L2161d0.  call temp:= `readUtf8Line`(v14, v6) @signature `Li/b0/a;.readUtf8Line:(Li/e;J)Ljava/lang/String;` @kind static;
  #L2161d6.  v14:= temp @kind object;
  #L2161d8.  return v14 @kind object;
  #L2161da.  v6:= lcmp(v4, v2);
  #L2161de.  if v6 >= 0 then goto L216234;
  #L2161e2.  call temp:= `request`(v13, v4) @signature `Li/t;.request:(J)Z` @kind virtual;
  #L2161e8.  v2:= temp;
  #L2161ea.  if v2 == 0 then goto L216234;
  #L2161ee.  v2:= v13.`i.t.f` @type ^`i.e` @kind object;
  #L2161f2.  v6:= v4 - v0 @kind long;
  #L2161f6.  call temp:= `getByte`(v2, v6) @signature `Li/e;.getByte:(J)B` @kind virtual;
  #L2161fc.  v2:= temp;
  #L2161fe.  v3:= 13I;
  #L216202.  v3:= (`byte`) v3 @kind i2b;
  #L216204.  if v2 != v3 then goto L216234;
  #L216208.  v0:= v0 + v4 @kind long;
  #L21620a.  call temp:= `request`(v13, v0) @signature `Li/t;.request:(J)Z` @kind virtual;
  #L216210.  v0:= temp;
  #L216212.  if v0 == 0 then goto L216234;
  #L216216.  v0:= v13.`i.t.f` @type ^`i.e` @kind object;
  #L21621a.  call temp:= `getByte`(v0, v4) @signature `Li/e;.getByte:(J)B` @kind virtual;
  #L216220.  v0:= temp;
  #L216222.  if v0 != v12 then goto L216234;
  #L216226.  v14:= v13.`i.t.f` @type ^`i.e` @kind object;
  #L21622a.  call temp:= `readUtf8Line`(v14, v4) @signature `Li/b0/a;.readUtf8Line:(Li/e;J)Ljava/lang/String;` @kind static;
  #L216230.  v14:= temp @kind object;
  #L216232.  return v14 @kind object;
  #L216234.  v6:= new `i.e`;
  #L216238.  call `<init>`(v6) @signature `Li/e;.<init>:()V` @kind direct;
  #L21623e.  v0:= v13.`i.t.f` @type ^`i.e` @kind object;
  #L216242.  v2:= 0L;
  #L216246.  v1:= 32I;
  #L21624a.  call temp:= `size`(v0) @signature `Li/e;.size:()J` @kind virtual;
  #L216250.  v4:= temp @kind wide;
  #L216252.  v7:= (`long`) v1 @kind i2l;
  #L216254.  call temp:= `min`(v7, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L21625a.  v4:= temp @kind wide;
  #L21625c.  v1:= v6 @kind object;
  #L21625e.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Li/e;.copyTo:(Li/e;JJ)Li/e;` @kind virtual;
  #L216264.  v0:= new `java.lang.StringBuilder`;
  #L216268.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L21626e.  v1:= "\\n not found: limit=" @kind object;
  #L216272.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L216278.  v1:= v13.`i.t.f` @type ^`i.e` @kind object;
  #L21627c.  call temp:= `size`(v1) @signature `Li/e;.size:()J` @kind virtual;
  #L216282.  v1:= temp @kind wide;
  #L216284.  call temp:= `min`(v1, v14) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L21628a.  v14:= temp @kind wide;
  #L21628c.  call temp:= `append`(v0, v14) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L216292.  v14:= " content=" @kind object;
  #L216296.  call temp:= `append`(v0, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21629c.  call temp:= `readByteString`(v6) @signature `Li/e;.readByteString:()Li/h;` @kind virtual;
  #L2162a2.  v14:= temp @kind object;
  #L2162a4.  call temp:= `hex`(v14) @signature `Li/h;.hex:()Ljava/lang/String;` @kind virtual;
  #L2162aa.  v14:= temp @kind object;
  #L2162ac.  call temp:= `append`(v0, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2162b2.  v14:= "…" @kind object;
  #L2162b6.  call temp:= `append`(v0, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2162bc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2162c2.  v14:= temp @kind object;
  #L2162c4.  v15:= new `java.io.EOFException`;
  #L2162c8.  call `<init>`(v15, v14) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2162ce.  throw v15;
  #L2162d0.  v0:= new `java.lang.StringBuilder`;
  #L2162d4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2162da.  v1:= "limit < 0: " @kind object;
  #L2162de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2162e4.  call temp:= `append`(v0, v14) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2162ea.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2162f0.  v14:= temp @kind object;
  #L2162f2.  v15:= new `java.lang.IllegalArgumentException`;
  #L2162f6.  call temp:= `toString`(v14) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2162fc.  v14:= temp @kind object;
  #L2162fe.  call `<init>`(v15, v14) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L216304.  throw v15;
}
procedure `boolean` `request`(`i.t` v7 @kind this, `long` v8 ) @signature `Li/t;.request:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L215e70.  v0:= 0I;
  #L215e72.  v1:= 1I;
  #L215e74.  v2:= 0L;
  #L215e78.  v4:= lcmp(v8, v2);
  #L215e7c.  if v4 < 0 then goto L215e84;
  #L215e80.  v2:= 1I;
  #L215e82.  goto L215e86;
  #L215e84.  v2:= 0I;
  #L215e86.  if v2 == 0 then goto L215ee6;
  #L215e8a.  v2:= v7.`i.t.g` @type ^`boolean` @kind boolean;
  #L215e8e.  v2:= v2 ^~ v1 @kind int;
  #L215e90.  if v2 == 0 then goto L215ece;
  #L215e94.  v2:= v7.`i.t.f` @type ^`i.e` @kind object;
  #L215e98.  call temp:= `size`(v2) @signature `Li/e;.size:()J` @kind virtual;
  #L215e9e.  v2:= temp @kind wide;
  #L215ea0.  v4:= lcmp(v2, v8);
  #L215ea4.  if v4 >= 0 then goto L215ecc;
  #L215ea8.  v2:= v7.`i.t.h` @type ^`i.z` @kind object;
  #L215eac.  v3:= v7.`i.t.f` @type ^`i.e` @kind object;
  #L215eb0.  v4:= 8192I;
  #L215eb4.  v4:= (`long`) v4 @kind i2l;
  #L215eb6.  call temp:= `read`(v2, v3, v4) @signature `Li/z;.read:(Li/e;J)J` @kind interface;
  #L215ebc.  v2:= temp @kind wide;
  #L215ebe.  v4:= -1L;
  #L215ec2.  v6:= lcmp(v2, v4);
  #L215ec6.  if v6 != 0 then goto L215e94;
  #L215eca.  return v0;
  #L215ecc.  return v1;
  #L215ece.  v8:= new `java.lang.IllegalStateException`;
  #L215ed2.  v9:= "closed" @kind object;
  #L215ed6.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L215edc.  v9:= temp @kind object;
  #L215ede.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L215ee4.  throw v8;
  #L215ee6.  v0:= new `java.lang.StringBuilder`;
  #L215eea.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L215ef0.  v1:= "byteCount < 0: " @kind object;
  #L215ef4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L215efa.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L215f00.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L215f06.  v8:= temp @kind object;
  #L215f08.  v9:= new `java.lang.IllegalArgumentException`;
  #L215f0c.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L215f12.  v8:= temp @kind object;
  #L215f14.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L215f1a.  throw v9;
}
procedure `void` `require`(`i.t` v0 @kind this, `long` v1 ) @signature `Li/t;.require:(J)V` @AccessFlag PUBLIC {
    temp;

  #L21695c.  call temp:= `request`(v0, v1) @signature `Li/t;.request:(J)Z` @kind virtual;
  #L216962.  v1:= temp;
  #L216964.  if v1 == 0 then goto L21696a;
  #L216968.  return @kind void;
  #L21696a.  v1:= new `java.io.EOFException`;
  #L21696e.  call `<init>`(v1) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L216974.  throw v1;
}
procedure `int` `select`(`i.t` v8 @kind this, `i.q` v9 @kind object) @signature `Li/t;.select:(Li/q;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L21605c.  v0:= "options" @kind object;
  #L216060.  call `checkParameterIsNotNull`(v9, v0) @signature `Lkotlin/v/c/i;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L216066.  v0:= v8.`i.t.g` @type ^`boolean` @kind boolean;
  #L21606a.  v1:= 1I;
  #L21606c.  v0:= v0 ^~ v1 @kind int;
  #L21606e.  if v0 == 0 then goto L2160d2;
  #L216072.  v0:= v8.`i.t.f` @type ^`i.e` @kind object;
  #L216076.  call temp:= `selectPrefix`(v0, v9, v1) @signature `Li/b0/a;.selectPrefix:(Li/e;Li/q;Z)I` @kind static;
  #L21607c.  v0:= temp;
  #L21607e.  v2:= -2I;
  #L216080.  v3:= -1I;
  #L216082.  if v0 == v2 then goto L2160ae;
  #L216086.  if v0 == v3 then goto L2160ac;
  #L21608a.  call temp:= `getByteStrings$okio`(v9) @signature `Li/q;.getByteStrings$okio:()[Li/h;` @kind virtual;
  #L216090.  v9:= temp @kind object;
  #L216092.  v9:= v9[v0] @kind object;
  #L216096.  call temp:= `size`(v9) @signature `Li/h;.size:()I` @kind virtual;
  #L21609c.  v9:= temp;
  #L21609e.  v1:= v8.`i.t.f` @type ^`i.e` @kind object;
  #L2160a2.  v2:= (`long`) v9 @kind i2l;
  #L2160a4.  call `skip`(v1, v2) @signature `Li/e;.skip:(J)V` @kind virtual;
  #L2160aa.  return v0;
  #L2160ac.  return v3;
  #L2160ae.  v0:= v8.`i.t.h` @type ^`i.z` @kind object;
  #L2160b2.  v2:= v8.`i.t.f` @type ^`i.e` @kind object;
  #L2160b6.  v4:= 8192I;
  #L2160ba.  v4:= (`long`) v4 @kind i2l;
  #L2160bc.  call temp:= `read`(v0, v2, v4) @signature `Li/z;.read:(Li/e;J)J` @kind interface;
  #L2160c2.  v4:= temp @kind wide;
  #L2160c4.  v6:= -1L;
  #L2160c8.  v0:= lcmp(v4, v6);
  #L2160cc.  if v0 != 0 then goto L216072;
  #L2160d0.  return v3;
  #L2160d2.  v9:= new `java.lang.IllegalStateException`;
  #L2160d6.  v0:= "closed" @kind object;
  #L2160da.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2160e0.  v0:= temp @kind object;
  #L2160e2.  call `<init>`(v9, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2160e8.  throw v9;
}
procedure `void` `skip`(`i.t` v5 @kind this, `long` v6 ) @signature `Li/t;.skip:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L216988.  v0:= v5.`i.t.g` @type ^`boolean` @kind boolean;
  #L21698c.  v0:= v0 ^~ 1;
  #L216990.  if v0 == 0 then goto L216a08;
  #L216994.  v0:= 0L;
  #L216998.  v2:= lcmp(v6, v0);
  #L21699c.  if v2 <= 0 then goto L216a06;
  #L2169a0.  v2:= v5.`i.t.f` @type ^`i.e` @kind object;
  #L2169a4.  call temp:= `size`(v2) @signature `Li/e;.size:()J` @kind virtual;
  #L2169aa.  v2:= temp @kind wide;
  #L2169ac.  v4:= lcmp(v2, v0);
  #L2169b0.  if v4 != 0 then goto L2169e4;
  #L2169b4.  v0:= v5.`i.t.h` @type ^`i.z` @kind object;
  #L2169b8.  v1:= v5.`i.t.f` @type ^`i.e` @kind object;
  #L2169bc.  v2:= 8192I;
  #L2169c0.  v2:= (`long`) v2 @kind i2l;
  #L2169c2.  call temp:= `read`(v0, v1, v2) @signature `Li/z;.read:(Li/e;J)J` @kind interface;
  #L2169c8.  v0:= temp @kind wide;
  #L2169ca.  v2:= -1L;
  #L2169ce.  v4:= lcmp(v0, v2);
  #L2169d2.  if v4 == 0 then goto L2169d8;
  #L2169d6.  goto L2169e4;
  #L2169d8.  v6:= new `java.io.EOFException`;
  #L2169dc.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L2169e2.  throw v6;
  #L2169e4.  v0:= v5.`i.t.f` @type ^`i.e` @kind object;
  #L2169e8.  call temp:= `size`(v0) @signature `Li/e;.size:()J` @kind virtual;
  #L2169ee.  v0:= temp @kind wide;
  #L2169f0.  call temp:= `min`(v6, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2169f6.  v0:= temp @kind wide;
  #L2169f8.  v2:= v5.`i.t.f` @type ^`i.e` @kind object;
  #L2169fc.  call `skip`(v2, v0) @signature `Li/e;.skip:(J)V` @kind virtual;
  #L216a02.  v6:= v6 - v0 @kind long;
  #L216a04.  goto L216994;
  #L216a06.  return @kind void;
  #L216a08.  v6:= new `java.lang.IllegalStateException`;
  #L216a0c.  v7:= "closed" @kind object;
  #L216a10.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L216a16.  v7:= temp @kind object;
  #L216a18.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L216a1e.  throw v6;
}
procedure `i.a0` `timeout`(`i.t` v1 @kind this) @signature `Li/t;.timeout:()Li/a0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2167f4.  v0:= v1.`i.t.h` @type ^`i.z` @kind object;
  #L2167f8.  call temp:= `timeout`(v0) @signature `Li/z;.timeout:()Li/a0;` @kind interface;
  #L2167fe.  v0:= temp @kind object;
  #L216800.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`i.t` v2 @kind this) @signature `Li/t;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L216318.  v0:= new `java.lang.StringBuilder`;
  #L21631c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L216322.  v1:= "buffer(" @kind object;
  #L216326.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21632c.  v1:= v2.`i.t.h` @type ^`i.z` @kind object;
  #L216330.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L216336.  v1:= 41I;
  #L21633a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L216340.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L216346.  v0:= temp @kind object;
  #L216348.  return v0 @kind object;
}
