record `okhttp3.internal.connection.d$a` @kind class @AccessFlag FINAL extends `i.j` @kind class {
  `boolean` `okhttp3.internal.connection.d$a.f` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.connection.d$a.g` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.connection.d$a.h` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.d$a.i` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.d` `okhttp3.internal.connection.d$a.j` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.connection.d$a` v0 @kind this, `okhttp3.internal.connection.d` v1 @kind object, `i.x` v2 @kind object, `long` v3 ) @signature `Lokhttp3/internal/connection/d$a;.<init>:(Lokhttp3/internal/connection/d;Li/x;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1ff900.  v0.`okhttp3.internal.connection.d$a.j` @type ^`okhttp3.internal.connection.d` := v1 @kind object;
  #L1ff904.  call `<init>`(v0, v2) @signature `Li/j;.<init>:(Li/x;)V` @kind direct;
  #L1ff90a.  v0.`okhttp3.internal.connection.d$a.g` @type ^`long` := v3 @kind wide;
  #L1ff90e.  return @kind void;
}
procedure `java.io.IOException` `a`(`okhttp3.internal.connection.d$a` v7 @kind this, `java.io.IOException` v8 @kind object) @signature `Lokhttp3/internal/connection/d$a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1ff8c8.  v0:= v7.`okhttp3.internal.connection.d$a.f` @type ^`boolean` @kind boolean;
  #L1ff8cc.  if v0 == 0 then goto L1ff8d2;
  #L1ff8d0.  return v8 @kind object;
  #L1ff8d2.  v0:= 1I;
  #L1ff8d4.  v7.`okhttp3.internal.connection.d$a.f` @type ^`boolean` := v0 @kind boolean;
  #L1ff8d8.  v1:= v7.`okhttp3.internal.connection.d$a.j` @type ^`okhttp3.internal.connection.d` @kind object;
  #L1ff8dc.  v2:= v7.`okhttp3.internal.connection.d$a.h` @type ^`long` @kind wide;
  #L1ff8e0.  v4:= 0I;
  #L1ff8e2.  v5:= 1I;
  #L1ff8e4.  v6:= v8 @kind object;
  #L1ff8e6.  call temp:= `a`(v1, v2, v4, v5, v6) @signature `Lokhttp3/internal/connection/d;.a:(JZZLjava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1ff8ec.  v8:= temp @kind object;
  #L1ff8ee.  return v8 @kind object;
}
procedure `void` `close`(`okhttp3.internal.connection.d$a` v5 @kind this) @signature `Lokhttp3/internal/connection/d$a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ff920.  v0:= v5.`okhttp3.internal.connection.d$a.i` @type ^`boolean` @kind boolean;
  #L1ff924.  if v0 == 0 then goto L1ff92a;
  #L1ff928.  return @kind void;
  #L1ff92a.  v0:= 1I;
  #L1ff92c.  v5.`okhttp3.internal.connection.d$a.i` @type ^`boolean` := v0 @kind boolean;
  #L1ff930.  v0:= v5.`okhttp3.internal.connection.d$a.g` @type ^`long` @kind wide;
  #L1ff934.  v2:= -1L;
  #L1ff938.  v4:= lcmp(v0, v2);
  #L1ff93c.  if v4 == 0 then goto L1ff95e;
  #L1ff940.  v2:= v5.`okhttp3.internal.connection.d$a.h` @type ^`long` @kind wide;
  #L1ff944.  v4:= lcmp(v2, v0);
  #L1ff948.  if v4 != 0 then goto L1ff94e;
  #L1ff94c.  goto L1ff95e;
  #L1ff94e.  v0:= new `java.net.ProtocolException`;
  #L1ff952.  v1:= "unexpected end of stream" @kind object;
  #L1ff956.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ff95c.  throw v0;
  #L1ff95e.  call `close`(v5) @signature `Li/j;.close:()V` @kind super;
  #L1ff964.  v0:= 0I;
  #L1ff966.  call temp:= `a`(v5, v0) @signature `Lokhttp3/internal/connection/d$a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L1ff96c.  return @kind void;
  #L1ff96e.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L1ff970.  call temp:= `a`(v5, v0) @signature `Lokhttp3/internal/connection/d$a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L1ff976.  v0:= temp @kind object;
  #L1ff978.  throw v0;
  catch `java.io.IOException` @[L1ff95e..L1ff96c] goto L1ff96e;
}
procedure `void` `flush`(`okhttp3.internal.connection.d$a` v1 @kind this) @signature `Lokhttp3/internal/connection/d$a;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ff99c.  call `flush`(v1) @signature `Li/j;.flush:()V` @kind super;
  #L1ff9a2.  return @kind void;
  #L1ff9a4.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L1ff9a6.  call temp:= `a`(v1, v0) @signature `Lokhttp3/internal/connection/d$a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L1ff9ac.  v0:= temp @kind object;
  #L1ff9ae.  throw v0;
  catch `java.io.IOException` @[L1ff99c..L1ff9a2] goto L1ff9a4;
}
procedure `void` `write`(`okhttp3.internal.connection.d$a` v5 @kind this, `i.e` v6 @kind object, `long` v7 ) @signature `Lokhttp3/internal/connection/d$a;.write:(Li/e;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ff9d0.  v0:= v5.`okhttp3.internal.connection.d$a.i` @type ^`boolean` @kind boolean;
  #L1ff9d4.  if v0 != 0 then goto L1ffa5e;
  #L1ff9d8.  v0:= v5.`okhttp3.internal.connection.d$a.g` @type ^`long` @kind wide;
  #L1ff9dc.  v2:= -1L;
  #L1ff9e0.  v4:= lcmp(v0, v2);
  #L1ff9e4.  if v4 == 0 then goto L1ffa40;
  #L1ff9e8.  v2:= v5.`okhttp3.internal.connection.d$a.h` @type ^`long` @kind wide;
  #L1ff9ec.  v2:= v2 + v7 @kind long;
  #L1ff9ee.  v4:= lcmp(v2, v0);
  #L1ff9f2.  if v4 > 0 then goto L1ff9f8;
  #L1ff9f6.  goto L1ffa40;
  #L1ff9f8.  v6:= new `java.net.ProtocolException`;
  #L1ff9fc.  v0:= new `java.lang.StringBuilder`;
  #L1ffa00.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ffa06.  v1:= "expected " @kind object;
  #L1ffa0a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ffa10.  v1:= v5.`okhttp3.internal.connection.d$a.g` @type ^`long` @kind wide;
  #L1ffa14.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ffa1a.  v1:= " bytes but received " @kind object;
  #L1ffa1e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ffa24.  v1:= v5.`okhttp3.internal.connection.d$a.h` @type ^`long` @kind wide;
  #L1ffa28.  v1:= v1 + v7 @kind long;
  #L1ffa2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ffa30.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ffa36.  v7:= temp @kind object;
  #L1ffa38.  call `<init>`(v6, v7) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ffa3e.  throw v6;
  #L1ffa40.  call `write`(v5, v6, v7) @signature `Li/j;.write:(Li/e;J)V` @kind super;
  #L1ffa46.  v0:= v5.`okhttp3.internal.connection.d$a.h` @type ^`long` @kind wide;
  #L1ffa4a.  v0:= v0 + v7 @kind long;
  #L1ffa4c.  v5.`okhttp3.internal.connection.d$a.h` @type ^`long` := v0 @kind wide;
  #L1ffa50.  return @kind void;
  #L1ffa52.  v6:= Exception @type ^`java.io.IOException` @kind object;
  #L1ffa54.  call temp:= `a`(v5, v6) @signature `Lokhttp3/internal/connection/d$a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L1ffa5a.  v6:= temp @kind object;
  #L1ffa5c.  throw v6;
  #L1ffa5e.  v6:= new `java.lang.IllegalStateException`;
  #L1ffa62.  v7:= "closed" @kind object;
  #L1ffa66.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ffa6c.  throw v6;
  catch `java.io.IOException` @[L1ffa40..L1ffa50] goto L1ffa52;
}
