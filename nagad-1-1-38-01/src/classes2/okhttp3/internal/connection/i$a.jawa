record `okhttp3.internal.connection.i$a` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `okhttp3.internal.connection.i$a.a` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.connection.i$a.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.internal.connection.i$a` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lokhttp3/internal/connection/i$a;.<init>:(Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L201df8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L201dfe.  v0:= 0I;
  #L201e00.  v1.`okhttp3.internal.connection.i$a.b` @type ^`int` := v0;
  #L201e04.  v1.`okhttp3.internal.connection.i$a.a` @type ^`java.util.List` := v2 @kind object;
  #L201e08.  return @kind void;
}
procedure `java.util.List` `getAll`(`okhttp3.internal.connection.i$a` v2 @kind this) @signature `Lokhttp3/internal/connection/i$a;.getAll:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L201d90.  v0:= new `java.util.ArrayList`;
  #L201d94.  v1:= v2.`okhttp3.internal.connection.i$a.a` @type ^`java.util.List` @kind object;
  #L201d98.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L201d9e.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`okhttp3.internal.connection.i$a` v2 @kind this) @signature `Lokhttp3/internal/connection/i$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L201d64.  v0:= v2.`okhttp3.internal.connection.i$a.b` @type ^`int`;
  #L201d68.  v1:= v2.`okhttp3.internal.connection.i$a.a` @type ^`java.util.List` @kind object;
  #L201d6c.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L201d72.  v1:= temp;
  #L201d74.  if v0 >= v1 then goto L201d7c;
  #L201d78.  v0:= 1I;
  #L201d7a.  goto L201d7e;
  #L201d7c.  v0:= 0I;
  #L201d7e.  return v0;
}
procedure `h.k0` `next`(`okhttp3.internal.connection.i$a` v3 @kind this) @signature `Lokhttp3/internal/connection/i$a;.next:()Lh/k0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L201db0.  call temp:= `hasNext`(v3) @signature `Lokhttp3/internal/connection/i$a;.hasNext:()Z` @kind virtual;
  #L201db6.  v0:= temp;
  #L201db8.  if v0 == 0 then goto L201dda;
  #L201dbc.  v0:= v3.`okhttp3.internal.connection.i$a.a` @type ^`java.util.List` @kind object;
  #L201dc0.  v1:= v3.`okhttp3.internal.connection.i$a.b` @type ^`int`;
  #L201dc4.  v2:= v1 + 1;
  #L201dc8.  v3.`okhttp3.internal.connection.i$a.b` @type ^`int` := v2;
  #L201dcc.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L201dd2.  v0:= temp @kind object;
  #L201dd4.  v0:= (`h.k0`) v0 @kind object;
  #L201dd8.  return v0 @kind object;
  #L201dda.  v0:= new `java.util.NoSuchElementException`;
  #L201dde.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L201de4.  throw v0;
}
