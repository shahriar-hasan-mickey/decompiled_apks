record `okhttp3.internal.connection.c` @kind class @AccessFlag FINAL {
  `java.util.List` `okhttp3.internal.connection.c.a` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.connection.c.b` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.c.c` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.c.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.internal.connection.c` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lokhttp3/internal/connection/c;.<init>:(Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1ff8a4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ff8aa.  v0:= 0I;
  #L1ff8ac.  v1.`okhttp3.internal.connection.c.b` @type ^`int` := v0;
  #L1ff8b0.  v1.`okhttp3.internal.connection.c.a` @type ^`java.util.List` := v2 @kind object;
  #L1ff8b4.  return @kind void;
}
procedure `boolean` `b`(`okhttp3.internal.connection.c` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object) @signature `Lokhttp3/internal/connection/c;.b:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1ff77c.  v0:= v2.`okhttp3.internal.connection.c.b` @type ^`int`;
  #L1ff780.  v1:= v2.`okhttp3.internal.connection.c.a` @type ^`java.util.List` @kind object;
  #L1ff784.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1ff78a.  v1:= temp;
  #L1ff78c.  if v0 >= v1 then goto L1ff7b6;
  #L1ff790.  v1:= v2.`okhttp3.internal.connection.c.a` @type ^`java.util.List` @kind object;
  #L1ff794.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1ff79a.  v1:= temp @kind object;
  #L1ff79c.  v1:= (`h.p`) v1 @kind object;
  #L1ff7a0.  call temp:= `isCompatible`(v1, v3) @signature `Lh/p;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L1ff7a6.  v1:= temp;
  #L1ff7a8.  if v1 == 0 then goto L1ff7b0;
  #L1ff7ac.  v3:= 1I;
  #L1ff7ae.  return v3;
  #L1ff7b0.  v0:= v0 + 1;
  #L1ff7b4.  goto L1ff780;
  #L1ff7b6.  v3:= 0I;
  #L1ff7b8.  return v3;
}
procedure `h.p` `a`(`okhttp3.internal.connection.c` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `Lokhttp3/internal/connection/c;.a:(Ljavax/net/ssl/SSLSocket;)Lh/p;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ff7cc.  v0:= v4.`okhttp3.internal.connection.c.b` @type ^`int`;
  #L1ff7d0.  v1:= v4.`okhttp3.internal.connection.c.a` @type ^`java.util.List` @kind object;
  #L1ff7d4.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1ff7da.  v1:= temp;
  #L1ff7dc.  if v0 >= v1 then goto L1ff80c;
  #L1ff7e0.  v2:= v4.`okhttp3.internal.connection.c.a` @type ^`java.util.List` @kind object;
  #L1ff7e4.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1ff7ea.  v2:= temp @kind object;
  #L1ff7ec.  v2:= (`h.p`) v2 @kind object;
  #L1ff7f0.  call temp:= `isCompatible`(v2, v5) @signature `Lh/p;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L1ff7f6.  v3:= temp;
  #L1ff7f8.  if v3 == 0 then goto L1ff806;
  #L1ff7fc.  v0:= v0 + 1;
  #L1ff800.  v4.`okhttp3.internal.connection.c.b` @type ^`int` := v0;
  #L1ff804.  goto L1ff80e;
  #L1ff806.  v0:= v0 + 1;
  #L1ff80a.  goto L1ff7dc;
  #L1ff80c.  v2:= 0I;
  #L1ff80e.  if v2 == 0 then goto L1ff82e;
  #L1ff812.  call temp:= `b`(v4, v5) @signature `Lokhttp3/internal/connection/c;.b:(Ljavax/net/ssl/SSLSocket;)Z` @kind direct;
  #L1ff818.  v0:= temp;
  #L1ff81a.  v4.`okhttp3.internal.connection.c.c` @type ^`boolean` := v0 @kind boolean;
  #L1ff81e.  v0:= `@@h.n0.c.a` @type ^`h.n0.c` @kind object;
  #L1ff822.  v1:= v4.`okhttp3.internal.connection.c.d` @type ^`boolean` @kind boolean;
  #L1ff826.  call `apply`(v0, v2, v5, v1) @signature `Lh/n0/c;.apply:(Lh/p;Ljavax/net/ssl/SSLSocket;Z)V` @kind virtual;
  #L1ff82c.  return v2 @kind object;
  #L1ff82e.  v0:= new `java.net.UnknownServiceException`;
  #L1ff832.  v1:= new `java.lang.StringBuilder`;
  #L1ff836.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ff83c.  v2:= "Unable to find acceptable protocols. isFallback=" @kind object;
  #L1ff840.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ff846.  v2:= v4.`okhttp3.internal.connection.c.d` @type ^`boolean` @kind boolean;
  #L1ff84a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ff850.  v2:= ", modes=" @kind object;
  #L1ff854.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ff85a.  v2:= v4.`okhttp3.internal.connection.c.a` @type ^`java.util.List` @kind object;
  #L1ff85e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ff864.  v2:= ", supported protocols=" @kind object;
  #L1ff868.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ff86e.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L1ff874.  v5:= temp @kind object;
  #L1ff876.  call temp:= `toString`(v5) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1ff87c.  v5:= temp @kind object;
  #L1ff87e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ff884.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ff88a.  v5:= temp @kind object;
  #L1ff88c.  call `<init>`(v0, v5) @signature `Ljava/net/UnknownServiceException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ff892.  throw v0;
}
procedure `boolean` `a`(`okhttp3.internal.connection.c` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lokhttp3/internal/connection/c;.a:(Ljava/io/IOException;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1ff71c.  v0:= 1I;
  #L1ff71e.  v2.`okhttp3.internal.connection.c.d` @type ^`boolean` := v0 @kind boolean;
  #L1ff722.  v0:= v2.`okhttp3.internal.connection.c.c` @type ^`boolean` @kind boolean;
  #L1ff726.  v1:= 0I;
  #L1ff728.  if v0 != 0 then goto L1ff72e;
  #L1ff72c.  return v1;
  #L1ff72e.  v0:= instanceof @variable v3 @type ^`java.net.ProtocolException` @kind boolean;
  #L1ff732.  if v0 == 0 then goto L1ff738;
  #L1ff736.  return v1;
  #L1ff738.  v0:= instanceof @variable v3 @type ^`java.io.InterruptedIOException` @kind boolean;
  #L1ff73c.  if v0 == 0 then goto L1ff742;
  #L1ff740.  return v1;
  #L1ff742.  v0:= instanceof @variable v3 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L1ff746.  if v0 == 0 then goto L1ff75c;
  #L1ff74a.  call temp:= `getCause`(v3) @signature `Ljava/io/IOException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L1ff750.  v0:= temp @kind object;
  #L1ff752.  v0:= instanceof @variable v0 @type ^`java.security.cert.CertificateException` @kind boolean;
  #L1ff756.  if v0 == 0 then goto L1ff75c;
  #L1ff75a.  return v1;
  #L1ff75c.  v0:= instanceof @variable v3 @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind boolean;
  #L1ff760.  if v0 == 0 then goto L1ff766;
  #L1ff764.  return v1;
  #L1ff766.  v3:= instanceof @variable v3 @type ^`javax.net.ssl.SSLException` @kind boolean;
  #L1ff76a.  return v3;
}
