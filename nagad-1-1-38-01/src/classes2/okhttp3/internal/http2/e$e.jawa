record `okhttp3.internal.http2.e$e` @kind class @AccessFlag  extends `h.n0.d` @kind class {
  `int` `okhttp3.internal.http2.e$e.g` @AccessFlag FINAL_SYNTHETIC;
  `java.util.List` `okhttp3.internal.http2.e$e.h` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `okhttp3.internal.http2.e$e.i` @AccessFlag FINAL_SYNTHETIC;
  `okhttp3.internal.http2.e` `okhttp3.internal.http2.e$e.j` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.http2.e$e` v0 @kind this, `okhttp3.internal.http2.e` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object, `int` v4 , `java.util.List` v5 @kind object, `boolean` v6 ) @signature `Lokhttp3/internal/http2/e$e;.<init>:(Lokhttp3/internal/http2/e;Ljava/lang/String;[Ljava/lang/Object;ILjava/util/List;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L206d04.  v0.`okhttp3.internal.http2.e$e.j` @type ^`okhttp3.internal.http2.e` := v1 @kind object;
  #L206d08.  v0.`okhttp3.internal.http2.e$e.g` @type ^`int` := v4;
  #L206d0c.  v0.`okhttp3.internal.http2.e$e.h` @type ^`java.util.List` := v5 @kind object;
  #L206d10.  v0.`okhttp3.internal.http2.e$e.i` @type ^`boolean` := v6 @kind boolean;
  #L206d14.  call `<init>`(v0, v2, v3) @signature `Lh/n0/d;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L206d1a.  return @kind void;
}
procedure `void` `execute`(`okhttp3.internal.http2.e$e` v4 @kind this) @signature `Lokhttp3/internal/http2/e$e;.execute:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L206d2c.  v0:= v4.`okhttp3.internal.http2.e$e.j` @type ^`okhttp3.internal.http2.e` @kind object;
  #L206d30.  v0:= v0.`okhttp3.internal.http2.e.o` @type ^`okhttp3.internal.http2.k` @kind object;
  #L206d34.  v1:= v4.`okhttp3.internal.http2.e$e.g` @type ^`int`;
  #L206d38.  v2:= v4.`okhttp3.internal.http2.e$e.h` @type ^`java.util.List` @kind object;
  #L206d3c.  v3:= v4.`okhttp3.internal.http2.e$e.i` @type ^`boolean` @kind boolean;
  #L206d40.  call temp:= `onHeaders`(v0, v1, v2, v3) @signature `Lokhttp3/internal/http2/k;.onHeaders:(ILjava/util/List;Z)Z` @kind interface;
  #L206d46.  v0:= temp;
  #L206d48.  if v0 == 0 then goto L206d62;
  #L206d4c.  v1:= v4.`okhttp3.internal.http2.e$e.j` @type ^`okhttp3.internal.http2.e` @kind object;
  #L206d50.  v1:= v1.`okhttp3.internal.http2.e.A` @type ^`okhttp3.internal.http2.i` @kind object;
  #L206d54.  v2:= v4.`okhttp3.internal.http2.e$e.g` @type ^`int`;
  #L206d58.  v3:= `@@okhttp3.internal.http2.a.l` @type ^`okhttp3.internal.http2.a` @kind object;
  #L206d5c.  call `rstStream`(v1, v2, v3) @signature `Lokhttp3/internal/http2/i;.rstStream:(ILokhttp3/internal/http2/a;)V` @kind virtual;
  #L206d62.  if v0 != 0 then goto L206d6e;
  #L206d66.  v0:= v4.`okhttp3.internal.http2.e$e.i` @type ^`boolean` @kind boolean;
  #L206d6a.  if v0 == 0 then goto L206d98;
  #L206d6e.  v0:= v4.`okhttp3.internal.http2.e$e.j` @type ^`okhttp3.internal.http2.e` @kind object;
  #L206d72.  @monitorenter v0
  #L206d74.  v1:= v4.`okhttp3.internal.http2.e$e.j` @type ^`okhttp3.internal.http2.e` @kind object;
  #L206d78.  v1:= v1.`okhttp3.internal.http2.e.C` @type ^`java.util.Set` @kind object;
  #L206d7c.  v2:= v4.`okhttp3.internal.http2.e$e.g` @type ^`int`;
  #L206d80.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L206d86.  v2:= temp @kind object;
  #L206d88.  call temp:= `remove`(v1, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L206d8e.  @monitorexit v0
  #L206d90.  goto L206d98;
  #L206d92.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L206d94.  @monitorexit v0
  #L206d96.  throw v1;
  #L206d98.  return @kind void;
  catch `java.io.IOException` @[L206d4c..L206d74] goto L206d98;
  catch `java.lang.Throwable` @[L206d74..L206d96] goto L206d92;
  catch `java.io.IOException` @[L206d96..L206d98] goto L206d98;
}
