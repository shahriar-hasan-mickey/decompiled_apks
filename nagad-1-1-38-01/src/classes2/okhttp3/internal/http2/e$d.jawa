record `okhttp3.internal.http2.e$d` @kind class @AccessFlag  extends `h.n0.d` @kind class {
  `int` `okhttp3.internal.http2.e$d.g` @AccessFlag FINAL_SYNTHETIC;
  `java.util.List` `okhttp3.internal.http2.e$d.h` @AccessFlag FINAL_SYNTHETIC;
  `okhttp3.internal.http2.e` `okhttp3.internal.http2.e$d.i` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.http2.e$d` v0 @kind this, `okhttp3.internal.http2.e` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object, `int` v4 , `java.util.List` v5 @kind object) @signature `Lokhttp3/internal/http2/e$d;.<init>:(Lokhttp3/internal/http2/e;Ljava/lang/String;[Ljava/lang/Object;ILjava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L206c50.  v0.`okhttp3.internal.http2.e$d.i` @type ^`okhttp3.internal.http2.e` := v1 @kind object;
  #L206c54.  v0.`okhttp3.internal.http2.e$d.g` @type ^`int` := v4;
  #L206c58.  v0.`okhttp3.internal.http2.e$d.h` @type ^`java.util.List` := v5 @kind object;
  #L206c5c.  call `<init>`(v0, v2, v3) @signature `Lh/n0/d;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L206c62.  return @kind void;
}
procedure `void` `execute`(`okhttp3.internal.http2.e$d` v3 @kind this) @signature `Lokhttp3/internal/http2/e$d;.execute:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L206c74.  v0:= v3.`okhttp3.internal.http2.e$d.i` @type ^`okhttp3.internal.http2.e` @kind object;
  #L206c78.  v0:= v0.`okhttp3.internal.http2.e.o` @type ^`okhttp3.internal.http2.k` @kind object;
  #L206c7c.  v1:= v3.`okhttp3.internal.http2.e$d.g` @type ^`int`;
  #L206c80.  v2:= v3.`okhttp3.internal.http2.e$d.h` @type ^`java.util.List` @kind object;
  #L206c84.  call temp:= `onRequest`(v0, v1, v2) @signature `Lokhttp3/internal/http2/k;.onRequest:(ILjava/util/List;)Z` @kind interface;
  #L206c8a.  v0:= temp;
  #L206c8c.  if v0 == 0 then goto L206cd0;
  #L206c90.  v0:= v3.`okhttp3.internal.http2.e$d.i` @type ^`okhttp3.internal.http2.e` @kind object;
  #L206c94.  v0:= v0.`okhttp3.internal.http2.e.A` @type ^`okhttp3.internal.http2.i` @kind object;
  #L206c98.  v1:= v3.`okhttp3.internal.http2.e$d.g` @type ^`int`;
  #L206c9c.  v2:= `@@okhttp3.internal.http2.a.l` @type ^`okhttp3.internal.http2.a` @kind object;
  #L206ca0.  call `rstStream`(v0, v1, v2) @signature `Lokhttp3/internal/http2/i;.rstStream:(ILokhttp3/internal/http2/a;)V` @kind virtual;
  #L206ca6.  v0:= v3.`okhttp3.internal.http2.e$d.i` @type ^`okhttp3.internal.http2.e` @kind object;
  #L206caa.  @monitorenter v0
  #L206cac.  v1:= v3.`okhttp3.internal.http2.e$d.i` @type ^`okhttp3.internal.http2.e` @kind object;
  #L206cb0.  v1:= v1.`okhttp3.internal.http2.e.C` @type ^`java.util.Set` @kind object;
  #L206cb4.  v2:= v3.`okhttp3.internal.http2.e$d.g` @type ^`int`;
  #L206cb8.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L206cbe.  v2:= temp @kind object;
  #L206cc0.  call temp:= `remove`(v1, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L206cc6.  @monitorexit v0
  #L206cc8.  goto L206cd0;
  #L206cca.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L206ccc.  @monitorexit v0
  #L206cce.  throw v1;
  #L206cd0.  return @kind void;
  catch `java.io.IOException` @[L206c90..L206cac] goto L206cd0;
  catch `java.lang.Throwable` @[L206cac..L206cce] goto L206cca;
  catch `java.io.IOException` @[L206cce..L206cd0] goto L206cd0;
}
