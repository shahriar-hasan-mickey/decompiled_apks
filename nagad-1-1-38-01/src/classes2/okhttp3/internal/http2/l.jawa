record `okhttp3.internal.http2.l` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.http2.l.a` @AccessFlag PRIVATE;
  `int`[] `okhttp3.internal.http2.l.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http2.l` v1 @kind this) @signature `Lokhttp3/internal/http2/l;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L20bcb8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L20bcbe.  v0:= 10I;
  #L20bcc2.  v0:= new `int`[v0];
  #L20bcc6.  v1.`okhttp3.internal.http2.l.b` @type ^`int`[] := v0 @kind object;
  #L20bcca.  return @kind void;
}
procedure `int` `a`(`okhttp3.internal.http2.l` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/l;.a:(I)I` @AccessFlag  {
    temp;
    v0;

  #L20bb9c.  v0:= v1.`okhttp3.internal.http2.l.b` @type ^`int`[] @kind object;
  #L20bba0.  v2:= v0[v2];
  #L20bba4.  return v2;
}
procedure `okhttp3.internal.http2.l` `a`(`okhttp3.internal.http2.l` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lokhttp3/internal/http2/l;.a:(II)Lokhttp3/internal/http2/l;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L20bc84.  if v4 < 0 then goto L20bca6;
  #L20bc88.  v0:= v3.`okhttp3.internal.http2.l.b` @type ^`int`[] @kind object;
  #L20bc8c.  v1:= length @variable v0;
  #L20bc8e.  if v4 < v1 then goto L20bc94;
  #L20bc92.  goto L20bca6;
  #L20bc94.  v1:= 1I;
  #L20bc96.  v1:= v1 ^< v4 @kind int;
  #L20bc98.  v2:= v3.`okhttp3.internal.http2.l.a` @type ^`int`;
  #L20bc9c.  v1:= v1 ^| v2 @kind int;
  #L20bc9e.  v3.`okhttp3.internal.http2.l.a` @type ^`int` := v1;
  #L20bca2.  v0[v4]:= v5;
  #L20bca6.  return v3 @kind object;
}
procedure `void` `a`(`okhttp3.internal.http2.l` v2 @kind this) @signature `Lokhttp3/internal/http2/l;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L20bcdc.  v0:= 0I;
  #L20bcde.  v2.`okhttp3.internal.http2.l.a` @type ^`int` := v0;
  #L20bce2.  v1:= v2.`okhttp3.internal.http2.l.b` @type ^`int`[] @kind object;
  #L20bce6.  call `fill`(v1, v0) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L20bcec.  return @kind void;
}
procedure `void` `a`(`okhttp3.internal.http2.l` v2 @kind this, `okhttp3.internal.http2.l` v3 @kind object) @signature `Lokhttp3/internal/http2/l;.a:(Lokhttp3/internal/http2/l;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L20bd00.  v0:= 0I;
  #L20bd02.  v1:= 10I;
  #L20bd06.  if v0 >= v1 then goto L20bd2c;
  #L20bd0a.  call temp:= `d`(v3, v0) @signature `Lokhttp3/internal/http2/l;.d:(I)Z` @kind virtual;
  #L20bd10.  v1:= temp;
  #L20bd12.  if v1 != 0 then goto L20bd18;
  #L20bd16.  goto L20bd26;
  #L20bd18.  call temp:= `a`(v3, v0) @signature `Lokhttp3/internal/http2/l;.a:(I)I` @kind virtual;
  #L20bd1e.  v1:= temp;
  #L20bd20.  call temp:= `a`(v2, v0, v1) @signature `Lokhttp3/internal/http2/l;.a:(II)Lokhttp3/internal/http2/l;` @kind virtual;
  #L20bd26.  v0:= v0 + 1;
  #L20bd2a.  goto L20bd02;
  #L20bd2c.  return @kind void;
}
procedure `int` `b`(`okhttp3.internal.http2.l` v2 @kind this) @signature `Lokhttp3/internal/http2/l;.b:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L20bbb8.  v0:= v2.`okhttp3.internal.http2.l.a` @type ^`int`;
  #L20bbbc.  v0:= v0 ^& 2;
  #L20bbc0.  if v0 == 0 then goto L20bbd0;
  #L20bbc4.  v0:= v2.`okhttp3.internal.http2.l.b` @type ^`int`[] @kind object;
  #L20bbc8.  v1:= 1I;
  #L20bbca.  v0:= v0[v1];
  #L20bbce.  goto L20bbd2;
  #L20bbd0.  v0:= -1I;
  #L20bbd2.  return v0;
}
procedure `int` `b`(`okhttp3.internal.http2.l` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/l;.b:(I)I` @AccessFlag  {
    temp;
    v0;

  #L20bc14.  v0:= v1.`okhttp3.internal.http2.l.a` @type ^`int`;
  #L20bc18.  v0:= v0 ^& 16;
  #L20bc1c.  if v0 == 0 then goto L20bc2a;
  #L20bc20.  v2:= v1.`okhttp3.internal.http2.l.b` @type ^`int`[] @kind object;
  #L20bc24.  v0:= 4I;
  #L20bc26.  v2:= v2[v0];
  #L20bc2a.  return v2;
}
procedure `int` `c`(`okhttp3.internal.http2.l` v2 @kind this) @signature `Lokhttp3/internal/http2/l;.c:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L20bbe4.  v0:= v2.`okhttp3.internal.http2.l.a` @type ^`int`;
  #L20bbe8.  v0:= v0 ^& 128;
  #L20bbec.  if v0 == 0 then goto L20bbfc;
  #L20bbf0.  v0:= v2.`okhttp3.internal.http2.l.b` @type ^`int`[] @kind object;
  #L20bbf4.  v1:= 7I;
  #L20bbf6.  v0:= v0[v1];
  #L20bbfa.  goto L20bc02;
  #L20bbfc.  v0:= 65535I;
  #L20bc02.  return v0;
}
procedure `int` `c`(`okhttp3.internal.http2.l` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/l;.c:(I)I` @AccessFlag  {
    temp;
    v0;

  #L20bc3c.  v0:= v1.`okhttp3.internal.http2.l.a` @type ^`int`;
  #L20bc40.  v0:= v0 ^& 32;
  #L20bc44.  if v0 == 0 then goto L20bc52;
  #L20bc48.  v2:= v1.`okhttp3.internal.http2.l.b` @type ^`int`[] @kind object;
  #L20bc4c.  v0:= 5I;
  #L20bc4e.  v2:= v2[v0];
  #L20bc52.  return v2;
}
procedure `int` `d`(`okhttp3.internal.http2.l` v1 @kind this) @signature `Lokhttp3/internal/http2/l;.d:()I` @AccessFlag  {
    temp;
    v0;

  #L20bc64.  v0:= v1.`okhttp3.internal.http2.l.a` @type ^`int`;
  #L20bc68.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L20bc6e.  v0:= temp;
  #L20bc70.  return v0;
}
procedure `boolean` `d`(`okhttp3.internal.http2.l` v2 @kind this, `int` v3 ) @signature `Lokhttp3/internal/http2/l;.d:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L20bb74.  v0:= 1I;
  #L20bb76.  v3:= v0 ^< v3 @kind int;
  #L20bb7a.  v1:= v2.`okhttp3.internal.http2.l.a` @type ^`int`;
  #L20bb7e.  v3:= v3 ^& v1 @kind int;
  #L20bb80.  if v3 == 0 then goto L20bb86;
  #L20bb84.  goto L20bb88;
  #L20bb86.  v0:= 0I;
  #L20bb88.  return v0;
}
