record `okhttp3.internal.http2.c$a` @kind class @AccessFlag FINAL {
  `java.util.List` `okhttp3.internal.http2.c$a.a` @AccessFlag PRIVATE_FINAL;
  `i.g` `okhttp3.internal.http2.c$a.b` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.c$a.c` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.c$a.d` @AccessFlag PRIVATE;
  `okhttp3.internal.http2.b`[] `okhttp3.internal.http2.c$a.e` @AccessFlag ;
  `int` `okhttp3.internal.http2.c$a.f` @AccessFlag ;
  `int` `okhttp3.internal.http2.c$a.g` @AccessFlag ;
  `int` `okhttp3.internal.http2.c$a.h` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.internal.http2.c$a` v1 @kind this, `int` v2 , `int` v3 , `i.z` v4 @kind object) @signature `Lokhttp3/internal/http2/c$a;.<init>:(IILi/z;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L205b18.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L205b1e.  v0:= new `java.util.ArrayList`;
  #L205b22.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L205b28.  v1.`okhttp3.internal.http2.c$a.a` @type ^`java.util.List` := v0 @kind object;
  #L205b2c.  v0:= 8I;
  #L205b30.  v0:= new `okhttp3.internal.http2.b`[v0];
  #L205b34.  v1.`okhttp3.internal.http2.c$a.e` @type ^`okhttp3.internal.http2.b`[] := v0 @kind object;
  #L205b38.  v0:= v1.`okhttp3.internal.http2.c$a.e` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L205b3c.  v0:= length @variable v0;
  #L205b3e.  v0:= v0 + -1;
  #L205b42.  v1.`okhttp3.internal.http2.c$a.f` @type ^`int` := v0;
  #L205b46.  v0:= 0I;
  #L205b48.  v1.`okhttp3.internal.http2.c$a.g` @type ^`int` := v0;
  #L205b4c.  v1.`okhttp3.internal.http2.c$a.h` @type ^`int` := v0;
  #L205b50.  v1.`okhttp3.internal.http2.c$a.c` @type ^`int` := v2;
  #L205b54.  v1.`okhttp3.internal.http2.c$a.d` @type ^`int` := v3;
  #L205b58.  call temp:= `buffer`(v4) @signature `Li/p;.buffer:(Li/z;)Li/g;` @kind static;
  #L205b5e.  v2:= temp @kind object;
  #L205b60.  v1.`okhttp3.internal.http2.c$a.b` @type ^`i.g` := v2 @kind object;
  #L205b64.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.c$a` v0 @kind this, `int` v1 , `i.z` v2 @kind object) @signature `Lokhttp3/internal/http2/c$a;.<init>:(ILi/z;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L205b78.  call `<init>`(v0, v1, v1, v2) @signature `Lokhttp3/internal/http2/c$a;.<init>:(IILi/z;)V` @kind direct;
  #L205b7e.  return @kind void;
}
procedure `int` `a`(`okhttp3.internal.http2.c$a` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/c$a;.a:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2058e4.  v0:= v1.`okhttp3.internal.http2.c$a.f` @type ^`int`;
  #L2058e8.  v0:= v0 + 1;
  #L2058ec.  v0:= v0 + v2 @kind int;
  #L2058ee.  return v0;
}
procedure `void` `a`(`okhttp3.internal.http2.c$a` v5 @kind this, `int` v6 , `okhttp3.internal.http2.b` v7 @kind object) @signature `Lokhttp3/internal/http2/c$a;.a:(ILokhttp3/internal/http2/b;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L205bfc.  v0:= v5.`okhttp3.internal.http2.c$a.a` @type ^`java.util.List` @kind object;
  #L205c00.  call temp:= `add`(v0, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L205c06.  v0:= v7.`okhttp3.internal.http2.b.c` @type ^`int`;
  #L205c0a.  v1:= -1I;
  #L205c0c.  if v6 == v1 then goto L205c26;
  #L205c10.  v2:= v5.`okhttp3.internal.http2.c$a.e` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L205c14.  call temp:= `a`(v5, v6) @signature `Lokhttp3/internal/http2/c$a;.a:(I)I` @kind direct;
  #L205c1a.  v3:= temp;
  #L205c1c.  v2:= v2[v3] @kind object;
  #L205c20.  v2:= v2.`okhttp3.internal.http2.b.c` @type ^`int`;
  #L205c24.  v0:= v0 - v2 @kind int;
  #L205c26.  v2:= v5.`okhttp3.internal.http2.c$a.d` @type ^`int`;
  #L205c2a.  if v0 <= v2 then goto L205c36;
  #L205c2e.  call `d`(v5) @signature `Lokhttp3/internal/http2/c$a;.d:()V` @kind direct;
  #L205c34.  return @kind void;
  #L205c36.  v3:= v5.`okhttp3.internal.http2.c$a.h` @type ^`int`;
  #L205c3a.  v3:= v3 + v0 @kind int;
  #L205c3c.  v3:= v3 - v2 @kind int;
  #L205c3e.  call temp:= `b`(v5, v3) @signature `Lokhttp3/internal/http2/c$a;.b:(I)I` @kind direct;
  #L205c44.  v2:= temp;
  #L205c46.  if v6 != v1 then goto L205ca6;
  #L205c4a.  v6:= v5.`okhttp3.internal.http2.c$a.g` @type ^`int`;
  #L205c4e.  v6:= v6 + 1;
  #L205c52.  v1:= v5.`okhttp3.internal.http2.c$a.e` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L205c56.  v2:= length @variable v1;
  #L205c58.  if v6 <= v2 then goto L205c84;
  #L205c5c.  v6:= length @variable v1;
  #L205c5e.  v6:= v6 * 2;
  #L205c62.  v6:= new `okhttp3.internal.http2.b`[v6];
  #L205c66.  v2:= 0I;
  #L205c68.  v3:= length @variable v1;
  #L205c6a.  v4:= length @variable v1;
  #L205c6c.  call `arraycopy`(v1, v2, v6, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L205c72.  v1:= v5.`okhttp3.internal.http2.c$a.e` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L205c76.  v1:= length @variable v1;
  #L205c78.  v1:= v1 + -1;
  #L205c7c.  v5.`okhttp3.internal.http2.c$a.f` @type ^`int` := v1;
  #L205c80.  v5.`okhttp3.internal.http2.c$a.e` @type ^`okhttp3.internal.http2.b`[] := v6 @kind object;
  #L205c84.  v6:= v5.`okhttp3.internal.http2.c$a.f` @type ^`int`;
  #L205c88.  v1:= v6 + -1;
  #L205c8c.  v5.`okhttp3.internal.http2.c$a.f` @type ^`int` := v1;
  #L205c90.  v1:= v5.`okhttp3.internal.http2.c$a.e` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L205c94.  v1[v6]:= v7 @kind object;
  #L205c98.  v6:= v5.`okhttp3.internal.http2.c$a.g` @type ^`int`;
  #L205c9c.  v6:= v6 + 1;
  #L205ca0.  v5.`okhttp3.internal.http2.c$a.g` @type ^`int` := v6;
  #L205ca4.  goto L205cba;
  #L205ca6.  call temp:= `a`(v5, v6) @signature `Lokhttp3/internal/http2/c$a;.a:(I)I` @kind direct;
  #L205cac.  v1:= temp;
  #L205cae.  v1:= v1 + v2 @kind int;
  #L205cb0.  v6:= v6 + v1 @kind int;
  #L205cb2.  v1:= v5.`okhttp3.internal.http2.c$a.e` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L205cb6.  v1[v6]:= v7 @kind object;
  #L205cba.  v6:= v5.`okhttp3.internal.http2.c$a.h` @type ^`int`;
  #L205cbe.  v6:= v6 + v0 @kind int;
  #L205cc0.  v5.`okhttp3.internal.http2.c$a.h` @type ^`int` := v6;
  #L205cc4.  return @kind void;
}
procedure `int` `b`(`okhttp3.internal.http2.c$a` v4 @kind this, `int` v5 ) @signature `Lokhttp3/internal/http2/c$a;.b:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L205900.  v0:= 0I;
  #L205902.  if v5 <= 0 then goto L205978;
  #L205906.  v1:= v4.`okhttp3.internal.http2.c$a.e` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L20590a.  v1:= length @variable v1;
  #L20590c.  v1:= v1 + -1;
  #L205910.  v2:= v4.`okhttp3.internal.http2.c$a.f` @type ^`int`;
  #L205914.  if v1 < v2 then goto L205952;
  #L205918.  if v5 <= 0 then goto L205952;
  #L20591c.  v2:= v4.`okhttp3.internal.http2.c$a.e` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L205920.  v3:= v2[v1] @kind object;
  #L205924.  v3:= v3.`okhttp3.internal.http2.b.c` @type ^`int`;
  #L205928.  v5:= v5 - v3 @kind int;
  #L20592a.  v3:= v4.`okhttp3.internal.http2.c$a.h` @type ^`int`;
  #L20592e.  v2:= v2[v1] @kind object;
  #L205932.  v2:= v2.`okhttp3.internal.http2.b.c` @type ^`int`;
  #L205936.  v3:= v3 - v2 @kind int;
  #L205938.  v4.`okhttp3.internal.http2.c$a.h` @type ^`int` := v3;
  #L20593c.  v2:= v4.`okhttp3.internal.http2.c$a.g` @type ^`int`;
  #L205940.  v2:= v2 + -1;
  #L205944.  v4.`okhttp3.internal.http2.c$a.g` @type ^`int` := v2;
  #L205948.  v0:= v0 + 1;
  #L20594c.  v1:= v1 + -1;
  #L205950.  goto L205910;
  #L205952.  v5:= v4.`okhttp3.internal.http2.c$a.e` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L205956.  v1:= v4.`okhttp3.internal.http2.c$a.f` @type ^`int`;
  #L20595a.  v2:= v1 + 1;
  #L20595e.  v1:= v1 + 1;
  #L205962.  v1:= v1 + v0 @kind int;
  #L205964.  v3:= v4.`okhttp3.internal.http2.c$a.g` @type ^`int`;
  #L205968.  call `arraycopy`(v5, v2, v5, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L20596e.  v5:= v4.`okhttp3.internal.http2.c$a.f` @type ^`int`;
  #L205972.  v5:= v5 + v0 @kind int;
  #L205974.  v4.`okhttp3.internal.http2.c$a.f` @type ^`int` := v5;
  #L205978.  return v0;
}
procedure `i.h` `c`(`okhttp3.internal.http2.c$a` v3 @kind this, `int` v4 ) @signature `Lokhttp3/internal/http2/c$a;.c:(I)Li/h;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L205a1c.  call temp:= `d`(v3, v4) @signature `Lokhttp3/internal/http2/c$a;.d:(I)Z` @kind direct;
  #L205a22.  v0:= temp;
  #L205a24.  if v0 == 0 then goto L205a36;
  #L205a28.  v0:= `@@okhttp3.internal.http2.c.a` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L205a2c.  v4:= v0[v4] @kind object;
  #L205a30.  v4:= v4.`okhttp3.internal.http2.b.a` @type ^`i.h` @kind object;
  #L205a34.  return v4 @kind object;
  #L205a36.  v0:= `@@okhttp3.internal.http2.c.a` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L205a3a.  v0:= length @variable v0;
  #L205a3c.  v0:= v4 - v0 @kind int;
  #L205a40.  call temp:= `a`(v3, v0) @signature `Lokhttp3/internal/http2/c$a;.a:(I)I` @kind direct;
  #L205a46.  v0:= temp;
  #L205a48.  if v0 < 0 then goto L205a60;
  #L205a4c.  v1:= v3.`okhttp3.internal.http2.c$a.e` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L205a50.  v2:= length @variable v1;
  #L205a52.  if v0 >= v2 then goto L205a60;
  #L205a56.  v4:= v1[v0] @kind object;
  #L205a5a.  v4:= v4.`okhttp3.internal.http2.b.a` @type ^`i.h` @kind object;
  #L205a5e.  return v4 @kind object;
  #L205a60.  v0:= new `java.io.IOException`;
  #L205a64.  v1:= new `java.lang.StringBuilder`;
  #L205a68.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L205a6e.  v2:= "Header index too large " @kind object;
  #L205a72.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L205a78.  v4:= v4 + 1;
  #L205a7c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L205a82.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L205a88.  v4:= temp @kind object;
  #L205a8a.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L205a90.  throw v0;
}
procedure `void` `c`(`okhttp3.internal.http2.c$a` v2 @kind this) @signature `Lokhttp3/internal/http2/c$a;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L205b90.  v0:= v2.`okhttp3.internal.http2.c$a.d` @type ^`int`;
  #L205b94.  v1:= v2.`okhttp3.internal.http2.c$a.h` @type ^`int`;
  #L205b98.  if v0 >= v1 then goto L205bb0;
  #L205b9c.  if v0 != 0 then goto L205ba8;
  #L205ba0.  call `d`(v2) @signature `Lokhttp3/internal/http2/c$a;.d:()V` @kind direct;
  #L205ba6.  goto L205bb0;
  #L205ba8.  v1:= v1 - v0 @kind int;
  #L205baa.  call temp:= `b`(v2, v1) @signature `Lokhttp3/internal/http2/c$a;.b:(I)I` @kind direct;
  #L205bb0.  return @kind void;
}
procedure `void` `d`(`okhttp3.internal.http2.c$a` v2 @kind this) @signature `Lokhttp3/internal/http2/c$a;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L205bc4.  v0:= v2.`okhttp3.internal.http2.c$a.e` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L205bc8.  v1:= 0I;
  #L205bca.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L205bd0.  v0:= v2.`okhttp3.internal.http2.c$a.e` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L205bd4.  v0:= length @variable v0;
  #L205bd6.  v0:= v0 + -1;
  #L205bda.  v2.`okhttp3.internal.http2.c$a.f` @type ^`int` := v0;
  #L205bde.  v0:= 0I;
  #L205be0.  v2.`okhttp3.internal.http2.c$a.g` @type ^`int` := v0;
  #L205be4.  v2.`okhttp3.internal.http2.c$a.h` @type ^`int` := v0;
  #L205be8.  return @kind void;
}
procedure `boolean` `d`(`okhttp3.internal.http2.c$a` v2 @kind this, `int` v3 ) @signature `Lokhttp3/internal/http2/c$a;.d:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2058bc.  v0:= 1I;
  #L2058be.  if v3 < 0 then goto L2058d0;
  #L2058c2.  v1:= `@@okhttp3.internal.http2.c.a` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L2058c6.  v1:= length @variable v1;
  #L2058c8.  v1:= v1 - v0 @kind int;
  #L2058ca.  if v3 > v1 then goto L2058d0;
  #L2058ce.  goto L2058d2;
  #L2058d0.  v0:= 0I;
  #L2058d2.  return v0;
}
procedure `int` `e`(`okhttp3.internal.http2.c$a` v1 @kind this) @signature `Lokhttp3/internal/http2/c$a;.e:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L20598c.  v0:= v1.`okhttp3.internal.http2.c$a.b` @type ^`i.g` @kind object;
  #L205990.  call temp:= `readByte`(v0) @signature `Li/g;.readByte:()B` @kind interface;
  #L205996.  v0:= temp;
  #L205998.  v0:= v0 ^& 255;
  #L20599c.  return v0;
}
procedure `void` `e`(`okhttp3.internal.http2.c$a` v3 @kind this, `int` v4 ) @signature `Lokhttp3/internal/http2/c$a;.e:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L205e0c.  call temp:= `d`(v3, v4) @signature `Lokhttp3/internal/http2/c$a;.d:(I)Z` @kind direct;
  #L205e12.  v0:= temp;
  #L205e14.  if v0 == 0 then goto L205e2c;
  #L205e18.  v0:= `@@okhttp3.internal.http2.c.a` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L205e1c.  v4:= v0[v4] @kind object;
  #L205e20.  v0:= v3.`okhttp3.internal.http2.c$a.a` @type ^`java.util.List` @kind object;
  #L205e24.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L205e2a.  goto L205e5a;
  #L205e2c.  v0:= `@@okhttp3.internal.http2.c.a` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L205e30.  v0:= length @variable v0;
  #L205e32.  v0:= v4 - v0 @kind int;
  #L205e36.  call temp:= `a`(v3, v0) @signature `Lokhttp3/internal/http2/c$a;.a:(I)I` @kind direct;
  #L205e3c.  v0:= temp;
  #L205e3e.  if v0 < 0 then goto L205e5c;
  #L205e42.  v1:= v3.`okhttp3.internal.http2.c$a.e` @type ^`okhttp3.internal.http2.b`[] @kind object;
  #L205e46.  v2:= length @variable v1;
  #L205e48.  if v0 >= v2 then goto L205e5c;
  #L205e4c.  v4:= v3.`okhttp3.internal.http2.c$a.a` @type ^`java.util.List` @kind object;
  #L205e50.  v0:= v1[v0] @kind object;
  #L205e54.  call temp:= `add`(v4, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L205e5a.  return @kind void;
  #L205e5c.  v0:= new `java.io.IOException`;
  #L205e60.  v1:= new `java.lang.StringBuilder`;
  #L205e64.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L205e6a.  v2:= "Header index too large " @kind object;
  #L205e6e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L205e74.  v4:= v4 + 1;
  #L205e78.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L205e7e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L205e84.  v4:= temp @kind object;
  #L205e86.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L205e8c.  throw v0;
}
procedure `void` `f`(`okhttp3.internal.http2.c$a` v3 @kind this) @signature `Lokhttp3/internal/http2/c$a;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L205ed4.  call temp:= `a`(v3) @signature `Lokhttp3/internal/http2/c$a;.a:()Li/h;` @kind virtual;
  #L205eda.  v0:= temp @kind object;
  #L205edc.  call temp:= `a`(v0) @signature `Lokhttp3/internal/http2/c;.a:(Li/h;)Li/h;` @kind static;
  #L205ee2.  call temp:= `a`(v3) @signature `Lokhttp3/internal/http2/c$a;.a:()Li/h;` @kind virtual;
  #L205ee8.  v1:= temp @kind object;
  #L205eea.  v2:= new `okhttp3.internal.http2.b`;
  #L205eee.  call `<init>`(v2, v0, v1) @signature `Lokhttp3/internal/http2/b;.<init>:(Li/h;Li/h;)V` @kind direct;
  #L205ef4.  v0:= -1I;
  #L205ef6.  call `a`(v3, v0, v2) @signature `Lokhttp3/internal/http2/c$a;.a:(ILokhttp3/internal/http2/b;)V` @kind direct;
  #L205efc.  return @kind void;
}
procedure `void` `f`(`okhttp3.internal.http2.c$a` v2 @kind this, `int` v3 ) @signature `Lokhttp3/internal/http2/c$a;.f:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L205ea0.  call temp:= `c`(v2, v3) @signature `Lokhttp3/internal/http2/c$a;.c:(I)Li/h;` @kind direct;
  #L205ea6.  v3:= temp @kind object;
  #L205ea8.  call temp:= `a`(v2) @signature `Lokhttp3/internal/http2/c$a;.a:()Li/h;` @kind virtual;
  #L205eae.  v0:= temp @kind object;
  #L205eb0.  v1:= new `okhttp3.internal.http2.b`;
  #L205eb4.  call `<init>`(v1, v3, v0) @signature `Lokhttp3/internal/http2/b;.<init>:(Li/h;Li/h;)V` @kind direct;
  #L205eba.  v3:= -1I;
  #L205ebc.  call `a`(v2, v3, v1) @signature `Lokhttp3/internal/http2/c$a;.a:(ILokhttp3/internal/http2/b;)V` @kind direct;
  #L205ec2.  return @kind void;
}
procedure `void` `g`(`okhttp3.internal.http2.c$a` v4 @kind this) @signature `Lokhttp3/internal/http2/c$a;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L205f48.  call temp:= `a`(v4) @signature `Lokhttp3/internal/http2/c$a;.a:()Li/h;` @kind virtual;
  #L205f4e.  v0:= temp @kind object;
  #L205f50.  call temp:= `a`(v0) @signature `Lokhttp3/internal/http2/c;.a:(Li/h;)Li/h;` @kind static;
  #L205f56.  call temp:= `a`(v4) @signature `Lokhttp3/internal/http2/c$a;.a:()Li/h;` @kind virtual;
  #L205f5c.  v1:= temp @kind object;
  #L205f5e.  v2:= v4.`okhttp3.internal.http2.c$a.a` @type ^`java.util.List` @kind object;
  #L205f62.  v3:= new `okhttp3.internal.http2.b`;
  #L205f66.  call `<init>`(v3, v0, v1) @signature `Lokhttp3/internal/http2/b;.<init>:(Li/h;Li/h;)V` @kind direct;
  #L205f6c.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L205f72.  return @kind void;
}
procedure `void` `g`(`okhttp3.internal.http2.c$a` v3 @kind this, `int` v4 ) @signature `Lokhttp3/internal/http2/c$a;.g:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L205f10.  call temp:= `c`(v3, v4) @signature `Lokhttp3/internal/http2/c$a;.c:(I)Li/h;` @kind direct;
  #L205f16.  v4:= temp @kind object;
  #L205f18.  call temp:= `a`(v3) @signature `Lokhttp3/internal/http2/c$a;.a:()Li/h;` @kind virtual;
  #L205f1e.  v0:= temp @kind object;
  #L205f20.  v1:= v3.`okhttp3.internal.http2.c$a.a` @type ^`java.util.List` @kind object;
  #L205f24.  v2:= new `okhttp3.internal.http2.b`;
  #L205f28.  call `<init>`(v2, v4, v0) @signature `Lokhttp3/internal/http2/b;.<init>:(Li/h;Li/h;)V` @kind direct;
  #L205f2e.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L205f34.  return @kind void;
}
procedure `int` `a`(`okhttp3.internal.http2.c$a` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lokhttp3/internal/http2/c$a;.a:(II)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2059b0.  v3:= v3 ^& v4 @kind int;
  #L2059b2.  if v3 >= v4 then goto L2059b8;
  #L2059b6.  return v3;
  #L2059b8.  v3:= 0I;
  #L2059ba.  call temp:= `e`(v2) @signature `Lokhttp3/internal/http2/c$a;.e:()I` @kind direct;
  #L2059c0.  v0:= temp;
  #L2059c2.  v1:= v0 ^& 128;
  #L2059c6.  if v1 == 0 then goto L2059d8;
  #L2059ca.  v0:= v0 ^& 127;
  #L2059ce.  v0:= v0 ^< v3 @kind int;
  #L2059d0.  v4:= v4 + v0 @kind int;
  #L2059d2.  v3:= v3 + 7;
  #L2059d6.  goto L2059ba;
  #L2059d8.  v3:= v0 ^< v3 @kind int;
  #L2059dc.  v4:= v4 + v3 @kind int;
  #L2059de.  return v4;
}
procedure `i.h` `a`(`okhttp3.internal.http2.c$a` v5 @kind this) @signature `Lokhttp3/internal/http2/c$a;.a:()Li/h;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L205aa4.  call temp:= `e`(v5) @signature `Lokhttp3/internal/http2/c$a;.e:()I` @kind direct;
  #L205aaa.  v0:= temp;
  #L205aac.  v1:= v0 ^& 128;
  #L205ab0.  v2:= 128I;
  #L205ab4.  if v1 != v2 then goto L205abc;
  #L205ab8.  v1:= 1I;
  #L205aba.  goto L205abe;
  #L205abc.  v1:= 0I;
  #L205abe.  v2:= 127I;
  #L205ac2.  call temp:= `a`(v5, v0, v2) @signature `Lokhttp3/internal/http2/c$a;.a:(II)I` @kind virtual;
  #L205ac8.  v0:= temp;
  #L205aca.  if v1 == 0 then goto L205af6;
  #L205ace.  call temp:= `get`() @signature `Lokhttp3/internal/http2/j;.get:()Lokhttp3/internal/http2/j;` @kind static;
  #L205ad4.  v1:= temp @kind object;
  #L205ad6.  v2:= v5.`okhttp3.internal.http2.c$a.b` @type ^`i.g` @kind object;
  #L205ada.  v3:= (`long`) v0 @kind i2l;
  #L205adc.  call temp:= `readByteArray`(v2, v3) @signature `Li/g;.readByteArray:(J)[B` @kind interface;
  #L205ae2.  v0:= temp @kind object;
  #L205ae4.  call temp:= `a`(v1, v0) @signature `Lokhttp3/internal/http2/j;.a:([B)[B` @kind virtual;
  #L205aea.  v0:= temp @kind object;
  #L205aec.  call temp:= `of`(v0) @signature `Li/h;.of:([B)Li/h;` @kind static;
  #L205af2.  v0:= temp @kind object;
  #L205af4.  return v0 @kind object;
  #L205af6.  v1:= v5.`okhttp3.internal.http2.c$a.b` @type ^`i.g` @kind object;
  #L205afa.  v2:= (`long`) v0 @kind i2l;
  #L205afc.  call temp:= `readByteString`(v1, v2) @signature `Li/g;.readByteString:(J)Li/h;` @kind interface;
  #L205b02.  v0:= temp @kind object;
  #L205b04.  return v0 @kind object;
}
procedure `void` `b`(`okhttp3.internal.http2.c$a` v3 @kind this) @signature `Lokhttp3/internal/http2/c$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L205cd8.  v0:= v3.`okhttp3.internal.http2.c$a.b` @type ^`i.g` @kind object;
  #L205cdc.  call temp:= `exhausted`(v0) @signature `Li/g;.exhausted:()Z` @kind interface;
  #L205ce2.  v0:= temp;
  #L205ce4.  if v0 != 0 then goto L205df8;
  #L205ce8.  v0:= v3.`okhttp3.internal.http2.c$a.b` @type ^`i.g` @kind object;
  #L205cec.  call temp:= `readByte`(v0) @signature `Li/g;.readByte:()B` @kind interface;
  #L205cf2.  v0:= temp;
  #L205cf4.  v0:= v0 ^& 255;
  #L205cf8.  v1:= 128I;
  #L205cfc.  if v0 == v1 then goto L205de8;
  #L205d00.  v2:= v0 ^& 128;
  #L205d04.  if v2 != v1 then goto L205d20;
  #L205d08.  v1:= 127I;
  #L205d0c.  call temp:= `a`(v3, v0, v1) @signature `Lokhttp3/internal/http2/c$a;.a:(II)I` @kind virtual;
  #L205d12.  v0:= temp;
  #L205d14.  v0:= v0 + -1;
  #L205d18.  call `e`(v3, v0) @signature `Lokhttp3/internal/http2/c$a;.e:(I)V` @kind direct;
  #L205d1e.  goto L205cd8;
  #L205d20.  v1:= 64I;
  #L205d24.  if v0 != v1 then goto L205d30;
  #L205d28.  call `f`(v3) @signature `Lokhttp3/internal/http2/c$a;.f:()V` @kind direct;
  #L205d2e.  goto L205cd8;
  #L205d30.  v2:= v0 ^& 64;
  #L205d34.  if v2 != v1 then goto L205d50;
  #L205d38.  v1:= 63I;
  #L205d3c.  call temp:= `a`(v3, v0, v1) @signature `Lokhttp3/internal/http2/c$a;.a:(II)I` @kind virtual;
  #L205d42.  v0:= temp;
  #L205d44.  v0:= v0 + -1;
  #L205d48.  call `f`(v3, v0) @signature `Lokhttp3/internal/http2/c$a;.f:(I)V` @kind direct;
  #L205d4e.  goto L205cd8;
  #L205d50.  v1:= v0 ^& 32;
  #L205d54.  v2:= 32I;
  #L205d58.  if v1 != v2 then goto L205db6;
  #L205d5c.  v1:= 31I;
  #L205d60.  call temp:= `a`(v3, v0, v1) @signature `Lokhttp3/internal/http2/c$a;.a:(II)I` @kind virtual;
  #L205d66.  v0:= temp;
  #L205d68.  v3.`okhttp3.internal.http2.c$a.d` @type ^`int` := v0;
  #L205d6c.  v0:= v3.`okhttp3.internal.http2.c$a.d` @type ^`int`;
  #L205d70.  if v0 < 0 then goto L205d84;
  #L205d74.  v1:= v3.`okhttp3.internal.http2.c$a.c` @type ^`int`;
  #L205d78.  if v0 > v1 then goto L205d84;
  #L205d7c.  call `c`(v3) @signature `Lokhttp3/internal/http2/c$a;.c:()V` @kind direct;
  #L205d82.  goto L205cd8;
  #L205d84.  v0:= new `java.io.IOException`;
  #L205d88.  v1:= new `java.lang.StringBuilder`;
  #L205d8c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L205d92.  v2:= "Invalid dynamic table size update " @kind object;
  #L205d96.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L205d9c.  v2:= v3.`okhttp3.internal.http2.c$a.d` @type ^`int`;
  #L205da0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L205da6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L205dac.  v1:= temp @kind object;
  #L205dae.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L205db4.  throw v0;
  #L205db6.  v1:= 16I;
  #L205dba.  if v0 == v1 then goto L205dde;
  #L205dbe.  if v0 != 0 then goto L205dc4;
  #L205dc2.  goto L205dde;
  #L205dc4.  v1:= 15I;
  #L205dc8.  call temp:= `a`(v3, v0, v1) @signature `Lokhttp3/internal/http2/c$a;.a:(II)I` @kind virtual;
  #L205dce.  v0:= temp;
  #L205dd0.  v0:= v0 + -1;
  #L205dd4.  call `g`(v3, v0) @signature `Lokhttp3/internal/http2/c$a;.g:(I)V` @kind direct;
  #L205dda.  goto L205cd8;
  #L205dde.  call `g`(v3) @signature `Lokhttp3/internal/http2/c$a;.g:()V` @kind direct;
  #L205de4.  goto L205cd8;
  #L205de8.  v0:= new `java.io.IOException`;
  #L205dec.  v1:= "index == 0" @kind object;
  #L205df0.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L205df6.  throw v0;
  #L205df8.  return @kind void;
}
procedure `java.util.List` `getAndResetHeaderList`(`okhttp3.internal.http2.c$a` v2 @kind this) @signature `Lokhttp3/internal/http2/c$a;.getAndResetHeaderList:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2059f0.  v0:= new `java.util.ArrayList`;
  #L2059f4.  v1:= v2.`okhttp3.internal.http2.c$a.a` @type ^`java.util.List` @kind object;
  #L2059f8.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L2059fe.  v1:= v2.`okhttp3.internal.http2.c$a.a` @type ^`java.util.List` @kind object;
  #L205a02.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L205a08.  return v0 @kind object;
}
