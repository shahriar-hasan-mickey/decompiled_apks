record `g.a.a` @kind class @AccessFlag PUBLIC extends `javax.annotation.processing.AbstractProcessor` @kind class {
}
procedure `void` `<init>`(`g.a.a` v0 @kind this) @signature `Lg/a/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1ecff4.  call `<init>`(v0) @signature `Ljavax/annotation/processing/AbstractProcessor;.<init>:()V` @kind direct;
  #L1ecffa.  call temp:= `a`() @signature `Lg/a/a;.a:()Ljavax/annotation/processing/AbstractProcessor;` @kind static;
  #L1ed000.  return @kind void;
}
procedure `javax.annotation.processing.AbstractProcessor` `a`() @signature `Lg/a/a;.a:()Ljavax/annotation/processing/AbstractProcessor;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1ecf78.  call temp:= `a`() @signature `Lg/a/d;.a:()Ljava/lang/ClassLoader;` @kind static;
  #L1ecf7e.  v0:= temp @kind object;
  #L1ecf80.  v1:= "lombok.core.AnnotationProcessor" @kind object;
  #L1ecf84.  call temp:= `loadClass`(v0, v1) @signature `Ljava/lang/ClassLoader;.loadClass:(Ljava/lang/String;)Ljava/lang/Class;` @kind virtual;
  #L1ecf8a.  v0:= temp @kind object;
  #L1ecf8c.  v1:= 0I;
  #L1ecf8e.  v2:= new `java.lang.Class`[v1];
  #L1ecf92.  call temp:= `getDeclaredConstructor`(v0, v2) @signature `Ljava/lang/Class;.getDeclaredConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L1ecf98.  v0:= temp @kind object;
  #L1ecf9a.  v1:= new `java.lang.Object`[v1];
  #L1ecf9e.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1ecfa4.  v0:= temp @kind object;
  #L1ecfa6.  v0:= (`javax.annotation.processing.AbstractProcessor`) v0 @kind object;
  #L1ecfaa.  return v0 @kind object;
  #L1ecfac.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ecfae.  v1:= instanceof @variable v0 @type ^`java.lang.Error` @kind boolean;
  #L1ecfb2.  if v1 != 0 then goto L1ecfd0;
  #L1ecfb6.  v1:= instanceof @variable v0 @type ^`java.lang.RuntimeException` @kind boolean;
  #L1ecfba.  if v1 == 0 then goto L1ecfc4;
  #L1ecfbe.  v0:= (`java.lang.RuntimeException`) v0 @kind object;
  #L1ecfc2.  throw v0;
  #L1ecfc4.  v1:= new `java.lang.RuntimeException`;
  #L1ecfc8.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1ecfce.  throw v1;
  #L1ecfd0.  v0:= (`java.lang.Error`) v0 @kind object;
  #L1ecfd4.  throw v0;
  catch `java.lang.Throwable` @[L1ecf80..L1ecfaa] goto L1ecfac;
}
