record `kotlin.r.v` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.List` @kind interface, `java.io.Serializable` @kind interface, `java.util.RandomAccess` @kind interface, `kotlin.v.c.q.a` @kind interface {
}
global `kotlin.r.v` `@@kotlin.r.v.f` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlin.r.v.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/r/v;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d798c.  v0:= new `kotlin.r.v`;
  #L1d7990.  call `<init>`(v0) @signature `Lkotlin/r/v;.<init>:()V` @kind direct;
  #L1d7996.  `@@kotlin.r.v.f` @type ^`kotlin.r.v` := v0 @kind object;
  #L1d799a.  return @kind void;
}
procedure `void` `<init>`(`kotlin.r.v` v0 @kind this) @signature `Lkotlin/r/v;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1d79ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d79b2.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`kotlin.r.v` v1 @kind this) @signature `Lkotlin/r/v;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1d77cc.  v0:= `@@kotlin.r.v.f` @type ^`kotlin.r.v` @kind object;
  #L1d77d0.  return v0 @kind object;
}
procedure `void` `add`(`kotlin.r.v` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/v;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1d79c4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1d79c8.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L1d79cc.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d79d2.  throw v1;
}
procedure `boolean` `add`(`kotlin.r.v` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/v;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1d7560.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d7564.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d7568.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d756e.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.r.v` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Lkotlin/r/v;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L1d7580.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1d7584.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L1d7588.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d758e.  throw v1;
}
procedure `boolean` `addAll`(`kotlin.r.v` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/r/v;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d75a0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d75a4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d75a8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d75ae.  throw v2;
}
procedure `void` `clear`(`kotlin.r.v` v2 @kind this) @signature `Lkotlin/r/v;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d79e4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1d79e8.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L1d79ec.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d79f2.  throw v0;
}
procedure `boolean` `contains`(`kotlin.r.v` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/v;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d75c0.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L1d75c4.  if v0 == 0 then goto L1d75d6;
  #L1d75c8.  v2:= (`java.lang.Void`) v2 @kind object;
  #L1d75cc.  call temp:= `contains`(v1, v2) @signature `Lkotlin/r/v;.contains:(Ljava/lang/Void;)Z` @kind virtual;
  #L1d75d2.  v2:= temp;
  #L1d75d4.  return v2;
  #L1d75d6.  v2:= 0I;
  #L1d75d8.  return v2;
}
procedure `boolean` `contains`(`kotlin.r.v` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkotlin/r/v;.contains:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d75ec.  v0:= "element" @kind object;
  #L1d75f0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d75f6.  v2:= 0I;
  #L1d75f8.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.r.v` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/r/v;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d760c.  v0:= "elements" @kind object;
  #L1d7610.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d7616.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L1d761c.  v2:= temp;
  #L1d761e.  return v2;
}
procedure `boolean` `equals`(`kotlin.r.v` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/v;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7630.  v0:= instanceof @variable v2 @type ^`java.util.List` @kind boolean;
  #L1d7634.  if v0 == 0 then goto L1d764c;
  #L1d7638.  v2:= (`java.util.List`) v2 @kind object;
  #L1d763c.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1d7642.  v2:= temp;
  #L1d7644.  if v2 == 0 then goto L1d764c;
  #L1d7648.  v2:= 1I;
  #L1d764a.  goto L1d764e;
  #L1d764c.  v2:= 0I;
  #L1d764e.  return v2;
}
procedure `java.lang.Object` `get`(`kotlin.r.v` v0 @kind this, `int` v1 ) @signature `Lkotlin/r/v;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1d77b0.  call temp:= `get`(v0, v1) @signature `Lkotlin/r/v;.get:(I)Ljava/lang/Void;` @kind virtual;
  #L1d77b6.  v1:= temp @kind object;
  #L1d77b8.  return v1 @kind object;
}
procedure `java.lang.Void` `get`(`kotlin.r.v` v3 @kind this, `int` v4 ) @signature `Lkotlin/r/v;.get:(I)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d7874.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L1d7878.  v1:= new `java.lang.StringBuilder`;
  #L1d787c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d7882.  v2:= "Empty list doesn't contain element at index " @kind object;
  #L1d7886.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d788c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d7892.  v4:= 46I;
  #L1d7896.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d789c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d78a2.  v4:= temp @kind object;
  #L1d78a4.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d78aa.  throw v0;
}
procedure `int` `getSize`(`kotlin.r.v` v1 @kind this) @signature `Lkotlin/r/v;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d76d4.  v0:= 0I;
  #L1d76d6.  return v0;
}
procedure `int` `hashCode`(`kotlin.r.v` v1 @kind this) @signature `Lkotlin/r/v;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d76e8.  v0:= 1I;
  #L1d76ea.  return v0;
}
procedure `int` `indexOf`(`kotlin.r.v` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/v;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d76fc.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L1d7700.  if v0 == 0 then goto L1d7712;
  #L1d7704.  v2:= (`java.lang.Void`) v2 @kind object;
  #L1d7708.  call temp:= `indexOf`(v1, v2) @signature `Lkotlin/r/v;.indexOf:(Ljava/lang/Void;)I` @kind virtual;
  #L1d770e.  v2:= temp;
  #L1d7710.  return v2;
  #L1d7712.  v2:= -1I;
  #L1d7714.  return v2;
}
procedure `int` `indexOf`(`kotlin.r.v` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkotlin/r/v;.indexOf:(Ljava/lang/Void;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7728.  v0:= "element" @kind object;
  #L1d772c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d7732.  v2:= -1I;
  #L1d7734.  return v2;
}
procedure `boolean` `isEmpty`(`kotlin.r.v` v1 @kind this) @signature `Lkotlin/r/v;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7660.  v0:= 1I;
  #L1d7662.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.r.v` v1 @kind this) @signature `Lkotlin/r/v;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d78bc.  v0:= `@@kotlin.r.u.f` @type ^`kotlin.r.u` @kind object;
  #L1d78c0.  return v0 @kind object;
}
procedure `int` `lastIndexOf`(`kotlin.r.v` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/v;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d7748.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L1d774c.  if v0 == 0 then goto L1d775e;
  #L1d7750.  v2:= (`java.lang.Void`) v2 @kind object;
  #L1d7754.  call temp:= `lastIndexOf`(v1, v2) @signature `Lkotlin/r/v;.lastIndexOf:(Ljava/lang/Void;)I` @kind virtual;
  #L1d775a.  v2:= temp;
  #L1d775c.  return v2;
  #L1d775e.  v2:= -1I;
  #L1d7760.  return v2;
}
procedure `int` `lastIndexOf`(`kotlin.r.v` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkotlin/r/v;.lastIndexOf:(Ljava/lang/Void;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7774.  v0:= "element" @kind object;
  #L1d7778.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d777e.  v2:= -1I;
  #L1d7780.  return v2;
}
procedure `java.util.ListIterator` `listIterator`(`kotlin.r.v` v1 @kind this) @signature `Lkotlin/r/v;.listIterator:()Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d792c.  v0:= `@@kotlin.r.u.f` @type ^`kotlin.r.u` @kind object;
  #L1d7930.  return v0 @kind object;
}
procedure `java.util.ListIterator` `listIterator`(`kotlin.r.v` v3 @kind this, `int` v4 ) @signature `Lkotlin/r/v;.listIterator:(I)Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d7944.  if v4 != 0 then goto L1d794e;
  #L1d7948.  v4:= `@@kotlin.r.u.f` @type ^`kotlin.r.u` @kind object;
  #L1d794c.  return v4 @kind object;
  #L1d794e.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L1d7952.  v1:= new `java.lang.StringBuilder`;
  #L1d7956.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d795c.  v2:= "Index: " @kind object;
  #L1d7960.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d7966.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d796c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d7972.  v4:= temp @kind object;
  #L1d7974.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d797a.  throw v0;
}
procedure `java.lang.Object` `remove`(`kotlin.r.v` v1 @kind this, `int` v2 ) @signature `Lkotlin/r/v;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1d77e4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d77e8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d77ec.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d77f2.  throw v2;
}
procedure `boolean` `remove`(`kotlin.r.v` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/v;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7674.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d7678.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d767c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d7682.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.r.v` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/r/v;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7694.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d7698.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d769c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d76a2.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.r.v` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/r/v;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d76b4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d76b8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d76bc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d76c2.  throw v2;
}
procedure `java.lang.Object` `set`(`kotlin.r.v` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/v;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1d7804.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1d7808.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L1d780c.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d7812.  throw v1;
}
procedure `int` `size`(`kotlin.r.v` v1 @kind this) @signature `Lkotlin/r/v;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d7794.  call temp:= `getSize`(v1) @signature `Lkotlin/r/v;.getSize:()I` @kind virtual;
  #L1d779a.  v0:= temp;
  #L1d779c.  return v0;
}
procedure `java.util.List` `subList`(`kotlin.r.v` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lkotlin/r/v;.subList:(II)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d78d4.  if v4 != 0 then goto L1d78de;
  #L1d78d8.  if v5 != 0 then goto L1d78de;
  #L1d78dc.  return v3 @kind object;
  #L1d78de.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L1d78e2.  v1:= new `java.lang.StringBuilder`;
  #L1d78e6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d78ec.  v2:= "fromIndex: " @kind object;
  #L1d78f0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d78f6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d78fc.  v4:= ", toIndex: " @kind object;
  #L1d7900.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d7906.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d790c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d7912.  v4:= temp @kind object;
  #L1d7914.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d791a.  throw v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.r.v` v1 @kind this) @signature `Lkotlin/r/v;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7824.  call temp:= `toArray`(v1) @signature `Lkotlin/v/c/e;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L1d782a.  v0:= temp @kind object;
  #L1d782c.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.r.v` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lkotlin/r/v;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L1d7840.  call temp:= `toArray`(v0, v1) @signature `Lkotlin/v/c/e;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L1d7846.  v1:= temp @kind object;
  #L1d7848.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.r.v` v1 @kind this) @signature `Lkotlin/r/v;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d785c.  v0:= "[]" @kind object;
  #L1d7860.  return v0 @kind object;
}
