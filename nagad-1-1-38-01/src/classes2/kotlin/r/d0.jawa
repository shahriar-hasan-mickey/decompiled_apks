record `kotlin.r.d0` @kind class @AccessFlag  extends `kotlin.r.c0` @kind class {
}
procedure `java.util.Map` `emptyMap`() @signature `Lkotlin/r/d0;.emptyMap:()Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1d8148.  v0:= `@@kotlin.r.w.f` @type ^`kotlin.r.w` @kind object;
  #L1d814c.  if v0 == 0 then goto L1d8152;
  #L1d8150.  return v0 @kind object;
  #L1d8152.  v0:= new `java.lang.NullPointerException`;
  #L1d8156.  v1:= "null cannot be cast to non-null type kotlin.collections.Map<K, V>" @kind object;
  #L1d815a.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d8160.  throw v0;
}
procedure `java.lang.Object` `getValue`(`java.util.Map` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/d0;.getValue:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d80ec.  v0:= "$this$getValue" @kind object;
  #L1d80f0.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d80f6.  call temp:= `getOrImplicitDefaultNullable`(v1, v2) @signature `Lkotlin/r/b0;.getOrImplicitDefaultNullable:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1d80fc.  v1:= temp @kind object;
  #L1d80fe.  return v1 @kind object;
}
procedure `java.util.HashMap` `hashMapOf`(`kotlin.k`[] v2 @kind object) @signature `Lkotlin/r/d0;.hashMapOf:([Lkotlin/k;)Ljava/util/HashMap;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1d8110.  v0:= "pairs" @kind object;
  #L1d8114.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d811a.  v0:= new `java.util.HashMap`;
  #L1d811e.  v1:= length @variable v2;
  #L1d8120.  call temp:= `mapCapacity`(v1) @signature `Lkotlin/r/a0;.mapCapacity:(I)I` @kind static;
  #L1d8126.  v1:= temp;
  #L1d8128.  call `<init>`(v0, v1) @signature `Ljava/util/HashMap;.<init>:(I)V` @kind direct;
  #L1d812e.  call `putAll`(v0, v2) @signature `Lkotlin/r/d0;.putAll:(Ljava/util/Map;[Lkotlin/k;)V` @kind static;
  #L1d8134.  return v0 @kind object;
}
procedure `java.util.Map` `optimizeReadOnlyMap`(`java.util.Map` v2 @kind object) @signature `Lkotlin/r/d0;.optimizeReadOnlyMap:(Ljava/util/Map;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1d8174.  v0:= "$this$optimizeReadOnlyMap" @kind object;
  #L1d8178.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d817e.  call temp:= `size`(v2) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L1d8184.  v0:= temp;
  #L1d8186.  if v0 == 0 then goto L1d819c;
  #L1d818a.  v1:= 1I;
  #L1d818c.  if v0 == v1 then goto L1d8192;
  #L1d8190.  goto L1d81a4;
  #L1d8192.  call temp:= `toSingletonMap`(v2) @signature `Lkotlin/r/c0;.toSingletonMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L1d8198.  v2:= temp @kind object;
  #L1d819a.  goto L1d81a4;
  #L1d819c.  call temp:= `emptyMap`() @signature `Lkotlin/r/d0;.emptyMap:()Ljava/util/Map;` @kind static;
  #L1d81a2.  v2:= temp @kind object;
  #L1d81a4.  return v2 @kind object;
}
procedure `void` `putAll`(`java.util.Map` v2 @kind object, `java.lang.Iterable` v3 @kind object) @signature `Lkotlin/r/d0;.putAll:(Ljava/util/Map;Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1d829c.  v0:= "$this$putAll" @kind object;
  #L1d82a0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d82a6.  v0:= "pairs" @kind object;
  #L1d82aa.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d82b0.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1d82b6.  v3:= temp @kind object;
  #L1d82b8.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d82be.  v0:= temp;
  #L1d82c0.  if v0 == 0 then goto L1d82e8;
  #L1d82c4.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d82ca.  v0:= temp @kind object;
  #L1d82cc.  v0:= (`kotlin.k`) v0 @kind object;
  #L1d82d0.  call temp:= `component1`(v0) @signature `Lkotlin/k;.component1:()Ljava/lang/Object;` @kind virtual;
  #L1d82d6.  v1:= temp @kind object;
  #L1d82d8.  call temp:= `component2`(v0) @signature `Lkotlin/k;.component2:()Ljava/lang/Object;` @kind virtual;
  #L1d82de.  v0:= temp @kind object;
  #L1d82e0.  call temp:= `put`(v2, v1, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1d82e6.  goto L1d82b8;
  #L1d82e8.  return @kind void;
}
procedure `void` `putAll`(`java.util.Map` v4 @kind object, `kotlin.k`[] v5 @kind object) @signature `Lkotlin/r/d0;.putAll:(Ljava/util/Map;[Lkotlin/k;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d82fc.  v0:= "$this$putAll" @kind object;
  #L1d8300.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8306.  v0:= "pairs" @kind object;
  #L1d830a.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8310.  v0:= length @variable v5;
  #L1d8312.  v1:= 0I;
  #L1d8314.  if v1 >= v0 then goto L1d8338;
  #L1d8318.  v2:= v5[v1] @kind object;
  #L1d831c.  call temp:= `component1`(v2) @signature `Lkotlin/k;.component1:()Ljava/lang/Object;` @kind virtual;
  #L1d8322.  v3:= temp @kind object;
  #L1d8324.  call temp:= `component2`(v2) @signature `Lkotlin/k;.component2:()Ljava/lang/Object;` @kind virtual;
  #L1d832a.  v2:= temp @kind object;
  #L1d832c.  call temp:= `put`(v4, v3, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1d8332.  v1:= v1 + 1;
  #L1d8336.  goto L1d8314;
  #L1d8338.  return @kind void;
}
procedure `java.util.Map` `toMap`(`java.lang.Iterable` v3 @kind object) @signature `Lkotlin/r/d0;.toMap:(Ljava/lang/Iterable;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1d81b8.  v0:= "$this$toMap" @kind object;
  #L1d81bc.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d81c2.  v0:= instanceof @variable v3 @type ^`java.util.Collection` @kind boolean;
  #L1d81c6.  if v0 == 0 then goto L1d8244;
  #L1d81ca.  v0:= v3 @kind object;
  #L1d81cc.  v0:= (`java.util.Collection`) v0 @kind object;
  #L1d81d0.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L1d81d6.  v1:= temp;
  #L1d81d8.  if v1 == 0 then goto L1d823a;
  #L1d81dc.  v2:= 1I;
  #L1d81de.  if v1 == v2 then goto L1d8204;
  #L1d81e2.  v1:= new `java.util.LinkedHashMap`;
  #L1d81e6.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L1d81ec.  v0:= temp;
  #L1d81ee.  call temp:= `mapCapacity`(v0) @signature `Lkotlin/r/a0;.mapCapacity:(I)I` @kind static;
  #L1d81f4.  v0:= temp;
  #L1d81f6.  call `<init>`(v1, v0) @signature `Ljava/util/LinkedHashMap;.<init>:(I)V` @kind direct;
  #L1d81fc.  call temp:= `toMap`(v3, v1) @signature `Lkotlin/r/d0;.toMap:(Ljava/lang/Iterable;Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L1d8202.  goto L1d8242;
  #L1d8204.  v0:= instanceof @variable v3 @type ^`java.util.List` @kind boolean;
  #L1d8208.  if v0 == 0 then goto L1d821c;
  #L1d820c.  v3:= (`java.util.List`) v3 @kind object;
  #L1d8210.  v0:= 0I;
  #L1d8212.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1d8218.  v3:= temp @kind object;
  #L1d821a.  goto L1d822c;
  #L1d821c.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1d8222.  v3:= temp @kind object;
  #L1d8224.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d822a.  v3:= temp @kind object;
  #L1d822c.  v3:= (`kotlin.k`) v3 @kind object;
  #L1d8230.  call temp:= `mapOf`(v3) @signature `Lkotlin/r/c0;.mapOf:(Lkotlin/k;)Ljava/util/Map;` @kind static;
  #L1d8236.  v1:= temp @kind object;
  #L1d8238.  goto L1d8242;
  #L1d823a.  call temp:= `emptyMap`() @signature `Lkotlin/r/d0;.emptyMap:()Ljava/util/Map;` @kind static;
  #L1d8240.  v1:= temp @kind object;
  #L1d8242.  return v1 @kind object;
  #L1d8244.  v0:= new `java.util.LinkedHashMap`;
  #L1d8248.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L1d824e.  call temp:= `toMap`(v3, v0) @signature `Lkotlin/r/d0;.toMap:(Ljava/lang/Iterable;Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L1d8254.  call temp:= `optimizeReadOnlyMap`(v0) @signature `Lkotlin/r/d0;.optimizeReadOnlyMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L1d825a.  v3:= temp @kind object;
  #L1d825c.  return v3 @kind object;
}
procedure `java.util.Map` `toMap`(`java.lang.Iterable` v1 @kind object, `java.util.Map` v2 @kind object) @signature `Lkotlin/r/d0;.toMap:(Ljava/lang/Iterable;Ljava/util/Map;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1d8270.  v0:= "$this$toMap" @kind object;
  #L1d8274.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d827a.  v0:= "destination" @kind object;
  #L1d827e.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8284.  call `putAll`(v2, v1) @signature `Lkotlin/r/d0;.putAll:(Ljava/util/Map;Ljava/lang/Iterable;)V` @kind static;
  #L1d828a.  return v2 @kind object;
}
