record `kotlin.r.x` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Set` @kind interface, `java.io.Serializable` @kind interface, `kotlin.v.c.q.a` @kind interface {
}
global `kotlin.r.x` `@@kotlin.r.x.f` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlin.r.x.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/r/x;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d7eb8.  v0:= new `kotlin.r.x`;
  #L1d7ebc.  call `<init>`(v0) @signature `Lkotlin/r/x;.<init>:()V` @kind direct;
  #L1d7ec2.  `@@kotlin.r.x.f` @type ^`kotlin.r.x` := v0 @kind object;
  #L1d7ec6.  return @kind void;
}
procedure `void` `<init>`(`kotlin.r.x` v0 @kind this) @signature `Lkotlin/r/x;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1d7ed8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d7ede.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`kotlin.r.x` v1 @kind this) @signature `Lkotlin/r/x;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1d7e38.  v0:= `@@kotlin.r.x.f` @type ^`kotlin.r.x` @kind object;
  #L1d7e3c.  return v0 @kind object;
}
procedure `boolean` `add`(`kotlin.r.x` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/x;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1d7ca0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d7ca4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d7ca8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d7cae.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.r.x` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/r/x;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7cc0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d7cc4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d7cc8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d7cce.  throw v2;
}
procedure `void` `clear`(`kotlin.r.x` v2 @kind this) @signature `Lkotlin/r/x;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d7ef0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1d7ef4.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L1d7ef8.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d7efe.  throw v0;
}
procedure `boolean` `contains`(`kotlin.r.x` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/x;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d7ce0.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L1d7ce4.  if v0 == 0 then goto L1d7cf6;
  #L1d7ce8.  v2:= (`java.lang.Void`) v2 @kind object;
  #L1d7cec.  call temp:= `contains`(v1, v2) @signature `Lkotlin/r/x;.contains:(Ljava/lang/Void;)Z` @kind virtual;
  #L1d7cf2.  v2:= temp;
  #L1d7cf4.  return v2;
  #L1d7cf6.  v2:= 0I;
  #L1d7cf8.  return v2;
}
procedure `boolean` `contains`(`kotlin.r.x` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkotlin/r/x;.contains:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7d0c.  v0:= "element" @kind object;
  #L1d7d10.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d7d16.  v2:= 0I;
  #L1d7d18.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.r.x` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/r/x;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7d2c.  v0:= "elements" @kind object;
  #L1d7d30.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d7d36.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L1d7d3c.  v2:= temp;
  #L1d7d3e.  return v2;
}
procedure `boolean` `equals`(`kotlin.r.x` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/x;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7d50.  v0:= instanceof @variable v2 @type ^`java.util.Set` @kind boolean;
  #L1d7d54.  if v0 == 0 then goto L1d7d6c;
  #L1d7d58.  v2:= (`java.util.Set`) v2 @kind object;
  #L1d7d5c.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L1d7d62.  v2:= temp;
  #L1d7d64.  if v2 == 0 then goto L1d7d6c;
  #L1d7d68.  v2:= 1I;
  #L1d7d6a.  goto L1d7d6e;
  #L1d7d6c.  v2:= 0I;
  #L1d7d6e.  return v2;
}
procedure `int` `getSize`(`kotlin.r.x` v1 @kind this) @signature `Lkotlin/r/x;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7df4.  v0:= 0I;
  #L1d7df6.  return v0;
}
procedure `int` `hashCode`(`kotlin.r.x` v1 @kind this) @signature `Lkotlin/r/x;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7e08.  v0:= 0I;
  #L1d7e0a.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.r.x` v1 @kind this) @signature `Lkotlin/r/x;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7d80.  v0:= 1I;
  #L1d7d82.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.r.x` v1 @kind this) @signature `Lkotlin/r/x;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7ea0.  v0:= `@@kotlin.r.u.f` @type ^`kotlin.r.u` @kind object;
  #L1d7ea4.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.r.x` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/x;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7d94.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d7d98.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d7d9c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d7da2.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.r.x` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/r/x;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7db4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d7db8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d7dbc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d7dc2.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.r.x` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/r/x;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7dd4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d7dd8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d7ddc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d7de2.  throw v2;
}
procedure `int` `size`(`kotlin.r.x` v1 @kind this) @signature `Lkotlin/r/x;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d7e1c.  call temp:= `getSize`(v1) @signature `Lkotlin/r/x;.getSize:()I` @kind virtual;
  #L1d7e22.  v0:= temp;
  #L1d7e24.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.r.x` v1 @kind this) @signature `Lkotlin/r/x;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7e50.  call temp:= `toArray`(v1) @signature `Lkotlin/v/c/e;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L1d7e56.  v0:= temp @kind object;
  #L1d7e58.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.r.x` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lkotlin/r/x;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L1d7e6c.  call temp:= `toArray`(v0, v1) @signature `Lkotlin/v/c/e;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L1d7e72.  v1:= temp @kind object;
  #L1d7e74.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.r.x` v1 @kind this) @signature `Lkotlin/r/x;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7e88.  v0:= "[]" @kind object;
  #L1d7e8c.  return v0 @kind object;
}
