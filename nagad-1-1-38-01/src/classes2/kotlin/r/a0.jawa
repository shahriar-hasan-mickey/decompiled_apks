record `kotlin.r.a0` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.r.e0` @kind class {
}
procedure `java.lang.Object` `getValue`(`java.util.Map` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lkotlin/r/a0;.getValue:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1d8368.  call temp:= `getValue`(v0, v1) @signature `Lkotlin/r/d0;.getValue:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1d836e.  v0:= temp @kind object;
  #L1d8370.  return v0 @kind object;
}
procedure `java.util.HashMap` `hashMapOf`(`kotlin.k`[] v0 @kind object) @signature `Lkotlin/r/a0;.hashMapOf:([Lkotlin/k;)Ljava/util/HashMap;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1d8384.  call temp:= `hashMapOf`(v0) @signature `Lkotlin/r/d0;.hashMapOf:([Lkotlin/k;)Ljava/util/HashMap;` @kind static;
  #L1d838a.  v0:= temp @kind object;
  #L1d838c.  return v0 @kind object;
}
procedure `int` `mapCapacity`(`int` v0 ) @signature `Lkotlin/r/a0;.mapCapacity:(I)I` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1d834c.  call temp:= `mapCapacity`(v0) @signature `Lkotlin/r/c0;.mapCapacity:(I)I` @kind static;
  #L1d8352.  v0:= temp;
  #L1d8354.  return v0;
}
procedure `java.util.Map` `toMap`(`java.lang.Iterable` v0 @kind object) @signature `Lkotlin/r/a0;.toMap:(Ljava/lang/Iterable;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1d83a0.  call temp:= `toMap`(v0) @signature `Lkotlin/r/d0;.toMap:(Ljava/lang/Iterable;)Ljava/util/Map;` @kind static;
  #L1d83a6.  v0:= temp @kind object;
  #L1d83a8.  return v0 @kind object;
}
