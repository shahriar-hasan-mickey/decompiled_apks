record `kotlin.r.c` @kind class @AccessFlag FINAL extends `java.util.Collection` @kind interface, `kotlin.v.c.q.a` @kind interface {
  `java.lang.Object`[] `kotlin.r.c.f` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.r.c.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.r.c` v1 @kind this, `java.lang.Object`[] v2 @kind object, `boolean` v3 ) @signature `Lkotlin/r/c;.<init>:([Ljava/lang/Object;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d5bcc.  v0:= "values" @kind object;
  #L1d5bd0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d5bd6.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d5bdc.  v1.`kotlin.r.c.f` @type ^`java.lang.Object`[] := v2 @kind object;
  #L1d5be0.  v1.`kotlin.r.c.g` @type ^`boolean` := v3 @kind boolean;
  #L1d5be4.  return @kind void;
}
procedure `boolean` `add`(`kotlin.r.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/c;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d59fc.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d5a00.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d5a04.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d5a0a.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.r.c` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/r/c;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d5a1c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d5a20.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d5a24.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d5a2a.  throw v2;
}
procedure `void` `clear`(`kotlin.r.c` v2 @kind this) @signature `Lkotlin/r/c;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d5bf8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1d5bfc.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L1d5c00.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d5c06.  throw v0;
}
procedure `boolean` `contains`(`kotlin.r.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/c;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d5a3c.  v0:= v1.`kotlin.r.c.f` @type ^`java.lang.Object`[] @kind object;
  #L1d5a40.  call temp:= `contains`(v0, v2) @signature `Lkotlin/r/d;.contains:([Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1d5a46.  v2:= temp;
  #L1d5a48.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.r.c` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lkotlin/r/c;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d5a5c.  v0:= "elements" @kind object;
  #L1d5a60.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d5a66.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L1d5a6c.  v0:= temp;
  #L1d5a6e.  v1:= 1I;
  #L1d5a70.  if v0 == 0 then goto L1d5a76;
  #L1d5a74.  goto L1d5aa0;
  #L1d5a76.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1d5a7c.  v3:= temp @kind object;
  #L1d5a7e.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d5a84.  v0:= temp;
  #L1d5a86.  if v0 == 0 then goto L1d5aa0;
  #L1d5a8a.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d5a90.  v0:= temp @kind object;
  #L1d5a92.  call temp:= `contains`(v2, v0) @signature `Lkotlin/r/c;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d5a98.  v0:= temp;
  #L1d5a9a.  if v0 != 0 then goto L1d5a7e;
  #L1d5a9e.  v1:= 0I;
  #L1d5aa0.  return v1;
}
procedure `int` `getSize`(`kotlin.r.c` v1 @kind this) @signature `Lkotlin/r/c;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d5b38.  v0:= v1.`kotlin.r.c.f` @type ^`java.lang.Object`[] @kind object;
  #L1d5b3c.  v0:= length @variable v0;
  #L1d5b3e.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.r.c` v1 @kind this) @signature `Lkotlin/r/c;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d5ab4.  v0:= v1.`kotlin.r.c.f` @type ^`java.lang.Object`[] @kind object;
  #L1d5ab8.  v0:= length @variable v0;
  #L1d5aba.  if v0 != 0 then goto L1d5ac2;
  #L1d5abe.  v0:= 1I;
  #L1d5ac0.  goto L1d5ac4;
  #L1d5ac2.  v0:= 0I;
  #L1d5ac4.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.r.c` v1 @kind this) @signature `Lkotlin/r/c;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d5bac.  v0:= v1.`kotlin.r.c.f` @type ^`java.lang.Object`[] @kind object;
  #L1d5bb0.  call temp:= `iterator`(v0) @signature `Lkotlin/v/c/b;.iterator:([Ljava/lang/Object;)Ljava/util/Iterator;` @kind static;
  #L1d5bb6.  v0:= temp @kind object;
  #L1d5bb8.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.r.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/c;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d5ad8.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d5adc.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d5ae0.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d5ae6.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.r.c` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/r/c;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d5af8.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d5afc.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d5b00.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d5b06.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.r.c` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/r/c;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d5b18.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d5b1c.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d5b20.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d5b26.  throw v2;
}
procedure `int` `size`(`kotlin.r.c` v1 @kind this) @signature `Lkotlin/r/c;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d5b50.  call temp:= `getSize`(v1) @signature `Lkotlin/r/c;.getSize:()I` @kind virtual;
  #L1d5b56.  v0:= temp;
  #L1d5b58.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.r.c` v2 @kind this) @signature `Lkotlin/r/c;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1d5b6c.  v0:= v2.`kotlin.r.c.f` @type ^`java.lang.Object`[] @kind object;
  #L1d5b70.  v1:= v2.`kotlin.r.c.g` @type ^`boolean` @kind boolean;
  #L1d5b74.  call temp:= `copyToArrayOfAny`(v0, v1) @signature `Lkotlin/r/k;.copyToArrayOfAny:([Ljava/lang/Object;Z)[Ljava/lang/Object;` @kind static;
  #L1d5b7a.  v0:= temp @kind object;
  #L1d5b7c.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.r.c` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lkotlin/r/c;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L1d5b90.  call temp:= `toArray`(v0, v1) @signature `Lkotlin/v/c/e;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L1d5b96.  v1:= temp @kind object;
  #L1d5b98.  return v1 @kind object;
}
