record `kotlin.r.w` @kind class @AccessFlag FINAL extends `java.util.Map` @kind interface, `java.io.Serializable` @kind interface, `kotlin.v.c.q.a` @kind interface {
}
global `kotlin.r.w` `@@kotlin.r.w.f` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlin.r.w.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/r/w;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d7c28.  v0:= new `kotlin.r.w`;
  #L1d7c2c.  call `<init>`(v0) @signature `Lkotlin/r/w;.<init>:()V` @kind direct;
  #L1d7c32.  `@@kotlin.r.w.f` @type ^`kotlin.r.w` := v0 @kind object;
  #L1d7c36.  return @kind void;
}
procedure `void` `<init>`(`kotlin.r.w` v0 @kind this) @signature `Lkotlin/r/w;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1d7c48.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d7c4e.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`kotlin.r.w` v1 @kind this) @signature `Lkotlin/r/w;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1d7b28.  v0:= `@@kotlin.r.w.f` @type ^`kotlin.r.w` @kind object;
  #L1d7b2c.  return v0 @kind object;
}
procedure `void` `clear`(`kotlin.r.w` v2 @kind this) @signature `Lkotlin/r/w;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d7c60.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1d7c64.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L1d7c68.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d7c6e.  throw v0;
}
procedure `boolean` `containsKey`(`kotlin.r.w` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/r/w;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L1d7a04.  v1:= 0I;
  #L1d7a06.  return v1;
}
procedure `boolean` `containsValue`(`kotlin.r.w` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/w;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d7a18.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L1d7a1c.  if v0 == 0 then goto L1d7a2e;
  #L1d7a20.  v2:= (`java.lang.Void`) v2 @kind object;
  #L1d7a24.  call temp:= `containsValue`(v1, v2) @signature `Lkotlin/r/w;.containsValue:(Ljava/lang/Void;)Z` @kind virtual;
  #L1d7a2a.  v2:= temp;
  #L1d7a2c.  return v2;
  #L1d7a2e.  v2:= 0I;
  #L1d7a30.  return v2;
}
procedure `boolean` `containsValue`(`kotlin.r.w` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkotlin/r/w;.containsValue:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7a44.  v0:= "value" @kind object;
  #L1d7a48.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d7a4e.  v2:= 0I;
  #L1d7a50.  return v2;
}
procedure `java.util.Set` `entrySet`(`kotlin.r.w` v1 @kind this) @signature `Lkotlin/r/w;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d7bc0.  call temp:= `getEntries`(v1) @signature `Lkotlin/r/w;.getEntries:()Ljava/util/Set;` @kind virtual;
  #L1d7bc6.  v0:= temp @kind object;
  #L1d7bc8.  return v0 @kind object;
}
procedure `boolean` `equals`(`kotlin.r.w` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/w;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7a64.  v0:= instanceof @variable v2 @type ^`java.util.Map` @kind boolean;
  #L1d7a68.  if v0 == 0 then goto L1d7a80;
  #L1d7a6c.  v2:= (`java.util.Map`) v2 @kind object;
  #L1d7a70.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L1d7a76.  v2:= temp;
  #L1d7a78.  if v2 == 0 then goto L1d7a80;
  #L1d7a7c.  v2:= 1I;
  #L1d7a7e.  goto L1d7a82;
  #L1d7a80.  v2:= 0I;
  #L1d7a82.  return v2;
}
procedure `java.lang.Object` `get`(`kotlin.r.w` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/r/w;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1d7aec.  call temp:= `get`(v0, v1) @signature `Lkotlin/r/w;.get:(Ljava/lang/Object;)Ljava/lang/Void;` @kind virtual;
  #L1d7af2.  v1:= temp @kind object;
  #L1d7af4.  return v1 @kind object;
}
procedure `java.lang.Void` `get`(`kotlin.r.w` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/r/w;.get:(Ljava/lang/Object;)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;

  #L1d7b78.  v1:= 0I;
  #L1d7b7a.  return v1 @kind object;
}
procedure `java.util.Set` `getEntries`(`kotlin.r.w` v1 @kind this) @signature `Lkotlin/r/w;.getEntries:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7bdc.  v0:= `@@kotlin.r.x.f` @type ^`kotlin.r.x` @kind object;
  #L1d7be0.  return v0 @kind object;
}
procedure `java.util.Set` `getKeys`(`kotlin.r.w` v1 @kind this) @signature `Lkotlin/r/w;.getKeys:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7bf4.  v0:= `@@kotlin.r.x.f` @type ^`kotlin.r.x` @kind object;
  #L1d7bf8.  return v0 @kind object;
}
procedure `int` `getSize`(`kotlin.r.w` v1 @kind this) @signature `Lkotlin/r/w;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7aa8.  v0:= 0I;
  #L1d7aaa.  return v0;
}
procedure `java.util.Collection` `getValues`(`kotlin.r.w` v1 @kind this) @signature `Lkotlin/r/w;.getValues:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7b8c.  v0:= `@@kotlin.r.v.f` @type ^`kotlin.r.v` @kind object;
  #L1d7b90.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.r.w` v1 @kind this) @signature `Lkotlin/r/w;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7abc.  v0:= 0I;
  #L1d7abe.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.r.w` v1 @kind this) @signature `Lkotlin/r/w;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7a94.  v0:= 1I;
  #L1d7a96.  return v0;
}
procedure `java.util.Set` `keySet`(`kotlin.r.w` v1 @kind this) @signature `Lkotlin/r/w;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d7c0c.  call temp:= `getKeys`(v1) @signature `Lkotlin/r/w;.getKeys:()Ljava/util/Set;` @kind virtual;
  #L1d7c12.  v0:= temp @kind object;
  #L1d7c14.  return v0 @kind object;
}
procedure `java.lang.Object` `put`(`kotlin.r.w` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/w;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1d7b08.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1d7b0c.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L1d7b10.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d7b16.  throw v1;
}
procedure `void` `putAll`(`kotlin.r.w` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Lkotlin/r/w;.putAll:(Ljava/util/Map;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7c80.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d7c84.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d7c88.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d7c8e.  throw v2;
}
procedure `java.lang.Object` `remove`(`kotlin.r.w` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/w;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7b40.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d7b44.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d7b48.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d7b4e.  throw v2;
}
procedure `int` `size`(`kotlin.r.w` v1 @kind this) @signature `Lkotlin/r/w;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d7ad0.  call temp:= `getSize`(v1) @signature `Lkotlin/r/w;.getSize:()I` @kind virtual;
  #L1d7ad6.  v0:= temp;
  #L1d7ad8.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.r.w` v1 @kind this) @signature `Lkotlin/r/w;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d7b60.  v0:= "{}" @kind object;
  #L1d7b64.  return v0 @kind object;
}
procedure `java.util.Collection` `values`(`kotlin.r.w` v1 @kind this) @signature `Lkotlin/r/w;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d7ba4.  call temp:= `getValues`(v1) @signature `Lkotlin/r/w;.getValues:()Ljava/util/Collection;` @kind virtual;
  #L1d7baa.  v0:= temp @kind object;
  #L1d7bac.  return v0 @kind object;
}
