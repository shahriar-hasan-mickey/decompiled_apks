record `kotlin.r.l` @kind class @AccessFlag  extends `kotlin.r.k` @kind class {
}
procedure `void` `a`(`int` v3 , `int` v4 , `int` v5 ) @signature `Lkotlin/r/l;.a:(III)V` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1d6644.  v0:= ")." @kind object;
  #L1d6648.  v1:= "fromIndex (" @kind object;
  #L1d664c.  if v4 > v5 then goto L1d66d2;
  #L1d6650.  if v4 < 0 then goto L1d669e;
  #L1d6654.  if v5 > v3 then goto L1d665a;
  #L1d6658.  return @kind void;
  #L1d665a.  v4:= new `java.lang.IndexOutOfBoundsException`;
  #L1d665e.  v1:= new `java.lang.StringBuilder`;
  #L1d6662.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d6668.  v2:= "toIndex (" @kind object;
  #L1d666c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d6672.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d6678.  v5:= ") is greater than size (" @kind object;
  #L1d667c.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d6682.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d6688.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d668e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d6694.  v3:= temp @kind object;
  #L1d6696.  call `<init>`(v4, v3) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d669c.  throw v4;
  #L1d669e.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L1d66a2.  v5:= new `java.lang.StringBuilder`;
  #L1d66a6.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d66ac.  call temp:= `append`(v5, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d66b2.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d66b8.  v4:= ") is less than zero." @kind object;
  #L1d66bc.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d66c2.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d66c8.  v4:= temp @kind object;
  #L1d66ca.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d66d0.  throw v3;
  #L1d66d2.  v3:= new `java.lang.IllegalArgumentException`;
  #L1d66d6.  v2:= new `java.lang.StringBuilder`;
  #L1d66da.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d66e0.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d66e6.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d66ec.  v4:= ") is greater than toIndex (" @kind object;
  #L1d66f0.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d66f6.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d66fc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d6702.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d6708.  v4:= temp @kind object;
  #L1d670a.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d6710.  throw v3;
}
procedure `java.util.ArrayList` `arrayListOf`(`java.lang.Object`[] v3 @kind object) @signature `Lkotlin/r/l;.arrayListOf:([Ljava/lang/Object;)Ljava/util/ArrayList;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1d64f4.  v0:= "elements" @kind object;
  #L1d64f8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d64fe.  v0:= length @variable v3;
  #L1d6500.  if v0 != 0 then goto L1d6510;
  #L1d6504.  v3:= new `java.util.ArrayList`;
  #L1d6508.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1d650e.  goto L1d6528;
  #L1d6510.  v0:= new `java.util.ArrayList`;
  #L1d6514.  v1:= new `kotlin.r.c`;
  #L1d6518.  v2:= 1I;
  #L1d651a.  call `<init>`(v1, v3, v2) @signature `Lkotlin/r/c;.<init>:([Ljava/lang/Object;Z)V` @kind direct;
  #L1d6520.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L1d6526.  v3:= v0 @kind object;
  #L1d6528.  return v3 @kind object;
}
procedure `java.util.Collection` `asCollection`(`java.lang.Object`[] v2 @kind object) @signature `Lkotlin/r/l;.asCollection:([Ljava/lang/Object;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1d653c.  v0:= "$this$asCollection" @kind object;
  #L1d6540.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d6546.  v0:= new `kotlin.r.c`;
  #L1d654a.  v1:= 0I;
  #L1d654c.  call `<init>`(v0, v2, v1) @signature `Lkotlin/r/c;.<init>:([Ljava/lang/Object;Z)V` @kind direct;
  #L1d6552.  return v0 @kind object;
}
procedure `int` `binarySearch`(`java.util.List` v2 @kind object, `java.lang.Comparable` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lkotlin/r/l;.binarySearch:(Ljava/util/List;Ljava/lang/Comparable;II)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1d645c.  v0:= "$this$binarySearch" @kind object;
  #L1d6460.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d6466.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1d646c.  v0:= temp;
  #L1d646e.  call `a`(v0, v4, v5) @signature `Lkotlin/r/l;.a:(III)V` @kind static;
  #L1d6474.  v5:= v5 + -1;
  #L1d6478.  if v4 > v5 then goto L1d64b2;
  #L1d647c.  v0:= v4 + v5 @kind int;
  #L1d6480.  v0:= v0 ^>> 1;
  #L1d6484.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1d648a.  v1:= temp @kind object;
  #L1d648c.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L1d6490.  call temp:= `compareValues`(v1, v3) @signature `Lkotlin/s/a;.compareValues:(Ljava/lang/Comparable;Ljava/lang/Comparable;)I` @kind static;
  #L1d6496.  v1:= temp;
  #L1d6498.  if v1 >= 0 then goto L1d64a4;
  #L1d649c.  v0:= v0 + 1;
  #L1d64a0.  v4:= v0;
  #L1d64a2.  goto L1d6478;
  #L1d64a4.  if v1 <= 0 then goto L1d64b0;
  #L1d64a8.  v0:= v0 + -1;
  #L1d64ac.  v5:= v0;
  #L1d64ae.  goto L1d6478;
  #L1d64b0.  return v0;
  #L1d64b2.  v4:= v4 + 1;
  #L1d64b6.  v2:= -v4 @kind int;
  #L1d64b8.  return v2;
}
procedure `int` `binarySearch$default`(`java.util.List` v0 @kind object, `java.lang.Comparable` v1 @kind object, `int` v2 , `int` v3 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlin/r/l;.binarySearch$default:(Ljava/util/List;Ljava/lang/Comparable;IIILjava/lang/Object;)I` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1d6428.  v5:= v4 ^& 2;
  #L1d642c.  if v5 == 0 then goto L1d6432;
  #L1d6430.  v2:= 0I;
  #L1d6432.  v4:= v4 ^& 4;
  #L1d6436.  if v4 == 0 then goto L1d6442;
  #L1d643a.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1d6440.  v3:= temp;
  #L1d6442.  call temp:= `binarySearch`(v0, v1, v2, v3) @signature `Lkotlin/r/l;.binarySearch:(Ljava/util/List;Ljava/lang/Comparable;II)I` @kind static;
  #L1d6448.  v0:= temp;
  #L1d644a.  return v0;
}
procedure `java.util.List` `emptyList`() @signature `Lkotlin/r/l;.emptyList:()Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d6564.  v0:= `@@kotlin.r.v.f` @type ^`kotlin.r.v` @kind object;
  #L1d6568.  return v0 @kind object;
}
procedure `int` `getLastIndex`(`java.util.List` v1 @kind object) @signature `Lkotlin/r/l;.getLastIndex:(Ljava/util/List;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1d64cc.  v0:= "$this$lastIndex" @kind object;
  #L1d64d0.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d64d6.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1d64dc.  v1:= temp;
  #L1d64de.  v1:= v1 + -1;
  #L1d64e2.  return v1;
}
procedure `java.util.List` `listOf`(`java.lang.Object`[] v1 @kind object) @signature `Lkotlin/r/l;.listOf:([Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d657c.  v0:= "elements" @kind object;
  #L1d6580.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d6586.  v0:= length @variable v1;
  #L1d6588.  if v0 <= 0 then goto L1d6596;
  #L1d658c.  call temp:= `asList`(v1) @signature `Lkotlin/r/d;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L1d6592.  v1:= temp @kind object;
  #L1d6594.  goto L1d659e;
  #L1d6596.  call temp:= `emptyList`() @signature `Lkotlin/r/j;.emptyList:()Ljava/util/List;` @kind static;
  #L1d659c.  v1:= temp @kind object;
  #L1d659e.  return v1 @kind object;
}
procedure `java.util.List` `mutableListOf`(`java.lang.Object`[] v3 @kind object) @signature `Lkotlin/r/l;.mutableListOf:([Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1d65b0.  v0:= "elements" @kind object;
  #L1d65b4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d65ba.  v0:= length @variable v3;
  #L1d65bc.  if v0 != 0 then goto L1d65cc;
  #L1d65c0.  v3:= new `java.util.ArrayList`;
  #L1d65c4.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1d65ca.  goto L1d65e4;
  #L1d65cc.  v0:= new `java.util.ArrayList`;
  #L1d65d0.  v1:= new `kotlin.r.c`;
  #L1d65d4.  v2:= 1I;
  #L1d65d6.  call `<init>`(v1, v3, v2) @signature `Lkotlin/r/c;.<init>:([Ljava/lang/Object;Z)V` @kind direct;
  #L1d65dc.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L1d65e2.  v3:= v0 @kind object;
  #L1d65e4.  return v3 @kind object;
}
procedure `java.util.List` `optimizeReadOnlyList`(`java.util.List` v2 @kind object) @signature `Lkotlin/r/l;.optimizeReadOnlyList:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1d65f8.  v0:= "$this$optimizeReadOnlyList" @kind object;
  #L1d65fc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d6602.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1d6608.  v0:= temp;
  #L1d660a.  if v0 == 0 then goto L1d662a;
  #L1d660e.  v1:= 1I;
  #L1d6610.  if v0 == v1 then goto L1d6616;
  #L1d6614.  goto L1d6632;
  #L1d6616.  v0:= 0I;
  #L1d6618.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1d661e.  v2:= temp @kind object;
  #L1d6620.  call temp:= `listOf`(v2) @signature `Lkotlin/r/j;.listOf:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L1d6626.  v2:= temp @kind object;
  #L1d6628.  goto L1d6632;
  #L1d662a.  call temp:= `emptyList`() @signature `Lkotlin/r/j;.emptyList:()Ljava/util/List;` @kind static;
  #L1d6630.  v2:= temp @kind object;
  #L1d6632.  return v2 @kind object;
}
procedure `void` `throwCountOverflow`() @signature `Lkotlin/r/l;.throwCountOverflow:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1d6724.  v0:= new `java.lang.ArithmeticException`;
  #L1d6728.  v1:= "Count overflow has happened." @kind object;
  #L1d672c.  call `<init>`(v0, v1) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d6732.  throw v0;
}
procedure `void` `throwIndexOverflow`() @signature `Lkotlin/r/l;.throwIndexOverflow:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1d6744.  v0:= new `java.lang.ArithmeticException`;
  #L1d6748.  v1:= "Index overflow has happened." @kind object;
  #L1d674c.  call `<init>`(v0, v1) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d6752.  throw v0;
}
