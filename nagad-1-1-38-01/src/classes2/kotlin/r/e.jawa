record `kotlin.r.e` @kind class @AccessFlag  {
}
procedure `void` `copyOfRangeToIndexCheck`(`int` v3 , `int` v4 ) @signature `Lkotlin/r/e;.copyOfRangeToIndexCheck:(II)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1d5c18.  if v3 > v4 then goto L1d5c1e;
  #L1d5c1c.  return @kind void;
  #L1d5c1e.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L1d5c22.  v1:= new `java.lang.StringBuilder`;
  #L1d5c26.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d5c2c.  v2:= "toIndex (" @kind object;
  #L1d5c30.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5c36.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5c3c.  v3:= ") is greater than size (" @kind object;
  #L1d5c40.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5c46.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5c4c.  v3:= ")." @kind object;
  #L1d5c50.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5c56.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d5c5c.  v3:= temp @kind object;
  #L1d5c5e.  call `<init>`(v0, v3) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d5c64.  throw v0;
}
