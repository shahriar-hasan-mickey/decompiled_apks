record `kotlin.r.b$c` @kind class @AccessFlag  extends `kotlin.r.b$b` @kind class, `java.util.ListIterator` @kind interface, `kotlin.v.c.q.a` @kind interface {
  `kotlin.r.b` `kotlin.r.b$c.h` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.r.b$c` v1 @kind this, `kotlin.r.b` v2 @kind object, `int` v3 ) @signature `Lkotlin/r/b$c;.<init>:(Lkotlin/r/b;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d56cc.  v1.`kotlin.r.b$c.h` @type ^`kotlin.r.b` := v2 @kind object;
  #L1d56d0.  call `<init>`(v1, v2) @signature `Lkotlin/r/b$b;.<init>:(Lkotlin/r/b;)V` @kind direct;
  #L1d56d6.  v0:= `@@kotlin.r.b.f` @type ^`kotlin.r.b$a` @kind object;
  #L1d56da.  call temp:= `size`(v2) @signature `Lkotlin/r/a;.size:()I` @kind virtual;
  #L1d56e0.  v2:= temp;
  #L1d56e2.  call `checkPositionIndex$kotlin_stdlib`(v0, v3, v2) @signature `Lkotlin/r/b$a;.checkPositionIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L1d56e8.  call `setIndex`(v1, v3) @signature `Lkotlin/r/b$b;.setIndex:(I)V` @kind virtual;
  #L1d56ee.  return @kind void;
}
procedure `void` `add`(`kotlin.r.b$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/b$c;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d5700.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d5704.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d5708.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d570e.  throw v2;
}
procedure `boolean` `hasPrevious`(`kotlin.r.b$c` v1 @kind this) @signature `Lkotlin/r/b$c;.hasPrevious:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d561c.  call temp:= `getIndex`(v1) @signature `Lkotlin/r/b$b;.getIndex:()I` @kind virtual;
  #L1d5622.  v0:= temp;
  #L1d5624.  if v0 <= 0 then goto L1d562c;
  #L1d5628.  v0:= 1I;
  #L1d562a.  goto L1d562e;
  #L1d562c.  v0:= 0I;
  #L1d562e.  return v0;
}
procedure `int` `nextIndex`(`kotlin.r.b$c` v1 @kind this) @signature `Lkotlin/r/b$c;.nextIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d5640.  call temp:= `getIndex`(v1) @signature `Lkotlin/r/b$b;.getIndex:()I` @kind virtual;
  #L1d5646.  v0:= temp;
  #L1d5648.  return v0;
}
procedure `java.lang.Object` `previous`(`kotlin.r.b$c` v2 @kind this) @signature `Lkotlin/r/b$c;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d567c.  call temp:= `hasPrevious`(v2) @signature `Lkotlin/r/b$c;.hasPrevious:()Z` @kind virtual;
  #L1d5682.  v0:= temp;
  #L1d5684.  if v0 == 0 then goto L1d56b0;
  #L1d5688.  v0:= v2.`kotlin.r.b$c.h` @type ^`kotlin.r.b` @kind object;
  #L1d568c.  call temp:= `getIndex`(v2) @signature `Lkotlin/r/b$b;.getIndex:()I` @kind virtual;
  #L1d5692.  v1:= temp;
  #L1d5694.  v1:= v1 + -1;
  #L1d5698.  call `setIndex`(v2, v1) @signature `Lkotlin/r/b$b;.setIndex:(I)V` @kind virtual;
  #L1d569e.  call temp:= `getIndex`(v2) @signature `Lkotlin/r/b$b;.getIndex:()I` @kind virtual;
  #L1d56a4.  v1:= temp;
  #L1d56a6.  call temp:= `get`(v0, v1) @signature `Lkotlin/r/b;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d56ac.  v0:= temp @kind object;
  #L1d56ae.  return v0 @kind object;
  #L1d56b0.  v0:= new `java.util.NoSuchElementException`;
  #L1d56b4.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L1d56ba.  throw v0;
}
procedure `int` `previousIndex`(`kotlin.r.b$c` v1 @kind this) @signature `Lkotlin/r/b$c;.previousIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d565c.  call temp:= `getIndex`(v1) @signature `Lkotlin/r/b$b;.getIndex:()I` @kind virtual;
  #L1d5662.  v0:= temp;
  #L1d5664.  v0:= v0 + -1;
  #L1d5668.  return v0;
}
procedure `void` `set`(`kotlin.r.b$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/b$c;.set:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d5720.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d5724.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d5728.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d572e.  throw v2;
}
