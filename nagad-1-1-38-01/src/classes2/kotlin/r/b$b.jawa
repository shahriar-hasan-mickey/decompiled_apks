record `kotlin.r.b$b` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface, `kotlin.v.c.q.a` @kind interface {
  `int` `kotlin.r.b$b.f` @AccessFlag PRIVATE;
  `kotlin.r.b` `kotlin.r.b$b.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.r.b$b` v0 @kind this, `kotlin.r.b` v1 @kind object) @signature `Lkotlin/r/b$b;.<init>:(Lkotlin/r/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1d55c8.  v0.`kotlin.r.b$b.g` @type ^`kotlin.r.b` := v1 @kind object;
  #L1d55cc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d55d2.  return @kind void;
}
procedure `int` `getIndex`(`kotlin.r.b$b` v1 @kind this) @signature `Lkotlin/r/b$b;.getIndex:()I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1d556c.  v0:= v1.`kotlin.r.b$b.f` @type ^`int`;
  #L1d5570.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.r.b$b` v2 @kind this) @signature `Lkotlin/r/b$b;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d5540.  v0:= v2.`kotlin.r.b$b.f` @type ^`int`;
  #L1d5544.  v1:= v2.`kotlin.r.b$b.g` @type ^`kotlin.r.b` @kind object;
  #L1d5548.  call temp:= `size`(v1) @signature `Lkotlin/r/a;.size:()I` @kind virtual;
  #L1d554e.  v1:= temp;
  #L1d5550.  if v0 >= v1 then goto L1d5558;
  #L1d5554.  v0:= 1I;
  #L1d5556.  goto L1d555a;
  #L1d5558.  v0:= 0I;
  #L1d555a.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.r.b$b` v3 @kind this) @signature `Lkotlin/r/b$b;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d5584.  call temp:= `hasNext`(v3) @signature `Lkotlin/r/b$b;.hasNext:()Z` @kind virtual;
  #L1d558a.  v0:= temp;
  #L1d558c.  if v0 == 0 then goto L1d55aa;
  #L1d5590.  v0:= v3.`kotlin.r.b$b.g` @type ^`kotlin.r.b` @kind object;
  #L1d5594.  v1:= v3.`kotlin.r.b$b.f` @type ^`int`;
  #L1d5598.  v2:= v1 + 1;
  #L1d559c.  v3.`kotlin.r.b$b.f` @type ^`int` := v2;
  #L1d55a0.  call temp:= `get`(v0, v1) @signature `Lkotlin/r/b;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d55a6.  v0:= temp @kind object;
  #L1d55a8.  return v0 @kind object;
  #L1d55aa.  v0:= new `java.util.NoSuchElementException`;
  #L1d55ae.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L1d55b4.  throw v0;
}
procedure `void` `remove`(`kotlin.r.b$b` v2 @kind this) @signature `Lkotlin/r/b$b;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d55e4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1d55e8.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L1d55ec.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d55f2.  throw v0;
}
procedure `void` `setIndex`(`kotlin.r.b$b` v0 @kind this, `int` v1 ) @signature `Lkotlin/r/b$b;.setIndex:(I)V` @AccessFlag PROTECTED_FINAL {
    temp;

  #L1d5604.  v0.`kotlin.r.b$b.f` @type ^`int` := v1;
  #L1d5608.  return @kind void;
}
