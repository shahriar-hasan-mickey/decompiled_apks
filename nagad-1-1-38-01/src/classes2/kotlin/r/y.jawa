record `kotlin.r.y` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.Iterator` @kind interface, `kotlin.v.c.q.a` @kind interface {
}
procedure `void` `<init>`(`kotlin.r.y` v0 @kind this) @signature `Lkotlin/r/y;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1d7f50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d7f56.  return @kind void;
}
procedure `java.lang.Integer` `next`(`kotlin.r.y` v1 @kind this) @signature `Lkotlin/r/y;.next:()Ljava/lang/Integer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d7f10.  call temp:= `nextInt`(v1) @signature `Lkotlin/r/y;.nextInt:()I` @kind virtual;
  #L1d7f16.  v0:= temp;
  #L1d7f18.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1d7f1e.  v0:= temp @kind object;
  #L1d7f20.  return v0 @kind object;
}
procedure `java.lang.Object` `next`(`kotlin.r.y` v1 @kind this) @signature `Lkotlin/r/y;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1d7f34.  call temp:= `next`(v1) @signature `Lkotlin/r/y;.next:()Ljava/lang/Integer;` @kind virtual;
  #L1d7f3a.  v0:= temp @kind object;
  #L1d7f3c.  return v0 @kind object;
}
procedure `int` `nextInt`() @signature `Lkotlin/r/y;.nextInt:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `remove`(`kotlin.r.y` v2 @kind this) @signature `Lkotlin/r/y;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d7f68.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1d7f6c.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L1d7f70.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d7f76.  throw v0;
}
