record `kotlin.r.a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.Collection` @kind interface, `kotlin.v.c.q.a` @kind interface {
}
procedure `void` `<init>`(`kotlin.r.a` v0 @kind this) @signature `Lkotlin/r/a;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L1d52b0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d52b6.  return @kind void;
}
procedure `boolean` `add`(`kotlin.r.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/a;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d509c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d50a0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d50a4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d50aa.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.r.a` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/r/a;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d50bc.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d50c0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d50c4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d50ca.  throw v2;
}
procedure `void` `clear`(`kotlin.r.a` v2 @kind this) @signature `Lkotlin/r/a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d52c8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1d52cc.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L1d52d0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d52d6.  throw v0;
}
procedure `boolean` `contains`(`kotlin.r.a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/r/a;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d50dc.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L1d50e2.  v0:= temp;
  #L1d50e4.  v1:= 0I;
  #L1d50e6.  if v0 == 0 then goto L1d50ec;
  #L1d50ea.  goto L1d5116;
  #L1d50ec.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1d50f2.  v0:= temp @kind object;
  #L1d50f4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d50fa.  v2:= temp;
  #L1d50fc.  if v2 == 0 then goto L1d5116;
  #L1d5100.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d5106.  v2:= temp @kind object;
  #L1d5108.  call temp:= `areEqual`(v2, v4) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1d510e.  v2:= temp;
  #L1d5110.  if v2 == 0 then goto L1d50f4;
  #L1d5114.  v1:= 1I;
  #L1d5116.  return v1;
}
procedure `boolean` `containsAll`(`kotlin.r.a` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lkotlin/r/a;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d5128.  v0:= "elements" @kind object;
  #L1d512c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d5132.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L1d5138.  v0:= temp;
  #L1d513a.  v1:= 1I;
  #L1d513c.  if v0 == 0 then goto L1d5142;
  #L1d5140.  goto L1d516c;
  #L1d5142.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1d5148.  v3:= temp @kind object;
  #L1d514a.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d5150.  v0:= temp;
  #L1d5152.  if v0 == 0 then goto L1d516c;
  #L1d5156.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d515c.  v0:= temp @kind object;
  #L1d515e.  call temp:= `contains`(v2, v0) @signature `Lkotlin/r/a;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d5164.  v0:= temp;
  #L1d5166.  if v0 != 0 then goto L1d514a;
  #L1d516a.  v1:= 0I;
  #L1d516c.  return v1;
}
procedure `int` `getSize`() @signature `Lkotlin/r/a;.getSize:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`kotlin.r.a` v1 @kind this) @signature `Lkotlin/r/a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d5180.  call temp:= `size`(v1) @signature `Lkotlin/r/a;.size:()I` @kind virtual;
  #L1d5186.  v0:= temp;
  #L1d5188.  if v0 != 0 then goto L1d5190;
  #L1d518c.  v0:= 1I;
  #L1d518e.  goto L1d5192;
  #L1d5190.  v0:= 0I;
  #L1d5192.  return v0;
}
procedure `boolean` `remove`(`kotlin.r.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/a;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d51a4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d51a8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d51ac.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d51b2.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.r.a` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/r/a;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d51c4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d51c8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d51cc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d51d2.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.r.a` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/r/a;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d51e4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d51e8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d51ec.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d51f2.  throw v2;
}
procedure `int` `size`(`kotlin.r.a` v1 @kind this) @signature `Lkotlin/r/a;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d5204.  call temp:= `getSize`(v1) @signature `Lkotlin/r/a;.getSize:()I` @kind virtual;
  #L1d520a.  v0:= temp;
  #L1d520c.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.r.a` v1 @kind this) @signature `Lkotlin/r/a;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d5220.  call temp:= `toArray`(v1) @signature `Lkotlin/v/c/e;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L1d5226.  v0:= temp @kind object;
  #L1d5228.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.r.a` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/r/a;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d523c.  v0:= "array" @kind object;
  #L1d5240.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d5246.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/v/c/e;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L1d524c.  v2:= temp @kind object;
  #L1d524e.  if v2 == 0 then goto L1d5254;
  #L1d5252.  return v2 @kind object;
  #L1d5254.  v2:= new `java.lang.NullPointerException`;
  #L1d5258.  v0:= "null cannot be cast to non-null type kotlin.Array<T>" @kind object;
  #L1d525c.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d5262.  throw v2;
}
procedure `java.lang.String` `toString`(`kotlin.r.a` v9 @kind this) @signature `Lkotlin/r/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1d5274.  v6:= new `kotlin.r.a$a`;
  #L1d5278.  call `<init>`(v6, v9) @signature `Lkotlin/r/a$a;.<init>:(Lkotlin/r/a;)V` @kind direct;
  #L1d527e.  v1:= ", " @kind object;
  #L1d5282.  v2:= "[" @kind object;
  #L1d5286.  v3:= "]" @kind object;
  #L1d528a.  v4:= 0I;
  #L1d528c.  v5:= 0I;
  #L1d528e.  v7:= 24I;
  #L1d5292.  v8:= 0I;
  #L1d5294.  v0:= v9 @kind object;
  #L1d5296.  call temp:= `joinToString$default`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lkotlin/r/t;.joinToString$default:(Ljava/lang/Iterable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/v/b/l;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1d529c.  v0:= temp @kind object;
  #L1d529e.  return v0 @kind object;
}
