record `kotlin.r.b$a` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`kotlin.r.b$a` v0 @kind this) @signature `Lkotlin/r/b$a;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1d53b8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d53be.  return @kind void;
}
procedure `void` `<init>`(`kotlin.r.b$a` v0 @kind this, `kotlin.v.c.f` v1 @kind object) @signature `Lkotlin/r/b$a;.<init>:(Lkotlin/v/c/f;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1d53d0.  call `<init>`(v0) @signature `Lkotlin/r/b$a;.<init>:()V` @kind direct;
  #L1d53d6.  return @kind void;
}
procedure `void` `checkElementIndex$kotlin_stdlib`(`kotlin.r.b$a` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lkotlin/r/b$a;.checkElementIndex$kotlin_stdlib:(II)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1d53e8.  if v4 < 0 then goto L1d53f2;
  #L1d53ec.  if v4 >= v5 then goto L1d53f2;
  #L1d53f0.  return @kind void;
  #L1d53f2.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L1d53f6.  v1:= new `java.lang.StringBuilder`;
  #L1d53fa.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d5400.  v2:= "index: " @kind object;
  #L1d5404.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d540a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5410.  v4:= ", size: " @kind object;
  #L1d5414.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d541a.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5420.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d5426.  v4:= temp @kind object;
  #L1d5428.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d542e.  throw v0;
}
procedure `void` `checkPositionIndex$kotlin_stdlib`(`kotlin.r.b$a` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lkotlin/r/b$a;.checkPositionIndex$kotlin_stdlib:(II)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1d5440.  if v4 < 0 then goto L1d544a;
  #L1d5444.  if v4 > v5 then goto L1d544a;
  #L1d5448.  return @kind void;
  #L1d544a.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L1d544e.  v1:= new `java.lang.StringBuilder`;
  #L1d5452.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d5458.  v2:= "index: " @kind object;
  #L1d545c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5462.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5468.  v4:= ", size: " @kind object;
  #L1d546c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5472.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5478.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d547e.  v4:= temp @kind object;
  #L1d5480.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d5486.  throw v0;
}
procedure `void` `checkRangeIndexes$kotlin_stdlib`(`kotlin.r.b$a` v3 @kind this, `int` v4 , `int` v5 , `int` v6 ) @signature `Lkotlin/r/b$a;.checkRangeIndexes$kotlin_stdlib:(III)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1d5498.  v0:= "fromIndex: " @kind object;
  #L1d549c.  if v4 < 0 then goto L1d54e4;
  #L1d54a0.  if v5 > v6 then goto L1d54e4;
  #L1d54a4.  if v4 > v5 then goto L1d54aa;
  #L1d54a8.  return @kind void;
  #L1d54aa.  v6:= new `java.lang.IllegalArgumentException`;
  #L1d54ae.  v1:= new `java.lang.StringBuilder`;
  #L1d54b2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d54b8.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d54be.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d54c4.  v4:= " > toIndex: " @kind object;
  #L1d54c8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d54ce.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d54d4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d54da.  v4:= temp @kind object;
  #L1d54dc.  call `<init>`(v6, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d54e2.  throw v6;
  #L1d54e4.  v1:= new `java.lang.IndexOutOfBoundsException`;
  #L1d54e8.  v2:= new `java.lang.StringBuilder`;
  #L1d54ec.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d54f2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d54f8.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d54fe.  v4:= ", toIndex: " @kind object;
  #L1d5502.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5508.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d550e.  v4:= ", size: " @kind object;
  #L1d5512.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5518.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d551e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d5524.  v4:= temp @kind object;
  #L1d5526.  call `<init>`(v1, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d552c.  throw v1;
}
procedure `boolean` `orderedEquals$kotlin_stdlib`(`kotlin.r.b$a` v4 @kind this, `java.util.Collection` v5 @kind object, `java.util.Collection` v6 @kind object) @signature `Lkotlin/r/b$a;.orderedEquals$kotlin_stdlib:(Ljava/util/Collection;Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d52e8.  v0:= "c" @kind object;
  #L1d52ec.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d52f2.  v0:= "other" @kind object;
  #L1d52f6.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d52fc.  call temp:= `size`(v5) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L1d5302.  v0:= temp;
  #L1d5304.  call temp:= `size`(v6) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L1d530a.  v1:= temp;
  #L1d530c.  v2:= 0I;
  #L1d530e.  if v0 == v1 then goto L1d5314;
  #L1d5312.  return v2;
  #L1d5314.  call temp:= `iterator`(v6) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1d531a.  v6:= temp @kind object;
  #L1d531c.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1d5322.  v5:= temp @kind object;
  #L1d5324.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d532a.  v0:= temp;
  #L1d532c.  v1:= 1I;
  #L1d532e.  if v0 == 0 then goto L1d5352;
  #L1d5332.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d5338.  v0:= temp @kind object;
  #L1d533a.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d5340.  v3:= temp @kind object;
  #L1d5342.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1d5348.  v0:= temp;
  #L1d534a.  v0:= v0 ^~ v1 @kind int;
  #L1d534c.  if v0 == 0 then goto L1d5324;
  #L1d5350.  return v2;
  #L1d5352.  return v1;
}
procedure `int` `orderedHashCode$kotlin_stdlib`(`kotlin.r.b$a` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lkotlin/r/b$a;.orderedHashCode$kotlin_stdlib:(Ljava/util/Collection;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1d5364.  v0:= "c" @kind object;
  #L1d5368.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d536e.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1d5374.  v3:= temp @kind object;
  #L1d5376.  v0:= 1I;
  #L1d5378.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d537e.  v1:= temp;
  #L1d5380.  if v1 == 0 then goto L1d53a4;
  #L1d5384.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d538a.  v1:= temp @kind object;
  #L1d538c.  v0:= v0 * 31;
  #L1d5390.  if v1 == 0 then goto L1d539e;
  #L1d5394.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1d539a.  v1:= temp;
  #L1d539c.  goto L1d53a0;
  #L1d539e.  v1:= 0I;
  #L1d53a0.  v0:= v0 + v1 @kind int;
  #L1d53a2.  goto L1d5378;
  #L1d53a4.  return v0;
}
