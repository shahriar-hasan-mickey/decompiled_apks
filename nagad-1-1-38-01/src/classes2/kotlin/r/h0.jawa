record `kotlin.r.h0` @kind class @AccessFlag  extends `kotlin.r.g0` @kind class {
}
procedure `java.util.Set` `emptySet`() @signature `Lkotlin/r/h0;.emptySet:()Ljava/util/Set;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1d841c.  v0:= `@@kotlin.r.x.f` @type ^`kotlin.r.x` @kind object;
  #L1d8420.  return v0 @kind object;
}
procedure `java.util.HashSet` `hashSetOf`(`java.lang.Object`[] v2 @kind object) @signature `Lkotlin/r/h0;.hashSetOf:([Ljava/lang/Object;)Ljava/util/HashSet;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1d83e0.  v0:= "elements" @kind object;
  #L1d83e4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d83ea.  v0:= new `java.util.HashSet`;
  #L1d83ee.  v1:= length @variable v2;
  #L1d83f0.  call temp:= `mapCapacity`(v1) @signature `Lkotlin/r/a0;.mapCapacity:(I)I` @kind static;
  #L1d83f6.  v1:= temp;
  #L1d83f8.  call `<init>`(v0, v1) @signature `Ljava/util/HashSet;.<init>:(I)V` @kind direct;
  #L1d83fe.  call temp:= `toCollection`(v2, v0) @signature `Lkotlin/r/d;.toCollection:([Ljava/lang/Object;Ljava/util/Collection;)Ljava/util/Collection;` @kind static;
  #L1d8404.  v0:= (`java.util.HashSet`) v0 @kind object;
  #L1d8408.  return v0 @kind object;
}
procedure `java.util.Set` `optimizeReadOnlySet`(`java.util.Set` v2 @kind object) @signature `Lkotlin/r/h0;.optimizeReadOnlySet:(Ljava/util/Set;)Ljava/util/Set;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1d8434.  v0:= "$this$optimizeReadOnlySet" @kind object;
  #L1d8438.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d843e.  call temp:= `size`(v2) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L1d8444.  v0:= temp;
  #L1d8446.  if v0 == 0 then goto L1d846c;
  #L1d844a.  v1:= 1I;
  #L1d844c.  if v0 == v1 then goto L1d8452;
  #L1d8450.  goto L1d8474;
  #L1d8452.  call temp:= `iterator`(v2) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1d8458.  v2:= temp @kind object;
  #L1d845a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d8460.  v2:= temp @kind object;
  #L1d8462.  call temp:= `setOf`(v2) @signature `Lkotlin/r/g0;.setOf:(Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L1d8468.  v2:= temp @kind object;
  #L1d846a.  goto L1d8474;
  #L1d846c.  call temp:= `emptySet`() @signature `Lkotlin/r/h0;.emptySet:()Ljava/util/Set;` @kind static;
  #L1d8472.  v2:= temp @kind object;
  #L1d8474.  return v2 @kind object;
}
procedure `java.util.Set` `setOf`(`java.lang.Object`[] v1 @kind object) @signature `Lkotlin/r/h0;.setOf:([Ljava/lang/Object;)Ljava/util/Set;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d8488.  v0:= "elements" @kind object;
  #L1d848c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8492.  v0:= length @variable v1;
  #L1d8494.  if v0 <= 0 then goto L1d84a2;
  #L1d8498.  call temp:= `toSet`(v1) @signature `Lkotlin/r/h;.toSet:([Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L1d849e.  v1:= temp @kind object;
  #L1d84a0.  goto L1d84aa;
  #L1d84a2.  call temp:= `emptySet`() @signature `Lkotlin/r/h0;.emptySet:()Ljava/util/Set;` @kind static;
  #L1d84a8.  v1:= temp @kind object;
  #L1d84aa.  return v1 @kind object;
}
