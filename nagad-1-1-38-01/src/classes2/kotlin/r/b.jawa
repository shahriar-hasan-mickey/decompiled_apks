record `kotlin.r.b` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.r.a` @kind class, `java.util.List` @kind interface, `kotlin.v.c.q.a` @kind interface {
}
global `kotlin.r.b$a` `@@kotlin.r.b.f` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/r/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1d59a0.  v0:= new `kotlin.r.b$a`;
  #L1d59a4.  v1:= 0I;
  #L1d59a6.  call `<init>`(v0, v1) @signature `Lkotlin/r/b$a;.<init>:(Lkotlin/v/c/f;)V` @kind direct;
  #L1d59ac.  `@@kotlin.r.b.f` @type ^`kotlin.r.b$a` := v0 @kind object;
  #L1d59b0.  return @kind void;
}
procedure `void` `<init>`(`kotlin.r.b` v0 @kind this) @signature `Lkotlin/r/b;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L1d59c4.  call `<init>`(v0) @signature `Lkotlin/r/a;.<init>:()V` @kind direct;
  #L1d59ca.  return @kind void;
}
procedure `void` `add`(`kotlin.r.b` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/b;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L1d59dc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1d59e0.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L1d59e4.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d59ea.  throw v1;
}
procedure `boolean` `addAll`(`kotlin.r.b` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Lkotlin/r/b;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L1d57dc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1d57e0.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L1d57e4.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d57ea.  throw v1;
}
procedure `boolean` `equals`(`kotlin.r.b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d57fc.  if v2 != v1 then goto L1d5804;
  #L1d5800.  v2:= 1I;
  #L1d5802.  return v2;
  #L1d5804.  v0:= instanceof @variable v2 @type ^`java.util.List` @kind boolean;
  #L1d5808.  if v0 != 0 then goto L1d5810;
  #L1d580c.  v2:= 0I;
  #L1d580e.  return v2;
  #L1d5810.  v0:= `@@kotlin.r.b.f` @type ^`kotlin.r.b$a` @kind object;
  #L1d5814.  v2:= (`java.util.Collection`) v2 @kind object;
  #L1d5818.  call temp:= `orderedEquals$kotlin_stdlib`(v0, v1, v2) @signature `Lkotlin/r/b$a;.orderedEquals$kotlin_stdlib:(Ljava/util/Collection;Ljava/util/Collection;)Z` @kind virtual;
  #L1d581e.  v2:= temp;
  #L1d5820.  return v2;
}
procedure `java.lang.Object` `get`(`int` v0 ) @signature `Lkotlin/r/b;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `hashCode`(`kotlin.r.b` v1 @kind this) @signature `Lkotlin/r/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d5834.  v0:= `@@kotlin.r.b.f` @type ^`kotlin.r.b$a` @kind object;
  #L1d5838.  call temp:= `orderedHashCode$kotlin_stdlib`(v0, v1) @signature `Lkotlin/r/b$a;.orderedHashCode$kotlin_stdlib:(Ljava/util/Collection;)I` @kind virtual;
  #L1d583e.  v0:= temp;
  #L1d5840.  return v0;
}
procedure `int` `indexOf`(`kotlin.r.b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/r/b;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d5854.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1d585a.  v0:= temp @kind object;
  #L1d585c.  v1:= 0I;
  #L1d585e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d5864.  v2:= temp;
  #L1d5866.  if v2 == 0 then goto L1d5886;
  #L1d586a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d5870.  v2:= temp @kind object;
  #L1d5872.  call temp:= `areEqual`(v2, v4) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1d5878.  v2:= temp;
  #L1d587a.  if v2 == 0 then goto L1d5880;
  #L1d587e.  goto L1d5888;
  #L1d5880.  v1:= v1 + 1;
  #L1d5884.  goto L1d585e;
  #L1d5886.  v1:= -1I;
  #L1d5888.  return v1;
}
procedure `java.util.Iterator` `iterator`(`kotlin.r.b` v1 @kind this) @signature `Lkotlin/r/b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d592c.  v0:= new `kotlin.r.b$b`;
  #L1d5930.  call `<init>`(v0, v1) @signature `Lkotlin/r/b$b;.<init>:(Lkotlin/r/b;)V` @kind direct;
  #L1d5936.  return v0 @kind object;
}
procedure `int` `lastIndexOf`(`kotlin.r.b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/r/b;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d589c.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1d58a2.  v0:= temp;
  #L1d58a4.  call temp:= `listIterator`(v2, v0) @signature `Ljava/util/List;.listIterator:(I)Ljava/util/ListIterator;` @kind interface;
  #L1d58aa.  v0:= temp @kind object;
  #L1d58ac.  call temp:= `hasPrevious`(v0) @signature `Ljava/util/ListIterator;.hasPrevious:()Z` @kind interface;
  #L1d58b2.  v1:= temp;
  #L1d58b4.  if v1 == 0 then goto L1d58d6;
  #L1d58b8.  call temp:= `previous`(v0) @signature `Ljava/util/ListIterator;.previous:()Ljava/lang/Object;` @kind interface;
  #L1d58be.  v1:= temp @kind object;
  #L1d58c0.  call temp:= `areEqual`(v1, v3) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1d58c6.  v1:= temp;
  #L1d58c8.  if v1 == 0 then goto L1d58ac;
  #L1d58cc.  call temp:= `nextIndex`(v0) @signature `Ljava/util/ListIterator;.nextIndex:()I` @kind interface;
  #L1d58d2.  v3:= temp;
  #L1d58d4.  goto L1d58d8;
  #L1d58d6.  v3:= -1I;
  #L1d58d8.  return v3;
}
procedure `java.util.ListIterator` `listIterator`(`kotlin.r.b` v2 @kind this) @signature `Lkotlin/r/b;.listIterator:()Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d5964.  v0:= new `kotlin.r.b$c`;
  #L1d5968.  v1:= 0I;
  #L1d596a.  call `<init>`(v0, v2, v1) @signature `Lkotlin/r/b$c;.<init>:(Lkotlin/r/b;I)V` @kind direct;
  #L1d5970.  return v0 @kind object;
}
procedure `java.util.ListIterator` `listIterator`(`kotlin.r.b` v1 @kind this, `int` v2 ) @signature `Lkotlin/r/b;.listIterator:(I)Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d5984.  v0:= new `kotlin.r.b$c`;
  #L1d5988.  call `<init>`(v0, v1, v2) @signature `Lkotlin/r/b$c;.<init>:(Lkotlin/r/b;I)V` @kind direct;
  #L1d598e.  return v0 @kind object;
}
procedure `java.lang.Object` `remove`(`kotlin.r.b` v1 @kind this, `int` v2 ) @signature `Lkotlin/r/b;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d58ec.  v2:= new `java.lang.UnsupportedOperationException`;
  #L1d58f0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L1d58f4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d58fa.  throw v2;
}
procedure `java.lang.Object` `set`(`kotlin.r.b` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lkotlin/r/b;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L1d590c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1d5910.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L1d5914.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d591a.  throw v1;
}
procedure `java.util.List` `subList`(`kotlin.r.b` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/r/b;.subList:(II)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d5948.  v0:= new `kotlin.r.b$d`;
  #L1d594c.  call `<init>`(v0, v1, v2, v3) @signature `Lkotlin/r/b$d;.<init>:(Lkotlin/r/b;II)V` @kind direct;
  #L1d5952.  return v0 @kind object;
}
