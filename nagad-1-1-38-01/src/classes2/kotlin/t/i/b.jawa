record `kotlin.t.i.b` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.t.i.d` @kind class {
}
procedure `kotlin.t.d` `createCoroutineUnintercepted`(`kotlin.v.b.p` v0 @kind object, `java.lang.Object` v1 @kind object, `kotlin.t.d` v2 @kind object) @signature `Lkotlin/t/i/b;.createCoroutineUnintercepted:(Lkotlin/v/b/p;Ljava/lang/Object;Lkotlin/t/d;)Lkotlin/t/d;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1d9354.  call temp:= `createCoroutineUnintercepted`(v0, v1, v2) @signature `Lkotlin/t/i/c;.createCoroutineUnintercepted:(Lkotlin/v/b/p;Ljava/lang/Object;Lkotlin/t/d;)Lkotlin/t/d;` @kind static;
  #L1d935a.  v0:= temp @kind object;
  #L1d935c.  return v0 @kind object;
}
procedure `java.lang.Object` `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/t/i/b;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;

  #L1d9338.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/t/i/d;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1d933e.  v0:= temp @kind object;
  #L1d9340.  return v0 @kind object;
}
procedure `kotlin.t.d` `intercepted`(`kotlin.t.d` v0 @kind object) @signature `Lkotlin/t/i/b;.intercepted:(Lkotlin/t/d;)Lkotlin/t/d;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1d9370.  call temp:= `intercepted`(v0) @signature `Lkotlin/t/i/c;.intercepted:(Lkotlin/t/d;)Lkotlin/t/d;` @kind static;
  #L1d9376.  v0:= temp @kind object;
  #L1d9378.  return v0 @kind object;
}
