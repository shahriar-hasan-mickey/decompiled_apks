record `kotlin.t.c` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.t.g` @kind interface, `java.io.Serializable` @kind interface {
  `kotlin.t.g` `kotlin.t.c.f` @AccessFlag PRIVATE_FINAL;
  `kotlin.t.g$b` `kotlin.t.c.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.t.c` v1 @kind this, `kotlin.t.g` v2 @kind object, `kotlin.t.g$b` v3 @kind object) @signature `Lkotlin/t/c;.<init>:(Lkotlin/t/g;Lkotlin/t/g$b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d8bbc.  v0:= "left" @kind object;
  #L1d8bc0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8bc6.  v0:= "element" @kind object;
  #L1d8bca.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8bd0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d8bd6.  v1.`kotlin.t.c.f` @type ^`kotlin.t.g` := v2 @kind object;
  #L1d8bda.  v1.`kotlin.t.c.g` @type ^`kotlin.t.g$b` := v3 @kind object;
  #L1d8bde.  return @kind void;
}
procedure `int` `a`(`kotlin.t.c` v3 @kind this) @signature `Lkotlin/t/c;.a:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1d89b4.  v0:= 2I;
  #L1d89b6.  v1:= 2I;
  #L1d89b8.  v0:= v3 @kind object;
  #L1d89ba.  v0:= v0.`kotlin.t.c.f` @type ^`kotlin.t.g` @kind object;
  #L1d89be.  v2:= instanceof @variable v0 @type ^`kotlin.t.c` @kind boolean;
  #L1d89c2.  if v2 != 0 then goto L1d89c8;
  #L1d89c6.  v0:= 0I;
  #L1d89c8.  v0:= (`kotlin.t.c`) v0 @kind object;
  #L1d89cc.  if v0 == 0 then goto L1d89d6;
  #L1d89d0.  v1:= v1 + 1;
  #L1d89d4.  goto L1d89ba;
  #L1d89d6.  return v1;
}
procedure `boolean` `a`(`kotlin.t.c` v1 @kind this, `kotlin.t.c` v2 @kind object) @signature `Lkotlin/t/c;.a:(Lkotlin/t/c;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1d88e4.  v0:= v2.`kotlin.t.c.g` @type ^`kotlin.t.g$b` @kind object;
  #L1d88e8.  call temp:= `a`(v1, v0) @signature `Lkotlin/t/c;.a:(Lkotlin/t/g$b;)Z` @kind direct;
  #L1d88ee.  v0:= temp;
  #L1d88f0.  if v0 != 0 then goto L1d88f8;
  #L1d88f4.  v2:= 0I;
  #L1d88f6.  return v2;
  #L1d88f8.  v2:= v2.`kotlin.t.c.f` @type ^`kotlin.t.g` @kind object;
  #L1d88fc.  v0:= instanceof @variable v2 @type ^`kotlin.t.c` @kind boolean;
  #L1d8900.  if v0 == 0 then goto L1d890a;
  #L1d8904.  v2:= (`kotlin.t.c`) v2 @kind object;
  #L1d8908.  goto L1d88e4;
  #L1d890a.  if v2 == 0 then goto L1d891c;
  #L1d890e.  v2:= (`kotlin.t.g$b`) v2 @kind object;
  #L1d8912.  call temp:= `a`(v1, v2) @signature `Lkotlin/t/c;.a:(Lkotlin/t/g$b;)Z` @kind direct;
  #L1d8918.  v2:= temp;
  #L1d891a.  return v2;
  #L1d891c.  v2:= new `java.lang.NullPointerException`;
  #L1d8920.  v0:= "null cannot be cast to non-null type kotlin.coroutines.CoroutineContext.Element" @kind object;
  #L1d8924.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d892a.  throw v2;
}
procedure `boolean` `a`(`kotlin.t.c` v1 @kind this, `kotlin.t.g$b` v2 @kind object) @signature `Lkotlin/t/c;.a:(Lkotlin/t/g$b;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1d88b8.  call temp:= `getKey`(v2) @signature `Lkotlin/t/g$b;.getKey:()Lkotlin/t/g$c;` @kind interface;
  #L1d88be.  v0:= temp @kind object;
  #L1d88c0.  call temp:= `get`(v1, v0) @signature `Lkotlin/t/c;.get:(Lkotlin/t/g$c;)Lkotlin/t/g$b;` @kind virtual;
  #L1d88c6.  v0:= temp @kind object;
  #L1d88c8.  call temp:= `areEqual`(v0, v2) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1d88ce.  v2:= temp;
  #L1d88d0.  return v2;
}
procedure `java.lang.Object` `writeReplace`(`kotlin.t.c` v6 @kind this) @signature `Lkotlin/t/c;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1d8a1c.  call temp:= `a`(v6) @signature `Lkotlin/t/c;.a:()I` @kind direct;
  #L1d8a22.  v0:= temp;
  #L1d8a24.  v1:= new `kotlin.t.g`[v0];
  #L1d8a28.  v2:= new `kotlin.v.c.k`;
  #L1d8a2c.  call `<init>`(v2) @signature `Lkotlin/v/c/k;.<init>:()V` @kind direct;
  #L1d8a32.  v3:= 0I;
  #L1d8a34.  v2.`kotlin.v.c.k.f` @type ^`int` := v3;
  #L1d8a38.  v4:= `@@kotlin.q.a` @type ^`kotlin.q` @kind object;
  #L1d8a3c.  v5:= new `kotlin.t.c$c`;
  #L1d8a40.  call `<init>`(v5, v1, v2) @signature `Lkotlin/t/c$c;.<init>:([Lkotlin/t/g;Lkotlin/v/c/k;)V` @kind direct;
  #L1d8a46.  call temp:= `fold`(v6, v4, v5) @signature `Lkotlin/t/c;.fold:(Ljava/lang/Object;Lkotlin/v/b/p;)Ljava/lang/Object;` @kind virtual;
  #L1d8a4c.  v2:= v2.`kotlin.v.c.k.f` @type ^`int`;
  #L1d8a50.  if v2 != v0 then goto L1d8a56;
  #L1d8a54.  v3:= 1I;
  #L1d8a56.  if v3 == 0 then goto L1d8a66;
  #L1d8a5a.  v0:= new `kotlin.t.c$a`;
  #L1d8a5e.  call `<init>`(v0, v1) @signature `Lkotlin/t/c$a;.<init>:([Lkotlin/t/g;)V` @kind direct;
  #L1d8a64.  return v0 @kind object;
  #L1d8a66.  v0:= new `java.lang.IllegalStateException`;
  #L1d8a6a.  v1:= "Check failed." @kind object;
  #L1d8a6e.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d8a74.  v1:= temp @kind object;
  #L1d8a76.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d8a7c.  throw v0;
}
procedure `boolean` `equals`(`kotlin.t.c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/t/c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d893c.  if v2 == v3 then goto L1d8972;
  #L1d8940.  v0:= instanceof @variable v3 @type ^`kotlin.t.c` @kind boolean;
  #L1d8944.  if v0 == 0 then goto L1d896e;
  #L1d8948.  v3:= (`kotlin.t.c`) v3 @kind object;
  #L1d894c.  call temp:= `a`(v3) @signature `Lkotlin/t/c;.a:()I` @kind direct;
  #L1d8952.  v0:= temp;
  #L1d8954.  call temp:= `a`(v2) @signature `Lkotlin/t/c;.a:()I` @kind direct;
  #L1d895a.  v1:= temp;
  #L1d895c.  if v0 != v1 then goto L1d896e;
  #L1d8960.  call temp:= `a`(v3, v2) @signature `Lkotlin/t/c;.a:(Lkotlin/t/c;)Z` @kind direct;
  #L1d8966.  v3:= temp;
  #L1d8968.  if v3 == 0 then goto L1d896e;
  #L1d896c.  goto L1d8972;
  #L1d896e.  v3:= 0I;
  #L1d8970.  goto L1d8974;
  #L1d8972.  v3:= 1I;
  #L1d8974.  return v3;
}
procedure `java.lang.Object` `fold`(`kotlin.t.c` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.v.b.p` v3 @kind object) @signature `Lkotlin/t/c;.fold:(Ljava/lang/Object;Lkotlin/v/b/p;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d89e8.  v0:= "operation" @kind object;
  #L1d89ec.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d89f2.  v0:= v1.`kotlin.t.c.f` @type ^`kotlin.t.g` @kind object;
  #L1d89f6.  call temp:= `fold`(v0, v2, v3) @signature `Lkotlin/t/g;.fold:(Ljava/lang/Object;Lkotlin/v/b/p;)Ljava/lang/Object;` @kind interface;
  #L1d89fc.  v2:= temp @kind object;
  #L1d89fe.  v0:= v1.`kotlin.t.c.g` @type ^`kotlin.t.g$b` @kind object;
  #L1d8a02.  call temp:= `invoke`(v3, v2, v0) @signature `Lkotlin/v/b/p;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1d8a08.  v2:= temp @kind object;
  #L1d8a0a.  return v2 @kind object;
}
procedure `kotlin.t.g$b` `get`(`kotlin.t.c` v2 @kind this, `kotlin.t.g$c` v3 @kind object) @signature `Lkotlin/t/c;.get:(Lkotlin/t/g$c;)Lkotlin/t/g$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d8b70.  v0:= "key" @kind object;
  #L1d8b74.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8b7a.  v0:= v2 @kind object;
  #L1d8b7c.  v1:= v0.`kotlin.t.c.g` @type ^`kotlin.t.g$b` @kind object;
  #L1d8b80.  call temp:= `get`(v1, v3) @signature `Lkotlin/t/g$b;.get:(Lkotlin/t/g$c;)Lkotlin/t/g$b;` @kind interface;
  #L1d8b86.  v1:= temp @kind object;
  #L1d8b88.  if v1 == 0 then goto L1d8b8e;
  #L1d8b8c.  return v1 @kind object;
  #L1d8b8e.  v0:= v0.`kotlin.t.c.f` @type ^`kotlin.t.g` @kind object;
  #L1d8b92.  v1:= instanceof @variable v0 @type ^`kotlin.t.c` @kind boolean;
  #L1d8b96.  if v1 == 0 then goto L1d8ba0;
  #L1d8b9a.  v0:= (`kotlin.t.c`) v0 @kind object;
  #L1d8b9e.  goto L1d8b7c;
  #L1d8ba0.  call temp:= `get`(v0, v3) @signature `Lkotlin/t/g;.get:(Lkotlin/t/g$c;)Lkotlin/t/g$b;` @kind interface;
  #L1d8ba6.  v3:= temp @kind object;
  #L1d8ba8.  return v3 @kind object;
}
procedure `int` `hashCode`(`kotlin.t.c` v2 @kind this) @signature `Lkotlin/t/c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d8988.  v0:= v2.`kotlin.t.c.f` @type ^`kotlin.t.g` @kind object;
  #L1d898c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1d8992.  v0:= temp;
  #L1d8994.  v1:= v2.`kotlin.t.c.g` @type ^`kotlin.t.g$b` @kind object;
  #L1d8998.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1d899e.  v1:= temp;
  #L1d89a0.  v0:= v0 + v1 @kind int;
  #L1d89a2.  return v0;
}
procedure `kotlin.t.g` `minusKey`(`kotlin.t.c` v2 @kind this, `kotlin.t.g$c` v3 @kind object) @signature `Lkotlin/t/c;.minusKey:(Lkotlin/t/g$c;)Lkotlin/t/g;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d8ae4.  v0:= "key" @kind object;
  #L1d8ae8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8aee.  v0:= v2.`kotlin.t.c.g` @type ^`kotlin.t.g$b` @kind object;
  #L1d8af2.  call temp:= `get`(v0, v3) @signature `Lkotlin/t/g$b;.get:(Lkotlin/t/g$c;)Lkotlin/t/g$b;` @kind interface;
  #L1d8af8.  v0:= temp @kind object;
  #L1d8afa.  if v0 == 0 then goto L1d8b04;
  #L1d8afe.  v3:= v2.`kotlin.t.c.f` @type ^`kotlin.t.g` @kind object;
  #L1d8b02.  return v3 @kind object;
  #L1d8b04.  v0:= v2.`kotlin.t.c.f` @type ^`kotlin.t.g` @kind object;
  #L1d8b08.  call temp:= `minusKey`(v0, v3) @signature `Lkotlin/t/g;.minusKey:(Lkotlin/t/g$c;)Lkotlin/t/g;` @kind interface;
  #L1d8b0e.  v3:= temp @kind object;
  #L1d8b10.  v0:= v2.`kotlin.t.c.f` @type ^`kotlin.t.g` @kind object;
  #L1d8b14.  if v3 != v0 then goto L1d8b1c;
  #L1d8b18.  v3:= v2 @kind object;
  #L1d8b1a.  goto L1d8b3a;
  #L1d8b1c.  v0:= `@@kotlin.t.h.f` @type ^`kotlin.t.h` @kind object;
  #L1d8b20.  if v3 != v0 then goto L1d8b2a;
  #L1d8b24.  v3:= v2.`kotlin.t.c.g` @type ^`kotlin.t.g$b` @kind object;
  #L1d8b28.  goto L1d8b3a;
  #L1d8b2a.  v0:= new `kotlin.t.c`;
  #L1d8b2e.  v1:= v2.`kotlin.t.c.g` @type ^`kotlin.t.g$b` @kind object;
  #L1d8b32.  call `<init>`(v0, v3, v1) @signature `Lkotlin/t/c;.<init>:(Lkotlin/t/g;Lkotlin/t/g$b;)V` @kind direct;
  #L1d8b38.  v3:= v0 @kind object;
  #L1d8b3a.  return v3 @kind object;
}
procedure `kotlin.t.g` `plus`(`kotlin.t.c` v1 @kind this, `kotlin.t.g` v2 @kind object) @signature `Lkotlin/t/c;.plus:(Lkotlin/t/g;)Lkotlin/t/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d8b4c.  v0:= "context" @kind object;
  #L1d8b50.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8b56.  call temp:= `plus`(v1, v2) @signature `Lkotlin/t/g$a;.plus:(Lkotlin/t/g;Lkotlin/t/g;)Lkotlin/t/g;` @kind static;
  #L1d8b5c.  v2:= temp @kind object;
  #L1d8b5e.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.t.c` v3 @kind this) @signature `Lkotlin/t/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d8a90.  v0:= new `java.lang.StringBuilder`;
  #L1d8a94.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d8a9a.  v1:= "[" @kind object;
  #L1d8a9e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d8aa4.  v1:= `@@kotlin.t.c$b.f` @type ^`kotlin.t.c$b` @kind object;
  #L1d8aa8.  v2:= "" @kind object;
  #L1d8aac.  call temp:= `fold`(v3, v2, v1) @signature `Lkotlin/t/c;.fold:(Ljava/lang/Object;Lkotlin/v/b/p;)Ljava/lang/Object;` @kind virtual;
  #L1d8ab2.  v1:= temp @kind object;
  #L1d8ab4.  v1:= (`java.lang.String`) v1 @kind object;
  #L1d8ab8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d8abe.  v1:= "]" @kind object;
  #L1d8ac2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d8ac8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d8ace.  v0:= temp @kind object;
  #L1d8ad0.  return v0 @kind object;
}
