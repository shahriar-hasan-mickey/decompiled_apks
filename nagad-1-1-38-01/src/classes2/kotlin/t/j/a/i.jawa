record `kotlin.t.j.a.i` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.t.j.a.a` @kind class {
}
procedure `void` `<init>`(`kotlin.t.j.a.i` v1 @kind this, `kotlin.t.d` v2 @kind object) @signature `Lkotlin/t/j/a/i;.<init>:(Lkotlin/t/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d9abc.  call `<init>`(v1, v2) @signature `Lkotlin/t/j/a/a;.<init>:(Lkotlin/t/d;)V` @kind direct;
  #L1d9ac2.  if v2 == 0 then goto L1d9afa;
  #L1d9ac6.  call temp:= `getContext`(v2) @signature `Lkotlin/t/d;.getContext:()Lkotlin/t/g;` @kind interface;
  #L1d9acc.  v2:= temp @kind object;
  #L1d9ace.  v0:= `@@kotlin.t.h.f` @type ^`kotlin.t.h` @kind object;
  #L1d9ad2.  if v2 != v0 then goto L1d9ada;
  #L1d9ad6.  v2:= 1I;
  #L1d9ad8.  goto L1d9adc;
  #L1d9ada.  v2:= 0I;
  #L1d9adc.  if v2 == 0 then goto L1d9ae2;
  #L1d9ae0.  goto L1d9afa;
  #L1d9ae2.  v2:= new `java.lang.IllegalArgumentException`;
  #L1d9ae6.  v0:= "Coroutines with restricted suspension must have EmptyCoroutineContext" @kind object;
  #L1d9aea.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d9af0.  v0:= temp @kind object;
  #L1d9af2.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d9af8.  throw v2;
  #L1d9afa.  return @kind void;
}
procedure `kotlin.t.g` `getContext`(`kotlin.t.j.a.i` v1 @kind this) @signature `Lkotlin/t/j/a/i;.getContext:()Lkotlin/t/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d9aa4.  v0:= `@@kotlin.t.h.f` @type ^`kotlin.t.h` @kind object;
  #L1d9aa8.  return v0 @kind object;
}
