record `kotlin.t.g$a` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `kotlin.t.g` `plus`(`kotlin.t.g` v1 @kind object, `kotlin.t.g` v2 @kind object) @signature `Lkotlin/t/g$a;.plus:(Lkotlin/t/g;Lkotlin/t/g;)Lkotlin/t/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d8d60.  v0:= "context" @kind object;
  #L1d8d64.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8d6a.  v0:= `@@kotlin.t.h.f` @type ^`kotlin.t.h` @kind object;
  #L1d8d6e.  if v2 != v0 then goto L1d8d74;
  #L1d8d72.  goto L1d8d84;
  #L1d8d74.  v0:= `@@kotlin.t.g$a$a.f` @type ^`kotlin.t.g$a$a` @kind object;
  #L1d8d78.  call temp:= `fold`(v2, v1, v0) @signature `Lkotlin/t/g;.fold:(Ljava/lang/Object;Lkotlin/v/b/p;)Ljava/lang/Object;` @kind interface;
  #L1d8d7e.  v1:= temp @kind object;
  #L1d8d80.  v1:= (`kotlin.t.g`) v1 @kind object;
  #L1d8d84.  return v1 @kind object;
}
