record `kotlin.t.g$b$a` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.Object` `fold`(`kotlin.t.g$b` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlin.v.b.p` v3 @kind object) @signature `Lkotlin/t/g$b$a;.fold:(Lkotlin/t/g$b;Ljava/lang/Object;Lkotlin/v/b/p;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d8d98.  v0:= "operation" @kind object;
  #L1d8d9c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8da2.  call temp:= `invoke`(v3, v2, v1) @signature `Lkotlin/v/b/p;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1d8da8.  v1:= temp @kind object;
  #L1d8daa.  return v1 @kind object;
}
procedure `kotlin.t.g$b` `get`(`kotlin.t.g$b` v1 @kind object, `kotlin.t.g$c` v2 @kind object) @signature `Lkotlin/t/g$b$a;.get:(Lkotlin/t/g$b;Lkotlin/t/g$c;)Lkotlin/t/g$b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d8e14.  v0:= "key" @kind object;
  #L1d8e18.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8e1e.  call temp:= `getKey`(v1) @signature `Lkotlin/t/g$b;.getKey:()Lkotlin/t/g$c;` @kind interface;
  #L1d8e24.  v0:= temp @kind object;
  #L1d8e26.  call temp:= `areEqual`(v0, v2) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1d8e2c.  v2:= temp;
  #L1d8e2e.  if v2 == 0 then goto L1d8e48;
  #L1d8e32.  if v1 == 0 then goto L1d8e38;
  #L1d8e36.  goto L1d8e4a;
  #L1d8e38.  v1:= new `java.lang.NullPointerException`;
  #L1d8e3c.  v2:= "null cannot be cast to non-null type E" @kind object;
  #L1d8e40.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d8e46.  throw v1;
  #L1d8e48.  v1:= 0I;
  #L1d8e4a.  return v1 @kind object;
}
procedure `kotlin.t.g` `minusKey`(`kotlin.t.g$b` v1 @kind object, `kotlin.t.g$c` v2 @kind object) @signature `Lkotlin/t/g$b$a;.minusKey:(Lkotlin/t/g$b;Lkotlin/t/g$c;)Lkotlin/t/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d8dbc.  v0:= "key" @kind object;
  #L1d8dc0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8dc6.  call temp:= `getKey`(v1) @signature `Lkotlin/t/g$b;.getKey:()Lkotlin/t/g$c;` @kind interface;
  #L1d8dcc.  v0:= temp @kind object;
  #L1d8dce.  call temp:= `areEqual`(v0, v2) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1d8dd4.  v2:= temp;
  #L1d8dd6.  if v2 == 0 then goto L1d8dde;
  #L1d8dda.  v1:= `@@kotlin.t.h.f` @type ^`kotlin.t.h` @kind object;
  #L1d8dde.  return v1 @kind object;
}
procedure `kotlin.t.g` `plus`(`kotlin.t.g$b` v1 @kind object, `kotlin.t.g` v2 @kind object) @signature `Lkotlin/t/g$b$a;.plus:(Lkotlin/t/g$b;Lkotlin/t/g;)Lkotlin/t/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d8df0.  v0:= "context" @kind object;
  #L1d8df4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8dfa.  call temp:= `plus`(v1, v2) @signature `Lkotlin/t/g$a;.plus:(Lkotlin/t/g;Lkotlin/t/g;)Lkotlin/t/g;` @kind static;
  #L1d8e00.  v1:= temp @kind object;
  #L1d8e02.  return v1 @kind object;
}
