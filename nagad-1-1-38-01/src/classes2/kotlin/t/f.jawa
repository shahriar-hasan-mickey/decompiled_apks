record `kotlin.t.f` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `startCoroutine`(`kotlin.v.b.p` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlin.t.d` v3 @kind object) @signature `Lkotlin/t/f;.startCoroutine:(Lkotlin/v/b/p;Ljava/lang/Object;Lkotlin/t/d;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1d8d14.  v0:= "$this$startCoroutine" @kind object;
  #L1d8d18.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8d1e.  v0:= "completion" @kind object;
  #L1d8d22.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8d28.  call temp:= `createCoroutineUnintercepted`(v1, v2, v3) @signature `Lkotlin/t/i/b;.createCoroutineUnintercepted:(Lkotlin/v/b/p;Ljava/lang/Object;Lkotlin/t/d;)Lkotlin/t/d;` @kind static;
  #L1d8d2e.  v1:= temp @kind object;
  #L1d8d30.  call temp:= `intercepted`(v1) @signature `Lkotlin/t/i/b;.intercepted:(Lkotlin/t/d;)Lkotlin/t/d;` @kind static;
  #L1d8d36.  v1:= temp @kind object;
  #L1d8d38.  v2:= `@@kotlin.q.a` @type ^`kotlin.q` @kind object;
  #L1d8d3c.  v3:= `@@kotlin.l.f` @type ^`kotlin.l$a` @kind object;
  #L1d8d40.  call temp:= `constructor-impl`(v2) @signature `Lkotlin/l;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1d8d46.  call `resumeWith`(v1, v2) @signature `Lkotlin/t/d;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L1d8d4c.  return @kind void;
}
