record `kotlin.t.e$a` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `kotlin.t.g$b` `get`(`kotlin.t.e` v2 @kind object, `kotlin.t.g$c` v3 @kind object) @signature `Lkotlin/t/e$a;.get:(Lkotlin/t/e;Lkotlin/t/g$c;)Lkotlin/t/g$b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1d8c4c.  v0:= "key" @kind object;
  #L1d8c50.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8c56.  v0:= instanceof @variable v3 @type ^`kotlin.t.b` @kind boolean;
  #L1d8c5a.  v1:= 0I;
  #L1d8c5c.  if v0 == 0 then goto L1d8c8e;
  #L1d8c60.  v3:= (`kotlin.t.b`) v3 @kind object;
  #L1d8c64.  call temp:= `getKey`(v2) @signature `Lkotlin/t/g$b;.getKey:()Lkotlin/t/g$c;` @kind interface;
  #L1d8c6a.  v0:= temp @kind object;
  #L1d8c6c.  call temp:= `isSubKey$kotlin_stdlib`(v3, v0) @signature `Lkotlin/t/b;.isSubKey$kotlin_stdlib:(Lkotlin/t/g$c;)Z` @kind virtual;
  #L1d8c72.  v0:= temp;
  #L1d8c74.  if v0 == 0 then goto L1d8c8c;
  #L1d8c78.  call temp:= `tryCast$kotlin_stdlib`(v3, v2) @signature `Lkotlin/t/b;.tryCast$kotlin_stdlib:(Lkotlin/t/g$b;)Lkotlin/t/g$b;` @kind virtual;
  #L1d8c7e.  v2:= temp @kind object;
  #L1d8c80.  v3:= instanceof @variable v2 @type ^`kotlin.t.g$b` @kind boolean;
  #L1d8c84.  if v3 != 0 then goto L1d8c8a;
  #L1d8c88.  goto L1d8c8c;
  #L1d8c8a.  v1:= v2 @kind object;
  #L1d8c8c.  return v1 @kind object;
  #L1d8c8e.  v0:= `@@kotlin.t.e.c` @type ^`kotlin.t.e$b` @kind object;
  #L1d8c92.  if v0 != v3 then goto L1d8cac;
  #L1d8c96.  if v2 == 0 then goto L1d8c9c;
  #L1d8c9a.  goto L1d8cae;
  #L1d8c9c.  v2:= new `java.lang.NullPointerException`;
  #L1d8ca0.  v3:= "null cannot be cast to non-null type E" @kind object;
  #L1d8ca4.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d8caa.  throw v2;
  #L1d8cac.  v2:= v1 @kind object;
  #L1d8cae.  return v2 @kind object;
}
procedure `kotlin.t.g` `minusKey`(`kotlin.t.e` v1 @kind object, `kotlin.t.g$c` v2 @kind object) @signature `Lkotlin/t/e$a;.minusKey:(Lkotlin/t/e;Lkotlin/t/g$c;)Lkotlin/t/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1d8bf0.  v0:= "key" @kind object;
  #L1d8bf4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8bfa.  v0:= instanceof @variable v2 @type ^`kotlin.t.b` @kind boolean;
  #L1d8bfe.  if v0 == 0 then goto L1d8c2c;
  #L1d8c02.  v2:= (`kotlin.t.b`) v2 @kind object;
  #L1d8c06.  call temp:= `getKey`(v1) @signature `Lkotlin/t/g$b;.getKey:()Lkotlin/t/g$c;` @kind interface;
  #L1d8c0c.  v0:= temp @kind object;
  #L1d8c0e.  call temp:= `isSubKey$kotlin_stdlib`(v2, v0) @signature `Lkotlin/t/b;.isSubKey$kotlin_stdlib:(Lkotlin/t/g$c;)Z` @kind virtual;
  #L1d8c14.  v0:= temp;
  #L1d8c16.  if v0 == 0 then goto L1d8c2a;
  #L1d8c1a.  call temp:= `tryCast$kotlin_stdlib`(v2, v1) @signature `Lkotlin/t/b;.tryCast$kotlin_stdlib:(Lkotlin/t/g$b;)Lkotlin/t/g$b;` @kind virtual;
  #L1d8c20.  v2:= temp @kind object;
  #L1d8c22.  if v2 == 0 then goto L1d8c2a;
  #L1d8c26.  v1:= `@@kotlin.t.h.f` @type ^`kotlin.t.h` @kind object;
  #L1d8c2a.  return v1 @kind object;
  #L1d8c2c.  v0:= `@@kotlin.t.e.c` @type ^`kotlin.t.e$b` @kind object;
  #L1d8c30.  if v0 != v2 then goto L1d8c38;
  #L1d8c34.  v1:= `@@kotlin.t.h.f` @type ^`kotlin.t.h` @kind object;
  #L1d8c38.  return v1 @kind object;
}
