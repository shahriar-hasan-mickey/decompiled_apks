record `kotlin.l` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Serializable` @kind interface {
}
global `kotlin.l$a` `@@kotlin.l.f` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/l;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1d4dd0.  v0:= new `kotlin.l$a`;
  #L1d4dd4.  v1:= 0I;
  #L1d4dd6.  call `<init>`(v0, v1) @signature `Lkotlin/l$a;.<init>:(Lkotlin/v/c/f;)V` @kind direct;
  #L1d4ddc.  `@@kotlin.l.f` @type ^`kotlin.l$a` := v0 @kind object;
  #L1d4de0.  return @kind void;
}
procedure `java.lang.Object` `constructor-impl`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/l;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1d4d94.  return v0 @kind object;
}
procedure `java.lang.Throwable` `exceptionOrNull-impl`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/l;.exceptionOrNull-impl:(Ljava/lang/Object;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1d4da8.  v0:= instanceof @variable v1 @type ^`kotlin.l$b` @kind boolean;
  #L1d4dac.  if v0 == 0 then goto L1d4dba;
  #L1d4db0.  v1:= (`kotlin.l$b`) v1 @kind object;
  #L1d4db4.  v1:= v1.`kotlin.l$b.f` @type ^`java.lang.Throwable` @kind object;
  #L1d4db8.  goto L1d4dbc;
  #L1d4dba.  v1:= 0I;
  #L1d4dbc.  return v1 @kind object;
}
procedure `boolean` `isFailure-impl`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/l;.isFailure-impl:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L1d4d60.  v0:= instanceof @variable v0 @type ^`kotlin.l$b` @kind boolean;
  #L1d4d64.  return v0;
}
procedure `boolean` `isSuccess-impl`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/l;.isSuccess-impl:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L1d4d78.  v0:= instanceof @variable v0 @type ^`kotlin.l$b` @kind boolean;
  #L1d4d7c.  v0:= v0 ^~ 1;
  #L1d4d80.  return v0;
}
