record `kotlin.u.a$a` @kind class @AccessFlag FINAL {
}
global `java.lang.reflect.Method` `@@kotlin.u.a$a.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/u/a$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1d9b7c.  v0:= new `kotlin.u.a$a`;
  #L1d9b80.  call `<init>`(v0) @signature `Lkotlin/u/a$a;.<init>:()V` @kind direct;
  #L1d9b86.  v0:= constclass @type ^`java.lang.Throwable` @kind object;
  #L1d9b8a.  call temp:= `getMethods`(v0) @signature `Ljava/lang/Class;.getMethods:()[Ljava/lang/reflect/Method;` @kind virtual;
  #L1d9b90.  v1:= temp @kind object;
  #L1d9b92.  v2:= "throwableMethods" @kind object;
  #L1d9b96.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9b9c.  v2:= length @variable v1;
  #L1d9b9e.  v3:= 0I;
  #L1d9ba0.  v4:= 0I;
  #L1d9ba2.  v5:= "it" @kind object;
  #L1d9ba6.  if v4 >= v2 then goto L1d9c08;
  #L1d9baa.  v6:= v1[v4] @kind object;
  #L1d9bae.  call `checkNotNullExpressionValue`(v6, v5) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9bb4.  call temp:= `getName`(v6) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L1d9bba.  v7:= temp @kind object;
  #L1d9bbc.  v8:= "addSuppressed" @kind object;
  #L1d9bc0.  call temp:= `areEqual`(v7, v8) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1d9bc6.  v7:= temp;
  #L1d9bc8.  if v7 == 0 then goto L1d9bfa;
  #L1d9bcc.  call temp:= `getParameterTypes`(v6) @signature `Ljava/lang/reflect/Method;.getParameterTypes:()[Ljava/lang/Class;` @kind virtual;
  #L1d9bd2.  v7:= temp @kind object;
  #L1d9bd4.  v8:= "it.parameterTypes" @kind object;
  #L1d9bd8.  call `checkNotNullExpressionValue`(v7, v8) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9bde.  call temp:= `singleOrNull`(v7) @signature `Lkotlin/r/d;.singleOrNull:([Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1d9be4.  v7:= temp @kind object;
  #L1d9be6.  v7:= (`java.lang.Class`) v7 @kind object;
  #L1d9bea.  call temp:= `areEqual`(v7, v0) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1d9bf0.  v7:= temp;
  #L1d9bf2.  if v7 == 0 then goto L1d9bfa;
  #L1d9bf6.  v7:= 1I;
  #L1d9bf8.  goto L1d9bfc;
  #L1d9bfa.  v7:= 0I;
  #L1d9bfc.  if v7 == 0 then goto L1d9c02;
  #L1d9c00.  goto L1d9c0a;
  #L1d9c02.  v4:= v4 + 1;
  #L1d9c06.  goto L1d9ba2;
  #L1d9c08.  v6:= 0I;
  #L1d9c0a.  `@@kotlin.u.a$a.a` @type ^`java.lang.reflect.Method` := v6 @kind object;
  #L1d9c0e.  v0:= length @variable v1;
  #L1d9c10.  if v3 >= v0 then goto L1d9c3e;
  #L1d9c14.  v2:= v1[v3] @kind object;
  #L1d9c18.  call `checkNotNullExpressionValue`(v2, v5) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9c1e.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L1d9c24.  v2:= temp @kind object;
  #L1d9c26.  v4:= "getSuppressed" @kind object;
  #L1d9c2a.  call temp:= `areEqual`(v2, v4) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1d9c30.  v2:= temp;
  #L1d9c32.  if v2 == 0 then goto L1d9c38;
  #L1d9c36.  goto L1d9c3e;
  #L1d9c38.  v3:= v3 + 1;
  #L1d9c3c.  goto L1d9c10;
  #L1d9c3e.  return @kind void;
}
procedure `void` `<init>`(`kotlin.u.a$a` v0 @kind this) @signature `Lkotlin/u/a$a;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1d9c50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d9c56.  return @kind void;
}
