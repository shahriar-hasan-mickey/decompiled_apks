record `kotlin.e` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Comparable` @kind interface {
  `int` `kotlin.e.f` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.e.g` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.e.h` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.e.i` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.e` `@@kotlin.e.j` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1d49ec.  v0:= new `kotlin.e$a`;
  #L1d49f0.  v1:= 0I;
  #L1d49f2.  call `<init>`(v0, v1) @signature `Lkotlin/e$a;.<init>:(Lkotlin/v/c/f;)V` @kind direct;
  #L1d49f8.  call temp:= `get`() @signature `Lkotlin/f;.get:()Lkotlin/e;` @kind static;
  #L1d49fe.  v0:= temp @kind object;
  #L1d4a00.  `@@kotlin.e.j` @type ^`kotlin.e` := v0 @kind object;
  #L1d4a04.  return @kind void;
}
procedure `void` `<init>`(`kotlin.e` v0 @kind this, `int` v1 , `int` v2 , `int` v3 ) @signature `Lkotlin/e;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1d4a18.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d4a1e.  v0.`kotlin.e.g` @type ^`int` := v1;
  #L1d4a22.  v0.`kotlin.e.h` @type ^`int` := v2;
  #L1d4a26.  v0.`kotlin.e.i` @type ^`int` := v3;
  #L1d4a2a.  v1:= v0.`kotlin.e.g` @type ^`int`;
  #L1d4a2e.  v2:= v0.`kotlin.e.h` @type ^`int`;
  #L1d4a32.  v3:= v0.`kotlin.e.i` @type ^`int`;
  #L1d4a36.  call temp:= `a`(v0, v1, v2, v3) @signature `Lkotlin/e;.a:(III)I` @kind direct;
  #L1d4a3c.  v1:= temp;
  #L1d4a3e.  v0.`kotlin.e.f` @type ^`int` := v1;
  #L1d4a42.  return @kind void;
}
procedure `int` `a`(`kotlin.e` v2 @kind this, `int` v3 , `int` v4 , `int` v5 ) @signature `Lkotlin/e;.a:(III)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1d48fc.  if v3 >= 0 then goto L1d4902;
  #L1d4900.  goto L1d4922;
  #L1d4902.  v0:= 255I;
  #L1d4906.  if v0 < v3 then goto L1d4922;
  #L1d490a.  if v4 >= 0 then goto L1d4910;
  #L1d490e.  goto L1d4922;
  #L1d4910.  if v0 < v4 then goto L1d4922;
  #L1d4914.  if v5 >= 0 then goto L1d491a;
  #L1d4918.  goto L1d4922;
  #L1d491a.  if v0 < v5 then goto L1d4922;
  #L1d491e.  v0:= 1I;
  #L1d4920.  goto L1d4924;
  #L1d4922.  v0:= 0I;
  #L1d4924.  if v0 == 0 then goto L1d4936;
  #L1d4928.  v3:= v3 ^< 16;
  #L1d492c.  v4:= v4 ^< 8;
  #L1d4930.  v3:= v3 + v4 @kind int;
  #L1d4932.  v3:= v3 + v5 @kind int;
  #L1d4934.  return v3;
  #L1d4936.  v0:= new `java.lang.StringBuilder`;
  #L1d493a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d4940.  v1:= "Version components are out of range: " @kind object;
  #L1d4944.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d494a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d4950.  v3:= 46I;
  #L1d4954.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d495a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d4960.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d4966.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d496c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4972.  v3:= temp @kind object;
  #L1d4974.  v4:= new `java.lang.IllegalArgumentException`;
  #L1d4978.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d497e.  v3:= temp @kind object;
  #L1d4980.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4986.  throw v4;
}
procedure `int` `compareTo`(`kotlin.e` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/e;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1d489c.  v1:= (`kotlin.e`) v1 @kind object;
  #L1d48a0.  call temp:= `compareTo`(v0, v1) @signature `Lkotlin/e;.compareTo:(Lkotlin/e;)I` @kind virtual;
  #L1d48a6.  v1:= temp;
  #L1d48a8.  return v1;
}
procedure `int` `compareTo`(`kotlin.e` v1 @kind this, `kotlin.e` v2 @kind object) @signature `Lkotlin/e;.compareTo:(Lkotlin/e;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d48bc.  v0:= "other" @kind object;
  #L1d48c0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d48c6.  v0:= v1.`kotlin.e.f` @type ^`int`;
  #L1d48ca.  v2:= v2.`kotlin.e.f` @type ^`int`;
  #L1d48ce.  v0:= v0 - v2 @kind int;
  #L1d48d0.  return v0;
}
procedure `boolean` `equals`(`kotlin.e` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/e;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d485c.  v0:= 1I;
  #L1d485e.  if v3 != v4 then goto L1d4864;
  #L1d4862.  return v0;
  #L1d4864.  v1:= instanceof @variable v4 @type ^`kotlin.e` @kind boolean;
  #L1d4868.  if v1 != 0 then goto L1d486e;
  #L1d486c.  v4:= 0I;
  #L1d486e.  v4:= (`kotlin.e`) v4 @kind object;
  #L1d4872.  v1:= 0I;
  #L1d4874.  if v4 == 0 then goto L1d488a;
  #L1d4878.  v2:= v3.`kotlin.e.f` @type ^`int`;
  #L1d487c.  v4:= v4.`kotlin.e.f` @type ^`int`;
  #L1d4880.  if v2 != v4 then goto L1d4886;
  #L1d4884.  goto L1d4888;
  #L1d4886.  v0:= 0I;
  #L1d4888.  return v0;
  #L1d488a.  return v1;
}
procedure `int` `hashCode`(`kotlin.e` v1 @kind this) @signature `Lkotlin/e;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d48e4.  v0:= v1.`kotlin.e.f` @type ^`int`;
  #L1d48e8.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.e` v3 @kind this) @signature `Lkotlin/e;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d4998.  v0:= new `java.lang.StringBuilder`;
  #L1d499c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d49a2.  v1:= v3.`kotlin.e.g` @type ^`int`;
  #L1d49a6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d49ac.  v1:= 46I;
  #L1d49b0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d49b6.  v2:= v3.`kotlin.e.h` @type ^`int`;
  #L1d49ba.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d49c0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d49c6.  v1:= v3.`kotlin.e.i` @type ^`int`;
  #L1d49ca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d49d0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d49d6.  v0:= temp @kind object;
  #L1d49d8.  return v0 @kind object;
}
