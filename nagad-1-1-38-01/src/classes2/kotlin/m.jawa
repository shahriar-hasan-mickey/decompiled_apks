record `kotlin.m` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.Object` `createFailure`(`java.lang.Throwable` v1 @kind object) @signature `Lkotlin/m;.createFailure:(Ljava/lang/Throwable;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1d4d14.  v0:= "exception" @kind object;
  #L1d4d18.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d4d1e.  v0:= new `kotlin.l$b`;
  #L1d4d22.  call `<init>`(v0, v1) @signature `Lkotlin/l$b;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1d4d28.  return v0 @kind object;
}
procedure `void` `throwOnFailure`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/m;.throwOnFailure:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1d4d3c.  v0:= instanceof @variable v1 @type ^`kotlin.l$b` @kind boolean;
  #L1d4d40.  if v0 != 0 then goto L1d4d46;
  #L1d4d44.  return @kind void;
  #L1d4d46.  v1:= (`kotlin.l$b`) v1 @kind object;
  #L1d4d4a.  v1:= v1.`kotlin.l$b.f` @type ^`java.lang.Throwable` @kind object;
  #L1d4d4e.  throw v1;
}
