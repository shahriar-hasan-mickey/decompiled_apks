record `kotlin.x.b` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface, `kotlin.v.c.q.a` @kind interface {
  `int` `kotlin.x.b.f` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.x.b.g` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.x.b.h` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.x.b$a` `@@kotlin.x.b.i` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/x/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1dbe28.  v0:= new `kotlin.x.b$a`;
  #L1dbe2c.  v1:= 0I;
  #L1dbe2e.  call `<init>`(v0, v1) @signature `Lkotlin/x/b$a;.<init>:(Lkotlin/v/c/f;)V` @kind direct;
  #L1dbe34.  `@@kotlin.x.b.i` @type ^`kotlin.x.b$a` := v0 @kind object;
  #L1dbe38.  return @kind void;
}
procedure `void` `<init>`(`kotlin.x.b` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lkotlin/x/b;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1dbe4c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1dbe52.  if v4 == 0 then goto L1dbe84;
  #L1dbe56.  v0:= -2147483648I;
  #L1dbe5a.  if v4 == v0 then goto L1dbe74;
  #L1dbe5e.  v1.`kotlin.x.b.f` @type ^`int` := v2;
  #L1dbe62.  call temp:= `getProgressionLastElement`(v2, v3, v4) @signature `Lkotlin/u/c;.getProgressionLastElement:(III)I` @kind static;
  #L1dbe68.  v2:= temp;
  #L1dbe6a.  v1.`kotlin.x.b.g` @type ^`int` := v2;
  #L1dbe6e.  v1.`kotlin.x.b.h` @type ^`int` := v4;
  #L1dbe72.  return @kind void;
  #L1dbe74.  v2:= new `java.lang.IllegalArgumentException`;
  #L1dbe78.  v3:= "Step must be greater than Int.MIN_VALUE to avoid overflow on negation." @kind object;
  #L1dbe7c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dbe82.  throw v2;
  #L1dbe84.  v2:= new `java.lang.IllegalArgumentException`;
  #L1dbe88.  v3:= "Step must be non-zero." @kind object;
  #L1dbe8c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dbe92.  throw v2;
}
procedure `boolean` `equals`(`kotlin.x.b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/x/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dbc28.  v0:= instanceof @variable v3 @type ^`kotlin.x.b` @kind boolean;
  #L1dbc2c.  if v0 == 0 then goto L1dbc7a;
  #L1dbc30.  call temp:= `isEmpty`(v2) @signature `Lkotlin/x/b;.isEmpty:()Z` @kind virtual;
  #L1dbc36.  v0:= temp;
  #L1dbc38.  if v0 == 0 then goto L1dbc4e;
  #L1dbc3c.  v0:= v3 @kind object;
  #L1dbc3e.  v0:= (`kotlin.x.b`) v0 @kind object;
  #L1dbc42.  call temp:= `isEmpty`(v0) @signature `Lkotlin/x/b;.isEmpty:()Z` @kind virtual;
  #L1dbc48.  v0:= temp;
  #L1dbc4a.  if v0 != 0 then goto L1dbc76;
  #L1dbc4e.  v0:= v2.`kotlin.x.b.f` @type ^`int`;
  #L1dbc52.  v3:= (`kotlin.x.b`) v3 @kind object;
  #L1dbc56.  v1:= v3.`kotlin.x.b.f` @type ^`int`;
  #L1dbc5a.  if v0 != v1 then goto L1dbc7a;
  #L1dbc5e.  v0:= v2.`kotlin.x.b.g` @type ^`int`;
  #L1dbc62.  v1:= v3.`kotlin.x.b.g` @type ^`int`;
  #L1dbc66.  if v0 != v1 then goto L1dbc7a;
  #L1dbc6a.  v0:= v2.`kotlin.x.b.h` @type ^`int`;
  #L1dbc6e.  v3:= v3.`kotlin.x.b.h` @type ^`int`;
  #L1dbc72.  if v0 != v3 then goto L1dbc7a;
  #L1dbc76.  v3:= 1I;
  #L1dbc78.  goto L1dbc7c;
  #L1dbc7a.  v3:= 0I;
  #L1dbc7c.  return v3;
}
procedure `int` `getFirst`(`kotlin.x.b` v1 @kind this) @signature `Lkotlin/x/b;.getFirst:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1dbccc.  v0:= v1.`kotlin.x.b.f` @type ^`int`;
  #L1dbcd0.  return v0;
}
procedure `int` `getLast`(`kotlin.x.b` v1 @kind this) @signature `Lkotlin/x/b;.getLast:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1dbce4.  v0:= v1.`kotlin.x.b.g` @type ^`int`;
  #L1dbce8.  return v0;
}
procedure `int` `getStep`(`kotlin.x.b` v1 @kind this) @signature `Lkotlin/x/b;.getStep:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1dbcfc.  v0:= v1.`kotlin.x.b.h` @type ^`int`;
  #L1dbd00.  return v0;
}
procedure `int` `hashCode`(`kotlin.x.b` v2 @kind this) @signature `Lkotlin/x/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dbd14.  call temp:= `isEmpty`(v2) @signature `Lkotlin/x/b;.isEmpty:()Z` @kind virtual;
  #L1dbd1a.  v0:= temp;
  #L1dbd1c.  if v0 == 0 then goto L1dbd24;
  #L1dbd20.  v0:= -1I;
  #L1dbd22.  goto L1dbd3c;
  #L1dbd24.  v0:= v2.`kotlin.x.b.f` @type ^`int`;
  #L1dbd28.  v0:= v0 * 31;
  #L1dbd2c.  v1:= v2.`kotlin.x.b.g` @type ^`int`;
  #L1dbd30.  v0:= v0 + v1 @kind int;
  #L1dbd32.  v0:= v0 * 31;
  #L1dbd36.  v1:= v2.`kotlin.x.b.h` @type ^`int`;
  #L1dbd3a.  v0:= v0 + v1 @kind int;
  #L1dbd3c.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.x.b` v4 @kind this) @signature `Lkotlin/x/b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1dbc90.  v0:= v4.`kotlin.x.b.h` @type ^`int`;
  #L1dbc94.  v1:= 1I;
  #L1dbc96.  v2:= 0I;
  #L1dbc98.  if v0 <= 0 then goto L1dbcaa;
  #L1dbc9c.  v0:= v4.`kotlin.x.b.f` @type ^`int`;
  #L1dbca0.  v3:= v4.`kotlin.x.b.g` @type ^`int`;
  #L1dbca4.  if v0 <= v3 then goto L1dbcb8;
  #L1dbca8.  goto L1dbcba;
  #L1dbcaa.  v0:= v4.`kotlin.x.b.f` @type ^`int`;
  #L1dbcae.  v3:= v4.`kotlin.x.b.g` @type ^`int`;
  #L1dbcb2.  if v0 >= v3 then goto L1dbcb8;
  #L1dbcb6.  goto L1dbcba;
  #L1dbcb8.  v1:= 0I;
  #L1dbcba.  return v1;
}
procedure `java.util.Iterator` `iterator`(`kotlin.x.b` v1 @kind this) @signature `Lkotlin/x/b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1dbde4.  call temp:= `iterator`(v1) @signature `Lkotlin/x/b;.iterator:()Lkotlin/r/y;` @kind virtual;
  #L1dbdea.  v0:= temp @kind object;
  #L1dbdec.  return v0 @kind object;
}
procedure `kotlin.r.y` `iterator`(`kotlin.x.b` v4 @kind this) @signature `Lkotlin/x/b;.iterator:()Lkotlin/r/y;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1dbe00.  v0:= new `kotlin.x.c`;
  #L1dbe04.  v1:= v4.`kotlin.x.b.f` @type ^`int`;
  #L1dbe08.  v2:= v4.`kotlin.x.b.g` @type ^`int`;
  #L1dbe0c.  v3:= v4.`kotlin.x.b.h` @type ^`int`;
  #L1dbe10.  call `<init>`(v0, v1, v2, v3) @signature `Lkotlin/x/c;.<init>:(III)V` @kind direct;
  #L1dbe16.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.x.b` v3 @kind this) @signature `Lkotlin/x/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1dbd50.  v0:= v3.`kotlin.x.b.h` @type ^`int`;
  #L1dbd54.  v1:= " step " @kind object;
  #L1dbd58.  if v0 <= 0 then goto L1dbd90;
  #L1dbd5c.  v0:= new `java.lang.StringBuilder`;
  #L1dbd60.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dbd66.  v2:= v3.`kotlin.x.b.f` @type ^`int`;
  #L1dbd6a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbd70.  v2:= ".." @kind object;
  #L1dbd74.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbd7a.  v2:= v3.`kotlin.x.b.g` @type ^`int`;
  #L1dbd7e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbd84.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbd8a.  v1:= v3.`kotlin.x.b.h` @type ^`int`;
  #L1dbd8e.  goto L1dbdc4;
  #L1dbd90.  v0:= new `java.lang.StringBuilder`;
  #L1dbd94.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dbd9a.  v2:= v3.`kotlin.x.b.f` @type ^`int`;
  #L1dbd9e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbda4.  v2:= " downTo " @kind object;
  #L1dbda8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbdae.  v2:= v3.`kotlin.x.b.g` @type ^`int`;
  #L1dbdb2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbdb8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbdbe.  v1:= v3.`kotlin.x.b.h` @type ^`int`;
  #L1dbdc2.  v1:= -v1 @kind int;
  #L1dbdc4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbdca.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dbdd0.  v0:= temp @kind object;
  #L1dbdd2.  return v0 @kind object;
}
