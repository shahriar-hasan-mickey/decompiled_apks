record `kotlin.x.c` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.r.y` @kind class {
  `int` `kotlin.x.c.f` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.x.c.g` @AccessFlag PRIVATE;
  `int` `kotlin.x.c.h` @AccessFlag PRIVATE;
  `int` `kotlin.x.c.i` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.x.c` v2 @kind this, `int` v3 , `int` v4 , `int` v5 ) @signature `Lkotlin/x/c;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1dbbd8.  call `<init>`(v2) @signature `Lkotlin/r/y;.<init>:()V` @kind direct;
  #L1dbbde.  v2.`kotlin.x.c.i` @type ^`int` := v5;
  #L1dbbe2.  v2.`kotlin.x.c.f` @type ^`int` := v4;
  #L1dbbe6.  v5:= v2.`kotlin.x.c.i` @type ^`int`;
  #L1dbbea.  v0:= 1I;
  #L1dbbec.  v1:= 0I;
  #L1dbbee.  if v5 <= 0 then goto L1dbbf8;
  #L1dbbf2.  if v3 > v4 then goto L1dbbfe;
  #L1dbbf6.  goto L1dbc00;
  #L1dbbf8.  if v3 < v4 then goto L1dbbfe;
  #L1dbbfc.  goto L1dbc00;
  #L1dbbfe.  v0:= 0I;
  #L1dbc00.  v2.`kotlin.x.c.g` @type ^`boolean` := v0 @kind boolean;
  #L1dbc04.  v4:= v2.`kotlin.x.c.g` @type ^`boolean` @kind boolean;
  #L1dbc08.  if v4 == 0 then goto L1dbc0e;
  #L1dbc0c.  goto L1dbc12;
  #L1dbc0e.  v3:= v2.`kotlin.x.c.f` @type ^`int`;
  #L1dbc12.  v2.`kotlin.x.c.h` @type ^`int` := v3;
  #L1dbc16.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.x.c` v1 @kind this) @signature `Lkotlin/x/c;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbb7c.  v0:= v1.`kotlin.x.c.g` @type ^`boolean` @kind boolean;
  #L1dbb80.  return v0;
}
procedure `int` `nextInt`(`kotlin.x.c` v2 @kind this) @signature `Lkotlin/x/c;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dbb94.  v0:= v2.`kotlin.x.c.h` @type ^`int`;
  #L1dbb98.  v1:= v2.`kotlin.x.c.f` @type ^`int`;
  #L1dbb9c.  if v0 != v1 then goto L1dbbbc;
  #L1dbba0.  v1:= v2.`kotlin.x.c.g` @type ^`boolean` @kind boolean;
  #L1dbba4.  if v1 == 0 then goto L1dbbb0;
  #L1dbba8.  v1:= 0I;
  #L1dbbaa.  v2.`kotlin.x.c.g` @type ^`boolean` := v1 @kind boolean;
  #L1dbbae.  goto L1dbbc6;
  #L1dbbb0.  v0:= new `java.util.NoSuchElementException`;
  #L1dbbb4.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L1dbbba.  throw v0;
  #L1dbbbc.  v1:= v2.`kotlin.x.c.i` @type ^`int`;
  #L1dbbc0.  v1:= v1 + v0 @kind int;
  #L1dbbc2.  v2.`kotlin.x.c.h` @type ^`int` := v1;
  #L1dbbc6.  return v0;
}
