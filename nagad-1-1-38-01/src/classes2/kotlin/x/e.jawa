record `kotlin.x.e` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.x.g` @kind class {
}
procedure `int` `coerceAtLeast`(`int` v0 , `int` v1 ) @signature `Lkotlin/x/e;.coerceAtLeast:(II)I` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1dc2a0.  call temp:= `coerceAtLeast`(v0, v1) @signature `Lkotlin/x/g;.coerceAtLeast:(II)I` @kind static;
  #L1dc2a6.  v0:= temp;
  #L1dc2a8.  return v0;
}
procedure `long` `coerceAtLeast`(`long` v0 , `long` v2 ) @signature `Lkotlin/x/e;.coerceAtLeast:(JJ)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1dc348.  call temp:= `coerceAtLeast`(v0, v2) @signature `Lkotlin/x/g;.coerceAtLeast:(JJ)J` @kind static;
  #L1dc34e.  v0:= temp @kind wide;
  #L1dc350.  return v0 @kind wide;
}
procedure `int` `coerceAtMost`(`int` v0 , `int` v1 ) @signature `Lkotlin/x/e;.coerceAtMost:(II)I` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1dc2bc.  call temp:= `coerceAtMost`(v0, v1) @signature `Lkotlin/x/g;.coerceAtMost:(II)I` @kind static;
  #L1dc2c2.  v0:= temp;
  #L1dc2c4.  return v0;
}
procedure `long` `coerceAtMost`(`long` v0 , `long` v2 ) @signature `Lkotlin/x/e;.coerceAtMost:(JJ)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1dc364.  call temp:= `coerceAtMost`(v0, v2) @signature `Lkotlin/x/g;.coerceAtMost:(JJ)J` @kind static;
  #L1dc36a.  v0:= temp @kind wide;
  #L1dc36c.  return v0 @kind wide;
}
procedure `int` `coerceIn`(`int` v0 , `int` v1 , `int` v2 ) @signature `Lkotlin/x/e;.coerceIn:(III)I` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1dc2d8.  call temp:= `coerceIn`(v0, v1, v2) @signature `Lkotlin/x/g;.coerceIn:(III)I` @kind static;
  #L1dc2de.  v0:= temp;
  #L1dc2e0.  return v0;
}
procedure `kotlin.x.b` `downTo`(`int` v0 , `int` v1 ) @signature `Lkotlin/x/e;.downTo:(II)Lkotlin/x/b;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1dc2f4.  call temp:= `downTo`(v0, v1) @signature `Lkotlin/x/g;.downTo:(II)Lkotlin/x/b;` @kind static;
  #L1dc2fa.  v0:= temp @kind object;
  #L1dc2fc.  return v0 @kind object;
}
procedure `kotlin.x.b` `step`(`kotlin.x.b` v0 @kind object, `int` v1 ) @signature `Lkotlin/x/e;.step:(Lkotlin/x/b;I)Lkotlin/x/b;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1dc310.  call temp:= `step`(v0, v1) @signature `Lkotlin/x/g;.step:(Lkotlin/x/b;I)Lkotlin/x/b;` @kind static;
  #L1dc316.  v0:= temp @kind object;
  #L1dc318.  return v0 @kind object;
}
procedure `kotlin.x.d` `until`(`int` v0 , `int` v1 ) @signature `Lkotlin/x/e;.until:(II)Lkotlin/x/d;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1dc32c.  call temp:= `until`(v0, v1) @signature `Lkotlin/x/g;.until:(II)Lkotlin/x/d;` @kind static;
  #L1dc332.  v0:= temp @kind object;
  #L1dc334.  return v0 @kind object;
}
