record `kotlin.x.f` @kind class @AccessFlag  {
}
procedure `void` `checkStepIsPositive`(`boolean` v2 , `java.lang.Number` v3 @kind object) @signature `Lkotlin/x/f;.checkStepIsPositive:(ZLjava/lang/Number;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1dc0bc.  v0:= "step" @kind object;
  #L1dc0c0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dc0c6.  if v2 == 0 then goto L1dc0cc;
  #L1dc0ca.  return @kind void;
  #L1dc0cc.  v2:= new `java.lang.IllegalArgumentException`;
  #L1dc0d0.  v0:= new `java.lang.StringBuilder`;
  #L1dc0d4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dc0da.  v1:= "Step must be positive, was: " @kind object;
  #L1dc0de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dc0e4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dc0ea.  v3:= 46I;
  #L1dc0ee.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dc0f4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dc0fa.  v3:= temp @kind object;
  #L1dc0fc.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dc102.  throw v2;
}
