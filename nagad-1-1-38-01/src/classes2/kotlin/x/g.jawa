record `kotlin.x.g` @kind class @AccessFlag  extends `kotlin.x.f` @kind class {
}
procedure `int` `coerceAtLeast`(`int` v0 , `int` v1 ) @signature `Lkotlin/x/g;.coerceAtLeast:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1dc114.  if v0 >= v1 then goto L1dc11a;
  #L1dc118.  v0:= v1;
  #L1dc11a.  return v0;
}
procedure `long` `coerceAtLeast`(`long` v1 , `long` v3 ) @signature `Lkotlin/x/g;.coerceAtLeast:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1dc268.  v0:= lcmp(v1, v3);
  #L1dc26c.  if v0 >= 0 then goto L1dc272;
  #L1dc270.  v1:= v3 @kind wide;
  #L1dc272.  return v1 @kind wide;
}
procedure `int` `coerceAtMost`(`int` v0 , `int` v1 ) @signature `Lkotlin/x/g;.coerceAtMost:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1dc12c.  if v0 <= v1 then goto L1dc132;
  #L1dc130.  v0:= v1;
  #L1dc132.  return v0;
}
procedure `long` `coerceAtMost`(`long` v1 , `long` v3 ) @signature `Lkotlin/x/g;.coerceAtMost:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1dc284.  v0:= lcmp(v1, v3);
  #L1dc288.  if v0 <= 0 then goto L1dc28e;
  #L1dc28c.  v1:= v3 @kind wide;
  #L1dc28e.  return v1 @kind wide;
}
procedure `int` `coerceIn`(`int` v2 , `int` v3 , `int` v4 ) @signature `Lkotlin/x/g;.coerceIn:(III)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1dc144.  if v3 > v4 then goto L1dc156;
  #L1dc148.  if v2 >= v3 then goto L1dc14e;
  #L1dc14c.  return v3;
  #L1dc14e.  if v2 <= v4 then goto L1dc154;
  #L1dc152.  return v4;
  #L1dc154.  return v2;
  #L1dc156.  v2:= new `java.lang.IllegalArgumentException`;
  #L1dc15a.  v0:= new `java.lang.StringBuilder`;
  #L1dc15e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dc164.  v1:= "Cannot coerce value to an empty range: maximum " @kind object;
  #L1dc168.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dc16e.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dc174.  v4:= " is less than minimum " @kind object;
  #L1dc178.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dc17e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dc184.  v3:= 46I;
  #L1dc188.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dc18e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dc194.  v3:= temp @kind object;
  #L1dc196.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dc19c.  throw v2;
}
procedure `kotlin.x.b` `downTo`(`int` v2 , `int` v3 ) @signature `Lkotlin/x/g;.downTo:(II)Lkotlin/x/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1dc1b0.  v0:= `@@kotlin.x.b.i` @type ^`kotlin.x.b$a` @kind object;
  #L1dc1b4.  v1:= -1I;
  #L1dc1b6.  call temp:= `fromClosedRange`(v0, v2, v3, v1) @signature `Lkotlin/x/b$a;.fromClosedRange:(III)Lkotlin/x/b;` @kind virtual;
  #L1dc1bc.  v2:= temp @kind object;
  #L1dc1be.  return v2 @kind object;
}
procedure `kotlin.x.b` `step`(`kotlin.x.b` v3 @kind object, `int` v4 ) @signature `Lkotlin/x/g;.step:(Lkotlin/x/b;I)Lkotlin/x/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1dc1d0.  v0:= "$this$step" @kind object;
  #L1dc1d4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dc1da.  if v4 <= 0 then goto L1dc1e2;
  #L1dc1de.  v0:= 1I;
  #L1dc1e0.  goto L1dc1e4;
  #L1dc1e2.  v0:= 0I;
  #L1dc1e4.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1dc1ea.  v1:= temp @kind object;
  #L1dc1ec.  call `checkStepIsPositive`(v0, v1) @signature `Lkotlin/x/f;.checkStepIsPositive:(ZLjava/lang/Number;)V` @kind static;
  #L1dc1f2.  v0:= `@@kotlin.x.b.i` @type ^`kotlin.x.b$a` @kind object;
  #L1dc1f6.  call temp:= `getFirst`(v3) @signature `Lkotlin/x/b;.getFirst:()I` @kind virtual;
  #L1dc1fc.  v1:= temp;
  #L1dc1fe.  call temp:= `getLast`(v3) @signature `Lkotlin/x/b;.getLast:()I` @kind virtual;
  #L1dc204.  v2:= temp;
  #L1dc206.  call temp:= `getStep`(v3) @signature `Lkotlin/x/b;.getStep:()I` @kind virtual;
  #L1dc20c.  v3:= temp;
  #L1dc20e.  if v3 <= 0 then goto L1dc214;
  #L1dc212.  goto L1dc216;
  #L1dc214.  v4:= -v4 @kind int;
  #L1dc216.  call temp:= `fromClosedRange`(v0, v1, v2, v4) @signature `Lkotlin/x/b$a;.fromClosedRange:(III)Lkotlin/x/b;` @kind virtual;
  #L1dc21c.  v3:= temp @kind object;
  #L1dc21e.  return v3 @kind object;
}
procedure `kotlin.x.d` `until`(`int` v1 , `int` v2 ) @signature `Lkotlin/x/g;.until:(II)Lkotlin/x/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1dc230.  v0:= -2147483648I;
  #L1dc234.  if v2 > v0 then goto L1dc246;
  #L1dc238.  v1:= `@@kotlin.x.d.k` @type ^`kotlin.x.d$a` @kind object;
  #L1dc23c.  call temp:= `getEMPTY`(v1) @signature `Lkotlin/x/d$a;.getEMPTY:()Lkotlin/x/d;` @kind virtual;
  #L1dc242.  v1:= temp @kind object;
  #L1dc244.  return v1 @kind object;
  #L1dc246.  v0:= new `kotlin.x.d`;
  #L1dc24a.  v2:= v2 + -1;
  #L1dc24e.  call `<init>`(v0, v1, v2) @signature `Lkotlin/x/d;.<init>:(II)V` @kind direct;
  #L1dc254.  return v0 @kind object;
}
