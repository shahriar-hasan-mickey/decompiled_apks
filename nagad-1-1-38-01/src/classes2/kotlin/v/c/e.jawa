record `kotlin.v.c.e` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.Object`[] `@@kotlin.v.c.e.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/v/c/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1daf38.  v0:= 0I;
  #L1daf3a.  v0:= new `java.lang.Object`[v0];
  #L1daf3e.  `@@kotlin.v.c.e.a` @type ^`java.lang.Object`[] := v0 @kind object;
  #L1daf42.  return @kind void;
}
procedure `java.lang.Object`[] `toArray`(`java.util.Collection` v4 @kind object) @signature `Lkotlin/v/c/e;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1dad2c.  v0:= "collection" @kind object;
  #L1dad30.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dad36.  call temp:= `size`(v4) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L1dad3c.  v0:= temp;
  #L1dad3e.  if v0 != 0 then goto L1dad48;
  #L1dad42.  v4:= `@@kotlin.v.c.e.a` @type ^`java.lang.Object`[] @kind object;
  #L1dad46.  goto L1dadea;
  #L1dad48.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1dad4e.  v4:= temp @kind object;
  #L1dad50.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1dad56.  v1:= temp;
  #L1dad58.  if v1 != 0 then goto L1dad5e;
  #L1dad5c.  goto L1dad42;
  #L1dad5e.  v0:= new `java.lang.Object`[v0];
  #L1dad62.  v1:= 0I;
  #L1dad64.  v2:= v1 + 1;
  #L1dad68.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1dad6e.  v3:= temp @kind object;
  #L1dad70.  v0[v1]:= v3 @kind object;
  #L1dad74.  v1:= length @variable v0;
  #L1dad76.  if v2 < v1 then goto L1dadcc;
  #L1dad7a.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1dad80.  v1:= temp;
  #L1dad82.  if v1 != 0 then goto L1dad8a;
  #L1dad86.  v4:= v0 @kind object;
  #L1dad88.  goto L1dadea;
  #L1dad8a.  v1:= v2 * 3;
  #L1dad8e.  v1:= v1 + 1;
  #L1dad92.  v1:= v1 ^>> 1;
  #L1dad96.  v3:= 2147483645I;
  #L1dad9c.  if v1 > v2 then goto L1dadb8;
  #L1dada0.  if v2 >= v3 then goto L1dadac;
  #L1dada4.  v1:= 2147483645I;
  #L1dadaa.  goto L1dadb8;
  #L1dadac.  v4:= new `java.lang.OutOfMemoryError`;
  #L1dadb0.  call `<init>`(v4) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L1dadb6.  throw v4;
  #L1dadb8.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L1dadbe.  v0:= temp @kind object;
  #L1dadc0.  v1:= "Arrays.copyOf(result, newSize)" @kind object;
  #L1dadc4.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dadca.  goto L1dadec;
  #L1dadcc.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1dadd2.  v1:= temp;
  #L1dadd4.  if v1 != 0 then goto L1dadec;
  #L1dadd8.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L1dadde.  v4:= temp @kind object;
  #L1dade0.  v0:= "Arrays.copyOf(result, size)" @kind object;
  #L1dade4.  call `checkNotNullExpressionValue`(v4, v0) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dadea.  return v4 @kind object;
  #L1dadec.  v1:= v2;
  #L1dadee.  goto L1dad64;
}
procedure `java.lang.Object`[] `toArray`(`java.util.Collection` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Lkotlin/v/c/e;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1dae00.  v0:= "collection" @kind object;
  #L1dae04.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dae0a.  if v6 == 0 then goto L1daf1c;
  #L1dae0e.  call temp:= `size`(v5) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L1dae14.  v0:= temp;
  #L1dae16.  v1:= 0I;
  #L1dae18.  v2:= 0I;
  #L1dae1a.  if v0 != 0 then goto L1dae2c;
  #L1dae1e.  v5:= length @variable v6;
  #L1dae20.  if v5 <= 0 then goto L1daf06;
  #L1dae24.  v6[v2]:= v1 @kind object;
  #L1dae28.  goto L1daf06;
  #L1dae2c.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1dae32.  v5:= temp @kind object;
  #L1dae34.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1dae3a.  v3:= temp;
  #L1dae3c.  if v3 != 0 then goto L1dae4c;
  #L1dae40.  v5:= length @variable v6;
  #L1dae42.  if v5 <= 0 then goto L1daf06;
  #L1dae46.  v6[v2]:= v1 @kind object;
  #L1dae4a.  goto L1daf06;
  #L1dae4c.  v3:= length @variable v6;
  #L1dae4e.  if v0 > v3 then goto L1dae56;
  #L1dae52.  v0:= v6 @kind object;
  #L1dae54.  goto L1dae76;
  #L1dae56.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1dae5c.  v3:= temp @kind object;
  #L1dae5e.  call temp:= `getComponentType`(v3) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1dae64.  v3:= temp @kind object;
  #L1dae66.  call temp:= `newInstance`(v3, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L1dae6c.  v0:= temp @kind object;
  #L1dae6e.  if v0 == 0 then goto L1daf0c;
  #L1dae72.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L1dae76.  v3:= v2 + 1;
  #L1dae7a.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1dae80.  v4:= temp @kind object;
  #L1dae82.  v0[v2]:= v4 @kind object;
  #L1dae86.  v2:= length @variable v0;
  #L1dae88.  if v3 < v2 then goto L1daede;
  #L1dae8c.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1dae92.  v2:= temp;
  #L1dae94.  if v2 != 0 then goto L1dae9c;
  #L1dae98.  v6:= v0 @kind object;
  #L1dae9a.  goto L1daf06;
  #L1dae9c.  v2:= v3 * 3;
  #L1daea0.  v2:= v2 + 1;
  #L1daea4.  v2:= v2 ^>> 1;
  #L1daea8.  v4:= 2147483645I;
  #L1daeae.  if v2 > v3 then goto L1daeca;
  #L1daeb2.  if v3 >= v4 then goto L1daebe;
  #L1daeb6.  v2:= 2147483645I;
  #L1daebc.  goto L1daeca;
  #L1daebe.  v5:= new `java.lang.OutOfMemoryError`;
  #L1daec2.  call `<init>`(v5) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L1daec8.  throw v5;
  #L1daeca.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L1daed0.  v0:= temp @kind object;
  #L1daed2.  v2:= "Arrays.copyOf(result, newSize)" @kind object;
  #L1daed6.  call `checkNotNullExpressionValue`(v0, v2) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1daedc.  goto L1daf08;
  #L1daede.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1daee4.  v2:= temp;
  #L1daee6.  if v2 != 0 then goto L1daf08;
  #L1daeea.  if v0 != v6 then goto L1daef4;
  #L1daeee.  v6[v3]:= v1 @kind object;
  #L1daef2.  goto L1daf06;
  #L1daef4.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L1daefa.  v6:= temp @kind object;
  #L1daefc.  v5:= "Arrays.copyOf(result, size)" @kind object;
  #L1daf00.  call `checkNotNullExpressionValue`(v6, v5) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1daf06.  return v6 @kind object;
  #L1daf08.  v2:= v3;
  #L1daf0a.  goto L1dae76;
  #L1daf0c.  v5:= new `java.lang.NullPointerException`;
  #L1daf10.  v6:= "null cannot be cast to non-null type kotlin.Array<kotlin.Any?>" @kind object;
  #L1daf14.  call `<init>`(v5, v6) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1daf1a.  throw v5;
  #L1daf1c.  v5:= new `java.lang.NullPointerException`;
  #L1daf20.  call `<init>`(v5) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L1daf26.  throw v5;
}
