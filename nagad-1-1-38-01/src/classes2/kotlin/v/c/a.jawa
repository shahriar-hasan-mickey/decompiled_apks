record `kotlin.v.c.a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface, `kotlin.v.c.q.a` @kind interface {
  `int` `kotlin.v.c.a.f` @AccessFlag PRIVATE;
  `java.lang.Object`[] `kotlin.v.c.a.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.v.c.a` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/v/c/a;.<init>:([Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1da4b4.  v0:= "array" @kind object;
  #L1da4b8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1da4be.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1da4c4.  v1.`kotlin.v.c.a.g` @type ^`java.lang.Object`[] := v2 @kind object;
  #L1da4c8.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.v.c.a` v2 @kind this) @signature `Lkotlin/v/c/a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1da434.  v0:= v2.`kotlin.v.c.a.f` @type ^`int`;
  #L1da438.  v1:= v2.`kotlin.v.c.a.g` @type ^`java.lang.Object`[] @kind object;
  #L1da43c.  v1:= length @variable v1;
  #L1da43e.  if v0 >= v1 then goto L1da446;
  #L1da442.  v0:= 1I;
  #L1da444.  goto L1da448;
  #L1da446.  v0:= 0I;
  #L1da448.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.v.c.a` v3 @kind this) @signature `Lkotlin/v/c/a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1da45c.  v0:= v3.`kotlin.v.c.a.g` @type ^`java.lang.Object`[] @kind object;
  #L1da460.  v1:= v3.`kotlin.v.c.a.f` @type ^`int`;
  #L1da464.  v2:= v1 + 1;
  #L1da468.  v3.`kotlin.v.c.a.f` @type ^`int` := v2;
  #L1da46c.  v0:= v0[v1] @kind object;
  #L1da470.  return v0 @kind object;
  #L1da472.  v0:= Exception @type ^`java.lang.ArrayIndexOutOfBoundsException` @kind object;
  #L1da474.  v1:= v3.`kotlin.v.c.a.f` @type ^`int`;
  #L1da478.  v1:= v1 + -1;
  #L1da47c.  v3.`kotlin.v.c.a.f` @type ^`int` := v1;
  #L1da480.  v1:= new `java.util.NoSuchElementException`;
  #L1da484.  call temp:= `getMessage`(v0) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1da48a.  v0:= temp @kind object;
  #L1da48c.  call `<init>`(v1, v0) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1da492.  throw v1;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L1da45c..L1da470] goto L1da472;
}
procedure `void` `remove`(`kotlin.v.c.a` v2 @kind this) @signature `Lkotlin/v/c/a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1da4dc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1da4e0.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L1da4e4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1da4ea.  throw v0;
}
