record `kotlin.n` @kind class @AccessFlag FINAL extends `kotlin.g` @kind interface, `java.io.Serializable` @kind interface {
  `kotlin.v.b.a` `kotlin.n.f` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlin.n.g` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `kotlin.n.h` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.n` v1 @kind this, `kotlin.v.b.a` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/n;.<init>:(Lkotlin/v/b/a;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d4ed4.  v0:= "initializer" @kind object;
  #L1d4ed8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d4ede.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d4ee4.  v1.`kotlin.n.f` @type ^`kotlin.v.b.a` := v2 @kind object;
  #L1d4ee8.  v2:= `@@kotlin.p.a` @type ^`kotlin.p` @kind object;
  #L1d4eec.  v1.`kotlin.n.g` @type ^`java.lang.Object` := v2 @kind object;
  #L1d4ef0.  if v3 == 0 then goto L1d4ef6;
  #L1d4ef4.  goto L1d4ef8;
  #L1d4ef6.  v3:= v1 @kind object;
  #L1d4ef8.  v1.`kotlin.n.h` @type ^`java.lang.Object` := v3 @kind object;
  #L1d4efc.  return @kind void;
}
procedure `void` `<init>`(`kotlin.n` v0 @kind this, `kotlin.v.b.a` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 , `kotlin.v.c.f` v4 @kind object) @signature `Lkotlin/n;.<init>:(Lkotlin/v/b/a;Ljava/lang/Object;ILkotlin/v/c/f;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1d4f10.  v3:= v3 ^& 2;
  #L1d4f14.  if v3 == 0 then goto L1d4f1a;
  #L1d4f18.  v2:= 0I;
  #L1d4f1a.  call `<init>`(v0, v1, v2) @signature `Lkotlin/n;.<init>:(Lkotlin/v/b/a;Ljava/lang/Object;)V` @kind direct;
  #L1d4f20.  return @kind void;
}
procedure `java.lang.Object` `writeReplace`(`kotlin.n` v2 @kind this) @signature `Lkotlin/n;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1d4e7c.  v0:= new `kotlin.d`;
  #L1d4e80.  call temp:= `getValue`(v2) @signature `Lkotlin/n;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L1d4e86.  v1:= temp @kind object;
  #L1d4e88.  call `<init>`(v0, v1) @signature `Lkotlin/d;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1d4e8e.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`kotlin.n` v3 @kind this) @signature `Lkotlin/n;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d4e18.  v0:= v3.`kotlin.n.g` @type ^`java.lang.Object` @kind object;
  #L1d4e1c.  v1:= `@@kotlin.p.a` @type ^`kotlin.p` @kind object;
  #L1d4e20.  if v0 == v1 then goto L1d4e26;
  #L1d4e24.  return v0 @kind object;
  #L1d4e26.  v0:= v3.`kotlin.n.h` @type ^`java.lang.Object` @kind object;
  #L1d4e2a.  @monitorenter v0
  #L1d4e2c.  v1:= v3.`kotlin.n.g` @type ^`java.lang.Object` @kind object;
  #L1d4e30.  v2:= `@@kotlin.p.a` @type ^`kotlin.p` @kind object;
  #L1d4e34.  if v1 == v2 then goto L1d4e3a;
  #L1d4e38.  goto L1d4e56;
  #L1d4e3a.  v1:= v3.`kotlin.n.f` @type ^`kotlin.v.b.a` @kind object;
  #L1d4e3e.  call `checkNotNull`(v1) @signature `Lkotlin/v/c/i;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d4e44.  call temp:= `invoke`(v1) @signature `Lkotlin/v/b/a;.invoke:()Ljava/lang/Object;` @kind interface;
  #L1d4e4a.  v1:= temp @kind object;
  #L1d4e4c.  v3.`kotlin.n.g` @type ^`java.lang.Object` := v1 @kind object;
  #L1d4e50.  v2:= 0I;
  #L1d4e52.  v3.`kotlin.n.f` @type ^`kotlin.v.b.a` := v2 @kind object;
  #L1d4e56.  @monitorexit v0
  #L1d4e58.  return v1 @kind object;
  #L1d4e5a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d4e5c.  @monitorexit v0
  #L1d4e5e.  throw v1;
  catch `java.lang.Throwable` @[L1d4e2c..L1d4e56] goto L1d4e5a;
}
procedure `boolean` `isInitialized`(`kotlin.n` v2 @kind this) @signature `Lkotlin/n;.isInitialized:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d4df4.  v0:= v2.`kotlin.n.g` @type ^`java.lang.Object` @kind object;
  #L1d4df8.  v1:= `@@kotlin.p.a` @type ^`kotlin.p` @kind object;
  #L1d4dfc.  if v0 == v1 then goto L1d4e04;
  #L1d4e00.  v0:= 1I;
  #L1d4e02.  goto L1d4e06;
  #L1d4e04.  v0:= 0I;
  #L1d4e06.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.n` v1 @kind this) @signature `Lkotlin/n;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4ea0.  call temp:= `isInitialized`(v1) @signature `Lkotlin/n;.isInitialized:()Z` @kind virtual;
  #L1d4ea6.  v0:= temp;
  #L1d4ea8.  if v0 == 0 then goto L1d4ebe;
  #L1d4eac.  call temp:= `getValue`(v1) @signature `Lkotlin/n;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L1d4eb2.  v0:= temp @kind object;
  #L1d4eb4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1d4eba.  v0:= temp @kind object;
  #L1d4ebc.  goto L1d4ec2;
  #L1d4ebe.  v0:= "Lazy value not initialized yet." @kind object;
  #L1d4ec2.  return v0 @kind object;
}
