record `kotlin.z.i$a` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.v.c.q.a` @kind interface {
  `java.util.Iterator` `kotlin.z.i$a.f` @AccessFlag PRIVATE_FINAL;
  `kotlin.z.i` `kotlin.z.i$a.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.z.i$a` v0 @kind this, `kotlin.z.i` v1 @kind object) @signature `Lkotlin/z/i$a;.<init>:(Lkotlin/z/i;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1dc68c.  v0.`kotlin.z.i$a.g` @type ^`kotlin.z.i` := v1 @kind object;
  #L1dc690.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1dc696.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/z/i;.access$getSequence$p:(Lkotlin/z/i;)Lkotlin/z/b;` @kind static;
  #L1dc69c.  v1:= temp @kind object;
  #L1dc69e.  call temp:= `iterator`(v1) @signature `Lkotlin/z/b;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1dc6a4.  v1:= temp @kind object;
  #L1dc6a6.  v0.`kotlin.z.i$a.f` @type ^`java.util.Iterator` := v1 @kind object;
  #L1dc6aa.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.z.i$a` v1 @kind this) @signature `Lkotlin/z/i$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dc638.  v0:= v1.`kotlin.z.i$a.f` @type ^`java.util.Iterator` @kind object;
  #L1dc63c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1dc642.  v0:= temp;
  #L1dc644.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.z.i$a` v2 @kind this) @signature `Lkotlin/z/i$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dc658.  v0:= v2.`kotlin.z.i$a.g` @type ^`kotlin.z.i` @kind object;
  #L1dc65c.  call temp:= `access$getTransformer$p`(v0) @signature `Lkotlin/z/i;.access$getTransformer$p:(Lkotlin/z/i;)Lkotlin/v/b/l;` @kind static;
  #L1dc662.  v0:= temp @kind object;
  #L1dc664.  v1:= v2.`kotlin.z.i$a.f` @type ^`java.util.Iterator` @kind object;
  #L1dc668.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1dc66e.  v1:= temp @kind object;
  #L1dc670.  call temp:= `invoke`(v0, v1) @signature `Lkotlin/v/b/l;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1dc676.  v0:= temp @kind object;
  #L1dc678.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.z.i$a` v2 @kind this) @signature `Lkotlin/z/i$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dc6bc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1dc6c0.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L1dc6c4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dc6ca.  throw v0;
}
