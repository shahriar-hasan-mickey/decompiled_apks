record `kotlin.z.f` @kind class @AccessFlag  extends `kotlin.z.e` @kind class {
}
procedure `kotlin.z.b` `asSequence`(`java.util.Iterator` v1 @kind object) @signature `Lkotlin/z/f;.asSequence:(Ljava/util/Iterator;)Lkotlin/z/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1dc424.  v0:= "$this$asSequence" @kind object;
  #L1dc428.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dc42e.  v0:= new `kotlin.z.f$a`;
  #L1dc432.  call `<init>`(v0, v1) @signature `Lkotlin/z/f$a;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L1dc438.  call temp:= `constrainOnce`(v0) @signature `Lkotlin/z/f;.constrainOnce:(Lkotlin/z/b;)Lkotlin/z/b;` @kind static;
  #L1dc43e.  v1:= temp @kind object;
  #L1dc440.  return v1 @kind object;
}
procedure `kotlin.z.b` `constrainOnce`(`kotlin.z.b` v1 @kind object) @signature `Lkotlin/z/f;.constrainOnce:(Lkotlin/z/b;)Lkotlin/z/b;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1dc454.  v0:= "$this$constrainOnce" @kind object;
  #L1dc458.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dc45e.  v0:= instanceof @variable v1 @type ^`kotlin.z.a` @kind boolean;
  #L1dc462.  if v0 == 0 then goto L1dc46c;
  #L1dc466.  v1:= (`kotlin.z.a`) v1 @kind object;
  #L1dc46a.  goto L1dc478;
  #L1dc46c.  v0:= new `kotlin.z.a`;
  #L1dc470.  call `<init>`(v0, v1) @signature `Lkotlin/z/a;.<init>:(Lkotlin/z/b;)V` @kind direct;
  #L1dc476.  v1:= v0 @kind object;
  #L1dc478.  return v1 @kind object;
}
