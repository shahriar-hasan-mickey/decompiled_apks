record `kotlin.z.a` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.z.b` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `kotlin.z.a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.z.a` v1 @kind this, `kotlin.z.b` v2 @kind object) @signature `Lkotlin/z/a;.<init>:(Lkotlin/z/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1dc3c0.  v0:= "sequence" @kind object;
  #L1dc3c4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dc3ca.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1dc3d0.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L1dc3d4.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1dc3da.  v1.`kotlin.z.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L1dc3de.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`kotlin.z.a` v2 @kind this) @signature `Lkotlin/z/a;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dc380.  v0:= v2.`kotlin.z.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L1dc384.  v1:= 0I;
  #L1dc386.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1dc38c.  v0:= temp @kind object;
  #L1dc38e.  v0:= (`kotlin.z.b`) v0 @kind object;
  #L1dc392.  if v0 == 0 then goto L1dc3a0;
  #L1dc396.  call temp:= `iterator`(v0) @signature `Lkotlin/z/b;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1dc39c.  v0:= temp @kind object;
  #L1dc39e.  return v0 @kind object;
  #L1dc3a0.  v0:= new `java.lang.IllegalStateException`;
  #L1dc3a4.  v1:= "This sequence can be consumed only once." @kind object;
  #L1dc3a8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dc3ae.  throw v0;
}
