record `kotlin.w.b` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.w.a` @kind class {
  `kotlin.w.b$a` `kotlin.w.b.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.w.b` v1 @kind this) @signature `Lkotlin/w/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1dba14.  call `<init>`(v1) @signature `Lkotlin/w/a;.<init>:()V` @kind direct;
  #L1dba1a.  v0:= new `kotlin.w.b$a`;
  #L1dba1e.  call `<init>`(v0) @signature `Lkotlin/w/b$a;.<init>:()V` @kind direct;
  #L1dba24.  v1.`kotlin.w.b.c` @type ^`kotlin.w.b$a` := v0 @kind object;
  #L1dba28.  return @kind void;
}
procedure `java.util.Random` `getImpl`(`kotlin.w.b` v2 @kind this) @signature `Lkotlin/w/b;.getImpl:()Ljava/util/Random;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1db9e8.  v0:= v2.`kotlin.w.b.c` @type ^`kotlin.w.b$a` @kind object;
  #L1db9ec.  call temp:= `get`(v0) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L1db9f2.  v0:= temp @kind object;
  #L1db9f4.  v1:= "implStorage.get()" @kind object;
  #L1db9f8.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db9fe.  v0:= (`java.util.Random`) v0 @kind object;
  #L1dba02.  return v0 @kind object;
}
