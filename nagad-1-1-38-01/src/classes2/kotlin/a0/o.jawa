record `kotlin.a0.o` @kind class @AccessFlag  extends `kotlin.a0.n` @kind class {
}
procedure `java.lang.Double` `toDoubleOrNull`(`java.lang.String` v3 @kind object) @signature `Lkotlin/a0/o;.toDoubleOrNull:(Ljava/lang/String;)Ljava/lang/Double;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1dd20c.  v0:= "$this$toDoubleOrNull" @kind object;
  #L1dd210.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd216.  v0:= 0I;
  #L1dd218.  v1:= `@@kotlin.a0.g.a` @type ^`kotlin.a0.f` @kind object;
  #L1dd21c.  call temp:= `matches`(v1, v3) @signature `Lkotlin/a0/f;.matches:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L1dd222.  v1:= temp;
  #L1dd224.  if v1 == 0 then goto L1dd23a;
  #L1dd228.  call temp:= `parseDouble`(v3) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L1dd22e.  v1:= temp @kind wide;
  #L1dd230.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L1dd236.  v3:= temp @kind object;
  #L1dd238.  v0:= v3 @kind object;
  #L1dd23a.  return v0 @kind object;
  catch `java.lang.NumberFormatException` @[L1dd218..L1dd238] goto L1dd23a;
}
