record `kotlin.a0.t` @kind class @AccessFlag  extends `kotlin.a0.s` @kind class {
}
procedure `java.lang.String` `dropLast`(`java.lang.String` v2 @kind object, `int` v3 ) @signature `Lkotlin/a0/t;.dropLast:(Ljava/lang/String;I)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1dea5c.  v0:= "$this$dropLast" @kind object;
  #L1dea60.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dea66.  v0:= 0I;
  #L1dea68.  if v3 < 0 then goto L1dea70;
  #L1dea6c.  v1:= 1I;
  #L1dea6e.  goto L1dea72;
  #L1dea70.  v1:= 0I;
  #L1dea72.  if v1 == 0 then goto L1dea92;
  #L1dea76.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1dea7c.  v1:= temp;
  #L1dea7e.  v1:= v1 - v3 @kind int;
  #L1dea80.  call temp:= `coerceAtLeast`(v1, v0) @signature `Lkotlin/x/e;.coerceAtLeast:(II)I` @kind static;
  #L1dea86.  v3:= temp;
  #L1dea88.  call temp:= `take`(v2, v3) @signature `Lkotlin/a0/t;.take:(Ljava/lang/String;I)Ljava/lang/String;` @kind static;
  #L1dea8e.  v2:= temp @kind object;
  #L1dea90.  return v2 @kind object;
  #L1dea92.  v2:= new `java.lang.StringBuilder`;
  #L1dea96.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dea9c.  v0:= "Requested character count " @kind object;
  #L1deaa0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1deaa6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1deaac.  v3:= " is less than zero." @kind object;
  #L1deab0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1deab6.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1deabc.  v2:= temp @kind object;
  #L1deabe.  v3:= new `java.lang.IllegalArgumentException`;
  #L1deac2.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1deac8.  v2:= temp @kind object;
  #L1deaca.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dead0.  throw v3;
}
procedure `java.lang.String` `take`(`java.lang.String` v2 @kind object, `int` v3 ) @signature `Lkotlin/a0/t;.take:(Ljava/lang/String;I)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1deae4.  v0:= "$this$take" @kind object;
  #L1deae8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1deaee.  v0:= 0I;
  #L1deaf0.  if v3 < 0 then goto L1deaf8;
  #L1deaf4.  v1:= 1I;
  #L1deaf6.  goto L1deafa;
  #L1deaf8.  v1:= 0I;
  #L1deafa.  if v1 == 0 then goto L1deb22;
  #L1deafe.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1deb04.  v1:= temp;
  #L1deb06.  call temp:= `coerceAtMost`(v3, v1) @signature `Lkotlin/x/e;.coerceAtMost:(II)I` @kind static;
  #L1deb0c.  v3:= temp;
  #L1deb0e.  call temp:= `substring`(v2, v0, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1deb14.  v2:= temp @kind object;
  #L1deb16.  v3:= "(this as java.lang.Strinâ€¦ing(startIndex, endIndex)" @kind object;
  #L1deb1a.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1deb20.  return v2 @kind object;
  #L1deb22.  v2:= new `java.lang.StringBuilder`;
  #L1deb26.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1deb2c.  v0:= "Requested character count " @kind object;
  #L1deb30.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1deb36.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1deb3c.  v3:= " is less than zero." @kind object;
  #L1deb40.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1deb46.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1deb4c.  v2:= temp @kind object;
  #L1deb4e.  v3:= new `java.lang.IllegalArgumentException`;
  #L1deb52.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1deb58.  v2:= temp @kind object;
  #L1deb5a.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1deb60.  throw v3;
}
