record `kotlin.a0.q` @kind class @AccessFlag  extends `kotlin.a0.p` @kind class {
}
procedure `java.lang.String` `capitalize`(`java.lang.String` v2 @kind object) @signature `Lkotlin/a0/q;.capitalize:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1dd6bc.  v0:= "$this$capitalize" @kind object;
  #L1dd6c0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd6c6.  call temp:= `getDefault`() @signature `Ljava/util/Locale;.getDefault:()Ljava/util/Locale;` @kind static;
  #L1dd6cc.  v0:= temp @kind object;
  #L1dd6ce.  v1:= "Locale.getDefault()" @kind object;
  #L1dd6d2.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd6d8.  call temp:= `capitalize`(v2, v0) @signature `Lkotlin/a0/q;.capitalize:(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;` @kind static;
  #L1dd6de.  v2:= temp @kind object;
  #L1dd6e0.  return v2 @kind object;
}
procedure `java.lang.String` `capitalize`(`java.lang.String` v5 @kind object, `java.util.Locale` v6 @kind object) @signature `Lkotlin/a0/q;.capitalize:(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1dd6f4.  v0:= "$this$capitalize" @kind object;
  #L1dd6f8.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd6fe.  v0:= "locale" @kind object;
  #L1dd702.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd708.  call temp:= `length`(v5) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L1dd70e.  v0:= temp;
  #L1dd710.  v1:= 1I;
  #L1dd712.  v2:= 0I;
  #L1dd714.  if v0 <= 0 then goto L1dd71c;
  #L1dd718.  v0:= 1I;
  #L1dd71a.  goto L1dd71e;
  #L1dd71c.  v0:= 0I;
  #L1dd71e.  if v0 == 0 then goto L1dd7c6;
  #L1dd722.  call temp:= `charAt`(v5, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1dd728.  v0:= temp;
  #L1dd72a.  call temp:= `isLowerCase`(v0) @signature `Ljava/lang/Character;.isLowerCase:(C)Z` @kind static;
  #L1dd730.  v3:= temp;
  #L1dd732.  if v3 == 0 then goto L1dd7c6;
  #L1dd736.  v3:= new `java.lang.StringBuilder`;
  #L1dd73a.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dd740.  call temp:= `toTitleCase`(v0) @signature `Ljava/lang/Character;.toTitleCase:(C)C` @kind static;
  #L1dd746.  v4:= temp;
  #L1dd748.  call temp:= `toUpperCase`(v0) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L1dd74e.  v0:= temp;
  #L1dd750.  if v4 == v0 then goto L1dd75c;
  #L1dd754.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd75a.  goto L1dd78a;
  #L1dd75c.  call temp:= `substring`(v5, v2, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1dd762.  v0:= temp @kind object;
  #L1dd764.  v2:= "(this as java.lang.Strinâ€¦ing(startIndex, endIndex)" @kind object;
  #L1dd768.  call `checkNotNullExpressionValue`(v0, v2) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd76e.  if v0 == 0 then goto L1dd7b6;
  #L1dd772.  call temp:= `toUpperCase`(v0, v6) @signature `Ljava/lang/String;.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L1dd778.  v6:= temp @kind object;
  #L1dd77a.  v0:= "(this as java.lang.String).toUpperCase(locale)" @kind object;
  #L1dd77e.  call `checkNotNullExpressionValue`(v6, v0) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd784.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd78a.  call temp:= `substring`(v5, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L1dd790.  v5:= temp @kind object;
  #L1dd792.  v6:= "(this as java.lang.String).substring(startIndex)" @kind object;
  #L1dd796.  call `checkNotNullExpressionValue`(v5, v6) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd79c.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd7a2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd7a8.  v5:= temp @kind object;
  #L1dd7aa.  v6:= "StringBuilder().apply(builderAction).toString()" @kind object;
  #L1dd7ae.  call `checkNotNullExpressionValue`(v5, v6) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd7b4.  return v5 @kind object;
  #L1dd7b6.  v5:= new `java.lang.NullPointerException`;
  #L1dd7ba.  v6:= "null cannot be cast to non-null type java.lang.String" @kind object;
  #L1dd7be.  call `<init>`(v5, v6) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dd7c4.  throw v5;
  #L1dd7c6.  return v5 @kind object;
}
procedure `boolean` `endsWith`(`java.lang.String` v7 @kind object, `java.lang.String` v8 @kind object, `boolean` v9 ) @signature `Lkotlin/a0/q;.endsWith:(Ljava/lang/String;Ljava/lang/String;Z)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1dd4b4.  v0:= "$this$endsWith" @kind object;
  #L1dd4b8.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd4be.  v0:= "suffix" @kind object;
  #L1dd4c2.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd4c8.  if v9 != 0 then goto L1dd4d6;
  #L1dd4cc.  call temp:= `endsWith`(v7, v8) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1dd4d2.  v7:= temp;
  #L1dd4d4.  return v7;
  #L1dd4d6.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1dd4dc.  v9:= temp;
  #L1dd4de.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1dd4e4.  v0:= temp;
  #L1dd4e6.  v2:= v9 - v0 @kind int;
  #L1dd4ea.  v4:= 0I;
  #L1dd4ec.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1dd4f2.  v5:= temp;
  #L1dd4f4.  v6:= 1I;
  #L1dd4f6.  v1:= v7 @kind object;
  #L1dd4f8.  v3:= v8 @kind object;
  #L1dd4fa.  call temp:= `regionMatches`(v1, v2, v3, v4, v5, v6) @signature `Lkotlin/a0/q;.regionMatches:(Ljava/lang/String;ILjava/lang/String;IIZ)Z` @kind static;
  #L1dd500.  v7:= temp;
  #L1dd502.  return v7;
}
procedure `boolean` `endsWith$default`(`java.lang.String` v0 @kind object, `java.lang.String` v1 @kind object, `boolean` v2 , `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlin/a0/q;.endsWith$default:(Ljava/lang/String;Ljava/lang/String;ZILjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1dd490.  v3:= v3 ^& 2;
  #L1dd494.  if v3 == 0 then goto L1dd49a;
  #L1dd498.  v2:= 0I;
  #L1dd49a.  call temp:= `endsWith`(v0, v1, v2) @signature `Lkotlin/a0/h;.endsWith:(Ljava/lang/String;Ljava/lang/String;Z)Z` @kind static;
  #L1dd4a0.  v0:= temp;
  #L1dd4a2.  return v0;
}
procedure `boolean` `equals`(`java.lang.String` v0 @kind object, `java.lang.String` v1 @kind object, `boolean` v2 ) @signature `Lkotlin/a0/q;.equals:(Ljava/lang/String;Ljava/lang/String;Z)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1dd538.  if v0 != 0 then goto L1dd548;
  #L1dd53c.  if v1 != 0 then goto L1dd544;
  #L1dd540.  v0:= 1I;
  #L1dd542.  goto L1dd546;
  #L1dd544.  v0:= 0I;
  #L1dd546.  return v0;
  #L1dd548.  if v2 != 0 then goto L1dd556;
  #L1dd54c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1dd552.  v0:= temp;
  #L1dd554.  goto L1dd55e;
  #L1dd556.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1dd55c.  v0:= temp;
  #L1dd55e.  return v0;
}
procedure `boolean` `equals$default`(`java.lang.String` v0 @kind object, `java.lang.String` v1 @kind object, `boolean` v2 , `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlin/a0/q;.equals$default:(Ljava/lang/String;Ljava/lang/String;ZILjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1dd514.  v3:= v3 ^& 2;
  #L1dd518.  if v3 == 0 then goto L1dd51e;
  #L1dd51c.  v2:= 0I;
  #L1dd51e.  call temp:= `equals`(v0, v1, v2) @signature `Lkotlin/a0/h;.equals:(Ljava/lang/String;Ljava/lang/String;Z)Z` @kind static;
  #L1dd524.  v0:= temp;
  #L1dd526.  return v0;
}
procedure `boolean` `isBlank`(`java.lang.CharSequence` v4 @kind object) @signature `Lkotlin/a0/q;.isBlank:(Ljava/lang/CharSequence;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1dd570.  v0:= "$this$isBlank" @kind object;
  #L1dd574.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd57a.  call temp:= `length`(v4) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L1dd580.  v0:= temp;
  #L1dd582.  v1:= 0I;
  #L1dd584.  v2:= 1I;
  #L1dd586.  if v0 == 0 then goto L1dd5ec;
  #L1dd58a.  call temp:= `getIndices`(v4) @signature `Lkotlin/a0/r;.getIndices:(Ljava/lang/CharSequence;)Lkotlin/x/d;` @kind static;
  #L1dd590.  v0:= temp @kind object;
  #L1dd592.  v3:= instanceof @variable v0 @type ^`java.util.Collection` @kind boolean;
  #L1dd596.  if v3 == 0 then goto L1dd5b0;
  #L1dd59a.  v3:= v0 @kind object;
  #L1dd59c.  v3:= (`java.util.Collection`) v3 @kind object;
  #L1dd5a0.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L1dd5a6.  v3:= temp;
  #L1dd5a8.  if v3 == 0 then goto L1dd5b0;
  #L1dd5ac.  v4:= 1I;
  #L1dd5ae.  goto L1dd5e8;
  #L1dd5b0.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1dd5b6.  v0:= temp @kind object;
  #L1dd5b8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1dd5be.  v3:= temp;
  #L1dd5c0.  if v3 == 0 then goto L1dd5ac;
  #L1dd5c4.  v3:= v0 @kind object;
  #L1dd5c6.  v3:= (`kotlin.r.y`) v3 @kind object;
  #L1dd5ca.  call temp:= `nextInt`(v3) @signature `Lkotlin/r/y;.nextInt:()I` @kind virtual;
  #L1dd5d0.  v3:= temp;
  #L1dd5d2.  call temp:= `charAt`(v4, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L1dd5d8.  v3:= temp;
  #L1dd5da.  call temp:= `isWhitespace`(v3) @signature `Lkotlin/a0/a;.isWhitespace:(C)Z` @kind static;
  #L1dd5e0.  v3:= temp;
  #L1dd5e2.  if v3 != 0 then goto L1dd5b8;
  #L1dd5e6.  v4:= 0I;
  #L1dd5e8.  if v4 == 0 then goto L1dd5ee;
  #L1dd5ec.  v1:= 1I;
  #L1dd5ee.  return v1;
}
procedure `boolean` `regionMatches`(`java.lang.String` v6 @kind object, `int` v7 , `java.lang.String` v8 @kind object, `int` v9 , `int` v10 , `boolean` v11 ) @signature `Lkotlin/a0/q;.regionMatches:(Ljava/lang/String;ILjava/lang/String;IIZ)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1dd600.  v0:= "$this$regionMatches" @kind object;
  #L1dd604.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd60a.  v0:= "other" @kind object;
  #L1dd60e.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd614.  if v11 != 0 then goto L1dd622;
  #L1dd618.  call temp:= `regionMatches`(v6, v7, v8, v9, v10) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L1dd61e.  v6:= temp;
  #L1dd620.  goto L1dd636;
  #L1dd622.  v0:= v6 @kind object;
  #L1dd624.  v1:= v11;
  #L1dd626.  v2:= v7;
  #L1dd628.  v3:= v8 @kind object;
  #L1dd62a.  v4:= v9;
  #L1dd62c.  v5:= v10;
  #L1dd62e.  call temp:= `regionMatches`(v0, v1, v2, v3, v4, v5) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L1dd634.  v6:= temp;
  #L1dd636.  return v6;
}
procedure `java.lang.String` `replace`(`java.lang.String` v7 @kind object, `java.lang.String` v8 @kind object, `java.lang.String` v9 @kind object, `boolean` v10 ) @signature `Lkotlin/a0/q;.replace:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1dd7fc.  v0:= "$this$replace" @kind object;
  #L1dd800.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd806.  v0:= "oldValue" @kind object;
  #L1dd80a.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd810.  v0:= "newValue" @kind object;
  #L1dd814.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd81a.  v0:= "stringBuilder.append(this, i, length).toString()" @kind object;
  #L1dd81e.  v1:= 0I;
  #L1dd820.  if v10 == 0 then goto L1dd896;
  #L1dd824.  v10:= 18I;
  #L1dd828.  call temp:= `compile`(v8, v10) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;I)Ljava/util/regex/Pattern;` @kind static;
  #L1dd82e.  v8:= temp @kind object;
  #L1dd830.  call temp:= `matcher`(v8, v7) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L1dd836.  v2:= temp @kind object;
  #L1dd838.  call temp:= `find`(v2) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L1dd83e.  v8:= temp;
  #L1dd840.  if v8 != 0 then goto L1dd846;
  #L1dd844.  return v7 @kind object;
  #L1dd846.  v3:= new `java.lang.StringBuilder`;
  #L1dd84a.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dd850.  call temp:= `start`(v2) @signature `Ljava/util/regex/Matcher;.start:()I` @kind virtual;
  #L1dd856.  v8:= temp;
  #L1dd858.  call temp:= `append`(v3, v7, v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd85e.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd864.  call temp:= `end`(v2) @signature `Ljava/util/regex/Matcher;.end:()I` @kind virtual;
  #L1dd86a.  v1:= temp;
  #L1dd86c.  call temp:= `find`(v2) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L1dd872.  v8:= temp;
  #L1dd874.  if v8 != 0 then goto L1dd850;
  #L1dd878.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1dd87e.  v8:= temp;
  #L1dd880.  call temp:= `append`(v3, v7, v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd886.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd88c.  v7:= temp @kind object;
  #L1dd88e.  call `checkNotNullExpressionValue`(v7, v0) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd894.  return v7 @kind object;
  #L1dd896.  call temp:= `indexOf`(v7, v8, v1, v10) @signature `Lkotlin/a0/h;.indexOf:(Ljava/lang/CharSequence;Ljava/lang/String;IZ)I` @kind static;
  #L1dd89c.  v2:= temp;
  #L1dd89e.  if v2 >= 0 then goto L1dd8a4;
  #L1dd8a2.  return v7 @kind object;
  #L1dd8a4.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1dd8aa.  v3:= temp;
  #L1dd8ac.  v4:= 1I;
  #L1dd8ae.  call temp:= `coerceAtLeast`(v3, v4) @signature `Lkotlin/x/e;.coerceAtLeast:(II)I` @kind static;
  #L1dd8b4.  v4:= temp;
  #L1dd8b6.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1dd8bc.  v5:= temp;
  #L1dd8be.  v5:= v5 - v3 @kind int;
  #L1dd8c0.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1dd8c6.  v6:= temp;
  #L1dd8c8.  v5:= v5 + v6 @kind int;
  #L1dd8ca.  if v5 < 0 then goto L1dd922;
  #L1dd8ce.  v6:= new `java.lang.StringBuilder`;
  #L1dd8d2.  call `<init>`(v6, v5) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1dd8d8.  call temp:= `append`(v6, v7, v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd8de.  call temp:= `append`(v6, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd8e4.  v1:= v2 + v3 @kind int;
  #L1dd8e8.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1dd8ee.  v5:= temp;
  #L1dd8f0.  if v2 < v5 then goto L1dd8f6;
  #L1dd8f4.  goto L1dd904;
  #L1dd8f6.  v2:= v2 + v4 @kind int;
  #L1dd8f8.  call temp:= `indexOf`(v7, v8, v2, v10) @signature `Lkotlin/a0/h;.indexOf:(Ljava/lang/CharSequence;Ljava/lang/String;IZ)I` @kind static;
  #L1dd8fe.  v2:= temp;
  #L1dd900.  if v2 > 0 then goto L1dd8d8;
  #L1dd904.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1dd90a.  v8:= temp;
  #L1dd90c.  call temp:= `append`(v6, v7, v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd912.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd918.  v7:= temp @kind object;
  #L1dd91a.  call `checkNotNullExpressionValue`(v7, v0) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd920.  return v7 @kind object;
  #L1dd922.  v7:= new `java.lang.OutOfMemoryError`;
  #L1dd926.  call `<init>`(v7) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L1dd92c.  throw v7;
}
procedure `java.lang.String` `replace$default`(`java.lang.String` v0 @kind object, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object, `boolean` v3 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlin/a0/q;.replace$default:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZILjava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1dd7d8.  v4:= v4 ^& 4;
  #L1dd7dc.  if v4 == 0 then goto L1dd7e2;
  #L1dd7e0.  v3:= 0I;
  #L1dd7e2.  call temp:= `replace`(v0, v1, v2, v3) @signature `Lkotlin/a0/h;.replace:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L1dd7e8.  v0:= temp @kind object;
  #L1dd7ea.  return v0 @kind object;
}
procedure `boolean` `startsWith`(`java.lang.String` v6 @kind object, `java.lang.String` v7 @kind object, `boolean` v8 ) @signature `Lkotlin/a0/q;.startsWith:(Ljava/lang/String;Ljava/lang/String;Z)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1dd66c.  v0:= "$this$startsWith" @kind object;
  #L1dd670.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd676.  v0:= "prefix" @kind object;
  #L1dd67a.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd680.  if v8 != 0 then goto L1dd68e;
  #L1dd684.  call temp:= `startsWith`(v6, v7) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1dd68a.  v6:= temp;
  #L1dd68c.  return v6;
  #L1dd68e.  v1:= 0I;
  #L1dd690.  v3:= 0I;
  #L1dd692.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1dd698.  v4:= temp;
  #L1dd69a.  v0:= v6 @kind object;
  #L1dd69c.  v2:= v7 @kind object;
  #L1dd69e.  v5:= v8;
  #L1dd6a0.  call temp:= `regionMatches`(v0, v1, v2, v3, v4, v5) @signature `Lkotlin/a0/q;.regionMatches:(Ljava/lang/String;ILjava/lang/String;IIZ)Z` @kind static;
  #L1dd6a6.  v6:= temp;
  #L1dd6a8.  return v6;
}
procedure `boolean` `startsWith$default`(`java.lang.String` v0 @kind object, `java.lang.String` v1 @kind object, `boolean` v2 , `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlin/a0/q;.startsWith$default:(Ljava/lang/String;Ljava/lang/String;ZILjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1dd648.  v3:= v3 ^& 2;
  #L1dd64c.  if v3 == 0 then goto L1dd652;
  #L1dd650.  v2:= 0I;
  #L1dd652.  call temp:= `startsWith`(v0, v1, v2) @signature `Lkotlin/a0/q;.startsWith:(Ljava/lang/String;Ljava/lang/String;Z)Z` @kind static;
  #L1dd658.  v0:= temp;
  #L1dd65a.  return v0;
}
