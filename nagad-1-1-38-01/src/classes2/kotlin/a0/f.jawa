record `kotlin.a0.f` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Serializable` @kind interface {
  `java.util.regex.Pattern` `kotlin.a0.f.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<clinit>`() @signature `Lkotlin/a0/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1dcf3c.  v0:= new `kotlin.a0.f$a`;
  #L1dcf40.  v1:= 0I;
  #L1dcf42.  call `<init>`(v0, v1) @signature `Lkotlin/a0/f$a;.<init>:(Lkotlin/v/c/f;)V` @kind direct;
  #L1dcf48.  return @kind void;
}
procedure `void` `<init>`(`kotlin.a0.f` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lkotlin/a0/f;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1dcf5c.  v0:= "pattern" @kind object;
  #L1dcf60.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dcf66.  call temp:= `compile`(v2) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L1dcf6c.  v2:= temp @kind object;
  #L1dcf6e.  v0:= "Pattern.compile(pattern)" @kind object;
  #L1dcf72.  call `checkNotNullExpressionValue`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dcf78.  call `<init>`(v1, v2) @signature `Lkotlin/a0/f;.<init>:(Ljava/util/regex/Pattern;)V` @kind direct;
  #L1dcf7e.  return @kind void;
}
procedure `void` `<init>`(`kotlin.a0.f` v1 @kind this, `java.util.regex.Pattern` v2 @kind object) @signature `Lkotlin/a0/f;.<init>:(Ljava/util/regex/Pattern;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1dcf90.  v0:= "nativePattern" @kind object;
  #L1dcf94.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dcf9a.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1dcfa0.  v1.`kotlin.a0.f.f` @type ^`java.util.regex.Pattern` := v2 @kind object;
  #L1dcfa4.  return @kind void;
}
procedure `java.lang.Object` `writeReplace`(`kotlin.a0.f` v3 @kind this) @signature `Lkotlin/a0/f;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1dcd74.  v0:= new `kotlin.a0.f$b`;
  #L1dcd78.  v1:= v3.`kotlin.a0.f.f` @type ^`java.util.regex.Pattern` @kind object;
  #L1dcd7c.  call temp:= `pattern`(v1) @signature `Ljava/util/regex/Pattern;.pattern:()Ljava/lang/String;` @kind virtual;
  #L1dcd82.  v1:= temp @kind object;
  #L1dcd84.  v2:= "nativePattern.pattern()" @kind object;
  #L1dcd88.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dcd8e.  v2:= v3.`kotlin.a0.f.f` @type ^`java.util.regex.Pattern` @kind object;
  #L1dcd92.  call temp:= `flags`(v2) @signature `Ljava/util/regex/Pattern;.flags:()I` @kind virtual;
  #L1dcd98.  v2:= temp;
  #L1dcd9a.  call `<init>`(v0, v1, v2) @signature `Lkotlin/a0/f$b;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1dcda0.  return v0 @kind object;
}
procedure `boolean` `matches`(`kotlin.a0.f` v1 @kind this, `java.lang.CharSequence` v2 @kind object) @signature `Lkotlin/a0/f;.matches:(Ljava/lang/CharSequence;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1dcd44.  v0:= "input" @kind object;
  #L1dcd48.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dcd4e.  v0:= v1.`kotlin.a0.f.f` @type ^`java.util.regex.Pattern` @kind object;
  #L1dcd52.  call temp:= `matcher`(v0, v2) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L1dcd58.  v2:= temp @kind object;
  #L1dcd5a.  call temp:= `matches`(v2) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L1dcd60.  v2:= temp;
  #L1dcd62.  return v2;
}
procedure `java.lang.String` `replace`(`kotlin.a0.f` v1 @kind this, `java.lang.CharSequence` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lkotlin/a0/f;.replace:(Ljava/lang/CharSequence;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1dcdb4.  v0:= "input" @kind object;
  #L1dcdb8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dcdbe.  v0:= "replacement" @kind object;
  #L1dcdc2.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dcdc8.  v0:= v1.`kotlin.a0.f.f` @type ^`java.util.regex.Pattern` @kind object;
  #L1dcdcc.  call temp:= `matcher`(v0, v2) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L1dcdd2.  v2:= temp @kind object;
  #L1dcdd4.  call temp:= `replaceAll`(v2, v3) @signature `Ljava/util/regex/Matcher;.replaceAll:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L1dcdda.  v2:= temp @kind object;
  #L1dcddc.  v3:= "nativePattern.matcher(inâ€¦).replaceAll(replacement)" @kind object;
  #L1dcde0.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dcde6.  return v2 @kind object;
}
procedure `java.util.List` `split`(`kotlin.a0.f` v5 @kind this, `java.lang.CharSequence` v6 @kind object, `int` v7 ) @signature `Lkotlin/a0/f;.split:(Ljava/lang/CharSequence;I)Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1dce20.  v0:= "input" @kind object;
  #L1dce24.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/v/c/i;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dce2a.  v0:= 0I;
  #L1dce2c.  v1:= 1I;
  #L1dce2e.  if v7 < 0 then goto L1dce36;
  #L1dce32.  v2:= 1I;
  #L1dce34.  goto L1dce38;
  #L1dce36.  v2:= 0I;
  #L1dce38.  if v2 == 0 then goto L1dceec;
  #L1dce3c.  v2:= v5.`kotlin.a0.f.f` @type ^`java.util.regex.Pattern` @kind object;
  #L1dce40.  call temp:= `matcher`(v2, v6) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L1dce46.  v2:= temp @kind object;
  #L1dce48.  call temp:= `find`(v2) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L1dce4e.  v3:= temp;
  #L1dce50.  if v3 == 0 then goto L1dceda;
  #L1dce54.  if v7 != v1 then goto L1dce5a;
  #L1dce58.  goto L1dceda;
  #L1dce5a.  v3:= new `java.util.ArrayList`;
  #L1dce5e.  v4:= 10I;
  #L1dce62.  if v7 <= 0 then goto L1dce6e;
  #L1dce66.  call temp:= `coerceAtMost`(v7, v4) @signature `Lkotlin/x/e;.coerceAtMost:(II)I` @kind static;
  #L1dce6c.  v4:= temp;
  #L1dce6e.  call `<init>`(v3, v4) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L1dce74.  v7:= v7 - v1 @kind int;
  #L1dce76.  call temp:= `start`(v2) @signature `Ljava/util/regex/Matcher;.start:()I` @kind virtual;
  #L1dce7c.  v1:= temp;
  #L1dce7e.  call temp:= `subSequence`(v6, v0, v1) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L1dce84.  v0:= temp @kind object;
  #L1dce86.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dce8c.  v0:= temp @kind object;
  #L1dce8e.  call temp:= `add`(v3, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1dce94.  call temp:= `end`(v2) @signature `Ljava/util/regex/Matcher;.end:()I` @kind virtual;
  #L1dce9a.  v0:= temp;
  #L1dce9c.  if v7 < 0 then goto L1dceae;
  #L1dcea0.  call temp:= `size`(v3) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1dcea6.  v1:= temp;
  #L1dcea8.  if v1 != v7 then goto L1dceae;
  #L1dceac.  goto L1dceba;
  #L1dceae.  call temp:= `find`(v2) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L1dceb4.  v1:= temp;
  #L1dceb6.  if v1 != 0 then goto L1dce76;
  #L1dceba.  call temp:= `length`(v6) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L1dcec0.  v7:= temp;
  #L1dcec2.  call temp:= `subSequence`(v6, v0, v7) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L1dcec8.  v6:= temp @kind object;
  #L1dceca.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dced0.  v6:= temp @kind object;
  #L1dced2.  call temp:= `add`(v3, v6) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1dced8.  return v3 @kind object;
  #L1dceda.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dcee0.  v6:= temp @kind object;
  #L1dcee2.  call temp:= `listOf`(v6) @signature `Lkotlin/r/j;.listOf:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L1dcee8.  v6:= temp @kind object;
  #L1dceea.  return v6 @kind object;
  #L1dceec.  v6:= new `java.lang.StringBuilder`;
  #L1dcef0.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dcef6.  v0:= "Limit must be non-negative, but was " @kind object;
  #L1dcefa.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dcf00.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dcf06.  v7:= 46I;
  #L1dcf0a.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dcf10.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dcf16.  v6:= temp @kind object;
  #L1dcf18.  v7:= new `java.lang.IllegalArgumentException`;
  #L1dcf1c.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dcf22.  v6:= temp @kind object;
  #L1dcf24.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dcf2a.  throw v7;
}
procedure `java.lang.String` `toString`(`kotlin.a0.f` v2 @kind this) @signature `Lkotlin/a0/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dcdf8.  v0:= v2.`kotlin.a0.f.f` @type ^`java.util.regex.Pattern` @kind object;
  #L1dcdfc.  call temp:= `toString`(v0) @signature `Ljava/util/regex/Pattern;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dce02.  v0:= temp @kind object;
  #L1dce04.  v1:= "nativePattern.toString()" @kind object;
  #L1dce08.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/v/c/i;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dce0e.  return v0 @kind object;
}
