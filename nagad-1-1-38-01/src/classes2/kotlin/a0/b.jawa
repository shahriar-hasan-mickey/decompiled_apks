record `kotlin.a0.b` @kind class @AccessFlag  {
}
procedure `int` `checkRadix`(`int` v5 ) @signature `Lkotlin/a0/b;.checkRadix:(I)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1dc790.  v0:= 2I;
  #L1dc792.  v1:= 36I;
  #L1dc796.  if v0 > v5 then goto L1dc7a0;
  #L1dc79a.  if v1 < v5 then goto L1dc7a0;
  #L1dc79e.  return v5;
  #L1dc7a0.  v2:= new `java.lang.IllegalArgumentException`;
  #L1dc7a4.  v3:= new `java.lang.StringBuilder`;
  #L1dc7a8.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dc7ae.  v4:= "radix " @kind object;
  #L1dc7b2.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dc7b8.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dc7be.  v5:= " was not in valid range " @kind object;
  #L1dc7c2.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dc7c8.  v5:= new `kotlin.x.d`;
  #L1dc7cc.  call `<init>`(v5, v0, v1) @signature `Lkotlin/x/d;.<init>:(II)V` @kind direct;
  #L1dc7d2.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dc7d8.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dc7de.  v5:= temp @kind object;
  #L1dc7e0.  call `<init>`(v2, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dc7e6.  throw v2;
}
procedure `int` `digitOf`(`char` v0 , `int` v1 ) @signature `Lkotlin/a0/b;.digitOf:(CI)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L1dc7f8.  call temp:= `digit`(v0, v1) @signature `Ljava/lang/Character;.digit:(II)I` @kind static;
  #L1dc7fe.  v0:= temp;
  #L1dc800.  return v0;
}
procedure `boolean` `isWhitespace`(`char` v1 ) @signature `Lkotlin/a0/b;.isWhitespace:(C)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1dc75c.  call temp:= `isWhitespace`(v1) @signature `Ljava/lang/Character;.isWhitespace:(C)Z` @kind static;
  #L1dc762.  v0:= temp;
  #L1dc764.  if v0 != 0 then goto L1dc77a;
  #L1dc768.  call temp:= `isSpaceChar`(v1) @signature `Ljava/lang/Character;.isSpaceChar:(C)Z` @kind static;
  #L1dc76e.  v1:= temp;
  #L1dc770.  if v1 == 0 then goto L1dc776;
  #L1dc774.  goto L1dc77a;
  #L1dc776.  v1:= 0I;
  #L1dc778.  goto L1dc77c;
  #L1dc77a.  v1:= 1I;
  #L1dc77c.  return v1;
}
