record `kotlin.k` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Serializable` @kind interface {
  `java.lang.Object` `kotlin.k.f` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `kotlin.k.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.k` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/k;.<init>:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1d4c00.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d4c06.  v0.`kotlin.k.f` @type ^`java.lang.Object` := v1 @kind object;
  #L1d4c0a.  v0.`kotlin.k.g` @type ^`java.lang.Object` := v2 @kind object;
  #L1d4c0e.  return @kind void;
}
procedure `java.lang.Object` `component1`(`kotlin.k` v1 @kind this) @signature `Lkotlin/k;.component1:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d4b48.  v0:= v1.`kotlin.k.f` @type ^`java.lang.Object` @kind object;
  #L1d4b4c.  return v0 @kind object;
}
procedure `java.lang.Object` `component2`(`kotlin.k` v1 @kind this) @signature `Lkotlin/k;.component2:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d4b60.  v0:= v1.`kotlin.k.g` @type ^`java.lang.Object` @kind object;
  #L1d4b64.  return v0 @kind object;
}
procedure `boolean` `equals`(`kotlin.k` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/k;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d4ab4.  if v2 == v3 then goto L1d4af2;
  #L1d4ab8.  v0:= instanceof @variable v3 @type ^`kotlin.k` @kind boolean;
  #L1d4abc.  if v0 == 0 then goto L1d4aee;
  #L1d4ac0.  v3:= (`kotlin.k`) v3 @kind object;
  #L1d4ac4.  v0:= v2.`kotlin.k.f` @type ^`java.lang.Object` @kind object;
  #L1d4ac8.  v1:= v3.`kotlin.k.f` @type ^`java.lang.Object` @kind object;
  #L1d4acc.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1d4ad2.  v0:= temp;
  #L1d4ad4.  if v0 == 0 then goto L1d4aee;
  #L1d4ad8.  v0:= v2.`kotlin.k.g` @type ^`java.lang.Object` @kind object;
  #L1d4adc.  v3:= v3.`kotlin.k.g` @type ^`java.lang.Object` @kind object;
  #L1d4ae0.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/v/c/i;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1d4ae6.  v3:= temp;
  #L1d4ae8.  if v3 == 0 then goto L1d4aee;
  #L1d4aec.  goto L1d4af2;
  #L1d4aee.  v3:= 0I;
  #L1d4af0.  return v3;
  #L1d4af2.  v3:= 1I;
  #L1d4af4.  return v3;
}
procedure `java.lang.Object` `getFirst`(`kotlin.k` v1 @kind this) @signature `Lkotlin/k;.getFirst:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d4b78.  v0:= v1.`kotlin.k.f` @type ^`java.lang.Object` @kind object;
  #L1d4b7c.  return v0 @kind object;
}
procedure `java.lang.Object` `getSecond`(`kotlin.k` v1 @kind this) @signature `Lkotlin/k;.getSecond:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d4b90.  v0:= v1.`kotlin.k.g` @type ^`java.lang.Object` @kind object;
  #L1d4b94.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.k` v3 @kind this) @signature `Lkotlin/k;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d4b08.  v0:= v3.`kotlin.k.f` @type ^`java.lang.Object` @kind object;
  #L1d4b0c.  v1:= 0I;
  #L1d4b0e.  if v0 == 0 then goto L1d4b1c;
  #L1d4b12.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1d4b18.  v0:= temp;
  #L1d4b1a.  goto L1d4b1e;
  #L1d4b1c.  v0:= 0I;
  #L1d4b1e.  v0:= v0 * 31;
  #L1d4b22.  v2:= v3.`kotlin.k.g` @type ^`java.lang.Object` @kind object;
  #L1d4b26.  if v2 == 0 then goto L1d4b32;
  #L1d4b2a.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1d4b30.  v1:= temp;
  #L1d4b32.  v0:= v0 + v1 @kind int;
  #L1d4b34.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.k` v2 @kind this) @signature `Lkotlin/k;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d4ba8.  v0:= new `java.lang.StringBuilder`;
  #L1d4bac.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d4bb2.  v1:= 40I;
  #L1d4bb6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d4bbc.  v1:= v2.`kotlin.k.f` @type ^`java.lang.Object` @kind object;
  #L1d4bc0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d4bc6.  v1:= ", " @kind object;
  #L1d4bca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d4bd0.  v1:= v2.`kotlin.k.g` @type ^`java.lang.Object` @kind object;
  #L1d4bd4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d4bda.  v1:= 41I;
  #L1d4bde.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d4be4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4bea.  v0:= temp @kind object;
  #L1d4bec.  return v0 @kind object;
}
