record `com.bumptech.glide.load.e` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`java.util.List` v4 @kind object, `com.bumptech.glide.load.e$f` v5 @kind object) @signature `Lcom/bumptech/glide/load/e;.a:(Ljava/util/List;Lcom/bumptech/glide/load/e$f;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L28e700.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L28e706.  v0:= temp;
  #L28e708.  v1:= 0I;
  #L28e70a.  v2:= -1I;
  #L28e70c.  if v1 >= v0 then goto L28e730;
  #L28e710.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L28e716.  v3:= temp @kind object;
  #L28e718.  v3:= (`com.bumptech.glide.load.ImageHeaderParser`) v3 @kind object;
  #L28e71c.  call temp:= `getOrientation`(v5, v3) @signature `Lcom/bumptech/glide/load/e$f;.getOrientation:(Lcom/bumptech/glide/load/ImageHeaderParser;)I` @kind interface;
  #L28e722.  v3:= temp;
  #L28e724.  if v3 == v2 then goto L28e72a;
  #L28e728.  return v3;
  #L28e72a.  v1:= v1 + 1;
  #L28e72e.  goto L28e70a;
  #L28e730.  return v2;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `a`(`java.util.List` v4 @kind object, `com.bumptech.glide.load.e$g` v5 @kind object) @signature `Lcom/bumptech/glide/load/e;.a:(Ljava/util/List;Lcom/bumptech/glide/load/e$g;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L28e644.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L28e64a.  v0:= temp;
  #L28e64c.  v1:= 0I;
  #L28e64e.  if v1 >= v0 then goto L28e676;
  #L28e652.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L28e658.  v2:= temp @kind object;
  #L28e65a.  v2:= (`com.bumptech.glide.load.ImageHeaderParser`) v2 @kind object;
  #L28e65e.  call temp:= `getType`(v5, v2) @signature `Lcom/bumptech/glide/load/e$g;.getType:(Lcom/bumptech/glide/load/ImageHeaderParser;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind interface;
  #L28e664.  v2:= temp @kind object;
  #L28e666.  v3:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L28e66a.  if v2 == v3 then goto L28e670;
  #L28e66e.  return v2 @kind object;
  #L28e670.  v1:= v1 + 1;
  #L28e674.  goto L28e64e;
  #L28e676.  v4:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L28e67a.  return v4 @kind object;
}
procedure `int` `getOrientation`(`java.util.List` v1 @kind object, `com.bumptech.glide.load.m.m` v2 @kind object, `com.bumptech.glide.load.engine.z.b` v3 @kind object) @signature `Lcom/bumptech/glide/load/e;.getOrientation:(Ljava/util/List;Lcom/bumptech/glide/load/m/m;Lcom/bumptech/glide/load/engine/z/b;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L28e68c.  v0:= new `com.bumptech.glide.load.e$e`;
  #L28e690.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/e$e;.<init>:(Lcom/bumptech/glide/load/m/m;Lcom/bumptech/glide/load/engine/z/b;)V` @kind direct;
  #L28e696.  call temp:= `a`(v1, v0) @signature `Lcom/bumptech/glide/load/e;.a:(Ljava/util/List;Lcom/bumptech/glide/load/e$f;)I` @kind static;
  #L28e69c.  v1:= temp;
  #L28e69e.  return v1;
}
procedure `int` `getOrientation`(`java.util.List` v1 @kind object, `java.io.InputStream` v2 @kind object, `com.bumptech.glide.load.engine.z.b` v3 @kind object) @signature `Lcom/bumptech/glide/load/e;.getOrientation:(Ljava/util/List;Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/z/b;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L28e6b0.  if v2 != 0 then goto L28e6b8;
  #L28e6b4.  v1:= -1I;
  #L28e6b6.  return v1;
  #L28e6b8.  call temp:= `markSupported`(v2) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L28e6be.  v0:= temp;
  #L28e6c0.  if v0 != 0 then goto L28e6d0;
  #L28e6c4.  v0:= new `com.bumptech.glide.load.resource.bitmap.v`;
  #L28e6c8.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.<init>:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/z/b;)V` @kind direct;
  #L28e6ce.  v2:= v0 @kind object;
  #L28e6d0.  v0:= 5242880I;
  #L28e6d4.  call `mark`(v2, v0) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L28e6da.  v0:= new `com.bumptech.glide.load.e$d`;
  #L28e6de.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/e$d;.<init>:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/z/b;)V` @kind direct;
  #L28e6e4.  call temp:= `a`(v1, v0) @signature `Lcom/bumptech/glide/load/e;.a:(Ljava/util/List;Lcom/bumptech/glide/load/e$f;)I` @kind static;
  #L28e6ea.  v1:= temp;
  #L28e6ec.  return v1;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `getType`(`java.util.List` v1 @kind object, `com.bumptech.glide.load.m.m` v2 @kind object, `com.bumptech.glide.load.engine.z.b` v3 @kind object) @signature `Lcom/bumptech/glide/load/e;.getType:(Ljava/util/List;Lcom/bumptech/glide/load/m/m;Lcom/bumptech/glide/load/engine/z/b;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L28e5a0.  v0:= new `com.bumptech.glide.load.e$c`;
  #L28e5a4.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/e$c;.<init>:(Lcom/bumptech/glide/load/m/m;Lcom/bumptech/glide/load/engine/z/b;)V` @kind direct;
  #L28e5aa.  call temp:= `a`(v1, v0) @signature `Lcom/bumptech/glide/load/e;.a:(Ljava/util/List;Lcom/bumptech/glide/load/e$g;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind static;
  #L28e5b0.  v1:= temp @kind object;
  #L28e5b2.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `getType`(`java.util.List` v1 @kind object, `java.io.InputStream` v2 @kind object, `com.bumptech.glide.load.engine.z.b` v3 @kind object) @signature `Lcom/bumptech/glide/load/e;.getType:(Ljava/util/List;Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/z/b;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L28e5c4.  if v2 != 0 then goto L28e5ce;
  #L28e5c8.  v1:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L28e5cc.  return v1 @kind object;
  #L28e5ce.  call temp:= `markSupported`(v2) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L28e5d4.  v0:= temp;
  #L28e5d6.  if v0 != 0 then goto L28e5e6;
  #L28e5da.  v0:= new `com.bumptech.glide.load.resource.bitmap.v`;
  #L28e5de.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.<init>:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/z/b;)V` @kind direct;
  #L28e5e4.  v2:= v0 @kind object;
  #L28e5e6.  v3:= 5242880I;
  #L28e5ea.  call `mark`(v2, v3) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L28e5f0.  v3:= new `com.bumptech.glide.load.e$a`;
  #L28e5f4.  call `<init>`(v3, v2) @signature `Lcom/bumptech/glide/load/e$a;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L28e5fa.  call temp:= `a`(v1, v3) @signature `Lcom/bumptech/glide/load/e;.a:(Ljava/util/List;Lcom/bumptech/glide/load/e$g;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind static;
  #L28e600.  v1:= temp @kind object;
  #L28e602.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `getType`(`java.util.List` v1 @kind object, `java.nio.ByteBuffer` v2 @kind object) @signature `Lcom/bumptech/glide/load/e;.getType:(Ljava/util/List;Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L28e614.  if v2 != 0 then goto L28e61e;
  #L28e618.  v1:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L28e61c.  return v1 @kind object;
  #L28e61e.  v0:= new `com.bumptech.glide.load.e$b`;
  #L28e622.  call `<init>`(v0, v2) @signature `Lcom/bumptech/glide/load/e$b;.<init>:(Ljava/nio/ByteBuffer;)V` @kind direct;
  #L28e628.  call temp:= `a`(v1, v0) @signature `Lcom/bumptech/glide/load/e;.a:(Ljava/util/List;Lcom/bumptech/glide/load/e$g;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind static;
  #L28e62e.  v1:= temp @kind object;
  #L28e630.  return v1 @kind object;
}
