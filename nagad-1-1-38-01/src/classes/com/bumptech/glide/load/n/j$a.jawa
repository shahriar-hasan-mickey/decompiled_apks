record `com.bumptech.glide.load.n.j$a` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `com.bumptech.glide.load.n.j$a.a` @AccessFlag PRIVATE;
  `java.util.Map` `com.bumptech.glide.load.n.j$a.b` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.n.j$a.c` @AccessFlag PRIVATE;
}
global `java.lang.String` `@@com.bumptech.glide.load.n.j$a.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.Map` `@@com.bumptech.glide.load.n.j$a.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/n/j$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L29a868.  call temp:= `c`() @signature `Lcom/bumptech/glide/load/n/j$a;.c:()Ljava/lang/String;` @kind static;
  #L29a86e.  v0:= temp @kind object;
  #L29a870.  `@@com.bumptech.glide.load.n.j$a.d` @type ^`java.lang.String` := v0 @kind object;
  #L29a874.  v0:= new `java.util.HashMap`;
  #L29a878.  v1:= 2I;
  #L29a87a.  call `<init>`(v0, v1) @signature `Ljava/util/HashMap;.<init>:(I)V` @kind direct;
  #L29a880.  v1:= `@@com.bumptech.glide.load.n.j$a.d` @type ^`java.lang.String` @kind object;
  #L29a884.  call temp:= `isEmpty`(v1) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L29a88a.  v1:= temp;
  #L29a88c.  if v1 != 0 then goto L29a8b0;
  #L29a890.  v1:= new `com.bumptech.glide.load.n.j$b`;
  #L29a894.  v2:= `@@com.bumptech.glide.load.n.j$a.d` @type ^`java.lang.String` @kind object;
  #L29a898.  call `<init>`(v1, v2) @signature `Lcom/bumptech/glide/load/n/j$b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29a89e.  call temp:= `singletonList`(v1) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L29a8a4.  v1:= temp @kind object;
  #L29a8a6.  v2:= "User-Agent" @kind object;
  #L29a8aa.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L29a8b0.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L29a8b6.  v0:= temp @kind object;
  #L29a8b8.  `@@com.bumptech.glide.load.n.j$a.e` @type ^`java.util.Map` := v0 @kind object;
  #L29a8bc.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.n.j$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/n/j$a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L29a8d0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29a8d6.  v0:= 1I;
  #L29a8d8.  v2.`com.bumptech.glide.load.n.j$a.a` @type ^`boolean` := v0 @kind boolean;
  #L29a8dc.  v1:= `@@com.bumptech.glide.load.n.j$a.e` @type ^`java.util.Map` @kind object;
  #L29a8e0.  v2.`com.bumptech.glide.load.n.j$a.b` @type ^`java.util.Map` := v1 @kind object;
  #L29a8e4.  v2.`com.bumptech.glide.load.n.j$a.c` @type ^`boolean` := v0 @kind boolean;
  #L29a8e8.  return @kind void;
}
procedure `java.util.List` `a`(`com.bumptech.glide.load.n.j$a` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/load/n/j$a;.a:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L29a7b0.  v0:= v2.`com.bumptech.glide.load.n.j$a.b` @type ^`java.util.Map` @kind object;
  #L29a7b4.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L29a7ba.  v0:= temp @kind object;
  #L29a7bc.  v0:= (`java.util.List`) v0 @kind object;
  #L29a7c0.  if v0 != 0 then goto L29a7d8;
  #L29a7c4.  v0:= new `java.util.ArrayList`;
  #L29a7c8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L29a7ce.  v1:= v2.`com.bumptech.glide.load.n.j$a.b` @type ^`java.util.Map` @kind object;
  #L29a7d2.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L29a7d8.  return v0 @kind object;
}
procedure `java.util.Map` `a`(`com.bumptech.glide.load.n.j$a` v5 @kind this) @signature `Lcom/bumptech/glide/load/n/j$a;.a:()Ljava/util/Map;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L29a7ec.  v0:= new `java.util.HashMap`;
  #L29a7f0.  v1:= v5.`com.bumptech.glide.load.n.j$a.b` @type ^`java.util.Map` @kind object;
  #L29a7f4.  call temp:= `size`(v1) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L29a7fa.  v1:= temp;
  #L29a7fc.  call `<init>`(v0, v1) @signature `Ljava/util/HashMap;.<init>:(I)V` @kind direct;
  #L29a802.  v1:= v5.`com.bumptech.glide.load.n.j$a.b` @type ^`java.util.Map` @kind object;
  #L29a806.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L29a80c.  v1:= temp @kind object;
  #L29a80e.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L29a814.  v1:= temp @kind object;
  #L29a816.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L29a81c.  v2:= temp;
  #L29a81e.  if v2 == 0 then goto L29a854;
  #L29a822.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29a828.  v2:= temp @kind object;
  #L29a82a.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L29a82e.  v3:= new `java.util.ArrayList`;
  #L29a832.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L29a838.  v4:= temp @kind object;
  #L29a83a.  v4:= (`java.util.Collection`) v4 @kind object;
  #L29a83e.  call `<init>`(v3, v4) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L29a844.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L29a84a.  v2:= temp @kind object;
  #L29a84c.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L29a852.  goto L29a816;
  #L29a854.  return v0 @kind object;
}
procedure `void` `b`(`com.bumptech.glide.load.n.j$a` v1 @kind this) @signature `Lcom/bumptech/glide/load/n/j$a;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L29a8fc.  v0:= v1.`com.bumptech.glide.load.n.j$a.a` @type ^`boolean` @kind boolean;
  #L29a900.  if v0 == 0 then goto L29a916;
  #L29a904.  v0:= 0I;
  #L29a906.  v1.`com.bumptech.glide.load.n.j$a.a` @type ^`boolean` := v0 @kind boolean;
  #L29a90a.  call temp:= `a`(v1) @signature `Lcom/bumptech/glide/load/n/j$a;.a:()Ljava/util/Map;` @kind direct;
  #L29a910.  v0:= temp @kind object;
  #L29a912.  v1.`com.bumptech.glide.load.n.j$a.b` @type ^`java.util.Map` := v0 @kind object;
  #L29a916.  return @kind void;
}
procedure `java.lang.String` `c`() @signature `Lcom/bumptech/glide/load/n/j$a;.c:()Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L29a724.  v0:= "http.agent" @kind object;
  #L29a728.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L29a72e.  v0:= temp @kind object;
  #L29a730.  call temp:= `isEmpty`(v0) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L29a736.  v1:= temp;
  #L29a738.  if v1 == 0 then goto L29a73e;
  #L29a73c.  return v0 @kind object;
  #L29a73e.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L29a744.  v1:= temp;
  #L29a746.  v2:= new `java.lang.StringBuilder`;
  #L29a74a.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L29a750.  v3:= temp;
  #L29a752.  call `<init>`(v2, v3) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L29a758.  v3:= 0I;
  #L29a75a.  if v3 >= v1 then goto L29a796;
  #L29a75e.  call temp:= `charAt`(v0, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L29a764.  v4:= temp;
  #L29a766.  v5:= 31I;
  #L29a76a.  if v4 > v5 then goto L29a776;
  #L29a76e.  v5:= 9I;
  #L29a772.  if v4 != v5 then goto L29a786;
  #L29a776.  v5:= 127I;
  #L29a77a.  if v4 >= v5 then goto L29a786;
  #L29a77e.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L29a784.  goto L29a790;
  #L29a786.  v4:= 63I;
  #L29a78a.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L29a790.  v3:= v3 + 1;
  #L29a794.  goto L29a75a;
  #L29a796.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L29a79c.  v0:= temp @kind object;
  #L29a79e.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.n.j$a` `addHeader`(`com.bumptech.glide.load.n.j$a` v1 @kind this, `java.lang.String` v2 @kind object, `com.bumptech.glide.load.n.i` v3 @kind object) @signature `Lcom/bumptech/glide/load/n/j$a;.addHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/n/i;)Lcom/bumptech/glide/load/n/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29a65c.  v0:= v1.`com.bumptech.glide.load.n.j$a.c` @type ^`boolean` @kind boolean;
  #L29a660.  if v0 == 0 then goto L29a67c;
  #L29a664.  v0:= "User-Agent" @kind object;
  #L29a668.  call temp:= `equalsIgnoreCase`(v0, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L29a66e.  v0:= temp;
  #L29a670.  if v0 == 0 then goto L29a67c;
  #L29a674.  call temp:= `setHeader`(v1, v2, v3) @signature `Lcom/bumptech/glide/load/n/j$a;.setHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/n/i;)Lcom/bumptech/glide/load/n/j$a;` @kind virtual;
  #L29a67a.  return v1 @kind object;
  #L29a67c.  call `b`(v1) @signature `Lcom/bumptech/glide/load/n/j$a;.b:()V` @kind direct;
  #L29a682.  call temp:= `a`(v1, v2) @signature `Lcom/bumptech/glide/load/n/j$a;.a:(Ljava/lang/String;)Ljava/util/List;` @kind direct;
  #L29a688.  v2:= temp @kind object;
  #L29a68a.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L29a690.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.n.j$a` `addHeader`(`com.bumptech.glide.load.n.j$a` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/load/n/j$a;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lcom/bumptech/glide/load/n/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29a6a4.  v0:= new `com.bumptech.glide.load.n.j$b`;
  #L29a6a8.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/load/n/j$b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29a6ae.  call temp:= `addHeader`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/n/j$a;.addHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/n/i;)Lcom/bumptech/glide/load/n/j$a;` @kind virtual;
  #L29a6b4.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.n.j` `build`(`com.bumptech.glide.load.n.j$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/n/j$a;.build:()Lcom/bumptech/glide/load/n/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29a634.  v0:= 1I;
  #L29a636.  v2.`com.bumptech.glide.load.n.j$a.a` @type ^`boolean` := v0 @kind boolean;
  #L29a63a.  v0:= new `com.bumptech.glide.load.n.j`;
  #L29a63e.  v1:= v2.`com.bumptech.glide.load.n.j$a.b` @type ^`java.util.Map` @kind object;
  #L29a642.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/load/n/j;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L29a648.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.n.j$a` `setHeader`(`com.bumptech.glide.load.n.j$a` v1 @kind this, `java.lang.String` v2 @kind object, `com.bumptech.glide.load.n.i` v3 @kind object) @signature `Lcom/bumptech/glide/load/n/j$a;.setHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/n/i;)Lcom/bumptech/glide/load/n/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29a6c8.  call `b`(v1) @signature `Lcom/bumptech/glide/load/n/j$a;.b:()V` @kind direct;
  #L29a6ce.  if v3 != 0 then goto L29a6de;
  #L29a6d2.  v3:= v1.`com.bumptech.glide.load.n.j$a.b` @type ^`java.util.Map` @kind object;
  #L29a6d6.  call temp:= `remove`(v3, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L29a6dc.  goto L29a6f2;
  #L29a6de.  call temp:= `a`(v1, v2) @signature `Lcom/bumptech/glide/load/n/j$a;.a:(Ljava/lang/String;)Ljava/util/List;` @kind direct;
  #L29a6e4.  v0:= temp @kind object;
  #L29a6e6.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L29a6ec.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L29a6f2.  v3:= v1.`com.bumptech.glide.load.n.j$a.c` @type ^`boolean` @kind boolean;
  #L29a6f6.  if v3 == 0 then goto L29a710;
  #L29a6fa.  v3:= "User-Agent" @kind object;
  #L29a6fe.  call temp:= `equalsIgnoreCase`(v3, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L29a704.  v2:= temp;
  #L29a706.  if v2 == 0 then goto L29a710;
  #L29a70a.  v2:= 0I;
  #L29a70c.  v1.`com.bumptech.glide.load.n.j$a.c` @type ^`boolean` := v2 @kind boolean;
  #L29a710.  return v1 @kind object;
}
