record `com.bumptech.glide.load.n.r` @kind class @AccessFlag PUBLIC {
  `java.util.List` `com.bumptech.glide.load.n.r.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.n.r$c` `com.bumptech.glide.load.n.r.b` @AccessFlag PRIVATE_FINAL;
  `java.util.Set` `com.bumptech.glide.load.n.r.c` @AccessFlag PRIVATE_FINAL;
  `c.h.i.d` `com.bumptech.glide.load.n.r.d` @AccessFlag PRIVATE_FINAL;
}
global `com.bumptech.glide.load.n.r$c` `@@com.bumptech.glide.load.n.r.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.bumptech.glide.load.n.n` `@@com.bumptech.glide.load.n.r.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/n/r;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L29b980.  v0:= new `com.bumptech.glide.load.n.r$c`;
  #L29b984.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/n/r$c;.<init>:()V` @kind direct;
  #L29b98a.  `@@com.bumptech.glide.load.n.r.e` @type ^`com.bumptech.glide.load.n.r$c` := v0 @kind object;
  #L29b98e.  v0:= new `com.bumptech.glide.load.n.r$a`;
  #L29b992.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/n/r$a;.<init>:()V` @kind direct;
  #L29b998.  `@@com.bumptech.glide.load.n.r.f` @type ^`com.bumptech.glide.load.n.n` := v0 @kind object;
  #L29b99c.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.n.r` v1 @kind this, `c.h.i.d` v2 @kind object) @signature `Lcom/bumptech/glide/load/n/r;.<init>:(Lc/h/i/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L29b9b0.  v0:= `@@com.bumptech.glide.load.n.r.e` @type ^`com.bumptech.glide.load.n.r$c` @kind object;
  #L29b9b4.  call `<init>`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/n/r;.<init>:(Lc/h/i/d;Lcom/bumptech/glide/load/n/r$c;)V` @kind direct;
  #L29b9ba.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.n.r` v1 @kind this, `c.h.i.d` v2 @kind object, `com.bumptech.glide.load.n.r$c` v3 @kind object) @signature `Lcom/bumptech/glide/load/n/r;.<init>:(Lc/h/i/d;Lcom/bumptech/glide/load/n/r$c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L29b9cc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29b9d2.  v0:= new `java.util.ArrayList`;
  #L29b9d6.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L29b9dc.  v1.`com.bumptech.glide.load.n.r.a` @type ^`java.util.List` := v0 @kind object;
  #L29b9e0.  v0:= new `java.util.HashSet`;
  #L29b9e4.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L29b9ea.  v1.`com.bumptech.glide.load.n.r.c` @type ^`java.util.Set` := v0 @kind object;
  #L29b9ee.  v1.`com.bumptech.glide.load.n.r.d` @type ^`c.h.i.d` := v2 @kind object;
  #L29b9f2.  v1.`com.bumptech.glide.load.n.r.b` @type ^`com.bumptech.glide.load.n.r$c` := v3 @kind object;
  #L29b9f6.  return @kind void;
}
procedure `com.bumptech.glide.load.n.n` `a`() @signature `Lcom/bumptech/glide/load/n/r;.a:()Lcom/bumptech/glide/load/n/n;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L29b834.  v0:= `@@com.bumptech.glide.load.n.r.f` @type ^`com.bumptech.glide.load.n.n` @kind object;
  #L29b838.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.n.n` `a`(`com.bumptech.glide.load.n.r` v0 @kind this, `com.bumptech.glide.load.n.r$b` v1 @kind object) @signature `Lcom/bumptech/glide/load/n/r;.a:(Lcom/bumptech/glide/load/n/r$b;)Lcom/bumptech/glide/load/n/n;` @AccessFlag PRIVATE {
    temp;

  #L29b6e4.  v1:= v1.`com.bumptech.glide.load.n.r$b.c` @type ^`com.bumptech.glide.load.n.o` @kind object;
  #L29b6e8.  call temp:= `build`(v1, v0) @signature `Lcom/bumptech/glide/load/n/o;.build:(Lcom/bumptech/glide/load/n/r;)Lcom/bumptech/glide/load/n/n;` @kind interface;
  #L29b6ee.  v1:= temp @kind object;
  #L29b6f0.  call temp:= `checkNotNull`(v1) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L29b6f6.  v1:= (`com.bumptech.glide.load.n.n`) v1 @kind object;
  #L29b6fa.  return v1 @kind object;
}
procedure `void` `a`(`com.bumptech.glide.load.n.r` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `com.bumptech.glide.load.n.o` v4 @kind object, `boolean` v5 ) @signature `Lcom/bumptech/glide/load/n/r;.a:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/n/o;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L29ba08.  v0:= new `com.bumptech.glide.load.n.r$b`;
  #L29ba0c.  call `<init>`(v0, v2, v3, v4) @signature `Lcom/bumptech/glide/load/n/r$b;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/n/o;)V` @kind direct;
  #L29ba12.  v2:= v1.`com.bumptech.glide.load.n.r.a` @type ^`java.util.List` @kind object;
  #L29ba16.  if v5 == 0 then goto L29ba24;
  #L29ba1a.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L29ba20.  v3:= temp;
  #L29ba22.  goto L29ba26;
  #L29ba24.  v3:= 0I;
  #L29ba26.  call `add`(v2, v3, v0) @signature `Ljava/util/List;.add:(ILjava/lang/Object;)V` @kind interface;
  #L29ba2c.  return @kind void;
}
procedure `java.util.List` `a`(`com.bumptech.glide.load.n.r` v4 @kind this, `java.lang.Class` v5 @kind object) @signature `Lcom/bumptech/glide/load/n/r;.a:(Ljava/lang/Class;)Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L29b84c.  @monitorenter v4
  #L29b84e.  v0:= new `java.util.ArrayList`;
  #L29b852.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L29b858.  v1:= v4.`com.bumptech.glide.load.n.r.a` @type ^`java.util.List` @kind object;
  #L29b85c.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L29b862.  v1:= temp @kind object;
  #L29b864.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L29b86a.  v2:= temp;
  #L29b86c.  if v2 == 0 then goto L29b8be;
  #L29b870.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29b876.  v2:= temp @kind object;
  #L29b878.  v2:= (`com.bumptech.glide.load.n.r$b`) v2 @kind object;
  #L29b87c.  v3:= v4.`com.bumptech.glide.load.n.r.c` @type ^`java.util.Set` @kind object;
  #L29b880.  call temp:= `contains`(v3, v2) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L29b886.  v3:= temp;
  #L29b888.  if v3 == 0 then goto L29b88e;
  #L29b88c.  goto L29b864;
  #L29b88e.  call temp:= `handles`(v2, v5) @signature `Lcom/bumptech/glide/load/n/r$b;.handles:(Ljava/lang/Class;)Z` @kind virtual;
  #L29b894.  v3:= temp;
  #L29b896.  if v3 == 0 then goto L29b864;
  #L29b89a.  v3:= v4.`com.bumptech.glide.load.n.r.c` @type ^`java.util.Set` @kind object;
  #L29b89e.  call temp:= `add`(v3, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L29b8a4.  call temp:= `a`(v4, v2) @signature `Lcom/bumptech/glide/load/n/r;.a:(Lcom/bumptech/glide/load/n/r$b;)Lcom/bumptech/glide/load/n/n;` @kind direct;
  #L29b8aa.  v3:= temp @kind object;
  #L29b8ac.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L29b8b2.  v3:= v4.`com.bumptech.glide.load.n.r.c` @type ^`java.util.Set` @kind object;
  #L29b8b6.  call temp:= `remove`(v3, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L29b8bc.  goto L29b864;
  #L29b8be.  @monitorexit v4
  #L29b8c0.  return v0 @kind object;
  #L29b8c2.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29b8c4.  v0:= v4.`com.bumptech.glide.load.n.r.c` @type ^`java.util.Set` @kind object;
  #L29b8c8.  call `clear`(v0) @signature `Ljava/util/Set;.clear:()V` @kind interface;
  #L29b8ce.  throw v5;
  #L29b8d0.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29b8d2.  @monitorexit v4
  #L29b8d4.  throw v5;
  catch `java.lang.Throwable` @[L29b84e..L29b8bc] goto L29b8c2;
  catch `java.lang.Throwable` @[L29b8c4..L29b8d0] goto L29b8d0;
}
procedure `void` `a`(`com.bumptech.glide.load.n.r` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `com.bumptech.glide.load.n.o` v4 @kind object) @signature `Lcom/bumptech/glide/load/n/r;.a:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/n/o;)V` @AccessFlag  {
    temp;
    v0;

  #L29ba40.  @monitorenter v1
  #L29ba42.  v0:= 1I;
  #L29ba44.  call `a`(v1, v2, v3, v4, v0) @signature `Lcom/bumptech/glide/load/n/r;.a:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/n/o;Z)V` @kind direct;
  #L29ba4a.  @monitorexit v1
  #L29ba4c.  return @kind void;
  #L29ba4e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29ba50.  @monitorexit v1
  #L29ba52.  throw v2;
  catch `java.lang.Throwable` @[L29ba44..L29ba4a] goto L29ba4e;
}
procedure `java.util.List` `b`(`com.bumptech.glide.load.n.r` v4 @kind this, `java.lang.Class` v5 @kind object) @signature `Lcom/bumptech/glide/load/n/r;.b:(Ljava/lang/Class;)Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L29b900.  @monitorenter v4
  #L29b902.  v0:= new `java.util.ArrayList`;
  #L29b906.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L29b90c.  v1:= v4.`com.bumptech.glide.load.n.r.a` @type ^`java.util.List` @kind object;
  #L29b910.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L29b916.  v1:= temp @kind object;
  #L29b918.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L29b91e.  v2:= temp;
  #L29b920.  if v2 == 0 then goto L29b958;
  #L29b924.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29b92a.  v2:= temp @kind object;
  #L29b92c.  v2:= (`com.bumptech.glide.load.n.r$b`) v2 @kind object;
  #L29b930.  v3:= v2.`com.bumptech.glide.load.n.r$b.b` @type ^`java.lang.Class` @kind object;
  #L29b934.  call temp:= `contains`(v0, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L29b93a.  v3:= temp;
  #L29b93c.  if v3 != 0 then goto L29b918;
  #L29b940.  call temp:= `handles`(v2, v5) @signature `Lcom/bumptech/glide/load/n/r$b;.handles:(Ljava/lang/Class;)Z` @kind virtual;
  #L29b946.  v3:= temp;
  #L29b948.  if v3 == 0 then goto L29b918;
  #L29b94c.  v2:= v2.`com.bumptech.glide.load.n.r$b.b` @type ^`java.lang.Class` @kind object;
  #L29b950.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L29b956.  goto L29b918;
  #L29b958.  @monitorexit v4
  #L29b95a.  return v0 @kind object;
  #L29b95c.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29b95e.  @monitorexit v4
  #L29b960.  throw v5;
  catch `java.lang.Throwable` @[L29b902..L29b956] goto L29b95c;
}
procedure `com.bumptech.glide.load.n.n` `build`(`com.bumptech.glide.load.n.r` v7 @kind this, `java.lang.Class` v8 @kind object, `java.lang.Class` v9 @kind object) @signature `Lcom/bumptech/glide/load/n/r;.build:(Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/load/n/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L29b70c.  @monitorenter v7
  #L29b70e.  v0:= new `java.util.ArrayList`;
  #L29b712.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L29b718.  v1:= v7.`com.bumptech.glide.load.n.r.a` @type ^`java.util.List` @kind object;
  #L29b71c.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L29b722.  v1:= temp @kind object;
  #L29b724.  v2:= 0I;
  #L29b726.  v3:= 1I;
  #L29b728.  v4:= 0I;
  #L29b72a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L29b730.  v5:= temp;
  #L29b732.  if v5 == 0 then goto L29b786;
  #L29b736.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29b73c.  v5:= temp @kind object;
  #L29b73e.  v5:= (`com.bumptech.glide.load.n.r$b`) v5 @kind object;
  #L29b742.  v6:= v7.`com.bumptech.glide.load.n.r.c` @type ^`java.util.Set` @kind object;
  #L29b746.  call temp:= `contains`(v6, v5) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L29b74c.  v6:= temp;
  #L29b74e.  if v6 == 0 then goto L29b756;
  #L29b752.  v4:= 1I;
  #L29b754.  goto L29b72a;
  #L29b756.  call temp:= `handles`(v5, v8, v9) @signature `Lcom/bumptech/glide/load/n/r$b;.handles:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L29b75c.  v6:= temp;
  #L29b75e.  if v6 == 0 then goto L29b72a;
  #L29b762.  v6:= v7.`com.bumptech.glide.load.n.r.c` @type ^`java.util.Set` @kind object;
  #L29b766.  call temp:= `add`(v6, v5) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L29b76c.  call temp:= `a`(v7, v5) @signature `Lcom/bumptech/glide/load/n/r;.a:(Lcom/bumptech/glide/load/n/r$b;)Lcom/bumptech/glide/load/n/n;` @kind direct;
  #L29b772.  v6:= temp @kind object;
  #L29b774.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L29b77a.  v6:= v7.`com.bumptech.glide.load.n.r.c` @type ^`java.util.Set` @kind object;
  #L29b77e.  call temp:= `remove`(v6, v5) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L29b784.  goto L29b72a;
  #L29b786.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L29b78c.  v1:= temp;
  #L29b78e.  if v1 <= v3 then goto L29b7a6;
  #L29b792.  v8:= v7.`com.bumptech.glide.load.n.r.b` @type ^`com.bumptech.glide.load.n.r$c` @kind object;
  #L29b796.  v9:= v7.`com.bumptech.glide.load.n.r.d` @type ^`c.h.i.d` @kind object;
  #L29b79a.  call temp:= `build`(v8, v0, v9) @signature `Lcom/bumptech/glide/load/n/r$c;.build:(Ljava/util/List;Lc/h/i/d;)Lcom/bumptech/glide/load/n/q;` @kind virtual;
  #L29b7a0.  v8:= temp @kind object;
  #L29b7a2.  @monitorexit v7
  #L29b7a4.  return v8 @kind object;
  #L29b7a6.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L29b7ac.  v1:= temp;
  #L29b7ae.  if v1 != v3 then goto L29b7c2;
  #L29b7b2.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L29b7b8.  v8:= temp @kind object;
  #L29b7ba.  v8:= (`com.bumptech.glide.load.n.n`) v8 @kind object;
  #L29b7be.  @monitorexit v7
  #L29b7c0.  return v8 @kind object;
  #L29b7c2.  if v4 == 0 then goto L29b7d2;
  #L29b7c6.  call temp:= `a`() @signature `Lcom/bumptech/glide/load/n/r;.a:()Lcom/bumptech/glide/load/n/n;` @kind static;
  #L29b7cc.  v8:= temp @kind object;
  #L29b7ce.  @monitorexit v7
  #L29b7d0.  return v8 @kind object;
  #L29b7d2.  v0:= new `com.bumptech.glide.Registry$NoModelLoaderAvailableException`;
  #L29b7d6.  call `<init>`(v0, v8, v9) @signature `Lcom/bumptech/glide/Registry$NoModelLoaderAvailableException;.<init>:(Ljava/lang/Class;Ljava/lang/Class;)V` @kind direct;
  #L29b7dc.  throw v0;
  #L29b7de.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29b7e0.  v9:= v7.`com.bumptech.glide.load.n.r.c` @type ^`java.util.Set` @kind object;
  #L29b7e4.  call `clear`(v9) @signature `Ljava/util/Set;.clear:()V` @kind interface;
  #L29b7ea.  throw v8;
  #L29b7ec.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29b7ee.  @monitorexit v7
  #L29b7f0.  throw v8;
  catch `java.lang.Throwable` @[L29b70e..L29b7a2] goto L29b7de;
  catch `java.lang.Throwable` @[L29b7a6..L29b7be] goto L29b7de;
  catch `java.lang.Throwable` @[L29b7c6..L29b7ce] goto L29b7de;
  catch `java.lang.Throwable` @[L29b7d2..L29b7de] goto L29b7de;
  catch `java.lang.Throwable` @[L29b7e0..L29b7ec] goto L29b7ec;
}
