record `com.bumptech.glide.load.n.b$a$a` @kind class @AccessFlag  extends `com.bumptech.glide.load.n.b$b` @kind interface {
}
procedure `void` `<init>`(`com.bumptech.glide.load.n.b$a$a` v0 @kind this, `com.bumptech.glide.load.n.b$a` v1 @kind object) @signature `Lcom/bumptech/glide/load/n/b$a$a;.<init>:(Lcom/bumptech/glide/load/n/b$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L299864.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29986a.  return @kind void;
}
procedure `java.lang.Object` `convert`(`com.bumptech.glide.load.n.b$a$a` v0 @kind this, `byte`[] v1 @kind object) @signature `Lcom/bumptech/glide/load/n/b$a$a;.convert:([B)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L29982c.  call temp:= `convert`(v0, v1) @signature `Lcom/bumptech/glide/load/n/b$a$a;.convert:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L299832.  v1:= temp @kind object;
  #L299834.  return v1 @kind object;
}
procedure `java.nio.ByteBuffer` `convert`(`com.bumptech.glide.load.n.b$a$a` v0 @kind this, `byte`[] v1 @kind object) @signature `Lcom/bumptech/glide/load/n/b$a$a;.convert:([B)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;

  #L299848.  call temp:= `wrap`(v1) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L29984e.  v1:= temp @kind object;
  #L299850.  return v1 @kind object;
}
procedure `java.lang.Class` `getDataClass`(`com.bumptech.glide.load.n.b$a$a` v1 @kind this) @signature `Lcom/bumptech/glide/load/n/b$a$a;.getDataClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L299814.  v0:= constclass @type ^`java.nio.ByteBuffer` @kind object;
  #L299818.  return v0 @kind object;
}
