record `com.bumptech.glide.load.n.h` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `com.bumptech.glide.load.n.h` `@@com.bumptech.glide.load.n.h.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/n/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L29a600.  v0:= new `com.bumptech.glide.load.n.h$a`;
  #L29a604.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/n/h$a;.<init>:()V` @kind direct;
  #L29a60a.  v0:= new `com.bumptech.glide.load.n.j$a`;
  #L29a60e.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/n/j$a;.<init>:()V` @kind direct;
  #L29a614.  call temp:= `build`(v0) @signature `Lcom/bumptech/glide/load/n/j$a;.build:()Lcom/bumptech/glide/load/n/j;` @kind virtual;
  #L29a61a.  v0:= temp @kind object;
  #L29a61c.  `@@com.bumptech.glide.load.n.h.a` @type ^`com.bumptech.glide.load.n.h` := v0 @kind object;
  #L29a620.  return @kind void;
}
procedure `java.util.Map` `getHeaders`() @signature `Lcom/bumptech/glide/load/n/h;.getHeaders:()Ljava/util/Map;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
