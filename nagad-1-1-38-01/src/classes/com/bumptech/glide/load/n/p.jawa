record `com.bumptech.glide.load.n.p` @kind class @AccessFlag PUBLIC {
  `com.bumptech.glide.load.n.r` `com.bumptech.glide.load.n.p.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.n.p$a` `com.bumptech.glide.load.n.p.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.n.p` v1 @kind this, `c.h.i.d` v2 @kind object) @signature `Lcom/bumptech/glide/load/n/p;.<init>:(Lc/h/i/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L29b320.  v0:= new `com.bumptech.glide.load.n.r`;
  #L29b324.  call `<init>`(v0, v2) @signature `Lcom/bumptech/glide/load/n/r;.<init>:(Lc/h/i/d;)V` @kind direct;
  #L29b32a.  call `<init>`(v1, v0) @signature `Lcom/bumptech/glide/load/n/p;.<init>:(Lcom/bumptech/glide/load/n/r;)V` @kind direct;
  #L29b330.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.n.p` v1 @kind this, `com.bumptech.glide.load.n.r` v2 @kind object) @signature `Lcom/bumptech/glide/load/n/p;.<init>:(Lcom/bumptech/glide/load/n/r;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L29b344.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29b34a.  v0:= new `com.bumptech.glide.load.n.p$a`;
  #L29b34e.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/n/p$a;.<init>:()V` @kind direct;
  #L29b354.  v1.`com.bumptech.glide.load.n.p.b` @type ^`com.bumptech.glide.load.n.p$a` := v0 @kind object;
  #L29b358.  v1.`com.bumptech.glide.load.n.p.a` @type ^`com.bumptech.glide.load.n.r` := v2 @kind object;
  #L29b35c.  return @kind void;
}
procedure `java.lang.Class` `a`(`java.lang.Object` v0 @kind object) @signature `Lcom/bumptech/glide/load/n/p;.a:(Ljava/lang/Object;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L29b1d0.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L29b1d6.  v0:= temp @kind object;
  #L29b1d8.  return v0 @kind object;
}
procedure `java.util.List` `a`(`com.bumptech.glide.load.n.p` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lcom/bumptech/glide/load/n/p;.a:(Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L29b2c8.  @monitorenter v2
  #L29b2ca.  v0:= v2.`com.bumptech.glide.load.n.p.b` @type ^`com.bumptech.glide.load.n.p$a` @kind object;
  #L29b2ce.  call temp:= `get`(v0, v3) @signature `Lcom/bumptech/glide/load/n/p$a;.get:(Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L29b2d4.  v0:= temp @kind object;
  #L29b2d6.  if v0 != 0 then goto L29b2f8;
  #L29b2da.  v0:= v2.`com.bumptech.glide.load.n.p.a` @type ^`com.bumptech.glide.load.n.r` @kind object;
  #L29b2de.  call temp:= `a`(v0, v3) @signature `Lcom/bumptech/glide/load/n/r;.a:(Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L29b2e4.  v0:= temp @kind object;
  #L29b2e6.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L29b2ec.  v0:= temp @kind object;
  #L29b2ee.  v1:= v2.`com.bumptech.glide.load.n.p.b` @type ^`com.bumptech.glide.load.n.p$a` @kind object;
  #L29b2f2.  call `put`(v1, v3, v0) @signature `Lcom/bumptech/glide/load/n/p$a;.put:(Ljava/lang/Class;Ljava/util/List;)V` @kind virtual;
  #L29b2f8.  @monitorexit v2
  #L29b2fa.  return v0 @kind object;
  #L29b2fc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29b2fe.  @monitorexit v2
  #L29b300.  throw v3;
  catch `java.lang.Throwable` @[L29b2ca..L29b2f8] goto L29b2fc;
}
procedure `void` `append`(`com.bumptech.glide.load.n.p` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `com.bumptech.glide.load.n.o` v4 @kind object) @signature `Lcom/bumptech/glide/load/n/p;.append:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/n/o;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29b370.  @monitorenter v1
  #L29b372.  v0:= v1.`com.bumptech.glide.load.n.p.a` @type ^`com.bumptech.glide.load.n.r` @kind object;
  #L29b376.  call `a`(v0, v2, v3, v4) @signature `Lcom/bumptech/glide/load/n/r;.a:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/n/o;)V` @kind virtual;
  #L29b37c.  v2:= v1.`com.bumptech.glide.load.n.p.b` @type ^`com.bumptech.glide.load.n.p$a` @kind object;
  #L29b380.  call `clear`(v2) @signature `Lcom/bumptech/glide/load/n/p$a;.clear:()V` @kind virtual;
  #L29b386.  @monitorexit v1
  #L29b388.  return @kind void;
  #L29b38a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29b38c.  @monitorexit v1
  #L29b38e.  throw v2;
  catch `java.lang.Throwable` @[L29b372..L29b386] goto L29b38a;
}
procedure `java.util.List` `getDataClasses`(`com.bumptech.glide.load.n.p` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/bumptech/glide/load/n/p;.getDataClasses:(Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29b1ec.  @monitorenter v1
  #L29b1ee.  v0:= v1.`com.bumptech.glide.load.n.p.a` @type ^`com.bumptech.glide.load.n.r` @kind object;
  #L29b1f2.  call temp:= `b`(v0, v2) @signature `Lcom/bumptech/glide/load/n/r;.b:(Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L29b1f8.  v2:= temp @kind object;
  #L29b1fa.  @monitorexit v1
  #L29b1fc.  return v2 @kind object;
  #L29b1fe.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29b200.  @monitorexit v1
  #L29b202.  throw v2;
  catch `java.lang.Throwable` @[L29b1ee..L29b1fa] goto L29b1fe;
}
procedure `java.util.List` `getModelLoaders`(`com.bumptech.glide.load.n.p` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lcom/bumptech/glide/load/n/p;.getModelLoaders:(Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L29b220.  call temp:= `a`(v9) @signature `Lcom/bumptech/glide/load/n/p;.a:(Ljava/lang/Object;)Ljava/lang/Class;` @kind static;
  #L29b226.  v0:= temp @kind object;
  #L29b228.  call temp:= `a`(v8, v0) @signature `Lcom/bumptech/glide/load/n/p;.a:(Ljava/lang/Class;)Ljava/util/List;` @kind direct;
  #L29b22e.  v0:= temp @kind object;
  #L29b230.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L29b236.  v1:= temp;
  #L29b238.  if v1 != 0 then goto L29b2ac;
  #L29b23c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L29b242.  v1:= temp;
  #L29b244.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L29b24a.  v2:= temp @kind object;
  #L29b24c.  v3:= 0I;
  #L29b24e.  v4:= 1I;
  #L29b250.  v4:= v2 @kind object;
  #L29b252.  v2:= 0I;
  #L29b254.  v5:= 1I;
  #L29b256.  if v2 >= v1 then goto L29b292;
  #L29b25a.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L29b260.  v6:= temp @kind object;
  #L29b262.  v6:= (`com.bumptech.glide.load.n.n`) v6 @kind object;
  #L29b266.  call temp:= `handles`(v6, v9) @signature `Lcom/bumptech/glide/load/n/n;.handles:(Ljava/lang/Object;)Z` @kind interface;
  #L29b26c.  v7:= temp;
  #L29b26e.  if v7 == 0 then goto L29b28c;
  #L29b272.  if v5 == 0 then goto L29b286;
  #L29b276.  v4:= new `java.util.ArrayList`;
  #L29b27a.  v5:= v1 - v2 @kind int;
  #L29b27e.  call `<init>`(v4, v5) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L29b284.  v5:= 0I;
  #L29b286.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L29b28c.  v2:= v2 + 1;
  #L29b290.  goto L29b256;
  #L29b292.  call temp:= `isEmpty`(v4) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L29b298.  v1:= temp;
  #L29b29a.  if v1 != 0 then goto L29b2a0;
  #L29b29e.  return v4 @kind object;
  #L29b2a0.  v1:= new `com.bumptech.glide.Registry$NoModelLoaderAvailableException`;
  #L29b2a4.  call `<init>`(v1, v9, v0) @signature `Lcom/bumptech/glide/Registry$NoModelLoaderAvailableException;.<init>:(Ljava/lang/Object;Ljava/util/List;)V` @kind direct;
  #L29b2aa.  throw v1;
  #L29b2ac.  v0:= new `com.bumptech.glide.Registry$NoModelLoaderAvailableException`;
  #L29b2b0.  call `<init>`(v0, v9) @signature `Lcom/bumptech/glide/Registry$NoModelLoaderAvailableException;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L29b2b6.  throw v0;
}
