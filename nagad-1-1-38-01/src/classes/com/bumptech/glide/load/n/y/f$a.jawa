record `com.bumptech.glide.load.n.y.f$a` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.n.o` @kind interface {
}
procedure `void` `<init>`(`com.bumptech.glide.load.n.y.f$a` v0 @kind this) @signature `Lcom/bumptech/glide/load/n/y/f$a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L29d044.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29d04a.  return @kind void;
}
procedure `com.bumptech.glide.load.n.n` `build`(`com.bumptech.glide.load.n.y.f$a` v3 @kind this, `com.bumptech.glide.load.n.r` v4 @kind object) @signature `Lcom/bumptech/glide/load/n/y/f$a;.build:(Lcom/bumptech/glide/load/n/r;)Lcom/bumptech/glide/load/n/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L29d018.  v0:= new `com.bumptech.glide.load.n.y.f`;
  #L29d01c.  v1:= constclass @type ^`com.bumptech.glide.load.n.g` @kind object;
  #L29d020.  v2:= constclass @type ^`java.io.InputStream` @kind object;
  #L29d024.  call temp:= `build`(v4, v1, v2) @signature `Lcom/bumptech/glide/load/n/r;.build:(Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/load/n/n;` @kind virtual;
  #L29d02a.  v4:= temp @kind object;
  #L29d02c.  call `<init>`(v0, v4) @signature `Lcom/bumptech/glide/load/n/y/f;.<init>:(Lcom/bumptech/glide/load/n/n;)V` @kind direct;
  #L29d032.  return v0 @kind object;
}
