record `com.bumptech.glide.load.n.m$b` @kind class @AccessFlag FINAL {
  `int` `com.bumptech.glide.load.n.m$b.a` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.n.m$b.b` @AccessFlag PRIVATE;
  `java.lang.Object` `com.bumptech.glide.load.n.m$b.c` @AccessFlag PRIVATE;
}
global `java.util.Queue` `@@com.bumptech.glide.load.n.m$b.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/n/m$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L29af74.  v0:= 0I;
  #L29af76.  call temp:= `createQueue`(v0) @signature `Lcom/bumptech/glide/s/k;.createQueue:(I)Ljava/util/Queue;` @kind static;
  #L29af7c.  v0:= temp @kind object;
  #L29af7e.  `@@com.bumptech.glide.load.n.m$b.d` @type ^`java.util.Queue` := v0 @kind object;
  #L29af82.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.n.m$b` v0 @kind this) @signature `Lcom/bumptech/glide/load/n/m$b;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L29af94.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29af9a.  return @kind void;
}
procedure `com.bumptech.glide.load.n.m$b` `a`(`java.lang.Object` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/load/n/m$b;.a:(Ljava/lang/Object;II)Lcom/bumptech/glide/load/n/m$b;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L29aee8.  v0:= `@@com.bumptech.glide.load.n.m$b.d` @type ^`java.util.Queue` @kind object;
  #L29aeec.  @monitorenter v0
  #L29aeee.  v1:= `@@com.bumptech.glide.load.n.m$b.d` @type ^`java.util.Queue` @kind object;
  #L29aef2.  call temp:= `poll`(v1) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L29aef8.  v1:= temp @kind object;
  #L29aefa.  v1:= (`com.bumptech.glide.load.n.m$b`) v1 @kind object;
  #L29aefe.  @monitorexit v0
  #L29af00.  if v1 != 0 then goto L29af0e;
  #L29af04.  v1:= new `com.bumptech.glide.load.n.m$b`;
  #L29af08.  call `<init>`(v1) @signature `Lcom/bumptech/glide/load/n/m$b;.<init>:()V` @kind direct;
  #L29af0e.  call `b`(v1, v2, v3, v4) @signature `Lcom/bumptech/glide/load/n/m$b;.b:(Ljava/lang/Object;II)V` @kind direct;
  #L29af14.  return v1 @kind object;
  #L29af16.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29af18.  @monitorexit v0
  #L29af1a.  throw v2;
  catch `java.lang.Throwable` @[L29aeee..L29af00] goto L29af16;
  catch `java.lang.Throwable` @[L29af18..L29af1a] goto L29af16;
}
procedure `void` `b`(`com.bumptech.glide.load.n.m$b` v0 @kind this, `java.lang.Object` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/bumptech/glide/load/n/m$b;.b:(Ljava/lang/Object;II)V` @AccessFlag PRIVATE {
    temp;

  #L29afac.  v0.`com.bumptech.glide.load.n.m$b.c` @type ^`java.lang.Object` := v1 @kind object;
  #L29afb0.  v0.`com.bumptech.glide.load.n.m$b.b` @type ^`int` := v2;
  #L29afb4.  v0.`com.bumptech.glide.load.n.m$b.a` @type ^`int` := v3;
  #L29afb8.  return @kind void;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.n.m$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/load/n/m$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L29ae98.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.load.n.m$b` @kind boolean;
  #L29ae9c.  v1:= 0I;
  #L29ae9e.  if v0 == 0 then goto L29aed4;
  #L29aea2.  v4:= (`com.bumptech.glide.load.n.m$b`) v4 @kind object;
  #L29aea6.  v0:= v3.`com.bumptech.glide.load.n.m$b.b` @type ^`int`;
  #L29aeaa.  v2:= v4.`com.bumptech.glide.load.n.m$b.b` @type ^`int`;
  #L29aeae.  if v0 != v2 then goto L29aed4;
  #L29aeb2.  v0:= v3.`com.bumptech.glide.load.n.m$b.a` @type ^`int`;
  #L29aeb6.  v2:= v4.`com.bumptech.glide.load.n.m$b.a` @type ^`int`;
  #L29aeba.  if v0 != v2 then goto L29aed4;
  #L29aebe.  v0:= v3.`com.bumptech.glide.load.n.m$b.c` @type ^`java.lang.Object` @kind object;
  #L29aec2.  v4:= v4.`com.bumptech.glide.load.n.m$b.c` @type ^`java.lang.Object` @kind object;
  #L29aec6.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L29aecc.  v4:= temp;
  #L29aece.  if v4 == 0 then goto L29aed4;
  #L29aed2.  v1:= 1I;
  #L29aed4.  return v1;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.n.m$b` v2 @kind this) @signature `Lcom/bumptech/glide/load/n/m$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29af40.  v0:= v2.`com.bumptech.glide.load.n.m$b.a` @type ^`int`;
  #L29af44.  v0:= v0 * 31;
  #L29af48.  v1:= v2.`com.bumptech.glide.load.n.m$b.b` @type ^`int`;
  #L29af4c.  v0:= v0 + v1 @kind int;
  #L29af4e.  v0:= v0 * 31;
  #L29af52.  v1:= v2.`com.bumptech.glide.load.n.m$b.c` @type ^`java.lang.Object` @kind object;
  #L29af56.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L29af5c.  v1:= temp;
  #L29af5e.  v0:= v0 + v1 @kind int;
  #L29af60.  return v0;
}
procedure `void` `release`(`com.bumptech.glide.load.n.m$b` v2 @kind this) @signature `Lcom/bumptech/glide/load/n/m$b;.release:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29afcc.  v0:= `@@com.bumptech.glide.load.n.m$b.d` @type ^`java.util.Queue` @kind object;
  #L29afd0.  @monitorenter v0
  #L29afd2.  v1:= `@@com.bumptech.glide.load.n.m$b.d` @type ^`java.util.Queue` @kind object;
  #L29afd6.  call temp:= `offer`(v1, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L29afdc.  @monitorexit v0
  #L29afde.  return @kind void;
  #L29afe0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29afe2.  @monitorexit v0
  #L29afe4.  throw v1;
  catch `java.lang.Throwable` @[L29afd2..L29afe4] goto L29afe0;
}
