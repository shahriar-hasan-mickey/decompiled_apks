record `com.bumptech.glide.load.n.q` @kind class @AccessFlag  extends `com.bumptech.glide.load.n.n` @kind interface {
  `java.util.List` `com.bumptech.glide.load.n.q.a` @AccessFlag PRIVATE_FINAL;
  `c.h.i.d` `com.bumptech.glide.load.n.q.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.n.q` v0 @kind this, `java.util.List` v1 @kind object, `c.h.i.d` v2 @kind object) @signature `Lcom/bumptech/glide/load/n/q;.<init>:(Ljava/util/List;Lc/h/i/d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L29bba4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29bbaa.  v0.`com.bumptech.glide.load.n.q.a` @type ^`java.util.List` := v1 @kind object;
  #L29bbae.  v0.`com.bumptech.glide.load.n.q.b` @type ^`c.h.i.d` := v2 @kind object;
  #L29bbb2.  return @kind void;
}
procedure `com.bumptech.glide.load.n.n$a` `buildLoadData`(`com.bumptech.glide.load.n.q` v7 @kind this, `java.lang.Object` v8 @kind object, `int` v9 , `int` v10 , `com.bumptech.glide.load.h` v11 @kind object) @signature `Lcom/bumptech/glide/load/n/q;.buildLoadData:(Ljava/lang/Object;IILcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/n/n$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L29bab8.  v0:= v7.`com.bumptech.glide.load.n.q.a` @type ^`java.util.List` @kind object;
  #L29babc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L29bac2.  v0:= temp;
  #L29bac4.  v1:= new `java.util.ArrayList`;
  #L29bac8.  call `<init>`(v1, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L29bace.  v2:= 0I;
  #L29bad0.  v3:= 0I;
  #L29bad2.  v4:= v2 @kind object;
  #L29bad4.  if v3 >= v0 then goto L29bb14;
  #L29bad8.  v5:= v7.`com.bumptech.glide.load.n.q.a` @type ^`java.util.List` @kind object;
  #L29badc.  call temp:= `get`(v5, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L29bae2.  v5:= temp @kind object;
  #L29bae4.  v5:= (`com.bumptech.glide.load.n.n`) v5 @kind object;
  #L29bae8.  call temp:= `handles`(v5, v8) @signature `Lcom/bumptech/glide/load/n/n;.handles:(Ljava/lang/Object;)Z` @kind interface;
  #L29baee.  v6:= temp;
  #L29baf0.  if v6 == 0 then goto L29bb0e;
  #L29baf4.  call temp:= `buildLoadData`(v5, v8, v9, v10, v11) @signature `Lcom/bumptech/glide/load/n/n;.buildLoadData:(Ljava/lang/Object;IILcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/n/n$a;` @kind interface;
  #L29bafa.  v5:= temp @kind object;
  #L29bafc.  if v5 == 0 then goto L29bb0e;
  #L29bb00.  v4:= v5.`com.bumptech.glide.load.n.n$a.a` @type ^`com.bumptech.glide.load.f` @kind object;
  #L29bb04.  v5:= v5.`com.bumptech.glide.load.n.n$a.c` @type ^`com.bumptech.glide.load.m.d` @kind object;
  #L29bb08.  call temp:= `add`(v1, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L29bb0e.  v3:= v3 + 1;
  #L29bb12.  goto L29bad4;
  #L29bb14.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L29bb1a.  v8:= temp;
  #L29bb1c.  if v8 != 0 then goto L29bb3c;
  #L29bb20.  if v4 == 0 then goto L29bb3c;
  #L29bb24.  v2:= new `com.bumptech.glide.load.n.n$a`;
  #L29bb28.  v8:= new `com.bumptech.glide.load.n.q$a`;
  #L29bb2c.  v9:= v7.`com.bumptech.glide.load.n.q.b` @type ^`c.h.i.d` @kind object;
  #L29bb30.  call `<init>`(v8, v1, v9) @signature `Lcom/bumptech/glide/load/n/q$a;.<init>:(Ljava/util/List;Lc/h/i/d;)V` @kind direct;
  #L29bb36.  call `<init>`(v2, v4, v8) @signature `Lcom/bumptech/glide/load/n/n$a;.<init>:(Lcom/bumptech/glide/load/f;Lcom/bumptech/glide/load/m/d;)V` @kind direct;
  #L29bb3c.  return v2 @kind object;
}
procedure `boolean` `handles`(`com.bumptech.glide.load.n.q` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/bumptech/glide/load/n/q;.handles:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29ba70.  v0:= v2.`com.bumptech.glide.load.n.q.a` @type ^`java.util.List` @kind object;
  #L29ba74.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L29ba7a.  v0:= temp @kind object;
  #L29ba7c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L29ba82.  v1:= temp;
  #L29ba84.  if v1 == 0 then goto L29baa4;
  #L29ba88.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29ba8e.  v1:= temp @kind object;
  #L29ba90.  v1:= (`com.bumptech.glide.load.n.n`) v1 @kind object;
  #L29ba94.  call temp:= `handles`(v1, v3) @signature `Lcom/bumptech/glide/load/n/n;.handles:(Ljava/lang/Object;)Z` @kind interface;
  #L29ba9a.  v1:= temp;
  #L29ba9c.  if v1 == 0 then goto L29ba7c;
  #L29baa0.  v3:= 1I;
  #L29baa2.  return v3;
  #L29baa4.  v3:= 0I;
  #L29baa6.  return v3;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.n.q` v2 @kind this) @signature `Lcom/bumptech/glide/load/n/q;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29bb50.  v0:= new `java.lang.StringBuilder`;
  #L29bb54.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L29bb5a.  v1:= "MultiModelLoader{modelLoaders=" @kind object;
  #L29bb5e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29bb64.  v1:= v2.`com.bumptech.glide.load.n.q.a` @type ^`java.util.List` @kind object;
  #L29bb68.  call temp:= `toArray`(v1) @signature `Ljava/util/List;.toArray:()[Ljava/lang/Object;` @kind interface;
  #L29bb6e.  v1:= temp @kind object;
  #L29bb70.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L29bb76.  v1:= temp @kind object;
  #L29bb78.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29bb7e.  v1:= 125I;
  #L29bb82.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L29bb88.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L29bb8e.  v0:= temp @kind object;
  #L29bb90.  return v0 @kind object;
}
