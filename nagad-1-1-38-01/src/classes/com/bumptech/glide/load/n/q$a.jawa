record `com.bumptech.glide.load.n.q$a` @kind class @AccessFlag  extends `com.bumptech.glide.load.m.d` @kind interface, `com.bumptech.glide.load.m.d$a` @kind interface {
  `java.util.List` `com.bumptech.glide.load.n.q$a.f` @AccessFlag PRIVATE_FINAL;
  `c.h.i.d` `com.bumptech.glide.load.n.q$a.g` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.n.q$a.h` @AccessFlag PRIVATE;
  `com.bumptech.glide.g` `com.bumptech.glide.load.n.q$a.i` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.m.d$a` `com.bumptech.glide.load.n.q$a.j` @AccessFlag PRIVATE;
  `java.util.List` `com.bumptech.glide.load.n.q$a.k` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.n.q$a.l` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.n.q$a` v0 @kind this, `java.util.List` v1 @kind object, `c.h.i.d` v2 @kind object) @signature `Lcom/bumptech/glide/load/n/q$a;.<init>:(Ljava/util/List;Lc/h/i/d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L29b404.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29b40a.  v0.`com.bumptech.glide.load.n.q$a.g` @type ^`c.h.i.d` := v2 @kind object;
  #L29b40e.  call temp:= `checkNotEmpty`(v1) @signature `Lcom/bumptech/glide/s/j;.checkNotEmpty:(Ljava/util/Collection;)Ljava/util/Collection;` @kind static;
  #L29b414.  v0.`com.bumptech.glide.load.n.q$a.f` @type ^`java.util.List` := v1 @kind object;
  #L29b418.  v1:= 0I;
  #L29b41a.  v0.`com.bumptech.glide.load.n.q$a.h` @type ^`int` := v1;
  #L29b41e.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.n.q$a` v4 @kind this) @signature `Lcom/bumptech/glide/load/n/q$a;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L29b578.  v0:= v4.`com.bumptech.glide.load.n.q$a.l` @type ^`boolean` @kind boolean;
  #L29b57c.  if v0 == 0 then goto L29b582;
  #L29b580.  return @kind void;
  #L29b582.  v0:= v4.`com.bumptech.glide.load.n.q$a.h` @type ^`int`;
  #L29b586.  v1:= v4.`com.bumptech.glide.load.n.q$a.f` @type ^`java.util.List` @kind object;
  #L29b58a.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L29b590.  v1:= temp;
  #L29b592.  v1:= v1 + -1;
  #L29b596.  if v0 >= v1 then goto L29b5b6;
  #L29b59a.  v0:= v4.`com.bumptech.glide.load.n.q$a.h` @type ^`int`;
  #L29b59e.  v0:= v0 + 1;
  #L29b5a2.  v4.`com.bumptech.glide.load.n.q$a.h` @type ^`int` := v0;
  #L29b5a6.  v0:= v4.`com.bumptech.glide.load.n.q$a.i` @type ^`com.bumptech.glide.g` @kind object;
  #L29b5aa.  v1:= v4.`com.bumptech.glide.load.n.q$a.j` @type ^`com.bumptech.glide.load.m.d$a` @kind object;
  #L29b5ae.  call `loadData`(v4, v0, v1) @signature `Lcom/bumptech/glide/load/n/q$a;.loadData:(Lcom/bumptech/glide/g;Lcom/bumptech/glide/load/m/d$a;)V` @kind virtual;
  #L29b5b4.  goto L29b5e6;
  #L29b5b6.  v0:= v4.`com.bumptech.glide.load.n.q$a.k` @type ^`java.util.List` @kind object;
  #L29b5ba.  call temp:= `checkNotNull`(v0) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L29b5c0.  v0:= v4.`com.bumptech.glide.load.n.q$a.j` @type ^`com.bumptech.glide.load.m.d$a` @kind object;
  #L29b5c4.  v1:= new `com.bumptech.glide.load.engine.GlideException`;
  #L29b5c8.  v2:= new `java.util.ArrayList`;
  #L29b5cc.  v3:= v4.`com.bumptech.glide.load.n.q$a.k` @type ^`java.util.List` @kind object;
  #L29b5d0.  call `<init>`(v2, v3) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L29b5d6.  v3:= "Fetch failed" @kind object;
  #L29b5da.  call `<init>`(v1, v3, v2) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L29b5e0.  call `onLoadFailed`(v0, v1) @signature `Lcom/bumptech/glide/load/m/d$a;.onLoadFailed:(Ljava/lang/Exception;)V` @kind interface;
  #L29b5e6.  return @kind void;
}
procedure `void` `cancel`(`com.bumptech.glide.load.n.q$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/n/q$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29b430.  v0:= 1I;
  #L29b432.  v2.`com.bumptech.glide.load.n.q$a.l` @type ^`boolean` := v0 @kind boolean;
  #L29b436.  v0:= v2.`com.bumptech.glide.load.n.q$a.f` @type ^`java.util.List` @kind object;
  #L29b43a.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L29b440.  v0:= temp @kind object;
  #L29b442.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L29b448.  v1:= temp;
  #L29b44a.  if v1 == 0 then goto L29b462;
  #L29b44e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29b454.  v1:= temp @kind object;
  #L29b456.  v1:= (`com.bumptech.glide.load.m.d`) v1 @kind object;
  #L29b45a.  call `cancel`(v1) @signature `Lcom/bumptech/glide/load/m/d;.cancel:()V` @kind interface;
  #L29b460.  goto L29b442;
  #L29b462.  return @kind void;
}
procedure `void` `cleanup`(`com.bumptech.glide.load.n.q$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/n/q$a;.cleanup:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29b474.  v0:= v2.`com.bumptech.glide.load.n.q$a.k` @type ^`java.util.List` @kind object;
  #L29b478.  if v0 == 0 then goto L29b486;
  #L29b47c.  v1:= v2.`com.bumptech.glide.load.n.q$a.g` @type ^`c.h.i.d` @kind object;
  #L29b480.  call temp:= `release`(v1, v0) @signature `Lc/h/i/d;.release:(Ljava/lang/Object;)Z` @kind interface;
  #L29b486.  v0:= 0I;
  #L29b488.  v2.`com.bumptech.glide.load.n.q$a.k` @type ^`java.util.List` := v0 @kind object;
  #L29b48c.  v0:= v2.`com.bumptech.glide.load.n.q$a.f` @type ^`java.util.List` @kind object;
  #L29b490.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L29b496.  v0:= temp @kind object;
  #L29b498.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L29b49e.  v1:= temp;
  #L29b4a0.  if v1 == 0 then goto L29b4b8;
  #L29b4a4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29b4aa.  v1:= temp @kind object;
  #L29b4ac.  v1:= (`com.bumptech.glide.load.m.d`) v1 @kind object;
  #L29b4b0.  call `cleanup`(v1) @signature `Lcom/bumptech/glide/load/m/d;.cleanup:()V` @kind interface;
  #L29b4b6.  goto L29b498;
  #L29b4b8.  return @kind void;
}
procedure `java.lang.Class` `getDataClass`(`com.bumptech.glide.load.n.q$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/n/q$a;.getDataClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29b3d8.  v0:= v2.`com.bumptech.glide.load.n.q$a.f` @type ^`java.util.List` @kind object;
  #L29b3dc.  v1:= 0I;
  #L29b3de.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L29b3e4.  v0:= temp @kind object;
  #L29b3e6.  v0:= (`com.bumptech.glide.load.m.d`) v0 @kind object;
  #L29b3ea.  call temp:= `getDataClass`(v0) @signature `Lcom/bumptech/glide/load/m/d;.getDataClass:()Ljava/lang/Class;` @kind interface;
  #L29b3f0.  v0:= temp @kind object;
  #L29b3f2.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.a` `getDataSource`(`com.bumptech.glide.load.n.q$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/n/q$a;.getDataSource:()Lcom/bumptech/glide/load/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29b3ac.  v0:= v2.`com.bumptech.glide.load.n.q$a.f` @type ^`java.util.List` @kind object;
  #L29b3b0.  v1:= 0I;
  #L29b3b2.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L29b3b8.  v0:= temp @kind object;
  #L29b3ba.  v0:= (`com.bumptech.glide.load.m.d`) v0 @kind object;
  #L29b3be.  call temp:= `getDataSource`(v0) @signature `Lcom/bumptech/glide/load/m/d;.getDataSource:()Lcom/bumptech/glide/load/a;` @kind interface;
  #L29b3c4.  v0:= temp @kind object;
  #L29b3c6.  return v0 @kind object;
}
procedure `void` `loadData`(`com.bumptech.glide.load.n.q$a` v1 @kind this, `com.bumptech.glide.g` v2 @kind object, `com.bumptech.glide.load.m.d$a` v3 @kind object) @signature `Lcom/bumptech/glide/load/n/q$a;.loadData:(Lcom/bumptech/glide/g;Lcom/bumptech/glide/load/m/d$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29b4cc.  v1.`com.bumptech.glide.load.n.q$a.i` @type ^`com.bumptech.glide.g` := v2 @kind object;
  #L29b4d0.  v1.`com.bumptech.glide.load.n.q$a.j` @type ^`com.bumptech.glide.load.m.d$a` := v3 @kind object;
  #L29b4d4.  v3:= v1.`com.bumptech.glide.load.n.q$a.g` @type ^`c.h.i.d` @kind object;
  #L29b4d8.  call temp:= `acquire`(v3) @signature `Lc/h/i/d;.acquire:()Ljava/lang/Object;` @kind interface;
  #L29b4de.  v3:= temp @kind object;
  #L29b4e0.  v3:= (`java.util.List`) v3 @kind object;
  #L29b4e4.  v1.`com.bumptech.glide.load.n.q$a.k` @type ^`java.util.List` := v3 @kind object;
  #L29b4e8.  v3:= v1.`com.bumptech.glide.load.n.q$a.f` @type ^`java.util.List` @kind object;
  #L29b4ec.  v0:= v1.`com.bumptech.glide.load.n.q$a.h` @type ^`int`;
  #L29b4f0.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L29b4f6.  v3:= temp @kind object;
  #L29b4f8.  v3:= (`com.bumptech.glide.load.m.d`) v3 @kind object;
  #L29b4fc.  call `loadData`(v3, v2, v1) @signature `Lcom/bumptech/glide/load/m/d;.loadData:(Lcom/bumptech/glide/g;Lcom/bumptech/glide/load/m/d$a;)V` @kind interface;
  #L29b502.  v2:= v1.`com.bumptech.glide.load.n.q$a.l` @type ^`boolean` @kind boolean;
  #L29b506.  if v2 == 0 then goto L29b510;
  #L29b50a.  call `cancel`(v1) @signature `Lcom/bumptech/glide/load/n/q$a;.cancel:()V` @kind virtual;
  #L29b510.  return @kind void;
}
procedure `void` `onDataReady`(`com.bumptech.glide.load.n.q$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/load/n/q$a;.onDataReady:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29b524.  if v2 == 0 then goto L29b534;
  #L29b528.  v0:= v1.`com.bumptech.glide.load.n.q$a.j` @type ^`com.bumptech.glide.load.m.d$a` @kind object;
  #L29b52c.  call `onDataReady`(v0, v2) @signature `Lcom/bumptech/glide/load/m/d$a;.onDataReady:(Ljava/lang/Object;)V` @kind interface;
  #L29b532.  goto L29b53a;
  #L29b534.  call `a`(v1) @signature `Lcom/bumptech/glide/load/n/q$a;.a:()V` @kind direct;
  #L29b53a.  return @kind void;
}
procedure `void` `onLoadFailed`(`com.bumptech.glide.load.n.q$a` v1 @kind this, `java.lang.Exception` v2 @kind object) @signature `Lcom/bumptech/glide/load/n/q$a;.onLoadFailed:(Ljava/lang/Exception;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29b54c.  v0:= v1.`com.bumptech.glide.load.n.q$a.k` @type ^`java.util.List` @kind object;
  #L29b550.  call temp:= `checkNotNull`(v0) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L29b556.  v0:= (`java.util.List`) v0 @kind object;
  #L29b55a.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L29b560.  call `a`(v1) @signature `Lcom/bumptech/glide/load/n/q$a;.a:()V` @kind direct;
  #L29b566.  return @kind void;
}
