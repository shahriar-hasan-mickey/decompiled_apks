record `com.bumptech.glide.load.n.e$c$a` @kind class @AccessFlag  extends `com.bumptech.glide.load.n.e$a` @kind interface {
}
procedure `void` `<init>`(`com.bumptech.glide.load.n.e$c$a` v0 @kind this, `com.bumptech.glide.load.n.e$c` v1 @kind object) @signature `Lcom/bumptech/glide/load/n/e$c$a;.<init>:(Lcom/bumptech/glide/load/n/e$c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L299e8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L299e92.  return @kind void;
}
procedure `void` `close`(`com.bumptech.glide.load.n.e$c$a` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lcom/bumptech/glide/load/n/e$c$a;.close:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC {
    temp;

  #L299ea4.  call `close`(v1) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L299eaa.  return @kind void;
}
procedure `void` `close`(`com.bumptech.glide.load.n.e$c$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/load/n/e$c$a;.close:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L299ebc.  v1:= (`java.io.InputStream`) v1 @kind object;
  #L299ec0.  call `close`(v0, v1) @signature `Lcom/bumptech/glide/load/n/e$c$a;.close:(Ljava/io/InputStream;)V` @kind virtual;
  #L299ec6.  return @kind void;
}
procedure `java.io.InputStream` `decode`(`com.bumptech.glide.load.n.e$c$a` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lcom/bumptech/glide/load/n/e$c$a;.decode:(Ljava/lang/String;)Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L299dbc.  v0:= "data:image" @kind object;
  #L299dc0.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L299dc6.  v0:= temp;
  #L299dc8.  if v0 == 0 then goto L299e38;
  #L299dcc.  v0:= 44I;
  #L299dd0.  call temp:= `indexOf`(v5, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L299dd6.  v0:= temp;
  #L299dd8.  v1:= -1I;
  #L299dda.  if v0 == v1 then goto L299e28;
  #L299dde.  v1:= 0I;
  #L299de0.  call temp:= `substring`(v5, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L299de6.  v2:= temp @kind object;
  #L299de8.  v3:= ";base64" @kind object;
  #L299dec.  call temp:= `endsWith`(v2, v3) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L299df2.  v2:= temp;
  #L299df4.  if v2 == 0 then goto L299e18;
  #L299df8.  v0:= v0 + 1;
  #L299dfc.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L299e02.  v5:= temp @kind object;
  #L299e04.  call temp:= `decode`(v5, v1) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L299e0a.  v5:= temp @kind object;
  #L299e0c.  v0:= new `java.io.ByteArrayInputStream`;
  #L299e10.  call `<init>`(v0, v5) @signature `Ljava/io/ByteArrayInputStream;.<init>:([B)V` @kind direct;
  #L299e16.  return v0 @kind object;
  #L299e18.  v5:= new `java.lang.IllegalArgumentException`;
  #L299e1c.  v0:= "Not a base64 image data URL." @kind object;
  #L299e20.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L299e26.  throw v5;
  #L299e28.  v5:= new `java.lang.IllegalArgumentException`;
  #L299e2c.  v0:= "Missing comma in data URL." @kind object;
  #L299e30.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L299e36.  throw v5;
  #L299e38.  v5:= new `java.lang.IllegalArgumentException`;
  #L299e3c.  v0:= "Not a valid image data URL." @kind object;
  #L299e40.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L299e46.  throw v5;
}
procedure `java.lang.Object` `decode`(`com.bumptech.glide.load.n.e$c$a` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/load/n/e$c$a;.decode:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L299e70.  call temp:= `decode`(v0, v1) @signature `Lcom/bumptech/glide/load/n/e$c$a;.decode:(Ljava/lang/String;)Ljava/io/InputStream;` @kind virtual;
  #L299e76.  v1:= temp @kind object;
  #L299e78.  return v1 @kind object;
}
procedure `java.lang.Class` `getDataClass`(`com.bumptech.glide.load.n.e$c$a` v1 @kind this) @signature `Lcom/bumptech/glide/load/n/e$c$a;.getDataClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L299e58.  v0:= constclass @type ^`java.io.InputStream` @kind object;
  #L299e5c.  return v0 @kind object;
}
