record `com.bumptech.glide.load.engine.h` @kind class @AccessFlag  extends `com.bumptech.glide.load.engine.f$a` @kind interface, `java.lang.Runnable` @kind interface, `java.lang.Comparable` @kind interface, `com.bumptech.glide.s.l.a$f` @kind interface {
  `java.lang.Object` `com.bumptech.glide.load.engine.h.A` @AccessFlag PRIVATE;
  `java.lang.Thread` `com.bumptech.glide.load.engine.h.B` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.f` `com.bumptech.glide.load.engine.h.C` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.f` `com.bumptech.glide.load.engine.h.D` @AccessFlag PRIVATE;
  `java.lang.Object` `com.bumptech.glide.load.engine.h.E` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.a` `com.bumptech.glide.load.engine.h.F` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.m.d` `com.bumptech.glide.load.engine.h.G` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.f` `com.bumptech.glide.load.engine.h.H` @AccessFlag PRIVATE_VOLATILE;
  `boolean` `com.bumptech.glide.load.engine.h.I` @AccessFlag PRIVATE_VOLATILE;
  `boolean` `com.bumptech.glide.load.engine.h.J` @AccessFlag PRIVATE_VOLATILE;
  `com.bumptech.glide.load.engine.g` `com.bumptech.glide.load.engine.h.f` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `com.bumptech.glide.load.engine.h.g` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.s.l.c` `com.bumptech.glide.load.engine.h.h` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.h$e` `com.bumptech.glide.load.engine.h.i` @AccessFlag PRIVATE_FINAL;
  `c.h.i.d` `com.bumptech.glide.load.engine.h.j` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.h$d` `com.bumptech.glide.load.engine.h.k` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.h$f` `com.bumptech.glide.load.engine.h.l` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.d` `com.bumptech.glide.load.engine.h.m` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.f` `com.bumptech.glide.load.engine.h.n` @AccessFlag PRIVATE;
  `com.bumptech.glide.g` `com.bumptech.glide.load.engine.h.o` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.n` `com.bumptech.glide.load.engine.h.p` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.h.q` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.h.r` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.j` `com.bumptech.glide.load.engine.h.s` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.h` `com.bumptech.glide.load.engine.h.t` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.h$b` `com.bumptech.glide.load.engine.h.u` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.h.v` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.h$h` `com.bumptech.glide.load.engine.h.w` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.h$g` `com.bumptech.glide.load.engine.h.x` @AccessFlag PRIVATE;
  `long` `com.bumptech.glide.load.engine.h.y` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.h.z` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.h` v1 @kind this, `com.bumptech.glide.load.engine.h$e` v2 @kind object, `c.h.i.d` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.<init>:(Lcom/bumptech/glide/load/engine/h$e;Lc/h/i/d;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L29207c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L292082.  v0:= new `com.bumptech.glide.load.engine.g`;
  #L292086.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/g;.<init>:()V` @kind direct;
  #L29208c.  v1.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.g` := v0 @kind object;
  #L292090.  v0:= new `java.util.ArrayList`;
  #L292094.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L29209a.  v1.`com.bumptech.glide.load.engine.h.g` @type ^`java.util.List` := v0 @kind object;
  #L29209e.  call temp:= `newInstance`() @signature `Lcom/bumptech/glide/s/l/c;.newInstance:()Lcom/bumptech/glide/s/l/c;` @kind static;
  #L2920a4.  v0:= temp @kind object;
  #L2920a6.  v1.`com.bumptech.glide.load.engine.h.h` @type ^`com.bumptech.glide.s.l.c` := v0 @kind object;
  #L2920aa.  v0:= new `com.bumptech.glide.load.engine.h$d`;
  #L2920ae.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/h$d;.<init>:()V` @kind direct;
  #L2920b4.  v1.`com.bumptech.glide.load.engine.h.k` @type ^`com.bumptech.glide.load.engine.h$d` := v0 @kind object;
  #L2920b8.  v0:= new `com.bumptech.glide.load.engine.h$f`;
  #L2920bc.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/h$f;.<init>:()V` @kind direct;
  #L2920c2.  v1.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.engine.h$f` := v0 @kind object;
  #L2920c6.  v1.`com.bumptech.glide.load.engine.h.i` @type ^`com.bumptech.glide.load.engine.h$e` := v2 @kind object;
  #L2920ca.  v1.`com.bumptech.glide.load.engine.h.j` @type ^`c.h.i.d` := v3 @kind object;
  #L2920ce.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.h$h` `a`(`com.bumptech.glide.load.engine.h` v3 @kind this, `com.bumptech.glide.load.engine.h$h` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Lcom/bumptech/glide/load/engine/h$h;)Lcom/bumptech/glide/load/engine/h$h;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L291c88.  v0:= `@@com.bumptech.glide.load.engine.h$a.b` @type ^`int`[] @kind object;
  #L291c8c.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L291c92.  v1:= temp;
  #L291c94.  v0:= v0[v1];
  #L291c98.  v1:= 1I;
  #L291c9a.  if v0 == v1 then goto L291d22;
  #L291c9e.  v1:= 2I;
  #L291ca0.  if v0 == v1 then goto L291d0e;
  #L291ca4.  v1:= 3I;
  #L291ca6.  if v0 == v1 then goto L291d08;
  #L291caa.  v1:= 4I;
  #L291cac.  if v0 == v1 then goto L291d08;
  #L291cb0.  v1:= 5I;
  #L291cb2.  if v0 != v1 then goto L291cda;
  #L291cb6.  v4:= v3.`com.bumptech.glide.load.engine.h.s` @type ^`com.bumptech.glide.load.engine.j` @kind object;
  #L291cba.  call temp:= `decodeCachedResource`(v4) @signature `Lcom/bumptech/glide/load/engine/j;.decodeCachedResource:()Z` @kind virtual;
  #L291cc0.  v4:= temp;
  #L291cc2.  if v4 == 0 then goto L291ccc;
  #L291cc6.  v4:= `@@com.bumptech.glide.load.engine.h$h.g` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L291cca.  goto L291cd8;
  #L291ccc.  v4:= `@@com.bumptech.glide.load.engine.h$h.g` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L291cd0.  call temp:= `a`(v3, v4) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Lcom/bumptech/glide/load/engine/h$h;)Lcom/bumptech/glide/load/engine/h$h;` @kind direct;
  #L291cd6.  v4:= temp @kind object;
  #L291cd8.  return v4 @kind object;
  #L291cda.  v0:= new `java.lang.IllegalArgumentException`;
  #L291cde.  v1:= new `java.lang.StringBuilder`;
  #L291ce2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L291ce8.  v2:= "Unrecognized stage: " @kind object;
  #L291cec.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L291cf2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L291cf8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L291cfe.  v4:= temp @kind object;
  #L291d00.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L291d06.  throw v0;
  #L291d08.  v4:= `@@com.bumptech.glide.load.engine.h$h.k` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L291d0c.  return v4 @kind object;
  #L291d0e.  v4:= v3.`com.bumptech.glide.load.engine.h.z` @type ^`boolean` @kind boolean;
  #L291d12.  if v4 == 0 then goto L291d1c;
  #L291d16.  v4:= `@@com.bumptech.glide.load.engine.h$h.k` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L291d1a.  goto L291d20;
  #L291d1c.  v4:= `@@com.bumptech.glide.load.engine.h$h.i` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L291d20.  return v4 @kind object;
  #L291d22.  v4:= v3.`com.bumptech.glide.load.engine.h.s` @type ^`com.bumptech.glide.load.engine.j` @kind object;
  #L291d26.  call temp:= `decodeCachedData`(v4) @signature `Lcom/bumptech/glide/load/engine/j;.decodeCachedData:()Z` @kind virtual;
  #L291d2c.  v4:= temp;
  #L291d2e.  if v4 == 0 then goto L291d38;
  #L291d32.  v4:= `@@com.bumptech.glide.load.engine.h$h.h` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L291d36.  goto L291d44;
  #L291d38.  v4:= `@@com.bumptech.glide.load.engine.h$h.h` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L291d3c.  call temp:= `a`(v3, v4) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Lcom/bumptech/glide/load/engine/h$h;)Lcom/bumptech/glide/load/engine/h$h;` @kind direct;
  #L291d42.  v4:= temp @kind object;
  #L291d44.  return v4 @kind object;
}
procedure `com.bumptech.glide.load.engine.u` `a`(`com.bumptech.glide.load.engine.h` v3 @kind this, `com.bumptech.glide.load.m.d` v4 @kind object, `java.lang.Object` v5 @kind object, `com.bumptech.glide.load.a` v6 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Lcom/bumptech/glide/load/m/d;Ljava/lang/Object;Lcom/bumptech/glide/load/a;)Lcom/bumptech/glide/load/engine/u;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L291d58.  if v5 != 0 then goto L291d66;
  #L291d5c.  v5:= 0I;
  #L291d5e.  call `cleanup`(v4) @signature `Lcom/bumptech/glide/load/m/d;.cleanup:()V` @kind interface;
  #L291d64.  return v5 @kind object;
  #L291d66.  call temp:= `getLogTime`() @signature `Lcom/bumptech/glide/s/f;.getLogTime:()J` @kind static;
  #L291d6c.  v0:= temp @kind wide;
  #L291d6e.  call temp:= `a`(v3, v5, v6) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Ljava/lang/Object;Lcom/bumptech/glide/load/a;)Lcom/bumptech/glide/load/engine/u;` @kind direct;
  #L291d74.  v5:= temp @kind object;
  #L291d76.  v6:= "DecodeJob" @kind object;
  #L291d7a.  v2:= 2I;
  #L291d7c.  call temp:= `isLoggable`(v6, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L291d82.  v6:= temp;
  #L291d84.  if v6 == 0 then goto L291db0;
  #L291d88.  v6:= new `java.lang.StringBuilder`;
  #L291d8c.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L291d92.  v2:= "Decoded result " @kind object;
  #L291d96.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L291d9c.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L291da2.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L291da8.  v6:= temp @kind object;
  #L291daa.  call `a`(v3, v6, v0) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Ljava/lang/String;J)V` @kind direct;
  #L291db0.  call `cleanup`(v4) @signature `Lcom/bumptech/glide/load/m/d;.cleanup:()V` @kind interface;
  #L291db6.  return v5 @kind object;
  #L291db8.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L291dba.  call `cleanup`(v4) @signature `Lcom/bumptech/glide/load/m/d;.cleanup:()V` @kind interface;
  #L291dc0.  throw v5;
  catch `java.lang.Throwable` @[L291d66..L291db0] goto L291db8;
}
procedure `com.bumptech.glide.load.engine.u` `a`(`com.bumptech.glide.load.engine.h` v2 @kind this, `java.lang.Object` v3 @kind object, `com.bumptech.glide.load.a` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Ljava/lang/Object;Lcom/bumptech/glide/load/a;)Lcom/bumptech/glide/load/engine/u;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L291de0.  v0:= v2.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.g` @kind object;
  #L291de4.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L291dea.  v1:= temp @kind object;
  #L291dec.  call temp:= `a`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/g;.a:(Ljava/lang/Class;)Lcom/bumptech/glide/load/engine/s;` @kind virtual;
  #L291df2.  v0:= temp @kind object;
  #L291df4.  call temp:= `a`(v2, v3, v4, v0) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Ljava/lang/Object;Lcom/bumptech/glide/load/a;Lcom/bumptech/glide/load/engine/s;)Lcom/bumptech/glide/load/engine/u;` @kind direct;
  #L291dfa.  v3:= temp @kind object;
  #L291dfc.  return v3 @kind object;
}
procedure `com.bumptech.glide.load.engine.u` `a`(`com.bumptech.glide.load.engine.h` v6 @kind this, `java.lang.Object` v7 @kind object, `com.bumptech.glide.load.a` v8 @kind object, `com.bumptech.glide.load.engine.s` v9 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Ljava/lang/Object;Lcom/bumptech/glide/load/a;Lcom/bumptech/glide/load/engine/s;)Lcom/bumptech/glide/load/engine/u;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L291f88.  call temp:= `a`(v6, v8) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Lcom/bumptech/glide/load/a;)Lcom/bumptech/glide/load/h;` @kind direct;
  #L291f8e.  v2:= temp @kind object;
  #L291f90.  v0:= v6.`com.bumptech.glide.load.engine.h.m` @type ^`com.bumptech.glide.d` @kind object;
  #L291f94.  call temp:= `getRegistry`(v0) @signature `Lcom/bumptech/glide/d;.getRegistry:()Lcom/bumptech/glide/Registry;` @kind virtual;
  #L291f9a.  v0:= temp @kind object;
  #L291f9c.  call temp:= `getRewinder`(v0, v7) @signature `Lcom/bumptech/glide/Registry;.getRewinder:(Ljava/lang/Object;)Lcom/bumptech/glide/load/m/e;` @kind virtual;
  #L291fa2.  v7:= temp @kind object;
  #L291fa4.  v3:= v6.`com.bumptech.glide.load.engine.h.q` @type ^`int`;
  #L291fa8.  v4:= v6.`com.bumptech.glide.load.engine.h.r` @type ^`int`;
  #L291fac.  v5:= new `com.bumptech.glide.load.engine.h$c`;
  #L291fb0.  call `<init>`(v5, v6, v8) @signature `Lcom/bumptech/glide/load/engine/h$c;.<init>:(Lcom/bumptech/glide/load/engine/h;Lcom/bumptech/glide/load/a;)V` @kind direct;
  #L291fb6.  v0:= v9 @kind object;
  #L291fb8.  v1:= v7 @kind object;
  #L291fba.  call temp:= `load`(v0, v1, v2, v3, v4, v5) @signature `Lcom/bumptech/glide/load/engine/s;.load:(Lcom/bumptech/glide/load/m/e;Lcom/bumptech/glide/load/h;IILcom/bumptech/glide/load/engine/i$a;)Lcom/bumptech/glide/load/engine/u;` @kind virtual;
  #L291fc0.  v8:= temp @kind object;
  #L291fc2.  call `cleanup`(v7) @signature `Lcom/bumptech/glide/load/m/e;.cleanup:()V` @kind interface;
  #L291fc8.  return v8 @kind object;
  #L291fca.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L291fcc.  call `cleanup`(v7) @signature `Lcom/bumptech/glide/load/m/e;.cleanup:()V` @kind interface;
  #L291fd2.  throw v8;
  catch `java.lang.Throwable` @[L291fa4..L291fc2] goto L291fca;
}
procedure `com.bumptech.glide.load.h` `a`(`com.bumptech.glide.load.engine.h` v3 @kind this, `com.bumptech.glide.load.a` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Lcom/bumptech/glide/load/a;)Lcom/bumptech/glide/load/h;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L291a94.  v0:= v3.`com.bumptech.glide.load.engine.h.t` @type ^`com.bumptech.glide.load.h` @kind object;
  #L291a98.  v1:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L291a9c.  v2:= 26I;
  #L291aa0.  if v1 >= v2 then goto L291aa6;
  #L291aa4.  return v0 @kind object;
  #L291aa6.  v1:= `@@com.bumptech.glide.load.a.i` @type ^`com.bumptech.glide.load.a` @kind object;
  #L291aaa.  if v4 == v1 then goto L291ac4;
  #L291aae.  v4:= v3.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.g` @kind object;
  #L291ab2.  call temp:= `o`(v4) @signature `Lcom/bumptech/glide/load/engine/g;.o:()Z` @kind virtual;
  #L291ab8.  v4:= temp;
  #L291aba.  if v4 == 0 then goto L291ac0;
  #L291abe.  goto L291ac4;
  #L291ac0.  v4:= 0I;
  #L291ac2.  goto L291ac6;
  #L291ac4.  v4:= 1I;
  #L291ac6.  v1:= `@@com.bumptech.glide.load.resource.bitmap.l.i` @type ^`com.bumptech.glide.load.g` @kind object;
  #L291aca.  call temp:= `get`(v0, v1) @signature `Lcom/bumptech/glide/load/h;.get:(Lcom/bumptech/glide/load/g;)Ljava/lang/Object;` @kind virtual;
  #L291ad0.  v1:= temp @kind object;
  #L291ad2.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L291ad6.  if v1 == 0 then goto L291aec;
  #L291ada.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L291ae0.  v1:= temp;
  #L291ae2.  if v1 == 0 then goto L291aea;
  #L291ae6.  if v4 == 0 then goto L291aec;
  #L291aea.  return v0 @kind object;
  #L291aec.  v0:= new `com.bumptech.glide.load.h`;
  #L291af0.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/h;.<init>:()V` @kind direct;
  #L291af6.  v1:= v3.`com.bumptech.glide.load.engine.h.t` @type ^`com.bumptech.glide.load.h` @kind object;
  #L291afa.  call `putAll`(v0, v1) @signature `Lcom/bumptech/glide/load/h;.putAll:(Lcom/bumptech/glide/load/h;)V` @kind virtual;
  #L291b00.  v1:= `@@com.bumptech.glide.load.resource.bitmap.l.i` @type ^`com.bumptech.glide.load.g` @kind object;
  #L291b04.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L291b0a.  v4:= temp @kind object;
  #L291b0c.  call temp:= `set`(v0, v1, v4) @signature `Lcom/bumptech/glide/load/h;.set:(Lcom/bumptech/glide/load/g;Ljava/lang/Object;)Lcom/bumptech/glide/load/h;` @kind virtual;
  #L291b12.  return v0 @kind object;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.h` v1 @kind this, `com.bumptech.glide.load.engine.u` v2 @kind object, `com.bumptech.glide.load.a` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Lcom/bumptech/glide/load/engine/u;Lcom/bumptech/glide/load/a;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2922b0.  call `j`(v1) @signature `Lcom/bumptech/glide/load/engine/h;.j:()V` @kind direct;
  #L2922b6.  v0:= v1.`com.bumptech.glide.load.engine.h.u` @type ^`com.bumptech.glide.load.engine.h$b` @kind object;
  #L2922ba.  call `onResourceReady`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/engine/h$b;.onResourceReady:(Lcom/bumptech/glide/load/engine/u;Lcom/bumptech/glide/load/a;)V` @kind interface;
  #L2922c0.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.h` v1 @kind this, `java.lang.String` v2 @kind object, `long` v3 ) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Ljava/lang/String;J)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2921e0.  v0:= 0I;
  #L2921e2.  call `a`(v1, v2, v3, v0) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Ljava/lang/String;JLjava/lang/String;)V` @kind direct;
  #L2921e8.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.h` v1 @kind this, `java.lang.String` v2 @kind object, `long` v3 , `java.lang.String` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Ljava/lang/String;JLjava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2921fc.  v0:= new `java.lang.StringBuilder`;
  #L292200.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L292206.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29220c.  v2:= " in " @kind object;
  #L292210.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L292216.  call temp:= `getElapsedMillis`(v3) @signature `Lcom/bumptech/glide/s/f;.getElapsedMillis:(J)D` @kind static;
  #L29221c.  v2:= temp @kind wide;
  #L29221e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L292224.  v2:= ", load key: " @kind object;
  #L292228.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29222e.  v2:= v1.`com.bumptech.glide.load.engine.h.p` @type ^`com.bumptech.glide.load.engine.n` @kind object;
  #L292232.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L292238.  if v5 == 0 then goto L292260;
  #L29223c.  v2:= new `java.lang.StringBuilder`;
  #L292240.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L292246.  v3:= ", " @kind object;
  #L29224a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L292250.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L292256.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L29225c.  v2:= temp @kind object;
  #L29225e.  goto L292264;
  #L292260.  v2:= "" @kind object;
  #L292264.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29226a.  v2:= ", thread: " @kind object;
  #L29226e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L292274.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L29227a.  v2:= temp @kind object;
  #L29227c.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L292282.  v2:= temp @kind object;
  #L292284.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29228a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L292290.  v2:= temp @kind object;
  #L292292.  v3:= "DecodeJob" @kind object;
  #L292296.  call temp:= `v`(v3, v2) @signature `Landroid/util/Log;.v:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L29229c.  return @kind void;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.h` v4 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L292108.  v0:= "DecodeJob" @kind object;
  #L29210c.  v1:= 2I;
  #L29210e.  call temp:= `isLoggable`(v0, v1) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L292114.  v0:= temp;
  #L292116.  if v0 == 0 then goto L292176;
  #L29211a.  v0:= v4.`com.bumptech.glide.load.engine.h.y` @type ^`long` @kind wide;
  #L29211e.  v2:= new `java.lang.StringBuilder`;
  #L292122.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L292128.  v3:= "data: " @kind object;
  #L29212c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L292132.  v3:= v4.`com.bumptech.glide.load.engine.h.E` @type ^`java.lang.Object` @kind object;
  #L292136.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29213c.  v3:= ", cache key: " @kind object;
  #L292140.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L292146.  v3:= v4.`com.bumptech.glide.load.engine.h.C` @type ^`com.bumptech.glide.load.f` @kind object;
  #L29214a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L292150.  v3:= ", fetcher: " @kind object;
  #L292154.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29215a.  v3:= v4.`com.bumptech.glide.load.engine.h.G` @type ^`com.bumptech.glide.load.m.d` @kind object;
  #L29215e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L292164.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L29216a.  v2:= temp @kind object;
  #L29216c.  v3:= "Retrieved data" @kind object;
  #L292170.  call `a`(v4, v3, v0, v2) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Ljava/lang/String;JLjava/lang/String;)V` @kind direct;
  #L292176.  v0:= 0I;
  #L292178.  v1:= v4.`com.bumptech.glide.load.engine.h.G` @type ^`com.bumptech.glide.load.m.d` @kind object;
  #L29217c.  v2:= v4.`com.bumptech.glide.load.engine.h.E` @type ^`java.lang.Object` @kind object;
  #L292180.  v3:= v4.`com.bumptech.glide.load.engine.h.F` @type ^`com.bumptech.glide.load.a` @kind object;
  #L292184.  call temp:= `a`(v4, v1, v2, v3) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Lcom/bumptech/glide/load/m/d;Ljava/lang/Object;Lcom/bumptech/glide/load/a;)Lcom/bumptech/glide/load/engine/u;` @kind direct;
  #L29218a.  v0:= temp @kind object;
  #L29218c.  goto L2921a8;
  #L29218e.  v1:= Exception @type ^`com.bumptech.glide.load.engine.GlideException` @kind object;
  #L292190.  v2:= v4.`com.bumptech.glide.load.engine.h.D` @type ^`com.bumptech.glide.load.f` @kind object;
  #L292194.  v3:= v4.`com.bumptech.glide.load.engine.h.F` @type ^`com.bumptech.glide.load.a` @kind object;
  #L292198.  call `a`(v1, v2, v3) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Lcom/bumptech/glide/load/f;Lcom/bumptech/glide/load/a;)V` @kind virtual;
  #L29219e.  v2:= v4.`com.bumptech.glide.load.engine.h.g` @type ^`java.util.List` @kind object;
  #L2921a2.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2921a8.  if v0 == 0 then goto L2921b8;
  #L2921ac.  v1:= v4.`com.bumptech.glide.load.engine.h.F` @type ^`com.bumptech.glide.load.a` @kind object;
  #L2921b0.  call `b`(v4, v0, v1) @signature `Lcom/bumptech/glide/load/engine/h;.b:(Lcom/bumptech/glide/load/engine/u;Lcom/bumptech/glide/load/a;)V` @kind direct;
  #L2921b6.  goto L2921be;
  #L2921b8.  call `h`(v4) @signature `Lcom/bumptech/glide/load/engine/h;.h:()V` @kind direct;
  #L2921be.  return @kind void;
  catch `com.bumptech.glide.load.engine.GlideException` @[L292178..L29218c] goto L29218e;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.h` v2 @kind this, `com.bumptech.glide.load.engine.u` v3 @kind object, `com.bumptech.glide.load.a` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.b:(Lcom/bumptech/glide/load/engine/u;Lcom/bumptech/glide/load/a;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2922d4.  v0:= instanceof @variable v3 @type ^`com.bumptech.glide.load.engine.q` @kind boolean;
  #L2922d8.  if v0 == 0 then goto L2922e8;
  #L2922dc.  v0:= v3 @kind object;
  #L2922de.  v0:= (`com.bumptech.glide.load.engine.q`) v0 @kind object;
  #L2922e2.  call `initialize`(v0) @signature `Lcom/bumptech/glide/load/engine/q;.initialize:()V` @kind interface;
  #L2922e8.  v0:= 0I;
  #L2922ea.  v1:= v2.`com.bumptech.glide.load.engine.h.k` @type ^`com.bumptech.glide.load.engine.h$d` @kind object;
  #L2922ee.  call temp:= `b`(v1) @signature `Lcom/bumptech/glide/load/engine/h$d;.b:()Z` @kind virtual;
  #L2922f4.  v1:= temp;
  #L2922f6.  if v1 == 0 then goto L292304;
  #L2922fa.  call temp:= `b`(v3) @signature `Lcom/bumptech/glide/load/engine/t;.b:(Lcom/bumptech/glide/load/engine/u;)Lcom/bumptech/glide/load/engine/t;` @kind static;
  #L292300.  v3:= temp @kind object;
  #L292302.  v0:= v3 @kind object;
  #L292304.  call `a`(v2, v3, v4) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Lcom/bumptech/glide/load/engine/u;Lcom/bumptech/glide/load/a;)V` @kind direct;
  #L29230a.  v3:= `@@com.bumptech.glide.load.engine.h$h.j` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L29230e.  v2.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.h$h` := v3 @kind object;
  #L292312.  v3:= v2.`com.bumptech.glide.load.engine.h.k` @type ^`com.bumptech.glide.load.engine.h$d` @kind object;
  #L292316.  call temp:= `b`(v3) @signature `Lcom/bumptech/glide/load/engine/h$d;.b:()Z` @kind virtual;
  #L29231c.  v3:= temp;
  #L29231e.  if v3 == 0 then goto L292334;
  #L292322.  v3:= v2.`com.bumptech.glide.load.engine.h.k` @type ^`com.bumptech.glide.load.engine.h$d` @kind object;
  #L292326.  v4:= v2.`com.bumptech.glide.load.engine.h.i` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L29232a.  v1:= v2.`com.bumptech.glide.load.engine.h.t` @type ^`com.bumptech.glide.load.h` @kind object;
  #L29232e.  call `a`(v3, v4, v1) @signature `Lcom/bumptech/glide/load/engine/h$d;.a:(Lcom/bumptech/glide/load/engine/h$e;Lcom/bumptech/glide/load/h;)V` @kind virtual;
  #L292334.  if v0 == 0 then goto L29233e;
  #L292338.  call `a`(v0) @signature `Lcom/bumptech/glide/load/engine/t;.a:()V` @kind virtual;
  #L29233e.  call `e`(v2) @signature `Lcom/bumptech/glide/load/engine/h;.e:()V` @kind direct;
  #L292344.  return @kind void;
  #L292346.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L292348.  if v0 == 0 then goto L292352;
  #L29234c.  call `a`(v0) @signature `Lcom/bumptech/glide/load/engine/t;.a:()V` @kind virtual;
  #L292352.  throw v3;
  catch `java.lang.Throwable` @[L292312..L292334] goto L292346;
}
procedure `com.bumptech.glide.load.engine.f` `c`(`com.bumptech.glide.load.engine.h` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.c:()Lcom/bumptech/glide/load/engine/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L291b24.  v0:= `@@com.bumptech.glide.load.engine.h$a.b` @type ^`int`[] @kind object;
  #L291b28.  v1:= v3.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L291b2c.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L291b32.  v1:= temp;
  #L291b34.  v0:= v0[v1];
  #L291b38.  v1:= 1I;
  #L291b3a.  if v0 == v1 then goto L291ba6;
  #L291b3e.  v1:= 2I;
  #L291b40.  if v0 == v1 then goto L291b96;
  #L291b44.  v1:= 3I;
  #L291b46.  if v0 == v1 then goto L291b86;
  #L291b4a.  v1:= 4I;
  #L291b4c.  if v0 != v1 then goto L291b54;
  #L291b50.  v0:= 0I;
  #L291b52.  return v0 @kind object;
  #L291b54.  v0:= new `java.lang.IllegalStateException`;
  #L291b58.  v1:= new `java.lang.StringBuilder`;
  #L291b5c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L291b62.  v2:= "Unrecognized stage: " @kind object;
  #L291b66.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L291b6c.  v2:= v3.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L291b70.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L291b76.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L291b7c.  v1:= temp @kind object;
  #L291b7e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L291b84.  throw v0;
  #L291b86.  v0:= new `com.bumptech.glide.load.engine.y`;
  #L291b8a.  v1:= v3.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.g` @kind object;
  #L291b8e.  call `<init>`(v0, v1, v3) @signature `Lcom/bumptech/glide/load/engine/y;.<init>:(Lcom/bumptech/glide/load/engine/g;Lcom/bumptech/glide/load/engine/f$a;)V` @kind direct;
  #L291b94.  return v0 @kind object;
  #L291b96.  v0:= new `com.bumptech.glide.load.engine.c`;
  #L291b9a.  v1:= v3.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.g` @kind object;
  #L291b9e.  call `<init>`(v0, v1, v3) @signature `Lcom/bumptech/glide/load/engine/c;.<init>:(Lcom/bumptech/glide/load/engine/g;Lcom/bumptech/glide/load/engine/f$a;)V` @kind direct;
  #L291ba4.  return v0 @kind object;
  #L291ba6.  v0:= new `com.bumptech.glide.load.engine.v`;
  #L291baa.  v1:= v3.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.g` @kind object;
  #L291bae.  call `<init>`(v0, v1, v3) @signature `Lcom/bumptech/glide/load/engine/v;.<init>:(Lcom/bumptech/glide/load/engine/g;Lcom/bumptech/glide/load/engine/f$a;)V` @kind direct;
  #L291bb4.  return v0 @kind object;
}
procedure `void` `d`(`com.bumptech.glide.load.engine.h` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L292370.  call `j`(v3) @signature `Lcom/bumptech/glide/load/engine/h;.j:()V` @kind direct;
  #L292376.  v0:= new `com.bumptech.glide.load.engine.GlideException`;
  #L29237a.  v1:= new `java.util.ArrayList`;
  #L29237e.  v2:= v3.`com.bumptech.glide.load.engine.h.g` @type ^`java.util.List` @kind object;
  #L292382.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L292388.  v2:= "Failed to load resource" @kind object;
  #L29238c.  call `<init>`(v0, v2, v1) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L292392.  v1:= v3.`com.bumptech.glide.load.engine.h.u` @type ^`com.bumptech.glide.load.engine.h$b` @kind object;
  #L292396.  call `onLoadFailed`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/h$b;.onLoadFailed:(Lcom/bumptech/glide/load/engine/GlideException;)V` @kind interface;
  #L29239c.  call `f`(v3) @signature `Lcom/bumptech/glide/load/engine/h;.f:()V` @kind direct;
  #L2923a2.  return @kind void;
}
procedure `void` `e`(`com.bumptech.glide.load.engine.h` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L292494.  v0:= v1.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.engine.h$f` @kind object;
  #L292498.  call temp:= `a`(v0) @signature `Lcom/bumptech/glide/load/engine/h$f;.a:()Z` @kind virtual;
  #L29249e.  v0:= temp;
  #L2924a0.  if v0 == 0 then goto L2924aa;
  #L2924a4.  call `g`(v1) @signature `Lcom/bumptech/glide/load/engine/h;.g:()V` @kind direct;
  #L2924aa.  return @kind void;
}
procedure `void` `f`(`com.bumptech.glide.load.engine.h` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2924bc.  v0:= v1.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.engine.h$f` @kind object;
  #L2924c0.  call temp:= `b`(v0) @signature `Lcom/bumptech/glide/load/engine/h$f;.b:()Z` @kind virtual;
  #L2924c6.  v0:= temp;
  #L2924c8.  if v0 == 0 then goto L2924d2;
  #L2924cc.  call `g`(v1) @signature `Lcom/bumptech/glide/load/engine/h;.g:()V` @kind direct;
  #L2924d2.  return @kind void;
}
procedure `void` `g`(`com.bumptech.glide.load.engine.h` v4 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L29250c.  v0:= v4.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.engine.h$f` @kind object;
  #L292510.  call `c`(v0) @signature `Lcom/bumptech/glide/load/engine/h$f;.c:()V` @kind virtual;
  #L292516.  v0:= v4.`com.bumptech.glide.load.engine.h.k` @type ^`com.bumptech.glide.load.engine.h$d` @kind object;
  #L29251a.  call `a`(v0) @signature `Lcom/bumptech/glide/load/engine/h$d;.a:()V` @kind virtual;
  #L292520.  v0:= v4.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.g` @kind object;
  #L292524.  call `a`(v0) @signature `Lcom/bumptech/glide/load/engine/g;.a:()V` @kind virtual;
  #L29252a.  v0:= 0I;
  #L29252c.  v4.`com.bumptech.glide.load.engine.h.I` @type ^`boolean` := v0 @kind boolean;
  #L292530.  v1:= 0I;
  #L292532.  v4.`com.bumptech.glide.load.engine.h.m` @type ^`com.bumptech.glide.d` := v1 @kind object;
  #L292536.  v4.`com.bumptech.glide.load.engine.h.n` @type ^`com.bumptech.glide.load.f` := v1 @kind object;
  #L29253a.  v4.`com.bumptech.glide.load.engine.h.t` @type ^`com.bumptech.glide.load.h` := v1 @kind object;
  #L29253e.  v4.`com.bumptech.glide.load.engine.h.o` @type ^`com.bumptech.glide.g` := v1 @kind object;
  #L292542.  v4.`com.bumptech.glide.load.engine.h.p` @type ^`com.bumptech.glide.load.engine.n` := v1 @kind object;
  #L292546.  v4.`com.bumptech.glide.load.engine.h.u` @type ^`com.bumptech.glide.load.engine.h$b` := v1 @kind object;
  #L29254a.  v4.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.h$h` := v1 @kind object;
  #L29254e.  v4.`com.bumptech.glide.load.engine.h.H` @type ^`com.bumptech.glide.load.engine.f` := v1 @kind object;
  #L292552.  v4.`com.bumptech.glide.load.engine.h.B` @type ^`java.lang.Thread` := v1 @kind object;
  #L292556.  v4.`com.bumptech.glide.load.engine.h.C` @type ^`com.bumptech.glide.load.f` := v1 @kind object;
  #L29255a.  v4.`com.bumptech.glide.load.engine.h.E` @type ^`java.lang.Object` := v1 @kind object;
  #L29255e.  v4.`com.bumptech.glide.load.engine.h.F` @type ^`com.bumptech.glide.load.a` := v1 @kind object;
  #L292562.  v4.`com.bumptech.glide.load.engine.h.G` @type ^`com.bumptech.glide.load.m.d` := v1 @kind object;
  #L292566.  v2:= 0L;
  #L29256a.  v4.`com.bumptech.glide.load.engine.h.y` @type ^`long` := v2 @kind wide;
  #L29256e.  v4.`com.bumptech.glide.load.engine.h.J` @type ^`boolean` := v0 @kind boolean;
  #L292572.  v4.`com.bumptech.glide.load.engine.h.A` @type ^`java.lang.Object` := v1 @kind object;
  #L292576.  v0:= v4.`com.bumptech.glide.load.engine.h.g` @type ^`java.util.List` @kind object;
  #L29257a.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L292580.  v0:= v4.`com.bumptech.glide.load.engine.h.j` @type ^`c.h.i.d` @kind object;
  #L292584.  call temp:= `release`(v0, v4) @signature `Lc/h/i/d;.release:(Ljava/lang/Object;)Z` @kind interface;
  #L29258a.  return @kind void;
}
procedure `int` `getPriority`(`com.bumptech.glide.load.engine.h` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.getPriority:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L29205c.  v0:= v1.`com.bumptech.glide.load.engine.h.o` @type ^`com.bumptech.glide.g` @kind object;
  #L292060.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L292066.  v0:= temp;
  #L292068.  return v0;
}
procedure `void` `h`(`com.bumptech.glide.load.engine.h` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.h:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2926d0.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L2926d6.  v0:= temp @kind object;
  #L2926d8.  v3.`com.bumptech.glide.load.engine.h.B` @type ^`java.lang.Thread` := v0 @kind object;
  #L2926dc.  call temp:= `getLogTime`() @signature `Lcom/bumptech/glide/s/f;.getLogTime:()J` @kind static;
  #L2926e2.  v0:= temp @kind wide;
  #L2926e4.  v3.`com.bumptech.glide.load.engine.h.y` @type ^`long` := v0 @kind wide;
  #L2926e8.  v0:= 0I;
  #L2926ea.  v1:= v3.`com.bumptech.glide.load.engine.h.J` @type ^`boolean` @kind boolean;
  #L2926ee.  if v1 != 0 then goto L29273a;
  #L2926f2.  v1:= v3.`com.bumptech.glide.load.engine.h.H` @type ^`com.bumptech.glide.load.engine.f` @kind object;
  #L2926f6.  if v1 == 0 then goto L29273a;
  #L2926fa.  v0:= v3.`com.bumptech.glide.load.engine.h.H` @type ^`com.bumptech.glide.load.engine.f` @kind object;
  #L2926fe.  call temp:= `startNext`(v0) @signature `Lcom/bumptech/glide/load/engine/f;.startNext:()Z` @kind interface;
  #L292704.  v0:= temp;
  #L292706.  if v0 != 0 then goto L29273a;
  #L29270a.  v1:= v3.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L29270e.  call temp:= `a`(v3, v1) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Lcom/bumptech/glide/load/engine/h$h;)Lcom/bumptech/glide/load/engine/h$h;` @kind direct;
  #L292714.  v1:= temp @kind object;
  #L292716.  v3.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.h$h` := v1 @kind object;
  #L29271a.  call temp:= `c`(v3) @signature `Lcom/bumptech/glide/load/engine/h;.c:()Lcom/bumptech/glide/load/engine/f;` @kind direct;
  #L292720.  v1:= temp @kind object;
  #L292722.  v3.`com.bumptech.glide.load.engine.h.H` @type ^`com.bumptech.glide.load.engine.f` := v1 @kind object;
  #L292726.  v1:= v3.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L29272a.  v2:= `@@com.bumptech.glide.load.engine.h$h.i` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L29272e.  if v1 != v2 then goto L2926ea;
  #L292732.  call `reschedule`(v3) @signature `Lcom/bumptech/glide/load/engine/h;.reschedule:()V` @kind virtual;
  #L292738.  return @kind void;
  #L29273a.  v1:= v3.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L29273e.  v2:= `@@com.bumptech.glide.load.engine.h$h.k` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L292742.  if v1 == v2 then goto L29274e;
  #L292746.  v1:= v3.`com.bumptech.glide.load.engine.h.J` @type ^`boolean` @kind boolean;
  #L29274a.  if v1 == 0 then goto L292758;
  #L29274e.  if v0 != 0 then goto L292758;
  #L292752.  call `d`(v3) @signature `Lcom/bumptech/glide/load/engine/h;.d:()V` @kind direct;
  #L292758.  return @kind void;
}
procedure `void` `i`(`com.bumptech.glide.load.engine.h` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L29276c.  v0:= `@@com.bumptech.glide.load.engine.h$a.a` @type ^`int`[] @kind object;
  #L292770.  v1:= v3.`com.bumptech.glide.load.engine.h.x` @type ^`com.bumptech.glide.load.engine.h$g` @kind object;
  #L292774.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L29277a.  v1:= temp;
  #L29277c.  v0:= v0[v1];
  #L292780.  v1:= 1I;
  #L292782.  if v0 == v1 then goto L2927d4;
  #L292786.  v1:= 2I;
  #L292788.  if v0 == v1 then goto L2927cc;
  #L29278c.  v1:= 3I;
  #L29278e.  if v0 != v1 then goto L29279a;
  #L292792.  call `b`(v3) @signature `Lcom/bumptech/glide/load/engine/h;.b:()V` @kind direct;
  #L292798.  goto L2927f6;
  #L29279a.  v0:= new `java.lang.IllegalStateException`;
  #L29279e.  v1:= new `java.lang.StringBuilder`;
  #L2927a2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2927a8.  v2:= "Unrecognized run reason: " @kind object;
  #L2927ac.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2927b2.  v2:= v3.`com.bumptech.glide.load.engine.h.x` @type ^`com.bumptech.glide.load.engine.h$g` @kind object;
  #L2927b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2927bc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2927c2.  v1:= temp @kind object;
  #L2927c4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2927ca.  throw v0;
  #L2927cc.  call `h`(v3) @signature `Lcom/bumptech/glide/load/engine/h;.h:()V` @kind direct;
  #L2927d2.  goto L2927f6;
  #L2927d4.  v0:= `@@com.bumptech.glide.load.engine.h$h.f` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L2927d8.  call temp:= `a`(v3, v0) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Lcom/bumptech/glide/load/engine/h$h;)Lcom/bumptech/glide/load/engine/h$h;` @kind direct;
  #L2927de.  v0:= temp @kind object;
  #L2927e0.  v3.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.h$h` := v0 @kind object;
  #L2927e4.  call temp:= `c`(v3) @signature `Lcom/bumptech/glide/load/engine/h;.c:()Lcom/bumptech/glide/load/engine/f;` @kind direct;
  #L2927ea.  v0:= temp @kind object;
  #L2927ec.  v3.`com.bumptech.glide.load.engine.h.H` @type ^`com.bumptech.glide.load.engine.f` := v0 @kind object;
  #L2927f0.  call `h`(v3) @signature `Lcom/bumptech/glide/load/engine/h;.h:()V` @kind direct;
  #L2927f6.  return @kind void;
}
procedure `void` `j`(`com.bumptech.glide.load.engine.h` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.j:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L292808.  v0:= v3.`com.bumptech.glide.load.engine.h.h` @type ^`com.bumptech.glide.s.l.c` @kind object;
  #L29280c.  call `throwIfRecycled`(v0) @signature `Lcom/bumptech/glide/s/l/c;.throwIfRecycled:()V` @kind virtual;
  #L292812.  v0:= v3.`com.bumptech.glide.load.engine.h.I` @type ^`boolean` @kind boolean;
  #L292816.  v1:= 1I;
  #L292818.  if v0 == 0 then goto L29285a;
  #L29281c.  v0:= v3.`com.bumptech.glide.load.engine.h.g` @type ^`java.util.List` @kind object;
  #L292820.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L292826.  v0:= temp;
  #L292828.  if v0 == 0 then goto L292830;
  #L29282c.  v0:= 0I;
  #L29282e.  goto L29284a;
  #L292830.  v0:= v3.`com.bumptech.glide.load.engine.h.g` @type ^`java.util.List` @kind object;
  #L292834.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L29283a.  v2:= temp;
  #L29283c.  v2:= v2 - v1 @kind int;
  #L29283e.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L292844.  v0:= temp @kind object;
  #L292846.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L29284a.  v1:= new `java.lang.IllegalStateException`;
  #L29284e.  v2:= "Already notified" @kind object;
  #L292852.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L292858.  throw v1;
  #L29285a.  v3.`com.bumptech.glide.load.engine.h.I` @type ^`boolean` := v1 @kind boolean;
  #L29285e.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.h` `a`(`com.bumptech.glide.load.engine.h` v16 @kind this, `com.bumptech.glide.d` v17 @kind object, `java.lang.Object` v18 @kind object, `com.bumptech.glide.load.engine.n` v19 @kind object, `com.bumptech.glide.load.f` v20 @kind object, `int` v21 , `int` v22 , `java.lang.Class` v23 @kind object, `java.lang.Class` v24 @kind object, `com.bumptech.glide.g` v25 @kind object, `com.bumptech.glide.load.engine.j` v26 @kind object, `java.util.Map` v27 @kind object, `boolean` v28 , `boolean` v29 , `boolean` v30 , `com.bumptech.glide.load.h` v31 @kind object, `com.bumptech.glide.load.engine.h$b` v32 @kind object, `int` v33 ) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Lcom/bumptech/glide/d;Ljava/lang/Object;Lcom/bumptech/glide/load/engine/n;Lcom/bumptech/glide/load/f;IILjava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/g;Lcom/bumptech/glide/load/engine/j;Ljava/util/Map;ZZZLcom/bumptech/glide/load/h;Lcom/bumptech/glide/load/engine/h$b;I)Lcom/bumptech/glide/load/engine/h;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L291bc8.  v0:= v16 @kind object;
  #L291bcc.  v1:= v0.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.g` @kind object;
  #L291bd0.  v15:= v0.`com.bumptech.glide.load.engine.h.i` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L291bd4.  v2:= v17 @kind object;
  #L291bd8.  v3:= v18 @kind object;
  #L291bdc.  v4:= v20 @kind object;
  #L291be0.  v5:= v21;
  #L291be4.  v6:= v22;
  #L291be8.  v7:= v26 @kind object;
  #L291bec.  v8:= v23 @kind object;
  #L291bf0.  v9:= v24 @kind object;
  #L291bf4.  v10:= v25 @kind object;
  #L291bf8.  v11:= v31 @kind object;
  #L291bfc.  v12:= v27 @kind object;
  #L291c00.  v13:= v28;
  #L291c04.  v14:= v29;
  #L291c08.  call `a`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) @signature `Lcom/bumptech/glide/load/engine/g;.a:(Lcom/bumptech/glide/d;Ljava/lang/Object;Lcom/bumptech/glide/load/f;IILcom/bumptech/glide/load/engine/j;Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/g;Lcom/bumptech/glide/load/h;Ljava/util/Map;ZZLcom/bumptech/glide/load/engine/h$e;)V` @kind virtual;
  #L291c0e.  v1:= v17 @kind object;
  #L291c12.  v0.`com.bumptech.glide.load.engine.h.m` @type ^`com.bumptech.glide.d` := v1 @kind object;
  #L291c16.  v1:= v20 @kind object;
  #L291c1a.  v0.`com.bumptech.glide.load.engine.h.n` @type ^`com.bumptech.glide.load.f` := v1 @kind object;
  #L291c1e.  v1:= v25 @kind object;
  #L291c22.  v0.`com.bumptech.glide.load.engine.h.o` @type ^`com.bumptech.glide.g` := v1 @kind object;
  #L291c26.  v1:= v19 @kind object;
  #L291c2a.  v0.`com.bumptech.glide.load.engine.h.p` @type ^`com.bumptech.glide.load.engine.n` := v1 @kind object;
  #L291c2e.  v1:= v21;
  #L291c32.  v0.`com.bumptech.glide.load.engine.h.q` @type ^`int` := v1;
  #L291c36.  v1:= v22;
  #L291c3a.  v0.`com.bumptech.glide.load.engine.h.r` @type ^`int` := v1;
  #L291c3e.  v1:= v26 @kind object;
  #L291c42.  v0.`com.bumptech.glide.load.engine.h.s` @type ^`com.bumptech.glide.load.engine.j` := v1 @kind object;
  #L291c46.  v1:= v30;
  #L291c4a.  v0.`com.bumptech.glide.load.engine.h.z` @type ^`boolean` := v1 @kind boolean;
  #L291c4e.  v1:= v31 @kind object;
  #L291c52.  v0.`com.bumptech.glide.load.engine.h.t` @type ^`com.bumptech.glide.load.h` := v1 @kind object;
  #L291c56.  v1:= v32 @kind object;
  #L291c5a.  v0.`com.bumptech.glide.load.engine.h.u` @type ^`com.bumptech.glide.load.engine.h$b` := v1 @kind object;
  #L291c5e.  v1:= v33;
  #L291c62.  v0.`com.bumptech.glide.load.engine.h.v` @type ^`int` := v1;
  #L291c66.  v1:= `@@com.bumptech.glide.load.engine.h$g.f` @type ^`com.bumptech.glide.load.engine.h$g` @kind object;
  #L291c6a.  v0.`com.bumptech.glide.load.engine.h.x` @type ^`com.bumptech.glide.load.engine.h$g` := v1 @kind object;
  #L291c6e.  v1:= v18 @kind object;
  #L291c72.  v0.`com.bumptech.glide.load.engine.h.A` @type ^`java.lang.Object` := v1 @kind object;
  #L291c76.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.u` `a`(`com.bumptech.glide.load.engine.h` v11 @kind this, `com.bumptech.glide.load.a` v12 @kind object, `com.bumptech.glide.load.engine.u` v13 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Lcom/bumptech/glide/load/a;Lcom/bumptech/glide/load/engine/u;)Lcom/bumptech/glide/load/engine/u;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L291e10.  call temp:= `get`(v13) @signature `Lcom/bumptech/glide/load/engine/u;.get:()Ljava/lang/Object;` @kind interface;
  #L291e16.  v0:= temp @kind object;
  #L291e18.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L291e1e.  v8:= temp @kind object;
  #L291e20.  v0:= `@@com.bumptech.glide.load.a.i` @type ^`com.bumptech.glide.load.a` @kind object;
  #L291e24.  v1:= 0I;
  #L291e26.  if v12 == v0 then goto L291e50;
  #L291e2a.  v0:= v11.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.g` @kind object;
  #L291e2e.  call temp:= `b`(v0, v8) @signature `Lcom/bumptech/glide/load/engine/g;.b:(Ljava/lang/Class;)Lcom/bumptech/glide/load/l;` @kind virtual;
  #L291e34.  v0:= temp @kind object;
  #L291e36.  v2:= v11.`com.bumptech.glide.load.engine.h.m` @type ^`com.bumptech.glide.d` @kind object;
  #L291e3a.  v3:= v11.`com.bumptech.glide.load.engine.h.q` @type ^`int`;
  #L291e3e.  v4:= v11.`com.bumptech.glide.load.engine.h.r` @type ^`int`;
  #L291e42.  call temp:= `transform`(v0, v2, v13, v3, v4) @signature `Lcom/bumptech/glide/load/l;.transform:(Landroid/content/Context;Lcom/bumptech/glide/load/engine/u;II)Lcom/bumptech/glide/load/engine/u;` @kind interface;
  #L291e48.  v2:= temp @kind object;
  #L291e4a.  v7:= v0 @kind object;
  #L291e4c.  v0:= v2 @kind object;
  #L291e4e.  goto L291e54;
  #L291e50.  v0:= v13 @kind object;
  #L291e52.  v7:= v1 @kind object;
  #L291e54.  call temp:= `equals`(v13, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L291e5a.  v2:= temp;
  #L291e5c.  if v2 != 0 then goto L291e66;
  #L291e60.  call `recycle`(v13) @signature `Lcom/bumptech/glide/load/engine/u;.recycle:()V` @kind interface;
  #L291e66.  v13:= v11.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.g` @kind object;
  #L291e6a.  call temp:= `b`(v13, v0) @signature `Lcom/bumptech/glide/load/engine/g;.b:(Lcom/bumptech/glide/load/engine/u;)Z` @kind virtual;
  #L291e70.  v13:= temp;
  #L291e72.  if v13 == 0 then goto L291e90;
  #L291e76.  v13:= v11.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.g` @kind object;
  #L291e7a.  call temp:= `a`(v13, v0) @signature `Lcom/bumptech/glide/load/engine/g;.a:(Lcom/bumptech/glide/load/engine/u;)Lcom/bumptech/glide/load/k;` @kind virtual;
  #L291e80.  v1:= temp @kind object;
  #L291e82.  v13:= v11.`com.bumptech.glide.load.engine.h.t` @type ^`com.bumptech.glide.load.h` @kind object;
  #L291e86.  call temp:= `getEncodeStrategy`(v1, v13) @signature `Lcom/bumptech/glide/load/k;.getEncodeStrategy:(Lcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/c;` @kind interface;
  #L291e8c.  v13:= temp @kind object;
  #L291e8e.  goto L291e94;
  #L291e90.  v13:= `@@com.bumptech.glide.load.c.h` @type ^`com.bumptech.glide.load.c` @kind object;
  #L291e94.  v10:= v1 @kind object;
  #L291e96.  v1:= v11.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.g` @kind object;
  #L291e9a.  v2:= v11.`com.bumptech.glide.load.engine.h.C` @type ^`com.bumptech.glide.load.f` @kind object;
  #L291e9e.  call temp:= `a`(v1, v2) @signature `Lcom/bumptech/glide/load/engine/g;.a:(Lcom/bumptech/glide/load/f;)Z` @kind virtual;
  #L291ea4.  v1:= temp;
  #L291ea6.  v2:= 1I;
  #L291ea8.  v1:= v1 ^~ v2 @kind int;
  #L291eaa.  v3:= v11.`com.bumptech.glide.load.engine.h.s` @type ^`com.bumptech.glide.load.engine.j` @kind object;
  #L291eae.  call temp:= `isResourceCacheable`(v3, v1, v12, v13) @signature `Lcom/bumptech/glide/load/engine/j;.isResourceCacheable:(ZLcom/bumptech/glide/load/a;Lcom/bumptech/glide/load/c;)Z` @kind virtual;
  #L291eb4.  v12:= temp;
  #L291eb6.  if v12 == 0 then goto L291f76;
  #L291eba.  if v10 == 0 then goto L291f5a;
  #L291ebe.  v12:= `@@com.bumptech.glide.load.engine.h$a.c` @type ^`int`[] @kind object;
  #L291ec2.  call temp:= `ordinal`(v13) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L291ec8.  v1:= temp;
  #L291eca.  v12:= v12[v1];
  #L291ece.  if v12 == v2 then goto L291f34;
  #L291ed2.  v1:= 2I;
  #L291ed4.  if v12 != v1 then goto L291f06;
  #L291ed8.  v12:= new `com.bumptech.glide.load.engine.w`;
  #L291edc.  v13:= v11.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.g` @kind object;
  #L291ee0.  call temp:= `b`(v13) @signature `Lcom/bumptech/glide/load/engine/g;.b:()Lcom/bumptech/glide/load/engine/z/b;` @kind virtual;
  #L291ee6.  v2:= temp @kind object;
  #L291ee8.  v3:= v11.`com.bumptech.glide.load.engine.h.C` @type ^`com.bumptech.glide.load.f` @kind object;
  #L291eec.  v4:= v11.`com.bumptech.glide.load.engine.h.n` @type ^`com.bumptech.glide.load.f` @kind object;
  #L291ef0.  v5:= v11.`com.bumptech.glide.load.engine.h.q` @type ^`int`;
  #L291ef4.  v6:= v11.`com.bumptech.glide.load.engine.h.r` @type ^`int`;
  #L291ef8.  v9:= v11.`com.bumptech.glide.load.engine.h.t` @type ^`com.bumptech.glide.load.h` @kind object;
  #L291efc.  v1:= v12 @kind object;
  #L291efe.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lcom/bumptech/glide/load/engine/w;.<init>:(Lcom/bumptech/glide/load/engine/z/b;Lcom/bumptech/glide/load/f;Lcom/bumptech/glide/load/f;IILcom/bumptech/glide/load/l;Ljava/lang/Class;Lcom/bumptech/glide/load/h;)V` @kind direct;
  #L291f04.  goto L291f46;
  #L291f06.  v12:= new `java.lang.IllegalArgumentException`;
  #L291f0a.  v0:= new `java.lang.StringBuilder`;
  #L291f0e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L291f14.  v1:= "Unknown strategy: " @kind object;
  #L291f18.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L291f1e.  call temp:= `append`(v0, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L291f24.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L291f2a.  v13:= temp @kind object;
  #L291f2c.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L291f32.  throw v12;
  #L291f34.  v12:= new `com.bumptech.glide.load.engine.d`;
  #L291f38.  v13:= v11.`com.bumptech.glide.load.engine.h.C` @type ^`com.bumptech.glide.load.f` @kind object;
  #L291f3c.  v1:= v11.`com.bumptech.glide.load.engine.h.n` @type ^`com.bumptech.glide.load.f` @kind object;
  #L291f40.  call `<init>`(v12, v13, v1) @signature `Lcom/bumptech/glide/load/engine/d;.<init>:(Lcom/bumptech/glide/load/f;Lcom/bumptech/glide/load/f;)V` @kind direct;
  #L291f46.  call temp:= `b`(v0) @signature `Lcom/bumptech/glide/load/engine/t;.b:(Lcom/bumptech/glide/load/engine/u;)Lcom/bumptech/glide/load/engine/t;` @kind static;
  #L291f4c.  v0:= temp @kind object;
  #L291f4e.  v13:= v11.`com.bumptech.glide.load.engine.h.k` @type ^`com.bumptech.glide.load.engine.h$d` @kind object;
  #L291f52.  call `a`(v13, v12, v10, v0) @signature `Lcom/bumptech/glide/load/engine/h$d;.a:(Lcom/bumptech/glide/load/f;Lcom/bumptech/glide/load/k;Lcom/bumptech/glide/load/engine/t;)V` @kind virtual;
  #L291f58.  goto L291f76;
  #L291f5a.  v12:= new `com.bumptech.glide.Registry$NoResultEncoderAvailableException`;
  #L291f5e.  call temp:= `get`(v0) @signature `Lcom/bumptech/glide/load/engine/u;.get:()Ljava/lang/Object;` @kind interface;
  #L291f64.  v13:= temp @kind object;
  #L291f66.  call temp:= `getClass`(v13) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L291f6c.  v13:= temp @kind object;
  #L291f6e.  call `<init>`(v12, v13) @signature `Lcom/bumptech/glide/Registry$NoResultEncoderAvailableException;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L291f74.  throw v12;
  #L291f76.  return v0 @kind object;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.h` v1 @kind this, `boolean` v2 ) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Z)V` @AccessFlag  {
    temp;
    v0;

  #L2924e4.  v0:= v1.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.engine.h$f` @kind object;
  #L2924e8.  call temp:= `a`(v0, v2) @signature `Lcom/bumptech/glide/load/engine/h$f;.a:(Z)Z` @kind virtual;
  #L2924ee.  v2:= temp;
  #L2924f0.  if v2 == 0 then goto L2924fa;
  #L2924f4.  call `g`(v1) @signature `Lcom/bumptech/glide/load/engine/h;.g:()V` @kind direct;
  #L2924fa.  return @kind void;
}
procedure `boolean` `a`(`com.bumptech.glide.load.engine.h` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.a:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L291a5c.  v0:= `@@com.bumptech.glide.load.engine.h$h.f` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L291a60.  call temp:= `a`(v2, v0) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Lcom/bumptech/glide/load/engine/h$h;)Lcom/bumptech/glide/load/engine/h$h;` @kind direct;
  #L291a66.  v0:= temp @kind object;
  #L291a68.  v1:= `@@com.bumptech.glide.load.engine.h$h.g` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L291a6c.  if v0 == v1 then goto L291a7e;
  #L291a70.  v1:= `@@com.bumptech.glide.load.engine.h$h.h` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L291a74.  if v0 != v1 then goto L291a7a;
  #L291a78.  goto L291a7e;
  #L291a7a.  v0:= 0I;
  #L291a7c.  goto L291a80;
  #L291a7e.  v0:= 1I;
  #L291a80.  return v0;
}
procedure `void` `cancel`(`com.bumptech.glide.load.engine.h` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2920e0.  v0:= 1I;
  #L2920e2.  v1.`com.bumptech.glide.load.engine.h.J` @type ^`boolean` := v0 @kind boolean;
  #L2920e6.  v0:= v1.`com.bumptech.glide.load.engine.h.H` @type ^`com.bumptech.glide.load.engine.f` @kind object;
  #L2920ea.  if v0 == 0 then goto L2920f4;
  #L2920ee.  call `cancel`(v0) @signature `Lcom/bumptech/glide/load/engine/f;.cancel:()V` @kind interface;
  #L2920f4.  return @kind void;
}
procedure `int` `compareTo`(`com.bumptech.glide.load.engine.h` v2 @kind this, `com.bumptech.glide.load.engine.h` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.compareTo:(Lcom/bumptech/glide/load/engine/h;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L292008.  call temp:= `getPriority`(v2) @signature `Lcom/bumptech/glide/load/engine/h;.getPriority:()I` @kind direct;
  #L29200e.  v0:= temp;
  #L292010.  call temp:= `getPriority`(v3) @signature `Lcom/bumptech/glide/load/engine/h;.getPriority:()I` @kind direct;
  #L292016.  v1:= temp;
  #L292018.  v0:= v0 - v1 @kind int;
  #L29201a.  if v0 != 0 then goto L292028;
  #L29201e.  v0:= v2.`com.bumptech.glide.load.engine.h.v` @type ^`int`;
  #L292022.  v3:= v3.`com.bumptech.glide.load.engine.h.v` @type ^`int`;
  #L292026.  v0:= v0 - v3 @kind int;
  #L292028.  return v0;
}
procedure `int` `compareTo`(`com.bumptech.glide.load.engine.h` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L29203c.  v1:= (`com.bumptech.glide.load.engine.h`) v1 @kind object;
  #L292040.  call temp:= `compareTo`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/h;.compareTo:(Lcom/bumptech/glide/load/engine/h;)I` @kind virtual;
  #L292046.  v1:= temp;
  #L292048.  return v1;
}
procedure `com.bumptech.glide.s.l.c` `getVerifier`(`com.bumptech.glide.load.engine.h` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.getVerifier:()Lcom/bumptech/glide/s/l/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L291ff0.  v0:= v1.`com.bumptech.glide.load.engine.h.h` @type ^`com.bumptech.glide.s.l.c` @kind object;
  #L291ff4.  return v0 @kind object;
}
procedure `void` `onDataFetcherFailed`(`com.bumptech.glide.load.engine.h` v2 @kind this, `com.bumptech.glide.load.f` v3 @kind object, `java.lang.Exception` v4 @kind object, `com.bumptech.glide.load.m.d` v5 @kind object, `com.bumptech.glide.load.a` v6 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.onDataFetcherFailed:(Lcom/bumptech/glide/load/f;Ljava/lang/Exception;Lcom/bumptech/glide/load/m/d;Lcom/bumptech/glide/load/a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2923b4.  call `cleanup`(v5) @signature `Lcom/bumptech/glide/load/m/d;.cleanup:()V` @kind interface;
  #L2923ba.  v0:= new `com.bumptech.glide.load.engine.GlideException`;
  #L2923be.  v1:= "Fetching data failed" @kind object;
  #L2923c2.  call `<init>`(v0, v1, v4) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L2923c8.  call temp:= `getDataClass`(v5) @signature `Lcom/bumptech/glide/load/m/d;.getDataClass:()Ljava/lang/Class;` @kind interface;
  #L2923ce.  v4:= temp @kind object;
  #L2923d0.  call `a`(v0, v3, v6, v4) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Lcom/bumptech/glide/load/f;Lcom/bumptech/glide/load/a;Ljava/lang/Class;)V` @kind virtual;
  #L2923d6.  v3:= v2.`com.bumptech.glide.load.engine.h.g` @type ^`java.util.List` @kind object;
  #L2923da.  call temp:= `add`(v3, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2923e0.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L2923e6.  v3:= temp @kind object;
  #L2923e8.  v4:= v2.`com.bumptech.glide.load.engine.h.B` @type ^`java.lang.Thread` @kind object;
  #L2923ec.  if v3 == v4 then goto L292404;
  #L2923f0.  v3:= `@@com.bumptech.glide.load.engine.h$g.g` @type ^`com.bumptech.glide.load.engine.h$g` @kind object;
  #L2923f4.  v2.`com.bumptech.glide.load.engine.h.x` @type ^`com.bumptech.glide.load.engine.h$g` := v3 @kind object;
  #L2923f8.  v3:= v2.`com.bumptech.glide.load.engine.h.u` @type ^`com.bumptech.glide.load.engine.h$b` @kind object;
  #L2923fc.  call `reschedule`(v3, v2) @signature `Lcom/bumptech/glide/load/engine/h$b;.reschedule:(Lcom/bumptech/glide/load/engine/h;)V` @kind interface;
  #L292402.  goto L29240a;
  #L292404.  call `h`(v2) @signature `Lcom/bumptech/glide/load/engine/h;.h:()V` @kind direct;
  #L29240a.  return @kind void;
}
procedure `void` `onDataFetcherReady`(`com.bumptech.glide.load.engine.h` v0 @kind this, `com.bumptech.glide.load.f` v1 @kind object, `java.lang.Object` v2 @kind object, `com.bumptech.glide.load.m.d` v3 @kind object, `com.bumptech.glide.load.a` v4 @kind object, `com.bumptech.glide.load.f` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.onDataFetcherReady:(Lcom/bumptech/glide/load/f;Ljava/lang/Object;Lcom/bumptech/glide/load/m/d;Lcom/bumptech/glide/load/a;Lcom/bumptech/glide/load/f;)V` @AccessFlag PUBLIC {
    temp;

  #L29241c.  v0.`com.bumptech.glide.load.engine.h.C` @type ^`com.bumptech.glide.load.f` := v1 @kind object;
  #L292420.  v0.`com.bumptech.glide.load.engine.h.E` @type ^`java.lang.Object` := v2 @kind object;
  #L292424.  v0.`com.bumptech.glide.load.engine.h.G` @type ^`com.bumptech.glide.load.m.d` := v3 @kind object;
  #L292428.  v0.`com.bumptech.glide.load.engine.h.F` @type ^`com.bumptech.glide.load.a` := v4 @kind object;
  #L29242c.  v0.`com.bumptech.glide.load.engine.h.D` @type ^`com.bumptech.glide.load.f` := v5 @kind object;
  #L292430.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L292436.  v1:= temp @kind object;
  #L292438.  v2:= v0.`com.bumptech.glide.load.engine.h.B` @type ^`java.lang.Thread` @kind object;
  #L29243c.  if v1 == v2 then goto L292454;
  #L292440.  v1:= `@@com.bumptech.glide.load.engine.h$g.h` @type ^`com.bumptech.glide.load.engine.h$g` @kind object;
  #L292444.  v0.`com.bumptech.glide.load.engine.h.x` @type ^`com.bumptech.glide.load.engine.h$g` := v1 @kind object;
  #L292448.  v1:= v0.`com.bumptech.glide.load.engine.h.u` @type ^`com.bumptech.glide.load.engine.h$b` @kind object;
  #L29244c.  call `reschedule`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/h$b;.reschedule:(Lcom/bumptech/glide/load/engine/h;)V` @kind interface;
  #L292452.  goto L29246a;
  #L292454.  v1:= "DecodeJob.decodeFromRetrievedData" @kind object;
  #L292458.  call `beginSection`(v1) @signature `Lcom/bumptech/glide/s/l/b;.beginSection:(Ljava/lang/String;)V` @kind static;
  #L29245e.  call `b`(v0) @signature `Lcom/bumptech/glide/load/engine/h;.b:()V` @kind direct;
  #L292464.  call `endSection`() @signature `Lcom/bumptech/glide/s/l/b;.endSection:()V` @kind static;
  #L29246a.  return @kind void;
  #L29246c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29246e.  call `endSection`() @signature `Lcom/bumptech/glide/s/l/b;.endSection:()V` @kind static;
  #L292474.  throw v1;
  catch `java.lang.Throwable` @[L29245e..L292464] goto L29246c;
}
procedure `void` `reschedule`(`com.bumptech.glide.load.engine.h` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.reschedule:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29259c.  v0:= `@@com.bumptech.glide.load.engine.h$g.g` @type ^`com.bumptech.glide.load.engine.h$g` @kind object;
  #L2925a0.  v1.`com.bumptech.glide.load.engine.h.x` @type ^`com.bumptech.glide.load.engine.h$g` := v0 @kind object;
  #L2925a4.  v0:= v1.`com.bumptech.glide.load.engine.h.u` @type ^`com.bumptech.glide.load.engine.h$b` @kind object;
  #L2925a8.  call `reschedule`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/h$b;.reschedule:(Lcom/bumptech/glide/load/engine/h;)V` @kind interface;
  #L2925ae.  return @kind void;
}
procedure `void` `run`(`com.bumptech.glide.load.engine.h` v5 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2925c0.  v0:= "DecodeJob" @kind object;
  #L2925c4.  v1:= v5.`com.bumptech.glide.load.engine.h.A` @type ^`java.lang.Object` @kind object;
  #L2925c8.  v2:= "DecodeJob#run(model=%s)" @kind object;
  #L2925cc.  call `beginSectionFormat`(v2, v1) @signature `Lcom/bumptech/glide/s/l/b;.beginSectionFormat:(Ljava/lang/String;Ljava/lang/Object;)V` @kind static;
  #L2925d2.  v1:= v5.`com.bumptech.glide.load.engine.h.G` @type ^`com.bumptech.glide.load.m.d` @kind object;
  #L2925d6.  v2:= v5.`com.bumptech.glide.load.engine.h.J` @type ^`boolean` @kind boolean;
  #L2925da.  if v2 == 0 then goto L2925f6;
  #L2925de.  call `d`(v5) @signature `Lcom/bumptech/glide/load/engine/h;.d:()V` @kind direct;
  #L2925e4.  if v1 == 0 then goto L2925ee;
  #L2925e8.  call `cleanup`(v1) @signature `Lcom/bumptech/glide/load/m/d;.cleanup:()V` @kind interface;
  #L2925ee.  call `endSection`() @signature `Lcom/bumptech/glide/s/l/b;.endSection:()V` @kind static;
  #L2925f4.  return @kind void;
  #L2925f6.  call `i`(v5) @signature `Lcom/bumptech/glide/load/engine/h;.i:()V` @kind direct;
  #L2925fc.  if v1 == 0 then goto L292606;
  #L292600.  call `cleanup`(v1) @signature `Lcom/bumptech/glide/load/m/d;.cleanup:()V` @kind interface;
  #L292606.  call `endSection`() @signature `Lcom/bumptech/glide/s/l/b;.endSection:()V` @kind static;
  #L29260c.  return @kind void;
  #L29260e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L292610.  v3:= 3I;
  #L292612.  call temp:= `isLoggable`(v0, v3) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L292618.  v3:= temp;
  #L29261a.  if v3 == 0 then goto L29265e;
  #L29261e.  v3:= new `java.lang.StringBuilder`;
  #L292622.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L292628.  v4:= "DecodeJob threw unexpectedly, isCancelled: " @kind object;
  #L29262c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L292632.  v4:= v5.`com.bumptech.glide.load.engine.h.J` @type ^`boolean` @kind boolean;
  #L292636.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L29263c.  v4:= ", stage: " @kind object;
  #L292640.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L292646.  v4:= v5.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L29264a.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L292650.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L292656.  v3:= temp @kind object;
  #L292658.  call temp:= `d`(v0, v3, v2) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L29265e.  v0:= v5.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L292662.  v3:= `@@com.bumptech.glide.load.engine.h$h.j` @type ^`com.bumptech.glide.load.engine.h$h` @kind object;
  #L292666.  if v0 == v3 then goto L29267a;
  #L29266a.  v0:= v5.`com.bumptech.glide.load.engine.h.g` @type ^`java.util.List` @kind object;
  #L29266e.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L292674.  call `d`(v5) @signature `Lcom/bumptech/glide/load/engine/h;.d:()V` @kind direct;
  #L29267a.  v0:= v5.`com.bumptech.glide.load.engine.h.J` @type ^`boolean` @kind boolean;
  #L29267e.  if v0 != 0 then goto L292684;
  #L292682.  throw v2;
  #L292684.  throw v2;
  #L292686.  v0:= Exception @type ^`com.bumptech.glide.load.engine.b` @kind object;
  #L292688.  throw v0;
  #L29268a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29268c.  if v1 == 0 then goto L292696;
  #L292690.  call `cleanup`(v1) @signature `Lcom/bumptech/glide/load/m/d;.cleanup:()V` @kind interface;
  #L292696.  call `endSection`() @signature `Lcom/bumptech/glide/s/l/b;.endSection:()V` @kind static;
  #L29269c.  throw v0;
  catch `com.bumptech.glide.load.engine.b` @[L2925d6..L2925e4] goto L292686;
  catch `java.lang.Throwable` @[L2925d6..L2925e4] goto L29260e;
  catch `com.bumptech.glide.load.engine.b` @[L2925f6..L2925fc] goto L292686;
  catch `java.lang.Throwable` @[L2925f6..L2925fc] goto L29260e;
  catch `java.lang.Throwable` @[L292612..L29268a] goto L29268a;
}
