record `com.bumptech.glide.load.engine.l$e` @kind class @AccessFlag FINAL extends `java.lang.Iterable` @kind interface {
  `java.util.List` `com.bumptech.glide.load.engine.l$e.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.l$e` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/l$e;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2933ec.  v0:= new `java.util.ArrayList`;
  #L2933f0.  v1:= 2I;
  #L2933f2.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2933f8.  call `<init>`(v2, v0) @signature `Lcom/bumptech/glide/load/engine/l$e;.<init>:(Ljava/util/List;)V` @kind direct;
  #L2933fe.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.l$e` v0 @kind this, `java.util.List` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/l$e;.<init>:(Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L293410.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L293416.  v0.`com.bumptech.glide.load.engine.l$e.f` @type ^`java.util.List` := v1 @kind object;
  #L29341a.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.l$d` `c`(`com.bumptech.glide.q.i` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/l$e;.c:(Lcom/bumptech/glide/q/i;)Lcom/bumptech/glide/load/engine/l$d;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L29335c.  v0:= new `com.bumptech.glide.load.engine.l$d`;
  #L293360.  call temp:= `directExecutor`() @signature `Lcom/bumptech/glide/s/e;.directExecutor:()Ljava/util/concurrent/Executor;` @kind static;
  #L293366.  v1:= temp @kind object;
  #L293368.  call `<init>`(v0, v2, v1) @signature `Lcom/bumptech/glide/load/engine/l$d;.<init>:(Lcom/bumptech/glide/q/i;Ljava/util/concurrent/Executor;)V` @kind direct;
  #L29336e.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.l$e` `a`(`com.bumptech.glide.load.engine.l$e` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/l$e;.a:()Lcom/bumptech/glide/load/engine/l$e;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L293380.  v0:= new `com.bumptech.glide.load.engine.l$e`;
  #L293384.  v1:= new `java.util.ArrayList`;
  #L293388.  v2:= v3.`com.bumptech.glide.load.engine.l$e.f` @type ^`java.util.List` @kind object;
  #L29338c.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L293392.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/l$e;.<init>:(Ljava/util/List;)V` @kind direct;
  #L293398.  return v0 @kind object;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.l$e` v2 @kind this, `com.bumptech.glide.q.i` v3 @kind object, `java.util.concurrent.Executor` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/l$e;.a:(Lcom/bumptech/glide/q/i;Ljava/util/concurrent/Executor;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L29342c.  v0:= v2.`com.bumptech.glide.load.engine.l$e.f` @type ^`java.util.List` @kind object;
  #L293430.  v1:= new `com.bumptech.glide.load.engine.l$d`;
  #L293434.  call `<init>`(v1, v3, v4) @signature `Lcom/bumptech/glide/load/engine/l$d;.<init>:(Lcom/bumptech/glide/q/i;Ljava/util/concurrent/Executor;)V` @kind direct;
  #L29343a.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L293440.  return @kind void;
}
procedure `boolean` `a`(`com.bumptech.glide.load.engine.l$e` v1 @kind this, `com.bumptech.glide.q.i` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/l$e;.a:(Lcom/bumptech/glide/q/i;)Z` @AccessFlag  {
    temp;
    v0;

  #L293314.  v0:= v1.`com.bumptech.glide.load.engine.l$e.f` @type ^`java.util.List` @kind object;
  #L293318.  call temp:= `c`(v2) @signature `Lcom/bumptech/glide/load/engine/l$e;.c:(Lcom/bumptech/glide/q/i;)Lcom/bumptech/glide/load/engine/l$d;` @kind static;
  #L29331e.  v2:= temp @kind object;
  #L293320.  call temp:= `contains`(v0, v2) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L293326.  v2:= temp;
  #L293328.  return v2;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.l$e` v1 @kind this, `com.bumptech.glide.q.i` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/l$e;.b:(Lcom/bumptech/glide/q/i;)V` @AccessFlag  {
    temp;
    v0;

  #L293470.  v0:= v1.`com.bumptech.glide.load.engine.l$e.f` @type ^`java.util.List` @kind object;
  #L293474.  call temp:= `c`(v2) @signature `Lcom/bumptech/glide/load/engine/l$e;.c:(Lcom/bumptech/glide/q/i;)Lcom/bumptech/glide/load/engine/l$d;` @kind static;
  #L29347a.  v2:= temp @kind object;
  #L29347c.  call temp:= `remove`(v0, v2) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L293482.  return @kind void;
}
procedure `void` `clear`(`com.bumptech.glide.load.engine.l$e` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/l$e;.clear:()V` @AccessFlag  {
    temp;
    v0;

  #L293454.  v0:= v1.`com.bumptech.glide.load.engine.l$e.f` @type ^`java.util.List` @kind object;
  #L293458.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L29345e.  return @kind void;
}
procedure `boolean` `isEmpty`(`com.bumptech.glide.load.engine.l$e` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/l$e;.isEmpty:()Z` @AccessFlag  {
    temp;
    v0;

  #L29333c.  v0:= v1.`com.bumptech.glide.load.engine.l$e.f` @type ^`java.util.List` @kind object;
  #L293340.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L293346.  v0:= temp;
  #L293348.  return v0;
}
procedure `java.util.Iterator` `iterator`(`com.bumptech.glide.load.engine.l$e` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/l$e;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2933cc.  v0:= v1.`com.bumptech.glide.load.engine.l$e.f` @type ^`java.util.List` @kind object;
  #L2933d0.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2933d6.  v0:= temp @kind object;
  #L2933d8.  return v0 @kind object;
}
procedure `int` `size`(`com.bumptech.glide.load.engine.l$e` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/l$e;.size:()I` @AccessFlag  {
    temp;
    v0;

  #L2933ac.  v0:= v1.`com.bumptech.glide.load.engine.l$e.f` @type ^`java.util.List` @kind object;
  #L2933b0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2933b6.  v0:= temp;
  #L2933b8.  return v0;
}
