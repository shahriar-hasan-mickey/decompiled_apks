record `com.bumptech.glide.load.engine.a$d` @kind class @AccessFlag FINAL extends `java.lang.ref.WeakReference` @kind class {
  `com.bumptech.glide.load.f` `com.bumptech.glide.load.engine.a$d.a` @AccessFlag FINAL;
  `boolean` `com.bumptech.glide.load.engine.a$d.b` @AccessFlag FINAL;
  `com.bumptech.glide.load.engine.u` `com.bumptech.glide.load.engine.a$d.c` @AccessFlag ;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a$d` v0 @kind this, `com.bumptech.glide.load.f` v1 @kind object, `com.bumptech.glide.load.engine.p` v2 @kind object, `java.lang.ref.ReferenceQueue` v3 @kind object, `boolean` v4 ) @signature `Lcom/bumptech/glide/load/engine/a$d;.<init>:(Lcom/bumptech/glide/load/f;Lcom/bumptech/glide/load/engine/p;Ljava/lang/ref/ReferenceQueue;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2907d4.  call `<init>`(v0, v2, v3) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V` @kind direct;
  #L2907da.  call temp:= `checkNotNull`(v1) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2907e0.  v1:= (`com.bumptech.glide.load.f`) v1 @kind object;
  #L2907e4.  v0.`com.bumptech.glide.load.engine.a$d.a` @type ^`com.bumptech.glide.load.f` := v1 @kind object;
  #L2907e8.  call temp:= `c`(v2) @signature `Lcom/bumptech/glide/load/engine/p;.c:()Z` @kind virtual;
  #L2907ee.  v1:= temp;
  #L2907f0.  if v1 == 0 then goto L29080c;
  #L2907f4.  if v4 == 0 then goto L29080c;
  #L2907f8.  call temp:= `b`(v2) @signature `Lcom/bumptech/glide/load/engine/p;.b:()Lcom/bumptech/glide/load/engine/u;` @kind virtual;
  #L2907fe.  v1:= temp @kind object;
  #L290800.  call temp:= `checkNotNull`(v1) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L290806.  v1:= (`com.bumptech.glide.load.engine.u`) v1 @kind object;
  #L29080a.  goto L29080e;
  #L29080c.  v1:= 0I;
  #L29080e.  v0.`com.bumptech.glide.load.engine.a$d.c` @type ^`com.bumptech.glide.load.engine.u` := v1 @kind object;
  #L290812.  call temp:= `c`(v2) @signature `Lcom/bumptech/glide/load/engine/p;.c:()Z` @kind virtual;
  #L290818.  v1:= temp;
  #L29081a.  v0.`com.bumptech.glide.load.engine.a$d.b` @type ^`boolean` := v1 @kind boolean;
  #L29081e.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.a$d` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/a$d;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L290830.  v0:= 0I;
  #L290832.  v1.`com.bumptech.glide.load.engine.a$d.c` @type ^`com.bumptech.glide.load.engine.u` := v0 @kind object;
  #L290836.  call `clear`(v1) @signature `Ljava/lang/ref/WeakReference;.clear:()V` @kind virtual;
  #L29083c.  return @kind void;
}
