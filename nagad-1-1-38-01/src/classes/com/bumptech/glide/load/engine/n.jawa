record `com.bumptech.glide.load.engine.n` @kind class @AccessFlag  extends `com.bumptech.glide.load.f` @kind interface {
  `java.lang.Object` `com.bumptech.glide.load.engine.n.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.n.c` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.n.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `com.bumptech.glide.load.engine.n.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `com.bumptech.glide.load.engine.n.f` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.f` `com.bumptech.glide.load.engine.n.g` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.load.engine.n.h` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.h` `com.bumptech.glide.load.engine.n.i` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.n.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.n` v0 @kind this, `java.lang.Object` v1 @kind object, `com.bumptech.glide.load.f` v2 @kind object, `int` v3 , `int` v4 , `java.util.Map` v5 @kind object, `java.lang.Class` v6 @kind object, `java.lang.Class` v7 @kind object, `com.bumptech.glide.load.h` v8 @kind object) @signature `Lcom/bumptech/glide/load/engine/n;.<init>:(Ljava/lang/Object;Lcom/bumptech/glide/load/f;IILjava/util/Map;Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/h;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L293f10.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L293f16.  call temp:= `checkNotNull`(v1) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L293f1c.  v0.`com.bumptech.glide.load.engine.n.b` @type ^`java.lang.Object` := v1 @kind object;
  #L293f20.  v1:= "Signature must not be null" @kind object;
  #L293f24.  call temp:= `checkNotNull`(v2, v1) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L293f2a.  v2:= (`com.bumptech.glide.load.f`) v2 @kind object;
  #L293f2e.  v0.`com.bumptech.glide.load.engine.n.g` @type ^`com.bumptech.glide.load.f` := v2 @kind object;
  #L293f32.  v0.`com.bumptech.glide.load.engine.n.c` @type ^`int` := v3;
  #L293f36.  v0.`com.bumptech.glide.load.engine.n.d` @type ^`int` := v4;
  #L293f3a.  call temp:= `checkNotNull`(v5) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L293f40.  v5:= (`java.util.Map`) v5 @kind object;
  #L293f44.  v0.`com.bumptech.glide.load.engine.n.h` @type ^`java.util.Map` := v5 @kind object;
  #L293f48.  v1:= "Resource class must not be null" @kind object;
  #L293f4c.  call temp:= `checkNotNull`(v6, v1) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L293f52.  v6:= (`java.lang.Class`) v6 @kind object;
  #L293f56.  v0.`com.bumptech.glide.load.engine.n.e` @type ^`java.lang.Class` := v6 @kind object;
  #L293f5a.  v1:= "Transcode class must not be null" @kind object;
  #L293f5e.  call temp:= `checkNotNull`(v7, v1) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L293f64.  v7:= (`java.lang.Class`) v7 @kind object;
  #L293f68.  v0.`com.bumptech.glide.load.engine.n.f` @type ^`java.lang.Class` := v7 @kind object;
  #L293f6c.  call temp:= `checkNotNull`(v8) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L293f72.  v8:= (`com.bumptech.glide.load.h`) v8 @kind object;
  #L293f76.  v0.`com.bumptech.glide.load.engine.n.i` @type ^`com.bumptech.glide.load.h` := v8 @kind object;
  #L293f7a.  return @kind void;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.engine.n` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/n;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L293ca4.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.load.engine.n` @kind boolean;
  #L293ca8.  v1:= 0I;
  #L293caa.  if v0 == 0 then goto L293d44;
  #L293cae.  v4:= (`com.bumptech.glide.load.engine.n`) v4 @kind object;
  #L293cb2.  v0:= v3.`com.bumptech.glide.load.engine.n.b` @type ^`java.lang.Object` @kind object;
  #L293cb6.  v2:= v4.`com.bumptech.glide.load.engine.n.b` @type ^`java.lang.Object` @kind object;
  #L293cba.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L293cc0.  v0:= temp;
  #L293cc2.  if v0 == 0 then goto L293d44;
  #L293cc6.  v0:= v3.`com.bumptech.glide.load.engine.n.g` @type ^`com.bumptech.glide.load.f` @kind object;
  #L293cca.  v2:= v4.`com.bumptech.glide.load.engine.n.g` @type ^`com.bumptech.glide.load.f` @kind object;
  #L293cce.  call temp:= `equals`(v0, v2) @signature `Lcom/bumptech/glide/load/f;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L293cd4.  v0:= temp;
  #L293cd6.  if v0 == 0 then goto L293d44;
  #L293cda.  v0:= v3.`com.bumptech.glide.load.engine.n.d` @type ^`int`;
  #L293cde.  v2:= v4.`com.bumptech.glide.load.engine.n.d` @type ^`int`;
  #L293ce2.  if v0 != v2 then goto L293d44;
  #L293ce6.  v0:= v3.`com.bumptech.glide.load.engine.n.c` @type ^`int`;
  #L293cea.  v2:= v4.`com.bumptech.glide.load.engine.n.c` @type ^`int`;
  #L293cee.  if v0 != v2 then goto L293d44;
  #L293cf2.  v0:= v3.`com.bumptech.glide.load.engine.n.h` @type ^`java.util.Map` @kind object;
  #L293cf6.  v2:= v4.`com.bumptech.glide.load.engine.n.h` @type ^`java.util.Map` @kind object;
  #L293cfa.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L293d00.  v0:= temp;
  #L293d02.  if v0 == 0 then goto L293d44;
  #L293d06.  v0:= v3.`com.bumptech.glide.load.engine.n.e` @type ^`java.lang.Class` @kind object;
  #L293d0a.  v2:= v4.`com.bumptech.glide.load.engine.n.e` @type ^`java.lang.Class` @kind object;
  #L293d0e.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L293d14.  v0:= temp;
  #L293d16.  if v0 == 0 then goto L293d44;
  #L293d1a.  v0:= v3.`com.bumptech.glide.load.engine.n.f` @type ^`java.lang.Class` @kind object;
  #L293d1e.  v2:= v4.`com.bumptech.glide.load.engine.n.f` @type ^`java.lang.Class` @kind object;
  #L293d22.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L293d28.  v0:= temp;
  #L293d2a.  if v0 == 0 then goto L293d44;
  #L293d2e.  v0:= v3.`com.bumptech.glide.load.engine.n.i` @type ^`com.bumptech.glide.load.h` @kind object;
  #L293d32.  v4:= v4.`com.bumptech.glide.load.engine.n.i` @type ^`com.bumptech.glide.load.h` @kind object;
  #L293d36.  call temp:= `equals`(v0, v4) @signature `Lcom/bumptech/glide/load/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L293d3c.  v4:= temp;
  #L293d3e.  if v4 == 0 then goto L293d44;
  #L293d42.  v1:= 1I;
  #L293d44.  return v1;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.engine.n` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/n;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L293d58.  v0:= v2.`com.bumptech.glide.load.engine.n.j` @type ^`int`;
  #L293d5c.  if v0 != 0 then goto L293e16;
  #L293d60.  v0:= v2.`com.bumptech.glide.load.engine.n.b` @type ^`java.lang.Object` @kind object;
  #L293d64.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L293d6a.  v0:= temp;
  #L293d6c.  v2.`com.bumptech.glide.load.engine.n.j` @type ^`int` := v0;
  #L293d70.  v0:= v2.`com.bumptech.glide.load.engine.n.j` @type ^`int`;
  #L293d74.  v0:= v0 * 31;
  #L293d78.  v1:= v2.`com.bumptech.glide.load.engine.n.g` @type ^`com.bumptech.glide.load.f` @kind object;
  #L293d7c.  call temp:= `hashCode`(v1) @signature `Lcom/bumptech/glide/load/f;.hashCode:()I` @kind interface;
  #L293d82.  v1:= temp;
  #L293d84.  v0:= v0 + v1 @kind int;
  #L293d86.  v2.`com.bumptech.glide.load.engine.n.j` @type ^`int` := v0;
  #L293d8a.  v0:= v2.`com.bumptech.glide.load.engine.n.j` @type ^`int`;
  #L293d8e.  v0:= v0 * 31;
  #L293d92.  v1:= v2.`com.bumptech.glide.load.engine.n.c` @type ^`int`;
  #L293d96.  v0:= v0 + v1 @kind int;
  #L293d98.  v2.`com.bumptech.glide.load.engine.n.j` @type ^`int` := v0;
  #L293d9c.  v0:= v2.`com.bumptech.glide.load.engine.n.j` @type ^`int`;
  #L293da0.  v0:= v0 * 31;
  #L293da4.  v1:= v2.`com.bumptech.glide.load.engine.n.d` @type ^`int`;
  #L293da8.  v0:= v0 + v1 @kind int;
  #L293daa.  v2.`com.bumptech.glide.load.engine.n.j` @type ^`int` := v0;
  #L293dae.  v0:= v2.`com.bumptech.glide.load.engine.n.j` @type ^`int`;
  #L293db2.  v0:= v0 * 31;
  #L293db6.  v1:= v2.`com.bumptech.glide.load.engine.n.h` @type ^`java.util.Map` @kind object;
  #L293dba.  call temp:= `hashCode`(v1) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L293dc0.  v1:= temp;
  #L293dc2.  v0:= v0 + v1 @kind int;
  #L293dc4.  v2.`com.bumptech.glide.load.engine.n.j` @type ^`int` := v0;
  #L293dc8.  v0:= v2.`com.bumptech.glide.load.engine.n.j` @type ^`int`;
  #L293dcc.  v0:= v0 * 31;
  #L293dd0.  v1:= v2.`com.bumptech.glide.load.engine.n.e` @type ^`java.lang.Class` @kind object;
  #L293dd4.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L293dda.  v1:= temp;
  #L293ddc.  v0:= v0 + v1 @kind int;
  #L293dde.  v2.`com.bumptech.glide.load.engine.n.j` @type ^`int` := v0;
  #L293de2.  v0:= v2.`com.bumptech.glide.load.engine.n.j` @type ^`int`;
  #L293de6.  v0:= v0 * 31;
  #L293dea.  v1:= v2.`com.bumptech.glide.load.engine.n.f` @type ^`java.lang.Class` @kind object;
  #L293dee.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L293df4.  v1:= temp;
  #L293df6.  v0:= v0 + v1 @kind int;
  #L293df8.  v2.`com.bumptech.glide.load.engine.n.j` @type ^`int` := v0;
  #L293dfc.  v0:= v2.`com.bumptech.glide.load.engine.n.j` @type ^`int`;
  #L293e00.  v0:= v0 * 31;
  #L293e04.  v1:= v2.`com.bumptech.glide.load.engine.n.i` @type ^`com.bumptech.glide.load.h` @kind object;
  #L293e08.  call temp:= `hashCode`(v1) @signature `Lcom/bumptech/glide/load/h;.hashCode:()I` @kind virtual;
  #L293e0e.  v1:= temp;
  #L293e10.  v0:= v0 + v1 @kind int;
  #L293e12.  v2.`com.bumptech.glide.load.engine.n.j` @type ^`int` := v0;
  #L293e16.  v0:= v2.`com.bumptech.glide.load.engine.n.j` @type ^`int`;
  #L293e1a.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.engine.n` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/n;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L293e2c.  v0:= new `java.lang.StringBuilder`;
  #L293e30.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L293e36.  v1:= "EngineKey{model=" @kind object;
  #L293e3a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L293e40.  v1:= v2.`com.bumptech.glide.load.engine.n.b` @type ^`java.lang.Object` @kind object;
  #L293e44.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L293e4a.  v1:= ", width=" @kind object;
  #L293e4e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L293e54.  v1:= v2.`com.bumptech.glide.load.engine.n.c` @type ^`int`;
  #L293e58.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L293e5e.  v1:= ", height=" @kind object;
  #L293e62.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L293e68.  v1:= v2.`com.bumptech.glide.load.engine.n.d` @type ^`int`;
  #L293e6c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L293e72.  v1:= ", resourceClass=" @kind object;
  #L293e76.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L293e7c.  v1:= v2.`com.bumptech.glide.load.engine.n.e` @type ^`java.lang.Class` @kind object;
  #L293e80.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L293e86.  v1:= ", transcodeClass=" @kind object;
  #L293e8a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L293e90.  v1:= v2.`com.bumptech.glide.load.engine.n.f` @type ^`java.lang.Class` @kind object;
  #L293e94.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L293e9a.  v1:= ", signature=" @kind object;
  #L293e9e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L293ea4.  v1:= v2.`com.bumptech.glide.load.engine.n.g` @type ^`com.bumptech.glide.load.f` @kind object;
  #L293ea8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L293eae.  v1:= ", hashCode=" @kind object;
  #L293eb2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L293eb8.  v1:= v2.`com.bumptech.glide.load.engine.n.j` @type ^`int`;
  #L293ebc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L293ec2.  v1:= ", transformations=" @kind object;
  #L293ec6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L293ecc.  v1:= v2.`com.bumptech.glide.load.engine.n.h` @type ^`java.util.Map` @kind object;
  #L293ed0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L293ed6.  v1:= ", options=" @kind object;
  #L293eda.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L293ee0.  v1:= v2.`com.bumptech.glide.load.engine.n.i` @type ^`com.bumptech.glide.load.h` @kind object;
  #L293ee4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L293eea.  v1:= 125I;
  #L293eee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L293ef4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L293efa.  v0:= temp @kind object;
  #L293efc.  return v0 @kind object;
}
procedure `void` `updateDiskCacheKey`(`com.bumptech.glide.load.engine.n` v0 @kind this, `java.security.MessageDigest` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/n;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @AccessFlag PUBLIC {
    temp;

  #L293f8c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L293f90.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L293f96.  throw v1;
}
