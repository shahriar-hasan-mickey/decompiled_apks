record `com.bumptech.glide.load.engine.a0.j` @kind class @AccessFlag PUBLIC {
  `com.bumptech.glide.s.g` `com.bumptech.glide.load.engine.a0.j.a` @AccessFlag PRIVATE_FINAL;
  `c.h.i.d` `com.bumptech.glide.load.engine.a0.j.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a0.j` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/a0/j;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L298e14.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L298e1a.  v0:= new `com.bumptech.glide.s.g`;
  #L298e1e.  v1:= 1000L;
  #L298e22.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/s/g;.<init>:(J)V` @kind direct;
  #L298e28.  v3.`com.bumptech.glide.load.engine.a0.j.a` @type ^`com.bumptech.glide.s.g` := v0 @kind object;
  #L298e2c.  v0:= new `com.bumptech.glide.load.engine.a0.j$a`;
  #L298e30.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/load/engine/a0/j$a;.<init>:(Lcom/bumptech/glide/load/engine/a0/j;)V` @kind direct;
  #L298e36.  v1:= 10I;
  #L298e3a.  call temp:= `threadSafe`(v1, v0) @signature `Lcom/bumptech/glide/s/l/a;.threadSafe:(ILcom/bumptech/glide/s/l/a$d;)Lc/h/i/d;` @kind static;
  #L298e40.  v0:= temp @kind object;
  #L298e42.  v3.`com.bumptech.glide.load.engine.a0.j.b` @type ^`c.h.i.d` := v0 @kind object;
  #L298e46.  return @kind void;
}
procedure `java.lang.String` `a`(`com.bumptech.glide.load.engine.a0.j` v2 @kind this, `com.bumptech.glide.load.f` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/a0/j;.a:(Lcom/bumptech/glide/load/f;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L298d34.  v0:= v2.`com.bumptech.glide.load.engine.a0.j.b` @type ^`c.h.i.d` @kind object;
  #L298d38.  call temp:= `acquire`(v0) @signature `Lc/h/i/d;.acquire:()Ljava/lang/Object;` @kind interface;
  #L298d3e.  v0:= temp @kind object;
  #L298d40.  call temp:= `checkNotNull`(v0) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L298d46.  v0:= (`com.bumptech.glide.load.engine.a0.j$b`) v0 @kind object;
  #L298d4a.  v1:= v0.`com.bumptech.glide.load.engine.a0.j$b.f` @type ^`java.security.MessageDigest` @kind object;
  #L298d4e.  call `updateDiskCacheKey`(v3, v1) @signature `Lcom/bumptech/glide/load/f;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @kind interface;
  #L298d54.  v3:= v0.`com.bumptech.glide.load.engine.a0.j$b.f` @type ^`java.security.MessageDigest` @kind object;
  #L298d58.  call temp:= `digest`(v3) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L298d5e.  v3:= temp @kind object;
  #L298d60.  call temp:= `sha256BytesToHex`(v3) @signature `Lcom/bumptech/glide/s/k;.sha256BytesToHex:([B)Ljava/lang/String;` @kind static;
  #L298d66.  v3:= temp @kind object;
  #L298d68.  v1:= v2.`com.bumptech.glide.load.engine.a0.j.b` @type ^`c.h.i.d` @kind object;
  #L298d6c.  call temp:= `release`(v1, v0) @signature `Lc/h/i/d;.release:(Ljava/lang/Object;)Z` @kind interface;
  #L298d72.  return v3 @kind object;
  #L298d74.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L298d76.  v1:= v2.`com.bumptech.glide.load.engine.a0.j.b` @type ^`c.h.i.d` @kind object;
  #L298d7a.  call temp:= `release`(v1, v0) @signature `Lc/h/i/d;.release:(Ljava/lang/Object;)Z` @kind interface;
  #L298d80.  throw v3;
  catch `java.lang.Throwable` @[L298d4a..L298d68] goto L298d74;
}
procedure `java.lang.String` `getSafeKey`(`com.bumptech.glide.load.engine.a0.j` v3 @kind this, `com.bumptech.glide.load.f` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/a0/j;.getSafeKey:(Lcom/bumptech/glide/load/f;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L298da0.  v0:= v3.`com.bumptech.glide.load.engine.a0.j.a` @type ^`com.bumptech.glide.s.g` @kind object;
  #L298da4.  @monitorenter v0
  #L298da6.  v1:= v3.`com.bumptech.glide.load.engine.a0.j.a` @type ^`com.bumptech.glide.s.g` @kind object;
  #L298daa.  call temp:= `get`(v1, v4) @signature `Lcom/bumptech/glide/s/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L298db0.  v1:= temp @kind object;
  #L298db2.  v1:= (`java.lang.String`) v1 @kind object;
  #L298db6.  @monitorexit v0
  #L298db8.  if v1 != 0 then goto L298dc4;
  #L298dbc.  call temp:= `a`(v3, v4) @signature `Lcom/bumptech/glide/load/engine/a0/j;.a:(Lcom/bumptech/glide/load/f;)Ljava/lang/String;` @kind direct;
  #L298dc2.  v1:= temp @kind object;
  #L298dc4.  v2:= v3.`com.bumptech.glide.load.engine.a0.j.a` @type ^`com.bumptech.glide.s.g` @kind object;
  #L298dc8.  @monitorenter v2
  #L298dca.  v0:= v3.`com.bumptech.glide.load.engine.a0.j.a` @type ^`com.bumptech.glide.s.g` @kind object;
  #L298dce.  call temp:= `put`(v0, v4, v1) @signature `Lcom/bumptech/glide/s/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L298dd4.  @monitorexit v2
  #L298dd6.  return v1 @kind object;
  #L298dd8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L298dda.  @monitorexit v2
  #L298ddc.  throw v4;
  #L298dde.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L298de0.  @monitorexit v0
  #L298de2.  throw v4;
  catch `java.lang.Throwable` @[L298da6..L298db8] goto L298dde;
  catch `java.lang.Throwable` @[L298dca..L298ddc] goto L298dd8;
  catch `java.lang.Throwable` @[L298de0..L298de2] goto L298dde;
}
