record `com.bumptech.glide.load.engine.z.k` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.engine.z.e` @kind interface {
  `com.bumptech.glide.load.engine.z.l` `com.bumptech.glide.load.engine.z.k.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Set` `com.bumptech.glide.load.engine.z.k.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.z.k$a` `com.bumptech.glide.load.engine.z.k.c` @AccessFlag PRIVATE_FINAL;
  `long` `com.bumptech.glide.load.engine.z.k.d` @AccessFlag PRIVATE;
  `long` `com.bumptech.glide.load.engine.z.k.e` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.z.k.f` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.z.k.g` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.z.k.h` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.z.k.i` @AccessFlag PRIVATE;
}
global `android.graphics.Bitmap$Config` `@@com.bumptech.glide.load.engine.z.k.j` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/engine/z/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L297318.  v0:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L29731c.  `@@com.bumptech.glide.load.engine.z.k.j` @type ^`android.graphics.Bitmap$Config` := v0 @kind object;
  #L297320.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.z.k` v2 @kind this, `long` v3 ) @signature `Lcom/bumptech/glide/load/engine/z/k;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L297334.  call temp:= `e`() @signature `Lcom/bumptech/glide/load/engine/z/k;.e:()Lcom/bumptech/glide/load/engine/z/l;` @kind static;
  #L29733a.  v0:= temp @kind object;
  #L29733c.  call temp:= `d`() @signature `Lcom/bumptech/glide/load/engine/z/k;.d:()Ljava/util/Set;` @kind static;
  #L297342.  v1:= temp @kind object;
  #L297344.  call `<init>`(v2, v3, v0, v1) @signature `Lcom/bumptech/glide/load/engine/z/k;.<init>:(JLcom/bumptech/glide/load/engine/z/l;Ljava/util/Set;)V` @kind direct;
  #L29734a.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.z.k` v0 @kind this, `long` v1 , `com.bumptech.glide.load.engine.z.l` v3 @kind object, `java.util.Set` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/k;.<init>:(JLcom/bumptech/glide/load/engine/z/l;Ljava/util/Set;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L29735c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L297362.  v0.`com.bumptech.glide.load.engine.z.k.d` @type ^`long` := v1 @kind wide;
  #L297366.  v0.`com.bumptech.glide.load.engine.z.k.a` @type ^`com.bumptech.glide.load.engine.z.l` := v3 @kind object;
  #L29736a.  v0.`com.bumptech.glide.load.engine.z.k.b` @type ^`java.util.Set` := v4 @kind object;
  #L29736e.  v1:= new `com.bumptech.glide.load.engine.z.k$b`;
  #L297372.  call `<init>`(v1) @signature `Lcom/bumptech/glide/load/engine/z/k$b;.<init>:()V` @kind direct;
  #L297378.  v0.`com.bumptech.glide.load.engine.z.k.c` @type ^`com.bumptech.glide.load.engine.z.k$a` := v1 @kind object;
  #L29737c.  return @kind void;
}
procedure `android.graphics.Bitmap` `a`(`int` v0 , `int` v1 , `android.graphics.Bitmap$Config` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/k;.a:(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L2970c8.  if v2 == 0 then goto L2970ce;
  #L2970cc.  goto L2970d2;
  #L2970ce.  v2:= `@@com.bumptech.glide.load.engine.z.k.j` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L2970d2.  call temp:= `createBitmap`(v0, v1, v2) @signature `Landroid/graphics/Bitmap;.createBitmap:(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;` @kind static;
  #L2970d8.  v0:= temp @kind object;
  #L2970da.  return v0 @kind object;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.z.k` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/z/k;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L297428.  v0:= "LruBitmapPool" @kind object;
  #L29742c.  v1:= 2I;
  #L29742e.  call temp:= `isLoggable`(v0, v1) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L297434.  v0:= temp;
  #L297436.  if v0 == 0 then goto L297440;
  #L29743a.  call `b`(v2) @signature `Lcom/bumptech/glide/load/engine/z/k;.b:()V` @kind direct;
  #L297440.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.z.k` v5 @kind this, `long` v6 ) @signature `Lcom/bumptech/glide/load/engine/z/k;.a:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2977d0.  @monitorenter v5
  #L2977d2.  v0:= v5.`com.bumptech.glide.load.engine.z.k.e` @type ^`long` @kind wide;
  #L2977d6.  v2:= lcmp(v0, v6);
  #L2977da.  if v2 <= 0 then goto L2978a6;
  #L2977de.  v0:= v5.`com.bumptech.glide.load.engine.z.k.a` @type ^`com.bumptech.glide.load.engine.z.l` @kind object;
  #L2977e2.  call temp:= `removeLast`(v0) @signature `Lcom/bumptech/glide/load/engine/z/l;.removeLast:()Landroid/graphics/Bitmap;` @kind interface;
  #L2977e8.  v0:= temp @kind object;
  #L2977ea.  if v0 != 0 then goto L297820;
  #L2977ee.  v6:= "LruBitmapPool" @kind object;
  #L2977f2.  v7:= 5I;
  #L2977f4.  call temp:= `isLoggable`(v6, v7) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2977fa.  v6:= temp;
  #L2977fc.  if v6 == 0 then goto L297814;
  #L297800.  v6:= "LruBitmapPool" @kind object;
  #L297804.  v7:= "Size mismatch, resetting" @kind object;
  #L297808.  call temp:= `w`(v6, v7) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L29780e.  call `b`(v5) @signature `Lcom/bumptech/glide/load/engine/z/k;.b:()V` @kind direct;
  #L297814.  v6:= 0L;
  #L297818.  v5.`com.bumptech.glide.load.engine.z.k.e` @type ^`long` := v6 @kind wide;
  #L29781c.  @monitorexit v5
  #L29781e.  return @kind void;
  #L297820.  v1:= v5.`com.bumptech.glide.load.engine.z.k.c` @type ^`com.bumptech.glide.load.engine.z.k$a` @kind object;
  #L297824.  call `remove`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/z/k$a;.remove:(Landroid/graphics/Bitmap;)V` @kind interface;
  #L29782a.  v1:= v5.`com.bumptech.glide.load.engine.z.k.e` @type ^`long` @kind wide;
  #L29782e.  v3:= v5.`com.bumptech.glide.load.engine.z.k.a` @type ^`com.bumptech.glide.load.engine.z.l` @kind object;
  #L297832.  call temp:= `getSize`(v3, v0) @signature `Lcom/bumptech/glide/load/engine/z/l;.getSize:(Landroid/graphics/Bitmap;)I` @kind interface;
  #L297838.  v3:= temp;
  #L29783a.  v3:= (`long`) v3 @kind i2l;
  #L29783c.  v1:= v1 - v3 @kind long;
  #L29783e.  v5.`com.bumptech.glide.load.engine.z.k.e` @type ^`long` := v1 @kind wide;
  #L297842.  v1:= v5.`com.bumptech.glide.load.engine.z.k.i` @type ^`int`;
  #L297846.  v1:= v1 + 1;
  #L29784a.  v5.`com.bumptech.glide.load.engine.z.k.i` @type ^`int` := v1;
  #L29784e.  v1:= "LruBitmapPool" @kind object;
  #L297852.  v2:= 3I;
  #L297854.  call temp:= `isLoggable`(v1, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L29785a.  v1:= temp;
  #L29785c.  if v1 == 0 then goto L297898;
  #L297860.  v1:= "LruBitmapPool" @kind object;
  #L297864.  v2:= new `java.lang.StringBuilder`;
  #L297868.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L29786e.  v3:= "Evicting bitmap=" @kind object;
  #L297872.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L297878.  v3:= v5.`com.bumptech.glide.load.engine.z.k.a` @type ^`com.bumptech.glide.load.engine.z.l` @kind object;
  #L29787c.  call temp:= `logBitmap`(v3, v0) @signature `Lcom/bumptech/glide/load/engine/z/l;.logBitmap:(Landroid/graphics/Bitmap;)Ljava/lang/String;` @kind interface;
  #L297882.  v3:= temp @kind object;
  #L297884.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29788a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L297890.  v2:= temp @kind object;
  #L297892.  call temp:= `d`(v1, v2) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L297898.  call `a`(v5) @signature `Lcom/bumptech/glide/load/engine/z/k;.a:()V` @kind direct;
  #L29789e.  call `recycle`(v0) @signature `Landroid/graphics/Bitmap;.recycle:()V` @kind virtual;
  #L2978a4.  goto L2977d2;
  #L2978a6.  @monitorexit v5
  #L2978a8.  return @kind void;
  #L2978aa.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2978ac.  @monitorexit v5
  #L2978ae.  throw v6;
  catch `java.lang.Throwable` @[L2977d2..L29781c] goto L2978aa;
  catch `java.lang.Throwable` @[L297820..L2978a4] goto L2978aa;
}
procedure `void` `a`(`android.graphics.Bitmap$Config` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/k;.a:(Landroid/graphics/Bitmap$Config;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L297390.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L297394.  v1:= 26I;
  #L297398.  if v0 >= v1 then goto L29739e;
  #L29739c.  return @kind void;
  #L29739e.  v0:= `@@android.graphics.Bitmap$Config.HARDWARE` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L2973a2.  if v3 == v0 then goto L2973a8;
  #L2973a6.  return @kind void;
  #L2973a8.  v0:= new `java.lang.IllegalArgumentException`;
  #L2973ac.  v1:= new `java.lang.StringBuilder`;
  #L2973b0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2973b6.  v2:= "Cannot create a mutable Bitmap with config: " @kind object;
  #L2973ba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2973c0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2973c6.  v3:= ". Consider setting Downsampler#ALLOW_HARDWARE_CONFIG to false in your RequestOptions and/or in GlideBuilder.setDefaultRequestOptions" @kind object;
  #L2973ca.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2973d0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2973d6.  v3:= temp @kind object;
  #L2973d8.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2973de.  throw v0;
}
procedure `void` `a`(`android.graphics.Bitmap` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/k;.a:(Landroid/graphics/Bitmap;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L29752c.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L297530.  v1:= 19I;
  #L297534.  if v0 < v1 then goto L297540;
  #L297538.  v0:= 1I;
  #L29753a.  call `setPremultiplied`(v2, v0) @signature `Landroid/graphics/Bitmap;.setPremultiplied:(Z)V` @kind virtual;
  #L297540.  return @kind void;
}
procedure `android.graphics.Bitmap` `b`(`com.bumptech.glide.load.engine.z.k` v5 @kind this, `int` v6 , `int` v7 , `android.graphics.Bitmap$Config` v8 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/k;.b:(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L297144.  @monitorenter v5
  #L297146.  call `a`(v8) @signature `Lcom/bumptech/glide/load/engine/z/k;.a:(Landroid/graphics/Bitmap$Config;)V` @kind static;
  #L29714c.  v0:= v5.`com.bumptech.glide.load.engine.z.k.a` @type ^`com.bumptech.glide.load.engine.z.l` @kind object;
  #L297150.  if v8 == 0 then goto L297158;
  #L297154.  v1:= v8 @kind object;
  #L297156.  goto L29715c;
  #L297158.  v1:= `@@com.bumptech.glide.load.engine.z.k.j` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L29715c.  call temp:= `get`(v0, v6, v7, v1) @signature `Lcom/bumptech/glide/load/engine/z/l;.get:(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;` @kind interface;
  #L297162.  v0:= temp @kind object;
  #L297164.  if v0 != 0 then goto L2971c0;
  #L297168.  v1:= "LruBitmapPool" @kind object;
  #L29716c.  v2:= 3I;
  #L29716e.  call temp:= `isLoggable`(v1, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L297174.  v1:= temp;
  #L297176.  if v1 == 0 then goto L2971b2;
  #L29717a.  v1:= "LruBitmapPool" @kind object;
  #L29717e.  v2:= new `java.lang.StringBuilder`;
  #L297182.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L297188.  v3:= "Missing bitmap=" @kind object;
  #L29718c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L297192.  v3:= v5.`com.bumptech.glide.load.engine.z.k.a` @type ^`com.bumptech.glide.load.engine.z.l` @kind object;
  #L297196.  call temp:= `logBitmap`(v3, v6, v7, v8) @signature `Lcom/bumptech/glide/load/engine/z/l;.logBitmap:(IILandroid/graphics/Bitmap$Config;)Ljava/lang/String;` @kind interface;
  #L29719c.  v3:= temp @kind object;
  #L29719e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2971a4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2971aa.  v2:= temp @kind object;
  #L2971ac.  call temp:= `d`(v1, v2) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2971b2.  v1:= v5.`com.bumptech.glide.load.engine.z.k.g` @type ^`int`;
  #L2971b6.  v1:= v1 + 1;
  #L2971ba.  v5.`com.bumptech.glide.load.engine.z.k.g` @type ^`int` := v1;
  #L2971be.  goto L2971f4;
  #L2971c0.  v1:= v5.`com.bumptech.glide.load.engine.z.k.f` @type ^`int`;
  #L2971c4.  v1:= v1 + 1;
  #L2971c8.  v5.`com.bumptech.glide.load.engine.z.k.f` @type ^`int` := v1;
  #L2971cc.  v1:= v5.`com.bumptech.glide.load.engine.z.k.e` @type ^`long` @kind wide;
  #L2971d0.  v3:= v5.`com.bumptech.glide.load.engine.z.k.a` @type ^`com.bumptech.glide.load.engine.z.l` @kind object;
  #L2971d4.  call temp:= `getSize`(v3, v0) @signature `Lcom/bumptech/glide/load/engine/z/l;.getSize:(Landroid/graphics/Bitmap;)I` @kind interface;
  #L2971da.  v3:= temp;
  #L2971dc.  v3:= (`long`) v3 @kind i2l;
  #L2971de.  v1:= v1 - v3 @kind long;
  #L2971e0.  v5.`com.bumptech.glide.load.engine.z.k.e` @type ^`long` := v1 @kind wide;
  #L2971e4.  v1:= v5.`com.bumptech.glide.load.engine.z.k.c` @type ^`com.bumptech.glide.load.engine.z.k$a` @kind object;
  #L2971e8.  call `remove`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/z/k$a;.remove:(Landroid/graphics/Bitmap;)V` @kind interface;
  #L2971ee.  call `b`(v0) @signature `Lcom/bumptech/glide/load/engine/z/k;.b:(Landroid/graphics/Bitmap;)V` @kind static;
  #L2971f4.  v1:= "LruBitmapPool" @kind object;
  #L2971f8.  v2:= 2I;
  #L2971fa.  call temp:= `isLoggable`(v1, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L297200.  v1:= temp;
  #L297202.  if v1 == 0 then goto L29723e;
  #L297206.  v1:= "LruBitmapPool" @kind object;
  #L29720a.  v2:= new `java.lang.StringBuilder`;
  #L29720e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L297214.  v3:= "Get bitmap=" @kind object;
  #L297218.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29721e.  v3:= v5.`com.bumptech.glide.load.engine.z.k.a` @type ^`com.bumptech.glide.load.engine.z.l` @kind object;
  #L297222.  call temp:= `logBitmap`(v3, v6, v7, v8) @signature `Lcom/bumptech/glide/load/engine/z/l;.logBitmap:(IILandroid/graphics/Bitmap$Config;)Ljava/lang/String;` @kind interface;
  #L297228.  v6:= temp @kind object;
  #L29722a.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L297230.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L297236.  v6:= temp @kind object;
  #L297238.  call temp:= `v`(v1, v6) @signature `Landroid/util/Log;.v:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L29723e.  call `a`(v5) @signature `Lcom/bumptech/glide/load/engine/z/k;.a:()V` @kind direct;
  #L297244.  @monitorexit v5
  #L297246.  return v0 @kind object;
  #L297248.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29724a.  @monitorexit v5
  #L29724c.  throw v6;
  catch `java.lang.Throwable` @[L297146..L297244] goto L297248;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.z.k` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/z/k;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L297454.  v0:= new `java.lang.StringBuilder`;
  #L297458.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L29745e.  v1:= "Hits=" @kind object;
  #L297462.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L297468.  v1:= v3.`com.bumptech.glide.load.engine.z.k.f` @type ^`int`;
  #L29746c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L297472.  v1:= ", misses=" @kind object;
  #L297476.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29747c.  v1:= v3.`com.bumptech.glide.load.engine.z.k.g` @type ^`int`;
  #L297480.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L297486.  v1:= ", puts=" @kind object;
  #L29748a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L297490.  v1:= v3.`com.bumptech.glide.load.engine.z.k.h` @type ^`int`;
  #L297494.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L29749a.  v1:= ", evictions=" @kind object;
  #L29749e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2974a4.  v1:= v3.`com.bumptech.glide.load.engine.z.k.i` @type ^`int`;
  #L2974a8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2974ae.  v1:= ", currentSize=" @kind object;
  #L2974b2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2974b8.  v1:= v3.`com.bumptech.glide.load.engine.z.k.e` @type ^`long` @kind wide;
  #L2974bc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2974c2.  v1:= ", maxSize=" @kind object;
  #L2974c6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2974cc.  v1:= v3.`com.bumptech.glide.load.engine.z.k.d` @type ^`long` @kind wide;
  #L2974d0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2974d6.  v1:= "\nStrategy=" @kind object;
  #L2974da.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2974e0.  v1:= v3.`com.bumptech.glide.load.engine.z.k.a` @type ^`com.bumptech.glide.load.engine.z.l` @kind object;
  #L2974e4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2974ea.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2974f0.  v0:= temp @kind object;
  #L2974f2.  v1:= "LruBitmapPool" @kind object;
  #L2974f6.  call temp:= `v`(v1, v0) @signature `Landroid/util/Log;.v:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2974fc.  return @kind void;
}
procedure `void` `b`(`android.graphics.Bitmap` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/k;.b:(Landroid/graphics/Bitmap;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L297554.  v0:= 1I;
  #L297556.  call `setHasAlpha`(v1, v0) @signature `Landroid/graphics/Bitmap;.setHasAlpha:(Z)V` @kind virtual;
  #L29755c.  call `a`(v1) @signature `Lcom/bumptech/glide/load/engine/z/k;.a:(Landroid/graphics/Bitmap;)V` @kind static;
  #L297562.  return @kind void;
}
procedure `void` `c`(`com.bumptech.glide.load.engine.z.k` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/z/k;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L297510.  v0:= v2.`com.bumptech.glide.load.engine.z.k.d` @type ^`long` @kind wide;
  #L297514.  call `a`(v2, v0) @signature `Lcom/bumptech/glide/load/engine/z/k;.a:(J)V` @kind direct;
  #L29751a.  return @kind void;
}
procedure `java.util.Set` `d`() @signature `Lcom/bumptech/glide/load/engine/z/k;.d:()Ljava/util/Set;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2972a0.  v0:= new `java.util.HashSet`;
  #L2972a4.  call temp:= `values`() @signature `Landroid/graphics/Bitmap$Config;.values:()[Landroid/graphics/Bitmap$Config;` @kind static;
  #L2972aa.  v1:= temp @kind object;
  #L2972ac.  call temp:= `asList`(v1) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2972b2.  v1:= temp @kind object;
  #L2972b4.  call `<init>`(v0, v1) @signature `Ljava/util/HashSet;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L2972ba.  v1:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2972be.  v2:= 19I;
  #L2972c2.  if v1 < v2 then goto L2972ce;
  #L2972c6.  v1:= 0I;
  #L2972c8.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2972ce.  v1:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2972d2.  v2:= 26I;
  #L2972d6.  if v1 < v2 then goto L2972e4;
  #L2972da.  v1:= `@@android.graphics.Bitmap$Config.HARDWARE` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L2972de.  call temp:= `remove`(v0, v1) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2972e4.  call temp:= `unmodifiableSet`(v0) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L2972ea.  v0:= temp @kind object;
  #L2972ec.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.z.l` `e`() @signature `Lcom/bumptech/glide/load/engine/z/k;.e:()Lcom/bumptech/glide/load/engine/z/l;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L29726c.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L297270.  v1:= 19I;
  #L297274.  if v0 < v1 then goto L297284;
  #L297278.  v0:= new `com.bumptech.glide.load.engine.z.n`;
  #L29727c.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/z/n;.<init>:()V` @kind direct;
  #L297282.  goto L29728e;
  #L297284.  v0:= new `com.bumptech.glide.load.engine.z.c`;
  #L297288.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/z/c;.<init>:()V` @kind direct;
  #L29728e.  return v0 @kind object;
}
procedure `void` `clearMemory`(`com.bumptech.glide.load.engine.z.k` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/z/k;.clearMemory:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2973f0.  v0:= "LruBitmapPool" @kind object;
  #L2973f4.  v1:= 3I;
  #L2973f6.  call temp:= `isLoggable`(v0, v1) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2973fc.  v1:= temp;
  #L2973fe.  if v1 == 0 then goto L29740c;
  #L297402.  v1:= "clearMemory" @kind object;
  #L297406.  call temp:= `d`(v0, v1) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L29740c.  v0:= 0L;
  #L297410.  call `a`(v2, v0) @signature `Lcom/bumptech/glide/load/engine/z/k;.a:(J)V` @kind direct;
  #L297416.  return @kind void;
}
procedure `android.graphics.Bitmap` `get`(`com.bumptech.glide.load.engine.z.k` v1 @kind this, `int` v2 , `int` v3 , `android.graphics.Bitmap$Config` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/k;.get:(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2970ec.  call temp:= `b`(v1, v2, v3, v4) @signature `Lcom/bumptech/glide/load/engine/z/k;.b:(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;` @kind direct;
  #L2970f2.  v0:= temp @kind object;
  #L2970f4.  if v0 == 0 then goto L297102;
  #L2970f8.  v2:= 0I;
  #L2970fa.  call `eraseColor`(v0, v2) @signature `Landroid/graphics/Bitmap;.eraseColor:(I)V` @kind virtual;
  #L297100.  goto L29710a;
  #L297102.  call temp:= `a`(v2, v3, v4) @signature `Lcom/bumptech/glide/load/engine/z/k;.a:(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;` @kind static;
  #L297108.  v0:= temp @kind object;
  #L29710a.  return v0 @kind object;
}
procedure `android.graphics.Bitmap` `getDirty`(`com.bumptech.glide.load.engine.z.k` v1 @kind this, `int` v2 , `int` v3 , `android.graphics.Bitmap$Config` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/k;.getDirty:(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29711c.  call temp:= `b`(v1, v2, v3, v4) @signature `Lcom/bumptech/glide/load/engine/z/k;.b:(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;` @kind direct;
  #L297122.  v0:= temp @kind object;
  #L297124.  if v0 != 0 then goto L297130;
  #L297128.  call temp:= `a`(v2, v3, v4) @signature `Lcom/bumptech/glide/load/engine/z/k;.a:(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;` @kind static;
  #L29712e.  v0:= temp @kind object;
  #L297130.  return v0 @kind object;
}
procedure `long` `getMaxSize`(`com.bumptech.glide.load.engine.z.k` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/z/k;.getMaxSize:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L297300.  v0:= v2.`com.bumptech.glide.load.engine.z.k.d` @type ^`long` @kind wide;
  #L297304.  return v0 @kind wide;
}
procedure `void` `put`(`com.bumptech.glide.load.engine.z.k` v6 @kind this, `android.graphics.Bitmap` v7 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/k;.put:(Landroid/graphics/Bitmap;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L297574.  @monitorenter v6
  #L297576.  if v7 == 0 then goto L2976fa;
  #L29757a.  call temp:= `isRecycled`(v7) @signature `Landroid/graphics/Bitmap;.isRecycled:()Z` @kind virtual;
  #L297580.  v0:= temp;
  #L297582.  if v0 != 0 then goto L2976e6;
  #L297586.  call temp:= `isMutable`(v7) @signature `Landroid/graphics/Bitmap;.isMutable:()Z` @kind virtual;
  #L29758c.  v0:= temp;
  #L29758e.  v1:= 2I;
  #L297590.  if v0 == 0 then goto L297658;
  #L297594.  v0:= v6.`com.bumptech.glide.load.engine.z.k.a` @type ^`com.bumptech.glide.load.engine.z.l` @kind object;
  #L297598.  call temp:= `getSize`(v0, v7) @signature `Lcom/bumptech/glide/load/engine/z/l;.getSize:(Landroid/graphics/Bitmap;)I` @kind interface;
  #L29759e.  v0:= temp;
  #L2975a0.  v2:= (`long`) v0 @kind i2l;
  #L2975a2.  v4:= v6.`com.bumptech.glide.load.engine.z.k.d` @type ^`long` @kind wide;
  #L2975a6.  v0:= lcmp(v2, v4);
  #L2975aa.  if v0 > 0 then goto L297658;
  #L2975ae.  v0:= v6.`com.bumptech.glide.load.engine.z.k.b` @type ^`java.util.Set` @kind object;
  #L2975b2.  call temp:= `getConfig`(v7) @signature `Landroid/graphics/Bitmap;.getConfig:()Landroid/graphics/Bitmap$Config;` @kind virtual;
  #L2975b8.  v2:= temp @kind object;
  #L2975ba.  call temp:= `contains`(v0, v2) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2975c0.  v0:= temp;
  #L2975c2.  if v0 != 0 then goto L2975c8;
  #L2975c6.  goto L297658;
  #L2975c8.  v0:= v6.`com.bumptech.glide.load.engine.z.k.a` @type ^`com.bumptech.glide.load.engine.z.l` @kind object;
  #L2975cc.  call temp:= `getSize`(v0, v7) @signature `Lcom/bumptech/glide/load/engine/z/l;.getSize:(Landroid/graphics/Bitmap;)I` @kind interface;
  #L2975d2.  v0:= temp;
  #L2975d4.  v2:= v6.`com.bumptech.glide.load.engine.z.k.a` @type ^`com.bumptech.glide.load.engine.z.l` @kind object;
  #L2975d8.  call `put`(v2, v7) @signature `Lcom/bumptech/glide/load/engine/z/l;.put:(Landroid/graphics/Bitmap;)V` @kind interface;
  #L2975de.  v2:= v6.`com.bumptech.glide.load.engine.z.k.c` @type ^`com.bumptech.glide.load.engine.z.k$a` @kind object;
  #L2975e2.  call `add`(v2, v7) @signature `Lcom/bumptech/glide/load/engine/z/k$a;.add:(Landroid/graphics/Bitmap;)V` @kind interface;
  #L2975e8.  v2:= v6.`com.bumptech.glide.load.engine.z.k.h` @type ^`int`;
  #L2975ec.  v2:= v2 + 1;
  #L2975f0.  v6.`com.bumptech.glide.load.engine.z.k.h` @type ^`int` := v2;
  #L2975f4.  v2:= v6.`com.bumptech.glide.load.engine.z.k.e` @type ^`long` @kind wide;
  #L2975f8.  v4:= (`long`) v0 @kind i2l;
  #L2975fa.  v2:= v2 + v4 @kind long;
  #L2975fc.  v6.`com.bumptech.glide.load.engine.z.k.e` @type ^`long` := v2 @kind wide;
  #L297600.  v0:= "LruBitmapPool" @kind object;
  #L297604.  call temp:= `isLoggable`(v0, v1) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L29760a.  v0:= temp;
  #L29760c.  if v0 == 0 then goto L297648;
  #L297610.  v0:= "LruBitmapPool" @kind object;
  #L297614.  v1:= new `java.lang.StringBuilder`;
  #L297618.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L29761e.  v2:= "Put bitmap in pool=" @kind object;
  #L297622.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L297628.  v2:= v6.`com.bumptech.glide.load.engine.z.k.a` @type ^`com.bumptech.glide.load.engine.z.l` @kind object;
  #L29762c.  call temp:= `logBitmap`(v2, v7) @signature `Lcom/bumptech/glide/load/engine/z/l;.logBitmap:(Landroid/graphics/Bitmap;)Ljava/lang/String;` @kind interface;
  #L297632.  v7:= temp @kind object;
  #L297634.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29763a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L297640.  v7:= temp @kind object;
  #L297642.  call temp:= `v`(v0, v7) @signature `Landroid/util/Log;.v:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L297648.  call `a`(v6) @signature `Lcom/bumptech/glide/load/engine/z/k;.a:()V` @kind direct;
  #L29764e.  call `c`(v6) @signature `Lcom/bumptech/glide/load/engine/z/k;.c:()V` @kind direct;
  #L297654.  @monitorexit v6
  #L297656.  return @kind void;
  #L297658.  v0:= "LruBitmapPool" @kind object;
  #L29765c.  call temp:= `isLoggable`(v0, v1) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L297662.  v0:= temp;
  #L297664.  if v0 == 0 then goto L2976dc;
  #L297668.  v0:= "LruBitmapPool" @kind object;
  #L29766c.  v1:= new `java.lang.StringBuilder`;
  #L297670.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L297676.  v2:= "Reject bitmap from pool, bitmap: " @kind object;
  #L29767a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L297680.  v2:= v6.`com.bumptech.glide.load.engine.z.k.a` @type ^`com.bumptech.glide.load.engine.z.l` @kind object;
  #L297684.  call temp:= `logBitmap`(v2, v7) @signature `Lcom/bumptech/glide/load/engine/z/l;.logBitmap:(Landroid/graphics/Bitmap;)Ljava/lang/String;` @kind interface;
  #L29768a.  v2:= temp @kind object;
  #L29768c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L297692.  v2:= ", is mutable: " @kind object;
  #L297696.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29769c.  call temp:= `isMutable`(v7) @signature `Landroid/graphics/Bitmap;.isMutable:()Z` @kind virtual;
  #L2976a2.  v2:= temp;
  #L2976a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L2976aa.  v2:= ", is allowed config: " @kind object;
  #L2976ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2976b4.  v2:= v6.`com.bumptech.glide.load.engine.z.k.b` @type ^`java.util.Set` @kind object;
  #L2976b8.  call temp:= `getConfig`(v7) @signature `Landroid/graphics/Bitmap;.getConfig:()Landroid/graphics/Bitmap$Config;` @kind virtual;
  #L2976be.  v3:= temp @kind object;
  #L2976c0.  call temp:= `contains`(v2, v3) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2976c6.  v2:= temp;
  #L2976c8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L2976ce.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2976d4.  v1:= temp @kind object;
  #L2976d6.  call temp:= `v`(v0, v1) @signature `Landroid/util/Log;.v:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2976dc.  call `recycle`(v7) @signature `Landroid/graphics/Bitmap;.recycle:()V` @kind virtual;
  #L2976e2.  @monitorexit v6
  #L2976e4.  return @kind void;
  #L2976e6.  v7:= new `java.lang.IllegalStateException`;
  #L2976ea.  v0:= "Cannot pool recycled bitmap" @kind object;
  #L2976ee.  call `<init>`(v7, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2976f4.  throw v7;
  #L2976f6.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2976f8.  goto L29770a;
  #L2976fa.  v7:= new `java.lang.NullPointerException`;
  #L2976fe.  v0:= "Bitmap must not be null" @kind object;
  #L297702.  call `<init>`(v7, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L297708.  throw v7;
  #L29770a.  @monitorexit v6
  #L29770c.  throw v7;
  catch `java.lang.Throwable` @[L29757a..L297654] goto L2976f6;
  catch `java.lang.Throwable` @[L297658..L2976e2] goto L2976f6;
  catch `java.lang.Throwable` @[L2976e6..L29770a] goto L2976f6;
}
procedure `void` `trimMemory`(`com.bumptech.glide.load.engine.z.k` v4 @kind this, `int` v5 ) @signature `Lcom/bumptech/glide/load/engine/z/k;.trimMemory:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L29773c.  v0:= "LruBitmapPool" @kind object;
  #L297740.  v1:= 3I;
  #L297742.  call temp:= `isLoggable`(v0, v1) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L297748.  v1:= temp;
  #L29774a.  if v1 == 0 then goto L297776;
  #L29774e.  v1:= new `java.lang.StringBuilder`;
  #L297752.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L297758.  v2:= "trimMemory, level=" @kind object;
  #L29775c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L297762.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L297768.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L29776e.  v1:= temp @kind object;
  #L297770.  call temp:= `d`(v0, v1) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L297776.  v0:= 40I;
  #L29777a.  if v5 >= v0 then goto L2977b6;
  #L29777e.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L297782.  v1:= 23I;
  #L297786.  v2:= 20I;
  #L29778a.  if v0 < v1 then goto L297794;
  #L29778e.  if v5 < v2 then goto L297794;
  #L297792.  goto L2977b6;
  #L297794.  if v5 >= v2 then goto L2977a0;
  #L297798.  v0:= 15I;
  #L29779c.  if v5 != v0 then goto L2977bc;
  #L2977a0.  call temp:= `getMaxSize`(v4) @signature `Lcom/bumptech/glide/load/engine/z/k;.getMaxSize:()J` @kind virtual;
  #L2977a6.  v0:= temp @kind wide;
  #L2977a8.  v2:= 2L;
  #L2977ac.  v0:= v0 / v2 @kind long;
  #L2977ae.  call `a`(v4, v0) @signature `Lcom/bumptech/glide/load/engine/z/k;.a:(J)V` @kind direct;
  #L2977b4.  goto L2977bc;
  #L2977b6.  call `clearMemory`(v4) @signature `Lcom/bumptech/glide/load/engine/z/k;.clearMemory:()V` @kind virtual;
  #L2977bc.  return @kind void;
}
