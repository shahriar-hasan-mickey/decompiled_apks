record `com.bumptech.glide.load.engine.b0.a$a` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `com.bumptech.glide.load.engine.b0.a$a.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.b0.a$a.b` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.b0.a$a.c` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.b0.a$c` `com.bumptech.glide.load.engine.b0.a$a.d` @AccessFlag PRIVATE;
  `java.lang.String` `com.bumptech.glide.load.engine.b0.a$a.e` @AccessFlag PRIVATE;
  `long` `com.bumptech.glide.load.engine.b0.a$a.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.b0.a$a` v1 @kind this, `boolean` v2 ) @signature `Lcom/bumptech/glide/load/engine/b0/a$a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L298f40.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L298f46.  v0:= `@@com.bumptech.glide.load.engine.b0.a$c.b` @type ^`com.bumptech.glide.load.engine.b0.a$c` @kind object;
  #L298f4a.  v1.`com.bumptech.glide.load.engine.b0.a$a.d` @type ^`com.bumptech.glide.load.engine.b0.a$c` := v0 @kind object;
  #L298f4e.  v1.`com.bumptech.glide.load.engine.b0.a$a.a` @type ^`boolean` := v2 @kind boolean;
  #L298f52.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.b0.a` `build`(`com.bumptech.glide.load.engine.b0.a$a` v11 @kind this) @signature `Lcom/bumptech/glide/load/engine/b0/a$a;.build:()Lcom/bumptech/glide/load/engine/b0/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L298e58.  v0:= v11.`com.bumptech.glide.load.engine.b0.a$a.e` @type ^`java.lang.String` @kind object;
  #L298e5c.  call temp:= `isEmpty`(v0) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L298e62.  v0:= temp;
  #L298e64.  if v0 != 0 then goto L298ec8;
  #L298e68.  v0:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L298e6c.  v2:= v11.`com.bumptech.glide.load.engine.b0.a$a.b` @type ^`int`;
  #L298e70.  v3:= v11.`com.bumptech.glide.load.engine.b0.a$a.c` @type ^`int`;
  #L298e74.  v4:= v11.`com.bumptech.glide.load.engine.b0.a$a.f` @type ^`long` @kind wide;
  #L298e78.  v6:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L298e7c.  v7:= new `java.util.concurrent.PriorityBlockingQueue`;
  #L298e80.  call `<init>`(v7) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.<init>:()V` @kind direct;
  #L298e86.  v8:= new `com.bumptech.glide.load.engine.b0.a$b`;
  #L298e8a.  v1:= v11.`com.bumptech.glide.load.engine.b0.a$a.e` @type ^`java.lang.String` @kind object;
  #L298e8e.  v9:= v11.`com.bumptech.glide.load.engine.b0.a$a.d` @type ^`com.bumptech.glide.load.engine.b0.a$c` @kind object;
  #L298e92.  v10:= v11.`com.bumptech.glide.load.engine.b0.a$a.a` @type ^`boolean` @kind boolean;
  #L298e96.  call `<init>`(v8, v1, v9, v10) @signature `Lcom/bumptech/glide/load/engine/b0/a$b;.<init>:(Ljava/lang/String;Lcom/bumptech/glide/load/engine/b0/a$c;Z)V` @kind direct;
  #L298e9c.  v1:= v0 @kind object;
  #L298e9e.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L298ea4.  v1:= v11.`com.bumptech.glide.load.engine.b0.a$a.f` @type ^`long` @kind wide;
  #L298ea8.  v3:= 0L;
  #L298eac.  v5:= lcmp(v1, v3);
  #L298eb0.  if v5 == 0 then goto L298ebc;
  #L298eb4.  v1:= 1I;
  #L298eb6.  call `allowCoreThreadTimeOut`(v0, v1) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.allowCoreThreadTimeOut:(Z)V` @kind virtual;
  #L298ebc.  v1:= new `com.bumptech.glide.load.engine.b0.a`;
  #L298ec0.  call `<init>`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/b0/a;.<init>:(Ljava/util/concurrent/ExecutorService;)V` @kind direct;
  #L298ec6.  return v1 @kind object;
  #L298ec8.  v0:= new `java.lang.IllegalArgumentException`;
  #L298ecc.  v1:= new `java.lang.StringBuilder`;
  #L298ed0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L298ed6.  v2:= "Name must be non-null and non-empty, but given: " @kind object;
  #L298eda.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L298ee0.  v2:= v11.`com.bumptech.glide.load.engine.b0.a$a.e` @type ^`java.lang.String` @kind object;
  #L298ee4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L298eea.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L298ef0.  v1:= temp @kind object;
  #L298ef2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L298ef8.  throw v0;
}
procedure `com.bumptech.glide.load.engine.b0.a$a` `setName`(`com.bumptech.glide.load.engine.b0.a$a` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/b0/a$a;.setName:(Ljava/lang/String;)Lcom/bumptech/glide/load/engine/b0/a$a;` @AccessFlag PUBLIC {
    temp;

  #L298f0c.  v0.`com.bumptech.glide.load.engine.b0.a$a.e` @type ^`java.lang.String` := v1 @kind object;
  #L298f10.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.b0.a$a` `setThreadCount`(`com.bumptech.glide.load.engine.b0.a$a` v0 @kind this, `int` v1 ) @signature `Lcom/bumptech/glide/load/engine/b0/a$a;.setThreadCount:(I)Lcom/bumptech/glide/load/engine/b0/a$a;` @AccessFlag PUBLIC {
    temp;

  #L298f24.  v0.`com.bumptech.glide.load.engine.b0.a$a.b` @type ^`int` := v1;
  #L298f28.  v0.`com.bumptech.glide.load.engine.b0.a$a.c` @type ^`int` := v1;
  #L298f2c.  return v0 @kind object;
}
