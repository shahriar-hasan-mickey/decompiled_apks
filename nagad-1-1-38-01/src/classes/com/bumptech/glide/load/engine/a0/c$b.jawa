record `com.bumptech.glide.load.engine.a0.c$b` @kind class @AccessFlag  {
  `java.util.Queue` `com.bumptech.glide.load.engine.a0.c$b.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a0.c$b` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/a0/c$b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L298118.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29811e.  v0:= new `java.util.ArrayDeque`;
  #L298122.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L298128.  v1.`com.bumptech.glide.load.engine.a0.c$b.a` @type ^`java.util.Queue` := v0 @kind object;
  #L29812c.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.a0.c$a` `a`(`com.bumptech.glide.load.engine.a0.c$b` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/a0/c$b;.a:()Lcom/bumptech/glide/load/engine/a0/c$a;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2980c4.  v0:= v2.`com.bumptech.glide.load.engine.a0.c$b.a` @type ^`java.util.Queue` @kind object;
  #L2980c8.  @monitorenter v0
  #L2980ca.  v1:= v2.`com.bumptech.glide.load.engine.a0.c$b.a` @type ^`java.util.Queue` @kind object;
  #L2980ce.  call temp:= `poll`(v1) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L2980d4.  v1:= temp @kind object;
  #L2980d6.  v1:= (`com.bumptech.glide.load.engine.a0.c$a`) v1 @kind object;
  #L2980da.  @monitorexit v0
  #L2980dc.  if v1 != 0 then goto L2980ea;
  #L2980e0.  v1:= new `com.bumptech.glide.load.engine.a0.c$a`;
  #L2980e4.  call `<init>`(v1) @signature `Lcom/bumptech/glide/load/engine/a0/c$a;.<init>:()V` @kind direct;
  #L2980ea.  return v1 @kind object;
  #L2980ec.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2980ee.  @monitorexit v0
  #L2980f0.  throw v1;
  catch `java.lang.Throwable` @[L2980ca..L2980dc] goto L2980ec;
  catch `java.lang.Throwable` @[L2980ee..L2980f0] goto L2980ec;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.a0.c$b` v3 @kind this, `com.bumptech.glide.load.engine.a0.c$a` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/a0/c$b;.a:(Lcom/bumptech/glide/load/engine/a0/c$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L298140.  v0:= v3.`com.bumptech.glide.load.engine.a0.c$b.a` @type ^`java.util.Queue` @kind object;
  #L298144.  @monitorenter v0
  #L298146.  v1:= v3.`com.bumptech.glide.load.engine.a0.c$b.a` @type ^`java.util.Queue` @kind object;
  #L29814a.  call temp:= `size`(v1) @signature `Ljava/util/Queue;.size:()I` @kind interface;
  #L298150.  v1:= temp;
  #L298152.  v2:= 10I;
  #L298156.  if v1 >= v2 then goto L298164;
  #L29815a.  v1:= v3.`com.bumptech.glide.load.engine.a0.c$b.a` @type ^`java.util.Queue` @kind object;
  #L29815e.  call temp:= `offer`(v1, v4) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L298164.  @monitorexit v0
  #L298166.  return @kind void;
  #L298168.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L29816a.  @monitorexit v0
  #L29816c.  throw v4;
  catch `java.lang.Throwable` @[L298146..L29816c] goto L298168;
}
