record `com.bumptech.glide.load.engine.GlideException$a` @kind class @AccessFlag FINAL extends `java.lang.Appendable` @kind interface {
  `java.lang.Appendable` `com.bumptech.glide.load.engine.GlideException$a.f` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.bumptech.glide.load.engine.GlideException$a.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.GlideException$a` v1 @kind this, `java.lang.Appendable` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.<init>:(Ljava/lang/Appendable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L29492c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L294932.  v0:= 1I;
  #L294934.  v1.`com.bumptech.glide.load.engine.GlideException$a.g` @type ^`boolean` := v0 @kind boolean;
  #L294938.  v1.`com.bumptech.glide.load.engine.GlideException$a.f` @type ^`java.lang.Appendable` := v2 @kind object;
  #L29493c.  return @kind void;
}
procedure `java.lang.CharSequence` `a`(`com.bumptech.glide.load.engine.GlideException$a` v0 @kind this, `java.lang.CharSequence` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.a:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @AccessFlag PRIVATE {
    temp;

  #L294910.  if v1 != 0 then goto L294918;
  #L294914.  v1:= "" @kind object;
  #L294918.  return v1 @kind object;
}
procedure `java.lang.Appendable` `append`(`com.bumptech.glide.load.engine.GlideException$a` v3 @kind this, `char` v4 ) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.append:(C)Ljava/lang/Appendable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L294834.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.g` @type ^`boolean` @kind boolean;
  #L294838.  v1:= 0I;
  #L29483a.  if v0 == 0 then goto L294850;
  #L29483e.  v3.`com.bumptech.glide.load.engine.GlideException$a.g` @type ^`boolean` := v1 @kind boolean;
  #L294842.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.f` @type ^`java.lang.Appendable` @kind object;
  #L294846.  v2:= "  " @kind object;
  #L29484a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L294850.  v0:= 10I;
  #L294854.  if v4 != v0 then goto L29485a;
  #L294858.  v1:= 1I;
  #L29485a.  v3.`com.bumptech.glide.load.engine.GlideException$a.g` @type ^`boolean` := v1 @kind boolean;
  #L29485e.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.f` @type ^`java.lang.Appendable` @kind object;
  #L294862.  call temp:= `append`(v0, v4) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L294868.  return v3 @kind object;
}
procedure `java.lang.Appendable` `append`(`com.bumptech.glide.load.engine.GlideException$a` v2 @kind this, `java.lang.CharSequence` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29487c.  call temp:= `a`(v2, v3) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.a:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @kind direct;
  #L294882.  v3:= temp @kind object;
  #L294884.  call temp:= `length`(v3) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L29488a.  v0:= temp;
  #L29488c.  v1:= 0I;
  #L29488e.  call temp:= `append`(v2, v3, v1, v0) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;` @kind virtual;
  #L294894.  return v2 @kind object;
}
procedure `java.lang.Appendable` `append`(`com.bumptech.glide.load.engine.GlideException$a` v3 @kind this, `java.lang.CharSequence` v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2948a8.  call temp:= `a`(v3, v4) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.a:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @kind direct;
  #L2948ae.  v4:= temp @kind object;
  #L2948b0.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.g` @type ^`boolean` @kind boolean;
  #L2948b4.  v1:= 0I;
  #L2948b6.  if v0 == 0 then goto L2948cc;
  #L2948ba.  v3.`com.bumptech.glide.load.engine.GlideException$a.g` @type ^`boolean` := v1 @kind boolean;
  #L2948be.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.f` @type ^`java.lang.Appendable` @kind object;
  #L2948c2.  v2:= "  " @kind object;
  #L2948c6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L2948cc.  call temp:= `length`(v4) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L2948d2.  v0:= temp;
  #L2948d4.  if v0 <= 0 then goto L2948ee;
  #L2948d8.  v0:= v6 + -1;
  #L2948dc.  call temp:= `charAt`(v4, v0) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2948e2.  v0:= temp;
  #L2948e4.  v2:= 10I;
  #L2948e8.  if v0 != v2 then goto L2948ee;
  #L2948ec.  v1:= 1I;
  #L2948ee.  v3.`com.bumptech.glide.load.engine.GlideException$a.g` @type ^`boolean` := v1 @kind boolean;
  #L2948f2.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.f` @type ^`java.lang.Appendable` @kind object;
  #L2948f6.  call temp:= `append`(v0, v4, v5, v6) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;` @kind interface;
  #L2948fc.  return v3 @kind object;
}
