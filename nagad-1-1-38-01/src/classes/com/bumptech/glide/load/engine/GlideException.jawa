record `com.bumptech.glide.load.engine.GlideException` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Exception` @kind class {
  `java.util.List` `com.bumptech.glide.load.engine.GlideException.f` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.f` `com.bumptech.glide.load.engine.GlideException.g` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.a` `com.bumptech.glide.load.engine.GlideException.h` @AccessFlag PRIVATE;
  `java.lang.Class` `com.bumptech.glide.load.engine.GlideException.i` @AccessFlag PRIVATE;
  `java.lang.String` `com.bumptech.glide.load.engine.GlideException.j` @AccessFlag PRIVATE;
}
global `java.lang.StackTraceElement`[] `@@com.bumptech.glide.load.engine.GlideException.k` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@com.bumptech.glide.load.engine.GlideException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/engine/GlideException;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L294b3c.  v0:= 0I;
  #L294b3e.  v0:= new `java.lang.StackTraceElement`[v0];
  #L294b42.  `@@com.bumptech.glide.load.engine.GlideException.k` @type ^`java.lang.StackTraceElement`[] := v0 @kind object;
  #L294b46.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L294b58.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L294b5e.  v0:= temp @kind object;
  #L294b60.  call `<init>`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L294b66.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.Throwable` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L294b78.  call temp:= `singletonList`(v2) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L294b7e.  v2:= temp @kind object;
  #L294b80.  call `<init>`(v0, v1, v2) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L294b86.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `java.lang.String` v1 @kind object, `java.util.List` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L294b98.  call `<init>`(v0) @signature `Ljava/lang/Exception;.<init>:()V` @kind direct;
  #L294b9e.  v0.`com.bumptech.glide.load.engine.GlideException.j` @type ^`java.lang.String` := v1 @kind object;
  #L294ba2.  v1:= `@@com.bumptech.glide.load.engine.GlideException.k` @type ^`java.lang.StackTraceElement`[] @kind object;
  #L294ba6.  call `setStackTrace`(v0, v1) @signature `Ljava/lang/Exception;.setStackTrace:([Ljava/lang/StackTraceElement;)V` @kind virtual;
  #L294bac.  v0.`com.bumptech.glide.load.engine.GlideException.f` @type ^`java.util.List` := v2 @kind object;
  #L294bb0.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.GlideException` v2 @kind this, `java.lang.Appendable` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/lang/Appendable;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L294e18.  call `a`(v2, v3) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/lang/Throwable;Ljava/lang/Appendable;)V` @kind static;
  #L294e1e.  call temp:= `getCauses`(v2) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getCauses:()Ljava/util/List;` @kind virtual;
  #L294e24.  v0:= temp @kind object;
  #L294e26.  v1:= new `com.bumptech.glide.load.engine.GlideException$a`;
  #L294e2a.  call `<init>`(v1, v3) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.<init>:(Ljava/lang/Appendable;)V` @kind direct;
  #L294e30.  call `a`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/util/List;Ljava/lang/Appendable;)V` @kind static;
  #L294e36.  return @kind void;
}
procedure `void` `a`(`java.lang.Throwable` v1 @kind object, `java.lang.Appendable` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/lang/Throwable;Ljava/lang/Appendable;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L294ce0.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L294ce6.  v0:= temp @kind object;
  #L294ce8.  call temp:= `toString`(v0) @signature `Ljava/lang/Class;.toString:()Ljava/lang/String;` @kind virtual;
  #L294cee.  v0:= temp @kind object;
  #L294cf0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L294cf6.  v2:= temp @kind object;
  #L294cf8.  v0:= ": " @kind object;
  #L294cfc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L294d02.  v2:= temp @kind object;
  #L294d04.  call temp:= `getMessage`(v1) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L294d0a.  v0:= temp @kind object;
  #L294d0c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L294d12.  v2:= temp @kind object;
  #L294d14.  v0:= 10I;
  #L294d18.  call temp:= `append`(v2, v0) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L294d1e.  return @kind void;
  #L294d20.  v2:= new `java.lang.RuntimeException`;
  #L294d24.  call `<init>`(v2, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L294d2a.  throw v2;
  catch `java.io.IOException` @[L294ce0..L294d1e] goto L294d20;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this, `java.lang.Throwable` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/lang/Throwable;Ljava/util/List;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L294bc4.  v0:= instanceof @variable v2 @type ^`com.bumptech.glide.load.engine.GlideException` @kind boolean;
  #L294bc8.  if v0 == 0 then goto L294c00;
  #L294bcc.  v2:= (`com.bumptech.glide.load.engine.GlideException`) v2 @kind object;
  #L294bd0.  call temp:= `getCauses`(v2) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getCauses:()Ljava/util/List;` @kind virtual;
  #L294bd6.  v2:= temp @kind object;
  #L294bd8.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L294bde.  v2:= temp @kind object;
  #L294be0.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L294be6.  v0:= temp;
  #L294be8.  if v0 == 0 then goto L294c06;
  #L294bec.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L294bf2.  v0:= temp @kind object;
  #L294bf4.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L294bf8.  call `a`(v1, v0, v3) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/lang/Throwable;Ljava/util/List;)V` @kind direct;
  #L294bfe.  goto L294be0;
  #L294c00.  call temp:= `add`(v3, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L294c06.  return @kind void;
}
procedure `void` `a`(`java.util.List` v0 @kind object, `java.lang.Appendable` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/util/List;Ljava/lang/Appendable;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L294c18.  call `b`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/GlideException;.b:(Ljava/util/List;Ljava/lang/Appendable;)V` @kind static;
  #L294c1e.  return @kind void;
  #L294c20.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L294c22.  v1:= new `java.lang.RuntimeException`;
  #L294c26.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L294c2c.  throw v1;
  catch `java.io.IOException` @[L294c18..L294c1e] goto L294c20;
}
procedure `void` `b`(`java.util.List` v5 @kind object, `java.lang.Appendable` v6 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.b:(Ljava/util/List;Ljava/lang/Appendable;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L294c50.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L294c56.  v0:= temp;
  #L294c58.  v1:= 0I;
  #L294c5a.  if v1 >= v0 then goto L294cce;
  #L294c5e.  v2:= "Cause (" @kind object;
  #L294c62.  call temp:= `append`(v6, v2) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L294c68.  v2:= temp @kind object;
  #L294c6a.  v3:= v1 + 1;
  #L294c6e.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L294c74.  v4:= temp @kind object;
  #L294c76.  call temp:= `append`(v2, v4) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L294c7c.  v2:= temp @kind object;
  #L294c7e.  v4:= " of " @kind object;
  #L294c82.  call temp:= `append`(v2, v4) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L294c88.  v2:= temp @kind object;
  #L294c8a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L294c90.  v4:= temp @kind object;
  #L294c92.  call temp:= `append`(v2, v4) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L294c98.  v2:= temp @kind object;
  #L294c9a.  v4:= "): " @kind object;
  #L294c9e.  call temp:= `append`(v2, v4) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L294ca4.  call temp:= `get`(v5, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L294caa.  v1:= temp @kind object;
  #L294cac.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L294cb0.  v2:= instanceof @variable v1 @type ^`com.bumptech.glide.load.engine.GlideException` @kind boolean;
  #L294cb4.  if v2 == 0 then goto L294cc4;
  #L294cb8.  v1:= (`com.bumptech.glide.load.engine.GlideException`) v1 @kind object;
  #L294cbc.  call `a`(v1, v6) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/lang/Appendable;)V` @kind direct;
  #L294cc2.  goto L294cca;
  #L294cc4.  call `a`(v1, v6) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/lang/Throwable;Ljava/lang/Appendable;)V` @kind static;
  #L294cca.  v1:= v3;
  #L294ccc.  goto L294c5a;
  #L294cce.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this, `com.bumptech.glide.load.f` v2 @kind object, `com.bumptech.glide.load.a` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Lcom/bumptech/glide/load/f;Lcom/bumptech/glide/load/a;)V` @AccessFlag  {
    temp;
    v0;

  #L294e48.  v0:= 0I;
  #L294e4a.  call `a`(v1, v2, v3, v0) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Lcom/bumptech/glide/load/f;Lcom/bumptech/glide/load/a;Ljava/lang/Class;)V` @kind virtual;
  #L294e50.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `com.bumptech.glide.load.f` v1 @kind object, `com.bumptech.glide.load.a` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Lcom/bumptech/glide/load/f;Lcom/bumptech/glide/load/a;Ljava/lang/Class;)V` @AccessFlag  {
    temp;

  #L294e64.  v0.`com.bumptech.glide.load.engine.GlideException.g` @type ^`com.bumptech.glide.load.f` := v1 @kind object;
  #L294e68.  v0.`com.bumptech.glide.load.engine.GlideException.h` @type ^`com.bumptech.glide.load.a` := v2 @kind object;
  #L294e6c.  v0.`com.bumptech.glide.load.engine.GlideException.i` @type ^`java.lang.Class` := v3 @kind object;
  #L294e70.  return @kind void;
}
procedure `java.lang.Throwable` `fillInStackTrace`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this) @signature `Lcom/bumptech/glide/load/engine/GlideException;.fillInStackTrace:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;

  #L294aec.  return v0 @kind object;
}
procedure `java.util.List` `getCauses`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getCauses:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L294b00.  v0:= v1.`com.bumptech.glide.load.engine.GlideException.f` @type ^`java.util.List` @kind object;
  #L294b04.  return v0 @kind object;
}
procedure `java.lang.String` `getMessage`(`com.bumptech.glide.load.engine.GlideException` v5 @kind this) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L294950.  v0:= new `java.lang.StringBuilder`;
  #L294954.  v1:= 71I;
  #L294958.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L29495e.  v1:= v5.`com.bumptech.glide.load.engine.GlideException.j` @type ^`java.lang.String` @kind object;
  #L294962.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L294968.  v1:= v5.`com.bumptech.glide.load.engine.GlideException.i` @type ^`java.lang.Class` @kind object;
  #L29496c.  v2:= ", " @kind object;
  #L294970.  v3:= "" @kind object;
  #L294974.  if v1 == 0 then goto L29499c;
  #L294978.  v1:= new `java.lang.StringBuilder`;
  #L29497c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L294982.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L294988.  v4:= v5.`com.bumptech.glide.load.engine.GlideException.i` @type ^`java.lang.Class` @kind object;
  #L29498c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L294992.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L294998.  v1:= temp @kind object;
  #L29499a.  goto L29499e;
  #L29499c.  v1:= v3 @kind object;
  #L29499e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2949a4.  v1:= v5.`com.bumptech.glide.load.engine.GlideException.h` @type ^`com.bumptech.glide.load.a` @kind object;
  #L2949a8.  if v1 == 0 then goto L2949d0;
  #L2949ac.  v1:= new `java.lang.StringBuilder`;
  #L2949b0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2949b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2949bc.  v4:= v5.`com.bumptech.glide.load.engine.GlideException.h` @type ^`com.bumptech.glide.load.a` @kind object;
  #L2949c0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2949c6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2949cc.  v1:= temp @kind object;
  #L2949ce.  goto L2949d2;
  #L2949d0.  v1:= v3 @kind object;
  #L2949d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2949d8.  v1:= v5.`com.bumptech.glide.load.engine.GlideException.g` @type ^`com.bumptech.glide.load.f` @kind object;
  #L2949dc.  if v1 == 0 then goto L294a02;
  #L2949e0.  v1:= new `java.lang.StringBuilder`;
  #L2949e4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2949ea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2949f0.  v2:= v5.`com.bumptech.glide.load.engine.GlideException.g` @type ^`com.bumptech.glide.load.f` @kind object;
  #L2949f4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2949fa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L294a00.  v3:= temp @kind object;
  #L294a02.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L294a08.  call temp:= `getRootCauses`(v5) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getRootCauses:()Ljava/util/List;` @kind virtual;
  #L294a0e.  v1:= temp @kind object;
  #L294a10.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L294a16.  v2:= temp;
  #L294a18.  if v2 == 0 then goto L294a26;
  #L294a1c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L294a22.  v0:= temp @kind object;
  #L294a24.  return v0 @kind object;
  #L294a26.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L294a2c.  v2:= temp;
  #L294a2e.  v3:= 1I;
  #L294a30.  if v2 != v3 then goto L294a40;
  #L294a34.  v2:= "\nThere was 1 cause:" @kind object;
  #L294a38.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L294a3e.  goto L294a62;
  #L294a40.  v2:= "\nThere were " @kind object;
  #L294a44.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L294a4a.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L294a50.  v2:= temp;
  #L294a52.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L294a58.  v2:= " causes:" @kind object;
  #L294a5c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L294a62.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L294a68.  v1:= temp @kind object;
  #L294a6a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L294a70.  v2:= temp;
  #L294a72.  if v2 == 0 then goto L294ac6;
  #L294a76.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L294a7c.  v2:= temp @kind object;
  #L294a7e.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L294a82.  v3:= 10I;
  #L294a86.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L294a8c.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L294a92.  v3:= temp @kind object;
  #L294a94.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L294a9a.  v3:= temp @kind object;
  #L294a9c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L294aa2.  v3:= 40I;
  #L294aa6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L294aac.  call temp:= `getMessage`(v2) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L294ab2.  v2:= temp @kind object;
  #L294ab4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L294aba.  v2:= 41I;
  #L294abe.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L294ac4.  goto L294a6a;
  #L294ac6.  v1:= "\n call GlideException#logRootCauses(String) for more detail" @kind object;
  #L294aca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L294ad0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L294ad6.  v0:= temp @kind object;
  #L294ad8.  return v0 @kind object;
}
procedure `java.util.List` `getRootCauses`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getRootCauses:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L294b18.  v0:= new `java.util.ArrayList`;
  #L294b1c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L294b22.  call `a`(v1, v1, v0) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/lang/Throwable;Ljava/util/List;)V` @kind direct;
  #L294b28.  return v0 @kind object;
}
procedure `void` `logRootCauses`(`com.bumptech.glide.load.engine.GlideException` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.logRootCauses:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L294d4c.  call temp:= `getRootCauses`(v6) @signature `Lcom/bumptech/glide/load/engine/GlideException;.getRootCauses:()Ljava/util/List;` @kind virtual;
  #L294d52.  v0:= temp @kind object;
  #L294d54.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L294d5a.  v1:= temp;
  #L294d5c.  v2:= 0I;
  #L294d5e.  if v2 >= v1 then goto L294db8;
  #L294d62.  v3:= new `java.lang.StringBuilder`;
  #L294d66.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L294d6c.  v4:= "Root cause (" @kind object;
  #L294d70.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L294d76.  v4:= v2 + 1;
  #L294d7a.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L294d80.  v5:= " of " @kind object;
  #L294d84.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L294d8a.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L294d90.  v5:= ")" @kind object;
  #L294d94.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L294d9a.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L294da0.  v3:= temp @kind object;
  #L294da2.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L294da8.  v2:= temp @kind object;
  #L294daa.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L294dae.  call temp:= `i`(v7, v3, v2) @signature `Landroid/util/Log;.i:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L294db4.  v2:= v4;
  #L294db6.  goto L294d5e;
  #L294db8.  return @kind void;
}
procedure `void` `printStackTrace`(`com.bumptech.glide.load.engine.GlideException` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/GlideException;.printStackTrace:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L294dcc.  v0:= `@@java.lang.System.err` @type ^`java.io.PrintStream` @kind object;
  #L294dd0.  call `printStackTrace`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/GlideException;.printStackTrace:(Ljava/io/PrintStream;)V` @kind virtual;
  #L294dd6.  return @kind void;
}
procedure `void` `printStackTrace`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `java.io.PrintStream` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.printStackTrace:(Ljava/io/PrintStream;)V` @AccessFlag PUBLIC {
    temp;

  #L294de8.  call `a`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/lang/Appendable;)V` @kind direct;
  #L294dee.  return @kind void;
}
procedure `void` `printStackTrace`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `java.io.PrintWriter` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.printStackTrace:(Ljava/io/PrintWriter;)V` @AccessFlag PUBLIC {
    temp;

  #L294e00.  call `a`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/GlideException;.a:(Ljava/lang/Appendable;)V` @kind direct;
  #L294e06.  return @kind void;
}
procedure `void` `setOrigin`(`com.bumptech.glide.load.engine.GlideException` v0 @kind this, `java.lang.Exception` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException;.setOrigin:(Ljava/lang/Exception;)V` @AccessFlag PUBLIC {
    temp;

  #L294e84.  return @kind void;
}
