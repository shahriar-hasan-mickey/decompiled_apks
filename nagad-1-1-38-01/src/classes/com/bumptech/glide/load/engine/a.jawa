record `com.bumptech.glide.load.engine.a` @kind class @AccessFlag FINAL {
  `boolean` `com.bumptech.glide.load.engine.a.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.load.engine.a.b` @AccessFlag FINAL;
  `java.lang.ref.ReferenceQueue` `com.bumptech.glide.load.engine.a.c` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.p$a` `com.bumptech.glide.load.engine.a.d` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.a.e` @AccessFlag PRIVATE_VOLATILE;
  `com.bumptech.glide.load.engine.a$c` `com.bumptech.glide.load.engine.a.f` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a` v1 @kind this, `boolean` v2 ) @signature `Lcom/bumptech/glide/load/engine/a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2908b0.  v0:= new `com.bumptech.glide.load.engine.a$a`;
  #L2908b4.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/a$a;.<init>:()V` @kind direct;
  #L2908ba.  call temp:= `newSingleThreadExecutor`(v0) @signature `Ljava/util/concurrent/Executors;.newSingleThreadExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;` @kind static;
  #L2908c0.  v0:= temp @kind object;
  #L2908c2.  call `<init>`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/engine/a;.<init>:(ZLjava/util/concurrent/Executor;)V` @kind direct;
  #L2908c8.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a` v1 @kind this, `boolean` v2 , `java.util.concurrent.Executor` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.<init>:(ZLjava/util/concurrent/Executor;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2908dc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2908e2.  v0:= new `java.util.HashMap`;
  #L2908e6.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L2908ec.  v1.`com.bumptech.glide.load.engine.a.b` @type ^`java.util.Map` := v0 @kind object;
  #L2908f0.  v0:= new `java.lang.ref.ReferenceQueue`;
  #L2908f4.  call `<init>`(v0) @signature `Ljava/lang/ref/ReferenceQueue;.<init>:()V` @kind direct;
  #L2908fa.  v1.`com.bumptech.glide.load.engine.a.c` @type ^`java.lang.ref.ReferenceQueue` := v0 @kind object;
  #L2908fe.  v1.`com.bumptech.glide.load.engine.a.a` @type ^`boolean` := v2 @kind boolean;
  #L290902.  v2:= new `com.bumptech.glide.load.engine.a$b`;
  #L290906.  call `<init>`(v2, v1) @signature `Lcom/bumptech/glide/load/engine/a$b;.<init>:(Lcom/bumptech/glide/load/engine/a;)V` @kind direct;
  #L29090c.  call `execute`(v3, v2) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L290912.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.a` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L290978.  v0:= v1.`com.bumptech.glide.load.engine.a.e` @type ^`boolean` @kind boolean;
  #L29097c.  if v0 != 0 then goto L2909b6;
  #L290980.  v0:= v1.`com.bumptech.glide.load.engine.a.c` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L290984.  call temp:= `remove`(v0) @signature `Ljava/lang/ref/ReferenceQueue;.remove:()Ljava/lang/ref/Reference;` @kind virtual;
  #L29098a.  v0:= temp @kind object;
  #L29098c.  v0:= (`com.bumptech.glide.load.engine.a$d`) v0 @kind object;
  #L290990.  call `a`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/a;.a:(Lcom/bumptech/glide/load/engine/a$d;)V` @kind virtual;
  #L290996.  v0:= v1.`com.bumptech.glide.load.engine.a.f` @type ^`com.bumptech.glide.load.engine.a$c` @kind object;
  #L29099a.  if v0 == 0 then goto L290978;
  #L29099e.  call `onResourceDequeued`(v0) @signature `Lcom/bumptech/glide/load/engine/a$c;.onResourceDequeued:()V` @kind interface;
  #L2909a4.  goto L290978;
  #L2909a6.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L2909ac.  v0:= temp @kind object;
  #L2909ae.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L2909b4.  goto L290978;
  #L2909b6.  return @kind void;
  catch `java.lang.InterruptedException` @[L290980..L2909a4] goto L2909a6;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.a` v7 @kind this, `com.bumptech.glide.load.engine.a$d` v8 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.a:(Lcom/bumptech/glide/load/engine/a$d;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2909d8.  @monitorenter v7
  #L2909da.  v0:= v7.`com.bumptech.glide.load.engine.a.b` @type ^`java.util.Map` @kind object;
  #L2909de.  v1:= v8.`com.bumptech.glide.load.engine.a$d.a` @type ^`com.bumptech.glide.load.f` @kind object;
  #L2909e2.  call temp:= `remove`(v0, v1) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2909e8.  v0:= v8.`com.bumptech.glide.load.engine.a$d.b` @type ^`boolean` @kind boolean;
  #L2909ec.  if v0 == 0 then goto L290a28;
  #L2909f0.  v0:= v8.`com.bumptech.glide.load.engine.a$d.c` @type ^`com.bumptech.glide.load.engine.u` @kind object;
  #L2909f4.  if v0 != 0 then goto L2909fa;
  #L2909f8.  goto L290a28;
  #L2909fa.  @monitorexit v7
  #L2909fc.  v0:= new `com.bumptech.glide.load.engine.p`;
  #L290a00.  v2:= v8.`com.bumptech.glide.load.engine.a$d.c` @type ^`com.bumptech.glide.load.engine.u` @kind object;
  #L290a04.  v3:= 1I;
  #L290a06.  v4:= 0I;
  #L290a08.  v5:= v8.`com.bumptech.glide.load.engine.a$d.a` @type ^`com.bumptech.glide.load.f` @kind object;
  #L290a0c.  v6:= v7.`com.bumptech.glide.load.engine.a.d` @type ^`com.bumptech.glide.load.engine.p$a` @kind object;
  #L290a10.  v1:= v0 @kind object;
  #L290a12.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lcom/bumptech/glide/load/engine/p;.<init>:(Lcom/bumptech/glide/load/engine/u;ZZLcom/bumptech/glide/load/f;Lcom/bumptech/glide/load/engine/p$a;)V` @kind direct;
  #L290a18.  v1:= v7.`com.bumptech.glide.load.engine.a.d` @type ^`com.bumptech.glide.load.engine.p$a` @kind object;
  #L290a1c.  v8:= v8.`com.bumptech.glide.load.engine.a$d.a` @type ^`com.bumptech.glide.load.f` @kind object;
  #L290a20.  call `onResourceReleased`(v1, v8, v0) @signature `Lcom/bumptech/glide/load/engine/p$a;.onResourceReleased:(Lcom/bumptech/glide/load/f;Lcom/bumptech/glide/load/engine/p;)V` @kind interface;
  #L290a26.  return @kind void;
  #L290a28.  @monitorexit v7
  #L290a2a.  return @kind void;
  #L290a2c.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L290a2e.  @monitorexit v7
  #L290a30.  throw v8;
  catch `java.lang.Throwable` @[L2909da..L2909fc] goto L290a2c;
  catch `java.lang.Throwable` @[L290a28..L290a30] goto L290a2c;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.a` v1 @kind this, `com.bumptech.glide.load.engine.p$a` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.a:(Lcom/bumptech/glide/load/engine/p$a;)V` @AccessFlag  {
    temp;
    v0;

  #L290a9c.  @monitorenter v2
  #L290a9e.  @monitorenter v1
  #L290aa0.  v1.`com.bumptech.glide.load.engine.a.d` @type ^`com.bumptech.glide.load.engine.p$a` := v2 @kind object;
  #L290aa4.  @monitorexit v1
  #L290aa6.  @monitorexit v2
  #L290aa8.  return @kind void;
  #L290aaa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L290aac.  @monitorexit v1
  #L290aae.  throw v0;
  #L290ab0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L290ab2.  @monitorexit v2
  #L290ab4.  throw v0;
  catch `java.lang.Throwable` @[L290a9e..L290aa0] goto L290ab0;
  catch `java.lang.Throwable` @[L290aa0..L290aa6] goto L290aaa;
  catch `java.lang.Throwable` @[L290aa6..L290aa8] goto L290ab0;
  catch `java.lang.Throwable` @[L290aac..L290aae] goto L290aaa;
  catch `java.lang.Throwable` @[L290aae..L290ab4] goto L290ab0;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.a` v1 @kind this, `com.bumptech.glide.load.f` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.a:(Lcom/bumptech/glide/load/f;)V` @AccessFlag  {
    temp;
    v0;

  #L290a58.  @monitorenter v1
  #L290a5a.  v0:= v1.`com.bumptech.glide.load.engine.a.b` @type ^`java.util.Map` @kind object;
  #L290a5e.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L290a64.  v2:= temp @kind object;
  #L290a66.  v2:= (`com.bumptech.glide.load.engine.a$d`) v2 @kind object;
  #L290a6a.  if v2 == 0 then goto L290a74;
  #L290a6e.  call `a`(v2) @signature `Lcom/bumptech/glide/load/engine/a$d;.a:()V` @kind virtual;
  #L290a74.  @monitorexit v1
  #L290a76.  return @kind void;
  #L290a78.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L290a7a.  @monitorexit v1
  #L290a7c.  throw v2;
  catch `java.lang.Throwable` @[L290a5a..L290a74] goto L290a78;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.a` v3 @kind this, `com.bumptech.glide.load.f` v4 @kind object, `com.bumptech.glide.load.engine.p` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.a:(Lcom/bumptech/glide/load/f;Lcom/bumptech/glide/load/engine/p;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L290924.  @monitorenter v3
  #L290926.  v0:= new `com.bumptech.glide.load.engine.a$d`;
  #L29092a.  v1:= v3.`com.bumptech.glide.load.engine.a.c` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L29092e.  v2:= v3.`com.bumptech.glide.load.engine.a.a` @type ^`boolean` @kind boolean;
  #L290932.  call `<init>`(v0, v4, v5, v1, v2) @signature `Lcom/bumptech/glide/load/engine/a$d;.<init>:(Lcom/bumptech/glide/load/f;Lcom/bumptech/glide/load/engine/p;Ljava/lang/ref/ReferenceQueue;Z)V` @kind direct;
  #L290938.  v5:= v3.`com.bumptech.glide.load.engine.a.b` @type ^`java.util.Map` @kind object;
  #L29093c.  call temp:= `put`(v5, v4, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L290942.  v4:= temp @kind object;
  #L290944.  v4:= (`com.bumptech.glide.load.engine.a$d`) v4 @kind object;
  #L290948.  if v4 == 0 then goto L290952;
  #L29094c.  call `a`(v4) @signature `Lcom/bumptech/glide/load/engine/a$d;.a:()V` @kind virtual;
  #L290952.  @monitorexit v3
  #L290954.  return @kind void;
  #L290956.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L290958.  @monitorexit v3
  #L29095a.  throw v4;
  catch `java.lang.Throwable` @[L290926..L290952] goto L290956;
}
procedure `com.bumptech.glide.load.engine.p` `b`(`com.bumptech.glide.load.engine.a` v1 @kind this, `com.bumptech.glide.load.f` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.b:(Lcom/bumptech/glide/load/f;)Lcom/bumptech/glide/load/engine/p;` @AccessFlag  {
    temp;
    v0;

  #L290850.  @monitorenter v1
  #L290852.  v0:= v1.`com.bumptech.glide.load.engine.a.b` @type ^`java.util.Map` @kind object;
  #L290856.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L29085c.  v2:= temp @kind object;
  #L29085e.  v2:= (`com.bumptech.glide.load.engine.a$d`) v2 @kind object;
  #L290862.  if v2 != 0 then goto L29086c;
  #L290866.  v2:= 0I;
  #L290868.  @monitorexit v1
  #L29086a.  return v2 @kind object;
  #L29086c.  call temp:= `get`(v2) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L290872.  v0:= temp @kind object;
  #L290874.  v0:= (`com.bumptech.glide.load.engine.p`) v0 @kind object;
  #L290878.  if v0 != 0 then goto L290882;
  #L29087c.  call `a`(v1, v2) @signature `Lcom/bumptech/glide/load/engine/a;.a:(Lcom/bumptech/glide/load/engine/a$d;)V` @kind virtual;
  #L290882.  @monitorexit v1
  #L290884.  return v0 @kind object;
  #L290886.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L290888.  @monitorexit v1
  #L29088a.  throw v2;
  catch `java.lang.Throwable` @[L290852..L290862] goto L290886;
  catch `java.lang.Throwable` @[L29086c..L290882] goto L290886;
}
