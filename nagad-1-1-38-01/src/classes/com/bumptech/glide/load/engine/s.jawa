record `com.bumptech.glide.load.engine.s` @kind class @AccessFlag PUBLIC {
  `c.h.i.d` `com.bumptech.glide.load.engine.s.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `com.bumptech.glide.load.engine.s.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.bumptech.glide.load.engine.s.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.s` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `java.util.List` v4 @kind object, `c.h.i.d` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/s;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;Ljava/util/List;Lc/h/i/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2950d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2950d6.  v0.`com.bumptech.glide.load.engine.s.a` @type ^`c.h.i.d` := v5 @kind object;
  #L2950da.  call temp:= `checkNotEmpty`(v4) @signature `Lcom/bumptech/glide/s/j;.checkNotEmpty:(Ljava/util/Collection;)Ljava/util/Collection;` @kind static;
  #L2950e0.  v4:= (`java.util.List`) v4 @kind object;
  #L2950e4.  v0.`com.bumptech.glide.load.engine.s.b` @type ^`java.util.List` := v4 @kind object;
  #L2950e8.  v4:= new `java.lang.StringBuilder`;
  #L2950ec.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2950f2.  v5:= "Failed LoadPath{" @kind object;
  #L2950f6.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2950fc.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L295102.  v1:= temp @kind object;
  #L295104.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29510a.  v1:= "->" @kind object;
  #L29510e.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L295114.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L29511a.  v2:= temp @kind object;
  #L29511c.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L295122.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L295128.  call temp:= `getSimpleName`(v3) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L29512e.  v1:= temp @kind object;
  #L295130.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L295136.  v1:= "}" @kind object;
  #L29513a.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L295140.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L295146.  v1:= temp @kind object;
  #L295148.  v0.`com.bumptech.glide.load.engine.s.c` @type ^`java.lang.String` := v1 @kind object;
  #L29514c.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.u` `a`(`com.bumptech.glide.load.engine.s` v12 @kind this, `com.bumptech.glide.load.m.e` v13 @kind object, `com.bumptech.glide.load.h` v14 @kind object, `int` v15 , `int` v16 , `com.bumptech.glide.load.engine.i$a` v17 @kind object, `java.util.List` v18 @kind object) @signature `Lcom/bumptech/glide/load/engine/s;.a:(Lcom/bumptech/glide/load/m/e;Lcom/bumptech/glide/load/h;IILcom/bumptech/glide/load/engine/i$a;Ljava/util/List;)Lcom/bumptech/glide/load/engine/u;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L294fdc.  v1:= v12 @kind object;
  #L294fde.  v2:= v18 @kind object;
  #L294fe2.  v0:= v1.`com.bumptech.glide.load.engine.s.b` @type ^`java.util.List` @kind object;
  #L294fe6.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L294fec.  v3:= temp;
  #L294fee.  v0:= 0I;
  #L294ff0.  v4:= 0I;
  #L294ff2.  v5:= v0 @kind object;
  #L294ff4.  if v4 >= v3 then goto L29503a;
  #L294ff8.  v0:= v1.`com.bumptech.glide.load.engine.s.b` @type ^`java.util.List` @kind object;
  #L294ffc.  call temp:= `get`(v0, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L295002.  v0:= temp @kind object;
  #L295004.  v6:= v0 @kind object;
  #L295006.  v6:= (`com.bumptech.glide.load.engine.i`) v6 @kind object;
  #L29500a.  v7:= v13 @kind object;
  #L29500c.  v8:= v15;
  #L29500e.  v9:= v16;
  #L295012.  v10:= v14 @kind object;
  #L295014.  v11:= v17 @kind object;
  #L295018.  call temp:= `decode`(v6, v7, v8, v9, v10, v11) @signature `Lcom/bumptech/glide/load/engine/i;.decode:(Lcom/bumptech/glide/load/m/e;IILcom/bumptech/glide/load/h;Lcom/bumptech/glide/load/engine/i$a;)Lcom/bumptech/glide/load/engine/u;` @kind virtual;
  #L29501e.  v0:= temp @kind object;
  #L295020.  v5:= v0 @kind object;
  #L295022.  goto L29502e;
  #L295024.  v0:= Exception @type ^`com.bumptech.glide.load.engine.GlideException` @kind object;
  #L295026.  v6:= v0 @kind object;
  #L295028.  call temp:= `add`(v2, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L29502e.  if v5 == 0 then goto L295034;
  #L295032.  goto L29503a;
  #L295034.  v4:= v4 + 1;
  #L295038.  goto L294ff4;
  #L29503a.  if v5 == 0 then goto L295040;
  #L29503e.  return v5 @kind object;
  #L295040.  v0:= new `com.bumptech.glide.load.engine.GlideException`;
  #L295044.  v3:= v1.`com.bumptech.glide.load.engine.s.c` @type ^`java.lang.String` @kind object;
  #L295048.  v4:= new `java.util.ArrayList`;
  #L29504c.  call `<init>`(v4, v2) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L295052.  call `<init>`(v0, v3, v4) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L295058.  throw v0;
  catch `com.bumptech.glide.load.engine.GlideException` @[L295018..L295020] goto L295024;
}
procedure `com.bumptech.glide.load.engine.u` `load`(`com.bumptech.glide.load.engine.s` v8 @kind this, `com.bumptech.glide.load.m.e` v9 @kind object, `com.bumptech.glide.load.h` v10 @kind object, `int` v11 , `int` v12 , `com.bumptech.glide.load.engine.i$a` v13 @kind object) @signature `Lcom/bumptech/glide/load/engine/s;.load:(Lcom/bumptech/glide/load/m/e;Lcom/bumptech/glide/load/h;IILcom/bumptech/glide/load/engine/i$a;)Lcom/bumptech/glide/load/engine/u;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L294f78.  v0:= v8.`com.bumptech.glide.load.engine.s.a` @type ^`c.h.i.d` @kind object;
  #L294f7c.  call temp:= `acquire`(v0) @signature `Lc/h/i/d;.acquire:()Ljava/lang/Object;` @kind interface;
  #L294f82.  v0:= temp @kind object;
  #L294f84.  call temp:= `checkNotNull`(v0) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L294f8a.  v0:= (`java.util.List`) v0 @kind object;
  #L294f8e.  v1:= v8 @kind object;
  #L294f90.  v2:= v9 @kind object;
  #L294f92.  v3:= v10 @kind object;
  #L294f94.  v4:= v11;
  #L294f96.  v5:= v12;
  #L294f98.  v6:= v13 @kind object;
  #L294f9a.  v7:= v0 @kind object;
  #L294f9c.  call temp:= `a`(v1, v2, v3, v4, v5, v6, v7) @signature `Lcom/bumptech/glide/load/engine/s;.a:(Lcom/bumptech/glide/load/m/e;Lcom/bumptech/glide/load/h;IILcom/bumptech/glide/load/engine/i$a;Ljava/util/List;)Lcom/bumptech/glide/load/engine/u;` @kind direct;
  #L294fa2.  v9:= temp @kind object;
  #L294fa4.  v10:= v8.`com.bumptech.glide.load.engine.s.a` @type ^`c.h.i.d` @kind object;
  #L294fa8.  call temp:= `release`(v10, v0) @signature `Lc/h/i/d;.release:(Ljava/lang/Object;)Z` @kind interface;
  #L294fae.  return v9 @kind object;
  #L294fb0.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L294fb2.  v10:= v8.`com.bumptech.glide.load.engine.s.a` @type ^`c.h.i.d` @kind object;
  #L294fb6.  call temp:= `release`(v10, v0) @signature `Lc/h/i/d;.release:(Ljava/lang/Object;)Z` @kind interface;
  #L294fbc.  throw v9;
  catch `java.lang.Throwable` @[L294f9c..L294fa4] goto L294fb0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.engine.s` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/s;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29507c.  v0:= new `java.lang.StringBuilder`;
  #L295080.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L295086.  v1:= "LoadPath{decodePaths=" @kind object;
  #L29508a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L295090.  v1:= v2.`com.bumptech.glide.load.engine.s.b` @type ^`java.util.List` @kind object;
  #L295094.  call temp:= `toArray`(v1) @signature `Ljava/util/List;.toArray:()[Ljava/lang/Object;` @kind interface;
  #L29509a.  v1:= temp @kind object;
  #L29509c.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2950a2.  v1:= temp @kind object;
  #L2950a4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2950aa.  v1:= 125I;
  #L2950ae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2950b4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2950ba.  v0:= temp @kind object;
  #L2950bc.  return v0 @kind object;
}
