record `com.bumptech.glide.load.engine.z.h` @kind class @AccessFlag  {
  `com.bumptech.glide.load.engine.z.h$a` `com.bumptech.glide.load.engine.z.h.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.load.engine.z.h.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.z.h` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/z/h;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2966cc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2966d2.  v0:= new `com.bumptech.glide.load.engine.z.h$a`;
  #L2966d6.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/z/h$a;.<init>:()V` @kind direct;
  #L2966dc.  v1.`com.bumptech.glide.load.engine.z.h.a` @type ^`com.bumptech.glide.load.engine.z.h$a` := v0 @kind object;
  #L2966e0.  v0:= new `java.util.HashMap`;
  #L2966e4.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L2966ea.  v1.`com.bumptech.glide.load.engine.z.h.b` @type ^`java.util.Map` := v0 @kind object;
  #L2966ee.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.z.h` v1 @kind this, `com.bumptech.glide.load.engine.z.h$a` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/h;.a:(Lcom/bumptech/glide/load/engine/z/h$a;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L296700.  call `c`(v2) @signature `Lcom/bumptech/glide/load/engine/z/h;.c:(Lcom/bumptech/glide/load/engine/z/h$a;)V` @kind static;
  #L296706.  v0:= v1.`com.bumptech.glide.load.engine.z.h.a` @type ^`com.bumptech.glide.load.engine.z.h$a` @kind object;
  #L29670a.  v2.`com.bumptech.glide.load.engine.z.h$a.d` @type ^`com.bumptech.glide.load.engine.z.h$a` := v0 @kind object;
  #L29670e.  v0:= v0.`com.bumptech.glide.load.engine.z.h$a.c` @type ^`com.bumptech.glide.load.engine.z.h$a` @kind object;
  #L296712.  v2.`com.bumptech.glide.load.engine.z.h$a.c` @type ^`com.bumptech.glide.load.engine.z.h$a` := v0 @kind object;
  #L296716.  call `d`(v2) @signature `Lcom/bumptech/glide/load/engine/z/h;.d:(Lcom/bumptech/glide/load/engine/z/h$a;)V` @kind static;
  #L29671c.  return @kind void;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.z.h` v2 @kind this, `com.bumptech.glide.load.engine.z.h$a` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/h;.b:(Lcom/bumptech/glide/load/engine/z/h$a;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L296730.  call `c`(v3) @signature `Lcom/bumptech/glide/load/engine/z/h;.c:(Lcom/bumptech/glide/load/engine/z/h$a;)V` @kind static;
  #L296736.  v0:= v2.`com.bumptech.glide.load.engine.z.h.a` @type ^`com.bumptech.glide.load.engine.z.h$a` @kind object;
  #L29673a.  v1:= v0.`com.bumptech.glide.load.engine.z.h$a.d` @type ^`com.bumptech.glide.load.engine.z.h$a` @kind object;
  #L29673e.  v3.`com.bumptech.glide.load.engine.z.h$a.d` @type ^`com.bumptech.glide.load.engine.z.h$a` := v1 @kind object;
  #L296742.  v3.`com.bumptech.glide.load.engine.z.h$a.c` @type ^`com.bumptech.glide.load.engine.z.h$a` := v0 @kind object;
  #L296746.  call `d`(v3) @signature `Lcom/bumptech/glide/load/engine/z/h;.d:(Lcom/bumptech/glide/load/engine/z/h$a;)V` @kind static;
  #L29674c.  return @kind void;
}
procedure `void` `c`(`com.bumptech.glide.load.engine.z.h$a` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/h;.c:(Lcom/bumptech/glide/load/engine/z/h$a;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2967b0.  v0:= v2.`com.bumptech.glide.load.engine.z.h$a.d` @type ^`com.bumptech.glide.load.engine.z.h$a` @kind object;
  #L2967b4.  v1:= v2.`com.bumptech.glide.load.engine.z.h$a.c` @type ^`com.bumptech.glide.load.engine.z.h$a` @kind object;
  #L2967b8.  v0.`com.bumptech.glide.load.engine.z.h$a.c` @type ^`com.bumptech.glide.load.engine.z.h$a` := v1 @kind object;
  #L2967bc.  v2:= v2.`com.bumptech.glide.load.engine.z.h$a.c` @type ^`com.bumptech.glide.load.engine.z.h$a` @kind object;
  #L2967c0.  v2.`com.bumptech.glide.load.engine.z.h$a.d` @type ^`com.bumptech.glide.load.engine.z.h$a` := v0 @kind object;
  #L2967c4.  return @kind void;
}
procedure `void` `d`(`com.bumptech.glide.load.engine.z.h$a` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/h;.d:(Lcom/bumptech/glide/load/engine/z/h$a;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2967d8.  v0:= v1.`com.bumptech.glide.load.engine.z.h$a.c` @type ^`com.bumptech.glide.load.engine.z.h$a` @kind object;
  #L2967dc.  v0.`com.bumptech.glide.load.engine.z.h$a.d` @type ^`com.bumptech.glide.load.engine.z.h$a` := v1 @kind object;
  #L2967e0.  v0:= v1.`com.bumptech.glide.load.engine.z.h$a.d` @type ^`com.bumptech.glide.load.engine.z.h$a` @kind object;
  #L2967e4.  v0.`com.bumptech.glide.load.engine.z.h$a.c` @type ^`com.bumptech.glide.load.engine.z.h$a` := v1 @kind object;
  #L2967e8.  return @kind void;
}
procedure `java.lang.Object` `get`(`com.bumptech.glide.load.engine.z.h` v2 @kind this, `com.bumptech.glide.load.engine.z.m` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/h;.get:(Lcom/bumptech/glide/load/engine/z/m;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L296570.  v0:= v2.`com.bumptech.glide.load.engine.z.h.b` @type ^`java.util.Map` @kind object;
  #L296574.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L29657a.  v0:= temp @kind object;
  #L29657c.  v0:= (`com.bumptech.glide.load.engine.z.h$a`) v0 @kind object;
  #L296580.  if v0 != 0 then goto L29659a;
  #L296584.  v0:= new `com.bumptech.glide.load.engine.z.h$a`;
  #L296588.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/load/engine/z/h$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L29658e.  v1:= v2.`com.bumptech.glide.load.engine.z.h.b` @type ^`java.util.Map` @kind object;
  #L296592.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L296598.  goto L2965a0;
  #L29659a.  call `offer`(v3) @signature `Lcom/bumptech/glide/load/engine/z/m;.offer:()V` @kind interface;
  #L2965a0.  call `a`(v2, v0) @signature `Lcom/bumptech/glide/load/engine/z/h;.a:(Lcom/bumptech/glide/load/engine/z/h$a;)V` @kind direct;
  #L2965a6.  call temp:= `removeLast`(v0) @signature `Lcom/bumptech/glide/load/engine/z/h$a;.removeLast:()Ljava/lang/Object;` @kind virtual;
  #L2965ac.  v3:= temp @kind object;
  #L2965ae.  return v3 @kind object;
}
procedure `void` `put`(`com.bumptech.glide.load.engine.z.h` v2 @kind this, `com.bumptech.glide.load.engine.z.m` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/h;.put:(Lcom/bumptech/glide/load/engine/z/m;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L296760.  v0:= v2.`com.bumptech.glide.load.engine.z.h.b` @type ^`java.util.Map` @kind object;
  #L296764.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L29676a.  v0:= temp @kind object;
  #L29676c.  v0:= (`com.bumptech.glide.load.engine.z.h$a`) v0 @kind object;
  #L296770.  if v0 != 0 then goto L296790;
  #L296774.  v0:= new `com.bumptech.glide.load.engine.z.h$a`;
  #L296778.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/load/engine/z/h$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L29677e.  call `b`(v2, v0) @signature `Lcom/bumptech/glide/load/engine/z/h;.b:(Lcom/bumptech/glide/load/engine/z/h$a;)V` @kind direct;
  #L296784.  v1:= v2.`com.bumptech.glide.load.engine.z.h.b` @type ^`java.util.Map` @kind object;
  #L296788.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L29678e.  goto L296796;
  #L296790.  call `offer`(v3) @signature `Lcom/bumptech/glide/load/engine/z/m;.offer:()V` @kind interface;
  #L296796.  call `add`(v0, v4) @signature `Lcom/bumptech/glide/load/engine/z/h$a;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L29679c.  return @kind void;
}
procedure `java.lang.Object` `removeLast`(`com.bumptech.glide.load.engine.z.h` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/z/h;.removeLast:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2965c0.  v0:= v3.`com.bumptech.glide.load.engine.z.h.a` @type ^`com.bumptech.glide.load.engine.z.h$a` @kind object;
  #L2965c4.  v0:= v0.`com.bumptech.glide.load.engine.z.h$a.d` @type ^`com.bumptech.glide.load.engine.z.h$a` @kind object;
  #L2965c8.  v1:= v3.`com.bumptech.glide.load.engine.z.h.a` @type ^`com.bumptech.glide.load.engine.z.h$a` @kind object;
  #L2965cc.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2965d2.  v1:= temp;
  #L2965d4.  if v1 != 0 then goto L29660e;
  #L2965d8.  call temp:= `removeLast`(v0) @signature `Lcom/bumptech/glide/load/engine/z/h$a;.removeLast:()Ljava/lang/Object;` @kind virtual;
  #L2965de.  v1:= temp @kind object;
  #L2965e0.  if v1 == 0 then goto L2965e6;
  #L2965e4.  return v1 @kind object;
  #L2965e6.  call `c`(v0) @signature `Lcom/bumptech/glide/load/engine/z/h;.c:(Lcom/bumptech/glide/load/engine/z/h$a;)V` @kind static;
  #L2965ec.  v1:= v3.`com.bumptech.glide.load.engine.z.h.b` @type ^`java.util.Map` @kind object;
  #L2965f0.  v2:= v0.`com.bumptech.glide.load.engine.z.h$a.a` @type ^`java.lang.Object` @kind object;
  #L2965f4.  call temp:= `remove`(v1, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2965fa.  v1:= v0.`com.bumptech.glide.load.engine.z.h$a.a` @type ^`java.lang.Object` @kind object;
  #L2965fe.  v1:= (`com.bumptech.glide.load.engine.z.m`) v1 @kind object;
  #L296602.  call `offer`(v1) @signature `Lcom/bumptech/glide/load/engine/z/m;.offer:()V` @kind interface;
  #L296608.  v0:= v0.`com.bumptech.glide.load.engine.z.h$a.d` @type ^`com.bumptech.glide.load.engine.z.h$a` @kind object;
  #L29660c.  goto L2965c8;
  #L29660e.  v0:= 0I;
  #L296610.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.engine.z.h` v4 @kind this) @signature `Lcom/bumptech/glide/load/engine/z/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L296624.  v0:= new `java.lang.StringBuilder`;
  #L296628.  v1:= "GroupedLinkedMap( " @kind object;
  #L29662c.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L296632.  v1:= v4.`com.bumptech.glide.load.engine.z.h.a` @type ^`com.bumptech.glide.load.engine.z.h$a` @kind object;
  #L296636.  v1:= v1.`com.bumptech.glide.load.engine.z.h$a.c` @type ^`com.bumptech.glide.load.engine.z.h$a` @kind object;
  #L29663a.  v2:= 0I;
  #L29663c.  v3:= v4.`com.bumptech.glide.load.engine.z.h.a` @type ^`com.bumptech.glide.load.engine.z.h$a` @kind object;
  #L296640.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L296646.  v3:= temp;
  #L296648.  if v3 != 0 then goto L29668a;
  #L29664c.  v2:= 1I;
  #L29664e.  v3:= 123I;
  #L296652.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L296658.  v3:= v1.`com.bumptech.glide.load.engine.z.h$a.a` @type ^`java.lang.Object` @kind object;
  #L29665c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L296662.  v3:= 58I;
  #L296666.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L29666c.  call temp:= `size`(v1) @signature `Lcom/bumptech/glide/load/engine/z/h$a;.size:()I` @kind virtual;
  #L296672.  v3:= temp;
  #L296674.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L29667a.  v3:= "}, " @kind object;
  #L29667e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L296684.  v1:= v1.`com.bumptech.glide.load.engine.z.h$a.c` @type ^`com.bumptech.glide.load.engine.z.h$a` @kind object;
  #L296688.  goto L29663c;
  #L29668a.  if v2 == 0 then goto L2966a8;
  #L29668e.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L296694.  v1:= temp;
  #L296696.  v1:= v1 + -2;
  #L29669a.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L2966a0.  v2:= temp;
  #L2966a2.  call temp:= `delete`(v0, v1, v2) @signature `Ljava/lang/StringBuilder;.delete:(II)Ljava/lang/StringBuilder;` @kind virtual;
  #L2966a8.  v1:= " )" @kind object;
  #L2966ac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2966b2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2966b8.  v0:= temp @kind object;
  #L2966ba.  return v0 @kind object;
}
