record `com.bumptech.glide.load.engine.z.h$a` @kind class @AccessFlag  {
  `java.lang.Object` `com.bumptech.glide.load.engine.z.h$a.a` @AccessFlag FINAL;
  `java.util.List` `com.bumptech.glide.load.engine.z.h$a.b` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.z.h$a` `com.bumptech.glide.load.engine.z.h$a.c` @AccessFlag ;
  `com.bumptech.glide.load.engine.z.h$a` `com.bumptech.glide.load.engine.z.h$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.z.h$a` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/z/h$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2964fc.  v0:= 0I;
  #L2964fe.  call `<init>`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/z/h$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L296504.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.z.h$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/h$a;.<init>:(Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L296518.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29651e.  v0.`com.bumptech.glide.load.engine.z.h$a.d` @type ^`com.bumptech.glide.load.engine.z.h$a` := v0 @kind object;
  #L296522.  v0.`com.bumptech.glide.load.engine.z.h$a.c` @type ^`com.bumptech.glide.load.engine.z.h$a` := v0 @kind object;
  #L296526.  v0.`com.bumptech.glide.load.engine.z.h$a.a` @type ^`java.lang.Object` := v1 @kind object;
  #L29652a.  return @kind void;
}
procedure `void` `add`(`com.bumptech.glide.load.engine.z.h$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/h$a;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29653c.  v0:= v1.`com.bumptech.glide.load.engine.z.h$a.b` @type ^`java.util.List` @kind object;
  #L296540.  if v0 != 0 then goto L296552;
  #L296544.  v0:= new `java.util.ArrayList`;
  #L296548.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L29654e.  v1.`com.bumptech.glide.load.engine.z.h$a.b` @type ^`java.util.List` := v0 @kind object;
  #L296552.  v0:= v1.`com.bumptech.glide.load.engine.z.h$a.b` @type ^`java.util.List` @kind object;
  #L296556.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L29655c.  return @kind void;
}
procedure `java.lang.Object` `removeLast`(`com.bumptech.glide.load.engine.z.h$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/z/h$a;.removeLast:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2964c8.  call temp:= `size`(v2) @signature `Lcom/bumptech/glide/load/engine/z/h$a;.size:()I` @kind virtual;
  #L2964ce.  v0:= temp;
  #L2964d0.  if v0 <= 0 then goto L2964e6;
  #L2964d4.  v1:= v2.`com.bumptech.glide.load.engine.z.h$a.b` @type ^`java.util.List` @kind object;
  #L2964d8.  v0:= v0 + -1;
  #L2964dc.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L2964e2.  v0:= temp @kind object;
  #L2964e4.  goto L2964e8;
  #L2964e6.  v0:= 0I;
  #L2964e8.  return v0 @kind object;
}
procedure `int` `size`(`com.bumptech.glide.load.engine.z.h$a` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/z/h$a;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2964a0.  v0:= v1.`com.bumptech.glide.load.engine.z.h$a.b` @type ^`java.util.List` @kind object;
  #L2964a4.  if v0 == 0 then goto L2964b2;
  #L2964a8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2964ae.  v0:= temp;
  #L2964b0.  goto L2964b4;
  #L2964b2.  v0:= 0I;
  #L2964b4.  return v0;
}
