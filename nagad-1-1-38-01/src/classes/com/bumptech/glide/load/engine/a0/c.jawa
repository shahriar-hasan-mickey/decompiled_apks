record `com.bumptech.glide.load.engine.a0.c` @kind class @AccessFlag FINAL {
  `java.util.Map` `com.bumptech.glide.load.engine.a0.c.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.a0.c$b` `com.bumptech.glide.load.engine.a0.c.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a0.c` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/a0/c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2981b4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2981ba.  v0:= new `java.util.HashMap`;
  #L2981be.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L2981c4.  v1.`com.bumptech.glide.load.engine.a0.c.a` @type ^`java.util.Map` := v0 @kind object;
  #L2981c8.  v0:= new `com.bumptech.glide.load.engine.a0.c$b`;
  #L2981cc.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/a0/c$b;.<init>:()V` @kind direct;
  #L2981d2.  v1.`com.bumptech.glide.load.engine.a0.c.b` @type ^`com.bumptech.glide.load.engine.a0.c$b` := v0 @kind object;
  #L2981d6.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.a0.c` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/a0/c;.a:(Ljava/lang/String;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2981e8.  @monitorenter v2
  #L2981ea.  v0:= v2.`com.bumptech.glide.load.engine.a0.c.a` @type ^`java.util.Map` @kind object;
  #L2981ee.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2981f4.  v0:= temp @kind object;
  #L2981f6.  v0:= (`com.bumptech.glide.load.engine.a0.c$a`) v0 @kind object;
  #L2981fa.  if v0 != 0 then goto L298214;
  #L2981fe.  v0:= v2.`com.bumptech.glide.load.engine.a0.c.b` @type ^`com.bumptech.glide.load.engine.a0.c$b` @kind object;
  #L298202.  call temp:= `a`(v0) @signature `Lcom/bumptech/glide/load/engine/a0/c$b;.a:()Lcom/bumptech/glide/load/engine/a0/c$a;` @kind virtual;
  #L298208.  v0:= temp @kind object;
  #L29820a.  v1:= v2.`com.bumptech.glide.load.engine.a0.c.a` @type ^`java.util.Map` @kind object;
  #L29820e.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L298214.  v3:= v0.`com.bumptech.glide.load.engine.a0.c$a.b` @type ^`int`;
  #L298218.  v3:= v3 + 1;
  #L29821c.  v0.`com.bumptech.glide.load.engine.a0.c$a.b` @type ^`int` := v3;
  #L298220.  @monitorexit v2
  #L298222.  v3:= v0.`com.bumptech.glide.load.engine.a0.c$a.a` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L298226.  call `lock`(v3) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L29822c.  return @kind void;
  #L29822e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L298230.  @monitorexit v2
  #L298232.  throw v3;
  catch `java.lang.Throwable` @[L2981ea..L298222] goto L29822e;
  catch `java.lang.Throwable` @[L298230..L298232] goto L29822e;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.a0.c` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lcom/bumptech/glide/load/engine/a0/c;.b:(Ljava/lang/String;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L298258.  @monitorenter v5
  #L29825a.  v0:= v5.`com.bumptech.glide.load.engine.a0.c.a` @type ^`java.util.Map` @kind object;
  #L29825e.  call temp:= `get`(v0, v6) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L298264.  v0:= temp @kind object;
  #L298266.  call temp:= `checkNotNull`(v0) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L29826c.  v0:= (`com.bumptech.glide.load.engine.a0.c$a`) v0 @kind object;
  #L298270.  v1:= v0.`com.bumptech.glide.load.engine.a0.c$a.b` @type ^`int`;
  #L298274.  v2:= 1I;
  #L298276.  if v1 < v2 then goto L298310;
  #L29827a.  v1:= v0.`com.bumptech.glide.load.engine.a0.c$a.b` @type ^`int`;
  #L29827e.  v1:= v1 - v2 @kind int;
  #L298280.  v0.`com.bumptech.glide.load.engine.a0.c$a.b` @type ^`int` := v1;
  #L298284.  v1:= v0.`com.bumptech.glide.load.engine.a0.c$a.b` @type ^`int`;
  #L298288.  if v1 != 0 then goto L298302;
  #L29828c.  v1:= v5.`com.bumptech.glide.load.engine.a0.c.a` @type ^`java.util.Map` @kind object;
  #L298290.  call temp:= `remove`(v1, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L298296.  v1:= temp @kind object;
  #L298298.  v1:= (`com.bumptech.glide.load.engine.a0.c$a`) v1 @kind object;
  #L29829c.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2982a2.  v2:= temp;
  #L2982a4.  if v2 == 0 then goto L2982b4;
  #L2982a8.  v6:= v5.`com.bumptech.glide.load.engine.a0.c.b` @type ^`com.bumptech.glide.load.engine.a0.c$b` @kind object;
  #L2982ac.  call `a`(v6, v1) @signature `Lcom/bumptech/glide/load/engine/a0/c$b;.a:(Lcom/bumptech/glide/load/engine/a0/c$a;)V` @kind virtual;
  #L2982b2.  goto L298302;
  #L2982b4.  v2:= new `java.lang.IllegalStateException`;
  #L2982b8.  v3:= new `java.lang.StringBuilder`;
  #L2982bc.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2982c2.  v4:= "Removed the wrong lock, expected to remove: " @kind object;
  #L2982c6.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2982cc.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2982d2.  v0:= ", but actually removed: " @kind object;
  #L2982d6.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2982dc.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2982e2.  v0:= ", safeKey: " @kind object;
  #L2982e6.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2982ec.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2982f2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2982f8.  v6:= temp @kind object;
  #L2982fa.  call `<init>`(v2, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L298300.  throw v2;
  #L298302.  @monitorexit v5
  #L298304.  v6:= v0.`com.bumptech.glide.load.engine.a0.c$a.a` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L298308.  call `unlock`(v6) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L29830e.  return @kind void;
  #L298310.  v1:= new `java.lang.IllegalStateException`;
  #L298314.  v2:= new `java.lang.StringBuilder`;
  #L298318.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L29831e.  v3:= "Cannot release a lock that is not held, safeKey: " @kind object;
  #L298322.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L298328.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29832e.  v6:= ", interestedThreads: " @kind object;
  #L298332.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L298338.  v6:= v0.`com.bumptech.glide.load.engine.a0.c$a.b` @type ^`int`;
  #L29833c.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L298342.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L298348.  v6:= temp @kind object;
  #L29834a.  call `<init>`(v1, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L298350.  throw v1;
  #L298352.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L298354.  @monitorexit v5
  #L298356.  throw v6;
  catch `java.lang.Throwable` @[L29825a..L298304] goto L298352;
  catch `java.lang.Throwable` @[L298310..L298356] goto L298352;
}
