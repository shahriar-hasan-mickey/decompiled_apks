record `com.bumptech.glide.load.engine.z.j` @kind class @AccessFlag PUBLIC_FINAL extends `com.bumptech.glide.load.engine.z.b` @kind interface {
  `com.bumptech.glide.load.engine.z.h` `com.bumptech.glide.load.engine.z.j.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.z.j$b` `com.bumptech.glide.load.engine.z.j.b` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.load.engine.z.j.c` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.load.engine.z.j.d` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.z.j.e` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.z.j.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.z.j` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/load/engine/z/j;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L296d50.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L296d56.  v0:= new `com.bumptech.glide.load.engine.z.h`;
  #L296d5a.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/z/h;.<init>:()V` @kind direct;
  #L296d60.  v1.`com.bumptech.glide.load.engine.z.j.a` @type ^`com.bumptech.glide.load.engine.z.h` := v0 @kind object;
  #L296d64.  v0:= new `com.bumptech.glide.load.engine.z.j$b`;
  #L296d68.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/z/j$b;.<init>:()V` @kind direct;
  #L296d6e.  v1.`com.bumptech.glide.load.engine.z.j.b` @type ^`com.bumptech.glide.load.engine.z.j$b` := v0 @kind object;
  #L296d72.  v0:= new `java.util.HashMap`;
  #L296d76.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L296d7c.  v1.`com.bumptech.glide.load.engine.z.j.c` @type ^`java.util.Map` := v0 @kind object;
  #L296d80.  v0:= new `java.util.HashMap`;
  #L296d84.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L296d8a.  v1.`com.bumptech.glide.load.engine.z.j.d` @type ^`java.util.Map` := v0 @kind object;
  #L296d8e.  v1.`com.bumptech.glide.load.engine.z.j.e` @type ^`int` := v2;
  #L296d92.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.z.a` `a`(`com.bumptech.glide.load.engine.z.j` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(Ljava/lang/Class;)Lcom/bumptech/glide/load/engine/z/a;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L296ae4.  v0:= v3.`com.bumptech.glide.load.engine.z.j.d` @type ^`java.util.Map` @kind object;
  #L296ae8.  call temp:= `get`(v0, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L296aee.  v0:= temp @kind object;
  #L296af0.  v0:= (`com.bumptech.glide.load.engine.z.a`) v0 @kind object;
  #L296af4.  if v0 != 0 then goto L296b70;
  #L296af8.  v0:= constclass @type ^`int`[] @kind object;
  #L296afc.  call temp:= `equals`(v4, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L296b02.  v0:= temp;
  #L296b04.  if v0 == 0 then goto L296b14;
  #L296b08.  v0:= new `com.bumptech.glide.load.engine.z.i`;
  #L296b0c.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/z/i;.<init>:()V` @kind direct;
  #L296b12.  goto L296b2e;
  #L296b14.  v0:= constclass @type ^`byte`[] @kind object;
  #L296b18.  call temp:= `equals`(v4, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L296b1e.  v0:= temp;
  #L296b20.  if v0 == 0 then goto L296b3a;
  #L296b24.  v0:= new `com.bumptech.glide.load.engine.z.g`;
  #L296b28.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/z/g;.<init>:()V` @kind direct;
  #L296b2e.  v1:= v3.`com.bumptech.glide.load.engine.z.j.d` @type ^`java.util.Map` @kind object;
  #L296b32.  call temp:= `put`(v1, v4, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L296b38.  goto L296b70;
  #L296b3a.  v0:= new `java.lang.IllegalArgumentException`;
  #L296b3e.  v1:= new `java.lang.StringBuilder`;
  #L296b42.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L296b48.  v2:= "No array pool found for: " @kind object;
  #L296b4c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L296b52.  call temp:= `getSimpleName`(v4) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L296b58.  v4:= temp @kind object;
  #L296b5a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L296b60.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L296b66.  v4:= temp @kind object;
  #L296b68.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L296b6e.  throw v0;
  #L296b70.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.z.a` `a`(`com.bumptech.glide.load.engine.z.j` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(Ljava/lang/Object;)Lcom/bumptech/glide/load/engine/z/a;` @AccessFlag PRIVATE {
    temp;

  #L296ac0.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L296ac6.  v1:= temp @kind object;
  #L296ac8.  call temp:= `a`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(Ljava/lang/Class;)Lcom/bumptech/glide/load/engine/z/a;` @kind direct;
  #L296ace.  v1:= temp @kind object;
  #L296ad0.  return v1 @kind object;
}
procedure `java.lang.Object` `a`(`com.bumptech.glide.load.engine.z.j` v1 @kind this, `com.bumptech.glide.load.engine.z.j$a` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(Lcom/bumptech/glide/load/engine/z/j$a;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L296c00.  v0:= v1.`com.bumptech.glide.load.engine.z.j.a` @type ^`com.bumptech.glide.load.engine.z.h` @kind object;
  #L296c04.  call temp:= `get`(v0, v2) @signature `Lcom/bumptech/glide/load/engine/z/h;.get:(Lcom/bumptech/glide/load/engine/z/m;)Ljava/lang/Object;` @kind virtual;
  #L296c0a.  v2:= temp @kind object;
  #L296c0c.  return v2 @kind object;
}
procedure `java.lang.Object` `a`(`com.bumptech.glide.load.engine.z.j` v5 @kind this, `com.bumptech.glide.load.engine.z.j$a` v6 @kind object, `java.lang.Class` v7 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(Lcom/bumptech/glide/load/engine/z/j$a;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L296c5c.  call temp:= `a`(v5, v7) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(Ljava/lang/Class;)Lcom/bumptech/glide/load/engine/z/a;` @kind direct;
  #L296c62.  v0:= temp @kind object;
  #L296c64.  call temp:= `a`(v5, v6) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(Lcom/bumptech/glide/load/engine/z/j$a;)Ljava/lang/Object;` @kind direct;
  #L296c6a.  v1:= temp @kind object;
  #L296c6c.  if v1 == 0 then goto L296c9c;
  #L296c70.  v2:= v5.`com.bumptech.glide.load.engine.z.j.f` @type ^`int`;
  #L296c74.  call temp:= `getArrayLength`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/z/a;.getArrayLength:(Ljava/lang/Object;)I` @kind interface;
  #L296c7a.  v3:= temp;
  #L296c7c.  call temp:= `getElementSizeInBytes`(v0) @signature `Lcom/bumptech/glide/load/engine/z/a;.getElementSizeInBytes:()I` @kind interface;
  #L296c82.  v4:= temp;
  #L296c84.  v3:= v3 * v4 @kind int;
  #L296c88.  v2:= v2 - v3 @kind int;
  #L296c8a.  v5.`com.bumptech.glide.load.engine.z.j.f` @type ^`int` := v2;
  #L296c8e.  call temp:= `getArrayLength`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/z/a;.getArrayLength:(Ljava/lang/Object;)I` @kind interface;
  #L296c94.  v2:= temp;
  #L296c96.  call `a`(v5, v2, v7) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(ILjava/lang/Class;)V` @kind direct;
  #L296c9c.  if v1 != 0 then goto L296d00;
  #L296ca0.  call temp:= `getTag`(v0) @signature `Lcom/bumptech/glide/load/engine/z/a;.getTag:()Ljava/lang/String;` @kind interface;
  #L296ca6.  v7:= temp @kind object;
  #L296ca8.  v1:= 2I;
  #L296caa.  call temp:= `isLoggable`(v7, v1) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L296cb0.  v7:= temp;
  #L296cb2.  if v7 == 0 then goto L296cf4;
  #L296cb6.  call temp:= `getTag`(v0) @signature `Lcom/bumptech/glide/load/engine/z/a;.getTag:()Ljava/lang/String;` @kind interface;
  #L296cbc.  v7:= temp @kind object;
  #L296cbe.  v1:= new `java.lang.StringBuilder`;
  #L296cc2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L296cc8.  v2:= "Allocated " @kind object;
  #L296ccc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L296cd2.  v2:= v6.`com.bumptech.glide.load.engine.z.j$a.b` @type ^`int`;
  #L296cd6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L296cdc.  v2:= " bytes" @kind object;
  #L296ce0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L296ce6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L296cec.  v1:= temp @kind object;
  #L296cee.  call temp:= `v`(v7, v1) @signature `Landroid/util/Log;.v:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L296cf4.  v6:= v6.`com.bumptech.glide.load.engine.z.j$a.b` @type ^`int`;
  #L296cf8.  call temp:= `newArray`(v0, v6) @signature `Lcom/bumptech/glide/load/engine/z/a;.newArray:(I)Ljava/lang/Object;` @kind interface;
  #L296cfe.  v1:= temp @kind object;
  #L296d00.  return v1 @kind object;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.z.j` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L296e84.  v0:= v1.`com.bumptech.glide.load.engine.z.j.e` @type ^`int`;
  #L296e88.  call `a`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(I)V` @kind direct;
  #L296e8e.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.z.j` v5 @kind this, `int` v6 ) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L296ea0.  v0:= v5.`com.bumptech.glide.load.engine.z.j.f` @type ^`int`;
  #L296ea4.  if v0 <= v6 then goto L296f46;
  #L296ea8.  v0:= v5.`com.bumptech.glide.load.engine.z.j.a` @type ^`com.bumptech.glide.load.engine.z.h` @kind object;
  #L296eac.  call temp:= `removeLast`(v0) @signature `Lcom/bumptech/glide/load/engine/z/h;.removeLast:()Ljava/lang/Object;` @kind virtual;
  #L296eb2.  v0:= temp @kind object;
  #L296eb4.  call temp:= `checkNotNull`(v0) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L296eba.  call temp:= `a`(v5, v0) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(Ljava/lang/Object;)Lcom/bumptech/glide/load/engine/z/a;` @kind direct;
  #L296ec0.  v1:= temp @kind object;
  #L296ec2.  v2:= v5.`com.bumptech.glide.load.engine.z.j.f` @type ^`int`;
  #L296ec6.  call temp:= `getArrayLength`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/z/a;.getArrayLength:(Ljava/lang/Object;)I` @kind interface;
  #L296ecc.  v3:= temp;
  #L296ece.  call temp:= `getElementSizeInBytes`(v1) @signature `Lcom/bumptech/glide/load/engine/z/a;.getElementSizeInBytes:()I` @kind interface;
  #L296ed4.  v4:= temp;
  #L296ed6.  v3:= v3 * v4 @kind int;
  #L296eda.  v2:= v2 - v3 @kind int;
  #L296edc.  v5.`com.bumptech.glide.load.engine.z.j.f` @type ^`int` := v2;
  #L296ee0.  call temp:= `getArrayLength`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/z/a;.getArrayLength:(Ljava/lang/Object;)I` @kind interface;
  #L296ee6.  v2:= temp;
  #L296ee8.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L296eee.  v3:= temp @kind object;
  #L296ef0.  call `a`(v5, v2, v3) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(ILjava/lang/Class;)V` @kind direct;
  #L296ef6.  call temp:= `getTag`(v1) @signature `Lcom/bumptech/glide/load/engine/z/a;.getTag:()Ljava/lang/String;` @kind interface;
  #L296efc.  v2:= temp @kind object;
  #L296efe.  v3:= 2I;
  #L296f00.  call temp:= `isLoggable`(v2, v3) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L296f06.  v2:= temp;
  #L296f08.  if v2 == 0 then goto L296ea0;
  #L296f0c.  call temp:= `getTag`(v1) @signature `Lcom/bumptech/glide/load/engine/z/a;.getTag:()Ljava/lang/String;` @kind interface;
  #L296f12.  v2:= temp @kind object;
  #L296f14.  v3:= new `java.lang.StringBuilder`;
  #L296f18.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L296f1e.  v4:= "evicted: " @kind object;
  #L296f22.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L296f28.  call temp:= `getArrayLength`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/z/a;.getArrayLength:(Ljava/lang/Object;)I` @kind interface;
  #L296f2e.  v0:= temp;
  #L296f30.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L296f36.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L296f3c.  v0:= temp @kind object;
  #L296f3e.  call temp:= `v`(v2, v0) @signature `Landroid/util/Log;.v:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L296f44.  goto L296ea0;
  #L296f46.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.z.j` v3 @kind this, `int` v4 , `java.lang.Class` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(ILjava/lang/Class;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L296dd4.  call temp:= `b`(v3, v5) @signature `Lcom/bumptech/glide/load/engine/z/j;.b:(Ljava/lang/Class;)Ljava/util/NavigableMap;` @kind direct;
  #L296dda.  v5:= temp @kind object;
  #L296ddc.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L296de2.  v0:= temp @kind object;
  #L296de4.  call temp:= `get`(v5, v0) @signature `Ljava/util/NavigableMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L296dea.  v0:= temp @kind object;
  #L296dec.  v0:= (`java.lang.Integer`) v0 @kind object;
  #L296df0.  if v0 == 0 then goto L296e34;
  #L296df4.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L296dfa.  v1:= temp;
  #L296dfc.  v2:= 1I;
  #L296dfe.  if v1 != v2 then goto L296e12;
  #L296e02.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L296e08.  v4:= temp @kind object;
  #L296e0a.  call temp:= `remove`(v5, v4) @signature `Ljava/util/NavigableMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L296e10.  goto L296e32;
  #L296e12.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L296e18.  v4:= temp @kind object;
  #L296e1a.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L296e20.  v0:= temp;
  #L296e22.  v0:= v0 - v2 @kind int;
  #L296e24.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L296e2a.  v0:= temp @kind object;
  #L296e2c.  call temp:= `put`(v5, v4, v0) @signature `Ljava/util/NavigableMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L296e32.  return @kind void;
  #L296e34.  v5:= new `java.lang.NullPointerException`;
  #L296e38.  v0:= new `java.lang.StringBuilder`;
  #L296e3c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L296e42.  v1:= "Tried to decrement empty size, size: " @kind object;
  #L296e46.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L296e4c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L296e52.  v4:= ", this: " @kind object;
  #L296e56.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L296e5c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L296e62.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L296e68.  v4:= temp @kind object;
  #L296e6a.  call `<init>`(v5, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L296e70.  throw v5;
}
procedure `boolean` `a`(`com.bumptech.glide.load.engine.z.j` v1 @kind this, `int` v2 , `java.lang.Integer` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(ILjava/lang/Integer;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L296a88.  if v3 == 0 then goto L296aac;
  #L296a8c.  call temp:= `b`(v1) @signature `Lcom/bumptech/glide/load/engine/z/j;.b:()Z` @kind direct;
  #L296a92.  v0:= temp;
  #L296a94.  if v0 != 0 then goto L296aa8;
  #L296a98.  call temp:= `intValue`(v3) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L296a9e.  v3:= temp;
  #L296aa0.  v2:= v2 * 8;
  #L296aa4.  if v3 > v2 then goto L296aac;
  #L296aa8.  v2:= 1I;
  #L296aaa.  goto L296aae;
  #L296aac.  v2:= 0I;
  #L296aae.  return v2;
}
procedure `java.util.NavigableMap` `b`(`com.bumptech.glide.load.engine.z.j` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/j;.b:(Ljava/lang/Class;)Ljava/util/NavigableMap;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L296d14.  v0:= v2.`com.bumptech.glide.load.engine.z.j.c` @type ^`java.util.Map` @kind object;
  #L296d18.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L296d1e.  v0:= temp @kind object;
  #L296d20.  v0:= (`java.util.NavigableMap`) v0 @kind object;
  #L296d24.  if v0 != 0 then goto L296d3c;
  #L296d28.  v0:= new `java.util.TreeMap`;
  #L296d2c.  call `<init>`(v0) @signature `Ljava/util/TreeMap;.<init>:()V` @kind direct;
  #L296d32.  v1:= v2.`com.bumptech.glide.load.engine.z.j.c` @type ^`java.util.Map` @kind object;
  #L296d36.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L296d3c.  return v0 @kind object;
}
procedure `boolean` `b`(`com.bumptech.glide.load.engine.z.j` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/z/j;.b:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L296a34.  v0:= v2.`com.bumptech.glide.load.engine.z.j.f` @type ^`int`;
  #L296a38.  if v0 == 0 then goto L296a4e;
  #L296a3c.  v1:= v2.`com.bumptech.glide.load.engine.z.j.e` @type ^`int`;
  #L296a40.  v1:= v1 / v0 @kind int;
  #L296a42.  v0:= 2I;
  #L296a44.  if v1 < v0 then goto L296a4a;
  #L296a48.  goto L296a4e;
  #L296a4a.  v0:= 0I;
  #L296a4c.  goto L296a50;
  #L296a4e.  v0:= 1I;
  #L296a50.  return v0;
}
procedure `boolean` `b`(`com.bumptech.glide.load.engine.z.j` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/load/engine/z/j;.b:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L296a64.  v0:= v1.`com.bumptech.glide.load.engine.z.j.e` @type ^`int`;
  #L296a68.  v0:= v0 / 2;
  #L296a6c.  if v2 > v0 then goto L296a74;
  #L296a70.  v2:= 1I;
  #L296a72.  goto L296a76;
  #L296a74.  v2:= 0I;
  #L296a76.  return v2;
}
procedure `void` `clearMemory`(`com.bumptech.glide.load.engine.z.j` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/z/j;.clearMemory:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L296da4.  @monitorenter v1
  #L296da6.  v0:= 0I;
  #L296da8.  call `a`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(I)V` @kind direct;
  #L296dae.  @monitorexit v1
  #L296db0.  return @kind void;
  #L296db2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L296db4.  @monitorexit v1
  #L296db6.  throw v0;
  catch `java.lang.Throwable` @[L296da8..L296dae] goto L296db2;
}
procedure `java.lang.Object` `get`(`com.bumptech.glide.load.engine.z.j` v2 @kind this, `int` v3 , `java.lang.Class` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/j;.get:(ILjava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L296b84.  @monitorenter v2
  #L296b86.  call temp:= `b`(v2, v4) @signature `Lcom/bumptech/glide/load/engine/z/j;.b:(Ljava/lang/Class;)Ljava/util/NavigableMap;` @kind direct;
  #L296b8c.  v0:= temp @kind object;
  #L296b8e.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L296b94.  v1:= temp @kind object;
  #L296b96.  call temp:= `ceilingKey`(v0, v1) @signature `Ljava/util/NavigableMap;.ceilingKey:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L296b9c.  v0:= temp @kind object;
  #L296b9e.  v0:= (`java.lang.Integer`) v0 @kind object;
  #L296ba2.  call temp:= `a`(v2, v3, v0) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(ILjava/lang/Integer;)Z` @kind direct;
  #L296ba8.  v1:= temp;
  #L296baa.  if v1 == 0 then goto L296bc4;
  #L296bae.  v3:= v2.`com.bumptech.glide.load.engine.z.j.b` @type ^`com.bumptech.glide.load.engine.z.j$b` @kind object;
  #L296bb2.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L296bb8.  v0:= temp;
  #L296bba.  call temp:= `a`(v3, v0, v4) @signature `Lcom/bumptech/glide/load/engine/z/j$b;.a:(ILjava/lang/Class;)Lcom/bumptech/glide/load/engine/z/j$a;` @kind virtual;
  #L296bc0.  v3:= temp @kind object;
  #L296bc2.  goto L296bd0;
  #L296bc4.  v0:= v2.`com.bumptech.glide.load.engine.z.j.b` @type ^`com.bumptech.glide.load.engine.z.j$b` @kind object;
  #L296bc8.  call temp:= `a`(v0, v3, v4) @signature `Lcom/bumptech/glide/load/engine/z/j$b;.a:(ILjava/lang/Class;)Lcom/bumptech/glide/load/engine/z/j$a;` @kind virtual;
  #L296bce.  v3:= temp @kind object;
  #L296bd0.  call temp:= `a`(v2, v3, v4) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(Lcom/bumptech/glide/load/engine/z/j$a;Ljava/lang/Class;)Ljava/lang/Object;` @kind direct;
  #L296bd6.  v3:= temp @kind object;
  #L296bd8.  @monitorexit v2
  #L296bda.  return v3 @kind object;
  #L296bdc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L296bde.  @monitorexit v2
  #L296be0.  throw v3;
  catch `java.lang.Throwable` @[L296b86..L296bd8] goto L296bdc;
}
procedure `java.lang.Object` `getExact`(`com.bumptech.glide.load.engine.z.j` v1 @kind this, `int` v2 , `java.lang.Class` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/j;.getExact:(ILjava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L296c20.  @monitorenter v1
  #L296c22.  v0:= v1.`com.bumptech.glide.load.engine.z.j.b` @type ^`com.bumptech.glide.load.engine.z.j$b` @kind object;
  #L296c26.  call temp:= `a`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/engine/z/j$b;.a:(ILjava/lang/Class;)Lcom/bumptech/glide/load/engine/z/j$a;` @kind virtual;
  #L296c2c.  v2:= temp @kind object;
  #L296c2e.  call temp:= `a`(v1, v2, v3) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(Lcom/bumptech/glide/load/engine/z/j$a;Ljava/lang/Class;)Ljava/lang/Object;` @kind direct;
  #L296c34.  v2:= temp @kind object;
  #L296c36.  @monitorexit v1
  #L296c38.  return v2 @kind object;
  #L296c3a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L296c3c.  @monitorexit v1
  #L296c3e.  throw v2;
  catch `java.lang.Throwable` @[L296c22..L296c36] goto L296c3a;
}
procedure `void` `put`(`com.bumptech.glide.load.engine.z.j` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/z/j;.put:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L296f58.  @monitorenter v4
  #L296f5a.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L296f60.  v0:= temp @kind object;
  #L296f62.  call temp:= `a`(v4, v0) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(Ljava/lang/Class;)Lcom/bumptech/glide/load/engine/z/a;` @kind direct;
  #L296f68.  v1:= temp @kind object;
  #L296f6a.  call temp:= `getArrayLength`(v1, v5) @signature `Lcom/bumptech/glide/load/engine/z/a;.getArrayLength:(Ljava/lang/Object;)I` @kind interface;
  #L296f70.  v2:= temp;
  #L296f72.  call temp:= `getElementSizeInBytes`(v1) @signature `Lcom/bumptech/glide/load/engine/z/a;.getElementSizeInBytes:()I` @kind interface;
  #L296f78.  v1:= temp;
  #L296f7a.  v1:= v1 * v2 @kind int;
  #L296f7e.  call temp:= `b`(v4, v1) @signature `Lcom/bumptech/glide/load/engine/z/j;.b:(I)Z` @kind direct;
  #L296f84.  v3:= temp;
  #L296f86.  if v3 != 0 then goto L296f8e;
  #L296f8a.  @monitorexit v4
  #L296f8c.  return @kind void;
  #L296f8e.  v3:= v4.`com.bumptech.glide.load.engine.z.j.b` @type ^`com.bumptech.glide.load.engine.z.j$b` @kind object;
  #L296f92.  call temp:= `a`(v3, v2, v0) @signature `Lcom/bumptech/glide/load/engine/z/j$b;.a:(ILjava/lang/Class;)Lcom/bumptech/glide/load/engine/z/j$a;` @kind virtual;
  #L296f98.  v2:= temp @kind object;
  #L296f9a.  v3:= v4.`com.bumptech.glide.load.engine.z.j.a` @type ^`com.bumptech.glide.load.engine.z.h` @kind object;
  #L296f9e.  call `put`(v3, v2, v5) @signature `Lcom/bumptech/glide/load/engine/z/h;.put:(Lcom/bumptech/glide/load/engine/z/m;Ljava/lang/Object;)V` @kind virtual;
  #L296fa4.  call temp:= `b`(v4, v0) @signature `Lcom/bumptech/glide/load/engine/z/j;.b:(Ljava/lang/Class;)Ljava/util/NavigableMap;` @kind direct;
  #L296faa.  v5:= temp @kind object;
  #L296fac.  v0:= v2.`com.bumptech.glide.load.engine.z.j$a.b` @type ^`int`;
  #L296fb0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L296fb6.  v0:= temp @kind object;
  #L296fb8.  call temp:= `get`(v5, v0) @signature `Ljava/util/NavigableMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L296fbe.  v0:= temp @kind object;
  #L296fc0.  v0:= (`java.lang.Integer`) v0 @kind object;
  #L296fc4.  v2:= v2.`com.bumptech.glide.load.engine.z.j$a.b` @type ^`int`;
  #L296fc8.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L296fce.  v2:= temp @kind object;
  #L296fd0.  v3:= 1I;
  #L296fd2.  if v0 != 0 then goto L296fd8;
  #L296fd6.  goto L296fe2;
  #L296fd8.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L296fde.  v0:= temp;
  #L296fe0.  v3:= v3 + v0 @kind int;
  #L296fe2.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L296fe8.  v0:= temp @kind object;
  #L296fea.  call temp:= `put`(v5, v2, v0) @signature `Ljava/util/NavigableMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L296ff0.  v5:= v4.`com.bumptech.glide.load.engine.z.j.f` @type ^`int`;
  #L296ff4.  v5:= v5 + v1 @kind int;
  #L296ff6.  v4.`com.bumptech.glide.load.engine.z.j.f` @type ^`int` := v5;
  #L296ffa.  call `a`(v4) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:()V` @kind direct;
  #L297000.  @monitorexit v4
  #L297002.  return @kind void;
  #L297004.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L297006.  @monitorexit v4
  #L297008.  throw v5;
  catch `java.lang.Throwable` @[L296f5a..L296f86] goto L297004;
  catch `java.lang.Throwable` @[L296f8e..L297000] goto L297004;
}
procedure `void` `trimMemory`(`com.bumptech.glide.load.engine.z.j` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/load/engine/z/j;.trimMemory:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L297030.  @monitorenter v1
  #L297032.  v0:= 40I;
  #L297036.  if v2 < v0 then goto L297046;
  #L29703a.  call `clearMemory`(v1) @signature `Lcom/bumptech/glide/load/engine/z/j;.clearMemory:()V` @kind virtual;
  #L297040.  goto L297064;
  #L297042.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L297044.  goto L297068;
  #L297046.  v0:= 20I;
  #L29704a.  if v2 >= v0 then goto L297056;
  #L29704e.  v0:= 15I;
  #L297052.  if v2 != v0 then goto L297064;
  #L297056.  v2:= v1.`com.bumptech.glide.load.engine.z.j.e` @type ^`int`;
  #L29705a.  v2:= v2 / 2;
  #L29705e.  call `a`(v1, v2) @signature `Lcom/bumptech/glide/load/engine/z/j;.a:(I)V` @kind direct;
  #L297064.  @monitorexit v1
  #L297066.  return @kind void;
  #L297068.  @monitorexit v1
  #L29706a.  throw v2;
  catch `java.lang.Throwable` @[L29703a..L297064] goto L297042;
}
