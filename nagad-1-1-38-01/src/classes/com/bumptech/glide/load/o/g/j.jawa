record `com.bumptech.glide.load.o.g.j` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.j` @kind interface {
  `java.util.List` `com.bumptech.glide.load.o.g.j.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.j` `com.bumptech.glide.load.o.g.j.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.z.b` `com.bumptech.glide.load.o.g.j.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.o.g.j` v0 @kind this, `java.util.List` v1 @kind object, `com.bumptech.glide.load.j` v2 @kind object, `com.bumptech.glide.load.engine.z.b` v3 @kind object) @signature `Lcom/bumptech/glide/load/o/g/j;.<init>:(Ljava/util/List;Lcom/bumptech/glide/load/j;Lcom/bumptech/glide/load/engine/z/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2a4498.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a449e.  v0.`com.bumptech.glide.load.o.g.j.a` @type ^`java.util.List` := v1 @kind object;
  #L2a44a2.  v0.`com.bumptech.glide.load.o.g.j.b` @type ^`com.bumptech.glide.load.j` := v2 @kind object;
  #L2a44a6.  v0.`com.bumptech.glide.load.o.g.j.c` @type ^`com.bumptech.glide.load.engine.z.b` := v3 @kind object;
  #L2a44aa.  return @kind void;
}
procedure `byte`[] `a`(`java.io.InputStream` v4 @kind object) @signature `Lcom/bumptech/glide/load/o/g/j;.a:(Ljava/io/InputStream;)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2a43c4.  v0:= new `java.io.ByteArrayOutputStream`;
  #L2a43c8.  v1:= 16384I;
  #L2a43cc.  call `<init>`(v0, v1) @signature `Ljava/io/ByteArrayOutputStream;.<init>:(I)V` @kind direct;
  #L2a43d2.  v1:= new `byte`[v1];
  #L2a43d6.  call temp:= `read`(v4, v1) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L2a43dc.  v2:= temp;
  #L2a43de.  v3:= -1I;
  #L2a43e0.  if v2 == v3 then goto L2a43ee;
  #L2a43e4.  v3:= 0I;
  #L2a43e6.  call `write`(v0, v1, v3, v2) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L2a43ec.  goto L2a43d6;
  #L2a43ee.  call `flush`(v0) @signature `Ljava/io/ByteArrayOutputStream;.flush:()V` @kind virtual;
  #L2a43f4.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L2a43fa.  v4:= temp @kind object;
  #L2a43fc.  return v4 @kind object;
  #L2a43fe.  v4:= Exception @type ^`java.io.IOException` @kind object;
  #L2a4400.  v0:= 5I;
  #L2a4402.  v1:= "StreamGifDecoder" @kind object;
  #L2a4406.  call temp:= `isLoggable`(v1, v0) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2a440c.  v0:= temp;
  #L2a440e.  if v0 == 0 then goto L2a441c;
  #L2a4412.  v0:= "Error reading data from stream" @kind object;
  #L2a4416.  call temp:= `w`(v1, v0, v4) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2a441c.  v4:= 0I;
  #L2a441e.  return v4 @kind object;
  catch `java.io.IOException` @[L2a43d2..L2a43f4] goto L2a43fe;
}
procedure `com.bumptech.glide.load.engine.u` `decode`(`com.bumptech.glide.load.o.g.j` v1 @kind this, `java.io.InputStream` v2 @kind object, `int` v3 , `int` v4 , `com.bumptech.glide.load.h` v5 @kind object) @signature `Lcom/bumptech/glide/load/o/g/j;.decode:(Ljava/io/InputStream;IILcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/engine/u;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a4440.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/load/o/g/j;.a:(Ljava/io/InputStream;)[B` @kind static;
  #L2a4446.  v2:= temp @kind object;
  #L2a4448.  if v2 != 0 then goto L2a4450;
  #L2a444c.  v2:= 0I;
  #L2a444e.  return v2 @kind object;
  #L2a4450.  call temp:= `wrap`(v2) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L2a4456.  v2:= temp @kind object;
  #L2a4458.  v0:= v1.`com.bumptech.glide.load.o.g.j.b` @type ^`com.bumptech.glide.load.j` @kind object;
  #L2a445c.  call temp:= `decode`(v0, v2, v3, v4, v5) @signature `Lcom/bumptech/glide/load/j;.decode:(Ljava/lang/Object;IILcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/engine/u;` @kind interface;
  #L2a4462.  v2:= temp @kind object;
  #L2a4464.  return v2 @kind object;
}
procedure `com.bumptech.glide.load.engine.u` `decode`(`com.bumptech.glide.load.o.g.j` v0 @kind this, `java.lang.Object` v1 @kind object, `int` v2 , `int` v3 , `com.bumptech.glide.load.h` v4 @kind object) @signature `Lcom/bumptech/glide/load/o/g/j;.decode:(Ljava/lang/Object;IILcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/engine/u;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2a4478.  v1:= (`java.io.InputStream`) v1 @kind object;
  #L2a447c.  call temp:= `decode`(v0, v1, v2, v3, v4) @signature `Lcom/bumptech/glide/load/o/g/j;.decode:(Ljava/io/InputStream;IILcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/engine/u;` @kind virtual;
  #L2a4482.  v1:= temp @kind object;
  #L2a4484.  return v1 @kind object;
}
procedure `boolean` `handles`(`com.bumptech.glide.load.o.g.j` v1 @kind this, `java.io.InputStream` v2 @kind object, `com.bumptech.glide.load.h` v3 @kind object) @signature `Lcom/bumptech/glide/load/o/g/j;.handles:(Ljava/io/InputStream;Lcom/bumptech/glide/load/h;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a4358.  v0:= `@@com.bumptech.glide.load.o.g.i.b` @type ^`com.bumptech.glide.load.g` @kind object;
  #L2a435c.  call temp:= `get`(v3, v0) @signature `Lcom/bumptech/glide/load/h;.get:(Lcom/bumptech/glide/load/g;)Ljava/lang/Object;` @kind virtual;
  #L2a4362.  v3:= temp @kind object;
  #L2a4364.  v3:= (`java.lang.Boolean`) v3 @kind object;
  #L2a4368.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L2a436e.  v3:= temp;
  #L2a4370.  if v3 != 0 then goto L2a4390;
  #L2a4374.  v3:= v1.`com.bumptech.glide.load.o.g.j.a` @type ^`java.util.List` @kind object;
  #L2a4378.  v0:= v1.`com.bumptech.glide.load.o.g.j.c` @type ^`com.bumptech.glide.load.engine.z.b` @kind object;
  #L2a437c.  call temp:= `getType`(v3, v2, v0) @signature `Lcom/bumptech/glide/load/e;.getType:(Ljava/util/List;Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/z/b;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind static;
  #L2a4382.  v2:= temp @kind object;
  #L2a4384.  v3:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.GIF` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L2a4388.  if v2 != v3 then goto L2a4390;
  #L2a438c.  v2:= 1I;
  #L2a438e.  goto L2a4392;
  #L2a4390.  v2:= 0I;
  #L2a4392.  return v2;
}
procedure `boolean` `handles`(`com.bumptech.glide.load.o.g.j` v0 @kind this, `java.lang.Object` v1 @kind object, `com.bumptech.glide.load.h` v2 @kind object) @signature `Lcom/bumptech/glide/load/o/g/j;.handles:(Ljava/lang/Object;Lcom/bumptech/glide/load/h;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2a43a4.  v1:= (`java.io.InputStream`) v1 @kind object;
  #L2a43a8.  call temp:= `handles`(v0, v1, v2) @signature `Lcom/bumptech/glide/load/o/g/j;.handles:(Ljava/io/InputStream;Lcom/bumptech/glide/load/h;)Z` @kind virtual;
  #L2a43ae.  v1:= temp;
  #L2a43b0.  return v1;
}
