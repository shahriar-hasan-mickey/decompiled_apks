record `com.bumptech.glide.load.o.g.d` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.k` @kind interface {
}
procedure `void` `<init>`(`com.bumptech.glide.load.o.g.d` v0 @kind this) @signature `Lcom/bumptech/glide/load/o/g/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2a3480.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a3486.  return @kind void;
}
procedure `boolean` `encode`(`com.bumptech.glide.load.o.g.d` v0 @kind this, `com.bumptech.glide.load.engine.u` v1 @kind object, `java.io.File` v2 @kind object, `com.bumptech.glide.load.h` v3 @kind object) @signature `Lcom/bumptech/glide/load/o/g/d;.encode:(Lcom/bumptech/glide/load/engine/u;Ljava/io/File;Lcom/bumptech/glide/load/h;)Z` @AccessFlag PUBLIC {
    temp;

  #L2a33e8.  call temp:= `get`(v1) @signature `Lcom/bumptech/glide/load/engine/u;.get:()Ljava/lang/Object;` @kind interface;
  #L2a33ee.  v1:= temp @kind object;
  #L2a33f0.  v1:= (`com.bumptech.glide.load.o.g.c`) v1 @kind object;
  #L2a33f4.  call temp:= `getBuffer`(v1) @signature `Lcom/bumptech/glide/load/o/g/c;.getBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L2a33fa.  v1:= temp @kind object;
  #L2a33fc.  call `toFile`(v1, v2) @signature `Lcom/bumptech/glide/s/a;.toFile:(Ljava/nio/ByteBuffer;Ljava/io/File;)V` @kind static;
  #L2a3402.  v1:= 1I;
  #L2a3404.  goto L2a3426;
  #L2a3406.  v1:= Exception @type ^`java.io.IOException` @kind object;
  #L2a3408.  v2:= 5I;
  #L2a340a.  v3:= "GifEncoder" @kind object;
  #L2a340e.  call temp:= `isLoggable`(v3, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2a3414.  v2:= temp;
  #L2a3416.  if v2 == 0 then goto L2a3424;
  #L2a341a.  v2:= "Failed to encode GIF drawable data" @kind object;
  #L2a341e.  call temp:= `w`(v3, v2, v1) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L2a3424.  v1:= 0I;
  #L2a3426.  return v1;
  catch `java.io.IOException` @[L2a33f4..L2a3402] goto L2a3406;
}
procedure `boolean` `encode`(`com.bumptech.glide.load.o.g.d` v0 @kind this, `java.lang.Object` v1 @kind object, `java.io.File` v2 @kind object, `com.bumptech.glide.load.h` v3 @kind object) @signature `Lcom/bumptech/glide/load/o/g/d;.encode:(Ljava/lang/Object;Ljava/io/File;Lcom/bumptech/glide/load/h;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2a3448.  v1:= (`com.bumptech.glide.load.engine.u`) v1 @kind object;
  #L2a344c.  call temp:= `encode`(v0, v1, v2, v3) @signature `Lcom/bumptech/glide/load/o/g/d;.encode:(Lcom/bumptech/glide/load/engine/u;Ljava/io/File;Lcom/bumptech/glide/load/h;)Z` @kind virtual;
  #L2a3452.  v1:= temp;
  #L2a3454.  return v1;
}
procedure `com.bumptech.glide.load.c` `getEncodeStrategy`(`com.bumptech.glide.load.o.g.d` v0 @kind this, `com.bumptech.glide.load.h` v1 @kind object) @signature `Lcom/bumptech/glide/load/o/g/d;.getEncodeStrategy:(Lcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/c;` @AccessFlag PUBLIC {
    temp;

  #L2a3468.  v1:= `@@com.bumptech.glide.load.c.f` @type ^`com.bumptech.glide.load.c` @kind object;
  #L2a346c.  return v1 @kind object;
}
