record `com.bumptech.glide.load.o.h.f` @kind class @AccessFlag PUBLIC {
  `java.util.List` `com.bumptech.glide.load.o.h.f.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.o.h.f` v1 @kind this) @signature `Lcom/bumptech/glide/load/o/h/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2a4830.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a4836.  v0:= new `java.util.ArrayList`;
  #L2a483a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2a4840.  v1.`com.bumptech.glide.load.o.h.f.a` @type ^`java.util.List` := v0 @kind object;
  #L2a4844.  return @kind void;
}
procedure `com.bumptech.glide.load.o.h.e` `get`(`com.bumptech.glide.load.o.h.f` v3 @kind this, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lcom/bumptech/glide/load/o/h/f;.get:(Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/load/o/h/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a46e4.  @monitorenter v3
  #L2a46e6.  call temp:= `isAssignableFrom`(v5, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L2a46ec.  v0:= temp;
  #L2a46ee.  if v0 == 0 then goto L2a46fe;
  #L2a46f2.  call temp:= `get`() @signature `Lcom/bumptech/glide/load/o/h/g;.get:()Lcom/bumptech/glide/load/o/h/e;` @kind static;
  #L2a46f8.  v4:= temp @kind object;
  #L2a46fa.  @monitorexit v3
  #L2a46fc.  return v4 @kind object;
  #L2a46fe.  v0:= v3.`com.bumptech.glide.load.o.h.f.a` @type ^`java.util.List` @kind object;
  #L2a4702.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a4708.  v0:= temp @kind object;
  #L2a470a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a4710.  v1:= temp;
  #L2a4712.  if v1 == 0 then goto L2a4736;
  #L2a4716.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a471c.  v1:= temp @kind object;
  #L2a471e.  v1:= (`com.bumptech.glide.load.o.h.f$a`) v1 @kind object;
  #L2a4722.  call temp:= `handles`(v1, v4, v5) @signature `Lcom/bumptech/glide/load/o/h/f$a;.handles:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L2a4728.  v2:= temp;
  #L2a472a.  if v2 == 0 then goto L2a470a;
  #L2a472e.  v4:= v1.`com.bumptech.glide.load.o.h.f$a.c` @type ^`com.bumptech.glide.load.o.h.e` @kind object;
  #L2a4732.  @monitorexit v3
  #L2a4734.  return v4 @kind object;
  #L2a4736.  v0:= new `java.lang.IllegalArgumentException`;
  #L2a473a.  v1:= new `java.lang.StringBuilder`;
  #L2a473e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2a4744.  v2:= "No transcoder registered to transcode from " @kind object;
  #L2a4748.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a474e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a4754.  v4:= " to " @kind object;
  #L2a4758.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a475e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a4764.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a476a.  v4:= temp @kind object;
  #L2a476c.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a4772.  throw v0;
  #L2a4774.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a4776.  @monitorexit v3
  #L2a4778.  throw v4;
  catch `java.lang.Throwable` @[L2a46e6..L2a46fa] goto L2a4774;
  catch `java.lang.Throwable` @[L2a46fe..L2a4732] goto L2a4774;
  catch `java.lang.Throwable` @[L2a4736..L2a4774] goto L2a4774;
}
procedure `java.util.List` `getTranscodeClasses`(`com.bumptech.glide.load.o.h.f` v3 @kind this, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lcom/bumptech/glide/load/o/h/f;.getTranscodeClasses:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a47a8.  @monitorenter v3
  #L2a47aa.  v0:= new `java.util.ArrayList`;
  #L2a47ae.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2a47b4.  call temp:= `isAssignableFrom`(v5, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L2a47ba.  v1:= temp;
  #L2a47bc.  if v1 == 0 then goto L2a47ca;
  #L2a47c0.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a47c6.  @monitorexit v3
  #L2a47c8.  return v0 @kind object;
  #L2a47ca.  v1:= v3.`com.bumptech.glide.load.o.h.f.a` @type ^`java.util.List` @kind object;
  #L2a47ce.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a47d4.  v1:= temp @kind object;
  #L2a47d6.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a47dc.  v2:= temp;
  #L2a47de.  if v2 == 0 then goto L2a4802;
  #L2a47e2.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a47e8.  v2:= temp @kind object;
  #L2a47ea.  v2:= (`com.bumptech.glide.load.o.h.f$a`) v2 @kind object;
  #L2a47ee.  call temp:= `handles`(v2, v4, v5) @signature `Lcom/bumptech/glide/load/o/h/f$a;.handles:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L2a47f4.  v2:= temp;
  #L2a47f6.  if v2 == 0 then goto L2a47d6;
  #L2a47fa.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a4800.  goto L2a47d6;
  #L2a4802.  @monitorexit v3
  #L2a4804.  return v0 @kind object;
  #L2a4806.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a4808.  @monitorexit v3
  #L2a480a.  throw v4;
  catch `java.lang.Throwable` @[L2a47aa..L2a47c6] goto L2a4806;
  catch `java.lang.Throwable` @[L2a47ca..L2a4800] goto L2a4806;
}
procedure `void` `register`(`com.bumptech.glide.load.o.h.f` v2 @kind this, `java.lang.Class` v3 @kind object, `java.lang.Class` v4 @kind object, `com.bumptech.glide.load.o.h.e` v5 @kind object) @signature `Lcom/bumptech/glide/load/o/h/f;.register:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/o/h/e;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a4858.  @monitorenter v2
  #L2a485a.  v0:= v2.`com.bumptech.glide.load.o.h.f.a` @type ^`java.util.List` @kind object;
  #L2a485e.  v1:= new `com.bumptech.glide.load.o.h.f$a`;
  #L2a4862.  call `<init>`(v1, v3, v4, v5) @signature `Lcom/bumptech/glide/load/o/h/f$a;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/o/h/e;)V` @kind direct;
  #L2a4868.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a486e.  @monitorexit v2
  #L2a4870.  return @kind void;
  #L2a4872.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a4874.  @monitorexit v2
  #L2a4876.  throw v3;
  catch `java.lang.Throwable` @[L2a485a..L2a486e] goto L2a4872;
}
