record `com.bumptech.glide.load.o.h.d` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.o.h.e` @kind interface {
}
procedure `void` `<init>`(`com.bumptech.glide.load.o.h.d` v0 @kind this) @signature `Lcom/bumptech/glide/load/o/h/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2a4670.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a4676.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.u` `transcode`(`com.bumptech.glide.load.o.h.d` v0 @kind this, `com.bumptech.glide.load.engine.u` v1 @kind object, `com.bumptech.glide.load.h` v2 @kind object) @signature `Lcom/bumptech/glide/load/o/h/d;.transcode:(Lcom/bumptech/glide/load/engine/u;Lcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/engine/u;` @AccessFlag PUBLIC {
    temp;

  #L2a4638.  call temp:= `get`(v1) @signature `Lcom/bumptech/glide/load/engine/u;.get:()Ljava/lang/Object;` @kind interface;
  #L2a463e.  v1:= temp @kind object;
  #L2a4640.  v1:= (`com.bumptech.glide.load.o.g.c`) v1 @kind object;
  #L2a4644.  call temp:= `getBuffer`(v1) @signature `Lcom/bumptech/glide/load/o/g/c;.getBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L2a464a.  v1:= temp @kind object;
  #L2a464c.  v2:= new `com.bumptech.glide.load.o.d.b`;
  #L2a4650.  call temp:= `toBytes`(v1) @signature `Lcom/bumptech/glide/s/a;.toBytes:(Ljava/nio/ByteBuffer;)[B` @kind static;
  #L2a4656.  v1:= temp @kind object;
  #L2a4658.  call `<init>`(v2, v1) @signature `Lcom/bumptech/glide/load/o/d/b;.<init>:([B)V` @kind direct;
  #L2a465e.  return v2 @kind object;
}
