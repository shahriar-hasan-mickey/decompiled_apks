record `com.bumptech.glide.load.m.g` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.FilterInputStream` @kind class {
  `byte` `com.bumptech.glide.load.m.g.f` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.m.g.g` @AccessFlag PRIVATE;
}
global `byte`[] `@@com.bumptech.glide.load.m.g.h` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.m.g.i` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.m.g.j` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/m/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L28f254.  v0:= 29I;
  #L28f258.  v0:= new `byte`[v0];
  #L28f25c.  goto L28f280;
  #L28f262.  `@@com.bumptech.glide.load.m.g.h` @type ^`byte`[] := v0 @kind object;
  #L28f266.  v0:= `@@com.bumptech.glide.load.m.g.h` @type ^`byte`[] @kind object;
  #L28f26a.  v0:= length @variable v0;
  #L28f26c.  `@@com.bumptech.glide.load.m.g.i` @type ^`int` := v0;
  #L28f270.  v0:= `@@com.bumptech.glide.load.m.g.i` @type ^`int`;
  #L28f274.  v0:= v0 + 2;
  #L28f278.  `@@com.bumptech.glide.load.m.g.j` @type ^`int` := v0;
  #L28f27c.  return @kind void;
  #L28f27e.  
  #L28f280.  v0:= (-1I, -31I, 0I, 28I, 69I, 120I, 105I, 102I, 0I, 0I, 77I, 77I, 0I, 0I, 0I, 0I, 0I, 8I, 0I, 1I, 1I, 18I, 0I, 2I, 0I, 0I, 0I, 1I, 0I) @kind object;
  #L28f2a5.  goto L28f262;
}
procedure `void` `<init>`(`com.bumptech.glide.load.m.g` v2 @kind this, `java.io.InputStream` v3 @kind object, `int` v4 ) @signature `Lcom/bumptech/glide/load/m/g;.<init>:(Ljava/io/InputStream;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L28f2b8.  call `<init>`(v2, v3) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L28f2be.  v3:= -1I;
  #L28f2c0.  if v4 < v3 then goto L28f2d4;
  #L28f2c4.  v3:= 8I;
  #L28f2c8.  if v4 > v3 then goto L28f2d4;
  #L28f2cc.  v3:= (`byte`) v4 @kind i2b;
  #L28f2ce.  v2.`com.bumptech.glide.load.m.g.f` @type ^`byte` := v3 @kind byte;
  #L28f2d2.  return @kind void;
  #L28f2d4.  v3:= new `java.lang.IllegalArgumentException`;
  #L28f2d8.  v0:= new `java.lang.StringBuilder`;
  #L28f2dc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28f2e2.  v1:= "Cannot add invalid orientation: " @kind object;
  #L28f2e6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28f2ec.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L28f2f2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28f2f8.  v4:= temp @kind object;
  #L28f2fa.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28f300.  throw v3;
}
procedure `void` `mark`(`com.bumptech.glide.load.m.g` v0 @kind this, `int` v1 ) @signature `Lcom/bumptech/glide/load/m/g;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L28f314.  v1:= new `java.lang.UnsupportedOperationException`;
  #L28f318.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L28f31e.  throw v1;
}
procedure `boolean` `markSupported`(`com.bumptech.glide.load.m.g` v1 @kind this) @signature `Lcom/bumptech/glide/load/m/g;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28f13c.  v0:= 0I;
  #L28f13e.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.load.m.g` v3 @kind this) @signature `Lcom/bumptech/glide/load/m/g;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28f150.  v0:= v3.`com.bumptech.glide.load.m.g.g` @type ^`int`;
  #L28f154.  v1:= 2I;
  #L28f156.  if v0 < v1 then goto L28f17e;
  #L28f15a.  v2:= `@@com.bumptech.glide.load.m.g.j` @type ^`int`;
  #L28f15e.  if v0 <= v2 then goto L28f164;
  #L28f162.  goto L28f17e;
  #L28f164.  if v0 != v2 then goto L28f16e;
  #L28f168.  v0:= v3.`com.bumptech.glide.load.m.g.f` @type ^`byte` @kind byte;
  #L28f16c.  goto L28f186;
  #L28f16e.  v2:= `@@com.bumptech.glide.load.m.g.h` @type ^`byte`[] @kind object;
  #L28f172.  v0:= v0 - v1 @kind int;
  #L28f174.  v0:= v2[v0] @kind byte;
  #L28f178.  v0:= v0 ^& 255;
  #L28f17c.  goto L28f186;
  #L28f17e.  call temp:= `read`(v3) @signature `Ljava/io/FilterInputStream;.read:()I` @kind super;
  #L28f184.  v0:= temp;
  #L28f186.  v1:= -1I;
  #L28f188.  if v0 == v1 then goto L28f198;
  #L28f18c.  v1:= v3.`com.bumptech.glide.load.m.g.g` @type ^`int`;
  #L28f190.  v1:= v1 + 1;
  #L28f194.  v3.`com.bumptech.glide.load.m.g.g` @type ^`int` := v1;
  #L28f198.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.load.m.g` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/bumptech/glide/load/m/g;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28f1ac.  v0:= v3.`com.bumptech.glide.load.m.g.g` @type ^`int`;
  #L28f1b0.  v1:= `@@com.bumptech.glide.load.m.g.j` @type ^`int`;
  #L28f1b4.  if v0 <= v1 then goto L28f1c2;
  #L28f1b8.  call temp:= `read`(v3, v4, v5, v6) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L28f1be.  v4:= temp;
  #L28f1c0.  goto L28f200;
  #L28f1c2.  if v0 != v1 then goto L28f1d2;
  #L28f1c6.  v6:= v3.`com.bumptech.glide.load.m.g.f` @type ^`byte` @kind byte;
  #L28f1ca.  v4[v5]:= v6 @kind byte;
  #L28f1ce.  v4:= 1I;
  #L28f1d0.  goto L28f200;
  #L28f1d2.  v2:= 2I;
  #L28f1d4.  if v0 >= v2 then goto L28f1e4;
  #L28f1d8.  v2:= v2 - v0 @kind int;
  #L28f1da.  call temp:= `read`(v3, v4, v5, v2) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L28f1e0.  v4:= temp;
  #L28f1e2.  goto L28f200;
  #L28f1e4.  v1:= v1 - v0 @kind int;
  #L28f1e6.  call temp:= `min`(v1, v6) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L28f1ec.  v6:= temp;
  #L28f1ee.  v0:= `@@com.bumptech.glide.load.m.g.h` @type ^`byte`[] @kind object;
  #L28f1f2.  v1:= v3.`com.bumptech.glide.load.m.g.g` @type ^`int`;
  #L28f1f6.  v1:= v1 - v2 @kind int;
  #L28f1f8.  call `arraycopy`(v0, v1, v4, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L28f1fe.  v4:= v6;
  #L28f200.  if v4 <= 0 then goto L28f20e;
  #L28f204.  v5:= v3.`com.bumptech.glide.load.m.g.g` @type ^`int`;
  #L28f208.  v5:= v5 + v4 @kind int;
  #L28f20a.  v3.`com.bumptech.glide.load.m.g.g` @type ^`int` := v5;
  #L28f20e.  return v4;
}
procedure `void` `reset`(`com.bumptech.glide.load.m.g` v1 @kind this) @signature `Lcom/bumptech/glide/load/m/g;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28f330.  v0:= new `java.lang.UnsupportedOperationException`;
  #L28f334.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L28f33a.  throw v0;
}
procedure `long` `skip`(`com.bumptech.glide.load.m.g` v3 @kind this, `long` v4 ) @signature `Lcom/bumptech/glide/load/m/g;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28f220.  call temp:= `skip`(v3, v4) @signature `Ljava/io/FilterInputStream;.skip:(J)J` @kind super;
  #L28f226.  v4:= temp @kind wide;
  #L28f228.  v0:= 0L;
  #L28f22c.  v2:= lcmp(v4, v0);
  #L28f230.  if v2 <= 0 then goto L28f242;
  #L28f234.  v0:= v3.`com.bumptech.glide.load.m.g.g` @type ^`int`;
  #L28f238.  v0:= (`long`) v0 @kind i2l;
  #L28f23a.  v0:= v0 + v4 @kind long;
  #L28f23c.  v1:= (`int`) v0 @kind l2i;
  #L28f23e.  v3.`com.bumptech.glide.load.m.g.g` @type ^`int` := v1;
  #L28f242.  return v4 @kind wide;
}
