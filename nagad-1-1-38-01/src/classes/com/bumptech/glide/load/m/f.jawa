record `com.bumptech.glide.load.m.f` @kind class @AccessFlag PUBLIC {
  `java.util.Map` `com.bumptech.glide.load.m.f.a` @AccessFlag PRIVATE_FINAL;
}
global `com.bumptech.glide.load.m.e$a` `@@com.bumptech.glide.load.m.f.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/m/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L28f0b8.  v0:= new `com.bumptech.glide.load.m.f$a`;
  #L28f0bc.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/m/f$a;.<init>:()V` @kind direct;
  #L28f0c2.  `@@com.bumptech.glide.load.m.f.b` @type ^`com.bumptech.glide.load.m.e$a` := v0 @kind object;
  #L28f0c6.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.m.f` v1 @kind this) @signature `Lcom/bumptech/glide/load/m/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L28f0d8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28f0de.  v0:= new `java.util.HashMap`;
  #L28f0e2.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L28f0e8.  v1.`com.bumptech.glide.load.m.f.a` @type ^`java.util.Map` := v0 @kind object;
  #L28f0ec.  return @kind void;
}
procedure `com.bumptech.glide.load.m.e` `build`(`com.bumptech.glide.load.m.f` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lcom/bumptech/glide/load/m/f;.build:(Ljava/lang/Object;)Lcom/bumptech/glide/load/m/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28f014.  @monitorenter v5
  #L28f016.  call temp:= `checkNotNull`(v6) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L28f01c.  v0:= v5.`com.bumptech.glide.load.m.f.a` @type ^`java.util.Map` @kind object;
  #L28f020.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L28f026.  v1:= temp @kind object;
  #L28f028.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L28f02e.  v0:= temp @kind object;
  #L28f030.  v0:= (`com.bumptech.glide.load.m.e$a`) v0 @kind object;
  #L28f034.  if v0 != 0 then goto L28f082;
  #L28f038.  v1:= v5.`com.bumptech.glide.load.m.f.a` @type ^`java.util.Map` @kind object;
  #L28f03c.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L28f042.  v1:= temp @kind object;
  #L28f044.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L28f04a.  v1:= temp @kind object;
  #L28f04c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L28f052.  v2:= temp;
  #L28f054.  if v2 == 0 then goto L28f082;
  #L28f058.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L28f05e.  v2:= temp @kind object;
  #L28f060.  v2:= (`com.bumptech.glide.load.m.e$a`) v2 @kind object;
  #L28f064.  call temp:= `getDataClass`(v2) @signature `Lcom/bumptech/glide/load/m/e$a;.getDataClass:()Ljava/lang/Class;` @kind interface;
  #L28f06a.  v3:= temp @kind object;
  #L28f06c.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L28f072.  v4:= temp @kind object;
  #L28f074.  call temp:= `isAssignableFrom`(v3, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L28f07a.  v3:= temp;
  #L28f07c.  if v3 == 0 then goto L28f04c;
  #L28f080.  v0:= v2 @kind object;
  #L28f082.  if v0 != 0 then goto L28f08a;
  #L28f086.  v0:= `@@com.bumptech.glide.load.m.f.b` @type ^`com.bumptech.glide.load.m.e$a` @kind object;
  #L28f08a.  call temp:= `build`(v0, v6) @signature `Lcom/bumptech/glide/load/m/e$a;.build:(Ljava/lang/Object;)Lcom/bumptech/glide/load/m/e;` @kind interface;
  #L28f090.  v6:= temp @kind object;
  #L28f092.  @monitorexit v5
  #L28f094.  return v6 @kind object;
  #L28f096.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28f098.  @monitorexit v5
  #L28f09a.  throw v6;
  catch `java.lang.Throwable` @[L28f016..L28f092] goto L28f096;
}
procedure `void` `register`(`com.bumptech.glide.load.m.f` v2 @kind this, `com.bumptech.glide.load.m.e$a` v3 @kind object) @signature `Lcom/bumptech/glide/load/m/f;.register:(Lcom/bumptech/glide/load/m/e$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28f100.  @monitorenter v2
  #L28f102.  v0:= v2.`com.bumptech.glide.load.m.f.a` @type ^`java.util.Map` @kind object;
  #L28f106.  call temp:= `getDataClass`(v3) @signature `Lcom/bumptech/glide/load/m/e$a;.getDataClass:()Ljava/lang/Class;` @kind interface;
  #L28f10c.  v1:= temp @kind object;
  #L28f10e.  call temp:= `put`(v0, v1, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L28f114.  @monitorexit v2
  #L28f116.  return @kind void;
  #L28f118.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28f11a.  @monitorexit v2
  #L28f11c.  throw v3;
  catch `java.lang.Throwable` @[L28f102..L28f114] goto L28f118;
}
