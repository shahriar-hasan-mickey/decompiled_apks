record `com.bumptech.glide.load.m.k` @kind class @AccessFlag PUBLIC_FINAL extends `com.bumptech.glide.load.m.e` @kind interface {
  `com.bumptech.glide.load.resource.bitmap.v` `com.bumptech.glide.load.m.k.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.m.k` v1 @kind this, `java.io.InputStream` v2 @kind object, `com.bumptech.glide.load.engine.z.b` v3 @kind object) @signature `Lcom/bumptech/glide/load/m/k;.<init>:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/z/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L28fa60.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28fa66.  v0:= new `com.bumptech.glide.load.resource.bitmap.v`;
  #L28fa6a.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.<init>:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/z/b;)V` @kind direct;
  #L28fa70.  v1.`com.bumptech.glide.load.m.k.a` @type ^`com.bumptech.glide.load.resource.bitmap.v` := v0 @kind object;
  #L28fa74.  v2:= v1.`com.bumptech.glide.load.m.k.a` @type ^`com.bumptech.glide.load.resource.bitmap.v` @kind object;
  #L28fa78.  v3:= 5242880I;
  #L28fa7c.  call `mark`(v2, v3) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.mark:(I)V` @kind virtual;
  #L28fa82.  return @kind void;
}
procedure `void` `cleanup`(`com.bumptech.glide.load.m.k` v1 @kind this) @signature `Lcom/bumptech/glide/load/m/k;.cleanup:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28fa94.  v0:= v1.`com.bumptech.glide.load.m.k.a` @type ^`com.bumptech.glide.load.resource.bitmap.v` @kind object;
  #L28fa98.  call `release`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.release:()V` @kind virtual;
  #L28fa9e.  return @kind void;
}
procedure `void` `fixMarkLimits`(`com.bumptech.glide.load.m.k` v1 @kind this) @signature `Lcom/bumptech/glide/load/m/k;.fixMarkLimits:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28fab0.  v0:= v1.`com.bumptech.glide.load.m.k.a` @type ^`com.bumptech.glide.load.resource.bitmap.v` @kind object;
  #L28fab4.  call `fixMarkLimit`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.fixMarkLimit:()V` @kind virtual;
  #L28faba.  return @kind void;
}
procedure `java.io.InputStream` `rewindAndGet`(`com.bumptech.glide.load.m.k` v1 @kind this) @signature `Lcom/bumptech/glide/load/m/k;.rewindAndGet:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28fa24.  v0:= v1.`com.bumptech.glide.load.m.k.a` @type ^`com.bumptech.glide.load.resource.bitmap.v` @kind object;
  #L28fa28.  call `reset`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.reset:()V` @kind virtual;
  #L28fa2e.  v0:= v1.`com.bumptech.glide.load.m.k.a` @type ^`com.bumptech.glide.load.resource.bitmap.v` @kind object;
  #L28fa32.  return v0 @kind object;
}
procedure `java.lang.Object` `rewindAndGet`(`com.bumptech.glide.load.m.k` v1 @kind this) @signature `Lcom/bumptech/glide/load/m/k;.rewindAndGet:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L28fa44.  call temp:= `rewindAndGet`(v1) @signature `Lcom/bumptech/glide/load/m/k;.rewindAndGet:()Ljava/io/InputStream;` @kind virtual;
  #L28fa4a.  v0:= temp @kind object;
  #L28fa4c.  return v0 @kind object;
}
