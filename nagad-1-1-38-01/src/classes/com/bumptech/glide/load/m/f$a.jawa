record `com.bumptech.glide.load.m.f$a` @kind class @AccessFlag  extends `com.bumptech.glide.load.m.e$a` @kind interface {
}
procedure `void` `<init>`(`com.bumptech.glide.load.m.f$a` v0 @kind this) @signature `Lcom/bumptech/glide/load/m/f$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L28efb4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28efba.  return @kind void;
}
procedure `com.bumptech.glide.load.m.e` `build`(`com.bumptech.glide.load.m.f$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/load/m/f$a;.build:(Ljava/lang/Object;)Lcom/bumptech/glide/load/m/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28ef78.  v0:= new `com.bumptech.glide.load.m.f$b`;
  #L28ef7c.  call `<init>`(v0, v2) @signature `Lcom/bumptech/glide/load/m/f$b;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L28ef82.  return v0 @kind object;
}
procedure `java.lang.Class` `getDataClass`(`com.bumptech.glide.load.m.f$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/m/f$a;.getDataClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28ef94.  v0:= new `java.lang.UnsupportedOperationException`;
  #L28ef98.  v1:= "Not implemented" @kind object;
  #L28ef9c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28efa2.  throw v0;
}
