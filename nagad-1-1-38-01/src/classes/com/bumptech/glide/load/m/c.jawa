record `com.bumptech.glide.load.m.c` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.OutputStream` @kind class {
  `java.io.OutputStream` `com.bumptech.glide.load.m.c.f` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.bumptech.glide.load.m.c.g` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.z.b` `com.bumptech.glide.load.m.c.h` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.m.c.i` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.m.c` v1 @kind this, `java.io.OutputStream` v2 @kind object, `com.bumptech.glide.load.engine.z.b` v3 @kind object) @signature `Lcom/bumptech/glide/load/m/c;.<init>:(Ljava/io/OutputStream;Lcom/bumptech/glide/load/engine/z/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L28ed7c.  v0:= 65536I;
  #L28ed80.  call `<init>`(v1, v2, v3, v0) @signature `Lcom/bumptech/glide/load/m/c;.<init>:(Ljava/io/OutputStream;Lcom/bumptech/glide/load/engine/z/b;I)V` @kind direct;
  #L28ed86.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.m.c` v0 @kind this, `java.io.OutputStream` v1 @kind object, `com.bumptech.glide.load.engine.z.b` v2 @kind object, `int` v3 ) @signature `Lcom/bumptech/glide/load/m/c;.<init>:(Ljava/io/OutputStream;Lcom/bumptech/glide/load/engine/z/b;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L28ed98.  call `<init>`(v0) @signature `Ljava/io/OutputStream;.<init>:()V` @kind direct;
  #L28ed9e.  v0.`com.bumptech.glide.load.m.c.f` @type ^`java.io.OutputStream` := v1 @kind object;
  #L28eda2.  v0.`com.bumptech.glide.load.m.c.h` @type ^`com.bumptech.glide.load.engine.z.b` := v2 @kind object;
  #L28eda6.  v1:= constclass @type ^`byte`[] @kind object;
  #L28edaa.  call temp:= `get`(v2, v3, v1) @signature `Lcom/bumptech/glide/load/engine/z/b;.get:(ILjava/lang/Class;)Ljava/lang/Object;` @kind interface;
  #L28edb0.  v1:= temp @kind object;
  #L28edb2.  v1:= (`byte`[]) v1 @kind object;
  #L28edb6.  v0.`com.bumptech.glide.load.m.c.g` @type ^`byte`[] := v1 @kind object;
  #L28edba.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.m.c` v4 @kind this) @signature `Lcom/bumptech/glide/load/m/c;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L28ee34.  v0:= v4.`com.bumptech.glide.load.m.c.i` @type ^`int`;
  #L28ee38.  if v0 <= 0 then goto L28ee50;
  #L28ee3c.  v1:= v4.`com.bumptech.glide.load.m.c.f` @type ^`java.io.OutputStream` @kind object;
  #L28ee40.  v2:= v4.`com.bumptech.glide.load.m.c.g` @type ^`byte`[] @kind object;
  #L28ee44.  v3:= 0I;
  #L28ee46.  call `write`(v1, v2, v3, v0) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L28ee4c.  v4.`com.bumptech.glide.load.m.c.i` @type ^`int` := v3;
  #L28ee50.  return @kind void;
}
procedure `void` `b`(`com.bumptech.glide.load.m.c` v2 @kind this) @signature `Lcom/bumptech/glide/load/m/c;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L28ee64.  v0:= v2.`com.bumptech.glide.load.m.c.i` @type ^`int`;
  #L28ee68.  v1:= v2.`com.bumptech.glide.load.m.c.g` @type ^`byte`[] @kind object;
  #L28ee6c.  v1:= length @variable v1;
  #L28ee6e.  if v0 != v1 then goto L28ee78;
  #L28ee72.  call `a`(v2) @signature `Lcom/bumptech/glide/load/m/c;.a:()V` @kind direct;
  #L28ee78.  return @kind void;
}
procedure `void` `c`(`com.bumptech.glide.load.m.c` v2 @kind this) @signature `Lcom/bumptech/glide/load/m/c;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L28ee8c.  v0:= v2.`com.bumptech.glide.load.m.c.g` @type ^`byte`[] @kind object;
  #L28ee90.  if v0 == 0 then goto L28eea4;
  #L28ee94.  v1:= v2.`com.bumptech.glide.load.m.c.h` @type ^`com.bumptech.glide.load.engine.z.b` @kind object;
  #L28ee98.  call `put`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/z/b;.put:(Ljava/lang/Object;)V` @kind interface;
  #L28ee9e.  v0:= 0I;
  #L28eea0.  v2.`com.bumptech.glide.load.m.c.g` @type ^`byte`[] := v0 @kind object;
  #L28eea4.  return @kind void;
}
procedure `void` `close`(`com.bumptech.glide.load.m.c` v2 @kind this) @signature `Lcom/bumptech/glide/load/m/c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28edcc.  call `flush`(v2) @signature `Lcom/bumptech/glide/load/m/c;.flush:()V` @kind virtual;
  #L28edd2.  v0:= v2.`com.bumptech.glide.load.m.c.f` @type ^`java.io.OutputStream` @kind object;
  #L28edd6.  call `close`(v0) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L28eddc.  call `c`(v2) @signature `Lcom/bumptech/glide/load/m/c;.c:()V` @kind direct;
  #L28ede2.  return @kind void;
  #L28ede4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28ede6.  v1:= v2.`com.bumptech.glide.load.m.c.f` @type ^`java.io.OutputStream` @kind object;
  #L28edea.  call `close`(v1) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L28edf0.  throw v0;
  catch `java.lang.Throwable` @[L28edcc..L28edd2] goto L28ede4;
}
procedure `void` `flush`(`com.bumptech.glide.load.m.c` v1 @kind this) @signature `Lcom/bumptech/glide/load/m/c;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28ee10.  call `a`(v1) @signature `Lcom/bumptech/glide/load/m/c;.a:()V` @kind direct;
  #L28ee16.  v0:= v1.`com.bumptech.glide.load.m.c.f` @type ^`java.io.OutputStream` @kind object;
  #L28ee1a.  call `flush`(v0) @signature `Ljava/io/OutputStream;.flush:()V` @kind virtual;
  #L28ee20.  return @kind void;
}
procedure `void` `write`(`com.bumptech.glide.load.m.c` v3 @kind this, `int` v4 ) @signature `Lcom/bumptech/glide/load/m/c;.write:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28ef48.  v0:= v3.`com.bumptech.glide.load.m.c.g` @type ^`byte`[] @kind object;
  #L28ef4c.  v1:= v3.`com.bumptech.glide.load.m.c.i` @type ^`int`;
  #L28ef50.  v2:= v1 + 1;
  #L28ef54.  v3.`com.bumptech.glide.load.m.c.i` @type ^`int` := v2;
  #L28ef58.  v4:= (`byte`) v4 @kind i2b;
  #L28ef5a.  v0[v1]:= v4 @kind byte;
  #L28ef5e.  call `b`(v3) @signature `Lcom/bumptech/glide/load/m/c;.b:()V` @kind direct;
  #L28ef64.  return @kind void;
}
procedure `void` `write`(`com.bumptech.glide.load.m.c` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/bumptech/glide/load/m/c;.write:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28eeb8.  v0:= length @variable v3;
  #L28eeba.  v1:= 0I;
  #L28eebc.  call `write`(v2, v3, v1, v0) @signature `Lcom/bumptech/glide/load/m/c;.write:([BII)V` @kind virtual;
  #L28eec2.  return @kind void;
}
procedure `void` `write`(`com.bumptech.glide.load.m.c` v5 @kind this, `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lcom/bumptech/glide/load/m/c;.write:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28eed4.  v0:= 0I;
  #L28eed6.  v1:= v8 - v0 @kind int;
  #L28eeda.  v2:= v7 + v0 @kind int;
  #L28eede.  v3:= v5.`com.bumptech.glide.load.m.c.i` @type ^`int`;
  #L28eee2.  if v3 != 0 then goto L28eefc;
  #L28eee6.  v3:= v5.`com.bumptech.glide.load.m.c.g` @type ^`byte`[] @kind object;
  #L28eeea.  v3:= length @variable v3;
  #L28eeec.  if v1 < v3 then goto L28eefc;
  #L28eef0.  v7:= v5.`com.bumptech.glide.load.m.c.f` @type ^`java.io.OutputStream` @kind object;
  #L28eef4.  call `write`(v7, v6, v2, v1) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L28eefa.  return @kind void;
  #L28eefc.  v3:= v5.`com.bumptech.glide.load.m.c.g` @type ^`byte`[] @kind object;
  #L28ef00.  v3:= length @variable v3;
  #L28ef02.  v4:= v5.`com.bumptech.glide.load.m.c.i` @type ^`int`;
  #L28ef06.  v3:= v3 - v4 @kind int;
  #L28ef08.  call temp:= `min`(v1, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L28ef0e.  v1:= temp;
  #L28ef10.  v3:= v5.`com.bumptech.glide.load.m.c.g` @type ^`byte`[] @kind object;
  #L28ef14.  v4:= v5.`com.bumptech.glide.load.m.c.i` @type ^`int`;
  #L28ef18.  call `arraycopy`(v6, v2, v3, v4, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L28ef1e.  v2:= v5.`com.bumptech.glide.load.m.c.i` @type ^`int`;
  #L28ef22.  v2:= v2 + v1 @kind int;
  #L28ef24.  v5.`com.bumptech.glide.load.m.c.i` @type ^`int` := v2;
  #L28ef28.  v0:= v0 + v1 @kind int;
  #L28ef2a.  call `b`(v5) @signature `Lcom/bumptech/glide/load/m/c;.b:()V` @kind direct;
  #L28ef30.  if v0 < v8 then goto L28eed6;
  #L28ef34.  return @kind void;
}
