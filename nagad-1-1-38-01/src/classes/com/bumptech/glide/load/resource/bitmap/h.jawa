record `com.bumptech.glide.load.resource.bitmap.h` @kind class @AccessFlag PUBLIC_FINAL extends `com.bumptech.glide.load.j` @kind interface {
  `com.bumptech.glide.load.resource.bitmap.d` `com.bumptech.glide.load.resource.bitmap.h.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.h` v1 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L29dd04.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29dd0a.  v0:= new `com.bumptech.glide.load.resource.bitmap.d`;
  #L29dd0e.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/d;.<init>:()V` @kind direct;
  #L29dd14.  v1.`com.bumptech.glide.load.resource.bitmap.h.a` @type ^`com.bumptech.glide.load.resource.bitmap.d` := v0 @kind object;
  #L29dd18.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.u` `decode`(`com.bumptech.glide.load.resource.bitmap.h` v0 @kind this, `java.lang.Object` v1 @kind object, `int` v2 , `int` v3 , `com.bumptech.glide.load.h` v4 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/h;.decode:(Ljava/lang/Object;IILcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/engine/u;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L29dcbc.  v1:= (`java.nio.ByteBuffer`) v1 @kind object;
  #L29dcc0.  call temp:= `decode`(v0, v1, v2, v3, v4) @signature `Lcom/bumptech/glide/load/resource/bitmap/h;.decode:(Ljava/nio/ByteBuffer;IILcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/engine/u;` @kind virtual;
  #L29dcc6.  v1:= temp @kind object;
  #L29dcc8.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.engine.u` `decode`(`com.bumptech.glide.load.resource.bitmap.h` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object, `int` v3 , `int` v4 , `com.bumptech.glide.load.h` v5 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/h;.decode:(Ljava/nio/ByteBuffer;IILcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/engine/u;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29dcdc.  call temp:= `createSource`(v2) @signature `Landroid/graphics/ImageDecoder;.createSource:(Ljava/nio/ByteBuffer;)Landroid/graphics/ImageDecoder$Source;` @kind static;
  #L29dce2.  v2:= temp @kind object;
  #L29dce4.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.h.a` @type ^`com.bumptech.glide.load.resource.bitmap.d` @kind object;
  #L29dce8.  call temp:= `decode`(v0, v2, v3, v4, v5) @signature `Lcom/bumptech/glide/load/o/a;.decode:(Landroid/graphics/ImageDecoder$Source;IILcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/engine/u;` @kind virtual;
  #L29dcee.  v2:= temp @kind object;
  #L29dcf0.  return v2 @kind object;
}
procedure `boolean` `handles`(`com.bumptech.glide.load.resource.bitmap.h` v0 @kind this, `java.lang.Object` v1 @kind object, `com.bumptech.glide.load.h` v2 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/h;.handles:(Ljava/lang/Object;Lcom/bumptech/glide/load/h;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L29dc88.  v1:= (`java.nio.ByteBuffer`) v1 @kind object;
  #L29dc8c.  call temp:= `handles`(v0, v1, v2) @signature `Lcom/bumptech/glide/load/resource/bitmap/h;.handles:(Ljava/nio/ByteBuffer;Lcom/bumptech/glide/load/h;)Z` @kind virtual;
  #L29dc92.  v1:= temp;
  #L29dc94.  return v1;
}
procedure `boolean` `handles`(`com.bumptech.glide.load.resource.bitmap.h` v0 @kind this, `java.nio.ByteBuffer` v1 @kind object, `com.bumptech.glide.load.h` v2 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/h;.handles:(Ljava/nio/ByteBuffer;Lcom/bumptech/glide/load/h;)Z` @AccessFlag PUBLIC {
    temp;

  #L29dca8.  v1:= 1I;
  #L29dcaa.  return v1;
}
