record `com.bumptech.glide.load.resource.bitmap.k$d` @kind class @AccessFlag  extends `com.bumptech.glide.load.resource.bitmap.k` @kind class {
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.k$d` v0 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/k$d;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L29ebf8.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/k;.<init>:()V` @kind direct;
  #L29ebfe.  return @kind void;
}
procedure `com.bumptech.glide.load.resource.bitmap.k$g` `getSampleSizeRounding`(`com.bumptech.glide.load.resource.bitmap.k$d` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/k$d;.getSampleSizeRounding:(IIII)Lcom/bumptech/glide/load/resource/bitmap/k$g;` @AccessFlag PUBLIC {
    temp;

  #L29ebb8.  v1:= `@@com.bumptech.glide.load.resource.bitmap.k$g.g` @type ^`com.bumptech.glide.load.resource.bitmap.k$g` @kind object;
  #L29ebbc.  return v1 @kind object;
}
procedure `float` `getScaleFactor`(`com.bumptech.glide.load.resource.bitmap.k$d` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/k$d;.getScaleFactor:(IIII)F` @AccessFlag PUBLIC {
    temp;

  #L29ebd0.  v3:= (`float`) v3 @kind i2f;
  #L29ebd2.  v1:= (`float`) v1 @kind i2f;
  #L29ebd4.  v3:= v3 / v1 @kind float;
  #L29ebd6.  v1:= (`float`) v4 @kind i2f;
  #L29ebd8.  v2:= (`float`) v2 @kind i2f;
  #L29ebda.  v1:= v1 / v2 @kind float;
  #L29ebdc.  call temp:= `max`(v3, v1) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L29ebe2.  v1:= temp;
  #L29ebe4.  return v1;
}
