record `com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$a` @kind class @AccessFlag FINAL extends `com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$Reader` @kind interface {
  `java.nio.ByteBuffer` `com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$a` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$a;.<init>:(Ljava/nio/ByteBuffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L29df74.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29df7a.  v1.`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$a.a` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L29df7e.  v0:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L29df82.  call temp:= `order`(v2, v0) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L29df88.  return @kind void;
}
procedure `int` `getUInt16`(`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$a;.getUInt16:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29de8c.  call temp:= `getUInt8`(v2) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$a;.getUInt8:()S` @kind virtual;
  #L29de92.  v0:= temp;
  #L29de94.  v0:= v0 ^< 8;
  #L29de98.  call temp:= `getUInt8`(v2) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$a;.getUInt8:()S` @kind virtual;
  #L29de9e.  v1:= temp;
  #L29dea0.  v0:= v0 ^| v1 @kind int;
  #L29dea2.  return v0;
}
procedure `short` `getUInt8`(`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$a;.getUInt8:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29df30.  v0:= v2.`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L29df34.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L29df3a.  v0:= temp;
  #L29df3c.  v1:= 1I;
  #L29df3e.  if v0 < v1 then goto L29df56;
  #L29df42.  v0:= v2.`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L29df46.  call temp:= `get`(v0) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L29df4c.  v0:= temp;
  #L29df4e.  v0:= v0 ^& 255;
  #L29df52.  v0:= (`short`) v0 @kind i2s;
  #L29df54.  return v0;
  #L29df56.  v0:= new `com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$Reader$EndOfFileException`;
  #L29df5a.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$Reader$EndOfFileException;.<init>:()V` @kind direct;
  #L29df60.  throw v0;
}
procedure `int` `read`(`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$a` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$a;.read:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29deb4.  v0:= v2.`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L29deb8.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L29debe.  v0:= temp;
  #L29dec0.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L29dec6.  v4:= temp;
  #L29dec8.  if v4 != 0 then goto L29ded0;
  #L29decc.  v3:= -1I;
  #L29dece.  return v3;
  #L29ded0.  v0:= v2.`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L29ded4.  v1:= 0I;
  #L29ded6.  call temp:= `get`(v0, v3, v1, v4) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L29dedc.  return v4;
}
procedure `long` `skip`(`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$a` v2 @kind this, `long` v3 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$a;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29def0.  v0:= v2.`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L29def4.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L29defa.  v0:= temp;
  #L29defc.  v0:= (`long`) v0 @kind i2l;
  #L29defe.  call temp:= `min`(v0, v3) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L29df04.  v3:= temp @kind wide;
  #L29df06.  v4:= (`int`) v3 @kind l2i;
  #L29df08.  v3:= v2.`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L29df0c.  call temp:= `position`(v3) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L29df12.  v0:= temp;
  #L29df14.  v0:= v0 + v4 @kind int;
  #L29df16.  call temp:= `position`(v3, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L29df1c.  v3:= (`long`) v4 @kind i2l;
  #L29df1e.  return v3 @kind wide;
}
