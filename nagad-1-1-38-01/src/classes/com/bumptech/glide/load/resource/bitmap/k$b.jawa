record `com.bumptech.glide.load.resource.bitmap.k$b` @kind class @AccessFlag  extends `com.bumptech.glide.load.resource.bitmap.k` @kind class {
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.k$b` v0 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/k$b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L29eb24.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/k;.<init>:()V` @kind direct;
  #L29eb2a.  return @kind void;
}
procedure `com.bumptech.glide.load.resource.bitmap.k$g` `getSampleSizeRounding`(`com.bumptech.glide.load.resource.bitmap.k$b` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/k$b;.getSampleSizeRounding:(IIII)Lcom/bumptech/glide/load/resource/bitmap/k$g;` @AccessFlag PUBLIC {
    temp;

  #L29eab4.  v1:= `@@com.bumptech.glide.load.resource.bitmap.k$g.f` @type ^`com.bumptech.glide.load.resource.bitmap.k$g` @kind object;
  #L29eab8.  return v1 @kind object;
}
procedure `float` `getScaleFactor`(`com.bumptech.glide.load.resource.bitmap.k$b` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/k$b;.getScaleFactor:(IIII)F` @AccessFlag PUBLIC {
    temp;

  #L29eacc.  v2:= (`float`) v2 @kind i2f;
  #L29eace.  v4:= (`float`) v4 @kind i2f;
  #L29ead0.  v2:= v2 / v4 @kind float;
  #L29ead2.  v1:= (`float`) v1 @kind i2f;
  #L29ead4.  v3:= (`float`) v3 @kind i2f;
  #L29ead6.  v1:= v1 / v3 @kind float;
  #L29ead8.  call temp:= `max`(v2, v1) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L29eade.  v1:= temp;
  #L29eae0.  v1:= (`double`) v1 @kind f2d;
  #L29eae2.  call temp:= `ceil`(v1) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L29eae8.  v1:= temp @kind wide;
  #L29eaea.  v1:= (`int`) v1 @kind d2i;
  #L29eaec.  call temp:= `highestOneBit`(v1) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L29eaf2.  v2:= temp;
  #L29eaf4.  v3:= 1I;
  #L29eaf6.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L29eafc.  v2:= temp;
  #L29eafe.  if v2 >= v1 then goto L29eb04;
  #L29eb02.  goto L29eb06;
  #L29eb04.  v3:= 0I;
  #L29eb06.  v1:= v2 ^< v3 @kind int;
  #L29eb0a.  v2:= 1.0F;
  #L29eb0e.  v1:= (`float`) v1 @kind i2f;
  #L29eb10.  v2:= v2 / v1 @kind float;
  #L29eb12.  return v2;
}
