record `com.bumptech.glide.load.resource.bitmap.v` @kind class @AccessFlag PUBLIC extends `java.io.FilterInputStream` @kind class {
  `byte`[] `com.bumptech.glide.load.resource.bitmap.v.f` @AccessFlag PRIVATE_VOLATILE;
  `int` `com.bumptech.glide.load.resource.bitmap.v.g` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.resource.bitmap.v.h` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.resource.bitmap.v.i` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.resource.bitmap.v.j` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.z.b` `com.bumptech.glide.load.resource.bitmap.v.k` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.v` v1 @kind this, `java.io.InputStream` v2 @kind object, `com.bumptech.glide.load.engine.z.b` v3 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.<init>:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/z/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2a1190.  v0:= 65536I;
  #L2a1194.  call `<init>`(v1, v2, v3, v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.<init>:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/z/b;I)V` @kind direct;
  #L2a119a.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.v` v0 @kind this, `java.io.InputStream` v1 @kind object, `com.bumptech.glide.load.engine.z.b` v2 @kind object, `int` v3 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.<init>:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/z/b;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2a11ac.  call `<init>`(v0, v1) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L2a11b2.  v1:= -1I;
  #L2a11b4.  v0.`com.bumptech.glide.load.resource.bitmap.v.i` @type ^`int` := v1;
  #L2a11b8.  v0.`com.bumptech.glide.load.resource.bitmap.v.k` @type ^`com.bumptech.glide.load.engine.z.b` := v2 @kind object;
  #L2a11bc.  v1:= constclass @type ^`byte`[] @kind object;
  #L2a11c0.  call temp:= `get`(v2, v3, v1) @signature `Lcom/bumptech/glide/load/engine/z/b;.get:(ILjava/lang/Class;)Ljava/lang/Object;` @kind interface;
  #L2a11c6.  v1:= temp @kind object;
  #L2a11c8.  v1:= (`byte`[]) v1 @kind object;
  #L2a11cc.  v0.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] := v1 @kind object;
  #L2a11d0.  return @kind void;
}
procedure `int` `a`(`com.bumptech.glide.load.resource.bitmap.v` v5 @kind this, `java.io.InputStream` v6 @kind object, `byte`[] v7 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.a:(Ljava/io/InputStream;[B)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2a0cf4.  v0:= v5.`com.bumptech.glide.load.resource.bitmap.v.i` @type ^`int`;
  #L2a0cf8.  v1:= -1I;
  #L2a0cfa.  v2:= 0I;
  #L2a0cfc.  if v0 == v1 then goto L2a0da8;
  #L2a0d00.  v3:= v5.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a0d04.  v3:= v3 - v0 @kind int;
  #L2a0d06.  v4:= v5.`com.bumptech.glide.load.resource.bitmap.v.h` @type ^`int`;
  #L2a0d0a.  if v3 < v4 then goto L2a0d10;
  #L2a0d0e.  goto L2a0da8;
  #L2a0d10.  if v0 != 0 then goto L2a0d5e;
  #L2a0d14.  v0:= length @variable v7;
  #L2a0d16.  if v4 <= v0 then goto L2a0d5e;
  #L2a0d1a.  v0:= v5.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int`;
  #L2a0d1e.  v1:= length @variable v7;
  #L2a0d20.  if v0 != v1 then goto L2a0d5e;
  #L2a0d24.  v0:= length @variable v7;
  #L2a0d26.  v0:= v0 * 2;
  #L2a0d2a.  if v0 <= v4 then goto L2a0d30;
  #L2a0d2e.  v0:= v4;
  #L2a0d30.  v1:= v5.`com.bumptech.glide.load.resource.bitmap.v.k` @type ^`com.bumptech.glide.load.engine.z.b` @kind object;
  #L2a0d34.  v3:= constclass @type ^`byte`[] @kind object;
  #L2a0d38.  call temp:= `get`(v1, v0, v3) @signature `Lcom/bumptech/glide/load/engine/z/b;.get:(ILjava/lang/Class;)Ljava/lang/Object;` @kind interface;
  #L2a0d3e.  v0:= temp @kind object;
  #L2a0d40.  v0:= (`byte`[]) v0 @kind object;
  #L2a0d44.  v1:= length @variable v7;
  #L2a0d46.  call `arraycopy`(v7, v2, v0, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2a0d4c.  v5.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] := v0 @kind object;
  #L2a0d50.  v1:= v5.`com.bumptech.glide.load.resource.bitmap.v.k` @type ^`com.bumptech.glide.load.engine.z.b` @kind object;
  #L2a0d54.  call `put`(v1, v7) @signature `Lcom/bumptech/glide/load/engine/z/b;.put:(Ljava/lang/Object;)V` @kind interface;
  #L2a0d5a.  v7:= v0 @kind object;
  #L2a0d5c.  goto L2a0d70;
  #L2a0d5e.  v0:= v5.`com.bumptech.glide.load.resource.bitmap.v.i` @type ^`int`;
  #L2a0d62.  if v0 <= 0 then goto L2a0d70;
  #L2a0d66.  v1:= length @variable v7;
  #L2a0d68.  v1:= v1 - v0 @kind int;
  #L2a0d6a.  call `arraycopy`(v7, v0, v7, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2a0d70.  v0:= v5.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a0d74.  v1:= v5.`com.bumptech.glide.load.resource.bitmap.v.i` @type ^`int`;
  #L2a0d78.  v0:= v0 - v1 @kind int;
  #L2a0d7a.  v5.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int` := v0;
  #L2a0d7e.  v5.`com.bumptech.glide.load.resource.bitmap.v.i` @type ^`int` := v2;
  #L2a0d82.  v5.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int` := v2;
  #L2a0d86.  v0:= v5.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a0d8a.  v1:= length @variable v7;
  #L2a0d8c.  v1:= v1 - v0 @kind int;
  #L2a0d8e.  call temp:= `read`(v6, v7, v0, v1) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L2a0d94.  v6:= temp;
  #L2a0d96.  v7:= v5.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a0d9a.  if v6 > 0 then goto L2a0da0;
  #L2a0d9e.  goto L2a0da2;
  #L2a0da0.  v7:= v7 + v6 @kind int;
  #L2a0da2.  v5.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int` := v7;
  #L2a0da6.  return v6;
  #L2a0da8.  call temp:= `read`(v6, v7) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L2a0dae.  v6:= temp;
  #L2a0db0.  if v6 <= 0 then goto L2a0dc0;
  #L2a0db4.  v5.`com.bumptech.glide.load.resource.bitmap.v.i` @type ^`int` := v1;
  #L2a0db8.  v5.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int` := v2;
  #L2a0dbc.  v5.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int` := v6;
  #L2a0dc0.  return v6;
}
procedure `java.io.IOException` `a`() @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.a:()Ljava/io/IOException;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2a1028.  v0:= new `java.io.IOException`;
  #L2a102c.  v1:= "BufferedInputStream is closed" @kind object;
  #L2a1030.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a1036.  throw v0;
}
procedure `int` `available`(`com.bumptech.glide.load.resource.bitmap.v` v3 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a0c94.  @monitorenter v3
  #L2a0c96.  v0:= v3.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L2a0c9a.  v1:= v3.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] @kind object;
  #L2a0c9e.  if v1 == 0 then goto L2a0cbe;
  #L2a0ca2.  if v0 == 0 then goto L2a0cbe;
  #L2a0ca6.  v1:= v3.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int`;
  #L2a0caa.  v2:= v3.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a0cae.  v1:= v1 - v2 @kind int;
  #L2a0cb0.  call temp:= `available`(v0) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L2a0cb6.  v0:= temp;
  #L2a0cb8.  v1:= v1 + v0 @kind int;
  #L2a0cba.  @monitorexit v3
  #L2a0cbc.  return v1;
  #L2a0cbe.  call temp:= `a`() @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.a:()Ljava/io/IOException;` @kind static;
  #L2a0cc4.  v0:= 0I;
  #L2a0cc6.  throw v0;
  #L2a0cc8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a0cca.  @monitorexit v3
  #L2a0ccc.  throw v0;
  catch `java.lang.Throwable` @[L2a0c96..L2a0cb8] goto L2a0cc8;
  catch `java.lang.Throwable` @[L2a0cbe..L2a0cc4] goto L2a0cc8;
}
procedure `void` `close`(`com.bumptech.glide.load.resource.bitmap.v` v3 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a11e4.  v0:= v3.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] @kind object;
  #L2a11e8.  v1:= 0I;
  #L2a11ea.  if v0 == 0 then goto L2a1200;
  #L2a11ee.  v0:= v3.`com.bumptech.glide.load.resource.bitmap.v.k` @type ^`com.bumptech.glide.load.engine.z.b` @kind object;
  #L2a11f2.  v2:= v3.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] @kind object;
  #L2a11f6.  call `put`(v0, v2) @signature `Lcom/bumptech/glide/load/engine/z/b;.put:(Ljava/lang/Object;)V` @kind interface;
  #L2a11fc.  v3.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] := v1 @kind object;
  #L2a1200.  v0:= v3.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L2a1204.  v3.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` := v1 @kind object;
  #L2a1208.  if v0 == 0 then goto L2a1212;
  #L2a120c.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L2a1212.  return @kind void;
}
procedure `void` `fixMarkLimit`(`com.bumptech.glide.load.resource.bitmap.v` v1 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.fixMarkLimit:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a1224.  @monitorenter v1
  #L2a1226.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] @kind object;
  #L2a122a.  v0:= length @variable v0;
  #L2a122c.  v1.`com.bumptech.glide.load.resource.bitmap.v.h` @type ^`int` := v0;
  #L2a1230.  @monitorexit v1
  #L2a1232.  return @kind void;
  #L2a1234.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a1236.  @monitorexit v1
  #L2a1238.  throw v0;
  catch `java.lang.Throwable` @[L2a1226..L2a1230] goto L2a1234;
}
procedure `void` `mark`(`com.bumptech.glide.load.resource.bitmap.v` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.mark:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a1258.  @monitorenter v1
  #L2a125a.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.v.h` @type ^`int`;
  #L2a125e.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2a1264.  v2:= temp;
  #L2a1266.  v1.`com.bumptech.glide.load.resource.bitmap.v.h` @type ^`int` := v2;
  #L2a126a.  v2:= v1.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a126e.  v1.`com.bumptech.glide.load.resource.bitmap.v.i` @type ^`int` := v2;
  #L2a1272.  @monitorexit v1
  #L2a1274.  return @kind void;
  #L2a1276.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a1278.  @monitorexit v1
  #L2a127a.  throw v2;
  catch `java.lang.Throwable` @[L2a125a..L2a1272] goto L2a1276;
}
procedure `boolean` `markSupported`(`com.bumptech.glide.load.resource.bitmap.v` v1 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a0c80.  v0:= 1I;
  #L2a0c82.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.load.resource.bitmap.v` v6 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2a0dd4.  @monitorenter v6
  #L2a0dd6.  v0:= v6.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] @kind object;
  #L2a0dda.  v1:= v6.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L2a0dde.  v2:= 0I;
  #L2a0de0.  if v0 == 0 then goto L2a0e4a;
  #L2a0de4.  if v1 == 0 then goto L2a0e4a;
  #L2a0de8.  v3:= v6.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a0dec.  v4:= v6.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int`;
  #L2a0df0.  v5:= -1I;
  #L2a0df2.  if v3 < v4 then goto L2a0e06;
  #L2a0df6.  call temp:= `a`(v6, v1, v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.a:(Ljava/io/InputStream;[B)I` @kind direct;
  #L2a0dfc.  v1:= temp;
  #L2a0dfe.  if v1 != v5 then goto L2a0e06;
  #L2a0e02.  @monitorexit v6
  #L2a0e04.  return v5;
  #L2a0e06.  v1:= v6.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] @kind object;
  #L2a0e0a.  if v0 == v1 then goto L2a0e20;
  #L2a0e0e.  v0:= v6.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] @kind object;
  #L2a0e12.  if v0 == 0 then goto L2a0e18;
  #L2a0e16.  goto L2a0e20;
  #L2a0e18.  call temp:= `a`() @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.a:()Ljava/io/IOException;` @kind static;
  #L2a0e1e.  throw v2;
  #L2a0e20.  v1:= v6.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int`;
  #L2a0e24.  v2:= v6.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a0e28.  v1:= v1 - v2 @kind int;
  #L2a0e2a.  if v1 <= 0 then goto L2a0e46;
  #L2a0e2e.  v1:= v6.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a0e32.  v2:= v1 + 1;
  #L2a0e36.  v6.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int` := v2;
  #L2a0e3a.  v0:= v0[v1] @kind byte;
  #L2a0e3e.  v0:= v0 ^& 255;
  #L2a0e42.  @monitorexit v6
  #L2a0e44.  return v0;
  #L2a0e46.  @monitorexit v6
  #L2a0e48.  return v5;
  #L2a0e4a.  call temp:= `a`() @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.a:()Ljava/io/IOException;` @kind static;
  #L2a0e50.  throw v2;
  #L2a0e52.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a0e54.  @monitorexit v6
  #L2a0e56.  throw v0;
  catch `java.lang.Throwable` @[L2a0dd6..L2a0dfe] goto L2a0e52;
  catch `java.lang.Throwable` @[L2a0e06..L2a0e1e] goto L2a0e52;
  catch `java.lang.Throwable` @[L2a0e20..L2a0e3e] goto L2a0e52;
  catch `java.lang.Throwable` @[L2a0e4a..L2a0e50] goto L2a0e52;
}
procedure `int` `read`(`com.bumptech.glide.load.resource.bitmap.v` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2a0e8c.  @monitorenter v6
  #L2a0e8e.  v0:= v6.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] @kind object;
  #L2a0e92.  v1:= 0I;
  #L2a0e94.  if v0 == 0 then goto L2a0fbc;
  #L2a0e98.  if v9 != 0 then goto L2a0ea2;
  #L2a0e9c.  v7:= 0I;
  #L2a0e9e.  @monitorexit v6
  #L2a0ea0.  return v7;
  #L2a0ea2.  v2:= v6.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L2a0ea6.  if v2 == 0 then goto L2a0fb4;
  #L2a0eaa.  v3:= v6.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a0eae.  v4:= v6.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int`;
  #L2a0eb2.  if v3 >= v4 then goto L2a0f04;
  #L2a0eb6.  v3:= v6.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int`;
  #L2a0eba.  v4:= v6.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a0ebe.  v3:= v3 - v4 @kind int;
  #L2a0ec0.  if v3 < v9 then goto L2a0ec8;
  #L2a0ec4.  v3:= v9;
  #L2a0ec6.  goto L2a0ed2;
  #L2a0ec8.  v3:= v6.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int`;
  #L2a0ecc.  v4:= v6.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a0ed0.  v3:= v3 - v4 @kind int;
  #L2a0ed2.  v4:= v6.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a0ed6.  call `arraycopy`(v0, v4, v7, v8, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2a0edc.  v4:= v6.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a0ee0.  v4:= v4 + v3 @kind int;
  #L2a0ee2.  v6.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int` := v4;
  #L2a0ee6.  if v3 == v9 then goto L2a0f00;
  #L2a0eea.  call temp:= `available`(v2) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L2a0ef0.  v4:= temp;
  #L2a0ef2.  if v4 != 0 then goto L2a0ef8;
  #L2a0ef6.  goto L2a0f00;
  #L2a0ef8.  v8:= v8 + v3 @kind int;
  #L2a0efa.  v3:= v9 - v3 @kind int;
  #L2a0efe.  goto L2a0f06;
  #L2a0f00.  @monitorexit v6
  #L2a0f02.  return v3;
  #L2a0f04.  v3:= v9;
  #L2a0f06.  v4:= v6.`com.bumptech.glide.load.resource.bitmap.v.i` @type ^`int`;
  #L2a0f0a.  v5:= -1I;
  #L2a0f0c.  if v4 != v5 then goto L2a0f30;
  #L2a0f10.  v4:= length @variable v0;
  #L2a0f12.  if v3 < v4 then goto L2a0f30;
  #L2a0f16.  call temp:= `read`(v2, v7, v8, v3) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L2a0f1c.  v4:= temp;
  #L2a0f1e.  if v4 != v5 then goto L2a0f94;
  #L2a0f22.  if v3 != v9 then goto L2a0f28;
  #L2a0f26.  goto L2a0f2c;
  #L2a0f28.  v5:= v9 - v3 @kind int;
  #L2a0f2c.  @monitorexit v6
  #L2a0f2e.  return v5;
  #L2a0f30.  call temp:= `a`(v6, v2, v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.a:(Ljava/io/InputStream;[B)I` @kind direct;
  #L2a0f36.  v4:= temp;
  #L2a0f38.  if v4 != v5 then goto L2a0f4a;
  #L2a0f3c.  if v3 != v9 then goto L2a0f42;
  #L2a0f40.  goto L2a0f46;
  #L2a0f42.  v5:= v9 - v3 @kind int;
  #L2a0f46.  @monitorexit v6
  #L2a0f48.  return v5;
  #L2a0f4a.  v4:= v6.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] @kind object;
  #L2a0f4e.  if v0 == v4 then goto L2a0f64;
  #L2a0f52.  v0:= v6.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] @kind object;
  #L2a0f56.  if v0 == 0 then goto L2a0f5c;
  #L2a0f5a.  goto L2a0f64;
  #L2a0f5c.  call temp:= `a`() @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.a:()Ljava/io/IOException;` @kind static;
  #L2a0f62.  throw v1;
  #L2a0f64.  v4:= v6.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int`;
  #L2a0f68.  v5:= v6.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a0f6c.  v4:= v4 - v5 @kind int;
  #L2a0f6e.  if v4 < v3 then goto L2a0f76;
  #L2a0f72.  v4:= v3;
  #L2a0f74.  goto L2a0f80;
  #L2a0f76.  v4:= v6.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int`;
  #L2a0f7a.  v5:= v6.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a0f7e.  v4:= v4 - v5 @kind int;
  #L2a0f80.  v5:= v6.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a0f84.  call `arraycopy`(v0, v5, v7, v8, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2a0f8a.  v5:= v6.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a0f8e.  v5:= v5 + v4 @kind int;
  #L2a0f90.  v6.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int` := v5;
  #L2a0f94.  v3:= v3 - v4 @kind int;
  #L2a0f96.  if v3 != 0 then goto L2a0f9e;
  #L2a0f9a.  @monitorexit v6
  #L2a0f9c.  return v9;
  #L2a0f9e.  call temp:= `available`(v2) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L2a0fa4.  v5:= temp;
  #L2a0fa6.  if v5 != 0 then goto L2a0fb0;
  #L2a0faa.  v9:= v9 - v3 @kind int;
  #L2a0fac.  @monitorexit v6
  #L2a0fae.  return v9;
  #L2a0fb0.  v8:= v8 + v4 @kind int;
  #L2a0fb2.  goto L2a0f06;
  #L2a0fb4.  call temp:= `a`() @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.a:()Ljava/io/IOException;` @kind static;
  #L2a0fba.  throw v1;
  #L2a0fbc.  call temp:= `a`() @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.a:()Ljava/io/IOException;` @kind static;
  #L2a0fc2.  throw v1;
  #L2a0fc4.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a0fc6.  @monitorexit v6
  #L2a0fc8.  throw v7;
  catch `java.lang.Throwable` @[L2a0e8e..L2a0e92] goto L2a0fc4;
  catch `java.lang.Throwable` @[L2a0ea2..L2a0ef2] goto L2a0fc4;
  catch `java.lang.Throwable` @[L2a0f06..L2a0f1e] goto L2a0fc4;
  catch `java.lang.Throwable` @[L2a0f30..L2a0f38] goto L2a0fc4;
  catch `java.lang.Throwable` @[L2a0f4a..L2a0f62] goto L2a0fc4;
  catch `java.lang.Throwable` @[L2a0f64..L2a0f94] goto L2a0fc4;
  catch `java.lang.Throwable` @[L2a0f9e..L2a0fa6] goto L2a0fc4;
  catch `java.lang.Throwable` @[L2a0fb4..L2a0fba] goto L2a0fc4;
  catch `java.lang.Throwable` @[L2a0fbc..L2a0fc2] goto L2a0fc4;
}
procedure `void` `release`(`com.bumptech.glide.load.resource.bitmap.v` v2 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.release:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a1298.  @monitorenter v2
  #L2a129a.  v0:= v2.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] @kind object;
  #L2a129e.  if v0 == 0 then goto L2a12b6;
  #L2a12a2.  v0:= v2.`com.bumptech.glide.load.resource.bitmap.v.k` @type ^`com.bumptech.glide.load.engine.z.b` @kind object;
  #L2a12a6.  v1:= v2.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] @kind object;
  #L2a12aa.  call `put`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/z/b;.put:(Ljava/lang/Object;)V` @kind interface;
  #L2a12b0.  v0:= 0I;
  #L2a12b2.  v2.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] := v0 @kind object;
  #L2a12b6.  @monitorexit v2
  #L2a12b8.  return @kind void;
  #L2a12ba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a12bc.  @monitorexit v2
  #L2a12be.  throw v0;
  catch `java.lang.Throwable` @[L2a129a..L2a12b6] goto L2a12ba;
}
procedure `void` `reset`(`com.bumptech.glide.load.resource.bitmap.v` v3 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a12dc.  @monitorenter v3
  #L2a12de.  v0:= v3.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] @kind object;
  #L2a12e2.  if v0 == 0 then goto L2a1342;
  #L2a12e6.  v0:= -1I;
  #L2a12e8.  v1:= v3.`com.bumptech.glide.load.resource.bitmap.v.i` @type ^`int`;
  #L2a12ec.  if v0 == v1 then goto L2a12fc;
  #L2a12f0.  v0:= v3.`com.bumptech.glide.load.resource.bitmap.v.i` @type ^`int`;
  #L2a12f4.  v3.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int` := v0;
  #L2a12f8.  @monitorexit v3
  #L2a12fa.  return @kind void;
  #L2a12fc.  v0:= new `com.bumptech.glide.load.resource.bitmap.v$a`;
  #L2a1300.  v1:= new `java.lang.StringBuilder`;
  #L2a1304.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2a130a.  v2:= "Mark has been invalidated, pos: " @kind object;
  #L2a130e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a1314.  v2:= v3.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a1318.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a131e.  v2:= " markLimit: " @kind object;
  #L2a1322.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a1328.  v2:= v3.`com.bumptech.glide.load.resource.bitmap.v.h` @type ^`int`;
  #L2a132c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a1332.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a1338.  v1:= temp @kind object;
  #L2a133a.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/load/resource/bitmap/v$a;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a1340.  throw v0;
  #L2a1342.  v0:= new `java.io.IOException`;
  #L2a1346.  v1:= "Stream is closed" @kind object;
  #L2a134a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a1350.  throw v0;
  #L2a1352.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a1354.  @monitorexit v3
  #L2a1356.  throw v0;
  catch `java.lang.Throwable` @[L2a12de..L2a12f8] goto L2a1352;
  catch `java.lang.Throwable` @[L2a12fc..L2a1352] goto L2a1352;
}
procedure `long` `skip`(`com.bumptech.glide.load.resource.bitmap.v` v8 @kind this, `long` v9 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2a1048.  @monitorenter v8
  #L2a104a.  v0:= 1L;
  #L2a104e.  v2:= lcmp(v9, v0);
  #L2a1052.  if v2 >= 0 then goto L2a105e;
  #L2a1056.  v9:= 0L;
  #L2a105a.  @monitorexit v8
  #L2a105c.  return v9 @kind wide;
  #L2a105e.  v0:= v8.`com.bumptech.glide.load.resource.bitmap.v.f` @type ^`byte`[] @kind object;
  #L2a1062.  v1:= 0I;
  #L2a1064.  if v0 == 0 then goto L2a1134;
  #L2a1068.  v2:= v8.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L2a106c.  if v2 == 0 then goto L2a112c;
  #L2a1070.  v1:= v8.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int`;
  #L2a1074.  v3:= v8.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a1078.  v1:= v1 - v3 @kind int;
  #L2a107a.  v3:= (`long`) v1 @kind i2l;
  #L2a107c.  v1:= lcmp(v3, v9);
  #L2a1080.  if v1 < 0 then goto L2a1096;
  #L2a1084.  v0:= v8.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a1088.  v0:= (`long`) v0 @kind i2l;
  #L2a108a.  v0:= v0 + v9 @kind long;
  #L2a108c.  v1:= (`int`) v0 @kind l2i;
  #L2a108e.  v8.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int` := v1;
  #L2a1092.  @monitorexit v8
  #L2a1094.  return v9 @kind wide;
  #L2a1096.  v1:= v8.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int`;
  #L2a109a.  v3:= (`long`) v1 @kind i2l;
  #L2a109c.  v1:= v8.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a10a0.  v5:= (`long`) v1 @kind i2l;
  #L2a10a2.  v3:= v3 - v5 @kind long;
  #L2a10a4.  v1:= v8.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int`;
  #L2a10a8.  v8.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int` := v1;
  #L2a10ac.  v1:= v8.`com.bumptech.glide.load.resource.bitmap.v.i` @type ^`int`;
  #L2a10b0.  v5:= -1I;
  #L2a10b2.  if v1 == v5 then goto L2a111c;
  #L2a10b6.  v1:= v8.`com.bumptech.glide.load.resource.bitmap.v.h` @type ^`int`;
  #L2a10ba.  v6:= (`long`) v1 @kind i2l;
  #L2a10bc.  v1:= lcmp(v9, v6);
  #L2a10c0.  if v1 > 0 then goto L2a111c;
  #L2a10c4.  call temp:= `a`(v8, v2, v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.a:(Ljava/io/InputStream;[B)I` @kind direct;
  #L2a10ca.  v0:= temp;
  #L2a10cc.  if v0 != v5 then goto L2a10d4;
  #L2a10d0.  @monitorexit v8
  #L2a10d2.  return v3 @kind wide;
  #L2a10d4.  v0:= v8.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int`;
  #L2a10d8.  v1:= v8.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a10dc.  v0:= v0 - v1 @kind int;
  #L2a10de.  v0:= (`long`) v0 @kind i2l;
  #L2a10e0.  v5:= v9 - v3 @kind long;
  #L2a10e4.  v2:= lcmp(v0, v5);
  #L2a10e8.  if v2 < 0 then goto L2a1100;
  #L2a10ec.  v0:= v8.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a10f0.  v0:= (`long`) v0 @kind i2l;
  #L2a10f2.  v0:= v0 + v9 @kind long;
  #L2a10f4.  v0:= v0 - v3 @kind long;
  #L2a10f6.  v1:= (`int`) v0 @kind l2i;
  #L2a10f8.  v8.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int` := v1;
  #L2a10fc.  @monitorexit v8
  #L2a10fe.  return v9 @kind wide;
  #L2a1100.  v9:= v8.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int`;
  #L2a1104.  v9:= (`long`) v9 @kind i2l;
  #L2a1106.  v3:= v3 + v9 @kind long;
  #L2a1108.  v9:= v8.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int`;
  #L2a110c.  v9:= (`long`) v9 @kind i2l;
  #L2a110e.  v3:= v3 - v9 @kind long;
  #L2a1110.  v9:= v8.`com.bumptech.glide.load.resource.bitmap.v.g` @type ^`int`;
  #L2a1114.  v8.`com.bumptech.glide.load.resource.bitmap.v.j` @type ^`int` := v9;
  #L2a1118.  @monitorexit v8
  #L2a111a.  return v3 @kind wide;
  #L2a111c.  v9:= v9 - v3 @kind long;
  #L2a111e.  call temp:= `skip`(v2, v9) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L2a1124.  v9:= temp @kind wide;
  #L2a1126.  v3:= v3 + v9 @kind long;
  #L2a1128.  @monitorexit v8
  #L2a112a.  return v3 @kind wide;
  #L2a112c.  call temp:= `a`() @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.a:()Ljava/io/IOException;` @kind static;
  #L2a1132.  throw v1;
  #L2a1134.  call temp:= `a`() @signature `Lcom/bumptech/glide/load/resource/bitmap/v;.a:()Ljava/io/IOException;` @kind static;
  #L2a113a.  throw v1;
  #L2a113c.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a113e.  @monitorexit v8
  #L2a1140.  throw v9;
  catch `java.lang.Throwable` @[L2a105e..L2a1092] goto L2a113c;
  catch `java.lang.Throwable` @[L2a1096..L2a10cc] goto L2a113c;
  catch `java.lang.Throwable` @[L2a10d4..L2a10fc] goto L2a113c;
  catch `java.lang.Throwable` @[L2a1100..L2a1118] goto L2a113c;
  catch `java.lang.Throwable` @[L2a111e..L2a1126] goto L2a113c;
  catch `java.lang.Throwable` @[L2a112c..L2a1132] goto L2a113c;
  catch `java.lang.Throwable` @[L2a1134..L2a113a] goto L2a113c;
}
