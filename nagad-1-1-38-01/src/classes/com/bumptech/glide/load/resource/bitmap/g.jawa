record `com.bumptech.glide.load.resource.bitmap.g` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.j` @kind interface {
  `com.bumptech.glide.load.resource.bitmap.l` `com.bumptech.glide.load.resource.bitmap.g.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.g` v0 @kind this, `com.bumptech.glide.load.resource.bitmap.l` v1 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/g;.<init>:(Lcom/bumptech/glide/load/resource/bitmap/l;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L29dc6c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29dc72.  v0.`com.bumptech.glide.load.resource.bitmap.g.a` @type ^`com.bumptech.glide.load.resource.bitmap.l` := v1 @kind object;
  #L29dc76.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.u` `decode`(`com.bumptech.glide.load.resource.bitmap.g` v0 @kind this, `java.lang.Object` v1 @kind object, `int` v2 , `int` v3 , `com.bumptech.glide.load.h` v4 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/g;.decode:(Ljava/lang/Object;IILcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/engine/u;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L29dc24.  v1:= (`java.nio.ByteBuffer`) v1 @kind object;
  #L29dc28.  call temp:= `decode`(v0, v1, v2, v3, v4) @signature `Lcom/bumptech/glide/load/resource/bitmap/g;.decode:(Ljava/nio/ByteBuffer;IILcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/engine/u;` @kind virtual;
  #L29dc2e.  v1:= temp @kind object;
  #L29dc30.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.engine.u` `decode`(`com.bumptech.glide.load.resource.bitmap.g` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object, `int` v3 , `int` v4 , `com.bumptech.glide.load.h` v5 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/g;.decode:(Ljava/nio/ByteBuffer;IILcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/engine/u;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29dc44.  call temp:= `toStream`(v2) @signature `Lcom/bumptech/glide/s/a;.toStream:(Ljava/nio/ByteBuffer;)Ljava/io/InputStream;` @kind static;
  #L29dc4a.  v2:= temp @kind object;
  #L29dc4c.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.g.a` @type ^`com.bumptech.glide.load.resource.bitmap.l` @kind object;
  #L29dc50.  call temp:= `decode`(v0, v2, v3, v4, v5) @signature `Lcom/bumptech/glide/load/resource/bitmap/l;.decode:(Ljava/io/InputStream;IILcom/bumptech/glide/load/h;)Lcom/bumptech/glide/load/engine/u;` @kind virtual;
  #L29dc56.  v2:= temp @kind object;
  #L29dc58.  return v2 @kind object;
}
procedure `boolean` `handles`(`com.bumptech.glide.load.resource.bitmap.g` v0 @kind this, `java.lang.Object` v1 @kind object, `com.bumptech.glide.load.h` v2 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/g;.handles:(Ljava/lang/Object;Lcom/bumptech/glide/load/h;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L29dbe4.  v1:= (`java.nio.ByteBuffer`) v1 @kind object;
  #L29dbe8.  call temp:= `handles`(v0, v1, v2) @signature `Lcom/bumptech/glide/load/resource/bitmap/g;.handles:(Ljava/nio/ByteBuffer;Lcom/bumptech/glide/load/h;)Z` @kind virtual;
  #L29dbee.  v1:= temp;
  #L29dbf0.  return v1;
}
procedure `boolean` `handles`(`com.bumptech.glide.load.resource.bitmap.g` v0 @kind this, `java.nio.ByteBuffer` v1 @kind object, `com.bumptech.glide.load.h` v2 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/g;.handles:(Ljava/nio/ByteBuffer;Lcom/bumptech/glide/load/h;)Z` @AccessFlag PUBLIC {
    temp;

  #L29dc04.  v2:= v0.`com.bumptech.glide.load.resource.bitmap.g.a` @type ^`com.bumptech.glide.load.resource.bitmap.l` @kind object;
  #L29dc08.  call temp:= `handles`(v2, v1) @signature `Lcom/bumptech/glide/load/resource/bitmap/l;.handles:(Ljava/nio/ByteBuffer;)Z` @kind virtual;
  #L29dc0e.  v1:= temp;
  #L29dc10.  return v1;
}
