record `com.bumptech.glide.load.resource.bitmap.r$a` @kind class @AccessFlag PUBLIC_FINAL extends `com.bumptech.glide.load.resource.bitmap.r` @kind interface {
  `com.bumptech.glide.load.m.k` `com.bumptech.glide.load.resource.bitmap.r$a.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.z.b` `com.bumptech.glide.load.resource.bitmap.r$a.b` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `com.bumptech.glide.load.resource.bitmap.r$a.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.r$a` v1 @kind this, `java.io.InputStream` v2 @kind object, `java.util.List` v3 @kind object, `com.bumptech.glide.load.engine.z.b` v4 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/r$a;.<init>:(Ljava/io/InputStream;Ljava/util/List;Lcom/bumptech/glide/load/engine/z/b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2a08c8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a08ce.  call temp:= `checkNotNull`(v4) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2a08d4.  v0:= v4 @kind object;
  #L2a08d6.  v0:= (`com.bumptech.glide.load.engine.z.b`) v0 @kind object;
  #L2a08da.  v1.`com.bumptech.glide.load.resource.bitmap.r$a.b` @type ^`com.bumptech.glide.load.engine.z.b` := v0 @kind object;
  #L2a08de.  call temp:= `checkNotNull`(v3) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2a08e4.  v3:= (`java.util.List`) v3 @kind object;
  #L2a08e8.  v1.`com.bumptech.glide.load.resource.bitmap.r$a.c` @type ^`java.util.List` := v3 @kind object;
  #L2a08ec.  v3:= new `com.bumptech.glide.load.m.k`;
  #L2a08f0.  call `<init>`(v3, v2, v4) @signature `Lcom/bumptech/glide/load/m/k;.<init>:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/z/b;)V` @kind direct;
  #L2a08f6.  v1.`com.bumptech.glide.load.resource.bitmap.r$a.a` @type ^`com.bumptech.glide.load.m.k` := v3 @kind object;
  #L2a08fa.  return @kind void;
}
procedure `android.graphics.Bitmap` `decodeBitmap`(`com.bumptech.glide.load.resource.bitmap.r$a` v2 @kind this, `android.graphics.BitmapFactory$Options` v3 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/r$a;.decodeBitmap:(Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a0840.  v0:= v2.`com.bumptech.glide.load.resource.bitmap.r$a.a` @type ^`com.bumptech.glide.load.m.k` @kind object;
  #L2a0844.  call temp:= `rewindAndGet`(v0) @signature `Lcom/bumptech/glide/load/m/k;.rewindAndGet:()Ljava/io/InputStream;` @kind virtual;
  #L2a084a.  v0:= temp @kind object;
  #L2a084c.  v1:= 0I;
  #L2a084e.  call temp:= `decodeStream`(v0, v1, v3) @signature `Landroid/graphics/BitmapFactory;.decodeStream:(Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;` @kind static;
  #L2a0854.  v3:= temp @kind object;
  #L2a0856.  return v3 @kind object;
}
procedure `int` `getImageOrientation`(`com.bumptech.glide.load.resource.bitmap.r$a` v3 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/r$a;.getImageOrientation:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a0898.  v0:= v3.`com.bumptech.glide.load.resource.bitmap.r$a.c` @type ^`java.util.List` @kind object;
  #L2a089c.  v1:= v3.`com.bumptech.glide.load.resource.bitmap.r$a.a` @type ^`com.bumptech.glide.load.m.k` @kind object;
  #L2a08a0.  call temp:= `rewindAndGet`(v1) @signature `Lcom/bumptech/glide/load/m/k;.rewindAndGet:()Ljava/io/InputStream;` @kind virtual;
  #L2a08a6.  v1:= temp @kind object;
  #L2a08a8.  v2:= v3.`com.bumptech.glide.load.resource.bitmap.r$a.b` @type ^`com.bumptech.glide.load.engine.z.b` @kind object;
  #L2a08ac.  call temp:= `getOrientation`(v0, v1, v2) @signature `Lcom/bumptech/glide/load/e;.getOrientation:(Ljava/util/List;Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/z/b;)I` @kind static;
  #L2a08b2.  v0:= temp;
  #L2a08b4.  return v0;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `getImageType`(`com.bumptech.glide.load.resource.bitmap.r$a` v3 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/r$a;.getImageType:()Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a0868.  v0:= v3.`com.bumptech.glide.load.resource.bitmap.r$a.c` @type ^`java.util.List` @kind object;
  #L2a086c.  v1:= v3.`com.bumptech.glide.load.resource.bitmap.r$a.a` @type ^`com.bumptech.glide.load.m.k` @kind object;
  #L2a0870.  call temp:= `rewindAndGet`(v1) @signature `Lcom/bumptech/glide/load/m/k;.rewindAndGet:()Ljava/io/InputStream;` @kind virtual;
  #L2a0876.  v1:= temp @kind object;
  #L2a0878.  v2:= v3.`com.bumptech.glide.load.resource.bitmap.r$a.b` @type ^`com.bumptech.glide.load.engine.z.b` @kind object;
  #L2a087c.  call temp:= `getType`(v0, v1, v2) @signature `Lcom/bumptech/glide/load/e;.getType:(Ljava/util/List;Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/z/b;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind static;
  #L2a0882.  v0:= temp @kind object;
  #L2a0884.  return v0 @kind object;
}
procedure `void` `stopGrowingBuffers`(`com.bumptech.glide.load.resource.bitmap.r$a` v1 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/r$a;.stopGrowingBuffers:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a090c.  v0:= v1.`com.bumptech.glide.load.resource.bitmap.r$a.a` @type ^`com.bumptech.glide.load.m.k` @kind object;
  #L2a0910.  call `fixMarkLimits`(v0) @signature `Lcom/bumptech/glide/load/m/k;.fixMarkLimits:()V` @kind virtual;
  #L2a0916.  return @kind void;
}
