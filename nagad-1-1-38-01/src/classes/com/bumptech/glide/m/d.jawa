record `com.bumptech.glide.m.d` @kind class @AccessFlag PUBLIC {
  `byte`[] `com.bumptech.glide.m.d.a` @AccessFlag PRIVATE_FINAL;
  `java.nio.ByteBuffer` `com.bumptech.glide.m.d.b` @AccessFlag PRIVATE;
  `com.bumptech.glide.m.c` `com.bumptech.glide.m.d.c` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.m.d.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.m.d` v1 @kind this) @signature `Lcom/bumptech/glide/m/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L28c8e8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28c8ee.  v0:= 256I;
  #L28c8f2.  v0:= new `byte`[v0];
  #L28c8f6.  v1.`com.bumptech.glide.m.d.a` @type ^`byte`[] := v0 @kind object;
  #L28c8fa.  v0:= 0I;
  #L28c8fc.  v1.`com.bumptech.glide.m.d.d` @type ^`int` := v0;
  #L28c900.  return @kind void;
}
procedure `boolean` `a`(`com.bumptech.glide.m.d` v1 @kind this) @signature `Lcom/bumptech/glide/m/d;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L28c704.  v0:= v1.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28c708.  v0:= v0.`com.bumptech.glide.m.c.b` @type ^`int`;
  #L28c70c.  if v0 == 0 then goto L28c714;
  #L28c710.  v0:= 1I;
  #L28c712.  goto L28c716;
  #L28c714.  v0:= 0I;
  #L28c716.  return v0;
}
procedure `int`[] `a`(`com.bumptech.glide.m.d` v9 @kind this, `int` v10 ) @signature `Lcom/bumptech/glide/m/d;.a:(I)[I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L28c834.  v0:= v10 * 3;
  #L28c838.  v0:= new `byte`[v0];
  #L28c83c.  v1:= 0I;
  #L28c83e.  v2:= v9.`com.bumptech.glide.m.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L28c842.  call temp:= `get`(v2, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L28c848.  v2:= 256I;
  #L28c84c.  v1:= new `int`[v2];
  #L28c850.  v2:= 0I;
  #L28c852.  v3:= 0I;
  #L28c854.  if v2 >= v10 then goto L28c8c4;
  #L28c858.  v4:= v3 + 1;
  #L28c85c.  v3:= v0[v3] @kind byte;
  #L28c860.  v3:= v3 ^& 255;
  #L28c864.  v5:= v4 + 1;
  #L28c868.  v4:= v0[v4] @kind byte;
  #L28c86c.  v4:= v4 ^& 255;
  #L28c870.  v6:= v5 + 1;
  #L28c874.  v5:= v0[v5] @kind byte;
  #L28c878.  v5:= v5 ^& 255;
  #L28c87c.  v7:= v2 + 1;
  #L28c880.  v8:= -16777216I;
  #L28c884.  v3:= v3 ^< 16;
  #L28c888.  v3:= v3 ^| v8 @kind int;
  #L28c88a.  v4:= v4 ^< 8;
  #L28c88e.  v3:= v3 ^| v4 @kind int;
  #L28c890.  v3:= v3 ^| v5 @kind int;
  #L28c892.  v1[v2]:= v3;
  #L28c896.  v3:= v6;
  #L28c898.  v2:= v7;
  #L28c89a.  goto L28c854;
  #L28c89c.  v10:= Exception @type ^`java.nio.BufferUnderflowException` @kind object;
  #L28c89e.  v0:= "GifHeaderParser" @kind object;
  #L28c8a2.  v2:= 3I;
  #L28c8a4.  call temp:= `isLoggable`(v0, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L28c8aa.  v2:= temp;
  #L28c8ac.  if v2 == 0 then goto L28c8ba;
  #L28c8b0.  v2:= "Format Error Reading Color Table" @kind object;
  #L28c8b4.  call temp:= `d`(v0, v2, v10) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L28c8ba.  v10:= v9.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28c8be.  v0:= 1I;
  #L28c8c0.  v10.`com.bumptech.glide.m.c.b` @type ^`int` := v0;
  #L28c8c4.  return v1 @kind object;
  catch `java.nio.BufferUnderflowException` @[L28c83e..L28c896] goto L28c89c;
}
procedure `int` `b`(`com.bumptech.glide.m.d` v2 @kind this) @signature `Lcom/bumptech/glide/m/d;.b:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L28c7d4.  v0:= v2.`com.bumptech.glide.m.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L28c7d8.  call temp:= `get`(v0) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L28c7de.  v0:= temp;
  #L28c7e0.  v0:= v0 ^& 255;
  #L28c7e4.  goto L28c7f2;
  #L28c7e6.  v0:= v2.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28c7ea.  v1:= 1I;
  #L28c7ec.  v0.`com.bumptech.glide.m.c.b` @type ^`int` := v1;
  #L28c7f0.  v0:= 0I;
  #L28c7f2.  return v0;
  catch `java.lang.Exception` @[L28c7d4..L28c7e0] goto L28c7e6;
}
procedure `void` `b`(`com.bumptech.glide.m.d` v5 @kind this, `int` v6 ) @signature `Lcom/bumptech/glide/m/d;.b:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28cb2c.  v0:= 0I;
  #L28cb2e.  v1:= 0I;
  #L28cb30.  if v1 != 0 then goto L28cc50;
  #L28cb34.  call temp:= `a`(v5) @signature `Lcom/bumptech/glide/m/d;.a:()Z` @kind direct;
  #L28cb3a.  v2:= temp;
  #L28cb3c.  if v2 != 0 then goto L28cc50;
  #L28cb40.  v2:= v5.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28cb44.  v2:= v2.`com.bumptech.glide.m.c.c` @type ^`int`;
  #L28cb48.  if v2 > v6 then goto L28cc50;
  #L28cb4c.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/m/d;.b:()I` @kind direct;
  #L28cb52.  v2:= temp;
  #L28cb54.  v3:= 33I;
  #L28cb58.  v4:= 1I;
  #L28cb5a.  if v2 == v3 then goto L28cb9e;
  #L28cb5e.  v3:= 44I;
  #L28cb62.  if v2 == v3 then goto L28cb7c;
  #L28cb66.  v3:= 59I;
  #L28cb6a.  if v2 == v3 then goto L28cb78;
  #L28cb6e.  v2:= v5.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28cb72.  v2.`com.bumptech.glide.m.c.b` @type ^`int` := v4;
  #L28cb76.  goto L28cb30;
  #L28cb78.  v1:= 1I;
  #L28cb7a.  goto L28cb30;
  #L28cb7c.  v2:= v5.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28cb80.  v3:= v2.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.b` @kind object;
  #L28cb84.  if v3 != 0 then goto L28cb96;
  #L28cb88.  v3:= new `com.bumptech.glide.m.b`;
  #L28cb8c.  call `<init>`(v3) @signature `Lcom/bumptech/glide/m/b;.<init>:()V` @kind direct;
  #L28cb92.  v2.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.b` := v3 @kind object;
  #L28cb96.  call `c`(v5) @signature `Lcom/bumptech/glide/m/d;.c:()V` @kind direct;
  #L28cb9c.  goto L28cb30;
  #L28cb9e.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/m/d;.b:()I` @kind direct;
  #L28cba4.  v2:= temp;
  #L28cba6.  if v2 == v4 then goto L28cc46;
  #L28cbaa.  v3:= 249I;
  #L28cbae.  if v2 == v3 then goto L28cc2a;
  #L28cbb2.  v3:= 254I;
  #L28cbb6.  if v2 == v3 then goto L28cc22;
  #L28cbba.  v3:= 255I;
  #L28cbbe.  if v2 == v3 then goto L28cbca;
  #L28cbc2.  call `l`(v5) @signature `Lcom/bumptech/glide/m/d;.l:()V` @kind direct;
  #L28cbc8.  goto L28cb30;
  #L28cbca.  call `d`(v5) @signature `Lcom/bumptech/glide/m/d;.d:()V` @kind direct;
  #L28cbd0.  v2:= new `java.lang.StringBuilder`;
  #L28cbd4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28cbda.  v3:= 0I;
  #L28cbdc.  v4:= 11I;
  #L28cbe0.  if v3 >= v4 then goto L28cbfa;
  #L28cbe4.  v4:= v5.`com.bumptech.glide.m.d.a` @type ^`byte`[] @kind object;
  #L28cbe8.  v4:= v4[v3] @kind byte;
  #L28cbec.  v4:= (`char`) v4 @kind i2c;
  #L28cbee.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L28cbf4.  v3:= v3 + 1;
  #L28cbf8.  goto L28cbdc;
  #L28cbfa.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28cc00.  v2:= temp @kind object;
  #L28cc02.  v3:= "NETSCAPE2.0" @kind object;
  #L28cc06.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L28cc0c.  v2:= temp;
  #L28cc0e.  if v2 == 0 then goto L28cc1a;
  #L28cc12.  call `i`(v5) @signature `Lcom/bumptech/glide/m/d;.i:()V` @kind direct;
  #L28cc18.  goto L28cb30;
  #L28cc1a.  call `l`(v5) @signature `Lcom/bumptech/glide/m/d;.l:()V` @kind direct;
  #L28cc20.  goto L28cb30;
  #L28cc22.  call `l`(v5) @signature `Lcom/bumptech/glide/m/d;.l:()V` @kind direct;
  #L28cc28.  goto L28cb30;
  #L28cc2a.  v2:= v5.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28cc2e.  v3:= new `com.bumptech.glide.m.b`;
  #L28cc32.  call `<init>`(v3) @signature `Lcom/bumptech/glide/m/b;.<init>:()V` @kind direct;
  #L28cc38.  v2.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.b` := v3 @kind object;
  #L28cc3c.  call `f`(v5) @signature `Lcom/bumptech/glide/m/d;.f:()V` @kind direct;
  #L28cc42.  goto L28cb30;
  #L28cc46.  call `l`(v5) @signature `Lcom/bumptech/glide/m/d;.l:()V` @kind direct;
  #L28cc4c.  goto L28cb30;
  #L28cc50.  return @kind void;
}
procedure `void` `c`(`com.bumptech.glide.m.d` v8 @kind this) @signature `Lcom/bumptech/glide/m/d;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L28c930.  v0:= v8.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28c934.  v0:= v0.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.b` @kind object;
  #L28c938.  call temp:= `j`(v8) @signature `Lcom/bumptech/glide/m/d;.j:()I` @kind direct;
  #L28c93e.  v1:= temp;
  #L28c940.  v0.`com.bumptech.glide.m.b.a` @type ^`int` := v1;
  #L28c944.  v0:= v8.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28c948.  v0:= v0.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.b` @kind object;
  #L28c94c.  call temp:= `j`(v8) @signature `Lcom/bumptech/glide/m/d;.j:()I` @kind direct;
  #L28c952.  v1:= temp;
  #L28c954.  v0.`com.bumptech.glide.m.b.b` @type ^`int` := v1;
  #L28c958.  v0:= v8.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28c95c.  v0:= v0.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.b` @kind object;
  #L28c960.  call temp:= `j`(v8) @signature `Lcom/bumptech/glide/m/d;.j:()I` @kind direct;
  #L28c966.  v1:= temp;
  #L28c968.  v0.`com.bumptech.glide.m.b.c` @type ^`int` := v1;
  #L28c96c.  v0:= v8.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28c970.  v0:= v0.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.b` @kind object;
  #L28c974.  call temp:= `j`(v8) @signature `Lcom/bumptech/glide/m/d;.j:()I` @kind direct;
  #L28c97a.  v1:= temp;
  #L28c97c.  v0.`com.bumptech.glide.m.b.d` @type ^`int` := v1;
  #L28c980.  call temp:= `b`(v8) @signature `Lcom/bumptech/glide/m/d;.b:()I` @kind direct;
  #L28c986.  v0:= temp;
  #L28c988.  v1:= v0 ^& 128;
  #L28c98c.  v2:= 0I;
  #L28c98e.  v3:= 1I;
  #L28c990.  if v1 == 0 then goto L28c998;
  #L28c994.  v1:= 1I;
  #L28c996.  goto L28c99a;
  #L28c998.  v1:= 0I;
  #L28c99a.  v4:= 2.0D;
  #L28c99e.  v6:= v0 ^& 7;
  #L28c9a2.  v6:= v6 + v3 @kind int;
  #L28c9a4.  v6:= (`double`) v6 @kind i2d;
  #L28c9a6.  call temp:= `pow`(v4, v6) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L28c9ac.  v4:= temp @kind wide;
  #L28c9ae.  v4:= (`int`) v4 @kind d2i;
  #L28c9b0.  v5:= v8.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28c9b4.  v5:= v5.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.b` @kind object;
  #L28c9b8.  v0:= v0 ^& 64;
  #L28c9bc.  if v0 == 0 then goto L28c9c2;
  #L28c9c0.  v2:= 1I;
  #L28c9c2.  v5.`com.bumptech.glide.m.b.e` @type ^`boolean` := v2 @kind boolean;
  #L28c9c6.  if v1 == 0 then goto L28c9e0;
  #L28c9ca.  v0:= v8.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28c9ce.  v0:= v0.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.b` @kind object;
  #L28c9d2.  call temp:= `a`(v8, v4) @signature `Lcom/bumptech/glide/m/d;.a:(I)[I` @kind direct;
  #L28c9d8.  v1:= temp @kind object;
  #L28c9da.  v0.`com.bumptech.glide.m.b.k` @type ^`int`[] := v1 @kind object;
  #L28c9de.  goto L28c9ee;
  #L28c9e0.  v0:= v8.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28c9e4.  v0:= v0.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.b` @kind object;
  #L28c9e8.  v1:= 0I;
  #L28c9ea.  v0.`com.bumptech.glide.m.b.k` @type ^`int`[] := v1 @kind object;
  #L28c9ee.  v0:= v8.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28c9f2.  v0:= v0.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.b` @kind object;
  #L28c9f6.  v1:= v8.`com.bumptech.glide.m.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L28c9fa.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L28ca00.  v1:= temp;
  #L28ca02.  v0.`com.bumptech.glide.m.b.j` @type ^`int` := v1;
  #L28ca06.  call `m`(v8) @signature `Lcom/bumptech/glide/m/d;.m:()V` @kind direct;
  #L28ca0c.  call temp:= `a`(v8) @signature `Lcom/bumptech/glide/m/d;.a:()Z` @kind direct;
  #L28ca12.  v0:= temp;
  #L28ca14.  if v0 == 0 then goto L28ca1a;
  #L28ca18.  return @kind void;
  #L28ca1a.  v0:= v8.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28ca1e.  v1:= v0.`com.bumptech.glide.m.c.c` @type ^`int`;
  #L28ca22.  v1:= v1 + v3 @kind int;
  #L28ca24.  v0.`com.bumptech.glide.m.c.c` @type ^`int` := v1;
  #L28ca28.  v1:= v0.`com.bumptech.glide.m.c.e` @type ^`java.util.List` @kind object;
  #L28ca2c.  v0:= v0.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.b` @kind object;
  #L28ca30.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L28ca36.  return @kind void;
}
procedure `void` `d`(`com.bumptech.glide.m.d` v6 @kind this) @signature `Lcom/bumptech/glide/m/d;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L28ca48.  call temp:= `b`(v6) @signature `Lcom/bumptech/glide/m/d;.b:()I` @kind direct;
  #L28ca4e.  v0:= temp;
  #L28ca50.  v6.`com.bumptech.glide.m.d.d` @type ^`int` := v0;
  #L28ca54.  v0:= v6.`com.bumptech.glide.m.d.d` @type ^`int`;
  #L28ca58.  if v0 <= 0 then goto L28caea;
  #L28ca5c.  v0:= 0I;
  #L28ca5e.  v1:= 0I;
  #L28ca60.  v2:= v6.`com.bumptech.glide.m.d.d` @type ^`int`;
  #L28ca64.  if v0 >= v2 then goto L28caea;
  #L28ca68.  v1:= v6.`com.bumptech.glide.m.d.d` @type ^`int`;
  #L28ca6c.  v1:= v1 - v0 @kind int;
  #L28ca6e.  v2:= v6.`com.bumptech.glide.m.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L28ca72.  v3:= v6.`com.bumptech.glide.m.d.a` @type ^`byte`[] @kind object;
  #L28ca76.  call temp:= `get`(v2, v3, v0, v1) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L28ca7c.  v0:= v0 + v1 @kind int;
  #L28ca7e.  goto L28ca60;
  #L28ca80.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L28ca82.  v3:= 3I;
  #L28ca84.  v4:= "GifHeaderParser" @kind object;
  #L28ca88.  call temp:= `isLoggable`(v4, v3) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L28ca8e.  v3:= temp;
  #L28ca90.  if v3 == 0 then goto L28cae0;
  #L28ca94.  v3:= new `java.lang.StringBuilder`;
  #L28ca98.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28ca9e.  v5:= "Error Reading Block n: " @kind object;
  #L28caa2.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28caa8.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L28caae.  v0:= " count: " @kind object;
  #L28cab2.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28cab8.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L28cabe.  v0:= " blockSize: " @kind object;
  #L28cac2.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28cac8.  v0:= v6.`com.bumptech.glide.m.d.d` @type ^`int`;
  #L28cacc.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L28cad2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28cad8.  v0:= temp @kind object;
  #L28cada.  call temp:= `d`(v4, v0, v2) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L28cae0.  v0:= v6.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28cae4.  v1:= 1I;
  #L28cae6.  v0.`com.bumptech.glide.m.c.b` @type ^`int` := v1;
  #L28caea.  return @kind void;
  catch `java.lang.Exception` @[L28ca60..L28ca7c] goto L28ca80;
}
procedure `void` `e`(`com.bumptech.glide.m.d` v1 @kind this) @signature `Lcom/bumptech/glide/m/d;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L28cb0c.  v0:= 2147483647I;
  #L28cb12.  call `b`(v1, v0) @signature `Lcom/bumptech/glide/m/d;.b:(I)V` @kind direct;
  #L28cb18.  return @kind void;
}
procedure `void` `f`(`com.bumptech.glide.m.d` v5 @kind this) @signature `Lcom/bumptech/glide/m/d;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28cc64.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/m/d;.b:()I` @kind direct;
  #L28cc6a.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/m/d;.b:()I` @kind direct;
  #L28cc70.  v0:= temp;
  #L28cc72.  v1:= v5.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28cc76.  v1:= v1.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.b` @kind object;
  #L28cc7a.  v2:= v0 ^& 28;
  #L28cc7e.  v3:= 2I;
  #L28cc80.  v2:= v2 ^> v3 @kind int;
  #L28cc82.  v1.`com.bumptech.glide.m.b.g` @type ^`int` := v2;
  #L28cc86.  v2:= v1.`com.bumptech.glide.m.b.g` @type ^`int`;
  #L28cc8a.  v4:= 1I;
  #L28cc8c.  if v2 != 0 then goto L28cc94;
  #L28cc90.  v1.`com.bumptech.glide.m.b.g` @type ^`int` := v4;
  #L28cc94.  v1:= v5.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28cc98.  v1:= v1.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.b` @kind object;
  #L28cc9c.  v0:= v0 ^& v4 @kind int;
  #L28cc9e.  if v0 == 0 then goto L28cca4;
  #L28cca2.  goto L28cca6;
  #L28cca4.  v4:= 0I;
  #L28cca6.  v1.`com.bumptech.glide.m.b.f` @type ^`boolean` := v4 @kind boolean;
  #L28ccaa.  call temp:= `j`(v5) @signature `Lcom/bumptech/glide/m/d;.j:()I` @kind direct;
  #L28ccb0.  v0:= temp;
  #L28ccb2.  v1:= 10I;
  #L28ccb6.  if v0 >= v3 then goto L28ccbe;
  #L28ccba.  v0:= 10I;
  #L28ccbe.  v2:= v5.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28ccc2.  v2:= v2.`com.bumptech.glide.m.c.d` @type ^`com.bumptech.glide.m.b` @kind object;
  #L28ccc6.  v0:= v0 * 10;
  #L28ccca.  v2.`com.bumptech.glide.m.b.i` @type ^`int` := v0;
  #L28ccce.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/m/d;.b:()I` @kind direct;
  #L28ccd4.  v0:= temp;
  #L28ccd6.  v2.`com.bumptech.glide.m.b.h` @type ^`int` := v0;
  #L28ccda.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/m/d;.b:()I` @kind direct;
  #L28cce0.  return @kind void;
}
procedure `void` `g`(`com.bumptech.glide.m.d` v3 @kind this) @signature `Lcom/bumptech/glide/m/d;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L28ccf4.  v0:= new `java.lang.StringBuilder`;
  #L28ccf8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28ccfe.  v1:= 0I;
  #L28cd00.  v2:= 6I;
  #L28cd02.  if v1 >= v2 then goto L28cd1c;
  #L28cd06.  call temp:= `b`(v3) @signature `Lcom/bumptech/glide/m/d;.b:()I` @kind direct;
  #L28cd0c.  v2:= temp;
  #L28cd0e.  v2:= (`char`) v2 @kind i2c;
  #L28cd10.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L28cd16.  v1:= v1 + 1;
  #L28cd1a.  goto L28cd00;
  #L28cd1c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28cd22.  v0:= temp @kind object;
  #L28cd24.  v1:= "GIF" @kind object;
  #L28cd28.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L28cd2e.  v0:= temp;
  #L28cd30.  if v0 != 0 then goto L28cd40;
  #L28cd34.  v0:= v3.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28cd38.  v1:= 1I;
  #L28cd3a.  v0.`com.bumptech.glide.m.c.b` @type ^`int` := v1;
  #L28cd3e.  return @kind void;
  #L28cd40.  call `h`(v3) @signature `Lcom/bumptech/glide/m/d;.h:()V` @kind direct;
  #L28cd46.  v0:= v3.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28cd4a.  v0:= v0.`com.bumptech.glide.m.c.h` @type ^`boolean` @kind boolean;
  #L28cd4e.  if v0 == 0 then goto L28cd86;
  #L28cd52.  call temp:= `a`(v3) @signature `Lcom/bumptech/glide/m/d;.a:()Z` @kind direct;
  #L28cd58.  v0:= temp;
  #L28cd5a.  if v0 != 0 then goto L28cd86;
  #L28cd5e.  v0:= v3.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28cd62.  v1:= v0.`com.bumptech.glide.m.c.i` @type ^`int`;
  #L28cd66.  call temp:= `a`(v3, v1) @signature `Lcom/bumptech/glide/m/d;.a:(I)[I` @kind direct;
  #L28cd6c.  v1:= temp @kind object;
  #L28cd6e.  v0.`com.bumptech.glide.m.c.a` @type ^`int`[] := v1 @kind object;
  #L28cd72.  v0:= v3.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28cd76.  v1:= v0.`com.bumptech.glide.m.c.a` @type ^`int`[] @kind object;
  #L28cd7a.  v2:= v0.`com.bumptech.glide.m.c.j` @type ^`int`;
  #L28cd7e.  v1:= v1[v2];
  #L28cd82.  v0.`com.bumptech.glide.m.c.l` @type ^`int` := v1;
  #L28cd86.  return @kind void;
}
procedure `void` `h`(`com.bumptech.glide.m.d` v6 @kind this) @signature `Lcom/bumptech/glide/m/d;.h:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L28cd98.  v0:= v6.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28cd9c.  call temp:= `j`(v6) @signature `Lcom/bumptech/glide/m/d;.j:()I` @kind direct;
  #L28cda2.  v1:= temp;
  #L28cda4.  v0.`com.bumptech.glide.m.c.f` @type ^`int` := v1;
  #L28cda8.  v0:= v6.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28cdac.  call temp:= `j`(v6) @signature `Lcom/bumptech/glide/m/d;.j:()I` @kind direct;
  #L28cdb2.  v1:= temp;
  #L28cdb4.  v0.`com.bumptech.glide.m.c.g` @type ^`int` := v1;
  #L28cdb8.  call temp:= `b`(v6) @signature `Lcom/bumptech/glide/m/d;.b:()I` @kind direct;
  #L28cdbe.  v0:= temp;
  #L28cdc0.  v1:= v6.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28cdc4.  v2:= v0 ^& 128;
  #L28cdc8.  v3:= 1I;
  #L28cdca.  if v2 == 0 then goto L28cdd2;
  #L28cdce.  v2:= 1I;
  #L28cdd0.  goto L28cdd4;
  #L28cdd2.  v2:= 0I;
  #L28cdd4.  v1.`com.bumptech.glide.m.c.h` @type ^`boolean` := v2 @kind boolean;
  #L28cdd8.  v1:= v6.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28cddc.  v4:= 2.0D;
  #L28cde0.  v0:= v0 ^& 7;
  #L28cde4.  v0:= v0 + v3 @kind int;
  #L28cde6.  v2:= (`double`) v0 @kind i2d;
  #L28cde8.  call temp:= `pow`(v4, v2) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L28cdee.  v2:= temp @kind wide;
  #L28cdf0.  v0:= (`int`) v2 @kind d2i;
  #L28cdf2.  v1.`com.bumptech.glide.m.c.i` @type ^`int` := v0;
  #L28cdf6.  v0:= v6.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28cdfa.  call temp:= `b`(v6) @signature `Lcom/bumptech/glide/m/d;.b:()I` @kind direct;
  #L28ce00.  v1:= temp;
  #L28ce02.  v0.`com.bumptech.glide.m.c.j` @type ^`int` := v1;
  #L28ce06.  v0:= v6.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28ce0a.  call temp:= `b`(v6) @signature `Lcom/bumptech/glide/m/d;.b:()I` @kind direct;
  #L28ce10.  v1:= temp;
  #L28ce12.  v0.`com.bumptech.glide.m.c.k` @type ^`int` := v1;
  #L28ce16.  return @kind void;
}
procedure `void` `i`(`com.bumptech.glide.m.d` v3 @kind this) @signature `Lcom/bumptech/glide/m/d;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L28ce28.  call `d`(v3) @signature `Lcom/bumptech/glide/m/d;.d:()V` @kind direct;
  #L28ce2e.  v0:= v3.`com.bumptech.glide.m.d.a` @type ^`byte`[] @kind object;
  #L28ce32.  v1:= 0I;
  #L28ce34.  v1:= v0[v1] @kind byte;
  #L28ce38.  v2:= 1I;
  #L28ce3a.  if v1 != v2 then goto L28ce5e;
  #L28ce3e.  v1:= v0[v2] @kind byte;
  #L28ce42.  v1:= v1 ^& 255;
  #L28ce46.  v2:= 2I;
  #L28ce48.  v0:= v0[v2] @kind byte;
  #L28ce4c.  v0:= v0 ^& 255;
  #L28ce50.  v2:= v3.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28ce54.  v0:= v0 ^< 8;
  #L28ce58.  v0:= v0 ^| v1 @kind int;
  #L28ce5a.  v2.`com.bumptech.glide.m.c.m` @type ^`int` := v0;
  #L28ce5e.  v0:= v3.`com.bumptech.glide.m.d.d` @type ^`int`;
  #L28ce62.  if v0 <= 0 then goto L28ce72;
  #L28ce66.  call temp:= `a`(v3) @signature `Lcom/bumptech/glide/m/d;.a:()Z` @kind direct;
  #L28ce6c.  v0:= temp;
  #L28ce6e.  if v0 == 0 then goto L28ce28;
  #L28ce72.  return @kind void;
}
procedure `int` `j`(`com.bumptech.glide.m.d` v1 @kind this) @signature `Lcom/bumptech/glide/m/d;.j:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L28c814.  v0:= v1.`com.bumptech.glide.m.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L28c818.  call temp:= `getShort`(v0) @signature `Ljava/nio/ByteBuffer;.getShort:()S` @kind virtual;
  #L28c81e.  v0:= temp;
  #L28c820.  return v0;
}
procedure `void` `k`(`com.bumptech.glide.m.d` v2 @kind this) @signature `Lcom/bumptech/glide/m/d;.k:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L28ce84.  v0:= 0I;
  #L28ce86.  v2.`com.bumptech.glide.m.d.b` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L28ce8a.  v0:= v2.`com.bumptech.glide.m.d.a` @type ^`byte`[] @kind object;
  #L28ce8e.  v1:= 0I;
  #L28ce90.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([BB)V` @kind static;
  #L28ce96.  v0:= new `com.bumptech.glide.m.c`;
  #L28ce9a.  call `<init>`(v0) @signature `Lcom/bumptech/glide/m/c;.<init>:()V` @kind direct;
  #L28cea0.  v2.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` := v0 @kind object;
  #L28cea4.  v2.`com.bumptech.glide.m.d.d` @type ^`int` := v1;
  #L28cea8.  return @kind void;
}
procedure `void` `l`(`com.bumptech.glide.m.d` v3 @kind this) @signature `Lcom/bumptech/glide/m/d;.l:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L28cebc.  call temp:= `b`(v3) @signature `Lcom/bumptech/glide/m/d;.b:()I` @kind direct;
  #L28cec2.  v0:= temp;
  #L28cec4.  v1:= v3.`com.bumptech.glide.m.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L28cec8.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L28cece.  v1:= temp;
  #L28ced0.  v1:= v1 + v0 @kind int;
  #L28ced2.  v2:= v3.`com.bumptech.glide.m.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L28ced6.  call temp:= `limit`(v2) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L28cedc.  v2:= temp;
  #L28cede.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L28cee4.  v1:= temp;
  #L28cee6.  v2:= v3.`com.bumptech.glide.m.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L28ceea.  call temp:= `position`(v2, v1) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L28cef0.  if v0 > 0 then goto L28cebc;
  #L28cef4.  return @kind void;
}
procedure `void` `m`(`com.bumptech.glide.m.d` v0 @kind this) @signature `Lcom/bumptech/glide/m/d;.m:()V` @AccessFlag PRIVATE {
    temp;

  #L28cf08.  call temp:= `b`(v0) @signature `Lcom/bumptech/glide/m/d;.b:()I` @kind direct;
  #L28cf0e.  call `l`(v0) @signature `Lcom/bumptech/glide/m/d;.l:()V` @kind direct;
  #L28cf14.  return @kind void;
}
procedure `void` `clear`(`com.bumptech.glide.m.d` v1 @kind this) @signature `Lcom/bumptech/glide/m/d;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28c914.  v0:= 0I;
  #L28c916.  v1.`com.bumptech.glide.m.d.b` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L28c91a.  v1.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` := v0 @kind object;
  #L28c91e.  return @kind void;
}
procedure `com.bumptech.glide.m.c` `parseHeader`(`com.bumptech.glide.m.d` v2 @kind this) @signature `Lcom/bumptech/glide/m/d;.parseHeader:()Lcom/bumptech/glide/m/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28c728.  v0:= v2.`com.bumptech.glide.m.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L28c72c.  if v0 == 0 then goto L28c772;
  #L28c730.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/m/d;.a:()Z` @kind direct;
  #L28c736.  v0:= temp;
  #L28c738.  if v0 == 0 then goto L28c742;
  #L28c73c.  v0:= v2.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28c740.  return v0 @kind object;
  #L28c742.  call `g`(v2) @signature `Lcom/bumptech/glide/m/d;.g:()V` @kind direct;
  #L28c748.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/m/d;.a:()Z` @kind direct;
  #L28c74e.  v0:= temp;
  #L28c750.  if v0 != 0 then goto L28c76c;
  #L28c754.  call `e`(v2) @signature `Lcom/bumptech/glide/m/d;.e:()V` @kind direct;
  #L28c75a.  v0:= v2.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28c75e.  v1:= v0.`com.bumptech.glide.m.c.c` @type ^`int`;
  #L28c762.  if v1 >= 0 then goto L28c76c;
  #L28c766.  v1:= 1I;
  #L28c768.  v0.`com.bumptech.glide.m.c.b` @type ^`int` := v1;
  #L28c76c.  v0:= v2.`com.bumptech.glide.m.d.c` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28c770.  return v0 @kind object;
  #L28c772.  v0:= new `java.lang.IllegalStateException`;
  #L28c776.  v1:= "You must call setData() before parseHeader()" @kind object;
  #L28c77a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28c780.  throw v0;
}
procedure `com.bumptech.glide.m.d` `setData`(`com.bumptech.glide.m.d` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Lcom/bumptech/glide/m/d;.setData:(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/m/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28c794.  call `k`(v1) @signature `Lcom/bumptech/glide/m/d;.k:()V` @kind direct;
  #L28c79a.  call temp:= `asReadOnlyBuffer`(v2) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L28c7a0.  v2:= temp @kind object;
  #L28c7a2.  v1.`com.bumptech.glide.m.d.b` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L28c7a6.  v2:= v1.`com.bumptech.glide.m.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L28c7aa.  v0:= 0I;
  #L28c7ac.  call temp:= `position`(v2, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L28c7b2.  v2:= v1.`com.bumptech.glide.m.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L28c7b6.  v0:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L28c7ba.  call temp:= `order`(v2, v0) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L28c7c0.  return v1 @kind object;
}
