record `com.bumptech.glide.m.e` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.m.a` @kind interface {
  `int`[] `com.bumptech.glide.m.e.a` @AccessFlag PRIVATE;
  `int`[] `com.bumptech.glide.m.e.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.m.a$a` `com.bumptech.glide.m.e.c` @AccessFlag PRIVATE_FINAL;
  `java.nio.ByteBuffer` `com.bumptech.glide.m.e.d` @AccessFlag PRIVATE;
  `byte`[] `com.bumptech.glide.m.e.e` @AccessFlag PRIVATE;
  `short`[] `com.bumptech.glide.m.e.f` @AccessFlag PRIVATE;
  `byte`[] `com.bumptech.glide.m.e.g` @AccessFlag PRIVATE;
  `byte`[] `com.bumptech.glide.m.e.h` @AccessFlag PRIVATE;
  `byte`[] `com.bumptech.glide.m.e.i` @AccessFlag PRIVATE;
  `int`[] `com.bumptech.glide.m.e.j` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.m.e.k` @AccessFlag PRIVATE;
  `com.bumptech.glide.m.c` `com.bumptech.glide.m.e.l` @AccessFlag PRIVATE;
  `android.graphics.Bitmap` `com.bumptech.glide.m.e.m` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.m.e.n` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.m.e.o` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.m.e.p` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.m.e.q` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.m.e.r` @AccessFlag PRIVATE;
  `java.lang.Boolean` `com.bumptech.glide.m.e.s` @AccessFlag PRIVATE;
  `android.graphics.Bitmap$Config` `com.bumptech.glide.m.e.t` @AccessFlag PRIVATE;
}
global `java.lang.String` `@@com.bumptech.glide.m.e.u` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.bumptech.glide.m.e` v1 @kind this, `com.bumptech.glide.m.a$a` v2 @kind object) @signature `Lcom/bumptech/glide/m/e;.<init>:(Lcom/bumptech/glide/m/a$a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L28d610.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28d616.  v0:= 256I;
  #L28d61a.  v0:= new `int`[v0];
  #L28d61e.  v1.`com.bumptech.glide.m.e.b` @type ^`int`[] := v0 @kind object;
  #L28d622.  v0:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L28d626.  v1.`com.bumptech.glide.m.e.t` @type ^`android.graphics.Bitmap$Config` := v0 @kind object;
  #L28d62a.  v1.`com.bumptech.glide.m.e.c` @type ^`com.bumptech.glide.m.a$a` := v2 @kind object;
  #L28d62e.  v2:= new `com.bumptech.glide.m.c`;
  #L28d632.  call `<init>`(v2) @signature `Lcom/bumptech/glide/m/c;.<init>:()V` @kind direct;
  #L28d638.  v1.`com.bumptech.glide.m.e.l` @type ^`com.bumptech.glide.m.c` := v2 @kind object;
  #L28d63c.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.m.e` v0 @kind this, `com.bumptech.glide.m.a$a` v1 @kind object, `com.bumptech.glide.m.c` v2 @kind object, `java.nio.ByteBuffer` v3 @kind object, `int` v4 ) @signature `Lcom/bumptech/glide/m/e;.<init>:(Lcom/bumptech/glide/m/a$a;Lcom/bumptech/glide/m/c;Ljava/nio/ByteBuffer;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L28d650.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/m/e;.<init>:(Lcom/bumptech/glide/m/a$a;)V` @kind direct;
  #L28d656.  call `setData`(v0, v2, v3, v4) @signature `Lcom/bumptech/glide/m/e;.setData:(Lcom/bumptech/glide/m/c;Ljava/nio/ByteBuffer;I)V` @kind virtual;
  #L28d65c.  return @kind void;
}
procedure `int` `a`(`com.bumptech.glide.m.e` v9 @kind this, `int` v10 , `int` v11 , `int` v12 ) @signature `Lcom/bumptech/glide/m/e;.a:(III)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L28d3c4.  v0:= 0I;
  #L28d3c6.  v1:= v10;
  #L28d3c8.  v2:= 0I;
  #L28d3ca.  v3:= 0I;
  #L28d3cc.  v4:= 0I;
  #L28d3ce.  v5:= 0I;
  #L28d3d0.  v6:= 0I;
  #L28d3d2.  v7:= v9.`com.bumptech.glide.m.e.p` @type ^`int`;
  #L28d3d6.  v7:= v7 + v10 @kind int;
  #L28d3d8.  if v1 >= v7 then goto L28d42c;
  #L28d3dc.  v7:= v9.`com.bumptech.glide.m.e.i` @type ^`byte`[] @kind object;
  #L28d3e0.  v8:= length @variable v7;
  #L28d3e2.  if v1 >= v8 then goto L28d42c;
  #L28d3e6.  if v1 >= v11 then goto L28d42c;
  #L28d3ea.  v7:= v7[v1] @kind byte;
  #L28d3ee.  v7:= v7 ^& 255;
  #L28d3f2.  v8:= v9.`com.bumptech.glide.m.e.a` @type ^`int`[] @kind object;
  #L28d3f6.  v7:= v8[v7];
  #L28d3fa.  if v7 == 0 then goto L28d426;
  #L28d3fe.  v8:= v7 ^> 24;
  #L28d402.  v8:= v8 ^& 255;
  #L28d406.  v2:= v2 + v8 @kind int;
  #L28d408.  v8:= v7 ^> 16;
  #L28d40c.  v8:= v8 ^& 255;
  #L28d410.  v3:= v3 + v8 @kind int;
  #L28d412.  v8:= v7 ^> 8;
  #L28d416.  v8:= v8 ^& 255;
  #L28d41a.  v4:= v4 + v8 @kind int;
  #L28d41c.  v7:= v7 ^& 255;
  #L28d420.  v5:= v5 + v7 @kind int;
  #L28d422.  v6:= v6 + 1;
  #L28d426.  v1:= v1 + 1;
  #L28d42a.  goto L28d3d2;
  #L28d42c.  v10:= v10 + v12 @kind int;
  #L28d42e.  v12:= v10;
  #L28d430.  v1:= v9.`com.bumptech.glide.m.e.p` @type ^`int`;
  #L28d434.  v1:= v1 + v10 @kind int;
  #L28d436.  if v12 >= v1 then goto L28d48a;
  #L28d43a.  v1:= v9.`com.bumptech.glide.m.e.i` @type ^`byte`[] @kind object;
  #L28d43e.  v7:= length @variable v1;
  #L28d440.  if v12 >= v7 then goto L28d48a;
  #L28d444.  if v12 >= v11 then goto L28d48a;
  #L28d448.  v1:= v1[v12] @kind byte;
  #L28d44c.  v1:= v1 ^& 255;
  #L28d450.  v7:= v9.`com.bumptech.glide.m.e.a` @type ^`int`[] @kind object;
  #L28d454.  v1:= v7[v1];
  #L28d458.  if v1 == 0 then goto L28d484;
  #L28d45c.  v7:= v1 ^> 24;
  #L28d460.  v7:= v7 ^& 255;
  #L28d464.  v2:= v2 + v7 @kind int;
  #L28d466.  v7:= v1 ^> 16;
  #L28d46a.  v7:= v7 ^& 255;
  #L28d46e.  v3:= v3 + v7 @kind int;
  #L28d470.  v7:= v1 ^> 8;
  #L28d474.  v7:= v7 ^& 255;
  #L28d478.  v4:= v4 + v7 @kind int;
  #L28d47a.  v1:= v1 ^& 255;
  #L28d47e.  v5:= v5 + v1 @kind int;
  #L28d480.  v6:= v6 + 1;
  #L28d484.  v12:= v12 + 1;
  #L28d488.  goto L28d430;
  #L28d48a.  if v6 != 0 then goto L28d490;
  #L28d48e.  return v0;
  #L28d490.  v2:= v2 / v6 @kind int;
  #L28d492.  v10:= v2 ^< 24;
  #L28d496.  v3:= v3 / v6 @kind int;
  #L28d498.  v11:= v3 ^< 16;
  #L28d49c.  v10:= v10 ^| v11 @kind int;
  #L28d49e.  v4:= v4 / v6 @kind int;
  #L28d4a0.  v11:= v4 ^< 8;
  #L28d4a4.  v10:= v10 ^| v11 @kind int;
  #L28d4a6.  v5:= v5 / v6 @kind int;
  #L28d4a8.  v10:= v10 ^| v5 @kind int;
  #L28d4aa.  return v10;
}
procedure `android.graphics.Bitmap` `a`(`com.bumptech.glide.m.e` v4 @kind this) @signature `Lcom/bumptech/glide/m/e;.a:()Landroid/graphics/Bitmap;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L28cfc0.  v0:= v4.`com.bumptech.glide.m.e.s` @type ^`java.lang.Boolean` @kind object;
  #L28cfc4.  if v0 == 0 then goto L28cfdc;
  #L28cfc8.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L28cfce.  v0:= temp;
  #L28cfd0.  if v0 == 0 then goto L28cfd6;
  #L28cfd4.  goto L28cfdc;
  #L28cfd6.  v0:= v4.`com.bumptech.glide.m.e.t` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L28cfda.  goto L28cfe0;
  #L28cfdc.  v0:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L28cfe0.  v1:= v4.`com.bumptech.glide.m.e.c` @type ^`com.bumptech.glide.m.a$a` @kind object;
  #L28cfe4.  v2:= v4.`com.bumptech.glide.m.e.r` @type ^`int`;
  #L28cfe8.  v3:= v4.`com.bumptech.glide.m.e.q` @type ^`int`;
  #L28cfec.  call temp:= `obtain`(v1, v2, v3, v0) @signature `Lcom/bumptech/glide/m/a$a;.obtain:(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;` @kind interface;
  #L28cff2.  v0:= temp @kind object;
  #L28cff4.  v1:= 1I;
  #L28cff6.  call `setHasAlpha`(v0, v1) @signature `Landroid/graphics/Bitmap;.setHasAlpha:(Z)V` @kind virtual;
  #L28cffc.  return v0 @kind object;
}
procedure `android.graphics.Bitmap` `a`(`com.bumptech.glide.m.e` v9 @kind this, `com.bumptech.glide.m.b` v10 @kind object, `com.bumptech.glide.m.b` v11 @kind object) @signature `Lcom/bumptech/glide/m/e;.a:(Lcom/bumptech/glide/m/b;Lcom/bumptech/glide/m/b;)Landroid/graphics/Bitmap;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L28d234.  v8:= v9.`com.bumptech.glide.m.e.j` @type ^`int`[] @kind object;
  #L28d238.  v0:= 0I;
  #L28d23a.  if v11 != 0 then goto L28d25c;
  #L28d23e.  v1:= v9.`com.bumptech.glide.m.e.m` @type ^`android.graphics.Bitmap` @kind object;
  #L28d242.  if v1 == 0 then goto L28d250;
  #L28d246.  v2:= v9.`com.bumptech.glide.m.e.c` @type ^`com.bumptech.glide.m.a$a` @kind object;
  #L28d24a.  call `release`(v2, v1) @signature `Lcom/bumptech/glide/m/a$a;.release:(Landroid/graphics/Bitmap;)V` @kind interface;
  #L28d250.  v1:= 0I;
  #L28d252.  v9.`com.bumptech.glide.m.e.m` @type ^`android.graphics.Bitmap` := v1 @kind object;
  #L28d256.  call `fill`(v8, v0) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L28d25c.  v1:= 3I;
  #L28d25e.  if v11 == 0 then goto L28d278;
  #L28d262.  v2:= v11.`com.bumptech.glide.m.b.g` @type ^`int`;
  #L28d266.  if v2 != v1 then goto L28d278;
  #L28d26a.  v2:= v9.`com.bumptech.glide.m.e.m` @type ^`android.graphics.Bitmap` @kind object;
  #L28d26e.  if v2 != 0 then goto L28d278;
  #L28d272.  call `fill`(v8, v0) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L28d278.  if v11 == 0 then goto L28d322;
  #L28d27c.  v2:= v11.`com.bumptech.glide.m.b.g` @type ^`int`;
  #L28d280.  if v2 <= 0 then goto L28d322;
  #L28d284.  v3:= 2I;
  #L28d286.  if v2 != v3 then goto L28d2fe;
  #L28d28a.  v1:= v10.`com.bumptech.glide.m.b.f` @type ^`boolean` @kind boolean;
  #L28d28e.  if v1 != 0 then goto L28d2b2;
  #L28d292.  v1:= v9.`com.bumptech.glide.m.e.l` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28d296.  v2:= v1.`com.bumptech.glide.m.c.l` @type ^`int`;
  #L28d29a.  v3:= v10.`com.bumptech.glide.m.b.k` @type ^`int`[] @kind object;
  #L28d29e.  if v3 == 0 then goto L28d2b0;
  #L28d2a2.  v1:= v1.`com.bumptech.glide.m.c.j` @type ^`int`;
  #L28d2a6.  v3:= v10.`com.bumptech.glide.m.b.h` @type ^`int`;
  #L28d2aa.  if v1 != v3 then goto L28d2b0;
  #L28d2ae.  goto L28d2b2;
  #L28d2b0.  v0:= v2;
  #L28d2b2.  v1:= v11.`com.bumptech.glide.m.b.d` @type ^`int`;
  #L28d2b6.  v2:= v9.`com.bumptech.glide.m.e.p` @type ^`int`;
  #L28d2ba.  v1:= v1 / v2 @kind int;
  #L28d2bc.  v3:= v11.`com.bumptech.glide.m.b.b` @type ^`int`;
  #L28d2c0.  v3:= v3 / v2 @kind int;
  #L28d2c2.  v4:= v11.`com.bumptech.glide.m.b.c` @type ^`int`;
  #L28d2c6.  v4:= v4 / v2 @kind int;
  #L28d2c8.  v11:= v11.`com.bumptech.glide.m.b.a` @type ^`int`;
  #L28d2cc.  v11:= v11 / v2 @kind int;
  #L28d2ce.  v2:= v9.`com.bumptech.glide.m.e.r` @type ^`int`;
  #L28d2d2.  v3:= v3 * v2 @kind int;
  #L28d2d6.  v3:= v3 + v11 @kind int;
  #L28d2d8.  v1:= v1 * v2 @kind int;
  #L28d2dc.  v1:= v1 + v3 @kind int;
  #L28d2de.  if v3 >= v1 then goto L28d322;
  #L28d2e2.  v11:= v3 + v4 @kind int;
  #L28d2e6.  v2:= v3;
  #L28d2e8.  if v2 >= v11 then goto L28d2f6;
  #L28d2ec.  v8[v2]:= v0;
  #L28d2f0.  v2:= v2 + 1;
  #L28d2f4.  goto L28d2e8;
  #L28d2f6.  v11:= v9.`com.bumptech.glide.m.e.r` @type ^`int`;
  #L28d2fa.  v3:= v3 + v11 @kind int;
  #L28d2fc.  goto L28d2de;
  #L28d2fe.  if v2 != v1 then goto L28d322;
  #L28d302.  v0:= v9.`com.bumptech.glide.m.e.m` @type ^`android.graphics.Bitmap` @kind object;
  #L28d306.  if v0 == 0 then goto L28d322;
  #L28d30a.  v2:= 0I;
  #L28d30c.  v6:= v9.`com.bumptech.glide.m.e.r` @type ^`int`;
  #L28d310.  v4:= 0I;
  #L28d312.  v5:= 0I;
  #L28d314.  v7:= v9.`com.bumptech.glide.m.e.q` @type ^`int`;
  #L28d318.  v1:= v8 @kind object;
  #L28d31a.  v3:= v6;
  #L28d31c.  call `getPixels`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Landroid/graphics/Bitmap;.getPixels:([IIIIIII)V` @kind virtual;
  #L28d322.  call `c`(v9, v10) @signature `Lcom/bumptech/glide/m/e;.c:(Lcom/bumptech/glide/m/b;)V` @kind direct;
  #L28d328.  v11:= v10.`com.bumptech.glide.m.b.e` @type ^`boolean` @kind boolean;
  #L28d32c.  v0:= 1I;
  #L28d32e.  if v11 != 0 then goto L28d344;
  #L28d332.  v11:= v9.`com.bumptech.glide.m.e.p` @type ^`int`;
  #L28d336.  if v11 == v0 then goto L28d33c;
  #L28d33a.  goto L28d344;
  #L28d33c.  call `b`(v9, v10) @signature `Lcom/bumptech/glide/m/e;.b:(Lcom/bumptech/glide/m/b;)V` @kind direct;
  #L28d342.  goto L28d34a;
  #L28d344.  call `a`(v9, v10) @signature `Lcom/bumptech/glide/m/e;.a:(Lcom/bumptech/glide/m/b;)V` @kind direct;
  #L28d34a.  v11:= v9.`com.bumptech.glide.m.e.n` @type ^`boolean` @kind boolean;
  #L28d34e.  if v11 == 0 then goto L28d38e;
  #L28d352.  v10:= v10.`com.bumptech.glide.m.b.g` @type ^`int`;
  #L28d356.  if v10 == 0 then goto L28d35e;
  #L28d35a.  if v10 != v0 then goto L28d38e;
  #L28d35e.  v10:= v9.`com.bumptech.glide.m.e.m` @type ^`android.graphics.Bitmap` @kind object;
  #L28d362.  if v10 != 0 then goto L28d372;
  #L28d366.  call temp:= `a`(v9) @signature `Lcom/bumptech/glide/m/e;.a:()Landroid/graphics/Bitmap;` @kind direct;
  #L28d36c.  v10:= temp @kind object;
  #L28d36e.  v9.`com.bumptech.glide.m.e.m` @type ^`android.graphics.Bitmap` := v10 @kind object;
  #L28d372.  v0:= v9.`com.bumptech.glide.m.e.m` @type ^`android.graphics.Bitmap` @kind object;
  #L28d376.  v2:= 0I;
  #L28d378.  v6:= v9.`com.bumptech.glide.m.e.r` @type ^`int`;
  #L28d37c.  v4:= 0I;
  #L28d37e.  v5:= 0I;
  #L28d380.  v7:= v9.`com.bumptech.glide.m.e.q` @type ^`int`;
  #L28d384.  v1:= v8 @kind object;
  #L28d386.  v3:= v6;
  #L28d388.  call `setPixels`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Landroid/graphics/Bitmap;.setPixels:([IIIIIII)V` @kind virtual;
  #L28d38e.  call temp:= `a`(v9) @signature `Lcom/bumptech/glide/m/e;.a:()Landroid/graphics/Bitmap;` @kind direct;
  #L28d394.  v10:= temp @kind object;
  #L28d396.  v2:= 0I;
  #L28d398.  v6:= v9.`com.bumptech.glide.m.e.r` @type ^`int`;
  #L28d39c.  v4:= 0I;
  #L28d39e.  v5:= 0I;
  #L28d3a0.  v7:= v9.`com.bumptech.glide.m.e.q` @type ^`int`;
  #L28d3a4.  v0:= v10 @kind object;
  #L28d3a6.  v1:= v8 @kind object;
  #L28d3a8.  v3:= v6;
  #L28d3aa.  call `setPixels`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Landroid/graphics/Bitmap;.setPixels:([IIIIIII)V` @kind virtual;
  #L28d3b0.  return v10 @kind object;
}
procedure `void` `a`(`com.bumptech.glide.m.e` v25 @kind this, `com.bumptech.glide.m.b` v26 @kind object) @signature `Lcom/bumptech/glide/m/e;.a:(Lcom/bumptech/glide/m/b;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;
    v24;

  #L28d704.  v0:= v25 @kind object;
  #L28d708.  v1:= v26 @kind object;
  #L28d70c.  v2:= v0.`com.bumptech.glide.m.e.j` @type ^`int`[] @kind object;
  #L28d710.  v3:= v1.`com.bumptech.glide.m.b.d` @type ^`int`;
  #L28d714.  v4:= v0.`com.bumptech.glide.m.e.p` @type ^`int`;
  #L28d718.  v3:= v3 / v4 @kind int;
  #L28d71a.  v5:= v1.`com.bumptech.glide.m.b.b` @type ^`int`;
  #L28d71e.  v5:= v5 / v4 @kind int;
  #L28d720.  v6:= v1.`com.bumptech.glide.m.b.c` @type ^`int`;
  #L28d724.  v6:= v6 / v4 @kind int;
  #L28d726.  v7:= v1.`com.bumptech.glide.m.b.a` @type ^`int`;
  #L28d72a.  v7:= v7 / v4 @kind int;
  #L28d72c.  v4:= v0.`com.bumptech.glide.m.e.k` @type ^`int`;
  #L28d730.  v9:= 1I;
  #L28d732.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L28d738.  v10:= temp @kind object;
  #L28d73a.  if v4 != 0 then goto L28d742;
  #L28d73e.  v4:= 1I;
  #L28d740.  goto L28d744;
  #L28d742.  v4:= 0I;
  #L28d744.  v11:= v0.`com.bumptech.glide.m.e.p` @type ^`int`;
  #L28d748.  v12:= v0.`com.bumptech.glide.m.e.r` @type ^`int`;
  #L28d74c.  v13:= v0.`com.bumptech.glide.m.e.q` @type ^`int`;
  #L28d750.  v14:= v0.`com.bumptech.glide.m.e.i` @type ^`byte`[] @kind object;
  #L28d754.  v15:= v0.`com.bumptech.glide.m.e.a` @type ^`int`[] @kind object;
  #L28d758.  v8:= v0.`com.bumptech.glide.m.e.s` @type ^`java.lang.Boolean` @kind object;
  #L28d75c.  v17:= 8I;
  #L28d760.  v17:= v8 @kind object;
  #L28d764.  v8:= 0I;
  #L28d766.  v9:= 0I;
  #L28d768.  v19:= 1I;
  #L28d76c.  v20:= 8I;
  #L28d770.  if v8 >= v3 then goto L28d8b4;
  #L28d774.  v21:= v10 @kind object;
  #L28d778.  v10:= v1.`com.bumptech.glide.m.b.e` @type ^`boolean` @kind boolean;
  #L28d77c.  if v10 == 0 then goto L28d7ca;
  #L28d780.  v10:= 2I;
  #L28d782.  if v9 < v3 then goto L28d7b8;
  #L28d786.  v23:= v3;
  #L28d78a.  v3:= v19 + 1;
  #L28d78e.  if v3 == v10 then goto L28d7b2;
  #L28d792.  v10:= 3I;
  #L28d794.  if v3 == v10 then goto L28d7a8;
  #L28d798.  v10:= 4I;
  #L28d79a.  if v3 == v10 then goto L28d7a0;
  #L28d79e.  goto L28d7c0;
  #L28d7a0.  v9:= 1I;
  #L28d7a2.  v20:= 2I;
  #L28d7a6.  goto L28d7c0;
  #L28d7a8.  v10:= 4I;
  #L28d7aa.  v9:= 2I;
  #L28d7ac.  v20:= 4I;
  #L28d7b0.  goto L28d7c0;
  #L28d7b2.  v10:= 4I;
  #L28d7b4.  v9:= 4I;
  #L28d7b6.  goto L28d7c0;
  #L28d7b8.  v23:= v3;
  #L28d7bc.  v3:= v19;
  #L28d7c0.  v10:= v9 + v20 @kind int;
  #L28d7c4.  v19:= v3;
  #L28d7c8.  goto L28d7d2;
  #L28d7ca.  v23:= v3;
  #L28d7ce.  v10:= v9;
  #L28d7d0.  v9:= v8;
  #L28d7d2.  v9:= v9 + v5 @kind int;
  #L28d7d4.  v3:= 1I;
  #L28d7d6.  if v11 != v3 then goto L28d7e0;
  #L28d7da.  v18:= 1I;
  #L28d7de.  goto L28d7e4;
  #L28d7e0.  v18:= 0I;
  #L28d7e4.  if v9 >= v13 then goto L28d892;
  #L28d7e8.  v9:= v9 * v12 @kind int;
  #L28d7ec.  v22:= v9 + v7 @kind int;
  #L28d7f0.  v3:= v22 + v6 @kind int;
  #L28d7f4.  v9:= v9 + v12 @kind int;
  #L28d7f6.  if v9 >= v3 then goto L28d7fc;
  #L28d7fa.  v3:= v9;
  #L28d7fc.  v9:= v8 * v11 @kind int;
  #L28d800.  v24:= v5;
  #L28d804.  v5:= v1.`com.bumptech.glide.m.b.c` @type ^`int`;
  #L28d808.  v9:= v9 * v5 @kind int;
  #L28d80c.  if v18 == 0 then goto L28d84a;
  #L28d810.  v5:= v22;
  #L28d814.  if v5 >= v3 then goto L28d896;
  #L28d818.  v18:= v6;
  #L28d81c.  v6:= v14[v9] @kind byte;
  #L28d820.  v6:= v6 ^& 255;
  #L28d824.  v6:= v15[v6];
  #L28d828.  if v6 == 0 then goto L28d832;
  #L28d82c.  v2[v5]:= v6;
  #L28d830.  goto L28d83e;
  #L28d832.  if v4 == 0 then goto L28d83e;
  #L28d836.  if v17 != 0 then goto L28d83e;
  #L28d83a.  v17:= v21 @kind object;
  #L28d83e.  v9:= v9 + v11 @kind int;
  #L28d840.  v5:= v5 + 1;
  #L28d844.  v6:= v18;
  #L28d848.  goto L28d814;
  #L28d84a.  v18:= v6;
  #L28d84e.  v5:= v3 - v22 @kind int;
  #L28d852.  v5:= v5 * v11 @kind int;
  #L28d856.  v5:= v5 + v9 @kind int;
  #L28d858.  v6:= v22;
  #L28d85c.  if v6 >= v3 then goto L28d89a;
  #L28d860.  v22:= v3;
  #L28d864.  v3:= v1.`com.bumptech.glide.m.b.c` @type ^`int`;
  #L28d868.  call temp:= `a`(v0, v9, v5, v3) @signature `Lcom/bumptech/glide/m/e;.a:(III)I` @kind direct;
  #L28d86e.  v3:= temp;
  #L28d870.  if v3 == 0 then goto L28d87a;
  #L28d874.  v2[v6]:= v3;
  #L28d878.  goto L28d886;
  #L28d87a.  if v4 == 0 then goto L28d886;
  #L28d87e.  if v17 != 0 then goto L28d886;
  #L28d882.  v17:= v21 @kind object;
  #L28d886.  v9:= v9 + v11 @kind int;
  #L28d888.  v6:= v6 + 1;
  #L28d88c.  v3:= v22;
  #L28d890.  goto L28d85c;
  #L28d892.  v24:= v5;
  #L28d896.  v18:= v6;
  #L28d89a.  v8:= v8 + 1;
  #L28d89e.  v9:= v10;
  #L28d8a0.  v6:= v18;
  #L28d8a4.  v10:= v21 @kind object;
  #L28d8a8.  v3:= v23;
  #L28d8ac.  v5:= v24;
  #L28d8b0.  goto L28d770;
  #L28d8b4.  v1:= v0.`com.bumptech.glide.m.e.s` @type ^`java.lang.Boolean` @kind object;
  #L28d8b8.  if v1 != 0 then goto L28d8de;
  #L28d8bc.  if v17 != 0 then goto L28d8c6;
  #L28d8c0.  v16:= 0I;
  #L28d8c4.  goto L28d8d2;
  #L28d8c6.  call temp:= `booleanValue`(v17) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L28d8cc.  v8:= temp;
  #L28d8ce.  v16:= v8;
  #L28d8d2.  call temp:= `valueOf`(v16) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L28d8d8.  v1:= temp @kind object;
  #L28d8da.  v0.`com.bumptech.glide.m.e.s` @type ^`java.lang.Boolean` := v1 @kind object;
  #L28d8de.  return @kind void;
}
procedure `int` `b`(`com.bumptech.glide.m.e` v5 @kind this) @signature `Lcom/bumptech/glide/m/e;.b:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28d594.  call temp:= `c`(v5) @signature `Lcom/bumptech/glide/m/e;.c:()I` @kind direct;
  #L28d59a.  v0:= temp;
  #L28d59c.  if v0 > 0 then goto L28d5a2;
  #L28d5a0.  return v0;
  #L28d5a2.  v1:= v5.`com.bumptech.glide.m.e.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L28d5a6.  v2:= v5.`com.bumptech.glide.m.e.e` @type ^`byte`[] @kind object;
  #L28d5aa.  v3:= 0I;
  #L28d5ac.  call temp:= `remaining`(v1) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L28d5b2.  v4:= temp;
  #L28d5b4.  call temp:= `min`(v0, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L28d5ba.  v4:= temp;
  #L28d5bc.  call temp:= `get`(v1, v2, v3, v4) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L28d5c2.  return v0;
}
procedure `void` `b`(`com.bumptech.glide.m.e` v19 @kind this, `com.bumptech.glide.m.b` v20 @kind object) @signature `Lcom/bumptech/glide/m/e;.b:(Lcom/bumptech/glide/m/b;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L28d8f0.  v0:= v19 @kind object;
  #L28d8f4.  v1:= v20 @kind object;
  #L28d8f8.  v2:= v0.`com.bumptech.glide.m.e.j` @type ^`int`[] @kind object;
  #L28d8fc.  v3:= v1.`com.bumptech.glide.m.b.d` @type ^`int`;
  #L28d900.  v4:= v1.`com.bumptech.glide.m.b.b` @type ^`int`;
  #L28d904.  v5:= v1.`com.bumptech.glide.m.b.c` @type ^`int`;
  #L28d908.  v6:= v1.`com.bumptech.glide.m.b.a` @type ^`int`;
  #L28d90c.  v7:= v0.`com.bumptech.glide.m.e.k` @type ^`int`;
  #L28d910.  if v7 != 0 then goto L28d918;
  #L28d914.  v7:= 1I;
  #L28d916.  goto L28d91a;
  #L28d918.  v7:= 0I;
  #L28d91a.  v10:= v0.`com.bumptech.glide.m.e.r` @type ^`int`;
  #L28d91e.  v11:= v0.`com.bumptech.glide.m.e.i` @type ^`byte`[] @kind object;
  #L28d922.  v12:= v0.`com.bumptech.glide.m.e.a` @type ^`int`[] @kind object;
  #L28d926.  v14:= 0I;
  #L28d928.  v15:= -1I;
  #L28d92a.  if v14 >= v3 then goto L28d990;
  #L28d92e.  v16:= v14 + v4 @kind int;
  #L28d932.  v16:= v16 * v10 @kind int;
  #L28d936.  v17:= v16 + v6 @kind int;
  #L28d93a.  v8:= v17 + v5 @kind int;
  #L28d93e.  v9:= v16 + v10 @kind int;
  #L28d942.  if v9 >= v8 then goto L28d948;
  #L28d946.  v8:= v9;
  #L28d948.  v9:= v1.`com.bumptech.glide.m.b.c` @type ^`int`;
  #L28d94c.  v9:= v9 * v14 @kind int;
  #L28d950.  v16:= v9;
  #L28d954.  v9:= v17;
  #L28d958.  if v9 >= v8 then goto L28d986;
  #L28d95c.  v13:= v11[v16] @kind byte;
  #L28d960.  v1:= v13 ^& 255;
  #L28d964.  if v1 == v15 then goto L28d978;
  #L28d968.  v1:= v12[v1];
  #L28d96c.  if v1 == 0 then goto L28d976;
  #L28d970.  v2[v9]:= v1;
  #L28d974.  goto L28d978;
  #L28d976.  v15:= v13;
  #L28d978.  v16:= v16 + 1;
  #L28d97c.  v9:= v9 + 1;
  #L28d980.  v1:= v20 @kind object;
  #L28d984.  goto L28d958;
  #L28d986.  v14:= v14 + 1;
  #L28d98a.  v1:= v20 @kind object;
  #L28d98e.  goto L28d92a;
  #L28d990.  v1:= v0.`com.bumptech.glide.m.e.s` @type ^`java.lang.Boolean` @kind object;
  #L28d994.  if v1 == 0 then goto L28d9a4;
  #L28d998.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L28d99e.  v1:= temp;
  #L28d9a0.  if v1 != 0 then goto L28d9b6;
  #L28d9a4.  v1:= v0.`com.bumptech.glide.m.e.s` @type ^`java.lang.Boolean` @kind object;
  #L28d9a8.  if v1 != 0 then goto L28d9bc;
  #L28d9ac.  if v7 == 0 then goto L28d9bc;
  #L28d9b0.  v1:= -1I;
  #L28d9b2.  if v15 == v1 then goto L28d9bc;
  #L28d9b6.  v18:= 1I;
  #L28d9ba.  goto L28d9c0;
  #L28d9bc.  v18:= 0I;
  #L28d9c0.  call temp:= `valueOf`(v18) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L28d9c6.  v1:= temp @kind object;
  #L28d9c8.  v0.`com.bumptech.glide.m.e.s` @type ^`java.lang.Boolean` := v1 @kind object;
  #L28d9cc.  return @kind void;
}
procedure `int` `c`(`com.bumptech.glide.m.e` v1 @kind this) @signature `Lcom/bumptech/glide/m/e;.c:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L28d5d4.  v0:= v1.`com.bumptech.glide.m.e.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L28d5d8.  call temp:= `get`(v0) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L28d5de.  v0:= temp;
  #L28d5e0.  v0:= v0 ^& 255;
  #L28d5e4.  return v0;
}
procedure `void` `c`(`com.bumptech.glide.m.e` v29 @kind this, `com.bumptech.glide.m.b` v30 @kind object) @signature `Lcom/bumptech/glide/m/e;.c:(Lcom/bumptech/glide/m/b;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;
    v24;
    v25;
    v26;
    v27;
    v28;

  #L28d9e0.  v0:= v29 @kind object;
  #L28d9e4.  v1:= v30 @kind object;
  #L28d9e8.  if v1 == 0 then goto L28d9fa;
  #L28d9ec.  v2:= v0.`com.bumptech.glide.m.e.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L28d9f0.  v3:= v1.`com.bumptech.glide.m.b.j` @type ^`int`;
  #L28d9f4.  call temp:= `position`(v2, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L28d9fa.  if v1 != 0 then goto L28da0c;
  #L28d9fe.  v1:= v0.`com.bumptech.glide.m.e.l` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28da02.  v2:= v1.`com.bumptech.glide.m.c.f` @type ^`int`;
  #L28da06.  v1:= v1.`com.bumptech.glide.m.c.g` @type ^`int`;
  #L28da0a.  goto L28da14;
  #L28da0c.  v2:= v1.`com.bumptech.glide.m.b.c` @type ^`int`;
  #L28da10.  v1:= v1.`com.bumptech.glide.m.b.d` @type ^`int`;
  #L28da14.  v2:= v2 * v1 @kind int;
  #L28da18.  v1:= v0.`com.bumptech.glide.m.e.i` @type ^`byte`[] @kind object;
  #L28da1c.  if v1 == 0 then goto L28da26;
  #L28da20.  v1:= length @variable v1;
  #L28da22.  if v1 >= v2 then goto L28da36;
  #L28da26.  v1:= v0.`com.bumptech.glide.m.e.c` @type ^`com.bumptech.glide.m.a$a` @kind object;
  #L28da2a.  call temp:= `obtainByteArray`(v1, v2) @signature `Lcom/bumptech/glide/m/a$a;.obtainByteArray:(I)[B` @kind interface;
  #L28da30.  v1:= temp @kind object;
  #L28da32.  v0.`com.bumptech.glide.m.e.i` @type ^`byte`[] := v1 @kind object;
  #L28da36.  v1:= v0.`com.bumptech.glide.m.e.i` @type ^`byte`[] @kind object;
  #L28da3a.  v3:= v0.`com.bumptech.glide.m.e.f` @type ^`short`[] @kind object;
  #L28da3e.  v4:= 4096I;
  #L28da42.  if v3 != 0 then goto L28da4e;
  #L28da46.  v3:= new `short`[v4];
  #L28da4a.  v0.`com.bumptech.glide.m.e.f` @type ^`short`[] := v3 @kind object;
  #L28da4e.  v3:= v0.`com.bumptech.glide.m.e.f` @type ^`short`[] @kind object;
  #L28da52.  v5:= v0.`com.bumptech.glide.m.e.g` @type ^`byte`[] @kind object;
  #L28da56.  if v5 != 0 then goto L28da62;
  #L28da5a.  v5:= new `byte`[v4];
  #L28da5e.  v0.`com.bumptech.glide.m.e.g` @type ^`byte`[] := v5 @kind object;
  #L28da62.  v5:= v0.`com.bumptech.glide.m.e.g` @type ^`byte`[] @kind object;
  #L28da66.  v6:= v0.`com.bumptech.glide.m.e.h` @type ^`byte`[] @kind object;
  #L28da6a.  if v6 != 0 then goto L28da7a;
  #L28da6e.  v6:= 4097I;
  #L28da72.  v6:= new `byte`[v6];
  #L28da76.  v0.`com.bumptech.glide.m.e.h` @type ^`byte`[] := v6 @kind object;
  #L28da7a.  v6:= v0.`com.bumptech.glide.m.e.h` @type ^`byte`[] @kind object;
  #L28da7e.  call temp:= `c`(v29) @signature `Lcom/bumptech/glide/m/e;.c:()I` @kind direct;
  #L28da84.  v7:= temp;
  #L28da86.  v8:= 1I;
  #L28da88.  v9:= v8 ^< v7 @kind int;
  #L28da8c.  v10:= v9 + 1;
  #L28da90.  v11:= v9 + 2;
  #L28da94.  v7:= v7 + v8 @kind int;
  #L28da96.  v12:= v8 ^< v7 @kind int;
  #L28da9a.  v12:= v12 - v8 @kind int;
  #L28da9c.  v13:= 0I;
  #L28da9e.  v14:= 0I;
  #L28daa0.  if v14 >= v9 then goto L28dab4;
  #L28daa4.  v3[v14]:= v13 @kind short;
  #L28daa8.  v15:= (`byte`) v14 @kind i2b;
  #L28daaa.  v5[v14]:= v15 @kind byte;
  #L28daae.  v14:= v14 + 1;
  #L28dab2.  goto L28daa0;
  #L28dab4.  v14:= v0.`com.bumptech.glide.m.e.e` @type ^`byte`[] @kind object;
  #L28dab8.  v15:= -1I;
  #L28daba.  v26:= v7;
  #L28dabe.  v24:= v11;
  #L28dac2.  v25:= v12;
  #L28dac6.  v16:= 0I;
  #L28daca.  v17:= 0I;
  #L28dace.  v18:= 0I;
  #L28dad2.  v19:= 0I;
  #L28dad6.  v20:= 0I;
  #L28dada.  v21:= -1I;
  #L28dade.  v22:= 0I;
  #L28dae2.  v23:= 0I;
  #L28dae6.  if v13 >= v2 then goto L28dc92;
  #L28daea.  if v16 != 0 then goto L28db08;
  #L28daee.  call temp:= `b`(v29) @signature `Lcom/bumptech/glide/m/e;.b:()I` @kind direct;
  #L28daf4.  v16:= temp;
  #L28daf6.  if v16 > 0 then goto L28db04;
  #L28dafa.  v3:= 3I;
  #L28dafc.  v0.`com.bumptech.glide.m.e.o` @type ^`int` := v3;
  #L28db00.  goto L28dc92;
  #L28db04.  v19:= 0I;
  #L28db08.  v4:= v14[v19] @kind byte;
  #L28db0c.  v4:= v4 ^& 255;
  #L28db10.  v4:= v4 ^< v17 @kind int;
  #L28db14.  v18:= v18 + v4 @kind int;
  #L28db18.  v17:= v17 + 8;
  #L28db1c.  v19:= v19 + 1;
  #L28db20.  v16:= v16 + -1;
  #L28db24.  v4:= v17;
  #L28db28.  v8:= v21;
  #L28db2c.  v28:= v22;
  #L28db30.  v27:= v24;
  #L28db34.  v21:= v20;
  #L28db38.  v20:= v13;
  #L28db3c.  v13:= v26;
  #L28db40.  if v4 < v13 then goto L28dc5a;
  #L28db44.  v15:= v18 ^& v25 @kind int;
  #L28db48.  v18:= v18 ^> v13 @kind int;
  #L28db4c.  v4:= v4 - v13 @kind int;
  #L28db4e.  if v15 != v9 then goto L28db62;
  #L28db52.  v13:= v7;
  #L28db54.  v27:= v11;
  #L28db58.  v25:= v12;
  #L28db5c.  v8:= -1I;
  #L28db5e.  v15:= -1I;
  #L28db60.  goto L28db40;
  #L28db62.  if v15 != v10 then goto L28db8c;
  #L28db66.  v17:= v4;
  #L28db6a.  v26:= v13;
  #L28db6e.  v13:= v20;
  #L28db72.  v20:= v21;
  #L28db76.  v24:= v27;
  #L28db7a.  v22:= v28;
  #L28db7e.  v4:= 4096I;
  #L28db82.  v15:= -1I;
  #L28db84.  v21:= v8;
  #L28db88.  v8:= 1I;
  #L28db8a.  goto L28dae6;
  #L28db8c.  v0:= -1I;
  #L28db8e.  if v8 != v0 then goto L28dbae;
  #L28db92.  v8:= v5[v15] @kind byte;
  #L28db96.  v1[v21]:= v8 @kind byte;
  #L28db9a.  v21:= v21 + 1;
  #L28db9e.  v20:= v20 + 1;
  #L28dba2.  v0:= v29 @kind object;
  #L28dba6.  v8:= v15;
  #L28dba8.  v28:= v8;
  #L28dbac.  goto L28db5e;
  #L28dbae.  v0:= v27;
  #L28dbb2.  v24:= v4;
  #L28dbb6.  if v15 < v0 then goto L28dbcc;
  #L28dbba.  v4:= v28;
  #L28dbbe.  v4:= (`byte`) v4 @kind i2b;
  #L28dbc0.  v6[v23]:= v4 @kind byte;
  #L28dbc4.  v23:= v23 + 1;
  #L28dbc8.  v4:= v8;
  #L28dbca.  goto L28dbce;
  #L28dbcc.  v4:= v15;
  #L28dbce.  if v4 < v9 then goto L28dbe4;
  #L28dbd2.  v26:= v5[v4] @kind byte;
  #L28dbd6.  v6[v23]:= v26 @kind byte;
  #L28dbda.  v23:= v23 + 1;
  #L28dbde.  v4:= v3[v4] @kind short;
  #L28dbe2.  goto L28dbce;
  #L28dbe4.  v4:= v5[v4] @kind byte;
  #L28dbe8.  v4:= v4 ^& 255;
  #L28dbec.  v26:= v7;
  #L28dbf0.  v7:= (`byte`) v4 @kind i2b;
  #L28dbf2.  v1[v21]:= v7 @kind byte;
  #L28dbf6.  v21:= v21 + 1;
  #L28dbfa.  v20:= v20 + 1;
  #L28dbfe.  if v23 <= 0 then goto L28dc10;
  #L28dc02.  v23:= v23 + -1;
  #L28dc06.  v27:= v6[v23] @kind byte;
  #L28dc0a.  v1[v21]:= v27 @kind byte;
  #L28dc0e.  goto L28dbf6;
  #L28dc10.  v27:= v4;
  #L28dc14.  v4:= 4096I;
  #L28dc18.  if v0 >= v4 then goto L28dc3e;
  #L28dc1c.  v8:= (`short`) v8 @kind i2s;
  #L28dc1e.  v3[v0]:= v8 @kind short;
  #L28dc22.  v5[v0]:= v7 @kind byte;
  #L28dc26.  v0:= v0 + 1;
  #L28dc2a.  v7:= v0 ^& v25 @kind int;
  #L28dc2e.  if v7 != 0 then goto L28dc3e;
  #L28dc32.  if v0 >= v4 then goto L28dc3e;
  #L28dc36.  v13:= v13 + 1;
  #L28dc3a.  v25:= v25 + v0 @kind int;
  #L28dc3e.  v8:= v15;
  #L28dc40.  v4:= v24;
  #L28dc44.  v7:= v26;
  #L28dc48.  v28:= v27;
  #L28dc4c.  v15:= -1I;
  #L28dc4e.  v27:= v0;
  #L28dc52.  v0:= v29 @kind object;
  #L28dc56.  goto L28db40;
  #L28dc5a.  v24:= v4;
  #L28dc5e.  v0:= v27;
  #L28dc62.  v15:= v28;
  #L28dc66.  v26:= v13;
  #L28dc6a.  v22:= v15;
  #L28dc6e.  v13:= v20;
  #L28dc72.  v20:= v21;
  #L28dc76.  v17:= v24;
  #L28dc7a.  v4:= 4096I;
  #L28dc7e.  v15:= -1I;
  #L28dc80.  v24:= v0;
  #L28dc84.  v21:= v8;
  #L28dc88.  v8:= 1I;
  #L28dc8a.  v0:= v29 @kind object;
  #L28dc8e.  goto L28dae6;
  #L28dc92.  v13:= v20;
  #L28dc96.  v0:= 0I;
  #L28dc98.  call `fill`(v1, v13, v2, v0) @signature `Ljava/util/Arrays;.fill:([BIIB)V` @kind static;
  #L28dc9e.  return @kind void;
}
procedure `void` `advance`(`com.bumptech.glide.m.e` v2 @kind this) @signature `Lcom/bumptech/glide/m/e;.advance:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28d670.  v0:= v2.`com.bumptech.glide.m.e.k` @type ^`int`;
  #L28d674.  v0:= v0 + 1;
  #L28d678.  v1:= v2.`com.bumptech.glide.m.e.l` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28d67c.  v1:= v1.`com.bumptech.glide.m.c.c` @type ^`int`;
  #L28d680.  v0:= v0 %% v1 @kind int;
  #L28d682.  v2.`com.bumptech.glide.m.e.k` @type ^`int` := v0;
  #L28d686.  return @kind void;
}
procedure `void` `clear`(`com.bumptech.glide.m.e` v3 @kind this) @signature `Lcom/bumptech/glide/m/e;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28d698.  v0:= 0I;
  #L28d69a.  v3.`com.bumptech.glide.m.e.l` @type ^`com.bumptech.glide.m.c` := v0 @kind object;
  #L28d69e.  v1:= v3.`com.bumptech.glide.m.e.i` @type ^`byte`[] @kind object;
  #L28d6a2.  if v1 == 0 then goto L28d6b0;
  #L28d6a6.  v2:= v3.`com.bumptech.glide.m.e.c` @type ^`com.bumptech.glide.m.a$a` @kind object;
  #L28d6aa.  call `release`(v2, v1) @signature `Lcom/bumptech/glide/m/a$a;.release:([B)V` @kind interface;
  #L28d6b0.  v1:= v3.`com.bumptech.glide.m.e.j` @type ^`int`[] @kind object;
  #L28d6b4.  if v1 == 0 then goto L28d6c2;
  #L28d6b8.  v2:= v3.`com.bumptech.glide.m.e.c` @type ^`com.bumptech.glide.m.a$a` @kind object;
  #L28d6bc.  call `release`(v2, v1) @signature `Lcom/bumptech/glide/m/a$a;.release:([I)V` @kind interface;
  #L28d6c2.  v1:= v3.`com.bumptech.glide.m.e.m` @type ^`android.graphics.Bitmap` @kind object;
  #L28d6c6.  if v1 == 0 then goto L28d6d4;
  #L28d6ca.  v2:= v3.`com.bumptech.glide.m.e.c` @type ^`com.bumptech.glide.m.a$a` @kind object;
  #L28d6ce.  call `release`(v2, v1) @signature `Lcom/bumptech/glide/m/a$a;.release:(Landroid/graphics/Bitmap;)V` @kind interface;
  #L28d6d4.  v3.`com.bumptech.glide.m.e.m` @type ^`android.graphics.Bitmap` := v0 @kind object;
  #L28d6d8.  v3.`com.bumptech.glide.m.e.d` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L28d6dc.  v3.`com.bumptech.glide.m.e.s` @type ^`java.lang.Boolean` := v0 @kind object;
  #L28d6e0.  v0:= v3.`com.bumptech.glide.m.e.e` @type ^`byte`[] @kind object;
  #L28d6e4.  if v0 == 0 then goto L28d6f2;
  #L28d6e8.  v1:= v3.`com.bumptech.glide.m.e.c` @type ^`com.bumptech.glide.m.a$a` @kind object;
  #L28d6ec.  call `release`(v1, v0) @signature `Lcom/bumptech/glide/m/a$a;.release:([B)V` @kind interface;
  #L28d6f2.  return @kind void;
}
procedure `int` `getByteSize`(`com.bumptech.glide.m.e` v2 @kind this) @signature `Lcom/bumptech/glide/m/e;.getByteSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28d4bc.  v0:= v2.`com.bumptech.glide.m.e.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L28d4c0.  call temp:= `limit`(v0) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L28d4c6.  v0:= temp;
  #L28d4c8.  v1:= v2.`com.bumptech.glide.m.e.i` @type ^`byte`[] @kind object;
  #L28d4cc.  v1:= length @variable v1;
  #L28d4ce.  v0:= v0 + v1 @kind int;
  #L28d4d0.  v1:= v2.`com.bumptech.glide.m.e.j` @type ^`int`[] @kind object;
  #L28d4d4.  v1:= length @variable v1;
  #L28d4d6.  v1:= v1 * 4;
  #L28d4da.  v0:= v0 + v1 @kind int;
  #L28d4dc.  return v0;
}
procedure `int` `getCurrentFrameIndex`(`com.bumptech.glide.m.e` v1 @kind this) @signature `Lcom/bumptech/glide/m/e;.getCurrentFrameIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28d4f0.  v0:= v1.`com.bumptech.glide.m.e.k` @type ^`int`;
  #L28d4f4.  return v0;
}
procedure `java.nio.ByteBuffer` `getData`(`com.bumptech.glide.m.e` v1 @kind this) @signature `Lcom/bumptech/glide/m/e;.getData:()Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28d5f8.  v0:= v1.`com.bumptech.glide.m.e.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L28d5fc.  return v0 @kind object;
}
procedure `int` `getDelay`(`com.bumptech.glide.m.e` v2 @kind this, `int` v3 ) @signature `Lcom/bumptech/glide/m/e;.getDelay:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28d508.  if v3 < 0 then goto L28d52e;
  #L28d50c.  v0:= v2.`com.bumptech.glide.m.e.l` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28d510.  v1:= v0.`com.bumptech.glide.m.c.c` @type ^`int`;
  #L28d514.  if v3 >= v1 then goto L28d52e;
  #L28d518.  v0:= v0.`com.bumptech.glide.m.c.e` @type ^`java.util.List` @kind object;
  #L28d51c.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L28d522.  v3:= temp @kind object;
  #L28d524.  v3:= (`com.bumptech.glide.m.b`) v3 @kind object;
  #L28d528.  v3:= v3.`com.bumptech.glide.m.b.i` @type ^`int`;
  #L28d52c.  goto L28d530;
  #L28d52e.  v3:= -1I;
  #L28d530.  return v3;
}
procedure `int` `getFrameCount`(`com.bumptech.glide.m.e` v1 @kind this) @signature `Lcom/bumptech/glide/m/e;.getFrameCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28d544.  v0:= v1.`com.bumptech.glide.m.e.l` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28d548.  v0:= v0.`com.bumptech.glide.m.c.c` @type ^`int`;
  #L28d54c.  return v0;
}
procedure `int` `getNextDelay`(`com.bumptech.glide.m.e` v1 @kind this) @signature `Lcom/bumptech/glide/m/e;.getNextDelay:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28d560.  v0:= v1.`com.bumptech.glide.m.e.l` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28d564.  v0:= v0.`com.bumptech.glide.m.c.c` @type ^`int`;
  #L28d568.  if v0 <= 0 then goto L28d580;
  #L28d56c.  v0:= v1.`com.bumptech.glide.m.e.k` @type ^`int`;
  #L28d570.  if v0 >= 0 then goto L28d576;
  #L28d574.  goto L28d580;
  #L28d576.  call temp:= `getDelay`(v1, v0) @signature `Lcom/bumptech/glide/m/e;.getDelay:(I)I` @kind virtual;
  #L28d57c.  v0:= temp;
  #L28d57e.  return v0;
  #L28d580.  v0:= 0I;
  #L28d582.  return v0;
}
procedure `android.graphics.Bitmap` `getNextFrame`(`com.bumptech.glide.m.e` v8 @kind this) @signature `Lcom/bumptech/glide/m/e;.getNextFrame:()Landroid/graphics/Bitmap;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L28d010.  @monitorenter v8
  #L28d012.  v0:= v8.`com.bumptech.glide.m.e.l` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28d016.  v0:= v0.`com.bumptech.glide.m.c.c` @type ^`int`;
  #L28d01a.  v1:= 3I;
  #L28d01c.  v2:= 1I;
  #L28d01e.  if v0 <= 0 then goto L28d02a;
  #L28d022.  v0:= v8.`com.bumptech.glide.m.e.k` @type ^`int`;
  #L28d026.  if v0 >= 0 then goto L28d086;
  #L28d02a.  v0:= `@@com.bumptech.glide.m.e.u` @type ^`java.lang.String` @kind object;
  #L28d02e.  call temp:= `isLoggable`(v0, v1) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L28d034.  v0:= temp;
  #L28d036.  if v0 == 0 then goto L28d082;
  #L28d03a.  v0:= `@@com.bumptech.glide.m.e.u` @type ^`java.lang.String` @kind object;
  #L28d03e.  v3:= new `java.lang.StringBuilder`;
  #L28d042.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28d048.  v4:= "Unable to decode frame, frameCount=" @kind object;
  #L28d04c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28d052.  v4:= v8.`com.bumptech.glide.m.e.l` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28d056.  v4:= v4.`com.bumptech.glide.m.c.c` @type ^`int`;
  #L28d05a.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L28d060.  v4:= ", framePointer=" @kind object;
  #L28d064.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28d06a.  v4:= v8.`com.bumptech.glide.m.e.k` @type ^`int`;
  #L28d06e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L28d074.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28d07a.  v3:= temp @kind object;
  #L28d07c.  call temp:= `d`(v0, v3) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L28d082.  v8.`com.bumptech.glide.m.e.o` @type ^`int` := v2;
  #L28d086.  v0:= v8.`com.bumptech.glide.m.e.o` @type ^`int`;
  #L28d08a.  v3:= 0I;
  #L28d08c.  if v0 == v2 then goto L28d1bc;
  #L28d090.  v0:= v8.`com.bumptech.glide.m.e.o` @type ^`int`;
  #L28d094.  v4:= 2I;
  #L28d096.  if v0 != v4 then goto L28d09e;
  #L28d09a.  goto L28d1bc;
  #L28d09e.  v0:= 0I;
  #L28d0a0.  v8.`com.bumptech.glide.m.e.o` @type ^`int` := v0;
  #L28d0a4.  v5:= v8.`com.bumptech.glide.m.e.e` @type ^`byte`[] @kind object;
  #L28d0a8.  if v5 != 0 then goto L28d0c0;
  #L28d0ac.  v5:= v8.`com.bumptech.glide.m.e.c` @type ^`com.bumptech.glide.m.a$a` @kind object;
  #L28d0b0.  v6:= 255I;
  #L28d0b4.  call temp:= `obtainByteArray`(v5, v6) @signature `Lcom/bumptech/glide/m/a$a;.obtainByteArray:(I)[B` @kind interface;
  #L28d0ba.  v5:= temp @kind object;
  #L28d0bc.  v8.`com.bumptech.glide.m.e.e` @type ^`byte`[] := v5 @kind object;
  #L28d0c0.  v5:= v8.`com.bumptech.glide.m.e.l` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28d0c4.  v5:= v5.`com.bumptech.glide.m.c.e` @type ^`java.util.List` @kind object;
  #L28d0c8.  v6:= v8.`com.bumptech.glide.m.e.k` @type ^`int`;
  #L28d0cc.  call temp:= `get`(v5, v6) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L28d0d2.  v5:= temp @kind object;
  #L28d0d4.  v5:= (`com.bumptech.glide.m.b`) v5 @kind object;
  #L28d0d8.  v6:= v8.`com.bumptech.glide.m.e.k` @type ^`int`;
  #L28d0dc.  v6:= v6 - v2 @kind int;
  #L28d0de.  if v6 < 0 then goto L28d0f8;
  #L28d0e2.  v7:= v8.`com.bumptech.glide.m.e.l` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28d0e6.  v7:= v7.`com.bumptech.glide.m.c.e` @type ^`java.util.List` @kind object;
  #L28d0ea.  call temp:= `get`(v7, v6) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L28d0f0.  v6:= temp @kind object;
  #L28d0f2.  v6:= (`com.bumptech.glide.m.b`) v6 @kind object;
  #L28d0f6.  goto L28d0fa;
  #L28d0f8.  v6:= v3 @kind object;
  #L28d0fa.  v7:= v5.`com.bumptech.glide.m.b.k` @type ^`int`[] @kind object;
  #L28d0fe.  if v7 == 0 then goto L28d108;
  #L28d102.  v7:= v5.`com.bumptech.glide.m.b.k` @type ^`int`[] @kind object;
  #L28d106.  goto L28d110;
  #L28d108.  v7:= v8.`com.bumptech.glide.m.e.l` @type ^`com.bumptech.glide.m.c` @kind object;
  #L28d10c.  v7:= v7.`com.bumptech.glide.m.c.a` @type ^`int`[] @kind object;
  #L28d110.  v8.`com.bumptech.glide.m.e.a` @type ^`int`[] := v7 @kind object;
  #L28d114.  v7:= v8.`com.bumptech.glide.m.e.a` @type ^`int`[] @kind object;
  #L28d118.  if v7 != 0 then goto L28d164;
  #L28d11c.  v0:= `@@com.bumptech.glide.m.e.u` @type ^`java.lang.String` @kind object;
  #L28d120.  call temp:= `isLoggable`(v0, v1) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L28d126.  v0:= temp;
  #L28d128.  if v0 == 0 then goto L28d15c;
  #L28d12c.  v0:= `@@com.bumptech.glide.m.e.u` @type ^`java.lang.String` @kind object;
  #L28d130.  v1:= new `java.lang.StringBuilder`;
  #L28d134.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28d13a.  v4:= "No valid color table found for frame #" @kind object;
  #L28d13e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28d144.  v4:= v8.`com.bumptech.glide.m.e.k` @type ^`int`;
  #L28d148.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L28d14e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28d154.  v1:= temp @kind object;
  #L28d156.  call temp:= `d`(v0, v1) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L28d15c.  v8.`com.bumptech.glide.m.e.o` @type ^`int` := v2;
  #L28d160.  @monitorexit v8
  #L28d162.  return v3 @kind object;
  #L28d164.  v1:= v5.`com.bumptech.glide.m.b.f` @type ^`boolean` @kind boolean;
  #L28d168.  if v1 == 0 then goto L28d1b0;
  #L28d16c.  v1:= v8.`com.bumptech.glide.m.e.a` @type ^`int`[] @kind object;
  #L28d170.  v3:= v8.`com.bumptech.glide.m.e.b` @type ^`int`[] @kind object;
  #L28d174.  v7:= v8.`com.bumptech.glide.m.e.a` @type ^`int`[] @kind object;
  #L28d178.  v7:= length @variable v7;
  #L28d17a.  call `arraycopy`(v1, v0, v3, v0, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L28d180.  v1:= v8.`com.bumptech.glide.m.e.b` @type ^`int`[] @kind object;
  #L28d184.  v8.`com.bumptech.glide.m.e.a` @type ^`int`[] := v1 @kind object;
  #L28d188.  v1:= v8.`com.bumptech.glide.m.e.a` @type ^`int`[] @kind object;
  #L28d18c.  v3:= v5.`com.bumptech.glide.m.b.h` @type ^`int`;
  #L28d190.  v1[v3]:= v0;
  #L28d194.  v0:= v5.`com.bumptech.glide.m.b.g` @type ^`int`;
  #L28d198.  if v0 != v4 then goto L28d1b0;
  #L28d19c.  v0:= v8.`com.bumptech.glide.m.e.k` @type ^`int`;
  #L28d1a0.  if v0 != 0 then goto L28d1b0;
  #L28d1a4.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L28d1aa.  v0:= temp @kind object;
  #L28d1ac.  v8.`com.bumptech.glide.m.e.s` @type ^`java.lang.Boolean` := v0 @kind object;
  #L28d1b0.  call temp:= `a`(v8, v5, v6) @signature `Lcom/bumptech/glide/m/e;.a:(Lcom/bumptech/glide/m/b;Lcom/bumptech/glide/m/b;)Landroid/graphics/Bitmap;` @kind direct;
  #L28d1b6.  v0:= temp @kind object;
  #L28d1b8.  @monitorexit v8
  #L28d1ba.  return v0 @kind object;
  #L28d1bc.  v0:= `@@com.bumptech.glide.m.e.u` @type ^`java.lang.String` @kind object;
  #L28d1c0.  call temp:= `isLoggable`(v0, v1) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L28d1c6.  v0:= temp;
  #L28d1c8.  if v0 == 0 then goto L28d1fc;
  #L28d1cc.  v0:= `@@com.bumptech.glide.m.e.u` @type ^`java.lang.String` @kind object;
  #L28d1d0.  v1:= new `java.lang.StringBuilder`;
  #L28d1d4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28d1da.  v2:= "Unable to decode frame, status=" @kind object;
  #L28d1de.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28d1e4.  v2:= v8.`com.bumptech.glide.m.e.o` @type ^`int`;
  #L28d1e8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L28d1ee.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28d1f4.  v1:= temp @kind object;
  #L28d1f6.  call temp:= `d`(v0, v1) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L28d1fc.  @monitorexit v8
  #L28d1fe.  return v3 @kind object;
  #L28d200.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28d202.  @monitorexit v8
  #L28d204.  throw v0;
  catch `java.lang.Throwable` @[L28d012..L28d160] goto L28d200;
  catch `java.lang.Throwable` @[L28d164..L28d1b8] goto L28d200;
  catch `java.lang.Throwable` @[L28d1bc..L28d1fc] goto L28d200;
}
procedure `void` `resetFrameIndex`(`com.bumptech.glide.m.e` v1 @kind this) @signature `Lcom/bumptech/glide/m/e;.resetFrameIndex:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28dcb0.  v0:= -1I;
  #L28dcb2.  v1.`com.bumptech.glide.m.e.k` @type ^`int` := v0;
  #L28dcb6.  return @kind void;
}
procedure `void` `setData`(`com.bumptech.glide.m.e` v2 @kind this, `com.bumptech.glide.m.c` v3 @kind object, `java.nio.ByteBuffer` v4 @kind object, `int` v5 ) @signature `Lcom/bumptech/glide/m/e;.setData:(Lcom/bumptech/glide/m/c;Ljava/nio/ByteBuffer;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28dcc8.  @monitorenter v2
  #L28dcca.  if v5 <= 0 then goto L28dd9a;
  #L28dcce.  call temp:= `highestOneBit`(v5) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L28dcd4.  v5:= temp;
  #L28dcd6.  v0:= 0I;
  #L28dcd8.  v2.`com.bumptech.glide.m.e.o` @type ^`int` := v0;
  #L28dcdc.  v2.`com.bumptech.glide.m.e.l` @type ^`com.bumptech.glide.m.c` := v3 @kind object;
  #L28dce0.  v1:= -1I;
  #L28dce2.  v2.`com.bumptech.glide.m.e.k` @type ^`int` := v1;
  #L28dce6.  call temp:= `asReadOnlyBuffer`(v4) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L28dcec.  v4:= temp @kind object;
  #L28dcee.  v2.`com.bumptech.glide.m.e.d` @type ^`java.nio.ByteBuffer` := v4 @kind object;
  #L28dcf2.  v4:= v2.`com.bumptech.glide.m.e.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L28dcf6.  call temp:= `position`(v4, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L28dcfc.  v4:= v2.`com.bumptech.glide.m.e.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L28dd00.  v1:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L28dd04.  call temp:= `order`(v4, v1) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L28dd0a.  v2.`com.bumptech.glide.m.e.n` @type ^`boolean` := v0 @kind boolean;
  #L28dd0e.  v4:= v3.`com.bumptech.glide.m.c.e` @type ^`java.util.List` @kind object;
  #L28dd12.  call temp:= `iterator`(v4) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L28dd18.  v4:= temp @kind object;
  #L28dd1a.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L28dd20.  v0:= temp;
  #L28dd22.  if v0 == 0 then goto L28dd42;
  #L28dd26.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L28dd2c.  v0:= temp @kind object;
  #L28dd2e.  v0:= (`com.bumptech.glide.m.b`) v0 @kind object;
  #L28dd32.  v0:= v0.`com.bumptech.glide.m.b.g` @type ^`int`;
  #L28dd36.  v1:= 3I;
  #L28dd38.  if v0 != v1 then goto L28dd1a;
  #L28dd3c.  v4:= 1I;
  #L28dd3e.  v2.`com.bumptech.glide.m.e.n` @type ^`boolean` := v4 @kind boolean;
  #L28dd42.  v2.`com.bumptech.glide.m.e.p` @type ^`int` := v5;
  #L28dd46.  v4:= v3.`com.bumptech.glide.m.c.f` @type ^`int`;
  #L28dd4a.  v4:= v4 / v5 @kind int;
  #L28dd4c.  v2.`com.bumptech.glide.m.e.r` @type ^`int` := v4;
  #L28dd50.  v4:= v3.`com.bumptech.glide.m.c.g` @type ^`int`;
  #L28dd54.  v4:= v4 / v5 @kind int;
  #L28dd56.  v2.`com.bumptech.glide.m.e.q` @type ^`int` := v4;
  #L28dd5a.  v4:= v2.`com.bumptech.glide.m.e.c` @type ^`com.bumptech.glide.m.a$a` @kind object;
  #L28dd5e.  v5:= v3.`com.bumptech.glide.m.c.f` @type ^`int`;
  #L28dd62.  v3:= v3.`com.bumptech.glide.m.c.g` @type ^`int`;
  #L28dd66.  v5:= v5 * v3 @kind int;
  #L28dd6a.  call temp:= `obtainByteArray`(v4, v5) @signature `Lcom/bumptech/glide/m/a$a;.obtainByteArray:(I)[B` @kind interface;
  #L28dd70.  v3:= temp @kind object;
  #L28dd72.  v2.`com.bumptech.glide.m.e.i` @type ^`byte`[] := v3 @kind object;
  #L28dd76.  v3:= v2.`com.bumptech.glide.m.e.c` @type ^`com.bumptech.glide.m.a$a` @kind object;
  #L28dd7a.  v4:= v2.`com.bumptech.glide.m.e.r` @type ^`int`;
  #L28dd7e.  v5:= v2.`com.bumptech.glide.m.e.q` @type ^`int`;
  #L28dd82.  v4:= v4 * v5 @kind int;
  #L28dd86.  call temp:= `obtainIntArray`(v3, v4) @signature `Lcom/bumptech/glide/m/a$a;.obtainIntArray:(I)[I` @kind interface;
  #L28dd8c.  v3:= temp @kind object;
  #L28dd8e.  v2.`com.bumptech.glide.m.e.j` @type ^`int`[] := v3 @kind object;
  #L28dd92.  @monitorexit v2
  #L28dd94.  return @kind void;
  #L28dd96.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28dd98.  goto L28ddc8;
  #L28dd9a.  v3:= new `java.lang.IllegalArgumentException`;
  #L28dd9e.  v4:= new `java.lang.StringBuilder`;
  #L28dda2.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28dda8.  v0:= "Sample size must be >=0, not: " @kind object;
  #L28ddac.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28ddb2.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L28ddb8.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28ddbe.  v4:= temp @kind object;
  #L28ddc0.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28ddc6.  throw v3;
  #L28ddc8.  @monitorexit v2
  #L28ddca.  throw v3;
  catch `java.lang.Throwable` @[L28dcce..L28dd92] goto L28dd96;
  catch `java.lang.Throwable` @[L28dd9a..L28ddc8] goto L28dd96;
}
procedure `void` `setDefaultBitmapConfig`(`com.bumptech.glide.m.e` v3 @kind this, `android.graphics.Bitmap$Config` v4 @kind object) @signature `Lcom/bumptech/glide/m/e;.setDefaultBitmapConfig:(Landroid/graphics/Bitmap$Config;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28ddf0.  v0:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L28ddf4.  if v4 == v0 then goto L28de58;
  #L28ddf8.  v0:= `@@android.graphics.Bitmap$Config.RGB_565` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L28ddfc.  if v4 != v0 then goto L28de02;
  #L28de00.  goto L28de58;
  #L28de02.  v0:= new `java.lang.IllegalArgumentException`;
  #L28de06.  v1:= new `java.lang.StringBuilder`;
  #L28de0a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28de10.  v2:= "Unsupported format: " @kind object;
  #L28de14.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28de1a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28de20.  v4:= ", must be one of " @kind object;
  #L28de24.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28de2a.  v4:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L28de2e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28de34.  v4:= " or " @kind object;
  #L28de38.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28de3e.  v4:= `@@android.graphics.Bitmap$Config.RGB_565` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L28de42.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28de48.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28de4e.  v4:= temp @kind object;
  #L28de50.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28de56.  throw v0;
  #L28de58.  v3.`com.bumptech.glide.m.e.t` @type ^`android.graphics.Bitmap$Config` := v4 @kind object;
  #L28de5c.  return @kind void;
}
