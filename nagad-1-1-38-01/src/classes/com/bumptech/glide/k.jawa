record `com.bumptech.glide.k` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.lang.Cloneable` @kind interface {
  `com.bumptech.glide.q.m.c` `com.bumptech.glide.k.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.k` v1 @kind this) @signature `Lcom/bumptech/glide/k;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L28ab38.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28ab3e.  call temp:= `getFactory`() @signature `Lcom/bumptech/glide/q/m/a;.getFactory:()Lcom/bumptech/glide/q/m/c;` @kind static;
  #L28ab44.  v0:= temp @kind object;
  #L28ab46.  v1.`com.bumptech.glide.k.f` @type ^`com.bumptech.glide.q.m.c` := v0 @kind object;
  #L28ab4a.  return @kind void;
}
procedure `com.bumptech.glide.q.m.c` `a`(`com.bumptech.glide.k` v1 @kind this) @signature `Lcom/bumptech/glide/k;.a:()Lcom/bumptech/glide/q/m/c;` @AccessFlag FINAL {
    temp;
    v0;

  #L28ab04.  v0:= v1.`com.bumptech.glide.k.f` @type ^`com.bumptech.glide.q.m.c` @kind object;
  #L28ab08.  return v0 @kind object;
}
procedure `com.bumptech.glide.k` `clone`(`com.bumptech.glide.k` v2 @kind this) @signature `Lcom/bumptech/glide/k;.clone:()Lcom/bumptech/glide/k;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L28aac8.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L28aace.  v0:= temp @kind object;
  #L28aad0.  v0:= (`com.bumptech.glide.k`) v0 @kind object;
  #L28aad4.  return v0 @kind object;
  #L28aad6.  v0:= Exception @type ^`java.lang.CloneNotSupportedException` @kind object;
  #L28aad8.  v1:= new `java.lang.RuntimeException`;
  #L28aadc.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L28aae2.  throw v1;
  catch `java.lang.CloneNotSupportedException` @[L28aac8..L28aad4] goto L28aad6;
}
procedure `java.lang.Object` `clone`(`com.bumptech.glide.k` v1 @kind this) @signature `Lcom/bumptech/glide/k;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L28ab1c.  call temp:= `clone`(v1) @signature `Lcom/bumptech/glide/k;.clone:()Lcom/bumptech/glide/k;` @kind virtual;
  #L28ab22.  v0:= temp @kind object;
  #L28ab24.  return v0 @kind object;
}
