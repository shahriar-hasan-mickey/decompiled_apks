record `com.bumptech.glide.j$b` @kind class @AccessFlag  extends `com.bumptech.glide.n.c$a` @kind interface {
  `com.bumptech.glide.n.n` `com.bumptech.glide.j$b.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.j` `com.bumptech.glide.j$b.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.bumptech.glide.j$b` v0 @kind this, `com.bumptech.glide.j` v1 @kind object, `com.bumptech.glide.n.n` v2 @kind object) @signature `Lcom/bumptech/glide/j$b;.<init>:(Lcom/bumptech/glide/j;Lcom/bumptech/glide/n/n;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L28a390.  v0.`com.bumptech.glide.j$b.b` @type ^`com.bumptech.glide.j` := v1 @kind object;
  #L28a394.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28a39a.  v0.`com.bumptech.glide.j$b.a` @type ^`com.bumptech.glide.n.n` := v2 @kind object;
  #L28a39e.  return @kind void;
}
procedure `void` `onConnectivityChanged`(`com.bumptech.glide.j$b` v1 @kind this, `boolean` v2 ) @signature `Lcom/bumptech/glide/j$b;.onConnectivityChanged:(Z)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28a3b0.  if v2 == 0 then goto L28a3ce;
  #L28a3b4.  v2:= v1.`com.bumptech.glide.j$b.b` @type ^`com.bumptech.glide.j` @kind object;
  #L28a3b8.  @monitorenter v2
  #L28a3ba.  v0:= v1.`com.bumptech.glide.j$b.a` @type ^`com.bumptech.glide.n.n` @kind object;
  #L28a3be.  call `restartRequests`(v0) @signature `Lcom/bumptech/glide/n/n;.restartRequests:()V` @kind virtual;
  #L28a3c4.  @monitorexit v2
  #L28a3c6.  goto L28a3ce;
  #L28a3c8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28a3ca.  @monitorexit v2
  #L28a3cc.  throw v0;
  #L28a3ce.  return @kind void;
  catch `java.lang.Throwable` @[L28a3ba..L28a3cc] goto L28a3c8;
}
