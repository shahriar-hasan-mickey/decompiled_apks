record `com.bumptech.glide.s.k` @kind class @AccessFlag PUBLIC_FINAL {
}
global `char`[] `@@com.bumptech.glide.s.k.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@com.bumptech.glide.s.k.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/s/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ac684.  v0:= "0123456789abcdef" @kind object;
  #L2ac688.  call temp:= `toCharArray`(v0) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L2ac68e.  v0:= temp @kind object;
  #L2ac690.  `@@com.bumptech.glide.s.k.a` @type ^`char`[] := v0 @kind object;
  #L2ac694.  v0:= 64I;
  #L2ac698.  v0:= new `char`[v0];
  #L2ac69c.  `@@com.bumptech.glide.s.k.b` @type ^`char`[] := v0 @kind object;
  #L2ac6a0.  return @kind void;
}
procedure `int` `a`(`android.graphics.Bitmap$Config` v3 @kind object) @signature `Lcom/bumptech/glide/s/k;.a:(Landroid/graphics/Bitmap$Config;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2ac498.  if v3 != 0 then goto L2ac4a0;
  #L2ac49c.  v3:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L2ac4a0.  v0:= `@@com.bumptech.glide.s.k$a.a` @type ^`int`[] @kind object;
  #L2ac4a4.  call temp:= `ordinal`(v3) @signature `Landroid/graphics/Bitmap$Config;.ordinal:()I` @kind virtual;
  #L2ac4aa.  v3:= temp;
  #L2ac4ac.  v3:= v0[v3];
  #L2ac4b0.  v0:= 4I;
  #L2ac4b2.  v1:= 2I;
  #L2ac4b4.  v2:= 1I;
  #L2ac4b6.  if v3 == v2 then goto L2ac4d4;
  #L2ac4ba.  if v3 == v1 then goto L2ac4d0;
  #L2ac4be.  v2:= 3I;
  #L2ac4c0.  if v3 == v2 then goto L2ac4d0;
  #L2ac4c4.  if v3 == v0 then goto L2ac4ca;
  #L2ac4c8.  goto L2ac4d6;
  #L2ac4ca.  v0:= 8I;
  #L2ac4ce.  goto L2ac4d6;
  #L2ac4d0.  v0:= 2I;
  #L2ac4d2.  goto L2ac4d6;
  #L2ac4d4.  v0:= 1I;
  #L2ac4d6.  return v0;
}
procedure `java.lang.String` `a`(`byte`[] v5 @kind object, `char`[] v6 @kind object) @signature `Lcom/bumptech/glide/s/k;.a:([B[C)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2ac58c.  v0:= 0I;
  #L2ac58e.  v1:= length @variable v5;
  #L2ac590.  if v0 >= v1 then goto L2ac5c6;
  #L2ac594.  v1:= v5[v0] @kind byte;
  #L2ac598.  v1:= v1 ^& 255;
  #L2ac59c.  v2:= v0 * 2;
  #L2ac5a0.  v3:= `@@com.bumptech.glide.s.k.a` @type ^`char`[] @kind object;
  #L2ac5a4.  v4:= v1 ^>> 4;
  #L2ac5a8.  v4:= v3[v4] @kind char;
  #L2ac5ac.  v6[v2]:= v4 @kind char;
  #L2ac5b0.  v2:= v2 + 1;
  #L2ac5b4.  v1:= v1 ^& 15;
  #L2ac5b8.  v1:= v3[v1] @kind char;
  #L2ac5bc.  v6[v2]:= v1 @kind char;
  #L2ac5c0.  v0:= v0 + 1;
  #L2ac5c4.  goto L2ac58e;
  #L2ac5c6.  v5:= new `java.lang.String`;
  #L2ac5ca.  call `<init>`(v5, v6) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L2ac5d0.  return v5 @kind object;
}
procedure `boolean` `a`(`int` v1 ) @signature `Lcom/bumptech/glide/s/k;.a:(I)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2ac34c.  if v1 > 0 then goto L2ac35e;
  #L2ac350.  v0:= -2147483648I;
  #L2ac354.  if v1 != v0 then goto L2ac35a;
  #L2ac358.  goto L2ac35e;
  #L2ac35a.  v1:= 0I;
  #L2ac35c.  goto L2ac360;
  #L2ac35e.  v1:= 1I;
  #L2ac360.  return v1;
}
procedure `void` `assertBackgroundThread`() @signature `Lcom/bumptech/glide/s/k;.assertBackgroundThread:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2ac6b4.  call temp:= `isOnBackgroundThread`() @signature `Lcom/bumptech/glide/s/k;.isOnBackgroundThread:()Z` @kind static;
  #L2ac6ba.  v0:= temp;
  #L2ac6bc.  if v0 == 0 then goto L2ac6c2;
  #L2ac6c0.  return @kind void;
  #L2ac6c2.  v0:= new `java.lang.IllegalArgumentException`;
  #L2ac6c6.  v1:= "You must call this method on a background thread" @kind object;
  #L2ac6ca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ac6d0.  throw v0;
}
procedure `void` `assertMainThread`() @signature `Lcom/bumptech/glide/s/k;.assertMainThread:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2ac6e4.  call temp:= `isOnMainThread`() @signature `Lcom/bumptech/glide/s/k;.isOnMainThread:()Z` @kind static;
  #L2ac6ea.  v0:= temp;
  #L2ac6ec.  if v0 == 0 then goto L2ac6f2;
  #L2ac6f0.  return @kind void;
  #L2ac6f2.  v0:= new `java.lang.IllegalArgumentException`;
  #L2ac6f6.  v1:= "You must call this method on the main thread" @kind object;
  #L2ac6fa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ac700.  throw v0;
}
procedure `boolean` `bothModelsNullEquivalentOrEquals`(`java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/s/k;.bothModelsNullEquivalentOrEquals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2ac294.  if v1 != 0 then goto L2ac2a4;
  #L2ac298.  if v2 != 0 then goto L2ac2a0;
  #L2ac29c.  v1:= 1I;
  #L2ac29e.  goto L2ac2a2;
  #L2ac2a0.  v1:= 0I;
  #L2ac2a2.  return v1;
  #L2ac2a4.  v0:= instanceof @variable v1 @type ^`com.bumptech.glide.load.n.l` @kind boolean;
  #L2ac2a8.  if v0 == 0 then goto L2ac2ba;
  #L2ac2ac.  v1:= (`com.bumptech.glide.load.n.l`) v1 @kind object;
  #L2ac2b0.  call temp:= `isEquivalentTo`(v1, v2) @signature `Lcom/bumptech/glide/load/n/l;.isEquivalentTo:(Ljava/lang/Object;)Z` @kind interface;
  #L2ac2b6.  v1:= temp;
  #L2ac2b8.  return v1;
  #L2ac2ba.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2ac2c0.  v1:= temp;
  #L2ac2c2.  return v1;
}
procedure `boolean` `bothNullOrEqual`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/s/k;.bothNullOrEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2ac2d4.  if v0 != 0 then goto L2ac2e4;
  #L2ac2d8.  if v1 != 0 then goto L2ac2e0;
  #L2ac2dc.  v0:= 1I;
  #L2ac2de.  goto L2ac2ec;
  #L2ac2e0.  v0:= 0I;
  #L2ac2e2.  goto L2ac2ec;
  #L2ac2e4.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2ac2ea.  v0:= temp;
  #L2ac2ec.  return v0;
}
procedure `java.util.Queue` `createQueue`(`int` v1 ) @signature `Lcom/bumptech/glide/s/k;.createQueue:(I)Ljava/util/Queue;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2ac668.  v0:= new `java.util.ArrayDeque`;
  #L2ac66c.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayDeque;.<init>:(I)V` @kind direct;
  #L2ac672.  return v0 @kind object;
}
procedure `int` `getBitmapByteSize`(`int` v0 , `int` v1 , `android.graphics.Bitmap$Config` v2 @kind object) @signature `Lcom/bumptech/glide/s/k;.getBitmapByteSize:(IILandroid/graphics/Bitmap$Config;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2ac474.  v0:= v0 * v1 @kind int;
  #L2ac478.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/s/k;.a:(Landroid/graphics/Bitmap$Config;)I` @kind static;
  #L2ac47e.  v1:= temp;
  #L2ac480.  v0:= v0 * v1 @kind int;
  #L2ac484.  return v0;
}
procedure `int` `getBitmapByteSize`(`android.graphics.Bitmap` v3 @kind object) @signature `Lcom/bumptech/glide/s/k;.getBitmapByteSize:(Landroid/graphics/Bitmap;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2ac3a4.  call temp:= `isRecycled`(v3) @signature `Landroid/graphics/Bitmap;.isRecycled:()Z` @kind virtual;
  #L2ac3aa.  v0:= temp;
  #L2ac3ac.  if v0 != 0 then goto L2ac3dc;
  #L2ac3b0.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2ac3b4.  v1:= 19I;
  #L2ac3b8.  if v0 < v1 then goto L2ac3c6;
  #L2ac3bc.  call temp:= `getAllocationByteCount`(v3) @signature `Landroid/graphics/Bitmap;.getAllocationByteCount:()I` @kind virtual;
  #L2ac3c2.  v3:= temp;
  #L2ac3c4.  return v3;
  #L2ac3c6.  call temp:= `getHeight`(v3) @signature `Landroid/graphics/Bitmap;.getHeight:()I` @kind virtual;
  #L2ac3cc.  v0:= temp;
  #L2ac3ce.  call temp:= `getRowBytes`(v3) @signature `Landroid/graphics/Bitmap;.getRowBytes:()I` @kind virtual;
  #L2ac3d4.  v3:= temp;
  #L2ac3d6.  v0:= v0 * v3 @kind int;
  #L2ac3da.  return v0;
  #L2ac3dc.  v0:= new `java.lang.IllegalStateException`;
  #L2ac3e0.  v1:= new `java.lang.StringBuilder`;
  #L2ac3e4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ac3ea.  v2:= "Cannot obtain size for recycled Bitmap: " @kind object;
  #L2ac3ee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ac3f4.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ac3fa.  v2:= "[" @kind object;
  #L2ac3fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ac404.  call temp:= `getWidth`(v3) @signature `Landroid/graphics/Bitmap;.getWidth:()I` @kind virtual;
  #L2ac40a.  v2:= temp;
  #L2ac40c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ac412.  v2:= "x" @kind object;
  #L2ac416.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ac41c.  call temp:= `getHeight`(v3) @signature `Landroid/graphics/Bitmap;.getHeight:()I` @kind virtual;
  #L2ac422.  v2:= temp;
  #L2ac424.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ac42a.  v2:= "] " @kind object;
  #L2ac42e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ac434.  call temp:= `getConfig`(v3) @signature `Landroid/graphics/Bitmap;.getConfig:()Landroid/graphics/Bitmap$Config;` @kind virtual;
  #L2ac43a.  v3:= temp @kind object;
  #L2ac43c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ac442.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ac448.  v3:= temp @kind object;
  #L2ac44a.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ac450.  throw v0;
  catch `java.lang.NullPointerException` @[L2ac3bc..L2ac3c4] goto L2ac3c6;
}
procedure `java.util.List` `getSnapshot`(`java.util.Collection` v2 @kind object) @signature `Lcom/bumptech/glide/s/k;.getSnapshot:(Ljava/util/Collection;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2ac61c.  v0:= new `java.util.ArrayList`;
  #L2ac620.  call temp:= `size`(v2) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L2ac626.  v1:= temp;
  #L2ac628.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2ac62e.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2ac634.  v2:= temp @kind object;
  #L2ac636.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2ac63c.  v1:= temp;
  #L2ac63e.  if v1 == 0 then goto L2ac656;
  #L2ac642.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2ac648.  v1:= temp @kind object;
  #L2ac64a.  if v1 == 0 then goto L2ac636;
  #L2ac64e.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2ac654.  goto L2ac636;
  #L2ac656.  return v0 @kind object;
}
procedure `int` `hashCode`(`float` v1 ) @signature `Lcom/bumptech/glide/s/k;.hashCode:(F)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2ac504.  v0:= 17I;
  #L2ac508.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(FI)I` @kind static;
  #L2ac50e.  v1:= temp;
  #L2ac510.  return v1;
}
procedure `int` `hashCode`(`float` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/s/k;.hashCode:(FI)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2ac524.  call temp:= `floatToIntBits`(v0) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L2ac52a.  v0:= temp;
  #L2ac52c.  call temp:= `hashCode`(v0, v1) @signature `Lcom/bumptech/glide/s/k;.hashCode:(II)I` @kind static;
  #L2ac532.  v0:= temp;
  #L2ac534.  return v0;
}
procedure `int` `hashCode`(`int` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/s/k;.hashCode:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2ac548.  v1:= v1 * 31;
  #L2ac54c.  v1:= v1 + v0 @kind int;
  #L2ac54e.  return v1;
}
procedure `int` `hashCode`(`java.lang.Object` v0 @kind object, `int` v1 ) @signature `Lcom/bumptech/glide/s/k;.hashCode:(Ljava/lang/Object;I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2ac560.  if v0 != 0 then goto L2ac568;
  #L2ac564.  v0:= 0I;
  #L2ac566.  goto L2ac570;
  #L2ac568.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2ac56e.  v0:= temp;
  #L2ac570.  call temp:= `hashCode`(v0, v1) @signature `Lcom/bumptech/glide/s/k;.hashCode:(II)I` @kind static;
  #L2ac576.  v0:= temp;
  #L2ac578.  return v0;
}
procedure `int` `hashCode`(`boolean` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/s/k;.hashCode:(ZI)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2ac4e8.  call temp:= `hashCode`(v0, v1) @signature `Lcom/bumptech/glide/s/k;.hashCode:(II)I` @kind static;
  #L2ac4ee.  v0:= temp;
  #L2ac4f0.  return v0;
}
procedure `boolean` `isOnBackgroundThread`() @signature `Lcom/bumptech/glide/s/k;.isOnBackgroundThread:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2ac300.  call temp:= `isOnMainThread`() @signature `Lcom/bumptech/glide/s/k;.isOnMainThread:()Z` @kind static;
  #L2ac306.  v0:= temp;
  #L2ac308.  v0:= v0 ^~ 1;
  #L2ac30c.  return v0;
}
procedure `boolean` `isOnMainThread`() @signature `Lcom/bumptech/glide/s/k;.isOnMainThread:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2ac320.  call temp:= `myLooper`() @signature `Landroid/os/Looper;.myLooper:()Landroid/os/Looper;` @kind static;
  #L2ac326.  v0:= temp @kind object;
  #L2ac328.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L2ac32e.  v1:= temp @kind object;
  #L2ac330.  if v0 != v1 then goto L2ac338;
  #L2ac334.  v0:= 1I;
  #L2ac336.  goto L2ac33a;
  #L2ac338.  v0:= 0I;
  #L2ac33a.  return v0;
}
procedure `boolean` `isValidDimensions`(`int` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/s/k;.isValidDimensions:(II)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2ac374.  call temp:= `a`(v0) @signature `Lcom/bumptech/glide/s/k;.a:(I)Z` @kind static;
  #L2ac37a.  v0:= temp;
  #L2ac37c.  if v0 == 0 then goto L2ac390;
  #L2ac380.  call temp:= `a`(v1) @signature `Lcom/bumptech/glide/s/k;.a:(I)Z` @kind static;
  #L2ac386.  v0:= temp;
  #L2ac388.  if v0 == 0 then goto L2ac390;
  #L2ac38c.  v0:= 1I;
  #L2ac38e.  goto L2ac392;
  #L2ac390.  v0:= 0I;
  #L2ac392.  return v0;
}
procedure `java.lang.String` `sha256BytesToHex`(`byte`[] v2 @kind object) @signature `Lcom/bumptech/glide/s/k;.sha256BytesToHex:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2ac5e4.  v0:= `@@com.bumptech.glide.s.k.b` @type ^`char`[] @kind object;
  #L2ac5e8.  @monitorenter v0
  #L2ac5ea.  v1:= `@@com.bumptech.glide.s.k.b` @type ^`char`[] @kind object;
  #L2ac5ee.  call temp:= `a`(v2, v1) @signature `Lcom/bumptech/glide/s/k;.a:([B[C)Ljava/lang/String;` @kind static;
  #L2ac5f4.  v2:= temp @kind object;
  #L2ac5f6.  @monitorexit v0
  #L2ac5f8.  return v2 @kind object;
  #L2ac5fa.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ac5fc.  @monitorexit v0
  #L2ac5fe.  throw v2;
  catch `java.lang.Throwable` @[L2ac5ea..L2ac5fe] goto L2ac5fa;
}
