record `com.bumptech.glide.s.c` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.FilterInputStream` @kind class {
  `long` `com.bumptech.glide.s.c.f` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.s.c.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.s.c` v0 @kind this, `java.io.InputStream` v1 @kind object, `long` v2 ) @signature `Lcom/bumptech/glide/s/c;.<init>:(Ljava/io/InputStream;J)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2ab72c.  call `<init>`(v0, v1) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L2ab732.  v0.`com.bumptech.glide.s.c.f` @type ^`long` := v2 @kind wide;
  #L2ab736.  return @kind void;
}
procedure `int` `a`(`com.bumptech.glide.s.c` v5 @kind this, `int` v6 ) @signature `Lcom/bumptech/glide/s/c;.a:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2ab5f8.  if v6 < 0 then goto L2ab608;
  #L2ab5fc.  v0:= v5.`com.bumptech.glide.s.c.g` @type ^`int`;
  #L2ab600.  v0:= v0 + v6 @kind int;
  #L2ab602.  v5.`com.bumptech.glide.s.c.g` @type ^`int` := v0;
  #L2ab606.  goto L2ab620;
  #L2ab608.  v0:= v5.`com.bumptech.glide.s.c.f` @type ^`long` @kind wide;
  #L2ab60c.  v2:= v5.`com.bumptech.glide.s.c.g` @type ^`int`;
  #L2ab610.  v2:= (`long`) v2 @kind i2l;
  #L2ab612.  v0:= v0 - v2 @kind long;
  #L2ab614.  v2:= 0L;
  #L2ab618.  v4:= lcmp(v0, v2);
  #L2ab61c.  if v4 > 0 then goto L2ab622;
  #L2ab620.  return v6;
  #L2ab622.  v6:= new `java.io.IOException`;
  #L2ab626.  v0:= new `java.lang.StringBuilder`;
  #L2ab62a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ab630.  v1:= "Failed to read all expected data, expected: " @kind object;
  #L2ab634.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ab63a.  v1:= v5.`com.bumptech.glide.s.c.f` @type ^`long` @kind wide;
  #L2ab63e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ab644.  v1:= ", but read: " @kind object;
  #L2ab648.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ab64e.  v1:= v5.`com.bumptech.glide.s.c.g` @type ^`int`;
  #L2ab652.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ab658.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ab65e.  v0:= temp @kind object;
  #L2ab660.  call `<init>`(v6, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ab666.  throw v6;
}
procedure `java.io.InputStream` `obtain`(`java.io.InputStream` v1 @kind object, `long` v2 ) @signature `Lcom/bumptech/glide/s/c;.obtain:(Ljava/io/InputStream;J)Ljava/io/InputStream;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2ab710.  v0:= new `com.bumptech.glide.s.c`;
  #L2ab714.  call `<init>`(v0, v1, v2) @signature `Lcom/bumptech/glide/s/c;.<init>:(Ljava/io/InputStream;J)V` @kind direct;
  #L2ab71a.  return v0 @kind object;
}
procedure `int` `available`(`com.bumptech.glide.s.c` v4 @kind this) @signature `Lcom/bumptech/glide/s/c;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2ab5ac.  @monitorenter v4
  #L2ab5ae.  v0:= v4.`com.bumptech.glide.s.c.f` @type ^`long` @kind wide;
  #L2ab5b2.  v2:= v4.`com.bumptech.glide.s.c.g` @type ^`int`;
  #L2ab5b6.  v2:= (`long`) v2 @kind i2l;
  #L2ab5b8.  v0:= v0 - v2 @kind long;
  #L2ab5ba.  v2:= v4.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L2ab5be.  call temp:= `available`(v2) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L2ab5c4.  v2:= temp;
  #L2ab5c6.  v2:= (`long`) v2 @kind i2l;
  #L2ab5c8.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L2ab5ce.  v0:= temp @kind wide;
  #L2ab5d0.  v1:= (`int`) v0 @kind l2i;
  #L2ab5d2.  @monitorexit v4
  #L2ab5d4.  return v1;
  #L2ab5d6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ab5d8.  @monitorexit v4
  #L2ab5da.  throw v0;
  catch `java.lang.Throwable` @[L2ab5ae..L2ab5d0] goto L2ab5d6;
}
procedure `int` `read`(`com.bumptech.glide.s.c` v2 @kind this) @signature `Lcom/bumptech/glide/s/c;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ab678.  @monitorenter v2
  #L2ab67a.  call temp:= `read`(v2) @signature `Ljava/io/FilterInputStream;.read:()I` @kind super;
  #L2ab680.  v0:= temp;
  #L2ab682.  if v0 < 0 then goto L2ab68a;
  #L2ab686.  v1:= 1I;
  #L2ab688.  goto L2ab68c;
  #L2ab68a.  v1:= -1I;
  #L2ab68c.  call temp:= `a`(v2, v1) @signature `Lcom/bumptech/glide/s/c;.a:(I)I` @kind direct;
  #L2ab692.  @monitorexit v2
  #L2ab694.  return v0;
  #L2ab696.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ab698.  @monitorexit v2
  #L2ab69a.  throw v0;
  catch `java.lang.Throwable` @[L2ab67a..L2ab692] goto L2ab696;
}
procedure `int` `read`(`com.bumptech.glide.s.c` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/bumptech/glide/s/c;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ab6b8.  v0:= length @variable v3;
  #L2ab6ba.  v1:= 0I;
  #L2ab6bc.  call temp:= `read`(v2, v3, v1, v0) @signature `Lcom/bumptech/glide/s/c;.read:([BII)I` @kind virtual;
  #L2ab6c2.  v3:= temp;
  #L2ab6c4.  return v3;
}
procedure `int` `read`(`com.bumptech.glide.s.c` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/bumptech/glide/s/c;.read:([BII)I` @AccessFlag PUBLIC {
    temp;

  #L2ab6d8.  @monitorenter v0
  #L2ab6da.  call temp:= `read`(v0, v1, v2, v3) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L2ab6e0.  v1:= temp;
  #L2ab6e2.  call temp:= `a`(v0, v1) @signature `Lcom/bumptech/glide/s/c;.a:(I)I` @kind direct;
  #L2ab6e8.  @monitorexit v0
  #L2ab6ea.  return v1;
  #L2ab6ec.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ab6ee.  @monitorexit v0
  #L2ab6f0.  throw v1;
  catch `java.lang.Throwable` @[L2ab6da..L2ab6e8] goto L2ab6ec;
}
