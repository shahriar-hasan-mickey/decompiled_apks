record `com.bumptech.glide.s.j` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `checkArgument`(`boolean` v0 , `java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/s/j;.checkArgument:(ZLjava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2ac19c.  if v0 == 0 then goto L2ac1a2;
  #L2ac1a0.  return @kind void;
  #L2ac1a2.  v0:= new `java.lang.IllegalArgumentException`;
  #L2ac1a6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ac1ac.  throw v0;
}
procedure `java.lang.String` `checkNotEmpty`(`java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/s/j;.checkNotEmpty:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2ac13c.  call temp:= `isEmpty`(v1) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L2ac142.  v0:= temp;
  #L2ac144.  if v0 != 0 then goto L2ac14a;
  #L2ac148.  return v1 @kind object;
  #L2ac14a.  v1:= new `java.lang.IllegalArgumentException`;
  #L2ac14e.  v0:= "Must not be null or empty" @kind object;
  #L2ac152.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ac158.  throw v1;
}
procedure `java.util.Collection` `checkNotEmpty`(`java.util.Collection` v1 @kind object) @signature `Lcom/bumptech/glide/s/j;.checkNotEmpty:(Ljava/util/Collection;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2ac16c.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L2ac172.  v0:= temp;
  #L2ac174.  if v0 != 0 then goto L2ac17a;
  #L2ac178.  return v1 @kind object;
  #L2ac17a.  v1:= new `java.lang.IllegalArgumentException`;
  #L2ac17e.  v0:= "Must not be empty." @kind object;
  #L2ac182.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ac188.  throw v1;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2ac0fc.  v0:= "Argument must not be null" @kind object;
  #L2ac100.  call temp:= `checkNotNull`(v1, v0) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2ac106.  return v1 @kind object;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2ac118.  if v0 == 0 then goto L2ac11e;
  #L2ac11c.  return v0 @kind object;
  #L2ac11e.  v0:= new `java.lang.NullPointerException`;
  #L2ac122.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ac128.  throw v0;
}
