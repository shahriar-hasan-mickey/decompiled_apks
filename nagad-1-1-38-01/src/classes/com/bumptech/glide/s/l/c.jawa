record `com.bumptech.glide.s.l.c` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`com.bumptech.glide.s.l.c` v0 @kind this) @signature `Lcom/bumptech/glide/s/l/c;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2aca98.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2aca9e.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.s.l.c` v0 @kind this, `com.bumptech.glide.s.l.c$a` v1 @kind object) @signature `Lcom/bumptech/glide/s/l/c;.<init>:(Lcom/bumptech/glide/s/l/c$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2acab0.  call `<init>`(v0) @signature `Lcom/bumptech/glide/s/l/c;.<init>:()V` @kind direct;
  #L2acab6.  return @kind void;
}
procedure `com.bumptech.glide.s.l.c` `newInstance`() @signature `Lcom/bumptech/glide/s/l/c;.newInstance:()Lcom/bumptech/glide/s/l/c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2aca7c.  v0:= new `com.bumptech.glide.s.l.c$b`;
  #L2aca80.  call `<init>`(v0) @signature `Lcom/bumptech/glide/s/l/c$b;.<init>:()V` @kind direct;
  #L2aca86.  return v0 @kind object;
}
procedure `void` `setRecycled`(`boolean` v0 ) @signature `Lcom/bumptech/glide/s/l/c;.setRecycled:(Z)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `throwIfRecycled`() @signature `Lcom/bumptech/glide/s/l/c;.throwIfRecycled:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
