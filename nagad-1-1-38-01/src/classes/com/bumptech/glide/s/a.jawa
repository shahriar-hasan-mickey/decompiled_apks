record `com.bumptech.glide.s.a` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.concurrent.atomic.AtomicReference` `@@com.bumptech.glide.s.a.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/s/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ab3e4.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2ab3e8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2ab3ee.  `@@com.bumptech.glide.s.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L2ab3f2.  return @kind void;
}
procedure `com.bumptech.glide.s.a$b` `a`(`java.nio.ByteBuffer` v3 @kind object) @signature `Lcom/bumptech/glide/s/a;.a:(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/s/a$b;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2ab1dc.  call temp:= `isReadOnly`(v3) @signature `Ljava/nio/ByteBuffer;.isReadOnly:()Z` @kind virtual;
  #L2ab1e2.  v0:= temp;
  #L2ab1e4.  if v0 != 0 then goto L2ab218;
  #L2ab1e8.  call temp:= `hasArray`(v3) @signature `Ljava/nio/ByteBuffer;.hasArray:()Z` @kind virtual;
  #L2ab1ee.  v0:= temp;
  #L2ab1f0.  if v0 == 0 then goto L2ab218;
  #L2ab1f4.  v0:= new `com.bumptech.glide.s.a$b`;
  #L2ab1f8.  call temp:= `array`(v3) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L2ab1fe.  v1:= temp @kind object;
  #L2ab200.  call temp:= `arrayOffset`(v3) @signature `Ljava/nio/ByteBuffer;.arrayOffset:()I` @kind virtual;
  #L2ab206.  v2:= temp;
  #L2ab208.  call temp:= `limit`(v3) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L2ab20e.  v3:= temp;
  #L2ab210.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/bumptech/glide/s/a$b;.<init>:([BII)V` @kind direct;
  #L2ab216.  return v0 @kind object;
  #L2ab218.  v3:= 0I;
  #L2ab21a.  return v3 @kind object;
}
procedure `java.nio.ByteBuffer` `fromFile`(`java.io.File` v9 @kind object) @signature `Lcom/bumptech/glide/s/a;.fromFile:(Ljava/io/File;)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2ab248.  v0:= 0I;
  #L2ab24a.  call temp:= `length`(v9) @signature `Ljava/io/File;.length:()J` @kind virtual;
  #L2ab250.  v5:= temp @kind wide;
  #L2ab252.  v1:= 2147483647L;
  #L2ab258.  v3:= lcmp(v5, v1);
  #L2ab25c.  if v3 > 0 then goto L2ab2cc;
  #L2ab260.  v1:= 0L;
  #L2ab264.  v3:= lcmp(v5, v1);
  #L2ab268.  if v3 == 0 then goto L2ab2bc;
  #L2ab26c.  v7:= new `java.io.RandomAccessFile`;
  #L2ab270.  v1:= "r" @kind object;
  #L2ab274.  call `<init>`(v7, v9, v1) @signature `Ljava/io/RandomAccessFile;.<init>:(Ljava/io/File;Ljava/lang/String;)V` @kind direct;
  #L2ab27a.  call temp:= `getChannel`(v7) @signature `Ljava/io/RandomAccessFile;.getChannel:()Ljava/nio/channels/FileChannel;` @kind virtual;
  #L2ab280.  v9:= temp @kind object;
  #L2ab282.  v2:= `@@java.nio.channels.FileChannel$MapMode.READ_ONLY` @type ^`java.nio.channels.FileChannel$MapMode` @kind object;
  #L2ab286.  v3:= 0L;
  #L2ab28a.  v1:= v9 @kind object;
  #L2ab28c.  call temp:= `map`(v1, v2, v3, v5) @signature `Ljava/nio/channels/FileChannel;.map:(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;` @kind virtual;
  #L2ab292.  v0:= temp @kind object;
  #L2ab294.  call temp:= `load`(v0) @signature `Ljava/nio/MappedByteBuffer;.load:()Ljava/nio/MappedByteBuffer;` @kind virtual;
  #L2ab29a.  v0:= temp @kind object;
  #L2ab29c.  if v9 == 0 then goto L2ab2a6;
  #L2ab2a0.  call `close`(v9) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L2ab2a6.  call `close`(v7) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L2ab2ac.  return v0 @kind object;
  #L2ab2ae.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ab2b0.  v8:= v0 @kind object;
  #L2ab2b2.  v0:= v9 @kind object;
  #L2ab2b4.  v9:= v8 @kind object;
  #L2ab2b6.  goto L2ab2e0;
  #L2ab2b8.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ab2ba.  goto L2ab2e0;
  #L2ab2bc.  v9:= new `java.io.IOException`;
  #L2ab2c0.  v1:= "File unsuitable for memory mapping" @kind object;
  #L2ab2c4.  call `<init>`(v9, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ab2ca.  throw v9;
  #L2ab2cc.  v9:= new `java.io.IOException`;
  #L2ab2d0.  v1:= "File too large to map into memory" @kind object;
  #L2ab2d4.  call `<init>`(v9, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ab2da.  throw v9;
  #L2ab2dc.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ab2de.  v7:= v0 @kind object;
  #L2ab2e0.  if v0 == 0 then goto L2ab2ee;
  #L2ab2e4.  call `close`(v0) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L2ab2ea.  goto L2ab2ee;
  #L2ab2ec.  
  #L2ab2ee.  if v7 == 0 then goto L2ab2f8;
  #L2ab2f2.  call `close`(v7) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L2ab2f8.  throw v9;
  catch `java.lang.Throwable` @[L2ab24a..L2ab27a] goto L2ab2dc;
  catch `java.lang.Throwable` @[L2ab27a..L2ab282] goto L2ab2b8;
  catch `java.lang.Throwable` @[L2ab282..L2ab29c] goto L2ab2ae;
  catch `java.io.IOException` @[L2ab2a0..L2ab2a6] goto L2ab2a6;
  catch `java.io.IOException` @[L2ab2a6..L2ab2ac] goto L2ab2ac;
  catch `java.lang.Throwable` @[L2ab2bc..L2ab2dc] goto L2ab2dc;
  catch `java.io.IOException` @[L2ab2e4..L2ab2ea] goto L2ab2ec;
  catch `java.io.IOException` @[L2ab2f2..L2ab2f8] goto L2ab2f8;
}
procedure `java.nio.ByteBuffer` `fromStream`(`java.io.InputStream` v4 @kind object) @signature `Lcom/bumptech/glide/s/a;.fromStream:(Ljava/io/InputStream;)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2ab364.  v0:= new `java.io.ByteArrayOutputStream`;
  #L2ab368.  v1:= 16384I;
  #L2ab36c.  call `<init>`(v0, v1) @signature `Ljava/io/ByteArrayOutputStream;.<init>:(I)V` @kind direct;
  #L2ab372.  v2:= `@@com.bumptech.glide.s.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2ab376.  v3:= 0I;
  #L2ab378.  call temp:= `getAndSet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2ab37e.  v2:= temp @kind object;
  #L2ab380.  v2:= (`byte`[]) v2 @kind object;
  #L2ab384.  if v2 != 0 then goto L2ab38c;
  #L2ab388.  v2:= new `byte`[v1];
  #L2ab38c.  call temp:= `read`(v4, v2) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L2ab392.  v1:= temp;
  #L2ab394.  v3:= 0I;
  #L2ab396.  if v1 < 0 then goto L2ab3a2;
  #L2ab39a.  call `write`(v0, v2, v3, v1) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L2ab3a0.  goto L2ab38c;
  #L2ab3a2.  v4:= `@@com.bumptech.glide.s.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2ab3a6.  call `set`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L2ab3ac.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L2ab3b2.  v4:= temp @kind object;
  #L2ab3b4.  v0:= length @variable v4;
  #L2ab3b6.  call temp:= `allocateDirect`(v0) @signature `Ljava/nio/ByteBuffer;.allocateDirect:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L2ab3bc.  v0:= temp @kind object;
  #L2ab3be.  call temp:= `put`(v0, v4) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L2ab3c4.  v4:= temp @kind object;
  #L2ab3c6.  call temp:= `position`(v4, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L2ab3cc.  v4:= temp @kind object;
  #L2ab3ce.  v4:= (`java.nio.ByteBuffer`) v4 @kind object;
  #L2ab3d2.  return v4 @kind object;
}
procedure `byte`[] `toBytes`(`java.nio.ByteBuffer` v2 @kind object) @signature `Lcom/bumptech/glide/s/a;.toBytes:(Ljava/nio/ByteBuffer;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2ab178.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/s/a;.a:(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/s/a$b;` @kind static;
  #L2ab17e.  v0:= temp @kind object;
  #L2ab180.  if v0 == 0 then goto L2ab1a4;
  #L2ab184.  v1:= v0.`com.bumptech.glide.s.a$b.a` @type ^`int`;
  #L2ab188.  if v1 != 0 then goto L2ab1a4;
  #L2ab18c.  v1:= v0.`com.bumptech.glide.s.a$b.b` @type ^`int`;
  #L2ab190.  v0:= v0.`com.bumptech.glide.s.a$b.c` @type ^`byte`[] @kind object;
  #L2ab194.  v0:= length @variable v0;
  #L2ab196.  if v1 != v0 then goto L2ab1a4;
  #L2ab19a.  call temp:= `array`(v2) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L2ab1a0.  v2:= temp @kind object;
  #L2ab1a2.  goto L2ab1c8;
  #L2ab1a4.  call temp:= `asReadOnlyBuffer`(v2) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L2ab1aa.  v2:= temp @kind object;
  #L2ab1ac.  call temp:= `limit`(v2) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L2ab1b2.  v0:= temp;
  #L2ab1b4.  v0:= new `byte`[v0];
  #L2ab1b8.  v1:= 0I;
  #L2ab1ba.  call temp:= `position`(v2, v1) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L2ab1c0.  call temp:= `get`(v2, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L2ab1c6.  v2:= v0 @kind object;
  #L2ab1c8.  return v2 @kind object;
}
procedure `void` `toFile`(`java.nio.ByteBuffer` v4 @kind object, `java.io.File` v5 @kind object) @signature `Lcom/bumptech/glide/s/a;.toFile:(Ljava/nio/ByteBuffer;Ljava/io/File;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2ab404.  v0:= 0I;
  #L2ab406.  call temp:= `position`(v4, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L2ab40c.  v1:= 0I;
  #L2ab40e.  v2:= new `java.io.RandomAccessFile`;
  #L2ab412.  v3:= "rw" @kind object;
  #L2ab416.  call `<init>`(v2, v5, v3) @signature `Ljava/io/RandomAccessFile;.<init>:(Ljava/io/File;Ljava/lang/String;)V` @kind direct;
  #L2ab41c.  call temp:= `getChannel`(v2) @signature `Ljava/io/RandomAccessFile;.getChannel:()Ljava/nio/channels/FileChannel;` @kind virtual;
  #L2ab422.  v1:= temp @kind object;
  #L2ab424.  call temp:= `write`(v1, v4) @signature `Ljava/nio/channels/FileChannel;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L2ab42a.  call `force`(v1, v0) @signature `Ljava/nio/channels/FileChannel;.force:(Z)V` @kind virtual;
  #L2ab430.  call `close`(v1) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L2ab436.  call `close`(v2) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L2ab43c.  if v1 == 0 then goto L2ab446;
  #L2ab440.  call `close`(v1) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L2ab446.  call `close`(v2) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L2ab44c.  return @kind void;
  #L2ab44e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ab450.  goto L2ab456;
  #L2ab452.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ab454.  v2:= v1 @kind object;
  #L2ab456.  if v1 == 0 then goto L2ab464;
  #L2ab45a.  call `close`(v1) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L2ab460.  goto L2ab464;
  #L2ab462.  
  #L2ab464.  if v2 == 0 then goto L2ab46e;
  #L2ab468.  call `close`(v2) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L2ab46e.  throw v4;
  catch `java.lang.Throwable` @[L2ab40e..L2ab41c] goto L2ab452;
  catch `java.lang.Throwable` @[L2ab41c..L2ab43c] goto L2ab44e;
  catch `java.io.IOException` @[L2ab440..L2ab446] goto L2ab446;
  catch `java.io.IOException` @[L2ab446..L2ab44c] goto L2ab44c;
  catch `java.io.IOException` @[L2ab45a..L2ab460] goto L2ab462;
  catch `java.io.IOException` @[L2ab468..L2ab46e] goto L2ab46e;
}
procedure `java.io.InputStream` `toStream`(`java.nio.ByteBuffer` v1 @kind object) @signature `Lcom/bumptech/glide/s/a;.toStream:(Ljava/nio/ByteBuffer;)Ljava/io/InputStream;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2ab22c.  v0:= new `com.bumptech.glide.s.a$a`;
  #L2ab230.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/s/a$a;.<init>:(Ljava/nio/ByteBuffer;)V` @kind direct;
  #L2ab236.  return v0 @kind object;
}
