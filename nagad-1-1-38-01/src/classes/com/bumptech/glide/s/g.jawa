record `com.bumptech.glide.s.g` @kind class @AccessFlag PUBLIC {
  `java.util.Map` `com.bumptech.glide.s.g.a` @AccessFlag PRIVATE_FINAL;
  `long` `com.bumptech.glide.s.g.b` @AccessFlag PRIVATE;
  `long` `com.bumptech.glide.s.g.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.s.g` v4 @kind this, `long` v5 ) @signature `Lcom/bumptech/glide/s/g;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2abca0.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2abca6.  v0:= new `java.util.LinkedHashMap`;
  #L2abcaa.  v1:= 100I;
  #L2abcae.  v2:= 0.75F;
  #L2abcb2.  v3:= 1I;
  #L2abcb4.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/util/LinkedHashMap;.<init>:(IFZ)V` @kind direct;
  #L2abcba.  v4.`com.bumptech.glide.s.g.a` @type ^`java.util.Map` := v0 @kind object;
  #L2abcbe.  v4.`com.bumptech.glide.s.g.b` @type ^`long` := v5 @kind wide;
  #L2abcc2.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.s.g` v2 @kind this) @signature `Lcom/bumptech/glide/s/g;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2abcf0.  v0:= v2.`com.bumptech.glide.s.g.b` @type ^`long` @kind wide;
  #L2abcf4.  call `trimToSize`(v2, v0) @signature `Lcom/bumptech/glide/s/g;.trimToSize:(J)V` @kind virtual;
  #L2abcfa.  return @kind void;
}
procedure `void` `clearMemory`(`com.bumptech.glide.s.g` v2 @kind this) @signature `Lcom/bumptech/glide/s/g;.clearMemory:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2abcd4.  v0:= 0L;
  #L2abcd8.  call `trimToSize`(v2, v0) @signature `Lcom/bumptech/glide/s/g;.trimToSize:(J)V` @kind virtual;
  #L2abcde.  return @kind void;
}
procedure `java.lang.Object` `get`(`com.bumptech.glide.s.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/s/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2abb58.  @monitorenter v1
  #L2abb5a.  v0:= v1.`com.bumptech.glide.s.g.a` @type ^`java.util.Map` @kind object;
  #L2abb5e.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2abb64.  v2:= temp @kind object;
  #L2abb66.  @monitorexit v1
  #L2abb68.  return v2 @kind object;
  #L2abb6a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2abb6c.  @monitorexit v1
  #L2abb6e.  throw v2;
  catch `java.lang.Throwable` @[L2abb5a..L2abb66] goto L2abb6a;
}
procedure `long` `getMaxSize`(`com.bumptech.glide.s.g` v2 @kind this) @signature `Lcom/bumptech/glide/s/g;.getMaxSize:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2abc74.  @monitorenter v2
  #L2abc76.  v0:= v2.`com.bumptech.glide.s.g.b` @type ^`long` @kind wide;
  #L2abc7a.  @monitorexit v2
  #L2abc7c.  return v0 @kind wide;
  #L2abc7e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2abc80.  @monitorexit v2
  #L2abc82.  throw v0;
  catch `java.lang.Throwable` @[L2abc76..L2abc7a] goto L2abc7e;
}
procedure `int` `getSize`(`com.bumptech.glide.s.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/s/g;.getSize:(Ljava/lang/Object;)I` @AccessFlag PROTECTED {
    temp;

  #L2abb44.  v1:= 1I;
  #L2abb46.  return v1;
}
procedure `void` `onItemEvicted`(`com.bumptech.glide.s.g` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/s/g;.onItemEvicted:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L2abd0c.  return @kind void;
}
procedure `java.lang.Object` `put`(`com.bumptech.glide.s.g` v5 @kind this, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lcom/bumptech/glide/s/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2abb8c.  @monitorenter v5
  #L2abb8e.  call temp:= `getSize`(v5, v7) @signature `Lcom/bumptech/glide/s/g;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L2abb94.  v0:= temp;
  #L2abb96.  v0:= (`long`) v0 @kind i2l;
  #L2abb98.  v2:= v5.`com.bumptech.glide.s.g.b` @type ^`long` @kind wide;
  #L2abb9c.  v4:= lcmp(v0, v2);
  #L2abba0.  if v4 < 0 then goto L2abbb0;
  #L2abba4.  call `onItemEvicted`(v5, v6, v7) @signature `Lcom/bumptech/glide/s/g;.onItemEvicted:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L2abbaa.  v6:= 0I;
  #L2abbac.  @monitorexit v5
  #L2abbae.  return v6 @kind object;
  #L2abbb0.  if v7 == 0 then goto L2abbbe;
  #L2abbb4.  v2:= v5.`com.bumptech.glide.s.g.c` @type ^`long` @kind wide;
  #L2abbb8.  v2:= v2 + v0 @kind long;
  #L2abbba.  v5.`com.bumptech.glide.s.g.c` @type ^`long` := v2 @kind wide;
  #L2abbbe.  v0:= v5.`com.bumptech.glide.s.g.a` @type ^`java.util.Map` @kind object;
  #L2abbc2.  call temp:= `put`(v0, v6, v7) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2abbc8.  v0:= temp @kind object;
  #L2abbca.  if v0 == 0 then goto L2abbf4;
  #L2abbce.  v1:= v5.`com.bumptech.glide.s.g.c` @type ^`long` @kind wide;
  #L2abbd2.  call temp:= `getSize`(v5, v0) @signature `Lcom/bumptech/glide/s/g;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L2abbd8.  v3:= temp;
  #L2abbda.  v3:= (`long`) v3 @kind i2l;
  #L2abbdc.  v1:= v1 - v3 @kind long;
  #L2abbde.  v5.`com.bumptech.glide.s.g.c` @type ^`long` := v1 @kind wide;
  #L2abbe2.  call temp:= `equals`(v0, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2abbe8.  v7:= temp;
  #L2abbea.  if v7 != 0 then goto L2abbf4;
  #L2abbee.  call `onItemEvicted`(v5, v6, v0) @signature `Lcom/bumptech/glide/s/g;.onItemEvicted:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L2abbf4.  call `a`(v5) @signature `Lcom/bumptech/glide/s/g;.a:()V` @kind direct;
  #L2abbfa.  @monitorexit v5
  #L2abbfc.  return v0 @kind object;
  #L2abbfe.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2abc00.  @monitorexit v5
  #L2abc02.  throw v6;
  catch `java.lang.Throwable` @[L2abb8e..L2abbaa] goto L2abbfe;
  catch `java.lang.Throwable` @[L2abbb4..L2abbfa] goto L2abbfe;
}
procedure `java.lang.Object` `remove`(`com.bumptech.glide.s.g` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/bumptech/glide/s/g;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2abc28.  @monitorenter v4
  #L2abc2a.  v0:= v4.`com.bumptech.glide.s.g.a` @type ^`java.util.Map` @kind object;
  #L2abc2e.  call temp:= `remove`(v0, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2abc34.  v5:= temp @kind object;
  #L2abc36.  if v5 == 0 then goto L2abc4e;
  #L2abc3a.  v0:= v4.`com.bumptech.glide.s.g.c` @type ^`long` @kind wide;
  #L2abc3e.  call temp:= `getSize`(v4, v5) @signature `Lcom/bumptech/glide/s/g;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L2abc44.  v2:= temp;
  #L2abc46.  v2:= (`long`) v2 @kind i2l;
  #L2abc48.  v0:= v0 - v2 @kind long;
  #L2abc4a.  v4.`com.bumptech.glide.s.g.c` @type ^`long` := v0 @kind wide;
  #L2abc4e.  @monitorexit v4
  #L2abc50.  return v5 @kind object;
  #L2abc52.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2abc54.  @monitorexit v4
  #L2abc56.  throw v5;
  catch `java.lang.Throwable` @[L2abc2a..L2abc4e] goto L2abc52;
}
procedure `void` `trimToSize`(`com.bumptech.glide.s.g` v7 @kind this, `long` v8 ) @signature `Lcom/bumptech/glide/s/g;.trimToSize:(J)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2abd20.  @monitorenter v7
  #L2abd22.  v0:= v7.`com.bumptech.glide.s.g.c` @type ^`long` @kind wide;
  #L2abd26.  v2:= lcmp(v0, v8);
  #L2abd2a.  if v2 <= 0 then goto L2abd80;
  #L2abd2e.  v0:= v7.`com.bumptech.glide.s.g.a` @type ^`java.util.Map` @kind object;
  #L2abd32.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2abd38.  v0:= temp @kind object;
  #L2abd3a.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2abd40.  v0:= temp @kind object;
  #L2abd42.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2abd48.  v1:= temp @kind object;
  #L2abd4a.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L2abd4e.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2abd54.  v2:= temp @kind object;
  #L2abd56.  v3:= v7.`com.bumptech.glide.s.g.c` @type ^`long` @kind wide;
  #L2abd5a.  call temp:= `getSize`(v7, v2) @signature `Lcom/bumptech/glide/s/g;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L2abd60.  v5:= temp;
  #L2abd62.  v5:= (`long`) v5 @kind i2l;
  #L2abd64.  v3:= v3 - v5 @kind long;
  #L2abd66.  v7.`com.bumptech.glide.s.g.c` @type ^`long` := v3 @kind wide;
  #L2abd6a.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2abd70.  v1:= temp @kind object;
  #L2abd72.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L2abd78.  call `onItemEvicted`(v7, v1, v2) @signature `Lcom/bumptech/glide/s/g;.onItemEvicted:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L2abd7e.  goto L2abd22;
  #L2abd80.  @monitorexit v7
  #L2abd82.  return @kind void;
  #L2abd84.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2abd86.  @monitorexit v7
  #L2abd88.  throw v8;
  catch `java.lang.Throwable` @[L2abd22..L2abd7e] goto L2abd84;
}
