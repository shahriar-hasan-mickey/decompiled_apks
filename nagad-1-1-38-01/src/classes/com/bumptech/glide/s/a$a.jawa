record `com.bumptech.glide.s.a$a` @kind class @AccessFlag  extends `java.io.InputStream` @kind class {
  `java.nio.ByteBuffer` `com.bumptech.glide.s.a$a.f` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.s.a$a.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.s.a$a` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Lcom/bumptech/glide/s/a$a;.<init>:(Ljava/nio/ByteBuffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2ab0a0.  call `<init>`(v1) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L2ab0a6.  v0:= -1I;
  #L2ab0a8.  v1.`com.bumptech.glide.s.a$a.g` @type ^`int` := v0;
  #L2ab0ac.  v1.`com.bumptech.glide.s.a$a.f` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L2ab0b0.  return @kind void;
}
procedure `int` `available`(`com.bumptech.glide.s.a$a` v1 @kind this) @signature `Lcom/bumptech/glide/s/a$a;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2aafb4.  v0:= v1.`com.bumptech.glide.s.a$a.f` @type ^`java.nio.ByteBuffer` @kind object;
  #L2aafb8.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L2aafbe.  v0:= temp;
  #L2aafc0.  return v0;
}
procedure `void` `mark`(`com.bumptech.glide.s.a$a` v0 @kind this, `int` v1 ) @signature `Lcom/bumptech/glide/s/a$a;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L2ab0c4.  @monitorenter v0
  #L2ab0c6.  v1:= v0.`com.bumptech.glide.s.a$a.f` @type ^`java.nio.ByteBuffer` @kind object;
  #L2ab0ca.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L2ab0d0.  v1:= temp;
  #L2ab0d2.  v0.`com.bumptech.glide.s.a$a.g` @type ^`int` := v1;
  #L2ab0d6.  @monitorexit v0
  #L2ab0d8.  return @kind void;
  #L2ab0da.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ab0dc.  @monitorexit v0
  #L2ab0de.  throw v1;
  catch `java.lang.Throwable` @[L2ab0c6..L2ab0d6] goto L2ab0da;
}
procedure `boolean` `markSupported`(`com.bumptech.glide.s.a$a` v1 @kind this) @signature `Lcom/bumptech/glide/s/a$a;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2aafa0.  v0:= 1I;
  #L2aafa2.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.s.a$a` v1 @kind this) @signature `Lcom/bumptech/glide/s/a$a;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2aafd4.  v0:= v1.`com.bumptech.glide.s.a$a.f` @type ^`java.nio.ByteBuffer` @kind object;
  #L2aafd8.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L2aafde.  v0:= temp;
  #L2aafe0.  if v0 != 0 then goto L2aafe8;
  #L2aafe4.  v0:= -1I;
  #L2aafe6.  return v0;
  #L2aafe8.  v0:= v1.`com.bumptech.glide.s.a$a.f` @type ^`java.nio.ByteBuffer` @kind object;
  #L2aafec.  call temp:= `get`(v0) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L2aaff2.  v0:= temp;
  #L2aaff4.  v0:= v0 ^& 255;
  #L2aaff8.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.s.a$a` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/s/a$a;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ab00c.  v0:= v1.`com.bumptech.glide.s.a$a.f` @type ^`java.nio.ByteBuffer` @kind object;
  #L2ab010.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L2ab016.  v0:= temp;
  #L2ab018.  if v0 != 0 then goto L2ab020;
  #L2ab01c.  v2:= -1I;
  #L2ab01e.  return v2;
  #L2ab020.  call temp:= `available`(v1) @signature `Lcom/bumptech/glide/s/a$a;.available:()I` @kind virtual;
  #L2ab026.  v0:= temp;
  #L2ab028.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2ab02e.  v4:= temp;
  #L2ab030.  v0:= v1.`com.bumptech.glide.s.a$a.f` @type ^`java.nio.ByteBuffer` @kind object;
  #L2ab034.  call temp:= `get`(v0, v2, v3, v4) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L2ab03a.  return v4;
}
procedure `void` `reset`(`com.bumptech.glide.s.a$a` v2 @kind this) @signature `Lcom/bumptech/glide/s/a$a;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ab0fc.  @monitorenter v2
  #L2ab0fe.  v0:= v2.`com.bumptech.glide.s.a$a.g` @type ^`int`;
  #L2ab102.  v1:= -1I;
  #L2ab104.  if v0 == v1 then goto L2ab11a;
  #L2ab108.  v0:= v2.`com.bumptech.glide.s.a$a.f` @type ^`java.nio.ByteBuffer` @kind object;
  #L2ab10c.  v1:= v2.`com.bumptech.glide.s.a$a.g` @type ^`int`;
  #L2ab110.  call temp:= `position`(v0, v1) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L2ab116.  @monitorexit v2
  #L2ab118.  return @kind void;
  #L2ab11a.  v0:= new `java.io.IOException`;
  #L2ab11e.  v1:= "Cannot reset to unset mark position" @kind object;
  #L2ab122.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ab128.  throw v0;
  #L2ab12a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ab12c.  @monitorexit v2
  #L2ab12e.  throw v0;
  catch `java.lang.Throwable` @[L2ab0fe..L2ab116] goto L2ab12a;
  catch `java.lang.Throwable` @[L2ab11a..L2ab12a] goto L2ab12a;
}
procedure `long` `skip`(`com.bumptech.glide.s.a$a` v3 @kind this, `long` v4 ) @signature `Lcom/bumptech/glide/s/a$a;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2ab04c.  v0:= v3.`com.bumptech.glide.s.a$a.f` @type ^`java.nio.ByteBuffer` @kind object;
  #L2ab050.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L2ab056.  v0:= temp;
  #L2ab058.  if v0 != 0 then goto L2ab062;
  #L2ab05c.  v4:= -1L;
  #L2ab060.  return v4 @kind wide;
  #L2ab062.  call temp:= `available`(v3) @signature `Lcom/bumptech/glide/s/a$a;.available:()I` @kind virtual;
  #L2ab068.  v0:= temp;
  #L2ab06a.  v0:= (`long`) v0 @kind i2l;
  #L2ab06c.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2ab072.  v4:= temp @kind wide;
  #L2ab074.  v0:= v3.`com.bumptech.glide.s.a$a.f` @type ^`java.nio.ByteBuffer` @kind object;
  #L2ab078.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L2ab07e.  v1:= temp;
  #L2ab080.  v1:= (`long`) v1 @kind i2l;
  #L2ab082.  v1:= v1 + v4 @kind long;
  #L2ab084.  v2:= (`int`) v1 @kind l2i;
  #L2ab086.  call temp:= `position`(v0, v2) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L2ab08c.  return v4 @kind wide;
}
