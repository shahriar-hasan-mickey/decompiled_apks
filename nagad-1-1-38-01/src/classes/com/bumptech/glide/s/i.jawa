record `com.bumptech.glide.s.i` @kind class @AccessFlag PUBLIC {
  `java.lang.Class` `com.bumptech.glide.s.i.a` @AccessFlag PRIVATE;
  `java.lang.Class` `com.bumptech.glide.s.i.b` @AccessFlag PRIVATE;
  `java.lang.Class` `com.bumptech.glide.s.i.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.s.i` v0 @kind this) @signature `Lcom/bumptech/glide/s/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2ac0a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ac0aa.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.s.i` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/bumptech/glide/s/i;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2ac0bc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ac0c2.  call `set`(v0, v1, v2, v3) @signature `Lcom/bumptech/glide/s/i;.set:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)V` @kind virtual;
  #L2ac0c8.  return @kind void;
}
procedure `boolean` `equals`(`com.bumptech.glide.s.i` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/bumptech/glide/s/i;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2abf84.  v0:= 1I;
  #L2abf86.  if v4 != v5 then goto L2abf8c;
  #L2abf8a.  return v0;
  #L2abf8c.  v1:= 0I;
  #L2abf8e.  if v5 == 0 then goto L2abfec;
  #L2abf92.  v2:= constclass @type ^`com.bumptech.glide.s.i` @kind object;
  #L2abf96.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2abf9c.  v3:= temp @kind object;
  #L2abf9e.  if v2 == v3 then goto L2abfa4;
  #L2abfa2.  goto L2abfec;
  #L2abfa4.  v5:= (`com.bumptech.glide.s.i`) v5 @kind object;
  #L2abfa8.  v2:= v4.`com.bumptech.glide.s.i.a` @type ^`java.lang.Class` @kind object;
  #L2abfac.  v3:= v5.`com.bumptech.glide.s.i.a` @type ^`java.lang.Class` @kind object;
  #L2abfb0.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2abfb6.  v2:= temp;
  #L2abfb8.  if v2 != 0 then goto L2abfbe;
  #L2abfbc.  return v1;
  #L2abfbe.  v2:= v4.`com.bumptech.glide.s.i.b` @type ^`java.lang.Class` @kind object;
  #L2abfc2.  v3:= v5.`com.bumptech.glide.s.i.b` @type ^`java.lang.Class` @kind object;
  #L2abfc6.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2abfcc.  v2:= temp;
  #L2abfce.  if v2 != 0 then goto L2abfd4;
  #L2abfd2.  return v1;
  #L2abfd4.  v2:= v4.`com.bumptech.glide.s.i.c` @type ^`java.lang.Class` @kind object;
  #L2abfd8.  v5:= v5.`com.bumptech.glide.s.i.c` @type ^`java.lang.Class` @kind object;
  #L2abfdc.  call temp:= `bothNullOrEqual`(v2, v5) @signature `Lcom/bumptech/glide/s/k;.bothNullOrEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2abfe2.  v5:= temp;
  #L2abfe4.  if v5 != 0 then goto L2abfea;
  #L2abfe8.  return v1;
  #L2abfea.  return v0;
  #L2abfec.  return v1;
}
procedure `int` `hashCode`(`com.bumptech.glide.s.i` v2 @kind this) @signature `Lcom/bumptech/glide/s/i;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ac000.  v0:= v2.`com.bumptech.glide.s.i.a` @type ^`java.lang.Class` @kind object;
  #L2ac004.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2ac00a.  v0:= temp;
  #L2ac00c.  v0:= v0 * 31;
  #L2ac010.  v1:= v2.`com.bumptech.glide.s.i.b` @type ^`java.lang.Class` @kind object;
  #L2ac014.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2ac01a.  v1:= temp;
  #L2ac01c.  v0:= v0 + v1 @kind int;
  #L2ac01e.  v0:= v0 * 31;
  #L2ac022.  v1:= v2.`com.bumptech.glide.s.i.c` @type ^`java.lang.Class` @kind object;
  #L2ac026.  if v1 == 0 then goto L2ac034;
  #L2ac02a.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2ac030.  v1:= temp;
  #L2ac032.  goto L2ac036;
  #L2ac034.  v1:= 0I;
  #L2ac036.  v0:= v0 + v1 @kind int;
  #L2ac038.  return v0;
}
procedure `void` `set`(`com.bumptech.glide.s.i` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/bumptech/glide/s/i;.set:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;

  #L2ac0dc.  v0.`com.bumptech.glide.s.i.a` @type ^`java.lang.Class` := v1 @kind object;
  #L2ac0e0.  v0.`com.bumptech.glide.s.i.b` @type ^`java.lang.Class` := v2 @kind object;
  #L2ac0e4.  v0.`com.bumptech.glide.s.i.c` @type ^`java.lang.Class` := v3 @kind object;
  #L2ac0e8.  return @kind void;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.s.i` v2 @kind this) @signature `Lcom/bumptech/glide/s/i;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ac04c.  v0:= new `java.lang.StringBuilder`;
  #L2ac050.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ac056.  v1:= "MultiClassKey{first=" @kind object;
  #L2ac05a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ac060.  v1:= v2.`com.bumptech.glide.s.i.a` @type ^`java.lang.Class` @kind object;
  #L2ac064.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ac06a.  v1:= ", second=" @kind object;
  #L2ac06e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ac074.  v1:= v2.`com.bumptech.glide.s.i.b` @type ^`java.lang.Class` @kind object;
  #L2ac078.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ac07e.  v1:= 125I;
  #L2ac082.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ac088.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ac08e.  v0:= temp @kind object;
  #L2ac090.  return v0 @kind object;
}
