record `com.bumptech.glide.s.d` @kind class @AccessFlag PUBLIC extends `java.io.InputStream` @kind class {
  `java.io.InputStream` `com.bumptech.glide.s.d.f` @AccessFlag PRIVATE;
  `java.io.IOException` `com.bumptech.glide.s.d.g` @AccessFlag PRIVATE;
}
global `java.util.Queue` `@@com.bumptech.glide.s.d.h` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/s/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ab8dc.  v0:= 0I;
  #L2ab8de.  call temp:= `createQueue`(v0) @signature `Lcom/bumptech/glide/s/k;.createQueue:(I)Ljava/util/Queue;` @kind static;
  #L2ab8e4.  v0:= temp @kind object;
  #L2ab8e6.  `@@com.bumptech.glide.s.d.h` @type ^`java.util.Queue` := v0 @kind object;
  #L2ab8ea.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.s.d` v0 @kind this) @signature `Lcom/bumptech/glide/s/d;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2ab8fc.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L2ab902.  return @kind void;
}
procedure `com.bumptech.glide.s.d` `obtain`(`java.io.InputStream` v2 @kind object) @signature `Lcom/bumptech/glide/s/d;.obtain:(Ljava/io/InputStream;)Lcom/bumptech/glide/s/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2ab768.  v0:= `@@com.bumptech.glide.s.d.h` @type ^`java.util.Queue` @kind object;
  #L2ab76c.  @monitorenter v0
  #L2ab76e.  v1:= `@@com.bumptech.glide.s.d.h` @type ^`java.util.Queue` @kind object;
  #L2ab772.  call temp:= `poll`(v1) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L2ab778.  v1:= temp @kind object;
  #L2ab77a.  v1:= (`com.bumptech.glide.s.d`) v1 @kind object;
  #L2ab77e.  @monitorexit v0
  #L2ab780.  if v1 != 0 then goto L2ab78e;
  #L2ab784.  v1:= new `com.bumptech.glide.s.d`;
  #L2ab788.  call `<init>`(v1) @signature `Lcom/bumptech/glide/s/d;.<init>:()V` @kind direct;
  #L2ab78e.  call `a`(v1, v2) @signature `Lcom/bumptech/glide/s/d;.a:(Ljava/io/InputStream;)V` @kind virtual;
  #L2ab794.  return v1 @kind object;
  #L2ab796.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ab798.  @monitorexit v0
  #L2ab79a.  throw v2;
  catch `java.lang.Throwable` @[L2ab76e..L2ab780] goto L2ab796;
  catch `java.lang.Throwable` @[L2ab798..L2ab79a] goto L2ab796;
}
procedure `void` `a`(`com.bumptech.glide.s.d` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lcom/bumptech/glide/s/d;.a:(Ljava/io/InputStream;)V` @AccessFlag  {
    temp;

  #L2ab9c0.  v0.`com.bumptech.glide.s.d.f` @type ^`java.io.InputStream` := v1 @kind object;
  #L2ab9c4.  return @kind void;
}
procedure `int` `available`(`com.bumptech.glide.s.d` v1 @kind this) @signature `Lcom/bumptech/glide/s/d;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ab7c0.  v0:= v1.`com.bumptech.glide.s.d.f` @type ^`java.io.InputStream` @kind object;
  #L2ab7c4.  call temp:= `available`(v0) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L2ab7ca.  v0:= temp;
  #L2ab7cc.  return v0;
}
procedure `void` `close`(`com.bumptech.glide.s.d` v1 @kind this) @signature `Lcom/bumptech/glide/s/d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ab914.  v0:= v1.`com.bumptech.glide.s.d.f` @type ^`java.io.InputStream` @kind object;
  #L2ab918.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L2ab91e.  return @kind void;
}
procedure `java.io.IOException` `getException`(`com.bumptech.glide.s.d` v1 @kind this) @signature `Lcom/bumptech/glide/s/d;.getException:()Ljava/io/IOException;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ab888.  v0:= v1.`com.bumptech.glide.s.d.g` @type ^`java.io.IOException` @kind object;
  #L2ab88c.  return v0 @kind object;
}
procedure `void` `mark`(`com.bumptech.glide.s.d` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/s/d;.mark:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ab930.  v0:= v1.`com.bumptech.glide.s.d.f` @type ^`java.io.InputStream` @kind object;
  #L2ab934.  call `mark`(v0, v2) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L2ab93a.  return @kind void;
}
procedure `boolean` `markSupported`(`com.bumptech.glide.s.d` v1 @kind this) @signature `Lcom/bumptech/glide/s/d;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ab748.  v0:= v1.`com.bumptech.glide.s.d.f` @type ^`java.io.InputStream` @kind object;
  #L2ab74c.  call temp:= `markSupported`(v0) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L2ab752.  v0:= temp;
  #L2ab754.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.s.d` v1 @kind this) @signature `Lcom/bumptech/glide/s/d;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ab7e0.  v0:= v1.`com.bumptech.glide.s.d.f` @type ^`java.io.InputStream` @kind object;
  #L2ab7e4.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L2ab7ea.  v0:= temp;
  #L2ab7ec.  goto L2ab7f6;
  #L2ab7ee.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L2ab7f0.  v1.`com.bumptech.glide.s.d.g` @type ^`java.io.IOException` := v0 @kind object;
  #L2ab7f4.  v0:= -1I;
  #L2ab7f6.  return v0;
  catch `java.io.IOException` @[L2ab7e0..L2ab7ec] goto L2ab7ee;
}
procedure `int` `read`(`com.bumptech.glide.s.d` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/bumptech/glide/s/d;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ab818.  v0:= v1.`com.bumptech.glide.s.d.f` @type ^`java.io.InputStream` @kind object;
  #L2ab81c.  call temp:= `read`(v0, v2) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L2ab822.  v2:= temp;
  #L2ab824.  goto L2ab82e;
  #L2ab826.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L2ab828.  v1.`com.bumptech.glide.s.d.g` @type ^`java.io.IOException` := v2 @kind object;
  #L2ab82c.  v2:= -1I;
  #L2ab82e.  return v2;
  catch `java.io.IOException` @[L2ab818..L2ab824] goto L2ab826;
}
procedure `int` `read`(`com.bumptech.glide.s.d` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/s/d;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ab850.  v0:= v1.`com.bumptech.glide.s.d.f` @type ^`java.io.InputStream` @kind object;
  #L2ab854.  call temp:= `read`(v0, v2, v3, v4) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L2ab85a.  v2:= temp;
  #L2ab85c.  goto L2ab866;
  #L2ab85e.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L2ab860.  v1.`com.bumptech.glide.s.d.g` @type ^`java.io.IOException` := v2 @kind object;
  #L2ab864.  v2:= -1I;
  #L2ab866.  return v2;
  catch `java.io.IOException` @[L2ab850..L2ab85c] goto L2ab85e;
}
procedure `void` `release`(`com.bumptech.glide.s.d` v2 @kind this) @signature `Lcom/bumptech/glide/s/d;.release:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ab94c.  v0:= 0I;
  #L2ab94e.  v2.`com.bumptech.glide.s.d.g` @type ^`java.io.IOException` := v0 @kind object;
  #L2ab952.  v2.`com.bumptech.glide.s.d.f` @type ^`java.io.InputStream` := v0 @kind object;
  #L2ab956.  v0:= `@@com.bumptech.glide.s.d.h` @type ^`java.util.Queue` @kind object;
  #L2ab95a.  @monitorenter v0
  #L2ab95c.  v1:= `@@com.bumptech.glide.s.d.h` @type ^`java.util.Queue` @kind object;
  #L2ab960.  call temp:= `offer`(v1, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L2ab966.  @monitorexit v0
  #L2ab968.  return @kind void;
  #L2ab96a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ab96c.  @monitorexit v0
  #L2ab96e.  throw v1;
  catch `java.lang.Throwable` @[L2ab95c..L2ab96e] goto L2ab96a;
}
procedure `void` `reset`(`com.bumptech.glide.s.d` v1 @kind this) @signature `Lcom/bumptech/glide/s/d;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ab98c.  @monitorenter v1
  #L2ab98e.  v0:= v1.`com.bumptech.glide.s.d.f` @type ^`java.io.InputStream` @kind object;
  #L2ab992.  call `reset`(v0) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L2ab998.  @monitorexit v1
  #L2ab99a.  return @kind void;
  #L2ab99c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ab99e.  @monitorexit v1
  #L2ab9a0.  throw v0;
  catch `java.lang.Throwable` @[L2ab98e..L2ab998] goto L2ab99c;
}
procedure `long` `skip`(`com.bumptech.glide.s.d` v1 @kind this, `long` v2 ) @signature `Lcom/bumptech/glide/s/d;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ab8a0.  v0:= v1.`com.bumptech.glide.s.d.f` @type ^`java.io.InputStream` @kind object;
  #L2ab8a4.  call temp:= `skip`(v0, v2) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L2ab8aa.  v2:= temp @kind wide;
  #L2ab8ac.  goto L2ab8b8;
  #L2ab8ae.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L2ab8b0.  v1.`com.bumptech.glide.s.d.g` @type ^`java.io.IOException` := v2 @kind object;
  #L2ab8b4.  v2:= 0L;
  #L2ab8b8.  return v2 @kind wide;
  catch `java.io.IOException` @[L2ab8a0..L2ab8ac] goto L2ab8ae;
}
