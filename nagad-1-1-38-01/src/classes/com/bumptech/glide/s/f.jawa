record `com.bumptech.glide.s.f` @kind class @AccessFlag PUBLIC_FINAL {
}
global `double` `@@com.bumptech.glide.s.f.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/s/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2abb0c.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2abb10.  v1:= 1.0D;
  #L2abb14.  v3:= 17I;
  #L2abb18.  if v0 < v3 then goto L2abb2e;
  #L2abb1c.  v3:= 10.0D;
  #L2abb20.  v5:= 6.0D;
  #L2abb24.  call temp:= `pow`(v3, v5) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2abb2a.  v3:= temp @kind wide;
  #L2abb2c.  v1:= v1 / v3 @kind double;
  #L2abb2e.  `@@com.bumptech.glide.s.f.a` @type ^`double` := v1 @kind wide;
  #L2abb32.  return @kind void;
}
procedure `double` `getElapsedMillis`(`long` v2 ) @signature `Lcom/bumptech/glide/s/f;.getElapsedMillis:(J)D` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2abab4.  call temp:= `getLogTime`() @signature `Lcom/bumptech/glide/s/f;.getLogTime:()J` @kind static;
  #L2ababa.  v0:= temp @kind wide;
  #L2ababc.  v0:= v0 - v2 @kind long;
  #L2ababe.  v2:= (`double`) v0 @kind l2d;
  #L2abac0.  v0:= `@@com.bumptech.glide.s.f.a` @type ^`double` @kind wide;
  #L2abac4.  v2:= v2 * v0 @kind double;
  #L2abac8.  return v2 @kind wide;
}
procedure `long` `getLogTime`() @signature `Lcom/bumptech/glide/s/f;.getLogTime:()J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2abadc.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2abae0.  v1:= 17I;
  #L2abae4.  if v0 < v1 then goto L2abaf2;
  #L2abae8.  call temp:= `elapsedRealtimeNanos`() @signature `Landroid/os/SystemClock;.elapsedRealtimeNanos:()J` @kind static;
  #L2abaee.  v0:= temp @kind wide;
  #L2abaf0.  return v0 @kind wide;
  #L2abaf2.  call temp:= `uptimeMillis`() @signature `Landroid/os/SystemClock;.uptimeMillis:()J` @kind static;
  #L2abaf8.  v0:= temp @kind wide;
  #L2abafa.  return v0 @kind wide;
}
