record `com.bumptech.glide.s.h` @kind class @AccessFlag PUBLIC extends `java.io.FilterInputStream` @kind class {
  `int` `com.bumptech.glide.s.h.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.s.h` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lcom/bumptech/glide/s/h;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2abec4.  call `<init>`(v0, v1) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L2abeca.  v1:= -2147483648I;
  #L2abece.  v0.`com.bumptech.glide.s.h.f` @type ^`int` := v1;
  #L2abed2.  return @kind void;
}
procedure `long` `a`(`com.bumptech.glide.s.h` v4 @kind this, `long` v5 ) @signature `Lcom/bumptech/glide/s/h;.a:(J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2abe54.  v0:= v4.`com.bumptech.glide.s.h.f` @type ^`int`;
  #L2abe58.  if v0 != 0 then goto L2abe62;
  #L2abe5c.  v5:= -1L;
  #L2abe60.  return v5 @kind wide;
  #L2abe62.  v1:= -2147483648I;
  #L2abe66.  if v0 == v1 then goto L2abe76;
  #L2abe6a.  v1:= (`long`) v0 @kind i2l;
  #L2abe6c.  v3:= lcmp(v5, v1);
  #L2abe70.  if v3 <= 0 then goto L2abe76;
  #L2abe74.  v5:= (`long`) v0 @kind i2l;
  #L2abe76.  return v5 @kind wide;
}
procedure `void` `b`(`com.bumptech.glide.s.h` v4 @kind this, `long` v5 ) @signature `Lcom/bumptech/glide/s/h;.b:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2abf50.  v0:= v4.`com.bumptech.glide.s.h.f` @type ^`int`;
  #L2abf54.  v1:= -2147483648I;
  #L2abf58.  if v0 == v1 then goto L2abf72;
  #L2abf5c.  v1:= -1L;
  #L2abf60.  v3:= lcmp(v5, v1);
  #L2abf64.  if v3 == 0 then goto L2abf72;
  #L2abf68.  v0:= (`long`) v0 @kind i2l;
  #L2abf6a.  v0:= v0 - v5 @kind long;
  #L2abf6c.  v5:= (`int`) v0 @kind l2i;
  #L2abf6e.  v4.`com.bumptech.glide.s.h.f` @type ^`int` := v5;
  #L2abf72.  return @kind void;
}
procedure `int` `available`(`com.bumptech.glide.s.h` v2 @kind this) @signature `Lcom/bumptech/glide/s/h;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2abda8.  v0:= v2.`com.bumptech.glide.s.h.f` @type ^`int`;
  #L2abdac.  v1:= -2147483648I;
  #L2abdb0.  if v0 != v1 then goto L2abdbe;
  #L2abdb4.  call temp:= `available`(v2) @signature `Ljava/io/FilterInputStream;.available:()I` @kind super;
  #L2abdba.  v0:= temp;
  #L2abdbc.  goto L2abdce;
  #L2abdbe.  call temp:= `available`(v2) @signature `Ljava/io/FilterInputStream;.available:()I` @kind super;
  #L2abdc4.  v1:= temp;
  #L2abdc6.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2abdcc.  v0:= temp;
  #L2abdce.  return v0;
}
procedure `void` `mark`(`com.bumptech.glide.s.h` v0 @kind this, `int` v1 ) @signature `Lcom/bumptech/glide/s/h;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L2abee4.  @monitorenter v0
  #L2abee6.  call `mark`(v0, v1) @signature `Ljava/io/FilterInputStream;.mark:(I)V` @kind super;
  #L2abeec.  v0.`com.bumptech.glide.s.h.f` @type ^`int` := v1;
  #L2abef0.  @monitorexit v0
  #L2abef2.  return @kind void;
  #L2abef4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2abef6.  @monitorexit v0
  #L2abef8.  throw v1;
  catch `java.lang.Throwable` @[L2abee6..L2abef0] goto L2abef4;
}
procedure `int` `read`(`com.bumptech.glide.s.h` v7 @kind this) @signature `Lcom/bumptech/glide/s/h;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2abde0.  v0:= 1L;
  #L2abde4.  call temp:= `a`(v7, v0) @signature `Lcom/bumptech/glide/s/h;.a:(J)J` @kind direct;
  #L2abdea.  v2:= temp @kind wide;
  #L2abdec.  v4:= -1L;
  #L2abdf0.  v6:= lcmp(v2, v4);
  #L2abdf4.  if v6 != 0 then goto L2abdfc;
  #L2abdf8.  v0:= -1I;
  #L2abdfa.  return v0;
  #L2abdfc.  call temp:= `read`(v7) @signature `Ljava/io/FilterInputStream;.read:()I` @kind super;
  #L2abe02.  v2:= temp;
  #L2abe04.  call `b`(v7, v0) @signature `Lcom/bumptech/glide/s/h;.b:(J)V` @kind direct;
  #L2abe0a.  return v2;
}
procedure `int` `read`(`com.bumptech.glide.s.h` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lcom/bumptech/glide/s/h;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2abe1c.  v0:= (`long`) v5 @kind i2l;
  #L2abe1e.  call temp:= `a`(v2, v0) @signature `Lcom/bumptech/glide/s/h;.a:(J)J` @kind direct;
  #L2abe24.  v0:= temp @kind wide;
  #L2abe26.  v5:= (`int`) v0 @kind l2i;
  #L2abe28.  v0:= -1I;
  #L2abe2a.  if v5 != v0 then goto L2abe30;
  #L2abe2e.  return v0;
  #L2abe30.  call temp:= `read`(v2, v3, v4, v5) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L2abe36.  v3:= temp;
  #L2abe38.  v4:= (`long`) v3 @kind i2l;
  #L2abe3a.  call `b`(v2, v4) @signature `Lcom/bumptech/glide/s/h;.b:(J)V` @kind direct;
  #L2abe40.  return v3;
}
procedure `void` `reset`(`com.bumptech.glide.s.h` v1 @kind this) @signature `Lcom/bumptech/glide/s/h;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2abf18.  @monitorenter v1
  #L2abf1a.  call `reset`(v1) @signature `Ljava/io/FilterInputStream;.reset:()V` @kind super;
  #L2abf20.  v0:= -2147483648I;
  #L2abf24.  v1.`com.bumptech.glide.s.h.f` @type ^`int` := v0;
  #L2abf28.  @monitorexit v1
  #L2abf2a.  return @kind void;
  #L2abf2c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2abf2e.  @monitorexit v1
  #L2abf30.  throw v0;
  catch `java.lang.Throwable` @[L2abf1a..L2abf28] goto L2abf2c;
}
procedure `long` `skip`(`com.bumptech.glide.s.h` v3 @kind this, `long` v4 ) @signature `Lcom/bumptech/glide/s/h;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2abe88.  call temp:= `a`(v3, v4) @signature `Lcom/bumptech/glide/s/h;.a:(J)J` @kind direct;
  #L2abe8e.  v4:= temp @kind wide;
  #L2abe90.  v0:= -1L;
  #L2abe94.  v2:= lcmp(v4, v0);
  #L2abe98.  if v2 != 0 then goto L2abea2;
  #L2abe9c.  v4:= 0L;
  #L2abea0.  return v4 @kind wide;
  #L2abea2.  call temp:= `skip`(v3, v4) @signature `Ljava/io/FilterInputStream;.skip:(J)J` @kind super;
  #L2abea8.  v4:= temp @kind wide;
  #L2abeaa.  call `b`(v3, v4) @signature `Lcom/bumptech/glide/s/h;.b:(J)V` @kind direct;
  #L2abeb0.  return v4 @kind wide;
}
