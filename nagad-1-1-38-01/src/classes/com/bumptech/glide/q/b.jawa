record `com.bumptech.glide.q.b` @kind class @AccessFlag PUBLIC_FINAL extends `com.bumptech.glide.q.e` @kind interface, `com.bumptech.glide.q.d` @kind interface {
  `java.lang.Object` `com.bumptech.glide.q.b.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.q.e` `com.bumptech.glide.q.b.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.q.d` `com.bumptech.glide.q.b.c` @AccessFlag PRIVATE_VOLATILE;
  `com.bumptech.glide.q.d` `com.bumptech.glide.q.b.d` @AccessFlag PRIVATE_VOLATILE;
  `com.bumptech.glide.q.e$a` `com.bumptech.glide.q.b.e` @AccessFlag PRIVATE;
  `com.bumptech.glide.q.e$a` `com.bumptech.glide.q.b.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.q.b` v1 @kind this, `java.lang.Object` v2 @kind object, `com.bumptech.glide.q.e` v3 @kind object) @signature `Lcom/bumptech/glide/q/b;.<init>:(Ljava/lang/Object;Lcom/bumptech/glide/q/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2a8198.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a819e.  v0:= `@@com.bumptech.glide.q.e$a.i` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a81a2.  v1.`com.bumptech.glide.q.b.e` @type ^`com.bumptech.glide.q.e$a` := v0 @kind object;
  #L2a81a6.  v1.`com.bumptech.glide.q.b.f` @type ^`com.bumptech.glide.q.e$a` := v0 @kind object;
  #L2a81aa.  v1.`com.bumptech.glide.q.b.a` @type ^`java.lang.Object` := v2 @kind object;
  #L2a81ae.  v1.`com.bumptech.glide.q.b.b` @type ^`com.bumptech.glide.q.e` := v3 @kind object;
  #L2a81b2.  return @kind void;
}
procedure `boolean` `a`(`com.bumptech.glide.q.b` v1 @kind this) @signature `Lcom/bumptech/glide/q/b;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2a80c4.  v0:= v1.`com.bumptech.glide.q.b.b` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2a80c8.  if v0 == 0 then goto L2a80de;
  #L2a80cc.  call temp:= `canNotifyCleared`(v0, v1) @signature `Lcom/bumptech/glide/q/e;.canNotifyCleared:(Lcom/bumptech/glide/q/d;)Z` @kind interface;
  #L2a80d2.  v0:= temp;
  #L2a80d4.  if v0 == 0 then goto L2a80da;
  #L2a80d8.  goto L2a80de;
  #L2a80da.  v0:= 0I;
  #L2a80dc.  goto L2a80e0;
  #L2a80de.  v0:= 1I;
  #L2a80e0.  return v0;
}
procedure `boolean` `a`(`com.bumptech.glide.q.b` v2 @kind this, `com.bumptech.glide.q.d` v3 @kind object) @signature `Lcom/bumptech/glide/q/b;.a:(Lcom/bumptech/glide/q/d;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2a807c.  v0:= v2.`com.bumptech.glide.q.b.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a8080.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2a8086.  v0:= temp;
  #L2a8088.  if v0 != 0 then goto L2a80ae;
  #L2a808c.  v0:= v2.`com.bumptech.glide.q.b.e` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a8090.  v1:= `@@com.bumptech.glide.q.e$a.k` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a8094.  if v0 != v1 then goto L2a80aa;
  #L2a8098.  v0:= v2.`com.bumptech.glide.q.b.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a809c.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2a80a2.  v3:= temp;
  #L2a80a4.  if v3 == 0 then goto L2a80aa;
  #L2a80a8.  goto L2a80ae;
  #L2a80aa.  v3:= 0I;
  #L2a80ac.  goto L2a80b0;
  #L2a80ae.  v3:= 1I;
  #L2a80b0.  return v3;
}
procedure `boolean` `b`(`com.bumptech.glide.q.b` v1 @kind this) @signature `Lcom/bumptech/glide/q/b;.b:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2a80f4.  v0:= v1.`com.bumptech.glide.q.b.b` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2a80f8.  if v0 == 0 then goto L2a810e;
  #L2a80fc.  call temp:= `canNotifyStatusChanged`(v0, v1) @signature `Lcom/bumptech/glide/q/e;.canNotifyStatusChanged:(Lcom/bumptech/glide/q/d;)Z` @kind interface;
  #L2a8102.  v0:= temp;
  #L2a8104.  if v0 == 0 then goto L2a810a;
  #L2a8108.  goto L2a810e;
  #L2a810a.  v0:= 0I;
  #L2a810c.  goto L2a8110;
  #L2a810e.  v0:= 1I;
  #L2a8110.  return v0;
}
procedure `boolean` `c`(`com.bumptech.glide.q.b` v1 @kind this) @signature `Lcom/bumptech/glide/q/b;.c:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2a8124.  v0:= v1.`com.bumptech.glide.q.b.b` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2a8128.  if v0 == 0 then goto L2a813e;
  #L2a812c.  call temp:= `canSetImage`(v0, v1) @signature `Lcom/bumptech/glide/q/e;.canSetImage:(Lcom/bumptech/glide/q/d;)Z` @kind interface;
  #L2a8132.  v0:= temp;
  #L2a8134.  if v0 == 0 then goto L2a813a;
  #L2a8138.  goto L2a813e;
  #L2a813a.  v0:= 0I;
  #L2a813c.  goto L2a8140;
  #L2a813e.  v0:= 1I;
  #L2a8140.  return v0;
}
procedure `void` `begin`(`com.bumptech.glide.q.b` v3 @kind this) @signature `Lcom/bumptech/glide/q/b;.begin:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a81c4.  v0:= v3.`com.bumptech.glide.q.b.a` @type ^`java.lang.Object` @kind object;
  #L2a81c8.  @monitorenter v0
  #L2a81ca.  v1:= v3.`com.bumptech.glide.q.b.e` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a81ce.  v2:= `@@com.bumptech.glide.q.e$a.g` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a81d2.  if v1 == v2 then goto L2a81e8;
  #L2a81d6.  v1:= `@@com.bumptech.glide.q.e$a.g` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a81da.  v3.`com.bumptech.glide.q.b.e` @type ^`com.bumptech.glide.q.e$a` := v1 @kind object;
  #L2a81de.  v1:= v3.`com.bumptech.glide.q.b.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a81e2.  call `begin`(v1) @signature `Lcom/bumptech/glide/q/d;.begin:()V` @kind interface;
  #L2a81e8.  @monitorexit v0
  #L2a81ea.  return @kind void;
  #L2a81ec.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a81ee.  @monitorexit v0
  #L2a81f0.  throw v1;
  catch `java.lang.Throwable` @[L2a81ca..L2a81f0] goto L2a81ec;
}
procedure `boolean` `canNotifyCleared`(`com.bumptech.glide.q.b` v2 @kind this, `com.bumptech.glide.q.d` v3 @kind object) @signature `Lcom/bumptech/glide/q/b;.canNotifyCleared:(Lcom/bumptech/glide/q/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a7e14.  v0:= v2.`com.bumptech.glide.q.b.a` @type ^`java.lang.Object` @kind object;
  #L2a7e18.  @monitorenter v0
  #L2a7e1a.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/q/b;.a:()Z` @kind direct;
  #L2a7e20.  v1:= temp;
  #L2a7e22.  if v1 == 0 then goto L2a7e36;
  #L2a7e26.  call temp:= `a`(v2, v3) @signature `Lcom/bumptech/glide/q/b;.a:(Lcom/bumptech/glide/q/d;)Z` @kind direct;
  #L2a7e2c.  v3:= temp;
  #L2a7e2e.  if v3 == 0 then goto L2a7e36;
  #L2a7e32.  v3:= 1I;
  #L2a7e34.  goto L2a7e38;
  #L2a7e36.  v3:= 0I;
  #L2a7e38.  @monitorexit v0
  #L2a7e3a.  return v3;
  #L2a7e3c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a7e3e.  @monitorexit v0
  #L2a7e40.  throw v3;
  catch `java.lang.Throwable` @[L2a7e1a..L2a7e40] goto L2a7e3c;
}
procedure `boolean` `canNotifyStatusChanged`(`com.bumptech.glide.q.b` v2 @kind this, `com.bumptech.glide.q.d` v3 @kind object) @signature `Lcom/bumptech/glide/q/b;.canNotifyStatusChanged:(Lcom/bumptech/glide/q/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a7e60.  v0:= v2.`com.bumptech.glide.q.b.a` @type ^`java.lang.Object` @kind object;
  #L2a7e64.  @monitorenter v0
  #L2a7e66.  call temp:= `b`(v2) @signature `Lcom/bumptech/glide/q/b;.b:()Z` @kind direct;
  #L2a7e6c.  v1:= temp;
  #L2a7e6e.  if v1 == 0 then goto L2a7e82;
  #L2a7e72.  call temp:= `a`(v2, v3) @signature `Lcom/bumptech/glide/q/b;.a:(Lcom/bumptech/glide/q/d;)Z` @kind direct;
  #L2a7e78.  v3:= temp;
  #L2a7e7a.  if v3 == 0 then goto L2a7e82;
  #L2a7e7e.  v3:= 1I;
  #L2a7e80.  goto L2a7e84;
  #L2a7e82.  v3:= 0I;
  #L2a7e84.  @monitorexit v0
  #L2a7e86.  return v3;
  #L2a7e88.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a7e8a.  @monitorexit v0
  #L2a7e8c.  throw v3;
  catch `java.lang.Throwable` @[L2a7e66..L2a7e8c] goto L2a7e88;
}
procedure `boolean` `canSetImage`(`com.bumptech.glide.q.b` v2 @kind this, `com.bumptech.glide.q.d` v3 @kind object) @signature `Lcom/bumptech/glide/q/b;.canSetImage:(Lcom/bumptech/glide/q/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a7eac.  v0:= v2.`com.bumptech.glide.q.b.a` @type ^`java.lang.Object` @kind object;
  #L2a7eb0.  @monitorenter v0
  #L2a7eb2.  call temp:= `c`(v2) @signature `Lcom/bumptech/glide/q/b;.c:()Z` @kind direct;
  #L2a7eb8.  v1:= temp;
  #L2a7eba.  if v1 == 0 then goto L2a7ece;
  #L2a7ebe.  call temp:= `a`(v2, v3) @signature `Lcom/bumptech/glide/q/b;.a:(Lcom/bumptech/glide/q/d;)Z` @kind direct;
  #L2a7ec4.  v3:= temp;
  #L2a7ec6.  if v3 == 0 then goto L2a7ece;
  #L2a7eca.  v3:= 1I;
  #L2a7ecc.  goto L2a7ed0;
  #L2a7ece.  v3:= 0I;
  #L2a7ed0.  @monitorexit v0
  #L2a7ed2.  return v3;
  #L2a7ed4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a7ed6.  @monitorexit v0
  #L2a7ed8.  throw v3;
  catch `java.lang.Throwable` @[L2a7eb2..L2a7ed8] goto L2a7ed4;
}
procedure `void` `clear`(`com.bumptech.glide.q.b` v3 @kind this) @signature `Lcom/bumptech/glide/q/b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a8210.  v0:= v3.`com.bumptech.glide.q.b.a` @type ^`java.lang.Object` @kind object;
  #L2a8214.  @monitorenter v0
  #L2a8216.  v1:= `@@com.bumptech.glide.q.e$a.i` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a821a.  v3.`com.bumptech.glide.q.b.e` @type ^`com.bumptech.glide.q.e$a` := v1 @kind object;
  #L2a821e.  v1:= v3.`com.bumptech.glide.q.b.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a8222.  call `clear`(v1) @signature `Lcom/bumptech/glide/q/d;.clear:()V` @kind interface;
  #L2a8228.  v1:= v3.`com.bumptech.glide.q.b.f` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a822c.  v2:= `@@com.bumptech.glide.q.e$a.i` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a8230.  if v1 == v2 then goto L2a8246;
  #L2a8234.  v1:= `@@com.bumptech.glide.q.e$a.i` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a8238.  v3.`com.bumptech.glide.q.b.f` @type ^`com.bumptech.glide.q.e$a` := v1 @kind object;
  #L2a823c.  v1:= v3.`com.bumptech.glide.q.b.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a8240.  call `clear`(v1) @signature `Lcom/bumptech/glide/q/d;.clear:()V` @kind interface;
  #L2a8246.  @monitorexit v0
  #L2a8248.  return @kind void;
  #L2a824a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a824c.  @monitorexit v0
  #L2a824e.  throw v1;
  catch `java.lang.Throwable` @[L2a8216..L2a824e] goto L2a824a;
}
procedure `com.bumptech.glide.q.e` `getRoot`(`com.bumptech.glide.q.b` v2 @kind this) @signature `Lcom/bumptech/glide/q/b;.getRoot:()Lcom/bumptech/glide/q/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a8154.  v0:= v2.`com.bumptech.glide.q.b.a` @type ^`java.lang.Object` @kind object;
  #L2a8158.  @monitorenter v0
  #L2a815a.  v1:= v2.`com.bumptech.glide.q.b.b` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2a815e.  if v1 == 0 then goto L2a8170;
  #L2a8162.  v1:= v2.`com.bumptech.glide.q.b.b` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2a8166.  call temp:= `getRoot`(v1) @signature `Lcom/bumptech/glide/q/e;.getRoot:()Lcom/bumptech/glide/q/e;` @kind interface;
  #L2a816c.  v1:= temp @kind object;
  #L2a816e.  goto L2a8172;
  #L2a8170.  v1:= v2 @kind object;
  #L2a8172.  @monitorexit v0
  #L2a8174.  return v1 @kind object;
  #L2a8176.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a8178.  @monitorexit v0
  #L2a817a.  throw v1;
  catch `java.lang.Throwable` @[L2a815a..L2a817a] goto L2a8176;
}
procedure `boolean` `isAnyResourceSet`(`com.bumptech.glide.q.b` v2 @kind this) @signature `Lcom/bumptech/glide/q/b;.isAnyResourceSet:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a7ef8.  v0:= v2.`com.bumptech.glide.q.b.a` @type ^`java.lang.Object` @kind object;
  #L2a7efc.  @monitorenter v0
  #L2a7efe.  v1:= v2.`com.bumptech.glide.q.b.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a7f02.  call temp:= `isAnyResourceSet`(v1) @signature `Lcom/bumptech/glide/q/d;.isAnyResourceSet:()Z` @kind interface;
  #L2a7f08.  v1:= temp;
  #L2a7f0a.  if v1 != 0 then goto L2a7f24;
  #L2a7f0e.  v1:= v2.`com.bumptech.glide.q.b.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a7f12.  call temp:= `isAnyResourceSet`(v1) @signature `Lcom/bumptech/glide/q/d;.isAnyResourceSet:()Z` @kind interface;
  #L2a7f18.  v1:= temp;
  #L2a7f1a.  if v1 == 0 then goto L2a7f20;
  #L2a7f1e.  goto L2a7f24;
  #L2a7f20.  v1:= 0I;
  #L2a7f22.  goto L2a7f26;
  #L2a7f24.  v1:= 1I;
  #L2a7f26.  @monitorexit v0
  #L2a7f28.  return v1;
  #L2a7f2a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a7f2c.  @monitorexit v0
  #L2a7f2e.  throw v1;
  catch `java.lang.Throwable` @[L2a7efe..L2a7f2e] goto L2a7f2a;
}
procedure `boolean` `isCleared`(`com.bumptech.glide.q.b` v3 @kind this) @signature `Lcom/bumptech/glide/q/b;.isCleared:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a7f4c.  v0:= v3.`com.bumptech.glide.q.b.a` @type ^`java.lang.Object` @kind object;
  #L2a7f50.  @monitorenter v0
  #L2a7f52.  v1:= v3.`com.bumptech.glide.q.b.e` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a7f56.  v2:= `@@com.bumptech.glide.q.e$a.i` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a7f5a.  if v1 != v2 then goto L2a7f6e;
  #L2a7f5e.  v1:= v3.`com.bumptech.glide.q.b.f` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a7f62.  v2:= `@@com.bumptech.glide.q.e$a.i` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a7f66.  if v1 != v2 then goto L2a7f6e;
  #L2a7f6a.  v1:= 1I;
  #L2a7f6c.  goto L2a7f70;
  #L2a7f6e.  v1:= 0I;
  #L2a7f70.  @monitorexit v0
  #L2a7f72.  return v1;
  #L2a7f74.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a7f76.  @monitorexit v0
  #L2a7f78.  throw v1;
  catch `java.lang.Throwable` @[L2a7f52..L2a7f78] goto L2a7f74;
}
procedure `boolean` `isComplete`(`com.bumptech.glide.q.b` v3 @kind this) @signature `Lcom/bumptech/glide/q/b;.isComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a7f98.  v0:= v3.`com.bumptech.glide.q.b.a` @type ^`java.lang.Object` @kind object;
  #L2a7f9c.  @monitorenter v0
  #L2a7f9e.  v1:= v3.`com.bumptech.glide.q.b.e` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a7fa2.  v2:= `@@com.bumptech.glide.q.e$a.j` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a7fa6.  if v1 == v2 then goto L2a7fbc;
  #L2a7faa.  v1:= v3.`com.bumptech.glide.q.b.f` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a7fae.  v2:= `@@com.bumptech.glide.q.e$a.j` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a7fb2.  if v1 != v2 then goto L2a7fb8;
  #L2a7fb6.  goto L2a7fbc;
  #L2a7fb8.  v1:= 0I;
  #L2a7fba.  goto L2a7fbe;
  #L2a7fbc.  v1:= 1I;
  #L2a7fbe.  @monitorexit v0
  #L2a7fc0.  return v1;
  #L2a7fc2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a7fc4.  @monitorexit v0
  #L2a7fc6.  throw v1;
  catch `java.lang.Throwable` @[L2a7f9e..L2a7fc6] goto L2a7fc2;
}
procedure `boolean` `isEquivalentTo`(`com.bumptech.glide.q.b` v3 @kind this, `com.bumptech.glide.q.d` v4 @kind object) @signature `Lcom/bumptech/glide/q/b;.isEquivalentTo:(Lcom/bumptech/glide/q/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a7fe4.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.q.b` @kind boolean;
  #L2a7fe8.  v1:= 0I;
  #L2a7fea.  if v0 == 0 then goto L2a801c;
  #L2a7fee.  v4:= (`com.bumptech.glide.q.b`) v4 @kind object;
  #L2a7ff2.  v0:= v3.`com.bumptech.glide.q.b.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a7ff6.  v2:= v4.`com.bumptech.glide.q.b.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a7ffa.  call temp:= `isEquivalentTo`(v0, v2) @signature `Lcom/bumptech/glide/q/d;.isEquivalentTo:(Lcom/bumptech/glide/q/d;)Z` @kind interface;
  #L2a8000.  v0:= temp;
  #L2a8002.  if v0 == 0 then goto L2a801c;
  #L2a8006.  v0:= v3.`com.bumptech.glide.q.b.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a800a.  v4:= v4.`com.bumptech.glide.q.b.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a800e.  call temp:= `isEquivalentTo`(v0, v4) @signature `Lcom/bumptech/glide/q/d;.isEquivalentTo:(Lcom/bumptech/glide/q/d;)Z` @kind interface;
  #L2a8014.  v4:= temp;
  #L2a8016.  if v4 == 0 then goto L2a801c;
  #L2a801a.  v1:= 1I;
  #L2a801c.  return v1;
}
procedure `boolean` `isRunning`(`com.bumptech.glide.q.b` v3 @kind this) @signature `Lcom/bumptech/glide/q/b;.isRunning:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a8030.  v0:= v3.`com.bumptech.glide.q.b.a` @type ^`java.lang.Object` @kind object;
  #L2a8034.  @monitorenter v0
  #L2a8036.  v1:= v3.`com.bumptech.glide.q.b.e` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a803a.  v2:= `@@com.bumptech.glide.q.e$a.g` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a803e.  if v1 == v2 then goto L2a8054;
  #L2a8042.  v1:= v3.`com.bumptech.glide.q.b.f` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a8046.  v2:= `@@com.bumptech.glide.q.e$a.g` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a804a.  if v1 != v2 then goto L2a8050;
  #L2a804e.  goto L2a8054;
  #L2a8050.  v1:= 0I;
  #L2a8052.  goto L2a8056;
  #L2a8054.  v1:= 1I;
  #L2a8056.  @monitorexit v0
  #L2a8058.  return v1;
  #L2a805a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a805c.  @monitorexit v0
  #L2a805e.  throw v1;
  catch `java.lang.Throwable` @[L2a8036..L2a805e] goto L2a805a;
}
procedure `void` `onRequestFailed`(`com.bumptech.glide.q.b` v2 @kind this, `com.bumptech.glide.q.d` v3 @kind object) @signature `Lcom/bumptech/glide/q/b;.onRequestFailed:(Lcom/bumptech/glide/q/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a826c.  v0:= v2.`com.bumptech.glide.q.b.a` @type ^`java.lang.Object` @kind object;
  #L2a8270.  @monitorenter v0
  #L2a8272.  v1:= v2.`com.bumptech.glide.q.b.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a8276.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2a827c.  v3:= temp;
  #L2a827e.  if v3 != 0 then goto L2a82ac;
  #L2a8282.  v3:= `@@com.bumptech.glide.q.e$a.k` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a8286.  v2.`com.bumptech.glide.q.b.e` @type ^`com.bumptech.glide.q.e$a` := v3 @kind object;
  #L2a828a.  v3:= v2.`com.bumptech.glide.q.b.f` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a828e.  v1:= `@@com.bumptech.glide.q.e$a.g` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a8292.  if v3 == v1 then goto L2a82a8;
  #L2a8296.  v3:= `@@com.bumptech.glide.q.e$a.g` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a829a.  v2.`com.bumptech.glide.q.b.f` @type ^`com.bumptech.glide.q.e$a` := v3 @kind object;
  #L2a829e.  v3:= v2.`com.bumptech.glide.q.b.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a82a2.  call `begin`(v3) @signature `Lcom/bumptech/glide/q/d;.begin:()V` @kind interface;
  #L2a82a8.  @monitorexit v0
  #L2a82aa.  return @kind void;
  #L2a82ac.  v3:= `@@com.bumptech.glide.q.e$a.k` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a82b0.  v2.`com.bumptech.glide.q.b.f` @type ^`com.bumptech.glide.q.e$a` := v3 @kind object;
  #L2a82b4.  v3:= v2.`com.bumptech.glide.q.b.b` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2a82b8.  if v3 == 0 then goto L2a82c6;
  #L2a82bc.  v3:= v2.`com.bumptech.glide.q.b.b` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2a82c0.  call `onRequestFailed`(v3, v2) @signature `Lcom/bumptech/glide/q/e;.onRequestFailed:(Lcom/bumptech/glide/q/d;)V` @kind interface;
  #L2a82c6.  @monitorexit v0
  #L2a82c8.  return @kind void;
  #L2a82ca.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a82cc.  @monitorexit v0
  #L2a82ce.  throw v3;
  catch `java.lang.Throwable` @[L2a8272..L2a82ce] goto L2a82ca;
}
procedure `void` `onRequestSuccess`(`com.bumptech.glide.q.b` v2 @kind this, `com.bumptech.glide.q.d` v3 @kind object) @signature `Lcom/bumptech/glide/q/b;.onRequestSuccess:(Lcom/bumptech/glide/q/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a82ec.  v0:= v2.`com.bumptech.glide.q.b.a` @type ^`java.lang.Object` @kind object;
  #L2a82f0.  @monitorenter v0
  #L2a82f2.  v1:= v2.`com.bumptech.glide.q.b.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a82f6.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2a82fc.  v1:= temp;
  #L2a82fe.  if v1 == 0 then goto L2a830c;
  #L2a8302.  v3:= `@@com.bumptech.glide.q.e$a.j` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a8306.  v2.`com.bumptech.glide.q.b.e` @type ^`com.bumptech.glide.q.e$a` := v3 @kind object;
  #L2a830a.  goto L2a8324;
  #L2a830c.  v1:= v2.`com.bumptech.glide.q.b.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a8310.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2a8316.  v3:= temp;
  #L2a8318.  if v3 == 0 then goto L2a8324;
  #L2a831c.  v3:= `@@com.bumptech.glide.q.e$a.j` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a8320.  v2.`com.bumptech.glide.q.b.f` @type ^`com.bumptech.glide.q.e$a` := v3 @kind object;
  #L2a8324.  v3:= v2.`com.bumptech.glide.q.b.b` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2a8328.  if v3 == 0 then goto L2a8336;
  #L2a832c.  v3:= v2.`com.bumptech.glide.q.b.b` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2a8330.  call `onRequestSuccess`(v3, v2) @signature `Lcom/bumptech/glide/q/e;.onRequestSuccess:(Lcom/bumptech/glide/q/d;)V` @kind interface;
  #L2a8336.  @monitorexit v0
  #L2a8338.  return @kind void;
  #L2a833a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a833c.  @monitorexit v0
  #L2a833e.  throw v3;
  catch `java.lang.Throwable` @[L2a82f2..L2a833e] goto L2a833a;
}
procedure `void` `pause`(`com.bumptech.glide.q.b` v3 @kind this) @signature `Lcom/bumptech/glide/q/b;.pause:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a835c.  v0:= v3.`com.bumptech.glide.q.b.a` @type ^`java.lang.Object` @kind object;
  #L2a8360.  @monitorenter v0
  #L2a8362.  v1:= v3.`com.bumptech.glide.q.b.e` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a8366.  v2:= `@@com.bumptech.glide.q.e$a.g` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a836a.  if v1 != v2 then goto L2a8380;
  #L2a836e.  v1:= `@@com.bumptech.glide.q.e$a.h` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a8372.  v3.`com.bumptech.glide.q.b.e` @type ^`com.bumptech.glide.q.e$a` := v1 @kind object;
  #L2a8376.  v1:= v3.`com.bumptech.glide.q.b.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a837a.  call `pause`(v1) @signature `Lcom/bumptech/glide/q/d;.pause:()V` @kind interface;
  #L2a8380.  v1:= v3.`com.bumptech.glide.q.b.f` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a8384.  v2:= `@@com.bumptech.glide.q.e$a.g` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a8388.  if v1 != v2 then goto L2a839e;
  #L2a838c.  v1:= `@@com.bumptech.glide.q.e$a.h` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a8390.  v3.`com.bumptech.glide.q.b.f` @type ^`com.bumptech.glide.q.e$a` := v1 @kind object;
  #L2a8394.  v1:= v3.`com.bumptech.glide.q.b.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a8398.  call `pause`(v1) @signature `Lcom/bumptech/glide/q/d;.pause:()V` @kind interface;
  #L2a839e.  @monitorexit v0
  #L2a83a0.  return @kind void;
  #L2a83a2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a83a4.  @monitorexit v0
  #L2a83a6.  throw v1;
  catch `java.lang.Throwable` @[L2a8362..L2a83a6] goto L2a83a2;
}
procedure `void` `setRequests`(`com.bumptech.glide.q.b` v0 @kind this, `com.bumptech.glide.q.d` v1 @kind object, `com.bumptech.glide.q.d` v2 @kind object) @signature `Lcom/bumptech/glide/q/b;.setRequests:(Lcom/bumptech/glide/q/d;Lcom/bumptech/glide/q/d;)V` @AccessFlag PUBLIC {
    temp;

  #L2a83c4.  v0.`com.bumptech.glide.q.b.c` @type ^`com.bumptech.glide.q.d` := v1 @kind object;
  #L2a83c8.  v0.`com.bumptech.glide.q.b.d` @type ^`com.bumptech.glide.q.d` := v2 @kind object;
  #L2a83cc.  return @kind void;
}
