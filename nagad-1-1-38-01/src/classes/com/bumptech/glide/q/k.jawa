record `com.bumptech.glide.q.k` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.q.e` @kind interface, `com.bumptech.glide.q.d` @kind interface {
  `com.bumptech.glide.q.e` `com.bumptech.glide.q.k.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `com.bumptech.glide.q.k.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.q.d` `com.bumptech.glide.q.k.c` @AccessFlag PRIVATE_VOLATILE;
  `com.bumptech.glide.q.d` `com.bumptech.glide.q.k.d` @AccessFlag PRIVATE_VOLATILE;
  `com.bumptech.glide.q.e$a` `com.bumptech.glide.q.k.e` @AccessFlag PRIVATE;
  `com.bumptech.glide.q.e$a` `com.bumptech.glide.q.k.f` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.q.k.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.q.k` v1 @kind this, `java.lang.Object` v2 @kind object, `com.bumptech.glide.q.e` v3 @kind object) @signature `Lcom/bumptech/glide/q/k;.<init>:(Ljava/lang/Object;Lcom/bumptech/glide/q/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2aa010.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2aa016.  v0:= `@@com.bumptech.glide.q.e$a.i` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa01a.  v1.`com.bumptech.glide.q.k.e` @type ^`com.bumptech.glide.q.e$a` := v0 @kind object;
  #L2aa01e.  v1.`com.bumptech.glide.q.k.f` @type ^`com.bumptech.glide.q.e$a` := v0 @kind object;
  #L2aa022.  v1.`com.bumptech.glide.q.k.b` @type ^`java.lang.Object` := v2 @kind object;
  #L2aa026.  v1.`com.bumptech.glide.q.k.a` @type ^`com.bumptech.glide.q.e` := v3 @kind object;
  #L2aa02a.  return @kind void;
}
procedure `boolean` `a`(`com.bumptech.glide.q.k` v1 @kind this) @signature `Lcom/bumptech/glide/q/k;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2a9f3c.  v0:= v1.`com.bumptech.glide.q.k.a` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2a9f40.  if v0 == 0 then goto L2a9f56;
  #L2a9f44.  call temp:= `canNotifyCleared`(v0, v1) @signature `Lcom/bumptech/glide/q/e;.canNotifyCleared:(Lcom/bumptech/glide/q/d;)Z` @kind interface;
  #L2a9f4a.  v0:= temp;
  #L2a9f4c.  if v0 == 0 then goto L2a9f52;
  #L2a9f50.  goto L2a9f56;
  #L2a9f52.  v0:= 0I;
  #L2a9f54.  goto L2a9f58;
  #L2a9f56.  v0:= 1I;
  #L2a9f58.  return v0;
}
procedure `boolean` `b`(`com.bumptech.glide.q.k` v1 @kind this) @signature `Lcom/bumptech/glide/q/k;.b:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2a9f6c.  v0:= v1.`com.bumptech.glide.q.k.a` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2a9f70.  if v0 == 0 then goto L2a9f86;
  #L2a9f74.  call temp:= `canNotifyStatusChanged`(v0, v1) @signature `Lcom/bumptech/glide/q/e;.canNotifyStatusChanged:(Lcom/bumptech/glide/q/d;)Z` @kind interface;
  #L2a9f7a.  v0:= temp;
  #L2a9f7c.  if v0 == 0 then goto L2a9f82;
  #L2a9f80.  goto L2a9f86;
  #L2a9f82.  v0:= 0I;
  #L2a9f84.  goto L2a9f88;
  #L2a9f86.  v0:= 1I;
  #L2a9f88.  return v0;
}
procedure `boolean` `c`(`com.bumptech.glide.q.k` v1 @kind this) @signature `Lcom/bumptech/glide/q/k;.c:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2a9f9c.  v0:= v1.`com.bumptech.glide.q.k.a` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2a9fa0.  if v0 == 0 then goto L2a9fb6;
  #L2a9fa4.  call temp:= `canSetImage`(v0, v1) @signature `Lcom/bumptech/glide/q/e;.canSetImage:(Lcom/bumptech/glide/q/d;)Z` @kind interface;
  #L2a9faa.  v0:= temp;
  #L2a9fac.  if v0 == 0 then goto L2a9fb2;
  #L2a9fb0.  goto L2a9fb6;
  #L2a9fb2.  v0:= 0I;
  #L2a9fb4.  goto L2a9fb8;
  #L2a9fb6.  v0:= 1I;
  #L2a9fb8.  return v0;
}
procedure `void` `begin`(`com.bumptech.glide.q.k` v4 @kind this) @signature `Lcom/bumptech/glide/q/k;.begin:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2aa03c.  v0:= v4.`com.bumptech.glide.q.k.b` @type ^`java.lang.Object` @kind object;
  #L2aa040.  @monitorenter v0
  #L2aa042.  v1:= 1I;
  #L2aa044.  v4.`com.bumptech.glide.q.k.g` @type ^`boolean` := v1 @kind boolean;
  #L2aa048.  v1:= 0I;
  #L2aa04a.  v2:= v4.`com.bumptech.glide.q.k.e` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa04e.  v3:= `@@com.bumptech.glide.q.e$a.j` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa052.  if v2 == v3 then goto L2aa074;
  #L2aa056.  v2:= v4.`com.bumptech.glide.q.k.f` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa05a.  v3:= `@@com.bumptech.glide.q.e$a.g` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa05e.  if v2 == v3 then goto L2aa074;
  #L2aa062.  v2:= `@@com.bumptech.glide.q.e$a.g` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa066.  v4.`com.bumptech.glide.q.k.f` @type ^`com.bumptech.glide.q.e$a` := v2 @kind object;
  #L2aa06a.  v2:= v4.`com.bumptech.glide.q.k.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2aa06e.  call `begin`(v2) @signature `Lcom/bumptech/glide/q/d;.begin:()V` @kind interface;
  #L2aa074.  v2:= v4.`com.bumptech.glide.q.k.g` @type ^`boolean` @kind boolean;
  #L2aa078.  if v2 == 0 then goto L2aa09a;
  #L2aa07c.  v2:= v4.`com.bumptech.glide.q.k.e` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa080.  v3:= `@@com.bumptech.glide.q.e$a.g` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa084.  if v2 == v3 then goto L2aa09a;
  #L2aa088.  v2:= `@@com.bumptech.glide.q.e$a.g` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa08c.  v4.`com.bumptech.glide.q.k.e` @type ^`com.bumptech.glide.q.e$a` := v2 @kind object;
  #L2aa090.  v2:= v4.`com.bumptech.glide.q.k.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2aa094.  call `begin`(v2) @signature `Lcom/bumptech/glide/q/d;.begin:()V` @kind interface;
  #L2aa09a.  v4.`com.bumptech.glide.q.k.g` @type ^`boolean` := v1 @kind boolean;
  #L2aa09e.  @monitorexit v0
  #L2aa0a0.  return @kind void;
  #L2aa0a2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2aa0a4.  v4.`com.bumptech.glide.q.k.g` @type ^`boolean` := v1 @kind boolean;
  #L2aa0a8.  throw v2;
  #L2aa0aa.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2aa0ac.  @monitorexit v0
  #L2aa0ae.  throw v1;
  catch `java.lang.Throwable` @[L2aa044..L2aa048] goto L2aa0aa;
  catch `java.lang.Throwable` @[L2aa04a..L2aa09a] goto L2aa0a2;
  catch `java.lang.Throwable` @[L2aa09a..L2aa0ae] goto L2aa0aa;
}
procedure `boolean` `canNotifyCleared`(`com.bumptech.glide.q.k` v2 @kind this, `com.bumptech.glide.q.d` v3 @kind object) @signature `Lcom/bumptech/glide/q/k;.canNotifyCleared:(Lcom/bumptech/glide/q/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a9ca4.  v0:= v2.`com.bumptech.glide.q.k.b` @type ^`java.lang.Object` @kind object;
  #L2a9ca8.  @monitorenter v0
  #L2a9caa.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/q/k;.a:()Z` @kind direct;
  #L2a9cb0.  v1:= temp;
  #L2a9cb2.  if v1 == 0 then goto L2a9cd6;
  #L2a9cb6.  v1:= v2.`com.bumptech.glide.q.k.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a9cba.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2a9cc0.  v3:= temp;
  #L2a9cc2.  if v3 == 0 then goto L2a9cd6;
  #L2a9cc6.  v3:= v2.`com.bumptech.glide.q.k.e` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a9cca.  v1:= `@@com.bumptech.glide.q.e$a.h` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a9cce.  if v3 == v1 then goto L2a9cd6;
  #L2a9cd2.  v3:= 1I;
  #L2a9cd4.  goto L2a9cd8;
  #L2a9cd6.  v3:= 0I;
  #L2a9cd8.  @monitorexit v0
  #L2a9cda.  return v3;
  #L2a9cdc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a9cde.  @monitorexit v0
  #L2a9ce0.  throw v3;
  catch `java.lang.Throwable` @[L2a9caa..L2a9ce0] goto L2a9cdc;
}
procedure `boolean` `canNotifyStatusChanged`(`com.bumptech.glide.q.k` v2 @kind this, `com.bumptech.glide.q.d` v3 @kind object) @signature `Lcom/bumptech/glide/q/k;.canNotifyStatusChanged:(Lcom/bumptech/glide/q/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a9d00.  v0:= v2.`com.bumptech.glide.q.k.b` @type ^`java.lang.Object` @kind object;
  #L2a9d04.  @monitorenter v0
  #L2a9d06.  call temp:= `b`(v2) @signature `Lcom/bumptech/glide/q/k;.b:()Z` @kind direct;
  #L2a9d0c.  v1:= temp;
  #L2a9d0e.  if v1 == 0 then goto L2a9d32;
  #L2a9d12.  v1:= v2.`com.bumptech.glide.q.k.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a9d16.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2a9d1c.  v3:= temp;
  #L2a9d1e.  if v3 == 0 then goto L2a9d32;
  #L2a9d22.  call temp:= `isAnyResourceSet`(v2) @signature `Lcom/bumptech/glide/q/k;.isAnyResourceSet:()Z` @kind virtual;
  #L2a9d28.  v3:= temp;
  #L2a9d2a.  if v3 != 0 then goto L2a9d32;
  #L2a9d2e.  v3:= 1I;
  #L2a9d30.  goto L2a9d34;
  #L2a9d32.  v3:= 0I;
  #L2a9d34.  @monitorexit v0
  #L2a9d36.  return v3;
  #L2a9d38.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a9d3a.  @monitorexit v0
  #L2a9d3c.  throw v3;
  catch `java.lang.Throwable` @[L2a9d06..L2a9d3c] goto L2a9d38;
}
procedure `boolean` `canSetImage`(`com.bumptech.glide.q.k` v2 @kind this, `com.bumptech.glide.q.d` v3 @kind object) @signature `Lcom/bumptech/glide/q/k;.canSetImage:(Lcom/bumptech/glide/q/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a9d5c.  v0:= v2.`com.bumptech.glide.q.k.b` @type ^`java.lang.Object` @kind object;
  #L2a9d60.  @monitorenter v0
  #L2a9d62.  call temp:= `c`(v2) @signature `Lcom/bumptech/glide/q/k;.c:()Z` @kind direct;
  #L2a9d68.  v1:= temp;
  #L2a9d6a.  if v1 == 0 then goto L2a9d8e;
  #L2a9d6e.  v1:= v2.`com.bumptech.glide.q.k.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a9d72.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2a9d78.  v3:= temp;
  #L2a9d7a.  if v3 != 0 then goto L2a9d8a;
  #L2a9d7e.  v3:= v2.`com.bumptech.glide.q.k.e` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a9d82.  v1:= `@@com.bumptech.glide.q.e$a.j` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a9d86.  if v3 == v1 then goto L2a9d8e;
  #L2a9d8a.  v3:= 1I;
  #L2a9d8c.  goto L2a9d90;
  #L2a9d8e.  v3:= 0I;
  #L2a9d90.  @monitorexit v0
  #L2a9d92.  return v3;
  #L2a9d94.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a9d96.  @monitorexit v0
  #L2a9d98.  throw v3;
  catch `java.lang.Throwable` @[L2a9d62..L2a9d98] goto L2a9d94;
}
procedure `void` `clear`(`com.bumptech.glide.q.k` v2 @kind this) @signature `Lcom/bumptech/glide/q/k;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2aa0e0.  v0:= v2.`com.bumptech.glide.q.k.b` @type ^`java.lang.Object` @kind object;
  #L2aa0e4.  @monitorenter v0
  #L2aa0e6.  v1:= 0I;
  #L2aa0e8.  v2.`com.bumptech.glide.q.k.g` @type ^`boolean` := v1 @kind boolean;
  #L2aa0ec.  v1:= `@@com.bumptech.glide.q.e$a.i` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa0f0.  v2.`com.bumptech.glide.q.k.e` @type ^`com.bumptech.glide.q.e$a` := v1 @kind object;
  #L2aa0f4.  v1:= `@@com.bumptech.glide.q.e$a.i` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa0f8.  v2.`com.bumptech.glide.q.k.f` @type ^`com.bumptech.glide.q.e$a` := v1 @kind object;
  #L2aa0fc.  v1:= v2.`com.bumptech.glide.q.k.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2aa100.  call `clear`(v1) @signature `Lcom/bumptech/glide/q/d;.clear:()V` @kind interface;
  #L2aa106.  v1:= v2.`com.bumptech.glide.q.k.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2aa10a.  call `clear`(v1) @signature `Lcom/bumptech/glide/q/d;.clear:()V` @kind interface;
  #L2aa110.  @monitorexit v0
  #L2aa112.  return @kind void;
  #L2aa114.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2aa116.  @monitorexit v0
  #L2aa118.  throw v1;
  catch `java.lang.Throwable` @[L2aa0e8..L2aa118] goto L2aa114;
}
procedure `com.bumptech.glide.q.e` `getRoot`(`com.bumptech.glide.q.k` v2 @kind this) @signature `Lcom/bumptech/glide/q/k;.getRoot:()Lcom/bumptech/glide/q/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a9fcc.  v0:= v2.`com.bumptech.glide.q.k.b` @type ^`java.lang.Object` @kind object;
  #L2a9fd0.  @monitorenter v0
  #L2a9fd2.  v1:= v2.`com.bumptech.glide.q.k.a` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2a9fd6.  if v1 == 0 then goto L2a9fe8;
  #L2a9fda.  v1:= v2.`com.bumptech.glide.q.k.a` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2a9fde.  call temp:= `getRoot`(v1) @signature `Lcom/bumptech/glide/q/e;.getRoot:()Lcom/bumptech/glide/q/e;` @kind interface;
  #L2a9fe4.  v1:= temp @kind object;
  #L2a9fe6.  goto L2a9fea;
  #L2a9fe8.  v1:= v2 @kind object;
  #L2a9fea.  @monitorexit v0
  #L2a9fec.  return v1 @kind object;
  #L2a9fee.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a9ff0.  @monitorexit v0
  #L2a9ff2.  throw v1;
  catch `java.lang.Throwable` @[L2a9fd2..L2a9ff2] goto L2a9fee;
}
procedure `boolean` `isAnyResourceSet`(`com.bumptech.glide.q.k` v2 @kind this) @signature `Lcom/bumptech/glide/q/k;.isAnyResourceSet:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a9db8.  v0:= v2.`com.bumptech.glide.q.k.b` @type ^`java.lang.Object` @kind object;
  #L2a9dbc.  @monitorenter v0
  #L2a9dbe.  v1:= v2.`com.bumptech.glide.q.k.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a9dc2.  call temp:= `isAnyResourceSet`(v1) @signature `Lcom/bumptech/glide/q/d;.isAnyResourceSet:()Z` @kind interface;
  #L2a9dc8.  v1:= temp;
  #L2a9dca.  if v1 != 0 then goto L2a9de4;
  #L2a9dce.  v1:= v2.`com.bumptech.glide.q.k.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a9dd2.  call temp:= `isAnyResourceSet`(v1) @signature `Lcom/bumptech/glide/q/d;.isAnyResourceSet:()Z` @kind interface;
  #L2a9dd8.  v1:= temp;
  #L2a9dda.  if v1 == 0 then goto L2a9de0;
  #L2a9dde.  goto L2a9de4;
  #L2a9de0.  v1:= 0I;
  #L2a9de2.  goto L2a9de6;
  #L2a9de4.  v1:= 1I;
  #L2a9de6.  @monitorexit v0
  #L2a9de8.  return v1;
  #L2a9dea.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a9dec.  @monitorexit v0
  #L2a9dee.  throw v1;
  catch `java.lang.Throwable` @[L2a9dbe..L2a9dee] goto L2a9dea;
}
procedure `boolean` `isCleared`(`com.bumptech.glide.q.k` v3 @kind this) @signature `Lcom/bumptech/glide/q/k;.isCleared:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a9e0c.  v0:= v3.`com.bumptech.glide.q.k.b` @type ^`java.lang.Object` @kind object;
  #L2a9e10.  @monitorenter v0
  #L2a9e12.  v1:= v3.`com.bumptech.glide.q.k.e` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a9e16.  v2:= `@@com.bumptech.glide.q.e$a.i` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a9e1a.  if v1 != v2 then goto L2a9e22;
  #L2a9e1e.  v1:= 1I;
  #L2a9e20.  goto L2a9e24;
  #L2a9e22.  v1:= 0I;
  #L2a9e24.  @monitorexit v0
  #L2a9e26.  return v1;
  #L2a9e28.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a9e2a.  @monitorexit v0
  #L2a9e2c.  throw v1;
  catch `java.lang.Throwable` @[L2a9e12..L2a9e2c] goto L2a9e28;
}
procedure `boolean` `isComplete`(`com.bumptech.glide.q.k` v3 @kind this) @signature `Lcom/bumptech/glide/q/k;.isComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a9e4c.  v0:= v3.`com.bumptech.glide.q.k.b` @type ^`java.lang.Object` @kind object;
  #L2a9e50.  @monitorenter v0
  #L2a9e52.  v1:= v3.`com.bumptech.glide.q.k.e` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a9e56.  v2:= `@@com.bumptech.glide.q.e$a.j` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a9e5a.  if v1 != v2 then goto L2a9e62;
  #L2a9e5e.  v1:= 1I;
  #L2a9e60.  goto L2a9e64;
  #L2a9e62.  v1:= 0I;
  #L2a9e64.  @monitorexit v0
  #L2a9e66.  return v1;
  #L2a9e68.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a9e6a.  @monitorexit v0
  #L2a9e6c.  throw v1;
  catch `java.lang.Throwable` @[L2a9e52..L2a9e6c] goto L2a9e68;
}
procedure `boolean` `isEquivalentTo`(`com.bumptech.glide.q.k` v3 @kind this, `com.bumptech.glide.q.d` v4 @kind object) @signature `Lcom/bumptech/glide/q/k;.isEquivalentTo:(Lcom/bumptech/glide/q/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a9e8c.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.q.k` @kind boolean;
  #L2a9e90.  v1:= 0I;
  #L2a9e92.  if v0 == 0 then goto L2a9ee8;
  #L2a9e96.  v4:= (`com.bumptech.glide.q.k`) v4 @kind object;
  #L2a9e9a.  v0:= v3.`com.bumptech.glide.q.k.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a9e9e.  if v0 != 0 then goto L2a9eac;
  #L2a9ea2.  v0:= v4.`com.bumptech.glide.q.k.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a9ea6.  if v0 != 0 then goto L2a9ee8;
  #L2a9eaa.  goto L2a9ec0;
  #L2a9eac.  v0:= v3.`com.bumptech.glide.q.k.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a9eb0.  v2:= v4.`com.bumptech.glide.q.k.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a9eb4.  call temp:= `isEquivalentTo`(v0, v2) @signature `Lcom/bumptech/glide/q/d;.isEquivalentTo:(Lcom/bumptech/glide/q/d;)Z` @kind interface;
  #L2a9eba.  v0:= temp;
  #L2a9ebc.  if v0 == 0 then goto L2a9ee8;
  #L2a9ec0.  v0:= v3.`com.bumptech.glide.q.k.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a9ec4.  if v0 != 0 then goto L2a9ed2;
  #L2a9ec8.  v4:= v4.`com.bumptech.glide.q.k.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a9ecc.  if v4 != 0 then goto L2a9ee8;
  #L2a9ed0.  goto L2a9ee6;
  #L2a9ed2.  v0:= v3.`com.bumptech.glide.q.k.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a9ed6.  v4:= v4.`com.bumptech.glide.q.k.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2a9eda.  call temp:= `isEquivalentTo`(v0, v4) @signature `Lcom/bumptech/glide/q/d;.isEquivalentTo:(Lcom/bumptech/glide/q/d;)Z` @kind interface;
  #L2a9ee0.  v4:= temp;
  #L2a9ee2.  if v4 == 0 then goto L2a9ee8;
  #L2a9ee6.  v1:= 1I;
  #L2a9ee8.  return v1;
}
procedure `boolean` `isRunning`(`com.bumptech.glide.q.k` v3 @kind this) @signature `Lcom/bumptech/glide/q/k;.isRunning:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a9efc.  v0:= v3.`com.bumptech.glide.q.k.b` @type ^`java.lang.Object` @kind object;
  #L2a9f00.  @monitorenter v0
  #L2a9f02.  v1:= v3.`com.bumptech.glide.q.k.e` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a9f06.  v2:= `@@com.bumptech.glide.q.e$a.g` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2a9f0a.  if v1 != v2 then goto L2a9f12;
  #L2a9f0e.  v1:= 1I;
  #L2a9f10.  goto L2a9f14;
  #L2a9f12.  v1:= 0I;
  #L2a9f14.  @monitorexit v0
  #L2a9f16.  return v1;
  #L2a9f18.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a9f1a.  @monitorexit v0
  #L2a9f1c.  throw v1;
  catch `java.lang.Throwable` @[L2a9f02..L2a9f1c] goto L2a9f18;
}
procedure `void` `onRequestFailed`(`com.bumptech.glide.q.k` v2 @kind this, `com.bumptech.glide.q.d` v3 @kind object) @signature `Lcom/bumptech/glide/q/k;.onRequestFailed:(Lcom/bumptech/glide/q/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2aa138.  v0:= v2.`com.bumptech.glide.q.k.b` @type ^`java.lang.Object` @kind object;
  #L2aa13c.  @monitorenter v0
  #L2aa13e.  v1:= v2.`com.bumptech.glide.q.k.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2aa142.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2aa148.  v3:= temp;
  #L2aa14a.  if v3 != 0 then goto L2aa15a;
  #L2aa14e.  v3:= `@@com.bumptech.glide.q.e$a.k` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa152.  v2.`com.bumptech.glide.q.k.f` @type ^`com.bumptech.glide.q.e$a` := v3 @kind object;
  #L2aa156.  @monitorexit v0
  #L2aa158.  return @kind void;
  #L2aa15a.  v3:= `@@com.bumptech.glide.q.e$a.k` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa15e.  v2.`com.bumptech.glide.q.k.e` @type ^`com.bumptech.glide.q.e$a` := v3 @kind object;
  #L2aa162.  v3:= v2.`com.bumptech.glide.q.k.a` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2aa166.  if v3 == 0 then goto L2aa174;
  #L2aa16a.  v3:= v2.`com.bumptech.glide.q.k.a` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2aa16e.  call `onRequestFailed`(v3, v2) @signature `Lcom/bumptech/glide/q/e;.onRequestFailed:(Lcom/bumptech/glide/q/d;)V` @kind interface;
  #L2aa174.  @monitorexit v0
  #L2aa176.  return @kind void;
  #L2aa178.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2aa17a.  @monitorexit v0
  #L2aa17c.  throw v3;
  catch `java.lang.Throwable` @[L2aa13e..L2aa17c] goto L2aa178;
}
procedure `void` `onRequestSuccess`(`com.bumptech.glide.q.k` v2 @kind this, `com.bumptech.glide.q.d` v3 @kind object) @signature `Lcom/bumptech/glide/q/k;.onRequestSuccess:(Lcom/bumptech/glide/q/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2aa19c.  v0:= v2.`com.bumptech.glide.q.k.b` @type ^`java.lang.Object` @kind object;
  #L2aa1a0.  @monitorenter v0
  #L2aa1a2.  v1:= v2.`com.bumptech.glide.q.k.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2aa1a6.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2aa1ac.  v3:= temp;
  #L2aa1ae.  if v3 == 0 then goto L2aa1be;
  #L2aa1b2.  v3:= `@@com.bumptech.glide.q.e$a.j` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa1b6.  v2.`com.bumptech.glide.q.k.f` @type ^`com.bumptech.glide.q.e$a` := v3 @kind object;
  #L2aa1ba.  @monitorexit v0
  #L2aa1bc.  return @kind void;
  #L2aa1be.  v3:= `@@com.bumptech.glide.q.e$a.j` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa1c2.  v2.`com.bumptech.glide.q.k.e` @type ^`com.bumptech.glide.q.e$a` := v3 @kind object;
  #L2aa1c6.  v3:= v2.`com.bumptech.glide.q.k.a` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2aa1ca.  if v3 == 0 then goto L2aa1d8;
  #L2aa1ce.  v3:= v2.`com.bumptech.glide.q.k.a` @type ^`com.bumptech.glide.q.e` @kind object;
  #L2aa1d2.  call `onRequestSuccess`(v3, v2) @signature `Lcom/bumptech/glide/q/e;.onRequestSuccess:(Lcom/bumptech/glide/q/d;)V` @kind interface;
  #L2aa1d8.  v3:= v2.`com.bumptech.glide.q.k.f` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa1dc.  call temp:= `a`(v3) @signature `Lcom/bumptech/glide/q/e$a;.a:()Z` @kind virtual;
  #L2aa1e2.  v3:= temp;
  #L2aa1e4.  if v3 != 0 then goto L2aa1f2;
  #L2aa1e8.  v3:= v2.`com.bumptech.glide.q.k.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2aa1ec.  call `clear`(v3) @signature `Lcom/bumptech/glide/q/d;.clear:()V` @kind interface;
  #L2aa1f2.  @monitorexit v0
  #L2aa1f4.  return @kind void;
  #L2aa1f6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2aa1f8.  @monitorexit v0
  #L2aa1fa.  throw v3;
  catch `java.lang.Throwable` @[L2aa1a2..L2aa1fa] goto L2aa1f6;
}
procedure `void` `pause`(`com.bumptech.glide.q.k` v2 @kind this) @signature `Lcom/bumptech/glide/q/k;.pause:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2aa218.  v0:= v2.`com.bumptech.glide.q.k.b` @type ^`java.lang.Object` @kind object;
  #L2aa21c.  @monitorenter v0
  #L2aa21e.  v1:= v2.`com.bumptech.glide.q.k.f` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa222.  call temp:= `a`(v1) @signature `Lcom/bumptech/glide/q/e$a;.a:()Z` @kind virtual;
  #L2aa228.  v1:= temp;
  #L2aa22a.  if v1 != 0 then goto L2aa240;
  #L2aa22e.  v1:= `@@com.bumptech.glide.q.e$a.h` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa232.  v2.`com.bumptech.glide.q.k.f` @type ^`com.bumptech.glide.q.e$a` := v1 @kind object;
  #L2aa236.  v1:= v2.`com.bumptech.glide.q.k.d` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2aa23a.  call `pause`(v1) @signature `Lcom/bumptech/glide/q/d;.pause:()V` @kind interface;
  #L2aa240.  v1:= v2.`com.bumptech.glide.q.k.e` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa244.  call temp:= `a`(v1) @signature `Lcom/bumptech/glide/q/e$a;.a:()Z` @kind virtual;
  #L2aa24a.  v1:= temp;
  #L2aa24c.  if v1 != 0 then goto L2aa262;
  #L2aa250.  v1:= `@@com.bumptech.glide.q.e$a.h` @type ^`com.bumptech.glide.q.e$a` @kind object;
  #L2aa254.  v2.`com.bumptech.glide.q.k.e` @type ^`com.bumptech.glide.q.e$a` := v1 @kind object;
  #L2aa258.  v1:= v2.`com.bumptech.glide.q.k.c` @type ^`com.bumptech.glide.q.d` @kind object;
  #L2aa25c.  call `pause`(v1) @signature `Lcom/bumptech/glide/q/d;.pause:()V` @kind interface;
  #L2aa262.  @monitorexit v0
  #L2aa264.  return @kind void;
  #L2aa266.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2aa268.  @monitorexit v0
  #L2aa26a.  throw v1;
  catch `java.lang.Throwable` @[L2aa21e..L2aa26a] goto L2aa266;
}
procedure `void` `setRequests`(`com.bumptech.glide.q.k` v0 @kind this, `com.bumptech.glide.q.d` v1 @kind object, `com.bumptech.glide.q.d` v2 @kind object) @signature `Lcom/bumptech/glide/q/k;.setRequests:(Lcom/bumptech/glide/q/d;Lcom/bumptech/glide/q/d;)V` @AccessFlag PUBLIC {
    temp;

  #L2aa288.  v0.`com.bumptech.glide.q.k.c` @type ^`com.bumptech.glide.q.d` := v1 @kind object;
  #L2aa28c.  v0.`com.bumptech.glide.q.k.d` @type ^`com.bumptech.glide.q.d` := v2 @kind object;
  #L2aa290.  return @kind void;
}
