record `com.bumptech.glide.q.a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.lang.Cloneable` @kind interface {
  `boolean` `com.bumptech.glide.q.a.A` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.q.a.B` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.q.a.C` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.q.a.D` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.q.a.E` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.q.a.f` @AccessFlag PRIVATE;
  `float` `com.bumptech.glide.q.a.g` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.j` `com.bumptech.glide.q.a.h` @AccessFlag PRIVATE;
  `com.bumptech.glide.g` `com.bumptech.glide.q.a.i` @AccessFlag PRIVATE;
  `android.graphics.drawable.Drawable` `com.bumptech.glide.q.a.j` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.q.a.k` @AccessFlag PRIVATE;
  `android.graphics.drawable.Drawable` `com.bumptech.glide.q.a.l` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.q.a.m` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.q.a.n` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.q.a.o` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.q.a.p` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.f` `com.bumptech.glide.q.a.q` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.q.a.r` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.q.a.s` @AccessFlag PRIVATE;
  `android.graphics.drawable.Drawable` `com.bumptech.glide.q.a.t` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.q.a.u` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.h` `com.bumptech.glide.q.a.v` @AccessFlag PRIVATE;
  `java.util.Map` `com.bumptech.glide.q.a.w` @AccessFlag PRIVATE;
  `java.lang.Class` `com.bumptech.glide.q.a.x` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.q.a.y` @AccessFlag PRIVATE;
  `android.content.res.Resources$Theme` `com.bumptech.glide.q.a.z` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.q.a` v2 @kind this) @signature `Lcom/bumptech/glide/q/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2a7d9c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a7da2.  v0:= 1.0F;
  #L2a7da6.  v2.`com.bumptech.glide.q.a.g` @type ^`float` := v0;
  #L2a7daa.  v0:= `@@com.bumptech.glide.load.engine.j.c` @type ^`com.bumptech.glide.load.engine.j` @kind object;
  #L2a7dae.  v2.`com.bumptech.glide.q.a.h` @type ^`com.bumptech.glide.load.engine.j` := v0 @kind object;
  #L2a7db2.  v0:= `@@com.bumptech.glide.g.h` @type ^`com.bumptech.glide.g` @kind object;
  #L2a7db6.  v2.`com.bumptech.glide.q.a.i` @type ^`com.bumptech.glide.g` := v0 @kind object;
  #L2a7dba.  v0:= 1I;
  #L2a7dbc.  v2.`com.bumptech.glide.q.a.n` @type ^`boolean` := v0 @kind boolean;
  #L2a7dc0.  v1:= -1I;
  #L2a7dc2.  v2.`com.bumptech.glide.q.a.o` @type ^`int` := v1;
  #L2a7dc6.  v2.`com.bumptech.glide.q.a.p` @type ^`int` := v1;
  #L2a7dca.  call temp:= `obtain`() @signature `Lcom/bumptech/glide/r/a;.obtain:()Lcom/bumptech/glide/r/a;` @kind static;
  #L2a7dd0.  v1:= temp @kind object;
  #L2a7dd2.  v2.`com.bumptech.glide.q.a.q` @type ^`com.bumptech.glide.load.f` := v1 @kind object;
  #L2a7dd6.  v2.`com.bumptech.glide.q.a.s` @type ^`boolean` := v0 @kind boolean;
  #L2a7dda.  v1:= new `com.bumptech.glide.load.h`;
  #L2a7dde.  call `<init>`(v1) @signature `Lcom/bumptech/glide/load/h;.<init>:()V` @kind direct;
  #L2a7de4.  v2.`com.bumptech.glide.q.a.v` @type ^`com.bumptech.glide.load.h` := v1 @kind object;
  #L2a7de8.  v1:= new `com.bumptech.glide.s.b`;
  #L2a7dec.  call `<init>`(v1) @signature `Lcom/bumptech/glide/s/b;.<init>:()V` @kind direct;
  #L2a7df2.  v2.`com.bumptech.glide.q.a.w` @type ^`java.util.Map` := v1 @kind object;
  #L2a7df6.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L2a7dfa.  v2.`com.bumptech.glide.q.a.x` @type ^`java.lang.Class` := v1 @kind object;
  #L2a7dfe.  v2.`com.bumptech.glide.q.a.D` @type ^`boolean` := v0 @kind boolean;
  #L2a7e02.  return @kind void;
}
procedure `com.bumptech.glide.q.a` `a`(`com.bumptech.glide.q.a` v0 @kind this, `com.bumptech.glide.load.resource.bitmap.k` v1 @kind object, `com.bumptech.glide.load.l` v2 @kind object, `boolean` v3 ) @signature `Lcom/bumptech/glide/q/a;.a:(Lcom/bumptech/glide/load/resource/bitmap/k;Lcom/bumptech/glide/load/l;Z)Lcom/bumptech/glide/q/a;` @AccessFlag PRIVATE {
    temp;

  #L2a7864.  if v3 == 0 then goto L2a7872;
  #L2a7868.  call temp:= `b`(v0, v1, v2) @signature `Lcom/bumptech/glide/q/a;.b:(Lcom/bumptech/glide/load/resource/bitmap/k;Lcom/bumptech/glide/load/l;)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a786e.  v1:= temp @kind object;
  #L2a7870.  goto L2a787a;
  #L2a7872.  call temp:= `a`(v0, v1, v2) @signature `Lcom/bumptech/glide/q/a;.a:(Lcom/bumptech/glide/load/resource/bitmap/k;Lcom/bumptech/glide/load/l;)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7878.  v1:= temp @kind object;
  #L2a787a.  v2:= 1I;
  #L2a787c.  v1.`com.bumptech.glide.q.a.D` @type ^`boolean` := v2 @kind boolean;
  #L2a7880.  return v1 @kind object;
}
procedure `boolean` `a`(`com.bumptech.glide.q.a` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/q/a;.a:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2a7078.  v0:= v1.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a707c.  call temp:= `a`(v0, v2) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a7082.  v2:= temp;
  #L2a7084.  return v2;
}
procedure `boolean` `a`(`int` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @AccessFlag PRIVATE_STATIC {
    temp;

  #L2a7098.  v0:= v0 ^& v1 @kind int;
  #L2a709a.  if v0 == 0 then goto L2a70a2;
  #L2a709e.  v0:= 1I;
  #L2a70a0.  goto L2a70a4;
  #L2a70a2.  v0:= 0I;
  #L2a70a4.  return v0;
}
procedure `com.bumptech.glide.q.a` `b`(`com.bumptech.glide.q.a` v0 @kind this) @signature `Lcom/bumptech/glide/q/a;.b:()Lcom/bumptech/glide/q/a;` @AccessFlag PRIVATE {
    temp;

  #L2a7894.  return v0 @kind object;
}
procedure `com.bumptech.glide.q.a` `c`(`com.bumptech.glide.q.a` v2 @kind this) @signature `Lcom/bumptech/glide/q/a;.c:()Lcom/bumptech/glide/q/a;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2a78a8.  v0:= v2.`com.bumptech.glide.q.a.y` @type ^`boolean` @kind boolean;
  #L2a78ac.  if v0 != 0 then goto L2a78b8;
  #L2a78b0.  call temp:= `b`(v2) @signature `Lcom/bumptech/glide/q/a;.b:()Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a78b6.  return v2 @kind object;
  #L2a78b8.  v0:= new `java.lang.IllegalStateException`;
  #L2a78bc.  v1:= "You cannot modify locked T, consider clone()" @kind object;
  #L2a78c0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a78c6.  throw v0;
}
procedure `com.bumptech.glide.q.a` `c`(`com.bumptech.glide.q.a` v1 @kind this, `com.bumptech.glide.load.resource.bitmap.k` v2 @kind object, `com.bumptech.glide.load.l` v3 @kind object) @signature `Lcom/bumptech/glide/q/a;.c:(Lcom/bumptech/glide/load/resource/bitmap/k;Lcom/bumptech/glide/load/l;)Lcom/bumptech/glide/q/a;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2a7724.  v0:= 0I;
  #L2a7726.  call temp:= `a`(v1, v2, v3, v0) @signature `Lcom/bumptech/glide/q/a;.a:(Lcom/bumptech/glide/load/resource/bitmap/k;Lcom/bumptech/glide/load/l;Z)Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a772c.  v2:= temp @kind object;
  #L2a772e.  return v2 @kind object;
}
procedure `com.bumptech.glide.q.a` `a`(`com.bumptech.glide.q.a` v2 @kind this, `com.bumptech.glide.load.l` v3 @kind object, `boolean` v4 ) @signature `Lcom/bumptech/glide/q/a;.a:(Lcom/bumptech/glide/load/l;Z)Lcom/bumptech/glide/q/a;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2a7a38.  v0:= v2.`com.bumptech.glide.q.a.A` @type ^`boolean` @kind boolean;
  #L2a7a3c.  if v0 == 0 then goto L2a7a52;
  #L2a7a40.  call temp:= `clone`(v2) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7a46.  v0:= temp @kind object;
  #L2a7a48.  call temp:= `a`(v0, v3, v4) @signature `Lcom/bumptech/glide/q/a;.a:(Lcom/bumptech/glide/load/l;Z)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7a4e.  v3:= temp @kind object;
  #L2a7a50.  return v3 @kind object;
  #L2a7a52.  v0:= new `com.bumptech.glide.load.resource.bitmap.n`;
  #L2a7a56.  call `<init>`(v0, v3, v4) @signature `Lcom/bumptech/glide/load/resource/bitmap/n;.<init>:(Lcom/bumptech/glide/load/l;Z)V` @kind direct;
  #L2a7a5c.  v1:= constclass @type ^`android.graphics.Bitmap` @kind object;
  #L2a7a60.  call temp:= `a`(v2, v1, v3, v4) @signature `Lcom/bumptech/glide/q/a;.a:(Ljava/lang/Class;Lcom/bumptech/glide/load/l;Z)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7a66.  v1:= constclass @type ^`android.graphics.drawable.Drawable` @kind object;
  #L2a7a6a.  call temp:= `a`(v2, v1, v0, v4) @signature `Lcom/bumptech/glide/q/a;.a:(Ljava/lang/Class;Lcom/bumptech/glide/load/l;Z)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7a70.  v1:= constclass @type ^`android.graphics.drawable.BitmapDrawable` @kind object;
  #L2a7a74.  call temp:= `asBitmapDrawable`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/n;.asBitmapDrawable:()Lcom/bumptech/glide/load/l;` @kind virtual;
  #L2a7a7a.  call temp:= `a`(v2, v1, v0, v4) @signature `Lcom/bumptech/glide/q/a;.a:(Ljava/lang/Class;Lcom/bumptech/glide/load/l;Z)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7a80.  v0:= constclass @type ^`com.bumptech.glide.load.o.g.c` @kind object;
  #L2a7a84.  v1:= new `com.bumptech.glide.load.o.g.f`;
  #L2a7a88.  call `<init>`(v1, v3) @signature `Lcom/bumptech/glide/load/o/g/f;.<init>:(Lcom/bumptech/glide/load/l;)V` @kind direct;
  #L2a7a8e.  call temp:= `a`(v2, v0, v1, v4) @signature `Lcom/bumptech/glide/q/a;.a:(Ljava/lang/Class;Lcom/bumptech/glide/load/l;Z)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7a94.  call temp:= `c`(v2) @signature `Lcom/bumptech/glide/q/a;.c:()Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a7a9a.  return v2 @kind object;
}
procedure `com.bumptech.glide.q.a` `a`(`com.bumptech.glide.q.a` v1 @kind this, `com.bumptech.glide.load.resource.bitmap.k` v2 @kind object, `com.bumptech.glide.load.l` v3 @kind object) @signature `Lcom/bumptech/glide/q/a;.a:(Lcom/bumptech/glide/load/resource/bitmap/k;Lcom/bumptech/glide/load/l;)Lcom/bumptech/glide/q/a;` @AccessFlag FINAL {
    temp;
    v0;

  #L2a7740.  v0:= v1.`com.bumptech.glide.q.a.A` @type ^`boolean` @kind boolean;
  #L2a7744.  if v0 == 0 then goto L2a775a;
  #L2a7748.  call temp:= `clone`(v1) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a774e.  v0:= temp @kind object;
  #L2a7750.  call temp:= `a`(v0, v2, v3) @signature `Lcom/bumptech/glide/q/a;.a:(Lcom/bumptech/glide/load/resource/bitmap/k;Lcom/bumptech/glide/load/l;)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7756.  v2:= temp @kind object;
  #L2a7758.  return v2 @kind object;
  #L2a775a.  call temp:= `downsample`(v1, v2) @signature `Lcom/bumptech/glide/q/a;.downsample:(Lcom/bumptech/glide/load/resource/bitmap/k;)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7760.  v2:= 0I;
  #L2a7762.  call temp:= `a`(v1, v3, v2) @signature `Lcom/bumptech/glide/q/a;.a:(Lcom/bumptech/glide/load/l;Z)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7768.  v2:= temp @kind object;
  #L2a776a.  return v2 @kind object;
}
procedure `com.bumptech.glide.q.a` `a`(`com.bumptech.glide.q.a` v1 @kind this, `java.lang.Class` v2 @kind object, `com.bumptech.glide.load.l` v3 @kind object, `boolean` v4 ) @signature `Lcom/bumptech/glide/q/a;.a:(Ljava/lang/Class;Lcom/bumptech/glide/load/l;Z)Lcom/bumptech/glide/q/a;` @AccessFlag  {
    temp;
    v0;

  #L2a7ae8.  v0:= v1.`com.bumptech.glide.q.a.A` @type ^`boolean` @kind boolean;
  #L2a7aec.  if v0 == 0 then goto L2a7b02;
  #L2a7af0.  call temp:= `clone`(v1) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7af6.  v0:= temp @kind object;
  #L2a7af8.  call temp:= `a`(v0, v2, v3, v4) @signature `Lcom/bumptech/glide/q/a;.a:(Ljava/lang/Class;Lcom/bumptech/glide/load/l;Z)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7afe.  v2:= temp @kind object;
  #L2a7b00.  return v2 @kind object;
  #L2a7b02.  call temp:= `checkNotNull`(v2) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2a7b08.  call temp:= `checkNotNull`(v3) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2a7b0e.  v0:= v1.`com.bumptech.glide.q.a.w` @type ^`java.util.Map` @kind object;
  #L2a7b12.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2a7b18.  v2:= v1.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a7b1c.  v2:= v2 ^| 2048;
  #L2a7b20.  v1.`com.bumptech.glide.q.a.f` @type ^`int` := v2;
  #L2a7b24.  v2:= 1I;
  #L2a7b26.  v1.`com.bumptech.glide.q.a.s` @type ^`boolean` := v2 @kind boolean;
  #L2a7b2a.  v3:= v1.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a7b2e.  v0:= 65536I;
  #L2a7b32.  v3:= v3 ^| v0 @kind int;
  #L2a7b34.  v1.`com.bumptech.glide.q.a.f` @type ^`int` := v3;
  #L2a7b38.  v3:= 0I;
  #L2a7b3a.  v1.`com.bumptech.glide.q.a.D` @type ^`boolean` := v3 @kind boolean;
  #L2a7b3e.  if v4 == 0 then goto L2a7b54;
  #L2a7b42.  v3:= v1.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a7b46.  v4:= 131072I;
  #L2a7b4a.  v3:= v3 ^| v4 @kind int;
  #L2a7b4c.  v1.`com.bumptech.glide.q.a.f` @type ^`int` := v3;
  #L2a7b50.  v1.`com.bumptech.glide.q.a.r` @type ^`boolean` := v2 @kind boolean;
  #L2a7b54.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/q/a;.c:()Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a7b5a.  return v1 @kind object;
}
procedure `boolean` `a`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.a:()Z` @AccessFlag  {
    temp;
    v0;

  #L2a7060.  v0:= v1.`com.bumptech.glide.q.a.D` @type ^`boolean` @kind boolean;
  #L2a7064.  return v0;
}
procedure `com.bumptech.glide.q.a` `apply`(`com.bumptech.glide.q.a` v4 @kind this, `com.bumptech.glide.q.a` v5 @kind object) @signature `Lcom/bumptech/glide/q/a;.apply:(Lcom/bumptech/glide/q/a;)Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2a718c.  v0:= v4.`com.bumptech.glide.q.a.A` @type ^`boolean` @kind boolean;
  #L2a7190.  if v0 == 0 then goto L2a71a6;
  #L2a7194.  call temp:= `clone`(v4) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a719a.  v0:= temp @kind object;
  #L2a719c.  call temp:= `apply`(v0, v5) @signature `Lcom/bumptech/glide/q/a;.apply:(Lcom/bumptech/glide/q/a;)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a71a2.  v5:= temp @kind object;
  #L2a71a4.  return v5 @kind object;
  #L2a71a6.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a71aa.  v1:= 2I;
  #L2a71ac.  call temp:= `a`(v0, v1) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a71b2.  v0:= temp;
  #L2a71b4.  if v0 == 0 then goto L2a71c0;
  #L2a71b8.  v0:= v5.`com.bumptech.glide.q.a.g` @type ^`float`;
  #L2a71bc.  v4.`com.bumptech.glide.q.a.g` @type ^`float` := v0;
  #L2a71c0.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a71c4.  v1:= 262144I;
  #L2a71c8.  call temp:= `a`(v0, v1) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a71ce.  v0:= temp;
  #L2a71d0.  if v0 == 0 then goto L2a71dc;
  #L2a71d4.  v0:= v5.`com.bumptech.glide.q.a.B` @type ^`boolean` @kind boolean;
  #L2a71d8.  v4.`com.bumptech.glide.q.a.B` @type ^`boolean` := v0 @kind boolean;
  #L2a71dc.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a71e0.  v1:= 1048576I;
  #L2a71e4.  call temp:= `a`(v0, v1) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a71ea.  v0:= temp;
  #L2a71ec.  if v0 == 0 then goto L2a71f8;
  #L2a71f0.  v0:= v5.`com.bumptech.glide.q.a.E` @type ^`boolean` @kind boolean;
  #L2a71f4.  v4.`com.bumptech.glide.q.a.E` @type ^`boolean` := v0 @kind boolean;
  #L2a71f8.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a71fc.  v1:= 4I;
  #L2a71fe.  call temp:= `a`(v0, v1) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a7204.  v0:= temp;
  #L2a7206.  if v0 == 0 then goto L2a7212;
  #L2a720a.  v0:= v5.`com.bumptech.glide.q.a.h` @type ^`com.bumptech.glide.load.engine.j` @kind object;
  #L2a720e.  v4.`com.bumptech.glide.q.a.h` @type ^`com.bumptech.glide.load.engine.j` := v0 @kind object;
  #L2a7212.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a7216.  v1:= 8I;
  #L2a721a.  call temp:= `a`(v0, v1) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a7220.  v0:= temp;
  #L2a7222.  if v0 == 0 then goto L2a722e;
  #L2a7226.  v0:= v5.`com.bumptech.glide.q.a.i` @type ^`com.bumptech.glide.g` @kind object;
  #L2a722a.  v4.`com.bumptech.glide.q.a.i` @type ^`com.bumptech.glide.g` := v0 @kind object;
  #L2a722e.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a7232.  v1:= 16I;
  #L2a7236.  call temp:= `a`(v0, v1) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a723c.  v0:= temp;
  #L2a723e.  v1:= 0I;
  #L2a7240.  if v0 == 0 then goto L2a725c;
  #L2a7244.  v0:= v5.`com.bumptech.glide.q.a.j` @type ^`android.graphics.drawable.Drawable` @kind object;
  #L2a7248.  v4.`com.bumptech.glide.q.a.j` @type ^`android.graphics.drawable.Drawable` := v0 @kind object;
  #L2a724c.  v4.`com.bumptech.glide.q.a.k` @type ^`int` := v1;
  #L2a7250.  v0:= v4.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a7254.  v0:= v0 ^& -33;
  #L2a7258.  v4.`com.bumptech.glide.q.a.f` @type ^`int` := v0;
  #L2a725c.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a7260.  v2:= 32I;
  #L2a7264.  call temp:= `a`(v0, v2) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a726a.  v0:= temp;
  #L2a726c.  v2:= 0I;
  #L2a726e.  if v0 == 0 then goto L2a728a;
  #L2a7272.  v0:= v5.`com.bumptech.glide.q.a.k` @type ^`int`;
  #L2a7276.  v4.`com.bumptech.glide.q.a.k` @type ^`int` := v0;
  #L2a727a.  v4.`com.bumptech.glide.q.a.j` @type ^`android.graphics.drawable.Drawable` := v2 @kind object;
  #L2a727e.  v0:= v4.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a7282.  v0:= v0 ^& -17;
  #L2a7286.  v4.`com.bumptech.glide.q.a.f` @type ^`int` := v0;
  #L2a728a.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a728e.  v3:= 64I;
  #L2a7292.  call temp:= `a`(v0, v3) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a7298.  v0:= temp;
  #L2a729a.  if v0 == 0 then goto L2a72b6;
  #L2a729e.  v0:= v5.`com.bumptech.glide.q.a.l` @type ^`android.graphics.drawable.Drawable` @kind object;
  #L2a72a2.  v4.`com.bumptech.glide.q.a.l` @type ^`android.graphics.drawable.Drawable` := v0 @kind object;
  #L2a72a6.  v4.`com.bumptech.glide.q.a.m` @type ^`int` := v1;
  #L2a72aa.  v0:= v4.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a72ae.  v0:= v0 ^& -129;
  #L2a72b2.  v4.`com.bumptech.glide.q.a.f` @type ^`int` := v0;
  #L2a72b6.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a72ba.  v3:= 128I;
  #L2a72be.  call temp:= `a`(v0, v3) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a72c4.  v0:= temp;
  #L2a72c6.  if v0 == 0 then goto L2a72e2;
  #L2a72ca.  v0:= v5.`com.bumptech.glide.q.a.m` @type ^`int`;
  #L2a72ce.  v4.`com.bumptech.glide.q.a.m` @type ^`int` := v0;
  #L2a72d2.  v4.`com.bumptech.glide.q.a.l` @type ^`android.graphics.drawable.Drawable` := v2 @kind object;
  #L2a72d6.  v0:= v4.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a72da.  v0:= v0 ^& -65;
  #L2a72de.  v4.`com.bumptech.glide.q.a.f` @type ^`int` := v0;
  #L2a72e2.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a72e6.  v3:= 256I;
  #L2a72ea.  call temp:= `a`(v0, v3) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a72f0.  v0:= temp;
  #L2a72f2.  if v0 == 0 then goto L2a72fe;
  #L2a72f6.  v0:= v5.`com.bumptech.glide.q.a.n` @type ^`boolean` @kind boolean;
  #L2a72fa.  v4.`com.bumptech.glide.q.a.n` @type ^`boolean` := v0 @kind boolean;
  #L2a72fe.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a7302.  v3:= 512I;
  #L2a7306.  call temp:= `a`(v0, v3) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a730c.  v0:= temp;
  #L2a730e.  if v0 == 0 then goto L2a7322;
  #L2a7312.  v0:= v5.`com.bumptech.glide.q.a.p` @type ^`int`;
  #L2a7316.  v4.`com.bumptech.glide.q.a.p` @type ^`int` := v0;
  #L2a731a.  v0:= v5.`com.bumptech.glide.q.a.o` @type ^`int`;
  #L2a731e.  v4.`com.bumptech.glide.q.a.o` @type ^`int` := v0;
  #L2a7322.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a7326.  v3:= 1024I;
  #L2a732a.  call temp:= `a`(v0, v3) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a7330.  v0:= temp;
  #L2a7332.  if v0 == 0 then goto L2a733e;
  #L2a7336.  v0:= v5.`com.bumptech.glide.q.a.q` @type ^`com.bumptech.glide.load.f` @kind object;
  #L2a733a.  v4.`com.bumptech.glide.q.a.q` @type ^`com.bumptech.glide.load.f` := v0 @kind object;
  #L2a733e.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a7342.  v3:= 4096I;
  #L2a7346.  call temp:= `a`(v0, v3) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a734c.  v0:= temp;
  #L2a734e.  if v0 == 0 then goto L2a735a;
  #L2a7352.  v0:= v5.`com.bumptech.glide.q.a.x` @type ^`java.lang.Class` @kind object;
  #L2a7356.  v4.`com.bumptech.glide.q.a.x` @type ^`java.lang.Class` := v0 @kind object;
  #L2a735a.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a735e.  v3:= 8192I;
  #L2a7362.  call temp:= `a`(v0, v3) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a7368.  v0:= temp;
  #L2a736a.  if v0 == 0 then goto L2a7386;
  #L2a736e.  v0:= v5.`com.bumptech.glide.q.a.t` @type ^`android.graphics.drawable.Drawable` @kind object;
  #L2a7372.  v4.`com.bumptech.glide.q.a.t` @type ^`android.graphics.drawable.Drawable` := v0 @kind object;
  #L2a7376.  v4.`com.bumptech.glide.q.a.u` @type ^`int` := v1;
  #L2a737a.  v0:= v4.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a737e.  v0:= v0 ^& -16385;
  #L2a7382.  v4.`com.bumptech.glide.q.a.f` @type ^`int` := v0;
  #L2a7386.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a738a.  v3:= 16384I;
  #L2a738e.  call temp:= `a`(v0, v3) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a7394.  v0:= temp;
  #L2a7396.  if v0 == 0 then goto L2a73b2;
  #L2a739a.  v0:= v5.`com.bumptech.glide.q.a.u` @type ^`int`;
  #L2a739e.  v4.`com.bumptech.glide.q.a.u` @type ^`int` := v0;
  #L2a73a2.  v4.`com.bumptech.glide.q.a.t` @type ^`android.graphics.drawable.Drawable` := v2 @kind object;
  #L2a73a6.  v0:= v4.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a73aa.  v0:= v0 ^& -8193;
  #L2a73ae.  v4.`com.bumptech.glide.q.a.f` @type ^`int` := v0;
  #L2a73b2.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a73b6.  v2:= 32768I;
  #L2a73bc.  call temp:= `a`(v0, v2) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a73c2.  v0:= temp;
  #L2a73c4.  if v0 == 0 then goto L2a73d0;
  #L2a73c8.  v0:= v5.`com.bumptech.glide.q.a.z` @type ^`android.content.res.Resources$Theme` @kind object;
  #L2a73cc.  v4.`com.bumptech.glide.q.a.z` @type ^`android.content.res.Resources$Theme` := v0 @kind object;
  #L2a73d0.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a73d4.  v2:= 65536I;
  #L2a73d8.  call temp:= `a`(v0, v2) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a73de.  v0:= temp;
  #L2a73e0.  if v0 == 0 then goto L2a73ec;
  #L2a73e4.  v0:= v5.`com.bumptech.glide.q.a.s` @type ^`boolean` @kind boolean;
  #L2a73e8.  v4.`com.bumptech.glide.q.a.s` @type ^`boolean` := v0 @kind boolean;
  #L2a73ec.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a73f0.  v2:= 131072I;
  #L2a73f4.  call temp:= `a`(v0, v2) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a73fa.  v0:= temp;
  #L2a73fc.  if v0 == 0 then goto L2a7408;
  #L2a7400.  v0:= v5.`com.bumptech.glide.q.a.r` @type ^`boolean` @kind boolean;
  #L2a7404.  v4.`com.bumptech.glide.q.a.r` @type ^`boolean` := v0 @kind boolean;
  #L2a7408.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a740c.  v2:= 2048I;
  #L2a7410.  call temp:= `a`(v0, v2) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a7416.  v0:= temp;
  #L2a7418.  if v0 == 0 then goto L2a7432;
  #L2a741c.  v0:= v4.`com.bumptech.glide.q.a.w` @type ^`java.util.Map` @kind object;
  #L2a7420.  v2:= v5.`com.bumptech.glide.q.a.w` @type ^`java.util.Map` @kind object;
  #L2a7424.  call `putAll`(v0, v2) @signature `Ljava/util/Map;.putAll:(Ljava/util/Map;)V` @kind interface;
  #L2a742a.  v0:= v5.`com.bumptech.glide.q.a.D` @type ^`boolean` @kind boolean;
  #L2a742e.  v4.`com.bumptech.glide.q.a.D` @type ^`boolean` := v0 @kind boolean;
  #L2a7432.  v0:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a7436.  v2:= 524288I;
  #L2a743a.  call temp:= `a`(v0, v2) @signature `Lcom/bumptech/glide/q/a;.a:(II)Z` @kind static;
  #L2a7440.  v0:= temp;
  #L2a7442.  if v0 == 0 then goto L2a744e;
  #L2a7446.  v0:= v5.`com.bumptech.glide.q.a.C` @type ^`boolean` @kind boolean;
  #L2a744a.  v4.`com.bumptech.glide.q.a.C` @type ^`boolean` := v0 @kind boolean;
  #L2a744e.  v0:= v4.`com.bumptech.glide.q.a.s` @type ^`boolean` @kind boolean;
  #L2a7452.  if v0 != 0 then goto L2a7486;
  #L2a7456.  v0:= v4.`com.bumptech.glide.q.a.w` @type ^`java.util.Map` @kind object;
  #L2a745a.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L2a7460.  v0:= v4.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a7464.  v0:= v0 ^& -2049;
  #L2a7468.  v4.`com.bumptech.glide.q.a.f` @type ^`int` := v0;
  #L2a746c.  v4.`com.bumptech.glide.q.a.r` @type ^`boolean` := v1 @kind boolean;
  #L2a7470.  v0:= v4.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a7474.  v1:= -131073I;
  #L2a747a.  v0:= v0 ^& v1 @kind int;
  #L2a747c.  v4.`com.bumptech.glide.q.a.f` @type ^`int` := v0;
  #L2a7480.  v0:= 1I;
  #L2a7482.  v4.`com.bumptech.glide.q.a.D` @type ^`boolean` := v0 @kind boolean;
  #L2a7486.  v0:= v4.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a748a.  v1:= v5.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a748e.  v0:= v0 ^| v1 @kind int;
  #L2a7490.  v4.`com.bumptech.glide.q.a.f` @type ^`int` := v0;
  #L2a7494.  v0:= v4.`com.bumptech.glide.q.a.v` @type ^`com.bumptech.glide.load.h` @kind object;
  #L2a7498.  v5:= v5.`com.bumptech.glide.q.a.v` @type ^`com.bumptech.glide.load.h` @kind object;
  #L2a749c.  call `putAll`(v0, v5) @signature `Lcom/bumptech/glide/load/h;.putAll:(Lcom/bumptech/glide/load/h;)V` @kind virtual;
  #L2a74a2.  call temp:= `c`(v4) @signature `Lcom/bumptech/glide/q/a;.c:()Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a74a8.  return v4 @kind object;
}
procedure `com.bumptech.glide.q.a` `autoClone`(`com.bumptech.glide.q.a` v2 @kind this) @signature `Lcom/bumptech/glide/q/a;.autoClone:()Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a74bc.  v0:= v2.`com.bumptech.glide.q.a.y` @type ^`boolean` @kind boolean;
  #L2a74c0.  if v0 == 0 then goto L2a74de;
  #L2a74c4.  v0:= v2.`com.bumptech.glide.q.a.A` @type ^`boolean` @kind boolean;
  #L2a74c8.  if v0 == 0 then goto L2a74ce;
  #L2a74cc.  goto L2a74de;
  #L2a74ce.  v0:= new `java.lang.IllegalStateException`;
  #L2a74d2.  v1:= "You cannot auto lock an already locked options object, try clone() first" @kind object;
  #L2a74d6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a74dc.  throw v0;
  #L2a74de.  v0:= 1I;
  #L2a74e0.  v2.`com.bumptech.glide.q.a.A` @type ^`boolean` := v0 @kind boolean;
  #L2a74e4.  call temp:= `lock`(v2) @signature `Lcom/bumptech/glide/q/a;.lock:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a74ea.  return v2 @kind object;
}
procedure `com.bumptech.glide.q.a` `b`(`com.bumptech.glide.q.a` v1 @kind this, `com.bumptech.glide.load.resource.bitmap.k` v2 @kind object, `com.bumptech.glide.load.l` v3 @kind object) @signature `Lcom/bumptech/glide/q/a;.b:(Lcom/bumptech/glide/load/resource/bitmap/k;Lcom/bumptech/glide/load/l;)Lcom/bumptech/glide/q/a;` @AccessFlag FINAL {
    temp;
    v0;

  #L2a7aac.  v0:= v1.`com.bumptech.glide.q.a.A` @type ^`boolean` @kind boolean;
  #L2a7ab0.  if v0 == 0 then goto L2a7ac6;
  #L2a7ab4.  call temp:= `clone`(v1) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7aba.  v0:= temp @kind object;
  #L2a7abc.  call temp:= `b`(v0, v2, v3) @signature `Lcom/bumptech/glide/q/a;.b:(Lcom/bumptech/glide/load/resource/bitmap/k;Lcom/bumptech/glide/load/l;)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7ac2.  v2:= temp @kind object;
  #L2a7ac4.  return v2 @kind object;
  #L2a7ac6.  call temp:= `downsample`(v1, v2) @signature `Lcom/bumptech/glide/q/a;.downsample:(Lcom/bumptech/glide/load/resource/bitmap/k;)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7acc.  call temp:= `transform`(v1, v3) @signature `Lcom/bumptech/glide/q/a;.transform:(Lcom/bumptech/glide/load/l;)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7ad2.  v2:= temp @kind object;
  #L2a7ad4.  return v2 @kind object;
}
procedure `com.bumptech.glide.q.a` `clone`(`com.bumptech.glide.q.a` v3 @kind this) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a74fc.  call temp:= `clone`(v3) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L2a7502.  v0:= temp @kind object;
  #L2a7504.  v0:= (`com.bumptech.glide.q.a`) v0 @kind object;
  #L2a7508.  v1:= new `com.bumptech.glide.load.h`;
  #L2a750c.  call `<init>`(v1) @signature `Lcom/bumptech/glide/load/h;.<init>:()V` @kind direct;
  #L2a7512.  v0.`com.bumptech.glide.q.a.v` @type ^`com.bumptech.glide.load.h` := v1 @kind object;
  #L2a7516.  v1:= v0.`com.bumptech.glide.q.a.v` @type ^`com.bumptech.glide.load.h` @kind object;
  #L2a751a.  v2:= v3.`com.bumptech.glide.q.a.v` @type ^`com.bumptech.glide.load.h` @kind object;
  #L2a751e.  call `putAll`(v1, v2) @signature `Lcom/bumptech/glide/load/h;.putAll:(Lcom/bumptech/glide/load/h;)V` @kind virtual;
  #L2a7524.  v1:= new `com.bumptech.glide.s.b`;
  #L2a7528.  call `<init>`(v1) @signature `Lcom/bumptech/glide/s/b;.<init>:()V` @kind direct;
  #L2a752e.  v0.`com.bumptech.glide.q.a.w` @type ^`java.util.Map` := v1 @kind object;
  #L2a7532.  v1:= v0.`com.bumptech.glide.q.a.w` @type ^`java.util.Map` @kind object;
  #L2a7536.  v2:= v3.`com.bumptech.glide.q.a.w` @type ^`java.util.Map` @kind object;
  #L2a753a.  call `putAll`(v1, v2) @signature `Ljava/util/Map;.putAll:(Ljava/util/Map;)V` @kind interface;
  #L2a7540.  v1:= 0I;
  #L2a7542.  v0.`com.bumptech.glide.q.a.y` @type ^`boolean` := v1 @kind boolean;
  #L2a7546.  v0.`com.bumptech.glide.q.a.A` @type ^`boolean` := v1 @kind boolean;
  #L2a754a.  return v0 @kind object;
  #L2a754c.  v0:= Exception @type ^`java.lang.CloneNotSupportedException` @kind object;
  #L2a754e.  v1:= new `java.lang.RuntimeException`;
  #L2a7552.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L2a7558.  throw v1;
  catch `java.lang.CloneNotSupportedException` @[L2a74fc..L2a754a] goto L2a754c;
}
procedure `java.lang.Object` `clone`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2a7d68.  call temp:= `clone`(v1) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7d6e.  v0:= temp @kind object;
  #L2a7d70.  return v0 @kind object;
}
procedure `com.bumptech.glide.q.a` `decode`(`com.bumptech.glide.q.a` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/bumptech/glide/q/a;.decode:(Ljava/lang/Class;)Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a757c.  v0:= v1.`com.bumptech.glide.q.a.A` @type ^`boolean` @kind boolean;
  #L2a7580.  if v0 == 0 then goto L2a7596;
  #L2a7584.  call temp:= `clone`(v1) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a758a.  v0:= temp @kind object;
  #L2a758c.  call temp:= `decode`(v0, v2) @signature `Lcom/bumptech/glide/q/a;.decode:(Ljava/lang/Class;)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7592.  v2:= temp @kind object;
  #L2a7594.  return v2 @kind object;
  #L2a7596.  call temp:= `checkNotNull`(v2) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2a759c.  v2:= (`java.lang.Class`) v2 @kind object;
  #L2a75a0.  v1.`com.bumptech.glide.q.a.x` @type ^`java.lang.Class` := v2 @kind object;
  #L2a75a4.  v2:= v1.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a75a8.  v2:= v2 ^| 4096;
  #L2a75ac.  v1.`com.bumptech.glide.q.a.f` @type ^`int` := v2;
  #L2a75b0.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/q/a;.c:()Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a75b6.  return v1 @kind object;
}
procedure `com.bumptech.glide.q.a` `diskCacheStrategy`(`com.bumptech.glide.q.a` v1 @kind this, `com.bumptech.glide.load.engine.j` v2 @kind object) @signature `Lcom/bumptech/glide/q/a;.diskCacheStrategy:(Lcom/bumptech/glide/load/engine/j;)Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a75c8.  v0:= v1.`com.bumptech.glide.q.a.A` @type ^`boolean` @kind boolean;
  #L2a75cc.  if v0 == 0 then goto L2a75e2;
  #L2a75d0.  call temp:= `clone`(v1) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a75d6.  v0:= temp @kind object;
  #L2a75d8.  call temp:= `diskCacheStrategy`(v0, v2) @signature `Lcom/bumptech/glide/q/a;.diskCacheStrategy:(Lcom/bumptech/glide/load/engine/j;)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a75de.  v2:= temp @kind object;
  #L2a75e0.  return v2 @kind object;
  #L2a75e2.  call temp:= `checkNotNull`(v2) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2a75e8.  v2:= (`com.bumptech.glide.load.engine.j`) v2 @kind object;
  #L2a75ec.  v1.`com.bumptech.glide.q.a.h` @type ^`com.bumptech.glide.load.engine.j` := v2 @kind object;
  #L2a75f0.  v2:= v1.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a75f4.  v2:= v2 ^| 4;
  #L2a75f8.  v1.`com.bumptech.glide.q.a.f` @type ^`int` := v2;
  #L2a75fc.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/q/a;.c:()Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a7602.  return v1 @kind object;
}
procedure `com.bumptech.glide.q.a` `downsample`(`com.bumptech.glide.q.a` v1 @kind this, `com.bumptech.glide.load.resource.bitmap.k` v2 @kind object) @signature `Lcom/bumptech/glide/q/a;.downsample:(Lcom/bumptech/glide/load/resource/bitmap/k;)Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a7614.  v0:= `@@com.bumptech.glide.load.resource.bitmap.k.f` @type ^`com.bumptech.glide.load.g` @kind object;
  #L2a7618.  call temp:= `checkNotNull`(v2) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2a761e.  call temp:= `set`(v1, v0, v2) @signature `Lcom/bumptech/glide/q/a;.set:(Lcom/bumptech/glide/load/g;Ljava/lang/Object;)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7624.  v2:= temp @kind object;
  #L2a7626.  return v2 @kind object;
}
procedure `boolean` `equals`(`com.bumptech.glide.q.a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/q/a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a6e70.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.q.a` @kind boolean;
  #L2a6e74.  v1:= 0I;
  #L2a6e76.  if v0 == 0 then goto L2a6fcc;
  #L2a6e7a.  v4:= (`com.bumptech.glide.q.a`) v4 @kind object;
  #L2a6e7e.  v0:= v4.`com.bumptech.glide.q.a.g` @type ^`float`;
  #L2a6e82.  v2:= v3.`com.bumptech.glide.q.a.g` @type ^`float`;
  #L2a6e86.  call temp:= `compare`(v0, v2) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L2a6e8c.  v0:= temp;
  #L2a6e8e.  if v0 != 0 then goto L2a6fcc;
  #L2a6e92.  v0:= v3.`com.bumptech.glide.q.a.k` @type ^`int`;
  #L2a6e96.  v2:= v4.`com.bumptech.glide.q.a.k` @type ^`int`;
  #L2a6e9a.  if v0 != v2 then goto L2a6fcc;
  #L2a6e9e.  v0:= v3.`com.bumptech.glide.q.a.j` @type ^`android.graphics.drawable.Drawable` @kind object;
  #L2a6ea2.  v2:= v4.`com.bumptech.glide.q.a.j` @type ^`android.graphics.drawable.Drawable` @kind object;
  #L2a6ea6.  call temp:= `bothNullOrEqual`(v0, v2) @signature `Lcom/bumptech/glide/s/k;.bothNullOrEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2a6eac.  v0:= temp;
  #L2a6eae.  if v0 == 0 then goto L2a6fcc;
  #L2a6eb2.  v0:= v3.`com.bumptech.glide.q.a.m` @type ^`int`;
  #L2a6eb6.  v2:= v4.`com.bumptech.glide.q.a.m` @type ^`int`;
  #L2a6eba.  if v0 != v2 then goto L2a6fcc;
  #L2a6ebe.  v0:= v3.`com.bumptech.glide.q.a.l` @type ^`android.graphics.drawable.Drawable` @kind object;
  #L2a6ec2.  v2:= v4.`com.bumptech.glide.q.a.l` @type ^`android.graphics.drawable.Drawable` @kind object;
  #L2a6ec6.  call temp:= `bothNullOrEqual`(v0, v2) @signature `Lcom/bumptech/glide/s/k;.bothNullOrEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2a6ecc.  v0:= temp;
  #L2a6ece.  if v0 == 0 then goto L2a6fcc;
  #L2a6ed2.  v0:= v3.`com.bumptech.glide.q.a.u` @type ^`int`;
  #L2a6ed6.  v2:= v4.`com.bumptech.glide.q.a.u` @type ^`int`;
  #L2a6eda.  if v0 != v2 then goto L2a6fcc;
  #L2a6ede.  v0:= v3.`com.bumptech.glide.q.a.t` @type ^`android.graphics.drawable.Drawable` @kind object;
  #L2a6ee2.  v2:= v4.`com.bumptech.glide.q.a.t` @type ^`android.graphics.drawable.Drawable` @kind object;
  #L2a6ee6.  call temp:= `bothNullOrEqual`(v0, v2) @signature `Lcom/bumptech/glide/s/k;.bothNullOrEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2a6eec.  v0:= temp;
  #L2a6eee.  if v0 == 0 then goto L2a6fcc;
  #L2a6ef2.  v0:= v3.`com.bumptech.glide.q.a.n` @type ^`boolean` @kind boolean;
  #L2a6ef6.  v2:= v4.`com.bumptech.glide.q.a.n` @type ^`boolean` @kind boolean;
  #L2a6efa.  if v0 != v2 then goto L2a6fcc;
  #L2a6efe.  v0:= v3.`com.bumptech.glide.q.a.o` @type ^`int`;
  #L2a6f02.  v2:= v4.`com.bumptech.glide.q.a.o` @type ^`int`;
  #L2a6f06.  if v0 != v2 then goto L2a6fcc;
  #L2a6f0a.  v0:= v3.`com.bumptech.glide.q.a.p` @type ^`int`;
  #L2a6f0e.  v2:= v4.`com.bumptech.glide.q.a.p` @type ^`int`;
  #L2a6f12.  if v0 != v2 then goto L2a6fcc;
  #L2a6f16.  v0:= v3.`com.bumptech.glide.q.a.r` @type ^`boolean` @kind boolean;
  #L2a6f1a.  v2:= v4.`com.bumptech.glide.q.a.r` @type ^`boolean` @kind boolean;
  #L2a6f1e.  if v0 != v2 then goto L2a6fcc;
  #L2a6f22.  v0:= v3.`com.bumptech.glide.q.a.s` @type ^`boolean` @kind boolean;
  #L2a6f26.  v2:= v4.`com.bumptech.glide.q.a.s` @type ^`boolean` @kind boolean;
  #L2a6f2a.  if v0 != v2 then goto L2a6fcc;
  #L2a6f2e.  v0:= v3.`com.bumptech.glide.q.a.B` @type ^`boolean` @kind boolean;
  #L2a6f32.  v2:= v4.`com.bumptech.glide.q.a.B` @type ^`boolean` @kind boolean;
  #L2a6f36.  if v0 != v2 then goto L2a6fcc;
  #L2a6f3a.  v0:= v3.`com.bumptech.glide.q.a.C` @type ^`boolean` @kind boolean;
  #L2a6f3e.  v2:= v4.`com.bumptech.glide.q.a.C` @type ^`boolean` @kind boolean;
  #L2a6f42.  if v0 != v2 then goto L2a6fcc;
  #L2a6f46.  v0:= v3.`com.bumptech.glide.q.a.h` @type ^`com.bumptech.glide.load.engine.j` @kind object;
  #L2a6f4a.  v2:= v4.`com.bumptech.glide.q.a.h` @type ^`com.bumptech.glide.load.engine.j` @kind object;
  #L2a6f4e.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2a6f54.  v0:= temp;
  #L2a6f56.  if v0 == 0 then goto L2a6fcc;
  #L2a6f5a.  v0:= v3.`com.bumptech.glide.q.a.i` @type ^`com.bumptech.glide.g` @kind object;
  #L2a6f5e.  v2:= v4.`com.bumptech.glide.q.a.i` @type ^`com.bumptech.glide.g` @kind object;
  #L2a6f62.  if v0 != v2 then goto L2a6fcc;
  #L2a6f66.  v0:= v3.`com.bumptech.glide.q.a.v` @type ^`com.bumptech.glide.load.h` @kind object;
  #L2a6f6a.  v2:= v4.`com.bumptech.glide.q.a.v` @type ^`com.bumptech.glide.load.h` @kind object;
  #L2a6f6e.  call temp:= `equals`(v0, v2) @signature `Lcom/bumptech/glide/load/h;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2a6f74.  v0:= temp;
  #L2a6f76.  if v0 == 0 then goto L2a6fcc;
  #L2a6f7a.  v0:= v3.`com.bumptech.glide.q.a.w` @type ^`java.util.Map` @kind object;
  #L2a6f7e.  v2:= v4.`com.bumptech.glide.q.a.w` @type ^`java.util.Map` @kind object;
  #L2a6f82.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L2a6f88.  v0:= temp;
  #L2a6f8a.  if v0 == 0 then goto L2a6fcc;
  #L2a6f8e.  v0:= v3.`com.bumptech.glide.q.a.x` @type ^`java.lang.Class` @kind object;
  #L2a6f92.  v2:= v4.`com.bumptech.glide.q.a.x` @type ^`java.lang.Class` @kind object;
  #L2a6f96.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2a6f9c.  v0:= temp;
  #L2a6f9e.  if v0 == 0 then goto L2a6fcc;
  #L2a6fa2.  v0:= v3.`com.bumptech.glide.q.a.q` @type ^`com.bumptech.glide.load.f` @kind object;
  #L2a6fa6.  v2:= v4.`com.bumptech.glide.q.a.q` @type ^`com.bumptech.glide.load.f` @kind object;
  #L2a6faa.  call temp:= `bothNullOrEqual`(v0, v2) @signature `Lcom/bumptech/glide/s/k;.bothNullOrEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2a6fb0.  v0:= temp;
  #L2a6fb2.  if v0 == 0 then goto L2a6fcc;
  #L2a6fb6.  v0:= v3.`com.bumptech.glide.q.a.z` @type ^`android.content.res.Resources$Theme` @kind object;
  #L2a6fba.  v4:= v4.`com.bumptech.glide.q.a.z` @type ^`android.content.res.Resources$Theme` @kind object;
  #L2a6fbe.  call temp:= `bothNullOrEqual`(v0, v4) @signature `Lcom/bumptech/glide/s/k;.bothNullOrEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2a6fc4.  v4:= temp;
  #L2a6fc6.  if v4 == 0 then goto L2a6fcc;
  #L2a6fca.  v1:= 1I;
  #L2a6fcc.  return v1;
}
procedure `com.bumptech.glide.q.a` `error`(`com.bumptech.glide.q.a` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/q/a;.error:(I)Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a7638.  v0:= v1.`com.bumptech.glide.q.a.A` @type ^`boolean` @kind boolean;
  #L2a763c.  if v0 == 0 then goto L2a7652;
  #L2a7640.  call temp:= `clone`(v1) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7646.  v0:= temp @kind object;
  #L2a7648.  call temp:= `error`(v0, v2) @signature `Lcom/bumptech/glide/q/a;.error:(I)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a764e.  v2:= temp @kind object;
  #L2a7650.  return v2 @kind object;
  #L2a7652.  v1.`com.bumptech.glide.q.a.k` @type ^`int` := v2;
  #L2a7656.  v2:= v1.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a765a.  v2:= v2 ^| 32;
  #L2a765e.  v1.`com.bumptech.glide.q.a.f` @type ^`int` := v2;
  #L2a7662.  v2:= 0I;
  #L2a7664.  v1.`com.bumptech.glide.q.a.j` @type ^`android.graphics.drawable.Drawable` := v2 @kind object;
  #L2a7668.  v2:= v1.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a766c.  v2:= v2 ^& -17;
  #L2a7670.  v1.`com.bumptech.glide.q.a.f` @type ^`int` := v2;
  #L2a7674.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/q/a;.c:()Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a767a.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.engine.j` `getDiskCacheStrategy`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getDiskCacheStrategy:()Lcom/bumptech/glide/load/engine/j;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a7174.  v0:= v1.`com.bumptech.glide.q.a.h` @type ^`com.bumptech.glide.load.engine.j` @kind object;
  #L2a7178.  return v0 @kind object;
}
procedure `int` `getErrorId`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getErrorId:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a7bc8.  v0:= v1.`com.bumptech.glide.q.a.k` @type ^`int`;
  #L2a7bcc.  return v0;
}
procedure `android.graphics.drawable.Drawable` `getErrorPlaceholder`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getErrorPlaceholder:()Landroid/graphics/drawable/Drawable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a6e28.  v0:= v1.`com.bumptech.glide.q.a.j` @type ^`android.graphics.drawable.Drawable` @kind object;
  #L2a6e2c.  return v0 @kind object;
}
procedure `android.graphics.drawable.Drawable` `getFallbackDrawable`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getFallbackDrawable:()Landroid/graphics/drawable/Drawable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a6e40.  v0:= v1.`com.bumptech.glide.q.a.t` @type ^`android.graphics.drawable.Drawable` @kind object;
  #L2a6e44.  return v0 @kind object;
}
procedure `int` `getFallbackId`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getFallbackId:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a7be0.  v0:= v1.`com.bumptech.glide.q.a.u` @type ^`int`;
  #L2a7be4.  return v0;
}
procedure `boolean` `getOnlyRetrieveFromCache`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getOnlyRetrieveFromCache:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a6fe0.  v0:= v1.`com.bumptech.glide.q.a.C` @type ^`boolean` @kind boolean;
  #L2a6fe4.  return v0;
}
procedure `com.bumptech.glide.load.h` `getOptions`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getOptions:()Lcom/bumptech/glide/load/h;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a715c.  v0:= v1.`com.bumptech.glide.q.a.v` @type ^`com.bumptech.glide.load.h` @kind object;
  #L2a7160.  return v0 @kind object;
}
procedure `int` `getOverrideHeight`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getOverrideHeight:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a7bf8.  v0:= v1.`com.bumptech.glide.q.a.o` @type ^`int`;
  #L2a7bfc.  return v0;
}
procedure `int` `getOverrideWidth`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getOverrideWidth:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a7c10.  v0:= v1.`com.bumptech.glide.q.a.p` @type ^`int`;
  #L2a7c14.  return v0;
}
procedure `android.graphics.drawable.Drawable` `getPlaceholderDrawable`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getPlaceholderDrawable:()Landroid/graphics/drawable/Drawable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a6e58.  v0:= v1.`com.bumptech.glide.q.a.l` @type ^`android.graphics.drawable.Drawable` @kind object;
  #L2a6e5c.  return v0 @kind object;
}
procedure `int` `getPlaceholderId`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getPlaceholderId:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a7c28.  v0:= v1.`com.bumptech.glide.q.a.m` @type ^`int`;
  #L2a7c2c.  return v0;
}
procedure `com.bumptech.glide.g` `getPriority`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getPriority:()Lcom/bumptech/glide/g;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a712c.  v0:= v1.`com.bumptech.glide.q.a.i` @type ^`com.bumptech.glide.g` @kind object;
  #L2a7130.  return v0 @kind object;
}
procedure `java.lang.Class` `getResourceClass`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getResourceClass:()Ljava/lang/Class;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a7d50.  v0:= v1.`com.bumptech.glide.q.a.x` @type ^`java.lang.Class` @kind object;
  #L2a7d54.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.f` `getSignature`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getSignature:()Lcom/bumptech/glide/load/f;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a7144.  v0:= v1.`com.bumptech.glide.q.a.q` @type ^`com.bumptech.glide.load.f` @kind object;
  #L2a7148.  return v0 @kind object;
}
procedure `float` `getSizeMultiplier`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getSizeMultiplier:()F` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a7bb0.  v0:= v1.`com.bumptech.glide.q.a.g` @type ^`float`;
  #L2a7bb4.  return v0;
}
procedure `android.content.res.Resources$Theme` `getTheme`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getTheme:()Landroid/content/res/Resources$Theme;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a6e10.  v0:= v1.`com.bumptech.glide.q.a.z` @type ^`android.content.res.Resources$Theme` @kind object;
  #L2a6e14.  return v0 @kind object;
}
procedure `java.util.Map` `getTransformations`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getTransformations:()Ljava/util/Map;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a7d84.  v0:= v1.`com.bumptech.glide.q.a.w` @type ^`java.util.Map` @kind object;
  #L2a7d88.  return v0 @kind object;
}
procedure `boolean` `getUseAnimationPool`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getUseAnimationPool:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a6ff8.  v0:= v1.`com.bumptech.glide.q.a.E` @type ^`boolean` @kind boolean;
  #L2a6ffc.  return v0;
}
procedure `boolean` `getUseUnlimitedSourceGeneratorsPool`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.getUseUnlimitedSourceGeneratorsPool:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a7010.  v0:= v1.`com.bumptech.glide.q.a.B` @type ^`boolean` @kind boolean;
  #L2a7014.  return v0;
}
procedure `int` `hashCode`(`com.bumptech.glide.q.a` v2 @kind this) @signature `Lcom/bumptech/glide/q/a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a7c40.  v0:= v2.`com.bumptech.glide.q.a.g` @type ^`float`;
  #L2a7c44.  call temp:= `hashCode`(v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(F)I` @kind static;
  #L2a7c4a.  v0:= temp;
  #L2a7c4c.  v1:= v2.`com.bumptech.glide.q.a.k` @type ^`int`;
  #L2a7c50.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(II)I` @kind static;
  #L2a7c56.  v0:= temp;
  #L2a7c58.  v1:= v2.`com.bumptech.glide.q.a.j` @type ^`android.graphics.drawable.Drawable` @kind object;
  #L2a7c5c.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(Ljava/lang/Object;I)I` @kind static;
  #L2a7c62.  v0:= temp;
  #L2a7c64.  v1:= v2.`com.bumptech.glide.q.a.m` @type ^`int`;
  #L2a7c68.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(II)I` @kind static;
  #L2a7c6e.  v0:= temp;
  #L2a7c70.  v1:= v2.`com.bumptech.glide.q.a.l` @type ^`android.graphics.drawable.Drawable` @kind object;
  #L2a7c74.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(Ljava/lang/Object;I)I` @kind static;
  #L2a7c7a.  v0:= temp;
  #L2a7c7c.  v1:= v2.`com.bumptech.glide.q.a.u` @type ^`int`;
  #L2a7c80.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(II)I` @kind static;
  #L2a7c86.  v0:= temp;
  #L2a7c88.  v1:= v2.`com.bumptech.glide.q.a.t` @type ^`android.graphics.drawable.Drawable` @kind object;
  #L2a7c8c.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(Ljava/lang/Object;I)I` @kind static;
  #L2a7c92.  v0:= temp;
  #L2a7c94.  v1:= v2.`com.bumptech.glide.q.a.n` @type ^`boolean` @kind boolean;
  #L2a7c98.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(ZI)I` @kind static;
  #L2a7c9e.  v0:= temp;
  #L2a7ca0.  v1:= v2.`com.bumptech.glide.q.a.o` @type ^`int`;
  #L2a7ca4.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(II)I` @kind static;
  #L2a7caa.  v0:= temp;
  #L2a7cac.  v1:= v2.`com.bumptech.glide.q.a.p` @type ^`int`;
  #L2a7cb0.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(II)I` @kind static;
  #L2a7cb6.  v0:= temp;
  #L2a7cb8.  v1:= v2.`com.bumptech.glide.q.a.r` @type ^`boolean` @kind boolean;
  #L2a7cbc.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(ZI)I` @kind static;
  #L2a7cc2.  v0:= temp;
  #L2a7cc4.  v1:= v2.`com.bumptech.glide.q.a.s` @type ^`boolean` @kind boolean;
  #L2a7cc8.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(ZI)I` @kind static;
  #L2a7cce.  v0:= temp;
  #L2a7cd0.  v1:= v2.`com.bumptech.glide.q.a.B` @type ^`boolean` @kind boolean;
  #L2a7cd4.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(ZI)I` @kind static;
  #L2a7cda.  v0:= temp;
  #L2a7cdc.  v1:= v2.`com.bumptech.glide.q.a.C` @type ^`boolean` @kind boolean;
  #L2a7ce0.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(ZI)I` @kind static;
  #L2a7ce6.  v0:= temp;
  #L2a7ce8.  v1:= v2.`com.bumptech.glide.q.a.h` @type ^`com.bumptech.glide.load.engine.j` @kind object;
  #L2a7cec.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(Ljava/lang/Object;I)I` @kind static;
  #L2a7cf2.  v0:= temp;
  #L2a7cf4.  v1:= v2.`com.bumptech.glide.q.a.i` @type ^`com.bumptech.glide.g` @kind object;
  #L2a7cf8.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(Ljava/lang/Object;I)I` @kind static;
  #L2a7cfe.  v0:= temp;
  #L2a7d00.  v1:= v2.`com.bumptech.glide.q.a.v` @type ^`com.bumptech.glide.load.h` @kind object;
  #L2a7d04.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(Ljava/lang/Object;I)I` @kind static;
  #L2a7d0a.  v0:= temp;
  #L2a7d0c.  v1:= v2.`com.bumptech.glide.q.a.w` @type ^`java.util.Map` @kind object;
  #L2a7d10.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(Ljava/lang/Object;I)I` @kind static;
  #L2a7d16.  v0:= temp;
  #L2a7d18.  v1:= v2.`com.bumptech.glide.q.a.x` @type ^`java.lang.Class` @kind object;
  #L2a7d1c.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(Ljava/lang/Object;I)I` @kind static;
  #L2a7d22.  v0:= temp;
  #L2a7d24.  v1:= v2.`com.bumptech.glide.q.a.q` @type ^`com.bumptech.glide.load.f` @kind object;
  #L2a7d28.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(Ljava/lang/Object;I)I` @kind static;
  #L2a7d2e.  v0:= temp;
  #L2a7d30.  v1:= v2.`com.bumptech.glide.q.a.z` @type ^`android.content.res.Resources$Theme` @kind object;
  #L2a7d34.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/s/k;.hashCode:(Ljava/lang/Object;I)I` @kind static;
  #L2a7d3a.  v0:= temp;
  #L2a7d3c.  return v0;
}
procedure `boolean` `isMemoryCacheable`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.isMemoryCacheable:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a7028.  v0:= v1.`com.bumptech.glide.q.a.n` @type ^`boolean` @kind boolean;
  #L2a702c.  return v0;
}
procedure `boolean` `isPrioritySet`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.isPrioritySet:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a7040.  v0:= 8I;
  #L2a7044.  call temp:= `a`(v1, v0) @signature `Lcom/bumptech/glide/q/a;.a:(I)Z` @kind direct;
  #L2a704a.  v0:= temp;
  #L2a704c.  return v0;
}
procedure `boolean` `isTransformationAllowed`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.isTransformationAllowed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a70b8.  v0:= v1.`com.bumptech.glide.q.a.s` @type ^`boolean` @kind boolean;
  #L2a70bc.  return v0;
}
procedure `boolean` `isTransformationRequired`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.isTransformationRequired:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a70d0.  v0:= v1.`com.bumptech.glide.q.a.r` @type ^`boolean` @kind boolean;
  #L2a70d4.  return v0;
}
procedure `boolean` `isTransformationSet`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.isTransformationSet:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a70e8.  v0:= 2048I;
  #L2a70ec.  call temp:= `a`(v1, v0) @signature `Lcom/bumptech/glide/q/a;.a:(I)Z` @kind direct;
  #L2a70f2.  v0:= temp;
  #L2a70f4.  return v0;
}
procedure `boolean` `isValidOverride`(`com.bumptech.glide.q.a` v2 @kind this) @signature `Lcom/bumptech/glide/q/a;.isValidOverride:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2a7108.  v0:= v2.`com.bumptech.glide.q.a.p` @type ^`int`;
  #L2a710c.  v1:= v2.`com.bumptech.glide.q.a.o` @type ^`int`;
  #L2a7110.  call temp:= `isValidDimensions`(v0, v1) @signature `Lcom/bumptech/glide/s/k;.isValidDimensions:(II)Z` @kind static;
  #L2a7116.  v0:= temp;
  #L2a7118.  return v0;
}
procedure `com.bumptech.glide.q.a` `lock`(`com.bumptech.glide.q.a` v1 @kind this) @signature `Lcom/bumptech/glide/q/a;.lock:()Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a768c.  v0:= 1I;
  #L2a768e.  v1.`com.bumptech.glide.q.a.y` @type ^`boolean` := v0 @kind boolean;
  #L2a7692.  call temp:= `b`(v1) @signature `Lcom/bumptech/glide/q/a;.b:()Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a7698.  return v1 @kind object;
}
procedure `com.bumptech.glide.q.a` `optionalCenterCrop`(`com.bumptech.glide.q.a` v2 @kind this) @signature `Lcom/bumptech/glide/q/a;.optionalCenterCrop:()Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a76ac.  v0:= `@@com.bumptech.glide.load.resource.bitmap.k.c` @type ^`com.bumptech.glide.load.resource.bitmap.k` @kind object;
  #L2a76b0.  v1:= new `com.bumptech.glide.load.resource.bitmap.i`;
  #L2a76b4.  call `<init>`(v1) @signature `Lcom/bumptech/glide/load/resource/bitmap/i;.<init>:()V` @kind direct;
  #L2a76ba.  call temp:= `a`(v2, v0, v1) @signature `Lcom/bumptech/glide/q/a;.a:(Lcom/bumptech/glide/load/resource/bitmap/k;Lcom/bumptech/glide/load/l;)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a76c0.  v0:= temp @kind object;
  #L2a76c2.  return v0 @kind object;
}
procedure `com.bumptech.glide.q.a` `optionalCenterInside`(`com.bumptech.glide.q.a` v2 @kind this) @signature `Lcom/bumptech/glide/q/a;.optionalCenterInside:()Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a76d4.  v0:= `@@com.bumptech.glide.load.resource.bitmap.k.b` @type ^`com.bumptech.glide.load.resource.bitmap.k` @kind object;
  #L2a76d8.  v1:= new `com.bumptech.glide.load.resource.bitmap.j`;
  #L2a76dc.  call `<init>`(v1) @signature `Lcom/bumptech/glide/load/resource/bitmap/j;.<init>:()V` @kind direct;
  #L2a76e2.  call temp:= `c`(v2, v0, v1) @signature `Lcom/bumptech/glide/q/a;.c:(Lcom/bumptech/glide/load/resource/bitmap/k;Lcom/bumptech/glide/load/l;)Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a76e8.  v0:= temp @kind object;
  #L2a76ea.  return v0 @kind object;
}
procedure `com.bumptech.glide.q.a` `optionalFitCenter`(`com.bumptech.glide.q.a` v2 @kind this) @signature `Lcom/bumptech/glide/q/a;.optionalFitCenter:()Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a76fc.  v0:= `@@com.bumptech.glide.load.resource.bitmap.k.a` @type ^`com.bumptech.glide.load.resource.bitmap.k` @kind object;
  #L2a7700.  v1:= new `com.bumptech.glide.load.resource.bitmap.p`;
  #L2a7704.  call `<init>`(v1) @signature `Lcom/bumptech/glide/load/resource/bitmap/p;.<init>:()V` @kind direct;
  #L2a770a.  call temp:= `c`(v2, v0, v1) @signature `Lcom/bumptech/glide/q/a;.c:(Lcom/bumptech/glide/load/resource/bitmap/k;Lcom/bumptech/glide/load/l;)Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a7710.  v0:= temp @kind object;
  #L2a7712.  return v0 @kind object;
}
procedure `com.bumptech.glide.q.a` `override`(`com.bumptech.glide.q.a` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lcom/bumptech/glide/q/a;.override:(II)Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a777c.  v0:= v1.`com.bumptech.glide.q.a.A` @type ^`boolean` @kind boolean;
  #L2a7780.  if v0 == 0 then goto L2a7796;
  #L2a7784.  call temp:= `clone`(v1) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a778a.  v0:= temp @kind object;
  #L2a778c.  call temp:= `override`(v0, v2, v3) @signature `Lcom/bumptech/glide/q/a;.override:(II)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7792.  v2:= temp @kind object;
  #L2a7794.  return v2 @kind object;
  #L2a7796.  v1.`com.bumptech.glide.q.a.p` @type ^`int` := v2;
  #L2a779a.  v1.`com.bumptech.glide.q.a.o` @type ^`int` := v3;
  #L2a779e.  v2:= v1.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a77a2.  v2:= v2 ^| 512;
  #L2a77a6.  v1.`com.bumptech.glide.q.a.f` @type ^`int` := v2;
  #L2a77aa.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/q/a;.c:()Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a77b0.  return v1 @kind object;
}
procedure `com.bumptech.glide.q.a` `placeholder`(`com.bumptech.glide.q.a` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/q/a;.placeholder:(I)Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a77c4.  v0:= v1.`com.bumptech.glide.q.a.A` @type ^`boolean` @kind boolean;
  #L2a77c8.  if v0 == 0 then goto L2a77de;
  #L2a77cc.  call temp:= `clone`(v1) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a77d2.  v0:= temp @kind object;
  #L2a77d4.  call temp:= `placeholder`(v0, v2) @signature `Lcom/bumptech/glide/q/a;.placeholder:(I)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a77da.  v2:= temp @kind object;
  #L2a77dc.  return v2 @kind object;
  #L2a77de.  v1.`com.bumptech.glide.q.a.m` @type ^`int` := v2;
  #L2a77e2.  v2:= v1.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a77e6.  v2:= v2 ^| 128;
  #L2a77ea.  v1.`com.bumptech.glide.q.a.f` @type ^`int` := v2;
  #L2a77ee.  v2:= 0I;
  #L2a77f0.  v1.`com.bumptech.glide.q.a.l` @type ^`android.graphics.drawable.Drawable` := v2 @kind object;
  #L2a77f4.  v2:= v1.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a77f8.  v2:= v2 ^& -65;
  #L2a77fc.  v1.`com.bumptech.glide.q.a.f` @type ^`int` := v2;
  #L2a7800.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/q/a;.c:()Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a7806.  return v1 @kind object;
}
procedure `com.bumptech.glide.q.a` `priority`(`com.bumptech.glide.q.a` v1 @kind this, `com.bumptech.glide.g` v2 @kind object) @signature `Lcom/bumptech/glide/q/a;.priority:(Lcom/bumptech/glide/g;)Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a7818.  v0:= v1.`com.bumptech.glide.q.a.A` @type ^`boolean` @kind boolean;
  #L2a781c.  if v0 == 0 then goto L2a7832;
  #L2a7820.  call temp:= `clone`(v1) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7826.  v0:= temp @kind object;
  #L2a7828.  call temp:= `priority`(v0, v2) @signature `Lcom/bumptech/glide/q/a;.priority:(Lcom/bumptech/glide/g;)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a782e.  v2:= temp @kind object;
  #L2a7830.  return v2 @kind object;
  #L2a7832.  call temp:= `checkNotNull`(v2) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2a7838.  v2:= (`com.bumptech.glide.g`) v2 @kind object;
  #L2a783c.  v1.`com.bumptech.glide.q.a.i` @type ^`com.bumptech.glide.g` := v2 @kind object;
  #L2a7840.  v2:= v1.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a7844.  v2:= v2 ^| 8;
  #L2a7848.  v1.`com.bumptech.glide.q.a.f` @type ^`int` := v2;
  #L2a784c.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/q/a;.c:()Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a7852.  return v1 @kind object;
}
procedure `com.bumptech.glide.q.a` `set`(`com.bumptech.glide.q.a` v1 @kind this, `com.bumptech.glide.load.g` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/bumptech/glide/q/a;.set:(Lcom/bumptech/glide/load/g;Ljava/lang/Object;)Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a78d8.  v0:= v1.`com.bumptech.glide.q.a.A` @type ^`boolean` @kind boolean;
  #L2a78dc.  if v0 == 0 then goto L2a78f2;
  #L2a78e0.  call temp:= `clone`(v1) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a78e6.  v0:= temp @kind object;
  #L2a78e8.  call temp:= `set`(v0, v2, v3) @signature `Lcom/bumptech/glide/q/a;.set:(Lcom/bumptech/glide/load/g;Ljava/lang/Object;)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a78ee.  v2:= temp @kind object;
  #L2a78f0.  return v2 @kind object;
  #L2a78f2.  call temp:= `checkNotNull`(v2) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2a78f8.  call temp:= `checkNotNull`(v3) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2a78fe.  v0:= v1.`com.bumptech.glide.q.a.v` @type ^`com.bumptech.glide.load.h` @kind object;
  #L2a7902.  call temp:= `set`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/h;.set:(Lcom/bumptech/glide/load/g;Ljava/lang/Object;)Lcom/bumptech/glide/load/h;` @kind virtual;
  #L2a7908.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/q/a;.c:()Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a790e.  return v1 @kind object;
}
procedure `com.bumptech.glide.q.a` `signature`(`com.bumptech.glide.q.a` v1 @kind this, `com.bumptech.glide.load.f` v2 @kind object) @signature `Lcom/bumptech/glide/q/a;.signature:(Lcom/bumptech/glide/load/f;)Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a7920.  v0:= v1.`com.bumptech.glide.q.a.A` @type ^`boolean` @kind boolean;
  #L2a7924.  if v0 == 0 then goto L2a793a;
  #L2a7928.  call temp:= `clone`(v1) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a792e.  v0:= temp @kind object;
  #L2a7930.  call temp:= `signature`(v0, v2) @signature `Lcom/bumptech/glide/q/a;.signature:(Lcom/bumptech/glide/load/f;)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7936.  v2:= temp @kind object;
  #L2a7938.  return v2 @kind object;
  #L2a793a.  call temp:= `checkNotNull`(v2) @signature `Lcom/bumptech/glide/s/j;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2a7940.  v2:= (`com.bumptech.glide.load.f`) v2 @kind object;
  #L2a7944.  v1.`com.bumptech.glide.q.a.q` @type ^`com.bumptech.glide.load.f` := v2 @kind object;
  #L2a7948.  v2:= v1.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a794c.  v2:= v2 ^| 1024;
  #L2a7950.  v1.`com.bumptech.glide.q.a.f` @type ^`int` := v2;
  #L2a7954.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/q/a;.c:()Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a795a.  return v1 @kind object;
}
procedure `com.bumptech.glide.q.a` `sizeMultiplier`(`com.bumptech.glide.q.a` v1 @kind this, `float` v2 ) @signature `Lcom/bumptech/glide/q/a;.sizeMultiplier:(F)Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a796c.  v0:= v1.`com.bumptech.glide.q.a.A` @type ^`boolean` @kind boolean;
  #L2a7970.  if v0 == 0 then goto L2a7986;
  #L2a7974.  call temp:= `clone`(v1) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a797a.  v0:= temp @kind object;
  #L2a797c.  call temp:= `sizeMultiplier`(v0, v2) @signature `Lcom/bumptech/glide/q/a;.sizeMultiplier:(F)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7982.  v2:= temp @kind object;
  #L2a7984.  return v2 @kind object;
  #L2a7986.  v0:= 0I;
  #L2a7988.  v0:= fcmpg(v2, v0);
  #L2a798c.  if v0 < 0 then goto L2a79b4;
  #L2a7990.  v0:= 1.0F;
  #L2a7994.  v0:= fcmpl(v2, v0);
  #L2a7998.  if v0 > 0 then goto L2a79b4;
  #L2a799c.  v1.`com.bumptech.glide.q.a.g` @type ^`float` := v2;
  #L2a79a0.  v2:= v1.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a79a4.  v2:= v2 ^| 2;
  #L2a79a8.  v1.`com.bumptech.glide.q.a.f` @type ^`int` := v2;
  #L2a79ac.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/q/a;.c:()Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a79b2.  return v1 @kind object;
  #L2a79b4.  v2:= new `java.lang.IllegalArgumentException`;
  #L2a79b8.  v0:= "sizeMultiplier must be between 0 and 1" @kind object;
  #L2a79bc.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a79c2.  throw v2;
}
procedure `com.bumptech.glide.q.a` `skipMemoryCache`(`com.bumptech.glide.q.a` v2 @kind this, `boolean` v3 ) @signature `Lcom/bumptech/glide/q/a;.skipMemoryCache:(Z)Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a79d4.  v0:= v2.`com.bumptech.glide.q.a.A` @type ^`boolean` @kind boolean;
  #L2a79d8.  v1:= 1I;
  #L2a79da.  if v0 == 0 then goto L2a79f0;
  #L2a79de.  call temp:= `clone`(v2) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a79e4.  v3:= temp @kind object;
  #L2a79e6.  call temp:= `skipMemoryCache`(v3, v1) @signature `Lcom/bumptech/glide/q/a;.skipMemoryCache:(Z)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a79ec.  v3:= temp @kind object;
  #L2a79ee.  return v3 @kind object;
  #L2a79f0.  v3:= v3 ^~ v1 @kind int;
  #L2a79f2.  v2.`com.bumptech.glide.q.a.n` @type ^`boolean` := v3 @kind boolean;
  #L2a79f6.  v3:= v2.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a79fa.  v3:= v3 ^| 256;
  #L2a79fe.  v2.`com.bumptech.glide.q.a.f` @type ^`int` := v3;
  #L2a7a02.  call temp:= `c`(v2) @signature `Lcom/bumptech/glide/q/a;.c:()Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a7a08.  return v2 @kind object;
}
procedure `com.bumptech.glide.q.a` `transform`(`com.bumptech.glide.q.a` v1 @kind this, `com.bumptech.glide.load.l` v2 @kind object) @signature `Lcom/bumptech/glide/q/a;.transform:(Lcom/bumptech/glide/load/l;)Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a7a1c.  v0:= 1I;
  #L2a7a1e.  call temp:= `a`(v1, v2, v0) @signature `Lcom/bumptech/glide/q/a;.a:(Lcom/bumptech/glide/load/l;Z)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7a24.  v2:= temp @kind object;
  #L2a7a26.  return v2 @kind object;
}
procedure `com.bumptech.glide.q.a` `useAnimationPool`(`com.bumptech.glide.q.a` v1 @kind this, `boolean` v2 ) @signature `Lcom/bumptech/glide/q/a;.useAnimationPool:(Z)Lcom/bumptech/glide/q/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a7b6c.  v0:= v1.`com.bumptech.glide.q.a.A` @type ^`boolean` @kind boolean;
  #L2a7b70.  if v0 == 0 then goto L2a7b86;
  #L2a7b74.  call temp:= `clone`(v1) @signature `Lcom/bumptech/glide/q/a;.clone:()Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7b7a.  v0:= temp @kind object;
  #L2a7b7c.  call temp:= `useAnimationPool`(v0, v2) @signature `Lcom/bumptech/glide/q/a;.useAnimationPool:(Z)Lcom/bumptech/glide/q/a;` @kind virtual;
  #L2a7b82.  v2:= temp @kind object;
  #L2a7b84.  return v2 @kind object;
  #L2a7b86.  v1.`com.bumptech.glide.q.a.E` @type ^`boolean` := v2 @kind boolean;
  #L2a7b8a.  v2:= v1.`com.bumptech.glide.q.a.f` @type ^`int`;
  #L2a7b8e.  v0:= 1048576I;
  #L2a7b92.  v2:= v2 ^| v0 @kind int;
  #L2a7b94.  v1.`com.bumptech.glide.q.a.f` @type ^`int` := v2;
  #L2a7b98.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/q/a;.c:()Lcom/bumptech/glide/q/a;` @kind direct;
  #L2a7b9e.  return v1 @kind object;
}
