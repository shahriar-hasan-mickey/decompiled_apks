record `com.bumptech.glide.n.o$a` @kind class @AccessFlag  extends `com.bumptech.glide.n.m` @kind interface {
  `com.bumptech.glide.n.o` `com.bumptech.glide.n.o$a.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.bumptech.glide.n.o$a` v0 @kind this, `com.bumptech.glide.n.o` v1 @kind object) @signature `Lcom/bumptech/glide/n/o$a;.<init>:(Lcom/bumptech/glide/n/o;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2a5ccc.  v0.`com.bumptech.glide.n.o$a.a` @type ^`com.bumptech.glide.n.o` := v1 @kind object;
  #L2a5cd0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a5cd6.  return @kind void;
}
procedure `java.util.Set` `getDescendants`(`com.bumptech.glide.n.o$a` v4 @kind this) @signature `Lcom/bumptech/glide/n/o$a;.getDescendants:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2a5c60.  v0:= v4.`com.bumptech.glide.n.o$a.a` @type ^`com.bumptech.glide.n.o` @kind object;
  #L2a5c64.  call temp:= `a`(v0) @signature `Lcom/bumptech/glide/n/o;.a:()Ljava/util/Set;` @kind virtual;
  #L2a5c6a.  v0:= temp @kind object;
  #L2a5c6c.  v1:= new `java.util.HashSet`;
  #L2a5c70.  call temp:= `size`(v0) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L2a5c76.  v2:= temp;
  #L2a5c78.  call `<init>`(v1, v2) @signature `Ljava/util/HashSet;.<init>:(I)V` @kind direct;
  #L2a5c7e.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a5c84.  v0:= temp @kind object;
  #L2a5c86.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a5c8c.  v2:= temp;
  #L2a5c8e.  if v2 == 0 then goto L2a5cba;
  #L2a5c92.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a5c98.  v2:= temp @kind object;
  #L2a5c9a.  v2:= (`com.bumptech.glide.n.o`) v2 @kind object;
  #L2a5c9e.  call temp:= `getRequestManager`(v2) @signature `Lcom/bumptech/glide/n/o;.getRequestManager:()Lcom/bumptech/glide/j;` @kind virtual;
  #L2a5ca4.  v3:= temp @kind object;
  #L2a5ca6.  if v3 == 0 then goto L2a5c86;
  #L2a5caa.  call temp:= `getRequestManager`(v2) @signature `Lcom/bumptech/glide/n/o;.getRequestManager:()Lcom/bumptech/glide/j;` @kind virtual;
  #L2a5cb0.  v2:= temp @kind object;
  #L2a5cb2.  call temp:= `add`(v1, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a5cb8.  goto L2a5c86;
  #L2a5cba.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.n.o$a` v2 @kind this) @signature `Lcom/bumptech/glide/n/o$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a5c10.  v0:= new `java.lang.StringBuilder`;
  #L2a5c14.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2a5c1a.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind super;
  #L2a5c20.  v1:= temp @kind object;
  #L2a5c22.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a5c28.  v1:= "{fragment=" @kind object;
  #L2a5c2c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a5c32.  v1:= v2.`com.bumptech.glide.n.o$a.a` @type ^`com.bumptech.glide.n.o` @kind object;
  #L2a5c36.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a5c3c.  v1:= "}" @kind object;
  #L2a5c40.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a5c46.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a5c4c.  v0:= temp @kind object;
  #L2a5c4e.  return v0 @kind object;
}
