record `com.bumptech.glide.n.n` @kind class @AccessFlag PUBLIC {
  `java.util.Set` `com.bumptech.glide.n.n.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `com.bumptech.glide.n.n.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.bumptech.glide.n.n.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.n.n` v1 @kind this) @signature `Lcom/bumptech/glide/n/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2a5970.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a5976.  v0:= new `java.util.WeakHashMap`;
  #L2a597a.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L2a5980.  call temp:= `newSetFromMap`(v0) @signature `Ljava/util/Collections;.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;` @kind static;
  #L2a5986.  v0:= temp @kind object;
  #L2a5988.  v1.`com.bumptech.glide.n.n.a` @type ^`java.util.Set` := v0 @kind object;
  #L2a598c.  v0:= new `java.util.ArrayList`;
  #L2a5990.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2a5996.  v1.`com.bumptech.glide.n.n.b` @type ^`java.util.List` := v0 @kind object;
  #L2a599a.  return @kind void;
}
procedure `boolean` `clearAndRemove`(`com.bumptech.glide.n.n` v3 @kind this, `com.bumptech.glide.q.d` v4 @kind object) @signature `Lcom/bumptech/glide/n/n;.clearAndRemove:(Lcom/bumptech/glide/q/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a58bc.  v0:= 1I;
  #L2a58be.  if v4 != 0 then goto L2a58c4;
  #L2a58c2.  return v0;
  #L2a58c4.  v1:= v3.`com.bumptech.glide.n.n.a` @type ^`java.util.Set` @kind object;
  #L2a58c8.  call temp:= `remove`(v1, v4) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2a58ce.  v1:= temp;
  #L2a58d0.  v2:= v3.`com.bumptech.glide.n.n.b` @type ^`java.util.List` @kind object;
  #L2a58d4.  call temp:= `remove`(v2, v4) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2a58da.  v2:= temp;
  #L2a58dc.  if v2 != 0 then goto L2a58e8;
  #L2a58e0.  if v1 == 0 then goto L2a58e6;
  #L2a58e4.  goto L2a58e8;
  #L2a58e6.  v0:= 0I;
  #L2a58e8.  if v0 == 0 then goto L2a58f2;
  #L2a58ec.  call `clear`(v4) @signature `Lcom/bumptech/glide/q/d;.clear:()V` @kind interface;
  #L2a58f2.  return v0;
}
procedure `void` `clearRequests`(`com.bumptech.glide.n.n` v2 @kind this) @signature `Lcom/bumptech/glide/n/n;.clearRequests:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a59ac.  v0:= v2.`com.bumptech.glide.n.n.a` @type ^`java.util.Set` @kind object;
  #L2a59b0.  call temp:= `getSnapshot`(v0) @signature `Lcom/bumptech/glide/s/k;.getSnapshot:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L2a59b6.  v0:= temp @kind object;
  #L2a59b8.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a59be.  v0:= temp @kind object;
  #L2a59c0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a59c6.  v1:= temp;
  #L2a59c8.  if v1 == 0 then goto L2a59e0;
  #L2a59cc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a59d2.  v1:= temp @kind object;
  #L2a59d4.  v1:= (`com.bumptech.glide.q.d`) v1 @kind object;
  #L2a59d8.  call temp:= `clearAndRemove`(v2, v1) @signature `Lcom/bumptech/glide/n/n;.clearAndRemove:(Lcom/bumptech/glide/q/d;)Z` @kind virtual;
  #L2a59de.  goto L2a59c0;
  #L2a59e0.  v0:= v2.`com.bumptech.glide.n.n.b` @type ^`java.util.List` @kind object;
  #L2a59e4.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L2a59ea.  return @kind void;
}
procedure `void` `pauseAllRequests`(`com.bumptech.glide.n.n` v3 @kind this) @signature `Lcom/bumptech/glide/n/n;.pauseAllRequests:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a59fc.  v0:= 1I;
  #L2a59fe.  v3.`com.bumptech.glide.n.n.c` @type ^`boolean` := v0 @kind boolean;
  #L2a5a02.  v0:= v3.`com.bumptech.glide.n.n.a` @type ^`java.util.Set` @kind object;
  #L2a5a06.  call temp:= `getSnapshot`(v0) @signature `Lcom/bumptech/glide/s/k;.getSnapshot:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L2a5a0c.  v0:= temp @kind object;
  #L2a5a0e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a5a14.  v0:= temp @kind object;
  #L2a5a16.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a5a1c.  v1:= temp;
  #L2a5a1e.  if v1 == 0 then goto L2a5a58;
  #L2a5a22.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a5a28.  v1:= temp @kind object;
  #L2a5a2a.  v1:= (`com.bumptech.glide.q.d`) v1 @kind object;
  #L2a5a2e.  call temp:= `isRunning`(v1) @signature `Lcom/bumptech/glide/q/d;.isRunning:()Z` @kind interface;
  #L2a5a34.  v2:= temp;
  #L2a5a36.  if v2 != 0 then goto L2a5a46;
  #L2a5a3a.  call temp:= `isComplete`(v1) @signature `Lcom/bumptech/glide/q/d;.isComplete:()Z` @kind interface;
  #L2a5a40.  v2:= temp;
  #L2a5a42.  if v2 == 0 then goto L2a5a16;
  #L2a5a46.  call `clear`(v1) @signature `Lcom/bumptech/glide/q/d;.clear:()V` @kind interface;
  #L2a5a4c.  v2:= v3.`com.bumptech.glide.n.n.b` @type ^`java.util.List` @kind object;
  #L2a5a50.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a5a56.  goto L2a5a16;
  #L2a5a58.  return @kind void;
}
procedure `void` `pauseRequests`(`com.bumptech.glide.n.n` v3 @kind this) @signature `Lcom/bumptech/glide/n/n;.pauseRequests:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a5a6c.  v0:= 1I;
  #L2a5a6e.  v3.`com.bumptech.glide.n.n.c` @type ^`boolean` := v0 @kind boolean;
  #L2a5a72.  v0:= v3.`com.bumptech.glide.n.n.a` @type ^`java.util.Set` @kind object;
  #L2a5a76.  call temp:= `getSnapshot`(v0) @signature `Lcom/bumptech/glide/s/k;.getSnapshot:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L2a5a7c.  v0:= temp @kind object;
  #L2a5a7e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a5a84.  v0:= temp @kind object;
  #L2a5a86.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a5a8c.  v1:= temp;
  #L2a5a8e.  if v1 == 0 then goto L2a5abc;
  #L2a5a92.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a5a98.  v1:= temp @kind object;
  #L2a5a9a.  v1:= (`com.bumptech.glide.q.d`) v1 @kind object;
  #L2a5a9e.  call temp:= `isRunning`(v1) @signature `Lcom/bumptech/glide/q/d;.isRunning:()Z` @kind interface;
  #L2a5aa4.  v2:= temp;
  #L2a5aa6.  if v2 == 0 then goto L2a5a86;
  #L2a5aaa.  call `pause`(v1) @signature `Lcom/bumptech/glide/q/d;.pause:()V` @kind interface;
  #L2a5ab0.  v2:= v3.`com.bumptech.glide.n.n.b` @type ^`java.util.List` @kind object;
  #L2a5ab4.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a5aba.  goto L2a5a86;
  #L2a5abc.  return @kind void;
}
procedure `void` `restartRequests`(`com.bumptech.glide.n.n` v3 @kind this) @signature `Lcom/bumptech/glide/n/n;.restartRequests:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a5ad0.  v0:= v3.`com.bumptech.glide.n.n.a` @type ^`java.util.Set` @kind object;
  #L2a5ad4.  call temp:= `getSnapshot`(v0) @signature `Lcom/bumptech/glide/s/k;.getSnapshot:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L2a5ada.  v0:= temp @kind object;
  #L2a5adc.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a5ae2.  v0:= temp @kind object;
  #L2a5ae4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a5aea.  v1:= temp;
  #L2a5aec.  if v1 == 0 then goto L2a5b36;
  #L2a5af0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a5af6.  v1:= temp @kind object;
  #L2a5af8.  v1:= (`com.bumptech.glide.q.d`) v1 @kind object;
  #L2a5afc.  call temp:= `isComplete`(v1) @signature `Lcom/bumptech/glide/q/d;.isComplete:()Z` @kind interface;
  #L2a5b02.  v2:= temp;
  #L2a5b04.  if v2 != 0 then goto L2a5ae4;
  #L2a5b08.  call temp:= `isCleared`(v1) @signature `Lcom/bumptech/glide/q/d;.isCleared:()Z` @kind interface;
  #L2a5b0e.  v2:= temp;
  #L2a5b10.  if v2 != 0 then goto L2a5ae4;
  #L2a5b14.  call `clear`(v1) @signature `Lcom/bumptech/glide/q/d;.clear:()V` @kind interface;
  #L2a5b1a.  v2:= v3.`com.bumptech.glide.n.n.c` @type ^`boolean` @kind boolean;
  #L2a5b1e.  if v2 != 0 then goto L2a5b2a;
  #L2a5b22.  call `begin`(v1) @signature `Lcom/bumptech/glide/q/d;.begin:()V` @kind interface;
  #L2a5b28.  goto L2a5ae4;
  #L2a5b2a.  v2:= v3.`com.bumptech.glide.n.n.b` @type ^`java.util.List` @kind object;
  #L2a5b2e.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a5b34.  goto L2a5ae4;
  #L2a5b36.  return @kind void;
}
procedure `void` `resumeRequests`(`com.bumptech.glide.n.n` v3 @kind this) @signature `Lcom/bumptech/glide/n/n;.resumeRequests:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a5b48.  v0:= 0I;
  #L2a5b4a.  v3.`com.bumptech.glide.n.n.c` @type ^`boolean` := v0 @kind boolean;
  #L2a5b4e.  v0:= v3.`com.bumptech.glide.n.n.a` @type ^`java.util.Set` @kind object;
  #L2a5b52.  call temp:= `getSnapshot`(v0) @signature `Lcom/bumptech/glide/s/k;.getSnapshot:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L2a5b58.  v0:= temp @kind object;
  #L2a5b5a.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a5b60.  v0:= temp @kind object;
  #L2a5b62.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a5b68.  v1:= temp;
  #L2a5b6a.  if v1 == 0 then goto L2a5b9a;
  #L2a5b6e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a5b74.  v1:= temp @kind object;
  #L2a5b76.  v1:= (`com.bumptech.glide.q.d`) v1 @kind object;
  #L2a5b7a.  call temp:= `isComplete`(v1) @signature `Lcom/bumptech/glide/q/d;.isComplete:()Z` @kind interface;
  #L2a5b80.  v2:= temp;
  #L2a5b82.  if v2 != 0 then goto L2a5b62;
  #L2a5b86.  call temp:= `isRunning`(v1) @signature `Lcom/bumptech/glide/q/d;.isRunning:()Z` @kind interface;
  #L2a5b8c.  v2:= temp;
  #L2a5b8e.  if v2 != 0 then goto L2a5b62;
  #L2a5b92.  call `begin`(v1) @signature `Lcom/bumptech/glide/q/d;.begin:()V` @kind interface;
  #L2a5b98.  goto L2a5b62;
  #L2a5b9a.  v0:= v3.`com.bumptech.glide.n.n.b` @type ^`java.util.List` @kind object;
  #L2a5b9e.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L2a5ba4.  return @kind void;
}
procedure `void` `runRequest`(`com.bumptech.glide.n.n` v2 @kind this, `com.bumptech.glide.q.d` v3 @kind object) @signature `Lcom/bumptech/glide/n/n;.runRequest:(Lcom/bumptech/glide/q/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a5bb8.  v0:= v2.`com.bumptech.glide.n.n.a` @type ^`java.util.Set` @kind object;
  #L2a5bbc.  call temp:= `add`(v0, v3) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a5bc2.  v0:= v2.`com.bumptech.glide.n.n.c` @type ^`boolean` @kind boolean;
  #L2a5bc6.  if v0 != 0 then goto L2a5bd2;
  #L2a5bca.  call `begin`(v3) @signature `Lcom/bumptech/glide/q/d;.begin:()V` @kind interface;
  #L2a5bd0.  goto L2a5bfe;
  #L2a5bd2.  call `clear`(v3) @signature `Lcom/bumptech/glide/q/d;.clear:()V` @kind interface;
  #L2a5bd8.  v0:= 2I;
  #L2a5bda.  v1:= "RequestTracker" @kind object;
  #L2a5bde.  call temp:= `isLoggable`(v1, v0) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L2a5be4.  v0:= temp;
  #L2a5be6.  if v0 == 0 then goto L2a5bf4;
  #L2a5bea.  v0:= "Paused, delaying request" @kind object;
  #L2a5bee.  call temp:= `v`(v1, v0) @signature `Landroid/util/Log;.v:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2a5bf4.  v0:= v2.`com.bumptech.glide.n.n.b` @type ^`java.util.List` @kind object;
  #L2a5bf8.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a5bfe.  return @kind void;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.n.n` v2 @kind this) @signature `Lcom/bumptech/glide/n/n;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a5904.  v0:= new `java.lang.StringBuilder`;
  #L2a5908.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2a590e.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind super;
  #L2a5914.  v1:= temp @kind object;
  #L2a5916.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a591c.  v1:= "{numRequests=" @kind object;
  #L2a5920.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a5926.  v1:= v2.`com.bumptech.glide.n.n.a` @type ^`java.util.Set` @kind object;
  #L2a592a.  call temp:= `size`(v1) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L2a5930.  v1:= temp;
  #L2a5932.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a5938.  v1:= ", isPaused=" @kind object;
  #L2a593c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a5942.  v1:= v2.`com.bumptech.glide.n.n.c` @type ^`boolean` @kind boolean;
  #L2a5946.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a594c.  v1:= "}" @kind object;
  #L2a5950.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a5956.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a595c.  v0:= temp @kind object;
  #L2a595e.  return v0 @kind object;
}
