record `com.bumptech.glide.n.k$a` @kind class @AccessFlag  extends `com.bumptech.glide.n.m` @kind interface {
  `com.bumptech.glide.n.k` `com.bumptech.glide.n.k$a.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.bumptech.glide.n.k$a` v0 @kind this, `com.bumptech.glide.n.k` v1 @kind object) @signature `Lcom/bumptech/glide/n/k$a;.<init>:(Lcom/bumptech/glide/n/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2a4ec0.  v0.`com.bumptech.glide.n.k$a.a` @type ^`com.bumptech.glide.n.k` := v1 @kind object;
  #L2a4ec4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a4eca.  return @kind void;
}
procedure `java.util.Set` `getDescendants`(`com.bumptech.glide.n.k$a` v4 @kind this) @signature `Lcom/bumptech/glide/n/k$a;.getDescendants:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2a4e54.  v0:= v4.`com.bumptech.glide.n.k$a.a` @type ^`com.bumptech.glide.n.k` @kind object;
  #L2a4e58.  call temp:= `a`(v0) @signature `Lcom/bumptech/glide/n/k;.a:()Ljava/util/Set;` @kind virtual;
  #L2a4e5e.  v0:= temp @kind object;
  #L2a4e60.  v1:= new `java.util.HashSet`;
  #L2a4e64.  call temp:= `size`(v0) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L2a4e6a.  v2:= temp;
  #L2a4e6c.  call `<init>`(v1, v2) @signature `Ljava/util/HashSet;.<init>:(I)V` @kind direct;
  #L2a4e72.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a4e78.  v0:= temp @kind object;
  #L2a4e7a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a4e80.  v2:= temp;
  #L2a4e82.  if v2 == 0 then goto L2a4eae;
  #L2a4e86.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a4e8c.  v2:= temp @kind object;
  #L2a4e8e.  v2:= (`com.bumptech.glide.n.k`) v2 @kind object;
  #L2a4e92.  call temp:= `getRequestManager`(v2) @signature `Lcom/bumptech/glide/n/k;.getRequestManager:()Lcom/bumptech/glide/j;` @kind virtual;
  #L2a4e98.  v3:= temp @kind object;
  #L2a4e9a.  if v3 == 0 then goto L2a4e7a;
  #L2a4e9e.  call temp:= `getRequestManager`(v2) @signature `Lcom/bumptech/glide/n/k;.getRequestManager:()Lcom/bumptech/glide/j;` @kind virtual;
  #L2a4ea4.  v2:= temp @kind object;
  #L2a4ea6.  call temp:= `add`(v1, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a4eac.  goto L2a4e7a;
  #L2a4eae.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.n.k$a` v2 @kind this) @signature `Lcom/bumptech/glide/n/k$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a4e04.  v0:= new `java.lang.StringBuilder`;
  #L2a4e08.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2a4e0e.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind super;
  #L2a4e14.  v1:= temp @kind object;
  #L2a4e16.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a4e1c.  v1:= "{fragment=" @kind object;
  #L2a4e20.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a4e26.  v1:= v2.`com.bumptech.glide.n.k$a.a` @type ^`com.bumptech.glide.n.k` @kind object;
  #L2a4e2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a4e30.  v1:= "}" @kind object;
  #L2a4e34.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a4e3a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a4e40.  v0:= temp @kind object;
  #L2a4e42.  return v0 @kind object;
}
