record `com.bumptech.glide.n.a` @kind class @AccessFlag  extends `com.bumptech.glide.n.h` @kind interface {
  `java.util.Set` `com.bumptech.glide.n.a.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.bumptech.glide.n.a.b` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.n.a.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.n.a` v1 @kind this) @signature `Lcom/bumptech/glide/n/a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2a48f8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a48fe.  v0:= new `java.util.WeakHashMap`;
  #L2a4902.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L2a4908.  call temp:= `newSetFromMap`(v0) @signature `Ljava/util/Collections;.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;` @kind static;
  #L2a490e.  v0:= temp @kind object;
  #L2a4910.  v1.`com.bumptech.glide.n.a.a` @type ^`java.util.Set` := v0 @kind object;
  #L2a4914.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.n.a` v2 @kind this) @signature `Lcom/bumptech/glide/n/a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2a496c.  v0:= 1I;
  #L2a496e.  v2.`com.bumptech.glide.n.a.c` @type ^`boolean` := v0 @kind boolean;
  #L2a4972.  v0:= v2.`com.bumptech.glide.n.a.a` @type ^`java.util.Set` @kind object;
  #L2a4976.  call temp:= `getSnapshot`(v0) @signature `Lcom/bumptech/glide/s/k;.getSnapshot:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L2a497c.  v0:= temp @kind object;
  #L2a497e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a4984.  v0:= temp @kind object;
  #L2a4986.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a498c.  v1:= temp;
  #L2a498e.  if v1 == 0 then goto L2a49a6;
  #L2a4992.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a4998.  v1:= temp @kind object;
  #L2a499a.  v1:= (`com.bumptech.glide.n.i`) v1 @kind object;
  #L2a499e.  call `onDestroy`(v1) @signature `Lcom/bumptech/glide/n/i;.onDestroy:()V` @kind interface;
  #L2a49a4.  goto L2a4986;
  #L2a49a6.  return @kind void;
}
procedure `void` `addListener`(`com.bumptech.glide.n.a` v1 @kind this, `com.bumptech.glide.n.i` v2 @kind object) @signature `Lcom/bumptech/glide/n/a;.addListener:(Lcom/bumptech/glide/n/i;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a4928.  v0:= v1.`com.bumptech.glide.n.a.a` @type ^`java.util.Set` @kind object;
  #L2a492c.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a4932.  v0:= v1.`com.bumptech.glide.n.a.c` @type ^`boolean` @kind boolean;
  #L2a4936.  if v0 == 0 then goto L2a4942;
  #L2a493a.  call `onDestroy`(v2) @signature `Lcom/bumptech/glide/n/i;.onDestroy:()V` @kind interface;
  #L2a4940.  goto L2a4958;
  #L2a4942.  v0:= v1.`com.bumptech.glide.n.a.b` @type ^`boolean` @kind boolean;
  #L2a4946.  if v0 == 0 then goto L2a4952;
  #L2a494a.  call `onStart`(v2) @signature `Lcom/bumptech/glide/n/i;.onStart:()V` @kind interface;
  #L2a4950.  goto L2a4958;
  #L2a4952.  call `onStop`(v2) @signature `Lcom/bumptech/glide/n/i;.onStop:()V` @kind interface;
  #L2a4958.  return @kind void;
}
procedure `void` `b`(`com.bumptech.glide.n.a` v2 @kind this) @signature `Lcom/bumptech/glide/n/a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2a49b8.  v0:= 1I;
  #L2a49ba.  v2.`com.bumptech.glide.n.a.b` @type ^`boolean` := v0 @kind boolean;
  #L2a49be.  v0:= v2.`com.bumptech.glide.n.a.a` @type ^`java.util.Set` @kind object;
  #L2a49c2.  call temp:= `getSnapshot`(v0) @signature `Lcom/bumptech/glide/s/k;.getSnapshot:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L2a49c8.  v0:= temp @kind object;
  #L2a49ca.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a49d0.  v0:= temp @kind object;
  #L2a49d2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a49d8.  v1:= temp;
  #L2a49da.  if v1 == 0 then goto L2a49f2;
  #L2a49de.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a49e4.  v1:= temp @kind object;
  #L2a49e6.  v1:= (`com.bumptech.glide.n.i`) v1 @kind object;
  #L2a49ea.  call `onStart`(v1) @signature `Lcom/bumptech/glide/n/i;.onStart:()V` @kind interface;
  #L2a49f0.  goto L2a49d2;
  #L2a49f2.  return @kind void;
}
procedure `void` `c`(`com.bumptech.glide.n.a` v2 @kind this) @signature `Lcom/bumptech/glide/n/a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2a4a04.  v0:= 0I;
  #L2a4a06.  v2.`com.bumptech.glide.n.a.b` @type ^`boolean` := v0 @kind boolean;
  #L2a4a0a.  v0:= v2.`com.bumptech.glide.n.a.a` @type ^`java.util.Set` @kind object;
  #L2a4a0e.  call temp:= `getSnapshot`(v0) @signature `Lcom/bumptech/glide/s/k;.getSnapshot:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L2a4a14.  v0:= temp @kind object;
  #L2a4a16.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a4a1c.  v0:= temp @kind object;
  #L2a4a1e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a4a24.  v1:= temp;
  #L2a4a26.  if v1 == 0 then goto L2a4a3e;
  #L2a4a2a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a4a30.  v1:= temp @kind object;
  #L2a4a32.  v1:= (`com.bumptech.glide.n.i`) v1 @kind object;
  #L2a4a36.  call `onStop`(v1) @signature `Lcom/bumptech/glide/n/i;.onStop:()V` @kind interface;
  #L2a4a3c.  goto L2a4a1e;
  #L2a4a3e.  return @kind void;
}
procedure `void` `removeListener`(`com.bumptech.glide.n.a` v1 @kind this, `com.bumptech.glide.n.i` v2 @kind object) @signature `Lcom/bumptech/glide/n/a;.removeListener:(Lcom/bumptech/glide/n/i;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a4a50.  v0:= v1.`com.bumptech.glide.n.a.a` @type ^`java.util.Set` @kind object;
  #L2a4a54.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2a4a5a.  return @kind void;
}
