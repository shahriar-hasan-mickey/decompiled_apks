record `com.bumptech.glide.l.b$a` @kind class @AccessFlag  extends `java.io.ByteArrayOutputStream` @kind class {
  `com.bumptech.glide.l.b` `com.bumptech.glide.l.b$a.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.bumptech.glide.l.b$a` v0 @kind this, `com.bumptech.glide.l.b` v1 @kind object, `int` v2 ) @signature `Lcom/bumptech/glide/l/b$a;.<init>:(Lcom/bumptech/glide/l/b;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L28c328.  v0.`com.bumptech.glide.l.b$a.f` @type ^`com.bumptech.glide.l.b` := v1 @kind object;
  #L28c32c.  call `<init>`(v0, v2) @signature `Ljava/io/ByteArrayOutputStream;.<init>:(I)V` @kind direct;
  #L28c332.  return @kind void;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.l.b$a` v5 @kind this) @signature `Lcom/bumptech/glide/l/b$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28c2ac.  v0:= v5.`java.io.ByteArrayOutputStream.count` @type ^`int`;
  #L28c2b0.  if v0 <= 0 then goto L28c2ce;
  #L28c2b4.  v1:= v5.`java.io.ByteArrayOutputStream.buf` @type ^`byte`[] @kind object;
  #L28c2b8.  v2:= v0 + -1;
  #L28c2bc.  v1:= v1[v2] @kind byte;
  #L28c2c0.  v2:= 13I;
  #L28c2c4.  if v1 != v2 then goto L28c2ce;
  #L28c2c8.  v0:= v0 + -1;
  #L28c2cc.  goto L28c2d2;
  #L28c2ce.  v0:= v5.`java.io.ByteArrayOutputStream.count` @type ^`int`;
  #L28c2d2.  v1:= new `java.lang.String`;
  #L28c2d6.  v2:= v5.`java.io.ByteArrayOutputStream.buf` @type ^`byte`[] @kind object;
  #L28c2da.  v3:= 0I;
  #L28c2dc.  v4:= v5.`com.bumptech.glide.l.b$a.f` @type ^`com.bumptech.glide.l.b` @kind object;
  #L28c2e0.  call temp:= `a`(v4) @signature `Lcom/bumptech/glide/l/b;.a:(Lcom/bumptech/glide/l/b;)Ljava/nio/charset/Charset;` @kind static;
  #L28c2e6.  v4:= temp @kind object;
  #L28c2e8.  call temp:= `name`(v4) @signature `Ljava/nio/charset/Charset;.name:()Ljava/lang/String;` @kind virtual;
  #L28c2ee.  v4:= temp @kind object;
  #L28c2f0.  call `<init>`(v1, v2, v3, v0, v4) @signature `Ljava/lang/String;.<init>:([BIILjava/lang/String;)V` @kind direct;
  #L28c2f6.  return v1 @kind object;
  #L28c2f8.  v0:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L28c2fa.  v1:= new `java.lang.AssertionError`;
  #L28c2fe.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L28c304.  throw v1;
  catch `java.io.UnsupportedEncodingException` @[L28c2d2..L28c2f6] goto L28c2f8;
}
