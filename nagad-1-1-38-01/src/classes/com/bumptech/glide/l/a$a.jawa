record `com.bumptech.glide.l.a$a` @kind class @AccessFlag  extends `java.util.concurrent.Callable` @kind interface {
  `com.bumptech.glide.l.a` `com.bumptech.glide.l.a$a.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.bumptech.glide.l.a$a` v0 @kind this, `com.bumptech.glide.l.a` v1 @kind object) @signature `Lcom/bumptech/glide/l/a$a;.<init>:(Lcom/bumptech/glide/l/a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L28abec.  v0.`com.bumptech.glide.l.a$a.f` @type ^`com.bumptech.glide.l.a` := v1 @kind object;
  #L28abf0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28abf6.  return @kind void;
}
procedure `java.lang.Object` `call`(`com.bumptech.glide.l.a$a` v1 @kind this) @signature `Lcom/bumptech/glide/l/a$a;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L28ab5c.  call temp:= `call`(v1) @signature `Lcom/bumptech/glide/l/a$a;.call:()Ljava/lang/Void;` @kind virtual;
  #L28ab62.  v0:= temp @kind object;
  #L28ab64.  return v0 @kind object;
}
procedure `java.lang.Void` `call`(`com.bumptech.glide.l.a$a` v4 @kind this) @signature `Lcom/bumptech/glide/l/a$a;.call:()Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L28ab78.  v0:= v4.`com.bumptech.glide.l.a$a.f` @type ^`com.bumptech.glide.l.a` @kind object;
  #L28ab7c.  @monitorenter v0
  #L28ab7e.  v1:= v4.`com.bumptech.glide.l.a$a.f` @type ^`com.bumptech.glide.l.a` @kind object;
  #L28ab82.  call temp:= `a`(v1) @signature `Lcom/bumptech/glide/l/a;.a:(Lcom/bumptech/glide/l/a;)Ljava/io/Writer;` @kind static;
  #L28ab88.  v1:= temp @kind object;
  #L28ab8a.  v2:= 0I;
  #L28ab8c.  if v1 != 0 then goto L28ab94;
  #L28ab90.  @monitorexit v0
  #L28ab92.  return v2 @kind object;
  #L28ab94.  v1:= v4.`com.bumptech.glide.l.a$a.f` @type ^`com.bumptech.glide.l.a` @kind object;
  #L28ab98.  call `c`(v1) @signature `Lcom/bumptech/glide/l/a;.c:(Lcom/bumptech/glide/l/a;)V` @kind static;
  #L28ab9e.  v1:= v4.`com.bumptech.glide.l.a$a.f` @type ^`com.bumptech.glide.l.a` @kind object;
  #L28aba2.  call temp:= `e`(v1) @signature `Lcom/bumptech/glide/l/a;.e:(Lcom/bumptech/glide/l/a;)Z` @kind static;
  #L28aba8.  v1:= temp;
  #L28abaa.  if v1 == 0 then goto L28abc4;
  #L28abae.  v1:= v4.`com.bumptech.glide.l.a$a.f` @type ^`com.bumptech.glide.l.a` @kind object;
  #L28abb2.  call `f`(v1) @signature `Lcom/bumptech/glide/l/a;.f:(Lcom/bumptech/glide/l/a;)V` @kind static;
  #L28abb8.  v1:= v4.`com.bumptech.glide.l.a$a.f` @type ^`com.bumptech.glide.l.a` @kind object;
  #L28abbc.  v3:= 0I;
  #L28abbe.  call temp:= `a`(v1, v3) @signature `Lcom/bumptech/glide/l/a;.a:(Lcom/bumptech/glide/l/a;I)I` @kind static;
  #L28abc4.  @monitorexit v0
  #L28abc6.  return v2 @kind object;
  #L28abc8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28abca.  @monitorexit v0
  #L28abcc.  throw v1;
  catch `java.lang.Throwable` @[L28ab7e..L28abcc] goto L28abc8;
}
