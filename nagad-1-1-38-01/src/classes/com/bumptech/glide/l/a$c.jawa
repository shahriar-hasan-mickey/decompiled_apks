record `com.bumptech.glide.l.a$c` @kind class @AccessFlag PUBLIC_FINAL {
  `com.bumptech.glide.l.a$d` `com.bumptech.glide.l.a$c.a` @AccessFlag PRIVATE_FINAL;
  `boolean`[] `com.bumptech.glide.l.a$c.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.bumptech.glide.l.a$c.c` @AccessFlag PRIVATE;
  `com.bumptech.glide.l.a` `com.bumptech.glide.l.a$c.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.bumptech.glide.l.a$c` v0 @kind this, `com.bumptech.glide.l.a` v1 @kind object, `com.bumptech.glide.l.a$d` v2 @kind object) @signature `Lcom/bumptech/glide/l/a$c;.<init>:(Lcom/bumptech/glide/l/a;Lcom/bumptech/glide/l/a$d;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L28ad40.  v0.`com.bumptech.glide.l.a$c.d` @type ^`com.bumptech.glide.l.a` := v1 @kind object;
  #L28ad44.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28ad4a.  v0.`com.bumptech.glide.l.a$c.a` @type ^`com.bumptech.glide.l.a$d` := v2 @kind object;
  #L28ad4e.  call temp:= `d`(v2) @signature `Lcom/bumptech/glide/l/a$d;.d:(Lcom/bumptech/glide/l/a$d;)Z` @kind static;
  #L28ad54.  v2:= temp;
  #L28ad56.  if v2 == 0 then goto L28ad5e;
  #L28ad5a.  v1:= 0I;
  #L28ad5c.  goto L28ad6a;
  #L28ad5e.  call temp:= `b`(v1) @signature `Lcom/bumptech/glide/l/a;.b:(Lcom/bumptech/glide/l/a;)I` @kind static;
  #L28ad64.  v1:= temp;
  #L28ad66.  v1:= new `boolean`[v1];
  #L28ad6a.  v0.`com.bumptech.glide.l.a$c.b` @type ^`boolean`[] := v1 @kind object;
  #L28ad6e.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.l.a$c` v0 @kind this, `com.bumptech.glide.l.a` v1 @kind object, `com.bumptech.glide.l.a$d` v2 @kind object, `com.bumptech.glide.l.a$a` v3 @kind object) @signature `Lcom/bumptech/glide/l/a$c;.<init>:(Lcom/bumptech/glide/l/a;Lcom/bumptech/glide/l/a$d;Lcom/bumptech/glide/l/a$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L28ad80.  call `<init>`(v0, v1, v2) @signature `Lcom/bumptech/glide/l/a$c;.<init>:(Lcom/bumptech/glide/l/a;Lcom/bumptech/glide/l/a$d;)V` @kind direct;
  #L28ad86.  return @kind void;
}
procedure `com.bumptech.glide.l.a$d` `a`(`com.bumptech.glide.l.a$c` v0 @kind object) @signature `Lcom/bumptech/glide/l/a$c;.a:(Lcom/bumptech/glide/l/a$c;)Lcom/bumptech/glide/l/a$d;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L28ac90.  v0:= v0.`com.bumptech.glide.l.a$c.a` @type ^`com.bumptech.glide.l.a$d` @kind object;
  #L28ac94.  return v0 @kind object;
}
procedure `boolean`[] `b`(`com.bumptech.glide.l.a$c` v0 @kind object) @signature `Lcom/bumptech/glide/l/a$c;.b:(Lcom/bumptech/glide/l/a$c;)[Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L28ac78.  v0:= v0.`com.bumptech.glide.l.a$c.b` @type ^`boolean`[] @kind object;
  #L28ac7c.  return v0 @kind object;
}
procedure `void` `abort`(`com.bumptech.glide.l.a$c` v2 @kind this) @signature `Lcom/bumptech/glide/l/a$c;.abort:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28ad98.  v0:= v2.`com.bumptech.glide.l.a$c.d` @type ^`com.bumptech.glide.l.a` @kind object;
  #L28ad9c.  v1:= 0I;
  #L28ad9e.  call `a`(v0, v2, v1) @signature `Lcom/bumptech/glide/l/a;.a:(Lcom/bumptech/glide/l/a;Lcom/bumptech/glide/l/a$c;Z)V` @kind static;
  #L28ada4.  return @kind void;
}
procedure `void` `abortUnlessCommitted`(`com.bumptech.glide.l.a$c` v1 @kind this) @signature `Lcom/bumptech/glide/l/a$c;.abortUnlessCommitted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28adb8.  v0:= v1.`com.bumptech.glide.l.a$c.c` @type ^`boolean` @kind boolean;
  #L28adbc.  if v0 != 0 then goto L28adc6;
  #L28adc0.  call `abort`(v1) @signature `Lcom/bumptech/glide/l/a$c;.abort:()V` @kind virtual;
  #L28adc6.  return @kind void;
  catch `java.io.IOException` @[L28adc0..L28adc6] goto L28adc6;
}
procedure `void` `commit`(`com.bumptech.glide.l.a$c` v2 @kind this) @signature `Lcom/bumptech/glide/l/a$c;.commit:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28ade8.  v0:= v2.`com.bumptech.glide.l.a$c.d` @type ^`com.bumptech.glide.l.a` @kind object;
  #L28adec.  v1:= 1I;
  #L28adee.  call `a`(v0, v2, v1) @signature `Lcom/bumptech/glide/l/a;.a:(Lcom/bumptech/glide/l/a;Lcom/bumptech/glide/l/a$c;Z)V` @kind static;
  #L28adf4.  v2.`com.bumptech.glide.l.a$c.c` @type ^`boolean` := v1 @kind boolean;
  #L28adf8.  return @kind void;
}
procedure `java.io.File` `getFile`(`com.bumptech.glide.l.a$c` v3 @kind this, `int` v4 ) @signature `Lcom/bumptech/glide/l/a$c;.getFile:(I)Ljava/io/File;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28aca8.  v0:= v3.`com.bumptech.glide.l.a$c.d` @type ^`com.bumptech.glide.l.a` @kind object;
  #L28acac.  @monitorenter v0
  #L28acae.  v1:= v3.`com.bumptech.glide.l.a$c.a` @type ^`com.bumptech.glide.l.a$d` @kind object;
  #L28acb2.  call temp:= `e`(v1) @signature `Lcom/bumptech/glide/l/a$d;.e:(Lcom/bumptech/glide/l/a$d;)Lcom/bumptech/glide/l/a$c;` @kind static;
  #L28acb8.  v1:= temp @kind object;
  #L28acba.  if v1 != v3 then goto L28ad12;
  #L28acbe.  v1:= v3.`com.bumptech.glide.l.a$c.a` @type ^`com.bumptech.glide.l.a$d` @kind object;
  #L28acc2.  call temp:= `d`(v1) @signature `Lcom/bumptech/glide/l/a$d;.d:(Lcom/bumptech/glide/l/a$d;)Z` @kind static;
  #L28acc8.  v1:= temp;
  #L28acca.  if v1 != 0 then goto L28acd8;
  #L28acce.  v1:= v3.`com.bumptech.glide.l.a$c.b` @type ^`boolean`[] @kind object;
  #L28acd2.  v2:= 1I;
  #L28acd4.  v1[v4]:= v2 @kind boolean;
  #L28acd8.  v1:= v3.`com.bumptech.glide.l.a$c.a` @type ^`com.bumptech.glide.l.a$d` @kind object;
  #L28acdc.  call temp:= `getDirtyFile`(v1, v4) @signature `Lcom/bumptech/glide/l/a$d;.getDirtyFile:(I)Ljava/io/File;` @kind virtual;
  #L28ace2.  v4:= temp @kind object;
  #L28ace4.  v1:= v3.`com.bumptech.glide.l.a$c.d` @type ^`com.bumptech.glide.l.a` @kind object;
  #L28ace8.  call temp:= `d`(v1) @signature `Lcom/bumptech/glide/l/a;.d:(Lcom/bumptech/glide/l/a;)Ljava/io/File;` @kind static;
  #L28acee.  v1:= temp @kind object;
  #L28acf0.  call temp:= `exists`(v1) @signature `Ljava/io/File;.exists:()Z` @kind virtual;
  #L28acf6.  v1:= temp;
  #L28acf8.  if v1 != 0 then goto L28ad0e;
  #L28acfc.  v1:= v3.`com.bumptech.glide.l.a$c.d` @type ^`com.bumptech.glide.l.a` @kind object;
  #L28ad00.  call temp:= `d`(v1) @signature `Lcom/bumptech/glide/l/a;.d:(Lcom/bumptech/glide/l/a;)Ljava/io/File;` @kind static;
  #L28ad06.  v1:= temp @kind object;
  #L28ad08.  call temp:= `mkdirs`(v1) @signature `Ljava/io/File;.mkdirs:()Z` @kind virtual;
  #L28ad0e.  @monitorexit v0
  #L28ad10.  return v4 @kind object;
  #L28ad12.  v4:= new `java.lang.IllegalStateException`;
  #L28ad16.  call `<init>`(v4) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L28ad1c.  throw v4;
  #L28ad1e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28ad20.  @monitorexit v0
  #L28ad22.  throw v4;
  catch `java.lang.Throwable` @[L28acae..L28ad22] goto L28ad1e;
}
