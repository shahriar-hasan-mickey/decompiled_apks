record `com.bumptech.glide.l.b` @kind class @AccessFlag  extends `java.io.Closeable` @kind interface {
  `java.io.InputStream` `com.bumptech.glide.l.b.f` @AccessFlag PRIVATE_FINAL;
  `java.nio.charset.Charset` `com.bumptech.glide.l.b.g` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.bumptech.glide.l.b.h` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.l.b.i` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.l.b.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.l.b` v1 @kind this, `java.io.InputStream` v2 @kind object, `int` v3 , `java.nio.charset.Charset` v4 @kind object) @signature `Lcom/bumptech/glide/l/b;.<init>:(Ljava/io/InputStream;ILjava/nio/charset/Charset;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L28c4d0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28c4d6.  if v2 == 0 then goto L28c524;
  #L28c4da.  if v4 == 0 then goto L28c524;
  #L28c4de.  if v3 < 0 then goto L28c514;
  #L28c4e2.  v0:= `@@com.bumptech.glide.l.c.a` @type ^`java.nio.charset.Charset` @kind object;
  #L28c4e6.  call temp:= `equals`(v4, v0) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L28c4ec.  v0:= temp;
  #L28c4ee.  if v0 == 0 then goto L28c504;
  #L28c4f2.  v1.`com.bumptech.glide.l.b.f` @type ^`java.io.InputStream` := v2 @kind object;
  #L28c4f6.  v1.`com.bumptech.glide.l.b.g` @type ^`java.nio.charset.Charset` := v4 @kind object;
  #L28c4fa.  v2:= new `byte`[v3];
  #L28c4fe.  v1.`com.bumptech.glide.l.b.h` @type ^`byte`[] := v2 @kind object;
  #L28c502.  return @kind void;
  #L28c504.  v2:= new `java.lang.IllegalArgumentException`;
  #L28c508.  v3:= "Unsupported encoding" @kind object;
  #L28c50c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28c512.  throw v2;
  #L28c514.  v2:= new `java.lang.IllegalArgumentException`;
  #L28c518.  v3:= "capacity <= 0" @kind object;
  #L28c51c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28c522.  throw v2;
  #L28c524.  v2:= new `java.lang.NullPointerException`;
  #L28c528.  call `<init>`(v2) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L28c52e.  throw v2;
}
procedure `void` `<init>`(`com.bumptech.glide.l.b` v1 @kind this, `java.io.InputStream` v2 @kind object, `java.nio.charset.Charset` v3 @kind object) @signature `Lcom/bumptech/glide/l/b;.<init>:(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L28c540.  v0:= 8192I;
  #L28c544.  call `<init>`(v1, v2, v0, v3) @signature `Lcom/bumptech/glide/l/b;.<init>:(Ljava/io/InputStream;ILjava/nio/charset/Charset;)V` @kind direct;
  #L28c54a.  return @kind void;
}
procedure `java.nio.charset.Charset` `a`(`com.bumptech.glide.l.b` v0 @kind object) @signature `Lcom/bumptech/glide/l/b;.a:(Lcom/bumptech/glide/l/b;)Ljava/nio/charset/Charset;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L28c4b8.  v0:= v0.`com.bumptech.glide.l.b.g` @type ^`java.nio.charset.Charset` @kind object;
  #L28c4bc.  return v0 @kind object;
}
procedure `void` `a`(`com.bumptech.glide.l.b` v4 @kind this) @signature `Lcom/bumptech/glide/l/b;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L28c5a0.  v0:= v4.`com.bumptech.glide.l.b.f` @type ^`java.io.InputStream` @kind object;
  #L28c5a4.  v1:= v4.`com.bumptech.glide.l.b.h` @type ^`byte`[] @kind object;
  #L28c5a8.  v2:= length @variable v1;
  #L28c5aa.  v3:= 0I;
  #L28c5ac.  call temp:= `read`(v0, v1, v3, v2) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L28c5b2.  v0:= temp;
  #L28c5b4.  v1:= -1I;
  #L28c5b6.  if v0 == v1 then goto L28c5c4;
  #L28c5ba.  v4.`com.bumptech.glide.l.b.i` @type ^`int` := v3;
  #L28c5be.  v4.`com.bumptech.glide.l.b.j` @type ^`int` := v0;
  #L28c5c2.  return @kind void;
  #L28c5c4.  v0:= new `java.io.EOFException`;
  #L28c5c8.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L28c5ce.  throw v0;
}
procedure `void` `close`(`com.bumptech.glide.l.b` v2 @kind this) @signature `Lcom/bumptech/glide/l/b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28c55c.  v0:= v2.`com.bumptech.glide.l.b.f` @type ^`java.io.InputStream` @kind object;
  #L28c560.  @monitorenter v0
  #L28c562.  v1:= v2.`com.bumptech.glide.l.b.h` @type ^`byte`[] @kind object;
  #L28c566.  if v1 == 0 then goto L28c57a;
  #L28c56a.  v1:= 0I;
  #L28c56c.  v2.`com.bumptech.glide.l.b.h` @type ^`byte`[] := v1 @kind object;
  #L28c570.  v1:= v2.`com.bumptech.glide.l.b.f` @type ^`java.io.InputStream` @kind object;
  #L28c574.  call `close`(v1) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L28c57a.  @monitorexit v0
  #L28c57c.  return @kind void;
  #L28c57e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28c580.  @monitorexit v0
  #L28c582.  throw v1;
  catch `java.lang.Throwable` @[L28c562..L28c582] goto L28c57e;
}
procedure `boolean` `hasUnterminatedLine`(`com.bumptech.glide.l.b` v2 @kind this) @signature `Lcom/bumptech/glide/l/b;.hasUnterminatedLine:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28c344.  v0:= v2.`com.bumptech.glide.l.b.j` @type ^`int`;
  #L28c348.  v1:= -1I;
  #L28c34a.  if v0 != v1 then goto L28c352;
  #L28c34e.  v0:= 1I;
  #L28c350.  goto L28c354;
  #L28c352.  v0:= 0I;
  #L28c354.  return v0;
}
procedure `java.lang.String` `readLine`(`com.bumptech.glide.l.b` v7 @kind this) @signature `Lcom/bumptech/glide/l/b;.readLine:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L28c368.  v0:= v7.`com.bumptech.glide.l.b.f` @type ^`java.io.InputStream` @kind object;
  #L28c36c.  @monitorenter v0
  #L28c36e.  v1:= v7.`com.bumptech.glide.l.b.h` @type ^`byte`[] @kind object;
  #L28c372.  if v1 == 0 then goto L28c486;
  #L28c376.  v1:= v7.`com.bumptech.glide.l.b.i` @type ^`int`;
  #L28c37a.  v2:= v7.`com.bumptech.glide.l.b.j` @type ^`int`;
  #L28c37e.  if v1 < v2 then goto L28c388;
  #L28c382.  call `a`(v7) @signature `Lcom/bumptech/glide/l/b;.a:()V` @kind direct;
  #L28c388.  v1:= v7.`com.bumptech.glide.l.b.i` @type ^`int`;
  #L28c38c.  v2:= v7.`com.bumptech.glide.l.b.j` @type ^`int`;
  #L28c390.  v3:= 10I;
  #L28c394.  if v1 == v2 then goto L28c3fa;
  #L28c398.  v2:= v7.`com.bumptech.glide.l.b.h` @type ^`byte`[] @kind object;
  #L28c39c.  v2:= v2[v1] @kind byte;
  #L28c3a0.  if v2 != v3 then goto L28c3f4;
  #L28c3a4.  v2:= v7.`com.bumptech.glide.l.b.i` @type ^`int`;
  #L28c3a8.  if v1 == v2 then goto L28c3c2;
  #L28c3ac.  v2:= v7.`com.bumptech.glide.l.b.h` @type ^`byte`[] @kind object;
  #L28c3b0.  v3:= v1 + -1;
  #L28c3b4.  v2:= v2[v3] @kind byte;
  #L28c3b8.  v4:= 13I;
  #L28c3bc.  if v2 != v4 then goto L28c3c2;
  #L28c3c0.  goto L28c3c4;
  #L28c3c2.  v3:= v1;
  #L28c3c4.  v2:= new `java.lang.String`;
  #L28c3c8.  v4:= v7.`com.bumptech.glide.l.b.h` @type ^`byte`[] @kind object;
  #L28c3cc.  v5:= v7.`com.bumptech.glide.l.b.i` @type ^`int`;
  #L28c3d0.  v6:= v7.`com.bumptech.glide.l.b.i` @type ^`int`;
  #L28c3d4.  v3:= v3 - v6 @kind int;
  #L28c3d6.  v6:= v7.`com.bumptech.glide.l.b.g` @type ^`java.nio.charset.Charset` @kind object;
  #L28c3da.  call temp:= `name`(v6) @signature `Ljava/nio/charset/Charset;.name:()Ljava/lang/String;` @kind virtual;
  #L28c3e0.  v6:= temp @kind object;
  #L28c3e2.  call `<init>`(v2, v4, v5, v3, v6) @signature `Ljava/lang/String;.<init>:([BIILjava/lang/String;)V` @kind direct;
  #L28c3e8.  v1:= v1 + 1;
  #L28c3ec.  v7.`com.bumptech.glide.l.b.i` @type ^`int` := v1;
  #L28c3f0.  @monitorexit v0
  #L28c3f2.  return v2 @kind object;
  #L28c3f4.  v1:= v1 + 1;
  #L28c3f8.  goto L28c38c;
  #L28c3fa.  v1:= new `com.bumptech.glide.l.b$a`;
  #L28c3fe.  v2:= v7.`com.bumptech.glide.l.b.j` @type ^`int`;
  #L28c402.  v4:= v7.`com.bumptech.glide.l.b.i` @type ^`int`;
  #L28c406.  v2:= v2 - v4 @kind int;
  #L28c408.  v2:= v2 + 80;
  #L28c40c.  call `<init>`(v1, v7, v2) @signature `Lcom/bumptech/glide/l/b$a;.<init>:(Lcom/bumptech/glide/l/b;I)V` @kind direct;
  #L28c412.  v2:= v7.`com.bumptech.glide.l.b.h` @type ^`byte`[] @kind object;
  #L28c416.  v4:= v7.`com.bumptech.glide.l.b.i` @type ^`int`;
  #L28c41a.  v5:= v7.`com.bumptech.glide.l.b.j` @type ^`int`;
  #L28c41e.  v6:= v7.`com.bumptech.glide.l.b.i` @type ^`int`;
  #L28c422.  v5:= v5 - v6 @kind int;
  #L28c424.  call `write`(v1, v2, v4, v5) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L28c42a.  v2:= -1I;
  #L28c42c.  v7.`com.bumptech.glide.l.b.j` @type ^`int` := v2;
  #L28c430.  call `a`(v7) @signature `Lcom/bumptech/glide/l/b;.a:()V` @kind direct;
  #L28c436.  v2:= v7.`com.bumptech.glide.l.b.i` @type ^`int`;
  #L28c43a.  v4:= v7.`com.bumptech.glide.l.b.j` @type ^`int`;
  #L28c43e.  if v2 == v4 then goto L28c412;
  #L28c442.  v4:= v7.`com.bumptech.glide.l.b.h` @type ^`byte`[] @kind object;
  #L28c446.  v4:= v4[v2] @kind byte;
  #L28c44a.  if v4 != v3 then goto L28c480;
  #L28c44e.  v3:= v7.`com.bumptech.glide.l.b.i` @type ^`int`;
  #L28c452.  if v2 == v3 then goto L28c46c;
  #L28c456.  v3:= v7.`com.bumptech.glide.l.b.h` @type ^`byte`[] @kind object;
  #L28c45a.  v4:= v7.`com.bumptech.glide.l.b.i` @type ^`int`;
  #L28c45e.  v5:= v7.`com.bumptech.glide.l.b.i` @type ^`int`;
  #L28c462.  v5:= v2 - v5 @kind int;
  #L28c466.  call `write`(v1, v3, v4, v5) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L28c46c.  v2:= v2 + 1;
  #L28c470.  v7.`com.bumptech.glide.l.b.i` @type ^`int` := v2;
  #L28c474.  call temp:= `toString`(v1) @signature `Lcom/bumptech/glide/l/b$a;.toString:()Ljava/lang/String;` @kind virtual;
  #L28c47a.  v1:= temp @kind object;
  #L28c47c.  @monitorexit v0
  #L28c47e.  return v1 @kind object;
  #L28c480.  v2:= v2 + 1;
  #L28c484.  goto L28c43a;
  #L28c486.  v1:= new `java.io.IOException`;
  #L28c48a.  v2:= "LineReader is closed" @kind object;
  #L28c48e.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28c494.  throw v1;
  #L28c496.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28c498.  @monitorexit v0
  #L28c49a.  throw v1;
  catch `java.lang.Throwable` @[L28c36e..L28c49a] goto L28c496;
}
