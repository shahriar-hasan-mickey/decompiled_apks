record `com.bumptech.glide.p.a` @kind class @AccessFlag PUBLIC {
  `java.util.List` `com.bumptech.glide.p.a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.p.a` v1 @kind this) @signature `Lcom/bumptech/glide/p/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2a6660.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a6666.  v0:= new `java.util.ArrayList`;
  #L2a666a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2a6670.  v1.`com.bumptech.glide.p.a.a` @type ^`java.util.List` := v0 @kind object;
  #L2a6674.  return @kind void;
}
procedure `void` `append`(`com.bumptech.glide.p.a` v2 @kind this, `java.lang.Class` v3 @kind object, `com.bumptech.glide.load.d` v4 @kind object) @signature `Lcom/bumptech/glide/p/a;.append:(Ljava/lang/Class;Lcom/bumptech/glide/load/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a6688.  @monitorenter v2
  #L2a668a.  v0:= v2.`com.bumptech.glide.p.a.a` @type ^`java.util.List` @kind object;
  #L2a668e.  v1:= new `com.bumptech.glide.p.a$a`;
  #L2a6692.  call `<init>`(v1, v3, v4) @signature `Lcom/bumptech/glide/p/a$a;.<init>:(Ljava/lang/Class;Lcom/bumptech/glide/load/d;)V` @kind direct;
  #L2a6698.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a669e.  @monitorexit v2
  #L2a66a0.  return @kind void;
  #L2a66a2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a66a4.  @monitorexit v2
  #L2a66a6.  throw v3;
  catch `java.lang.Throwable` @[L2a668a..L2a669e] goto L2a66a2;
}
procedure `com.bumptech.glide.load.d` `getEncoder`(`com.bumptech.glide.p.a` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lcom/bumptech/glide/p/a;.getEncoder:(Ljava/lang/Class;)Lcom/bumptech/glide/load/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a65fc.  @monitorenter v3
  #L2a65fe.  v0:= v3.`com.bumptech.glide.p.a.a` @type ^`java.util.List` @kind object;
  #L2a6602.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a6608.  v0:= temp @kind object;
  #L2a660a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a6610.  v1:= temp;
  #L2a6612.  if v1 == 0 then goto L2a6636;
  #L2a6616.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a661c.  v1:= temp @kind object;
  #L2a661e.  v1:= (`com.bumptech.glide.p.a$a`) v1 @kind object;
  #L2a6622.  call temp:= `a`(v1, v4) @signature `Lcom/bumptech/glide/p/a$a;.a:(Ljava/lang/Class;)Z` @kind virtual;
  #L2a6628.  v2:= temp;
  #L2a662a.  if v2 == 0 then goto L2a660a;
  #L2a662e.  v4:= v1.`com.bumptech.glide.p.a$a.b` @type ^`com.bumptech.glide.load.d` @kind object;
  #L2a6632.  @monitorexit v3
  #L2a6634.  return v4 @kind object;
  #L2a6636.  v4:= 0I;
  #L2a6638.  @monitorexit v3
  #L2a663a.  return v4 @kind object;
  #L2a663c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a663e.  @monitorexit v3
  #L2a6640.  throw v4;
  catch `java.lang.Throwable` @[L2a65fe..L2a6632] goto L2a663c;
}
