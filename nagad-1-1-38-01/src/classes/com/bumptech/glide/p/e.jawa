record `com.bumptech.glide.p.e` @kind class @AccessFlag PUBLIC {
  `java.util.List` `com.bumptech.glide.p.e.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.p.e.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.p.e` v1 @kind this) @signature `Lcom/bumptech/glide/p/e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2a6bec.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a6bf2.  v0:= new `java.util.ArrayList`;
  #L2a6bf6.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2a6bfc.  v1.`com.bumptech.glide.p.e.a` @type ^`java.util.List` := v0 @kind object;
  #L2a6c00.  v0:= new `java.util.HashMap`;
  #L2a6c04.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L2a6c0a.  v1.`com.bumptech.glide.p.e.b` @type ^`java.util.Map` := v0 @kind object;
  #L2a6c0e.  return @kind void;
}
procedure `java.util.List` `a`(`com.bumptech.glide.p.e` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/p/e;.a:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2a6acc.  @monitorenter v2
  #L2a6ace.  v0:= v2.`com.bumptech.glide.p.e.a` @type ^`java.util.List` @kind object;
  #L2a6ad2.  call temp:= `contains`(v0, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2a6ad8.  v0:= temp;
  #L2a6ada.  if v0 != 0 then goto L2a6ae8;
  #L2a6ade.  v0:= v2.`com.bumptech.glide.p.e.a` @type ^`java.util.List` @kind object;
  #L2a6ae2.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a6ae8.  v0:= v2.`com.bumptech.glide.p.e.b` @type ^`java.util.Map` @kind object;
  #L2a6aec.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2a6af2.  v0:= temp @kind object;
  #L2a6af4.  v0:= (`java.util.List`) v0 @kind object;
  #L2a6af8.  if v0 != 0 then goto L2a6b10;
  #L2a6afc.  v0:= new `java.util.ArrayList`;
  #L2a6b00.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2a6b06.  v1:= v2.`com.bumptech.glide.p.e.b` @type ^`java.util.Map` @kind object;
  #L2a6b0a.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2a6b10.  @monitorexit v2
  #L2a6b12.  return v0 @kind object;
  #L2a6b14.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a6b16.  @monitorexit v2
  #L2a6b18.  throw v3;
  catch `java.lang.Throwable` @[L2a6ace..L2a6b10] goto L2a6b14;
}
procedure `void` `append`(`com.bumptech.glide.p.e` v1 @kind this, `java.lang.String` v2 @kind object, `com.bumptech.glide.load.j` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lcom/bumptech/glide/p/e;.append:(Ljava/lang/String;Lcom/bumptech/glide/load/j;Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a6c20.  @monitorenter v1
  #L2a6c22.  call temp:= `a`(v1, v2) @signature `Lcom/bumptech/glide/p/e;.a:(Ljava/lang/String;)Ljava/util/List;` @kind direct;
  #L2a6c28.  v2:= temp @kind object;
  #L2a6c2a.  v0:= new `com.bumptech.glide.p.e$a`;
  #L2a6c2e.  call `<init>`(v0, v4, v5, v3) @signature `Lcom/bumptech/glide/p/e$a;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/j;)V` @kind direct;
  #L2a6c34.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a6c3a.  @monitorexit v1
  #L2a6c3c.  return @kind void;
  #L2a6c3e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a6c40.  @monitorexit v1
  #L2a6c42.  throw v2;
  catch `java.lang.Throwable` @[L2a6c22..L2a6c3a] goto L2a6c3e;
}
procedure `java.util.List` `getDecoders`(`com.bumptech.glide.p.e` v5 @kind this, `java.lang.Class` v6 @kind object, `java.lang.Class` v7 @kind object) @signature `Lcom/bumptech/glide/p/e;.getDecoders:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2a6a28.  @monitorenter v5
  #L2a6a2a.  v0:= new `java.util.ArrayList`;
  #L2a6a2e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2a6a34.  v1:= v5.`com.bumptech.glide.p.e.a` @type ^`java.util.List` @kind object;
  #L2a6a38.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a6a3e.  v1:= temp @kind object;
  #L2a6a40.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a6a46.  v2:= temp;
  #L2a6a48.  if v2 == 0 then goto L2a6aa6;
  #L2a6a4c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a6a52.  v2:= temp @kind object;
  #L2a6a54.  v2:= (`java.lang.String`) v2 @kind object;
  #L2a6a58.  v3:= v5.`com.bumptech.glide.p.e.b` @type ^`java.util.Map` @kind object;
  #L2a6a5c.  call temp:= `get`(v3, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2a6a62.  v2:= temp @kind object;
  #L2a6a64.  v2:= (`java.util.List`) v2 @kind object;
  #L2a6a68.  if v2 != 0 then goto L2a6a6e;
  #L2a6a6c.  goto L2a6a40;
  #L2a6a6e.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a6a74.  v2:= temp @kind object;
  #L2a6a76.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a6a7c.  v3:= temp;
  #L2a6a7e.  if v3 == 0 then goto L2a6a40;
  #L2a6a82.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a6a88.  v3:= temp @kind object;
  #L2a6a8a.  v3:= (`com.bumptech.glide.p.e$a`) v3 @kind object;
  #L2a6a8e.  call temp:= `handles`(v3, v6, v7) @signature `Lcom/bumptech/glide/p/e$a;.handles:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L2a6a94.  v4:= temp;
  #L2a6a96.  if v4 == 0 then goto L2a6a76;
  #L2a6a9a.  v3:= v3.`com.bumptech.glide.p.e$a.c` @type ^`com.bumptech.glide.load.j` @kind object;
  #L2a6a9e.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a6aa4.  goto L2a6a76;
  #L2a6aa6.  @monitorexit v5
  #L2a6aa8.  return v0 @kind object;
  #L2a6aaa.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a6aac.  @monitorexit v5
  #L2a6aae.  throw v6;
  catch `java.lang.Throwable` @[L2a6a2a..L2a6aa4] goto L2a6aaa;
}
procedure `java.util.List` `getResourceClasses`(`com.bumptech.glide.p.e` v5 @kind this, `java.lang.Class` v6 @kind object, `java.lang.Class` v7 @kind object) @signature `Lcom/bumptech/glide/p/e;.getResourceClasses:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2a6b38.  @monitorenter v5
  #L2a6b3a.  v0:= new `java.util.ArrayList`;
  #L2a6b3e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2a6b44.  v1:= v5.`com.bumptech.glide.p.e.a` @type ^`java.util.List` @kind object;
  #L2a6b48.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a6b4e.  v1:= temp @kind object;
  #L2a6b50.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a6b56.  v2:= temp;
  #L2a6b58.  if v2 == 0 then goto L2a6bc6;
  #L2a6b5c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a6b62.  v2:= temp @kind object;
  #L2a6b64.  v2:= (`java.lang.String`) v2 @kind object;
  #L2a6b68.  v3:= v5.`com.bumptech.glide.p.e.b` @type ^`java.util.Map` @kind object;
  #L2a6b6c.  call temp:= `get`(v3, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2a6b72.  v2:= temp @kind object;
  #L2a6b74.  v2:= (`java.util.List`) v2 @kind object;
  #L2a6b78.  if v2 != 0 then goto L2a6b7e;
  #L2a6b7c.  goto L2a6b50;
  #L2a6b7e.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a6b84.  v2:= temp @kind object;
  #L2a6b86.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a6b8c.  v3:= temp;
  #L2a6b8e.  if v3 == 0 then goto L2a6b50;
  #L2a6b92.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a6b98.  v3:= temp @kind object;
  #L2a6b9a.  v3:= (`com.bumptech.glide.p.e$a`) v3 @kind object;
  #L2a6b9e.  call temp:= `handles`(v3, v6, v7) @signature `Lcom/bumptech/glide/p/e$a;.handles:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L2a6ba4.  v4:= temp;
  #L2a6ba6.  if v4 == 0 then goto L2a6b86;
  #L2a6baa.  v4:= v3.`com.bumptech.glide.p.e$a.b` @type ^`java.lang.Class` @kind object;
  #L2a6bae.  call temp:= `contains`(v0, v4) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2a6bb4.  v4:= temp;
  #L2a6bb6.  if v4 != 0 then goto L2a6b86;
  #L2a6bba.  v3:= v3.`com.bumptech.glide.p.e$a.b` @type ^`java.lang.Class` @kind object;
  #L2a6bbe.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a6bc4.  goto L2a6b86;
  #L2a6bc6.  @monitorexit v5
  #L2a6bc8.  return v0 @kind object;
  #L2a6bca.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a6bcc.  @monitorexit v5
  #L2a6bce.  throw v6;
  catch `java.lang.Throwable` @[L2a6b3a..L2a6bc4] goto L2a6bca;
}
procedure `void` `setBucketPriorityList`(`com.bumptech.glide.p.e` v4 @kind this, `java.util.List` v5 @kind object) @signature `Lcom/bumptech/glide/p/e;.setBucketPriorityList:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2a6c60.  @monitorenter v4
  #L2a6c62.  v0:= new `java.util.ArrayList`;
  #L2a6c66.  v1:= v4.`com.bumptech.glide.p.e.a` @type ^`java.util.List` @kind object;
  #L2a6c6a.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L2a6c70.  v1:= v4.`com.bumptech.glide.p.e.a` @type ^`java.util.List` @kind object;
  #L2a6c74.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L2a6c7a.  call temp:= `iterator`(v5) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a6c80.  v1:= temp @kind object;
  #L2a6c82.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a6c88.  v2:= temp;
  #L2a6c8a.  if v2 == 0 then goto L2a6ca6;
  #L2a6c8e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a6c94.  v2:= temp @kind object;
  #L2a6c96.  v2:= (`java.lang.String`) v2 @kind object;
  #L2a6c9a.  v3:= v4.`com.bumptech.glide.p.e.a` @type ^`java.util.List` @kind object;
  #L2a6c9e.  call temp:= `add`(v3, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a6ca4.  goto L2a6c82;
  #L2a6ca6.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a6cac.  v0:= temp @kind object;
  #L2a6cae.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a6cb4.  v1:= temp;
  #L2a6cb6.  if v1 == 0 then goto L2a6cde;
  #L2a6cba.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a6cc0.  v1:= temp @kind object;
  #L2a6cc2.  v1:= (`java.lang.String`) v1 @kind object;
  #L2a6cc6.  call temp:= `contains`(v5, v1) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2a6ccc.  v2:= temp;
  #L2a6cce.  if v2 != 0 then goto L2a6cae;
  #L2a6cd2.  v2:= v4.`com.bumptech.glide.p.e.a` @type ^`java.util.List` @kind object;
  #L2a6cd6.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a6cdc.  goto L2a6cae;
  #L2a6cde.  @monitorexit v4
  #L2a6ce0.  return @kind void;
  #L2a6ce2.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a6ce4.  @monitorexit v4
  #L2a6ce6.  throw v5;
  catch `java.lang.Throwable` @[L2a6c62..L2a6cdc] goto L2a6ce2;
}
