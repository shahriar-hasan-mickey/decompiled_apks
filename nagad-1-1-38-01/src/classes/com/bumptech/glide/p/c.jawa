record `com.bumptech.glide.p.c` @kind class @AccessFlag PUBLIC {
  `c.e.a` `com.bumptech.glide.p.c.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `com.bumptech.glide.p.c.b` @AccessFlag PRIVATE_FINAL;
}
global `com.bumptech.glide.load.engine.s` `@@com.bumptech.glide.p.c.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/p/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L2a67fc.  v6:= new `com.bumptech.glide.load.engine.s`;
  #L2a6800.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L2a6804.  v2:= constclass @type ^`java.lang.Object` @kind object;
  #L2a6808.  v3:= constclass @type ^`java.lang.Object` @kind object;
  #L2a680c.  v0:= new `com.bumptech.glide.load.engine.i`;
  #L2a6810.  v8:= constclass @type ^`java.lang.Object` @kind object;
  #L2a6814.  v9:= constclass @type ^`java.lang.Object` @kind object;
  #L2a6818.  v10:= constclass @type ^`java.lang.Object` @kind object;
  #L2a681c.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L2a6822.  v11:= temp @kind object;
  #L2a6824.  v12:= new `com.bumptech.glide.load.o.h.g`;
  #L2a6828.  call `<init>`(v12) @signature `Lcom/bumptech/glide/load/o/h/g;.<init>:()V` @kind direct;
  #L2a682e.  v13:= 0I;
  #L2a6830.  v7:= v0 @kind object;
  #L2a6832.  call `<init>`(v7, v8, v9, v10, v11, v12, v13) @signature `Lcom/bumptech/glide/load/engine/i;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;Ljava/util/List;Lcom/bumptech/glide/load/o/h/e;Lc/h/i/d;)V` @kind direct;
  #L2a6838.  call temp:= `singletonList`(v0) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2a683e.  v4:= temp @kind object;
  #L2a6840.  v5:= 0I;
  #L2a6842.  v0:= v6 @kind object;
  #L2a6844.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/bumptech/glide/load/engine/s;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;Ljava/util/List;Lc/h/i/d;)V` @kind direct;
  #L2a684a.  `@@com.bumptech.glide.p.c.c` @type ^`com.bumptech.glide.load.engine.s` := v6 @kind object;
  #L2a684e.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.p.c` v1 @kind this) @signature `Lcom/bumptech/glide/p/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2a6860.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a6866.  v0:= new `c.e.a`;
  #L2a686a.  call `<init>`(v0) @signature `Lc/e/a;.<init>:()V` @kind direct;
  #L2a6870.  v1.`com.bumptech.glide.p.c.a` @type ^`c.e.a` := v0 @kind object;
  #L2a6874.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2a6878.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2a687e.  v1.`com.bumptech.glide.p.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L2a6882.  return @kind void;
}
procedure `com.bumptech.glide.s.i` `a`(`com.bumptech.glide.p.c` v2 @kind this, `java.lang.Class` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lcom/bumptech/glide/p/c;.a:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/s/i;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2a67c4.  v0:= v2.`com.bumptech.glide.p.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2a67c8.  v1:= 0I;
  #L2a67ca.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2a67d0.  v0:= temp @kind object;
  #L2a67d2.  v0:= (`com.bumptech.glide.s.i`) v0 @kind object;
  #L2a67d6.  if v0 != 0 then goto L2a67e4;
  #L2a67da.  v0:= new `com.bumptech.glide.s.i`;
  #L2a67de.  call `<init>`(v0) @signature `Lcom/bumptech/glide/s/i;.<init>:()V` @kind direct;
  #L2a67e4.  call `set`(v0, v3, v4, v5) @signature `Lcom/bumptech/glide/s/i;.set:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)V` @kind virtual;
  #L2a67ea.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.s` `get`(`com.bumptech.glide.p.c` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/bumptech/glide/p/c;.get:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/load/engine/s;` @AccessFlag PUBLIC {
    temp;

  #L2a676c.  call temp:= `a`(v0, v1, v2, v3) @signature `Lcom/bumptech/glide/p/c;.a:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/s/i;` @kind direct;
  #L2a6772.  v1:= temp @kind object;
  #L2a6774.  v2:= v0.`com.bumptech.glide.p.c.a` @type ^`c.e.a` @kind object;
  #L2a6778.  @monitorenter v2
  #L2a677a.  v3:= v0.`com.bumptech.glide.p.c.a` @type ^`c.e.a` @kind object;
  #L2a677e.  call temp:= `get`(v3, v1) @signature `Lc/e/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2a6784.  v3:= temp @kind object;
  #L2a6786.  v3:= (`com.bumptech.glide.load.engine.s`) v3 @kind object;
  #L2a678a.  @monitorexit v2
  #L2a678c.  v2:= v0.`com.bumptech.glide.p.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2a6790.  call `set`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L2a6796.  return v3 @kind object;
  #L2a6798.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a679a.  @monitorexit v2
  #L2a679c.  throw v1;
  catch `java.lang.Throwable` @[L2a677a..L2a678c] goto L2a6798;
  catch `java.lang.Throwable` @[L2a679a..L2a679c] goto L2a6798;
}
procedure `boolean` `isEmptyLoadPath`(`com.bumptech.glide.p.c` v1 @kind this, `com.bumptech.glide.load.engine.s` v2 @kind object) @signature `Lcom/bumptech/glide/p/c;.isEmptyLoadPath:(Lcom/bumptech/glide/load/engine/s;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a674c.  v0:= `@@com.bumptech.glide.p.c.c` @type ^`com.bumptech.glide.load.engine.s` @kind object;
  #L2a6750.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2a6756.  v2:= temp;
  #L2a6758.  return v2;
}
procedure `void` `put`(`com.bumptech.glide.p.c` v3 @kind this, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object, `java.lang.Class` v6 @kind object, `com.bumptech.glide.load.engine.s` v7 @kind object) @signature `Lcom/bumptech/glide/p/c;.put:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/engine/s;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a6894.  v0:= v3.`com.bumptech.glide.p.c.a` @type ^`c.e.a` @kind object;
  #L2a6898.  @monitorenter v0
  #L2a689a.  v1:= v3.`com.bumptech.glide.p.c.a` @type ^`c.e.a` @kind object;
  #L2a689e.  v2:= new `com.bumptech.glide.s.i`;
  #L2a68a2.  call `<init>`(v2, v4, v5, v6) @signature `Lcom/bumptech/glide/s/i;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)V` @kind direct;
  #L2a68a8.  if v7 == 0 then goto L2a68ae;
  #L2a68ac.  goto L2a68b2;
  #L2a68ae.  v7:= `@@com.bumptech.glide.p.c.c` @type ^`com.bumptech.glide.load.engine.s` @kind object;
  #L2a68b2.  call temp:= `put`(v1, v2, v7) @signature `Lc/e/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2a68b8.  @monitorexit v0
  #L2a68ba.  return @kind void;
  #L2a68bc.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a68be.  @monitorexit v0
  #L2a68c0.  throw v4;
  catch `java.lang.Throwable` @[L2a689a..L2a68c0] goto L2a68bc;
}
