record `com.bumptech.glide.p.e$a` @kind class @AccessFlag  {
  `java.lang.Class` `com.bumptech.glide.p.e$a.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `com.bumptech.glide.p.e$a.b` @AccessFlag FINAL;
  `com.bumptech.glide.load.j` `com.bumptech.glide.p.e$a.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.p.e$a` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object, `com.bumptech.glide.load.j` v3 @kind object) @signature `Lcom/bumptech/glide/p/e$a;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/j;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2a6a04.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a6a0a.  v0.`com.bumptech.glide.p.e$a.a` @type ^`java.lang.Class` := v1 @kind object;
  #L2a6a0e.  v0.`com.bumptech.glide.p.e$a.b` @type ^`java.lang.Class` := v2 @kind object;
  #L2a6a12.  v0.`com.bumptech.glide.p.e$a.c` @type ^`com.bumptech.glide.load.j` := v3 @kind object;
  #L2a6a16.  return @kind void;
}
procedure `boolean` `handles`(`com.bumptech.glide.p.e$a` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/bumptech/glide/p/e$a;.handles:(Ljava/lang/Class;Ljava/lang/Class;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a69cc.  v0:= v1.`com.bumptech.glide.p.e$a.a` @type ^`java.lang.Class` @kind object;
  #L2a69d0.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L2a69d6.  v2:= temp;
  #L2a69d8.  if v2 == 0 then goto L2a69f0;
  #L2a69dc.  v2:= v1.`com.bumptech.glide.p.e$a.b` @type ^`java.lang.Class` @kind object;
  #L2a69e0.  call temp:= `isAssignableFrom`(v3, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L2a69e6.  v2:= temp;
  #L2a69e8.  if v2 == 0 then goto L2a69f0;
  #L2a69ec.  v2:= 1I;
  #L2a69ee.  goto L2a69f2;
  #L2a69f0.  v2:= 0I;
  #L2a69f2.  return v2;
}
