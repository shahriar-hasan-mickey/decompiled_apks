record `com.adjust.sdk.sig.Util` @kind class @AccessFlag  {
}
global `char`[] `@@com.adjust.sdk.sig.Util.hexArray` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/adjust/sdk/sig/Util;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L27b920.  v0:= "0123456789ABCDEF" @kind object;
  #L27b924.  call temp:= `toCharArray`(v0) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L27b92a.  v0:= temp @kind object;
  #L27b92c.  `@@com.adjust.sdk.sig.Util.hexArray` @type ^`char`[] := v0 @kind object;
  #L27b930.  return @kind void;
}
procedure `void` `<init>`(`com.adjust.sdk.sig.Util` v0 @kind this) @signature `Lcom/adjust/sdk/sig/Util;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27b944.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27b94a.  return @kind void;
}
procedure `java.lang.String` `bytesToHex`(`byte`[] v6 @kind object, `int` v7 ) @signature `Lcom/adjust/sdk/sig/Util;.bytesToHex:([BI)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L27b8c4.  v0:= v7 * 2;
  #L27b8c8.  v0:= new `char`[v0];
  #L27b8cc.  v1:= 0I;
  #L27b8ce.  if v1 >= v7 then goto L27b904;
  #L27b8d2.  v2:= v6[v1] @kind byte;
  #L27b8d6.  v2:= v2 ^& 255;
  #L27b8da.  v3:= v1 * 2;
  #L27b8de.  v4:= `@@com.adjust.sdk.sig.Util.hexArray` @type ^`char`[] @kind object;
  #L27b8e2.  v5:= v2 ^>> 4;
  #L27b8e6.  v5:= v4[v5] @kind char;
  #L27b8ea.  v0[v3]:= v5 @kind char;
  #L27b8ee.  v3:= v3 + 1;
  #L27b8f2.  v2:= v2 ^& 15;
  #L27b8f6.  v2:= v4[v2] @kind char;
  #L27b8fa.  v0[v3]:= v2 @kind char;
  #L27b8fe.  v1:= v1 + 1;
  #L27b902.  goto L27b8ce;
  #L27b904.  v6:= new `java.lang.String`;
  #L27b908.  call `<init>`(v6, v0) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L27b90e.  return v6 @kind object;
}
