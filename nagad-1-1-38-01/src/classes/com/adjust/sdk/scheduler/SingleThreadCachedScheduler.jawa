record `com.adjust.sdk.scheduler.SingleThreadCachedScheduler` @kind class @AccessFlag PUBLIC extends `com.adjust.sdk.scheduler.ThreadScheduler` @kind interface {
  `boolean` `com.adjust.sdk.scheduler.SingleThreadCachedScheduler.isTeardown` @AccessFlag PRIVATE;
  `boolean` `com.adjust.sdk.scheduler.SingleThreadCachedScheduler.isThreadProcessing` @AccessFlag PRIVATE;
  `java.util.List` `com.adjust.sdk.scheduler.SingleThreadCachedScheduler.queue` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ThreadPoolExecutor` `com.adjust.sdk.scheduler.SingleThreadCachedScheduler.threadPoolExecutor` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.adjust.sdk.scheduler.SingleThreadCachedScheduler` v10 @kind this, `java.lang.String` v11 @kind object) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L27a5cc.  call `<init>`(v10) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27a5d2.  v0:= new `java.util.ArrayList`;
  #L27a5d6.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L27a5dc.  v10.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.queue` @type ^`java.util.List` := v0 @kind object;
  #L27a5e0.  v0:= 0I;
  #L27a5e2.  v10.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.isThreadProcessing` @type ^`boolean` := v0 @kind boolean;
  #L27a5e6.  v10.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.isTeardown` @type ^`boolean` := v0 @kind boolean;
  #L27a5ea.  v0:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L27a5ee.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L27a5f2.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L27a5f6.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L27a5fc.  v8:= new `com.adjust.sdk.scheduler.ThreadFactoryWrapper`;
  #L27a600.  call `<init>`(v8, v11) @signature `Lcom/adjust/sdk/scheduler/ThreadFactoryWrapper;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27a606.  v9:= new `com.adjust.sdk.scheduler.SingleThreadCachedScheduler$1`;
  #L27a60a.  call `<init>`(v9, v10, v11) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler$1;.<init>:(Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;Ljava/lang/String;)V` @kind direct;
  #L27a610.  v2:= 0I;
  #L27a612.  v3:= 2147483647I;
  #L27a618.  v4:= 60L;
  #L27a61c.  v1:= v0 @kind object;
  #L27a61e.  call `<init>`(v1, v2, v3, v4, v6, v7, v8, v9) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V` @kind direct;
  #L27a624.  v10.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.threadPoolExecutor` @type ^`java.util.concurrent.ThreadPoolExecutor` := v0 @kind object;
  #L27a628.  return @kind void;
}
procedure `void` `access$000`(`com.adjust.sdk.scheduler.SingleThreadCachedScheduler` v0 @kind object, `java.lang.Runnable` v1 @kind object) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;.access$000:(Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;Ljava/lang/Runnable;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L27a63c.  call `tryExecuteRunnable`(v0, v1) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;.tryExecuteRunnable:(Ljava/lang/Runnable;)V` @kind direct;
  #L27a642.  return @kind void;
}
procedure `java.util.List` `access$100`(`com.adjust.sdk.scheduler.SingleThreadCachedScheduler` v0 @kind object) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;.access$100:(Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;)Ljava/util/List;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L27a5b4.  v0:= v0.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.queue` @type ^`java.util.List` @kind object;
  #L27a5b8.  return v0 @kind object;
}
procedure `boolean` `access$200`(`com.adjust.sdk.scheduler.SingleThreadCachedScheduler` v0 @kind object) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;.access$200:(Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L27a584.  v0:= v0.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.isTeardown` @type ^`boolean` @kind boolean;
  #L27a588.  return v0;
}
procedure `boolean` `access$302`(`com.adjust.sdk.scheduler.SingleThreadCachedScheduler` v0 @kind object, `boolean` v1 ) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;.access$302:(Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;Z)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L27a59c.  v0.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.isThreadProcessing` @type ^`boolean` := v1 @kind boolean;
  #L27a5a0.  return v1;
}
procedure `void` `processQueue`(`com.adjust.sdk.scheduler.SingleThreadCachedScheduler` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;.processQueue:(Ljava/lang/Runnable;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L27a654.  v0:= v2.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.threadPoolExecutor` @type ^`java.util.concurrent.ThreadPoolExecutor` @kind object;
  #L27a658.  v1:= new `com.adjust.sdk.scheduler.SingleThreadCachedScheduler$3`;
  #L27a65c.  call `<init>`(v1, v2, v3) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler$3;.<init>:(Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;Ljava/lang/Runnable;)V` @kind direct;
  #L27a662.  call temp:= `submit`(v0, v1) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.submit:(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;` @kind virtual;
  #L27a668.  return @kind void;
}
procedure `void` `tryExecuteRunnable`(`com.adjust.sdk.scheduler.SingleThreadCachedScheduler` v3 @kind this, `java.lang.Runnable` v4 @kind object) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;.tryExecuteRunnable:(Ljava/lang/Runnable;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L27a768.  v0:= v3.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.isTeardown` @type ^`boolean` @kind boolean;
  #L27a76c.  if v0 == 0 then goto L27a772;
  #L27a770.  return @kind void;
  #L27a772.  call `run`(v4) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L27a778.  goto L27a7a2;
  #L27a77a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27a77c.  call temp:= `getLogger`() @signature `Lcom/adjust/sdk/AdjustFactory;.getLogger:()Lcom/adjust/sdk/ILogger;` @kind static;
  #L27a782.  v0:= temp @kind object;
  #L27a784.  v1:= 1I;
  #L27a786.  v1:= new `java.lang.Object`[v1];
  #L27a78a.  v2:= 0I;
  #L27a78c.  call temp:= `getMessage`(v4) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L27a792.  v4:= temp @kind object;
  #L27a794.  v1[v2]:= v4 @kind object;
  #L27a798.  v4:= "Execution failed: %s" @kind object;
  #L27a79c.  call `warn`(v0, v4, v1) @signature `Lcom/adjust/sdk/ILogger;.warn:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind interface;
  #L27a7a2.  return @kind void;
  catch `java.lang.Throwable` @[L27a768..L27a778] goto L27a77a;
}
procedure `void` `schedule`(`com.adjust.sdk.scheduler.SingleThreadCachedScheduler` v3 @kind this, `java.lang.Runnable` v4 @kind object, `long` v5 ) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;.schedule:(Ljava/lang/Runnable;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L27a67c.  v0:= v3.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.queue` @type ^`java.util.List` @kind object;
  #L27a680.  @monitorenter v0
  #L27a682.  v1:= v3.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.isTeardown` @type ^`boolean` @kind boolean;
  #L27a686.  if v1 == 0 then goto L27a68e;
  #L27a68a.  @monitorexit v0
  #L27a68c.  return @kind void;
  #L27a68e.  v1:= v3.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.threadPoolExecutor` @type ^`java.util.concurrent.ThreadPoolExecutor` @kind object;
  #L27a692.  v2:= new `com.adjust.sdk.scheduler.SingleThreadCachedScheduler$2`;
  #L27a696.  call `<init>`(v2, v3, v5, v4) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler$2;.<init>:(Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;JLjava/lang/Runnable;)V` @kind direct;
  #L27a69c.  call temp:= `submit`(v1, v2) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.submit:(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;` @kind virtual;
  #L27a6a2.  @monitorexit v0
  #L27a6a4.  return @kind void;
  #L27a6a6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27a6a8.  @monitorexit v0
  #L27a6aa.  throw v4;
  catch `java.lang.Throwable` @[L27a682..L27a6aa] goto L27a6a6;
}
procedure `void` `submit`(`com.adjust.sdk.scheduler.SingleThreadCachedScheduler` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;.submit:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27a6c8.  v0:= v2.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.queue` @type ^`java.util.List` @kind object;
  #L27a6cc.  @monitorenter v0
  #L27a6ce.  v1:= v2.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.isTeardown` @type ^`boolean` @kind boolean;
  #L27a6d2.  if v1 == 0 then goto L27a6da;
  #L27a6d6.  @monitorexit v0
  #L27a6d8.  return @kind void;
  #L27a6da.  v1:= v2.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.isThreadProcessing` @type ^`boolean` @kind boolean;
  #L27a6de.  if v1 != 0 then goto L27a6f0;
  #L27a6e2.  v1:= 1I;
  #L27a6e4.  v2.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.isThreadProcessing` @type ^`boolean` := v1 @kind boolean;
  #L27a6e8.  call `processQueue`(v2, v3) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;.processQueue:(Ljava/lang/Runnable;)V` @kind direct;
  #L27a6ee.  goto L27a6fa;
  #L27a6f0.  v1:= v2.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.queue` @type ^`java.util.List` @kind object;
  #L27a6f4.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L27a6fa.  @monitorexit v0
  #L27a6fc.  return @kind void;
  #L27a6fe.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27a700.  @monitorexit v0
  #L27a702.  throw v3;
  catch `java.lang.Throwable` @[L27a6ce..L27a702] goto L27a6fe;
}
procedure `void` `teardown`(`com.adjust.sdk.scheduler.SingleThreadCachedScheduler` v2 @kind this) @signature `Lcom/adjust/sdk/scheduler/SingleThreadCachedScheduler;.teardown:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27a720.  v0:= v2.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.queue` @type ^`java.util.List` @kind object;
  #L27a724.  @monitorenter v0
  #L27a726.  v1:= 1I;
  #L27a728.  v2.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.isTeardown` @type ^`boolean` := v1 @kind boolean;
  #L27a72c.  v1:= v2.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.queue` @type ^`java.util.List` @kind object;
  #L27a730.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L27a736.  v1:= v2.`com.adjust.sdk.scheduler.SingleThreadCachedScheduler.threadPoolExecutor` @type ^`java.util.concurrent.ThreadPoolExecutor` @kind object;
  #L27a73a.  call `shutdown`(v1) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.shutdown:()V` @kind virtual;
  #L27a740.  @monitorexit v0
  #L27a742.  return @kind void;
  #L27a744.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27a746.  @monitorexit v0
  #L27a748.  throw v1;
  catch `java.lang.Throwable` @[L27a728..L27a748] goto L27a744;
}
