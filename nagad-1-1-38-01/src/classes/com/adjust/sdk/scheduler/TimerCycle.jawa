record `com.adjust.sdk.scheduler.TimerCycle` @kind class @AccessFlag PUBLIC {
  `java.lang.Runnable` `com.adjust.sdk.scheduler.TimerCycle.command` @AccessFlag PRIVATE;
  `long` `com.adjust.sdk.scheduler.TimerCycle.cycleDelay` @AccessFlag PRIVATE;
  `long` `com.adjust.sdk.scheduler.TimerCycle.initialDelay` @AccessFlag PRIVATE;
  `boolean` `com.adjust.sdk.scheduler.TimerCycle.isPaused` @AccessFlag PRIVATE;
  `com.adjust.sdk.ILogger` `com.adjust.sdk.scheduler.TimerCycle.logger` @AccessFlag PRIVATE;
  `java.lang.String` `com.adjust.sdk.scheduler.TimerCycle.name` @AccessFlag PRIVATE;
  `com.adjust.sdk.scheduler.FutureScheduler` `com.adjust.sdk.scheduler.TimerCycle.scheduler` @AccessFlag PRIVATE;
  `java.util.concurrent.ScheduledFuture` `com.adjust.sdk.scheduler.TimerCycle.waitingTask` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.adjust.sdk.scheduler.TimerCycle` v4 @kind this, `java.lang.Runnable` v5 @kind object, `long` v6 , `long` v8 , `java.lang.String` v10 @kind object) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.<init>:(Ljava/lang/Runnable;JJLjava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27ab70.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27ab76.  v0:= new `com.adjust.sdk.scheduler.SingleThreadFutureScheduler`;
  #L27ab7a.  v1:= 1I;
  #L27ab7c.  call `<init>`(v0, v10, v1) @signature `Lcom/adjust/sdk/scheduler/SingleThreadFutureScheduler;.<init>:(Ljava/lang/String;Z)V` @kind direct;
  #L27ab82.  v4.`com.adjust.sdk.scheduler.TimerCycle.scheduler` @type ^`com.adjust.sdk.scheduler.FutureScheduler` := v0 @kind object;
  #L27ab86.  v4.`com.adjust.sdk.scheduler.TimerCycle.name` @type ^`java.lang.String` := v10 @kind object;
  #L27ab8a.  v4.`com.adjust.sdk.scheduler.TimerCycle.command` @type ^`java.lang.Runnable` := v5 @kind object;
  #L27ab8e.  v4.`com.adjust.sdk.scheduler.TimerCycle.initialDelay` @type ^`long` := v6 @kind wide;
  #L27ab92.  v4.`com.adjust.sdk.scheduler.TimerCycle.cycleDelay` @type ^`long` := v8 @kind wide;
  #L27ab96.  v4.`com.adjust.sdk.scheduler.TimerCycle.isPaused` @type ^`boolean` := v1 @kind boolean;
  #L27ab9a.  call temp:= `getLogger`() @signature `Lcom/adjust/sdk/AdjustFactory;.getLogger:()Lcom/adjust/sdk/ILogger;` @kind static;
  #L27aba0.  v5:= temp @kind object;
  #L27aba2.  v4.`com.adjust.sdk.scheduler.TimerCycle.logger` @type ^`com.adjust.sdk.ILogger` := v5 @kind object;
  #L27aba6.  v5:= `@@com.adjust.sdk.Util.SecondsDisplayFormat` @type ^`java.text.DecimalFormat` @kind object;
  #L27abaa.  v8:= (`double`) v8 @kind l2d;
  #L27abac.  v2:= 1000.0D;
  #L27abb6.  v8:= v8 / v2 @kind double;
  #L27abb8.  call temp:= `format`(v5, v8) @signature `Ljava/text/DecimalFormat;.format:(D)Ljava/lang/String;` @kind virtual;
  #L27abbe.  v5:= temp @kind object;
  #L27abc0.  v8:= `@@com.adjust.sdk.Util.SecondsDisplayFormat` @type ^`java.text.DecimalFormat` @kind object;
  #L27abc4.  v6:= (`double`) v6 @kind l2d;
  #L27abc6.  v6:= v6 / v2 @kind double;
  #L27abc8.  call temp:= `format`(v8, v6) @signature `Ljava/text/DecimalFormat;.format:(D)Ljava/lang/String;` @kind virtual;
  #L27abce.  v6:= temp @kind object;
  #L27abd0.  v7:= v4.`com.adjust.sdk.scheduler.TimerCycle.logger` @type ^`com.adjust.sdk.ILogger` @kind object;
  #L27abd4.  v8:= 3I;
  #L27abd6.  v8:= new `java.lang.Object`[v8];
  #L27abda.  v9:= 0I;
  #L27abdc.  v8[v9]:= v10 @kind object;
  #L27abe0.  v8[v1]:= v6 @kind object;
  #L27abe4.  v6:= 2I;
  #L27abe6.  v8[v6]:= v5 @kind object;
  #L27abea.  v5:= "%s configured to fire after %s seconds of starting and cycles every %s seconds" @kind object;
  #L27abee.  call `verbose`(v7, v5, v8) @signature `Lcom/adjust/sdk/ILogger;.verbose:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind interface;
  #L27abf4.  return @kind void;
}
procedure `java.lang.String` `access$000`(`com.adjust.sdk.scheduler.TimerCycle` v0 @kind object) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.access$000:(Lcom/adjust/sdk/scheduler/TimerCycle;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L27ab58.  v0:= v0.`com.adjust.sdk.scheduler.TimerCycle.name` @type ^`java.lang.String` @kind object;
  #L27ab5c.  return v0 @kind object;
}
procedure `com.adjust.sdk.ILogger` `access$100`(`com.adjust.sdk.scheduler.TimerCycle` v0 @kind object) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.access$100:(Lcom/adjust/sdk/scheduler/TimerCycle;)Lcom/adjust/sdk/ILogger;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L27ab28.  v0:= v0.`com.adjust.sdk.scheduler.TimerCycle.logger` @type ^`com.adjust.sdk.ILogger` @kind object;
  #L27ab2c.  return v0 @kind object;
}
procedure `java.lang.Runnable` `access$200`(`com.adjust.sdk.scheduler.TimerCycle` v0 @kind object) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.access$200:(Lcom/adjust/sdk/scheduler/TimerCycle;)Ljava/lang/Runnable;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L27ab40.  v0:= v0.`com.adjust.sdk.scheduler.TimerCycle.command` @type ^`java.lang.Runnable` @kind object;
  #L27ab44.  return v0 @kind object;
}
procedure `void` `cancel`(`com.adjust.sdk.scheduler.TimerCycle` v1 @kind this, `boolean` v2 ) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.cancel:(Z)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L27ac08.  v0:= v1.`com.adjust.sdk.scheduler.TimerCycle.waitingTask` @type ^`java.util.concurrent.ScheduledFuture` @kind object;
  #L27ac0c.  if v0 == 0 then goto L27ac16;
  #L27ac10.  call temp:= `cancel`(v0, v2) @signature `Ljava/util/concurrent/ScheduledFuture;.cancel:(Z)Z` @kind interface;
  #L27ac16.  v2:= 0I;
  #L27ac18.  v1.`com.adjust.sdk.scheduler.TimerCycle.waitingTask` @type ^`java.util.concurrent.ScheduledFuture` := v2 @kind object;
  #L27ac1c.  return @kind void;
}
procedure `void` `start`(`com.adjust.sdk.scheduler.TimerCycle` v10 @kind this) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L27ac30.  v0:= v10.`com.adjust.sdk.scheduler.TimerCycle.isPaused` @type ^`boolean` @kind boolean;
  #L27ac34.  v1:= 1I;
  #L27ac36.  v2:= 0I;
  #L27ac38.  if v0 != 0 then goto L27ac58;
  #L27ac3c.  v0:= v10.`com.adjust.sdk.scheduler.TimerCycle.logger` @type ^`com.adjust.sdk.ILogger` @kind object;
  #L27ac40.  v1:= new `java.lang.Object`[v1];
  #L27ac44.  v3:= v10.`com.adjust.sdk.scheduler.TimerCycle.name` @type ^`java.lang.String` @kind object;
  #L27ac48.  v1[v2]:= v3 @kind object;
  #L27ac4c.  v2:= "%s is already started" @kind object;
  #L27ac50.  call `verbose`(v0, v2, v1) @signature `Lcom/adjust/sdk/ILogger;.verbose:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind interface;
  #L27ac56.  return @kind void;
  #L27ac58.  v0:= v10.`com.adjust.sdk.scheduler.TimerCycle.logger` @type ^`com.adjust.sdk.ILogger` @kind object;
  #L27ac5c.  v1:= new `java.lang.Object`[v1];
  #L27ac60.  v3:= v10.`com.adjust.sdk.scheduler.TimerCycle.name` @type ^`java.lang.String` @kind object;
  #L27ac64.  v1[v2]:= v3 @kind object;
  #L27ac68.  v3:= "%s starting" @kind object;
  #L27ac6c.  call `verbose`(v0, v3, v1) @signature `Lcom/adjust/sdk/ILogger;.verbose:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind interface;
  #L27ac72.  v4:= v10.`com.adjust.sdk.scheduler.TimerCycle.scheduler` @type ^`com.adjust.sdk.scheduler.FutureScheduler` @kind object;
  #L27ac76.  v5:= new `com.adjust.sdk.scheduler.TimerCycle$1`;
  #L27ac7a.  call `<init>`(v5, v10) @signature `Lcom/adjust/sdk/scheduler/TimerCycle$1;.<init>:(Lcom/adjust/sdk/scheduler/TimerCycle;)V` @kind direct;
  #L27ac80.  v6:= v10.`com.adjust.sdk.scheduler.TimerCycle.initialDelay` @type ^`long` @kind wide;
  #L27ac84.  v8:= v10.`com.adjust.sdk.scheduler.TimerCycle.cycleDelay` @type ^`long` @kind wide;
  #L27ac88.  call temp:= `scheduleFutureWithFixedDelay`(v4, v5, v6, v8) @signature `Lcom/adjust/sdk/scheduler/FutureScheduler;.scheduleFutureWithFixedDelay:(Ljava/lang/Runnable;JJ)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L27ac8e.  v0:= temp @kind object;
  #L27ac90.  v10.`com.adjust.sdk.scheduler.TimerCycle.waitingTask` @type ^`java.util.concurrent.ScheduledFuture` := v0 @kind object;
  #L27ac94.  v10.`com.adjust.sdk.scheduler.TimerCycle.isPaused` @type ^`boolean` := v2 @kind boolean;
  #L27ac98.  return @kind void;
}
procedure `void` `suspend`(`com.adjust.sdk.scheduler.TimerCycle` v7 @kind this) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.suspend:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L27acac.  v0:= v7.`com.adjust.sdk.scheduler.TimerCycle.isPaused` @type ^`boolean` @kind boolean;
  #L27acb0.  v1:= 1I;
  #L27acb2.  v2:= 0I;
  #L27acb4.  if v0 == 0 then goto L27acd4;
  #L27acb8.  v0:= v7.`com.adjust.sdk.scheduler.TimerCycle.logger` @type ^`com.adjust.sdk.ILogger` @kind object;
  #L27acbc.  v1:= new `java.lang.Object`[v1];
  #L27acc0.  v3:= v7.`com.adjust.sdk.scheduler.TimerCycle.name` @type ^`java.lang.String` @kind object;
  #L27acc4.  v1[v2]:= v3 @kind object;
  #L27acc8.  v2:= "%s is already suspended" @kind object;
  #L27accc.  call `verbose`(v0, v2, v1) @signature `Lcom/adjust/sdk/ILogger;.verbose:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind interface;
  #L27acd2.  return @kind void;
  #L27acd4.  v0:= v7.`com.adjust.sdk.scheduler.TimerCycle.waitingTask` @type ^`java.util.concurrent.ScheduledFuture` @kind object;
  #L27acd8.  v3:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L27acdc.  call temp:= `getDelay`(v0, v3) @signature `Ljava/util/concurrent/ScheduledFuture;.getDelay:(Ljava/util/concurrent/TimeUnit;)J` @kind interface;
  #L27ace2.  v3:= temp @kind wide;
  #L27ace4.  v7.`com.adjust.sdk.scheduler.TimerCycle.initialDelay` @type ^`long` := v3 @kind wide;
  #L27ace8.  v0:= v7.`com.adjust.sdk.scheduler.TimerCycle.waitingTask` @type ^`java.util.concurrent.ScheduledFuture` @kind object;
  #L27acec.  call temp:= `cancel`(v0, v2) @signature `Ljava/util/concurrent/ScheduledFuture;.cancel:(Z)Z` @kind interface;
  #L27acf2.  v0:= `@@com.adjust.sdk.Util.SecondsDisplayFormat` @type ^`java.text.DecimalFormat` @kind object;
  #L27acf6.  v3:= v7.`com.adjust.sdk.scheduler.TimerCycle.initialDelay` @type ^`long` @kind wide;
  #L27acfa.  v3:= (`double`) v3 @kind l2d;
  #L27acfc.  v5:= 1000.0D;
  #L27ad06.  v3:= v3 / v5 @kind double;
  #L27ad08.  call temp:= `format`(v0, v3) @signature `Ljava/text/DecimalFormat;.format:(D)Ljava/lang/String;` @kind virtual;
  #L27ad0e.  v0:= temp @kind object;
  #L27ad10.  v3:= v7.`com.adjust.sdk.scheduler.TimerCycle.logger` @type ^`com.adjust.sdk.ILogger` @kind object;
  #L27ad14.  v4:= 2I;
  #L27ad16.  v4:= new `java.lang.Object`[v4];
  #L27ad1a.  v5:= v7.`com.adjust.sdk.scheduler.TimerCycle.name` @type ^`java.lang.String` @kind object;
  #L27ad1e.  v4[v2]:= v5 @kind object;
  #L27ad22.  v4[v1]:= v0 @kind object;
  #L27ad26.  v0:= "%s suspended with %s seconds left" @kind object;
  #L27ad2a.  call `verbose`(v3, v0, v4) @signature `Lcom/adjust/sdk/ILogger;.verbose:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind interface;
  #L27ad30.  v7.`com.adjust.sdk.scheduler.TimerCycle.isPaused` @type ^`boolean` := v1 @kind boolean;
  #L27ad34.  return @kind void;
}
procedure `void` `teardown`(`com.adjust.sdk.scheduler.TimerCycle` v1 @kind this) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.teardown:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ad48.  v0:= 1I;
  #L27ad4a.  call `cancel`(v1, v0) @signature `Lcom/adjust/sdk/scheduler/TimerCycle;.cancel:(Z)V` @kind direct;
  #L27ad50.  v0:= v1.`com.adjust.sdk.scheduler.TimerCycle.scheduler` @type ^`com.adjust.sdk.scheduler.FutureScheduler` @kind object;
  #L27ad54.  if v0 == 0 then goto L27ad5e;
  #L27ad58.  call `teardown`(v0) @signature `Lcom/adjust/sdk/scheduler/FutureScheduler;.teardown:()V` @kind interface;
  #L27ad5e.  v0:= 0I;
  #L27ad60.  v1.`com.adjust.sdk.scheduler.TimerCycle.scheduler` @type ^`com.adjust.sdk.scheduler.FutureScheduler` := v0 @kind object;
  #L27ad64.  return @kind void;
}
