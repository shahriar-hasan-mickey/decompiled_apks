record `com.github.gcacace.signaturepad.c.f` @kind class @AccessFlag PUBLIC {
  `float` `com.github.gcacace.signaturepad.c.f.a` @AccessFlag PUBLIC;
  `float` `com.github.gcacace.signaturepad.c.f.b` @AccessFlag PUBLIC;
  `long` `com.github.gcacace.signaturepad.c.f.c` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`com.github.gcacace.signaturepad.c.f` v0 @kind this) @signature `Lcom/github/gcacace/signaturepad/c/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2f6a60.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f6a66.  return @kind void;
}
procedure `float` `distanceTo`(`com.github.gcacace.signaturepad.c.f` v6 @kind this, `com.github.gcacace.signaturepad.c.f` v7 @kind object) @signature `Lcom/github/gcacace/signaturepad/c/f;.distanceTo:(Lcom/github/gcacace/signaturepad/c/f;)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2f69c0.  v0:= v7.`com.github.gcacace.signaturepad.c.f.a` @type ^`float`;
  #L2f69c4.  v1:= v6.`com.github.gcacace.signaturepad.c.f.a` @type ^`float`;
  #L2f69c8.  v0:= v0 - v1 @kind float;
  #L2f69ca.  v0:= (`double`) v0 @kind f2d;
  #L2f69cc.  v2:= 2.0D;
  #L2f69d0.  call temp:= `pow`(v0, v2) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2f69d6.  v0:= temp @kind wide;
  #L2f69d8.  v7:= v7.`com.github.gcacace.signaturepad.c.f.b` @type ^`float`;
  #L2f69dc.  v4:= v6.`com.github.gcacace.signaturepad.c.f.b` @type ^`float`;
  #L2f69e0.  v7:= v7 - v4 @kind float;
  #L2f69e2.  v4:= (`double`) v7 @kind f2d;
  #L2f69e4.  call temp:= `pow`(v4, v2) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2f69ea.  v2:= temp @kind wide;
  #L2f69ec.  v0:= v0 + v2 @kind double;
  #L2f69ee.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2f69f4.  v0:= temp @kind wide;
  #L2f69f6.  v7:= (`float`) v0 @kind d2f;
  #L2f69f8.  return v7;
}
procedure `com.github.gcacace.signaturepad.c.f` `set`(`com.github.gcacace.signaturepad.c.f` v0 @kind this, `float` v1 , `float` v2 ) @signature `Lcom/github/gcacace/signaturepad/c/f;.set:(FF)Lcom/github/gcacace/signaturepad/c/f;` @AccessFlag PUBLIC {
    temp;

  #L2f6998.  v0.`com.github.gcacace.signaturepad.c.f.a` @type ^`float` := v1;
  #L2f699c.  v0.`com.github.gcacace.signaturepad.c.f.b` @type ^`float` := v2;
  #L2f69a0.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L2f69a6.  v1:= temp @kind wide;
  #L2f69a8.  v0.`com.github.gcacace.signaturepad.c.f.c` @type ^`long` := v1 @kind wide;
  #L2f69ac.  return v0 @kind object;
}
procedure `float` `velocityFrom`(`com.github.gcacace.signaturepad.c.f` v5 @kind this, `com.github.gcacace.signaturepad.c.f` v6 @kind object) @signature `Lcom/github/gcacace/signaturepad/c/f;.velocityFrom:(Lcom/github/gcacace/signaturepad/c/f;)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2f6a0c.  v0:= v5.`com.github.gcacace.signaturepad.c.f.c` @type ^`long` @kind wide;
  #L2f6a10.  v2:= v6.`com.github.gcacace.signaturepad.c.f.c` @type ^`long` @kind wide;
  #L2f6a14.  v0:= v0 - v2 @kind long;
  #L2f6a16.  v2:= 0L;
  #L2f6a1a.  v4:= lcmp(v0, v2);
  #L2f6a1e.  if v4 > 0 then goto L2f6a26;
  #L2f6a22.  v0:= 1L;
  #L2f6a26.  call temp:= `distanceTo`(v5, v6) @signature `Lcom/github/gcacace/signaturepad/c/f;.distanceTo:(Lcom/github/gcacace/signaturepad/c/f;)F` @kind virtual;
  #L2f6a2c.  v6:= temp;
  #L2f6a2e.  v0:= (`float`) v0 @kind l2f;
  #L2f6a30.  v6:= v6 / v0 @kind float;
  #L2f6a32.  call temp:= `isInfinite`(v6) @signature `Ljava/lang/Float;.isInfinite:(F)Z` @kind static;
  #L2f6a38.  v0:= temp;
  #L2f6a3a.  if v0 != 0 then goto L2f6a4a;
  #L2f6a3e.  call temp:= `isNaN`(v6) @signature `Ljava/lang/Float;.isNaN:(F)Z` @kind static;
  #L2f6a44.  v0:= temp;
  #L2f6a46.  if v0 == 0 then goto L2f6a4c;
  #L2f6a4a.  v6:= 0I;
  #L2f6a4c.  return v6;
}
