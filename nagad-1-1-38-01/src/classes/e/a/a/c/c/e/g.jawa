record `e.a.a.c.c.e.g` @kind class @AccessFlag PUBLIC_FINAL {
}
global `e.a.a.c.c.e.e` `@@e.a.a.c.c.e.g.a` @AccessFlag PRIVATE_STATIC_VOLATILE;
procedure `void` `<clinit>`() @signature `Le/a/a/c/c/e/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L324f74.  v0:= new `e.a.a.c.c.e.i`;
  #L324f78.  v1:= 0I;
  #L324f7a.  call `<init>`(v0, v1) @signature `Le/a/a/c/c/e/i;.<init>:(Le/a/a/c/c/e/f;)V` @kind direct;
  #L324f80.  `@@e.a.a.c.c.e.g.a` @type ^`e.a.a.c.c.e.e` := v0 @kind object;
  #L324f84.  return @kind void;
}
procedure `e.a.a.c.c.e.e` `zaa`() @signature `Le/a/a/c/c/e/g;.zaa:()Le/a/a/c/c/e/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L324f5c.  v0:= `@@e.a.a.c.c.e.g.a` @type ^`e.a.a.c.c.e.e` @kind object;
  #L324f60.  return v0 @kind object;
}
