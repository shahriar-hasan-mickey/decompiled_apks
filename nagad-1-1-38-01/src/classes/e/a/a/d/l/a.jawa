record `e.a.a.d.l.a` @kind class @AccessFlag PUBLIC {
}
global `android.animation.TimeInterpolator` `@@e.a.a.d.l.a.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `android.animation.TimeInterpolator` `@@e.a.a.d.l.a.b` @AccessFlag PUBLIC_STATIC_FINAL;
global `android.animation.TimeInterpolator` `@@e.a.a.d.l.a.c` @AccessFlag PUBLIC_STATIC_FINAL;
global `android.animation.TimeInterpolator` `@@e.a.a.d.l.a.d` @AccessFlag PUBLIC_STATIC_FINAL;
global `android.animation.TimeInterpolator` `@@e.a.a.d.l.a.e` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le/a/a/d/l/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L423b20.  v0:= new `android.view.animation.LinearInterpolator`;
  #L423b24.  call `<init>`(v0) @signature `Landroid/view/animation/LinearInterpolator;.<init>:()V` @kind direct;
  #L423b2a.  `@@e.a.a.d.l.a.a` @type ^`android.animation.TimeInterpolator` := v0 @kind object;
  #L423b2e.  v0:= new `c.m.a.a.b`;
  #L423b32.  call `<init>`(v0) @signature `Lc/m/a/a/b;.<init>:()V` @kind direct;
  #L423b38.  `@@e.a.a.d.l.a.b` @type ^`android.animation.TimeInterpolator` := v0 @kind object;
  #L423b3c.  v0:= new `c.m.a.a.a`;
  #L423b40.  call `<init>`(v0) @signature `Lc/m/a/a/a;.<init>:()V` @kind direct;
  #L423b46.  `@@e.a.a.d.l.a.c` @type ^`android.animation.TimeInterpolator` := v0 @kind object;
  #L423b4a.  v0:= new `c.m.a.a.c`;
  #L423b4e.  call `<init>`(v0) @signature `Lc/m/a/a/c;.<init>:()V` @kind direct;
  #L423b54.  `@@e.a.a.d.l.a.d` @type ^`android.animation.TimeInterpolator` := v0 @kind object;
  #L423b58.  v0:= new `android.view.animation.DecelerateInterpolator`;
  #L423b5c.  call `<init>`(v0) @signature `Landroid/view/animation/DecelerateInterpolator;.<init>:()V` @kind direct;
  #L423b62.  `@@e.a.a.d.l.a.e` @type ^`android.animation.TimeInterpolator` := v0 @kind object;
  #L423b66.  return @kind void;
}
procedure `float` `lerp`(`float` v0 , `float` v1 , `float` v2 ) @signature `Le/a/a/d/l/a;.lerp:(FFF)F` @AccessFlag PUBLIC_STATIC {
    temp;

  #L423ae0.  v1:= v1 - v0 @kind float;
  #L423ae2.  v2:= v2 * v1 @kind float;
  #L423ae6.  v0:= v0 + v2 @kind float;
  #L423ae8.  return v0;
}
procedure `int` `lerp`(`int` v0 , `int` v1 , `float` v2 ) @signature `Le/a/a/d/l/a;.lerp:(IIF)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L423afc.  v1:= v1 - v0 @kind int;
  #L423afe.  v1:= (`float`) v1 @kind i2f;
  #L423b00.  v2:= v2 * v1 @kind float;
  #L423b04.  call temp:= `round`(v2) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L423b0a.  v1:= temp;
  #L423b0c.  v0:= v0 + v1 @kind int;
  #L423b0e.  return v0;
}
