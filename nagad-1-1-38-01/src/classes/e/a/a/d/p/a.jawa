record `e.a.a.d.p.a` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `float` `a`(`float` v1 , `float` v2 , `float` v3 , `float` v4 ) @signature `Le/a/a/d/p/a;.a:(FFFF)F` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4344b4.  v0:= fcmpl(v1, v2);
  #L4344b8.  if v0 <= 0 then goto L4344ce;
  #L4344bc.  v0:= fcmpl(v1, v3);
  #L4344c0.  if v0 <= 0 then goto L4344ce;
  #L4344c4.  v0:= fcmpl(v1, v4);
  #L4344c8.  if v0 <= 0 then goto L4344ce;
  #L4344cc.  goto L4344f0;
  #L4344ce.  v1:= fcmpl(v2, v3);
  #L4344d2.  if v1 <= 0 then goto L4344e2;
  #L4344d6.  v1:= fcmpl(v2, v4);
  #L4344da.  if v1 <= 0 then goto L4344e2;
  #L4344de.  v1:= v2;
  #L4344e0.  goto L4344f0;
  #L4344e2.  v1:= fcmpl(v3, v4);
  #L4344e6.  if v1 <= 0 then goto L4344ee;
  #L4344ea.  v1:= v3;
  #L4344ec.  goto L4344f0;
  #L4344ee.  v1:= v4;
  #L4344f0.  return v1;
}
procedure `float` `dist`(`float` v0 , `float` v1 , `float` v2 , `float` v3 ) @signature `Le/a/a/d/p/a;.dist:(FFFF)F` @AccessFlag PUBLIC_STATIC {
    temp;

  #L434430.  v2:= v2 - v0 @kind float;
  #L434432.  v3:= v3 - v1 @kind float;
  #L434434.  v0:= (`double`) v2 @kind f2d;
  #L434436.  v2:= (`double`) v3 @kind f2d;
  #L434438.  call temp:= `hypot`(v0, v2) @signature `Ljava/lang/Math;.hypot:(DD)D` @kind static;
  #L43443e.  v0:= temp @kind wide;
  #L434440.  v0:= (`float`) v0 @kind d2f;
  #L434442.  return v0;
}
procedure `float` `distanceToFurthestCorner`(`float` v1 , `float` v2 , `float` v3 , `float` v4 , `float` v5 , `float` v6 ) @signature `Le/a/a/d/p/a;.distanceToFurthestCorner:(FFFFFF)F` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L434454.  call temp:= `dist`(v1, v2, v3, v4) @signature `Le/a/a/d/p/a;.dist:(FFFF)F` @kind static;
  #L43445a.  v0:= temp;
  #L43445c.  call temp:= `dist`(v1, v2, v5, v4) @signature `Le/a/a/d/p/a;.dist:(FFFF)F` @kind static;
  #L434462.  v4:= temp;
  #L434464.  call temp:= `dist`(v1, v2, v5, v6) @signature `Le/a/a/d/p/a;.dist:(FFFF)F` @kind static;
  #L43446a.  v5:= temp;
  #L43446c.  call temp:= `dist`(v1, v2, v3, v6) @signature `Le/a/a/d/p/a;.dist:(FFFF)F` @kind static;
  #L434472.  v1:= temp;
  #L434474.  call temp:= `a`(v0, v4, v5, v1) @signature `Le/a/a/d/p/a;.a:(FFFF)F` @kind static;
  #L43447a.  v1:= temp;
  #L43447c.  return v1;
}
procedure `float` `lerp`(`float` v1 , `float` v2 , `float` v3 ) @signature `Le/a/a/d/p/a;.lerp:(FFF)F` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L434490.  v0:= 1.0F;
  #L434494.  v0:= v0 - v3 @kind float;
  #L434496.  v0:= v0 * v1 @kind float;
  #L43449a.  v3:= v3 * v2 @kind float;
  #L43449e.  v0:= v0 + v3 @kind float;
  #L4344a0.  return v0;
}
