record `c.t.a.a.e$a` @kind class @AccessFlag  extends `android.animation.TypeEvaluator` @kind interface {
  `c.h.d.c$b`[] `c.t.a.a.e$a.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.t.a.a.e$a` v0 @kind this) @signature `Lc/t/a/a/e$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L254d24.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L254d2a.  return @kind void;
}
procedure `java.lang.Object` `evaluate`(`c.t.a.a.e$a` v0 @kind this, `float` v1 , `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lc/t/a/a/e$a;.evaluate:(FLjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L254d00.  v2:= (`c.h.d.c$b`[]) v2 @kind object;
  #L254d04.  v3:= (`c.h.d.c$b`[]) v3 @kind object;
  #L254d08.  call temp:= `evaluate`(v0, v1, v2, v3) @signature `Lc/t/a/a/e$a;.evaluate:(F[Lc/h/d/c$b;[Lc/h/d/c$b;)[Lc/h/d/c$b;` @kind virtual;
  #L254d0e.  v1:= temp @kind object;
  #L254d10.  return v1 @kind object;
}
procedure `c.h.d.c$b`[] `evaluate`(`c.t.a.a.e$a` v4 @kind this, `float` v5 , `c.h.d.c$b`[] v6 @kind object, `c.h.d.c$b`[] v7 @kind object) @signature `Lc/t/a/a/e$a;.evaluate:(F[Lc/h/d/c$b;[Lc/h/d/c$b;)[Lc/h/d/c$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L254c8c.  call temp:= `canMorph`(v6, v7) @signature `Lc/h/d/c;.canMorph:([Lc/h/d/c$b;[Lc/h/d/c$b;)Z` @kind static;
  #L254c92.  v0:= temp;
  #L254c94.  if v0 == 0 then goto L254cde;
  #L254c98.  v0:= v4.`c.t.a.a.e$a.a` @type ^`c.h.d.c$b`[] @kind object;
  #L254c9c.  call temp:= `canMorph`(v0, v6) @signature `Lc/h/d/c;.canMorph:([Lc/h/d/c$b;[Lc/h/d/c$b;)Z` @kind static;
  #L254ca2.  v0:= temp;
  #L254ca4.  if v0 != 0 then goto L254cb4;
  #L254ca8.  call temp:= `deepCopyNodes`(v6) @signature `Lc/h/d/c;.deepCopyNodes:([Lc/h/d/c$b;)[Lc/h/d/c$b;` @kind static;
  #L254cae.  v0:= temp @kind object;
  #L254cb0.  v4.`c.t.a.a.e$a.a` @type ^`c.h.d.c$b`[] := v0 @kind object;
  #L254cb4.  v0:= 0I;
  #L254cb6.  v1:= length @variable v6;
  #L254cb8.  if v0 >= v1 then goto L254cd8;
  #L254cbc.  v1:= v4.`c.t.a.a.e$a.a` @type ^`c.h.d.c$b`[] @kind object;
  #L254cc0.  v1:= v1[v0] @kind object;
  #L254cc4.  v2:= v6[v0] @kind object;
  #L254cc8.  v3:= v7[v0] @kind object;
  #L254ccc.  call `interpolatePathDataNode`(v1, v2, v3, v5) @signature `Lc/h/d/c$b;.interpolatePathDataNode:(Lc/h/d/c$b;Lc/h/d/c$b;F)V` @kind virtual;
  #L254cd2.  v0:= v0 + 1;
  #L254cd6.  goto L254cb6;
  #L254cd8.  v5:= v4.`c.t.a.a.e$a.a` @type ^`c.h.d.c$b`[] @kind object;
  #L254cdc.  return v5 @kind object;
  #L254cde.  v5:= new `java.lang.IllegalArgumentException`;
  #L254ce2.  v6:= "Can't interpolate between two incompatible pathData" @kind object;
  #L254ce6.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L254cec.  throw v5;
}
