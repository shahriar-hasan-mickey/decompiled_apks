record `c.t.a.a.i$f` @kind class @AccessFlag ABSTRACT extends `c.t.a.a.i$e` @kind class {
  `c.h.d.c$b`[] `c.t.a.a.i$f.a` @AccessFlag PROTECTED;
  `java.lang.String` `c.t.a.a.i$f.b` @AccessFlag ;
  `int` `c.t.a.a.i$f.c` @AccessFlag ;
  `int` `c.t.a.a.i$f.d` @AccessFlag ;
}
procedure `void` `<init>`(`c.t.a.a.i$f` v1 @kind this) @signature `Lc/t/a/a/i$f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L257914.  v0:= 0I;
  #L257916.  call `<init>`(v1, v0) @signature `Lc/t/a/a/i$e;.<init>:(Lc/t/a/a/i$a;)V` @kind direct;
  #L25791c.  v1.`c.t.a.a.i$f.a` @type ^`c.h.d.c$b`[] := v0 @kind object;
  #L257920.  v0:= 0I;
  #L257922.  v1.`c.t.a.a.i$f.c` @type ^`int` := v0;
  #L257926.  return @kind void;
}
procedure `void` `<init>`(`c.t.a.a.i$f` v1 @kind this, `c.t.a.a.i$f` v2 @kind object) @signature `Lc/t/a/a/i$f;.<init>:(Lc/t/a/a/i$f;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L257938.  v0:= 0I;
  #L25793a.  call `<init>`(v1, v0) @signature `Lc/t/a/a/i$e;.<init>:(Lc/t/a/a/i$a;)V` @kind direct;
  #L257940.  v1.`c.t.a.a.i$f.a` @type ^`c.h.d.c$b`[] := v0 @kind object;
  #L257944.  v0:= 0I;
  #L257946.  v1.`c.t.a.a.i$f.c` @type ^`int` := v0;
  #L25794a.  v0:= v2.`c.t.a.a.i$f.b` @type ^`java.lang.String` @kind object;
  #L25794e.  v1.`c.t.a.a.i$f.b` @type ^`java.lang.String` := v0 @kind object;
  #L257952.  v0:= v2.`c.t.a.a.i$f.d` @type ^`int`;
  #L257956.  v1.`c.t.a.a.i$f.d` @type ^`int` := v0;
  #L25795a.  v2:= v2.`c.t.a.a.i$f.a` @type ^`c.h.d.c$b`[] @kind object;
  #L25795e.  call temp:= `deepCopyNodes`(v2) @signature `Lc/h/d/c;.deepCopyNodes:([Lc/h/d/c$b;)[Lc/h/d/c$b;` @kind static;
  #L257964.  v2:= temp @kind object;
  #L257966.  v1.`c.t.a.a.i$f.a` @type ^`c.h.d.c$b`[] := v2 @kind object;
  #L25796a.  return @kind void;
}
procedure `c.h.d.c$b`[] `getPathData`(`c.t.a.a.i$f` v1 @kind this) @signature `Lc/t/a/a/i$f;.getPathData:()[Lc/h/d/c$b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2578d0.  v0:= v1.`c.t.a.a.i$f.a` @type ^`c.h.d.c$b`[] @kind object;
  #L2578d4.  return v0 @kind object;
}
procedure `java.lang.String` `getPathName`(`c.t.a.a.i$f` v1 @kind this) @signature `Lc/t/a/a/i$f;.getPathName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2578fc.  v0:= v1.`c.t.a.a.i$f.b` @type ^`java.lang.String` @kind object;
  #L257900.  return v0 @kind object;
}
procedure `boolean` `isClipPath`(`c.t.a.a.i$f` v1 @kind this) @signature `Lc/t/a/a/i$f;.isClipPath:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2578e8.  v0:= 0I;
  #L2578ea.  return v0;
}
procedure `void` `setPathData`(`c.t.a.a.i$f` v1 @kind this, `c.h.d.c$b`[] v2 @kind object) @signature `Lc/t/a/a/i$f;.setPathData:([Lc/h/d/c$b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25797c.  v0:= v1.`c.t.a.a.i$f.a` @type ^`c.h.d.c$b`[] @kind object;
  #L257980.  call temp:= `canMorph`(v0, v2) @signature `Lc/h/d/c;.canMorph:([Lc/h/d/c$b;[Lc/h/d/c$b;)Z` @kind static;
  #L257986.  v0:= temp;
  #L257988.  if v0 != 0 then goto L25799a;
  #L25798c.  call temp:= `deepCopyNodes`(v2) @signature `Lc/h/d/c;.deepCopyNodes:([Lc/h/d/c$b;)[Lc/h/d/c$b;` @kind static;
  #L257992.  v2:= temp @kind object;
  #L257994.  v1.`c.t.a.a.i$f.a` @type ^`c.h.d.c$b`[] := v2 @kind object;
  #L257998.  goto L2579a4;
  #L25799a.  v0:= v1.`c.t.a.a.i$f.a` @type ^`c.h.d.c$b`[] @kind object;
  #L25799e.  call `updateNodes`(v0, v2) @signature `Lc/h/d/c;.updateNodes:([Lc/h/d/c$b;[Lc/h/d/c$b;)V` @kind static;
  #L2579a4.  return @kind void;
}
procedure `void` `toPath`(`c.t.a.a.i$f` v1 @kind this, `android.graphics.Path` v2 @kind object) @signature `Lc/t/a/a/i$f;.toPath:(Landroid/graphics/Path;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2579b8.  call `reset`(v2) @signature `Landroid/graphics/Path;.reset:()V` @kind virtual;
  #L2579be.  v0:= v1.`c.t.a.a.i$f.a` @type ^`c.h.d.c$b`[] @kind object;
  #L2579c2.  if v0 == 0 then goto L2579cc;
  #L2579c6.  call `nodesToPath`(v0, v2) @signature `Lc/h/d/c$b;.nodesToPath:([Lc/h/d/c$b;Landroid/graphics/Path;)V` @kind static;
  #L2579cc.  return @kind void;
}
