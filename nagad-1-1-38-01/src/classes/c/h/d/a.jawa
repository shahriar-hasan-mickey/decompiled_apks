record `c.h.d.a` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<clinit>`() @signature `Lc/h/d/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1f2a78.  v0:= new `java.lang.ThreadLocal`;
  #L1f2a7c.  call `<init>`(v0) @signature `Ljava/lang/ThreadLocal;.<init>:()V` @kind direct;
  #L1f2a82.  return @kind void;
}
procedure `int` `a`(`int` v0 , `int` v1 ) @signature `Lc/h/d/a;.a:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L1f2960.  v1:= v1 - 255;
  #L1f2964.  v0:= v0 - 255;
  #L1f2968.  v1:= v1 * v0 @kind int;
  #L1f296c.  v1:= v1 / 255;
  #L1f2970.  v0:= v1 - 255;
  #L1f2974.  return v0;
}
procedure `int` `a`(`int` v0 , `int` v1 , `int` v2 , `int` v3 , `int` v4 ) @signature `Lc/h/d/a;.a:(IIIII)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L1f2a04.  if v4 != 0 then goto L1f2a0c;
  #L1f2a08.  v0:= 0I;
  #L1f2a0a.  return v0;
  #L1f2a0c.  v0:= v0 * 255;
  #L1f2a10.  v0:= v0 * v1 @kind int;
  #L1f2a14.  v2:= v2 * v3 @kind int;
  #L1f2a18.  v1:= v1 - 255;
  #L1f2a1c.  v2:= v2 * v1 @kind int;
  #L1f2a20.  v0:= v0 + v2 @kind int;
  #L1f2a22.  v4:= v4 * 255;
  #L1f2a26.  v0:= v0 / v4 @kind int;
  #L1f2a28.  return v0;
}
procedure `int` `compositeColors`(`int` v6 , `int` v7 ) @signature `Lc/h/d/a;.compositeColors:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1f2988.  call temp:= `alpha`(v7) @signature `Landroid/graphics/Color;.alpha:(I)I` @kind static;
  #L1f298e.  v0:= temp;
  #L1f2990.  call temp:= `alpha`(v6) @signature `Landroid/graphics/Color;.alpha:(I)I` @kind static;
  #L1f2996.  v1:= temp;
  #L1f2998.  call temp:= `a`(v1, v0) @signature `Lc/h/d/a;.a:(II)I` @kind static;
  #L1f299e.  v2:= temp;
  #L1f29a0.  call temp:= `red`(v6) @signature `Landroid/graphics/Color;.red:(I)I` @kind static;
  #L1f29a6.  v3:= temp;
  #L1f29a8.  call temp:= `red`(v7) @signature `Landroid/graphics/Color;.red:(I)I` @kind static;
  #L1f29ae.  v4:= temp;
  #L1f29b0.  call temp:= `a`(v3, v1, v4, v0, v2) @signature `Lc/h/d/a;.a:(IIIII)I` @kind static;
  #L1f29b6.  v3:= temp;
  #L1f29b8.  call temp:= `green`(v6) @signature `Landroid/graphics/Color;.green:(I)I` @kind static;
  #L1f29be.  v4:= temp;
  #L1f29c0.  call temp:= `green`(v7) @signature `Landroid/graphics/Color;.green:(I)I` @kind static;
  #L1f29c6.  v5:= temp;
  #L1f29c8.  call temp:= `a`(v4, v1, v5, v0, v2) @signature `Lc/h/d/a;.a:(IIIII)I` @kind static;
  #L1f29ce.  v4:= temp;
  #L1f29d0.  call temp:= `blue`(v6) @signature `Landroid/graphics/Color;.blue:(I)I` @kind static;
  #L1f29d6.  v6:= temp;
  #L1f29d8.  call temp:= `blue`(v7) @signature `Landroid/graphics/Color;.blue:(I)I` @kind static;
  #L1f29de.  v7:= temp;
  #L1f29e0.  call temp:= `a`(v6, v1, v7, v0, v2) @signature `Lc/h/d/a;.a:(IIIII)I` @kind static;
  #L1f29e6.  v6:= temp;
  #L1f29e8.  call temp:= `argb`(v2, v3, v4, v6) @signature `Landroid/graphics/Color;.argb:(IIII)I` @kind static;
  #L1f29ee.  v6:= temp;
  #L1f29f0.  return v6;
}
procedure `int` `setAlphaComponent`(`int` v1 , `int` v2 ) @signature `Lc/h/d/a;.setAlphaComponent:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1f2a3c.  if v2 < 0 then goto L1f2a58;
  #L1f2a40.  v0:= 255I;
  #L1f2a44.  if v2 > v0 then goto L1f2a58;
  #L1f2a48.  v0:= 16777215I;
  #L1f2a4e.  v1:= v1 ^& v0 @kind int;
  #L1f2a50.  v2:= v2 ^< 24;
  #L1f2a54.  v1:= v1 ^| v2 @kind int;
  #L1f2a56.  return v1;
  #L1f2a58.  v1:= new `java.lang.IllegalArgumentException`;
  #L1f2a5c.  v2:= "alpha must be between 0 and 255." @kind object;
  #L1f2a60.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f2a66.  throw v1;
}
