record `c.h.d.c` @kind class @AccessFlag PUBLIC {
}
procedure `int` `a`(`java.lang.String` v3 @kind object, `int` v4 ) @signature `Lc/h/d/c;.a:(Ljava/lang/String;I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1f3b90.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f3b96.  v0:= temp;
  #L1f3b98.  if v4 >= v0 then goto L1f3bdc;
  #L1f3b9c.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1f3ba2.  v0:= temp;
  #L1f3ba4.  v1:= v0 + -65;
  #L1f3ba8.  v2:= v0 + -90;
  #L1f3bac.  v1:= v1 * v2 @kind int;
  #L1f3bb0.  if v1 <= 0 then goto L1f3bc4;
  #L1f3bb4.  v1:= v0 + -97;
  #L1f3bb8.  v2:= v0 + -122;
  #L1f3bbc.  v1:= v1 * v2 @kind int;
  #L1f3bc0.  if v1 > 0 then goto L1f3bd6;
  #L1f3bc4.  v1:= 101I;
  #L1f3bc8.  if v0 == v1 then goto L1f3bd6;
  #L1f3bcc.  v1:= 69I;
  #L1f3bd0.  if v0 == v1 then goto L1f3bd6;
  #L1f3bd4.  return v4;
  #L1f3bd6.  v4:= v4 + 1;
  #L1f3bda.  goto L1f3b90;
  #L1f3bdc.  return v4;
}
procedure `void` `a`(`java.lang.String` v8 @kind object, `int` v9 , `c.h.d.c$a` v10 @kind object) @signature `Lc/h/d/c;.a:(Ljava/lang/String;ILc/h/d/c$a;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1f3c14.  v0:= 0I;
  #L1f3c16.  v10.`c.h.d.c$a.b` @type ^`boolean` := v0 @kind boolean;
  #L1f3c1a.  v1:= v9;
  #L1f3c1c.  v2:= 0I;
  #L1f3c1e.  v3:= 0I;
  #L1f3c20.  v4:= 0I;
  #L1f3c22.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f3c28.  v5:= temp;
  #L1f3c2a.  if v1 >= v5 then goto L1f3c8e;
  #L1f3c2e.  call temp:= `charAt`(v8, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1f3c34.  v5:= temp;
  #L1f3c36.  v6:= 32I;
  #L1f3c3a.  v7:= 1I;
  #L1f3c3c.  if v5 == v6 then goto L1f3c7e;
  #L1f3c40.  v6:= 69I;
  #L1f3c44.  if v5 == v6 then goto L1f3c7a;
  #L1f3c48.  v6:= 101I;
  #L1f3c4c.  if v5 == v6 then goto L1f3c7a;
  #L1f3c50.  goto L1f3c94;
  #L1f3c56.  goto L1f3c76;
  #L1f3c58.  if v3 != 0 then goto L1f3c62;
  #L1f3c5c.  v2:= 0I;
  #L1f3c5e.  v3:= 1I;
  #L1f3c60.  goto L1f3c82;
  #L1f3c62.  v10.`c.h.d.c$a.b` @type ^`boolean` := v7 @kind boolean;
  #L1f3c66.  goto L1f3c7e;
  #L1f3c68.  if v1 == v9 then goto L1f3c76;
  #L1f3c6c.  if v2 != 0 then goto L1f3c76;
  #L1f3c70.  v10.`c.h.d.c$a.b` @type ^`boolean` := v7 @kind boolean;
  #L1f3c74.  goto L1f3c7e;
  #L1f3c76.  v2:= 0I;
  #L1f3c78.  goto L1f3c82;
  #L1f3c7a.  v2:= 1I;
  #L1f3c7c.  goto L1f3c82;
  #L1f3c7e.  v2:= 0I;
  #L1f3c80.  v4:= 1I;
  #L1f3c82.  if v4 == 0 then goto L1f3c88;
  #L1f3c86.  goto L1f3c8e;
  #L1f3c88.  v1:= v1 + 1;
  #L1f3c8c.  goto L1f3c22;
  #L1f3c8e.  v10.`c.h.d.c$a.a` @type ^`int` := v1;
  #L1f3c92.  return @kind void;
  #L1f3c94.  switch v5
                  | 44 => goto L1f3c7e
                  | 45 => goto L1f3c68
                  | 46 => goto L1f3c58
                  | else => goto L1f3c56;
}
procedure `void` `a`(`java.util.ArrayList` v1 @kind object, `char` v2 , `float`[] v3 @kind object) @signature `Lc/h/d/c;.a:(Ljava/util/ArrayList;C[F)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L1f3bf0.  v0:= new `c.h.d.c$b`;
  #L1f3bf4.  call `<init>`(v0, v2, v3) @signature `Lc/h/d/c$b;.<init>:(C[F)V` @kind direct;
  #L1f3bfa.  call temp:= `add`(v1, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1f3c00.  return @kind void;
}
procedure `float`[] `a`(`java.lang.String` v8 @kind object) @signature `Lc/h/d/c;.a:(Ljava/lang/String;)[F` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1f3aa0.  v0:= 0I;
  #L1f3aa2.  call temp:= `charAt`(v8, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1f3aa8.  v1:= temp;
  #L1f3aaa.  v2:= 122I;
  #L1f3aae.  if v1 == v2 then goto L1f3b68;
  #L1f3ab2.  call temp:= `charAt`(v8, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1f3ab8.  v1:= temp;
  #L1f3aba.  v2:= 90I;
  #L1f3abe.  if v1 != v2 then goto L1f3ac4;
  #L1f3ac2.  goto L1f3b68;
  #L1f3ac4.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f3aca.  v1:= temp;
  #L1f3acc.  v1:= new `float`[v1];
  #L1f3ad0.  v2:= new `c.h.d.c$a`;
  #L1f3ad4.  call `<init>`(v2) @signature `Lc/h/d/c$a;.<init>:()V` @kind direct;
  #L1f3ada.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f3ae0.  v3:= temp;
  #L1f3ae2.  v4:= 1I;
  #L1f3ae4.  v5:= 0I;
  #L1f3ae6.  if v4 >= v3 then goto L1f3b24;
  #L1f3aea.  call `a`(v8, v4, v2) @signature `Lc/h/d/c;.a:(Ljava/lang/String;ILc/h/d/c$a;)V` @kind static;
  #L1f3af0.  v6:= v2.`c.h.d.c$a.a` @type ^`int`;
  #L1f3af4.  if v4 >= v6 then goto L1f3b12;
  #L1f3af8.  v7:= v5 + 1;
  #L1f3afc.  call temp:= `substring`(v8, v4, v6) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1f3b02.  v4:= temp @kind object;
  #L1f3b04.  call temp:= `parseFloat`(v4) @signature `Ljava/lang/Float;.parseFloat:(Ljava/lang/String;)F` @kind static;
  #L1f3b0a.  v4:= temp;
  #L1f3b0c.  v1[v5]:= v4;
  #L1f3b10.  v5:= v7;
  #L1f3b12.  v4:= v2.`c.h.d.c$a.b` @type ^`boolean` @kind boolean;
  #L1f3b16.  if v4 == 0 then goto L1f3b1e;
  #L1f3b1a.  v4:= v6;
  #L1f3b1c.  goto L1f3ae6;
  #L1f3b1e.  v4:= v6 + 1;
  #L1f3b22.  goto L1f3ae6;
  #L1f3b24.  call temp:= `a`(v1, v0, v5) @signature `Lc/h/d/c;.a:([FII)[F` @kind static;
  #L1f3b2a.  v8:= temp @kind object;
  #L1f3b2c.  return v8 @kind object;
  #L1f3b2e.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L1f3b30.  v1:= new `java.lang.RuntimeException`;
  #L1f3b34.  v2:= new `java.lang.StringBuilder`;
  #L1f3b38.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1f3b3e.  v3:= "error in parsing \"" @kind object;
  #L1f3b42.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f3b48.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f3b4e.  v8:= "\"" @kind object;
  #L1f3b52.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f3b58.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f3b5e.  v8:= temp @kind object;
  #L1f3b60.  call `<init>`(v1, v8, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L1f3b66.  throw v1;
  #L1f3b68.  v8:= new `float`[v0];
  #L1f3b6c.  return v8 @kind object;
  catch `java.lang.NumberFormatException` @[L1f3ac4..L1f3b2c] goto L1f3b2e;
}
procedure `float`[] `a`(`float`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lc/h/d/c;.a:([FII)[F` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1f3a50.  if v3 > v4 then goto L1f3a84;
  #L1f3a54.  v0:= length @variable v2;
  #L1f3a56.  if v3 < 0 then goto L1f3a78;
  #L1f3a5a.  if v3 > v0 then goto L1f3a78;
  #L1f3a5e.  v4:= v4 - v3 @kind int;
  #L1f3a60.  v0:= v0 - v3 @kind int;
  #L1f3a62.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1f3a68.  v0:= temp;
  #L1f3a6a.  v4:= new `float`[v4];
  #L1f3a6e.  v1:= 0I;
  #L1f3a70.  call `arraycopy`(v2, v3, v4, v1, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1f3a76.  return v4 @kind object;
  #L1f3a78.  v2:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L1f3a7c.  call `<init>`(v2) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L1f3a82.  throw v2;
  #L1f3a84.  v2:= new `java.lang.IllegalArgumentException`;
  #L1f3a88.  call `<init>`(v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1f3a8e.  throw v2;
}
procedure `boolean` `canMorph`(`c.h.d.c$b`[] v4 @kind object, `c.h.d.c$b`[] v5 @kind object) @signature `Lc/h/d/c;.canMorph:([Lc/h/d/c$b;[Lc/h/d/c$b;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f39e4.  v0:= 0I;
  #L1f39e6.  if v4 == 0 then goto L1f3a3c;
  #L1f39ea.  if v5 != 0 then goto L1f39f0;
  #L1f39ee.  goto L1f3a3c;
  #L1f39f0.  v1:= length @variable v4;
  #L1f39f2.  v2:= length @variable v5;
  #L1f39f4.  if v1 == v2 then goto L1f39fa;
  #L1f39f8.  return v0;
  #L1f39fa.  v1:= 0I;
  #L1f39fc.  v2:= length @variable v4;
  #L1f39fe.  if v1 >= v2 then goto L1f3a38;
  #L1f3a02.  v2:= v4[v1] @kind object;
  #L1f3a06.  v2:= v2.`c.h.d.c$b.a` @type ^`char` @kind char;
  #L1f3a0a.  v3:= v5[v1] @kind object;
  #L1f3a0e.  v3:= v3.`c.h.d.c$b.a` @type ^`char` @kind char;
  #L1f3a12.  if v2 != v3 then goto L1f3a36;
  #L1f3a16.  v2:= v4[v1] @kind object;
  #L1f3a1a.  v2:= v2.`c.h.d.c$b.b` @type ^`float`[] @kind object;
  #L1f3a1e.  v2:= length @variable v2;
  #L1f3a20.  v3:= v5[v1] @kind object;
  #L1f3a24.  v3:= v3.`c.h.d.c$b.b` @type ^`float`[] @kind object;
  #L1f3a28.  v3:= length @variable v3;
  #L1f3a2a.  if v2 == v3 then goto L1f3a30;
  #L1f3a2e.  goto L1f3a36;
  #L1f3a30.  v1:= v1 + 1;
  #L1f3a34.  goto L1f39fc;
  #L1f3a36.  return v0;
  #L1f3a38.  v4:= 1I;
  #L1f3a3a.  return v4;
  #L1f3a3c.  return v0;
}
procedure `c.h.d.c$b`[] `createNodesFromPathData`(`java.lang.String` v7 @kind object) @signature `Lc/h/d/c;.createNodesFromPathData:(Ljava/lang/String;)[Lc/h/d/c$b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1f38e8.  if v7 != 0 then goto L1f38f0;
  #L1f38ec.  v7:= 0I;
  #L1f38ee.  return v7 @kind object;
  #L1f38f0.  v0:= new `java.util.ArrayList`;
  #L1f38f4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1f38fa.  v1:= 1I;
  #L1f38fc.  v2:= 0I;
  #L1f38fe.  v3:= 1I;
  #L1f3900.  v4:= 0I;
  #L1f3902.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f3908.  v5:= temp;
  #L1f390a.  if v3 >= v5 then goto L1f3954;
  #L1f390e.  call temp:= `a`(v7, v3) @signature `Lc/h/d/c;.a:(Ljava/lang/String;I)I` @kind static;
  #L1f3914.  v3:= temp;
  #L1f3916.  call temp:= `substring`(v7, v4, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1f391c.  v4:= temp @kind object;
  #L1f391e.  call temp:= `trim`(v4) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L1f3924.  v4:= temp @kind object;
  #L1f3926.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f392c.  v5:= temp;
  #L1f392e.  if v5 <= 0 then goto L1f3948;
  #L1f3932.  call temp:= `a`(v4) @signature `Lc/h/d/c;.a:(Ljava/lang/String;)[F` @kind static;
  #L1f3938.  v5:= temp @kind object;
  #L1f393a.  call temp:= `charAt`(v4, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1f3940.  v4:= temp;
  #L1f3942.  call `a`(v0, v4, v5) @signature `Lc/h/d/c;.a:(Ljava/util/ArrayList;C[F)V` @kind static;
  #L1f3948.  v4:= v3 + 1;
  #L1f394c.  v6:= v4;
  #L1f394e.  v4:= v3;
  #L1f3950.  v3:= v6;
  #L1f3952.  goto L1f3902;
  #L1f3954.  v3:= v3 - v4 @kind int;
  #L1f3956.  if v3 != v1 then goto L1f3978;
  #L1f395a.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f3960.  v1:= temp;
  #L1f3962.  if v4 >= v1 then goto L1f3978;
  #L1f3966.  call temp:= `charAt`(v7, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1f396c.  v7:= temp;
  #L1f396e.  v1:= new `float`[v2];
  #L1f3972.  call `a`(v0, v7, v1) @signature `Lc/h/d/c;.a:(Ljava/util/ArrayList;C[F)V` @kind static;
  #L1f3978.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1f397e.  v7:= temp;
  #L1f3980.  v7:= new `c.h.d.c$b`[v7];
  #L1f3984.  call temp:= `toArray`(v0, v7) @signature `Ljava/util/ArrayList;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L1f398a.  v7:= temp @kind object;
  #L1f398c.  v7:= (`c.h.d.c$b`[]) v7 @kind object;
  #L1f3990.  return v7 @kind object;
}
procedure `android.graphics.Path` `createPathFromPathData`(`java.lang.String` v4 @kind object) @signature `Lc/h/d/c;.createPathFromPathData:(Ljava/lang/String;)Landroid/graphics/Path;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f3874.  v0:= new `android.graphics.Path`;
  #L1f3878.  call `<init>`(v0) @signature `Landroid/graphics/Path;.<init>:()V` @kind direct;
  #L1f387e.  call temp:= `createNodesFromPathData`(v4) @signature `Lc/h/d/c;.createNodesFromPathData:(Ljava/lang/String;)[Lc/h/d/c$b;` @kind static;
  #L1f3884.  v1:= temp @kind object;
  #L1f3886.  if v1 == 0 then goto L1f38c2;
  #L1f388a.  call `nodesToPath`(v1, v0) @signature `Lc/h/d/c$b;.nodesToPath:([Lc/h/d/c$b;Landroid/graphics/Path;)V` @kind static;
  #L1f3890.  return v0 @kind object;
  #L1f3892.  v0:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L1f3894.  v1:= new `java.lang.RuntimeException`;
  #L1f3898.  v2:= new `java.lang.StringBuilder`;
  #L1f389c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1f38a2.  v3:= "Error in parsing " @kind object;
  #L1f38a6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f38ac.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f38b2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f38b8.  v4:= temp @kind object;
  #L1f38ba.  call `<init>`(v1, v4, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L1f38c0.  throw v1;
  #L1f38c2.  v4:= 0I;
  #L1f38c4.  return v4 @kind object;
  catch `java.lang.RuntimeException` @[L1f388a..L1f3890] goto L1f3892;
}
procedure `c.h.d.c$b`[] `deepCopyNodes`(`c.h.d.c$b`[] v4 @kind object) @signature `Lc/h/d/c;.deepCopyNodes:([Lc/h/d/c$b;)[Lc/h/d/c$b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f39a4.  if v4 != 0 then goto L1f39ac;
  #L1f39a8.  v4:= 0I;
  #L1f39aa.  return v4 @kind object;
  #L1f39ac.  v0:= length @variable v4;
  #L1f39ae.  v0:= new `c.h.d.c$b`[v0];
  #L1f39b2.  v1:= 0I;
  #L1f39b4.  v2:= length @variable v4;
  #L1f39b6.  if v1 >= v2 then goto L1f39d2;
  #L1f39ba.  v2:= new `c.h.d.c$b`;
  #L1f39be.  v3:= v4[v1] @kind object;
  #L1f39c2.  call `<init>`(v2, v3) @signature `Lc/h/d/c$b;.<init>:(Lc/h/d/c$b;)V` @kind direct;
  #L1f39c8.  v0[v1]:= v2 @kind object;
  #L1f39cc.  v1:= v1 + 1;
  #L1f39d0.  goto L1f39b4;
  #L1f39d2.  return v0 @kind object;
}
procedure `void` `updateNodes`(`c.h.d.c$b`[] v5 @kind object, `c.h.d.c$b`[] v6 @kind object) @signature `Lc/h/d/c;.updateNodes:([Lc/h/d/c$b;[Lc/h/d/c$b;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1f3cb8.  v0:= 0I;
  #L1f3cba.  v1:= 0I;
  #L1f3cbc.  v2:= length @variable v6;
  #L1f3cbe.  if v1 >= v2 then goto L1f3d06;
  #L1f3cc2.  v2:= v5[v1] @kind object;
  #L1f3cc6.  v3:= v6[v1] @kind object;
  #L1f3cca.  v3:= v3.`c.h.d.c$b.a` @type ^`char` @kind char;
  #L1f3cce.  v2.`c.h.d.c$b.a` @type ^`char` := v3 @kind char;
  #L1f3cd2.  v2:= 0I;
  #L1f3cd4.  v3:= v6[v1] @kind object;
  #L1f3cd8.  v3:= v3.`c.h.d.c$b.b` @type ^`float`[] @kind object;
  #L1f3cdc.  v3:= length @variable v3;
  #L1f3cde.  if v2 >= v3 then goto L1f3d00;
  #L1f3ce2.  v3:= v5[v1] @kind object;
  #L1f3ce6.  v3:= v3.`c.h.d.c$b.b` @type ^`float`[] @kind object;
  #L1f3cea.  v4:= v6[v1] @kind object;
  #L1f3cee.  v4:= v4.`c.h.d.c$b.b` @type ^`float`[] @kind object;
  #L1f3cf2.  v4:= v4[v2];
  #L1f3cf6.  v3[v2]:= v4;
  #L1f3cfa.  v2:= v2 + 1;
  #L1f3cfe.  goto L1f3cd4;
  #L1f3d00.  v1:= v1 + 1;
  #L1f3d04.  goto L1f3cbc;
  #L1f3d06.  return @kind void;
}
