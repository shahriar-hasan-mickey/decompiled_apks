record `c.h.g.c$c` @kind class @AccessFlag  extends `java.lang.Runnable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `c.h.g.c$c.f` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.Callable` `c.h.g.c$c.g` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.locks.ReentrantLock` `c.h.g.c$c.h` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicBoolean` `c.h.g.c$c.i` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.locks.Condition` `c.h.g.c$c.j` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.h.g.c$c` v0 @kind this, `c.h.g.c` v1 @kind object, `java.util.concurrent.atomic.AtomicReference` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `java.util.concurrent.locks.ReentrantLock` v4 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v5 @kind object, `java.util.concurrent.locks.Condition` v6 @kind object) @signature `Lc/h/g/c$c;.<init>:(Lc/h/g/c;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/Callable;Ljava/util/concurrent/locks/ReentrantLock;Ljava/util/concurrent/atomic/AtomicBoolean;Ljava/util/concurrent/locks/Condition;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1f92f4.  v0.`c.h.g.c$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L1f92f8.  v0.`c.h.g.c$c.g` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L1f92fc.  v0.`c.h.g.c$c.h` @type ^`java.util.concurrent.locks.ReentrantLock` := v4 @kind object;
  #L1f9300.  v0.`c.h.g.c$c.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v5 @kind object;
  #L1f9304.  v0.`c.h.g.c$c.j` @type ^`java.util.concurrent.locks.Condition` := v6 @kind object;
  #L1f9308.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f930e.  return @kind void;
}
procedure `void` `run`(`c.h.g.c$c` v2 @kind this) @signature `Lc/h/g/c$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f9320.  v0:= v2.`c.h.g.c$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L1f9324.  v1:= v2.`c.h.g.c$c.g` @type ^`java.util.concurrent.Callable` @kind object;
  #L1f9328.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L1f932e.  v1:= temp @kind object;
  #L1f9330.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L1f9336.  v0:= v2.`c.h.g.c$c.h` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L1f933a.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.lock:()V` @kind virtual;
  #L1f9340.  v0:= v2.`c.h.g.c$c.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L1f9344.  v1:= 0I;
  #L1f9346.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L1f934c.  v0:= v2.`c.h.g.c$c.j` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L1f9350.  call `signal`(v0) @signature `Ljava/util/concurrent/locks/Condition;.signal:()V` @kind interface;
  #L1f9356.  v0:= v2.`c.h.g.c$c.h` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L1f935a.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L1f9360.  return @kind void;
  #L1f9362.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1f9364.  v1:= v2.`c.h.g.c$c.h` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L1f9368.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L1f936e.  throw v0;
  catch `java.lang.Exception` @[L1f9320..L1f9336] goto L1f9336;
  catch `java.lang.Throwable` @[L1f9340..L1f9356] goto L1f9362;
}
