record `c.h.g.b$d` @kind class @AccessFlag  extends `java.util.Comparator` @kind interface {
}
procedure `void` `<init>`(`c.h.g.b$d` v0 @kind this) @signature `Lc/h/g/b$d;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1f894c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f8952.  return @kind void;
}
procedure `int` `compare`(`c.h.g.b$d` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lc/h/g/b$d;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1f8928.  v1:= (`byte`[]) v1 @kind object;
  #L1f892c.  v2:= (`byte`[]) v2 @kind object;
  #L1f8930.  call temp:= `compare`(v0, v1, v2) @signature `Lc/h/g/b$d;.compare:([B[B)I` @kind virtual;
  #L1f8936.  v1:= temp;
  #L1f8938.  return v1;
}
procedure `int` `compare`(`c.h.g.b$d` v4 @kind this, `byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lc/h/g/b$d;.compare:([B[B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f88e0.  v0:= length @variable v5;
  #L1f88e2.  v1:= length @variable v6;
  #L1f88e4.  if v0 == v1 then goto L1f88f0;
  #L1f88e8.  v5:= length @variable v5;
  #L1f88ea.  v6:= length @variable v6;
  #L1f88ec.  v5:= v5 - v6 @kind int;
  #L1f88ee.  return v5;
  #L1f88f0.  v0:= 0I;
  #L1f88f2.  v1:= 0I;
  #L1f88f4.  v2:= length @variable v5;
  #L1f88f6.  if v1 >= v2 then goto L1f8916;
  #L1f88fa.  v2:= v5[v1] @kind byte;
  #L1f88fe.  v3:= v6[v1] @kind byte;
  #L1f8902.  if v2 == v3 then goto L1f8910;
  #L1f8906.  v5:= v5[v1] @kind byte;
  #L1f890a.  v6:= v6[v1] @kind byte;
  #L1f890e.  goto L1f88ec;
  #L1f8910.  v1:= v1 + 1;
  #L1f8914.  goto L1f88f4;
  #L1f8916.  return v0;
}
