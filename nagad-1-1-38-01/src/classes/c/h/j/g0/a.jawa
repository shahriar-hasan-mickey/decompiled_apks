record `c.h.j.g0.a` @kind class @AccessFlag  extends `android.view.animation.Interpolator` @kind interface {
  `float`[] `c.h.j.g0.a.a` @AccessFlag PRIVATE_FINAL;
  `float`[] `c.h.j.g0.a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`c.h.j.g0.a` v8 @kind this, `android.graphics.Path` v9 @kind object) @signature `Lc/h/j/g0/a;.<init>:(Landroid/graphics/Path;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L201838.  call `<init>`(v8) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L20183e.  v0:= new `android.graphics.PathMeasure`;
  #L201842.  v1:= 0I;
  #L201844.  call `<init>`(v0, v9, v1) @signature `Landroid/graphics/PathMeasure;.<init>:(Landroid/graphics/Path;Z)V` @kind direct;
  #L20184a.  call temp:= `getLength`(v0) @signature `Landroid/graphics/PathMeasure;.getLength:()F` @kind virtual;
  #L201850.  v9:= temp;
  #L201852.  v2:= 990057071I;
  #L201858.  v2:= v9 / v2 @kind float;
  #L20185c.  v2:= (`int`) v2 @kind f2i;
  #L20185e.  v3:= 1I;
  #L201860.  v2:= v2 + v3 @kind int;
  #L201862.  v4:= new `float`[v2];
  #L201866.  v8.`c.h.j.g0.a.a` @type ^`float`[] := v4 @kind object;
  #L20186a.  v4:= new `float`[v2];
  #L20186e.  v8.`c.h.j.g0.a.b` @type ^`float`[] := v4 @kind object;
  #L201872.  v4:= 2I;
  #L201874.  v4:= new `float`[v4];
  #L201878.  v5:= 0I;
  #L20187a.  if v5 >= v2 then goto L2018b2;
  #L20187e.  v6:= (`float`) v5 @kind i2f;
  #L201880.  v6:= v6 * v9 @kind float;
  #L201884.  v7:= v2 + -1;
  #L201888.  v7:= (`float`) v7 @kind i2f;
  #L20188a.  v6:= v6 / v7 @kind float;
  #L20188c.  v7:= 0I;
  #L20188e.  call temp:= `getPosTan`(v0, v6, v4, v7) @signature `Landroid/graphics/PathMeasure;.getPosTan:(F[F[F)Z` @kind virtual;
  #L201894.  v6:= v8.`c.h.j.g0.a.a` @type ^`float`[] @kind object;
  #L201898.  v7:= v4[v1];
  #L20189c.  v6[v5]:= v7;
  #L2018a0.  v6:= v8.`c.h.j.g0.a.b` @type ^`float`[] @kind object;
  #L2018a4.  v7:= v4[v3];
  #L2018a8.  v6[v5]:= v7;
  #L2018ac.  v5:= v5 + 1;
  #L2018b0.  goto L20187a;
  #L2018b2.  return @kind void;
}
procedure `float` `getInterpolation`(`c.h.j.g0.a` v6 @kind this, `float` v7 ) @signature `Lc/h/j/g0/a;.getInterpolation:(F)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L20179c.  v0:= 0I;
  #L20179e.  v1:= fcmpg(v7, v0);
  #L2017a2.  if v1 > 0 then goto L2017a8;
  #L2017a6.  return v0;
  #L2017a8.  v1:= 1.0F;
  #L2017ac.  v2:= fcmpl(v7, v1);
  #L2017b0.  if v2 < 0 then goto L2017b6;
  #L2017b4.  return v1;
  #L2017b6.  v1:= 0I;
  #L2017b8.  v2:= v6.`c.h.j.g0.a.a` @type ^`float`[] @kind object;
  #L2017bc.  v2:= length @variable v2;
  #L2017be.  v3:= 1I;
  #L2017c0.  v2:= v2 - v3 @kind int;
  #L2017c2.  v4:= v2 - v1 @kind int;
  #L2017c6.  if v4 <= v3 then goto L2017ea;
  #L2017ca.  v4:= v1 + v2 @kind int;
  #L2017ce.  v4:= v4 / 2;
  #L2017d2.  v5:= v6.`c.h.j.g0.a.a` @type ^`float`[] @kind object;
  #L2017d6.  v5:= v5[v4];
  #L2017da.  v5:= fcmpg(v7, v5);
  #L2017de.  if v5 >= 0 then goto L2017e6;
  #L2017e2.  v2:= v4;
  #L2017e4.  goto L2017c2;
  #L2017e6.  v1:= v4;
  #L2017e8.  goto L2017c2;
  #L2017ea.  v3:= v6.`c.h.j.g0.a.a` @type ^`float`[] @kind object;
  #L2017ee.  v4:= v3[v2];
  #L2017f2.  v5:= v3[v1];
  #L2017f6.  v4:= v4 - v5 @kind float;
  #L2017f8.  v0:= fcmpl(v4, v0);
  #L2017fc.  if v0 != 0 then goto L20180a;
  #L201800.  v7:= v6.`c.h.j.g0.a.b` @type ^`float`[] @kind object;
  #L201804.  v7:= v7[v1];
  #L201808.  return v7;
  #L20180a.  v0:= v3[v1];
  #L20180e.  v7:= v7 - v0 @kind float;
  #L201810.  v7:= v7 / v4 @kind float;
  #L201812.  v0:= v6.`c.h.j.g0.a.b` @type ^`float`[] @kind object;
  #L201816.  v1:= v0[v1];
  #L20181a.  v0:= v0[v2];
  #L20181e.  v0:= v0 - v1 @kind float;
  #L201820.  v7:= v7 * v0 @kind float;
  #L201824.  v1:= v1 + v7 @kind float;
  #L201826.  return v1;
}
