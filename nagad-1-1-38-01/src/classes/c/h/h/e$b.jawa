record `c.h.h.e$b` @kind class @AccessFlag  extends `c.h.h.e$c` @kind interface {
}
global `c.h.h.e$b` `@@c.h.h.e$b.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lc/h/h/e$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1fa6ec.  v0:= new `c.h.h.e$b`;
  #L1fa6f0.  call `<init>`(v0) @signature `Lc/h/h/e$b;.<init>:()V` @kind direct;
  #L1fa6f6.  `@@c.h.h.e$b.a` @type ^`c.h.h.e$b` := v0 @kind object;
  #L1fa6fa.  return @kind void;
}
procedure `void` `<init>`(`c.h.h.e$b` v0 @kind this) @signature `Lc/h/h/e$b;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1fa70c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1fa712.  return @kind void;
}
procedure `int` `checkRtl`(`c.h.h.e$b` v2 @kind this, `java.lang.CharSequence` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lc/h/h/e$b;.checkRtl:(Ljava/lang/CharSequence;II)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fa6ac.  v5:= v5 + v4 @kind int;
  #L1fa6ae.  v0:= 2I;
  #L1fa6b0.  v1:= 2I;
  #L1fa6b2.  if v4 >= v5 then goto L1fa6d8;
  #L1fa6b6.  if v1 != v0 then goto L1fa6d8;
  #L1fa6ba.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L1fa6c0.  v1:= temp;
  #L1fa6c2.  call temp:= `getDirectionality`(v1) @signature `Ljava/lang/Character;.getDirectionality:(C)B` @kind static;
  #L1fa6c8.  v1:= temp;
  #L1fa6ca.  call temp:= `b`(v1) @signature `Lc/h/h/e;.b:(I)I` @kind static;
  #L1fa6d0.  v1:= temp;
  #L1fa6d2.  v4:= v4 + 1;
  #L1fa6d6.  goto L1fa6b2;
  #L1fa6d8.  return v1;
}
