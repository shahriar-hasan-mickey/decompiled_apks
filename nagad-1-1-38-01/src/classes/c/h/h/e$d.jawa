record `c.h.h.e$d` @kind class @AccessFlag ABSTRACT extends `c.h.h.d` @kind interface {
  `c.h.h.e$c` `c.h.h.e$d.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`c.h.h.e$d` v0 @kind this, `c.h.h.e$c` v1 @kind object) @signature `Lc/h/h/e$d;.<init>:(Lc/h/h/e$c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1fa7b0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1fa7b6.  v0.`c.h.h.e$d.a` @type ^`c.h.h.e$c` := v1 @kind object;
  #L1fa7ba.  return @kind void;
}
procedure `boolean` `a`(`c.h.h.e$d` v1 @kind this, `java.lang.CharSequence` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lc/h/h/e$d;.a:(Ljava/lang/CharSequence;II)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1fa724.  v0:= v1.`c.h.h.e$d.a` @type ^`c.h.h.e$c` @kind object;
  #L1fa728.  call temp:= `checkRtl`(v0, v2, v3, v4) @signature `Lc/h/h/e$c;.checkRtl:(Ljava/lang/CharSequence;II)I` @kind interface;
  #L1fa72e.  v2:= temp;
  #L1fa730.  v3:= 1I;
  #L1fa732.  if v2 == 0 then goto L1fa748;
  #L1fa736.  if v2 == v3 then goto L1fa744;
  #L1fa73a.  call temp:= `defaultIsRtl`(v1) @signature `Lc/h/h/e$d;.defaultIsRtl:()Z` @kind virtual;
  #L1fa740.  v2:= temp;
  #L1fa742.  return v2;
  #L1fa744.  v2:= 0I;
  #L1fa746.  return v2;
  #L1fa748.  return v3;
}
procedure `boolean` `defaultIsRtl`() @signature `Lc/h/h/e$d;.defaultIsRtl:()Z` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `isRtl`(`c.h.h.e$d` v1 @kind this, `java.lang.CharSequence` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lc/h/h/e$d;.isRtl:(Ljava/lang/CharSequence;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1fa75c.  if v2 == 0 then goto L1fa792;
  #L1fa760.  if v3 < 0 then goto L1fa792;
  #L1fa764.  if v4 < 0 then goto L1fa792;
  #L1fa768.  call temp:= `length`(v2) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L1fa76e.  v0:= temp;
  #L1fa770.  v0:= v0 - v4 @kind int;
  #L1fa772.  if v0 < v3 then goto L1fa792;
  #L1fa776.  v0:= v1.`c.h.h.e$d.a` @type ^`c.h.h.e$c` @kind object;
  #L1fa77a.  if v0 != 0 then goto L1fa788;
  #L1fa77e.  call temp:= `defaultIsRtl`(v1) @signature `Lc/h/h/e$d;.defaultIsRtl:()Z` @kind virtual;
  #L1fa784.  v2:= temp;
  #L1fa786.  return v2;
  #L1fa788.  call temp:= `a`(v1, v2, v3, v4) @signature `Lc/h/h/e$d;.a:(Ljava/lang/CharSequence;II)Z` @kind direct;
  #L1fa78e.  v2:= temp;
  #L1fa790.  return v2;
  #L1fa792.  v2:= new `java.lang.IllegalArgumentException`;
  #L1fa796.  call `<init>`(v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1fa79c.  throw v2;
}
