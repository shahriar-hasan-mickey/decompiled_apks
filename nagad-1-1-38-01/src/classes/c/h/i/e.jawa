record `c.h.i.e` @kind class @AccessFlag PUBLIC extends `c.h.i.d` @kind interface {
  `java.lang.Object`[] `c.h.i.e.a` @AccessFlag PRIVATE_FINAL;
  `int` `c.h.i.e.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.h.i.e` v1 @kind this, `int` v2 ) @signature `Lc/h/i/e;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1facc0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1facc6.  if v2 <= 0 then goto L1facd4;
  #L1facca.  v2:= new `java.lang.Object`[v2];
  #L1facce.  v1.`c.h.i.e.a` @type ^`java.lang.Object`[] := v2 @kind object;
  #L1facd2.  return @kind void;
  #L1facd4.  v2:= new `java.lang.IllegalArgumentException`;
  #L1facd8.  v0:= "The max pool size must be > 0" @kind object;
  #L1facdc.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1face2.  throw v2;
}
procedure `boolean` `a`(`c.h.i.e` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lc/h/i/e;.a:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1fac08.  v0:= 0I;
  #L1fac0a.  v1:= 0I;
  #L1fac0c.  v2:= v3.`c.h.i.e.b` @type ^`int`;
  #L1fac10.  if v1 >= v2 then goto L1fac2a;
  #L1fac14.  v2:= v3.`c.h.i.e.a` @type ^`java.lang.Object`[] @kind object;
  #L1fac18.  v2:= v2[v1] @kind object;
  #L1fac1c.  if v2 != v4 then goto L1fac24;
  #L1fac20.  v4:= 1I;
  #L1fac22.  return v4;
  #L1fac24.  v1:= v1 + 1;
  #L1fac28.  goto L1fac0c;
  #L1fac2a.  return v0;
}
procedure `java.lang.Object` `acquire`(`c.h.i.e` v5 @kind this) @signature `Lc/h/i/e;.acquire:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1fac88.  v0:= v5.`c.h.i.e.b` @type ^`int`;
  #L1fac8c.  v1:= 0I;
  #L1fac8e.  if v0 <= 0 then goto L1facac;
  #L1fac92.  v2:= v0 + -1;
  #L1fac96.  v3:= v5.`c.h.i.e.a` @type ^`java.lang.Object`[] @kind object;
  #L1fac9a.  v4:= v3[v2] @kind object;
  #L1fac9e.  v3[v2]:= v1 @kind object;
  #L1faca2.  v0:= v0 + -1;
  #L1faca6.  v5.`c.h.i.e.b` @type ^`int` := v0;
  #L1facaa.  return v4 @kind object;
  #L1facac.  return v1 @kind object;
}
procedure `boolean` `release`(`c.h.i.e` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lc/h/i/e;.release:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1fac3c.  call temp:= `a`(v3, v4) @signature `Lc/h/i/e;.a:(Ljava/lang/Object;)Z` @kind direct;
  #L1fac42.  v0:= temp;
  #L1fac44.  if v0 != 0 then goto L1fac68;
  #L1fac48.  v0:= v3.`c.h.i.e.b` @type ^`int`;
  #L1fac4c.  v1:= v3.`c.h.i.e.a` @type ^`java.lang.Object`[] @kind object;
  #L1fac50.  v2:= length @variable v1;
  #L1fac52.  if v0 >= v2 then goto L1fac64;
  #L1fac56.  v1[v0]:= v4 @kind object;
  #L1fac5a.  v4:= 1I;
  #L1fac5c.  v0:= v0 + v4 @kind int;
  #L1fac5e.  v3.`c.h.i.e.b` @type ^`int` := v0;
  #L1fac62.  return v4;
  #L1fac64.  v4:= 0I;
  #L1fac66.  return v4;
  #L1fac68.  v4:= new `java.lang.IllegalStateException`;
  #L1fac6c.  v0:= "Already in the pool!" @kind object;
  #L1fac70.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fac76.  throw v4;
}
