record `c.h.i.b` @kind class @AccessFlag PUBLIC extends `java.io.Writer` @kind class {
  `java.lang.String` `c.h.i.b.f` @AccessFlag PRIVATE_FINAL;
  `java.lang.StringBuilder` `c.h.i.b.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.h.i.b` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lc/h/i/b;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1faaa8.  call `<init>`(v2) @signature `Ljava/io/Writer;.<init>:()V` @kind direct;
  #L1faaae.  v0:= new `java.lang.StringBuilder`;
  #L1faab2.  v1:= 128I;
  #L1faab6.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1faabc.  v2.`c.h.i.b.g` @type ^`java.lang.StringBuilder` := v0 @kind object;
  #L1faac0.  v2.`c.h.i.b.f` @type ^`java.lang.String` := v3 @kind object;
  #L1faac4.  return @kind void;
}
procedure `void` `a`(`c.h.i.b` v3 @kind this) @signature `Lc/h/i/b;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1fab08.  v0:= v3.`c.h.i.b.g` @type ^`java.lang.StringBuilder` @kind object;
  #L1fab0c.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L1fab12.  v0:= temp;
  #L1fab14.  if v0 <= 0 then goto L1fab42;
  #L1fab18.  v0:= v3.`c.h.i.b.f` @type ^`java.lang.String` @kind object;
  #L1fab1c.  v1:= v3.`c.h.i.b.g` @type ^`java.lang.StringBuilder` @kind object;
  #L1fab20.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1fab26.  v1:= temp @kind object;
  #L1fab28.  call temp:= `d`(v0, v1) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L1fab2e.  v0:= v3.`c.h.i.b.g` @type ^`java.lang.StringBuilder` @kind object;
  #L1fab32.  v1:= 0I;
  #L1fab34.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L1fab3a.  v2:= temp;
  #L1fab3c.  call temp:= `delete`(v0, v1, v2) @signature `Ljava/lang/StringBuilder;.delete:(II)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fab42.  return @kind void;
}
procedure `void` `close`(`c.h.i.b` v0 @kind this) @signature `Lc/h/i/b;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L1faad8.  call `a`(v0) @signature `Lc/h/i/b;.a:()V` @kind direct;
  #L1faade.  return @kind void;
}
procedure `void` `flush`(`c.h.i.b` v0 @kind this) @signature `Lc/h/i/b;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L1faaf0.  call `a`(v0) @signature `Lc/h/i/b;.a:()V` @kind direct;
  #L1faaf6.  return @kind void;
}
procedure `void` `write`(`c.h.i.b` v3 @kind this, `char`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lc/h/i/b;.write:([CII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1fab54.  v0:= 0I;
  #L1fab56.  if v0 >= v6 then goto L1fab82;
  #L1fab5a.  v1:= v5 + v0 @kind int;
  #L1fab5e.  v1:= v4[v1] @kind char;
  #L1fab62.  v2:= 10I;
  #L1fab66.  if v1 != v2 then goto L1fab72;
  #L1fab6a.  call `a`(v3) @signature `Lc/h/i/b;.a:()V` @kind direct;
  #L1fab70.  goto L1fab7c;
  #L1fab72.  v2:= v3.`c.h.i.b.g` @type ^`java.lang.StringBuilder` @kind object;
  #L1fab76.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1fab7c.  v0:= v0 + 1;
  #L1fab80.  goto L1fab56;
  #L1fab82.  return @kind void;
}
