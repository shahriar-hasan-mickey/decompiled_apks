record `c.h.i.f` @kind class @AccessFlag PUBLIC extends `c.h.i.e` @kind class {
  `java.lang.Object` `c.h.i.f.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`c.h.i.f` v0 @kind this, `int` v1 ) @signature `Lc/h/i/f;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1fad5c.  call `<init>`(v0, v1) @signature `Lc/h/i/e;.<init>:(I)V` @kind direct;
  #L1fad62.  v1:= new `java.lang.Object`;
  #L1fad66.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1fad6c.  v0.`c.h.i.f.c` @type ^`java.lang.Object` := v1 @kind object;
  #L1fad70.  return @kind void;
}
procedure `java.lang.Object` `acquire`(`c.h.i.f` v2 @kind this) @signature `Lc/h/i/f;.acquire:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1fad28.  v0:= v2.`c.h.i.f.c` @type ^`java.lang.Object` @kind object;
  #L1fad2c.  @monitorenter v0
  #L1fad2e.  call temp:= `acquire`(v2) @signature `Lc/h/i/e;.acquire:()Ljava/lang/Object;` @kind super;
  #L1fad34.  v1:= temp @kind object;
  #L1fad36.  @monitorexit v0
  #L1fad38.  return v1 @kind object;
  #L1fad3a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1fad3c.  @monitorexit v0
  #L1fad3e.  throw v1;
  catch `java.lang.Throwable` @[L1fad2e..L1fad3e] goto L1fad3a;
}
procedure `boolean` `release`(`c.h.i.f` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/h/i/f;.release:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1facf4.  v0:= v1.`c.h.i.f.c` @type ^`java.lang.Object` @kind object;
  #L1facf8.  @monitorenter v0
  #L1facfa.  call temp:= `release`(v1, v2) @signature `Lc/h/i/e;.release:(Ljava/lang/Object;)Z` @kind super;
  #L1fad00.  v2:= temp;
  #L1fad02.  @monitorexit v0
  #L1fad04.  return v2;
  #L1fad06.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1fad08.  @monitorexit v0
  #L1fad0a.  throw v2;
  catch `java.lang.Throwable` @[L1facfa..L1fad0a] goto L1fad06;
}
