record `c.h.i.g` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `checkArgumentNonnegative`(`int` v0 ) @signature `Lc/h/i/g;.checkArgumentNonnegative:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1fad84.  if v0 < 0 then goto L1fad8a;
  #L1fad88.  return v0;
  #L1fad8a.  v0:= new `java.lang.IllegalArgumentException`;
  #L1fad8e.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1fad94.  throw v0;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object) @signature `Lc/h/i/g;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1fada8.  if v0 == 0 then goto L1fadae;
  #L1fadac.  return v0 @kind object;
  #L1fadae.  v0:= new `java.lang.NullPointerException`;
  #L1fadb2.  call `<init>`(v0) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L1fadb8.  throw v0;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lc/h/i/g;.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1fadcc.  if v0 == 0 then goto L1fadd2;
  #L1fadd0.  return v0 @kind object;
  #L1fadd2.  v0:= new `java.lang.NullPointerException`;
  #L1fadd6.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1faddc.  v1:= temp @kind object;
  #L1fadde.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1fade4.  throw v0;
}
