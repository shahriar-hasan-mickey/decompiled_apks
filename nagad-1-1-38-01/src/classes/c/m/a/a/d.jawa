record `c.m.a.a.d` @kind class @AccessFlag ABSTRACT extends `android.view.animation.Interpolator` @kind interface {
  `float`[] `c.m.a.a.d.a` @AccessFlag PRIVATE_FINAL;
  `float` `c.m.a.a.d.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`c.m.a.a.d` v1 @kind this, `float`[] v2 @kind object) @signature `Lc/m/a/a/d;.<init>:([F)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L221ba8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L221bae.  v1.`c.m.a.a.d.a` @type ^`float`[] := v2 @kind object;
  #L221bb2.  v2:= v1.`c.m.a.a.d.a` @type ^`float`[] @kind object;
  #L221bb6.  v2:= length @variable v2;
  #L221bb8.  v2:= v2 + -1;
  #L221bbc.  v2:= (`float`) v2 @kind i2f;
  #L221bbe.  v0:= 1.0F;
  #L221bc2.  v0:= v0 / v2 @kind float;
  #L221bc4.  v1.`c.m.a.a.d.b` @type ^`float` := v0;
  #L221bc8.  return @kind void;
}
procedure `float` `getInterpolation`(`c.m.a.a.d` v4 @kind this, `float` v5 ) @signature `Lc/m/a/a/d;.getInterpolation:(F)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L221b30.  v0:= 1.0F;
  #L221b34.  v1:= fcmpl(v5, v0);
  #L221b38.  if v1 < 0 then goto L221b3e;
  #L221b3c.  return v0;
  #L221b3e.  v0:= 0I;
  #L221b40.  v1:= fcmpg(v5, v0);
  #L221b44.  if v1 > 0 then goto L221b4a;
  #L221b48.  return v0;
  #L221b4a.  v0:= v4.`c.m.a.a.d.a` @type ^`float`[] @kind object;
  #L221b4e.  v1:= length @variable v0;
  #L221b50.  v1:= v1 + -1;
  #L221b54.  v1:= (`float`) v1 @kind i2f;
  #L221b56.  v1:= v1 * v5 @kind float;
  #L221b5a.  v1:= (`int`) v1 @kind f2i;
  #L221b5c.  v0:= length @variable v0;
  #L221b5e.  v0:= v0 + -2;
  #L221b62.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L221b68.  v0:= temp;
  #L221b6a.  v1:= (`float`) v0 @kind i2f;
  #L221b6c.  v2:= v4.`c.m.a.a.d.b` @type ^`float`;
  #L221b70.  v1:= v1 * v2 @kind float;
  #L221b74.  v5:= v5 - v1 @kind float;
  #L221b76.  v5:= v5 / v2 @kind float;
  #L221b78.  v1:= v4.`c.m.a.a.d.a` @type ^`float`[] @kind object;
  #L221b7c.  v2:= v1[v0];
  #L221b80.  v3:= v0 + 1;
  #L221b84.  v3:= v1[v3];
  #L221b88.  v0:= v1[v0];
  #L221b8c.  v3:= v3 - v0 @kind float;
  #L221b8e.  v5:= v5 * v3 @kind float;
  #L221b92.  v2:= v2 + v5 @kind float;
  #L221b94.  return v2;
}
