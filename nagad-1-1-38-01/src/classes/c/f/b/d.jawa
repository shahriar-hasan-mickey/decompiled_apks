record `c.f.b.d` @kind class @AccessFlag PUBLIC {
  `boolean` `c.f.b.d.a` @AccessFlag PUBLIC;
  `int` `c.f.b.d.b` @AccessFlag ;
  `java.util.HashMap` `c.f.b.d.c` @AccessFlag PRIVATE;
  `c.f.b.d$a` `c.f.b.d.d` @AccessFlag PRIVATE;
  `int` `c.f.b.d.e` @AccessFlag PRIVATE;
  `int` `c.f.b.d.f` @AccessFlag PRIVATE;
  `c.f.b.b`[] `c.f.b.d.g` @AccessFlag ;
  `boolean` `c.f.b.d.h` @AccessFlag PUBLIC;
  `boolean` `c.f.b.d.i` @AccessFlag PUBLIC;
  `boolean`[] `c.f.b.d.j` @AccessFlag PRIVATE;
  `int` `c.f.b.d.k` @AccessFlag ;
  `int` `c.f.b.d.l` @AccessFlag ;
  `int` `c.f.b.d.m` @AccessFlag PRIVATE;
  `c.f.b.c` `c.f.b.d.n` @AccessFlag FINAL;
  `c.f.b.i`[] `c.f.b.d.o` @AccessFlag PRIVATE;
  `int` `c.f.b.d.p` @AccessFlag PRIVATE;
  `c.f.b.d$a` `c.f.b.d.q` @AccessFlag PRIVATE;
}
global `boolean` `@@c.f.b.d.r` @AccessFlag PUBLIC_STATIC;
global `boolean` `@@c.f.b.d.s` @AccessFlag PUBLIC_STATIC;
global `boolean` `@@c.f.b.d.t` @AccessFlag PUBLIC_STATIC;
global `boolean` `@@c.f.b.d.u` @AccessFlag PUBLIC_STATIC;
global `boolean` `@@c.f.b.d.v` @AccessFlag PUBLIC_STATIC;
global `int` `@@c.f.b.d.w` @AccessFlag PRIVATE_STATIC;
global `c.f.b.e` `@@c.f.b.d.x` @AccessFlag PUBLIC_STATIC;
global `long` `@@c.f.b.d.y` @AccessFlag PUBLIC_STATIC;
global `long` `@@c.f.b.d.z` @AccessFlag PUBLIC_STATIC;
procedure `void` `<init>`(`c.f.b.d` v3 @kind this) @signature `Lc/f/b/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1c9a38.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c9a3e.  v0:= 0I;
  #L1c9a40.  v3.`c.f.b.d.a` @type ^`boolean` := v0 @kind boolean;
  #L1c9a44.  v3.`c.f.b.d.b` @type ^`int` := v0;
  #L1c9a48.  v1:= 0I;
  #L1c9a4a.  v3.`c.f.b.d.c` @type ^`java.util.HashMap` := v1 @kind object;
  #L1c9a4e.  v2:= 32I;
  #L1c9a52.  v3.`c.f.b.d.e` @type ^`int` := v2;
  #L1c9a56.  v2:= v3.`c.f.b.d.e` @type ^`int`;
  #L1c9a5a.  v3.`c.f.b.d.f` @type ^`int` := v2;
  #L1c9a5e.  v3.`c.f.b.d.g` @type ^`c.f.b.b`[] := v1 @kind object;
  #L1c9a62.  v3.`c.f.b.d.h` @type ^`boolean` := v0 @kind boolean;
  #L1c9a66.  v3.`c.f.b.d.i` @type ^`boolean` := v0 @kind boolean;
  #L1c9a6a.  v1:= new `boolean`[v2];
  #L1c9a6e.  v3.`c.f.b.d.j` @type ^`boolean`[] := v1 @kind object;
  #L1c9a72.  v1:= 1I;
  #L1c9a74.  v3.`c.f.b.d.k` @type ^`int` := v1;
  #L1c9a78.  v3.`c.f.b.d.l` @type ^`int` := v0;
  #L1c9a7c.  v3.`c.f.b.d.m` @type ^`int` := v2;
  #L1c9a80.  v1:= `@@c.f.b.d.w` @type ^`int`;
  #L1c9a84.  v1:= new `c.f.b.i`[v1];
  #L1c9a88.  v3.`c.f.b.d.o` @type ^`c.f.b.i`[] := v1 @kind object;
  #L1c9a8c.  v3.`c.f.b.d.p` @type ^`int` := v0;
  #L1c9a90.  v0:= new `c.f.b.b`[v2];
  #L1c9a94.  v3.`c.f.b.d.g` @type ^`c.f.b.b`[] := v0 @kind object;
  #L1c9a98.  call `c`(v3) @signature `Lc/f/b/d;.c:()V` @kind direct;
  #L1c9a9e.  v0:= new `c.f.b.c`;
  #L1c9aa2.  call `<init>`(v0) @signature `Lc/f/b/c;.<init>:()V` @kind direct;
  #L1c9aa8.  v3.`c.f.b.d.n` @type ^`c.f.b.c` := v0 @kind object;
  #L1c9aac.  v0:= new `c.f.b.h`;
  #L1c9ab0.  v1:= v3.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c9ab4.  call `<init>`(v0, v1) @signature `Lc/f/b/h;.<init>:(Lc/f/b/c;)V` @kind direct;
  #L1c9aba.  v3.`c.f.b.d.d` @type ^`c.f.b.d$a` := v0 @kind object;
  #L1c9abe.  v0:= `@@c.f.b.d.v` @type ^`boolean` @kind boolean;
  #L1c9ac2.  if v0 == 0 then goto L1c9ada;
  #L1c9ac6.  v0:= new `c.f.b.d$b`;
  #L1c9aca.  v1:= v3.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c9ace.  call `<init>`(v0, v3, v1) @signature `Lc/f/b/d$b;.<init>:(Lc/f/b/d;Lc/f/b/c;)V` @kind direct;
  #L1c9ad4.  v3.`c.f.b.d.q` @type ^`c.f.b.d$a` := v0 @kind object;
  #L1c9ad8.  goto L1c9aec;
  #L1c9ada.  v0:= new `c.f.b.b`;
  #L1c9ade.  v1:= v3.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c9ae2.  call `<init>`(v0, v1) @signature `Lc/f/b/b;.<init>:(Lc/f/b/c;)V` @kind direct;
  #L1c9ae8.  v3.`c.f.b.d.q` @type ^`c.f.b.d$a` := v0 @kind object;
  #L1c9aec.  return @kind void;
}
procedure `int` `a`(`c.f.b.d` v12 @kind this, `c.f.b.d$a` v13 @kind object, `boolean` v14 ) @signature `Lc/f/b/d;.a:(Lc/f/b/d$a;Z)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1c98c0.  v14:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1c98c4.  v0:= 1L;
  #L1c98c8.  if v14 == 0 then goto L1c98d6;
  #L1c98cc.  v2:= v14.`c.f.b.e.h` @type ^`long` @kind wide;
  #L1c98d0.  v2:= v2 + v0 @kind long;
  #L1c98d2.  v14.`c.f.b.e.h` @type ^`long` := v2 @kind wide;
  #L1c98d6.  v14:= 0I;
  #L1c98d8.  v2:= 0I;
  #L1c98da.  v3:= v12.`c.f.b.d.k` @type ^`int`;
  #L1c98de.  if v2 >= v3 then goto L1c98f0;
  #L1c98e2.  v3:= v12.`c.f.b.d.j` @type ^`boolean`[] @kind object;
  #L1c98e6.  v3[v2]:= v14 @kind boolean;
  #L1c98ea.  v2:= v2 + 1;
  #L1c98ee.  goto L1c98da;
  #L1c98f0.  v2:= 0I;
  #L1c98f2.  v3:= 0I;
  #L1c98f4.  if v2 != 0 then goto L1c9a26;
  #L1c98f8.  v4:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1c98fc.  if v4 == 0 then goto L1c990a;
  #L1c9900.  v5:= v4.`c.f.b.e.i` @type ^`long` @kind wide;
  #L1c9904.  v5:= v5 + v0 @kind long;
  #L1c9906.  v4.`c.f.b.e.i` @type ^`long` := v5 @kind wide;
  #L1c990a.  v3:= v3 + 1;
  #L1c990e.  v4:= v12.`c.f.b.d.k` @type ^`int`;
  #L1c9912.  v4:= v4 * 2;
  #L1c9916.  if v3 < v4 then goto L1c991c;
  #L1c991a.  return v3;
  #L1c991c.  call temp:= `getKey`(v13) @signature `Lc/f/b/d$a;.getKey:()Lc/f/b/i;` @kind interface;
  #L1c9922.  v4:= temp @kind object;
  #L1c9924.  v5:= 1I;
  #L1c9926.  if v4 == 0 then goto L1c993e;
  #L1c992a.  v4:= v12.`c.f.b.d.j` @type ^`boolean`[] @kind object;
  #L1c992e.  call temp:= `getKey`(v13) @signature `Lc/f/b/d$a;.getKey:()Lc/f/b/i;` @kind interface;
  #L1c9934.  v6:= temp @kind object;
  #L1c9936.  v6:= v6.`c.f.b.i.c` @type ^`int`;
  #L1c993a.  v4[v6]:= v5 @kind boolean;
  #L1c993e.  v4:= v12.`c.f.b.d.j` @type ^`boolean`[] @kind object;
  #L1c9942.  call temp:= `getPivotCandidate`(v13, v12, v4) @signature `Lc/f/b/d$a;.getPivotCandidate:(Lc/f/b/d;[Z)Lc/f/b/i;` @kind interface;
  #L1c9948.  v4:= temp @kind object;
  #L1c994a.  if v4 == 0 then goto L1c9964;
  #L1c994e.  v6:= v12.`c.f.b.d.j` @type ^`boolean`[] @kind object;
  #L1c9952.  v7:= v4.`c.f.b.i.c` @type ^`int`;
  #L1c9956.  v8:= v6[v7] @kind boolean;
  #L1c995a.  if v8 == 0 then goto L1c9960;
  #L1c995e.  return v3;
  #L1c9960.  v6[v7]:= v5 @kind boolean;
  #L1c9964.  if v4 == 0 then goto L1c9a20;
  #L1c9968.  v5:= 2139095039I;
  #L1c996e.  v6:= -1I;
  #L1c9970.  v5:= 0I;
  #L1c9972.  v7:= -1I;
  #L1c9974.  v8:= 2139095039I;
  #L1c997a.  v9:= v12.`c.f.b.d.l` @type ^`int`;
  #L1c997e.  if v5 >= v9 then goto L1c99e2;
  #L1c9982.  v9:= v12.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1c9986.  v9:= v9[v5] @kind object;
  #L1c998a.  v10:= v9.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c998e.  v10:= v10.`c.f.b.i.j` @type ^`c.f.b.i$a` @kind object;
  #L1c9992.  v11:= `@@c.f.b.i$a.f` @type ^`c.f.b.i$a` @kind object;
  #L1c9996.  if v10 != v11 then goto L1c999c;
  #L1c999a.  goto L1c99dc;
  #L1c999c.  v10:= v9.`c.f.b.b.f` @type ^`boolean` @kind boolean;
  #L1c99a0.  if v10 == 0 then goto L1c99a6;
  #L1c99a4.  goto L1c99dc;
  #L1c99a6.  call temp:= `a`(v9, v4) @signature `Lc/f/b/b;.a:(Lc/f/b/i;)Z` @kind virtual;
  #L1c99ac.  v10:= temp;
  #L1c99ae.  if v10 == 0 then goto L1c99dc;
  #L1c99b2.  v10:= v9.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c99b6.  call temp:= `get`(v10, v4) @signature `Lc/f/b/b$a;.get:(Lc/f/b/i;)F` @kind interface;
  #L1c99bc.  v10:= temp;
  #L1c99be.  v11:= 0I;
  #L1c99c0.  v11:= fcmpg(v10, v11);
  #L1c99c4.  if v11 >= 0 then goto L1c99dc;
  #L1c99c8.  v9:= v9.`c.f.b.b.b` @type ^`float`;
  #L1c99cc.  v9:= -v9 @kind float;
  #L1c99ce.  v9:= v9 / v10 @kind float;
  #L1c99d0.  v10:= fcmpg(v9, v8);
  #L1c99d4.  if v10 >= 0 then goto L1c99dc;
  #L1c99d8.  v7:= v5;
  #L1c99da.  v8:= v9;
  #L1c99dc.  v5:= v5 + 1;
  #L1c99e0.  goto L1c997a;
  #L1c99e2.  if v7 <= v6 then goto L1c98f4;
  #L1c99e6.  v5:= v12.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1c99ea.  v5:= v5[v7] @kind object;
  #L1c99ee.  v8:= v5.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c99f2.  v8.`c.f.b.i.d` @type ^`int` := v6;
  #L1c99f6.  v6:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1c99fa.  if v6 == 0 then goto L1c9a08;
  #L1c99fe.  v8:= v6.`c.f.b.e.j` @type ^`long` @kind wide;
  #L1c9a02.  v8:= v8 + v0 @kind long;
  #L1c9a04.  v6.`c.f.b.e.j` @type ^`long` := v8 @kind wide;
  #L1c9a08.  call `b`(v5, v4) @signature `Lc/f/b/b;.b:(Lc/f/b/i;)V` @kind virtual;
  #L1c9a0e.  v4:= v5.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c9a12.  v4.`c.f.b.i.d` @type ^`int` := v7;
  #L1c9a16.  call `updateReferencesWithNewDefinition`(v4, v12, v5) @signature `Lc/f/b/i;.updateReferencesWithNewDefinition:(Lc/f/b/d;Lc/f/b/b;)V` @kind virtual;
  #L1c9a1c.  goto L1c98f4;
  #L1c9a20.  v2:= 1I;
  #L1c9a22.  goto L1c98f4;
  #L1c9a26.  return v3;
}
procedure `c.f.b.i` `a`(`c.f.b.d` v2 @kind this, `c.f.b.i$a` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lc/f/b/d;.a:(Lc/f/b/i$a;Ljava/lang/String;)Lc/f/b/i;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1c9388.  v0:= v2.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c938c.  v0:= v0.`c.f.b.c.c` @type ^`c.f.b.f` @kind object;
  #L1c9390.  call temp:= `acquire`(v0) @signature `Lc/f/b/f;.acquire:()Ljava/lang/Object;` @kind interface;
  #L1c9396.  v0:= temp @kind object;
  #L1c9398.  v0:= (`c.f.b.i`) v0 @kind object;
  #L1c939c.  if v0 != 0 then goto L1c93b2;
  #L1c93a0.  v0:= new `c.f.b.i`;
  #L1c93a4.  call `<init>`(v0, v3, v4) @signature `Lc/f/b/i;.<init>:(Lc/f/b/i$a;Ljava/lang/String;)V` @kind direct;
  #L1c93aa.  call `setType`(v0, v3, v4) @signature `Lc/f/b/i;.setType:(Lc/f/b/i$a;Ljava/lang/String;)V` @kind virtual;
  #L1c93b0.  goto L1c93be;
  #L1c93b2.  call `reset`(v0) @signature `Lc/f/b/i;.reset:()V` @kind virtual;
  #L1c93b8.  call `setType`(v0, v3, v4) @signature `Lc/f/b/i;.setType:(Lc/f/b/i$a;Ljava/lang/String;)V` @kind virtual;
  #L1c93be.  v3:= v2.`c.f.b.d.p` @type ^`int`;
  #L1c93c2.  v4:= `@@c.f.b.d.w` @type ^`int`;
  #L1c93c6.  if v3 < v4 then goto L1c93ea;
  #L1c93ca.  v4:= v4 * 2;
  #L1c93ce.  `@@c.f.b.d.w` @type ^`int` := v4;
  #L1c93d2.  v3:= v2.`c.f.b.d.o` @type ^`c.f.b.i`[] @kind object;
  #L1c93d6.  v4:= `@@c.f.b.d.w` @type ^`int`;
  #L1c93da.  call temp:= `copyOf`(v3, v4) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L1c93e0.  v3:= temp @kind object;
  #L1c93e2.  v3:= (`c.f.b.i`[]) v3 @kind object;
  #L1c93e6.  v2.`c.f.b.d.o` @type ^`c.f.b.i`[] := v3 @kind object;
  #L1c93ea.  v3:= v2.`c.f.b.d.o` @type ^`c.f.b.i`[] @kind object;
  #L1c93ee.  v4:= v2.`c.f.b.d.p` @type ^`int`;
  #L1c93f2.  v1:= v4 + 1;
  #L1c93f6.  v2.`c.f.b.d.p` @type ^`int` := v1;
  #L1c93fa.  v3[v4]:= v0 @kind object;
  #L1c93fe.  return v0 @kind object;
}
procedure `void` `a`(`c.f.b.d` v3 @kind this) @signature `Lc/f/b/d;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1ca174.  v0:= 0I;
  #L1ca176.  v1:= v3.`c.f.b.d.l` @type ^`int`;
  #L1ca17a.  if v0 >= v1 then goto L1ca198;
  #L1ca17e.  v1:= v3.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1ca182.  v1:= v1[v0] @kind object;
  #L1ca186.  v2:= v1.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1ca18a.  v1:= v1.`c.f.b.b.b` @type ^`float`;
  #L1ca18e.  v2.`c.f.b.i.f` @type ^`float` := v1;
  #L1ca192.  v0:= v0 + 1;
  #L1ca196.  goto L1ca176;
  #L1ca198.  return @kind void;
}
procedure `void` `a`(`c.f.b.d` v7 @kind this, `c.f.b.b` v8 @kind object) @signature `Lc/f/b/d;.a:(Lc/f/b/b;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1ca000.  v0:= `@@c.f.b.d.t` @type ^`boolean` @kind boolean;
  #L1ca004.  if v0 == 0 then goto L1ca020;
  #L1ca008.  v0:= v8.`c.f.b.b.f` @type ^`boolean` @kind boolean;
  #L1ca00c.  if v0 == 0 then goto L1ca020;
  #L1ca010.  v0:= v8.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1ca014.  v8:= v8.`c.f.b.b.b` @type ^`float`;
  #L1ca018.  call `setFinalValue`(v0, v7, v8) @signature `Lc/f/b/i;.setFinalValue:(Lc/f/b/d;F)V` @kind virtual;
  #L1ca01e.  goto L1ca042;
  #L1ca020.  v0:= v7.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1ca024.  v1:= v7.`c.f.b.d.l` @type ^`int`;
  #L1ca028.  v0[v1]:= v8 @kind object;
  #L1ca02c.  v0:= v8.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1ca030.  v0.`c.f.b.i.d` @type ^`int` := v1;
  #L1ca034.  v1:= v1 + 1;
  #L1ca038.  v7.`c.f.b.d.l` @type ^`int` := v1;
  #L1ca03c.  call `updateReferencesWithNewDefinition`(v0, v7, v8) @signature `Lc/f/b/i;.updateReferencesWithNewDefinition:(Lc/f/b/d;Lc/f/b/b;)V` @kind virtual;
  #L1ca042.  v8:= `@@c.f.b.d.t` @type ^`boolean` @kind boolean;
  #L1ca046.  if v8 == 0 then goto L1ca13e;
  #L1ca04a.  v8:= v7.`c.f.b.d.a` @type ^`boolean` @kind boolean;
  #L1ca04e.  if v8 == 0 then goto L1ca13e;
  #L1ca052.  v8:= 0I;
  #L1ca054.  v0:= 0I;
  #L1ca056.  v1:= v7.`c.f.b.d.l` @type ^`int`;
  #L1ca05a.  if v0 >= v1 then goto L1ca13a;
  #L1ca05e.  v1:= v7.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1ca062.  v1:= v1[v0] @kind object;
  #L1ca066.  if v1 != 0 then goto L1ca078;
  #L1ca06a.  v1:= `@@java.lang.System.out` @type ^`java.io.PrintStream` @kind object;
  #L1ca06e.  v2:= "WTF" @kind object;
  #L1ca072.  call `println`(v1, v2) @signature `Ljava/io/PrintStream;.println:(Ljava/lang/String;)V` @kind virtual;
  #L1ca078.  v1:= v7.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1ca07c.  v2:= v1[v0] @kind object;
  #L1ca080.  if v2 == 0 then goto L1ca134;
  #L1ca084.  v2:= v1[v0] @kind object;
  #L1ca088.  v2:= v2.`c.f.b.b.f` @type ^`boolean` @kind boolean;
  #L1ca08c.  if v2 == 0 then goto L1ca134;
  #L1ca090.  v1:= v1[v0] @kind object;
  #L1ca094.  v2:= v1.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1ca098.  v3:= v1.`c.f.b.b.b` @type ^`float`;
  #L1ca09c.  call `setFinalValue`(v2, v7, v3) @signature `Lc/f/b/i;.setFinalValue:(Lc/f/b/d;F)V` @kind virtual;
  #L1ca0a2.  v2:= `@@c.f.b.d.v` @type ^`boolean` @kind boolean;
  #L1ca0a6.  if v2 == 0 then goto L1ca0ba;
  #L1ca0aa.  v2:= v7.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1ca0ae.  v2:= v2.`c.f.b.c.a` @type ^`c.f.b.f` @kind object;
  #L1ca0b2.  call temp:= `release`(v2, v1) @signature `Lc/f/b/f;.release:(Ljava/lang/Object;)Z` @kind interface;
  #L1ca0b8.  goto L1ca0c8;
  #L1ca0ba.  v2:= v7.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1ca0be.  v2:= v2.`c.f.b.c.b` @type ^`c.f.b.f` @kind object;
  #L1ca0c2.  call temp:= `release`(v2, v1) @signature `Lc/f/b/f;.release:(Ljava/lang/Object;)Z` @kind interface;
  #L1ca0c8.  v1:= v7.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1ca0cc.  v2:= 0I;
  #L1ca0ce.  v1[v0]:= v2 @kind object;
  #L1ca0d2.  v1:= v0 + 1;
  #L1ca0d6.  v3:= v1;
  #L1ca0d8.  v4:= v7.`c.f.b.d.l` @type ^`int`;
  #L1ca0dc.  if v1 >= v4 then goto L1ca118;
  #L1ca0e0.  v3:= v7.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1ca0e4.  v4:= v1 + -1;
  #L1ca0e8.  v5:= v3[v1] @kind object;
  #L1ca0ec.  v3[v4]:= v5 @kind object;
  #L1ca0f0.  v5:= v3[v4] @kind object;
  #L1ca0f4.  v5:= v5.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1ca0f8.  v5:= v5.`c.f.b.i.d` @type ^`int`;
  #L1ca0fc.  if v5 != v1 then goto L1ca10c;
  #L1ca100.  v3:= v3[v4] @kind object;
  #L1ca104.  v3:= v3.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1ca108.  v3.`c.f.b.i.d` @type ^`int` := v4;
  #L1ca10c.  v3:= v1 + 1;
  #L1ca110.  v6:= v3;
  #L1ca112.  v3:= v1;
  #L1ca114.  v1:= v6;
  #L1ca116.  goto L1ca0d8;
  #L1ca118.  if v3 >= v4 then goto L1ca124;
  #L1ca11c.  v1:= v7.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1ca120.  v1[v3]:= v2 @kind object;
  #L1ca124.  v1:= v7.`c.f.b.d.l` @type ^`int`;
  #L1ca128.  v1:= v1 + -1;
  #L1ca12c.  v7.`c.f.b.d.l` @type ^`int` := v1;
  #L1ca130.  v0:= v0 + -1;
  #L1ca134.  v0:= v0 + 1;
  #L1ca138.  goto L1ca056;
  #L1ca13a.  v7.`c.f.b.d.a` @type ^`boolean` := v8 @kind boolean;
  #L1ca13e.  return @kind void;
}
procedure `int` `b`(`c.f.b.d` v17 @kind this, `c.f.b.d$a` v18 @kind object) @signature `Lc/f/b/d;.b:(Lc/f/b/d$a;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L1c9644.  v0:= v17 @kind object;
  #L1c9648.  v2:= 0I;
  #L1c964a.  v3:= v0.`c.f.b.d.l` @type ^`int`;
  #L1c964e.  v4:= 0I;
  #L1c9650.  if v2 >= v3 then goto L1c9688;
  #L1c9654.  v3:= v0.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1c9658.  v6:= v3[v2] @kind object;
  #L1c965c.  v6:= v6.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c9660.  v6:= v6.`c.f.b.i.j` @type ^`c.f.b.i$a` @kind object;
  #L1c9664.  v7:= `@@c.f.b.i$a.f` @type ^`c.f.b.i$a` @kind object;
  #L1c9668.  if v6 != v7 then goto L1c966e;
  #L1c966c.  goto L1c9682;
  #L1c966e.  v3:= v3[v2] @kind object;
  #L1c9672.  v3:= v3.`c.f.b.b.b` @type ^`float`;
  #L1c9676.  v3:= fcmpg(v3, v4);
  #L1c967a.  if v3 >= 0 then goto L1c9682;
  #L1c967e.  v2:= 1I;
  #L1c9680.  goto L1c968a;
  #L1c9682.  v2:= v2 + 1;
  #L1c9686.  goto L1c964a;
  #L1c9688.  v2:= 0I;
  #L1c968a.  if v2 == 0 then goto L1c9878;
  #L1c968e.  v2:= 0I;
  #L1c9690.  v3:= 0I;
  #L1c9692.  if v2 != 0 then goto L1c987a;
  #L1c9696.  v6:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1c969a.  v7:= 1L;
  #L1c969e.  if v6 == 0 then goto L1c96ac;
  #L1c96a2.  v9:= v6.`c.f.b.e.k` @type ^`long` @kind wide;
  #L1c96a6.  v9:= v9 + v7 @kind long;
  #L1c96a8.  v6.`c.f.b.e.k` @type ^`long` := v9 @kind wide;
  #L1c96ac.  v3:= v3 + 1;
  #L1c96b0.  v6:= 2139095039I;
  #L1c96b6.  v6:= 0I;
  #L1c96b8.  v10:= -1I;
  #L1c96ba.  v11:= -1I;
  #L1c96bc.  v12:= 2139095039I;
  #L1c96c2.  v13:= 0I;
  #L1c96c4.  v14:= v0.`c.f.b.d.l` @type ^`int`;
  #L1c96c8.  if v6 >= v14 then goto L1c9816;
  #L1c96cc.  v14:= v0.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1c96d0.  v14:= v14[v6] @kind object;
  #L1c96d4.  v15:= v14.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c96d8.  v15:= v15.`c.f.b.i.j` @type ^`c.f.b.i$a` @kind object;
  #L1c96dc.  v1:= `@@c.f.b.i$a.f` @type ^`c.f.b.i$a` @kind object;
  #L1c96e0.  if v15 != v1 then goto L1c96e8;
  #L1c96e4.  goto L1c980a;
  #L1c96e8.  v1:= v14.`c.f.b.b.f` @type ^`boolean` @kind boolean;
  #L1c96ec.  if v1 == 0 then goto L1c96f4;
  #L1c96f0.  goto L1c980a;
  #L1c96f4.  v1:= v14.`c.f.b.b.b` @type ^`float`;
  #L1c96f8.  v1:= fcmpg(v1, v4);
  #L1c96fc.  if v1 >= 0 then goto L1c980a;
  #L1c9700.  v1:= `@@c.f.b.d.u` @type ^`boolean` @kind boolean;
  #L1c9704.  v15:= 9I;
  #L1c9708.  if v1 == 0 then goto L1c97a2;
  #L1c970c.  v1:= v14.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c9710.  call temp:= `getCurrentSize`(v1) @signature `Lc/f/b/b$a;.getCurrentSize:()I` @kind interface;
  #L1c9716.  v1:= temp;
  #L1c9718.  v16:= v13;
  #L1c971c.  v13:= v12;
  #L1c971e.  v12:= v11;
  #L1c9720.  v11:= v10;
  #L1c9722.  v10:= 0I;
  #L1c9724.  if v10 >= v1 then goto L1c9796;
  #L1c9728.  v5:= v14.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c972c.  call temp:= `getVariable`(v5, v10) @signature `Lc/f/b/b$a;.getVariable:(I)Lc/f/b/i;` @kind interface;
  #L1c9732.  v5:= temp @kind object;
  #L1c9734.  v7:= v14.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c9738.  call temp:= `get`(v7, v5) @signature `Lc/f/b/b$a;.get:(Lc/f/b/i;)F` @kind interface;
  #L1c973e.  v7:= temp;
  #L1c9740.  v8:= fcmpg(v7, v4);
  #L1c9744.  if v8 > 0 then goto L1c974a;
  #L1c9748.  goto L1c9788;
  #L1c974a.  v9:= v16;
  #L1c974e.  v8:= 0I;
  #L1c9750.  if v8 >= v15 then goto L1c9784;
  #L1c9754.  v15:= v5.`c.f.b.i.h` @type ^`float`[] @kind object;
  #L1c9758.  v15:= v15[v8];
  #L1c975c.  v15:= v15 / v7 @kind float;
  #L1c975e.  v16:= fcmpg(v15, v13);
  #L1c9762.  if v16 >= 0 then goto L1c976a;
  #L1c9766.  if v8 == v9 then goto L1c976e;
  #L1c976a.  if v8 <= v9 then goto L1c977a;
  #L1c976e.  v9:= v5.`c.f.b.i.c` @type ^`int`;
  #L1c9772.  v11:= v6;
  #L1c9774.  v12:= v9;
  #L1c9776.  v13:= v15;
  #L1c9778.  v9:= v8;
  #L1c977a.  v8:= v8 + 1;
  #L1c977e.  v15:= 9I;
  #L1c9782.  goto L1c9750;
  #L1c9784.  v16:= v9;
  #L1c9788.  v10:= v10 + 1;
  #L1c978c.  v7:= 1L;
  #L1c9790.  v15:= 9I;
  #L1c9794.  goto L1c9724;
  #L1c9796.  v10:= v11;
  #L1c9798.  v11:= v12;
  #L1c979a.  v12:= v13;
  #L1c979c.  v13:= v16;
  #L1c97a0.  goto L1c980a;
  #L1c97a2.  v1:= 1I;
  #L1c97a4.  v5:= v0.`c.f.b.d.k` @type ^`int`;
  #L1c97a8.  if v1 >= v5 then goto L1c980a;
  #L1c97ac.  v5:= v0.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c97b0.  v5:= v5.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1c97b4.  v5:= v5[v1] @kind object;
  #L1c97b8.  v7:= v14.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c97bc.  call temp:= `get`(v7, v5) @signature `Lc/f/b/b$a;.get:(Lc/f/b/i;)F` @kind interface;
  #L1c97c2.  v7:= temp;
  #L1c97c4.  v8:= fcmpg(v7, v4);
  #L1c97c8.  if v8 > 0 then goto L1c97d2;
  #L1c97cc.  v9:= 9I;
  #L1c97d0.  goto L1c9804;
  #L1c97d2.  v8:= 0I;
  #L1c97d4.  v9:= 9I;
  #L1c97d8.  if v8 >= v9 then goto L1c9804;
  #L1c97dc.  v15:= v5.`c.f.b.i.h` @type ^`float`[] @kind object;
  #L1c97e0.  v15:= v15[v8];
  #L1c97e4.  v15:= v15 / v7 @kind float;
  #L1c97e6.  v16:= fcmpg(v15, v12);
  #L1c97ea.  if v16 >= 0 then goto L1c97f2;
  #L1c97ee.  if v8 == v13 then goto L1c97f6;
  #L1c97f2.  if v8 <= v13 then goto L1c97fe;
  #L1c97f6.  v11:= v1;
  #L1c97f8.  v10:= v6;
  #L1c97fa.  v13:= v8;
  #L1c97fc.  v12:= v15;
  #L1c97fe.  v8:= v8 + 1;
  #L1c9802.  goto L1c97d8;
  #L1c9804.  v1:= v1 + 1;
  #L1c9808.  goto L1c97a4;
  #L1c980a.  v6:= v6 + 1;
  #L1c980e.  v7:= 1L;
  #L1c9812.  goto L1c96c4;
  #L1c9816.  v1:= -1I;
  #L1c9818.  if v10 == v1 then goto L1c9864;
  #L1c981c.  v5:= v0.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1c9820.  v5:= v5[v10] @kind object;
  #L1c9824.  v6:= v5.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c9828.  v6.`c.f.b.i.d` @type ^`int` := v1;
  #L1c982c.  v1:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1c9830.  if v1 == 0 then goto L1c9842;
  #L1c9834.  v6:= v1.`c.f.b.e.j` @type ^`long` @kind wide;
  #L1c9838.  v8:= 1L;
  #L1c983c.  v6:= v6 + v8 @kind long;
  #L1c983e.  v1.`c.f.b.e.j` @type ^`long` := v6 @kind wide;
  #L1c9842.  v1:= v0.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c9846.  v1:= v1.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1c984a.  v1:= v1[v11] @kind object;
  #L1c984e.  call `b`(v5, v1) @signature `Lc/f/b/b;.b:(Lc/f/b/i;)V` @kind virtual;
  #L1c9854.  v1:= v5.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c9858.  v1.`c.f.b.i.d` @type ^`int` := v10;
  #L1c985c.  call `updateReferencesWithNewDefinition`(v1, v0, v5) @signature `Lc/f/b/i;.updateReferencesWithNewDefinition:(Lc/f/b/d;Lc/f/b/b;)V` @kind virtual;
  #L1c9862.  goto L1c9866;
  #L1c9864.  v2:= 1I;
  #L1c9866.  v1:= v0.`c.f.b.d.k` @type ^`int`;
  #L1c986a.  v1:= v1 / 2;
  #L1c986e.  if v3 <= v1 then goto L1c9692;
  #L1c9872.  v2:= 1I;
  #L1c9874.  goto L1c9692;
  #L1c9878.  v3:= 0I;
  #L1c987a.  return v3;
}
procedure `void` `b`(`c.f.b.d` v6 @kind this) @signature `Lc/f/b/d;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ca1ac.  v0:= v6.`c.f.b.d.e` @type ^`int`;
  #L1ca1b0.  v0:= v0 * 2;
  #L1ca1b4.  v6.`c.f.b.d.e` @type ^`int` := v0;
  #L1ca1b8.  v0:= v6.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1ca1bc.  v1:= v6.`c.f.b.d.e` @type ^`int`;
  #L1ca1c0.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L1ca1c6.  v0:= temp @kind object;
  #L1ca1c8.  v0:= (`c.f.b.b`[]) v0 @kind object;
  #L1ca1cc.  v6.`c.f.b.d.g` @type ^`c.f.b.b`[] := v0 @kind object;
  #L1ca1d0.  v0:= v6.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1ca1d4.  v1:= v0.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1ca1d8.  v2:= v6.`c.f.b.d.e` @type ^`int`;
  #L1ca1dc.  call temp:= `copyOf`(v1, v2) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L1ca1e2.  v1:= temp @kind object;
  #L1ca1e4.  v1:= (`c.f.b.i`[]) v1 @kind object;
  #L1ca1e8.  v0.`c.f.b.c.d` @type ^`c.f.b.i`[] := v1 @kind object;
  #L1ca1ec.  v0:= v6.`c.f.b.d.e` @type ^`int`;
  #L1ca1f0.  v1:= new `boolean`[v0];
  #L1ca1f4.  v6.`c.f.b.d.j` @type ^`boolean`[] := v1 @kind object;
  #L1ca1f8.  v6.`c.f.b.d.f` @type ^`int` := v0;
  #L1ca1fc.  v6.`c.f.b.d.m` @type ^`int` := v0;
  #L1ca200.  v1:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1ca204.  if v1 == 0 then goto L1ca234;
  #L1ca208.  v2:= v1.`c.f.b.e.d` @type ^`long` @kind wide;
  #L1ca20c.  v4:= 1L;
  #L1ca210.  v2:= v2 + v4 @kind long;
  #L1ca212.  v1.`c.f.b.e.d` @type ^`long` := v2 @kind wide;
  #L1ca216.  v2:= v1.`c.f.b.e.o` @type ^`long` @kind wide;
  #L1ca21a.  v4:= (`long`) v0 @kind i2l;
  #L1ca21c.  call temp:= `max`(v2, v4) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L1ca222.  v2:= temp @kind wide;
  #L1ca224.  v1.`c.f.b.e.o` @type ^`long` := v2 @kind wide;
  #L1ca228.  v0:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1ca22c.  v1:= v0.`c.f.b.e.o` @type ^`long` @kind wide;
  #L1ca230.  v0.`c.f.b.e.x` @type ^`long` := v1 @kind wide;
  #L1ca234.  return @kind void;
}
procedure `void` `c`(`c.f.b.d` v4 @kind this) @signature `Lc/f/b/d;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ca374.  v0:= `@@c.f.b.d.v` @type ^`boolean` @kind boolean;
  #L1ca378.  v1:= 0I;
  #L1ca37a.  v2:= 0I;
  #L1ca37c.  if v0 == 0 then goto L1ca3b0;
  #L1ca380.  v0:= v4.`c.f.b.d.l` @type ^`int`;
  #L1ca384.  if v2 >= v0 then goto L1ca3e0;
  #L1ca388.  v0:= v4.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1ca38c.  v0:= v0[v2] @kind object;
  #L1ca390.  if v0 == 0 then goto L1ca3a2;
  #L1ca394.  v3:= v4.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1ca398.  v3:= v3.`c.f.b.c.a` @type ^`c.f.b.f` @kind object;
  #L1ca39c.  call temp:= `release`(v3, v0) @signature `Lc/f/b/f;.release:(Ljava/lang/Object;)Z` @kind interface;
  #L1ca3a2.  v0:= v4.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1ca3a6.  v0[v2]:= v1 @kind object;
  #L1ca3aa.  v2:= v2 + 1;
  #L1ca3ae.  goto L1ca380;
  #L1ca3b0.  v0:= v4.`c.f.b.d.l` @type ^`int`;
  #L1ca3b4.  if v2 >= v0 then goto L1ca3e0;
  #L1ca3b8.  v0:= v4.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1ca3bc.  v0:= v0[v2] @kind object;
  #L1ca3c0.  if v0 == 0 then goto L1ca3d2;
  #L1ca3c4.  v3:= v4.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1ca3c8.  v3:= v3.`c.f.b.c.b` @type ^`c.f.b.f` @kind object;
  #L1ca3cc.  call temp:= `release`(v3, v0) @signature `Lc/f/b/f;.release:(Ljava/lang/Object;)Z` @kind interface;
  #L1ca3d2.  v0:= v4.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1ca3d6.  v0[v2]:= v1 @kind object;
  #L1ca3da.  v2:= v2 + 1;
  #L1ca3de.  goto L1ca3b0;
  #L1ca3e0.  return @kind void;
}
procedure `c.f.b.b` `createRowDimensionPercent`(`c.f.b.d` v0 @kind object, `c.f.b.i` v1 @kind object, `c.f.b.i` v2 @kind object, `float` v3 ) @signature `Lc/f/b/d;.createRowDimensionPercent:(Lc/f/b/d;Lc/f/b/i;Lc/f/b/i;F)Lc/f/b/b;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1c9338.  call temp:= `createRow`(v0) @signature `Lc/f/b/d;.createRow:()Lc/f/b/b;` @kind virtual;
  #L1c933e.  v0:= temp @kind object;
  #L1c9340.  call temp:= `a`(v0, v1, v2, v3) @signature `Lc/f/b/b;.a:(Lc/f/b/i;Lc/f/b/i;F)Lc/f/b/b;` @kind virtual;
  #L1c9346.  return v0 @kind object;
}
procedure `c.f.b.e` `getMetrics`() @signature `Lc/f/b/d;.getMetrics:()Lc/f/b/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1c9370.  v0:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1c9374.  return v0 @kind object;
}
procedure `void` `a`(`c.f.b.d` v1 @kind this, `c.f.b.b` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lc/f/b/d;.a:(Lc/f/b/b;II)V` @AccessFlag  {
    temp;
    v0;

  #L1ca150.  v0:= 0I;
  #L1ca152.  call temp:= `createErrorVariable`(v1, v4, v0) @signature `Lc/f/b/d;.createErrorVariable:(ILjava/lang/String;)Lc/f/b/i;` @kind virtual;
  #L1ca158.  v4:= temp @kind object;
  #L1ca15a.  call temp:= `a`(v2, v4, v3) @signature `Lc/f/b/b;.a:(Lc/f/b/i;I)Lc/f/b/b;` @kind virtual;
  #L1ca160.  return @kind void;
}
procedure `void` `a`(`c.f.b.d` v5 @kind this, `c.f.b.d$a` v6 @kind object) @signature `Lc/f/b/d;.a:(Lc/f/b/d$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ca308.  v0:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1ca30c.  if v0 == 0 then goto L1ca34e;
  #L1ca310.  v1:= v0.`c.f.b.e.t` @type ^`long` @kind wide;
  #L1ca314.  v3:= 1L;
  #L1ca318.  v1:= v1 + v3 @kind long;
  #L1ca31a.  v0.`c.f.b.e.t` @type ^`long` := v1 @kind wide;
  #L1ca31e.  v1:= v0.`c.f.b.e.u` @type ^`long` @kind wide;
  #L1ca322.  v3:= v5.`c.f.b.d.k` @type ^`int`;
  #L1ca326.  v3:= (`long`) v3 @kind i2l;
  #L1ca328.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L1ca32e.  v1:= temp @kind wide;
  #L1ca330.  v0.`c.f.b.e.u` @type ^`long` := v1 @kind wide;
  #L1ca334.  v0:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1ca338.  v1:= v0.`c.f.b.e.v` @type ^`long` @kind wide;
  #L1ca33c.  v3:= v5.`c.f.b.d.l` @type ^`int`;
  #L1ca340.  v3:= (`long`) v3 @kind i2l;
  #L1ca342.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L1ca348.  v1:= temp @kind wide;
  #L1ca34a.  v0.`c.f.b.e.v` @type ^`long` := v1 @kind wide;
  #L1ca34e.  call temp:= `b`(v5, v6) @signature `Lc/f/b/d;.b:(Lc/f/b/d$a;)I` @kind direct;
  #L1ca354.  v0:= 0I;
  #L1ca356.  call temp:= `a`(v5, v6, v0) @signature `Lc/f/b/d;.a:(Lc/f/b/d$a;Z)I` @kind direct;
  #L1ca35c.  call `a`(v5) @signature `Lc/f/b/d;.a:()V` @kind direct;
  #L1ca362.  return @kind void;
}
procedure `void` `addCenterPoint`(`c.f.b.d` v18 @kind this, `c.f.b.k.e` v19 @kind object, `c.f.b.k.e` v20 @kind object, `float` v21 , `int` v22 ) @signature `Lc/f/b/d;.addCenterPoint:(Lc/f/b/k/e;Lc/f/b/k/e;FI)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L1c9b00.  v0:= v18 @kind object;
  #L1c9b04.  v1:= v19 @kind object;
  #L1c9b08.  v2:= v20 @kind object;
  #L1c9b0c.  v3:= `@@c.f.b.k.d$b.g` @type ^`c.f.b.k.d$b` @kind object;
  #L1c9b10.  call temp:= `getAnchor`(v1, v3) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1c9b16.  v3:= temp @kind object;
  #L1c9b18.  call temp:= `createObjectVariable`(v0, v3) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1c9b1e.  v5:= temp @kind object;
  #L1c9b20.  v3:= `@@c.f.b.k.d$b.h` @type ^`c.f.b.k.d$b` @kind object;
  #L1c9b24.  call temp:= `getAnchor`(v1, v3) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1c9b2a.  v3:= temp @kind object;
  #L1c9b2c.  call temp:= `createObjectVariable`(v0, v3) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1c9b32.  v7:= temp @kind object;
  #L1c9b34.  v3:= `@@c.f.b.k.d$b.i` @type ^`c.f.b.k.d$b` @kind object;
  #L1c9b38.  call temp:= `getAnchor`(v1, v3) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1c9b3e.  v3:= temp @kind object;
  #L1c9b40.  call temp:= `createObjectVariable`(v0, v3) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1c9b46.  v3:= temp @kind object;
  #L1c9b48.  v4:= `@@c.f.b.k.d$b.j` @type ^`c.f.b.k.d$b` @kind object;
  #L1c9b4c.  call temp:= `getAnchor`(v1, v4) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1c9b52.  v1:= temp @kind object;
  #L1c9b54.  call temp:= `createObjectVariable`(v0, v1) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1c9b5a.  v8:= temp @kind object;
  #L1c9b5c.  v1:= `@@c.f.b.k.d$b.g` @type ^`c.f.b.k.d$b` @kind object;
  #L1c9b60.  call temp:= `getAnchor`(v2, v1) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1c9b66.  v1:= temp @kind object;
  #L1c9b68.  call temp:= `createObjectVariable`(v0, v1) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1c9b6e.  v1:= temp @kind object;
  #L1c9b70.  v4:= `@@c.f.b.k.d$b.h` @type ^`c.f.b.k.d$b` @kind object;
  #L1c9b74.  call temp:= `getAnchor`(v2, v4) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1c9b7a.  v4:= temp @kind object;
  #L1c9b7c.  call temp:= `createObjectVariable`(v0, v4) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1c9b82.  v9:= temp @kind object;
  #L1c9b84.  v4:= `@@c.f.b.k.d$b.i` @type ^`c.f.b.k.d$b` @kind object;
  #L1c9b88.  call temp:= `getAnchor`(v2, v4) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1c9b8e.  v4:= temp @kind object;
  #L1c9b90.  call temp:= `createObjectVariable`(v0, v4) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1c9b96.  v12:= temp @kind object;
  #L1c9b98.  v4:= `@@c.f.b.k.d$b.j` @type ^`c.f.b.k.d$b` @kind object;
  #L1c9b9c.  call temp:= `getAnchor`(v2, v4) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1c9ba2.  v2:= temp @kind object;
  #L1c9ba4.  call temp:= `createObjectVariable`(v0, v2) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1c9baa.  v10:= temp @kind object;
  #L1c9bac.  call temp:= `createRow`(v18) @signature `Lc/f/b/d;.createRow:()Lc/f/b/b;` @kind virtual;
  #L1c9bb2.  v2:= temp @kind object;
  #L1c9bb4.  v4:= v21;
  #L1c9bb8.  v13:= (`double`) v4 @kind f2d;
  #L1c9bba.  call temp:= `sin`(v13) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L1c9bc0.  v15:= temp @kind wide;
  #L1c9bc2.  v4:= v22;
  #L1c9bc6.  v17:= v3 @kind object;
  #L1c9bca.  v3:= (`double`) v4 @kind i2d;
  #L1c9bcc.  v19:= v12 @kind object;
  #L1c9bd0.  v11:= v15 * v3 @kind double;
  #L1c9bd4.  v11:= (`float`) v11 @kind d2f;
  #L1c9bd6.  v6:= v2 @kind object;
  #L1c9bd8.  call temp:= `createRowWithAngle`(v6, v7, v8, v9, v10, v11) @signature `Lc/f/b/b;.createRowWithAngle:(Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;F)Lc/f/b/b;` @kind virtual;
  #L1c9bde.  call `addConstraint`(v0, v2) @signature `Lc/f/b/d;.addConstraint:(Lc/f/b/b;)V` @kind virtual;
  #L1c9be4.  call temp:= `createRow`(v18) @signature `Lc/f/b/d;.createRow:()Lc/f/b/b;` @kind virtual;
  #L1c9bea.  v2:= temp @kind object;
  #L1c9bec.  call temp:= `cos`(v13) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L1c9bf2.  v6:= temp @kind wide;
  #L1c9bf4.  v6:= v6 * v3 @kind double;
  #L1c9bf8.  v9:= (`float`) v6 @kind d2f;
  #L1c9bfa.  v4:= v2 @kind object;
  #L1c9bfc.  v6:= v17 @kind object;
  #L1c9c00.  v7:= v1 @kind object;
  #L1c9c02.  v8:= v19 @kind object;
  #L1c9c06.  call temp:= `createRowWithAngle`(v4, v5, v6, v7, v8, v9) @signature `Lc/f/b/b;.createRowWithAngle:(Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;F)Lc/f/b/b;` @kind virtual;
  #L1c9c0c.  call `addConstraint`(v0, v2) @signature `Lc/f/b/d;.addConstraint:(Lc/f/b/b;)V` @kind virtual;
  #L1c9c12.  return @kind void;
}
procedure `void` `addCentering`(`c.f.b.d` v11 @kind this, `c.f.b.i` v12 @kind object, `c.f.b.i` v13 @kind object, `int` v14 , `float` v15 , `c.f.b.i` v16 @kind object, `c.f.b.i` v17 @kind object, `int` v18 , `int` v19 ) @signature `Lc/f/b/d;.addCentering:(Lc/f/b/i;Lc/f/b/i;IFLc/f/b/i;Lc/f/b/i;II)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1c9c24.  v0:= v11 @kind object;
  #L1c9c26.  v1:= v19;
  #L1c9c2a.  call temp:= `createRow`(v11) @signature `Lc/f/b/d;.createRow:()Lc/f/b/b;` @kind virtual;
  #L1c9c30.  v10:= temp @kind object;
  #L1c9c32.  v2:= v10 @kind object;
  #L1c9c34.  v3:= v12 @kind object;
  #L1c9c36.  v4:= v13 @kind object;
  #L1c9c38.  v5:= v14;
  #L1c9c3a.  v6:= v15;
  #L1c9c3c.  v7:= v16 @kind object;
  #L1c9c40.  v8:= v17 @kind object;
  #L1c9c44.  v9:= v18;
  #L1c9c48.  call temp:= `a`(v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lc/f/b/b;.a:(Lc/f/b/i;Lc/f/b/i;IFLc/f/b/i;Lc/f/b/i;I)Lc/f/b/b;` @kind virtual;
  #L1c9c4e.  v2:= 8I;
  #L1c9c52.  if v1 == v2 then goto L1c9c5c;
  #L1c9c56.  call temp:= `addError`(v10, v11, v1) @signature `Lc/f/b/b;.addError:(Lc/f/b/d;I)Lc/f/b/b;` @kind virtual;
  #L1c9c5c.  call `addConstraint`(v11, v10) @signature `Lc/f/b/d;.addConstraint:(Lc/f/b/b;)V` @kind virtual;
  #L1c9c62.  return @kind void;
}
procedure `void` `addConstraint`(`c.f.b.d` v7 @kind this, `c.f.b.b` v8 @kind object) @signature `Lc/f/b/d;.addConstraint:(Lc/f/b/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1c9c74.  if v8 != 0 then goto L1c9c7a;
  #L1c9c78.  return @kind void;
  #L1c9c7a.  v0:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1c9c7e.  v1:= 1L;
  #L1c9c82.  if v0 == 0 then goto L1c9ca2;
  #L1c9c86.  v3:= v0.`c.f.b.e.f` @type ^`long` @kind wide;
  #L1c9c8a.  v3:= v3 + v1 @kind long;
  #L1c9c8c.  v0.`c.f.b.e.f` @type ^`long` := v3 @kind wide;
  #L1c9c90.  v3:= v8.`c.f.b.b.f` @type ^`boolean` @kind boolean;
  #L1c9c94.  if v3 == 0 then goto L1c9ca2;
  #L1c9c98.  v3:= v0.`c.f.b.e.g` @type ^`long` @kind wide;
  #L1c9c9c.  v3:= v3 + v1 @kind long;
  #L1c9c9e.  v0.`c.f.b.e.g` @type ^`long` := v3 @kind wide;
  #L1c9ca2.  v0:= v7.`c.f.b.d.l` @type ^`int`;
  #L1c9ca6.  v3:= 1I;
  #L1c9ca8.  v0:= v0 + v3 @kind int;
  #L1c9caa.  v4:= v7.`c.f.b.d.m` @type ^`int`;
  #L1c9cae.  if v0 >= v4 then goto L1c9cc0;
  #L1c9cb2.  v0:= v7.`c.f.b.d.k` @type ^`int`;
  #L1c9cb6.  v0:= v0 + v3 @kind int;
  #L1c9cb8.  v4:= v7.`c.f.b.d.f` @type ^`int`;
  #L1c9cbc.  if v0 < v4 then goto L1c9cc6;
  #L1c9cc0.  call `b`(v7) @signature `Lc/f/b/d;.b:()V` @kind direct;
  #L1c9cc6.  v0:= 0I;
  #L1c9cc8.  v4:= v8.`c.f.b.b.f` @type ^`boolean` @kind boolean;
  #L1c9ccc.  if v4 != 0 then goto L1c9db2;
  #L1c9cd0.  call `updateFromSystem`(v8, v7) @signature `Lc/f/b/b;.updateFromSystem:(Lc/f/b/d;)V` @kind virtual;
  #L1c9cd6.  call temp:= `isEmpty`(v8) @signature `Lc/f/b/b;.isEmpty:()Z` @kind virtual;
  #L1c9cdc.  v4:= temp;
  #L1c9cde.  if v4 == 0 then goto L1c9ce4;
  #L1c9ce2.  return @kind void;
  #L1c9ce4.  call `a`(v8) @signature `Lc/f/b/b;.a:()V` @kind virtual;
  #L1c9cea.  call temp:= `a`(v8, v7) @signature `Lc/f/b/b;.a:(Lc/f/b/d;)Z` @kind virtual;
  #L1c9cf0.  v4:= temp;
  #L1c9cf2.  if v4 == 0 then goto L1c9da4;
  #L1c9cf6.  call temp:= `createExtraVariable`(v7) @signature `Lc/f/b/d;.createExtraVariable:()Lc/f/b/i;` @kind virtual;
  #L1c9cfc.  v4:= temp @kind object;
  #L1c9cfe.  v8.`c.f.b.b.a` @type ^`c.f.b.i` := v4 @kind object;
  #L1c9d02.  v5:= v7.`c.f.b.d.l` @type ^`int`;
  #L1c9d06.  call `a`(v7, v8) @signature `Lc/f/b/d;.a:(Lc/f/b/b;)V` @kind direct;
  #L1c9d0c.  v6:= v7.`c.f.b.d.l` @type ^`int`;
  #L1c9d10.  v5:= v5 + v3 @kind int;
  #L1c9d12.  if v6 != v5 then goto L1c9da4;
  #L1c9d16.  v0:= v7.`c.f.b.d.q` @type ^`c.f.b.d$a` @kind object;
  #L1c9d1a.  call `initFromRow`(v0, v8) @signature `Lc/f/b/d$a;.initFromRow:(Lc/f/b/d$a;)V` @kind interface;
  #L1c9d20.  v0:= v7.`c.f.b.d.q` @type ^`c.f.b.d$a` @kind object;
  #L1c9d24.  call temp:= `a`(v7, v0, v3) @signature `Lc/f/b/d;.a:(Lc/f/b/d$a;Z)I` @kind direct;
  #L1c9d2a.  v0:= v4.`c.f.b.i.d` @type ^`int`;
  #L1c9d2e.  v5:= -1I;
  #L1c9d30.  if v0 != v5 then goto L1c9da2;
  #L1c9d34.  v0:= v8.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c9d38.  if v0 != v4 then goto L1c9d60;
  #L1c9d3c.  call temp:= `pickPivot`(v8, v4) @signature `Lc/f/b/b;.pickPivot:(Lc/f/b/i;)Lc/f/b/i;` @kind virtual;
  #L1c9d42.  v0:= temp @kind object;
  #L1c9d44.  if v0 == 0 then goto L1c9d60;
  #L1c9d48.  v4:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1c9d4c.  if v4 == 0 then goto L1c9d5a;
  #L1c9d50.  v5:= v4.`c.f.b.e.j` @type ^`long` @kind wide;
  #L1c9d54.  v5:= v5 + v1 @kind long;
  #L1c9d56.  v4.`c.f.b.e.j` @type ^`long` := v5 @kind wide;
  #L1c9d5a.  call `b`(v8, v0) @signature `Lc/f/b/b;.b:(Lc/f/b/i;)V` @kind virtual;
  #L1c9d60.  v0:= v8.`c.f.b.b.f` @type ^`boolean` @kind boolean;
  #L1c9d64.  if v0 != 0 then goto L1c9d72;
  #L1c9d68.  v0:= v8.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c9d6c.  call `updateReferencesWithNewDefinition`(v0, v7, v8) @signature `Lc/f/b/i;.updateReferencesWithNewDefinition:(Lc/f/b/d;Lc/f/b/b;)V` @kind virtual;
  #L1c9d72.  v0:= `@@c.f.b.d.v` @type ^`boolean` @kind boolean;
  #L1c9d76.  if v0 == 0 then goto L1c9d8a;
  #L1c9d7a.  v0:= v7.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c9d7e.  v0:= v0.`c.f.b.c.a` @type ^`c.f.b.f` @kind object;
  #L1c9d82.  call temp:= `release`(v0, v8) @signature `Lc/f/b/f;.release:(Ljava/lang/Object;)Z` @kind interface;
  #L1c9d88.  goto L1c9d98;
  #L1c9d8a.  v0:= v7.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c9d8e.  v0:= v0.`c.f.b.c.b` @type ^`c.f.b.f` @kind object;
  #L1c9d92.  call temp:= `release`(v0, v8) @signature `Lc/f/b/f;.release:(Ljava/lang/Object;)Z` @kind interface;
  #L1c9d98.  v0:= v7.`c.f.b.d.l` @type ^`int`;
  #L1c9d9c.  v0:= v0 - v3 @kind int;
  #L1c9d9e.  v7.`c.f.b.d.l` @type ^`int` := v0;
  #L1c9da2.  v0:= 1I;
  #L1c9da4.  call temp:= `b`(v8) @signature `Lc/f/b/b;.b:()Z` @kind virtual;
  #L1c9daa.  v1:= temp;
  #L1c9dac.  if v1 != 0 then goto L1c9db2;
  #L1c9db0.  return @kind void;
  #L1c9db2.  if v0 != 0 then goto L1c9dbc;
  #L1c9db6.  call `a`(v7, v8) @signature `Lc/f/b/d;.a:(Lc/f/b/b;)V` @kind direct;
  #L1c9dbc.  return @kind void;
}
procedure `c.f.b.b` `addEquality`(`c.f.b.d` v3 @kind this, `c.f.b.i` v4 @kind object, `c.f.b.i` v5 @kind object, `int` v6 , `int` v7 ) @signature `Lc/f/b/d;.addEquality:(Lc/f/b/i;Lc/f/b/i;II)Lc/f/b/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c923c.  v0:= `@@c.f.b.d.s` @type ^`boolean` @kind boolean;
  #L1c9240.  v1:= 8I;
  #L1c9244.  if v0 == 0 then goto L1c9270;
  #L1c9248.  if v7 != v1 then goto L1c9270;
  #L1c924c.  v0:= v5.`c.f.b.i.g` @type ^`boolean` @kind boolean;
  #L1c9250.  if v0 == 0 then goto L1c9270;
  #L1c9254.  v0:= v4.`c.f.b.i.d` @type ^`int`;
  #L1c9258.  v2:= -1I;
  #L1c925a.  if v0 != v2 then goto L1c9270;
  #L1c925e.  v5:= v5.`c.f.b.i.f` @type ^`float`;
  #L1c9262.  v6:= (`float`) v6 @kind i2f;
  #L1c9264.  v5:= v5 + v6 @kind float;
  #L1c9266.  call `setFinalValue`(v4, v3, v5) @signature `Lc/f/b/i;.setFinalValue:(Lc/f/b/d;F)V` @kind virtual;
  #L1c926c.  v4:= 0I;
  #L1c926e.  return v4 @kind object;
  #L1c9270.  call temp:= `createRow`(v3) @signature `Lc/f/b/d;.createRow:()Lc/f/b/b;` @kind virtual;
  #L1c9276.  v0:= temp @kind object;
  #L1c9278.  call temp:= `createRowEquals`(v0, v4, v5, v6) @signature `Lc/f/b/b;.createRowEquals:(Lc/f/b/i;Lc/f/b/i;I)Lc/f/b/b;` @kind virtual;
  #L1c927e.  if v7 == v1 then goto L1c9288;
  #L1c9282.  call temp:= `addError`(v0, v3, v7) @signature `Lc/f/b/b;.addError:(Lc/f/b/d;I)Lc/f/b/b;` @kind virtual;
  #L1c9288.  call `addConstraint`(v3, v0) @signature `Lc/f/b/d;.addConstraint:(Lc/f/b/b;)V` @kind virtual;
  #L1c928e.  return v0 @kind object;
}
procedure `void` `addEquality`(`c.f.b.d` v5 @kind this, `c.f.b.i` v6 @kind object, `int` v7 ) @signature `Lc/f/b/d;.addEquality:(Lc/f/b/i;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c9dd0.  v0:= `@@c.f.b.d.s` @type ^`boolean` @kind boolean;
  #L1c9dd4.  v1:= -1I;
  #L1c9dd6.  v2:= 1I;
  #L1c9dd8.  if v0 == 0 then goto L1c9e30;
  #L1c9ddc.  v0:= v6.`c.f.b.i.d` @type ^`int`;
  #L1c9de0.  if v0 != v1 then goto L1c9e30;
  #L1c9de4.  v7:= (`float`) v7 @kind i2f;
  #L1c9de6.  call `setFinalValue`(v6, v5, v7) @signature `Lc/f/b/i;.setFinalValue:(Lc/f/b/d;F)V` @kind virtual;
  #L1c9dec.  v0:= 0I;
  #L1c9dee.  v1:= v5.`c.f.b.d.b` @type ^`int`;
  #L1c9df2.  v1:= v1 + v2 @kind int;
  #L1c9df4.  if v0 >= v1 then goto L1c9e2e;
  #L1c9df8.  v1:= v5.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c9dfc.  v1:= v1.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1c9e00.  v1:= v1[v0] @kind object;
  #L1c9e04.  if v1 == 0 then goto L1c9e28;
  #L1c9e08.  v3:= v1.`c.f.b.i.n` @type ^`boolean` @kind boolean;
  #L1c9e0c.  if v3 == 0 then goto L1c9e28;
  #L1c9e10.  v3:= v1.`c.f.b.i.o` @type ^`int`;
  #L1c9e14.  v4:= v6.`c.f.b.i.c` @type ^`int`;
  #L1c9e18.  if v3 != v4 then goto L1c9e28;
  #L1c9e1c.  v3:= v1.`c.f.b.i.p` @type ^`float`;
  #L1c9e20.  v3:= v3 + v7 @kind float;
  #L1c9e22.  call `setFinalValue`(v1, v5, v3) @signature `Lc/f/b/i;.setFinalValue:(Lc/f/b/d;F)V` @kind virtual;
  #L1c9e28.  v0:= v0 + 1;
  #L1c9e2c.  goto L1c9dee;
  #L1c9e2e.  return @kind void;
  #L1c9e30.  v0:= v6.`c.f.b.i.d` @type ^`int`;
  #L1c9e34.  if v0 == v1 then goto L1c9e82;
  #L1c9e38.  v1:= v5.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1c9e3c.  v0:= v1[v0] @kind object;
  #L1c9e40.  v1:= v0.`c.f.b.b.f` @type ^`boolean` @kind boolean;
  #L1c9e44.  if v1 == 0 then goto L1c9e50;
  #L1c9e48.  v6:= (`float`) v7 @kind i2f;
  #L1c9e4a.  v0.`c.f.b.b.b` @type ^`float` := v6;
  #L1c9e4e.  goto L1c9e96;
  #L1c9e50.  v1:= v0.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c9e54.  call temp:= `getCurrentSize`(v1) @signature `Lc/f/b/b$a;.getCurrentSize:()I` @kind interface;
  #L1c9e5a.  v1:= temp;
  #L1c9e5c.  if v1 != 0 then goto L1c9e6c;
  #L1c9e60.  v0.`c.f.b.b.f` @type ^`boolean` := v2 @kind boolean;
  #L1c9e64.  v6:= (`float`) v7 @kind i2f;
  #L1c9e66.  v0.`c.f.b.b.b` @type ^`float` := v6;
  #L1c9e6a.  goto L1c9e96;
  #L1c9e6c.  call temp:= `createRow`(v5) @signature `Lc/f/b/d;.createRow:()Lc/f/b/b;` @kind virtual;
  #L1c9e72.  v0:= temp @kind object;
  #L1c9e74.  call temp:= `createRowEquals`(v0, v6, v7) @signature `Lc/f/b/b;.createRowEquals:(Lc/f/b/i;I)Lc/f/b/b;` @kind virtual;
  #L1c9e7a.  call `addConstraint`(v5, v0) @signature `Lc/f/b/d;.addConstraint:(Lc/f/b/b;)V` @kind virtual;
  #L1c9e80.  goto L1c9e96;
  #L1c9e82.  call temp:= `createRow`(v5) @signature `Lc/f/b/d;.createRow:()Lc/f/b/b;` @kind virtual;
  #L1c9e88.  v0:= temp @kind object;
  #L1c9e8a.  call temp:= `b`(v0, v6, v7) @signature `Lc/f/b/b;.b:(Lc/f/b/i;I)Lc/f/b/b;` @kind virtual;
  #L1c9e90.  call `addConstraint`(v5, v0) @signature `Lc/f/b/d;.addConstraint:(Lc/f/b/b;)V` @kind virtual;
  #L1c9e96.  return @kind void;
}
procedure `void` `addGreaterBarrier`(`c.f.b.d` v2 @kind this, `c.f.b.i` v3 @kind object, `c.f.b.i` v4 @kind object, `int` v5 , `boolean` v6 ) @signature `Lc/f/b/d;.addGreaterBarrier:(Lc/f/b/i;Lc/f/b/i;IZ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c9ea8.  call temp:= `createRow`(v2) @signature `Lc/f/b/d;.createRow:()Lc/f/b/b;` @kind virtual;
  #L1c9eae.  v6:= temp @kind object;
  #L1c9eb0.  call temp:= `createSlackVariable`(v2) @signature `Lc/f/b/d;.createSlackVariable:()Lc/f/b/i;` @kind virtual;
  #L1c9eb6.  v0:= temp @kind object;
  #L1c9eb8.  v1:= 0I;
  #L1c9eba.  v0.`c.f.b.i.e` @type ^`int` := v1;
  #L1c9ebe.  call temp:= `createRowGreaterThan`(v6, v3, v4, v0, v5) @signature `Lc/f/b/b;.createRowGreaterThan:(Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;I)Lc/f/b/b;` @kind virtual;
  #L1c9ec4.  call `addConstraint`(v2, v6) @signature `Lc/f/b/d;.addConstraint:(Lc/f/b/b;)V` @kind virtual;
  #L1c9eca.  return @kind void;
}
procedure `void` `addGreaterThan`(`c.f.b.d` v3 @kind this, `c.f.b.i` v4 @kind object, `c.f.b.i` v5 @kind object, `int` v6 , `int` v7 ) @signature `Lc/f/b/d;.addGreaterThan:(Lc/f/b/i;Lc/f/b/i;II)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c9edc.  call temp:= `createRow`(v3) @signature `Lc/f/b/d;.createRow:()Lc/f/b/b;` @kind virtual;
  #L1c9ee2.  v0:= temp @kind object;
  #L1c9ee4.  call temp:= `createSlackVariable`(v3) @signature `Lc/f/b/d;.createSlackVariable:()Lc/f/b/i;` @kind virtual;
  #L1c9eea.  v1:= temp @kind object;
  #L1c9eec.  v2:= 0I;
  #L1c9eee.  v1.`c.f.b.i.e` @type ^`int` := v2;
  #L1c9ef2.  call temp:= `createRowGreaterThan`(v0, v4, v5, v1, v6) @signature `Lc/f/b/b;.createRowGreaterThan:(Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;I)Lc/f/b/b;` @kind virtual;
  #L1c9ef8.  v4:= 8I;
  #L1c9efc.  if v7 == v4 then goto L1c9f1c;
  #L1c9f00.  v4:= v0.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c9f04.  call temp:= `get`(v4, v1) @signature `Lc/f/b/b$a;.get:(Lc/f/b/i;)F` @kind interface;
  #L1c9f0a.  v4:= temp;
  #L1c9f0c.  v5:= -1.0F;
  #L1c9f10.  v4:= v4 * v5 @kind float;
  #L1c9f14.  v4:= (`int`) v4 @kind f2i;
  #L1c9f16.  call `a`(v3, v0, v4, v7) @signature `Lc/f/b/d;.a:(Lc/f/b/b;II)V` @kind virtual;
  #L1c9f1c.  call `addConstraint`(v3, v0) @signature `Lc/f/b/d;.addConstraint:(Lc/f/b/b;)V` @kind virtual;
  #L1c9f22.  return @kind void;
}
procedure `void` `addLowerBarrier`(`c.f.b.d` v2 @kind this, `c.f.b.i` v3 @kind object, `c.f.b.i` v4 @kind object, `int` v5 , `boolean` v6 ) @signature `Lc/f/b/d;.addLowerBarrier:(Lc/f/b/i;Lc/f/b/i;IZ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c9f34.  call temp:= `createRow`(v2) @signature `Lc/f/b/d;.createRow:()Lc/f/b/b;` @kind virtual;
  #L1c9f3a.  v6:= temp @kind object;
  #L1c9f3c.  call temp:= `createSlackVariable`(v2) @signature `Lc/f/b/d;.createSlackVariable:()Lc/f/b/i;` @kind virtual;
  #L1c9f42.  v0:= temp @kind object;
  #L1c9f44.  v1:= 0I;
  #L1c9f46.  v0.`c.f.b.i.e` @type ^`int` := v1;
  #L1c9f4a.  call temp:= `createRowLowerThan`(v6, v3, v4, v0, v5) @signature `Lc/f/b/b;.createRowLowerThan:(Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;I)Lc/f/b/b;` @kind virtual;
  #L1c9f50.  call `addConstraint`(v2, v6) @signature `Lc/f/b/d;.addConstraint:(Lc/f/b/b;)V` @kind virtual;
  #L1c9f56.  return @kind void;
}
procedure `void` `addLowerThan`(`c.f.b.d` v3 @kind this, `c.f.b.i` v4 @kind object, `c.f.b.i` v5 @kind object, `int` v6 , `int` v7 ) @signature `Lc/f/b/d;.addLowerThan:(Lc/f/b/i;Lc/f/b/i;II)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c9f68.  call temp:= `createRow`(v3) @signature `Lc/f/b/d;.createRow:()Lc/f/b/b;` @kind virtual;
  #L1c9f6e.  v0:= temp @kind object;
  #L1c9f70.  call temp:= `createSlackVariable`(v3) @signature `Lc/f/b/d;.createSlackVariable:()Lc/f/b/i;` @kind virtual;
  #L1c9f76.  v1:= temp @kind object;
  #L1c9f78.  v2:= 0I;
  #L1c9f7a.  v1.`c.f.b.i.e` @type ^`int` := v2;
  #L1c9f7e.  call temp:= `createRowLowerThan`(v0, v4, v5, v1, v6) @signature `Lc/f/b/b;.createRowLowerThan:(Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;I)Lc/f/b/b;` @kind virtual;
  #L1c9f84.  v4:= 8I;
  #L1c9f88.  if v7 == v4 then goto L1c9fa8;
  #L1c9f8c.  v4:= v0.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c9f90.  call temp:= `get`(v4, v1) @signature `Lc/f/b/b$a;.get:(Lc/f/b/i;)F` @kind interface;
  #L1c9f96.  v4:= temp;
  #L1c9f98.  v5:= -1.0F;
  #L1c9f9c.  v4:= v4 * v5 @kind float;
  #L1c9fa0.  v4:= (`int`) v4 @kind f2i;
  #L1c9fa2.  call `a`(v3, v0, v4, v7) @signature `Lc/f/b/d;.a:(Lc/f/b/b;II)V` @kind virtual;
  #L1c9fa8.  call `addConstraint`(v3, v0) @signature `Lc/f/b/d;.addConstraint:(Lc/f/b/b;)V` @kind virtual;
  #L1c9fae.  return @kind void;
}
procedure `void` `addRatio`(`c.f.b.d` v7 @kind this, `c.f.b.i` v8 @kind object, `c.f.b.i` v9 @kind object, `c.f.b.i` v10 @kind object, `c.f.b.i` v11 @kind object, `float` v12 , `int` v13 ) @signature `Lc/f/b/d;.addRatio:(Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;FI)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1c9fc0.  call temp:= `createRow`(v7) @signature `Lc/f/b/d;.createRow:()Lc/f/b/b;` @kind virtual;
  #L1c9fc6.  v6:= temp @kind object;
  #L1c9fc8.  v0:= v6 @kind object;
  #L1c9fca.  v1:= v8 @kind object;
  #L1c9fcc.  v2:= v9 @kind object;
  #L1c9fce.  v3:= v10 @kind object;
  #L1c9fd0.  v4:= v11 @kind object;
  #L1c9fd2.  v5:= v12;
  #L1c9fd4.  call temp:= `createRowDimensionRatio`(v0, v1, v2, v3, v4, v5) @signature `Lc/f/b/b;.createRowDimensionRatio:(Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;F)Lc/f/b/b;` @kind virtual;
  #L1c9fda.  v8:= 8I;
  #L1c9fde.  if v13 == v8 then goto L1c9fe8;
  #L1c9fe2.  call temp:= `addError`(v6, v7, v13) @signature `Lc/f/b/b;.addError:(Lc/f/b/d;I)Lc/f/b/b;` @kind virtual;
  #L1c9fe8.  call `addConstraint`(v7, v6) @signature `Lc/f/b/d;.addConstraint:(Lc/f/b/b;)V` @kind virtual;
  #L1c9fee.  return @kind void;
}
procedure `c.f.b.i` `createErrorVariable`(`c.f.b.d` v5 @kind this, `int` v6 , `java.lang.String` v7 @kind object) @signature `Lc/f/b/d;.createErrorVariable:(ILjava/lang/String;)Lc/f/b/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c9410.  v0:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1c9414.  if v0 == 0 then goto L1c9426;
  #L1c9418.  v1:= v0.`c.f.b.e.l` @type ^`long` @kind wide;
  #L1c941c.  v3:= 1L;
  #L1c9420.  v1:= v1 + v3 @kind long;
  #L1c9422.  v0.`c.f.b.e.l` @type ^`long` := v1 @kind wide;
  #L1c9426.  v0:= v5.`c.f.b.d.k` @type ^`int`;
  #L1c942a.  v0:= v0 + 1;
  #L1c942e.  v1:= v5.`c.f.b.d.f` @type ^`int`;
  #L1c9432.  if v0 < v1 then goto L1c943c;
  #L1c9436.  call `b`(v5) @signature `Lc/f/b/d;.b:()V` @kind direct;
  #L1c943c.  v0:= `@@c.f.b.i$a.i` @type ^`c.f.b.i$a` @kind object;
  #L1c9440.  call temp:= `a`(v5, v0, v7) @signature `Lc/f/b/d;.a:(Lc/f/b/i$a;Ljava/lang/String;)Lc/f/b/i;` @kind direct;
  #L1c9446.  v7:= temp @kind object;
  #L1c9448.  v0:= v5.`c.f.b.d.b` @type ^`int`;
  #L1c944c.  v0:= v0 + 1;
  #L1c9450.  v5.`c.f.b.d.b` @type ^`int` := v0;
  #L1c9454.  v0:= v5.`c.f.b.d.k` @type ^`int`;
  #L1c9458.  v0:= v0 + 1;
  #L1c945c.  v5.`c.f.b.d.k` @type ^`int` := v0;
  #L1c9460.  v0:= v5.`c.f.b.d.b` @type ^`int`;
  #L1c9464.  v7.`c.f.b.i.c` @type ^`int` := v0;
  #L1c9468.  v7.`c.f.b.i.e` @type ^`int` := v6;
  #L1c946c.  v6:= v5.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c9470.  v6:= v6.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1c9474.  v6[v0]:= v7 @kind object;
  #L1c9478.  v6:= v5.`c.f.b.d.d` @type ^`c.f.b.d$a` @kind object;
  #L1c947c.  call `addError`(v6, v7) @signature `Lc/f/b/d$a;.addError:(Lc/f/b/i;)V` @kind interface;
  #L1c9482.  return v7 @kind object;
}
procedure `c.f.b.i` `createExtraVariable`(`c.f.b.d` v5 @kind this) @signature `Lc/f/b/d;.createExtraVariable:()Lc/f/b/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c9494.  v0:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1c9498.  if v0 == 0 then goto L1c94aa;
  #L1c949c.  v1:= v0.`c.f.b.e.n` @type ^`long` @kind wide;
  #L1c94a0.  v3:= 1L;
  #L1c94a4.  v1:= v1 + v3 @kind long;
  #L1c94a6.  v0.`c.f.b.e.n` @type ^`long` := v1 @kind wide;
  #L1c94aa.  v0:= v5.`c.f.b.d.k` @type ^`int`;
  #L1c94ae.  v0:= v0 + 1;
  #L1c94b2.  v1:= v5.`c.f.b.d.f` @type ^`int`;
  #L1c94b6.  if v0 < v1 then goto L1c94c0;
  #L1c94ba.  call `b`(v5) @signature `Lc/f/b/d;.b:()V` @kind direct;
  #L1c94c0.  v0:= `@@c.f.b.i$a.h` @type ^`c.f.b.i$a` @kind object;
  #L1c94c4.  v1:= 0I;
  #L1c94c6.  call temp:= `a`(v5, v0, v1) @signature `Lc/f/b/d;.a:(Lc/f/b/i$a;Ljava/lang/String;)Lc/f/b/i;` @kind direct;
  #L1c94cc.  v0:= temp @kind object;
  #L1c94ce.  v1:= v5.`c.f.b.d.b` @type ^`int`;
  #L1c94d2.  v1:= v1 + 1;
  #L1c94d6.  v5.`c.f.b.d.b` @type ^`int` := v1;
  #L1c94da.  v1:= v5.`c.f.b.d.k` @type ^`int`;
  #L1c94de.  v1:= v1 + 1;
  #L1c94e2.  v5.`c.f.b.d.k` @type ^`int` := v1;
  #L1c94e6.  v1:= v5.`c.f.b.d.b` @type ^`int`;
  #L1c94ea.  v0.`c.f.b.i.c` @type ^`int` := v1;
  #L1c94ee.  v2:= v5.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c94f2.  v2:= v2.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1c94f6.  v2[v1]:= v0 @kind object;
  #L1c94fa.  return v0 @kind object;
}
procedure `c.f.b.i` `createObjectVariable`(`c.f.b.d` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c950c.  v0:= 0I;
  #L1c950e.  if v4 != 0 then goto L1c9514;
  #L1c9512.  return v0 @kind object;
  #L1c9514.  v1:= v3.`c.f.b.d.k` @type ^`int`;
  #L1c9518.  v1:= v1 + 1;
  #L1c951c.  v2:= v3.`c.f.b.d.f` @type ^`int`;
  #L1c9520.  if v1 < v2 then goto L1c952a;
  #L1c9524.  call `b`(v3) @signature `Lc/f/b/d;.b:()V` @kind direct;
  #L1c952a.  v1:= instanceof @variable v4 @type ^`c.f.b.k.d` @kind boolean;
  #L1c952e.  if v1 == 0 then goto L1c95ba;
  #L1c9532.  v4:= (`c.f.b.k.d`) v4 @kind object;
  #L1c9536.  call temp:= `getSolverVariable`(v4) @signature `Lc/f/b/k/d;.getSolverVariable:()Lc/f/b/i;` @kind virtual;
  #L1c953c.  v0:= temp @kind object;
  #L1c953e.  if v0 != 0 then goto L1c9556;
  #L1c9542.  v0:= v3.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c9546.  call `resetSolverVariable`(v4, v0) @signature `Lc/f/b/k/d;.resetSolverVariable:(Lc/f/b/c;)V` @kind virtual;
  #L1c954c.  call temp:= `getSolverVariable`(v4) @signature `Lc/f/b/k/d;.getSolverVariable:()Lc/f/b/i;` @kind virtual;
  #L1c9552.  v4:= temp @kind object;
  #L1c9554.  v0:= v4 @kind object;
  #L1c9556.  v4:= v0.`c.f.b.i.c` @type ^`int`;
  #L1c955a.  v1:= -1I;
  #L1c955c.  if v4 == v1 then goto L1c9578;
  #L1c9560.  v2:= v3.`c.f.b.d.b` @type ^`int`;
  #L1c9564.  if v4 > v2 then goto L1c9578;
  #L1c9568.  v2:= v3.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c956c.  v2:= v2.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1c9570.  v4:= v2[v4] @kind object;
  #L1c9574.  if v4 != 0 then goto L1c95ba;
  #L1c9578.  v4:= v0.`c.f.b.i.c` @type ^`int`;
  #L1c957c.  if v4 == v1 then goto L1c9586;
  #L1c9580.  call `reset`(v0) @signature `Lc/f/b/i;.reset:()V` @kind virtual;
  #L1c9586.  v4:= v3.`c.f.b.d.b` @type ^`int`;
  #L1c958a.  v4:= v4 + 1;
  #L1c958e.  v3.`c.f.b.d.b` @type ^`int` := v4;
  #L1c9592.  v4:= v3.`c.f.b.d.k` @type ^`int`;
  #L1c9596.  v4:= v4 + 1;
  #L1c959a.  v3.`c.f.b.d.k` @type ^`int` := v4;
  #L1c959e.  v4:= v3.`c.f.b.d.b` @type ^`int`;
  #L1c95a2.  v0.`c.f.b.i.c` @type ^`int` := v4;
  #L1c95a6.  v1:= `@@c.f.b.i$a.f` @type ^`c.f.b.i$a` @kind object;
  #L1c95aa.  v0.`c.f.b.i.j` @type ^`c.f.b.i$a` := v1 @kind object;
  #L1c95ae.  v1:= v3.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c95b2.  v1:= v1.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1c95b6.  v1[v4]:= v0 @kind object;
  #L1c95ba.  return v0 @kind object;
}
procedure `c.f.b.b` `createRow`(`c.f.b.d` v5 @kind this) @signature `Lc/f/b/d;.createRow:()Lc/f/b/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c92a0.  v0:= `@@c.f.b.d.v` @type ^`boolean` @kind boolean;
  #L1c92a4.  v1:= 1L;
  #L1c92a8.  if v0 == 0 then goto L1c92e6;
  #L1c92ac.  v0:= v5.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c92b0.  v0:= v0.`c.f.b.c.a` @type ^`c.f.b.f` @kind object;
  #L1c92b4.  call temp:= `acquire`(v0) @signature `Lc/f/b/f;.acquire:()Ljava/lang/Object;` @kind interface;
  #L1c92ba.  v0:= temp @kind object;
  #L1c92bc.  v0:= (`c.f.b.b`) v0 @kind object;
  #L1c92c0.  if v0 != 0 then goto L1c92de;
  #L1c92c4.  v0:= new `c.f.b.d$b`;
  #L1c92c8.  v3:= v5.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c92cc.  call `<init>`(v0, v5, v3) @signature `Lc/f/b/d$b;.<init>:(Lc/f/b/d;Lc/f/b/c;)V` @kind direct;
  #L1c92d2.  v3:= `@@c.f.b.d.z` @type ^`long` @kind wide;
  #L1c92d6.  v3:= v3 + v1 @kind long;
  #L1c92d8.  `@@c.f.b.d.z` @type ^`long` := v3 @kind wide;
  #L1c92dc.  goto L1c931e;
  #L1c92de.  call `reset`(v0) @signature `Lc/f/b/b;.reset:()V` @kind virtual;
  #L1c92e4.  goto L1c931e;
  #L1c92e6.  v0:= v5.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c92ea.  v0:= v0.`c.f.b.c.b` @type ^`c.f.b.f` @kind object;
  #L1c92ee.  call temp:= `acquire`(v0) @signature `Lc/f/b/f;.acquire:()Ljava/lang/Object;` @kind interface;
  #L1c92f4.  v0:= temp @kind object;
  #L1c92f6.  v0:= (`c.f.b.b`) v0 @kind object;
  #L1c92fa.  if v0 != 0 then goto L1c9318;
  #L1c92fe.  v0:= new `c.f.b.b`;
  #L1c9302.  v3:= v5.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c9306.  call `<init>`(v0, v3) @signature `Lc/f/b/b;.<init>:(Lc/f/b/c;)V` @kind direct;
  #L1c930c.  v3:= `@@c.f.b.d.y` @type ^`long` @kind wide;
  #L1c9310.  v3:= v3 + v1 @kind long;
  #L1c9312.  `@@c.f.b.d.y` @type ^`long` := v3 @kind wide;
  #L1c9316.  goto L1c931e;
  #L1c9318.  call `reset`(v0) @signature `Lc/f/b/b;.reset:()V` @kind virtual;
  #L1c931e.  call `a`() @signature `Lc/f/b/i;.a:()V` @kind static;
  #L1c9324.  return v0 @kind object;
}
procedure `c.f.b.i` `createSlackVariable`(`c.f.b.d` v5 @kind this) @signature `Lc/f/b/d;.createSlackVariable:()Lc/f/b/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c95cc.  v0:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1c95d0.  if v0 == 0 then goto L1c95e2;
  #L1c95d4.  v1:= v0.`c.f.b.e.m` @type ^`long` @kind wide;
  #L1c95d8.  v3:= 1L;
  #L1c95dc.  v1:= v1 + v3 @kind long;
  #L1c95de.  v0.`c.f.b.e.m` @type ^`long` := v1 @kind wide;
  #L1c95e2.  v0:= v5.`c.f.b.d.k` @type ^`int`;
  #L1c95e6.  v0:= v0 + 1;
  #L1c95ea.  v1:= v5.`c.f.b.d.f` @type ^`int`;
  #L1c95ee.  if v0 < v1 then goto L1c95f8;
  #L1c95f2.  call `b`(v5) @signature `Lc/f/b/d;.b:()V` @kind direct;
  #L1c95f8.  v0:= `@@c.f.b.i$a.h` @type ^`c.f.b.i$a` @kind object;
  #L1c95fc.  v1:= 0I;
  #L1c95fe.  call temp:= `a`(v5, v0, v1) @signature `Lc/f/b/d;.a:(Lc/f/b/i$a;Ljava/lang/String;)Lc/f/b/i;` @kind direct;
  #L1c9604.  v0:= temp @kind object;
  #L1c9606.  v1:= v5.`c.f.b.d.b` @type ^`int`;
  #L1c960a.  v1:= v1 + 1;
  #L1c960e.  v5.`c.f.b.d.b` @type ^`int` := v1;
  #L1c9612.  v1:= v5.`c.f.b.d.k` @type ^`int`;
  #L1c9616.  v1:= v1 + 1;
  #L1c961a.  v5.`c.f.b.d.k` @type ^`int` := v1;
  #L1c961e.  v1:= v5.`c.f.b.d.b` @type ^`int`;
  #L1c9622.  v0.`c.f.b.i.c` @type ^`int` := v1;
  #L1c9626.  v2:= v5.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c962a.  v2:= v2.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1c962e.  v2[v1]:= v0 @kind object;
  #L1c9632.  return v0 @kind object;
}
procedure `c.f.b.c` `getCache`(`c.f.b.d` v1 @kind this) @signature `Lc/f/b/d;.getCache:()Lc/f/b/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c9358.  v0:= v1.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c935c.  return v0 @kind object;
}
procedure `int` `getObjectVariableValue`(`c.f.b.d` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/f/b/d;.getObjectVariableValue:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c988c.  v2:= (`c.f.b.k.d`) v2 @kind object;
  #L1c9890.  call temp:= `getSolverVariable`(v2) @signature `Lc/f/b/k/d;.getSolverVariable:()Lc/f/b/i;` @kind virtual;
  #L1c9896.  v2:= temp @kind object;
  #L1c9898.  if v2 == 0 then goto L1c98aa;
  #L1c989c.  v2:= v2.`c.f.b.i.f` @type ^`float`;
  #L1c98a0.  v0:= 0.5F;
  #L1c98a4.  v2:= v2 + v0 @kind float;
  #L1c98a6.  v2:= (`int`) v2 @kind f2i;
  #L1c98a8.  return v2;
  #L1c98aa.  v2:= 0I;
  #L1c98ac.  return v2;
}
procedure `void` `minimize`(`c.f.b.d` v5 @kind this) @signature `Lc/f/b/d;.minimize:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ca248.  v0:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1ca24c.  v1:= 1L;
  #L1ca250.  if v0 == 0 then goto L1ca25e;
  #L1ca254.  v3:= v0.`c.f.b.e.e` @type ^`long` @kind wide;
  #L1ca258.  v3:= v3 + v1 @kind long;
  #L1ca25a.  v0.`c.f.b.e.e` @type ^`long` := v3 @kind wide;
  #L1ca25e.  v0:= v5.`c.f.b.d.d` @type ^`c.f.b.d$a` @kind object;
  #L1ca262.  call temp:= `isEmpty`(v0) @signature `Lc/f/b/d$a;.isEmpty:()Z` @kind interface;
  #L1ca268.  v0:= temp;
  #L1ca26a.  if v0 == 0 then goto L1ca276;
  #L1ca26e.  call `a`(v5) @signature `Lc/f/b/d;.a:()V` @kind direct;
  #L1ca274.  return @kind void;
  #L1ca276.  v0:= v5.`c.f.b.d.h` @type ^`boolean` @kind boolean;
  #L1ca27a.  if v0 != 0 then goto L1ca294;
  #L1ca27e.  v0:= v5.`c.f.b.d.i` @type ^`boolean` @kind boolean;
  #L1ca282.  if v0 == 0 then goto L1ca288;
  #L1ca286.  goto L1ca294;
  #L1ca288.  v0:= v5.`c.f.b.d.d` @type ^`c.f.b.d$a` @kind object;
  #L1ca28c.  call `a`(v5, v0) @signature `Lc/f/b/d;.a:(Lc/f/b/d$a;)V` @kind virtual;
  #L1ca292.  goto L1ca2f4;
  #L1ca294.  v0:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1ca298.  if v0 == 0 then goto L1ca2a6;
  #L1ca29c.  v3:= v0.`c.f.b.e.q` @type ^`long` @kind wide;
  #L1ca2a0.  v3:= v3 + v1 @kind long;
  #L1ca2a2.  v0.`c.f.b.e.q` @type ^`long` := v3 @kind wide;
  #L1ca2a6.  v0:= 0I;
  #L1ca2a8.  v3:= 0I;
  #L1ca2aa.  v4:= v5.`c.f.b.d.l` @type ^`int`;
  #L1ca2ae.  if v3 >= v4 then goto L1ca2ca;
  #L1ca2b2.  v4:= v5.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1ca2b6.  v4:= v4[v3] @kind object;
  #L1ca2ba.  v4:= v4.`c.f.b.b.f` @type ^`boolean` @kind boolean;
  #L1ca2be.  if v4 != 0 then goto L1ca2c4;
  #L1ca2c2.  goto L1ca2cc;
  #L1ca2c4.  v3:= v3 + 1;
  #L1ca2c8.  goto L1ca2aa;
  #L1ca2ca.  v0:= 1I;
  #L1ca2cc.  if v0 != 0 then goto L1ca2dc;
  #L1ca2d0.  v0:= v5.`c.f.b.d.d` @type ^`c.f.b.d$a` @kind object;
  #L1ca2d4.  call `a`(v5, v0) @signature `Lc/f/b/d;.a:(Lc/f/b/d$a;)V` @kind virtual;
  #L1ca2da.  goto L1ca2f4;
  #L1ca2dc.  v0:= `@@c.f.b.d.x` @type ^`c.f.b.e` @kind object;
  #L1ca2e0.  if v0 == 0 then goto L1ca2ee;
  #L1ca2e4.  v3:= v0.`c.f.b.e.p` @type ^`long` @kind wide;
  #L1ca2e8.  v3:= v3 + v1 @kind long;
  #L1ca2ea.  v0.`c.f.b.e.p` @type ^`long` := v3 @kind wide;
  #L1ca2ee.  call `a`(v5) @signature `Lc/f/b/d;.a:()V` @kind direct;
  #L1ca2f4.  return @kind void;
}
procedure `void` `reset`(`c.f.b.d` v5 @kind this) @signature `Lc/f/b/d;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ca3f4.  v0:= 0I;
  #L1ca3f6.  v1:= 0I;
  #L1ca3f8.  v2:= v5.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1ca3fc.  v3:= v2.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1ca400.  v4:= length @variable v3;
  #L1ca402.  if v1 >= v4 then goto L1ca41a;
  #L1ca406.  v2:= v3[v1] @kind object;
  #L1ca40a.  if v2 == 0 then goto L1ca414;
  #L1ca40e.  call `reset`(v2) @signature `Lc/f/b/i;.reset:()V` @kind virtual;
  #L1ca414.  v1:= v1 + 1;
  #L1ca418.  goto L1ca3f8;
  #L1ca41a.  v1:= v2.`c.f.b.c.c` @type ^`c.f.b.f` @kind object;
  #L1ca41e.  v2:= v5.`c.f.b.d.o` @type ^`c.f.b.i`[] @kind object;
  #L1ca422.  v3:= v5.`c.f.b.d.p` @type ^`int`;
  #L1ca426.  call `releaseAll`(v1, v2, v3) @signature `Lc/f/b/f;.releaseAll:([Ljava/lang/Object;I)V` @kind interface;
  #L1ca42c.  v5.`c.f.b.d.p` @type ^`int` := v0;
  #L1ca430.  v1:= v5.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1ca434.  v1:= v1.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1ca438.  v2:= 0I;
  #L1ca43a.  call `fill`(v1, v2) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L1ca440.  v1:= v5.`c.f.b.d.c` @type ^`java.util.HashMap` @kind object;
  #L1ca444.  if v1 == 0 then goto L1ca44e;
  #L1ca448.  call `clear`(v1) @signature `Ljava/util/HashMap;.clear:()V` @kind virtual;
  #L1ca44e.  v5.`c.f.b.d.b` @type ^`int` := v0;
  #L1ca452.  v1:= v5.`c.f.b.d.d` @type ^`c.f.b.d$a` @kind object;
  #L1ca456.  call `clear`(v1) @signature `Lc/f/b/d$a;.clear:()V` @kind interface;
  #L1ca45c.  v1:= 1I;
  #L1ca45e.  v5.`c.f.b.d.k` @type ^`int` := v1;
  #L1ca462.  v1:= 0I;
  #L1ca464.  v2:= v5.`c.f.b.d.l` @type ^`int`;
  #L1ca468.  if v1 >= v2 then goto L1ca486;
  #L1ca46c.  v2:= v5.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1ca470.  v3:= v2[v1] @kind object;
  #L1ca474.  if v3 == 0 then goto L1ca480;
  #L1ca478.  v2:= v2[v1] @kind object;
  #L1ca47c.  v2.`c.f.b.b.c` @type ^`boolean` := v0 @kind boolean;
  #L1ca480.  v1:= v1 + 1;
  #L1ca484.  goto L1ca464;
  #L1ca486.  call `c`(v5) @signature `Lc/f/b/d;.c:()V` @kind direct;
  #L1ca48c.  v5.`c.f.b.d.l` @type ^`int` := v0;
  #L1ca490.  v0:= `@@c.f.b.d.v` @type ^`boolean` @kind boolean;
  #L1ca494.  if v0 == 0 then goto L1ca4ac;
  #L1ca498.  v0:= new `c.f.b.d$b`;
  #L1ca49c.  v1:= v5.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1ca4a0.  call `<init>`(v0, v5, v1) @signature `Lc/f/b/d$b;.<init>:(Lc/f/b/d;Lc/f/b/c;)V` @kind direct;
  #L1ca4a6.  v5.`c.f.b.d.q` @type ^`c.f.b.d$a` := v0 @kind object;
  #L1ca4aa.  goto L1ca4be;
  #L1ca4ac.  v0:= new `c.f.b.b`;
  #L1ca4b0.  v1:= v5.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1ca4b4.  call `<init>`(v0, v1) @signature `Lc/f/b/b;.<init>:(Lc/f/b/c;)V` @kind direct;
  #L1ca4ba.  v5.`c.f.b.d.q` @type ^`c.f.b.d$a` := v0 @kind object;
  #L1ca4be.  return @kind void;
}
