record `c.f.b.k.n.p` @kind class @AccessFlag PUBLIC_ABSTRACT extends `c.f.b.k.n.d` @kind interface {
  `int` `c.f.b.k.n.p.a` @AccessFlag PUBLIC;
  `c.f.b.k.e` `c.f.b.k.n.p.b` @AccessFlag ;
  `c.f.b.k.n.m` `c.f.b.k.n.p.c` @AccessFlag ;
  `c.f.b.k.e$b` `c.f.b.k.n.p.d` @AccessFlag PROTECTED;
  `c.f.b.k.n.g` `c.f.b.k.n.p.e` @AccessFlag ;
  `int` `c.f.b.k.n.p.f` @AccessFlag PUBLIC;
  `boolean` `c.f.b.k.n.p.g` @AccessFlag ;
  `c.f.b.k.n.f` `c.f.b.k.n.p.h` @AccessFlag PUBLIC;
  `c.f.b.k.n.f` `c.f.b.k.n.p.i` @AccessFlag PUBLIC;
  `c.f.b.k.n.p$b` `c.f.b.k.n.p.j` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`c.f.b.k.n.p` v1 @kind this, `c.f.b.k.e` v2 @kind object) @signature `Lc/f/b/k/n/p;.<init>:(Lc/f/b/k/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1dd778.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1dd77e.  v0:= new `c.f.b.k.n.g`;
  #L1dd782.  call `<init>`(v0, v1) @signature `Lc/f/b/k/n/g;.<init>:(Lc/f/b/k/n/p;)V` @kind direct;
  #L1dd788.  v1.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` := v0 @kind object;
  #L1dd78c.  v0:= 0I;
  #L1dd78e.  v1.`c.f.b.k.n.p.f` @type ^`int` := v0;
  #L1dd792.  v1.`c.f.b.k.n.p.g` @type ^`boolean` := v0 @kind boolean;
  #L1dd796.  v0:= new `c.f.b.k.n.f`;
  #L1dd79a.  call `<init>`(v0, v1) @signature `Lc/f/b/k/n/f;.<init>:(Lc/f/b/k/n/p;)V` @kind direct;
  #L1dd7a0.  v1.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` := v0 @kind object;
  #L1dd7a4.  v0:= new `c.f.b.k.n.f`;
  #L1dd7a8.  call `<init>`(v0, v1) @signature `Lc/f/b/k/n/f;.<init>:(Lc/f/b/k/n/p;)V` @kind direct;
  #L1dd7ae.  v1.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` := v0 @kind object;
  #L1dd7b2.  v0:= `@@c.f.b.k.n.p$b.f` @type ^`c.f.b.k.n.p$b` @kind object;
  #L1dd7b6.  v1.`c.f.b.k.n.p.j` @type ^`c.f.b.k.n.p$b` := v0 @kind object;
  #L1dd7ba.  v1.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` := v2 @kind object;
  #L1dd7be.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.n.p` v6 @kind this, `int` v7 , `int` v8 ) @signature `Lc/f/b/k/n/p;.a:(II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1dd844.  v0:= v6.`c.f.b.k.n.p.a` @type ^`int`;
  #L1dd848.  if v0 == 0 then goto L1dd97e;
  #L1dd84c.  v1:= 1I;
  #L1dd84e.  if v0 == v1 then goto L1dd95a;
  #L1dd852.  v8:= 2I;
  #L1dd854.  v2:= 0.5F;
  #L1dd858.  if v0 == v8 then goto L1dd8f8;
  #L1dd85c.  v8:= 3I;
  #L1dd85e.  if v0 == v8 then goto L1dd866;
  #L1dd862.  goto L1dd990;
  #L1dd866.  v0:= v6.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dd86a.  v3:= v0.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dd86e.  v4:= v3.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dd872.  v5:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1dd876.  if v4 != v5 then goto L1dd89a;
  #L1dd87a.  v3:= v3.`c.f.b.k.n.p.a` @type ^`int`;
  #L1dd87e.  if v3 != v8 then goto L1dd89a;
  #L1dd882.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dd886.  v3:= v0.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dd88a.  if v3 != v5 then goto L1dd89a;
  #L1dd88e.  v0:= v0.`c.f.b.k.n.p.a` @type ^`int`;
  #L1dd892.  if v0 != v8 then goto L1dd89a;
  #L1dd896.  goto L1dd990;
  #L1dd89a.  v8:= v6.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dd89e.  if v7 != 0 then goto L1dd8a8;
  #L1dd8a2.  v8:= v8.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dd8a6.  goto L1dd8ac;
  #L1dd8a8.  v8:= v8.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dd8ac.  v0:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dd8b0.  v0:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dd8b4.  if v0 == 0 then goto L1dd990;
  #L1dd8b8.  v0:= v6.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dd8bc.  call temp:= `getDimensionRatio`(v0) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1dd8c2.  v0:= temp;
  #L1dd8c4.  if v7 != v1 then goto L1dd8da;
  #L1dd8c8.  v7:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dd8cc.  v7:= v7.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dd8d0.  v7:= (`float`) v7 @kind i2f;
  #L1dd8d2.  v7:= v7 / v0 @kind float;
  #L1dd8d4.  v7:= v7 + v2 @kind float;
  #L1dd8d6.  v7:= (`int`) v7 @kind f2i;
  #L1dd8d8.  goto L1dd8ec;
  #L1dd8da.  v7:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dd8de.  v7:= v7.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dd8e2.  v7:= (`float`) v7 @kind i2f;
  #L1dd8e4.  v0:= v0 * v7 @kind float;
  #L1dd8e8.  v0:= v0 + v2 @kind float;
  #L1dd8ea.  v7:= (`int`) v0 @kind f2i;
  #L1dd8ec.  v8:= v6.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dd8f0.  call `resolve`(v8, v7) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dd8f6.  goto L1dd990;
  #L1dd8f8.  v8:= v6.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dd8fc.  call temp:= `getParent`(v8) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1dd902.  v8:= temp @kind object;
  #L1dd904.  if v8 == 0 then goto L1dd990;
  #L1dd908.  if v7 != 0 then goto L1dd912;
  #L1dd90c.  v8:= v8.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dd910.  goto L1dd916;
  #L1dd912.  v8:= v8.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dd916.  v0:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dd91a.  v0:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dd91e.  if v0 == 0 then goto L1dd990;
  #L1dd922.  v0:= v6.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dd926.  if v7 != 0 then goto L1dd930;
  #L1dd92a.  v0:= v0.`c.f.b.k.e.s` @type ^`float`;
  #L1dd92e.  goto L1dd934;
  #L1dd930.  v0:= v0.`c.f.b.k.e.v` @type ^`float`;
  #L1dd934.  v8:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dd938.  v8:= v8.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dd93c.  v8:= (`float`) v8 @kind i2f;
  #L1dd93e.  v8:= v8 * v0 @kind float;
  #L1dd942.  v8:= v8 + v2 @kind float;
  #L1dd944.  v8:= (`int`) v8 @kind f2i;
  #L1dd946.  v0:= v6.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dd94a.  call temp:= `getLimitedDimension`(v6, v8, v7) @signature `Lc/f/b/k/n/p;.getLimitedDimension:(II)I` @kind virtual;
  #L1dd950.  v7:= temp;
  #L1dd952.  call `resolve`(v0, v7) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dd958.  goto L1dd990;
  #L1dd95a.  v0:= v6.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dd95e.  v0:= v0.`c.f.b.k.n.g.m` @type ^`int`;
  #L1dd962.  call temp:= `getLimitedDimension`(v6, v0, v7) @signature `Lc/f/b/k/n/p;.getLimitedDimension:(II)I` @kind virtual;
  #L1dd968.  v7:= temp;
  #L1dd96a.  v0:= v6.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dd96e.  call temp:= `min`(v7, v8) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1dd974.  v7:= temp;
  #L1dd976.  call `resolve`(v0, v7) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dd97c.  goto L1dd990;
  #L1dd97e.  v0:= v6.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dd982.  call temp:= `getLimitedDimension`(v6, v8, v7) @signature `Lc/f/b/k/n/p;.getLimitedDimension:(II)I` @kind virtual;
  #L1dd988.  v7:= temp;
  #L1dd98a.  call `resolve`(v0, v7) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dd990.  return @kind void;
}
procedure `void` `a`() @signature `Lc/f/b/k/n/p;.a:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `addTarget`(`c.f.b.k.n.p` v1 @kind this, `c.f.b.k.n.f` v2 @kind object, `c.f.b.k.n.f` v3 @kind object, `int` v4 ) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1dd7d0.  v0:= v2.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dd7d4.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dd7da.  v2.`c.f.b.k.n.f.f` @type ^`int` := v4;
  #L1dd7de.  v3:= v3.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1dd7e2.  call temp:= `add`(v3, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dd7e8.  return @kind void;
}
procedure `void` `addTarget`(`c.f.b.k.n.p` v2 @kind this, `c.f.b.k.n.f` v3 @kind object, `c.f.b.k.n.f` v4 @kind object, `int` v5 , `c.f.b.k.n.g` v6 @kind object) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;ILc/f/b/k/n/g;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L1dd7fc.  v0:= v3.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dd800.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dd806.  v0:= v3.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dd80a.  v1:= v2.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dd80e.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dd814.  v3.`c.f.b.k.n.f.h` @type ^`int` := v5;
  #L1dd818.  v3.`c.f.b.k.n.f.i` @type ^`c.f.b.k.n.g` := v6 @kind object;
  #L1dd81c.  v4:= v4.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1dd820.  call temp:= `add`(v4, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dd826.  v4:= v6.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1dd82a.  call temp:= `add`(v4, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dd830.  return @kind void;
}
procedure `void` `applyToWidget`() @signature `Lc/f/b/k/n/p;.applyToWidget:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `b`() @signature `Lc/f/b/k/n/p;.b:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `c`() @signature `Lc/f/b/k/n/p;.c:()Z` @AccessFlag ABSTRACT {

  # return;
}
procedure `int` `getLimitedDimension`(`c.f.b.k.n.p` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lc/f/b/k/n/p;.getLimitedDimension:(II)I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L1dd6e8.  if v3 != 0 then goto L1dd712;
  #L1dd6ec.  v3:= v1.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dd6f0.  v0:= v3.`c.f.b.k.e.r` @type ^`int`;
  #L1dd6f4.  v3:= v3.`c.f.b.k.e.q` @type ^`int`;
  #L1dd6f8.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1dd6fe.  v3:= temp;
  #L1dd700.  if v0 <= 0 then goto L1dd70c;
  #L1dd704.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1dd70a.  v3:= temp;
  #L1dd70c.  if v3 == v2 then goto L1dd738;
  #L1dd710.  goto L1dd736;
  #L1dd712.  v3:= v1.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dd716.  v0:= v3.`c.f.b.k.e.u` @type ^`int`;
  #L1dd71a.  v3:= v3.`c.f.b.k.e.t` @type ^`int`;
  #L1dd71e.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1dd724.  v3:= temp;
  #L1dd726.  if v0 <= 0 then goto L1dd732;
  #L1dd72a.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1dd730.  v3:= temp;
  #L1dd732.  if v3 == v2 then goto L1dd738;
  #L1dd736.  v2:= v3;
  #L1dd738.  return v2;
}
procedure `c.f.b.k.n.f` `getTarget`(`c.f.b.k.n.p` v3 @kind this, `c.f.b.k.d` v4 @kind object) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1dd5dc.  v4:= v4.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dd5e0.  v0:= 0I;
  #L1dd5e2.  if v4 != 0 then goto L1dd5e8;
  #L1dd5e6.  return v0 @kind object;
  #L1dd5e8.  v1:= v4.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1dd5ec.  v4:= v4.`c.f.b.k.d.e` @type ^`c.f.b.k.d$b` @kind object;
  #L1dd5f0.  v2:= `@@c.f.b.k.n.p$a.a` @type ^`int`[] @kind object;
  #L1dd5f4.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1dd5fa.  v4:= temp;
  #L1dd5fc.  v4:= v2[v4];
  #L1dd600.  v2:= 1I;
  #L1dd602.  if v4 == v2 then goto L1dd648;
  #L1dd606.  v2:= 2I;
  #L1dd608.  if v4 == v2 then goto L1dd63e;
  #L1dd60c.  v2:= 3I;
  #L1dd60e.  if v4 == v2 then goto L1dd634;
  #L1dd612.  v2:= 4I;
  #L1dd614.  if v4 == v2 then goto L1dd62a;
  #L1dd618.  v2:= 5I;
  #L1dd61a.  if v4 == v2 then goto L1dd620;
  #L1dd61e.  goto L1dd650;
  #L1dd620.  v4:= v1.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dd624.  v0:= v4.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dd628.  goto L1dd650;
  #L1dd62a.  v4:= v1.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dd62e.  v0:= v4.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` @kind object;
  #L1dd632.  goto L1dd650;
  #L1dd634.  v4:= v1.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dd638.  v0:= v4.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dd63c.  goto L1dd650;
  #L1dd63e.  v4:= v1.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dd642.  v0:= v4.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dd646.  goto L1dd650;
  #L1dd648.  v4:= v1.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dd64c.  v0:= v4.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dd650.  return v0 @kind object;
}
procedure `c.f.b.k.n.f` `getTarget`(`c.f.b.k.n.p` v2 @kind this, `c.f.b.k.d` v3 @kind object, `int` v4 ) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;I)Lc/f/b/k/n/f;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L1dd664.  v0:= v3.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dd668.  v1:= 0I;
  #L1dd66a.  if v0 != 0 then goto L1dd670;
  #L1dd66e.  return v1 @kind object;
  #L1dd670.  v0:= v0.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1dd674.  if v4 != 0 then goto L1dd67e;
  #L1dd678.  v4:= v0.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dd67c.  goto L1dd682;
  #L1dd67e.  v4:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dd682.  v3:= v3.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dd686.  v3:= v3.`c.f.b.k.d.e` @type ^`c.f.b.k.d$b` @kind object;
  #L1dd68a.  v0:= `@@c.f.b.k.n.p$a.a` @type ^`int`[] @kind object;
  #L1dd68e.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1dd694.  v3:= temp;
  #L1dd696.  v3:= v0[v3];
  #L1dd69a.  v0:= 1I;
  #L1dd69c.  if v3 == v0 then goto L1dd6ba;
  #L1dd6a0.  v0:= 2I;
  #L1dd6a2.  if v3 == v0 then goto L1dd6b4;
  #L1dd6a6.  v0:= 3I;
  #L1dd6a8.  if v3 == v0 then goto L1dd6ba;
  #L1dd6ac.  v0:= 5I;
  #L1dd6ae.  if v3 == v0 then goto L1dd6b4;
  #L1dd6b2.  goto L1dd6be;
  #L1dd6b4.  v1:= v4.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dd6b8.  goto L1dd6be;
  #L1dd6ba.  v1:= v4.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dd6be.  return v1 @kind object;
}
procedure `long` `getWrapDimension`(`c.f.b.k.n.p` v2 @kind this) @signature `Lc/f/b/k/n/p;.getWrapDimension:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dd74c.  v0:= v2.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dd750.  v1:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dd754.  if v1 == 0 then goto L1dd760;
  #L1dd758.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dd75c.  v0:= (`long`) v0 @kind i2l;
  #L1dd75e.  return v0 @kind wide;
  #L1dd760.  v0:= 0L;
  #L1dd764.  return v0 @kind wide;
}
procedure `boolean` `isResolved`(`c.f.b.k.n.p` v1 @kind this) @signature `Lc/f/b/k/n/p;.isResolved:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dd6d0.  v0:= v1.`c.f.b.k.n.p.g` @type ^`boolean` @kind boolean;
  #L1dd6d4.  return v0;
}
procedure `void` `update`(`c.f.b.k.n.p` v0 @kind this, `c.f.b.k.n.d` v1 @kind object) @signature `Lc/f/b/k/n/p;.update:(Lc/f/b/k/n/d;)V` @AccessFlag PUBLIC {
    temp;

  #L1dd9a4.  return @kind void;
}
procedure `void` `updateRunCenter`(`c.f.b.k.n.p` v4 @kind this, `c.f.b.k.n.d` v5 @kind object, `c.f.b.k.d` v6 @kind object, `c.f.b.k.d` v7 @kind object, `int` v8 ) @signature `Lc/f/b/k/n/p;.updateRunCenter:(Lc/f/b/k/n/d;Lc/f/b/k/d;Lc/f/b/k/d;I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1dd9b8.  call temp:= `getTarget`(v4, v6) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1dd9be.  v5:= temp @kind object;
  #L1dd9c0.  call temp:= `getTarget`(v4, v7) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1dd9c6.  v0:= temp @kind object;
  #L1dd9c8.  v1:= v5.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dd9cc.  if v1 == 0 then goto L1ddab2;
  #L1dd9d0.  v1:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dd9d4.  if v1 != 0 then goto L1dd9da;
  #L1dd9d8.  goto L1ddab2;
  #L1dd9da.  v1:= v5.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dd9de.  call temp:= `getMargin`(v6) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dd9e4.  v6:= temp;
  #L1dd9e6.  v1:= v1 + v6 @kind int;
  #L1dd9e8.  v6:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dd9ec.  call temp:= `getMargin`(v7) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dd9f2.  v7:= temp;
  #L1dd9f4.  v6:= v6 - v7 @kind int;
  #L1dd9f6.  v7:= v6 - v1 @kind int;
  #L1dd9fa.  v2:= v4.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dd9fe.  v2:= v2.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dda02.  if v2 != 0 then goto L1dda18;
  #L1dda06.  v2:= v4.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dda0a.  v3:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1dda0e.  if v2 != v3 then goto L1dda18;
  #L1dda12.  call `a`(v4, v8, v7) @signature `Lc/f/b/k/n/p;.a:(II)V` @kind direct;
  #L1dda18.  v2:= v4.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dda1c.  v3:= v2.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dda20.  if v3 != 0 then goto L1dda26;
  #L1dda24.  return @kind void;
  #L1dda26.  v2:= v2.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dda2a.  if v2 != v7 then goto L1dda44;
  #L1dda2e.  v5:= v4.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dda32.  call `resolve`(v5, v1) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1dda38.  v5:= v4.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dda3c.  call `resolve`(v5, v6) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1dda42.  return @kind void;
  #L1dda44.  v7:= v4.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dda48.  if v8 != 0 then goto L1dda56;
  #L1dda4c.  call temp:= `getHorizontalBiasPercent`(v7) @signature `Lc/f/b/k/e;.getHorizontalBiasPercent:()F` @kind virtual;
  #L1dda52.  v7:= temp;
  #L1dda54.  goto L1dda5e;
  #L1dda56.  call temp:= `getVerticalBiasPercent`(v7) @signature `Lc/f/b/k/e;.getVerticalBiasPercent:()F` @kind virtual;
  #L1dda5c.  v7:= temp;
  #L1dda5e.  v8:= 0.5F;
  #L1dda62.  if v5 != v0 then goto L1dda72;
  #L1dda66.  v1:= v5.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dda6a.  v6:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dda6e.  v7:= 0.5F;
  #L1dda72.  v6:= v6 - v1 @kind int;
  #L1dda74.  v5:= v4.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dda78.  v5:= v5.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dda7c.  v6:= v6 - v5 @kind int;
  #L1dda7e.  v5:= v4.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dda82.  v0:= (`float`) v1 @kind i2f;
  #L1dda84.  v0:= v0 + v8 @kind float;
  #L1dda86.  v6:= (`float`) v6 @kind i2f;
  #L1dda88.  v6:= v6 * v7 @kind float;
  #L1dda8c.  v0:= v0 + v6 @kind float;
  #L1dda8e.  v6:= (`int`) v0 @kind f2i;
  #L1dda90.  call `resolve`(v5, v6) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1dda96.  v5:= v4.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dda9a.  v6:= v4.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dda9e.  v6:= v6.`c.f.b.k.n.f.g` @type ^`int`;
  #L1ddaa2.  v7:= v4.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1ddaa6.  v7:= v7.`c.f.b.k.n.f.g` @type ^`int`;
  #L1ddaaa.  v6:= v6 + v7 @kind int;
  #L1ddaac.  call `resolve`(v5, v6) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1ddab2.  return @kind void;
}
procedure `void` `updateRunEnd`(`c.f.b.k.n.p` v0 @kind this, `c.f.b.k.n.d` v1 @kind object) @signature `Lc/f/b/k/n/p;.updateRunEnd:(Lc/f/b/k/n/d;)V` @AccessFlag PROTECTED {
    temp;

  #L1ddac4.  return @kind void;
}
procedure `void` `updateRunStart`(`c.f.b.k.n.p` v0 @kind this, `c.f.b.k.n.d` v1 @kind object) @signature `Lc/f/b/k/n/p;.updateRunStart:(Lc/f/b/k/n/d;)V` @AccessFlag PROTECTED {
    temp;

  #L1ddad8.  return @kind void;
}
