record `c.f.b.k.n.o` @kind class @AccessFlag PUBLIC {
  `java.util.ArrayList` `c.f.b.k.n.o.a` @AccessFlag ;
  `int` `c.f.b.k.n.o.b` @AccessFlag ;
  `int` `c.f.b.k.n.o.c` @AccessFlag ;
  `java.util.ArrayList` `c.f.b.k.n.o.d` @AccessFlag ;
  `int` `c.f.b.k.n.o.e` @AccessFlag PRIVATE;
}
global `int` `@@c.f.b.k.n.o.f` @AccessFlag STATIC;
procedure `void` `<init>`(`c.f.b.k.n.o` v2 @kind this, `int` v3 ) @signature `Lc/f/b/k/n/o;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1dd2d0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1dd2d6.  v0:= new `java.util.ArrayList`;
  #L1dd2da.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1dd2e0.  v2.`c.f.b.k.n.o.a` @type ^`java.util.ArrayList` := v0 @kind object;
  #L1dd2e4.  v0:= -1I;
  #L1dd2e6.  v2.`c.f.b.k.n.o.b` @type ^`int` := v0;
  #L1dd2ea.  v1:= 0I;
  #L1dd2ec.  v2.`c.f.b.k.n.o.c` @type ^`int` := v1;
  #L1dd2f0.  v1:= 0I;
  #L1dd2f2.  v2.`c.f.b.k.n.o.d` @type ^`java.util.ArrayList` := v1 @kind object;
  #L1dd2f6.  v2.`c.f.b.k.n.o.e` @type ^`int` := v0;
  #L1dd2fa.  v0:= `@@c.f.b.k.n.o.f` @type ^`int`;
  #L1dd2fe.  v1:= v0 + 1;
  #L1dd302.  `@@c.f.b.k.n.o.f` @type ^`int` := v1;
  #L1dd306.  v2.`c.f.b.k.n.o.b` @type ^`int` := v0;
  #L1dd30a.  v2.`c.f.b.k.n.o.c` @type ^`int` := v3;
  #L1dd30e.  return @kind void;
}
procedure `int` `a`(`c.f.b.k.n.o` v4 @kind this, `c.f.b.d` v5 @kind object, `java.util.ArrayList` v6 @kind object, `int` v7 ) @signature `Lc/f/b/k/n/o;.a:(Lc/f/b/d;Ljava/util/ArrayList;I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1dd0a4.  v0:= 0I;
  #L1dd0a6.  call temp:= `get`(v6, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1dd0ac.  v1:= temp @kind object;
  #L1dd0ae.  v1:= (`c.f.b.k.e`) v1 @kind object;
  #L1dd0b2.  call temp:= `getParent`(v1) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1dd0b8.  v1:= temp @kind object;
  #L1dd0ba.  v1:= (`c.f.b.k.f`) v1 @kind object;
  #L1dd0be.  call `reset`(v5) @signature `Lc/f/b/d;.reset:()V` @kind virtual;
  #L1dd0c4.  call `addToSolver`(v1, v5, v0) @signature `Lc/f/b/k/e;.addToSolver:(Lc/f/b/d;Z)V` @kind virtual;
  #L1dd0ca.  v2:= 0I;
  #L1dd0cc.  call temp:= `size`(v6) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1dd0d2.  v3:= temp;
  #L1dd0d4.  if v2 >= v3 then goto L1dd0f0;
  #L1dd0d8.  call temp:= `get`(v6, v2) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1dd0de.  v3:= temp @kind object;
  #L1dd0e0.  v3:= (`c.f.b.k.e`) v3 @kind object;
  #L1dd0e4.  call `addToSolver`(v3, v5, v0) @signature `Lc/f/b/k/e;.addToSolver:(Lc/f/b/d;Z)V` @kind virtual;
  #L1dd0ea.  v2:= v2 + 1;
  #L1dd0ee.  goto L1dd0cc;
  #L1dd0f0.  if v7 != 0 then goto L1dd102;
  #L1dd0f4.  v2:= v1.`c.f.b.k.f.y0` @type ^`int`;
  #L1dd0f8.  if v2 <= 0 then goto L1dd102;
  #L1dd0fc.  call `applyChainConstraints`(v1, v5, v6, v0) @signature `Lc/f/b/k/b;.applyChainConstraints:(Lc/f/b/k/f;Lc/f/b/d;Ljava/util/ArrayList;I)V` @kind static;
  #L1dd102.  v2:= 1I;
  #L1dd104.  if v7 != v2 then goto L1dd116;
  #L1dd108.  v3:= v1.`c.f.b.k.f.z0` @type ^`int`;
  #L1dd10c.  if v3 <= 0 then goto L1dd116;
  #L1dd110.  call `applyChainConstraints`(v1, v5, v6, v2) @signature `Lc/f/b/k/b;.applyChainConstraints:(Lc/f/b/k/f;Lc/f/b/d;Ljava/util/ArrayList;I)V` @kind static;
  #L1dd116.  call `minimize`(v5) @signature `Lc/f/b/d;.minimize:()V` @kind virtual;
  #L1dd11c.  goto L1dd126;
  #L1dd11e.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L1dd120.  call `printStackTrace`(v2) @signature `Ljava/lang/Exception;.printStackTrace:()V` @kind virtual;
  #L1dd126.  v2:= new `java.util.ArrayList`;
  #L1dd12a.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1dd130.  v4.`c.f.b.k.n.o.d` @type ^`java.util.ArrayList` := v2 @kind object;
  #L1dd134.  call temp:= `size`(v6) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1dd13a.  v2:= temp;
  #L1dd13c.  if v0 >= v2 then goto L1dd166;
  #L1dd140.  call temp:= `get`(v6, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1dd146.  v2:= temp @kind object;
  #L1dd148.  v2:= (`c.f.b.k.e`) v2 @kind object;
  #L1dd14c.  v3:= new `c.f.b.k.n.o$a`;
  #L1dd150.  call `<init>`(v3, v4, v2, v5, v7) @signature `Lc/f/b/k/n/o$a;.<init>:(Lc/f/b/k/n/o;Lc/f/b/k/e;Lc/f/b/d;I)V` @kind direct;
  #L1dd156.  v2:= v4.`c.f.b.k.n.o.d` @type ^`java.util.ArrayList` @kind object;
  #L1dd15a.  call temp:= `add`(v2, v3) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1dd160.  v0:= v0 + 1;
  #L1dd164.  goto L1dd134;
  #L1dd166.  if v7 != 0 then goto L1dd18c;
  #L1dd16a.  v6:= v1.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1dd16e.  call temp:= `getObjectVariableValue`(v5, v6) @signature `Lc/f/b/d;.getObjectVariableValue:(Ljava/lang/Object;)I` @kind virtual;
  #L1dd174.  v6:= temp;
  #L1dd176.  v7:= v1.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1dd17a.  call temp:= `getObjectVariableValue`(v5, v7) @signature `Lc/f/b/d;.getObjectVariableValue:(Ljava/lang/Object;)I` @kind virtual;
  #L1dd180.  v7:= temp;
  #L1dd182.  call `reset`(v5) @signature `Lc/f/b/d;.reset:()V` @kind virtual;
  #L1dd188.  v7:= v7 - v6 @kind int;
  #L1dd18a.  return v7;
  #L1dd18c.  v6:= v1.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1dd190.  call temp:= `getObjectVariableValue`(v5, v6) @signature `Lc/f/b/d;.getObjectVariableValue:(Ljava/lang/Object;)I` @kind virtual;
  #L1dd196.  v6:= temp;
  #L1dd198.  v7:= v1.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1dd19c.  call temp:= `getObjectVariableValue`(v5, v7) @signature `Lc/f/b/d;.getObjectVariableValue:(Ljava/lang/Object;)I` @kind virtual;
  #L1dd1a2.  v7:= temp;
  #L1dd1a4.  call `reset`(v5) @signature `Lc/f/b/d;.reset:()V` @kind virtual;
  #L1dd1aa.  goto L1dd188;
  catch `java.lang.Exception` @[L1dd116..L1dd11c] goto L1dd11e;
}
procedure `java.lang.String` `a`(`c.f.b.k.n.o` v2 @kind this) @signature `Lc/f/b/k/n/o;.a:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1dd1cc.  v0:= v2.`c.f.b.k.n.o.c` @type ^`int`;
  #L1dd1d0.  if v0 != 0 then goto L1dd1da;
  #L1dd1d4.  v0:= "Horizontal" @kind object;
  #L1dd1d8.  return v0 @kind object;
  #L1dd1da.  v1:= 1I;
  #L1dd1dc.  if v0 != v1 then goto L1dd1e6;
  #L1dd1e0.  v0:= "Vertical" @kind object;
  #L1dd1e4.  return v0 @kind object;
  #L1dd1e6.  v1:= 2I;
  #L1dd1e8.  if v0 != v1 then goto L1dd1f2;
  #L1dd1ec.  v0:= "Both" @kind object;
  #L1dd1f0.  return v0 @kind object;
  #L1dd1f2.  v0:= "Unknown" @kind object;
  #L1dd1f6.  return v0 @kind object;
}
procedure `boolean` `add`(`c.f.b.k.n.o` v1 @kind this, `c.f.b.k.e` v2 @kind object) @signature `Lc/f/b/k/n/o;.add:(Lc/f/b/k/e;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dd00c.  v0:= v1.`c.f.b.k.n.o.a` @type ^`java.util.ArrayList` @kind object;
  #L1dd010.  call temp:= `contains`(v0, v2) @signature `Ljava/util/ArrayList;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L1dd016.  v0:= temp;
  #L1dd018.  if v0 == 0 then goto L1dd020;
  #L1dd01c.  v2:= 0I;
  #L1dd01e.  return v2;
  #L1dd020.  v0:= v1.`c.f.b.k.n.o.a` @type ^`java.util.ArrayList` @kind object;
  #L1dd024.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1dd02a.  v2:= 1I;
  #L1dd02c.  return v2;
}
procedure `void` `cleanup`(`c.f.b.k.n.o` v5 @kind this, `java.util.ArrayList` v6 @kind object) @signature `Lc/f/b/k/n/o;.cleanup:(Ljava/util/ArrayList;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1dd320.  v0:= v5.`c.f.b.k.n.o.a` @type ^`java.util.ArrayList` @kind object;
  #L1dd324.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1dd32a.  v0:= temp;
  #L1dd32c.  v1:= v5.`c.f.b.k.n.o.e` @type ^`int`;
  #L1dd330.  v2:= -1I;
  #L1dd332.  if v1 == v2 then goto L1dd370;
  #L1dd336.  if v0 <= 0 then goto L1dd370;
  #L1dd33a.  v1:= 0I;
  #L1dd33c.  call temp:= `size`(v6) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1dd342.  v2:= temp;
  #L1dd344.  if v1 >= v2 then goto L1dd370;
  #L1dd348.  call temp:= `get`(v6, v1) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1dd34e.  v2:= temp @kind object;
  #L1dd350.  v2:= (`c.f.b.k.n.o`) v2 @kind object;
  #L1dd354.  v3:= v5.`c.f.b.k.n.o.e` @type ^`int`;
  #L1dd358.  v4:= v2.`c.f.b.k.n.o.b` @type ^`int`;
  #L1dd35c.  if v3 != v4 then goto L1dd36a;
  #L1dd360.  v3:= v5.`c.f.b.k.n.o.c` @type ^`int`;
  #L1dd364.  call `moveTo`(v5, v3, v2) @signature `Lc/f/b/k/n/o;.moveTo:(ILc/f/b/k/n/o;)V` @kind virtual;
  #L1dd36a.  v1:= v1 + 1;
  #L1dd36e.  goto L1dd33c;
  #L1dd370.  if v0 != 0 then goto L1dd37a;
  #L1dd374.  call temp:= `remove`(v6, v5) @signature `Ljava/util/ArrayList;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L1dd37a.  return @kind void;
}
procedure `int` `getId`(`c.f.b.k.n.o` v1 @kind this) @signature `Lc/f/b/k/n/o;.getId:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dd040.  v0:= v1.`c.f.b.k.n.o.b` @type ^`int`;
  #L1dd044.  return v0;
}
procedure `int` `getOrientation`(`c.f.b.k.n.o` v1 @kind this) @signature `Lc/f/b/k/n/o;.getOrientation:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dd058.  v0:= v1.`c.f.b.k.n.o.c` @type ^`int`;
  #L1dd05c.  return v0;
}
procedure `int` `measureWrap`(`c.f.b.k.n.o` v1 @kind this, `c.f.b.d` v2 @kind object, `int` v3 ) @signature `Lc/f/b/k/n/o;.measureWrap:(Lc/f/b/d;I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dd070.  v0:= v1.`c.f.b.k.n.o.a` @type ^`java.util.ArrayList` @kind object;
  #L1dd074.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1dd07a.  v0:= temp;
  #L1dd07c.  if v0 != 0 then goto L1dd084;
  #L1dd080.  v2:= 0I;
  #L1dd082.  return v2;
  #L1dd084.  v0:= v1.`c.f.b.k.n.o.a` @type ^`java.util.ArrayList` @kind object;
  #L1dd088.  call temp:= `a`(v1, v2, v0, v3) @signature `Lc/f/b/k/n/o;.a:(Lc/f/b/d;Ljava/util/ArrayList;I)I` @kind direct;
  #L1dd08e.  v2:= temp;
  #L1dd090.  return v2;
}
procedure `void` `moveTo`(`c.f.b.k.n.o` v3 @kind this, `int` v4 , `c.f.b.k.n.o` v5 @kind object) @signature `Lc/f/b/k/n/o;.moveTo:(ILc/f/b/k/n/o;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1dd38c.  v0:= v3.`c.f.b.k.n.o.a` @type ^`java.util.ArrayList` @kind object;
  #L1dd390.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1dd396.  v0:= temp @kind object;
  #L1dd398.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1dd39e.  v1:= temp;
  #L1dd3a0.  if v1 == 0 then goto L1dd3d6;
  #L1dd3a4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1dd3aa.  v1:= temp @kind object;
  #L1dd3ac.  v1:= (`c.f.b.k.e`) v1 @kind object;
  #L1dd3b0.  call temp:= `add`(v5, v1) @signature `Lc/f/b/k/n/o;.add:(Lc/f/b/k/e;)Z` @kind virtual;
  #L1dd3b6.  if v4 != 0 then goto L1dd3c8;
  #L1dd3ba.  call temp:= `getId`(v5) @signature `Lc/f/b/k/n/o;.getId:()I` @kind virtual;
  #L1dd3c0.  v2:= temp;
  #L1dd3c2.  v1.`c.f.b.k.e.m0` @type ^`int` := v2;
  #L1dd3c6.  goto L1dd398;
  #L1dd3c8.  call temp:= `getId`(v5) @signature `Lc/f/b/k/n/o;.getId:()I` @kind virtual;
  #L1dd3ce.  v2:= temp;
  #L1dd3d0.  v1.`c.f.b.k.e.n0` @type ^`int` := v2;
  #L1dd3d4.  goto L1dd398;
  #L1dd3d6.  v4:= v5.`c.f.b.k.n.o.b` @type ^`int`;
  #L1dd3da.  v3.`c.f.b.k.n.o.e` @type ^`int` := v4;
  #L1dd3de.  return @kind void;
}
procedure `void` `setAuthoritative`(`c.f.b.k.n.o` v0 @kind this, `boolean` v1 ) @signature `Lc/f/b/k/n/o;.setAuthoritative:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L1dd3f0.  return @kind void;
}
procedure `void` `setOrientation`(`c.f.b.k.n.o` v0 @kind this, `int` v1 ) @signature `Lc/f/b/k/n/o;.setOrientation:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1dd404.  v0.`c.f.b.k.n.o.c` @type ^`int` := v1;
  #L1dd408.  return @kind void;
}
procedure `java.lang.String` `toString`(`c.f.b.k.n.o` v4 @kind this) @signature `Lc/f/b/k/n/o;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1dd208.  v0:= new `java.lang.StringBuilder`;
  #L1dd20c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dd212.  call temp:= `a`(v4) @signature `Lc/f/b/k/n/o;.a:()Ljava/lang/String;` @kind direct;
  #L1dd218.  v1:= temp @kind object;
  #L1dd21a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd220.  v1:= " [" @kind object;
  #L1dd224.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd22a.  v1:= v4.`c.f.b.k.n.o.b` @type ^`int`;
  #L1dd22e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd234.  v1:= "] <" @kind object;
  #L1dd238.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd23e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd244.  v0:= temp @kind object;
  #L1dd246.  v1:= v4.`c.f.b.k.n.o.a` @type ^`java.util.ArrayList` @kind object;
  #L1dd24a.  call temp:= `iterator`(v1) @signature `Ljava/util/ArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1dd250.  v1:= temp @kind object;
  #L1dd252.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1dd258.  v2:= temp;
  #L1dd25a.  if v2 == 0 then goto L1dd29c;
  #L1dd25e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1dd264.  v2:= temp @kind object;
  #L1dd266.  v2:= (`c.f.b.k.e`) v2 @kind object;
  #L1dd26a.  v3:= new `java.lang.StringBuilder`;
  #L1dd26e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dd274.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd27a.  v0:= " " @kind object;
  #L1dd27e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd284.  call temp:= `getDebugName`(v2) @signature `Lc/f/b/k/e;.getDebugName:()Ljava/lang/String;` @kind virtual;
  #L1dd28a.  v0:= temp @kind object;
  #L1dd28c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd292.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd298.  v0:= temp @kind object;
  #L1dd29a.  goto L1dd252;
  #L1dd29c.  v1:= new `java.lang.StringBuilder`;
  #L1dd2a0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dd2a6.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd2ac.  v0:= " >" @kind object;
  #L1dd2b0.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd2b6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd2bc.  v0:= temp @kind object;
  #L1dd2be.  return v0 @kind object;
}
