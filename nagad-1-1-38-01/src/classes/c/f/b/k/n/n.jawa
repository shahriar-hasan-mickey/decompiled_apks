record `c.f.b.k.n.n` @kind class @AccessFlag PUBLIC extends `c.f.b.k.n.p` @kind class {
  `c.f.b.k.n.f` `c.f.b.k.n.n.k` @AccessFlag PUBLIC;
  `c.f.b.k.n.g` `c.f.b.k.n.n.l` @AccessFlag ;
}
procedure `void` `<init>`(`c.f.b.k.n.n` v1 @kind this, `c.f.b.k.e` v2 @kind object) @signature `Lc/f/b/k/n/n;.<init>:(Lc/f/b/k/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1dc1a0.  call `<init>`(v1, v2) @signature `Lc/f/b/k/n/p;.<init>:(Lc/f/b/k/e;)V` @kind direct;
  #L1dc1a6.  v2:= new `c.f.b.k.n.f`;
  #L1dc1aa.  call `<init>`(v2, v1) @signature `Lc/f/b/k/n/f;.<init>:(Lc/f/b/k/n/p;)V` @kind direct;
  #L1dc1b0.  v1.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` := v2 @kind object;
  #L1dc1b4.  v2:= 0I;
  #L1dc1b6.  v1.`c.f.b.k.n.n.l` @type ^`c.f.b.k.n.g` := v2 @kind object;
  #L1dc1ba.  v2:= v1.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc1be.  v0:= `@@c.f.b.k.n.f$a.k` @type ^`c.f.b.k.n.f$a` @kind object;
  #L1dc1c2.  v2.`c.f.b.k.n.f.e` @type ^`c.f.b.k.n.f$a` := v0 @kind object;
  #L1dc1c6.  v2:= v1.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc1ca.  v0:= `@@c.f.b.k.n.f$a.l` @type ^`c.f.b.k.n.f$a` @kind object;
  #L1dc1ce.  v2.`c.f.b.k.n.f.e` @type ^`c.f.b.k.n.f$a` := v0 @kind object;
  #L1dc1d2.  v2:= v1.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc1d6.  v0:= `@@c.f.b.k.n.f$a.m` @type ^`c.f.b.k.n.f$a` @kind object;
  #L1dc1da.  v2.`c.f.b.k.n.f.e` @type ^`c.f.b.k.n.f$a` := v0 @kind object;
  #L1dc1de.  v2:= 1I;
  #L1dc1e0.  v1.`c.f.b.k.n.p.f` @type ^`int` := v2;
  #L1dc1e4.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.n.n` v9 @kind this) @signature `Lc/f/b/k/n/n;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1dc1f8.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc1fc.  v1:= v0.`c.f.b.k.e.a` @type ^`boolean` @kind boolean;
  #L1dc200.  if v1 == 0 then goto L1dc216;
  #L1dc204.  v1:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc208.  call temp:= `getHeight`(v0) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1dc20e.  v0:= temp;
  #L1dc210.  call `resolve`(v1, v0) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dc216.  v0:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc21a.  v0:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dc21e.  if v0 != 0 then goto L1dc326;
  #L1dc222.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc226.  call temp:= `getVerticalDimensionBehaviour`(v0) @signature `Lc/f/b/k/e;.getVerticalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1dc22c.  v0:= temp @kind object;
  #L1dc22e.  v9.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` := v0 @kind object;
  #L1dc232.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc236.  call temp:= `hasBaseline`(v0) @signature `Lc/f/b/k/e;.hasBaseline:()Z` @kind virtual;
  #L1dc23c.  v0:= temp;
  #L1dc23e.  if v0 == 0 then goto L1dc250;
  #L1dc242.  v0:= new `c.f.b.k.n.a`;
  #L1dc246.  call `<init>`(v0, v9) @signature `Lc/f/b/k/n/a;.<init>:(Lc/f/b/k/n/p;)V` @kind direct;
  #L1dc24c.  v9.`c.f.b.k.n.n.l` @type ^`c.f.b.k.n.g` := v0 @kind object;
  #L1dc250.  v0:= v9.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dc254.  v1:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1dc258.  if v0 == v1 then goto L1dc39a;
  #L1dc25c.  v1:= `@@c.f.b.k.e$b.i` @type ^`c.f.b.k.e$b` @kind object;
  #L1dc260.  if v0 != v1 then goto L1dc302;
  #L1dc264.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc268.  call temp:= `getParent`(v0) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1dc26e.  v0:= temp @kind object;
  #L1dc270.  if v0 == 0 then goto L1dc302;
  #L1dc274.  call temp:= `getVerticalDimensionBehaviour`(v0) @signature `Lc/f/b/k/e;.getVerticalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1dc27a.  v1:= temp @kind object;
  #L1dc27c.  v2:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1dc280.  if v1 != v2 then goto L1dc302;
  #L1dc284.  call temp:= `getHeight`(v0) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1dc28a.  v1:= temp;
  #L1dc28c.  v2:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc290.  v2:= v2.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1dc294.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dc29a.  v2:= temp;
  #L1dc29c.  v1:= v1 - v2 @kind int;
  #L1dc29e.  v2:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc2a2.  v2:= v2.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1dc2a6.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dc2ac.  v2:= temp;
  #L1dc2ae.  v1:= v1 - v2 @kind int;
  #L1dc2b0.  v2:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc2b4.  v3:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dc2b8.  v3:= v3.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc2bc.  v4:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc2c0.  v4:= v4.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1dc2c4.  call temp:= `getMargin`(v4) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dc2ca.  v4:= temp;
  #L1dc2cc.  call `addTarget`(v9, v2, v3, v4) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc2d2.  v2:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc2d6.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dc2da.  v0:= v0.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc2de.  v3:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc2e2.  v3:= v3.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1dc2e6.  call temp:= `getMargin`(v3) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dc2ec.  v3:= temp;
  #L1dc2ee.  v3:= -v3 @kind int;
  #L1dc2f0.  call `addTarget`(v9, v2, v0, v3) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc2f6.  v0:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc2fa.  call `resolve`(v0, v1) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dc300.  return @kind void;
  #L1dc302.  v0:= v9.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dc306.  v1:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1dc30a.  if v0 != v1 then goto L1dc39a;
  #L1dc30e.  v0:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc312.  v1:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc316.  call temp:= `getHeight`(v1) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1dc31c.  v1:= temp;
  #L1dc31e.  call `resolve`(v0, v1) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dc324.  goto L1dc39a;
  #L1dc326.  v0:= v9.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dc32a.  v1:= `@@c.f.b.k.e$b.i` @type ^`c.f.b.k.e$b` @kind object;
  #L1dc32e.  if v0 != v1 then goto L1dc39a;
  #L1dc332.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc336.  call temp:= `getParent`(v0) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1dc33c.  v0:= temp @kind object;
  #L1dc33e.  if v0 == 0 then goto L1dc39a;
  #L1dc342.  call temp:= `getVerticalDimensionBehaviour`(v0) @signature `Lc/f/b/k/e;.getVerticalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1dc348.  v1:= temp @kind object;
  #L1dc34a.  v2:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1dc34e.  if v1 != v2 then goto L1dc39a;
  #L1dc352.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc356.  v2:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dc35a.  v2:= v2.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc35e.  v3:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc362.  v3:= v3.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1dc366.  call temp:= `getMargin`(v3) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dc36c.  v3:= temp;
  #L1dc36e.  call `addTarget`(v9, v1, v2, v3) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc374.  v1:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc378.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dc37c.  v0:= v0.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc380.  v2:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc384.  v2:= v2.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1dc388.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dc38e.  v2:= temp;
  #L1dc390.  v2:= -v2 @kind int;
  #L1dc392.  call `addTarget`(v9, v1, v0, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc398.  return @kind void;
  #L1dc39a.  v0:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc39e.  v0:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dc3a2.  v1:= 0I;
  #L1dc3a4.  v2:= 4I;
  #L1dc3a6.  v3:= 1I;
  #L1dc3a8.  v4:= 2I;
  #L1dc3aa.  v5:= 3I;
  #L1dc3ac.  if v0 == 0 then goto L1dc6ca;
  #L1dc3b0.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc3b4.  v6:= v0.`c.f.b.k.e.a` @type ^`boolean` @kind boolean;
  #L1dc3b8.  if v6 == 0 then goto L1dc6ca;
  #L1dc3bc.  v6:= v0.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc3c0.  v7:= v6[v4] @kind object;
  #L1dc3c4.  v7:= v7.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dc3c8.  if v7 == 0 then goto L1dc4cc;
  #L1dc3cc.  v6:= v6[v5] @kind object;
  #L1dc3d0.  v6:= v6.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dc3d4.  if v6 == 0 then goto L1dc4cc;
  #L1dc3d8.  call temp:= `isInVerticalChain`(v0) @signature `Lc/f/b/k/e;.isInVerticalChain:()Z` @kind virtual;
  #L1dc3de.  v0:= temp;
  #L1dc3e0.  if v0 == 0 then goto L1dc420;
  #L1dc3e4.  v0:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc3e8.  v1:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc3ec.  v1:= v1.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc3f0.  v1:= v1[v4] @kind object;
  #L1dc3f4.  call temp:= `getMargin`(v1) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dc3fa.  v1:= temp;
  #L1dc3fc.  v0.`c.f.b.k.n.f.f` @type ^`int` := v1;
  #L1dc400.  v0:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc404.  v1:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc408.  v1:= v1.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc40c.  v1:= v1[v5] @kind object;
  #L1dc410.  call temp:= `getMargin`(v1) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dc416.  v1:= temp;
  #L1dc418.  v1:= -v1 @kind int;
  #L1dc41a.  v0.`c.f.b.k.n.f.f` @type ^`int` := v1;
  #L1dc41e.  goto L1dc49e;
  #L1dc420.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc424.  v0:= v0.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc428.  v0:= v0[v4] @kind object;
  #L1dc42c.  call temp:= `getTarget`(v9, v0) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1dc432.  v0:= temp @kind object;
  #L1dc434.  if v0 == 0 then goto L1dc456;
  #L1dc438.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc43c.  v2:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc440.  v2:= v2.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc444.  v2:= v2[v4] @kind object;
  #L1dc448.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dc44e.  v2:= temp;
  #L1dc450.  call `addTarget`(v9, v1, v0, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc456.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc45a.  v0:= v0.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc45e.  v0:= v0[v5] @kind object;
  #L1dc462.  call temp:= `getTarget`(v9, v0) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1dc468.  v0:= temp @kind object;
  #L1dc46a.  if v0 == 0 then goto L1dc48e;
  #L1dc46e.  v1:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc472.  v2:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc476.  v2:= v2.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc47a.  v2:= v2[v5] @kind object;
  #L1dc47e.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dc484.  v2:= temp;
  #L1dc486.  v2:= -v2 @kind int;
  #L1dc488.  call `addTarget`(v9, v1, v0, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc48e.  v0:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc492.  v0.`c.f.b.k.n.f.b` @type ^`boolean` := v3 @kind boolean;
  #L1dc496.  v0:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc49a.  v0.`c.f.b.k.n.f.b` @type ^`boolean` := v3 @kind boolean;
  #L1dc49e.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc4a2.  call temp:= `hasBaseline`(v0) @signature `Lc/f/b/k/e;.hasBaseline:()Z` @kind virtual;
  #L1dc4a8.  v0:= temp;
  #L1dc4aa.  if v0 == 0 then goto L1dcb28;
  #L1dc4ae.  v0:= v9.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc4b2.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc4b6.  v2:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc4ba.  call temp:= `getBaselineDistance`(v2) @signature `Lc/f/b/k/e;.getBaselineDistance:()I` @kind virtual;
  #L1dc4c0.  v2:= temp;
  #L1dc4c2.  call `addTarget`(v9, v0, v1, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc4c8.  goto L1dcb28;
  #L1dc4cc.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc4d0.  v3:= v0.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc4d4.  v6:= v3[v4] @kind object;
  #L1dc4d8.  v6:= v6.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dc4dc.  if v6 == 0 then goto L1dc552;
  #L1dc4e0.  v0:= v3[v4] @kind object;
  #L1dc4e4.  call temp:= `getTarget`(v9, v0) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1dc4ea.  v0:= temp @kind object;
  #L1dc4ec.  if v0 == 0 then goto L1dcb28;
  #L1dc4f0.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc4f4.  v2:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc4f8.  v2:= v2.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc4fc.  v2:= v2[v4] @kind object;
  #L1dc500.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dc506.  v2:= temp;
  #L1dc508.  call `addTarget`(v9, v1, v0, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc50e.  v0:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc512.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc516.  v2:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc51a.  v2:= v2.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dc51e.  call `addTarget`(v9, v0, v1, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc524.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc528.  call temp:= `hasBaseline`(v0) @signature `Lc/f/b/k/e;.hasBaseline:()Z` @kind virtual;
  #L1dc52e.  v0:= temp;
  #L1dc530.  if v0 == 0 then goto L1dcb28;
  #L1dc534.  v0:= v9.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc538.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc53c.  v2:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc540.  call temp:= `getBaselineDistance`(v2) @signature `Lc/f/b/k/e;.getBaselineDistance:()I` @kind virtual;
  #L1dc546.  v2:= temp;
  #L1dc548.  call `addTarget`(v9, v0, v1, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc54e.  goto L1dcb28;
  #L1dc552.  v4:= v3[v5] @kind object;
  #L1dc556.  v4:= v4.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dc55a.  if v4 == 0 then goto L1dc5d4;
  #L1dc55e.  v0:= v3[v5] @kind object;
  #L1dc562.  call temp:= `getTarget`(v9, v0) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1dc568.  v0:= temp @kind object;
  #L1dc56a.  if v0 == 0 then goto L1dc5a6;
  #L1dc56e.  v1:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc572.  v2:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc576.  v2:= v2.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc57a.  v2:= v2[v5] @kind object;
  #L1dc57e.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dc584.  v2:= temp;
  #L1dc586.  v2:= -v2 @kind int;
  #L1dc588.  call `addTarget`(v9, v1, v0, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc58e.  v0:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc592.  v1:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc596.  v2:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc59a.  v2:= v2.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dc59e.  v2:= -v2 @kind int;
  #L1dc5a0.  call `addTarget`(v9, v0, v1, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc5a6.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc5aa.  call temp:= `hasBaseline`(v0) @signature `Lc/f/b/k/e;.hasBaseline:()Z` @kind virtual;
  #L1dc5b0.  v0:= temp;
  #L1dc5b2.  if v0 == 0 then goto L1dcb28;
  #L1dc5b6.  v0:= v9.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc5ba.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc5be.  v2:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc5c2.  call temp:= `getBaselineDistance`(v2) @signature `Lc/f/b/k/e;.getBaselineDistance:()I` @kind virtual;
  #L1dc5c8.  v2:= temp;
  #L1dc5ca.  call `addTarget`(v9, v0, v1, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc5d0.  goto L1dcb28;
  #L1dc5d4.  v4:= v3[v2] @kind object;
  #L1dc5d8.  v4:= v4.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dc5dc.  if v4 == 0 then goto L1dc630;
  #L1dc5e0.  v0:= v3[v2] @kind object;
  #L1dc5e4.  call temp:= `getTarget`(v9, v0) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1dc5ea.  v0:= temp @kind object;
  #L1dc5ec.  if v0 == 0 then goto L1dcb28;
  #L1dc5f0.  v2:= v9.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc5f4.  call `addTarget`(v9, v2, v0, v1) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc5fa.  v0:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc5fe.  v1:= v9.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc602.  v2:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc606.  call temp:= `getBaselineDistance`(v2) @signature `Lc/f/b/k/e;.getBaselineDistance:()I` @kind virtual;
  #L1dc60c.  v2:= temp;
  #L1dc60e.  v2:= -v2 @kind int;
  #L1dc610.  call `addTarget`(v9, v0, v1, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc616.  v0:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc61a.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc61e.  v2:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc622.  v2:= v2.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dc626.  call `addTarget`(v9, v0, v1, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc62c.  goto L1dcb28;
  #L1dc630.  v1:= instanceof @variable v0 @type ^`c.f.b.k.i` @kind boolean;
  #L1dc634.  if v1 != 0 then goto L1dcb28;
  #L1dc638.  call temp:= `getParent`(v0) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1dc63e.  v0:= temp @kind object;
  #L1dc640.  if v0 == 0 then goto L1dcb28;
  #L1dc644.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc648.  v1:= `@@c.f.b.k.d$b.l` @type ^`c.f.b.k.d$b` @kind object;
  #L1dc64c.  call temp:= `getAnchor`(v0, v1) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1dc652.  v0:= temp @kind object;
  #L1dc654.  v0:= v0.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dc658.  if v0 != 0 then goto L1dcb28;
  #L1dc65c.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc660.  call temp:= `getParent`(v0) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1dc666.  v0:= temp @kind object;
  #L1dc668.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dc66c.  v0:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc670.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc674.  v2:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc678.  call temp:= `getY`(v2) @signature `Lc/f/b/k/e;.getY:()I` @kind virtual;
  #L1dc67e.  v2:= temp;
  #L1dc680.  call `addTarget`(v9, v1, v0, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc686.  v0:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc68a.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc68e.  v2:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc692.  v2:= v2.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dc696.  call `addTarget`(v9, v0, v1, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc69c.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc6a0.  call temp:= `hasBaseline`(v0) @signature `Lc/f/b/k/e;.hasBaseline:()Z` @kind virtual;
  #L1dc6a6.  v0:= temp;
  #L1dc6a8.  if v0 == 0 then goto L1dcb28;
  #L1dc6ac.  v0:= v9.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc6b0.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc6b4.  v2:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc6b8.  call temp:= `getBaselineDistance`(v2) @signature `Lc/f/b/k/e;.getBaselineDistance:()I` @kind virtual;
  #L1dc6be.  v2:= temp;
  #L1dc6c0.  call `addTarget`(v9, v0, v1, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc6c6.  goto L1dcb28;
  #L1dc6ca.  v0:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc6ce.  v0:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dc6d2.  if v0 != 0 then goto L1dc7b8;
  #L1dc6d6.  v0:= v9.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dc6da.  v6:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1dc6de.  if v0 != v6 then goto L1dc7b8;
  #L1dc6e2.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc6e6.  v6:= v0.`c.f.b.k.e.o` @type ^`int`;
  #L1dc6ea.  if v6 == v4 then goto L1dc75c;
  #L1dc6ee.  if v6 == v5 then goto L1dc6f4;
  #L1dc6f2.  goto L1dc7c2;
  #L1dc6f4.  call temp:= `isInVerticalChain`(v0) @signature `Lc/f/b/k/e;.isInVerticalChain:()Z` @kind virtual;
  #L1dc6fa.  v0:= temp;
  #L1dc6fc.  if v0 != 0 then goto L1dc7c2;
  #L1dc700.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc704.  v6:= v0.`c.f.b.k.e.n` @type ^`int`;
  #L1dc708.  if v6 != v5 then goto L1dc70e;
  #L1dc70c.  goto L1dc7c2;
  #L1dc70e.  v0:= v0.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dc712.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc716.  v6:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc71a.  v6:= v6.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dc71e.  call temp:= `add`(v6, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dc724.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1dc728.  v6:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc72c.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dc732.  v0:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc736.  v0.`c.f.b.k.n.f.b` @type ^`boolean` := v3 @kind boolean;
  #L1dc73a.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1dc73e.  v6:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc742.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dc748.  v0:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc74c.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1dc750.  v6:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc754.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dc75a.  goto L1dc7c2;
  #L1dc75c.  call temp:= `getParent`(v0) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1dc762.  v0:= temp @kind object;
  #L1dc764.  if v0 != 0 then goto L1dc76a;
  #L1dc768.  goto L1dc7c2;
  #L1dc76a.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dc76e.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc772.  v6:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc776.  v6:= v6.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dc77a.  call temp:= `add`(v6, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dc780.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1dc784.  v6:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc788.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dc78e.  v0:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc792.  v0.`c.f.b.k.n.f.b` @type ^`boolean` := v3 @kind boolean;
  #L1dc796.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1dc79a.  v6:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc79e.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dc7a4.  v0:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc7a8.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1dc7ac.  v6:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc7b0.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dc7b6.  goto L1dc7c2;
  #L1dc7b8.  v0:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc7bc.  call `addDependency`(v0, v9) @signature `Lc/f/b/k/n/f;.addDependency:(Lc/f/b/k/n/d;)V` @kind virtual;
  #L1dc7c2.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc7c6.  v6:= v0.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc7ca.  v7:= v6[v4] @kind object;
  #L1dc7ce.  v7:= v7.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dc7d2.  if v7 == 0 then goto L1dc88c;
  #L1dc7d6.  v6:= v6[v5] @kind object;
  #L1dc7da.  v6:= v6.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dc7de.  if v6 == 0 then goto L1dc88c;
  #L1dc7e2.  call temp:= `isInVerticalChain`(v0) @signature `Lc/f/b/k/e;.isInVerticalChain:()Z` @kind virtual;
  #L1dc7e8.  v0:= temp;
  #L1dc7ea.  if v0 == 0 then goto L1dc82a;
  #L1dc7ee.  v0:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc7f2.  v1:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc7f6.  v1:= v1.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc7fa.  v1:= v1[v4] @kind object;
  #L1dc7fe.  call temp:= `getMargin`(v1) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dc804.  v1:= temp;
  #L1dc806.  v0.`c.f.b.k.n.f.f` @type ^`int` := v1;
  #L1dc80a.  v0:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc80e.  v1:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc812.  v1:= v1.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc816.  v1:= v1[v5] @kind object;
  #L1dc81a.  call temp:= `getMargin`(v1) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dc820.  v1:= temp;
  #L1dc822.  v1:= -v1 @kind int;
  #L1dc824.  v0.`c.f.b.k.n.f.f` @type ^`int` := v1;
  #L1dc828.  goto L1dc866;
  #L1dc82a.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc82e.  v0:= v0.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc832.  v0:= v0[v4] @kind object;
  #L1dc836.  call temp:= `getTarget`(v9, v0) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1dc83c.  v0:= temp @kind object;
  #L1dc83e.  v1:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc842.  v1:= v1.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc846.  v1:= v1[v5] @kind object;
  #L1dc84a.  call temp:= `getTarget`(v9, v1) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1dc850.  v1:= temp @kind object;
  #L1dc852.  call `addDependency`(v0, v9) @signature `Lc/f/b/k/n/f;.addDependency:(Lc/f/b/k/n/d;)V` @kind virtual;
  #L1dc858.  call `addDependency`(v1, v9) @signature `Lc/f/b/k/n/f;.addDependency:(Lc/f/b/k/n/d;)V` @kind virtual;
  #L1dc85e.  v0:= `@@c.f.b.k.n.p$b.i` @type ^`c.f.b.k.n.p$b` @kind object;
  #L1dc862.  v9.`c.f.b.k.n.p.j` @type ^`c.f.b.k.n.p$b` := v0 @kind object;
  #L1dc866.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc86a.  call temp:= `hasBaseline`(v0) @signature `Lc/f/b/k/e;.hasBaseline:()Z` @kind virtual;
  #L1dc870.  v0:= temp;
  #L1dc872.  if v0 == 0 then goto L1dcb0c;
  #L1dc876.  v0:= v9.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc87a.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc87e.  v2:= v9.`c.f.b.k.n.n.l` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc882.  call `addTarget`(v9, v0, v1, v3, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;ILc/f/b/k/n/g;)V` @kind virtual;
  #L1dc888.  goto L1dcb0c;
  #L1dc88c.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc890.  v6:= v0.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc894.  v7:= v6[v4] @kind object;
  #L1dc898.  v7:= v7.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dc89c.  v8:= 0I;
  #L1dc89e.  if v7 == 0 then goto L1dc970;
  #L1dc8a2.  v0:= v6[v4] @kind object;
  #L1dc8a6.  call temp:= `getTarget`(v9, v0) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1dc8ac.  v0:= temp @kind object;
  #L1dc8ae.  if v0 == 0 then goto L1dcb0c;
  #L1dc8b2.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc8b6.  v2:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc8ba.  v2:= v2.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc8be.  v2:= v2[v4] @kind object;
  #L1dc8c2.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dc8c8.  v2:= temp;
  #L1dc8ca.  call `addTarget`(v9, v1, v0, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc8d0.  v0:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc8d4.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc8d8.  v2:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc8dc.  call `addTarget`(v9, v0, v1, v3, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;ILc/f/b/k/n/g;)V` @kind virtual;
  #L1dc8e2.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc8e6.  call temp:= `hasBaseline`(v0) @signature `Lc/f/b/k/e;.hasBaseline:()Z` @kind virtual;
  #L1dc8ec.  v0:= temp;
  #L1dc8ee.  if v0 == 0 then goto L1dc904;
  #L1dc8f2.  v0:= v9.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc8f6.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc8fa.  v2:= v9.`c.f.b.k.n.n.l` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc8fe.  call `addTarget`(v9, v0, v1, v3, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;ILc/f/b/k/n/g;)V` @kind virtual;
  #L1dc904.  v0:= v9.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dc908.  v1:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1dc90c.  if v0 != v1 then goto L1dcb0c;
  #L1dc910.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc914.  call temp:= `getDimensionRatio`(v0) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1dc91a.  v0:= temp;
  #L1dc91c.  v0:= fcmpl(v0, v8);
  #L1dc920.  if v0 <= 0 then goto L1dcb0c;
  #L1dc924.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc928.  v0:= v0.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dc92c.  v1:= v0.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dc930.  v2:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1dc934.  if v1 != v2 then goto L1dcb0c;
  #L1dc938.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc93c.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1dc940.  v1:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc944.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dc94a.  v0:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc94e.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dc952.  v1:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc956.  v1:= v1.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dc95a.  v1:= v1.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc95e.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dc964.  v0:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc968.  v0.`c.f.b.k.n.f.a` @type ^`c.f.b.k.n.d` := v9 @kind object;
  #L1dc96c.  goto L1dcb0c;
  #L1dc970.  v4:= v6[v5] @kind object;
  #L1dc974.  v4:= v4.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dc978.  v7:= -1I;
  #L1dc97a.  if v4 == 0 then goto L1dc9e6;
  #L1dc97e.  v0:= v6[v5] @kind object;
  #L1dc982.  call temp:= `getTarget`(v9, v0) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1dc988.  v0:= temp @kind object;
  #L1dc98a.  if v0 == 0 then goto L1dcb0c;
  #L1dc98e.  v1:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc992.  v2:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc996.  v2:= v2.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dc99a.  v2:= v2[v5] @kind object;
  #L1dc99e.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dc9a4.  v2:= temp;
  #L1dc9a6.  v2:= -v2 @kind int;
  #L1dc9a8.  call `addTarget`(v9, v1, v0, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dc9ae.  v0:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc9b2.  v1:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc9b6.  v2:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc9ba.  call `addTarget`(v9, v0, v1, v7, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;ILc/f/b/k/n/g;)V` @kind virtual;
  #L1dc9c0.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc9c4.  call temp:= `hasBaseline`(v0) @signature `Lc/f/b/k/e;.hasBaseline:()Z` @kind virtual;
  #L1dc9ca.  v0:= temp;
  #L1dc9cc.  if v0 == 0 then goto L1dcb0c;
  #L1dc9d0.  v0:= v9.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc9d4.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc9d8.  v2:= v9.`c.f.b.k.n.n.l` @type ^`c.f.b.k.n.g` @kind object;
  #L1dc9dc.  call `addTarget`(v9, v0, v1, v3, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;ILc/f/b/k/n/g;)V` @kind virtual;
  #L1dc9e2.  goto L1dcb0c;
  #L1dc9e6.  v4:= v6[v2] @kind object;
  #L1dc9ea.  v4:= v4.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dc9ee.  if v4 == 0 then goto L1dca32;
  #L1dc9f2.  v0:= v6[v2] @kind object;
  #L1dc9f6.  call temp:= `getTarget`(v9, v0) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1dc9fc.  v0:= temp @kind object;
  #L1dc9fe.  if v0 == 0 then goto L1dcb0c;
  #L1dca02.  v2:= v9.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` @kind object;
  #L1dca06.  call `addTarget`(v9, v2, v0, v1) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dca0c.  v0:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dca10.  v1:= v9.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` @kind object;
  #L1dca14.  v2:= v9.`c.f.b.k.n.n.l` @type ^`c.f.b.k.n.g` @kind object;
  #L1dca18.  call `addTarget`(v9, v0, v1, v7, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;ILc/f/b/k/n/g;)V` @kind virtual;
  #L1dca1e.  v0:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dca22.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dca26.  v2:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dca2a.  call `addTarget`(v9, v0, v1, v3, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;ILc/f/b/k/n/g;)V` @kind virtual;
  #L1dca30.  goto L1dcb0c;
  #L1dca32.  v1:= instanceof @variable v0 @type ^`c.f.b.k.i` @kind boolean;
  #L1dca36.  if v1 != 0 then goto L1dcb0c;
  #L1dca3a.  call temp:= `getParent`(v0) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1dca40.  v0:= temp @kind object;
  #L1dca42.  if v0 == 0 then goto L1dcb0c;
  #L1dca46.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dca4a.  call temp:= `getParent`(v0) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1dca50.  v0:= temp @kind object;
  #L1dca52.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dca56.  v0:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dca5a.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dca5e.  v2:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dca62.  call temp:= `getY`(v2) @signature `Lc/f/b/k/e;.getY:()I` @kind virtual;
  #L1dca68.  v2:= temp;
  #L1dca6a.  call `addTarget`(v9, v1, v0, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dca70.  v0:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dca74.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dca78.  v2:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dca7c.  call `addTarget`(v9, v0, v1, v3, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;ILc/f/b/k/n/g;)V` @kind virtual;
  #L1dca82.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dca86.  call temp:= `hasBaseline`(v0) @signature `Lc/f/b/k/e;.hasBaseline:()Z` @kind virtual;
  #L1dca8c.  v0:= temp;
  #L1dca8e.  if v0 == 0 then goto L1dcaa4;
  #L1dca92.  v0:= v9.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` @kind object;
  #L1dca96.  v1:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dca9a.  v2:= v9.`c.f.b.k.n.n.l` @type ^`c.f.b.k.n.g` @kind object;
  #L1dca9e.  call `addTarget`(v9, v0, v1, v3, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;ILc/f/b/k/n/g;)V` @kind virtual;
  #L1dcaa4.  v0:= v9.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dcaa8.  v1:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1dcaac.  if v0 != v1 then goto L1dcb0c;
  #L1dcab0.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dcab4.  call temp:= `getDimensionRatio`(v0) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1dcaba.  v0:= temp;
  #L1dcabc.  v0:= fcmpl(v0, v8);
  #L1dcac0.  if v0 <= 0 then goto L1dcb0c;
  #L1dcac4.  v0:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dcac8.  v0:= v0.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dcacc.  v1:= v0.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dcad0.  v2:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1dcad4.  if v1 != v2 then goto L1dcb0c;
  #L1dcad8.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcadc.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1dcae0.  v1:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcae4.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dcaea.  v0:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcaee.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dcaf2.  v1:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dcaf6.  v1:= v1.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dcafa.  v1:= v1.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcafe.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dcb04.  v0:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcb08.  v0.`c.f.b.k.n.f.a` @type ^`c.f.b.k.n.d` := v9 @kind object;
  #L1dcb0c.  v0:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcb10.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dcb14.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1dcb1a.  v0:= temp;
  #L1dcb1c.  if v0 != 0 then goto L1dcb28;
  #L1dcb20.  v0:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcb24.  v0.`c.f.b.k.n.f.c` @type ^`boolean` := v3 @kind boolean;
  #L1dcb28.  return @kind void;
}
procedure `void` `applyToWidget`(`c.f.b.k.n.n` v2 @kind this) @signature `Lc/f/b/k/n/n;.applyToWidget:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dcb3c.  v0:= v2.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcb40.  v1:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dcb44.  if v1 == 0 then goto L1dcb56;
  #L1dcb48.  v1:= v2.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dcb4c.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dcb50.  call `setY`(v1, v0) @signature `Lc/f/b/k/e;.setY:(I)V` @kind virtual;
  #L1dcb56.  return @kind void;
}
procedure `void` `b`(`c.f.b.k.n.n` v1 @kind this) @signature `Lc/f/b/k/n/n;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L1dcb68.  v0:= 0I;
  #L1dcb6a.  v1.`c.f.b.k.n.p.c` @type ^`c.f.b.k.n.m` := v0 @kind object;
  #L1dcb6e.  v0:= v1.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcb72.  call `clear`(v0) @signature `Lc/f/b/k/n/f;.clear:()V` @kind virtual;
  #L1dcb78.  v0:= v1.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcb7c.  call `clear`(v0) @signature `Lc/f/b/k/n/f;.clear:()V` @kind virtual;
  #L1dcb82.  v0:= v1.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcb86.  call `clear`(v0) @signature `Lc/f/b/k/n/f;.clear:()V` @kind virtual;
  #L1dcb8c.  v0:= v1.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcb90.  call `clear`(v0) @signature `Lc/f/b/k/n/f;.clear:()V` @kind virtual;
  #L1dcb96.  v0:= 0I;
  #L1dcb98.  v1.`c.f.b.k.n.p.g` @type ^`boolean` := v0 @kind boolean;
  #L1dcb9c.  return @kind void;
}
procedure `boolean` `c`(`c.f.b.k.n.n` v3 @kind this) @signature `Lc/f/b/k/n/n;.c:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1dc12c.  v0:= v3.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dc130.  v1:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1dc134.  v2:= 1I;
  #L1dc136.  if v0 != v1 then goto L1dc14c;
  #L1dc13a.  v0:= v3.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc13e.  v0:= v0.`c.f.b.k.e.o` @type ^`int`;
  #L1dc142.  if v0 != 0 then goto L1dc148;
  #L1dc146.  return v2;
  #L1dc148.  v0:= 0I;
  #L1dc14a.  return v0;
  #L1dc14c.  return v2;
}
procedure `void` `d`(`c.f.b.k.n.n` v2 @kind this) @signature `Lc/f/b/k/n/n;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1dcbb0.  v0:= 0I;
  #L1dcbb2.  v2.`c.f.b.k.n.p.g` @type ^`boolean` := v0 @kind boolean;
  #L1dcbb6.  v1:= v2.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcbba.  call `clear`(v1) @signature `Lc/f/b/k/n/f;.clear:()V` @kind virtual;
  #L1dcbc0.  v1:= v2.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcbc4.  v1.`c.f.b.k.n.f.j` @type ^`boolean` := v0 @kind boolean;
  #L1dcbc8.  v1:= v2.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcbcc.  call `clear`(v1) @signature `Lc/f/b/k/n/f;.clear:()V` @kind virtual;
  #L1dcbd2.  v1:= v2.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcbd6.  v1.`c.f.b.k.n.f.j` @type ^`boolean` := v0 @kind boolean;
  #L1dcbda.  v1:= v2.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcbde.  call `clear`(v1) @signature `Lc/f/b/k/n/f;.clear:()V` @kind virtual;
  #L1dcbe4.  v1:= v2.`c.f.b.k.n.n.k` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcbe8.  v1.`c.f.b.k.n.f.j` @type ^`boolean` := v0 @kind boolean;
  #L1dcbec.  v1:= v2.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcbf0.  v1.`c.f.b.k.n.f.j` @type ^`boolean` := v0 @kind boolean;
  #L1dcbf4.  return @kind void;
}
procedure `java.lang.String` `toString`(`c.f.b.k.n.n` v2 @kind this) @signature `Lc/f/b/k/n/n;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dc160.  v0:= new `java.lang.StringBuilder`;
  #L1dc164.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dc16a.  v1:= "VerticalRun " @kind object;
  #L1dc16e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dc174.  v1:= v2.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dc178.  call temp:= `getDebugName`(v1) @signature `Lc/f/b/k/e;.getDebugName:()Ljava/lang/String;` @kind virtual;
  #L1dc17e.  v1:= temp @kind object;
  #L1dc180.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dc186.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dc18c.  v0:= temp @kind object;
  #L1dc18e.  return v0 @kind object;
}
procedure `void` `update`(`c.f.b.k.n.n` v6 @kind this, `c.f.b.k.n.d` v7 @kind object) @signature `Lc/f/b/k/n/n;.update:(Lc/f/b/k/n/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1dcc08.  v0:= `@@c.f.b.k.n.n$a.a` @type ^`int`[] @kind object;
  #L1dcc0c.  v1:= v6.`c.f.b.k.n.p.j` @type ^`c.f.b.k.n.p$b` @kind object;
  #L1dcc10.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1dcc16.  v1:= temp;
  #L1dcc18.  v0:= v0[v1];
  #L1dcc1c.  v1:= 3I;
  #L1dcc1e.  v2:= 2I;
  #L1dcc20.  v3:= 1I;
  #L1dcc22.  if v0 == v3 then goto L1dcc4c;
  #L1dcc26.  if v0 == v2 then goto L1dcc44;
  #L1dcc2a.  if v0 == v1 then goto L1dcc30;
  #L1dcc2e.  goto L1dcc52;
  #L1dcc30.  v0:= v6.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dcc34.  v1:= v0.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1dcc38.  v0:= v0.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1dcc3c.  call `updateRunCenter`(v6, v7, v1, v0, v3) @signature `Lc/f/b/k/n/p;.updateRunCenter:(Lc/f/b/k/n/d;Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind virtual;
  #L1dcc42.  return @kind void;
  #L1dcc44.  call `updateRunEnd`(v6, v7) @signature `Lc/f/b/k/n/p;.updateRunEnd:(Lc/f/b/k/n/d;)V` @kind virtual;
  #L1dcc4a.  goto L1dcc52;
  #L1dcc4c.  call `updateRunStart`(v6, v7) @signature `Lc/f/b/k/n/p;.updateRunStart:(Lc/f/b/k/n/d;)V` @kind virtual;
  #L1dcc52.  v7:= v6.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcc56.  v0:= v7.`c.f.b.k.n.f.c` @type ^`boolean` @kind boolean;
  #L1dcc5a.  v4:= 0.5F;
  #L1dcc5e.  v5:= 0I;
  #L1dcc60.  if v0 == 0 then goto L1dcd58;
  #L1dcc64.  v7:= v7.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dcc68.  if v7 != 0 then goto L1dcd58;
  #L1dcc6c.  v7:= v6.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dcc70.  v0:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1dcc74.  if v7 != v0 then goto L1dcd58;
  #L1dcc78.  v7:= v6.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dcc7c.  v0:= v7.`c.f.b.k.e.o` @type ^`int`;
  #L1dcc80.  if v0 == v2 then goto L1dcd1c;
  #L1dcc84.  if v0 == v1 then goto L1dcc8a;
  #L1dcc88.  goto L1dcd58;
  #L1dcc8a.  v0:= v7.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dcc8e.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcc92.  v0:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dcc96.  if v0 == 0 then goto L1dcd58;
  #L1dcc9a.  call temp:= `getDimensionRatioSide`(v7) @signature `Lc/f/b/k/e;.getDimensionRatioSide:()I` @kind virtual;
  #L1dcca0.  v7:= temp;
  #L1dcca2.  v0:= -1I;
  #L1dcca4.  if v7 == v0 then goto L1dccf0;
  #L1dcca8.  if v7 == 0 then goto L1dccd0;
  #L1dccac.  if v7 == v3 then goto L1dccb4;
  #L1dccb0.  v7:= 0I;
  #L1dccb2.  goto L1dcd10;
  #L1dccb4.  v7:= v6.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dccb8.  v0:= v7.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dccbc.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dccc0.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dccc4.  v0:= (`float`) v0 @kind i2f;
  #L1dccc6.  call temp:= `getDimensionRatio`(v7) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1dcccc.  v7:= temp;
  #L1dccce.  goto L1dcd0a;
  #L1dccd0.  v7:= v6.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dccd4.  v0:= v7.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dccd8.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dccdc.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dcce0.  v0:= (`float`) v0 @kind i2f;
  #L1dcce2.  call temp:= `getDimensionRatio`(v7) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1dcce8.  v7:= temp;
  #L1dccea.  v0:= v0 * v7 @kind float;
  #L1dccee.  goto L1dcd0c;
  #L1dccf0.  v7:= v6.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dccf4.  v0:= v7.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dccf8.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dccfc.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dcd00.  v0:= (`float`) v0 @kind i2f;
  #L1dcd02.  call temp:= `getDimensionRatio`(v7) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1dcd08.  v7:= temp;
  #L1dcd0a.  v0:= v0 / v7 @kind float;
  #L1dcd0c.  v0:= v0 + v4 @kind float;
  #L1dcd0e.  v7:= (`int`) v0 @kind f2i;
  #L1dcd10.  v0:= v6.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcd14.  call `resolve`(v0, v7) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dcd1a.  goto L1dcd58;
  #L1dcd1c.  call temp:= `getParent`(v7) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1dcd22.  v7:= temp @kind object;
  #L1dcd24.  if v7 == 0 then goto L1dcd58;
  #L1dcd28.  v7:= v7.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dcd2c.  v7:= v7.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcd30.  v0:= v7.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dcd34.  if v0 == 0 then goto L1dcd58;
  #L1dcd38.  v0:= v6.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dcd3c.  v0:= v0.`c.f.b.k.e.v` @type ^`float`;
  #L1dcd40.  v7:= v7.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dcd44.  v7:= (`float`) v7 @kind i2f;
  #L1dcd46.  v7:= v7 * v0 @kind float;
  #L1dcd4a.  v7:= v7 + v4 @kind float;
  #L1dcd4c.  v7:= (`int`) v7 @kind f2i;
  #L1dcd4e.  v0:= v6.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcd52.  call `resolve`(v0, v7) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dcd58.  v7:= v6.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcd5c.  v0:= v7.`c.f.b.k.n.f.c` @type ^`boolean` @kind boolean;
  #L1dcd60.  if v0 == 0 then goto L1dcfa4;
  #L1dcd64.  v0:= v6.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcd68.  v1:= v0.`c.f.b.k.n.f.c` @type ^`boolean` @kind boolean;
  #L1dcd6c.  if v1 != 0 then goto L1dcd74;
  #L1dcd70.  goto L1dcfa4;
  #L1dcd74.  v7:= v7.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dcd78.  if v7 == 0 then goto L1dcd92;
  #L1dcd7c.  v7:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dcd80.  if v7 == 0 then goto L1dcd92;
  #L1dcd84.  v7:= v6.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcd88.  v7:= v7.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dcd8c.  if v7 == 0 then goto L1dcd92;
  #L1dcd90.  return @kind void;
  #L1dcd92.  v7:= v6.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcd96.  v7:= v7.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dcd9a.  if v7 != 0 then goto L1dce26;
  #L1dcd9e.  v7:= v6.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dcda2.  v0:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1dcda6.  if v7 != v0 then goto L1dce26;
  #L1dcdaa.  v7:= v6.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dcdae.  v0:= v7.`c.f.b.k.e.n` @type ^`int`;
  #L1dcdb2.  if v0 != 0 then goto L1dce26;
  #L1dcdb6.  call temp:= `isInVerticalChain`(v7) @signature `Lc/f/b/k/e;.isInVerticalChain:()Z` @kind virtual;
  #L1dcdbc.  v7:= temp;
  #L1dcdbe.  if v7 != 0 then goto L1dce26;
  #L1dcdc2.  v7:= v6.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcdc6.  v7:= v7.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dcdca.  call temp:= `get`(v7, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1dcdd0.  v7:= temp @kind object;
  #L1dcdd2.  v7:= (`c.f.b.k.n.f`) v7 @kind object;
  #L1dcdd6.  v0:= v6.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcdda.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dcdde.  call temp:= `get`(v0, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1dcde4.  v0:= temp @kind object;
  #L1dcde6.  v0:= (`c.f.b.k.n.f`) v0 @kind object;
  #L1dcdea.  v7:= v7.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dcdee.  v1:= v6.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcdf2.  v2:= v1.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dcdf6.  v7:= v7 + v2 @kind int;
  #L1dcdf8.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dcdfc.  v2:= v6.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dce00.  v2:= v2.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dce04.  v0:= v0 + v2 @kind int;
  #L1dce06.  v2:= v0 - v7 @kind int;
  #L1dce0a.  call `resolve`(v1, v7) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1dce10.  v7:= v6.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dce14.  call `resolve`(v7, v0) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1dce1a.  v7:= v6.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dce1e.  call `resolve`(v7, v2) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dce24.  return @kind void;
  #L1dce26.  v7:= v6.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dce2a.  v7:= v7.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dce2e.  if v7 != 0 then goto L1dcece;
  #L1dce32.  v7:= v6.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dce36.  v0:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1dce3a.  if v7 != v0 then goto L1dcece;
  #L1dce3e.  v7:= v6.`c.f.b.k.n.p.a` @type ^`int`;
  #L1dce42.  if v7 != v3 then goto L1dcece;
  #L1dce46.  v7:= v6.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dce4a.  v7:= v7.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dce4e.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1dce54.  v7:= temp;
  #L1dce56.  if v7 <= 0 then goto L1dcece;
  #L1dce5a.  v7:= v6.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dce5e.  v7:= v7.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dce62.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1dce68.  v7:= temp;
  #L1dce6a.  if v7 <= 0 then goto L1dcece;
  #L1dce6e.  v7:= v6.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dce72.  v7:= v7.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dce76.  call temp:= `get`(v7, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1dce7c.  v7:= temp @kind object;
  #L1dce7e.  v7:= (`c.f.b.k.n.f`) v7 @kind object;
  #L1dce82.  v0:= v6.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dce86.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dce8a.  call temp:= `get`(v0, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1dce90.  v0:= temp @kind object;
  #L1dce92.  v0:= (`c.f.b.k.n.f`) v0 @kind object;
  #L1dce96.  v7:= v7.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dce9a.  v1:= v6.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dce9e.  v1:= v1.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dcea2.  v7:= v7 + v1 @kind int;
  #L1dcea4.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dcea8.  v1:= v6.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dceac.  v1:= v1.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dceb0.  v0:= v0 + v1 @kind int;
  #L1dceb2.  v0:= v0 - v7 @kind int;
  #L1dceb4.  v7:= v6.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dceb8.  v1:= v7.`c.f.b.k.n.g.m` @type ^`int`;
  #L1dcebc.  if v0 >= v1 then goto L1dcec8;
  #L1dcec0.  call `resolve`(v7, v0) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dcec6.  goto L1dcece;
  #L1dcec8.  call `resolve`(v7, v1) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dcece.  v7:= v6.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dced2.  v7:= v7.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dced6.  if v7 != 0 then goto L1dcedc;
  #L1dceda.  return @kind void;
  #L1dcedc.  v7:= v6.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcee0.  v7:= v7.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dcee4.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1dceea.  v7:= temp;
  #L1dceec.  if v7 <= 0 then goto L1dcfa4;
  #L1dcef0.  v7:= v6.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcef4.  v7:= v7.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dcef8.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1dcefe.  v7:= temp;
  #L1dcf00.  if v7 <= 0 then goto L1dcfa4;
  #L1dcf04.  v7:= v6.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcf08.  v7:= v7.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dcf0c.  call temp:= `get`(v7, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1dcf12.  v7:= temp @kind object;
  #L1dcf14.  v7:= (`c.f.b.k.n.f`) v7 @kind object;
  #L1dcf18.  v0:= v6.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcf1c.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dcf20.  call temp:= `get`(v0, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1dcf26.  v0:= temp @kind object;
  #L1dcf28.  v0:= (`c.f.b.k.n.f`) v0 @kind object;
  #L1dcf2c.  v1:= v7.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dcf30.  v2:= v6.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcf34.  v2:= v2.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dcf38.  v1:= v1 + v2 @kind int;
  #L1dcf3a.  v2:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dcf3e.  v3:= v6.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcf42.  v3:= v3.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dcf46.  v2:= v2 + v3 @kind int;
  #L1dcf48.  v3:= v6.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dcf4c.  call temp:= `getVerticalBiasPercent`(v3) @signature `Lc/f/b/k/e;.getVerticalBiasPercent:()F` @kind virtual;
  #L1dcf52.  v3:= temp;
  #L1dcf54.  if v7 != v0 then goto L1dcf64;
  #L1dcf58.  v1:= v7.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dcf5c.  v2:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dcf60.  v3:= 0.5F;
  #L1dcf64.  v2:= v2 - v1 @kind int;
  #L1dcf66.  v7:= v6.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcf6a.  v7:= v7.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dcf6e.  v2:= v2 - v7 @kind int;
  #L1dcf70.  v7:= v6.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcf74.  v0:= (`float`) v1 @kind i2f;
  #L1dcf76.  v0:= v0 + v4 @kind float;
  #L1dcf78.  v1:= (`float`) v2 @kind i2f;
  #L1dcf7a.  v1:= v1 * v3 @kind float;
  #L1dcf7e.  v0:= v0 + v1 @kind float;
  #L1dcf80.  v0:= (`int`) v0 @kind f2i;
  #L1dcf82.  call `resolve`(v7, v0) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1dcf88.  v7:= v6.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcf8c.  v0:= v6.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dcf90.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dcf94.  v1:= v6.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dcf98.  v1:= v1.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dcf9c.  v0:= v0 + v1 @kind int;
  #L1dcf9e.  call `resolve`(v7, v0) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1dcfa4.  return @kind void;
}
