record `c.f.b.k.n.c` @kind class @AccessFlag PUBLIC extends `c.f.b.k.n.p` @kind class {
  `java.util.ArrayList` `c.f.b.k.n.c.k` @AccessFlag ;
  `int` `c.f.b.k.n.c.l` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.f.b.k.n.c` v0 @kind this, `c.f.b.k.e` v1 @kind object, `int` v2 ) @signature `Lc/f/b/k/n/c;.<init>:(Lc/f/b/k/e;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1d5fec.  call `<init>`(v0, v1) @signature `Lc/f/b/k/n/p;.<init>:(Lc/f/b/k/e;)V` @kind direct;
  #L1d5ff2.  v1:= new `java.util.ArrayList`;
  #L1d5ff6.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1d5ffc.  v0.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` := v1 @kind object;
  #L1d6000.  v0.`c.f.b.k.n.p.f` @type ^`int` := v2;
  #L1d6004.  call `d`(v0) @signature `Lc/f/b/k/n/c;.d:()V` @kind direct;
  #L1d600a.  return @kind void;
}
procedure `void` `d`(`c.f.b.k.n.c` v5 @kind this) @signature `Lc/f/b/k/n/c;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d61e0.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d61e4.  v1:= v5.`c.f.b.k.n.p.f` @type ^`int`;
  #L1d61e8.  call temp:= `getPreviousChainMember`(v0, v1) @signature `Lc/f/b/k/e;.getPreviousChainMember:(I)Lc/f/b/k/e;` @kind virtual;
  #L1d61ee.  v1:= temp @kind object;
  #L1d61f0.  v4:= v1 @kind object;
  #L1d61f2.  v1:= v0 @kind object;
  #L1d61f4.  v0:= v4 @kind object;
  #L1d61f6.  if v0 == 0 then goto L1d6208;
  #L1d61fa.  v1:= v5.`c.f.b.k.n.p.f` @type ^`int`;
  #L1d61fe.  call temp:= `getPreviousChainMember`(v0, v1) @signature `Lc/f/b/k/e;.getPreviousChainMember:(I)Lc/f/b/k/e;` @kind virtual;
  #L1d6204.  v1:= temp @kind object;
  #L1d6206.  goto L1d61f0;
  #L1d6208.  v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` := v1 @kind object;
  #L1d620c.  v0:= v5.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d6210.  v2:= v5.`c.f.b.k.n.p.f` @type ^`int`;
  #L1d6214.  call temp:= `getRun`(v1, v2) @signature `Lc/f/b/k/e;.getRun:(I)Lc/f/b/k/n/p;` @kind virtual;
  #L1d621a.  v2:= temp @kind object;
  #L1d621c.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d6222.  v0:= v5.`c.f.b.k.n.p.f` @type ^`int`;
  #L1d6226.  call temp:= `getNextChainMember`(v1, v0) @signature `Lc/f/b/k/e;.getNextChainMember:(I)Lc/f/b/k/e;` @kind virtual;
  #L1d622c.  v0:= temp @kind object;
  #L1d622e.  if v0 == 0 then goto L1d6256;
  #L1d6232.  v1:= v5.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d6236.  v2:= v5.`c.f.b.k.n.p.f` @type ^`int`;
  #L1d623a.  call temp:= `getRun`(v0, v2) @signature `Lc/f/b/k/e;.getRun:(I)Lc/f/b/k/n/p;` @kind virtual;
  #L1d6240.  v2:= temp @kind object;
  #L1d6242.  call temp:= `add`(v1, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d6248.  v1:= v5.`c.f.b.k.n.p.f` @type ^`int`;
  #L1d624c.  call temp:= `getNextChainMember`(v0, v1) @signature `Lc/f/b/k/e;.getNextChainMember:(I)Lc/f/b/k/e;` @kind virtual;
  #L1d6252.  v0:= temp @kind object;
  #L1d6254.  goto L1d622e;
  #L1d6256.  v0:= v5.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d625a.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1d6260.  v0:= temp @kind object;
  #L1d6262.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d6268.  v1:= temp;
  #L1d626a.  v2:= 1I;
  #L1d626c.  if v1 == 0 then goto L1d629c;
  #L1d6270.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d6276.  v1:= temp @kind object;
  #L1d6278.  v1:= (`c.f.b.k.n.p`) v1 @kind object;
  #L1d627c.  v3:= v5.`c.f.b.k.n.p.f` @type ^`int`;
  #L1d6280.  if v3 != 0 then goto L1d628e;
  #L1d6284.  v1:= v1.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d6288.  v1.`c.f.b.k.e.b` @type ^`c.f.b.k.n.c` := v5 @kind object;
  #L1d628c.  goto L1d6262;
  #L1d628e.  if v3 != v2 then goto L1d6262;
  #L1d6292.  v1:= v1.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d6296.  v1.`c.f.b.k.e.c` @type ^`c.f.b.k.n.c` := v5 @kind object;
  #L1d629a.  goto L1d6262;
  #L1d629c.  v0:= v5.`c.f.b.k.n.p.f` @type ^`int`;
  #L1d62a0.  if v0 != 0 then goto L1d62c4;
  #L1d62a4.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d62a8.  call temp:= `getParent`(v0) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1d62ae.  v0:= temp @kind object;
  #L1d62b0.  v0:= (`c.f.b.k.f`) v0 @kind object;
  #L1d62b4.  call temp:= `isRtl`(v0) @signature `Lc/f/b/k/f;.isRtl:()Z` @kind virtual;
  #L1d62ba.  v0:= temp;
  #L1d62bc.  if v0 == 0 then goto L1d62c4;
  #L1d62c0.  v0:= 1I;
  #L1d62c2.  goto L1d62c6;
  #L1d62c4.  v0:= 0I;
  #L1d62c6.  if v0 == 0 then goto L1d62fc;
  #L1d62ca.  v0:= v5.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d62ce.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1d62d4.  v0:= temp;
  #L1d62d6.  if v0 <= v2 then goto L1d62fc;
  #L1d62da.  v0:= v5.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d62de.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1d62e4.  v1:= temp;
  #L1d62e6.  v1:= v1 - v2 @kind int;
  #L1d62e8.  call temp:= `get`(v0, v1) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d62ee.  v0:= temp @kind object;
  #L1d62f0.  v0:= (`c.f.b.k.n.p`) v0 @kind object;
  #L1d62f4.  v0:= v0.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d62f8.  v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` := v0 @kind object;
  #L1d62fc.  v0:= v5.`c.f.b.k.n.p.f` @type ^`int`;
  #L1d6300.  if v0 != 0 then goto L1d6312;
  #L1d6304.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d6308.  call temp:= `getHorizontalChainStyle`(v0) @signature `Lc/f/b/k/e;.getHorizontalChainStyle:()I` @kind virtual;
  #L1d630e.  v0:= temp;
  #L1d6310.  goto L1d631e;
  #L1d6312.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d6316.  call temp:= `getVerticalChainStyle`(v0) @signature `Lc/f/b/k/e;.getVerticalChainStyle:()I` @kind virtual;
  #L1d631c.  v0:= temp;
  #L1d631e.  v5.`c.f.b.k.n.c.l` @type ^`int` := v0;
  #L1d6322.  return @kind void;
}
procedure `c.f.b.k.e` `e`(`c.f.b.k.n.c` v4 @kind this) @signature `Lc/f/b/k/n/c;.e:()Lc/f/b/k/e;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d5dc0.  v0:= 0I;
  #L1d5dc2.  v1:= v4.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d5dc6.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1d5dcc.  v1:= temp;
  #L1d5dce.  if v0 >= v1 then goto L1d5e02;
  #L1d5dd2.  v1:= v4.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d5dd6.  call temp:= `get`(v1, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d5ddc.  v1:= temp @kind object;
  #L1d5dde.  v1:= (`c.f.b.k.n.p`) v1 @kind object;
  #L1d5de2.  v2:= v1.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d5de6.  call temp:= `getVisibility`(v2) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d5dec.  v2:= temp;
  #L1d5dee.  v3:= 8I;
  #L1d5df2.  if v2 == v3 then goto L1d5dfc;
  #L1d5df6.  v0:= v1.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d5dfa.  return v0 @kind object;
  #L1d5dfc.  v0:= v0 + 1;
  #L1d5e00.  goto L1d5dc2;
  #L1d5e02.  v0:= 0I;
  #L1d5e04.  return v0 @kind object;
}
procedure `c.f.b.k.e` `f`(`c.f.b.k.n.c` v4 @kind this) @signature `Lc/f/b/k/n/c;.f:()Lc/f/b/k/e;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d5e18.  v0:= v4.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d5e1c.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1d5e22.  v0:= temp;
  #L1d5e24.  v0:= v0 + -1;
  #L1d5e28.  if v0 < 0 then goto L1d5e5c;
  #L1d5e2c.  v1:= v4.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d5e30.  call temp:= `get`(v1, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d5e36.  v1:= temp @kind object;
  #L1d5e38.  v1:= (`c.f.b.k.n.p`) v1 @kind object;
  #L1d5e3c.  v2:= v1.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d5e40.  call temp:= `getVisibility`(v2) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d5e46.  v2:= temp;
  #L1d5e48.  v3:= 8I;
  #L1d5e4c.  if v2 == v3 then goto L1d5e56;
  #L1d5e50.  v0:= v1.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d5e54.  return v0 @kind object;
  #L1d5e56.  v0:= v0 + -1;
  #L1d5e5a.  goto L1d5e28;
  #L1d5e5c.  v0:= 0I;
  #L1d5e5e.  return v0 @kind object;
}
procedure `void` `a`(`c.f.b.k.n.c` v5 @kind this) @signature `Lc/f/b/k/n/c;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d601c.  v0:= v5.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d6020.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1d6026.  v0:= temp @kind object;
  #L1d6028.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d602e.  v1:= temp;
  #L1d6030.  if v1 == 0 then goto L1d6048;
  #L1d6034.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d603a.  v1:= temp @kind object;
  #L1d603c.  v1:= (`c.f.b.k.n.p`) v1 @kind object;
  #L1d6040.  call `a`(v1) @signature `Lc/f/b/k/n/p;.a:()V` @kind virtual;
  #L1d6046.  goto L1d6028;
  #L1d6048.  v0:= v5.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d604c.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1d6052.  v0:= temp;
  #L1d6054.  v1:= 1I;
  #L1d6056.  if v0 >= v1 then goto L1d605c;
  #L1d605a.  return @kind void;
  #L1d605c.  v2:= v5.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d6060.  v3:= 0I;
  #L1d6062.  call temp:= `get`(v2, v3) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d6068.  v2:= temp @kind object;
  #L1d606a.  v2:= (`c.f.b.k.n.p`) v2 @kind object;
  #L1d606e.  v2:= v2.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d6072.  v4:= v5.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d6076.  v0:= v0 - v1 @kind int;
  #L1d6078.  call temp:= `get`(v4, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d607e.  v0:= temp @kind object;
  #L1d6080.  v0:= (`c.f.b.k.n.p`) v0 @kind object;
  #L1d6084.  v0:= v0.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d6088.  v4:= v5.`c.f.b.k.n.p.f` @type ^`int`;
  #L1d608c.  if v4 != 0 then goto L1d6108;
  #L1d6090.  v1:= v2.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d6094.  v0:= v0.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d6098.  call temp:= `getTarget`(v5, v1, v3) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;I)Lc/f/b/k/n/f;` @kind virtual;
  #L1d609e.  v2:= temp @kind object;
  #L1d60a0.  call temp:= `getMargin`(v1) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d60a6.  v1:= temp;
  #L1d60a8.  call temp:= `e`(v5) @signature `Lc/f/b/k/n/c;.e:()Lc/f/b/k/e;` @kind direct;
  #L1d60ae.  v4:= temp @kind object;
  #L1d60b0.  if v4 == 0 then goto L1d60c0;
  #L1d60b4.  v1:= v4.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d60b8.  call temp:= `getMargin`(v1) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d60be.  v1:= temp;
  #L1d60c0.  if v2 == 0 then goto L1d60ce;
  #L1d60c4.  v4:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d60c8.  call `addTarget`(v5, v4, v2, v1) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1d60ce.  call temp:= `getTarget`(v5, v0, v3) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;I)Lc/f/b/k/n/f;` @kind virtual;
  #L1d60d4.  v1:= temp @kind object;
  #L1d60d6.  call temp:= `getMargin`(v0) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d60dc.  v0:= temp;
  #L1d60de.  call temp:= `f`(v5) @signature `Lc/f/b/k/n/c;.f:()Lc/f/b/k/e;` @kind direct;
  #L1d60e4.  v2:= temp @kind object;
  #L1d60e6.  if v2 == 0 then goto L1d60f6;
  #L1d60ea.  v0:= v2.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d60ee.  call temp:= `getMargin`(v0) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d60f4.  v0:= temp;
  #L1d60f6.  if v1 == 0 then goto L1d617e;
  #L1d60fa.  v2:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d60fe.  v0:= -v0 @kind int;
  #L1d6100.  call `addTarget`(v5, v2, v1, v0) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1d6106.  goto L1d617e;
  #L1d6108.  v2:= v2.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d610c.  v0:= v0.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d6110.  call temp:= `getTarget`(v5, v2, v1) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;I)Lc/f/b/k/n/f;` @kind virtual;
  #L1d6116.  v3:= temp @kind object;
  #L1d6118.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d611e.  v2:= temp;
  #L1d6120.  call temp:= `e`(v5) @signature `Lc/f/b/k/n/c;.e:()Lc/f/b/k/e;` @kind direct;
  #L1d6126.  v4:= temp @kind object;
  #L1d6128.  if v4 == 0 then goto L1d6138;
  #L1d612c.  v2:= v4.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d6130.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d6136.  v2:= temp;
  #L1d6138.  if v3 == 0 then goto L1d6146;
  #L1d613c.  v4:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6140.  call `addTarget`(v5, v4, v3, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1d6146.  call temp:= `getTarget`(v5, v0, v1) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;I)Lc/f/b/k/n/f;` @kind virtual;
  #L1d614c.  v1:= temp @kind object;
  #L1d614e.  call temp:= `getMargin`(v0) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d6154.  v0:= temp;
  #L1d6156.  call temp:= `f`(v5) @signature `Lc/f/b/k/n/c;.f:()Lc/f/b/k/e;` @kind direct;
  #L1d615c.  v2:= temp @kind object;
  #L1d615e.  if v2 == 0 then goto L1d616e;
  #L1d6162.  v0:= v2.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d6166.  call temp:= `getMargin`(v0) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d616c.  v0:= temp;
  #L1d616e.  if v1 == 0 then goto L1d617e;
  #L1d6172.  v2:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6176.  v0:= -v0 @kind int;
  #L1d6178.  call `addTarget`(v5, v2, v1, v0) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1d617e.  v0:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6182.  v0.`c.f.b.k.n.f.a` @type ^`c.f.b.k.n.d` := v5 @kind object;
  #L1d6186.  v0:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d618a.  v0.`c.f.b.k.n.f.a` @type ^`c.f.b.k.n.d` := v5 @kind object;
  #L1d618e.  return @kind void;
}
procedure `void` `applyToWidget`(`c.f.b.k.n.c` v2 @kind this) @signature `Lc/f/b/k/n/c;.applyToWidget:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d61a0.  v0:= 0I;
  #L1d61a2.  v1:= v2.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d61a6.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1d61ac.  v1:= temp;
  #L1d61ae.  if v0 >= v1 then goto L1d61ce;
  #L1d61b2.  v1:= v2.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d61b6.  call temp:= `get`(v1, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d61bc.  v1:= temp @kind object;
  #L1d61be.  v1:= (`c.f.b.k.n.p`) v1 @kind object;
  #L1d61c2.  call `applyToWidget`(v1) @signature `Lc/f/b/k/n/p;.applyToWidget:()V` @kind virtual;
  #L1d61c8.  v0:= v0 + 1;
  #L1d61cc.  goto L1d61a2;
  #L1d61ce.  return @kind void;
}
procedure `void` `b`(`c.f.b.k.n.c` v2 @kind this) @signature `Lc/f/b/k/n/c;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1d6334.  v0:= 0I;
  #L1d6336.  v2.`c.f.b.k.n.p.c` @type ^`c.f.b.k.n.m` := v0 @kind object;
  #L1d633a.  v0:= v2.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d633e.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1d6344.  v0:= temp @kind object;
  #L1d6346.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d634c.  v1:= temp;
  #L1d634e.  if v1 == 0 then goto L1d6366;
  #L1d6352.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d6358.  v1:= temp @kind object;
  #L1d635a.  v1:= (`c.f.b.k.n.p`) v1 @kind object;
  #L1d635e.  call `b`(v1) @signature `Lc/f/b/k/n/p;.b:()V` @kind virtual;
  #L1d6364.  goto L1d6346;
  #L1d6366.  return @kind void;
}
procedure `boolean` `c`(`c.f.b.k.n.c` v4 @kind this) @signature `Lc/f/b/k/n/c;.c:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d5e70.  v0:= v4.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d5e74.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1d5e7a.  v0:= temp;
  #L1d5e7c.  v1:= 0I;
  #L1d5e7e.  v2:= 0I;
  #L1d5e80.  if v2 >= v0 then goto L1d5ea8;
  #L1d5e84.  v3:= v4.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d5e88.  call temp:= `get`(v3, v2) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d5e8e.  v3:= temp @kind object;
  #L1d5e90.  v3:= (`c.f.b.k.n.p`) v3 @kind object;
  #L1d5e94.  call temp:= `c`(v3) @signature `Lc/f/b/k/n/p;.c:()Z` @kind virtual;
  #L1d5e9a.  v3:= temp;
  #L1d5e9c.  if v3 != 0 then goto L1d5ea2;
  #L1d5ea0.  return v1;
  #L1d5ea2.  v2:= v2 + 1;
  #L1d5ea6.  goto L1d5e80;
  #L1d5ea8.  v0:= 1I;
  #L1d5eaa.  return v0;
}
procedure `long` `getWrapDimension`(`c.f.b.k.n.c` v7 @kind this) @signature `Lc/f/b/k/n/c;.getWrapDimension:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1d5f8c.  v0:= v7.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d5f90.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1d5f96.  v0:= temp;
  #L1d5f98.  v1:= 0L;
  #L1d5f9c.  v3:= 0I;
  #L1d5f9e.  if v3 >= v0 then goto L1d5fda;
  #L1d5fa2.  v4:= v7.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d5fa6.  call temp:= `get`(v4, v3) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d5fac.  v4:= temp @kind object;
  #L1d5fae.  v4:= (`c.f.b.k.n.p`) v4 @kind object;
  #L1d5fb2.  v5:= v4.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d5fb6.  v5:= v5.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d5fba.  v5:= (`long`) v5 @kind i2l;
  #L1d5fbc.  v1:= v1 + v5 @kind long;
  #L1d5fbe.  call temp:= `getWrapDimension`(v4) @signature `Lc/f/b/k/n/p;.getWrapDimension:()J` @kind virtual;
  #L1d5fc4.  v5:= temp @kind wide;
  #L1d5fc6.  v1:= v1 + v5 @kind long;
  #L1d5fc8.  v4:= v4.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d5fcc.  v4:= v4.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d5fd0.  v4:= (`long`) v4 @kind i2l;
  #L1d5fd2.  v1:= v1 + v4 @kind long;
  #L1d5fd4.  v3:= v3 + 1;
  #L1d5fd8.  goto L1d5f9e;
  #L1d5fda.  return v1 @kind wide;
}
procedure `java.lang.String` `toString`(`c.f.b.k.n.c` v4 @kind this) @signature `Lc/f/b/k/n/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d5ebc.  v0:= new `java.lang.StringBuilder`;
  #L1d5ec0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d5ec6.  v1:= "ChainRun " @kind object;
  #L1d5eca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5ed0.  v1:= v4.`c.f.b.k.n.p.f` @type ^`int`;
  #L1d5ed4.  if v1 != 0 then goto L1d5ede;
  #L1d5ed8.  v1:= "horizontal : " @kind object;
  #L1d5edc.  goto L1d5ee2;
  #L1d5ede.  v1:= "vertical : " @kind object;
  #L1d5ee2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5ee8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d5eee.  v0:= temp @kind object;
  #L1d5ef0.  v1:= v4.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d5ef4.  call temp:= `iterator`(v1) @signature `Ljava/util/ArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1d5efa.  v1:= temp @kind object;
  #L1d5efc.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d5f02.  v2:= temp;
  #L1d5f04.  if v2 == 0 then goto L1d5f78;
  #L1d5f08.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d5f0e.  v2:= temp @kind object;
  #L1d5f10.  v2:= (`c.f.b.k.n.p`) v2 @kind object;
  #L1d5f14.  v3:= new `java.lang.StringBuilder`;
  #L1d5f18.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d5f1e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5f24.  v0:= "<" @kind object;
  #L1d5f28.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5f2e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d5f34.  v0:= temp @kind object;
  #L1d5f36.  v3:= new `java.lang.StringBuilder`;
  #L1d5f3a.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d5f40.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5f46.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5f4c.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d5f52.  v0:= temp @kind object;
  #L1d5f54.  v2:= new `java.lang.StringBuilder`;
  #L1d5f58.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d5f5e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5f64.  v0:= "> " @kind object;
  #L1d5f68.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d5f6e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d5f74.  v0:= temp @kind object;
  #L1d5f76.  goto L1d5efc;
  #L1d5f78.  return v0 @kind object;
}
procedure `void` `update`(`c.f.b.k.n.c` v22 @kind this, `c.f.b.k.n.d` v23 @kind object) @signature `Lc/f/b/k/n/c;.update:(Lc/f/b/k/n/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L1d6378.  v0:= v22 @kind object;
  #L1d637c.  v1:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6380.  v1:= v1.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1d6384.  if v1 == 0 then goto L1d6bca;
  #L1d6388.  v1:= v0.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d638c.  v1:= v1.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1d6390.  if v1 != 0 then goto L1d6398;
  #L1d6394.  goto L1d6bca;
  #L1d6398.  v1:= v0.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d639c.  call temp:= `getParent`(v1) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1d63a2.  v1:= temp @kind object;
  #L1d63a4.  if v1 == 0 then goto L1d63be;
  #L1d63a8.  v3:= instanceof @variable v1 @type ^`c.f.b.k.f` @kind boolean;
  #L1d63ac.  if v3 == 0 then goto L1d63be;
  #L1d63b0.  v1:= (`c.f.b.k.f`) v1 @kind object;
  #L1d63b4.  call temp:= `isRtl`(v1) @signature `Lc/f/b/k/f;.isRtl:()Z` @kind virtual;
  #L1d63ba.  v1:= temp;
  #L1d63bc.  goto L1d63c0;
  #L1d63be.  v1:= 0I;
  #L1d63c0.  v3:= v0.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d63c4.  v3:= v3.`c.f.b.k.n.f.g` @type ^`int`;
  #L1d63c8.  v4:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d63cc.  v4:= v4.`c.f.b.k.n.f.g` @type ^`int`;
  #L1d63d0.  v3:= v3 - v4 @kind int;
  #L1d63d2.  v4:= v0.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d63d6.  call temp:= `size`(v4) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1d63dc.  v4:= temp;
  #L1d63de.  v5:= 0I;
  #L1d63e0.  v6:= -1I;
  #L1d63e2.  v7:= 8I;
  #L1d63e6.  if v5 >= v4 then goto L1d6410;
  #L1d63ea.  v8:= v0.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d63ee.  call temp:= `get`(v8, v5) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d63f4.  v8:= temp @kind object;
  #L1d63f6.  v8:= (`c.f.b.k.n.p`) v8 @kind object;
  #L1d63fa.  v8:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d63fe.  call temp:= `getVisibility`(v8) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d6404.  v8:= temp;
  #L1d6406.  if v8 != v7 then goto L1d6412;
  #L1d640a.  v5:= v5 + 1;
  #L1d640e.  goto L1d63e0;
  #L1d6410.  v5:= -1I;
  #L1d6412.  v8:= v4 + -1;
  #L1d6416.  v9:= v8;
  #L1d6418.  if v9 < 0 then goto L1d6444;
  #L1d641c.  v10:= v0.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d6420.  call temp:= `get`(v10, v9) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d6426.  v10:= temp @kind object;
  #L1d6428.  v10:= (`c.f.b.k.n.p`) v10 @kind object;
  #L1d642c.  v10:= v10.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d6430.  call temp:= `getVisibility`(v10) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d6436.  v10:= temp;
  #L1d6438.  if v10 != v7 then goto L1d6442;
  #L1d643c.  v9:= v9 + -1;
  #L1d6440.  goto L1d6418;
  #L1d6442.  v6:= v9;
  #L1d6444.  v9:= 0I;
  #L1d6446.  v11:= 2I;
  #L1d6448.  v12:= 1I;
  #L1d644a.  if v9 >= v11 then goto L1d6584;
  #L1d644e.  v13:= 0I;
  #L1d6450.  v14:= 0I;
  #L1d6452.  v15:= 0I;
  #L1d6454.  v16:= 0I;
  #L1d6458.  v17:= 0I;
  #L1d645c.  if v13 >= v4 then goto L1d6568;
  #L1d6460.  v2:= v0.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d6464.  call temp:= `get`(v2, v13) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d646a.  v2:= temp @kind object;
  #L1d646c.  v2:= (`c.f.b.k.n.p`) v2 @kind object;
  #L1d6470.  v11:= v2.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d6474.  call temp:= `getVisibility`(v11) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d647a.  v11:= temp;
  #L1d647c.  if v11 != v7 then goto L1d6484;
  #L1d6480.  goto L1d655a;
  #L1d6484.  v16:= v16 + 1;
  #L1d6488.  if v13 <= 0 then goto L1d649a;
  #L1d648c.  if v13 < v5 then goto L1d649a;
  #L1d6490.  v11:= v2.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6494.  v11:= v11.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d6498.  v14:= v14 + v11 @kind int;
  #L1d649a.  v11:= v2.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1d649e.  v11:= v11.`c.f.b.k.n.f.g` @type ^`int`;
  #L1d64a2.  v7:= v2.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1d64a6.  v10:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d64aa.  if v7 == v10 then goto L1d64b2;
  #L1d64ae.  v7:= 1I;
  #L1d64b0.  goto L1d64b4;
  #L1d64b2.  v7:= 0I;
  #L1d64b4.  if v7 == 0 then goto L1d64f4;
  #L1d64b8.  v10:= v0.`c.f.b.k.n.p.f` @type ^`int`;
  #L1d64bc.  if v10 != 0 then goto L1d64d6;
  #L1d64c0.  v10:= v2.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d64c4.  v10:= v10.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1d64c8.  v10:= v10.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1d64cc.  v10:= v10.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1d64d0.  if v10 != 0 then goto L1d64d6;
  #L1d64d4.  return @kind void;
  #L1d64d6.  v10:= v0.`c.f.b.k.n.p.f` @type ^`int`;
  #L1d64da.  if v10 != v12 then goto L1d651c;
  #L1d64de.  v10:= v2.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d64e2.  v10:= v10.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1d64e6.  v10:= v10.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1d64ea.  v10:= v10.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1d64ee.  if v10 != 0 then goto L1d651c;
  #L1d64f2.  return @kind void;
  #L1d64f4.  v10:= v2.`c.f.b.k.n.p.a` @type ^`int`;
  #L1d64f8.  if v10 != v12 then goto L1d650e;
  #L1d64fc.  if v9 != 0 then goto L1d650e;
  #L1d6500.  v7:= v2.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1d6504.  v11:= v7.`c.f.b.k.n.g.m` @type ^`int`;
  #L1d6508.  v15:= v15 + 1;
  #L1d650c.  goto L1d651a;
  #L1d650e.  v10:= v2.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1d6512.  v10:= v10.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1d6516.  if v10 == 0 then goto L1d651c;
  #L1d651a.  v7:= 1I;
  #L1d651c.  if v7 != 0 then goto L1d6544;
  #L1d6520.  v15:= v15 + 1;
  #L1d6524.  v7:= v2.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d6528.  v7:= v7.`c.f.b.k.e.j0` @type ^`float`[] @kind object;
  #L1d652c.  v10:= v0.`c.f.b.k.n.p.f` @type ^`int`;
  #L1d6530.  v7:= v7[v10];
  #L1d6534.  v10:= 0I;
  #L1d6536.  v11:= fcmpl(v7, v10);
  #L1d653a.  if v11 < 0 then goto L1d6546;
  #L1d653e.  v17:= v17 + v7 @kind float;
  #L1d6542.  goto L1d6546;
  #L1d6544.  v14:= v14 + v11 @kind int;
  #L1d6546.  if v13 >= v8 then goto L1d655a;
  #L1d654a.  if v13 >= v6 then goto L1d655a;
  #L1d654e.  v2:= v2.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6552.  v2:= v2.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d6556.  v2:= -v2 @kind int;
  #L1d6558.  v14:= v14 + v2 @kind int;
  #L1d655a.  v13:= v13 + 1;
  #L1d655e.  v7:= 8I;
  #L1d6562.  v11:= 2I;
  #L1d6564.  goto L1d645c;
  #L1d6568.  if v14 < v3 then goto L1d657e;
  #L1d656c.  if v15 != 0 then goto L1d6572;
  #L1d6570.  goto L1d657e;
  #L1d6572.  v9:= v9 + 1;
  #L1d6576.  v7:= 8I;
  #L1d657a.  goto L1d6446;
  #L1d657e.  v2:= v16;
  #L1d6582.  goto L1d658e;
  #L1d6584.  v2:= 0I;
  #L1d6586.  v14:= 0I;
  #L1d6588.  v15:= 0I;
  #L1d658a.  v17:= 0I;
  #L1d658e.  v7:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6592.  v7:= v7.`c.f.b.k.n.f.g` @type ^`int`;
  #L1d6596.  if v1 == 0 then goto L1d65a2;
  #L1d659a.  v7:= v0.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d659e.  v7:= v7.`c.f.b.k.n.f.g` @type ^`int`;
  #L1d65a2.  v9:= 0.5F;
  #L1d65a6.  if v14 <= v3 then goto L1d65d0;
  #L1d65aa.  v10:= 2.0F;
  #L1d65ae.  if v1 == 0 then goto L1d65c2;
  #L1d65b2.  v11:= v14 - v3 @kind int;
  #L1d65b6.  v11:= (`float`) v11 @kind i2f;
  #L1d65b8.  v11:= v11 / v10 @kind float;
  #L1d65ba.  v11:= v11 + v9 @kind float;
  #L1d65bc.  v10:= (`int`) v11 @kind f2i;
  #L1d65be.  v7:= v7 + v10 @kind int;
  #L1d65c0.  goto L1d65d0;
  #L1d65c2.  v11:= v14 - v3 @kind int;
  #L1d65c6.  v11:= (`float`) v11 @kind i2f;
  #L1d65c8.  v11:= v11 / v10 @kind float;
  #L1d65ca.  v11:= v11 + v9 @kind float;
  #L1d65cc.  v10:= (`int`) v11 @kind f2i;
  #L1d65ce.  v7:= v7 - v10 @kind int;
  #L1d65d0.  if v15 <= 0 then goto L1d67da;
  #L1d65d4.  v10:= v3 - v14 @kind int;
  #L1d65d8.  v10:= (`float`) v10 @kind i2f;
  #L1d65da.  v11:= (`float`) v15 @kind i2f;
  #L1d65dc.  v11:= v10 / v11 @kind float;
  #L1d65e0.  v11:= v11 + v9 @kind float;
  #L1d65e2.  v11:= (`int`) v11 @kind f2i;
  #L1d65e4.  v13:= 0I;
  #L1d65e6.  v16:= 0I;
  #L1d65ea.  if v13 >= v4 then goto L1d6744;
  #L1d65ee.  v12:= v0.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d65f2.  call temp:= `get`(v12, v13) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d65f8.  v12:= temp @kind object;
  #L1d65fa.  v12:= (`c.f.b.k.n.p`) v12 @kind object;
  #L1d65fe.  v9:= v12.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d6602.  call temp:= `getVisibility`(v9) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d6608.  v9:= temp;
  #L1d660a.  v18:= v11;
  #L1d660e.  v11:= 8I;
  #L1d6612.  if v9 != v11 then goto L1d661a;
  #L1d6616.  goto L1d671a;
  #L1d661a.  v9:= v12.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1d661e.  v11:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d6622.  if v9 != v11 then goto L1d671a;
  #L1d6626.  v9:= v12.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1d662a.  v9:= v9.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1d662e.  if v9 != 0 then goto L1d671a;
  #L1d6632.  v9:= 0I;
  #L1d6634.  v11:= fcmpl(v17, v9);
  #L1d6638.  if v11 <= 0 then goto L1d665e;
  #L1d663c.  v11:= v12.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d6640.  v11:= v11.`c.f.b.k.e.j0` @type ^`float`[] @kind object;
  #L1d6644.  v9:= v0.`c.f.b.k.n.p.f` @type ^`int`;
  #L1d6648.  v9:= v11[v9];
  #L1d664c.  v9:= v9 * v10 @kind float;
  #L1d6650.  v9:= v9 / v17 @kind float;
  #L1d6654.  v11:= 0.5F;
  #L1d6658.  v9:= v9 + v11 @kind float;
  #L1d665a.  v11:= (`int`) v9 @kind f2i;
  #L1d665c.  goto L1d6662;
  #L1d665e.  v11:= v18;
  #L1d6662.  v9:= v0.`c.f.b.k.n.p.f` @type ^`int`;
  #L1d6666.  if v9 != 0 then goto L1d66ba;
  #L1d666a.  v9:= v12.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d666e.  v19:= v10;
  #L1d6672.  v10:= v9.`c.f.b.k.e.r` @type ^`int`;
  #L1d6676.  v9:= v9.`c.f.b.k.e.q` @type ^`int`;
  #L1d667a.  v20:= v14;
  #L1d667e.  v14:= v12.`c.f.b.k.n.p.a` @type ^`int`;
  #L1d6682.  v21:= v7;
  #L1d6686.  v7:= 1I;
  #L1d6688.  if v14 != v7 then goto L1d669e;
  #L1d668c.  v7:= v12.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1d6690.  v7:= v7.`c.f.b.k.n.g.m` @type ^`int`;
  #L1d6694.  call temp:= `min`(v11, v7) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d669a.  v7:= temp;
  #L1d669c.  goto L1d66a0;
  #L1d669e.  v7:= v11;
  #L1d66a0.  call temp:= `max`(v9, v7) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1d66a6.  v7:= temp;
  #L1d66a8.  if v10 <= 0 then goto L1d66b4;
  #L1d66ac.  call temp:= `min`(v10, v7) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d66b2.  v7:= temp;
  #L1d66b4.  if v7 == v11 then goto L1d670e;
  #L1d66b8.  goto L1d6708;
  #L1d66ba.  v21:= v7;
  #L1d66be.  v19:= v10;
  #L1d66c2.  v20:= v14;
  #L1d66c6.  v7:= v12.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d66ca.  v9:= v7.`c.f.b.k.e.u` @type ^`int`;
  #L1d66ce.  v7:= v7.`c.f.b.k.e.t` @type ^`int`;
  #L1d66d2.  v10:= v12.`c.f.b.k.n.p.a` @type ^`int`;
  #L1d66d6.  v14:= 1I;
  #L1d66d8.  if v10 != v14 then goto L1d66ee;
  #L1d66dc.  v10:= v12.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1d66e0.  v10:= v10.`c.f.b.k.n.g.m` @type ^`int`;
  #L1d66e4.  call temp:= `min`(v11, v10) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d66ea.  v10:= temp;
  #L1d66ec.  goto L1d66f0;
  #L1d66ee.  v10:= v11;
  #L1d66f0.  call temp:= `max`(v7, v10) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1d66f6.  v7:= temp;
  #L1d66f8.  if v9 <= 0 then goto L1d6704;
  #L1d66fc.  call temp:= `min`(v9, v7) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d6702.  v7:= temp;
  #L1d6704.  if v7 == v11 then goto L1d670e;
  #L1d6708.  v16:= v16 + 1;
  #L1d670c.  v11:= v7;
  #L1d670e.  v7:= v12.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1d6712.  call `resolve`(v7, v11) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1d6718.  goto L1d6726;
  #L1d671a.  v21:= v7;
  #L1d671e.  v19:= v10;
  #L1d6722.  v20:= v14;
  #L1d6726.  v13:= v13 + 1;
  #L1d672a.  v11:= v18;
  #L1d672e.  v10:= v19;
  #L1d6732.  v14:= v20;
  #L1d6736.  v7:= v21;
  #L1d673a.  v9:= 0.5F;
  #L1d673e.  v12:= 1I;
  #L1d6740.  goto L1d65ea;
  #L1d6744.  v21:= v7;
  #L1d6748.  v20:= v14;
  #L1d674c.  if v16 <= 0 then goto L1d67bc;
  #L1d6750.  v15:= v15 - v16 @kind int;
  #L1d6754.  v7:= 0I;
  #L1d6756.  v9:= 0I;
  #L1d6758.  if v7 >= v4 then goto L1d67b8;
  #L1d675c.  v10:= v0.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d6760.  call temp:= `get`(v10, v7) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d6766.  v10:= temp @kind object;
  #L1d6768.  v10:= (`c.f.b.k.n.p`) v10 @kind object;
  #L1d676c.  v11:= v10.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d6770.  call temp:= `getVisibility`(v11) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d6776.  v11:= temp;
  #L1d6778.  v12:= 8I;
  #L1d677c.  if v11 != v12 then goto L1d6782;
  #L1d6780.  goto L1d67b2;
  #L1d6782.  if v7 <= 0 then goto L1d6794;
  #L1d6786.  if v7 < v5 then goto L1d6794;
  #L1d678a.  v11:= v10.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d678e.  v11:= v11.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d6792.  v9:= v9 + v11 @kind int;
  #L1d6794.  v11:= v10.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1d6798.  v11:= v11.`c.f.b.k.n.f.g` @type ^`int`;
  #L1d679c.  v9:= v9 + v11 @kind int;
  #L1d679e.  if v7 >= v8 then goto L1d67b2;
  #L1d67a2.  if v7 >= v6 then goto L1d67b2;
  #L1d67a6.  v10:= v10.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d67aa.  v10:= v10.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d67ae.  v10:= -v10 @kind int;
  #L1d67b0.  v9:= v9 + v10 @kind int;
  #L1d67b2.  v7:= v7 + 1;
  #L1d67b6.  goto L1d6758;
  #L1d67b8.  v14:= v9;
  #L1d67ba.  goto L1d67c0;
  #L1d67bc.  v14:= v20;
  #L1d67c0.  v7:= v0.`c.f.b.k.n.c.l` @type ^`int`;
  #L1d67c4.  v9:= 2I;
  #L1d67c6.  if v7 != v9 then goto L1d67d6;
  #L1d67ca.  if v16 != 0 then goto L1d67d6;
  #L1d67ce.  v7:= 0I;
  #L1d67d0.  v0.`c.f.b.k.n.c.l` @type ^`int` := v7;
  #L1d67d4.  goto L1d67e6;
  #L1d67d6.  v7:= 0I;
  #L1d67d8.  goto L1d67e6;
  #L1d67da.  v21:= v7;
  #L1d67de.  v20:= v14;
  #L1d67e2.  v7:= 0I;
  #L1d67e4.  v9:= 2I;
  #L1d67e6.  if v14 <= v3 then goto L1d67ee;
  #L1d67ea.  v0.`c.f.b.k.n.c.l` @type ^`int` := v9;
  #L1d67ee.  if v2 <= 0 then goto L1d67fe;
  #L1d67f2.  if v15 != 0 then goto L1d67fe;
  #L1d67f6.  if v5 != v6 then goto L1d67fe;
  #L1d67fa.  v0.`c.f.b.k.n.c.l` @type ^`int` := v9;
  #L1d67fe.  v9:= v0.`c.f.b.k.n.c.l` @type ^`int`;
  #L1d6802.  v10:= 1I;
  #L1d6804.  if v9 != v10 then goto L1d6942;
  #L1d6808.  if v2 <= v10 then goto L1d6816;
  #L1d680c.  v3:= v3 - v14 @kind int;
  #L1d680e.  v2:= v2 - v10 @kind int;
  #L1d6810.  v2:= v3 / v2 @kind int;
  #L1d6814.  goto L1d6826;
  #L1d6816.  if v2 != v10 then goto L1d6824;
  #L1d681a.  v3:= v3 - v14 @kind int;
  #L1d681c.  v2:= 2I;
  #L1d681e.  v2:= v3 / 2;
  #L1d6822.  goto L1d6826;
  #L1d6824.  v2:= 0I;
  #L1d6826.  if v15 <= 0 then goto L1d682c;
  #L1d682a.  v2:= 0I;
  #L1d682c.  v3:= v21;
  #L1d6830.  if v7 >= v4 then goto L1d6bca;
  #L1d6834.  if v1 == 0 then goto L1d6842;
  #L1d6838.  v9:= v7 + 1;
  #L1d683c.  v9:= v4 - v9 @kind int;
  #L1d6840.  goto L1d6844;
  #L1d6842.  v9:= v7;
  #L1d6844.  v10:= v0.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d6848.  call temp:= `get`(v10, v9) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d684e.  v9:= temp @kind object;
  #L1d6850.  v9:= (`c.f.b.k.n.p`) v9 @kind object;
  #L1d6854.  v10:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d6858.  call temp:= `getVisibility`(v10) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d685e.  v10:= temp;
  #L1d6860.  v11:= 8I;
  #L1d6864.  if v10 != v11 then goto L1d687e;
  #L1d6868.  v10:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d686c.  call `resolve`(v10, v3) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d6872.  v9:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6876.  call `resolve`(v9, v3) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d687c.  goto L1d693a;
  #L1d687e.  if v7 <= 0 then goto L1d688c;
  #L1d6882.  if v1 == 0 then goto L1d688a;
  #L1d6886.  v3:= v3 - v2 @kind int;
  #L1d6888.  goto L1d688c;
  #L1d688a.  v3:= v3 + v2 @kind int;
  #L1d688c.  if v7 <= 0 then goto L1d68ae;
  #L1d6890.  if v7 < v5 then goto L1d68ae;
  #L1d6894.  if v1 == 0 then goto L1d68a4;
  #L1d6898.  v10:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d689c.  v10:= v10.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d68a0.  v3:= v3 - v10 @kind int;
  #L1d68a2.  goto L1d68ae;
  #L1d68a4.  v10:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d68a8.  v10:= v10.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d68ac.  v3:= v3 + v10 @kind int;
  #L1d68ae.  if v1 == 0 then goto L1d68be;
  #L1d68b2.  v10:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d68b6.  call `resolve`(v10, v3) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d68bc.  goto L1d68c8;
  #L1d68be.  v10:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d68c2.  call `resolve`(v10, v3) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d68c8.  v10:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1d68cc.  v11:= v10.`c.f.b.k.n.f.g` @type ^`int`;
  #L1d68d0.  v12:= v9.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1d68d4.  v13:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d68d8.  if v12 != v13 then goto L1d68ea;
  #L1d68dc.  v12:= v9.`c.f.b.k.n.p.a` @type ^`int`;
  #L1d68e0.  v13:= 1I;
  #L1d68e2.  if v12 != v13 then goto L1d68ea;
  #L1d68e6.  v11:= v10.`c.f.b.k.n.g.m` @type ^`int`;
  #L1d68ea.  if v1 == 0 then goto L1d68f2;
  #L1d68ee.  v3:= v3 - v11 @kind int;
  #L1d68f0.  goto L1d68f4;
  #L1d68f2.  v3:= v3 + v11 @kind int;
  #L1d68f4.  if v1 == 0 then goto L1d6904;
  #L1d68f8.  v10:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d68fc.  call `resolve`(v10, v3) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d6902.  goto L1d690e;
  #L1d6904.  v10:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6908.  call `resolve`(v10, v3) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d690e.  v10:= 1I;
  #L1d6910.  v9.`c.f.b.k.n.p.g` @type ^`boolean` := v10 @kind boolean;
  #L1d6914.  if v7 >= v8 then goto L1d693a;
  #L1d6918.  if v7 >= v6 then goto L1d693a;
  #L1d691c.  if v1 == 0 then goto L1d692e;
  #L1d6920.  v9:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6924.  v9:= v9.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d6928.  v9:= -v9 @kind int;
  #L1d692a.  v3:= v3 - v9 @kind int;
  #L1d692c.  goto L1d693a;
  #L1d692e.  v9:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6932.  v9:= v9.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d6936.  v9:= -v9 @kind int;
  #L1d6938.  v3:= v3 + v9 @kind int;
  #L1d693a.  v7:= v7 + 1;
  #L1d693e.  goto L1d6830;
  #L1d6942.  if v9 != 0 then goto L1d6a6a;
  #L1d6946.  v3:= v3 - v14 @kind int;
  #L1d6948.  v9:= 1I;
  #L1d694a.  v2:= v2 + v9 @kind int;
  #L1d694c.  v2:= v3 / v2 @kind int;
  #L1d6950.  if v15 <= 0 then goto L1d6956;
  #L1d6954.  v2:= 0I;
  #L1d6956.  v3:= v21;
  #L1d695a.  if v7 >= v4 then goto L1d6bca;
  #L1d695e.  if v1 == 0 then goto L1d696c;
  #L1d6962.  v9:= v7 + 1;
  #L1d6966.  v9:= v4 - v9 @kind int;
  #L1d696a.  goto L1d696e;
  #L1d696c.  v9:= v7;
  #L1d696e.  v10:= v0.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d6972.  call temp:= `get`(v10, v9) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d6978.  v9:= temp @kind object;
  #L1d697a.  v9:= (`c.f.b.k.n.p`) v9 @kind object;
  #L1d697e.  v10:= v9.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d6982.  call temp:= `getVisibility`(v10) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d6988.  v10:= temp;
  #L1d698a.  v11:= 8I;
  #L1d698e.  if v10 != v11 then goto L1d69a8;
  #L1d6992.  v10:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6996.  call `resolve`(v10, v3) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d699c.  v9:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d69a0.  call `resolve`(v9, v3) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d69a6.  goto L1d6a62;
  #L1d69a8.  if v1 == 0 then goto L1d69b0;
  #L1d69ac.  v3:= v3 - v2 @kind int;
  #L1d69ae.  goto L1d69b2;
  #L1d69b0.  v3:= v3 + v2 @kind int;
  #L1d69b2.  if v7 <= 0 then goto L1d69d4;
  #L1d69b6.  if v7 < v5 then goto L1d69d4;
  #L1d69ba.  if v1 == 0 then goto L1d69ca;
  #L1d69be.  v10:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d69c2.  v10:= v10.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d69c6.  v3:= v3 - v10 @kind int;
  #L1d69c8.  goto L1d69d4;
  #L1d69ca.  v10:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d69ce.  v10:= v10.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d69d2.  v3:= v3 + v10 @kind int;
  #L1d69d4.  if v1 == 0 then goto L1d69e4;
  #L1d69d8.  v10:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d69dc.  call `resolve`(v10, v3) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d69e2.  goto L1d69ee;
  #L1d69e4.  v10:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d69e8.  call `resolve`(v10, v3) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d69ee.  v10:= v9.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1d69f2.  v11:= v10.`c.f.b.k.n.f.g` @type ^`int`;
  #L1d69f6.  v12:= v9.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1d69fa.  v13:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d69fe.  if v12 != v13 then goto L1d6a18;
  #L1d6a02.  v12:= v9.`c.f.b.k.n.p.a` @type ^`int`;
  #L1d6a06.  v13:= 1I;
  #L1d6a08.  if v12 != v13 then goto L1d6a18;
  #L1d6a0c.  v10:= v10.`c.f.b.k.n.g.m` @type ^`int`;
  #L1d6a10.  call temp:= `min`(v11, v10) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d6a16.  v11:= temp;
  #L1d6a18.  if v1 == 0 then goto L1d6a20;
  #L1d6a1c.  v3:= v3 - v11 @kind int;
  #L1d6a1e.  goto L1d6a22;
  #L1d6a20.  v3:= v3 + v11 @kind int;
  #L1d6a22.  if v1 == 0 then goto L1d6a32;
  #L1d6a26.  v10:= v9.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6a2a.  call `resolve`(v10, v3) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d6a30.  goto L1d6a3c;
  #L1d6a32.  v10:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6a36.  call `resolve`(v10, v3) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d6a3c.  if v7 >= v8 then goto L1d6a62;
  #L1d6a40.  if v7 >= v6 then goto L1d6a62;
  #L1d6a44.  if v1 == 0 then goto L1d6a56;
  #L1d6a48.  v9:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6a4c.  v9:= v9.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d6a50.  v9:= -v9 @kind int;
  #L1d6a52.  v3:= v3 - v9 @kind int;
  #L1d6a54.  goto L1d6a62;
  #L1d6a56.  v9:= v9.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6a5a.  v9:= v9.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d6a5e.  v9:= -v9 @kind int;
  #L1d6a60.  v3:= v3 + v9 @kind int;
  #L1d6a62.  v7:= v7 + 1;
  #L1d6a66.  goto L1d695a;
  #L1d6a6a.  v2:= 2I;
  #L1d6a6c.  if v9 != v2 then goto L1d6bca;
  #L1d6a70.  v2:= v0.`c.f.b.k.n.p.f` @type ^`int`;
  #L1d6a74.  if v2 != 0 then goto L1d6a86;
  #L1d6a78.  v2:= v0.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d6a7c.  call temp:= `getHorizontalBiasPercent`(v2) @signature `Lc/f/b/k/e;.getHorizontalBiasPercent:()F` @kind virtual;
  #L1d6a82.  v2:= temp;
  #L1d6a84.  goto L1d6a92;
  #L1d6a86.  v2:= v0.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d6a8a.  call temp:= `getVerticalBiasPercent`(v2) @signature `Lc/f/b/k/e;.getVerticalBiasPercent:()F` @kind virtual;
  #L1d6a90.  v2:= temp;
  #L1d6a92.  if v1 == 0 then goto L1d6a9e;
  #L1d6a96.  v9:= 1.0F;
  #L1d6a9a.  v2:= v9 - v2 @kind float;
  #L1d6a9e.  v3:= v3 - v14 @kind int;
  #L1d6aa0.  v3:= (`float`) v3 @kind i2f;
  #L1d6aa2.  v3:= v3 * v2 @kind float;
  #L1d6aa6.  v2:= 0.5F;
  #L1d6aaa.  v3:= v3 + v2 @kind float;
  #L1d6aac.  v2:= (`int`) v3 @kind f2i;
  #L1d6aae.  if v2 < 0 then goto L1d6ab6;
  #L1d6ab2.  if v15 <= 0 then goto L1d6ab8;
  #L1d6ab6.  v2:= 0I;
  #L1d6ab8.  if v1 == 0 then goto L1d6ac2;
  #L1d6abc.  v2:= v21 - v2 @kind int;
  #L1d6ac0.  goto L1d6ac6;
  #L1d6ac2.  v2:= v21 + v2 @kind int;
  #L1d6ac6.  if v7 >= v4 then goto L1d6bca;
  #L1d6aca.  if v1 == 0 then goto L1d6ad8;
  #L1d6ace.  v3:= v7 + 1;
  #L1d6ad2.  v3:= v4 - v3 @kind int;
  #L1d6ad6.  goto L1d6ada;
  #L1d6ad8.  v3:= v7;
  #L1d6ada.  v9:= v0.`c.f.b.k.n.c.k` @type ^`java.util.ArrayList` @kind object;
  #L1d6ade.  call temp:= `get`(v9, v3) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d6ae4.  v3:= temp @kind object;
  #L1d6ae6.  v3:= (`c.f.b.k.n.p`) v3 @kind object;
  #L1d6aea.  v9:= v3.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d6aee.  call temp:= `getVisibility`(v9) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d6af4.  v9:= temp;
  #L1d6af6.  v10:= 8I;
  #L1d6afa.  if v9 != v10 then goto L1d6b16;
  #L1d6afe.  v9:= v3.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6b02.  call `resolve`(v9, v2) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d6b08.  v3:= v3.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6b0c.  call `resolve`(v3, v2) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d6b12.  v13:= 1I;
  #L1d6b14.  goto L1d6bc2;
  #L1d6b16.  if v7 <= 0 then goto L1d6b38;
  #L1d6b1a.  if v7 < v5 then goto L1d6b38;
  #L1d6b1e.  if v1 == 0 then goto L1d6b2e;
  #L1d6b22.  v9:= v3.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6b26.  v9:= v9.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d6b2a.  v2:= v2 - v9 @kind int;
  #L1d6b2c.  goto L1d6b38;
  #L1d6b2e.  v9:= v3.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6b32.  v9:= v9.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d6b36.  v2:= v2 + v9 @kind int;
  #L1d6b38.  if v1 == 0 then goto L1d6b48;
  #L1d6b3c.  v9:= v3.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6b40.  call `resolve`(v9, v2) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d6b46.  goto L1d6b52;
  #L1d6b48.  v9:= v3.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6b4c.  call `resolve`(v9, v2) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d6b52.  v9:= v3.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1d6b56.  v11:= v9.`c.f.b.k.n.f.g` @type ^`int`;
  #L1d6b5a.  v12:= v3.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1d6b5e.  v13:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d6b62.  if v12 != v13 then goto L1d6b76;
  #L1d6b66.  v12:= v3.`c.f.b.k.n.p.a` @type ^`int`;
  #L1d6b6a.  v13:= 1I;
  #L1d6b6c.  if v12 != v13 then goto L1d6b78;
  #L1d6b70.  v11:= v9.`c.f.b.k.n.g.m` @type ^`int`;
  #L1d6b74.  goto L1d6b78;
  #L1d6b76.  v13:= 1I;
  #L1d6b78.  if v1 == 0 then goto L1d6b80;
  #L1d6b7c.  v2:= v2 - v11 @kind int;
  #L1d6b7e.  goto L1d6b82;
  #L1d6b80.  v2:= v2 + v11 @kind int;
  #L1d6b82.  if v1 == 0 then goto L1d6b92;
  #L1d6b86.  v9:= v3.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6b8a.  call `resolve`(v9, v2) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d6b90.  goto L1d6b9c;
  #L1d6b92.  v9:= v3.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6b96.  call `resolve`(v9, v2) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d6b9c.  if v7 >= v8 then goto L1d6bc2;
  #L1d6ba0.  if v7 >= v6 then goto L1d6bc2;
  #L1d6ba4.  if v1 == 0 then goto L1d6bb6;
  #L1d6ba8.  v3:= v3.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6bac.  v3:= v3.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d6bb0.  v3:= -v3 @kind int;
  #L1d6bb2.  v2:= v2 - v3 @kind int;
  #L1d6bb4.  goto L1d6bc2;
  #L1d6bb6.  v3:= v3.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1d6bba.  v3:= v3.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d6bbe.  v3:= -v3 @kind int;
  #L1d6bc0.  v2:= v2 + v3 @kind int;
  #L1d6bc2.  v7:= v7 + 1;
  #L1d6bc6.  goto L1d6ac6;
  #L1d6bca.  return @kind void;
}
