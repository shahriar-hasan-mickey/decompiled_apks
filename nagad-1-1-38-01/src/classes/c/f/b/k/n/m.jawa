record `c.f.b.k.n.m` @kind class @AccessFlag  {
  `boolean` `c.f.b.k.n.m.a` @AccessFlag PUBLIC;
  `c.f.b.k.n.p` `c.f.b.k.n.m.b` @AccessFlag ;
  `java.util.ArrayList` `c.f.b.k.n.m.c` @AccessFlag ;
}
global `int` `@@c.f.b.k.n.m.d` @AccessFlag PUBLIC_STATIC;
procedure `void` `<init>`(`c.f.b.k.n.m` v0 @kind this, `c.f.b.k.n.p` v1 @kind object, `int` v2 ) @signature `Lc/f/b/k/n/m;.<init>:(Lc/f/b/k/n/p;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1dc044.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1dc04a.  v2:= 0I;
  #L1dc04c.  v0.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` := v2 @kind object;
  #L1dc050.  v2:= new `java.util.ArrayList`;
  #L1dc054.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1dc05a.  v0.`c.f.b.k.n.m.c` @type ^`java.util.ArrayList` := v2 @kind object;
  #L1dc05e.  v2:= `@@c.f.b.k.n.m.d` @type ^`int`;
  #L1dc062.  v2:= v2 + 1;
  #L1dc066.  `@@c.f.b.k.n.m.d` @type ^`int` := v2;
  #L1dc06a.  v0.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` := v1 @kind object;
  #L1dc06e.  return @kind void;
}
procedure `long` `a`(`c.f.b.k.n.m` v8 @kind this, `c.f.b.k.n.f` v9 @kind object, `long` v10 ) @signature `Lc/f/b/k/n/m;.a:(Lc/f/b/k/n/f;J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1dbedc.  v0:= v9.`c.f.b.k.n.f.d` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbee0.  v1:= instanceof @variable v0 @type ^`c.f.b.k.n.k` @kind boolean;
  #L1dbee4.  if v1 == 0 then goto L1dbeea;
  #L1dbee8.  return v10 @kind wide;
  #L1dbeea.  v1:= v9.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1dbeee.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1dbef4.  v1:= temp;
  #L1dbef6.  v2:= 0I;
  #L1dbef8.  v3:= v10 @kind wide;
  #L1dbefa.  if v2 >= v1 then goto L1dbf42;
  #L1dbefe.  v5:= v9.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1dbf02.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1dbf08.  v5:= temp @kind object;
  #L1dbf0a.  v5:= (`c.f.b.k.n.d`) v5 @kind object;
  #L1dbf0e.  v6:= instanceof @variable v5 @type ^`c.f.b.k.n.f` @kind boolean;
  #L1dbf12.  if v6 == 0 then goto L1dbf3c;
  #L1dbf16.  v5:= (`c.f.b.k.n.f`) v5 @kind object;
  #L1dbf1a.  v6:= v5.`c.f.b.k.n.f.d` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbf1e.  if v6 != v0 then goto L1dbf24;
  #L1dbf22.  goto L1dbf3c;
  #L1dbf24.  v6:= v5.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbf28.  v6:= (`long`) v6 @kind i2l;
  #L1dbf2a.  v6:= v6 + v10 @kind long;
  #L1dbf2c.  call temp:= `a`(v8, v5, v6) @signature `Lc/f/b/k/n/m;.a:(Lc/f/b/k/n/f;J)J` @kind direct;
  #L1dbf32.  v5:= temp @kind wide;
  #L1dbf34.  call temp:= `min`(v3, v5) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1dbf3a.  v3:= temp @kind wide;
  #L1dbf3c.  v2:= v2 + 1;
  #L1dbf40.  goto L1dbefa;
  #L1dbf42.  v1:= v0.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbf46.  if v9 != v1 then goto L1dbf7c;
  #L1dbf4a.  call temp:= `getWrapDimension`(v0) @signature `Lc/f/b/k/n/p;.getWrapDimension:()J` @kind virtual;
  #L1dbf50.  v1:= temp @kind wide;
  #L1dbf52.  v9:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbf56.  v10:= v10 - v1 @kind long;
  #L1dbf58.  call temp:= `a`(v8, v9, v10) @signature `Lc/f/b/k/n/m;.a:(Lc/f/b/k/n/f;J)J` @kind direct;
  #L1dbf5e.  v1:= temp @kind wide;
  #L1dbf60.  call temp:= `min`(v3, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1dbf66.  v1:= temp @kind wide;
  #L1dbf68.  v9:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbf6c.  v9:= v9.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbf70.  v3:= (`long`) v9 @kind i2l;
  #L1dbf72.  v10:= v10 - v3 @kind long;
  #L1dbf74.  call temp:= `min`(v1, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1dbf7a.  v3:= temp @kind wide;
  #L1dbf7c.  return v3 @kind wide;
}
procedure `long` `b`(`c.f.b.k.n.m` v8 @kind this, `c.f.b.k.n.f` v9 @kind object, `long` v10 ) @signature `Lc/f/b/k/n/m;.b:(Lc/f/b/k/n/f;J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1dbf90.  v0:= v9.`c.f.b.k.n.f.d` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbf94.  v1:= instanceof @variable v0 @type ^`c.f.b.k.n.k` @kind boolean;
  #L1dbf98.  if v1 == 0 then goto L1dbf9e;
  #L1dbf9c.  return v10 @kind wide;
  #L1dbf9e.  v1:= v9.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1dbfa2.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1dbfa8.  v1:= temp;
  #L1dbfaa.  v2:= 0I;
  #L1dbfac.  v3:= v10 @kind wide;
  #L1dbfae.  if v2 >= v1 then goto L1dbff6;
  #L1dbfb2.  v5:= v9.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1dbfb6.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1dbfbc.  v5:= temp @kind object;
  #L1dbfbe.  v5:= (`c.f.b.k.n.d`) v5 @kind object;
  #L1dbfc2.  v6:= instanceof @variable v5 @type ^`c.f.b.k.n.f` @kind boolean;
  #L1dbfc6.  if v6 == 0 then goto L1dbff0;
  #L1dbfca.  v5:= (`c.f.b.k.n.f`) v5 @kind object;
  #L1dbfce.  v6:= v5.`c.f.b.k.n.f.d` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbfd2.  if v6 != v0 then goto L1dbfd8;
  #L1dbfd6.  goto L1dbff0;
  #L1dbfd8.  v6:= v5.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbfdc.  v6:= (`long`) v6 @kind i2l;
  #L1dbfde.  v6:= v6 + v10 @kind long;
  #L1dbfe0.  call temp:= `b`(v8, v5, v6) @signature `Lc/f/b/k/n/m;.b:(Lc/f/b/k/n/f;J)J` @kind direct;
  #L1dbfe6.  v5:= temp @kind wide;
  #L1dbfe8.  call temp:= `max`(v3, v5) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L1dbfee.  v3:= temp @kind wide;
  #L1dbff0.  v2:= v2 + 1;
  #L1dbff4.  goto L1dbfae;
  #L1dbff6.  v1:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbffa.  if v9 != v1 then goto L1dc030;
  #L1dbffe.  call temp:= `getWrapDimension`(v0) @signature `Lc/f/b/k/n/p;.getWrapDimension:()J` @kind virtual;
  #L1dc004.  v1:= temp @kind wide;
  #L1dc006.  v9:= v0.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc00a.  v10:= v10 + v1 @kind long;
  #L1dc00c.  call temp:= `b`(v8, v9, v10) @signature `Lc/f/b/k/n/m;.b:(Lc/f/b/k/n/f;J)J` @kind direct;
  #L1dc012.  v1:= temp @kind wide;
  #L1dc014.  call temp:= `max`(v3, v1) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L1dc01a.  v1:= temp @kind wide;
  #L1dc01c.  v9:= v0.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dc020.  v9:= v9.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dc024.  v3:= (`long`) v9 @kind i2l;
  #L1dc026.  v10:= v10 - v3 @kind long;
  #L1dc028.  call temp:= `max`(v1, v10) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L1dc02e.  v3:= temp @kind wide;
  #L1dc030.  return v3 @kind wide;
}
procedure `void` `add`(`c.f.b.k.n.m` v1 @kind this, `c.f.b.k.n.p` v2 @kind object) @signature `Lc/f/b/k/n/m;.add:(Lc/f/b/k/n/p;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dc080.  v0:= v1.`c.f.b.k.n.m.c` @type ^`java.util.ArrayList` @kind object;
  #L1dc084.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1dc08a.  return @kind void;
}
procedure `long` `computeWrapSize`(`c.f.b.k.n.m` v11 @kind this, `c.f.b.k.f` v12 @kind object, `int` v13 ) @signature `Lc/f/b/k/n/m;.computeWrapSize:(Lc/f/b/k/f;I)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1dbcdc.  v0:= v11.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbce0.  v1:= instanceof @variable v0 @type ^`c.f.b.k.n.c` @kind boolean;
  #L1dbce4.  v2:= 0L;
  #L1dbce8.  if v1 == 0 then goto L1dbcfa;
  #L1dbcec.  v0:= (`c.f.b.k.n.c`) v0 @kind object;
  #L1dbcf0.  v0:= v0.`c.f.b.k.n.p.f` @type ^`int`;
  #L1dbcf4.  if v0 == v13 then goto L1dbd12;
  #L1dbcf8.  return v2 @kind wide;
  #L1dbcfa.  if v13 != 0 then goto L1dbd08;
  #L1dbcfe.  v0:= instanceof @variable v0 @type ^`c.f.b.k.n.l` @kind boolean;
  #L1dbd02.  if v0 != 0 then goto L1dbd12;
  #L1dbd06.  return v2 @kind wide;
  #L1dbd08.  v0:= instanceof @variable v0 @type ^`c.f.b.k.n.n` @kind boolean;
  #L1dbd0c.  if v0 != 0 then goto L1dbd12;
  #L1dbd10.  return v2 @kind wide;
  #L1dbd12.  if v13 != 0 then goto L1dbd1c;
  #L1dbd16.  v0:= v12.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dbd1a.  goto L1dbd20;
  #L1dbd1c.  v0:= v12.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dbd20.  v0:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbd24.  if v13 != 0 then goto L1dbd2e;
  #L1dbd28.  v12:= v12.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dbd2c.  goto L1dbd32;
  #L1dbd2e.  v12:= v12.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dbd32.  v12:= v12.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbd36.  v1:= v11.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbd3a.  v1:= v1.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbd3e.  v1:= v1.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dbd42.  call temp:= `contains`(v1, v0) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L1dbd48.  v0:= temp;
  #L1dbd4a.  v1:= v11.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbd4e.  v1:= v1.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbd52.  v1:= v1.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dbd56.  call temp:= `contains`(v1, v12) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L1dbd5c.  v12:= temp;
  #L1dbd5e.  v1:= v11.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbd62.  call temp:= `getWrapDimension`(v1) @signature `Lc/f/b/k/n/p;.getWrapDimension:()J` @kind virtual;
  #L1dbd68.  v4:= temp @kind wide;
  #L1dbd6a.  if v0 == 0 then goto L1dbe36;
  #L1dbd6e.  if v12 == 0 then goto L1dbe36;
  #L1dbd72.  v12:= v11.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbd76.  v12:= v12.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbd7a.  call temp:= `b`(v11, v12, v2) @signature `Lc/f/b/k/n/m;.b:(Lc/f/b/k/n/f;J)J` @kind direct;
  #L1dbd80.  v0:= temp @kind wide;
  #L1dbd82.  v12:= v11.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbd86.  v12:= v12.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbd8a.  call temp:= `a`(v11, v12, v2) @signature `Lc/f/b/k/n/m;.a:(Lc/f/b/k/n/f;J)J` @kind direct;
  #L1dbd90.  v6:= temp @kind wide;
  #L1dbd92.  v0:= v0 - v4 @kind long;
  #L1dbd94.  v12:= v11.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbd98.  v12:= v12.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbd9c.  v12:= v12.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbda0.  v8:= -v12 @kind int;
  #L1dbda2.  v8:= (`long`) v8 @kind i2l;
  #L1dbda4.  v10:= lcmp(v0, v8);
  #L1dbda8.  if v10 < 0 then goto L1dbdb0;
  #L1dbdac.  v8:= (`long`) v12 @kind i2l;
  #L1dbdae.  v0:= v0 + v8 @kind long;
  #L1dbdb0.  v6:= -v6 @kind long;
  #L1dbdb2.  v6:= v6 - v4 @kind long;
  #L1dbdb4.  v12:= v11.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbdb8.  v12:= v12.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbdbc.  v12:= v12.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbdc0.  v8:= (`long`) v12 @kind i2l;
  #L1dbdc2.  v6:= v6 - v8 @kind long;
  #L1dbdc4.  v8:= (`long`) v12 @kind i2l;
  #L1dbdc6.  v10:= lcmp(v6, v8);
  #L1dbdca.  if v10 < 0 then goto L1dbdd2;
  #L1dbdce.  v8:= (`long`) v12 @kind i2l;
  #L1dbdd0.  v6:= v6 - v8 @kind long;
  #L1dbdd2.  v12:= v11.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbdd6.  v12:= v12.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dbdda.  call temp:= `getBiasPercent`(v12, v13) @signature `Lc/f/b/k/e;.getBiasPercent:(I)F` @kind virtual;
  #L1dbde0.  v12:= temp;
  #L1dbde2.  v13:= 0I;
  #L1dbde4.  v8:= 1.0F;
  #L1dbde8.  v13:= fcmpl(v12, v13);
  #L1dbdec.  if v13 <= 0 then goto L1dbe00;
  #L1dbdf0.  v13:= (`float`) v6 @kind l2f;
  #L1dbdf2.  v13:= v13 / v12 @kind float;
  #L1dbdf4.  v0:= (`float`) v0 @kind l2f;
  #L1dbdf6.  v1:= v8 - v12 @kind float;
  #L1dbdfa.  v0:= v0 / v1 @kind float;
  #L1dbdfc.  v13:= v13 + v0 @kind float;
  #L1dbdfe.  v2:= (`long`) v13 @kind f2l;
  #L1dbe00.  v13:= (`float`) v2 @kind l2f;
  #L1dbe02.  v0:= v13 * v12 @kind float;
  #L1dbe06.  v1:= 0.5F;
  #L1dbe0a.  v0:= v0 + v1 @kind float;
  #L1dbe0c.  v2:= (`long`) v0 @kind f2l;
  #L1dbe0e.  v8:= v8 - v12 @kind float;
  #L1dbe10.  v13:= v13 * v8 @kind float;
  #L1dbe14.  v13:= v13 + v1 @kind float;
  #L1dbe16.  v12:= (`long`) v13 @kind f2l;
  #L1dbe18.  v2:= v2 + v4 @kind long;
  #L1dbe1a.  v2:= v2 + v12 @kind long;
  #L1dbe1c.  v12:= v11.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbe20.  v13:= v12.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbe24.  v13:= v13.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbe28.  v0:= (`long`) v13 @kind i2l;
  #L1dbe2a.  v0:= v0 + v2 @kind long;
  #L1dbe2c.  v12:= v12.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbe30.  v12:= v12.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbe34.  goto L1dbec6;
  #L1dbe36.  if v0 == 0 then goto L1dbe6a;
  #L1dbe3a.  v12:= v11.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbe3e.  v12:= v12.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbe42.  v13:= v12.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbe46.  v0:= (`long`) v13 @kind i2l;
  #L1dbe48.  call temp:= `b`(v11, v12, v0) @signature `Lc/f/b/k/n/m;.b:(Lc/f/b/k/n/f;J)J` @kind direct;
  #L1dbe4e.  v12:= temp @kind wide;
  #L1dbe50.  v0:= v11.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbe54.  v0:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbe58.  v0:= v0.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbe5c.  v0:= (`long`) v0 @kind i2l;
  #L1dbe5e.  v0:= v0 + v4 @kind long;
  #L1dbe60.  call temp:= `max`(v12, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L1dbe66.  v0:= temp @kind wide;
  #L1dbe68.  goto L1dbeca;
  #L1dbe6a.  if v12 == 0 then goto L1dbea2;
  #L1dbe6e.  v12:= v11.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbe72.  v12:= v12.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbe76.  v13:= v12.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbe7a.  v0:= (`long`) v13 @kind i2l;
  #L1dbe7c.  call temp:= `a`(v11, v12, v0) @signature `Lc/f/b/k/n/m;.a:(Lc/f/b/k/n/f;J)J` @kind direct;
  #L1dbe82.  v12:= temp @kind wide;
  #L1dbe84.  v0:= v11.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbe88.  v0:= v0.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbe8c.  v0:= v0.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbe90.  v0:= -v0 @kind int;
  #L1dbe92.  v0:= (`long`) v0 @kind i2l;
  #L1dbe94.  v0:= v0 + v4 @kind long;
  #L1dbe96.  v12:= -v12 @kind long;
  #L1dbe98.  call temp:= `max`(v12, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L1dbe9e.  v0:= temp @kind wide;
  #L1dbea0.  goto L1dbeca;
  #L1dbea2.  v12:= v11.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbea6.  v13:= v12.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbeaa.  v13:= v13.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbeae.  v0:= (`long`) v13 @kind i2l;
  #L1dbeb0.  call temp:= `getWrapDimension`(v12) @signature `Lc/f/b/k/n/p;.getWrapDimension:()J` @kind virtual;
  #L1dbeb6.  v12:= temp @kind wide;
  #L1dbeb8.  v0:= v0 + v12 @kind long;
  #L1dbeba.  v12:= v11.`c.f.b.k.n.m.b` @type ^`c.f.b.k.n.p` @kind object;
  #L1dbebe.  v12:= v12.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbec2.  v12:= v12.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbec6.  v12:= (`long`) v12 @kind i2l;
  #L1dbec8.  v0:= v0 - v12 @kind long;
  #L1dbeca.  return v0 @kind wide;
}
