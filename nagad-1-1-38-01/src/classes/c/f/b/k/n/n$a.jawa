record `c.f.b.k.n.n$a` @kind class @AccessFlag SYNTHETIC {
}
global `int`[] `@@c.f.b.k.n.n$a.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lc/f/b/k/n/n$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1dc09c.  call temp:= `values`() @signature `Lc/f/b/k/n/p$b;.values:()[Lc/f/b/k/n/p$b;` @kind static;
  #L1dc0a2.  v0:= temp @kind object;
  #L1dc0a4.  v0:= length @variable v0;
  #L1dc0a6.  v0:= new `int`[v0];
  #L1dc0aa.  `@@c.f.b.k.n.n$a.a` @type ^`int`[] := v0 @kind object;
  #L1dc0ae.  v0:= `@@c.f.b.k.n.n$a.a` @type ^`int`[] @kind object;
  #L1dc0b2.  v1:= `@@c.f.b.k.n.p$b.g` @type ^`c.f.b.k.n.p$b` @kind object;
  #L1dc0b6.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1dc0bc.  v1:= temp;
  #L1dc0be.  v2:= 1I;
  #L1dc0c0.  v0[v1]:= v2;
  #L1dc0c4.  v0:= `@@c.f.b.k.n.n$a.a` @type ^`int`[] @kind object;
  #L1dc0c8.  v1:= `@@c.f.b.k.n.p$b.h` @type ^`c.f.b.k.n.p$b` @kind object;
  #L1dc0cc.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1dc0d2.  v1:= temp;
  #L1dc0d4.  v2:= 2I;
  #L1dc0d6.  v0[v1]:= v2;
  #L1dc0da.  v0:= `@@c.f.b.k.n.n$a.a` @type ^`int`[] @kind object;
  #L1dc0de.  v1:= `@@c.f.b.k.n.p$b.i` @type ^`c.f.b.k.n.p$b` @kind object;
  #L1dc0e2.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1dc0e8.  v1:= temp;
  #L1dc0ea.  v2:= 3I;
  #L1dc0ec.  v0[v1]:= v2;
  #L1dc0f0.  return @kind void;
  catch `java.lang.NoSuchFieldError` @[L1dc0ae..L1dc0c4] goto L1dc0c4;
  catch `java.lang.NoSuchFieldError` @[L1dc0c4..L1dc0da] goto L1dc0da;
  catch `java.lang.NoSuchFieldError` @[L1dc0da..L1dc0f0] goto L1dc0f0;
}
