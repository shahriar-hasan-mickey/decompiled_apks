record `c.f.b.k.n.h` @kind class @AccessFlag PUBLIC {
}
global `c.f.b.k.n.b$a` `@@c.f.b.k.n.h.a` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lc/f/b/k/n/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d886c.  v0:= new `c.f.b.k.n.b$a`;
  #L1d8870.  call `<init>`(v0) @signature `Lc/f/b/k/n/b$a;.<init>:()V` @kind direct;
  #L1d8876.  `@@c.f.b.k.n.h.a` @type ^`c.f.b.k.n.b$a` := v0 @kind object;
  #L1d887a.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.a` v1 @kind object, `c.f.b.k.n.b$b` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/a;Lc/f/b/k/n/b$b;IZ)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L1d8cec.  call temp:= `allSolved`(v1) @signature `Lc/f/b/k/a;.allSolved:()Z` @kind virtual;
  #L1d8cf2.  v0:= temp;
  #L1d8cf4.  if v0 == 0 then goto L1d8d0a;
  #L1d8cf8.  if v3 != 0 then goto L1d8d04;
  #L1d8cfc.  call `a`(v1, v2, v4) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Z)V` @kind static;
  #L1d8d02.  goto L1d8d0a;
  #L1d8d04.  call `a`(v1, v2) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;)V` @kind static;
  #L1d8d0a.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.e` v13 @kind object, `c.f.b.k.n.b$b` v14 @kind object) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L1d93d8.  v0:= instanceof @variable v13 @type ^`c.f.b.k.f` @kind boolean;
  #L1d93dc.  if v0 != 0 then goto L1d940c;
  #L1d93e0.  call temp:= `isMeasureRequested`(v13) @signature `Lc/f/b/k/e;.isMeasureRequested:()Z` @kind virtual;
  #L1d93e6.  v0:= temp;
  #L1d93e8.  if v0 == 0 then goto L1d940c;
  #L1d93ec.  call temp:= `a`(v13) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;)Z` @kind static;
  #L1d93f2.  v0:= temp;
  #L1d93f4.  if v0 == 0 then goto L1d940c;
  #L1d93f8.  v0:= new `c.f.b.k.n.b$a`;
  #L1d93fc.  call `<init>`(v0) @signature `Lc/f/b/k/n/b$a;.<init>:()V` @kind direct;
  #L1d9402.  v1:= `@@c.f.b.k.n.b$a.k` @type ^`int`;
  #L1d9406.  call temp:= `measure`(v13, v14, v0, v1) @signature `Lc/f/b/k/f;.measure:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Lc/f/b/k/n/b$a;I)Z` @kind static;
  #L1d940c.  v0:= `@@c.f.b.k.d$b.h` @type ^`c.f.b.k.d$b` @kind object;
  #L1d9410.  call temp:= `getAnchor`(v13, v0) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1d9416.  v0:= temp @kind object;
  #L1d9418.  v1:= `@@c.f.b.k.d$b.j` @type ^`c.f.b.k.d$b` @kind object;
  #L1d941c.  call temp:= `getAnchor`(v13, v1) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1d9422.  v1:= temp @kind object;
  #L1d9424.  call temp:= `getFinalValue`(v0) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1d942a.  v2:= temp;
  #L1d942c.  call temp:= `getFinalValue`(v1) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1d9432.  v3:= temp;
  #L1d9434.  call temp:= `getDependents`(v0) @signature `Lc/f/b/k/d;.getDependents:()Ljava/util/HashSet;` @kind virtual;
  #L1d943a.  v4:= temp @kind object;
  #L1d943c.  v5:= 0I;
  #L1d943e.  v6:= 8I;
  #L1d9442.  v7:= 1I;
  #L1d9444.  v8:= 0I;
  #L1d9446.  if v4 == 0 then goto L1d962a;
  #L1d944a.  call temp:= `hasFinalValue`(v0) @signature `Lc/f/b/k/d;.hasFinalValue:()Z` @kind virtual;
  #L1d9450.  v4:= temp;
  #L1d9452.  if v4 == 0 then goto L1d962a;
  #L1d9456.  call temp:= `getDependents`(v0) @signature `Lc/f/b/k/d;.getDependents:()Ljava/util/HashSet;` @kind virtual;
  #L1d945c.  v0:= temp @kind object;
  #L1d945e.  call temp:= `iterator`(v0) @signature `Ljava/util/HashSet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1d9464.  v0:= temp @kind object;
  #L1d9466.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d946c.  v4:= temp;
  #L1d946e.  if v4 == 0 then goto L1d962a;
  #L1d9472.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d9478.  v4:= temp @kind object;
  #L1d947a.  v4:= (`c.f.b.k.d`) v4 @kind object;
  #L1d947e.  v9:= v4.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1d9482.  call temp:= `a`(v9) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;)Z` @kind static;
  #L1d9488.  v10:= temp;
  #L1d948a.  call temp:= `isMeasureRequested`(v9) @signature `Lc/f/b/k/e;.isMeasureRequested:()Z` @kind virtual;
  #L1d9490.  v11:= temp;
  #L1d9492.  if v11 == 0 then goto L1d94ae;
  #L1d9496.  if v10 == 0 then goto L1d94ae;
  #L1d949a.  v11:= new `c.f.b.k.n.b$a`;
  #L1d949e.  call `<init>`(v11) @signature `Lc/f/b/k/n/b$a;.<init>:()V` @kind direct;
  #L1d94a4.  v12:= `@@c.f.b.k.n.b$a.k` @type ^`int`;
  #L1d94a8.  call temp:= `measure`(v9, v14, v11, v12) @signature `Lc/f/b/k/f;.measure:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Lc/f/b/k/n/b$a;I)Z` @kind static;
  #L1d94ae.  call temp:= `getVerticalDimensionBehaviour`(v9) @signature `Lc/f/b/k/e;.getVerticalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d94b4.  v11:= temp @kind object;
  #L1d94b6.  v12:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d94ba.  if v11 != v12 then goto L1d9580;
  #L1d94be.  if v10 == 0 then goto L1d94c4;
  #L1d94c2.  goto L1d9580;
  #L1d94c4.  call temp:= `getVerticalDimensionBehaviour`(v9) @signature `Lc/f/b/k/e;.getVerticalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d94ca.  v10:= temp @kind object;
  #L1d94cc.  v11:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d94d0.  if v10 != v11 then goto L1d9466;
  #L1d94d4.  v10:= v9.`c.f.b.k.e.u` @type ^`int`;
  #L1d94d8.  if v10 < 0 then goto L1d9466;
  #L1d94dc.  v10:= v9.`c.f.b.k.e.t` @type ^`int`;
  #L1d94e0.  if v10 < 0 then goto L1d9466;
  #L1d94e4.  call temp:= `getVisibility`(v9) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d94ea.  v10:= temp;
  #L1d94ec.  if v10 == v6 then goto L1d9508;
  #L1d94f0.  v10:= v9.`c.f.b.k.e.o` @type ^`int`;
  #L1d94f4.  if v10 != 0 then goto L1d9466;
  #L1d94f8.  call temp:= `getDimensionRatio`(v9) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1d94fe.  v10:= temp;
  #L1d9500.  v10:= fcmpl(v10, v5);
  #L1d9504.  if v10 != 0 then goto L1d9466;
  #L1d9508.  call temp:= `isInVerticalChain`(v9) @signature `Lc/f/b/k/e;.isInVerticalChain:()Z` @kind virtual;
  #L1d950e.  v10:= temp;
  #L1d9510.  if v10 != 0 then goto L1d9466;
  #L1d9514.  call temp:= `isInVirtualLayout`(v9) @signature `Lc/f/b/k/e;.isInVirtualLayout:()Z` @kind virtual;
  #L1d951a.  v10:= temp;
  #L1d951c.  if v10 != 0 then goto L1d9466;
  #L1d9520.  v10:= v9.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d9524.  if v4 != v10 then goto L1d9540;
  #L1d9528.  v10:= v9.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d952c.  v10:= v10.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d9530.  if v10 == 0 then goto L1d9540;
  #L1d9534.  call temp:= `hasFinalValue`(v10) @signature `Lc/f/b/k/d;.hasFinalValue:()Z` @kind virtual;
  #L1d953a.  v10:= temp;
  #L1d953c.  if v10 != 0 then goto L1d9560;
  #L1d9540.  v10:= v9.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d9544.  if v4 != v10 then goto L1d9564;
  #L1d9548.  v4:= v9.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d954c.  v4:= v4.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d9550.  if v4 == 0 then goto L1d9564;
  #L1d9554.  call temp:= `hasFinalValue`(v4) @signature `Lc/f/b/k/d;.hasFinalValue:()Z` @kind virtual;
  #L1d955a.  v4:= temp;
  #L1d955c.  if v4 == 0 then goto L1d9564;
  #L1d9560.  v4:= 1I;
  #L1d9562.  goto L1d9566;
  #L1d9564.  v4:= 0I;
  #L1d9566.  if v4 == 0 then goto L1d9466;
  #L1d956a.  call temp:= `isInVerticalChain`(v9) @signature `Lc/f/b/k/e;.isInVerticalChain:()Z` @kind virtual;
  #L1d9570.  v4:= temp;
  #L1d9572.  if v4 != 0 then goto L1d9466;
  #L1d9576.  call `a`(v13, v14, v9) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Lc/f/b/k/e;)V` @kind static;
  #L1d957c.  goto L1d9466;
  #L1d9580.  call temp:= `isMeasureRequested`(v9) @signature `Lc/f/b/k/e;.isMeasureRequested:()Z` @kind virtual;
  #L1d9586.  v10:= temp;
  #L1d9588.  if v10 == 0 then goto L1d9590;
  #L1d958c.  goto L1d9466;
  #L1d9590.  v10:= v9.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d9594.  if v4 != v10 then goto L1d95c8;
  #L1d9598.  v11:= v9.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d959c.  v11:= v11.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d95a0.  if v11 != 0 then goto L1d95c8;
  #L1d95a4.  call temp:= `getMargin`(v10) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d95aa.  v4:= temp;
  #L1d95ac.  v4:= v4 + v2 @kind int;
  #L1d95ae.  call temp:= `getHeight`(v9) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d95b4.  v10:= temp;
  #L1d95b6.  v10:= v10 + v4 @kind int;
  #L1d95b8.  call `setFinalVertical`(v9, v4, v10) @signature `Lc/f/b/k/e;.setFinalVertical:(II)V` @kind virtual;
  #L1d95be.  call `a`(v9, v14) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;)V` @kind static;
  #L1d95c4.  goto L1d9466;
  #L1d95c8.  v10:= v9.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d95cc.  if v4 != v10 then goto L1d9600;
  #L1d95d0.  v11:= v10.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d95d4.  if v11 != 0 then goto L1d9600;
  #L1d95d8.  call temp:= `getMargin`(v10) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d95de.  v4:= temp;
  #L1d95e0.  v4:= v2 - v4 @kind int;
  #L1d95e4.  call temp:= `getHeight`(v9) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d95ea.  v10:= temp;
  #L1d95ec.  v10:= v4 - v10 @kind int;
  #L1d95f0.  call `setFinalVertical`(v9, v10, v4) @signature `Lc/f/b/k/e;.setFinalVertical:(II)V` @kind virtual;
  #L1d95f6.  call `a`(v9, v14) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;)V` @kind static;
  #L1d95fc.  goto L1d9466;
  #L1d9600.  v10:= v9.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d9604.  if v4 != v10 then goto L1d9466;
  #L1d9608.  v4:= v9.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d960c.  v4:= v4.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d9610.  if v4 == 0 then goto L1d9466;
  #L1d9614.  call temp:= `hasFinalValue`(v4) @signature `Lc/f/b/k/d;.hasFinalValue:()Z` @kind virtual;
  #L1d961a.  v4:= temp;
  #L1d961c.  if v4 == 0 then goto L1d9466;
  #L1d9620.  call `a`(v14, v9) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/n/b$b;Lc/f/b/k/e;)V` @kind static;
  #L1d9626.  goto L1d9466;
  #L1d962a.  v0:= instanceof @variable v13 @type ^`c.f.b.k.h` @kind boolean;
  #L1d962e.  if v0 == 0 then goto L1d9634;
  #L1d9632.  return @kind void;
  #L1d9634.  call temp:= `getDependents`(v1) @signature `Lc/f/b/k/d;.getDependents:()Ljava/util/HashSet;` @kind virtual;
  #L1d963a.  v0:= temp @kind object;
  #L1d963c.  if v0 == 0 then goto L1d9814;
  #L1d9640.  call temp:= `hasFinalValue`(v1) @signature `Lc/f/b/k/d;.hasFinalValue:()Z` @kind virtual;
  #L1d9646.  v0:= temp;
  #L1d9648.  if v0 == 0 then goto L1d9814;
  #L1d964c.  call temp:= `getDependents`(v1) @signature `Lc/f/b/k/d;.getDependents:()Ljava/util/HashSet;` @kind virtual;
  #L1d9652.  v0:= temp @kind object;
  #L1d9654.  call temp:= `iterator`(v0) @signature `Ljava/util/HashSet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1d965a.  v0:= temp @kind object;
  #L1d965c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d9662.  v1:= temp;
  #L1d9664.  if v1 == 0 then goto L1d9814;
  #L1d9668.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d966e.  v1:= temp @kind object;
  #L1d9670.  v1:= (`c.f.b.k.d`) v1 @kind object;
  #L1d9674.  v2:= v1.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1d9678.  call temp:= `a`(v2) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;)Z` @kind static;
  #L1d967e.  v4:= temp;
  #L1d9680.  call temp:= `isMeasureRequested`(v2) @signature `Lc/f/b/k/e;.isMeasureRequested:()Z` @kind virtual;
  #L1d9686.  v9:= temp;
  #L1d9688.  if v9 == 0 then goto L1d96a4;
  #L1d968c.  if v4 == 0 then goto L1d96a4;
  #L1d9690.  v9:= new `c.f.b.k.n.b$a`;
  #L1d9694.  call `<init>`(v9) @signature `Lc/f/b/k/n/b$a;.<init>:()V` @kind direct;
  #L1d969a.  v10:= `@@c.f.b.k.n.b$a.k` @type ^`int`;
  #L1d969e.  call temp:= `measure`(v2, v14, v9, v10) @signature `Lc/f/b/k/f;.measure:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Lc/f/b/k/n/b$a;I)Z` @kind static;
  #L1d96a4.  v9:= v2.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d96a8.  if v1 != v9 then goto L1d96c4;
  #L1d96ac.  v9:= v2.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d96b0.  v9:= v9.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d96b4.  if v9 == 0 then goto L1d96c4;
  #L1d96b8.  call temp:= `hasFinalValue`(v9) @signature `Lc/f/b/k/d;.hasFinalValue:()Z` @kind virtual;
  #L1d96be.  v9:= temp;
  #L1d96c0.  if v9 != 0 then goto L1d96e4;
  #L1d96c4.  v9:= v2.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d96c8.  if v1 != v9 then goto L1d96e8;
  #L1d96cc.  v9:= v2.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d96d0.  v9:= v9.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d96d4.  if v9 == 0 then goto L1d96e8;
  #L1d96d8.  call temp:= `hasFinalValue`(v9) @signature `Lc/f/b/k/d;.hasFinalValue:()Z` @kind virtual;
  #L1d96de.  v9:= temp;
  #L1d96e0.  if v9 == 0 then goto L1d96e8;
  #L1d96e4.  v9:= 1I;
  #L1d96e6.  goto L1d96ea;
  #L1d96e8.  v9:= 0I;
  #L1d96ea.  call temp:= `getVerticalDimensionBehaviour`(v2) @signature `Lc/f/b/k/e;.getVerticalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d96f0.  v10:= temp @kind object;
  #L1d96f2.  v11:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d96f6.  if v10 != v11 then goto L1d9776;
  #L1d96fa.  if v4 == 0 then goto L1d9700;
  #L1d96fe.  goto L1d9776;
  #L1d9700.  call temp:= `getVerticalDimensionBehaviour`(v2) @signature `Lc/f/b/k/e;.getVerticalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d9706.  v1:= temp @kind object;
  #L1d9708.  v4:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d970c.  if v1 != v4 then goto L1d965c;
  #L1d9710.  v1:= v2.`c.f.b.k.e.u` @type ^`int`;
  #L1d9714.  if v1 < 0 then goto L1d965c;
  #L1d9718.  v1:= v2.`c.f.b.k.e.t` @type ^`int`;
  #L1d971c.  if v1 < 0 then goto L1d965c;
  #L1d9720.  call temp:= `getVisibility`(v2) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d9726.  v1:= temp;
  #L1d9728.  if v1 == v6 then goto L1d9744;
  #L1d972c.  v1:= v2.`c.f.b.k.e.o` @type ^`int`;
  #L1d9730.  if v1 != 0 then goto L1d965c;
  #L1d9734.  call temp:= `getDimensionRatio`(v2) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1d973a.  v1:= temp;
  #L1d973c.  v1:= fcmpl(v1, v5);
  #L1d9740.  if v1 != 0 then goto L1d965c;
  #L1d9744.  call temp:= `isInVerticalChain`(v2) @signature `Lc/f/b/k/e;.isInVerticalChain:()Z` @kind virtual;
  #L1d974a.  v1:= temp;
  #L1d974c.  if v1 != 0 then goto L1d965c;
  #L1d9750.  call temp:= `isInVirtualLayout`(v2) @signature `Lc/f/b/k/e;.isInVirtualLayout:()Z` @kind virtual;
  #L1d9756.  v1:= temp;
  #L1d9758.  if v1 != 0 then goto L1d965c;
  #L1d975c.  if v9 == 0 then goto L1d965c;
  #L1d9760.  call temp:= `isInVerticalChain`(v2) @signature `Lc/f/b/k/e;.isInVerticalChain:()Z` @kind virtual;
  #L1d9766.  v1:= temp;
  #L1d9768.  if v1 != 0 then goto L1d965c;
  #L1d976c.  call `a`(v13, v14, v2) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Lc/f/b/k/e;)V` @kind static;
  #L1d9772.  goto L1d965c;
  #L1d9776.  call temp:= `isMeasureRequested`(v2) @signature `Lc/f/b/k/e;.isMeasureRequested:()Z` @kind virtual;
  #L1d977c.  v4:= temp;
  #L1d977e.  if v4 == 0 then goto L1d9786;
  #L1d9782.  goto L1d965c;
  #L1d9786.  v4:= v2.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d978a.  if v1 != v4 then goto L1d97be;
  #L1d978e.  v10:= v2.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d9792.  v10:= v10.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d9796.  if v10 != 0 then goto L1d97be;
  #L1d979a.  call temp:= `getMargin`(v4) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d97a0.  v1:= temp;
  #L1d97a2.  v1:= v1 + v3 @kind int;
  #L1d97a4.  call temp:= `getHeight`(v2) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d97aa.  v4:= temp;
  #L1d97ac.  v4:= v4 + v1 @kind int;
  #L1d97ae.  call `setFinalVertical`(v2, v1, v4) @signature `Lc/f/b/k/e;.setFinalVertical:(II)V` @kind virtual;
  #L1d97b4.  call `a`(v2, v14) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;)V` @kind static;
  #L1d97ba.  goto L1d965c;
  #L1d97be.  v4:= v2.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d97c2.  if v1 != v4 then goto L1d97fa;
  #L1d97c6.  v1:= v2.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d97ca.  v1:= v1.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d97ce.  if v1 != 0 then goto L1d97fa;
  #L1d97d2.  call temp:= `getMargin`(v4) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d97d8.  v1:= temp;
  #L1d97da.  v1:= v3 - v1 @kind int;
  #L1d97de.  call temp:= `getHeight`(v2) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d97e4.  v4:= temp;
  #L1d97e6.  v4:= v1 - v4 @kind int;
  #L1d97ea.  call `setFinalVertical`(v2, v4, v1) @signature `Lc/f/b/k/e;.setFinalVertical:(II)V` @kind virtual;
  #L1d97f0.  call `a`(v2, v14) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;)V` @kind static;
  #L1d97f6.  goto L1d965c;
  #L1d97fa.  if v9 == 0 then goto L1d965c;
  #L1d97fe.  call temp:= `isInVerticalChain`(v2) @signature `Lc/f/b/k/e;.isInVerticalChain:()Z` @kind virtual;
  #L1d9804.  v1:= temp;
  #L1d9806.  if v1 != 0 then goto L1d965c;
  #L1d980a.  call `a`(v14, v2) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/n/b$b;Lc/f/b/k/e;)V` @kind static;
  #L1d9810.  goto L1d965c;
  #L1d9814.  v0:= `@@c.f.b.k.d$b.k` @type ^`c.f.b.k.d$b` @kind object;
  #L1d9818.  call temp:= `getAnchor`(v13, v0) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1d981e.  v13:= temp @kind object;
  #L1d9820.  call temp:= `getDependents`(v13) @signature `Lc/f/b/k/d;.getDependents:()Ljava/util/HashSet;` @kind virtual;
  #L1d9826.  v0:= temp @kind object;
  #L1d9828.  if v0 == 0 then goto L1d98d0;
  #L1d982c.  call temp:= `hasFinalValue`(v13) @signature `Lc/f/b/k/d;.hasFinalValue:()Z` @kind virtual;
  #L1d9832.  v0:= temp;
  #L1d9834.  if v0 == 0 then goto L1d98d0;
  #L1d9838.  call temp:= `getFinalValue`(v13) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1d983e.  v0:= temp;
  #L1d9840.  call temp:= `getDependents`(v13) @signature `Lc/f/b/k/d;.getDependents:()Ljava/util/HashSet;` @kind virtual;
  #L1d9846.  v13:= temp @kind object;
  #L1d9848.  call temp:= `iterator`(v13) @signature `Ljava/util/HashSet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1d984e.  v13:= temp @kind object;
  #L1d9850.  call temp:= `hasNext`(v13) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d9856.  v1:= temp;
  #L1d9858.  if v1 == 0 then goto L1d98d0;
  #L1d985c.  call temp:= `next`(v13) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d9862.  v1:= temp @kind object;
  #L1d9864.  v1:= (`c.f.b.k.d`) v1 @kind object;
  #L1d9868.  v2:= v1.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1d986c.  call temp:= `a`(v2) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;)Z` @kind static;
  #L1d9872.  v3:= temp;
  #L1d9874.  call temp:= `isMeasureRequested`(v2) @signature `Lc/f/b/k/e;.isMeasureRequested:()Z` @kind virtual;
  #L1d987a.  v4:= temp;
  #L1d987c.  if v4 == 0 then goto L1d9898;
  #L1d9880.  if v3 == 0 then goto L1d9898;
  #L1d9884.  v4:= new `c.f.b.k.n.b$a`;
  #L1d9888.  call `<init>`(v4) @signature `Lc/f/b/k/n/b$a;.<init>:()V` @kind direct;
  #L1d988e.  v5:= `@@c.f.b.k.n.b$a.k` @type ^`int`;
  #L1d9892.  call temp:= `measure`(v2, v14, v4, v5) @signature `Lc/f/b/k/f;.measure:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Lc/f/b/k/n/b$a;I)Z` @kind static;
  #L1d9898.  call temp:= `getVerticalDimensionBehaviour`(v2) @signature `Lc/f/b/k/e;.getVerticalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d989e.  v4:= temp @kind object;
  #L1d98a0.  v5:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d98a4.  if v4 != v5 then goto L1d98ac;
  #L1d98a8.  if v3 == 0 then goto L1d9850;
  #L1d98ac.  call temp:= `isMeasureRequested`(v2) @signature `Lc/f/b/k/e;.isMeasureRequested:()Z` @kind virtual;
  #L1d98b2.  v3:= temp;
  #L1d98b4.  if v3 == 0 then goto L1d98ba;
  #L1d98b8.  goto L1d9850;
  #L1d98ba.  v3:= v2.`c.f.b.k.e.J` @type ^`c.f.b.k.d` @kind object;
  #L1d98be.  if v1 != v3 then goto L1d9850;
  #L1d98c2.  call `setFinalBaseline`(v2, v0) @signature `Lc/f/b/k/e;.setFinalBaseline:(I)V` @kind virtual;
  #L1d98c8.  call `a`(v2, v14) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;)V` @kind static;
  #L1d98ce.  goto L1d9850;
  #L1d98d0.  return @kind void;
  #L1d98d2.  v13:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d98d4.  throw v13;
  catch `java.lang.Throwable` @[L1d98c8..L1d98ce] goto L1d98d2;
}
procedure `void` `a`(`c.f.b.k.e` v7 @kind object, `c.f.b.k.n.b$b` v8 @kind object, `c.f.b.k.e` v9 @kind object) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Lc/f/b/k/e;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1d8f6c.  call temp:= `getVerticalBiasPercent`(v9) @signature `Lc/f/b/k/e;.getVerticalBiasPercent:()F` @kind virtual;
  #L1d8f72.  v0:= temp;
  #L1d8f74.  v1:= v9.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d8f78.  v1:= v1.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d8f7c.  call temp:= `getFinalValue`(v1) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1d8f82.  v1:= temp;
  #L1d8f84.  v2:= v9.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d8f88.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d8f8e.  v2:= temp;
  #L1d8f90.  v1:= v1 + v2 @kind int;
  #L1d8f92.  v2:= v9.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d8f96.  v2:= v2.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d8f9a.  call temp:= `getFinalValue`(v2) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1d8fa0.  v2:= temp;
  #L1d8fa2.  v3:= v9.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d8fa6.  call temp:= `getMargin`(v3) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d8fac.  v3:= temp;
  #L1d8fae.  v2:= v2 - v3 @kind int;
  #L1d8fb0.  if v2 < v1 then goto L1d904c;
  #L1d8fb4.  call temp:= `getHeight`(v9) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d8fba.  v3:= temp;
  #L1d8fbc.  call temp:= `getVisibility`(v9) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d8fc2.  v4:= temp;
  #L1d8fc4.  v5:= 8I;
  #L1d8fc8.  v6:= 0.5F;
  #L1d8fcc.  if v4 == v5 then goto L1d902e;
  #L1d8fd0.  v4:= v9.`c.f.b.k.e.o` @type ^`int`;
  #L1d8fd4.  v5:= 2I;
  #L1d8fd6.  if v4 != v5 then goto L1d900a;
  #L1d8fda.  v3:= instanceof @variable v7 @type ^`c.f.b.k.f` @kind boolean;
  #L1d8fde.  if v3 == 0 then goto L1d8fec;
  #L1d8fe2.  call temp:= `getHeight`(v7) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d8fe8.  v7:= temp;
  #L1d8fea.  goto L1d8ffc;
  #L1d8fec.  call temp:= `getParent`(v7) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1d8ff2.  v7:= temp @kind object;
  #L1d8ff4.  call temp:= `getHeight`(v7) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d8ffa.  v7:= temp;
  #L1d8ffc.  v3:= v0 * v6 @kind float;
  #L1d9000.  v7:= (`float`) v7 @kind i2f;
  #L1d9002.  v3:= v3 * v7 @kind float;
  #L1d9006.  v3:= (`int`) v3 @kind f2i;
  #L1d9008.  goto L1d9012;
  #L1d900a.  if v4 != 0 then goto L1d9012;
  #L1d900e.  v3:= v2 - v1 @kind int;
  #L1d9012.  v7:= v9.`c.f.b.k.e.t` @type ^`int`;
  #L1d9016.  call temp:= `max`(v7, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1d901c.  v3:= temp;
  #L1d901e.  v7:= v9.`c.f.b.k.e.u` @type ^`int`;
  #L1d9022.  if v7 <= 0 then goto L1d902e;
  #L1d9026.  call temp:= `min`(v7, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d902c.  v3:= temp;
  #L1d902e.  v2:= v2 - v1 @kind int;
  #L1d9030.  v2:= v2 - v3 @kind int;
  #L1d9032.  v7:= (`float`) v2 @kind i2f;
  #L1d9034.  v0:= v0 * v7 @kind float;
  #L1d9038.  v0:= v0 + v6 @kind float;
  #L1d903a.  v7:= (`int`) v0 @kind f2i;
  #L1d903c.  v1:= v1 + v7 @kind int;
  #L1d903e.  v3:= v3 + v1 @kind int;
  #L1d9040.  call `setFinalVertical`(v9, v1, v3) @signature `Lc/f/b/k/e;.setFinalVertical:(II)V` @kind virtual;
  #L1d9046.  call `a`(v9, v8) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;)V` @kind static;
  #L1d904c.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.e` v7 @kind object, `c.f.b.k.n.b$b` v8 @kind object, `c.f.b.k.e` v9 @kind object, `boolean` v10 ) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Lc/f/b/k/e;Z)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1d8dc4.  call temp:= `getHorizontalBiasPercent`(v9) @signature `Lc/f/b/k/e;.getHorizontalBiasPercent:()F` @kind virtual;
  #L1d8dca.  v0:= temp;
  #L1d8dcc.  v1:= v9.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d8dd0.  v1:= v1.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d8dd4.  call temp:= `getFinalValue`(v1) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1d8dda.  v1:= temp;
  #L1d8ddc.  v2:= v9.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d8de0.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d8de6.  v2:= temp;
  #L1d8de8.  v1:= v1 + v2 @kind int;
  #L1d8dea.  v2:= v9.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d8dee.  v2:= v2.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d8df2.  call temp:= `getFinalValue`(v2) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1d8df8.  v2:= temp;
  #L1d8dfa.  v3:= v9.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d8dfe.  call temp:= `getMargin`(v3) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d8e04.  v3:= temp;
  #L1d8e06.  v2:= v2 - v3 @kind int;
  #L1d8e08.  if v2 < v1 then goto L1d8eac;
  #L1d8e0c.  call temp:= `getWidth`(v9) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d8e12.  v3:= temp;
  #L1d8e14.  call temp:= `getVisibility`(v9) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d8e1a.  v4:= temp;
  #L1d8e1c.  v5:= 8I;
  #L1d8e20.  v6:= 0.5F;
  #L1d8e24.  if v4 == v5 then goto L1d8e8e;
  #L1d8e28.  v4:= v9.`c.f.b.k.e.n` @type ^`int`;
  #L1d8e2c.  v5:= 2I;
  #L1d8e2e.  if v4 != v5 then goto L1d8e6a;
  #L1d8e32.  v3:= instanceof @variable v7 @type ^`c.f.b.k.f` @kind boolean;
  #L1d8e36.  if v3 == 0 then goto L1d8e44;
  #L1d8e3a.  call temp:= `getWidth`(v7) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d8e40.  v7:= temp;
  #L1d8e42.  goto L1d8e54;
  #L1d8e44.  call temp:= `getParent`(v7) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1d8e4a.  v7:= temp @kind object;
  #L1d8e4c.  call temp:= `getWidth`(v7) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d8e52.  v7:= temp;
  #L1d8e54.  call temp:= `getHorizontalBiasPercent`(v9) @signature `Lc/f/b/k/e;.getHorizontalBiasPercent:()F` @kind virtual;
  #L1d8e5a.  v3:= temp;
  #L1d8e5c.  v3:= v3 * v6 @kind float;
  #L1d8e60.  v7:= (`float`) v7 @kind i2f;
  #L1d8e62.  v3:= v3 * v7 @kind float;
  #L1d8e66.  v3:= (`int`) v3 @kind f2i;
  #L1d8e68.  goto L1d8e72;
  #L1d8e6a.  if v4 != 0 then goto L1d8e72;
  #L1d8e6e.  v3:= v2 - v1 @kind int;
  #L1d8e72.  v7:= v9.`c.f.b.k.e.q` @type ^`int`;
  #L1d8e76.  call temp:= `max`(v7, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1d8e7c.  v3:= temp;
  #L1d8e7e.  v7:= v9.`c.f.b.k.e.r` @type ^`int`;
  #L1d8e82.  if v7 <= 0 then goto L1d8e8e;
  #L1d8e86.  call temp:= `min`(v7, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d8e8c.  v3:= temp;
  #L1d8e8e.  v2:= v2 - v1 @kind int;
  #L1d8e90.  v2:= v2 - v3 @kind int;
  #L1d8e92.  v7:= (`float`) v2 @kind i2f;
  #L1d8e94.  v0:= v0 * v7 @kind float;
  #L1d8e98.  v0:= v0 + v6 @kind float;
  #L1d8e9a.  v7:= (`int`) v0 @kind f2i;
  #L1d8e9c.  v1:= v1 + v7 @kind int;
  #L1d8e9e.  v3:= v3 + v1 @kind int;
  #L1d8ea0.  call `setFinalHorizontal`(v9, v1, v3) @signature `Lc/f/b/k/e;.setFinalHorizontal:(II)V` @kind virtual;
  #L1d8ea6.  call `a`(v9, v8, v10) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Z)V` @kind static;
  #L1d8eac.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.e` v13 @kind object, `c.f.b.k.n.b$b` v14 @kind object, `boolean` v15 ) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Z)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L1d888c.  v0:= instanceof @variable v13 @type ^`c.f.b.k.f` @kind boolean;
  #L1d8890.  if v0 != 0 then goto L1d88c0;
  #L1d8894.  call temp:= `isMeasureRequested`(v13) @signature `Lc/f/b/k/e;.isMeasureRequested:()Z` @kind virtual;
  #L1d889a.  v0:= temp;
  #L1d889c.  if v0 == 0 then goto L1d88c0;
  #L1d88a0.  call temp:= `a`(v13) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;)Z` @kind static;
  #L1d88a6.  v0:= temp;
  #L1d88a8.  if v0 == 0 then goto L1d88c0;
  #L1d88ac.  v0:= new `c.f.b.k.n.b$a`;
  #L1d88b0.  call `<init>`(v0) @signature `Lc/f/b/k/n/b$a;.<init>:()V` @kind direct;
  #L1d88b6.  v1:= `@@c.f.b.k.n.b$a.k` @type ^`int`;
  #L1d88ba.  call temp:= `measure`(v13, v14, v0, v1) @signature `Lc/f/b/k/f;.measure:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Lc/f/b/k/n/b$a;I)Z` @kind static;
  #L1d88c0.  v0:= `@@c.f.b.k.d$b.g` @type ^`c.f.b.k.d$b` @kind object;
  #L1d88c4.  call temp:= `getAnchor`(v13, v0) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1d88ca.  v0:= temp @kind object;
  #L1d88cc.  v1:= `@@c.f.b.k.d$b.i` @type ^`c.f.b.k.d$b` @kind object;
  #L1d88d0.  call temp:= `getAnchor`(v13, v1) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1d88d6.  v1:= temp @kind object;
  #L1d88d8.  call temp:= `getFinalValue`(v0) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1d88de.  v2:= temp;
  #L1d88e0.  call temp:= `getFinalValue`(v1) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1d88e6.  v3:= temp;
  #L1d88e8.  call temp:= `getDependents`(v0) @signature `Lc/f/b/k/d;.getDependents:()Ljava/util/HashSet;` @kind virtual;
  #L1d88ee.  v4:= temp @kind object;
  #L1d88f0.  v5:= 0I;
  #L1d88f2.  v6:= 8I;
  #L1d88f6.  v7:= 1I;
  #L1d88f8.  v8:= 0I;
  #L1d88fa.  if v4 == 0 then goto L1d8aee;
  #L1d88fe.  call temp:= `hasFinalValue`(v0) @signature `Lc/f/b/k/d;.hasFinalValue:()Z` @kind virtual;
  #L1d8904.  v4:= temp;
  #L1d8906.  if v4 == 0 then goto L1d8aee;
  #L1d890a.  call temp:= `getDependents`(v0) @signature `Lc/f/b/k/d;.getDependents:()Ljava/util/HashSet;` @kind virtual;
  #L1d8910.  v0:= temp @kind object;
  #L1d8912.  call temp:= `iterator`(v0) @signature `Ljava/util/HashSet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1d8918.  v0:= temp @kind object;
  #L1d891a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d8920.  v4:= temp;
  #L1d8922.  if v4 == 0 then goto L1d8aee;
  #L1d8926.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d892c.  v4:= temp @kind object;
  #L1d892e.  v4:= (`c.f.b.k.d`) v4 @kind object;
  #L1d8932.  v9:= v4.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1d8936.  call temp:= `a`(v9) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;)Z` @kind static;
  #L1d893c.  v10:= temp;
  #L1d893e.  call temp:= `isMeasureRequested`(v9) @signature `Lc/f/b/k/e;.isMeasureRequested:()Z` @kind virtual;
  #L1d8944.  v11:= temp;
  #L1d8946.  if v11 == 0 then goto L1d8962;
  #L1d894a.  if v10 == 0 then goto L1d8962;
  #L1d894e.  v11:= new `c.f.b.k.n.b$a`;
  #L1d8952.  call `<init>`(v11) @signature `Lc/f/b/k/n/b$a;.<init>:()V` @kind direct;
  #L1d8958.  v12:= `@@c.f.b.k.n.b$a.k` @type ^`int`;
  #L1d895c.  call temp:= `measure`(v9, v14, v11, v12) @signature `Lc/f/b/k/f;.measure:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Lc/f/b/k/n/b$a;I)Z` @kind static;
  #L1d8962.  call temp:= `getHorizontalDimensionBehaviour`(v9) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d8968.  v11:= temp @kind object;
  #L1d896a.  v12:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d896e.  if v11 != v12 then goto L1d8a34;
  #L1d8972.  if v10 == 0 then goto L1d8978;
  #L1d8976.  goto L1d8a34;
  #L1d8978.  call temp:= `getHorizontalDimensionBehaviour`(v9) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d897e.  v10:= temp @kind object;
  #L1d8980.  v11:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d8984.  if v10 != v11 then goto L1d891a;
  #L1d8988.  v10:= v9.`c.f.b.k.e.r` @type ^`int`;
  #L1d898c.  if v10 < 0 then goto L1d891a;
  #L1d8990.  v10:= v9.`c.f.b.k.e.q` @type ^`int`;
  #L1d8994.  if v10 < 0 then goto L1d891a;
  #L1d8998.  call temp:= `getVisibility`(v9) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d899e.  v10:= temp;
  #L1d89a0.  if v10 == v6 then goto L1d89bc;
  #L1d89a4.  v10:= v9.`c.f.b.k.e.n` @type ^`int`;
  #L1d89a8.  if v10 != 0 then goto L1d891a;
  #L1d89ac.  call temp:= `getDimensionRatio`(v9) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1d89b2.  v10:= temp;
  #L1d89b4.  v10:= fcmpl(v10, v5);
  #L1d89b8.  if v10 != 0 then goto L1d891a;
  #L1d89bc.  call temp:= `isInHorizontalChain`(v9) @signature `Lc/f/b/k/e;.isInHorizontalChain:()Z` @kind virtual;
  #L1d89c2.  v10:= temp;
  #L1d89c4.  if v10 != 0 then goto L1d891a;
  #L1d89c8.  call temp:= `isInVirtualLayout`(v9) @signature `Lc/f/b/k/e;.isInVirtualLayout:()Z` @kind virtual;
  #L1d89ce.  v10:= temp;
  #L1d89d0.  if v10 != 0 then goto L1d891a;
  #L1d89d4.  v10:= v9.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d89d8.  if v4 != v10 then goto L1d89f4;
  #L1d89dc.  v10:= v9.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d89e0.  v10:= v10.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d89e4.  if v10 == 0 then goto L1d89f4;
  #L1d89e8.  call temp:= `hasFinalValue`(v10) @signature `Lc/f/b/k/d;.hasFinalValue:()Z` @kind virtual;
  #L1d89ee.  v10:= temp;
  #L1d89f0.  if v10 != 0 then goto L1d8a14;
  #L1d89f4.  v10:= v9.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d89f8.  if v4 != v10 then goto L1d8a18;
  #L1d89fc.  v4:= v9.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d8a00.  v4:= v4.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d8a04.  if v4 == 0 then goto L1d8a18;
  #L1d8a08.  call temp:= `hasFinalValue`(v4) @signature `Lc/f/b/k/d;.hasFinalValue:()Z` @kind virtual;
  #L1d8a0e.  v4:= temp;
  #L1d8a10.  if v4 == 0 then goto L1d8a18;
  #L1d8a14.  v4:= 1I;
  #L1d8a16.  goto L1d8a1a;
  #L1d8a18.  v4:= 0I;
  #L1d8a1a.  if v4 == 0 then goto L1d891a;
  #L1d8a1e.  call temp:= `isInHorizontalChain`(v9) @signature `Lc/f/b/k/e;.isInHorizontalChain:()Z` @kind virtual;
  #L1d8a24.  v4:= temp;
  #L1d8a26.  if v4 != 0 then goto L1d891a;
  #L1d8a2a.  call `a`(v13, v14, v9, v15) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Lc/f/b/k/e;Z)V` @kind static;
  #L1d8a30.  goto L1d891a;
  #L1d8a34.  call temp:= `isMeasureRequested`(v9) @signature `Lc/f/b/k/e;.isMeasureRequested:()Z` @kind virtual;
  #L1d8a3a.  v10:= temp;
  #L1d8a3c.  if v10 == 0 then goto L1d8a44;
  #L1d8a40.  goto L1d891a;
  #L1d8a44.  v10:= v9.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d8a48.  if v4 != v10 then goto L1d8a7c;
  #L1d8a4c.  v11:= v9.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d8a50.  v11:= v11.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d8a54.  if v11 != 0 then goto L1d8a7c;
  #L1d8a58.  call temp:= `getMargin`(v10) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d8a5e.  v4:= temp;
  #L1d8a60.  v4:= v4 + v2 @kind int;
  #L1d8a62.  call temp:= `getWidth`(v9) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d8a68.  v10:= temp;
  #L1d8a6a.  v10:= v10 + v4 @kind int;
  #L1d8a6c.  call `setFinalHorizontal`(v9, v4, v10) @signature `Lc/f/b/k/e;.setFinalHorizontal:(II)V` @kind virtual;
  #L1d8a72.  call `a`(v9, v14, v15) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Z)V` @kind static;
  #L1d8a78.  goto L1d891a;
  #L1d8a7c.  v10:= v9.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d8a80.  if v4 != v10 then goto L1d8ab8;
  #L1d8a84.  v11:= v9.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d8a88.  v11:= v11.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d8a8c.  if v11 != 0 then goto L1d8ab8;
  #L1d8a90.  call temp:= `getMargin`(v10) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d8a96.  v4:= temp;
  #L1d8a98.  v4:= v2 - v4 @kind int;
  #L1d8a9c.  call temp:= `getWidth`(v9) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d8aa2.  v10:= temp;
  #L1d8aa4.  v10:= v4 - v10 @kind int;
  #L1d8aa8.  call `setFinalHorizontal`(v9, v10, v4) @signature `Lc/f/b/k/e;.setFinalHorizontal:(II)V` @kind virtual;
  #L1d8aae.  call `a`(v9, v14, v15) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Z)V` @kind static;
  #L1d8ab4.  goto L1d891a;
  #L1d8ab8.  v10:= v9.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d8abc.  if v4 != v10 then goto L1d891a;
  #L1d8ac0.  v4:= v9.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d8ac4.  v4:= v4.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d8ac8.  if v4 == 0 then goto L1d891a;
  #L1d8acc.  call temp:= `hasFinalValue`(v4) @signature `Lc/f/b/k/d;.hasFinalValue:()Z` @kind virtual;
  #L1d8ad2.  v4:= temp;
  #L1d8ad4.  if v4 == 0 then goto L1d891a;
  #L1d8ad8.  call temp:= `isInHorizontalChain`(v9) @signature `Lc/f/b/k/e;.isInHorizontalChain:()Z` @kind virtual;
  #L1d8ade.  v4:= temp;
  #L1d8ae0.  if v4 != 0 then goto L1d891a;
  #L1d8ae4.  call `a`(v14, v9, v15) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/n/b$b;Lc/f/b/k/e;Z)V` @kind static;
  #L1d8aea.  goto L1d891a;
  #L1d8aee.  v0:= instanceof @variable v13 @type ^`c.f.b.k.h` @kind boolean;
  #L1d8af2.  if v0 == 0 then goto L1d8af8;
  #L1d8af6.  return @kind void;
  #L1d8af8.  call temp:= `getDependents`(v1) @signature `Lc/f/b/k/d;.getDependents:()Ljava/util/HashSet;` @kind virtual;
  #L1d8afe.  v0:= temp @kind object;
  #L1d8b00.  if v0 == 0 then goto L1d8cd8;
  #L1d8b04.  call temp:= `hasFinalValue`(v1) @signature `Lc/f/b/k/d;.hasFinalValue:()Z` @kind virtual;
  #L1d8b0a.  v0:= temp;
  #L1d8b0c.  if v0 == 0 then goto L1d8cd8;
  #L1d8b10.  call temp:= `getDependents`(v1) @signature `Lc/f/b/k/d;.getDependents:()Ljava/util/HashSet;` @kind virtual;
  #L1d8b16.  v0:= temp @kind object;
  #L1d8b18.  call temp:= `iterator`(v0) @signature `Ljava/util/HashSet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1d8b1e.  v0:= temp @kind object;
  #L1d8b20.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d8b26.  v1:= temp;
  #L1d8b28.  if v1 == 0 then goto L1d8cd8;
  #L1d8b2c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d8b32.  v1:= temp @kind object;
  #L1d8b34.  v1:= (`c.f.b.k.d`) v1 @kind object;
  #L1d8b38.  v2:= v1.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1d8b3c.  call temp:= `a`(v2) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;)Z` @kind static;
  #L1d8b42.  v4:= temp;
  #L1d8b44.  call temp:= `isMeasureRequested`(v2) @signature `Lc/f/b/k/e;.isMeasureRequested:()Z` @kind virtual;
  #L1d8b4a.  v9:= temp;
  #L1d8b4c.  if v9 == 0 then goto L1d8b68;
  #L1d8b50.  if v4 == 0 then goto L1d8b68;
  #L1d8b54.  v9:= new `c.f.b.k.n.b$a`;
  #L1d8b58.  call `<init>`(v9) @signature `Lc/f/b/k/n/b$a;.<init>:()V` @kind direct;
  #L1d8b5e.  v10:= `@@c.f.b.k.n.b$a.k` @type ^`int`;
  #L1d8b62.  call temp:= `measure`(v2, v14, v9, v10) @signature `Lc/f/b/k/f;.measure:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Lc/f/b/k/n/b$a;I)Z` @kind static;
  #L1d8b68.  v9:= v2.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d8b6c.  if v1 != v9 then goto L1d8b88;
  #L1d8b70.  v9:= v2.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d8b74.  v9:= v9.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d8b78.  if v9 == 0 then goto L1d8b88;
  #L1d8b7c.  call temp:= `hasFinalValue`(v9) @signature `Lc/f/b/k/d;.hasFinalValue:()Z` @kind virtual;
  #L1d8b82.  v9:= temp;
  #L1d8b84.  if v9 != 0 then goto L1d8ba8;
  #L1d8b88.  v9:= v2.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d8b8c.  if v1 != v9 then goto L1d8bac;
  #L1d8b90.  v9:= v2.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d8b94.  v9:= v9.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d8b98.  if v9 == 0 then goto L1d8bac;
  #L1d8b9c.  call temp:= `hasFinalValue`(v9) @signature `Lc/f/b/k/d;.hasFinalValue:()Z` @kind virtual;
  #L1d8ba2.  v9:= temp;
  #L1d8ba4.  if v9 == 0 then goto L1d8bac;
  #L1d8ba8.  v9:= 1I;
  #L1d8baa.  goto L1d8bae;
  #L1d8bac.  v9:= 0I;
  #L1d8bae.  call temp:= `getHorizontalDimensionBehaviour`(v2) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d8bb4.  v10:= temp @kind object;
  #L1d8bb6.  v11:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d8bba.  if v10 != v11 then goto L1d8c3a;
  #L1d8bbe.  if v4 == 0 then goto L1d8bc4;
  #L1d8bc2.  goto L1d8c3a;
  #L1d8bc4.  call temp:= `getHorizontalDimensionBehaviour`(v2) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d8bca.  v1:= temp @kind object;
  #L1d8bcc.  v4:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d8bd0.  if v1 != v4 then goto L1d8b20;
  #L1d8bd4.  v1:= v2.`c.f.b.k.e.r` @type ^`int`;
  #L1d8bd8.  if v1 < 0 then goto L1d8b20;
  #L1d8bdc.  v1:= v2.`c.f.b.k.e.q` @type ^`int`;
  #L1d8be0.  if v1 < 0 then goto L1d8b20;
  #L1d8be4.  call temp:= `getVisibility`(v2) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d8bea.  v1:= temp;
  #L1d8bec.  if v1 == v6 then goto L1d8c08;
  #L1d8bf0.  v1:= v2.`c.f.b.k.e.n` @type ^`int`;
  #L1d8bf4.  if v1 != 0 then goto L1d8b20;
  #L1d8bf8.  call temp:= `getDimensionRatio`(v2) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1d8bfe.  v1:= temp;
  #L1d8c00.  v1:= fcmpl(v1, v5);
  #L1d8c04.  if v1 != 0 then goto L1d8b20;
  #L1d8c08.  call temp:= `isInHorizontalChain`(v2) @signature `Lc/f/b/k/e;.isInHorizontalChain:()Z` @kind virtual;
  #L1d8c0e.  v1:= temp;
  #L1d8c10.  if v1 != 0 then goto L1d8b20;
  #L1d8c14.  call temp:= `isInVirtualLayout`(v2) @signature `Lc/f/b/k/e;.isInVirtualLayout:()Z` @kind virtual;
  #L1d8c1a.  v1:= temp;
  #L1d8c1c.  if v1 != 0 then goto L1d8b20;
  #L1d8c20.  if v9 == 0 then goto L1d8b20;
  #L1d8c24.  call temp:= `isInHorizontalChain`(v2) @signature `Lc/f/b/k/e;.isInHorizontalChain:()Z` @kind virtual;
  #L1d8c2a.  v1:= temp;
  #L1d8c2c.  if v1 != 0 then goto L1d8b20;
  #L1d8c30.  call `a`(v13, v14, v2, v15) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Lc/f/b/k/e;Z)V` @kind static;
  #L1d8c36.  goto L1d8b20;
  #L1d8c3a.  call temp:= `isMeasureRequested`(v2) @signature `Lc/f/b/k/e;.isMeasureRequested:()Z` @kind virtual;
  #L1d8c40.  v4:= temp;
  #L1d8c42.  if v4 == 0 then goto L1d8c4a;
  #L1d8c46.  goto L1d8b20;
  #L1d8c4a.  v4:= v2.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d8c4e.  if v1 != v4 then goto L1d8c82;
  #L1d8c52.  v10:= v2.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d8c56.  v10:= v10.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d8c5a.  if v10 != 0 then goto L1d8c82;
  #L1d8c5e.  call temp:= `getMargin`(v4) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d8c64.  v1:= temp;
  #L1d8c66.  v1:= v1 + v3 @kind int;
  #L1d8c68.  call temp:= `getWidth`(v2) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d8c6e.  v4:= temp;
  #L1d8c70.  v4:= v4 + v1 @kind int;
  #L1d8c72.  call `setFinalHorizontal`(v2, v1, v4) @signature `Lc/f/b/k/e;.setFinalHorizontal:(II)V` @kind virtual;
  #L1d8c78.  call `a`(v2, v14, v15) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Z)V` @kind static;
  #L1d8c7e.  goto L1d8b20;
  #L1d8c82.  v4:= v2.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d8c86.  if v1 != v4 then goto L1d8cbe;
  #L1d8c8a.  v1:= v2.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d8c8e.  v1:= v1.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d8c92.  if v1 != 0 then goto L1d8cbe;
  #L1d8c96.  call temp:= `getMargin`(v4) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d8c9c.  v1:= temp;
  #L1d8c9e.  v1:= v3 - v1 @kind int;
  #L1d8ca2.  call temp:= `getWidth`(v2) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d8ca8.  v4:= temp;
  #L1d8caa.  v4:= v1 - v4 @kind int;
  #L1d8cae.  call `setFinalHorizontal`(v2, v4, v1) @signature `Lc/f/b/k/e;.setFinalHorizontal:(II)V` @kind virtual;
  #L1d8cb4.  call `a`(v2, v14, v15) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Z)V` @kind static;
  #L1d8cba.  goto L1d8b20;
  #L1d8cbe.  if v9 == 0 then goto L1d8b20;
  #L1d8cc2.  call temp:= `isInHorizontalChain`(v2) @signature `Lc/f/b/k/e;.isInHorizontalChain:()Z` @kind virtual;
  #L1d8cc8.  v1:= temp;
  #L1d8cca.  if v1 != 0 then goto L1d8b20;
  #L1d8cce.  call `a`(v14, v2, v15) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/n/b$b;Lc/f/b/k/e;Z)V` @kind static;
  #L1d8cd4.  goto L1d8b20;
  #L1d8cd8.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.n.b$b` v6 @kind object, `c.f.b.k.e` v7 @kind object) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/n/b$b;Lc/f/b/k/e;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1d8ec0.  call temp:= `getVerticalBiasPercent`(v7) @signature `Lc/f/b/k/e;.getVerticalBiasPercent:()F` @kind virtual;
  #L1d8ec6.  v0:= temp;
  #L1d8ec8.  v1:= v7.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d8ecc.  v1:= v1.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d8ed0.  call temp:= `getFinalValue`(v1) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1d8ed6.  v1:= temp;
  #L1d8ed8.  v2:= v7.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d8edc.  v2:= v2.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d8ee0.  call temp:= `getFinalValue`(v2) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1d8ee6.  v2:= temp;
  #L1d8ee8.  v3:= v7.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d8eec.  call temp:= `getMargin`(v3) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d8ef2.  v3:= temp;
  #L1d8ef4.  v3:= v3 + v1 @kind int;
  #L1d8ef6.  v4:= v7.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d8efa.  call temp:= `getMargin`(v4) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d8f00.  v4:= temp;
  #L1d8f02.  v4:= v2 - v4 @kind int;
  #L1d8f06.  v5:= 0.5F;
  #L1d8f0a.  if v1 != v2 then goto L1d8f14;
  #L1d8f0e.  v0:= 0.5F;
  #L1d8f12.  goto L1d8f18;
  #L1d8f14.  v1:= v3;
  #L1d8f16.  v2:= v4;
  #L1d8f18.  call temp:= `getHeight`(v7) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d8f1e.  v3:= temp;
  #L1d8f20.  v4:= v2 - v1 @kind int;
  #L1d8f24.  v4:= v4 - v3 @kind int;
  #L1d8f26.  if v1 <= v2 then goto L1d8f30;
  #L1d8f2a.  v4:= v1 - v2 @kind int;
  #L1d8f2e.  v4:= v4 - v3 @kind int;
  #L1d8f30.  v4:= (`float`) v4 @kind i2f;
  #L1d8f32.  v0:= v0 * v4 @kind float;
  #L1d8f36.  v0:= v0 + v5 @kind float;
  #L1d8f38.  v0:= (`int`) v0 @kind f2i;
  #L1d8f3a.  v4:= v1 + v0 @kind int;
  #L1d8f3e.  v5:= v4 + v3 @kind int;
  #L1d8f42.  if v1 <= v2 then goto L1d8f4e;
  #L1d8f46.  v4:= v1 - v0 @kind int;
  #L1d8f4a.  v5:= v4 - v3 @kind int;
  #L1d8f4e.  call `setFinalVertical`(v7, v4, v5) @signature `Lc/f/b/k/e;.setFinalVertical:(II)V` @kind virtual;
  #L1d8f54.  call `a`(v7, v6) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;)V` @kind static;
  #L1d8f5a.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.n.b$b` v6 @kind object, `c.f.b.k.e` v7 @kind object, `boolean` v8 ) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/n/b$b;Lc/f/b/k/e;Z)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1d8d1c.  call temp:= `getHorizontalBiasPercent`(v7) @signature `Lc/f/b/k/e;.getHorizontalBiasPercent:()F` @kind virtual;
  #L1d8d22.  v0:= temp;
  #L1d8d24.  v1:= v7.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d8d28.  v1:= v1.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d8d2c.  call temp:= `getFinalValue`(v1) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1d8d32.  v1:= temp;
  #L1d8d34.  v2:= v7.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d8d38.  v2:= v2.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1d8d3c.  call temp:= `getFinalValue`(v2) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1d8d42.  v2:= temp;
  #L1d8d44.  v3:= v7.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d8d48.  call temp:= `getMargin`(v3) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d8d4e.  v3:= temp;
  #L1d8d50.  v3:= v3 + v1 @kind int;
  #L1d8d52.  v4:= v7.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d8d56.  call temp:= `getMargin`(v4) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1d8d5c.  v4:= temp;
  #L1d8d5e.  v4:= v2 - v4 @kind int;
  #L1d8d62.  v5:= 0.5F;
  #L1d8d66.  if v1 != v2 then goto L1d8d70;
  #L1d8d6a.  v0:= 0.5F;
  #L1d8d6e.  goto L1d8d74;
  #L1d8d70.  v1:= v3;
  #L1d8d72.  v2:= v4;
  #L1d8d74.  call temp:= `getWidth`(v7) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d8d7a.  v3:= temp;
  #L1d8d7c.  v4:= v2 - v1 @kind int;
  #L1d8d80.  v4:= v4 - v3 @kind int;
  #L1d8d82.  if v1 <= v2 then goto L1d8d8c;
  #L1d8d86.  v4:= v1 - v2 @kind int;
  #L1d8d8a.  v4:= v4 - v3 @kind int;
  #L1d8d8c.  v4:= (`float`) v4 @kind i2f;
  #L1d8d8e.  v0:= v0 * v4 @kind float;
  #L1d8d92.  v0:= v0 + v5 @kind float;
  #L1d8d94.  v0:= (`int`) v0 @kind f2i;
  #L1d8d96.  v0:= v0 + v1 @kind int;
  #L1d8d98.  v4:= v0 + v3 @kind int;
  #L1d8d9c.  if v1 <= v2 then goto L1d8da4;
  #L1d8da0.  v4:= v0 - v3 @kind int;
  #L1d8da4.  call `setFinalHorizontal`(v7, v0, v4) @signature `Lc/f/b/k/e;.setFinalHorizontal:(II)V` @kind virtual;
  #L1d8daa.  call `a`(v7, v6, v8) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Z)V` @kind static;
  #L1d8db0.  return @kind void;
}
procedure `boolean` `a`(`c.f.b.k.e` v6 @kind object) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1d8750.  call temp:= `getHorizontalDimensionBehaviour`(v6) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d8756.  v0:= temp @kind object;
  #L1d8758.  call temp:= `getVerticalDimensionBehaviour`(v6) @signature `Lc/f/b/k/e;.getVerticalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d875e.  v1:= temp @kind object;
  #L1d8760.  call temp:= `getParent`(v6) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1d8766.  v2:= temp @kind object;
  #L1d8768.  if v2 == 0 then goto L1d877a;
  #L1d876c.  call temp:= `getParent`(v6) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1d8772.  v2:= temp @kind object;
  #L1d8774.  v2:= (`c.f.b.k.f`) v2 @kind object;
  #L1d8778.  goto L1d877c;
  #L1d877a.  v2:= 0I;
  #L1d877c.  if v2 == 0 then goto L1d878c;
  #L1d8780.  call temp:= `getHorizontalDimensionBehaviour`(v2) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d8786.  v3:= temp @kind object;
  #L1d8788.  v4:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1d878c.  if v2 == 0 then goto L1d879c;
  #L1d8790.  call temp:= `getVerticalDimensionBehaviour`(v2) @signature `Lc/f/b/k/e;.getVerticalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d8796.  v2:= temp @kind object;
  #L1d8798.  v3:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1d879c.  v2:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1d87a0.  v3:= 0I;
  #L1d87a2.  v4:= 0I;
  #L1d87a4.  v5:= 1I;
  #L1d87a6.  if v0 == v2 then goto L1d87ec;
  #L1d87aa.  v2:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1d87ae.  if v0 == v2 then goto L1d87ec;
  #L1d87b2.  v2:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d87b6.  if v0 != v2 then goto L1d87da;
  #L1d87ba.  v0:= v6.`c.f.b.k.e.n` @type ^`int`;
  #L1d87be.  if v0 != 0 then goto L1d87da;
  #L1d87c2.  v0:= v6.`c.f.b.k.e.U` @type ^`float`;
  #L1d87c6.  v0:= fcmpl(v0, v3);
  #L1d87ca.  if v0 != 0 then goto L1d87da;
  #L1d87ce.  call temp:= `hasDanglingDimension`(v6, v4) @signature `Lc/f/b/k/e;.hasDanglingDimension:(I)Z` @kind virtual;
  #L1d87d4.  v0:= temp;
  #L1d87d6.  if v0 != 0 then goto L1d87ec;
  #L1d87da.  call temp:= `isResolvedHorizontally`(v6) @signature `Lc/f/b/k/e;.isResolvedHorizontally:()Z` @kind virtual;
  #L1d87e0.  v0:= temp;
  #L1d87e2.  if v0 == 0 then goto L1d87e8;
  #L1d87e6.  goto L1d87ec;
  #L1d87e8.  v0:= 0I;
  #L1d87ea.  goto L1d87ee;
  #L1d87ec.  v0:= 1I;
  #L1d87ee.  v2:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1d87f2.  if v1 == v2 then goto L1d8838;
  #L1d87f6.  v2:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1d87fa.  if v1 == v2 then goto L1d8838;
  #L1d87fe.  v2:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d8802.  if v1 != v2 then goto L1d8826;
  #L1d8806.  v1:= v6.`c.f.b.k.e.o` @type ^`int`;
  #L1d880a.  if v1 != 0 then goto L1d8826;
  #L1d880e.  v1:= v6.`c.f.b.k.e.U` @type ^`float`;
  #L1d8812.  v1:= fcmpl(v1, v3);
  #L1d8816.  if v1 != 0 then goto L1d8826;
  #L1d881a.  call temp:= `hasDanglingDimension`(v6, v5) @signature `Lc/f/b/k/e;.hasDanglingDimension:(I)Z` @kind virtual;
  #L1d8820.  v1:= temp;
  #L1d8822.  if v1 != 0 then goto L1d8838;
  #L1d8826.  call temp:= `isResolvedVertically`(v6) @signature `Lc/f/b/k/e;.isResolvedVertically:()Z` @kind virtual;
  #L1d882c.  v1:= temp;
  #L1d882e.  if v1 == 0 then goto L1d8834;
  #L1d8832.  goto L1d8838;
  #L1d8834.  v1:= 0I;
  #L1d8836.  goto L1d883a;
  #L1d8838.  v1:= 1I;
  #L1d883a.  v6:= v6.`c.f.b.k.e.U` @type ^`float`;
  #L1d883e.  v6:= fcmpl(v6, v3);
  #L1d8842.  if v6 <= 0 then goto L1d8850;
  #L1d8846.  if v0 != 0 then goto L1d884e;
  #L1d884a.  if v1 == 0 then goto L1d8850;
  #L1d884e.  return v5;
  #L1d8850.  if v0 == 0 then goto L1d885a;
  #L1d8854.  if v1 == 0 then goto L1d885a;
  #L1d8858.  v4:= 1I;
  #L1d885a.  return v4;
}
procedure `void` `solvingPass`(`c.f.b.k.f` v13 @kind object, `c.f.b.k.n.b$b` v14 @kind object) @signature `Lc/f/b/k/n/h;.solvingPass:(Lc/f/b/k/f;Lc/f/b/k/n/b$b;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L1d9060.  call temp:= `getHorizontalDimensionBehaviour`(v13) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d9066.  v0:= temp @kind object;
  #L1d9068.  call temp:= `getVerticalDimensionBehaviour`(v13) @signature `Lc/f/b/k/e;.getVerticalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d906e.  v1:= temp @kind object;
  #L1d9070.  call `resetFinalResolution`(v13) @signature `Lc/f/b/k/e;.resetFinalResolution:()V` @kind virtual;
  #L1d9076.  call temp:= `getChildren`(v13) @signature `Lc/f/b/k/m;.getChildren:()Ljava/util/ArrayList;` @kind virtual;
  #L1d907c.  v2:= temp @kind object;
  #L1d907e.  call temp:= `size`(v2) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1d9084.  v3:= temp;
  #L1d9086.  v4:= 0I;
  #L1d9088.  v5:= 0I;
  #L1d908a.  if v5 >= v3 then goto L1d90a6;
  #L1d908e.  call temp:= `get`(v2, v5) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d9094.  v6:= temp @kind object;
  #L1d9096.  v6:= (`c.f.b.k.e`) v6 @kind object;
  #L1d909a.  call `resetFinalResolution`(v6) @signature `Lc/f/b/k/e;.resetFinalResolution:()V` @kind virtual;
  #L1d90a0.  v5:= v5 + 1;
  #L1d90a4.  goto L1d908a;
  #L1d90a6.  call temp:= `isRtl`(v13) @signature `Lc/f/b/k/f;.isRtl:()Z` @kind virtual;
  #L1d90ac.  v5:= temp;
  #L1d90ae.  v6:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1d90b2.  if v0 != v6 then goto L1d90c6;
  #L1d90b6.  call temp:= `getWidth`(v13) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d90bc.  v0:= temp;
  #L1d90be.  call `setFinalHorizontal`(v13, v4, v0) @signature `Lc/f/b/k/e;.setFinalHorizontal:(II)V` @kind virtual;
  #L1d90c4.  goto L1d90cc;
  #L1d90c6.  call `setFinalLeft`(v13, v4) @signature `Lc/f/b/k/e;.setFinalLeft:(I)V` @kind virtual;
  #L1d90cc.  v0:= 0I;
  #L1d90ce.  v6:= 0I;
  #L1d90d0.  v7:= 0I;
  #L1d90d2.  v8:= 0.5F;
  #L1d90d6.  v9:= -1I;
  #L1d90d8.  v10:= 1I;
  #L1d90da.  if v0 >= v3 then goto L1d91a0;
  #L1d90de.  call temp:= `get`(v2, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d90e4.  v11:= temp @kind object;
  #L1d90e6.  v11:= (`c.f.b.k.e`) v11 @kind object;
  #L1d90ea.  v12:= instanceof @variable v11 @type ^`c.f.b.k.h` @kind boolean;
  #L1d90ee.  if v12 == 0 then goto L1d9180;
  #L1d90f2.  v11:= (`c.f.b.k.h`) v11 @kind object;
  #L1d90f6.  call temp:= `getOrientation`(v11) @signature `Lc/f/b/k/h;.getOrientation:()I` @kind virtual;
  #L1d90fc.  v12:= temp;
  #L1d90fe.  if v12 != v10 then goto L1d919a;
  #L1d9102.  call temp:= `getRelativeBegin`(v11) @signature `Lc/f/b/k/h;.getRelativeBegin:()I` @kind virtual;
  #L1d9108.  v6:= temp;
  #L1d910a.  if v6 == v9 then goto L1d911e;
  #L1d910e.  call temp:= `getRelativeBegin`(v11) @signature `Lc/f/b/k/h;.getRelativeBegin:()I` @kind virtual;
  #L1d9114.  v6:= temp;
  #L1d9116.  call `setFinalValue`(v11, v6) @signature `Lc/f/b/k/h;.setFinalValue:(I)V` @kind virtual;
  #L1d911c.  goto L1d917c;
  #L1d911e.  call temp:= `getRelativeEnd`(v11) @signature `Lc/f/b/k/h;.getRelativeEnd:()I` @kind virtual;
  #L1d9124.  v6:= temp;
  #L1d9126.  if v6 == v9 then goto L1d9150;
  #L1d912a.  call temp:= `isResolvedHorizontally`(v13) @signature `Lc/f/b/k/e;.isResolvedHorizontally:()Z` @kind virtual;
  #L1d9130.  v6:= temp;
  #L1d9132.  if v6 == 0 then goto L1d9150;
  #L1d9136.  call temp:= `getWidth`(v13) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d913c.  v6:= temp;
  #L1d913e.  call temp:= `getRelativeEnd`(v11) @signature `Lc/f/b/k/h;.getRelativeEnd:()I` @kind virtual;
  #L1d9144.  v8:= temp;
  #L1d9146.  v6:= v6 - v8 @kind int;
  #L1d9148.  call `setFinalValue`(v11, v6) @signature `Lc/f/b/k/h;.setFinalValue:(I)V` @kind virtual;
  #L1d914e.  goto L1d917c;
  #L1d9150.  call temp:= `isResolvedHorizontally`(v13) @signature `Lc/f/b/k/e;.isResolvedHorizontally:()Z` @kind virtual;
  #L1d9156.  v6:= temp;
  #L1d9158.  if v6 == 0 then goto L1d917c;
  #L1d915c.  call temp:= `getRelativePercent`(v11) @signature `Lc/f/b/k/h;.getRelativePercent:()F` @kind virtual;
  #L1d9162.  v6:= temp;
  #L1d9164.  call temp:= `getWidth`(v13) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d916a.  v9:= temp;
  #L1d916c.  v9:= (`float`) v9 @kind i2f;
  #L1d916e.  v6:= v6 * v9 @kind float;
  #L1d9172.  v6:= v6 + v8 @kind float;
  #L1d9174.  v6:= (`int`) v6 @kind f2i;
  #L1d9176.  call `setFinalValue`(v11, v6) @signature `Lc/f/b/k/h;.setFinalValue:(I)V` @kind virtual;
  #L1d917c.  v6:= 1I;
  #L1d917e.  goto L1d919a;
  #L1d9180.  v8:= instanceof @variable v11 @type ^`c.f.b.k.a` @kind boolean;
  #L1d9184.  if v8 == 0 then goto L1d919a;
  #L1d9188.  v11:= (`c.f.b.k.a`) v11 @kind object;
  #L1d918c.  call temp:= `getOrientation`(v11) @signature `Lc/f/b/k/a;.getOrientation:()I` @kind virtual;
  #L1d9192.  v8:= temp;
  #L1d9194.  if v8 != 0 then goto L1d919a;
  #L1d9198.  v7:= 1I;
  #L1d919a.  v0:= v0 + 1;
  #L1d919e.  goto L1d90d2;
  #L1d91a0.  if v6 == 0 then goto L1d91da;
  #L1d91a4.  v0:= 0I;
  #L1d91a6.  if v0 >= v3 then goto L1d91da;
  #L1d91aa.  call temp:= `get`(v2, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d91b0.  v6:= temp @kind object;
  #L1d91b2.  v6:= (`c.f.b.k.e`) v6 @kind object;
  #L1d91b6.  v11:= instanceof @variable v6 @type ^`c.f.b.k.h` @kind boolean;
  #L1d91ba.  if v11 == 0 then goto L1d91d4;
  #L1d91be.  v6:= (`c.f.b.k.h`) v6 @kind object;
  #L1d91c2.  call temp:= `getOrientation`(v6) @signature `Lc/f/b/k/h;.getOrientation:()I` @kind virtual;
  #L1d91c8.  v11:= temp;
  #L1d91ca.  if v11 != v10 then goto L1d91d4;
  #L1d91ce.  call `a`(v6, v14, v5) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Z)V` @kind static;
  #L1d91d4.  v0:= v0 + 1;
  #L1d91d8.  goto L1d91a6;
  #L1d91da.  call `a`(v13, v14, v5) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Z)V` @kind static;
  #L1d91e0.  if v7 == 0 then goto L1d921a;
  #L1d91e4.  v0:= 0I;
  #L1d91e6.  if v0 >= v3 then goto L1d921a;
  #L1d91ea.  call temp:= `get`(v2, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d91f0.  v6:= temp @kind object;
  #L1d91f2.  v6:= (`c.f.b.k.e`) v6 @kind object;
  #L1d91f6.  v7:= instanceof @variable v6 @type ^`c.f.b.k.a` @kind boolean;
  #L1d91fa.  if v7 == 0 then goto L1d9214;
  #L1d91fe.  v6:= (`c.f.b.k.a`) v6 @kind object;
  #L1d9202.  call temp:= `getOrientation`(v6) @signature `Lc/f/b/k/a;.getOrientation:()I` @kind virtual;
  #L1d9208.  v7:= temp;
  #L1d920a.  if v7 != 0 then goto L1d9214;
  #L1d920e.  call `a`(v6, v14, v4, v5) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/a;Lc/f/b/k/n/b$b;IZ)V` @kind static;
  #L1d9214.  v0:= v0 + 1;
  #L1d9218.  goto L1d91e6;
  #L1d921a.  v0:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1d921e.  if v1 != v0 then goto L1d9232;
  #L1d9222.  call temp:= `getHeight`(v13) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d9228.  v0:= temp;
  #L1d922a.  call `setFinalVertical`(v13, v4, v0) @signature `Lc/f/b/k/e;.setFinalVertical:(II)V` @kind virtual;
  #L1d9230.  goto L1d9238;
  #L1d9232.  call `setFinalTop`(v13, v4) @signature `Lc/f/b/k/e;.setFinalTop:(I)V` @kind virtual;
  #L1d9238.  v0:= 0I;
  #L1d923a.  v1:= 0I;
  #L1d923c.  v6:= 0I;
  #L1d923e.  if v0 >= v3 then goto L1d9304;
  #L1d9242.  call temp:= `get`(v2, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d9248.  v7:= temp @kind object;
  #L1d924a.  v7:= (`c.f.b.k.e`) v7 @kind object;
  #L1d924e.  v11:= instanceof @variable v7 @type ^`c.f.b.k.h` @kind boolean;
  #L1d9252.  if v11 == 0 then goto L1d92e4;
  #L1d9256.  v7:= (`c.f.b.k.h`) v7 @kind object;
  #L1d925a.  call temp:= `getOrientation`(v7) @signature `Lc/f/b/k/h;.getOrientation:()I` @kind virtual;
  #L1d9260.  v11:= temp;
  #L1d9262.  if v11 != 0 then goto L1d92fe;
  #L1d9266.  call temp:= `getRelativeBegin`(v7) @signature `Lc/f/b/k/h;.getRelativeBegin:()I` @kind virtual;
  #L1d926c.  v1:= temp;
  #L1d926e.  if v1 == v9 then goto L1d9282;
  #L1d9272.  call temp:= `getRelativeBegin`(v7) @signature `Lc/f/b/k/h;.getRelativeBegin:()I` @kind virtual;
  #L1d9278.  v1:= temp;
  #L1d927a.  call `setFinalValue`(v7, v1) @signature `Lc/f/b/k/h;.setFinalValue:(I)V` @kind virtual;
  #L1d9280.  goto L1d92e0;
  #L1d9282.  call temp:= `getRelativeEnd`(v7) @signature `Lc/f/b/k/h;.getRelativeEnd:()I` @kind virtual;
  #L1d9288.  v1:= temp;
  #L1d928a.  if v1 == v9 then goto L1d92b4;
  #L1d928e.  call temp:= `isResolvedVertically`(v13) @signature `Lc/f/b/k/e;.isResolvedVertically:()Z` @kind virtual;
  #L1d9294.  v1:= temp;
  #L1d9296.  if v1 == 0 then goto L1d92b4;
  #L1d929a.  call temp:= `getHeight`(v13) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d92a0.  v1:= temp;
  #L1d92a2.  call temp:= `getRelativeEnd`(v7) @signature `Lc/f/b/k/h;.getRelativeEnd:()I` @kind virtual;
  #L1d92a8.  v11:= temp;
  #L1d92aa.  v1:= v1 - v11 @kind int;
  #L1d92ac.  call `setFinalValue`(v7, v1) @signature `Lc/f/b/k/h;.setFinalValue:(I)V` @kind virtual;
  #L1d92b2.  goto L1d92e0;
  #L1d92b4.  call temp:= `isResolvedVertically`(v13) @signature `Lc/f/b/k/e;.isResolvedVertically:()Z` @kind virtual;
  #L1d92ba.  v1:= temp;
  #L1d92bc.  if v1 == 0 then goto L1d92e0;
  #L1d92c0.  call temp:= `getRelativePercent`(v7) @signature `Lc/f/b/k/h;.getRelativePercent:()F` @kind virtual;
  #L1d92c6.  v1:= temp;
  #L1d92c8.  call temp:= `getHeight`(v13) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d92ce.  v11:= temp;
  #L1d92d0.  v11:= (`float`) v11 @kind i2f;
  #L1d92d2.  v1:= v1 * v11 @kind float;
  #L1d92d6.  v1:= v1 + v8 @kind float;
  #L1d92d8.  v1:= (`int`) v1 @kind f2i;
  #L1d92da.  call `setFinalValue`(v7, v1) @signature `Lc/f/b/k/h;.setFinalValue:(I)V` @kind virtual;
  #L1d92e0.  v1:= 1I;
  #L1d92e2.  goto L1d92fe;
  #L1d92e4.  v11:= instanceof @variable v7 @type ^`c.f.b.k.a` @kind boolean;
  #L1d92e8.  if v11 == 0 then goto L1d92fe;
  #L1d92ec.  v7:= (`c.f.b.k.a`) v7 @kind object;
  #L1d92f0.  call temp:= `getOrientation`(v7) @signature `Lc/f/b/k/a;.getOrientation:()I` @kind virtual;
  #L1d92f6.  v7:= temp;
  #L1d92f8.  if v7 != v10 then goto L1d92fe;
  #L1d92fc.  v6:= 1I;
  #L1d92fe.  v0:= v0 + 1;
  #L1d9302.  goto L1d923e;
  #L1d9304.  if v1 == 0 then goto L1d933e;
  #L1d9308.  v0:= 0I;
  #L1d930a.  if v0 >= v3 then goto L1d933e;
  #L1d930e.  call temp:= `get`(v2, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d9314.  v1:= temp @kind object;
  #L1d9316.  v1:= (`c.f.b.k.e`) v1 @kind object;
  #L1d931a.  v7:= instanceof @variable v1 @type ^`c.f.b.k.h` @kind boolean;
  #L1d931e.  if v7 == 0 then goto L1d9338;
  #L1d9322.  v1:= (`c.f.b.k.h`) v1 @kind object;
  #L1d9326.  call temp:= `getOrientation`(v1) @signature `Lc/f/b/k/h;.getOrientation:()I` @kind virtual;
  #L1d932c.  v7:= temp;
  #L1d932e.  if v7 != 0 then goto L1d9338;
  #L1d9332.  call `a`(v1, v14) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;)V` @kind static;
  #L1d9338.  v0:= v0 + 1;
  #L1d933c.  goto L1d930a;
  #L1d933e.  call `a`(v13, v14) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;)V` @kind static;
  #L1d9344.  if v6 == 0 then goto L1d937e;
  #L1d9348.  v13:= 0I;
  #L1d934a.  if v13 >= v3 then goto L1d937e;
  #L1d934e.  call temp:= `get`(v2, v13) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d9354.  v0:= temp @kind object;
  #L1d9356.  v0:= (`c.f.b.k.e`) v0 @kind object;
  #L1d935a.  v1:= instanceof @variable v0 @type ^`c.f.b.k.a` @kind boolean;
  #L1d935e.  if v1 == 0 then goto L1d9378;
  #L1d9362.  v0:= (`c.f.b.k.a`) v0 @kind object;
  #L1d9366.  call temp:= `getOrientation`(v0) @signature `Lc/f/b/k/a;.getOrientation:()I` @kind virtual;
  #L1d936c.  v1:= temp;
  #L1d936e.  if v1 != v10 then goto L1d9378;
  #L1d9372.  call `a`(v0, v14, v10, v5) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/a;Lc/f/b/k/n/b$b;IZ)V` @kind static;
  #L1d9378.  v13:= v13 + 1;
  #L1d937c.  goto L1d934a;
  #L1d937e.  if v4 >= v3 then goto L1d93c6;
  #L1d9382.  call temp:= `get`(v2, v4) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d9388.  v13:= temp @kind object;
  #L1d938a.  v13:= (`c.f.b.k.e`) v13 @kind object;
  #L1d938e.  call temp:= `isMeasureRequested`(v13) @signature `Lc/f/b/k/e;.isMeasureRequested:()Z` @kind virtual;
  #L1d9394.  v0:= temp;
  #L1d9396.  if v0 == 0 then goto L1d93c0;
  #L1d939a.  call temp:= `a`(v13) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;)Z` @kind static;
  #L1d93a0.  v0:= temp;
  #L1d93a2.  if v0 == 0 then goto L1d93c0;
  #L1d93a6.  v0:= `@@c.f.b.k.n.h.a` @type ^`c.f.b.k.n.b$a` @kind object;
  #L1d93aa.  v1:= `@@c.f.b.k.n.b$a.k` @type ^`int`;
  #L1d93ae.  call temp:= `measure`(v13, v14, v0, v1) @signature `Lc/f/b/k/f;.measure:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Lc/f/b/k/n/b$a;I)Z` @kind static;
  #L1d93b4.  call `a`(v13, v14, v5) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Z)V` @kind static;
  #L1d93ba.  call `a`(v13, v14) @signature `Lc/f/b/k/n/h;.a:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;)V` @kind static;
  #L1d93c0.  v4:= v4 + 1;
  #L1d93c4.  goto L1d937e;
  #L1d93c6.  return @kind void;
}
