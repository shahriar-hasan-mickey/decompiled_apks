record `c.f.b.k.n.k` @kind class @AccessFlag  extends `c.f.b.k.n.p` @kind class {
}
procedure `void` `<init>`(`c.f.b.k.n.k` v0 @kind this, `c.f.b.k.e` v1 @kind object) @signature `Lc/f/b/k/n/k;.<init>:(Lc/f/b/k/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1da5e8.  call `<init>`(v0, v1) @signature `Lc/f/b/k/n/p;.<init>:(Lc/f/b/k/e;)V` @kind direct;
  #L1da5ee.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.n.k` v1 @kind this, `c.f.b.k.n.f` v2 @kind object) @signature `Lc/f/b/k/n/k;.a:(Lc/f/b/k/n/f;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1da600.  v0:= v1.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da604.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1da608.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1da60e.  v2:= v2.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1da612.  v0:= v1.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da616.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1da61c.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.n.k` v7 @kind this) @signature `Lc/f/b/k/n/k;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1da630.  v0:= v7.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1da634.  v1:= instanceof @variable v0 @type ^`c.f.b.k.a` @kind boolean;
  #L1da638.  if v1 == 0 then goto L1da872;
  #L1da63c.  v1:= v7.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da640.  v2:= 1I;
  #L1da642.  v1.`c.f.b.k.n.f.b` @type ^`boolean` := v2 @kind boolean;
  #L1da646.  v0:= (`c.f.b.k.a`) v0 @kind object;
  #L1da64a.  call temp:= `getBarrierType`(v0) @signature `Lc/f/b/k/a;.getBarrierType:()I` @kind virtual;
  #L1da650.  v1:= temp;
  #L1da652.  call temp:= `allowsGoneWidget`(v0) @signature `Lc/f/b/k/a;.allowsGoneWidget:()Z` @kind virtual;
  #L1da658.  v3:= temp;
  #L1da65a.  v4:= 8I;
  #L1da65e.  v5:= 0I;
  #L1da660.  if v1 == 0 then goto L1da7f6;
  #L1da664.  if v1 == v2 then goto L1da778;
  #L1da668.  v2:= 2I;
  #L1da66a.  if v1 == v2 then goto L1da6f8;
  #L1da66e.  v2:= 3I;
  #L1da670.  if v1 == v2 then goto L1da678;
  #L1da674.  goto L1da872;
  #L1da678.  v1:= v7.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da67c.  v2:= `@@c.f.b.k.n.f$a.l` @type ^`c.f.b.k.n.f$a` @kind object;
  #L1da680.  v1.`c.f.b.k.n.f.e` @type ^`c.f.b.k.n.f$a` := v2 @kind object;
  #L1da684.  v1:= v0.`c.f.b.k.j.q0` @type ^`int`;
  #L1da688.  if v5 >= v1 then goto L1da6d0;
  #L1da68c.  v1:= v0.`c.f.b.k.j.p0` @type ^`c.f.b.k.e`[] @kind object;
  #L1da690.  v1:= v1[v5] @kind object;
  #L1da694.  if v3 != 0 then goto L1da6a6;
  #L1da698.  call temp:= `getVisibility`(v1) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1da69e.  v2:= temp;
  #L1da6a0.  if v2 != v4 then goto L1da6a6;
  #L1da6a4.  goto L1da6ca;
  #L1da6a6.  v1:= v1.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1da6aa.  v1:= v1.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1da6ae.  v2:= v1.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1da6b2.  v6:= v7.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da6b6.  call temp:= `add`(v2, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1da6bc.  v2:= v7.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da6c0.  v2:= v2.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1da6c4.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1da6ca.  v5:= v5 + 1;
  #L1da6ce.  goto L1da684;
  #L1da6d0.  v0:= v7.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1da6d4.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1da6d8.  v0:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da6dc.  call `a`(v7, v0) @signature `Lc/f/b/k/n/k;.a:(Lc/f/b/k/n/f;)V` @kind direct;
  #L1da6e2.  v0:= v7.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1da6e6.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1da6ea.  v0:= v0.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1da6ee.  call `a`(v7, v0) @signature `Lc/f/b/k/n/k;.a:(Lc/f/b/k/n/f;)V` @kind direct;
  #L1da6f4.  goto L1da872;
  #L1da6f8.  v1:= v7.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da6fc.  v2:= `@@c.f.b.k.n.f$a.k` @type ^`c.f.b.k.n.f$a` @kind object;
  #L1da700.  v1.`c.f.b.k.n.f.e` @type ^`c.f.b.k.n.f$a` := v2 @kind object;
  #L1da704.  v1:= v0.`c.f.b.k.j.q0` @type ^`int`;
  #L1da708.  if v5 >= v1 then goto L1da750;
  #L1da70c.  v1:= v0.`c.f.b.k.j.p0` @type ^`c.f.b.k.e`[] @kind object;
  #L1da710.  v1:= v1[v5] @kind object;
  #L1da714.  if v3 != 0 then goto L1da726;
  #L1da718.  call temp:= `getVisibility`(v1) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1da71e.  v2:= temp;
  #L1da720.  if v2 != v4 then goto L1da726;
  #L1da724.  goto L1da74a;
  #L1da726.  v1:= v1.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1da72a.  v1:= v1.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da72e.  v2:= v1.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1da732.  v6:= v7.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da736.  call temp:= `add`(v2, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1da73c.  v2:= v7.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da740.  v2:= v2.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1da744.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1da74a.  v5:= v5 + 1;
  #L1da74e.  goto L1da704;
  #L1da750.  v0:= v7.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1da754.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1da758.  v0:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da75c.  call `a`(v7, v0) @signature `Lc/f/b/k/n/k;.a:(Lc/f/b/k/n/f;)V` @kind direct;
  #L1da762.  v0:= v7.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1da766.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1da76a.  v0:= v0.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1da76e.  call `a`(v7, v0) @signature `Lc/f/b/k/n/k;.a:(Lc/f/b/k/n/f;)V` @kind direct;
  #L1da774.  goto L1da872;
  #L1da778.  v1:= v7.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da77c.  v2:= `@@c.f.b.k.n.f$a.j` @type ^`c.f.b.k.n.f$a` @kind object;
  #L1da780.  v1.`c.f.b.k.n.f.e` @type ^`c.f.b.k.n.f$a` := v2 @kind object;
  #L1da784.  v1:= v0.`c.f.b.k.j.q0` @type ^`int`;
  #L1da788.  if v5 >= v1 then goto L1da7d0;
  #L1da78c.  v1:= v0.`c.f.b.k.j.p0` @type ^`c.f.b.k.e`[] @kind object;
  #L1da790.  v1:= v1[v5] @kind object;
  #L1da794.  if v3 != 0 then goto L1da7a6;
  #L1da798.  call temp:= `getVisibility`(v1) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1da79e.  v2:= temp;
  #L1da7a0.  if v2 != v4 then goto L1da7a6;
  #L1da7a4.  goto L1da7ca;
  #L1da7a6.  v1:= v1.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1da7aa.  v1:= v1.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1da7ae.  v2:= v1.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1da7b2.  v6:= v7.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da7b6.  call temp:= `add`(v2, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1da7bc.  v2:= v7.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da7c0.  v2:= v2.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1da7c4.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1da7ca.  v5:= v5 + 1;
  #L1da7ce.  goto L1da784;
  #L1da7d0.  v0:= v7.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1da7d4.  v0:= v0.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1da7d8.  v0:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da7dc.  call `a`(v7, v0) @signature `Lc/f/b/k/n/k;.a:(Lc/f/b/k/n/f;)V` @kind direct;
  #L1da7e2.  v0:= v7.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1da7e6.  v0:= v0.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1da7ea.  v0:= v0.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1da7ee.  call `a`(v7, v0) @signature `Lc/f/b/k/n/k;.a:(Lc/f/b/k/n/f;)V` @kind direct;
  #L1da7f4.  goto L1da872;
  #L1da7f6.  v1:= v7.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da7fa.  v2:= `@@c.f.b.k.n.f$a.i` @type ^`c.f.b.k.n.f$a` @kind object;
  #L1da7fe.  v1.`c.f.b.k.n.f.e` @type ^`c.f.b.k.n.f$a` := v2 @kind object;
  #L1da802.  v1:= v0.`c.f.b.k.j.q0` @type ^`int`;
  #L1da806.  if v5 >= v1 then goto L1da84e;
  #L1da80a.  v1:= v0.`c.f.b.k.j.p0` @type ^`c.f.b.k.e`[] @kind object;
  #L1da80e.  v1:= v1[v5] @kind object;
  #L1da812.  if v3 != 0 then goto L1da824;
  #L1da816.  call temp:= `getVisibility`(v1) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1da81c.  v2:= temp;
  #L1da81e.  if v2 != v4 then goto L1da824;
  #L1da822.  goto L1da848;
  #L1da824.  v1:= v1.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1da828.  v1:= v1.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da82c.  v2:= v1.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1da830.  v6:= v7.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da834.  call temp:= `add`(v2, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1da83a.  v2:= v7.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da83e.  v2:= v2.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1da842.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1da848.  v5:= v5 + 1;
  #L1da84c.  goto L1da802;
  #L1da84e.  v0:= v7.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1da852.  v0:= v0.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1da856.  v0:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da85a.  call `a`(v7, v0) @signature `Lc/f/b/k/n/k;.a:(Lc/f/b/k/n/f;)V` @kind direct;
  #L1da860.  v0:= v7.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1da864.  v0:= v0.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1da868.  v0:= v0.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1da86c.  call `a`(v7, v0) @signature `Lc/f/b/k/n/k;.a:(Lc/f/b/k/n/f;)V` @kind direct;
  #L1da872.  return @kind void;
}
procedure `void` `applyToWidget`(`c.f.b.k.n.k` v2 @kind this) @signature `Lc/f/b/k/n/k;.applyToWidget:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1da884.  v0:= v2.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1da888.  v1:= instanceof @variable v0 @type ^`c.f.b.k.a` @kind boolean;
  #L1da88c.  if v1 == 0 then goto L1da8ce;
  #L1da890.  v0:= (`c.f.b.k.a`) v0 @kind object;
  #L1da894.  call temp:= `getBarrierType`(v0) @signature `Lc/f/b/k/a;.getBarrierType:()I` @kind virtual;
  #L1da89a.  v0:= temp;
  #L1da89c.  if v0 == 0 then goto L1da8bc;
  #L1da8a0.  v1:= 1I;
  #L1da8a2.  if v0 != v1 then goto L1da8a8;
  #L1da8a6.  goto L1da8bc;
  #L1da8a8.  v0:= v2.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1da8ac.  v1:= v2.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da8b0.  v1:= v1.`c.f.b.k.n.f.g` @type ^`int`;
  #L1da8b4.  call `setY`(v0, v1) @signature `Lc/f/b/k/e;.setY:(I)V` @kind virtual;
  #L1da8ba.  goto L1da8ce;
  #L1da8bc.  v0:= v2.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1da8c0.  v1:= v2.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da8c4.  v1:= v1.`c.f.b.k.n.f.g` @type ^`int`;
  #L1da8c8.  call `setX`(v0, v1) @signature `Lc/f/b/k/e;.setX:(I)V` @kind virtual;
  #L1da8ce.  return @kind void;
}
procedure `void` `b`(`c.f.b.k.n.k` v1 @kind this) @signature `Lc/f/b/k/n/k;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L1da8e0.  v0:= 0I;
  #L1da8e2.  v1.`c.f.b.k.n.p.c` @type ^`c.f.b.k.n.m` := v0 @kind object;
  #L1da8e6.  v0:= v1.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da8ea.  call `clear`(v0) @signature `Lc/f/b/k/n/f;.clear:()V` @kind virtual;
  #L1da8f0.  return @kind void;
}
procedure `boolean` `c`(`c.f.b.k.n.k` v1 @kind this) @signature `Lc/f/b/k/n/k;.c:()Z` @AccessFlag  {
    temp;
    v0;

  #L1da5d4.  v0:= 0I;
  #L1da5d6.  return v0;
}
procedure `void` `update`(`c.f.b.k.n.k` v6 @kind this, `c.f.b.k.n.d` v7 @kind object) @signature `Lc/f/b/k/n/k;.update:(Lc/f/b/k/n/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1da904.  v7:= v6.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1da908.  v7:= (`c.f.b.k.a`) v7 @kind object;
  #L1da90c.  call temp:= `getBarrierType`(v7) @signature `Lc/f/b/k/a;.getBarrierType:()I` @kind virtual;
  #L1da912.  v0:= temp;
  #L1da914.  v1:= v6.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da918.  v1:= v1.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1da91c.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1da922.  v1:= temp @kind object;
  #L1da924.  v2:= -1I;
  #L1da926.  v3:= 0I;
  #L1da928.  v3:= -1I;
  #L1da92a.  v4:= 0I;
  #L1da92c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1da932.  v5:= temp;
  #L1da934.  if v5 == 0 then goto L1da95a;
  #L1da938.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1da93e.  v5:= temp @kind object;
  #L1da940.  v5:= (`c.f.b.k.n.f`) v5 @kind object;
  #L1da944.  v5:= v5.`c.f.b.k.n.f.g` @type ^`int`;
  #L1da948.  if v3 == v2 then goto L1da950;
  #L1da94c.  if v5 >= v3 then goto L1da952;
  #L1da950.  v3:= v5;
  #L1da952.  if v4 >= v5 then goto L1da92c;
  #L1da956.  v4:= v5;
  #L1da958.  goto L1da92c;
  #L1da95a.  if v0 == 0 then goto L1da97c;
  #L1da95e.  v1:= 2I;
  #L1da960.  if v0 != v1 then goto L1da966;
  #L1da964.  goto L1da97c;
  #L1da966.  v0:= v6.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da96a.  call temp:= `getMargin`(v7) @signature `Lc/f/b/k/a;.getMargin:()I` @kind virtual;
  #L1da970.  v7:= temp;
  #L1da972.  v4:= v4 + v7 @kind int;
  #L1da974.  call `resolve`(v0, v4) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1da97a.  goto L1da990;
  #L1da97c.  v0:= v6.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1da980.  call temp:= `getMargin`(v7) @signature `Lc/f/b/k/a;.getMargin:()I` @kind virtual;
  #L1da986.  v7:= temp;
  #L1da988.  v3:= v3 + v7 @kind int;
  #L1da98a.  call `resolve`(v0, v3) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1da990.  return @kind void;
}
