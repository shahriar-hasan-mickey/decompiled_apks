record `c.f.b.k.n.f` @kind class @AccessFlag PUBLIC extends `c.f.b.k.n.d` @kind interface {
  `c.f.b.k.n.d` `c.f.b.k.n.f.a` @AccessFlag PUBLIC;
  `boolean` `c.f.b.k.n.f.b` @AccessFlag PUBLIC;
  `boolean` `c.f.b.k.n.f.c` @AccessFlag PUBLIC;
  `c.f.b.k.n.p` `c.f.b.k.n.f.d` @AccessFlag ;
  `c.f.b.k.n.f$a` `c.f.b.k.n.f.e` @AccessFlag ;
  `int` `c.f.b.k.n.f.f` @AccessFlag ;
  `int` `c.f.b.k.n.f.g` @AccessFlag PUBLIC;
  `int` `c.f.b.k.n.f.h` @AccessFlag ;
  `c.f.b.k.n.g` `c.f.b.k.n.f.i` @AccessFlag ;
  `boolean` `c.f.b.k.n.f.j` @AccessFlag PUBLIC;
  `java.util.List` `c.f.b.k.n.f.k` @AccessFlag ;
  `java.util.List` `c.f.b.k.n.f.l` @AccessFlag ;
}
procedure `void` `<init>`(`c.f.b.k.n.f` v3 @kind this, `c.f.b.k.n.p` v4 @kind object) @signature `Lc/f/b/k/n/f;.<init>:(Lc/f/b/k/n/p;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1d84bc.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d84c2.  v0:= 0I;
  #L1d84c4.  v3.`c.f.b.k.n.f.a` @type ^`c.f.b.k.n.d` := v0 @kind object;
  #L1d84c8.  v1:= 0I;
  #L1d84ca.  v3.`c.f.b.k.n.f.b` @type ^`boolean` := v1 @kind boolean;
  #L1d84ce.  v3.`c.f.b.k.n.f.c` @type ^`boolean` := v1 @kind boolean;
  #L1d84d2.  v2:= `@@c.f.b.k.n.f$a.f` @type ^`c.f.b.k.n.f$a` @kind object;
  #L1d84d6.  v3.`c.f.b.k.n.f.e` @type ^`c.f.b.k.n.f$a` := v2 @kind object;
  #L1d84da.  v2:= 1I;
  #L1d84dc.  v3.`c.f.b.k.n.f.h` @type ^`int` := v2;
  #L1d84e0.  v3.`c.f.b.k.n.f.i` @type ^`c.f.b.k.n.g` := v0 @kind object;
  #L1d84e4.  v3.`c.f.b.k.n.f.j` @type ^`boolean` := v1 @kind boolean;
  #L1d84e8.  v0:= new `java.util.ArrayList`;
  #L1d84ec.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1d84f2.  v3.`c.f.b.k.n.f.k` @type ^`java.util.List` := v0 @kind object;
  #L1d84f6.  v0:= new `java.util.ArrayList`;
  #L1d84fa.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1d8500.  v3.`c.f.b.k.n.f.l` @type ^`java.util.List` := v0 @kind object;
  #L1d8504.  v3.`c.f.b.k.n.f.d` @type ^`c.f.b.k.n.p` := v4 @kind object;
  #L1d8508.  return @kind void;
}
procedure `void` `addDependency`(`c.f.b.k.n.f` v1 @kind this, `c.f.b.k.n.d` v2 @kind object) @signature `Lc/f/b/k/n/f;.addDependency:(Lc/f/b/k/n/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d851c.  v0:= v1.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1d8520.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1d8526.  v0:= v1.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1d852a.  if v0 == 0 then goto L1d8534;
  #L1d852e.  call `update`(v2, v2) @signature `Lc/f/b/k/n/d;.update:(Lc/f/b/k/n/d;)V` @kind interface;
  #L1d8534.  return @kind void;
}
procedure `void` `clear`(`c.f.b.k.n.f` v1 @kind this) @signature `Lc/f/b/k/n/f;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d8548.  v0:= v1.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1d854c.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L1d8552.  v0:= v1.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1d8556.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L1d855c.  v0:= 0I;
  #L1d855e.  v1.`c.f.b.k.n.f.j` @type ^`boolean` := v0 @kind boolean;
  #L1d8562.  v1.`c.f.b.k.n.f.g` @type ^`int` := v0;
  #L1d8566.  v1.`c.f.b.k.n.f.c` @type ^`boolean` := v0 @kind boolean;
  #L1d856a.  v1.`c.f.b.k.n.f.b` @type ^`boolean` := v0 @kind boolean;
  #L1d856e.  return @kind void;
}
procedure `void` `resolve`(`c.f.b.k.n.f` v1 @kind this, `int` v2 ) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d8580.  v0:= v1.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1d8584.  if v0 == 0 then goto L1d858a;
  #L1d8588.  return @kind void;
  #L1d858a.  v0:= 1I;
  #L1d858c.  v1.`c.f.b.k.n.f.j` @type ^`boolean` := v0 @kind boolean;
  #L1d8590.  v1.`c.f.b.k.n.f.g` @type ^`int` := v2;
  #L1d8594.  v2:= v1.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1d8598.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1d859e.  v2:= temp @kind object;
  #L1d85a0.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d85a6.  v0:= temp;
  #L1d85a8.  if v0 == 0 then goto L1d85c0;
  #L1d85ac.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d85b2.  v0:= temp @kind object;
  #L1d85b4.  v0:= (`c.f.b.k.n.d`) v0 @kind object;
  #L1d85b8.  call `update`(v0, v0) @signature `Lc/f/b/k/n/d;.update:(Lc/f/b/k/n/d;)V` @kind interface;
  #L1d85be.  goto L1d85a0;
  #L1d85c0.  return @kind void;
}
procedure `java.lang.String` `toString`(`c.f.b.k.n.f` v2 @kind this) @signature `Lc/f/b/k/n/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d8400.  v0:= new `java.lang.StringBuilder`;
  #L1d8404.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d840a.  v1:= v2.`c.f.b.k.n.f.d` @type ^`c.f.b.k.n.p` @kind object;
  #L1d840e.  v1:= v1.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1d8412.  call temp:= `getDebugName`(v1) @signature `Lc/f/b/k/e;.getDebugName:()Ljava/lang/String;` @kind virtual;
  #L1d8418.  v1:= temp @kind object;
  #L1d841a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d8420.  v1:= ":" @kind object;
  #L1d8424.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d842a.  v1:= v2.`c.f.b.k.n.f.e` @type ^`c.f.b.k.n.f$a` @kind object;
  #L1d842e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d8434.  v1:= "(" @kind object;
  #L1d8438.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d843e.  v1:= v2.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1d8442.  if v1 == 0 then goto L1d8454;
  #L1d8446.  v1:= v2.`c.f.b.k.n.f.g` @type ^`int`;
  #L1d844a.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1d8450.  v1:= temp @kind object;
  #L1d8452.  goto L1d8458;
  #L1d8454.  v1:= "unresolved" @kind object;
  #L1d8458.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d845e.  v1:= ") <t=" @kind object;
  #L1d8462.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d8468.  v1:= v2.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1d846c.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1d8472.  v1:= temp;
  #L1d8474.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d847a.  v1:= ":d=" @kind object;
  #L1d847e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d8484.  v1:= v2.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1d8488.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1d848e.  v1:= temp;
  #L1d8490.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d8496.  v1:= ">" @kind object;
  #L1d849a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d84a0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d84a6.  v0:= temp @kind object;
  #L1d84a8.  return v0 @kind object;
}
procedure `void` `update`(`c.f.b.k.n.f` v5 @kind this, `c.f.b.k.n.d` v6 @kind object) @signature `Lc/f/b/k/n/f;.update:(Lc/f/b/k/n/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d85d4.  v6:= v5.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1d85d8.  call temp:= `iterator`(v6) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1d85de.  v6:= temp @kind object;
  #L1d85e0.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d85e6.  v0:= temp;
  #L1d85e8.  if v0 == 0 then goto L1d8602;
  #L1d85ec.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d85f2.  v0:= temp @kind object;
  #L1d85f4.  v0:= (`c.f.b.k.n.f`) v0 @kind object;
  #L1d85f8.  v0:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1d85fc.  if v0 != 0 then goto L1d85e0;
  #L1d8600.  return @kind void;
  #L1d8602.  v6:= 1I;
  #L1d8604.  v5.`c.f.b.k.n.f.c` @type ^`boolean` := v6 @kind boolean;
  #L1d8608.  v0:= v5.`c.f.b.k.n.f.a` @type ^`c.f.b.k.n.d` @kind object;
  #L1d860c.  if v0 == 0 then goto L1d8616;
  #L1d8610.  call `update`(v0, v5) @signature `Lc/f/b/k/n/d;.update:(Lc/f/b/k/n/d;)V` @kind interface;
  #L1d8616.  v0:= v5.`c.f.b.k.n.f.b` @type ^`boolean` @kind boolean;
  #L1d861a.  if v0 == 0 then goto L1d862a;
  #L1d861e.  v6:= v5.`c.f.b.k.n.f.d` @type ^`c.f.b.k.n.p` @kind object;
  #L1d8622.  call `update`(v6, v5) @signature `Lc/f/b/k/n/p;.update:(Lc/f/b/k/n/d;)V` @kind virtual;
  #L1d8628.  return @kind void;
  #L1d862a.  v0:= 0I;
  #L1d862c.  v1:= 0I;
  #L1d862e.  v2:= v5.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1d8632.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1d8638.  v2:= temp @kind object;
  #L1d863a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1d8640.  v3:= temp;
  #L1d8642.  if v3 == 0 then goto L1d8664;
  #L1d8646.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1d864c.  v3:= temp @kind object;
  #L1d864e.  v3:= (`c.f.b.k.n.f`) v3 @kind object;
  #L1d8652.  v4:= instanceof @variable v3 @type ^`c.f.b.k.n.g` @kind boolean;
  #L1d8656.  if v4 == 0 then goto L1d865c;
  #L1d865a.  goto L1d863a;
  #L1d865c.  v1:= v1 + 1;
  #L1d8660.  v0:= v3 @kind object;
  #L1d8662.  goto L1d863a;
  #L1d8664.  if v0 == 0 then goto L1d86a8;
  #L1d8668.  if v1 != v6 then goto L1d86a8;
  #L1d866c.  v6:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1d8670.  if v6 == 0 then goto L1d86a8;
  #L1d8674.  v6:= v5.`c.f.b.k.n.f.i` @type ^`c.f.b.k.n.g` @kind object;
  #L1d8678.  if v6 == 0 then goto L1d8698;
  #L1d867c.  v1:= v6.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1d8680.  if v1 == 0 then goto L1d8696;
  #L1d8684.  v1:= v5.`c.f.b.k.n.f.h` @type ^`int`;
  #L1d8688.  v6:= v6.`c.f.b.k.n.f.g` @type ^`int`;
  #L1d868c.  v1:= v1 * v6 @kind int;
  #L1d8690.  v5.`c.f.b.k.n.f.f` @type ^`int` := v1;
  #L1d8694.  goto L1d8698;
  #L1d8696.  return @kind void;
  #L1d8698.  v6:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1d869c.  v0:= v5.`c.f.b.k.n.f.f` @type ^`int`;
  #L1d86a0.  v6:= v6 + v0 @kind int;
  #L1d86a2.  call `resolve`(v5, v6) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1d86a8.  v6:= v5.`c.f.b.k.n.f.a` @type ^`c.f.b.k.n.d` @kind object;
  #L1d86ac.  if v6 == 0 then goto L1d86b6;
  #L1d86b0.  call `update`(v6, v5) @signature `Lc/f/b/k/n/d;.update:(Lc/f/b/k/n/d;)V` @kind interface;
  #L1d86b6.  return @kind void;
}
