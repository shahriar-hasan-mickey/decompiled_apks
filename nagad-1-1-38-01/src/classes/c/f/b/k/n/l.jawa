record `c.f.b.k.n.l` @kind class @AccessFlag PUBLIC extends `c.f.b.k.n.p` @kind class {
}
global `int`[] `@@c.f.b.k.n.l.k` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lc/f/b/k/n/l;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1daaa8.  v0:= 2I;
  #L1daaaa.  v0:= new `int`[v0];
  #L1daaae.  `@@c.f.b.k.n.l.k` @type ^`int`[] := v0 @kind object;
  #L1daab2.  return @kind void;
}
procedure `void` `<init>`(`c.f.b.k.n.l` v1 @kind this, `c.f.b.k.e` v2 @kind object) @signature `Lc/f/b/k/n/l;.<init>:(Lc/f/b/k/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1daac4.  call `<init>`(v1, v2) @signature `Lc/f/b/k/n/p;.<init>:(Lc/f/b/k/e;)V` @kind direct;
  #L1daaca.  v2:= v1.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1daace.  v0:= `@@c.f.b.k.n.f$a.i` @type ^`c.f.b.k.n.f$a` @kind object;
  #L1daad2.  v2.`c.f.b.k.n.f.e` @type ^`c.f.b.k.n.f$a` := v0 @kind object;
  #L1daad6.  v2:= v1.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1daada.  v0:= `@@c.f.b.k.n.f$a.j` @type ^`c.f.b.k.n.f$a` @kind object;
  #L1daade.  v2.`c.f.b.k.n.f.e` @type ^`c.f.b.k.n.f$a` := v0 @kind object;
  #L1daae2.  v2:= 0I;
  #L1daae4.  v1.`c.f.b.k.n.p.f` @type ^`int` := v2;
  #L1daae8.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.n.l` v2 @kind this, `int`[] v3 @kind object, `int` v4 , `int` v5 , `int` v6 , `int` v7 , `float` v8 , `int` v9 ) @signature `Lc/f/b/k/n/l;.a:([IIIIIFI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1db358.  v5:= v5 - v4 @kind int;
  #L1db35a.  v7:= v7 - v6 @kind int;
  #L1db35c.  v4:= -1I;
  #L1db35e.  v6:= 0I;
  #L1db360.  v0:= 0.5F;
  #L1db364.  v1:= 1I;
  #L1db366.  if v9 == v4 then goto L1db39c;
  #L1db36a.  if v9 == 0 then goto L1db388;
  #L1db36e.  if v9 == v1 then goto L1db374;
  #L1db372.  goto L1db3d0;
  #L1db374.  v4:= (`float`) v5 @kind i2f;
  #L1db376.  v4:= v4 * v8 @kind float;
  #L1db37a.  v4:= v4 + v0 @kind float;
  #L1db37c.  v4:= (`int`) v4 @kind f2i;
  #L1db37e.  v3[v6]:= v5;
  #L1db382.  v3[v1]:= v4;
  #L1db386.  goto L1db3d0;
  #L1db388.  v4:= (`float`) v7 @kind i2f;
  #L1db38a.  v4:= v4 * v8 @kind float;
  #L1db38e.  v4:= v4 + v0 @kind float;
  #L1db390.  v4:= (`int`) v4 @kind f2i;
  #L1db392.  v3[v6]:= v4;
  #L1db396.  v3[v1]:= v7;
  #L1db39a.  goto L1db3d0;
  #L1db39c.  v4:= (`float`) v7 @kind i2f;
  #L1db39e.  v4:= v4 * v8 @kind float;
  #L1db3a2.  v4:= v4 + v0 @kind float;
  #L1db3a4.  v4:= (`int`) v4 @kind f2i;
  #L1db3a6.  v9:= (`float`) v5 @kind i2f;
  #L1db3a8.  v9:= v9 / v8 @kind float;
  #L1db3aa.  v9:= v9 + v0 @kind float;
  #L1db3ac.  v8:= (`int`) v9 @kind f2i;
  #L1db3ae.  if v4 > v5 then goto L1db3c0;
  #L1db3b2.  if v7 > v7 then goto L1db3c0;
  #L1db3b6.  v3[v6]:= v4;
  #L1db3ba.  v3[v1]:= v7;
  #L1db3be.  goto L1db3d0;
  #L1db3c0.  if v5 > v5 then goto L1db3d0;
  #L1db3c4.  if v8 > v7 then goto L1db3d0;
  #L1db3c8.  v3[v6]:= v5;
  #L1db3cc.  v3[v1]:= v8;
  #L1db3d0.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.n.l` v5 @kind this) @signature `Lc/f/b/k/n/l;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1daafc.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dab00.  v1:= v0.`c.f.b.k.e.a` @type ^`boolean` @kind boolean;
  #L1dab04.  if v1 == 0 then goto L1dab1a;
  #L1dab08.  v1:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dab0c.  call temp:= `getWidth`(v0) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1dab12.  v0:= temp;
  #L1dab14.  call `resolve`(v1, v0) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dab1a.  v0:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dab1e.  v0:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dab22.  if v0 != 0 then goto L1dac1c;
  #L1dab26.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dab2a.  call temp:= `getHorizontalDimensionBehaviour`(v0) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1dab30.  v0:= temp @kind object;
  #L1dab32.  v5.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` := v0 @kind object;
  #L1dab36.  v0:= v5.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dab3a.  v1:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1dab3e.  if v0 == v1 then goto L1daca0;
  #L1dab42.  v1:= `@@c.f.b.k.e$b.i` @type ^`c.f.b.k.e$b` @kind object;
  #L1dab46.  if v0 != v1 then goto L1dabf8;
  #L1dab4a.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dab4e.  call temp:= `getParent`(v0) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1dab54.  v0:= temp @kind object;
  #L1dab56.  if v0 == 0 then goto L1dab6a;
  #L1dab5a.  call temp:= `getHorizontalDimensionBehaviour`(v0) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1dab60.  v1:= temp @kind object;
  #L1dab62.  v2:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1dab66.  if v1 == v2 then goto L1dab7a;
  #L1dab6a.  call temp:= `getHorizontalDimensionBehaviour`(v0) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1dab70.  v1:= temp @kind object;
  #L1dab72.  v2:= `@@c.f.b.k.e$b.i` @type ^`c.f.b.k.e$b` @kind object;
  #L1dab76.  if v1 != v2 then goto L1dabf8;
  #L1dab7a.  call temp:= `getWidth`(v0) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1dab80.  v1:= temp;
  #L1dab82.  v2:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dab86.  v2:= v2.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1dab8a.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dab90.  v2:= temp;
  #L1dab92.  v1:= v1 - v2 @kind int;
  #L1dab94.  v2:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dab98.  v2:= v2.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1dab9c.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1daba2.  v2:= temp;
  #L1daba4.  v1:= v1 - v2 @kind int;
  #L1daba6.  v2:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dabaa.  v3:= v0.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dabae.  v3:= v3.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dabb2.  v4:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dabb6.  v4:= v4.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1dabba.  call temp:= `getMargin`(v4) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dabc0.  v4:= temp;
  #L1dabc2.  call `addTarget`(v5, v2, v3, v4) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dabc8.  v2:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dabcc.  v0:= v0.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dabd0.  v0:= v0.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dabd4.  v3:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dabd8.  v3:= v3.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1dabdc.  call temp:= `getMargin`(v3) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dabe2.  v3:= temp;
  #L1dabe4.  v3:= -v3 @kind int;
  #L1dabe6.  call `addTarget`(v5, v2, v0, v3) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dabec.  v0:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dabf0.  call `resolve`(v0, v1) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dabf6.  return @kind void;
  #L1dabf8.  v0:= v5.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dabfc.  v1:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1dac00.  if v0 != v1 then goto L1daca0;
  #L1dac04.  v0:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dac08.  v1:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dac0c.  call temp:= `getWidth`(v1) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1dac12.  v1:= temp;
  #L1dac14.  call `resolve`(v0, v1) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dac1a.  goto L1daca0;
  #L1dac1c.  v0:= v5.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dac20.  v1:= `@@c.f.b.k.e$b.i` @type ^`c.f.b.k.e$b` @kind object;
  #L1dac24.  if v0 != v1 then goto L1daca0;
  #L1dac28.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dac2c.  call temp:= `getParent`(v0) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1dac32.  v0:= temp @kind object;
  #L1dac34.  if v0 == 0 then goto L1dac48;
  #L1dac38.  call temp:= `getHorizontalDimensionBehaviour`(v0) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1dac3e.  v1:= temp @kind object;
  #L1dac40.  v2:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1dac44.  if v1 == v2 then goto L1dac58;
  #L1dac48.  call temp:= `getHorizontalDimensionBehaviour`(v0) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1dac4e.  v1:= temp @kind object;
  #L1dac50.  v2:= `@@c.f.b.k.e$b.i` @type ^`c.f.b.k.e$b` @kind object;
  #L1dac54.  if v1 != v2 then goto L1daca0;
  #L1dac58.  v1:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dac5c.  v2:= v0.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dac60.  v2:= v2.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dac64.  v3:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dac68.  v3:= v3.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1dac6c.  call temp:= `getMargin`(v3) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dac72.  v3:= temp;
  #L1dac74.  call `addTarget`(v5, v1, v2, v3) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dac7a.  v1:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dac7e.  v0:= v0.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dac82.  v0:= v0.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dac86.  v2:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dac8a.  v2:= v2.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1dac8e.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dac94.  v2:= temp;
  #L1dac96.  v2:= -v2 @kind int;
  #L1dac98.  call `addTarget`(v5, v1, v0, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dac9e.  return @kind void;
  #L1daca0.  v0:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1daca4.  v0:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1daca8.  v1:= 0I;
  #L1dacaa.  v2:= 1I;
  #L1dacac.  if v0 == 0 then goto L1daec8;
  #L1dacb0.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dacb4.  v3:= v0.`c.f.b.k.e.a` @type ^`boolean` @kind boolean;
  #L1dacb8.  if v3 == 0 then goto L1daec8;
  #L1dacbc.  v3:= v0.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dacc0.  v4:= v3[v1] @kind object;
  #L1dacc4.  v4:= v4.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dacc8.  if v4 == 0 then goto L1dada4;
  #L1daccc.  v3:= v3[v2] @kind object;
  #L1dacd0.  v3:= v3.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dacd4.  if v3 == 0 then goto L1dada4;
  #L1dacd8.  call temp:= `isInHorizontalChain`(v0) @signature `Lc/f/b/k/e;.isInHorizontalChain:()Z` @kind virtual;
  #L1dacde.  v0:= temp;
  #L1dace0.  if v0 == 0 then goto L1dad22;
  #L1dace4.  v0:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dace8.  v3:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dacec.  v3:= v3.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dacf0.  v1:= v3[v1] @kind object;
  #L1dacf4.  call temp:= `getMargin`(v1) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dacfa.  v1:= temp;
  #L1dacfc.  v0.`c.f.b.k.n.f.f` @type ^`int` := v1;
  #L1dad00.  v0:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dad04.  v1:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dad08.  v1:= v1.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dad0c.  v1:= v1[v2] @kind object;
  #L1dad10.  call temp:= `getMargin`(v1) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dad16.  v1:= temp;
  #L1dad18.  v1:= -v1 @kind int;
  #L1dad1a.  v0.`c.f.b.k.n.f.f` @type ^`int` := v1;
  #L1dad1e.  goto L1db2dc;
  #L1dad22.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dad26.  v0:= v0.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dad2a.  v0:= v0[v1] @kind object;
  #L1dad2e.  call temp:= `getTarget`(v5, v0) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1dad34.  v0:= temp @kind object;
  #L1dad36.  if v0 == 0 then goto L1dad58;
  #L1dad3a.  v3:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dad3e.  v4:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dad42.  v4:= v4.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dad46.  v1:= v4[v1] @kind object;
  #L1dad4a.  call temp:= `getMargin`(v1) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dad50.  v1:= temp;
  #L1dad52.  call `addTarget`(v5, v3, v0, v1) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dad58.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dad5c.  v0:= v0.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dad60.  v0:= v0[v2] @kind object;
  #L1dad64.  call temp:= `getTarget`(v5, v0) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1dad6a.  v0:= temp @kind object;
  #L1dad6c.  if v0 == 0 then goto L1dad90;
  #L1dad70.  v1:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dad74.  v3:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dad78.  v3:= v3.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dad7c.  v3:= v3[v2] @kind object;
  #L1dad80.  call temp:= `getMargin`(v3) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dad86.  v3:= temp;
  #L1dad88.  v3:= -v3 @kind int;
  #L1dad8a.  call `addTarget`(v5, v1, v0, v3) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dad90.  v0:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dad94.  v0.`c.f.b.k.n.f.b` @type ^`boolean` := v2 @kind boolean;
  #L1dad98.  v0:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dad9c.  v0.`c.f.b.k.n.f.b` @type ^`boolean` := v2 @kind boolean;
  #L1dada0.  goto L1db2dc;
  #L1dada4.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dada8.  v3:= v0.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dadac.  v4:= v3[v1] @kind object;
  #L1dadb0.  v4:= v4.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dadb4.  if v4 == 0 then goto L1dae00;
  #L1dadb8.  v0:= v3[v1] @kind object;
  #L1dadbc.  call temp:= `getTarget`(v5, v0) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1dadc2.  v0:= temp @kind object;
  #L1dadc4.  if v0 == 0 then goto L1db2dc;
  #L1dadc8.  v2:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dadcc.  v3:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dadd0.  v3:= v3.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dadd4.  v1:= v3[v1] @kind object;
  #L1dadd8.  call temp:= `getMargin`(v1) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dadde.  v1:= temp;
  #L1dade0.  call `addTarget`(v5, v2, v0, v1) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dade6.  v0:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dadea.  v1:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dadee.  v2:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dadf2.  v2:= v2.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dadf6.  call `addTarget`(v5, v0, v1, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dadfc.  goto L1db2dc;
  #L1dae00.  v1:= v3[v2] @kind object;
  #L1dae04.  v1:= v1.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dae08.  if v1 == 0 then goto L1dae58;
  #L1dae0c.  v0:= v3[v2] @kind object;
  #L1dae10.  call temp:= `getTarget`(v5, v0) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1dae16.  v0:= temp @kind object;
  #L1dae18.  if v0 == 0 then goto L1db2dc;
  #L1dae1c.  v1:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dae20.  v3:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dae24.  v3:= v3.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1dae28.  v2:= v3[v2] @kind object;
  #L1dae2c.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1dae32.  v2:= temp;
  #L1dae34.  v2:= -v2 @kind int;
  #L1dae36.  call `addTarget`(v5, v1, v0, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dae3c.  v0:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dae40.  v1:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dae44.  v2:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dae48.  v2:= v2.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dae4c.  v2:= -v2 @kind int;
  #L1dae4e.  call `addTarget`(v5, v0, v1, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1dae54.  goto L1db2dc;
  #L1dae58.  v1:= instanceof @variable v0 @type ^`c.f.b.k.i` @kind boolean;
  #L1dae5c.  if v1 != 0 then goto L1db2dc;
  #L1dae60.  call temp:= `getParent`(v0) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1dae66.  v0:= temp @kind object;
  #L1dae68.  if v0 == 0 then goto L1db2dc;
  #L1dae6c.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dae70.  v1:= `@@c.f.b.k.d$b.l` @type ^`c.f.b.k.d$b` @kind object;
  #L1dae74.  call temp:= `getAnchor`(v0, v1) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1dae7a.  v0:= temp @kind object;
  #L1dae7c.  v0:= v0.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1dae80.  if v0 != 0 then goto L1db2dc;
  #L1dae84.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dae88.  call temp:= `getParent`(v0) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1dae8e.  v0:= temp @kind object;
  #L1dae90.  v0:= v0.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dae94.  v0:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dae98.  v1:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dae9c.  v2:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1daea0.  call temp:= `getX`(v2) @signature `Lc/f/b/k/e;.getX:()I` @kind virtual;
  #L1daea6.  v2:= temp;
  #L1daea8.  call `addTarget`(v5, v1, v0, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1daeae.  v0:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1daeb2.  v1:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1daeb6.  v2:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1daeba.  v2:= v2.`c.f.b.k.n.f.g` @type ^`int`;
  #L1daebe.  call `addTarget`(v5, v0, v1, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1daec4.  goto L1db2dc;
  #L1daec8.  v0:= v5.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1daecc.  v3:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1daed0.  if v0 != v3 then goto L1db13a;
  #L1daed4.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1daed8.  v3:= v0.`c.f.b.k.e.n` @type ^`int`;
  #L1daedc.  v4:= 2I;
  #L1daede.  if v3 == v4 then goto L1db0e0;
  #L1daee2.  v4:= 3I;
  #L1daee4.  if v3 == v4 then goto L1daeec;
  #L1daee8.  goto L1db13a;
  #L1daeec.  v3:= v0.`c.f.b.k.e.o` @type ^`int`;
  #L1daef0.  if v3 != v4 then goto L1db03a;
  #L1daef4.  v3:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1daef8.  v3.`c.f.b.k.n.f.a` @type ^`c.f.b.k.n.d` := v5 @kind object;
  #L1daefc.  v3:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1daf00.  v3.`c.f.b.k.n.f.a` @type ^`c.f.b.k.n.d` := v5 @kind object;
  #L1daf04.  v3:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1daf08.  v4:= v3.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1daf0c.  v4.`c.f.b.k.n.f.a` @type ^`c.f.b.k.n.d` := v5 @kind object;
  #L1daf10.  v3:= v3.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1daf14.  v3.`c.f.b.k.n.f.a` @type ^`c.f.b.k.n.d` := v5 @kind object;
  #L1daf18.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1daf1c.  v3.`c.f.b.k.n.f.a` @type ^`c.f.b.k.n.d` := v5 @kind object;
  #L1daf20.  call temp:= `isInVerticalChain`(v0) @signature `Lc/f/b/k/e;.isInVerticalChain:()Z` @kind virtual;
  #L1daf26.  v0:= temp;
  #L1daf28.  if v0 == 0 then goto L1dafd4;
  #L1daf2c.  v0:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1daf30.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1daf34.  v3:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1daf38.  v3:= v3.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1daf3c.  v3:= v3.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1daf40.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1daf46.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1daf4a.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1daf4e.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1daf52.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1daf56.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1daf5a.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1daf60.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1daf64.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1daf68.  v3:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1daf6c.  v3.`c.f.b.k.n.f.a` @type ^`c.f.b.k.n.d` := v5 @kind object;
  #L1daf70.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1daf74.  v3:= v3.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1daf78.  v0:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1daf7c.  call temp:= `add`(v3, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1daf82.  v0:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1daf86.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1daf8a.  v3:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1daf8e.  v3:= v3.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1daf92.  v3:= v3.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1daf96.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1daf9c.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dafa0.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dafa4.  v0:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dafa8.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1dafac.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dafb0.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dafb6.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dafba.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dafbe.  v0:= v0.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dafc2.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1dafc6.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dafca.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dafd0.  goto L1db13a;
  #L1dafd4.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dafd8.  call temp:= `isInHorizontalChain`(v0) @signature `Lc/f/b/k/e;.isInHorizontalChain:()Z` @kind virtual;
  #L1dafde.  v0:= temp;
  #L1dafe0.  if v0 == 0 then goto L1db01c;
  #L1dafe4.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dafe8.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dafec.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1daff0.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1daff4.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1daff8.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1daffe.  v0:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db002.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1db006.  v3:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db00a.  v3:= v3.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1db00e.  v3:= v3.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db012.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1db018.  goto L1db13a;
  #L1db01c.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db020.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1db024.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db028.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1db02c.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db030.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1db036.  goto L1db13a;
  #L1db03a.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1db03e.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db042.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db046.  v3:= v3.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1db04a.  call temp:= `add`(v3, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1db050.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1db054.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db058.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1db05e.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db062.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1db066.  v0:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db06a.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1db06e.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db072.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1db078.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db07c.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1db080.  v0:= v0.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db084.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1db088.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db08c.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1db092.  v0:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db096.  v0.`c.f.b.k.n.f.b` @type ^`boolean` := v2 @kind boolean;
  #L1db09a.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1db09e.  v3:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db0a2.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1db0a8.  v0:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db0ac.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1db0b0.  v3:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db0b4.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1db0ba.  v0:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db0be.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1db0c2.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db0c6.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1db0cc.  v0:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db0d0.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1db0d4.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db0d8.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1db0de.  goto L1db13a;
  #L1db0e0.  call temp:= `getParent`(v0) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1db0e6.  v0:= temp @kind object;
  #L1db0e8.  if v0 != 0 then goto L1db0ee;
  #L1db0ec.  goto L1db13a;
  #L1db0ee.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1db0f2.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db0f6.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db0fa.  v3:= v3.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1db0fe.  call temp:= `add`(v3, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1db104.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1db108.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db10c.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1db112.  v0:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db116.  v0.`c.f.b.k.n.f.b` @type ^`boolean` := v2 @kind boolean;
  #L1db11a.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1db11e.  v3:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db122.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1db128.  v0:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db12c.  v0:= v0.`c.f.b.k.n.f.k` @type ^`java.util.List` @kind object;
  #L1db130.  v3:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db134.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1db13a.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db13e.  v3:= v0.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1db142.  v4:= v3[v1] @kind object;
  #L1db146.  v4:= v4.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1db14a.  if v4 == 0 then goto L1db1e4;
  #L1db14e.  v3:= v3[v2] @kind object;
  #L1db152.  v3:= v3.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1db156.  if v3 == 0 then goto L1db1e4;
  #L1db15a.  call temp:= `isInHorizontalChain`(v0) @signature `Lc/f/b/k/e;.isInHorizontalChain:()Z` @kind virtual;
  #L1db160.  v0:= temp;
  #L1db162.  if v0 == 0 then goto L1db1a4;
  #L1db166.  v0:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db16a.  v3:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db16e.  v3:= v3.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1db172.  v1:= v3[v1] @kind object;
  #L1db176.  call temp:= `getMargin`(v1) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1db17c.  v1:= temp;
  #L1db17e.  v0.`c.f.b.k.n.f.f` @type ^`int` := v1;
  #L1db182.  v0:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db186.  v1:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db18a.  v1:= v1.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1db18e.  v1:= v1[v2] @kind object;
  #L1db192.  call temp:= `getMargin`(v1) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1db198.  v1:= temp;
  #L1db19a.  v1:= -v1 @kind int;
  #L1db19c.  v0.`c.f.b.k.n.f.f` @type ^`int` := v1;
  #L1db1a0.  goto L1db2dc;
  #L1db1a4.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db1a8.  v0:= v0.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1db1ac.  v0:= v0[v1] @kind object;
  #L1db1b0.  call temp:= `getTarget`(v5, v0) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1db1b6.  v0:= temp @kind object;
  #L1db1b8.  v1:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db1bc.  v1:= v1.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1db1c0.  v1:= v1[v2] @kind object;
  #L1db1c4.  call temp:= `getTarget`(v5, v1) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1db1ca.  v1:= temp @kind object;
  #L1db1cc.  call `addDependency`(v0, v5) @signature `Lc/f/b/k/n/f;.addDependency:(Lc/f/b/k/n/d;)V` @kind virtual;
  #L1db1d2.  call `addDependency`(v1, v5) @signature `Lc/f/b/k/n/f;.addDependency:(Lc/f/b/k/n/d;)V` @kind virtual;
  #L1db1d8.  v0:= `@@c.f.b.k.n.p$b.i` @type ^`c.f.b.k.n.p$b` @kind object;
  #L1db1dc.  v5.`c.f.b.k.n.p.j` @type ^`c.f.b.k.n.p$b` := v0 @kind object;
  #L1db1e0.  goto L1db2dc;
  #L1db1e4.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db1e8.  v3:= v0.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1db1ec.  v4:= v3[v1] @kind object;
  #L1db1f0.  v4:= v4.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1db1f4.  if v4 == 0 then goto L1db23a;
  #L1db1f8.  v0:= v3[v1] @kind object;
  #L1db1fc.  call temp:= `getTarget`(v5, v0) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1db202.  v0:= temp @kind object;
  #L1db204.  if v0 == 0 then goto L1db2dc;
  #L1db208.  v3:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db20c.  v4:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db210.  v4:= v4.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1db214.  v1:= v4[v1] @kind object;
  #L1db218.  call temp:= `getMargin`(v1) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1db21e.  v1:= temp;
  #L1db220.  call `addTarget`(v5, v3, v0, v1) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1db226.  v0:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db22a.  v1:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db22e.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db232.  call `addTarget`(v5, v0, v1, v2, v3) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;ILc/f/b/k/n/g;)V` @kind virtual;
  #L1db238.  goto L1db2dc;
  #L1db23a.  v1:= v3[v2] @kind object;
  #L1db23e.  v1:= v1.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1db242.  if v1 == 0 then goto L1db28c;
  #L1db246.  v0:= v3[v2] @kind object;
  #L1db24a.  call temp:= `getTarget`(v5, v0) @signature `Lc/f/b/k/n/p;.getTarget:(Lc/f/b/k/d;)Lc/f/b/k/n/f;` @kind virtual;
  #L1db250.  v0:= temp @kind object;
  #L1db252.  if v0 == 0 then goto L1db2dc;
  #L1db256.  v1:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db25a.  v3:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db25e.  v3:= v3.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1db262.  v2:= v3[v2] @kind object;
  #L1db266.  call temp:= `getMargin`(v2) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1db26c.  v2:= temp;
  #L1db26e.  v2:= -v2 @kind int;
  #L1db270.  call `addTarget`(v5, v1, v0, v2) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1db276.  v0:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db27a.  v1:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db27e.  v2:= -1I;
  #L1db280.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db284.  call `addTarget`(v5, v0, v1, v2, v3) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;ILc/f/b/k/n/g;)V` @kind virtual;
  #L1db28a.  goto L1db2dc;
  #L1db28c.  v1:= instanceof @variable v0 @type ^`c.f.b.k.i` @kind boolean;
  #L1db290.  if v1 != 0 then goto L1db2dc;
  #L1db294.  call temp:= `getParent`(v0) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1db29a.  v0:= temp @kind object;
  #L1db29c.  if v0 == 0 then goto L1db2dc;
  #L1db2a0.  v0:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db2a4.  call temp:= `getParent`(v0) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1db2aa.  v0:= temp @kind object;
  #L1db2ac.  v0:= v0.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1db2b0.  v0:= v0.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db2b4.  v1:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db2b8.  v3:= v5.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db2bc.  call temp:= `getX`(v3) @signature `Lc/f/b/k/e;.getX:()I` @kind virtual;
  #L1db2c2.  v3:= temp;
  #L1db2c4.  call `addTarget`(v5, v1, v0, v3) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;I)V` @kind virtual;
  #L1db2ca.  v0:= v5.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db2ce.  v1:= v5.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db2d2.  v3:= v5.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db2d6.  call `addTarget`(v5, v0, v1, v2, v3) @signature `Lc/f/b/k/n/p;.addTarget:(Lc/f/b/k/n/f;Lc/f/b/k/n/f;ILc/f/b/k/n/g;)V` @kind virtual;
  #L1db2dc.  return @kind void;
}
procedure `void` `applyToWidget`(`c.f.b.k.n.l` v2 @kind this) @signature `Lc/f/b/k/n/l;.applyToWidget:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1db2f0.  v0:= v2.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db2f4.  v1:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1db2f8.  if v1 == 0 then goto L1db30a;
  #L1db2fc.  v1:= v2.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db300.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db304.  call `setX`(v1, v0) @signature `Lc/f/b/k/e;.setX:(I)V` @kind virtual;
  #L1db30a.  return @kind void;
}
procedure `void` `b`(`c.f.b.k.n.l` v1 @kind this) @signature `Lc/f/b/k/n/l;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L1db31c.  v0:= 0I;
  #L1db31e.  v1.`c.f.b.k.n.p.c` @type ^`c.f.b.k.n.m` := v0 @kind object;
  #L1db322.  v0:= v1.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db326.  call `clear`(v0) @signature `Lc/f/b/k/n/f;.clear:()V` @kind virtual;
  #L1db32c.  v0:= v1.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db330.  call `clear`(v0) @signature `Lc/f/b/k/n/f;.clear:()V` @kind virtual;
  #L1db336.  v0:= v1.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db33a.  call `clear`(v0) @signature `Lc/f/b/k/n/f;.clear:()V` @kind virtual;
  #L1db340.  v0:= 0I;
  #L1db342.  v1.`c.f.b.k.n.p.g` @type ^`boolean` := v0 @kind boolean;
  #L1db346.  return @kind void;
}
procedure `boolean` `c`(`c.f.b.k.n.l` v3 @kind this) @signature `Lc/f/b/k/n/l;.c:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1daa34.  v0:= v3.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1daa38.  v1:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1daa3c.  v2:= 1I;
  #L1daa3e.  if v0 != v1 then goto L1daa54;
  #L1daa42.  v0:= v3.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1daa46.  v0:= v0.`c.f.b.k.e.n` @type ^`int`;
  #L1daa4a.  if v0 != 0 then goto L1daa50;
  #L1daa4e.  return v2;
  #L1daa50.  v0:= 0I;
  #L1daa52.  return v0;
  #L1daa54.  return v2;
}
procedure `void` `d`(`c.f.b.k.n.l` v2 @kind this) @signature `Lc/f/b/k/n/l;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1db3e4.  v0:= 0I;
  #L1db3e6.  v2.`c.f.b.k.n.p.g` @type ^`boolean` := v0 @kind boolean;
  #L1db3ea.  v1:= v2.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db3ee.  call `clear`(v1) @signature `Lc/f/b/k/n/f;.clear:()V` @kind virtual;
  #L1db3f4.  v1:= v2.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db3f8.  v1.`c.f.b.k.n.f.j` @type ^`boolean` := v0 @kind boolean;
  #L1db3fc.  v1:= v2.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db400.  call `clear`(v1) @signature `Lc/f/b/k/n/f;.clear:()V` @kind virtual;
  #L1db406.  v1:= v2.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db40a.  v1.`c.f.b.k.n.f.j` @type ^`boolean` := v0 @kind boolean;
  #L1db40e.  v1:= v2.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db412.  v1.`c.f.b.k.n.f.j` @type ^`boolean` := v0 @kind boolean;
  #L1db416.  return @kind void;
}
procedure `java.lang.String` `toString`(`c.f.b.k.n.l` v2 @kind this) @signature `Lc/f/b/k/n/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1daa68.  v0:= new `java.lang.StringBuilder`;
  #L1daa6c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1daa72.  v1:= "HorizontalRun " @kind object;
  #L1daa76.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1daa7c.  v1:= v2.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1daa80.  call temp:= `getDebugName`(v1) @signature `Lc/f/b/k/e;.getDebugName:()Ljava/lang/String;` @kind virtual;
  #L1daa86.  v1:= temp @kind object;
  #L1daa88.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1daa8e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1daa94.  v0:= temp @kind object;
  #L1daa96.  return v0 @kind object;
}
procedure `void` `update`(`c.f.b.k.n.l` v16 @kind this, `c.f.b.k.n.d` v17 @kind object) @signature `Lc/f/b/k/n/l;.update:(Lc/f/b/k/n/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L1db428.  v8:= v16 @kind object;
  #L1db42c.  v0:= `@@c.f.b.k.n.l$a.a` @type ^`int`[] @kind object;
  #L1db430.  v1:= v8.`c.f.b.k.n.p.j` @type ^`c.f.b.k.n.p$b` @kind object;
  #L1db434.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1db43a.  v1:= temp;
  #L1db43c.  v0:= v0[v1];
  #L1db440.  v1:= 2I;
  #L1db442.  v2:= 3I;
  #L1db444.  v9:= 1I;
  #L1db446.  v10:= 0I;
  #L1db448.  if v0 == v9 then goto L1db47a;
  #L1db44c.  if v0 == v1 then goto L1db46e;
  #L1db450.  if v0 == v2 then goto L1db456;
  #L1db454.  goto L1db484;
  #L1db456.  v0:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db45a.  v1:= v0.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1db45e.  v0:= v0.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1db462.  v3:= v17 @kind object;
  #L1db466.  call `updateRunCenter`(v8, v3, v1, v0, v10) @signature `Lc/f/b/k/n/p;.updateRunCenter:(Lc/f/b/k/n/d;Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind virtual;
  #L1db46c.  return @kind void;
  #L1db46e.  v3:= v17 @kind object;
  #L1db472.  call `updateRunEnd`(v16, v17) @signature `Lc/f/b/k/n/p;.updateRunEnd:(Lc/f/b/k/n/d;)V` @kind virtual;
  #L1db478.  goto L1db484;
  #L1db47a.  v3:= v17 @kind object;
  #L1db47e.  call `updateRunStart`(v16, v17) @signature `Lc/f/b/k/n/p;.updateRunStart:(Lc/f/b/k/n/d;)V` @kind virtual;
  #L1db484.  v0:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db488.  v0:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1db48c.  v11:= 0.5F;
  #L1db490.  if v0 != 0 then goto L1dba84;
  #L1db494.  v0:= v8.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1db498.  v3:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1db49c.  if v0 != v3 then goto L1dba84;
  #L1db4a0.  v0:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db4a4.  v3:= v0.`c.f.b.k.e.n` @type ^`int`;
  #L1db4a8.  if v3 == v1 then goto L1dba48;
  #L1db4ac.  if v3 == v2 then goto L1db4b4;
  #L1db4b0.  goto L1dba84;
  #L1db4b4.  v1:= v0.`c.f.b.k.e.o` @type ^`int`;
  #L1db4b8.  v3:= -1I;
  #L1db4ba.  if v1 == 0 then goto L1db546;
  #L1db4be.  if v1 != v2 then goto L1db4c4;
  #L1db4c2.  goto L1db546;
  #L1db4c4.  call temp:= `getDimensionRatioSide`(v0) @signature `Lc/f/b/k/e;.getDimensionRatioSide:()I` @kind virtual;
  #L1db4ca.  v0:= temp;
  #L1db4cc.  if v0 == v3 then goto L1db516;
  #L1db4d0.  if v0 == 0 then goto L1db4f8;
  #L1db4d4.  if v0 == v9 then goto L1db4dc;
  #L1db4d8.  v0:= 0I;
  #L1db4da.  goto L1db538;
  #L1db4dc.  v0:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db4e0.  v1:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1db4e4.  v1:= v1.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db4e8.  v1:= v1.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db4ec.  v1:= (`float`) v1 @kind i2f;
  #L1db4ee.  call temp:= `getDimensionRatio`(v0) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1db4f4.  v0:= temp;
  #L1db4f6.  goto L1db530;
  #L1db4f8.  v0:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db4fc.  v1:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1db500.  v1:= v1.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db504.  v1:= v1.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db508.  v1:= (`float`) v1 @kind i2f;
  #L1db50a.  call temp:= `getDimensionRatio`(v0) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1db510.  v0:= temp;
  #L1db512.  v1:= v1 / v0 @kind float;
  #L1db514.  goto L1db534;
  #L1db516.  v0:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db51a.  v1:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1db51e.  v1:= v1.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db522.  v1:= v1.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db526.  v1:= (`float`) v1 @kind i2f;
  #L1db528.  call temp:= `getDimensionRatio`(v0) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1db52e.  v0:= temp;
  #L1db530.  v1:= v1 * v0 @kind float;
  #L1db534.  v1:= v1 + v11 @kind float;
  #L1db536.  v0:= (`int`) v1 @kind f2i;
  #L1db538.  v1:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db53c.  call `resolve`(v1, v0) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1db542.  goto L1dba84;
  #L1db546.  v0:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db54a.  v1:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1db54e.  v12:= v1.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db552.  v13:= v1.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db556.  v0:= v0.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1db55a.  v0:= v0.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1db55e.  if v0 == 0 then goto L1db566;
  #L1db562.  v0:= 1I;
  #L1db564.  goto L1db568;
  #L1db566.  v0:= 0I;
  #L1db568.  v1:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db56c.  v1:= v1.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1db570.  v1:= v1.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1db574.  if v1 == 0 then goto L1db57c;
  #L1db578.  v1:= 1I;
  #L1db57a.  goto L1db57e;
  #L1db57c.  v1:= 0I;
  #L1db57e.  v2:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db582.  v2:= v2.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1db586.  v2:= v2.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1db58a.  if v2 == 0 then goto L1db592;
  #L1db58e.  v2:= 1I;
  #L1db590.  goto L1db594;
  #L1db592.  v2:= 0I;
  #L1db594.  v4:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db598.  v4:= v4.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1db59c.  v4:= v4.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1db5a0.  if v4 == 0 then goto L1db5a8;
  #L1db5a4.  v4:= 1I;
  #L1db5a6.  goto L1db5aa;
  #L1db5a8.  v4:= 0I;
  #L1db5aa.  v5:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db5ae.  call temp:= `getDimensionRatioSide`(v5) @signature `Lc/f/b/k/e;.getDimensionRatioSide:()I` @kind virtual;
  #L1db5b4.  v14:= temp;
  #L1db5b6.  if v0 == 0 then goto L1db83c;
  #L1db5ba.  if v1 == 0 then goto L1db83c;
  #L1db5be.  if v2 == 0 then goto L1db83c;
  #L1db5c2.  if v4 == 0 then goto L1db83c;
  #L1db5c6.  v0:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db5ca.  call temp:= `getDimensionRatio`(v0) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1db5d0.  v15:= temp;
  #L1db5d2.  v0:= v12.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1db5d6.  if v0 == 0 then goto L1db698;
  #L1db5da.  v0:= v13.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1db5de.  if v0 == 0 then goto L1db698;
  #L1db5e2.  v0:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db5e6.  v1:= v0.`c.f.b.k.n.f.c` @type ^`boolean` @kind boolean;
  #L1db5ea.  if v1 == 0 then goto L1db696;
  #L1db5ee.  v1:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db5f2.  v1:= v1.`c.f.b.k.n.f.c` @type ^`boolean` @kind boolean;
  #L1db5f6.  if v1 != 0 then goto L1db5fc;
  #L1db5fa.  goto L1db696;
  #L1db5fc.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1db600.  call temp:= `get`(v0, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1db606.  v0:= temp @kind object;
  #L1db608.  v0:= (`c.f.b.k.n.f`) v0 @kind object;
  #L1db60c.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db610.  v1:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db614.  v1:= v1.`c.f.b.k.n.f.f` @type ^`int`;
  #L1db618.  v2:= v0 + v1 @kind int;
  #L1db61c.  v0:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db620.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1db624.  call temp:= `get`(v0, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1db62a.  v0:= temp @kind object;
  #L1db62c.  v0:= (`c.f.b.k.n.f`) v0 @kind object;
  #L1db630.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db634.  v1:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db638.  v1:= v1.`c.f.b.k.n.f.f` @type ^`int`;
  #L1db63c.  v3:= v0 - v1 @kind int;
  #L1db640.  v0:= v12.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db644.  v1:= v12.`c.f.b.k.n.f.f` @type ^`int`;
  #L1db648.  v4:= v0 + v1 @kind int;
  #L1db64c.  v0:= v13.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db650.  v1:= v13.`c.f.b.k.n.f.f` @type ^`int`;
  #L1db654.  v5:= v0 - v1 @kind int;
  #L1db658.  v1:= `@@c.f.b.k.n.l.k` @type ^`int`[] @kind object;
  #L1db65c.  v0:= v16 @kind object;
  #L1db660.  v6:= v15;
  #L1db662.  v7:= v14;
  #L1db664.  call `a`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lc/f/b/k/n/l;.a:([IIIIIFI)V` @kind direct;
  #L1db66a.  v0:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db66e.  v1:= `@@c.f.b.k.n.l.k` @type ^`int`[] @kind object;
  #L1db672.  v1:= v1[v10];
  #L1db676.  call `resolve`(v0, v1) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1db67c.  v0:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db680.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1db684.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db688.  v1:= `@@c.f.b.k.n.l.k` @type ^`int`[] @kind object;
  #L1db68c.  v1:= v1[v9];
  #L1db690.  call `resolve`(v0, v1) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1db696.  return @kind void;
  #L1db698.  v0:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db69c.  v1:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1db6a0.  if v1 == 0 then goto L1db752;
  #L1db6a4.  v1:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db6a8.  v2:= v1.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1db6ac.  if v2 == 0 then goto L1db752;
  #L1db6b0.  v2:= v12.`c.f.b.k.n.f.c` @type ^`boolean` @kind boolean;
  #L1db6b4.  if v2 == 0 then goto L1db750;
  #L1db6b8.  v2:= v13.`c.f.b.k.n.f.c` @type ^`boolean` @kind boolean;
  #L1db6bc.  if v2 != 0 then goto L1db6c2;
  #L1db6c0.  goto L1db750;
  #L1db6c2.  v2:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db6c6.  v0:= v0.`c.f.b.k.n.f.f` @type ^`int`;
  #L1db6ca.  v2:= v2 + v0 @kind int;
  #L1db6cc.  v0:= v1.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db6d0.  v1:= v1.`c.f.b.k.n.f.f` @type ^`int`;
  #L1db6d4.  v3:= v0 - v1 @kind int;
  #L1db6d8.  v0:= v12.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1db6dc.  call temp:= `get`(v0, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1db6e2.  v0:= temp @kind object;
  #L1db6e4.  v0:= (`c.f.b.k.n.f`) v0 @kind object;
  #L1db6e8.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db6ec.  v1:= v12.`c.f.b.k.n.f.f` @type ^`int`;
  #L1db6f0.  v4:= v0 + v1 @kind int;
  #L1db6f4.  v0:= v13.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1db6f8.  call temp:= `get`(v0, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1db6fe.  v0:= temp @kind object;
  #L1db700.  v0:= (`c.f.b.k.n.f`) v0 @kind object;
  #L1db704.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db708.  v1:= v13.`c.f.b.k.n.f.f` @type ^`int`;
  #L1db70c.  v5:= v0 - v1 @kind int;
  #L1db710.  v1:= `@@c.f.b.k.n.l.k` @type ^`int`[] @kind object;
  #L1db714.  v0:= v16 @kind object;
  #L1db718.  v6:= v15;
  #L1db71a.  v7:= v14;
  #L1db71c.  call `a`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lc/f/b/k/n/l;.a:([IIIIIFI)V` @kind direct;
  #L1db722.  v0:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db726.  v1:= `@@c.f.b.k.n.l.k` @type ^`int`[] @kind object;
  #L1db72a.  v1:= v1[v10];
  #L1db72e.  call `resolve`(v0, v1) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1db734.  v0:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db738.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1db73c.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db740.  v1:= `@@c.f.b.k.n.l.k` @type ^`int`[] @kind object;
  #L1db744.  v1:= v1[v9];
  #L1db748.  call `resolve`(v0, v1) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1db74e.  goto L1db752;
  #L1db750.  return @kind void;
  #L1db752.  v0:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db756.  v1:= v0.`c.f.b.k.n.f.c` @type ^`boolean` @kind boolean;
  #L1db75a.  if v1 == 0 then goto L1db83a;
  #L1db75e.  v1:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db762.  v1:= v1.`c.f.b.k.n.f.c` @type ^`boolean` @kind boolean;
  #L1db766.  if v1 == 0 then goto L1db83a;
  #L1db76a.  v1:= v12.`c.f.b.k.n.f.c` @type ^`boolean` @kind boolean;
  #L1db76e.  if v1 == 0 then goto L1db83a;
  #L1db772.  v1:= v13.`c.f.b.k.n.f.c` @type ^`boolean` @kind boolean;
  #L1db776.  if v1 != 0 then goto L1db77c;
  #L1db77a.  goto L1db83a;
  #L1db77c.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1db780.  call temp:= `get`(v0, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1db786.  v0:= temp @kind object;
  #L1db788.  v0:= (`c.f.b.k.n.f`) v0 @kind object;
  #L1db78c.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db790.  v1:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db794.  v1:= v1.`c.f.b.k.n.f.f` @type ^`int`;
  #L1db798.  v2:= v0 + v1 @kind int;
  #L1db79c.  v0:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db7a0.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1db7a4.  call temp:= `get`(v0, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1db7aa.  v0:= temp @kind object;
  #L1db7ac.  v0:= (`c.f.b.k.n.f`) v0 @kind object;
  #L1db7b0.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db7b4.  v1:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db7b8.  v1:= v1.`c.f.b.k.n.f.f` @type ^`int`;
  #L1db7bc.  v3:= v0 - v1 @kind int;
  #L1db7c0.  v0:= v12.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1db7c4.  call temp:= `get`(v0, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1db7ca.  v0:= temp @kind object;
  #L1db7cc.  v0:= (`c.f.b.k.n.f`) v0 @kind object;
  #L1db7d0.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db7d4.  v1:= v12.`c.f.b.k.n.f.f` @type ^`int`;
  #L1db7d8.  v4:= v0 + v1 @kind int;
  #L1db7dc.  v0:= v13.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1db7e0.  call temp:= `get`(v0, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1db7e6.  v0:= temp @kind object;
  #L1db7e8.  v0:= (`c.f.b.k.n.f`) v0 @kind object;
  #L1db7ec.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db7f0.  v1:= v13.`c.f.b.k.n.f.f` @type ^`int`;
  #L1db7f4.  v5:= v0 - v1 @kind int;
  #L1db7f8.  v1:= `@@c.f.b.k.n.l.k` @type ^`int`[] @kind object;
  #L1db7fc.  v0:= v16 @kind object;
  #L1db800.  v6:= v15;
  #L1db802.  v7:= v14;
  #L1db804.  call `a`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lc/f/b/k/n/l;.a:([IIIIIFI)V` @kind direct;
  #L1db80a.  v0:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db80e.  v1:= `@@c.f.b.k.n.l.k` @type ^`int`[] @kind object;
  #L1db812.  v1:= v1[v10];
  #L1db816.  call `resolve`(v0, v1) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1db81c.  v0:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db820.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1db824.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db828.  v1:= `@@c.f.b.k.n.l.k` @type ^`int`[] @kind object;
  #L1db82c.  v1:= v1[v9];
  #L1db830.  call `resolve`(v0, v1) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1db836.  goto L1dba84;
  #L1db83a.  return @kind void;
  #L1db83c.  if v0 == 0 then goto L1db952;
  #L1db840.  if v2 == 0 then goto L1db952;
  #L1db844.  v0:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db848.  v0:= v0.`c.f.b.k.n.f.c` @type ^`boolean` @kind boolean;
  #L1db84c.  if v0 == 0 then goto L1db950;
  #L1db850.  v0:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db854.  v0:= v0.`c.f.b.k.n.f.c` @type ^`boolean` @kind boolean;
  #L1db858.  if v0 != 0 then goto L1db860;
  #L1db85c.  goto L1db950;
  #L1db860.  v0:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db864.  call temp:= `getDimensionRatio`(v0) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1db86a.  v0:= temp;
  #L1db86c.  v1:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db870.  v1:= v1.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1db874.  call temp:= `get`(v1, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1db87a.  v1:= temp @kind object;
  #L1db87c.  v1:= (`c.f.b.k.n.f`) v1 @kind object;
  #L1db880.  v1:= v1.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db884.  v2:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1db888.  v2:= v2.`c.f.b.k.n.f.f` @type ^`int`;
  #L1db88c.  v1:= v1 + v2 @kind int;
  #L1db88e.  v2:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db892.  v2:= v2.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1db896.  call temp:= `get`(v2, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1db89c.  v2:= temp @kind object;
  #L1db89e.  v2:= (`c.f.b.k.n.f`) v2 @kind object;
  #L1db8a2.  v2:= v2.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db8a6.  v4:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1db8aa.  v4:= v4.`c.f.b.k.n.f.f` @type ^`int`;
  #L1db8ae.  v2:= v2 - v4 @kind int;
  #L1db8b0.  if v14 == v3 then goto L1db908;
  #L1db8b4.  if v14 == 0 then goto L1db908;
  #L1db8b8.  if v14 == v9 then goto L1db8c0;
  #L1db8bc.  goto L1dba84;
  #L1db8c0.  v2:= v2 - v1 @kind int;
  #L1db8c2.  call temp:= `getLimitedDimension`(v8, v2, v10) @signature `Lc/f/b/k/n/p;.getLimitedDimension:(II)I` @kind virtual;
  #L1db8c8.  v1:= temp;
  #L1db8ca.  v2:= (`float`) v1 @kind i2f;
  #L1db8cc.  v2:= v2 / v0 @kind float;
  #L1db8ce.  v2:= v2 + v11 @kind float;
  #L1db8d0.  v2:= (`int`) v2 @kind f2i;
  #L1db8d2.  call temp:= `getLimitedDimension`(v8, v2, v9) @signature `Lc/f/b/k/n/p;.getLimitedDimension:(II)I` @kind virtual;
  #L1db8d8.  v3:= temp;
  #L1db8da.  if v2 == v3 then goto L1db8e8;
  #L1db8de.  v1:= (`float`) v3 @kind i2f;
  #L1db8e0.  v1:= v1 * v0 @kind float;
  #L1db8e4.  v1:= v1 + v11 @kind float;
  #L1db8e6.  v1:= (`int`) v1 @kind f2i;
  #L1db8e8.  v0:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db8ec.  call `resolve`(v0, v1) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1db8f2.  v0:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db8f6.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1db8fa.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db8fe.  call `resolve`(v0, v3) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1db904.  goto L1dba84;
  #L1db908.  v2:= v2 - v1 @kind int;
  #L1db90a.  call temp:= `getLimitedDimension`(v8, v2, v10) @signature `Lc/f/b/k/n/p;.getLimitedDimension:(II)I` @kind virtual;
  #L1db910.  v1:= temp;
  #L1db912.  v2:= (`float`) v1 @kind i2f;
  #L1db914.  v2:= v2 * v0 @kind float;
  #L1db918.  v2:= v2 + v11 @kind float;
  #L1db91a.  v2:= (`int`) v2 @kind f2i;
  #L1db91c.  call temp:= `getLimitedDimension`(v8, v2, v9) @signature `Lc/f/b/k/n/p;.getLimitedDimension:(II)I` @kind virtual;
  #L1db922.  v3:= temp;
  #L1db924.  if v2 == v3 then goto L1db930;
  #L1db928.  v1:= (`float`) v3 @kind i2f;
  #L1db92a.  v1:= v1 / v0 @kind float;
  #L1db92c.  v1:= v1 + v11 @kind float;
  #L1db92e.  v1:= (`int`) v1 @kind f2i;
  #L1db930.  v0:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db934.  call `resolve`(v0, v1) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1db93a.  v0:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db93e.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1db942.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db946.  call `resolve`(v0, v3) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1db94c.  goto L1dba84;
  #L1db950.  return @kind void;
  #L1db952.  if v1 == 0 then goto L1dba84;
  #L1db956.  if v4 == 0 then goto L1dba84;
  #L1db95a.  v0:= v12.`c.f.b.k.n.f.c` @type ^`boolean` @kind boolean;
  #L1db95e.  if v0 == 0 then goto L1dba46;
  #L1db962.  v0:= v13.`c.f.b.k.n.f.c` @type ^`boolean` @kind boolean;
  #L1db966.  if v0 != 0 then goto L1db96c;
  #L1db96a.  goto L1dba46;
  #L1db96c.  v0:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db970.  call temp:= `getDimensionRatio`(v0) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1db976.  v0:= temp;
  #L1db978.  v1:= v12.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1db97c.  call temp:= `get`(v1, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1db982.  v1:= temp @kind object;
  #L1db984.  v1:= (`c.f.b.k.n.f`) v1 @kind object;
  #L1db988.  v1:= v1.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db98c.  v2:= v12.`c.f.b.k.n.f.f` @type ^`int`;
  #L1db990.  v1:= v1 + v2 @kind int;
  #L1db992.  v2:= v13.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1db996.  call temp:= `get`(v2, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1db99c.  v2:= temp @kind object;
  #L1db99e.  v2:= (`c.f.b.k.n.f`) v2 @kind object;
  #L1db9a2.  v2:= v2.`c.f.b.k.n.f.g` @type ^`int`;
  #L1db9a6.  v4:= v13.`c.f.b.k.n.f.f` @type ^`int`;
  #L1db9aa.  v2:= v2 - v4 @kind int;
  #L1db9ac.  if v14 == v3 then goto L1dba00;
  #L1db9b0.  if v14 == 0 then goto L1db9ba;
  #L1db9b4.  if v14 == v9 then goto L1dba00;
  #L1db9b8.  goto L1dba84;
  #L1db9ba.  v2:= v2 - v1 @kind int;
  #L1db9bc.  call temp:= `getLimitedDimension`(v8, v2, v9) @signature `Lc/f/b/k/n/p;.getLimitedDimension:(II)I` @kind virtual;
  #L1db9c2.  v1:= temp;
  #L1db9c4.  v2:= (`float`) v1 @kind i2f;
  #L1db9c6.  v2:= v2 * v0 @kind float;
  #L1db9ca.  v2:= v2 + v11 @kind float;
  #L1db9cc.  v2:= (`int`) v2 @kind f2i;
  #L1db9ce.  call temp:= `getLimitedDimension`(v8, v2, v10) @signature `Lc/f/b/k/n/p;.getLimitedDimension:(II)I` @kind virtual;
  #L1db9d4.  v3:= temp;
  #L1db9d6.  if v2 == v3 then goto L1db9e2;
  #L1db9da.  v1:= (`float`) v3 @kind i2f;
  #L1db9dc.  v1:= v1 / v0 @kind float;
  #L1db9de.  v1:= v1 + v11 @kind float;
  #L1db9e0.  v1:= (`int`) v1 @kind f2i;
  #L1db9e2.  v0:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db9e6.  call `resolve`(v0, v3) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1db9ec.  v0:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1db9f0.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1db9f4.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1db9f8.  call `resolve`(v0, v1) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1db9fe.  goto L1dba84;
  #L1dba00.  v2:= v2 - v1 @kind int;
  #L1dba02.  call temp:= `getLimitedDimension`(v8, v2, v9) @signature `Lc/f/b/k/n/p;.getLimitedDimension:(II)I` @kind virtual;
  #L1dba08.  v1:= temp;
  #L1dba0a.  v2:= (`float`) v1 @kind i2f;
  #L1dba0c.  v2:= v2 / v0 @kind float;
  #L1dba0e.  v2:= v2 + v11 @kind float;
  #L1dba10.  v2:= (`int`) v2 @kind f2i;
  #L1dba12.  call temp:= `getLimitedDimension`(v8, v2, v10) @signature `Lc/f/b/k/n/p;.getLimitedDimension:(II)I` @kind virtual;
  #L1dba18.  v3:= temp;
  #L1dba1a.  if v2 == v3 then goto L1dba28;
  #L1dba1e.  v1:= (`float`) v3 @kind i2f;
  #L1dba20.  v1:= v1 * v0 @kind float;
  #L1dba24.  v1:= v1 + v11 @kind float;
  #L1dba26.  v1:= (`int`) v1 @kind f2i;
  #L1dba28.  v0:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dba2c.  call `resolve`(v0, v3) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dba32.  v0:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dba36.  v0:= v0.`c.f.b.k.e.e` @type ^`c.f.b.k.n.n` @kind object;
  #L1dba3a.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dba3e.  call `resolve`(v0, v1) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dba44.  goto L1dba84;
  #L1dba46.  return @kind void;
  #L1dba48.  call temp:= `getParent`(v0) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1dba4e.  v0:= temp @kind object;
  #L1dba50.  if v0 == 0 then goto L1dba84;
  #L1dba54.  v0:= v0.`c.f.b.k.e.d` @type ^`c.f.b.k.n.l` @kind object;
  #L1dba58.  v0:= v0.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dba5c.  v1:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dba60.  if v1 == 0 then goto L1dba84;
  #L1dba64.  v1:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dba68.  v1:= v1.`c.f.b.k.e.s` @type ^`float`;
  #L1dba6c.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dba70.  v0:= (`float`) v0 @kind i2f;
  #L1dba72.  v0:= v0 * v1 @kind float;
  #L1dba76.  v0:= v0 + v11 @kind float;
  #L1dba78.  v0:= (`int`) v0 @kind f2i;
  #L1dba7a.  v1:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dba7e.  call `resolve`(v1, v0) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dba84.  v0:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dba88.  v1:= v0.`c.f.b.k.n.f.c` @type ^`boolean` @kind boolean;
  #L1dba8c.  if v1 == 0 then goto L1dbcc8;
  #L1dba90.  v1:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dba94.  v2:= v1.`c.f.b.k.n.f.c` @type ^`boolean` @kind boolean;
  #L1dba98.  if v2 != 0 then goto L1dbaa0;
  #L1dba9c.  goto L1dbcc8;
  #L1dbaa0.  v0:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dbaa4.  if v0 == 0 then goto L1dbabe;
  #L1dbaa8.  v0:= v1.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dbaac.  if v0 == 0 then goto L1dbabe;
  #L1dbab0.  v0:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dbab4.  v0:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dbab8.  if v0 == 0 then goto L1dbabe;
  #L1dbabc.  return @kind void;
  #L1dbabe.  v0:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dbac2.  v0:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dbac6.  if v0 != 0 then goto L1dbb52;
  #L1dbaca.  v0:= v8.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dbace.  v1:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1dbad2.  if v0 != v1 then goto L1dbb52;
  #L1dbad6.  v0:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dbada.  v1:= v0.`c.f.b.k.e.n` @type ^`int`;
  #L1dbade.  if v1 != 0 then goto L1dbb52;
  #L1dbae2.  call temp:= `isInHorizontalChain`(v0) @signature `Lc/f/b/k/e;.isInHorizontalChain:()Z` @kind virtual;
  #L1dbae8.  v0:= temp;
  #L1dbaea.  if v0 != 0 then goto L1dbb52;
  #L1dbaee.  v0:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbaf2.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dbaf6.  call temp:= `get`(v0, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1dbafc.  v0:= temp @kind object;
  #L1dbafe.  v0:= (`c.f.b.k.n.f`) v0 @kind object;
  #L1dbb02.  v1:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbb06.  v1:= v1.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dbb0a.  call temp:= `get`(v1, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1dbb10.  v1:= temp @kind object;
  #L1dbb12.  v1:= (`c.f.b.k.n.f`) v1 @kind object;
  #L1dbb16.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dbb1a.  v2:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbb1e.  v3:= v2.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbb22.  v0:= v0 + v3 @kind int;
  #L1dbb24.  v1:= v1.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dbb28.  v3:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbb2c.  v3:= v3.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbb30.  v1:= v1 + v3 @kind int;
  #L1dbb32.  v3:= v1 - v0 @kind int;
  #L1dbb36.  call `resolve`(v2, v0) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1dbb3c.  v0:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbb40.  call `resolve`(v0, v1) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1dbb46.  v0:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dbb4a.  call `resolve`(v0, v3) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dbb50.  return @kind void;
  #L1dbb52.  v0:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dbb56.  v0:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dbb5a.  if v0 != 0 then goto L1dbc1a;
  #L1dbb5e.  v0:= v8.`c.f.b.k.n.p.d` @type ^`c.f.b.k.e$b` @kind object;
  #L1dbb62.  v1:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1dbb66.  if v0 != v1 then goto L1dbc1a;
  #L1dbb6a.  v0:= v8.`c.f.b.k.n.p.a` @type ^`int`;
  #L1dbb6e.  if v0 != v9 then goto L1dbc1a;
  #L1dbb72.  v0:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbb76.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dbb7a.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1dbb80.  v0:= temp;
  #L1dbb82.  if v0 <= 0 then goto L1dbc1a;
  #L1dbb86.  v0:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbb8a.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dbb8e.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1dbb94.  v0:= temp;
  #L1dbb96.  if v0 <= 0 then goto L1dbc1a;
  #L1dbb9a.  v0:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbb9e.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dbba2.  call temp:= `get`(v0, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1dbba8.  v0:= temp @kind object;
  #L1dbbaa.  v0:= (`c.f.b.k.n.f`) v0 @kind object;
  #L1dbbae.  v1:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbbb2.  v1:= v1.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dbbb6.  call temp:= `get`(v1, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1dbbbc.  v1:= temp @kind object;
  #L1dbbbe.  v1:= (`c.f.b.k.n.f`) v1 @kind object;
  #L1dbbc2.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dbbc6.  v2:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbbca.  v2:= v2.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbbce.  v0:= v0 + v2 @kind int;
  #L1dbbd0.  v1:= v1.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dbbd4.  v2:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbbd8.  v2:= v2.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbbdc.  v1:= v1 + v2 @kind int;
  #L1dbbde.  v1:= v1 - v0 @kind int;
  #L1dbbe0.  v0:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dbbe4.  v0:= v0.`c.f.b.k.n.g.m` @type ^`int`;
  #L1dbbe8.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1dbbee.  v0:= temp;
  #L1dbbf0.  v1:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dbbf4.  v2:= v1.`c.f.b.k.e.r` @type ^`int`;
  #L1dbbf8.  v1:= v1.`c.f.b.k.e.q` @type ^`int`;
  #L1dbbfc.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1dbc02.  v0:= temp;
  #L1dbc04.  if v2 <= 0 then goto L1dbc10;
  #L1dbc08.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1dbc0e.  v0:= temp;
  #L1dbc10.  v1:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dbc14.  call `resolve`(v1, v0) @signature `Lc/f/b/k/n/g;.resolve:(I)V` @kind virtual;
  #L1dbc1a.  v0:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dbc1e.  v0:= v0.`c.f.b.k.n.f.j` @type ^`boolean` @kind boolean;
  #L1dbc22.  if v0 != 0 then goto L1dbc28;
  #L1dbc26.  return @kind void;
  #L1dbc28.  v0:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbc2c.  v0:= v0.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dbc30.  call temp:= `get`(v0, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1dbc36.  v0:= temp @kind object;
  #L1dbc38.  v0:= (`c.f.b.k.n.f`) v0 @kind object;
  #L1dbc3c.  v1:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbc40.  v1:= v1.`c.f.b.k.n.f.l` @type ^`java.util.List` @kind object;
  #L1dbc44.  call temp:= `get`(v1, v10) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1dbc4a.  v1:= temp @kind object;
  #L1dbc4c.  v1:= (`c.f.b.k.n.f`) v1 @kind object;
  #L1dbc50.  v2:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dbc54.  v3:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbc58.  v3:= v3.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbc5c.  v2:= v2 + v3 @kind int;
  #L1dbc5e.  v3:= v1.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dbc62.  v4:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbc66.  v4:= v4.`c.f.b.k.n.f.f` @type ^`int`;
  #L1dbc6a.  v3:= v3 + v4 @kind int;
  #L1dbc6c.  v4:= v8.`c.f.b.k.n.p.b` @type ^`c.f.b.k.e` @kind object;
  #L1dbc70.  call temp:= `getHorizontalBiasPercent`(v4) @signature `Lc/f/b/k/e;.getHorizontalBiasPercent:()F` @kind virtual;
  #L1dbc76.  v4:= temp;
  #L1dbc78.  if v0 != v1 then goto L1dbc88;
  #L1dbc7c.  v2:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dbc80.  v3:= v1.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dbc84.  v4:= 0.5F;
  #L1dbc88.  v3:= v3 - v2 @kind int;
  #L1dbc8a.  v0:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dbc8e.  v0:= v0.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dbc92.  v3:= v3 - v0 @kind int;
  #L1dbc94.  v0:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbc98.  v1:= (`float`) v2 @kind i2f;
  #L1dbc9a.  v1:= v1 + v11 @kind float;
  #L1dbc9c.  v2:= (`float`) v3 @kind i2f;
  #L1dbc9e.  v2:= v2 * v4 @kind float;
  #L1dbca2.  v1:= v1 + v2 @kind float;
  #L1dbca4.  v1:= (`int`) v1 @kind f2i;
  #L1dbca6.  call `resolve`(v0, v1) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1dbcac.  v0:= v8.`c.f.b.k.n.p.i` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbcb0.  v1:= v8.`c.f.b.k.n.p.h` @type ^`c.f.b.k.n.f` @kind object;
  #L1dbcb4.  v1:= v1.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dbcb8.  v2:= v8.`c.f.b.k.n.p.e` @type ^`c.f.b.k.n.g` @kind object;
  #L1dbcbc.  v2:= v2.`c.f.b.k.n.f.g` @type ^`int`;
  #L1dbcc0.  v1:= v1 + v2 @kind int;
  #L1dbcc2.  call `resolve`(v0, v1) @signature `Lc/f/b/k/n/f;.resolve:(I)V` @kind virtual;
  #L1dbcc8.  return @kind void;
}
