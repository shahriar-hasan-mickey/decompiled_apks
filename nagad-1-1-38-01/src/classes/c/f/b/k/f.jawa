record `c.f.b.k.f` @kind class @AccessFlag PUBLIC extends `c.f.b.k.m` @kind class {
  `c.f.b.k.c`[] `c.f.b.k.f.A0` @AccessFlag ;
  `c.f.b.k.c`[] `c.f.b.k.f.B0` @AccessFlag ;
  `int` `c.f.b.k.f.C0` @AccessFlag PRIVATE;
  `boolean` `c.f.b.k.f.D0` @AccessFlag PRIVATE;
  `boolean` `c.f.b.k.f.E0` @AccessFlag PRIVATE;
  `java.lang.ref.WeakReference` `c.f.b.k.f.F0` @AccessFlag PRIVATE;
  `java.lang.ref.WeakReference` `c.f.b.k.f.G0` @AccessFlag PRIVATE;
  `java.lang.ref.WeakReference` `c.f.b.k.f.H0` @AccessFlag PRIVATE;
  `java.lang.ref.WeakReference` `c.f.b.k.f.I0` @AccessFlag PRIVATE;
  `c.f.b.k.n.b$a` `c.f.b.k.f.J0` @AccessFlag PUBLIC;
  `c.f.b.k.n.b` `c.f.b.k.f.q0` @AccessFlag ;
  `c.f.b.k.n.e` `c.f.b.k.f.r0` @AccessFlag PUBLIC;
  `c.f.b.k.n.b$b` `c.f.b.k.f.s0` @AccessFlag PROTECTED;
  `boolean` `c.f.b.k.f.t0` @AccessFlag PRIVATE;
  `c.f.b.e` `c.f.b.k.f.u0` @AccessFlag PUBLIC;
  `c.f.b.d` `c.f.b.k.f.v0` @AccessFlag PROTECTED;
  `int` `c.f.b.k.f.w0` @AccessFlag ;
  `int` `c.f.b.k.f.x0` @AccessFlag ;
  `int` `c.f.b.k.f.y0` @AccessFlag PUBLIC;
  `int` `c.f.b.k.f.z0` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`c.f.b.k.f` v4 @kind this) @signature `Lc/f/b/k/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ce2c8.  call `<init>`(v4) @signature `Lc/f/b/k/m;.<init>:()V` @kind direct;
  #L1ce2ce.  v0:= new `c.f.b.k.n.b`;
  #L1ce2d2.  call `<init>`(v0, v4) @signature `Lc/f/b/k/n/b;.<init>:(Lc/f/b/k/f;)V` @kind direct;
  #L1ce2d8.  v4.`c.f.b.k.f.q0` @type ^`c.f.b.k.n.b` := v0 @kind object;
  #L1ce2dc.  v0:= new `c.f.b.k.n.e`;
  #L1ce2e0.  call `<init>`(v0, v4) @signature `Lc/f/b/k/n/e;.<init>:(Lc/f/b/k/f;)V` @kind direct;
  #L1ce2e6.  v4.`c.f.b.k.f.r0` @type ^`c.f.b.k.n.e` := v0 @kind object;
  #L1ce2ea.  v0:= 0I;
  #L1ce2ec.  v4.`c.f.b.k.f.s0` @type ^`c.f.b.k.n.b$b` := v0 @kind object;
  #L1ce2f0.  v1:= 0I;
  #L1ce2f2.  v4.`c.f.b.k.f.t0` @type ^`boolean` := v1 @kind boolean;
  #L1ce2f6.  v2:= new `c.f.b.d`;
  #L1ce2fa.  call `<init>`(v2) @signature `Lc/f/b/d;.<init>:()V` @kind direct;
  #L1ce300.  v4.`c.f.b.k.f.v0` @type ^`c.f.b.d` := v2 @kind object;
  #L1ce304.  v4.`c.f.b.k.f.y0` @type ^`int` := v1;
  #L1ce308.  v4.`c.f.b.k.f.z0` @type ^`int` := v1;
  #L1ce30c.  v2:= 4I;
  #L1ce30e.  v3:= new `c.f.b.k.c`[v2];
  #L1ce312.  v4.`c.f.b.k.f.A0` @type ^`c.f.b.k.c`[] := v3 @kind object;
  #L1ce316.  v2:= new `c.f.b.k.c`[v2];
  #L1ce31a.  v4.`c.f.b.k.f.B0` @type ^`c.f.b.k.c`[] := v2 @kind object;
  #L1ce31e.  v2:= 257I;
  #L1ce322.  v4.`c.f.b.k.f.C0` @type ^`int` := v2;
  #L1ce326.  v4.`c.f.b.k.f.D0` @type ^`boolean` := v1 @kind boolean;
  #L1ce32a.  v4.`c.f.b.k.f.E0` @type ^`boolean` := v1 @kind boolean;
  #L1ce32e.  v4.`c.f.b.k.f.F0` @type ^`java.lang.ref.WeakReference` := v0 @kind object;
  #L1ce332.  v4.`c.f.b.k.f.G0` @type ^`java.lang.ref.WeakReference` := v0 @kind object;
  #L1ce336.  v4.`c.f.b.k.f.H0` @type ^`java.lang.ref.WeakReference` := v0 @kind object;
  #L1ce33a.  v4.`c.f.b.k.f.I0` @type ^`java.lang.ref.WeakReference` := v0 @kind object;
  #L1ce33e.  v0:= new `c.f.b.k.n.b$a`;
  #L1ce342.  call `<init>`(v0) @signature `Lc/f/b/k/n/b$a;.<init>:()V` @kind direct;
  #L1ce348.  v4.`c.f.b.k.f.J0` @type ^`c.f.b.k.n.b$a` := v0 @kind object;
  #L1ce34c.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.f` v3 @kind this, `c.f.b.k.d` v4 @kind object, `c.f.b.i` v5 @kind object) @signature `Lc/f/b/k/f;.a:(Lc/f/b/k/d;Lc/f/b/i;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1ce4a4.  v0:= v3.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1ce4a8.  call temp:= `createObjectVariable`(v0, v4) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1ce4ae.  v4:= temp @kind object;
  #L1ce4b0.  v0:= v3.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1ce4b4.  v1:= 5I;
  #L1ce4b6.  v2:= 0I;
  #L1ce4b8.  call `addGreaterThan`(v0, v5, v4, v2, v1) @signature `Lc/f/b/d;.addGreaterThan:(Lc/f/b/i;Lc/f/b/i;II)V` @kind virtual;
  #L1ce4be.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.f` v5 @kind this, `c.f.b.k.e` v6 @kind object) @signature `Lc/f/b/k/f;.a:(Lc/f/b/k/e;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ce38c.  v0:= v5.`c.f.b.k.f.y0` @type ^`int`;
  #L1ce390.  v0:= v0 + 1;
  #L1ce394.  v1:= v5.`c.f.b.k.f.B0` @type ^`c.f.b.k.c`[] @kind object;
  #L1ce398.  v2:= length @variable v1;
  #L1ce39a.  if v0 < v2 then goto L1ce3b4;
  #L1ce39e.  v0:= length @variable v1;
  #L1ce3a0.  v0:= v0 * 2;
  #L1ce3a4.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L1ce3aa.  v0:= temp @kind object;
  #L1ce3ac.  v0:= (`c.f.b.k.c`[]) v0 @kind object;
  #L1ce3b0.  v5.`c.f.b.k.f.B0` @type ^`c.f.b.k.c`[] := v0 @kind object;
  #L1ce3b4.  v0:= v5.`c.f.b.k.f.B0` @type ^`c.f.b.k.c`[] @kind object;
  #L1ce3b8.  v1:= v5.`c.f.b.k.f.y0` @type ^`int`;
  #L1ce3bc.  v2:= new `c.f.b.k.c`;
  #L1ce3c0.  v3:= 0I;
  #L1ce3c2.  call temp:= `isRtl`(v5) @signature `Lc/f/b/k/f;.isRtl:()Z` @kind virtual;
  #L1ce3c8.  v4:= temp;
  #L1ce3ca.  call `<init>`(v2, v6, v3, v4) @signature `Lc/f/b/k/c;.<init>:(Lc/f/b/k/e;IZ)V` @kind direct;
  #L1ce3d0.  v0[v1]:= v2 @kind object;
  #L1ce3d4.  v6:= v5.`c.f.b.k.f.y0` @type ^`int`;
  #L1ce3d8.  v6:= v6 + 1;
  #L1ce3dc.  v5.`c.f.b.k.f.y0` @type ^`int` := v6;
  #L1ce3e0.  return @kind void;
}
procedure `void` `b`(`c.f.b.k.f` v1 @kind this) @signature `Lc/f/b/k/f;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1ced04.  v0:= 0I;
  #L1ced06.  v1.`c.f.b.k.f.y0` @type ^`int` := v0;
  #L1ced0a.  v1.`c.f.b.k.f.z0` @type ^`int` := v0;
  #L1ced0e.  return @kind void;
}
procedure `void` `b`(`c.f.b.k.f` v3 @kind this, `c.f.b.k.d` v4 @kind object, `c.f.b.i` v5 @kind object) @signature `Lc/f/b/k/f;.b:(Lc/f/b/k/d;Lc/f/b/i;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1ce4d0.  v0:= v3.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1ce4d4.  call temp:= `createObjectVariable`(v0, v4) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1ce4da.  v4:= temp @kind object;
  #L1ce4dc.  v0:= v3.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1ce4e0.  v1:= 5I;
  #L1ce4e2.  v2:= 0I;
  #L1ce4e4.  call `addGreaterThan`(v0, v4, v5, v2, v1) @signature `Lc/f/b/d;.addGreaterThan:(Lc/f/b/i;Lc/f/b/i;II)V` @kind virtual;
  #L1ce4ea.  return @kind void;
}
procedure `void` `b`(`c.f.b.k.f` v5 @kind this, `c.f.b.k.e` v6 @kind object) @signature `Lc/f/b/k/f;.b:(Lc/f/b/k/e;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ce4fc.  v0:= v5.`c.f.b.k.f.z0` @type ^`int`;
  #L1ce500.  v1:= 1I;
  #L1ce502.  v0:= v0 + v1 @kind int;
  #L1ce504.  v2:= v5.`c.f.b.k.f.A0` @type ^`c.f.b.k.c`[] @kind object;
  #L1ce508.  v3:= length @variable v2;
  #L1ce50a.  if v0 < v3 then goto L1ce524;
  #L1ce50e.  v0:= length @variable v2;
  #L1ce510.  v0:= v0 * 2;
  #L1ce514.  call temp:= `copyOf`(v2, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L1ce51a.  v0:= temp @kind object;
  #L1ce51c.  v0:= (`c.f.b.k.c`[]) v0 @kind object;
  #L1ce520.  v5.`c.f.b.k.f.A0` @type ^`c.f.b.k.c`[] := v0 @kind object;
  #L1ce524.  v0:= v5.`c.f.b.k.f.A0` @type ^`c.f.b.k.c`[] @kind object;
  #L1ce528.  v2:= v5.`c.f.b.k.f.z0` @type ^`int`;
  #L1ce52c.  v3:= new `c.f.b.k.c`;
  #L1ce530.  call temp:= `isRtl`(v5) @signature `Lc/f/b/k/f;.isRtl:()Z` @kind virtual;
  #L1ce536.  v4:= temp;
  #L1ce538.  call `<init>`(v3, v6, v1, v4) @signature `Lc/f/b/k/c;.<init>:(Lc/f/b/k/e;IZ)V` @kind direct;
  #L1ce53e.  v0[v2]:= v3 @kind object;
  #L1ce542.  v6:= v5.`c.f.b.k.f.z0` @type ^`int`;
  #L1ce546.  v6:= v6 + v1 @kind int;
  #L1ce548.  v5.`c.f.b.k.f.z0` @type ^`int` := v6;
  #L1ce54c.  return @kind void;
}
procedure `boolean` `measure`(`c.f.b.k.e` v7 @kind object, `c.f.b.k.n.b$b` v8 @kind object, `c.f.b.k.n.b$a` v9 @kind object, `int` v10 ) @signature `Lc/f/b/k/f;.measure:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Lc/f/b/k/n/b$a;I)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1cdfc0.  v0:= 0I;
  #L1cdfc2.  if v8 != 0 then goto L1cdfc8;
  #L1cdfc6.  return v0;
  #L1cdfc8.  call temp:= `getHorizontalDimensionBehaviour`(v7) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1cdfce.  v1:= temp @kind object;
  #L1cdfd0.  v9.`c.f.b.k.n.b$a.a` @type ^`c.f.b.k.e$b` := v1 @kind object;
  #L1cdfd4.  call temp:= `getVerticalDimensionBehaviour`(v7) @signature `Lc/f/b/k/e;.getVerticalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1cdfda.  v1:= temp @kind object;
  #L1cdfdc.  v9.`c.f.b.k.n.b$a.b` @type ^`c.f.b.k.e$b` := v1 @kind object;
  #L1cdfe0.  call temp:= `getWidth`(v7) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1cdfe6.  v1:= temp;
  #L1cdfe8.  v9.`c.f.b.k.n.b$a.c` @type ^`int` := v1;
  #L1cdfec.  call temp:= `getHeight`(v7) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1cdff2.  v1:= temp;
  #L1cdff4.  v9.`c.f.b.k.n.b$a.d` @type ^`int` := v1;
  #L1cdff8.  v9.`c.f.b.k.n.b$a.i` @type ^`boolean` := v0 @kind boolean;
  #L1cdffc.  v9.`c.f.b.k.n.b$a.j` @type ^`int` := v10;
  #L1ce000.  v10:= v9.`c.f.b.k.n.b$a.a` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce004.  v1:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce008.  v2:= 1I;
  #L1ce00a.  if v10 != v1 then goto L1ce012;
  #L1ce00e.  v10:= 1I;
  #L1ce010.  goto L1ce014;
  #L1ce012.  v10:= 0I;
  #L1ce014.  v1:= v9.`c.f.b.k.n.b$a.b` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce018.  v3:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce01c.  if v1 != v3 then goto L1ce024;
  #L1ce020.  v1:= 1I;
  #L1ce022.  goto L1ce026;
  #L1ce024.  v1:= 0I;
  #L1ce026.  v3:= 0I;
  #L1ce028.  if v10 == 0 then goto L1ce03c;
  #L1ce02c.  v4:= v7.`c.f.b.k.e.U` @type ^`float`;
  #L1ce030.  v4:= fcmpl(v4, v3);
  #L1ce034.  if v4 <= 0 then goto L1ce03c;
  #L1ce038.  v4:= 1I;
  #L1ce03a.  goto L1ce03e;
  #L1ce03c.  v4:= 0I;
  #L1ce03e.  if v1 == 0 then goto L1ce052;
  #L1ce042.  v5:= v7.`c.f.b.k.e.U` @type ^`float`;
  #L1ce046.  v3:= fcmpl(v5, v3);
  #L1ce04a.  if v3 <= 0 then goto L1ce052;
  #L1ce04e.  v3:= 1I;
  #L1ce050.  goto L1ce054;
  #L1ce052.  v3:= 0I;
  #L1ce054.  if v10 == 0 then goto L1ce08e;
  #L1ce058.  call temp:= `hasDanglingDimension`(v7, v0) @signature `Lc/f/b/k/e;.hasDanglingDimension:(I)Z` @kind virtual;
  #L1ce05e.  v5:= temp;
  #L1ce060.  if v5 == 0 then goto L1ce08e;
  #L1ce064.  v5:= v7.`c.f.b.k.e.n` @type ^`int`;
  #L1ce068.  if v5 != 0 then goto L1ce08e;
  #L1ce06c.  if v4 != 0 then goto L1ce08e;
  #L1ce070.  v10:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce074.  v9.`c.f.b.k.n.b$a.a` @type ^`c.f.b.k.e$b` := v10 @kind object;
  #L1ce078.  if v1 == 0 then goto L1ce08c;
  #L1ce07c.  v10:= v7.`c.f.b.k.e.o` @type ^`int`;
  #L1ce080.  if v10 != 0 then goto L1ce08c;
  #L1ce084.  v10:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce088.  v9.`c.f.b.k.n.b$a.a` @type ^`c.f.b.k.e$b` := v10 @kind object;
  #L1ce08c.  v10:= 0I;
  #L1ce08e.  if v1 == 0 then goto L1ce0c8;
  #L1ce092.  call temp:= `hasDanglingDimension`(v7, v2) @signature `Lc/f/b/k/e;.hasDanglingDimension:(I)Z` @kind virtual;
  #L1ce098.  v5:= temp;
  #L1ce09a.  if v5 == 0 then goto L1ce0c8;
  #L1ce09e.  v5:= v7.`c.f.b.k.e.o` @type ^`int`;
  #L1ce0a2.  if v5 != 0 then goto L1ce0c8;
  #L1ce0a6.  if v3 != 0 then goto L1ce0c8;
  #L1ce0aa.  v1:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce0ae.  v9.`c.f.b.k.n.b$a.b` @type ^`c.f.b.k.e$b` := v1 @kind object;
  #L1ce0b2.  if v10 == 0 then goto L1ce0c6;
  #L1ce0b6.  v1:= v7.`c.f.b.k.e.n` @type ^`int`;
  #L1ce0ba.  if v1 != 0 then goto L1ce0c6;
  #L1ce0be.  v1:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce0c2.  v9.`c.f.b.k.n.b$a.b` @type ^`c.f.b.k.e$b` := v1 @kind object;
  #L1ce0c6.  v1:= 0I;
  #L1ce0c8.  call temp:= `isResolvedHorizontally`(v7) @signature `Lc/f/b/k/e;.isResolvedHorizontally:()Z` @kind virtual;
  #L1ce0ce.  v5:= temp;
  #L1ce0d0.  if v5 == 0 then goto L1ce0de;
  #L1ce0d4.  v10:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce0d8.  v9.`c.f.b.k.n.b$a.a` @type ^`c.f.b.k.e$b` := v10 @kind object;
  #L1ce0dc.  v10:= 0I;
  #L1ce0de.  call temp:= `isResolvedVertically`(v7) @signature `Lc/f/b/k/e;.isResolvedVertically:()Z` @kind virtual;
  #L1ce0e4.  v5:= temp;
  #L1ce0e6.  if v5 == 0 then goto L1ce0f4;
  #L1ce0ea.  v1:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce0ee.  v9.`c.f.b.k.n.b$a.b` @type ^`c.f.b.k.e$b` := v1 @kind object;
  #L1ce0f2.  v1:= 0I;
  #L1ce0f4.  v5:= -1I;
  #L1ce0f6.  v6:= 4I;
  #L1ce0f8.  if v4 == 0 then goto L1ce178;
  #L1ce0fc.  v4:= v7.`c.f.b.k.e.p` @type ^`int`[] @kind object;
  #L1ce100.  v0:= v4[v0];
  #L1ce104.  if v0 != v6 then goto L1ce112;
  #L1ce108.  v0:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce10c.  v9.`c.f.b.k.n.b$a.a` @type ^`c.f.b.k.e$b` := v0 @kind object;
  #L1ce110.  goto L1ce178;
  #L1ce112.  if v1 != 0 then goto L1ce178;
  #L1ce116.  v0:= v9.`c.f.b.k.n.b$a.b` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce11a.  v1:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce11e.  if v0 != v1 then goto L1ce128;
  #L1ce122.  v0:= v9.`c.f.b.k.n.b$a.d` @type ^`int`;
  #L1ce126.  goto L1ce13a;
  #L1ce128.  v0:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce12c.  v9.`c.f.b.k.n.b$a.a` @type ^`c.f.b.k.e$b` := v0 @kind object;
  #L1ce130.  call `measure`(v8, v7, v9) @signature `Lc/f/b/k/n/b$b;.measure:(Lc/f/b/k/e;Lc/f/b/k/n/b$a;)V` @kind interface;
  #L1ce136.  v0:= v9.`c.f.b.k.n.b$a.f` @type ^`int`;
  #L1ce13a.  v1:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce13e.  v9.`c.f.b.k.n.b$a.a` @type ^`c.f.b.k.e$b` := v1 @kind object;
  #L1ce142.  v1:= v7.`c.f.b.k.e.V` @type ^`int`;
  #L1ce146.  if v1 == 0 then goto L1ce164;
  #L1ce14a.  if v1 != v5 then goto L1ce150;
  #L1ce14e.  goto L1ce164;
  #L1ce150.  call temp:= `getDimensionRatio`(v7) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1ce156.  v1:= temp;
  #L1ce158.  v0:= (`float`) v0 @kind i2f;
  #L1ce15a.  v1:= v1 / v0 @kind float;
  #L1ce15c.  v0:= (`int`) v1 @kind f2i;
  #L1ce15e.  v9.`c.f.b.k.n.b$a.c` @type ^`int` := v0;
  #L1ce162.  goto L1ce178;
  #L1ce164.  call temp:= `getDimensionRatio`(v7) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1ce16a.  v1:= temp;
  #L1ce16c.  v0:= (`float`) v0 @kind i2f;
  #L1ce16e.  v1:= v1 * v0 @kind float;
  #L1ce172.  v0:= (`int`) v1 @kind f2i;
  #L1ce174.  v9.`c.f.b.k.n.b$a.c` @type ^`int` := v0;
  #L1ce178.  if v3 == 0 then goto L1ce1f8;
  #L1ce17c.  v0:= v7.`c.f.b.k.e.p` @type ^`int`[] @kind object;
  #L1ce180.  v0:= v0[v2];
  #L1ce184.  if v0 != v6 then goto L1ce192;
  #L1ce188.  v10:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce18c.  v9.`c.f.b.k.n.b$a.b` @type ^`c.f.b.k.e$b` := v10 @kind object;
  #L1ce190.  goto L1ce1f8;
  #L1ce192.  if v10 != 0 then goto L1ce1f8;
  #L1ce196.  v10:= v9.`c.f.b.k.n.b$a.a` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce19a.  v0:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce19e.  if v10 != v0 then goto L1ce1a8;
  #L1ce1a2.  v10:= v9.`c.f.b.k.n.b$a.c` @type ^`int`;
  #L1ce1a6.  goto L1ce1ba;
  #L1ce1a8.  v10:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce1ac.  v9.`c.f.b.k.n.b$a.b` @type ^`c.f.b.k.e$b` := v10 @kind object;
  #L1ce1b0.  call `measure`(v8, v7, v9) @signature `Lc/f/b/k/n/b$b;.measure:(Lc/f/b/k/e;Lc/f/b/k/n/b$a;)V` @kind interface;
  #L1ce1b6.  v10:= v9.`c.f.b.k.n.b$a.e` @type ^`int`;
  #L1ce1ba.  v0:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce1be.  v9.`c.f.b.k.n.b$a.b` @type ^`c.f.b.k.e$b` := v0 @kind object;
  #L1ce1c2.  v0:= v7.`c.f.b.k.e.V` @type ^`int`;
  #L1ce1c6.  if v0 == 0 then goto L1ce1e6;
  #L1ce1ca.  if v0 != v5 then goto L1ce1d0;
  #L1ce1ce.  goto L1ce1e6;
  #L1ce1d0.  v10:= (`float`) v10 @kind i2f;
  #L1ce1d2.  call temp:= `getDimensionRatio`(v7) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1ce1d8.  v0:= temp;
  #L1ce1da.  v10:= v10 * v0 @kind float;
  #L1ce1de.  v10:= (`int`) v10 @kind f2i;
  #L1ce1e0.  v9.`c.f.b.k.n.b$a.d` @type ^`int` := v10;
  #L1ce1e4.  goto L1ce1f8;
  #L1ce1e6.  v10:= (`float`) v10 @kind i2f;
  #L1ce1e8.  call temp:= `getDimensionRatio`(v7) @signature `Lc/f/b/k/e;.getDimensionRatio:()F` @kind virtual;
  #L1ce1ee.  v0:= temp;
  #L1ce1f0.  v10:= v10 / v0 @kind float;
  #L1ce1f2.  v10:= (`int`) v10 @kind f2i;
  #L1ce1f4.  v9.`c.f.b.k.n.b$a.d` @type ^`int` := v10;
  #L1ce1f8.  call `measure`(v8, v7, v9) @signature `Lc/f/b/k/n/b$b;.measure:(Lc/f/b/k/e;Lc/f/b/k/n/b$a;)V` @kind interface;
  #L1ce1fe.  v8:= v9.`c.f.b.k.n.b$a.e` @type ^`int`;
  #L1ce202.  call `setWidth`(v7, v8) @signature `Lc/f/b/k/e;.setWidth:(I)V` @kind virtual;
  #L1ce208.  v8:= v9.`c.f.b.k.n.b$a.f` @type ^`int`;
  #L1ce20c.  call `setHeight`(v7, v8) @signature `Lc/f/b/k/e;.setHeight:(I)V` @kind virtual;
  #L1ce212.  v8:= v9.`c.f.b.k.n.b$a.h` @type ^`boolean` @kind boolean;
  #L1ce216.  call `setHasBaseline`(v7, v8) @signature `Lc/f/b/k/e;.setHasBaseline:(Z)V` @kind virtual;
  #L1ce21c.  v8:= v9.`c.f.b.k.n.b$a.g` @type ^`int`;
  #L1ce220.  call `setBaselineDistance`(v7, v8) @signature `Lc/f/b/k/e;.setBaselineDistance:(I)V` @kind virtual;
  #L1ce226.  v7:= `@@c.f.b.k.n.b$a.k` @type ^`int`;
  #L1ce22a.  v9.`c.f.b.k.n.b$a.j` @type ^`int` := v7;
  #L1ce22e.  v7:= v9.`c.f.b.k.n.b$a.i` @type ^`boolean` @kind boolean;
  #L1ce232.  return v7;
}
procedure `void` `a`(`c.f.b.k.f` v2 @kind this, `c.f.b.k.d` v3 @kind object) @signature `Lc/f/b/k/f;.a:(Lc/f/b/k/d;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1ce560.  v0:= v2.`c.f.b.k.f.H0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce564.  if v0 == 0 then goto L1ce598;
  #L1ce568.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ce56e.  v0:= temp @kind object;
  #L1ce570.  if v0 == 0 then goto L1ce598;
  #L1ce574.  call temp:= `getFinalValue`(v3) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1ce57a.  v0:= temp;
  #L1ce57c.  v1:= v2.`c.f.b.k.f.H0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce580.  call temp:= `get`(v1) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ce586.  v1:= temp @kind object;
  #L1ce588.  v1:= (`c.f.b.k.d`) v1 @kind object;
  #L1ce58c.  call temp:= `getFinalValue`(v1) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1ce592.  v1:= temp;
  #L1ce594.  if v0 <= v1 then goto L1ce5a6;
  #L1ce598.  v0:= new `java.lang.ref.WeakReference`;
  #L1ce59c.  call `<init>`(v0, v3) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1ce5a2.  v2.`c.f.b.k.f.H0` @type ^`java.lang.ref.WeakReference` := v0 @kind object;
  #L1ce5a6.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.f` v1 @kind this, `c.f.b.k.e` v2 @kind object, `int` v3 ) @signature `Lc/f/b/k/f;.a:(Lc/f/b/k/e;I)V` @AccessFlag  {
    temp;
    v0;

  #L1ce360.  if v3 != 0 then goto L1ce36c;
  #L1ce364.  call `a`(v1, v2) @signature `Lc/f/b/k/f;.a:(Lc/f/b/k/e;)V` @kind direct;
  #L1ce36a.  goto L1ce378;
  #L1ce36c.  v0:= 1I;
  #L1ce36e.  if v3 != v0 then goto L1ce378;
  #L1ce372.  call `b`(v1, v2) @signature `Lc/f/b/k/f;.b:(Lc/f/b/k/e;)V` @kind direct;
  #L1ce378.  return @kind void;
}
procedure `boolean` `addChildrenToSolver`(`c.f.b.k.f` v12 @kind this, `c.f.b.d` v13 @kind object) @signature `Lc/f/b/k/f;.addChildrenToSolver:(Lc/f/b/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1cdcf8.  v0:= 64I;
  #L1cdcfc.  call temp:= `optimizeFor`(v12, v0) @signature `Lc/f/b/k/f;.optimizeFor:(I)Z` @kind virtual;
  #L1cdd02.  v0:= temp;
  #L1cdd04.  call `addToSolver`(v12, v13, v0) @signature `Lc/f/b/k/e;.addToSolver:(Lc/f/b/d;Z)V` @kind virtual;
  #L1cdd0a.  v1:= v12.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1cdd0e.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1cdd14.  v1:= temp;
  #L1cdd16.  v2:= 0I;
  #L1cdd18.  v3:= 0I;
  #L1cdd1a.  v4:= 0I;
  #L1cdd1c.  v5:= 1I;
  #L1cdd1e.  if v3 >= v1 then goto L1cdd4e;
  #L1cdd22.  v6:= v12.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1cdd26.  call temp:= `get`(v6, v3) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1cdd2c.  v6:= temp @kind object;
  #L1cdd2e.  v6:= (`c.f.b.k.e`) v6 @kind object;
  #L1cdd32.  call `setInBarrier`(v6, v2, v2) @signature `Lc/f/b/k/e;.setInBarrier:(IZ)V` @kind virtual;
  #L1cdd38.  call `setInBarrier`(v6, v5, v2) @signature `Lc/f/b/k/e;.setInBarrier:(IZ)V` @kind virtual;
  #L1cdd3e.  v6:= instanceof @variable v6 @type ^`c.f.b.k.a` @kind boolean;
  #L1cdd42.  if v6 == 0 then goto L1cdd48;
  #L1cdd46.  v4:= 1I;
  #L1cdd48.  v3:= v3 + 1;
  #L1cdd4c.  goto L1cdd1c;
  #L1cdd4e.  if v4 == 0 then goto L1cdd80;
  #L1cdd52.  v3:= 0I;
  #L1cdd54.  if v3 >= v1 then goto L1cdd80;
  #L1cdd58.  v4:= v12.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1cdd5c.  call temp:= `get`(v4, v3) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1cdd62.  v4:= temp @kind object;
  #L1cdd64.  v4:= (`c.f.b.k.e`) v4 @kind object;
  #L1cdd68.  v6:= instanceof @variable v4 @type ^`c.f.b.k.a` @kind boolean;
  #L1cdd6c.  if v6 == 0 then goto L1cdd7a;
  #L1cdd70.  v4:= (`c.f.b.k.a`) v4 @kind object;
  #L1cdd74.  call `markWidgets`(v4) @signature `Lc/f/b/k/a;.markWidgets:()V` @kind virtual;
  #L1cdd7a.  v3:= v3 + 1;
  #L1cdd7e.  goto L1cdd54;
  #L1cdd80.  v3:= 0I;
  #L1cdd82.  if v3 >= v1 then goto L1cddae;
  #L1cdd86.  v4:= v12.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1cdd8a.  call temp:= `get`(v4, v3) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1cdd90.  v4:= temp @kind object;
  #L1cdd92.  v4:= (`c.f.b.k.e`) v4 @kind object;
  #L1cdd96.  call temp:= `a`(v4) @signature `Lc/f/b/k/e;.a:()Z` @kind virtual;
  #L1cdd9c.  v6:= temp;
  #L1cdd9e.  if v6 == 0 then goto L1cdda8;
  #L1cdda2.  call `addToSolver`(v4, v13, v0) @signature `Lc/f/b/k/e;.addToSolver:(Lc/f/b/d;Z)V` @kind virtual;
  #L1cdda8.  v3:= v3 + 1;
  #L1cddac.  goto L1cdd82;
  #L1cddae.  v3:= `@@c.f.b.d.r` @type ^`boolean` @kind boolean;
  #L1cddb2.  if v3 == 0 then goto L1cde42;
  #L1cddb6.  v3:= new `java.util.HashSet`;
  #L1cddba.  call `<init>`(v3) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L1cddc0.  v4:= 0I;
  #L1cddc2.  if v4 >= v1 then goto L1cddee;
  #L1cddc6.  v6:= v12.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1cddca.  call temp:= `get`(v6, v4) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1cddd0.  v6:= temp @kind object;
  #L1cddd2.  v6:= (`c.f.b.k.e`) v6 @kind object;
  #L1cddd6.  call temp:= `a`(v6) @signature `Lc/f/b/k/e;.a:()Z` @kind virtual;
  #L1cdddc.  v7:= temp;
  #L1cddde.  if v7 != 0 then goto L1cdde8;
  #L1cdde2.  call temp:= `add`(v3, v6) @signature `Ljava/util/HashSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1cdde8.  v4:= v4 + 1;
  #L1cddec.  goto L1cddc2;
  #L1cddee.  call temp:= `getHorizontalDimensionBehaviour`(v12) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1cddf4.  v1:= temp @kind object;
  #L1cddf6.  v4:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1cddfa.  if v1 != v4 then goto L1cde02;
  #L1cddfe.  v10:= 0I;
  #L1cde00.  goto L1cde04;
  #L1cde02.  v10:= 1I;
  #L1cde04.  v11:= 0I;
  #L1cde06.  v6:= v12 @kind object;
  #L1cde08.  v7:= v12 @kind object;
  #L1cde0a.  v8:= v13 @kind object;
  #L1cde0c.  v9:= v3 @kind object;
  #L1cde0e.  call `addChildrenToSolverByDependency`(v6, v7, v8, v9, v10, v11) @signature `Lc/f/b/k/e;.addChildrenToSolverByDependency:(Lc/f/b/k/f;Lc/f/b/d;Ljava/util/HashSet;IZ)V` @kind virtual;
  #L1cde14.  call temp:= `iterator`(v3) @signature `Ljava/util/HashSet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1cde1a.  v1:= temp @kind object;
  #L1cde1c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1cde22.  v3:= temp;
  #L1cde24.  if v3 == 0 then goto L1cded2;
  #L1cde28.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1cde2e.  v3:= temp @kind object;
  #L1cde30.  v3:= (`c.f.b.k.e`) v3 @kind object;
  #L1cde34.  call `a`(v12, v13, v3) @signature `Lc/f/b/k/k;.a:(Lc/f/b/k/f;Lc/f/b/d;Lc/f/b/k/e;)V` @kind static;
  #L1cde3a.  call `addToSolver`(v3, v13, v0) @signature `Lc/f/b/k/e;.addToSolver:(Lc/f/b/d;Z)V` @kind virtual;
  #L1cde40.  goto L1cde1c;
  #L1cde42.  v3:= 0I;
  #L1cde44.  if v3 >= v1 then goto L1cded2;
  #L1cde48.  v4:= v12.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1cde4c.  call temp:= `get`(v4, v3) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1cde52.  v4:= temp @kind object;
  #L1cde54.  v4:= (`c.f.b.k.e`) v4 @kind object;
  #L1cde58.  v6:= instanceof @variable v4 @type ^`c.f.b.k.f` @kind boolean;
  #L1cde5c.  if v6 == 0 then goto L1cdeb4;
  #L1cde60.  v6:= v4.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1cde64.  v7:= v6[v2] @kind object;
  #L1cde68.  v6:= v6[v5] @kind object;
  #L1cde6c.  v8:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1cde70.  if v7 != v8 then goto L1cde7e;
  #L1cde74.  v8:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1cde78.  call `setHorizontalDimensionBehaviour`(v4, v8) @signature `Lc/f/b/k/e;.setHorizontalDimensionBehaviour:(Lc/f/b/k/e$b;)V` @kind virtual;
  #L1cde7e.  v8:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1cde82.  if v6 != v8 then goto L1cde90;
  #L1cde86.  v8:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1cde8a.  call `setVerticalDimensionBehaviour`(v4, v8) @signature `Lc/f/b/k/e;.setVerticalDimensionBehaviour:(Lc/f/b/k/e$b;)V` @kind virtual;
  #L1cde90.  call `addToSolver`(v4, v13, v0) @signature `Lc/f/b/k/e;.addToSolver:(Lc/f/b/d;Z)V` @kind virtual;
  #L1cde96.  v8:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1cde9a.  if v7 != v8 then goto L1cdea4;
  #L1cde9e.  call `setHorizontalDimensionBehaviour`(v4, v7) @signature `Lc/f/b/k/e;.setHorizontalDimensionBehaviour:(Lc/f/b/k/e$b;)V` @kind virtual;
  #L1cdea4.  v7:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1cdea8.  if v6 != v7 then goto L1cdecc;
  #L1cdeac.  call `setVerticalDimensionBehaviour`(v4, v6) @signature `Lc/f/b/k/e;.setVerticalDimensionBehaviour:(Lc/f/b/k/e$b;)V` @kind virtual;
  #L1cdeb2.  goto L1cdecc;
  #L1cdeb4.  call `a`(v12, v13, v4) @signature `Lc/f/b/k/k;.a:(Lc/f/b/k/f;Lc/f/b/d;Lc/f/b/k/e;)V` @kind static;
  #L1cdeba.  call temp:= `a`(v4) @signature `Lc/f/b/k/e;.a:()Z` @kind virtual;
  #L1cdec0.  v6:= temp;
  #L1cdec2.  if v6 != 0 then goto L1cdecc;
  #L1cdec6.  call `addToSolver`(v4, v13, v0) @signature `Lc/f/b/k/e;.addToSolver:(Lc/f/b/d;Z)V` @kind virtual;
  #L1cdecc.  v3:= v3 + 1;
  #L1cded0.  goto L1cde44;
  #L1cded2.  v0:= v12.`c.f.b.k.f.y0` @type ^`int`;
  #L1cded6.  v1:= 0I;
  #L1cded8.  if v0 <= 0 then goto L1cdee2;
  #L1cdedc.  call `applyChainConstraints`(v12, v13, v1, v2) @signature `Lc/f/b/k/b;.applyChainConstraints:(Lc/f/b/k/f;Lc/f/b/d;Ljava/util/ArrayList;I)V` @kind static;
  #L1cdee2.  v0:= v12.`c.f.b.k.f.z0` @type ^`int`;
  #L1cdee6.  if v0 <= 0 then goto L1cdef0;
  #L1cdeea.  call `applyChainConstraints`(v12, v13, v1, v5) @signature `Lc/f/b/k/b;.applyChainConstraints:(Lc/f/b/k/f;Lc/f/b/d;Ljava/util/ArrayList;I)V` @kind static;
  #L1cdef0.  return v5;
}
procedure `void` `addHorizontalWrapMaxVariable`(`c.f.b.k.f` v2 @kind this, `c.f.b.k.d` v3 @kind object) @signature `Lc/f/b/k/f;.addHorizontalWrapMaxVariable:(Lc/f/b/k/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ce3f4.  v0:= v2.`c.f.b.k.f.I0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce3f8.  if v0 == 0 then goto L1ce42c;
  #L1ce3fc.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ce402.  v0:= temp @kind object;
  #L1ce404.  if v0 == 0 then goto L1ce42c;
  #L1ce408.  call temp:= `getFinalValue`(v3) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1ce40e.  v0:= temp;
  #L1ce410.  v1:= v2.`c.f.b.k.f.I0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce414.  call temp:= `get`(v1) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ce41a.  v1:= temp @kind object;
  #L1ce41c.  v1:= (`c.f.b.k.d`) v1 @kind object;
  #L1ce420.  call temp:= `getFinalValue`(v1) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1ce426.  v1:= temp;
  #L1ce428.  if v0 <= v1 then goto L1ce43a;
  #L1ce42c.  v0:= new `java.lang.ref.WeakReference`;
  #L1ce430.  call `<init>`(v0, v3) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1ce436.  v2.`c.f.b.k.f.I0` @type ^`java.lang.ref.WeakReference` := v0 @kind object;
  #L1ce43a.  return @kind void;
}
procedure `void` `addHorizontalWrapMinVariable`(`c.f.b.k.f` v2 @kind this, `c.f.b.k.d` v3 @kind object) @signature `Lc/f/b/k/f;.addHorizontalWrapMinVariable:(Lc/f/b/k/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ce44c.  v0:= v2.`c.f.b.k.f.G0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce450.  if v0 == 0 then goto L1ce484;
  #L1ce454.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ce45a.  v0:= temp @kind object;
  #L1ce45c.  if v0 == 0 then goto L1ce484;
  #L1ce460.  call temp:= `getFinalValue`(v3) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1ce466.  v0:= temp;
  #L1ce468.  v1:= v2.`c.f.b.k.f.G0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce46c.  call temp:= `get`(v1) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ce472.  v1:= temp @kind object;
  #L1ce474.  v1:= (`c.f.b.k.d`) v1 @kind object;
  #L1ce478.  call temp:= `getFinalValue`(v1) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1ce47e.  v1:= temp;
  #L1ce480.  if v0 <= v1 then goto L1ce492;
  #L1ce484.  v0:= new `java.lang.ref.WeakReference`;
  #L1ce488.  call `<init>`(v0, v3) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1ce48e.  v2.`c.f.b.k.f.G0` @type ^`java.lang.ref.WeakReference` := v0 @kind object;
  #L1ce492.  return @kind void;
}
procedure `void` `b`(`c.f.b.k.f` v2 @kind this, `c.f.b.k.d` v3 @kind object) @signature `Lc/f/b/k/f;.b:(Lc/f/b/k/d;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1ce5b8.  v0:= v2.`c.f.b.k.f.F0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce5bc.  if v0 == 0 then goto L1ce5f0;
  #L1ce5c0.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ce5c6.  v0:= temp @kind object;
  #L1ce5c8.  if v0 == 0 then goto L1ce5f0;
  #L1ce5cc.  call temp:= `getFinalValue`(v3) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1ce5d2.  v0:= temp;
  #L1ce5d4.  v1:= v2.`c.f.b.k.f.F0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce5d8.  call temp:= `get`(v1) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ce5de.  v1:= temp @kind object;
  #L1ce5e0.  v1:= (`c.f.b.k.d`) v1 @kind object;
  #L1ce5e4.  call temp:= `getFinalValue`(v1) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1ce5ea.  v1:= temp;
  #L1ce5ec.  if v0 <= v1 then goto L1ce5fe;
  #L1ce5f0.  v0:= new `java.lang.ref.WeakReference`;
  #L1ce5f4.  call `<init>`(v0, v3) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1ce5fa.  v2.`c.f.b.k.f.F0` @type ^`java.lang.ref.WeakReference` := v0 @kind object;
  #L1ce5fe.  return @kind void;
}
procedure `boolean` `directMeasure`(`c.f.b.k.f` v1 @kind this, `boolean` v2 ) @signature `Lc/f/b/k/f;.directMeasure:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cdf04.  v0:= v1.`c.f.b.k.f.r0` @type ^`c.f.b.k.n.e` @kind object;
  #L1cdf08.  call temp:= `directMeasure`(v0, v2) @signature `Lc/f/b/k/n/e;.directMeasure:(Z)Z` @kind virtual;
  #L1cdf0e.  v2:= temp;
  #L1cdf10.  return v2;
}
procedure `boolean` `directMeasureSetup`(`c.f.b.k.f` v1 @kind this, `boolean` v2 ) @signature `Lc/f/b/k/f;.directMeasureSetup:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cdf24.  v0:= v1.`c.f.b.k.f.r0` @type ^`c.f.b.k.n.e` @kind object;
  #L1cdf28.  call temp:= `directMeasureSetup`(v0, v2) @signature `Lc/f/b/k/n/e;.directMeasureSetup:(Z)Z` @kind virtual;
  #L1cdf2e.  v2:= temp;
  #L1cdf30.  return v2;
}
procedure `boolean` `directMeasureWithOrientation`(`c.f.b.k.f` v1 @kind this, `boolean` v2 , `int` v3 ) @signature `Lc/f/b/k/f;.directMeasureWithOrientation:(ZI)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cdf44.  v0:= v1.`c.f.b.k.f.r0` @type ^`c.f.b.k.n.e` @kind object;
  #L1cdf48.  call temp:= `directMeasureWithOrientation`(v0, v2, v3) @signature `Lc/f/b/k/n/e;.directMeasureWithOrientation:(ZI)Z` @kind virtual;
  #L1cdf4e.  v2:= temp;
  #L1cdf50.  return v2;
}
procedure `c.f.b.k.n.b$b` `getMeasurer`(`c.f.b.k.f` v1 @kind this) @signature `Lc/f/b/k/f;.getMeasurer:()Lc/f/b/k/n/b$b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cdce0.  v0:= v1.`c.f.b.k.f.s0` @type ^`c.f.b.k.n.b$b` @kind object;
  #L1cdce4.  return v0 @kind object;
}
procedure `int` `getOptimizationLevel`(`c.f.b.k.f` v1 @kind this) @signature `Lc/f/b/k/f;.getOptimizationLevel:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ce268.  v0:= v1.`c.f.b.k.f.C0` @type ^`int`;
  #L1ce26c.  return v0;
}
procedure `c.f.b.d` `getSystem`(`c.f.b.k.f` v1 @kind this) @signature `Lc/f/b/k/f;.getSystem:()Lc/f/b/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cdcc8.  v0:= v1.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1cdccc.  return v0 @kind object;
}
procedure `boolean` `handlesInternalConstraints`(`c.f.b.k.f` v1 @kind this) @signature `Lc/f/b/k/f;.handlesInternalConstraints:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cdf64.  v0:= 0I;
  #L1cdf66.  return v0;
}
procedure `void` `invalidateGraph`(`c.f.b.k.f` v1 @kind this) @signature `Lc/f/b/k/f;.invalidateGraph:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ce610.  v0:= v1.`c.f.b.k.f.r0` @type ^`c.f.b.k.n.e` @kind object;
  #L1ce614.  call `invalidateGraph`(v0) @signature `Lc/f/b/k/n/e;.invalidateGraph:()V` @kind virtual;
  #L1ce61a.  return @kind void;
}
procedure `void` `invalidateMeasures`(`c.f.b.k.f` v1 @kind this) @signature `Lc/f/b/k/f;.invalidateMeasures:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ce62c.  v0:= v1.`c.f.b.k.f.r0` @type ^`c.f.b.k.n.e` @kind object;
  #L1ce630.  call `invalidateMeasures`(v0) @signature `Lc/f/b/k/n/e;.invalidateMeasures:()V` @kind virtual;
  #L1ce636.  return @kind void;
}
procedure `boolean` `isHeightMeasuredTooSmall`(`c.f.b.k.f` v1 @kind this) @signature `Lc/f/b/k/f;.isHeightMeasuredTooSmall:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cdf78.  v0:= v1.`c.f.b.k.f.E0` @type ^`boolean` @kind boolean;
  #L1cdf7c.  return v0;
}
procedure `boolean` `isRtl`(`c.f.b.k.f` v1 @kind this) @signature `Lc/f/b/k/f;.isRtl:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cdf90.  v0:= v1.`c.f.b.k.f.t0` @type ^`boolean` @kind boolean;
  #L1cdf94.  return v0;
}
procedure `boolean` `isWidthMeasuredTooSmall`(`c.f.b.k.f` v1 @kind this) @signature `Lc/f/b/k/f;.isWidthMeasuredTooSmall:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cdfa8.  v0:= v1.`c.f.b.k.f.D0` @type ^`boolean` @kind boolean;
  #L1cdfac.  return v0;
}
procedure `void` `layout`(`c.f.b.k.f` v17 @kind this) @signature `Lc/f/b/k/f;.layout:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L1ce648.  v1:= v17 @kind object;
  #L1ce64c.  v2:= 0I;
  #L1ce64e.  v1.`c.f.b.k.e.W` @type ^`int` := v2;
  #L1ce652.  v1.`c.f.b.k.e.X` @type ^`int` := v2;
  #L1ce656.  v1.`c.f.b.k.f.D0` @type ^`boolean` := v2 @kind boolean;
  #L1ce65a.  v1.`c.f.b.k.f.E0` @type ^`boolean` := v2 @kind boolean;
  #L1ce65e.  v0:= v1.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1ce662.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1ce668.  v3:= temp;
  #L1ce66a.  call temp:= `getWidth`(v17) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1ce670.  v0:= temp;
  #L1ce672.  call temp:= `max`(v2, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1ce678.  v0:= temp;
  #L1ce67a.  call temp:= `getHeight`(v17) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1ce680.  v4:= temp;
  #L1ce682.  call temp:= `max`(v2, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1ce688.  v4:= temp;
  #L1ce68a.  v5:= v1.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1ce68e.  v6:= 1I;
  #L1ce690.  v7:= v5[v6] @kind object;
  #L1ce694.  v5:= v5[v2] @kind object;
  #L1ce698.  v8:= v1.`c.f.b.k.f.u0` @type ^`c.f.b.e` @kind object;
  #L1ce69c.  if v8 == 0 then goto L1ce6ae;
  #L1ce6a0.  v9:= v8.`c.f.b.e.z` @type ^`long` @kind wide;
  #L1ce6a4.  v11:= 1L;
  #L1ce6a8.  v9:= v9 + v11 @kind long;
  #L1ce6aa.  v8.`c.f.b.e.z` @type ^`long` := v9 @kind wide;
  #L1ce6ae.  v8:= v1.`c.f.b.k.f.C0` @type ^`int`;
  #L1ce6b2.  call temp:= `enabled`(v8, v6) @signature `Lc/f/b/k/k;.enabled:(II)Z` @kind static;
  #L1ce6b8.  v8:= temp;
  #L1ce6ba.  if v8 == 0 then goto L1ce766;
  #L1ce6be.  call temp:= `getMeasurer`(v17) @signature `Lc/f/b/k/f;.getMeasurer:()Lc/f/b/k/n/b$b;` @kind virtual;
  #L1ce6c4.  v8:= temp @kind object;
  #L1ce6c6.  call `solvingPass`(v1, v8) @signature `Lc/f/b/k/n/h;.solvingPass:(Lc/f/b/k/f;Lc/f/b/k/n/b$b;)V` @kind static;
  #L1ce6cc.  v8:= 0I;
  #L1ce6ce.  if v8 >= v3 then goto L1ce766;
  #L1ce6d2.  v9:= v1.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1ce6d6.  call temp:= `get`(v9, v8) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1ce6dc.  v9:= temp @kind object;
  #L1ce6de.  v9:= (`c.f.b.k.e`) v9 @kind object;
  #L1ce6e2.  call temp:= `isMeasureRequested`(v9) @signature `Lc/f/b/k/e;.isMeasureRequested:()Z` @kind virtual;
  #L1ce6e8.  v10:= temp;
  #L1ce6ea.  if v10 == 0 then goto L1ce760;
  #L1ce6ee.  v10:= instanceof @variable v9 @type ^`c.f.b.k.h` @kind boolean;
  #L1ce6f2.  if v10 != 0 then goto L1ce760;
  #L1ce6f6.  v10:= instanceof @variable v9 @type ^`c.f.b.k.a` @kind boolean;
  #L1ce6fa.  if v10 != 0 then goto L1ce760;
  #L1ce6fe.  v10:= instanceof @variable v9 @type ^`c.f.b.k.l` @kind boolean;
  #L1ce702.  if v10 != 0 then goto L1ce760;
  #L1ce706.  call temp:= `isInVirtualLayout`(v9) @signature `Lc/f/b/k/e;.isInVirtualLayout:()Z` @kind virtual;
  #L1ce70c.  v10:= temp;
  #L1ce70e.  if v10 != 0 then goto L1ce760;
  #L1ce712.  call temp:= `getDimensionBehaviour`(v9, v2) @signature `Lc/f/b/k/e;.getDimensionBehaviour:(I)Lc/f/b/k/e$b;` @kind virtual;
  #L1ce718.  v10:= temp @kind object;
  #L1ce71a.  call temp:= `getDimensionBehaviour`(v9, v6) @signature `Lc/f/b/k/e;.getDimensionBehaviour:(I)Lc/f/b/k/e$b;` @kind virtual;
  #L1ce720.  v11:= temp @kind object;
  #L1ce722.  v12:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce726.  if v10 != v12 then goto L1ce742;
  #L1ce72a.  v10:= v9.`c.f.b.k.e.n` @type ^`int`;
  #L1ce72e.  if v10 == v6 then goto L1ce742;
  #L1ce732.  if v11 != v12 then goto L1ce742;
  #L1ce736.  v10:= v9.`c.f.b.k.e.o` @type ^`int`;
  #L1ce73a.  if v10 == v6 then goto L1ce742;
  #L1ce73e.  v10:= 1I;
  #L1ce740.  goto L1ce744;
  #L1ce742.  v10:= 0I;
  #L1ce744.  if v10 != 0 then goto L1ce760;
  #L1ce748.  v10:= new `c.f.b.k.n.b$a`;
  #L1ce74c.  call `<init>`(v10) @signature `Lc/f/b/k/n/b$a;.<init>:()V` @kind direct;
  #L1ce752.  v11:= v1.`c.f.b.k.f.s0` @type ^`c.f.b.k.n.b$b` @kind object;
  #L1ce756.  v12:= `@@c.f.b.k.n.b$a.k` @type ^`int`;
  #L1ce75a.  call temp:= `measure`(v9, v11, v10, v12) @signature `Lc/f/b/k/f;.measure:(Lc/f/b/k/e;Lc/f/b/k/n/b$b;Lc/f/b/k/n/b$a;I)Z` @kind static;
  #L1ce760.  v8:= v8 + 1;
  #L1ce764.  goto L1ce6ce;
  #L1ce766.  v8:= 2I;
  #L1ce768.  if v3 <= v8 then goto L1ce800;
  #L1ce76c.  v9:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce770.  if v5 == v9 then goto L1ce778;
  #L1ce774.  if v7 != v9 then goto L1ce800;
  #L1ce778.  v9:= v1.`c.f.b.k.f.C0` @type ^`int`;
  #L1ce77c.  v10:= 1024I;
  #L1ce780.  call temp:= `enabled`(v9, v10) @signature `Lc/f/b/k/k;.enabled:(II)Z` @kind static;
  #L1ce786.  v9:= temp;
  #L1ce788.  if v9 == 0 then goto L1ce800;
  #L1ce78c.  call temp:= `getMeasurer`(v17) @signature `Lc/f/b/k/f;.getMeasurer:()Lc/f/b/k/n/b$b;` @kind virtual;
  #L1ce792.  v9:= temp @kind object;
  #L1ce794.  call temp:= `simpleSolvingPass`(v1, v9) @signature `Lc/f/b/k/n/i;.simpleSolvingPass:(Lc/f/b/k/f;Lc/f/b/k/n/b$b;)Z` @kind static;
  #L1ce79a.  v9:= temp;
  #L1ce79c.  if v9 == 0 then goto L1ce800;
  #L1ce7a0.  v9:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce7a4.  if v5 != v9 then goto L1ce7cc;
  #L1ce7a8.  call temp:= `getWidth`(v17) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1ce7ae.  v9:= temp;
  #L1ce7b0.  if v0 >= v9 then goto L1ce7c4;
  #L1ce7b4.  if v0 <= 0 then goto L1ce7c4;
  #L1ce7b8.  call `setWidth`(v1, v0) @signature `Lc/f/b/k/e;.setWidth:(I)V` @kind virtual;
  #L1ce7be.  v1.`c.f.b.k.f.D0` @type ^`boolean` := v6 @kind boolean;
  #L1ce7c2.  goto L1ce7cc;
  #L1ce7c4.  call temp:= `getWidth`(v17) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1ce7ca.  v0:= temp;
  #L1ce7cc.  v9:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce7d0.  if v7 != v9 then goto L1ce7f8;
  #L1ce7d4.  call temp:= `getHeight`(v17) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1ce7da.  v9:= temp;
  #L1ce7dc.  if v4 >= v9 then goto L1ce7f0;
  #L1ce7e0.  if v4 <= 0 then goto L1ce7f0;
  #L1ce7e4.  call `setHeight`(v1, v4) @signature `Lc/f/b/k/e;.setHeight:(I)V` @kind virtual;
  #L1ce7ea.  v1.`c.f.b.k.f.E0` @type ^`boolean` := v6 @kind boolean;
  #L1ce7ee.  goto L1ce7f8;
  #L1ce7f0.  call temp:= `getHeight`(v17) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1ce7f6.  v4:= temp;
  #L1ce7f8.  v9:= v4;
  #L1ce7fa.  v4:= v0;
  #L1ce7fc.  v0:= 1I;
  #L1ce7fe.  goto L1ce806;
  #L1ce800.  v9:= v4;
  #L1ce802.  v4:= v0;
  #L1ce804.  v0:= 0I;
  #L1ce806.  v10:= 64I;
  #L1ce80a.  call temp:= `optimizeFor`(v1, v10) @signature `Lc/f/b/k/f;.optimizeFor:(I)Z` @kind virtual;
  #L1ce810.  v11:= temp;
  #L1ce812.  if v11 != 0 then goto L1ce82c;
  #L1ce816.  v11:= 128I;
  #L1ce81a.  call temp:= `optimizeFor`(v1, v11) @signature `Lc/f/b/k/f;.optimizeFor:(I)Z` @kind virtual;
  #L1ce820.  v11:= temp;
  #L1ce822.  if v11 == 0 then goto L1ce828;
  #L1ce826.  goto L1ce82c;
  #L1ce828.  v11:= 0I;
  #L1ce82a.  goto L1ce82e;
  #L1ce82c.  v11:= 1I;
  #L1ce82e.  v12:= v1.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1ce832.  v12.`c.f.b.d.h` @type ^`boolean` := v2 @kind boolean;
  #L1ce836.  v12.`c.f.b.d.i` @type ^`boolean` := v2 @kind boolean;
  #L1ce83a.  v13:= v1.`c.f.b.k.f.C0` @type ^`int`;
  #L1ce83e.  if v13 == 0 then goto L1ce84a;
  #L1ce842.  if v11 == 0 then goto L1ce84a;
  #L1ce846.  v12.`c.f.b.d.i` @type ^`boolean` := v6 @kind boolean;
  #L1ce84a.  v11:= v1.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1ce84e.  call temp:= `getHorizontalDimensionBehaviour`(v17) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1ce854.  v12:= temp @kind object;
  #L1ce856.  v13:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce85a.  if v12 == v13 then goto L1ce874;
  #L1ce85e.  call temp:= `getVerticalDimensionBehaviour`(v17) @signature `Lc/f/b/k/e;.getVerticalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1ce864.  v12:= temp @kind object;
  #L1ce866.  v13:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1ce86a.  if v12 != v13 then goto L1ce870;
  #L1ce86e.  goto L1ce874;
  #L1ce870.  v12:= 0I;
  #L1ce872.  goto L1ce876;
  #L1ce874.  v12:= 1I;
  #L1ce876.  call `b`(v17) @signature `Lc/f/b/k/f;.b:()V` @kind direct;
  #L1ce87c.  v13:= 0I;
  #L1ce87e.  if v13 >= v3 then goto L1ce8aa;
  #L1ce882.  v14:= v1.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1ce886.  call temp:= `get`(v14, v13) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1ce88c.  v14:= temp @kind object;
  #L1ce88e.  v14:= (`c.f.b.k.e`) v14 @kind object;
  #L1ce892.  v15:= instanceof @variable v14 @type ^`c.f.b.k.m` @kind boolean;
  #L1ce896.  if v15 == 0 then goto L1ce8a4;
  #L1ce89a.  v14:= (`c.f.b.k.m`) v14 @kind object;
  #L1ce89e.  call `layout`(v14) @signature `Lc/f/b/k/m;.layout:()V` @kind virtual;
  #L1ce8a4.  v13:= v13 + 1;
  #L1ce8a8.  goto L1ce87e;
  #L1ce8aa.  call temp:= `optimizeFor`(v1, v10) @signature `Lc/f/b/k/f;.optimizeFor:(I)Z` @kind virtual;
  #L1ce8b0.  v10:= temp;
  #L1ce8b2.  v14:= v0;
  #L1ce8b4.  v0:= 0I;
  #L1ce8b6.  v13:= 1I;
  #L1ce8b8.  if v13 == 0 then goto L1cec8a;
  #L1ce8bc.  v15:= v0 + 1;
  #L1ce8c0.  v0:= v1.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1ce8c4.  call `reset`(v0) @signature `Lc/f/b/d;.reset:()V` @kind virtual;
  #L1ce8ca.  call `b`(v17) @signature `Lc/f/b/k/f;.b:()V` @kind direct;
  #L1ce8d0.  v0:= v1.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1ce8d4.  call `createObjectVariables`(v1, v0) @signature `Lc/f/b/k/e;.createObjectVariables:(Lc/f/b/d;)V` @kind virtual;
  #L1ce8da.  v0:= 0I;
  #L1ce8dc.  if v0 >= v3 then goto L1ce904;
  #L1ce8e0.  v6:= v1.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1ce8e4.  call temp:= `get`(v6, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1ce8ea.  v6:= temp @kind object;
  #L1ce8ec.  v6:= (`c.f.b.k.e`) v6 @kind object;
  #L1ce8f0.  v2:= v1.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1ce8f4.  call `createObjectVariables`(v6, v2) @signature `Lc/f/b/k/e;.createObjectVariables:(Lc/f/b/d;)V` @kind virtual;
  #L1ce8fa.  v0:= v0 + 1;
  #L1ce8fe.  v2:= 0I;
  #L1ce900.  v6:= 1I;
  #L1ce902.  goto L1ce8dc;
  #L1ce904.  v0:= v1.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1ce908.  call temp:= `addChildrenToSolver`(v1, v0) @signature `Lc/f/b/k/f;.addChildrenToSolver:(Lc/f/b/d;)Z` @kind virtual;
  #L1ce90e.  v13:= temp;
  #L1ce910.  v0:= v1.`c.f.b.k.f.F0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce914.  v2:= 0I;
  #L1ce916.  if v0 == 0 then goto L1ce954;
  #L1ce91a.  v0:= v1.`c.f.b.k.f.F0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce91e.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ce924.  v0:= temp @kind object;
  #L1ce926.  if v0 == 0 then goto L1ce954;
  #L1ce92a.  v0:= v1.`c.f.b.k.f.F0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce92e.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ce934.  v0:= temp @kind object;
  #L1ce936.  v0:= (`c.f.b.k.d`) v0 @kind object;
  #L1ce93a.  v6:= v1.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1ce93e.  v8:= v1.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1ce942.  call temp:= `createObjectVariable`(v6, v8) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1ce948.  v6:= temp @kind object;
  #L1ce94a.  call `b`(v1, v0, v6) @signature `Lc/f/b/k/f;.b:(Lc/f/b/k/d;Lc/f/b/i;)V` @kind direct;
  #L1ce950.  v1.`c.f.b.k.f.F0` @type ^`java.lang.ref.WeakReference` := v2 @kind object;
  #L1ce954.  v0:= v1.`c.f.b.k.f.H0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce958.  if v0 == 0 then goto L1ce996;
  #L1ce95c.  v0:= v1.`c.f.b.k.f.H0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce960.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ce966.  v0:= temp @kind object;
  #L1ce968.  if v0 == 0 then goto L1ce996;
  #L1ce96c.  v0:= v1.`c.f.b.k.f.H0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce970.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ce976.  v0:= temp @kind object;
  #L1ce978.  v0:= (`c.f.b.k.d`) v0 @kind object;
  #L1ce97c.  v6:= v1.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1ce980.  v8:= v1.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1ce984.  call temp:= `createObjectVariable`(v6, v8) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1ce98a.  v6:= temp @kind object;
  #L1ce98c.  call `a`(v1, v0, v6) @signature `Lc/f/b/k/f;.a:(Lc/f/b/k/d;Lc/f/b/i;)V` @kind direct;
  #L1ce992.  v1.`c.f.b.k.f.H0` @type ^`java.lang.ref.WeakReference` := v2 @kind object;
  #L1ce996.  v0:= v1.`c.f.b.k.f.G0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce99a.  if v0 == 0 then goto L1ce9d8;
  #L1ce99e.  v0:= v1.`c.f.b.k.f.G0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce9a2.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ce9a8.  v0:= temp @kind object;
  #L1ce9aa.  if v0 == 0 then goto L1ce9d8;
  #L1ce9ae.  v0:= v1.`c.f.b.k.f.G0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce9b2.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ce9b8.  v0:= temp @kind object;
  #L1ce9ba.  v0:= (`c.f.b.k.d`) v0 @kind object;
  #L1ce9be.  v6:= v1.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1ce9c2.  v8:= v1.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1ce9c6.  call temp:= `createObjectVariable`(v6, v8) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1ce9cc.  v6:= temp @kind object;
  #L1ce9ce.  call `b`(v1, v0, v6) @signature `Lc/f/b/k/f;.b:(Lc/f/b/k/d;Lc/f/b/i;)V` @kind direct;
  #L1ce9d4.  v1.`c.f.b.k.f.G0` @type ^`java.lang.ref.WeakReference` := v2 @kind object;
  #L1ce9d8.  v0:= v1.`c.f.b.k.f.I0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce9dc.  if v0 == 0 then goto L1cea1a;
  #L1ce9e0.  v0:= v1.`c.f.b.k.f.I0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce9e4.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ce9ea.  v0:= temp @kind object;
  #L1ce9ec.  if v0 == 0 then goto L1cea1a;
  #L1ce9f0.  v0:= v1.`c.f.b.k.f.I0` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1ce9f4.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ce9fa.  v0:= temp @kind object;
  #L1ce9fc.  v0:= (`c.f.b.k.d`) v0 @kind object;
  #L1cea00.  v6:= v1.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1cea04.  v8:= v1.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1cea08.  call temp:= `createObjectVariable`(v6, v8) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1cea0e.  v6:= temp @kind object;
  #L1cea10.  call `a`(v1, v0, v6) @signature `Lc/f/b/k/f;.a:(Lc/f/b/k/d;Lc/f/b/i;)V` @kind direct;
  #L1cea16.  v1.`c.f.b.k.f.I0` @type ^`java.lang.ref.WeakReference` := v2 @kind object;
  #L1cea1a.  if v13 == 0 then goto L1cea5e;
  #L1cea1e.  v0:= v1.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1cea22.  call `minimize`(v0) @signature `Lc/f/b/d;.minimize:()V` @kind virtual;
  #L1cea28.  goto L1cea5e;
  #L1cea2a.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L1cea2c.  call `printStackTrace`(v0) @signature `Ljava/lang/Exception;.printStackTrace:()V` @kind virtual;
  #L1cea32.  v2:= `@@java.lang.System.out` @type ^`java.io.PrintStream` @kind object;
  #L1cea36.  v6:= new `java.lang.StringBuilder`;
  #L1cea3a.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cea40.  v8:= "EXCEPTION : " @kind object;
  #L1cea44.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cea4a.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cea50.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cea56.  v0:= temp @kind object;
  #L1cea58.  call `println`(v2, v0) @signature `Ljava/io/PrintStream;.println:(Ljava/lang/String;)V` @kind virtual;
  #L1cea5e.  if v13 == 0 then goto L1cea72;
  #L1cea62.  v0:= v1.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1cea66.  v2:= `@@c.f.b.k.k.a` @type ^`boolean`[] @kind object;
  #L1cea6a.  call `updateChildrenFromSolver`(v1, v0, v2) @signature `Lc/f/b/k/f;.updateChildrenFromSolver:(Lc/f/b/d;[Z)V` @kind virtual;
  #L1cea70.  goto L1ceaa2;
  #L1cea72.  v0:= v1.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1cea76.  call `updateFromSolver`(v1, v0, v10) @signature `Lc/f/b/k/e;.updateFromSolver:(Lc/f/b/d;Z)V` @kind virtual;
  #L1cea7c.  v0:= 0I;
  #L1cea7e.  if v0 >= v3 then goto L1ceaa2;
  #L1cea82.  v2:= v1.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1cea86.  call temp:= `get`(v2, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1cea8c.  v2:= temp @kind object;
  #L1cea8e.  v2:= (`c.f.b.k.e`) v2 @kind object;
  #L1cea92.  v6:= v1.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1cea96.  call `updateFromSolver`(v2, v6, v10) @signature `Lc/f/b/k/e;.updateFromSolver:(Lc/f/b/d;Z)V` @kind virtual;
  #L1cea9c.  v0:= v0 + 1;
  #L1ceaa0.  goto L1cea7e;
  #L1ceaa2.  if v12 == 0 then goto L1ceb86;
  #L1ceaa6.  v0:= 8I;
  #L1ceaaa.  if v15 >= v0 then goto L1ceb86;
  #L1ceaae.  v0:= `@@c.f.b.k.k.a` @type ^`boolean`[] @kind object;
  #L1ceab2.  v2:= 2I;
  #L1ceab4.  v0:= v0[v2] @kind boolean;
  #L1ceab8.  if v0 == 0 then goto L1ceb86;
  #L1ceabc.  v0:= 0I;
  #L1ceabe.  v6:= 0I;
  #L1ceac0.  v8:= 0I;
  #L1ceac2.  if v0 >= v3 then goto L1ceb0c;
  #L1ceac6.  v13:= v1.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1ceaca.  call temp:= `get`(v13, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1cead0.  v13:= temp @kind object;
  #L1cead2.  v13:= (`c.f.b.k.e`) v13 @kind object;
  #L1cead6.  v2:= v13.`c.f.b.k.e.W` @type ^`int`;
  #L1ceada.  call temp:= `getWidth`(v13) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1ceae0.  v16:= temp;
  #L1ceae2.  v2:= v2 + v16 @kind int;
  #L1ceae6.  call temp:= `max`(v6, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1ceaec.  v6:= temp;
  #L1ceaee.  v2:= v13.`c.f.b.k.e.X` @type ^`int`;
  #L1ceaf2.  call temp:= `getHeight`(v13) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1ceaf8.  v13:= temp;
  #L1ceafa.  v2:= v2 + v13 @kind int;
  #L1ceafc.  call temp:= `max`(v8, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1ceb02.  v8:= temp;
  #L1ceb04.  v0:= v0 + 1;
  #L1ceb08.  v2:= 2I;
  #L1ceb0a.  goto L1ceac2;
  #L1ceb0c.  v0:= v1.`c.f.b.k.e.Z` @type ^`int`;
  #L1ceb10.  call temp:= `max`(v0, v6) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1ceb16.  v0:= temp;
  #L1ceb18.  v2:= v1.`c.f.b.k.e.a0` @type ^`int`;
  #L1ceb1c.  call temp:= `max`(v2, v8) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1ceb22.  v2:= temp;
  #L1ceb24.  v6:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1ceb28.  if v5 != v6 then goto L1ceb52;
  #L1ceb2c.  call temp:= `getWidth`(v17) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1ceb32.  v6:= temp;
  #L1ceb34.  if v6 >= v0 then goto L1ceb52;
  #L1ceb38.  call `setWidth`(v1, v0) @signature `Lc/f/b/k/e;.setWidth:(I)V` @kind virtual;
  #L1ceb3e.  v0:= v1.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1ceb42.  v6:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1ceb46.  v8:= 0I;
  #L1ceb48.  v0[v8]:= v6 @kind object;
  #L1ceb4c.  v0:= 1I;
  #L1ceb4e.  v14:= 1I;
  #L1ceb50.  goto L1ceb54;
  #L1ceb52.  v0:= 0I;
  #L1ceb54.  v6:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1ceb58.  if v7 != v6 then goto L1ceb82;
  #L1ceb5c.  call temp:= `getHeight`(v17) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1ceb62.  v6:= temp;
  #L1ceb64.  if v6 >= v2 then goto L1ceb82;
  #L1ceb68.  call `setHeight`(v1, v2) @signature `Lc/f/b/k/e;.setHeight:(I)V` @kind virtual;
  #L1ceb6e.  v0:= v1.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1ceb72.  v2:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1ceb76.  v6:= 1I;
  #L1ceb78.  v0[v6]:= v2 @kind object;
  #L1ceb7c.  v0:= 1I;
  #L1ceb7e.  v6:= 1I;
  #L1ceb80.  goto L1ceb8a;
  #L1ceb82.  v6:= v14;
  #L1ceb84.  goto L1ceb8a;
  #L1ceb86.  v6:= v14;
  #L1ceb88.  v0:= 0I;
  #L1ceb8a.  v2:= v1.`c.f.b.k.e.Z` @type ^`int`;
  #L1ceb8e.  call temp:= `getWidth`(v17) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1ceb94.  v8:= temp;
  #L1ceb96.  call temp:= `max`(v2, v8) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1ceb9c.  v2:= temp;
  #L1ceb9e.  call temp:= `getWidth`(v17) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1ceba4.  v8:= temp;
  #L1ceba6.  if v2 <= v8 then goto L1cebc2;
  #L1cebaa.  call `setWidth`(v1, v2) @signature `Lc/f/b/k/e;.setWidth:(I)V` @kind virtual;
  #L1cebb0.  v0:= v1.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1cebb4.  v2:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1cebb8.  v6:= 0I;
  #L1cebba.  v0[v6]:= v2 @kind object;
  #L1cebbe.  v0:= 1I;
  #L1cebc0.  v6:= 1I;
  #L1cebc2.  v2:= v1.`c.f.b.k.e.a0` @type ^`int`;
  #L1cebc6.  call temp:= `getHeight`(v17) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1cebcc.  v8:= temp;
  #L1cebce.  call temp:= `max`(v2, v8) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1cebd4.  v2:= temp;
  #L1cebd6.  call temp:= `getHeight`(v17) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1cebdc.  v8:= temp;
  #L1cebde.  if v2 <= v8 then goto L1cebfc;
  #L1cebe2.  call `setHeight`(v1, v2) @signature `Lc/f/b/k/e;.setHeight:(I)V` @kind virtual;
  #L1cebe8.  v0:= v1.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1cebec.  v2:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1cebf0.  v8:= 1I;
  #L1cebf2.  v0[v8]:= v2 @kind object;
  #L1cebf6.  v0:= 1I;
  #L1cebf8.  v6:= 1I;
  #L1cebfa.  goto L1cebfe;
  #L1cebfc.  v8:= 1I;
  #L1cebfe.  if v6 != 0 then goto L1cec7a;
  #L1cec02.  v2:= v1.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1cec06.  v13:= 0I;
  #L1cec08.  v2:= v2[v13] @kind object;
  #L1cec0c.  v14:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1cec10.  if v2 != v14 then goto L1cec3e;
  #L1cec14.  if v4 <= 0 then goto L1cec3e;
  #L1cec18.  call temp:= `getWidth`(v17) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1cec1e.  v2:= temp;
  #L1cec20.  if v2 <= v4 then goto L1cec3e;
  #L1cec24.  v1.`c.f.b.k.f.D0` @type ^`boolean` := v8 @kind boolean;
  #L1cec28.  v0:= v1.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1cec2c.  v2:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1cec30.  v0[v13]:= v2 @kind object;
  #L1cec34.  call `setWidth`(v1, v4) @signature `Lc/f/b/k/e;.setWidth:(I)V` @kind virtual;
  #L1cec3a.  v0:= 1I;
  #L1cec3c.  v6:= 1I;
  #L1cec3e.  v2:= v1.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1cec42.  v2:= v2[v8] @kind object;
  #L1cec46.  v13:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1cec4a.  if v2 != v13 then goto L1cec7a;
  #L1cec4e.  if v9 <= 0 then goto L1cec7a;
  #L1cec52.  call temp:= `getHeight`(v17) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1cec58.  v2:= temp;
  #L1cec5a.  if v2 <= v9 then goto L1cec7a;
  #L1cec5e.  v1.`c.f.b.k.f.E0` @type ^`boolean` := v8 @kind boolean;
  #L1cec62.  v0:= v1.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1cec66.  v2:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1cec6a.  v0[v8]:= v2 @kind object;
  #L1cec6e.  call `setHeight`(v1, v9) @signature `Lc/f/b/k/e;.setHeight:(I)V` @kind virtual;
  #L1cec74.  v13:= 1I;
  #L1cec76.  v14:= 1I;
  #L1cec78.  goto L1cec7e;
  #L1cec7a.  v13:= v0;
  #L1cec7c.  v14:= v6;
  #L1cec7e.  v0:= v15;
  #L1cec80.  v2:= 0I;
  #L1cec82.  v6:= 1I;
  #L1cec84.  v8:= 2I;
  #L1cec86.  goto L1ce8b8;
  #L1cec8a.  v1.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` := v11 @kind object;
  #L1cec8e.  if v14 == 0 then goto L1ceca2;
  #L1cec92.  v0:= v1.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1cec96.  v2:= 0I;
  #L1cec98.  v0[v2]:= v5 @kind object;
  #L1cec9c.  v2:= 1I;
  #L1cec9e.  v0[v2]:= v7 @kind object;
  #L1ceca2.  v0:= v1.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1ceca6.  call temp:= `getCache`(v0) @signature `Lc/f/b/d;.getCache:()Lc/f/b/c;` @kind virtual;
  #L1cecac.  v0:= temp @kind object;
  #L1cecae.  call `resetSolverVariables`(v1, v0) @signature `Lc/f/b/k/m;.resetSolverVariables:(Lc/f/b/c;)V` @kind virtual;
  #L1cecb4.  return @kind void;
  catch `java.lang.Exception` @[L1ce8c0..L1cea28] goto L1cea2a;
}
procedure `long` `measure`(`c.f.b.k.f` v12 @kind this, `int` v13 , `int` v14 , `int` v15 , `int` v16 , `int` v17 , `int` v18 , `int` v19 , `int` v20 , `int` v21 ) @signature `Lc/f/b/k/f;.measure:(IIIIIIIII)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1ce280.  v11:= v12 @kind object;
  #L1ce282.  v3:= v20;
  #L1ce286.  v11.`c.f.b.k.f.w0` @type ^`int` := v3;
  #L1ce28a.  v4:= v21;
  #L1ce28e.  v11.`c.f.b.k.f.x0` @type ^`int` := v4;
  #L1ce292.  v0:= v11.`c.f.b.k.f.q0` @type ^`c.f.b.k.n.b` @kind object;
  #L1ce296.  v1:= v12 @kind object;
  #L1ce298.  v2:= v13;
  #L1ce29a.  v5:= v14;
  #L1ce29c.  v6:= v15;
  #L1ce29e.  v7:= v16;
  #L1ce2a2.  v8:= v17;
  #L1ce2a6.  v9:= v18;
  #L1ce2aa.  v10:= v19;
  #L1ce2ae.  call temp:= `solverMeasure`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lc/f/b/k/n/b;.solverMeasure:(Lc/f/b/k/f;IIIIIIIII)J` @kind virtual;
  #L1ce2b4.  v0:= temp @kind wide;
  #L1ce2b6.  return v0 @kind wide;
}
procedure `boolean` `optimizeFor`(`c.f.b.k.f` v1 @kind this, `int` v2 ) @signature `Lc/f/b/k/f;.optimizeFor:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ce244.  v0:= v1.`c.f.b.k.f.C0` @type ^`int`;
  #L1ce248.  v0:= v0 ^& v2 @kind int;
  #L1ce24a.  if v0 != v2 then goto L1ce252;
  #L1ce24e.  v2:= 1I;
  #L1ce250.  goto L1ce254;
  #L1ce252.  v2:= 0I;
  #L1ce254.  return v2;
}
procedure `void` `reset`(`c.f.b.k.f` v1 @kind this) @signature `Lc/f/b/k/f;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cecd8.  v0:= v1.`c.f.b.k.f.v0` @type ^`c.f.b.d` @kind object;
  #L1cecdc.  call `reset`(v0) @signature `Lc/f/b/d;.reset:()V` @kind virtual;
  #L1cece2.  v0:= 0I;
  #L1cece4.  v1.`c.f.b.k.f.w0` @type ^`int` := v0;
  #L1cece8.  v1.`c.f.b.k.f.x0` @type ^`int` := v0;
  #L1cecec.  call `reset`(v1) @signature `Lc/f/b/k/m;.reset:()V` @kind super;
  #L1cecf2.  return @kind void;
}
procedure `void` `setMeasurer`(`c.f.b.k.f` v1 @kind this, `c.f.b.k.n.b$b` v2 @kind object) @signature `Lc/f/b/k/f;.setMeasurer:(Lc/f/b/k/n/b$b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ced20.  v1.`c.f.b.k.f.s0` @type ^`c.f.b.k.n.b$b` := v2 @kind object;
  #L1ced24.  v0:= v1.`c.f.b.k.f.r0` @type ^`c.f.b.k.n.e` @kind object;
  #L1ced28.  call `setMeasurer`(v0, v2) @signature `Lc/f/b/k/n/e;.setMeasurer:(Lc/f/b/k/n/b$b;)V` @kind virtual;
  #L1ced2e.  return @kind void;
}
procedure `void` `setOptimizationLevel`(`c.f.b.k.f` v0 @kind this, `int` v1 ) @signature `Lc/f/b/k/f;.setOptimizationLevel:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1ced40.  v0.`c.f.b.k.f.C0` @type ^`int` := v1;
  #L1ced44.  v1:= 512I;
  #L1ced48.  call temp:= `optimizeFor`(v0, v1) @signature `Lc/f/b/k/f;.optimizeFor:(I)Z` @kind virtual;
  #L1ced4e.  v1:= temp;
  #L1ced50.  `@@c.f.b.d.r` @type ^`boolean` := v1 @kind boolean;
  #L1ced54.  return @kind void;
}
procedure `void` `setRtl`(`c.f.b.k.f` v0 @kind this, `boolean` v1 ) @signature `Lc/f/b/k/f;.setRtl:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L1ced68.  v0.`c.f.b.k.f.t0` @type ^`boolean` := v1 @kind boolean;
  #L1ced6c.  return @kind void;
}
procedure `void` `updateChildrenFromSolver`(`c.f.b.k.f` v3 @kind this, `c.f.b.d` v4 @kind object, `boolean`[] v5 @kind object) @signature `Lc/f/b/k/f;.updateChildrenFromSolver:(Lc/f/b/d;[Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1ced80.  v0:= 0I;
  #L1ced82.  v1:= 2I;
  #L1ced84.  v5[v1]:= v0 @kind boolean;
  #L1ced88.  v5:= 64I;
  #L1ced8c.  call temp:= `optimizeFor`(v3, v5) @signature `Lc/f/b/k/f;.optimizeFor:(I)Z` @kind virtual;
  #L1ced92.  v5:= temp;
  #L1ced94.  call `updateFromSolver`(v3, v4, v5) @signature `Lc/f/b/k/e;.updateFromSolver:(Lc/f/b/d;Z)V` @kind virtual;
  #L1ced9a.  v1:= v3.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1ced9e.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1ceda4.  v1:= temp;
  #L1ceda6.  if v0 >= v1 then goto L1cedc6;
  #L1cedaa.  v2:= v3.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1cedae.  call temp:= `get`(v2, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1cedb4.  v2:= temp @kind object;
  #L1cedb6.  v2:= (`c.f.b.k.e`) v2 @kind object;
  #L1cedba.  call `updateFromSolver`(v2, v4, v5) @signature `Lc/f/b/k/e;.updateFromSolver:(Lc/f/b/d;Z)V` @kind virtual;
  #L1cedc0.  v0:= v0 + 1;
  #L1cedc4.  goto L1ceda6;
  #L1cedc6.  return @kind void;
}
procedure `void` `updateFromRuns`(`c.f.b.k.f` v3 @kind this, `boolean` v4 , `boolean` v5 ) @signature `Lc/f/b/k/f;.updateFromRuns:(ZZ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1cedd8.  call `updateFromRuns`(v3, v4, v5) @signature `Lc/f/b/k/e;.updateFromRuns:(ZZ)V` @kind super;
  #L1cedde.  v0:= v3.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1cede2.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1cede8.  v0:= temp;
  #L1cedea.  v1:= 0I;
  #L1cedec.  if v1 >= v0 then goto L1cee0c;
  #L1cedf0.  v2:= v3.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1cedf4.  call temp:= `get`(v2, v1) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1cedfa.  v2:= temp @kind object;
  #L1cedfc.  v2:= (`c.f.b.k.e`) v2 @kind object;
  #L1cee00.  call `updateFromRuns`(v2, v4, v5) @signature `Lc/f/b/k/e;.updateFromRuns:(ZZ)V` @kind virtual;
  #L1cee06.  v1:= v1 + 1;
  #L1cee0a.  goto L1cedec;
  #L1cee0c.  return @kind void;
}
procedure `void` `updateHierarchy`(`c.f.b.k.f` v1 @kind this) @signature `Lc/f/b/k/f;.updateHierarchy:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cee20.  v0:= v1.`c.f.b.k.f.q0` @type ^`c.f.b.k.n.b` @kind object;
  #L1cee24.  call `updateHierarchy`(v0, v1) @signature `Lc/f/b/k/n/b;.updateHierarchy:(Lc/f/b/k/f;)V` @kind virtual;
  #L1cee2a.  return @kind void;
}
