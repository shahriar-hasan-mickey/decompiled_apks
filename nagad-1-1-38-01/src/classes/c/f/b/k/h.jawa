record `c.f.b.k.h` @kind class @AccessFlag PUBLIC extends `c.f.b.k.e` @kind class {
  `float` `c.f.b.k.h.p0` @AccessFlag PROTECTED;
  `int` `c.f.b.k.h.q0` @AccessFlag PROTECTED;
  `int` `c.f.b.k.h.r0` @AccessFlag PROTECTED;
  `c.f.b.k.d` `c.f.b.k.h.s0` @AccessFlag PRIVATE;
  `int` `c.f.b.k.h.t0` @AccessFlag PRIVATE;
  `boolean` `c.f.b.k.h.u0` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.f.b.k.h` v4 @kind this) @signature `Lc/f/b/k/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d46c0.  call `<init>`(v4) @signature `Lc/f/b/k/e;.<init>:()V` @kind direct;
  #L1d46c6.  v0:= -1.0F;
  #L1d46ca.  v4.`c.f.b.k.h.p0` @type ^`float` := v0;
  #L1d46ce.  v0:= -1I;
  #L1d46d0.  v4.`c.f.b.k.h.q0` @type ^`int` := v0;
  #L1d46d4.  v4.`c.f.b.k.h.r0` @type ^`int` := v0;
  #L1d46d8.  v0:= v4.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d46dc.  v4.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` := v0 @kind object;
  #L1d46e0.  v0:= 0I;
  #L1d46e2.  v4.`c.f.b.k.h.t0` @type ^`int` := v0;
  #L1d46e6.  v1:= v4.`c.f.b.k.e.O` @type ^`java.util.ArrayList` @kind object;
  #L1d46ea.  call `clear`(v1) @signature `Ljava/util/ArrayList;.clear:()V` @kind virtual;
  #L1d46f0.  v1:= v4.`c.f.b.k.e.O` @type ^`java.util.ArrayList` @kind object;
  #L1d46f4.  v2:= v4.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` @kind object;
  #L1d46f8.  call temp:= `add`(v1, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d46fe.  v1:= v4.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1d4702.  v1:= length @variable v1;
  #L1d4704.  if v0 >= v1 then goto L1d471a;
  #L1d4708.  v2:= v4.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1d470c.  v3:= v4.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` @kind object;
  #L1d4710.  v2[v0]:= v3 @kind object;
  #L1d4714.  v0:= v0 + 1;
  #L1d4718.  goto L1d4704;
  #L1d471a.  return @kind void;
}
procedure `void` `addToSolver`(`c.f.b.k.h` v7 @kind this, `c.f.b.d` v8 @kind object, `boolean` v9 ) @signature `Lc/f/b/k/h;.addToSolver:(Lc/f/b/d;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1d472c.  call temp:= `getParent`(v7) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1d4732.  v9:= temp @kind object;
  #L1d4734.  v9:= (`c.f.b.k.f`) v9 @kind object;
  #L1d4738.  if v9 != 0 then goto L1d473e;
  #L1d473c.  return @kind void;
  #L1d473e.  v0:= `@@c.f.b.k.d$b.g` @type ^`c.f.b.k.d$b` @kind object;
  #L1d4742.  call temp:= `getAnchor`(v9, v0) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1d4748.  v0:= temp @kind object;
  #L1d474a.  v1:= `@@c.f.b.k.d$b.i` @type ^`c.f.b.k.d$b` @kind object;
  #L1d474e.  call temp:= `getAnchor`(v9, v1) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1d4754.  v1:= temp @kind object;
  #L1d4756.  v2:= v7.`c.f.b.k.e.R` @type ^`c.f.b.k.e` @kind object;
  #L1d475a.  v3:= 1I;
  #L1d475c.  v4:= 0I;
  #L1d475e.  if v2 == 0 then goto L1d4776;
  #L1d4762.  v2:= v2.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1d4766.  v2:= v2[v4] @kind object;
  #L1d476a.  v5:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1d476e.  if v2 != v5 then goto L1d4776;
  #L1d4772.  v2:= 1I;
  #L1d4774.  goto L1d4778;
  #L1d4776.  v2:= 0I;
  #L1d4778.  v5:= v7.`c.f.b.k.h.t0` @type ^`int`;
  #L1d477c.  if v5 != 0 then goto L1d47b6;
  #L1d4780.  v0:= `@@c.f.b.k.d$b.h` @type ^`c.f.b.k.d$b` @kind object;
  #L1d4784.  call temp:= `getAnchor`(v9, v0) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1d478a.  v0:= temp @kind object;
  #L1d478c.  v1:= `@@c.f.b.k.d$b.j` @type ^`c.f.b.k.d$b` @kind object;
  #L1d4790.  call temp:= `getAnchor`(v9, v1) @signature `Lc/f/b/k/e;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @kind virtual;
  #L1d4796.  v1:= temp @kind object;
  #L1d4798.  v9:= v7.`c.f.b.k.e.R` @type ^`c.f.b.k.e` @kind object;
  #L1d479c.  if v9 == 0 then goto L1d47b4;
  #L1d47a0.  v9:= v9.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1d47a4.  v9:= v9[v3] @kind object;
  #L1d47a8.  v2:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1d47ac.  if v9 != v2 then goto L1d47b4;
  #L1d47b0.  v2:= 1I;
  #L1d47b2.  goto L1d47b6;
  #L1d47b4.  v2:= 0I;
  #L1d47b6.  v9:= v7.`c.f.b.k.h.u0` @type ^`boolean` @kind boolean;
  #L1d47ba.  v3:= -1I;
  #L1d47bc.  v5:= 5I;
  #L1d47be.  if v9 == 0 then goto L1d483a;
  #L1d47c2.  v9:= v7.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` @kind object;
  #L1d47c6.  call temp:= `hasFinalValue`(v9) @signature `Lc/f/b/k/d;.hasFinalValue:()Z` @kind virtual;
  #L1d47cc.  v9:= temp;
  #L1d47ce.  if v9 == 0 then goto L1d483a;
  #L1d47d2.  v9:= v7.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` @kind object;
  #L1d47d6.  call temp:= `createObjectVariable`(v8, v9) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1d47dc.  v9:= temp @kind object;
  #L1d47de.  v6:= v7.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` @kind object;
  #L1d47e2.  call temp:= `getFinalValue`(v6) @signature `Lc/f/b/k/d;.getFinalValue:()I` @kind virtual;
  #L1d47e8.  v6:= temp;
  #L1d47ea.  call `addEquality`(v8, v9, v6) @signature `Lc/f/b/d;.addEquality:(Lc/f/b/i;I)V` @kind virtual;
  #L1d47f0.  v6:= v7.`c.f.b.k.h.q0` @type ^`int`;
  #L1d47f4.  if v6 == v3 then goto L1d480c;
  #L1d47f8.  if v2 == 0 then goto L1d4834;
  #L1d47fc.  call temp:= `createObjectVariable`(v8, v1) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1d4802.  v0:= temp @kind object;
  #L1d4804.  call `addGreaterThan`(v8, v0, v9, v4, v5) @signature `Lc/f/b/d;.addGreaterThan:(Lc/f/b/i;Lc/f/b/i;II)V` @kind virtual;
  #L1d480a.  goto L1d4834;
  #L1d480c.  v6:= v7.`c.f.b.k.h.r0` @type ^`int`;
  #L1d4810.  if v6 == v3 then goto L1d4834;
  #L1d4814.  if v2 == 0 then goto L1d4834;
  #L1d4818.  call temp:= `createObjectVariable`(v8, v1) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1d481e.  v1:= temp @kind object;
  #L1d4820.  call temp:= `createObjectVariable`(v8, v0) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1d4826.  v0:= temp @kind object;
  #L1d4828.  call `addGreaterThan`(v8, v9, v0, v4, v5) @signature `Lc/f/b/d;.addGreaterThan:(Lc/f/b/i;Lc/f/b/i;II)V` @kind virtual;
  #L1d482e.  call `addGreaterThan`(v8, v1, v9, v4, v5) @signature `Lc/f/b/d;.addGreaterThan:(Lc/f/b/i;Lc/f/b/i;II)V` @kind virtual;
  #L1d4834.  v7.`c.f.b.k.h.u0` @type ^`boolean` := v4 @kind boolean;
  #L1d4838.  return @kind void;
  #L1d483a.  v9:= v7.`c.f.b.k.h.q0` @type ^`int`;
  #L1d483e.  v6:= 8I;
  #L1d4842.  if v9 == v3 then goto L1d4878;
  #L1d4846.  v9:= v7.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` @kind object;
  #L1d484a.  call temp:= `createObjectVariable`(v8, v9) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1d4850.  v9:= temp @kind object;
  #L1d4852.  call temp:= `createObjectVariable`(v8, v0) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1d4858.  v0:= temp @kind object;
  #L1d485a.  v3:= v7.`c.f.b.k.h.q0` @type ^`int`;
  #L1d485e.  call temp:= `addEquality`(v8, v9, v0, v3, v6) @signature `Lc/f/b/d;.addEquality:(Lc/f/b/i;Lc/f/b/i;II)Lc/f/b/b;` @kind virtual;
  #L1d4864.  if v2 == 0 then goto L1d48f0;
  #L1d4868.  call temp:= `createObjectVariable`(v8, v1) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1d486e.  v0:= temp @kind object;
  #L1d4870.  call `addGreaterThan`(v8, v0, v9, v4, v5) @signature `Lc/f/b/d;.addGreaterThan:(Lc/f/b/i;Lc/f/b/i;II)V` @kind virtual;
  #L1d4876.  goto L1d48f0;
  #L1d4878.  v9:= v7.`c.f.b.k.h.r0` @type ^`int`;
  #L1d487c.  if v9 == v3 then goto L1d48ba;
  #L1d4880.  v9:= v7.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` @kind object;
  #L1d4884.  call temp:= `createObjectVariable`(v8, v9) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1d488a.  v9:= temp @kind object;
  #L1d488c.  call temp:= `createObjectVariable`(v8, v1) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1d4892.  v1:= temp @kind object;
  #L1d4894.  v3:= v7.`c.f.b.k.h.r0` @type ^`int`;
  #L1d4898.  v3:= -v3 @kind int;
  #L1d489a.  call temp:= `addEquality`(v8, v9, v1, v3, v6) @signature `Lc/f/b/d;.addEquality:(Lc/f/b/i;Lc/f/b/i;II)Lc/f/b/b;` @kind virtual;
  #L1d48a0.  if v2 == 0 then goto L1d48f0;
  #L1d48a4.  call temp:= `createObjectVariable`(v8, v0) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1d48aa.  v0:= temp @kind object;
  #L1d48ac.  call `addGreaterThan`(v8, v9, v0, v4, v5) @signature `Lc/f/b/d;.addGreaterThan:(Lc/f/b/i;Lc/f/b/i;II)V` @kind virtual;
  #L1d48b2.  call `addGreaterThan`(v8, v1, v9, v4, v5) @signature `Lc/f/b/d;.addGreaterThan:(Lc/f/b/i;Lc/f/b/i;II)V` @kind virtual;
  #L1d48b8.  goto L1d48f0;
  #L1d48ba.  v9:= v7.`c.f.b.k.h.p0` @type ^`float`;
  #L1d48be.  v0:= -1.0F;
  #L1d48c2.  v9:= fcmpl(v9, v0);
  #L1d48c6.  if v9 == 0 then goto L1d48f0;
  #L1d48ca.  v9:= v7.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` @kind object;
  #L1d48ce.  call temp:= `createObjectVariable`(v8, v9) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1d48d4.  v9:= temp @kind object;
  #L1d48d6.  call temp:= `createObjectVariable`(v8, v1) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1d48dc.  v0:= temp @kind object;
  #L1d48de.  v1:= v7.`c.f.b.k.h.p0` @type ^`float`;
  #L1d48e2.  call temp:= `createRowDimensionPercent`(v8, v9, v0, v1) @signature `Lc/f/b/d;.createRowDimensionPercent:(Lc/f/b/d;Lc/f/b/i;Lc/f/b/i;F)Lc/f/b/b;` @kind static;
  #L1d48e8.  v9:= temp @kind object;
  #L1d48ea.  call `addConstraint`(v8, v9) @signature `Lc/f/b/d;.addConstraint:(Lc/f/b/b;)V` @kind virtual;
  #L1d48f0.  return @kind void;
}
procedure `boolean` `allowedInBarrier`(`c.f.b.k.h` v1 @kind this) @signature `Lc/f/b/k/h;.allowedInBarrier:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d461c.  v0:= 1I;
  #L1d461e.  return v0;
}
procedure `c.f.b.k.d` `getAnchor`(`c.f.b.k.h` v1 @kind this) @signature `Lc/f/b/k/h;.getAnchor:()Lc/f/b/k/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4578.  v0:= v1.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` @kind object;
  #L1d457c.  return v0 @kind object;
}
procedure `c.f.b.k.d` `getAnchor`(`c.f.b.k.h` v2 @kind this, `c.f.b.k.d$b` v3 @kind object) @signature `Lc/f/b/k/h;.getAnchor:(Lc/f/b/k/d$b;)Lc/f/b/k/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d4590.  v0:= `@@c.f.b.k.h$a.a` @type ^`int`[] @kind object;
  #L1d4594.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1d459a.  v1:= temp;
  #L1d459c.  v0:= v0[v1];
  #L1d45a0.  goto L1d45e0;
  #L1d45a6.  goto L1d45ca;
  #L1d45a8.  v3:= 0I;
  #L1d45aa.  return v3 @kind object;
  #L1d45ac.  v0:= v2.`c.f.b.k.h.t0` @type ^`int`;
  #L1d45b0.  if v0 != 0 then goto L1d45ca;
  #L1d45b4.  v3:= v2.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` @kind object;
  #L1d45b8.  return v3 @kind object;
  #L1d45ba.  v0:= v2.`c.f.b.k.h.t0` @type ^`int`;
  #L1d45be.  v1:= 1I;
  #L1d45c0.  if v0 != v1 then goto L1d45ca;
  #L1d45c4.  v3:= v2.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` @kind object;
  #L1d45c8.  return v3 @kind object;
  #L1d45ca.  v0:= new `java.lang.AssertionError`;
  #L1d45ce.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L1d45d4.  v3:= temp @kind object;
  #L1d45d6.  call `<init>`(v0, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1d45dc.  throw v0;
  #L1d45de.  
  #L1d45e0.  switch v0
                  | 1 => goto L1d45ba
                  | 2 => goto L1d45ba
                  | 3 => goto L1d45ac
                  | 4 => goto L1d45ac
                  | 5 => goto L1d45a8
                  | 6 => goto L1d45a8
                  | 7 => goto L1d45a8
                  | 8 => goto L1d45a8
                  | 9 => goto L1d45a8
                  | else => goto L1d45a6;
}
procedure `int` `getOrientation`(`c.f.b.k.h` v1 @kind this) @signature `Lc/f/b/k/h;.getOrientation:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4678.  v0:= v1.`c.f.b.k.h.t0` @type ^`int`;
  #L1d467c.  return v0;
}
procedure `int` `getRelativeBegin`(`c.f.b.k.h` v1 @kind this) @signature `Lc/f/b/k/h;.getRelativeBegin:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4690.  v0:= v1.`c.f.b.k.h.q0` @type ^`int`;
  #L1d4694.  return v0;
}
procedure `int` `getRelativeEnd`(`c.f.b.k.h` v1 @kind this) @signature `Lc/f/b/k/h;.getRelativeEnd:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d46a8.  v0:= v1.`c.f.b.k.h.r0` @type ^`int`;
  #L1d46ac.  return v0;
}
procedure `float` `getRelativePercent`(`c.f.b.k.h` v1 @kind this) @signature `Lc/f/b/k/h;.getRelativePercent:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4660.  v0:= v1.`c.f.b.k.h.p0` @type ^`float`;
  #L1d4664.  return v0;
}
procedure `boolean` `isResolvedHorizontally`(`c.f.b.k.h` v1 @kind this) @signature `Lc/f/b/k/h;.isResolvedHorizontally:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4630.  v0:= v1.`c.f.b.k.h.u0` @type ^`boolean` @kind boolean;
  #L1d4634.  return v0;
}
procedure `boolean` `isResolvedVertically`(`c.f.b.k.h` v1 @kind this) @signature `Lc/f/b/k/h;.isResolvedVertically:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4648.  v0:= v1.`c.f.b.k.h.u0` @type ^`boolean` @kind boolean;
  #L1d464c.  return v0;
}
procedure `void` `setFinalValue`(`c.f.b.k.h` v1 @kind this, `int` v2 ) @signature `Lc/f/b/k/h;.setFinalValue:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4904.  v0:= v1.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` @kind object;
  #L1d4908.  call `setFinalValue`(v0, v2) @signature `Lc/f/b/k/d;.setFinalValue:(I)V` @kind virtual;
  #L1d490e.  v2:= 1I;
  #L1d4910.  v1.`c.f.b.k.h.u0` @type ^`boolean` := v2 @kind boolean;
  #L1d4914.  return @kind void;
}
procedure `void` `setGuideBegin`(`c.f.b.k.h` v2 @kind this, `int` v3 ) @signature `Lc/f/b/k/h;.setGuideBegin:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d4928.  v0:= -1I;
  #L1d492a.  if v3 <= v0 then goto L1d493e;
  #L1d492e.  v1:= -1.0F;
  #L1d4932.  v2.`c.f.b.k.h.p0` @type ^`float` := v1;
  #L1d4936.  v2.`c.f.b.k.h.q0` @type ^`int` := v3;
  #L1d493a.  v2.`c.f.b.k.h.r0` @type ^`int` := v0;
  #L1d493e.  return @kind void;
}
procedure `void` `setGuideEnd`(`c.f.b.k.h` v2 @kind this, `int` v3 ) @signature `Lc/f/b/k/h;.setGuideEnd:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d4950.  v0:= -1I;
  #L1d4952.  if v3 <= v0 then goto L1d4966;
  #L1d4956.  v1:= -1.0F;
  #L1d495a.  v2.`c.f.b.k.h.p0` @type ^`float` := v1;
  #L1d495e.  v2.`c.f.b.k.h.q0` @type ^`int` := v0;
  #L1d4962.  v2.`c.f.b.k.h.r0` @type ^`int` := v3;
  #L1d4966.  return @kind void;
}
procedure `void` `setGuidePercent`(`c.f.b.k.h` v1 @kind this, `float` v2 ) @signature `Lc/f/b/k/h;.setGuidePercent:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4978.  v0:= -1.0F;
  #L1d497c.  v0:= fcmpl(v2, v0);
  #L1d4980.  if v0 <= 0 then goto L1d4992;
  #L1d4984.  v1.`c.f.b.k.h.p0` @type ^`float` := v2;
  #L1d4988.  v2:= -1I;
  #L1d498a.  v1.`c.f.b.k.h.q0` @type ^`int` := v2;
  #L1d498e.  v1.`c.f.b.k.h.r0` @type ^`int` := v2;
  #L1d4992.  return @kind void;
}
procedure `void` `setOrientation`(`c.f.b.k.h` v3 @kind this, `int` v4 ) @signature `Lc/f/b/k/h;.setOrientation:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d49a4.  v0:= v3.`c.f.b.k.h.t0` @type ^`int`;
  #L1d49a8.  if v0 != v4 then goto L1d49ae;
  #L1d49ac.  return @kind void;
  #L1d49ae.  v3.`c.f.b.k.h.t0` @type ^`int` := v4;
  #L1d49b2.  v4:= v3.`c.f.b.k.e.O` @type ^`java.util.ArrayList` @kind object;
  #L1d49b6.  call `clear`(v4) @signature `Ljava/util/ArrayList;.clear:()V` @kind virtual;
  #L1d49bc.  v4:= v3.`c.f.b.k.h.t0` @type ^`int`;
  #L1d49c0.  v0:= 1I;
  #L1d49c2.  if v4 != v0 then goto L1d49d0;
  #L1d49c6.  v4:= v3.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d49ca.  v3.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` := v4 @kind object;
  #L1d49ce.  goto L1d49d8;
  #L1d49d0.  v4:= v3.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d49d4.  v3.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` := v4 @kind object;
  #L1d49d8.  v4:= v3.`c.f.b.k.e.O` @type ^`java.util.ArrayList` @kind object;
  #L1d49dc.  v0:= v3.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` @kind object;
  #L1d49e0.  call temp:= `add`(v4, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d49e6.  v4:= v3.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1d49ea.  v4:= length @variable v4;
  #L1d49ec.  v0:= 0I;
  #L1d49ee.  if v0 >= v4 then goto L1d4a04;
  #L1d49f2.  v1:= v3.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1d49f6.  v2:= v3.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` @kind object;
  #L1d49fa.  v1[v0]:= v2 @kind object;
  #L1d49fe.  v0:= v0 + 1;
  #L1d4a02.  goto L1d49ee;
  #L1d4a04.  return @kind void;
}
procedure `void` `updateFromSolver`(`c.f.b.k.h` v2 @kind this, `c.f.b.d` v3 @kind object, `boolean` v4 ) @signature `Lc/f/b/k/h;.updateFromSolver:(Lc/f/b/d;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d4a18.  call temp:= `getParent`(v2) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1d4a1e.  v4:= temp @kind object;
  #L1d4a20.  if v4 != 0 then goto L1d4a26;
  #L1d4a24.  return @kind void;
  #L1d4a26.  v4:= v2.`c.f.b.k.h.s0` @type ^`c.f.b.k.d` @kind object;
  #L1d4a2a.  call temp:= `getObjectVariableValue`(v3, v4) @signature `Lc/f/b/d;.getObjectVariableValue:(Ljava/lang/Object;)I` @kind virtual;
  #L1d4a30.  v3:= temp;
  #L1d4a32.  v4:= v2.`c.f.b.k.h.t0` @type ^`int`;
  #L1d4a36.  v0:= 1I;
  #L1d4a38.  v1:= 0I;
  #L1d4a3a.  if v4 != v0 then goto L1d4a68;
  #L1d4a3e.  call `setX`(v2, v3) @signature `Lc/f/b/k/e;.setX:(I)V` @kind virtual;
  #L1d4a44.  call `setY`(v2, v1) @signature `Lc/f/b/k/e;.setY:(I)V` @kind virtual;
  #L1d4a4a.  call temp:= `getParent`(v2) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1d4a50.  v3:= temp @kind object;
  #L1d4a52.  call temp:= `getHeight`(v3) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d4a58.  v3:= temp;
  #L1d4a5a.  call `setHeight`(v2, v3) @signature `Lc/f/b/k/e;.setHeight:(I)V` @kind virtual;
  #L1d4a60.  call `setWidth`(v2, v1) @signature `Lc/f/b/k/e;.setWidth:(I)V` @kind virtual;
  #L1d4a66.  goto L1d4a90;
  #L1d4a68.  call `setX`(v2, v1) @signature `Lc/f/b/k/e;.setX:(I)V` @kind virtual;
  #L1d4a6e.  call `setY`(v2, v3) @signature `Lc/f/b/k/e;.setY:(I)V` @kind virtual;
  #L1d4a74.  call temp:= `getParent`(v2) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1d4a7a.  v3:= temp @kind object;
  #L1d4a7c.  call temp:= `getWidth`(v3) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d4a82.  v3:= temp;
  #L1d4a84.  call `setWidth`(v2, v3) @signature `Lc/f/b/k/e;.setWidth:(I)V` @kind virtual;
  #L1d4a8a.  call `setHeight`(v2, v1) @signature `Lc/f/b/k/e;.setHeight:(I)V` @kind virtual;
  #L1d4a90.  return @kind void;
}
