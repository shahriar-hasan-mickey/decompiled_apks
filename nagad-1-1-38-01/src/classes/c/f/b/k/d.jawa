record `c.f.b.k.d` @kind class @AccessFlag PUBLIC {
  `java.util.HashSet` `c.f.b.k.d.a` @AccessFlag PRIVATE;
  `int` `c.f.b.k.d.b` @AccessFlag PRIVATE;
  `boolean` `c.f.b.k.d.c` @AccessFlag PRIVATE;
  `c.f.b.k.e` `c.f.b.k.d.d` @AccessFlag PUBLIC_FINAL;
  `c.f.b.k.d$b` `c.f.b.k.d.e` @AccessFlag PUBLIC_FINAL;
  `c.f.b.k.d` `c.f.b.k.d.f` @AccessFlag PUBLIC;
  `int` `c.f.b.k.d.g` @AccessFlag PUBLIC;
  `int` `c.f.b.k.d.h` @AccessFlag ;
  `c.f.b.i` `c.f.b.k.d.i` @AccessFlag ;
}
procedure `void` `<init>`(`c.f.b.k.d` v1 @kind this, `c.f.b.k.e` v2 @kind object, `c.f.b.k.d$b` v3 @kind object) @signature `Lc/f/b/k/d;.<init>:(Lc/f/b/k/e;Lc/f/b/k/d$b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1cd878.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1cd87e.  v0:= 0I;
  #L1cd880.  v1.`c.f.b.k.d.a` @type ^`java.util.HashSet` := v0 @kind object;
  #L1cd884.  v0:= 0I;
  #L1cd886.  v1.`c.f.b.k.d.g` @type ^`int` := v0;
  #L1cd88a.  v0:= -1I;
  #L1cd88c.  v1.`c.f.b.k.d.h` @type ^`int` := v0;
  #L1cd890.  v1.`c.f.b.k.d.d` @type ^`c.f.b.k.e` := v2 @kind object;
  #L1cd894.  v1.`c.f.b.k.d.e` @type ^`c.f.b.k.d$b` := v3 @kind object;
  #L1cd898.  return @kind void;
}
procedure `boolean` `connect`(`c.f.b.k.d` v2 @kind this, `c.f.b.k.d` v3 @kind object, `int` v4 ) @signature `Lc/f/b/k/d;.connect:(Lc/f/b/k/d;I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cd4e8.  v0:= -1I;
  #L1cd4ea.  v1:= 0I;
  #L1cd4ec.  call temp:= `connect`(v2, v3, v4, v0, v1) @signature `Lc/f/b/k/d;.connect:(Lc/f/b/k/d;IIZ)Z` @kind virtual;
  #L1cd4f2.  v3:= temp;
  #L1cd4f4.  return v3;
}
procedure `boolean` `connect`(`c.f.b.k.d` v2 @kind this, `c.f.b.k.d` v3 @kind object, `int` v4 , `int` v5 , `boolean` v6 ) @signature `Lc/f/b/k/d;.connect:(Lc/f/b/k/d;IIZ)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cd508.  v0:= 1I;
  #L1cd50a.  if v3 != 0 then goto L1cd516;
  #L1cd50e.  call `reset`(v2) @signature `Lc/f/b/k/d;.reset:()V` @kind virtual;
  #L1cd514.  return v0;
  #L1cd516.  v1:= 0I;
  #L1cd518.  if v6 != 0 then goto L1cd52a;
  #L1cd51c.  call temp:= `isValidConnection`(v2, v3) @signature `Lc/f/b/k/d;.isValidConnection:(Lc/f/b/k/d;)Z` @kind virtual;
  #L1cd522.  v6:= temp;
  #L1cd524.  if v6 != 0 then goto L1cd52a;
  #L1cd528.  return v1;
  #L1cd52a.  v2.`c.f.b.k.d.f` @type ^`c.f.b.k.d` := v3 @kind object;
  #L1cd52e.  v3:= v2.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1cd532.  v6:= v3.`c.f.b.k.d.a` @type ^`java.util.HashSet` @kind object;
  #L1cd536.  if v6 != 0 then goto L1cd548;
  #L1cd53a.  v6:= new `java.util.HashSet`;
  #L1cd53e.  call `<init>`(v6) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L1cd544.  v3.`c.f.b.k.d.a` @type ^`java.util.HashSet` := v6 @kind object;
  #L1cd548.  v3:= v2.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1cd54c.  v3:= v3.`c.f.b.k.d.a` @type ^`java.util.HashSet` @kind object;
  #L1cd550.  if v3 == 0 then goto L1cd55a;
  #L1cd554.  call temp:= `add`(v3, v2) @signature `Ljava/util/HashSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1cd55a.  if v4 <= 0 then goto L1cd564;
  #L1cd55e.  v2.`c.f.b.k.d.g` @type ^`int` := v4;
  #L1cd562.  goto L1cd568;
  #L1cd564.  v2.`c.f.b.k.d.g` @type ^`int` := v1;
  #L1cd568.  v2.`c.f.b.k.d.h` @type ^`int` := v5;
  #L1cd56c.  return v0;
}
procedure `void` `findDependents`(`c.f.b.k.d` v2 @kind this, `int` v3 , `java.util.ArrayList` v4 @kind object, `c.f.b.k.n.o` v5 @kind object) @signature `Lc/f/b/k/d;.findDependents:(ILjava/util/ArrayList;Lc/f/b/k/n/o;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cd8ac.  v0:= v2.`c.f.b.k.d.a` @type ^`java.util.HashSet` @kind object;
  #L1cd8b0.  if v0 == 0 then goto L1cd8e0;
  #L1cd8b4.  call temp:= `iterator`(v0) @signature `Ljava/util/HashSet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1cd8ba.  v0:= temp @kind object;
  #L1cd8bc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1cd8c2.  v1:= temp;
  #L1cd8c4.  if v1 == 0 then goto L1cd8e0;
  #L1cd8c8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1cd8ce.  v1:= temp @kind object;
  #L1cd8d0.  v1:= (`c.f.b.k.d`) v1 @kind object;
  #L1cd8d4.  v1:= v1.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1cd8d8.  call temp:= `findDependents`(v1, v3, v4, v5) @signature `Lc/f/b/k/n/i;.findDependents:(Lc/f/b/k/e;ILjava/util/ArrayList;Lc/f/b/k/n/o;)Lc/f/b/k/n/o;` @kind static;
  #L1cd8de.  goto L1cd8bc;
  #L1cd8e0.  return @kind void;
}
procedure `java.util.HashSet` `getDependents`(`c.f.b.k.d` v1 @kind this) @signature `Lc/f/b/k/d;.getDependents:()Ljava/util/HashSet;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cd860.  v0:= v1.`c.f.b.k.d.a` @type ^`java.util.HashSet` @kind object;
  #L1cd864.  return v0 @kind object;
}
procedure `int` `getFinalValue`(`c.f.b.k.d` v1 @kind this) @signature `Lc/f/b/k/d;.getFinalValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cd790.  v0:= v1.`c.f.b.k.d.c` @type ^`boolean` @kind boolean;
  #L1cd794.  if v0 != 0 then goto L1cd79c;
  #L1cd798.  v0:= 0I;
  #L1cd79a.  return v0;
  #L1cd79c.  v0:= v1.`c.f.b.k.d.b` @type ^`int`;
  #L1cd7a0.  return v0;
}
procedure `int` `getMargin`(`c.f.b.k.d` v3 @kind this) @signature `Lc/f/b/k/d;.getMargin:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1cd7b4.  v0:= v3.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1cd7b8.  call temp:= `getVisibility`(v0) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1cd7be.  v0:= temp;
  #L1cd7c0.  v1:= 8I;
  #L1cd7c4.  if v0 != v1 then goto L1cd7cc;
  #L1cd7c8.  v0:= 0I;
  #L1cd7ca.  return v0;
  #L1cd7cc.  v0:= v3.`c.f.b.k.d.h` @type ^`int`;
  #L1cd7d0.  v2:= -1I;
  #L1cd7d2.  if v0 <= v2 then goto L1cd7f4;
  #L1cd7d6.  v0:= v3.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1cd7da.  if v0 == 0 then goto L1cd7f4;
  #L1cd7de.  v0:= v0.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1cd7e2.  call temp:= `getVisibility`(v0) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1cd7e8.  v0:= temp;
  #L1cd7ea.  if v0 != v1 then goto L1cd7f4;
  #L1cd7ee.  v0:= v3.`c.f.b.k.d.h` @type ^`int`;
  #L1cd7f2.  return v0;
  #L1cd7f4.  v0:= v3.`c.f.b.k.d.g` @type ^`int`;
  #L1cd7f8.  return v0;
}
procedure `c.f.b.k.d` `getOpposite`(`c.f.b.k.d` v2 @kind this) @signature `Lc/f/b/k/d;.getOpposite:()Lc/f/b/k/d;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1cd404.  v0:= `@@c.f.b.k.d$a.a` @type ^`int`[] @kind object;
  #L1cd408.  v1:= v2.`c.f.b.k.d.e` @type ^`c.f.b.k.d$b` @kind object;
  #L1cd40c.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1cd412.  v1:= temp;
  #L1cd414.  v0:= v0[v1];
  #L1cd418.  goto L1cd464;
  #L1cd41e.  v0:= new `java.lang.AssertionError`;
  #L1cd422.  v1:= v2.`c.f.b.k.d.e` @type ^`c.f.b.k.d$b` @kind object;
  #L1cd426.  call temp:= `name`(v1) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L1cd42c.  v1:= temp @kind object;
  #L1cd42e.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1cd434.  throw v0;
  #L1cd436.  v0:= v2.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1cd43a.  v0:= v0.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1cd43e.  return v0 @kind object;
  #L1cd440.  v0:= v2.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1cd444.  v0:= v0.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1cd448.  return v0 @kind object;
  #L1cd44a.  v0:= v2.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1cd44e.  v0:= v0.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1cd452.  return v0 @kind object;
  #L1cd454.  v0:= v2.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1cd458.  v0:= v0.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1cd45c.  return v0 @kind object;
  #L1cd45e.  v0:= 0I;
  #L1cd460.  return v0 @kind object;
  #L1cd462.  
  #L1cd464.  switch v0
                  | 1 => goto L1cd45e
                  | 2 => goto L1cd454
                  | 3 => goto L1cd44a
                  | 4 => goto L1cd440
                  | 5 => goto L1cd436
                  | 6 => goto L1cd45e
                  | 7 => goto L1cd45e
                  | 8 => goto L1cd45e
                  | 9 => goto L1cd45e
                  | else => goto L1cd41e;
}
procedure `c.f.b.k.e` `getOwner`(`c.f.b.k.d` v1 @kind this) @signature `Lc/f/b/k/d;.getOwner:()Lc/f/b/k/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cd4d0.  v0:= v1.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1cd4d4.  return v0 @kind object;
}
procedure `c.f.b.i` `getSolverVariable`(`c.f.b.k.d` v1 @kind this) @signature `Lc/f/b/k/d;.getSolverVariable:()Lc/f/b/i;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cd3ec.  v0:= v1.`c.f.b.k.d.i` @type ^`c.f.b.i` @kind object;
  #L1cd3f0.  return v0 @kind object;
}
procedure `c.f.b.k.d` `getTarget`(`c.f.b.k.d` v1 @kind this) @signature `Lc/f/b/k/d;.getTarget:()Lc/f/b/k/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cd4a0.  v0:= v1.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1cd4a4.  return v0 @kind object;
}
procedure `c.f.b.k.d$b` `getType`(`c.f.b.k.d` v1 @kind this) @signature `Lc/f/b/k/d;.getType:()Lc/f/b/k/d$b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cd4b8.  v0:= v1.`c.f.b.k.d.e` @type ^`c.f.b.k.d$b` @kind object;
  #L1cd4bc.  return v0 @kind object;
}
procedure `boolean` `hasCenteredDependents`(`c.f.b.k.d` v3 @kind this) @signature `Lc/f/b/k/d;.hasCenteredDependents:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1cd580.  v0:= v3.`c.f.b.k.d.a` @type ^`java.util.HashSet` @kind object;
  #L1cd584.  v1:= 0I;
  #L1cd586.  if v0 != 0 then goto L1cd58c;
  #L1cd58a.  return v1;
  #L1cd58c.  call temp:= `iterator`(v0) @signature `Ljava/util/HashSet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1cd592.  v0:= temp @kind object;
  #L1cd594.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1cd59a.  v2:= temp;
  #L1cd59c.  if v2 == 0 then goto L1cd5c4;
  #L1cd5a0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1cd5a6.  v2:= temp @kind object;
  #L1cd5a8.  v2:= (`c.f.b.k.d`) v2 @kind object;
  #L1cd5ac.  call temp:= `getOpposite`(v2) @signature `Lc/f/b/k/d;.getOpposite:()Lc/f/b/k/d;` @kind virtual;
  #L1cd5b2.  v2:= temp @kind object;
  #L1cd5b4.  call temp:= `isConnected`(v2) @signature `Lc/f/b/k/d;.isConnected:()Z` @kind virtual;
  #L1cd5ba.  v2:= temp;
  #L1cd5bc.  if v2 == 0 then goto L1cd594;
  #L1cd5c0.  v0:= 1I;
  #L1cd5c2.  return v0;
  #L1cd5c4.  return v1;
}
procedure `boolean` `hasDependents`(`c.f.b.k.d` v2 @kind this) @signature `Lc/f/b/k/d;.hasDependents:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cd5d8.  v0:= v2.`c.f.b.k.d.a` @type ^`java.util.HashSet` @kind object;
  #L1cd5dc.  v1:= 0I;
  #L1cd5de.  if v0 != 0 then goto L1cd5e4;
  #L1cd5e2.  return v1;
  #L1cd5e4.  call temp:= `size`(v0) @signature `Ljava/util/HashSet;.size:()I` @kind virtual;
  #L1cd5ea.  v0:= temp;
  #L1cd5ec.  if v0 <= 0 then goto L1cd5f2;
  #L1cd5f0.  v1:= 1I;
  #L1cd5f2.  return v1;
}
procedure `boolean` `hasFinalValue`(`c.f.b.k.d` v1 @kind this) @signature `Lc/f/b/k/d;.hasFinalValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cd604.  v0:= v1.`c.f.b.k.d.c` @type ^`boolean` @kind boolean;
  #L1cd608.  return v0;
}
procedure `boolean` `isConnected`(`c.f.b.k.d` v1 @kind this) @signature `Lc/f/b/k/d;.isConnected:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cd61c.  v0:= v1.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1cd620.  if v0 == 0 then goto L1cd628;
  #L1cd624.  v0:= 1I;
  #L1cd626.  goto L1cd62a;
  #L1cd628.  v0:= 0I;
  #L1cd62a.  return v0;
}
procedure `boolean` `isValidConnection`(`c.f.b.k.d` v5 @kind this, `c.f.b.k.d` v6 @kind object) @signature `Lc/f/b/k/d;.isValidConnection:(Lc/f/b/k/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1cd63c.  v0:= 0I;
  #L1cd63e.  if v6 != 0 then goto L1cd644;
  #L1cd642.  return v0;
  #L1cd644.  call temp:= `getType`(v6) @signature `Lc/f/b/k/d;.getType:()Lc/f/b/k/d$b;` @kind virtual;
  #L1cd64a.  v1:= temp @kind object;
  #L1cd64c.  v2:= v5.`c.f.b.k.d.e` @type ^`c.f.b.k.d$b` @kind object;
  #L1cd650.  v3:= 1I;
  #L1cd652.  if v1 != v2 then goto L1cd68a;
  #L1cd656.  v1:= `@@c.f.b.k.d$b.k` @type ^`c.f.b.k.d$b` @kind object;
  #L1cd65a.  if v2 != v1 then goto L1cd688;
  #L1cd65e.  call temp:= `getOwner`(v6) @signature `Lc/f/b/k/d;.getOwner:()Lc/f/b/k/e;` @kind virtual;
  #L1cd664.  v6:= temp @kind object;
  #L1cd666.  call temp:= `hasBaseline`(v6) @signature `Lc/f/b/k/e;.hasBaseline:()Z` @kind virtual;
  #L1cd66c.  v6:= temp;
  #L1cd66e.  if v6 == 0 then goto L1cd686;
  #L1cd672.  call temp:= `getOwner`(v5) @signature `Lc/f/b/k/d;.getOwner:()Lc/f/b/k/e;` @kind virtual;
  #L1cd678.  v6:= temp @kind object;
  #L1cd67a.  call temp:= `hasBaseline`(v6) @signature `Lc/f/b/k/e;.hasBaseline:()Z` @kind virtual;
  #L1cd680.  v6:= temp;
  #L1cd682.  if v6 != 0 then goto L1cd688;
  #L1cd686.  return v0;
  #L1cd688.  return v3;
  #L1cd68a.  v4:= `@@c.f.b.k.d$a.a` @type ^`int`[] @kind object;
  #L1cd68e.  call temp:= `ordinal`(v2) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1cd694.  v2:= temp;
  #L1cd696.  v2:= v4[v2];
  #L1cd69a.  goto L1cd754;
  #L1cd6a0.  v6:= new `java.lang.AssertionError`;
  #L1cd6a4.  v0:= v5.`c.f.b.k.d.e` @type ^`c.f.b.k.d$b` @kind object;
  #L1cd6a8.  call temp:= `name`(v0) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L1cd6ae.  v0:= temp @kind object;
  #L1cd6b0.  call `<init>`(v6, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1cd6b6.  throw v6;
  #L1cd6b8.  return v0;
  #L1cd6ba.  v2:= `@@c.f.b.k.d$b.h` @type ^`c.f.b.k.d$b` @kind object;
  #L1cd6be.  if v1 == v2 then goto L1cd6d0;
  #L1cd6c2.  v2:= `@@c.f.b.k.d$b.j` @type ^`c.f.b.k.d$b` @kind object;
  #L1cd6c6.  if v1 != v2 then goto L1cd6cc;
  #L1cd6ca.  goto L1cd6d0;
  #L1cd6cc.  v2:= 0I;
  #L1cd6ce.  goto L1cd6d2;
  #L1cd6d0.  v2:= 1I;
  #L1cd6d2.  call temp:= `getOwner`(v6) @signature `Lc/f/b/k/d;.getOwner:()Lc/f/b/k/e;` @kind virtual;
  #L1cd6d8.  v6:= temp @kind object;
  #L1cd6da.  v6:= instanceof @variable v6 @type ^`c.f.b.k.h` @kind boolean;
  #L1cd6de.  if v6 == 0 then goto L1cd6f6;
  #L1cd6e2.  if v2 != 0 then goto L1cd6f4;
  #L1cd6e6.  v6:= `@@c.f.b.k.d$b.n` @type ^`c.f.b.k.d$b` @kind object;
  #L1cd6ea.  if v1 != v6 then goto L1cd6f0;
  #L1cd6ee.  goto L1cd6f4;
  #L1cd6f0.  v2:= 0I;
  #L1cd6f2.  goto L1cd6f6;
  #L1cd6f4.  v2:= 1I;
  #L1cd6f6.  return v2;
  #L1cd6f8.  v2:= `@@c.f.b.k.d$b.g` @type ^`c.f.b.k.d$b` @kind object;
  #L1cd6fc.  if v1 == v2 then goto L1cd70e;
  #L1cd700.  v2:= `@@c.f.b.k.d$b.i` @type ^`c.f.b.k.d$b` @kind object;
  #L1cd704.  if v1 != v2 then goto L1cd70a;
  #L1cd708.  goto L1cd70e;
  #L1cd70a.  v2:= 0I;
  #L1cd70c.  goto L1cd710;
  #L1cd70e.  v2:= 1I;
  #L1cd710.  call temp:= `getOwner`(v6) @signature `Lc/f/b/k/d;.getOwner:()Lc/f/b/k/e;` @kind virtual;
  #L1cd716.  v6:= temp @kind object;
  #L1cd718.  v6:= instanceof @variable v6 @type ^`c.f.b.k.h` @kind boolean;
  #L1cd71c.  if v6 == 0 then goto L1cd734;
  #L1cd720.  if v2 != 0 then goto L1cd732;
  #L1cd724.  v6:= `@@c.f.b.k.d$b.m` @type ^`c.f.b.k.d$b` @kind object;
  #L1cd728.  if v1 != v6 then goto L1cd72e;
  #L1cd72c.  goto L1cd732;
  #L1cd72e.  v2:= 0I;
  #L1cd730.  goto L1cd734;
  #L1cd732.  v2:= 1I;
  #L1cd734.  return v2;
  #L1cd736.  v6:= `@@c.f.b.k.d$b.k` @type ^`c.f.b.k.d$b` @kind object;
  #L1cd73a.  if v1 == v6 then goto L1cd750;
  #L1cd73e.  v6:= `@@c.f.b.k.d$b.m` @type ^`c.f.b.k.d$b` @kind object;
  #L1cd742.  if v1 == v6 then goto L1cd750;
  #L1cd746.  v6:= `@@c.f.b.k.d$b.n` @type ^`c.f.b.k.d$b` @kind object;
  #L1cd74a.  if v1 == v6 then goto L1cd750;
  #L1cd74e.  v0:= 1I;
  #L1cd750.  return v0;
  #L1cd752.  
  #L1cd754.  switch v2
                  | 1 => goto L1cd736
                  | 2 => goto L1cd6f8
                  | 3 => goto L1cd6f8
                  | 4 => goto L1cd6ba
                  | 5 => goto L1cd6ba
                  | 6 => goto L1cd6b8
                  | 7 => goto L1cd6b8
                  | 8 => goto L1cd6b8
                  | 9 => goto L1cd6b8
                  | else => goto L1cd6a0;
}
procedure `void` `reset`(`c.f.b.k.d` v2 @kind this) @signature `Lc/f/b/k/d;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cd8f4.  v0:= v2.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1cd8f8.  v1:= 0I;
  #L1cd8fa.  if v0 == 0 then goto L1cd928;
  #L1cd8fe.  v0:= v0.`c.f.b.k.d.a` @type ^`java.util.HashSet` @kind object;
  #L1cd902.  if v0 == 0 then goto L1cd928;
  #L1cd906.  call temp:= `remove`(v0, v2) @signature `Ljava/util/HashSet;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L1cd90c.  v0:= v2.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1cd910.  v0:= v0.`c.f.b.k.d.a` @type ^`java.util.HashSet` @kind object;
  #L1cd914.  call temp:= `size`(v0) @signature `Ljava/util/HashSet;.size:()I` @kind virtual;
  #L1cd91a.  v0:= temp;
  #L1cd91c.  if v0 != 0 then goto L1cd928;
  #L1cd920.  v0:= v2.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1cd924.  v0.`c.f.b.k.d.a` @type ^`java.util.HashSet` := v1 @kind object;
  #L1cd928.  v2.`c.f.b.k.d.a` @type ^`java.util.HashSet` := v1 @kind object;
  #L1cd92c.  v2.`c.f.b.k.d.f` @type ^`c.f.b.k.d` := v1 @kind object;
  #L1cd930.  v0:= 0I;
  #L1cd932.  v2.`c.f.b.k.d.g` @type ^`int` := v0;
  #L1cd936.  v1:= -1I;
  #L1cd938.  v2.`c.f.b.k.d.h` @type ^`int` := v1;
  #L1cd93c.  v2.`c.f.b.k.d.c` @type ^`boolean` := v0 @kind boolean;
  #L1cd940.  v2.`c.f.b.k.d.b` @type ^`int` := v0;
  #L1cd944.  return @kind void;
}
procedure `void` `resetFinalResolution`(`c.f.b.k.d` v1 @kind this) @signature `Lc/f/b/k/d;.resetFinalResolution:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cd958.  v0:= 0I;
  #L1cd95a.  v1.`c.f.b.k.d.c` @type ^`boolean` := v0 @kind boolean;
  #L1cd95e.  v1.`c.f.b.k.d.b` @type ^`int` := v0;
  #L1cd962.  return @kind void;
}
procedure `void` `resetSolverVariable`(`c.f.b.k.d` v2 @kind this, `c.f.b.c` v3 @kind object) @signature `Lc/f/b/k/d;.resetSolverVariable:(Lc/f/b/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cd974.  v3:= v2.`c.f.b.k.d.i` @type ^`c.f.b.i` @kind object;
  #L1cd978.  if v3 != 0 then goto L1cd992;
  #L1cd97c.  v3:= new `c.f.b.i`;
  #L1cd980.  v0:= `@@c.f.b.i$a.f` @type ^`c.f.b.i$a` @kind object;
  #L1cd984.  v1:= 0I;
  #L1cd986.  call `<init>`(v3, v0, v1) @signature `Lc/f/b/i;.<init>:(Lc/f/b/i$a;Ljava/lang/String;)V` @kind direct;
  #L1cd98c.  v2.`c.f.b.k.d.i` @type ^`c.f.b.i` := v3 @kind object;
  #L1cd990.  goto L1cd998;
  #L1cd992.  call `reset`(v3) @signature `Lc/f/b/i;.reset:()V` @kind virtual;
  #L1cd998.  return @kind void;
}
procedure `void` `setFinalValue`(`c.f.b.k.d` v0 @kind this, `int` v1 ) @signature `Lc/f/b/k/d;.setFinalValue:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1cd9ac.  v0.`c.f.b.k.d.b` @type ^`int` := v1;
  #L1cd9b0.  v1:= 1I;
  #L1cd9b2.  v0.`c.f.b.k.d.c` @type ^`boolean` := v1 @kind boolean;
  #L1cd9b6.  return @kind void;
}
procedure `void` `setGoneMargin`(`c.f.b.k.d` v1 @kind this, `int` v2 ) @signature `Lc/f/b/k/d;.setGoneMargin:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cd9c8.  call temp:= `isConnected`(v1) @signature `Lc/f/b/k/d;.isConnected:()Z` @kind virtual;
  #L1cd9ce.  v0:= temp;
  #L1cd9d0.  if v0 == 0 then goto L1cd9d8;
  #L1cd9d4.  v1.`c.f.b.k.d.h` @type ^`int` := v2;
  #L1cd9d8.  return @kind void;
}
procedure `java.lang.String` `toString`(`c.f.b.k.d` v2 @kind this) @signature `Lc/f/b/k/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cd80c.  v0:= new `java.lang.StringBuilder`;
  #L1cd810.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cd816.  v1:= v2.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1cd81a.  call temp:= `getDebugName`(v1) @signature `Lc/f/b/k/e;.getDebugName:()Ljava/lang/String;` @kind virtual;
  #L1cd820.  v1:= temp @kind object;
  #L1cd822.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd828.  v1:= ":" @kind object;
  #L1cd82c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd832.  v1:= v2.`c.f.b.k.d.e` @type ^`c.f.b.k.d$b` @kind object;
  #L1cd836.  call temp:= `toString`(v1) @signature `Ljava/lang/Enum;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cd83c.  v1:= temp @kind object;
  #L1cd83e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd844.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cd84a.  v0:= temp @kind object;
  #L1cd84c.  return v0 @kind object;
}
