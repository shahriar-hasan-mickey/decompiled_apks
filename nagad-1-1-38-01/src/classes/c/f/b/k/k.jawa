record `c.f.b.k.k` @kind class @AccessFlag PUBLIC {
}
global `boolean`[] `@@c.f.b.k.k.a` @AccessFlag STATIC;
procedure `void` `<clinit>`() @signature `Lc/f/b/k/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d4c18.  v0:= 3I;
  #L1d4c1a.  v0:= new `boolean`[v0];
  #L1d4c1e.  `@@c.f.b.k.k.a` @type ^`boolean`[] := v0 @kind object;
  #L1d4c22.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.f` v5 @kind object, `c.f.b.d` v6 @kind object, `c.f.b.k.e` v7 @kind object) @signature `Lc/f/b/k/k;.a:(Lc/f/b/k/f;Lc/f/b/d;Lc/f/b/k/e;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d4c34.  v0:= -1I;
  #L1d4c36.  v7.`c.f.b.k.e.l` @type ^`int` := v0;
  #L1d4c3a.  v7.`c.f.b.k.e.m` @type ^`int` := v0;
  #L1d4c3e.  v0:= v5.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1d4c42.  v1:= 0I;
  #L1d4c44.  v0:= v0[v1] @kind object;
  #L1d4c48.  v2:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1d4c4c.  v3:= 2I;
  #L1d4c4e.  if v0 == v2 then goto L1d4cc2;
  #L1d4c52.  v0:= v7.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1d4c56.  v0:= v0[v1] @kind object;
  #L1d4c5a.  v1:= `@@c.f.b.k.e$b.i` @type ^`c.f.b.k.e$b` @kind object;
  #L1d4c5e.  if v0 != v1 then goto L1d4cc2;
  #L1d4c62.  v0:= v7.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d4c66.  v0:= v0.`c.f.b.k.d.g` @type ^`int`;
  #L1d4c6a.  call temp:= `getWidth`(v5) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d4c70.  v1:= temp;
  #L1d4c72.  v2:= v7.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d4c76.  v2:= v2.`c.f.b.k.d.g` @type ^`int`;
  #L1d4c7a.  v1:= v1 - v2 @kind int;
  #L1d4c7c.  v2:= v7.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d4c80.  call temp:= `createObjectVariable`(v6, v2) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1d4c86.  v4:= temp @kind object;
  #L1d4c88.  v2.`c.f.b.k.d.i` @type ^`c.f.b.i` := v4 @kind object;
  #L1d4c8c.  v2:= v7.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d4c90.  call temp:= `createObjectVariable`(v6, v2) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1d4c96.  v4:= temp @kind object;
  #L1d4c98.  v2.`c.f.b.k.d.i` @type ^`c.f.b.i` := v4 @kind object;
  #L1d4c9c.  v2:= v7.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d4ca0.  v2:= v2.`c.f.b.k.d.i` @type ^`c.f.b.i` @kind object;
  #L1d4ca4.  call `addEquality`(v6, v2, v0) @signature `Lc/f/b/d;.addEquality:(Lc/f/b/i;I)V` @kind virtual;
  #L1d4caa.  v2:= v7.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d4cae.  v2:= v2.`c.f.b.k.d.i` @type ^`c.f.b.i` @kind object;
  #L1d4cb2.  call `addEquality`(v6, v2, v1) @signature `Lc/f/b/d;.addEquality:(Lc/f/b/i;I)V` @kind virtual;
  #L1d4cb8.  v7.`c.f.b.k.e.l` @type ^`int` := v3;
  #L1d4cbc.  call `setHorizontalDimension`(v7, v0, v1) @signature `Lc/f/b/k/e;.setHorizontalDimension:(II)V` @kind virtual;
  #L1d4cc2.  v0:= v5.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1d4cc6.  v1:= 1I;
  #L1d4cc8.  v0:= v0[v1] @kind object;
  #L1d4ccc.  v2:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1d4cd0.  if v0 == v2 then goto L1d4d80;
  #L1d4cd4.  v0:= v7.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1d4cd8.  v0:= v0[v1] @kind object;
  #L1d4cdc.  v1:= `@@c.f.b.k.e$b.i` @type ^`c.f.b.k.e$b` @kind object;
  #L1d4ce0.  if v0 != v1 then goto L1d4d80;
  #L1d4ce4.  v0:= v7.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d4ce8.  v0:= v0.`c.f.b.k.d.g` @type ^`int`;
  #L1d4cec.  call temp:= `getHeight`(v5) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d4cf2.  v5:= temp;
  #L1d4cf4.  v1:= v7.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d4cf8.  v1:= v1.`c.f.b.k.d.g` @type ^`int`;
  #L1d4cfc.  v5:= v5 - v1 @kind int;
  #L1d4cfe.  v1:= v7.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d4d02.  call temp:= `createObjectVariable`(v6, v1) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1d4d08.  v2:= temp @kind object;
  #L1d4d0a.  v1.`c.f.b.k.d.i` @type ^`c.f.b.i` := v2 @kind object;
  #L1d4d0e.  v1:= v7.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d4d12.  call temp:= `createObjectVariable`(v6, v1) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1d4d18.  v2:= temp @kind object;
  #L1d4d1a.  v1.`c.f.b.k.d.i` @type ^`c.f.b.i` := v2 @kind object;
  #L1d4d1e.  v1:= v7.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d4d22.  v1:= v1.`c.f.b.k.d.i` @type ^`c.f.b.i` @kind object;
  #L1d4d26.  call `addEquality`(v6, v1, v0) @signature `Lc/f/b/d;.addEquality:(Lc/f/b/i;I)V` @kind virtual;
  #L1d4d2c.  v1:= v7.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d4d30.  v1:= v1.`c.f.b.k.d.i` @type ^`c.f.b.i` @kind object;
  #L1d4d34.  call `addEquality`(v6, v1, v5) @signature `Lc/f/b/d;.addEquality:(Lc/f/b/i;I)V` @kind virtual;
  #L1d4d3a.  v1:= v7.`c.f.b.k.e.Y` @type ^`int`;
  #L1d4d3e.  if v1 > 0 then goto L1d4d52;
  #L1d4d42.  call temp:= `getVisibility`(v7) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d4d48.  v1:= temp;
  #L1d4d4a.  v2:= 8I;
  #L1d4d4e.  if v1 != v2 then goto L1d4d76;
  #L1d4d52.  v1:= v7.`c.f.b.k.e.J` @type ^`c.f.b.k.d` @kind object;
  #L1d4d56.  call temp:= `createObjectVariable`(v6, v1) @signature `Lc/f/b/d;.createObjectVariable:(Ljava/lang/Object;)Lc/f/b/i;` @kind virtual;
  #L1d4d5c.  v2:= temp @kind object;
  #L1d4d5e.  v1.`c.f.b.k.d.i` @type ^`c.f.b.i` := v2 @kind object;
  #L1d4d62.  v1:= v7.`c.f.b.k.e.J` @type ^`c.f.b.k.d` @kind object;
  #L1d4d66.  v1:= v1.`c.f.b.k.d.i` @type ^`c.f.b.i` @kind object;
  #L1d4d6a.  v2:= v7.`c.f.b.k.e.Y` @type ^`int`;
  #L1d4d6e.  v2:= v2 + v0 @kind int;
  #L1d4d70.  call `addEquality`(v6, v1, v2) @signature `Lc/f/b/d;.addEquality:(Lc/f/b/i;I)V` @kind virtual;
  #L1d4d76.  v7.`c.f.b.k.e.m` @type ^`int` := v3;
  #L1d4d7a.  call `setVerticalDimension`(v7, v0, v5) @signature `Lc/f/b/k/e;.setVerticalDimension:(II)V` @kind virtual;
  #L1d4d80.  return @kind void;
}
procedure `boolean` `enabled`(`int` v0 , `int` v1 ) @signature `Lc/f/b/k/k;.enabled:(II)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L1d4bf8.  v0:= v0 ^& v1 @kind int;
  #L1d4bfa.  if v0 != v1 then goto L1d4c02;
  #L1d4bfe.  v0:= 1I;
  #L1d4c00.  goto L1d4c04;
  #L1d4c02.  v0:= 0I;
  #L1d4c04.  return v0;
}
