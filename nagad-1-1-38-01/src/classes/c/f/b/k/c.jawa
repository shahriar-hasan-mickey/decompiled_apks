record `c.f.b.k.c` @kind class @AccessFlag PUBLIC {
  `c.f.b.k.e` `c.f.b.k.c.a` @AccessFlag PROTECTED;
  `c.f.b.k.e` `c.f.b.k.c.b` @AccessFlag PROTECTED;
  `c.f.b.k.e` `c.f.b.k.c.c` @AccessFlag PROTECTED;
  `c.f.b.k.e` `c.f.b.k.c.d` @AccessFlag PROTECTED;
  `c.f.b.k.e` `c.f.b.k.c.e` @AccessFlag PROTECTED;
  `c.f.b.k.e` `c.f.b.k.c.f` @AccessFlag PROTECTED;
  `c.f.b.k.e` `c.f.b.k.c.g` @AccessFlag PROTECTED;
  `java.util.ArrayList` `c.f.b.k.c.h` @AccessFlag PROTECTED;
  `int` `c.f.b.k.c.i` @AccessFlag PROTECTED;
  `int` `c.f.b.k.c.j` @AccessFlag PROTECTED;
  `float` `c.f.b.k.c.k` @AccessFlag PROTECTED;
  `int` `c.f.b.k.c.l` @AccessFlag ;
  `int` `c.f.b.k.c.m` @AccessFlag ;
  `int` `c.f.b.k.c.n` @AccessFlag ;
  `int` `c.f.b.k.c.o` @AccessFlag PRIVATE;
  `boolean` `c.f.b.k.c.p` @AccessFlag PRIVATE;
  `boolean` `c.f.b.k.c.q` @AccessFlag PROTECTED;
  `boolean` `c.f.b.k.c.r` @AccessFlag PROTECTED;
  `boolean` `c.f.b.k.c.s` @AccessFlag PROTECTED;
  `boolean` `c.f.b.k.c.t` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.f.b.k.c` v1 @kind this, `c.f.b.k.e` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lc/f/b/k/c;.<init>:(Lc/f/b/k/e;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1cc2d0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1cc2d6.  v0:= 0I;
  #L1cc2d8.  v1.`c.f.b.k.c.k` @type ^`float` := v0;
  #L1cc2dc.  v0:= 0I;
  #L1cc2de.  v1.`c.f.b.k.c.p` @type ^`boolean` := v0 @kind boolean;
  #L1cc2e2.  v1.`c.f.b.k.c.a` @type ^`c.f.b.k.e` := v2 @kind object;
  #L1cc2e6.  v1.`c.f.b.k.c.o` @type ^`int` := v3;
  #L1cc2ea.  v1.`c.f.b.k.c.p` @type ^`boolean` := v4 @kind boolean;
  #L1cc2ee.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.c` v13 @kind this) @signature `Lc/f/b/k/c;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L1cc328.  v0:= v13.`c.f.b.k.c.o` @type ^`int`;
  #L1cc32c.  v1:= 2I;
  #L1cc32e.  v0:= v0 * 2;
  #L1cc332.  v2:= v13.`c.f.b.k.c.a` @type ^`c.f.b.k.e` @kind object;
  #L1cc336.  v3:= 0I;
  #L1cc338.  v4:= v2 @kind object;
  #L1cc33a.  v5:= v4 @kind object;
  #L1cc33c.  v2:= 0I;
  #L1cc33e.  v6:= 1I;
  #L1cc340.  if v2 != 0 then goto L1cc586;
  #L1cc344.  v7:= v13.`c.f.b.k.c.i` @type ^`int`;
  #L1cc348.  v7:= v7 + v6 @kind int;
  #L1cc34a.  v13.`c.f.b.k.c.i` @type ^`int` := v7;
  #L1cc34e.  v7:= v4.`c.f.b.k.e.l0` @type ^`c.f.b.k.e`[] @kind object;
  #L1cc352.  v8:= v13.`c.f.b.k.c.o` @type ^`int`;
  #L1cc356.  v9:= 0I;
  #L1cc358.  v7[v8]:= v9 @kind object;
  #L1cc35c.  v7:= v4.`c.f.b.k.e.k0` @type ^`c.f.b.k.e`[] @kind object;
  #L1cc360.  v7[v8]:= v9 @kind object;
  #L1cc364.  call temp:= `getVisibility`(v4) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1cc36a.  v7:= temp;
  #L1cc36c.  v8:= 8I;
  #L1cc370.  if v7 == v8 then goto L1cc528;
  #L1cc374.  v7:= v13.`c.f.b.k.c.l` @type ^`int`;
  #L1cc378.  v7:= v7 + v6 @kind int;
  #L1cc37a.  v13.`c.f.b.k.c.l` @type ^`int` := v7;
  #L1cc37e.  v7:= v13.`c.f.b.k.c.o` @type ^`int`;
  #L1cc382.  call temp:= `getDimensionBehaviour`(v4, v7) @signature `Lc/f/b/k/e;.getDimensionBehaviour:(I)Lc/f/b/k/e$b;` @kind virtual;
  #L1cc388.  v7:= temp @kind object;
  #L1cc38a.  v8:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1cc38e.  if v7 == v8 then goto L1cc3a8;
  #L1cc392.  v7:= v13.`c.f.b.k.c.m` @type ^`int`;
  #L1cc396.  v8:= v13.`c.f.b.k.c.o` @type ^`int`;
  #L1cc39a.  call temp:= `getLength`(v4, v8) @signature `Lc/f/b/k/e;.getLength:(I)I` @kind virtual;
  #L1cc3a0.  v8:= temp;
  #L1cc3a2.  v7:= v7 + v8 @kind int;
  #L1cc3a4.  v13.`c.f.b.k.c.m` @type ^`int` := v7;
  #L1cc3a8.  v7:= v13.`c.f.b.k.c.m` @type ^`int`;
  #L1cc3ac.  v8:= v4.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1cc3b0.  v8:= v8[v0] @kind object;
  #L1cc3b4.  call temp:= `getMargin`(v8) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1cc3ba.  v8:= temp;
  #L1cc3bc.  v7:= v7 + v8 @kind int;
  #L1cc3be.  v13.`c.f.b.k.c.m` @type ^`int` := v7;
  #L1cc3c2.  v7:= v13.`c.f.b.k.c.m` @type ^`int`;
  #L1cc3c6.  v8:= v4.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1cc3ca.  v10:= v0 + 1;
  #L1cc3ce.  v8:= v8[v10] @kind object;
  #L1cc3d2.  call temp:= `getMargin`(v8) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1cc3d8.  v8:= temp;
  #L1cc3da.  v7:= v7 + v8 @kind int;
  #L1cc3dc.  v13.`c.f.b.k.c.m` @type ^`int` := v7;
  #L1cc3e0.  v7:= v13.`c.f.b.k.c.n` @type ^`int`;
  #L1cc3e4.  v8:= v4.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1cc3e8.  v8:= v8[v0] @kind object;
  #L1cc3ec.  call temp:= `getMargin`(v8) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1cc3f2.  v8:= temp;
  #L1cc3f4.  v7:= v7 + v8 @kind int;
  #L1cc3f6.  v13.`c.f.b.k.c.n` @type ^`int` := v7;
  #L1cc3fa.  v7:= v13.`c.f.b.k.c.n` @type ^`int`;
  #L1cc3fe.  v8:= v4.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1cc402.  v8:= v8[v10] @kind object;
  #L1cc406.  call temp:= `getMargin`(v8) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1cc40c.  v8:= temp;
  #L1cc40e.  v7:= v7 + v8 @kind int;
  #L1cc410.  v13.`c.f.b.k.c.n` @type ^`int` := v7;
  #L1cc414.  v7:= v13.`c.f.b.k.c.b` @type ^`c.f.b.k.e` @kind object;
  #L1cc418.  if v7 != 0 then goto L1cc420;
  #L1cc41c.  v13.`c.f.b.k.c.b` @type ^`c.f.b.k.e` := v4 @kind object;
  #L1cc420.  v13.`c.f.b.k.c.d` @type ^`c.f.b.k.e` := v4 @kind object;
  #L1cc424.  v7:= v4.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1cc428.  v8:= v13.`c.f.b.k.c.o` @type ^`int`;
  #L1cc42c.  v7:= v7[v8] @kind object;
  #L1cc430.  v10:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1cc434.  if v7 != v10 then goto L1cc528;
  #L1cc438.  v7:= v4.`c.f.b.k.e.p` @type ^`int`[] @kind object;
  #L1cc43c.  v10:= v7[v8];
  #L1cc440.  v11:= 0I;
  #L1cc442.  if v10 == 0 then goto L1cc458;
  #L1cc446.  v10:= v7[v8];
  #L1cc44a.  v12:= 3I;
  #L1cc44c.  if v10 == v12 then goto L1cc458;
  #L1cc450.  v7:= v7[v8];
  #L1cc454.  if v7 != v1 then goto L1cc4ea;
  #L1cc458.  v7:= v13.`c.f.b.k.c.j` @type ^`int`;
  #L1cc45c.  v7:= v7 + v6 @kind int;
  #L1cc45e.  v13.`c.f.b.k.c.j` @type ^`int` := v7;
  #L1cc462.  v7:= v4.`c.f.b.k.e.j0` @type ^`float`[] @kind object;
  #L1cc466.  v8:= v13.`c.f.b.k.c.o` @type ^`int`;
  #L1cc46a.  v10:= v7[v8];
  #L1cc46e.  v12:= fcmpl(v10, v11);
  #L1cc472.  if v12 <= 0 then goto L1cc484;
  #L1cc476.  v12:= v13.`c.f.b.k.c.k` @type ^`float`;
  #L1cc47a.  v7:= v7[v8];
  #L1cc47e.  v12:= v12 + v7 @kind float;
  #L1cc480.  v13.`c.f.b.k.c.k` @type ^`float` := v12;
  #L1cc484.  v7:= v13.`c.f.b.k.c.o` @type ^`int`;
  #L1cc488.  call temp:= `a`(v4, v7) @signature `Lc/f/b/k/c;.a:(Lc/f/b/k/e;I)Z` @kind static;
  #L1cc48e.  v7:= temp;
  #L1cc490.  if v7 == 0 then goto L1cc4c6;
  #L1cc494.  v7:= fcmpg(v10, v11);
  #L1cc498.  if v7 >= 0 then goto L1cc4a2;
  #L1cc49c.  v13.`c.f.b.k.c.q` @type ^`boolean` := v6 @kind boolean;
  #L1cc4a0.  goto L1cc4a6;
  #L1cc4a2.  v13.`c.f.b.k.c.r` @type ^`boolean` := v6 @kind boolean;
  #L1cc4a6.  v7:= v13.`c.f.b.k.c.h` @type ^`java.util.ArrayList` @kind object;
  #L1cc4aa.  if v7 != 0 then goto L1cc4bc;
  #L1cc4ae.  v7:= new `java.util.ArrayList`;
  #L1cc4b2.  call `<init>`(v7) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1cc4b8.  v13.`c.f.b.k.c.h` @type ^`java.util.ArrayList` := v7 @kind object;
  #L1cc4bc.  v7:= v13.`c.f.b.k.c.h` @type ^`java.util.ArrayList` @kind object;
  #L1cc4c0.  call temp:= `add`(v7, v4) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1cc4c6.  v7:= v13.`c.f.b.k.c.f` @type ^`c.f.b.k.e` @kind object;
  #L1cc4ca.  if v7 != 0 then goto L1cc4d2;
  #L1cc4ce.  v13.`c.f.b.k.c.f` @type ^`c.f.b.k.e` := v4 @kind object;
  #L1cc4d2.  v7:= v13.`c.f.b.k.c.g` @type ^`c.f.b.k.e` @kind object;
  #L1cc4d6.  if v7 == 0 then goto L1cc4e6;
  #L1cc4da.  v7:= v7.`c.f.b.k.e.k0` @type ^`c.f.b.k.e`[] @kind object;
  #L1cc4de.  v8:= v13.`c.f.b.k.c.o` @type ^`int`;
  #L1cc4e2.  v7[v8]:= v4 @kind object;
  #L1cc4e6.  v13.`c.f.b.k.c.g` @type ^`c.f.b.k.e` := v4 @kind object;
  #L1cc4ea.  v7:= v13.`c.f.b.k.c.o` @type ^`int`;
  #L1cc4ee.  if v7 != 0 then goto L1cc50a;
  #L1cc4f2.  v7:= v4.`c.f.b.k.e.n` @type ^`int`;
  #L1cc4f6.  if v7 == 0 then goto L1cc4fc;
  #L1cc4fa.  goto L1cc520;
  #L1cc4fc.  v7:= v4.`c.f.b.k.e.q` @type ^`int`;
  #L1cc500.  if v7 != 0 then goto L1cc520;
  #L1cc504.  v7:= v4.`c.f.b.k.e.r` @type ^`int`;
  #L1cc508.  goto L1cc520;
  #L1cc50a.  v7:= v4.`c.f.b.k.e.o` @type ^`int`;
  #L1cc50e.  if v7 == 0 then goto L1cc514;
  #L1cc512.  goto L1cc520;
  #L1cc514.  v7:= v4.`c.f.b.k.e.t` @type ^`int`;
  #L1cc518.  if v7 != 0 then goto L1cc520;
  #L1cc51c.  v7:= v4.`c.f.b.k.e.u` @type ^`int`;
  #L1cc520.  v7:= v4.`c.f.b.k.e.U` @type ^`float`;
  #L1cc524.  v7:= fcmpl(v7, v11);
  #L1cc528.  if v5 == v4 then goto L1cc538;
  #L1cc52c.  v5:= v5.`c.f.b.k.e.l0` @type ^`c.f.b.k.e`[] @kind object;
  #L1cc530.  v7:= v13.`c.f.b.k.c.o` @type ^`int`;
  #L1cc534.  v5[v7]:= v4 @kind object;
  #L1cc538.  v5:= v4.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1cc53c.  v7:= v0 + 1;
  #L1cc540.  v5:= v5[v7] @kind object;
  #L1cc544.  v5:= v5.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1cc548.  if v5 == 0 then goto L1cc574;
  #L1cc54c.  v5:= v5.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1cc550.  v7:= v5.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1cc554.  v8:= v7[v0] @kind object;
  #L1cc558.  v8:= v8.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1cc55c.  if v8 == 0 then goto L1cc574;
  #L1cc560.  v7:= v7[v0] @kind object;
  #L1cc564.  v7:= v7.`c.f.b.k.d.f` @type ^`c.f.b.k.d` @kind object;
  #L1cc568.  v7:= v7.`c.f.b.k.d.d` @type ^`c.f.b.k.e` @kind object;
  #L1cc56c.  if v7 == v4 then goto L1cc572;
  #L1cc570.  goto L1cc574;
  #L1cc572.  v9:= v5 @kind object;
  #L1cc574.  if v9 == 0 then goto L1cc57a;
  #L1cc578.  goto L1cc57e;
  #L1cc57a.  v9:= v4 @kind object;
  #L1cc57c.  v2:= 1I;
  #L1cc57e.  v5:= v4 @kind object;
  #L1cc580.  v4:= v9 @kind object;
  #L1cc582.  goto L1cc33e;
  #L1cc586.  v1:= v13.`c.f.b.k.c.b` @type ^`c.f.b.k.e` @kind object;
  #L1cc58a.  if v1 == 0 then goto L1cc5a8;
  #L1cc58e.  v2:= v13.`c.f.b.k.c.m` @type ^`int`;
  #L1cc592.  v1:= v1.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1cc596.  v1:= v1[v0] @kind object;
  #L1cc59a.  call temp:= `getMargin`(v1) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1cc5a0.  v1:= temp;
  #L1cc5a2.  v2:= v2 - v1 @kind int;
  #L1cc5a4.  v13.`c.f.b.k.c.m` @type ^`int` := v2;
  #L1cc5a8.  v1:= v13.`c.f.b.k.c.d` @type ^`c.f.b.k.e` @kind object;
  #L1cc5ac.  if v1 == 0 then goto L1cc5cc;
  #L1cc5b0.  v2:= v13.`c.f.b.k.c.m` @type ^`int`;
  #L1cc5b4.  v1:= v1.`c.f.b.k.e.N` @type ^`c.f.b.k.d`[] @kind object;
  #L1cc5b8.  v0:= v0 + v6 @kind int;
  #L1cc5ba.  v0:= v1[v0] @kind object;
  #L1cc5be.  call temp:= `getMargin`(v0) @signature `Lc/f/b/k/d;.getMargin:()I` @kind virtual;
  #L1cc5c4.  v0:= temp;
  #L1cc5c6.  v2:= v2 - v0 @kind int;
  #L1cc5c8.  v13.`c.f.b.k.c.m` @type ^`int` := v2;
  #L1cc5cc.  v13.`c.f.b.k.c.c` @type ^`c.f.b.k.e` := v4 @kind object;
  #L1cc5d0.  v0:= v13.`c.f.b.k.c.o` @type ^`int`;
  #L1cc5d4.  if v0 != 0 then goto L1cc5ea;
  #L1cc5d8.  v0:= v13.`c.f.b.k.c.p` @type ^`boolean` @kind boolean;
  #L1cc5dc.  if v0 == 0 then goto L1cc5ea;
  #L1cc5e0.  v0:= v13.`c.f.b.k.c.c` @type ^`c.f.b.k.e` @kind object;
  #L1cc5e4.  v13.`c.f.b.k.c.e` @type ^`c.f.b.k.e` := v0 @kind object;
  #L1cc5e8.  goto L1cc5f2;
  #L1cc5ea.  v0:= v13.`c.f.b.k.c.a` @type ^`c.f.b.k.e` @kind object;
  #L1cc5ee.  v13.`c.f.b.k.c.e` @type ^`c.f.b.k.e` := v0 @kind object;
  #L1cc5f2.  v0:= v13.`c.f.b.k.c.r` @type ^`boolean` @kind boolean;
  #L1cc5f6.  if v0 == 0 then goto L1cc604;
  #L1cc5fa.  v0:= v13.`c.f.b.k.c.q` @type ^`boolean` @kind boolean;
  #L1cc5fe.  if v0 == 0 then goto L1cc604;
  #L1cc602.  v3:= 1I;
  #L1cc604.  v13.`c.f.b.k.c.s` @type ^`boolean` := v3 @kind boolean;
  #L1cc608.  return @kind void;
}
procedure `boolean` `a`(`c.f.b.k.e` v2 @kind object, `int` v3 ) @signature `Lc/f/b/k/c;.a:(Lc/f/b/k/e;I)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1cc280.  call temp:= `getVisibility`(v2) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1cc286.  v0:= temp;
  #L1cc288.  v1:= 8I;
  #L1cc28c.  if v0 == v1 then goto L1cc2ba;
  #L1cc290.  v0:= v2.`c.f.b.k.e.Q` @type ^`c.f.b.k.e$b`[] @kind object;
  #L1cc294.  v0:= v0[v3] @kind object;
  #L1cc298.  v1:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1cc29c.  if v0 != v1 then goto L1cc2ba;
  #L1cc2a0.  v2:= v2.`c.f.b.k.e.p` @type ^`int`[] @kind object;
  #L1cc2a4.  v0:= v2[v3];
  #L1cc2a8.  if v0 == 0 then goto L1cc2b6;
  #L1cc2ac.  v2:= v2[v3];
  #L1cc2b0.  v3:= 3I;
  #L1cc2b2.  if v2 != v3 then goto L1cc2ba;
  #L1cc2b6.  v2:= 1I;
  #L1cc2b8.  goto L1cc2bc;
  #L1cc2ba.  v2:= 0I;
  #L1cc2bc.  return v2;
}
procedure `void` `define`(`c.f.b.k.c` v1 @kind this) @signature `Lc/f/b/k/c;.define:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cc300.  v0:= v1.`c.f.b.k.c.t` @type ^`boolean` @kind boolean;
  #L1cc304.  if v0 != 0 then goto L1cc30e;
  #L1cc308.  call `a`(v1) @signature `Lc/f/b/k/c;.a:()V` @kind direct;
  #L1cc30e.  v0:= 1I;
  #L1cc310.  v1.`c.f.b.k.c.t` @type ^`boolean` := v0 @kind boolean;
  #L1cc314.  return @kind void;
}
