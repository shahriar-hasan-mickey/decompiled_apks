record `c.f.b.k.m` @kind class @AccessFlag PUBLIC extends `c.f.b.k.e` @kind class {
  `java.util.ArrayList` `c.f.b.k.m.p0` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`c.f.b.k.m` v1 @kind this) @signature `Lc/f/b/k/m;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d51e4.  call `<init>`(v1) @signature `Lc/f/b/k/e;.<init>:()V` @kind direct;
  #L1d51ea.  v0:= new `java.util.ArrayList`;
  #L1d51ee.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1d51f4.  v1.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` := v0 @kind object;
  #L1d51f8.  return @kind void;
}
procedure `void` `add`(`c.f.b.k.m` v1 @kind this, `c.f.b.k.e` v2 @kind object) @signature `Lc/f/b/k/m;.add:(Lc/f/b/k/e;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d520c.  v0:= v1.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1d5210.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d5216.  call temp:= `getParent`(v2) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1d521c.  v0:= temp @kind object;
  #L1d521e.  if v0 == 0 then goto L1d5234;
  #L1d5222.  call temp:= `getParent`(v2) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1d5228.  v0:= temp @kind object;
  #L1d522a.  v0:= (`c.f.b.k.m`) v0 @kind object;
  #L1d522e.  call `remove`(v0, v2) @signature `Lc/f/b/k/m;.remove:(Lc/f/b/k/e;)V` @kind virtual;
  #L1d5234.  call `setParent`(v2, v1) @signature `Lc/f/b/k/e;.setParent:(Lc/f/b/k/e;)V` @kind virtual;
  #L1d523a.  return @kind void;
}
procedure `java.util.ArrayList` `getChildren`(`c.f.b.k.m` v1 @kind this) @signature `Lc/f/b/k/m;.getChildren:()Ljava/util/ArrayList;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d51cc.  v0:= v1.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1d51d0.  return v0 @kind object;
}
procedure `void` `layout`(`c.f.b.k.m` v4 @kind this) @signature `Lc/f/b/k/m;.layout:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d524c.  v0:= v4.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1d5250.  if v0 != 0 then goto L1d5256;
  #L1d5254.  return @kind void;
  #L1d5256.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1d525c.  v0:= temp;
  #L1d525e.  v1:= 0I;
  #L1d5260.  if v1 >= v0 then goto L1d528c;
  #L1d5264.  v2:= v4.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1d5268.  call temp:= `get`(v2, v1) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d526e.  v2:= temp @kind object;
  #L1d5270.  v2:= (`c.f.b.k.e`) v2 @kind object;
  #L1d5274.  v3:= instanceof @variable v2 @type ^`c.f.b.k.m` @kind boolean;
  #L1d5278.  if v3 == 0 then goto L1d5286;
  #L1d527c.  v2:= (`c.f.b.k.m`) v2 @kind object;
  #L1d5280.  call `layout`(v2) @signature `Lc/f/b/k/m;.layout:()V` @kind virtual;
  #L1d5286.  v1:= v1 + 1;
  #L1d528a.  goto L1d5260;
  #L1d528c.  return @kind void;
}
procedure `void` `remove`(`c.f.b.k.m` v1 @kind this, `c.f.b.k.e` v2 @kind object) @signature `Lc/f/b/k/m;.remove:(Lc/f/b/k/e;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d52a0.  v0:= v1.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1d52a4.  call temp:= `remove`(v0, v2) @signature `Ljava/util/ArrayList;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d52aa.  call `reset`(v2) @signature `Lc/f/b/k/e;.reset:()V` @kind virtual;
  #L1d52b0.  return @kind void;
}
procedure `void` `removeAllChildren`(`c.f.b.k.m` v1 @kind this) @signature `Lc/f/b/k/m;.removeAllChildren:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d52c4.  v0:= v1.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1d52c8.  call `clear`(v0) @signature `Ljava/util/ArrayList;.clear:()V` @kind virtual;
  #L1d52ce.  return @kind void;
}
procedure `void` `reset`(`c.f.b.k.m` v1 @kind this) @signature `Lc/f/b/k/m;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d52e0.  v0:= v1.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1d52e4.  call `clear`(v0) @signature `Ljava/util/ArrayList;.clear:()V` @kind virtual;
  #L1d52ea.  call `reset`(v1) @signature `Lc/f/b/k/e;.reset:()V` @kind super;
  #L1d52f0.  return @kind void;
}
procedure `void` `resetSolverVariables`(`c.f.b.k.m` v3 @kind this, `c.f.b.c` v4 @kind object) @signature `Lc/f/b/k/m;.resetSolverVariables:(Lc/f/b/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d5304.  call `resetSolverVariables`(v3, v4) @signature `Lc/f/b/k/e;.resetSolverVariables:(Lc/f/b/c;)V` @kind super;
  #L1d530a.  v0:= v3.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1d530e.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1d5314.  v0:= temp;
  #L1d5316.  v1:= 0I;
  #L1d5318.  if v1 >= v0 then goto L1d5338;
  #L1d531c.  v2:= v3.`c.f.b.k.m.p0` @type ^`java.util.ArrayList` @kind object;
  #L1d5320.  call temp:= `get`(v2, v1) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d5326.  v2:= temp @kind object;
  #L1d5328.  v2:= (`c.f.b.k.e`) v2 @kind object;
  #L1d532c.  call `resetSolverVariables`(v2, v4) @signature `Lc/f/b/k/e;.resetSolverVariables:(Lc/f/b/c;)V` @kind virtual;
  #L1d5332.  v1:= v1 + 1;
  #L1d5336.  goto L1d5318;
  #L1d5338.  return @kind void;
}
