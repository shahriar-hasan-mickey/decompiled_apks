record `c.f.b.k.j` @kind class @AccessFlag PUBLIC extends `c.f.b.k.e` @kind class, `c.f.b.k.i` @kind interface {
  `c.f.b.k.e`[] `c.f.b.k.j.p0` @AccessFlag PUBLIC;
  `int` `c.f.b.k.j.q0` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`c.f.b.k.j` v1 @kind this) @signature `Lc/f/b/k/j;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d4af0.  call `<init>`(v1) @signature `Lc/f/b/k/e;.<init>:()V` @kind direct;
  #L1d4af6.  v0:= 4I;
  #L1d4af8.  v0:= new `c.f.b.k.e`[v0];
  #L1d4afc.  v1.`c.f.b.k.j.p0` @type ^`c.f.b.k.e`[] := v0 @kind object;
  #L1d4b00.  v0:= 0I;
  #L1d4b02.  v1.`c.f.b.k.j.q0` @type ^`int` := v0;
  #L1d4b06.  return @kind void;
}
procedure `void` `add`(`c.f.b.k.j` v3 @kind this, `c.f.b.k.e` v4 @kind object) @signature `Lc/f/b/k/j;.add:(Lc/f/b/k/e;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d4b18.  if v4 == v3 then goto L1d4b5e;
  #L1d4b1c.  if v4 != 0 then goto L1d4b22;
  #L1d4b20.  goto L1d4b5e;
  #L1d4b22.  v0:= v3.`c.f.b.k.j.q0` @type ^`int`;
  #L1d4b26.  v0:= v0 + 1;
  #L1d4b2a.  v1:= v3.`c.f.b.k.j.p0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d4b2e.  v2:= length @variable v1;
  #L1d4b30.  if v0 <= v2 then goto L1d4b4a;
  #L1d4b34.  v0:= length @variable v1;
  #L1d4b36.  v0:= v0 * 2;
  #L1d4b3a.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L1d4b40.  v0:= temp @kind object;
  #L1d4b42.  v0:= (`c.f.b.k.e`[]) v0 @kind object;
  #L1d4b46.  v3.`c.f.b.k.j.p0` @type ^`c.f.b.k.e`[] := v0 @kind object;
  #L1d4b4a.  v0:= v3.`c.f.b.k.j.p0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d4b4e.  v1:= v3.`c.f.b.k.j.q0` @type ^`int`;
  #L1d4b52.  v0[v1]:= v4 @kind object;
  #L1d4b56.  v1:= v1 + 1;
  #L1d4b5a.  v3.`c.f.b.k.j.q0` @type ^`int` := v1;
  #L1d4b5e.  return @kind void;
}
procedure `void` `addDependents`(`c.f.b.k.j` v3 @kind this, `java.util.ArrayList` v4 @kind object, `int` v5 , `c.f.b.k.n.o` v6 @kind object) @signature `Lc/f/b/k/j;.addDependents:(Ljava/util/ArrayList;ILc/f/b/k/n/o;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d4b70.  v0:= 0I;
  #L1d4b72.  v1:= 0I;
  #L1d4b74.  v2:= v3.`c.f.b.k.j.q0` @type ^`int`;
  #L1d4b78.  if v1 >= v2 then goto L1d4b90;
  #L1d4b7c.  v2:= v3.`c.f.b.k.j.p0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d4b80.  v2:= v2[v1] @kind object;
  #L1d4b84.  call temp:= `add`(v6, v2) @signature `Lc/f/b/k/n/o;.add:(Lc/f/b/k/e;)Z` @kind virtual;
  #L1d4b8a.  v1:= v1 + 1;
  #L1d4b8e.  goto L1d4b74;
  #L1d4b90.  v1:= v3.`c.f.b.k.j.q0` @type ^`int`;
  #L1d4b94.  if v0 >= v1 then goto L1d4bac;
  #L1d4b98.  v1:= v3.`c.f.b.k.j.p0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d4b9c.  v1:= v1[v0] @kind object;
  #L1d4ba0.  call temp:= `findDependents`(v1, v5, v4, v6) @signature `Lc/f/b/k/n/i;.findDependents:(Lc/f/b/k/e;ILjava/util/ArrayList;Lc/f/b/k/n/o;)Lc/f/b/k/n/o;` @kind static;
  #L1d4ba6.  v0:= v0 + 1;
  #L1d4baa.  goto L1d4b90;
  #L1d4bac.  return @kind void;
}
procedure `int` `findGroupInDependents`(`c.f.b.k.j` v4 @kind this, `int` v5 ) @signature `Lc/f/b/k/j;.findGroupInDependents:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d4aa4.  v0:= 0I;
  #L1d4aa6.  v1:= v4.`c.f.b.k.j.q0` @type ^`int`;
  #L1d4aaa.  v2:= -1I;
  #L1d4aac.  if v0 >= v1 then goto L1d4adc;
  #L1d4ab0.  v1:= v4.`c.f.b.k.j.p0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d4ab4.  v1:= v1[v0] @kind object;
  #L1d4ab8.  if v5 != 0 then goto L1d4ac6;
  #L1d4abc.  v3:= v1.`c.f.b.k.e.m0` @type ^`int`;
  #L1d4ac0.  if v3 == v2 then goto L1d4ac6;
  #L1d4ac4.  return v3;
  #L1d4ac6.  v3:= 1I;
  #L1d4ac8.  if v5 != v3 then goto L1d4ad6;
  #L1d4acc.  v1:= v1.`c.f.b.k.e.n0` @type ^`int`;
  #L1d4ad0.  if v1 == v2 then goto L1d4ad6;
  #L1d4ad4.  return v1;
  #L1d4ad6.  v0:= v0 + 1;
  #L1d4ada.  goto L1d4aa6;
  #L1d4adc.  return v2;
}
procedure `void` `removeAllIds`(`c.f.b.k.j` v2 @kind this) @signature `Lc/f/b/k/j;.removeAllIds:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d4bc0.  v0:= 0I;
  #L1d4bc2.  v2.`c.f.b.k.j.q0` @type ^`int` := v0;
  #L1d4bc6.  v0:= v2.`c.f.b.k.j.p0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d4bca.  v1:= 0I;
  #L1d4bcc.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L1d4bd2.  return @kind void;
}
procedure `void` `updateConstraints`(`c.f.b.k.j` v0 @kind this, `c.f.b.k.f` v1 @kind object) @signature `Lc/f/b/k/j;.updateConstraints:(Lc/f/b/k/f;)V` @AccessFlag PUBLIC {
    temp;

  #L1d4be4.  return @kind void;
}
