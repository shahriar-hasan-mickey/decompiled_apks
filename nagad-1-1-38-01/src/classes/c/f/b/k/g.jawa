record `c.f.b.k.g` @kind class @AccessFlag PUBLIC extends `c.f.b.k.l` @kind class {
  `int` `c.f.b.k.g.C0` @AccessFlag PRIVATE;
  `int` `c.f.b.k.g.D0` @AccessFlag PRIVATE;
  `int` `c.f.b.k.g.E0` @AccessFlag PRIVATE;
  `int` `c.f.b.k.g.F0` @AccessFlag PRIVATE;
  `int` `c.f.b.k.g.G0` @AccessFlag PRIVATE;
  `int` `c.f.b.k.g.H0` @AccessFlag PRIVATE;
  `float` `c.f.b.k.g.I0` @AccessFlag PRIVATE;
  `float` `c.f.b.k.g.J0` @AccessFlag PRIVATE;
  `float` `c.f.b.k.g.K0` @AccessFlag PRIVATE;
  `float` `c.f.b.k.g.L0` @AccessFlag PRIVATE;
  `float` `c.f.b.k.g.M0` @AccessFlag PRIVATE;
  `float` `c.f.b.k.g.N0` @AccessFlag PRIVATE;
  `int` `c.f.b.k.g.O0` @AccessFlag PRIVATE;
  `int` `c.f.b.k.g.P0` @AccessFlag PRIVATE;
  `int` `c.f.b.k.g.Q0` @AccessFlag PRIVATE;
  `int` `c.f.b.k.g.R0` @AccessFlag PRIVATE;
  `int` `c.f.b.k.g.S0` @AccessFlag PRIVATE;
  `int` `c.f.b.k.g.T0` @AccessFlag PRIVATE;
  `int` `c.f.b.k.g.U0` @AccessFlag PRIVATE;
  `java.util.ArrayList` `c.f.b.k.g.V0` @AccessFlag PRIVATE;
  `c.f.b.k.e`[] `c.f.b.k.g.W0` @AccessFlag PRIVATE;
  `c.f.b.k.e`[] `c.f.b.k.g.X0` @AccessFlag PRIVATE;
  `int`[] `c.f.b.k.g.Y0` @AccessFlag PRIVATE;
  `c.f.b.k.e`[] `c.f.b.k.g.Z0` @AccessFlag PRIVATE;
  `int` `c.f.b.k.g.a1` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.f.b.k.g` v3 @kind this) @signature `Lc/f/b/k/g;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1d34e4.  call `<init>`(v3) @signature `Lc/f/b/k/l;.<init>:()V` @kind direct;
  #L1d34ea.  v0:= -1I;
  #L1d34ec.  v3.`c.f.b.k.g.C0` @type ^`int` := v0;
  #L1d34f0.  v3.`c.f.b.k.g.D0` @type ^`int` := v0;
  #L1d34f4.  v3.`c.f.b.k.g.E0` @type ^`int` := v0;
  #L1d34f8.  v3.`c.f.b.k.g.F0` @type ^`int` := v0;
  #L1d34fc.  v3.`c.f.b.k.g.G0` @type ^`int` := v0;
  #L1d3500.  v3.`c.f.b.k.g.H0` @type ^`int` := v0;
  #L1d3504.  v1:= 0.5F;
  #L1d3508.  v3.`c.f.b.k.g.I0` @type ^`float` := v1;
  #L1d350c.  v3.`c.f.b.k.g.J0` @type ^`float` := v1;
  #L1d3510.  v3.`c.f.b.k.g.K0` @type ^`float` := v1;
  #L1d3514.  v3.`c.f.b.k.g.L0` @type ^`float` := v1;
  #L1d3518.  v3.`c.f.b.k.g.M0` @type ^`float` := v1;
  #L1d351c.  v3.`c.f.b.k.g.N0` @type ^`float` := v1;
  #L1d3520.  v1:= 0I;
  #L1d3522.  v3.`c.f.b.k.g.O0` @type ^`int` := v1;
  #L1d3526.  v3.`c.f.b.k.g.P0` @type ^`int` := v1;
  #L1d352a.  v2:= 2I;
  #L1d352c.  v3.`c.f.b.k.g.Q0` @type ^`int` := v2;
  #L1d3530.  v3.`c.f.b.k.g.R0` @type ^`int` := v2;
  #L1d3534.  v3.`c.f.b.k.g.S0` @type ^`int` := v1;
  #L1d3538.  v3.`c.f.b.k.g.T0` @type ^`int` := v0;
  #L1d353c.  v3.`c.f.b.k.g.U0` @type ^`int` := v1;
  #L1d3540.  v0:= new `java.util.ArrayList`;
  #L1d3544.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1d354a.  v3.`c.f.b.k.g.V0` @type ^`java.util.ArrayList` := v0 @kind object;
  #L1d354e.  v0:= 0I;
  #L1d3550.  v3.`c.f.b.k.g.W0` @type ^`c.f.b.k.e`[] := v0 @kind object;
  #L1d3554.  v3.`c.f.b.k.g.X0` @type ^`c.f.b.k.e`[] := v0 @kind object;
  #L1d3558.  v3.`c.f.b.k.g.Y0` @type ^`int`[] := v0 @kind object;
  #L1d355c.  v3.`c.f.b.k.g.a1` @type ^`int` := v1;
  #L1d3560.  return @kind void;
}
procedure `int` `a`(`c.f.b.k.g` v9 @kind this, `c.f.b.k.e` v10 @kind object, `int` v11 ) @signature `Lc/f/b/k/g;.a:(Lc/f/b/k/e;I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1d337c.  v0:= 0I;
  #L1d337e.  if v10 != 0 then goto L1d3384;
  #L1d3382.  return v0;
  #L1d3384.  call temp:= `getVerticalDimensionBehaviour`(v10) @signature `Lc/f/b/k/e;.getVerticalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d338a.  v1:= temp @kind object;
  #L1d338c.  v2:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d3390.  if v1 != v2 then goto L1d3416;
  #L1d3394.  v1:= v10.`c.f.b.k.e.o` @type ^`int`;
  #L1d3398.  if v1 != 0 then goto L1d339e;
  #L1d339c.  return v0;
  #L1d339e.  v0:= 2I;
  #L1d33a0.  v2:= 1I;
  #L1d33a2.  if v1 != v0 then goto L1d33e6;
  #L1d33a6.  v0:= v10.`c.f.b.k.e.v` @type ^`float`;
  #L1d33aa.  v11:= (`float`) v11 @kind i2f;
  #L1d33ac.  v0:= v0 * v11 @kind float;
  #L1d33b0.  v11:= (`int`) v0 @kind f2i;
  #L1d33b2.  call temp:= `getHeight`(v10) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d33b8.  v0:= temp;
  #L1d33ba.  if v11 == v0 then goto L1d33e4;
  #L1d33be.  call `setMeasureRequested`(v10, v2) @signature `Lc/f/b/k/e;.setMeasureRequested:(Z)V` @kind virtual;
  #L1d33c4.  call temp:= `getHorizontalDimensionBehaviour`(v10) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d33ca.  v5:= temp @kind object;
  #L1d33cc.  call temp:= `getWidth`(v10) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d33d2.  v6:= temp;
  #L1d33d4.  v7:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1d33d8.  v3:= v9 @kind object;
  #L1d33da.  v4:= v10 @kind object;
  #L1d33dc.  v8:= v11;
  #L1d33de.  call `measure`(v3, v4, v5, v6, v7, v8) @signature `Lc/f/b/k/l;.measure:(Lc/f/b/k/e;Lc/f/b/k/e$b;ILc/f/b/k/e$b;I)V` @kind virtual;
  #L1d33e4.  return v11;
  #L1d33e6.  if v1 != v2 then goto L1d33f4;
  #L1d33ea.  call temp:= `getHeight`(v10) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d33f0.  v10:= temp;
  #L1d33f2.  return v10;
  #L1d33f4.  v11:= 3I;
  #L1d33f6.  if v1 != v11 then goto L1d3416;
  #L1d33fa.  call temp:= `getWidth`(v10) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d3400.  v11:= temp;
  #L1d3402.  v11:= (`float`) v11 @kind i2f;
  #L1d3404.  v10:= v10.`c.f.b.k.e.U` @type ^`float`;
  #L1d3408.  v11:= v11 * v10 @kind float;
  #L1d340c.  v10:= 0.5F;
  #L1d3410.  v11:= v11 + v10 @kind float;
  #L1d3412.  v10:= (`int`) v11 @kind f2i;
  #L1d3414.  return v10;
  #L1d3416.  call temp:= `getHeight`(v10) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d341c.  v10:= temp;
  #L1d341e.  return v10;
}
procedure `int` `a`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.a:(Lc/f/b/k/g;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d323c.  v0:= v0.`c.f.b.k.g.O0` @type ^`int`;
  #L1d3240.  return v0;
}
procedure `int` `a`(`c.f.b.k.g` v0 @kind object, `c.f.b.k.e` v1 @kind object, `int` v2 ) @signature `Lc/f/b/k/g;.a:(Lc/f/b/k/g;Lc/f/b/k/e;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d32e4.  call temp:= `b`(v0, v1, v2) @signature `Lc/f/b/k/g;.b:(Lc/f/b/k/e;I)I` @kind direct;
  #L1d32ea.  v0:= temp;
  #L1d32ec.  return v0;
}
procedure `void` `a`(`c.f.b.k.g` v11 @kind this, `boolean` v12 ) @signature `Lc/f/b/k/g;.a:(Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1d3638.  v0:= v11.`c.f.b.k.g.Y0` @type ^`int`[] @kind object;
  #L1d363c.  if v0 == 0 then goto L1d3866;
  #L1d3640.  v0:= v11.`c.f.b.k.g.X0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d3644.  if v0 == 0 then goto L1d3866;
  #L1d3648.  v0:= v11.`c.f.b.k.g.W0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d364c.  if v0 != 0 then goto L1d3654;
  #L1d3650.  goto L1d3866;
  #L1d3654.  v0:= 0I;
  #L1d3656.  v1:= 0I;
  #L1d3658.  v2:= v11.`c.f.b.k.g.a1` @type ^`int`;
  #L1d365c.  if v1 >= v2 then goto L1d3674;
  #L1d3660.  v2:= v11.`c.f.b.k.g.Z0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d3664.  v2:= v2[v1] @kind object;
  #L1d3668.  call `resetAnchors`(v2) @signature `Lc/f/b/k/e;.resetAnchors:()V` @kind virtual;
  #L1d366e.  v1:= v1 + 1;
  #L1d3672.  goto L1d3658;
  #L1d3674.  v1:= v11.`c.f.b.k.g.Y0` @type ^`int`[] @kind object;
  #L1d3678.  v2:= v1[v0];
  #L1d367c.  v3:= 1I;
  #L1d367e.  v1:= v1[v3];
  #L1d3682.  v4:= 0I;
  #L1d3684.  v5:= v4 @kind object;
  #L1d3686.  v4:= 0I;
  #L1d3688.  v6:= 8I;
  #L1d368c.  if v4 >= v2 then goto L1d3730;
  #L1d3690.  if v12 == 0 then goto L1d369c;
  #L1d3694.  v7:= v2 - v4 @kind int;
  #L1d3698.  v7:= v7 - v3 @kind int;
  #L1d369a.  goto L1d369e;
  #L1d369c.  v7:= v4;
  #L1d369e.  v8:= v11.`c.f.b.k.g.X0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d36a2.  v7:= v8[v7] @kind object;
  #L1d36a6.  if v7 == 0 then goto L1d372a;
  #L1d36aa.  call temp:= `getVisibility`(v7) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d36b0.  v8:= temp;
  #L1d36b2.  if v8 != v6 then goto L1d36b8;
  #L1d36b6.  goto L1d372a;
  #L1d36b8.  if v4 != 0 then goto L1d36e6;
  #L1d36bc.  v6:= v7.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d36c0.  v8:= v11.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d36c4.  call temp:= `getPaddingLeft`(v11) @signature `Lc/f/b/k/l;.getPaddingLeft:()I` @kind virtual;
  #L1d36ca.  v9:= temp;
  #L1d36cc.  call `connect`(v7, v6, v8, v9) @signature `Lc/f/b/k/e;.connect:(Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind virtual;
  #L1d36d2.  v6:= v11.`c.f.b.k.g.C0` @type ^`int`;
  #L1d36d6.  call `setHorizontalChainStyle`(v7, v6) @signature `Lc/f/b/k/e;.setHorizontalChainStyle:(I)V` @kind virtual;
  #L1d36dc.  v6:= v11.`c.f.b.k.g.I0` @type ^`float`;
  #L1d36e0.  call `setHorizontalBiasPercent`(v7, v6) @signature `Lc/f/b/k/e;.setHorizontalBiasPercent:(F)V` @kind virtual;
  #L1d36e6.  v6:= v2 + -1;
  #L1d36ea.  if v4 != v6 then goto L1d3704;
  #L1d36ee.  v6:= v7.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d36f2.  v8:= v11.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d36f6.  call temp:= `getPaddingRight`(v11) @signature `Lc/f/b/k/l;.getPaddingRight:()I` @kind virtual;
  #L1d36fc.  v9:= temp;
  #L1d36fe.  call `connect`(v7, v6, v8, v9) @signature `Lc/f/b/k/e;.connect:(Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind virtual;
  #L1d3704.  if v4 <= 0 then goto L1d3728;
  #L1d3708.  v6:= v7.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d370c.  v8:= v5.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d3710.  v9:= v11.`c.f.b.k.g.O0` @type ^`int`;
  #L1d3714.  call `connect`(v7, v6, v8, v9) @signature `Lc/f/b/k/e;.connect:(Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind virtual;
  #L1d371a.  v6:= v5.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d371e.  v8:= v7.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d3722.  call `connect`(v5, v6, v8, v0) @signature `Lc/f/b/k/e;.connect:(Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind virtual;
  #L1d3728.  v5:= v7 @kind object;
  #L1d372a.  v4:= v4 + 1;
  #L1d372e.  goto L1d3688;
  #L1d3730.  v12:= 0I;
  #L1d3732.  if v12 >= v1 then goto L1d37c8;
  #L1d3736.  v4:= v11.`c.f.b.k.g.W0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d373a.  v4:= v4[v12] @kind object;
  #L1d373e.  if v4 == 0 then goto L1d37c2;
  #L1d3742.  call temp:= `getVisibility`(v4) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d3748.  v7:= temp;
  #L1d374a.  if v7 != v6 then goto L1d3750;
  #L1d374e.  goto L1d37c2;
  #L1d3750.  if v12 != 0 then goto L1d377e;
  #L1d3754.  v7:= v4.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d3758.  v8:= v11.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d375c.  call temp:= `getPaddingTop`(v11) @signature `Lc/f/b/k/l;.getPaddingTop:()I` @kind virtual;
  #L1d3762.  v9:= temp;
  #L1d3764.  call `connect`(v4, v7, v8, v9) @signature `Lc/f/b/k/e;.connect:(Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind virtual;
  #L1d376a.  v7:= v11.`c.f.b.k.g.D0` @type ^`int`;
  #L1d376e.  call `setVerticalChainStyle`(v4, v7) @signature `Lc/f/b/k/e;.setVerticalChainStyle:(I)V` @kind virtual;
  #L1d3774.  v7:= v11.`c.f.b.k.g.J0` @type ^`float`;
  #L1d3778.  call `setVerticalBiasPercent`(v4, v7) @signature `Lc/f/b/k/e;.setVerticalBiasPercent:(F)V` @kind virtual;
  #L1d377e.  v7:= v1 + -1;
  #L1d3782.  if v12 != v7 then goto L1d379c;
  #L1d3786.  v7:= v4.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d378a.  v8:= v11.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d378e.  call temp:= `getPaddingBottom`(v11) @signature `Lc/f/b/k/l;.getPaddingBottom:()I` @kind virtual;
  #L1d3794.  v9:= temp;
  #L1d3796.  call `connect`(v4, v7, v8, v9) @signature `Lc/f/b/k/e;.connect:(Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind virtual;
  #L1d379c.  if v12 <= 0 then goto L1d37c0;
  #L1d37a0.  v7:= v4.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d37a4.  v8:= v5.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d37a8.  v9:= v11.`c.f.b.k.g.P0` @type ^`int`;
  #L1d37ac.  call `connect`(v4, v7, v8, v9) @signature `Lc/f/b/k/e;.connect:(Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind virtual;
  #L1d37b2.  v7:= v5.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d37b6.  v8:= v4.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d37ba.  call `connect`(v5, v7, v8, v0) @signature `Lc/f/b/k/e;.connect:(Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind virtual;
  #L1d37c0.  v5:= v4 @kind object;
  #L1d37c2.  v12:= v12 + 1;
  #L1d37c6.  goto L1d3732;
  #L1d37c8.  v12:= 0I;
  #L1d37ca.  if v12 >= v2 then goto L1d3866;
  #L1d37ce.  v4:= 0I;
  #L1d37d0.  if v4 >= v1 then goto L1d3860;
  #L1d37d4.  v5:= v4 * v2 @kind int;
  #L1d37d8.  v5:= v5 + v12 @kind int;
  #L1d37da.  v7:= v11.`c.f.b.k.g.U0` @type ^`int`;
  #L1d37de.  if v7 != v3 then goto L1d37e8;
  #L1d37e2.  v5:= v12 * v1 @kind int;
  #L1d37e6.  v5:= v5 + v4 @kind int;
  #L1d37e8.  v7:= v11.`c.f.b.k.g.Z0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d37ec.  v8:= length @variable v7;
  #L1d37ee.  if v5 < v8 then goto L1d37f4;
  #L1d37f2.  goto L1d385a;
  #L1d37f4.  v5:= v7[v5] @kind object;
  #L1d37f8.  if v5 == 0 then goto L1d385a;
  #L1d37fc.  call temp:= `getVisibility`(v5) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d3802.  v7:= temp;
  #L1d3804.  if v7 != v6 then goto L1d380a;
  #L1d3808.  goto L1d385a;
  #L1d380a.  v7:= v11.`c.f.b.k.g.X0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d380e.  v7:= v7[v12] @kind object;
  #L1d3812.  v8:= v11.`c.f.b.k.g.W0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d3816.  v8:= v8[v4] @kind object;
  #L1d381a.  if v5 == v7 then goto L1d383a;
  #L1d381e.  v9:= v5.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d3822.  v10:= v7.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d3826.  call `connect`(v5, v9, v10, v0) @signature `Lc/f/b/k/e;.connect:(Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind virtual;
  #L1d382c.  v9:= v5.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d3830.  v7:= v7.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d3834.  call `connect`(v5, v9, v7, v0) @signature `Lc/f/b/k/e;.connect:(Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind virtual;
  #L1d383a.  if v5 == v8 then goto L1d385a;
  #L1d383e.  v7:= v5.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d3842.  v9:= v8.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d3846.  call `connect`(v5, v7, v9, v0) @signature `Lc/f/b/k/e;.connect:(Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind virtual;
  #L1d384c.  v7:= v5.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d3850.  v8:= v8.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d3854.  call `connect`(v5, v7, v8, v0) @signature `Lc/f/b/k/e;.connect:(Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind virtual;
  #L1d385a.  v4:= v4 + 1;
  #L1d385e.  goto L1d37d0;
  #L1d3860.  v12:= v12 + 1;
  #L1d3864.  goto L1d37ca;
  #L1d3866.  return @kind void;
}
procedure `void` `a`(`c.f.b.k.g` v16 @kind this, `c.f.b.k.e`[] v17 @kind object, `int` v18 , `int` v19 , `int` v20 , `int`[] v21 @kind object) @signature `Lc/f/b/k/g;.a:([Lc/f/b/k/e;III[I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L1d3aa0.  v0:= v16 @kind object;
  #L1d3aa4.  v1:= v17 @kind object;
  #L1d3aa8.  v2:= v18;
  #L1d3aac.  v3:= v19;
  #L1d3ab0.  v4:= v20;
  #L1d3ab4.  v5:= 0I;
  #L1d3ab6.  if v3 != 0 then goto L1d3b00;
  #L1d3aba.  v6:= v0.`c.f.b.k.g.T0` @type ^`int`;
  #L1d3abe.  if v6 > 0 then goto L1d3afa;
  #L1d3ac2.  v6:= 0I;
  #L1d3ac4.  v7:= 0I;
  #L1d3ac6.  v8:= 0I;
  #L1d3ac8.  if v6 >= v2 then goto L1d3afc;
  #L1d3acc.  if v6 <= 0 then goto L1d3ad6;
  #L1d3ad0.  v9:= v0.`c.f.b.k.g.O0` @type ^`int`;
  #L1d3ad4.  v7:= v7 + v9 @kind int;
  #L1d3ad6.  v9:= v1[v6] @kind object;
  #L1d3ada.  if v9 != 0 then goto L1d3ae0;
  #L1d3ade.  goto L1d3af4;
  #L1d3ae0.  call temp:= `b`(v0, v9, v4) @signature `Lc/f/b/k/g;.b:(Lc/f/b/k/e;I)I` @kind direct;
  #L1d3ae6.  v9:= temp;
  #L1d3ae8.  v7:= v7 + v9 @kind int;
  #L1d3aea.  if v7 <= v4 then goto L1d3af0;
  #L1d3aee.  goto L1d3afc;
  #L1d3af0.  v8:= v8 + 1;
  #L1d3af4.  v6:= v6 + 1;
  #L1d3af8.  goto L1d3ac8;
  #L1d3afa.  v8:= v6;
  #L1d3afc.  v6:= 0I;
  #L1d3afe.  goto L1d3b44;
  #L1d3b00.  v6:= v0.`c.f.b.k.g.T0` @type ^`int`;
  #L1d3b04.  if v6 > 0 then goto L1d3b42;
  #L1d3b08.  v6:= 0I;
  #L1d3b0a.  v7:= 0I;
  #L1d3b0c.  v8:= 0I;
  #L1d3b0e.  if v6 >= v2 then goto L1d3b40;
  #L1d3b12.  if v6 <= 0 then goto L1d3b1c;
  #L1d3b16.  v9:= v0.`c.f.b.k.g.P0` @type ^`int`;
  #L1d3b1a.  v7:= v7 + v9 @kind int;
  #L1d3b1c.  v9:= v1[v6] @kind object;
  #L1d3b20.  if v9 != 0 then goto L1d3b26;
  #L1d3b24.  goto L1d3b3a;
  #L1d3b26.  call temp:= `a`(v0, v9, v4) @signature `Lc/f/b/k/g;.a:(Lc/f/b/k/e;I)I` @kind direct;
  #L1d3b2c.  v9:= temp;
  #L1d3b2e.  v7:= v7 + v9 @kind int;
  #L1d3b30.  if v7 <= v4 then goto L1d3b36;
  #L1d3b34.  goto L1d3b40;
  #L1d3b36.  v8:= v8 + 1;
  #L1d3b3a.  v6:= v6 + 1;
  #L1d3b3e.  goto L1d3b0e;
  #L1d3b40.  v6:= v8;
  #L1d3b42.  v8:= 0I;
  #L1d3b44.  v7:= v0.`c.f.b.k.g.Y0` @type ^`int`[] @kind object;
  #L1d3b48.  if v7 != 0 then goto L1d3b56;
  #L1d3b4c.  v7:= 2I;
  #L1d3b4e.  v7:= new `int`[v7];
  #L1d3b52.  v0.`c.f.b.k.g.Y0` @type ^`int`[] := v7 @kind object;
  #L1d3b56.  v7:= 1I;
  #L1d3b58.  if v6 != 0 then goto L1d3b60;
  #L1d3b5c.  if v3 == v7 then goto L1d3b68;
  #L1d3b60.  if v8 != 0 then goto L1d3b6e;
  #L1d3b64.  if v3 != 0 then goto L1d3b6e;
  #L1d3b68.  v9:= v6;
  #L1d3b6a.  v6:= 1I;
  #L1d3b6c.  goto L1d3b72;
  #L1d3b6e.  v9:= v6;
  #L1d3b70.  v6:= 0I;
  #L1d3b72.  if v6 != 0 then goto L1d3cfc;
  #L1d3b76.  if v3 != 0 then goto L1d3b8e;
  #L1d3b7a.  v9:= (`float`) v2 @kind i2f;
  #L1d3b7c.  v10:= (`float`) v8 @kind i2f;
  #L1d3b7e.  v9:= v9 / v10 @kind float;
  #L1d3b80.  v9:= (`double`) v9 @kind f2d;
  #L1d3b82.  call temp:= `ceil`(v9) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L1d3b88.  v9:= temp @kind wide;
  #L1d3b8a.  v9:= (`int`) v9 @kind d2i;
  #L1d3b8c.  goto L1d3ba0;
  #L1d3b8e.  v8:= (`float`) v2 @kind i2f;
  #L1d3b90.  v10:= (`float`) v9 @kind i2f;
  #L1d3b92.  v8:= v8 / v10 @kind float;
  #L1d3b94.  v10:= (`double`) v8 @kind f2d;
  #L1d3b96.  call temp:= `ceil`(v10) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L1d3b9c.  v10:= temp @kind wide;
  #L1d3b9e.  v8:= (`int`) v10 @kind d2i;
  #L1d3ba0.  v10:= v0.`c.f.b.k.g.X0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d3ba4.  v11:= 0I;
  #L1d3ba6.  if v10 == 0 then goto L1d3bba;
  #L1d3baa.  v12:= length @variable v10;
  #L1d3bac.  if v12 >= v8 then goto L1d3bb2;
  #L1d3bb0.  goto L1d3bba;
  #L1d3bb2.  call `fill`(v10, v11) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L1d3bb8.  goto L1d3bc2;
  #L1d3bba.  v10:= new `c.f.b.k.e`[v8];
  #L1d3bbe.  v0.`c.f.b.k.g.X0` @type ^`c.f.b.k.e`[] := v10 @kind object;
  #L1d3bc2.  v10:= v0.`c.f.b.k.g.W0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d3bc6.  if v10 == 0 then goto L1d3bda;
  #L1d3bca.  v12:= length @variable v10;
  #L1d3bcc.  if v12 >= v9 then goto L1d3bd2;
  #L1d3bd0.  goto L1d3bda;
  #L1d3bd2.  call `fill`(v10, v11) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L1d3bd8.  goto L1d3be2;
  #L1d3bda.  v10:= new `c.f.b.k.e`[v9];
  #L1d3bde.  v0.`c.f.b.k.g.W0` @type ^`c.f.b.k.e`[] := v10 @kind object;
  #L1d3be2.  v10:= 0I;
  #L1d3be4.  if v10 >= v8 then goto L1d3c74;
  #L1d3be8.  v11:= 0I;
  #L1d3bea.  if v11 >= v9 then goto L1d3c6e;
  #L1d3bee.  v12:= v11 * v8 @kind int;
  #L1d3bf2.  v12:= v12 + v10 @kind int;
  #L1d3bf4.  if v3 != v7 then goto L1d3bfe;
  #L1d3bf8.  v12:= v10 * v9 @kind int;
  #L1d3bfc.  v12:= v12 + v11 @kind int;
  #L1d3bfe.  v13:= length @variable v1;
  #L1d3c00.  if v12 < v13 then goto L1d3c06;
  #L1d3c04.  goto L1d3c68;
  #L1d3c06.  v12:= v1[v12] @kind object;
  #L1d3c0a.  if v12 != 0 then goto L1d3c10;
  #L1d3c0e.  goto L1d3c68;
  #L1d3c10.  call temp:= `b`(v0, v12, v4) @signature `Lc/f/b/k/g;.b:(Lc/f/b/k/e;I)I` @kind direct;
  #L1d3c16.  v13:= temp;
  #L1d3c18.  v14:= v0.`c.f.b.k.g.X0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d3c1c.  v15:= v14[v10] @kind object;
  #L1d3c20.  if v15 == 0 then goto L1d3c34;
  #L1d3c24.  v14:= v14[v10] @kind object;
  #L1d3c28.  call temp:= `getWidth`(v14) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d3c2e.  v14:= temp;
  #L1d3c30.  if v14 >= v13 then goto L1d3c3c;
  #L1d3c34.  v13:= v0.`c.f.b.k.g.X0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d3c38.  v13[v10]:= v12 @kind object;
  #L1d3c3c.  call temp:= `a`(v0, v12, v4) @signature `Lc/f/b/k/g;.a:(Lc/f/b/k/e;I)I` @kind direct;
  #L1d3c42.  v13:= temp;
  #L1d3c44.  v14:= v0.`c.f.b.k.g.W0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d3c48.  v15:= v14[v11] @kind object;
  #L1d3c4c.  if v15 == 0 then goto L1d3c60;
  #L1d3c50.  v14:= v14[v11] @kind object;
  #L1d3c54.  call temp:= `getHeight`(v14) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d3c5a.  v14:= temp;
  #L1d3c5c.  if v14 >= v13 then goto L1d3c68;
  #L1d3c60.  v13:= v0.`c.f.b.k.g.W0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d3c64.  v13[v11]:= v12 @kind object;
  #L1d3c68.  v11:= v11 + 1;
  #L1d3c6c.  goto L1d3bea;
  #L1d3c6e.  v10:= v10 + 1;
  #L1d3c72.  goto L1d3be4;
  #L1d3c74.  v10:= 0I;
  #L1d3c76.  v11:= 0I;
  #L1d3c78.  if v10 >= v8 then goto L1d3ca2;
  #L1d3c7c.  v12:= v0.`c.f.b.k.g.X0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d3c80.  v12:= v12[v10] @kind object;
  #L1d3c84.  if v12 == 0 then goto L1d3c9c;
  #L1d3c88.  if v10 <= 0 then goto L1d3c92;
  #L1d3c8c.  v13:= v0.`c.f.b.k.g.O0` @type ^`int`;
  #L1d3c90.  v11:= v11 + v13 @kind int;
  #L1d3c92.  call temp:= `b`(v0, v12, v4) @signature `Lc/f/b/k/g;.b:(Lc/f/b/k/e;I)I` @kind direct;
  #L1d3c98.  v12:= temp;
  #L1d3c9a.  v11:= v11 + v12 @kind int;
  #L1d3c9c.  v10:= v10 + 1;
  #L1d3ca0.  goto L1d3c78;
  #L1d3ca2.  v10:= 0I;
  #L1d3ca4.  v12:= 0I;
  #L1d3ca6.  if v10 >= v9 then goto L1d3cd0;
  #L1d3caa.  v13:= v0.`c.f.b.k.g.W0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d3cae.  v13:= v13[v10] @kind object;
  #L1d3cb2.  if v13 == 0 then goto L1d3cca;
  #L1d3cb6.  if v10 <= 0 then goto L1d3cc0;
  #L1d3cba.  v14:= v0.`c.f.b.k.g.P0` @type ^`int`;
  #L1d3cbe.  v12:= v12 + v14 @kind int;
  #L1d3cc0.  call temp:= `a`(v0, v13, v4) @signature `Lc/f/b/k/g;.a:(Lc/f/b/k/e;I)I` @kind direct;
  #L1d3cc6.  v13:= temp;
  #L1d3cc8.  v12:= v12 + v13 @kind int;
  #L1d3cca.  v10:= v10 + 1;
  #L1d3cce.  goto L1d3ca6;
  #L1d3cd0.  v21[v5]:= v11;
  #L1d3cd4.  v21[v7]:= v12;
  #L1d3cd8.  if v3 != 0 then goto L1d3cec;
  #L1d3cdc.  if v11 <= v4 then goto L1d3b6a;
  #L1d3ce0.  if v8 <= v7 then goto L1d3b6a;
  #L1d3ce4.  v8:= v8 + -1;
  #L1d3ce8.  goto L1d3b72;
  #L1d3cec.  if v12 <= v4 then goto L1d3b6a;
  #L1d3cf0.  if v9 <= v7 then goto L1d3b6a;
  #L1d3cf4.  v9:= v9 + -1;
  #L1d3cf8.  goto L1d3b72;
  #L1d3cfc.  v1:= v0.`c.f.b.k.g.Y0` @type ^`int`[] @kind object;
  #L1d3d00.  v1[v5]:= v8;
  #L1d3d04.  v1[v7]:= v9;
  #L1d3d08.  return @kind void;
}
procedure `int` `b`(`c.f.b.k.g` v9 @kind this, `c.f.b.k.e` v10 @kind object, `int` v11 ) @signature `Lc/f/b/k/g;.b:(Lc/f/b/k/e;I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1d3430.  v0:= 0I;
  #L1d3432.  if v10 != 0 then goto L1d3438;
  #L1d3436.  return v0;
  #L1d3438.  call temp:= `getHorizontalDimensionBehaviour`(v10) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d343e.  v1:= temp @kind object;
  #L1d3440.  v2:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d3444.  if v1 != v2 then goto L1d34ca;
  #L1d3448.  v1:= v10.`c.f.b.k.e.n` @type ^`int`;
  #L1d344c.  if v1 != 0 then goto L1d3452;
  #L1d3450.  return v0;
  #L1d3452.  v0:= 2I;
  #L1d3454.  v2:= 1I;
  #L1d3456.  if v1 != v0 then goto L1d349a;
  #L1d345a.  v0:= v10.`c.f.b.k.e.s` @type ^`float`;
  #L1d345e.  v11:= (`float`) v11 @kind i2f;
  #L1d3460.  v0:= v0 * v11 @kind float;
  #L1d3464.  v11:= (`int`) v0 @kind f2i;
  #L1d3466.  call temp:= `getWidth`(v10) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d346c.  v0:= temp;
  #L1d346e.  if v11 == v0 then goto L1d3498;
  #L1d3472.  call `setMeasureRequested`(v10, v2) @signature `Lc/f/b/k/e;.setMeasureRequested:(Z)V` @kind virtual;
  #L1d3478.  v5:= `@@c.f.b.k.e$b.f` @type ^`c.f.b.k.e$b` @kind object;
  #L1d347c.  call temp:= `getVerticalDimensionBehaviour`(v10) @signature `Lc/f/b/k/e;.getVerticalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d3482.  v7:= temp @kind object;
  #L1d3484.  call temp:= `getHeight`(v10) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d348a.  v8:= temp;
  #L1d348c.  v3:= v9 @kind object;
  #L1d348e.  v4:= v10 @kind object;
  #L1d3490.  v6:= v11;
  #L1d3492.  call `measure`(v3, v4, v5, v6, v7, v8) @signature `Lc/f/b/k/l;.measure:(Lc/f/b/k/e;Lc/f/b/k/e$b;ILc/f/b/k/e$b;I)V` @kind virtual;
  #L1d3498.  return v11;
  #L1d349a.  if v1 != v2 then goto L1d34a8;
  #L1d349e.  call temp:= `getWidth`(v10) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d34a4.  v10:= temp;
  #L1d34a6.  return v10;
  #L1d34a8.  v11:= 3I;
  #L1d34aa.  if v1 != v11 then goto L1d34ca;
  #L1d34ae.  call temp:= `getHeight`(v10) @signature `Lc/f/b/k/e;.getHeight:()I` @kind virtual;
  #L1d34b4.  v11:= temp;
  #L1d34b6.  v11:= (`float`) v11 @kind i2f;
  #L1d34b8.  v10:= v10.`c.f.b.k.e.U` @type ^`float`;
  #L1d34bc.  v11:= v11 * v10 @kind float;
  #L1d34c0.  v10:= 0.5F;
  #L1d34c4.  v11:= v11 + v10 @kind float;
  #L1d34c6.  v10:= (`int`) v11 @kind f2i;
  #L1d34c8.  return v10;
  #L1d34ca.  call temp:= `getWidth`(v10) @signature `Lc/f/b/k/e;.getWidth:()I` @kind virtual;
  #L1d34d0.  v10:= temp;
  #L1d34d2.  return v10;
}
procedure `int` `b`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.b:(Lc/f/b/k/g;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d3254.  v0:= v0.`c.f.b.k.g.P0` @type ^`int`;
  #L1d3258.  return v0;
}
procedure `int` `b`(`c.f.b.k.g` v0 @kind object, `c.f.b.k.e` v1 @kind object, `int` v2 ) @signature `Lc/f/b/k/g;.b:(Lc/f/b/k/g;Lc/f/b/k/e;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d3300.  call temp:= `a`(v0, v1, v2) @signature `Lc/f/b/k/g;.a:(Lc/f/b/k/e;I)I` @kind direct;
  #L1d3306.  v0:= temp;
  #L1d3308.  return v0;
}
procedure `void` `b`(`c.f.b.k.g` v27 @kind this, `c.f.b.k.e`[] v28 @kind object, `int` v29 , `int` v30 , `int` v31 , `int`[] v32 @kind object) @signature `Lc/f/b/k/g;.b:([Lc/f/b/k/e;III[I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;
    v24;
    v25;
    v26;

  #L1d3d1c.  v8:= v27 @kind object;
  #L1d3d20.  v9:= v29;
  #L1d3d24.  v15:= v31;
  #L1d3d28.  if v9 != 0 then goto L1d3d2e;
  #L1d3d2c.  return @kind void;
  #L1d3d2e.  v0:= v8.`c.f.b.k.g.V0` @type ^`java.util.ArrayList` @kind object;
  #L1d3d32.  call `clear`(v0) @signature `Ljava/util/ArrayList;.clear:()V` @kind virtual;
  #L1d3d38.  v10:= new `c.f.b.k.g$a`;
  #L1d3d3c.  v3:= v8.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d3d40.  v4:= v8.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d3d44.  v5:= v8.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d3d48.  v6:= v8.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d3d4c.  v0:= v10 @kind object;
  #L1d3d4e.  v1:= v27 @kind object;
  #L1d3d52.  v2:= v30;
  #L1d3d56.  v7:= v31;
  #L1d3d5a.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lc/f/b/k/g$a;.<init>:(Lc/f/b/k/g;ILc/f/b/k/d;Lc/f/b/k/d;Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind direct;
  #L1d3d60.  v0:= v8.`c.f.b.k.g.V0` @type ^`java.util.ArrayList` @kind object;
  #L1d3d64.  call temp:= `add`(v0, v10) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d3d6a.  v20:= 1I;
  #L1d3d6e.  v21:= 0I;
  #L1d3d72.  if v30 != 0 then goto L1d3e40;
  #L1d3d76.  v2:= v10 @kind object;
  #L1d3d78.  v0:= 0I;
  #L1d3d7a.  v1:= 0I;
  #L1d3d7c.  v10:= 0I;
  #L1d3d7e.  if v10 >= v9 then goto L1d3f0a;
  #L1d3d82.  v11:= v28[v10] @kind object;
  #L1d3d86.  call temp:= `b`(v8, v11, v15) @signature `Lc/f/b/k/g;.b:(Lc/f/b/k/e;I)I` @kind direct;
  #L1d3d8c.  v12:= temp;
  #L1d3d8e.  call temp:= `getHorizontalDimensionBehaviour`(v11) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d3d94.  v3:= temp @kind object;
  #L1d3d96.  v4:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d3d9a.  if v3 != v4 then goto L1d3da2;
  #L1d3d9e.  v0:= v0 + 1;
  #L1d3da2.  v13:= v0;
  #L1d3da4.  if v1 == v15 then goto L1d3db4;
  #L1d3da8.  v0:= v8.`c.f.b.k.g.O0` @type ^`int`;
  #L1d3dac.  v0:= v0 + v1 @kind int;
  #L1d3dae.  v0:= v0 + v12 @kind int;
  #L1d3db0.  if v0 <= v15 then goto L1d3dc4;
  #L1d3db4.  call temp:= `a`(v2) @signature `Lc/f/b/k/g$a;.a:(Lc/f/b/k/g$a;)Lc/f/b/k/e;` @kind static;
  #L1d3dba.  v0:= temp @kind object;
  #L1d3dbc.  if v0 == 0 then goto L1d3dc4;
  #L1d3dc0.  v0:= 1I;
  #L1d3dc2.  goto L1d3dc6;
  #L1d3dc4.  v0:= 0I;
  #L1d3dc6.  if v0 != 0 then goto L1d3de0;
  #L1d3dca.  if v10 <= 0 then goto L1d3de0;
  #L1d3dce.  v3:= v8.`c.f.b.k.g.T0` @type ^`int`;
  #L1d3dd2.  if v3 <= 0 then goto L1d3de0;
  #L1d3dd6.  v3:= v10 %% v3 @kind int;
  #L1d3dda.  if v3 != 0 then goto L1d3de0;
  #L1d3dde.  v0:= 1I;
  #L1d3de0.  if v0 == 0 then goto L1d3e22;
  #L1d3de4.  v14:= new `c.f.b.k.g$a`;
  #L1d3de8.  v3:= v8.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d3dec.  v4:= v8.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d3df0.  v5:= v8.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d3df4.  v6:= v8.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d3df8.  v0:= v14 @kind object;
  #L1d3dfa.  v1:= v27 @kind object;
  #L1d3dfe.  v2:= v30;
  #L1d3e02.  v7:= v31;
  #L1d3e06.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lc/f/b/k/g$a;.<init>:(Lc/f/b/k/g;ILc/f/b/k/d;Lc/f/b/k/d;Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind direct;
  #L1d3e0c.  call `setStartIndex`(v14, v10) @signature `Lc/f/b/k/g$a;.setStartIndex:(I)V` @kind virtual;
  #L1d3e12.  v0:= v8.`c.f.b.k.g.V0` @type ^`java.util.ArrayList` @kind object;
  #L1d3e16.  call temp:= `add`(v0, v14) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d3e1c.  v1:= v12;
  #L1d3e1e.  v2:= v14 @kind object;
  #L1d3e20.  goto L1d3e32;
  #L1d3e22.  if v10 <= 0 then goto L1d3e30;
  #L1d3e26.  v0:= v8.`c.f.b.k.g.O0` @type ^`int`;
  #L1d3e2a.  v0:= v0 + v12 @kind int;
  #L1d3e2c.  v1:= v1 + v0 @kind int;
  #L1d3e2e.  goto L1d3e32;
  #L1d3e30.  v1:= v12;
  #L1d3e32.  call `add`(v2, v11) @signature `Lc/f/b/k/g$a;.add:(Lc/f/b/k/e;)V` @kind virtual;
  #L1d3e38.  v10:= v10 + 1;
  #L1d3e3c.  v0:= v13;
  #L1d3e3e.  goto L1d3d7e;
  #L1d3e40.  v2:= v10 @kind object;
  #L1d3e42.  v0:= 0I;
  #L1d3e44.  v1:= 0I;
  #L1d3e46.  v10:= 0I;
  #L1d3e48.  if v10 >= v9 then goto L1d3f0a;
  #L1d3e4c.  v11:= v28[v10] @kind object;
  #L1d3e50.  call temp:= `a`(v8, v11, v15) @signature `Lc/f/b/k/g;.a:(Lc/f/b/k/e;I)I` @kind direct;
  #L1d3e56.  v12:= temp;
  #L1d3e58.  call temp:= `getVerticalDimensionBehaviour`(v11) @signature `Lc/f/b/k/e;.getVerticalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d3e5e.  v3:= temp @kind object;
  #L1d3e60.  v4:= `@@c.f.b.k.e$b.h` @type ^`c.f.b.k.e$b` @kind object;
  #L1d3e64.  if v3 != v4 then goto L1d3e6c;
  #L1d3e68.  v0:= v0 + 1;
  #L1d3e6c.  v13:= v0;
  #L1d3e6e.  if v1 == v15 then goto L1d3e7e;
  #L1d3e72.  v0:= v8.`c.f.b.k.g.P0` @type ^`int`;
  #L1d3e76.  v0:= v0 + v1 @kind int;
  #L1d3e78.  v0:= v0 + v12 @kind int;
  #L1d3e7a.  if v0 <= v15 then goto L1d3e8e;
  #L1d3e7e.  call temp:= `a`(v2) @signature `Lc/f/b/k/g$a;.a:(Lc/f/b/k/g$a;)Lc/f/b/k/e;` @kind static;
  #L1d3e84.  v0:= temp @kind object;
  #L1d3e86.  if v0 == 0 then goto L1d3e8e;
  #L1d3e8a.  v0:= 1I;
  #L1d3e8c.  goto L1d3e90;
  #L1d3e8e.  v0:= 0I;
  #L1d3e90.  if v0 != 0 then goto L1d3eaa;
  #L1d3e94.  if v10 <= 0 then goto L1d3eaa;
  #L1d3e98.  v3:= v8.`c.f.b.k.g.T0` @type ^`int`;
  #L1d3e9c.  if v3 <= 0 then goto L1d3eaa;
  #L1d3ea0.  v3:= v10 %% v3 @kind int;
  #L1d3ea4.  if v3 != 0 then goto L1d3eaa;
  #L1d3ea8.  v0:= 1I;
  #L1d3eaa.  if v0 == 0 then goto L1d3eec;
  #L1d3eae.  v14:= new `c.f.b.k.g$a`;
  #L1d3eb2.  v3:= v8.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d3eb6.  v4:= v8.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d3eba.  v5:= v8.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d3ebe.  v6:= v8.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d3ec2.  v0:= v14 @kind object;
  #L1d3ec4.  v1:= v27 @kind object;
  #L1d3ec8.  v2:= v30;
  #L1d3ecc.  v7:= v31;
  #L1d3ed0.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lc/f/b/k/g$a;.<init>:(Lc/f/b/k/g;ILc/f/b/k/d;Lc/f/b/k/d;Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind direct;
  #L1d3ed6.  call `setStartIndex`(v14, v10) @signature `Lc/f/b/k/g$a;.setStartIndex:(I)V` @kind virtual;
  #L1d3edc.  v0:= v8.`c.f.b.k.g.V0` @type ^`java.util.ArrayList` @kind object;
  #L1d3ee0.  call temp:= `add`(v0, v14) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d3ee6.  v1:= v12;
  #L1d3ee8.  v2:= v14 @kind object;
  #L1d3eea.  goto L1d3efc;
  #L1d3eec.  if v10 <= 0 then goto L1d3efa;
  #L1d3ef0.  v0:= v8.`c.f.b.k.g.P0` @type ^`int`;
  #L1d3ef4.  v0:= v0 + v12 @kind int;
  #L1d3ef6.  v1:= v1 + v0 @kind int;
  #L1d3ef8.  goto L1d3efc;
  #L1d3efa.  v1:= v12;
  #L1d3efc.  call `add`(v2, v11) @signature `Lc/f/b/k/g$a;.add:(Lc/f/b/k/e;)V` @kind virtual;
  #L1d3f02.  v10:= v10 + 1;
  #L1d3f06.  v0:= v13;
  #L1d3f08.  goto L1d3e48;
  #L1d3f0a.  v1:= v8.`c.f.b.k.g.V0` @type ^`java.util.ArrayList` @kind object;
  #L1d3f0e.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1d3f14.  v1:= temp;
  #L1d3f16.  v2:= v8.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d3f1a.  v3:= v8.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d3f1e.  v4:= v8.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d3f22.  v5:= v8.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d3f26.  call temp:= `getPaddingLeft`(v27) @signature `Lc/f/b/k/l;.getPaddingLeft:()I` @kind virtual;
  #L1d3f2c.  v6:= temp;
  #L1d3f2e.  call temp:= `getPaddingTop`(v27) @signature `Lc/f/b/k/l;.getPaddingTop:()I` @kind virtual;
  #L1d3f34.  v7:= temp;
  #L1d3f36.  call temp:= `getPaddingRight`(v27) @signature `Lc/f/b/k/l;.getPaddingRight:()I` @kind virtual;
  #L1d3f3c.  v9:= temp;
  #L1d3f3e.  call temp:= `getPaddingBottom`(v27) @signature `Lc/f/b/k/l;.getPaddingBottom:()I` @kind virtual;
  #L1d3f44.  v10:= temp;
  #L1d3f46.  call temp:= `getHorizontalDimensionBehaviour`(v27) @signature `Lc/f/b/k/e;.getHorizontalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d3f4c.  v11:= temp @kind object;
  #L1d3f4e.  v12:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1d3f52.  if v11 == v12 then goto L1d3f6c;
  #L1d3f56.  call temp:= `getVerticalDimensionBehaviour`(v27) @signature `Lc/f/b/k/e;.getVerticalDimensionBehaviour:()Lc/f/b/k/e$b;` @kind virtual;
  #L1d3f5c.  v11:= temp @kind object;
  #L1d3f5e.  v12:= `@@c.f.b.k.e$b.g` @type ^`c.f.b.k.e$b` @kind object;
  #L1d3f62.  if v11 != v12 then goto L1d3f68;
  #L1d3f66.  goto L1d3f6c;
  #L1d3f68.  v11:= 0I;
  #L1d3f6a.  goto L1d3f6e;
  #L1d3f6c.  v11:= 1I;
  #L1d3f6e.  if v0 <= 0 then goto L1d3fbc;
  #L1d3f72.  if v11 == 0 then goto L1d3fbc;
  #L1d3f76.  v0:= 0I;
  #L1d3f78.  if v0 >= v1 then goto L1d3fbc;
  #L1d3f7c.  v11:= v8.`c.f.b.k.g.V0` @type ^`java.util.ArrayList` @kind object;
  #L1d3f80.  call temp:= `get`(v11, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d3f86.  v11:= temp @kind object;
  #L1d3f88.  v11:= (`c.f.b.k.g$a`) v11 @kind object;
  #L1d3f8c.  if v30 != 0 then goto L1d3fa4;
  #L1d3f90.  call temp:= `getWidth`(v11) @signature `Lc/f/b/k/g$a;.getWidth:()I` @kind virtual;
  #L1d3f96.  v12:= temp;
  #L1d3f98.  v12:= v15 - v12 @kind int;
  #L1d3f9c.  call `measureMatchConstraints`(v11, v12) @signature `Lc/f/b/k/g$a;.measureMatchConstraints:(I)V` @kind virtual;
  #L1d3fa2.  goto L1d3fb6;
  #L1d3fa4.  call temp:= `getHeight`(v11) @signature `Lc/f/b/k/g$a;.getHeight:()I` @kind virtual;
  #L1d3faa.  v12:= temp;
  #L1d3fac.  v12:= v15 - v12 @kind int;
  #L1d3fb0.  call `measureMatchConstraints`(v11, v12) @signature `Lc/f/b/k/g$a;.measureMatchConstraints:(I)V` @kind virtual;
  #L1d3fb6.  v0:= v0 + 1;
  #L1d3fba.  goto L1d3f78;
  #L1d3fbc.  v24:= v4 @kind object;
  #L1d3fc0.  v22:= v7;
  #L1d3fc4.  v25:= v9;
  #L1d3fc8.  v23:= v10;
  #L1d3fcc.  v0:= 0I;
  #L1d3fce.  v4:= v2 @kind object;
  #L1d3fd0.  v7:= v6;
  #L1d3fd2.  v2:= 0I;
  #L1d3fd4.  v6:= v5 @kind object;
  #L1d3fd6.  v5:= v3 @kind object;
  #L1d3fd8.  v3:= 0I;
  #L1d3fda.  if v0 >= v1 then goto L1d4146;
  #L1d3fde.  v9:= v8.`c.f.b.k.g.V0` @type ^`java.util.ArrayList` @kind object;
  #L1d3fe2.  call temp:= `get`(v9, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d3fe8.  v9:= temp @kind object;
  #L1d3fea.  v26:= v9 @kind object;
  #L1d3fee.  v26:= (`c.f.b.k.g$a`) v26 @kind object;
  #L1d3ff2.  if v30 != 0 then goto L1d4096;
  #L1d3ff6.  v6:= v1 + -1;
  #L1d3ffa.  if v0 >= v6 then goto L1d4024;
  #L1d3ffe.  v6:= v8.`c.f.b.k.g.V0` @type ^`java.util.ArrayList` @kind object;
  #L1d4002.  v9:= v0 + 1;
  #L1d4006.  call temp:= `get`(v6, v9) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d400c.  v6:= temp @kind object;
  #L1d400e.  v6:= (`c.f.b.k.g$a`) v6 @kind object;
  #L1d4012.  call temp:= `a`(v6) @signature `Lc/f/b/k/g$a;.a:(Lc/f/b/k/g$a;)Lc/f/b/k/e;` @kind static;
  #L1d4018.  v6:= temp @kind object;
  #L1d401a.  v6:= v6.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d401e.  v23:= 0I;
  #L1d4022.  goto L1d4034;
  #L1d4024.  v6:= v8.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d4028.  call temp:= `getPaddingBottom`(v27) @signature `Lc/f/b/k/l;.getPaddingBottom:()I` @kind virtual;
  #L1d402e.  v9:= temp;
  #L1d4030.  v23:= v9;
  #L1d4034.  call temp:= `a`(v26) @signature `Lc/f/b/k/g$a;.a:(Lc/f/b/k/g$a;)Lc/f/b/k/e;` @kind static;
  #L1d403a.  v9:= temp @kind object;
  #L1d403c.  v14:= v9.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d4040.  v9:= v26 @kind object;
  #L1d4044.  v10:= v30;
  #L1d4048.  v11:= v4 @kind object;
  #L1d404a.  v12:= v5 @kind object;
  #L1d404c.  v13:= v24 @kind object;
  #L1d4050.  v5:= v14 @kind object;
  #L1d4052.  v14:= v6 @kind object;
  #L1d4054.  v15:= v7;
  #L1d4056.  v16:= v22;
  #L1d405a.  v17:= v25;
  #L1d405e.  v18:= v23;
  #L1d4062.  v19:= v31;
  #L1d4066.  call `setup`(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19) @signature `Lc/f/b/k/g$a;.setup:(ILc/f/b/k/d;Lc/f/b/k/d;Lc/f/b/k/d;Lc/f/b/k/d;IIIII)V` @kind virtual;
  #L1d406c.  call temp:= `getWidth`(v26) @signature `Lc/f/b/k/g$a;.getWidth:()I` @kind virtual;
  #L1d4072.  v9:= temp;
  #L1d4074.  call temp:= `max`(v2, v9) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1d407a.  v2:= temp;
  #L1d407c.  call temp:= `getHeight`(v26) @signature `Lc/f/b/k/g$a;.getHeight:()I` @kind virtual;
  #L1d4082.  v9:= temp;
  #L1d4084.  v3:= v3 + v9 @kind int;
  #L1d4086.  if v0 <= 0 then goto L1d4090;
  #L1d408a.  v9:= v8.`c.f.b.k.g.P0` @type ^`int`;
  #L1d408e.  v3:= v3 + v9 @kind int;
  #L1d4090.  v22:= 0I;
  #L1d4094.  goto L1d413a;
  #L1d4096.  v9:= v1 + -1;
  #L1d409a.  if v0 >= v9 then goto L1d40c8;
  #L1d409e.  v9:= v8.`c.f.b.k.g.V0` @type ^`java.util.ArrayList` @kind object;
  #L1d40a2.  v10:= v0 + 1;
  #L1d40a6.  call temp:= `get`(v9, v10) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d40ac.  v9:= temp @kind object;
  #L1d40ae.  v9:= (`c.f.b.k.g$a`) v9 @kind object;
  #L1d40b2.  call temp:= `a`(v9) @signature `Lc/f/b/k/g$a;.a:(Lc/f/b/k/g$a;)Lc/f/b/k/e;` @kind static;
  #L1d40b8.  v9:= temp @kind object;
  #L1d40ba.  v9:= v9.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d40be.  v24:= v9 @kind object;
  #L1d40c2.  v25:= 0I;
  #L1d40c6.  goto L1d40dc;
  #L1d40c8.  v9:= v8.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d40cc.  call temp:= `getPaddingRight`(v27) @signature `Lc/f/b/k/l;.getPaddingRight:()I` @kind virtual;
  #L1d40d2.  v10:= temp;
  #L1d40d4.  v24:= v9 @kind object;
  #L1d40d8.  v25:= v10;
  #L1d40dc.  call temp:= `a`(v26) @signature `Lc/f/b/k/g$a;.a:(Lc/f/b/k/g$a;)Lc/f/b/k/e;` @kind static;
  #L1d40e2.  v9:= temp @kind object;
  #L1d40e4.  v15:= v9.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d40e8.  v9:= v26 @kind object;
  #L1d40ec.  v10:= v30;
  #L1d40f0.  v11:= v4 @kind object;
  #L1d40f2.  v12:= v5 @kind object;
  #L1d40f4.  v13:= v24 @kind object;
  #L1d40f8.  v14:= v6 @kind object;
  #L1d40fa.  v4:= v15 @kind object;
  #L1d40fc.  v15:= v7;
  #L1d40fe.  v16:= v22;
  #L1d4102.  v17:= v25;
  #L1d4106.  v18:= v23;
  #L1d410a.  v19:= v31;
  #L1d410e.  call `setup`(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19) @signature `Lc/f/b/k/g$a;.setup:(ILc/f/b/k/d;Lc/f/b/k/d;Lc/f/b/k/d;Lc/f/b/k/d;IIIII)V` @kind virtual;
  #L1d4114.  call temp:= `getWidth`(v26) @signature `Lc/f/b/k/g$a;.getWidth:()I` @kind virtual;
  #L1d411a.  v7:= temp;
  #L1d411c.  v2:= v2 + v7 @kind int;
  #L1d411e.  call temp:= `getHeight`(v26) @signature `Lc/f/b/k/g$a;.getHeight:()I` @kind virtual;
  #L1d4124.  v7:= temp;
  #L1d4126.  call temp:= `max`(v3, v7) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1d412c.  v3:= temp;
  #L1d412e.  if v0 <= 0 then goto L1d4138;
  #L1d4132.  v7:= v8.`c.f.b.k.g.O0` @type ^`int`;
  #L1d4136.  v2:= v2 + v7 @kind int;
  #L1d4138.  v7:= 0I;
  #L1d413a.  v0:= v0 + 1;
  #L1d413e.  v15:= v31;
  #L1d4142.  goto L1d3fda;
  #L1d4146.  v32[v21]:= v2;
  #L1d414a.  v32[v20]:= v3;
  #L1d414e.  return @kind void;
}
procedure `int` `c`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.c:(Lc/f/b/k/g;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d326c.  v0:= v0.`c.f.b.k.g.E0` @type ^`int`;
  #L1d3270.  return v0;
}
procedure `void` `c`(`c.f.b.k.g` v22 @kind this, `c.f.b.k.e`[] v23 @kind object, `int` v24 , `int` v25 , `int` v26 , `int`[] v27 @kind object) @signature `Lc/f/b/k/g;.c:([Lc/f/b/k/e;III[I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L1d4160.  v8:= v22 @kind object;
  #L1d4164.  v9:= v24;
  #L1d4168.  if v9 != 0 then goto L1d416e;
  #L1d416c.  return @kind void;
  #L1d416e.  v0:= v8.`c.f.b.k.g.V0` @type ^`java.util.ArrayList` @kind object;
  #L1d4172.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1d4178.  v0:= temp;
  #L1d417a.  v10:= 0I;
  #L1d417c.  if v0 != 0 then goto L1d41b4;
  #L1d4180.  v11:= new `c.f.b.k.g$a`;
  #L1d4184.  v3:= v8.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d4188.  v4:= v8.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d418c.  v5:= v8.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d4190.  v6:= v8.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d4194.  v0:= v11 @kind object;
  #L1d4196.  v1:= v22 @kind object;
  #L1d419a.  v2:= v25;
  #L1d419e.  v7:= v26;
  #L1d41a2.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lc/f/b/k/g$a;.<init>:(Lc/f/b/k/g;ILc/f/b/k/d;Lc/f/b/k/d;Lc/f/b/k/d;Lc/f/b/k/d;I)V` @kind direct;
  #L1d41a8.  v0:= v8.`c.f.b.k.g.V0` @type ^`java.util.ArrayList` @kind object;
  #L1d41ac.  call temp:= `add`(v0, v11) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1d41b2.  goto L1d420e;
  #L1d41b4.  v0:= v8.`c.f.b.k.g.V0` @type ^`java.util.ArrayList` @kind object;
  #L1d41b8.  call temp:= `get`(v0, v10) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d41be.  v0:= temp @kind object;
  #L1d41c0.  v0:= (`c.f.b.k.g$a`) v0 @kind object;
  #L1d41c4.  call `clear`(v0) @signature `Lc/f/b/k/g$a;.clear:()V` @kind virtual;
  #L1d41ca.  v13:= v8.`c.f.b.k.e.F` @type ^`c.f.b.k.d` @kind object;
  #L1d41ce.  v14:= v8.`c.f.b.k.e.G` @type ^`c.f.b.k.d` @kind object;
  #L1d41d2.  v15:= v8.`c.f.b.k.e.H` @type ^`c.f.b.k.d` @kind object;
  #L1d41d6.  v1:= v8.`c.f.b.k.e.I` @type ^`c.f.b.k.d` @kind object;
  #L1d41da.  call temp:= `getPaddingLeft`(v22) @signature `Lc/f/b/k/l;.getPaddingLeft:()I` @kind virtual;
  #L1d41e0.  v17:= temp;
  #L1d41e2.  call temp:= `getPaddingTop`(v22) @signature `Lc/f/b/k/l;.getPaddingTop:()I` @kind virtual;
  #L1d41e8.  v18:= temp;
  #L1d41ea.  call temp:= `getPaddingRight`(v22) @signature `Lc/f/b/k/l;.getPaddingRight:()I` @kind virtual;
  #L1d41f0.  v19:= temp;
  #L1d41f2.  call temp:= `getPaddingBottom`(v22) @signature `Lc/f/b/k/l;.getPaddingBottom:()I` @kind virtual;
  #L1d41f8.  v20:= temp;
  #L1d41fa.  v11:= v0 @kind object;
  #L1d41fc.  v12:= v25;
  #L1d4200.  v16:= v1 @kind object;
  #L1d4204.  v21:= v26;
  #L1d4208.  call `setup`(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21) @signature `Lc/f/b/k/g$a;.setup:(ILc/f/b/k/d;Lc/f/b/k/d;Lc/f/b/k/d;Lc/f/b/k/d;IIIII)V` @kind virtual;
  #L1d420e.  v0:= 0I;
  #L1d4210.  if v0 >= v9 then goto L1d4224;
  #L1d4214.  v1:= v23[v0] @kind object;
  #L1d4218.  call `add`(v11, v1) @signature `Lc/f/b/k/g$a;.add:(Lc/f/b/k/e;)V` @kind virtual;
  #L1d421e.  v0:= v0 + 1;
  #L1d4222.  goto L1d4210;
  #L1d4224.  call temp:= `getWidth`(v11) @signature `Lc/f/b/k/g$a;.getWidth:()I` @kind virtual;
  #L1d422a.  v0:= temp;
  #L1d422c.  v27[v10]:= v0;
  #L1d4230.  call temp:= `getHeight`(v11) @signature `Lc/f/b/k/g$a;.getHeight:()I` @kind virtual;
  #L1d4236.  v0:= temp;
  #L1d4238.  v1:= 1I;
  #L1d423a.  v27[v1]:= v0;
  #L1d423e.  return @kind void;
}
procedure `float` `d`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.d:(Lc/f/b/k/g;)F` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d31ac.  v0:= v0.`c.f.b.k.g.K0` @type ^`float`;
  #L1d31b0.  return v0;
}
procedure `int` `e`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.e:(Lc/f/b/k/g;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d3284.  v0:= v0.`c.f.b.k.g.G0` @type ^`int`;
  #L1d3288.  return v0;
}
procedure `float` `f`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.f:(Lc/f/b/k/g;)F` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d31c4.  v0:= v0.`c.f.b.k.g.M0` @type ^`float`;
  #L1d31c8.  return v0;
}
procedure `float` `g`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.g:(Lc/f/b/k/g;)F` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d31dc.  v0:= v0.`c.f.b.k.g.J0` @type ^`float`;
  #L1d31e0.  return v0;
}
procedure `int` `h`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.h:(Lc/f/b/k/g;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d329c.  v0:= v0.`c.f.b.k.g.F0` @type ^`int`;
  #L1d32a0.  return v0;
}
procedure `float` `i`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.i:(Lc/f/b/k/g;)F` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d31f4.  v0:= v0.`c.f.b.k.g.L0` @type ^`float`;
  #L1d31f8.  return v0;
}
procedure `int` `j`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.j:(Lc/f/b/k/g;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d32b4.  v0:= v0.`c.f.b.k.g.H0` @type ^`int`;
  #L1d32b8.  return v0;
}
procedure `float` `k`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.k:(Lc/f/b/k/g;)F` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d320c.  v0:= v0.`c.f.b.k.g.N0` @type ^`float`;
  #L1d3210.  return v0;
}
procedure `int` `l`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.l:(Lc/f/b/k/g;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d32cc.  v0:= v0.`c.f.b.k.g.Q0` @type ^`int`;
  #L1d32d0.  return v0;
}
procedure `int` `m`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.m:(Lc/f/b/k/g;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d331c.  v0:= v0.`c.f.b.k.g.a1` @type ^`int`;
  #L1d3320.  return v0;
}
procedure `c.f.b.k.e`[] `n`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.n:(Lc/f/b/k/g;)[Lc/f/b/k/e;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d3194.  v0:= v0.`c.f.b.k.g.Z0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d3198.  return v0 @kind object;
}
procedure `int` `o`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.o:(Lc/f/b/k/g;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d3334.  v0:= v0.`c.f.b.k.g.D0` @type ^`int`;
  #L1d3338.  return v0;
}
procedure `int` `p`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.p:(Lc/f/b/k/g;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d334c.  v0:= v0.`c.f.b.k.g.R0` @type ^`int`;
  #L1d3350.  return v0;
}
procedure `int` `q`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.q:(Lc/f/b/k/g;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d3364.  v0:= v0.`c.f.b.k.g.C0` @type ^`int`;
  #L1d3368.  return v0;
}
procedure `float` `r`(`c.f.b.k.g` v0 @kind object) @signature `Lc/f/b/k/g;.r:(Lc/f/b/k/g;)F` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1d3224.  v0:= v0.`c.f.b.k.g.I0` @type ^`float`;
  #L1d3228.  return v0;
}
procedure `void` `addToSolver`(`c.f.b.k.g` v5 @kind this, `c.f.b.d` v6 @kind object, `boolean` v7 ) @signature `Lc/f/b/k/g;.addToSolver:(Lc/f/b/d;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d3574.  call `addToSolver`(v5, v6, v7) @signature `Lc/f/b/k/e;.addToSolver:(Lc/f/b/d;Z)V` @kind super;
  #L1d357a.  call temp:= `getParent`(v5) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1d3580.  v6:= temp @kind object;
  #L1d3582.  v7:= 0I;
  #L1d3584.  if v6 == 0 then goto L1d359e;
  #L1d3588.  call temp:= `getParent`(v5) @signature `Lc/f/b/k/e;.getParent:()Lc/f/b/k/e;` @kind virtual;
  #L1d358e.  v6:= temp @kind object;
  #L1d3590.  v6:= (`c.f.b.k.f`) v6 @kind object;
  #L1d3594.  call temp:= `isRtl`(v6) @signature `Lc/f/b/k/f;.isRtl:()Z` @kind virtual;
  #L1d359a.  v6:= temp;
  #L1d359c.  goto L1d35a0;
  #L1d359e.  v6:= 0I;
  #L1d35a0.  v0:= v5.`c.f.b.k.g.S0` @type ^`int`;
  #L1d35a4.  v1:= 1I;
  #L1d35a6.  if v0 == 0 then goto L1d35fa;
  #L1d35aa.  if v0 == v1 then goto L1d35be;
  #L1d35ae.  v1:= 2I;
  #L1d35b0.  if v0 == v1 then goto L1d35b6;
  #L1d35b4.  goto L1d3620;
  #L1d35b6.  call `a`(v5, v6) @signature `Lc/f/b/k/g;.a:(Z)V` @kind direct;
  #L1d35bc.  goto L1d3620;
  #L1d35be.  v0:= v5.`c.f.b.k.g.V0` @type ^`java.util.ArrayList` @kind object;
  #L1d35c2.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1d35c8.  v0:= temp;
  #L1d35ca.  v2:= 0I;
  #L1d35cc.  if v2 >= v0 then goto L1d3620;
  #L1d35d0.  v3:= v5.`c.f.b.k.g.V0` @type ^`java.util.ArrayList` @kind object;
  #L1d35d4.  call temp:= `get`(v3, v2) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d35da.  v3:= temp @kind object;
  #L1d35dc.  v3:= (`c.f.b.k.g$a`) v3 @kind object;
  #L1d35e0.  v4:= v0 + -1;
  #L1d35e4.  if v2 != v4 then goto L1d35ec;
  #L1d35e8.  v4:= 1I;
  #L1d35ea.  goto L1d35ee;
  #L1d35ec.  v4:= 0I;
  #L1d35ee.  call `createConstraints`(v3, v6, v2, v4) @signature `Lc/f/b/k/g$a;.createConstraints:(ZIZ)V` @kind virtual;
  #L1d35f4.  v2:= v2 + 1;
  #L1d35f8.  goto L1d35cc;
  #L1d35fa.  v0:= v5.`c.f.b.k.g.V0` @type ^`java.util.ArrayList` @kind object;
  #L1d35fe.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1d3604.  v0:= temp;
  #L1d3606.  if v0 <= 0 then goto L1d3620;
  #L1d360a.  v0:= v5.`c.f.b.k.g.V0` @type ^`java.util.ArrayList` @kind object;
  #L1d360e.  call temp:= `get`(v0, v7) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1d3614.  v0:= temp @kind object;
  #L1d3616.  v0:= (`c.f.b.k.g$a`) v0 @kind object;
  #L1d361a.  call `createConstraints`(v0, v6, v7, v1) @signature `Lc/f/b/k/g$a;.createConstraints:(ZIZ)V` @kind virtual;
  #L1d3620.  call `needsCallbackFromSolver`(v5, v7) @signature `Lc/f/b/k/l;.needsCallbackFromSolver:(Z)V` @kind virtual;
  #L1d3626.  return @kind void;
}
procedure `void` `measure`(`c.f.b.k.g` v19 @kind this, `int` v20 , `int` v21 , `int` v22 , `int` v23 ) @signature `Lc/f/b/k/g;.measure:(IIII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L1d3878.  v6:= v19 @kind object;
  #L1d387c.  v7:= v20;
  #L1d3880.  v8:= v21;
  #L1d3884.  v9:= v22;
  #L1d3888.  v10:= v23;
  #L1d388c.  v0:= v6.`c.f.b.k.j.q0` @type ^`int`;
  #L1d3890.  v11:= 0I;
  #L1d3892.  if v0 <= 0 then goto L1d38b0;
  #L1d3896.  call temp:= `measureChildren`(v19) @signature `Lc/f/b/k/l;.measureChildren:()Z` @kind virtual;
  #L1d389c.  v0:= temp;
  #L1d389e.  if v0 != 0 then goto L1d38b0;
  #L1d38a2.  call `setMeasure`(v6, v11, v11) @signature `Lc/f/b/k/l;.setMeasure:(II)V` @kind virtual;
  #L1d38a8.  call `needsCallbackFromSolver`(v6, v11) @signature `Lc/f/b/k/l;.needsCallbackFromSolver:(Z)V` @kind virtual;
  #L1d38ae.  return @kind void;
  #L1d38b0.  call temp:= `getPaddingLeft`(v19) @signature `Lc/f/b/k/l;.getPaddingLeft:()I` @kind virtual;
  #L1d38b6.  v12:= temp;
  #L1d38b8.  call temp:= `getPaddingRight`(v19) @signature `Lc/f/b/k/l;.getPaddingRight:()I` @kind virtual;
  #L1d38be.  v13:= temp;
  #L1d38c0.  call temp:= `getPaddingTop`(v19) @signature `Lc/f/b/k/l;.getPaddingTop:()I` @kind virtual;
  #L1d38c6.  v14:= temp;
  #L1d38c8.  call temp:= `getPaddingBottom`(v19) @signature `Lc/f/b/k/l;.getPaddingBottom:()I` @kind virtual;
  #L1d38ce.  v15:= temp;
  #L1d38d0.  v0:= 2I;
  #L1d38d2.  v5:= new `int`[v0];
  #L1d38d6.  v1:= v8 - v12 @kind int;
  #L1d38da.  v1:= v1 - v13 @kind int;
  #L1d38dc.  v2:= v6.`c.f.b.k.g.U0` @type ^`int`;
  #L1d38e0.  v4:= 1I;
  #L1d38e2.  if v2 != v4 then goto L1d38ec;
  #L1d38e6.  v1:= v10 - v14 @kind int;
  #L1d38ea.  v1:= v1 - v15 @kind int;
  #L1d38ec.  v16:= v1;
  #L1d38f0.  v1:= v6.`c.f.b.k.g.U0` @type ^`int`;
  #L1d38f4.  v2:= -1I;
  #L1d38f6.  if v1 != 0 then goto L1d3914;
  #L1d38fa.  v1:= v6.`c.f.b.k.g.C0` @type ^`int`;
  #L1d38fe.  if v1 != v2 then goto L1d3906;
  #L1d3902.  v6.`c.f.b.k.g.C0` @type ^`int` := v11;
  #L1d3906.  v1:= v6.`c.f.b.k.g.D0` @type ^`int`;
  #L1d390a.  if v1 != v2 then goto L1d392c;
  #L1d390e.  v6.`c.f.b.k.g.D0` @type ^`int` := v11;
  #L1d3912.  goto L1d392c;
  #L1d3914.  v1:= v6.`c.f.b.k.g.C0` @type ^`int`;
  #L1d3918.  if v1 != v2 then goto L1d3920;
  #L1d391c.  v6.`c.f.b.k.g.C0` @type ^`int` := v11;
  #L1d3920.  v1:= v6.`c.f.b.k.g.D0` @type ^`int`;
  #L1d3924.  if v1 != v2 then goto L1d392c;
  #L1d3928.  v6.`c.f.b.k.g.D0` @type ^`int` := v11;
  #L1d392c.  v1:= v6.`c.f.b.k.j.p0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d3930.  v2:= 0I;
  #L1d3932.  v3:= 0I;
  #L1d3934.  v11:= v6.`c.f.b.k.j.q0` @type ^`int`;
  #L1d3938.  v0:= 8I;
  #L1d393c.  if v2 >= v11 then goto L1d3960;
  #L1d3940.  v11:= v6.`c.f.b.k.j.p0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d3944.  v11:= v11[v2] @kind object;
  #L1d3948.  call temp:= `getVisibility`(v11) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d394e.  v11:= temp;
  #L1d3950.  if v11 != v0 then goto L1d3958;
  #L1d3954.  v3:= v3 + 1;
  #L1d3958.  v2:= v2 + 1;
  #L1d395c.  v0:= 2I;
  #L1d395e.  goto L1d3934;
  #L1d3960.  if v3 <= 0 then goto L1d399e;
  #L1d3964.  v11:= v11 - v3 @kind int;
  #L1d3966.  v1:= new `c.f.b.k.e`[v11];
  #L1d396a.  v2:= 0I;
  #L1d396c.  v3:= 0I;
  #L1d396e.  v11:= v6.`c.f.b.k.j.q0` @type ^`int`;
  #L1d3972.  if v2 >= v11 then goto L1d399a;
  #L1d3976.  v11:= v6.`c.f.b.k.j.p0` @type ^`c.f.b.k.e`[] @kind object;
  #L1d397a.  v11:= v11[v2] @kind object;
  #L1d397e.  call temp:= `getVisibility`(v11) @signature `Lc/f/b/k/e;.getVisibility:()I` @kind virtual;
  #L1d3984.  v4:= temp;
  #L1d3986.  if v4 == v0 then goto L1d3992;
  #L1d398a.  v1[v3]:= v11 @kind object;
  #L1d398e.  v3:= v3 + 1;
  #L1d3992.  v2:= v2 + 1;
  #L1d3996.  v4:= 1I;
  #L1d3998.  goto L1d396e;
  #L1d399a.  v2:= v3;
  #L1d399c.  goto L1d39a0;
  #L1d399e.  v2:= v11;
  #L1d39a0.  v6.`c.f.b.k.g.Z0` @type ^`c.f.b.k.e`[] := v1 @kind object;
  #L1d39a4.  v6.`c.f.b.k.g.a1` @type ^`int` := v2;
  #L1d39a8.  v0:= v6.`c.f.b.k.g.S0` @type ^`int`;
  #L1d39ac.  if v0 == 0 then goto L1d39fc;
  #L1d39b0.  v4:= 1I;
  #L1d39b2.  if v0 == v4 then goto L1d39e2;
  #L1d39b6.  v3:= 2I;
  #L1d39b8.  if v0 == v3 then goto L1d39c8;
  #L1d39bc.  v17:= v5 @kind object;
  #L1d39c0.  v11:= 1I;
  #L1d39c2.  v18:= 0I;
  #L1d39c6.  goto L1d3a16;
  #L1d39c8.  v3:= v6.`c.f.b.k.g.U0` @type ^`int`;
  #L1d39cc.  v0:= v19 @kind object;
  #L1d39d0.  v11:= 1I;
  #L1d39d2.  v4:= v16;
  #L1d39d6.  v17:= v5 @kind object;
  #L1d39da.  call `a`(v0, v1, v2, v3, v4, v5) @signature `Lc/f/b/k/g;.a:([Lc/f/b/k/e;III[I)V` @kind direct;
  #L1d39e0.  goto L1d39c2;
  #L1d39e2.  v17:= v5 @kind object;
  #L1d39e6.  v11:= 1I;
  #L1d39e8.  v3:= v6.`c.f.b.k.g.U0` @type ^`int`;
  #L1d39ec.  v0:= v19 @kind object;
  #L1d39f0.  v4:= v16;
  #L1d39f4.  call `b`(v0, v1, v2, v3, v4, v5) @signature `Lc/f/b/k/g;.b:([Lc/f/b/k/e;III[I)V` @kind direct;
  #L1d39fa.  goto L1d39c2;
  #L1d39fc.  v17:= v5 @kind object;
  #L1d3a00.  v11:= 1I;
  #L1d3a02.  v3:= v6.`c.f.b.k.g.U0` @type ^`int`;
  #L1d3a06.  v0:= v19 @kind object;
  #L1d3a0a.  v4:= v16;
  #L1d3a0e.  call `c`(v0, v1, v2, v3, v4, v5) @signature `Lc/f/b/k/g;.c:([Lc/f/b/k/e;III[I)V` @kind direct;
  #L1d3a14.  goto L1d39c2;
  #L1d3a16.  v0:= v17[v18];
  #L1d3a1a.  v0:= v0 + v12 @kind int;
  #L1d3a1c.  v0:= v0 + v13 @kind int;
  #L1d3a1e.  v1:= v17[v11];
  #L1d3a22.  v1:= v1 + v14 @kind int;
  #L1d3a24.  v1:= v1 + v15 @kind int;
  #L1d3a26.  v2:= -2147483648I;
  #L1d3a2a.  v3:= 2.0F;
  #L1d3a2e.  if v7 != v3 then goto L1d3a36;
  #L1d3a32.  v0:= v8;
  #L1d3a34.  goto L1d3a4c;
  #L1d3a36.  if v7 != v2 then goto L1d3a44;
  #L1d3a3a.  call temp:= `min`(v0, v8) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d3a40.  v0:= temp;
  #L1d3a42.  goto L1d3a4c;
  #L1d3a44.  if v7 != 0 then goto L1d3a4a;
  #L1d3a48.  goto L1d3a4c;
  #L1d3a4a.  v0:= 0I;
  #L1d3a4c.  if v9 != v3 then goto L1d3a54;
  #L1d3a50.  v1:= v10;
  #L1d3a52.  goto L1d3a6a;
  #L1d3a54.  if v9 != v2 then goto L1d3a62;
  #L1d3a58.  call temp:= `min`(v1, v10) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d3a5e.  v1:= temp;
  #L1d3a60.  goto L1d3a6a;
  #L1d3a62.  if v9 != 0 then goto L1d3a68;
  #L1d3a66.  goto L1d3a6a;
  #L1d3a68.  v1:= 0I;
  #L1d3a6a.  call `setMeasure`(v6, v0, v1) @signature `Lc/f/b/k/l;.setMeasure:(II)V` @kind virtual;
  #L1d3a70.  call `setWidth`(v6, v0) @signature `Lc/f/b/k/e;.setWidth:(I)V` @kind virtual;
  #L1d3a76.  call `setHeight`(v6, v1) @signature `Lc/f/b/k/e;.setHeight:(I)V` @kind virtual;
  #L1d3a7c.  v0:= v6.`c.f.b.k.j.q0` @type ^`int`;
  #L1d3a80.  if v0 <= 0 then goto L1d3a86;
  #L1d3a84.  goto L1d3a88;
  #L1d3a86.  v11:= 0I;
  #L1d3a88.  call `needsCallbackFromSolver`(v6, v11) @signature `Lc/f/b/k/l;.needsCallbackFromSolver:(Z)V` @kind virtual;
  #L1d3a8e.  return @kind void;
}
procedure `void` `setFirstHorizontalBias`(`c.f.b.k.g` v0 @kind this, `float` v1 ) @signature `Lc/f/b/k/g;.setFirstHorizontalBias:(F)V` @AccessFlag PUBLIC {
    temp;

  #L1d4250.  v0.`c.f.b.k.g.K0` @type ^`float` := v1;
  #L1d4254.  return @kind void;
}
procedure `void` `setFirstHorizontalStyle`(`c.f.b.k.g` v0 @kind this, `int` v1 ) @signature `Lc/f/b/k/g;.setFirstHorizontalStyle:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1d4268.  v0.`c.f.b.k.g.E0` @type ^`int` := v1;
  #L1d426c.  return @kind void;
}
procedure `void` `setFirstVerticalBias`(`c.f.b.k.g` v0 @kind this, `float` v1 ) @signature `Lc/f/b/k/g;.setFirstVerticalBias:(F)V` @AccessFlag PUBLIC {
    temp;

  #L1d4280.  v0.`c.f.b.k.g.L0` @type ^`float` := v1;
  #L1d4284.  return @kind void;
}
procedure `void` `setFirstVerticalStyle`(`c.f.b.k.g` v0 @kind this, `int` v1 ) @signature `Lc/f/b/k/g;.setFirstVerticalStyle:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1d4298.  v0.`c.f.b.k.g.F0` @type ^`int` := v1;
  #L1d429c.  return @kind void;
}
procedure `void` `setHorizontalAlign`(`c.f.b.k.g` v0 @kind this, `int` v1 ) @signature `Lc/f/b/k/g;.setHorizontalAlign:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1d42b0.  v0.`c.f.b.k.g.Q0` @type ^`int` := v1;
  #L1d42b4.  return @kind void;
}
procedure `void` `setHorizontalBias`(`c.f.b.k.g` v0 @kind this, `float` v1 ) @signature `Lc/f/b/k/g;.setHorizontalBias:(F)V` @AccessFlag PUBLIC {
    temp;

  #L1d42c8.  v0.`c.f.b.k.g.I0` @type ^`float` := v1;
  #L1d42cc.  return @kind void;
}
procedure `void` `setHorizontalGap`(`c.f.b.k.g` v0 @kind this, `int` v1 ) @signature `Lc/f/b/k/g;.setHorizontalGap:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1d42e0.  v0.`c.f.b.k.g.O0` @type ^`int` := v1;
  #L1d42e4.  return @kind void;
}
procedure `void` `setHorizontalStyle`(`c.f.b.k.g` v0 @kind this, `int` v1 ) @signature `Lc/f/b/k/g;.setHorizontalStyle:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1d42f8.  v0.`c.f.b.k.g.C0` @type ^`int` := v1;
  #L1d42fc.  return @kind void;
}
procedure `void` `setLastHorizontalBias`(`c.f.b.k.g` v0 @kind this, `float` v1 ) @signature `Lc/f/b/k/g;.setLastHorizontalBias:(F)V` @AccessFlag PUBLIC {
    temp;

  #L1d4310.  v0.`c.f.b.k.g.M0` @type ^`float` := v1;
  #L1d4314.  return @kind void;
}
procedure `void` `setLastHorizontalStyle`(`c.f.b.k.g` v0 @kind this, `int` v1 ) @signature `Lc/f/b/k/g;.setLastHorizontalStyle:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1d4328.  v0.`c.f.b.k.g.G0` @type ^`int` := v1;
  #L1d432c.  return @kind void;
}
procedure `void` `setLastVerticalBias`(`c.f.b.k.g` v0 @kind this, `float` v1 ) @signature `Lc/f/b/k/g;.setLastVerticalBias:(F)V` @AccessFlag PUBLIC {
    temp;

  #L1d4340.  v0.`c.f.b.k.g.N0` @type ^`float` := v1;
  #L1d4344.  return @kind void;
}
procedure `void` `setLastVerticalStyle`(`c.f.b.k.g` v0 @kind this, `int` v1 ) @signature `Lc/f/b/k/g;.setLastVerticalStyle:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1d4358.  v0.`c.f.b.k.g.H0` @type ^`int` := v1;
  #L1d435c.  return @kind void;
}
procedure `void` `setMaxElementsWrap`(`c.f.b.k.g` v0 @kind this, `int` v1 ) @signature `Lc/f/b/k/g;.setMaxElementsWrap:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1d4370.  v0.`c.f.b.k.g.T0` @type ^`int` := v1;
  #L1d4374.  return @kind void;
}
procedure `void` `setOrientation`(`c.f.b.k.g` v0 @kind this, `int` v1 ) @signature `Lc/f/b/k/g;.setOrientation:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1d4388.  v0.`c.f.b.k.g.U0` @type ^`int` := v1;
  #L1d438c.  return @kind void;
}
procedure `void` `setVerticalAlign`(`c.f.b.k.g` v0 @kind this, `int` v1 ) @signature `Lc/f/b/k/g;.setVerticalAlign:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1d43a0.  v0.`c.f.b.k.g.R0` @type ^`int` := v1;
  #L1d43a4.  return @kind void;
}
procedure `void` `setVerticalBias`(`c.f.b.k.g` v0 @kind this, `float` v1 ) @signature `Lc/f/b/k/g;.setVerticalBias:(F)V` @AccessFlag PUBLIC {
    temp;

  #L1d43b8.  v0.`c.f.b.k.g.J0` @type ^`float` := v1;
  #L1d43bc.  return @kind void;
}
procedure `void` `setVerticalGap`(`c.f.b.k.g` v0 @kind this, `int` v1 ) @signature `Lc/f/b/k/g;.setVerticalGap:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1d43d0.  v0.`c.f.b.k.g.P0` @type ^`int` := v1;
  #L1d43d4.  return @kind void;
}
procedure `void` `setVerticalStyle`(`c.f.b.k.g` v0 @kind this, `int` v1 ) @signature `Lc/f/b/k/g;.setVerticalStyle:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1d43e8.  v0.`c.f.b.k.g.D0` @type ^`int` := v1;
  #L1d43ec.  return @kind void;
}
procedure `void` `setWrapMode`(`c.f.b.k.g` v0 @kind this, `int` v1 ) @signature `Lc/f/b/k/g;.setWrapMode:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1d4400.  v0.`c.f.b.k.g.S0` @type ^`int` := v1;
  #L1d4404.  return @kind void;
}
