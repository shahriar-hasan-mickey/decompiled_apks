record `c.f.b.j` @kind class @AccessFlag PUBLIC extends `c.f.b.b$a` @kind interface {
  `int` `c.f.b.j.a` @AccessFlag PRIVATE;
  `int` `c.f.b.j.b` @AccessFlag PRIVATE;
  `int`[] `c.f.b.j.c` @AccessFlag ;
  `int`[] `c.f.b.j.d` @AccessFlag ;
  `int`[] `c.f.b.j.e` @AccessFlag ;
  `float`[] `c.f.b.j.f` @AccessFlag ;
  `int`[] `c.f.b.j.g` @AccessFlag ;
  `int`[] `c.f.b.j.h` @AccessFlag ;
  `int` `c.f.b.j.i` @AccessFlag ;
  `int` `c.f.b.j.j` @AccessFlag ;
  `c.f.b.b` `c.f.b.j.k` @AccessFlag PRIVATE_FINAL;
  `c.f.b.c` `c.f.b.j.l` @AccessFlag PROTECTED_FINAL;
}
global `float` `@@c.f.b.j.m` @AccessFlag PRIVATE_STATIC;
procedure `void` `<init>`(`c.f.b.j` v2 @kind this, `c.f.b.b` v3 @kind object, `c.f.b.c` v4 @kind object) @signature `Lc/f/b/j;.<init>:(Lc/f/b/b;Lc/f/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1cb248.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1cb24e.  v0:= 16I;
  #L1cb252.  v2.`c.f.b.j.a` @type ^`int` := v0;
  #L1cb256.  v2.`c.f.b.j.b` @type ^`int` := v0;
  #L1cb25a.  v0:= v2.`c.f.b.j.a` @type ^`int`;
  #L1cb25e.  v1:= new `int`[v0];
  #L1cb262.  v2.`c.f.b.j.c` @type ^`int`[] := v1 @kind object;
  #L1cb266.  v1:= new `int`[v0];
  #L1cb26a.  v2.`c.f.b.j.d` @type ^`int`[] := v1 @kind object;
  #L1cb26e.  v1:= new `int`[v0];
  #L1cb272.  v2.`c.f.b.j.e` @type ^`int`[] := v1 @kind object;
  #L1cb276.  v1:= new `float`[v0];
  #L1cb27a.  v2.`c.f.b.j.f` @type ^`float`[] := v1 @kind object;
  #L1cb27e.  v1:= new `int`[v0];
  #L1cb282.  v2.`c.f.b.j.g` @type ^`int`[] := v1 @kind object;
  #L1cb286.  v0:= new `int`[v0];
  #L1cb28a.  v2.`c.f.b.j.h` @type ^`int`[] := v0 @kind object;
  #L1cb28e.  v0:= 0I;
  #L1cb290.  v2.`c.f.b.j.i` @type ^`int` := v0;
  #L1cb294.  v0:= -1I;
  #L1cb296.  v2.`c.f.b.j.j` @type ^`int` := v0;
  #L1cb29a.  v2.`c.f.b.j.k` @type ^`c.f.b.b` := v3 @kind object;
  #L1cb29e.  v2.`c.f.b.j.l` @type ^`c.f.b.c` := v4 @kind object;
  #L1cb2a2.  call `clear`(v2) @signature `Lc/f/b/j;.clear:()V` @kind virtual;
  #L1cb2a8.  return @kind void;
}
procedure `int` `a`(`c.f.b.j` v3 @kind this) @signature `Lc/f/b/j;.a:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1caf6c.  v0:= 0I;
  #L1caf6e.  v1:= v3.`c.f.b.j.a` @type ^`int`;
  #L1caf72.  v2:= -1I;
  #L1caf74.  if v0 >= v1 then goto L1caf8c;
  #L1caf78.  v1:= v3.`c.f.b.j.e` @type ^`int`[] @kind object;
  #L1caf7c.  v1:= v1[v0];
  #L1caf80.  if v1 != v2 then goto L1caf86;
  #L1caf84.  return v0;
  #L1caf86.  v0:= v0 + 1;
  #L1caf8a.  goto L1caf6e;
  #L1caf8c.  return v2;
}
procedure `void` `a`(`c.f.b.j` v2 @kind this, `int` v3 , `c.f.b.i` v4 @kind object, `float` v5 ) @signature `Lc/f/b/j;.a:(ILc/f/b/i;F)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1cb384.  v0:= v2.`c.f.b.j.e` @type ^`int`[] @kind object;
  #L1cb388.  v1:= v4.`c.f.b.i.c` @type ^`int`;
  #L1cb38c.  v0[v3]:= v1;
  #L1cb390.  v0:= v2.`c.f.b.j.f` @type ^`float`[] @kind object;
  #L1cb394.  v0[v3]:= v5;
  #L1cb398.  v5:= v2.`c.f.b.j.g` @type ^`int`[] @kind object;
  #L1cb39c.  v0:= -1I;
  #L1cb39e.  v5[v3]:= v0;
  #L1cb3a2.  v5:= v2.`c.f.b.j.h` @type ^`int`[] @kind object;
  #L1cb3a6.  v5[v3]:= v0;
  #L1cb3aa.  v3:= v2.`c.f.b.j.k` @type ^`c.f.b.b` @kind object;
  #L1cb3ae.  call `addToRow`(v4, v3) @signature `Lc/f/b/i;.addToRow:(Lc/f/b/b;)V` @kind virtual;
  #L1cb3b4.  v3:= v4.`c.f.b.i.m` @type ^`int`;
  #L1cb3b8.  v3:= v3 + 1;
  #L1cb3bc.  v4.`c.f.b.i.m` @type ^`int` := v3;
  #L1cb3c0.  v3:= v2.`c.f.b.j.i` @type ^`int`;
  #L1cb3c4.  v3:= v3 + 1;
  #L1cb3c8.  v2.`c.f.b.j.i` @type ^`int` := v3;
  #L1cb3cc.  return @kind void;
}
procedure `void` `a`(`c.f.b.j` v5 @kind this, `c.f.b.i` v6 @kind object) @signature `Lc/f/b/j;.a:(Lc/f/b/i;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1cb6cc.  v6:= v6.`c.f.b.i.c` @type ^`int`;
  #L1cb6d0.  v0:= v5.`c.f.b.j.b` @type ^`int`;
  #L1cb6d4.  v0:= v6 %% v0 @kind int;
  #L1cb6d8.  v1:= v5.`c.f.b.j.c` @type ^`int`[] @kind object;
  #L1cb6dc.  v2:= v1[v0];
  #L1cb6e0.  v3:= -1I;
  #L1cb6e2.  if v2 != v3 then goto L1cb6e8;
  #L1cb6e6.  return @kind void;
  #L1cb6e8.  v4:= v5.`c.f.b.j.e` @type ^`int`[] @kind object;
  #L1cb6ec.  v4:= v4[v2];
  #L1cb6f0.  if v4 != v6 then goto L1cb706;
  #L1cb6f4.  v6:= v5.`c.f.b.j.d` @type ^`int`[] @kind object;
  #L1cb6f8.  v4:= v6[v2];
  #L1cb6fc.  v1[v0]:= v4;
  #L1cb700.  v6[v2]:= v3;
  #L1cb704.  goto L1cb74c;
  #L1cb706.  v0:= v5.`c.f.b.j.d` @type ^`int`[] @kind object;
  #L1cb70a.  v1:= v0[v2];
  #L1cb70e.  if v1 == v3 then goto L1cb728;
  #L1cb712.  v1:= v5.`c.f.b.j.e` @type ^`int`[] @kind object;
  #L1cb716.  v4:= v0[v2];
  #L1cb71a.  v1:= v1[v4];
  #L1cb71e.  if v1 == v6 then goto L1cb728;
  #L1cb722.  v2:= v0[v2];
  #L1cb726.  goto L1cb706;
  #L1cb728.  v0:= v5.`c.f.b.j.d` @type ^`int`[] @kind object;
  #L1cb72c.  v1:= v0[v2];
  #L1cb730.  if v1 == v3 then goto L1cb74c;
  #L1cb734.  v4:= v5.`c.f.b.j.e` @type ^`int`[] @kind object;
  #L1cb738.  v4:= v4[v1];
  #L1cb73c.  if v4 != v6 then goto L1cb74c;
  #L1cb740.  v6:= v0[v1];
  #L1cb744.  v0[v2]:= v6;
  #L1cb748.  v0[v1]:= v3;
  #L1cb74c.  return @kind void;
}
procedure `void` `a`(`c.f.b.j` v3 @kind this, `c.f.b.i` v4 @kind object, `int` v5 ) @signature `Lc/f/b/j;.a:(Lc/f/b/i;I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1cb334.  v4:= v4.`c.f.b.i.c` @type ^`int`;
  #L1cb338.  v0:= v3.`c.f.b.j.b` @type ^`int`;
  #L1cb33c.  v4:= v4 %% v0 @kind int;
  #L1cb33e.  v0:= v3.`c.f.b.j.c` @type ^`int`[] @kind object;
  #L1cb342.  v1:= v0[v4];
  #L1cb346.  v2:= -1I;
  #L1cb348.  if v1 != v2 then goto L1cb352;
  #L1cb34c.  v0[v4]:= v5;
  #L1cb350.  goto L1cb368;
  #L1cb352.  v4:= v3.`c.f.b.j.d` @type ^`int`[] @kind object;
  #L1cb356.  v0:= v4[v1];
  #L1cb35a.  if v0 == v2 then goto L1cb364;
  #L1cb35e.  v1:= v4[v1];
  #L1cb362.  goto L1cb352;
  #L1cb364.  v4[v1]:= v5;
  #L1cb368.  v4:= v3.`c.f.b.j.d` @type ^`int`[] @kind object;
  #L1cb36c.  v4[v5]:= v2;
  #L1cb370.  return @kind void;
}
procedure `void` `b`(`c.f.b.j` v4 @kind this) @signature `Lc/f/b/j;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1cb4a0.  v0:= v4.`c.f.b.j.a` @type ^`int`;
  #L1cb4a4.  v0:= v0 * 2;
  #L1cb4a8.  v1:= v4.`c.f.b.j.e` @type ^`int`[] @kind object;
  #L1cb4ac.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L1cb4b2.  v1:= temp @kind object;
  #L1cb4b4.  v4.`c.f.b.j.e` @type ^`int`[] := v1 @kind object;
  #L1cb4b8.  v1:= v4.`c.f.b.j.f` @type ^`float`[] @kind object;
  #L1cb4bc.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([FI)[F` @kind static;
  #L1cb4c2.  v1:= temp @kind object;
  #L1cb4c4.  v4.`c.f.b.j.f` @type ^`float`[] := v1 @kind object;
  #L1cb4c8.  v1:= v4.`c.f.b.j.g` @type ^`int`[] @kind object;
  #L1cb4cc.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L1cb4d2.  v1:= temp @kind object;
  #L1cb4d4.  v4.`c.f.b.j.g` @type ^`int`[] := v1 @kind object;
  #L1cb4d8.  v1:= v4.`c.f.b.j.h` @type ^`int`[] @kind object;
  #L1cb4dc.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L1cb4e2.  v1:= temp @kind object;
  #L1cb4e4.  v4.`c.f.b.j.h` @type ^`int`[] := v1 @kind object;
  #L1cb4e8.  v1:= v4.`c.f.b.j.d` @type ^`int`[] @kind object;
  #L1cb4ec.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L1cb4f2.  v1:= temp @kind object;
  #L1cb4f4.  v4.`c.f.b.j.d` @type ^`int`[] := v1 @kind object;
  #L1cb4f8.  v1:= v4.`c.f.b.j.a` @type ^`int`;
  #L1cb4fc.  if v1 >= v0 then goto L1cb518;
  #L1cb500.  v2:= v4.`c.f.b.j.e` @type ^`int`[] @kind object;
  #L1cb504.  v3:= -1I;
  #L1cb506.  v2[v1]:= v3;
  #L1cb50a.  v2:= v4.`c.f.b.j.d` @type ^`int`[] @kind object;
  #L1cb50e.  v2[v1]:= v3;
  #L1cb512.  v1:= v1 + 1;
  #L1cb516.  goto L1cb4fc;
  #L1cb518.  v4.`c.f.b.j.a` @type ^`int` := v0;
  #L1cb51c.  return @kind void;
}
procedure `void` `b`(`c.f.b.j` v3 @kind this, `int` v4 , `c.f.b.i` v5 @kind object, `float` v6 ) @signature `Lc/f/b/j;.b:(ILc/f/b/i;F)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1cb530.  call temp:= `a`(v3) @signature `Lc/f/b/j;.a:()I` @kind direct;
  #L1cb536.  v0:= temp;
  #L1cb538.  call `a`(v3, v0, v5, v6) @signature `Lc/f/b/j;.a:(ILc/f/b/i;F)V` @kind direct;
  #L1cb53e.  v6:= -1I;
  #L1cb540.  if v4 == v6 then goto L1cb55e;
  #L1cb544.  v1:= v3.`c.f.b.j.g` @type ^`int`[] @kind object;
  #L1cb548.  v1[v0]:= v4;
  #L1cb54c.  v1:= v3.`c.f.b.j.h` @type ^`int`[] @kind object;
  #L1cb550.  v2:= v1[v4];
  #L1cb554.  v1[v0]:= v2;
  #L1cb558.  v1[v4]:= v0;
  #L1cb55c.  goto L1cb588;
  #L1cb55e.  v4:= v3.`c.f.b.j.g` @type ^`int`[] @kind object;
  #L1cb562.  v4[v0]:= v6;
  #L1cb566.  v4:= v3.`c.f.b.j.i` @type ^`int`;
  #L1cb56a.  if v4 <= 0 then goto L1cb580;
  #L1cb56e.  v4:= v3.`c.f.b.j.h` @type ^`int`[] @kind object;
  #L1cb572.  v1:= v3.`c.f.b.j.j` @type ^`int`;
  #L1cb576.  v4[v0]:= v1;
  #L1cb57a.  v3.`c.f.b.j.j` @type ^`int` := v0;
  #L1cb57e.  goto L1cb588;
  #L1cb580.  v4:= v3.`c.f.b.j.h` @type ^`int`[] @kind object;
  #L1cb584.  v4[v0]:= v6;
  #L1cb588.  v4:= v3.`c.f.b.j.h` @type ^`int`[] @kind object;
  #L1cb58c.  v1:= v4[v0];
  #L1cb590.  if v1 == v6 then goto L1cb5a0;
  #L1cb594.  v6:= v3.`c.f.b.j.g` @type ^`int`[] @kind object;
  #L1cb598.  v4:= v4[v0];
  #L1cb59c.  v6[v4]:= v0;
  #L1cb5a0.  call `a`(v3, v5, v0) @signature `Lc/f/b/j;.a:(Lc/f/b/i;I)V` @kind direct;
  #L1cb5a6.  return @kind void;
}
procedure `void` `add`(`c.f.b.j` v4 @kind this, `c.f.b.i` v5 @kind object, `float` v6 , `boolean` v7 ) @signature `Lc/f/b/j;.add:(Lc/f/b/i;FZ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1cb2bc.  v0:= `@@c.f.b.j.m` @type ^`float`;
  #L1cb2c0.  v1:= -v0 @kind float;
  #L1cb2c2.  v1:= fcmpl(v6, v1);
  #L1cb2c6.  if v1 <= 0 then goto L1cb2d4;
  #L1cb2ca.  v0:= fcmpg(v6, v0);
  #L1cb2ce.  if v0 >= 0 then goto L1cb2d4;
  #L1cb2d2.  return @kind void;
  #L1cb2d4.  call temp:= `indexOf`(v4, v5) @signature `Lc/f/b/j;.indexOf:(Lc/f/b/i;)I` @kind virtual;
  #L1cb2da.  v0:= temp;
  #L1cb2dc.  v1:= -1I;
  #L1cb2de.  if v0 != v1 then goto L1cb2ea;
  #L1cb2e2.  call `put`(v4, v5, v6) @signature `Lc/f/b/j;.put:(Lc/f/b/i;F)V` @kind virtual;
  #L1cb2e8.  goto L1cb322;
  #L1cb2ea.  v1:= v4.`c.f.b.j.f` @type ^`float`[] @kind object;
  #L1cb2ee.  v2:= v1[v0];
  #L1cb2f2.  v2:= v2 + v6 @kind float;
  #L1cb2f4.  v1[v0]:= v2;
  #L1cb2f8.  v6:= v1[v0];
  #L1cb2fc.  v2:= `@@c.f.b.j.m` @type ^`float`;
  #L1cb300.  v3:= -v2 @kind float;
  #L1cb302.  v6:= fcmpl(v6, v3);
  #L1cb306.  if v6 <= 0 then goto L1cb322;
  #L1cb30a.  v6:= v1[v0];
  #L1cb30e.  v6:= fcmpg(v6, v2);
  #L1cb312.  if v6 >= 0 then goto L1cb322;
  #L1cb316.  v6:= 0I;
  #L1cb318.  v1[v0]:= v6;
  #L1cb31c.  call temp:= `remove`(v4, v5, v7) @signature `Lc/f/b/j;.remove:(Lc/f/b/i;Z)F` @kind virtual;
  #L1cb322.  return @kind void;
}
procedure `void` `clear`(`c.f.b.j` v5 @kind this) @signature `Lc/f/b/j;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1cb3e0.  v0:= v5.`c.f.b.j.i` @type ^`int`;
  #L1cb3e4.  v1:= 0I;
  #L1cb3e6.  v2:= 0I;
  #L1cb3e8.  if v2 >= v0 then goto L1cb408;
  #L1cb3ec.  call temp:= `getVariable`(v5, v2) @signature `Lc/f/b/j;.getVariable:(I)Lc/f/b/i;` @kind virtual;
  #L1cb3f2.  v3:= temp @kind object;
  #L1cb3f4.  if v3 == 0 then goto L1cb402;
  #L1cb3f8.  v4:= v5.`c.f.b.j.k` @type ^`c.f.b.b` @kind object;
  #L1cb3fc.  call `removeFromRow`(v3, v4) @signature `Lc/f/b/i;.removeFromRow:(Lc/f/b/b;)V` @kind virtual;
  #L1cb402.  v2:= v2 + 1;
  #L1cb406.  goto L1cb3e8;
  #L1cb408.  v0:= 0I;
  #L1cb40a.  v2:= v5.`c.f.b.j.a` @type ^`int`;
  #L1cb40e.  v3:= -1I;
  #L1cb410.  if v0 >= v2 then goto L1cb42a;
  #L1cb414.  v2:= v5.`c.f.b.j.e` @type ^`int`[] @kind object;
  #L1cb418.  v2[v0]:= v3;
  #L1cb41c.  v2:= v5.`c.f.b.j.d` @type ^`int`[] @kind object;
  #L1cb420.  v2[v0]:= v3;
  #L1cb424.  v0:= v0 + 1;
  #L1cb428.  goto L1cb40a;
  #L1cb42a.  v0:= 0I;
  #L1cb42c.  v2:= v5.`c.f.b.j.b` @type ^`int`;
  #L1cb430.  if v0 >= v2 then goto L1cb442;
  #L1cb434.  v2:= v5.`c.f.b.j.c` @type ^`int`[] @kind object;
  #L1cb438.  v2[v0]:= v3;
  #L1cb43c.  v0:= v0 + 1;
  #L1cb440.  goto L1cb42c;
  #L1cb442.  v5.`c.f.b.j.i` @type ^`int` := v1;
  #L1cb446.  v5.`c.f.b.j.j` @type ^`int` := v3;
  #L1cb44a.  return @kind void;
}
procedure `boolean` `contains`(`c.f.b.j` v1 @kind this, `c.f.b.i` v2 @kind object) @signature `Lc/f/b/j;.contains:(Lc/f/b/i;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cada4.  call temp:= `indexOf`(v1, v2) @signature `Lc/f/b/j;.indexOf:(Lc/f/b/i;)I` @kind virtual;
  #L1cadaa.  v2:= temp;
  #L1cadac.  v0:= -1I;
  #L1cadae.  if v2 == v0 then goto L1cadb6;
  #L1cadb2.  v2:= 1I;
  #L1cadb4.  goto L1cadb8;
  #L1cadb6.  v2:= 0I;
  #L1cadb8.  return v2;
}
procedure `void` `divideByAmount`(`c.f.b.j` v5 @kind this, `float` v6 ) @signature `Lc/f/b/j;.divideByAmount:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1cb45c.  v0:= v5.`c.f.b.j.i` @type ^`int`;
  #L1cb460.  v1:= v5.`c.f.b.j.j` @type ^`int`;
  #L1cb464.  v2:= 0I;
  #L1cb466.  if v2 >= v0 then goto L1cb48e;
  #L1cb46a.  v3:= v5.`c.f.b.j.f` @type ^`float`[] @kind object;
  #L1cb46e.  v4:= v3[v1];
  #L1cb472.  v4:= v4 / v6 @kind float;
  #L1cb474.  v3[v1]:= v4;
  #L1cb478.  v3:= v5.`c.f.b.j.h` @type ^`int`[] @kind object;
  #L1cb47c.  v1:= v3[v1];
  #L1cb480.  v3:= -1I;
  #L1cb482.  if v1 != v3 then goto L1cb488;
  #L1cb486.  goto L1cb48e;
  #L1cb488.  v2:= v2 + 1;
  #L1cb48c.  goto L1cb466;
  #L1cb48e.  return @kind void;
}
procedure `float` `get`(`c.f.b.j` v1 @kind this, `c.f.b.i` v2 @kind object) @signature `Lc/f/b/j;.get:(Lc/f/b/i;)F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cadcc.  call temp:= `indexOf`(v1, v2) @signature `Lc/f/b/j;.indexOf:(Lc/f/b/i;)I` @kind virtual;
  #L1cadd2.  v2:= temp;
  #L1cadd4.  v0:= -1I;
  #L1cadd6.  if v2 == v0 then goto L1cade4;
  #L1cadda.  v0:= v1.`c.f.b.j.f` @type ^`float`[] @kind object;
  #L1cadde.  v2:= v0[v2];
  #L1cade2.  return v2;
  #L1cade4.  v2:= 0I;
  #L1cade6.  return v2;
}
procedure `int` `getCurrentSize`(`c.f.b.j` v1 @kind this) @signature `Lc/f/b/j;.getCurrentSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cafa0.  v0:= v1.`c.f.b.j.i` @type ^`int`;
  #L1cafa4.  return v0;
}
procedure `c.f.b.i` `getVariable`(`c.f.b.j` v6 @kind this, `int` v7 ) @signature `Lc/f/b/j;.getVariable:(I)Lc/f/b/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1cad48.  v0:= v6.`c.f.b.j.i` @type ^`int`;
  #L1cad4c.  v1:= 0I;
  #L1cad4e.  if v0 != 0 then goto L1cad54;
  #L1cad52.  return v1 @kind object;
  #L1cad54.  v2:= v6.`c.f.b.j.j` @type ^`int`;
  #L1cad58.  v3:= 0I;
  #L1cad5a.  if v3 >= v0 then goto L1cad92;
  #L1cad5e.  v4:= -1I;
  #L1cad60.  if v3 != v7 then goto L1cad7e;
  #L1cad64.  if v2 == v4 then goto L1cad7e;
  #L1cad68.  v7:= v6.`c.f.b.j.l` @type ^`c.f.b.c` @kind object;
  #L1cad6c.  v7:= v7.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1cad70.  v0:= v6.`c.f.b.j.e` @type ^`int`[] @kind object;
  #L1cad74.  v0:= v0[v2];
  #L1cad78.  v7:= v7[v0] @kind object;
  #L1cad7c.  return v7 @kind object;
  #L1cad7e.  v5:= v6.`c.f.b.j.h` @type ^`int`[] @kind object;
  #L1cad82.  v2:= v5[v2];
  #L1cad86.  if v2 != v4 then goto L1cad8c;
  #L1cad8a.  goto L1cad92;
  #L1cad8c.  v3:= v3 + 1;
  #L1cad90.  goto L1cad5a;
  #L1cad92.  return v1 @kind object;
}
procedure `float` `getVariableValue`(`c.f.b.j` v4 @kind this, `int` v5 ) @signature `Lc/f/b/j;.getVariableValue:(I)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1cadf8.  v0:= v4.`c.f.b.j.i` @type ^`int`;
  #L1cadfc.  v1:= v4.`c.f.b.j.j` @type ^`int`;
  #L1cae00.  v2:= 0I;
  #L1cae02.  if v2 >= v0 then goto L1cae2a;
  #L1cae06.  if v2 != v5 then goto L1cae14;
  #L1cae0a.  v5:= v4.`c.f.b.j.f` @type ^`float`[] @kind object;
  #L1cae0e.  v5:= v5[v1];
  #L1cae12.  return v5;
  #L1cae14.  v3:= v4.`c.f.b.j.h` @type ^`int`[] @kind object;
  #L1cae18.  v1:= v3[v1];
  #L1cae1c.  v3:= -1I;
  #L1cae1e.  if v1 != v3 then goto L1cae24;
  #L1cae22.  goto L1cae2a;
  #L1cae24.  v2:= v2 + 1;
  #L1cae28.  goto L1cae02;
  #L1cae2a.  v5:= 0I;
  #L1cae2c.  return v5;
}
procedure `int` `indexOf`(`c.f.b.j` v5 @kind this, `c.f.b.i` v6 @kind object) @signature `Lc/f/b/j;.indexOf:(Lc/f/b/i;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1cafb8.  v0:= v5.`c.f.b.j.i` @type ^`int`;
  #L1cafbc.  v1:= -1I;
  #L1cafbe.  if v0 == 0 then goto L1cb036;
  #L1cafc2.  if v6 != 0 then goto L1cafc8;
  #L1cafc6.  goto L1cb036;
  #L1cafc8.  v6:= v6.`c.f.b.i.c` @type ^`int`;
  #L1cafcc.  v0:= v5.`c.f.b.j.b` @type ^`int`;
  #L1cafd0.  v0:= v6 %% v0 @kind int;
  #L1cafd4.  v2:= v5.`c.f.b.j.c` @type ^`int`[] @kind object;
  #L1cafd8.  v0:= v2[v0];
  #L1cafdc.  if v0 != v1 then goto L1cafe2;
  #L1cafe0.  return v1;
  #L1cafe2.  v2:= v5.`c.f.b.j.e` @type ^`int`[] @kind object;
  #L1cafe6.  v2:= v2[v0];
  #L1cafea.  if v2 != v6 then goto L1caff0;
  #L1cafee.  return v0;
  #L1caff0.  v2:= v5.`c.f.b.j.d` @type ^`int`[] @kind object;
  #L1caff4.  v3:= v2[v0];
  #L1caff8.  if v3 == v1 then goto L1cb012;
  #L1caffc.  v3:= v5.`c.f.b.j.e` @type ^`int`[] @kind object;
  #L1cb000.  v4:= v2[v0];
  #L1cb004.  v3:= v3[v4];
  #L1cb008.  if v3 == v6 then goto L1cb012;
  #L1cb00c.  v0:= v2[v0];
  #L1cb010.  goto L1caff0;
  #L1cb012.  v2:= v5.`c.f.b.j.d` @type ^`int`[] @kind object;
  #L1cb016.  v3:= v2[v0];
  #L1cb01a.  if v3 != v1 then goto L1cb020;
  #L1cb01e.  return v1;
  #L1cb020.  v3:= v5.`c.f.b.j.e` @type ^`int`[] @kind object;
  #L1cb024.  v4:= v2[v0];
  #L1cb028.  v3:= v3[v4];
  #L1cb02c.  if v3 != v6 then goto L1cb036;
  #L1cb030.  v6:= v2[v0];
  #L1cb034.  return v6;
  #L1cb036.  return v1;
}
procedure `void` `invert`(`c.f.b.j` v6 @kind this) @signature `Lc/f/b/j;.invert:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1cb5b8.  v0:= v6.`c.f.b.j.i` @type ^`int`;
  #L1cb5bc.  v1:= v6.`c.f.b.j.j` @type ^`int`;
  #L1cb5c0.  v2:= 0I;
  #L1cb5c2.  if v2 >= v0 then goto L1cb5f0;
  #L1cb5c6.  v3:= v6.`c.f.b.j.f` @type ^`float`[] @kind object;
  #L1cb5ca.  v4:= v3[v1];
  #L1cb5ce.  v5:= -1.0F;
  #L1cb5d2.  v4:= v4 * v5 @kind float;
  #L1cb5d6.  v3[v1]:= v4;
  #L1cb5da.  v3:= v6.`c.f.b.j.h` @type ^`int`[] @kind object;
  #L1cb5de.  v1:= v3[v1];
  #L1cb5e2.  v3:= -1I;
  #L1cb5e4.  if v1 != v3 then goto L1cb5ea;
  #L1cb5e8.  goto L1cb5f0;
  #L1cb5ea.  v2:= v2 + 1;
  #L1cb5ee.  goto L1cb5c2;
  #L1cb5f0.  return @kind void;
}
procedure `void` `put`(`c.f.b.j` v8 @kind this, `c.f.b.i` v9 @kind object, `float` v10 ) @signature `Lc/f/b/j;.put:(Lc/f/b/i;F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1cb604.  v0:= `@@c.f.b.j.m` @type ^`float`;
  #L1cb608.  v1:= -v0 @kind float;
  #L1cb60a.  v2:= 1I;
  #L1cb60c.  v1:= fcmpl(v10, v1);
  #L1cb610.  if v1 <= 0 then goto L1cb624;
  #L1cb614.  v0:= fcmpg(v10, v0);
  #L1cb618.  if v0 >= 0 then goto L1cb624;
  #L1cb61c.  call temp:= `remove`(v8, v9, v2) @signature `Lc/f/b/j;.remove:(Lc/f/b/i;Z)F` @kind virtual;
  #L1cb622.  return @kind void;
  #L1cb624.  v0:= v8.`c.f.b.j.i` @type ^`int`;
  #L1cb628.  v1:= 0I;
  #L1cb62a.  if v0 != 0 then goto L1cb640;
  #L1cb62e.  call `a`(v8, v1, v9, v10) @signature `Lc/f/b/j;.a:(ILc/f/b/i;F)V` @kind direct;
  #L1cb634.  call `a`(v8, v9, v1) @signature `Lc/f/b/j;.a:(Lc/f/b/i;I)V` @kind direct;
  #L1cb63a.  v8.`c.f.b.j.j` @type ^`int` := v1;
  #L1cb63e.  goto L1cb6b8;
  #L1cb640.  call temp:= `indexOf`(v8, v9) @signature `Lc/f/b/j;.indexOf:(Lc/f/b/i;)I` @kind virtual;
  #L1cb646.  v0:= temp;
  #L1cb648.  v3:= -1I;
  #L1cb64a.  if v0 == v3 then goto L1cb658;
  #L1cb64e.  v9:= v8.`c.f.b.j.f` @type ^`float`[] @kind object;
  #L1cb652.  v9[v0]:= v10;
  #L1cb656.  goto L1cb6b8;
  #L1cb658.  v0:= v8.`c.f.b.j.i` @type ^`int`;
  #L1cb65c.  v0:= v0 + v2 @kind int;
  #L1cb65e.  v2:= v8.`c.f.b.j.a` @type ^`int`;
  #L1cb662.  if v0 < v2 then goto L1cb66c;
  #L1cb666.  call `b`(v8) @signature `Lc/f/b/j;.b:()V` @kind direct;
  #L1cb66c.  v0:= v8.`c.f.b.j.i` @type ^`int`;
  #L1cb670.  v2:= v8.`c.f.b.j.j` @type ^`int`;
  #L1cb674.  v4:= -1I;
  #L1cb676.  if v1 >= v0 then goto L1cb6b2;
  #L1cb67a.  v5:= v8.`c.f.b.j.e` @type ^`int`[] @kind object;
  #L1cb67e.  v6:= v5[v2];
  #L1cb682.  v7:= v9.`c.f.b.i.c` @type ^`int`;
  #L1cb686.  if v6 != v7 then goto L1cb694;
  #L1cb68a.  v9:= v8.`c.f.b.j.f` @type ^`float`[] @kind object;
  #L1cb68e.  v9[v2]:= v10;
  #L1cb692.  return @kind void;
  #L1cb694.  v5:= v5[v2];
  #L1cb698.  if v5 >= v7 then goto L1cb69e;
  #L1cb69c.  v4:= v2;
  #L1cb69e.  v5:= v8.`c.f.b.j.h` @type ^`int`[] @kind object;
  #L1cb6a2.  v2:= v5[v2];
  #L1cb6a6.  if v2 != v3 then goto L1cb6ac;
  #L1cb6aa.  goto L1cb6b2;
  #L1cb6ac.  v1:= v1 + 1;
  #L1cb6b0.  goto L1cb676;
  #L1cb6b2.  call `b`(v8, v4, v9, v10) @signature `Lc/f/b/j;.b:(ILc/f/b/i;F)V` @kind direct;
  #L1cb6b8.  return @kind void;
}
procedure `float` `remove`(`c.f.b.j` v6 @kind this, `c.f.b.i` v7 @kind object, `boolean` v8 ) @signature `Lc/f/b/j;.remove:(Lc/f/b/i;Z)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1cae40.  call temp:= `indexOf`(v6, v7) @signature `Lc/f/b/j;.indexOf:(Lc/f/b/i;)I` @kind virtual;
  #L1cae46.  v0:= temp;
  #L1cae48.  v1:= -1I;
  #L1cae4a.  if v0 != v1 then goto L1cae52;
  #L1cae4e.  v7:= 0I;
  #L1cae50.  return v7;
  #L1cae52.  call `a`(v6, v7) @signature `Lc/f/b/j;.a:(Lc/f/b/i;)V` @kind direct;
  #L1cae58.  v2:= v6.`c.f.b.j.f` @type ^`float`[] @kind object;
  #L1cae5c.  v2:= v2[v0];
  #L1cae60.  v3:= v6.`c.f.b.j.j` @type ^`int`;
  #L1cae64.  if v3 != v0 then goto L1cae74;
  #L1cae68.  v3:= v6.`c.f.b.j.h` @type ^`int`[] @kind object;
  #L1cae6c.  v3:= v3[v0];
  #L1cae70.  v6.`c.f.b.j.j` @type ^`int` := v3;
  #L1cae74.  v3:= v6.`c.f.b.j.e` @type ^`int`[] @kind object;
  #L1cae78.  v3[v0]:= v1;
  #L1cae7c.  v3:= v6.`c.f.b.j.g` @type ^`int`[] @kind object;
  #L1cae80.  v4:= v3[v0];
  #L1cae84.  if v4 == v1 then goto L1cae98;
  #L1cae88.  v4:= v6.`c.f.b.j.h` @type ^`int`[] @kind object;
  #L1cae8c.  v3:= v3[v0];
  #L1cae90.  v5:= v4[v0];
  #L1cae94.  v4[v3]:= v5;
  #L1cae98.  v3:= v6.`c.f.b.j.h` @type ^`int`[] @kind object;
  #L1cae9c.  v4:= v3[v0];
  #L1caea0.  if v4 == v1 then goto L1caeb4;
  #L1caea4.  v1:= v6.`c.f.b.j.g` @type ^`int`[] @kind object;
  #L1caea8.  v3:= v3[v0];
  #L1caeac.  v0:= v1[v0];
  #L1caeb0.  v1[v3]:= v0;
  #L1caeb4.  v0:= v6.`c.f.b.j.i` @type ^`int`;
  #L1caeb8.  v0:= v0 + -1;
  #L1caebc.  v6.`c.f.b.j.i` @type ^`int` := v0;
  #L1caec0.  v0:= v7.`c.f.b.i.m` @type ^`int`;
  #L1caec4.  v0:= v0 + -1;
  #L1caec8.  v7.`c.f.b.i.m` @type ^`int` := v0;
  #L1caecc.  if v8 == 0 then goto L1caeda;
  #L1caed0.  v8:= v6.`c.f.b.j.k` @type ^`c.f.b.b` @kind object;
  #L1caed4.  call `removeFromRow`(v7, v8) @signature `Lc/f/b/i;.removeFromRow:(Lc/f/b/b;)V` @kind virtual;
  #L1caeda.  return v2;
}
procedure `java.lang.String` `toString`(`c.f.b.j` v9 @kind this) @signature `Lc/f/b/j;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1cb048.  v0:= new `java.lang.StringBuilder`;
  #L1cb04c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cb052.  call temp:= `hashCode`(v9) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1cb058.  v1:= temp;
  #L1cb05a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb060.  v1:= " { " @kind object;
  #L1cb064.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb06a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb070.  v0:= temp @kind object;
  #L1cb072.  v1:= v9.`c.f.b.j.i` @type ^`int`;
  #L1cb076.  v2:= 0I;
  #L1cb078.  if v2 >= v1 then goto L1cb214;
  #L1cb07c.  call temp:= `getVariable`(v9, v2) @signature `Lc/f/b/j;.getVariable:(I)Lc/f/b/i;` @kind virtual;
  #L1cb082.  v3:= temp @kind object;
  #L1cb084.  if v3 != 0 then goto L1cb08c;
  #L1cb088.  goto L1cb20c;
  #L1cb08c.  v4:= new `java.lang.StringBuilder`;
  #L1cb090.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cb096.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb09c.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb0a2.  v0:= " = " @kind object;
  #L1cb0a6.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb0ac.  call temp:= `getVariableValue`(v9, v2) @signature `Lc/f/b/j;.getVariableValue:(I)F` @kind virtual;
  #L1cb0b2.  v0:= temp;
  #L1cb0b4.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb0ba.  v0:= " " @kind object;
  #L1cb0be.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb0c4.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb0ca.  v0:= temp @kind object;
  #L1cb0cc.  call temp:= `indexOf`(v9, v3) @signature `Lc/f/b/j;.indexOf:(Lc/f/b/i;)I` @kind virtual;
  #L1cb0d2.  v3:= temp;
  #L1cb0d4.  v4:= new `java.lang.StringBuilder`;
  #L1cb0d8.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cb0de.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb0e4.  v0:= "[p: " @kind object;
  #L1cb0e8.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb0ee.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb0f4.  v0:= temp @kind object;
  #L1cb0f6.  v4:= v9.`c.f.b.j.g` @type ^`int`[] @kind object;
  #L1cb0fa.  v4:= v4[v3];
  #L1cb0fe.  v5:= "none" @kind object;
  #L1cb102.  v6:= -1I;
  #L1cb104.  if v4 == v6 then goto L1cb144;
  #L1cb108.  v4:= new `java.lang.StringBuilder`;
  #L1cb10c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cb112.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb118.  v0:= v9.`c.f.b.j.l` @type ^`c.f.b.c` @kind object;
  #L1cb11c.  v0:= v0.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1cb120.  v7:= v9.`c.f.b.j.e` @type ^`int`[] @kind object;
  #L1cb124.  v8:= v9.`c.f.b.j.g` @type ^`int`[] @kind object;
  #L1cb128.  v8:= v8[v3];
  #L1cb12c.  v7:= v7[v8];
  #L1cb130.  v0:= v0[v7] @kind object;
  #L1cb134.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb13a.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb140.  v0:= temp @kind object;
  #L1cb142.  goto L1cb162;
  #L1cb144.  v4:= new `java.lang.StringBuilder`;
  #L1cb148.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cb14e.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb154.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb15a.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb160.  v0:= temp @kind object;
  #L1cb162.  v4:= new `java.lang.StringBuilder`;
  #L1cb166.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cb16c.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb172.  v0:= ", n: " @kind object;
  #L1cb176.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb17c.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb182.  v0:= temp @kind object;
  #L1cb184.  v4:= v9.`c.f.b.j.h` @type ^`int`[] @kind object;
  #L1cb188.  v4:= v4[v3];
  #L1cb18c.  if v4 == v6 then goto L1cb1cc;
  #L1cb190.  v4:= new `java.lang.StringBuilder`;
  #L1cb194.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cb19a.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb1a0.  v0:= v9.`c.f.b.j.l` @type ^`c.f.b.c` @kind object;
  #L1cb1a4.  v0:= v0.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1cb1a8.  v5:= v9.`c.f.b.j.e` @type ^`int`[] @kind object;
  #L1cb1ac.  v6:= v9.`c.f.b.j.h` @type ^`int`[] @kind object;
  #L1cb1b0.  v3:= v6[v3];
  #L1cb1b4.  v3:= v5[v3];
  #L1cb1b8.  v0:= v0[v3] @kind object;
  #L1cb1bc.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb1c2.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb1c8.  v0:= temp @kind object;
  #L1cb1ca.  goto L1cb1ea;
  #L1cb1cc.  v3:= new `java.lang.StringBuilder`;
  #L1cb1d0.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cb1d6.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb1dc.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb1e2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb1e8.  v0:= temp @kind object;
  #L1cb1ea.  v3:= new `java.lang.StringBuilder`;
  #L1cb1ee.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cb1f4.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb1fa.  v0:= "]" @kind object;
  #L1cb1fe.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb204.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb20a.  v0:= temp @kind object;
  #L1cb20c.  v2:= v2 + 1;
  #L1cb210.  goto L1cb078;
  #L1cb214.  v1:= new `java.lang.StringBuilder`;
  #L1cb218.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cb21e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb224.  v0:= " }" @kind object;
  #L1cb228.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb22e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb234.  v0:= temp @kind object;
  #L1cb236.  return v0 @kind object;
}
procedure `float` `use`(`c.f.b.j` v7 @kind this, `c.f.b.b` v8 @kind object, `boolean` v9 ) @signature `Lc/f/b/j;.use:(Lc/f/b/b;Z)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1caeec.  v0:= v8.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1caef0.  call temp:= `get`(v7, v0) @signature `Lc/f/b/j;.get:(Lc/f/b/i;)F` @kind virtual;
  #L1caef6.  v0:= temp;
  #L1caef8.  v1:= v8.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1caefc.  call temp:= `remove`(v7, v1, v9) @signature `Lc/f/b/j;.remove:(Lc/f/b/i;Z)F` @kind virtual;
  #L1caf02.  v8:= v8.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1caf06.  v8:= (`c.f.b.j`) v8 @kind object;
  #L1caf0a.  call temp:= `getCurrentSize`(v8) @signature `Lc/f/b/j;.getCurrentSize:()I` @kind virtual;
  #L1caf10.  v1:= temp;
  #L1caf12.  v2:= v8.`c.f.b.j.j` @type ^`int`;
  #L1caf16.  v2:= 0I;
  #L1caf18.  v3:= 0I;
  #L1caf1a.  if v2 >= v1 then goto L1caf58;
  #L1caf1e.  v4:= v8.`c.f.b.j.e` @type ^`int`[] @kind object;
  #L1caf22.  v5:= v4[v3];
  #L1caf26.  v6:= -1I;
  #L1caf28.  if v5 == v6 then goto L1caf52;
  #L1caf2c.  v5:= v8.`c.f.b.j.f` @type ^`float`[] @kind object;
  #L1caf30.  v5:= v5[v3];
  #L1caf34.  v6:= v7.`c.f.b.j.l` @type ^`c.f.b.c` @kind object;
  #L1caf38.  v6:= v6.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1caf3c.  v4:= v4[v3];
  #L1caf40.  v4:= v6[v4] @kind object;
  #L1caf44.  v5:= v5 * v0 @kind float;
  #L1caf48.  call `add`(v7, v4, v5, v9) @signature `Lc/f/b/j;.add:(Lc/f/b/i;FZ)V` @kind virtual;
  #L1caf4e.  v2:= v2 + 1;
  #L1caf52.  v3:= v3 + 1;
  #L1caf56.  goto L1caf1a;
  #L1caf58.  return v0;
}
