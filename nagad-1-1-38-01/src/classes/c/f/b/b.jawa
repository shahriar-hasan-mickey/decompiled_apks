record `c.f.b.b` @kind class @AccessFlag PUBLIC extends `c.f.b.d$a` @kind interface {
  `c.f.b.i` `c.f.b.b.a` @AccessFlag ;
  `float` `c.f.b.b.b` @AccessFlag ;
  `boolean` `c.f.b.b.c` @AccessFlag ;
  `java.util.ArrayList` `c.f.b.b.d` @AccessFlag ;
  `c.f.b.b$a` `c.f.b.b.e` @AccessFlag PUBLIC;
  `boolean` `c.f.b.b.f` @AccessFlag ;
}
procedure `void` `<init>`(`c.f.b.b` v1 @kind this) @signature `Lc/f/b/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c8d00.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c8d06.  v0:= 0I;
  #L1c8d08.  v1.`c.f.b.b.a` @type ^`c.f.b.i` := v0 @kind object;
  #L1c8d0c.  v0:= 0I;
  #L1c8d0e.  v1.`c.f.b.b.b` @type ^`float` := v0;
  #L1c8d12.  v0:= new `java.util.ArrayList`;
  #L1c8d16.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1c8d1c.  v1.`c.f.b.b.d` @type ^`java.util.ArrayList` := v0 @kind object;
  #L1c8d20.  v0:= 0I;
  #L1c8d22.  v1.`c.f.b.b.f` @type ^`boolean` := v0 @kind boolean;
  #L1c8d26.  return @kind void;
}
procedure `void` `<init>`(`c.f.b.b` v1 @kind this, `c.f.b.c` v2 @kind object) @signature `Lc/f/b/b;.<init>:(Lc/f/b/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c8d38.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c8d3e.  v0:= 0I;
  #L1c8d40.  v1.`c.f.b.b.a` @type ^`c.f.b.i` := v0 @kind object;
  #L1c8d44.  v0:= 0I;
  #L1c8d46.  v1.`c.f.b.b.b` @type ^`float` := v0;
  #L1c8d4a.  v0:= new `java.util.ArrayList`;
  #L1c8d4e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1c8d54.  v1.`c.f.b.b.d` @type ^`java.util.ArrayList` := v0 @kind object;
  #L1c8d58.  v0:= 0I;
  #L1c8d5a.  v1.`c.f.b.b.f` @type ^`boolean` := v0 @kind boolean;
  #L1c8d5e.  v0:= new `c.f.b.a`;
  #L1c8d62.  call `<init>`(v0, v1, v2) @signature `Lc/f/b/a;.<init>:(Lc/f/b/b;Lc/f/b/c;)V` @kind direct;
  #L1c8d68.  v1.`c.f.b.b.e` @type ^`c.f.b.b$a` := v0 @kind object;
  #L1c8d6c.  return @kind void;
}
procedure `c.f.b.i` `a`(`c.f.b.b` v9 @kind this, `boolean`[] v10 @kind object, `c.f.b.i` v11 @kind object) @signature `Lc/f/b/b;.a:([ZLc/f/b/i;)Lc/f/b/i;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1c8954.  v0:= v9.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8958.  call temp:= `getCurrentSize`(v0) @signature `Lc/f/b/b$a;.getCurrentSize:()I` @kind interface;
  #L1c895e.  v0:= temp;
  #L1c8960.  v1:= 0I;
  #L1c8962.  v2:= 0I;
  #L1c8964.  v3:= 0I;
  #L1c8966.  v4:= 0I;
  #L1c8968.  if v3 >= v0 then goto L1c89c6;
  #L1c896c.  v5:= v9.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8970.  call temp:= `getVariableValue`(v5, v3) @signature `Lc/f/b/b$a;.getVariableValue:(I)F` @kind interface;
  #L1c8976.  v5:= temp;
  #L1c8978.  v6:= fcmpg(v5, v1);
  #L1c897c.  if v6 >= 0 then goto L1c89c0;
  #L1c8980.  v6:= v9.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8984.  call temp:= `getVariable`(v6, v3) @signature `Lc/f/b/b$a;.getVariable:(I)Lc/f/b/i;` @kind interface;
  #L1c898a.  v6:= temp @kind object;
  #L1c898c.  if v10 == 0 then goto L1c899c;
  #L1c8990.  v7:= v6.`c.f.b.i.c` @type ^`int`;
  #L1c8994.  v7:= v10[v7] @kind boolean;
  #L1c8998.  if v7 != 0 then goto L1c89c0;
  #L1c899c.  if v6 == v11 then goto L1c89c0;
  #L1c89a0.  v7:= v6.`c.f.b.i.j` @type ^`c.f.b.i$a` @kind object;
  #L1c89a4.  v8:= `@@c.f.b.i$a.h` @type ^`c.f.b.i$a` @kind object;
  #L1c89a8.  if v7 == v8 then goto L1c89b4;
  #L1c89ac.  v8:= `@@c.f.b.i$a.i` @type ^`c.f.b.i$a` @kind object;
  #L1c89b0.  if v7 != v8 then goto L1c89c0;
  #L1c89b4.  v7:= fcmpg(v5, v4);
  #L1c89b8.  if v7 >= 0 then goto L1c89c0;
  #L1c89bc.  v4:= v5;
  #L1c89be.  v2:= v6 @kind object;
  #L1c89c0.  v3:= v3 + 1;
  #L1c89c4.  goto L1c8968;
  #L1c89c6.  return v2 @kind object;
}
procedure `boolean` `a`(`c.f.b.b` v0 @kind this, `c.f.b.i` v1 @kind object, `c.f.b.d` v2 @kind object) @signature `Lc/f/b/b;.a:(Lc/f/b/i;Lc/f/b/d;)Z` @AccessFlag PRIVATE {
    temp;

  #L1c8ab4.  v1:= v1.`c.f.b.i.m` @type ^`int`;
  #L1c8ab8.  v2:= 1I;
  #L1c8aba.  if v1 > v2 then goto L1c8ac0;
  #L1c8abe.  goto L1c8ac2;
  #L1c8ac0.  v2:= 0I;
  #L1c8ac2.  return v2;
}
procedure `c.f.b.b` `a`(`c.f.b.b` v1 @kind this, `c.f.b.i` v2 @kind object, `int` v3 ) @signature `Lc/f/b/b;.a:(Lc/f/b/i;I)Lc/f/b/b;` @AccessFlag  {
    temp;
    v0;

  #L1c8394.  v0:= v1.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8398.  v3:= (`float`) v3 @kind i2f;
  #L1c839a.  call `put`(v0, v2, v3) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c83a0.  return v1 @kind object;
}
procedure `c.f.b.b` `a`(`c.f.b.b` v2 @kind this, `c.f.b.i` v3 @kind object, `c.f.b.i` v4 @kind object, `float` v5 ) @signature `Lc/f/b/b;.a:(Lc/f/b/i;Lc/f/b/i;F)Lc/f/b/b;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1c850c.  v0:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8510.  v1:= -1.0F;
  #L1c8514.  call `put`(v0, v3, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c851a.  v3:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c851e.  call `put`(v3, v4, v5) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8524.  return v2 @kind object;
}
procedure `c.f.b.b` `a`(`c.f.b.b` v5 @kind this, `c.f.b.i` v6 @kind object, `c.f.b.i` v7 @kind object, `int` v8 , `float` v9 , `c.f.b.i` v10 @kind object, `c.f.b.i` v11 @kind object, `int` v12 ) @signature `Lc/f/b/b;.a:(Lc/f/b/i;Lc/f/b/i;IFLc/f/b/i;Lc/f/b/i;I)Lc/f/b/b;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c83b4.  v0:= 1.0F;
  #L1c83b8.  if v7 != v10 then goto L1c83e0;
  #L1c83bc.  v8:= v5.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c83c0.  call `put`(v8, v6, v0) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c83c6.  v6:= v5.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c83ca.  call `put`(v6, v11, v0) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c83d0.  v6:= v5.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c83d4.  v8:= -2.0F;
  #L1c83d8.  call `put`(v6, v7, v8) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c83de.  return v5 @kind object;
  #L1c83e0.  v1:= 0.5F;
  #L1c83e4.  v2:= -1.0F;
  #L1c83e8.  v1:= fcmpl(v9, v1);
  #L1c83ec.  if v1 != 0 then goto L1c842c;
  #L1c83f0.  v9:= v5.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c83f4.  call `put`(v9, v6, v0) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c83fa.  v6:= v5.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c83fe.  call `put`(v6, v7, v2) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8404.  v6:= v5.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8408.  call `put`(v6, v10, v2) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c840e.  v6:= v5.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8412.  call `put`(v6, v11, v0) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8418.  if v8 > 0 then goto L1c8420;
  #L1c841c.  if v12 <= 0 then goto L1c84d0;
  #L1c8420.  v6:= -v8 @kind int;
  #L1c8422.  v6:= v6 + v12 @kind int;
  #L1c8424.  v6:= (`float`) v6 @kind i2f;
  #L1c8426.  v5.`c.f.b.b.b` @type ^`float` := v6;
  #L1c842a.  goto L1c84d0;
  #L1c842c.  v1:= 0I;
  #L1c842e.  v1:= fcmpg(v9, v1);
  #L1c8432.  if v1 > 0 then goto L1c8452;
  #L1c8436.  v9:= v5.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c843a.  call `put`(v9, v6, v2) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8440.  v6:= v5.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8444.  call `put`(v6, v7, v0) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c844a.  v6:= (`float`) v8 @kind i2f;
  #L1c844c.  v5.`c.f.b.b.b` @type ^`float` := v6;
  #L1c8450.  goto L1c84d0;
  #L1c8452.  v1:= fcmpl(v9, v0);
  #L1c8456.  if v1 < 0 then goto L1c8478;
  #L1c845a.  v6:= v5.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c845e.  call `put`(v6, v11, v2) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8464.  v6:= v5.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8468.  call `put`(v6, v10, v0) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c846e.  v6:= -v12 @kind int;
  #L1c8470.  v6:= (`float`) v6 @kind i2f;
  #L1c8472.  v5.`c.f.b.b.b` @type ^`float` := v6;
  #L1c8476.  goto L1c84d0;
  #L1c8478.  v1:= v5.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c847c.  v3:= v0 - v9 @kind float;
  #L1c8480.  v4:= v3 * v0 @kind float;
  #L1c8484.  call `put`(v1, v6, v4) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c848a.  v6:= v5.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c848e.  v1:= v3 * v2 @kind float;
  #L1c8492.  call `put`(v6, v7, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8498.  v6:= v5.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c849c.  v2:= v2 * v9 @kind float;
  #L1c84a0.  call `put`(v6, v10, v2) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c84a6.  v6:= v5.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c84aa.  v0:= v0 * v9 @kind float;
  #L1c84ae.  call `put`(v6, v11, v0) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c84b4.  if v8 > 0 then goto L1c84bc;
  #L1c84b8.  if v12 <= 0 then goto L1c84d0;
  #L1c84bc.  v6:= -v8 @kind int;
  #L1c84be.  v6:= (`float`) v6 @kind i2f;
  #L1c84c0.  v6:= v6 * v3 @kind float;
  #L1c84c4.  v7:= (`float`) v12 @kind i2f;
  #L1c84c6.  v7:= v7 * v9 @kind float;
  #L1c84ca.  v6:= v6 + v7 @kind float;
  #L1c84cc.  v5.`c.f.b.b.b` @type ^`float` := v6;
  #L1c84d0.  return v5 @kind object;
}
procedure `void` `a`(`c.f.b.b` v2 @kind this) @signature `Lc/f/b/b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1c8e08.  v0:= v2.`c.f.b.b.b` @type ^`float`;
  #L1c8e0c.  v1:= 0I;
  #L1c8e0e.  v1:= fcmpg(v0, v1);
  #L1c8e12.  if v1 >= 0 then goto L1c8e2c;
  #L1c8e16.  v1:= -1.0F;
  #L1c8e1a.  v0:= v0 * v1 @kind float;
  #L1c8e1e.  v2.`c.f.b.b.b` @type ^`float` := v0;
  #L1c8e22.  v0:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8e26.  call `invert`(v0) @signature `Lc/f/b/b$a;.invert:()V` @kind interface;
  #L1c8e2c.  return @kind void;
}
procedure `boolean` `a`(`c.f.b.b` v2 @kind this, `c.f.b.d` v3 @kind object) @signature `Lc/f/b/b;.a:(Lc/f/b/d;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1c89d8.  call temp:= `b`(v2, v3) @signature `Lc/f/b/b;.b:(Lc/f/b/d;)Lc/f/b/i;` @kind virtual;
  #L1c89de.  v3:= temp @kind object;
  #L1c89e0.  v0:= 1I;
  #L1c89e2.  if v3 != 0 then goto L1c89ea;
  #L1c89e6.  v3:= 1I;
  #L1c89e8.  goto L1c89f2;
  #L1c89ea.  call `b`(v2, v3) @signature `Lc/f/b/b;.b:(Lc/f/b/i;)V` @kind virtual;
  #L1c89f0.  v3:= 0I;
  #L1c89f2.  v1:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c89f6.  call temp:= `getCurrentSize`(v1) @signature `Lc/f/b/b$a;.getCurrentSize:()I` @kind interface;
  #L1c89fc.  v1:= temp;
  #L1c89fe.  if v1 != 0 then goto L1c8a06;
  #L1c8a02.  v2.`c.f.b.b.f` @type ^`boolean` := v0 @kind boolean;
  #L1c8a06.  return v3;
}
procedure `boolean` `a`(`c.f.b.b` v1 @kind this, `c.f.b.i` v2 @kind object) @signature `Lc/f/b/b;.a:(Lc/f/b/i;)Z` @AccessFlag  {
    temp;
    v0;

  #L1c8a54.  v0:= v1.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8a58.  call temp:= `contains`(v0, v2) @signature `Lc/f/b/b$a;.contains:(Lc/f/b/i;)Z` @kind interface;
  #L1c8a5e.  v2:= temp;
  #L1c8a60.  return v2;
}
procedure `c.f.b.b` `addError`(`c.f.b.b` v3 @kind this, `c.f.b.d` v4 @kind object, `int` v5 ) @signature `Lc/f/b/b;.addError:(Lc/f/b/d;I)Lc/f/b/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c834c.  v0:= v3.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8350.  v1:= "ep" @kind object;
  #L1c8354.  call temp:= `createErrorVariable`(v4, v5, v1) @signature `Lc/f/b/d;.createErrorVariable:(ILjava/lang/String;)Lc/f/b/i;` @kind virtual;
  #L1c835a.  v1:= temp @kind object;
  #L1c835c.  v2:= 1.0F;
  #L1c8360.  call `put`(v0, v1, v2) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8366.  v0:= v3.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c836a.  v1:= "em" @kind object;
  #L1c836e.  call temp:= `createErrorVariable`(v4, v5, v1) @signature `Lc/f/b/d;.createErrorVariable:(ILjava/lang/String;)Lc/f/b/i;` @kind virtual;
  #L1c8374.  v4:= temp @kind object;
  #L1c8376.  v5:= -1.0F;
  #L1c837a.  call `put`(v0, v4, v5) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8380.  return v3 @kind object;
}
procedure `void` `addError`(`c.f.b.b` v3 @kind this, `c.f.b.i` v4 @kind object) @signature `Lc/f/b/b;.addError:(Lc/f/b/i;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c8d80.  v0:= v4.`c.f.b.i.e` @type ^`int`;
  #L1c8d84.  v1:= 1.0F;
  #L1c8d88.  v2:= 1I;
  #L1c8d8a.  if v0 != v2 then goto L1c8d90;
  #L1c8d8e.  goto L1c8dc4;
  #L1c8d90.  v2:= 2I;
  #L1c8d92.  if v0 != v2 then goto L1c8d9c;
  #L1c8d96.  v1:= 1000.0F;
  #L1c8d9a.  goto L1c8dc4;
  #L1c8d9c.  v2:= 3I;
  #L1c8d9e.  if v0 != v2 then goto L1c8daa;
  #L1c8da2.  v1:= 1232348160I;
  #L1c8da8.  goto L1c8dc4;
  #L1c8daa.  v2:= 4I;
  #L1c8dac.  if v0 != v2 then goto L1c8db8;
  #L1c8db0.  v1:= 1315859240I;
  #L1c8db6.  goto L1c8dc4;
  #L1c8db8.  v2:= 5I;
  #L1c8dba.  if v0 != v2 then goto L1c8dc4;
  #L1c8dbe.  v1:= 1399379109I;
  #L1c8dc4.  v0:= v3.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8dc8.  call `put`(v0, v4, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8dce.  return @kind void;
}
procedure `c.f.b.b` `b`(`c.f.b.b` v0 @kind this, `c.f.b.i` v1 @kind object, `int` v2 ) @signature `Lc/f/b/b;.b:(Lc/f/b/i;I)Lc/f/b/b;` @AccessFlag  {
    temp;

  #L1c84e4.  v0.`c.f.b.b.a` @type ^`c.f.b.i` := v1 @kind object;
  #L1c84e8.  v2:= (`float`) v2 @kind i2f;
  #L1c84ea.  v1.`c.f.b.i.f` @type ^`float` := v2;
  #L1c84ee.  v0.`c.f.b.b.b` @type ^`float` := v2;
  #L1c84f2.  v1:= 1I;
  #L1c84f4.  v0.`c.f.b.b.f` @type ^`boolean` := v1 @kind boolean;
  #L1c84f8.  return v0 @kind object;
}
procedure `c.f.b.i` `b`(`c.f.b.b` v14 @kind this, `c.f.b.d` v15 @kind object) @signature `Lc/f/b/b;.b:(Lc/f/b/d;)Lc/f/b/i;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L1c8818.  v0:= v14.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c881c.  call temp:= `getCurrentSize`(v0) @signature `Lc/f/b/b$a;.getCurrentSize:()I` @kind interface;
  #L1c8822.  v0:= temp;
  #L1c8824.  v1:= 0I;
  #L1c8826.  v2:= 0I;
  #L1c8828.  v3:= 0I;
  #L1c882a.  v4:= v1 @kind object;
  #L1c882c.  v5:= 0I;
  #L1c882e.  v6:= 0I;
  #L1c8830.  v7:= 0I;
  #L1c8832.  v8:= 0I;
  #L1c8834.  if v2 >= v0 then goto L1c88ea;
  #L1c8838.  v9:= v14.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c883c.  call temp:= `getVariableValue`(v9, v2) @signature `Lc/f/b/b$a;.getVariableValue:(I)F` @kind interface;
  #L1c8842.  v9:= temp;
  #L1c8844.  v10:= v14.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8848.  call temp:= `getVariable`(v10, v2) @signature `Lc/f/b/b$a;.getVariable:(I)Lc/f/b/i;` @kind interface;
  #L1c884e.  v10:= temp @kind object;
  #L1c8850.  v11:= v10.`c.f.b.i.j` @type ^`c.f.b.i$a` @kind object;
  #L1c8854.  v12:= `@@c.f.b.i$a.f` @type ^`c.f.b.i$a` @kind object;
  #L1c8858.  v13:= 1I;
  #L1c885a.  if v11 != v12 then goto L1c889c;
  #L1c885e.  if v1 != 0 then goto L1c8872;
  #L1c8862.  call temp:= `a`(v14, v10, v15) @signature `Lc/f/b/b;.a:(Lc/f/b/i;Lc/f/b/d;)Z` @kind direct;
  #L1c8868.  v1:= temp;
  #L1c886a.  v6:= v1;
  #L1c886c.  v5:= v9;
  #L1c886e.  v1:= v10 @kind object;
  #L1c8870.  goto L1c88e4;
  #L1c8872.  v11:= fcmpl(v5, v9);
  #L1c8876.  if v11 <= 0 then goto L1c8884;
  #L1c887a.  call temp:= `a`(v14, v10, v15) @signature `Lc/f/b/b;.a:(Lc/f/b/i;Lc/f/b/d;)Z` @kind direct;
  #L1c8880.  v1:= temp;
  #L1c8882.  goto L1c886a;
  #L1c8884.  if v6 != 0 then goto L1c88e4;
  #L1c8888.  call temp:= `a`(v14, v10, v15) @signature `Lc/f/b/b;.a:(Lc/f/b/i;Lc/f/b/d;)Z` @kind direct;
  #L1c888e.  v11:= temp;
  #L1c8890.  if v11 == 0 then goto L1c88e4;
  #L1c8894.  v5:= v9;
  #L1c8896.  v1:= v10 @kind object;
  #L1c8898.  v6:= 1I;
  #L1c889a.  goto L1c88e4;
  #L1c889c.  if v1 != 0 then goto L1c88e4;
  #L1c88a0.  v11:= fcmpg(v9, v3);
  #L1c88a4.  if v11 >= 0 then goto L1c88e4;
  #L1c88a8.  if v4 != 0 then goto L1c88bc;
  #L1c88ac.  call temp:= `a`(v14, v10, v15) @signature `Lc/f/b/b;.a:(Lc/f/b/i;Lc/f/b/d;)Z` @kind direct;
  #L1c88b2.  v4:= temp;
  #L1c88b4.  v8:= v4;
  #L1c88b6.  v7:= v9;
  #L1c88b8.  v4:= v10 @kind object;
  #L1c88ba.  goto L1c88e4;
  #L1c88bc.  v11:= fcmpl(v7, v9);
  #L1c88c0.  if v11 <= 0 then goto L1c88ce;
  #L1c88c4.  call temp:= `a`(v14, v10, v15) @signature `Lc/f/b/b;.a:(Lc/f/b/i;Lc/f/b/d;)Z` @kind direct;
  #L1c88ca.  v4:= temp;
  #L1c88cc.  goto L1c88b4;
  #L1c88ce.  if v8 != 0 then goto L1c88e4;
  #L1c88d2.  call temp:= `a`(v14, v10, v15) @signature `Lc/f/b/b;.a:(Lc/f/b/i;Lc/f/b/d;)Z` @kind direct;
  #L1c88d8.  v11:= temp;
  #L1c88da.  if v11 == 0 then goto L1c88e4;
  #L1c88de.  v7:= v9;
  #L1c88e0.  v4:= v10 @kind object;
  #L1c88e2.  v8:= 1I;
  #L1c88e4.  v2:= v2 + 1;
  #L1c88e8.  goto L1c8834;
  #L1c88ea.  if v1 == 0 then goto L1c88f0;
  #L1c88ee.  return v1 @kind object;
  #L1c88f0.  return v4 @kind object;
}
procedure `void` `b`(`c.f.b.b` v3 @kind this, `c.f.b.i` v4 @kind object) @signature `Lc/f/b/b;.b:(Lc/f/b/i;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1c8eac.  v0:= v3.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c8eb0.  v1:= -1.0F;
  #L1c8eb4.  if v0 == 0 then goto L1c8ed2;
  #L1c8eb8.  v2:= v3.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8ebc.  call `put`(v2, v0, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8ec2.  v0:= v3.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c8ec6.  v2:= -1I;
  #L1c8ec8.  v0.`c.f.b.i.d` @type ^`int` := v2;
  #L1c8ecc.  v0:= 0I;
  #L1c8ece.  v3.`c.f.b.b.a` @type ^`c.f.b.i` := v0 @kind object;
  #L1c8ed2.  v0:= v3.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8ed6.  v2:= 1I;
  #L1c8ed8.  call temp:= `remove`(v0, v4, v2) @signature `Lc/f/b/b$a;.remove:(Lc/f/b/i;Z)F` @kind interface;
  #L1c8ede.  v0:= temp;
  #L1c8ee0.  v0:= v0 * v1 @kind float;
  #L1c8ee4.  v3.`c.f.b.b.a` @type ^`c.f.b.i` := v4 @kind object;
  #L1c8ee8.  v4:= 1.0F;
  #L1c8eec.  v4:= fcmpl(v0, v4);
  #L1c8ef0.  if v4 != 0 then goto L1c8ef6;
  #L1c8ef4.  return @kind void;
  #L1c8ef6.  v4:= v3.`c.f.b.b.b` @type ^`float`;
  #L1c8efa.  v4:= v4 / v0 @kind float;
  #L1c8efc.  v3.`c.f.b.b.b` @type ^`float` := v4;
  #L1c8f00.  v4:= v3.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8f04.  call `divideByAmount`(v4, v0) @signature `Lc/f/b/b$a;.divideByAmount:(F)V` @kind interface;
  #L1c8f0a.  return @kind void;
}
procedure `boolean` `b`(`c.f.b.b` v2 @kind this) @signature `Lc/f/b/b;.b:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1c8a18.  v0:= v2.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c8a1c.  if v0 == 0 then goto L1c8a3e;
  #L1c8a20.  v0:= v0.`c.f.b.i.j` @type ^`c.f.b.i$a` @kind object;
  #L1c8a24.  v1:= `@@c.f.b.i$a.f` @type ^`c.f.b.i$a` @kind object;
  #L1c8a28.  if v0 == v1 then goto L1c8a3a;
  #L1c8a2c.  v0:= v2.`c.f.b.b.b` @type ^`float`;
  #L1c8a30.  v1:= 0I;
  #L1c8a32.  v0:= fcmpg(v0, v1);
  #L1c8a36.  if v0 < 0 then goto L1c8a3e;
  #L1c8a3a.  v0:= 1I;
  #L1c8a3c.  goto L1c8a40;
  #L1c8a3e.  v0:= 0I;
  #L1c8a40.  return v0;
}
procedure `java.lang.String` `c`(`c.f.b.b` v10 @kind this) @signature `Lc/f/b/b;.c:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1c8ad4.  v0:= v10.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c8ad8.  v1:= "" @kind object;
  #L1c8adc.  if v0 != 0 then goto L1c8b04;
  #L1c8ae0.  v0:= new `java.lang.StringBuilder`;
  #L1c8ae4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c8aea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8af0.  v1:= "0" @kind object;
  #L1c8af4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8afa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c8b00.  v0:= temp @kind object;
  #L1c8b02.  goto L1c8b26;
  #L1c8b04.  v0:= new `java.lang.StringBuilder`;
  #L1c8b08.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c8b0e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8b14.  v1:= v10.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c8b18.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8b1e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c8b24.  v0:= temp @kind object;
  #L1c8b26.  v1:= new `java.lang.StringBuilder`;
  #L1c8b2a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c8b30.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8b36.  v0:= " = " @kind object;
  #L1c8b3a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8b40.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c8b46.  v0:= temp @kind object;
  #L1c8b48.  v1:= v10.`c.f.b.b.b` @type ^`float`;
  #L1c8b4c.  v2:= 0I;
  #L1c8b4e.  v3:= 1I;
  #L1c8b50.  v4:= 0I;
  #L1c8b52.  v1:= fcmpl(v1, v4);
  #L1c8b56.  if v1 == 0 then goto L1c8b80;
  #L1c8b5a.  v1:= new `java.lang.StringBuilder`;
  #L1c8b5e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c8b64.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8b6a.  v0:= v10.`c.f.b.b.b` @type ^`float`;
  #L1c8b6e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8b74.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c8b7a.  v0:= temp @kind object;
  #L1c8b7c.  v1:= 1I;
  #L1c8b7e.  goto L1c8b82;
  #L1c8b80.  v1:= 0I;
  #L1c8b82.  v5:= v10.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8b86.  call temp:= `getCurrentSize`(v5) @signature `Lc/f/b/b$a;.getCurrentSize:()I` @kind interface;
  #L1c8b8c.  v5:= temp;
  #L1c8b8e.  if v2 >= v5 then goto L1c8cac;
  #L1c8b92.  v6:= v10.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8b96.  call temp:= `getVariable`(v6, v2) @signature `Lc/f/b/b$a;.getVariable:(I)Lc/f/b/i;` @kind interface;
  #L1c8b9c.  v6:= temp @kind object;
  #L1c8b9e.  if v6 != 0 then goto L1c8ba6;
  #L1c8ba2.  goto L1c8ca4;
  #L1c8ba6.  v7:= v10.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8baa.  call temp:= `getVariableValue`(v7, v2) @signature `Lc/f/b/b$a;.getVariableValue:(I)F` @kind interface;
  #L1c8bb0.  v7:= temp;
  #L1c8bb2.  v8:= fcmpl(v7, v4);
  #L1c8bb6.  if v8 != 0 then goto L1c8bbe;
  #L1c8bba.  goto L1c8ca4;
  #L1c8bbe.  call temp:= `toString`(v6) @signature `Lc/f/b/i;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c8bc4.  v6:= temp @kind object;
  #L1c8bc6.  v9:= -1.0F;
  #L1c8bca.  if v1 != 0 then goto L1c8bfa;
  #L1c8bce.  v1:= fcmpg(v7, v4);
  #L1c8bd2.  if v1 >= 0 then goto L1c8c48;
  #L1c8bd6.  v1:= new `java.lang.StringBuilder`;
  #L1c8bda.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c8be0.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8be6.  v0:= "- " @kind object;
  #L1c8bea.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8bf0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c8bf6.  v0:= temp @kind object;
  #L1c8bf8.  goto L1c8c44;
  #L1c8bfa.  if v8 <= 0 then goto L1c8c22;
  #L1c8bfe.  v1:= new `java.lang.StringBuilder`;
  #L1c8c02.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c8c08.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8c0e.  v0:= " + " @kind object;
  #L1c8c12.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8c18.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c8c1e.  v0:= temp @kind object;
  #L1c8c20.  goto L1c8c48;
  #L1c8c22.  v1:= new `java.lang.StringBuilder`;
  #L1c8c26.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c8c2c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8c32.  v0:= " - " @kind object;
  #L1c8c36.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8c3c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c8c42.  v0:= temp @kind object;
  #L1c8c44.  v7:= v7 * v9 @kind float;
  #L1c8c48.  v1:= 1.0F;
  #L1c8c4c.  v1:= fcmpl(v7, v1);
  #L1c8c50.  if v1 != 0 then goto L1c8c74;
  #L1c8c54.  v1:= new `java.lang.StringBuilder`;
  #L1c8c58.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c8c5e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8c64.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8c6a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c8c70.  v0:= temp @kind object;
  #L1c8c72.  goto L1c8ca2;
  #L1c8c74.  v1:= new `java.lang.StringBuilder`;
  #L1c8c78.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c8c7e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8c84.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8c8a.  v0:= " " @kind object;
  #L1c8c8e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8c94.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8c9a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c8ca0.  v0:= temp @kind object;
  #L1c8ca2.  v1:= 1I;
  #L1c8ca4.  v2:= v2 + 1;
  #L1c8ca8.  goto L1c8b8e;
  #L1c8cac.  if v1 != 0 then goto L1c8cd2;
  #L1c8cb0.  v1:= new `java.lang.StringBuilder`;
  #L1c8cb4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c8cba.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8cc0.  v0:= "0.0" @kind object;
  #L1c8cc4.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c8cca.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c8cd0.  v0:= temp @kind object;
  #L1c8cd2.  return v0 @kind object;
}
procedure `void` `clear`(`c.f.b.b` v1 @kind this) @signature `Lc/f/b/b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c8de0.  v0:= v1.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8de4.  call `clear`(v0) @signature `Lc/f/b/b$a;.clear:()V` @kind interface;
  #L1c8dea.  v0:= 0I;
  #L1c8dec.  v1.`c.f.b.b.a` @type ^`c.f.b.i` := v0 @kind object;
  #L1c8df0.  v0:= 0I;
  #L1c8df2.  v1.`c.f.b.b.b` @type ^`float` := v0;
  #L1c8df6.  return @kind void;
}
procedure `c.f.b.b` `createRowDimensionRatio`(`c.f.b.b` v2 @kind this, `c.f.b.i` v3 @kind object, `c.f.b.i` v4 @kind object, `c.f.b.i` v5 @kind object, `c.f.b.i` v6 @kind object, `float` v7 ) @signature `Lc/f/b/b;.createRowDimensionRatio:(Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;F)Lc/f/b/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c8538.  v0:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c853c.  v1:= -1.0F;
  #L1c8540.  call `put`(v0, v3, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8546.  v3:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c854a.  v0:= 1.0F;
  #L1c854e.  call `put`(v3, v4, v0) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8554.  v3:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8558.  call `put`(v3, v5, v7) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c855e.  v3:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8562.  v4:= -v7 @kind float;
  #L1c8564.  call `put`(v3, v6, v4) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c856a.  return v2 @kind object;
}
procedure `c.f.b.b` `createRowEqualMatchDimensions`(`c.f.b.b` v4 @kind this, `float` v5 , `float` v6 , `float` v7 , `c.f.b.i` v8 @kind object, `c.f.b.i` v9 @kind object, `c.f.b.i` v10 @kind object, `c.f.b.i` v11 @kind object) @signature `Lc/f/b/b;.createRowEqualMatchDimensions:(FFFLc/f/b/i;Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;)Lc/f/b/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c857c.  v0:= 0I;
  #L1c857e.  v4.`c.f.b.b.b` @type ^`float` := v0;
  #L1c8582.  v1:= -1.0F;
  #L1c8586.  v2:= 1.0F;
  #L1c858a.  v3:= fcmpl(v6, v0);
  #L1c858e.  if v3 == 0 then goto L1c860a;
  #L1c8592.  v3:= fcmpl(v5, v7);
  #L1c8596.  if v3 != 0 then goto L1c859c;
  #L1c859a.  goto L1c860a;
  #L1c859c.  v3:= fcmpl(v5, v0);
  #L1c85a0.  if v3 != 0 then goto L1c85ba;
  #L1c85a4.  v5:= v4.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c85a8.  call `put`(v5, v8, v2) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c85ae.  v5:= v4.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c85b2.  call `put`(v5, v9, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c85b8.  goto L1c8632;
  #L1c85ba.  v0:= fcmpl(v7, v0);
  #L1c85be.  if v0 != 0 then goto L1c85d8;
  #L1c85c2.  v5:= v4.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c85c6.  call `put`(v5, v10, v2) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c85cc.  v5:= v4.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c85d0.  call `put`(v5, v11, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c85d6.  goto L1c8632;
  #L1c85d8.  v5:= v5 / v6 @kind float;
  #L1c85da.  v7:= v7 / v6 @kind float;
  #L1c85dc.  v5:= v5 / v7 @kind float;
  #L1c85de.  v6:= v4.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c85e2.  call `put`(v6, v8, v2) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c85e8.  v6:= v4.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c85ec.  call `put`(v6, v9, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c85f2.  v6:= v4.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c85f6.  call `put`(v6, v11, v5) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c85fc.  v6:= v4.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8600.  v5:= -v5 @kind float;
  #L1c8602.  call `put`(v6, v10, v5) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8608.  goto L1c8632;
  #L1c860a.  v5:= v4.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c860e.  call `put`(v5, v8, v2) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8614.  v5:= v4.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8618.  call `put`(v5, v9, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c861e.  v5:= v4.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8622.  call `put`(v5, v11, v2) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8628.  v5:= v4.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c862c.  call `put`(v5, v10, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8632.  return v4 @kind object;
}
procedure `c.f.b.b` `createRowEquals`(`c.f.b.b` v1 @kind this, `c.f.b.i` v2 @kind object, `int` v3 ) @signature `Lc/f/b/b;.createRowEquals:(Lc/f/b/i;I)Lc/f/b/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c86a4.  if v3 >= 0 then goto L1c86c2;
  #L1c86a8.  v3:= v3 * -1;
  #L1c86ac.  v3:= (`float`) v3 @kind i2f;
  #L1c86ae.  v1.`c.f.b.b.b` @type ^`float` := v3;
  #L1c86b2.  v3:= v1.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c86b6.  v0:= 1.0F;
  #L1c86ba.  call `put`(v3, v2, v0) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c86c0.  goto L1c86d6;
  #L1c86c2.  v3:= (`float`) v3 @kind i2f;
  #L1c86c4.  v1.`c.f.b.b.b` @type ^`float` := v3;
  #L1c86c8.  v3:= v1.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c86cc.  v0:= -1.0F;
  #L1c86d0.  call `put`(v3, v2, v0) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c86d6.  return v1 @kind object;
}
procedure `c.f.b.b` `createRowEquals`(`c.f.b.b` v2 @kind this, `c.f.b.i` v3 @kind object, `c.f.b.i` v4 @kind object, `int` v5 ) @signature `Lc/f/b/b;.createRowEquals:(Lc/f/b/i;Lc/f/b/i;I)Lc/f/b/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c8644.  v0:= 0I;
  #L1c8646.  if v5 == 0 then goto L1c865a;
  #L1c864a.  if v5 >= 0 then goto L1c8654;
  #L1c864e.  v5:= v5 * -1;
  #L1c8652.  v0:= 1I;
  #L1c8654.  v5:= (`float`) v5 @kind i2f;
  #L1c8656.  v2.`c.f.b.b.b` @type ^`float` := v5;
  #L1c865a.  v5:= -1.0F;
  #L1c865e.  v1:= 1.0F;
  #L1c8662.  if v0 != 0 then goto L1c867c;
  #L1c8666.  v0:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c866a.  call `put`(v0, v3, v5) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8670.  v3:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8674.  call `put`(v3, v4, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c867a.  goto L1c8690;
  #L1c867c.  v0:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8680.  call `put`(v0, v3, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8686.  v3:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c868a.  call `put`(v3, v4, v5) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8690.  return v2 @kind object;
}
procedure `c.f.b.b` `createRowGreaterThan`(`c.f.b.b` v2 @kind this, `c.f.b.i` v3 @kind object, `c.f.b.i` v4 @kind object, `c.f.b.i` v5 @kind object, `int` v6 ) @signature `Lc/f/b/b;.createRowGreaterThan:(Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;I)Lc/f/b/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c86e8.  v0:= 0I;
  #L1c86ea.  if v6 == 0 then goto L1c86fe;
  #L1c86ee.  if v6 >= 0 then goto L1c86f8;
  #L1c86f2.  v6:= v6 * -1;
  #L1c86f6.  v0:= 1I;
  #L1c86f8.  v6:= (`float`) v6 @kind i2f;
  #L1c86fa.  v2.`c.f.b.b.b` @type ^`float` := v6;
  #L1c86fe.  v6:= -1.0F;
  #L1c8702.  v1:= 1.0F;
  #L1c8706.  if v0 != 0 then goto L1c872a;
  #L1c870a.  v0:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c870e.  call `put`(v0, v3, v6) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8714.  v3:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8718.  call `put`(v3, v4, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c871e.  v3:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8722.  call `put`(v3, v5, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8728.  goto L1c8748;
  #L1c872a.  v0:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c872e.  call `put`(v0, v3, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8734.  v3:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8738.  call `put`(v3, v4, v6) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c873e.  v3:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8742.  call `put`(v3, v5, v6) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8748.  return v2 @kind object;
}
procedure `c.f.b.b` `createRowLowerThan`(`c.f.b.b` v2 @kind this, `c.f.b.i` v3 @kind object, `c.f.b.i` v4 @kind object, `c.f.b.i` v5 @kind object, `int` v6 ) @signature `Lc/f/b/b;.createRowLowerThan:(Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;I)Lc/f/b/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c875c.  v0:= 0I;
  #L1c875e.  if v6 == 0 then goto L1c8772;
  #L1c8762.  if v6 >= 0 then goto L1c876c;
  #L1c8766.  v6:= v6 * -1;
  #L1c876a.  v0:= 1I;
  #L1c876c.  v6:= (`float`) v6 @kind i2f;
  #L1c876e.  v2.`c.f.b.b.b` @type ^`float` := v6;
  #L1c8772.  v6:= -1.0F;
  #L1c8776.  v1:= 1.0F;
  #L1c877a.  if v0 != 0 then goto L1c879e;
  #L1c877e.  v0:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8782.  call `put`(v0, v3, v6) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8788.  v3:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c878c.  call `put`(v3, v4, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8792.  v3:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8796.  call `put`(v3, v5, v6) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c879c.  goto L1c87bc;
  #L1c879e.  v0:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c87a2.  call `put`(v0, v3, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c87a8.  v3:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c87ac.  call `put`(v3, v4, v6) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c87b2.  v3:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c87b6.  call `put`(v3, v5, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c87bc.  return v2 @kind object;
}
procedure `c.f.b.b` `createRowWithAngle`(`c.f.b.b` v2 @kind this, `c.f.b.i` v3 @kind object, `c.f.b.i` v4 @kind object, `c.f.b.i` v5 @kind object, `c.f.b.i` v6 @kind object, `float` v7 ) @signature `Lc/f/b/b;.createRowWithAngle:(Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;Lc/f/b/i;F)Lc/f/b/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c87d0.  v0:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c87d4.  v1:= 0.5F;
  #L1c87d8.  call `put`(v0, v5, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c87de.  v5:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c87e2.  call `put`(v5, v6, v1) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c87e8.  v5:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c87ec.  v6:= -0.5F;
  #L1c87f0.  call `put`(v5, v3, v6) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c87f6.  v3:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c87fa.  call `put`(v3, v4, v6) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @kind interface;
  #L1c8800.  v3:= -v7 @kind float;
  #L1c8802.  v2.`c.f.b.b.b` @type ^`float` := v3;
  #L1c8806.  return v2 @kind object;
}
procedure `c.f.b.i` `getKey`(`c.f.b.b` v1 @kind this) @signature `Lc/f/b/b;.getKey:()Lc/f/b/i;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c8904.  v0:= v1.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c8908.  return v0 @kind object;
}
procedure `c.f.b.i` `getPivotCandidate`(`c.f.b.b` v0 @kind this, `c.f.b.d` v1 @kind object, `boolean`[] v2 @kind object) @signature `Lc/f/b/b;.getPivotCandidate:(Lc/f/b/d;[Z)Lc/f/b/i;` @AccessFlag PUBLIC {
    temp;

  #L1c891c.  v1:= 0I;
  #L1c891e.  call temp:= `a`(v0, v2, v1) @signature `Lc/f/b/b;.a:([ZLc/f/b/i;)Lc/f/b/i;` @kind direct;
  #L1c8924.  v1:= temp @kind object;
  #L1c8926.  return v1 @kind object;
}
procedure `void` `initFromRow`(`c.f.b.b` v5 @kind this, `c.f.b.d$a` v6 @kind object) @signature `Lc/f/b/b;.initFromRow:(Lc/f/b/d$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c8e40.  v0:= instanceof @variable v6 @type ^`c.f.b.b` @kind boolean;
  #L1c8e44.  if v0 == 0 then goto L1c8e98;
  #L1c8e48.  v6:= (`c.f.b.b`) v6 @kind object;
  #L1c8e4c.  v0:= 0I;
  #L1c8e4e.  v5.`c.f.b.b.a` @type ^`c.f.b.i` := v0 @kind object;
  #L1c8e52.  v0:= v5.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8e56.  call `clear`(v0) @signature `Lc/f/b/b$a;.clear:()V` @kind interface;
  #L1c8e5c.  v0:= 0I;
  #L1c8e5e.  v1:= v6.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8e62.  call temp:= `getCurrentSize`(v1) @signature `Lc/f/b/b$a;.getCurrentSize:()I` @kind interface;
  #L1c8e68.  v1:= temp;
  #L1c8e6a.  if v0 >= v1 then goto L1c8e98;
  #L1c8e6e.  v1:= v6.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8e72.  call temp:= `getVariable`(v1, v0) @signature `Lc/f/b/b$a;.getVariable:(I)Lc/f/b/i;` @kind interface;
  #L1c8e78.  v1:= temp @kind object;
  #L1c8e7a.  v2:= v6.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8e7e.  call temp:= `getVariableValue`(v2, v0) @signature `Lc/f/b/b$a;.getVariableValue:(I)F` @kind interface;
  #L1c8e84.  v2:= temp;
  #L1c8e86.  v3:= v5.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8e8a.  v4:= 1I;
  #L1c8e8c.  call `add`(v3, v1, v2, v4) @signature `Lc/f/b/b$a;.add:(Lc/f/b/i;FZ)V` @kind interface;
  #L1c8e92.  v0:= v0 + 1;
  #L1c8e96.  goto L1c8e5e;
  #L1c8e98.  return @kind void;
}
procedure `boolean` `isEmpty`(`c.f.b.b` v2 @kind this) @signature `Lc/f/b/b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c8a74.  v0:= v2.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c8a78.  if v0 != 0 then goto L1c8a9e;
  #L1c8a7c.  v0:= v2.`c.f.b.b.b` @type ^`float`;
  #L1c8a80.  v1:= 0I;
  #L1c8a82.  v0:= fcmpl(v0, v1);
  #L1c8a86.  if v0 != 0 then goto L1c8a9e;
  #L1c8a8a.  v0:= v2.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8a8e.  call temp:= `getCurrentSize`(v0) @signature `Lc/f/b/b$a;.getCurrentSize:()I` @kind interface;
  #L1c8a94.  v0:= temp;
  #L1c8a96.  if v0 != 0 then goto L1c8a9e;
  #L1c8a9a.  v0:= 1I;
  #L1c8a9c.  goto L1c8aa0;
  #L1c8a9e.  v0:= 0I;
  #L1c8aa0.  return v0;
}
procedure `c.f.b.i` `pickPivot`(`c.f.b.b` v1 @kind this, `c.f.b.i` v2 @kind object) @signature `Lc/f/b/b;.pickPivot:(Lc/f/b/i;)Lc/f/b/i;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c8938.  v0:= 0I;
  #L1c893a.  call temp:= `a`(v1, v0, v2) @signature `Lc/f/b/b;.a:([ZLc/f/b/i;)Lc/f/b/i;` @kind direct;
  #L1c8940.  v2:= temp @kind object;
  #L1c8942.  return v2 @kind object;
}
procedure `void` `reset`(`c.f.b.b` v1 @kind this) @signature `Lc/f/b/b;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c8f1c.  v0:= 0I;
  #L1c8f1e.  v1.`c.f.b.b.a` @type ^`c.f.b.i` := v0 @kind object;
  #L1c8f22.  v0:= v1.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8f26.  call `clear`(v0) @signature `Lc/f/b/b$a;.clear:()V` @kind interface;
  #L1c8f2c.  v0:= 0I;
  #L1c8f2e.  v1.`c.f.b.b.b` @type ^`float` := v0;
  #L1c8f32.  v0:= 0I;
  #L1c8f34.  v1.`c.f.b.b.f` @type ^`boolean` := v0 @kind boolean;
  #L1c8f38.  return @kind void;
}
procedure `java.lang.String` `toString`(`c.f.b.b` v1 @kind this) @signature `Lc/f/b/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c8ce4.  call temp:= `c`(v1) @signature `Lc/f/b/b;.c:()Ljava/lang/String;` @kind virtual;
  #L1c8cea.  v0:= temp @kind object;
  #L1c8cec.  return v0 @kind object;
}
procedure `void` `updateFromFinalVariable`(`c.f.b.b` v3 @kind this, `c.f.b.d` v4 @kind object, `c.f.b.i` v5 @kind object, `boolean` v6 ) @signature `Lc/f/b/b;.updateFromFinalVariable:(Lc/f/b/d;Lc/f/b/i;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c8f4c.  v0:= v5.`c.f.b.i.g` @type ^`boolean` @kind boolean;
  #L1c8f50.  if v0 != 0 then goto L1c8f56;
  #L1c8f54.  return @kind void;
  #L1c8f56.  v0:= v3.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8f5a.  call temp:= `get`(v0, v5) @signature `Lc/f/b/b$a;.get:(Lc/f/b/i;)F` @kind interface;
  #L1c8f60.  v0:= temp;
  #L1c8f62.  v1:= v3.`c.f.b.b.b` @type ^`float`;
  #L1c8f66.  v2:= v5.`c.f.b.i.f` @type ^`float`;
  #L1c8f6a.  v2:= v2 * v0 @kind float;
  #L1c8f6e.  v1:= v1 + v2 @kind float;
  #L1c8f70.  v3.`c.f.b.b.b` @type ^`float` := v1;
  #L1c8f74.  v0:= v3.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8f78.  call temp:= `remove`(v0, v5, v6) @signature `Lc/f/b/b$a;.remove:(Lc/f/b/i;Z)F` @kind interface;
  #L1c8f7e.  if v6 == 0 then goto L1c8f88;
  #L1c8f82.  call `removeFromRow`(v5, v3) @signature `Lc/f/b/i;.removeFromRow:(Lc/f/b/b;)V` @kind virtual;
  #L1c8f88.  v6:= `@@c.f.b.d.t` @type ^`boolean` @kind boolean;
  #L1c8f8c.  if v6 == 0 then goto L1c8fae;
  #L1c8f90.  if v5 == 0 then goto L1c8fae;
  #L1c8f94.  v5:= v3.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8f98.  call temp:= `getCurrentSize`(v5) @signature `Lc/f/b/b$a;.getCurrentSize:()I` @kind interface;
  #L1c8f9e.  v5:= temp;
  #L1c8fa0.  if v5 != 0 then goto L1c8fae;
  #L1c8fa4.  v5:= 1I;
  #L1c8fa6.  v3.`c.f.b.b.f` @type ^`boolean` := v5 @kind boolean;
  #L1c8faa.  v4.`c.f.b.d.a` @type ^`boolean` := v5 @kind boolean;
  #L1c8fae.  return @kind void;
}
procedure `void` `updateFromRow`(`c.f.b.b` v3 @kind this, `c.f.b.d` v4 @kind object, `c.f.b.b` v5 @kind object, `boolean` v6 ) @signature `Lc/f/b/b;.updateFromRow:(Lc/f/b/d;Lc/f/b/b;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c8fc0.  v0:= v3.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c8fc4.  call temp:= `use`(v0, v5, v6) @signature `Lc/f/b/b$a;.use:(Lc/f/b/b;Z)F` @kind interface;
  #L1c8fca.  v0:= temp;
  #L1c8fcc.  v1:= v3.`c.f.b.b.b` @type ^`float`;
  #L1c8fd0.  v2:= v5.`c.f.b.b.b` @type ^`float`;
  #L1c8fd4.  v2:= v2 * v0 @kind float;
  #L1c8fd8.  v1:= v1 + v2 @kind float;
  #L1c8fda.  v3.`c.f.b.b.b` @type ^`float` := v1;
  #L1c8fde.  if v6 == 0 then goto L1c8fec;
  #L1c8fe2.  v5:= v5.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c8fe6.  call `removeFromRow`(v5, v3) @signature `Lc/f/b/i;.removeFromRow:(Lc/f/b/b;)V` @kind virtual;
  #L1c8fec.  v5:= `@@c.f.b.d.t` @type ^`boolean` @kind boolean;
  #L1c8ff0.  if v5 == 0 then goto L1c9016;
  #L1c8ff4.  v5:= v3.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c8ff8.  if v5 == 0 then goto L1c9016;
  #L1c8ffc.  v5:= v3.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c9000.  call temp:= `getCurrentSize`(v5) @signature `Lc/f/b/b$a;.getCurrentSize:()I` @kind interface;
  #L1c9006.  v5:= temp;
  #L1c9008.  if v5 != 0 then goto L1c9016;
  #L1c900c.  v5:= 1I;
  #L1c900e.  v3.`c.f.b.b.f` @type ^`boolean` := v5 @kind boolean;
  #L1c9012.  v4.`c.f.b.d.a` @type ^`boolean` := v5 @kind boolean;
  #L1c9016.  return @kind void;
}
procedure `void` `updateFromSynonymVariable`(`c.f.b.b` v4 @kind this, `c.f.b.d` v5 @kind object, `c.f.b.i` v6 @kind object, `boolean` v7 ) @signature `Lc/f/b/b;.updateFromSynonymVariable:(Lc/f/b/d;Lc/f/b/i;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c9028.  v0:= v6.`c.f.b.i.n` @type ^`boolean` @kind boolean;
  #L1c902c.  if v0 != 0 then goto L1c9032;
  #L1c9030.  return @kind void;
  #L1c9032.  v0:= v4.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c9036.  call temp:= `get`(v0, v6) @signature `Lc/f/b/b$a;.get:(Lc/f/b/i;)F` @kind interface;
  #L1c903c.  v0:= temp;
  #L1c903e.  v1:= v4.`c.f.b.b.b` @type ^`float`;
  #L1c9042.  v2:= v6.`c.f.b.i.p` @type ^`float`;
  #L1c9046.  v2:= v2 * v0 @kind float;
  #L1c904a.  v1:= v1 + v2 @kind float;
  #L1c904c.  v4.`c.f.b.b.b` @type ^`float` := v1;
  #L1c9050.  v1:= v4.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c9054.  call temp:= `remove`(v1, v6, v7) @signature `Lc/f/b/b$a;.remove:(Lc/f/b/i;Z)F` @kind interface;
  #L1c905a.  if v7 == 0 then goto L1c9064;
  #L1c905e.  call `removeFromRow`(v6, v4) @signature `Lc/f/b/i;.removeFromRow:(Lc/f/b/b;)V` @kind virtual;
  #L1c9064.  v1:= v4.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c9068.  v2:= v5.`c.f.b.d.n` @type ^`c.f.b.c` @kind object;
  #L1c906c.  v2:= v2.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1c9070.  v3:= v6.`c.f.b.i.o` @type ^`int`;
  #L1c9074.  v2:= v2[v3] @kind object;
  #L1c9078.  call `add`(v1, v2, v0, v7) @signature `Lc/f/b/b$a;.add:(Lc/f/b/i;FZ)V` @kind interface;
  #L1c907e.  v7:= `@@c.f.b.d.t` @type ^`boolean` @kind boolean;
  #L1c9082.  if v7 == 0 then goto L1c90a4;
  #L1c9086.  if v6 == 0 then goto L1c90a4;
  #L1c908a.  v6:= v4.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c908e.  call temp:= `getCurrentSize`(v6) @signature `Lc/f/b/b$a;.getCurrentSize:()I` @kind interface;
  #L1c9094.  v6:= temp;
  #L1c9096.  if v6 != 0 then goto L1c90a4;
  #L1c909a.  v6:= 1I;
  #L1c909c.  v4.`c.f.b.b.f` @type ^`boolean` := v6 @kind boolean;
  #L1c90a0.  v5.`c.f.b.d.a` @type ^`boolean` := v6 @kind boolean;
  #L1c90a4.  return @kind void;
}
procedure `void` `updateFromSystem`(`c.f.b.b` v8 @kind this, `c.f.b.d` v9 @kind object) @signature `Lc/f/b/b;.updateFromSystem:(Lc/f/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1c90b8.  v0:= v9.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1c90bc.  v0:= length @variable v0;
  #L1c90be.  if v0 != 0 then goto L1c90c4;
  #L1c90c2.  return @kind void;
  #L1c90c4.  v0:= 0I;
  #L1c90c6.  v1:= 0I;
  #L1c90c8.  v2:= 1I;
  #L1c90ca.  if v1 != 0 then goto L1c9184;
  #L1c90ce.  v3:= v8.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c90d2.  call temp:= `getCurrentSize`(v3) @signature `Lc/f/b/b$a;.getCurrentSize:()I` @kind interface;
  #L1c90d8.  v3:= temp;
  #L1c90da.  v4:= 0I;
  #L1c90dc.  if v4 >= v3 then goto L1c9116;
  #L1c90e0.  v5:= v8.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c90e4.  call temp:= `getVariable`(v5, v4) @signature `Lc/f/b/b$a;.getVariable:(I)Lc/f/b/i;` @kind interface;
  #L1c90ea.  v5:= temp @kind object;
  #L1c90ec.  v6:= v5.`c.f.b.i.d` @type ^`int`;
  #L1c90f0.  v7:= -1I;
  #L1c90f2.  if v6 != v7 then goto L1c9106;
  #L1c90f6.  v6:= v5.`c.f.b.i.g` @type ^`boolean` @kind boolean;
  #L1c90fa.  if v6 != 0 then goto L1c9106;
  #L1c90fe.  v6:= v5.`c.f.b.i.n` @type ^`boolean` @kind boolean;
  #L1c9102.  if v6 == 0 then goto L1c9110;
  #L1c9106.  v6:= v8.`c.f.b.b.d` @type ^`java.util.ArrayList` @kind object;
  #L1c910a.  call temp:= `add`(v6, v5) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c9110.  v4:= v4 + 1;
  #L1c9114.  goto L1c90dc;
  #L1c9116.  v3:= v8.`c.f.b.b.d` @type ^`java.util.ArrayList` @kind object;
  #L1c911a.  call temp:= `size`(v3) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1c9120.  v3:= temp;
  #L1c9122.  if v3 <= 0 then goto L1c9180;
  #L1c9126.  v4:= 0I;
  #L1c9128.  if v4 >= v3 then goto L1c9174;
  #L1c912c.  v5:= v8.`c.f.b.b.d` @type ^`java.util.ArrayList` @kind object;
  #L1c9130.  call temp:= `get`(v5, v4) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1c9136.  v5:= temp @kind object;
  #L1c9138.  v5:= (`c.f.b.i`) v5 @kind object;
  #L1c913c.  v6:= v5.`c.f.b.i.g` @type ^`boolean` @kind boolean;
  #L1c9140.  if v6 == 0 then goto L1c914c;
  #L1c9144.  call `updateFromFinalVariable`(v8, v9, v5, v2) @signature `Lc/f/b/b;.updateFromFinalVariable:(Lc/f/b/d;Lc/f/b/i;Z)V` @kind virtual;
  #L1c914a.  goto L1c916e;
  #L1c914c.  v6:= v5.`c.f.b.i.n` @type ^`boolean` @kind boolean;
  #L1c9150.  if v6 == 0 then goto L1c915c;
  #L1c9154.  call `updateFromSynonymVariable`(v8, v9, v5, v2) @signature `Lc/f/b/b;.updateFromSynonymVariable:(Lc/f/b/d;Lc/f/b/i;Z)V` @kind virtual;
  #L1c915a.  goto L1c916e;
  #L1c915c.  v6:= v9.`c.f.b.d.g` @type ^`c.f.b.b`[] @kind object;
  #L1c9160.  v5:= v5.`c.f.b.i.d` @type ^`int`;
  #L1c9164.  v5:= v6[v5] @kind object;
  #L1c9168.  call `updateFromRow`(v8, v9, v5, v2) @signature `Lc/f/b/b;.updateFromRow:(Lc/f/b/d;Lc/f/b/b;Z)V` @kind virtual;
  #L1c916e.  v4:= v4 + 1;
  #L1c9172.  goto L1c9128;
  #L1c9174.  v2:= v8.`c.f.b.b.d` @type ^`java.util.ArrayList` @kind object;
  #L1c9178.  call `clear`(v2) @signature `Ljava/util/ArrayList;.clear:()V` @kind virtual;
  #L1c917e.  goto L1c90c8;
  #L1c9180.  v1:= 1I;
  #L1c9182.  goto L1c90c8;
  #L1c9184.  v0:= `@@c.f.b.d.t` @type ^`boolean` @kind boolean;
  #L1c9188.  if v0 == 0 then goto L1c91ac;
  #L1c918c.  v0:= v8.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c9190.  if v0 == 0 then goto L1c91ac;
  #L1c9194.  v0:= v8.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c9198.  call temp:= `getCurrentSize`(v0) @signature `Lc/f/b/b$a;.getCurrentSize:()I` @kind interface;
  #L1c919e.  v0:= temp;
  #L1c91a0.  if v0 != 0 then goto L1c91ac;
  #L1c91a4.  v8.`c.f.b.b.f` @type ^`boolean` := v2 @kind boolean;
  #L1c91a8.  v9.`c.f.b.d.a` @type ^`boolean` := v2 @kind boolean;
  #L1c91ac.  return @kind void;
}
