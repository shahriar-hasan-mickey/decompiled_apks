record `c.f.b.h$b` @kind class @AccessFlag  extends `java.lang.Comparable` @kind interface {
  `c.f.b.i` `c.f.b.h$b.f` @AccessFlag ;
  `c.f.b.h` `c.f.b.h$b.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.f.b.h$b` v0 @kind this, `c.f.b.h` v1 @kind object, `c.f.b.h` v2 @kind object) @signature `Lc/f/b/h$b;.<init>:(Lc/f/b/h;Lc/f/b/h;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1ca82c.  v0.`c.f.b.h$b.g` @type ^`c.f.b.h` := v1 @kind object;
  #L1ca830.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ca836.  return @kind void;
}
procedure `boolean` `addToGoal`(`c.f.b.h$b` v9 @kind this, `c.f.b.i` v10 @kind object, `float` v11 ) @signature `Lc/f/b/h$b;.addToGoal:(Lc/f/b/i;F)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1ca608.  v0:= v9.`c.f.b.h$b.f` @type ^`c.f.b.i` @kind object;
  #L1ca60c.  v0:= v0.`c.f.b.i.a` @type ^`boolean` @kind boolean;
  #L1ca610.  v1:= 953267991I;
  #L1ca616.  v2:= 9I;
  #L1ca61a.  v3:= 0I;
  #L1ca61c.  v4:= 1I;
  #L1ca61e.  v5:= 0I;
  #L1ca620.  if v0 == 0 then goto L1ca686;
  #L1ca624.  v0:= 0I;
  #L1ca626.  if v0 >= v2 then goto L1ca672;
  #L1ca62a.  v6:= v9.`c.f.b.h$b.f` @type ^`c.f.b.i` @kind object;
  #L1ca62e.  v6:= v6.`c.f.b.i.i` @type ^`float`[] @kind object;
  #L1ca632.  v7:= v6[v0];
  #L1ca636.  v8:= v10.`c.f.b.i.i` @type ^`float`[] @kind object;
  #L1ca63a.  v8:= v8[v0];
  #L1ca63e.  v8:= v8 * v11 @kind float;
  #L1ca642.  v7:= v7 + v8 @kind float;
  #L1ca644.  v6[v0]:= v7;
  #L1ca648.  v6:= v6[v0];
  #L1ca64c.  call temp:= `abs`(v6) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L1ca652.  v6:= temp;
  #L1ca654.  v6:= fcmpg(v6, v1);
  #L1ca658.  if v6 >= 0 then goto L1ca66a;
  #L1ca65c.  v6:= v9.`c.f.b.h$b.f` @type ^`c.f.b.i` @kind object;
  #L1ca660.  v6:= v6.`c.f.b.i.i` @type ^`float`[] @kind object;
  #L1ca664.  v6[v0]:= v3;
  #L1ca668.  goto L1ca66c;
  #L1ca66a.  v4:= 0I;
  #L1ca66c.  v0:= v0 + 1;
  #L1ca670.  goto L1ca626;
  #L1ca672.  if v4 == 0 then goto L1ca684;
  #L1ca676.  v10:= v9.`c.f.b.h$b.g` @type ^`c.f.b.h` @kind object;
  #L1ca67a.  v11:= v9.`c.f.b.h$b.f` @type ^`c.f.b.i` @kind object;
  #L1ca67e.  call `a`(v10, v11) @signature `Lc/f/b/h;.a:(Lc/f/b/h;Lc/f/b/i;)V` @kind static;
  #L1ca684.  return v5;
  #L1ca686.  if v5 >= v2 then goto L1ca6d0;
  #L1ca68a.  v0:= v10.`c.f.b.i.i` @type ^`float`[] @kind object;
  #L1ca68e.  v0:= v0[v5];
  #L1ca692.  v6:= fcmpl(v0, v3);
  #L1ca696.  if v6 == 0 then goto L1ca6be;
  #L1ca69a.  v0:= v0 * v11 @kind float;
  #L1ca69e.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L1ca6a4.  v6:= temp;
  #L1ca6a6.  v6:= fcmpg(v6, v1);
  #L1ca6aa.  if v6 >= 0 then goto L1ca6b0;
  #L1ca6ae.  v0:= 0I;
  #L1ca6b0.  v6:= v9.`c.f.b.h$b.f` @type ^`c.f.b.i` @kind object;
  #L1ca6b4.  v6:= v6.`c.f.b.i.i` @type ^`float`[] @kind object;
  #L1ca6b8.  v6[v5]:= v0;
  #L1ca6bc.  goto L1ca6ca;
  #L1ca6be.  v0:= v9.`c.f.b.h$b.f` @type ^`c.f.b.i` @kind object;
  #L1ca6c2.  v0:= v0.`c.f.b.i.i` @type ^`float`[] @kind object;
  #L1ca6c6.  v0[v5]:= v3;
  #L1ca6ca.  v5:= v5 + 1;
  #L1ca6ce.  goto L1ca686;
  #L1ca6d0.  return v4;
}
procedure `int` `compareTo`(`c.f.b.h$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/f/b/h$b;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ca778.  v2:= (`c.f.b.i`) v2 @kind object;
  #L1ca77c.  v0:= v1.`c.f.b.h$b.f` @type ^`c.f.b.i` @kind object;
  #L1ca780.  v0:= v0.`c.f.b.i.c` @type ^`int`;
  #L1ca784.  v2:= v2.`c.f.b.i.c` @type ^`int`;
  #L1ca788.  v0:= v0 - v2 @kind int;
  #L1ca78a.  return v0;
}
procedure `void` `init`(`c.f.b.h$b` v0 @kind this, `c.f.b.i` v1 @kind object) @signature `Lc/f/b/h$b;.init:(Lc/f/b/i;)V` @AccessFlag PUBLIC {
    temp;

  #L1ca848.  v0.`c.f.b.h$b.f` @type ^`c.f.b.i` := v1 @kind object;
  #L1ca84c.  return @kind void;
}
procedure `boolean` `isNegative`(`c.f.b.h$b` v5 @kind this) @signature `Lc/f/b/h$b;.isNegative:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ca6e4.  v0:= 8I;
  #L1ca6e8.  v1:= 0I;
  #L1ca6ea.  if v0 < 0 then goto L1ca718;
  #L1ca6ee.  v2:= v5.`c.f.b.h$b.f` @type ^`c.f.b.i` @kind object;
  #L1ca6f2.  v2:= v2.`c.f.b.i.i` @type ^`float`[] @kind object;
  #L1ca6f6.  v2:= v2[v0];
  #L1ca6fa.  v3:= 0I;
  #L1ca6fc.  v4:= fcmpl(v2, v3);
  #L1ca700.  if v4 <= 0 then goto L1ca706;
  #L1ca704.  return v1;
  #L1ca706.  v1:= fcmpg(v2, v3);
  #L1ca70a.  if v1 >= 0 then goto L1ca712;
  #L1ca70e.  v0:= 1I;
  #L1ca710.  return v0;
  #L1ca712.  v0:= v0 + -1;
  #L1ca716.  goto L1ca6e8;
  #L1ca718.  return v1;
}
procedure `boolean` `isSmallerThan`(`c.f.b.h$b` v5 @kind this, `c.f.b.i` v6 @kind object) @signature `Lc/f/b/h$b;.isSmallerThan:(Lc/f/b/i;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ca72c.  v0:= 8I;
  #L1ca730.  v1:= 0I;
  #L1ca732.  if v0 < 0 then goto L1ca764;
  #L1ca736.  v2:= v6.`c.f.b.i.i` @type ^`float`[] @kind object;
  #L1ca73a.  v2:= v2[v0];
  #L1ca73e.  v3:= v5.`c.f.b.h$b.f` @type ^`c.f.b.i` @kind object;
  #L1ca742.  v3:= v3.`c.f.b.i.i` @type ^`float`[] @kind object;
  #L1ca746.  v3:= v3[v0];
  #L1ca74a.  v4:= fcmpl(v3, v2);
  #L1ca74e.  if v4 != 0 then goto L1ca758;
  #L1ca752.  v0:= v0 + -1;
  #L1ca756.  goto L1ca730;
  #L1ca758.  v6:= fcmpg(v3, v2);
  #L1ca75c.  if v6 >= 0 then goto L1ca764;
  #L1ca760.  v6:= 1I;
  #L1ca762.  return v6;
  #L1ca764.  return v1;
}
procedure `void` `reset`(`c.f.b.h$b` v2 @kind this) @signature `Lc/f/b/h$b;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ca860.  v0:= v2.`c.f.b.h$b.f` @type ^`c.f.b.i` @kind object;
  #L1ca864.  v0:= v0.`c.f.b.i.i` @type ^`float`[] @kind object;
  #L1ca868.  v1:= 0I;
  #L1ca86a.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([FF)V` @kind static;
  #L1ca870.  return @kind void;
}
procedure `java.lang.String` `toString`(`c.f.b.h$b` v3 @kind this) @signature `Lc/f/b/h$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1ca79c.  v0:= v3.`c.f.b.h$b.f` @type ^`c.f.b.i` @kind object;
  #L1ca7a0.  v1:= "[ " @kind object;
  #L1ca7a4.  if v0 == 0 then goto L1ca7ec;
  #L1ca7a8.  v0:= 0I;
  #L1ca7aa.  v2:= 9I;
  #L1ca7ae.  if v0 >= v2 then goto L1ca7ec;
  #L1ca7b2.  v2:= new `java.lang.StringBuilder`;
  #L1ca7b6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ca7bc.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ca7c2.  v1:= v3.`c.f.b.h$b.f` @type ^`c.f.b.i` @kind object;
  #L1ca7c6.  v1:= v1.`c.f.b.i.i` @type ^`float`[] @kind object;
  #L1ca7ca.  v1:= v1[v0];
  #L1ca7ce.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ca7d4.  v1:= " " @kind object;
  #L1ca7d8.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ca7de.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ca7e4.  v1:= temp @kind object;
  #L1ca7e6.  v0:= v0 + 1;
  #L1ca7ea.  goto L1ca7aa;
  #L1ca7ec.  v0:= new `java.lang.StringBuilder`;
  #L1ca7f0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ca7f6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ca7fc.  v1:= "] " @kind object;
  #L1ca800.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ca806.  v1:= v3.`c.f.b.h$b.f` @type ^`c.f.b.i` @kind object;
  #L1ca80a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ca810.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ca816.  v0:= temp @kind object;
  #L1ca818.  return v0 @kind object;
}
