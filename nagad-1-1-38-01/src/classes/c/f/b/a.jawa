record `c.f.b.a` @kind class @AccessFlag PUBLIC extends `c.f.b.b$a` @kind interface {
  `int` `c.f.b.a.a` @AccessFlag ;
  `c.f.b.b` `c.f.b.a.b` @AccessFlag PRIVATE_FINAL;
  `c.f.b.c` `c.f.b.a.c` @AccessFlag PROTECTED_FINAL;
  `int` `c.f.b.a.d` @AccessFlag PRIVATE;
  `c.f.b.i` `c.f.b.a.e` @AccessFlag PRIVATE;
  `int`[] `c.f.b.a.f` @AccessFlag PRIVATE;
  `int`[] `c.f.b.a.g` @AccessFlag PRIVATE;
  `float`[] `c.f.b.a.h` @AccessFlag PRIVATE;
  `int` `c.f.b.a.i` @AccessFlag PRIVATE;
  `int` `c.f.b.a.j` @AccessFlag PRIVATE;
  `boolean` `c.f.b.a.k` @AccessFlag PRIVATE;
}
global `float` `@@c.f.b.a.l` @AccessFlag PRIVATE_STATIC;
procedure `void` `<init>`(`c.f.b.a` v3 @kind this, `c.f.b.b` v4 @kind object, `c.f.b.c` v5 @kind object) @signature `Lc/f/b/a;.<init>:(Lc/f/b/b;Lc/f/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1c7d28.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c7d2e.  v0:= 0I;
  #L1c7d30.  v3.`c.f.b.a.a` @type ^`int` := v0;
  #L1c7d34.  v1:= 8I;
  #L1c7d38.  v3.`c.f.b.a.d` @type ^`int` := v1;
  #L1c7d3c.  v1:= 0I;
  #L1c7d3e.  v3.`c.f.b.a.e` @type ^`c.f.b.i` := v1 @kind object;
  #L1c7d42.  v1:= v3.`c.f.b.a.d` @type ^`int`;
  #L1c7d46.  v2:= new `int`[v1];
  #L1c7d4a.  v3.`c.f.b.a.f` @type ^`int`[] := v2 @kind object;
  #L1c7d4e.  v2:= new `int`[v1];
  #L1c7d52.  v3.`c.f.b.a.g` @type ^`int`[] := v2 @kind object;
  #L1c7d56.  v1:= new `float`[v1];
  #L1c7d5a.  v3.`c.f.b.a.h` @type ^`float`[] := v1 @kind object;
  #L1c7d5e.  v1:= -1I;
  #L1c7d60.  v3.`c.f.b.a.i` @type ^`int` := v1;
  #L1c7d64.  v3.`c.f.b.a.j` @type ^`int` := v1;
  #L1c7d68.  v3.`c.f.b.a.k` @type ^`boolean` := v0 @kind boolean;
  #L1c7d6c.  v3.`c.f.b.a.b` @type ^`c.f.b.b` := v4 @kind object;
  #L1c7d70.  v3.`c.f.b.a.c` @type ^`c.f.b.c` := v5 @kind object;
  #L1c7d74.  return @kind void;
}
procedure `void` `add`(`c.f.b.a` v9 @kind this, `c.f.b.i` v10 @kind object, `float` v11 , `boolean` v12 ) @signature `Lc/f/b/a;.add:(Lc/f/b/i;FZ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1c7d88.  v0:= `@@c.f.b.a.l` @type ^`float`;
  #L1c7d8c.  v1:= -v0 @kind float;
  #L1c7d8e.  v1:= fcmpl(v11, v1);
  #L1c7d92.  if v1 <= 0 then goto L1c7da0;
  #L1c7d96.  v0:= fcmpg(v11, v0);
  #L1c7d9a.  if v0 >= 0 then goto L1c7da0;
  #L1c7d9e.  return @kind void;
  #L1c7da0.  v0:= v9.`c.f.b.a.i` @type ^`int`;
  #L1c7da4.  v1:= 0I;
  #L1c7da6.  v2:= -1I;
  #L1c7da8.  v3:= 1I;
  #L1c7daa.  if v0 != v2 then goto L1c7e1e;
  #L1c7dae.  v9.`c.f.b.a.i` @type ^`int` := v1;
  #L1c7db2.  v12:= v9.`c.f.b.a.h` @type ^`float`[] @kind object;
  #L1c7db6.  v0:= v9.`c.f.b.a.i` @type ^`int`;
  #L1c7dba.  v12[v0]:= v11;
  #L1c7dbe.  v11:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c7dc2.  v12:= v10.`c.f.b.i.c` @type ^`int`;
  #L1c7dc6.  v11[v0]:= v12;
  #L1c7dca.  v11:= v9.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c7dce.  v11[v0]:= v2;
  #L1c7dd2.  v11:= v10.`c.f.b.i.m` @type ^`int`;
  #L1c7dd6.  v11:= v11 + v3 @kind int;
  #L1c7dd8.  v10.`c.f.b.i.m` @type ^`int` := v11;
  #L1c7ddc.  v11:= v9.`c.f.b.a.b` @type ^`c.f.b.b` @kind object;
  #L1c7de0.  call `addToRow`(v10, v11) @signature `Lc/f/b/i;.addToRow:(Lc/f/b/b;)V` @kind virtual;
  #L1c7de6.  v10:= v9.`c.f.b.a.a` @type ^`int`;
  #L1c7dea.  v10:= v10 + v3 @kind int;
  #L1c7dec.  v9.`c.f.b.a.a` @type ^`int` := v10;
  #L1c7df0.  v10:= v9.`c.f.b.a.k` @type ^`boolean` @kind boolean;
  #L1c7df4.  if v10 != 0 then goto L1c7e1c;
  #L1c7df8.  v10:= v9.`c.f.b.a.j` @type ^`int`;
  #L1c7dfc.  v10:= v10 + v3 @kind int;
  #L1c7dfe.  v9.`c.f.b.a.j` @type ^`int` := v10;
  #L1c7e02.  v10:= v9.`c.f.b.a.j` @type ^`int`;
  #L1c7e06.  v11:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c7e0a.  v12:= length @variable v11;
  #L1c7e0c.  if v10 < v12 then goto L1c7e1c;
  #L1c7e10.  v9.`c.f.b.a.k` @type ^`boolean` := v3 @kind boolean;
  #L1c7e14.  v10:= length @variable v11;
  #L1c7e16.  v10:= v10 - v3 @kind int;
  #L1c7e18.  v9.`c.f.b.a.j` @type ^`int` := v10;
  #L1c7e1c.  return @kind void;
  #L1c7e1e.  v4:= 0I;
  #L1c7e20.  v5:= -1I;
  #L1c7e22.  if v0 == v2 then goto L1c7edc;
  #L1c7e26.  v6:= v9.`c.f.b.a.a` @type ^`int`;
  #L1c7e2a.  if v4 >= v6 then goto L1c7edc;
  #L1c7e2e.  v6:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c7e32.  v7:= v6[v0];
  #L1c7e36.  v8:= v10.`c.f.b.i.c` @type ^`int`;
  #L1c7e3a.  if v7 != v8 then goto L1c7ec4;
  #L1c7e3e.  v1:= v9.`c.f.b.a.h` @type ^`float`[] @kind object;
  #L1c7e42.  v1:= v1[v0];
  #L1c7e46.  v1:= v1 + v11 @kind float;
  #L1c7e48.  v11:= `@@c.f.b.a.l` @type ^`float`;
  #L1c7e4c.  v2:= -v11 @kind float;
  #L1c7e4e.  v4:= 0I;
  #L1c7e50.  v2:= fcmpl(v1, v2);
  #L1c7e54.  if v2 <= 0 then goto L1c7e62;
  #L1c7e58.  v11:= fcmpg(v1, v11);
  #L1c7e5c.  if v11 >= 0 then goto L1c7e62;
  #L1c7e60.  v1:= 0I;
  #L1c7e62.  v11:= v9.`c.f.b.a.h` @type ^`float`[] @kind object;
  #L1c7e66.  v11[v0]:= v1;
  #L1c7e6a.  v11:= fcmpl(v1, v4);
  #L1c7e6e.  if v11 != 0 then goto L1c7ec2;
  #L1c7e72.  v11:= v9.`c.f.b.a.i` @type ^`int`;
  #L1c7e76.  if v0 != v11 then goto L1c7e88;
  #L1c7e7a.  v11:= v9.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c7e7e.  v11:= v11[v0];
  #L1c7e82.  v9.`c.f.b.a.i` @type ^`int` := v11;
  #L1c7e86.  goto L1c7e94;
  #L1c7e88.  v11:= v9.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c7e8c.  v1:= v11[v0];
  #L1c7e90.  v11[v5]:= v1;
  #L1c7e94.  if v12 == 0 then goto L1c7ea2;
  #L1c7e98.  v11:= v9.`c.f.b.a.b` @type ^`c.f.b.b` @kind object;
  #L1c7e9c.  call `removeFromRow`(v10, v11) @signature `Lc/f/b/i;.removeFromRow:(Lc/f/b/b;)V` @kind virtual;
  #L1c7ea2.  v11:= v9.`c.f.b.a.k` @type ^`boolean` @kind boolean;
  #L1c7ea6.  if v11 == 0 then goto L1c7eae;
  #L1c7eaa.  v9.`c.f.b.a.j` @type ^`int` := v0;
  #L1c7eae.  v11:= v10.`c.f.b.i.m` @type ^`int`;
  #L1c7eb2.  v11:= v11 - v3 @kind int;
  #L1c7eb4.  v10.`c.f.b.i.m` @type ^`int` := v11;
  #L1c7eb8.  v10:= v9.`c.f.b.a.a` @type ^`int`;
  #L1c7ebc.  v10:= v10 - v3 @kind int;
  #L1c7ebe.  v9.`c.f.b.a.a` @type ^`int` := v10;
  #L1c7ec2.  return @kind void;
  #L1c7ec4.  v6:= v6[v0];
  #L1c7ec8.  if v6 >= v8 then goto L1c7ece;
  #L1c7ecc.  v5:= v0;
  #L1c7ece.  v6:= v9.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c7ed2.  v0:= v6[v0];
  #L1c7ed6.  v4:= v4 + 1;
  #L1c7eda.  goto L1c7e22;
  #L1c7edc.  v12:= v9.`c.f.b.a.j` @type ^`int`;
  #L1c7ee0.  v0:= v12 + 1;
  #L1c7ee4.  v4:= v9.`c.f.b.a.k` @type ^`boolean` @kind boolean;
  #L1c7ee8.  if v4 == 0 then goto L1c7efe;
  #L1c7eec.  v0:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c7ef0.  v4:= v0[v12];
  #L1c7ef4.  if v4 != v2 then goto L1c7efa;
  #L1c7ef8.  goto L1c7f00;
  #L1c7efa.  v12:= length @variable v0;
  #L1c7efc.  goto L1c7f00;
  #L1c7efe.  v12:= v0;
  #L1c7f00.  v0:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c7f04.  v4:= length @variable v0;
  #L1c7f06.  if v12 < v4 then goto L1c7f32;
  #L1c7f0a.  v4:= v9.`c.f.b.a.a` @type ^`int`;
  #L1c7f0e.  v0:= length @variable v0;
  #L1c7f10.  if v4 >= v0 then goto L1c7f32;
  #L1c7f14.  v0:= 0I;
  #L1c7f16.  v4:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c7f1a.  v6:= length @variable v4;
  #L1c7f1c.  if v0 >= v6 then goto L1c7f32;
  #L1c7f20.  v4:= v4[v0];
  #L1c7f24.  if v4 != v2 then goto L1c7f2c;
  #L1c7f28.  v12:= v0;
  #L1c7f2a.  goto L1c7f32;
  #L1c7f2c.  v0:= v0 + 1;
  #L1c7f30.  goto L1c7f16;
  #L1c7f32.  v0:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c7f36.  v4:= length @variable v0;
  #L1c7f38.  if v12 < v4 then goto L1c7f92;
  #L1c7f3c.  v12:= length @variable v0;
  #L1c7f3e.  v0:= v9.`c.f.b.a.d` @type ^`int`;
  #L1c7f42.  v0:= v0 * 2;
  #L1c7f46.  v9.`c.f.b.a.d` @type ^`int` := v0;
  #L1c7f4a.  v9.`c.f.b.a.k` @type ^`boolean` := v1 @kind boolean;
  #L1c7f4e.  v0:= v12 + -1;
  #L1c7f52.  v9.`c.f.b.a.j` @type ^`int` := v0;
  #L1c7f56.  v0:= v9.`c.f.b.a.h` @type ^`float`[] @kind object;
  #L1c7f5a.  v1:= v9.`c.f.b.a.d` @type ^`int`;
  #L1c7f5e.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([FI)[F` @kind static;
  #L1c7f64.  v0:= temp @kind object;
  #L1c7f66.  v9.`c.f.b.a.h` @type ^`float`[] := v0 @kind object;
  #L1c7f6a.  v0:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c7f6e.  v1:= v9.`c.f.b.a.d` @type ^`int`;
  #L1c7f72.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L1c7f78.  v0:= temp @kind object;
  #L1c7f7a.  v9.`c.f.b.a.f` @type ^`int`[] := v0 @kind object;
  #L1c7f7e.  v0:= v9.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c7f82.  v1:= v9.`c.f.b.a.d` @type ^`int`;
  #L1c7f86.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L1c7f8c.  v0:= temp @kind object;
  #L1c7f8e.  v9.`c.f.b.a.g` @type ^`int`[] := v0 @kind object;
  #L1c7f92.  v0:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c7f96.  v1:= v10.`c.f.b.i.c` @type ^`int`;
  #L1c7f9a.  v0[v12]:= v1;
  #L1c7f9e.  v0:= v9.`c.f.b.a.h` @type ^`float`[] @kind object;
  #L1c7fa2.  v0[v12]:= v11;
  #L1c7fa6.  if v5 == v2 then goto L1c7fbc;
  #L1c7faa.  v11:= v9.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c7fae.  v0:= v11[v5];
  #L1c7fb2.  v11[v12]:= v0;
  #L1c7fb6.  v11[v5]:= v12;
  #L1c7fba.  goto L1c7fcc;
  #L1c7fbc.  v11:= v9.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c7fc0.  v0:= v9.`c.f.b.a.i` @type ^`int`;
  #L1c7fc4.  v11[v12]:= v0;
  #L1c7fc8.  v9.`c.f.b.a.i` @type ^`int` := v12;
  #L1c7fcc.  v11:= v10.`c.f.b.i.m` @type ^`int`;
  #L1c7fd0.  v11:= v11 + v3 @kind int;
  #L1c7fd2.  v10.`c.f.b.i.m` @type ^`int` := v11;
  #L1c7fd6.  v11:= v9.`c.f.b.a.b` @type ^`c.f.b.b` @kind object;
  #L1c7fda.  call `addToRow`(v10, v11) @signature `Lc/f/b/i;.addToRow:(Lc/f/b/b;)V` @kind virtual;
  #L1c7fe0.  v10:= v9.`c.f.b.a.a` @type ^`int`;
  #L1c7fe4.  v10:= v10 + v3 @kind int;
  #L1c7fe6.  v9.`c.f.b.a.a` @type ^`int` := v10;
  #L1c7fea.  v10:= v9.`c.f.b.a.k` @type ^`boolean` @kind boolean;
  #L1c7fee.  if v10 != 0 then goto L1c7ffc;
  #L1c7ff2.  v10:= v9.`c.f.b.a.j` @type ^`int`;
  #L1c7ff6.  v10:= v10 + v3 @kind int;
  #L1c7ff8.  v9.`c.f.b.a.j` @type ^`int` := v10;
  #L1c7ffc.  v10:= v9.`c.f.b.a.j` @type ^`int`;
  #L1c8000.  v11:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c8004.  v12:= length @variable v11;
  #L1c8006.  if v10 < v12 then goto L1c8016;
  #L1c800a.  v9.`c.f.b.a.k` @type ^`boolean` := v3 @kind boolean;
  #L1c800e.  v10:= length @variable v11;
  #L1c8010.  v10:= v10 - v3 @kind int;
  #L1c8012.  v9.`c.f.b.a.j` @type ^`int` := v10;
  #L1c8016.  return @kind void;
}
procedure `void` `clear`(`c.f.b.a` v5 @kind this) @signature `Lc/f/b/a;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c8028.  v0:= v5.`c.f.b.a.i` @type ^`int`;
  #L1c802c.  v1:= 0I;
  #L1c802e.  v2:= 0I;
  #L1c8030.  v3:= -1I;
  #L1c8032.  if v0 == v3 then goto L1c806e;
  #L1c8036.  v4:= v5.`c.f.b.a.a` @type ^`int`;
  #L1c803a.  if v2 >= v4 then goto L1c806e;
  #L1c803e.  v3:= v5.`c.f.b.a.c` @type ^`c.f.b.c` @kind object;
  #L1c8042.  v3:= v3.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1c8046.  v4:= v5.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c804a.  v4:= v4[v0];
  #L1c804e.  v3:= v3[v4] @kind object;
  #L1c8052.  if v3 == 0 then goto L1c8060;
  #L1c8056.  v4:= v5.`c.f.b.a.b` @type ^`c.f.b.b` @kind object;
  #L1c805a.  call `removeFromRow`(v3, v4) @signature `Lc/f/b/i;.removeFromRow:(Lc/f/b/b;)V` @kind virtual;
  #L1c8060.  v3:= v5.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c8064.  v0:= v3[v0];
  #L1c8068.  v2:= v2 + 1;
  #L1c806c.  goto L1c8030;
  #L1c806e.  v5.`c.f.b.a.i` @type ^`int` := v3;
  #L1c8072.  v5.`c.f.b.a.j` @type ^`int` := v3;
  #L1c8076.  v5.`c.f.b.a.k` @type ^`boolean` := v1 @kind boolean;
  #L1c807a.  v5.`c.f.b.a.a` @type ^`int` := v1;
  #L1c807e.  return @kind void;
}
procedure `boolean` `contains`(`c.f.b.a` v6 @kind this, `c.f.b.i` v7 @kind object) @signature `Lc/f/b/a;.contains:(Lc/f/b/i;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1c7a4c.  v0:= v6.`c.f.b.a.i` @type ^`int`;
  #L1c7a50.  v1:= -1I;
  #L1c7a52.  v2:= 0I;
  #L1c7a54.  if v0 != v1 then goto L1c7a5a;
  #L1c7a58.  return v2;
  #L1c7a5a.  v3:= 0I;
  #L1c7a5c.  if v0 == v1 then goto L1c7a8a;
  #L1c7a60.  v4:= v6.`c.f.b.a.a` @type ^`int`;
  #L1c7a64.  if v3 >= v4 then goto L1c7a8a;
  #L1c7a68.  v4:= v6.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c7a6c.  v4:= v4[v0];
  #L1c7a70.  v5:= v7.`c.f.b.i.c` @type ^`int`;
  #L1c7a74.  if v4 != v5 then goto L1c7a7c;
  #L1c7a78.  v7:= 1I;
  #L1c7a7a.  return v7;
  #L1c7a7c.  v4:= v6.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c7a80.  v0:= v4[v0];
  #L1c7a84.  v3:= v3 + 1;
  #L1c7a88.  goto L1c7a5c;
  #L1c7a8a.  return v2;
}
procedure `void` `divideByAmount`(`c.f.b.a` v4 @kind this, `float` v5 ) @signature `Lc/f/b/a;.divideByAmount:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c8090.  v0:= v4.`c.f.b.a.i` @type ^`int`;
  #L1c8094.  v1:= 0I;
  #L1c8096.  v2:= -1I;
  #L1c8098.  if v0 == v2 then goto L1c80c0;
  #L1c809c.  v2:= v4.`c.f.b.a.a` @type ^`int`;
  #L1c80a0.  if v1 >= v2 then goto L1c80c0;
  #L1c80a4.  v2:= v4.`c.f.b.a.h` @type ^`float`[] @kind object;
  #L1c80a8.  v3:= v2[v0];
  #L1c80ac.  v3:= v3 / v5 @kind float;
  #L1c80ae.  v2[v0]:= v3;
  #L1c80b2.  v2:= v4.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c80b6.  v0:= v2[v0];
  #L1c80ba.  v1:= v1 + 1;
  #L1c80be.  goto L1c8096;
  #L1c80c0.  return @kind void;
}
procedure `float` `get`(`c.f.b.a` v4 @kind this, `c.f.b.i` v5 @kind object) @signature `Lc/f/b/a;.get:(Lc/f/b/i;)F` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c7a9c.  v0:= v4.`c.f.b.a.i` @type ^`int`;
  #L1c7aa0.  v1:= 0I;
  #L1c7aa2.  v2:= -1I;
  #L1c7aa4.  if v0 == v2 then goto L1c7ad8;
  #L1c7aa8.  v2:= v4.`c.f.b.a.a` @type ^`int`;
  #L1c7aac.  if v1 >= v2 then goto L1c7ad8;
  #L1c7ab0.  v2:= v4.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c7ab4.  v2:= v2[v0];
  #L1c7ab8.  v3:= v5.`c.f.b.i.c` @type ^`int`;
  #L1c7abc.  if v2 != v3 then goto L1c7aca;
  #L1c7ac0.  v5:= v4.`c.f.b.a.h` @type ^`float`[] @kind object;
  #L1c7ac4.  v5:= v5[v0];
  #L1c7ac8.  return v5;
  #L1c7aca.  v2:= v4.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c7ace.  v0:= v2[v0];
  #L1c7ad2.  v1:= v1 + 1;
  #L1c7ad6.  goto L1c7aa2;
  #L1c7ad8.  v5:= 0I;
  #L1c7ada.  return v5;
}
procedure `int` `getCurrentSize`(`c.f.b.a` v1 @kind this) @signature `Lc/f/b/a;.getCurrentSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c7c54.  v0:= v1.`c.f.b.a.a` @type ^`int`;
  #L1c7c58.  return v0;
}
procedure `c.f.b.i` `getVariable`(`c.f.b.a` v3 @kind this, `int` v4 ) @signature `Lc/f/b/a;.getVariable:(I)Lc/f/b/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c79fc.  v0:= v3.`c.f.b.a.i` @type ^`int`;
  #L1c7a00.  v1:= 0I;
  #L1c7a02.  v2:= -1I;
  #L1c7a04.  if v0 == v2 then goto L1c7a38;
  #L1c7a08.  v2:= v3.`c.f.b.a.a` @type ^`int`;
  #L1c7a0c.  if v1 >= v2 then goto L1c7a38;
  #L1c7a10.  if v1 != v4 then goto L1c7a2a;
  #L1c7a14.  v4:= v3.`c.f.b.a.c` @type ^`c.f.b.c` @kind object;
  #L1c7a18.  v4:= v4.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1c7a1c.  v1:= v3.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c7a20.  v0:= v1[v0];
  #L1c7a24.  v4:= v4[v0] @kind object;
  #L1c7a28.  return v4 @kind object;
  #L1c7a2a.  v2:= v3.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c7a2e.  v0:= v2[v0];
  #L1c7a32.  v1:= v1 + 1;
  #L1c7a36.  goto L1c7a02;
  #L1c7a38.  v4:= 0I;
  #L1c7a3a.  return v4 @kind object;
}
procedure `float` `getVariableValue`(`c.f.b.a` v3 @kind this, `int` v4 ) @signature `Lc/f/b/a;.getVariableValue:(I)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c7aec.  v0:= v3.`c.f.b.a.i` @type ^`int`;
  #L1c7af0.  v1:= 0I;
  #L1c7af2.  v2:= -1I;
  #L1c7af4.  if v0 == v2 then goto L1c7b1c;
  #L1c7af8.  v2:= v3.`c.f.b.a.a` @type ^`int`;
  #L1c7afc.  if v1 >= v2 then goto L1c7b1c;
  #L1c7b00.  if v1 != v4 then goto L1c7b0e;
  #L1c7b04.  v4:= v3.`c.f.b.a.h` @type ^`float`[] @kind object;
  #L1c7b08.  v4:= v4[v0];
  #L1c7b0c.  return v4;
  #L1c7b0e.  v2:= v3.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c7b12.  v0:= v2[v0];
  #L1c7b16.  v1:= v1 + 1;
  #L1c7b1a.  goto L1c7af2;
  #L1c7b1c.  v4:= 0I;
  #L1c7b1e.  return v4;
}
procedure `void` `invert`(`c.f.b.a` v5 @kind this) @signature `Lc/f/b/a;.invert:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c80d4.  v0:= v5.`c.f.b.a.i` @type ^`int`;
  #L1c80d8.  v1:= 0I;
  #L1c80da.  v2:= -1I;
  #L1c80dc.  if v0 == v2 then goto L1c810a;
  #L1c80e0.  v2:= v5.`c.f.b.a.a` @type ^`int`;
  #L1c80e4.  if v1 >= v2 then goto L1c810a;
  #L1c80e8.  v2:= v5.`c.f.b.a.h` @type ^`float`[] @kind object;
  #L1c80ec.  v3:= v2[v0];
  #L1c80f0.  v4:= -1.0F;
  #L1c80f4.  v3:= v3 * v4 @kind float;
  #L1c80f8.  v2[v0]:= v3;
  #L1c80fc.  v2:= v5.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c8100.  v0:= v2[v0];
  #L1c8104.  v1:= v1 + 1;
  #L1c8108.  goto L1c80da;
  #L1c810a.  return @kind void;
}
procedure `void` `put`(`c.f.b.a` v9 @kind this, `c.f.b.i` v10 @kind object, `float` v11 ) @signature `Lc/f/b/a;.put:(Lc/f/b/i;F)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1c811c.  v0:= 1I;
  #L1c811e.  v1:= 0I;
  #L1c8120.  v1:= fcmpl(v11, v1);
  #L1c8124.  if v1 != 0 then goto L1c8130;
  #L1c8128.  call temp:= `remove`(v9, v10, v0) @signature `Lc/f/b/a;.remove:(Lc/f/b/i;Z)F` @kind virtual;
  #L1c812e.  return @kind void;
  #L1c8130.  v1:= v9.`c.f.b.a.i` @type ^`int`;
  #L1c8134.  v2:= 0I;
  #L1c8136.  v3:= -1I;
  #L1c8138.  if v1 != v3 then goto L1c81ac;
  #L1c813c.  v9.`c.f.b.a.i` @type ^`int` := v2;
  #L1c8140.  v1:= v9.`c.f.b.a.h` @type ^`float`[] @kind object;
  #L1c8144.  v2:= v9.`c.f.b.a.i` @type ^`int`;
  #L1c8148.  v1[v2]:= v11;
  #L1c814c.  v11:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c8150.  v1:= v10.`c.f.b.i.c` @type ^`int`;
  #L1c8154.  v11[v2]:= v1;
  #L1c8158.  v11:= v9.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c815c.  v11[v2]:= v3;
  #L1c8160.  v11:= v10.`c.f.b.i.m` @type ^`int`;
  #L1c8164.  v11:= v11 + v0 @kind int;
  #L1c8166.  v10.`c.f.b.i.m` @type ^`int` := v11;
  #L1c816a.  v11:= v9.`c.f.b.a.b` @type ^`c.f.b.b` @kind object;
  #L1c816e.  call `addToRow`(v10, v11) @signature `Lc/f/b/i;.addToRow:(Lc/f/b/b;)V` @kind virtual;
  #L1c8174.  v10:= v9.`c.f.b.a.a` @type ^`int`;
  #L1c8178.  v10:= v10 + v0 @kind int;
  #L1c817a.  v9.`c.f.b.a.a` @type ^`int` := v10;
  #L1c817e.  v10:= v9.`c.f.b.a.k` @type ^`boolean` @kind boolean;
  #L1c8182.  if v10 != 0 then goto L1c81aa;
  #L1c8186.  v10:= v9.`c.f.b.a.j` @type ^`int`;
  #L1c818a.  v10:= v10 + v0 @kind int;
  #L1c818c.  v9.`c.f.b.a.j` @type ^`int` := v10;
  #L1c8190.  v10:= v9.`c.f.b.a.j` @type ^`int`;
  #L1c8194.  v11:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c8198.  v1:= length @variable v11;
  #L1c819a.  if v10 < v1 then goto L1c81aa;
  #L1c819e.  v9.`c.f.b.a.k` @type ^`boolean` := v0 @kind boolean;
  #L1c81a2.  v10:= length @variable v11;
  #L1c81a4.  v10:= v10 - v0 @kind int;
  #L1c81a6.  v9.`c.f.b.a.j` @type ^`int` := v10;
  #L1c81aa.  return @kind void;
  #L1c81ac.  v4:= 0I;
  #L1c81ae.  v5:= -1I;
  #L1c81b0.  if v1 == v3 then goto L1c81ee;
  #L1c81b4.  v6:= v9.`c.f.b.a.a` @type ^`int`;
  #L1c81b8.  if v4 >= v6 then goto L1c81ee;
  #L1c81bc.  v6:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c81c0.  v7:= v6[v1];
  #L1c81c4.  v8:= v10.`c.f.b.i.c` @type ^`int`;
  #L1c81c8.  if v7 != v8 then goto L1c81d6;
  #L1c81cc.  v10:= v9.`c.f.b.a.h` @type ^`float`[] @kind object;
  #L1c81d0.  v10[v1]:= v11;
  #L1c81d4.  return @kind void;
  #L1c81d6.  v6:= v6[v1];
  #L1c81da.  if v6 >= v8 then goto L1c81e0;
  #L1c81de.  v5:= v1;
  #L1c81e0.  v6:= v9.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c81e4.  v1:= v6[v1];
  #L1c81e8.  v4:= v4 + 1;
  #L1c81ec.  goto L1c81b0;
  #L1c81ee.  v1:= v9.`c.f.b.a.j` @type ^`int`;
  #L1c81f2.  v4:= v1 + 1;
  #L1c81f6.  v6:= v9.`c.f.b.a.k` @type ^`boolean` @kind boolean;
  #L1c81fa.  if v6 == 0 then goto L1c8210;
  #L1c81fe.  v4:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c8202.  v6:= v4[v1];
  #L1c8206.  if v6 != v3 then goto L1c820c;
  #L1c820a.  goto L1c8212;
  #L1c820c.  v1:= length @variable v4;
  #L1c820e.  goto L1c8212;
  #L1c8210.  v1:= v4;
  #L1c8212.  v4:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c8216.  v6:= length @variable v4;
  #L1c8218.  if v1 < v6 then goto L1c8244;
  #L1c821c.  v6:= v9.`c.f.b.a.a` @type ^`int`;
  #L1c8220.  v4:= length @variable v4;
  #L1c8222.  if v6 >= v4 then goto L1c8244;
  #L1c8226.  v4:= 0I;
  #L1c8228.  v6:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c822c.  v7:= length @variable v6;
  #L1c822e.  if v4 >= v7 then goto L1c8244;
  #L1c8232.  v6:= v6[v4];
  #L1c8236.  if v6 != v3 then goto L1c823e;
  #L1c823a.  v1:= v4;
  #L1c823c.  goto L1c8244;
  #L1c823e.  v4:= v4 + 1;
  #L1c8242.  goto L1c8228;
  #L1c8244.  v4:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c8248.  v6:= length @variable v4;
  #L1c824a.  if v1 < v6 then goto L1c82a4;
  #L1c824e.  v1:= length @variable v4;
  #L1c8250.  v4:= v9.`c.f.b.a.d` @type ^`int`;
  #L1c8254.  v4:= v4 * 2;
  #L1c8258.  v9.`c.f.b.a.d` @type ^`int` := v4;
  #L1c825c.  v9.`c.f.b.a.k` @type ^`boolean` := v2 @kind boolean;
  #L1c8260.  v2:= v1 + -1;
  #L1c8264.  v9.`c.f.b.a.j` @type ^`int` := v2;
  #L1c8268.  v2:= v9.`c.f.b.a.h` @type ^`float`[] @kind object;
  #L1c826c.  v4:= v9.`c.f.b.a.d` @type ^`int`;
  #L1c8270.  call temp:= `copyOf`(v2, v4) @signature `Ljava/util/Arrays;.copyOf:([FI)[F` @kind static;
  #L1c8276.  v2:= temp @kind object;
  #L1c8278.  v9.`c.f.b.a.h` @type ^`float`[] := v2 @kind object;
  #L1c827c.  v2:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c8280.  v4:= v9.`c.f.b.a.d` @type ^`int`;
  #L1c8284.  call temp:= `copyOf`(v2, v4) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L1c828a.  v2:= temp @kind object;
  #L1c828c.  v9.`c.f.b.a.f` @type ^`int`[] := v2 @kind object;
  #L1c8290.  v2:= v9.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c8294.  v4:= v9.`c.f.b.a.d` @type ^`int`;
  #L1c8298.  call temp:= `copyOf`(v2, v4) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L1c829e.  v2:= temp @kind object;
  #L1c82a0.  v9.`c.f.b.a.g` @type ^`int`[] := v2 @kind object;
  #L1c82a4.  v2:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c82a8.  v4:= v10.`c.f.b.i.c` @type ^`int`;
  #L1c82ac.  v2[v1]:= v4;
  #L1c82b0.  v2:= v9.`c.f.b.a.h` @type ^`float`[] @kind object;
  #L1c82b4.  v2[v1]:= v11;
  #L1c82b8.  if v5 == v3 then goto L1c82ce;
  #L1c82bc.  v11:= v9.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c82c0.  v2:= v11[v5];
  #L1c82c4.  v11[v1]:= v2;
  #L1c82c8.  v11[v5]:= v1;
  #L1c82cc.  goto L1c82de;
  #L1c82ce.  v11:= v9.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c82d2.  v2:= v9.`c.f.b.a.i` @type ^`int`;
  #L1c82d6.  v11[v1]:= v2;
  #L1c82da.  v9.`c.f.b.a.i` @type ^`int` := v1;
  #L1c82de.  v11:= v10.`c.f.b.i.m` @type ^`int`;
  #L1c82e2.  v11:= v11 + v0 @kind int;
  #L1c82e4.  v10.`c.f.b.i.m` @type ^`int` := v11;
  #L1c82e8.  v11:= v9.`c.f.b.a.b` @type ^`c.f.b.b` @kind object;
  #L1c82ec.  call `addToRow`(v10, v11) @signature `Lc/f/b/i;.addToRow:(Lc/f/b/b;)V` @kind virtual;
  #L1c82f2.  v10:= v9.`c.f.b.a.a` @type ^`int`;
  #L1c82f6.  v10:= v10 + v0 @kind int;
  #L1c82f8.  v9.`c.f.b.a.a` @type ^`int` := v10;
  #L1c82fc.  v10:= v9.`c.f.b.a.k` @type ^`boolean` @kind boolean;
  #L1c8300.  if v10 != 0 then goto L1c830e;
  #L1c8304.  v10:= v9.`c.f.b.a.j` @type ^`int`;
  #L1c8308.  v10:= v10 + v0 @kind int;
  #L1c830a.  v9.`c.f.b.a.j` @type ^`int` := v10;
  #L1c830e.  v10:= v9.`c.f.b.a.a` @type ^`int`;
  #L1c8312.  v11:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c8316.  v11:= length @variable v11;
  #L1c8318.  if v10 < v11 then goto L1c8320;
  #L1c831c.  v9.`c.f.b.a.k` @type ^`boolean` := v0 @kind boolean;
  #L1c8320.  v10:= v9.`c.f.b.a.j` @type ^`int`;
  #L1c8324.  v11:= v9.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c8328.  v1:= length @variable v11;
  #L1c832a.  if v10 < v1 then goto L1c833a;
  #L1c832e.  v9.`c.f.b.a.k` @type ^`boolean` := v0 @kind boolean;
  #L1c8332.  v10:= length @variable v11;
  #L1c8334.  v10:= v10 - v0 @kind int;
  #L1c8336.  v9.`c.f.b.a.j` @type ^`int` := v10;
  #L1c833a.  return @kind void;
}
procedure `float` `remove`(`c.f.b.a` v8 @kind this, `c.f.b.i` v9 @kind object, `boolean` v10 ) @signature `Lc/f/b/a;.remove:(Lc/f/b/i;Z)F` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1c7b30.  v0:= v8.`c.f.b.a.e` @type ^`c.f.b.i` @kind object;
  #L1c7b34.  if v0 != v9 then goto L1c7b3e;
  #L1c7b38.  v0:= 0I;
  #L1c7b3a.  v8.`c.f.b.a.e` @type ^`c.f.b.i` := v0 @kind object;
  #L1c7b3e.  v0:= v8.`c.f.b.a.i` @type ^`int`;
  #L1c7b42.  v1:= 0I;
  #L1c7b44.  v2:= -1I;
  #L1c7b46.  if v0 != v2 then goto L1c7b4c;
  #L1c7b4a.  return v1;
  #L1c7b4c.  v3:= 0I;
  #L1c7b4e.  v4:= -1I;
  #L1c7b50.  if v0 == v2 then goto L1c7be6;
  #L1c7b54.  v5:= v8.`c.f.b.a.a` @type ^`int`;
  #L1c7b58.  if v3 >= v5 then goto L1c7be6;
  #L1c7b5c.  v5:= v8.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c7b60.  v5:= v5[v0];
  #L1c7b64.  v6:= v9.`c.f.b.i.c` @type ^`int`;
  #L1c7b68.  if v5 != v6 then goto L1c7bd2;
  #L1c7b6c.  v1:= v8.`c.f.b.a.i` @type ^`int`;
  #L1c7b70.  if v0 != v1 then goto L1c7b82;
  #L1c7b74.  v1:= v8.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c7b78.  v1:= v1[v0];
  #L1c7b7c.  v8.`c.f.b.a.i` @type ^`int` := v1;
  #L1c7b80.  goto L1c7b8e;
  #L1c7b82.  v1:= v8.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c7b86.  v3:= v1[v0];
  #L1c7b8a.  v1[v4]:= v3;
  #L1c7b8e.  if v10 == 0 then goto L1c7b9c;
  #L1c7b92.  v10:= v8.`c.f.b.a.b` @type ^`c.f.b.b` @kind object;
  #L1c7b96.  call `removeFromRow`(v9, v10) @signature `Lc/f/b/i;.removeFromRow:(Lc/f/b/b;)V` @kind virtual;
  #L1c7b9c.  v10:= v9.`c.f.b.i.m` @type ^`int`;
  #L1c7ba0.  v10:= v10 + -1;
  #L1c7ba4.  v9.`c.f.b.i.m` @type ^`int` := v10;
  #L1c7ba8.  v9:= v8.`c.f.b.a.a` @type ^`int`;
  #L1c7bac.  v9:= v9 + -1;
  #L1c7bb0.  v8.`c.f.b.a.a` @type ^`int` := v9;
  #L1c7bb4.  v9:= v8.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c7bb8.  v9[v0]:= v2;
  #L1c7bbc.  v9:= v8.`c.f.b.a.k` @type ^`boolean` @kind boolean;
  #L1c7bc0.  if v9 == 0 then goto L1c7bc8;
  #L1c7bc4.  v8.`c.f.b.a.j` @type ^`int` := v0;
  #L1c7bc8.  v9:= v8.`c.f.b.a.h` @type ^`float`[] @kind object;
  #L1c7bcc.  v9:= v9[v0];
  #L1c7bd0.  return v9;
  #L1c7bd2.  v4:= v8.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c7bd6.  v4:= v4[v0];
  #L1c7bda.  v3:= v3 + 1;
  #L1c7bde.  v7:= v4;
  #L1c7be0.  v4:= v0;
  #L1c7be2.  v0:= v7;
  #L1c7be4.  goto L1c7b50;
  #L1c7be6.  return v1;
}
procedure `java.lang.String` `toString`(`c.f.b.a` v5 @kind this) @signature `Lc/f/b/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c7c6c.  v0:= v5.`c.f.b.a.i` @type ^`int`;
  #L1c7c70.  v1:= "" @kind object;
  #L1c7c74.  v2:= 0I;
  #L1c7c76.  v3:= -1I;
  #L1c7c78.  if v0 == v3 then goto L1c7d16;
  #L1c7c7c.  v3:= v5.`c.f.b.a.a` @type ^`int`;
  #L1c7c80.  if v2 >= v3 then goto L1c7d16;
  #L1c7c84.  v3:= new `java.lang.StringBuilder`;
  #L1c7c88.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c7c8e.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c7c94.  v1:= " -> " @kind object;
  #L1c7c98.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c7c9e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c7ca4.  v1:= temp @kind object;
  #L1c7ca6.  v3:= new `java.lang.StringBuilder`;
  #L1c7caa.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c7cb0.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c7cb6.  v1:= v5.`c.f.b.a.h` @type ^`float`[] @kind object;
  #L1c7cba.  v1:= v1[v0];
  #L1c7cbe.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c7cc4.  v1:= " : " @kind object;
  #L1c7cc8.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c7cce.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c7cd4.  v1:= temp @kind object;
  #L1c7cd6.  v3:= new `java.lang.StringBuilder`;
  #L1c7cda.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c7ce0.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c7ce6.  v1:= v5.`c.f.b.a.c` @type ^`c.f.b.c` @kind object;
  #L1c7cea.  v1:= v1.`c.f.b.c.d` @type ^`c.f.b.i`[] @kind object;
  #L1c7cee.  v4:= v5.`c.f.b.a.f` @type ^`int`[] @kind object;
  #L1c7cf2.  v4:= v4[v0];
  #L1c7cf6.  v1:= v1[v4] @kind object;
  #L1c7cfa.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c7d00.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c7d06.  v1:= temp @kind object;
  #L1c7d08.  v3:= v5.`c.f.b.a.g` @type ^`int`[] @kind object;
  #L1c7d0c.  v0:= v3[v0];
  #L1c7d10.  v2:= v2 + 1;
  #L1c7d14.  goto L1c7c76;
  #L1c7d16.  return v1 @kind object;
}
procedure `float` `use`(`c.f.b.a` v5 @kind this, `c.f.b.b` v6 @kind object, `boolean` v7 ) @signature `Lc/f/b/a;.use:(Lc/f/b/b;Z)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c7bf8.  v0:= v6.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c7bfc.  call temp:= `get`(v5, v0) @signature `Lc/f/b/a;.get:(Lc/f/b/i;)F` @kind virtual;
  #L1c7c02.  v0:= temp;
  #L1c7c04.  v1:= v6.`c.f.b.b.a` @type ^`c.f.b.i` @kind object;
  #L1c7c08.  call temp:= `remove`(v5, v1, v7) @signature `Lc/f/b/a;.remove:(Lc/f/b/i;Z)F` @kind virtual;
  #L1c7c0e.  v6:= v6.`c.f.b.b.e` @type ^`c.f.b.b$a` @kind object;
  #L1c7c12.  call temp:= `getCurrentSize`(v6) @signature `Lc/f/b/b$a;.getCurrentSize:()I` @kind interface;
  #L1c7c18.  v1:= temp;
  #L1c7c1a.  v2:= 0I;
  #L1c7c1c.  if v2 >= v1 then goto L1c7c40;
  #L1c7c20.  call temp:= `getVariable`(v6, v2) @signature `Lc/f/b/b$a;.getVariable:(I)Lc/f/b/i;` @kind interface;
  #L1c7c26.  v3:= temp @kind object;
  #L1c7c28.  call temp:= `get`(v6, v3) @signature `Lc/f/b/b$a;.get:(Lc/f/b/i;)F` @kind interface;
  #L1c7c2e.  v4:= temp;
  #L1c7c30.  v4:= v4 * v0 @kind float;
  #L1c7c34.  call `add`(v5, v3, v4, v7) @signature `Lc/f/b/a;.add:(Lc/f/b/i;FZ)V` @kind virtual;
  #L1c7c3a.  v2:= v2 + 1;
  #L1c7c3e.  goto L1c7c1c;
  #L1c7c40.  return v0;
}
