record `c.f.b.d$a` @kind interface @AccessFlag ABSTRACT_INTERFACE {
}
procedure `void` `addError`(`c.f.b.i` v0 @kind object) @signature `Lc/f/b/d$a;.addError:(Lc/f/b/i;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `clear`() @signature `Lc/f/b/d$a;.clear:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `c.f.b.i` `getKey`() @signature `Lc/f/b/d$a;.getKey:()Lc/f/b/i;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `c.f.b.i` `getPivotCandidate`(`c.f.b.d` v0 @kind object, `boolean`[] v1 @kind object) @signature `Lc/f/b/d$a;.getPivotCandidate:(Lc/f/b/d;[Z)Lc/f/b/i;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `initFromRow`(`c.f.b.d$a` v0 @kind object) @signature `Lc/f/b/d$a;.initFromRow:(Lc/f/b/d$a;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`() @signature `Lc/f/b/d$a;.isEmpty:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
