record `c.f.b.h$a` @kind class @AccessFlag  extends `java.util.Comparator` @kind interface {
}
procedure `void` `<init>`(`c.f.b.h$a` v0 @kind this, `c.f.b.h` v1 @kind object) @signature `Lc/f/b/h$a;.<init>:(Lc/f/b/h;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1ca5f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ca5f6.  return @kind void;
}
procedure `int` `compare`(`c.f.b.h$a` v0 @kind this, `c.f.b.i` v1 @kind object, `c.f.b.i` v2 @kind object) @signature `Lc/f/b/h$a;.compare:(Lc/f/b/i;Lc/f/b/i;)I` @AccessFlag PUBLIC {
    temp;

  #L1ca5b0.  v1:= v1.`c.f.b.i.c` @type ^`int`;
  #L1ca5b4.  v2:= v2.`c.f.b.i.c` @type ^`int`;
  #L1ca5b8.  v1:= v1 - v2 @kind int;
  #L1ca5ba.  return v1;
}
procedure `int` `compare`(`c.f.b.h$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lc/f/b/h$a;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1ca5cc.  v1:= (`c.f.b.i`) v1 @kind object;
  #L1ca5d0.  v2:= (`c.f.b.i`) v2 @kind object;
  #L1ca5d4.  call temp:= `compare`(v0, v1, v2) @signature `Lc/f/b/h$a;.compare:(Lc/f/b/i;Lc/f/b/i;)I` @kind virtual;
  #L1ca5da.  v1:= temp;
  #L1ca5dc.  return v1;
}
