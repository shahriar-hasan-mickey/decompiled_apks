record `c.f.b.c` @kind class @AccessFlag PUBLIC {
  `c.f.b.f` `c.f.b.c.a` @AccessFlag ;
  `c.f.b.f` `c.f.b.c.b` @AccessFlag ;
  `c.f.b.f` `c.f.b.c.c` @AccessFlag ;
  `c.f.b.i`[] `c.f.b.c.d` @AccessFlag ;
}
procedure `void` `<init>`(`c.f.b.c` v2 @kind this) @signature `Lc/f/b/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1c91c0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c91c6.  v0:= new `c.f.b.g`;
  #L1c91ca.  v1:= 256I;
  #L1c91ce.  call `<init>`(v0, v1) @signature `Lc/f/b/g;.<init>:(I)V` @kind direct;
  #L1c91d4.  v2.`c.f.b.c.a` @type ^`c.f.b.f` := v0 @kind object;
  #L1c91d8.  v0:= new `c.f.b.g`;
  #L1c91dc.  call `<init>`(v0, v1) @signature `Lc/f/b/g;.<init>:(I)V` @kind direct;
  #L1c91e2.  v2.`c.f.b.c.b` @type ^`c.f.b.f` := v0 @kind object;
  #L1c91e6.  v0:= new `c.f.b.g`;
  #L1c91ea.  call `<init>`(v0, v1) @signature `Lc/f/b/g;.<init>:(I)V` @kind direct;
  #L1c91f0.  v2.`c.f.b.c.c` @type ^`c.f.b.f` := v0 @kind object;
  #L1c91f4.  v0:= 32I;
  #L1c91f8.  v0:= new `c.f.b.i`[v0];
  #L1c91fc.  v2.`c.f.b.c.d` @type ^`c.f.b.i`[] := v0 @kind object;
  #L1c9200.  return @kind void;
}
