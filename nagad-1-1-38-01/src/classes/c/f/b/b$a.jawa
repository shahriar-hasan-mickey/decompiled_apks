record `c.f.b.b$a` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
procedure `void` `add`(`c.f.b.i` v0 @kind object, `float` v1 , `boolean` v2 ) @signature `Lc/f/b/b$a;.add:(Lc/f/b/i;FZ)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `clear`() @signature `Lc/f/b/b$a;.clear:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `contains`(`c.f.b.i` v0 @kind object) @signature `Lc/f/b/b$a;.contains:(Lc/f/b/i;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `divideByAmount`(`float` v0 ) @signature `Lc/f/b/b$a;.divideByAmount:(F)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `float` `get`(`c.f.b.i` v0 @kind object) @signature `Lc/f/b/b$a;.get:(Lc/f/b/i;)F` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getCurrentSize`() @signature `Lc/f/b/b$a;.getCurrentSize:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `c.f.b.i` `getVariable`(`int` v0 ) @signature `Lc/f/b/b$a;.getVariable:(I)Lc/f/b/i;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `float` `getVariableValue`(`int` v0 ) @signature `Lc/f/b/b$a;.getVariableValue:(I)F` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `invert`() @signature `Lc/f/b/b$a;.invert:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `put`(`c.f.b.i` v0 @kind object, `float` v1 ) @signature `Lc/f/b/b$a;.put:(Lc/f/b/i;F)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `float` `remove`(`c.f.b.i` v0 @kind object, `boolean` v1 ) @signature `Lc/f/b/b$a;.remove:(Lc/f/b/i;Z)F` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `float` `use`(`c.f.b.b` v0 @kind object, `boolean` v1 ) @signature `Lc/f/b/b$a;.use:(Lc/f/b/b;Z)F` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
