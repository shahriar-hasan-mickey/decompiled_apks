record `c.f.b.i` @kind class @AccessFlag PUBLIC {
  `boolean` `c.f.b.i.a` @AccessFlag PUBLIC;
  `java.lang.String` `c.f.b.i.b` @AccessFlag PRIVATE;
  `int` `c.f.b.i.c` @AccessFlag PUBLIC;
  `int` `c.f.b.i.d` @AccessFlag ;
  `int` `c.f.b.i.e` @AccessFlag PUBLIC;
  `float` `c.f.b.i.f` @AccessFlag PUBLIC;
  `boolean` `c.f.b.i.g` @AccessFlag PUBLIC;
  `float`[] `c.f.b.i.h` @AccessFlag ;
  `float`[] `c.f.b.i.i` @AccessFlag ;
  `c.f.b.i$a` `c.f.b.i.j` @AccessFlag ;
  `c.f.b.b`[] `c.f.b.i.k` @AccessFlag ;
  `int` `c.f.b.i.l` @AccessFlag ;
  `int` `c.f.b.i.m` @AccessFlag PUBLIC;
  `boolean` `c.f.b.i.n` @AccessFlag ;
  `int` `c.f.b.i.o` @AccessFlag ;
  `float` `c.f.b.i.p` @AccessFlag ;
}
global `int` `@@c.f.b.i.q` @AccessFlag PRIVATE_STATIC;
procedure `void` `<init>`(`c.f.b.i` v3 @kind this, `c.f.b.i$a` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lc/f/b/i;.<init>:(Lc/f/b/i$a;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1cb7c4.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1cb7ca.  v5:= -1I;
  #L1cb7cc.  v3.`c.f.b.i.c` @type ^`int` := v5;
  #L1cb7d0.  v3.`c.f.b.i.d` @type ^`int` := v5;
  #L1cb7d4.  v0:= 0I;
  #L1cb7d6.  v3.`c.f.b.i.e` @type ^`int` := v0;
  #L1cb7da.  v3.`c.f.b.i.g` @type ^`boolean` := v0 @kind boolean;
  #L1cb7de.  v1:= 9I;
  #L1cb7e2.  v2:= new `float`[v1];
  #L1cb7e6.  v3.`c.f.b.i.h` @type ^`float`[] := v2 @kind object;
  #L1cb7ea.  v1:= new `float`[v1];
  #L1cb7ee.  v3.`c.f.b.i.i` @type ^`float`[] := v1 @kind object;
  #L1cb7f2.  v1:= 16I;
  #L1cb7f6.  v1:= new `c.f.b.b`[v1];
  #L1cb7fa.  v3.`c.f.b.i.k` @type ^`c.f.b.b`[] := v1 @kind object;
  #L1cb7fe.  v3.`c.f.b.i.l` @type ^`int` := v0;
  #L1cb802.  v3.`c.f.b.i.m` @type ^`int` := v0;
  #L1cb806.  v3.`c.f.b.i.n` @type ^`boolean` := v0 @kind boolean;
  #L1cb80a.  v3.`c.f.b.i.o` @type ^`int` := v5;
  #L1cb80e.  v5:= 0I;
  #L1cb810.  v3.`c.f.b.i.p` @type ^`float` := v5;
  #L1cb814.  v3.`c.f.b.i.j` @type ^`c.f.b.i$a` := v4 @kind object;
  #L1cb818.  return @kind void;
}
procedure `void` `a`() @signature `Lc/f/b/i;.a:()V` @AccessFlag STATIC {
    temp;
    v0;

  #L1cb890.  v0:= `@@c.f.b.i.q` @type ^`int`;
  #L1cb894.  v0:= v0 + 1;
  #L1cb898.  `@@c.f.b.i.q` @type ^`int` := v0;
  #L1cb89c.  return @kind void;
}
procedure `void` `addToRow`(`c.f.b.i` v3 @kind this, `c.f.b.b` v4 @kind object) @signature `Lc/f/b/i;.addToRow:(Lc/f/b/b;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1cb82c.  v0:= 0I;
  #L1cb82e.  v1:= v3.`c.f.b.i.l` @type ^`int`;
  #L1cb832.  if v0 >= v1 then goto L1cb84a;
  #L1cb836.  v1:= v3.`c.f.b.i.k` @type ^`c.f.b.b`[] @kind object;
  #L1cb83a.  v1:= v1[v0] @kind object;
  #L1cb83e.  if v1 != v4 then goto L1cb844;
  #L1cb842.  return @kind void;
  #L1cb844.  v0:= v0 + 1;
  #L1cb848.  goto L1cb82e;
  #L1cb84a.  v0:= v3.`c.f.b.i.k` @type ^`c.f.b.b`[] @kind object;
  #L1cb84e.  v2:= length @variable v0;
  #L1cb850.  if v1 < v2 then goto L1cb86a;
  #L1cb854.  v1:= length @variable v0;
  #L1cb856.  v1:= v1 * 2;
  #L1cb85a.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L1cb860.  v0:= temp @kind object;
  #L1cb862.  v0:= (`c.f.b.b`[]) v0 @kind object;
  #L1cb866.  v3.`c.f.b.i.k` @type ^`c.f.b.b`[] := v0 @kind object;
  #L1cb86a.  v0:= v3.`c.f.b.i.k` @type ^`c.f.b.b`[] @kind object;
  #L1cb86e.  v1:= v3.`c.f.b.i.l` @type ^`int`;
  #L1cb872.  v0[v1]:= v4 @kind object;
  #L1cb876.  v1:= v1 + 1;
  #L1cb87a.  v3.`c.f.b.i.l` @type ^`int` := v1;
  #L1cb87e.  return @kind void;
}
procedure `void` `removeFromRow`(`c.f.b.i` v4 @kind this, `c.f.b.b` v5 @kind object) @signature `Lc/f/b/i;.removeFromRow:(Lc/f/b/b;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1cb8b0.  v0:= v4.`c.f.b.i.l` @type ^`int`;
  #L1cb8b4.  v1:= 0I;
  #L1cb8b6.  if v1 >= v0 then goto L1cb8f6;
  #L1cb8ba.  v2:= v4.`c.f.b.i.k` @type ^`c.f.b.b`[] @kind object;
  #L1cb8be.  v2:= v2[v1] @kind object;
  #L1cb8c2.  if v2 != v5 then goto L1cb8f0;
  #L1cb8c6.  v5:= v0 + -1;
  #L1cb8ca.  if v1 >= v5 then goto L1cb8e2;
  #L1cb8ce.  v5:= v4.`c.f.b.i.k` @type ^`c.f.b.b`[] @kind object;
  #L1cb8d2.  v2:= v1 + 1;
  #L1cb8d6.  v3:= v5[v2] @kind object;
  #L1cb8da.  v5[v1]:= v3 @kind object;
  #L1cb8de.  v1:= v2;
  #L1cb8e0.  goto L1cb8c6;
  #L1cb8e2.  v5:= v4.`c.f.b.i.l` @type ^`int`;
  #L1cb8e6.  v5:= v5 + -1;
  #L1cb8ea.  v4.`c.f.b.i.l` @type ^`int` := v5;
  #L1cb8ee.  return @kind void;
  #L1cb8f0.  v1:= v1 + 1;
  #L1cb8f4.  goto L1cb8b6;
  #L1cb8f6.  return @kind void;
}
procedure `void` `reset`(`c.f.b.i` v6 @kind this) @signature `Lc/f/b/i;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1cb908.  v0:= 0I;
  #L1cb90a.  v6.`c.f.b.i.b` @type ^`java.lang.String` := v0 @kind object;
  #L1cb90e.  v1:= `@@c.f.b.i$a.j` @type ^`c.f.b.i$a` @kind object;
  #L1cb912.  v6.`c.f.b.i.j` @type ^`c.f.b.i$a` := v1 @kind object;
  #L1cb916.  v1:= 0I;
  #L1cb918.  v6.`c.f.b.i.e` @type ^`int` := v1;
  #L1cb91c.  v2:= -1I;
  #L1cb91e.  v6.`c.f.b.i.c` @type ^`int` := v2;
  #L1cb922.  v6.`c.f.b.i.d` @type ^`int` := v2;
  #L1cb926.  v3:= 0I;
  #L1cb928.  v6.`c.f.b.i.f` @type ^`float` := v3;
  #L1cb92c.  v6.`c.f.b.i.g` @type ^`boolean` := v1 @kind boolean;
  #L1cb930.  v6.`c.f.b.i.n` @type ^`boolean` := v1 @kind boolean;
  #L1cb934.  v6.`c.f.b.i.o` @type ^`int` := v2;
  #L1cb938.  v6.`c.f.b.i.p` @type ^`float` := v3;
  #L1cb93c.  v2:= v6.`c.f.b.i.l` @type ^`int`;
  #L1cb940.  v4:= 0I;
  #L1cb942.  if v4 >= v2 then goto L1cb954;
  #L1cb946.  v5:= v6.`c.f.b.i.k` @type ^`c.f.b.b`[] @kind object;
  #L1cb94a.  v5[v4]:= v0 @kind object;
  #L1cb94e.  v4:= v4 + 1;
  #L1cb952.  goto L1cb942;
  #L1cb954.  v6.`c.f.b.i.l` @type ^`int` := v1;
  #L1cb958.  v6.`c.f.b.i.m` @type ^`int` := v1;
  #L1cb95c.  v6.`c.f.b.i.a` @type ^`boolean` := v1 @kind boolean;
  #L1cb960.  v0:= v6.`c.f.b.i.i` @type ^`float`[] @kind object;
  #L1cb964.  call `fill`(v0, v3) @signature `Ljava/util/Arrays;.fill:([FF)V` @kind static;
  #L1cb96a.  return @kind void;
}
procedure `void` `setFinalValue`(`c.f.b.i` v3 @kind this, `c.f.b.d` v4 @kind object, `float` v5 ) @signature `Lc/f/b/i;.setFinalValue:(Lc/f/b/d;F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1cb97c.  v3.`c.f.b.i.f` @type ^`float` := v5;
  #L1cb980.  v5:= 1I;
  #L1cb982.  v3.`c.f.b.i.g` @type ^`boolean` := v5 @kind boolean;
  #L1cb986.  v5:= 0I;
  #L1cb988.  v3.`c.f.b.i.n` @type ^`boolean` := v5 @kind boolean;
  #L1cb98c.  v0:= -1I;
  #L1cb98e.  v3.`c.f.b.i.o` @type ^`int` := v0;
  #L1cb992.  v1:= 0I;
  #L1cb994.  v3.`c.f.b.i.p` @type ^`float` := v1;
  #L1cb998.  v1:= v3.`c.f.b.i.l` @type ^`int`;
  #L1cb99c.  v3.`c.f.b.i.d` @type ^`int` := v0;
  #L1cb9a0.  v0:= 0I;
  #L1cb9a2.  if v0 >= v1 then goto L1cb9ba;
  #L1cb9a6.  v2:= v3.`c.f.b.i.k` @type ^`c.f.b.b`[] @kind object;
  #L1cb9aa.  v2:= v2[v0] @kind object;
  #L1cb9ae.  call `updateFromFinalVariable`(v2, v4, v3, v5) @signature `Lc/f/b/b;.updateFromFinalVariable:(Lc/f/b/d;Lc/f/b/i;Z)V` @kind virtual;
  #L1cb9b4.  v0:= v0 + 1;
  #L1cb9b8.  goto L1cb9a2;
  #L1cb9ba.  v3.`c.f.b.i.l` @type ^`int` := v5;
  #L1cb9be.  return @kind void;
}
procedure `void` `setType`(`c.f.b.i` v0 @kind this, `c.f.b.i$a` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lc/f/b/i;.setType:(Lc/f/b/i$a;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L1cb9d0.  v0.`c.f.b.i.j` @type ^`c.f.b.i$a` := v1 @kind object;
  #L1cb9d4.  return @kind void;
}
procedure `java.lang.String` `toString`(`c.f.b.i` v2 @kind this) @signature `Lc/f/b/i;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cb760.  v0:= v2.`c.f.b.i.b` @type ^`java.lang.String` @kind object;
  #L1cb764.  v1:= "" @kind object;
  #L1cb768.  if v0 == 0 then goto L1cb790;
  #L1cb76c.  v0:= new `java.lang.StringBuilder`;
  #L1cb770.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cb776.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb77c.  v1:= v2.`c.f.b.i.b` @type ^`java.lang.String` @kind object;
  #L1cb780.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb786.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb78c.  v0:= temp @kind object;
  #L1cb78e.  goto L1cb7b2;
  #L1cb790.  v0:= new `java.lang.StringBuilder`;
  #L1cb794.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cb79a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb7a0.  v1:= v2.`c.f.b.i.c` @type ^`int`;
  #L1cb7a4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb7aa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb7b0.  v0:= temp @kind object;
  #L1cb7b2.  return v0 @kind object;
}
procedure `void` `updateReferencesWithNewDefinition`(`c.f.b.i` v4 @kind this, `c.f.b.d` v5 @kind object, `c.f.b.b` v6 @kind object) @signature `Lc/f/b/i;.updateReferencesWithNewDefinition:(Lc/f/b/d;Lc/f/b/b;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1cb9e8.  v0:= v4.`c.f.b.i.l` @type ^`int`;
  #L1cb9ec.  v1:= 0I;
  #L1cb9ee.  v2:= 0I;
  #L1cb9f0.  if v2 >= v0 then goto L1cba08;
  #L1cb9f4.  v3:= v4.`c.f.b.i.k` @type ^`c.f.b.b`[] @kind object;
  #L1cb9f8.  v3:= v3[v2] @kind object;
  #L1cb9fc.  call `updateFromRow`(v3, v5, v6, v1) @signature `Lc/f/b/b;.updateFromRow:(Lc/f/b/d;Lc/f/b/b;Z)V` @kind virtual;
  #L1cba02.  v2:= v2 + 1;
  #L1cba06.  goto L1cb9f0;
  #L1cba08.  v4.`c.f.b.i.l` @type ^`int` := v1;
  #L1cba0c.  return @kind void;
}
