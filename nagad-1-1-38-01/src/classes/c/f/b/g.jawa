record `c.f.b.g` @kind class @AccessFlag  extends `c.f.b.f` @kind interface {
  `java.lang.Object`[] `c.f.b.g.a` @AccessFlag PRIVATE_FINAL;
  `int` `c.f.b.g.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.f.b.g` v1 @kind this, `int` v2 ) @signature `Lc/f/b/g;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1ca538.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ca53e.  if v2 <= 0 then goto L1ca54c;
  #L1ca542.  v2:= new `java.lang.Object`[v2];
  #L1ca546.  v1.`c.f.b.g.a` @type ^`java.lang.Object`[] := v2 @kind object;
  #L1ca54a.  return @kind void;
  #L1ca54c.  v2:= new `java.lang.IllegalArgumentException`;
  #L1ca550.  v0:= "The max pool size must be > 0" @kind object;
  #L1ca554.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ca55a.  throw v2;
}
procedure `java.lang.Object` `acquire`(`c.f.b.g` v5 @kind this) @signature `Lc/f/b/g;.acquire:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ca500.  v0:= v5.`c.f.b.g.b` @type ^`int`;
  #L1ca504.  v1:= 0I;
  #L1ca506.  if v0 <= 0 then goto L1ca524;
  #L1ca50a.  v2:= v0 + -1;
  #L1ca50e.  v3:= v5.`c.f.b.g.a` @type ^`java.lang.Object`[] @kind object;
  #L1ca512.  v4:= v3[v2] @kind object;
  #L1ca516.  v3[v2]:= v1 @kind object;
  #L1ca51a.  v0:= v0 + -1;
  #L1ca51e.  v5.`c.f.b.g.b` @type ^`int` := v0;
  #L1ca522.  return v4 @kind object;
  #L1ca524.  return v1 @kind object;
}
procedure `boolean` `release`(`c.f.b.g` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lc/f/b/g;.release:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1ca4d0.  v0:= v3.`c.f.b.g.b` @type ^`int`;
  #L1ca4d4.  v1:= v3.`c.f.b.g.a` @type ^`java.lang.Object`[] @kind object;
  #L1ca4d8.  v2:= length @variable v1;
  #L1ca4da.  if v0 >= v2 then goto L1ca4ec;
  #L1ca4de.  v1[v0]:= v4 @kind object;
  #L1ca4e2.  v4:= 1I;
  #L1ca4e4.  v0:= v0 + v4 @kind int;
  #L1ca4e6.  v3.`c.f.b.g.b` @type ^`int` := v0;
  #L1ca4ea.  return v4;
  #L1ca4ec.  v4:= 0I;
  #L1ca4ee.  return v4;
}
procedure `void` `releaseAll`(`c.f.b.g` v5 @kind this, `java.lang.Object`[] v6 @kind object, `int` v7 ) @signature `Lc/f/b/g;.releaseAll:([Ljava/lang/Object;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ca56c.  v0:= length @variable v6;
  #L1ca56e.  if v7 <= v0 then goto L1ca574;
  #L1ca572.  v7:= length @variable v6;
  #L1ca574.  v0:= 0I;
  #L1ca576.  if v0 >= v7 then goto L1ca59e;
  #L1ca57a.  v1:= v6[v0] @kind object;
  #L1ca57e.  v2:= v5.`c.f.b.g.b` @type ^`int`;
  #L1ca582.  v3:= v5.`c.f.b.g.a` @type ^`java.lang.Object`[] @kind object;
  #L1ca586.  v4:= length @variable v3;
  #L1ca588.  if v2 >= v4 then goto L1ca598;
  #L1ca58c.  v3[v2]:= v1 @kind object;
  #L1ca590.  v2:= v2 + 1;
  #L1ca594.  v5.`c.f.b.g.b` @type ^`int` := v2;
  #L1ca598.  v0:= v0 + 1;
  #L1ca59c.  goto L1ca576;
  #L1ca59e.  return @kind void;
}
