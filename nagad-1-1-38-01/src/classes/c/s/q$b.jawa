record `c.s.q$b` @kind class @AccessFlag  extends `c.s.n` @kind class {
  `c.s.q` `c.s.q$b.a` @AccessFlag ;
}
procedure `void` `<init>`(`c.s.q$b` v0 @kind this, `c.s.q` v1 @kind object) @signature `Lc/s/q$b;.<init>:(Lc/s/q;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24f370.  call `<init>`(v0) @signature `Lc/s/n;.<init>:()V` @kind direct;
  #L24f376.  v0.`c.s.q$b.a` @type ^`c.s.q` := v1 @kind object;
  #L24f37a.  return @kind void;
}
procedure `void` `onTransitionEnd`(`c.s.q$b` v2 @kind this, `c.s.m` v3 @kind object) @signature `Lc/s/q$b;.onTransitionEnd:(Lc/s/m;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24f38c.  v0:= v2.`c.s.q$b.a` @type ^`c.s.q` @kind object;
  #L24f390.  v1:= v0.`c.s.q.Q` @type ^`int`;
  #L24f394.  v1:= v1 + -1;
  #L24f398.  v0.`c.s.q.Q` @type ^`int` := v1;
  #L24f39c.  v1:= v0.`c.s.q.Q` @type ^`int`;
  #L24f3a0.  if v1 != 0 then goto L24f3b0;
  #L24f3a4.  v1:= 0I;
  #L24f3a6.  v0.`c.s.q.R` @type ^`boolean` := v1 @kind boolean;
  #L24f3aa.  call `end`(v0) @signature `Lc/s/m;.end:()V` @kind virtual;
  #L24f3b0.  call temp:= `removeListener`(v3, v2) @signature `Lc/s/m;.removeListener:(Lc/s/m$f;)Lc/s/m;` @kind virtual;
  #L24f3b6.  return @kind void;
}
procedure `void` `onTransitionStart`(`c.s.q$b` v1 @kind this, `c.s.m` v2 @kind object) @signature `Lc/s/q$b;.onTransitionStart:(Lc/s/m;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24f3c8.  v2:= v1.`c.s.q$b.a` @type ^`c.s.q` @kind object;
  #L24f3cc.  v0:= v2.`c.s.q.R` @type ^`boolean` @kind boolean;
  #L24f3d0.  if v0 != 0 then goto L24f3e4;
  #L24f3d4.  call `start`(v2) @signature `Lc/s/m;.start:()V` @kind virtual;
  #L24f3da.  v2:= v1.`c.s.q$b.a` @type ^`c.s.q` @kind object;
  #L24f3de.  v0:= 1I;
  #L24f3e0.  v2.`c.s.q.R` @type ^`boolean` := v0 @kind boolean;
  #L24f3e4.  return @kind void;
}
