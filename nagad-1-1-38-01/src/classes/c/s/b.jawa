record `c.s.b` @kind class @AccessFlag PUBLIC extends `c.s.q` @kind class {
}
procedure `void` `<init>`(`c.s.b` v0 @kind this) @signature `Lc/s/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L24d3f0.  call `<init>`(v0) @signature `Lc/s/q;.<init>:()V` @kind direct;
  #L24d3f6.  call `a`(v0) @signature `Lc/s/b;.a:()V` @kind direct;
  #L24d3fc.  return @kind void;
}
procedure `void` `a`(`c.s.b` v3 @kind this) @signature `Lc/s/b;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L24d410.  v0:= 1I;
  #L24d412.  call temp:= `setOrdering`(v3, v0) @signature `Lc/s/q;.setOrdering:(I)Lc/s/q;` @kind virtual;
  #L24d418.  v1:= new `c.s.d`;
  #L24d41c.  v2:= 2I;
  #L24d41e.  call `<init>`(v1, v2) @signature `Lc/s/d;.<init>:(I)V` @kind direct;
  #L24d424.  call temp:= `addTransition`(v3, v1) @signature `Lc/s/q;.addTransition:(Lc/s/m;)Lc/s/q;` @kind virtual;
  #L24d42a.  v1:= new `c.s.c`;
  #L24d42e.  call `<init>`(v1) @signature `Lc/s/c;.<init>:()V` @kind direct;
  #L24d434.  call temp:= `addTransition`(v3, v1) @signature `Lc/s/q;.addTransition:(Lc/s/m;)Lc/s/q;` @kind virtual;
  #L24d43a.  v1:= new `c.s.d`;
  #L24d43e.  call `<init>`(v1, v0) @signature `Lc/s/d;.<init>:(I)V` @kind direct;
  #L24d444.  call temp:= `addTransition`(v3, v1) @signature `Lc/s/q;.addTransition:(Lc/s/m;)Lc/s/q;` @kind virtual;
  #L24d44a.  return @kind void;
}
