record `c.e.f$e` @kind class @AccessFlag FINAL extends `java.util.Collection` @kind interface {
  `c.e.f` `c.e.f$e.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.e.f$e` v0 @kind this, `c.e.f` v1 @kind object) @signature `Lc/e/f$e;.<init>:(Lc/e/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c5da0.  v0.`c.e.f$e.f` @type ^`c.e.f` := v1 @kind object;
  #L1c5da4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c5daa.  return @kind void;
}
procedure `boolean` `add`(`c.e.f$e` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/e/f$e;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L1c5b70.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1c5b74.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L1c5b7a.  throw v1;
}
procedure `boolean` `addAll`(`c.e.f$e` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lc/e/f$e;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L1c5b8c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1c5b90.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L1c5b96.  throw v1;
}
procedure `void` `clear`(`c.e.f$e` v1 @kind this) @signature `Lc/e/f$e;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c5dbc.  v0:= v1.`c.e.f$e.f` @type ^`c.e.f` @kind object;
  #L1c5dc0.  call `colClear`(v0) @signature `Lc/e/f;.colClear:()V` @kind virtual;
  #L1c5dc6.  return @kind void;
}
procedure `boolean` `contains`(`c.e.f$e` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/e/f$e;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c5ba8.  v0:= v1.`c.e.f$e.f` @type ^`c.e.f` @kind object;
  #L1c5bac.  call temp:= `colIndexOfValue`(v0, v2) @signature `Lc/e/f;.colIndexOfValue:(Ljava/lang/Object;)I` @kind virtual;
  #L1c5bb2.  v2:= temp;
  #L1c5bb4.  if v2 < 0 then goto L1c5bbc;
  #L1c5bb8.  v2:= 1I;
  #L1c5bba.  goto L1c5bbe;
  #L1c5bbc.  v2:= 0I;
  #L1c5bbe.  return v2;
}
procedure `boolean` `containsAll`(`c.e.f$e` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lc/e/f$e;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c5bd0.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c5bd6.  v2:= temp @kind object;
  #L1c5bd8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c5bde.  v0:= temp;
  #L1c5be0.  if v0 == 0 then goto L1c5bfc;
  #L1c5be4.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c5bea.  v0:= temp @kind object;
  #L1c5bec.  call temp:= `contains`(v1, v0) @signature `Lc/e/f$e;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c5bf2.  v0:= temp;
  #L1c5bf4.  if v0 != 0 then goto L1c5bd8;
  #L1c5bf8.  v2:= 0I;
  #L1c5bfa.  return v2;
  #L1c5bfc.  v2:= 1I;
  #L1c5bfe.  return v2;
}
procedure `boolean` `isEmpty`(`c.e.f$e` v1 @kind this) @signature `Lc/e/f$e;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c5c10.  v0:= v1.`c.e.f$e.f` @type ^`c.e.f` @kind object;
  #L1c5c14.  call temp:= `colGetSize`(v0) @signature `Lc/e/f;.colGetSize:()I` @kind virtual;
  #L1c5c1a.  v0:= temp;
  #L1c5c1c.  if v0 != 0 then goto L1c5c24;
  #L1c5c20.  v0:= 1I;
  #L1c5c22.  goto L1c5c26;
  #L1c5c24.  v0:= 0I;
  #L1c5c26.  return v0;
}
procedure `java.util.Iterator` `iterator`(`c.e.f$e` v3 @kind this) @signature `Lc/e/f$e;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c5d7c.  v0:= new `c.e.f$a`;
  #L1c5d80.  v1:= v3.`c.e.f$e.f` @type ^`c.e.f` @kind object;
  #L1c5d84.  v2:= 1I;
  #L1c5d86.  call `<init>`(v0, v1, v2) @signature `Lc/e/f$a;.<init>:(Lc/e/f;I)V` @kind direct;
  #L1c5d8c.  return v0 @kind object;
}
procedure `boolean` `remove`(`c.e.f$e` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/e/f$e;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c5c38.  v0:= v1.`c.e.f$e.f` @type ^`c.e.f` @kind object;
  #L1c5c3c.  call temp:= `colIndexOfValue`(v0, v2) @signature `Lc/e/f;.colIndexOfValue:(Ljava/lang/Object;)I` @kind virtual;
  #L1c5c42.  v2:= temp;
  #L1c5c44.  if v2 < 0 then goto L1c5c56;
  #L1c5c48.  v0:= v1.`c.e.f$e.f` @type ^`c.e.f` @kind object;
  #L1c5c4c.  call `colRemoveAt`(v0, v2) @signature `Lc/e/f;.colRemoveAt:(I)V` @kind virtual;
  #L1c5c52.  v2:= 1I;
  #L1c5c54.  return v2;
  #L1c5c56.  v2:= 0I;
  #L1c5c58.  return v2;
}
procedure `boolean` `removeAll`(`c.e.f$e` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Lc/e/f$e;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c5c6c.  v0:= v5.`c.e.f$e.f` @type ^`c.e.f` @kind object;
  #L1c5c70.  call temp:= `colGetSize`(v0) @signature `Lc/e/f;.colGetSize:()I` @kind virtual;
  #L1c5c76.  v0:= temp;
  #L1c5c78.  v1:= 0I;
  #L1c5c7a.  v2:= 0I;
  #L1c5c7c.  if v1 >= v0 then goto L1c5cb2;
  #L1c5c80.  v3:= v5.`c.e.f$e.f` @type ^`c.e.f` @kind object;
  #L1c5c84.  v4:= 1I;
  #L1c5c86.  call temp:= `colGetEntry`(v3, v1, v4) @signature `Lc/e/f;.colGetEntry:(II)Ljava/lang/Object;` @kind virtual;
  #L1c5c8c.  v3:= temp @kind object;
  #L1c5c8e.  call temp:= `contains`(v6, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L1c5c94.  v3:= temp;
  #L1c5c96.  if v3 == 0 then goto L1c5cae;
  #L1c5c9a.  v2:= v5.`c.e.f$e.f` @type ^`c.e.f` @kind object;
  #L1c5c9e.  call `colRemoveAt`(v2, v1) @signature `Lc/e/f;.colRemoveAt:(I)V` @kind virtual;
  #L1c5ca4.  v1:= v1 + -1;
  #L1c5ca8.  v0:= v0 + -1;
  #L1c5cac.  v2:= 1I;
  #L1c5cae.  v1:= v1 + v4 @kind int;
  #L1c5cb0.  goto L1c5c7c;
  #L1c5cb2.  return v2;
}
procedure `boolean` `retainAll`(`c.e.f$e` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Lc/e/f$e;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c5cc4.  v0:= v5.`c.e.f$e.f` @type ^`c.e.f` @kind object;
  #L1c5cc8.  call temp:= `colGetSize`(v0) @signature `Lc/e/f;.colGetSize:()I` @kind virtual;
  #L1c5cce.  v0:= temp;
  #L1c5cd0.  v1:= 0I;
  #L1c5cd2.  v2:= 0I;
  #L1c5cd4.  if v1 >= v0 then goto L1c5d0a;
  #L1c5cd8.  v3:= v5.`c.e.f$e.f` @type ^`c.e.f` @kind object;
  #L1c5cdc.  v4:= 1I;
  #L1c5cde.  call temp:= `colGetEntry`(v3, v1, v4) @signature `Lc/e/f;.colGetEntry:(II)Ljava/lang/Object;` @kind virtual;
  #L1c5ce4.  v3:= temp @kind object;
  #L1c5ce6.  call temp:= `contains`(v6, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L1c5cec.  v3:= temp;
  #L1c5cee.  if v3 != 0 then goto L1c5d06;
  #L1c5cf2.  v2:= v5.`c.e.f$e.f` @type ^`c.e.f` @kind object;
  #L1c5cf6.  call `colRemoveAt`(v2, v1) @signature `Lc/e/f;.colRemoveAt:(I)V` @kind virtual;
  #L1c5cfc.  v1:= v1 + -1;
  #L1c5d00.  v0:= v0 + -1;
  #L1c5d04.  v2:= 1I;
  #L1c5d06.  v1:= v1 + v4 @kind int;
  #L1c5d08.  goto L1c5cd4;
  #L1c5d0a.  return v2;
}
procedure `int` `size`(`c.e.f$e` v1 @kind this) @signature `Lc/e/f$e;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c5d1c.  v0:= v1.`c.e.f$e.f` @type ^`c.e.f` @kind object;
  #L1c5d20.  call temp:= `colGetSize`(v0) @signature `Lc/e/f;.colGetSize:()I` @kind virtual;
  #L1c5d26.  v0:= temp;
  #L1c5d28.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`c.e.f$e` v2 @kind this) @signature `Lc/e/f$e;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c5d3c.  v0:= v2.`c.e.f$e.f` @type ^`c.e.f` @kind object;
  #L1c5d40.  v1:= 1I;
  #L1c5d42.  call temp:= `toArrayHelper`(v0, v1) @signature `Lc/e/f;.toArrayHelper:(I)[Ljava/lang/Object;` @kind virtual;
  #L1c5d48.  v0:= temp @kind object;
  #L1c5d4a.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`c.e.f$e` v2 @kind this, `java.lang.Object`[] v3 @kind object) @signature `Lc/e/f$e;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c5d5c.  v0:= v2.`c.e.f$e.f` @type ^`c.e.f` @kind object;
  #L1c5d60.  v1:= 1I;
  #L1c5d62.  call temp:= `toArrayHelper`(v0, v3, v1) @signature `Lc/e/f;.toArrayHelper:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind virtual;
  #L1c5d68.  v3:= temp @kind object;
  #L1c5d6a.  return v3 @kind object;
}
