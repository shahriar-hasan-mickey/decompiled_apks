record `c.e.f$d` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface, `java.util.Map$Entry` @kind interface {
  `int` `c.e.f$d.f` @AccessFlag ;
  `int` `c.e.f$d.g` @AccessFlag ;
  `boolean` `c.e.f$d.h` @AccessFlag ;
  `c.e.f` `c.e.f$d.i` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.e.f$d` v1 @kind this, `c.e.f` v2 @kind object) @signature `Lc/e/f$d;.<init>:(Lc/e/f;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1c5ae4.  v1.`c.e.f$d.i` @type ^`c.e.f` := v2 @kind object;
  #L1c5ae8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c5aee.  v0:= 0I;
  #L1c5af0.  v1.`c.e.f$d.h` @type ^`boolean` := v0 @kind boolean;
  #L1c5af4.  call temp:= `colGetSize`(v2) @signature `Lc/e/f;.colGetSize:()I` @kind virtual;
  #L1c5afa.  v2:= temp;
  #L1c5afc.  v2:= v2 + -1;
  #L1c5b00.  v1.`c.e.f$d.f` @type ^`int` := v2;
  #L1c5b04.  v2:= -1I;
  #L1c5b06.  v1.`c.e.f$d.g` @type ^`int` := v2;
  #L1c5b0a.  return @kind void;
}
procedure `boolean` `equals`(`c.e.f$d` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lc/e/f$d;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c5874.  v0:= v4.`c.e.f$d.h` @type ^`boolean` @kind boolean;
  #L1c5878.  if v0 == 0 then goto L1c58da;
  #L1c587c.  v0:= instanceof @variable v5 @type ^`java.util.Map$Entry` @kind boolean;
  #L1c5880.  v1:= 0I;
  #L1c5882.  if v0 != 0 then goto L1c5888;
  #L1c5886.  return v1;
  #L1c5888.  v5:= (`java.util.Map$Entry`) v5 @kind object;
  #L1c588c.  call temp:= `getKey`(v5) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L1c5892.  v0:= temp @kind object;
  #L1c5894.  v2:= v4.`c.e.f$d.i` @type ^`c.e.f` @kind object;
  #L1c5898.  v3:= v4.`c.e.f$d.g` @type ^`int`;
  #L1c589c.  call temp:= `colGetEntry`(v2, v3, v1) @signature `Lc/e/f;.colGetEntry:(II)Ljava/lang/Object;` @kind virtual;
  #L1c58a2.  v2:= temp @kind object;
  #L1c58a4.  call temp:= `equal`(v0, v2) @signature `Lc/e/c;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1c58aa.  v0:= temp;
  #L1c58ac.  v2:= 1I;
  #L1c58ae.  if v0 == 0 then goto L1c58d8;
  #L1c58b2.  call temp:= `getValue`(v5) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1c58b8.  v5:= temp @kind object;
  #L1c58ba.  v0:= v4.`c.e.f$d.i` @type ^`c.e.f` @kind object;
  #L1c58be.  v3:= v4.`c.e.f$d.g` @type ^`int`;
  #L1c58c2.  call temp:= `colGetEntry`(v0, v3, v2) @signature `Lc/e/f;.colGetEntry:(II)Ljava/lang/Object;` @kind virtual;
  #L1c58c8.  v0:= temp @kind object;
  #L1c58ca.  call temp:= `equal`(v5, v0) @signature `Lc/e/c;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1c58d0.  v5:= temp;
  #L1c58d2.  if v5 == 0 then goto L1c58d8;
  #L1c58d6.  v1:= 1I;
  #L1c58d8.  return v1;
  #L1c58da.  v5:= new `java.lang.IllegalStateException`;
  #L1c58de.  v0:= "This container does not support retaining Map.Entry objects" @kind object;
  #L1c58e2.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c58e8.  throw v5;
}
procedure `java.lang.Object` `getKey`(`c.e.f$d` v3 @kind this) @signature `Lc/e/f$d;.getKey:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c5990.  v0:= v3.`c.e.f$d.h` @type ^`boolean` @kind boolean;
  #L1c5994.  if v0 == 0 then goto L1c59ac;
  #L1c5998.  v0:= v3.`c.e.f$d.i` @type ^`c.e.f` @kind object;
  #L1c599c.  v1:= v3.`c.e.f$d.g` @type ^`int`;
  #L1c59a0.  v2:= 0I;
  #L1c59a2.  call temp:= `colGetEntry`(v0, v1, v2) @signature `Lc/e/f;.colGetEntry:(II)Ljava/lang/Object;` @kind virtual;
  #L1c59a8.  v0:= temp @kind object;
  #L1c59aa.  return v0 @kind object;
  #L1c59ac.  v0:= new `java.lang.IllegalStateException`;
  #L1c59b0.  v1:= "This container does not support retaining Map.Entry objects" @kind object;
  #L1c59b4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c59ba.  throw v0;
}
procedure `java.lang.Object` `getValue`(`c.e.f$d` v3 @kind this) @signature `Lc/e/f$d;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c59cc.  v0:= v3.`c.e.f$d.h` @type ^`boolean` @kind boolean;
  #L1c59d0.  if v0 == 0 then goto L1c59e8;
  #L1c59d4.  v0:= v3.`c.e.f$d.i` @type ^`c.e.f` @kind object;
  #L1c59d8.  v1:= v3.`c.e.f$d.g` @type ^`int`;
  #L1c59dc.  v2:= 1I;
  #L1c59de.  call temp:= `colGetEntry`(v0, v1, v2) @signature `Lc/e/f;.colGetEntry:(II)Ljava/lang/Object;` @kind virtual;
  #L1c59e4.  v0:= temp @kind object;
  #L1c59e6.  return v0 @kind object;
  #L1c59e8.  v0:= new `java.lang.IllegalStateException`;
  #L1c59ec.  v1:= "This container does not support retaining Map.Entry objects" @kind object;
  #L1c59f0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c59f6.  throw v0;
}
procedure `boolean` `hasNext`(`c.e.f$d` v2 @kind this) @signature `Lc/e/f$d;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c58fc.  v0:= v2.`c.e.f$d.g` @type ^`int`;
  #L1c5900.  v1:= v2.`c.e.f$d.f` @type ^`int`;
  #L1c5904.  if v0 >= v1 then goto L1c590c;
  #L1c5908.  v0:= 1I;
  #L1c590a.  goto L1c590e;
  #L1c590c.  v0:= 0I;
  #L1c590e.  return v0;
}
procedure `int` `hashCode`(`c.e.f$d` v5 @kind this) @signature `Lc/e/f$d;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c5920.  v0:= v5.`c.e.f$d.h` @type ^`boolean` @kind boolean;
  #L1c5924.  if v0 == 0 then goto L1c596e;
  #L1c5928.  v0:= v5.`c.e.f$d.i` @type ^`c.e.f` @kind object;
  #L1c592c.  v1:= v5.`c.e.f$d.g` @type ^`int`;
  #L1c5930.  v2:= 0I;
  #L1c5932.  call temp:= `colGetEntry`(v0, v1, v2) @signature `Lc/e/f;.colGetEntry:(II)Ljava/lang/Object;` @kind virtual;
  #L1c5938.  v0:= temp @kind object;
  #L1c593a.  v1:= v5.`c.e.f$d.i` @type ^`c.e.f` @kind object;
  #L1c593e.  v3:= v5.`c.e.f$d.g` @type ^`int`;
  #L1c5942.  v4:= 1I;
  #L1c5944.  call temp:= `colGetEntry`(v1, v3, v4) @signature `Lc/e/f;.colGetEntry:(II)Ljava/lang/Object;` @kind virtual;
  #L1c594a.  v1:= temp @kind object;
  #L1c594c.  if v0 != 0 then goto L1c5954;
  #L1c5950.  v0:= 0I;
  #L1c5952.  goto L1c595c;
  #L1c5954.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1c595a.  v0:= temp;
  #L1c595c.  if v1 != 0 then goto L1c5962;
  #L1c5960.  goto L1c596a;
  #L1c5962.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1c5968.  v2:= temp;
  #L1c596a.  v0:= v0 ^~ v2 @kind int;
  #L1c596c.  return v0;
  #L1c596e.  v0:= new `java.lang.IllegalStateException`;
  #L1c5972.  v1:= "This container does not support retaining Map.Entry objects" @kind object;
  #L1c5976.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c597c.  throw v0;
}
procedure `java.lang.Object` `next`(`c.e.f$d` v0 @kind this) @signature `Lc/e/f$d;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1c5a08.  call temp:= `next`(v0) @signature `Lc/e/f$d;.next:()Ljava/util/Map$Entry;` @kind virtual;
  #L1c5a0e.  return v0 @kind object;
}
procedure `java.util.Map$Entry` `next`(`c.e.f$d` v2 @kind this) @signature `Lc/e/f$d;.next:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c5aa8.  call temp:= `hasNext`(v2) @signature `Lc/e/f$d;.hasNext:()Z` @kind virtual;
  #L1c5aae.  v0:= temp;
  #L1c5ab0.  if v0 == 0 then goto L1c5ac6;
  #L1c5ab4.  v0:= v2.`c.e.f$d.g` @type ^`int`;
  #L1c5ab8.  v1:= 1I;
  #L1c5aba.  v0:= v0 + v1 @kind int;
  #L1c5abc.  v2.`c.e.f$d.g` @type ^`int` := v0;
  #L1c5ac0.  v2.`c.e.f$d.h` @type ^`boolean` := v1 @kind boolean;
  #L1c5ac4.  return v2 @kind object;
  #L1c5ac6.  v0:= new `java.util.NoSuchElementException`;
  #L1c5aca.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L1c5ad0.  throw v0;
}
procedure `void` `remove`(`c.e.f$d` v2 @kind this) @signature `Lc/e/f$d;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c5b1c.  v0:= v2.`c.e.f$d.h` @type ^`boolean` @kind boolean;
  #L1c5b20.  if v0 == 0 then goto L1c5b52;
  #L1c5b24.  v0:= v2.`c.e.f$d.i` @type ^`c.e.f` @kind object;
  #L1c5b28.  v1:= v2.`c.e.f$d.g` @type ^`int`;
  #L1c5b2c.  call `colRemoveAt`(v0, v1) @signature `Lc/e/f;.colRemoveAt:(I)V` @kind virtual;
  #L1c5b32.  v0:= v2.`c.e.f$d.g` @type ^`int`;
  #L1c5b36.  v0:= v0 + -1;
  #L1c5b3a.  v2.`c.e.f$d.g` @type ^`int` := v0;
  #L1c5b3e.  v0:= v2.`c.e.f$d.f` @type ^`int`;
  #L1c5b42.  v0:= v0 + -1;
  #L1c5b46.  v2.`c.e.f$d.f` @type ^`int` := v0;
  #L1c5b4a.  v0:= 0I;
  #L1c5b4c.  v2.`c.e.f$d.h` @type ^`boolean` := v0 @kind boolean;
  #L1c5b50.  return @kind void;
  #L1c5b52.  v0:= new `java.lang.IllegalStateException`;
  #L1c5b56.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1c5b5c.  throw v0;
}
procedure `java.lang.Object` `setValue`(`c.e.f$d` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lc/e/f$d;.setValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c5a20.  v0:= v2.`c.e.f$d.h` @type ^`boolean` @kind boolean;
  #L1c5a24.  if v0 == 0 then goto L1c5a3a;
  #L1c5a28.  v0:= v2.`c.e.f$d.i` @type ^`c.e.f` @kind object;
  #L1c5a2c.  v1:= v2.`c.e.f$d.g` @type ^`int`;
  #L1c5a30.  call temp:= `colSetValue`(v0, v1, v3) @signature `Lc/e/f;.colSetValue:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c5a36.  v3:= temp @kind object;
  #L1c5a38.  return v3 @kind object;
  #L1c5a3a.  v3:= new `java.lang.IllegalStateException`;
  #L1c5a3e.  v0:= "This container does not support retaining Map.Entry objects" @kind object;
  #L1c5a42.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c5a48.  throw v3;
}
procedure `java.lang.String` `toString`(`c.e.f$d` v2 @kind this) @signature `Lc/e/f$d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c5a5c.  v0:= new `java.lang.StringBuilder`;
  #L1c5a60.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c5a66.  call temp:= `getKey`(v2) @signature `Lc/e/f$d;.getKey:()Ljava/lang/Object;` @kind virtual;
  #L1c5a6c.  v1:= temp @kind object;
  #L1c5a6e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c5a74.  v1:= "=" @kind object;
  #L1c5a78.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c5a7e.  call temp:= `getValue`(v2) @signature `Lc/e/f$d;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L1c5a84.  v1:= temp @kind object;
  #L1c5a86.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c5a8c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c5a92.  v0:= temp @kind object;
  #L1c5a94.  return v0 @kind object;
}
