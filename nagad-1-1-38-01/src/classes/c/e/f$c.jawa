record `c.e.f$c` @kind class @AccessFlag FINAL extends `java.util.Set` @kind interface {
  `c.e.f` `c.e.f$c.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.e.f$c` v0 @kind this, `c.e.f` v1 @kind object) @signature `Lc/e/f$c;.<init>:(Lc/e/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c583c.  v0.`c.e.f$c.f` @type ^`c.e.f` := v1 @kind object;
  #L1c5840.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c5846.  return @kind void;
}
procedure `boolean` `add`(`c.e.f$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/e/f$c;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L1c5618.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1c561c.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L1c5622.  throw v1;
}
procedure `boolean` `addAll`(`c.e.f$c` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lc/e/f$c;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L1c5634.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1c5638.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L1c563e.  throw v1;
}
procedure `void` `clear`(`c.e.f$c` v1 @kind this) @signature `Lc/e/f$c;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c5858.  v0:= v1.`c.e.f$c.f` @type ^`c.e.f` @kind object;
  #L1c585c.  call `colClear`(v0) @signature `Lc/e/f;.colClear:()V` @kind virtual;
  #L1c5862.  return @kind void;
}
procedure `boolean` `contains`(`c.e.f$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/e/f$c;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c5650.  v0:= v1.`c.e.f$c.f` @type ^`c.e.f` @kind object;
  #L1c5654.  call temp:= `colIndexOfKey`(v0, v2) @signature `Lc/e/f;.colIndexOfKey:(Ljava/lang/Object;)I` @kind virtual;
  #L1c565a.  v2:= temp;
  #L1c565c.  if v2 < 0 then goto L1c5664;
  #L1c5660.  v2:= 1I;
  #L1c5662.  goto L1c5666;
  #L1c5664.  v2:= 0I;
  #L1c5666.  return v2;
}
procedure `boolean` `containsAll`(`c.e.f$c` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lc/e/f$c;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c5678.  v0:= v1.`c.e.f$c.f` @type ^`c.e.f` @kind object;
  #L1c567c.  call temp:= `colGetMap`(v0) @signature `Lc/e/f;.colGetMap:()Ljava/util/Map;` @kind virtual;
  #L1c5682.  v0:= temp @kind object;
  #L1c5684.  call temp:= `containsAllHelper`(v0, v2) @signature `Lc/e/f;.containsAllHelper:(Ljava/util/Map;Ljava/util/Collection;)Z` @kind static;
  #L1c568a.  v2:= temp;
  #L1c568c.  return v2;
}
procedure `boolean` `equals`(`c.e.f$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/e/f$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L1c56a0.  call temp:= `equalsSetHelper`(v0, v1) @signature `Lc/e/f;.equalsSetHelper:(Ljava/util/Set;Ljava/lang/Object;)Z` @kind static;
  #L1c56a6.  v1:= temp;
  #L1c56a8.  return v1;
}
procedure `int` `hashCode`(`c.e.f$c` v4 @kind this) @signature `Lc/e/f$c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c5768.  v0:= v4.`c.e.f$c.f` @type ^`c.e.f` @kind object;
  #L1c576c.  call temp:= `colGetSize`(v0) @signature `Lc/e/f;.colGetSize:()I` @kind virtual;
  #L1c5772.  v0:= temp;
  #L1c5774.  v0:= v0 + -1;
  #L1c5778.  v1:= 0I;
  #L1c577a.  v2:= 0I;
  #L1c577c.  if v0 < 0 then goto L1c57a4;
  #L1c5780.  v3:= v4.`c.e.f$c.f` @type ^`c.e.f` @kind object;
  #L1c5784.  call temp:= `colGetEntry`(v3, v0, v1) @signature `Lc/e/f;.colGetEntry:(II)Ljava/lang/Object;` @kind virtual;
  #L1c578a.  v3:= temp @kind object;
  #L1c578c.  if v3 != 0 then goto L1c5794;
  #L1c5790.  v3:= 0I;
  #L1c5792.  goto L1c579c;
  #L1c5794.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1c579a.  v3:= temp;
  #L1c579c.  v2:= v2 + v3 @kind int;
  #L1c579e.  v0:= v0 + -1;
  #L1c57a2.  goto L1c577c;
  #L1c57a4.  return v2;
}
procedure `boolean` `isEmpty`(`c.e.f$c` v1 @kind this) @signature `Lc/e/f$c;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c56bc.  v0:= v1.`c.e.f$c.f` @type ^`c.e.f` @kind object;
  #L1c56c0.  call temp:= `colGetSize`(v0) @signature `Lc/e/f;.colGetSize:()I` @kind virtual;
  #L1c56c6.  v0:= temp;
  #L1c56c8.  if v0 != 0 then goto L1c56d0;
  #L1c56cc.  v0:= 1I;
  #L1c56ce.  goto L1c56d2;
  #L1c56d0.  v0:= 0I;
  #L1c56d2.  return v0;
}
procedure `java.util.Iterator` `iterator`(`c.e.f$c` v3 @kind this) @signature `Lc/e/f$c;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c5818.  v0:= new `c.e.f$a`;
  #L1c581c.  v1:= v3.`c.e.f$c.f` @type ^`c.e.f` @kind object;
  #L1c5820.  v2:= 0I;
  #L1c5822.  call `<init>`(v0, v1, v2) @signature `Lc/e/f$a;.<init>:(Lc/e/f;I)V` @kind direct;
  #L1c5828.  return v0 @kind object;
}
procedure `boolean` `remove`(`c.e.f$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/e/f$c;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c56e4.  v0:= v1.`c.e.f$c.f` @type ^`c.e.f` @kind object;
  #L1c56e8.  call temp:= `colIndexOfKey`(v0, v2) @signature `Lc/e/f;.colIndexOfKey:(Ljava/lang/Object;)I` @kind virtual;
  #L1c56ee.  v2:= temp;
  #L1c56f0.  if v2 < 0 then goto L1c5702;
  #L1c56f4.  v0:= v1.`c.e.f$c.f` @type ^`c.e.f` @kind object;
  #L1c56f8.  call `colRemoveAt`(v0, v2) @signature `Lc/e/f;.colRemoveAt:(I)V` @kind virtual;
  #L1c56fe.  v2:= 1I;
  #L1c5700.  return v2;
  #L1c5702.  v2:= 0I;
  #L1c5704.  return v2;
}
procedure `boolean` `removeAll`(`c.e.f$c` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lc/e/f$c;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c5718.  v0:= v1.`c.e.f$c.f` @type ^`c.e.f` @kind object;
  #L1c571c.  call temp:= `colGetMap`(v0) @signature `Lc/e/f;.colGetMap:()Ljava/util/Map;` @kind virtual;
  #L1c5722.  v0:= temp @kind object;
  #L1c5724.  call temp:= `removeAllHelper`(v0, v2) @signature `Lc/e/f;.removeAllHelper:(Ljava/util/Map;Ljava/util/Collection;)Z` @kind static;
  #L1c572a.  v2:= temp;
  #L1c572c.  return v2;
}
procedure `boolean` `retainAll`(`c.e.f$c` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lc/e/f$c;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c5740.  v0:= v1.`c.e.f$c.f` @type ^`c.e.f` @kind object;
  #L1c5744.  call temp:= `colGetMap`(v0) @signature `Lc/e/f;.colGetMap:()Ljava/util/Map;` @kind virtual;
  #L1c574a.  v0:= temp @kind object;
  #L1c574c.  call temp:= `retainAllHelper`(v0, v2) @signature `Lc/e/f;.retainAllHelper:(Ljava/util/Map;Ljava/util/Collection;)Z` @kind static;
  #L1c5752.  v2:= temp;
  #L1c5754.  return v2;
}
procedure `int` `size`(`c.e.f$c` v1 @kind this) @signature `Lc/e/f$c;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c57b8.  v0:= v1.`c.e.f$c.f` @type ^`c.e.f` @kind object;
  #L1c57bc.  call temp:= `colGetSize`(v0) @signature `Lc/e/f;.colGetSize:()I` @kind virtual;
  #L1c57c2.  v0:= temp;
  #L1c57c4.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`c.e.f$c` v2 @kind this) @signature `Lc/e/f$c;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c57d8.  v0:= v2.`c.e.f$c.f` @type ^`c.e.f` @kind object;
  #L1c57dc.  v1:= 0I;
  #L1c57de.  call temp:= `toArrayHelper`(v0, v1) @signature `Lc/e/f;.toArrayHelper:(I)[Ljava/lang/Object;` @kind virtual;
  #L1c57e4.  v0:= temp @kind object;
  #L1c57e6.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`c.e.f$c` v2 @kind this, `java.lang.Object`[] v3 @kind object) @signature `Lc/e/f$c;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c57f8.  v0:= v2.`c.e.f$c.f` @type ^`c.e.f` @kind object;
  #L1c57fc.  v1:= 0I;
  #L1c57fe.  call temp:= `toArrayHelper`(v0, v3, v1) @signature `Lc/e/f;.toArrayHelper:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind virtual;
  #L1c5804.  v3:= temp @kind object;
  #L1c5806.  return v3 @kind object;
}
