record `c.e.d` @kind class @AccessFlag PUBLIC extends `java.lang.Cloneable` @kind interface {
  `boolean` `c.e.d.f` @AccessFlag PRIVATE;
  `long`[] `c.e.d.g` @AccessFlag PRIVATE;
  `java.lang.Object`[] `c.e.d.h` @AccessFlag PRIVATE;
  `int` `c.e.d.i` @AccessFlag PRIVATE;
}
global `java.lang.Object` `@@c.e.d.j` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lc/e/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c4a28.  v0:= new `java.lang.Object`;
  #L1c4a2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c4a32.  `@@c.e.d.j` @type ^`java.lang.Object` := v0 @kind object;
  #L1c4a36.  return @kind void;
}
procedure `void` `<init>`(`c.e.d` v1 @kind this) @signature `Lc/e/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c4a48.  v0:= 10I;
  #L1c4a4c.  call `<init>`(v1, v0) @signature `Lc/e/d;.<init>:(I)V` @kind direct;
  #L1c4a52.  return @kind void;
}
procedure `void` `<init>`(`c.e.d` v1 @kind this, `int` v2 ) @signature `Lc/e/d;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c4a64.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c4a6a.  v0:= 0I;
  #L1c4a6c.  v1.`c.e.d.f` @type ^`boolean` := v0 @kind boolean;
  #L1c4a70.  if v2 != 0 then goto L1c4a86;
  #L1c4a74.  v2:= `@@c.e.c.b` @type ^`long`[] @kind object;
  #L1c4a78.  v1.`c.e.d.g` @type ^`long`[] := v2 @kind object;
  #L1c4a7c.  v2:= `@@c.e.c.c` @type ^`java.lang.Object`[] @kind object;
  #L1c4a80.  v1.`c.e.d.h` @type ^`java.lang.Object`[] := v2 @kind object;
  #L1c4a84.  goto L1c4a9e;
  #L1c4a86.  call temp:= `idealLongArraySize`(v2) @signature `Lc/e/c;.idealLongArraySize:(I)I` @kind static;
  #L1c4a8c.  v2:= temp;
  #L1c4a8e.  v0:= new `long`[v2];
  #L1c4a92.  v1.`c.e.d.g` @type ^`long`[] := v0 @kind object;
  #L1c4a96.  v2:= new `java.lang.Object`[v2];
  #L1c4a9a.  v1.`c.e.d.h` @type ^`java.lang.Object`[] := v2 @kind object;
  #L1c4a9e.  return @kind void;
}
procedure `void` `a`(`c.e.d` v9 @kind this) @signature `Lc/e/d;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1c4b98.  v0:= v9.`c.e.d.i` @type ^`int`;
  #L1c4b9c.  v1:= v9.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c4ba0.  v2:= v9.`c.e.d.h` @type ^`java.lang.Object`[] @kind object;
  #L1c4ba4.  v3:= 0I;
  #L1c4ba6.  v4:= 0I;
  #L1c4ba8.  v5:= 0I;
  #L1c4baa.  if v4 >= v0 then goto L1c4bda;
  #L1c4bae.  v6:= v2[v4] @kind object;
  #L1c4bb2.  v7:= `@@c.e.d.j` @type ^`java.lang.Object` @kind object;
  #L1c4bb6.  if v6 == v7 then goto L1c4bd4;
  #L1c4bba.  if v4 == v5 then goto L1c4bd0;
  #L1c4bbe.  v7:= v1[v4] @kind wide;
  #L1c4bc2.  v1[v5]:= v7 @kind wide;
  #L1c4bc6.  v2[v5]:= v6 @kind object;
  #L1c4bca.  v6:= 0I;
  #L1c4bcc.  v2[v4]:= v6 @kind object;
  #L1c4bd0.  v5:= v5 + 1;
  #L1c4bd4.  v4:= v4 + 1;
  #L1c4bd8.  goto L1c4baa;
  #L1c4bda.  v9.`c.e.d.f` @type ^`boolean` := v3 @kind boolean;
  #L1c4bde.  v9.`c.e.d.i` @type ^`int` := v5;
  #L1c4be2.  return @kind void;
}
procedure `void` `append`(`c.e.d` v6 @kind this, `long` v7 , `java.lang.Object` v9 @kind object) @signature `Lc/e/d;.append:(JLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1c4ab0.  v0:= v6.`c.e.d.i` @type ^`int`;
  #L1c4ab4.  if v0 == 0 then goto L1c4ad4;
  #L1c4ab8.  v1:= v6.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c4abc.  v0:= v0 + -1;
  #L1c4ac0.  v0:= v1[v0] @kind wide;
  #L1c4ac4.  v2:= lcmp(v7, v0);
  #L1c4ac8.  if v2 > 0 then goto L1c4ad4;
  #L1c4acc.  call `put`(v6, v7, v9) @signature `Lc/e/d;.put:(JLjava/lang/Object;)V` @kind virtual;
  #L1c4ad2.  return @kind void;
  #L1c4ad4.  v0:= v6.`c.e.d.f` @type ^`boolean` @kind boolean;
  #L1c4ad8.  if v0 == 0 then goto L1c4af0;
  #L1c4adc.  v0:= v6.`c.e.d.i` @type ^`int`;
  #L1c4ae0.  v1:= v6.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c4ae4.  v1:= length @variable v1;
  #L1c4ae6.  if v0 < v1 then goto L1c4af0;
  #L1c4aea.  call `a`(v6) @signature `Lc/e/d;.a:()V` @kind direct;
  #L1c4af0.  v0:= v6.`c.e.d.i` @type ^`int`;
  #L1c4af4.  v1:= v6.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c4af8.  v1:= length @variable v1;
  #L1c4afa.  if v0 < v1 then goto L1c4b34;
  #L1c4afe.  v1:= v0 + 1;
  #L1c4b02.  call temp:= `idealLongArraySize`(v1) @signature `Lc/e/c;.idealLongArraySize:(I)I` @kind static;
  #L1c4b08.  v1:= temp;
  #L1c4b0a.  v2:= new `long`[v1];
  #L1c4b0e.  v1:= new `java.lang.Object`[v1];
  #L1c4b12.  v3:= v6.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c4b16.  v4:= length @variable v3;
  #L1c4b18.  v5:= 0I;
  #L1c4b1a.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c4b20.  v3:= v6.`c.e.d.h` @type ^`java.lang.Object`[] @kind object;
  #L1c4b24.  v4:= length @variable v3;
  #L1c4b26.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c4b2c.  v6.`c.e.d.g` @type ^`long`[] := v2 @kind object;
  #L1c4b30.  v6.`c.e.d.h` @type ^`java.lang.Object`[] := v1 @kind object;
  #L1c4b34.  v1:= v6.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c4b38.  v1[v0]:= v7 @kind wide;
  #L1c4b3c.  v7:= v6.`c.e.d.h` @type ^`java.lang.Object`[] @kind object;
  #L1c4b40.  v7[v0]:= v9 @kind object;
  #L1c4b44.  v0:= v0 + 1;
  #L1c4b48.  v6.`c.e.d.i` @type ^`int` := v0;
  #L1c4b4c.  return @kind void;
}
procedure `void` `clear`(`c.e.d` v5 @kind this) @signature `Lc/e/d;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c4b60.  v0:= v5.`c.e.d.i` @type ^`int`;
  #L1c4b64.  v1:= v5.`c.e.d.h` @type ^`java.lang.Object`[] @kind object;
  #L1c4b68.  v2:= 0I;
  #L1c4b6a.  v3:= 0I;
  #L1c4b6c.  if v3 >= v0 then goto L1c4b7c;
  #L1c4b70.  v4:= 0I;
  #L1c4b72.  v1[v3]:= v4 @kind object;
  #L1c4b76.  v3:= v3 + 1;
  #L1c4b7a.  goto L1c4b6c;
  #L1c4b7c.  v5.`c.e.d.i` @type ^`int` := v2;
  #L1c4b80.  v5.`c.e.d.f` @type ^`boolean` := v2 @kind boolean;
  #L1c4b84.  return @kind void;
}
procedure `c.e.d` `clone`(`c.e.d` v2 @kind this) @signature `Lc/e/d;.clone:()Lc/e/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c47dc.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L1c47e2.  v0:= temp @kind object;
  #L1c47e4.  v0:= (`c.e.d`) v0 @kind object;
  #L1c47e8.  v1:= v2.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c47ec.  call temp:= `clone`(v1) @signature `[J.clone:()Ljava/lang/Object;` @kind virtual;
  #L1c47f2.  v1:= temp @kind object;
  #L1c47f4.  v1:= (`long`[]) v1 @kind object;
  #L1c47f8.  v0.`c.e.d.g` @type ^`long`[] := v1 @kind object;
  #L1c47fc.  v1:= v2.`c.e.d.h` @type ^`java.lang.Object`[] @kind object;
  #L1c4800.  call temp:= `clone`(v1) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1c4806.  v1:= temp @kind object;
  #L1c4808.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L1c480c.  v0.`c.e.d.h` @type ^`java.lang.Object`[] := v1 @kind object;
  #L1c4810.  return v0 @kind object;
  #L1c4812.  v0:= Exception @type ^`java.lang.CloneNotSupportedException` @kind object;
  #L1c4814.  v1:= new `java.lang.AssertionError`;
  #L1c4818.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1c481e.  throw v1;
  catch `java.lang.CloneNotSupportedException` @[L1c47dc..L1c4810] goto L1c4812;
}
procedure `java.lang.Object` `clone`(`c.e.d` v1 @kind this) @signature `Lc/e/d;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1c48b8.  call temp:= `clone`(v1) @signature `Lc/e/d;.clone:()Lc/e/d;` @kind virtual;
  #L1c48be.  v0:= temp @kind object;
  #L1c48c0.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`c.e.d` v1 @kind this, `long` v2 ) @signature `Lc/e/d;.get:(J)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c48d4.  v0:= 0I;
  #L1c48d6.  call temp:= `get`(v1, v2, v0) @signature `Lc/e/d;.get:(JLjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c48dc.  v2:= temp @kind object;
  #L1c48de.  return v2 @kind object;
}
procedure `java.lang.Object` `get`(`c.e.d` v2 @kind this, `long` v3 , `java.lang.Object` v5 @kind object) @signature `Lc/e/d;.get:(JLjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c48f0.  v0:= v2.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c48f4.  v1:= v2.`c.e.d.i` @type ^`int`;
  #L1c48f8.  call temp:= `a`(v0, v1, v3) @signature `Lc/e/c;.a:([JIJ)I` @kind static;
  #L1c48fe.  v3:= temp;
  #L1c4900.  if v3 < 0 then goto L1c491c;
  #L1c4904.  v4:= v2.`c.e.d.h` @type ^`java.lang.Object`[] @kind object;
  #L1c4908.  v0:= v4[v3] @kind object;
  #L1c490c.  v1:= `@@c.e.d.j` @type ^`java.lang.Object` @kind object;
  #L1c4910.  if v0 != v1 then goto L1c4916;
  #L1c4914.  goto L1c491c;
  #L1c4916.  v3:= v4[v3] @kind object;
  #L1c491a.  return v3 @kind object;
  #L1c491c.  return v5 @kind object;
}
procedure `int` `indexOfKey`(`c.e.d` v2 @kind this, `long` v3 ) @signature `Lc/e/d;.indexOfKey:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c4864.  v0:= v2.`c.e.d.f` @type ^`boolean` @kind boolean;
  #L1c4868.  if v0 == 0 then goto L1c4872;
  #L1c486c.  call `a`(v2) @signature `Lc/e/d;.a:()V` @kind direct;
  #L1c4872.  v0:= v2.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c4876.  v1:= v2.`c.e.d.i` @type ^`int`;
  #L1c487a.  call temp:= `a`(v0, v1, v3) @signature `Lc/e/c;.a:([JIJ)I` @kind static;
  #L1c4880.  v3:= temp;
  #L1c4882.  return v3;
}
procedure `boolean` `isEmpty`(`c.e.d` v1 @kind this) @signature `Lc/e/d;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c4840.  call temp:= `size`(v1) @signature `Lc/e/d;.size:()I` @kind virtual;
  #L1c4846.  v0:= temp;
  #L1c4848.  if v0 != 0 then goto L1c4850;
  #L1c484c.  v0:= 1I;
  #L1c484e.  goto L1c4852;
  #L1c4850.  v0:= 0I;
  #L1c4852.  return v0;
}
procedure `long` `keyAt`(`c.e.d` v3 @kind this, `int` v4 ) @signature `Lc/e/d;.keyAt:(I)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c4a00.  v0:= v3.`c.e.d.f` @type ^`boolean` @kind boolean;
  #L1c4a04.  if v0 == 0 then goto L1c4a0e;
  #L1c4a08.  call `a`(v3) @signature `Lc/e/d;.a:()V` @kind direct;
  #L1c4a0e.  v0:= v3.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c4a12.  v1:= v0[v4] @kind wide;
  #L1c4a16.  return v1 @kind wide;
}
procedure `void` `put`(`c.e.d` v6 @kind this, `long` v7 , `java.lang.Object` v9 @kind object) @signature `Lc/e/d;.put:(JLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1c4bf4.  v0:= v6.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c4bf8.  v1:= v6.`c.e.d.i` @type ^`int`;
  #L1c4bfc.  call temp:= `a`(v0, v1, v7) @signature `Lc/e/c;.a:([JIJ)I` @kind static;
  #L1c4c02.  v0:= temp;
  #L1c4c04.  if v0 < 0 then goto L1c4c12;
  #L1c4c08.  v7:= v6.`c.e.d.h` @type ^`java.lang.Object`[] @kind object;
  #L1c4c0c.  v7[v0]:= v9 @kind object;
  #L1c4c10.  goto L1c4cf4;
  #L1c4c12.  v0:= ~v0 @kind int;
  #L1c4c14.  v1:= v6.`c.e.d.i` @type ^`int`;
  #L1c4c18.  if v0 >= v1 then goto L1c4c3a;
  #L1c4c1c.  v1:= v6.`c.e.d.h` @type ^`java.lang.Object`[] @kind object;
  #L1c4c20.  v2:= v1[v0] @kind object;
  #L1c4c24.  v3:= `@@c.e.d.j` @type ^`java.lang.Object` @kind object;
  #L1c4c28.  if v2 != v3 then goto L1c4c3a;
  #L1c4c2c.  v2:= v6.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c4c30.  v2[v0]:= v7 @kind wide;
  #L1c4c34.  v1[v0]:= v9 @kind object;
  #L1c4c38.  return @kind void;
  #L1c4c3a.  v1:= v6.`c.e.d.f` @type ^`boolean` @kind boolean;
  #L1c4c3e.  if v1 == 0 then goto L1c4c68;
  #L1c4c42.  v1:= v6.`c.e.d.i` @type ^`int`;
  #L1c4c46.  v2:= v6.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c4c4a.  v2:= length @variable v2;
  #L1c4c4c.  if v1 < v2 then goto L1c4c68;
  #L1c4c50.  call `a`(v6) @signature `Lc/e/d;.a:()V` @kind direct;
  #L1c4c56.  v0:= v6.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c4c5a.  v1:= v6.`c.e.d.i` @type ^`int`;
  #L1c4c5e.  call temp:= `a`(v0, v1, v7) @signature `Lc/e/c;.a:([JIJ)I` @kind static;
  #L1c4c64.  v0:= temp;
  #L1c4c66.  v0:= ~v0 @kind int;
  #L1c4c68.  v1:= v6.`c.e.d.i` @type ^`int`;
  #L1c4c6c.  v2:= v6.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c4c70.  v2:= length @variable v2;
  #L1c4c72.  if v1 < v2 then goto L1c4cac;
  #L1c4c76.  v1:= v1 + 1;
  #L1c4c7a.  call temp:= `idealLongArraySize`(v1) @signature `Lc/e/c;.idealLongArraySize:(I)I` @kind static;
  #L1c4c80.  v1:= temp;
  #L1c4c82.  v2:= new `long`[v1];
  #L1c4c86.  v1:= new `java.lang.Object`[v1];
  #L1c4c8a.  v3:= v6.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c4c8e.  v4:= length @variable v3;
  #L1c4c90.  v5:= 0I;
  #L1c4c92.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c4c98.  v3:= v6.`c.e.d.h` @type ^`java.lang.Object`[] @kind object;
  #L1c4c9c.  v4:= length @variable v3;
  #L1c4c9e.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c4ca4.  v6.`c.e.d.g` @type ^`long`[] := v2 @kind object;
  #L1c4ca8.  v6.`c.e.d.h` @type ^`java.lang.Object`[] := v1 @kind object;
  #L1c4cac.  v1:= v6.`c.e.d.i` @type ^`int`;
  #L1c4cb0.  v2:= v1 - v0 @kind int;
  #L1c4cb4.  if v2 == 0 then goto L1c4cd8;
  #L1c4cb8.  v2:= v6.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c4cbc.  v3:= v0 + 1;
  #L1c4cc0.  v1:= v1 - v0 @kind int;
  #L1c4cc2.  call `arraycopy`(v2, v0, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c4cc8.  v1:= v6.`c.e.d.h` @type ^`java.lang.Object`[] @kind object;
  #L1c4ccc.  v2:= v6.`c.e.d.i` @type ^`int`;
  #L1c4cd0.  v2:= v2 - v0 @kind int;
  #L1c4cd2.  call `arraycopy`(v1, v0, v1, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c4cd8.  v1:= v6.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c4cdc.  v1[v0]:= v7 @kind wide;
  #L1c4ce0.  v7:= v6.`c.e.d.h` @type ^`java.lang.Object`[] @kind object;
  #L1c4ce4.  v7[v0]:= v9 @kind object;
  #L1c4ce8.  v7:= v6.`c.e.d.i` @type ^`int`;
  #L1c4cec.  v7:= v7 + 1;
  #L1c4cf0.  v6.`c.e.d.i` @type ^`int` := v7;
  #L1c4cf4.  return @kind void;
}
procedure `void` `remove`(`c.e.d` v2 @kind this, `long` v3 ) @signature `Lc/e/d;.remove:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c4d08.  v0:= v2.`c.e.d.g` @type ^`long`[] @kind object;
  #L1c4d0c.  v1:= v2.`c.e.d.i` @type ^`int`;
  #L1c4d10.  call temp:= `a`(v0, v1, v3) @signature `Lc/e/c;.a:([JIJ)I` @kind static;
  #L1c4d16.  v3:= temp;
  #L1c4d18.  if v3 < 0 then goto L1c4d36;
  #L1c4d1c.  v4:= v2.`c.e.d.h` @type ^`java.lang.Object`[] @kind object;
  #L1c4d20.  v0:= v4[v3] @kind object;
  #L1c4d24.  v1:= `@@c.e.d.j` @type ^`java.lang.Object` @kind object;
  #L1c4d28.  if v0 == v1 then goto L1c4d36;
  #L1c4d2c.  v4[v3]:= v1 @kind object;
  #L1c4d30.  v3:= 1I;
  #L1c4d32.  v2.`c.e.d.f` @type ^`boolean` := v3 @kind boolean;
  #L1c4d36.  return @kind void;
}
procedure `void` `removeAt`(`c.e.d` v3 @kind this, `int` v4 ) @signature `Lc/e/d;.removeAt:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c4d48.  v0:= v3.`c.e.d.h` @type ^`java.lang.Object`[] @kind object;
  #L1c4d4c.  v1:= v0[v4] @kind object;
  #L1c4d50.  v2:= `@@c.e.d.j` @type ^`java.lang.Object` @kind object;
  #L1c4d54.  if v1 == v2 then goto L1c4d62;
  #L1c4d58.  v0[v4]:= v2 @kind object;
  #L1c4d5c.  v4:= 1I;
  #L1c4d5e.  v3.`c.e.d.f` @type ^`boolean` := v4 @kind boolean;
  #L1c4d62.  return @kind void;
}
procedure `int` `size`(`c.e.d` v1 @kind this) @signature `Lc/e/d;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c4894.  v0:= v1.`c.e.d.f` @type ^`boolean` @kind boolean;
  #L1c4898.  if v0 == 0 then goto L1c48a2;
  #L1c489c.  call `a`(v1) @signature `Lc/e/d;.a:()V` @kind direct;
  #L1c48a2.  v0:= v1.`c.e.d.i` @type ^`int`;
  #L1c48a6.  return v0;
}
procedure `java.lang.String` `toString`(`c.e.d` v4 @kind this) @signature `Lc/e/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c4958.  call temp:= `size`(v4) @signature `Lc/e/d;.size:()I` @kind virtual;
  #L1c495e.  v0:= temp;
  #L1c4960.  if v0 > 0 then goto L1c496a;
  #L1c4964.  v0:= "{}" @kind object;
  #L1c4968.  return v0 @kind object;
  #L1c496a.  v0:= new `java.lang.StringBuilder`;
  #L1c496e.  v1:= v4.`c.e.d.i` @type ^`int`;
  #L1c4972.  v1:= v1 * 28;
  #L1c4976.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1c497c.  v1:= 123I;
  #L1c4980.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4986.  v1:= 0I;
  #L1c4988.  v2:= v4.`c.e.d.i` @type ^`int`;
  #L1c498c.  if v1 >= v2 then goto L1c49da;
  #L1c4990.  if v1 <= 0 then goto L1c499e;
  #L1c4994.  v2:= ", " @kind object;
  #L1c4998.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c499e.  call temp:= `keyAt`(v4, v1) @signature `Lc/e/d;.keyAt:(I)J` @kind virtual;
  #L1c49a4.  v2:= temp @kind wide;
  #L1c49a6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c49ac.  v2:= 61I;
  #L1c49b0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c49b6.  call temp:= `valueAt`(v4, v1) @signature `Lc/e/d;.valueAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c49bc.  v2:= temp @kind object;
  #L1c49be.  if v2 == v4 then goto L1c49ca;
  #L1c49c2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c49c8.  goto L1c49d4;
  #L1c49ca.  v2:= "(this Map)" @kind object;
  #L1c49ce.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c49d4.  v1:= v1 + 1;
  #L1c49d8.  goto L1c4988;
  #L1c49da.  v1:= 125I;
  #L1c49de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c49e4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c49ea.  v0:= temp @kind object;
  #L1c49ec.  return v0 @kind object;
}
procedure `java.lang.Object` `valueAt`(`c.e.d` v1 @kind this, `int` v2 ) @signature `Lc/e/d;.valueAt:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c4930.  v0:= v1.`c.e.d.f` @type ^`boolean` @kind boolean;
  #L1c4934.  if v0 == 0 then goto L1c493e;
  #L1c4938.  call `a`(v1) @signature `Lc/e/d;.a:()V` @kind direct;
  #L1c493e.  v0:= v1.`c.e.d.h` @type ^`java.lang.Object`[] @kind object;
  #L1c4942.  v2:= v0[v2] @kind object;
  #L1c4946.  return v2 @kind object;
}
