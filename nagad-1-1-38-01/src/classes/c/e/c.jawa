record `c.e.c` @kind class @AccessFlag  {
}
global `int`[] `@@c.e.c.a` @AccessFlag STATIC_FINAL;
global `long`[] `@@c.e.c.b` @AccessFlag STATIC_FINAL;
global `java.lang.Object`[] `@@c.e.c.c` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lc/e/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1c47b0.  v0:= 0I;
  #L1c47b2.  v1:= new `int`[v0];
  #L1c47b6.  `@@c.e.c.a` @type ^`int`[] := v1 @kind object;
  #L1c47ba.  v1:= new `long`[v0];
  #L1c47be.  `@@c.e.c.b` @type ^`long`[] := v1 @kind object;
  #L1c47c2.  v0:= new `java.lang.Object`[v0];
  #L1c47c6.  `@@c.e.c.c` @type ^`java.lang.Object`[] := v0 @kind object;
  #L1c47ca.  return @kind void;
}
procedure `int` `a`(`int`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lc/e/c;.a:([III)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1c46ac.  v4:= v4 + -1;
  #L1c46b0.  v0:= 0I;
  #L1c46b2.  if v0 > v4 then goto L1c46dc;
  #L1c46b6.  v1:= v0 + v4 @kind int;
  #L1c46ba.  v1:= v1 ^>> 1;
  #L1c46be.  v2:= v3[v1];
  #L1c46c2.  if v2 >= v5 then goto L1c46ce;
  #L1c46c6.  v1:= v1 + 1;
  #L1c46ca.  v0:= v1;
  #L1c46cc.  goto L1c46b2;
  #L1c46ce.  if v2 <= v5 then goto L1c46da;
  #L1c46d2.  v1:= v1 + -1;
  #L1c46d6.  v4:= v1;
  #L1c46d8.  goto L1c46b2;
  #L1c46da.  return v1;
  #L1c46dc.  v3:= ~v0 @kind int;
  #L1c46de.  return v3;
}
procedure `int` `a`(`long`[] v5 @kind object, `int` v6 , `long` v7 ) @signature `Lc/e/c;.a:([JIJ)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c46f0.  v6:= v6 + -1;
  #L1c46f4.  v0:= 0I;
  #L1c46f6.  if v0 > v6 then goto L1c4724;
  #L1c46fa.  v1:= v0 + v6 @kind int;
  #L1c46fe.  v1:= v1 ^>> 1;
  #L1c4702.  v2:= v5[v1] @kind wide;
  #L1c4706.  v4:= lcmp(v2, v7);
  #L1c470a.  if v4 >= 0 then goto L1c4716;
  #L1c470e.  v1:= v1 + 1;
  #L1c4712.  v0:= v1;
  #L1c4714.  goto L1c46f6;
  #L1c4716.  if v4 <= 0 then goto L1c4722;
  #L1c471a.  v1:= v1 + -1;
  #L1c471e.  v6:= v1;
  #L1c4720.  goto L1c46f6;
  #L1c4722.  return v1;
  #L1c4724.  v5:= ~v0 @kind int;
  #L1c4726.  return v5;
}
procedure `boolean` `equal`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lc/e/c;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1c467c.  if v0 == v1 then goto L1c4696;
  #L1c4680.  if v0 == 0 then goto L1c4692;
  #L1c4684.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c468a.  v0:= temp;
  #L1c468c.  if v0 == 0 then goto L1c4692;
  #L1c4690.  goto L1c4696;
  #L1c4692.  v0:= 0I;
  #L1c4694.  goto L1c4698;
  #L1c4696.  v0:= 1I;
  #L1c4698.  return v0;
}
procedure `int` `idealByteArraySize`(`int` v2 ) @signature `Lc/e/c;.idealByteArraySize:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1c4738.  v0:= 4I;
  #L1c473a.  v1:= 32I;
  #L1c473e.  if v0 >= v1 then goto L1c4756;
  #L1c4742.  v1:= 1I;
  #L1c4744.  v1:= v1 ^< v0 @kind int;
  #L1c4746.  v1:= v1 + -12;
  #L1c474a.  if v2 > v1 then goto L1c4750;
  #L1c474e.  return v1;
  #L1c4750.  v0:= v0 + 1;
  #L1c4754.  goto L1c473a;
  #L1c4756.  return v2;
}
procedure `int` `idealIntArraySize`(`int` v0 ) @signature `Lc/e/c;.idealIntArraySize:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1c4768.  v0:= v0 * 4;
  #L1c476c.  call temp:= `idealByteArraySize`(v0) @signature `Lc/e/c;.idealByteArraySize:(I)I` @kind static;
  #L1c4772.  v0:= temp;
  #L1c4774.  v0:= v0 / 4;
  #L1c4778.  return v0;
}
procedure `int` `idealLongArraySize`(`int` v0 ) @signature `Lc/e/c;.idealLongArraySize:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1c478c.  v0:= v0 * 8;
  #L1c4790.  call temp:= `idealByteArraySize`(v0) @signature `Lc/e/c;.idealByteArraySize:(I)I` @kind static;
  #L1c4796.  v0:= temp;
  #L1c4798.  v0:= v0 / 8;
  #L1c479c.  return v0;
}
