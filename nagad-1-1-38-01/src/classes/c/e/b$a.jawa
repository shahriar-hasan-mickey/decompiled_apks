record `c.e.b$a` @kind class @AccessFlag  extends `c.e.f` @kind class {
  `c.e.b` `c.e.b$a.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.e.b$a` v0 @kind this, `c.e.b` v1 @kind object) @signature `Lc/e/b$a;.<init>:(Lc/e/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c3c28.  v0.`c.e.b$a.d` @type ^`c.e.b` := v1 @kind object;
  #L1c3c2c.  call `<init>`(v0) @signature `Lc/e/f;.<init>:()V` @kind direct;
  #L1c3c32.  return @kind void;
}
procedure `void` `colClear`(`c.e.b$a` v1 @kind this) @signature `Lc/e/b$a;.colClear:()V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1c3c44.  v0:= v1.`c.e.b$a.d` @type ^`c.e.b` @kind object;
  #L1c3c48.  call `clear`(v0) @signature `Lc/e/b;.clear:()V` @kind virtual;
  #L1c3c4e.  return @kind void;
}
procedure `java.lang.Object` `colGetEntry`(`c.e.b$a` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lc/e/b$a;.colGetEntry:(II)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;

  #L1c3bc8.  v2:= v0.`c.e.b$a.d` @type ^`c.e.b` @kind object;
  #L1c3bcc.  v2:= v2.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c3bd0.  v1:= v2[v1] @kind object;
  #L1c3bd4.  return v1 @kind object;
}
procedure `java.util.Map` `colGetMap`(`c.e.b$a` v2 @kind this) @signature `Lc/e/b$a;.colGetMap:()Ljava/util/Map;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L1c3c08.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1c3c0c.  v1:= "not a map" @kind object;
  #L1c3c10.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c3c16.  throw v0;
}
procedure `int` `colGetSize`(`c.e.b$a` v1 @kind this) @signature `Lc/e/b$a;.colGetSize:()I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1c3b6c.  v0:= v1.`c.e.b$a.d` @type ^`c.e.b` @kind object;
  #L1c3b70.  v0:= v0.`c.e.b.h` @type ^`int`;
  #L1c3b74.  return v0;
}
procedure `int` `colIndexOfKey`(`c.e.b$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/e/b$a;.colIndexOfKey:(Ljava/lang/Object;)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1c3b88.  v0:= v1.`c.e.b$a.d` @type ^`c.e.b` @kind object;
  #L1c3b8c.  call temp:= `indexOf`(v0, v2) @signature `Lc/e/b;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L1c3b92.  v2:= temp;
  #L1c3b94.  return v2;
}
procedure `int` `colIndexOfValue`(`c.e.b$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/e/b$a;.colIndexOfValue:(Ljava/lang/Object;)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1c3ba8.  v0:= v1.`c.e.b$a.d` @type ^`c.e.b` @kind object;
  #L1c3bac.  call temp:= `indexOf`(v0, v2) @signature `Lc/e/b;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L1c3bb2.  v2:= temp;
  #L1c3bb4.  return v2;
}
procedure `void` `colPut`(`c.e.b$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lc/e/b$a;.colPut:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L1c3c60.  v2:= v0.`c.e.b$a.d` @type ^`c.e.b` @kind object;
  #L1c3c64.  call temp:= `add`(v2, v1) @signature `Lc/e/b;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c3c6a.  return @kind void;
}
procedure `void` `colRemoveAt`(`c.e.b$a` v1 @kind this, `int` v2 ) @signature `Lc/e/b$a;.colRemoveAt:(I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1c3c7c.  v0:= v1.`c.e.b$a.d` @type ^`c.e.b` @kind object;
  #L1c3c80.  call temp:= `removeAt`(v0, v2) @signature `Lc/e/b;.removeAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c3c86.  return @kind void;
}
procedure `java.lang.Object` `colSetValue`(`c.e.b$a` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lc/e/b$a;.colSetValue:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;

  #L1c3be8.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1c3bec.  v2:= "not a map" @kind object;
  #L1c3bf0.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c3bf6.  throw v1;
}
