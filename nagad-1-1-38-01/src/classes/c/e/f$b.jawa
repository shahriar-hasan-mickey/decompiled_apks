record `c.e.f$b` @kind class @AccessFlag FINAL extends `java.util.Set` @kind interface {
  `c.e.f` `c.e.f$b.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.e.f$b` v0 @kind this, `c.e.f` v1 @kind object) @signature `Lc/e/f$b;.<init>:(Lc/e/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c55e0.  v0.`c.e.f$b.f` @type ^`c.e.f` := v1 @kind object;
  #L1c55e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c55ea.  return @kind void;
}
procedure `boolean` `add`(`c.e.f$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/e/f$b;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1c531c.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L1c5320.  call temp:= `add`(v0, v1) @signature `Lc/e/f$b;.add:(Ljava/util/Map$Entry;)Z` @kind virtual;
  #L1c5326.  v1:= 0I;
  #L1c5328.  throw v1;
}
procedure `boolean` `add`(`c.e.f$b` v0 @kind this, `java.util.Map$Entry` v1 @kind object) @signature `Lc/e/f$b;.add:(Ljava/util/Map$Entry;)Z` @AccessFlag PUBLIC {
    temp;

  #L1c533c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1c5340.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L1c5346.  throw v1;
}
procedure `boolean` `addAll`(`c.e.f$b` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lc/e/f$b;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c5358.  v0:= v4.`c.e.f$b.f` @type ^`c.e.f` @kind object;
  #L1c535c.  call temp:= `colGetSize`(v0) @signature `Lc/e/f;.colGetSize:()I` @kind virtual;
  #L1c5362.  v0:= temp;
  #L1c5364.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c536a.  v5:= temp @kind object;
  #L1c536c.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c5372.  v1:= temp;
  #L1c5374.  if v1 == 0 then goto L1c53a0;
  #L1c5378.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c537e.  v1:= temp @kind object;
  #L1c5380.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L1c5384.  v2:= v4.`c.e.f$b.f` @type ^`c.e.f` @kind object;
  #L1c5388.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L1c538e.  v3:= temp @kind object;
  #L1c5390.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1c5396.  v1:= temp @kind object;
  #L1c5398.  call `colPut`(v2, v3, v1) @signature `Lc/e/f;.colPut:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1c539e.  goto L1c536c;
  #L1c53a0.  v5:= v4.`c.e.f$b.f` @type ^`c.e.f` @kind object;
  #L1c53a4.  call temp:= `colGetSize`(v5) @signature `Lc/e/f;.colGetSize:()I` @kind virtual;
  #L1c53aa.  v5:= temp;
  #L1c53ac.  if v0 == v5 then goto L1c53b4;
  #L1c53b0.  v5:= 1I;
  #L1c53b2.  goto L1c53b6;
  #L1c53b4.  v5:= 0I;
  #L1c53b6.  return v5;
}
procedure `void` `clear`(`c.e.f$b` v1 @kind this) @signature `Lc/e/f$b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c55fc.  v0:= v1.`c.e.f$b.f` @type ^`c.e.f` @kind object;
  #L1c5600.  call `colClear`(v0) @signature `Lc/e/f;.colClear:()V` @kind virtual;
  #L1c5606.  return @kind void;
}
procedure `boolean` `contains`(`c.e.f$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lc/e/f$b;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c53c8.  v0:= instanceof @variable v4 @type ^`java.util.Map$Entry` @kind boolean;
  #L1c53cc.  v1:= 0I;
  #L1c53ce.  if v0 != 0 then goto L1c53d4;
  #L1c53d2.  return v1;
  #L1c53d4.  v4:= (`java.util.Map$Entry`) v4 @kind object;
  #L1c53d8.  v0:= v3.`c.e.f$b.f` @type ^`c.e.f` @kind object;
  #L1c53dc.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L1c53e2.  v2:= temp @kind object;
  #L1c53e4.  call temp:= `colIndexOfKey`(v0, v2) @signature `Lc/e/f;.colIndexOfKey:(Ljava/lang/Object;)I` @kind virtual;
  #L1c53ea.  v0:= temp;
  #L1c53ec.  if v0 >= 0 then goto L1c53f2;
  #L1c53f0.  return v1;
  #L1c53f2.  v1:= v3.`c.e.f$b.f` @type ^`c.e.f` @kind object;
  #L1c53f6.  v2:= 1I;
  #L1c53f8.  call temp:= `colGetEntry`(v1, v0, v2) @signature `Lc/e/f;.colGetEntry:(II)Ljava/lang/Object;` @kind virtual;
  #L1c53fe.  v0:= temp @kind object;
  #L1c5400.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1c5406.  v4:= temp @kind object;
  #L1c5408.  call temp:= `equal`(v0, v4) @signature `Lc/e/c;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1c540e.  v4:= temp;
  #L1c5410.  return v4;
}
procedure `boolean` `containsAll`(`c.e.f$b` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lc/e/f$b;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c5424.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c542a.  v2:= temp @kind object;
  #L1c542c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c5432.  v0:= temp;
  #L1c5434.  if v0 == 0 then goto L1c5450;
  #L1c5438.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c543e.  v0:= temp @kind object;
  #L1c5440.  call temp:= `contains`(v1, v0) @signature `Lc/e/f$b;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c5446.  v0:= temp;
  #L1c5448.  if v0 != 0 then goto L1c542c;
  #L1c544c.  v2:= 0I;
  #L1c544e.  return v2;
  #L1c5450.  v2:= 1I;
  #L1c5452.  return v2;
}
procedure `boolean` `equals`(`c.e.f$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/e/f$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L1c5464.  call temp:= `equalsSetHelper`(v0, v1) @signature `Lc/e/f;.equalsSetHelper:(Ljava/util/Set;Ljava/lang/Object;)Z` @kind static;
  #L1c546a.  v1:= temp;
  #L1c546c.  return v1;
}
procedure `int` `hashCode`(`c.e.f$b` v6 @kind this) @signature `Lc/e/f$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1c54fc.  v0:= v6.`c.e.f$b.f` @type ^`c.e.f` @kind object;
  #L1c5500.  call temp:= `colGetSize`(v0) @signature `Lc/e/f;.colGetSize:()I` @kind virtual;
  #L1c5506.  v0:= temp;
  #L1c5508.  v1:= 1I;
  #L1c550a.  v0:= v0 - v1 @kind int;
  #L1c550c.  v2:= 0I;
  #L1c550e.  v3:= 0I;
  #L1c5510.  if v0 < 0 then goto L1c5556;
  #L1c5514.  v4:= v6.`c.e.f$b.f` @type ^`c.e.f` @kind object;
  #L1c5518.  call temp:= `colGetEntry`(v4, v0, v2) @signature `Lc/e/f;.colGetEntry:(II)Ljava/lang/Object;` @kind virtual;
  #L1c551e.  v4:= temp @kind object;
  #L1c5520.  v5:= v6.`c.e.f$b.f` @type ^`c.e.f` @kind object;
  #L1c5524.  call temp:= `colGetEntry`(v5, v0, v1) @signature `Lc/e/f;.colGetEntry:(II)Ljava/lang/Object;` @kind virtual;
  #L1c552a.  v5:= temp @kind object;
  #L1c552c.  if v4 != 0 then goto L1c5534;
  #L1c5530.  v4:= 0I;
  #L1c5532.  goto L1c553c;
  #L1c5534.  call temp:= `hashCode`(v4) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1c553a.  v4:= temp;
  #L1c553c.  if v5 != 0 then goto L1c5544;
  #L1c5540.  v5:= 0I;
  #L1c5542.  goto L1c554c;
  #L1c5544.  call temp:= `hashCode`(v5) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1c554a.  v5:= temp;
  #L1c554c.  v4:= v4 ^~ v5 @kind int;
  #L1c554e.  v3:= v3 + v4 @kind int;
  #L1c5550.  v0:= v0 + -1;
  #L1c5554.  goto L1c5510;
  #L1c5556.  return v3;
}
procedure `boolean` `isEmpty`(`c.e.f$b` v1 @kind this) @signature `Lc/e/f$b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c5480.  v0:= v1.`c.e.f$b.f` @type ^`c.e.f` @kind object;
  #L1c5484.  call temp:= `colGetSize`(v0) @signature `Lc/e/f;.colGetSize:()I` @kind virtual;
  #L1c548a.  v0:= temp;
  #L1c548c.  if v0 != 0 then goto L1c5494;
  #L1c5490.  v0:= 1I;
  #L1c5492.  goto L1c5496;
  #L1c5494.  v0:= 0I;
  #L1c5496.  return v0;
}
procedure `java.util.Iterator` `iterator`(`c.e.f$b` v2 @kind this) @signature `Lc/e/f$b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c55c0.  v0:= new `c.e.f$d`;
  #L1c55c4.  v1:= v2.`c.e.f$b.f` @type ^`c.e.f` @kind object;
  #L1c55c8.  call `<init>`(v0, v1) @signature `Lc/e/f$d;.<init>:(Lc/e/f;)V` @kind direct;
  #L1c55ce.  return v0 @kind object;
}
procedure `boolean` `remove`(`c.e.f$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/e/f$b;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L1c54a8.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1c54ac.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L1c54b2.  throw v1;
}
procedure `boolean` `removeAll`(`c.e.f$b` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lc/e/f$b;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L1c54c4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1c54c8.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L1c54ce.  throw v1;
}
procedure `boolean` `retainAll`(`c.e.f$b` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lc/e/f$b;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L1c54e0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1c54e4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L1c54ea.  throw v1;
}
procedure `int` `size`(`c.e.f$b` v1 @kind this) @signature `Lc/e/f$b;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c5568.  v0:= v1.`c.e.f$b.f` @type ^`c.e.f` @kind object;
  #L1c556c.  call temp:= `colGetSize`(v0) @signature `Lc/e/f;.colGetSize:()I` @kind virtual;
  #L1c5572.  v0:= temp;
  #L1c5574.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`c.e.f$b` v1 @kind this) @signature `Lc/e/f$b;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c5588.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1c558c.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L1c5592.  throw v0;
}
procedure `java.lang.Object`[] `toArray`(`c.e.f$b` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lc/e/f$b;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L1c55a4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L1c55a8.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L1c55ae.  throw v1;
}
