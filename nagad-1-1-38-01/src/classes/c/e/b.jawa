record `c.e.b` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Collection` @kind interface, `java.util.Set` @kind interface {
  `int`[] `c.e.b.f` @AccessFlag PRIVATE;
  `java.lang.Object`[] `c.e.b.g` @AccessFlag ;
  `int` `c.e.b.h` @AccessFlag ;
  `c.e.f` `c.e.b.i` @AccessFlag PRIVATE;
}
global `int`[] `@@c.e.b.j` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object`[] `@@c.e.b.k` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object`[] `@@c.e.b.l` @AccessFlag PRIVATE_STATIC;
global `int` `@@c.e.b.m` @AccessFlag PRIVATE_STATIC;
global `java.lang.Object`[] `@@c.e.b.n` @AccessFlag PRIVATE_STATIC;
global `int` `@@c.e.b.o` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lc/e/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1c43b4.  v0:= 0I;
  #L1c43b6.  v1:= new `int`[v0];
  #L1c43ba.  `@@c.e.b.j` @type ^`int`[] := v1 @kind object;
  #L1c43be.  v0:= new `java.lang.Object`[v0];
  #L1c43c2.  `@@c.e.b.k` @type ^`java.lang.Object`[] := v0 @kind object;
  #L1c43c6.  return @kind void;
}
procedure `void` `<init>`(`c.e.b` v1 @kind this) @signature `Lc/e/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c43d8.  v0:= 0I;
  #L1c43da.  call `<init>`(v1, v0) @signature `Lc/e/b;.<init>:(I)V` @kind direct;
  #L1c43e0.  return @kind void;
}
procedure `void` `<init>`(`c.e.b` v0 @kind this, `int` v1 ) @signature `Lc/e/b;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1c43f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c43fa.  if v1 != 0 then goto L1c4410;
  #L1c43fe.  v1:= `@@c.e.b.j` @type ^`int`[] @kind object;
  #L1c4402.  v0.`c.e.b.f` @type ^`int`[] := v1 @kind object;
  #L1c4406.  v1:= `@@c.e.b.k` @type ^`java.lang.Object`[] @kind object;
  #L1c440a.  v0.`c.e.b.g` @type ^`java.lang.Object`[] := v1 @kind object;
  #L1c440e.  goto L1c4416;
  #L1c4410.  call `a`(v0, v1) @signature `Lc/e/b;.a:(I)V` @kind direct;
  #L1c4416.  v1:= 0I;
  #L1c4418.  v0.`c.e.b.h` @type ^`int` := v1;
  #L1c441c.  return @kind void;
}
procedure `int` `a`(`c.e.b` v4 @kind this, `java.lang.Object` v5 @kind object, `int` v6 ) @signature `Lc/e/b;.a:(Ljava/lang/Object;I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c4000.  v0:= v4.`c.e.b.h` @type ^`int`;
  #L1c4004.  if v0 != 0 then goto L1c400c;
  #L1c4008.  v5:= -1I;
  #L1c400a.  return v5;
  #L1c400c.  v1:= v4.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c4010.  call temp:= `a`(v1, v0, v6) @signature `Lc/e/c;.a:([III)I` @kind static;
  #L1c4016.  v1:= temp;
  #L1c4018.  if v1 >= 0 then goto L1c401e;
  #L1c401c.  return v1;
  #L1c401e.  v2:= v4.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c4022.  v2:= v2[v1] @kind object;
  #L1c4026.  call temp:= `equals`(v5, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c402c.  v2:= temp;
  #L1c402e.  if v2 == 0 then goto L1c4034;
  #L1c4032.  return v1;
  #L1c4034.  v2:= v1 + 1;
  #L1c4038.  if v2 >= v0 then goto L1c4064;
  #L1c403c.  v3:= v4.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c4040.  v3:= v3[v2];
  #L1c4044.  if v3 != v6 then goto L1c4064;
  #L1c4048.  v3:= v4.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c404c.  v3:= v3[v2] @kind object;
  #L1c4050.  call temp:= `equals`(v5, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c4056.  v3:= temp;
  #L1c4058.  if v3 == 0 then goto L1c405e;
  #L1c405c.  return v2;
  #L1c405e.  v2:= v2 + 1;
  #L1c4062.  goto L1c4038;
  #L1c4064.  v1:= v1 + -1;
  #L1c4068.  if v1 < 0 then goto L1c4094;
  #L1c406c.  v0:= v4.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c4070.  v0:= v0[v1];
  #L1c4074.  if v0 != v6 then goto L1c4094;
  #L1c4078.  v0:= v4.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c407c.  v0:= v0[v1] @kind object;
  #L1c4080.  call temp:= `equals`(v5, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c4086.  v0:= temp;
  #L1c4088.  if v0 == 0 then goto L1c408e;
  #L1c408c.  return v1;
  #L1c408e.  v1:= v1 + -1;
  #L1c4092.  goto L1c4068;
  #L1c4094.  v5:= ~v2 @kind int;
  #L1c4096.  return v5;
}
procedure `c.e.f` `a`(`c.e.b` v1 @kind this) @signature `Lc/e/b;.a:()Lc/e/f;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1c3c98.  v0:= v1.`c.e.b.i` @type ^`c.e.f` @kind object;
  #L1c3c9c.  if v0 != 0 then goto L1c3cae;
  #L1c3ca0.  v0:= new `c.e.b$a`;
  #L1c3ca4.  call `<init>`(v0, v1) @signature `Lc/e/b$a;.<init>:(Lc/e/b;)V` @kind direct;
  #L1c3caa.  v1.`c.e.b.i` @type ^`c.e.f` := v0 @kind object;
  #L1c3cae.  v0:= v1.`c.e.b.i` @type ^`c.e.f` @kind object;
  #L1c3cb2.  return v0 @kind object;
}
procedure `void` `a`(`c.e.b` v5 @kind this, `int` v6 ) @signature `Lc/e/b;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c4430.  v0:= 0I;
  #L1c4432.  v1:= 0I;
  #L1c4434.  v2:= 1I;
  #L1c4436.  v3:= 8I;
  #L1c443a.  if v6 != v3 then goto L1c448c;
  #L1c443e.  v3:= constclass @type ^`c.e.b` @kind object;
  #L1c4442.  @monitorenter v3
  #L1c4444.  v4:= `@@c.e.b.n` @type ^`java.lang.Object`[] @kind object;
  #L1c4448.  if v4 == 0 then goto L1c4482;
  #L1c444c.  v6:= `@@c.e.b.n` @type ^`java.lang.Object`[] @kind object;
  #L1c4450.  v5.`c.e.b.g` @type ^`java.lang.Object`[] := v6 @kind object;
  #L1c4454.  v4:= v6[v1] @kind object;
  #L1c4458.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L1c445c.  `@@c.e.b.n` @type ^`java.lang.Object`[] := v4 @kind object;
  #L1c4460.  v4:= v6[v2] @kind object;
  #L1c4464.  v4:= (`int`[]) v4 @kind object;
  #L1c4468.  v5.`c.e.b.f` @type ^`int`[] := v4 @kind object;
  #L1c446c.  v6[v2]:= v0 @kind object;
  #L1c4470.  v6[v1]:= v0 @kind object;
  #L1c4474.  v6:= `@@c.e.b.o` @type ^`int`;
  #L1c4478.  v6:= v6 - v2 @kind int;
  #L1c447a.  `@@c.e.b.o` @type ^`int` := v6;
  #L1c447e.  @monitorexit v3
  #L1c4480.  return @kind void;
  #L1c4482.  @monitorexit v3
  #L1c4484.  goto L1c44e0;
  #L1c4486.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c4488.  @monitorexit v3
  #L1c448a.  throw v6;
  #L1c448c.  v3:= 4I;
  #L1c448e.  if v6 != v3 then goto L1c44e0;
  #L1c4492.  v3:= constclass @type ^`c.e.b` @kind object;
  #L1c4496.  @monitorenter v3
  #L1c4498.  v4:= `@@c.e.b.l` @type ^`java.lang.Object`[] @kind object;
  #L1c449c.  if v4 == 0 then goto L1c44d6;
  #L1c44a0.  v6:= `@@c.e.b.l` @type ^`java.lang.Object`[] @kind object;
  #L1c44a4.  v5.`c.e.b.g` @type ^`java.lang.Object`[] := v6 @kind object;
  #L1c44a8.  v4:= v6[v1] @kind object;
  #L1c44ac.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L1c44b0.  `@@c.e.b.l` @type ^`java.lang.Object`[] := v4 @kind object;
  #L1c44b4.  v4:= v6[v2] @kind object;
  #L1c44b8.  v4:= (`int`[]) v4 @kind object;
  #L1c44bc.  v5.`c.e.b.f` @type ^`int`[] := v4 @kind object;
  #L1c44c0.  v6[v2]:= v0 @kind object;
  #L1c44c4.  v6[v1]:= v0 @kind object;
  #L1c44c8.  v6:= `@@c.e.b.m` @type ^`int`;
  #L1c44cc.  v6:= v6 - v2 @kind int;
  #L1c44ce.  `@@c.e.b.m` @type ^`int` := v6;
  #L1c44d2.  @monitorexit v3
  #L1c44d4.  return @kind void;
  #L1c44d6.  @monitorexit v3
  #L1c44d8.  goto L1c44e0;
  #L1c44da.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c44dc.  @monitorexit v3
  #L1c44de.  throw v6;
  #L1c44e0.  v0:= new `int`[v6];
  #L1c44e4.  v5.`c.e.b.f` @type ^`int`[] := v0 @kind object;
  #L1c44e8.  v6:= new `java.lang.Object`[v6];
  #L1c44ec.  v5.`c.e.b.g` @type ^`java.lang.Object`[] := v6 @kind object;
  #L1c44f0.  return @kind void;
  catch `java.lang.Throwable` @[L1c4444..L1c448a] goto L1c4486;
  catch `java.lang.Throwable` @[L1c4498..L1c44de] goto L1c44da;
}
procedure `void` `a`(`int`[] v7 @kind object, `java.lang.Object`[] v8 @kind object, `int` v9 ) @signature `Lc/e/b;.a:([I[Ljava/lang/Object;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1c45b0.  v0:= length @variable v7;
  #L1c45b2.  v1:= 0I;
  #L1c45b4.  v2:= 2I;
  #L1c45b6.  v3:= 0I;
  #L1c45b8.  v4:= 10I;
  #L1c45bc.  v5:= 1I;
  #L1c45be.  v6:= 8I;
  #L1c45c2.  if v0 != v6 then goto L1c4608;
  #L1c45c6.  v0:= constclass @type ^`c.e.b` @kind object;
  #L1c45ca.  @monitorenter v0
  #L1c45cc.  v6:= `@@c.e.b.o` @type ^`int`;
  #L1c45d0.  if v6 >= v4 then goto L1c45fe;
  #L1c45d4.  v4:= `@@c.e.b.n` @type ^`java.lang.Object`[] @kind object;
  #L1c45d8.  v8[v3]:= v4 @kind object;
  #L1c45dc.  v8[v5]:= v7 @kind object;
  #L1c45e0.  v9:= v9 - v5 @kind int;
  #L1c45e2.  if v9 < v2 then goto L1c45f0;
  #L1c45e6.  v8[v9]:= v1 @kind object;
  #L1c45ea.  v9:= v9 + -1;
  #L1c45ee.  goto L1c45e2;
  #L1c45f0.  `@@c.e.b.n` @type ^`java.lang.Object`[] := v8 @kind object;
  #L1c45f4.  v7:= `@@c.e.b.o` @type ^`int`;
  #L1c45f8.  v7:= v7 + v5 @kind int;
  #L1c45fa.  `@@c.e.b.o` @type ^`int` := v7;
  #L1c45fe.  @monitorexit v0
  #L1c4600.  goto L1c4652;
  #L1c4602.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c4604.  @monitorexit v0
  #L1c4606.  throw v7;
  #L1c4608.  v0:= length @variable v7;
  #L1c460a.  v6:= 4I;
  #L1c460c.  if v0 != v6 then goto L1c4652;
  #L1c4610.  v0:= constclass @type ^`c.e.b` @kind object;
  #L1c4614.  @monitorenter v0
  #L1c4616.  v6:= `@@c.e.b.m` @type ^`int`;
  #L1c461a.  if v6 >= v4 then goto L1c4648;
  #L1c461e.  v4:= `@@c.e.b.l` @type ^`java.lang.Object`[] @kind object;
  #L1c4622.  v8[v3]:= v4 @kind object;
  #L1c4626.  v8[v5]:= v7 @kind object;
  #L1c462a.  v9:= v9 - v5 @kind int;
  #L1c462c.  if v9 < v2 then goto L1c463a;
  #L1c4630.  v8[v9]:= v1 @kind object;
  #L1c4634.  v9:= v9 + -1;
  #L1c4638.  goto L1c462c;
  #L1c463a.  `@@c.e.b.l` @type ^`java.lang.Object`[] := v8 @kind object;
  #L1c463e.  v7:= `@@c.e.b.m` @type ^`int`;
  #L1c4642.  v7:= v7 + v5 @kind int;
  #L1c4644.  `@@c.e.b.m` @type ^`int` := v7;
  #L1c4648.  @monitorexit v0
  #L1c464a.  goto L1c4652;
  #L1c464c.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c464e.  @monitorexit v0
  #L1c4650.  throw v7;
  #L1c4652.  return @kind void;
  catch `java.lang.Throwable` @[L1c45cc..L1c4606] goto L1c4602;
  catch `java.lang.Throwable` @[L1c4616..L1c4650] goto L1c464c;
}
procedure `int` `b`(`c.e.b` v4 @kind this) @signature `Lc/e/b;.b:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c40a8.  v0:= v4.`c.e.b.h` @type ^`int`;
  #L1c40ac.  if v0 != 0 then goto L1c40b4;
  #L1c40b0.  v0:= -1I;
  #L1c40b2.  return v0;
  #L1c40b4.  v1:= v4.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c40b8.  v2:= 0I;
  #L1c40ba.  call temp:= `a`(v1, v0, v2) @signature `Lc/e/c;.a:([III)I` @kind static;
  #L1c40c0.  v1:= temp;
  #L1c40c2.  if v1 >= 0 then goto L1c40c8;
  #L1c40c6.  return v1;
  #L1c40c8.  v2:= v4.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c40cc.  v2:= v2[v1] @kind object;
  #L1c40d0.  if v2 != 0 then goto L1c40d6;
  #L1c40d4.  return v1;
  #L1c40d6.  v2:= v1 + 1;
  #L1c40da.  if v2 >= v0 then goto L1c40fe;
  #L1c40de.  v3:= v4.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c40e2.  v3:= v3[v2];
  #L1c40e6.  if v3 != 0 then goto L1c40fe;
  #L1c40ea.  v3:= v4.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c40ee.  v3:= v3[v2] @kind object;
  #L1c40f2.  if v3 != 0 then goto L1c40f8;
  #L1c40f6.  return v2;
  #L1c40f8.  v2:= v2 + 1;
  #L1c40fc.  goto L1c40da;
  #L1c40fe.  v1:= v1 + -1;
  #L1c4102.  if v1 < 0 then goto L1c4126;
  #L1c4106.  v0:= v4.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c410a.  v0:= v0[v1];
  #L1c410e.  if v0 != 0 then goto L1c4126;
  #L1c4112.  v0:= v4.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c4116.  v0:= v0[v1] @kind object;
  #L1c411a.  if v0 != 0 then goto L1c4120;
  #L1c411e.  return v1;
  #L1c4120.  v1:= v1 + -1;
  #L1c4124.  goto L1c4102;
  #L1c4126.  v0:= ~v2 @kind int;
  #L1c4128.  return v0;
}
procedure `boolean` `add`(`c.e.b` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lc/e/b;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1c3cc4.  v0:= 0I;
  #L1c3cc6.  if v9 != 0 then goto L1c3cd6;
  #L1c3cca.  call temp:= `b`(v8) @signature `Lc/e/b;.b:()I` @kind direct;
  #L1c3cd0.  v1:= temp;
  #L1c3cd2.  v2:= 0I;
  #L1c3cd4.  goto L1c3cec;
  #L1c3cd6.  call temp:= `hashCode`(v9) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1c3cdc.  v1:= temp;
  #L1c3cde.  call temp:= `a`(v8, v9, v1) @signature `Lc/e/b;.a:(Ljava/lang/Object;I)I` @kind direct;
  #L1c3ce4.  v2:= temp;
  #L1c3ce6.  v7:= v2;
  #L1c3ce8.  v2:= v1;
  #L1c3cea.  v1:= v7;
  #L1c3cec.  if v1 < 0 then goto L1c3cf2;
  #L1c3cf0.  return v0;
  #L1c3cf2.  v1:= ~v1 @kind int;
  #L1c3cf4.  v3:= v8.`c.e.b.h` @type ^`int`;
  #L1c3cf8.  v4:= v8.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c3cfc.  v4:= length @variable v4;
  #L1c3cfe.  if v3 < v4 then goto L1c3d52;
  #L1c3d02.  v4:= 4I;
  #L1c3d04.  v5:= 8I;
  #L1c3d08.  if v3 < v5 then goto L1c3d14;
  #L1c3d0c.  v4:= v3 ^> 1;
  #L1c3d10.  v4:= v4 + v3 @kind int;
  #L1c3d12.  goto L1c3d1c;
  #L1c3d14.  if v3 < v4 then goto L1c3d1c;
  #L1c3d18.  v4:= 8I;
  #L1c3d1c.  v3:= v8.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c3d20.  v5:= v8.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c3d24.  call `a`(v8, v4) @signature `Lc/e/b;.a:(I)V` @kind direct;
  #L1c3d2a.  v4:= v8.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c3d2e.  v6:= length @variable v4;
  #L1c3d30.  if v6 <= 0 then goto L1c3d48;
  #L1c3d34.  v6:= length @variable v3;
  #L1c3d36.  call `arraycopy`(v3, v0, v4, v0, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c3d3c.  v4:= v8.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c3d40.  v6:= length @variable v5;
  #L1c3d42.  call `arraycopy`(v5, v0, v4, v0, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c3d48.  v0:= v8.`c.e.b.h` @type ^`int`;
  #L1c3d4c.  call `a`(v3, v5, v0) @signature `Lc/e/b;.a:([I[Ljava/lang/Object;I)V` @kind static;
  #L1c3d52.  v0:= v8.`c.e.b.h` @type ^`int`;
  #L1c3d56.  if v1 >= v0 then goto L1c3d7a;
  #L1c3d5a.  v3:= v8.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c3d5e.  v4:= v1 + 1;
  #L1c3d62.  v0:= v0 - v1 @kind int;
  #L1c3d64.  call `arraycopy`(v3, v1, v3, v4, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c3d6a.  v0:= v8.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c3d6e.  v3:= v8.`c.e.b.h` @type ^`int`;
  #L1c3d72.  v3:= v3 - v1 @kind int;
  #L1c3d74.  call `arraycopy`(v0, v1, v0, v4, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c3d7a.  v0:= v8.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c3d7e.  v0[v1]:= v2;
  #L1c3d82.  v0:= v8.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c3d86.  v0[v1]:= v9 @kind object;
  #L1c3d8a.  v9:= v8.`c.e.b.h` @type ^`int`;
  #L1c3d8e.  v0:= 1I;
  #L1c3d90.  v9:= v9 + v0 @kind int;
  #L1c3d92.  v8.`c.e.b.h` @type ^`int` := v9;
  #L1c3d96.  return v0;
}
procedure `boolean` `addAll`(`c.e.b` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lc/e/b;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c3da8.  v0:= v2.`c.e.b.h` @type ^`int`;
  #L1c3dac.  call temp:= `size`(v3) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L1c3db2.  v1:= temp;
  #L1c3db4.  v0:= v0 + v1 @kind int;
  #L1c3db6.  call `ensureCapacity`(v2, v0) @signature `Lc/e/b;.ensureCapacity:(I)V` @kind virtual;
  #L1c3dbc.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c3dc2.  v3:= temp @kind object;
  #L1c3dc4.  v0:= 0I;
  #L1c3dc6.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c3dcc.  v1:= temp;
  #L1c3dce.  if v1 == 0 then goto L1c3de6;
  #L1c3dd2.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c3dd8.  v1:= temp @kind object;
  #L1c3dda.  call temp:= `add`(v2, v1) @signature `Lc/e/b;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c3de0.  v1:= temp;
  #L1c3de2.  v0:= v0 ^| v1 @kind int;
  #L1c3de4.  goto L1c3dc6;
  #L1c3de6.  return v0;
}
procedure `void` `clear`(`c.e.b` v3 @kind this) @signature `Lc/e/b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c451c.  v0:= v3.`c.e.b.h` @type ^`int`;
  #L1c4520.  if v0 == 0 then goto L1c4548;
  #L1c4524.  v1:= v3.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c4528.  v2:= v3.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c452c.  call `a`(v1, v2, v0) @signature `Lc/e/b;.a:([I[Ljava/lang/Object;I)V` @kind static;
  #L1c4532.  v0:= `@@c.e.b.j` @type ^`int`[] @kind object;
  #L1c4536.  v3.`c.e.b.f` @type ^`int`[] := v0 @kind object;
  #L1c453a.  v0:= `@@c.e.b.k` @type ^`java.lang.Object`[] @kind object;
  #L1c453e.  v3.`c.e.b.g` @type ^`java.lang.Object`[] := v0 @kind object;
  #L1c4542.  v0:= 0I;
  #L1c4544.  v3.`c.e.b.h` @type ^`int` := v0;
  #L1c4548.  return @kind void;
}
procedure `boolean` `contains`(`c.e.b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/e/b;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L1c3df8.  call temp:= `indexOf`(v0, v1) @signature `Lc/e/b;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L1c3dfe.  v1:= temp;
  #L1c3e00.  if v1 < 0 then goto L1c3e08;
  #L1c3e04.  v1:= 1I;
  #L1c3e06.  goto L1c3e0a;
  #L1c3e08.  v1:= 0I;
  #L1c3e0a.  return v1;
}
procedure `boolean` `containsAll`(`c.e.b` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lc/e/b;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3e1c.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c3e22.  v2:= temp @kind object;
  #L1c3e24.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c3e2a.  v0:= temp;
  #L1c3e2c.  if v0 == 0 then goto L1c3e48;
  #L1c3e30.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c3e36.  v0:= temp @kind object;
  #L1c3e38.  call temp:= `contains`(v1, v0) @signature `Lc/e/b;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c3e3e.  v0:= temp;
  #L1c3e40.  if v0 != 0 then goto L1c3e24;
  #L1c3e44.  v2:= 0I;
  #L1c3e46.  return v2;
  #L1c3e48.  v2:= 1I;
  #L1c3e4a.  return v2;
}
procedure `void` `ensureCapacity`(`c.e.b` v4 @kind this, `int` v5 ) @signature `Lc/e/b;.ensureCapacity:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c455c.  v0:= v4.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c4560.  v1:= length @variable v0;
  #L1c4562.  if v1 >= v5 then goto L1c459c;
  #L1c4566.  v1:= v4.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c456a.  call `a`(v4, v5) @signature `Lc/e/b;.a:(I)V` @kind direct;
  #L1c4570.  v5:= v4.`c.e.b.h` @type ^`int`;
  #L1c4574.  if v5 <= 0 then goto L1c4592;
  #L1c4578.  v2:= v4.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c457c.  v3:= 0I;
  #L1c457e.  call `arraycopy`(v0, v3, v2, v3, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c4584.  v5:= v4.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c4588.  v2:= v4.`c.e.b.h` @type ^`int`;
  #L1c458c.  call `arraycopy`(v1, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c4592.  v5:= v4.`c.e.b.h` @type ^`int`;
  #L1c4596.  call `a`(v0, v1, v5) @signature `Lc/e/b;.a:([I[Ljava/lang/Object;I)V` @kind static;
  #L1c459c.  return @kind void;
}
procedure `boolean` `equals`(`c.e.b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lc/e/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c3e5c.  v0:= 1I;
  #L1c3e5e.  if v4 != v5 then goto L1c3e64;
  #L1c3e62.  return v0;
  #L1c3e64.  v1:= instanceof @variable v5 @type ^`java.util.Set` @kind boolean;
  #L1c3e68.  v2:= 0I;
  #L1c3e6a.  if v1 == 0 then goto L1c3eb0;
  #L1c3e6e.  v5:= (`java.util.Set`) v5 @kind object;
  #L1c3e72.  call temp:= `size`(v4) @signature `Lc/e/b;.size:()I` @kind virtual;
  #L1c3e78.  v1:= temp;
  #L1c3e7a.  call temp:= `size`(v5) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L1c3e80.  v3:= temp;
  #L1c3e82.  if v1 == v3 then goto L1c3e88;
  #L1c3e86.  return v2;
  #L1c3e88.  v1:= 0I;
  #L1c3e8a.  v3:= v4.`c.e.b.h` @type ^`int`;
  #L1c3e8e.  if v1 >= v3 then goto L1c3eae;
  #L1c3e92.  call temp:= `valueAt`(v4, v1) @signature `Lc/e/b;.valueAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c3e98.  v3:= temp @kind object;
  #L1c3e9a.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L1c3ea0.  v3:= temp;
  #L1c3ea2.  if v3 != 0 then goto L1c3ea8;
  #L1c3ea6.  return v2;
  #L1c3ea8.  v1:= v1 + 1;
  #L1c3eac.  goto L1c3e8a;
  #L1c3eae.  return v0;
  #L1c3eb0.  return v2;
  catch `java.lang.NullPointerException` @[L1c3e8a..L1c3ea2] goto L1c3eb0;
  catch `java.lang.ClassCastException` @[L1c3e8a..L1c3ea2] goto L1c3eb0;
}
procedure `int` `hashCode`(`c.e.b` v5 @kind this) @signature `Lc/e/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c3fa0.  v0:= v5.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c3fa4.  v1:= v5.`c.e.b.h` @type ^`int`;
  #L1c3fa8.  v2:= 0I;
  #L1c3faa.  v3:= 0I;
  #L1c3fac.  if v2 >= v1 then goto L1c3fbc;
  #L1c3fb0.  v4:= v0[v2];
  #L1c3fb4.  v3:= v3 + v4 @kind int;
  #L1c3fb6.  v2:= v2 + 1;
  #L1c3fba.  goto L1c3fac;
  #L1c3fbc.  return v3;
}
procedure `int` `indexOf`(`c.e.b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/e/b;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3fd0.  if v2 != 0 then goto L1c3fde;
  #L1c3fd4.  call temp:= `b`(v1) @signature `Lc/e/b;.b:()I` @kind direct;
  #L1c3fda.  v2:= temp;
  #L1c3fdc.  goto L1c3fee;
  #L1c3fde.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1c3fe4.  v0:= temp;
  #L1c3fe6.  call temp:= `a`(v1, v2, v0) @signature `Lc/e/b;.a:(Ljava/lang/Object;I)I` @kind direct;
  #L1c3fec.  v2:= temp;
  #L1c3fee.  return v2;
}
procedure `boolean` `isEmpty`(`c.e.b` v1 @kind this) @signature `Lc/e/b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3ed4.  v0:= v1.`c.e.b.h` @type ^`int`;
  #L1c3ed8.  if v0 > 0 then goto L1c3ee0;
  #L1c3edc.  v0:= 1I;
  #L1c3ede.  goto L1c3ee2;
  #L1c3ee0.  v0:= 0I;
  #L1c3ee2.  return v0;
}
procedure `java.util.Iterator` `iterator`(`c.e.b` v1 @kind this) @signature `Lc/e/b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c4388.  call temp:= `a`(v1) @signature `Lc/e/b;.a:()Lc/e/f;` @kind direct;
  #L1c438e.  v0:= temp @kind object;
  #L1c4390.  call temp:= `getKeySet`(v0) @signature `Lc/e/f;.getKeySet:()Ljava/util/Set;` @kind virtual;
  #L1c4396.  v0:= temp @kind object;
  #L1c4398.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c439e.  v0:= temp @kind object;
  #L1c43a0.  return v0 @kind object;
}
procedure `boolean` `remove`(`c.e.b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/e/b;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L1c3ef4.  call temp:= `indexOf`(v0, v1) @signature `Lc/e/b;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L1c3efa.  v1:= temp;
  #L1c3efc.  if v1 < 0 then goto L1c3f0a;
  #L1c3f00.  call temp:= `removeAt`(v0, v1) @signature `Lc/e/b;.removeAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c3f06.  v1:= 1I;
  #L1c3f08.  return v1;
  #L1c3f0a.  v1:= 0I;
  #L1c3f0c.  return v1;
}
procedure `boolean` `removeAll`(`c.e.b` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lc/e/b;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c3f20.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c3f26.  v3:= temp @kind object;
  #L1c3f28.  v0:= 0I;
  #L1c3f2a.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c3f30.  v1:= temp;
  #L1c3f32.  if v1 == 0 then goto L1c3f4a;
  #L1c3f36.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c3f3c.  v1:= temp @kind object;
  #L1c3f3e.  call temp:= `remove`(v2, v1) @signature `Lc/e/b;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c3f44.  v1:= temp;
  #L1c3f46.  v0:= v0 ^| v1 @kind int;
  #L1c3f48.  goto L1c3f2a;
  #L1c3f4a.  return v0;
}
procedure `java.lang.Object` `removeAt`(`c.e.b` v7 @kind this, `int` v8 ) @signature `Lc/e/b;.removeAt:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1c4154.  v0:= v7.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c4158.  v1:= v0[v8] @kind object;
  #L1c415c.  v2:= v7.`c.e.b.h` @type ^`int`;
  #L1c4160.  v3:= 0I;
  #L1c4162.  v4:= 1I;
  #L1c4164.  if v2 > v4 then goto L1c4188;
  #L1c4168.  v8:= v7.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c416c.  call `a`(v8, v0, v2) @signature `Lc/e/b;.a:([I[Ljava/lang/Object;I)V` @kind static;
  #L1c4172.  v8:= `@@c.e.b.j` @type ^`int`[] @kind object;
  #L1c4176.  v7.`c.e.b.f` @type ^`int`[] := v8 @kind object;
  #L1c417a.  v8:= `@@c.e.b.k` @type ^`java.lang.Object`[] @kind object;
  #L1c417e.  v7.`c.e.b.g` @type ^`java.lang.Object`[] := v8 @kind object;
  #L1c4182.  v7.`c.e.b.h` @type ^`int` := v3;
  #L1c4186.  goto L1c4246;
  #L1c4188.  v0:= v7.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c418c.  v5:= length @variable v0;
  #L1c418e.  v6:= 8I;
  #L1c4192.  if v5 <= v6 then goto L1c4206;
  #L1c4196.  v0:= length @variable v0;
  #L1c4198.  v0:= v0 / 3;
  #L1c419c.  if v2 >= v0 then goto L1c4206;
  #L1c41a0.  if v2 <= v6 then goto L1c41ac;
  #L1c41a4.  v0:= v2 ^> 1;
  #L1c41a8.  v6:= v2 + v0 @kind int;
  #L1c41ac.  v0:= v7.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c41b0.  v2:= v7.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c41b4.  call `a`(v7, v6) @signature `Lc/e/b;.a:(I)V` @kind direct;
  #L1c41ba.  v5:= v7.`c.e.b.h` @type ^`int`;
  #L1c41be.  v5:= v5 - v4 @kind int;
  #L1c41c0.  v7.`c.e.b.h` @type ^`int` := v5;
  #L1c41c4.  if v8 <= 0 then goto L1c41dc;
  #L1c41c8.  v4:= v7.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c41cc.  call `arraycopy`(v0, v3, v4, v3, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c41d2.  v4:= v7.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c41d6.  call `arraycopy`(v2, v3, v4, v3, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c41dc.  v3:= v7.`c.e.b.h` @type ^`int`;
  #L1c41e0.  if v8 >= v3 then goto L1c4246;
  #L1c41e4.  v4:= v8 + 1;
  #L1c41e8.  v5:= v7.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c41ec.  v3:= v3 - v8 @kind int;
  #L1c41ee.  call `arraycopy`(v0, v4, v5, v8, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c41f4.  v0:= v7.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c41f8.  v3:= v7.`c.e.b.h` @type ^`int`;
  #L1c41fc.  v3:= v3 - v8 @kind int;
  #L1c41fe.  call `arraycopy`(v2, v4, v0, v8, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c4204.  goto L1c4246;
  #L1c4206.  v0:= v7.`c.e.b.h` @type ^`int`;
  #L1c420a.  v0:= v0 - v4 @kind int;
  #L1c420c.  v7.`c.e.b.h` @type ^`int` := v0;
  #L1c4210.  v0:= v7.`c.e.b.h` @type ^`int`;
  #L1c4214.  if v8 >= v0 then goto L1c4238;
  #L1c4218.  v2:= v7.`c.e.b.f` @type ^`int`[] @kind object;
  #L1c421c.  v3:= v8 + 1;
  #L1c4220.  v0:= v0 - v8 @kind int;
  #L1c4222.  call `arraycopy`(v2, v3, v2, v8, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c4228.  v0:= v7.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c422c.  v2:= v7.`c.e.b.h` @type ^`int`;
  #L1c4230.  v2:= v2 - v8 @kind int;
  #L1c4232.  call `arraycopy`(v0, v3, v0, v8, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c4238.  v8:= v7.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c423c.  v0:= v7.`c.e.b.h` @type ^`int`;
  #L1c4240.  v2:= 0I;
  #L1c4242.  v8[v0]:= v2 @kind object;
  #L1c4246.  return v1 @kind object;
}
procedure `boolean` `retainAll`(`c.e.b` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lc/e/b;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c3f5c.  v0:= v4.`c.e.b.h` @type ^`int`;
  #L1c3f60.  v1:= 1I;
  #L1c3f62.  v0:= v0 - v1 @kind int;
  #L1c3f64.  v2:= 0I;
  #L1c3f66.  if v0 < 0 then goto L1c3f8c;
  #L1c3f6a.  v3:= v4.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c3f6e.  v3:= v3[v0] @kind object;
  #L1c3f72.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L1c3f78.  v3:= temp;
  #L1c3f7a.  if v3 != 0 then goto L1c3f86;
  #L1c3f7e.  call temp:= `removeAt`(v4, v0) @signature `Lc/e/b;.removeAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c3f84.  v2:= 1I;
  #L1c3f86.  v0:= v0 + -1;
  #L1c3f8a.  goto L1c3f66;
  #L1c3f8c.  return v2;
}
procedure `int` `size`(`c.e.b` v1 @kind this) @signature `Lc/e/b;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c413c.  v0:= v1.`c.e.b.h` @type ^`int`;
  #L1c4140.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`c.e.b` v4 @kind this) @signature `Lc/e/b;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c4274.  v0:= v4.`c.e.b.h` @type ^`int`;
  #L1c4278.  v1:= new `java.lang.Object`[v0];
  #L1c427c.  v2:= v4.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c4280.  v3:= 0I;
  #L1c4282.  call `arraycopy`(v2, v3, v1, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c4288.  return v1 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`c.e.b` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Lc/e/b;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c429c.  v0:= length @variable v4;
  #L1c429e.  v1:= v3.`c.e.b.h` @type ^`int`;
  #L1c42a2.  if v0 >= v1 then goto L1c42c6;
  #L1c42a6.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c42ac.  v4:= temp @kind object;
  #L1c42ae.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1c42b4.  v4:= temp @kind object;
  #L1c42b6.  v0:= v3.`c.e.b.h` @type ^`int`;
  #L1c42ba.  call temp:= `newInstance`(v4, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L1c42c0.  v4:= temp @kind object;
  #L1c42c2.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L1c42c6.  v0:= v3.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c42ca.  v1:= v3.`c.e.b.h` @type ^`int`;
  #L1c42ce.  v2:= 0I;
  #L1c42d0.  call `arraycopy`(v0, v2, v4, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c42d6.  v0:= length @variable v4;
  #L1c42d8.  v1:= v3.`c.e.b.h` @type ^`int`;
  #L1c42dc.  if v0 <= v1 then goto L1c42e6;
  #L1c42e0.  v0:= 0I;
  #L1c42e2.  v4[v1]:= v0 @kind object;
  #L1c42e6.  return v4 @kind object;
}
procedure `java.lang.String` `toString`(`c.e.b` v3 @kind this) @signature `Lc/e/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c42f8.  call temp:= `isEmpty`(v3) @signature `Lc/e/b;.isEmpty:()Z` @kind virtual;
  #L1c42fe.  v0:= temp;
  #L1c4300.  if v0 == 0 then goto L1c430a;
  #L1c4304.  v0:= "{}" @kind object;
  #L1c4308.  return v0 @kind object;
  #L1c430a.  v0:= new `java.lang.StringBuilder`;
  #L1c430e.  v1:= v3.`c.e.b.h` @type ^`int`;
  #L1c4312.  v1:= v1 * 14;
  #L1c4316.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1c431c.  v1:= 123I;
  #L1c4320.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4326.  v1:= 0I;
  #L1c4328.  v2:= v3.`c.e.b.h` @type ^`int`;
  #L1c432c.  if v1 >= v2 then goto L1c4362;
  #L1c4330.  if v1 <= 0 then goto L1c433e;
  #L1c4334.  v2:= ", " @kind object;
  #L1c4338.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c433e.  call temp:= `valueAt`(v3, v1) @signature `Lc/e/b;.valueAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c4344.  v2:= temp @kind object;
  #L1c4346.  if v2 == v3 then goto L1c4352;
  #L1c434a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4350.  goto L1c435c;
  #L1c4352.  v2:= "(this Set)" @kind object;
  #L1c4356.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c435c.  v1:= v1 + 1;
  #L1c4360.  goto L1c4328;
  #L1c4362.  v1:= 125I;
  #L1c4366.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c436c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c4372.  v0:= temp @kind object;
  #L1c4374.  return v0 @kind object;
}
procedure `java.lang.Object` `valueAt`(`c.e.b` v1 @kind this, `int` v2 ) @signature `Lc/e/b;.valueAt:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c4258.  v0:= v1.`c.e.b.g` @type ^`java.lang.Object`[] @kind object;
  #L1c425c.  v2:= v0[v2] @kind object;
  #L1c4260.  return v2 @kind object;
}
