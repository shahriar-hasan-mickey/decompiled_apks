record `c.e.f` @kind class @AccessFlag ABSTRACT {
  `c.e.f$b` `c.e.f.a` @AccessFlag ;
  `c.e.f$c` `c.e.f.b` @AccessFlag ;
  `c.e.f$e` `c.e.f.c` @AccessFlag ;
}
procedure `void` `<init>`(`c.e.f` v0 @kind this) @signature `Lc/e/f;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c6048.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c604e.  return @kind void;
}
procedure `boolean` `containsAllHelper`(`java.util.Map` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lc/e/f;.containsAllHelper:(Ljava/util/Map;Ljava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1c5dd8.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c5dde.  v2:= temp @kind object;
  #L1c5de0.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c5de6.  v0:= temp;
  #L1c5de8.  if v0 == 0 then goto L1c5e04;
  #L1c5dec.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c5df2.  v0:= temp @kind object;
  #L1c5df4.  call temp:= `containsKey`(v1, v0) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L1c5dfa.  v0:= temp;
  #L1c5dfc.  if v0 != 0 then goto L1c5de0;
  #L1c5e00.  v1:= 0I;
  #L1c5e02.  return v1;
  #L1c5e04.  v1:= 1I;
  #L1c5e06.  return v1;
}
procedure `boolean` `equalsSetHelper`(`java.util.Set` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lc/e/f;.equalsSetHelper:(Ljava/util/Set;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c5e18.  v0:= 1I;
  #L1c5e1a.  if v4 != v5 then goto L1c5e20;
  #L1c5e1e.  return v0;
  #L1c5e20.  v1:= instanceof @variable v5 @type ^`java.util.Set` @kind boolean;
  #L1c5e24.  v2:= 0I;
  #L1c5e26.  if v1 == 0 then goto L1c5e54;
  #L1c5e2a.  v5:= (`java.util.Set`) v5 @kind object;
  #L1c5e2e.  call temp:= `size`(v4) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L1c5e34.  v1:= temp;
  #L1c5e36.  call temp:= `size`(v5) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L1c5e3c.  v3:= temp;
  #L1c5e3e.  if v1 != v3 then goto L1c5e50;
  #L1c5e42.  call temp:= `containsAll`(v4, v5) @signature `Ljava/util/Set;.containsAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1c5e48.  v4:= temp;
  #L1c5e4a.  if v4 == 0 then goto L1c5e50;
  #L1c5e4e.  goto L1c5e52;
  #L1c5e50.  v0:= 0I;
  #L1c5e52.  return v0;
  #L1c5e54.  return v2;
  catch `java.lang.NullPointerException` @[L1c5e2e..L1c5e4a] goto L1c5e54;
  catch `java.lang.ClassCastException` @[L1c5e2e..L1c5e4a] goto L1c5e54;
}
procedure `boolean` `removeAllHelper`(`java.util.Map` v2 @kind object, `java.util.Collection` v3 @kind object) @signature `Lc/e/f;.removeAllHelper:(Ljava/util/Map;Ljava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1c5e78.  call temp:= `size`(v2) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L1c5e7e.  v0:= temp;
  #L1c5e80.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c5e86.  v3:= temp @kind object;
  #L1c5e88.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c5e8e.  v1:= temp;
  #L1c5e90.  if v1 == 0 then goto L1c5ea4;
  #L1c5e94.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c5e9a.  v1:= temp @kind object;
  #L1c5e9c.  call temp:= `remove`(v2, v1) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1c5ea2.  goto L1c5e88;
  #L1c5ea4.  call temp:= `size`(v2) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L1c5eaa.  v2:= temp;
  #L1c5eac.  if v0 == v2 then goto L1c5eb4;
  #L1c5eb0.  v2:= 1I;
  #L1c5eb2.  goto L1c5eb6;
  #L1c5eb4.  v2:= 0I;
  #L1c5eb6.  return v2;
}
procedure `boolean` `retainAllHelper`(`java.util.Map` v3 @kind object, `java.util.Collection` v4 @kind object) @signature `Lc/e/f;.retainAllHelper:(Ljava/util/Map;Ljava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1c5ec8.  call temp:= `size`(v3) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L1c5ece.  v0:= temp;
  #L1c5ed0.  call temp:= `keySet`(v3) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L1c5ed6.  v1:= temp @kind object;
  #L1c5ed8.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c5ede.  v1:= temp @kind object;
  #L1c5ee0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c5ee6.  v2:= temp;
  #L1c5ee8.  if v2 == 0 then goto L1c5f08;
  #L1c5eec.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c5ef2.  v2:= temp @kind object;
  #L1c5ef4.  call temp:= `contains`(v4, v2) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L1c5efa.  v2:= temp;
  #L1c5efc.  if v2 != 0 then goto L1c5ee0;
  #L1c5f00.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L1c5f06.  goto L1c5ee0;
  #L1c5f08.  call temp:= `size`(v3) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L1c5f0e.  v3:= temp;
  #L1c5f10.  if v0 == v3 then goto L1c5f18;
  #L1c5f14.  v3:= 1I;
  #L1c5f16.  goto L1c5f1a;
  #L1c5f18.  v3:= 0I;
  #L1c5f1a.  return v3;
}
procedure `void` `colClear`() @signature `Lc/e/f;.colClear:()V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `colGetEntry`(`int` v0 , `int` v1 ) @signature `Lc/e/f;.colGetEntry:(II)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.util.Map` `colGetMap`() @signature `Lc/e/f;.colGetMap:()Ljava/util/Map;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `colGetSize`() @signature `Lc/e/f;.colGetSize:()I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `colIndexOfKey`(`java.lang.Object` v0 @kind object) @signature `Lc/e/f;.colIndexOfKey:(Ljava/lang/Object;)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `colIndexOfValue`(`java.lang.Object` v0 @kind object) @signature `Lc/e/f;.colIndexOfValue:(Ljava/lang/Object;)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `colPut`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lc/e/f;.colPut:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `colRemoveAt`(`int` v0 ) @signature `Lc/e/f;.colRemoveAt:(I)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `colSetValue`(`int` v0 , `java.lang.Object` v1 @kind object) @signature `Lc/e/f;.colSetValue:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.util.Set` `getEntrySet`(`c.e.f` v1 @kind this) @signature `Lc/e/f;.getEntrySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c5ff0.  v0:= v1.`c.e.f.a` @type ^`c.e.f$b` @kind object;
  #L1c5ff4.  if v0 != 0 then goto L1c6006;
  #L1c5ff8.  v0:= new `c.e.f$b`;
  #L1c5ffc.  call `<init>`(v0, v1) @signature `Lc/e/f$b;.<init>:(Lc/e/f;)V` @kind direct;
  #L1c6002.  v1.`c.e.f.a` @type ^`c.e.f$b` := v0 @kind object;
  #L1c6006.  v0:= v1.`c.e.f.a` @type ^`c.e.f$b` @kind object;
  #L1c600a.  return v0 @kind object;
}
procedure `java.util.Set` `getKeySet`(`c.e.f` v1 @kind this) @signature `Lc/e/f;.getKeySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c601c.  v0:= v1.`c.e.f.b` @type ^`c.e.f$c` @kind object;
  #L1c6020.  if v0 != 0 then goto L1c6032;
  #L1c6024.  v0:= new `c.e.f$c`;
  #L1c6028.  call `<init>`(v0, v1) @signature `Lc/e/f$c;.<init>:(Lc/e/f;)V` @kind direct;
  #L1c602e.  v1.`c.e.f.b` @type ^`c.e.f$c` := v0 @kind object;
  #L1c6032.  v0:= v1.`c.e.f.b` @type ^`c.e.f$c` @kind object;
  #L1c6036.  return v0 @kind object;
}
procedure `java.util.Collection` `getValues`(`c.e.f` v1 @kind this) @signature `Lc/e/f;.getValues:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c5fc4.  v0:= v1.`c.e.f.c` @type ^`c.e.f$e` @kind object;
  #L1c5fc8.  if v0 != 0 then goto L1c5fda;
  #L1c5fcc.  v0:= new `c.e.f$e`;
  #L1c5fd0.  call `<init>`(v0, v1) @signature `Lc/e/f$e;.<init>:(Lc/e/f;)V` @kind direct;
  #L1c5fd6.  v1.`c.e.f.c` @type ^`c.e.f$e` := v0 @kind object;
  #L1c5fda.  v0:= v1.`c.e.f.c` @type ^`c.e.f$e` @kind object;
  #L1c5fde.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArrayHelper`(`c.e.f` v4 @kind this, `int` v5 ) @signature `Lc/e/f;.toArrayHelper:(I)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c5f2c.  call temp:= `colGetSize`(v4) @signature `Lc/e/f;.colGetSize:()I` @kind virtual;
  #L1c5f32.  v0:= temp;
  #L1c5f34.  v1:= new `java.lang.Object`[v0];
  #L1c5f38.  v2:= 0I;
  #L1c5f3a.  if v2 >= v0 then goto L1c5f50;
  #L1c5f3e.  call temp:= `colGetEntry`(v4, v2, v5) @signature `Lc/e/f;.colGetEntry:(II)Ljava/lang/Object;` @kind virtual;
  #L1c5f44.  v3:= temp @kind object;
  #L1c5f46.  v1[v2]:= v3 @kind object;
  #L1c5f4a.  v2:= v2 + 1;
  #L1c5f4e.  goto L1c5f3a;
  #L1c5f50.  return v1 @kind object;
}
procedure `java.lang.Object`[] `toArrayHelper`(`c.e.f` v3 @kind this, `java.lang.Object`[] v4 @kind object, `int` v5 ) @signature `Lc/e/f;.toArrayHelper:([Ljava/lang/Object;I)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c5f64.  call temp:= `colGetSize`(v3) @signature `Lc/e/f;.colGetSize:()I` @kind virtual;
  #L1c5f6a.  v0:= temp;
  #L1c5f6c.  v1:= length @variable v4;
  #L1c5f6e.  if v1 >= v0 then goto L1c5f8e;
  #L1c5f72.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c5f78.  v4:= temp @kind object;
  #L1c5f7a.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1c5f80.  v4:= temp @kind object;
  #L1c5f82.  call temp:= `newInstance`(v4, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L1c5f88.  v4:= temp @kind object;
  #L1c5f8a.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L1c5f8e.  v1:= 0I;
  #L1c5f90.  if v1 >= v0 then goto L1c5fa6;
  #L1c5f94.  call temp:= `colGetEntry`(v3, v1, v5) @signature `Lc/e/f;.colGetEntry:(II)Ljava/lang/Object;` @kind virtual;
  #L1c5f9a.  v2:= temp @kind object;
  #L1c5f9c.  v4[v1]:= v2 @kind object;
  #L1c5fa0.  v1:= v1 + 1;
  #L1c5fa4.  goto L1c5f90;
  #L1c5fa6.  v5:= length @variable v4;
  #L1c5fa8.  if v5 <= v0 then goto L1c5fb2;
  #L1c5fac.  v5:= 0I;
  #L1c5fae.  v4[v0]:= v5 @kind object;
  #L1c5fb2.  return v4 @kind object;
}
