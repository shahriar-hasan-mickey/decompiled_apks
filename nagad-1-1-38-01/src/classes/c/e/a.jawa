record `c.e.a` @kind class @AccessFlag PUBLIC extends `c.e.g` @kind class, `java.util.Map` @kind interface {
  `c.e.f` `c.e.a.m` @AccessFlag ;
}
procedure `void` `<init>`(`c.e.a` v0 @kind this) @signature `Lc/e/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1c3abc.  call `<init>`(v0) @signature `Lc/e/g;.<init>:()V` @kind direct;
  #L1c3ac2.  return @kind void;
}
procedure `void` `<init>`(`c.e.a` v0 @kind this, `int` v1 ) @signature `Lc/e/a;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1c3aec.  call `<init>`(v0, v1) @signature `Lc/e/g;.<init>:(I)V` @kind direct;
  #L1c3af2.  return @kind void;
}
procedure `void` `<init>`(`c.e.a` v0 @kind this, `c.e.g` v1 @kind object) @signature `Lc/e/a;.<init>:(Lc/e/g;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1c3ad4.  call `<init>`(v0, v1) @signature `Lc/e/g;.<init>:(Lc/e/g;)V` @kind direct;
  #L1c3ada.  return @kind void;
}
procedure `c.e.f` `b`(`c.e.a` v1 @kind this) @signature `Lc/e/a;.b:()Lc/e/f;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1c3a08.  v0:= v1.`c.e.a.m` @type ^`c.e.f` @kind object;
  #L1c3a0c.  if v0 != 0 then goto L1c3a1e;
  #L1c3a10.  v0:= new `c.e.a$a`;
  #L1c3a14.  call `<init>`(v0, v1) @signature `Lc/e/a$a;.<init>:(Lc/e/a;)V` @kind direct;
  #L1c3a1a.  v1.`c.e.a.m` @type ^`c.e.f` := v0 @kind object;
  #L1c3a1e.  v0:= v1.`c.e.a.m` @type ^`c.e.f` @kind object;
  #L1c3a22.  return v0 @kind object;
}
procedure `java.util.Set` `entrySet`(`c.e.a` v1 @kind this) @signature `Lc/e/a;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3a74.  call temp:= `b`(v1) @signature `Lc/e/a;.b:()Lc/e/f;` @kind direct;
  #L1c3a7a.  v0:= temp @kind object;
  #L1c3a7c.  call temp:= `getEntrySet`(v0) @signature `Lc/e/f;.getEntrySet:()Ljava/util/Set;` @kind virtual;
  #L1c3a82.  v0:= temp @kind object;
  #L1c3a84.  return v0 @kind object;
}
procedure `java.util.Set` `keySet`(`c.e.a` v1 @kind this) @signature `Lc/e/a;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3a98.  call temp:= `b`(v1) @signature `Lc/e/a;.b:()Lc/e/f;` @kind direct;
  #L1c3a9e.  v0:= temp @kind object;
  #L1c3aa0.  call temp:= `getKeySet`(v0) @signature `Lc/e/f;.getKeySet:()Ljava/util/Set;` @kind virtual;
  #L1c3aa6.  v0:= temp @kind object;
  #L1c3aa8.  return v0 @kind object;
}
procedure `void` `putAll`(`c.e.a` v2 @kind this, `java.util.Map` v3 @kind object) @signature `Lc/e/a;.putAll:(Ljava/util/Map;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c3b04.  v0:= v2.`c.e.g.h` @type ^`int`;
  #L1c3b08.  call temp:= `size`(v3) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L1c3b0e.  v1:= temp;
  #L1c3b10.  v0:= v0 + v1 @kind int;
  #L1c3b12.  call `ensureCapacity`(v2, v0) @signature `Lc/e/g;.ensureCapacity:(I)V` @kind virtual;
  #L1c3b18.  call temp:= `entrySet`(v3) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L1c3b1e.  v3:= temp @kind object;
  #L1c3b20.  call temp:= `iterator`(v3) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c3b26.  v3:= temp @kind object;
  #L1c3b28.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c3b2e.  v0:= temp;
  #L1c3b30.  if v0 == 0 then goto L1c3b58;
  #L1c3b34.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c3b3a.  v0:= temp @kind object;
  #L1c3b3c.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L1c3b40.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L1c3b46.  v1:= temp @kind object;
  #L1c3b48.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1c3b4e.  v0:= temp @kind object;
  #L1c3b50.  call temp:= `put`(v2, v1, v0) @signature `Lc/e/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c3b56.  goto L1c3b28;
  #L1c3b58.  return @kind void;
}
procedure `boolean` `retainAll`(`c.e.a` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lc/e/a;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L1c3a34.  call temp:= `retainAllHelper`(v0, v1) @signature `Lc/e/f;.retainAllHelper:(Ljava/util/Map;Ljava/util/Collection;)Z` @kind static;
  #L1c3a3a.  v1:= temp;
  #L1c3a3c.  return v1;
}
procedure `java.util.Collection` `values`(`c.e.a` v1 @kind this) @signature `Lc/e/a;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3a50.  call temp:= `b`(v1) @signature `Lc/e/a;.b:()Lc/e/f;` @kind direct;
  #L1c3a56.  v0:= temp @kind object;
  #L1c3a58.  call temp:= `getValues`(v0) @signature `Lc/e/f;.getValues:()Ljava/util/Collection;` @kind virtual;
  #L1c3a5e.  v0:= temp @kind object;
  #L1c3a60.  return v0 @kind object;
}
