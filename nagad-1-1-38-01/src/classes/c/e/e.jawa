record `c.e.e` @kind class @AccessFlag PUBLIC {
  `java.util.LinkedHashMap` `c.e.e.a` @AccessFlag PRIVATE_FINAL;
  `int` `c.e.e.b` @AccessFlag PRIVATE;
  `int` `c.e.e.c` @AccessFlag PRIVATE;
  `int` `c.e.e.d` @AccessFlag PRIVATE;
  `int` `c.e.e.e` @AccessFlag PRIVATE;
  `int` `c.e.e.f` @AccessFlag PRIVATE;
  `int` `c.e.e.g` @AccessFlag PRIVATE;
  `int` `c.e.e.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.e.e` v3 @kind this, `int` v4 ) @signature `Lc/e/e;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1c509c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c50a2.  if v4 <= 0 then goto L1c50c2;
  #L1c50a6.  v3.`c.e.e.c` @type ^`int` := v4;
  #L1c50aa.  v4:= new `java.util.LinkedHashMap`;
  #L1c50ae.  v0:= 0I;
  #L1c50b0.  v1:= 0.75F;
  #L1c50b4.  v2:= 1I;
  #L1c50b6.  call `<init>`(v4, v0, v1, v2) @signature `Ljava/util/LinkedHashMap;.<init>:(IFZ)V` @kind direct;
  #L1c50bc.  v3.`c.e.e.a` @type ^`java.util.LinkedHashMap` := v4 @kind object;
  #L1c50c0.  return @kind void;
  #L1c50c2.  v4:= new `java.lang.IllegalArgumentException`;
  #L1c50c6.  v0:= "maxSize <= 0" @kind object;
  #L1c50ca.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c50d0.  throw v4;
}
procedure `int` `a`(`c.e.e` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lc/e/e;.a:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1c4d74.  call temp:= `sizeOf`(v3, v4, v5) @signature `Lc/e/e;.sizeOf:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind virtual;
  #L1c4d7a.  v0:= temp;
  #L1c4d7c.  if v0 < 0 then goto L1c4d82;
  #L1c4d80.  return v0;
  #L1c4d82.  v0:= new `java.lang.IllegalStateException`;
  #L1c4d86.  v1:= new `java.lang.StringBuilder`;
  #L1c4d8a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c4d90.  v2:= "Negative size: " @kind object;
  #L1c4d94.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4d9a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4da0.  v4:= "=" @kind object;
  #L1c4da4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4daa.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4db0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c4db6.  v4:= temp @kind object;
  #L1c4db8.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c4dbe.  throw v0;
}
procedure `java.lang.Object` `create`(`c.e.e` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/e/e;.create:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;

  #L1c4de4.  v1:= 0I;
  #L1c4de6.  return v1 @kind object;
}
procedure `void` `entryRemoved`(`c.e.e` v0 @kind this, `boolean` v1 , `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lc/e/e;.entryRemoved:(ZLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L1c50e4.  return @kind void;
}
procedure `void` `evictAll`(`c.e.e` v1 @kind this) @signature `Lc/e/e;.evictAll:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1c50f8.  v0:= -1I;
  #L1c50fa.  call `trimToSize`(v1, v0) @signature `Lc/e/e;.trimToSize:(I)V` @kind virtual;
  #L1c5100.  return @kind void;
}
procedure `java.lang.Object` `get`(`c.e.e` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lc/e/e;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c4df8.  if v5 == 0 then goto L1c4ea0;
  #L1c4dfc.  @monitorenter v4
  #L1c4dfe.  v0:= v4.`c.e.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L1c4e02.  call temp:= `get`(v0, v5) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c4e08.  v0:= temp @kind object;
  #L1c4e0a.  if v0 == 0 then goto L1c4e1e;
  #L1c4e0e.  v5:= v4.`c.e.e.g` @type ^`int`;
  #L1c4e12.  v5:= v5 + 1;
  #L1c4e16.  v4.`c.e.e.g` @type ^`int` := v5;
  #L1c4e1a.  @monitorexit v4
  #L1c4e1c.  return v0 @kind object;
  #L1c4e1e.  v0:= v4.`c.e.e.h` @type ^`int`;
  #L1c4e22.  v0:= v0 + 1;
  #L1c4e26.  v4.`c.e.e.h` @type ^`int` := v0;
  #L1c4e2a.  @monitorexit v4
  #L1c4e2c.  call temp:= `create`(v4, v5) @signature `Lc/e/e;.create:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c4e32.  v0:= temp @kind object;
  #L1c4e34.  if v0 != 0 then goto L1c4e3c;
  #L1c4e38.  v5:= 0I;
  #L1c4e3a.  return v5 @kind object;
  #L1c4e3c.  @monitorenter v4
  #L1c4e3e.  v1:= v4.`c.e.e.e` @type ^`int`;
  #L1c4e42.  v1:= v1 + 1;
  #L1c4e46.  v4.`c.e.e.e` @type ^`int` := v1;
  #L1c4e4a.  v1:= v4.`c.e.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L1c4e4e.  call temp:= `put`(v1, v5, v0) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c4e54.  v1:= temp @kind object;
  #L1c4e56.  if v1 == 0 then goto L1c4e66;
  #L1c4e5a.  v2:= v4.`c.e.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L1c4e5e.  call temp:= `put`(v2, v5, v1) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c4e64.  goto L1c4e78;
  #L1c4e66.  v2:= v4.`c.e.e.b` @type ^`int`;
  #L1c4e6a.  call temp:= `a`(v4, v5, v0) @signature `Lc/e/e;.a:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind direct;
  #L1c4e70.  v3:= temp;
  #L1c4e72.  v2:= v2 + v3 @kind int;
  #L1c4e74.  v4.`c.e.e.b` @type ^`int` := v2;
  #L1c4e78.  @monitorexit v4
  #L1c4e7a.  if v1 == 0 then goto L1c4e88;
  #L1c4e7e.  v2:= 0I;
  #L1c4e80.  call `entryRemoved`(v4, v2, v5, v0, v1) @signature `Lc/e/e;.entryRemoved:(ZLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1c4e86.  return v1 @kind object;
  #L1c4e88.  v5:= v4.`c.e.e.c` @type ^`int`;
  #L1c4e8c.  call `trimToSize`(v4, v5) @signature `Lc/e/e;.trimToSize:(I)V` @kind virtual;
  #L1c4e92.  return v0 @kind object;
  #L1c4e94.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c4e96.  @monitorexit v4
  #L1c4e98.  throw v5;
  #L1c4e9a.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c4e9c.  @monitorexit v4
  #L1c4e9e.  throw v5;
  #L1c4ea0.  v5:= new `java.lang.NullPointerException`;
  #L1c4ea4.  v0:= "key == null" @kind object;
  #L1c4ea8.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c4eae.  throw v5;
  catch `java.lang.Throwable` @[L1c4dfe..L1c4e2c] goto L1c4e9a;
  catch `java.lang.Throwable` @[L1c4e3e..L1c4e7a] goto L1c4e94;
  catch `java.lang.Throwable` @[L1c4e96..L1c4e98] goto L1c4e94;
  catch `java.lang.Throwable` @[L1c4e9c..L1c4e9e] goto L1c4e9a;
}
procedure `java.lang.Object` `put`(`c.e.e` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lc/e/e;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1c4ee8.  if v4 == 0 then goto L1c4f52;
  #L1c4eec.  if v5 == 0 then goto L1c4f52;
  #L1c4ef0.  @monitorenter v3
  #L1c4ef2.  v0:= v3.`c.e.e.d` @type ^`int`;
  #L1c4ef6.  v0:= v0 + 1;
  #L1c4efa.  v3.`c.e.e.d` @type ^`int` := v0;
  #L1c4efe.  v0:= v3.`c.e.e.b` @type ^`int`;
  #L1c4f02.  call temp:= `a`(v3, v4, v5) @signature `Lc/e/e;.a:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind direct;
  #L1c4f08.  v1:= temp;
  #L1c4f0a.  v0:= v0 + v1 @kind int;
  #L1c4f0c.  v3.`c.e.e.b` @type ^`int` := v0;
  #L1c4f10.  v0:= v3.`c.e.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L1c4f14.  call temp:= `put`(v0, v4, v5) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c4f1a.  v0:= temp @kind object;
  #L1c4f1c.  if v0 == 0 then goto L1c4f32;
  #L1c4f20.  v1:= v3.`c.e.e.b` @type ^`int`;
  #L1c4f24.  call temp:= `a`(v3, v4, v0) @signature `Lc/e/e;.a:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind direct;
  #L1c4f2a.  v2:= temp;
  #L1c4f2c.  v1:= v1 - v2 @kind int;
  #L1c4f2e.  v3.`c.e.e.b` @type ^`int` := v1;
  #L1c4f32.  @monitorexit v3
  #L1c4f34.  if v0 == 0 then goto L1c4f40;
  #L1c4f38.  v1:= 0I;
  #L1c4f3a.  call `entryRemoved`(v3, v1, v4, v0, v5) @signature `Lc/e/e;.entryRemoved:(ZLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1c4f40.  v4:= v3.`c.e.e.c` @type ^`int`;
  #L1c4f44.  call `trimToSize`(v3, v4) @signature `Lc/e/e;.trimToSize:(I)V` @kind virtual;
  #L1c4f4a.  return v0 @kind object;
  #L1c4f4c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c4f4e.  @monitorexit v3
  #L1c4f50.  throw v4;
  #L1c4f52.  v4:= new `java.lang.NullPointerException`;
  #L1c4f56.  v5:= "key == null || value == null" @kind object;
  #L1c4f5a.  call `<init>`(v4, v5) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c4f60.  throw v4;
  catch `java.lang.Throwable` @[L1c4ef2..L1c4f34] goto L1c4f4c;
  catch `java.lang.Throwable` @[L1c4f4e..L1c4f50] goto L1c4f4c;
}
procedure `java.lang.Object` `remove`(`c.e.e` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lc/e/e;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1c4f88.  if v4 == 0 then goto L1c4fc8;
  #L1c4f8c.  @monitorenter v3
  #L1c4f8e.  v0:= v3.`c.e.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L1c4f92.  call temp:= `remove`(v0, v4) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c4f98.  v0:= temp @kind object;
  #L1c4f9a.  if v0 == 0 then goto L1c4fb0;
  #L1c4f9e.  v1:= v3.`c.e.e.b` @type ^`int`;
  #L1c4fa2.  call temp:= `a`(v3, v4, v0) @signature `Lc/e/e;.a:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind direct;
  #L1c4fa8.  v2:= temp;
  #L1c4faa.  v1:= v1 - v2 @kind int;
  #L1c4fac.  v3.`c.e.e.b` @type ^`int` := v1;
  #L1c4fb0.  @monitorexit v3
  #L1c4fb2.  if v0 == 0 then goto L1c4fc0;
  #L1c4fb6.  v1:= 0I;
  #L1c4fb8.  v2:= 0I;
  #L1c4fba.  call `entryRemoved`(v3, v1, v4, v0, v2) @signature `Lc/e/e;.entryRemoved:(ZLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1c4fc0.  return v0 @kind object;
  #L1c4fc2.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c4fc4.  @monitorexit v3
  #L1c4fc6.  throw v4;
  #L1c4fc8.  v4:= new `java.lang.NullPointerException`;
  #L1c4fcc.  v0:= "key == null" @kind object;
  #L1c4fd0.  call `<init>`(v4, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c4fd6.  throw v4;
  catch `java.lang.Throwable` @[L1c4f8e..L1c4fb2] goto L1c4fc2;
  catch `java.lang.Throwable` @[L1c4fc4..L1c4fc6] goto L1c4fc2;
}
procedure `int` `sizeOf`(`c.e.e` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lc/e/e;.sizeOf:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PROTECTED {
    temp;

  #L1c4dd0.  v1:= 1I;
  #L1c4dd2.  return v1;
}
procedure `java.lang.String` `toString`(`c.e.e` v6 @kind this) @signature `Lc/e/e;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1c4ffc.  @monitorenter v6
  #L1c4ffe.  v0:= v6.`c.e.e.g` @type ^`int`;
  #L1c5002.  v1:= v6.`c.e.e.h` @type ^`int`;
  #L1c5006.  v0:= v0 + v1 @kind int;
  #L1c5008.  v1:= 0I;
  #L1c500a.  if v0 == 0 then goto L1c501c;
  #L1c500e.  v2:= v6.`c.e.e.g` @type ^`int`;
  #L1c5012.  v2:= v2 * 100;
  #L1c5016.  v0:= v2 / v0 @kind int;
  #L1c501a.  goto L1c501e;
  #L1c501c.  v0:= 0I;
  #L1c501e.  v2:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L1c5022.  v3:= "LruCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]" @kind object;
  #L1c5026.  v4:= 4I;
  #L1c5028.  v4:= new `java.lang.Object`[v4];
  #L1c502c.  v5:= v6.`c.e.e.c` @type ^`int`;
  #L1c5030.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1c5036.  v5:= temp @kind object;
  #L1c5038.  v4[v1]:= v5 @kind object;
  #L1c503c.  v1:= 1I;
  #L1c503e.  v5:= v6.`c.e.e.g` @type ^`int`;
  #L1c5042.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1c5048.  v5:= temp @kind object;
  #L1c504a.  v4[v1]:= v5 @kind object;
  #L1c504e.  v1:= 2I;
  #L1c5050.  v5:= v6.`c.e.e.h` @type ^`int`;
  #L1c5054.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1c505a.  v5:= temp @kind object;
  #L1c505c.  v4[v1]:= v5 @kind object;
  #L1c5060.  v1:= 3I;
  #L1c5062.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1c5068.  v0:= temp @kind object;
  #L1c506a.  v4[v1]:= v0 @kind object;
  #L1c506e.  call temp:= `format`(v2, v3, v4) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1c5074.  v0:= temp @kind object;
  #L1c5076.  @monitorexit v6
  #L1c5078.  return v0 @kind object;
  #L1c507a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c507c.  @monitorexit v6
  #L1c507e.  throw v0;
  catch `java.lang.Throwable` @[L1c4ffe..L1c5076] goto L1c507a;
}
procedure `void` `trimToSize`(`c.e.e` v4 @kind this, `int` v5 ) @signature `Lc/e/e;.trimToSize:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c5114.  @monitorenter v4
  #L1c5116.  v0:= v4.`c.e.e.b` @type ^`int`;
  #L1c511a.  if v0 < 0 then goto L1c51b8;
  #L1c511e.  v0:= v4.`c.e.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L1c5122.  call temp:= `isEmpty`(v0) @signature `Ljava/util/LinkedHashMap;.isEmpty:()Z` @kind virtual;
  #L1c5128.  v0:= temp;
  #L1c512a.  if v0 == 0 then goto L1c5136;
  #L1c512e.  v0:= v4.`c.e.e.b` @type ^`int`;
  #L1c5132.  if v0 != 0 then goto L1c51b8;
  #L1c5136.  v0:= v4.`c.e.e.b` @type ^`int`;
  #L1c513a.  if v0 <= v5 then goto L1c51b4;
  #L1c513e.  v0:= v4.`c.e.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L1c5142.  call temp:= `isEmpty`(v0) @signature `Ljava/util/LinkedHashMap;.isEmpty:()Z` @kind virtual;
  #L1c5148.  v0:= temp;
  #L1c514a.  if v0 == 0 then goto L1c5150;
  #L1c514e.  goto L1c51b4;
  #L1c5150.  v0:= v4.`c.e.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L1c5154.  call temp:= `entrySet`(v0) @signature `Ljava/util/LinkedHashMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L1c515a.  v0:= temp @kind object;
  #L1c515c.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c5162.  v0:= temp @kind object;
  #L1c5164.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c516a.  v0:= temp @kind object;
  #L1c516c.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L1c5170.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L1c5176.  v1:= temp @kind object;
  #L1c5178.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1c517e.  v0:= temp @kind object;
  #L1c5180.  v2:= v4.`c.e.e.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L1c5184.  call temp:= `remove`(v2, v1) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c518a.  v2:= v4.`c.e.e.b` @type ^`int`;
  #L1c518e.  call temp:= `a`(v4, v1, v0) @signature `Lc/e/e;.a:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind direct;
  #L1c5194.  v3:= temp;
  #L1c5196.  v2:= v2 - v3 @kind int;
  #L1c5198.  v4.`c.e.e.b` @type ^`int` := v2;
  #L1c519c.  v2:= v4.`c.e.e.f` @type ^`int`;
  #L1c51a0.  v3:= 1I;
  #L1c51a2.  v2:= v2 + v3 @kind int;
  #L1c51a4.  v4.`c.e.e.f` @type ^`int` := v2;
  #L1c51a8.  @monitorexit v4
  #L1c51aa.  v2:= 0I;
  #L1c51ac.  call `entryRemoved`(v4, v3, v1, v0, v2) @signature `Lc/e/e;.entryRemoved:(ZLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1c51b2.  goto L1c5114;
  #L1c51b4.  @monitorexit v4
  #L1c51b6.  return @kind void;
  #L1c51b8.  v5:= new `java.lang.IllegalStateException`;
  #L1c51bc.  v0:= new `java.lang.StringBuilder`;
  #L1c51c0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c51c6.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c51cc.  v1:= temp @kind object;
  #L1c51ce.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c51d4.  v1:= temp @kind object;
  #L1c51d6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c51dc.  v1:= ".sizeOf() is reporting inconsistent results!" @kind object;
  #L1c51e0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c51e6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c51ec.  v0:= temp @kind object;
  #L1c51ee.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c51f4.  throw v5;
  #L1c51f6.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c51f8.  @monitorexit v4
  #L1c51fa.  throw v5;
  catch `java.lang.Throwable` @[L1c5116..L1c51aa] goto L1c51f6;
  catch `java.lang.Throwable` @[L1c51b4..L1c51fa] goto L1c51f6;
}
