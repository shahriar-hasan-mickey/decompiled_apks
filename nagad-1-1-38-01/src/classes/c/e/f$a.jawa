record `c.e.f$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `int` `c.e.f$a.f` @AccessFlag FINAL;
  `int` `c.e.f$a.g` @AccessFlag ;
  `int` `c.e.f$a.h` @AccessFlag ;
  `boolean` `c.e.f$a.i` @AccessFlag ;
  `c.e.f` `c.e.f$a.j` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.e.f$a` v1 @kind this, `c.e.f` v2 @kind object, `int` v3 ) @signature `Lc/e/f$a;.<init>:(Lc/e/f;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1c5294.  v1.`c.e.f$a.j` @type ^`c.e.f` := v2 @kind object;
  #L1c5298.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c529e.  v0:= 0I;
  #L1c52a0.  v1.`c.e.f$a.i` @type ^`boolean` := v0 @kind boolean;
  #L1c52a4.  v1.`c.e.f$a.f` @type ^`int` := v3;
  #L1c52a8.  call temp:= `colGetSize`(v2) @signature `Lc/e/f;.colGetSize:()I` @kind virtual;
  #L1c52ae.  v2:= temp;
  #L1c52b0.  v1.`c.e.f$a.g` @type ^`int` := v2;
  #L1c52b4.  return @kind void;
}
procedure `boolean` `hasNext`(`c.e.f$a` v2 @kind this) @signature `Lc/e/f$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c5220.  v0:= v2.`c.e.f$a.h` @type ^`int`;
  #L1c5224.  v1:= v2.`c.e.f$a.g` @type ^`int`;
  #L1c5228.  if v0 >= v1 then goto L1c5230;
  #L1c522c.  v0:= 1I;
  #L1c522e.  goto L1c5232;
  #L1c5230.  v0:= 0I;
  #L1c5232.  return v0;
}
procedure `java.lang.Object` `next`(`c.e.f$a` v3 @kind this) @signature `Lc/e/f$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c5244.  call temp:= `hasNext`(v3) @signature `Lc/e/f$a;.hasNext:()Z` @kind virtual;
  #L1c524a.  v0:= temp;
  #L1c524c.  if v0 == 0 then goto L1c5276;
  #L1c5250.  v0:= v3.`c.e.f$a.j` @type ^`c.e.f` @kind object;
  #L1c5254.  v1:= v3.`c.e.f$a.h` @type ^`int`;
  #L1c5258.  v2:= v3.`c.e.f$a.f` @type ^`int`;
  #L1c525c.  call temp:= `colGetEntry`(v0, v1, v2) @signature `Lc/e/f;.colGetEntry:(II)Ljava/lang/Object;` @kind virtual;
  #L1c5262.  v0:= temp @kind object;
  #L1c5264.  v1:= v3.`c.e.f$a.h` @type ^`int`;
  #L1c5268.  v2:= 1I;
  #L1c526a.  v1:= v1 + v2 @kind int;
  #L1c526c.  v3.`c.e.f$a.h` @type ^`int` := v1;
  #L1c5270.  v3.`c.e.f$a.i` @type ^`boolean` := v2 @kind boolean;
  #L1c5274.  return v0 @kind object;
  #L1c5276.  v0:= new `java.util.NoSuchElementException`;
  #L1c527a.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L1c5280.  throw v0;
}
procedure `void` `remove`(`c.e.f$a` v2 @kind this) @signature `Lc/e/f$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c52c8.  v0:= v2.`c.e.f$a.i` @type ^`boolean` @kind boolean;
  #L1c52cc.  if v0 == 0 then goto L1c52fe;
  #L1c52d0.  v0:= v2.`c.e.f$a.h` @type ^`int`;
  #L1c52d4.  v0:= v0 + -1;
  #L1c52d8.  v2.`c.e.f$a.h` @type ^`int` := v0;
  #L1c52dc.  v0:= v2.`c.e.f$a.g` @type ^`int`;
  #L1c52e0.  v0:= v0 + -1;
  #L1c52e4.  v2.`c.e.f$a.g` @type ^`int` := v0;
  #L1c52e8.  v0:= 0I;
  #L1c52ea.  v2.`c.e.f$a.i` @type ^`boolean` := v0 @kind boolean;
  #L1c52ee.  v0:= v2.`c.e.f$a.j` @type ^`c.e.f` @kind object;
  #L1c52f2.  v1:= v2.`c.e.f$a.h` @type ^`int`;
  #L1c52f6.  call `colRemoveAt`(v0, v1) @signature `Lc/e/f;.colRemoveAt:(I)V` @kind virtual;
  #L1c52fc.  return @kind void;
  #L1c52fe.  v0:= new `java.lang.IllegalStateException`;
  #L1c5302.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1c5308.  throw v0;
}
