record `c.e.a$a` @kind class @AccessFlag  extends `c.e.f` @kind class {
  `c.e.a` `c.e.a$a.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.e.a$a` v0 @kind this, `c.e.a` v1 @kind object) @signature `Lc/e/a$a;.<init>:(Lc/e/a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c3998.  v0.`c.e.a$a.d` @type ^`c.e.a` := v1 @kind object;
  #L1c399c.  call `<init>`(v0) @signature `Lc/e/f;.<init>:()V` @kind direct;
  #L1c39a2.  return @kind void;
}
procedure `void` `colClear`(`c.e.a$a` v1 @kind this) @signature `Lc/e/a$a;.colClear:()V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1c39b4.  v0:= v1.`c.e.a$a.d` @type ^`c.e.a` @kind object;
  #L1c39b8.  call `clear`(v0) @signature `Lc/e/g;.clear:()V` @kind virtual;
  #L1c39be.  return @kind void;
}
procedure `java.lang.Object` `colGetEntry`(`c.e.a$a` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lc/e/a$a;.colGetEntry:(II)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1c393c.  v0:= v1.`c.e.a$a.d` @type ^`c.e.a` @kind object;
  #L1c3940.  v0:= v0.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c3944.  v2:= v2 ^< 1;
  #L1c3948.  v2:= v2 + v3 @kind int;
  #L1c394a.  v2:= v0[v2] @kind object;
  #L1c394e.  return v2 @kind object;
}
procedure `java.util.Map` `colGetMap`(`c.e.a$a` v1 @kind this) @signature `Lc/e/a$a;.colGetMap:()Ljava/util/Map;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1c3980.  v0:= v1.`c.e.a$a.d` @type ^`c.e.a` @kind object;
  #L1c3984.  return v0 @kind object;
}
procedure `int` `colGetSize`(`c.e.a$a` v1 @kind this) @signature `Lc/e/a$a;.colGetSize:()I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1c38e0.  v0:= v1.`c.e.a$a.d` @type ^`c.e.a` @kind object;
  #L1c38e4.  v0:= v0.`c.e.g.h` @type ^`int`;
  #L1c38e8.  return v0;
}
procedure `int` `colIndexOfKey`(`c.e.a$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/e/a$a;.colIndexOfKey:(Ljava/lang/Object;)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1c38fc.  v0:= v1.`c.e.a$a.d` @type ^`c.e.a` @kind object;
  #L1c3900.  call temp:= `indexOfKey`(v0, v2) @signature `Lc/e/g;.indexOfKey:(Ljava/lang/Object;)I` @kind virtual;
  #L1c3906.  v2:= temp;
  #L1c3908.  return v2;
}
procedure `int` `colIndexOfValue`(`c.e.a$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/e/a$a;.colIndexOfValue:(Ljava/lang/Object;)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1c391c.  v0:= v1.`c.e.a$a.d` @type ^`c.e.a` @kind object;
  #L1c3920.  call temp:= `a`(v0, v2) @signature `Lc/e/g;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L1c3926.  v2:= temp;
  #L1c3928.  return v2;
}
procedure `void` `colPut`(`c.e.a$a` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lc/e/a$a;.colPut:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1c39d0.  v0:= v1.`c.e.a$a.d` @type ^`c.e.a` @kind object;
  #L1c39d4.  call temp:= `put`(v0, v2, v3) @signature `Lc/e/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c39da.  return @kind void;
}
procedure `void` `colRemoveAt`(`c.e.a$a` v1 @kind this, `int` v2 ) @signature `Lc/e/a$a;.colRemoveAt:(I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1c39ec.  v0:= v1.`c.e.a$a.d` @type ^`c.e.a` @kind object;
  #L1c39f0.  call temp:= `removeAt`(v0, v2) @signature `Lc/e/g;.removeAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c39f6.  return @kind void;
}
procedure `java.lang.Object` `colSetValue`(`c.e.a$a` v1 @kind this, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lc/e/a$a;.colSetValue:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1c3960.  v0:= v1.`c.e.a$a.d` @type ^`c.e.a` @kind object;
  #L1c3964.  call temp:= `setValueAt`(v0, v2, v3) @signature `Lc/e/g;.setValueAt:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c396a.  v2:= temp @kind object;
  #L1c396c.  return v2 @kind object;
}
