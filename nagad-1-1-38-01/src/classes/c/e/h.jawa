record `c.e.h` @kind class @AccessFlag PUBLIC extends `java.lang.Cloneable` @kind interface {
  `boolean` `c.e.h.f` @AccessFlag PRIVATE;
  `int`[] `c.e.h.g` @AccessFlag PRIVATE;
  `java.lang.Object`[] `c.e.h.h` @AccessFlag PRIVATE;
  `int` `c.e.h.i` @AccessFlag PRIVATE;
}
global `java.lang.Object` `@@c.e.h.j` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lc/e/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c6ef4.  v0:= new `java.lang.Object`;
  #L1c6ef8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c6efe.  `@@c.e.h.j` @type ^`java.lang.Object` := v0 @kind object;
  #L1c6f02.  return @kind void;
}
procedure `void` `<init>`(`c.e.h` v1 @kind this) @signature `Lc/e/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c6f14.  v0:= 10I;
  #L1c6f18.  call `<init>`(v1, v0) @signature `Lc/e/h;.<init>:(I)V` @kind direct;
  #L1c6f1e.  return @kind void;
}
procedure `void` `<init>`(`c.e.h` v1 @kind this, `int` v2 ) @signature `Lc/e/h;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c6f30.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c6f36.  v0:= 0I;
  #L1c6f38.  v1.`c.e.h.f` @type ^`boolean` := v0 @kind boolean;
  #L1c6f3c.  if v2 != 0 then goto L1c6f52;
  #L1c6f40.  v2:= `@@c.e.c.a` @type ^`int`[] @kind object;
  #L1c6f44.  v1.`c.e.h.g` @type ^`int`[] := v2 @kind object;
  #L1c6f48.  v2:= `@@c.e.c.c` @type ^`java.lang.Object`[] @kind object;
  #L1c6f4c.  v1.`c.e.h.h` @type ^`java.lang.Object`[] := v2 @kind object;
  #L1c6f50.  goto L1c6f6a;
  #L1c6f52.  call temp:= `idealIntArraySize`(v2) @signature `Lc/e/c;.idealIntArraySize:(I)I` @kind static;
  #L1c6f58.  v2:= temp;
  #L1c6f5a.  v0:= new `int`[v2];
  #L1c6f5e.  v1.`c.e.h.g` @type ^`int`[] := v0 @kind object;
  #L1c6f62.  v2:= new `java.lang.Object`[v2];
  #L1c6f66.  v1.`c.e.h.h` @type ^`java.lang.Object`[] := v2 @kind object;
  #L1c6f6a.  return @kind void;
}
procedure `void` `a`(`c.e.h` v8 @kind this) @signature `Lc/e/h;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1c7060.  v0:= v8.`c.e.h.i` @type ^`int`;
  #L1c7064.  v1:= v8.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c7068.  v2:= v8.`c.e.h.h` @type ^`java.lang.Object`[] @kind object;
  #L1c706c.  v3:= 0I;
  #L1c706e.  v4:= 0I;
  #L1c7070.  v5:= 0I;
  #L1c7072.  if v4 >= v0 then goto L1c70a2;
  #L1c7076.  v6:= v2[v4] @kind object;
  #L1c707a.  v7:= `@@c.e.h.j` @type ^`java.lang.Object` @kind object;
  #L1c707e.  if v6 == v7 then goto L1c709c;
  #L1c7082.  if v4 == v5 then goto L1c7098;
  #L1c7086.  v7:= v1[v4];
  #L1c708a.  v1[v5]:= v7;
  #L1c708e.  v2[v5]:= v6 @kind object;
  #L1c7092.  v6:= 0I;
  #L1c7094.  v2[v4]:= v6 @kind object;
  #L1c7098.  v5:= v5 + 1;
  #L1c709c.  v4:= v4 + 1;
  #L1c70a0.  goto L1c7072;
  #L1c70a2.  v8.`c.e.h.f` @type ^`boolean` := v3 @kind boolean;
  #L1c70a6.  v8.`c.e.h.i` @type ^`int` := v5;
  #L1c70aa.  return @kind void;
}
procedure `void` `append`(`c.e.h` v6 @kind this, `int` v7 , `java.lang.Object` v8 @kind object) @signature `Lc/e/h;.append:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1c6f7c.  v0:= v6.`c.e.h.i` @type ^`int`;
  #L1c6f80.  if v0 == 0 then goto L1c6f9c;
  #L1c6f84.  v1:= v6.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c6f88.  v0:= v0 + -1;
  #L1c6f8c.  v0:= v1[v0];
  #L1c6f90.  if v7 > v0 then goto L1c6f9c;
  #L1c6f94.  call `put`(v6, v7, v8) @signature `Lc/e/h;.put:(ILjava/lang/Object;)V` @kind virtual;
  #L1c6f9a.  return @kind void;
  #L1c6f9c.  v0:= v6.`c.e.h.f` @type ^`boolean` @kind boolean;
  #L1c6fa0.  if v0 == 0 then goto L1c6fb8;
  #L1c6fa4.  v0:= v6.`c.e.h.i` @type ^`int`;
  #L1c6fa8.  v1:= v6.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c6fac.  v1:= length @variable v1;
  #L1c6fae.  if v0 < v1 then goto L1c6fb8;
  #L1c6fb2.  call `a`(v6) @signature `Lc/e/h;.a:()V` @kind direct;
  #L1c6fb8.  v0:= v6.`c.e.h.i` @type ^`int`;
  #L1c6fbc.  v1:= v6.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c6fc0.  v1:= length @variable v1;
  #L1c6fc2.  if v0 < v1 then goto L1c6ffc;
  #L1c6fc6.  v1:= v0 + 1;
  #L1c6fca.  call temp:= `idealIntArraySize`(v1) @signature `Lc/e/c;.idealIntArraySize:(I)I` @kind static;
  #L1c6fd0.  v1:= temp;
  #L1c6fd2.  v2:= new `int`[v1];
  #L1c6fd6.  v1:= new `java.lang.Object`[v1];
  #L1c6fda.  v3:= v6.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c6fde.  v4:= length @variable v3;
  #L1c6fe0.  v5:= 0I;
  #L1c6fe2.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c6fe8.  v3:= v6.`c.e.h.h` @type ^`java.lang.Object`[] @kind object;
  #L1c6fec.  v4:= length @variable v3;
  #L1c6fee.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c6ff4.  v6.`c.e.h.g` @type ^`int`[] := v2 @kind object;
  #L1c6ff8.  v6.`c.e.h.h` @type ^`java.lang.Object`[] := v1 @kind object;
  #L1c6ffc.  v1:= v6.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c7000.  v1[v0]:= v7;
  #L1c7004.  v7:= v6.`c.e.h.h` @type ^`java.lang.Object`[] @kind object;
  #L1c7008.  v7[v0]:= v8 @kind object;
  #L1c700c.  v0:= v0 + 1;
  #L1c7010.  v6.`c.e.h.i` @type ^`int` := v0;
  #L1c7014.  return @kind void;
}
procedure `void` `clear`(`c.e.h` v5 @kind this) @signature `Lc/e/h;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c7028.  v0:= v5.`c.e.h.i` @type ^`int`;
  #L1c702c.  v1:= v5.`c.e.h.h` @type ^`java.lang.Object`[] @kind object;
  #L1c7030.  v2:= 0I;
  #L1c7032.  v3:= 0I;
  #L1c7034.  if v3 >= v0 then goto L1c7044;
  #L1c7038.  v4:= 0I;
  #L1c703a.  v1[v3]:= v4 @kind object;
  #L1c703e.  v3:= v3 + 1;
  #L1c7042.  goto L1c7034;
  #L1c7044.  v5.`c.e.h.i` @type ^`int` := v2;
  #L1c7048.  v5.`c.e.h.f` @type ^`boolean` := v2 @kind boolean;
  #L1c704c.  return @kind void;
}
procedure `c.e.h` `clone`(`c.e.h` v2 @kind this) @signature `Lc/e/h;.clone:()Lc/e/h;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c6ccc.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L1c6cd2.  v0:= temp @kind object;
  #L1c6cd4.  v0:= (`c.e.h`) v0 @kind object;
  #L1c6cd8.  v1:= v2.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c6cdc.  call temp:= `clone`(v1) @signature `[I.clone:()Ljava/lang/Object;` @kind virtual;
  #L1c6ce2.  v1:= temp @kind object;
  #L1c6ce4.  v1:= (`int`[]) v1 @kind object;
  #L1c6ce8.  v0.`c.e.h.g` @type ^`int`[] := v1 @kind object;
  #L1c6cec.  v1:= v2.`c.e.h.h` @type ^`java.lang.Object`[] @kind object;
  #L1c6cf0.  call temp:= `clone`(v1) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1c6cf6.  v1:= temp @kind object;
  #L1c6cf8.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L1c6cfc.  v0.`c.e.h.h` @type ^`java.lang.Object`[] := v1 @kind object;
  #L1c6d00.  return v0 @kind object;
  #L1c6d02.  v0:= Exception @type ^`java.lang.CloneNotSupportedException` @kind object;
  #L1c6d04.  v1:= new `java.lang.AssertionError`;
  #L1c6d08.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1c6d0e.  throw v1;
  catch `java.lang.CloneNotSupportedException` @[L1c6ccc..L1c6d00] goto L1c6d02;
}
procedure `java.lang.Object` `clone`(`c.e.h` v1 @kind this) @signature `Lc/e/h;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1c6dac.  call temp:= `clone`(v1) @signature `Lc/e/h;.clone:()Lc/e/h;` @kind virtual;
  #L1c6db2.  v0:= temp @kind object;
  #L1c6db4.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`c.e.h` v1 @kind this, `int` v2 ) @signature `Lc/e/h;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c6dc8.  v0:= 0I;
  #L1c6dca.  call temp:= `get`(v1, v2, v0) @signature `Lc/e/h;.get:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c6dd0.  v2:= temp @kind object;
  #L1c6dd2.  return v2 @kind object;
}
procedure `java.lang.Object` `get`(`c.e.h` v3 @kind this, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lc/e/h;.get:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c6de4.  v0:= v3.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c6de8.  v1:= v3.`c.e.h.i` @type ^`int`;
  #L1c6dec.  call temp:= `a`(v0, v1, v4) @signature `Lc/e/c;.a:([III)I` @kind static;
  #L1c6df2.  v4:= temp;
  #L1c6df4.  if v4 < 0 then goto L1c6e10;
  #L1c6df8.  v0:= v3.`c.e.h.h` @type ^`java.lang.Object`[] @kind object;
  #L1c6dfc.  v1:= v0[v4] @kind object;
  #L1c6e00.  v2:= `@@c.e.h.j` @type ^`java.lang.Object` @kind object;
  #L1c6e04.  if v1 != v2 then goto L1c6e0a;
  #L1c6e08.  goto L1c6e10;
  #L1c6e0a.  v4:= v0[v4] @kind object;
  #L1c6e0e.  return v4 @kind object;
  #L1c6e10.  return v5 @kind object;
}
procedure `int` `indexOfKey`(`c.e.h` v2 @kind this, `int` v3 ) @signature `Lc/e/h;.indexOfKey:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c6d30.  v0:= v2.`c.e.h.f` @type ^`boolean` @kind boolean;
  #L1c6d34.  if v0 == 0 then goto L1c6d3e;
  #L1c6d38.  call `a`(v2) @signature `Lc/e/h;.a:()V` @kind direct;
  #L1c6d3e.  v0:= v2.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c6d42.  v1:= v2.`c.e.h.i` @type ^`int`;
  #L1c6d46.  call temp:= `a`(v0, v1, v3) @signature `Lc/e/c;.a:([III)I` @kind static;
  #L1c6d4c.  v3:= temp;
  #L1c6d4e.  return v3;
}
procedure `int` `keyAt`(`c.e.h` v1 @kind this, `int` v2 ) @signature `Lc/e/h;.keyAt:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c6d60.  v0:= v1.`c.e.h.f` @type ^`boolean` @kind boolean;
  #L1c6d64.  if v0 == 0 then goto L1c6d6e;
  #L1c6d68.  call `a`(v1) @signature `Lc/e/h;.a:()V` @kind direct;
  #L1c6d6e.  v0:= v1.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c6d72.  v2:= v0[v2];
  #L1c6d76.  return v2;
}
procedure `void` `put`(`c.e.h` v6 @kind this, `int` v7 , `java.lang.Object` v8 @kind object) @signature `Lc/e/h;.put:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1c70bc.  v0:= v6.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c70c0.  v1:= v6.`c.e.h.i` @type ^`int`;
  #L1c70c4.  call temp:= `a`(v0, v1, v7) @signature `Lc/e/c;.a:([III)I` @kind static;
  #L1c70ca.  v0:= temp;
  #L1c70cc.  if v0 < 0 then goto L1c70da;
  #L1c70d0.  v7:= v6.`c.e.h.h` @type ^`java.lang.Object`[] @kind object;
  #L1c70d4.  v7[v0]:= v8 @kind object;
  #L1c70d8.  goto L1c71bc;
  #L1c70da.  v0:= ~v0 @kind int;
  #L1c70dc.  v1:= v6.`c.e.h.i` @type ^`int`;
  #L1c70e0.  if v0 >= v1 then goto L1c7102;
  #L1c70e4.  v1:= v6.`c.e.h.h` @type ^`java.lang.Object`[] @kind object;
  #L1c70e8.  v2:= v1[v0] @kind object;
  #L1c70ec.  v3:= `@@c.e.h.j` @type ^`java.lang.Object` @kind object;
  #L1c70f0.  if v2 != v3 then goto L1c7102;
  #L1c70f4.  v2:= v6.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c70f8.  v2[v0]:= v7;
  #L1c70fc.  v1[v0]:= v8 @kind object;
  #L1c7100.  return @kind void;
  #L1c7102.  v1:= v6.`c.e.h.f` @type ^`boolean` @kind boolean;
  #L1c7106.  if v1 == 0 then goto L1c7130;
  #L1c710a.  v1:= v6.`c.e.h.i` @type ^`int`;
  #L1c710e.  v2:= v6.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c7112.  v2:= length @variable v2;
  #L1c7114.  if v1 < v2 then goto L1c7130;
  #L1c7118.  call `a`(v6) @signature `Lc/e/h;.a:()V` @kind direct;
  #L1c711e.  v0:= v6.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c7122.  v1:= v6.`c.e.h.i` @type ^`int`;
  #L1c7126.  call temp:= `a`(v0, v1, v7) @signature `Lc/e/c;.a:([III)I` @kind static;
  #L1c712c.  v0:= temp;
  #L1c712e.  v0:= ~v0 @kind int;
  #L1c7130.  v1:= v6.`c.e.h.i` @type ^`int`;
  #L1c7134.  v2:= v6.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c7138.  v2:= length @variable v2;
  #L1c713a.  if v1 < v2 then goto L1c7174;
  #L1c713e.  v1:= v1 + 1;
  #L1c7142.  call temp:= `idealIntArraySize`(v1) @signature `Lc/e/c;.idealIntArraySize:(I)I` @kind static;
  #L1c7148.  v1:= temp;
  #L1c714a.  v2:= new `int`[v1];
  #L1c714e.  v1:= new `java.lang.Object`[v1];
  #L1c7152.  v3:= v6.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c7156.  v4:= length @variable v3;
  #L1c7158.  v5:= 0I;
  #L1c715a.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c7160.  v3:= v6.`c.e.h.h` @type ^`java.lang.Object`[] @kind object;
  #L1c7164.  v4:= length @variable v3;
  #L1c7166.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c716c.  v6.`c.e.h.g` @type ^`int`[] := v2 @kind object;
  #L1c7170.  v6.`c.e.h.h` @type ^`java.lang.Object`[] := v1 @kind object;
  #L1c7174.  v1:= v6.`c.e.h.i` @type ^`int`;
  #L1c7178.  v2:= v1 - v0 @kind int;
  #L1c717c.  if v2 == 0 then goto L1c71a0;
  #L1c7180.  v2:= v6.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c7184.  v3:= v0 + 1;
  #L1c7188.  v1:= v1 - v0 @kind int;
  #L1c718a.  call `arraycopy`(v2, v0, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c7190.  v1:= v6.`c.e.h.h` @type ^`java.lang.Object`[] @kind object;
  #L1c7194.  v2:= v6.`c.e.h.i` @type ^`int`;
  #L1c7198.  v2:= v2 - v0 @kind int;
  #L1c719a.  call `arraycopy`(v1, v0, v1, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c71a0.  v1:= v6.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c71a4.  v1[v0]:= v7;
  #L1c71a8.  v7:= v6.`c.e.h.h` @type ^`java.lang.Object`[] @kind object;
  #L1c71ac.  v7[v0]:= v8 @kind object;
  #L1c71b0.  v7:= v6.`c.e.h.i` @type ^`int`;
  #L1c71b4.  v7:= v7 + 1;
  #L1c71b8.  v6.`c.e.h.i` @type ^`int` := v7;
  #L1c71bc.  return @kind void;
}
procedure `void` `remove`(`c.e.h` v3 @kind this, `int` v4 ) @signature `Lc/e/h;.remove:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c71d0.  v0:= v3.`c.e.h.g` @type ^`int`[] @kind object;
  #L1c71d4.  v1:= v3.`c.e.h.i` @type ^`int`;
  #L1c71d8.  call temp:= `a`(v0, v1, v4) @signature `Lc/e/c;.a:([III)I` @kind static;
  #L1c71de.  v4:= temp;
  #L1c71e0.  if v4 < 0 then goto L1c71fe;
  #L1c71e4.  v0:= v3.`c.e.h.h` @type ^`java.lang.Object`[] @kind object;
  #L1c71e8.  v1:= v0[v4] @kind object;
  #L1c71ec.  v2:= `@@c.e.h.j` @type ^`java.lang.Object` @kind object;
  #L1c71f0.  if v1 == v2 then goto L1c71fe;
  #L1c71f4.  v0[v4]:= v2 @kind object;
  #L1c71f8.  v4:= 1I;
  #L1c71fa.  v3.`c.e.h.f` @type ^`boolean` := v4 @kind boolean;
  #L1c71fe.  return @kind void;
}
procedure `int` `size`(`c.e.h` v1 @kind this) @signature `Lc/e/h;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c6d88.  v0:= v1.`c.e.h.f` @type ^`boolean` @kind boolean;
  #L1c6d8c.  if v0 == 0 then goto L1c6d96;
  #L1c6d90.  call `a`(v1) @signature `Lc/e/h;.a:()V` @kind direct;
  #L1c6d96.  v0:= v1.`c.e.h.i` @type ^`int`;
  #L1c6d9a.  return v0;
}
procedure `java.lang.String` `toString`(`c.e.h` v3 @kind this) @signature `Lc/e/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c6e4c.  call temp:= `size`(v3) @signature `Lc/e/h;.size:()I` @kind virtual;
  #L1c6e52.  v0:= temp;
  #L1c6e54.  if v0 > 0 then goto L1c6e5e;
  #L1c6e58.  v0:= "{}" @kind object;
  #L1c6e5c.  return v0 @kind object;
  #L1c6e5e.  v0:= new `java.lang.StringBuilder`;
  #L1c6e62.  v1:= v3.`c.e.h.i` @type ^`int`;
  #L1c6e66.  v1:= v1 * 28;
  #L1c6e6a.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1c6e70.  v1:= 123I;
  #L1c6e74.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c6e7a.  v1:= 0I;
  #L1c6e7c.  v2:= v3.`c.e.h.i` @type ^`int`;
  #L1c6e80.  if v1 >= v2 then goto L1c6ece;
  #L1c6e84.  if v1 <= 0 then goto L1c6e92;
  #L1c6e88.  v2:= ", " @kind object;
  #L1c6e8c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c6e92.  call temp:= `keyAt`(v3, v1) @signature `Lc/e/h;.keyAt:(I)I` @kind virtual;
  #L1c6e98.  v2:= temp;
  #L1c6e9a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c6ea0.  v2:= 61I;
  #L1c6ea4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c6eaa.  call temp:= `valueAt`(v3, v1) @signature `Lc/e/h;.valueAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c6eb0.  v2:= temp @kind object;
  #L1c6eb2.  if v2 == v3 then goto L1c6ebe;
  #L1c6eb6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c6ebc.  goto L1c6ec8;
  #L1c6ebe.  v2:= "(this Map)" @kind object;
  #L1c6ec2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c6ec8.  v1:= v1 + 1;
  #L1c6ecc.  goto L1c6e7c;
  #L1c6ece.  v1:= 125I;
  #L1c6ed2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c6ed8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c6ede.  v0:= temp @kind object;
  #L1c6ee0.  return v0 @kind object;
}
procedure `java.lang.Object` `valueAt`(`c.e.h` v1 @kind this, `int` v2 ) @signature `Lc/e/h;.valueAt:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c6e24.  v0:= v1.`c.e.h.f` @type ^`boolean` @kind boolean;
  #L1c6e28.  if v0 == 0 then goto L1c6e32;
  #L1c6e2c.  call `a`(v1) @signature `Lc/e/h;.a:()V` @kind direct;
  #L1c6e32.  v0:= v1.`c.e.h.h` @type ^`java.lang.Object`[] @kind object;
  #L1c6e36.  v2:= v0[v2] @kind object;
  #L1c6e3a.  return v2 @kind object;
}
