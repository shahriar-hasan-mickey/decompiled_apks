record `c.e.g` @kind class @AccessFlag PUBLIC {
  `int`[] `c.e.g.f` @AccessFlag ;
  `java.lang.Object`[] `c.e.g.g` @AccessFlag ;
  `int` `c.e.g.h` @AccessFlag ;
}
global `java.lang.Object`[] `@@c.e.g.i` @AccessFlag STATIC;
global `int` `@@c.e.g.j` @AccessFlag STATIC;
global `java.lang.Object`[] `@@c.e.g.k` @AccessFlag STATIC;
global `int` `@@c.e.g.l` @AccessFlag STATIC;
procedure `void` `<init>`(`c.e.g` v1 @kind this) @signature `Lc/e/g;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c6950.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c6956.  v0:= `@@c.e.c.a` @type ^`int`[] @kind object;
  #L1c695a.  v1.`c.e.g.f` @type ^`int`[] := v0 @kind object;
  #L1c695e.  v0:= `@@c.e.c.c` @type ^`java.lang.Object`[] @kind object;
  #L1c6962.  v1.`c.e.g.g` @type ^`java.lang.Object`[] := v0 @kind object;
  #L1c6966.  v0:= 0I;
  #L1c6968.  v1.`c.e.g.h` @type ^`int` := v0;
  #L1c696c.  return @kind void;
}
procedure `void` `<init>`(`c.e.g` v0 @kind this, `int` v1 ) @signature `Lc/e/g;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1c69a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c69aa.  if v1 != 0 then goto L1c69c0;
  #L1c69ae.  v1:= `@@c.e.c.a` @type ^`int`[] @kind object;
  #L1c69b2.  v0.`c.e.g.f` @type ^`int`[] := v1 @kind object;
  #L1c69b6.  v1:= `@@c.e.c.c` @type ^`java.lang.Object`[] @kind object;
  #L1c69ba.  v0.`c.e.g.g` @type ^`java.lang.Object`[] := v1 @kind object;
  #L1c69be.  goto L1c69c6;
  #L1c69c0.  call `a`(v0, v1) @signature `Lc/e/g;.a:(I)V` @kind direct;
  #L1c69c6.  v1:= 0I;
  #L1c69c8.  v0.`c.e.g.h` @type ^`int` := v1;
  #L1c69cc.  return @kind void;
}
procedure `void` `<init>`(`c.e.g` v0 @kind this, `c.e.g` v1 @kind object) @signature `Lc/e/g;.<init>:(Lc/e/g;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1c6980.  call `<init>`(v0) @signature `Lc/e/g;.<init>:()V` @kind direct;
  #L1c6986.  if v1 == 0 then goto L1c6990;
  #L1c698a.  call `putAll`(v0, v1) @signature `Lc/e/g;.putAll:(Lc/e/g;)V` @kind virtual;
  #L1c6990.  return @kind void;
}
procedure `int` `a`(`int`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lc/e/g;.a:([III)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L1c6278.  call temp:= `a`(v0, v1, v2) @signature `Lc/e/c;.a:([III)I` @kind static;
  #L1c627e.  v0:= temp;
  #L1c6280.  return v0;
  #L1c6282.  v0:= new `java.util.ConcurrentModificationException`;
  #L1c6286.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L1c628c.  throw v0;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L1c6278..L1c6280] goto L1c6282;
}
procedure `void` `a`(`c.e.g` v5 @kind this, `int` v6 ) @signature `Lc/e/g;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c69e0.  v0:= constclass @type ^`c.e.g` @kind object;
  #L1c69e4.  v1:= 0I;
  #L1c69e6.  v2:= 0I;
  #L1c69e8.  v3:= 1I;
  #L1c69ea.  v4:= 8I;
  #L1c69ee.  if v6 != v4 then goto L1c6a3c;
  #L1c69f2.  @monitorenter v0
  #L1c69f4.  v4:= `@@c.e.g.k` @type ^`java.lang.Object`[] @kind object;
  #L1c69f8.  if v4 == 0 then goto L1c6a32;
  #L1c69fc.  v6:= `@@c.e.g.k` @type ^`java.lang.Object`[] @kind object;
  #L1c6a00.  v5.`c.e.g.g` @type ^`java.lang.Object`[] := v6 @kind object;
  #L1c6a04.  v4:= v6[v2] @kind object;
  #L1c6a08.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L1c6a0c.  `@@c.e.g.k` @type ^`java.lang.Object`[] := v4 @kind object;
  #L1c6a10.  v4:= v6[v3] @kind object;
  #L1c6a14.  v4:= (`int`[]) v4 @kind object;
  #L1c6a18.  v5.`c.e.g.f` @type ^`int`[] := v4 @kind object;
  #L1c6a1c.  v6[v3]:= v1 @kind object;
  #L1c6a20.  v6[v2]:= v1 @kind object;
  #L1c6a24.  v6:= `@@c.e.g.l` @type ^`int`;
  #L1c6a28.  v6:= v6 - v3 @kind int;
  #L1c6a2a.  `@@c.e.g.l` @type ^`int` := v6;
  #L1c6a2e.  @monitorexit v0
  #L1c6a30.  return @kind void;
  #L1c6a32.  @monitorexit v0
  #L1c6a34.  goto L1c6a8c;
  #L1c6a36.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c6a38.  @monitorexit v0
  #L1c6a3a.  throw v6;
  #L1c6a3c.  v4:= 4I;
  #L1c6a3e.  if v6 != v4 then goto L1c6a8c;
  #L1c6a42.  @monitorenter v0
  #L1c6a44.  v4:= `@@c.e.g.i` @type ^`java.lang.Object`[] @kind object;
  #L1c6a48.  if v4 == 0 then goto L1c6a82;
  #L1c6a4c.  v6:= `@@c.e.g.i` @type ^`java.lang.Object`[] @kind object;
  #L1c6a50.  v5.`c.e.g.g` @type ^`java.lang.Object`[] := v6 @kind object;
  #L1c6a54.  v4:= v6[v2] @kind object;
  #L1c6a58.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L1c6a5c.  `@@c.e.g.i` @type ^`java.lang.Object`[] := v4 @kind object;
  #L1c6a60.  v4:= v6[v3] @kind object;
  #L1c6a64.  v4:= (`int`[]) v4 @kind object;
  #L1c6a68.  v5.`c.e.g.f` @type ^`int`[] := v4 @kind object;
  #L1c6a6c.  v6[v3]:= v1 @kind object;
  #L1c6a70.  v6[v2]:= v1 @kind object;
  #L1c6a74.  v6:= `@@c.e.g.j` @type ^`int`;
  #L1c6a78.  v6:= v6 - v3 @kind int;
  #L1c6a7a.  `@@c.e.g.j` @type ^`int` := v6;
  #L1c6a7e.  @monitorexit v0
  #L1c6a80.  return @kind void;
  #L1c6a82.  @monitorexit v0
  #L1c6a84.  goto L1c6a8c;
  #L1c6a86.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c6a88.  @monitorexit v0
  #L1c6a8a.  throw v6;
  #L1c6a8c.  v0:= new `int`[v6];
  #L1c6a90.  v5.`c.e.g.f` @type ^`int`[] := v0 @kind object;
  #L1c6a94.  v6:= v6 ^< v3 @kind int;
  #L1c6a96.  v6:= new `java.lang.Object`[v6];
  #L1c6a9a.  v5.`c.e.g.g` @type ^`java.lang.Object`[] := v6 @kind object;
  #L1c6a9e.  return @kind void;
  catch `java.lang.Throwable` @[L1c69f4..L1c6a3a] goto L1c6a36;
  catch `java.lang.Throwable` @[L1c6a44..L1c6a8a] goto L1c6a86;
}
procedure `void` `a`(`int`[] v8 @kind object, `java.lang.Object`[] v9 @kind object, `int` v10 ) @signature `Lc/e/g;.a:([I[Ljava/lang/Object;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1c6b84.  v0:= constclass @type ^`c.e.g` @kind object;
  #L1c6b88.  v1:= length @variable v8;
  #L1c6b8a.  v2:= 0I;
  #L1c6b8c.  v3:= 2I;
  #L1c6b8e.  v4:= 0I;
  #L1c6b90.  v5:= 10I;
  #L1c6b94.  v6:= 1I;
  #L1c6b96.  v7:= 8I;
  #L1c6b9a.  if v1 != v7 then goto L1c6be0;
  #L1c6b9e.  @monitorenter v0
  #L1c6ba0.  v1:= `@@c.e.g.l` @type ^`int`;
  #L1c6ba4.  if v1 >= v5 then goto L1c6bd6;
  #L1c6ba8.  v1:= `@@c.e.g.k` @type ^`java.lang.Object`[] @kind object;
  #L1c6bac.  v9[v4]:= v1 @kind object;
  #L1c6bb0.  v9[v6]:= v8 @kind object;
  #L1c6bb4.  v8:= v10 ^< 1;
  #L1c6bb8.  v8:= v8 - v6 @kind int;
  #L1c6bba.  if v8 < v3 then goto L1c6bc8;
  #L1c6bbe.  v9[v8]:= v2 @kind object;
  #L1c6bc2.  v8:= v8 + -1;
  #L1c6bc6.  goto L1c6bba;
  #L1c6bc8.  `@@c.e.g.k` @type ^`java.lang.Object`[] := v9 @kind object;
  #L1c6bcc.  v8:= `@@c.e.g.l` @type ^`int`;
  #L1c6bd0.  v8:= v8 + v6 @kind int;
  #L1c6bd2.  `@@c.e.g.l` @type ^`int` := v8;
  #L1c6bd6.  @monitorexit v0
  #L1c6bd8.  goto L1c6c2a;
  #L1c6bda.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c6bdc.  @monitorexit v0
  #L1c6bde.  throw v8;
  #L1c6be0.  v1:= length @variable v8;
  #L1c6be2.  v7:= 4I;
  #L1c6be4.  if v1 != v7 then goto L1c6c2a;
  #L1c6be8.  @monitorenter v0
  #L1c6bea.  v1:= `@@c.e.g.j` @type ^`int`;
  #L1c6bee.  if v1 >= v5 then goto L1c6c20;
  #L1c6bf2.  v1:= `@@c.e.g.i` @type ^`java.lang.Object`[] @kind object;
  #L1c6bf6.  v9[v4]:= v1 @kind object;
  #L1c6bfa.  v9[v6]:= v8 @kind object;
  #L1c6bfe.  v8:= v10 ^< 1;
  #L1c6c02.  v8:= v8 - v6 @kind int;
  #L1c6c04.  if v8 < v3 then goto L1c6c12;
  #L1c6c08.  v9[v8]:= v2 @kind object;
  #L1c6c0c.  v8:= v8 + -1;
  #L1c6c10.  goto L1c6c04;
  #L1c6c12.  `@@c.e.g.i` @type ^`java.lang.Object`[] := v9 @kind object;
  #L1c6c16.  v8:= `@@c.e.g.j` @type ^`int`;
  #L1c6c1a.  v8:= v8 + v6 @kind int;
  #L1c6c1c.  `@@c.e.g.j` @type ^`int` := v8;
  #L1c6c20.  @monitorexit v0
  #L1c6c22.  goto L1c6c2a;
  #L1c6c24.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c6c26.  @monitorexit v0
  #L1c6c28.  throw v8;
  #L1c6c2a.  return @kind void;
  catch `java.lang.Throwable` @[L1c6ba0..L1c6bde] goto L1c6bda;
  catch `java.lang.Throwable` @[L1c6bea..L1c6c28] goto L1c6c24;
}
procedure `int` `a`(`c.e.g` v5 @kind this) @signature `Lc/e/g;.a:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c63e8.  v0:= v5.`c.e.g.h` @type ^`int`;
  #L1c63ec.  if v0 != 0 then goto L1c63f4;
  #L1c63f0.  v0:= -1I;
  #L1c63f2.  return v0;
  #L1c63f4.  v1:= v5.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c63f8.  v2:= 0I;
  #L1c63fa.  call temp:= `a`(v1, v0, v2) @signature `Lc/e/g;.a:([III)I` @kind static;
  #L1c6400.  v1:= temp;
  #L1c6402.  if v1 >= 0 then goto L1c6408;
  #L1c6406.  return v1;
  #L1c6408.  v2:= v5.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c640c.  v3:= v1 ^< 1;
  #L1c6410.  v2:= v2[v3] @kind object;
  #L1c6414.  if v2 != 0 then goto L1c641a;
  #L1c6418.  return v1;
  #L1c641a.  v2:= v1 + 1;
  #L1c641e.  if v2 >= v0 then goto L1c6446;
  #L1c6422.  v3:= v5.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c6426.  v3:= v3[v2];
  #L1c642a.  if v3 != 0 then goto L1c6446;
  #L1c642e.  v3:= v5.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c6432.  v4:= v2 ^< 1;
  #L1c6436.  v3:= v3[v4] @kind object;
  #L1c643a.  if v3 != 0 then goto L1c6440;
  #L1c643e.  return v2;
  #L1c6440.  v2:= v2 + 1;
  #L1c6444.  goto L1c641e;
  #L1c6446.  v1:= v1 + -1;
  #L1c644a.  if v1 < 0 then goto L1c6472;
  #L1c644e.  v0:= v5.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c6452.  v0:= v0[v1];
  #L1c6456.  if v0 != 0 then goto L1c6472;
  #L1c645a.  v0:= v5.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c645e.  v3:= v1 ^< 1;
  #L1c6462.  v0:= v0[v3] @kind object;
  #L1c6466.  if v0 != 0 then goto L1c646c;
  #L1c646a.  return v1;
  #L1c646c.  v1:= v1 + -1;
  #L1c6470.  goto L1c644a;
  #L1c6472.  v0:= ~v2 @kind int;
  #L1c6474.  return v0;
}
procedure `int` `a`(`c.e.g` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lc/e/g;.a:(Ljava/lang/Object;)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c6488.  v0:= v5.`c.e.g.h` @type ^`int`;
  #L1c648c.  v0:= v0 * 2;
  #L1c6490.  v1:= v5.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c6494.  v2:= 1I;
  #L1c6496.  if v6 != 0 then goto L1c64b2;
  #L1c649a.  v6:= 1I;
  #L1c649c.  if v6 >= v0 then goto L1c64d4;
  #L1c64a0.  v3:= v1[v6] @kind object;
  #L1c64a4.  if v3 != 0 then goto L1c64ac;
  #L1c64a8.  v6:= v6 ^> v2 @kind int;
  #L1c64aa.  return v6;
  #L1c64ac.  v6:= v6 + 2;
  #L1c64b0.  goto L1c649c;
  #L1c64b2.  v3:= 1I;
  #L1c64b4.  if v3 >= v0 then goto L1c64d4;
  #L1c64b8.  v4:= v1[v3] @kind object;
  #L1c64bc.  call temp:= `equals`(v6, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c64c2.  v4:= temp;
  #L1c64c4.  if v4 == 0 then goto L1c64ce;
  #L1c64c8.  v6:= v3 ^> 1;
  #L1c64cc.  return v6;
  #L1c64ce.  v3:= v3 + 2;
  #L1c64d2.  goto L1c64b4;
  #L1c64d4.  v6:= -1I;
  #L1c64d6.  return v6;
}
procedure `int` `a`(`c.e.g` v5 @kind this, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lc/e/g;.a:(Ljava/lang/Object;I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c6304.  v0:= v5.`c.e.g.h` @type ^`int`;
  #L1c6308.  if v0 != 0 then goto L1c6310;
  #L1c630c.  v6:= -1I;
  #L1c630e.  return v6;
  #L1c6310.  v1:= v5.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c6314.  call temp:= `a`(v1, v0, v7) @signature `Lc/e/g;.a:([III)I` @kind static;
  #L1c631a.  v1:= temp;
  #L1c631c.  if v1 >= 0 then goto L1c6322;
  #L1c6320.  return v1;
  #L1c6322.  v2:= v5.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c6326.  v3:= v1 ^< 1;
  #L1c632a.  v2:= v2[v3] @kind object;
  #L1c632e.  call temp:= `equals`(v6, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c6334.  v2:= temp;
  #L1c6336.  if v2 == 0 then goto L1c633c;
  #L1c633a.  return v1;
  #L1c633c.  v2:= v1 + 1;
  #L1c6340.  if v2 >= v0 then goto L1c6370;
  #L1c6344.  v3:= v5.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c6348.  v3:= v3[v2];
  #L1c634c.  if v3 != v7 then goto L1c6370;
  #L1c6350.  v3:= v5.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c6354.  v4:= v2 ^< 1;
  #L1c6358.  v3:= v3[v4] @kind object;
  #L1c635c.  call temp:= `equals`(v6, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c6362.  v3:= temp;
  #L1c6364.  if v3 == 0 then goto L1c636a;
  #L1c6368.  return v2;
  #L1c636a.  v2:= v2 + 1;
  #L1c636e.  goto L1c6340;
  #L1c6370.  v1:= v1 + -1;
  #L1c6374.  if v1 < 0 then goto L1c63a4;
  #L1c6378.  v0:= v5.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c637c.  v0:= v0[v1];
  #L1c6380.  if v0 != v7 then goto L1c63a4;
  #L1c6384.  v0:= v5.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c6388.  v3:= v1 ^< 1;
  #L1c638c.  v0:= v0[v3] @kind object;
  #L1c6390.  call temp:= `equals`(v6, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c6396.  v0:= temp;
  #L1c6398.  if v0 == 0 then goto L1c639e;
  #L1c639c.  return v1;
  #L1c639e.  v1:= v1 + -1;
  #L1c63a2.  goto L1c6374;
  #L1c63a4.  v6:= ~v2 @kind int;
  #L1c63a6.  return v6;
}
procedure `void` `clear`(`c.e.g` v4 @kind this) @signature `Lc/e/g;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c6ac8.  v0:= v4.`c.e.g.h` @type ^`int`;
  #L1c6acc.  if v0 <= 0 then goto L1c6af4;
  #L1c6ad0.  v1:= v4.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c6ad4.  v2:= v4.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c6ad8.  v3:= `@@c.e.c.a` @type ^`int`[] @kind object;
  #L1c6adc.  v4.`c.e.g.f` @type ^`int`[] := v3 @kind object;
  #L1c6ae0.  v3:= `@@c.e.c.c` @type ^`java.lang.Object`[] @kind object;
  #L1c6ae4.  v4.`c.e.g.g` @type ^`java.lang.Object`[] := v3 @kind object;
  #L1c6ae8.  v3:= 0I;
  #L1c6aea.  v4.`c.e.g.h` @type ^`int` := v3;
  #L1c6aee.  call `a`(v1, v2, v0) @signature `Lc/e/g;.a:([I[Ljava/lang/Object;I)V` @kind static;
  #L1c6af4.  v0:= v4.`c.e.g.h` @type ^`int`;
  #L1c6af8.  if v0 > 0 then goto L1c6afe;
  #L1c6afc.  return @kind void;
  #L1c6afe.  v0:= new `java.util.ConcurrentModificationException`;
  #L1c6b02.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L1c6b08.  throw v0;
}
procedure `boolean` `containsKey`(`c.e.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/e/g;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L1c6060.  call temp:= `indexOfKey`(v0, v1) @signature `Lc/e/g;.indexOfKey:(Ljava/lang/Object;)I` @kind virtual;
  #L1c6066.  v1:= temp;
  #L1c6068.  if v1 < 0 then goto L1c6070;
  #L1c606c.  v1:= 1I;
  #L1c606e.  goto L1c6072;
  #L1c6070.  v1:= 0I;
  #L1c6072.  return v1;
}
procedure `boolean` `containsValue`(`c.e.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/e/g;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L1c6084.  call temp:= `a`(v0, v1) @signature `Lc/e/g;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L1c608a.  v1:= temp;
  #L1c608c.  if v1 < 0 then goto L1c6094;
  #L1c6090.  v1:= 1I;
  #L1c6092.  goto L1c6096;
  #L1c6094.  v1:= 0I;
  #L1c6096.  return v1;
}
procedure `void` `ensureCapacity`(`c.e.g` v5 @kind this, `int` v6 ) @signature `Lc/e/g;.ensureCapacity:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c6b1c.  v0:= v5.`c.e.g.h` @type ^`int`;
  #L1c6b20.  v1:= v5.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c6b24.  v2:= length @variable v1;
  #L1c6b26.  if v2 >= v6 then goto L1c6b5c;
  #L1c6b2a.  v2:= v5.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c6b2e.  call `a`(v5, v6) @signature `Lc/e/g;.a:(I)V` @kind direct;
  #L1c6b34.  v6:= v5.`c.e.g.h` @type ^`int`;
  #L1c6b38.  if v6 <= 0 then goto L1c6b56;
  #L1c6b3c.  v6:= v5.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c6b40.  v3:= 0I;
  #L1c6b42.  call `arraycopy`(v1, v3, v6, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c6b48.  v6:= v5.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c6b4c.  v4:= v0 ^< 1;
  #L1c6b50.  call `arraycopy`(v2, v3, v6, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c6b56.  call `a`(v1, v2, v0) @signature `Lc/e/g;.a:([I[Ljava/lang/Object;I)V` @kind static;
  #L1c6b5c.  v6:= v5.`c.e.g.h` @type ^`int`;
  #L1c6b60.  if v6 != v0 then goto L1c6b66;
  #L1c6b64.  return @kind void;
  #L1c6b66.  v6:= new `java.util.ConcurrentModificationException`;
  #L1c6b6a.  call `<init>`(v6) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L1c6b70.  throw v6;
}
procedure `boolean` `equals`(`c.e.g` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lc/e/g;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1c60a8.  v0:= 1I;
  #L1c60aa.  if v6 != v7 then goto L1c60b0;
  #L1c60ae.  return v0;
  #L1c60b0.  v1:= instanceof @variable v7 @type ^`c.e.g` @kind boolean;
  #L1c60b4.  v2:= 0I;
  #L1c60b6.  if v1 == 0 then goto L1c6124;
  #L1c60ba.  v7:= (`c.e.g`) v7 @kind object;
  #L1c60be.  call temp:= `size`(v6) @signature `Lc/e/g;.size:()I` @kind virtual;
  #L1c60c4.  v1:= temp;
  #L1c60c6.  call temp:= `size`(v7) @signature `Lc/e/g;.size:()I` @kind virtual;
  #L1c60cc.  v3:= temp;
  #L1c60ce.  if v1 == v3 then goto L1c60d4;
  #L1c60d2.  return v2;
  #L1c60d4.  v1:= 0I;
  #L1c60d6.  v3:= v6.`c.e.g.h` @type ^`int`;
  #L1c60da.  if v1 >= v3 then goto L1c6120;
  #L1c60de.  call temp:= `keyAt`(v6, v1) @signature `Lc/e/g;.keyAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c60e4.  v3:= temp @kind object;
  #L1c60e6.  call temp:= `valueAt`(v6, v1) @signature `Lc/e/g;.valueAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c60ec.  v4:= temp @kind object;
  #L1c60ee.  call temp:= `get`(v7, v3) @signature `Lc/e/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c60f4.  v5:= temp @kind object;
  #L1c60f6.  if v4 != 0 then goto L1c610c;
  #L1c60fa.  if v5 != 0 then goto L1c610a;
  #L1c60fe.  call temp:= `containsKey`(v7, v3) @signature `Lc/e/g;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c6104.  v3:= temp;
  #L1c6106.  if v3 != 0 then goto L1c611a;
  #L1c610a.  return v2;
  #L1c610c.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c6112.  v3:= temp;
  #L1c6114.  if v3 != 0 then goto L1c611a;
  #L1c6118.  return v2;
  #L1c611a.  v1:= v1 + 1;
  #L1c611e.  goto L1c60d6;
  #L1c6120.  return v0;
  #L1c6122.  return v2;
  #L1c6124.  v1:= instanceof @variable v7 @type ^`java.util.Map` @kind boolean;
  #L1c6128.  if v1 == 0 then goto L1c6194;
  #L1c612c.  v7:= (`java.util.Map`) v7 @kind object;
  #L1c6130.  call temp:= `size`(v6) @signature `Lc/e/g;.size:()I` @kind virtual;
  #L1c6136.  v1:= temp;
  #L1c6138.  call temp:= `size`(v7) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L1c613e.  v3:= temp;
  #L1c6140.  if v1 == v3 then goto L1c6146;
  #L1c6144.  return v2;
  #L1c6146.  v1:= 0I;
  #L1c6148.  v3:= v6.`c.e.g.h` @type ^`int`;
  #L1c614c.  if v1 >= v3 then goto L1c6192;
  #L1c6150.  call temp:= `keyAt`(v6, v1) @signature `Lc/e/g;.keyAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c6156.  v3:= temp @kind object;
  #L1c6158.  call temp:= `valueAt`(v6, v1) @signature `Lc/e/g;.valueAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c615e.  v4:= temp @kind object;
  #L1c6160.  call temp:= `get`(v7, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1c6166.  v5:= temp @kind object;
  #L1c6168.  if v4 != 0 then goto L1c617e;
  #L1c616c.  if v5 != 0 then goto L1c617c;
  #L1c6170.  call temp:= `containsKey`(v7, v3) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L1c6176.  v3:= temp;
  #L1c6178.  if v3 != 0 then goto L1c618c;
  #L1c617c.  return v2;
  #L1c617e.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c6184.  v3:= temp;
  #L1c6186.  if v3 != 0 then goto L1c618c;
  #L1c618a.  return v2;
  #L1c618c.  v1:= v1 + 1;
  #L1c6190.  goto L1c6148;
  #L1c6192.  return v0;
  #L1c6194.  return v2;
  catch `java.lang.NullPointerException` @[L1c60d6..L1c6114] goto L1c6122;
  catch `java.lang.ClassCastException` @[L1c60d6..L1c6114] goto L1c6122;
  catch `java.lang.NullPointerException` @[L1c6148..L1c6186] goto L1c6194;
  catch `java.lang.ClassCastException` @[L1c6148..L1c6186] goto L1c6194;
}
procedure `java.lang.Object` `get`(`c.e.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/e/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c6500.  v0:= 0I;
  #L1c6502.  call temp:= `getOrDefault`(v1, v2, v0) @signature `Lc/e/g;.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c6508.  v2:= temp @kind object;
  #L1c650a.  return v2 @kind object;
}
procedure `java.lang.Object` `getOrDefault`(`c.e.g` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lc/e/g;.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L1c651c.  call temp:= `indexOfKey`(v0, v1) @signature `Lc/e/g;.indexOfKey:(Ljava/lang/Object;)I` @kind virtual;
  #L1c6522.  v1:= temp;
  #L1c6524.  if v1 < 0 then goto L1c6538;
  #L1c6528.  v2:= v0.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c652c.  v1:= v1 ^< 1;
  #L1c6530.  v1:= v1 + 1;
  #L1c6534.  v2:= v2[v1] @kind object;
  #L1c6538.  return v2 @kind object;
}
procedure `int` `hashCode`(`c.e.g` v9 @kind this) @signature `Lc/e/g;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1c62b0.  v0:= v9.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c62b4.  v1:= v9.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c62b8.  v2:= v9.`c.e.g.h` @type ^`int`;
  #L1c62bc.  v3:= 1I;
  #L1c62be.  v4:= 0I;
  #L1c62c0.  v3:= 0I;
  #L1c62c2.  v5:= 0I;
  #L1c62c4.  v6:= 1I;
  #L1c62c6.  if v3 >= v2 then goto L1c62f0;
  #L1c62ca.  v7:= v1[v6] @kind object;
  #L1c62ce.  v8:= v0[v3];
  #L1c62d2.  if v7 != 0 then goto L1c62da;
  #L1c62d6.  v7:= 0I;
  #L1c62d8.  goto L1c62e2;
  #L1c62da.  call temp:= `hashCode`(v7) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1c62e0.  v7:= temp;
  #L1c62e2.  v7:= v7 ^~ v8 @kind int;
  #L1c62e4.  v5:= v5 + v7 @kind int;
  #L1c62e6.  v3:= v3 + 1;
  #L1c62ea.  v6:= v6 + 2;
  #L1c62ee.  goto L1c62c6;
  #L1c62f0.  return v5;
}
procedure `int` `indexOfKey`(`c.e.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/e/g;.indexOfKey:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c63b8.  if v2 != 0 then goto L1c63c6;
  #L1c63bc.  call temp:= `a`(v1) @signature `Lc/e/g;.a:()I` @kind virtual;
  #L1c63c2.  v2:= temp;
  #L1c63c4.  goto L1c63d6;
  #L1c63c6.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1c63cc.  v0:= temp;
  #L1c63ce.  call temp:= `a`(v1, v2, v0) @signature `Lc/e/g;.a:(Ljava/lang/Object;I)I` @kind virtual;
  #L1c63d4.  v2:= temp;
  #L1c63d6.  return v2;
}
procedure `boolean` `isEmpty`(`c.e.g` v1 @kind this) @signature `Lc/e/g;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c61c8.  v0:= v1.`c.e.g.h` @type ^`int`;
  #L1c61cc.  if v0 > 0 then goto L1c61d4;
  #L1c61d0.  v0:= 1I;
  #L1c61d2.  goto L1c61d6;
  #L1c61d4.  v0:= 0I;
  #L1c61d6.  return v0;
}
procedure `java.lang.Object` `keyAt`(`c.e.g` v1 @kind this, `int` v2 ) @signature `Lc/e/g;.keyAt:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c654c.  v0:= v1.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c6550.  v2:= v2 ^< 1;
  #L1c6554.  v2:= v0[v2] @kind object;
  #L1c6558.  return v2 @kind object;
}
procedure `java.lang.Object` `put`(`c.e.g` v9 @kind this, `java.lang.Object` v10 @kind object, `java.lang.Object` v11 @kind object) @signature `Lc/e/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1c656c.  v0:= v9.`c.e.g.h` @type ^`int`;
  #L1c6570.  v1:= 0I;
  #L1c6572.  if v10 != 0 then goto L1c6582;
  #L1c6576.  call temp:= `a`(v9) @signature `Lc/e/g;.a:()I` @kind virtual;
  #L1c657c.  v2:= temp;
  #L1c657e.  v3:= 0I;
  #L1c6580.  goto L1c6598;
  #L1c6582.  call temp:= `hashCode`(v10) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1c6588.  v2:= temp;
  #L1c658a.  call temp:= `a`(v9, v10, v2) @signature `Lc/e/g;.a:(Ljava/lang/Object;I)I` @kind virtual;
  #L1c6590.  v3:= temp;
  #L1c6592.  v8:= v3;
  #L1c6594.  v3:= v2;
  #L1c6596.  v2:= v8;
  #L1c6598.  if v2 < 0 then goto L1c65b2;
  #L1c659c.  v10:= v2 ^< 1;
  #L1c65a0.  v10:= v10 + 1;
  #L1c65a4.  v0:= v9.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c65a8.  v1:= v0[v10] @kind object;
  #L1c65ac.  v0[v10]:= v11 @kind object;
  #L1c65b0.  return v1 @kind object;
  #L1c65b2.  v2:= ~v2 @kind int;
  #L1c65b4.  v4:= v9.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c65b8.  v4:= length @variable v4;
  #L1c65ba.  if v0 < v4 then goto L1c6620;
  #L1c65be.  v4:= 4I;
  #L1c65c0.  v5:= 8I;
  #L1c65c4.  if v0 < v5 then goto L1c65d0;
  #L1c65c8.  v4:= v0 ^> 1;
  #L1c65cc.  v4:= v4 + v0 @kind int;
  #L1c65ce.  goto L1c65d8;
  #L1c65d0.  if v0 < v4 then goto L1c65d8;
  #L1c65d4.  v4:= 8I;
  #L1c65d8.  v5:= v9.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c65dc.  v6:= v9.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c65e0.  call `a`(v9, v4) @signature `Lc/e/g;.a:(I)V` @kind direct;
  #L1c65e6.  v4:= v9.`c.e.g.h` @type ^`int`;
  #L1c65ea.  if v0 != v4 then goto L1c6614;
  #L1c65ee.  v4:= v9.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c65f2.  v7:= length @variable v4;
  #L1c65f4.  if v7 <= 0 then goto L1c660c;
  #L1c65f8.  v7:= length @variable v5;
  #L1c65fa.  call `arraycopy`(v5, v1, v4, v1, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c6600.  v4:= v9.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c6604.  v7:= length @variable v6;
  #L1c6606.  call `arraycopy`(v6, v1, v4, v1, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c660c.  call `a`(v5, v6, v0) @signature `Lc/e/g;.a:([I[Ljava/lang/Object;I)V` @kind static;
  #L1c6612.  goto L1c6620;
  #L1c6614.  v10:= new `java.util.ConcurrentModificationException`;
  #L1c6618.  call `<init>`(v10) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L1c661e.  throw v10;
  #L1c6620.  if v2 >= v0 then goto L1c6652;
  #L1c6624.  v1:= v9.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c6628.  v4:= v2 + 1;
  #L1c662c.  v5:= v0 - v2 @kind int;
  #L1c6630.  call `arraycopy`(v1, v2, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c6636.  v1:= v9.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c663a.  v5:= v2 ^< 1;
  #L1c663e.  v4:= v4 ^< 1;
  #L1c6642.  v6:= v9.`c.e.g.h` @type ^`int`;
  #L1c6646.  v6:= v6 - v2 @kind int;
  #L1c6648.  v6:= v6 ^< 1;
  #L1c664c.  call `arraycopy`(v1, v5, v1, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c6652.  v1:= v9.`c.e.g.h` @type ^`int`;
  #L1c6656.  if v0 != v1 then goto L1c6688;
  #L1c665a.  v0:= v9.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c665e.  v4:= length @variable v0;
  #L1c6660.  if v2 >= v4 then goto L1c6688;
  #L1c6664.  v0[v2]:= v3;
  #L1c6668.  v0:= v9.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c666c.  v2:= v2 ^< 1;
  #L1c6670.  v0[v2]:= v10 @kind object;
  #L1c6674.  v2:= v2 + 1;
  #L1c6678.  v0[v2]:= v11 @kind object;
  #L1c667c.  v1:= v1 + 1;
  #L1c6680.  v9.`c.e.g.h` @type ^`int` := v1;
  #L1c6684.  v10:= 0I;
  #L1c6686.  return v10 @kind object;
  #L1c6688.  v10:= new `java.util.ConcurrentModificationException`;
  #L1c668c.  call `<init>`(v10) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L1c6692.  throw v10;
}
procedure `void` `putAll`(`c.e.g` v4 @kind this, `c.e.g` v5 @kind object) @signature `Lc/e/g;.putAll:(Lc/e/g;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c6c54.  v0:= v5.`c.e.g.h` @type ^`int`;
  #L1c6c58.  v1:= v4.`c.e.g.h` @type ^`int`;
  #L1c6c5c.  v1:= v1 + v0 @kind int;
  #L1c6c5e.  call `ensureCapacity`(v4, v1) @signature `Lc/e/g;.ensureCapacity:(I)V` @kind virtual;
  #L1c6c64.  v1:= v4.`c.e.g.h` @type ^`int`;
  #L1c6c68.  v2:= 0I;
  #L1c6c6a.  if v1 != 0 then goto L1c6c98;
  #L1c6c6e.  if v0 <= 0 then goto L1c6cb8;
  #L1c6c72.  v1:= v5.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c6c76.  v3:= v4.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c6c7a.  call `arraycopy`(v1, v2, v3, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c6c80.  v5:= v5.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c6c84.  v1:= v4.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c6c88.  v3:= v0 ^< 1;
  #L1c6c8c.  call `arraycopy`(v5, v2, v1, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c6c92.  v4.`c.e.g.h` @type ^`int` := v0;
  #L1c6c96.  goto L1c6cb8;
  #L1c6c98.  if v2 >= v0 then goto L1c6cb8;
  #L1c6c9c.  call temp:= `keyAt`(v5, v2) @signature `Lc/e/g;.keyAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c6ca2.  v1:= temp @kind object;
  #L1c6ca4.  call temp:= `valueAt`(v5, v2) @signature `Lc/e/g;.valueAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c6caa.  v3:= temp @kind object;
  #L1c6cac.  call temp:= `put`(v4, v1, v3) @signature `Lc/e/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c6cb2.  v2:= v2 + 1;
  #L1c6cb6.  goto L1c6c98;
  #L1c6cb8.  return @kind void;
}
procedure `java.lang.Object` `putIfAbsent`(`c.e.g` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lc/e/g;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c66a4.  call temp:= `get`(v1, v2) @signature `Lc/e/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c66aa.  v0:= temp @kind object;
  #L1c66ac.  if v0 != 0 then goto L1c66b8;
  #L1c66b0.  call temp:= `put`(v1, v2, v3) @signature `Lc/e/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c66b6.  v0:= temp @kind object;
  #L1c66b8.  return v0 @kind object;
}
procedure `java.lang.Object` `remove`(`c.e.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/e/g;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L1c66cc.  call temp:= `indexOfKey`(v0, v1) @signature `Lc/e/g;.indexOfKey:(Ljava/lang/Object;)I` @kind virtual;
  #L1c66d2.  v1:= temp;
  #L1c66d4.  if v1 < 0 then goto L1c66e2;
  #L1c66d8.  call temp:= `removeAt`(v0, v1) @signature `Lc/e/g;.removeAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c66de.  v1:= temp @kind object;
  #L1c66e0.  return v1 @kind object;
  #L1c66e2.  v1:= 0I;
  #L1c66e4.  return v1 @kind object;
}
procedure `boolean` `remove`(`c.e.g` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lc/e/g;.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c61e8.  call temp:= `indexOfKey`(v1, v2) @signature `Lc/e/g;.indexOfKey:(Ljava/lang/Object;)I` @kind virtual;
  #L1c61ee.  v2:= temp;
  #L1c61f0.  if v2 < 0 then goto L1c621a;
  #L1c61f4.  call temp:= `valueAt`(v1, v2) @signature `Lc/e/g;.valueAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c61fa.  v0:= temp @kind object;
  #L1c61fc.  if v3 == v0 then goto L1c6210;
  #L1c6200.  if v3 == 0 then goto L1c621a;
  #L1c6204.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c620a.  v3:= temp;
  #L1c620c.  if v3 == 0 then goto L1c621a;
  #L1c6210.  call temp:= `removeAt`(v1, v2) @signature `Lc/e/g;.removeAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c6216.  v2:= 1I;
  #L1c6218.  return v2;
  #L1c621a.  v2:= 0I;
  #L1c621c.  return v2;
}
procedure `java.lang.Object` `removeAt`(`c.e.g` v10 @kind this, `int` v11 ) @signature `Lc/e/g;.removeAt:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1c66f8.  v0:= v10.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c66fc.  v1:= v11 ^< 1;
  #L1c6700.  v2:= v1 + 1;
  #L1c6704.  v2:= v0[v2] @kind object;
  #L1c6708.  v3:= v10.`c.e.g.h` @type ^`int`;
  #L1c670c.  v4:= 0I;
  #L1c670e.  v5:= 1I;
  #L1c6710.  if v3 > v5 then goto L1c6732;
  #L1c6714.  v11:= v10.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c6718.  call `a`(v11, v0, v3) @signature `Lc/e/g;.a:([I[Ljava/lang/Object;I)V` @kind static;
  #L1c671e.  v11:= `@@c.e.c.a` @type ^`int`[] @kind object;
  #L1c6722.  v10.`c.e.g.f` @type ^`int`[] := v11 @kind object;
  #L1c6726.  v11:= `@@c.e.c.c` @type ^`java.lang.Object`[] @kind object;
  #L1c672a.  v10.`c.e.g.g` @type ^`java.lang.Object`[] := v11 @kind object;
  #L1c672e.  v0:= 0I;
  #L1c6730.  goto L1c67fa;
  #L1c6732.  v0:= v3 + -1;
  #L1c6736.  v6:= v10.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c673a.  v7:= length @variable v6;
  #L1c673c.  v8:= 8I;
  #L1c6740.  if v7 <= v8 then goto L1c67be;
  #L1c6744.  v6:= length @variable v6;
  #L1c6746.  v6:= v6 / 3;
  #L1c674a.  if v3 >= v6 then goto L1c67be;
  #L1c674e.  if v3 <= v8 then goto L1c675a;
  #L1c6752.  v6:= v3 ^> 1;
  #L1c6756.  v8:= v3 + v6 @kind int;
  #L1c675a.  v6:= v10.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c675e.  v7:= v10.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c6762.  call `a`(v10, v8) @signature `Lc/e/g;.a:(I)V` @kind direct;
  #L1c6768.  v8:= v10.`c.e.g.h` @type ^`int`;
  #L1c676c.  if v3 != v8 then goto L1c67b2;
  #L1c6770.  if v11 <= 0 then goto L1c6788;
  #L1c6774.  v8:= v10.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c6778.  call `arraycopy`(v6, v4, v8, v4, v11) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c677e.  v8:= v10.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c6782.  call `arraycopy`(v7, v4, v8, v4, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c6788.  if v11 >= v0 then goto L1c67fa;
  #L1c678c.  v4:= v11 + 1;
  #L1c6790.  v8:= v10.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c6794.  v9:= v0 - v11 @kind int;
  #L1c6798.  call `arraycopy`(v6, v4, v8, v11, v9) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c679e.  v11:= v4 ^< 1;
  #L1c67a2.  v4:= v10.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c67a6.  v5:= v9 ^< 1;
  #L1c67aa.  call `arraycopy`(v7, v11, v4, v1, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c67b0.  goto L1c67fa;
  #L1c67b2.  v11:= new `java.util.ConcurrentModificationException`;
  #L1c67b6.  call `<init>`(v11) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L1c67bc.  throw v11;
  #L1c67be.  if v11 >= v0 then goto L1c67e6;
  #L1c67c2.  v4:= v10.`c.e.g.f` @type ^`int`[] @kind object;
  #L1c67c6.  v6:= v11 + 1;
  #L1c67ca.  v7:= v0 - v11 @kind int;
  #L1c67ce.  call `arraycopy`(v4, v6, v4, v11, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c67d4.  v11:= v10.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c67d8.  v4:= v6 ^< 1;
  #L1c67dc.  v6:= v7 ^< 1;
  #L1c67e0.  call `arraycopy`(v11, v4, v11, v1, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c67e6.  v11:= v10.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c67ea.  v1:= v0 ^< 1;
  #L1c67ee.  v4:= 0I;
  #L1c67f0.  v11[v1]:= v4 @kind object;
  #L1c67f4.  v1:= v1 + v5 @kind int;
  #L1c67f6.  v11[v1]:= v4 @kind object;
  #L1c67fa.  v11:= v10.`c.e.g.h` @type ^`int`;
  #L1c67fe.  if v3 != v11 then goto L1c6808;
  #L1c6802.  v10.`c.e.g.h` @type ^`int` := v0;
  #L1c6806.  return v2 @kind object;
  #L1c6808.  v11:= new `java.util.ConcurrentModificationException`;
  #L1c680c.  call `<init>`(v11) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L1c6812.  throw v11;
}
procedure `java.lang.Object` `replace`(`c.e.g` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lc/e/g;.replace:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L1c6824.  call temp:= `indexOfKey`(v0, v1) @signature `Lc/e/g;.indexOfKey:(Ljava/lang/Object;)I` @kind virtual;
  #L1c682a.  v1:= temp;
  #L1c682c.  if v1 < 0 then goto L1c683a;
  #L1c6830.  call temp:= `setValueAt`(v0, v1, v2) @signature `Lc/e/g;.setValueAt:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c6836.  v1:= temp @kind object;
  #L1c6838.  return v1 @kind object;
  #L1c683a.  v1:= 0I;
  #L1c683c.  return v1 @kind object;
}
procedure `boolean` `replace`(`c.e.g` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lc/e/g;.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c6230.  call temp:= `indexOfKey`(v1, v2) @signature `Lc/e/g;.indexOfKey:(Ljava/lang/Object;)I` @kind virtual;
  #L1c6236.  v2:= temp;
  #L1c6238.  if v2 < 0 then goto L1c6262;
  #L1c623c.  call temp:= `valueAt`(v1, v2) @signature `Lc/e/g;.valueAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c6242.  v0:= temp @kind object;
  #L1c6244.  if v0 == v3 then goto L1c6258;
  #L1c6248.  if v3 == 0 then goto L1c6262;
  #L1c624c.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c6252.  v3:= temp;
  #L1c6254.  if v3 == 0 then goto L1c6262;
  #L1c6258.  call temp:= `setValueAt`(v1, v2, v4) @signature `Lc/e/g;.setValueAt:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c625e.  v2:= 1I;
  #L1c6260.  return v2;
  #L1c6262.  v2:= 0I;
  #L1c6264.  return v2;
}
procedure `java.lang.Object` `setValueAt`(`c.e.g` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lc/e/g;.setValueAt:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c6850.  v3:= v3 ^< 1;
  #L1c6854.  v3:= v3 + 1;
  #L1c6858.  v0:= v2.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c685c.  v1:= v0[v3] @kind object;
  #L1c6860.  v0[v3]:= v4 @kind object;
  #L1c6864.  return v1 @kind object;
}
procedure `int` `size`(`c.e.g` v1 @kind this) @signature `Lc/e/g;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c64e8.  v0:= v1.`c.e.g.h` @type ^`int`;
  #L1c64ec.  return v0;
}
procedure `java.lang.String` `toString`(`c.e.g` v4 @kind this) @signature `Lc/e/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c689c.  call temp:= `isEmpty`(v4) @signature `Lc/e/g;.isEmpty:()Z` @kind virtual;
  #L1c68a2.  v0:= temp;
  #L1c68a4.  if v0 == 0 then goto L1c68ae;
  #L1c68a8.  v0:= "{}" @kind object;
  #L1c68ac.  return v0 @kind object;
  #L1c68ae.  v0:= new `java.lang.StringBuilder`;
  #L1c68b2.  v1:= v4.`c.e.g.h` @type ^`int`;
  #L1c68b6.  v1:= v1 * 28;
  #L1c68ba.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1c68c0.  v1:= 123I;
  #L1c68c4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c68ca.  v1:= 0I;
  #L1c68cc.  v2:= v4.`c.e.g.h` @type ^`int`;
  #L1c68d0.  if v1 >= v2 then goto L1c692a;
  #L1c68d4.  if v1 <= 0 then goto L1c68e2;
  #L1c68d8.  v2:= ", " @kind object;
  #L1c68dc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c68e2.  call temp:= `keyAt`(v4, v1) @signature `Lc/e/g;.keyAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c68e8.  v2:= temp @kind object;
  #L1c68ea.  v3:= "(this Map)" @kind object;
  #L1c68ee.  if v2 == v4 then goto L1c68fa;
  #L1c68f2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c68f8.  goto L1c6900;
  #L1c68fa.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c6900.  v2:= 61I;
  #L1c6904.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c690a.  call temp:= `valueAt`(v4, v1) @signature `Lc/e/g;.valueAt:(I)Ljava/lang/Object;` @kind virtual;
  #L1c6910.  v2:= temp @kind object;
  #L1c6912.  if v2 == v4 then goto L1c691e;
  #L1c6916.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c691c.  goto L1c6924;
  #L1c691e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c6924.  v1:= v1 + 1;
  #L1c6928.  goto L1c68cc;
  #L1c692a.  v1:= 125I;
  #L1c692e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c6934.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c693a.  v0:= temp @kind object;
  #L1c693c.  return v0 @kind object;
}
procedure `java.lang.Object` `valueAt`(`c.e.g` v1 @kind this, `int` v2 ) @signature `Lc/e/g;.valueAt:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c6878.  v0:= v1.`c.e.g.g` @type ^`java.lang.Object`[] @kind object;
  #L1c687c.  v2:= v2 ^< 1;
  #L1c6880.  v2:= v2 + 1;
  #L1c6884.  v2:= v0[v2] @kind object;
  #L1c6888.  return v2 @kind object;
}
