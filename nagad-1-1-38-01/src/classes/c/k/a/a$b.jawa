record `c.k.a.a$b` @kind class @AccessFlag  extends `java.io.FilterOutputStream` @kind class {
  `java.io.OutputStream` `c.k.a.a$b.f` @AccessFlag PRIVATE_FINAL;
  `java.nio.ByteOrder` `c.k.a.a$b.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.k.a.a$b` v0 @kind this, `java.io.OutputStream` v1 @kind object, `java.nio.ByteOrder` v2 @kind object) @signature `Lc/k/a/a$b;.<init>:(Ljava/io/OutputStream;Ljava/nio/ByteOrder;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L20b52c.  call `<init>`(v0, v1) @signature `Ljava/io/FilterOutputStream;.<init>:(Ljava/io/OutputStream;)V` @kind direct;
  #L20b532.  v0.`c.k.a.a$b.f` @type ^`java.io.OutputStream` := v1 @kind object;
  #L20b536.  v0.`c.k.a.a$b.g` @type ^`java.nio.ByteOrder` := v2 @kind object;
  #L20b53a.  return @kind void;
}
procedure `void` `setByteOrder`(`c.k.a.a$b` v0 @kind this, `java.nio.ByteOrder` v1 @kind object) @signature `Lc/k/a/a$b;.setByteOrder:(Ljava/nio/ByteOrder;)V` @AccessFlag PUBLIC {
    temp;

  #L20b54c.  v0.`c.k.a.a$b.g` @type ^`java.nio.ByteOrder` := v1 @kind object;
  #L20b550.  return @kind void;
}
procedure `void` `write`(`c.k.a.a$b` v1 @kind this, `byte`[] v2 @kind object) @signature `Lc/k/a/a$b;.write:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20b564.  v0:= v1.`c.k.a.a$b.f` @type ^`java.io.OutputStream` @kind object;
  #L20b568.  call `write`(v0, v2) @signature `Ljava/io/OutputStream;.write:([B)V` @kind virtual;
  #L20b56e.  return @kind void;
}
procedure `void` `write`(`c.k.a.a$b` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lc/k/a/a$b;.write:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20b580.  v0:= v1.`c.k.a.a$b.f` @type ^`java.io.OutputStream` @kind object;
  #L20b584.  call `write`(v0, v2, v3, v4) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L20b58a.  return @kind void;
}
procedure `void` `writeByte`(`c.k.a.a$b` v1 @kind this, `int` v2 ) @signature `Lc/k/a/a$b;.writeByte:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20b59c.  v0:= v1.`c.k.a.a$b.f` @type ^`java.io.OutputStream` @kind object;
  #L20b5a0.  call `write`(v0, v2) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L20b5a6.  return @kind void;
}
procedure `void` `writeInt`(`c.k.a.a$b` v2 @kind this, `int` v3 ) @signature `Lc/k/a/a$b;.writeInt:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L20b5b8.  v0:= v2.`c.k.a.a$b.g` @type ^`java.nio.ByteOrder` @kind object;
  #L20b5bc.  v1:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L20b5c0.  if v0 != v1 then goto L20b60e;
  #L20b5c4.  v0:= v2.`c.k.a.a$b.f` @type ^`java.io.OutputStream` @kind object;
  #L20b5c8.  v1:= v3 ^>> 0;
  #L20b5cc.  v1:= v1 ^& 255;
  #L20b5d0.  call `write`(v0, v1) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L20b5d6.  v0:= v2.`c.k.a.a$b.f` @type ^`java.io.OutputStream` @kind object;
  #L20b5da.  v1:= v3 ^>> 8;
  #L20b5de.  v1:= v1 ^& 255;
  #L20b5e2.  call `write`(v0, v1) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L20b5e8.  v0:= v2.`c.k.a.a$b.f` @type ^`java.io.OutputStream` @kind object;
  #L20b5ec.  v1:= v3 ^>> 16;
  #L20b5f0.  v1:= v1 ^& 255;
  #L20b5f4.  call `write`(v0, v1) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L20b5fa.  v0:= v2.`c.k.a.a$b.f` @type ^`java.io.OutputStream` @kind object;
  #L20b5fe.  v3:= v3 ^>> 24;
  #L20b602.  v3:= v3 ^& 255;
  #L20b606.  call `write`(v0, v3) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L20b60c.  goto L20b65e;
  #L20b60e.  v1:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L20b612.  if v0 != v1 then goto L20b65e;
  #L20b616.  v0:= v2.`c.k.a.a$b.f` @type ^`java.io.OutputStream` @kind object;
  #L20b61a.  v1:= v3 ^>> 24;
  #L20b61e.  v1:= v1 ^& 255;
  #L20b622.  call `write`(v0, v1) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L20b628.  v0:= v2.`c.k.a.a$b.f` @type ^`java.io.OutputStream` @kind object;
  #L20b62c.  v1:= v3 ^>> 16;
  #L20b630.  v1:= v1 ^& 255;
  #L20b634.  call `write`(v0, v1) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L20b63a.  v0:= v2.`c.k.a.a$b.f` @type ^`java.io.OutputStream` @kind object;
  #L20b63e.  v1:= v3 ^>> 8;
  #L20b642.  v1:= v1 ^& 255;
  #L20b646.  call `write`(v0, v1) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L20b64c.  v0:= v2.`c.k.a.a$b.f` @type ^`java.io.OutputStream` @kind object;
  #L20b650.  v3:= v3 ^>> 0;
  #L20b654.  v3:= v3 ^& 255;
  #L20b658.  call `write`(v0, v3) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L20b65e.  return @kind void;
}
procedure `void` `writeShort`(`c.k.a.a$b` v2 @kind this, `short` v3 ) @signature `Lc/k/a/a$b;.writeShort:(S)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L20b670.  v0:= v2.`c.k.a.a$b.g` @type ^`java.nio.ByteOrder` @kind object;
  #L20b674.  v1:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L20b678.  if v0 != v1 then goto L20b6a2;
  #L20b67c.  v0:= v2.`c.k.a.a$b.f` @type ^`java.io.OutputStream` @kind object;
  #L20b680.  v1:= v3 ^>> 0;
  #L20b684.  v1:= v1 ^& 255;
  #L20b688.  call `write`(v0, v1) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L20b68e.  v0:= v2.`c.k.a.a$b.f` @type ^`java.io.OutputStream` @kind object;
  #L20b692.  v3:= v3 ^>> 8;
  #L20b696.  v3:= v3 ^& 255;
  #L20b69a.  call `write`(v0, v3) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L20b6a0.  goto L20b6ce;
  #L20b6a2.  v1:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L20b6a6.  if v0 != v1 then goto L20b6ce;
  #L20b6aa.  v0:= v2.`c.k.a.a$b.f` @type ^`java.io.OutputStream` @kind object;
  #L20b6ae.  v1:= v3 ^>> 8;
  #L20b6b2.  v1:= v1 ^& 255;
  #L20b6b6.  call `write`(v0, v1) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L20b6bc.  v0:= v2.`c.k.a.a$b.f` @type ^`java.io.OutputStream` @kind object;
  #L20b6c0.  v3:= v3 ^>> 0;
  #L20b6c4.  v3:= v3 ^& 255;
  #L20b6c8.  call `write`(v0, v3) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L20b6ce.  return @kind void;
}
procedure `void` `writeUnsignedInt`(`c.k.a.a$b` v0 @kind this, `long` v1 ) @signature `Lc/k/a/a$b;.writeUnsignedInt:(J)V` @AccessFlag PUBLIC {
    temp;

  #L20b6e0.  v2:= (`int`) v1 @kind l2i;
  #L20b6e2.  call `writeInt`(v0, v2) @signature `Lc/k/a/a$b;.writeInt:(I)V` @kind virtual;
  #L20b6e8.  return @kind void;
}
procedure `void` `writeUnsignedShort`(`c.k.a.a$b` v0 @kind this, `int` v1 ) @signature `Lc/k/a/a$b;.writeUnsignedShort:(I)V` @AccessFlag PUBLIC {
    temp;

  #L20b6fc.  v1:= (`short`) v1 @kind i2s;
  #L20b6fe.  call `writeShort`(v0, v1) @signature `Lc/k/a/a$b;.writeShort:(S)V` @kind virtual;
  #L20b704.  return @kind void;
}
