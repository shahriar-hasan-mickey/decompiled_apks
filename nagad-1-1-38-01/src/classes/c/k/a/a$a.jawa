record `c.k.a.a$a` @kind class @AccessFlag  extends `java.io.InputStream` @kind class, `java.io.DataInput` @kind interface {
  `java.io.DataInputStream` `c.k.a.a$a.f` @AccessFlag PRIVATE;
  `java.nio.ByteOrder` `c.k.a.a$a.g` @AccessFlag PRIVATE;
  `int` `c.k.a.a$a.h` @AccessFlag FINAL;
  `int` `c.k.a.a$a.i` @AccessFlag ;
}
global `java.nio.ByteOrder` `@@c.k.a.a$a.j` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.ByteOrder` `@@c.k.a.a$a.k` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lc/k/a/a$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L20b364.  v0:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L20b368.  `@@c.k.a.a$a.j` @type ^`java.nio.ByteOrder` := v0 @kind object;
  #L20b36c.  v0:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L20b370.  `@@c.k.a.a$a.k` @type ^`java.nio.ByteOrder` := v0 @kind object;
  #L20b374.  return @kind void;
}
procedure `void` `<init>`(`c.k.a.a$a` v1 @kind this, `java.io.InputStream` v2 @kind object) @signature `Lc/k/a/a$a;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L20b3ac.  call `<init>`(v1) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L20b3b2.  v0:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L20b3b6.  v1.`c.k.a.a$a.g` @type ^`java.nio.ByteOrder` := v0 @kind object;
  #L20b3ba.  v0:= new `java.io.DataInputStream`;
  #L20b3be.  call `<init>`(v0, v2) @signature `Ljava/io/DataInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L20b3c4.  v1.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` := v0 @kind object;
  #L20b3c8.  v2:= v1.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b3cc.  call temp:= `available`(v2) @signature `Ljava/io/DataInputStream;.available:()I` @kind virtual;
  #L20b3d2.  v2:= temp;
  #L20b3d4.  v1.`c.k.a.a$a.h` @type ^`int` := v2;
  #L20b3d8.  v2:= 0I;
  #L20b3da.  v1.`c.k.a.a$a.i` @type ^`int` := v2;
  #L20b3de.  v2:= v1.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b3e2.  v0:= v1.`c.k.a.a$a.h` @type ^`int`;
  #L20b3e6.  call `mark`(v2, v0) @signature `Ljava/io/DataInputStream;.mark:(I)V` @kind virtual;
  #L20b3ec.  return @kind void;
}
procedure `void` `<init>`(`c.k.a.a$a` v1 @kind this, `byte`[] v2 @kind object) @signature `Lc/k/a/a$a;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L20b388.  v0:= new `java.io.ByteArrayInputStream`;
  #L20b38c.  call `<init>`(v0, v2) @signature `Ljava/io/ByteArrayInputStream;.<init>:([B)V` @kind direct;
  #L20b392.  call `<init>`(v1, v0) @signature `Lc/k/a/a$a;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L20b398.  return @kind void;
}
procedure `int` `available`(`c.k.a.a$a` v1 @kind this) @signature `Lc/k/a/a$a;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20adf8.  v0:= v1.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20adfc.  call temp:= `available`(v0) @signature `Ljava/io/DataInputStream;.available:()I` @kind virtual;
  #L20ae02.  v0:= temp;
  #L20ae04.  return v0;
}
procedure `int` `peek`(`c.k.a.a$a` v1 @kind this) @signature `Lc/k/a/a$a;.peek:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20ae18.  v0:= v1.`c.k.a.a$a.i` @type ^`int`;
  #L20ae1c.  return v0;
}
procedure `int` `read`(`c.k.a.a$a` v1 @kind this) @signature `Lc/k/a/a$a;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20ae30.  v0:= v1.`c.k.a.a$a.i` @type ^`int`;
  #L20ae34.  v0:= v0 + 1;
  #L20ae38.  v1.`c.k.a.a$a.i` @type ^`int` := v0;
  #L20ae3c.  v0:= v1.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20ae40.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20ae46.  v0:= temp;
  #L20ae48.  return v0;
}
procedure `int` `read`(`c.k.a.a$a` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lc/k/a/a$a;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20ae5c.  v0:= v1.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20ae60.  call temp:= `read`(v0, v2, v3, v4) @signature `Ljava/io/DataInputStream;.read:([BII)I` @kind virtual;
  #L20ae66.  v2:= temp;
  #L20ae68.  v3:= v1.`c.k.a.a$a.i` @type ^`int`;
  #L20ae6c.  v3:= v3 + v2 @kind int;
  #L20ae6e.  v1.`c.k.a.a$a.i` @type ^`int` := v3;
  #L20ae72.  return v2;
}
procedure `boolean` `readBoolean`(`c.k.a.a$a` v1 @kind this) @signature `Lc/k/a/a$a;.readBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20ad04.  v0:= v1.`c.k.a.a$a.i` @type ^`int`;
  #L20ad08.  v0:= v0 + 1;
  #L20ad0c.  v1.`c.k.a.a$a.i` @type ^`int` := v0;
  #L20ad10.  v0:= v1.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20ad14.  call temp:= `readBoolean`(v0) @signature `Ljava/io/DataInputStream;.readBoolean:()Z` @kind virtual;
  #L20ad1a.  v0:= temp;
  #L20ad1c.  return v0;
}
procedure `byte` `readByte`(`c.k.a.a$a` v2 @kind this) @signature `Lc/k/a/a$a;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L20ad30.  v0:= v2.`c.k.a.a$a.i` @type ^`int`;
  #L20ad34.  v0:= v0 + 1;
  #L20ad38.  v2.`c.k.a.a$a.i` @type ^`int` := v0;
  #L20ad3c.  v0:= v2.`c.k.a.a$a.i` @type ^`int`;
  #L20ad40.  v1:= v2.`c.k.a.a$a.h` @type ^`int`;
  #L20ad44.  if v0 > v1 then goto L20ad68;
  #L20ad48.  v0:= v2.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20ad4c.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20ad52.  v0:= temp;
  #L20ad54.  if v0 < 0 then goto L20ad5c;
  #L20ad58.  v0:= (`byte`) v0 @kind i2b;
  #L20ad5a.  return v0;
  #L20ad5c.  v0:= new `java.io.EOFException`;
  #L20ad60.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L20ad66.  throw v0;
  #L20ad68.  v0:= new `java.io.EOFException`;
  #L20ad6c.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L20ad72.  throw v0;
}
procedure `char` `readChar`(`c.k.a.a$a` v1 @kind this) @signature `Lc/k/a/a$a;.readChar:()C` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20ad84.  v0:= v1.`c.k.a.a$a.i` @type ^`int`;
  #L20ad88.  v0:= v0 + 2;
  #L20ad8c.  v1.`c.k.a.a$a.i` @type ^`int` := v0;
  #L20ad90.  v0:= v1.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20ad94.  call temp:= `readChar`(v0) @signature `Ljava/io/DataInputStream;.readChar:()C` @kind virtual;
  #L20ad9a.  v0:= temp;
  #L20ad9c.  return v0;
}
procedure `double` `readDouble`(`c.k.a.a$a` v2 @kind this) @signature `Lc/k/a/a$a;.readDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L20adb0.  call temp:= `readLong`(v2) @signature `Lc/k/a/a$a;.readLong:()J` @kind virtual;
  #L20adb6.  v0:= temp @kind wide;
  #L20adb8.  call temp:= `longBitsToDouble`(v0) @signature `Ljava/lang/Double;.longBitsToDouble:(J)D` @kind static;
  #L20adbe.  v0:= temp @kind wide;
  #L20adc0.  return v0 @kind wide;
}
procedure `float` `readFloat`(`c.k.a.a$a` v1 @kind this) @signature `Lc/k/a/a$a;.readFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20add4.  call temp:= `readInt`(v1) @signature `Lc/k/a/a$a;.readInt:()I` @kind virtual;
  #L20adda.  v0:= temp;
  #L20addc.  call temp:= `intBitsToFloat`(v0) @signature `Ljava/lang/Float;.intBitsToFloat:(I)F` @kind static;
  #L20ade2.  v0:= temp;
  #L20ade4.  return v0;
}
procedure `void` `readFully`(`c.k.a.a$a` v3 @kind this, `byte`[] v4 @kind object) @signature `Lc/k/a/a$a;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L20b400.  v0:= v3.`c.k.a.a$a.i` @type ^`int`;
  #L20b404.  v1:= length @variable v4;
  #L20b406.  v0:= v0 + v1 @kind int;
  #L20b408.  v3.`c.k.a.a$a.i` @type ^`int` := v0;
  #L20b40c.  v0:= v3.`c.k.a.a$a.i` @type ^`int`;
  #L20b410.  v1:= v3.`c.k.a.a$a.h` @type ^`int`;
  #L20b414.  if v0 > v1 then goto L20b440;
  #L20b418.  v0:= v3.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b41c.  v1:= 0I;
  #L20b41e.  v2:= length @variable v4;
  #L20b420.  call temp:= `read`(v0, v4, v1, v2) @signature `Ljava/io/DataInputStream;.read:([BII)I` @kind virtual;
  #L20b426.  v0:= temp;
  #L20b428.  v4:= length @variable v4;
  #L20b42a.  if v0 != v4 then goto L20b430;
  #L20b42e.  return @kind void;
  #L20b430.  v4:= new `java.io.IOException`;
  #L20b434.  v0:= "Couldn't read up to the length of buffer" @kind object;
  #L20b438.  call `<init>`(v4, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20b43e.  throw v4;
  #L20b440.  v4:= new `java.io.EOFException`;
  #L20b444.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L20b44a.  throw v4;
}
procedure `void` `readFully`(`c.k.a.a$a` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lc/k/a/a$a;.readFully:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L20b45c.  v0:= v2.`c.k.a.a$a.i` @type ^`int`;
  #L20b460.  v0:= v0 + v5 @kind int;
  #L20b462.  v2.`c.k.a.a$a.i` @type ^`int` := v0;
  #L20b466.  v0:= v2.`c.k.a.a$a.i` @type ^`int`;
  #L20b46a.  v1:= v2.`c.k.a.a$a.h` @type ^`int`;
  #L20b46e.  if v0 > v1 then goto L20b494;
  #L20b472.  v0:= v2.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b476.  call temp:= `read`(v0, v3, v4, v5) @signature `Ljava/io/DataInputStream;.read:([BII)I` @kind virtual;
  #L20b47c.  v3:= temp;
  #L20b47e.  if v3 != v5 then goto L20b484;
  #L20b482.  return @kind void;
  #L20b484.  v3:= new `java.io.IOException`;
  #L20b488.  v4:= "Couldn't read up to the length of buffer" @kind object;
  #L20b48c.  call `<init>`(v3, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20b492.  throw v3;
  #L20b494.  v3:= new `java.io.EOFException`;
  #L20b498.  call `<init>`(v3) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L20b49e.  throw v3;
}
procedure `int` `readInt`(`c.k.a.a$a` v6 @kind this) @signature `Lc/k/a/a$a;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L20ae84.  v0:= v6.`c.k.a.a$a.i` @type ^`int`;
  #L20ae88.  v0:= v0 + 4;
  #L20ae8c.  v6.`c.k.a.a$a.i` @type ^`int` := v0;
  #L20ae90.  v0:= v6.`c.k.a.a$a.i` @type ^`int`;
  #L20ae94.  v1:= v6.`c.k.a.a$a.h` @type ^`int`;
  #L20ae98.  if v0 > v1 then goto L20af52;
  #L20ae9c.  v0:= v6.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20aea0.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20aea6.  v0:= temp;
  #L20aea8.  v1:= v6.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20aeac.  call temp:= `read`(v1) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20aeb2.  v1:= temp;
  #L20aeb4.  v2:= v6.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20aeb8.  call temp:= `read`(v2) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20aebe.  v2:= temp;
  #L20aec0.  v3:= v6.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20aec4.  call temp:= `read`(v3) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20aeca.  v3:= temp;
  #L20aecc.  v4:= v0 ^| v1 @kind int;
  #L20aed0.  v4:= v4 ^| v2 @kind int;
  #L20aed2.  v4:= v4 ^| v3 @kind int;
  #L20aed4.  if v4 < 0 then goto L20af46;
  #L20aed8.  v4:= v6.`c.k.a.a$a.g` @type ^`java.nio.ByteOrder` @kind object;
  #L20aedc.  v5:= `@@c.k.a.a$a.j` @type ^`java.nio.ByteOrder` @kind object;
  #L20aee0.  if v4 != v5 then goto L20aef8;
  #L20aee4.  v3:= v3 ^< 24;
  #L20aee8.  v2:= v2 ^< 16;
  #L20aeec.  v3:= v3 + v2 @kind int;
  #L20aeee.  v1:= v1 ^< 8;
  #L20aef2.  v3:= v3 + v1 @kind int;
  #L20aef4.  v3:= v3 + v0 @kind int;
  #L20aef6.  return v3;
  #L20aef8.  v5:= `@@c.k.a.a$a.k` @type ^`java.nio.ByteOrder` @kind object;
  #L20aefc.  if v4 != v5 then goto L20af14;
  #L20af00.  v0:= v0 ^< 24;
  #L20af04.  v1:= v1 ^< 16;
  #L20af08.  v0:= v0 + v1 @kind int;
  #L20af0a.  v1:= v2 ^< 8;
  #L20af0e.  v0:= v0 + v1 @kind int;
  #L20af10.  v0:= v0 + v3 @kind int;
  #L20af12.  return v0;
  #L20af14.  v0:= new `java.io.IOException`;
  #L20af18.  v1:= new `java.lang.StringBuilder`;
  #L20af1c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L20af22.  v2:= "Invalid byte order: " @kind object;
  #L20af26.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20af2c.  v2:= v6.`c.k.a.a$a.g` @type ^`java.nio.ByteOrder` @kind object;
  #L20af30.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20af36.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L20af3c.  v1:= temp @kind object;
  #L20af3e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20af44.  throw v0;
  #L20af46.  v0:= new `java.io.EOFException`;
  #L20af4a.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L20af50.  throw v0;
  #L20af52.  v0:= new `java.io.EOFException`;
  #L20af56.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L20af5c.  throw v0;
}
procedure `java.lang.String` `readLine`(`c.k.a.a$a` v2 @kind this) @signature `Lc/k/a/a$a;.readLine:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L20b09c.  v0:= "ExifInterface" @kind object;
  #L20b0a0.  v1:= "Currently unsupported" @kind object;
  #L20b0a4.  call temp:= `d`(v0, v1) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L20b0aa.  v0:= 0I;
  #L20b0ac.  return v0 @kind object;
}
procedure `long` `readLong`(`c.k.a.a$a` v19 @kind this) @signature `Lc/k/a/a$a;.readLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L20b0ec.  v0:= v19 @kind object;
  #L20b0f0.  v1:= v0.`c.k.a.a$a.i` @type ^`int`;
  #L20b0f4.  v2:= 8I;
  #L20b0f8.  v1:= v1 + v2 @kind int;
  #L20b0fa.  v0.`c.k.a.a$a.i` @type ^`int` := v1;
  #L20b0fe.  v1:= v0.`c.k.a.a$a.i` @type ^`int`;
  #L20b102.  v3:= v0.`c.k.a.a$a.h` @type ^`int`;
  #L20b106.  if v1 > v3 then goto L20b262;
  #L20b10a.  v1:= v0.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b10e.  call temp:= `read`(v1) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20b114.  v1:= temp;
  #L20b116.  v3:= v0.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b11a.  call temp:= `read`(v3) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20b120.  v3:= temp;
  #L20b122.  v4:= v0.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b126.  call temp:= `read`(v4) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20b12c.  v4:= temp;
  #L20b12e.  v5:= v0.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b132.  call temp:= `read`(v5) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20b138.  v5:= temp;
  #L20b13a.  v6:= v0.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b13e.  call temp:= `read`(v6) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20b144.  v6:= temp;
  #L20b146.  v7:= v0.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b14a.  call temp:= `read`(v7) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20b150.  v7:= temp;
  #L20b152.  v8:= v0.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b156.  call temp:= `read`(v8) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20b15c.  v8:= temp;
  #L20b15e.  v9:= v0.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b162.  call temp:= `read`(v9) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20b168.  v9:= temp;
  #L20b16a.  v10:= v1 ^| v3 @kind int;
  #L20b16e.  v10:= v10 ^| v4 @kind int;
  #L20b170.  v10:= v10 ^| v5 @kind int;
  #L20b172.  v10:= v10 ^| v6 @kind int;
  #L20b174.  v10:= v10 ^| v7 @kind int;
  #L20b176.  v10:= v10 ^| v8 @kind int;
  #L20b178.  v10:= v10 ^| v9 @kind int;
  #L20b17a.  if v10 < 0 then goto L20b256;
  #L20b17e.  v10:= v0.`c.k.a.a$a.g` @type ^`java.nio.ByteOrder` @kind object;
  #L20b182.  v11:= `@@c.k.a.a$a.j` @type ^`java.nio.ByteOrder` @kind object;
  #L20b186.  v12:= 16I;
  #L20b18a.  v13:= 24I;
  #L20b18e.  v14:= 32I;
  #L20b192.  v15:= 40I;
  #L20b196.  v16:= 48I;
  #L20b19a.  v17:= 56I;
  #L20b19e.  if v10 != v11 then goto L20b1e0;
  #L20b1a2.  v9:= (`long`) v9 @kind i2l;
  #L20b1a4.  v9:= v9 ^< v17 @kind long;
  #L20b1a8.  v18:= v3;
  #L20b1ac.  v2:= (`long`) v8 @kind i2l;
  #L20b1ae.  v2:= v2 ^< v16 @kind long;
  #L20b1b2.  v9:= v9 + v2 @kind long;
  #L20b1b4.  v2:= (`long`) v7 @kind i2l;
  #L20b1b6.  v2:= v2 ^< v15 @kind long;
  #L20b1b8.  v9:= v9 + v2 @kind long;
  #L20b1ba.  v2:= (`long`) v6 @kind i2l;
  #L20b1bc.  v2:= v2 ^< v14 @kind long;
  #L20b1be.  v9:= v9 + v2 @kind long;
  #L20b1c0.  v2:= (`long`) v5 @kind i2l;
  #L20b1c2.  v2:= v2 ^< v13 @kind long;
  #L20b1c4.  v9:= v9 + v2 @kind long;
  #L20b1c6.  v2:= (`long`) v4 @kind i2l;
  #L20b1c8.  v2:= v2 ^< v12 @kind long;
  #L20b1ca.  v9:= v9 + v2 @kind long;
  #L20b1cc.  v2:= v18;
  #L20b1d0.  v2:= (`long`) v2 @kind i2l;
  #L20b1d2.  v4:= 8I;
  #L20b1d6.  v2:= v2 ^< v4 @kind long;
  #L20b1d8.  v9:= v9 + v2 @kind long;
  #L20b1da.  v1:= (`long`) v1 @kind i2l;
  #L20b1dc.  v9:= v9 + v1 @kind long;
  #L20b1de.  return v9 @kind wide;
  #L20b1e0.  v2:= v3;
  #L20b1e2.  v3:= `@@c.k.a.a$a.k` @type ^`java.nio.ByteOrder` @kind object;
  #L20b1e6.  if v10 != v3 then goto L20b224;
  #L20b1ea.  v11:= (`long`) v1 @kind i2l;
  #L20b1ec.  v11:= v11 ^< v17 @kind long;
  #L20b1f0.  v1:= (`long`) v2 @kind i2l;
  #L20b1f2.  v1:= v1 ^< v16 @kind long;
  #L20b1f6.  v11:= v11 + v1 @kind long;
  #L20b1f8.  v1:= (`long`) v4 @kind i2l;
  #L20b1fa.  v1:= v1 ^< v15 @kind long;
  #L20b1fc.  v11:= v11 + v1 @kind long;
  #L20b1fe.  v1:= (`long`) v5 @kind i2l;
  #L20b200.  v1:= v1 ^< v14 @kind long;
  #L20b202.  v11:= v11 + v1 @kind long;
  #L20b204.  v1:= (`long`) v6 @kind i2l;
  #L20b206.  v1:= v1 ^< v13 @kind long;
  #L20b208.  v11:= v11 + v1 @kind long;
  #L20b20a.  v1:= (`long`) v7 @kind i2l;
  #L20b20c.  v4:= 16I;
  #L20b210.  v1:= v1 ^< v4 @kind long;
  #L20b212.  v11:= v11 + v1 @kind long;
  #L20b214.  v1:= (`long`) v8 @kind i2l;
  #L20b216.  v3:= 8I;
  #L20b21a.  v1:= v1 ^< v3 @kind long;
  #L20b21c.  v11:= v11 + v1 @kind long;
  #L20b21e.  v1:= (`long`) v9 @kind i2l;
  #L20b220.  v11:= v11 + v1 @kind long;
  #L20b222.  return v11 @kind wide;
  #L20b224.  v1:= new `java.io.IOException`;
  #L20b228.  v2:= new `java.lang.StringBuilder`;
  #L20b22c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L20b232.  v3:= "Invalid byte order: " @kind object;
  #L20b236.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20b23c.  v3:= v0.`c.k.a.a$a.g` @type ^`java.nio.ByteOrder` @kind object;
  #L20b240.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20b246.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L20b24c.  v2:= temp @kind object;
  #L20b24e.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20b254.  throw v1;
  #L20b256.  v1:= new `java.io.EOFException`;
  #L20b25a.  call `<init>`(v1) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L20b260.  throw v1;
  #L20b262.  v1:= new `java.io.EOFException`;
  #L20b266.  call `<init>`(v1) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L20b26c.  throw v1;
}
procedure `short` `readShort`(`c.k.a.a$a` v4 @kind this) @signature `Lc/k/a/a$a;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L20b2a8.  v0:= v4.`c.k.a.a$a.i` @type ^`int`;
  #L20b2ac.  v0:= v0 + 2;
  #L20b2b0.  v4.`c.k.a.a$a.i` @type ^`int` := v0;
  #L20b2b4.  v0:= v4.`c.k.a.a$a.i` @type ^`int`;
  #L20b2b8.  v1:= v4.`c.k.a.a$a.h` @type ^`int`;
  #L20b2bc.  if v0 > v1 then goto L20b346;
  #L20b2c0.  v0:= v4.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b2c4.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20b2ca.  v0:= temp;
  #L20b2cc.  v1:= v4.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b2d0.  call temp:= `read`(v1) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20b2d6.  v1:= temp;
  #L20b2d8.  v2:= v0 ^| v1 @kind int;
  #L20b2dc.  if v2 < 0 then goto L20b33a;
  #L20b2e0.  v2:= v4.`c.k.a.a$a.g` @type ^`java.nio.ByteOrder` @kind object;
  #L20b2e4.  v3:= `@@c.k.a.a$a.j` @type ^`java.nio.ByteOrder` @kind object;
  #L20b2e8.  if v2 != v3 then goto L20b2f6;
  #L20b2ec.  v1:= v1 ^< 8;
  #L20b2f0.  v1:= v1 + v0 @kind int;
  #L20b2f2.  v0:= (`short`) v1 @kind i2s;
  #L20b2f4.  return v0;
  #L20b2f6.  v3:= `@@c.k.a.a$a.k` @type ^`java.nio.ByteOrder` @kind object;
  #L20b2fa.  if v2 != v3 then goto L20b308;
  #L20b2fe.  v0:= v0 ^< 8;
  #L20b302.  v0:= v0 + v1 @kind int;
  #L20b304.  v0:= (`short`) v0 @kind i2s;
  #L20b306.  return v0;
  #L20b308.  v0:= new `java.io.IOException`;
  #L20b30c.  v1:= new `java.lang.StringBuilder`;
  #L20b310.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L20b316.  v2:= "Invalid byte order: " @kind object;
  #L20b31a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20b320.  v2:= v4.`c.k.a.a$a.g` @type ^`java.nio.ByteOrder` @kind object;
  #L20b324.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20b32a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L20b330.  v1:= temp @kind object;
  #L20b332.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20b338.  throw v0;
  #L20b33a.  v0:= new `java.io.EOFException`;
  #L20b33e.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L20b344.  throw v0;
  #L20b346.  v0:= new `java.io.EOFException`;
  #L20b34a.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L20b350.  throw v0;
}
procedure `java.lang.String` `readUTF`(`c.k.a.a$a` v1 @kind this) @signature `Lc/k/a/a$a;.readUTF:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20b0c0.  v0:= v1.`c.k.a.a$a.i` @type ^`int`;
  #L20b0c4.  v0:= v0 + 2;
  #L20b0c8.  v1.`c.k.a.a$a.i` @type ^`int` := v0;
  #L20b0cc.  v0:= v1.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b0d0.  call temp:= `readUTF`(v0) @signature `Ljava/io/DataInputStream;.readUTF:()Ljava/lang/String;` @kind virtual;
  #L20b0d6.  v0:= temp @kind object;
  #L20b0d8.  return v0 @kind object;
}
procedure `int` `readUnsignedByte`(`c.k.a.a$a` v1 @kind this) @signature `Lc/k/a/a$a;.readUnsignedByte:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L20af70.  v0:= v1.`c.k.a.a$a.i` @type ^`int`;
  #L20af74.  v0:= v0 + 1;
  #L20af78.  v1.`c.k.a.a$a.i` @type ^`int` := v0;
  #L20af7c.  v0:= v1.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20af80.  call temp:= `readUnsignedByte`(v0) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L20af86.  v0:= temp;
  #L20af88.  return v0;
}
procedure `long` `readUnsignedInt`(`c.k.a.a$a` v4 @kind this) @signature `Lc/k/a/a$a;.readUnsignedInt:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L20b280.  call temp:= `readInt`(v4) @signature `Lc/k/a/a$a;.readInt:()I` @kind virtual;
  #L20b286.  v0:= temp;
  #L20b288.  v0:= (`long`) v0 @kind i2l;
  #L20b28a.  v2:= 4294967295L;
  #L20b294.  v0:= v0 ^& v2 @kind long;
  #L20b296.  return v0 @kind wide;
}
procedure `int` `readUnsignedShort`(`c.k.a.a$a` v4 @kind this) @signature `Lc/k/a/a$a;.readUnsignedShort:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L20af9c.  v0:= v4.`c.k.a.a$a.i` @type ^`int`;
  #L20afa0.  v0:= v0 + 2;
  #L20afa4.  v4.`c.k.a.a$a.i` @type ^`int` := v0;
  #L20afa8.  v0:= v4.`c.k.a.a$a.i` @type ^`int`;
  #L20afac.  v1:= v4.`c.k.a.a$a.h` @type ^`int`;
  #L20afb0.  if v0 > v1 then goto L20b036;
  #L20afb4.  v0:= v4.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20afb8.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20afbe.  v0:= temp;
  #L20afc0.  v1:= v4.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20afc4.  call temp:= `read`(v1) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L20afca.  v1:= temp;
  #L20afcc.  v2:= v0 ^| v1 @kind int;
  #L20afd0.  if v2 < 0 then goto L20b02a;
  #L20afd4.  v2:= v4.`c.k.a.a$a.g` @type ^`java.nio.ByteOrder` @kind object;
  #L20afd8.  v3:= `@@c.k.a.a$a.j` @type ^`java.nio.ByteOrder` @kind object;
  #L20afdc.  if v2 != v3 then goto L20afe8;
  #L20afe0.  v1:= v1 ^< 8;
  #L20afe4.  v1:= v1 + v0 @kind int;
  #L20afe6.  return v1;
  #L20afe8.  v3:= `@@c.k.a.a$a.k` @type ^`java.nio.ByteOrder` @kind object;
  #L20afec.  if v2 != v3 then goto L20aff8;
  #L20aff0.  v0:= v0 ^< 8;
  #L20aff4.  v0:= v0 + v1 @kind int;
  #L20aff6.  return v0;
  #L20aff8.  v0:= new `java.io.IOException`;
  #L20affc.  v1:= new `java.lang.StringBuilder`;
  #L20b000.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L20b006.  v2:= "Invalid byte order: " @kind object;
  #L20b00a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20b010.  v2:= v4.`c.k.a.a$a.g` @type ^`java.nio.ByteOrder` @kind object;
  #L20b014.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L20b01a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L20b020.  v1:= temp @kind object;
  #L20b022.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20b028.  throw v0;
  #L20b02a.  v0:= new `java.io.EOFException`;
  #L20b02e.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L20b034.  throw v0;
  #L20b036.  v0:= new `java.io.EOFException`;
  #L20b03a.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L20b040.  throw v0;
}
procedure `void` `seek`(`c.k.a.a$a` v4 @kind this, `long` v5 ) @signature `Lc/k/a/a$a;.seek:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L20b4b0.  v0:= v4.`c.k.a.a$a.i` @type ^`int`;
  #L20b4b4.  v1:= (`long`) v0 @kind i2l;
  #L20b4b6.  v3:= lcmp(v1, v5);
  #L20b4ba.  if v3 <= 0 then goto L20b4de;
  #L20b4be.  v0:= 0I;
  #L20b4c0.  v4.`c.k.a.a$a.i` @type ^`int` := v0;
  #L20b4c4.  v0:= v4.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b4c8.  call `reset`(v0) @signature `Ljava/io/DataInputStream;.reset:()V` @kind virtual;
  #L20b4ce.  v0:= v4.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b4d2.  v1:= v4.`c.k.a.a$a.h` @type ^`int`;
  #L20b4d6.  call `mark`(v0, v1) @signature `Ljava/io/DataInputStream;.mark:(I)V` @kind virtual;
  #L20b4dc.  goto L20b4e2;
  #L20b4de.  v0:= (`long`) v0 @kind i2l;
  #L20b4e0.  v5:= v5 - v0 @kind long;
  #L20b4e2.  v6:= (`int`) v5 @kind l2i;
  #L20b4e4.  call temp:= `skipBytes`(v4, v6) @signature `Lc/k/a/a$a;.skipBytes:(I)I` @kind virtual;
  #L20b4ea.  v5:= temp;
  #L20b4ec.  if v5 != v6 then goto L20b4f2;
  #L20b4f0.  return @kind void;
  #L20b4f2.  v5:= new `java.io.IOException`;
  #L20b4f6.  v6:= "Couldn't seek up to the byteCount" @kind object;
  #L20b4fa.  call `<init>`(v5, v6) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L20b500.  throw v5;
}
procedure `void` `setByteOrder`(`c.k.a.a$a` v0 @kind this, `java.nio.ByteOrder` v1 @kind object) @signature `Lc/k/a/a$a;.setByteOrder:(Ljava/nio/ByteOrder;)V` @AccessFlag PUBLIC {
    temp;

  #L20b514.  v0.`c.k.a.a$a.g` @type ^`java.nio.ByteOrder` := v1 @kind object;
  #L20b518.  return @kind void;
}
procedure `int` `skipBytes`(`c.k.a.a$a` v3 @kind this, `int` v4 ) @signature `Lc/k/a/a$a;.skipBytes:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L20b054.  v0:= v3.`c.k.a.a$a.h` @type ^`int`;
  #L20b058.  v1:= v3.`c.k.a.a$a.i` @type ^`int`;
  #L20b05c.  v0:= v0 - v1 @kind int;
  #L20b05e.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L20b064.  v4:= temp;
  #L20b066.  v0:= 0I;
  #L20b068.  if v0 >= v4 then goto L20b080;
  #L20b06c.  v1:= v3.`c.k.a.a$a.f` @type ^`java.io.DataInputStream` @kind object;
  #L20b070.  v2:= v4 - v0 @kind int;
  #L20b074.  call temp:= `skipBytes`(v1, v2) @signature `Ljava/io/DataInputStream;.skipBytes:(I)I` @kind virtual;
  #L20b07a.  v1:= temp;
  #L20b07c.  v0:= v0 + v1 @kind int;
  #L20b07e.  goto L20b068;
  #L20b080.  v4:= v3.`c.k.a.a$a.i` @type ^`int`;
  #L20b084.  v4:= v4 + v0 @kind int;
  #L20b086.  v3.`c.k.a.a$a.i` @type ^`int` := v4;
  #L20b08a.  return v0;
}
