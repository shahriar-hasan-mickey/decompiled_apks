record `c.o.b.c` @kind class @AccessFlag ABSTRACT {
  `c.o.b.c$h` `c.o.b.c.f` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.FutureTask` `c.o.b.c.g` @AccessFlag PRIVATE_FINAL;
  `c.o.b.c$g` `c.o.b.c.h` @AccessFlag PRIVATE_VOLATILE;
  `java.util.concurrent.atomic.AtomicBoolean` `c.o.b.c.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `c.o.b.c.j` @AccessFlag FINAL;
}
global `java.util.concurrent.ThreadFactory` `@@c.o.b.c.k` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.BlockingQueue` `@@c.o.b.c.l` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.Executor` `@@c.o.b.c.m` @AccessFlag PUBLIC_STATIC_FINAL;
global `c.o.b.c$f` `@@c.o.b.c.n` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lc/o/b/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L227488.  v0:= new `c.o.b.c$a`;
  #L22748c.  call `<init>`(v0) @signature `Lc/o/b/c$a;.<init>:()V` @kind direct;
  #L227492.  `@@c.o.b.c.k` @type ^`java.util.concurrent.ThreadFactory` := v0 @kind object;
  #L227496.  v0:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L22749a.  v1:= 10I;
  #L22749e.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:(I)V` @kind direct;
  #L2274a4.  `@@c.o.b.c.l` @type ^`java.util.concurrent.BlockingQueue` := v0 @kind object;
  #L2274a8.  v0:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L2274ac.  v7:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2274b0.  v8:= `@@c.o.b.c.l` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L2274b4.  v9:= `@@c.o.b.c.k` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L2274b8.  v3:= 5I;
  #L2274ba.  v4:= 128I;
  #L2274be.  v5:= 1L;
  #L2274c2.  v2:= v0 @kind object;
  #L2274c4.  call `<init>`(v2, v3, v4, v5, v7, v8, v9) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L2274ca.  `@@c.o.b.c.m` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L2274ce.  return @kind void;
}
procedure `void` `<init>`(`c.o.b.c` v2 @kind this) @signature `Lc/o/b/c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2274e0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2274e6.  v0:= `@@c.o.b.c$g.f` @type ^`c.o.b.c$g` @kind object;
  #L2274ea.  v2.`c.o.b.c.h` @type ^`c.o.b.c$g` := v0 @kind object;
  #L2274ee.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L2274f2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L2274f8.  v2.`c.o.b.c.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L2274fc.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L227500.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L227506.  v2.`c.o.b.c.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L22750a.  v0:= new `c.o.b.c$b`;
  #L22750e.  call `<init>`(v0, v2) @signature `Lc/o/b/c$b;.<init>:(Lc/o/b/c;)V` @kind direct;
  #L227514.  v2.`c.o.b.c.f` @type ^`c.o.b.c$h` := v0 @kind object;
  #L227518.  v0:= new `c.o.b.c$c`;
  #L22751c.  v1:= v2.`c.o.b.c.f` @type ^`c.o.b.c$h` @kind object;
  #L227520.  call `<init>`(v0, v2, v1) @signature `Lc/o/b/c$c;.<init>:(Lc/o/b/c;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L227526.  v2.`c.o.b.c.g` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L22752a.  return @kind void;
}
procedure `android.os.Handler` `a`() @signature `Lc/o/b/c;.a:()Landroid/os/Handler;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L227324.  v0:= constclass @type ^`c.o.b.c` @kind object;
  #L227328.  @monitorenter v0
  #L22732a.  v1:= `@@c.o.b.c.n` @type ^`c.o.b.c$f` @kind object;
  #L22732e.  if v1 != 0 then goto L227340;
  #L227332.  v1:= new `c.o.b.c$f`;
  #L227336.  call `<init>`(v1) @signature `Lc/o/b/c$f;.<init>:()V` @kind direct;
  #L22733c.  `@@c.o.b.c.n` @type ^`c.o.b.c$f` := v1 @kind object;
  #L227340.  v1:= `@@c.o.b.c.n` @type ^`c.o.b.c$f` @kind object;
  #L227344.  @monitorexit v0
  #L227346.  return v1 @kind object;
  #L227348.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L22734a.  @monitorexit v0
  #L22734c.  throw v1;
  catch `java.lang.Throwable` @[L22732a..L22734c] goto L227348;
}
procedure `void` `a`(`c.o.b.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/o/b/c;.a:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L22753c.  call temp:= `isCancelled`(v1) @signature `Lc/o/b/c;.isCancelled:()Z` @kind virtual;
  #L227542.  v0:= temp;
  #L227544.  if v0 == 0 then goto L227550;
  #L227548.  call `onCancelled`(v1, v2) @signature `Lc/o/b/c;.onCancelled:(Ljava/lang/Object;)V` @kind virtual;
  #L22754e.  goto L227556;
  #L227550.  call `onPostExecute`(v1, v2) @signature `Lc/o/b/c;.onPostExecute:(Ljava/lang/Object;)V` @kind virtual;
  #L227556.  v2:= `@@c.o.b.c$g.h` @type ^`c.o.b.c$g` @kind object;
  #L22755a.  v1.`c.o.b.c.h` @type ^`c.o.b.c$g` := v2 @kind object;
  #L22755e.  return @kind void;
}
procedure `java.lang.Object` `b`(`c.o.b.c` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lc/o/b/c;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L227448.  call temp:= `a`() @signature `Lc/o/b/c;.a:()Landroid/os/Handler;` @kind static;
  #L22744e.  v0:= temp @kind object;
  #L227450.  v1:= new `c.o.b.c$e`;
  #L227454.  v2:= 1I;
  #L227456.  v3:= new `java.lang.Object`[v2];
  #L22745a.  v4:= 0I;
  #L22745c.  v3[v4]:= v6 @kind object;
  #L227460.  call `<init>`(v1, v5, v3) @signature `Lc/o/b/c$e;.<init>:(Lc/o/b/c;[Ljava/lang/Object;)V` @kind direct;
  #L227466.  call temp:= `obtainMessage`(v0, v2, v1) @signature `Landroid/os/Handler;.obtainMessage:(ILjava/lang/Object;)Landroid/os/Message;` @kind virtual;
  #L22746c.  v0:= temp @kind object;
  #L22746e.  call `sendToTarget`(v0) @signature `Landroid/os/Message;.sendToTarget:()V` @kind virtual;
  #L227474.  return v6 @kind object;
}
procedure `void` `c`(`c.o.b.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lc/o/b/c;.c:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L2275d8.  v0:= v1.`c.o.b.c.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L2275dc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L2275e2.  v0:= temp;
  #L2275e4.  if v0 != 0 then goto L2275ee;
  #L2275e8.  call temp:= `b`(v1, v2) @signature `Lc/o/b/c;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2275ee.  return @kind void;
}
procedure `boolean` `cancel`(`c.o.b.c` v2 @kind this, `boolean` v3 ) @signature `Lc/o/b/c;.cancel:(Z)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2273fc.  v0:= v2.`c.o.b.c.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L227400.  v1:= 1I;
  #L227402.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L227408.  v0:= v2.`c.o.b.c.g` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L22740c.  call temp:= `cancel`(v0, v3) @signature `Ljava/util/concurrent/FutureTask;.cancel:(Z)Z` @kind virtual;
  #L227412.  v3:= temp;
  #L227414.  return v3;
}
procedure `java.lang.Object` `doInBackground`(`java.lang.Object`[] v0 @kind object) @signature `Lc/o/b/c;.doInBackground:([Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `c.o.b.c` `executeOnExecutor`(`c.o.b.c` v2 @kind this, `java.util.concurrent.Executor` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lc/o/b/c;.executeOnExecutor:(Ljava/util/concurrent/Executor;[Ljava/lang/Object;)Lc/o/b/c;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L22736c.  v0:= v2.`c.o.b.c.h` @type ^`c.o.b.c$g` @kind object;
  #L227370.  v1:= `@@c.o.b.c$g.f` @type ^`c.o.b.c$g` @kind object;
  #L227374.  if v0 == v1 then goto L2273c8;
  #L227378.  v3:= `@@c.o.b.c$d.a` @type ^`int`[] @kind object;
  #L22737c.  v4:= v2.`c.o.b.c.h` @type ^`c.o.b.c$g` @kind object;
  #L227380.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L227386.  v4:= temp;
  #L227388.  v3:= v3[v4];
  #L22738c.  v4:= 1I;
  #L22738e.  if v3 == v4 then goto L2273b8;
  #L227392.  v4:= 2I;
  #L227394.  if v3 == v4 then goto L2273a8;
  #L227398.  v3:= new `java.lang.IllegalStateException`;
  #L22739c.  v4:= "We should never reach this state" @kind object;
  #L2273a0.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2273a6.  throw v3;
  #L2273a8.  v3:= new `java.lang.IllegalStateException`;
  #L2273ac.  v4:= "Cannot execute task: the task has already been executed (a task can be executed only once)" @kind object;
  #L2273b0.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2273b6.  throw v3;
  #L2273b8.  v3:= new `java.lang.IllegalStateException`;
  #L2273bc.  v4:= "Cannot execute task: the task is already running." @kind object;
  #L2273c0.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2273c6.  throw v3;
  #L2273c8.  v0:= `@@c.o.b.c$g.g` @type ^`c.o.b.c$g` @kind object;
  #L2273cc.  v2.`c.o.b.c.h` @type ^`c.o.b.c$g` := v0 @kind object;
  #L2273d0.  call `onPreExecute`(v2) @signature `Lc/o/b/c;.onPreExecute:()V` @kind virtual;
  #L2273d6.  v0:= v2.`c.o.b.c.f` @type ^`c.o.b.c$h` @kind object;
  #L2273da.  v0.`c.o.b.c$h.f` @type ^`java.lang.Object`[] := v4 @kind object;
  #L2273de.  v4:= v2.`c.o.b.c.g` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L2273e2.  call `execute`(v3, v4) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L2273e8.  return v2 @kind object;
}
procedure `boolean` `isCancelled`(`c.o.b.c` v1 @kind this) @signature `Lc/o/b/c;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L227428.  v0:= v1.`c.o.b.c.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L22742c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L227432.  v0:= temp;
  #L227434.  return v0;
}
procedure `void` `onCancelled`(`c.o.b.c` v0 @kind this) @signature `Lc/o/b/c;.onCancelled:()V` @AccessFlag PROTECTED {
    temp;

  #L227570.  return @kind void;
}
procedure `void` `onCancelled`(`c.o.b.c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/o/b/c;.onCancelled:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L227584.  call `onCancelled`(v0) @signature `Lc/o/b/c;.onCancelled:()V` @kind virtual;
  #L22758a.  return @kind void;
}
procedure `void` `onPostExecute`(`c.o.b.c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/o/b/c;.onPostExecute:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L22759c.  return @kind void;
}
procedure `void` `onPreExecute`(`c.o.b.c` v0 @kind this) @signature `Lc/o/b/c;.onPreExecute:()V` @AccessFlag PROTECTED {
    temp;

  #L2275b0.  return @kind void;
}
procedure `void` `onProgressUpdate`(`c.o.b.c` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lc/o/b/c;.onProgressUpdate:([Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L2275c4.  return @kind void;
}
