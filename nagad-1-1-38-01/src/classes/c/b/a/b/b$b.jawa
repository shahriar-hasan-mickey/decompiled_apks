record `c.b.a.b.b$b` @kind class @AccessFlag  extends `c.b.a.b.b$e` @kind class {
}
procedure `void` `<init>`(`c.b.a.b.b$b` v0 @kind this, `c.b.a.b.b$c` v1 @kind object, `c.b.a.b.b$c` v2 @kind object) @signature `Lc/b/a/b/b$b;.<init>:(Lc/b/a/b/b$c;Lc/b/a/b/b$c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c10e4.  call `<init>`(v0, v1, v2) @signature `Lc/b/a/b/b$e;.<init>:(Lc/b/a/b/b$c;Lc/b/a/b/b$c;)V` @kind direct;
  #L1c10ea.  return @kind void;
}
procedure `c.b.a.b.b$c` `a`(`c.b.a.b.b$b` v0 @kind this, `c.b.a.b.b$c` v1 @kind object) @signature `Lc/b/a/b/b$b;.a:(Lc/b/a/b/b$c;)Lc/b/a/b/b$c;` @AccessFlag  {
    temp;

  #L1c10b4.  v1:= v1.`c.b.a.b.b$c.h` @type ^`c.b.a.b.b$c` @kind object;
  #L1c10b8.  return v1 @kind object;
}
procedure `c.b.a.b.b$c` `b`(`c.b.a.b.b$b` v0 @kind this, `c.b.a.b.b$c` v1 @kind object) @signature `Lc/b/a/b/b$b;.b:(Lc/b/a/b/b$c;)Lc/b/a/b/b$c;` @AccessFlag  {
    temp;

  #L1c10cc.  v1:= v1.`c.b.a.b.b$c.i` @type ^`c.b.a.b.b$c` @kind object;
  #L1c10d0.  return v1 @kind object;
}
