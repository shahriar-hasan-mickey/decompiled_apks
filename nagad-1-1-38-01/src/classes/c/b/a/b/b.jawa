record `c.b.a.b.b` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface {
  `c.b.a.b.b$c` `c.b.a.b.b.f` @AccessFlag ;
  `c.b.a.b.b$c` `c.b.a.b.b.g` @AccessFlag PRIVATE;
  `java.util.WeakHashMap` `c.b.a.b.b.h` @AccessFlag PRIVATE;
  `int` `c.b.a.b.b.i` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.b.a.b.b` v1 @kind this) @signature `Lc/b/a/b/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c17f4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c17fa.  v0:= new `java.util.WeakHashMap`;
  #L1c17fe.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L1c1804.  v1.`c.b.a.b.b.h` @type ^`java.util.WeakHashMap` := v0 @kind object;
  #L1c1808.  v0:= 0I;
  #L1c180a.  v1.`c.b.a.b.b.i` @type ^`int` := v0;
  #L1c180e.  return @kind void;
}
procedure `java.util.Iterator` `descendingIterator`(`c.b.a.b.b` v3 @kind this) @signature `Lc/b/a/b/b;.descendingIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c1754.  v0:= new `c.b.a.b.b$b`;
  #L1c1758.  v1:= v3.`c.b.a.b.b.g` @type ^`c.b.a.b.b$c` @kind object;
  #L1c175c.  v2:= v3.`c.b.a.b.b.f` @type ^`c.b.a.b.b$c` @kind object;
  #L1c1760.  call `<init>`(v0, v1, v2) @signature `Lc/b/a/b/b$b;.<init>:(Lc/b/a/b/b$c;Lc/b/a/b/b$c;)V` @kind direct;
  #L1c1766.  v1:= v3.`c.b.a.b.b.h` @type ^`java.util.WeakHashMap` @kind object;
  #L1c176a.  v2:= 0I;
  #L1c176c.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1c1772.  v2:= temp @kind object;
  #L1c1774.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c177a.  return v0 @kind object;
}
procedure `java.util.Map$Entry` `eldest`(`c.b.a.b.b` v1 @kind this) @signature `Lc/b/a/b/b;.eldest:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c17c4.  v0:= v1.`c.b.a.b.b.f` @type ^`c.b.a.b.b$c` @kind object;
  #L1c17c8.  return v0 @kind object;
}
procedure `boolean` `equals`(`c.b.a.b.b` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lc/b/a/b/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c14e8.  v0:= 1I;
  #L1c14ea.  if v6 != v5 then goto L1c14f0;
  #L1c14ee.  return v0;
  #L1c14f0.  v1:= instanceof @variable v6 @type ^`c.b.a.b.b` @kind boolean;
  #L1c14f4.  v2:= 0I;
  #L1c14f6.  if v1 != 0 then goto L1c14fc;
  #L1c14fa.  return v2;
  #L1c14fc.  v6:= (`c.b.a.b.b`) v6 @kind object;
  #L1c1500.  call temp:= `size`(v5) @signature `Lc/b/a/b/b;.size:()I` @kind virtual;
  #L1c1506.  v1:= temp;
  #L1c1508.  call temp:= `size`(v6) @signature `Lc/b/a/b/b;.size:()I` @kind virtual;
  #L1c150e.  v3:= temp;
  #L1c1510.  if v1 == v3 then goto L1c1516;
  #L1c1514.  return v2;
  #L1c1516.  call temp:= `iterator`(v5) @signature `Lc/b/a/b/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1c151c.  v1:= temp @kind object;
  #L1c151e.  call temp:= `iterator`(v6) @signature `Lc/b/a/b/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1c1524.  v6:= temp @kind object;
  #L1c1526.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c152c.  v3:= temp;
  #L1c152e.  if v3 == 0 then goto L1c156c;
  #L1c1532.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c1538.  v3:= temp;
  #L1c153a.  if v3 == 0 then goto L1c156c;
  #L1c153e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c1544.  v3:= temp @kind object;
  #L1c1546.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L1c154a.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c1550.  v4:= temp @kind object;
  #L1c1552.  if v3 != 0 then goto L1c155a;
  #L1c1556.  if v4 != 0 then goto L1c156a;
  #L1c155a.  if v3 == 0 then goto L1c1526;
  #L1c155e.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Map$Entry;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L1c1564.  v3:= temp;
  #L1c1566.  if v3 != 0 then goto L1c1526;
  #L1c156a.  return v2;
  #L1c156c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c1572.  v1:= temp;
  #L1c1574.  if v1 != 0 then goto L1c1586;
  #L1c1578.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c157e.  v6:= temp;
  #L1c1580.  if v6 != 0 then goto L1c1586;
  #L1c1584.  goto L1c1588;
  #L1c1586.  v0:= 0I;
  #L1c1588.  return v0;
}
procedure `c.b.a.b.b$c` `get`(`c.b.a.b.b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lc/b/a/b/b;.get:(Ljava/lang/Object;)Lc/b/a/b/b$c;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L1c1438.  v0:= v2.`c.b.a.b.b.f` @type ^`c.b.a.b.b$c` @kind object;
  #L1c143c.  if v0 == 0 then goto L1c1458;
  #L1c1440.  v1:= v0.`c.b.a.b.b$c.f` @type ^`java.lang.Object` @kind object;
  #L1c1444.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c144a.  v1:= temp;
  #L1c144c.  if v1 == 0 then goto L1c1452;
  #L1c1450.  goto L1c1458;
  #L1c1452.  v0:= v0.`c.b.a.b.b$c.h` @type ^`c.b.a.b.b$c` @kind object;
  #L1c1456.  goto L1c143c;
  #L1c1458.  return v0 @kind object;
}
procedure `int` `hashCode`(`c.b.a.b.b` v3 @kind this) @signature `Lc/b/a/b/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c159c.  call temp:= `iterator`(v3) @signature `Lc/b/a/b/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1c15a2.  v0:= temp @kind object;
  #L1c15a4.  v1:= 0I;
  #L1c15a6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c15ac.  v2:= temp;
  #L1c15ae.  if v2 == 0 then goto L1c15ca;
  #L1c15b2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c15b8.  v2:= temp @kind object;
  #L1c15ba.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L1c15be.  call temp:= `hashCode`(v2) @signature `Ljava/util/Map$Entry;.hashCode:()I` @kind interface;
  #L1c15c4.  v2:= temp;
  #L1c15c6.  v1:= v1 + v2 @kind int;
  #L1c15c8.  goto L1c15a6;
  #L1c15ca.  return v1;
}
procedure `java.util.Iterator` `iterator`(`c.b.a.b.b` v3 @kind this) @signature `Lc/b/a/b/b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c178c.  v0:= new `c.b.a.b.b$a`;
  #L1c1790.  v1:= v3.`c.b.a.b.b.f` @type ^`c.b.a.b.b$c` @kind object;
  #L1c1794.  v2:= v3.`c.b.a.b.b.g` @type ^`c.b.a.b.b$c` @kind object;
  #L1c1798.  call `<init>`(v0, v1, v2) @signature `Lc/b/a/b/b$a;.<init>:(Lc/b/a/b/b$c;Lc/b/a/b/b$c;)V` @kind direct;
  #L1c179e.  v1:= v3.`c.b.a.b.b.h` @type ^`java.util.WeakHashMap` @kind object;
  #L1c17a2.  v2:= 0I;
  #L1c17a4.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1c17aa.  v2:= temp @kind object;
  #L1c17ac.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c17b2.  return v0 @kind object;
}
procedure `c.b.a.b.b$d` `iteratorWithAdditions`(`c.b.a.b.b` v3 @kind this) @signature `Lc/b/a/b/b;.iteratorWithAdditions:()Lc/b/a/b/b$d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c14b8.  v0:= new `c.b.a.b.b$d`;
  #L1c14bc.  call `<init>`(v0, v3) @signature `Lc/b/a/b/b$d;.<init>:(Lc/b/a/b/b;)V` @kind direct;
  #L1c14c2.  v1:= v3.`c.b.a.b.b.h` @type ^`java.util.WeakHashMap` @kind object;
  #L1c14c6.  v2:= 0I;
  #L1c14c8.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1c14ce.  v2:= temp @kind object;
  #L1c14d0.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c14d6.  return v0 @kind object;
}
procedure `java.util.Map$Entry` `newest`(`c.b.a.b.b` v1 @kind this) @signature `Lc/b/a/b/b;.newest:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c17dc.  v0:= v1.`c.b.a.b.b.g` @type ^`c.b.a.b.b$c` @kind object;
  #L1c17e0.  return v0 @kind object;
}
procedure `c.b.a.b.b$c` `put`(`c.b.a.b.b` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lc/b/a/b/b;.put:(Ljava/lang/Object;Ljava/lang/Object;)Lc/b/a/b/b$c;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1c146c.  v0:= new `c.b.a.b.b$c`;
  #L1c1470.  call `<init>`(v0, v2, v3) @signature `Lc/b/a/b/b$c;.<init>:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind direct;
  #L1c1476.  v2:= v1.`c.b.a.b.b.i` @type ^`int`;
  #L1c147a.  v2:= v2 + 1;
  #L1c147e.  v1.`c.b.a.b.b.i` @type ^`int` := v2;
  #L1c1482.  v2:= v1.`c.b.a.b.b.g` @type ^`c.b.a.b.b$c` @kind object;
  #L1c1486.  if v2 != 0 then goto L1c1498;
  #L1c148a.  v1.`c.b.a.b.b.f` @type ^`c.b.a.b.b$c` := v0 @kind object;
  #L1c148e.  v2:= v1.`c.b.a.b.b.f` @type ^`c.b.a.b.b$c` @kind object;
  #L1c1492.  v1.`c.b.a.b.b.g` @type ^`c.b.a.b.b$c` := v2 @kind object;
  #L1c1496.  return v0 @kind object;
  #L1c1498.  v2.`c.b.a.b.b$c.h` @type ^`c.b.a.b.b$c` := v0 @kind object;
  #L1c149c.  v0.`c.b.a.b.b$c.i` @type ^`c.b.a.b.b$c` := v2 @kind object;
  #L1c14a0.  v1.`c.b.a.b.b.g` @type ^`c.b.a.b.b$c` := v0 @kind object;
  #L1c14a4.  return v0 @kind object;
}
procedure `java.lang.Object` `putIfAbsent`(`c.b.a.b.b` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lc/b/a/b/b;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c15f4.  call temp:= `get`(v1, v2) @signature `Lc/b/a/b/b;.get:(Ljava/lang/Object;)Lc/b/a/b/b$c;` @kind virtual;
  #L1c15fa.  v0:= temp @kind object;
  #L1c15fc.  if v0 == 0 then goto L1c1606;
  #L1c1600.  v2:= v0.`c.b.a.b.b$c.g` @type ^`java.lang.Object` @kind object;
  #L1c1604.  return v2 @kind object;
  #L1c1606.  call temp:= `put`(v1, v2, v3) @signature `Lc/b/a/b/b;.put:(Ljava/lang/Object;Ljava/lang/Object;)Lc/b/a/b/b$c;` @kind virtual;
  #L1c160c.  v2:= 0I;
  #L1c160e.  return v2 @kind object;
}
procedure `java.lang.Object` `remove`(`c.b.a.b.b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lc/b/a/b/b;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c1620.  call temp:= `get`(v3, v4) @signature `Lc/b/a/b/b;.get:(Ljava/lang/Object;)Lc/b/a/b/b$c;` @kind virtual;
  #L1c1626.  v4:= temp @kind object;
  #L1c1628.  v0:= 0I;
  #L1c162a.  if v4 != 0 then goto L1c1630;
  #L1c162e.  return v0 @kind object;
  #L1c1630.  v1:= v3.`c.b.a.b.b.i` @type ^`int`;
  #L1c1634.  v1:= v1 + -1;
  #L1c1638.  v3.`c.b.a.b.b.i` @type ^`int` := v1;
  #L1c163c.  v1:= v3.`c.b.a.b.b.h` @type ^`java.util.WeakHashMap` @kind object;
  #L1c1640.  call temp:= `isEmpty`(v1) @signature `Ljava/util/WeakHashMap;.isEmpty:()Z` @kind virtual;
  #L1c1646.  v1:= temp;
  #L1c1648.  if v1 != 0 then goto L1c1680;
  #L1c164c.  v1:= v3.`c.b.a.b.b.h` @type ^`java.util.WeakHashMap` @kind object;
  #L1c1650.  call temp:= `keySet`(v1) @signature `Ljava/util/WeakHashMap;.keySet:()Ljava/util/Set;` @kind virtual;
  #L1c1656.  v1:= temp @kind object;
  #L1c1658.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c165e.  v1:= temp @kind object;
  #L1c1660.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c1666.  v2:= temp;
  #L1c1668.  if v2 == 0 then goto L1c1680;
  #L1c166c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c1672.  v2:= temp @kind object;
  #L1c1674.  v2:= (`c.b.a.b.b$f`) v2 @kind object;
  #L1c1678.  call `supportRemove`(v2, v4) @signature `Lc/b/a/b/b$f;.supportRemove:(Lc/b/a/b/b$c;)V` @kind interface;
  #L1c167e.  goto L1c1660;
  #L1c1680.  v1:= v4.`c.b.a.b.b$c.i` @type ^`c.b.a.b.b$c` @kind object;
  #L1c1684.  if v1 == 0 then goto L1c1692;
  #L1c1688.  v2:= v4.`c.b.a.b.b$c.h` @type ^`c.b.a.b.b$c` @kind object;
  #L1c168c.  v1.`c.b.a.b.b$c.h` @type ^`c.b.a.b.b$c` := v2 @kind object;
  #L1c1690.  goto L1c169a;
  #L1c1692.  v1:= v4.`c.b.a.b.b$c.h` @type ^`c.b.a.b.b$c` @kind object;
  #L1c1696.  v3.`c.b.a.b.b.f` @type ^`c.b.a.b.b$c` := v1 @kind object;
  #L1c169a.  v1:= v4.`c.b.a.b.b$c.h` @type ^`c.b.a.b.b$c` @kind object;
  #L1c169e.  if v1 == 0 then goto L1c16ac;
  #L1c16a2.  v2:= v4.`c.b.a.b.b$c.i` @type ^`c.b.a.b.b$c` @kind object;
  #L1c16a6.  v1.`c.b.a.b.b$c.i` @type ^`c.b.a.b.b$c` := v2 @kind object;
  #L1c16aa.  goto L1c16b4;
  #L1c16ac.  v1:= v4.`c.b.a.b.b$c.i` @type ^`c.b.a.b.b$c` @kind object;
  #L1c16b0.  v3.`c.b.a.b.b.g` @type ^`c.b.a.b.b$c` := v1 @kind object;
  #L1c16b4.  v4.`c.b.a.b.b$c.h` @type ^`c.b.a.b.b$c` := v0 @kind object;
  #L1c16b8.  v4.`c.b.a.b.b$c.i` @type ^`c.b.a.b.b$c` := v0 @kind object;
  #L1c16bc.  v4:= v4.`c.b.a.b.b$c.g` @type ^`java.lang.Object` @kind object;
  #L1c16c0.  return v4 @kind object;
}
procedure `int` `size`(`c.b.a.b.b` v1 @kind this) @signature `Lc/b/a/b/b;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c15dc.  v0:= v1.`c.b.a.b.b.i` @type ^`int`;
  #L1c15e0.  return v0;
}
procedure `java.lang.String` `toString`(`c.b.a.b.b` v3 @kind this) @signature `Lc/b/a/b/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c16d4.  v0:= new `java.lang.StringBuilder`;
  #L1c16d8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c16de.  v1:= "[" @kind object;
  #L1c16e2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c16e8.  call temp:= `iterator`(v3) @signature `Lc/b/a/b/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1c16ee.  v1:= temp @kind object;
  #L1c16f0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c16f6.  v2:= temp;
  #L1c16f8.  if v2 == 0 then goto L1c172e;
  #L1c16fc.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c1702.  v2:= temp @kind object;
  #L1c1704.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L1c1708.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c170e.  v2:= temp @kind object;
  #L1c1710.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1716.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c171c.  v2:= temp;
  #L1c171e.  if v2 == 0 then goto L1c16f0;
  #L1c1722.  v2:= ", " @kind object;
  #L1c1726.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c172c.  goto L1c16f0;
  #L1c172e.  v1:= "]" @kind object;
  #L1c1732.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1738.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c173e.  v0:= temp @kind object;
  #L1c1740.  return v0 @kind object;
}
