record `c.b.a.a.a` @kind class @AccessFlag PUBLIC extends `c.b.a.a.c` @kind class {
  `c.b.a.a.c` `c.b.a.a.a.a` @AccessFlag PRIVATE;
  `c.b.a.a.c` `c.b.a.a.a.b` @AccessFlag PRIVATE;
}
global `c.b.a.a.a` `@@c.b.a.a.a.c` @AccessFlag PRIVATE_STATIC_VOLATILE;
global `java.util.concurrent.Executor` `@@c.b.a.a.a.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lc/b/a/a/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c0ca4.  v0:= new `c.b.a.a.a$a`;
  #L1c0ca8.  call `<init>`(v0) @signature `Lc/b/a/a/a$a;.<init>:()V` @kind direct;
  #L1c0cae.  v0:= new `c.b.a.a.a$b`;
  #L1c0cb2.  call `<init>`(v0) @signature `Lc/b/a/a/a$b;.<init>:()V` @kind direct;
  #L1c0cb8.  `@@c.b.a.a.a.d` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L1c0cbc.  return @kind void;
}
procedure `void` `<init>`(`c.b.a.a.a` v1 @kind this) @signature `Lc/b/a/a/a;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L1c0cd0.  call `<init>`(v1) @signature `Lc/b/a/a/c;.<init>:()V` @kind direct;
  #L1c0cd6.  v0:= new `c.b.a.a.b`;
  #L1c0cda.  call `<init>`(v0) @signature `Lc/b/a/a/b;.<init>:()V` @kind direct;
  #L1c0ce0.  v1.`c.b.a.a.a.b` @type ^`c.b.a.a.c` := v0 @kind object;
  #L1c0ce4.  v0:= v1.`c.b.a.a.a.b` @type ^`c.b.a.a.c` @kind object;
  #L1c0ce8.  v1.`c.b.a.a.a.a` @type ^`c.b.a.a.c` := v0 @kind object;
  #L1c0cec.  return @kind void;
}
procedure `java.util.concurrent.Executor` `getIOThreadExecutor`() @signature `Lc/b/a/a/a;.getIOThreadExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1c0c8c.  v0:= `@@c.b.a.a.a.d` @type ^`java.util.concurrent.Executor` @kind object;
  #L1c0c90.  return v0 @kind object;
}
procedure `c.b.a.a.a` `getInstance`() @signature `Lc/b/a/a/a;.getInstance:()Lc/b/a/a/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1c0c10.  v0:= `@@c.b.a.a.a.c` @type ^`c.b.a.a.a` @kind object;
  #L1c0c14.  if v0 == 0 then goto L1c0c1e;
  #L1c0c18.  v0:= `@@c.b.a.a.a.c` @type ^`c.b.a.a.a` @kind object;
  #L1c0c1c.  return v0 @kind object;
  #L1c0c1e.  v0:= constclass @type ^`c.b.a.a.a` @kind object;
  #L1c0c22.  @monitorenter v0
  #L1c0c24.  v1:= `@@c.b.a.a.a.c` @type ^`c.b.a.a.a` @kind object;
  #L1c0c28.  if v1 != 0 then goto L1c0c3a;
  #L1c0c2c.  v1:= new `c.b.a.a.a`;
  #L1c0c30.  call `<init>`(v1) @signature `Lc/b/a/a/a;.<init>:()V` @kind direct;
  #L1c0c36.  `@@c.b.a.a.a.c` @type ^`c.b.a.a.a` := v1 @kind object;
  #L1c0c3a.  @monitorexit v0
  #L1c0c3c.  v0:= `@@c.b.a.a.a.c` @type ^`c.b.a.a.a` @kind object;
  #L1c0c40.  return v0 @kind object;
  #L1c0c42.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c0c44.  @monitorexit v0
  #L1c0c46.  throw v1;
  catch `java.lang.Throwable` @[L1c0c24..L1c0c3c] goto L1c0c42;
  catch `java.lang.Throwable` @[L1c0c44..L1c0c46] goto L1c0c42;
}
procedure `void` `executeOnDiskIO`(`c.b.a.a.a` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lc/b/a/a/a;.executeOnDiskIO:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c0d00.  v0:= v1.`c.b.a.a.a.a` @type ^`c.b.a.a.c` @kind object;
  #L1c0d04.  call `executeOnDiskIO`(v0, v2) @signature `Lc/b/a/a/c;.executeOnDiskIO:(Ljava/lang/Runnable;)V` @kind virtual;
  #L1c0d0a.  return @kind void;
}
procedure `boolean` `isMainThread`(`c.b.a.a.a` v1 @kind this) @signature `Lc/b/a/a/a;.isMainThread:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c0c6c.  v0:= v1.`c.b.a.a.a.a` @type ^`c.b.a.a.c` @kind object;
  #L1c0c70.  call temp:= `isMainThread`(v0) @signature `Lc/b/a/a/c;.isMainThread:()Z` @kind virtual;
  #L1c0c76.  v0:= temp;
  #L1c0c78.  return v0;
}
procedure `void` `postToMainThread`(`c.b.a.a.a` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lc/b/a/a/a;.postToMainThread:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c0d1c.  v0:= v1.`c.b.a.a.a.a` @type ^`c.b.a.a.c` @kind object;
  #L1c0d20.  call `postToMainThread`(v0, v2) @signature `Lc/b/a/a/c;.postToMainThread:(Ljava/lang/Runnable;)V` @kind virtual;
  #L1c0d26.  return @kind void;
}
