record `rx.Observable` @kind class @AccessFlag PUBLIC {
  `rx.Observable$OnSubscribe` `rx.Observable.onSubscribe` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.Observable` v0 @kind this, `rx.Observable$OnSubscribe` v1 @kind object) @signature `Lrx/Observable;.<init>:(Lrx/Observable$OnSubscribe;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L48e6e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48e6ea.  v0.`rx.Observable.onSubscribe` @type ^`rx.Observable$OnSubscribe` := v1 @kind object;
  #L48e6ee.  return @kind void;
}
procedure `rx.Observable` `amb`(`java.lang.Iterable` v0 @kind object) @signature `Lrx/Observable;.amb:(Ljava/lang/Iterable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a11c.  call temp:= `amb`(v0) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Ljava/lang/Iterable;)Lrx/Observable$OnSubscribe;` @kind static;
  #L48a122.  v0:= temp @kind object;
  #L48a124.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48a12a.  v0:= temp @kind object;
  #L48a12c.  return v0 @kind object;
}
procedure `rx.Observable` `amb`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object) @signature `Lrx/Observable;.amb:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a140.  call temp:= `amb`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;` @kind static;
  #L48a146.  v0:= temp @kind object;
  #L48a148.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48a14e.  v0:= temp @kind object;
  #L48a150.  return v0 @kind object;
}
procedure `rx.Observable` `amb`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object) @signature `Lrx/Observable;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a164.  call temp:= `amb`(v0, v1, v2) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;` @kind static;
  #L48a16a.  v0:= temp @kind object;
  #L48a16c.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48a172.  v0:= temp @kind object;
  #L48a174.  return v0 @kind object;
}
procedure `rx.Observable` `amb`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object) @signature `Lrx/Observable;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a188.  call temp:= `amb`(v0, v1, v2, v3) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;` @kind static;
  #L48a18e.  v0:= temp @kind object;
  #L48a190.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48a196.  v0:= temp @kind object;
  #L48a198.  return v0 @kind object;
}
procedure `rx.Observable` `amb`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object) @signature `Lrx/Observable;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a1ac.  call temp:= `amb`(v0, v1, v2, v3, v4) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;` @kind static;
  #L48a1b2.  v0:= temp @kind object;
  #L48a1b4.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48a1ba.  v0:= temp @kind object;
  #L48a1bc.  return v0 @kind object;
}
procedure `rx.Observable` `amb`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object) @signature `Lrx/Observable;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a1d0.  call temp:= `amb`(v0, v1, v2, v3, v4, v5) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;` @kind static;
  #L48a1d6.  v0:= temp @kind object;
  #L48a1d8.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48a1de.  v0:= temp @kind object;
  #L48a1e0.  return v0 @kind object;
}
procedure `rx.Observable` `amb`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object) @signature `Lrx/Observable;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a1f4.  call temp:= `amb`(v0, v1, v2, v3, v4, v5, v6) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;` @kind static;
  #L48a1fa.  v0:= temp @kind object;
  #L48a1fc.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48a202.  v0:= temp @kind object;
  #L48a204.  return v0 @kind object;
}
procedure `rx.Observable` `amb`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object) @signature `Lrx/Observable;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a218.  call temp:= `amb`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;` @kind static;
  #L48a21e.  v0:= temp @kind object;
  #L48a220.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48a226.  v0:= temp @kind object;
  #L48a228.  return v0 @kind object;
}
procedure `rx.Observable` `amb`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object) @signature `Lrx/Observable;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a23c.  call temp:= `amb`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;` @kind static;
  #L48a242.  v0:= temp @kind object;
  #L48a244.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48a24a.  v0:= temp @kind object;
  #L48a24c.  return v0 @kind object;
}
procedure `rx.Observable` `combineLatest`(`java.lang.Iterable` v1 @kind object, `rx.functions.FuncN` v2 @kind object) @signature `Lrx/Observable;.combineLatest:(Ljava/lang/Iterable;Lrx/functions/FuncN;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48a528.  v0:= new `rx.internal.operators.OnSubscribeCombineLatest`;
  #L48a52c.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/OnSubscribeCombineLatest;.<init>:(Ljava/lang/Iterable;Lrx/functions/FuncN;)V` @kind direct;
  #L48a532.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48a538.  v1:= temp @kind object;
  #L48a53a.  return v1 @kind object;
}
procedure `rx.Observable` `combineLatest`(`java.util.List` v1 @kind object, `rx.functions.FuncN` v2 @kind object) @signature `Lrx/Observable;.combineLatest:(Ljava/util/List;Lrx/functions/FuncN;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48a54c.  v0:= new `rx.internal.operators.OnSubscribeCombineLatest`;
  #L48a550.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/OnSubscribeCombineLatest;.<init>:(Ljava/lang/Iterable;Lrx/functions/FuncN;)V` @kind direct;
  #L48a556.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48a55c.  v1:= temp @kind object;
  #L48a55e.  return v1 @kind object;
}
procedure `rx.Observable` `combineLatest`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object, `rx.Observable` v9 @kind object, `rx.Observable` v10 @kind object, `rx.functions.Func9` v11 @kind object) @signature `Lrx/Observable;.combineLatest:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func9;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48a570.  v0:= 9I;
  #L48a574.  v0:= new `rx.Observable`[v0];
  #L48a578.  v1:= 0I;
  #L48a57a.  v0[v1]:= v2 @kind object;
  #L48a57e.  v2:= 1I;
  #L48a580.  v0[v2]:= v3 @kind object;
  #L48a584.  v2:= 2I;
  #L48a586.  v0[v2]:= v4 @kind object;
  #L48a58a.  v2:= 3I;
  #L48a58c.  v0[v2]:= v5 @kind object;
  #L48a590.  v2:= 4I;
  #L48a592.  v0[v2]:= v6 @kind object;
  #L48a596.  v2:= 5I;
  #L48a598.  v0[v2]:= v7 @kind object;
  #L48a59c.  v2:= 6I;
  #L48a59e.  v0[v2]:= v8 @kind object;
  #L48a5a2.  v2:= 7I;
  #L48a5a4.  v0[v2]:= v9 @kind object;
  #L48a5a8.  v2:= 8I;
  #L48a5ac.  v0[v2]:= v10 @kind object;
  #L48a5b0.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48a5b6.  v2:= temp @kind object;
  #L48a5b8.  call temp:= `fromFunc`(v11) @signature `Lrx/functions/Functions;.fromFunc:(Lrx/functions/Func9;)Lrx/functions/FuncN;` @kind static;
  #L48a5be.  v3:= temp @kind object;
  #L48a5c0.  call temp:= `combineLatest`(v2, v3) @signature `Lrx/Observable;.combineLatest:(Ljava/util/List;Lrx/functions/FuncN;)Lrx/Observable;` @kind static;
  #L48a5c6.  v2:= temp @kind object;
  #L48a5c8.  return v2 @kind object;
}
procedure `rx.Observable` `combineLatest`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object, `rx.Observable` v9 @kind object, `rx.functions.Func8` v10 @kind object) @signature `Lrx/Observable;.combineLatest:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func8;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48a5dc.  v0:= 8I;
  #L48a5e0.  v0:= new `rx.Observable`[v0];
  #L48a5e4.  v1:= 0I;
  #L48a5e6.  v0[v1]:= v2 @kind object;
  #L48a5ea.  v2:= 1I;
  #L48a5ec.  v0[v2]:= v3 @kind object;
  #L48a5f0.  v2:= 2I;
  #L48a5f2.  v0[v2]:= v4 @kind object;
  #L48a5f6.  v2:= 3I;
  #L48a5f8.  v0[v2]:= v5 @kind object;
  #L48a5fc.  v2:= 4I;
  #L48a5fe.  v0[v2]:= v6 @kind object;
  #L48a602.  v2:= 5I;
  #L48a604.  v0[v2]:= v7 @kind object;
  #L48a608.  v2:= 6I;
  #L48a60a.  v0[v2]:= v8 @kind object;
  #L48a60e.  v2:= 7I;
  #L48a610.  v0[v2]:= v9 @kind object;
  #L48a614.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48a61a.  v2:= temp @kind object;
  #L48a61c.  call temp:= `fromFunc`(v10) @signature `Lrx/functions/Functions;.fromFunc:(Lrx/functions/Func8;)Lrx/functions/FuncN;` @kind static;
  #L48a622.  v3:= temp @kind object;
  #L48a624.  call temp:= `combineLatest`(v2, v3) @signature `Lrx/Observable;.combineLatest:(Ljava/util/List;Lrx/functions/FuncN;)Lrx/Observable;` @kind static;
  #L48a62a.  v2:= temp @kind object;
  #L48a62c.  return v2 @kind object;
}
procedure `rx.Observable` `combineLatest`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object, `rx.functions.Func7` v9 @kind object) @signature `Lrx/Observable;.combineLatest:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func7;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48a640.  v0:= 7I;
  #L48a642.  v0:= new `rx.Observable`[v0];
  #L48a646.  v1:= 0I;
  #L48a648.  v0[v1]:= v2 @kind object;
  #L48a64c.  v2:= 1I;
  #L48a64e.  v0[v2]:= v3 @kind object;
  #L48a652.  v2:= 2I;
  #L48a654.  v0[v2]:= v4 @kind object;
  #L48a658.  v2:= 3I;
  #L48a65a.  v0[v2]:= v5 @kind object;
  #L48a65e.  v2:= 4I;
  #L48a660.  v0[v2]:= v6 @kind object;
  #L48a664.  v2:= 5I;
  #L48a666.  v0[v2]:= v7 @kind object;
  #L48a66a.  v2:= 6I;
  #L48a66c.  v0[v2]:= v8 @kind object;
  #L48a670.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48a676.  v2:= temp @kind object;
  #L48a678.  call temp:= `fromFunc`(v9) @signature `Lrx/functions/Functions;.fromFunc:(Lrx/functions/Func7;)Lrx/functions/FuncN;` @kind static;
  #L48a67e.  v3:= temp @kind object;
  #L48a680.  call temp:= `combineLatest`(v2, v3) @signature `Lrx/Observable;.combineLatest:(Ljava/util/List;Lrx/functions/FuncN;)Lrx/Observable;` @kind static;
  #L48a686.  v2:= temp @kind object;
  #L48a688.  return v2 @kind object;
}
procedure `rx.Observable` `combineLatest`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.functions.Func6` v8 @kind object) @signature `Lrx/Observable;.combineLatest:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func6;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48a69c.  v0:= 6I;
  #L48a69e.  v0:= new `rx.Observable`[v0];
  #L48a6a2.  v1:= 0I;
  #L48a6a4.  v0[v1]:= v2 @kind object;
  #L48a6a8.  v2:= 1I;
  #L48a6aa.  v0[v2]:= v3 @kind object;
  #L48a6ae.  v2:= 2I;
  #L48a6b0.  v0[v2]:= v4 @kind object;
  #L48a6b4.  v2:= 3I;
  #L48a6b6.  v0[v2]:= v5 @kind object;
  #L48a6ba.  v2:= 4I;
  #L48a6bc.  v0[v2]:= v6 @kind object;
  #L48a6c0.  v2:= 5I;
  #L48a6c2.  v0[v2]:= v7 @kind object;
  #L48a6c6.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48a6cc.  v2:= temp @kind object;
  #L48a6ce.  call temp:= `fromFunc`(v8) @signature `Lrx/functions/Functions;.fromFunc:(Lrx/functions/Func6;)Lrx/functions/FuncN;` @kind static;
  #L48a6d4.  v3:= temp @kind object;
  #L48a6d6.  call temp:= `combineLatest`(v2, v3) @signature `Lrx/Observable;.combineLatest:(Ljava/util/List;Lrx/functions/FuncN;)Lrx/Observable;` @kind static;
  #L48a6dc.  v2:= temp @kind object;
  #L48a6de.  return v2 @kind object;
}
procedure `rx.Observable` `combineLatest`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.functions.Func5` v7 @kind object) @signature `Lrx/Observable;.combineLatest:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func5;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48a6f0.  v0:= 5I;
  #L48a6f2.  v0:= new `rx.Observable`[v0];
  #L48a6f6.  v1:= 0I;
  #L48a6f8.  v0[v1]:= v2 @kind object;
  #L48a6fc.  v2:= 1I;
  #L48a6fe.  v0[v2]:= v3 @kind object;
  #L48a702.  v2:= 2I;
  #L48a704.  v0[v2]:= v4 @kind object;
  #L48a708.  v2:= 3I;
  #L48a70a.  v0[v2]:= v5 @kind object;
  #L48a70e.  v2:= 4I;
  #L48a710.  v0[v2]:= v6 @kind object;
  #L48a714.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48a71a.  v2:= temp @kind object;
  #L48a71c.  call temp:= `fromFunc`(v7) @signature `Lrx/functions/Functions;.fromFunc:(Lrx/functions/Func5;)Lrx/functions/FuncN;` @kind static;
  #L48a722.  v3:= temp @kind object;
  #L48a724.  call temp:= `combineLatest`(v2, v3) @signature `Lrx/Observable;.combineLatest:(Ljava/util/List;Lrx/functions/FuncN;)Lrx/Observable;` @kind static;
  #L48a72a.  v2:= temp @kind object;
  #L48a72c.  return v2 @kind object;
}
procedure `rx.Observable` `combineLatest`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.functions.Func4` v6 @kind object) @signature `Lrx/Observable;.combineLatest:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func4;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48a740.  v0:= 4I;
  #L48a742.  v0:= new `rx.Observable`[v0];
  #L48a746.  v1:= 0I;
  #L48a748.  v0[v1]:= v2 @kind object;
  #L48a74c.  v2:= 1I;
  #L48a74e.  v0[v2]:= v3 @kind object;
  #L48a752.  v2:= 2I;
  #L48a754.  v0[v2]:= v4 @kind object;
  #L48a758.  v2:= 3I;
  #L48a75a.  v0[v2]:= v5 @kind object;
  #L48a75e.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48a764.  v2:= temp @kind object;
  #L48a766.  call temp:= `fromFunc`(v6) @signature `Lrx/functions/Functions;.fromFunc:(Lrx/functions/Func4;)Lrx/functions/FuncN;` @kind static;
  #L48a76c.  v3:= temp @kind object;
  #L48a76e.  call temp:= `combineLatest`(v2, v3) @signature `Lrx/Observable;.combineLatest:(Ljava/util/List;Lrx/functions/FuncN;)Lrx/Observable;` @kind static;
  #L48a774.  v2:= temp @kind object;
  #L48a776.  return v2 @kind object;
}
procedure `rx.Observable` `combineLatest`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.functions.Func3` v5 @kind object) @signature `Lrx/Observable;.combineLatest:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func3;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48a788.  v0:= 3I;
  #L48a78a.  v0:= new `rx.Observable`[v0];
  #L48a78e.  v1:= 0I;
  #L48a790.  v0[v1]:= v2 @kind object;
  #L48a794.  v2:= 1I;
  #L48a796.  v0[v2]:= v3 @kind object;
  #L48a79a.  v2:= 2I;
  #L48a79c.  v0[v2]:= v4 @kind object;
  #L48a7a0.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48a7a6.  v2:= temp @kind object;
  #L48a7a8.  call temp:= `fromFunc`(v5) @signature `Lrx/functions/Functions;.fromFunc:(Lrx/functions/Func3;)Lrx/functions/FuncN;` @kind static;
  #L48a7ae.  v3:= temp @kind object;
  #L48a7b0.  call temp:= `combineLatest`(v2, v3) @signature `Lrx/Observable;.combineLatest:(Ljava/util/List;Lrx/functions/FuncN;)Lrx/Observable;` @kind static;
  #L48a7b6.  v2:= temp @kind object;
  #L48a7b8.  return v2 @kind object;
}
procedure `rx.Observable` `combineLatest`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.functions.Func2` v4 @kind object) @signature `Lrx/Observable;.combineLatest:(Lrx/Observable;Lrx/Observable;Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48a7cc.  v0:= 2I;
  #L48a7ce.  v0:= new `rx.Observable`[v0];
  #L48a7d2.  v1:= 0I;
  #L48a7d4.  v0[v1]:= v2 @kind object;
  #L48a7d8.  v2:= 1I;
  #L48a7da.  v0[v2]:= v3 @kind object;
  #L48a7de.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48a7e4.  v2:= temp @kind object;
  #L48a7e6.  call temp:= `fromFunc`(v4) @signature `Lrx/functions/Functions;.fromFunc:(Lrx/functions/Func2;)Lrx/functions/FuncN;` @kind static;
  #L48a7ec.  v3:= temp @kind object;
  #L48a7ee.  call temp:= `combineLatest`(v2, v3) @signature `Lrx/Observable;.combineLatest:(Ljava/util/List;Lrx/functions/FuncN;)Lrx/Observable;` @kind static;
  #L48a7f4.  v2:= temp @kind object;
  #L48a7f6.  return v2 @kind object;
}
procedure `rx.Observable` `combineLatestDelayError`(`java.lang.Iterable` v7 @kind object, `rx.functions.FuncN` v8 @kind object) @signature `Lrx/Observable;.combineLatestDelayError:(Ljava/lang/Iterable;Lrx/functions/FuncN;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48a808.  v6:= new `rx.internal.operators.OnSubscribeCombineLatest`;
  #L48a80c.  v4:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L48a810.  v1:= 0I;
  #L48a812.  v5:= 1I;
  #L48a814.  v0:= v6 @kind object;
  #L48a816.  v2:= v7 @kind object;
  #L48a818.  v3:= v8 @kind object;
  #L48a81a.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lrx/internal/operators/OnSubscribeCombineLatest;.<init>:([Lrx/Observable;Ljava/lang/Iterable;Lrx/functions/FuncN;IZ)V` @kind direct;
  #L48a820.  call temp:= `create`(v6) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48a826.  v7:= temp @kind object;
  #L48a828.  return v7 @kind object;
}
procedure `rx.Observable` `concat`(`java.lang.Iterable` v0 @kind object) @signature `Lrx/Observable;.concat:(Ljava/lang/Iterable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a85c.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L48a862.  v0:= temp @kind object;
  #L48a864.  call temp:= `concat`(v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48a86a.  v0:= temp @kind object;
  #L48a86c.  return v0 @kind object;
}
procedure `rx.Observable` `concat`(`rx.Observable` v1 @kind object) @signature `Lrx/Observable;.concat:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48a880.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L48a886.  v0:= temp @kind object;
  #L48a888.  call temp:= `concatMap`(v1, v0) @signature `Lrx/Observable;.concatMap:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48a88e.  v1:= temp @kind object;
  #L48a890.  return v1 @kind object;
}
procedure `rx.Observable` `concat`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a8a4.  call temp:= `just`(v0, v1) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48a8aa.  v0:= temp @kind object;
  #L48a8ac.  call temp:= `concat`(v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48a8b2.  v0:= temp @kind object;
  #L48a8b4.  return v0 @kind object;
}
procedure `rx.Observable` `concat`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a8c8.  call temp:= `just`(v0, v1, v2) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48a8ce.  v0:= temp @kind object;
  #L48a8d0.  call temp:= `concat`(v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48a8d6.  v0:= temp @kind object;
  #L48a8d8.  return v0 @kind object;
}
procedure `rx.Observable` `concat`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a8ec.  call temp:= `just`(v0, v1, v2, v3) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48a8f2.  v0:= temp @kind object;
  #L48a8f4.  call temp:= `concat`(v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48a8fa.  v0:= temp @kind object;
  #L48a8fc.  return v0 @kind object;
}
procedure `rx.Observable` `concat`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a910.  call temp:= `just`(v0, v1, v2, v3, v4) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48a916.  v0:= temp @kind object;
  #L48a918.  call temp:= `concat`(v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48a91e.  v0:= temp @kind object;
  #L48a920.  return v0 @kind object;
}
procedure `rx.Observable` `concat`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a934.  call temp:= `just`(v0, v1, v2, v3, v4, v5) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48a93a.  v0:= temp @kind object;
  #L48a93c.  call temp:= `concat`(v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48a942.  v0:= temp @kind object;
  #L48a944.  return v0 @kind object;
}
procedure `rx.Observable` `concat`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a958.  call temp:= `just`(v0, v1, v2, v3, v4, v5, v6) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48a95e.  v0:= temp @kind object;
  #L48a960.  call temp:= `concat`(v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48a966.  v0:= temp @kind object;
  #L48a968.  return v0 @kind object;
}
procedure `rx.Observable` `concat`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a97c.  call temp:= `just`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48a982.  v0:= temp @kind object;
  #L48a984.  call temp:= `concat`(v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48a98a.  v0:= temp @kind object;
  #L48a98c.  return v0 @kind object;
}
procedure `rx.Observable` `concat`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a9a0.  call temp:= `just`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48a9a6.  v0:= temp @kind object;
  #L48a9a8.  call temp:= `concat`(v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48a9ae.  v0:= temp @kind object;
  #L48a9b0.  return v0 @kind object;
}
procedure `rx.Observable` `concatDelayError`(`java.lang.Iterable` v0 @kind object) @signature `Lrx/Observable;.concatDelayError:(Ljava/lang/Iterable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a9c4.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L48a9ca.  v0:= temp @kind object;
  #L48a9cc.  call temp:= `concatDelayError`(v0) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48a9d2.  v0:= temp @kind object;
  #L48a9d4.  return v0 @kind object;
}
procedure `rx.Observable` `concatDelayError`(`rx.Observable` v1 @kind object) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48a9e8.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L48a9ee.  v0:= temp @kind object;
  #L48a9f0.  call temp:= `concatMapDelayError`(v1, v0) @signature `Lrx/Observable;.concatMapDelayError:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48a9f6.  v1:= temp @kind object;
  #L48a9f8.  return v1 @kind object;
}
procedure `rx.Observable` `concatDelayError`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48aa0c.  call temp:= `just`(v0, v1) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48aa12.  v0:= temp @kind object;
  #L48aa14.  call temp:= `concatDelayError`(v0) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48aa1a.  v0:= temp @kind object;
  #L48aa1c.  return v0 @kind object;
}
procedure `rx.Observable` `concatDelayError`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48aa30.  call temp:= `just`(v0, v1, v2) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48aa36.  v0:= temp @kind object;
  #L48aa38.  call temp:= `concatDelayError`(v0) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48aa3e.  v0:= temp @kind object;
  #L48aa40.  return v0 @kind object;
}
procedure `rx.Observable` `concatDelayError`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48aa54.  call temp:= `just`(v0, v1, v2, v3) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48aa5a.  v0:= temp @kind object;
  #L48aa5c.  call temp:= `concatDelayError`(v0) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48aa62.  v0:= temp @kind object;
  #L48aa64.  return v0 @kind object;
}
procedure `rx.Observable` `concatDelayError`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48aa78.  call temp:= `just`(v0, v1, v2, v3, v4) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48aa7e.  v0:= temp @kind object;
  #L48aa80.  call temp:= `concatDelayError`(v0) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48aa86.  v0:= temp @kind object;
  #L48aa88.  return v0 @kind object;
}
procedure `rx.Observable` `concatDelayError`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48aa9c.  call temp:= `just`(v0, v1, v2, v3, v4, v5) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48aaa2.  v0:= temp @kind object;
  #L48aaa4.  call temp:= `concatDelayError`(v0) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48aaaa.  v0:= temp @kind object;
  #L48aaac.  return v0 @kind object;
}
procedure `rx.Observable` `concatDelayError`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48aac0.  call temp:= `just`(v0, v1, v2, v3, v4, v5, v6) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48aac6.  v0:= temp @kind object;
  #L48aac8.  call temp:= `concatDelayError`(v0) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48aace.  v0:= temp @kind object;
  #L48aad0.  return v0 @kind object;
}
procedure `rx.Observable` `concatDelayError`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48aae4.  call temp:= `just`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48aaea.  v0:= temp @kind object;
  #L48aaec.  call temp:= `concatDelayError`(v0) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48aaf2.  v0:= temp @kind object;
  #L48aaf4.  return v0 @kind object;
}
procedure `rx.Observable` `concatDelayError`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48ab08.  call temp:= `just`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48ab0e.  v0:= temp @kind object;
  #L48ab10.  call temp:= `concatDelayError`(v0) @signature `Lrx/Observable;.concatDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48ab16.  v0:= temp @kind object;
  #L48ab18.  return v0 @kind object;
}
procedure `rx.Observable` `concatEager`(`java.lang.Iterable` v1 @kind object) @signature `Lrx/Observable;.concatEager:(Ljava/lang/Iterable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48ab2c.  call temp:= `from`(v1) @signature `Lrx/Observable;.from:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L48ab32.  v1:= temp @kind object;
  #L48ab34.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L48ab3a.  v0:= temp @kind object;
  #L48ab3c.  call temp:= `concatMapEager`(v1, v0) @signature `Lrx/Observable;.concatMapEager:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48ab42.  v1:= temp @kind object;
  #L48ab44.  return v1 @kind object;
}
procedure `rx.Observable` `concatEager`(`java.lang.Iterable` v1 @kind object, `int` v2 ) @signature `Lrx/Observable;.concatEager:(Ljava/lang/Iterable;I)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48ab58.  call temp:= `from`(v1) @signature `Lrx/Observable;.from:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L48ab5e.  v1:= temp @kind object;
  #L48ab60.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L48ab66.  v0:= temp @kind object;
  #L48ab68.  call temp:= `concatMapEager`(v1, v0, v2) @signature `Lrx/Observable;.concatMapEager:(Lrx/functions/Func1;I)Lrx/Observable;` @kind virtual;
  #L48ab6e.  v1:= temp @kind object;
  #L48ab70.  return v1 @kind object;
}
procedure `rx.Observable` `concatEager`(`rx.Observable` v1 @kind object) @signature `Lrx/Observable;.concatEager:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48ab84.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L48ab8a.  v0:= temp @kind object;
  #L48ab8c.  call temp:= `concatMapEager`(v1, v0) @signature `Lrx/Observable;.concatMapEager:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48ab92.  v1:= temp @kind object;
  #L48ab94.  return v1 @kind object;
}
procedure `rx.Observable` `concatEager`(`rx.Observable` v1 @kind object, `int` v2 ) @signature `Lrx/Observable;.concatEager:(Lrx/Observable;I)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48aba8.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L48abae.  v0:= temp @kind object;
  #L48abb0.  call temp:= `concatMapEager`(v1, v0, v2) @signature `Lrx/Observable;.concatMapEager:(Lrx/functions/Func1;I)Lrx/Observable;` @kind virtual;
  #L48abb6.  v1:= temp @kind object;
  #L48abb8.  return v1 @kind object;
}
procedure `rx.Observable` `concatEager`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object) @signature `Lrx/Observable;.concatEager:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48abcc.  v0:= 2I;
  #L48abce.  v0:= new `rx.Observable`[v0];
  #L48abd2.  v1:= 0I;
  #L48abd4.  v0[v1]:= v2 @kind object;
  #L48abd8.  v2:= 1I;
  #L48abda.  v0[v2]:= v3 @kind object;
  #L48abde.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48abe4.  v2:= temp @kind object;
  #L48abe6.  call temp:= `concatEager`(v2) @signature `Lrx/Observable;.concatEager:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L48abec.  v2:= temp @kind object;
  #L48abee.  return v2 @kind object;
}
procedure `rx.Observable` `concatEager`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object) @signature `Lrx/Observable;.concatEager:(Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48ac00.  v0:= 3I;
  #L48ac02.  v0:= new `rx.Observable`[v0];
  #L48ac06.  v1:= 0I;
  #L48ac08.  v0[v1]:= v2 @kind object;
  #L48ac0c.  v2:= 1I;
  #L48ac0e.  v0[v2]:= v3 @kind object;
  #L48ac12.  v2:= 2I;
  #L48ac14.  v0[v2]:= v4 @kind object;
  #L48ac18.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48ac1e.  v2:= temp @kind object;
  #L48ac20.  call temp:= `concatEager`(v2) @signature `Lrx/Observable;.concatEager:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L48ac26.  v2:= temp @kind object;
  #L48ac28.  return v2 @kind object;
}
procedure `rx.Observable` `concatEager`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object) @signature `Lrx/Observable;.concatEager:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48ac3c.  v0:= 4I;
  #L48ac3e.  v0:= new `rx.Observable`[v0];
  #L48ac42.  v1:= 0I;
  #L48ac44.  v0[v1]:= v2 @kind object;
  #L48ac48.  v2:= 1I;
  #L48ac4a.  v0[v2]:= v3 @kind object;
  #L48ac4e.  v2:= 2I;
  #L48ac50.  v0[v2]:= v4 @kind object;
  #L48ac54.  v2:= 3I;
  #L48ac56.  v0[v2]:= v5 @kind object;
  #L48ac5a.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48ac60.  v2:= temp @kind object;
  #L48ac62.  call temp:= `concatEager`(v2) @signature `Lrx/Observable;.concatEager:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L48ac68.  v2:= temp @kind object;
  #L48ac6a.  return v2 @kind object;
}
procedure `rx.Observable` `concatEager`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object) @signature `Lrx/Observable;.concatEager:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48ac7c.  v0:= 5I;
  #L48ac7e.  v0:= new `rx.Observable`[v0];
  #L48ac82.  v1:= 0I;
  #L48ac84.  v0[v1]:= v2 @kind object;
  #L48ac88.  v2:= 1I;
  #L48ac8a.  v0[v2]:= v3 @kind object;
  #L48ac8e.  v2:= 2I;
  #L48ac90.  v0[v2]:= v4 @kind object;
  #L48ac94.  v2:= 3I;
  #L48ac96.  v0[v2]:= v5 @kind object;
  #L48ac9a.  v2:= 4I;
  #L48ac9c.  v0[v2]:= v6 @kind object;
  #L48aca0.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48aca6.  v2:= temp @kind object;
  #L48aca8.  call temp:= `concatEager`(v2) @signature `Lrx/Observable;.concatEager:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L48acae.  v2:= temp @kind object;
  #L48acb0.  return v2 @kind object;
}
procedure `rx.Observable` `concatEager`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object) @signature `Lrx/Observable;.concatEager:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48acc4.  v0:= 6I;
  #L48acc6.  v0:= new `rx.Observable`[v0];
  #L48acca.  v1:= 0I;
  #L48accc.  v0[v1]:= v2 @kind object;
  #L48acd0.  v2:= 1I;
  #L48acd2.  v0[v2]:= v3 @kind object;
  #L48acd6.  v2:= 2I;
  #L48acd8.  v0[v2]:= v4 @kind object;
  #L48acdc.  v2:= 3I;
  #L48acde.  v0[v2]:= v5 @kind object;
  #L48ace2.  v2:= 4I;
  #L48ace4.  v0[v2]:= v6 @kind object;
  #L48ace8.  v2:= 5I;
  #L48acea.  v0[v2]:= v7 @kind object;
  #L48acee.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48acf4.  v2:= temp @kind object;
  #L48acf6.  call temp:= `concatEager`(v2) @signature `Lrx/Observable;.concatEager:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L48acfc.  v2:= temp @kind object;
  #L48acfe.  return v2 @kind object;
}
procedure `rx.Observable` `concatEager`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object) @signature `Lrx/Observable;.concatEager:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48ad10.  v0:= 7I;
  #L48ad12.  v0:= new `rx.Observable`[v0];
  #L48ad16.  v1:= 0I;
  #L48ad18.  v0[v1]:= v2 @kind object;
  #L48ad1c.  v2:= 1I;
  #L48ad1e.  v0[v2]:= v3 @kind object;
  #L48ad22.  v2:= 2I;
  #L48ad24.  v0[v2]:= v4 @kind object;
  #L48ad28.  v2:= 3I;
  #L48ad2a.  v0[v2]:= v5 @kind object;
  #L48ad2e.  v2:= 4I;
  #L48ad30.  v0[v2]:= v6 @kind object;
  #L48ad34.  v2:= 5I;
  #L48ad36.  v0[v2]:= v7 @kind object;
  #L48ad3a.  v2:= 6I;
  #L48ad3c.  v0[v2]:= v8 @kind object;
  #L48ad40.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48ad46.  v2:= temp @kind object;
  #L48ad48.  call temp:= `concatEager`(v2) @signature `Lrx/Observable;.concatEager:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L48ad4e.  v2:= temp @kind object;
  #L48ad50.  return v2 @kind object;
}
procedure `rx.Observable` `concatEager`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object, `rx.Observable` v9 @kind object) @signature `Lrx/Observable;.concatEager:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48ad64.  v0:= 8I;
  #L48ad68.  v0:= new `rx.Observable`[v0];
  #L48ad6c.  v1:= 0I;
  #L48ad6e.  v0[v1]:= v2 @kind object;
  #L48ad72.  v2:= 1I;
  #L48ad74.  v0[v2]:= v3 @kind object;
  #L48ad78.  v2:= 2I;
  #L48ad7a.  v0[v2]:= v4 @kind object;
  #L48ad7e.  v2:= 3I;
  #L48ad80.  v0[v2]:= v5 @kind object;
  #L48ad84.  v2:= 4I;
  #L48ad86.  v0[v2]:= v6 @kind object;
  #L48ad8a.  v2:= 5I;
  #L48ad8c.  v0[v2]:= v7 @kind object;
  #L48ad90.  v2:= 6I;
  #L48ad92.  v0[v2]:= v8 @kind object;
  #L48ad96.  v2:= 7I;
  #L48ad98.  v0[v2]:= v9 @kind object;
  #L48ad9c.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48ada2.  v2:= temp @kind object;
  #L48ada4.  call temp:= `concatEager`(v2) @signature `Lrx/Observable;.concatEager:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L48adaa.  v2:= temp @kind object;
  #L48adac.  return v2 @kind object;
}
procedure `rx.Observable` `concatEager`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object, `rx.Observable` v9 @kind object, `rx.Observable` v10 @kind object) @signature `Lrx/Observable;.concatEager:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48adc0.  v0:= 9I;
  #L48adc4.  v0:= new `rx.Observable`[v0];
  #L48adc8.  v1:= 0I;
  #L48adca.  v0[v1]:= v2 @kind object;
  #L48adce.  v2:= 1I;
  #L48add0.  v0[v2]:= v3 @kind object;
  #L48add4.  v2:= 2I;
  #L48add6.  v0[v2]:= v4 @kind object;
  #L48adda.  v2:= 3I;
  #L48addc.  v0[v2]:= v5 @kind object;
  #L48ade0.  v2:= 4I;
  #L48ade2.  v0[v2]:= v6 @kind object;
  #L48ade6.  v2:= 5I;
  #L48ade8.  v0[v2]:= v7 @kind object;
  #L48adec.  v2:= 6I;
  #L48adee.  v0[v2]:= v8 @kind object;
  #L48adf2.  v2:= 7I;
  #L48adf4.  v0[v2]:= v9 @kind object;
  #L48adf8.  v2:= 8I;
  #L48adfc.  v0[v2]:= v10 @kind object;
  #L48ae00.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L48ae06.  v2:= temp @kind object;
  #L48ae08.  call temp:= `concatEager`(v2) @signature `Lrx/Observable;.concatEager:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L48ae0e.  v2:= temp @kind object;
  #L48ae10.  return v2 @kind object;
}
procedure `rx.Observable` `create`(`rx.Observable$OnSubscribe` v1 @kind object) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48b064.  v0:= new `rx.Observable`;
  #L48b068.  call temp:= `onCreate`(v1) @signature `Lrx/plugins/RxJavaHooks;.onCreate:(Lrx/Observable$OnSubscribe;)Lrx/Observable$OnSubscribe;` @kind static;
  #L48b06e.  v1:= temp @kind object;
  #L48b070.  call `<init>`(v0, v1) @signature `Lrx/Observable;.<init>:(Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L48b076.  return v0 @kind object;
}
procedure `rx.Observable` `create`(`rx.observables.AsyncOnSubscribe` v0 @kind object) @signature `Lrx/Observable;.create:(Lrx/observables/AsyncOnSubscribe;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48b088.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b08e.  v0:= temp @kind object;
  #L48b090.  return v0 @kind object;
}
procedure `rx.Observable` `create`(`rx.observables.SyncOnSubscribe` v0 @kind object) @signature `Lrx/Observable;.create:(Lrx/observables/SyncOnSubscribe;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48b0a4.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b0aa.  v0:= temp @kind object;
  #L48b0ac.  return v0 @kind object;
}
procedure `rx.Observable` `defer`(`rx.functions.Func0` v1 @kind object) @signature `Lrx/Observable;.defer:(Lrx/functions/Func0;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48b150.  v0:= new `rx.internal.operators.OnSubscribeDefer`;
  #L48b154.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeDefer;.<init>:(Lrx/functions/Func0;)V` @kind direct;
  #L48b15a.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b160.  v1:= temp @kind object;
  #L48b162.  return v1 @kind object;
}
procedure `rx.Observable` `empty`() @signature `Lrx/Observable;.empty:()Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48b5bc.  call temp:= `instance`() @signature `Lrx/internal/operators/EmptyObservableHolder;.instance:()Lrx/Observable;` @kind static;
  #L48b5c2.  v0:= temp @kind object;
  #L48b5c4.  return v0 @kind object;
}
procedure `rx.Observable` `error`(`java.lang.Throwable` v1 @kind object) @signature `Lrx/Observable;.error:(Ljava/lang/Throwable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48b5d8.  v0:= new `rx.internal.operators.OnSubscribeThrow`;
  #L48b5dc.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeThrow;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L48b5e2.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b5e8.  v1:= temp @kind object;
  #L48b5ea.  return v1 @kind object;
}
procedure `rx.Observable` `from`(`java.lang.Iterable` v1 @kind object) @signature `Lrx/Observable;.from:(Ljava/lang/Iterable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48b8a8.  v0:= new `rx.internal.operators.OnSubscribeFromIterable`;
  #L48b8ac.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeFromIterable;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L48b8b2.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b8b8.  v1:= temp @kind object;
  #L48b8ba.  return v1 @kind object;
}
procedure `rx.Observable` `from`(`java.util.concurrent.Future` v0 @kind object) @signature `Lrx/Observable;.from:(Ljava/util/concurrent/Future;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48b918.  call temp:= `toObservableFuture`(v0) @signature `Lrx/internal/operators/OnSubscribeToObservableFuture;.toObservableFuture:(Ljava/util/concurrent/Future;)Lrx/Observable$OnSubscribe;` @kind static;
  #L48b91e.  v0:= temp @kind object;
  #L48b920.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b926.  v0:= temp @kind object;
  #L48b928.  return v0 @kind object;
}
procedure `rx.Observable` `from`(`java.util.concurrent.Future` v0 @kind object, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lrx/Observable;.from:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48b93c.  call temp:= `toObservableFuture`(v0, v1, v3) @signature `Lrx/internal/operators/OnSubscribeToObservableFuture;.toObservableFuture:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)Lrx/Observable$OnSubscribe;` @kind static;
  #L48b942.  v0:= temp @kind object;
  #L48b944.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b94a.  v0:= temp @kind object;
  #L48b94c.  return v0 @kind object;
}
procedure `rx.Observable` `from`(`java.util.concurrent.Future` v0 @kind object, `rx.Scheduler` v1 @kind object) @signature `Lrx/Observable;.from:(Ljava/util/concurrent/Future;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48b960.  call temp:= `toObservableFuture`(v0) @signature `Lrx/internal/operators/OnSubscribeToObservableFuture;.toObservableFuture:(Ljava/util/concurrent/Future;)Lrx/Observable$OnSubscribe;` @kind static;
  #L48b966.  v0:= temp @kind object;
  #L48b968.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b96e.  v0:= temp @kind object;
  #L48b970.  call temp:= `subscribeOn`(v0, v1) @signature `Lrx/Observable;.subscribeOn:(Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48b976.  v0:= temp @kind object;
  #L48b978.  return v0 @kind object;
}
procedure `rx.Observable` `from`(`java.lang.Object`[] v2 @kind object) @signature `Lrx/Observable;.from:([Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48b8cc.  v0:= length @variable v2;
  #L48b8ce.  if v0 != 0 then goto L48b8dc;
  #L48b8d2.  call temp:= `empty`() @signature `Lrx/Observable;.empty:()Lrx/Observable;` @kind static;
  #L48b8d8.  v2:= temp @kind object;
  #L48b8da.  return v2 @kind object;
  #L48b8dc.  v1:= 1I;
  #L48b8de.  if v0 != v1 then goto L48b8f2;
  #L48b8e2.  v0:= 0I;
  #L48b8e4.  v2:= v2[v0] @kind object;
  #L48b8e8.  call temp:= `just`(v2) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48b8ee.  v2:= temp @kind object;
  #L48b8f0.  return v2 @kind object;
  #L48b8f2.  v0:= new `rx.internal.operators.OnSubscribeFromArray`;
  #L48b8f6.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OnSubscribeFromArray;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L48b8fc.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b902.  v2:= temp @kind object;
  #L48b904.  return v2 @kind object;
}
procedure `rx.Observable` `fromCallable`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lrx/Observable;.fromCallable:(Ljava/util/concurrent/Callable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48b98c.  v0:= new `rx.internal.operators.OnSubscribeFromCallable`;
  #L48b990.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L48b996.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b99c.  v1:= temp @kind object;
  #L48b99e.  return v1 @kind object;
}
procedure `rx.Observable` `fromEmitter`(`rx.functions.Action1` v1 @kind object, `rx.Emitter$BackpressureMode` v2 @kind object) @signature `Lrx/Observable;.fromEmitter:(Lrx/functions/Action1;Lrx/Emitter$BackpressureMode;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48b9b0.  v0:= new `rx.internal.operators.OnSubscribeFromEmitter`;
  #L48b9b4.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/OnSubscribeFromEmitter;.<init>:(Lrx/functions/Action1;Lrx/Emitter$BackpressureMode;)V` @kind direct;
  #L48b9ba.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b9c0.  v1:= temp @kind object;
  #L48b9c2.  return v1 @kind object;
}
procedure `rx.Observable` `interval`(`long` v6 , `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lrx/Observable;.interval:(JJLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48baf4.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48bafa.  v5:= temp @kind object;
  #L48bafc.  v0:= v6 @kind wide;
  #L48bafe.  v2:= v8 @kind wide;
  #L48bb00.  v4:= v10 @kind object;
  #L48bb02.  call temp:= `interval`(v0, v2, v4, v5) @signature `Lrx/Observable;.interval:(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind static;
  #L48bb08.  v6:= temp @kind object;
  #L48bb0a.  return v6 @kind object;
}
procedure `rx.Observable` `interval`(`long` v8 , `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `rx.Scheduler` v13 @kind object) @signature `Lrx/Observable;.interval:(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L48bb1c.  v7:= new `rx.internal.operators.OnSubscribeTimerPeriodically`;
  #L48bb20.  v0:= v7 @kind object;
  #L48bb22.  v1:= v8 @kind wide;
  #L48bb24.  v3:= v10 @kind wide;
  #L48bb26.  v5:= v12 @kind object;
  #L48bb28.  v6:= v13 @kind object;
  #L48bb2a.  call `<init>`(v0, v1, v3, v5, v6) @signature `Lrx/internal/operators/OnSubscribeTimerPeriodically;.<init>:(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @kind direct;
  #L48bb30.  call temp:= `create`(v7) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48bb36.  v8:= temp @kind object;
  #L48bb38.  return v8 @kind object;
}
procedure `rx.Observable` `interval`(`long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lrx/Observable;.interval:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48baa8.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48baae.  v5:= temp @kind object;
  #L48bab0.  v0:= v6 @kind wide;
  #L48bab2.  v2:= v6 @kind wide;
  #L48bab4.  v4:= v8 @kind object;
  #L48bab6.  call temp:= `interval`(v0, v2, v4, v5) @signature `Lrx/Observable;.interval:(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind static;
  #L48babc.  v6:= temp @kind object;
  #L48babe.  return v6 @kind object;
}
procedure `rx.Observable` `interval`(`long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object, `rx.Scheduler` v9 @kind object) @signature `Lrx/Observable;.interval:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48bad0.  v0:= v6 @kind wide;
  #L48bad2.  v2:= v6 @kind wide;
  #L48bad4.  v4:= v8 @kind object;
  #L48bad6.  v5:= v9 @kind object;
  #L48bad8.  call temp:= `interval`(v0, v2, v4, v5) @signature `Lrx/Observable;.interval:(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind static;
  #L48bade.  v6:= temp @kind object;
  #L48bae0.  return v6 @kind object;
}
procedure `rx.Observable` `just`(`java.lang.Object` v0 @kind object) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48bb9c.  call temp:= `create`(v0) @signature `Lrx/internal/util/ScalarSynchronousObservable;.create:(Ljava/lang/Object;)Lrx/internal/util/ScalarSynchronousObservable;` @kind static;
  #L48bba2.  v0:= temp @kind object;
  #L48bba4.  return v0 @kind object;
}
procedure `rx.Observable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48bbb8.  v0:= 2I;
  #L48bbba.  v0:= new `java.lang.Object`[v0];
  #L48bbbe.  v1:= 0I;
  #L48bbc0.  v0[v1]:= v2 @kind object;
  #L48bbc4.  v2:= 1I;
  #L48bbc6.  v0[v2]:= v3 @kind object;
  #L48bbca.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L48bbce.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:([Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48bbd4.  v2:= temp @kind object;
  #L48bbd6.  return v2 @kind object;
}
procedure `rx.Observable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48bbe8.  v0:= 3I;
  #L48bbea.  v0:= new `java.lang.Object`[v0];
  #L48bbee.  v1:= 0I;
  #L48bbf0.  v0[v1]:= v2 @kind object;
  #L48bbf4.  v2:= 1I;
  #L48bbf6.  v0[v2]:= v3 @kind object;
  #L48bbfa.  v2:= 2I;
  #L48bbfc.  v0[v2]:= v4 @kind object;
  #L48bc00.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L48bc04.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:([Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48bc0a.  v2:= temp @kind object;
  #L48bc0c.  return v2 @kind object;
}
procedure `rx.Observable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48bc20.  v0:= 4I;
  #L48bc22.  v0:= new `java.lang.Object`[v0];
  #L48bc26.  v1:= 0I;
  #L48bc28.  v0[v1]:= v2 @kind object;
  #L48bc2c.  v2:= 1I;
  #L48bc2e.  v0[v2]:= v3 @kind object;
  #L48bc32.  v2:= 2I;
  #L48bc34.  v0[v2]:= v4 @kind object;
  #L48bc38.  v2:= 3I;
  #L48bc3a.  v0[v2]:= v5 @kind object;
  #L48bc3e.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L48bc42.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:([Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48bc48.  v2:= temp @kind object;
  #L48bc4a.  return v2 @kind object;
}
procedure `rx.Observable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48bc5c.  v0:= 5I;
  #L48bc5e.  v0:= new `java.lang.Object`[v0];
  #L48bc62.  v1:= 0I;
  #L48bc64.  v0[v1]:= v2 @kind object;
  #L48bc68.  v2:= 1I;
  #L48bc6a.  v0[v2]:= v3 @kind object;
  #L48bc6e.  v2:= 2I;
  #L48bc70.  v0[v2]:= v4 @kind object;
  #L48bc74.  v2:= 3I;
  #L48bc76.  v0[v2]:= v5 @kind object;
  #L48bc7a.  v2:= 4I;
  #L48bc7c.  v0[v2]:= v6 @kind object;
  #L48bc80.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L48bc84.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:([Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48bc8a.  v2:= temp @kind object;
  #L48bc8c.  return v2 @kind object;
}
procedure `rx.Observable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48bca0.  v0:= 6I;
  #L48bca2.  v0:= new `java.lang.Object`[v0];
  #L48bca6.  v1:= 0I;
  #L48bca8.  v0[v1]:= v2 @kind object;
  #L48bcac.  v2:= 1I;
  #L48bcae.  v0[v2]:= v3 @kind object;
  #L48bcb2.  v2:= 2I;
  #L48bcb4.  v0[v2]:= v4 @kind object;
  #L48bcb8.  v2:= 3I;
  #L48bcba.  v0[v2]:= v5 @kind object;
  #L48bcbe.  v2:= 4I;
  #L48bcc0.  v0[v2]:= v6 @kind object;
  #L48bcc4.  v2:= 5I;
  #L48bcc6.  v0[v2]:= v7 @kind object;
  #L48bcca.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L48bcce.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:([Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48bcd4.  v2:= temp @kind object;
  #L48bcd6.  return v2 @kind object;
}
procedure `rx.Observable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48bce8.  v0:= 7I;
  #L48bcea.  v0:= new `java.lang.Object`[v0];
  #L48bcee.  v1:= 0I;
  #L48bcf0.  v0[v1]:= v2 @kind object;
  #L48bcf4.  v2:= 1I;
  #L48bcf6.  v0[v2]:= v3 @kind object;
  #L48bcfa.  v2:= 2I;
  #L48bcfc.  v0[v2]:= v4 @kind object;
  #L48bd00.  v2:= 3I;
  #L48bd02.  v0[v2]:= v5 @kind object;
  #L48bd06.  v2:= 4I;
  #L48bd08.  v0[v2]:= v6 @kind object;
  #L48bd0c.  v2:= 5I;
  #L48bd0e.  v0[v2]:= v7 @kind object;
  #L48bd12.  v2:= 6I;
  #L48bd14.  v0[v2]:= v8 @kind object;
  #L48bd18.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L48bd1c.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:([Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48bd22.  v2:= temp @kind object;
  #L48bd24.  return v2 @kind object;
}
procedure `rx.Observable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48bd38.  v0:= 8I;
  #L48bd3c.  v0:= new `java.lang.Object`[v0];
  #L48bd40.  v1:= 0I;
  #L48bd42.  v0[v1]:= v2 @kind object;
  #L48bd46.  v2:= 1I;
  #L48bd48.  v0[v2]:= v3 @kind object;
  #L48bd4c.  v2:= 2I;
  #L48bd4e.  v0[v2]:= v4 @kind object;
  #L48bd52.  v2:= 3I;
  #L48bd54.  v0[v2]:= v5 @kind object;
  #L48bd58.  v2:= 4I;
  #L48bd5a.  v0[v2]:= v6 @kind object;
  #L48bd5e.  v2:= 5I;
  #L48bd60.  v0[v2]:= v7 @kind object;
  #L48bd64.  v2:= 6I;
  #L48bd66.  v0[v2]:= v8 @kind object;
  #L48bd6a.  v2:= 7I;
  #L48bd6c.  v0[v2]:= v9 @kind object;
  #L48bd70.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L48bd74.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:([Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48bd7a.  v2:= temp @kind object;
  #L48bd7c.  return v2 @kind object;
}
procedure `rx.Observable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48bd90.  v0:= 9I;
  #L48bd94.  v0:= new `java.lang.Object`[v0];
  #L48bd98.  v1:= 0I;
  #L48bd9a.  v0[v1]:= v2 @kind object;
  #L48bd9e.  v2:= 1I;
  #L48bda0.  v0[v2]:= v3 @kind object;
  #L48bda4.  v2:= 2I;
  #L48bda6.  v0[v2]:= v4 @kind object;
  #L48bdaa.  v2:= 3I;
  #L48bdac.  v0[v2]:= v5 @kind object;
  #L48bdb0.  v2:= 4I;
  #L48bdb2.  v0[v2]:= v6 @kind object;
  #L48bdb6.  v2:= 5I;
  #L48bdb8.  v0[v2]:= v7 @kind object;
  #L48bdbc.  v2:= 6I;
  #L48bdbe.  v0[v2]:= v8 @kind object;
  #L48bdc2.  v2:= 7I;
  #L48bdc4.  v0[v2]:= v9 @kind object;
  #L48bdc8.  v2:= 8I;
  #L48bdcc.  v0[v2]:= v10 @kind object;
  #L48bdd0.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L48bdd4.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:([Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48bdda.  v2:= temp @kind object;
  #L48bddc.  return v2 @kind object;
}
procedure `rx.Observable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object, `java.lang.Object` v11 @kind object) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48bdf0.  v0:= 10I;
  #L48bdf4.  v0:= new `java.lang.Object`[v0];
  #L48bdf8.  v1:= 0I;
  #L48bdfa.  v0[v1]:= v2 @kind object;
  #L48bdfe.  v2:= 1I;
  #L48be00.  v0[v2]:= v3 @kind object;
  #L48be04.  v2:= 2I;
  #L48be06.  v0[v2]:= v4 @kind object;
  #L48be0a.  v2:= 3I;
  #L48be0c.  v0[v2]:= v5 @kind object;
  #L48be10.  v2:= 4I;
  #L48be12.  v0[v2]:= v6 @kind object;
  #L48be16.  v2:= 5I;
  #L48be18.  v0[v2]:= v7 @kind object;
  #L48be1c.  v2:= 6I;
  #L48be1e.  v0[v2]:= v8 @kind object;
  #L48be22.  v2:= 7I;
  #L48be24.  v0[v2]:= v9 @kind object;
  #L48be28.  v2:= 8I;
  #L48be2c.  v0[v2]:= v10 @kind object;
  #L48be30.  v2:= 9I;
  #L48be34.  v0[v2]:= v11 @kind object;
  #L48be38.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L48be3c.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:([Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48be42.  v2:= temp @kind object;
  #L48be44.  return v2 @kind object;
}
procedure `rx.Observable` `mapNotification`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object, `rx.functions.Func1` v3 @kind object, `rx.functions.Func0` v4 @kind object) @signature `Lrx/Observable;.mapNotification:(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;)Lrx/Observable;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L48bf60.  v0:= new `rx.internal.operators.OperatorMapNotification`;
  #L48bf64.  call `<init>`(v0, v2, v3, v4) @signature `Lrx/internal/operators/OperatorMapNotification;.<init>:(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;)V` @kind direct;
  #L48bf6a.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48bf70.  v2:= temp @kind object;
  #L48bf72.  return v2 @kind object;
}
procedure `rx.Observable` `merge`(`java.lang.Iterable` v0 @kind object) @signature `Lrx/Observable;.merge:(Ljava/lang/Iterable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48bfa8.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L48bfae.  v0:= temp @kind object;
  #L48bfb0.  call temp:= `merge`(v0) @signature `Lrx/Observable;.merge:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48bfb6.  v0:= temp @kind object;
  #L48bfb8.  return v0 @kind object;
}
procedure `rx.Observable` `merge`(`java.lang.Iterable` v0 @kind object, `int` v1 ) @signature `Lrx/Observable;.merge:(Ljava/lang/Iterable;I)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48bfcc.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L48bfd2.  v0:= temp @kind object;
  #L48bfd4.  call temp:= `merge`(v0, v1) @signature `Lrx/Observable;.merge:(Lrx/Observable;I)Lrx/Observable;` @kind static;
  #L48bfda.  v0:= temp @kind object;
  #L48bfdc.  return v0 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Observable` v2 @kind object) @signature `Lrx/Observable;.merge:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48bff0.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L48bff6.  v0:= temp @kind object;
  #L48bff8.  v1:= constclass @type ^`rx.internal.util.ScalarSynchronousObservable` @kind object;
  #L48bffc.  if v0 != v1 then goto L48c016;
  #L48c000.  v2:= (`rx.internal.util.ScalarSynchronousObservable`) v2 @kind object;
  #L48c004.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L48c00a.  v0:= temp @kind object;
  #L48c00c.  call temp:= `scalarFlatMap`(v2, v0) @signature `Lrx/internal/util/ScalarSynchronousObservable;.scalarFlatMap:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48c012.  v2:= temp @kind object;
  #L48c014.  return v2 @kind object;
  #L48c016.  v0:= 0I;
  #L48c018.  call temp:= `instance`(v0) @signature `Lrx/internal/operators/OperatorMerge;.instance:(Z)Lrx/internal/operators/OperatorMerge;` @kind static;
  #L48c01e.  v0:= temp @kind object;
  #L48c020.  call temp:= `lift`(v2, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48c026.  v2:= temp @kind object;
  #L48c028.  return v2 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Observable` v2 @kind object, `int` v3 ) @signature `Lrx/Observable;.merge:(Lrx/Observable;I)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48c03c.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L48c042.  v0:= temp @kind object;
  #L48c044.  v1:= constclass @type ^`rx.internal.util.ScalarSynchronousObservable` @kind object;
  #L48c048.  if v0 != v1 then goto L48c062;
  #L48c04c.  v2:= (`rx.internal.util.ScalarSynchronousObservable`) v2 @kind object;
  #L48c050.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L48c056.  v3:= temp @kind object;
  #L48c058.  call temp:= `scalarFlatMap`(v2, v3) @signature `Lrx/internal/util/ScalarSynchronousObservable;.scalarFlatMap:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48c05e.  v2:= temp @kind object;
  #L48c060.  return v2 @kind object;
  #L48c062.  v0:= 0I;
  #L48c064.  call temp:= `instance`(v0, v3) @signature `Lrx/internal/operators/OperatorMerge;.instance:(ZI)Lrx/internal/operators/OperatorMerge;` @kind static;
  #L48c06a.  v3:= temp @kind object;
  #L48c06c.  call temp:= `lift`(v2, v3) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48c072.  v2:= temp @kind object;
  #L48c074.  return v2 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object) @signature `Lrx/Observable;.merge:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48c088.  v0:= 2I;
  #L48c08a.  v0:= new `rx.Observable`[v0];
  #L48c08e.  v1:= 0I;
  #L48c090.  v0[v1]:= v2 @kind object;
  #L48c094.  v2:= 1I;
  #L48c096.  v0[v2]:= v3 @kind object;
  #L48c09a.  call temp:= `merge`(v0) @signature `Lrx/Observable;.merge:([Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c0a0.  v2:= temp @kind object;
  #L48c0a2.  return v2 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object) @signature `Lrx/Observable;.merge:(Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48c0b4.  v0:= 3I;
  #L48c0b6.  v0:= new `rx.Observable`[v0];
  #L48c0ba.  v1:= 0I;
  #L48c0bc.  v0[v1]:= v2 @kind object;
  #L48c0c0.  v2:= 1I;
  #L48c0c2.  v0[v2]:= v3 @kind object;
  #L48c0c6.  v2:= 2I;
  #L48c0c8.  v0[v2]:= v4 @kind object;
  #L48c0cc.  call temp:= `merge`(v0) @signature `Lrx/Observable;.merge:([Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c0d2.  v2:= temp @kind object;
  #L48c0d4.  return v2 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object) @signature `Lrx/Observable;.merge:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48c0e8.  v0:= 4I;
  #L48c0ea.  v0:= new `rx.Observable`[v0];
  #L48c0ee.  v1:= 0I;
  #L48c0f0.  v0[v1]:= v2 @kind object;
  #L48c0f4.  v2:= 1I;
  #L48c0f6.  v0[v2]:= v3 @kind object;
  #L48c0fa.  v2:= 2I;
  #L48c0fc.  v0[v2]:= v4 @kind object;
  #L48c100.  v2:= 3I;
  #L48c102.  v0[v2]:= v5 @kind object;
  #L48c106.  call temp:= `merge`(v0) @signature `Lrx/Observable;.merge:([Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c10c.  v2:= temp @kind object;
  #L48c10e.  return v2 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object) @signature `Lrx/Observable;.merge:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48c120.  v0:= 5I;
  #L48c122.  v0:= new `rx.Observable`[v0];
  #L48c126.  v1:= 0I;
  #L48c128.  v0[v1]:= v2 @kind object;
  #L48c12c.  v2:= 1I;
  #L48c12e.  v0[v2]:= v3 @kind object;
  #L48c132.  v2:= 2I;
  #L48c134.  v0[v2]:= v4 @kind object;
  #L48c138.  v2:= 3I;
  #L48c13a.  v0[v2]:= v5 @kind object;
  #L48c13e.  v2:= 4I;
  #L48c140.  v0[v2]:= v6 @kind object;
  #L48c144.  call temp:= `merge`(v0) @signature `Lrx/Observable;.merge:([Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c14a.  v2:= temp @kind object;
  #L48c14c.  return v2 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object) @signature `Lrx/Observable;.merge:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48c160.  v0:= 6I;
  #L48c162.  v0:= new `rx.Observable`[v0];
  #L48c166.  v1:= 0I;
  #L48c168.  v0[v1]:= v2 @kind object;
  #L48c16c.  v2:= 1I;
  #L48c16e.  v0[v2]:= v3 @kind object;
  #L48c172.  v2:= 2I;
  #L48c174.  v0[v2]:= v4 @kind object;
  #L48c178.  v2:= 3I;
  #L48c17a.  v0[v2]:= v5 @kind object;
  #L48c17e.  v2:= 4I;
  #L48c180.  v0[v2]:= v6 @kind object;
  #L48c184.  v2:= 5I;
  #L48c186.  v0[v2]:= v7 @kind object;
  #L48c18a.  call temp:= `merge`(v0) @signature `Lrx/Observable;.merge:([Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c190.  v2:= temp @kind object;
  #L48c192.  return v2 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object) @signature `Lrx/Observable;.merge:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48c1a4.  v0:= 7I;
  #L48c1a6.  v0:= new `rx.Observable`[v0];
  #L48c1aa.  v1:= 0I;
  #L48c1ac.  v0[v1]:= v2 @kind object;
  #L48c1b0.  v2:= 1I;
  #L48c1b2.  v0[v2]:= v3 @kind object;
  #L48c1b6.  v2:= 2I;
  #L48c1b8.  v0[v2]:= v4 @kind object;
  #L48c1bc.  v2:= 3I;
  #L48c1be.  v0[v2]:= v5 @kind object;
  #L48c1c2.  v2:= 4I;
  #L48c1c4.  v0[v2]:= v6 @kind object;
  #L48c1c8.  v2:= 5I;
  #L48c1ca.  v0[v2]:= v7 @kind object;
  #L48c1ce.  v2:= 6I;
  #L48c1d0.  v0[v2]:= v8 @kind object;
  #L48c1d4.  call temp:= `merge`(v0) @signature `Lrx/Observable;.merge:([Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c1da.  v2:= temp @kind object;
  #L48c1dc.  return v2 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object, `rx.Observable` v9 @kind object) @signature `Lrx/Observable;.merge:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48c1f0.  v0:= 8I;
  #L48c1f4.  v0:= new `rx.Observable`[v0];
  #L48c1f8.  v1:= 0I;
  #L48c1fa.  v0[v1]:= v2 @kind object;
  #L48c1fe.  v2:= 1I;
  #L48c200.  v0[v2]:= v3 @kind object;
  #L48c204.  v2:= 2I;
  #L48c206.  v0[v2]:= v4 @kind object;
  #L48c20a.  v2:= 3I;
  #L48c20c.  v0[v2]:= v5 @kind object;
  #L48c210.  v2:= 4I;
  #L48c212.  v0[v2]:= v6 @kind object;
  #L48c216.  v2:= 5I;
  #L48c218.  v0[v2]:= v7 @kind object;
  #L48c21c.  v2:= 6I;
  #L48c21e.  v0[v2]:= v8 @kind object;
  #L48c222.  v2:= 7I;
  #L48c224.  v0[v2]:= v9 @kind object;
  #L48c228.  call temp:= `merge`(v0) @signature `Lrx/Observable;.merge:([Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c22e.  v2:= temp @kind object;
  #L48c230.  return v2 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object, `rx.Observable` v9 @kind object, `rx.Observable` v10 @kind object) @signature `Lrx/Observable;.merge:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48c244.  v0:= 9I;
  #L48c248.  v0:= new `rx.Observable`[v0];
  #L48c24c.  v1:= 0I;
  #L48c24e.  v0[v1]:= v2 @kind object;
  #L48c252.  v2:= 1I;
  #L48c254.  v0[v2]:= v3 @kind object;
  #L48c258.  v2:= 2I;
  #L48c25a.  v0[v2]:= v4 @kind object;
  #L48c25e.  v2:= 3I;
  #L48c260.  v0[v2]:= v5 @kind object;
  #L48c264.  v2:= 4I;
  #L48c266.  v0[v2]:= v6 @kind object;
  #L48c26a.  v2:= 5I;
  #L48c26c.  v0[v2]:= v7 @kind object;
  #L48c270.  v2:= 6I;
  #L48c272.  v0[v2]:= v8 @kind object;
  #L48c276.  v2:= 7I;
  #L48c278.  v0[v2]:= v9 @kind object;
  #L48c27c.  v2:= 8I;
  #L48c280.  v0[v2]:= v10 @kind object;
  #L48c284.  call temp:= `merge`(v0) @signature `Lrx/Observable;.merge:([Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c28a.  v2:= temp @kind object;
  #L48c28c.  return v2 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Observable`[] v0 @kind object) @signature `Lrx/Observable;.merge:([Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48c2a0.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:([Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48c2a6.  v0:= temp @kind object;
  #L48c2a8.  call temp:= `merge`(v0) @signature `Lrx/Observable;.merge:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c2ae.  v0:= temp @kind object;
  #L48c2b0.  return v0 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Observable`[] v0 @kind object, `int` v1 ) @signature `Lrx/Observable;.merge:([Lrx/Observable;I)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48c2c4.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:([Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48c2ca.  v0:= temp @kind object;
  #L48c2cc.  call temp:= `merge`(v0, v1) @signature `Lrx/Observable;.merge:(Lrx/Observable;I)Lrx/Observable;` @kind static;
  #L48c2d2.  v0:= temp @kind object;
  #L48c2d4.  return v0 @kind object;
}
procedure `rx.Observable` `mergeDelayError`(`java.lang.Iterable` v0 @kind object) @signature `Lrx/Observable;.mergeDelayError:(Ljava/lang/Iterable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48c2e8.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L48c2ee.  v0:= temp @kind object;
  #L48c2f0.  call temp:= `mergeDelayError`(v0) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c2f6.  v0:= temp @kind object;
  #L48c2f8.  return v0 @kind object;
}
procedure `rx.Observable` `mergeDelayError`(`java.lang.Iterable` v0 @kind object, `int` v1 ) @signature `Lrx/Observable;.mergeDelayError:(Ljava/lang/Iterable;I)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48c30c.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L48c312.  v0:= temp @kind object;
  #L48c314.  call temp:= `mergeDelayError`(v0, v1) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;I)Lrx/Observable;` @kind static;
  #L48c31a.  v0:= temp @kind object;
  #L48c31c.  return v0 @kind object;
}
procedure `rx.Observable` `mergeDelayError`(`rx.Observable` v1 @kind object) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48c330.  v0:= 1I;
  #L48c332.  call temp:= `instance`(v0) @signature `Lrx/internal/operators/OperatorMerge;.instance:(Z)Lrx/internal/operators/OperatorMerge;` @kind static;
  #L48c338.  v0:= temp @kind object;
  #L48c33a.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48c340.  v1:= temp @kind object;
  #L48c342.  return v1 @kind object;
}
procedure `rx.Observable` `mergeDelayError`(`rx.Observable` v1 @kind object, `int` v2 ) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;I)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48c354.  v0:= 1I;
  #L48c356.  call temp:= `instance`(v0, v2) @signature `Lrx/internal/operators/OperatorMerge;.instance:(ZI)Lrx/internal/operators/OperatorMerge;` @kind static;
  #L48c35c.  v2:= temp @kind object;
  #L48c35e.  call temp:= `lift`(v1, v2) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48c364.  v1:= temp @kind object;
  #L48c366.  return v1 @kind object;
}
procedure `rx.Observable` `mergeDelayError`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48c378.  call temp:= `just`(v0, v1) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48c37e.  v0:= temp @kind object;
  #L48c380.  call temp:= `mergeDelayError`(v0) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c386.  v0:= temp @kind object;
  #L48c388.  return v0 @kind object;
}
procedure `rx.Observable` `mergeDelayError`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48c39c.  call temp:= `just`(v0, v1, v2) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48c3a2.  v0:= temp @kind object;
  #L48c3a4.  call temp:= `mergeDelayError`(v0) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c3aa.  v0:= temp @kind object;
  #L48c3ac.  return v0 @kind object;
}
procedure `rx.Observable` `mergeDelayError`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48c3c0.  call temp:= `just`(v0, v1, v2, v3) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48c3c6.  v0:= temp @kind object;
  #L48c3c8.  call temp:= `mergeDelayError`(v0) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c3ce.  v0:= temp @kind object;
  #L48c3d0.  return v0 @kind object;
}
procedure `rx.Observable` `mergeDelayError`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48c3e4.  call temp:= `just`(v0, v1, v2, v3, v4) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48c3ea.  v0:= temp @kind object;
  #L48c3ec.  call temp:= `mergeDelayError`(v0) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c3f2.  v0:= temp @kind object;
  #L48c3f4.  return v0 @kind object;
}
procedure `rx.Observable` `mergeDelayError`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48c408.  call temp:= `just`(v0, v1, v2, v3, v4, v5) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48c40e.  v0:= temp @kind object;
  #L48c410.  call temp:= `mergeDelayError`(v0) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c416.  v0:= temp @kind object;
  #L48c418.  return v0 @kind object;
}
procedure `rx.Observable` `mergeDelayError`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48c42c.  call temp:= `just`(v0, v1, v2, v3, v4, v5, v6) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48c432.  v0:= temp @kind object;
  #L48c434.  call temp:= `mergeDelayError`(v0) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c43a.  v0:= temp @kind object;
  #L48c43c.  return v0 @kind object;
}
procedure `rx.Observable` `mergeDelayError`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48c450.  call temp:= `just`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48c456.  v0:= temp @kind object;
  #L48c458.  call temp:= `mergeDelayError`(v0) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c45e.  v0:= temp @kind object;
  #L48c460.  return v0 @kind object;
}
procedure `rx.Observable` `mergeDelayError`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48c474.  call temp:= `just`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48c47a.  v0:= temp @kind object;
  #L48c47c.  call temp:= `mergeDelayError`(v0) @signature `Lrx/Observable;.mergeDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c482.  v0:= temp @kind object;
  #L48c484.  return v0 @kind object;
}
procedure `rx.Observable` `never`() @signature `Lrx/Observable;.never:()Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48c4d0.  call temp:= `instance`() @signature `Lrx/internal/operators/NeverObservableHolder;.instance:()Lrx/Observable;` @kind static;
  #L48c4d6.  v0:= temp @kind object;
  #L48c4d8.  return v0 @kind object;
}
procedure `rx.Observable` `range`(`int` v2 , `int` v3 ) @signature `Lrx/Observable;.range:(II)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48c77c.  if v3 < 0 then goto L48c7dc;
  #L48c780.  if v3 != 0 then goto L48c78e;
  #L48c784.  call temp:= `empty`() @signature `Lrx/Observable;.empty:()Lrx/Observable;` @kind static;
  #L48c78a.  v2:= temp @kind object;
  #L48c78c.  return v2 @kind object;
  #L48c78e.  v0:= 2147483647I;
  #L48c794.  v0:= v0 - v3 @kind int;
  #L48c796.  v1:= 1I;
  #L48c798.  v0:= v0 + v1 @kind int;
  #L48c79a.  if v2 > v0 then goto L48c7cc;
  #L48c79e.  if v3 != v1 then goto L48c7b4;
  #L48c7a2.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L48c7a8.  v2:= temp @kind object;
  #L48c7aa.  call temp:= `just`(v2) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48c7b0.  v2:= temp @kind object;
  #L48c7b2.  return v2 @kind object;
  #L48c7b4.  v0:= new `rx.internal.operators.OnSubscribeRange`;
  #L48c7b8.  v3:= v3 - v1 @kind int;
  #L48c7ba.  v3:= v3 + v2 @kind int;
  #L48c7bc.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/operators/OnSubscribeRange;.<init>:(II)V` @kind direct;
  #L48c7c2.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48c7c8.  v2:= temp @kind object;
  #L48c7ca.  return v2 @kind object;
  #L48c7cc.  v2:= new `java.lang.IllegalArgumentException`;
  #L48c7d0.  v3:= "start + count can not exceed Integer.MAX_VALUE" @kind object;
  #L48c7d4.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48c7da.  throw v2;
  #L48c7dc.  v2:= new `java.lang.IllegalArgumentException`;
  #L48c7e0.  v3:= "Count can not be negative" @kind object;
  #L48c7e4.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48c7ea.  throw v2;
}
procedure `rx.Observable` `range`(`int` v0 , `int` v1 , `rx.Scheduler` v2 @kind object) @signature `Lrx/Observable;.range:(IILrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48c7fc.  call temp:= `range`(v0, v1) @signature `Lrx/Observable;.range:(II)Lrx/Observable;` @kind static;
  #L48c802.  v0:= temp @kind object;
  #L48c804.  call temp:= `subscribeOn`(v0, v2) @signature `Lrx/Observable;.subscribeOn:(Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48c80a.  v0:= temp @kind object;
  #L48c80c.  return v0 @kind object;
}
procedure `rx.Observable` `sequenceEqual`(`rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object) @signature `Lrx/Observable;.sequenceEqual:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48cc30.  v0:= `@@rx.internal.util.InternalObservableUtils.OBJECT_EQUALS` @type ^`rx.internal.util.InternalObservableUtils$ObjectEqualsFunc2` @kind object;
  #L48cc34.  call temp:= `sequenceEqual`(v1, v2, v0) @signature `Lrx/Observable;.sequenceEqual:(Lrx/Observable;Lrx/Observable;Lrx/functions/Func2;)Lrx/Observable;` @kind static;
  #L48cc3a.  v1:= temp @kind object;
  #L48cc3c.  return v1 @kind object;
}
procedure `rx.Observable` `sequenceEqual`(`rx.Observable` v0 @kind object, `rx.Observable` v1 @kind object, `rx.functions.Func2` v2 @kind object) @signature `Lrx/Observable;.sequenceEqual:(Lrx/Observable;Lrx/Observable;Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48cc50.  call temp:= `sequenceEqual`(v0, v1, v2) @signature `Lrx/internal/operators/OperatorSequenceEqual;.sequenceEqual:(Lrx/Observable;Lrx/Observable;Lrx/functions/Func2;)Lrx/Observable;` @kind static;
  #L48cc56.  v0:= temp @kind object;
  #L48cc58.  return v0 @kind object;
}
procedure `rx.Subscription` `subscribe`(`rx.Subscriber` v3 @kind object, `rx.Observable` v4 @kind object) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;Lrx/Observable;)Lrx/Subscription;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L48e2c4.  if v3 == 0 then goto L48e3a0;
  #L48e2c8.  v0:= v4.`rx.Observable.onSubscribe` @type ^`rx.Observable$OnSubscribe` @kind object;
  #L48e2cc.  if v0 == 0 then goto L48e390;
  #L48e2d0.  call `onStart`(v3) @signature `Lrx/Subscriber;.onStart:()V` @kind virtual;
  #L48e2d6.  v0:= instanceof @variable v3 @type ^`rx.observers.SafeSubscriber` @kind boolean;
  #L48e2da.  if v0 != 0 then goto L48e2ea;
  #L48e2de.  v0:= new `rx.observers.SafeSubscriber`;
  #L48e2e2.  call `<init>`(v0, v3) @signature `Lrx/observers/SafeSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L48e2e8.  v3:= v0 @kind object;
  #L48e2ea.  v0:= v4.`rx.Observable.onSubscribe` @type ^`rx.Observable$OnSubscribe` @kind object;
  #L48e2ee.  call temp:= `onObservableStart`(v4, v0) @signature `Lrx/plugins/RxJavaHooks;.onObservableStart:(Lrx/Observable;Lrx/Observable$OnSubscribe;)Lrx/Observable$OnSubscribe;` @kind static;
  #L48e2f4.  v4:= temp @kind object;
  #L48e2f6.  call `call`(v4, v3) @signature `Lrx/Observable$OnSubscribe;.call:(Ljava/lang/Object;)V` @kind interface;
  #L48e2fc.  call temp:= `onObservableReturn`(v3) @signature `Lrx/plugins/RxJavaHooks;.onObservableReturn:(Lrx/Subscription;)Lrx/Subscription;` @kind static;
  #L48e302.  v3:= temp @kind object;
  #L48e304.  return v3 @kind object;
  #L48e306.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48e308.  call `throwIfFatal`(v4) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48e30e.  call temp:= `isUnsubscribed`(v3) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L48e314.  v0:= temp;
  #L48e316.  if v0 == 0 then goto L48e32a;
  #L48e31a.  call temp:= `onObservableError`(v4) @signature `Lrx/plugins/RxJavaHooks;.onObservableError:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L48e320.  v3:= temp @kind object;
  #L48e322.  call `onError`(v3) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48e328.  goto L48e338;
  #L48e32a.  call temp:= `onObservableError`(v4) @signature `Lrx/plugins/RxJavaHooks;.onObservableError:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L48e330.  v0:= temp @kind object;
  #L48e332.  call `onError`(v3, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48e338.  call temp:= `unsubscribed`() @signature `Lrx/subscriptions/Subscriptions;.unsubscribed:()Lrx/Subscription;` @kind static;
  #L48e33e.  v3:= temp @kind object;
  #L48e340.  return v3 @kind object;
  #L48e342.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48e344.  call `throwIfFatal`(v3) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48e34a.  v0:= new `rx.exceptions.OnErrorFailedException`;
  #L48e34e.  v1:= new `java.lang.StringBuilder`;
  #L48e352.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48e358.  v2:= "Error occurred attempting to subscribe [" @kind object;
  #L48e35c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e362.  call temp:= `getMessage`(v4) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L48e368.  v4:= temp @kind object;
  #L48e36a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e370.  v4:= "] and then again while trying to pass to onError." @kind object;
  #L48e374.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e37a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48e380.  v4:= temp @kind object;
  #L48e382.  call `<init>`(v0, v4, v3) @signature `Lrx/exceptions/OnErrorFailedException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L48e388.  call temp:= `onObservableError`(v0) @signature `Lrx/plugins/RxJavaHooks;.onObservableError:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L48e38e.  throw v0;
  #L48e390.  v3:= new `java.lang.IllegalStateException`;
  #L48e394.  v4:= "onSubscribe function can not be null." @kind object;
  #L48e398.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e39e.  throw v3;
  #L48e3a0.  v3:= new `java.lang.IllegalArgumentException`;
  #L48e3a4.  v4:= "subscriber can not be null" @kind object;
  #L48e3a8.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e3ae.  throw v3;
  catch `java.lang.Throwable` @[L48e2ea..L48e304] goto L48e306;
  catch `java.lang.Throwable` @[L48e32a..L48e338] goto L48e342;
}
procedure `rx.Observable` `switchOnNext`(`rx.Observable` v1 @kind object) @signature `Lrx/Observable;.switchOnNext:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48d110.  v0:= 0I;
  #L48d112.  call temp:= `instance`(v0) @signature `Lrx/internal/operators/OperatorSwitch;.instance:(Z)Lrx/internal/operators/OperatorSwitch;` @kind static;
  #L48d118.  v0:= temp @kind object;
  #L48d11a.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d120.  v1:= temp @kind object;
  #L48d122.  return v1 @kind object;
}
procedure `rx.Observable` `switchOnNextDelayError`(`rx.Observable` v1 @kind object) @signature `Lrx/Observable;.switchOnNextDelayError:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48d134.  v0:= 1I;
  #L48d136.  call temp:= `instance`(v0) @signature `Lrx/internal/operators/OperatorSwitch;.instance:(Z)Lrx/internal/operators/OperatorSwitch;` @kind static;
  #L48d13c.  v0:= temp @kind object;
  #L48d13e.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d144.  v1:= temp @kind object;
  #L48d146.  return v1 @kind object;
}
procedure `rx.Observable` `timer`(`long` v6 , `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lrx/Observable;.timer:(JJLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48d678.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48d67e.  v5:= temp @kind object;
  #L48d680.  v0:= v6 @kind wide;
  #L48d682.  v2:= v8 @kind wide;
  #L48d684.  v4:= v10 @kind object;
  #L48d686.  call temp:= `interval`(v0, v2, v4, v5) @signature `Lrx/Observable;.interval:(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind static;
  #L48d68c.  v6:= temp @kind object;
  #L48d68e.  return v6 @kind object;
}
procedure `rx.Observable` `timer`(`long` v0 , `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `rx.Scheduler` v5 @kind object) @signature `Lrx/Observable;.timer:(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48d6a0.  call temp:= `interval`(v0, v2, v4, v5) @signature `Lrx/Observable;.interval:(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind static;
  #L48d6a6.  v0:= temp @kind object;
  #L48d6a8.  return v0 @kind object;
}
procedure `rx.Observable` `timer`(`long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lrx/Observable;.timer:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48d630.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48d636.  v0:= temp @kind object;
  #L48d638.  call temp:= `timer`(v1, v3, v0) @signature `Lrx/Observable;.timer:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind static;
  #L48d63e.  v1:= temp @kind object;
  #L48d640.  return v1 @kind object;
}
procedure `rx.Observable` `timer`(`long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `rx.Scheduler` v4 @kind object) @signature `Lrx/Observable;.timer:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48d654.  v0:= new `rx.internal.operators.OnSubscribeTimerOnce`;
  #L48d658.  call `<init>`(v0, v1, v3, v4) @signature `Lrx/internal/operators/OnSubscribeTimerOnce;.<init>:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @kind direct;
  #L48d65e.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48d664.  v1:= temp @kind object;
  #L48d666.  return v1 @kind object;
}
procedure `rx.Observable` `using`(`rx.functions.Func0` v1 @kind object, `rx.functions.Func1` v2 @kind object, `rx.functions.Action1` v3 @kind object) @signature `Lrx/Observable;.using:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48d8fc.  v0:= 0I;
  #L48d8fe.  call temp:= `using`(v1, v2, v3, v0) @signature `Lrx/Observable;.using:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;Z)Lrx/Observable;` @kind static;
  #L48d904.  v1:= temp @kind object;
  #L48d906.  return v1 @kind object;
}
procedure `rx.Observable` `using`(`rx.functions.Func0` v1 @kind object, `rx.functions.Func1` v2 @kind object, `rx.functions.Action1` v3 @kind object, `boolean` v4 ) @signature `Lrx/Observable;.using:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;Z)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48d918.  v0:= new `rx.internal.operators.OnSubscribeUsing`;
  #L48d91c.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lrx/internal/operators/OnSubscribeUsing;.<init>:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;Z)V` @kind direct;
  #L48d922.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48d928.  v1:= temp @kind object;
  #L48d92a.  return v1 @kind object;
}
procedure `rx.Observable` `zip`(`java.lang.Iterable` v2 @kind object, `rx.functions.FuncN` v3 @kind object) @signature `Lrx/Observable;.zip:(Ljava/lang/Iterable;Lrx/functions/FuncN;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48de40.  v0:= new `java.util.ArrayList`;
  #L48de44.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L48de4a.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L48de50.  v2:= temp @kind object;
  #L48de52.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48de58.  v1:= temp;
  #L48de5a.  if v1 == 0 then goto L48de72;
  #L48de5e.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L48de64.  v1:= temp @kind object;
  #L48de66.  v1:= (`rx.Observable`) v1 @kind object;
  #L48de6a.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48de70.  goto L48de52;
  #L48de72.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48de78.  v2:= temp;
  #L48de7a.  v2:= new `rx.Observable`[v2];
  #L48de7e.  call temp:= `toArray`(v0, v2) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L48de84.  v2:= temp @kind object;
  #L48de86.  call temp:= `just`(v2) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48de8c.  v2:= temp @kind object;
  #L48de8e.  v0:= new `rx.internal.operators.OperatorZip`;
  #L48de92.  call `<init>`(v0, v3) @signature `Lrx/internal/operators/OperatorZip;.<init>:(Lrx/functions/FuncN;)V` @kind direct;
  #L48de98.  call temp:= `lift`(v2, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48de9e.  v2:= temp @kind object;
  #L48dea0.  return v2 @kind object;
}
procedure `rx.Observable` `zip`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object, `rx.Observable` v9 @kind object, `rx.Observable` v10 @kind object, `rx.functions.Func9` v11 @kind object) @signature `Lrx/Observable;.zip:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func9;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48deb4.  v0:= 9I;
  #L48deb8.  v0:= new `rx.Observable`[v0];
  #L48debc.  v1:= 0I;
  #L48debe.  v0[v1]:= v2 @kind object;
  #L48dec2.  v2:= 1I;
  #L48dec4.  v0[v2]:= v3 @kind object;
  #L48dec8.  v2:= 2I;
  #L48deca.  v0[v2]:= v4 @kind object;
  #L48dece.  v2:= 3I;
  #L48ded0.  v0[v2]:= v5 @kind object;
  #L48ded4.  v2:= 4I;
  #L48ded6.  v0[v2]:= v6 @kind object;
  #L48deda.  v2:= 5I;
  #L48dedc.  v0[v2]:= v7 @kind object;
  #L48dee0.  v2:= 6I;
  #L48dee2.  v0[v2]:= v8 @kind object;
  #L48dee6.  v2:= 7I;
  #L48dee8.  v0[v2]:= v9 @kind object;
  #L48deec.  v2:= 8I;
  #L48def0.  v0[v2]:= v10 @kind object;
  #L48def4.  call temp:= `just`(v0) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48defa.  v2:= temp @kind object;
  #L48defc.  v3:= new `rx.internal.operators.OperatorZip`;
  #L48df00.  call `<init>`(v3, v11) @signature `Lrx/internal/operators/OperatorZip;.<init>:(Lrx/functions/Func9;)V` @kind direct;
  #L48df06.  call temp:= `lift`(v2, v3) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48df0c.  v2:= temp @kind object;
  #L48df0e.  return v2 @kind object;
}
procedure `rx.Observable` `zip`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object, `rx.Observable` v9 @kind object, `rx.functions.Func8` v10 @kind object) @signature `Lrx/Observable;.zip:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func8;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48df20.  v0:= 8I;
  #L48df24.  v0:= new `rx.Observable`[v0];
  #L48df28.  v1:= 0I;
  #L48df2a.  v0[v1]:= v2 @kind object;
  #L48df2e.  v2:= 1I;
  #L48df30.  v0[v2]:= v3 @kind object;
  #L48df34.  v2:= 2I;
  #L48df36.  v0[v2]:= v4 @kind object;
  #L48df3a.  v2:= 3I;
  #L48df3c.  v0[v2]:= v5 @kind object;
  #L48df40.  v2:= 4I;
  #L48df42.  v0[v2]:= v6 @kind object;
  #L48df46.  v2:= 5I;
  #L48df48.  v0[v2]:= v7 @kind object;
  #L48df4c.  v2:= 6I;
  #L48df4e.  v0[v2]:= v8 @kind object;
  #L48df52.  v2:= 7I;
  #L48df54.  v0[v2]:= v9 @kind object;
  #L48df58.  call temp:= `just`(v0) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48df5e.  v2:= temp @kind object;
  #L48df60.  v3:= new `rx.internal.operators.OperatorZip`;
  #L48df64.  call `<init>`(v3, v10) @signature `Lrx/internal/operators/OperatorZip;.<init>:(Lrx/functions/Func8;)V` @kind direct;
  #L48df6a.  call temp:= `lift`(v2, v3) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48df70.  v2:= temp @kind object;
  #L48df72.  return v2 @kind object;
}
procedure `rx.Observable` `zip`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object, `rx.functions.Func7` v9 @kind object) @signature `Lrx/Observable;.zip:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func7;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48df84.  v0:= 7I;
  #L48df86.  v0:= new `rx.Observable`[v0];
  #L48df8a.  v1:= 0I;
  #L48df8c.  v0[v1]:= v2 @kind object;
  #L48df90.  v2:= 1I;
  #L48df92.  v0[v2]:= v3 @kind object;
  #L48df96.  v2:= 2I;
  #L48df98.  v0[v2]:= v4 @kind object;
  #L48df9c.  v2:= 3I;
  #L48df9e.  v0[v2]:= v5 @kind object;
  #L48dfa2.  v2:= 4I;
  #L48dfa4.  v0[v2]:= v6 @kind object;
  #L48dfa8.  v2:= 5I;
  #L48dfaa.  v0[v2]:= v7 @kind object;
  #L48dfae.  v2:= 6I;
  #L48dfb0.  v0[v2]:= v8 @kind object;
  #L48dfb4.  call temp:= `just`(v0) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48dfba.  v2:= temp @kind object;
  #L48dfbc.  v3:= new `rx.internal.operators.OperatorZip`;
  #L48dfc0.  call `<init>`(v3, v9) @signature `Lrx/internal/operators/OperatorZip;.<init>:(Lrx/functions/Func7;)V` @kind direct;
  #L48dfc6.  call temp:= `lift`(v2, v3) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48dfcc.  v2:= temp @kind object;
  #L48dfce.  return v2 @kind object;
}
procedure `rx.Observable` `zip`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.functions.Func6` v8 @kind object) @signature `Lrx/Observable;.zip:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func6;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48dfe0.  v0:= 6I;
  #L48dfe2.  v0:= new `rx.Observable`[v0];
  #L48dfe6.  v1:= 0I;
  #L48dfe8.  v0[v1]:= v2 @kind object;
  #L48dfec.  v2:= 1I;
  #L48dfee.  v0[v2]:= v3 @kind object;
  #L48dff2.  v2:= 2I;
  #L48dff4.  v0[v2]:= v4 @kind object;
  #L48dff8.  v2:= 3I;
  #L48dffa.  v0[v2]:= v5 @kind object;
  #L48dffe.  v2:= 4I;
  #L48e000.  v0[v2]:= v6 @kind object;
  #L48e004.  v2:= 5I;
  #L48e006.  v0[v2]:= v7 @kind object;
  #L48e00a.  call temp:= `just`(v0) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48e010.  v2:= temp @kind object;
  #L48e012.  v3:= new `rx.internal.operators.OperatorZip`;
  #L48e016.  call `<init>`(v3, v8) @signature `Lrx/internal/operators/OperatorZip;.<init>:(Lrx/functions/Func6;)V` @kind direct;
  #L48e01c.  call temp:= `lift`(v2, v3) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48e022.  v2:= temp @kind object;
  #L48e024.  return v2 @kind object;
}
procedure `rx.Observable` `zip`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.functions.Func5` v7 @kind object) @signature `Lrx/Observable;.zip:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func5;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48e038.  v0:= 5I;
  #L48e03a.  v0:= new `rx.Observable`[v0];
  #L48e03e.  v1:= 0I;
  #L48e040.  v0[v1]:= v2 @kind object;
  #L48e044.  v2:= 1I;
  #L48e046.  v0[v2]:= v3 @kind object;
  #L48e04a.  v2:= 2I;
  #L48e04c.  v0[v2]:= v4 @kind object;
  #L48e050.  v2:= 3I;
  #L48e052.  v0[v2]:= v5 @kind object;
  #L48e056.  v2:= 4I;
  #L48e058.  v0[v2]:= v6 @kind object;
  #L48e05c.  call temp:= `just`(v0) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48e062.  v2:= temp @kind object;
  #L48e064.  v3:= new `rx.internal.operators.OperatorZip`;
  #L48e068.  call `<init>`(v3, v7) @signature `Lrx/internal/operators/OperatorZip;.<init>:(Lrx/functions/Func5;)V` @kind direct;
  #L48e06e.  call temp:= `lift`(v2, v3) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48e074.  v2:= temp @kind object;
  #L48e076.  return v2 @kind object;
}
procedure `rx.Observable` `zip`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.functions.Func4` v6 @kind object) @signature `Lrx/Observable;.zip:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func4;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48e088.  v0:= 4I;
  #L48e08a.  v0:= new `rx.Observable`[v0];
  #L48e08e.  v1:= 0I;
  #L48e090.  v0[v1]:= v2 @kind object;
  #L48e094.  v2:= 1I;
  #L48e096.  v0[v2]:= v3 @kind object;
  #L48e09a.  v2:= 2I;
  #L48e09c.  v0[v2]:= v4 @kind object;
  #L48e0a0.  v2:= 3I;
  #L48e0a2.  v0[v2]:= v5 @kind object;
  #L48e0a6.  call temp:= `just`(v0) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48e0ac.  v2:= temp @kind object;
  #L48e0ae.  v3:= new `rx.internal.operators.OperatorZip`;
  #L48e0b2.  call `<init>`(v3, v6) @signature `Lrx/internal/operators/OperatorZip;.<init>:(Lrx/functions/Func4;)V` @kind direct;
  #L48e0b8.  call temp:= `lift`(v2, v3) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48e0be.  v2:= temp @kind object;
  #L48e0c0.  return v2 @kind object;
}
procedure `rx.Observable` `zip`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.functions.Func3` v5 @kind object) @signature `Lrx/Observable;.zip:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func3;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48e0d4.  v0:= 3I;
  #L48e0d6.  v0:= new `rx.Observable`[v0];
  #L48e0da.  v1:= 0I;
  #L48e0dc.  v0[v1]:= v2 @kind object;
  #L48e0e0.  v2:= 1I;
  #L48e0e2.  v0[v2]:= v3 @kind object;
  #L48e0e6.  v2:= 2I;
  #L48e0e8.  v0[v2]:= v4 @kind object;
  #L48e0ec.  call temp:= `just`(v0) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48e0f2.  v2:= temp @kind object;
  #L48e0f4.  v3:= new `rx.internal.operators.OperatorZip`;
  #L48e0f8.  call `<init>`(v3, v5) @signature `Lrx/internal/operators/OperatorZip;.<init>:(Lrx/functions/Func3;)V` @kind direct;
  #L48e0fe.  call temp:= `lift`(v2, v3) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48e104.  v2:= temp @kind object;
  #L48e106.  return v2 @kind object;
}
procedure `rx.Observable` `zip`(`rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.functions.Func2` v4 @kind object) @signature `Lrx/Observable;.zip:(Lrx/Observable;Lrx/Observable;Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48e118.  v0:= 2I;
  #L48e11a.  v0:= new `rx.Observable`[v0];
  #L48e11e.  v1:= 0I;
  #L48e120.  v0[v1]:= v2 @kind object;
  #L48e124.  v2:= 1I;
  #L48e126.  v0[v2]:= v3 @kind object;
  #L48e12a.  call temp:= `just`(v0) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48e130.  v2:= temp @kind object;
  #L48e132.  v3:= new `rx.internal.operators.OperatorZip`;
  #L48e136.  call `<init>`(v3, v4) @signature `Lrx/internal/operators/OperatorZip;.<init>:(Lrx/functions/Func2;)V` @kind direct;
  #L48e13c.  call temp:= `lift`(v2, v3) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48e142.  v2:= temp @kind object;
  #L48e144.  return v2 @kind object;
}
procedure `rx.Observable` `zip`(`rx.Observable` v1 @kind object, `rx.functions.FuncN` v2 @kind object) @signature `Lrx/Observable;.zip:(Lrx/Observable;Lrx/functions/FuncN;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48e158.  call temp:= `toList`(v1) @signature `Lrx/Observable;.toList:()Lrx/Observable;` @kind virtual;
  #L48e15e.  v1:= temp @kind object;
  #L48e160.  v0:= `@@rx.internal.util.InternalObservableUtils.TO_ARRAY` @type ^`rx.internal.util.InternalObservableUtils$ToArrayFunc1` @kind object;
  #L48e164.  call temp:= `map`(v1, v0) @signature `Lrx/Observable;.map:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48e16a.  v1:= temp @kind object;
  #L48e16c.  v0:= new `rx.internal.operators.OperatorZip`;
  #L48e170.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorZip;.<init>:(Lrx/functions/FuncN;)V` @kind direct;
  #L48e176.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48e17c.  v1:= temp @kind object;
  #L48e17e.  return v1 @kind object;
}
procedure `rx.Observable` `zip`(`rx.Observable`[] v1 @kind object, `rx.functions.FuncN` v2 @kind object) @signature `Lrx/Observable;.zip:([Lrx/Observable;Lrx/functions/FuncN;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48e190.  call temp:= `just`(v1) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48e196.  v1:= temp @kind object;
  #L48e198.  v0:= new `rx.internal.operators.OperatorZip`;
  #L48e19c.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorZip;.<init>:(Lrx/functions/FuncN;)V` @kind direct;
  #L48e1a2.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48e1a8.  v1:= temp @kind object;
  #L48e1aa.  return v1 @kind object;
}
procedure `rx.Observable` `all`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.all:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48a0f8.  v0:= new `rx.internal.operators.OperatorAll`;
  #L48a0fc.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorAll;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L48a102.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48a108.  v2:= temp @kind object;
  #L48a10a.  return v2 @kind object;
}
procedure `rx.Observable` `ambWith`(`rx.Observable` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/Observable;.ambWith:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48a260.  call temp:= `amb`(v0, v1) @signature `Lrx/Observable;.amb:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48a266.  v1:= temp @kind object;
  #L48a268.  return v1 @kind object;
}
procedure `rx.Observable` `asObservable`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.asObservable:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48a27c.  call temp:= `instance`() @signature `Lrx/internal/operators/OperatorAsObservable;.instance:()Lrx/internal/operators/OperatorAsObservable;` @kind static;
  #L48a282.  v0:= temp @kind object;
  #L48a284.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48a28a.  v0:= temp @kind object;
  #L48a28c.  return v0 @kind object;
}
procedure `rx.Observable` `buffer`(`rx.Observable` v0 @kind this, `int` v1 ) @signature `Lrx/Observable;.buffer:(I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48a2a0.  call temp:= `buffer`(v0, v1, v1) @signature `Lrx/Observable;.buffer:(II)Lrx/Observable;` @kind virtual;
  #L48a2a6.  v1:= temp @kind object;
  #L48a2a8.  return v1 @kind object;
}
procedure `rx.Observable` `buffer`(`rx.Observable` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lrx/Observable;.buffer:(II)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48a2bc.  v0:= new `rx.internal.operators.OperatorBufferWithSize`;
  #L48a2c0.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/operators/OperatorBufferWithSize;.<init>:(II)V` @kind direct;
  #L48a2c6.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48a2cc.  v2:= temp @kind object;
  #L48a2ce.  return v2 @kind object;
}
procedure `rx.Observable` `buffer`(`rx.Observable` v7 @kind this, `long` v8 , `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object) @signature `Lrx/Observable;.buffer:(JJLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48a39c.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48a3a2.  v6:= temp @kind object;
  #L48a3a4.  v0:= v7 @kind object;
  #L48a3a6.  v1:= v8 @kind wide;
  #L48a3a8.  v3:= v10 @kind wide;
  #L48a3aa.  v5:= v12 @kind object;
  #L48a3ac.  call temp:= `buffer`(v0, v1, v3, v5, v6) @signature `Lrx/Observable;.buffer:(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48a3b2.  v8:= temp @kind object;
  #L48a3b4.  return v8 @kind object;
}
procedure `rx.Observable` `buffer`(`rx.Observable` v9 @kind this, `long` v10 , `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object, `rx.Scheduler` v15 @kind object) @signature `Lrx/Observable;.buffer:(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L48a3c8.  v8:= new `rx.internal.operators.OperatorBufferWithTime`;
  #L48a3cc.  v6:= 2147483647I;
  #L48a3d2.  v0:= v8 @kind object;
  #L48a3d4.  v1:= v10 @kind wide;
  #L48a3d6.  v3:= v12 @kind wide;
  #L48a3d8.  v5:= v14 @kind object;
  #L48a3da.  v7:= v15 @kind object;
  #L48a3dc.  call `<init>`(v0, v1, v3, v5, v6, v7) @signature `Lrx/internal/operators/OperatorBufferWithTime;.<init>:(JJLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)V` @kind direct;
  #L48a3e2.  call temp:= `lift`(v9, v8) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48a3e8.  v10:= temp @kind object;
  #L48a3ea.  return v10 @kind object;
}
procedure `rx.Observable` `buffer`(`rx.Observable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lrx/Observable;.buffer:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48a2e0.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48a2e6.  v5:= temp @kind object;
  #L48a2e8.  v4:= 2147483647I;
  #L48a2ee.  v0:= v6 @kind object;
  #L48a2f0.  v1:= v7 @kind wide;
  #L48a2f2.  v3:= v9 @kind object;
  #L48a2f4.  call temp:= `buffer`(v0, v1, v3, v4, v5) @signature `Lrx/Observable;.buffer:(JLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48a2fa.  v7:= temp @kind object;
  #L48a2fc.  return v7 @kind object;
}
procedure `rx.Observable` `buffer`(`rx.Observable` v9 @kind this, `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `int` v13 ) @signature `Lrx/Observable;.buffer:(JLjava/util/concurrent/TimeUnit;I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L48a310.  v8:= new `rx.internal.operators.OperatorBufferWithTime`;
  #L48a314.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48a31a.  v7:= temp @kind object;
  #L48a31c.  v0:= v8 @kind object;
  #L48a31e.  v1:= v10 @kind wide;
  #L48a320.  v3:= v10 @kind wide;
  #L48a322.  v5:= v12 @kind object;
  #L48a324.  v6:= v13;
  #L48a326.  call `<init>`(v0, v1, v3, v5, v6, v7) @signature `Lrx/internal/operators/OperatorBufferWithTime;.<init>:(JJLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)V` @kind direct;
  #L48a32c.  call temp:= `lift`(v9, v8) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48a332.  v10:= temp @kind object;
  #L48a334.  return v10 @kind object;
}
procedure `rx.Observable` `buffer`(`rx.Observable` v9 @kind this, `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `int` v13 , `rx.Scheduler` v14 @kind object) @signature `Lrx/Observable;.buffer:(JLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L48a348.  v8:= new `rx.internal.operators.OperatorBufferWithTime`;
  #L48a34c.  v0:= v8 @kind object;
  #L48a34e.  v1:= v10 @kind wide;
  #L48a350.  v3:= v10 @kind wide;
  #L48a352.  v5:= v12 @kind object;
  #L48a354.  v6:= v13;
  #L48a356.  v7:= v14 @kind object;
  #L48a358.  call `<init>`(v0, v1, v3, v5, v6, v7) @signature `Lrx/internal/operators/OperatorBufferWithTime;.<init>:(JJLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)V` @kind direct;
  #L48a35e.  call temp:= `lift`(v9, v8) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48a364.  v10:= temp @kind object;
  #L48a366.  return v10 @kind object;
}
procedure `rx.Observable` `buffer`(`rx.Observable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `rx.Scheduler` v11 @kind object) @signature `Lrx/Observable;.buffer:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48a378.  v0:= v7 @kind object;
  #L48a37a.  v1:= v8 @kind wide;
  #L48a37c.  v3:= v8 @kind wide;
  #L48a37e.  v5:= v10 @kind object;
  #L48a380.  v6:= v11 @kind object;
  #L48a382.  call temp:= `buffer`(v0, v1, v3, v5, v6) @signature `Lrx/Observable;.buffer:(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48a388.  v8:= temp @kind object;
  #L48a38a.  return v8 @kind object;
}
procedure `rx.Observable` `buffer`(`rx.Observable` v1 @kind this, `rx.Observable` v2 @kind object) @signature `Lrx/Observable;.buffer:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48a3fc.  v0:= 16I;
  #L48a400.  call temp:= `buffer`(v1, v2, v0) @signature `Lrx/Observable;.buffer:(Lrx/Observable;I)Lrx/Observable;` @kind virtual;
  #L48a406.  v2:= temp @kind object;
  #L48a408.  return v2 @kind object;
}
procedure `rx.Observable` `buffer`(`rx.Observable` v1 @kind this, `rx.Observable` v2 @kind object, `int` v3 ) @signature `Lrx/Observable;.buffer:(Lrx/Observable;I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48a41c.  v0:= new `rx.internal.operators.OperatorBufferWithSingleObservable`;
  #L48a420.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable;.<init>:(Lrx/Observable;I)V` @kind direct;
  #L48a426.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48a42c.  v2:= temp @kind object;
  #L48a42e.  return v2 @kind object;
}
procedure `rx.Observable` `buffer`(`rx.Observable` v1 @kind this, `rx.Observable` v2 @kind object, `rx.functions.Func1` v3 @kind object) @signature `Lrx/Observable;.buffer:(Lrx/Observable;Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48a440.  v0:= new `rx.internal.operators.OperatorBufferWithStartEndObservable`;
  #L48a444.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/operators/OperatorBufferWithStartEndObservable;.<init>:(Lrx/Observable;Lrx/functions/Func1;)V` @kind direct;
  #L48a44a.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48a450.  v2:= temp @kind object;
  #L48a452.  return v2 @kind object;
}
procedure `rx.Observable` `buffer`(`rx.Observable` v2 @kind this, `rx.functions.Func0` v3 @kind object) @signature `Lrx/Observable;.buffer:(Lrx/functions/Func0;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48a464.  v0:= new `rx.internal.operators.OperatorBufferWithSingleObservable`;
  #L48a468.  v1:= 16I;
  #L48a46c.  call `<init>`(v0, v3, v1) @signature `Lrx/internal/operators/OperatorBufferWithSingleObservable;.<init>:(Lrx/functions/Func0;I)V` @kind direct;
  #L48a472.  call temp:= `lift`(v2, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48a478.  v3:= temp @kind object;
  #L48a47a.  return v3 @kind object;
}
procedure `rx.Observable` `cache`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.cache:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48a48c.  call temp:= `from`(v1) @signature `Lrx/internal/operators/CachedObservable;.from:(Lrx/Observable;)Lrx/internal/operators/CachedObservable;` @kind static;
  #L48a492.  v0:= temp @kind object;
  #L48a494.  return v0 @kind object;
}
procedure `rx.Observable` `cache`(`rx.Observable` v0 @kind this, `int` v1 ) @signature `Lrx/Observable;.cache:(I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48a4a8.  call temp:= `cacheWithInitialCapacity`(v0, v1) @signature `Lrx/Observable;.cacheWithInitialCapacity:(I)Lrx/Observable;` @kind virtual;
  #L48a4ae.  v1:= temp @kind object;
  #L48a4b0.  return v1 @kind object;
}
procedure `rx.Observable` `cacheWithInitialCapacity`(`rx.Observable` v0 @kind this, `int` v1 ) @signature `Lrx/Observable;.cacheWithInitialCapacity:(I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48a4c4.  call temp:= `from`(v0, v1) @signature `Lrx/internal/operators/CachedObservable;.from:(Lrx/Observable;I)Lrx/internal/operators/CachedObservable;` @kind static;
  #L48a4ca.  v1:= temp @kind object;
  #L48a4cc.  return v1 @kind object;
}
procedure `rx.Observable` `cast`(`rx.Observable` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lrx/Observable;.cast:(Ljava/lang/Class;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48a4e0.  v0:= new `rx.internal.operators.OperatorCast`;
  #L48a4e4.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorCast;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L48a4ea.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48a4f0.  v2:= temp @kind object;
  #L48a4f2.  return v2 @kind object;
}
procedure `rx.Observable` `collect`(`rx.Observable` v1 @kind this, `rx.functions.Func0` v2 @kind object, `rx.functions.Action2` v3 @kind object) @signature `Lrx/Observable;.collect:(Lrx/functions/Func0;Lrx/functions/Action2;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48a504.  v0:= new `rx.internal.operators.OnSubscribeCollect`;
  #L48a508.  call `<init>`(v0, v1, v2, v3) @signature `Lrx/internal/operators/OnSubscribeCollect;.<init>:(Lrx/Observable;Lrx/functions/Func0;Lrx/functions/Action2;)V` @kind direct;
  #L48a50e.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48a514.  v2:= temp @kind object;
  #L48a516.  return v2 @kind object;
}
procedure `rx.Observable` `compose`(`rx.Observable` v0 @kind this, `rx.Observable$Transformer` v1 @kind object) @signature `Lrx/Observable;.compose:(Lrx/Observable$Transformer;)Lrx/Observable;` @AccessFlag PUBLIC {
    temp;

  #L48a83c.  call temp:= `call`(v1, v0) @signature `Lrx/Observable$Transformer;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48a842.  v1:= temp @kind object;
  #L48a844.  v1:= (`rx.Observable`) v1 @kind object;
  #L48a848.  return v1 @kind object;
}
procedure `rx.Observable` `concatMap`(`rx.Observable` v3 @kind this, `rx.functions.Func1` v4 @kind object) @signature `Lrx/Observable;.concatMap:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48ae24.  v0:= instanceof @variable v3 @type ^`rx.internal.util.ScalarSynchronousObservable` @kind boolean;
  #L48ae28.  if v0 == 0 then goto L48ae3c;
  #L48ae2c.  v0:= v3 @kind object;
  #L48ae2e.  v0:= (`rx.internal.util.ScalarSynchronousObservable`) v0 @kind object;
  #L48ae32.  call temp:= `scalarFlatMap`(v0, v4) @signature `Lrx/internal/util/ScalarSynchronousObservable;.scalarFlatMap:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48ae38.  v4:= temp @kind object;
  #L48ae3a.  return v4 @kind object;
  #L48ae3c.  v0:= new `rx.internal.operators.OnSubscribeConcatMap`;
  #L48ae40.  v1:= 2I;
  #L48ae42.  v2:= 0I;
  #L48ae44.  call `<init>`(v0, v3, v4, v1, v2) @signature `Lrx/internal/operators/OnSubscribeConcatMap;.<init>:(Lrx/Observable;Lrx/functions/Func1;II)V` @kind direct;
  #L48ae4a.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48ae50.  v4:= temp @kind object;
  #L48ae52.  return v4 @kind object;
}
procedure `rx.Observable` `concatMapDelayError`(`rx.Observable` v2 @kind this, `rx.functions.Func1` v3 @kind object) @signature `Lrx/Observable;.concatMapDelayError:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48ae64.  v0:= instanceof @variable v2 @type ^`rx.internal.util.ScalarSynchronousObservable` @kind boolean;
  #L48ae68.  if v0 == 0 then goto L48ae7c;
  #L48ae6c.  v0:= v2 @kind object;
  #L48ae6e.  v0:= (`rx.internal.util.ScalarSynchronousObservable`) v0 @kind object;
  #L48ae72.  call temp:= `scalarFlatMap`(v0, v3) @signature `Lrx/internal/util/ScalarSynchronousObservable;.scalarFlatMap:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48ae78.  v3:= temp @kind object;
  #L48ae7a.  return v3 @kind object;
  #L48ae7c.  v0:= new `rx.internal.operators.OnSubscribeConcatMap`;
  #L48ae80.  v1:= 2I;
  #L48ae82.  call `<init>`(v0, v2, v3, v1, v1) @signature `Lrx/internal/operators/OnSubscribeConcatMap;.<init>:(Lrx/Observable;Lrx/functions/Func1;II)V` @kind direct;
  #L48ae88.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48ae8e.  v3:= temp @kind object;
  #L48ae90.  return v3 @kind object;
}
procedure `rx.Observable` `concatMapEager`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.concatMapEager:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48aea4.  v0:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L48aea8.  call temp:= `concatMapEager`(v1, v2, v0) @signature `Lrx/Observable;.concatMapEager:(Lrx/functions/Func1;I)Lrx/Observable;` @kind virtual;
  #L48aeae.  v2:= temp @kind object;
  #L48aeb0.  return v2 @kind object;
}
procedure `rx.Observable` `concatMapEager`(`rx.Observable` v2 @kind this, `rx.functions.Func1` v3 @kind object, `int` v4 ) @signature `Lrx/Observable;.concatMapEager:(Lrx/functions/Func1;I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48aec4.  v0:= 1I;
  #L48aec6.  if v4 < v0 then goto L48aee4;
  #L48aeca.  v0:= new `rx.internal.operators.OperatorEagerConcatMap`;
  #L48aece.  v1:= 2147483647I;
  #L48aed4.  call `<init>`(v0, v3, v4, v1) @signature `Lrx/internal/operators/OperatorEagerConcatMap;.<init>:(Lrx/functions/Func1;II)V` @kind direct;
  #L48aeda.  call temp:= `lift`(v2, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48aee0.  v3:= temp @kind object;
  #L48aee2.  return v3 @kind object;
  #L48aee4.  v3:= new `java.lang.IllegalArgumentException`;
  #L48aee8.  v0:= new `java.lang.StringBuilder`;
  #L48aeec.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48aef2.  v1:= "capacityHint > 0 required but it was " @kind object;
  #L48aef6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48aefc.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48af02.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48af08.  v4:= temp @kind object;
  #L48af0a.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48af10.  throw v3;
}
procedure `rx.Observable` `concatMapEager`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lrx/Observable;.concatMapEager:(Lrx/functions/Func1;II)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48af24.  v0:= 1I;
  #L48af26.  if v3 < v0 then goto L48af70;
  #L48af2a.  if v4 < v0 then goto L48af42;
  #L48af2e.  v0:= new `rx.internal.operators.OperatorEagerConcatMap`;
  #L48af32.  call `<init>`(v0, v2, v3, v4) @signature `Lrx/internal/operators/OperatorEagerConcatMap;.<init>:(Lrx/functions/Func1;II)V` @kind direct;
  #L48af38.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48af3e.  v2:= temp @kind object;
  #L48af40.  return v2 @kind object;
  #L48af42.  v2:= new `java.lang.IllegalArgumentException`;
  #L48af46.  v4:= new `java.lang.StringBuilder`;
  #L48af4a.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48af50.  v0:= "maxConcurrent > 0 required but it was " @kind object;
  #L48af54.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48af5a.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48af60.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48af66.  v3:= temp @kind object;
  #L48af68.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48af6e.  throw v2;
  #L48af70.  v2:= new `java.lang.IllegalArgumentException`;
  #L48af74.  v4:= new `java.lang.StringBuilder`;
  #L48af78.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48af7e.  v0:= "capacityHint > 0 required but it was " @kind object;
  #L48af82.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48af88.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48af8e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48af94.  v3:= temp @kind object;
  #L48af96.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48af9c.  throw v2;
}
procedure `rx.Observable` `concatMapIterable`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.concatMapIterable:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48afb0.  v0:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L48afb4.  call temp:= `createFrom`(v1, v2, v0) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable;.createFrom:(Lrx/Observable;Lrx/functions/Func1;I)Lrx/Observable;` @kind static;
  #L48afba.  v2:= temp @kind object;
  #L48afbc.  return v2 @kind object;
}
procedure `rx.Observable` `concatWith`(`rx.Observable` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/Observable;.concatWith:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48afd0.  call temp:= `concat`(v0, v1) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48afd6.  v1:= temp @kind object;
  #L48afd8.  return v1 @kind object;
}
procedure `rx.Observable` `contains`(`rx.Observable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/Observable;.contains:(Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48afec.  call temp:= `equalsWith`(v1) @signature `Lrx/internal/util/InternalObservableUtils;.equalsWith:(Ljava/lang/Object;)Lrx/functions/Func1;` @kind static;
  #L48aff2.  v1:= temp @kind object;
  #L48aff4.  call temp:= `exists`(v0, v1) @signature `Lrx/Observable;.exists:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48affa.  v1:= temp @kind object;
  #L48affc.  return v1 @kind object;
}
procedure `rx.Observable` `count`(`rx.Observable` v2 @kind this) @signature `Lrx/Observable;.count:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48b010.  v0:= 0I;
  #L48b012.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L48b018.  v0:= temp @kind object;
  #L48b01a.  v1:= `@@rx.internal.util.InternalObservableUtils.COUNTER` @type ^`rx.internal.util.InternalObservableUtils$PlusOneFunc2` @kind object;
  #L48b01e.  call temp:= `reduce`(v2, v0, v1) @signature `Lrx/Observable;.reduce:(Ljava/lang/Object;Lrx/functions/Func2;)Lrx/Observable;` @kind virtual;
  #L48b024.  v0:= temp @kind object;
  #L48b026.  return v0 @kind object;
}
procedure `rx.Observable` `countLong`(`rx.Observable` v2 @kind this) @signature `Lrx/Observable;.countLong:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48b038.  v0:= 0L;
  #L48b03c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L48b042.  v0:= temp @kind object;
  #L48b044.  v1:= `@@rx.internal.util.InternalObservableUtils.LONG_COUNTER` @type ^`rx.internal.util.InternalObservableUtils$PlusOneLongFunc2` @kind object;
  #L48b048.  call temp:= `reduce`(v2, v0, v1) @signature `Lrx/Observable;.reduce:(Ljava/lang/Object;Lrx/functions/Func2;)Lrx/Observable;` @kind virtual;
  #L48b04e.  v0:= temp @kind object;
  #L48b050.  return v0 @kind object;
}
procedure `rx.Observable` `debounce`(`rx.Observable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lrx/Observable;.debounce:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b0c0.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48b0c6.  v0:= temp @kind object;
  #L48b0c8.  call temp:= `debounce`(v1, v2, v4, v0) @signature `Lrx/Observable;.debounce:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48b0ce.  v2:= temp @kind object;
  #L48b0d0.  return v2 @kind object;
}
procedure `rx.Observable` `debounce`(`rx.Observable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `rx.Scheduler` v5 @kind object) @signature `Lrx/Observable;.debounce:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b0e4.  v0:= new `rx.internal.operators.OperatorDebounceWithTime`;
  #L48b0e8.  call `<init>`(v0, v2, v4, v5) @signature `Lrx/internal/operators/OperatorDebounceWithTime;.<init>:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @kind direct;
  #L48b0ee.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b0f4.  v2:= temp @kind object;
  #L48b0f6.  return v2 @kind object;
}
procedure `rx.Observable` `debounce`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.debounce:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b108.  v0:= new `rx.internal.operators.OperatorDebounceWithSelector`;
  #L48b10c.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorDebounceWithSelector;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L48b112.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b118.  v2:= temp @kind object;
  #L48b11a.  return v2 @kind object;
}
procedure `rx.Observable` `defaultIfEmpty`(`rx.Observable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/Observable;.defaultIfEmpty:(Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48b12c.  call temp:= `just`(v1) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48b132.  v1:= temp @kind object;
  #L48b134.  call temp:= `switchIfEmpty`(v0, v1) @signature `Lrx/Observable;.switchIfEmpty:(Lrx/Observable;)Lrx/Observable;` @kind virtual;
  #L48b13a.  v1:= temp @kind object;
  #L48b13c.  return v1 @kind object;
}
procedure `rx.Observable` `delay`(`rx.Observable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lrx/Observable;.delay:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b174.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48b17a.  v0:= temp @kind object;
  #L48b17c.  call temp:= `delay`(v1, v2, v4, v0) @signature `Lrx/Observable;.delay:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48b182.  v2:= temp @kind object;
  #L48b184.  return v2 @kind object;
}
procedure `rx.Observable` `delay`(`rx.Observable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `rx.Scheduler` v5 @kind object) @signature `Lrx/Observable;.delay:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b198.  v0:= new `rx.internal.operators.OperatorDelay`;
  #L48b19c.  call `<init>`(v0, v2, v4, v5) @signature `Lrx/internal/operators/OperatorDelay;.<init>:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @kind direct;
  #L48b1a2.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b1a8.  v2:= temp @kind object;
  #L48b1aa.  return v2 @kind object;
}
procedure `rx.Observable` `delay`(`rx.Observable` v1 @kind this, `rx.functions.Func0` v2 @kind object, `rx.functions.Func1` v3 @kind object) @signature `Lrx/Observable;.delay:(Lrx/functions/Func0;Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b1bc.  call temp:= `delaySubscription`(v1, v2) @signature `Lrx/Observable;.delaySubscription:(Lrx/functions/Func0;)Lrx/Observable;` @kind virtual;
  #L48b1c2.  v2:= temp @kind object;
  #L48b1c4.  v0:= new `rx.internal.operators.OperatorDelayWithSelector`;
  #L48b1c8.  call `<init>`(v0, v1, v3) @signature `Lrx/internal/operators/OperatorDelayWithSelector;.<init>:(Lrx/Observable;Lrx/functions/Func1;)V` @kind direct;
  #L48b1ce.  call temp:= `lift`(v2, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b1d4.  v2:= temp @kind object;
  #L48b1d6.  return v2 @kind object;
}
procedure `rx.Observable` `delay`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.delay:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b1e8.  v0:= new `rx.internal.operators.OperatorDelayWithSelector`;
  #L48b1ec.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/OperatorDelayWithSelector;.<init>:(Lrx/Observable;Lrx/functions/Func1;)V` @kind direct;
  #L48b1f2.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b1f8.  v2:= temp @kind object;
  #L48b1fa.  return v2 @kind object;
}
procedure `rx.Observable` `delaySubscription`(`rx.Observable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lrx/Observable;.delaySubscription:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b20c.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48b212.  v0:= temp @kind object;
  #L48b214.  call temp:= `delaySubscription`(v1, v2, v4, v0) @signature `Lrx/Observable;.delaySubscription:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48b21a.  v2:= temp @kind object;
  #L48b21c.  return v2 @kind object;
}
procedure `rx.Observable` `delaySubscription`(`rx.Observable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `rx.Scheduler` v11 @kind object) @signature `Lrx/Observable;.delaySubscription:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48b230.  v6:= new `rx.internal.operators.OnSubscribeDelaySubscription`;
  #L48b234.  v0:= v6 @kind object;
  #L48b236.  v1:= v7 @kind object;
  #L48b238.  v2:= v8 @kind wide;
  #L48b23a.  v4:= v10 @kind object;
  #L48b23c.  v5:= v11 @kind object;
  #L48b23e.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lrx/internal/operators/OnSubscribeDelaySubscription;.<init>:(Lrx/Observable;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @kind direct;
  #L48b244.  call temp:= `create`(v6) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b24a.  v8:= temp @kind object;
  #L48b24c.  return v8 @kind object;
}
procedure `rx.Observable` `delaySubscription`(`rx.Observable` v1 @kind this, `rx.Observable` v2 @kind object) @signature `Lrx/Observable;.delaySubscription:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b260.  if v2 == 0 then goto L48b278;
  #L48b264.  v0:= new `rx.internal.operators.OnSubscribeDelaySubscriptionOther`;
  #L48b268.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/OnSubscribeDelaySubscriptionOther;.<init>:(Lrx/Observable;Lrx/Observable;)V` @kind direct;
  #L48b26e.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b274.  v2:= temp @kind object;
  #L48b276.  return v2 @kind object;
  #L48b278.  v2:= new `java.lang.NullPointerException`;
  #L48b27c.  call `<init>`(v2) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L48b282.  throw v2;
}
procedure `rx.Observable` `delaySubscription`(`rx.Observable` v1 @kind this, `rx.functions.Func0` v2 @kind object) @signature `Lrx/Observable;.delaySubscription:(Lrx/functions/Func0;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b294.  v0:= new `rx.internal.operators.OnSubscribeDelaySubscriptionWithSelector`;
  #L48b298.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/OnSubscribeDelaySubscriptionWithSelector;.<init>:(Lrx/Observable;Lrx/functions/Func0;)V` @kind direct;
  #L48b29e.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b2a4.  v2:= temp @kind object;
  #L48b2a6.  return v2 @kind object;
}
procedure `rx.Observable` `dematerialize`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.dematerialize:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b2b8.  call temp:= `instance`() @signature `Lrx/internal/operators/OperatorDematerialize;.instance:()Lrx/internal/operators/OperatorDematerialize;` @kind static;
  #L48b2be.  v0:= temp @kind object;
  #L48b2c0.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b2c6.  v0:= temp @kind object;
  #L48b2c8.  return v0 @kind object;
}
procedure `rx.Observable` `distinct`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.distinct:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b2dc.  call temp:= `instance`() @signature `Lrx/internal/operators/OperatorDistinct;.instance:()Lrx/internal/operators/OperatorDistinct;` @kind static;
  #L48b2e2.  v0:= temp @kind object;
  #L48b2e4.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b2ea.  v0:= temp @kind object;
  #L48b2ec.  return v0 @kind object;
}
procedure `rx.Observable` `distinct`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.distinct:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b300.  v0:= new `rx.internal.operators.OperatorDistinct`;
  #L48b304.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorDistinct;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L48b30a.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b310.  v2:= temp @kind object;
  #L48b312.  return v2 @kind object;
}
procedure `rx.Observable` `distinctUntilChanged`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.distinctUntilChanged:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b324.  call temp:= `instance`() @signature `Lrx/internal/operators/OperatorDistinctUntilChanged;.instance:()Lrx/internal/operators/OperatorDistinctUntilChanged;` @kind static;
  #L48b32a.  v0:= temp @kind object;
  #L48b32c.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b332.  v0:= temp @kind object;
  #L48b334.  return v0 @kind object;
}
procedure `rx.Observable` `distinctUntilChanged`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.distinctUntilChanged:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b348.  v0:= new `rx.internal.operators.OperatorDistinctUntilChanged`;
  #L48b34c.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorDistinctUntilChanged;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L48b352.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b358.  v2:= temp @kind object;
  #L48b35a.  return v2 @kind object;
}
procedure `rx.Observable` `distinctUntilChanged`(`rx.Observable` v1 @kind this, `rx.functions.Func2` v2 @kind object) @signature `Lrx/Observable;.distinctUntilChanged:(Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b36c.  v0:= new `rx.internal.operators.OperatorDistinctUntilChanged`;
  #L48b370.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorDistinctUntilChanged;.<init>:(Lrx/functions/Func2;)V` @kind direct;
  #L48b376.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b37c.  v2:= temp @kind object;
  #L48b37e.  return v2 @kind object;
}
procedure `rx.Observable` `doAfterTerminate`(`rx.Observable` v1 @kind this, `rx.functions.Action0` v2 @kind object) @signature `Lrx/Observable;.doAfterTerminate:(Lrx/functions/Action0;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b390.  v0:= new `rx.internal.operators.OperatorDoAfterTerminate`;
  #L48b394.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorDoAfterTerminate;.<init>:(Lrx/functions/Action0;)V` @kind direct;
  #L48b39a.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b3a0.  v2:= temp @kind object;
  #L48b3a2.  return v2 @kind object;
}
procedure `rx.Observable` `doOnCompleted`(`rx.Observable` v3 @kind this, `rx.functions.Action0` v4 @kind object) @signature `Lrx/Observable;.doOnCompleted:(Lrx/functions/Action0;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48b3b4.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L48b3ba.  v0:= temp @kind object;
  #L48b3bc.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L48b3c2.  v1:= temp @kind object;
  #L48b3c4.  v2:= new `rx.internal.util.ActionObserver`;
  #L48b3c8.  call `<init>`(v2, v0, v1, v4) @signature `Lrx/internal/util/ActionObserver;.<init>:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)V` @kind direct;
  #L48b3ce.  v4:= new `rx.internal.operators.OnSubscribeDoOnEach`;
  #L48b3d2.  call `<init>`(v4, v3, v2) @signature `Lrx/internal/operators/OnSubscribeDoOnEach;.<init>:(Lrx/Observable;Lrx/Observer;)V` @kind direct;
  #L48b3d8.  call temp:= `create`(v4) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b3de.  v4:= temp @kind object;
  #L48b3e0.  return v4 @kind object;
}
procedure `rx.Observable` `doOnEach`(`rx.Observable` v1 @kind this, `rx.Observer` v2 @kind object) @signature `Lrx/Observable;.doOnEach:(Lrx/Observer;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b3f4.  v0:= new `rx.internal.operators.OnSubscribeDoOnEach`;
  #L48b3f8.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/OnSubscribeDoOnEach;.<init>:(Lrx/Observable;Lrx/Observer;)V` @kind direct;
  #L48b3fe.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b404.  v2:= temp @kind object;
  #L48b406.  return v2 @kind object;
}
procedure `rx.Observable` `doOnEach`(`rx.Observable` v1 @kind this, `rx.functions.Action1` v2 @kind object) @signature `Lrx/Observable;.doOnEach:(Lrx/functions/Action1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b418.  v0:= new `rx.internal.util.ActionNotificationObserver`;
  #L48b41c.  call `<init>`(v0, v2) @signature `Lrx/internal/util/ActionNotificationObserver;.<init>:(Lrx/functions/Action1;)V` @kind direct;
  #L48b422.  v2:= new `rx.internal.operators.OnSubscribeDoOnEach`;
  #L48b426.  call `<init>`(v2, v1, v0) @signature `Lrx/internal/operators/OnSubscribeDoOnEach;.<init>:(Lrx/Observable;Lrx/Observer;)V` @kind direct;
  #L48b42c.  call temp:= `create`(v2) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b432.  v2:= temp @kind object;
  #L48b434.  return v2 @kind object;
}
procedure `rx.Observable` `doOnError`(`rx.Observable` v3 @kind this, `rx.functions.Action1` v4 @kind object) @signature `Lrx/Observable;.doOnError:(Lrx/functions/Action1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48b448.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L48b44e.  v0:= temp @kind object;
  #L48b450.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L48b456.  v1:= temp @kind object;
  #L48b458.  v2:= new `rx.internal.util.ActionObserver`;
  #L48b45c.  call `<init>`(v2, v0, v4, v1) @signature `Lrx/internal/util/ActionObserver;.<init>:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)V` @kind direct;
  #L48b462.  v4:= new `rx.internal.operators.OnSubscribeDoOnEach`;
  #L48b466.  call `<init>`(v4, v3, v2) @signature `Lrx/internal/operators/OnSubscribeDoOnEach;.<init>:(Lrx/Observable;Lrx/Observer;)V` @kind direct;
  #L48b46c.  call temp:= `create`(v4) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b472.  v4:= temp @kind object;
  #L48b474.  return v4 @kind object;
}
procedure `rx.Observable` `doOnNext`(`rx.Observable` v3 @kind this, `rx.functions.Action1` v4 @kind object) @signature `Lrx/Observable;.doOnNext:(Lrx/functions/Action1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48b488.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L48b48e.  v0:= temp @kind object;
  #L48b490.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L48b496.  v1:= temp @kind object;
  #L48b498.  v2:= new `rx.internal.util.ActionObserver`;
  #L48b49c.  call `<init>`(v2, v4, v0, v1) @signature `Lrx/internal/util/ActionObserver;.<init>:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)V` @kind direct;
  #L48b4a2.  v4:= new `rx.internal.operators.OnSubscribeDoOnEach`;
  #L48b4a6.  call `<init>`(v4, v3, v2) @signature `Lrx/internal/operators/OnSubscribeDoOnEach;.<init>:(Lrx/Observable;Lrx/Observer;)V` @kind direct;
  #L48b4ac.  call temp:= `create`(v4) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b4b2.  v4:= temp @kind object;
  #L48b4b4.  return v4 @kind object;
}
procedure `rx.Observable` `doOnRequest`(`rx.Observable` v1 @kind this, `rx.functions.Action1` v2 @kind object) @signature `Lrx/Observable;.doOnRequest:(Lrx/functions/Action1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b4c8.  v0:= new `rx.internal.operators.OperatorDoOnRequest`;
  #L48b4cc.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorDoOnRequest;.<init>:(Lrx/functions/Action1;)V` @kind direct;
  #L48b4d2.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b4d8.  v2:= temp @kind object;
  #L48b4da.  return v2 @kind object;
}
procedure `rx.Observable` `doOnSubscribe`(`rx.Observable` v1 @kind this, `rx.functions.Action0` v2 @kind object) @signature `Lrx/Observable;.doOnSubscribe:(Lrx/functions/Action0;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b4ec.  v0:= new `rx.internal.operators.OperatorDoOnSubscribe`;
  #L48b4f0.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorDoOnSubscribe;.<init>:(Lrx/functions/Action0;)V` @kind direct;
  #L48b4f6.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b4fc.  v2:= temp @kind object;
  #L48b4fe.  return v2 @kind object;
}
procedure `rx.Observable` `doOnTerminate`(`rx.Observable` v3 @kind this, `rx.functions.Action0` v4 @kind object) @signature `Lrx/Observable;.doOnTerminate:(Lrx/functions/Action0;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48b510.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L48b516.  v0:= temp @kind object;
  #L48b518.  call temp:= `toAction1`(v4) @signature `Lrx/functions/Actions;.toAction1:(Lrx/functions/Action0;)Lrx/functions/Action1;` @kind static;
  #L48b51e.  v1:= temp @kind object;
  #L48b520.  v2:= new `rx.internal.util.ActionObserver`;
  #L48b524.  call `<init>`(v2, v0, v1, v4) @signature `Lrx/internal/util/ActionObserver;.<init>:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)V` @kind direct;
  #L48b52a.  v4:= new `rx.internal.operators.OnSubscribeDoOnEach`;
  #L48b52e.  call `<init>`(v4, v3, v2) @signature `Lrx/internal/operators/OnSubscribeDoOnEach;.<init>:(Lrx/Observable;Lrx/Observer;)V` @kind direct;
  #L48b534.  call temp:= `create`(v4) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b53a.  v4:= temp @kind object;
  #L48b53c.  return v4 @kind object;
}
procedure `rx.Observable` `doOnUnsubscribe`(`rx.Observable` v1 @kind this, `rx.functions.Action0` v2 @kind object) @signature `Lrx/Observable;.doOnUnsubscribe:(Lrx/functions/Action0;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b550.  v0:= new `rx.internal.operators.OperatorDoOnUnsubscribe`;
  #L48b554.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorDoOnUnsubscribe;.<init>:(Lrx/functions/Action0;)V` @kind direct;
  #L48b55a.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b560.  v2:= temp @kind object;
  #L48b562.  return v2 @kind object;
}
procedure `rx.Observable` `elementAt`(`rx.Observable` v1 @kind this, `int` v2 ) @signature `Lrx/Observable;.elementAt:(I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b574.  v0:= new `rx.internal.operators.OperatorElementAt`;
  #L48b578.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorElementAt;.<init>:(I)V` @kind direct;
  #L48b57e.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b584.  v2:= temp @kind object;
  #L48b586.  return v2 @kind object;
}
procedure `rx.Observable` `elementAtOrDefault`(`rx.Observable` v1 @kind this, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lrx/Observable;.elementAtOrDefault:(ILjava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b598.  v0:= new `rx.internal.operators.OperatorElementAt`;
  #L48b59c.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/operators/OperatorElementAt;.<init>:(ILjava/lang/Object;)V` @kind direct;
  #L48b5a2.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b5a8.  v2:= temp @kind object;
  #L48b5aa.  return v2 @kind object;
}
procedure `rx.Observable` `exists`(`rx.Observable` v2 @kind this, `rx.functions.Func1` v3 @kind object) @signature `Lrx/Observable;.exists:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48b5fc.  v0:= new `rx.internal.operators.OperatorAny`;
  #L48b600.  v1:= 0I;
  #L48b602.  call `<init>`(v0, v3, v1) @signature `Lrx/internal/operators/OperatorAny;.<init>:(Lrx/functions/Func1;Z)V` @kind direct;
  #L48b608.  call temp:= `lift`(v2, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b60e.  v3:= temp @kind object;
  #L48b610.  return v3 @kind object;
}
procedure `rx.Observable` `filter`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.filter:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b624.  v0:= new `rx.internal.operators.OnSubscribeFilter`;
  #L48b628.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/OnSubscribeFilter;.<init>:(Lrx/Observable;Lrx/functions/Func1;)V` @kind direct;
  #L48b62e.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48b634.  v2:= temp @kind object;
  #L48b636.  return v2 @kind object;
}
procedure `rx.Observable` `finallyDo`(`rx.Observable` v1 @kind this, `rx.functions.Action0` v2 @kind object) @signature `Lrx/Observable;.finallyDo:(Lrx/functions/Action0;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b648.  v0:= new `rx.internal.operators.OperatorDoAfterTerminate`;
  #L48b64c.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorDoAfterTerminate;.<init>:(Lrx/functions/Action0;)V` @kind direct;
  #L48b652.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b658.  v2:= temp @kind object;
  #L48b65a.  return v2 @kind object;
}
procedure `rx.Observable` `first`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.first:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b66c.  v0:= 1I;
  #L48b66e.  call temp:= `take`(v1, v0) @signature `Lrx/Observable;.take:(I)Lrx/Observable;` @kind virtual;
  #L48b674.  v0:= temp @kind object;
  #L48b676.  call temp:= `single`(v0) @signature `Lrx/Observable;.single:()Lrx/Observable;` @kind virtual;
  #L48b67c.  v0:= temp @kind object;
  #L48b67e.  return v0 @kind object;
}
procedure `rx.Observable` `first`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/Observable;.first:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48b690.  call temp:= `takeFirst`(v0, v1) @signature `Lrx/Observable;.takeFirst:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48b696.  v1:= temp @kind object;
  #L48b698.  call temp:= `single`(v1) @signature `Lrx/Observable;.single:()Lrx/Observable;` @kind virtual;
  #L48b69e.  v1:= temp @kind object;
  #L48b6a0.  return v1 @kind object;
}
procedure `rx.Observable` `firstOrDefault`(`rx.Observable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/Observable;.firstOrDefault:(Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b6b4.  v0:= 1I;
  #L48b6b6.  call temp:= `take`(v1, v0) @signature `Lrx/Observable;.take:(I)Lrx/Observable;` @kind virtual;
  #L48b6bc.  v0:= temp @kind object;
  #L48b6be.  call temp:= `singleOrDefault`(v0, v2) @signature `Lrx/Observable;.singleOrDefault:(Ljava/lang/Object;)Lrx/Observable;` @kind virtual;
  #L48b6c4.  v2:= temp @kind object;
  #L48b6c6.  return v2 @kind object;
}
procedure `rx.Observable` `firstOrDefault`(`rx.Observable` v0 @kind this, `java.lang.Object` v1 @kind object, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.firstOrDefault:(Ljava/lang/Object;Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48b6d8.  call temp:= `takeFirst`(v0, v2) @signature `Lrx/Observable;.takeFirst:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48b6de.  v2:= temp @kind object;
  #L48b6e0.  call temp:= `singleOrDefault`(v2, v1) @signature `Lrx/Observable;.singleOrDefault:(Ljava/lang/Object;)Lrx/Observable;` @kind virtual;
  #L48b6e6.  v1:= temp @kind object;
  #L48b6e8.  return v1 @kind object;
}
procedure `rx.Observable` `flatMap`(`rx.Observable` v2 @kind this, `rx.functions.Func1` v3 @kind object) @signature `Lrx/Observable;.flatMap:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48b6fc.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L48b702.  v0:= temp @kind object;
  #L48b704.  v1:= constclass @type ^`rx.internal.util.ScalarSynchronousObservable` @kind object;
  #L48b708.  if v0 != v1 then goto L48b71c;
  #L48b70c.  v0:= v2 @kind object;
  #L48b70e.  v0:= (`rx.internal.util.ScalarSynchronousObservable`) v0 @kind object;
  #L48b712.  call temp:= `scalarFlatMap`(v0, v3) @signature `Lrx/internal/util/ScalarSynchronousObservable;.scalarFlatMap:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48b718.  v3:= temp @kind object;
  #L48b71a.  return v3 @kind object;
  #L48b71c.  call temp:= `map`(v2, v3) @signature `Lrx/Observable;.map:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48b722.  v3:= temp @kind object;
  #L48b724.  call temp:= `merge`(v3) @signature `Lrx/Observable;.merge:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48b72a.  v3:= temp @kind object;
  #L48b72c.  return v3 @kind object;
}
procedure `rx.Observable` `flatMap`(`rx.Observable` v2 @kind this, `rx.functions.Func1` v3 @kind object, `int` v4 ) @signature `Lrx/Observable;.flatMap:(Lrx/functions/Func1;I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48b740.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L48b746.  v0:= temp @kind object;
  #L48b748.  v1:= constclass @type ^`rx.internal.util.ScalarSynchronousObservable` @kind object;
  #L48b74c.  if v0 != v1 then goto L48b760;
  #L48b750.  v4:= v2 @kind object;
  #L48b752.  v4:= (`rx.internal.util.ScalarSynchronousObservable`) v4 @kind object;
  #L48b756.  call temp:= `scalarFlatMap`(v4, v3) @signature `Lrx/internal/util/ScalarSynchronousObservable;.scalarFlatMap:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48b75c.  v3:= temp @kind object;
  #L48b75e.  return v3 @kind object;
  #L48b760.  call temp:= `map`(v2, v3) @signature `Lrx/Observable;.map:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48b766.  v3:= temp @kind object;
  #L48b768.  call temp:= `merge`(v3, v4) @signature `Lrx/Observable;.merge:(Lrx/Observable;I)Lrx/Observable;` @kind static;
  #L48b76e.  v3:= temp @kind object;
  #L48b770.  return v3 @kind object;
}
procedure `rx.Observable` `flatMap`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object, `rx.functions.Func1` v2 @kind object, `rx.functions.Func0` v3 @kind object) @signature `Lrx/Observable;.flatMap:(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48b784.  call temp:= `mapNotification`(v0, v1, v2, v3) @signature `Lrx/Observable;.mapNotification:(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;)Lrx/Observable;` @kind direct;
  #L48b78a.  v1:= temp @kind object;
  #L48b78c.  call temp:= `merge`(v1) @signature `Lrx/Observable;.merge:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48b792.  v1:= temp @kind object;
  #L48b794.  return v1 @kind object;
}
procedure `rx.Observable` `flatMap`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object, `rx.functions.Func1` v2 @kind object, `rx.functions.Func0` v3 @kind object, `int` v4 ) @signature `Lrx/Observable;.flatMap:(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48b7a8.  call temp:= `mapNotification`(v0, v1, v2, v3) @signature `Lrx/Observable;.mapNotification:(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;)Lrx/Observable;` @kind direct;
  #L48b7ae.  v1:= temp @kind object;
  #L48b7b0.  call temp:= `merge`(v1, v4) @signature `Lrx/Observable;.merge:(Lrx/Observable;I)Lrx/Observable;` @kind static;
  #L48b7b6.  v1:= temp @kind object;
  #L48b7b8.  return v1 @kind object;
}
procedure `rx.Observable` `flatMap`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object, `rx.functions.Func2` v3 @kind object) @signature `Lrx/Observable;.flatMap:(Lrx/functions/Func1;Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b7cc.  v0:= new `rx.internal.operators.OperatorMapPair`;
  #L48b7d0.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/operators/OperatorMapPair;.<init>:(Lrx/functions/Func1;Lrx/functions/Func2;)V` @kind direct;
  #L48b7d6.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b7dc.  v2:= temp @kind object;
  #L48b7de.  call temp:= `merge`(v2) @signature `Lrx/Observable;.merge:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48b7e4.  v2:= temp @kind object;
  #L48b7e6.  return v2 @kind object;
}
procedure `rx.Observable` `flatMap`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object, `rx.functions.Func2` v3 @kind object, `int` v4 ) @signature `Lrx/Observable;.flatMap:(Lrx/functions/Func1;Lrx/functions/Func2;I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b7f8.  v0:= new `rx.internal.operators.OperatorMapPair`;
  #L48b7fc.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/operators/OperatorMapPair;.<init>:(Lrx/functions/Func1;Lrx/functions/Func2;)V` @kind direct;
  #L48b802.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b808.  v2:= temp @kind object;
  #L48b80a.  call temp:= `merge`(v2, v4) @signature `Lrx/Observable;.merge:(Lrx/Observable;I)Lrx/Observable;` @kind static;
  #L48b810.  v2:= temp @kind object;
  #L48b812.  return v2 @kind object;
}
procedure `rx.Observable` `flatMapIterable`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.flatMapIterable:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b824.  v0:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L48b828.  call temp:= `flatMapIterable`(v1, v2, v0) @signature `Lrx/Observable;.flatMapIterable:(Lrx/functions/Func1;I)Lrx/Observable;` @kind virtual;
  #L48b82e.  v2:= temp @kind object;
  #L48b830.  return v2 @kind object;
}
procedure `rx.Observable` `flatMapIterable`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object, `int` v2 ) @signature `Lrx/Observable;.flatMapIterable:(Lrx/functions/Func1;I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48b844.  call temp:= `createFrom`(v0, v1, v2) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable;.createFrom:(Lrx/Observable;Lrx/functions/Func1;I)Lrx/Observable;` @kind static;
  #L48b84a.  v1:= temp @kind object;
  #L48b84c.  return v1 @kind object;
}
procedure `rx.Observable` `flatMapIterable`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object, `rx.functions.Func2` v2 @kind object) @signature `Lrx/Observable;.flatMapIterable:(Lrx/functions/Func1;Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48b860.  call temp:= `convertSelector`(v1) @signature `Lrx/internal/operators/OperatorMapPair;.convertSelector:(Lrx/functions/Func1;)Lrx/functions/Func1;` @kind static;
  #L48b866.  v1:= temp @kind object;
  #L48b868.  call temp:= `flatMap`(v0, v1, v2) @signature `Lrx/Observable;.flatMap:(Lrx/functions/Func1;Lrx/functions/Func2;)Lrx/Observable;` @kind virtual;
  #L48b86e.  v1:= temp @kind object;
  #L48b870.  return v1 @kind object;
}
procedure `rx.Observable` `flatMapIterable`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object, `rx.functions.Func2` v2 @kind object, `int` v3 ) @signature `Lrx/Observable;.flatMapIterable:(Lrx/functions/Func1;Lrx/functions/Func2;I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48b884.  call temp:= `convertSelector`(v1) @signature `Lrx/internal/operators/OperatorMapPair;.convertSelector:(Lrx/functions/Func1;)Lrx/functions/Func1;` @kind static;
  #L48b88a.  v1:= temp @kind object;
  #L48b88c.  call temp:= `flatMap`(v0, v1, v2, v3) @signature `Lrx/Observable;.flatMap:(Lrx/functions/Func1;Lrx/functions/Func2;I)Lrx/Observable;` @kind virtual;
  #L48b892.  v1:= temp @kind object;
  #L48b894.  return v1 @kind object;
}
procedure `void` `forEach`(`rx.Observable` v0 @kind this, `rx.functions.Action1` v1 @kind object) @signature `Lrx/Observable;.forEach:(Lrx/functions/Action1;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48e700.  call temp:= `subscribe`(v0, v1) @signature `Lrx/Observable;.subscribe:(Lrx/functions/Action1;)Lrx/Subscription;` @kind virtual;
  #L48e706.  return @kind void;
}
procedure `void` `forEach`(`rx.Observable` v0 @kind this, `rx.functions.Action1` v1 @kind object, `rx.functions.Action1` v2 @kind object) @signature `Lrx/Observable;.forEach:(Lrx/functions/Action1;Lrx/functions/Action1;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48e718.  call temp:= `subscribe`(v0, v1, v2) @signature `Lrx/Observable;.subscribe:(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Subscription;` @kind virtual;
  #L48e71e.  return @kind void;
}
procedure `void` `forEach`(`rx.Observable` v0 @kind this, `rx.functions.Action1` v1 @kind object, `rx.functions.Action1` v2 @kind object, `rx.functions.Action0` v3 @kind object) @signature `Lrx/Observable;.forEach:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48e730.  call temp:= `subscribe`(v0, v1, v2, v3) @signature `Lrx/Observable;.subscribe:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Subscription;` @kind virtual;
  #L48e736.  return @kind void;
}
procedure `rx.Observable` `groupBy`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.groupBy:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b9d4.  v0:= new `rx.internal.operators.OperatorGroupBy`;
  #L48b9d8.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorGroupBy;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L48b9de.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48b9e4.  v2:= temp @kind object;
  #L48b9e6.  return v2 @kind object;
}
procedure `rx.Observable` `groupBy`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object, `rx.functions.Func1` v3 @kind object) @signature `Lrx/Observable;.groupBy:(Lrx/functions/Func1;Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b9f8.  v0:= new `rx.internal.operators.OperatorGroupBy`;
  #L48b9fc.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/operators/OperatorGroupBy;.<init>:(Lrx/functions/Func1;Lrx/functions/Func1;)V` @kind direct;
  #L48ba02.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48ba08.  v2:= temp @kind object;
  #L48ba0a.  return v2 @kind object;
}
procedure `rx.Observable` `groupBy`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object, `rx.functions.Func1` v3 @kind object, `rx.functions.Func1` v4 @kind object) @signature `Lrx/Observable;.groupBy:(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48ba1c.  if v4 == 0 then goto L48ba34;
  #L48ba20.  v0:= new `rx.internal.operators.OperatorGroupBy`;
  #L48ba24.  call `<init>`(v0, v2, v3, v4) @signature `Lrx/internal/operators/OperatorGroupBy;.<init>:(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func1;)V` @kind direct;
  #L48ba2a.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48ba30.  v2:= temp @kind object;
  #L48ba32.  return v2 @kind object;
  #L48ba34.  v2:= new `java.lang.NullPointerException`;
  #L48ba38.  v3:= "evictingMapFactory cannot be null" @kind object;
  #L48ba3c.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48ba42.  throw v2;
}
procedure `rx.Observable` `groupJoin`(`rx.Observable` v7 @kind this, `rx.Observable` v8 @kind object, `rx.functions.Func1` v9 @kind object, `rx.functions.Func1` v10 @kind object, `rx.functions.Func2` v11 @kind object) @signature `Lrx/Observable;.groupJoin:(Lrx/Observable;Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48ba54.  v6:= new `rx.internal.operators.OnSubscribeGroupJoin`;
  #L48ba58.  v0:= v6 @kind object;
  #L48ba5a.  v1:= v7 @kind object;
  #L48ba5c.  v2:= v8 @kind object;
  #L48ba5e.  v3:= v9 @kind object;
  #L48ba60.  v4:= v10 @kind object;
  #L48ba62.  v5:= v11 @kind object;
  #L48ba64.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lrx/internal/operators/OnSubscribeGroupJoin;.<init>:(Lrx/Observable;Lrx/Observable;Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func2;)V` @kind direct;
  #L48ba6a.  call temp:= `create`(v6) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48ba70.  v8:= temp @kind object;
  #L48ba72.  return v8 @kind object;
}
procedure `rx.Observable` `ignoreElements`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.ignoreElements:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48ba84.  call temp:= `instance`() @signature `Lrx/internal/operators/OperatorIgnoreElements;.instance:()Lrx/internal/operators/OperatorIgnoreElements;` @kind static;
  #L48ba8a.  v0:= temp @kind object;
  #L48ba8c.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48ba92.  v0:= temp @kind object;
  #L48ba94.  return v0 @kind object;
}
procedure `rx.Observable` `isEmpty`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.isEmpty:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48bb4c.  v0:= `@@rx.internal.util.InternalObservableUtils.IS_EMPTY` @type ^`rx.Observable$Operator` @kind object;
  #L48bb50.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48bb56.  v0:= temp @kind object;
  #L48bb58.  return v0 @kind object;
}
procedure `rx.Observable` `join`(`rx.Observable` v7 @kind this, `rx.Observable` v8 @kind object, `rx.functions.Func1` v9 @kind object, `rx.functions.Func1` v10 @kind object, `rx.functions.Func2` v11 @kind object) @signature `Lrx/Observable;.join:(Lrx/Observable;Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48bb6c.  v6:= new `rx.internal.operators.OnSubscribeJoin`;
  #L48bb70.  v0:= v6 @kind object;
  #L48bb72.  v1:= v7 @kind object;
  #L48bb74.  v2:= v8 @kind object;
  #L48bb76.  v3:= v9 @kind object;
  #L48bb78.  v4:= v10 @kind object;
  #L48bb7a.  v5:= v11 @kind object;
  #L48bb7c.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lrx/internal/operators/OnSubscribeJoin;.<init>:(Lrx/Observable;Lrx/Observable;Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func2;)V` @kind direct;
  #L48bb82.  call temp:= `create`(v6) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48bb88.  v8:= temp @kind object;
  #L48bb8a.  return v8 @kind object;
}
procedure `rx.Observable` `last`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.last:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48be58.  v0:= 1I;
  #L48be5a.  call temp:= `takeLast`(v1, v0) @signature `Lrx/Observable;.takeLast:(I)Lrx/Observable;` @kind virtual;
  #L48be60.  v0:= temp @kind object;
  #L48be62.  call temp:= `single`(v0) @signature `Lrx/Observable;.single:()Lrx/Observable;` @kind virtual;
  #L48be68.  v0:= temp @kind object;
  #L48be6a.  return v0 @kind object;
}
procedure `rx.Observable` `last`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.last:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48be7c.  call temp:= `filter`(v1, v2) @signature `Lrx/Observable;.filter:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48be82.  v2:= temp @kind object;
  #L48be84.  v0:= 1I;
  #L48be86.  call temp:= `takeLast`(v2, v0) @signature `Lrx/Observable;.takeLast:(I)Lrx/Observable;` @kind virtual;
  #L48be8c.  v2:= temp @kind object;
  #L48be8e.  call temp:= `single`(v2) @signature `Lrx/Observable;.single:()Lrx/Observable;` @kind virtual;
  #L48be94.  v2:= temp @kind object;
  #L48be96.  return v2 @kind object;
}
procedure `rx.Observable` `lastOrDefault`(`rx.Observable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/Observable;.lastOrDefault:(Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48bea8.  v0:= 1I;
  #L48beaa.  call temp:= `takeLast`(v1, v0) @signature `Lrx/Observable;.takeLast:(I)Lrx/Observable;` @kind virtual;
  #L48beb0.  v0:= temp @kind object;
  #L48beb2.  call temp:= `singleOrDefault`(v0, v2) @signature `Lrx/Observable;.singleOrDefault:(Ljava/lang/Object;)Lrx/Observable;` @kind virtual;
  #L48beb8.  v2:= temp @kind object;
  #L48beba.  return v2 @kind object;
}
procedure `rx.Observable` `lastOrDefault`(`rx.Observable` v1 @kind this, `java.lang.Object` v2 @kind object, `rx.functions.Func1` v3 @kind object) @signature `Lrx/Observable;.lastOrDefault:(Ljava/lang/Object;Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48becc.  call temp:= `filter`(v1, v3) @signature `Lrx/Observable;.filter:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48bed2.  v3:= temp @kind object;
  #L48bed4.  v0:= 1I;
  #L48bed6.  call temp:= `takeLast`(v3, v0) @signature `Lrx/Observable;.takeLast:(I)Lrx/Observable;` @kind virtual;
  #L48bedc.  v3:= temp @kind object;
  #L48bede.  call temp:= `singleOrDefault`(v3, v2) @signature `Lrx/Observable;.singleOrDefault:(Ljava/lang/Object;)Lrx/Observable;` @kind virtual;
  #L48bee4.  v2:= temp @kind object;
  #L48bee6.  return v2 @kind object;
}
procedure `rx.Observable` `lift`(`rx.Observable` v2 @kind this, `rx.Observable$Operator` v3 @kind object) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48bef8.  v0:= new `rx.internal.operators.OnSubscribeLift`;
  #L48befc.  v1:= v2.`rx.Observable.onSubscribe` @type ^`rx.Observable$OnSubscribe` @kind object;
  #L48bf00.  call `<init>`(v0, v1, v3) @signature `Lrx/internal/operators/OnSubscribeLift;.<init>:(Lrx/Observable$OnSubscribe;Lrx/Observable$Operator;)V` @kind direct;
  #L48bf06.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48bf0c.  v3:= temp @kind object;
  #L48bf0e.  return v3 @kind object;
}
procedure `rx.Observable` `limit`(`rx.Observable` v0 @kind this, `int` v1 ) @signature `Lrx/Observable;.limit:(I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48bf20.  call temp:= `take`(v0, v1) @signature `Lrx/Observable;.take:(I)Lrx/Observable;` @kind virtual;
  #L48bf26.  v1:= temp @kind object;
  #L48bf28.  return v1 @kind object;
}
procedure `rx.Observable` `map`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.map:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48bf3c.  v0:= new `rx.internal.operators.OnSubscribeMap`;
  #L48bf40.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/OnSubscribeMap;.<init>:(Lrx/Observable;Lrx/functions/Func1;)V` @kind direct;
  #L48bf46.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48bf4c.  v2:= temp @kind object;
  #L48bf4e.  return v2 @kind object;
}
procedure `rx.Observable` `materialize`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.materialize:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48bf84.  call temp:= `instance`() @signature `Lrx/internal/operators/OperatorMaterialize;.instance:()Lrx/internal/operators/OperatorMaterialize;` @kind static;
  #L48bf8a.  v0:= temp @kind object;
  #L48bf8c.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48bf92.  v0:= temp @kind object;
  #L48bf94.  return v0 @kind object;
}
procedure `rx.Observable` `mergeWith`(`rx.Observable` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/Observable;.mergeWith:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48c498.  call temp:= `merge`(v0, v1) @signature `Lrx/Observable;.merge:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c49e.  v1:= temp @kind object;
  #L48c4a0.  return v1 @kind object;
}
procedure `rx.Observable` `nest`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.nest:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c4b4.  call temp:= `just`(v1) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48c4ba.  v0:= temp @kind object;
  #L48c4bc.  return v0 @kind object;
}
procedure `rx.Observable` `observeOn`(`rx.Observable` v1 @kind this, `rx.Scheduler` v2 @kind object) @signature `Lrx/Observable;.observeOn:(Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c4ec.  v0:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L48c4f0.  call temp:= `observeOn`(v1, v2, v0) @signature `Lrx/Observable;.observeOn:(Lrx/Scheduler;I)Lrx/Observable;` @kind virtual;
  #L48c4f6.  v2:= temp @kind object;
  #L48c4f8.  return v2 @kind object;
}
procedure `rx.Observable` `observeOn`(`rx.Observable` v1 @kind this, `rx.Scheduler` v2 @kind object, `int` v3 ) @signature `Lrx/Observable;.observeOn:(Lrx/Scheduler;I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c568.  v0:= 0I;
  #L48c56a.  call temp:= `observeOn`(v1, v2, v0, v3) @signature `Lrx/Observable;.observeOn:(Lrx/Scheduler;ZI)Lrx/Observable;` @kind virtual;
  #L48c570.  v2:= temp @kind object;
  #L48c572.  return v2 @kind object;
}
procedure `rx.Observable` `observeOn`(`rx.Observable` v1 @kind this, `rx.Scheduler` v2 @kind object, `boolean` v3 ) @signature `Lrx/Observable;.observeOn:(Lrx/Scheduler;Z)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c50c.  v0:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L48c510.  call temp:= `observeOn`(v1, v2, v3, v0) @signature `Lrx/Observable;.observeOn:(Lrx/Scheduler;ZI)Lrx/Observable;` @kind virtual;
  #L48c516.  v2:= temp @kind object;
  #L48c518.  return v2 @kind object;
}
procedure `rx.Observable` `observeOn`(`rx.Observable` v1 @kind this, `rx.Scheduler` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lrx/Observable;.observeOn:(Lrx/Scheduler;ZI)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c52c.  v0:= instanceof @variable v1 @type ^`rx.internal.util.ScalarSynchronousObservable` @kind boolean;
  #L48c530.  if v0 == 0 then goto L48c544;
  #L48c534.  v3:= v1 @kind object;
  #L48c536.  v3:= (`rx.internal.util.ScalarSynchronousObservable`) v3 @kind object;
  #L48c53a.  call temp:= `scalarScheduleOn`(v3, v2) @signature `Lrx/internal/util/ScalarSynchronousObservable;.scalarScheduleOn:(Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48c540.  v2:= temp @kind object;
  #L48c542.  return v2 @kind object;
  #L48c544.  v0:= new `rx.internal.operators.OperatorObserveOn`;
  #L48c548.  call `<init>`(v0, v2, v3, v4) @signature `Lrx/internal/operators/OperatorObserveOn;.<init>:(Lrx/Scheduler;ZI)V` @kind direct;
  #L48c54e.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48c554.  v2:= temp @kind object;
  #L48c556.  return v2 @kind object;
}
procedure `rx.Observable` `ofType`(`rx.Observable` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lrx/Observable;.ofType:(Ljava/lang/Class;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c584.  call temp:= `isInstanceOf`(v2) @signature `Lrx/internal/util/InternalObservableUtils;.isInstanceOf:(Ljava/lang/Class;)Lrx/functions/Func1;` @kind static;
  #L48c58a.  v0:= temp @kind object;
  #L48c58c.  call temp:= `filter`(v1, v0) @signature `Lrx/Observable;.filter:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48c592.  v0:= temp @kind object;
  #L48c594.  call temp:= `cast`(v0, v2) @signature `Lrx/Observable;.cast:(Ljava/lang/Class;)Lrx/Observable;` @kind virtual;
  #L48c59a.  v2:= temp @kind object;
  #L48c59c.  return v2 @kind object;
}
procedure `rx.Observable` `onBackpressureBuffer`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.onBackpressureBuffer:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c5b0.  call temp:= `instance`() @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer;.instance:()Lrx/internal/operators/OperatorOnBackpressureBuffer;` @kind static;
  #L48c5b6.  v0:= temp @kind object;
  #L48c5b8.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48c5be.  v0:= temp @kind object;
  #L48c5c0.  return v0 @kind object;
}
procedure `rx.Observable` `onBackpressureBuffer`(`rx.Observable` v1 @kind this, `long` v2 ) @signature `Lrx/Observable;.onBackpressureBuffer:(J)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c5d4.  v0:= new `rx.internal.operators.OperatorOnBackpressureBuffer`;
  #L48c5d8.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer;.<init>:(J)V` @kind direct;
  #L48c5de.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48c5e4.  v2:= temp @kind object;
  #L48c5e6.  return v2 @kind object;
}
procedure `rx.Observable` `onBackpressureBuffer`(`rx.Observable` v1 @kind this, `long` v2 , `rx.functions.Action0` v4 @kind object) @signature `Lrx/Observable;.onBackpressureBuffer:(JLrx/functions/Action0;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c5f8.  v0:= new `rx.internal.operators.OperatorOnBackpressureBuffer`;
  #L48c5fc.  call `<init>`(v0, v2, v4) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer;.<init>:(JLrx/functions/Action0;)V` @kind direct;
  #L48c602.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48c608.  v2:= temp @kind object;
  #L48c60a.  return v2 @kind object;
}
procedure `rx.Observable` `onBackpressureBuffer`(`rx.Observable` v1 @kind this, `long` v2 , `rx.functions.Action0` v4 @kind object, `rx.BackpressureOverflow$Strategy` v5 @kind object) @signature `Lrx/Observable;.onBackpressureBuffer:(JLrx/functions/Action0;Lrx/BackpressureOverflow$Strategy;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c61c.  v0:= new `rx.internal.operators.OperatorOnBackpressureBuffer`;
  #L48c620.  call `<init>`(v0, v2, v4, v5) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer;.<init>:(JLrx/functions/Action0;Lrx/BackpressureOverflow$Strategy;)V` @kind direct;
  #L48c626.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48c62c.  v2:= temp @kind object;
  #L48c62e.  return v2 @kind object;
}
procedure `rx.Observable` `onBackpressureDrop`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.onBackpressureDrop:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c640.  call temp:= `instance`() @signature `Lrx/internal/operators/OperatorOnBackpressureDrop;.instance:()Lrx/internal/operators/OperatorOnBackpressureDrop;` @kind static;
  #L48c646.  v0:= temp @kind object;
  #L48c648.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48c64e.  v0:= temp @kind object;
  #L48c650.  return v0 @kind object;
}
procedure `rx.Observable` `onBackpressureDrop`(`rx.Observable` v1 @kind this, `rx.functions.Action1` v2 @kind object) @signature `Lrx/Observable;.onBackpressureDrop:(Lrx/functions/Action1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c664.  v0:= new `rx.internal.operators.OperatorOnBackpressureDrop`;
  #L48c668.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorOnBackpressureDrop;.<init>:(Lrx/functions/Action1;)V` @kind direct;
  #L48c66e.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48c674.  v2:= temp @kind object;
  #L48c676.  return v2 @kind object;
}
procedure `rx.Observable` `onBackpressureLatest`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.onBackpressureLatest:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c688.  call temp:= `instance`() @signature `Lrx/internal/operators/OperatorOnBackpressureLatest;.instance:()Lrx/internal/operators/OperatorOnBackpressureLatest;` @kind static;
  #L48c68e.  v0:= temp @kind object;
  #L48c690.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48c696.  v0:= temp @kind object;
  #L48c698.  return v0 @kind object;
}
procedure `rx.Observable` `onErrorResumeNext`(`rx.Observable` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/Observable;.onErrorResumeNext:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48c6ac.  call temp:= `withOther`(v1) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;.withOther:(Lrx/Observable;)Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;` @kind static;
  #L48c6b2.  v1:= temp @kind object;
  #L48c6b4.  call temp:= `lift`(v0, v1) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48c6ba.  v1:= temp @kind object;
  #L48c6bc.  return v1 @kind object;
}
procedure `rx.Observable` `onErrorResumeNext`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.onErrorResumeNext:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c6d0.  v0:= new `rx.internal.operators.OperatorOnErrorResumeNextViaFunction`;
  #L48c6d4.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L48c6da.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48c6e0.  v2:= temp @kind object;
  #L48c6e2.  return v2 @kind object;
}
procedure `rx.Observable` `onErrorReturn`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/Observable;.onErrorReturn:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48c6f4.  call temp:= `withSingle`(v1) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;.withSingle:(Lrx/functions/Func1;)Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;` @kind static;
  #L48c6fa.  v1:= temp @kind object;
  #L48c6fc.  call temp:= `lift`(v0, v1) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48c702.  v1:= temp @kind object;
  #L48c704.  return v1 @kind object;
}
procedure `rx.Observable` `onExceptionResumeNext`(`rx.Observable` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/Observable;.onExceptionResumeNext:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48c718.  call temp:= `withException`(v1) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;.withException:(Lrx/Observable;)Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;` @kind static;
  #L48c71e.  v1:= temp @kind object;
  #L48c720.  call temp:= `lift`(v0, v1) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48c726.  v1:= temp @kind object;
  #L48c728.  return v1 @kind object;
}
procedure `rx.Observable` `onTerminateDetach`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.onTerminateDetach:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c73c.  v0:= new `rx.internal.operators.OnSubscribeDetach`;
  #L48c740.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeDetach;.<init>:(Lrx/Observable;)V` @kind direct;
  #L48c746.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48c74c.  v0:= temp @kind object;
  #L48c74e.  return v0 @kind object;
}
procedure `rx.Observable` `publish`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/Observable;.publish:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48c760.  call temp:= `create`(v0, v1) @signature `Lrx/internal/operators/OperatorPublish;.create:(Lrx/Observable;Lrx/functions/Func1;)Lrx/Observable;` @kind static;
  #L48c766.  v1:= temp @kind object;
  #L48c768.  return v1 @kind object;
}
procedure `rx.observables.ConnectableObservable` `publish`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.publish:()Lrx/observables/ConnectableObservable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e5a4.  call temp:= `create`(v1) @signature `Lrx/internal/operators/OperatorPublish;.create:(Lrx/Observable;)Lrx/observables/ConnectableObservable;` @kind static;
  #L48e5aa.  v0:= temp @kind object;
  #L48e5ac.  return v0 @kind object;
}
procedure `rx.Observable` `rebatchRequests`(`rx.Observable` v3 @kind this, `int` v4 ) @signature `Lrx/Observable;.rebatchRequests:(I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48c820.  if v4 <= 0 then goto L48c836;
  #L48c824.  call temp:= `rebatch`(v4) @signature `Lrx/internal/operators/OperatorObserveOn;.rebatch:(I)Lrx/Observable$Operator;` @kind static;
  #L48c82a.  v4:= temp @kind object;
  #L48c82c.  call temp:= `lift`(v3, v4) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48c832.  v4:= temp @kind object;
  #L48c834.  return v4 @kind object;
  #L48c836.  v0:= new `java.lang.IllegalArgumentException`;
  #L48c83a.  v1:= new `java.lang.StringBuilder`;
  #L48c83e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48c844.  v2:= "n > 0 required but it was " @kind object;
  #L48c848.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c84e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c854.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c85a.  v4:= temp @kind object;
  #L48c85c.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48c862.  throw v0;
}
procedure `rx.Observable` `reduce`(`rx.Observable` v1 @kind this, `java.lang.Object` v2 @kind object, `rx.functions.Func2` v3 @kind object) @signature `Lrx/Observable;.reduce:(Ljava/lang/Object;Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c874.  v0:= new `rx.internal.operators.OnSubscribeReduceSeed`;
  #L48c878.  call `<init>`(v0, v1, v2, v3) @signature `Lrx/internal/operators/OnSubscribeReduceSeed;.<init>:(Lrx/Observable;Ljava/lang/Object;Lrx/functions/Func2;)V` @kind direct;
  #L48c87e.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48c884.  v2:= temp @kind object;
  #L48c886.  return v2 @kind object;
}
procedure `rx.Observable` `reduce`(`rx.Observable` v1 @kind this, `rx.functions.Func2` v2 @kind object) @signature `Lrx/Observable;.reduce:(Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c898.  v0:= new `rx.internal.operators.OnSubscribeReduce`;
  #L48c89c.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/OnSubscribeReduce;.<init>:(Lrx/Observable;Lrx/functions/Func2;)V` @kind direct;
  #L48c8a2.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48c8a8.  v2:= temp @kind object;
  #L48c8aa.  return v2 @kind object;
}
procedure `rx.Observable` `repeat`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.repeat:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c8bc.  call temp:= `repeat`(v1) @signature `Lrx/internal/operators/OnSubscribeRedo;.repeat:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48c8c2.  v0:= temp @kind object;
  #L48c8c4.  return v0 @kind object;
}
procedure `rx.Observable` `repeat`(`rx.Observable` v0 @kind this, `long` v1 ) @signature `Lrx/Observable;.repeat:(J)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48c8d8.  call temp:= `repeat`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeRedo;.repeat:(Lrx/Observable;J)Lrx/Observable;` @kind static;
  #L48c8de.  v1:= temp @kind object;
  #L48c8e0.  return v1 @kind object;
}
procedure `rx.Observable` `repeat`(`rx.Observable` v0 @kind this, `long` v1 , `rx.Scheduler` v3 @kind object) @signature `Lrx/Observable;.repeat:(JLrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48c8f4.  call temp:= `repeat`(v0, v1, v3) @signature `Lrx/internal/operators/OnSubscribeRedo;.repeat:(Lrx/Observable;JLrx/Scheduler;)Lrx/Observable;` @kind static;
  #L48c8fa.  v1:= temp @kind object;
  #L48c8fc.  return v1 @kind object;
}
procedure `rx.Observable` `repeat`(`rx.Observable` v0 @kind this, `rx.Scheduler` v1 @kind object) @signature `Lrx/Observable;.repeat:(Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48c910.  call temp:= `repeat`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeRedo;.repeat:(Lrx/Observable;Lrx/Scheduler;)Lrx/Observable;` @kind static;
  #L48c916.  v1:= temp @kind object;
  #L48c918.  return v1 @kind object;
}
procedure `rx.Observable` `repeatWhen`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/Observable;.repeatWhen:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48c92c.  call temp:= `createRepeatDematerializer`(v1) @signature `Lrx/internal/util/InternalObservableUtils;.createRepeatDematerializer:(Lrx/functions/Func1;)Lrx/functions/Func1;` @kind static;
  #L48c932.  v1:= temp @kind object;
  #L48c934.  call temp:= `repeat`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeRedo;.repeat:(Lrx/Observable;Lrx/functions/Func1;)Lrx/Observable;` @kind static;
  #L48c93a.  v1:= temp @kind object;
  #L48c93c.  return v1 @kind object;
}
procedure `rx.Observable` `repeatWhen`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object, `rx.Scheduler` v2 @kind object) @signature `Lrx/Observable;.repeatWhen:(Lrx/functions/Func1;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48c950.  call temp:= `createRepeatDematerializer`(v1) @signature `Lrx/internal/util/InternalObservableUtils;.createRepeatDematerializer:(Lrx/functions/Func1;)Lrx/functions/Func1;` @kind static;
  #L48c956.  v1:= temp @kind object;
  #L48c958.  call temp:= `repeat`(v0, v1, v2) @signature `Lrx/internal/operators/OnSubscribeRedo;.repeat:(Lrx/Observable;Lrx/functions/Func1;Lrx/Scheduler;)Lrx/Observable;` @kind static;
  #L48c95e.  v1:= temp @kind object;
  #L48c960.  return v1 @kind object;
}
procedure `rx.Observable` `replay`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.replay:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c974.  call temp:= `createReplaySupplier`(v1) @signature `Lrx/internal/util/InternalObservableUtils;.createReplaySupplier:(Lrx/Observable;)Lrx/functions/Func0;` @kind static;
  #L48c97a.  v0:= temp @kind object;
  #L48c97c.  call temp:= `multicastSelector`(v0, v2) @signature `Lrx/internal/operators/OperatorReplay;.multicastSelector:(Lrx/functions/Func0;Lrx/functions/Func1;)Lrx/Observable;` @kind static;
  #L48c982.  v2:= temp @kind object;
  #L48c984.  return v2 @kind object;
}
procedure `rx.Observable` `replay`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object, `int` v2 ) @signature `Lrx/Observable;.replay:(Lrx/functions/Func1;I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48c998.  call temp:= `createReplaySupplier`(v0, v2) @signature `Lrx/internal/util/InternalObservableUtils;.createReplaySupplier:(Lrx/Observable;I)Lrx/functions/Func0;` @kind static;
  #L48c99e.  v2:= temp @kind object;
  #L48c9a0.  call temp:= `multicastSelector`(v2, v1) @signature `Lrx/internal/operators/OperatorReplay;.multicastSelector:(Lrx/functions/Func0;Lrx/functions/Func1;)Lrx/Observable;` @kind static;
  #L48c9a6.  v1:= temp @kind object;
  #L48c9a8.  return v1 @kind object;
}
procedure `rx.Observable` `replay`(`rx.Observable` v7 @kind this, `rx.functions.Func1` v8 @kind object, `int` v9 , `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object) @signature `Lrx/Observable;.replay:(Lrx/functions/Func1;IJLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48c9bc.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48c9c2.  v6:= temp @kind object;
  #L48c9c4.  v0:= v7 @kind object;
  #L48c9c6.  v1:= v8 @kind object;
  #L48c9c8.  v2:= v9;
  #L48c9ca.  v3:= v10 @kind wide;
  #L48c9cc.  v5:= v12 @kind object;
  #L48c9ce.  call temp:= `replay`(v0, v1, v2, v3, v5, v6) @signature `Lrx/Observable;.replay:(Lrx/functions/Func1;IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48c9d4.  v8:= temp @kind object;
  #L48c9d6.  return v8 @kind object;
}
procedure `rx.Observable` `replay`(`rx.Observable` v6 @kind this, `rx.functions.Func1` v7 @kind object, `int` v8 , `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `rx.Scheduler` v12 @kind object) @signature `Lrx/Observable;.replay:(Lrx/functions/Func1;IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48c9e8.  if v8 < 0 then goto L48ca08;
  #L48c9ec.  v0:= v6 @kind object;
  #L48c9ee.  v1:= v8;
  #L48c9f0.  v2:= v9 @kind wide;
  #L48c9f2.  v4:= v11 @kind object;
  #L48c9f4.  v5:= v12 @kind object;
  #L48c9f6.  call temp:= `createReplaySupplier`(v0, v1, v2, v4, v5) @signature `Lrx/internal/util/InternalObservableUtils;.createReplaySupplier:(Lrx/Observable;IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/functions/Func0;` @kind static;
  #L48c9fc.  v8:= temp @kind object;
  #L48c9fe.  call temp:= `multicastSelector`(v8, v7) @signature `Lrx/internal/operators/OperatorReplay;.multicastSelector:(Lrx/functions/Func0;Lrx/functions/Func1;)Lrx/Observable;` @kind static;
  #L48ca04.  v7:= temp @kind object;
  #L48ca06.  return v7 @kind object;
  #L48ca08.  v7:= new `java.lang.IllegalArgumentException`;
  #L48ca0c.  v8:= "bufferSize < 0" @kind object;
  #L48ca10.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48ca16.  throw v7;
}
procedure `rx.Observable` `replay`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object, `int` v2 , `rx.Scheduler` v3 @kind object) @signature `Lrx/Observable;.replay:(Lrx/functions/Func1;ILrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48ca28.  call temp:= `createReplaySupplier`(v0, v2) @signature `Lrx/internal/util/InternalObservableUtils;.createReplaySupplier:(Lrx/Observable;I)Lrx/functions/Func0;` @kind static;
  #L48ca2e.  v2:= temp @kind object;
  #L48ca30.  call temp:= `createReplaySelectorAndObserveOn`(v1, v3) @signature `Lrx/internal/util/InternalObservableUtils;.createReplaySelectorAndObserveOn:(Lrx/functions/Func1;Lrx/Scheduler;)Lrx/functions/Func1;` @kind static;
  #L48ca36.  v1:= temp @kind object;
  #L48ca38.  call temp:= `multicastSelector`(v2, v1) @signature `Lrx/internal/operators/OperatorReplay;.multicastSelector:(Lrx/functions/Func0;Lrx/functions/Func1;)Lrx/Observable;` @kind static;
  #L48ca3e.  v1:= temp @kind object;
  #L48ca40.  return v1 @kind object;
}
procedure `rx.Observable` `replay`(`rx.Observable` v6 @kind this, `rx.functions.Func1` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lrx/Observable;.replay:(Lrx/functions/Func1;JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48ca54.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48ca5a.  v5:= temp @kind object;
  #L48ca5c.  v0:= v6 @kind object;
  #L48ca5e.  v1:= v7 @kind object;
  #L48ca60.  v2:= v8 @kind wide;
  #L48ca62.  v4:= v10 @kind object;
  #L48ca64.  call temp:= `replay`(v0, v1, v2, v4, v5) @signature `Lrx/Observable;.replay:(Lrx/functions/Func1;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48ca6a.  v7:= temp @kind object;
  #L48ca6c.  return v7 @kind object;
}
procedure `rx.Observable` `replay`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `rx.Scheduler` v5 @kind object) @signature `Lrx/Observable;.replay:(Lrx/functions/Func1;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48ca80.  call temp:= `createReplaySupplier`(v0, v2, v4, v5) @signature `Lrx/internal/util/InternalObservableUtils;.createReplaySupplier:(Lrx/Observable;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/functions/Func0;` @kind static;
  #L48ca86.  v2:= temp @kind object;
  #L48ca88.  call temp:= `multicastSelector`(v2, v1) @signature `Lrx/internal/operators/OperatorReplay;.multicastSelector:(Lrx/functions/Func0;Lrx/functions/Func1;)Lrx/Observable;` @kind static;
  #L48ca8e.  v1:= temp @kind object;
  #L48ca90.  return v1 @kind object;
}
procedure `rx.Observable` `replay`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object, `rx.Scheduler` v3 @kind object) @signature `Lrx/Observable;.replay:(Lrx/functions/Func1;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48caa4.  call temp:= `createReplaySupplier`(v1) @signature `Lrx/internal/util/InternalObservableUtils;.createReplaySupplier:(Lrx/Observable;)Lrx/functions/Func0;` @kind static;
  #L48caaa.  v0:= temp @kind object;
  #L48caac.  call temp:= `createReplaySelectorAndObserveOn`(v2, v3) @signature `Lrx/internal/util/InternalObservableUtils;.createReplaySelectorAndObserveOn:(Lrx/functions/Func1;Lrx/Scheduler;)Lrx/functions/Func1;` @kind static;
  #L48cab2.  v2:= temp @kind object;
  #L48cab4.  call temp:= `multicastSelector`(v0, v2) @signature `Lrx/internal/operators/OperatorReplay;.multicastSelector:(Lrx/functions/Func0;Lrx/functions/Func1;)Lrx/Observable;` @kind static;
  #L48caba.  v2:= temp @kind object;
  #L48cabc.  return v2 @kind object;
}
procedure `rx.observables.ConnectableObservable` `replay`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.replay:()Lrx/observables/ConnectableObservable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e5c0.  call temp:= `create`(v1) @signature `Lrx/internal/operators/OperatorReplay;.create:(Lrx/Observable;)Lrx/observables/ConnectableObservable;` @kind static;
  #L48e5c6.  v0:= temp @kind object;
  #L48e5c8.  return v0 @kind object;
}
procedure `rx.observables.ConnectableObservable` `replay`(`rx.Observable` v0 @kind this, `int` v1 ) @signature `Lrx/Observable;.replay:(I)Lrx/observables/ConnectableObservable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48e5dc.  call temp:= `create`(v0, v1) @signature `Lrx/internal/operators/OperatorReplay;.create:(Lrx/Observable;I)Lrx/observables/ConnectableObservable;` @kind static;
  #L48e5e2.  v1:= temp @kind object;
  #L48e5e4.  return v1 @kind object;
}
procedure `rx.observables.ConnectableObservable` `replay`(`rx.Observable` v6 @kind this, `int` v7 , `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lrx/Observable;.replay:(IJLjava/util/concurrent/TimeUnit;)Lrx/observables/ConnectableObservable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48e5f8.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48e5fe.  v5:= temp @kind object;
  #L48e600.  v0:= v6 @kind object;
  #L48e602.  v1:= v7;
  #L48e604.  v2:= v8 @kind wide;
  #L48e606.  v4:= v10 @kind object;
  #L48e608.  call temp:= `replay`(v0, v1, v2, v4, v5) @signature `Lrx/Observable;.replay:(IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/observables/ConnectableObservable;` @kind virtual;
  #L48e60e.  v7:= temp @kind object;
  #L48e610.  return v7 @kind object;
}
procedure `rx.observables.ConnectableObservable` `replay`(`rx.Observable` v6 @kind this, `int` v7 , `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `rx.Scheduler` v11 @kind object) @signature `Lrx/Observable;.replay:(IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/observables/ConnectableObservable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48e624.  if v7 < 0 then goto L48e63c;
  #L48e628.  v0:= v6 @kind object;
  #L48e62a.  v1:= v8 @kind wide;
  #L48e62c.  v3:= v10 @kind object;
  #L48e62e.  v4:= v11 @kind object;
  #L48e630.  v5:= v7;
  #L48e632.  call temp:= `create`(v0, v1, v3, v4, v5) @signature `Lrx/internal/operators/OperatorReplay;.create:(Lrx/Observable;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;I)Lrx/observables/ConnectableObservable;` @kind static;
  #L48e638.  v7:= temp @kind object;
  #L48e63a.  return v7 @kind object;
  #L48e63c.  v7:= new `java.lang.IllegalArgumentException`;
  #L48e640.  v8:= "bufferSize < 0" @kind object;
  #L48e644.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e64a.  throw v7;
}
procedure `rx.observables.ConnectableObservable` `replay`(`rx.Observable` v0 @kind this, `int` v1 , `rx.Scheduler` v2 @kind object) @signature `Lrx/Observable;.replay:(ILrx/Scheduler;)Lrx/observables/ConnectableObservable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48e65c.  call temp:= `replay`(v0, v1) @signature `Lrx/Observable;.replay:(I)Lrx/observables/ConnectableObservable;` @kind virtual;
  #L48e662.  v1:= temp @kind object;
  #L48e664.  call temp:= `observeOn`(v1, v2) @signature `Lrx/internal/operators/OperatorReplay;.observeOn:(Lrx/observables/ConnectableObservable;Lrx/Scheduler;)Lrx/observables/ConnectableObservable;` @kind static;
  #L48e66a.  v1:= temp @kind object;
  #L48e66c.  return v1 @kind object;
}
procedure `rx.observables.ConnectableObservable` `replay`(`rx.Observable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lrx/Observable;.replay:(JLjava/util/concurrent/TimeUnit;)Lrx/observables/ConnectableObservable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e680.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48e686.  v0:= temp @kind object;
  #L48e688.  call temp:= `replay`(v1, v2, v4, v0) @signature `Lrx/Observable;.replay:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/observables/ConnectableObservable;` @kind virtual;
  #L48e68e.  v2:= temp @kind object;
  #L48e690.  return v2 @kind object;
}
procedure `rx.observables.ConnectableObservable` `replay`(`rx.Observable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `rx.Scheduler` v4 @kind object) @signature `Lrx/Observable;.replay:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/observables/ConnectableObservable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48e6a4.  call temp:= `create`(v0, v1, v3, v4) @signature `Lrx/internal/operators/OperatorReplay;.create:(Lrx/Observable;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/observables/ConnectableObservable;` @kind static;
  #L48e6aa.  v1:= temp @kind object;
  #L48e6ac.  return v1 @kind object;
}
procedure `rx.observables.ConnectableObservable` `replay`(`rx.Observable` v1 @kind this, `rx.Scheduler` v2 @kind object) @signature `Lrx/Observable;.replay:(Lrx/Scheduler;)Lrx/observables/ConnectableObservable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e6c0.  call temp:= `replay`(v1) @signature `Lrx/Observable;.replay:()Lrx/observables/ConnectableObservable;` @kind virtual;
  #L48e6c6.  v0:= temp @kind object;
  #L48e6c8.  call temp:= `observeOn`(v0, v2) @signature `Lrx/internal/operators/OperatorReplay;.observeOn:(Lrx/observables/ConnectableObservable;Lrx/Scheduler;)Lrx/observables/ConnectableObservable;` @kind static;
  #L48e6ce.  v2:= temp @kind object;
  #L48e6d0.  return v2 @kind object;
}
procedure `rx.Observable` `retry`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.retry:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48cad0.  call temp:= `retry`(v1) @signature `Lrx/internal/operators/OnSubscribeRedo;.retry:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48cad6.  v0:= temp @kind object;
  #L48cad8.  return v0 @kind object;
}
procedure `rx.Observable` `retry`(`rx.Observable` v0 @kind this, `long` v1 ) @signature `Lrx/Observable;.retry:(J)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48caec.  call temp:= `retry`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeRedo;.retry:(Lrx/Observable;J)Lrx/Observable;` @kind static;
  #L48caf2.  v1:= temp @kind object;
  #L48caf4.  return v1 @kind object;
}
procedure `rx.Observable` `retry`(`rx.Observable` v2 @kind this, `rx.functions.Func2` v3 @kind object) @signature `Lrx/Observable;.retry:(Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48cb08.  call temp:= `nest`(v2) @signature `Lrx/Observable;.nest:()Lrx/Observable;` @kind virtual;
  #L48cb0e.  v0:= temp @kind object;
  #L48cb10.  v1:= new `rx.internal.operators.OperatorRetryWithPredicate`;
  #L48cb14.  call `<init>`(v1, v3) @signature `Lrx/internal/operators/OperatorRetryWithPredicate;.<init>:(Lrx/functions/Func2;)V` @kind direct;
  #L48cb1a.  call temp:= `lift`(v0, v1) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48cb20.  v3:= temp @kind object;
  #L48cb22.  return v3 @kind object;
}
procedure `rx.Observable` `retryWhen`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/Observable;.retryWhen:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48cb34.  call temp:= `createRetryDematerializer`(v1) @signature `Lrx/internal/util/InternalObservableUtils;.createRetryDematerializer:(Lrx/functions/Func1;)Lrx/functions/Func1;` @kind static;
  #L48cb3a.  v1:= temp @kind object;
  #L48cb3c.  call temp:= `retry`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeRedo;.retry:(Lrx/Observable;Lrx/functions/Func1;)Lrx/Observable;` @kind static;
  #L48cb42.  v1:= temp @kind object;
  #L48cb44.  return v1 @kind object;
}
procedure `rx.Observable` `retryWhen`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object, `rx.Scheduler` v2 @kind object) @signature `Lrx/Observable;.retryWhen:(Lrx/functions/Func1;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48cb58.  call temp:= `createRetryDematerializer`(v1) @signature `Lrx/internal/util/InternalObservableUtils;.createRetryDematerializer:(Lrx/functions/Func1;)Lrx/functions/Func1;` @kind static;
  #L48cb5e.  v1:= temp @kind object;
  #L48cb60.  call temp:= `retry`(v0, v1, v2) @signature `Lrx/internal/operators/OnSubscribeRedo;.retry:(Lrx/Observable;Lrx/functions/Func1;Lrx/Scheduler;)Lrx/Observable;` @kind static;
  #L48cb66.  v1:= temp @kind object;
  #L48cb68.  return v1 @kind object;
}
procedure `rx.Observable` `sample`(`rx.Observable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lrx/Observable;.sample:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48cb7c.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48cb82.  v0:= temp @kind object;
  #L48cb84.  call temp:= `sample`(v1, v2, v4, v0) @signature `Lrx/Observable;.sample:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48cb8a.  v2:= temp @kind object;
  #L48cb8c.  return v2 @kind object;
}
procedure `rx.Observable` `sample`(`rx.Observable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `rx.Scheduler` v5 @kind object) @signature `Lrx/Observable;.sample:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48cba0.  v0:= new `rx.internal.operators.OperatorSampleWithTime`;
  #L48cba4.  call `<init>`(v0, v2, v4, v5) @signature `Lrx/internal/operators/OperatorSampleWithTime;.<init>:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @kind direct;
  #L48cbaa.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48cbb0.  v2:= temp @kind object;
  #L48cbb2.  return v2 @kind object;
}
procedure `rx.Observable` `sample`(`rx.Observable` v1 @kind this, `rx.Observable` v2 @kind object) @signature `Lrx/Observable;.sample:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48cbc4.  v0:= new `rx.internal.operators.OperatorSampleWithObservable`;
  #L48cbc8.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorSampleWithObservable;.<init>:(Lrx/Observable;)V` @kind direct;
  #L48cbce.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48cbd4.  v2:= temp @kind object;
  #L48cbd6.  return v2 @kind object;
}
procedure `rx.Observable` `scan`(`rx.Observable` v1 @kind this, `java.lang.Object` v2 @kind object, `rx.functions.Func2` v3 @kind object) @signature `Lrx/Observable;.scan:(Ljava/lang/Object;Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48cbe8.  v0:= new `rx.internal.operators.OperatorScan`;
  #L48cbec.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/operators/OperatorScan;.<init>:(Ljava/lang/Object;Lrx/functions/Func2;)V` @kind direct;
  #L48cbf2.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48cbf8.  v2:= temp @kind object;
  #L48cbfa.  return v2 @kind object;
}
procedure `rx.Observable` `scan`(`rx.Observable` v1 @kind this, `rx.functions.Func2` v2 @kind object) @signature `Lrx/Observable;.scan:(Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48cc0c.  v0:= new `rx.internal.operators.OperatorScan`;
  #L48cc10.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorScan;.<init>:(Lrx/functions/Func2;)V` @kind direct;
  #L48cc16.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48cc1c.  v2:= temp @kind object;
  #L48cc1e.  return v2 @kind object;
}
procedure `rx.Observable` `serialize`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.serialize:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48cc6c.  call temp:= `instance`() @signature `Lrx/internal/operators/OperatorSerialize;.instance:()Lrx/internal/operators/OperatorSerialize;` @kind static;
  #L48cc72.  v0:= temp @kind object;
  #L48cc74.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48cc7a.  v0:= temp @kind object;
  #L48cc7c.  return v0 @kind object;
}
procedure `rx.Observable` `share`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.share:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48cc90.  call temp:= `publish`(v1) @signature `Lrx/Observable;.publish:()Lrx/observables/ConnectableObservable;` @kind virtual;
  #L48cc96.  v0:= temp @kind object;
  #L48cc98.  call temp:= `refCount`(v0) @signature `Lrx/observables/ConnectableObservable;.refCount:()Lrx/Observable;` @kind virtual;
  #L48cc9e.  v0:= temp @kind object;
  #L48cca0.  return v0 @kind object;
}
procedure `rx.Observable` `single`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.single:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48ccb4.  call temp:= `instance`() @signature `Lrx/internal/operators/OperatorSingle;.instance:()Lrx/internal/operators/OperatorSingle;` @kind static;
  #L48ccba.  v0:= temp @kind object;
  #L48ccbc.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48ccc2.  v0:= temp @kind object;
  #L48ccc4.  return v0 @kind object;
}
procedure `rx.Observable` `single`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/Observable;.single:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48ccd8.  call temp:= `filter`(v0, v1) @signature `Lrx/Observable;.filter:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48ccde.  v1:= temp @kind object;
  #L48cce0.  call temp:= `single`(v1) @signature `Lrx/Observable;.single:()Lrx/Observable;` @kind virtual;
  #L48cce6.  v1:= temp @kind object;
  #L48cce8.  return v1 @kind object;
}
procedure `rx.Observable` `singleOrDefault`(`rx.Observable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/Observable;.singleOrDefault:(Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48ccfc.  v0:= new `rx.internal.operators.OperatorSingle`;
  #L48cd00.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorSingle;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L48cd06.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48cd0c.  v2:= temp @kind object;
  #L48cd0e.  return v2 @kind object;
}
procedure `rx.Observable` `singleOrDefault`(`rx.Observable` v0 @kind this, `java.lang.Object` v1 @kind object, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.singleOrDefault:(Ljava/lang/Object;Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48cd20.  call temp:= `filter`(v0, v2) @signature `Lrx/Observable;.filter:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48cd26.  v2:= temp @kind object;
  #L48cd28.  call temp:= `singleOrDefault`(v2, v1) @signature `Lrx/Observable;.singleOrDefault:(Ljava/lang/Object;)Lrx/Observable;` @kind virtual;
  #L48cd2e.  v1:= temp @kind object;
  #L48cd30.  return v1 @kind object;
}
procedure `rx.Observable` `skip`(`rx.Observable` v1 @kind this, `int` v2 ) @signature `Lrx/Observable;.skip:(I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48cd44.  v0:= new `rx.internal.operators.OperatorSkip`;
  #L48cd48.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorSkip;.<init>:(I)V` @kind direct;
  #L48cd4e.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48cd54.  v2:= temp @kind object;
  #L48cd56.  return v2 @kind object;
}
procedure `rx.Observable` `skip`(`rx.Observable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lrx/Observable;.skip:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48cd68.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48cd6e.  v0:= temp @kind object;
  #L48cd70.  call temp:= `skip`(v1, v2, v4, v0) @signature `Lrx/Observable;.skip:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48cd76.  v2:= temp @kind object;
  #L48cd78.  return v2 @kind object;
}
procedure `rx.Observable` `skip`(`rx.Observable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `rx.Scheduler` v11 @kind object) @signature `Lrx/Observable;.skip:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48cd8c.  v6:= new `rx.internal.operators.OnSubscribeSkipTimed`;
  #L48cd90.  v0:= v6 @kind object;
  #L48cd92.  v1:= v7 @kind object;
  #L48cd94.  v2:= v8 @kind wide;
  #L48cd96.  v4:= v10 @kind object;
  #L48cd98.  v5:= v11 @kind object;
  #L48cd9a.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lrx/internal/operators/OnSubscribeSkipTimed;.<init>:(Lrx/Observable;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @kind direct;
  #L48cda0.  call temp:= `create`(v6) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48cda6.  v8:= temp @kind object;
  #L48cda8.  return v8 @kind object;
}
procedure `rx.Observable` `skipLast`(`rx.Observable` v1 @kind this, `int` v2 ) @signature `Lrx/Observable;.skipLast:(I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48cdbc.  v0:= new `rx.internal.operators.OperatorSkipLast`;
  #L48cdc0.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorSkipLast;.<init>:(I)V` @kind direct;
  #L48cdc6.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48cdcc.  v2:= temp @kind object;
  #L48cdce.  return v2 @kind object;
}
procedure `rx.Observable` `skipLast`(`rx.Observable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lrx/Observable;.skipLast:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48cde0.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48cde6.  v0:= temp @kind object;
  #L48cde8.  call temp:= `skipLast`(v1, v2, v4, v0) @signature `Lrx/Observable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48cdee.  v2:= temp @kind object;
  #L48cdf0.  return v2 @kind object;
}
procedure `rx.Observable` `skipLast`(`rx.Observable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `rx.Scheduler` v5 @kind object) @signature `Lrx/Observable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48ce04.  v0:= new `rx.internal.operators.OperatorSkipLastTimed`;
  #L48ce08.  call `<init>`(v0, v2, v4, v5) @signature `Lrx/internal/operators/OperatorSkipLastTimed;.<init>:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @kind direct;
  #L48ce0e.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48ce14.  v2:= temp @kind object;
  #L48ce16.  return v2 @kind object;
}
procedure `rx.Observable` `skipUntil`(`rx.Observable` v1 @kind this, `rx.Observable` v2 @kind object) @signature `Lrx/Observable;.skipUntil:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48ce28.  v0:= new `rx.internal.operators.OperatorSkipUntil`;
  #L48ce2c.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorSkipUntil;.<init>:(Lrx/Observable;)V` @kind direct;
  #L48ce32.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48ce38.  v2:= temp @kind object;
  #L48ce3a.  return v2 @kind object;
}
procedure `rx.Observable` `skipWhile`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.skipWhile:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48ce4c.  v0:= new `rx.internal.operators.OperatorSkipWhile`;
  #L48ce50.  call temp:= `toPredicate2`(v2) @signature `Lrx/internal/operators/OperatorSkipWhile;.toPredicate2:(Lrx/functions/Func1;)Lrx/functions/Func2;` @kind static;
  #L48ce56.  v2:= temp @kind object;
  #L48ce58.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorSkipWhile;.<init>:(Lrx/functions/Func2;)V` @kind direct;
  #L48ce5e.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48ce64.  v2:= temp @kind object;
  #L48ce66.  return v2 @kind object;
}
procedure `rx.Observable` `sorted`(`rx.Observable` v2 @kind this) @signature `Lrx/Observable;.sorted:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48ce78.  call temp:= `toSortedList`(v2) @signature `Lrx/Observable;.toSortedList:()Lrx/Observable;` @kind virtual;
  #L48ce7e.  v0:= temp @kind object;
  #L48ce80.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L48ce86.  v1:= temp @kind object;
  #L48ce88.  call temp:= `flatMapIterable`(v0, v1) @signature `Lrx/Observable;.flatMapIterable:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48ce8e.  v0:= temp @kind object;
  #L48ce90.  return v0 @kind object;
}
procedure `rx.Observable` `sorted`(`rx.Observable` v1 @kind this, `rx.functions.Func2` v2 @kind object) @signature `Lrx/Observable;.sorted:(Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48cea4.  call temp:= `toSortedList`(v1, v2) @signature `Lrx/Observable;.toSortedList:(Lrx/functions/Func2;)Lrx/Observable;` @kind virtual;
  #L48ceaa.  v2:= temp @kind object;
  #L48ceac.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L48ceb2.  v0:= temp @kind object;
  #L48ceb4.  call temp:= `flatMapIterable`(v2, v0) @signature `Lrx/Observable;.flatMapIterable:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48ceba.  v2:= temp @kind object;
  #L48cebc.  return v2 @kind object;
}
procedure `rx.Observable` `startWith`(`rx.Observable` v0 @kind this, `java.lang.Iterable` v1 @kind object) @signature `Lrx/Observable;.startWith:(Ljava/lang/Iterable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48ced0.  call temp:= `from`(v1) @signature `Lrx/Observable;.from:(Ljava/lang/Iterable;)Lrx/Observable;` @kind static;
  #L48ced6.  v1:= temp @kind object;
  #L48ced8.  call temp:= `concat`(v1, v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48cede.  v1:= temp @kind object;
  #L48cee0.  return v1 @kind object;
}
procedure `rx.Observable` `startWith`(`rx.Observable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/Observable;.startWith:(Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48cef4.  call temp:= `just`(v1) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48cefa.  v1:= temp @kind object;
  #L48cefc.  call temp:= `concat`(v1, v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48cf02.  v1:= temp @kind object;
  #L48cf04.  return v1 @kind object;
}
procedure `rx.Observable` `startWith`(`rx.Observable` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/Observable;.startWith:(Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48cf18.  call temp:= `just`(v1, v2) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48cf1e.  v1:= temp @kind object;
  #L48cf20.  call temp:= `concat`(v1, v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48cf26.  v1:= temp @kind object;
  #L48cf28.  return v1 @kind object;
}
procedure `rx.Observable` `startWith`(`rx.Observable` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lrx/Observable;.startWith:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48cf3c.  call temp:= `just`(v1, v2, v3) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48cf42.  v1:= temp @kind object;
  #L48cf44.  call temp:= `concat`(v1, v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48cf4a.  v1:= temp @kind object;
  #L48cf4c.  return v1 @kind object;
}
procedure `rx.Observable` `startWith`(`rx.Observable` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lrx/Observable;.startWith:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48cf60.  call temp:= `just`(v1, v2, v3, v4) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48cf66.  v1:= temp @kind object;
  #L48cf68.  call temp:= `concat`(v1, v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48cf6e.  v1:= temp @kind object;
  #L48cf70.  return v1 @kind object;
}
procedure `rx.Observable` `startWith`(`rx.Observable` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lrx/Observable;.startWith:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48cf84.  call temp:= `just`(v1, v2, v3, v4, v5) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48cf8a.  v1:= temp @kind object;
  #L48cf8c.  call temp:= `concat`(v1, v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48cf92.  v1:= temp @kind object;
  #L48cf94.  return v1 @kind object;
}
procedure `rx.Observable` `startWith`(`rx.Observable` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lrx/Observable;.startWith:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48cfa8.  call temp:= `just`(v1, v2, v3, v4, v5, v6) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48cfae.  v1:= temp @kind object;
  #L48cfb0.  call temp:= `concat`(v1, v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48cfb6.  v1:= temp @kind object;
  #L48cfb8.  return v1 @kind object;
}
procedure `rx.Observable` `startWith`(`rx.Observable` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lrx/Observable;.startWith:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48cfcc.  call temp:= `just`(v1, v2, v3, v4, v5, v6, v7) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48cfd2.  v1:= temp @kind object;
  #L48cfd4.  call temp:= `concat`(v1, v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48cfda.  v1:= temp @kind object;
  #L48cfdc.  return v1 @kind object;
}
procedure `rx.Observable` `startWith`(`rx.Observable` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lrx/Observable;.startWith:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48cff0.  call temp:= `just`(v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48cff6.  v1:= temp @kind object;
  #L48cff8.  call temp:= `concat`(v1, v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48cffe.  v1:= temp @kind object;
  #L48d000.  return v1 @kind object;
}
procedure `rx.Observable` `startWith`(`rx.Observable` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object) @signature `Lrx/Observable;.startWith:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48d014.  call temp:= `just`(v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lrx/Observable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L48d01a.  v1:= temp @kind object;
  #L48d01c.  call temp:= `concat`(v1, v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48d022.  v1:= temp @kind object;
  #L48d024.  return v1 @kind object;
}
procedure `rx.Observable` `startWith`(`rx.Observable` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/Observable;.startWith:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48d038.  call temp:= `concat`(v1, v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48d03e.  v1:= temp @kind object;
  #L48d040.  return v1 @kind object;
}
procedure `rx.Subscription` `subscribe`(`rx.Observable` v4 @kind this) @signature `Lrx/Observable;.subscribe:()Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48e220.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L48e226.  v0:= temp @kind object;
  #L48e228.  v1:= `@@rx.internal.util.InternalObservableUtils.ERROR_NOT_IMPLEMENTED` @type ^`rx.functions.Action1` @kind object;
  #L48e22c.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L48e232.  v2:= temp @kind object;
  #L48e234.  v3:= new `rx.internal.util.ActionSubscriber`;
  #L48e238.  call `<init>`(v3, v0, v1, v2) @signature `Lrx/internal/util/ActionSubscriber;.<init>:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)V` @kind direct;
  #L48e23e.  call temp:= `subscribe`(v4, v3) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L48e244.  v0:= temp @kind object;
  #L48e246.  return v0 @kind object;
}
procedure `rx.Subscription` `subscribe`(`rx.Observable` v1 @kind this, `rx.Observer` v2 @kind object) @signature `Lrx/Observable;.subscribe:(Lrx/Observer;)Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e258.  v0:= instanceof @variable v2 @type ^`rx.Subscriber` @kind boolean;
  #L48e25c.  if v0 == 0 then goto L48e26e;
  #L48e260.  v2:= (`rx.Subscriber`) v2 @kind object;
  #L48e264.  call temp:= `subscribe`(v1, v2) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L48e26a.  v2:= temp @kind object;
  #L48e26c.  return v2 @kind object;
  #L48e26e.  if v2 == 0 then goto L48e286;
  #L48e272.  v0:= new `rx.internal.util.ObserverSubscriber`;
  #L48e276.  call `<init>`(v0, v2) @signature `Lrx/internal/util/ObserverSubscriber;.<init>:(Lrx/Observer;)V` @kind direct;
  #L48e27c.  call temp:= `subscribe`(v1, v0) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L48e282.  v2:= temp @kind object;
  #L48e284.  return v2 @kind object;
  #L48e286.  v2:= new `java.lang.NullPointerException`;
  #L48e28a.  v0:= "observer is null" @kind object;
  #L48e28e.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e294.  throw v2;
}
procedure `rx.Subscription` `subscribe`(`rx.Observable` v0 @kind this, `rx.Subscriber` v1 @kind object) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48e2a8.  call temp:= `subscribe`(v1, v0) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;Lrx/Observable;)Lrx/Subscription;` @kind static;
  #L48e2ae.  v1:= temp @kind object;
  #L48e2b0.  return v1 @kind object;
}
procedure `rx.Subscription` `subscribe`(`rx.Observable` v3 @kind this, `rx.functions.Action1` v4 @kind object) @signature `Lrx/Observable;.subscribe:(Lrx/functions/Action1;)Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48e3d8.  if v4 == 0 then goto L48e3fc;
  #L48e3dc.  v0:= `@@rx.internal.util.InternalObservableUtils.ERROR_NOT_IMPLEMENTED` @type ^`rx.functions.Action1` @kind object;
  #L48e3e0.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L48e3e6.  v1:= temp @kind object;
  #L48e3e8.  v2:= new `rx.internal.util.ActionSubscriber`;
  #L48e3ec.  call `<init>`(v2, v4, v0, v1) @signature `Lrx/internal/util/ActionSubscriber;.<init>:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)V` @kind direct;
  #L48e3f2.  call temp:= `subscribe`(v3, v2) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L48e3f8.  v4:= temp @kind object;
  #L48e3fa.  return v4 @kind object;
  #L48e3fc.  v4:= new `java.lang.IllegalArgumentException`;
  #L48e400.  v0:= "onNext can not be null" @kind object;
  #L48e404.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e40a.  throw v4;
}
procedure `rx.Subscription` `subscribe`(`rx.Observable` v2 @kind this, `rx.functions.Action1` v3 @kind object, `rx.functions.Action1` v4 @kind object) @signature `Lrx/Observable;.subscribe:(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48e41c.  if v3 == 0 then goto L48e450;
  #L48e420.  if v4 == 0 then goto L48e440;
  #L48e424.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L48e42a.  v0:= temp @kind object;
  #L48e42c.  v1:= new `rx.internal.util.ActionSubscriber`;
  #L48e430.  call `<init>`(v1, v3, v4, v0) @signature `Lrx/internal/util/ActionSubscriber;.<init>:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)V` @kind direct;
  #L48e436.  call temp:= `subscribe`(v2, v1) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L48e43c.  v3:= temp @kind object;
  #L48e43e.  return v3 @kind object;
  #L48e440.  v3:= new `java.lang.IllegalArgumentException`;
  #L48e444.  v4:= "onError can not be null" @kind object;
  #L48e448.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e44e.  throw v3;
  #L48e450.  v3:= new `java.lang.IllegalArgumentException`;
  #L48e454.  v4:= "onNext can not be null" @kind object;
  #L48e458.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e45e.  throw v3;
}
procedure `rx.Subscription` `subscribe`(`rx.Observable` v1 @kind this, `rx.functions.Action1` v2 @kind object, `rx.functions.Action1` v3 @kind object, `rx.functions.Action0` v4 @kind object) @signature `Lrx/Observable;.subscribe:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e470.  if v2 == 0 then goto L48e4b0;
  #L48e474.  if v3 == 0 then goto L48e4a0;
  #L48e478.  if v4 == 0 then goto L48e490;
  #L48e47c.  v0:= new `rx.internal.util.ActionSubscriber`;
  #L48e480.  call `<init>`(v0, v2, v3, v4) @signature `Lrx/internal/util/ActionSubscriber;.<init>:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)V` @kind direct;
  #L48e486.  call temp:= `subscribe`(v1, v0) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L48e48c.  v2:= temp @kind object;
  #L48e48e.  return v2 @kind object;
  #L48e490.  v2:= new `java.lang.IllegalArgumentException`;
  #L48e494.  v3:= "onComplete can not be null" @kind object;
  #L48e498.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e49e.  throw v2;
  #L48e4a0.  v2:= new `java.lang.IllegalArgumentException`;
  #L48e4a4.  v3:= "onError can not be null" @kind object;
  #L48e4a8.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e4ae.  throw v2;
  #L48e4b0.  v2:= new `java.lang.IllegalArgumentException`;
  #L48e4b4.  v3:= "onNext can not be null" @kind object;
  #L48e4b8.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e4be.  throw v2;
}
procedure `rx.Observable` `subscribeOn`(`rx.Observable` v1 @kind this, `rx.Scheduler` v2 @kind object) @signature `Lrx/Observable;.subscribeOn:(Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d054.  v0:= instanceof @variable v1 @type ^`rx.internal.util.ScalarSynchronousObservable` @kind boolean;
  #L48d058.  if v0 == 0 then goto L48d06c;
  #L48d05c.  v0:= v1 @kind object;
  #L48d05e.  v0:= (`rx.internal.util.ScalarSynchronousObservable`) v0 @kind object;
  #L48d062.  call temp:= `scalarScheduleOn`(v0, v2) @signature `Lrx/internal/util/ScalarSynchronousObservable;.scalarScheduleOn:(Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48d068.  v2:= temp @kind object;
  #L48d06a.  return v2 @kind object;
  #L48d06c.  v0:= new `rx.internal.operators.OperatorSubscribeOn`;
  #L48d070.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/OperatorSubscribeOn;.<init>:(Lrx/Observable;Lrx/Scheduler;)V` @kind direct;
  #L48d076.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48d07c.  v2:= temp @kind object;
  #L48d07e.  return v2 @kind object;
}
procedure `rx.Observable` `switchIfEmpty`(`rx.Observable` v1 @kind this, `rx.Observable` v2 @kind object) @signature `Lrx/Observable;.switchIfEmpty:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d090.  if v2 == 0 then goto L48d0a8;
  #L48d094.  v0:= new `rx.internal.operators.OperatorSwitchIfEmpty`;
  #L48d098.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty;.<init>:(Lrx/Observable;)V` @kind direct;
  #L48d09e.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d0a4.  v2:= temp @kind object;
  #L48d0a6.  return v2 @kind object;
  #L48d0a8.  v2:= new `java.lang.NullPointerException`;
  #L48d0ac.  v0:= "alternate is null" @kind object;
  #L48d0b0.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48d0b6.  throw v2;
}
procedure `rx.Observable` `switchMap`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/Observable;.switchMap:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48d0c8.  call temp:= `map`(v0, v1) @signature `Lrx/Observable;.map:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48d0ce.  v1:= temp @kind object;
  #L48d0d0.  call temp:= `switchOnNext`(v1) @signature `Lrx/Observable;.switchOnNext:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48d0d6.  v1:= temp @kind object;
  #L48d0d8.  return v1 @kind object;
}
procedure `rx.Observable` `switchMapDelayError`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/Observable;.switchMapDelayError:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48d0ec.  call temp:= `map`(v0, v1) @signature `Lrx/Observable;.map:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48d0f2.  v1:= temp @kind object;
  #L48d0f4.  call temp:= `switchOnNextDelayError`(v1) @signature `Lrx/Observable;.switchOnNextDelayError:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48d0fa.  v1:= temp @kind object;
  #L48d0fc.  return v1 @kind object;
}
procedure `rx.Observable` `take`(`rx.Observable` v1 @kind this, `int` v2 ) @signature `Lrx/Observable;.take:(I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d158.  v0:= new `rx.internal.operators.OperatorTake`;
  #L48d15c.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorTake;.<init>:(I)V` @kind direct;
  #L48d162.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d168.  v2:= temp @kind object;
  #L48d16a.  return v2 @kind object;
}
procedure `rx.Observable` `take`(`rx.Observable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lrx/Observable;.take:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d17c.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48d182.  v0:= temp @kind object;
  #L48d184.  call temp:= `take`(v1, v2, v4, v0) @signature `Lrx/Observable;.take:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48d18a.  v2:= temp @kind object;
  #L48d18c.  return v2 @kind object;
}
procedure `rx.Observable` `take`(`rx.Observable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `rx.Scheduler` v5 @kind object) @signature `Lrx/Observable;.take:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d1a0.  v0:= new `rx.internal.operators.OperatorTakeTimed`;
  #L48d1a4.  call `<init>`(v0, v2, v4, v5) @signature `Lrx/internal/operators/OperatorTakeTimed;.<init>:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @kind direct;
  #L48d1aa.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d1b0.  v2:= temp @kind object;
  #L48d1b2.  return v2 @kind object;
}
procedure `rx.Observable` `takeFirst`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.takeFirst:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d1c4.  call temp:= `filter`(v1, v2) @signature `Lrx/Observable;.filter:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48d1ca.  v2:= temp @kind object;
  #L48d1cc.  v0:= 1I;
  #L48d1ce.  call temp:= `take`(v2, v0) @signature `Lrx/Observable;.take:(I)Lrx/Observable;` @kind virtual;
  #L48d1d4.  v2:= temp @kind object;
  #L48d1d6.  return v2 @kind object;
}
procedure `rx.Observable` `takeLast`(`rx.Observable` v1 @kind this, `int` v2 ) @signature `Lrx/Observable;.takeLast:(I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d1e8.  if v2 != 0 then goto L48d1f6;
  #L48d1ec.  call temp:= `ignoreElements`(v1) @signature `Lrx/Observable;.ignoreElements:()Lrx/Observable;` @kind virtual;
  #L48d1f2.  v2:= temp @kind object;
  #L48d1f4.  return v2 @kind object;
  #L48d1f6.  v0:= 1I;
  #L48d1f8.  if v2 != v0 then goto L48d210;
  #L48d1fc.  v2:= new `rx.internal.operators.OnSubscribeTakeLastOne`;
  #L48d200.  call `<init>`(v2, v1) @signature `Lrx/internal/operators/OnSubscribeTakeLastOne;.<init>:(Lrx/Observable;)V` @kind direct;
  #L48d206.  call temp:= `create`(v2) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48d20c.  v2:= temp @kind object;
  #L48d20e.  return v2 @kind object;
  #L48d210.  v0:= new `rx.internal.operators.OperatorTakeLast`;
  #L48d214.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorTakeLast;.<init>:(I)V` @kind direct;
  #L48d21a.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d220.  v2:= temp @kind object;
  #L48d222.  return v2 @kind object;
}
procedure `rx.Observable` `takeLast`(`rx.Observable` v6 @kind this, `int` v7 , `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lrx/Observable;.takeLast:(IJLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48d234.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48d23a.  v5:= temp @kind object;
  #L48d23c.  v0:= v6 @kind object;
  #L48d23e.  v1:= v7;
  #L48d240.  v2:= v8 @kind wide;
  #L48d242.  v4:= v10 @kind object;
  #L48d244.  call temp:= `takeLast`(v0, v1, v2, v4, v5) @signature `Lrx/Observable;.takeLast:(IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48d24a.  v7:= temp @kind object;
  #L48d24c.  return v7 @kind object;
}
procedure `rx.Observable` `takeLast`(`rx.Observable` v7 @kind this, `int` v8 , `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `rx.Scheduler` v12 @kind object) @signature `Lrx/Observable;.takeLast:(IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48d260.  v6:= new `rx.internal.operators.OperatorTakeLastTimed`;
  #L48d264.  v0:= v6 @kind object;
  #L48d266.  v1:= v8;
  #L48d268.  v2:= v9 @kind wide;
  #L48d26a.  v4:= v11 @kind object;
  #L48d26c.  v5:= v12 @kind object;
  #L48d26e.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lrx/internal/operators/OperatorTakeLastTimed;.<init>:(IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @kind direct;
  #L48d274.  call temp:= `lift`(v7, v6) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d27a.  v8:= temp @kind object;
  #L48d27c.  return v8 @kind object;
}
procedure `rx.Observable` `takeLast`(`rx.Observable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lrx/Observable;.takeLast:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d290.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48d296.  v0:= temp @kind object;
  #L48d298.  call temp:= `takeLast`(v1, v2, v4, v0) @signature `Lrx/Observable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48d29e.  v2:= temp @kind object;
  #L48d2a0.  return v2 @kind object;
}
procedure `rx.Observable` `takeLast`(`rx.Observable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `rx.Scheduler` v5 @kind object) @signature `Lrx/Observable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d2b4.  v0:= new `rx.internal.operators.OperatorTakeLastTimed`;
  #L48d2b8.  call `<init>`(v0, v2, v4, v5) @signature `Lrx/internal/operators/OperatorTakeLastTimed;.<init>:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @kind direct;
  #L48d2be.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d2c4.  v2:= temp @kind object;
  #L48d2c6.  return v2 @kind object;
}
procedure `rx.Observable` `takeLastBuffer`(`rx.Observable` v0 @kind this, `int` v1 ) @signature `Lrx/Observable;.takeLastBuffer:(I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48d2d8.  call temp:= `takeLast`(v0, v1) @signature `Lrx/Observable;.takeLast:(I)Lrx/Observable;` @kind virtual;
  #L48d2de.  v1:= temp @kind object;
  #L48d2e0.  call temp:= `toList`(v1) @signature `Lrx/Observable;.toList:()Lrx/Observable;` @kind virtual;
  #L48d2e6.  v1:= temp @kind object;
  #L48d2e8.  return v1 @kind object;
}
procedure `rx.Observable` `takeLastBuffer`(`rx.Observable` v0 @kind this, `int` v1 , `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lrx/Observable;.takeLastBuffer:(IJLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48d2fc.  call temp:= `takeLast`(v0, v1, v2, v4) @signature `Lrx/Observable;.takeLast:(IJLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @kind virtual;
  #L48d302.  v1:= temp @kind object;
  #L48d304.  call temp:= `toList`(v1) @signature `Lrx/Observable;.toList:()Lrx/Observable;` @kind virtual;
  #L48d30a.  v1:= temp @kind object;
  #L48d30c.  return v1 @kind object;
}
procedure `rx.Observable` `takeLastBuffer`(`rx.Observable` v0 @kind this, `int` v1 , `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `rx.Scheduler` v5 @kind object) @signature `Lrx/Observable;.takeLastBuffer:(IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48d320.  call temp:= `takeLast`(v0, v1, v2, v4, v5) @signature `Lrx/Observable;.takeLast:(IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48d326.  v1:= temp @kind object;
  #L48d328.  call temp:= `toList`(v1) @signature `Lrx/Observable;.toList:()Lrx/Observable;` @kind virtual;
  #L48d32e.  v1:= temp @kind object;
  #L48d330.  return v1 @kind object;
}
procedure `rx.Observable` `takeLastBuffer`(`rx.Observable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lrx/Observable;.takeLastBuffer:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48d344.  call temp:= `takeLast`(v0, v1, v3) @signature `Lrx/Observable;.takeLast:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @kind virtual;
  #L48d34a.  v1:= temp @kind object;
  #L48d34c.  call temp:= `toList`(v1) @signature `Lrx/Observable;.toList:()Lrx/Observable;` @kind virtual;
  #L48d352.  v1:= temp @kind object;
  #L48d354.  return v1 @kind object;
}
procedure `rx.Observable` `takeLastBuffer`(`rx.Observable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `rx.Scheduler` v4 @kind object) @signature `Lrx/Observable;.takeLastBuffer:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48d368.  call temp:= `takeLast`(v0, v1, v3, v4) @signature `Lrx/Observable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48d36e.  v1:= temp @kind object;
  #L48d370.  call temp:= `toList`(v1) @signature `Lrx/Observable;.toList:()Lrx/Observable;` @kind virtual;
  #L48d376.  v1:= temp @kind object;
  #L48d378.  return v1 @kind object;
}
procedure `rx.Observable` `takeUntil`(`rx.Observable` v1 @kind this, `rx.Observable` v2 @kind object) @signature `Lrx/Observable;.takeUntil:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d38c.  v0:= new `rx.internal.operators.OperatorTakeUntil`;
  #L48d390.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorTakeUntil;.<init>:(Lrx/Observable;)V` @kind direct;
  #L48d396.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d39c.  v2:= temp @kind object;
  #L48d39e.  return v2 @kind object;
}
procedure `rx.Observable` `takeUntil`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.takeUntil:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d3b0.  v0:= new `rx.internal.operators.OperatorTakeUntilPredicate`;
  #L48d3b4.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorTakeUntilPredicate;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L48d3ba.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d3c0.  v2:= temp @kind object;
  #L48d3c2.  return v2 @kind object;
}
procedure `rx.Observable` `takeWhile`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.takeWhile:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d3d4.  v0:= new `rx.internal.operators.OperatorTakeWhile`;
  #L48d3d8.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorTakeWhile;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L48d3de.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d3e4.  v2:= temp @kind object;
  #L48d3e6.  return v2 @kind object;
}
procedure `rx.Observable` `throttleFirst`(`rx.Observable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lrx/Observable;.throttleFirst:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d3f8.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48d3fe.  v0:= temp @kind object;
  #L48d400.  call temp:= `throttleFirst`(v1, v2, v4, v0) @signature `Lrx/Observable;.throttleFirst:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48d406.  v2:= temp @kind object;
  #L48d408.  return v2 @kind object;
}
procedure `rx.Observable` `throttleFirst`(`rx.Observable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `rx.Scheduler` v5 @kind object) @signature `Lrx/Observable;.throttleFirst:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d41c.  v0:= new `rx.internal.operators.OperatorThrottleFirst`;
  #L48d420.  call `<init>`(v0, v2, v4, v5) @signature `Lrx/internal/operators/OperatorThrottleFirst;.<init>:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @kind direct;
  #L48d426.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d42c.  v2:= temp @kind object;
  #L48d42e.  return v2 @kind object;
}
procedure `rx.Observable` `throttleLast`(`rx.Observable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lrx/Observable;.throttleLast:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48d440.  call temp:= `sample`(v0, v1, v3) @signature `Lrx/Observable;.sample:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @kind virtual;
  #L48d446.  v1:= temp @kind object;
  #L48d448.  return v1 @kind object;
}
procedure `rx.Observable` `throttleLast`(`rx.Observable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `rx.Scheduler` v4 @kind object) @signature `Lrx/Observable;.throttleLast:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48d45c.  call temp:= `sample`(v0, v1, v3, v4) @signature `Lrx/Observable;.sample:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48d462.  v1:= temp @kind object;
  #L48d464.  return v1 @kind object;
}
procedure `rx.Observable` `throttleWithTimeout`(`rx.Observable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lrx/Observable;.throttleWithTimeout:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48d478.  call temp:= `debounce`(v0, v1, v3) @signature `Lrx/Observable;.debounce:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @kind virtual;
  #L48d47e.  v1:= temp @kind object;
  #L48d480.  return v1 @kind object;
}
procedure `rx.Observable` `throttleWithTimeout`(`rx.Observable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `rx.Scheduler` v4 @kind object) @signature `Lrx/Observable;.throttleWithTimeout:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48d494.  call temp:= `debounce`(v0, v1, v3, v4) @signature `Lrx/Observable;.debounce:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48d49a.  v1:= temp @kind object;
  #L48d49c.  return v1 @kind object;
}
procedure `rx.Observable` `timeInterval`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.timeInterval:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d4b0.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48d4b6.  v0:= temp @kind object;
  #L48d4b8.  call temp:= `timeInterval`(v1, v0) @signature `Lrx/Observable;.timeInterval:(Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48d4be.  v0:= temp @kind object;
  #L48d4c0.  return v0 @kind object;
}
procedure `rx.Observable` `timeInterval`(`rx.Observable` v1 @kind this, `rx.Scheduler` v2 @kind object) @signature `Lrx/Observable;.timeInterval:(Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d4d4.  v0:= new `rx.internal.operators.OperatorTimeInterval`;
  #L48d4d8.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorTimeInterval;.<init>:(Lrx/Scheduler;)V` @kind direct;
  #L48d4de.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d4e4.  v2:= temp @kind object;
  #L48d4e6.  return v2 @kind object;
}
procedure `rx.Observable` `timeout`(`rx.Observable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lrx/Observable;.timeout:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48d4f8.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48d4fe.  v5:= temp @kind object;
  #L48d500.  v4:= 0I;
  #L48d502.  v0:= v6 @kind object;
  #L48d504.  v1:= v7 @kind wide;
  #L48d506.  v3:= v9 @kind object;
  #L48d508.  call temp:= `timeout`(v0, v1, v3, v4, v5) @signature `Lrx/Observable;.timeout:(JLjava/util/concurrent/TimeUnit;Lrx/Observable;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48d50e.  v7:= temp @kind object;
  #L48d510.  return v7 @kind object;
}
procedure `rx.Observable` `timeout`(`rx.Observable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `rx.Observable` v10 @kind object) @signature `Lrx/Observable;.timeout:(JLjava/util/concurrent/TimeUnit;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48d524.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48d52a.  v5:= temp @kind object;
  #L48d52c.  v0:= v6 @kind object;
  #L48d52e.  v1:= v7 @kind wide;
  #L48d530.  v3:= v9 @kind object;
  #L48d532.  v4:= v10 @kind object;
  #L48d534.  call temp:= `timeout`(v0, v1, v3, v4, v5) @signature `Lrx/Observable;.timeout:(JLjava/util/concurrent/TimeUnit;Lrx/Observable;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48d53a.  v7:= temp @kind object;
  #L48d53c.  return v7 @kind object;
}
procedure `rx.Observable` `timeout`(`rx.Observable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `rx.Observable` v11 @kind object, `rx.Scheduler` v12 @kind object) @signature `Lrx/Observable;.timeout:(JLjava/util/concurrent/TimeUnit;Lrx/Observable;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48d550.  v6:= new `rx.internal.operators.OperatorTimeout`;
  #L48d554.  v0:= v6 @kind object;
  #L48d556.  v1:= v8 @kind wide;
  #L48d558.  v3:= v10 @kind object;
  #L48d55a.  v4:= v11 @kind object;
  #L48d55c.  v5:= v12 @kind object;
  #L48d55e.  call `<init>`(v0, v1, v3, v4, v5) @signature `Lrx/internal/operators/OperatorTimeout;.<init>:(JLjava/util/concurrent/TimeUnit;Lrx/Observable;Lrx/Scheduler;)V` @kind direct;
  #L48d564.  call temp:= `lift`(v7, v6) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d56a.  v8:= temp @kind object;
  #L48d56c.  return v8 @kind object;
}
procedure `rx.Observable` `timeout`(`rx.Observable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `rx.Scheduler` v10 @kind object) @signature `Lrx/Observable;.timeout:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48d580.  v4:= 0I;
  #L48d582.  v0:= v6 @kind object;
  #L48d584.  v1:= v7 @kind wide;
  #L48d586.  v3:= v9 @kind object;
  #L48d588.  v5:= v10 @kind object;
  #L48d58a.  call temp:= `timeout`(v0, v1, v3, v4, v5) @signature `Lrx/Observable;.timeout:(JLjava/util/concurrent/TimeUnit;Lrx/Observable;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48d590.  v7:= temp @kind object;
  #L48d592.  return v7 @kind object;
}
procedure `rx.Observable` `timeout`(`rx.Observable` v1 @kind this, `rx.functions.Func0` v2 @kind object, `rx.functions.Func1` v3 @kind object) @signature `Lrx/Observable;.timeout:(Lrx/functions/Func0;Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d5a4.  v0:= 0I;
  #L48d5a6.  call temp:= `timeout`(v1, v2, v3, v0) @signature `Lrx/Observable;.timeout:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/Observable;)Lrx/Observable;` @kind virtual;
  #L48d5ac.  v2:= temp @kind object;
  #L48d5ae.  return v2 @kind object;
}
procedure `rx.Observable` `timeout`(`rx.Observable` v1 @kind this, `rx.functions.Func0` v2 @kind object, `rx.functions.Func1` v3 @kind object, `rx.Observable` v4 @kind object) @signature `Lrx/Observable;.timeout:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d5c0.  if v3 == 0 then goto L48d5d8;
  #L48d5c4.  v0:= new `rx.internal.operators.OperatorTimeoutWithSelector`;
  #L48d5c8.  call `<init>`(v0, v2, v3, v4) @signature `Lrx/internal/operators/OperatorTimeoutWithSelector;.<init>:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/Observable;)V` @kind direct;
  #L48d5ce.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d5d4.  v2:= temp @kind object;
  #L48d5d6.  return v2 @kind object;
  #L48d5d8.  v2:= new `java.lang.NullPointerException`;
  #L48d5dc.  v3:= "timeoutSelector is null" @kind object;
  #L48d5e0.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48d5e6.  throw v2;
}
procedure `rx.Observable` `timeout`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Observable;.timeout:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d5f8.  v0:= 0I;
  #L48d5fa.  call temp:= `timeout`(v1, v0, v2, v0) @signature `Lrx/Observable;.timeout:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/Observable;)Lrx/Observable;` @kind virtual;
  #L48d600.  v2:= temp @kind object;
  #L48d602.  return v2 @kind object;
}
procedure `rx.Observable` `timeout`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object, `rx.Observable` v3 @kind object) @signature `Lrx/Observable;.timeout:(Lrx/functions/Func1;Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d614.  v0:= 0I;
  #L48d616.  call temp:= `timeout`(v1, v0, v2, v3) @signature `Lrx/Observable;.timeout:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/Observable;)Lrx/Observable;` @kind virtual;
  #L48d61c.  v2:= temp @kind object;
  #L48d61e.  return v2 @kind object;
}
procedure `rx.Observable` `timestamp`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.timestamp:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d6bc.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48d6c2.  v0:= temp @kind object;
  #L48d6c4.  call temp:= `timestamp`(v1, v0) @signature `Lrx/Observable;.timestamp:(Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48d6ca.  v0:= temp @kind object;
  #L48d6cc.  return v0 @kind object;
}
procedure `rx.Observable` `timestamp`(`rx.Observable` v1 @kind this, `rx.Scheduler` v2 @kind object) @signature `Lrx/Observable;.timestamp:(Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d6e0.  v0:= new `rx.internal.operators.OperatorTimestamp`;
  #L48d6e4.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorTimestamp;.<init>:(Lrx/Scheduler;)V` @kind direct;
  #L48d6ea.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d6f0.  v2:= temp @kind object;
  #L48d6f2.  return v2 @kind object;
}
procedure `java.lang.Object` `to`(`rx.Observable` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/Observable;.to:(Lrx/functions/Func1;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48a0c0.  call temp:= `call`(v1, v0) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48a0c6.  v1:= temp @kind object;
  #L48a0c8.  return v1 @kind object;
}
procedure `rx.observables.BlockingObservable` `toBlocking`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.toBlocking:()Lrx/observables/BlockingObservable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e588.  call temp:= `from`(v1) @signature `Lrx/observables/BlockingObservable;.from:(Lrx/Observable;)Lrx/observables/BlockingObservable;` @kind static;
  #L48e58e.  v0:= temp @kind object;
  #L48e590.  return v0 @kind object;
}
procedure `rx.Completable` `toCompletable`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.toCompletable:()Lrx/Completable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48a0dc.  call temp:= `fromObservable`(v1) @signature `Lrx/Completable;.fromObservable:(Lrx/Observable;)Lrx/Completable;` @kind static;
  #L48a0e2.  v0:= temp @kind object;
  #L48a0e4.  return v0 @kind object;
}
procedure `rx.Observable` `toList`(`rx.Observable` v1 @kind this) @signature `Lrx/Observable;.toList:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d704.  call temp:= `instance`() @signature `Lrx/internal/operators/OperatorToObservableList;.instance:()Lrx/internal/operators/OperatorToObservableList;` @kind static;
  #L48d70a.  v0:= temp @kind object;
  #L48d70c.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d712.  v0:= temp @kind object;
  #L48d714.  return v0 @kind object;
}
procedure `rx.Observable` `toMap`(`rx.Observable` v2 @kind this, `rx.functions.Func1` v3 @kind object) @signature `Lrx/Observable;.toMap:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48d728.  v0:= new `rx.internal.operators.OnSubscribeToMap`;
  #L48d72c.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L48d732.  v1:= temp @kind object;
  #L48d734.  call `<init>`(v0, v2, v3, v1) @signature `Lrx/internal/operators/OnSubscribeToMap;.<init>:(Lrx/Observable;Lrx/functions/Func1;Lrx/functions/Func1;)V` @kind direct;
  #L48d73a.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48d740.  v3:= temp @kind object;
  #L48d742.  return v3 @kind object;
}
procedure `rx.Observable` `toMap`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object, `rx.functions.Func1` v3 @kind object) @signature `Lrx/Observable;.toMap:(Lrx/functions/Func1;Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d754.  v0:= new `rx.internal.operators.OnSubscribeToMap`;
  #L48d758.  call `<init>`(v0, v1, v2, v3) @signature `Lrx/internal/operators/OnSubscribeToMap;.<init>:(Lrx/Observable;Lrx/functions/Func1;Lrx/functions/Func1;)V` @kind direct;
  #L48d75e.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48d764.  v2:= temp @kind object;
  #L48d766.  return v2 @kind object;
}
procedure `rx.Observable` `toMap`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object, `rx.functions.Func1` v3 @kind object, `rx.functions.Func0` v4 @kind object) @signature `Lrx/Observable;.toMap:(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d778.  v0:= new `rx.internal.operators.OnSubscribeToMap`;
  #L48d77c.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lrx/internal/operators/OnSubscribeToMap;.<init>:(Lrx/Observable;Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;)V` @kind direct;
  #L48d782.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48d788.  v2:= temp @kind object;
  #L48d78a.  return v2 @kind object;
}
procedure `rx.Observable` `toMultimap`(`rx.Observable` v2 @kind this, `rx.functions.Func1` v3 @kind object) @signature `Lrx/Observable;.toMultimap:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48d79c.  v0:= new `rx.internal.operators.OnSubscribeToMultimap`;
  #L48d7a0.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L48d7a6.  v1:= temp @kind object;
  #L48d7a8.  call `<init>`(v0, v2, v3, v1) @signature `Lrx/internal/operators/OnSubscribeToMultimap;.<init>:(Lrx/Observable;Lrx/functions/Func1;Lrx/functions/Func1;)V` @kind direct;
  #L48d7ae.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48d7b4.  v3:= temp @kind object;
  #L48d7b6.  return v3 @kind object;
}
procedure `rx.Observable` `toMultimap`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object, `rx.functions.Func1` v3 @kind object) @signature `Lrx/Observable;.toMultimap:(Lrx/functions/Func1;Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d7c8.  v0:= new `rx.internal.operators.OnSubscribeToMultimap`;
  #L48d7cc.  call `<init>`(v0, v1, v2, v3) @signature `Lrx/internal/operators/OnSubscribeToMultimap;.<init>:(Lrx/Observable;Lrx/functions/Func1;Lrx/functions/Func1;)V` @kind direct;
  #L48d7d2.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48d7d8.  v2:= temp @kind object;
  #L48d7da.  return v2 @kind object;
}
procedure `rx.Observable` `toMultimap`(`rx.Observable` v1 @kind this, `rx.functions.Func1` v2 @kind object, `rx.functions.Func1` v3 @kind object, `rx.functions.Func0` v4 @kind object) @signature `Lrx/Observable;.toMultimap:(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d7ec.  v0:= new `rx.internal.operators.OnSubscribeToMultimap`;
  #L48d7f0.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lrx/internal/operators/OnSubscribeToMultimap;.<init>:(Lrx/Observable;Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;)V` @kind direct;
  #L48d7f6.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48d7fc.  v2:= temp @kind object;
  #L48d7fe.  return v2 @kind object;
}
procedure `rx.Observable` `toMultimap`(`rx.Observable` v7 @kind this, `rx.functions.Func1` v8 @kind object, `rx.functions.Func1` v9 @kind object, `rx.functions.Func0` v10 @kind object, `rx.functions.Func1` v11 @kind object) @signature `Lrx/Observable;.toMultimap:(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48d810.  v6:= new `rx.internal.operators.OnSubscribeToMultimap`;
  #L48d814.  v0:= v6 @kind object;
  #L48d816.  v1:= v7 @kind object;
  #L48d818.  v2:= v8 @kind object;
  #L48d81a.  v3:= v9 @kind object;
  #L48d81c.  v4:= v10 @kind object;
  #L48d81e.  v5:= v11 @kind object;
  #L48d820.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lrx/internal/operators/OnSubscribeToMultimap;.<init>:(Lrx/Observable;Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;Lrx/functions/Func1;)V` @kind direct;
  #L48d826.  call temp:= `create`(v6) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48d82c.  v8:= temp @kind object;
  #L48d82e.  return v8 @kind object;
}
procedure `rx.Single` `toSingle`(`rx.Observable` v2 @kind this) @signature `Lrx/Observable;.toSingle:()Lrx/Single;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48e1fc.  v0:= new `rx.Single`;
  #L48e200.  call temp:= `create`(v2) @signature `Lrx/internal/operators/OnSubscribeSingle;.create:(Lrx/Observable;)Lrx/internal/operators/OnSubscribeSingle;` @kind static;
  #L48e206.  v1:= temp @kind object;
  #L48e208.  call `<init>`(v0, v1) @signature `Lrx/Single;.<init>:(Lrx/Single$OnSubscribe;)V` @kind direct;
  #L48e20e.  return v0 @kind object;
}
procedure `rx.Observable` `toSortedList`(`rx.Observable` v2 @kind this) @signature `Lrx/Observable;.toSortedList:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48d840.  v0:= new `rx.internal.operators.OperatorToObservableSortedList`;
  #L48d844.  v1:= 10I;
  #L48d848.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OperatorToObservableSortedList;.<init>:(I)V` @kind direct;
  #L48d84e.  call temp:= `lift`(v2, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d854.  v0:= temp @kind object;
  #L48d856.  return v0 @kind object;
}
procedure `rx.Observable` `toSortedList`(`rx.Observable` v1 @kind this, `int` v2 ) @signature `Lrx/Observable;.toSortedList:(I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d868.  v0:= new `rx.internal.operators.OperatorToObservableSortedList`;
  #L48d86c.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorToObservableSortedList;.<init>:(I)V` @kind direct;
  #L48d872.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d878.  v2:= temp @kind object;
  #L48d87a.  return v2 @kind object;
}
procedure `rx.Observable` `toSortedList`(`rx.Observable` v2 @kind this, `rx.functions.Func2` v3 @kind object) @signature `Lrx/Observable;.toSortedList:(Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48d88c.  v0:= new `rx.internal.operators.OperatorToObservableSortedList`;
  #L48d890.  v1:= 10I;
  #L48d894.  call `<init>`(v0, v3, v1) @signature `Lrx/internal/operators/OperatorToObservableSortedList;.<init>:(Lrx/functions/Func2;I)V` @kind direct;
  #L48d89a.  call temp:= `lift`(v2, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d8a0.  v3:= temp @kind object;
  #L48d8a2.  return v3 @kind object;
}
procedure `rx.Observable` `toSortedList`(`rx.Observable` v1 @kind this, `rx.functions.Func2` v2 @kind object, `int` v3 ) @signature `Lrx/Observable;.toSortedList:(Lrx/functions/Func2;I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d8b4.  v0:= new `rx.internal.operators.OperatorToObservableSortedList`;
  #L48d8b8.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/operators/OperatorToObservableSortedList;.<init>:(Lrx/functions/Func2;I)V` @kind direct;
  #L48d8be.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d8c4.  v2:= temp @kind object;
  #L48d8c6.  return v2 @kind object;
}
procedure `rx.Subscription` `unsafeSubscribe`(`rx.Observable` v4 @kind this, `rx.Subscriber` v5 @kind object) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48e4d0.  call `onStart`(v5) @signature `Lrx/Subscriber;.onStart:()V` @kind virtual;
  #L48e4d6.  v0:= v4.`rx.Observable.onSubscribe` @type ^`rx.Observable$OnSubscribe` @kind object;
  #L48e4da.  call temp:= `onObservableStart`(v4, v0) @signature `Lrx/plugins/RxJavaHooks;.onObservableStart:(Lrx/Observable;Lrx/Observable$OnSubscribe;)Lrx/Observable$OnSubscribe;` @kind static;
  #L48e4e0.  v0:= temp @kind object;
  #L48e4e2.  call `call`(v0, v5) @signature `Lrx/Observable$OnSubscribe;.call:(Ljava/lang/Object;)V` @kind interface;
  #L48e4e8.  call temp:= `onObservableReturn`(v5) @signature `Lrx/plugins/RxJavaHooks;.onObservableReturn:(Lrx/Subscription;)Lrx/Subscription;` @kind static;
  #L48e4ee.  v5:= temp @kind object;
  #L48e4f0.  return v5 @kind object;
  #L48e4f2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48e4f4.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48e4fa.  call temp:= `onObservableError`(v0) @signature `Lrx/plugins/RxJavaHooks;.onObservableError:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L48e500.  v1:= temp @kind object;
  #L48e502.  call `onError`(v5, v1) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48e508.  call temp:= `unsubscribed`() @signature `Lrx/subscriptions/Subscriptions;.unsubscribed:()Lrx/Subscription;` @kind static;
  #L48e50e.  v5:= temp @kind object;
  #L48e510.  return v5 @kind object;
  #L48e512.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48e514.  call `throwIfFatal`(v5) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48e51a.  v1:= new `rx.exceptions.OnErrorFailedException`;
  #L48e51e.  v2:= new `java.lang.StringBuilder`;
  #L48e522.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48e528.  v3:= "Error occurred attempting to subscribe [" @kind object;
  #L48e52c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e532.  call temp:= `getMessage`(v0) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L48e538.  v0:= temp @kind object;
  #L48e53a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e540.  v0:= "] and then again while trying to pass to onError." @kind object;
  #L48e544.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e54a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48e550.  v0:= temp @kind object;
  #L48e552.  call `<init>`(v1, v0, v5) @signature `Lrx/exceptions/OnErrorFailedException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L48e558.  call temp:= `onObservableError`(v1) @signature `Lrx/plugins/RxJavaHooks;.onObservableError:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L48e55e.  throw v1;
  catch `java.lang.Throwable` @[L48e4d0..L48e4f0] goto L48e4f2;
  catch `java.lang.Throwable` @[L48e4fa..L48e508] goto L48e512;
}
procedure `rx.Observable` `unsubscribeOn`(`rx.Observable` v1 @kind this, `rx.Scheduler` v2 @kind object) @signature `Lrx/Observable;.unsubscribeOn:(Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d8d8.  v0:= new `rx.internal.operators.OperatorUnsubscribeOn`;
  #L48d8dc.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorUnsubscribeOn;.<init>:(Lrx/Scheduler;)V` @kind direct;
  #L48d8e2.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d8e8.  v2:= temp @kind object;
  #L48d8ea.  return v2 @kind object;
}
procedure `rx.Observable` `window`(`rx.Observable` v0 @kind this, `int` v1 ) @signature `Lrx/Observable;.window:(I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48d93c.  call temp:= `window`(v0, v1, v1) @signature `Lrx/Observable;.window:(II)Lrx/Observable;` @kind virtual;
  #L48d942.  v1:= temp @kind object;
  #L48d944.  return v1 @kind object;
}
procedure `rx.Observable` `window`(`rx.Observable` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lrx/Observable;.window:(II)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48d958.  if v3 <= 0 then goto L48d9a2;
  #L48d95c.  if v4 <= 0 then goto L48d974;
  #L48d960.  v0:= new `rx.internal.operators.OperatorWindowWithSize`;
  #L48d964.  call `<init>`(v0, v3, v4) @signature `Lrx/internal/operators/OperatorWindowWithSize;.<init>:(II)V` @kind direct;
  #L48d96a.  call temp:= `lift`(v2, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48d970.  v3:= temp @kind object;
  #L48d972.  return v3 @kind object;
  #L48d974.  v3:= new `java.lang.IllegalArgumentException`;
  #L48d978.  v0:= new `java.lang.StringBuilder`;
  #L48d97c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48d982.  v1:= "skip > 0 required but it was " @kind object;
  #L48d986.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48d98c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48d992.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48d998.  v4:= temp @kind object;
  #L48d99a.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48d9a0.  throw v3;
  #L48d9a2.  v4:= new `java.lang.IllegalArgumentException`;
  #L48d9a6.  v0:= new `java.lang.StringBuilder`;
  #L48d9aa.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48d9b0.  v1:= "count > 0 required but it was " @kind object;
  #L48d9b4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48d9ba.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48d9c0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48d9c6.  v3:= temp @kind object;
  #L48d9c8.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48d9ce.  throw v4;
}
procedure `rx.Observable` `window`(`rx.Observable` v8 @kind this, `long` v9 , `long` v11 , `java.util.concurrent.TimeUnit` v13 @kind object) @signature `Lrx/Observable;.window:(JJLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L48da88.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48da8e.  v7:= temp @kind object;
  #L48da90.  v6:= 2147483647I;
  #L48da96.  v0:= v8 @kind object;
  #L48da98.  v1:= v9 @kind wide;
  #L48da9a.  v3:= v11 @kind wide;
  #L48da9c.  v5:= v13 @kind object;
  #L48da9e.  call temp:= `window`(v0, v1, v3, v5, v6, v7) @signature `Lrx/Observable;.window:(JJLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48daa4.  v9:= temp @kind object;
  #L48daa6.  return v9 @kind object;
}
procedure `rx.Observable` `window`(`rx.Observable` v9 @kind this, `long` v10 , `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object, `int` v15 , `rx.Scheduler` v16 @kind object) @signature `Lrx/Observable;.window:(JJLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L48dab8.  v8:= new `rx.internal.operators.OperatorWindowWithTime`;
  #L48dabc.  v0:= v8 @kind object;
  #L48dabe.  v1:= v10 @kind wide;
  #L48dac0.  v3:= v12 @kind wide;
  #L48dac2.  v5:= v14 @kind object;
  #L48dac4.  v6:= v15;
  #L48dac6.  v7:= v16 @kind object;
  #L48daca.  call `<init>`(v0, v1, v3, v5, v6, v7) @signature `Lrx/internal/operators/OperatorWindowWithTime;.<init>:(JJLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)V` @kind direct;
  #L48dad0.  v0:= v9 @kind object;
  #L48dad2.  call temp:= `lift`(v9, v8) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48dad8.  v1:= temp @kind object;
  #L48dada.  return v1 @kind object;
}
procedure `rx.Observable` `window`(`rx.Observable` v8 @kind this, `long` v9 , `long` v11 , `java.util.concurrent.TimeUnit` v13 @kind object, `rx.Scheduler` v14 @kind object) @signature `Lrx/Observable;.window:(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L48daec.  v6:= 2147483647I;
  #L48daf2.  v0:= v8 @kind object;
  #L48daf4.  v1:= v9 @kind wide;
  #L48daf6.  v3:= v11 @kind wide;
  #L48daf8.  v5:= v13 @kind object;
  #L48dafa.  v7:= v14 @kind object;
  #L48dafc.  call temp:= `window`(v0, v1, v3, v5, v6, v7) @signature `Lrx/Observable;.window:(JJLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48db02.  v9:= temp @kind object;
  #L48db04.  return v9 @kind object;
}
procedure `rx.Observable` `window`(`rx.Observable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lrx/Observable;.window:(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48d9e0.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48d9e6.  v6:= temp @kind object;
  #L48d9e8.  v0:= v7 @kind object;
  #L48d9ea.  v1:= v8 @kind wide;
  #L48d9ec.  v3:= v8 @kind wide;
  #L48d9ee.  v5:= v10 @kind object;
  #L48d9f0.  call temp:= `window`(v0, v1, v3, v5, v6) @signature `Lrx/Observable;.window:(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48d9f6.  v8:= temp @kind object;
  #L48d9f8.  return v8 @kind object;
}
procedure `rx.Observable` `window`(`rx.Observable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `int` v10 ) @signature `Lrx/Observable;.window:(JLjava/util/concurrent/TimeUnit;I)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48da0c.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48da12.  v5:= temp @kind object;
  #L48da14.  v0:= v6 @kind object;
  #L48da16.  v1:= v7 @kind wide;
  #L48da18.  v3:= v9 @kind object;
  #L48da1a.  v4:= v10;
  #L48da1c.  call temp:= `window`(v0, v1, v3, v4, v5) @signature `Lrx/Observable;.window:(JLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48da22.  v7:= temp @kind object;
  #L48da24.  return v7 @kind object;
}
procedure `rx.Observable` `window`(`rx.Observable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `int` v12 , `rx.Scheduler` v13 @kind object) @signature `Lrx/Observable;.window:(JLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L48da38.  v0:= v8 @kind object;
  #L48da3a.  v1:= v9 @kind wide;
  #L48da3c.  v3:= v9 @kind wide;
  #L48da3e.  v5:= v11 @kind object;
  #L48da40.  v6:= v12;
  #L48da42.  v7:= v13 @kind object;
  #L48da44.  call temp:= `window`(v0, v1, v3, v5, v6, v7) @signature `Lrx/Observable;.window:(JJLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48da4a.  v9:= temp @kind object;
  #L48da4c.  return v9 @kind object;
}
procedure `rx.Observable` `window`(`rx.Observable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `rx.Scheduler` v10 @kind object) @signature `Lrx/Observable;.window:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48da60.  v4:= 2147483647I;
  #L48da66.  v0:= v6 @kind object;
  #L48da68.  v1:= v7 @kind wide;
  #L48da6a.  v3:= v9 @kind object;
  #L48da6c.  v5:= v10 @kind object;
  #L48da6e.  call temp:= `window`(v0, v1, v3, v4, v5) @signature `Lrx/Observable;.window:(JLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L48da74.  v7:= temp @kind object;
  #L48da76.  return v7 @kind object;
}
procedure `rx.Observable` `window`(`rx.Observable` v1 @kind this, `rx.Observable` v2 @kind object) @signature `Lrx/Observable;.window:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48db18.  v0:= new `rx.internal.operators.OperatorWindowWithObservable`;
  #L48db1c.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorWindowWithObservable;.<init>:(Lrx/Observable;)V` @kind direct;
  #L48db22.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48db28.  v2:= temp @kind object;
  #L48db2a.  return v2 @kind object;
}
procedure `rx.Observable` `window`(`rx.Observable` v1 @kind this, `rx.Observable` v2 @kind object, `rx.functions.Func1` v3 @kind object) @signature `Lrx/Observable;.window:(Lrx/Observable;Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48db3c.  v0:= new `rx.internal.operators.OperatorWindowWithStartEndObservable`;
  #L48db40.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/operators/OperatorWindowWithStartEndObservable;.<init>:(Lrx/Observable;Lrx/functions/Func1;)V` @kind direct;
  #L48db46.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48db4c.  v2:= temp @kind object;
  #L48db4e.  return v2 @kind object;
}
procedure `rx.Observable` `window`(`rx.Observable` v1 @kind this, `rx.functions.Func0` v2 @kind object) @signature `Lrx/Observable;.window:(Lrx/functions/Func0;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48db60.  v0:= new `rx.internal.operators.OperatorWindowWithObservableFactory`;
  #L48db64.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorWindowWithObservableFactory;.<init>:(Lrx/functions/Func0;)V` @kind direct;
  #L48db6a.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48db70.  v2:= temp @kind object;
  #L48db72.  return v2 @kind object;
}
procedure `rx.Observable` `withLatestFrom`(`rx.Observable` v2 @kind this, `java.lang.Iterable` v3 @kind object, `rx.functions.FuncN` v4 @kind object) @signature `Lrx/Observable;.withLatestFrom:(Ljava/lang/Iterable;Lrx/functions/FuncN;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48db84.  v0:= new `rx.internal.operators.OperatorWithLatestFromMany`;
  #L48db88.  v1:= 0I;
  #L48db8a.  call `<init>`(v0, v2, v1, v3, v4) @signature `Lrx/internal/operators/OperatorWithLatestFromMany;.<init>:(Lrx/Observable;[Lrx/Observable;Ljava/lang/Iterable;Lrx/functions/FuncN;)V` @kind direct;
  #L48db90.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48db96.  v3:= temp @kind object;
  #L48db98.  return v3 @kind object;
}
procedure `rx.Observable` `withLatestFrom`(`rx.Observable` v3 @kind this, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object, `rx.Observable` v9 @kind object, `rx.Observable` v10 @kind object, `rx.Observable` v11 @kind object, `rx.functions.Func9` v12 @kind object) @signature `Lrx/Observable;.withLatestFrom:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func9;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48dbac.  v0:= new `rx.internal.operators.OperatorWithLatestFromMany`;
  #L48dbb0.  v1:= 8I;
  #L48dbb4.  v1:= new `rx.Observable`[v1];
  #L48dbb8.  v2:= 0I;
  #L48dbba.  v1[v2]:= v4 @kind object;
  #L48dbbe.  v4:= 1I;
  #L48dbc0.  v1[v4]:= v5 @kind object;
  #L48dbc4.  v4:= 2I;
  #L48dbc6.  v1[v4]:= v6 @kind object;
  #L48dbca.  v4:= 3I;
  #L48dbcc.  v1[v4]:= v7 @kind object;
  #L48dbd0.  v4:= 4I;
  #L48dbd2.  v1[v4]:= v8 @kind object;
  #L48dbd6.  v4:= 5I;
  #L48dbd8.  v1[v4]:= v9 @kind object;
  #L48dbdc.  v4:= 6I;
  #L48dbde.  v1[v4]:= v10 @kind object;
  #L48dbe2.  v4:= 7I;
  #L48dbe4.  v1[v4]:= v11 @kind object;
  #L48dbe8.  call temp:= `fromFunc`(v12) @signature `Lrx/functions/Functions;.fromFunc:(Lrx/functions/Func9;)Lrx/functions/FuncN;` @kind static;
  #L48dbee.  v4:= temp @kind object;
  #L48dbf0.  v5:= 0I;
  #L48dbf2.  call `<init>`(v0, v3, v1, v5, v4) @signature `Lrx/internal/operators/OperatorWithLatestFromMany;.<init>:(Lrx/Observable;[Lrx/Observable;Ljava/lang/Iterable;Lrx/functions/FuncN;)V` @kind direct;
  #L48dbf8.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48dbfe.  v4:= temp @kind object;
  #L48dc00.  return v4 @kind object;
}
procedure `rx.Observable` `withLatestFrom`(`rx.Observable` v3 @kind this, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object, `rx.Observable` v9 @kind object, `rx.Observable` v10 @kind object, `rx.functions.Func8` v11 @kind object) @signature `Lrx/Observable;.withLatestFrom:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func8;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48dc14.  v0:= new `rx.internal.operators.OperatorWithLatestFromMany`;
  #L48dc18.  v1:= 7I;
  #L48dc1a.  v1:= new `rx.Observable`[v1];
  #L48dc1e.  v2:= 0I;
  #L48dc20.  v1[v2]:= v4 @kind object;
  #L48dc24.  v4:= 1I;
  #L48dc26.  v1[v4]:= v5 @kind object;
  #L48dc2a.  v4:= 2I;
  #L48dc2c.  v1[v4]:= v6 @kind object;
  #L48dc30.  v4:= 3I;
  #L48dc32.  v1[v4]:= v7 @kind object;
  #L48dc36.  v4:= 4I;
  #L48dc38.  v1[v4]:= v8 @kind object;
  #L48dc3c.  v4:= 5I;
  #L48dc3e.  v1[v4]:= v9 @kind object;
  #L48dc42.  v4:= 6I;
  #L48dc44.  v1[v4]:= v10 @kind object;
  #L48dc48.  call temp:= `fromFunc`(v11) @signature `Lrx/functions/Functions;.fromFunc:(Lrx/functions/Func8;)Lrx/functions/FuncN;` @kind static;
  #L48dc4e.  v4:= temp @kind object;
  #L48dc50.  v5:= 0I;
  #L48dc52.  call `<init>`(v0, v3, v1, v5, v4) @signature `Lrx/internal/operators/OperatorWithLatestFromMany;.<init>:(Lrx/Observable;[Lrx/Observable;Ljava/lang/Iterable;Lrx/functions/FuncN;)V` @kind direct;
  #L48dc58.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48dc5e.  v4:= temp @kind object;
  #L48dc60.  return v4 @kind object;
}
procedure `rx.Observable` `withLatestFrom`(`rx.Observable` v3 @kind this, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object, `rx.Observable` v9 @kind object, `rx.functions.Func7` v10 @kind object) @signature `Lrx/Observable;.withLatestFrom:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func7;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48dc74.  v0:= new `rx.internal.operators.OperatorWithLatestFromMany`;
  #L48dc78.  v1:= 6I;
  #L48dc7a.  v1:= new `rx.Observable`[v1];
  #L48dc7e.  v2:= 0I;
  #L48dc80.  v1[v2]:= v4 @kind object;
  #L48dc84.  v4:= 1I;
  #L48dc86.  v1[v4]:= v5 @kind object;
  #L48dc8a.  v4:= 2I;
  #L48dc8c.  v1[v4]:= v6 @kind object;
  #L48dc90.  v4:= 3I;
  #L48dc92.  v1[v4]:= v7 @kind object;
  #L48dc96.  v4:= 4I;
  #L48dc98.  v1[v4]:= v8 @kind object;
  #L48dc9c.  v4:= 5I;
  #L48dc9e.  v1[v4]:= v9 @kind object;
  #L48dca2.  call temp:= `fromFunc`(v10) @signature `Lrx/functions/Functions;.fromFunc:(Lrx/functions/Func7;)Lrx/functions/FuncN;` @kind static;
  #L48dca8.  v4:= temp @kind object;
  #L48dcaa.  v5:= 0I;
  #L48dcac.  call `<init>`(v0, v3, v1, v5, v4) @signature `Lrx/internal/operators/OperatorWithLatestFromMany;.<init>:(Lrx/Observable;[Lrx/Observable;Ljava/lang/Iterable;Lrx/functions/FuncN;)V` @kind direct;
  #L48dcb2.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48dcb8.  v4:= temp @kind object;
  #L48dcba.  return v4 @kind object;
}
procedure `rx.Observable` `withLatestFrom`(`rx.Observable` v3 @kind this, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object, `rx.functions.Func6` v9 @kind object) @signature `Lrx/Observable;.withLatestFrom:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func6;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48dccc.  v0:= new `rx.internal.operators.OperatorWithLatestFromMany`;
  #L48dcd0.  v1:= 5I;
  #L48dcd2.  v1:= new `rx.Observable`[v1];
  #L48dcd6.  v2:= 0I;
  #L48dcd8.  v1[v2]:= v4 @kind object;
  #L48dcdc.  v4:= 1I;
  #L48dcde.  v1[v4]:= v5 @kind object;
  #L48dce2.  v4:= 2I;
  #L48dce4.  v1[v4]:= v6 @kind object;
  #L48dce8.  v4:= 3I;
  #L48dcea.  v1[v4]:= v7 @kind object;
  #L48dcee.  v4:= 4I;
  #L48dcf0.  v1[v4]:= v8 @kind object;
  #L48dcf4.  call temp:= `fromFunc`(v9) @signature `Lrx/functions/Functions;.fromFunc:(Lrx/functions/Func6;)Lrx/functions/FuncN;` @kind static;
  #L48dcfa.  v4:= temp @kind object;
  #L48dcfc.  v5:= 0I;
  #L48dcfe.  call `<init>`(v0, v3, v1, v5, v4) @signature `Lrx/internal/operators/OperatorWithLatestFromMany;.<init>:(Lrx/Observable;[Lrx/Observable;Ljava/lang/Iterable;Lrx/functions/FuncN;)V` @kind direct;
  #L48dd04.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48dd0a.  v4:= temp @kind object;
  #L48dd0c.  return v4 @kind object;
}
procedure `rx.Observable` `withLatestFrom`(`rx.Observable` v3 @kind this, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.functions.Func5` v8 @kind object) @signature `Lrx/Observable;.withLatestFrom:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func5;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48dd20.  v0:= new `rx.internal.operators.OperatorWithLatestFromMany`;
  #L48dd24.  v1:= 4I;
  #L48dd26.  v1:= new `rx.Observable`[v1];
  #L48dd2a.  v2:= 0I;
  #L48dd2c.  v1[v2]:= v4 @kind object;
  #L48dd30.  v4:= 1I;
  #L48dd32.  v1[v4]:= v5 @kind object;
  #L48dd36.  v4:= 2I;
  #L48dd38.  v1[v4]:= v6 @kind object;
  #L48dd3c.  v4:= 3I;
  #L48dd3e.  v1[v4]:= v7 @kind object;
  #L48dd42.  call temp:= `fromFunc`(v8) @signature `Lrx/functions/Functions;.fromFunc:(Lrx/functions/Func5;)Lrx/functions/FuncN;` @kind static;
  #L48dd48.  v4:= temp @kind object;
  #L48dd4a.  v5:= 0I;
  #L48dd4c.  call `<init>`(v0, v3, v1, v5, v4) @signature `Lrx/internal/operators/OperatorWithLatestFromMany;.<init>:(Lrx/Observable;[Lrx/Observable;Ljava/lang/Iterable;Lrx/functions/FuncN;)V` @kind direct;
  #L48dd52.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48dd58.  v4:= temp @kind object;
  #L48dd5a.  return v4 @kind object;
}
procedure `rx.Observable` `withLatestFrom`(`rx.Observable` v3 @kind this, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.functions.Func4` v7 @kind object) @signature `Lrx/Observable;.withLatestFrom:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func4;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48dd6c.  v0:= new `rx.internal.operators.OperatorWithLatestFromMany`;
  #L48dd70.  v1:= 3I;
  #L48dd72.  v1:= new `rx.Observable`[v1];
  #L48dd76.  v2:= 0I;
  #L48dd78.  v1[v2]:= v4 @kind object;
  #L48dd7c.  v4:= 1I;
  #L48dd7e.  v1[v4]:= v5 @kind object;
  #L48dd82.  v4:= 2I;
  #L48dd84.  v1[v4]:= v6 @kind object;
  #L48dd88.  call temp:= `fromFunc`(v7) @signature `Lrx/functions/Functions;.fromFunc:(Lrx/functions/Func4;)Lrx/functions/FuncN;` @kind static;
  #L48dd8e.  v4:= temp @kind object;
  #L48dd90.  v5:= 0I;
  #L48dd92.  call `<init>`(v0, v3, v1, v5, v4) @signature `Lrx/internal/operators/OperatorWithLatestFromMany;.<init>:(Lrx/Observable;[Lrx/Observable;Ljava/lang/Iterable;Lrx/functions/FuncN;)V` @kind direct;
  #L48dd98.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48dd9e.  v4:= temp @kind object;
  #L48dda0.  return v4 @kind object;
}
procedure `rx.Observable` `withLatestFrom`(`rx.Observable` v3 @kind this, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.functions.Func3` v6 @kind object) @signature `Lrx/Observable;.withLatestFrom:(Lrx/Observable;Lrx/Observable;Lrx/functions/Func3;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48ddb4.  v0:= new `rx.internal.operators.OperatorWithLatestFromMany`;
  #L48ddb8.  v1:= 2I;
  #L48ddba.  v1:= new `rx.Observable`[v1];
  #L48ddbe.  v2:= 0I;
  #L48ddc0.  v1[v2]:= v4 @kind object;
  #L48ddc4.  v4:= 1I;
  #L48ddc6.  v1[v4]:= v5 @kind object;
  #L48ddca.  call temp:= `fromFunc`(v6) @signature `Lrx/functions/Functions;.fromFunc:(Lrx/functions/Func3;)Lrx/functions/FuncN;` @kind static;
  #L48ddd0.  v4:= temp @kind object;
  #L48ddd2.  v5:= 0I;
  #L48ddd4.  call `<init>`(v0, v3, v1, v5, v4) @signature `Lrx/internal/operators/OperatorWithLatestFromMany;.<init>:(Lrx/Observable;[Lrx/Observable;Ljava/lang/Iterable;Lrx/functions/FuncN;)V` @kind direct;
  #L48ddda.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48dde0.  v4:= temp @kind object;
  #L48dde2.  return v4 @kind object;
}
procedure `rx.Observable` `withLatestFrom`(`rx.Observable` v1 @kind this, `rx.Observable` v2 @kind object, `rx.functions.Func2` v3 @kind object) @signature `Lrx/Observable;.withLatestFrom:(Lrx/Observable;Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48ddf4.  v0:= new `rx.internal.operators.OperatorWithLatestFrom`;
  #L48ddf8.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/operators/OperatorWithLatestFrom;.<init>:(Lrx/Observable;Lrx/functions/Func2;)V` @kind direct;
  #L48ddfe.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48de04.  v2:= temp @kind object;
  #L48de06.  return v2 @kind object;
}
procedure `rx.Observable` `withLatestFrom`(`rx.Observable` v2 @kind this, `rx.Observable`[] v3 @kind object, `rx.functions.FuncN` v4 @kind object) @signature `Lrx/Observable;.withLatestFrom:([Lrx/Observable;Lrx/functions/FuncN;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48de18.  v0:= new `rx.internal.operators.OperatorWithLatestFromMany`;
  #L48de1c.  v1:= 0I;
  #L48de1e.  call `<init>`(v0, v2, v3, v1, v4) @signature `Lrx/internal/operators/OperatorWithLatestFromMany;.<init>:(Lrx/Observable;[Lrx/Observable;Ljava/lang/Iterable;Lrx/functions/FuncN;)V` @kind direct;
  #L48de24.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48de2a.  v3:= temp @kind object;
  #L48de2c.  return v3 @kind object;
}
procedure `rx.Observable` `zipWith`(`rx.Observable` v1 @kind this, `java.lang.Iterable` v2 @kind object, `rx.functions.Func2` v3 @kind object) @signature `Lrx/Observable;.zipWith:(Ljava/lang/Iterable;Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e1bc.  v0:= new `rx.internal.operators.OperatorZipIterable`;
  #L48e1c0.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/operators/OperatorZipIterable;.<init>:(Ljava/lang/Iterable;Lrx/functions/Func2;)V` @kind direct;
  #L48e1c6.  call temp:= `lift`(v1, v0) @signature `Lrx/Observable;.lift:(Lrx/Observable$Operator;)Lrx/Observable;` @kind virtual;
  #L48e1cc.  v2:= temp @kind object;
  #L48e1ce.  return v2 @kind object;
}
procedure `rx.Observable` `zipWith`(`rx.Observable` v0 @kind this, `rx.Observable` v1 @kind object, `rx.functions.Func2` v2 @kind object) @signature `Lrx/Observable;.zipWith:(Lrx/Observable;Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48e1e0.  call temp:= `zip`(v0, v1, v2) @signature `Lrx/Observable;.zip:(Lrx/Observable;Lrx/Observable;Lrx/functions/Func2;)Lrx/Observable;` @kind static;
  #L48e1e6.  v1:= temp @kind object;
  #L48e1e8.  return v1 @kind object;
}
