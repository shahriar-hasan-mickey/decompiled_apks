record `rx.Completable$9` @kind class @AccessFlag FINAL extends `rx.Completable$OnSubscribe` @kind interface {
  `java.util.concurrent.Callable` `rx.Completable$9.val$callable` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Completable$9` v0 @kind this, `java.util.concurrent.Callable` v1 @kind object) @signature `Lrx/Completable$9;.<init>:(Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L488754.  v0.`rx.Completable$9.val$callable` @type ^`java.util.concurrent.Callable` := v1 @kind object;
  #L488758.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48875e.  return @kind void;
}
procedure `void` `call`(`rx.Completable$9` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/Completable$9;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L488770.  v1:= (`rx.CompletableSubscriber`) v1 @kind object;
  #L488774.  call `call`(v0, v1) @signature `Lrx/Completable$9;.call:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L48877a.  return @kind void;
}
procedure `void` `call`(`rx.Completable$9` v2 @kind this, `rx.CompletableSubscriber` v3 @kind object) @signature `Lrx/Completable$9;.call:(Lrx/CompletableSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48878c.  v0:= new `rx.subscriptions.BooleanSubscription`;
  #L488790.  call `<init>`(v0) @signature `Lrx/subscriptions/BooleanSubscription;.<init>:()V` @kind direct;
  #L488796.  call `onSubscribe`(v3, v0) @signature `Lrx/CompletableSubscriber;.onSubscribe:(Lrx/Subscription;)V` @kind interface;
  #L48879c.  v1:= v2.`rx.Completable$9.val$callable` @type ^`java.util.concurrent.Callable` @kind object;
  #L4887a0.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4887a6.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/subscriptions/BooleanSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L4887ac.  v0:= temp;
  #L4887ae.  if v0 != 0 then goto L4887b8;
  #L4887b2.  call `onCompleted`(v3) @signature `Lrx/CompletableSubscriber;.onCompleted:()V` @kind interface;
  #L4887b8.  return @kind void;
  #L4887ba.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4887bc.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/subscriptions/BooleanSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L4887c2.  v0:= temp;
  #L4887c4.  if v0 != 0 then goto L4887ce;
  #L4887c8.  call `onError`(v3, v1) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4887ce.  return @kind void;
  catch `java.lang.Throwable` @[L48879c..L4887a6] goto L4887ba;
}
