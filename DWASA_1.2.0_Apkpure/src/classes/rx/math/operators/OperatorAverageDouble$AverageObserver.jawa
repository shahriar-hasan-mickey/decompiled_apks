record `rx.math.operators.OperatorAverageDouble$AverageObserver` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.math.operators.OperatorAverageDouble$AverageObserver.child` @AccessFlag FINAL;
  `int` `rx.math.operators.OperatorAverageDouble$AverageObserver.count` @AccessFlag ;
  `double` `rx.math.operators.OperatorAverageDouble$AverageObserver.sum` @AccessFlag ;
  `rx.math.operators.OperatorAverageDouble` `rx.math.operators.OperatorAverageDouble$AverageObserver.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.math.operators.OperatorAverageDouble$AverageObserver` v0 @kind this, `rx.math.operators.OperatorAverageDouble` v1 @kind object, `rx.Subscriber` v2 @kind object) @signature `Lrx/math/operators/OperatorAverageDouble$AverageObserver;.<init>:(Lrx/math/operators/OperatorAverageDouble;Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4bb060.  v0.`rx.math.operators.OperatorAverageDouble$AverageObserver.this$0` @type ^`rx.math.operators.OperatorAverageDouble` := v1 @kind object;
  #L4bb064.  call `<init>`(v0, v2) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4bb06a.  v0.`rx.math.operators.OperatorAverageDouble$AverageObserver.child` @type ^`rx.Subscriber` := v2 @kind object;
  #L4bb06e.  return @kind void;
}
procedure `void` `onCompleted`(`rx.math.operators.OperatorAverageDouble$AverageObserver` v6 @kind this) @signature `Lrx/math/operators/OperatorAverageDouble$AverageObserver;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4bb080.  v0:= v6.`rx.math.operators.OperatorAverageDouble$AverageObserver.count` @type ^`int`;
  #L4bb084.  if v0 <= 0 then goto L4bb0c2;
  #L4bb088.  v1:= v6.`rx.math.operators.OperatorAverageDouble$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb08c.  v2:= v6.`rx.math.operators.OperatorAverageDouble$AverageObserver.sum` @type ^`double` @kind wide;
  #L4bb090.  v4:= (`double`) v0 @kind i2d;
  #L4bb092.  call temp:= `isNaN`(v4) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L4bb098.  v2:= v2 / v4 @kind double;
  #L4bb09a.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L4bb0a0.  v0:= temp @kind object;
  #L4bb0a2.  call `onNext`(v1, v0) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4bb0a8.  v0:= v6.`rx.math.operators.OperatorAverageDouble$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb0ac.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4bb0b2.  goto L4bb0da;
  #L4bb0b4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bb0b6.  v1:= v6.`rx.math.operators.OperatorAverageDouble$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb0ba.  call `onError`(v1, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bb0c0.  return @kind void;
  #L4bb0c2.  v0:= v6.`rx.math.operators.OperatorAverageDouble$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb0c6.  v1:= new `java.lang.IllegalArgumentException`;
  #L4bb0ca.  v2:= "Sequence contains no elements" @kind object;
  #L4bb0ce.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bb0d4.  call `onError`(v0, v1) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bb0da.  return @kind void;
  catch `java.lang.Throwable` @[L4bb088..L4bb090] goto L4bb0b4;
  catch `java.lang.Throwable` @[L4bb09a..L4bb0a8] goto L4bb0b4;
}
procedure `void` `onError`(`rx.math.operators.OperatorAverageDouble$AverageObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/math/operators/OperatorAverageDouble$AverageObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb100.  v0:= v1.`rx.math.operators.OperatorAverageDouble$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb104.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bb10a.  return @kind void;
}
procedure `void` `onNext`(`rx.math.operators.OperatorAverageDouble$AverageObserver` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lrx/math/operators/OperatorAverageDouble$AverageObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bb11c.  v0:= v4.`rx.math.operators.OperatorAverageDouble$AverageObserver.sum` @type ^`double` @kind wide;
  #L4bb120.  v2:= v4.`rx.math.operators.OperatorAverageDouble$AverageObserver.this$0` @type ^`rx.math.operators.OperatorAverageDouble` @kind object;
  #L4bb124.  v2:= v2.`rx.math.operators.OperatorAverageDouble.valueExtractor` @type ^`rx.functions.Func1` @kind object;
  #L4bb128.  call temp:= `call`(v2, v5) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bb12e.  v5:= temp @kind object;
  #L4bb130.  v5:= (`java.lang.Double`) v5 @kind object;
  #L4bb134.  call temp:= `doubleValue`(v5) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L4bb13a.  v2:= temp @kind wide;
  #L4bb13c.  v0:= v0 + v2 @kind double;
  #L4bb13e.  v4.`rx.math.operators.OperatorAverageDouble$AverageObserver.sum` @type ^`double` := v0 @kind wide;
  #L4bb142.  v5:= v4.`rx.math.operators.OperatorAverageDouble$AverageObserver.count` @type ^`int`;
  #L4bb146.  v5:= v5 + 1;
  #L4bb14a.  v4.`rx.math.operators.OperatorAverageDouble$AverageObserver.count` @type ^`int` := v5;
  #L4bb14e.  return @kind void;
}
