record `rx.math.operators.OperatorSum$2` @kind class @AccessFlag FINAL extends `rx.functions.Func2` @kind interface {
}
procedure `void` `<init>`(`rx.math.operators.OperatorSum$2` v0 @kind this) @signature `Lrx/math/operators/OperatorSum$2;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bba78.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bba7e.  return @kind void;
}
procedure `java.lang.Long` `call`(`rx.math.operators.OperatorSum$2` v2 @kind this, `java.lang.Long` v3 @kind object, `java.lang.Long` v4 @kind object) @signature `Lrx/math/operators/OperatorSum$2;.call:(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bba28.  call temp:= `longValue`(v3) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4bba2e.  v0:= temp @kind wide;
  #L4bba30.  call temp:= `longValue`(v4) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4bba36.  v3:= temp @kind wide;
  #L4bba38.  v0:= v0 + v3 @kind long;
  #L4bba3a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4bba40.  v3:= temp @kind object;
  #L4bba42.  return v3 @kind object;
}
procedure `java.lang.Object` `call`(`rx.math.operators.OperatorSum$2` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/math/operators/OperatorSum$2;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4bba54.  v1:= (`java.lang.Long`) v1 @kind object;
  #L4bba58.  v2:= (`java.lang.Long`) v2 @kind object;
  #L4bba5c.  call temp:= `call`(v0, v1, v2) @signature `Lrx/math/operators/OperatorSum$2;.call:(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;` @kind virtual;
  #L4bba62.  v1:= temp @kind object;
  #L4bba64.  return v1 @kind object;
}
