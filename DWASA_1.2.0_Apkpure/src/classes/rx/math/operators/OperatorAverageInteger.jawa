record `rx.math.operators.OperatorAverageInteger` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `rx.functions.Func1` `rx.math.operators.OperatorAverageInteger.valueExtractor` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.math.operators.OperatorAverageInteger` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/math/operators/OperatorAverageInteger;.<init>:(Lrx/functions/Func1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4bb430.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bb436.  v0.`rx.math.operators.OperatorAverageInteger.valueExtractor` @type ^`rx.functions.Func1` := v1 @kind object;
  #L4bb43a.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.math.operators.OperatorAverageInteger` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/math/operators/OperatorAverageInteger;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4bb3f4.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4bb3f8.  call temp:= `call`(v0, v1) @signature `Lrx/math/operators/OperatorAverageInteger;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4bb3fe.  v1:= temp @kind object;
  #L4bb400.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.math.operators.OperatorAverageInteger` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/math/operators/OperatorAverageInteger;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb414.  v0:= new `rx.math.operators.OperatorAverageInteger$AverageObserver`;
  #L4bb418.  call `<init>`(v0, v1, v2) @signature `Lrx/math/operators/OperatorAverageInteger$AverageObserver;.<init>:(Lrx/math/operators/OperatorAverageInteger;Lrx/Subscriber;)V` @kind direct;
  #L4bb41e.  return v0 @kind object;
}
