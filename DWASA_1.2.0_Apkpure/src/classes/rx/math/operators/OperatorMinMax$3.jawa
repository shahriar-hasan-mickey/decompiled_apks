record `rx.math.operators.OperatorMinMax$3` @kind class @AccessFlag FINAL extends `rx.functions.Func2` @kind interface {
  `long` `rx.math.operators.OperatorMinMax$3.val$flag` @AccessFlag FINAL_SYNTHETIC;
  `rx.functions.Func1` `rx.math.operators.OperatorMinMax$3.val$selector` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.math.operators.OperatorMinMax$3` v0 @kind this, `rx.functions.Func1` v1 @kind object, `long` v2 ) @signature `Lrx/math/operators/OperatorMinMax$3;.<init>:(Lrx/functions/Func1;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bb708.  v0.`rx.math.operators.OperatorMinMax$3.val$selector` @type ^`rx.functions.Func1` := v1 @kind object;
  #L4bb70c.  v0.`rx.math.operators.OperatorMinMax$3.val$flag` @type ^`long` := v2 @kind wide;
  #L4bb710.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bb716.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.math.operators.OperatorMinMax$3` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/math/operators/OperatorMinMax$3;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4bb664.  v1:= (`java.util.List`) v1 @kind object;
  #L4bb668.  call temp:= `call`(v0, v1, v2) @signature `Lrx/math/operators/OperatorMinMax$3;.call:(Ljava/util/List;Ljava/lang/Object;)Ljava/util/List;` @kind virtual;
  #L4bb66e.  v1:= temp @kind object;
  #L4bb670.  return v1 @kind object;
}
procedure `java.util.List` `call`(`rx.math.operators.OperatorMinMax$3` v5 @kind this, `java.util.List` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lrx/math/operators/OperatorMinMax$3;.call:(Ljava/util/List;Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4bb684.  call temp:= `isEmpty`(v6) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4bb68a.  v0:= temp;
  #L4bb68c.  if v0 == 0 then goto L4bb698;
  #L4bb690.  call temp:= `add`(v6, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4bb696.  goto L4bb6f4;
  #L4bb698.  v0:= v5.`rx.math.operators.OperatorMinMax$3.val$selector` @type ^`rx.functions.Func1` @kind object;
  #L4bb69c.  v1:= 0I;
  #L4bb69e.  call temp:= `get`(v6, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4bb6a4.  v1:= temp @kind object;
  #L4bb6a6.  call temp:= `call`(v0, v1) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bb6ac.  v0:= temp @kind object;
  #L4bb6ae.  v0:= (`java.lang.Comparable`) v0 @kind object;
  #L4bb6b2.  v1:= v5.`rx.math.operators.OperatorMinMax$3.val$selector` @type ^`rx.functions.Func1` @kind object;
  #L4bb6b6.  call temp:= `call`(v1, v7) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bb6bc.  v1:= temp @kind object;
  #L4bb6be.  call temp:= `compareTo`(v0, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L4bb6c4.  v0:= temp;
  #L4bb6c6.  if v0 != 0 then goto L4bb6d2;
  #L4bb6ca.  call temp:= `add`(v6, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4bb6d0.  goto L4bb6f4;
  #L4bb6d2.  v1:= v5.`rx.math.operators.OperatorMinMax$3.val$flag` @type ^`long` @kind wide;
  #L4bb6d6.  v3:= (`long`) v0 @kind i2l;
  #L4bb6d8.  v1:= v1 * v3 @kind long;
  #L4bb6dc.  v3:= 0L;
  #L4bb6e0.  v0:= lcmp(v1, v3);
  #L4bb6e4.  if v0 >= 0 then goto L4bb6f4;
  #L4bb6e8.  call `clear`(v6) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4bb6ee.  call temp:= `add`(v6, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4bb6f4.  return v6 @kind object;
}
