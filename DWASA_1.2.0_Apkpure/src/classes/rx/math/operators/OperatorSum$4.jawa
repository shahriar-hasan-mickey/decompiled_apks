record `rx.math.operators.OperatorSum$4` @kind class @AccessFlag FINAL extends `rx.functions.Func2` @kind interface {
}
procedure `void` `<init>`(`rx.math.operators.OperatorSum$4` v0 @kind this) @signature `Lrx/math/operators/OperatorSum$4;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bbb48.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bbb4e.  return @kind void;
}
procedure `java.lang.Double` `call`(`rx.math.operators.OperatorSum$4` v2 @kind this, `java.lang.Double` v3 @kind object, `java.lang.Double` v4 @kind object) @signature `Lrx/math/operators/OperatorSum$4;.call:(Ljava/lang/Double;Ljava/lang/Double;)Ljava/lang/Double;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bbaf8.  call temp:= `doubleValue`(v3) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L4bbafe.  v0:= temp @kind wide;
  #L4bbb00.  call temp:= `doubleValue`(v4) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L4bbb06.  v3:= temp @kind wide;
  #L4bbb08.  v0:= v0 + v3 @kind double;
  #L4bbb0a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L4bbb10.  v3:= temp @kind object;
  #L4bbb12.  return v3 @kind object;
}
procedure `java.lang.Object` `call`(`rx.math.operators.OperatorSum$4` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/math/operators/OperatorSum$4;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4bbb24.  v1:= (`java.lang.Double`) v1 @kind object;
  #L4bbb28.  v2:= (`java.lang.Double`) v2 @kind object;
  #L4bbb2c.  call temp:= `call`(v0, v1, v2) @signature `Lrx/math/operators/OperatorSum$4;.call:(Ljava/lang/Double;Ljava/lang/Double;)Ljava/lang/Double;` @kind virtual;
  #L4bbb32.  v1:= temp @kind object;
  #L4bbb34.  return v1 @kind object;
}
