record `rx.math.operators.OperatorAverageDouble` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `rx.functions.Func1` `rx.math.operators.OperatorAverageDouble.valueExtractor` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.math.operators.OperatorAverageDouble` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/math/operators/OperatorAverageDouble;.<init>:(Lrx/functions/Func1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4bb19c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bb1a2.  v0.`rx.math.operators.OperatorAverageDouble.valueExtractor` @type ^`rx.functions.Func1` := v1 @kind object;
  #L4bb1a6.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.math.operators.OperatorAverageDouble` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/math/operators/OperatorAverageDouble;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4bb160.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4bb164.  call temp:= `call`(v0, v1) @signature `Lrx/math/operators/OperatorAverageDouble;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4bb16a.  v1:= temp @kind object;
  #L4bb16c.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.math.operators.OperatorAverageDouble` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/math/operators/OperatorAverageDouble;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb180.  v0:= new `rx.math.operators.OperatorAverageDouble$AverageObserver`;
  #L4bb184.  call `<init>`(v0, v1, v2) @signature `Lrx/math/operators/OperatorAverageDouble$AverageObserver;.<init>:(Lrx/math/operators/OperatorAverageDouble;Lrx/Subscriber;)V` @kind direct;
  #L4bb18a.  return v0 @kind object;
}
