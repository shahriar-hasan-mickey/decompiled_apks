record `rx.math.operators.OperatorSum$3` @kind class @AccessFlag FINAL extends `rx.functions.Func2` @kind interface {
}
procedure `void` `<init>`(`rx.math.operators.OperatorSum$3` v0 @kind this) @signature `Lrx/math/operators/OperatorSum$3;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bbae0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bbae6.  return @kind void;
}
procedure `java.lang.Float` `call`(`rx.math.operators.OperatorSum$3` v0 @kind this, `java.lang.Float` v1 @kind object, `java.lang.Float` v2 @kind object) @signature `Lrx/math/operators/OperatorSum$3;.call:(Ljava/lang/Float;Ljava/lang/Float;)Ljava/lang/Float;` @AccessFlag PUBLIC {
    temp;

  #L4bba90.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Float;.floatValue:()F` @kind virtual;
  #L4bba96.  v1:= temp;
  #L4bba98.  call temp:= `floatValue`(v2) @signature `Ljava/lang/Float;.floatValue:()F` @kind virtual;
  #L4bba9e.  v2:= temp;
  #L4bbaa0.  v1:= v1 + v2 @kind float;
  #L4bbaa2.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L4bbaa8.  v1:= temp @kind object;
  #L4bbaaa.  return v1 @kind object;
}
procedure `java.lang.Object` `call`(`rx.math.operators.OperatorSum$3` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/math/operators/OperatorSum$3;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4bbabc.  v1:= (`java.lang.Float`) v1 @kind object;
  #L4bbac0.  v2:= (`java.lang.Float`) v2 @kind object;
  #L4bbac4.  call temp:= `call`(v0, v1, v2) @signature `Lrx/math/operators/OperatorSum$3;.call:(Ljava/lang/Float;Ljava/lang/Float;)Ljava/lang/Float;` @kind virtual;
  #L4bbaca.  v1:= temp @kind object;
  #L4bbacc.  return v1 @kind object;
}
