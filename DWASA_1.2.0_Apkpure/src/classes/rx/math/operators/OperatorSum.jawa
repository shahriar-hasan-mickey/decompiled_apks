record `rx.math.operators.OperatorSum` @kind class @AccessFlag PUBLIC_FINAL {
}
global `rx.functions.Func2` `@@rx.math.operators.OperatorSum.ACCUM_DOUBLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `rx.functions.Func2` `@@rx.math.operators.OperatorSum.ACCUM_FLOAT` @AccessFlag PRIVATE_STATIC_FINAL;
global `rx.functions.Func2` `@@rx.math.operators.OperatorSum.ACCUM_INT` @AccessFlag PRIVATE_STATIC_FINAL;
global `rx.functions.Func2` `@@rx.math.operators.OperatorSum.ACCUM_LONG` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/math/operators/OperatorSum;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4bbc88.  v0:= new `rx.math.operators.OperatorSum$1`;
  #L4bbc8c.  call `<init>`(v0) @signature `Lrx/math/operators/OperatorSum$1;.<init>:()V` @kind direct;
  #L4bbc92.  `@@rx.math.operators.OperatorSum.ACCUM_INT` @type ^`rx.functions.Func2` := v0 @kind object;
  #L4bbc96.  v0:= new `rx.math.operators.OperatorSum$2`;
  #L4bbc9a.  call `<init>`(v0) @signature `Lrx/math/operators/OperatorSum$2;.<init>:()V` @kind direct;
  #L4bbca0.  `@@rx.math.operators.OperatorSum.ACCUM_LONG` @type ^`rx.functions.Func2` := v0 @kind object;
  #L4bbca4.  v0:= new `rx.math.operators.OperatorSum$3`;
  #L4bbca8.  call `<init>`(v0) @signature `Lrx/math/operators/OperatorSum$3;.<init>:()V` @kind direct;
  #L4bbcae.  `@@rx.math.operators.OperatorSum.ACCUM_FLOAT` @type ^`rx.functions.Func2` := v0 @kind object;
  #L4bbcb2.  v0:= new `rx.math.operators.OperatorSum$4`;
  #L4bbcb6.  call `<init>`(v0) @signature `Lrx/math/operators/OperatorSum$4;.<init>:()V` @kind direct;
  #L4bbcbc.  `@@rx.math.operators.OperatorSum.ACCUM_DOUBLE` @type ^`rx.functions.Func2` := v0 @kind object;
  #L4bbcc0.  return @kind void;
}
procedure `void` `<init>`(`rx.math.operators.OperatorSum` v2 @kind this) @signature `Lrx/math/operators/OperatorSum;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4bbcd4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bbcda.  v0:= new `java.lang.IllegalStateException`;
  #L4bbcde.  v1:= "No instances!" @kind object;
  #L4bbce2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bbce8.  throw v0;
}
procedure `rx.Observable` `sumAtLeastOneDoubles`(`rx.Observable` v1 @kind object) @signature `Lrx/math/operators/OperatorSum;.sumAtLeastOneDoubles:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4bbb60.  v0:= `@@rx.math.operators.OperatorSum.ACCUM_DOUBLE` @type ^`rx.functions.Func2` @kind object;
  #L4bbb64.  call temp:= `reduce`(v1, v0) @signature `Lrx/Observable;.reduce:(Lrx/functions/Func2;)Lrx/Observable;` @kind virtual;
  #L4bbb6a.  v1:= temp @kind object;
  #L4bbb6c.  return v1 @kind object;
}
procedure `rx.Observable` `sumAtLeastOneFloats`(`rx.Observable` v1 @kind object) @signature `Lrx/math/operators/OperatorSum;.sumAtLeastOneFloats:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4bbb80.  v0:= `@@rx.math.operators.OperatorSum.ACCUM_FLOAT` @type ^`rx.functions.Func2` @kind object;
  #L4bbb84.  call temp:= `reduce`(v1, v0) @signature `Lrx/Observable;.reduce:(Lrx/functions/Func2;)Lrx/Observable;` @kind virtual;
  #L4bbb8a.  v1:= temp @kind object;
  #L4bbb8c.  return v1 @kind object;
}
procedure `rx.Observable` `sumAtLeastOneIntegers`(`rx.Observable` v1 @kind object) @signature `Lrx/math/operators/OperatorSum;.sumAtLeastOneIntegers:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4bbba0.  v0:= `@@rx.math.operators.OperatorSum.ACCUM_INT` @type ^`rx.functions.Func2` @kind object;
  #L4bbba4.  call temp:= `reduce`(v1, v0) @signature `Lrx/Observable;.reduce:(Lrx/functions/Func2;)Lrx/Observable;` @kind virtual;
  #L4bbbaa.  v1:= temp @kind object;
  #L4bbbac.  return v1 @kind object;
}
procedure `rx.Observable` `sumAtLeastOneLongs`(`rx.Observable` v1 @kind object) @signature `Lrx/math/operators/OperatorSum;.sumAtLeastOneLongs:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4bbbc0.  v0:= `@@rx.math.operators.OperatorSum.ACCUM_LONG` @type ^`rx.functions.Func2` @kind object;
  #L4bbbc4.  call temp:= `reduce`(v1, v0) @signature `Lrx/Observable;.reduce:(Lrx/functions/Func2;)Lrx/Observable;` @kind virtual;
  #L4bbbca.  v1:= temp @kind object;
  #L4bbbcc.  return v1 @kind object;
}
procedure `rx.Observable` `sumDoubles`(`rx.Observable` v2 @kind object) @signature `Lrx/math/operators/OperatorSum;.sumDoubles:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4bbbe0.  v0:= 0L;
  #L4bbbe4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L4bbbea.  v0:= temp @kind object;
  #L4bbbec.  v1:= `@@rx.math.operators.OperatorSum.ACCUM_DOUBLE` @type ^`rx.functions.Func2` @kind object;
  #L4bbbf0.  call temp:= `reduce`(v2, v0, v1) @signature `Lrx/Observable;.reduce:(Ljava/lang/Object;Lrx/functions/Func2;)Lrx/Observable;` @kind virtual;
  #L4bbbf6.  v2:= temp @kind object;
  #L4bbbf8.  return v2 @kind object;
}
procedure `rx.Observable` `sumFloats`(`rx.Observable` v2 @kind object) @signature `Lrx/math/operators/OperatorSum;.sumFloats:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4bbc0c.  v0:= 0I;
  #L4bbc0e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L4bbc14.  v0:= temp @kind object;
  #L4bbc16.  v1:= `@@rx.math.operators.OperatorSum.ACCUM_FLOAT` @type ^`rx.functions.Func2` @kind object;
  #L4bbc1a.  call temp:= `reduce`(v2, v0, v1) @signature `Lrx/Observable;.reduce:(Ljava/lang/Object;Lrx/functions/Func2;)Lrx/Observable;` @kind virtual;
  #L4bbc20.  v2:= temp @kind object;
  #L4bbc22.  return v2 @kind object;
}
procedure `rx.Observable` `sumIntegers`(`rx.Observable` v2 @kind object) @signature `Lrx/math/operators/OperatorSum;.sumIntegers:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4bbc34.  v0:= 0I;
  #L4bbc36.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4bbc3c.  v0:= temp @kind object;
  #L4bbc3e.  v1:= `@@rx.math.operators.OperatorSum.ACCUM_INT` @type ^`rx.functions.Func2` @kind object;
  #L4bbc42.  call temp:= `reduce`(v2, v0, v1) @signature `Lrx/Observable;.reduce:(Ljava/lang/Object;Lrx/functions/Func2;)Lrx/Observable;` @kind virtual;
  #L4bbc48.  v2:= temp @kind object;
  #L4bbc4a.  return v2 @kind object;
}
procedure `rx.Observable` `sumLongs`(`rx.Observable` v2 @kind object) @signature `Lrx/math/operators/OperatorSum;.sumLongs:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4bbc5c.  v0:= 0L;
  #L4bbc60.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4bbc66.  v0:= temp @kind object;
  #L4bbc68.  v1:= `@@rx.math.operators.OperatorSum.ACCUM_LONG` @type ^`rx.functions.Func2` @kind object;
  #L4bbc6c.  call temp:= `reduce`(v2, v0, v1) @signature `Lrx/Observable;.reduce:(Ljava/lang/Object;Lrx/functions/Func2;)Lrx/Observable;` @kind virtual;
  #L4bbc72.  v2:= temp @kind object;
  #L4bbc74.  return v2 @kind object;
}
