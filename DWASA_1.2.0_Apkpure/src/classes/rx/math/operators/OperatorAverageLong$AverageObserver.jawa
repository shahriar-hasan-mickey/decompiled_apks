record `rx.math.operators.OperatorAverageLong$AverageObserver` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.math.operators.OperatorAverageLong$AverageObserver.child` @AccessFlag FINAL;
  `int` `rx.math.operators.OperatorAverageLong$AverageObserver.count` @AccessFlag ;
  `long` `rx.math.operators.OperatorAverageLong$AverageObserver.sum` @AccessFlag ;
  `rx.math.operators.OperatorAverageLong` `rx.math.operators.OperatorAverageLong$AverageObserver.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.math.operators.OperatorAverageLong$AverageObserver` v0 @kind this, `rx.math.operators.OperatorAverageLong` v1 @kind object, `rx.Subscriber` v2 @kind object) @signature `Lrx/math/operators/OperatorAverageLong$AverageObserver;.<init>:(Lrx/math/operators/OperatorAverageLong;Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4bb44c.  v0.`rx.math.operators.OperatorAverageLong$AverageObserver.this$0` @type ^`rx.math.operators.OperatorAverageLong` := v1 @kind object;
  #L4bb450.  call `<init>`(v0, v2) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4bb456.  v0.`rx.math.operators.OperatorAverageLong$AverageObserver.child` @type ^`rx.Subscriber` := v2 @kind object;
  #L4bb45a.  return @kind void;
}
procedure `void` `onCompleted`(`rx.math.operators.OperatorAverageLong$AverageObserver` v6 @kind this) @signature `Lrx/math/operators/OperatorAverageLong$AverageObserver;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4bb46c.  v0:= v6.`rx.math.operators.OperatorAverageLong$AverageObserver.count` @type ^`int`;
  #L4bb470.  if v0 <= 0 then goto L4bb4a8;
  #L4bb474.  v1:= v6.`rx.math.operators.OperatorAverageLong$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb478.  v2:= v6.`rx.math.operators.OperatorAverageLong$AverageObserver.sum` @type ^`long` @kind wide;
  #L4bb47c.  v4:= (`long`) v0 @kind i2l;
  #L4bb47e.  v2:= v2 / v4 @kind long;
  #L4bb480.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4bb486.  v0:= temp @kind object;
  #L4bb488.  call `onNext`(v1, v0) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4bb48e.  v0:= v6.`rx.math.operators.OperatorAverageLong$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb492.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4bb498.  goto L4bb4c0;
  #L4bb49a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bb49c.  v1:= v6.`rx.math.operators.OperatorAverageLong$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb4a0.  call `onError`(v1, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bb4a6.  return @kind void;
  #L4bb4a8.  v0:= v6.`rx.math.operators.OperatorAverageLong$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb4ac.  v1:= new `java.lang.IllegalArgumentException`;
  #L4bb4b0.  v2:= "Sequence contains no elements" @kind object;
  #L4bb4b4.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bb4ba.  call `onError`(v0, v1) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bb4c0.  return @kind void;
  catch `java.lang.Throwable` @[L4bb474..L4bb48e] goto L4bb49a;
}
procedure `void` `onError`(`rx.math.operators.OperatorAverageLong$AverageObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/math/operators/OperatorAverageLong$AverageObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb4e0.  v0:= v1.`rx.math.operators.OperatorAverageLong$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb4e4.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bb4ea.  return @kind void;
}
procedure `void` `onNext`(`rx.math.operators.OperatorAverageLong$AverageObserver` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lrx/math/operators/OperatorAverageLong$AverageObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bb4fc.  v0:= v4.`rx.math.operators.OperatorAverageLong$AverageObserver.sum` @type ^`long` @kind wide;
  #L4bb500.  v2:= v4.`rx.math.operators.OperatorAverageLong$AverageObserver.this$0` @type ^`rx.math.operators.OperatorAverageLong` @kind object;
  #L4bb504.  v2:= v2.`rx.math.operators.OperatorAverageLong.valueExtractor` @type ^`rx.functions.Func1` @kind object;
  #L4bb508.  call temp:= `call`(v2, v5) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bb50e.  v5:= temp @kind object;
  #L4bb510.  v5:= (`java.lang.Long`) v5 @kind object;
  #L4bb514.  call temp:= `longValue`(v5) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4bb51a.  v2:= temp @kind wide;
  #L4bb51c.  v0:= v0 + v2 @kind long;
  #L4bb51e.  v4.`rx.math.operators.OperatorAverageLong$AverageObserver.sum` @type ^`long` := v0 @kind wide;
  #L4bb522.  v5:= v4.`rx.math.operators.OperatorAverageLong$AverageObserver.count` @type ^`int`;
  #L4bb526.  v5:= v5 + 1;
  #L4bb52a.  v4.`rx.math.operators.OperatorAverageLong$AverageObserver.count` @type ^`int` := v5;
  #L4bb52e.  return @kind void;
}
