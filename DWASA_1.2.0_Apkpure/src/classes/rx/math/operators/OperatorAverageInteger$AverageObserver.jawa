record `rx.math.operators.OperatorAverageInteger$AverageObserver` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.math.operators.OperatorAverageInteger$AverageObserver.child` @AccessFlag FINAL;
  `int` `rx.math.operators.OperatorAverageInteger$AverageObserver.count` @AccessFlag ;
  `int` `rx.math.operators.OperatorAverageInteger$AverageObserver.sum` @AccessFlag ;
  `rx.math.operators.OperatorAverageInteger` `rx.math.operators.OperatorAverageInteger$AverageObserver.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.math.operators.OperatorAverageInteger$AverageObserver` v0 @kind this, `rx.math.operators.OperatorAverageInteger` v1 @kind object, `rx.Subscriber` v2 @kind object) @signature `Lrx/math/operators/OperatorAverageInteger$AverageObserver;.<init>:(Lrx/math/operators/OperatorAverageInteger;Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4bb304.  v0.`rx.math.operators.OperatorAverageInteger$AverageObserver.this$0` @type ^`rx.math.operators.OperatorAverageInteger` := v1 @kind object;
  #L4bb308.  call `<init>`(v0, v2) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4bb30e.  v0.`rx.math.operators.OperatorAverageInteger$AverageObserver.child` @type ^`rx.Subscriber` := v2 @kind object;
  #L4bb312.  return @kind void;
}
procedure `void` `onCompleted`(`rx.math.operators.OperatorAverageInteger$AverageObserver` v3 @kind this) @signature `Lrx/math/operators/OperatorAverageInteger$AverageObserver;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4bb324.  v0:= v3.`rx.math.operators.OperatorAverageInteger$AverageObserver.count` @type ^`int`;
  #L4bb328.  if v0 <= 0 then goto L4bb35e;
  #L4bb32c.  v1:= v3.`rx.math.operators.OperatorAverageInteger$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb330.  v2:= v3.`rx.math.operators.OperatorAverageInteger$AverageObserver.sum` @type ^`int`;
  #L4bb334.  v2:= v2 / v0 @kind int;
  #L4bb336.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4bb33c.  v0:= temp @kind object;
  #L4bb33e.  call `onNext`(v1, v0) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4bb344.  v0:= v3.`rx.math.operators.OperatorAverageInteger$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb348.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4bb34e.  goto L4bb376;
  #L4bb350.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bb352.  v1:= v3.`rx.math.operators.OperatorAverageInteger$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb356.  call `onError`(v1, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bb35c.  return @kind void;
  #L4bb35e.  v0:= v3.`rx.math.operators.OperatorAverageInteger$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb362.  v1:= new `java.lang.IllegalArgumentException`;
  #L4bb366.  v2:= "Sequence contains no elements" @kind object;
  #L4bb36a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bb370.  call `onError`(v0, v1) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bb376.  return @kind void;
  catch `java.lang.Throwable` @[L4bb32c..L4bb344] goto L4bb350;
}
procedure `void` `onError`(`rx.math.operators.OperatorAverageInteger$AverageObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/math/operators/OperatorAverageInteger$AverageObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb394.  v0:= v1.`rx.math.operators.OperatorAverageInteger$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb398.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bb39e.  return @kind void;
}
procedure `void` `onNext`(`rx.math.operators.OperatorAverageInteger$AverageObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/math/operators/OperatorAverageInteger$AverageObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bb3b0.  v0:= v2.`rx.math.operators.OperatorAverageInteger$AverageObserver.sum` @type ^`int`;
  #L4bb3b4.  v1:= v2.`rx.math.operators.OperatorAverageInteger$AverageObserver.this$0` @type ^`rx.math.operators.OperatorAverageInteger` @kind object;
  #L4bb3b8.  v1:= v1.`rx.math.operators.OperatorAverageInteger.valueExtractor` @type ^`rx.functions.Func1` @kind object;
  #L4bb3bc.  call temp:= `call`(v1, v3) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bb3c2.  v3:= temp @kind object;
  #L4bb3c4.  v3:= (`java.lang.Integer`) v3 @kind object;
  #L4bb3c8.  call temp:= `intValue`(v3) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4bb3ce.  v3:= temp;
  #L4bb3d0.  v0:= v0 + v3 @kind int;
  #L4bb3d2.  v2.`rx.math.operators.OperatorAverageInteger$AverageObserver.sum` @type ^`int` := v0;
  #L4bb3d6.  v3:= v2.`rx.math.operators.OperatorAverageInteger$AverageObserver.count` @type ^`int`;
  #L4bb3da.  v3:= v3 + 1;
  #L4bb3de.  v2.`rx.math.operators.OperatorAverageInteger$AverageObserver.count` @type ^`int` := v3;
  #L4bb3e2.  return @kind void;
}
