record `rx.math.operators.OperatorMinMax$1` @kind class @AccessFlag FINAL extends `rx.functions.Func2` @kind interface {
  `long` `rx.math.operators.OperatorMinMax$1.val$flag` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.math.operators.OperatorMinMax$1` v0 @kind this, `long` v1 ) @signature `Lrx/math/operators/OperatorMinMax$1;.<init>:(J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bb5f0.  v0.`rx.math.operators.OperatorMinMax$1.val$flag` @type ^`long` := v1 @kind wide;
  #L4bb5f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bb5fa.  return @kind void;
}
procedure `java.lang.Comparable` `call`(`rx.math.operators.OperatorMinMax$1` v5 @kind this, `java.lang.Comparable` v6 @kind object, `java.lang.Comparable` v7 @kind object) @signature `Lrx/math/operators/OperatorMinMax$1;.call:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4bb598.  v0:= v5.`rx.math.operators.OperatorMinMax$1.val$flag` @type ^`long` @kind wide;
  #L4bb59c.  call temp:= `compareTo`(v6, v7) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L4bb5a2.  v2:= temp;
  #L4bb5a4.  v2:= (`long`) v2 @kind i2l;
  #L4bb5a6.  v0:= v0 * v2 @kind long;
  #L4bb5aa.  v2:= 0L;
  #L4bb5ae.  v4:= lcmp(v0, v2);
  #L4bb5b2.  if v4 <= 0 then goto L4bb5b8;
  #L4bb5b6.  return v6 @kind object;
  #L4bb5b8.  return v7 @kind object;
}
procedure `java.lang.Object` `call`(`rx.math.operators.OperatorMinMax$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/math/operators/OperatorMinMax$1;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4bb5cc.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L4bb5d0.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L4bb5d4.  call temp:= `call`(v0, v1, v2) @signature `Lrx/math/operators/OperatorMinMax$1;.call:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind virtual;
  #L4bb5da.  v1:= temp @kind object;
  #L4bb5dc.  return v1 @kind object;
}
