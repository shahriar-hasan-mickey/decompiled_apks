record `rx.math.operators.OperatorSum$1` @kind class @AccessFlag FINAL extends `rx.functions.Func2` @kind interface {
}
procedure `void` `<init>`(`rx.math.operators.OperatorSum$1` v0 @kind this) @signature `Lrx/math/operators/OperatorSum$1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bba10.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4bba16.  return @kind void;
}
procedure `java.lang.Integer` `call`(`rx.math.operators.OperatorSum$1` v0 @kind this, `java.lang.Integer` v1 @kind object, `java.lang.Integer` v2 @kind object) @signature `Lrx/math/operators/OperatorSum$1;.call:(Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Integer;` @AccessFlag PUBLIC {
    temp;

  #L4bb9c0.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4bb9c6.  v1:= temp;
  #L4bb9c8.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4bb9ce.  v2:= temp;
  #L4bb9d0.  v1:= v1 + v2 @kind int;
  #L4bb9d2.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4bb9d8.  v1:= temp @kind object;
  #L4bb9da.  return v1 @kind object;
}
procedure `java.lang.Object` `call`(`rx.math.operators.OperatorSum$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/math/operators/OperatorSum$1;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4bb9ec.  v1:= (`java.lang.Integer`) v1 @kind object;
  #L4bb9f0.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L4bb9f4.  call temp:= `call`(v0, v1, v2) @signature `Lrx/math/operators/OperatorSum$1;.call:(Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Integer;` @kind virtual;
  #L4bb9fa.  v1:= temp @kind object;
  #L4bb9fc.  return v1 @kind object;
}
