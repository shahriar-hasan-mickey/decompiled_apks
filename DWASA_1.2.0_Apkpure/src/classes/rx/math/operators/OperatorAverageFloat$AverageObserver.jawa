record `rx.math.operators.OperatorAverageFloat$AverageObserver` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.math.operators.OperatorAverageFloat$AverageObserver.child` @AccessFlag FINAL;
  `int` `rx.math.operators.OperatorAverageFloat$AverageObserver.count` @AccessFlag ;
  `float` `rx.math.operators.OperatorAverageFloat$AverageObserver.sum` @AccessFlag ;
  `rx.math.operators.OperatorAverageFloat` `rx.math.operators.OperatorAverageFloat$AverageObserver.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.math.operators.OperatorAverageFloat$AverageObserver` v0 @kind this, `rx.math.operators.OperatorAverageFloat` v1 @kind object, `rx.Subscriber` v2 @kind object) @signature `Lrx/math/operators/OperatorAverageFloat$AverageObserver;.<init>:(Lrx/math/operators/OperatorAverageFloat;Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4bb1b8.  v0.`rx.math.operators.OperatorAverageFloat$AverageObserver.this$0` @type ^`rx.math.operators.OperatorAverageFloat` := v1 @kind object;
  #L4bb1bc.  call `<init>`(v0, v2) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4bb1c2.  v0.`rx.math.operators.OperatorAverageFloat$AverageObserver.child` @type ^`rx.Subscriber` := v2 @kind object;
  #L4bb1c6.  return @kind void;
}
procedure `void` `onCompleted`(`rx.math.operators.OperatorAverageFloat$AverageObserver` v3 @kind this) @signature `Lrx/math/operators/OperatorAverageFloat$AverageObserver;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4bb1d8.  v0:= v3.`rx.math.operators.OperatorAverageFloat$AverageObserver.count` @type ^`int`;
  #L4bb1dc.  if v0 <= 0 then goto L4bb214;
  #L4bb1e0.  v1:= v3.`rx.math.operators.OperatorAverageFloat$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb1e4.  v2:= v3.`rx.math.operators.OperatorAverageFloat$AverageObserver.sum` @type ^`float`;
  #L4bb1e8.  v0:= (`float`) v0 @kind i2f;
  #L4bb1ea.  v2:= v2 / v0 @kind float;
  #L4bb1ec.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L4bb1f2.  v0:= temp @kind object;
  #L4bb1f4.  call `onNext`(v1, v0) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4bb1fa.  v0:= v3.`rx.math.operators.OperatorAverageFloat$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb1fe.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4bb204.  goto L4bb22c;
  #L4bb206.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bb208.  v1:= v3.`rx.math.operators.OperatorAverageFloat$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb20c.  call `onError`(v1, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bb212.  return @kind void;
  #L4bb214.  v0:= v3.`rx.math.operators.OperatorAverageFloat$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb218.  v1:= new `java.lang.IllegalArgumentException`;
  #L4bb21c.  v2:= "Sequence contains no elements" @kind object;
  #L4bb220.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4bb226.  call `onError`(v0, v1) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bb22c.  return @kind void;
  catch `java.lang.Throwable` @[L4bb1e0..L4bb1fa] goto L4bb206;
}
procedure `void` `onError`(`rx.math.operators.OperatorAverageFloat$AverageObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/math/operators/OperatorAverageFloat$AverageObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb24c.  v0:= v1.`rx.math.operators.OperatorAverageFloat$AverageObserver.child` @type ^`rx.Subscriber` @kind object;
  #L4bb250.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bb256.  return @kind void;
}
procedure `void` `onNext`(`rx.math.operators.OperatorAverageFloat$AverageObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/math/operators/OperatorAverageFloat$AverageObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bb268.  v0:= v2.`rx.math.operators.OperatorAverageFloat$AverageObserver.sum` @type ^`float`;
  #L4bb26c.  v1:= v2.`rx.math.operators.OperatorAverageFloat$AverageObserver.this$0` @type ^`rx.math.operators.OperatorAverageFloat` @kind object;
  #L4bb270.  v1:= v1.`rx.math.operators.OperatorAverageFloat.valueExtractor` @type ^`rx.functions.Func1` @kind object;
  #L4bb274.  call temp:= `call`(v1, v3) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bb27a.  v3:= temp @kind object;
  #L4bb27c.  v3:= (`java.lang.Float`) v3 @kind object;
  #L4bb280.  call temp:= `floatValue`(v3) @signature `Ljava/lang/Float;.floatValue:()F` @kind virtual;
  #L4bb286.  v3:= temp;
  #L4bb288.  v0:= v0 + v3 @kind float;
  #L4bb28a.  v2.`rx.math.operators.OperatorAverageFloat$AverageObserver.sum` @type ^`float` := v0;
  #L4bb28e.  v3:= v2.`rx.math.operators.OperatorAverageFloat$AverageObserver.count` @type ^`int`;
  #L4bb292.  v3:= v3 + 1;
  #L4bb296.  v2.`rx.math.operators.OperatorAverageFloat$AverageObserver.count` @type ^`int` := v3;
  #L4bb29a.  return @kind void;
}
