record `rx.Single$1` @kind class @AccessFlag FINAL extends `rx.Single$OnSubscribe` @kind interface {
  `java.lang.Throwable` `rx.Single$1.val$exception` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Single$1` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lrx/Single$1;.<init>:(Ljava/lang/Throwable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48edf8.  v0.`rx.Single$1.val$exception` @type ^`java.lang.Throwable` := v1 @kind object;
  #L48edfc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48ee02.  return @kind void;
}
procedure `void` `call`(`rx.Single$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/Single$1;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48ee14.  v1:= (`rx.SingleSubscriber`) v1 @kind object;
  #L48ee18.  call `call`(v0, v1) @signature `Lrx/Single$1;.call:(Lrx/SingleSubscriber;)V` @kind virtual;
  #L48ee1e.  return @kind void;
}
procedure `void` `call`(`rx.Single$1` v1 @kind this, `rx.SingleSubscriber` v2 @kind object) @signature `Lrx/Single$1;.call:(Lrx/SingleSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48ee30.  v0:= v1.`rx.Single$1.val$exception` @type ^`java.lang.Throwable` @kind object;
  #L48ee34.  call `onError`(v2, v0) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48ee3a.  return @kind void;
}
