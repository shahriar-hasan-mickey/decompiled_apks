record `rx.Single$2` @kind class @AccessFlag FINAL extends `rx.Single$OnSubscribe` @kind interface {
  `rx.Single` `rx.Single$2.val$source` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Single$2` v0 @kind this, `rx.Single` v1 @kind object) @signature `Lrx/Single$2;.<init>:(Lrx/Single;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48eec0.  v0.`rx.Single$2.val$source` @type ^`rx.Single` := v1 @kind object;
  #L48eec4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48eeca.  return @kind void;
}
procedure `void` `call`(`rx.Single$2` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/Single$2;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48eedc.  v1:= (`rx.SingleSubscriber`) v1 @kind object;
  #L48eee0.  call `call`(v0, v1) @signature `Lrx/Single$2;.call:(Lrx/SingleSubscriber;)V` @kind virtual;
  #L48eee6.  return @kind void;
}
procedure `void` `call`(`rx.Single$2` v1 @kind this, `rx.SingleSubscriber` v2 @kind object) @signature `Lrx/Single$2;.call:(Lrx/SingleSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48eef8.  v0:= new `rx.Single$2$1`;
  #L48eefc.  call `<init>`(v0, v1, v2) @signature `Lrx/Single$2$1;.<init>:(Lrx/Single$2;Lrx/SingleSubscriber;)V` @kind direct;
  #L48ef02.  call `add`(v2, v0) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L48ef08.  v2:= v1.`rx.Single$2.val$source` @type ^`rx.Single` @kind object;
  #L48ef0c.  call temp:= `subscribe`(v2, v0) @signature `Lrx/Single;.subscribe:(Lrx/SingleSubscriber;)Lrx/Subscription;` @kind virtual;
  #L48ef12.  return @kind void;
}
