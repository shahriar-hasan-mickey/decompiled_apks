record `rx.exceptions.AssemblyStackTraceException` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.RuntimeException` @kind class {
}
global `long` `@@rx.exceptions.AssemblyStackTraceException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.exceptions.AssemblyStackTraceException` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lrx/exceptions/AssemblyStackTraceException;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L490850.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L490856.  return @kind void;
}
procedure `rx.exceptions.AssemblyStackTraceException` `find`(`java.lang.Throwable` v3 @kind object) @signature `Lrx/exceptions/AssemblyStackTraceException;.find:(Ljava/lang/Throwable;)Lrx/exceptions/AssemblyStackTraceException;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4907fc.  v0:= new `java.util.HashSet`;
  #L490800.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L490806.  v1:= instanceof @variable v3 @type ^`rx.exceptions.AssemblyStackTraceException` @kind boolean;
  #L49080a.  if v1 == 0 then goto L490814;
  #L49080e.  v3:= (`rx.exceptions.AssemblyStackTraceException`) v3 @kind object;
  #L490812.  return v3 @kind object;
  #L490814.  v1:= 0I;
  #L490816.  if v3 == 0 then goto L49083c;
  #L49081a.  call temp:= `getCause`(v3) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L490820.  v2:= temp @kind object;
  #L490822.  if v2 != 0 then goto L490828;
  #L490826.  goto L49083c;
  #L490828.  call temp:= `getCause`(v3) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L49082e.  v3:= temp @kind object;
  #L490830.  call temp:= `add`(v0, v3) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L490836.  v2:= temp;
  #L490838.  if v2 != 0 then goto L490806;
  #L49083c.  return v1 @kind object;
}
procedure `void` `attachTo`(`rx.exceptions.AssemblyStackTraceException` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/exceptions/AssemblyStackTraceException;.attachTo:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L490868.  v0:= new `java.util.HashSet`;
  #L49086c.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L490872.  call temp:= `getCause`(v3) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L490878.  v1:= temp @kind object;
  #L49087a.  if v1 != 0 then goto L49089c;
  #L49087e.  call temp:= `initCause`(v3, v2) @signature `Ljava/lang/Throwable;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L490884.  goto L49089a;
  #L490886.  v0:= new `java.lang.RuntimeException`;
  #L49088a.  v1:= "Received an exception with a cause set to null, instead of being unset. To fix this, look down the chain of causes. The last exception had a cause explicitly set to null. It should be unset instead." @kind object;
  #L49088e.  call `<init>`(v0, v1, v3) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L490894.  call `onError`(v0) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49089a.  return @kind void;
  #L49089c.  call temp:= `getCause`(v3) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L4908a2.  v3:= temp @kind object;
  #L4908a4.  call temp:= `add`(v0, v3) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4908aa.  v1:= temp;
  #L4908ac.  if v1 != 0 then goto L490872;
  #L4908b0.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4908b6.  return @kind void;
  catch `java.lang.IllegalStateException` @[L49087e..L490884] goto L490886;
}
procedure `java.lang.Throwable` `fillInStackTrace`(`rx.exceptions.AssemblyStackTraceException` v0 @kind this) @signature `Lrx/exceptions/AssemblyStackTraceException;.fillInStackTrace:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;

  #L4907e4.  @monitorenter v0
  #L4907e6.  @monitorexit v0
  #L4907e8.  return v0 @kind object;
}
