record `rx.exceptions.OnErrorThrowable` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.RuntimeException` @kind class {
  `boolean` `rx.exceptions.OnErrorThrowable.hasValue` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `rx.exceptions.OnErrorThrowable.value` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@rx.exceptions.OnErrorThrowable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.exceptions.OnErrorThrowable` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lrx/exceptions/OnErrorThrowable;.<init>:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L491570.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L491576.  v1:= 0I;
  #L491578.  v0.`rx.exceptions.OnErrorThrowable.hasValue` @type ^`boolean` := v1 @kind boolean;
  #L49157c.  v1:= 0I;
  #L49157e.  v0.`rx.exceptions.OnErrorThrowable.value` @type ^`java.lang.Object` := v1 @kind object;
  #L491582.  return @kind void;
}
procedure `void` `<init>`(`rx.exceptions.OnErrorThrowable` v0 @kind this, `java.lang.Throwable` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/exceptions/OnErrorThrowable;.<init>:(Ljava/lang/Throwable;Ljava/lang/Object;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L491594.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L49159a.  v1:= 1I;
  #L49159c.  v0.`rx.exceptions.OnErrorThrowable.hasValue` @type ^`boolean` := v1 @kind boolean;
  #L4915a0.  v0.`rx.exceptions.OnErrorThrowable.value` @type ^`java.lang.Object` := v2 @kind object;
  #L4915a4.  return @kind void;
}
procedure `java.lang.Throwable` `addValueAsLastCause`(`java.lang.Throwable` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lrx/exceptions/OnErrorThrowable;.addValueAsLastCause:(Ljava/lang/Throwable;Ljava/lang/Object;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4914c8.  if v2 != 0 then goto L4914d6;
  #L4914cc.  v2:= new `java.lang.NullPointerException`;
  #L4914d0.  call `<init>`(v2) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L4914d6.  call temp:= `getFinalCause`(v2) @signature `Lrx/exceptions/Exceptions;.getFinalCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L4914dc.  v0:= temp @kind object;
  #L4914de.  v1:= instanceof @variable v0 @type ^`rx.exceptions.OnErrorThrowable$OnNextValue` @kind boolean;
  #L4914e2.  if v1 == 0 then goto L4914f8;
  #L4914e6.  v0:= (`rx.exceptions.OnErrorThrowable$OnNextValue`) v0 @kind object;
  #L4914ea.  call temp:= `getValue`(v0) @signature `Lrx/exceptions/OnErrorThrowable$OnNextValue;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L4914f0.  v0:= temp @kind object;
  #L4914f2.  if v0 != v3 then goto L4914f8;
  #L4914f6.  return v2 @kind object;
  #L4914f8.  v0:= new `rx.exceptions.OnErrorThrowable$OnNextValue`;
  #L4914fc.  call `<init>`(v0, v3) @signature `Lrx/exceptions/OnErrorThrowable$OnNextValue;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L491502.  call `addCause`(v2, v0) @signature `Lrx/exceptions/Exceptions;.addCause:(Ljava/lang/Throwable;Ljava/lang/Throwable;)V` @kind static;
  #L491508.  return v2 @kind object;
}
procedure `rx.exceptions.OnErrorThrowable` `from`(`java.lang.Throwable` v2 @kind object) @signature `Lrx/exceptions/OnErrorThrowable;.from:(Ljava/lang/Throwable;)Lrx/exceptions/OnErrorThrowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49151c.  if v2 != 0 then goto L49152a;
  #L491520.  v2:= new `java.lang.NullPointerException`;
  #L491524.  call `<init>`(v2) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L49152a.  call temp:= `getFinalCause`(v2) @signature `Lrx/exceptions/Exceptions;.getFinalCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L491530.  v0:= temp @kind object;
  #L491532.  v1:= instanceof @variable v0 @type ^`rx.exceptions.OnErrorThrowable$OnNextValue` @kind boolean;
  #L491536.  if v1 == 0 then goto L491552;
  #L49153a.  v1:= new `rx.exceptions.OnErrorThrowable`;
  #L49153e.  v0:= (`rx.exceptions.OnErrorThrowable$OnNextValue`) v0 @kind object;
  #L491542.  call temp:= `getValue`(v0) @signature `Lrx/exceptions/OnErrorThrowable$OnNextValue;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L491548.  v0:= temp @kind object;
  #L49154a.  call `<init>`(v1, v2, v0) @signature `Lrx/exceptions/OnErrorThrowable;.<init>:(Ljava/lang/Throwable;Ljava/lang/Object;)V` @kind direct;
  #L491550.  return v1 @kind object;
  #L491552.  v0:= new `rx.exceptions.OnErrorThrowable`;
  #L491556.  call `<init>`(v0, v2) @signature `Lrx/exceptions/OnErrorThrowable;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L49155c.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`rx.exceptions.OnErrorThrowable` v1 @kind this) @signature `Lrx/exceptions/OnErrorThrowable;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4914b0.  v0:= v1.`rx.exceptions.OnErrorThrowable.value` @type ^`java.lang.Object` @kind object;
  #L4914b4.  return v0 @kind object;
}
procedure `boolean` `isValueNull`(`rx.exceptions.OnErrorThrowable` v1 @kind this) @signature `Lrx/exceptions/OnErrorThrowable;.isValueNull:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L491498.  v0:= v1.`rx.exceptions.OnErrorThrowable.hasValue` @type ^`boolean` @kind boolean;
  #L49149c.  return v0;
}
