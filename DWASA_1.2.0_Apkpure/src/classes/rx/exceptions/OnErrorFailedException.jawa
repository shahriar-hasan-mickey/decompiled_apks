record `rx.exceptions.OnErrorFailedException` @kind class @AccessFlag PUBLIC extends `java.lang.RuntimeException` @kind class {
}
global `long` `@@rx.exceptions.OnErrorFailedException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.exceptions.OnErrorFailedException` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.Throwable` v2 @kind object) @signature `Lrx/exceptions/OnErrorFailedException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L491220.  if v2 == 0 then goto L491226;
  #L491224.  goto L491230;
  #L491226.  v2:= new `java.lang.NullPointerException`;
  #L49122a.  call `<init>`(v2) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L491230.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L491236.  return @kind void;
}
procedure `void` `<init>`(`rx.exceptions.OnErrorFailedException` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/exceptions/OnErrorFailedException;.<init>:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L491248.  if v2 == 0 then goto L491256;
  #L49124c.  call temp:= `getMessage`(v2) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L491252.  v0:= temp @kind object;
  #L491254.  goto L491258;
  #L491256.  v0:= 0I;
  #L491258.  if v2 == 0 then goto L49125e;
  #L49125c.  goto L491268;
  #L49125e.  v2:= new `java.lang.NullPointerException`;
  #L491262.  call `<init>`(v2) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L491268.  call `<init>`(v1, v0, v2) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L49126e.  return @kind void;
}
