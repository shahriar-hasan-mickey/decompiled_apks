record `rx.exceptions.CompositeException` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.RuntimeException` @kind class {
  `java.lang.Throwable` `rx.exceptions.CompositeException.cause` @AccessFlag PRIVATE;
  `java.util.List` `rx.exceptions.CompositeException.exceptions` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `rx.exceptions.CompositeException.message` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@rx.exceptions.CompositeException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.exceptions.CompositeException` v3 @kind this, `java.lang.String` v4 @kind object, `java.util.Collection` v5 @kind object) @signature `Lrx/exceptions/CompositeException;.<init>:(Ljava/lang/String;Ljava/util/Collection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L490b80.  call `<init>`(v3) @signature `Ljava/lang/RuntimeException;.<init>:()V` @kind direct;
  #L490b86.  v4:= new `java.util.LinkedHashSet`;
  #L490b8a.  call `<init>`(v4) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L490b90.  v0:= new `java.util.ArrayList`;
  #L490b94.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L490b9a.  if v5 == 0 then goto L490bf8;
  #L490b9e.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L490ba4.  v5:= temp @kind object;
  #L490ba6.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L490bac.  v1:= temp;
  #L490bae.  if v1 == 0 then goto L490c08;
  #L490bb2.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L490bb8.  v1:= temp @kind object;
  #L490bba.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L490bbe.  v2:= instanceof @variable v1 @type ^`rx.exceptions.CompositeException` @kind boolean;
  #L490bc2.  if v2 == 0 then goto L490bda;
  #L490bc6.  v1:= (`rx.exceptions.CompositeException`) v1 @kind object;
  #L490bca.  call temp:= `getExceptions`(v1) @signature `Lrx/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L490bd0.  v1:= temp @kind object;
  #L490bd2.  call temp:= `addAll`(v4, v1) @signature `Ljava/util/Set;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L490bd8.  goto L490ba6;
  #L490bda.  if v1 == 0 then goto L490be6;
  #L490bde.  call temp:= `add`(v4, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L490be4.  goto L490ba6;
  #L490be6.  v1:= new `java.lang.NullPointerException`;
  #L490bea.  call `<init>`(v1) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L490bf0.  call temp:= `add`(v4, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L490bf6.  goto L490ba6;
  #L490bf8.  v5:= new `java.lang.NullPointerException`;
  #L490bfc.  call `<init>`(v5) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L490c02.  call temp:= `add`(v4, v5) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L490c08.  call temp:= `addAll`(v0, v4) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L490c0e.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L490c14.  v4:= temp @kind object;
  #L490c16.  v3.`rx.exceptions.CompositeException.exceptions` @type ^`java.util.List` := v4 @kind object;
  #L490c1a.  v4:= new `java.lang.StringBuilder`;
  #L490c1e.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L490c24.  v5:= v3.`rx.exceptions.CompositeException.exceptions` @type ^`java.util.List` @kind object;
  #L490c28.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L490c2e.  v5:= temp;
  #L490c30.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L490c36.  v5:= " exceptions occurred. " @kind object;
  #L490c3a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490c40.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L490c46.  v4:= temp @kind object;
  #L490c48.  v3.`rx.exceptions.CompositeException.message` @type ^`java.lang.String` := v4 @kind object;
  #L490c4c.  return @kind void;
}
procedure `void` `<init>`(`rx.exceptions.CompositeException` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lrx/exceptions/CompositeException;.<init>:(Ljava/util/Collection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L490d30.  v0:= 0I;
  #L490d32.  call `<init>`(v1, v0, v2) @signature `Lrx/exceptions/CompositeException;.<init>:(Ljava/lang/String;Ljava/util/Collection;)V` @kind direct;
  #L490d38.  return @kind void;
}
procedure `void` `<init>`(`rx.exceptions.CompositeException` v6 @kind this, `java.lang.Throwable`[] v7 @kind object) @signature `Lrx/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L490c60.  call `<init>`(v6) @signature `Ljava/lang/RuntimeException;.<init>:()V` @kind direct;
  #L490c66.  v0:= new `java.util.LinkedHashSet`;
  #L490c6a.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L490c70.  v1:= new `java.util.ArrayList`;
  #L490c74.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L490c7a.  if v7 == 0 then goto L490cc8;
  #L490c7e.  v2:= length @variable v7;
  #L490c80.  v3:= 0I;
  #L490c82.  if v3 >= v2 then goto L490cd8;
  #L490c86.  v4:= v7[v3] @kind object;
  #L490c8a.  v5:= instanceof @variable v4 @type ^`rx.exceptions.CompositeException` @kind boolean;
  #L490c8e.  if v5 == 0 then goto L490ca6;
  #L490c92.  v4:= (`rx.exceptions.CompositeException`) v4 @kind object;
  #L490c96.  call temp:= `getExceptions`(v4) @signature `Lrx/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L490c9c.  v4:= temp @kind object;
  #L490c9e.  call temp:= `addAll`(v0, v4) @signature `Ljava/util/Set;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L490ca4.  goto L490cc2;
  #L490ca6.  if v4 == 0 then goto L490cb2;
  #L490caa.  call temp:= `add`(v0, v4) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L490cb0.  goto L490cc2;
  #L490cb2.  v4:= new `java.lang.NullPointerException`;
  #L490cb6.  call `<init>`(v4) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L490cbc.  call temp:= `add`(v0, v4) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L490cc2.  v3:= v3 + 1;
  #L490cc6.  goto L490c82;
  #L490cc8.  v7:= new `java.lang.NullPointerException`;
  #L490ccc.  call `<init>`(v7) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L490cd2.  call temp:= `add`(v0, v7) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L490cd8.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L490cde.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L490ce4.  v7:= temp @kind object;
  #L490ce6.  v6.`rx.exceptions.CompositeException.exceptions` @type ^`java.util.List` := v7 @kind object;
  #L490cea.  v7:= new `java.lang.StringBuilder`;
  #L490cee.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L490cf4.  v0:= v6.`rx.exceptions.CompositeException.exceptions` @type ^`java.util.List` @kind object;
  #L490cf8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L490cfe.  v0:= temp;
  #L490d00.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L490d06.  v0:= " exceptions occurred. " @kind object;
  #L490d0a.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490d10.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L490d16.  v7:= temp @kind object;
  #L490d18.  v6.`rx.exceptions.CompositeException.message` @type ^`java.lang.String` := v7 @kind object;
  #L490d1c.  return @kind void;
}
procedure `void` `appendStackTrace`(`rx.exceptions.CompositeException` v5 @kind this, `java.lang.StringBuilder` v6 @kind object, `java.lang.Throwable` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lrx/exceptions/CompositeException;.appendStackTrace:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L490d4c.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490d52.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490d58.  v8:= 10I;
  #L490d5c.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L490d62.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L490d68.  v0:= temp @kind object;
  #L490d6a.  v1:= length @variable v0;
  #L490d6c.  v2:= 0I;
  #L490d6e.  if v2 >= v1 then goto L490d92;
  #L490d72.  v3:= v0[v2] @kind object;
  #L490d76.  v4:= "\t\tat " @kind object;
  #L490d7a.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490d80.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490d86.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L490d8c.  v2:= v2 + 1;
  #L490d90.  goto L490d6e;
  #L490d92.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L490d98.  v8:= temp @kind object;
  #L490d9a.  if v8 == 0 then goto L490dba;
  #L490d9e.  v8:= "\tCaused by: " @kind object;
  #L490da2.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490da8.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L490dae.  v7:= temp @kind object;
  #L490db0.  v8:= "" @kind object;
  #L490db4.  call `appendStackTrace`(v5, v6, v7, v8) @signature `Lrx/exceptions/CompositeException;.appendStackTrace:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L490dba.  return @kind void;
}
procedure `java.util.List` `getListOfCauses`(`rx.exceptions.CompositeException` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/exceptions/CompositeException;.getListOfCauses:(Ljava/lang/Throwable;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L490b30.  v0:= new `java.util.ArrayList`;
  #L490b34.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L490b3a.  call temp:= `getCause`(v3) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L490b40.  v1:= temp @kind object;
  #L490b42.  if v1 == 0 then goto L490b6e;
  #L490b46.  if v1 != v3 then goto L490b4c;
  #L490b4a.  goto L490b6e;
  #L490b4c.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L490b52.  call temp:= `getCause`(v1) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L490b58.  v3:= temp @kind object;
  #L490b5a.  if v3 == 0 then goto L490b6e;
  #L490b5e.  if v3 != v1 then goto L490b64;
  #L490b62.  goto L490b6e;
  #L490b64.  call temp:= `getCause`(v1) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L490b6a.  v1:= temp @kind object;
  #L490b6c.  goto L490b4c;
  #L490b6e.  return v0 @kind object;
}
procedure `java.lang.Throwable` `getRootCause`(`rx.exceptions.CompositeException` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/exceptions/CompositeException;.getRootCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L490ad4.  call temp:= `getCause`(v2) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L490ada.  v0:= temp @kind object;
  #L490adc.  if v0 == 0 then goto L490b04;
  #L490ae0.  if v0 != v2 then goto L490ae6;
  #L490ae4.  goto L490b04;
  #L490ae6.  call temp:= `getCause`(v0) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L490aec.  v2:= temp @kind object;
  #L490aee.  if v2 == 0 then goto L490b02;
  #L490af2.  if v2 != v0 then goto L490af8;
  #L490af6.  goto L490b02;
  #L490af8.  call temp:= `getCause`(v0) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L490afe.  v0:= temp @kind object;
  #L490b00.  goto L490ae6;
  #L490b02.  return v0 @kind object;
  #L490b04.  return v2 @kind object;
}
procedure `void` `printStackTrace`(`rx.exceptions.CompositeException` v7 @kind this, `rx.exceptions.CompositeException$PrintStreamOrWriter` v8 @kind object) @signature `Lrx/exceptions/CompositeException;.printStackTrace:(Lrx/exceptions/CompositeException$PrintStreamOrWriter;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L490e30.  v0:= new `java.lang.StringBuilder`;
  #L490e34.  v1:= 128I;
  #L490e38.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L490e3e.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490e44.  v1:= 10I;
  #L490e48.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L490e4e.  call temp:= `getStackTrace`(v7) @signature `Lrx/exceptions/CompositeException;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L490e54.  v2:= temp @kind object;
  #L490e56.  v3:= length @variable v2;
  #L490e58.  v4:= 0I;
  #L490e5a.  if v4 >= v3 then goto L490e7e;
  #L490e5e.  v5:= v2[v4] @kind object;
  #L490e62.  v6:= "\tat " @kind object;
  #L490e66.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490e6c.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490e72.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L490e78.  v4:= v4 + 1;
  #L490e7c.  goto L490e5a;
  #L490e7e.  v1:= v7.`rx.exceptions.CompositeException.exceptions` @type ^`java.util.List` @kind object;
  #L490e82.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L490e88.  v1:= temp @kind object;
  #L490e8a.  v2:= 1I;
  #L490e8c.  v3:= 1I;
  #L490e8e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L490e94.  v4:= temp;
  #L490e96.  if v4 == 0 then goto L490ece;
  #L490e9a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L490ea0.  v4:= temp @kind object;
  #L490ea2.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L490ea6.  v5:= "  ComposedException " @kind object;
  #L490eaa.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490eb0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L490eb6.  v5:= " :\n" @kind object;
  #L490eba.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490ec0.  v5:= "\t" @kind object;
  #L490ec4.  call `appendStackTrace`(v7, v0, v4, v5) @signature `Lrx/exceptions/CompositeException;.appendStackTrace:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L490eca.  v3:= v3 + v2 @kind int;
  #L490ecc.  goto L490e8e;
  #L490ece.  call temp:= `lock`(v8) @signature `Lrx/exceptions/CompositeException$PrintStreamOrWriter;.lock:()Ljava/lang/Object;` @kind virtual;
  #L490ed4.  v1:= temp @kind object;
  #L490ed6.  @monitorenter v1
  #L490ed8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L490ede.  v0:= temp @kind object;
  #L490ee0.  call `println`(v8, v0) @signature `Lrx/exceptions/CompositeException$PrintStreamOrWriter;.println:(Ljava/lang/Object;)V` @kind virtual;
  #L490ee6.  @monitorexit v1
  #L490ee8.  return @kind void;
  #L490eea.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L490eec.  @monitorexit v1
  #L490eee.  goto L490ef2;
  #L490ef0.  throw v8;
  #L490ef2.  goto L490ef0;
  catch `java.lang.Throwable` @[L490ed8..L490eee] goto L490eea;
}
procedure `java.lang.Throwable` `getCause`(`rx.exceptions.CompositeException` v8 @kind this) @signature `Lrx/exceptions/CompositeException;.getCause:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4909d8.  @monitorenter v8
  #L4909da.  v0:= v8.`rx.exceptions.CompositeException.cause` @type ^`java.lang.Throwable` @kind object;
  #L4909de.  if v0 != 0 then goto L490a90;
  #L4909e2.  v0:= new `rx.exceptions.CompositeException$CompositeExceptionCausalChain`;
  #L4909e6.  call `<init>`(v0) @signature `Lrx/exceptions/CompositeException$CompositeExceptionCausalChain;.<init>:()V` @kind direct;
  #L4909ec.  v1:= new `java.util.HashSet`;
  #L4909f0.  call `<init>`(v1) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L4909f6.  v2:= v8.`rx.exceptions.CompositeException.exceptions` @type ^`java.util.List` @kind object;
  #L4909fa.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L490a00.  v2:= temp @kind object;
  #L490a02.  v3:= v0 @kind object;
  #L490a04.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L490a0a.  v4:= temp;
  #L490a0c.  if v4 == 0 then goto L490a8c;
  #L490a10.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L490a16.  v4:= temp @kind object;
  #L490a18.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L490a1c.  call temp:= `contains`(v1, v4) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L490a22.  v5:= temp;
  #L490a24.  if v5 == 0 then goto L490a2a;
  #L490a28.  goto L490a04;
  #L490a2a.  call temp:= `add`(v1, v4) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L490a30.  call temp:= `getListOfCauses`(v8, v4) @signature `Lrx/exceptions/CompositeException;.getListOfCauses:(Ljava/lang/Throwable;)Ljava/util/List;` @kind direct;
  #L490a36.  v5:= temp @kind object;
  #L490a38.  call temp:= `iterator`(v5) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L490a3e.  v5:= temp @kind object;
  #L490a40.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L490a46.  v6:= temp;
  #L490a48.  if v6 == 0 then goto L490a7c;
  #L490a4c.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L490a52.  v6:= temp @kind object;
  #L490a54.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L490a58.  call temp:= `contains`(v1, v6) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L490a5e.  v7:= temp;
  #L490a60.  if v7 == 0 then goto L490a74;
  #L490a64.  v4:= new `java.lang.RuntimeException`;
  #L490a68.  v6:= "Duplicate found in causal chain so cropping to prevent loop ..." @kind object;
  #L490a6c.  call `<init>`(v4, v6) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L490a72.  goto L490a40;
  #L490a74.  call temp:= `add`(v1, v6) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L490a7a.  goto L490a40;
  #L490a7c.  call temp:= `initCause`(v3, v4) @signature `Ljava/lang/Throwable;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L490a82.  call temp:= `getRootCause`(v8, v3) @signature `Lrx/exceptions/CompositeException;.getRootCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind direct;
  #L490a88.  v3:= temp @kind object;
  #L490a8a.  goto L490a04;
  #L490a8c.  v8.`rx.exceptions.CompositeException.cause` @type ^`java.lang.Throwable` := v0 @kind object;
  #L490a90.  v0:= v8.`rx.exceptions.CompositeException.cause` @type ^`java.lang.Throwable` @kind object;
  #L490a94.  @monitorexit v8
  #L490a96.  return v0 @kind object;
  #L490a98.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L490a9a.  @monitorexit v8
  #L490a9c.  goto L490aa0;
  #L490a9e.  throw v0;
  #L490aa0.  goto L490a9e;
  catch `java.lang.Throwable` @[L4909da..L490a7a] goto L490a98;
  catch `java.lang.Throwable` @[L490a7c..L490a82] goto L490a82;
  catch `java.lang.Throwable` @[L490a82..L490a94] goto L490a98;
}
procedure `java.util.List` `getExceptions`(`rx.exceptions.CompositeException` v1 @kind this) @signature `Lrx/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L490b18.  v0:= v1.`rx.exceptions.CompositeException.exceptions` @type ^`java.util.List` @kind object;
  #L490b1c.  return v0 @kind object;
}
procedure `java.lang.String` `getMessage`(`rx.exceptions.CompositeException` v1 @kind this) @signature `Lrx/exceptions/CompositeException;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4909c0.  v0:= v1.`rx.exceptions.CompositeException.message` @type ^`java.lang.String` @kind object;
  #L4909c4.  return v0 @kind object;
}
procedure `void` `printStackTrace`(`rx.exceptions.CompositeException` v1 @kind this) @signature `Lrx/exceptions/CompositeException;.printStackTrace:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L490dcc.  v0:= `@@java.lang.System.err` @type ^`java.io.PrintStream` @kind object;
  #L490dd0.  call `printStackTrace`(v1, v0) @signature `Lrx/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @kind virtual;
  #L490dd6.  return @kind void;
}
procedure `void` `printStackTrace`(`rx.exceptions.CompositeException` v1 @kind this, `java.io.PrintStream` v2 @kind object) @signature `Lrx/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L490de8.  v0:= new `rx.exceptions.CompositeException$WrappedPrintStream`;
  #L490dec.  call `<init>`(v0, v2) @signature `Lrx/exceptions/CompositeException$WrappedPrintStream;.<init>:(Ljava/io/PrintStream;)V` @kind direct;
  #L490df2.  call `printStackTrace`(v1, v0) @signature `Lrx/exceptions/CompositeException;.printStackTrace:(Lrx/exceptions/CompositeException$PrintStreamOrWriter;)V` @kind direct;
  #L490df8.  return @kind void;
}
procedure `void` `printStackTrace`(`rx.exceptions.CompositeException` v1 @kind this, `java.io.PrintWriter` v2 @kind object) @signature `Lrx/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintWriter;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L490e0c.  v0:= new `rx.exceptions.CompositeException$WrappedPrintWriter`;
  #L490e10.  call `<init>`(v0, v2) @signature `Lrx/exceptions/CompositeException$WrappedPrintWriter;.<init>:(Ljava/io/PrintWriter;)V` @kind direct;
  #L490e16.  call `printStackTrace`(v1, v0) @signature `Lrx/exceptions/CompositeException;.printStackTrace:(Lrx/exceptions/CompositeException$PrintStreamOrWriter;)V` @kind direct;
  #L490e1c.  return @kind void;
}
