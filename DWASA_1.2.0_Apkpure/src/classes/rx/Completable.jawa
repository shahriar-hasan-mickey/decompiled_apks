record `rx.Completable` @kind class @AccessFlag PUBLIC {
  `rx.Completable$OnSubscribe` `rx.Completable.onSubscribe` @AccessFlag PRIVATE_FINAL;
}
global `rx.Completable` `@@rx.Completable.COMPLETE` @AccessFlag STATIC_FINAL;
global `rx.Completable` `@@rx.Completable.NEVER` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/Completable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L48988c.  v0:= new `rx.Completable`;
  #L489890.  v1:= new `rx.Completable$1`;
  #L489894.  call `<init>`(v1) @signature `Lrx/Completable$1;.<init>:()V` @kind direct;
  #L48989a.  v2:= 0I;
  #L48989c.  call `<init>`(v0, v1, v2) @signature `Lrx/Completable;.<init>:(Lrx/Completable$OnSubscribe;Z)V` @kind direct;
  #L4898a2.  `@@rx.Completable.COMPLETE` @type ^`rx.Completable` := v0 @kind object;
  #L4898a6.  v0:= new `rx.Completable`;
  #L4898aa.  v1:= new `rx.Completable$2`;
  #L4898ae.  call `<init>`(v1) @signature `Lrx/Completable$2;.<init>:()V` @kind direct;
  #L4898b4.  call `<init>`(v0, v1, v2) @signature `Lrx/Completable;.<init>:(Lrx/Completable$OnSubscribe;Z)V` @kind direct;
  #L4898ba.  `@@rx.Completable.NEVER` @type ^`rx.Completable` := v0 @kind object;
  #L4898be.  return @kind void;
}
procedure `void` `<init>`(`rx.Completable` v0 @kind this, `rx.Completable$OnSubscribe` v1 @kind object) @signature `Lrx/Completable;.<init>:(Lrx/Completable$OnSubscribe;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L4898d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4898d6.  call temp:= `onCreate`(v1) @signature `Lrx/plugins/RxJavaHooks;.onCreate:(Lrx/Completable$OnSubscribe;)Lrx/Completable$OnSubscribe;` @kind static;
  #L4898dc.  v1:= temp @kind object;
  #L4898de.  v0.`rx.Completable.onSubscribe` @type ^`rx.Completable$OnSubscribe` := v1 @kind object;
  #L4898e2.  return @kind void;
}
procedure `void` `<init>`(`rx.Completable` v0 @kind this, `rx.Completable$OnSubscribe` v1 @kind object, `boolean` v2 ) @signature `Lrx/Completable;.<init>:(Lrx/Completable$OnSubscribe;Z)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L4898f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4898fa.  if v2 == 0 then goto L489906;
  #L4898fe.  call temp:= `onCreate`(v1) @signature `Lrx/plugins/RxJavaHooks;.onCreate:(Lrx/Completable$OnSubscribe;)Lrx/Completable$OnSubscribe;` @kind static;
  #L489904.  v1:= temp @kind object;
  #L489906.  v0.`rx.Completable.onSubscribe` @type ^`rx.Completable$OnSubscribe` := v1 @kind object;
  #L48990a.  return @kind void;
}
procedure `rx.Completable` `amb`(`java.lang.Iterable` v1 @kind object) @signature `Lrx/Completable;.amb:(Ljava/lang/Iterable;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4889f8.  call temp:= `requireNonNull`(v1) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4889fe.  v0:= new `rx.Completable$4`;
  #L488a02.  call `<init>`(v0, v1) @signature `Lrx/Completable$4;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L488a08.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L488a0e.  v1:= temp @kind object;
  #L488a10.  return v1 @kind object;
}
procedure `rx.Completable` `amb`(`rx.Completable`[] v2 @kind object) @signature `Lrx/Completable;.amb:([Lrx/Completable;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L488a24.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488a2a.  v0:= length @variable v2;
  #L488a2c.  if v0 != 0 then goto L488a3a;
  #L488a30.  call temp:= `complete`() @signature `Lrx/Completable;.complete:()Lrx/Completable;` @kind static;
  #L488a36.  v2:= temp @kind object;
  #L488a38.  return v2 @kind object;
  #L488a3a.  v0:= length @variable v2;
  #L488a3c.  v1:= 1I;
  #L488a3e.  if v0 != v1 then goto L488a4a;
  #L488a42.  v0:= 0I;
  #L488a44.  v2:= v2[v0] @kind object;
  #L488a48.  return v2 @kind object;
  #L488a4a.  v0:= new `rx.Completable$3`;
  #L488a4e.  call `<init>`(v0, v2) @signature `Lrx/Completable$3;.<init>:([Lrx/Completable;)V` @kind direct;
  #L488a54.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L488a5a.  v2:= temp @kind object;
  #L488a5c.  return v2 @kind object;
}
procedure `rx.Completable` `complete`() @signature `Lrx/Completable;.complete:()Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L488ac0.  v0:= `@@rx.Completable.COMPLETE` @type ^`rx.Completable` @kind object;
  #L488ac4.  v0:= v0.`rx.Completable.onSubscribe` @type ^`rx.Completable$OnSubscribe` @kind object;
  #L488ac8.  call temp:= `onCreate`(v0) @signature `Lrx/plugins/RxJavaHooks;.onCreate:(Lrx/Completable$OnSubscribe;)Lrx/Completable$OnSubscribe;` @kind static;
  #L488ace.  v0:= temp @kind object;
  #L488ad0.  v1:= `@@rx.Completable.COMPLETE` @type ^`rx.Completable` @kind object;
  #L488ad4.  v2:= v1.`rx.Completable.onSubscribe` @type ^`rx.Completable$OnSubscribe` @kind object;
  #L488ad8.  if v0 != v2 then goto L488ade;
  #L488adc.  return v1 @kind object;
  #L488ade.  v1:= new `rx.Completable`;
  #L488ae2.  v2:= 0I;
  #L488ae4.  call `<init>`(v1, v0, v2) @signature `Lrx/Completable;.<init>:(Lrx/Completable$OnSubscribe;Z)V` @kind direct;
  #L488aea.  return v1 @kind object;
}
procedure `rx.Completable` `concat`(`java.lang.Iterable` v1 @kind object) @signature `Lrx/Completable;.concat:(Ljava/lang/Iterable;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L488b1c.  call temp:= `requireNonNull`(v1) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488b22.  v0:= new `rx.internal.operators.CompletableOnSubscribeConcatIterable`;
  #L488b26.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/CompletableOnSubscribeConcatIterable;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L488b2c.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L488b32.  v1:= temp @kind object;
  #L488b34.  return v1 @kind object;
}
procedure `rx.Completable` `concat`(`rx.Observable` v1 @kind object) @signature `Lrx/Completable;.concat:(Lrx/Observable;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L488b94.  v0:= 2I;
  #L488b96.  call temp:= `concat`(v1, v0) @signature `Lrx/Completable;.concat:(Lrx/Observable;I)Lrx/Completable;` @kind static;
  #L488b9c.  v1:= temp @kind object;
  #L488b9e.  return v1 @kind object;
}
procedure `rx.Completable` `concat`(`rx.Observable` v2 @kind object, `int` v3 ) @signature `Lrx/Completable;.concat:(Lrx/Observable;I)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L488bb0.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488bb6.  v0:= 1I;
  #L488bb8.  if v3 < v0 then goto L488bd0;
  #L488bbc.  v0:= new `rx.internal.operators.CompletableOnSubscribeConcat`;
  #L488bc0.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/operators/CompletableOnSubscribeConcat;.<init>:(Lrx/Observable;I)V` @kind direct;
  #L488bc6.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L488bcc.  v2:= temp @kind object;
  #L488bce.  return v2 @kind object;
  #L488bd0.  v2:= new `java.lang.IllegalArgumentException`;
  #L488bd4.  v0:= new `java.lang.StringBuilder`;
  #L488bd8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L488bde.  v1:= "prefetch > 0 required but it was " @kind object;
  #L488be2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L488be8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L488bee.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L488bf4.  v3:= temp @kind object;
  #L488bf6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L488bfc.  throw v2;
}
procedure `rx.Completable` `concat`(`rx.Completable`[] v2 @kind object) @signature `Lrx/Completable;.concat:([Lrx/Completable;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L488b48.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488b4e.  v0:= length @variable v2;
  #L488b50.  if v0 != 0 then goto L488b5e;
  #L488b54.  call temp:= `complete`() @signature `Lrx/Completable;.complete:()Lrx/Completable;` @kind static;
  #L488b5a.  v2:= temp @kind object;
  #L488b5c.  return v2 @kind object;
  #L488b5e.  v0:= length @variable v2;
  #L488b60.  v1:= 1I;
  #L488b62.  if v0 != v1 then goto L488b6e;
  #L488b66.  v0:= 0I;
  #L488b68.  v2:= v2[v0] @kind object;
  #L488b6c.  return v2 @kind object;
  #L488b6e.  v0:= new `rx.internal.operators.CompletableOnSubscribeConcatArray`;
  #L488b72.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/CompletableOnSubscribeConcatArray;.<init>:([Lrx/Completable;)V` @kind direct;
  #L488b78.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L488b7e.  v2:= temp @kind object;
  #L488b80.  return v2 @kind object;
}
procedure `rx.Completable` `create`(`rx.Completable$OnSubscribe` v1 @kind object) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L488c44.  call temp:= `requireNonNull`(v1) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488c4a.  v0:= new `rx.Completable`;
  #L488c4e.  call `<init>`(v0, v1) @signature `Lrx/Completable;.<init>:(Lrx/Completable$OnSubscribe;)V` @kind direct;
  #L488c54.  return v0 @kind object;
  #L488c56.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L488c58.  call `onError`(v1) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L488c5e.  call temp:= `toNpe`(v1) @signature `Lrx/Completable;.toNpe:(Ljava/lang/Throwable;)Ljava/lang/NullPointerException;` @kind static;
  #L488c64.  v1:= temp @kind object;
  #L488c66.  throw v1;
  #L488c68.  v1:= Exception @type ^`java.lang.NullPointerException` @kind object;
  #L488c6a.  throw v1;
  catch `java.lang.NullPointerException` @[L488c4a..L488c54] goto L488c68;
  catch `java.lang.Throwable` @[L488c4a..L488c54] goto L488c56;
}
procedure `rx.Completable` `defer`(`rx.functions.Func0` v1 @kind object) @signature `Lrx/Completable;.defer:(Lrx/functions/Func0;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L488c8c.  call temp:= `requireNonNull`(v1) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488c92.  v0:= new `rx.Completable$5`;
  #L488c96.  call `<init>`(v0, v1) @signature `Lrx/Completable$5;.<init>:(Lrx/functions/Func0;)V` @kind direct;
  #L488c9c.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L488ca2.  v1:= temp @kind object;
  #L488ca4.  return v1 @kind object;
}
procedure `void` `deliverUncaughtException`(`java.lang.Throwable` v2 @kind object) @signature `Lrx/Completable;.deliverUncaughtException:(Ljava/lang/Throwable;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L4899ac.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4899b2.  v0:= temp @kind object;
  #L4899b4.  call temp:= `getUncaughtExceptionHandler`(v0) @signature `Ljava/lang/Thread;.getUncaughtExceptionHandler:()Ljava/lang/Thread$UncaughtExceptionHandler;` @kind virtual;
  #L4899ba.  v1:= temp @kind object;
  #L4899bc.  call `uncaughtException`(v1, v0, v2) @signature `Ljava/lang/Thread$UncaughtExceptionHandler;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @kind interface;
  #L4899c2.  return @kind void;
}
procedure `rx.Completable` `error`(`java.lang.Throwable` v1 @kind object) @signature `Lrx/Completable;.error:(Ljava/lang/Throwable;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L488f70.  call temp:= `requireNonNull`(v1) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488f76.  v0:= new `rx.Completable$7`;
  #L488f7a.  call `<init>`(v0, v1) @signature `Lrx/Completable$7;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L488f80.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L488f86.  v1:= temp @kind object;
  #L488f88.  return v1 @kind object;
}
procedure `rx.Completable` `error`(`rx.functions.Func0` v1 @kind object) @signature `Lrx/Completable;.error:(Lrx/functions/Func0;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L488f9c.  call temp:= `requireNonNull`(v1) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488fa2.  v0:= new `rx.Completable$6`;
  #L488fa6.  call `<init>`(v0, v1) @signature `Lrx/Completable$6;.<init>:(Lrx/functions/Func0;)V` @kind direct;
  #L488fac.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L488fb2.  v1:= temp @kind object;
  #L488fb4.  return v1 @kind object;
}
procedure `rx.Completable` `fromAction`(`rx.functions.Action0` v1 @kind object) @signature `Lrx/Completable;.fromAction:(Lrx/functions/Action0;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L488fc8.  call temp:= `requireNonNull`(v1) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488fce.  v0:= new `rx.Completable$8`;
  #L488fd2.  call `<init>`(v0, v1) @signature `Lrx/Completable$8;.<init>:(Lrx/functions/Action0;)V` @kind direct;
  #L488fd8.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L488fde.  v1:= temp @kind object;
  #L488fe0.  return v1 @kind object;
}
procedure `rx.Completable` `fromCallable`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lrx/Completable;.fromCallable:(Ljava/util/concurrent/Callable;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L488ff4.  call temp:= `requireNonNull`(v1) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488ffa.  v0:= new `rx.Completable$9`;
  #L488ffe.  call `<init>`(v0, v1) @signature `Lrx/Completable$9;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L489004.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L48900a.  v1:= temp @kind object;
  #L48900c.  return v1 @kind object;
}
procedure `rx.Completable` `fromEmitter`(`rx.functions.Action1` v1 @kind object) @signature `Lrx/Completable;.fromEmitter:(Lrx/functions/Action1;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L489020.  v0:= new `rx.internal.operators.CompletableFromEmitter`;
  #L489024.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/CompletableFromEmitter;.<init>:(Lrx/functions/Action1;)V` @kind direct;
  #L48902a.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L489030.  v1:= temp @kind object;
  #L489032.  return v1 @kind object;
}
procedure `rx.Completable` `fromFuture`(`java.util.concurrent.Future` v0 @kind object) @signature `Lrx/Completable;.fromFuture:(Ljava/util/concurrent/Future;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L489044.  call temp:= `requireNonNull`(v0) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L48904a.  call temp:= `from`(v0) @signature `Lrx/Observable;.from:(Ljava/util/concurrent/Future;)Lrx/Observable;` @kind static;
  #L489050.  v0:= temp @kind object;
  #L489052.  call temp:= `fromObservable`(v0) @signature `Lrx/Completable;.fromObservable:(Lrx/Observable;)Lrx/Completable;` @kind static;
  #L489058.  v0:= temp @kind object;
  #L48905a.  return v0 @kind object;
}
procedure `rx.Completable` `fromObservable`(`rx.Observable` v1 @kind object) @signature `Lrx/Completable;.fromObservable:(Lrx/Observable;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48906c.  call temp:= `requireNonNull`(v1) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L489072.  v0:= new `rx.Completable$10`;
  #L489076.  call `<init>`(v0, v1) @signature `Lrx/Completable$10;.<init>:(Lrx/Observable;)V` @kind direct;
  #L48907c.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L489082.  v1:= temp @kind object;
  #L489084.  return v1 @kind object;
}
procedure `rx.Completable` `fromSingle`(`rx.Single` v1 @kind object) @signature `Lrx/Completable;.fromSingle:(Lrx/Single;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L489098.  call temp:= `requireNonNull`(v1) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L48909e.  v0:= new `rx.Completable$11`;
  #L4890a2.  call `<init>`(v0, v1) @signature `Lrx/Completable$11;.<init>:(Lrx/Single;)V` @kind direct;
  #L4890a8.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L4890ae.  v1:= temp @kind object;
  #L4890b0.  return v1 @kind object;
}
procedure `rx.Completable` `merge`(`java.lang.Iterable` v1 @kind object) @signature `Lrx/Completable;.merge:(Ljava/lang/Iterable;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4890f0.  call temp:= `requireNonNull`(v1) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4890f6.  v0:= new `rx.internal.operators.CompletableOnSubscribeMergeIterable`;
  #L4890fa.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/CompletableOnSubscribeMergeIterable;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L489100.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L489106.  v1:= temp @kind object;
  #L489108.  return v1 @kind object;
}
procedure `rx.Completable` `merge`(`rx.Observable` v2 @kind object) @signature `Lrx/Completable;.merge:(Lrx/Observable;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L489168.  v0:= 2147483647I;
  #L48916e.  v1:= 0I;
  #L489170.  call temp:= `merge0`(v2, v0, v1) @signature `Lrx/Completable;.merge0:(Lrx/Observable;IZ)Lrx/Completable;` @kind static;
  #L489176.  v2:= temp @kind object;
  #L489178.  return v2 @kind object;
}
procedure `rx.Completable` `merge`(`rx.Observable` v1 @kind object, `int` v2 ) @signature `Lrx/Completable;.merge:(Lrx/Observable;I)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48918c.  v0:= 0I;
  #L48918e.  call temp:= `merge0`(v1, v2, v0) @signature `Lrx/Completable;.merge0:(Lrx/Observable;IZ)Lrx/Completable;` @kind static;
  #L489194.  v1:= temp @kind object;
  #L489196.  return v1 @kind object;
}
procedure `rx.Completable` `merge`(`rx.Completable`[] v2 @kind object) @signature `Lrx/Completable;.merge:([Lrx/Completable;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48911c.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L489122.  v0:= length @variable v2;
  #L489124.  if v0 != 0 then goto L489132;
  #L489128.  call temp:= `complete`() @signature `Lrx/Completable;.complete:()Lrx/Completable;` @kind static;
  #L48912e.  v2:= temp @kind object;
  #L489130.  return v2 @kind object;
  #L489132.  v0:= length @variable v2;
  #L489134.  v1:= 1I;
  #L489136.  if v0 != v1 then goto L489142;
  #L48913a.  v0:= 0I;
  #L48913c.  v2:= v2[v0] @kind object;
  #L489140.  return v2 @kind object;
  #L489142.  v0:= new `rx.internal.operators.CompletableOnSubscribeMergeArray`;
  #L489146.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/CompletableOnSubscribeMergeArray;.<init>:([Lrx/Completable;)V` @kind direct;
  #L48914c.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L489152.  v2:= temp @kind object;
  #L489154.  return v2 @kind object;
}
procedure `rx.Completable` `merge0`(`rx.Observable` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lrx/Completable;.merge0:(Lrx/Observable;IZ)Lrx/Completable;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;

  #L4891a8.  call temp:= `requireNonNull`(v1) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4891ae.  v0:= 1I;
  #L4891b0.  if v2 < v0 then goto L4891c8;
  #L4891b4.  v0:= new `rx.internal.operators.CompletableOnSubscribeMerge`;
  #L4891b8.  call `<init>`(v0, v1, v2, v3) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge;.<init>:(Lrx/Observable;IZ)V` @kind direct;
  #L4891be.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L4891c4.  v1:= temp @kind object;
  #L4891c6.  return v1 @kind object;
  #L4891c8.  v1:= new `java.lang.IllegalArgumentException`;
  #L4891cc.  v3:= new `java.lang.StringBuilder`;
  #L4891d0.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4891d6.  v0:= "maxConcurrency > 0 required but it was " @kind object;
  #L4891da.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4891e0.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4891e6.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4891ec.  v2:= temp @kind object;
  #L4891ee.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4891f4.  throw v1;
}
procedure `rx.Completable` `mergeDelayError`(`java.lang.Iterable` v1 @kind object) @signature `Lrx/Completable;.mergeDelayError:(Ljava/lang/Iterable;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L489208.  call temp:= `requireNonNull`(v1) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L48920e.  v0:= new `rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable`;
  #L489212.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/CompletableOnSubscribeMergeDelayErrorIterable;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L489218.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L48921e.  v1:= temp @kind object;
  #L489220.  return v1 @kind object;
}
procedure `rx.Completable` `mergeDelayError`(`rx.Observable` v2 @kind object) @signature `Lrx/Completable;.mergeDelayError:(Lrx/Observable;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L489260.  v0:= 2147483647I;
  #L489266.  v1:= 1I;
  #L489268.  call temp:= `merge0`(v2, v0, v1) @signature `Lrx/Completable;.merge0:(Lrx/Observable;IZ)Lrx/Completable;` @kind static;
  #L48926e.  v2:= temp @kind object;
  #L489270.  return v2 @kind object;
}
procedure `rx.Completable` `mergeDelayError`(`rx.Observable` v1 @kind object, `int` v2 ) @signature `Lrx/Completable;.mergeDelayError:(Lrx/Observable;I)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L489284.  v0:= 1I;
  #L489286.  call temp:= `merge0`(v1, v2, v0) @signature `Lrx/Completable;.merge0:(Lrx/Observable;IZ)Lrx/Completable;` @kind static;
  #L48928c.  v1:= temp @kind object;
  #L48928e.  return v1 @kind object;
}
procedure `rx.Completable` `mergeDelayError`(`rx.Completable`[] v1 @kind object) @signature `Lrx/Completable;.mergeDelayError:([Lrx/Completable;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L489234.  call temp:= `requireNonNull`(v1) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L48923a.  v0:= new `rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray`;
  #L48923e.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/CompletableOnSubscribeMergeDelayErrorArray;.<init>:([Lrx/Completable;)V` @kind direct;
  #L489244.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L48924a.  v1:= temp @kind object;
  #L48924c.  return v1 @kind object;
}
procedure `rx.Completable` `never`() @signature `Lrx/Completable;.never:()Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4892d4.  v0:= `@@rx.Completable.NEVER` @type ^`rx.Completable` @kind object;
  #L4892d8.  v0:= v0.`rx.Completable.onSubscribe` @type ^`rx.Completable$OnSubscribe` @kind object;
  #L4892dc.  call temp:= `onCreate`(v0) @signature `Lrx/plugins/RxJavaHooks;.onCreate:(Lrx/Completable$OnSubscribe;)Lrx/Completable$OnSubscribe;` @kind static;
  #L4892e2.  v0:= temp @kind object;
  #L4892e4.  v1:= `@@rx.Completable.NEVER` @type ^`rx.Completable` @kind object;
  #L4892e8.  v2:= v1.`rx.Completable.onSubscribe` @type ^`rx.Completable$OnSubscribe` @kind object;
  #L4892ec.  if v0 != v2 then goto L4892f2;
  #L4892f0.  return v1 @kind object;
  #L4892f2.  v1:= new `rx.Completable`;
  #L4892f6.  v2:= 0I;
  #L4892f8.  call `<init>`(v1, v0, v2) @signature `Lrx/Completable;.<init>:(Lrx/Completable$OnSubscribe;Z)V` @kind direct;
  #L4892fe.  return v1 @kind object;
}
procedure `java.lang.Object` `requireNonNull`(`java.lang.Object` v0 @kind object) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;

  #L4888b0.  if v0 == 0 then goto L4888b6;
  #L4888b4.  return v0 @kind object;
  #L4888b6.  v0:= new `java.lang.NullPointerException`;
  #L4888ba.  call `<init>`(v0) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L4888c0.  throw v0;
}
procedure `rx.Completable` `timer`(`long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lrx/Completable;.timer:(JLjava/util/concurrent/TimeUnit;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48962c.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L489632.  v0:= temp @kind object;
  #L489634.  call temp:= `timer`(v1, v3, v0) @signature `Lrx/Completable;.timer:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Completable;` @kind static;
  #L48963a.  v1:= temp @kind object;
  #L48963c.  return v1 @kind object;
}
procedure `rx.Completable` `timer`(`long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `rx.Scheduler` v4 @kind object) @signature `Lrx/Completable;.timer:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L489650.  call temp:= `requireNonNull`(v3) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L489656.  call temp:= `requireNonNull`(v4) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L48965c.  v0:= new `rx.Completable$12`;
  #L489660.  call `<init>`(v0, v4, v1, v3) @signature `Lrx/Completable$12;.<init>:(Lrx/Scheduler;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L489666.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L48966c.  v1:= temp @kind object;
  #L48966e.  return v1 @kind object;
}
procedure `java.lang.NullPointerException` `toNpe`(`java.lang.Throwable` v2 @kind object) @signature `Lrx/Completable;.toNpe:(Ljava/lang/Throwable;)Ljava/lang/NullPointerException;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L488888.  v0:= new `java.lang.NullPointerException`;
  #L48888c.  v1:= "Actually not, but can't pass out an exception otherwise..." @kind object;
  #L488890.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L488896.  call temp:= `initCause`(v0, v2) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L48889c.  return v0 @kind object;
}
procedure `void` `unsafeSubscribe`(`rx.Completable` v0 @kind this, `rx.Subscriber` v1 @kind object, `boolean` v2 ) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/Subscriber;Z)V` @AccessFlag PRIVATE {
    temp;

  #L489ab0.  call temp:= `requireNonNull`(v1) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L489ab6.  if v2 == 0 then goto L489ac0;
  #L489aba.  call `onStart`(v1) @signature `Lrx/Subscriber;.onStart:()V` @kind virtual;
  #L489ac0.  v2:= new `rx.Completable$30`;
  #L489ac4.  call `<init>`(v2, v0, v1) @signature `Lrx/Completable$30;.<init>:(Lrx/Completable;Lrx/Subscriber;)V` @kind direct;
  #L489aca.  call `unsafeSubscribe`(v0, v2) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L489ad0.  call temp:= `onObservableReturn`(v1) @signature `Lrx/plugins/RxJavaHooks;.onObservableReturn:(Lrx/Subscription;)Lrx/Subscription;` @kind static;
  #L489ad6.  return @kind void;
  #L489ad8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L489ada.  call `throwIfFatal`(v1) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L489ae0.  call temp:= `onObservableError`(v1) @signature `Lrx/plugins/RxJavaHooks;.onObservableError:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L489ae6.  v1:= temp @kind object;
  #L489ae8.  call `onError`(v1) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L489aee.  call temp:= `toNpe`(v1) @signature `Lrx/Completable;.toNpe:(Ljava/lang/Throwable;)Ljava/lang/NullPointerException;` @kind static;
  #L489af4.  v1:= temp @kind object;
  #L489af6.  throw v1;
  #L489af8.  v1:= Exception @type ^`java.lang.NullPointerException` @kind object;
  #L489afa.  throw v1;
  catch `java.lang.NullPointerException` @[L489aba..L489ad6] goto L489af8;
  catch `java.lang.Throwable` @[L489aba..L489ad6] goto L489ad8;
}
procedure `rx.Completable` `using`(`rx.functions.Func0` v1 @kind object, `rx.functions.Func1` v2 @kind object, `rx.functions.Action1` v3 @kind object) @signature `Lrx/Completable;.using:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4896ac.  v0:= 1I;
  #L4896ae.  call temp:= `using`(v1, v2, v3, v0) @signature `Lrx/Completable;.using:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;Z)Lrx/Completable;` @kind static;
  #L4896b4.  v1:= temp @kind object;
  #L4896b6.  return v1 @kind object;
}
procedure `rx.Completable` `using`(`rx.functions.Func0` v1 @kind object, `rx.functions.Func1` v2 @kind object, `rx.functions.Action1` v3 @kind object, `boolean` v4 ) @signature `Lrx/Completable;.using:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;Z)Lrx/Completable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4896c8.  call temp:= `requireNonNull`(v1) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4896ce.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4896d4.  call temp:= `requireNonNull`(v3) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4896da.  v0:= new `rx.Completable$13`;
  #L4896de.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lrx/Completable$13;.<init>:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;Z)V` @kind direct;
  #L4896e4.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L4896ea.  v1:= temp @kind object;
  #L4896ec.  return v1 @kind object;
}
procedure `rx.Completable` `ambWith`(`rx.Completable` v2 @kind this, `rx.Completable` v3 @kind object) @signature `Lrx/Completable;.ambWith:(Lrx/Completable;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L488a70.  call temp:= `requireNonNull`(v3) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488a76.  v0:= 2I;
  #L488a78.  v0:= new `rx.Completable`[v0];
  #L488a7c.  v1:= 0I;
  #L488a7e.  v0[v1]:= v2 @kind object;
  #L488a82.  v1:= 1I;
  #L488a84.  v0[v1]:= v3 @kind object;
  #L488a88.  call temp:= `amb`(v0) @signature `Lrx/Completable;.amb:([Lrx/Completable;)Lrx/Completable;` @kind static;
  #L488a8e.  v3:= temp @kind object;
  #L488a90.  return v3 @kind object;
}
procedure `rx.Completable` `andThen`(`rx.Completable` v0 @kind this, `rx.Completable` v1 @kind object) @signature `Lrx/Completable;.andThen:(Lrx/Completable;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L488aa4.  call temp:= `concatWith`(v0, v1) @signature `Lrx/Completable;.concatWith:(Lrx/Completable;)Lrx/Completable;` @kind virtual;
  #L488aaa.  v1:= temp @kind object;
  #L488aac.  return v1 @kind object;
}
procedure `rx.Observable` `andThen`(`rx.Completable` v1 @kind this, `rx.Observable` v2 @kind object) @signature `Lrx/Completable;.andThen:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L489700.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L489706.  call temp:= `toObservable`(v1) @signature `Lrx/Completable;.toObservable:()Lrx/Observable;` @kind virtual;
  #L48970c.  v0:= temp @kind object;
  #L48970e.  call temp:= `delaySubscription`(v2, v0) @signature `Lrx/Observable;.delaySubscription:(Lrx/Observable;)Lrx/Observable;` @kind virtual;
  #L489714.  v2:= temp @kind object;
  #L489716.  return v2 @kind object;
}
procedure `rx.Single` `andThen`(`rx.Completable` v1 @kind this, `rx.Single` v2 @kind object) @signature `Lrx/Completable;.andThen:(Lrx/Single;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L489774.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L48977a.  call temp:= `toObservable`(v1) @signature `Lrx/Completable;.toObservable:()Lrx/Observable;` @kind virtual;
  #L489780.  v0:= temp @kind object;
  #L489782.  call temp:= `delaySubscription`(v2, v0) @signature `Lrx/Single;.delaySubscription:(Lrx/Observable;)Lrx/Single;` @kind virtual;
  #L489788.  v2:= temp @kind object;
  #L48978a.  return v2 @kind object;
}
procedure `void` `await`(`rx.Completable` v8 @kind this) @signature `Lrx/Completable;.await:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L48991c.  v0:= new `java.util.concurrent.CountDownLatch`;
  #L489920.  v1:= 1I;
  #L489922.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L489928.  v1:= new `java.lang.Throwable`[v1];
  #L48992c.  v2:= new `rx.Completable$14`;
  #L489930.  call `<init>`(v2, v8, v0, v1) @signature `Lrx/Completable$14;.<init>:(Lrx/Completable;Ljava/util/concurrent/CountDownLatch;[Ljava/lang/Throwable;)V` @kind direct;
  #L489936.  call `unsafeSubscribe`(v8, v2) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L48993c.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L489942.  v2:= temp @kind wide;
  #L489944.  v4:= 0I;
  #L489946.  v5:= 0L;
  #L48994a.  v7:= lcmp(v2, v5);
  #L48994e.  if v7 != 0 then goto L489966;
  #L489952.  v0:= v1[v4] @kind object;
  #L489956.  if v0 == 0 then goto L489964;
  #L48995a.  v0:= v1[v4] @kind object;
  #L48995e.  call temp:= `propagate`(v0) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L489964.  return @kind void;
  #L489966.  call `await`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L48996c.  v0:= v1[v4] @kind object;
  #L489970.  if v0 == 0 then goto L48997e;
  #L489974.  v0:= v1[v4] @kind object;
  #L489978.  call temp:= `propagate`(v0) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L48997e.  return @kind void;
  #L489980.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L489982.  call temp:= `propagate`(v0) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L489988.  v0:= temp @kind object;
  #L48998a.  throw v0;
  catch `java.lang.InterruptedException` @[L489966..L48996c] goto L489980;
}
procedure `boolean` `await`(`rx.Completable` v9 @kind this, `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object) @signature `Lrx/Completable;.await:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4887ec.  call temp:= `requireNonNull`(v12) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4887f2.  v0:= new `java.util.concurrent.CountDownLatch`;
  #L4887f6.  v1:= 1I;
  #L4887f8.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L4887fe.  v2:= new `java.lang.Throwable`[v1];
  #L488802.  v3:= new `rx.Completable$15`;
  #L488806.  call `<init>`(v3, v9, v0, v2) @signature `Lrx/Completable$15;.<init>:(Lrx/Completable;Ljava/util/concurrent/CountDownLatch;[Ljava/lang/Throwable;)V` @kind direct;
  #L48880c.  call `unsafeSubscribe`(v9, v3) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L488812.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L488818.  v3:= temp @kind wide;
  #L48881a.  v5:= 0I;
  #L48881c.  v6:= 0L;
  #L488820.  v8:= lcmp(v3, v6);
  #L488824.  if v8 != 0 then goto L48883c;
  #L488828.  v10:= v2[v5] @kind object;
  #L48882c.  if v10 == 0 then goto L48883a;
  #L488830.  v10:= v2[v5] @kind object;
  #L488834.  call temp:= `propagate`(v10) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L48883a.  return v1;
  #L48883c.  call temp:= `await`(v0, v10, v12) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L488842.  v10:= temp;
  #L488844.  if v10 == 0 then goto L48885a;
  #L488848.  v11:= v2[v5] @kind object;
  #L48884c.  if v11 == 0 then goto L48885a;
  #L488850.  v11:= v2[v5] @kind object;
  #L488854.  call temp:= `propagate`(v11) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L48885a.  return v10;
  #L48885c.  v10:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L48885e.  call temp:= `propagate`(v10) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L488864.  v10:= temp @kind object;
  #L488866.  throw v10;
  catch `java.lang.InterruptedException` @[L48883c..L488844] goto L48885c;
}
procedure `rx.Completable` `compose`(`rx.Completable` v0 @kind this, `rx.Completable$Transformer` v1 @kind object) @signature `Lrx/Completable;.compose:(Lrx/Completable$Transformer;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L488afc.  call temp:= `to`(v0, v1) @signature `Lrx/Completable;.to:(Lrx/functions/Func1;)Ljava/lang/Object;` @kind virtual;
  #L488b02.  v1:= temp @kind object;
  #L488b04.  v1:= (`rx.Completable`) v1 @kind object;
  #L488b08.  return v1 @kind object;
}
procedure `rx.Completable` `concatWith`(`rx.Completable` v2 @kind this, `rx.Completable` v3 @kind object) @signature `Lrx/Completable;.concatWith:(Lrx/Completable;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L488c10.  call temp:= `requireNonNull`(v3) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488c16.  v0:= 2I;
  #L488c18.  v0:= new `rx.Completable`[v0];
  #L488c1c.  v1:= 0I;
  #L488c1e.  v0[v1]:= v2 @kind object;
  #L488c22.  v1:= 1I;
  #L488c24.  v0[v1]:= v3 @kind object;
  #L488c28.  call temp:= `concat`(v0) @signature `Lrx/Completable;.concat:([Lrx/Completable;)Lrx/Completable;` @kind static;
  #L488c2e.  v3:= temp @kind object;
  #L488c30.  return v3 @kind object;
}
procedure `rx.Completable` `delay`(`rx.Completable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lrx/Completable;.delay:(JLjava/util/concurrent/TimeUnit;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L488cb8.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L488cbe.  v4:= temp @kind object;
  #L488cc0.  v5:= 0I;
  #L488cc2.  v0:= v6 @kind object;
  #L488cc4.  v1:= v7 @kind wide;
  #L488cc6.  v3:= v9 @kind object;
  #L488cc8.  call temp:= `delay`(v0, v1, v3, v4, v5) @signature `Lrx/Completable;.delay:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;Z)Lrx/Completable;` @kind virtual;
  #L488cce.  v7:= temp @kind object;
  #L488cd0.  return v7 @kind object;
}
procedure `rx.Completable` `delay`(`rx.Completable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `rx.Scheduler` v10 @kind object) @signature `Lrx/Completable;.delay:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L488ce4.  v5:= 0I;
  #L488ce6.  v0:= v6 @kind object;
  #L488ce8.  v1:= v7 @kind wide;
  #L488cea.  v3:= v9 @kind object;
  #L488cec.  v4:= v10 @kind object;
  #L488cee.  call temp:= `delay`(v0, v1, v3, v4, v5) @signature `Lrx/Completable;.delay:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;Z)Lrx/Completable;` @kind virtual;
  #L488cf4.  v7:= temp @kind object;
  #L488cf6.  return v7 @kind object;
}
procedure `rx.Completable` `delay`(`rx.Completable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `rx.Scheduler` v12 @kind object, `boolean` v13 ) @signature `Lrx/Completable;.delay:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;Z)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L488d08.  call temp:= `requireNonNull`(v11) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488d0e.  call temp:= `requireNonNull`(v12) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488d14.  v7:= new `rx.Completable$16`;
  #L488d18.  v0:= v7 @kind object;
  #L488d1a.  v1:= v8 @kind object;
  #L488d1c.  v2:= v12 @kind object;
  #L488d1e.  v3:= v9 @kind wide;
  #L488d20.  v5:= v11 @kind object;
  #L488d22.  v6:= v13;
  #L488d24.  call `<init>`(v0, v1, v2, v3, v5, v6) @signature `Lrx/Completable$16;.<init>:(Lrx/Completable;Lrx/Scheduler;JLjava/util/concurrent/TimeUnit;Z)V` @kind direct;
  #L488d2a.  call temp:= `create`(v7) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L488d30.  v9:= temp @kind object;
  #L488d32.  return v9 @kind object;
}
procedure `rx.Completable` `doAfterTerminate`(`rx.Completable` v6 @kind this, `rx.functions.Action0` v7 @kind object) @signature `Lrx/Completable;.doAfterTerminate:(Lrx/functions/Action0;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L488d44.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488d4a.  v1:= temp @kind object;
  #L488d4c.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488d52.  v2:= temp @kind object;
  #L488d54.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488d5a.  v3:= temp @kind object;
  #L488d5c.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488d62.  v5:= temp @kind object;
  #L488d64.  v0:= v6 @kind object;
  #L488d66.  v4:= v7 @kind object;
  #L488d68.  call temp:= `doOnLifecycle`(v0, v1, v2, v3, v4, v5) @signature `Lrx/Completable;.doOnLifecycle:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;Lrx/functions/Action0;Lrx/functions/Action0;)Lrx/Completable;` @kind virtual;
  #L488d6e.  v7:= temp @kind object;
  #L488d70.  return v7 @kind object;
}
procedure `rx.Completable` `doOnCompleted`(`rx.Completable` v6 @kind this, `rx.functions.Action0` v7 @kind object) @signature `Lrx/Completable;.doOnCompleted:(Lrx/functions/Action0;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L488d84.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488d8a.  v1:= temp @kind object;
  #L488d8c.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488d92.  v2:= temp @kind object;
  #L488d94.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488d9a.  v4:= temp @kind object;
  #L488d9c.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488da2.  v5:= temp @kind object;
  #L488da4.  v0:= v6 @kind object;
  #L488da6.  v3:= v7 @kind object;
  #L488da8.  call temp:= `doOnLifecycle`(v0, v1, v2, v3, v4, v5) @signature `Lrx/Completable;.doOnLifecycle:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;Lrx/functions/Action0;Lrx/functions/Action0;)Lrx/Completable;` @kind virtual;
  #L488dae.  v7:= temp @kind object;
  #L488db0.  return v7 @kind object;
}
procedure `rx.Completable` `doOnEach`(`rx.Completable` v6 @kind this, `rx.functions.Action1` v7 @kind object) @signature `Lrx/Completable;.doOnEach:(Lrx/functions/Action1;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L488dc4.  if v7 == 0 then goto L488e00;
  #L488dc8.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488dce.  v1:= temp @kind object;
  #L488dd0.  v2:= new `rx.Completable$17`;
  #L488dd4.  call `<init>`(v2, v6, v7) @signature `Lrx/Completable$17;.<init>:(Lrx/Completable;Lrx/functions/Action1;)V` @kind direct;
  #L488dda.  v3:= new `rx.Completable$18`;
  #L488dde.  call `<init>`(v3, v6, v7) @signature `Lrx/Completable$18;.<init>:(Lrx/Completable;Lrx/functions/Action1;)V` @kind direct;
  #L488de4.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488dea.  v4:= temp @kind object;
  #L488dec.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488df2.  v5:= temp @kind object;
  #L488df4.  v0:= v6 @kind object;
  #L488df6.  call temp:= `doOnLifecycle`(v0, v1, v2, v3, v4, v5) @signature `Lrx/Completable;.doOnLifecycle:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;Lrx/functions/Action0;Lrx/functions/Action0;)Lrx/Completable;` @kind virtual;
  #L488dfc.  v7:= temp @kind object;
  #L488dfe.  return v7 @kind object;
  #L488e00.  v7:= new `java.lang.IllegalArgumentException`;
  #L488e04.  v0:= "onNotification is null" @kind object;
  #L488e08.  call `<init>`(v7, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L488e0e.  throw v7;
}
procedure `rx.Completable` `doOnError`(`rx.Completable` v6 @kind this, `rx.functions.Action1` v7 @kind object) @signature `Lrx/Completable;.doOnError:(Lrx/functions/Action1;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L488e20.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488e26.  v1:= temp @kind object;
  #L488e28.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488e2e.  v3:= temp @kind object;
  #L488e30.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488e36.  v4:= temp @kind object;
  #L488e38.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488e3e.  v5:= temp @kind object;
  #L488e40.  v0:= v6 @kind object;
  #L488e42.  v2:= v7 @kind object;
  #L488e44.  call temp:= `doOnLifecycle`(v0, v1, v2, v3, v4, v5) @signature `Lrx/Completable;.doOnLifecycle:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;Lrx/functions/Action0;Lrx/functions/Action0;)Lrx/Completable;` @kind virtual;
  #L488e4a.  v7:= temp @kind object;
  #L488e4c.  return v7 @kind object;
}
procedure `rx.Completable` `doOnLifecycle`(`rx.Completable` v8 @kind this, `rx.functions.Action1` v9 @kind object, `rx.functions.Action1` v10 @kind object, `rx.functions.Action0` v11 @kind object, `rx.functions.Action0` v12 @kind object, `rx.functions.Action0` v13 @kind object) @signature `Lrx/Completable;.doOnLifecycle:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;Lrx/functions/Action0;Lrx/functions/Action0;)Lrx/Completable;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L488e60.  call temp:= `requireNonNull`(v9) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488e66.  call temp:= `requireNonNull`(v10) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488e6c.  call temp:= `requireNonNull`(v11) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488e72.  call temp:= `requireNonNull`(v12) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488e78.  call temp:= `requireNonNull`(v13) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L488e7e.  v7:= new `rx.Completable$19`;
  #L488e82.  v0:= v7 @kind object;
  #L488e84.  v1:= v8 @kind object;
  #L488e86.  v2:= v11 @kind object;
  #L488e88.  v3:= v12 @kind object;
  #L488e8a.  v4:= v10 @kind object;
  #L488e8c.  v5:= v9 @kind object;
  #L488e8e.  v6:= v13 @kind object;
  #L488e90.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lrx/Completable$19;.<init>:(Lrx/Completable;Lrx/functions/Action0;Lrx/functions/Action0;Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)V` @kind direct;
  #L488e96.  call temp:= `create`(v7) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L488e9c.  v9:= temp @kind object;
  #L488e9e.  return v9 @kind object;
}
procedure `rx.Completable` `doOnSubscribe`(`rx.Completable` v6 @kind this, `rx.functions.Action1` v7 @kind object) @signature `Lrx/Completable;.doOnSubscribe:(Lrx/functions/Action1;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L488eb0.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488eb6.  v2:= temp @kind object;
  #L488eb8.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488ebe.  v3:= temp @kind object;
  #L488ec0.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488ec6.  v4:= temp @kind object;
  #L488ec8.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488ece.  v5:= temp @kind object;
  #L488ed0.  v0:= v6 @kind object;
  #L488ed2.  v1:= v7 @kind object;
  #L488ed4.  call temp:= `doOnLifecycle`(v0, v1, v2, v3, v4, v5) @signature `Lrx/Completable;.doOnLifecycle:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;Lrx/functions/Action0;Lrx/functions/Action0;)Lrx/Completable;` @kind virtual;
  #L488eda.  v7:= temp @kind object;
  #L488edc.  return v7 @kind object;
}
procedure `rx.Completable` `doOnTerminate`(`rx.Completable` v6 @kind this, `rx.functions.Action0` v7 @kind object) @signature `Lrx/Completable;.doOnTerminate:(Lrx/functions/Action0;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L488ef0.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488ef6.  v1:= temp @kind object;
  #L488ef8.  v2:= new `rx.Completable$20`;
  #L488efc.  call `<init>`(v2, v6, v7) @signature `Lrx/Completable$20;.<init>:(Lrx/Completable;Lrx/functions/Action0;)V` @kind direct;
  #L488f02.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488f08.  v4:= temp @kind object;
  #L488f0a.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488f10.  v5:= temp @kind object;
  #L488f12.  v0:= v6 @kind object;
  #L488f14.  v3:= v7 @kind object;
  #L488f16.  call temp:= `doOnLifecycle`(v0, v1, v2, v3, v4, v5) @signature `Lrx/Completable;.doOnLifecycle:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;Lrx/functions/Action0;Lrx/functions/Action0;)Lrx/Completable;` @kind virtual;
  #L488f1c.  v7:= temp @kind object;
  #L488f1e.  return v7 @kind object;
}
procedure `rx.Completable` `doOnUnsubscribe`(`rx.Completable` v6 @kind this, `rx.functions.Action0` v7 @kind object) @signature `Lrx/Completable;.doOnUnsubscribe:(Lrx/functions/Action0;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L488f30.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488f36.  v1:= temp @kind object;
  #L488f38.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488f3e.  v2:= temp @kind object;
  #L488f40.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488f46.  v3:= temp @kind object;
  #L488f48.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L488f4e.  v4:= temp @kind object;
  #L488f50.  v0:= v6 @kind object;
  #L488f52.  v5:= v7 @kind object;
  #L488f54.  call temp:= `doOnLifecycle`(v0, v1, v2, v3, v4, v5) @signature `Lrx/Completable;.doOnLifecycle:(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;Lrx/functions/Action0;Lrx/functions/Action0;)Lrx/Completable;` @kind virtual;
  #L488f5a.  v7:= temp @kind object;
  #L488f5c.  return v7 @kind object;
}
procedure `java.lang.Throwable` `get`(`rx.Completable` v8 @kind this) @signature `Lrx/Completable;.get:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4888f0.  v0:= new `java.util.concurrent.CountDownLatch`;
  #L4888f4.  v1:= 1I;
  #L4888f6.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L4888fc.  v1:= new `java.lang.Throwable`[v1];
  #L488900.  v2:= new `rx.Completable$21`;
  #L488904.  call `<init>`(v2, v8, v0, v1) @signature `Lrx/Completable$21;.<init>:(Lrx/Completable;Ljava/util/concurrent/CountDownLatch;[Ljava/lang/Throwable;)V` @kind direct;
  #L48890a.  call `unsafeSubscribe`(v8, v2) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L488910.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L488916.  v2:= temp @kind wide;
  #L488918.  v4:= 0I;
  #L48891a.  v5:= 0L;
  #L48891e.  v7:= lcmp(v2, v5);
  #L488922.  if v7 != 0 then goto L48892c;
  #L488926.  v0:= v1[v4] @kind object;
  #L48892a.  return v0 @kind object;
  #L48892c.  call `await`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L488932.  v0:= v1[v4] @kind object;
  #L488936.  return v0 @kind object;
  #L488938.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L48893a.  call temp:= `propagate`(v0) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L488940.  v0:= temp @kind object;
  #L488942.  throw v0;
  catch `java.lang.InterruptedException` @[L48892c..L488932] goto L488938;
}
procedure `java.lang.Throwable` `get`(`rx.Completable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object) @signature `Lrx/Completable;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L488964.  call temp:= `requireNonNull`(v11) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L48896a.  v0:= new `java.util.concurrent.CountDownLatch`;
  #L48896e.  v1:= 1I;
  #L488970.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L488976.  v1:= new `java.lang.Throwable`[v1];
  #L48897a.  v2:= new `rx.Completable$22`;
  #L48897e.  call `<init>`(v2, v8, v0, v1) @signature `Lrx/Completable$22;.<init>:(Lrx/Completable;Ljava/util/concurrent/CountDownLatch;[Ljava/lang/Throwable;)V` @kind direct;
  #L488984.  call `unsafeSubscribe`(v8, v2) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L48898a.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L488990.  v2:= temp @kind wide;
  #L488992.  v4:= 0I;
  #L488994.  v5:= 0L;
  #L488998.  v7:= lcmp(v2, v5);
  #L48899c.  if v7 != 0 then goto L4889a6;
  #L4889a0.  v9:= v1[v4] @kind object;
  #L4889a4.  return v9 @kind object;
  #L4889a6.  call temp:= `await`(v0, v9, v11) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L4889ac.  v9:= temp;
  #L4889ae.  if v9 == 0 then goto L4889b8;
  #L4889b2.  v9:= v1[v4] @kind object;
  #L4889b6.  return v9 @kind object;
  #L4889b8.  v9:= new `java.util.concurrent.TimeoutException`;
  #L4889bc.  call `<init>`(v9) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L4889c2.  call temp:= `propagate`(v9) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4889c8.  v9:= 0I;
  #L4889ca.  return v9 @kind object;
  #L4889cc.  v9:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4889ce.  call temp:= `propagate`(v9) @signature `Lrx/exceptions/Exceptions;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4889d4.  v9:= temp @kind object;
  #L4889d6.  throw v9;
  catch `java.lang.InterruptedException` @[L4889a6..L4889ae] goto L4889cc;
}
procedure `rx.Completable` `lift`(`rx.Completable` v1 @kind this, `rx.Completable$Operator` v2 @kind object) @signature `Lrx/Completable;.lift:(Lrx/Completable$Operator;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4890c4.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4890ca.  v0:= new `rx.Completable$23`;
  #L4890ce.  call `<init>`(v0, v1, v2) @signature `Lrx/Completable$23;.<init>:(Lrx/Completable;Lrx/Completable$Operator;)V` @kind direct;
  #L4890d4.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L4890da.  v2:= temp @kind object;
  #L4890dc.  return v2 @kind object;
}
procedure `rx.Completable` `mergeWith`(`rx.Completable` v2 @kind this, `rx.Completable` v3 @kind object) @signature `Lrx/Completable;.mergeWith:(Lrx/Completable;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4892a0.  call temp:= `requireNonNull`(v3) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4892a6.  v0:= 2I;
  #L4892a8.  v0:= new `rx.Completable`[v0];
  #L4892ac.  v1:= 0I;
  #L4892ae.  v0[v1]:= v2 @kind object;
  #L4892b2.  v1:= 1I;
  #L4892b4.  v0[v1]:= v3 @kind object;
  #L4892b8.  call temp:= `merge`(v0) @signature `Lrx/Completable;.merge:([Lrx/Completable;)Lrx/Completable;` @kind static;
  #L4892be.  v3:= temp @kind object;
  #L4892c0.  return v3 @kind object;
}
procedure `rx.Completable` `observeOn`(`rx.Completable` v1 @kind this, `rx.Scheduler` v2 @kind object) @signature `Lrx/Completable;.observeOn:(Lrx/Scheduler;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L489310.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L489316.  v0:= new `rx.Completable$24`;
  #L48931a.  call `<init>`(v0, v1, v2) @signature `Lrx/Completable$24;.<init>:(Lrx/Completable;Lrx/Scheduler;)V` @kind direct;
  #L489320.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L489326.  v2:= temp @kind object;
  #L489328.  return v2 @kind object;
}
procedure `rx.Completable` `onErrorComplete`(`rx.Completable` v1 @kind this) @signature `Lrx/Completable;.onErrorComplete:()Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48933c.  call temp:= `alwaysTrue`() @signature `Lrx/internal/util/UtilityFunctions;.alwaysTrue:()Lrx/functions/Func1;` @kind static;
  #L489342.  v0:= temp @kind object;
  #L489344.  call temp:= `onErrorComplete`(v1, v0) @signature `Lrx/Completable;.onErrorComplete:(Lrx/functions/Func1;)Lrx/Completable;` @kind virtual;
  #L48934a.  v0:= temp @kind object;
  #L48934c.  return v0 @kind object;
}
procedure `rx.Completable` `onErrorComplete`(`rx.Completable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Completable;.onErrorComplete:(Lrx/functions/Func1;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L489360.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L489366.  v0:= new `rx.Completable$25`;
  #L48936a.  call `<init>`(v0, v1, v2) @signature `Lrx/Completable$25;.<init>:(Lrx/Completable;Lrx/functions/Func1;)V` @kind direct;
  #L489370.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L489376.  v2:= temp @kind object;
  #L489378.  return v2 @kind object;
}
procedure `rx.Completable` `onErrorResumeNext`(`rx.Completable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Completable;.onErrorResumeNext:(Lrx/functions/Func1;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48938c.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L489392.  v0:= new `rx.Completable$26`;
  #L489396.  call `<init>`(v0, v1, v2) @signature `Lrx/Completable$26;.<init>:(Lrx/Completable;Lrx/functions/Func1;)V` @kind direct;
  #L48939c.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L4893a2.  v2:= temp @kind object;
  #L4893a4.  return v2 @kind object;
}
procedure `rx.Completable` `repeat`(`rx.Completable` v1 @kind this) @signature `Lrx/Completable;.repeat:()Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4893b8.  call temp:= `toObservable`(v1) @signature `Lrx/Completable;.toObservable:()Lrx/Observable;` @kind virtual;
  #L4893be.  v0:= temp @kind object;
  #L4893c0.  call temp:= `repeat`(v0) @signature `Lrx/Observable;.repeat:()Lrx/Observable;` @kind virtual;
  #L4893c6.  v0:= temp @kind object;
  #L4893c8.  call temp:= `fromObservable`(v0) @signature `Lrx/Completable;.fromObservable:(Lrx/Observable;)Lrx/Completable;` @kind static;
  #L4893ce.  v0:= temp @kind object;
  #L4893d0.  return v0 @kind object;
}
procedure `rx.Completable` `repeat`(`rx.Completable` v1 @kind this, `long` v2 ) @signature `Lrx/Completable;.repeat:(J)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4893e4.  call temp:= `toObservable`(v1) @signature `Lrx/Completable;.toObservable:()Lrx/Observable;` @kind virtual;
  #L4893ea.  v0:= temp @kind object;
  #L4893ec.  call temp:= `repeat`(v0, v2) @signature `Lrx/Observable;.repeat:(J)Lrx/Observable;` @kind virtual;
  #L4893f2.  v2:= temp @kind object;
  #L4893f4.  call temp:= `fromObservable`(v2) @signature `Lrx/Completable;.fromObservable:(Lrx/Observable;)Lrx/Completable;` @kind static;
  #L4893fa.  v2:= temp @kind object;
  #L4893fc.  return v2 @kind object;
}
procedure `rx.Completable` `repeatWhen`(`rx.Completable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Completable;.repeatWhen:(Lrx/functions/Func1;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L489410.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L489416.  call temp:= `toObservable`(v1) @signature `Lrx/Completable;.toObservable:()Lrx/Observable;` @kind virtual;
  #L48941c.  v0:= temp @kind object;
  #L48941e.  call temp:= `repeatWhen`(v0, v2) @signature `Lrx/Observable;.repeatWhen:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L489424.  v2:= temp @kind object;
  #L489426.  call temp:= `fromObservable`(v2) @signature `Lrx/Completable;.fromObservable:(Lrx/Observable;)Lrx/Completable;` @kind static;
  #L48942c.  v2:= temp @kind object;
  #L48942e.  return v2 @kind object;
}
procedure `rx.Completable` `retry`(`rx.Completable` v1 @kind this) @signature `Lrx/Completable;.retry:()Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L489440.  call temp:= `toObservable`(v1) @signature `Lrx/Completable;.toObservable:()Lrx/Observable;` @kind virtual;
  #L489446.  v0:= temp @kind object;
  #L489448.  call temp:= `retry`(v0) @signature `Lrx/Observable;.retry:()Lrx/Observable;` @kind virtual;
  #L48944e.  v0:= temp @kind object;
  #L489450.  call temp:= `fromObservable`(v0) @signature `Lrx/Completable;.fromObservable:(Lrx/Observable;)Lrx/Completable;` @kind static;
  #L489456.  v0:= temp @kind object;
  #L489458.  return v0 @kind object;
}
procedure `rx.Completable` `retry`(`rx.Completable` v1 @kind this, `long` v2 ) @signature `Lrx/Completable;.retry:(J)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48946c.  call temp:= `toObservable`(v1) @signature `Lrx/Completable;.toObservable:()Lrx/Observable;` @kind virtual;
  #L489472.  v0:= temp @kind object;
  #L489474.  call temp:= `retry`(v0, v2) @signature `Lrx/Observable;.retry:(J)Lrx/Observable;` @kind virtual;
  #L48947a.  v2:= temp @kind object;
  #L48947c.  call temp:= `fromObservable`(v2) @signature `Lrx/Completable;.fromObservable:(Lrx/Observable;)Lrx/Completable;` @kind static;
  #L489482.  v2:= temp @kind object;
  #L489484.  return v2 @kind object;
}
procedure `rx.Completable` `retry`(`rx.Completable` v1 @kind this, `rx.functions.Func2` v2 @kind object) @signature `Lrx/Completable;.retry:(Lrx/functions/Func2;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L489498.  call temp:= `toObservable`(v1) @signature `Lrx/Completable;.toObservable:()Lrx/Observable;` @kind virtual;
  #L48949e.  v0:= temp @kind object;
  #L4894a0.  call temp:= `retry`(v0, v2) @signature `Lrx/Observable;.retry:(Lrx/functions/Func2;)Lrx/Observable;` @kind virtual;
  #L4894a6.  v2:= temp @kind object;
  #L4894a8.  call temp:= `fromObservable`(v2) @signature `Lrx/Completable;.fromObservable:(Lrx/Observable;)Lrx/Completable;` @kind static;
  #L4894ae.  v2:= temp @kind object;
  #L4894b0.  return v2 @kind object;
}
procedure `rx.Completable` `retryWhen`(`rx.Completable` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Completable;.retryWhen:(Lrx/functions/Func1;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4894c4.  call temp:= `toObservable`(v1) @signature `Lrx/Completable;.toObservable:()Lrx/Observable;` @kind virtual;
  #L4894ca.  v0:= temp @kind object;
  #L4894cc.  call temp:= `retryWhen`(v0, v2) @signature `Lrx/Observable;.retryWhen:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4894d2.  v2:= temp @kind object;
  #L4894d4.  call temp:= `fromObservable`(v2) @signature `Lrx/Completable;.fromObservable:(Lrx/Observable;)Lrx/Completable;` @kind static;
  #L4894da.  v2:= temp @kind object;
  #L4894dc.  return v2 @kind object;
}
procedure `rx.Completable` `startWith`(`rx.Completable` v2 @kind this, `rx.Completable` v3 @kind object) @signature `Lrx/Completable;.startWith:(Lrx/Completable;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4894f0.  call temp:= `requireNonNull`(v3) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4894f6.  v0:= 2I;
  #L4894f8.  v0:= new `rx.Completable`[v0];
  #L4894fc.  v1:= 0I;
  #L4894fe.  v0[v1]:= v3 @kind object;
  #L489502.  v3:= 1I;
  #L489504.  v0[v3]:= v2 @kind object;
  #L489508.  call temp:= `concat`(v0) @signature `Lrx/Completable;.concat:([Lrx/Completable;)Lrx/Completable;` @kind static;
  #L48950e.  v3:= temp @kind object;
  #L489510.  return v3 @kind object;
}
procedure `rx.Observable` `startWith`(`rx.Completable` v1 @kind this, `rx.Observable` v2 @kind object) @signature `Lrx/Completable;.startWith:(Lrx/Observable;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L489728.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L48972e.  call temp:= `toObservable`(v1) @signature `Lrx/Completable;.toObservable:()Lrx/Observable;` @kind virtual;
  #L489734.  v0:= temp @kind object;
  #L489736.  call temp:= `startWith`(v0, v2) @signature `Lrx/Observable;.startWith:(Lrx/Observable;)Lrx/Observable;` @kind virtual;
  #L48973c.  v2:= temp @kind object;
  #L48973e.  return v2 @kind object;
}
procedure `rx.Subscription` `subscribe`(`rx.Completable` v2 @kind this) @signature `Lrx/Completable;.subscribe:()Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4897f4.  v0:= new `rx.subscriptions.MultipleAssignmentSubscription`;
  #L4897f8.  call `<init>`(v0) @signature `Lrx/subscriptions/MultipleAssignmentSubscription;.<init>:()V` @kind direct;
  #L4897fe.  v1:= new `rx.Completable$27`;
  #L489802.  call `<init>`(v1, v2, v0) @signature `Lrx/Completable$27;.<init>:(Lrx/Completable;Lrx/subscriptions/MultipleAssignmentSubscription;)V` @kind direct;
  #L489808.  call `unsafeSubscribe`(v2, v1) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L48980e.  return v0 @kind object;
}
procedure `rx.Subscription` `subscribe`(`rx.Completable` v2 @kind this, `rx.functions.Action0` v3 @kind object) @signature `Lrx/Completable;.subscribe:(Lrx/functions/Action0;)Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L489820.  call temp:= `requireNonNull`(v3) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L489826.  v0:= new `rx.subscriptions.MultipleAssignmentSubscription`;
  #L48982a.  call `<init>`(v0) @signature `Lrx/subscriptions/MultipleAssignmentSubscription;.<init>:()V` @kind direct;
  #L489830.  v1:= new `rx.Completable$28`;
  #L489834.  call `<init>`(v1, v2, v3, v0) @signature `Lrx/Completable$28;.<init>:(Lrx/Completable;Lrx/functions/Action0;Lrx/subscriptions/MultipleAssignmentSubscription;)V` @kind direct;
  #L48983a.  call `unsafeSubscribe`(v2, v1) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L489840.  return v0 @kind object;
}
procedure `rx.Subscription` `subscribe`(`rx.Completable` v2 @kind this, `rx.functions.Action0` v3 @kind object, `rx.functions.Action1` v4 @kind object) @signature `Lrx/Completable;.subscribe:(Lrx/functions/Action0;Lrx/functions/Action1;)Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L489854.  call temp:= `requireNonNull`(v3) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L48985a.  call temp:= `requireNonNull`(v4) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L489860.  v0:= new `rx.subscriptions.MultipleAssignmentSubscription`;
  #L489864.  call `<init>`(v0) @signature `Lrx/subscriptions/MultipleAssignmentSubscription;.<init>:()V` @kind direct;
  #L48986a.  v1:= new `rx.Completable$29`;
  #L48986e.  call `<init>`(v1, v2, v3, v0, v4) @signature `Lrx/Completable$29;.<init>:(Lrx/Completable;Lrx/functions/Action0;Lrx/subscriptions/MultipleAssignmentSubscription;Lrx/functions/Action1;)V` @kind direct;
  #L489874.  call `unsafeSubscribe`(v2, v1) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L48987a.  return v0 @kind object;
}
procedure `void` `subscribe`(`rx.Completable` v1 @kind this, `rx.CompletableSubscriber` v2 @kind object) @signature `Lrx/Completable;.subscribe:(Lrx/CompletableSubscriber;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4899d4.  v0:= instanceof @variable v2 @type ^`rx.observers.SafeCompletableSubscriber` @kind boolean;
  #L4899d8.  if v0 != 0 then goto L4899e8;
  #L4899dc.  v0:= new `rx.observers.SafeCompletableSubscriber`;
  #L4899e0.  call `<init>`(v0, v2) @signature `Lrx/observers/SafeCompletableSubscriber;.<init>:(Lrx/CompletableSubscriber;)V` @kind direct;
  #L4899e6.  v2:= v0 @kind object;
  #L4899e8.  call `unsafeSubscribe`(v1, v2) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L4899ee.  return @kind void;
}
procedure `void` `subscribe`(`rx.Completable` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/Completable;.subscribe:(Lrx/Subscriber;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L489a00.  call `onStart`(v2) @signature `Lrx/Subscriber;.onStart:()V` @kind virtual;
  #L489a06.  v0:= instanceof @variable v2 @type ^`rx.observers.SafeSubscriber` @kind boolean;
  #L489a0a.  if v0 != 0 then goto L489a1a;
  #L489a0e.  v0:= new `rx.observers.SafeSubscriber`;
  #L489a12.  call `<init>`(v0, v2) @signature `Lrx/observers/SafeSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L489a18.  v2:= v0 @kind object;
  #L489a1a.  v0:= 0I;
  #L489a1c.  call `unsafeSubscribe`(v1, v2, v0) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/Subscriber;Z)V` @kind direct;
  #L489a22.  return @kind void;
}
procedure `rx.Completable` `subscribeOn`(`rx.Completable` v1 @kind this, `rx.Scheduler` v2 @kind object) @signature `Lrx/Completable;.subscribeOn:(Lrx/Scheduler;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L489524.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L48952a.  v0:= new `rx.Completable$31`;
  #L48952e.  call `<init>`(v0, v1, v2) @signature `Lrx/Completable$31;.<init>:(Lrx/Completable;Lrx/Scheduler;)V` @kind direct;
  #L489534.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L48953a.  v2:= temp @kind object;
  #L48953c.  return v2 @kind object;
}
procedure `rx.Completable` `timeout`(`rx.Completable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lrx/Completable;.timeout:(JLjava/util/concurrent/TimeUnit;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L489550.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L489556.  v4:= temp @kind object;
  #L489558.  v5:= 0I;
  #L48955a.  v0:= v6 @kind object;
  #L48955c.  v1:= v7 @kind wide;
  #L48955e.  v3:= v9 @kind object;
  #L489560.  call temp:= `timeout0`(v0, v1, v3, v4, v5) @signature `Lrx/Completable;.timeout0:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;Lrx/Completable;)Lrx/Completable;` @kind virtual;
  #L489566.  v7:= temp @kind object;
  #L489568.  return v7 @kind object;
}
procedure `rx.Completable` `timeout`(`rx.Completable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `rx.Completable` v10 @kind object) @signature `Lrx/Completable;.timeout:(JLjava/util/concurrent/TimeUnit;Lrx/Completable;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48957c.  call temp:= `requireNonNull`(v10) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L489582.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L489588.  v4:= temp @kind object;
  #L48958a.  v0:= v6 @kind object;
  #L48958c.  v1:= v7 @kind wide;
  #L48958e.  v3:= v9 @kind object;
  #L489590.  v5:= v10 @kind object;
  #L489592.  call temp:= `timeout0`(v0, v1, v3, v4, v5) @signature `Lrx/Completable;.timeout0:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;Lrx/Completable;)Lrx/Completable;` @kind virtual;
  #L489598.  v7:= temp @kind object;
  #L48959a.  return v7 @kind object;
}
procedure `rx.Completable` `timeout`(`rx.Completable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `rx.Scheduler` v10 @kind object) @signature `Lrx/Completable;.timeout:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4895ac.  v5:= 0I;
  #L4895ae.  v0:= v6 @kind object;
  #L4895b0.  v1:= v7 @kind wide;
  #L4895b2.  v3:= v9 @kind object;
  #L4895b4.  v4:= v10 @kind object;
  #L4895b6.  call temp:= `timeout0`(v0, v1, v3, v4, v5) @signature `Lrx/Completable;.timeout0:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;Lrx/Completable;)Lrx/Completable;` @kind virtual;
  #L4895bc.  v7:= temp @kind object;
  #L4895be.  return v7 @kind object;
}
procedure `rx.Completable` `timeout`(`rx.Completable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `rx.Scheduler` v4 @kind object, `rx.Completable` v5 @kind object) @signature `Lrx/Completable;.timeout:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;Lrx/Completable;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4895d0.  call temp:= `requireNonNull`(v5) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4895d6.  call temp:= `timeout0`(v0, v1, v3, v4, v5) @signature `Lrx/Completable;.timeout0:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;Lrx/Completable;)Lrx/Completable;` @kind virtual;
  #L4895dc.  v1:= temp @kind object;
  #L4895de.  return v1 @kind object;
}
procedure `rx.Completable` `timeout0`(`rx.Completable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `rx.Scheduler` v12 @kind object, `rx.Completable` v13 @kind object) @signature `Lrx/Completable;.timeout0:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;Lrx/Completable;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4895f0.  call temp:= `requireNonNull`(v11) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4895f6.  call temp:= `requireNonNull`(v12) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4895fc.  v7:= new `rx.internal.operators.CompletableOnSubscribeTimeout`;
  #L489600.  v0:= v7 @kind object;
  #L489602.  v1:= v8 @kind object;
  #L489604.  v2:= v9 @kind wide;
  #L489606.  v4:= v11 @kind object;
  #L489608.  v5:= v12 @kind object;
  #L48960a.  v6:= v13 @kind object;
  #L48960c.  call `<init>`(v0, v1, v2, v4, v5, v6) @signature `Lrx/internal/operators/CompletableOnSubscribeTimeout;.<init>:(Lrx/Completable;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;Lrx/Completable;)V` @kind direct;
  #L489612.  call temp:= `create`(v7) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L489618.  v9:= temp @kind object;
  #L48961a.  return v9 @kind object;
}
procedure `java.lang.Object` `to`(`rx.Completable` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/Completable;.to:(Lrx/functions/Func1;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4888d4.  call temp:= `call`(v1, v0) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4888da.  v1:= temp @kind object;
  #L4888dc.  return v1 @kind object;
}
procedure `rx.Observable` `toObservable`(`rx.Completable` v1 @kind this) @signature `Lrx/Completable;.toObservable:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L489750.  v0:= new `rx.Completable$32`;
  #L489754.  call `<init>`(v0, v1) @signature `Lrx/Completable$32;.<init>:(Lrx/Completable;)V` @kind direct;
  #L48975a.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L489760.  v0:= temp @kind object;
  #L489762.  return v0 @kind object;
}
procedure `rx.Single` `toSingle`(`rx.Completable` v1 @kind this, `rx.functions.Func0` v2 @kind object) @signature `Lrx/Completable;.toSingle:(Lrx/functions/Func0;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48979c.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4897a2.  v0:= new `rx.Completable$33`;
  #L4897a6.  call `<init>`(v0, v1, v2) @signature `Lrx/Completable$33;.<init>:(Lrx/Completable;Lrx/functions/Func0;)V` @kind direct;
  #L4897ac.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L4897b2.  v2:= temp @kind object;
  #L4897b4.  return v2 @kind object;
}
procedure `rx.Single` `toSingleDefault`(`rx.Completable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/Completable;.toSingleDefault:(Ljava/lang/Object;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4897c8.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4897ce.  v0:= new `rx.Completable$34`;
  #L4897d2.  call `<init>`(v0, v1, v2) @signature `Lrx/Completable$34;.<init>:(Lrx/Completable;Ljava/lang/Object;)V` @kind direct;
  #L4897d8.  call temp:= `toSingle`(v1, v0) @signature `Lrx/Completable;.toSingle:(Lrx/functions/Func0;)Lrx/Single;` @kind virtual;
  #L4897de.  v2:= temp @kind object;
  #L4897e0.  return v2 @kind object;
}
procedure `void` `unsafeSubscribe`(`rx.Completable` v1 @kind this, `rx.CompletableSubscriber` v2 @kind object) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/CompletableSubscriber;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L489a34.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L489a3a.  v0:= v1.`rx.Completable.onSubscribe` @type ^`rx.Completable$OnSubscribe` @kind object;
  #L489a3e.  call temp:= `onCompletableStart`(v1, v0) @signature `Lrx/plugins/RxJavaHooks;.onCompletableStart:(Lrx/Completable;Lrx/Completable$OnSubscribe;)Lrx/Completable$OnSubscribe;` @kind static;
  #L489a44.  v0:= temp @kind object;
  #L489a46.  call `call`(v0, v2) @signature `Lrx/Completable$OnSubscribe;.call:(Ljava/lang/Object;)V` @kind interface;
  #L489a4c.  return @kind void;
  #L489a4e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L489a50.  call `throwIfFatal`(v2) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L489a56.  call temp:= `onCompletableError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onCompletableError:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L489a5c.  v2:= temp @kind object;
  #L489a5e.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L489a64.  call temp:= `toNpe`(v2) @signature `Lrx/Completable;.toNpe:(Ljava/lang/Throwable;)Ljava/lang/NullPointerException;` @kind static;
  #L489a6a.  v2:= temp @kind object;
  #L489a6c.  throw v2;
  #L489a6e.  v2:= Exception @type ^`java.lang.NullPointerException` @kind object;
  #L489a70.  throw v2;
  catch `java.lang.NullPointerException` @[L489a3a..L489a4c] goto L489a6e;
  catch `java.lang.Throwable` @[L489a3a..L489a4c] goto L489a4e;
}
procedure `void` `unsafeSubscribe`(`rx.Completable` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/Subscriber;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L489a94.  v0:= 1I;
  #L489a96.  call `unsafeSubscribe`(v1, v2, v0) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/Subscriber;Z)V` @kind direct;
  #L489a9c.  return @kind void;
}
procedure `rx.Completable` `unsubscribeOn`(`rx.Completable` v1 @kind this, `rx.Scheduler` v2 @kind object) @signature `Lrx/Completable;.unsubscribeOn:(Lrx/Scheduler;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L489680.  call temp:= `requireNonNull`(v2) @signature `Lrx/Completable;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L489686.  v0:= new `rx.Completable$35`;
  #L48968a.  call `<init>`(v0, v1, v2) @signature `Lrx/Completable$35;.<init>:(Lrx/Completable;Lrx/Scheduler;)V` @kind direct;
  #L489690.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L489696.  v2:= temp @kind object;
  #L489698.  return v2 @kind object;
}
