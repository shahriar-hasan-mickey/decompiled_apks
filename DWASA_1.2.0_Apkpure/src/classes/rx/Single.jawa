record `rx.Single` @kind class @AccessFlag PUBLIC {
  `rx.Single$OnSubscribe` `rx.Single.onSubscribe` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.Single` v1 @kind this, `rx.Observable$OnSubscribe` v2 @kind object) @signature `Lrx/Single;.<init>:(Lrx/Observable$OnSubscribe;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L490548.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49054e.  v0:= new `rx.internal.operators.SingleFromObservable`;
  #L490552.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/SingleFromObservable;.<init>:(Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L490558.  call temp:= `onCreate`(v0) @signature `Lrx/plugins/RxJavaHooks;.onCreate:(Lrx/Single$OnSubscribe;)Lrx/Single$OnSubscribe;` @kind static;
  #L49055e.  v2:= temp @kind object;
  #L490560.  v1.`rx.Single.onSubscribe` @type ^`rx.Single$OnSubscribe` := v2 @kind object;
  #L490564.  return @kind void;
}
procedure `void` `<init>`(`rx.Single` v0 @kind this, `rx.Single$OnSubscribe` v1 @kind object) @signature `Lrx/Single;.<init>:(Lrx/Single$OnSubscribe;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L490578.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49057e.  call temp:= `onCreate`(v1) @signature `Lrx/plugins/RxJavaHooks;.onCreate:(Lrx/Single$OnSubscribe;)Lrx/Single$OnSubscribe;` @kind static;
  #L490584.  v1:= temp @kind object;
  #L490586.  v0.`rx.Single.onSubscribe` @type ^`rx.Single$OnSubscribe` := v1 @kind object;
  #L49058a.  return @kind void;
}
procedure `rx.Observable` `asObservable`(`rx.Single` v1 @kind object) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L48f270.  v0:= new `rx.internal.operators.SingleToObservable`;
  #L48f274.  v1:= v1.`rx.Single.onSubscribe` @type ^`rx.Single$OnSubscribe` @kind object;
  #L48f278.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/SingleToObservable;.<init>:(Lrx/Single$OnSubscribe;)V` @kind direct;
  #L48f27e.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L48f284.  v1:= temp @kind object;
  #L48f286.  return v1 @kind object;
}
procedure `rx.Observable` `concat`(`rx.Single` v0 @kind object, `rx.Single` v1 @kind object) @signature `Lrx/Single;.concat:(Lrx/Single;Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48f298.  call temp:= `asObservable`(v0) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f29e.  v0:= temp @kind object;
  #L48f2a0.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f2a6.  v1:= temp @kind object;
  #L48f2a8.  call temp:= `concat`(v0, v1) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48f2ae.  v0:= temp @kind object;
  #L48f2b0.  return v0 @kind object;
}
procedure `rx.Observable` `concat`(`rx.Single` v0 @kind object, `rx.Single` v1 @kind object, `rx.Single` v2 @kind object) @signature `Lrx/Single;.concat:(Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48f2c4.  call temp:= `asObservable`(v0) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f2ca.  v0:= temp @kind object;
  #L48f2cc.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f2d2.  v1:= temp @kind object;
  #L48f2d4.  call temp:= `asObservable`(v2) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f2da.  v2:= temp @kind object;
  #L48f2dc.  call temp:= `concat`(v0, v1, v2) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48f2e2.  v0:= temp @kind object;
  #L48f2e4.  return v0 @kind object;
}
procedure `rx.Observable` `concat`(`rx.Single` v0 @kind object, `rx.Single` v1 @kind object, `rx.Single` v2 @kind object, `rx.Single` v3 @kind object) @signature `Lrx/Single;.concat:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48f2f8.  call temp:= `asObservable`(v0) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f2fe.  v0:= temp @kind object;
  #L48f300.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f306.  v1:= temp @kind object;
  #L48f308.  call temp:= `asObservable`(v2) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f30e.  v2:= temp @kind object;
  #L48f310.  call temp:= `asObservable`(v3) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f316.  v3:= temp @kind object;
  #L48f318.  call temp:= `concat`(v0, v1, v2, v3) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48f31e.  v0:= temp @kind object;
  #L48f320.  return v0 @kind object;
}
procedure `rx.Observable` `concat`(`rx.Single` v0 @kind object, `rx.Single` v1 @kind object, `rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.Single` v4 @kind object) @signature `Lrx/Single;.concat:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48f334.  call temp:= `asObservable`(v0) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f33a.  v0:= temp @kind object;
  #L48f33c.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f342.  v1:= temp @kind object;
  #L48f344.  call temp:= `asObservable`(v2) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f34a.  v2:= temp @kind object;
  #L48f34c.  call temp:= `asObservable`(v3) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f352.  v3:= temp @kind object;
  #L48f354.  call temp:= `asObservable`(v4) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f35a.  v4:= temp @kind object;
  #L48f35c.  call temp:= `concat`(v0, v1, v2, v3, v4) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48f362.  v0:= temp @kind object;
  #L48f364.  return v0 @kind object;
}
procedure `rx.Observable` `concat`(`rx.Single` v0 @kind object, `rx.Single` v1 @kind object, `rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.Single` v4 @kind object, `rx.Single` v5 @kind object) @signature `Lrx/Single;.concat:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48f378.  call temp:= `asObservable`(v0) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f37e.  v0:= temp @kind object;
  #L48f380.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f386.  v1:= temp @kind object;
  #L48f388.  call temp:= `asObservable`(v2) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f38e.  v2:= temp @kind object;
  #L48f390.  call temp:= `asObservable`(v3) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f396.  v3:= temp @kind object;
  #L48f398.  call temp:= `asObservable`(v4) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f39e.  v4:= temp @kind object;
  #L48f3a0.  call temp:= `asObservable`(v5) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f3a6.  v5:= temp @kind object;
  #L48f3a8.  call temp:= `concat`(v0, v1, v2, v3, v4, v5) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48f3ae.  v0:= temp @kind object;
  #L48f3b0.  return v0 @kind object;
}
procedure `rx.Observable` `concat`(`rx.Single` v0 @kind object, `rx.Single` v1 @kind object, `rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.Single` v4 @kind object, `rx.Single` v5 @kind object, `rx.Single` v6 @kind object) @signature `Lrx/Single;.concat:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48f3c4.  call temp:= `asObservable`(v0) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f3ca.  v0:= temp @kind object;
  #L48f3cc.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f3d2.  v1:= temp @kind object;
  #L48f3d4.  call temp:= `asObservable`(v2) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f3da.  v2:= temp @kind object;
  #L48f3dc.  call temp:= `asObservable`(v3) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f3e2.  v3:= temp @kind object;
  #L48f3e4.  call temp:= `asObservable`(v4) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f3ea.  v4:= temp @kind object;
  #L48f3ec.  call temp:= `asObservable`(v5) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f3f2.  v5:= temp @kind object;
  #L48f3f4.  call temp:= `asObservable`(v6) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f3fa.  v6:= temp @kind object;
  #L48f3fc.  call temp:= `concat`(v0, v1, v2, v3, v4, v5, v6) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48f402.  v0:= temp @kind object;
  #L48f404.  return v0 @kind object;
}
procedure `rx.Observable` `concat`(`rx.Single` v0 @kind object, `rx.Single` v1 @kind object, `rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.Single` v4 @kind object, `rx.Single` v5 @kind object, `rx.Single` v6 @kind object, `rx.Single` v7 @kind object) @signature `Lrx/Single;.concat:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48f418.  call temp:= `asObservable`(v0) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f41e.  v0:= temp @kind object;
  #L48f420.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f426.  v1:= temp @kind object;
  #L48f428.  call temp:= `asObservable`(v2) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f42e.  v2:= temp @kind object;
  #L48f430.  call temp:= `asObservable`(v3) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f436.  v3:= temp @kind object;
  #L48f438.  call temp:= `asObservable`(v4) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f43e.  v4:= temp @kind object;
  #L48f440.  call temp:= `asObservable`(v5) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f446.  v5:= temp @kind object;
  #L48f448.  call temp:= `asObservable`(v6) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f44e.  v6:= temp @kind object;
  #L48f450.  call temp:= `asObservable`(v7) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f456.  v7:= temp @kind object;
  #L48f458.  call temp:= `concat`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48f45e.  v0:= temp @kind object;
  #L48f460.  return v0 @kind object;
}
procedure `rx.Observable` `concat`(`rx.Single` v0 @kind object, `rx.Single` v1 @kind object, `rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.Single` v4 @kind object, `rx.Single` v5 @kind object, `rx.Single` v6 @kind object, `rx.Single` v7 @kind object, `rx.Single` v8 @kind object) @signature `Lrx/Single;.concat:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48f474.  call temp:= `asObservable`(v0) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f47a.  v0:= temp @kind object;
  #L48f47c.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f482.  v1:= temp @kind object;
  #L48f484.  call temp:= `asObservable`(v2) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f48a.  v2:= temp @kind object;
  #L48f48c.  call temp:= `asObservable`(v3) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f492.  v3:= temp @kind object;
  #L48f494.  call temp:= `asObservable`(v4) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f49a.  v4:= temp @kind object;
  #L48f49c.  call temp:= `asObservable`(v5) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f4a2.  v5:= temp @kind object;
  #L48f4a4.  call temp:= `asObservable`(v6) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f4aa.  v6:= temp @kind object;
  #L48f4ac.  call temp:= `asObservable`(v7) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f4b2.  v7:= temp @kind object;
  #L48f4b4.  call temp:= `asObservable`(v8) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f4ba.  v8:= temp @kind object;
  #L48f4bc.  call temp:= `concat`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48f4c2.  v0:= temp @kind object;
  #L48f4c4.  return v0 @kind object;
}
procedure `rx.Single` `create`(`rx.Single$OnSubscribe` v1 @kind object) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48f7e4.  v0:= new `rx.Single`;
  #L48f7e8.  call `<init>`(v0, v1) @signature `Lrx/Single;.<init>:(Lrx/Single$OnSubscribe;)V` @kind direct;
  #L48f7ee.  return v0 @kind object;
}
procedure `rx.Single` `defer`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lrx/Single;.defer:(Ljava/util/concurrent/Callable;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48f800.  v0:= new `rx.Single$17`;
  #L48f804.  call `<init>`(v0, v1) @signature `Lrx/Single$17;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L48f80a.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48f810.  v1:= temp @kind object;
  #L48f812.  return v1 @kind object;
}
procedure `rx.Single` `error`(`java.lang.Throwable` v1 @kind object) @signature `Lrx/Single;.error:(Ljava/lang/Throwable;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48f9f8.  v0:= new `rx.Single$1`;
  #L48f9fc.  call `<init>`(v0, v1) @signature `Lrx/Single$1;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L48fa02.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48fa08.  v1:= temp @kind object;
  #L48fa0a.  return v1 @kind object;
}
procedure `rx.Single` `from`(`java.util.concurrent.Future` v4 @kind object) @signature `Lrx/Single;.from:(Ljava/util/concurrent/Future;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48fa58.  v0:= new `rx.internal.operators.SingleFromFuture`;
  #L48fa5c.  v1:= 0L;
  #L48fa60.  v3:= 0I;
  #L48fa62.  call `<init>`(v0, v4, v1, v3) @signature `Lrx/internal/operators/SingleFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L48fa68.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48fa6e.  v4:= temp @kind object;
  #L48fa70.  return v4 @kind object;
}
procedure `rx.Single` `from`(`java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lrx/Single;.from:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48fa84.  if v4 == 0 then goto L48fa9c;
  #L48fa88.  v0:= new `rx.internal.operators.SingleFromFuture`;
  #L48fa8c.  call `<init>`(v0, v1, v2, v4) @signature `Lrx/internal/operators/SingleFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L48fa92.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48fa98.  v1:= temp @kind object;
  #L48fa9a.  return v1 @kind object;
  #L48fa9c.  v1:= new `java.lang.NullPointerException`;
  #L48faa0.  v2:= "unit is null" @kind object;
  #L48faa4.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48faaa.  throw v1;
}
procedure `rx.Single` `from`(`java.util.concurrent.Future` v0 @kind object, `rx.Scheduler` v1 @kind object) @signature `Lrx/Single;.from:(Ljava/util/concurrent/Future;Lrx/Scheduler;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48fabc.  call temp:= `from`(v0) @signature `Lrx/Single;.from:(Ljava/util/concurrent/Future;)Lrx/Single;` @kind static;
  #L48fac2.  v0:= temp @kind object;
  #L48fac4.  call temp:= `subscribeOn`(v0, v1) @signature `Lrx/Single;.subscribeOn:(Lrx/Scheduler;)Lrx/Single;` @kind virtual;
  #L48faca.  v0:= temp @kind object;
  #L48facc.  return v0 @kind object;
}
procedure `rx.Single` `fromCallable`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lrx/Single;.fromCallable:(Ljava/util/concurrent/Callable;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48fae0.  v0:= new `rx.internal.operators.SingleFromCallable`;
  #L48fae4.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/SingleFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L48faea.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48faf0.  v1:= temp @kind object;
  #L48faf2.  return v1 @kind object;
}
procedure `rx.Single`[] `iterableToArray`(`java.lang.Iterable` v5 @kind object) @signature `Lrx/Single;.iterableToArray:(Ljava/lang/Iterable;)[Lrx/Single;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4901c0.  v0:= instanceof @variable v5 @type ^`java.util.Collection` @kind boolean;
  #L4901c4.  if v0 == 0 then goto L4901e6;
  #L4901c8.  v5:= (`java.util.Collection`) v5 @kind object;
  #L4901cc.  call temp:= `size`(v5) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L4901d2.  v0:= temp;
  #L4901d4.  v0:= new `rx.Single`[v0];
  #L4901d8.  call temp:= `toArray`(v5, v0) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L4901de.  v5:= temp @kind object;
  #L4901e0.  v5:= (`rx.Single`[]) v5 @kind object;
  #L4901e4.  goto L490248;
  #L4901e6.  v0:= 8I;
  #L4901ea.  v0:= new `rx.Single`[v0];
  #L4901ee.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4901f4.  v5:= temp @kind object;
  #L4901f6.  v1:= 0I;
  #L4901f8.  v2:= 0I;
  #L4901fa.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L490200.  v3:= temp;
  #L490202.  if v3 == 0 then goto L490234;
  #L490206.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49020c.  v3:= temp @kind object;
  #L49020e.  v3:= (`rx.Single`) v3 @kind object;
  #L490212.  v4:= length @variable v0;
  #L490214.  if v2 != v4 then goto L49022a;
  #L490218.  v4:= v2 ^> 2;
  #L49021c.  v4:= v4 + v2 @kind int;
  #L49021e.  v4:= new `rx.Single`[v4];
  #L490222.  call `arraycopy`(v0, v1, v4, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L490228.  v0:= v4 @kind object;
  #L49022a.  v0[v2]:= v3 @kind object;
  #L49022e.  v2:= v2 + 1;
  #L490232.  goto L4901fa;
  #L490234.  v5:= length @variable v0;
  #L490236.  if v5 != v2 then goto L49023e;
  #L49023a.  v5:= v0 @kind object;
  #L49023c.  goto L490248;
  #L49023e.  v5:= new `rx.Single`[v2];
  #L490242.  call `arraycopy`(v0, v1, v5, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L490248.  return v5 @kind object;
}
procedure `rx.Single` `just`(`java.lang.Object` v0 @kind object) @signature `Lrx/Single;.just:(Ljava/lang/Object;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48fb04.  call temp:= `create`(v0) @signature `Lrx/internal/util/ScalarSynchronousSingle;.create:(Ljava/lang/Object;)Lrx/internal/util/ScalarSynchronousSingle;` @kind static;
  #L48fb0a.  v0:= temp @kind object;
  #L48fb0c.  return v0 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Single` v0 @kind object, `rx.Single` v1 @kind object) @signature `Lrx/Single;.merge:(Lrx/Single;Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48f520.  call temp:= `asObservable`(v0) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f526.  v0:= temp @kind object;
  #L48f528.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f52e.  v1:= temp @kind object;
  #L48f530.  call temp:= `merge`(v0, v1) @signature `Lrx/Observable;.merge:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48f536.  v0:= temp @kind object;
  #L48f538.  return v0 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Single` v0 @kind object, `rx.Single` v1 @kind object, `rx.Single` v2 @kind object) @signature `Lrx/Single;.merge:(Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48f54c.  call temp:= `asObservable`(v0) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f552.  v0:= temp @kind object;
  #L48f554.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f55a.  v1:= temp @kind object;
  #L48f55c.  call temp:= `asObservable`(v2) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f562.  v2:= temp @kind object;
  #L48f564.  call temp:= `merge`(v0, v1, v2) @signature `Lrx/Observable;.merge:(Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48f56a.  v0:= temp @kind object;
  #L48f56c.  return v0 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Single` v0 @kind object, `rx.Single` v1 @kind object, `rx.Single` v2 @kind object, `rx.Single` v3 @kind object) @signature `Lrx/Single;.merge:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48f580.  call temp:= `asObservable`(v0) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f586.  v0:= temp @kind object;
  #L48f588.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f58e.  v1:= temp @kind object;
  #L48f590.  call temp:= `asObservable`(v2) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f596.  v2:= temp @kind object;
  #L48f598.  call temp:= `asObservable`(v3) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f59e.  v3:= temp @kind object;
  #L48f5a0.  call temp:= `merge`(v0, v1, v2, v3) @signature `Lrx/Observable;.merge:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48f5a6.  v0:= temp @kind object;
  #L48f5a8.  return v0 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Single` v0 @kind object, `rx.Single` v1 @kind object, `rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.Single` v4 @kind object) @signature `Lrx/Single;.merge:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48f5bc.  call temp:= `asObservable`(v0) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f5c2.  v0:= temp @kind object;
  #L48f5c4.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f5ca.  v1:= temp @kind object;
  #L48f5cc.  call temp:= `asObservable`(v2) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f5d2.  v2:= temp @kind object;
  #L48f5d4.  call temp:= `asObservable`(v3) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f5da.  v3:= temp @kind object;
  #L48f5dc.  call temp:= `asObservable`(v4) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f5e2.  v4:= temp @kind object;
  #L48f5e4.  call temp:= `merge`(v0, v1, v2, v3, v4) @signature `Lrx/Observable;.merge:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48f5ea.  v0:= temp @kind object;
  #L48f5ec.  return v0 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Single` v0 @kind object, `rx.Single` v1 @kind object, `rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.Single` v4 @kind object, `rx.Single` v5 @kind object) @signature `Lrx/Single;.merge:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48f600.  call temp:= `asObservable`(v0) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f606.  v0:= temp @kind object;
  #L48f608.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f60e.  v1:= temp @kind object;
  #L48f610.  call temp:= `asObservable`(v2) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f616.  v2:= temp @kind object;
  #L48f618.  call temp:= `asObservable`(v3) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f61e.  v3:= temp @kind object;
  #L48f620.  call temp:= `asObservable`(v4) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f626.  v4:= temp @kind object;
  #L48f628.  call temp:= `asObservable`(v5) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f62e.  v5:= temp @kind object;
  #L48f630.  call temp:= `merge`(v0, v1, v2, v3, v4, v5) @signature `Lrx/Observable;.merge:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48f636.  v0:= temp @kind object;
  #L48f638.  return v0 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Single` v0 @kind object, `rx.Single` v1 @kind object, `rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.Single` v4 @kind object, `rx.Single` v5 @kind object, `rx.Single` v6 @kind object) @signature `Lrx/Single;.merge:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48f64c.  call temp:= `asObservable`(v0) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f652.  v0:= temp @kind object;
  #L48f654.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f65a.  v1:= temp @kind object;
  #L48f65c.  call temp:= `asObservable`(v2) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f662.  v2:= temp @kind object;
  #L48f664.  call temp:= `asObservable`(v3) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f66a.  v3:= temp @kind object;
  #L48f66c.  call temp:= `asObservable`(v4) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f672.  v4:= temp @kind object;
  #L48f674.  call temp:= `asObservable`(v5) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f67a.  v5:= temp @kind object;
  #L48f67c.  call temp:= `asObservable`(v6) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f682.  v6:= temp @kind object;
  #L48f684.  call temp:= `merge`(v0, v1, v2, v3, v4, v5, v6) @signature `Lrx/Observable;.merge:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48f68a.  v0:= temp @kind object;
  #L48f68c.  return v0 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Single` v0 @kind object, `rx.Single` v1 @kind object, `rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.Single` v4 @kind object, `rx.Single` v5 @kind object, `rx.Single` v6 @kind object, `rx.Single` v7 @kind object) @signature `Lrx/Single;.merge:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48f6a0.  call temp:= `asObservable`(v0) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f6a6.  v0:= temp @kind object;
  #L48f6a8.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f6ae.  v1:= temp @kind object;
  #L48f6b0.  call temp:= `asObservable`(v2) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f6b6.  v2:= temp @kind object;
  #L48f6b8.  call temp:= `asObservable`(v3) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f6be.  v3:= temp @kind object;
  #L48f6c0.  call temp:= `asObservable`(v4) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f6c6.  v4:= temp @kind object;
  #L48f6c8.  call temp:= `asObservable`(v5) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f6ce.  v5:= temp @kind object;
  #L48f6d0.  call temp:= `asObservable`(v6) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f6d6.  v6:= temp @kind object;
  #L48f6d8.  call temp:= `asObservable`(v7) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f6de.  v7:= temp @kind object;
  #L48f6e0.  call temp:= `merge`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lrx/Observable;.merge:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48f6e6.  v0:= temp @kind object;
  #L48f6e8.  return v0 @kind object;
}
procedure `rx.Observable` `merge`(`rx.Single` v0 @kind object, `rx.Single` v1 @kind object, `rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.Single` v4 @kind object, `rx.Single` v5 @kind object, `rx.Single` v6 @kind object, `rx.Single` v7 @kind object, `rx.Single` v8 @kind object) @signature `Lrx/Single;.merge:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48f6fc.  call temp:= `asObservable`(v0) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f702.  v0:= temp @kind object;
  #L48f704.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f70a.  v1:= temp @kind object;
  #L48f70c.  call temp:= `asObservable`(v2) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f712.  v2:= temp @kind object;
  #L48f714.  call temp:= `asObservable`(v3) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f71a.  v3:= temp @kind object;
  #L48f71c.  call temp:= `asObservable`(v4) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f722.  v4:= temp @kind object;
  #L48f724.  call temp:= `asObservable`(v5) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f72a.  v5:= temp @kind object;
  #L48f72c.  call temp:= `asObservable`(v6) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f732.  v6:= temp @kind object;
  #L48f734.  call temp:= `asObservable`(v7) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f73a.  v7:= temp @kind object;
  #L48f73c.  call temp:= `asObservable`(v8) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f742.  v8:= temp @kind object;
  #L48f744.  call temp:= `merge`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lrx/Observable;.merge:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48f74a.  v0:= temp @kind object;
  #L48f74c.  return v0 @kind object;
}
procedure `rx.Single` `merge`(`rx.Single` v1 @kind object) @signature `Lrx/Single;.merge:(Lrx/Single;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48fb6c.  v0:= instanceof @variable v1 @type ^`rx.internal.util.ScalarSynchronousSingle` @kind boolean;
  #L48fb70.  if v0 == 0 then goto L48fb8a;
  #L48fb74.  v1:= (`rx.internal.util.ScalarSynchronousSingle`) v1 @kind object;
  #L48fb78.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L48fb7e.  v0:= temp @kind object;
  #L48fb80.  call temp:= `scalarFlatMap`(v1, v0) @signature `Lrx/internal/util/ScalarSynchronousSingle;.scalarFlatMap:(Lrx/functions/Func1;)Lrx/Single;` @kind virtual;
  #L48fb86.  v1:= temp @kind object;
  #L48fb88.  return v1 @kind object;
  #L48fb8a.  v0:= new `rx.Single$2`;
  #L48fb8e.  call `<init>`(v0, v1) @signature `Lrx/Single$2;.<init>:(Lrx/Single;)V` @kind direct;
  #L48fb94.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48fb9a.  v1:= temp @kind object;
  #L48fb9c.  return v1 @kind object;
}
procedure `rx.Subscription` `unsafeSubscribe`(`rx.Single` v3 @kind this, `rx.Subscriber` v4 @kind object, `boolean` v5 ) @signature `Lrx/Single;.unsafeSubscribe:(Lrx/Subscriber;Z)Lrx/Subscription;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L490468.  if v5 == 0 then goto L490472;
  #L49046c.  call `onStart`(v4) @signature `Lrx/Subscriber;.onStart:()V` @kind virtual;
  #L490472.  v5:= v3.`rx.Single.onSubscribe` @type ^`rx.Single$OnSubscribe` @kind object;
  #L490476.  call temp:= `onSingleStart`(v3, v5) @signature `Lrx/plugins/RxJavaHooks;.onSingleStart:(Lrx/Single;Lrx/Single$OnSubscribe;)Lrx/Single$OnSubscribe;` @kind static;
  #L49047c.  v5:= temp @kind object;
  #L49047e.  call temp:= `wrap`(v4) @signature `Lrx/internal/operators/SingleLiftObservableOperator;.wrap:(Lrx/Subscriber;)Lrx/SingleSubscriber;` @kind static;
  #L490484.  v0:= temp @kind object;
  #L490486.  call `call`(v5, v0) @signature `Lrx/Single$OnSubscribe;.call:(Ljava/lang/Object;)V` @kind interface;
  #L49048c.  call temp:= `onSingleReturn`(v4) @signature `Lrx/plugins/RxJavaHooks;.onSingleReturn:(Lrx/Subscription;)Lrx/Subscription;` @kind static;
  #L490492.  v4:= temp @kind object;
  #L490494.  return v4 @kind object;
  #L490496.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L490498.  call `throwIfFatal`(v5) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49049e.  call temp:= `onSingleError`(v5) @signature `Lrx/plugins/RxJavaHooks;.onSingleError:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L4904a4.  v0:= temp @kind object;
  #L4904a6.  call `onError`(v4, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4904ac.  call temp:= `unsubscribed`() @signature `Lrx/subscriptions/Subscriptions;.unsubscribed:()Lrx/Subscription;` @kind static;
  #L4904b2.  v4:= temp @kind object;
  #L4904b4.  return v4 @kind object;
  #L4904b6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4904b8.  call `throwIfFatal`(v4) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4904be.  v0:= new `java.lang.RuntimeException`;
  #L4904c2.  v1:= new `java.lang.StringBuilder`;
  #L4904c6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4904cc.  v2:= "Error occurred attempting to subscribe [" @kind object;
  #L4904d0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4904d6.  call temp:= `getMessage`(v5) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L4904dc.  v5:= temp @kind object;
  #L4904de.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4904e4.  v5:= "] and then again while trying to pass to onError." @kind object;
  #L4904e8.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4904ee.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4904f4.  v5:= temp @kind object;
  #L4904f6.  call `<init>`(v0, v5, v4) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4904fc.  call temp:= `onSingleError`(v0) @signature `Lrx/plugins/RxJavaHooks;.onSingleError:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L490502.  throw v0;
  catch `java.lang.Throwable` @[L49046c..L490494] goto L490496;
  catch `java.lang.Throwable` @[L49049e..L4904ac] goto L4904b6;
}
procedure `rx.Single` `using`(`rx.functions.Func0` v1 @kind object, `rx.functions.Func1` v2 @kind object, `rx.functions.Action1` v3 @kind object) @signature `Lrx/Single;.using:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48fea0.  v0:= 0I;
  #L48fea2.  call temp:= `using`(v1, v2, v3, v0) @signature `Lrx/Single;.using:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;Z)Lrx/Single;` @kind static;
  #L48fea8.  v1:= temp @kind object;
  #L48feaa.  return v1 @kind object;
}
procedure `rx.Single` `using`(`rx.functions.Func0` v1 @kind object, `rx.functions.Func1` v2 @kind object, `rx.functions.Action1` v3 @kind object, `boolean` v4 ) @signature `Lrx/Single;.using:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;Z)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48febc.  if v1 == 0 then goto L48fefc;
  #L48fec0.  if v2 == 0 then goto L48feec;
  #L48fec4.  if v3 == 0 then goto L48fedc;
  #L48fec8.  v0:= new `rx.internal.operators.SingleOnSubscribeUsing`;
  #L48fecc.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lrx/internal/operators/SingleOnSubscribeUsing;.<init>:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;Z)V` @kind direct;
  #L48fed2.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48fed8.  v1:= temp @kind object;
  #L48feda.  return v1 @kind object;
  #L48fedc.  v1:= new `java.lang.NullPointerException`;
  #L48fee0.  v2:= "disposeAction is null" @kind object;
  #L48fee4.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48feea.  throw v1;
  #L48feec.  v1:= new `java.lang.NullPointerException`;
  #L48fef0.  v2:= "singleFactory is null" @kind object;
  #L48fef4.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48fefa.  throw v1;
  #L48fefc.  v1:= new `java.lang.NullPointerException`;
  #L48ff00.  v2:= "resourceFactory is null" @kind object;
  #L48ff04.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48ff0a.  throw v1;
}
procedure `rx.Single` `zip`(`java.lang.Iterable` v0 @kind object, `rx.functions.FuncN` v1 @kind object) @signature `Lrx/Single;.zip:(Ljava/lang/Iterable;Lrx/functions/FuncN;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48ff1c.  call temp:= `iterableToArray`(v0) @signature `Lrx/Single;.iterableToArray:(Ljava/lang/Iterable;)[Lrx/Single;` @kind static;
  #L48ff22.  v0:= temp @kind object;
  #L48ff24.  call temp:= `zip`(v0, v1) @signature `Lrx/internal/operators/SingleOperatorZip;.zip:([Lrx/Single;Lrx/functions/FuncN;)Lrx/Single;` @kind static;
  #L48ff2a.  v0:= temp @kind object;
  #L48ff2c.  return v0 @kind object;
}
procedure `rx.Single` `zip`(`rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.Single` v4 @kind object, `rx.Single` v5 @kind object, `rx.Single` v6 @kind object, `rx.Single` v7 @kind object, `rx.Single` v8 @kind object, `rx.Single` v9 @kind object, `rx.Single` v10 @kind object, `rx.functions.Func9` v11 @kind object) @signature `Lrx/Single;.zip:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/functions/Func9;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48ff40.  v0:= 9I;
  #L48ff44.  v0:= new `rx.Single`[v0];
  #L48ff48.  v1:= 0I;
  #L48ff4a.  v0[v1]:= v2 @kind object;
  #L48ff4e.  v2:= 1I;
  #L48ff50.  v0[v2]:= v3 @kind object;
  #L48ff54.  v2:= 2I;
  #L48ff56.  v0[v2]:= v4 @kind object;
  #L48ff5a.  v2:= 3I;
  #L48ff5c.  v0[v2]:= v5 @kind object;
  #L48ff60.  v2:= 4I;
  #L48ff62.  v0[v2]:= v6 @kind object;
  #L48ff66.  v2:= 5I;
  #L48ff68.  v0[v2]:= v7 @kind object;
  #L48ff6c.  v2:= 6I;
  #L48ff6e.  v0[v2]:= v8 @kind object;
  #L48ff72.  v2:= 7I;
  #L48ff74.  v0[v2]:= v9 @kind object;
  #L48ff78.  v2:= 8I;
  #L48ff7c.  v0[v2]:= v10 @kind object;
  #L48ff80.  v2:= new `rx.Single$10`;
  #L48ff84.  call `<init>`(v2, v11) @signature `Lrx/Single$10;.<init>:(Lrx/functions/Func9;)V` @kind direct;
  #L48ff8a.  call temp:= `zip`(v0, v2) @signature `Lrx/internal/operators/SingleOperatorZip;.zip:([Lrx/Single;Lrx/functions/FuncN;)Lrx/Single;` @kind static;
  #L48ff90.  v2:= temp @kind object;
  #L48ff92.  return v2 @kind object;
}
procedure `rx.Single` `zip`(`rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.Single` v4 @kind object, `rx.Single` v5 @kind object, `rx.Single` v6 @kind object, `rx.Single` v7 @kind object, `rx.Single` v8 @kind object, `rx.Single` v9 @kind object, `rx.functions.Func8` v10 @kind object) @signature `Lrx/Single;.zip:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/functions/Func8;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48ffa4.  v0:= 8I;
  #L48ffa8.  v0:= new `rx.Single`[v0];
  #L48ffac.  v1:= 0I;
  #L48ffae.  v0[v1]:= v2 @kind object;
  #L48ffb2.  v2:= 1I;
  #L48ffb4.  v0[v2]:= v3 @kind object;
  #L48ffb8.  v2:= 2I;
  #L48ffba.  v0[v2]:= v4 @kind object;
  #L48ffbe.  v2:= 3I;
  #L48ffc0.  v0[v2]:= v5 @kind object;
  #L48ffc4.  v2:= 4I;
  #L48ffc6.  v0[v2]:= v6 @kind object;
  #L48ffca.  v2:= 5I;
  #L48ffcc.  v0[v2]:= v7 @kind object;
  #L48ffd0.  v2:= 6I;
  #L48ffd2.  v0[v2]:= v8 @kind object;
  #L48ffd6.  v2:= 7I;
  #L48ffd8.  v0[v2]:= v9 @kind object;
  #L48ffdc.  v2:= new `rx.Single$9`;
  #L48ffe0.  call `<init>`(v2, v10) @signature `Lrx/Single$9;.<init>:(Lrx/functions/Func8;)V` @kind direct;
  #L48ffe6.  call temp:= `zip`(v0, v2) @signature `Lrx/internal/operators/SingleOperatorZip;.zip:([Lrx/Single;Lrx/functions/FuncN;)Lrx/Single;` @kind static;
  #L48ffec.  v2:= temp @kind object;
  #L48ffee.  return v2 @kind object;
}
procedure `rx.Single` `zip`(`rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.Single` v4 @kind object, `rx.Single` v5 @kind object, `rx.Single` v6 @kind object, `rx.Single` v7 @kind object, `rx.Single` v8 @kind object, `rx.functions.Func7` v9 @kind object) @signature `Lrx/Single;.zip:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/functions/Func7;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L490000.  v0:= 7I;
  #L490002.  v0:= new `rx.Single`[v0];
  #L490006.  v1:= 0I;
  #L490008.  v0[v1]:= v2 @kind object;
  #L49000c.  v2:= 1I;
  #L49000e.  v0[v2]:= v3 @kind object;
  #L490012.  v2:= 2I;
  #L490014.  v0[v2]:= v4 @kind object;
  #L490018.  v2:= 3I;
  #L49001a.  v0[v2]:= v5 @kind object;
  #L49001e.  v2:= 4I;
  #L490020.  v0[v2]:= v6 @kind object;
  #L490024.  v2:= 5I;
  #L490026.  v0[v2]:= v7 @kind object;
  #L49002a.  v2:= 6I;
  #L49002c.  v0[v2]:= v8 @kind object;
  #L490030.  v2:= new `rx.Single$8`;
  #L490034.  call `<init>`(v2, v9) @signature `Lrx/Single$8;.<init>:(Lrx/functions/Func7;)V` @kind direct;
  #L49003a.  call temp:= `zip`(v0, v2) @signature `Lrx/internal/operators/SingleOperatorZip;.zip:([Lrx/Single;Lrx/functions/FuncN;)Lrx/Single;` @kind static;
  #L490040.  v2:= temp @kind object;
  #L490042.  return v2 @kind object;
}
procedure `rx.Single` `zip`(`rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.Single` v4 @kind object, `rx.Single` v5 @kind object, `rx.Single` v6 @kind object, `rx.Single` v7 @kind object, `rx.functions.Func6` v8 @kind object) @signature `Lrx/Single;.zip:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/functions/Func6;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L490054.  v0:= 6I;
  #L490056.  v0:= new `rx.Single`[v0];
  #L49005a.  v1:= 0I;
  #L49005c.  v0[v1]:= v2 @kind object;
  #L490060.  v2:= 1I;
  #L490062.  v0[v2]:= v3 @kind object;
  #L490066.  v2:= 2I;
  #L490068.  v0[v2]:= v4 @kind object;
  #L49006c.  v2:= 3I;
  #L49006e.  v0[v2]:= v5 @kind object;
  #L490072.  v2:= 4I;
  #L490074.  v0[v2]:= v6 @kind object;
  #L490078.  v2:= 5I;
  #L49007a.  v0[v2]:= v7 @kind object;
  #L49007e.  v2:= new `rx.Single$7`;
  #L490082.  call `<init>`(v2, v8) @signature `Lrx/Single$7;.<init>:(Lrx/functions/Func6;)V` @kind direct;
  #L490088.  call temp:= `zip`(v0, v2) @signature `Lrx/internal/operators/SingleOperatorZip;.zip:([Lrx/Single;Lrx/functions/FuncN;)Lrx/Single;` @kind static;
  #L49008e.  v2:= temp @kind object;
  #L490090.  return v2 @kind object;
}
procedure `rx.Single` `zip`(`rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.Single` v4 @kind object, `rx.Single` v5 @kind object, `rx.Single` v6 @kind object, `rx.functions.Func5` v7 @kind object) @signature `Lrx/Single;.zip:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/functions/Func5;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4900a4.  v0:= 5I;
  #L4900a6.  v0:= new `rx.Single`[v0];
  #L4900aa.  v1:= 0I;
  #L4900ac.  v0[v1]:= v2 @kind object;
  #L4900b0.  v2:= 1I;
  #L4900b2.  v0[v2]:= v3 @kind object;
  #L4900b6.  v2:= 2I;
  #L4900b8.  v0[v2]:= v4 @kind object;
  #L4900bc.  v2:= 3I;
  #L4900be.  v0[v2]:= v5 @kind object;
  #L4900c2.  v2:= 4I;
  #L4900c4.  v0[v2]:= v6 @kind object;
  #L4900c8.  v2:= new `rx.Single$6`;
  #L4900cc.  call `<init>`(v2, v7) @signature `Lrx/Single$6;.<init>:(Lrx/functions/Func5;)V` @kind direct;
  #L4900d2.  call temp:= `zip`(v0, v2) @signature `Lrx/internal/operators/SingleOperatorZip;.zip:([Lrx/Single;Lrx/functions/FuncN;)Lrx/Single;` @kind static;
  #L4900d8.  v2:= temp @kind object;
  #L4900da.  return v2 @kind object;
}
procedure `rx.Single` `zip`(`rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.Single` v4 @kind object, `rx.Single` v5 @kind object, `rx.functions.Func4` v6 @kind object) @signature `Lrx/Single;.zip:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/functions/Func4;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4900ec.  v0:= 4I;
  #L4900ee.  v0:= new `rx.Single`[v0];
  #L4900f2.  v1:= 0I;
  #L4900f4.  v0[v1]:= v2 @kind object;
  #L4900f8.  v2:= 1I;
  #L4900fa.  v0[v2]:= v3 @kind object;
  #L4900fe.  v2:= 2I;
  #L490100.  v0[v2]:= v4 @kind object;
  #L490104.  v2:= 3I;
  #L490106.  v0[v2]:= v5 @kind object;
  #L49010a.  v2:= new `rx.Single$5`;
  #L49010e.  call `<init>`(v2, v6) @signature `Lrx/Single$5;.<init>:(Lrx/functions/Func4;)V` @kind direct;
  #L490114.  call temp:= `zip`(v0, v2) @signature `Lrx/internal/operators/SingleOperatorZip;.zip:([Lrx/Single;Lrx/functions/FuncN;)Lrx/Single;` @kind static;
  #L49011a.  v2:= temp @kind object;
  #L49011c.  return v2 @kind object;
}
procedure `rx.Single` `zip`(`rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.Single` v4 @kind object, `rx.functions.Func3` v5 @kind object) @signature `Lrx/Single;.zip:(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/functions/Func3;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L490130.  v0:= 3I;
  #L490132.  v0:= new `rx.Single`[v0];
  #L490136.  v1:= 0I;
  #L490138.  v0[v1]:= v2 @kind object;
  #L49013c.  v2:= 1I;
  #L49013e.  v0[v2]:= v3 @kind object;
  #L490142.  v2:= 2I;
  #L490144.  v0[v2]:= v4 @kind object;
  #L490148.  v2:= new `rx.Single$4`;
  #L49014c.  call `<init>`(v2, v5) @signature `Lrx/Single$4;.<init>:(Lrx/functions/Func3;)V` @kind direct;
  #L490152.  call temp:= `zip`(v0, v2) @signature `Lrx/internal/operators/SingleOperatorZip;.zip:([Lrx/Single;Lrx/functions/FuncN;)Lrx/Single;` @kind static;
  #L490158.  v2:= temp @kind object;
  #L49015a.  return v2 @kind object;
}
procedure `rx.Single` `zip`(`rx.Single` v2 @kind object, `rx.Single` v3 @kind object, `rx.functions.Func2` v4 @kind object) @signature `Lrx/Single;.zip:(Lrx/Single;Lrx/Single;Lrx/functions/Func2;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L49016c.  v0:= 2I;
  #L49016e.  v0:= new `rx.Single`[v0];
  #L490172.  v1:= 0I;
  #L490174.  v0[v1]:= v2 @kind object;
  #L490178.  v2:= 1I;
  #L49017a.  v0[v2]:= v3 @kind object;
  #L49017e.  v2:= new `rx.Single$3`;
  #L490182.  call `<init>`(v2, v4) @signature `Lrx/Single$3;.<init>:(Lrx/functions/Func2;)V` @kind direct;
  #L490188.  call temp:= `zip`(v0, v2) @signature `Lrx/internal/operators/SingleOperatorZip;.zip:([Lrx/Single;Lrx/functions/FuncN;)Lrx/Single;` @kind static;
  #L49018e.  v2:= temp @kind object;
  #L490190.  return v2 @kind object;
}
procedure `rx.Single` `cache`(`rx.Single` v2 @kind this) @signature `Lrx/Single;.cache:()Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48f798.  call temp:= `toObservable`(v2) @signature `Lrx/Single;.toObservable:()Lrx/Observable;` @kind virtual;
  #L48f79e.  v0:= temp @kind object;
  #L48f7a0.  v1:= 1I;
  #L48f7a2.  call temp:= `cacheWithInitialCapacity`(v0, v1) @signature `Lrx/Observable;.cacheWithInitialCapacity:(I)Lrx/Observable;` @kind virtual;
  #L48f7a8.  v0:= temp @kind object;
  #L48f7aa.  call temp:= `toSingle`(v0) @signature `Lrx/Observable;.toSingle:()Lrx/Single;` @kind virtual;
  #L48f7b0.  v0:= temp @kind object;
  #L48f7b2.  return v0 @kind object;
}
procedure `rx.Single` `compose`(`rx.Single` v0 @kind this, `rx.Single$Transformer` v1 @kind object) @signature `Lrx/Single;.compose:(Lrx/Single$Transformer;)Lrx/Single;` @AccessFlag PUBLIC {
    temp;

  #L48f7c4.  call temp:= `call`(v1, v0) @signature `Lrx/Single$Transformer;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48f7ca.  v1:= temp @kind object;
  #L48f7cc.  v1:= (`rx.Single`) v1 @kind object;
  #L48f7d0.  return v1 @kind object;
}
procedure `rx.Observable` `concatWith`(`rx.Single` v0 @kind this, `rx.Single` v1 @kind object) @signature `Lrx/Single;.concatWith:(Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48f4d8.  call temp:= `concat`(v0, v1) @signature `Lrx/Single;.concat:(Lrx/Single;Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f4de.  v1:= temp @kind object;
  #L48f4e0.  return v1 @kind object;
}
procedure `rx.Single` `delay`(`rx.Single` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lrx/Single;.delay:(JLjava/util/concurrent/TimeUnit;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48f824.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48f82a.  v0:= temp @kind object;
  #L48f82c.  call temp:= `delay`(v1, v2, v4, v0) @signature `Lrx/Single;.delay:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Single;` @kind virtual;
  #L48f832.  v2:= temp @kind object;
  #L48f834.  return v2 @kind object;
}
procedure `rx.Single` `delay`(`rx.Single` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `rx.Scheduler` v11 @kind object) @signature `Lrx/Single;.delay:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48f848.  v6:= new `rx.internal.operators.SingleDelay`;
  #L48f84c.  v1:= v7.`rx.Single.onSubscribe` @type ^`rx.Single$OnSubscribe` @kind object;
  #L48f850.  v0:= v6 @kind object;
  #L48f852.  v2:= v8 @kind wide;
  #L48f854.  v4:= v10 @kind object;
  #L48f856.  v5:= v11 @kind object;
  #L48f858.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lrx/internal/operators/SingleDelay;.<init>:(Lrx/Single$OnSubscribe;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @kind direct;
  #L48f85e.  call temp:= `create`(v6) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48f864.  v8:= temp @kind object;
  #L48f866.  return v8 @kind object;
}
procedure `rx.Single` `delaySubscription`(`rx.Single` v1 @kind this, `rx.Observable` v2 @kind object) @signature `Lrx/Single;.delaySubscription:(Lrx/Observable;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48f878.  if v2 == 0 then goto L48f890;
  #L48f87c.  v0:= new `rx.internal.operators.SingleOnSubscribeDelaySubscriptionOther`;
  #L48f880.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/SingleOnSubscribeDelaySubscriptionOther;.<init>:(Lrx/Single;Lrx/Observable;)V` @kind direct;
  #L48f886.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48f88c.  v2:= temp @kind object;
  #L48f88e.  return v2 @kind object;
  #L48f890.  v2:= new `java.lang.NullPointerException`;
  #L48f894.  call `<init>`(v2) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L48f89a.  throw v2;
}
procedure `rx.Single` `doAfterTerminate`(`rx.Single` v1 @kind this, `rx.functions.Action0` v2 @kind object) @signature `Lrx/Single;.doAfterTerminate:(Lrx/functions/Action0;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48f8ac.  v0:= new `rx.internal.operators.SingleDoAfterTerminate`;
  #L48f8b0.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/SingleDoAfterTerminate;.<init>:(Lrx/Single;Lrx/functions/Action0;)V` @kind direct;
  #L48f8b6.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48f8bc.  v2:= temp @kind object;
  #L48f8be.  return v2 @kind object;
}
procedure `rx.Single` `doOnEach`(`rx.Single` v3 @kind this, `rx.functions.Action1` v4 @kind object) @signature `Lrx/Single;.doOnEach:(Lrx/functions/Action1;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48f8d0.  if v4 == 0 then goto L48f8fc;
  #L48f8d4.  v0:= new `rx.internal.operators.SingleDoOnEvent`;
  #L48f8d8.  v1:= new `rx.Single$15`;
  #L48f8dc.  call `<init>`(v1, v3, v4) @signature `Lrx/Single$15;.<init>:(Lrx/Single;Lrx/functions/Action1;)V` @kind direct;
  #L48f8e2.  v2:= new `rx.Single$16`;
  #L48f8e6.  call `<init>`(v2, v3, v4) @signature `Lrx/Single$16;.<init>:(Lrx/Single;Lrx/functions/Action1;)V` @kind direct;
  #L48f8ec.  call `<init>`(v0, v3, v1, v2) @signature `Lrx/internal/operators/SingleDoOnEvent;.<init>:(Lrx/Single;Lrx/functions/Action1;Lrx/functions/Action1;)V` @kind direct;
  #L48f8f2.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48f8f8.  v4:= temp @kind object;
  #L48f8fa.  return v4 @kind object;
  #L48f8fc.  v4:= new `java.lang.IllegalArgumentException`;
  #L48f900.  v0:= "onNotification is null" @kind object;
  #L48f904.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48f90a.  throw v4;
}
procedure `rx.Single` `doOnError`(`rx.Single` v3 @kind this, `rx.functions.Action1` v4 @kind object) @signature `Lrx/Single;.doOnError:(Lrx/functions/Action1;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48f91c.  if v4 == 0 then goto L48f946;
  #L48f920.  v0:= new `rx.internal.operators.SingleDoOnEvent`;
  #L48f924.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L48f92a.  v1:= temp @kind object;
  #L48f92c.  v2:= new `rx.Single$14`;
  #L48f930.  call `<init>`(v2, v3, v4) @signature `Lrx/Single$14;.<init>:(Lrx/Single;Lrx/functions/Action1;)V` @kind direct;
  #L48f936.  call `<init>`(v0, v3, v1, v2) @signature `Lrx/internal/operators/SingleDoOnEvent;.<init>:(Lrx/Single;Lrx/functions/Action1;Lrx/functions/Action1;)V` @kind direct;
  #L48f93c.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48f942.  v4:= temp @kind object;
  #L48f944.  return v4 @kind object;
  #L48f946.  v4:= new `java.lang.IllegalArgumentException`;
  #L48f94a.  v0:= "onError is null" @kind object;
  #L48f94e.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48f954.  throw v4;
}
procedure `rx.Single` `doOnSubscribe`(`rx.Single` v2 @kind this, `rx.functions.Action0` v3 @kind object) @signature `Lrx/Single;.doOnSubscribe:(Lrx/functions/Action0;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48f968.  v0:= new `rx.internal.operators.SingleDoOnSubscribe`;
  #L48f96c.  v1:= v2.`rx.Single.onSubscribe` @type ^`rx.Single$OnSubscribe` @kind object;
  #L48f970.  call `<init>`(v0, v1, v3) @signature `Lrx/internal/operators/SingleDoOnSubscribe;.<init>:(Lrx/Single$OnSubscribe;Lrx/functions/Action0;)V` @kind direct;
  #L48f976.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48f97c.  v3:= temp @kind object;
  #L48f97e.  return v3 @kind object;
}
procedure `rx.Single` `doOnSuccess`(`rx.Single` v2 @kind this, `rx.functions.Action1` v3 @kind object) @signature `Lrx/Single;.doOnSuccess:(Lrx/functions/Action1;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48f990.  if v3 == 0 then goto L48f9b0;
  #L48f994.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L48f99a.  v0:= temp @kind object;
  #L48f99c.  v1:= new `rx.internal.operators.SingleDoOnEvent`;
  #L48f9a0.  call `<init>`(v1, v2, v3, v0) @signature `Lrx/internal/operators/SingleDoOnEvent;.<init>:(Lrx/Single;Lrx/functions/Action1;Lrx/functions/Action1;)V` @kind direct;
  #L48f9a6.  call temp:= `create`(v1) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48f9ac.  v3:= temp @kind object;
  #L48f9ae.  return v3 @kind object;
  #L48f9b0.  v3:= new `java.lang.IllegalArgumentException`;
  #L48f9b4.  v0:= "onSuccess is null" @kind object;
  #L48f9b8.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48f9be.  throw v3;
}
procedure `rx.Single` `doOnUnsubscribe`(`rx.Single` v2 @kind this, `rx.functions.Action0` v3 @kind object) @signature `Lrx/Single;.doOnUnsubscribe:(Lrx/functions/Action0;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48f9d0.  v0:= new `rx.internal.operators.SingleDoOnUnsubscribe`;
  #L48f9d4.  v1:= v2.`rx.Single.onSubscribe` @type ^`rx.Single$OnSubscribe` @kind object;
  #L48f9d8.  call `<init>`(v0, v1, v3) @signature `Lrx/internal/operators/SingleDoOnUnsubscribe;.<init>:(Lrx/Single$OnSubscribe;Lrx/functions/Action0;)V` @kind direct;
  #L48f9de.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48f9e4.  v3:= temp @kind object;
  #L48f9e6.  return v3 @kind object;
}
procedure `rx.Single` `flatMap`(`rx.Single` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Single;.flatMap:(Lrx/functions/Func1;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48fa1c.  v0:= instanceof @variable v1 @type ^`rx.internal.util.ScalarSynchronousSingle` @kind boolean;
  #L48fa20.  if v0 == 0 then goto L48fa34;
  #L48fa24.  v0:= v1 @kind object;
  #L48fa26.  v0:= (`rx.internal.util.ScalarSynchronousSingle`) v0 @kind object;
  #L48fa2a.  call temp:= `scalarFlatMap`(v0, v2) @signature `Lrx/internal/util/ScalarSynchronousSingle;.scalarFlatMap:(Lrx/functions/Func1;)Lrx/Single;` @kind virtual;
  #L48fa30.  v2:= temp @kind object;
  #L48fa32.  return v2 @kind object;
  #L48fa34.  call temp:= `map`(v1, v2) @signature `Lrx/Single;.map:(Lrx/functions/Func1;)Lrx/Single;` @kind virtual;
  #L48fa3a.  v2:= temp @kind object;
  #L48fa3c.  call temp:= `merge`(v2) @signature `Lrx/Single;.merge:(Lrx/Single;)Lrx/Single;` @kind static;
  #L48fa42.  v2:= temp @kind object;
  #L48fa44.  return v2 @kind object;
}
procedure `rx.Completable` `flatMapCompletable`(`rx.Single` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Single;.flatMapCompletable:(Lrx/functions/Func1;)Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48f230.  v0:= new `rx.internal.operators.CompletableFlatMapSingleToCompletable`;
  #L48f234.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/CompletableFlatMapSingleToCompletable;.<init>:(Lrx/Single;Lrx/functions/Func1;)V` @kind direct;
  #L48f23a.  call temp:= `create`(v0) @signature `Lrx/Completable;.create:(Lrx/Completable$OnSubscribe;)Lrx/Completable;` @kind static;
  #L48f240.  v2:= temp @kind object;
  #L48f242.  return v2 @kind object;
}
procedure `rx.Observable` `flatMapObservable`(`rx.Single` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/Single;.flatMapObservable:(Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48f4f4.  call temp:= `map`(v0, v1) @signature `Lrx/Single;.map:(Lrx/functions/Func1;)Lrx/Single;` @kind virtual;
  #L48f4fa.  v1:= temp @kind object;
  #L48f4fc.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f502.  v1:= temp @kind object;
  #L48f504.  call temp:= `merge`(v1) @signature `Lrx/Observable;.merge:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L48f50a.  v1:= temp @kind object;
  #L48f50c.  return v1 @kind object;
}
procedure `rx.Single` `lift`(`rx.Single` v2 @kind this, `rx.Observable$Operator` v3 @kind object) @signature `Lrx/Single;.lift:(Lrx/Observable$Operator;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48fb20.  v0:= new `rx.internal.operators.SingleLiftObservableOperator`;
  #L48fb24.  v1:= v2.`rx.Single.onSubscribe` @type ^`rx.Single$OnSubscribe` @kind object;
  #L48fb28.  call `<init>`(v0, v1, v3) @signature `Lrx/internal/operators/SingleLiftObservableOperator;.<init>:(Lrx/Single$OnSubscribe;Lrx/Observable$Operator;)V` @kind direct;
  #L48fb2e.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48fb34.  v3:= temp @kind object;
  #L48fb36.  return v3 @kind object;
}
procedure `rx.Single` `map`(`rx.Single` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Single;.map:(Lrx/functions/Func1;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48fb48.  v0:= new `rx.internal.operators.SingleOnSubscribeMap`;
  #L48fb4c.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/SingleOnSubscribeMap;.<init>:(Lrx/Single;Lrx/functions/Func1;)V` @kind direct;
  #L48fb52.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48fb58.  v2:= temp @kind object;
  #L48fb5a.  return v2 @kind object;
}
procedure `rx.Observable` `mergeWith`(`rx.Single` v0 @kind this, `rx.Single` v1 @kind object) @signature `Lrx/Single;.mergeWith:(Lrx/Single;)Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48f760.  call temp:= `merge`(v0, v1) @signature `Lrx/Single;.merge:(Lrx/Single;Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f766.  v1:= temp @kind object;
  #L48f768.  return v1 @kind object;
}
procedure `rx.Single` `observeOn`(`rx.Single` v2 @kind this, `rx.Scheduler` v3 @kind object) @signature `Lrx/Single;.observeOn:(Lrx/Scheduler;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48fbb0.  v0:= instanceof @variable v2 @type ^`rx.internal.util.ScalarSynchronousSingle` @kind boolean;
  #L48fbb4.  if v0 == 0 then goto L48fbc8;
  #L48fbb8.  v0:= v2 @kind object;
  #L48fbba.  v0:= (`rx.internal.util.ScalarSynchronousSingle`) v0 @kind object;
  #L48fbbe.  call temp:= `scalarScheduleOn`(v0, v3) @signature `Lrx/internal/util/ScalarSynchronousSingle;.scalarScheduleOn:(Lrx/Scheduler;)Lrx/Single;` @kind virtual;
  #L48fbc4.  v3:= temp @kind object;
  #L48fbc6.  return v3 @kind object;
  #L48fbc8.  if v3 == 0 then goto L48fbe4;
  #L48fbcc.  v0:= new `rx.internal.operators.SingleObserveOn`;
  #L48fbd0.  v1:= v2.`rx.Single.onSubscribe` @type ^`rx.Single$OnSubscribe` @kind object;
  #L48fbd4.  call `<init>`(v0, v1, v3) @signature `Lrx/internal/operators/SingleObserveOn;.<init>:(Lrx/Single$OnSubscribe;Lrx/Scheduler;)V` @kind direct;
  #L48fbda.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48fbe0.  v3:= temp @kind object;
  #L48fbe2.  return v3 @kind object;
  #L48fbe4.  v3:= new `java.lang.NullPointerException`;
  #L48fbe8.  v0:= "scheduler is null" @kind object;
  #L48fbec.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48fbf2.  throw v3;
}
procedure `rx.Single` `onErrorResumeNext`(`rx.Single` v1 @kind this, `rx.Single` v2 @kind object) @signature `Lrx/Single;.onErrorResumeNext:(Lrx/Single;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48fc04.  v0:= new `rx.Single`;
  #L48fc08.  call temp:= `withOther`(v1, v2) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext;.withOther:(Lrx/Single;Lrx/Single;)Lrx/internal/operators/SingleOperatorOnErrorResumeNext;` @kind static;
  #L48fc0e.  v2:= temp @kind object;
  #L48fc10.  call `<init>`(v0, v2) @signature `Lrx/Single;.<init>:(Lrx/Single$OnSubscribe;)V` @kind direct;
  #L48fc16.  return v0 @kind object;
}
procedure `rx.Single` `onErrorResumeNext`(`rx.Single` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Single;.onErrorResumeNext:(Lrx/functions/Func1;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48fc28.  v0:= new `rx.Single`;
  #L48fc2c.  call temp:= `withFunction`(v1, v2) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext;.withFunction:(Lrx/Single;Lrx/functions/Func1;)Lrx/internal/operators/SingleOperatorOnErrorResumeNext;` @kind static;
  #L48fc32.  v2:= temp @kind object;
  #L48fc34.  call `<init>`(v0, v2) @signature `Lrx/Single;.<init>:(Lrx/Single$OnSubscribe;)V` @kind direct;
  #L48fc3a.  return v0 @kind object;
}
procedure `rx.Single` `onErrorReturn`(`rx.Single` v2 @kind this, `rx.functions.Func1` v3 @kind object) @signature `Lrx/Single;.onErrorReturn:(Lrx/functions/Func1;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48fc4c.  v0:= new `rx.internal.operators.SingleOnErrorReturn`;
  #L48fc50.  v1:= v2.`rx.Single.onSubscribe` @type ^`rx.Single$OnSubscribe` @kind object;
  #L48fc54.  call `<init>`(v0, v1, v3) @signature `Lrx/internal/operators/SingleOnErrorReturn;.<init>:(Lrx/Single$OnSubscribe;Lrx/functions/Func1;)V` @kind direct;
  #L48fc5a.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48fc60.  v3:= temp @kind object;
  #L48fc62.  return v3 @kind object;
}
procedure `rx.Single` `retry`(`rx.Single` v1 @kind this) @signature `Lrx/Single;.retry:()Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48fc74.  call temp:= `toObservable`(v1) @signature `Lrx/Single;.toObservable:()Lrx/Observable;` @kind virtual;
  #L48fc7a.  v0:= temp @kind object;
  #L48fc7c.  call temp:= `retry`(v0) @signature `Lrx/Observable;.retry:()Lrx/Observable;` @kind virtual;
  #L48fc82.  v0:= temp @kind object;
  #L48fc84.  call temp:= `toSingle`(v0) @signature `Lrx/Observable;.toSingle:()Lrx/Single;` @kind virtual;
  #L48fc8a.  v0:= temp @kind object;
  #L48fc8c.  return v0 @kind object;
}
procedure `rx.Single` `retry`(`rx.Single` v1 @kind this, `long` v2 ) @signature `Lrx/Single;.retry:(J)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48fca0.  call temp:= `toObservable`(v1) @signature `Lrx/Single;.toObservable:()Lrx/Observable;` @kind virtual;
  #L48fca6.  v0:= temp @kind object;
  #L48fca8.  call temp:= `retry`(v0, v2) @signature `Lrx/Observable;.retry:(J)Lrx/Observable;` @kind virtual;
  #L48fcae.  v2:= temp @kind object;
  #L48fcb0.  call temp:= `toSingle`(v2) @signature `Lrx/Observable;.toSingle:()Lrx/Single;` @kind virtual;
  #L48fcb6.  v2:= temp @kind object;
  #L48fcb8.  return v2 @kind object;
}
procedure `rx.Single` `retry`(`rx.Single` v1 @kind this, `rx.functions.Func2` v2 @kind object) @signature `Lrx/Single;.retry:(Lrx/functions/Func2;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48fccc.  call temp:= `toObservable`(v1) @signature `Lrx/Single;.toObservable:()Lrx/Observable;` @kind virtual;
  #L48fcd2.  v0:= temp @kind object;
  #L48fcd4.  call temp:= `retry`(v0, v2) @signature `Lrx/Observable;.retry:(Lrx/functions/Func2;)Lrx/Observable;` @kind virtual;
  #L48fcda.  v2:= temp @kind object;
  #L48fcdc.  call temp:= `toSingle`(v2) @signature `Lrx/Observable;.toSingle:()Lrx/Single;` @kind virtual;
  #L48fce2.  v2:= temp @kind object;
  #L48fce4.  return v2 @kind object;
}
procedure `rx.Single` `retryWhen`(`rx.Single` v1 @kind this, `rx.functions.Func1` v2 @kind object) @signature `Lrx/Single;.retryWhen:(Lrx/functions/Func1;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48fcf8.  call temp:= `toObservable`(v1) @signature `Lrx/Single;.toObservable:()Lrx/Observable;` @kind virtual;
  #L48fcfe.  v0:= temp @kind object;
  #L48fd00.  call temp:= `retryWhen`(v0, v2) @signature `Lrx/Observable;.retryWhen:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L48fd06.  v2:= temp @kind object;
  #L48fd08.  call temp:= `toSingle`(v2) @signature `Lrx/Observable;.toSingle:()Lrx/Single;` @kind virtual;
  #L48fd0e.  v2:= temp @kind object;
  #L48fd10.  return v2 @kind object;
}
procedure `rx.Subscription` `subscribe`(`rx.Single` v2 @kind this) @signature `Lrx/Single;.subscribe:()Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L49025c.  call temp:= `empty`() @signature `Lrx/functions/Actions;.empty:()Lrx/functions/Actions$EmptyAction;` @kind static;
  #L490262.  v0:= temp @kind object;
  #L490264.  call temp:= `errorNotImplemented`() @signature `Lrx/functions/Actions;.errorNotImplemented:()Lrx/functions/Action1;` @kind static;
  #L49026a.  v1:= temp @kind object;
  #L49026c.  call temp:= `subscribe`(v2, v0, v1) @signature `Lrx/Single;.subscribe:(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Subscription;` @kind virtual;
  #L490272.  v0:= temp @kind object;
  #L490274.  return v0 @kind object;
}
procedure `rx.Subscription` `subscribe`(`rx.Single` v1 @kind this, `rx.Observer` v2 @kind object) @signature `Lrx/Single;.subscribe:(Lrx/Observer;)Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L490288.  if v2 == 0 then goto L4902a0;
  #L49028c.  v0:= new `rx.Single$12`;
  #L490290.  call `<init>`(v0, v1, v2) @signature `Lrx/Single$12;.<init>:(Lrx/Single;Lrx/Observer;)V` @kind direct;
  #L490296.  call temp:= `subscribe`(v1, v0) @signature `Lrx/Single;.subscribe:(Lrx/SingleSubscriber;)Lrx/Subscription;` @kind virtual;
  #L49029c.  v2:= temp @kind object;
  #L49029e.  return v2 @kind object;
  #L4902a0.  v2:= new `java.lang.NullPointerException`;
  #L4902a4.  v0:= "observer is null" @kind object;
  #L4902a8.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4902ae.  throw v2;
}
procedure `rx.Subscription` `subscribe`(`rx.Single` v4 @kind this, `rx.SingleSubscriber` v5 @kind object) @signature `Lrx/Single;.subscribe:(Lrx/SingleSubscriber;)Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4902c0.  if v5 == 0 then goto L49034e;
  #L4902c4.  v0:= v4.`rx.Single.onSubscribe` @type ^`rx.Single$OnSubscribe` @kind object;
  #L4902c8.  call temp:= `onSingleStart`(v4, v0) @signature `Lrx/plugins/RxJavaHooks;.onSingleStart:(Lrx/Single;Lrx/Single$OnSubscribe;)Lrx/Single$OnSubscribe;` @kind static;
  #L4902ce.  v0:= temp @kind object;
  #L4902d0.  call `call`(v0, v5) @signature `Lrx/Single$OnSubscribe;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4902d6.  call temp:= `onSingleReturn`(v5) @signature `Lrx/plugins/RxJavaHooks;.onSingleReturn:(Lrx/Subscription;)Lrx/Subscription;` @kind static;
  #L4902dc.  v5:= temp @kind object;
  #L4902de.  return v5 @kind object;
  #L4902e0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4902e2.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4902e8.  call temp:= `onSingleError`(v0) @signature `Lrx/plugins/RxJavaHooks;.onSingleError:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L4902ee.  v1:= temp @kind object;
  #L4902f0.  call `onError`(v5, v1) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4902f6.  call temp:= `empty`() @signature `Lrx/subscriptions/Subscriptions;.empty:()Lrx/Subscription;` @kind static;
  #L4902fc.  v5:= temp @kind object;
  #L4902fe.  return v5 @kind object;
  #L490300.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L490302.  call `throwIfFatal`(v5) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L490308.  v1:= new `java.lang.RuntimeException`;
  #L49030c.  v2:= new `java.lang.StringBuilder`;
  #L490310.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L490316.  v3:= "Error occurred attempting to subscribe [" @kind object;
  #L49031a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490320.  call temp:= `getMessage`(v0) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L490326.  v0:= temp @kind object;
  #L490328.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49032e.  v0:= "] and then again while trying to pass to onError." @kind object;
  #L490332.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L490338.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49033e.  v0:= temp @kind object;
  #L490340.  call `<init>`(v1, v0, v5) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L490346.  call temp:= `onSingleError`(v1) @signature `Lrx/plugins/RxJavaHooks;.onSingleError:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L49034c.  throw v1;
  #L49034e.  v5:= new `java.lang.IllegalArgumentException`;
  #L490352.  v0:= "te is null" @kind object;
  #L490356.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49035c.  throw v5;
  catch `java.lang.Throwable` @[L4902c4..L4902de] goto L4902e0;
  catch `java.lang.Throwable` @[L4902e8..L4902f6] goto L490300;
}
procedure `rx.Subscription` `subscribe`(`rx.Single` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/Single;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L490388.  if v2 == 0 then goto L4903bc;
  #L49038c.  call `onStart`(v2) @signature `Lrx/Subscriber;.onStart:()V` @kind virtual;
  #L490392.  v0:= instanceof @variable v2 @type ^`rx.observers.SafeSubscriber` @kind boolean;
  #L490396.  if v0 != 0 then goto L4903b0;
  #L49039a.  v0:= new `rx.observers.SafeSubscriber`;
  #L49039e.  call `<init>`(v0, v2) @signature `Lrx/observers/SafeSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4903a4.  v2:= 0I;
  #L4903a6.  call temp:= `unsafeSubscribe`(v1, v0, v2) @signature `Lrx/Single;.unsafeSubscribe:(Lrx/Subscriber;Z)Lrx/Subscription;` @kind direct;
  #L4903ac.  v2:= temp @kind object;
  #L4903ae.  return v2 @kind object;
  #L4903b0.  v0:= 1I;
  #L4903b2.  call temp:= `unsafeSubscribe`(v1, v2, v0) @signature `Lrx/Single;.unsafeSubscribe:(Lrx/Subscriber;Z)Lrx/Subscription;` @kind direct;
  #L4903b8.  v2:= temp @kind object;
  #L4903ba.  return v2 @kind object;
  #L4903bc.  v2:= new `java.lang.IllegalArgumentException`;
  #L4903c0.  v0:= "observer can not be null" @kind object;
  #L4903c4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4903ca.  throw v2;
}
procedure `rx.Subscription` `subscribe`(`rx.Single` v1 @kind this, `rx.functions.Action1` v2 @kind object) @signature `Lrx/Single;.subscribe:(Lrx/functions/Action1;)Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4903dc.  call temp:= `errorNotImplemented`() @signature `Lrx/functions/Actions;.errorNotImplemented:()Lrx/functions/Action1;` @kind static;
  #L4903e2.  v0:= temp @kind object;
  #L4903e4.  call temp:= `subscribe`(v1, v2, v0) @signature `Lrx/Single;.subscribe:(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Subscription;` @kind virtual;
  #L4903ea.  v2:= temp @kind object;
  #L4903ec.  return v2 @kind object;
}
procedure `rx.Subscription` `subscribe`(`rx.Single` v1 @kind this, `rx.functions.Action1` v2 @kind object, `rx.functions.Action1` v3 @kind object) @signature `Lrx/Single;.subscribe:(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L490400.  if v2 == 0 then goto L49042c;
  #L490404.  if v3 == 0 then goto L49041c;
  #L490408.  v0:= new `rx.Single$11`;
  #L49040c.  call `<init>`(v0, v1, v3, v2) @signature `Lrx/Single$11;.<init>:(Lrx/Single;Lrx/functions/Action1;Lrx/functions/Action1;)V` @kind direct;
  #L490412.  call temp:= `subscribe`(v1, v0) @signature `Lrx/Single;.subscribe:(Lrx/SingleSubscriber;)Lrx/Subscription;` @kind virtual;
  #L490418.  v2:= temp @kind object;
  #L49041a.  return v2 @kind object;
  #L49041c.  v2:= new `java.lang.IllegalArgumentException`;
  #L490420.  v3:= "onError can not be null" @kind object;
  #L490424.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49042a.  throw v2;
  #L49042c.  v2:= new `java.lang.IllegalArgumentException`;
  #L490430.  v3:= "onSuccess can not be null" @kind object;
  #L490434.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49043a.  throw v2;
}
procedure `rx.Single` `subscribeOn`(`rx.Single` v1 @kind this, `rx.Scheduler` v2 @kind object) @signature `Lrx/Single;.subscribeOn:(Lrx/Scheduler;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48fd24.  v0:= instanceof @variable v1 @type ^`rx.internal.util.ScalarSynchronousSingle` @kind boolean;
  #L48fd28.  if v0 == 0 then goto L48fd3c;
  #L48fd2c.  v0:= v1 @kind object;
  #L48fd2e.  v0:= (`rx.internal.util.ScalarSynchronousSingle`) v0 @kind object;
  #L48fd32.  call temp:= `scalarScheduleOn`(v0, v2) @signature `Lrx/internal/util/ScalarSynchronousSingle;.scalarScheduleOn:(Lrx/Scheduler;)Lrx/Single;` @kind virtual;
  #L48fd38.  v2:= temp @kind object;
  #L48fd3a.  return v2 @kind object;
  #L48fd3c.  v0:= new `rx.Single$13`;
  #L48fd40.  call `<init>`(v0, v1, v2) @signature `Lrx/Single$13;.<init>:(Lrx/Single;Lrx/Scheduler;)V` @kind direct;
  #L48fd46.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48fd4c.  v2:= temp @kind object;
  #L48fd4e.  return v2 @kind object;
}
procedure `rx.Single` `takeUntil`(`rx.Single` v2 @kind this, `rx.Completable` v3 @kind object) @signature `Lrx/Single;.takeUntil:(Lrx/Completable;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48fd60.  v0:= new `rx.internal.operators.SingleTakeUntilCompletable`;
  #L48fd64.  v1:= v2.`rx.Single.onSubscribe` @type ^`rx.Single$OnSubscribe` @kind object;
  #L48fd68.  call `<init>`(v0, v1, v3) @signature `Lrx/internal/operators/SingleTakeUntilCompletable;.<init>:(Lrx/Single$OnSubscribe;Lrx/Completable;)V` @kind direct;
  #L48fd6e.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48fd74.  v3:= temp @kind object;
  #L48fd76.  return v3 @kind object;
}
procedure `rx.Single` `takeUntil`(`rx.Single` v2 @kind this, `rx.Observable` v3 @kind object) @signature `Lrx/Single;.takeUntil:(Lrx/Observable;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48fd88.  v0:= new `rx.internal.operators.SingleTakeUntilObservable`;
  #L48fd8c.  v1:= v2.`rx.Single.onSubscribe` @type ^`rx.Single$OnSubscribe` @kind object;
  #L48fd90.  call `<init>`(v0, v1, v3) @signature `Lrx/internal/operators/SingleTakeUntilObservable;.<init>:(Lrx/Single$OnSubscribe;Lrx/Observable;)V` @kind direct;
  #L48fd96.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48fd9c.  v3:= temp @kind object;
  #L48fd9e.  return v3 @kind object;
}
procedure `rx.Single` `takeUntil`(`rx.Single` v2 @kind this, `rx.Single` v3 @kind object) @signature `Lrx/Single;.takeUntil:(Lrx/Single;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48fdb0.  v0:= new `rx.internal.operators.SingleTakeUntilSingle`;
  #L48fdb4.  v1:= v2.`rx.Single.onSubscribe` @type ^`rx.Single$OnSubscribe` @kind object;
  #L48fdb8.  call `<init>`(v0, v1, v3) @signature `Lrx/internal/operators/SingleTakeUntilSingle;.<init>:(Lrx/Single$OnSubscribe;Lrx/Single;)V` @kind direct;
  #L48fdbe.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48fdc4.  v3:= temp @kind object;
  #L48fdc6.  return v3 @kind object;
}
procedure `rx.Single` `timeout`(`rx.Single` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lrx/Single;.timeout:(JLjava/util/concurrent/TimeUnit;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48fdd8.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48fdde.  v5:= temp @kind object;
  #L48fde0.  v4:= 0I;
  #L48fde2.  v0:= v6 @kind object;
  #L48fde4.  v1:= v7 @kind wide;
  #L48fde6.  v3:= v9 @kind object;
  #L48fde8.  call temp:= `timeout`(v0, v1, v3, v4, v5) @signature `Lrx/Single;.timeout:(JLjava/util/concurrent/TimeUnit;Lrx/Single;Lrx/Scheduler;)Lrx/Single;` @kind virtual;
  #L48fdee.  v7:= temp @kind object;
  #L48fdf0.  return v7 @kind object;
}
procedure `rx.Single` `timeout`(`rx.Single` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `rx.Scheduler` v10 @kind object) @signature `Lrx/Single;.timeout:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48fe04.  v4:= 0I;
  #L48fe06.  v0:= v6 @kind object;
  #L48fe08.  v1:= v7 @kind wide;
  #L48fe0a.  v3:= v9 @kind object;
  #L48fe0c.  v5:= v10 @kind object;
  #L48fe0e.  call temp:= `timeout`(v0, v1, v3, v4, v5) @signature `Lrx/Single;.timeout:(JLjava/util/concurrent/TimeUnit;Lrx/Single;Lrx/Scheduler;)Lrx/Single;` @kind virtual;
  #L48fe14.  v7:= temp @kind object;
  #L48fe16.  return v7 @kind object;
}
procedure `rx.Single` `timeout`(`rx.Single` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `rx.Single` v10 @kind object) @signature `Lrx/Single;.timeout:(JLjava/util/concurrent/TimeUnit;Lrx/Single;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48fe28.  call temp:= `computation`() @signature `Lrx/schedulers/Schedulers;.computation:()Lrx/Scheduler;` @kind static;
  #L48fe2e.  v5:= temp @kind object;
  #L48fe30.  v0:= v6 @kind object;
  #L48fe32.  v1:= v7 @kind wide;
  #L48fe34.  v3:= v9 @kind object;
  #L48fe36.  v4:= v10 @kind object;
  #L48fe38.  call temp:= `timeout`(v0, v1, v3, v4, v5) @signature `Lrx/Single;.timeout:(JLjava/util/concurrent/TimeUnit;Lrx/Single;Lrx/Scheduler;)Lrx/Single;` @kind virtual;
  #L48fe3e.  v7:= temp @kind object;
  #L48fe40.  return v7 @kind object;
}
procedure `rx.Single` `timeout`(`rx.Single` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `rx.Single` v12 @kind object, `rx.Scheduler` v13 @kind object) @signature `Lrx/Single;.timeout:(JLjava/util/concurrent/TimeUnit;Lrx/Single;Lrx/Scheduler;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L48fe54.  if v12 != 0 then goto L48fe6a;
  #L48fe58.  v12:= new `java.util.concurrent.TimeoutException`;
  #L48fe5c.  call `<init>`(v12) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L48fe62.  call temp:= `error`(v12) @signature `Lrx/Single;.error:(Ljava/lang/Throwable;)Lrx/Single;` @kind static;
  #L48fe68.  v12:= temp @kind object;
  #L48fe6a.  v7:= new `rx.internal.operators.SingleTimeout`;
  #L48fe6e.  v1:= v8.`rx.Single.onSubscribe` @type ^`rx.Single$OnSubscribe` @kind object;
  #L48fe72.  v6:= v12.`rx.Single.onSubscribe` @type ^`rx.Single$OnSubscribe` @kind object;
  #L48fe76.  v0:= v7 @kind object;
  #L48fe78.  v2:= v9 @kind wide;
  #L48fe7a.  v4:= v11 @kind object;
  #L48fe7c.  v5:= v13 @kind object;
  #L48fe7e.  call `<init>`(v0, v1, v2, v4, v5, v6) @signature `Lrx/internal/operators/SingleTimeout;.<init>:(Lrx/Single$OnSubscribe;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;Lrx/Single$OnSubscribe;)V` @kind direct;
  #L48fe84.  call temp:= `create`(v7) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L48fe8a.  v9:= temp @kind object;
  #L48fe8c.  return v9 @kind object;
}
procedure `java.lang.Object` `to`(`rx.Single` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/Single;.to:(Lrx/functions/Func1;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48f214.  call temp:= `call`(v1, v0) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48f21a.  v1:= temp @kind object;
  #L48f21c.  return v1 @kind object;
}
procedure `rx.singles.BlockingSingle` `toBlocking`(`rx.Single` v1 @kind this) @signature `Lrx/Single;.toBlocking:()Lrx/singles/BlockingSingle;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49052c.  call temp:= `from`(v1) @signature `Lrx/singles/BlockingSingle;.from:(Lrx/Single;)Lrx/singles/BlockingSingle;` @kind static;
  #L490532.  v0:= temp @kind object;
  #L490534.  return v0 @kind object;
}
procedure `rx.Completable` `toCompletable`(`rx.Single` v1 @kind this) @signature `Lrx/Single;.toCompletable:()Lrx/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48f254.  call temp:= `fromSingle`(v1) @signature `Lrx/Completable;.fromSingle:(Lrx/Single;)Lrx/Completable;` @kind static;
  #L48f25a.  v0:= temp @kind object;
  #L48f25c.  return v0 @kind object;
}
procedure `rx.Observable` `toObservable`(`rx.Single` v1 @kind this) @signature `Lrx/Single;.toObservable:()Lrx/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48f77c.  call temp:= `asObservable`(v1) @signature `Lrx/Single;.asObservable:(Lrx/Single;)Lrx/Observable;` @kind static;
  #L48f782.  v0:= temp @kind object;
  #L48f784.  return v0 @kind object;
}
procedure `rx.Subscription` `unsafeSubscribe`(`rx.Single` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/Single;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L49044c.  v0:= 1I;
  #L49044e.  call temp:= `unsafeSubscribe`(v1, v2, v0) @signature `Lrx/Single;.unsafeSubscribe:(Lrx/Subscriber;Z)Lrx/Subscription;` @kind direct;
  #L490454.  v2:= temp @kind object;
  #L490456.  return v2 @kind object;
}
procedure `rx.Single` `zipWith`(`rx.Single` v0 @kind this, `rx.Single` v1 @kind object, `rx.functions.Func2` v2 @kind object) @signature `Lrx/Single;.zipWith:(Lrx/Single;Lrx/functions/Func2;)Lrx/Single;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4901a4.  call temp:= `zip`(v0, v1, v2) @signature `Lrx/Single;.zip:(Lrx/Single;Lrx/Single;Lrx/functions/Func2;)Lrx/Single;` @kind static;
  #L4901aa.  v1:= temp @kind object;
  #L4901ac.  return v1 @kind object;
}
