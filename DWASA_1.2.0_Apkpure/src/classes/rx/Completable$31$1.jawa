record `rx.Completable$31$1` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `rx.Completable$31` `rx.Completable$31$1.this$1` @AccessFlag FINAL_SYNTHETIC;
  `rx.CompletableSubscriber` `rx.Completable$31$1.val$s` @AccessFlag FINAL_SYNTHETIC;
  `rx.Scheduler$Worker` `rx.Completable$31$1.val$w` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Completable$31$1` v0 @kind this, `rx.Completable$31` v1 @kind object, `rx.CompletableSubscriber` v2 @kind object, `rx.Scheduler$Worker` v3 @kind object) @signature `Lrx/Completable$31$1;.<init>:(Lrx/Completable$31;Lrx/CompletableSubscriber;Lrx/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L487d7c.  v0.`rx.Completable$31$1.this$1` @type ^`rx.Completable$31` := v1 @kind object;
  #L487d80.  v0.`rx.Completable$31$1.val$s` @type ^`rx.CompletableSubscriber` := v2 @kind object;
  #L487d84.  v0.`rx.Completable$31$1.val$w` @type ^`rx.Scheduler$Worker` := v3 @kind object;
  #L487d88.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L487d8e.  return @kind void;
}
procedure `void` `call`(`rx.Completable$31$1` v2 @kind this) @signature `Lrx/Completable$31$1;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L487da0.  v0:= v2.`rx.Completable$31$1.this$1` @type ^`rx.Completable$31` @kind object;
  #L487da4.  v0:= v0.`rx.Completable$31.this$0` @type ^`rx.Completable` @kind object;
  #L487da8.  v1:= v2.`rx.Completable$31$1.val$s` @type ^`rx.CompletableSubscriber` @kind object;
  #L487dac.  call `unsafeSubscribe`(v0, v1) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L487db2.  v0:= v2.`rx.Completable$31$1.val$w` @type ^`rx.Scheduler$Worker` @kind object;
  #L487db6.  call `unsubscribe`(v0) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L487dbc.  return @kind void;
  #L487dbe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L487dc0.  v1:= v2.`rx.Completable$31$1.val$w` @type ^`rx.Scheduler$Worker` @kind object;
  #L487dc4.  call `unsubscribe`(v1) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L487dca.  throw v0;
  catch `java.lang.Throwable` @[L487da0..L487db2] goto L487dbe;
}
