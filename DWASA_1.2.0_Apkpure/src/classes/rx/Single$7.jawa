record `rx.Single$7` @kind class @AccessFlag FINAL extends `rx.functions.FuncN` @kind interface {
  `rx.functions.Func6` `rx.Single$7.val$zipFunction` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Single$7` v0 @kind this, `rx.functions.Func6` v1 @kind object) @signature `Lrx/Single$7;.<init>:(Lrx/functions/Func6;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48f0a8.  v0.`rx.Single$7.val$zipFunction` @type ^`rx.functions.Func6` := v1 @kind object;
  #L48f0ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48f0b2.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.Single$7` v7 @kind this, `java.lang.Object`[] v8 @kind object) @signature `Lrx/Single$7;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48f064.  v0:= v7.`rx.Single$7.val$zipFunction` @type ^`rx.functions.Func6` @kind object;
  #L48f068.  v1:= 0I;
  #L48f06a.  v1:= v8[v1] @kind object;
  #L48f06e.  v2:= 1I;
  #L48f070.  v2:= v8[v2] @kind object;
  #L48f074.  v3:= 2I;
  #L48f076.  v3:= v8[v3] @kind object;
  #L48f07a.  v4:= 3I;
  #L48f07c.  v4:= v8[v4] @kind object;
  #L48f080.  v5:= 4I;
  #L48f082.  v5:= v8[v5] @kind object;
  #L48f086.  v6:= 5I;
  #L48f088.  v6:= v8[v6] @kind object;
  #L48f08c.  call temp:= `call`(v0, v1, v2, v3, v4, v5, v6) @signature `Lrx/functions/Func6;.call:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48f092.  v8:= temp @kind object;
  #L48f094.  return v8 @kind object;
}
