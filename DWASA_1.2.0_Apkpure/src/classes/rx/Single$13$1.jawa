record `rx.Single$13$1` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `rx.Single$13` `rx.Single$13$1.this$1` @AccessFlag FINAL_SYNTHETIC;
  `rx.SingleSubscriber` `rx.Single$13$1.val$t` @AccessFlag FINAL_SYNTHETIC;
  `rx.Scheduler$Worker` `rx.Single$13$1.val$w` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.Single$13$1` v0 @kind this, `rx.Single$13` v1 @kind object, `rx.SingleSubscriber` v2 @kind object, `rx.Scheduler$Worker` v3 @kind object) @signature `Lrx/Single$13$1;.<init>:(Lrx/Single$13;Lrx/SingleSubscriber;Lrx/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48ebb8.  v0.`rx.Single$13$1.this$1` @type ^`rx.Single$13` := v1 @kind object;
  #L48ebbc.  v0.`rx.Single$13$1.val$t` @type ^`rx.SingleSubscriber` := v2 @kind object;
  #L48ebc0.  v0.`rx.Single$13$1.val$w` @type ^`rx.Scheduler$Worker` := v3 @kind object;
  #L48ebc4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48ebca.  return @kind void;
}
procedure `void` `call`(`rx.Single$13$1` v2 @kind this) @signature `Lrx/Single$13$1;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48ebdc.  v0:= new `rx.Single$13$1$1`;
  #L48ebe0.  call `<init>`(v0, v2) @signature `Lrx/Single$13$1$1;.<init>:(Lrx/Single$13$1;)V` @kind direct;
  #L48ebe6.  v1:= v2.`rx.Single$13$1.val$t` @type ^`rx.SingleSubscriber` @kind object;
  #L48ebea.  call `add`(v1, v0) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L48ebf0.  v1:= v2.`rx.Single$13$1.this$1` @type ^`rx.Single$13` @kind object;
  #L48ebf4.  v1:= v1.`rx.Single$13.this$0` @type ^`rx.Single` @kind object;
  #L48ebf8.  call temp:= `subscribe`(v1, v0) @signature `Lrx/Single;.subscribe:(Lrx/SingleSubscriber;)Lrx/Subscription;` @kind virtual;
  #L48ebfe.  return @kind void;
}
