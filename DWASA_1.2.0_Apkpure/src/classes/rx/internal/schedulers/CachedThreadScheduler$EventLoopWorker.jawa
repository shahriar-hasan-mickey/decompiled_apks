record `rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker` @kind class @AccessFlag FINAL extends `rx.Scheduler$Worker` @kind class, `rx.functions.Action0` @kind interface {
  `rx.subscriptions.CompositeSubscription` `rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.innerSubscription` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.once` @AccessFlag FINAL;
  `rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool` `rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.pool` @AccessFlag PRIVATE_FINAL;
  `rx.internal.schedulers.CachedThreadScheduler$ThreadWorker` `rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.threadWorker` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker` v1 @kind this, `rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool` v2 @kind object) @signature `Lrx/internal/schedulers/CachedThreadScheduler$EventLoopWorker;.<init>:(Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4b2170.  call `<init>`(v1) @signature `Lrx/Scheduler$Worker;.<init>:()V` @kind direct;
  #L4b2176.  v0:= new `rx.subscriptions.CompositeSubscription`;
  #L4b217a.  call `<init>`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.<init>:()V` @kind direct;
  #L4b2180.  v1.`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.innerSubscription` @type ^`rx.subscriptions.CompositeSubscription` := v0 @kind object;
  #L4b2184.  v1.`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.pool` @type ^`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool` := v2 @kind object;
  #L4b2188.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4b218c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4b2192.  v1.`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4b2196.  call temp:= `get`(v2) @signature `Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool;.get:()Lrx/internal/schedulers/CachedThreadScheduler$ThreadWorker;` @kind virtual;
  #L4b219c.  v2:= temp @kind object;
  #L4b219e.  v1.`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.threadWorker` @type ^`rx.internal.schedulers.CachedThreadScheduler$ThreadWorker` := v2 @kind object;
  #L4b21a2.  return @kind void;
}
procedure `void` `call`(`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker` v2 @kind this) @signature `Lrx/internal/schedulers/CachedThreadScheduler$EventLoopWorker;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b21b4.  v0:= v2.`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.pool` @type ^`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool` @kind object;
  #L4b21b8.  v1:= v2.`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.threadWorker` @type ^`rx.internal.schedulers.CachedThreadScheduler$ThreadWorker` @kind object;
  #L4b21bc.  call `release`(v0, v1) @signature `Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool;.release:(Lrx/internal/schedulers/CachedThreadScheduler$ThreadWorker;)V` @kind virtual;
  #L4b21c2.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker` v1 @kind this) @signature `Lrx/internal/schedulers/CachedThreadScheduler$EventLoopWorker;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b20d8.  v0:= v1.`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.innerSubscription` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4b20dc.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L4b20e2.  v0:= temp;
  #L4b20e4.  return v0;
}
procedure `rx.Subscription` `schedule`(`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker` v3 @kind this, `rx.functions.Action0` v4 @kind object) @signature `Lrx/internal/schedulers/CachedThreadScheduler$EventLoopWorker;.schedule:(Lrx/functions/Action0;)Lrx/Subscription;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b20f8.  v0:= 0L;
  #L4b20fc.  v2:= 0I;
  #L4b20fe.  call temp:= `schedule`(v3, v4, v0, v2) @signature `Lrx/internal/schedulers/CachedThreadScheduler$EventLoopWorker;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L4b2104.  v4:= temp @kind object;
  #L4b2106.  return v4 @kind object;
}
procedure `rx.Subscription` `schedule`(`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker` v2 @kind this, `rx.functions.Action0` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Lrx/internal/schedulers/CachedThreadScheduler$EventLoopWorker;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b2118.  v0:= v2.`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.innerSubscription` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4b211c.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L4b2122.  v0:= temp;
  #L4b2124.  if v0 == 0 then goto L4b2132;
  #L4b2128.  call temp:= `unsubscribed`() @signature `Lrx/subscriptions/Subscriptions;.unsubscribed:()Lrx/Subscription;` @kind static;
  #L4b212e.  v3:= temp @kind object;
  #L4b2130.  return v3 @kind object;
  #L4b2132.  v0:= v2.`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.threadWorker` @type ^`rx.internal.schedulers.CachedThreadScheduler$ThreadWorker` @kind object;
  #L4b2136.  v1:= new `rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker$1`;
  #L4b213a.  call `<init>`(v1, v2, v3) @signature `Lrx/internal/schedulers/CachedThreadScheduler$EventLoopWorker$1;.<init>:(Lrx/internal/schedulers/CachedThreadScheduler$EventLoopWorker;Lrx/functions/Action0;)V` @kind direct;
  #L4b2140.  call temp:= `scheduleActual`(v0, v1, v4, v6) @signature `Lrx/internal/schedulers/CachedThreadScheduler$ThreadWorker;.scheduleActual:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/internal/schedulers/ScheduledAction;` @kind virtual;
  #L4b2146.  v3:= temp @kind object;
  #L4b2148.  v4:= v2.`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.innerSubscription` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4b214c.  call `add`(v4, v3) @signature `Lrx/subscriptions/CompositeSubscription;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b2152.  v4:= v2.`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.innerSubscription` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4b2156.  call `addParent`(v3, v4) @signature `Lrx/internal/schedulers/ScheduledAction;.addParent:(Lrx/subscriptions/CompositeSubscription;)V` @kind virtual;
  #L4b215c.  return v3 @kind object;
}
procedure `void` `unsubscribe`(`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker` v3 @kind this) @signature `Lrx/internal/schedulers/CachedThreadScheduler$EventLoopWorker;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b21d4.  v0:= v3.`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b21d8.  v1:= 0I;
  #L4b21da.  v2:= 1I;
  #L4b21dc.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b21e2.  v0:= temp;
  #L4b21e4.  if v0 == 0 then goto L4b21f2;
  #L4b21e8.  v0:= v3.`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.threadWorker` @type ^`rx.internal.schedulers.CachedThreadScheduler$ThreadWorker` @kind object;
  #L4b21ec.  call temp:= `schedule`(v0, v3) @signature `Lrx/internal/schedulers/CachedThreadScheduler$ThreadWorker;.schedule:(Lrx/functions/Action0;)Lrx/Subscription;` @kind virtual;
  #L4b21f2.  v0:= v3.`rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.innerSubscription` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4b21f6.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.unsubscribe:()V` @kind virtual;
  #L4b21fc.  return @kind void;
}
