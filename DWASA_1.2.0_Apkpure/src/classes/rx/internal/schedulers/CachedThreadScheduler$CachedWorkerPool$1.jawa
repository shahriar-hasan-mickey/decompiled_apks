record `rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool$1` @kind class @AccessFlag  extends `java.util.concurrent.ThreadFactory` @kind interface {
  `rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool` `rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.ThreadFactory` `rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool$1.val$threadFactory` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool$1` v0 @kind this, `rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool` v1 @kind object, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool$1;.<init>:(Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool;Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b1e0c.  v0.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool$1.this$0` @type ^`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool` := v1 @kind object;
  #L4b1e10.  v0.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool$1.val$threadFactory` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L4b1e14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b1e1a.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool$1` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool$1;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b1dbc.  v0:= v2.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool$1.val$threadFactory` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L4b1dc0.  call temp:= `newThread`(v0, v3) @signature `Ljava/util/concurrent/ThreadFactory;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @kind interface;
  #L4b1dc6.  v3:= temp @kind object;
  #L4b1dc8.  v0:= new `java.lang.StringBuilder`;
  #L4b1dcc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4b1dd2.  call temp:= `getName`(v3) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L4b1dd8.  v1:= temp @kind object;
  #L4b1dda.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1de0.  v1:= " (Evictor)" @kind object;
  #L4b1de4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4b1dea.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4b1df0.  v0:= temp @kind object;
  #L4b1df2.  call `setName`(v3, v0) @signature `Ljava/lang/Thread;.setName:(Ljava/lang/String;)V` @kind virtual;
  #L4b1df8.  return v3 @kind object;
}
