record `rx.internal.schedulers.SchedulerWhen$ScheduledAction` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `rx.Subscription` @kind interface {
}
procedure `void` `<init>`(`rx.internal.schedulers.SchedulerWhen$ScheduledAction` v1 @kind this) @signature `Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4b3a5c.  v0:= `@@rx.internal.schedulers.SchedulerWhen.SUBSCRIBED` @type ^`rx.Subscription` @kind object;
  #L4b3a60.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4b3a66.  return @kind void;
}
procedure `void` `access$000`(`rx.internal.schedulers.SchedulerWhen$ScheduledAction` v0 @kind object, `rx.Scheduler$Worker` v1 @kind object) @signature `Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;.access$000:(Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;Lrx/Scheduler$Worker;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4b3a78.  call `call`(v0, v1) @signature `Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;.call:(Lrx/Scheduler$Worker;)V` @kind direct;
  #L4b3a7e.  return @kind void;
}
procedure `void` `call`(`rx.internal.schedulers.SchedulerWhen$ScheduledAction` v2 @kind this, `rx.Scheduler$Worker` v3 @kind object) @signature `Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;.call:(Lrx/Scheduler$Worker;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4b3a90.  call temp:= `get`(v2) @signature `Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b3a96.  v0:= temp @kind object;
  #L4b3a98.  v0:= (`rx.Subscription`) v0 @kind object;
  #L4b3a9c.  v1:= `@@rx.internal.schedulers.SchedulerWhen.UNSUBSCRIBED` @type ^`rx.Subscription` @kind object;
  #L4b3aa0.  if v0 != v1 then goto L4b3aa6;
  #L4b3aa4.  return @kind void;
  #L4b3aa6.  v1:= `@@rx.internal.schedulers.SchedulerWhen.SUBSCRIBED` @type ^`rx.Subscription` @kind object;
  #L4b3aaa.  if v0 == v1 then goto L4b3ab0;
  #L4b3aae.  return @kind void;
  #L4b3ab0.  call temp:= `callActual`(v2, v3) @signature `Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;.callActual:(Lrx/Scheduler$Worker;)Lrx/Subscription;` @kind virtual;
  #L4b3ab6.  v3:= temp @kind object;
  #L4b3ab8.  v0:= `@@rx.internal.schedulers.SchedulerWhen.SUBSCRIBED` @type ^`rx.Subscription` @kind object;
  #L4b3abc.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b3ac2.  v0:= temp;
  #L4b3ac4.  if v0 != 0 then goto L4b3ace;
  #L4b3ac8.  call `unsubscribe`(v3) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4b3ace.  return @kind void;
}
procedure `rx.Subscription` `callActual`(`rx.Scheduler$Worker` v0 @kind object) @signature `Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;.callActual:(Lrx/Scheduler$Worker;)Lrx/Subscription;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.schedulers.SchedulerWhen$ScheduledAction` v1 @kind this) @signature `Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b3a34.  call temp:= `get`(v1) @signature `Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b3a3a.  v0:= temp @kind object;
  #L4b3a3c.  v0:= (`rx.Subscription`) v0 @kind object;
  #L4b3a40.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscription;.isUnsubscribed:()Z` @kind interface;
  #L4b3a46.  v0:= temp;
  #L4b3a48.  return v0;
}
procedure `void` `unsubscribe`(`rx.internal.schedulers.SchedulerWhen$ScheduledAction` v3 @kind this) @signature `Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b3ae0.  v0:= `@@rx.internal.schedulers.SchedulerWhen.UNSUBSCRIBED` @type ^`rx.Subscription` @kind object;
  #L4b3ae4.  call temp:= `get`(v3) @signature `Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b3aea.  v1:= temp @kind object;
  #L4b3aec.  v1:= (`rx.Subscription`) v1 @kind object;
  #L4b3af0.  v2:= `@@rx.internal.schedulers.SchedulerWhen.UNSUBSCRIBED` @type ^`rx.Subscription` @kind object;
  #L4b3af4.  if v1 != v2 then goto L4b3afa;
  #L4b3af8.  return @kind void;
  #L4b3afa.  call temp:= `compareAndSet`(v3, v1, v0) @signature `Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b3b00.  v2:= temp;
  #L4b3b02.  if v2 == 0 then goto L4b3ae4;
  #L4b3b06.  v0:= `@@rx.internal.schedulers.SchedulerWhen.SUBSCRIBED` @type ^`rx.Subscription` @kind object;
  #L4b3b0a.  if v1 == v0 then goto L4b3b14;
  #L4b3b0e.  call `unsubscribe`(v1) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4b3b14.  return @kind void;
}
