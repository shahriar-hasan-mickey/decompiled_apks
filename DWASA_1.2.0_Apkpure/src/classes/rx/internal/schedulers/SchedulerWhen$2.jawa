record `rx.internal.schedulers.SchedulerWhen$2` @kind class @AccessFlag  extends `rx.Scheduler$Worker` @kind class {
  `rx.internal.schedulers.SchedulerWhen` `rx.internal.schedulers.SchedulerWhen$2.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.schedulers.SchedulerWhen$2.unsubscribed` @AccessFlag PRIVATE_FINAL;
  `rx.Observer` `rx.internal.schedulers.SchedulerWhen$2.val$actionObserver` @AccessFlag FINAL_SYNTHETIC;
  `rx.Scheduler$Worker` `rx.internal.schedulers.SchedulerWhen$2.val$actualWorker` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.schedulers.SchedulerWhen$2` v0 @kind this, `rx.internal.schedulers.SchedulerWhen` v1 @kind object, `rx.Scheduler$Worker` v2 @kind object, `rx.Observer` v3 @kind object) @signature `Lrx/internal/schedulers/SchedulerWhen$2;.<init>:(Lrx/internal/schedulers/SchedulerWhen;Lrx/Scheduler$Worker;Lrx/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b38fc.  v0.`rx.internal.schedulers.SchedulerWhen$2.this$0` @type ^`rx.internal.schedulers.SchedulerWhen` := v1 @kind object;
  #L4b3900.  v0.`rx.internal.schedulers.SchedulerWhen$2.val$actualWorker` @type ^`rx.Scheduler$Worker` := v2 @kind object;
  #L4b3904.  v0.`rx.internal.schedulers.SchedulerWhen$2.val$actionObserver` @type ^`rx.Observer` := v3 @kind object;
  #L4b3908.  call `<init>`(v0) @signature `Lrx/Scheduler$Worker;.<init>:()V` @kind direct;
  #L4b390e.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4b3912.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4b3918.  v0.`rx.internal.schedulers.SchedulerWhen$2.unsubscribed` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4b391c.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.schedulers.SchedulerWhen$2` v1 @kind this) @signature `Lrx/internal/schedulers/SchedulerWhen$2;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b388c.  v0:= v1.`rx.internal.schedulers.SchedulerWhen$2.unsubscribed` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b3890.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4b3896.  v0:= temp;
  #L4b3898.  return v0;
}
procedure `rx.Subscription` `schedule`(`rx.internal.schedulers.SchedulerWhen$2` v1 @kind this, `rx.functions.Action0` v2 @kind object) @signature `Lrx/internal/schedulers/SchedulerWhen$2;.schedule:(Lrx/functions/Action0;)Lrx/Subscription;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b38ac.  v0:= new `rx.internal.schedulers.SchedulerWhen$ImmediateAction`;
  #L4b38b0.  call `<init>`(v0, v2) @signature `Lrx/internal/schedulers/SchedulerWhen$ImmediateAction;.<init>:(Lrx/functions/Action0;)V` @kind direct;
  #L4b38b6.  v2:= v1.`rx.internal.schedulers.SchedulerWhen$2.val$actionObserver` @type ^`rx.Observer` @kind object;
  #L4b38ba.  call `onNext`(v2, v0) @signature `Lrx/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b38c0.  return v0 @kind object;
}
procedure `rx.Subscription` `schedule`(`rx.internal.schedulers.SchedulerWhen$2` v1 @kind this, `rx.functions.Action0` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lrx/internal/schedulers/SchedulerWhen$2;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b38d4.  v0:= new `rx.internal.schedulers.SchedulerWhen$DelayedAction`;
  #L4b38d8.  call `<init>`(v0, v2, v3, v5) @signature `Lrx/internal/schedulers/SchedulerWhen$DelayedAction;.<init>:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L4b38de.  v2:= v1.`rx.internal.schedulers.SchedulerWhen$2.val$actionObserver` @type ^`rx.Observer` @kind object;
  #L4b38e2.  call `onNext`(v2, v0) @signature `Lrx/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b38e8.  return v0 @kind object;
}
procedure `void` `unsubscribe`(`rx.internal.schedulers.SchedulerWhen$2` v3 @kind this) @signature `Lrx/internal/schedulers/SchedulerWhen$2;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b3930.  v0:= v3.`rx.internal.schedulers.SchedulerWhen$2.unsubscribed` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b3934.  v1:= 0I;
  #L4b3936.  v2:= 1I;
  #L4b3938.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b393e.  v0:= temp;
  #L4b3940.  if v0 == 0 then goto L4b3958;
  #L4b3944.  v0:= v3.`rx.internal.schedulers.SchedulerWhen$2.val$actualWorker` @type ^`rx.Scheduler$Worker` @kind object;
  #L4b3948.  call `unsubscribe`(v0) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L4b394e.  v0:= v3.`rx.internal.schedulers.SchedulerWhen$2.val$actionObserver` @type ^`rx.Observer` @kind object;
  #L4b3952.  call `onCompleted`(v0) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4b3958.  return @kind void;
}
