record `rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool` @kind class @AccessFlag FINAL {
  `rx.subscriptions.CompositeSubscription` `rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.allWorkers` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ScheduledExecutorService` `rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.evictorService` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.Future` `rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.evictorTask` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ConcurrentLinkedQueue` `rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.expiringWorkerQueue` @AccessFlag PRIVATE_FINAL;
  `long` `rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.keepAliveTime` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ThreadFactory` `rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.threadFactory` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool` v7 @kind this, `java.util.concurrent.ThreadFactory` v8 @kind object, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object) @signature `Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool;.<init>:(Ljava/util/concurrent/ThreadFactory;JLjava/util/concurrent/TimeUnit;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4b1ee8.  call `<init>`(v7) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b1eee.  v7.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.threadFactory` @type ^`java.util.concurrent.ThreadFactory` := v8 @kind object;
  #L4b1ef2.  if v11 == 0 then goto L4b1f00;
  #L4b1ef6.  call temp:= `toNanos`(v11, v9) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L4b1efc.  v9:= temp @kind wide;
  #L4b1efe.  goto L4b1f04;
  #L4b1f00.  v9:= 0L;
  #L4b1f04.  v7.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.keepAliveTime` @type ^`long` := v9 @kind wide;
  #L4b1f08.  v9:= new `java.util.concurrent.ConcurrentLinkedQueue`;
  #L4b1f0c.  call `<init>`(v9) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L4b1f12.  v7.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.expiringWorkerQueue` @type ^`java.util.concurrent.ConcurrentLinkedQueue` := v9 @kind object;
  #L4b1f16.  v9:= new `rx.subscriptions.CompositeSubscription`;
  #L4b1f1a.  call `<init>`(v9) @signature `Lrx/subscriptions/CompositeSubscription;.<init>:()V` @kind direct;
  #L4b1f20.  v7.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.allWorkers` @type ^`rx.subscriptions.CompositeSubscription` := v9 @kind object;
  #L4b1f24.  v9:= 0I;
  #L4b1f26.  if v11 == 0 then goto L4b1f64;
  #L4b1f2a.  v9:= 1I;
  #L4b1f2c.  v10:= new `rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool$1`;
  #L4b1f30.  call `<init>`(v10, v7, v8) @signature `Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool$1;.<init>:(Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L4b1f36.  call temp:= `newScheduledThreadPool`(v9, v10) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L4b1f3c.  v8:= temp @kind object;
  #L4b1f3e.  call temp:= `tryEnableCancelPolicy`(v8) @signature `Lrx/internal/schedulers/NewThreadWorker;.tryEnableCancelPolicy:(Ljava/util/concurrent/ScheduledExecutorService;)Z` @kind static;
  #L4b1f44.  v1:= new `rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool$2`;
  #L4b1f48.  call `<init>`(v1, v7) @signature `Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool$2;.<init>:(Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool;)V` @kind direct;
  #L4b1f4e.  v4:= v7.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.keepAliveTime` @type ^`long` @kind wide;
  #L4b1f52.  v6:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4b1f56.  v0:= v8 @kind object;
  #L4b1f58.  v2:= v4 @kind wide;
  #L4b1f5a.  call temp:= `scheduleWithFixedDelay`(v0, v1, v2, v4, v6) @signature `Ljava/util/concurrent/ScheduledExecutorService;.scheduleWithFixedDelay:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L4b1f60.  v9:= temp @kind object;
  #L4b1f62.  goto L4b1f66;
  #L4b1f64.  v8:= v9 @kind object;
  #L4b1f66.  v7.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.evictorService` @type ^`java.util.concurrent.ScheduledExecutorService` := v8 @kind object;
  #L4b1f6a.  v7.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.evictorTask` @type ^`java.util.concurrent.Future` := v9 @kind object;
  #L4b1f6e.  return @kind void;
}
procedure `void` `evictExpiredWorkers`(`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool` v7 @kind this) @signature `Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool;.evictExpiredWorkers:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4b1f80.  v0:= v7.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.expiringWorkerQueue` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L4b1f84.  call temp:= `isEmpty`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.isEmpty:()Z` @kind virtual;
  #L4b1f8a.  v0:= temp;
  #L4b1f8c.  if v0 != 0 then goto L4b1fe8;
  #L4b1f90.  call temp:= `now`(v7) @signature `Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool;.now:()J` @kind virtual;
  #L4b1f96.  v0:= temp @kind wide;
  #L4b1f98.  v2:= v7.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.expiringWorkerQueue` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L4b1f9c.  call temp:= `iterator`(v2) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4b1fa2.  v2:= temp @kind object;
  #L4b1fa4.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4b1faa.  v3:= temp;
  #L4b1fac.  if v3 == 0 then goto L4b1fe8;
  #L4b1fb0.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4b1fb6.  v3:= temp @kind object;
  #L4b1fb8.  v3:= (`rx.internal.schedulers.CachedThreadScheduler$ThreadWorker`) v3 @kind object;
  #L4b1fbc.  call temp:= `getExpirationTime`(v3) @signature `Lrx/internal/schedulers/CachedThreadScheduler$ThreadWorker;.getExpirationTime:()J` @kind virtual;
  #L4b1fc2.  v4:= temp @kind wide;
  #L4b1fc4.  v6:= lcmp(v4, v0);
  #L4b1fc8.  if v6 > 0 then goto L4b1fe8;
  #L4b1fcc.  v4:= v7.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.expiringWorkerQueue` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L4b1fd0.  call temp:= `remove`(v4, v3) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L4b1fd6.  v4:= temp;
  #L4b1fd8.  if v4 == 0 then goto L4b1fa4;
  #L4b1fdc.  v4:= v7.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.allWorkers` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4b1fe0.  call `remove`(v4, v3) @signature `Lrx/subscriptions/CompositeSubscription;.remove:(Lrx/Subscription;)V` @kind virtual;
  #L4b1fe6.  goto L4b1fa4;
  #L4b1fe8.  return @kind void;
}
procedure `rx.internal.schedulers.CachedThreadScheduler$ThreadWorker` `get`(`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool` v2 @kind this) @signature `Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool;.get:()Lrx/internal/schedulers/CachedThreadScheduler$ThreadWorker;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b1e80.  v0:= v2.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.allWorkers` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4b1e84.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L4b1e8a.  v0:= temp;
  #L4b1e8c.  if v0 == 0 then goto L4b1e96;
  #L4b1e90.  v0:= `@@rx.internal.schedulers.CachedThreadScheduler.SHUTDOWN_THREADWORKER` @type ^`rx.internal.schedulers.CachedThreadScheduler$ThreadWorker` @kind object;
  #L4b1e94.  return v0 @kind object;
  #L4b1e96.  v0:= v2.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.expiringWorkerQueue` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L4b1e9a.  call temp:= `isEmpty`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.isEmpty:()Z` @kind virtual;
  #L4b1ea0.  v0:= temp;
  #L4b1ea2.  if v0 != 0 then goto L4b1ebc;
  #L4b1ea6.  v0:= v2.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.expiringWorkerQueue` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L4b1eaa.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4b1eb0.  v0:= temp @kind object;
  #L4b1eb2.  v0:= (`rx.internal.schedulers.CachedThreadScheduler$ThreadWorker`) v0 @kind object;
  #L4b1eb6.  if v0 == 0 then goto L4b1e96;
  #L4b1eba.  return v0 @kind object;
  #L4b1ebc.  v0:= new `rx.internal.schedulers.CachedThreadScheduler$ThreadWorker`;
  #L4b1ec0.  v1:= v2.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.threadFactory` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L4b1ec4.  call `<init>`(v0, v1) @signature `Lrx/internal/schedulers/CachedThreadScheduler$ThreadWorker;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L4b1eca.  v1:= v2.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.allWorkers` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4b1ece.  call `add`(v1, v0) @signature `Lrx/subscriptions/CompositeSubscription;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b1ed4.  return v0 @kind object;
}
procedure `long` `now`(`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool` v2 @kind this) @signature `Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool;.now:()J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b1e64.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L4b1e6a.  v0:= temp @kind wide;
  #L4b1e6c.  return v0 @kind wide;
}
procedure `void` `release`(`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool` v4 @kind this, `rx.internal.schedulers.CachedThreadScheduler$ThreadWorker` v5 @kind object) @signature `Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool;.release:(Lrx/internal/schedulers/CachedThreadScheduler$ThreadWorker;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b1ffc.  call temp:= `now`(v4) @signature `Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool;.now:()J` @kind virtual;
  #L4b2002.  v0:= temp @kind wide;
  #L4b2004.  v2:= v4.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.keepAliveTime` @type ^`long` @kind wide;
  #L4b2008.  v0:= v0 + v2 @kind long;
  #L4b200a.  call `setExpirationTime`(v5, v0) @signature `Lrx/internal/schedulers/CachedThreadScheduler$ThreadWorker;.setExpirationTime:(J)V` @kind virtual;
  #L4b2010.  v0:= v4.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.expiringWorkerQueue` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L4b2014.  call temp:= `offer`(v0, v5) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4b201a.  return @kind void;
}
procedure `void` `shutdown`(`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool` v2 @kind this) @signature `Lrx/internal/schedulers/CachedThreadScheduler$CachedWorkerPool;.shutdown:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b202c.  v0:= v2.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.evictorTask` @type ^`java.util.concurrent.Future` @kind object;
  #L4b2030.  if v0 == 0 then goto L4b2040;
  #L4b2034.  v0:= v2.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.evictorTask` @type ^`java.util.concurrent.Future` @kind object;
  #L4b2038.  v1:= 1I;
  #L4b203a.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L4b2040.  v0:= v2.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.evictorService` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L4b2044.  if v0 == 0 then goto L4b2052;
  #L4b2048.  v0:= v2.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.evictorService` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L4b204c.  call temp:= `shutdownNow`(v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L4b2052.  v0:= v2.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.allWorkers` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4b2056.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.unsubscribe:()V` @kind virtual;
  #L4b205c.  return @kind void;
  #L4b205e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b2060.  v1:= v2.`rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.allWorkers` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4b2064.  call `unsubscribe`(v1) @signature `Lrx/subscriptions/CompositeSubscription;.unsubscribe:()V` @kind virtual;
  #L4b206a.  throw v0;
  catch `java.lang.Throwable` @[L4b202c..L4b2052] goto L4b205e;
}
