record `rx.internal.schedulers.ScheduledAction$Remover` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `rx.Subscription` @kind interface {
  `rx.subscriptions.CompositeSubscription` `rx.internal.schedulers.ScheduledAction$Remover.parent` @AccessFlag FINAL;
  `rx.internal.schedulers.ScheduledAction` `rx.internal.schedulers.ScheduledAction$Remover.s` @AccessFlag FINAL;
}
global `long` `@@rx.internal.schedulers.ScheduledAction$Remover.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.schedulers.ScheduledAction$Remover` v0 @kind this, `rx.internal.schedulers.ScheduledAction` v1 @kind object, `rx.subscriptions.CompositeSubscription` v2 @kind object) @signature `Lrx/internal/schedulers/ScheduledAction$Remover;.<init>:(Lrx/internal/schedulers/ScheduledAction;Lrx/subscriptions/CompositeSubscription;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b353c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4b3542.  v0.`rx.internal.schedulers.ScheduledAction$Remover.s` @type ^`rx.internal.schedulers.ScheduledAction` := v1 @kind object;
  #L4b3546.  v0.`rx.internal.schedulers.ScheduledAction$Remover.parent` @type ^`rx.subscriptions.CompositeSubscription` := v2 @kind object;
  #L4b354a.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.schedulers.ScheduledAction$Remover` v1 @kind this) @signature `Lrx/internal/schedulers/ScheduledAction$Remover;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b351c.  v0:= v1.`rx.internal.schedulers.ScheduledAction$Remover.s` @type ^`rx.internal.schedulers.ScheduledAction` @kind object;
  #L4b3520.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/internal/schedulers/ScheduledAction;.isUnsubscribed:()Z` @kind virtual;
  #L4b3526.  v0:= temp;
  #L4b3528.  return v0;
}
procedure `void` `unsubscribe`(`rx.internal.schedulers.ScheduledAction$Remover` v2 @kind this) @signature `Lrx/internal/schedulers/ScheduledAction$Remover;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b355c.  v0:= 0I;
  #L4b355e.  v1:= 1I;
  #L4b3560.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lrx/internal/schedulers/ScheduledAction$Remover;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b3566.  v0:= temp;
  #L4b3568.  if v0 == 0 then goto L4b357a;
  #L4b356c.  v0:= v2.`rx.internal.schedulers.ScheduledAction$Remover.parent` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4b3570.  v1:= v2.`rx.internal.schedulers.ScheduledAction$Remover.s` @type ^`rx.internal.schedulers.ScheduledAction` @kind object;
  #L4b3574.  call `remove`(v0, v1) @signature `Lrx/subscriptions/CompositeSubscription;.remove:(Lrx/Subscription;)V` @kind virtual;
  #L4b357a.  return @kind void;
}
