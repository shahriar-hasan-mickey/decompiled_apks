record `rx.internal.schedulers.ExecutorScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Scheduler` @kind class {
  `java.util.concurrent.Executor` `rx.internal.schedulers.ExecutorScheduler.executor` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.schedulers.ExecutorScheduler` v0 @kind this, `java.util.concurrent.Executor` v1 @kind object) @signature `Lrx/internal/schedulers/ExecutorScheduler;.<init>:(Ljava/util/concurrent/Executor;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b2b34.  call `<init>`(v0) @signature `Lrx/Scheduler;.<init>:()V` @kind direct;
  #L4b2b3a.  v0.`rx.internal.schedulers.ExecutorScheduler.executor` @type ^`java.util.concurrent.Executor` := v1 @kind object;
  #L4b2b3e.  return @kind void;
}
procedure `rx.Scheduler$Worker` `createWorker`(`rx.internal.schedulers.ExecutorScheduler` v2 @kind this) @signature `Lrx/internal/schedulers/ExecutorScheduler;.createWorker:()Lrx/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b2b14.  v0:= new `rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker`;
  #L4b2b18.  v1:= v2.`rx.internal.schedulers.ExecutorScheduler.executor` @type ^`java.util.concurrent.Executor` @kind object;
  #L4b2b1c.  call `<init>`(v0, v1) @signature `Lrx/internal/schedulers/ExecutorScheduler$ExecutorSchedulerWorker;.<init>:(Ljava/util/concurrent/Executor;)V` @kind direct;
  #L4b2b22.  return v0 @kind object;
}
