record `rx.internal.schedulers.ScheduledAction` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `java.lang.Runnable` @kind interface, `rx.Subscription` @kind interface {
  `rx.functions.Action0` `rx.internal.schedulers.ScheduledAction.action` @AccessFlag FINAL;
  `rx.internal.util.SubscriptionList` `rx.internal.schedulers.ScheduledAction.cancel` @AccessFlag FINAL;
}
global `long` `@@rx.internal.schedulers.ScheduledAction.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.schedulers.ScheduledAction` v0 @kind this, `rx.functions.Action0` v1 @kind object) @signature `Lrx/internal/schedulers/ScheduledAction;.<init>:(Lrx/functions/Action0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b35ac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b35b2.  v0.`rx.internal.schedulers.ScheduledAction.action` @type ^`rx.functions.Action0` := v1 @kind object;
  #L4b35b6.  v1:= new `rx.internal.util.SubscriptionList`;
  #L4b35ba.  call `<init>`(v1) @signature `Lrx/internal/util/SubscriptionList;.<init>:()V` @kind direct;
  #L4b35c0.  v0.`rx.internal.schedulers.ScheduledAction.cancel` @type ^`rx.internal.util.SubscriptionList` := v1 @kind object;
  #L4b35c4.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.schedulers.ScheduledAction` v1 @kind this, `rx.functions.Action0` v2 @kind object, `rx.internal.util.SubscriptionList` v3 @kind object) @signature `Lrx/internal/schedulers/ScheduledAction;.<init>:(Lrx/functions/Action0;Lrx/internal/util/SubscriptionList;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4b35d8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b35de.  v1.`rx.internal.schedulers.ScheduledAction.action` @type ^`rx.functions.Action0` := v2 @kind object;
  #L4b35e2.  v2:= new `rx.internal.util.SubscriptionList`;
  #L4b35e6.  v0:= new `rx.internal.schedulers.ScheduledAction$Remover2`;
  #L4b35ea.  call `<init>`(v0, v1, v3) @signature `Lrx/internal/schedulers/ScheduledAction$Remover2;.<init>:(Lrx/internal/schedulers/ScheduledAction;Lrx/internal/util/SubscriptionList;)V` @kind direct;
  #L4b35f0.  call `<init>`(v2, v0) @signature `Lrx/internal/util/SubscriptionList;.<init>:(Lrx/Subscription;)V` @kind direct;
  #L4b35f6.  v1.`rx.internal.schedulers.ScheduledAction.cancel` @type ^`rx.internal.util.SubscriptionList` := v2 @kind object;
  #L4b35fa.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.schedulers.ScheduledAction` v1 @kind this, `rx.functions.Action0` v2 @kind object, `rx.subscriptions.CompositeSubscription` v3 @kind object) @signature `Lrx/internal/schedulers/ScheduledAction;.<init>:(Lrx/functions/Action0;Lrx/subscriptions/CompositeSubscription;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4b360c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b3612.  v1.`rx.internal.schedulers.ScheduledAction.action` @type ^`rx.functions.Action0` := v2 @kind object;
  #L4b3616.  v2:= new `rx.internal.util.SubscriptionList`;
  #L4b361a.  v0:= new `rx.internal.schedulers.ScheduledAction$Remover`;
  #L4b361e.  call `<init>`(v0, v1, v3) @signature `Lrx/internal/schedulers/ScheduledAction$Remover;.<init>:(Lrx/internal/schedulers/ScheduledAction;Lrx/subscriptions/CompositeSubscription;)V` @kind direct;
  #L4b3624.  call `<init>`(v2, v0) @signature `Lrx/internal/util/SubscriptionList;.<init>:(Lrx/Subscription;)V` @kind direct;
  #L4b362a.  v1.`rx.internal.schedulers.ScheduledAction.cancel` @type ^`rx.internal.util.SubscriptionList` := v2 @kind object;
  #L4b362e.  return @kind void;
}
procedure `void` `add`(`rx.internal.schedulers.ScheduledAction` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lrx/internal/schedulers/ScheduledAction;.add:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b3640.  v0:= v2.`rx.internal.schedulers.ScheduledAction.cancel` @type ^`rx.internal.util.SubscriptionList` @kind object;
  #L4b3644.  v1:= new `rx.internal.schedulers.ScheduledAction$FutureCompleter`;
  #L4b3648.  call `<init>`(v1, v2, v3) @signature `Lrx/internal/schedulers/ScheduledAction$FutureCompleter;.<init>:(Lrx/internal/schedulers/ScheduledAction;Ljava/util/concurrent/Future;)V` @kind direct;
  #L4b364e.  call `add`(v0, v1) @signature `Lrx/internal/util/SubscriptionList;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b3654.  return @kind void;
}
procedure `void` `add`(`rx.internal.schedulers.ScheduledAction` v1 @kind this, `rx.Subscription` v2 @kind object) @signature `Lrx/internal/schedulers/ScheduledAction;.add:(Lrx/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b3668.  v0:= v1.`rx.internal.schedulers.ScheduledAction.cancel` @type ^`rx.internal.util.SubscriptionList` @kind object;
  #L4b366c.  call `add`(v0, v2) @signature `Lrx/internal/util/SubscriptionList;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b3672.  return @kind void;
}
procedure `void` `addParent`(`rx.internal.schedulers.ScheduledAction` v2 @kind this, `rx.internal.util.SubscriptionList` v3 @kind object) @signature `Lrx/internal/schedulers/ScheduledAction;.addParent:(Lrx/internal/util/SubscriptionList;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b3684.  v0:= v2.`rx.internal.schedulers.ScheduledAction.cancel` @type ^`rx.internal.util.SubscriptionList` @kind object;
  #L4b3688.  v1:= new `rx.internal.schedulers.ScheduledAction$Remover2`;
  #L4b368c.  call `<init>`(v1, v2, v3) @signature `Lrx/internal/schedulers/ScheduledAction$Remover2;.<init>:(Lrx/internal/schedulers/ScheduledAction;Lrx/internal/util/SubscriptionList;)V` @kind direct;
  #L4b3692.  call `add`(v0, v1) @signature `Lrx/internal/util/SubscriptionList;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b3698.  return @kind void;
}
procedure `void` `addParent`(`rx.internal.schedulers.ScheduledAction` v2 @kind this, `rx.subscriptions.CompositeSubscription` v3 @kind object) @signature `Lrx/internal/schedulers/ScheduledAction;.addParent:(Lrx/subscriptions/CompositeSubscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b36ac.  v0:= v2.`rx.internal.schedulers.ScheduledAction.cancel` @type ^`rx.internal.util.SubscriptionList` @kind object;
  #L4b36b0.  v1:= new `rx.internal.schedulers.ScheduledAction$Remover`;
  #L4b36b4.  call `<init>`(v1, v2, v3) @signature `Lrx/internal/schedulers/ScheduledAction$Remover;.<init>:(Lrx/internal/schedulers/ScheduledAction;Lrx/subscriptions/CompositeSubscription;)V` @kind direct;
  #L4b36ba.  call `add`(v0, v1) @signature `Lrx/internal/util/SubscriptionList;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b36c0.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.schedulers.ScheduledAction` v1 @kind this) @signature `Lrx/internal/schedulers/ScheduledAction;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b358c.  v0:= v1.`rx.internal.schedulers.ScheduledAction.cancel` @type ^`rx.internal.util.SubscriptionList` @kind object;
  #L4b3590.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/internal/util/SubscriptionList;.isUnsubscribed:()Z` @kind virtual;
  #L4b3596.  v0:= temp;
  #L4b3598.  return v0;
}
procedure `void` `run`(`rx.internal.schedulers.ScheduledAction` v3 @kind this) @signature `Lrx/internal/schedulers/ScheduledAction;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b36d4.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4b36da.  v0:= temp @kind object;
  #L4b36dc.  call `lazySet`(v3, v0) @signature `Lrx/internal/schedulers/ScheduledAction;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4b36e2.  v0:= v3.`rx.internal.schedulers.ScheduledAction.action` @type ^`rx.functions.Action0` @kind object;
  #L4b36e6.  call `call`(v0) @signature `Lrx/functions/Action0;.call:()V` @kind interface;
  #L4b36ec.  call `unsubscribe`(v3) @signature `Lrx/internal/schedulers/ScheduledAction;.unsubscribe:()V` @kind virtual;
  #L4b36f2.  goto L4b3724;
  #L4b36f4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b36f6.  v1:= new `java.lang.IllegalStateException`;
  #L4b36fa.  v2:= "Fatal Exception thrown on Scheduler.Worker thread." @kind object;
  #L4b36fe.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4b3704.  call `signalError`(v3, v1) @signature `Lrx/internal/schedulers/ScheduledAction;.signalError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b370a.  goto L4b36ec;
  #L4b370c.  v0:= Exception @type ^`rx.exceptions.OnErrorNotImplementedException` @kind object;
  #L4b370e.  v1:= new `java.lang.IllegalStateException`;
  #L4b3712.  v2:= "Exception thrown on Scheduler.Worker thread. Add `onError` handling." @kind object;
  #L4b3716.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4b371c.  call `signalError`(v3, v1) @signature `Lrx/internal/schedulers/ScheduledAction;.signalError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b3722.  goto L4b36ec;
  #L4b3724.  return @kind void;
  #L4b3726.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b3728.  call `unsubscribe`(v3) @signature `Lrx/internal/schedulers/ScheduledAction;.unsubscribe:()V` @kind virtual;
  #L4b372e.  goto L4b3732;
  #L4b3730.  throw v0;
  #L4b3732.  goto L4b3730;
  catch `rx.exceptions.OnErrorNotImplementedException` @[L4b36d4..L4b36ec] goto L4b370c;
  catch `java.lang.Throwable` @[L4b36d4..L4b36ec] goto L4b36f4;
  catch `java.lang.Throwable` @[L4b36f6..L4b3722] goto L4b3726;
}
procedure `void` `signalError`(`rx.internal.schedulers.ScheduledAction` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/schedulers/ScheduledAction;.signalError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b375c.  call `onError`(v3) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b3762.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4b3768.  v0:= temp @kind object;
  #L4b376a.  call temp:= `getUncaughtExceptionHandler`(v0) @signature `Ljava/lang/Thread;.getUncaughtExceptionHandler:()Ljava/lang/Thread$UncaughtExceptionHandler;` @kind virtual;
  #L4b3770.  v1:= temp @kind object;
  #L4b3772.  call `uncaughtException`(v1, v0, v3) @signature `Ljava/lang/Thread$UncaughtExceptionHandler;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @kind interface;
  #L4b3778.  return @kind void;
}
procedure `void` `unsubscribe`(`rx.internal.schedulers.ScheduledAction` v1 @kind this) @signature `Lrx/internal/schedulers/ScheduledAction;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b378c.  v0:= v1.`rx.internal.schedulers.ScheduledAction.cancel` @type ^`rx.internal.util.SubscriptionList` @kind object;
  #L4b3790.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/internal/util/SubscriptionList;.isUnsubscribed:()Z` @kind virtual;
  #L4b3796.  v0:= temp;
  #L4b3798.  if v0 != 0 then goto L4b37a6;
  #L4b379c.  v0:= v1.`rx.internal.schedulers.ScheduledAction.cancel` @type ^`rx.internal.util.SubscriptionList` @kind object;
  #L4b37a0.  call `unsubscribe`(v0) @signature `Lrx/internal/util/SubscriptionList;.unsubscribe:()V` @kind virtual;
  #L4b37a6.  return @kind void;
}
