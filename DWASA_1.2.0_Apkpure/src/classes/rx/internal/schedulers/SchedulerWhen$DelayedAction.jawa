record `rx.internal.schedulers.SchedulerWhen$DelayedAction` @kind class @AccessFlag  extends `rx.internal.schedulers.SchedulerWhen$ScheduledAction` @kind class {
  `rx.functions.Action0` `rx.internal.schedulers.SchedulerWhen$DelayedAction.action` @AccessFlag PRIVATE_FINAL;
  `long` `rx.internal.schedulers.SchedulerWhen$DelayedAction.delayTime` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.TimeUnit` `rx.internal.schedulers.SchedulerWhen$DelayedAction.unit` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.schedulers.SchedulerWhen$DelayedAction` v0 @kind this, `rx.functions.Action0` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lrx/internal/schedulers/SchedulerWhen$DelayedAction;.<init>:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b39d4.  call `<init>`(v0) @signature `Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;.<init>:()V` @kind direct;
  #L4b39da.  v0.`rx.internal.schedulers.SchedulerWhen$DelayedAction.action` @type ^`rx.functions.Action0` := v1 @kind object;
  #L4b39de.  v0.`rx.internal.schedulers.SchedulerWhen$DelayedAction.delayTime` @type ^`long` := v2 @kind wide;
  #L4b39e2.  v0.`rx.internal.schedulers.SchedulerWhen$DelayedAction.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4b39e6.  return @kind void;
}
procedure `rx.Subscription` `callActual`(`rx.internal.schedulers.SchedulerWhen$DelayedAction` v4 @kind this, `rx.Scheduler$Worker` v5 @kind object) @signature `Lrx/internal/schedulers/SchedulerWhen$DelayedAction;.callActual:(Lrx/Scheduler$Worker;)Lrx/Subscription;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b39ac.  v0:= v4.`rx.internal.schedulers.SchedulerWhen$DelayedAction.action` @type ^`rx.functions.Action0` @kind object;
  #L4b39b0.  v1:= v4.`rx.internal.schedulers.SchedulerWhen$DelayedAction.delayTime` @type ^`long` @kind wide;
  #L4b39b4.  v3:= v4.`rx.internal.schedulers.SchedulerWhen$DelayedAction.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4b39b8.  call temp:= `schedule`(v5, v0, v1, v3) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L4b39be.  v5:= temp @kind object;
  #L4b39c0.  return v5 @kind object;
}
