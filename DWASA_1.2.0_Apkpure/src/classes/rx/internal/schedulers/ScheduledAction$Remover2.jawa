record `rx.internal.schedulers.ScheduledAction$Remover2` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `rx.Subscription` @kind interface {
  `rx.internal.util.SubscriptionList` `rx.internal.schedulers.ScheduledAction$Remover2.parent` @AccessFlag FINAL;
  `rx.internal.schedulers.ScheduledAction` `rx.internal.schedulers.ScheduledAction$Remover2.s` @AccessFlag FINAL;
}
global `long` `@@rx.internal.schedulers.ScheduledAction$Remover2.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.schedulers.ScheduledAction$Remover2` v0 @kind this, `rx.internal.schedulers.ScheduledAction` v1 @kind object, `rx.internal.util.SubscriptionList` v2 @kind object) @signature `Lrx/internal/schedulers/ScheduledAction$Remover2;.<init>:(Lrx/internal/schedulers/ScheduledAction;Lrx/internal/util/SubscriptionList;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b34cc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4b34d2.  v0.`rx.internal.schedulers.ScheduledAction$Remover2.s` @type ^`rx.internal.schedulers.ScheduledAction` := v1 @kind object;
  #L4b34d6.  v0.`rx.internal.schedulers.ScheduledAction$Remover2.parent` @type ^`rx.internal.util.SubscriptionList` := v2 @kind object;
  #L4b34da.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.schedulers.ScheduledAction$Remover2` v1 @kind this) @signature `Lrx/internal/schedulers/ScheduledAction$Remover2;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b34ac.  v0:= v1.`rx.internal.schedulers.ScheduledAction$Remover2.s` @type ^`rx.internal.schedulers.ScheduledAction` @kind object;
  #L4b34b0.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/internal/schedulers/ScheduledAction;.isUnsubscribed:()Z` @kind virtual;
  #L4b34b6.  v0:= temp;
  #L4b34b8.  return v0;
}
procedure `void` `unsubscribe`(`rx.internal.schedulers.ScheduledAction$Remover2` v2 @kind this) @signature `Lrx/internal/schedulers/ScheduledAction$Remover2;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b34ec.  v0:= 0I;
  #L4b34ee.  v1:= 1I;
  #L4b34f0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lrx/internal/schedulers/ScheduledAction$Remover2;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b34f6.  v0:= temp;
  #L4b34f8.  if v0 == 0 then goto L4b350a;
  #L4b34fc.  v0:= v2.`rx.internal.schedulers.ScheduledAction$Remover2.parent` @type ^`rx.internal.util.SubscriptionList` @kind object;
  #L4b3500.  v1:= v2.`rx.internal.schedulers.ScheduledAction$Remover2.s` @type ^`rx.internal.schedulers.ScheduledAction` @kind object;
  #L4b3504.  call `remove`(v0, v1) @signature `Lrx/internal/util/SubscriptionList;.remove:(Lrx/Subscription;)V` @kind virtual;
  #L4b350a.  return @kind void;
}
