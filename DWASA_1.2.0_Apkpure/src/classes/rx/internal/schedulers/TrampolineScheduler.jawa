record `rx.internal.schedulers.TrampolineScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Scheduler` @kind class {
}
global `rx.internal.schedulers.TrampolineScheduler` `@@rx.internal.schedulers.TrampolineScheduler.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/schedulers/TrampolineScheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4b3f84.  v0:= new `rx.internal.schedulers.TrampolineScheduler`;
  #L4b3f88.  call `<init>`(v0) @signature `Lrx/internal/schedulers/TrampolineScheduler;.<init>:()V` @kind direct;
  #L4b3f8e.  `@@rx.internal.schedulers.TrampolineScheduler.INSTANCE` @type ^`rx.internal.schedulers.TrampolineScheduler` := v0 @kind object;
  #L4b3f92.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.schedulers.TrampolineScheduler` v0 @kind this) @signature `Lrx/internal/schedulers/TrampolineScheduler;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4b3fa4.  call `<init>`(v0) @signature `Lrx/Scheduler;.<init>:()V` @kind direct;
  #L4b3faa.  return @kind void;
}
procedure `int` `compare`(`int` v0 , `int` v1 ) @signature `Lrx/internal/schedulers/TrampolineScheduler;.compare:(II)I` @AccessFlag STATIC {
    temp;

  #L4b3f44.  if v0 >= v1 then goto L4b3f4c;
  #L4b3f48.  v0:= -1I;
  #L4b3f4a.  goto L4b3f56;
  #L4b3f4c.  if v0 != v1 then goto L4b3f54;
  #L4b3f50.  v0:= 0I;
  #L4b3f52.  goto L4b3f56;
  #L4b3f54.  v0:= 1I;
  #L4b3f56.  return v0;
}
procedure `rx.Scheduler$Worker` `createWorker`(`rx.internal.schedulers.TrampolineScheduler` v1 @kind this) @signature `Lrx/internal/schedulers/TrampolineScheduler;.createWorker:()Lrx/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b3f68.  v0:= new `rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler`;
  #L4b3f6c.  call `<init>`(v0) @signature `Lrx/internal/schedulers/TrampolineScheduler$InnerCurrentThreadScheduler;.<init>:()V` @kind direct;
  #L4b3f72.  return v0 @kind object;
}
