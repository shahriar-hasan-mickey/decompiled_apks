record `rx.internal.schedulers.CachedThreadScheduler$ThreadWorker` @kind class @AccessFlag FINAL extends `rx.internal.schedulers.NewThreadWorker` @kind class {
  `long` `rx.internal.schedulers.CachedThreadScheduler$ThreadWorker.expirationTime` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`rx.internal.schedulers.CachedThreadScheduler$ThreadWorker` v2 @kind this, `java.util.concurrent.ThreadFactory` v3 @kind object) @signature `Lrx/internal/schedulers/CachedThreadScheduler$ThreadWorker;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b2228.  call `<init>`(v2, v3) @signature `Lrx/internal/schedulers/NewThreadWorker;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L4b222e.  v0:= 0L;
  #L4b2232.  v2.`rx.internal.schedulers.CachedThreadScheduler$ThreadWorker.expirationTime` @type ^`long` := v0 @kind wide;
  #L4b2236.  return @kind void;
}
procedure `long` `getExpirationTime`(`rx.internal.schedulers.CachedThreadScheduler$ThreadWorker` v2 @kind this) @signature `Lrx/internal/schedulers/CachedThreadScheduler$ThreadWorker;.getExpirationTime:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b2210.  v0:= v2.`rx.internal.schedulers.CachedThreadScheduler$ThreadWorker.expirationTime` @type ^`long` @kind wide;
  #L4b2214.  return v0 @kind wide;
}
procedure `void` `setExpirationTime`(`rx.internal.schedulers.CachedThreadScheduler$ThreadWorker` v0 @kind this, `long` v1 ) @signature `Lrx/internal/schedulers/CachedThreadScheduler$ThreadWorker;.setExpirationTime:(J)V` @AccessFlag PUBLIC {
    temp;

  #L4b2248.  v0.`rx.internal.schedulers.CachedThreadScheduler$ThreadWorker.expirationTime` @type ^`long` := v1 @kind wide;
  #L4b224c.  return @kind void;
}
