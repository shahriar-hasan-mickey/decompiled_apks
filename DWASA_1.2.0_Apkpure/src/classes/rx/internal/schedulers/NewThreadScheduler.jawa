record `rx.internal.schedulers.NewThreadScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Scheduler` @kind class {
  `java.util.concurrent.ThreadFactory` `rx.internal.schedulers.NewThreadScheduler.threadFactory` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.schedulers.NewThreadScheduler` v0 @kind this, `java.util.concurrent.ThreadFactory` v1 @kind object) @signature `Lrx/internal/schedulers/NewThreadScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b2f50.  call `<init>`(v0) @signature `Lrx/Scheduler;.<init>:()V` @kind direct;
  #L4b2f56.  v0.`rx.internal.schedulers.NewThreadScheduler.threadFactory` @type ^`java.util.concurrent.ThreadFactory` := v1 @kind object;
  #L4b2f5a.  return @kind void;
}
procedure `rx.Scheduler$Worker` `createWorker`(`rx.internal.schedulers.NewThreadScheduler` v2 @kind this) @signature `Lrx/internal/schedulers/NewThreadScheduler;.createWorker:()Lrx/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b2f30.  v0:= new `rx.internal.schedulers.NewThreadWorker`;
  #L4b2f34.  v1:= v2.`rx.internal.schedulers.NewThreadScheduler.threadFactory` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L4b2f38.  call `<init>`(v0, v1) @signature `Lrx/internal/schedulers/NewThreadWorker;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L4b2f3e.  return v0 @kind object;
}
