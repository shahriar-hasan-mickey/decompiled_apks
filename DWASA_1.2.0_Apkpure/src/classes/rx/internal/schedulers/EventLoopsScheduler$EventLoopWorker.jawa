record `rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker` @kind class @AccessFlag FINAL extends `rx.Scheduler$Worker` @kind class {
  `rx.internal.util.SubscriptionList` `rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker.both` @AccessFlag PRIVATE_FINAL;
  `rx.internal.schedulers.EventLoopsScheduler$PoolWorker` `rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker.poolWorker` @AccessFlag PRIVATE_FINAL;
  `rx.internal.util.SubscriptionList` `rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker.serial` @AccessFlag PRIVATE_FINAL;
  `rx.subscriptions.CompositeSubscription` `rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker.timed` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker` v4 @kind this, `rx.internal.schedulers.EventLoopsScheduler$PoolWorker` v5 @kind object) @signature `Lrx/internal/schedulers/EventLoopsScheduler$EventLoopWorker;.<init>:(Lrx/internal/schedulers/EventLoopsScheduler$PoolWorker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b24ec.  call `<init>`(v4) @signature `Lrx/Scheduler$Worker;.<init>:()V` @kind direct;
  #L4b24f2.  v0:= new `rx.internal.util.SubscriptionList`;
  #L4b24f6.  call `<init>`(v0) @signature `Lrx/internal/util/SubscriptionList;.<init>:()V` @kind direct;
  #L4b24fc.  v4.`rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker.serial` @type ^`rx.internal.util.SubscriptionList` := v0 @kind object;
  #L4b2500.  v0:= new `rx.subscriptions.CompositeSubscription`;
  #L4b2504.  call `<init>`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.<init>:()V` @kind direct;
  #L4b250a.  v4.`rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker.timed` @type ^`rx.subscriptions.CompositeSubscription` := v0 @kind object;
  #L4b250e.  v0:= new `rx.internal.util.SubscriptionList`;
  #L4b2512.  v1:= 2I;
  #L4b2514.  v1:= new `rx.Subscription`[v1];
  #L4b2518.  v2:= v4.`rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker.serial` @type ^`rx.internal.util.SubscriptionList` @kind object;
  #L4b251c.  v3:= 0I;
  #L4b251e.  v1[v3]:= v2 @kind object;
  #L4b2522.  v2:= v4.`rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker.timed` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4b2526.  v3:= 1I;
  #L4b2528.  v1[v3]:= v2 @kind object;
  #L4b252c.  call `<init>`(v0, v1) @signature `Lrx/internal/util/SubscriptionList;.<init>:([Lrx/Subscription;)V` @kind direct;
  #L4b2532.  v4.`rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker.both` @type ^`rx.internal.util.SubscriptionList` := v0 @kind object;
  #L4b2536.  v4.`rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker.poolWorker` @type ^`rx.internal.schedulers.EventLoopsScheduler$PoolWorker` := v5 @kind object;
  #L4b253a.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker` v1 @kind this) @signature `Lrx/internal/schedulers/EventLoopsScheduler$EventLoopWorker;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b243c.  v0:= v1.`rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker.both` @type ^`rx.internal.util.SubscriptionList` @kind object;
  #L4b2440.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/internal/util/SubscriptionList;.isUnsubscribed:()Z` @kind virtual;
  #L4b2446.  v0:= temp;
  #L4b2448.  return v0;
}
procedure `rx.Subscription` `schedule`(`rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker` v6 @kind this, `rx.functions.Action0` v7 @kind object) @signature `Lrx/internal/schedulers/EventLoopsScheduler$EventLoopWorker;.schedule:(Lrx/functions/Action0;)Lrx/Subscription;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4b245c.  call temp:= `isUnsubscribed`(v6) @signature `Lrx/internal/schedulers/EventLoopsScheduler$EventLoopWorker;.isUnsubscribed:()Z` @kind virtual;
  #L4b2462.  v0:= temp;
  #L4b2464.  if v0 == 0 then goto L4b2472;
  #L4b2468.  call temp:= `unsubscribed`() @signature `Lrx/subscriptions/Subscriptions;.unsubscribed:()Lrx/Subscription;` @kind static;
  #L4b246e.  v7:= temp @kind object;
  #L4b2470.  return v7 @kind object;
  #L4b2472.  v0:= v6.`rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker.poolWorker` @type ^`rx.internal.schedulers.EventLoopsScheduler$PoolWorker` @kind object;
  #L4b2476.  v1:= new `rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker$1`;
  #L4b247a.  call `<init>`(v1, v6, v7) @signature `Lrx/internal/schedulers/EventLoopsScheduler$EventLoopWorker$1;.<init>:(Lrx/internal/schedulers/EventLoopsScheduler$EventLoopWorker;Lrx/functions/Action0;)V` @kind direct;
  #L4b2480.  v2:= 0L;
  #L4b2484.  v4:= 0I;
  #L4b2486.  v5:= v6.`rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker.serial` @type ^`rx.internal.util.SubscriptionList` @kind object;
  #L4b248a.  call temp:= `scheduleActual`(v0, v1, v2, v4, v5) @signature `Lrx/internal/schedulers/EventLoopsScheduler$PoolWorker;.scheduleActual:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;Lrx/internal/util/SubscriptionList;)Lrx/internal/schedulers/ScheduledAction;` @kind virtual;
  #L4b2490.  v7:= temp @kind object;
  #L4b2492.  return v7 @kind object;
}
procedure `rx.Subscription` `schedule`(`rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker` v6 @kind this, `rx.functions.Action0` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lrx/internal/schedulers/EventLoopsScheduler$EventLoopWorker;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4b24a4.  call temp:= `isUnsubscribed`(v6) @signature `Lrx/internal/schedulers/EventLoopsScheduler$EventLoopWorker;.isUnsubscribed:()Z` @kind virtual;
  #L4b24aa.  v0:= temp;
  #L4b24ac.  if v0 == 0 then goto L4b24ba;
  #L4b24b0.  call temp:= `unsubscribed`() @signature `Lrx/subscriptions/Subscriptions;.unsubscribed:()Lrx/Subscription;` @kind static;
  #L4b24b6.  v7:= temp @kind object;
  #L4b24b8.  return v7 @kind object;
  #L4b24ba.  v0:= v6.`rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker.poolWorker` @type ^`rx.internal.schedulers.EventLoopsScheduler$PoolWorker` @kind object;
  #L4b24be.  v1:= new `rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker$2`;
  #L4b24c2.  call `<init>`(v1, v6, v7) @signature `Lrx/internal/schedulers/EventLoopsScheduler$EventLoopWorker$2;.<init>:(Lrx/internal/schedulers/EventLoopsScheduler$EventLoopWorker;Lrx/functions/Action0;)V` @kind direct;
  #L4b24c8.  v5:= v6.`rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker.timed` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4b24cc.  v2:= v8 @kind wide;
  #L4b24ce.  v4:= v10 @kind object;
  #L4b24d0.  call temp:= `scheduleActual`(v0, v1, v2, v4, v5) @signature `Lrx/internal/schedulers/EventLoopsScheduler$PoolWorker;.scheduleActual:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;Lrx/subscriptions/CompositeSubscription;)Lrx/internal/schedulers/ScheduledAction;` @kind virtual;
  #L4b24d6.  v7:= temp @kind object;
  #L4b24d8.  return v7 @kind object;
}
procedure `void` `unsubscribe`(`rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker` v1 @kind this) @signature `Lrx/internal/schedulers/EventLoopsScheduler$EventLoopWorker;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b254c.  v0:= v1.`rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker.both` @type ^`rx.internal.util.SubscriptionList` @kind object;
  #L4b2550.  call `unsubscribe`(v0) @signature `Lrx/internal/util/SubscriptionList;.unsubscribe:()V` @kind virtual;
  #L4b2556.  return @kind void;
}
