record `rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker` `rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.functions.Action0` `rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2.val$decorated` @AccessFlag FINAL_SYNTHETIC;
  `rx.subscriptions.MultipleAssignmentSubscription` `rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2.val$mas` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscription` `rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2.val$removeMas` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2` v0 @kind this, `rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker` v1 @kind object, `rx.subscriptions.MultipleAssignmentSubscription` v2 @kind object, `rx.functions.Action0` v3 @kind object, `rx.Subscription` v4 @kind object) @signature `Lrx/internal/schedulers/ExecutorScheduler$ExecutorSchedulerWorker$2;.<init>:(Lrx/internal/schedulers/ExecutorScheduler$ExecutorSchedulerWorker;Lrx/subscriptions/MultipleAssignmentSubscription;Lrx/functions/Action0;Lrx/Subscription;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b2810.  v0.`rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2.this$0` @type ^`rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker` := v1 @kind object;
  #L4b2814.  v0.`rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2.val$mas` @type ^`rx.subscriptions.MultipleAssignmentSubscription` := v2 @kind object;
  #L4b2818.  v0.`rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2.val$decorated` @type ^`rx.functions.Action0` := v3 @kind object;
  #L4b281c.  v0.`rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2.val$removeMas` @type ^`rx.Subscription` := v4 @kind object;
  #L4b2820.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b2826.  return @kind void;
}
procedure `void` `call`(`rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2` v3 @kind this) @signature `Lrx/internal/schedulers/ExecutorScheduler$ExecutorSchedulerWorker$2;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b2838.  v0:= v3.`rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2.val$mas` @type ^`rx.subscriptions.MultipleAssignmentSubscription` @kind object;
  #L4b283c.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/subscriptions/MultipleAssignmentSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L4b2842.  v0:= temp;
  #L4b2844.  if v0 == 0 then goto L4b284a;
  #L4b2848.  return @kind void;
  #L4b284a.  v0:= v3.`rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2.this$0` @type ^`rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker` @kind object;
  #L4b284e.  v1:= v3.`rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2.val$decorated` @type ^`rx.functions.Action0` @kind object;
  #L4b2852.  call temp:= `schedule`(v0, v1) @signature `Lrx/internal/schedulers/ExecutorScheduler$ExecutorSchedulerWorker;.schedule:(Lrx/functions/Action0;)Lrx/Subscription;` @kind virtual;
  #L4b2858.  v0:= temp @kind object;
  #L4b285a.  v1:= v3.`rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2.val$mas` @type ^`rx.subscriptions.MultipleAssignmentSubscription` @kind object;
  #L4b285e.  call `set`(v1, v0) @signature `Lrx/subscriptions/MultipleAssignmentSubscription;.set:(Lrx/Subscription;)V` @kind virtual;
  #L4b2864.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4b286a.  v1:= temp @kind object;
  #L4b286c.  v2:= constclass @type ^`rx.internal.schedulers.ScheduledAction` @kind object;
  #L4b2870.  if v1 != v2 then goto L4b2882;
  #L4b2874.  v0:= (`rx.internal.schedulers.ScheduledAction`) v0 @kind object;
  #L4b2878.  v1:= v3.`rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2.val$removeMas` @type ^`rx.Subscription` @kind object;
  #L4b287c.  call `add`(v0, v1) @signature `Lrx/internal/schedulers/ScheduledAction;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b2882.  return @kind void;
}
