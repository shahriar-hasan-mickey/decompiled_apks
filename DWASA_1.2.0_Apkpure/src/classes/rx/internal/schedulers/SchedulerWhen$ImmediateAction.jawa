record `rx.internal.schedulers.SchedulerWhen$ImmediateAction` @kind class @AccessFlag  extends `rx.internal.schedulers.SchedulerWhen$ScheduledAction` @kind class {
  `rx.functions.Action0` `rx.internal.schedulers.SchedulerWhen$ImmediateAction.action` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.schedulers.SchedulerWhen$ImmediateAction` v0 @kind this, `rx.functions.Action0` v1 @kind object) @signature `Lrx/internal/schedulers/SchedulerWhen$ImmediateAction;.<init>:(Lrx/functions/Action0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b3a18.  call `<init>`(v0) @signature `Lrx/internal/schedulers/SchedulerWhen$ScheduledAction;.<init>:()V` @kind direct;
  #L4b3a1e.  v0.`rx.internal.schedulers.SchedulerWhen$ImmediateAction.action` @type ^`rx.functions.Action0` := v1 @kind object;
  #L4b3a22.  return @kind void;
}
procedure `rx.Subscription` `callActual`(`rx.internal.schedulers.SchedulerWhen$ImmediateAction` v1 @kind this, `rx.Scheduler$Worker` v2 @kind object) @signature `Lrx/internal/schedulers/SchedulerWhen$ImmediateAction;.callActual:(Lrx/Scheduler$Worker;)Lrx/Subscription;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4b39f8.  v0:= v1.`rx.internal.schedulers.SchedulerWhen$ImmediateAction.action` @type ^`rx.functions.Action0` @kind object;
  #L4b39fc.  call temp:= `schedule`(v2, v0) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;)Lrx/Subscription;` @kind virtual;
  #L4b3a02.  v2:= temp @kind object;
  #L4b3a04.  return v2 @kind object;
}
