record `rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture` @kind class @AccessFlag  extends `rx.Observable$OnSubscribe` @kind interface {
  `java.util.concurrent.Future` `rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture.that` @AccessFlag FINAL;
  `long` `rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture.time` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.TimeUnit` `rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture.unit` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeToObservableFuture$ToObservableFuture;.<init>:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L49d910.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49d916.  v2.`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture.that` @type ^`java.util.concurrent.Future` := v3 @kind object;
  #L49d91a.  v0:= 0L;
  #L49d91e.  v2.`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture.time` @type ^`long` := v0 @kind wide;
  #L49d922.  v3:= 0I;
  #L49d924.  v2.`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture.unit` @type ^`java.util.concurrent.TimeUnit` := v3 @kind object;
  #L49d928.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture` v0 @kind this, `java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lrx/internal/operators/OnSubscribeToObservableFuture$ToObservableFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49d93c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49d942.  v0.`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture.that` @type ^`java.util.concurrent.Future` := v1 @kind object;
  #L49d946.  v0.`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture.time` @type ^`long` := v2 @kind wide;
  #L49d94a.  v0.`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L49d94e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeToObservableFuture$ToObservableFuture;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49d960.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L49d964.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeToObservableFuture$ToObservableFuture;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L49d96a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture` v4 @kind this, `rx.Subscriber` v5 @kind object) @signature `Lrx/internal/operators/OnSubscribeToObservableFuture$ToObservableFuture;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49d97c.  v0:= new `rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture$1`;
  #L49d980.  call `<init>`(v0, v4) @signature `Lrx/internal/operators/OnSubscribeToObservableFuture$ToObservableFuture$1;.<init>:(Lrx/internal/operators/OnSubscribeToObservableFuture$ToObservableFuture;)V` @kind direct;
  #L49d986.  call temp:= `create`(v0) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L49d98c.  v0:= temp @kind object;
  #L49d98e.  call `add`(v5, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49d994.  call temp:= `isUnsubscribed`(v5) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L49d99a.  v0:= temp;
  #L49d99c.  if v0 == 0 then goto L49d9a2;
  #L49d9a0.  return @kind void;
  #L49d9a2.  v0:= v4.`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49d9a6.  if v0 != 0 then goto L49d9b8;
  #L49d9aa.  v0:= v4.`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture.that` @type ^`java.util.concurrent.Future` @kind object;
  #L49d9ae.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/Future;.get:()Ljava/lang/Object;` @kind interface;
  #L49d9b4.  v0:= temp @kind object;
  #L49d9b6.  goto L49d9cc;
  #L49d9b8.  v0:= v4.`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture.that` @type ^`java.util.concurrent.Future` @kind object;
  #L49d9bc.  v1:= v4.`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture.time` @type ^`long` @kind wide;
  #L49d9c0.  v3:= v4.`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49d9c4.  call temp:= `get`(v0, v1, v3) @signature `Ljava/util/concurrent/Future;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @kind interface;
  #L49d9ca.  v0:= temp @kind object;
  #L49d9cc.  v1:= new `rx.internal.producers.SingleProducer`;
  #L49d9d0.  call `<init>`(v1, v5, v0) @signature `Lrx/internal/producers/SingleProducer;.<init>:(Lrx/Subscriber;Ljava/lang/Object;)V` @kind direct;
  #L49d9d6.  call `setProducer`(v5, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L49d9dc.  goto L49d9f4;
  #L49d9de.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49d9e0.  call temp:= `isUnsubscribed`(v5) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L49d9e6.  v1:= temp;
  #L49d9e8.  if v1 == 0 then goto L49d9ee;
  #L49d9ec.  return @kind void;
  #L49d9ee.  call `throwOrReport`(v0, v5) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L49d9f4.  return @kind void;
  catch `java.lang.Throwable` @[L49d994..L49d9dc] goto L49d9de;
}
