record `rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.actual` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.missedRequested` @AccessFlag FINAL;
  `rx.functions.Func0` `rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.onCompleted` @AccessFlag FINAL;
  `rx.functions.Func1` `rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.onError` @AccessFlag FINAL;
  `rx.functions.Func1` `rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.onNext` @AccessFlag FINAL;
  `long` `rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.produced` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.producer` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.requested` @AccessFlag FINAL;
  `java.lang.Object` `rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.value` @AccessFlag ;
}
global `long` `@@rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.COMPLETED_FLAG` @AccessFlag STATIC_FINAL;
global `long` `@@rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.REQUESTED_MASK` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object, `rx.functions.Func1` v2 @kind object, `rx.functions.Func1` v3 @kind object, `rx.functions.Func0` v4 @kind object) @signature `Lrx/internal/operators/OperatorMapNotification$MapNotificationSubscriber;.<init>:(Lrx/Subscriber;Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a2154.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a215a.  v0.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L4a215e.  v0.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.onNext` @type ^`rx.functions.Func1` := v2 @kind object;
  #L4a2162.  v0.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.onError` @type ^`rx.functions.Func1` := v3 @kind object;
  #L4a2166.  v0.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.onCompleted` @type ^`rx.functions.Func0` := v4 @kind object;
  #L4a216a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a216e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a2174.  v0.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a2178.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a217c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a2182.  v0.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a2186.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a218a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a2190.  v0.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.producer` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4a2194.  return @kind void;
}
procedure `void` `accountProduced`(`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber` v5 @kind this) @signature `Lrx/internal/operators/OperatorMapNotification$MapNotificationSubscriber;.accountProduced:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a21a8.  v0:= v5.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.produced` @type ^`long` @kind wide;
  #L4a21ac.  v2:= 0L;
  #L4a21b0.  v4:= lcmp(v0, v2);
  #L4a21b4.  if v4 == 0 then goto L4a21d2;
  #L4a21b8.  v2:= v5.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.producer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a21bc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a21c2.  v2:= temp @kind object;
  #L4a21c4.  if v2 == 0 then goto L4a21d2;
  #L4a21c8.  v2:= v5.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a21cc.  call temp:= `produced`(v2, v0) @signature `Lrx/internal/operators/BackpressureUtils;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a21d2.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorMapNotification$MapNotificationSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a21e4.  call `accountProduced`(v2) @signature `Lrx/internal/operators/OperatorMapNotification$MapNotificationSubscriber;.accountProduced:()V` @kind virtual;
  #L4a21ea.  v0:= v2.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.onCompleted` @type ^`rx.functions.Func0` @kind object;
  #L4a21ee.  call temp:= `call`(v0) @signature `Lrx/functions/Func0;.call:()Ljava/lang/Object;` @kind interface;
  #L4a21f4.  v0:= temp @kind object;
  #L4a21f6.  v2.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.value` @type ^`java.lang.Object` := v0 @kind object;
  #L4a21fa.  goto L4a2208;
  #L4a21fc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a21fe.  v1:= v2.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a2202.  call `throwOrReport`(v0, v1) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L4a2208.  call `tryEmit`(v2) @signature `Lrx/internal/operators/OperatorMapNotification$MapNotificationSubscriber;.tryEmit:()V` @kind virtual;
  #L4a220e.  return @kind void;
  catch `java.lang.Throwable` @[L4a21ea..L4a21fa] goto L4a21fc;
}
procedure `void` `onError`(`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/operators/OperatorMapNotification$MapNotificationSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a222c.  call `accountProduced`(v2) @signature `Lrx/internal/operators/OperatorMapNotification$MapNotificationSubscriber;.accountProduced:()V` @kind virtual;
  #L4a2232.  v0:= v2.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.onError` @type ^`rx.functions.Func1` @kind object;
  #L4a2236.  call temp:= `call`(v0, v3) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a223c.  v0:= temp @kind object;
  #L4a223e.  v2.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.value` @type ^`java.lang.Object` := v0 @kind object;
  #L4a2242.  goto L4a2250;
  #L4a2244.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a2246.  v1:= v2.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a224a.  call `throwOrReport`(v0, v1, v3) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4a2250.  call `tryEmit`(v2) @signature `Lrx/internal/operators/OperatorMapNotification$MapNotificationSubscriber;.tryEmit:()V` @kind virtual;
  #L4a2256.  return @kind void;
  catch `java.lang.Throwable` @[L4a2232..L4a2242] goto L4a2244;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lrx/internal/operators/OperatorMapNotification$MapNotificationSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a2274.  v0:= v4.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.produced` @type ^`long` @kind wide;
  #L4a2278.  v2:= 1L;
  #L4a227c.  v0:= v0 + v2 @kind long;
  #L4a227e.  v4.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L4a2282.  v0:= v4.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a2286.  v1:= v4.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.onNext` @type ^`rx.functions.Func1` @kind object;
  #L4a228a.  call temp:= `call`(v1, v5) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a2290.  v1:= temp @kind object;
  #L4a2292.  call `onNext`(v0, v1) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a2298.  goto L4a22a6;
  #L4a229a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a229c.  v1:= v4.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a22a0.  call `throwOrReport`(v0, v1, v5) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4a22a6.  return @kind void;
  catch `java.lang.Throwable` @[L4a2274..L4a2298] goto L4a229a;
}
procedure `void` `requestInner`(`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber` v10 @kind this, `long` v11 ) @signature `Lrx/internal/operators/OperatorMapNotification$MapNotificationSubscriber;.requestInner:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4a22c4.  v0:= 0L;
  #L4a22c8.  v2:= lcmp(v11, v0);
  #L4a22cc.  if v2 < 0 then goto L4a23c8;
  #L4a22d0.  v2:= lcmp(v11, v0);
  #L4a22d4.  if v2 != 0 then goto L4a22da;
  #L4a22d8.  return @kind void;
  #L4a22da.  v2:= v10.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a22de.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a22e4.  v2:= temp @kind wide;
  #L4a22e6.  v4:= -9223372036854775808L;
  #L4a22ea.  v6:= v2 ^& v4 @kind long;
  #L4a22ee.  v8:= lcmp(v6, v0);
  #L4a22f2.  if v8 == 0 then goto L4a235e;
  #L4a22f6.  v6:= 9223372036854775807L;
  #L4a2300.  v6:= v6 ^& v2 @kind long;
  #L4a2302.  call temp:= `addCap`(v6, v11) @signature `Lrx/internal/operators/BackpressureUtils;.addCap:(JJ)J` @kind static;
  #L4a2308.  v8:= temp @kind wide;
  #L4a230a.  v4:= v4 ^| v8 @kind long;
  #L4a230c.  v8:= v10.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a2310.  call temp:= `compareAndSet`(v8, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a2316.  v2:= temp;
  #L4a2318.  if v2 == 0 then goto L4a22da;
  #L4a231c.  v11:= lcmp(v6, v0);
  #L4a2320.  if v11 != 0 then goto L4a235c;
  #L4a2324.  v11:= v10.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a2328.  call temp:= `isUnsubscribed`(v11) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4a232e.  v11:= temp;
  #L4a2330.  if v11 != 0 then goto L4a2342;
  #L4a2334.  v11:= v10.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a2338.  v12:= v10.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L4a233c.  call `onNext`(v11, v12) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a2342.  v11:= v10.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a2346.  call temp:= `isUnsubscribed`(v11) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4a234c.  v11:= temp;
  #L4a234e.  if v11 != 0 then goto L4a235c;
  #L4a2352.  v11:= v10.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a2356.  call `onCompleted`(v11) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a235c.  return @kind void;
  #L4a235e.  call temp:= `addCap`(v2, v11) @signature `Lrx/internal/operators/BackpressureUtils;.addCap:(JJ)J` @kind static;
  #L4a2364.  v4:= temp @kind wide;
  #L4a2366.  v6:= v10.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a236a.  call temp:= `compareAndSet`(v6, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a2370.  v2:= temp;
  #L4a2372.  if v2 == 0 then goto L4a22da;
  #L4a2376.  v2:= v10.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.producer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a237a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a2380.  v3:= temp @kind object;
  #L4a2382.  v3:= (`rx.Producer`) v3 @kind object;
  #L4a2386.  if v3 == 0 then goto L4a2392;
  #L4a238a.  call `request`(v3, v11) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L4a2390.  goto L4a23c6;
  #L4a2392.  v3:= v10.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a2396.  call temp:= `getAndAddRequest`(v3, v11) @signature `Lrx/internal/operators/BackpressureUtils;.getAndAddRequest:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a239c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a23a2.  v11:= temp @kind object;
  #L4a23a4.  v11:= (`rx.Producer`) v11 @kind object;
  #L4a23a8.  if v11 == 0 then goto L4a23c6;
  #L4a23ac.  v12:= v10.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a23b0.  call temp:= `getAndSet`(v12, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4a23b6.  v2:= temp @kind wide;
  #L4a23b8.  v12:= lcmp(v2, v0);
  #L4a23bc.  if v12 == 0 then goto L4a23c6;
  #L4a23c0.  call `request`(v11, v2) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L4a23c6.  return @kind void;
  #L4a23c8.  v0:= new `java.lang.IllegalArgumentException`;
  #L4a23cc.  v1:= new `java.lang.StringBuilder`;
  #L4a23d0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a23d6.  v2:= "n >= 0 required but it was " @kind object;
  #L4a23da.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a23e0.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a23e6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a23ec.  v11:= temp @kind object;
  #L4a23ee.  call `<init>`(v0, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a23f4.  goto L4a23f8;
  #L4a23f6.  throw v0;
  #L4a23f8.  goto L4a23f6;
}
procedure `void` `setProducer`(`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber` v5 @kind this, `rx.Producer` v6 @kind object) @signature `Lrx/internal/operators/OperatorMapNotification$MapNotificationSubscriber;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a240c.  v0:= v5.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.producer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a2410.  v1:= 0I;
  #L4a2412.  call temp:= `compareAndSet`(v0, v1, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a2418.  v0:= temp;
  #L4a241a.  if v0 == 0 then goto L4a243e;
  #L4a241e.  v0:= v5.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a2422.  v1:= 0L;
  #L4a2426.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4a242c.  v3:= temp @kind wide;
  #L4a242e.  v0:= lcmp(v3, v1);
  #L4a2432.  if v0 == 0 then goto L4a243c;
  #L4a2436.  call `request`(v6, v3) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L4a243c.  return @kind void;
  #L4a243e.  v6:= new `java.lang.IllegalStateException`;
  #L4a2442.  v0:= "Producer already set!" @kind object;
  #L4a2446.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a244c.  throw v6;
}
procedure `void` `tryEmit`(`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber` v9 @kind this) @signature `Lrx/internal/operators/OperatorMapNotification$MapNotificationSubscriber;.tryEmit:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4a2460.  v0:= v9.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a2464.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a246a.  v0:= temp @kind wide;
  #L4a246c.  v2:= -9223372036854775808L;
  #L4a2470.  v4:= v0 ^& v2 @kind long;
  #L4a2474.  v6:= 0L;
  #L4a2478.  v8:= lcmp(v4, v6);
  #L4a247c.  if v8 == 0 then goto L4a2482;
  #L4a2480.  return @kind void;
  #L4a2482.  v4:= v9.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a2486.  v2:= v2 ^| v0 @kind long;
  #L4a2488.  call temp:= `compareAndSet`(v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a248e.  v2:= temp;
  #L4a2490.  if v2 == 0 then goto L4a2460;
  #L4a2494.  v2:= lcmp(v0, v6);
  #L4a2498.  if v2 != 0 then goto L4a24ac;
  #L4a249c.  v0:= v9.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.producer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a24a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a24a6.  v0:= temp @kind object;
  #L4a24a8.  if v0 != 0 then goto L4a24e4;
  #L4a24ac.  v0:= v9.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a24b0.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4a24b6.  v0:= temp;
  #L4a24b8.  if v0 != 0 then goto L4a24ca;
  #L4a24bc.  v0:= v9.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a24c0.  v1:= v9.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L4a24c4.  call `onNext`(v0, v1) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a24ca.  v0:= v9.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a24ce.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4a24d4.  v0:= temp;
  #L4a24d6.  if v0 != 0 then goto L4a24e4;
  #L4a24da.  v0:= v9.`rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a24de.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a24e4.  return @kind void;
}
