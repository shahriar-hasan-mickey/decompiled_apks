record `rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `rx.Producer` @kind interface, `rx.Subscription` @kind interface, `rx.Observer` @kind interface {
  `rx.Subscriber` `rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.child` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.done` @AccessFlag VOLATILE;
  `boolean` `rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.emitting` @AccessFlag ;
  `boolean` `rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.missed` @AccessFlag ;
  `rx.internal.operators.OperatorOnBackpressureLatest$LatestSubscriber` `rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.parent` @AccessFlag ;
  `java.lang.Throwable` `rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.terminal` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.value` @AccessFlag FINAL;
}
global `java.lang.Object` `@@rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.EMPTY` @AccessFlag STATIC_FINAL;
global `long` `@@rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.NOT_REQUESTED` @AccessFlag STATIC_FINAL;
global `long` `@@rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a4ac8.  v0:= new `java.lang.Object`;
  #L4a4acc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a4ad2.  `@@rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.EMPTY` @type ^`java.lang.Object` := v0 @kind object;
  #L4a4ad6.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.<init>:(Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4a4ae8.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a4aee.  v2.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.child` @type ^`rx.Subscriber` := v3 @kind object;
  #L4a4af2.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a4af6.  v0:= `@@rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.EMPTY` @type ^`java.lang.Object` @kind object;
  #L4a4afa.  call `<init>`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4a4b00.  v2.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.value` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4a4b04.  v0:= -2.0D;
  #L4a4b08.  call `lazySet`(v2, v0) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.lazySet:(J)V` @kind virtual;
  #L4a4b0e.  return @kind void;
}
procedure `void` `emit`(`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter` v9 @kind this) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.emit:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4a4b20.  @monitorenter v9
  #L4a4b22.  v0:= v9.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.emitting` @type ^`boolean` @kind boolean;
  #L4a4b26.  v1:= 1I;
  #L4a4b28.  if v0 == 0 then goto L4a4b34;
  #L4a4b2c.  v9.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.missed` @type ^`boolean` := v1 @kind boolean;
  #L4a4b30.  @monitorexit v9
  #L4a4b32.  return @kind void;
  #L4a4b34.  v9.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.emitting` @type ^`boolean` := v1 @kind boolean;
  #L4a4b38.  v0:= 0I;
  #L4a4b3a.  v9.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.missed` @type ^`boolean` := v0 @kind boolean;
  #L4a4b3e.  @monitorexit v9
  #L4a4b40.  call temp:= `get`(v9) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.get:()J` @kind virtual;
  #L4a4b46.  v2:= temp @kind wide;
  #L4a4b48.  v4:= -9223372036854775808L;
  #L4a4b4c.  v6:= lcmp(v2, v4);
  #L4a4b50.  if v6 != 0 then goto L4a4b56;
  #L4a4b54.  goto L4a4bda;
  #L4a4b56.  v4:= v9.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a4b5a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a4b60.  v4:= temp @kind object;
  #L4a4b62.  v5:= 0L;
  #L4a4b66.  v7:= lcmp(v2, v5);
  #L4a4b6a.  if v7 <= 0 then goto L4a4b9c;
  #L4a4b6e.  v2:= `@@rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.EMPTY` @type ^`java.lang.Object` @kind object;
  #L4a4b72.  if v4 == v2 then goto L4a4b9c;
  #L4a4b76.  v2:= v9.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.child` @type ^`rx.Subscriber` @kind object;
  #L4a4b7a.  call `onNext`(v2, v4) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a4b80.  v2:= v9.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a4b84.  v3:= `@@rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.EMPTY` @type ^`java.lang.Object` @kind object;
  #L4a4b88.  call temp:= `compareAndSet`(v2, v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a4b8e.  v2:= 1L;
  #L4a4b92.  call temp:= `produced`(v9, v2) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.produced:(J)J` @kind virtual;
  #L4a4b98.  v4:= `@@rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.EMPTY` @type ^`java.lang.Object` @kind object;
  #L4a4b9c.  v2:= `@@rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.EMPTY` @type ^`java.lang.Object` @kind object;
  #L4a4ba0.  if v4 != v2 then goto L4a4bca;
  #L4a4ba4.  v2:= v9.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.done` @type ^`boolean` @kind boolean;
  #L4a4ba8.  if v2 == 0 then goto L4a4bca;
  #L4a4bac.  v2:= v9.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.terminal` @type ^`java.lang.Throwable` @kind object;
  #L4a4bb0.  if v2 == 0 then goto L4a4bc0;
  #L4a4bb4.  v3:= v9.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.child` @type ^`rx.Subscriber` @kind object;
  #L4a4bb8.  call `onError`(v3, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a4bbe.  goto L4a4bca;
  #L4a4bc0.  v2:= v9.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.child` @type ^`rx.Subscriber` @kind object;
  #L4a4bc4.  call `onCompleted`(v2) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a4bca.  @monitorenter v9
  #L4a4bcc.  v2:= v9.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.missed` @type ^`boolean` @kind boolean;
  #L4a4bd0.  if v2 != 0 then goto L4a4bdc;
  #L4a4bd4.  v9.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4a4bd8.  @monitorexit v9
  #L4a4bda.  return @kind void;
  #L4a4bdc.  v9.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.missed` @type ^`boolean` := v0 @kind boolean;
  #L4a4be0.  @monitorexit v9
  #L4a4be2.  goto L4a4b40;
  #L4a4be4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a4be6.  v1:= 0I;
  #L4a4be8.  @monitorexit v9
  #L4a4bea.  throw v2;
  #L4a4bec.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a4bee.  v8:= v2 @kind object;
  #L4a4bf0.  v2:= v1;
  #L4a4bf2.  v1:= v8 @kind object;
  #L4a4bf4.  goto L4a4bfe;
  #L4a4bf6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a4bf8.  goto L4a4be8;
  #L4a4bfa.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a4bfc.  v2:= 0I;
  #L4a4bfe.  if v2 != 0 then goto L4a4c12;
  #L4a4c02.  @monitorenter v9
  #L4a4c04.  v9.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4a4c08.  @monitorexit v9
  #L4a4c0a.  goto L4a4c12;
  #L4a4c0c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a4c0e.  @monitorexit v9
  #L4a4c10.  throw v0;
  #L4a4c12.  throw v1;
  #L4a4c14.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a4c16.  @monitorexit v9
  #L4a4c18.  goto L4a4c1c;
  #L4a4c1a.  throw v0;
  #L4a4c1c.  goto L4a4c1a;
  catch `java.lang.Throwable` @[L4a4b22..L4a4b40] goto L4a4c14;
  catch `java.lang.Throwable` @[L4a4b40..L4a4bcc] goto L4a4bfa;
  catch `java.lang.Throwable` @[L4a4bcc..L4a4bd8] goto L4a4be4;
  catch `java.lang.Throwable` @[L4a4bd8..L4a4bda] goto L4a4bf6;
  catch `java.lang.Throwable` @[L4a4bdc..L4a4be2] goto L4a4be4;
  catch `java.lang.Throwable` @[L4a4be8..L4a4bea] goto L4a4bf6;
  catch `java.lang.Throwable` @[L4a4bea..L4a4bec] goto L4a4bec;
  catch `java.lang.Throwable` @[L4a4c04..L4a4c10] goto L4a4c0c;
  catch `java.lang.Throwable` @[L4a4c16..L4a4c18] goto L4a4c14;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter` v5 @kind this) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a4a64.  call temp:= `get`(v5) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.get:()J` @kind virtual;
  #L4a4a6a.  v0:= temp @kind wide;
  #L4a4a6c.  v2:= -9223372036854775808L;
  #L4a4a70.  v4:= lcmp(v0, v2);
  #L4a4a74.  if v4 != 0 then goto L4a4a7c;
  #L4a4a78.  v0:= 1I;
  #L4a4a7a.  goto L4a4a7e;
  #L4a4a7c.  v0:= 0I;
  #L4a4a7e.  return v0;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter` v1 @kind this) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a4c88.  v0:= 1I;
  #L4a4c8a.  v1.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.done` @type ^`boolean` := v0 @kind boolean;
  #L4a4c8e.  call `emit`(v1) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.emit:()V` @kind virtual;
  #L4a4c94.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4a4ca8.  v0.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.terminal` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4a4cac.  v1:= 1I;
  #L4a4cae.  v0.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.done` @type ^`boolean` := v1 @kind boolean;
  #L4a4cb2.  call `emit`(v0) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.emit:()V` @kind virtual;
  #L4a4cb8.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a4ccc.  v0:= v1.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a4cd0.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a4cd6.  call `emit`(v1) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.emit:()V` @kind virtual;
  #L4a4cdc.  return @kind void;
}
procedure `long` `produced`(`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter` v5 @kind this, `long` v6 ) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.produced:(J)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a4a90.  call temp:= `get`(v5) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.get:()J` @kind virtual;
  #L4a4a96.  v0:= temp @kind wide;
  #L4a4a98.  v2:= 0L;
  #L4a4a9c.  v4:= lcmp(v0, v2);
  #L4a4aa0.  if v4 >= 0 then goto L4a4aa6;
  #L4a4aa4.  return v0 @kind wide;
  #L4a4aa6.  v2:= v0 - v6 @kind long;
  #L4a4aaa.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a4ab0.  v0:= temp;
  #L4a4ab2.  if v0 == 0 then goto L4a4a90;
  #L4a4ab6.  return v2 @kind wide;
}
procedure `void` `request`(`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter` v11 @kind this, `long` v12 ) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4a4cf0.  v0:= 0L;
  #L4a4cf4.  v2:= lcmp(v12, v0);
  #L4a4cf8.  if v2 < 0 then goto L4a4d5e;
  #L4a4cfc.  call temp:= `get`(v11) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.get:()J` @kind virtual;
  #L4a4d02.  v2:= temp @kind wide;
  #L4a4d04.  v4:= -9223372036854775808L;
  #L4a4d08.  v6:= lcmp(v2, v4);
  #L4a4d0c.  if v6 != 0 then goto L4a4d12;
  #L4a4d10.  return @kind void;
  #L4a4d12.  v4:= 9223372036854775807L;
  #L4a4d1c.  v6:= -2.0D;
  #L4a4d20.  v8:= lcmp(v2, v6);
  #L4a4d24.  if v8 != 0 then goto L4a4d2c;
  #L4a4d28.  v8:= v12 @kind wide;
  #L4a4d2a.  goto L4a4d3a;
  #L4a4d2c.  v8:= v2 + v12 @kind long;
  #L4a4d30.  v10:= lcmp(v8, v0);
  #L4a4d34.  if v10 >= 0 then goto L4a4d3a;
  #L4a4d38.  v8:= v4 @kind wide;
  #L4a4d3a.  call temp:= `compareAndSet`(v11, v2, v8) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a4d40.  v8:= temp;
  #L4a4d42.  if v8 == 0 then goto L4a4cfc;
  #L4a4d46.  v12:= lcmp(v2, v6);
  #L4a4d4a.  if v12 != 0 then goto L4a4d58;
  #L4a4d4e.  v12:= v11.`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter.parent` @type ^`rx.internal.operators.OperatorOnBackpressureLatest$LatestSubscriber` @kind object;
  #L4a4d52.  call `requestMore`(v12, v4) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestSubscriber;.requestMore:(J)V` @kind virtual;
  #L4a4d58.  call `emit`(v11) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.emit:()V` @kind virtual;
  #L4a4d5e.  return @kind void;
}
procedure `void` `unsubscribe`(`rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter` v5 @kind this) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a4d70.  call temp:= `get`(v5) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.get:()J` @kind virtual;
  #L4a4d76.  v0:= temp @kind wide;
  #L4a4d78.  v2:= 0L;
  #L4a4d7c.  v4:= lcmp(v0, v2);
  #L4a4d80.  if v4 < 0 then goto L4a4d8e;
  #L4a4d84.  v0:= -9223372036854775808L;
  #L4a4d88.  call temp:= `getAndSet`(v5, v0) @signature `Lrx/internal/operators/OperatorOnBackpressureLatest$LatestEmitter;.getAndSet:(J)J` @kind virtual;
  #L4a4d8e.  return @kind void;
}
