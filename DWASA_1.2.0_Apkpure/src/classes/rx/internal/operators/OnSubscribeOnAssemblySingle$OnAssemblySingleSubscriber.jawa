record `rx.internal.operators.OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber` @kind class @AccessFlag FINAL extends `rx.SingleSubscriber` @kind class {
  `rx.SingleSubscriber` `rx.internal.operators.OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber.actual` @AccessFlag FINAL;
  `java.lang.String` `rx.internal.operators.OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber.stacktrace` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber` v0 @kind this, `rx.SingleSubscriber` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber;.<init>:(Lrx/SingleSubscriber;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49b040.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L49b046.  v0.`rx.internal.operators.OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber.actual` @type ^`rx.SingleSubscriber` := v1 @kind object;
  #L49b04a.  v0.`rx.internal.operators.OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber.stacktrace` @type ^`java.lang.String` := v2 @kind object;
  #L49b04e.  call `add`(v1, v0) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49b054.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49b068.  v0:= new `rx.exceptions.AssemblyStackTraceException`;
  #L49b06c.  v1:= v2.`rx.internal.operators.OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber.stacktrace` @type ^`java.lang.String` @kind object;
  #L49b070.  call `<init>`(v0, v1) @signature `Lrx/exceptions/AssemblyStackTraceException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49b076.  call `attachTo`(v0, v3) @signature `Lrx/exceptions/AssemblyStackTraceException;.attachTo:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49b07c.  v0:= v2.`rx.internal.operators.OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L49b080.  call `onError`(v0, v3) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49b086.  return @kind void;
}
procedure `void` `onSuccess`(`rx.internal.operators.OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49b098.  v0:= v1.`rx.internal.operators.OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L49b09c.  call `onSuccess`(v0, v2) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L49b0a2.  return @kind void;
}
