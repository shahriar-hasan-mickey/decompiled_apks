record `rx.internal.operators.OperatorDistinctUntilChanged` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface, `rx.functions.Func2` @kind interface {
  `rx.functions.Func2` `rx.internal.operators.OperatorDistinctUntilChanged.comparator` @AccessFlag FINAL;
  `rx.functions.Func1` `rx.internal.operators.OperatorDistinctUntilChanged.keySelector` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorDistinctUntilChanged` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/internal/operators/OperatorDistinctUntilChanged;.<init>:(Lrx/functions/Func1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a075c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a0762.  v0.`rx.internal.operators.OperatorDistinctUntilChanged.keySelector` @type ^`rx.functions.Func1` := v1 @kind object;
  #L4a0766.  v0.`rx.internal.operators.OperatorDistinctUntilChanged.comparator` @type ^`rx.functions.Func2` := v0 @kind object;
  #L4a076a.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorDistinctUntilChanged` v1 @kind this, `rx.functions.Func2` v2 @kind object) @signature `Lrx/internal/operators/OperatorDistinctUntilChanged;.<init>:(Lrx/functions/Func2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a077c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a0782.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L4a0788.  v0:= temp @kind object;
  #L4a078a.  v1.`rx.internal.operators.OperatorDistinctUntilChanged.keySelector` @type ^`rx.functions.Func1` := v0 @kind object;
  #L4a078e.  v1.`rx.internal.operators.OperatorDistinctUntilChanged.comparator` @type ^`rx.functions.Func2` := v2 @kind object;
  #L4a0792.  return @kind void;
}
procedure `rx.internal.operators.OperatorDistinctUntilChanged` `instance`() @signature `Lrx/internal/operators/OperatorDistinctUntilChanged;.instance:()Lrx/internal/operators/OperatorDistinctUntilChanged;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4a0744.  v0:= `@@rx.internal.operators.OperatorDistinctUntilChanged$Holder.INSTANCE` @type ^`rx.internal.operators.OperatorDistinctUntilChanged` @kind object;
  #L4a0748.  return v0 @kind object;
}
procedure `java.lang.Boolean` `call`(`rx.internal.operators.OperatorDistinctUntilChanged` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorDistinctUntilChanged;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;` @AccessFlag PUBLIC {
    temp;

  #L4a06b4.  if v1 == v2 then goto L4a06ce;
  #L4a06b8.  if v1 == 0 then goto L4a06ca;
  #L4a06bc.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4a06c2.  v1:= temp;
  #L4a06c4.  if v1 == 0 then goto L4a06ca;
  #L4a06c8.  goto L4a06ce;
  #L4a06ca.  v1:= 0I;
  #L4a06cc.  goto L4a06d0;
  #L4a06ce.  v1:= 1I;
  #L4a06d0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L4a06d6.  v1:= temp @kind object;
  #L4a06d8.  return v1 @kind object;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorDistinctUntilChanged` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorDistinctUntilChanged;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a06ec.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a06f0.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorDistinctUntilChanged;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a06f6.  v1:= temp @kind object;
  #L4a06f8.  return v1 @kind object;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorDistinctUntilChanged` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorDistinctUntilChanged;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a070c.  call temp:= `call`(v0, v1, v2) @signature `Lrx/internal/operators/OperatorDistinctUntilChanged;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;` @kind virtual;
  #L4a0712.  v1:= temp @kind object;
  #L4a0714.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorDistinctUntilChanged` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorDistinctUntilChanged;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a0728.  v0:= new `rx.internal.operators.OperatorDistinctUntilChanged$1`;
  #L4a072c.  call `<init>`(v0, v1, v2, v2) @signature `Lrx/internal/operators/OperatorDistinctUntilChanged$1;.<init>:(Lrx/internal/operators/OperatorDistinctUntilChanged;Lrx/Subscriber;Lrx/Subscriber;)V` @kind direct;
  #L4a0732.  return v0 @kind object;
}
