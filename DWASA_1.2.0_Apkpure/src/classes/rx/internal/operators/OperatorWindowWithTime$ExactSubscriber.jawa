record `rx.internal.operators.OperatorWindowWithTime$ExactSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.child` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.emitting` @AccessFlag ;
  `java.lang.Object` `rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.guard` @AccessFlag FINAL;
  `java.util.List` `rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @AccessFlag ;
  `rx.internal.operators.OperatorWindowWithTime$State` `rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.state` @AccessFlag VOLATILE;
  `rx.internal.operators.OperatorWindowWithTime` `rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Scheduler$Worker` `rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.worker` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber` v1 @kind this, `rx.internal.operators.OperatorWindowWithTime` v2 @kind object, `rx.Subscriber` v3 @kind object, `rx.Scheduler$Worker` v4 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.<init>:(Lrx/internal/operators/OperatorWindowWithTime;Lrx/Subscriber;Lrx/Scheduler$Worker;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4adadc.  v1.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.this$0` @type ^`rx.internal.operators.OperatorWindowWithTime` := v2 @kind object;
  #L4adae0.  call `<init>`(v1) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4adae6.  v0:= new `rx.observers.SerializedSubscriber`;
  #L4adaea.  call `<init>`(v0, v3) @signature `Lrx/observers/SerializedSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4adaf0.  v1.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.child` @type ^`rx.Subscriber` := v0 @kind object;
  #L4adaf4.  v1.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.worker` @type ^`rx.Scheduler$Worker` := v4 @kind object;
  #L4adaf8.  v4:= new `java.lang.Object`;
  #L4adafc.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4adb02.  v1.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.guard` @type ^`java.lang.Object` := v4 @kind object;
  #L4adb06.  call temp:= `empty`() @signature `Lrx/internal/operators/OperatorWindowWithTime$State;.empty:()Lrx/internal/operators/OperatorWindowWithTime$State;` @kind static;
  #L4adb0c.  v4:= temp @kind object;
  #L4adb0e.  v1.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.state` @type ^`rx.internal.operators.OperatorWindowWithTime$State` := v4 @kind object;
  #L4adb12.  v4:= new `rx.internal.operators.OperatorWindowWithTime$ExactSubscriber$1`;
  #L4adb16.  call `<init>`(v4, v1, v2) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber$1;.<init>:(Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;Lrx/internal/operators/OperatorWindowWithTime;)V` @kind direct;
  #L4adb1c.  call temp:= `create`(v4) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L4adb22.  v2:= temp @kind object;
  #L4adb24.  call `add`(v3, v2) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4adb2a.  return @kind void;
}
procedure `void` `complete`(`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.complete:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4adb3c.  v0:= v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.state` @type ^`rx.internal.operators.OperatorWindowWithTime$State` @kind object;
  #L4adb40.  v0:= v0.`rx.internal.operators.OperatorWindowWithTime$State.consumer` @type ^`rx.Observer` @kind object;
  #L4adb44.  v1:= v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.state` @type ^`rx.internal.operators.OperatorWindowWithTime$State` @kind object;
  #L4adb48.  call temp:= `clear`(v1) @signature `Lrx/internal/operators/OperatorWindowWithTime$State;.clear:()Lrx/internal/operators/OperatorWindowWithTime$State;` @kind virtual;
  #L4adb4e.  v1:= temp @kind object;
  #L4adb50.  v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.state` @type ^`rx.internal.operators.OperatorWindowWithTime$State` := v1 @kind object;
  #L4adb54.  if v0 == 0 then goto L4adb5e;
  #L4adb58.  call `onCompleted`(v0) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4adb5e.  v0:= v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4adb62.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4adb68.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.unsubscribe:()V` @kind virtual;
  #L4adb6e.  return @kind void;
}
procedure `boolean` `drain`(`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber` v4 @kind this, `java.util.List` v5 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.drain:(Ljava/util/List;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ad96c.  v0:= 1I;
  #L4ad96e.  if v5 != 0 then goto L4ad974;
  #L4ad972.  return v0;
  #L4ad974.  call temp:= `iterator`(v5) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ad97a.  v5:= temp @kind object;
  #L4ad97c.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ad982.  v1:= temp;
  #L4ad984.  if v1 == 0 then goto L4ad9e6;
  #L4ad988.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ad98e.  v1:= temp @kind object;
  #L4ad990.  v2:= `@@rx.internal.operators.OperatorWindowWithTime.NEXT_SUBJECT` @type ^`java.lang.Object` @kind object;
  #L4ad994.  v3:= 0I;
  #L4ad996.  if v1 != v2 then goto L4ad9a8;
  #L4ad99a.  call temp:= `replaceSubject`(v4) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.replaceSubject:()Z` @kind virtual;
  #L4ad9a0.  v1:= temp;
  #L4ad9a2.  if v1 != 0 then goto L4ad97c;
  #L4ad9a6.  return v3;
  #L4ad9a8.  call temp:= `isError`(v1) @signature `Lrx/internal/operators/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4ad9ae.  v2:= temp;
  #L4ad9b0.  if v2 == 0 then goto L4ad9c4;
  #L4ad9b4.  call temp:= `getError`(v1) @signature `Lrx/internal/operators/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4ad9ba.  v5:= temp @kind object;
  #L4ad9bc.  call `error`(v4, v5) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ad9c2.  goto L4ad9e6;
  #L4ad9c4.  call temp:= `isCompleted`(v1) @signature `Lrx/internal/operators/NotificationLite;.isCompleted:(Ljava/lang/Object;)Z` @kind static;
  #L4ad9ca.  v2:= temp;
  #L4ad9cc.  if v2 == 0 then goto L4ad9d8;
  #L4ad9d0.  call `complete`(v4) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.complete:()V` @kind virtual;
  #L4ad9d6.  goto L4ad9e6;
  #L4ad9d8.  call temp:= `emitValue`(v4, v1) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.emitValue:(Ljava/lang/Object;)Z` @kind virtual;
  #L4ad9de.  v1:= temp;
  #L4ad9e0.  if v1 != 0 then goto L4ad97c;
  #L4ad9e4.  return v3;
  #L4ad9e6.  return v0;
}
procedure `boolean` `emitValue`(`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.emitValue:(Ljava/lang/Object;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4ad9f8.  v0:= v3.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.state` @type ^`rx.internal.operators.OperatorWindowWithTime$State` @kind object;
  #L4ad9fc.  v1:= v0.`rx.internal.operators.OperatorWindowWithTime$State.consumer` @type ^`rx.Observer` @kind object;
  #L4ada00.  if v1 != 0 then goto L4ada18;
  #L4ada04.  call temp:= `replaceSubject`(v3) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.replaceSubject:()Z` @kind virtual;
  #L4ada0a.  v0:= temp;
  #L4ada0c.  if v0 != 0 then goto L4ada14;
  #L4ada10.  v4:= 0I;
  #L4ada12.  return v4;
  #L4ada14.  v0:= v3.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.state` @type ^`rx.internal.operators.OperatorWindowWithTime$State` @kind object;
  #L4ada18.  v1:= v0.`rx.internal.operators.OperatorWindowWithTime$State.consumer` @type ^`rx.Observer` @kind object;
  #L4ada1c.  call `onNext`(v1, v4) @signature `Lrx/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ada22.  v4:= v0.`rx.internal.operators.OperatorWindowWithTime$State.count` @type ^`int`;
  #L4ada26.  v1:= v3.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.this$0` @type ^`rx.internal.operators.OperatorWindowWithTime` @kind object;
  #L4ada2a.  v1:= v1.`rx.internal.operators.OperatorWindowWithTime.size` @type ^`int`;
  #L4ada2e.  v2:= 1I;
  #L4ada30.  v1:= v1 - v2 @kind int;
  #L4ada32.  if v4 != v1 then goto L4ada4a;
  #L4ada36.  v4:= v0.`rx.internal.operators.OperatorWindowWithTime$State.consumer` @type ^`rx.Observer` @kind object;
  #L4ada3a.  call `onCompleted`(v4) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4ada40.  call temp:= `clear`(v0) @signature `Lrx/internal/operators/OperatorWindowWithTime$State;.clear:()Lrx/internal/operators/OperatorWindowWithTime$State;` @kind virtual;
  #L4ada46.  v4:= temp @kind object;
  #L4ada48.  goto L4ada52;
  #L4ada4a.  call temp:= `next`(v0) @signature `Lrx/internal/operators/OperatorWindowWithTime$State;.next:()Lrx/internal/operators/OperatorWindowWithTime$State;` @kind virtual;
  #L4ada50.  v4:= temp @kind object;
  #L4ada52.  v3.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.state` @type ^`rx.internal.operators.OperatorWindowWithTime$State` := v4 @kind object;
  #L4ada56.  return v2;
}
procedure `void` `error`(`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.error:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4adb80.  v0:= v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.state` @type ^`rx.internal.operators.OperatorWindowWithTime$State` @kind object;
  #L4adb84.  v0:= v0.`rx.internal.operators.OperatorWindowWithTime$State.consumer` @type ^`rx.Observer` @kind object;
  #L4adb88.  v1:= v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.state` @type ^`rx.internal.operators.OperatorWindowWithTime$State` @kind object;
  #L4adb8c.  call temp:= `clear`(v1) @signature `Lrx/internal/operators/OperatorWindowWithTime$State;.clear:()Lrx/internal/operators/OperatorWindowWithTime$State;` @kind virtual;
  #L4adb92.  v1:= temp @kind object;
  #L4adb94.  v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.state` @type ^`rx.internal.operators.OperatorWindowWithTime$State` := v1 @kind object;
  #L4adb98.  if v0 == 0 then goto L4adba2;
  #L4adb9c.  call `onError`(v0, v3) @signature `Lrx/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4adba2.  v0:= v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4adba6.  call `onError`(v0, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4adbac.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.unsubscribe:()V` @kind virtual;
  #L4adbb2.  return @kind void;
}
procedure `void` `nextWindow`(`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber` v6 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.nextWindow:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4adbc4.  v0:= v6.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4adbc8.  @monitorenter v0
  #L4adbca.  v1:= v6.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.emitting` @type ^`boolean` @kind boolean;
  #L4adbce.  if v1 == 0 then goto L4adbfa;
  #L4adbd2.  v1:= v6.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4adbd6.  if v1 != 0 then goto L4adbe8;
  #L4adbda.  v1:= new `java.util.ArrayList`;
  #L4adbde.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4adbe4.  v6.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @type ^`java.util.List` := v1 @kind object;
  #L4adbe8.  v1:= v6.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4adbec.  v2:= `@@rx.internal.operators.OperatorWindowWithTime.NEXT_SUBJECT` @type ^`java.lang.Object` @kind object;
  #L4adbf0.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4adbf6.  @monitorexit v0
  #L4adbf8.  return @kind void;
  #L4adbfa.  v1:= 1I;
  #L4adbfc.  v6.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.emitting` @type ^`boolean` := v1 @kind boolean;
  #L4adc00.  @monitorexit v0
  #L4adc02.  v0:= 0I;
  #L4adc04.  call temp:= `replaceSubject`(v6) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.replaceSubject:()Z` @kind virtual;
  #L4adc0a.  v2:= temp;
  #L4adc0c.  if v2 != 0 then goto L4adc24;
  #L4adc10.  v2:= v6.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4adc14.  @monitorenter v2
  #L4adc16.  v6.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4adc1a.  @monitorexit v2
  #L4adc1c.  return @kind void;
  #L4adc1e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4adc20.  @monitorexit v2
  #L4adc22.  throw v0;
  #L4adc24.  v2:= v6.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4adc28.  @monitorenter v2
  #L4adc2a.  v3:= v6.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4adc2e.  if v3 != 0 then goto L4adc3a;
  #L4adc32.  v6.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4adc36.  @monitorexit v2
  #L4adc38.  return @kind void;
  #L4adc3a.  v4:= 0I;
  #L4adc3c.  v6.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @type ^`java.util.List` := v4 @kind object;
  #L4adc40.  @monitorexit v2
  #L4adc42.  call temp:= `drain`(v6, v3) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.drain:(Ljava/util/List;)Z` @kind virtual;
  #L4adc48.  v2:= temp;
  #L4adc4a.  if v2 != 0 then goto L4adc24;
  #L4adc4e.  v2:= v6.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4adc52.  @monitorenter v2
  #L4adc54.  v6.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4adc58.  @monitorexit v2
  #L4adc5a.  return @kind void;
  #L4adc5c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4adc5e.  @monitorexit v2
  #L4adc60.  throw v0;
  #L4adc62.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4adc64.  v1:= 0I;
  #L4adc66.  @monitorexit v2
  #L4adc68.  throw v3;
  #L4adc6a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4adc6c.  v5:= v2 @kind object;
  #L4adc6e.  v2:= v1;
  #L4adc70.  v1:= v5 @kind object;
  #L4adc72.  goto L4adc7c;
  #L4adc74.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4adc76.  goto L4adc66;
  #L4adc78.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4adc7a.  v2:= 0I;
  #L4adc7c.  if v2 != 0 then goto L4adc94;
  #L4adc80.  v2:= v6.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4adc84.  @monitorenter v2
  #L4adc86.  v6.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4adc8a.  @monitorexit v2
  #L4adc8c.  goto L4adc94;
  #L4adc8e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4adc90.  @monitorexit v2
  #L4adc92.  throw v0;
  #L4adc94.  throw v1;
  #L4adc96.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4adc98.  @monitorexit v0
  #L4adc9a.  goto L4adc9e;
  #L4adc9c.  throw v1;
  #L4adc9e.  goto L4adc9c;
  catch `java.lang.Throwable` @[L4adbca..L4adc02] goto L4adc96;
  catch `java.lang.Throwable` @[L4adc04..L4adc0c] goto L4adc78;
  catch `java.lang.Throwable` @[L4adc16..L4adc22] goto L4adc1e;
  catch `java.lang.Throwable` @[L4adc24..L4adc2a] goto L4adc78;
  catch `java.lang.Throwable` @[L4adc2a..L4adc36] goto L4adc62;
  catch `java.lang.Throwable` @[L4adc36..L4adc38] goto L4adc74;
  catch `java.lang.Throwable` @[L4adc3c..L4adc42] goto L4adc62;
  catch `java.lang.Throwable` @[L4adc42..L4adc4a] goto L4adc78;
  catch `java.lang.Throwable` @[L4adc54..L4adc60] goto L4adc5c;
  catch `java.lang.Throwable` @[L4adc66..L4adc68] goto L4adc74;
  catch `java.lang.Throwable` @[L4adc68..L4adc6a] goto L4adc6a;
  catch `java.lang.Throwable` @[L4adc86..L4adc92] goto L4adc8e;
  catch `java.lang.Throwable` @[L4adc98..L4adc9a] goto L4adc96;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber` v3 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4add2c.  v0:= v3.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4add30.  @monitorenter v0
  #L4add32.  v1:= v3.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.emitting` @type ^`boolean` @kind boolean;
  #L4add36.  if v1 == 0 then goto L4add66;
  #L4add3a.  v1:= v3.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4add3e.  if v1 != 0 then goto L4add50;
  #L4add42.  v1:= new `java.util.ArrayList`;
  #L4add46.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4add4c.  v3.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @type ^`java.util.List` := v1 @kind object;
  #L4add50.  v1:= v3.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4add54.  call temp:= `completed`() @signature `Lrx/internal/operators/NotificationLite;.completed:()Ljava/lang/Object;` @kind static;
  #L4add5a.  v2:= temp @kind object;
  #L4add5c.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4add62.  @monitorexit v0
  #L4add64.  return @kind void;
  #L4add66.  v1:= v3.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4add6a.  v2:= 0I;
  #L4add6c.  v3.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @type ^`java.util.List` := v2 @kind object;
  #L4add70.  v2:= 1I;
  #L4add72.  v3.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.emitting` @type ^`boolean` := v2 @kind boolean;
  #L4add76.  @monitorexit v0
  #L4add78.  call temp:= `drain`(v3, v1) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.drain:(Ljava/util/List;)Z` @kind virtual;
  #L4add7e.  call `complete`(v3) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.complete:()V` @kind virtual;
  #L4add84.  return @kind void;
  #L4add86.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4add88.  call `error`(v3, v0) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4add8e.  return @kind void;
  #L4add90.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4add92.  @monitorexit v0
  #L4add94.  throw v1;
  catch `java.lang.Throwable` @[L4add32..L4add78] goto L4add90;
  catch `java.lang.Throwable` @[L4add78..L4add7e] goto L4add86;
  catch `java.lang.Throwable` @[L4add92..L4add94] goto L4add90;
}
procedure `void` `onError`(`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4addc8.  v0:= v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4addcc.  @monitorenter v0
  #L4addce.  v1:= v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.emitting` @type ^`boolean` @kind boolean;
  #L4addd2.  if v1 == 0 then goto L4addee;
  #L4addd6.  call temp:= `error`(v3) @signature `Lrx/internal/operators/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4adddc.  v3:= temp @kind object;
  #L4addde.  call temp:= `singletonList`(v3) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4adde4.  v3:= temp @kind object;
  #L4adde6.  v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @type ^`java.util.List` := v3 @kind object;
  #L4addea.  @monitorexit v0
  #L4addec.  return @kind void;
  #L4addee.  v1:= 0I;
  #L4addf0.  v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @type ^`java.util.List` := v1 @kind object;
  #L4addf4.  v1:= 1I;
  #L4addf6.  v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.emitting` @type ^`boolean` := v1 @kind boolean;
  #L4addfa.  @monitorexit v0
  #L4addfc.  call `error`(v2, v3) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ade02.  return @kind void;
  #L4ade04.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ade06.  @monitorexit v0
  #L4ade08.  throw v3;
  catch `java.lang.Throwable` @[L4addce..L4addfc] goto L4ade04;
  catch `java.lang.Throwable` @[L4ade06..L4ade08] goto L4ade04;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ade30.  v0:= v4.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ade34.  @monitorenter v0
  #L4ade36.  v1:= v4.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.emitting` @type ^`boolean` @kind boolean;
  #L4ade3a.  if v1 == 0 then goto L4ade62;
  #L4ade3e.  v1:= v4.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4ade42.  if v1 != 0 then goto L4ade54;
  #L4ade46.  v1:= new `java.util.ArrayList`;
  #L4ade4a.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4ade50.  v4.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @type ^`java.util.List` := v1 @kind object;
  #L4ade54.  v1:= v4.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4ade58.  call temp:= `add`(v1, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ade5e.  @monitorexit v0
  #L4ade60.  return @kind void;
  #L4ade62.  v1:= 1I;
  #L4ade64.  v4.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.emitting` @type ^`boolean` := v1 @kind boolean;
  #L4ade68.  @monitorexit v0
  #L4ade6a.  v0:= 0I;
  #L4ade6c.  call temp:= `emitValue`(v4, v5) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.emitValue:(Ljava/lang/Object;)Z` @kind virtual;
  #L4ade72.  v5:= temp;
  #L4ade74.  if v5 != 0 then goto L4ade8c;
  #L4ade78.  v5:= v4.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ade7c.  @monitorenter v5
  #L4ade7e.  v4.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4ade82.  @monitorexit v5
  #L4ade84.  return @kind void;
  #L4ade86.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ade88.  @monitorexit v5
  #L4ade8a.  throw v0;
  #L4ade8c.  v5:= v4.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ade90.  @monitorenter v5
  #L4ade92.  v2:= v4.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @type ^`java.util.List` @kind object;
  #L4ade96.  if v2 != 0 then goto L4adea2;
  #L4ade9a.  v4.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4ade9e.  @monitorexit v5
  #L4adea0.  return @kind void;
  #L4adea2.  v3:= 0I;
  #L4adea4.  v4.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.queue` @type ^`java.util.List` := v3 @kind object;
  #L4adea8.  @monitorexit v5
  #L4adeaa.  call temp:= `drain`(v4, v2) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.drain:(Ljava/util/List;)Z` @kind virtual;
  #L4adeb0.  v5:= temp;
  #L4adeb2.  if v5 != 0 then goto L4ade8c;
  #L4adeb6.  v5:= v4.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4adeba.  @monitorenter v5
  #L4adebc.  v4.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4adec0.  @monitorexit v5
  #L4adec2.  return @kind void;
  #L4adec4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4adec6.  @monitorexit v5
  #L4adec8.  throw v0;
  #L4adeca.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4adecc.  v1:= 0I;
  #L4adece.  @monitorexit v5
  #L4aded0.  throw v2;
  #L4aded2.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aded4.  goto L4adede;
  #L4aded6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aded8.  goto L4adece;
  #L4adeda.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4adedc.  v1:= 0I;
  #L4adede.  if v1 != 0 then goto L4adef6;
  #L4adee2.  v1:= v4.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4adee6.  @monitorenter v1
  #L4adee8.  v4.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.emitting` @type ^`boolean` := v0 @kind boolean;
  #L4adeec.  @monitorexit v1
  #L4adeee.  goto L4adef6;
  #L4adef0.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4adef2.  @monitorexit v1
  #L4adef4.  throw v5;
  #L4adef6.  throw v5;
  #L4adef8.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4adefa.  @monitorexit v0
  #L4adefc.  goto L4adf00;
  #L4adefe.  throw v5;
  #L4adf00.  goto L4adefe;
  catch `java.lang.Throwable` @[L4ade36..L4ade6a] goto L4adef8;
  catch `java.lang.Throwable` @[L4ade6c..L4ade74] goto L4adeda;
  catch `java.lang.Throwable` @[L4ade7e..L4ade8a] goto L4ade86;
  catch `java.lang.Throwable` @[L4ade8c..L4ade92] goto L4adeda;
  catch `java.lang.Throwable` @[L4ade92..L4ade9e] goto L4adeca;
  catch `java.lang.Throwable` @[L4ade9e..L4adea0] goto L4aded6;
  catch `java.lang.Throwable` @[L4adea4..L4adeaa] goto L4adeca;
  catch `java.lang.Throwable` @[L4adeaa..L4adeb2] goto L4adeda;
  catch `java.lang.Throwable` @[L4adebc..L4adec8] goto L4adec4;
  catch `java.lang.Throwable` @[L4adece..L4aded0] goto L4aded6;
  catch `java.lang.Throwable` @[L4aded0..L4aded2] goto L4aded2;
  catch `java.lang.Throwable` @[L4adee8..L4adef4] goto L4adef0;
  catch `java.lang.Throwable` @[L4adefa..L4adefc] goto L4adef8;
}
procedure `void` `onStart`(`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.onStart:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4adf90.  v0:= 9223372036854775807L;
  #L4adf9a.  call `request`(v2, v0) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.request:(J)V` @kind virtual;
  #L4adfa0.  return @kind void;
}
procedure `boolean` `replaceSubject`(`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.replaceSubject:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4ada68.  v0:= v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.state` @type ^`rx.internal.operators.OperatorWindowWithTime$State` @kind object;
  #L4ada6c.  v0:= v0.`rx.internal.operators.OperatorWindowWithTime$State.consumer` @type ^`rx.Observer` @kind object;
  #L4ada70.  if v0 == 0 then goto L4ada7a;
  #L4ada74.  call `onCompleted`(v0) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4ada7a.  v0:= v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4ada7e.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4ada84.  v0:= temp;
  #L4ada86.  if v0 == 0 then goto L4adaa4;
  #L4ada8a.  v0:= v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.state` @type ^`rx.internal.operators.OperatorWindowWithTime$State` @kind object;
  #L4ada8e.  call temp:= `clear`(v0) @signature `Lrx/internal/operators/OperatorWindowWithTime$State;.clear:()Lrx/internal/operators/OperatorWindowWithTime$State;` @kind virtual;
  #L4ada94.  v0:= temp @kind object;
  #L4ada96.  v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.state` @type ^`rx.internal.operators.OperatorWindowWithTime$State` := v0 @kind object;
  #L4ada9a.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.unsubscribe:()V` @kind virtual;
  #L4adaa0.  v0:= 0I;
  #L4adaa2.  return v0;
  #L4adaa4.  call temp:= `create`() @signature `Lrx/subjects/UnicastSubject;.create:()Lrx/subjects/UnicastSubject;` @kind static;
  #L4adaaa.  v0:= temp @kind object;
  #L4adaac.  v1:= v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.state` @type ^`rx.internal.operators.OperatorWindowWithTime$State` @kind object;
  #L4adab0.  call temp:= `create`(v1, v0, v0) @signature `Lrx/internal/operators/OperatorWindowWithTime$State;.create:(Lrx/Observer;Lrx/Observable;)Lrx/internal/operators/OperatorWindowWithTime$State;` @kind virtual;
  #L4adab6.  v1:= temp @kind object;
  #L4adab8.  v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.state` @type ^`rx.internal.operators.OperatorWindowWithTime$State` := v1 @kind object;
  #L4adabc.  v1:= v2.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4adac0.  call `onNext`(v1, v0) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4adac6.  v0:= 1I;
  #L4adac8.  return v0;
}
procedure `void` `scheduleExact`(`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber` v7 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;.scheduleExact:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4adfb4.  v0:= v7.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.worker` @type ^`rx.Scheduler$Worker` @kind object;
  #L4adfb8.  v1:= new `rx.internal.operators.OperatorWindowWithTime$ExactSubscriber$2`;
  #L4adfbc.  call `<init>`(v1, v7) @signature `Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber$2;.<init>:(Lrx/internal/operators/OperatorWindowWithTime$ExactSubscriber;)V` @kind direct;
  #L4adfc2.  v2:= v7.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.this$0` @type ^`rx.internal.operators.OperatorWindowWithTime` @kind object;
  #L4adfc6.  v4:= v2.`rx.internal.operators.OperatorWindowWithTime.timespan` @type ^`long` @kind wide;
  #L4adfca.  v2:= v7.`rx.internal.operators.OperatorWindowWithTime$ExactSubscriber.this$0` @type ^`rx.internal.operators.OperatorWindowWithTime` @kind object;
  #L4adfce.  v6:= v2.`rx.internal.operators.OperatorWindowWithTime.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4adfd2.  v2:= 0L;
  #L4adfd6.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lrx/Scheduler$Worker;.schedulePeriodically:(Lrx/functions/Action0;JJLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L4adfdc.  return @kind void;
}
