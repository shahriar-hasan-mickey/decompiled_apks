record `rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction` @kind class @AccessFlag FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.internal.operators.BufferUntilSubscriber$State` `rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction.state` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction` v0 @kind this, `rx.internal.operators.BufferUntilSubscriber$State` v1 @kind object) @signature `Lrx/internal/operators/BufferUntilSubscriber$OnSubscribeAction;.<init>:(Lrx/internal/operators/BufferUntilSubscriber$State;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L493844.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49384a.  v0.`rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` := v1 @kind object;
  #L49384e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/BufferUntilSubscriber$OnSubscribeAction;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L493860.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L493864.  call `call`(v0, v1) @signature `Lrx/internal/operators/BufferUntilSubscriber$OnSubscribeAction;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L49386a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction` v3 @kind this, `rx.Subscriber` v4 @kind object) @signature `Lrx/internal/operators/BufferUntilSubscriber$OnSubscribeAction;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49387c.  v0:= v3.`rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L493880.  v1:= 0I;
  #L493882.  call temp:= `casObserverRef`(v0, v1, v4) @signature `Lrx/internal/operators/BufferUntilSubscriber$State;.casObserverRef:(Lrx/Observer;Lrx/Observer;)Z` @kind virtual;
  #L493888.  v0:= temp;
  #L49388a.  if v0 == 0 then goto L493938;
  #L49388e.  v0:= new `rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction$1`;
  #L493892.  call `<init>`(v0, v3) @signature `Lrx/internal/operators/BufferUntilSubscriber$OnSubscribeAction$1;.<init>:(Lrx/internal/operators/BufferUntilSubscriber$OnSubscribeAction;)V` @kind direct;
  #L493898.  call temp:= `create`(v0) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L49389e.  v0:= temp @kind object;
  #L4938a0.  call `add`(v4, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4938a6.  v4:= v3.`rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L4938aa.  v0:= v4.`rx.internal.operators.BufferUntilSubscriber$State.guard` @type ^`java.lang.Object` @kind object;
  #L4938ae.  @monitorenter v0
  #L4938b0.  v4:= v3.`rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L4938b4.  v4:= v4.`rx.internal.operators.BufferUntilSubscriber$State.emitting` @type ^`boolean` @kind boolean;
  #L4938b8.  v1:= 1I;
  #L4938ba.  v2:= 0I;
  #L4938bc.  if v4 != 0 then goto L4938ca;
  #L4938c0.  v4:= v3.`rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L4938c4.  v4.`rx.internal.operators.BufferUntilSubscriber$State.emitting` @type ^`boolean` := v1 @kind boolean;
  #L4938c8.  goto L4938cc;
  #L4938ca.  v1:= 0I;
  #L4938cc.  @monitorexit v0
  #L4938ce.  if v1 == 0 then goto L49394c;
  #L4938d2.  v4:= v3.`rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L4938d6.  v4:= v4.`rx.internal.operators.BufferUntilSubscriber$State.buffer` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L4938da.  call temp:= `poll`(v4) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4938e0.  v4:= temp @kind object;
  #L4938e2.  if v4 == 0 then goto L4938fe;
  #L4938e6.  v0:= v3.`rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L4938ea.  call temp:= `get`(v0) @signature `Lrx/internal/operators/BufferUntilSubscriber$State;.get:()Ljava/lang/Object;` @kind virtual;
  #L4938f0.  v0:= temp @kind object;
  #L4938f2.  v0:= (`rx.Observer`) v0 @kind object;
  #L4938f6.  call temp:= `accept`(v0, v4) @signature `Lrx/internal/operators/NotificationLite;.accept:(Lrx/Observer;Ljava/lang/Object;)Z` @kind static;
  #L4938fc.  goto L4938d2;
  #L4938fe.  v4:= v3.`rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L493902.  v4:= v4.`rx.internal.operators.BufferUntilSubscriber$State.guard` @type ^`java.lang.Object` @kind object;
  #L493906.  @monitorenter v4
  #L493908.  v0:= v3.`rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L49390c.  v0:= v0.`rx.internal.operators.BufferUntilSubscriber$State.buffer` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L493910.  call temp:= `isEmpty`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.isEmpty:()Z` @kind virtual;
  #L493916.  v0:= temp;
  #L493918.  if v0 == 0 then goto L493928;
  #L49391c.  v0:= v3.`rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction.state` @type ^`rx.internal.operators.BufferUntilSubscriber$State` @kind object;
  #L493920.  v0.`rx.internal.operators.BufferUntilSubscriber$State.emitting` @type ^`boolean` := v2 @kind boolean;
  #L493924.  @monitorexit v4
  #L493926.  goto L49394c;
  #L493928.  @monitorexit v4
  #L49392a.  goto L4938d2;
  #L49392c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49392e.  @monitorexit v4
  #L493930.  throw v0;
  #L493932.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L493934.  @monitorexit v0
  #L493936.  throw v4;
  #L493938.  v0:= new `java.lang.IllegalStateException`;
  #L49393c.  v1:= "Only one subscriber allowed!" @kind object;
  #L493940.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493946.  call `onError`(v4, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49394c.  return @kind void;
  catch `java.lang.Throwable` @[L4938b0..L4938ce] goto L493932;
  catch `java.lang.Throwable` @[L493908..L493930] goto L49392c;
  catch `java.lang.Throwable` @[L493934..L493936] goto L493932;
}
