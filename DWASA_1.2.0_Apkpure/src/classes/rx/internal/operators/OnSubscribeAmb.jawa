record `rx.internal.operators.OnSubscribeAmb` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `java.lang.Iterable` `rx.internal.operators.OnSubscribeAmb.sources` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeAmb` v0 @kind this, `java.lang.Iterable` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeAmb;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L496a14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L496a1a.  v0.`rx.internal.operators.OnSubscribeAmb.sources` @type ^`java.lang.Iterable` := v1 @kind object;
  #L496a1e.  return @kind void;
}
procedure `rx.Observable$OnSubscribe` `amb`(`java.lang.Iterable` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Ljava/lang/Iterable;)Lrx/Observable$OnSubscribe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4967c8.  v0:= new `rx.internal.operators.OnSubscribeAmb`;
  #L4967cc.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeAmb;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L4967d2.  return v0 @kind object;
}
procedure `rx.Observable$OnSubscribe` `amb`(`rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4967e4.  v0:= new `java.util.ArrayList`;
  #L4967e8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4967ee.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4967f4.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4967fa.  call temp:= `amb`(v0) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Ljava/lang/Iterable;)Lrx/Observable$OnSubscribe;` @kind static;
  #L496800.  v1:= temp @kind object;
  #L496802.  return v1 @kind object;
}
procedure `rx.Observable$OnSubscribe` `amb`(`rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L496814.  v0:= new `java.util.ArrayList`;
  #L496818.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L49681e.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L496824.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49682a.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L496830.  call temp:= `amb`(v0) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Ljava/lang/Iterable;)Lrx/Observable$OnSubscribe;` @kind static;
  #L496836.  v1:= temp @kind object;
  #L496838.  return v1 @kind object;
}
procedure `rx.Observable$OnSubscribe` `amb`(`rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49684c.  v0:= new `java.util.ArrayList`;
  #L496850.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L496856.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49685c.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L496862.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L496868.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49686e.  call temp:= `amb`(v0) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Ljava/lang/Iterable;)Lrx/Observable$OnSubscribe;` @kind static;
  #L496874.  v1:= temp @kind object;
  #L496876.  return v1 @kind object;
}
procedure `rx.Observable$OnSubscribe` `amb`(`rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L496888.  v0:= new `java.util.ArrayList`;
  #L49688c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L496892.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L496898.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49689e.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4968a4.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4968aa.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4968b0.  call temp:= `amb`(v0) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Ljava/lang/Iterable;)Lrx/Observable$OnSubscribe;` @kind static;
  #L4968b6.  v1:= temp @kind object;
  #L4968b8.  return v1 @kind object;
}
procedure `rx.Observable$OnSubscribe` `amb`(`rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4968cc.  v0:= new `java.util.ArrayList`;
  #L4968d0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4968d6.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4968dc.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4968e2.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4968e8.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4968ee.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4968f4.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4968fa.  call temp:= `amb`(v0) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Ljava/lang/Iterable;)Lrx/Observable$OnSubscribe;` @kind static;
  #L496900.  v1:= temp @kind object;
  #L496902.  return v1 @kind object;
}
procedure `rx.Observable$OnSubscribe` `amb`(`rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L496914.  v0:= new `java.util.ArrayList`;
  #L496918.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L49691e.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L496924.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49692a.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L496930.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L496936.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49693c.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L496942.  call temp:= `add`(v0, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L496948.  call temp:= `amb`(v0) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Ljava/lang/Iterable;)Lrx/Observable$OnSubscribe;` @kind static;
  #L49694e.  v1:= temp @kind object;
  #L496950.  return v1 @kind object;
}
procedure `rx.Observable$OnSubscribe` `amb`(`rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L496964.  v0:= new `java.util.ArrayList`;
  #L496968.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L49696e.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L496974.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49697a.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L496980.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L496986.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49698c.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L496992.  call temp:= `add`(v0, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L496998.  call temp:= `add`(v0, v8) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L49699e.  call temp:= `amb`(v0) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Ljava/lang/Iterable;)Lrx/Observable$OnSubscribe;` @kind static;
  #L4969a4.  v1:= temp @kind object;
  #L4969a6.  return v1 @kind object;
}
procedure `rx.Observable$OnSubscribe` `amb`(`rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Observable` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Observable` v5 @kind object, `rx.Observable` v6 @kind object, `rx.Observable` v7 @kind object, `rx.Observable` v8 @kind object, `rx.Observable` v9 @kind object) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4969b8.  v0:= new `java.util.ArrayList`;
  #L4969bc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4969c2.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4969c8.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4969ce.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4969d4.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4969da.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4969e0.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4969e6.  call temp:= `add`(v0, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4969ec.  call temp:= `add`(v0, v8) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4969f2.  call temp:= `add`(v0, v9) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4969f8.  call temp:= `amb`(v0) @signature `Lrx/internal/operators/OnSubscribeAmb;.amb:(Ljava/lang/Iterable;)Lrx/Observable$OnSubscribe;` @kind static;
  #L4969fe.  v1:= temp @kind object;
  #L496a00.  return v1 @kind object;
}
procedure `void` `unsubscribeAmbSubscribers`(`java.util.Collection` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeAmb;.unsubscribeAmbSubscribers:(Ljava/util/Collection;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L496b10.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L496b16.  v0:= temp;
  #L496b18.  if v0 != 0 then goto L496b4a;
  #L496b1c.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L496b22.  v0:= temp @kind object;
  #L496b24.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L496b2a.  v1:= temp;
  #L496b2c.  if v1 == 0 then goto L496b44;
  #L496b30.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L496b36.  v1:= temp @kind object;
  #L496b38.  v1:= (`rx.internal.operators.OnSubscribeAmb$AmbSubscriber`) v1 @kind object;
  #L496b3c.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OnSubscribeAmb$AmbSubscriber;.unsubscribe:()V` @kind virtual;
  #L496b42.  goto L496b24;
  #L496b44.  call `clear`(v2) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L496b4a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeAmb` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeAmb;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L496a30.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L496a34.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeAmb;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L496a3a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeAmb` v6 @kind this, `rx.Subscriber` v7 @kind object) @signature `Lrx/internal/operators/OnSubscribeAmb;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L496a4c.  v0:= new `rx.internal.operators.OnSubscribeAmb$Selection`;
  #L496a50.  call `<init>`(v0) @signature `Lrx/internal/operators/OnSubscribeAmb$Selection;.<init>:()V` @kind direct;
  #L496a56.  v1:= new `rx.internal.operators.OnSubscribeAmb$1`;
  #L496a5a.  call `<init>`(v1, v6, v0) @signature `Lrx/internal/operators/OnSubscribeAmb$1;.<init>:(Lrx/internal/operators/OnSubscribeAmb;Lrx/internal/operators/OnSubscribeAmb$Selection;)V` @kind direct;
  #L496a60.  call temp:= `create`(v1) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L496a66.  v1:= temp @kind object;
  #L496a68.  call `add`(v7, v1) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L496a6e.  v1:= v6.`rx.internal.operators.OnSubscribeAmb.sources` @type ^`java.lang.Iterable` @kind object;
  #L496a72.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L496a78.  v1:= temp @kind object;
  #L496a7a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L496a80.  v2:= temp;
  #L496a82.  if v2 == 0 then goto L496ad8;
  #L496a86.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L496a8c.  v2:= temp @kind object;
  #L496a8e.  v2:= (`rx.Observable`) v2 @kind object;
  #L496a92.  call temp:= `isUnsubscribed`(v7) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L496a98.  v3:= temp;
  #L496a9a.  if v3 == 0 then goto L496aa0;
  #L496a9e.  goto L496ad8;
  #L496aa0.  v3:= new `rx.internal.operators.OnSubscribeAmb$AmbSubscriber`;
  #L496aa4.  v4:= 0L;
  #L496aa8.  call `<init>`(v3, v4, v7, v0) @signature `Lrx/internal/operators/OnSubscribeAmb$AmbSubscriber;.<init>:(JLrx/Subscriber;Lrx/internal/operators/OnSubscribeAmb$Selection;)V` @kind direct;
  #L496aae.  v4:= v0.`rx.internal.operators.OnSubscribeAmb$Selection.ambSubscribers` @type ^`java.util.Collection` @kind object;
  #L496ab2.  call temp:= `add`(v4, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L496ab8.  call temp:= `get`(v0) @signature `Lrx/internal/operators/OnSubscribeAmb$Selection;.get:()Ljava/lang/Object;` @kind virtual;
  #L496abe.  v4:= temp @kind object;
  #L496ac0.  v4:= (`rx.internal.operators.OnSubscribeAmb$AmbSubscriber`) v4 @kind object;
  #L496ac4.  if v4 == 0 then goto L496ad0;
  #L496ac8.  call `unsubscribeOthers`(v0, v4) @signature `Lrx/internal/operators/OnSubscribeAmb$Selection;.unsubscribeOthers:(Lrx/internal/operators/OnSubscribeAmb$AmbSubscriber;)V` @kind virtual;
  #L496ace.  return @kind void;
  #L496ad0.  call temp:= `unsafeSubscribe`(v2, v3) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L496ad6.  goto L496a7a;
  #L496ad8.  call temp:= `isUnsubscribed`(v7) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L496ade.  v1:= temp;
  #L496ae0.  if v1 == 0 then goto L496aee;
  #L496ae4.  v1:= v0.`rx.internal.operators.OnSubscribeAmb$Selection.ambSubscribers` @type ^`java.util.Collection` @kind object;
  #L496ae8.  call `unsubscribeAmbSubscribers`(v1) @signature `Lrx/internal/operators/OnSubscribeAmb;.unsubscribeAmbSubscribers:(Ljava/util/Collection;)V` @kind static;
  #L496aee.  v1:= new `rx.internal.operators.OnSubscribeAmb$2`;
  #L496af2.  call `<init>`(v1, v6, v0) @signature `Lrx/internal/operators/OnSubscribeAmb$2;.<init>:(Lrx/internal/operators/OnSubscribeAmb;Lrx/internal/operators/OnSubscribeAmb$Selection;)V` @kind direct;
  #L496af8.  call `setProducer`(v7, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L496afe.  return @kind void;
}
