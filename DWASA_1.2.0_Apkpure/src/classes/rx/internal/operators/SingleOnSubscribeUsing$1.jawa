record `rx.internal.operators.SingleOnSubscribeUsing$1` @kind class @AccessFlag  extends `rx.SingleSubscriber` @kind class {
  `rx.internal.operators.SingleOnSubscribeUsing` `rx.internal.operators.SingleOnSubscribeUsing$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.SingleSubscriber` `rx.internal.operators.SingleOnSubscribeUsing$1.val$child` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `rx.internal.operators.SingleOnSubscribeUsing$1.val$resource` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.SingleOnSubscribeUsing$1` v0 @kind this, `rx.internal.operators.SingleOnSubscribeUsing` v1 @kind object, `java.lang.Object` v2 @kind object, `rx.SingleSubscriber` v3 @kind object) @signature `Lrx/internal/operators/SingleOnSubscribeUsing$1;.<init>:(Lrx/internal/operators/SingleOnSubscribeUsing;Ljava/lang/Object;Lrx/SingleSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b0084.  v0.`rx.internal.operators.SingleOnSubscribeUsing$1.this$0` @type ^`rx.internal.operators.SingleOnSubscribeUsing` := v1 @kind object;
  #L4b0088.  v0.`rx.internal.operators.SingleOnSubscribeUsing$1.val$resource` @type ^`java.lang.Object` := v2 @kind object;
  #L4b008c.  v0.`rx.internal.operators.SingleOnSubscribeUsing$1.val$child` @type ^`rx.SingleSubscriber` := v3 @kind object;
  #L4b0090.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L4b0096.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.SingleOnSubscribeUsing$1` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lrx/internal/operators/SingleOnSubscribeUsing$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b00a8.  v0:= v3.`rx.internal.operators.SingleOnSubscribeUsing$1.this$0` @type ^`rx.internal.operators.SingleOnSubscribeUsing` @kind object;
  #L4b00ac.  v1:= v3.`rx.internal.operators.SingleOnSubscribeUsing$1.val$child` @type ^`rx.SingleSubscriber` @kind object;
  #L4b00b0.  v2:= v3.`rx.internal.operators.SingleOnSubscribeUsing$1.val$resource` @type ^`java.lang.Object` @kind object;
  #L4b00b4.  call `handleSubscriptionTimeError`(v0, v1, v2, v4) @signature `Lrx/internal/operators/SingleOnSubscribeUsing;.handleSubscriptionTimeError:(Lrx/SingleSubscriber;Ljava/lang/Object;Ljava/lang/Throwable;)V` @kind virtual;
  #L4b00ba.  return @kind void;
}
procedure `void` `onSuccess`(`rx.internal.operators.SingleOnSubscribeUsing$1` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/SingleOnSubscribeUsing$1;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b00cc.  v0:= v2.`rx.internal.operators.SingleOnSubscribeUsing$1.this$0` @type ^`rx.internal.operators.SingleOnSubscribeUsing` @kind object;
  #L4b00d0.  v0:= v0.`rx.internal.operators.SingleOnSubscribeUsing.disposeEagerly` @type ^`boolean` @kind boolean;
  #L4b00d4.  if v0 == 0 then goto L4b0100;
  #L4b00d8.  v0:= v2.`rx.internal.operators.SingleOnSubscribeUsing$1.this$0` @type ^`rx.internal.operators.SingleOnSubscribeUsing` @kind object;
  #L4b00dc.  v0:= v0.`rx.internal.operators.SingleOnSubscribeUsing.disposeAction` @type ^`rx.functions.Action1` @kind object;
  #L4b00e0.  v1:= v2.`rx.internal.operators.SingleOnSubscribeUsing$1.val$resource` @type ^`java.lang.Object` @kind object;
  #L4b00e4.  call `call`(v0, v1) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4b00ea.  goto L4b0100;
  #L4b00ec.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b00ee.  call `throwIfFatal`(v3) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b00f4.  v0:= v2.`rx.internal.operators.SingleOnSubscribeUsing$1.val$child` @type ^`rx.SingleSubscriber` @kind object;
  #L4b00f8.  call `onError`(v0, v3) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b00fe.  return @kind void;
  #L4b0100.  v0:= v2.`rx.internal.operators.SingleOnSubscribeUsing$1.val$child` @type ^`rx.SingleSubscriber` @kind object;
  #L4b0104.  call `onSuccess`(v0, v3) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L4b010a.  v3:= v2.`rx.internal.operators.SingleOnSubscribeUsing$1.this$0` @type ^`rx.internal.operators.SingleOnSubscribeUsing` @kind object;
  #L4b010e.  v3:= v3.`rx.internal.operators.SingleOnSubscribeUsing.disposeEagerly` @type ^`boolean` @kind boolean;
  #L4b0112.  if v3 != 0 then goto L4b0138;
  #L4b0116.  v3:= v2.`rx.internal.operators.SingleOnSubscribeUsing$1.this$0` @type ^`rx.internal.operators.SingleOnSubscribeUsing` @kind object;
  #L4b011a.  v3:= v3.`rx.internal.operators.SingleOnSubscribeUsing.disposeAction` @type ^`rx.functions.Action1` @kind object;
  #L4b011e.  v0:= v2.`rx.internal.operators.SingleOnSubscribeUsing$1.val$resource` @type ^`java.lang.Object` @kind object;
  #L4b0122.  call `call`(v3, v0) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4b0128.  goto L4b0138;
  #L4b012a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b012c.  call `throwIfFatal`(v3) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b0132.  call `onError`(v3) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b0138.  return @kind void;
  catch `java.lang.Throwable` @[L4b00d8..L4b00ea] goto L4b00ec;
  catch `java.lang.Throwable` @[L4b0116..L4b0128] goto L4b012a;
}
