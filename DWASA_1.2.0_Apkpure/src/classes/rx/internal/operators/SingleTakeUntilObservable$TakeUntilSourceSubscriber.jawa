record `rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber` @kind class @AccessFlag FINAL extends `rx.SingleSubscriber` @kind class {
  `rx.SingleSubscriber` `rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber.actual` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber.once` @AccessFlag FINAL;
  `rx.Subscriber` `rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber.other` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber` v0 @kind this, `rx.SingleSubscriber` v1 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilObservable$TakeUntilSourceSubscriber;.<init>:(Lrx/SingleSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b0898.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L4b089e.  v0.`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber.actual` @type ^`rx.SingleSubscriber` := v1 @kind object;
  #L4b08a2.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4b08a6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4b08ac.  v0.`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4b08b0.  v1:= new `rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber$OtherSubscriber`;
  #L4b08b4.  call `<init>`(v1, v0) @signature `Lrx/internal/operators/SingleTakeUntilObservable$TakeUntilSourceSubscriber$OtherSubscriber;.<init>:(Lrx/internal/operators/SingleTakeUntilObservable$TakeUntilSourceSubscriber;)V` @kind direct;
  #L4b08ba.  v0.`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber.other` @type ^`rx.Subscriber` := v1 @kind object;
  #L4b08be.  v1:= v0.`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber.other` @type ^`rx.Subscriber` @kind object;
  #L4b08c2.  call `add`(v0, v1) @signature `Lrx/internal/operators/SingleTakeUntilObservable$TakeUntilSourceSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b08c8.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilObservable$TakeUntilSourceSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b08dc.  v0:= v3.`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b08e0.  v1:= 0I;
  #L4b08e2.  v2:= 1I;
  #L4b08e4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b08ea.  v0:= temp;
  #L4b08ec.  if v0 == 0 then goto L4b0902;
  #L4b08f0.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/SingleTakeUntilObservable$TakeUntilSourceSubscriber;.unsubscribe:()V` @kind virtual;
  #L4b08f6.  v0:= v3.`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4b08fa.  call `onError`(v0, v4) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b0900.  goto L4b0908;
  #L4b0902.  call `onError`(v4) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b0908.  return @kind void;
}
procedure `void` `onSuccess`(`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilObservable$TakeUntilSourceSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b091c.  v0:= v3.`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b0920.  v1:= 0I;
  #L4b0922.  v2:= 1I;
  #L4b0924.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b092a.  v0:= temp;
  #L4b092c.  if v0 == 0 then goto L4b0940;
  #L4b0930.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/SingleTakeUntilObservable$TakeUntilSourceSubscriber;.unsubscribe:()V` @kind virtual;
  #L4b0936.  v0:= v3.`rx.internal.operators.SingleTakeUntilObservable$TakeUntilSourceSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4b093a.  call `onSuccess`(v0, v4) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L4b0940.  return @kind void;
}
