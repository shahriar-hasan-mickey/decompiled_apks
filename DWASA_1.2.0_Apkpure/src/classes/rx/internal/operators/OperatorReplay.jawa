record `rx.internal.operators.OperatorReplay` @kind class @AccessFlag PUBLIC_FINAL extends `rx.observables.ConnectableObservable` @kind class {
  `rx.functions.Func0` `rx.internal.operators.OperatorReplay.bufferFactory` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OperatorReplay.current` @AccessFlag FINAL;
  `rx.Observable` `rx.internal.operators.OperatorReplay.source` @AccessFlag FINAL;
}
global `rx.functions.Func0` `@@rx.internal.operators.OperatorReplay.DEFAULT_UNBOUNDED_FACTORY` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OperatorReplay;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a7488.  v0:= new `rx.internal.operators.OperatorReplay$1`;
  #L4a748c.  call `<init>`(v0) @signature `Lrx/internal/operators/OperatorReplay$1;.<init>:()V` @kind direct;
  #L4a7492.  `@@rx.internal.operators.OperatorReplay.DEFAULT_UNBOUNDED_FACTORY` @type ^`rx.functions.Func0` := v0 @kind object;
  #L4a7496.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorReplay` v0 @kind this, `rx.Observable$OnSubscribe` v1 @kind object, `rx.Observable` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `rx.functions.Func0` v4 @kind object) @signature `Lrx/internal/operators/OperatorReplay;.<init>:(Lrx/Observable$OnSubscribe;Lrx/Observable;Ljava/util/concurrent/atomic/AtomicReference;Lrx/functions/Func0;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4a74a8.  call `<init>`(v0, v1) @signature `Lrx/observables/ConnectableObservable;.<init>:(Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L4a74ae.  v0.`rx.internal.operators.OperatorReplay.source` @type ^`rx.Observable` := v2 @kind object;
  #L4a74b2.  v0.`rx.internal.operators.OperatorReplay.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4a74b6.  v0.`rx.internal.operators.OperatorReplay.bufferFactory` @type ^`rx.functions.Func0` := v4 @kind object;
  #L4a74ba.  return @kind void;
}
procedure `rx.observables.ConnectableObservable` `create`(`rx.Observable` v1 @kind object) @signature `Lrx/internal/operators/OperatorReplay;.create:(Lrx/Observable;)Lrx/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4a737c.  v0:= `@@rx.internal.operators.OperatorReplay.DEFAULT_UNBOUNDED_FACTORY` @type ^`rx.functions.Func0` @kind object;
  #L4a7380.  call temp:= `create`(v1, v0) @signature `Lrx/internal/operators/OperatorReplay;.create:(Lrx/Observable;Lrx/functions/Func0;)Lrx/observables/ConnectableObservable;` @kind static;
  #L4a7386.  v1:= temp @kind object;
  #L4a7388.  return v1 @kind object;
}
procedure `rx.observables.ConnectableObservable` `create`(`rx.Observable` v1 @kind object, `int` v2 ) @signature `Lrx/internal/operators/OperatorReplay;.create:(Lrx/Observable;I)Lrx/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4a739c.  v0:= 2147483647I;
  #L4a73a2.  if v2 != v0 then goto L4a73b0;
  #L4a73a6.  call temp:= `create`(v1) @signature `Lrx/internal/operators/OperatorReplay;.create:(Lrx/Observable;)Lrx/observables/ConnectableObservable;` @kind static;
  #L4a73ac.  v1:= temp @kind object;
  #L4a73ae.  return v1 @kind object;
  #L4a73b0.  v0:= new `rx.internal.operators.OperatorReplay$5`;
  #L4a73b4.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorReplay$5;.<init>:(I)V` @kind direct;
  #L4a73ba.  call temp:= `create`(v1, v0) @signature `Lrx/internal/operators/OperatorReplay;.create:(Lrx/Observable;Lrx/functions/Func0;)Lrx/observables/ConnectableObservable;` @kind static;
  #L4a73c0.  v1:= temp @kind object;
  #L4a73c2.  return v1 @kind object;
}
procedure `rx.observables.ConnectableObservable` `create`(`rx.Observable` v6 @kind object, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `rx.Scheduler` v10 @kind object) @signature `Lrx/internal/operators/OperatorReplay;.create:(Lrx/Observable;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a73d4.  v5:= 2147483647I;
  #L4a73da.  v0:= v6 @kind object;
  #L4a73dc.  v1:= v7 @kind wide;
  #L4a73de.  v3:= v9 @kind object;
  #L4a73e0.  v4:= v10 @kind object;
  #L4a73e2.  call temp:= `create`(v0, v1, v3, v4, v5) @signature `Lrx/internal/operators/OperatorReplay;.create:(Lrx/Observable;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;I)Lrx/observables/ConnectableObservable;` @kind static;
  #L4a73e8.  v6:= temp @kind object;
  #L4a73ea.  return v6 @kind object;
}
procedure `rx.observables.ConnectableObservable` `create`(`rx.Observable` v0 @kind object, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `rx.Scheduler` v4 @kind object, `int` v5 ) @signature `Lrx/internal/operators/OperatorReplay;.create:(Lrx/Observable;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;I)Lrx/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4a73fc.  call temp:= `toMillis`(v3, v1) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L4a7402.  v1:= temp @kind wide;
  #L4a7404.  v3:= new `rx.internal.operators.OperatorReplay$6`;
  #L4a7408.  call `<init>`(v3, v5, v1, v4) @signature `Lrx/internal/operators/OperatorReplay$6;.<init>:(IJLrx/Scheduler;)V` @kind direct;
  #L4a740e.  call temp:= `create`(v0, v3) @signature `Lrx/internal/operators/OperatorReplay;.create:(Lrx/Observable;Lrx/functions/Func0;)Lrx/observables/ConnectableObservable;` @kind static;
  #L4a7414.  v0:= temp @kind object;
  #L4a7416.  return v0 @kind object;
}
procedure `rx.observables.ConnectableObservable` `create`(`rx.Observable` v3 @kind object, `rx.functions.Func0` v4 @kind object) @signature `Lrx/internal/operators/OperatorReplay;.create:(Lrx/Observable;Lrx/functions/Func0;)Lrx/observables/ConnectableObservable;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4a7428.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a742c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a7432.  v1:= new `rx.internal.operators.OperatorReplay$7`;
  #L4a7436.  call `<init>`(v1, v0, v4) @signature `Lrx/internal/operators/OperatorReplay$7;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lrx/functions/Func0;)V` @kind direct;
  #L4a743c.  v2:= new `rx.internal.operators.OperatorReplay`;
  #L4a7440.  call `<init>`(v2, v1, v3, v0, v4) @signature `Lrx/internal/operators/OperatorReplay;.<init>:(Lrx/Observable$OnSubscribe;Lrx/Observable;Ljava/util/concurrent/atomic/AtomicReference;Lrx/functions/Func0;)V` @kind direct;
  #L4a7446.  return v2 @kind object;
}
procedure `rx.Observable` `multicastSelector`(`rx.functions.Func0` v1 @kind object, `rx.functions.Func1` v2 @kind object) @signature `Lrx/internal/operators/OperatorReplay;.multicastSelector:(Lrx/functions/Func0;Lrx/functions/Func1;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4a7358.  v0:= new `rx.internal.operators.OperatorReplay$2`;
  #L4a735c.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/OperatorReplay$2;.<init>:(Lrx/functions/Func0;Lrx/functions/Func1;)V` @kind direct;
  #L4a7362.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L4a7368.  v1:= temp @kind object;
  #L4a736a.  return v1 @kind object;
}
procedure `rx.observables.ConnectableObservable` `observeOn`(`rx.observables.ConnectableObservable` v1 @kind object, `rx.Scheduler` v2 @kind object) @signature `Lrx/internal/operators/OperatorReplay;.observeOn:(Lrx/observables/ConnectableObservable;Lrx/Scheduler;)Lrx/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4a7458.  call temp:= `observeOn`(v1, v2) @signature `Lrx/observables/ConnectableObservable;.observeOn:(Lrx/Scheduler;)Lrx/Observable;` @kind virtual;
  #L4a745e.  v2:= temp @kind object;
  #L4a7460.  v0:= new `rx.internal.operators.OperatorReplay$3`;
  #L4a7464.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/OperatorReplay$3;.<init>:(Lrx/Observable;)V` @kind direct;
  #L4a746a.  v2:= new `rx.internal.operators.OperatorReplay$4`;
  #L4a746e.  call `<init>`(v2, v0, v1) @signature `Lrx/internal/operators/OperatorReplay$4;.<init>:(Lrx/Observable$OnSubscribe;Lrx/observables/ConnectableObservable;)V` @kind direct;
  #L4a7474.  return v2 @kind object;
}
procedure `void` `connect`(`rx.internal.operators.OperatorReplay` v4 @kind this, `rx.functions.Action1` v5 @kind object) @signature `Lrx/internal/operators/OperatorReplay;.connect:(Lrx/functions/Action1;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a74cc.  v0:= v4.`rx.internal.operators.OperatorReplay.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a74d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a74d6.  v0:= temp @kind object;
  #L4a74d8.  v0:= (`rx.internal.operators.OperatorReplay$ReplaySubscriber`) v0 @kind object;
  #L4a74dc.  if v0 == 0 then goto L4a74ec;
  #L4a74e0.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4a74e6.  v1:= temp;
  #L4a74e8.  if v1 == 0 then goto L4a7520;
  #L4a74ec.  v1:= new `rx.internal.operators.OperatorReplay$ReplaySubscriber`;
  #L4a74f0.  v2:= v4.`rx.internal.operators.OperatorReplay.bufferFactory` @type ^`rx.functions.Func0` @kind object;
  #L4a74f4.  call temp:= `call`(v2) @signature `Lrx/functions/Func0;.call:()Ljava/lang/Object;` @kind interface;
  #L4a74fa.  v2:= temp @kind object;
  #L4a74fc.  v2:= (`rx.internal.operators.OperatorReplay$ReplayBuffer`) v2 @kind object;
  #L4a7500.  call `<init>`(v1, v2) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.<init>:(Lrx/internal/operators/OperatorReplay$ReplayBuffer;)V` @kind direct;
  #L4a7506.  call `init`(v1) @signature `Lrx/internal/operators/OperatorReplay$ReplaySubscriber;.init:()V` @kind virtual;
  #L4a750c.  v2:= v4.`rx.internal.operators.OperatorReplay.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a7510.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a7516.  v0:= temp;
  #L4a7518.  if v0 != 0 then goto L4a751e;
  #L4a751c.  goto L4a74cc;
  #L4a751e.  v0:= v1 @kind object;
  #L4a7520.  v1:= v0.`rx.internal.operators.OperatorReplay$ReplaySubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a7524.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4a752a.  v1:= temp;
  #L4a752c.  v2:= 1I;
  #L4a752e.  v3:= 0I;
  #L4a7530.  if v1 != 0 then goto L4a7546;
  #L4a7534.  v1:= v0.`rx.internal.operators.OperatorReplay$ReplaySubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a7538.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4a753e.  v1:= temp;
  #L4a7540.  if v1 == 0 then goto L4a7546;
  #L4a7544.  goto L4a7548;
  #L4a7546.  v2:= 0I;
  #L4a7548.  call `call`(v5, v0) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4a754e.  if v2 == 0 then goto L4a755c;
  #L4a7552.  v5:= v4.`rx.internal.operators.OperatorReplay.source` @type ^`rx.Observable` @kind object;
  #L4a7556.  call temp:= `unsafeSubscribe`(v5, v0) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4a755c.  return @kind void;
}
