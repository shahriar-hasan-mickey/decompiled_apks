record `rx.internal.operators.OperatorWindowWithSize$WindowExact` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class, `rx.functions.Action0` @kind interface {
  `rx.Subscriber` `rx.internal.operators.OperatorWindowWithSize$WindowExact.actual` @AccessFlag FINAL;
  `rx.Subscription` `rx.internal.operators.OperatorWindowWithSize$WindowExact.cancel` @AccessFlag FINAL;
  `int` `rx.internal.operators.OperatorWindowWithSize$WindowExact.index` @AccessFlag ;
  `int` `rx.internal.operators.OperatorWindowWithSize$WindowExact.size` @AccessFlag FINAL;
  `rx.subjects.Subject` `rx.internal.operators.OperatorWindowWithSize$WindowExact.window` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.OperatorWindowWithSize$WindowExact.wip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorWindowWithSize$WindowExact` v0 @kind this, `rx.Subscriber` v1 @kind object, `int` v2 ) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowExact;.<init>:(Lrx/Subscriber;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ac990.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4ac996.  v0.`rx.internal.operators.OperatorWindowWithSize$WindowExact.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L4ac99a.  v0.`rx.internal.operators.OperatorWindowWithSize$WindowExact.size` @type ^`int` := v2;
  #L4ac99e.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4ac9a2.  v2:= 1I;
  #L4ac9a4.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4ac9aa.  v0.`rx.internal.operators.OperatorWindowWithSize$WindowExact.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4ac9ae.  call temp:= `create`(v0) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L4ac9b4.  v1:= temp @kind object;
  #L4ac9b6.  v0.`rx.internal.operators.OperatorWindowWithSize$WindowExact.cancel` @type ^`rx.Subscription` := v1 @kind object;
  #L4ac9ba.  v1:= v0.`rx.internal.operators.OperatorWindowWithSize$WindowExact.cancel` @type ^`rx.Subscription` @kind object;
  #L4ac9be.  call `add`(v0, v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowExact;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4ac9c4.  v1:= 0L;
  #L4ac9c8.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowExact;.request:(J)V` @kind virtual;
  #L4ac9ce.  return @kind void;
}
procedure `void` `access$000`(`rx.internal.operators.OperatorWindowWithSize$WindowExact` v0 @kind object, `long` v1 ) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowExact;.access$000:(Lrx/internal/operators/OperatorWindowWithSize$WindowExact;J)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4ac9e0.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowExact;.request:(J)V` @kind virtual;
  #L4ac9e6.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorWindowWithSize$WindowExact` v1 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowExact;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ac9f8.  v0:= v1.`rx.internal.operators.OperatorWindowWithSize$WindowExact.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ac9fc.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4aca02.  v0:= temp;
  #L4aca04.  if v0 != 0 then goto L4aca0e;
  #L4aca08.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowExact;.unsubscribe:()V` @kind virtual;
  #L4aca0e.  return @kind void;
}
procedure `rx.Producer` `createProducer`(`rx.internal.operators.OperatorWindowWithSize$WindowExact` v1 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowExact;.createProducer:()Lrx/Producer;` @AccessFlag  {
    temp;
    v0;

  #L4ac974.  v0:= new `rx.internal.operators.OperatorWindowWithSize$WindowExact$1`;
  #L4ac978.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowExact$1;.<init>:(Lrx/internal/operators/OperatorWindowWithSize$WindowExact;)V` @kind direct;
  #L4ac97e.  return v0 @kind object;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorWindowWithSize$WindowExact` v2 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowExact;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aca20.  v0:= v2.`rx.internal.operators.OperatorWindowWithSize$WindowExact.window` @type ^`rx.subjects.Subject` @kind object;
  #L4aca24.  if v0 == 0 then goto L4aca34;
  #L4aca28.  v1:= 0I;
  #L4aca2a.  v2.`rx.internal.operators.OperatorWindowWithSize$WindowExact.window` @type ^`rx.subjects.Subject` := v1 @kind object;
  #L4aca2e.  call `onCompleted`(v0) @signature `Lrx/subjects/Subject;.onCompleted:()V` @kind virtual;
  #L4aca34.  v0:= v2.`rx.internal.operators.OperatorWindowWithSize$WindowExact.actual` @type ^`rx.Subscriber` @kind object;
  #L4aca38.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4aca3e.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorWindowWithSize$WindowExact` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowExact;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aca50.  v0:= v2.`rx.internal.operators.OperatorWindowWithSize$WindowExact.window` @type ^`rx.subjects.Subject` @kind object;
  #L4aca54.  if v0 == 0 then goto L4aca64;
  #L4aca58.  v1:= 0I;
  #L4aca5a.  v2.`rx.internal.operators.OperatorWindowWithSize$WindowExact.window` @type ^`rx.subjects.Subject` := v1 @kind object;
  #L4aca5e.  call `onError`(v0, v3) @signature `Lrx/subjects/Subject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4aca64.  v0:= v2.`rx.internal.operators.OperatorWindowWithSize$WindowExact.actual` @type ^`rx.Subscriber` @kind object;
  #L4aca68.  call `onError`(v0, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4aca6e.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorWindowWithSize$WindowExact` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowExact;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4aca80.  v0:= v3.`rx.internal.operators.OperatorWindowWithSize$WindowExact.index` @type ^`int`;
  #L4aca84.  v1:= v3.`rx.internal.operators.OperatorWindowWithSize$WindowExact.window` @type ^`rx.subjects.Subject` @kind object;
  #L4aca88.  if v0 != 0 then goto L4acab0;
  #L4aca8c.  v1:= v3.`rx.internal.operators.OperatorWindowWithSize$WindowExact.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4aca90.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4aca96.  v1:= v3.`rx.internal.operators.OperatorWindowWithSize$WindowExact.size` @type ^`int`;
  #L4aca9a.  call temp:= `create`(v1, v3) @signature `Lrx/subjects/UnicastSubject;.create:(ILrx/functions/Action0;)Lrx/subjects/UnicastSubject;` @kind static;
  #L4acaa0.  v1:= temp @kind object;
  #L4acaa2.  v3.`rx.internal.operators.OperatorWindowWithSize$WindowExact.window` @type ^`rx.subjects.Subject` := v1 @kind object;
  #L4acaa6.  v2:= v3.`rx.internal.operators.OperatorWindowWithSize$WindowExact.actual` @type ^`rx.Subscriber` @kind object;
  #L4acaaa.  call `onNext`(v2, v1) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4acab0.  v0:= v0 + 1;
  #L4acab4.  call `onNext`(v1, v4) @signature `Lrx/subjects/Subject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4acaba.  v4:= v3.`rx.internal.operators.OperatorWindowWithSize$WindowExact.size` @type ^`int`;
  #L4acabe.  if v0 != v4 then goto L4acad6;
  #L4acac2.  v4:= 0I;
  #L4acac4.  v3.`rx.internal.operators.OperatorWindowWithSize$WindowExact.index` @type ^`int` := v4;
  #L4acac8.  v4:= 0I;
  #L4acaca.  v3.`rx.internal.operators.OperatorWindowWithSize$WindowExact.window` @type ^`rx.subjects.Subject` := v4 @kind object;
  #L4acace.  call `onCompleted`(v1) @signature `Lrx/subjects/Subject;.onCompleted:()V` @kind virtual;
  #L4acad4.  goto L4acada;
  #L4acad6.  v3.`rx.internal.operators.OperatorWindowWithSize$WindowExact.index` @type ^`int` := v0;
  #L4acada.  return @kind void;
}
