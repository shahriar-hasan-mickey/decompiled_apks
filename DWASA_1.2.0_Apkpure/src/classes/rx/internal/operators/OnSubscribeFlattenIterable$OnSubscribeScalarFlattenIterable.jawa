record `rx.internal.operators.OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable` @kind class @AccessFlag FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.functions.Func1` `rx.internal.operators.OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable.mapper` @AccessFlag FINAL;
  `java.lang.Object` `rx.internal.operators.OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable.value` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable` v0 @kind this, `java.lang.Object` v1 @kind object, `rx.functions.Func1` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable;.<init>:(Ljava/lang/Object;Lrx/functions/Func1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L498a24.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L498a2a.  v0.`rx.internal.operators.OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable.value` @type ^`java.lang.Object` := v1 @kind object;
  #L498a2e.  v0.`rx.internal.operators.OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable.mapper` @type ^`rx.functions.Func1` := v2 @kind object;
  #L498a32.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L498a44.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L498a48.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L498a4e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L498a60.  v0:= v2.`rx.internal.operators.OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable.mapper` @type ^`rx.functions.Func1` @kind object;
  #L498a64.  v1:= v2.`rx.internal.operators.OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable.value` @type ^`java.lang.Object` @kind object;
  #L498a68.  call temp:= `call`(v0, v1) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L498a6e.  v0:= temp @kind object;
  #L498a70.  v0:= (`java.lang.Iterable`) v0 @kind object;
  #L498a74.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L498a7a.  v0:= temp @kind object;
  #L498a7c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L498a82.  v1:= temp;
  #L498a84.  if v1 != 0 then goto L498a90;
  #L498a88.  call `onCompleted`(v3) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L498a8e.  return @kind void;
  #L498a90.  v1:= new `rx.internal.operators.OnSubscribeFromIterable$IterableProducer`;
  #L498a94.  call `<init>`(v1, v3, v0) @signature `Lrx/internal/operators/OnSubscribeFromIterable$IterableProducer;.<init>:(Lrx/Subscriber;Ljava/util/Iterator;)V` @kind direct;
  #L498a9a.  call `setProducer`(v3, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L498aa0.  return @kind void;
  #L498aa2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L498aa4.  v1:= v2.`rx.internal.operators.OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable.value` @type ^`java.lang.Object` @kind object;
  #L498aa8.  call `throwOrReport`(v0, v3, v1) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L498aae.  return @kind void;
  catch `java.lang.Throwable` @[L498a60..L498a84] goto L498aa2;
}
