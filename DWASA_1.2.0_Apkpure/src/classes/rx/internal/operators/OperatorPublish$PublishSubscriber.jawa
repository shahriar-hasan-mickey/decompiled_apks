record `rx.internal.operators.OperatorPublish$PublishSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class, `rx.Subscription` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OperatorPublish$PublishSubscriber.current` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorPublish$PublishSubscriber.emitting` @AccessFlag ;
  `boolean` `rx.internal.operators.OperatorPublish$PublishSubscriber.missed` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OperatorPublish$PublishSubscriber.producers` @AccessFlag FINAL;
  `java.util.Queue` `rx.internal.operators.OperatorPublish$PublishSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.operators.OperatorPublish$PublishSubscriber.shouldConnect` @AccessFlag FINAL;
  `java.lang.Object` `rx.internal.operators.OperatorPublish$PublishSubscriber.terminalEvent` @AccessFlag VOLATILE;
}
global `rx.internal.operators.OperatorPublish$InnerProducer`[] `@@rx.internal.operators.OperatorPublish$PublishSubscriber.EMPTY` @AccessFlag STATIC_FINAL;
global `rx.internal.operators.OperatorPublish$InnerProducer`[] `@@rx.internal.operators.OperatorPublish$PublishSubscriber.TERMINATED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4a5850.  v0:= 0I;
  #L4a5852.  v1:= new `rx.internal.operators.OperatorPublish$InnerProducer`[v0];
  #L4a5856.  `@@rx.internal.operators.OperatorPublish$PublishSubscriber.EMPTY` @type ^`rx.internal.operators.OperatorPublish$InnerProducer`[] := v1 @kind object;
  #L4a585a.  v0:= new `rx.internal.operators.OperatorPublish$InnerProducer`[v0];
  #L4a585e.  `@@rx.internal.operators.OperatorPublish$PublishSubscriber.TERMINATED` @type ^`rx.internal.operators.OperatorPublish$InnerProducer`[] := v0 @kind object;
  #L4a5862.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorPublish$PublishSubscriber` v2 @kind this, `java.util.concurrent.atomic.AtomicReference` v3 @kind object) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4a5874.  call `<init>`(v2) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a587a.  call temp:= `isUnsafeAvailable`() @signature `Lrx/internal/util/unsafe/UnsafeAccess;.isUnsafeAvailable:()Z` @kind static;
  #L4a5880.  v0:= temp;
  #L4a5882.  if v0 == 0 then goto L4a5896;
  #L4a5886.  v0:= new `rx.internal.util.unsafe.SpscArrayQueue`;
  #L4a588a.  v1:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L4a588e.  call `<init>`(v0, v1) @signature `Lrx/internal/util/unsafe/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4a5894.  goto L4a58a4;
  #L4a5896.  v0:= new `rx.internal.util.SynchronizedQueue`;
  #L4a589a.  v1:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L4a589e.  call `<init>`(v0, v1) @signature `Lrx/internal/util/SynchronizedQueue;.<init>:(I)V` @kind direct;
  #L4a58a4.  v2.`rx.internal.operators.OperatorPublish$PublishSubscriber.queue` @type ^`java.util.Queue` := v0 @kind object;
  #L4a58a8.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a58ac.  v1:= `@@rx.internal.operators.OperatorPublish$PublishSubscriber.EMPTY` @type ^`rx.internal.operators.OperatorPublish$InnerProducer`[] @kind object;
  #L4a58b0.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4a58b6.  v2.`rx.internal.operators.OperatorPublish$PublishSubscriber.producers` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4a58ba.  v2.`rx.internal.operators.OperatorPublish$PublishSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4a58be.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4a58c2.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4a58c8.  v2.`rx.internal.operators.OperatorPublish$PublishSubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L4a58cc.  return @kind void;
}
procedure `boolean` `add`(`rx.internal.operators.OperatorPublish$PublishSubscriber` v4 @kind this, `rx.internal.operators.OperatorPublish$InnerProducer` v5 @kind object) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.add:(Lrx/internal/operators/OperatorPublish$InnerProducer;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a5708.  if v5 == 0 then goto L4a5750;
  #L4a570c.  v0:= v4.`rx.internal.operators.OperatorPublish$PublishSubscriber.producers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a5710.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a5716.  v0:= temp @kind object;
  #L4a5718.  v0:= (`rx.internal.operators.OperatorPublish$InnerProducer`[]) v0 @kind object;
  #L4a571c.  v1:= `@@rx.internal.operators.OperatorPublish$PublishSubscriber.TERMINATED` @type ^`rx.internal.operators.OperatorPublish$InnerProducer`[] @kind object;
  #L4a5720.  v2:= 0I;
  #L4a5722.  if v0 != v1 then goto L4a5728;
  #L4a5726.  return v2;
  #L4a5728.  v1:= length @variable v0;
  #L4a572a.  v3:= v1 + 1;
  #L4a572e.  v3:= new `rx.internal.operators.OperatorPublish$InnerProducer`[v3];
  #L4a5732.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4a5738.  v3[v1]:= v5 @kind object;
  #L4a573c.  v1:= v4.`rx.internal.operators.OperatorPublish$PublishSubscriber.producers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a5740.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a5746.  v0:= temp;
  #L4a5748.  if v0 == 0 then goto L4a570c;
  #L4a574c.  v5:= 1I;
  #L4a574e.  return v5;
  #L4a5750.  v5:= new `java.lang.NullPointerException`;
  #L4a5754.  call `<init>`(v5) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L4a575a.  goto L4a575e;
  #L4a575c.  throw v5;
  #L4a575e.  goto L4a575c;
}
procedure `boolean` `checkTerminated`(`rx.internal.operators.OperatorPublish$PublishSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object, `boolean` v6 ) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.checkTerminated:(Ljava/lang/Object;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a5770.  v0:= 0I;
  #L4a5772.  if v5 == 0 then goto L4a5826;
  #L4a5776.  call temp:= `isCompleted`(v5) @signature `Lrx/internal/operators/NotificationLite;.isCompleted:(Ljava/lang/Object;)Z` @kind static;
  #L4a577c.  v1:= temp;
  #L4a577e.  v2:= 0I;
  #L4a5780.  v3:= 1I;
  #L4a5782.  if v1 == 0 then goto L4a57d4;
  #L4a5786.  if v6 == 0 then goto L4a5826;
  #L4a578a.  v5:= v4.`rx.internal.operators.OperatorPublish$PublishSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a578e.  call temp:= `compareAndSet`(v5, v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a5794.  v5:= v4.`rx.internal.operators.OperatorPublish$PublishSubscriber.producers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a5798.  v6:= `@@rx.internal.operators.OperatorPublish$PublishSubscriber.TERMINATED` @type ^`rx.internal.operators.OperatorPublish$InnerProducer`[] @kind object;
  #L4a579c.  call temp:= `getAndSet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4a57a2.  v5:= temp @kind object;
  #L4a57a4.  v5:= (`rx.internal.operators.OperatorPublish$InnerProducer`[]) v5 @kind object;
  #L4a57a8.  v6:= length @variable v5;
  #L4a57aa.  if v0 >= v6 then goto L4a57c2;
  #L4a57ae.  v1:= v5[v0] @kind object;
  #L4a57b2.  v1:= v1.`rx.internal.operators.OperatorPublish$InnerProducer.child` @type ^`rx.Subscriber` @kind object;
  #L4a57b6.  call `onCompleted`(v1) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a57bc.  v0:= v0 + 1;
  #L4a57c0.  goto L4a57aa;
  #L4a57c2.  call `unsubscribe`(v4) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.unsubscribe:()V` @kind virtual;
  #L4a57c8.  return v3;
  #L4a57ca.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a57cc.  call `unsubscribe`(v4) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.unsubscribe:()V` @kind virtual;
  #L4a57d2.  throw v5;
  #L4a57d4.  call temp:= `getError`(v5) @signature `Lrx/internal/operators/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4a57da.  v5:= temp @kind object;
  #L4a57dc.  v6:= v4.`rx.internal.operators.OperatorPublish$PublishSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a57e0.  call temp:= `compareAndSet`(v6, v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a57e6.  v6:= v4.`rx.internal.operators.OperatorPublish$PublishSubscriber.producers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a57ea.  v1:= `@@rx.internal.operators.OperatorPublish$PublishSubscriber.TERMINATED` @type ^`rx.internal.operators.OperatorPublish$InnerProducer`[] @kind object;
  #L4a57ee.  call temp:= `getAndSet`(v6, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4a57f4.  v6:= temp @kind object;
  #L4a57f6.  v6:= (`rx.internal.operators.OperatorPublish$InnerProducer`[]) v6 @kind object;
  #L4a57fa.  v1:= length @variable v6;
  #L4a57fc.  if v0 >= v1 then goto L4a5814;
  #L4a5800.  v2:= v6[v0] @kind object;
  #L4a5804.  v2:= v2.`rx.internal.operators.OperatorPublish$InnerProducer.child` @type ^`rx.Subscriber` @kind object;
  #L4a5808.  call `onError`(v2, v5) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a580e.  v0:= v0 + 1;
  #L4a5812.  goto L4a57fc;
  #L4a5814.  call `unsubscribe`(v4) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.unsubscribe:()V` @kind virtual;
  #L4a581a.  return v3;
  #L4a581c.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a581e.  call `unsubscribe`(v4) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.unsubscribe:()V` @kind virtual;
  #L4a5824.  throw v5;
  #L4a5826.  return v0;
  catch `java.lang.Throwable` @[L4a5794..L4a57bc] goto L4a57ca;
  catch `java.lang.Throwable` @[L4a57e6..L4a580e] goto L4a581c;
}
procedure `void` `dispatch`(`rx.internal.operators.OperatorPublish$PublishSubscriber` v18 @kind this) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.dispatch:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4a58e0.  v1:= v18 @kind object;
  #L4a58e4.  @monitorenter v18
  #L4a58e6.  v0:= v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.emitting` @type ^`boolean` @kind boolean;
  #L4a58ea.  v2:= 1I;
  #L4a58ec.  if v0 == 0 then goto L4a58f8;
  #L4a58f0.  v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.missed` @type ^`boolean` := v2 @kind boolean;
  #L4a58f4.  @monitorexit v18
  #L4a58f6.  return @kind void;
  #L4a58f8.  v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.emitting` @type ^`boolean` := v2 @kind boolean;
  #L4a58fc.  v3:= 0I;
  #L4a58fe.  v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.missed` @type ^`boolean` := v3 @kind boolean;
  #L4a5902.  @monitorexit v18
  #L4a5904.  v0:= v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` @kind object;
  #L4a5908.  v4:= v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L4a590c.  call temp:= `isEmpty`(v4) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L4a5912.  v4:= temp;
  #L4a5914.  call temp:= `checkTerminated`(v1, v0, v4) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.checkTerminated:(Ljava/lang/Object;Z)Z` @kind virtual;
  #L4a591a.  v0:= temp;
  #L4a591c.  if v0 == 0 then goto L4a5922;
  #L4a5920.  return @kind void;
  #L4a5922.  if v4 != 0 then goto L4a5a70;
  #L4a5926.  v0:= v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.producers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a592a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a5930.  v0:= temp @kind object;
  #L4a5932.  v5:= v0 @kind object;
  #L4a5934.  v5:= (`rx.internal.operators.OperatorPublish$InnerProducer`[]) v5 @kind object;
  #L4a5938.  v0:= length @variable v5;
  #L4a593a.  v6:= 9223372036854775807L;
  #L4a5944.  v8:= length @variable v5;
  #L4a5946.  v9:= v6 @kind wide;
  #L4a5948.  v6:= 0I;
  #L4a594a.  v7:= 0I;
  #L4a594c.  v11:= 0L;
  #L4a5950.  if v6 >= v8 then goto L4a5988;
  #L4a5954.  v13:= v5[v6] @kind object;
  #L4a5958.  call temp:= `get`(v13) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.get:()J` @kind virtual;
  #L4a595e.  v13:= temp @kind wide;
  #L4a5960.  v15:= lcmp(v13, v11);
  #L4a5964.  if v15 < 0 then goto L4a5972;
  #L4a5968.  call temp:= `min`(v9, v13) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L4a596e.  v9:= temp @kind wide;
  #L4a5970.  goto L4a5982;
  #L4a5972.  v11:= -9223372036854775808L;
  #L4a5976.  v15:= lcmp(v13, v11);
  #L4a597a.  if v15 != 0 then goto L4a5982;
  #L4a597e.  v7:= v7 + 1;
  #L4a5982.  v6:= v6 + 1;
  #L4a5986.  goto L4a594c;
  #L4a5988.  v13:= 1L;
  #L4a598c.  if v0 != v7 then goto L4a59c0;
  #L4a5990.  v0:= v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` @kind object;
  #L4a5994.  v4:= v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L4a5998.  call temp:= `poll`(v4) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a599e.  v4:= temp @kind object;
  #L4a59a0.  if v4 != 0 then goto L4a59a8;
  #L4a59a4.  v4:= 1I;
  #L4a59a6.  goto L4a59aa;
  #L4a59a8.  v4:= 0I;
  #L4a59aa.  call temp:= `checkTerminated`(v1, v0, v4) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.checkTerminated:(Ljava/lang/Object;Z)Z` @kind virtual;
  #L4a59b0.  v0:= temp;
  #L4a59b2.  if v0 == 0 then goto L4a59b8;
  #L4a59b6.  return @kind void;
  #L4a59b8.  call `request`(v1, v13) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.request:(J)V` @kind virtual;
  #L4a59be.  goto L4a5904;
  #L4a59c0.  v0:= v4;
  #L4a59c2.  v4:= 0I;
  #L4a59c4.  v6:= (`long`) v4 @kind i2l;
  #L4a59c6.  v8:= lcmp(v6, v9);
  #L4a59ca.  if v8 >= 0 then goto L4a5a56;
  #L4a59ce.  v0:= v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` @kind object;
  #L4a59d2.  v8:= v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L4a59d6.  call temp:= `poll`(v8) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a59dc.  v8:= temp @kind object;
  #L4a59de.  if v8 != 0 then goto L4a59e6;
  #L4a59e2.  v15:= 1I;
  #L4a59e4.  goto L4a59e8;
  #L4a59e6.  v15:= 0I;
  #L4a59e8.  call temp:= `checkTerminated`(v1, v0, v15) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.checkTerminated:(Ljava/lang/Object;Z)Z` @kind virtual;
  #L4a59ee.  v0:= temp;
  #L4a59f0.  if v0 == 0 then goto L4a59f6;
  #L4a59f4.  return @kind void;
  #L4a59f6.  if v15 == 0 then goto L4a59fc;
  #L4a59fa.  goto L4a5a58;
  #L4a59fc.  call temp:= `getValue`(v8) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4a5a02.  v6:= temp @kind object;
  #L4a5a04.  v7:= length @variable v5;
  #L4a5a06.  v8:= 0I;
  #L4a5a08.  if v8 >= v7 then goto L4a5a4c;
  #L4a5a0c.  v2:= v5[v8] @kind object;
  #L4a5a10.  call temp:= `get`(v2) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.get:()J` @kind virtual;
  #L4a5a16.  v16:= temp @kind wide;
  #L4a5a18.  v0:= lcmp(v16, v11);
  #L4a5a1c.  if v0 <= 0 then goto L4a5a44;
  #L4a5a20.  v0:= v2.`rx.internal.operators.OperatorPublish$InnerProducer.child` @type ^`rx.Subscriber` @kind object;
  #L4a5a24.  call `onNext`(v0, v6) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a5a2a.  call temp:= `produced`(v2, v13) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.produced:(J)J` @kind virtual;
  #L4a5a30.  goto L4a5a44;
  #L4a5a32.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a5a34.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.unsubscribe:()V` @kind virtual;
  #L4a5a3a.  v2:= v2.`rx.internal.operators.OperatorPublish$InnerProducer.child` @type ^`rx.Subscriber` @kind object;
  #L4a5a3e.  call `throwOrReport`(v0, v2, v6) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4a5a44.  v8:= v8 + 1;
  #L4a5a48.  v2:= 1I;
  #L4a5a4a.  goto L4a5a08;
  #L4a5a4c.  v4:= v4 + 1;
  #L4a5a50.  v0:= v15;
  #L4a5a52.  v2:= 1I;
  #L4a5a54.  goto L4a59c4;
  #L4a5a56.  v15:= v0;
  #L4a5a58.  if v4 <= 0 then goto L4a5a62;
  #L4a5a5c.  call `request`(v1, v6) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.request:(J)V` @kind virtual;
  #L4a5a62.  v0:= lcmp(v9, v11);
  #L4a5a66.  if v0 == 0 then goto L4a5a70;
  #L4a5a6a.  if v15 != 0 then goto L4a5a70;
  #L4a5a6e.  goto L4a5a8e;
  #L4a5a70.  @monitorenter v18
  #L4a5a72.  v0:= v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.missed` @type ^`boolean` @kind boolean;
  #L4a5a76.  if v0 != 0 then goto L4a5a88;
  #L4a5a7a.  v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.emitting` @type ^`boolean` := v3 @kind boolean;
  #L4a5a7e.  @monitorexit v18
  #L4a5a80.  return @kind void;
  #L4a5a82.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a5a84.  v2:= 1I;
  #L4a5a86.  goto L4a5a98;
  #L4a5a88.  v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.missed` @type ^`boolean` := v3 @kind boolean;
  #L4a5a8c.  @monitorexit v18
  #L4a5a8e.  v2:= 1I;
  #L4a5a90.  goto L4a5904;
  #L4a5a94.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a5a96.  v2:= 0I;
  #L4a5a98.  @monitorexit v18
  #L4a5a9a.  throw v0;
  #L4a5a9c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a5a9e.  goto L4a5aa8;
  #L4a5aa0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a5aa2.  goto L4a5a98;
  #L4a5aa4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a5aa6.  v2:= 0I;
  #L4a5aa8.  if v2 != 0 then goto L4a5abc;
  #L4a5aac.  @monitorenter v18
  #L4a5aae.  v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.emitting` @type ^`boolean` := v3 @kind boolean;
  #L4a5ab2.  @monitorexit v18
  #L4a5ab4.  goto L4a5abc;
  #L4a5ab6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a5ab8.  @monitorexit v18
  #L4a5aba.  throw v0;
  #L4a5abc.  throw v0;
  #L4a5abe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a5ac0.  @monitorexit v18
  #L4a5ac2.  goto L4a5ac6;
  #L4a5ac4.  throw v0;
  #L4a5ac6.  goto L4a5ac4;
  catch `java.lang.Throwable` @[L4a58e6..L4a5904] goto L4a5abe;
  catch `java.lang.Throwable` @[L4a5904..L4a5a18] goto L4a5aa4;
  catch `java.lang.Throwable` @[L4a5a20..L4a5a2a] goto L4a5a32;
  catch `java.lang.Throwable` @[L4a5a2a..L4a5a72] goto L4a5aa4;
  catch `java.lang.Throwable` @[L4a5a72..L4a5a7e] goto L4a5a94;
  catch `java.lang.Throwable` @[L4a5a7e..L4a5a80] goto L4a5a82;
  catch `java.lang.Throwable` @[L4a5a88..L4a5a8e] goto L4a5a94;
  catch `java.lang.Throwable` @[L4a5a98..L4a5a9a] goto L4a5aa0;
  catch `java.lang.Throwable` @[L4a5a9a..L4a5a9c] goto L4a5a9c;
  catch `java.lang.Throwable` @[L4a5aae..L4a5aba] goto L4a5ab6;
  catch `java.lang.Throwable` @[L4a5ac0..L4a5ac2] goto L4a5abe;
}
procedure `void` `init`(`rx.internal.operators.OperatorPublish$PublishSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.init:()V` @AccessFlag  {
    temp;
    v0;

  #L4a5b4c.  v0:= new `rx.internal.operators.OperatorPublish$PublishSubscriber$1`;
  #L4a5b50.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber$1;.<init>:(Lrx/internal/operators/OperatorPublish$PublishSubscriber;)V` @kind direct;
  #L4a5b56.  call temp:= `create`(v0) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L4a5b5c.  v0:= temp @kind object;
  #L4a5b5e.  call `add`(v1, v0) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a5b64.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorPublish$PublishSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a5b78.  v0:= v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` @kind object;
  #L4a5b7c.  if v0 != 0 then goto L4a5b92;
  #L4a5b80.  call temp:= `completed`() @signature `Lrx/internal/operators/NotificationLite;.completed:()Ljava/lang/Object;` @kind static;
  #L4a5b86.  v0:= temp @kind object;
  #L4a5b88.  v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` := v0 @kind object;
  #L4a5b8c.  call `dispatch`(v1) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.dispatch:()V` @kind virtual;
  #L4a5b92.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorPublish$PublishSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a5ba4.  v0:= v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` @kind object;
  #L4a5ba8.  if v0 != 0 then goto L4a5bbe;
  #L4a5bac.  call temp:= `error`(v2) @signature `Lrx/internal/operators/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4a5bb2.  v2:= temp @kind object;
  #L4a5bb4.  v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` := v2 @kind object;
  #L4a5bb8.  call `dispatch`(v1) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.dispatch:()V` @kind virtual;
  #L4a5bbe.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorPublish$PublishSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a5bd0.  v0:= v1.`rx.internal.operators.OperatorPublish$PublishSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L4a5bd4.  call temp:= `next`(v2) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4a5bda.  v2:= temp @kind object;
  #L4a5bdc.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4a5be2.  v2:= temp;
  #L4a5be4.  if v2 != 0 then goto L4a5bfa;
  #L4a5be8.  v2:= new `rx.exceptions.MissingBackpressureException`;
  #L4a5bec.  call `<init>`(v2) @signature `Lrx/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L4a5bf2.  call `onError`(v1, v2) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a5bf8.  goto L4a5c00;
  #L4a5bfa.  call `dispatch`(v1) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.dispatch:()V` @kind virtual;
  #L4a5c00.  return @kind void;
}
procedure `void` `onStart`(`rx.internal.operators.OperatorPublish$PublishSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.onStart:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a5c14.  v0:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L4a5c18.  v0:= (`long`) v0 @kind i2l;
  #L4a5c1a.  call `request`(v2, v0) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.request:(J)V` @kind virtual;
  #L4a5c20.  return @kind void;
}
procedure `void` `remove`(`rx.internal.operators.OperatorPublish$PublishSubscriber` v6 @kind this, `rx.internal.operators.OperatorPublish$InnerProducer` v7 @kind object) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.remove:(Lrx/internal/operators/OperatorPublish$InnerProducer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a5c34.  v0:= v6.`rx.internal.operators.OperatorPublish$PublishSubscriber.producers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a5c38.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a5c3e.  v0:= temp @kind object;
  #L4a5c40.  v0:= (`rx.internal.operators.OperatorPublish$InnerProducer`[]) v0 @kind object;
  #L4a5c44.  v1:= `@@rx.internal.operators.OperatorPublish$PublishSubscriber.EMPTY` @type ^`rx.internal.operators.OperatorPublish$InnerProducer`[] @kind object;
  #L4a5c48.  if v0 == v1 then goto L4a5cbc;
  #L4a5c4c.  v1:= `@@rx.internal.operators.OperatorPublish$PublishSubscriber.TERMINATED` @type ^`rx.internal.operators.OperatorPublish$InnerProducer`[] @kind object;
  #L4a5c50.  if v0 != v1 then goto L4a5c56;
  #L4a5c54.  goto L4a5cbc;
  #L4a5c56.  v1:= -1I;
  #L4a5c58.  v2:= length @variable v0;
  #L4a5c5a.  v3:= 0I;
  #L4a5c5c.  v4:= 0I;
  #L4a5c5e.  if v4 >= v2 then goto L4a5c7c;
  #L4a5c62.  v5:= v0[v4] @kind object;
  #L4a5c66.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4a5c6c.  v5:= temp;
  #L4a5c6e.  if v5 == 0 then goto L4a5c76;
  #L4a5c72.  v1:= v4;
  #L4a5c74.  goto L4a5c7c;
  #L4a5c76.  v4:= v4 + 1;
  #L4a5c7a.  goto L4a5c5e;
  #L4a5c7c.  if v1 >= 0 then goto L4a5c82;
  #L4a5c80.  return @kind void;
  #L4a5c82.  v4:= 1I;
  #L4a5c84.  if v2 != v4 then goto L4a5c8e;
  #L4a5c88.  v1:= `@@rx.internal.operators.OperatorPublish$PublishSubscriber.EMPTY` @type ^`rx.internal.operators.OperatorPublish$InnerProducer`[] @kind object;
  #L4a5c8c.  goto L4a5cac;
  #L4a5c8e.  v5:= v2 + -1;
  #L4a5c92.  v5:= new `rx.internal.operators.OperatorPublish$InnerProducer`[v5];
  #L4a5c96.  call `arraycopy`(v0, v3, v5, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4a5c9c.  v3:= v1 + 1;
  #L4a5ca0.  v2:= v2 - v1 @kind int;
  #L4a5ca2.  v2:= v2 - v4 @kind int;
  #L4a5ca4.  call `arraycopy`(v0, v3, v5, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4a5caa.  v1:= v5 @kind object;
  #L4a5cac.  v2:= v6.`rx.internal.operators.OperatorPublish$PublishSubscriber.producers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a5cb0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a5cb6.  v0:= temp;
  #L4a5cb8.  if v0 == 0 then goto L4a5c34;
  #L4a5cbc.  return @kind void;
}
