record `rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber` @kind class @AccessFlag FINAL extends `rx.SingleSubscriber` @kind class, `rx.functions.Action0` @kind interface {
  `rx.SingleSubscriber` `rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber.actual` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber.once` @AccessFlag FINAL;
  `rx.Single$OnSubscribe` `rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber.other` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber` v0 @kind this, `rx.SingleSubscriber` v1 @kind object, `rx.Single$OnSubscribe` v2 @kind object) @signature `Lrx/internal/operators/SingleTimeout$TimeoutSingleSubscriber;.<init>:(Lrx/SingleSubscriber;Lrx/Single$OnSubscribe;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b0bb4.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L4b0bba.  v0.`rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber.actual` @type ^`rx.SingleSubscriber` := v1 @kind object;
  #L4b0bbe.  v0.`rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber.other` @type ^`rx.Single$OnSubscribe` := v2 @kind object;
  #L4b0bc2.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4b0bc6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4b0bcc.  v0.`rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4b0bd0.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber` v3 @kind this) @signature `Lrx/internal/operators/SingleTimeout$TimeoutSingleSubscriber;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b0be4.  v0:= v3.`rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b0be8.  v1:= 0I;
  #L4b0bea.  v2:= 1I;
  #L4b0bec.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b0bf2.  v0:= temp;
  #L4b0bf4.  if v0 == 0 then goto L4b0c46;
  #L4b0bf8.  v0:= v3.`rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber.other` @type ^`rx.Single$OnSubscribe` @kind object;
  #L4b0bfc.  if v0 != 0 then goto L4b0c16;
  #L4b0c00.  v0:= v3.`rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4b0c04.  v1:= new `java.util.concurrent.TimeoutException`;
  #L4b0c08.  call `<init>`(v1) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L4b0c0e.  call `onError`(v0, v1) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b0c14.  goto L4b0c34;
  #L4b0c16.  v1:= new `rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber$OtherSubscriber`;
  #L4b0c1a.  v2:= v3.`rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4b0c1e.  call `<init>`(v1, v2) @signature `Lrx/internal/operators/SingleTimeout$TimeoutSingleSubscriber$OtherSubscriber;.<init>:(Lrx/SingleSubscriber;)V` @kind direct;
  #L4b0c24.  v2:= v3.`rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4b0c28.  call `add`(v2, v1) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b0c2e.  call `call`(v0, v1) @signature `Lrx/Single$OnSubscribe;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4b0c34.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/SingleTimeout$TimeoutSingleSubscriber;.unsubscribe:()V` @kind virtual;
  #L4b0c3a.  goto L4b0c46;
  #L4b0c3c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b0c3e.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/SingleTimeout$TimeoutSingleSubscriber;.unsubscribe:()V` @kind virtual;
  #L4b0c44.  throw v0;
  #L4b0c46.  return @kind void;
  catch `java.lang.Throwable` @[L4b0bf8..L4b0c34] goto L4b0c3c;
}
procedure `void` `onError`(`rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lrx/internal/operators/SingleTimeout$TimeoutSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b0c64.  v0:= v3.`rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b0c68.  v1:= 0I;
  #L4b0c6a.  v2:= 1I;
  #L4b0c6c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b0c72.  v0:= temp;
  #L4b0c74.  if v0 == 0 then goto L4b0c94;
  #L4b0c78.  v0:= v3.`rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4b0c7c.  call `onError`(v0, v4) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b0c82.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/SingleTimeout$TimeoutSingleSubscriber;.unsubscribe:()V` @kind virtual;
  #L4b0c88.  goto L4b0c9a;
  #L4b0c8a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b0c8c.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/SingleTimeout$TimeoutSingleSubscriber;.unsubscribe:()V` @kind virtual;
  #L4b0c92.  throw v4;
  #L4b0c94.  call `onError`(v4) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b0c9a.  return @kind void;
  catch `java.lang.Throwable` @[L4b0c78..L4b0c82] goto L4b0c8a;
}
procedure `void` `onSuccess`(`rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lrx/internal/operators/SingleTimeout$TimeoutSingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b0cb8.  v0:= v3.`rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b0cbc.  v1:= 0I;
  #L4b0cbe.  v2:= 1I;
  #L4b0cc0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b0cc6.  v0:= temp;
  #L4b0cc8.  if v0 == 0 then goto L4b0ce8;
  #L4b0ccc.  v0:= v3.`rx.internal.operators.SingleTimeout$TimeoutSingleSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4b0cd0.  call `onSuccess`(v0, v4) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L4b0cd6.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/SingleTimeout$TimeoutSingleSubscriber;.unsubscribe:()V` @kind virtual;
  #L4b0cdc.  goto L4b0ce8;
  #L4b0cde.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b0ce0.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/SingleTimeout$TimeoutSingleSubscriber;.unsubscribe:()V` @kind virtual;
  #L4b0ce6.  throw v4;
  #L4b0ce8.  return @kind void;
  catch `java.lang.Throwable` @[L4b0ccc..L4b0cd6] goto L4b0cde;
}
