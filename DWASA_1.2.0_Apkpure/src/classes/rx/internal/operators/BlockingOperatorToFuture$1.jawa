record `rx.internal.operators.BlockingOperatorToFuture$1` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.BlockingOperatorToFuture$1.val$error` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.CountDownLatch` `rx.internal.operators.BlockingOperatorToFuture$1.val$finished` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.BlockingOperatorToFuture$1.val$value` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.BlockingOperatorToFuture$1` v0 @kind this, `java.util.concurrent.CountDownLatch` v1 @kind object, `java.util.concurrent.atomic.AtomicReference` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object) @signature `Lrx/internal/operators/BlockingOperatorToFuture$1;.<init>:(Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49329c.  v0.`rx.internal.operators.BlockingOperatorToFuture$1.val$finished` @type ^`java.util.concurrent.CountDownLatch` := v1 @kind object;
  #L4932a0.  v0.`rx.internal.operators.BlockingOperatorToFuture$1.val$error` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4932a4.  v0.`rx.internal.operators.BlockingOperatorToFuture$1.val$value` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4932a8.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4932ae.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.BlockingOperatorToFuture$1` v1 @kind this) @signature `Lrx/internal/operators/BlockingOperatorToFuture$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4932c0.  v0:= v1.`rx.internal.operators.BlockingOperatorToFuture$1.val$finished` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4932c4.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4932ca.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.BlockingOperatorToFuture$1` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/operators/BlockingOperatorToFuture$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4932dc.  v0:= v2.`rx.internal.operators.BlockingOperatorToFuture$1.val$error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4932e0.  v1:= 0I;
  #L4932e2.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4932e8.  v3:= v2.`rx.internal.operators.BlockingOperatorToFuture$1.val$finished` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4932ec.  call `countDown`(v3) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4932f2.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.BlockingOperatorToFuture$1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/BlockingOperatorToFuture$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493304.  v0:= v1.`rx.internal.operators.BlockingOperatorToFuture$1.val$value` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L493308.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L49330e.  return @kind void;
}
