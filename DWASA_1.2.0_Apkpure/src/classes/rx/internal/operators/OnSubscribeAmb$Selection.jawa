record `rx.internal.operators.OnSubscribeAmb$Selection` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class {
  `java.util.Collection` `rx.internal.operators.OnSubscribeAmb$Selection.ambSubscribers` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeAmb$Selection` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeAmb$Selection;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L49672c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L496732.  v0:= new `java.util.concurrent.ConcurrentLinkedQueue`;
  #L496736.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L49673c.  v1.`rx.internal.operators.OnSubscribeAmb$Selection.ambSubscribers` @type ^`java.util.Collection` := v0 @kind object;
  #L496740.  return @kind void;
}
procedure `void` `unsubscribeLosers`(`rx.internal.operators.OnSubscribeAmb$Selection` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeAmb$Selection;.unsubscribeLosers:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L496754.  call temp:= `get`(v1) @signature `Lrx/internal/operators/OnSubscribeAmb$Selection;.get:()Ljava/lang/Object;` @kind virtual;
  #L49675a.  v0:= temp @kind object;
  #L49675c.  v0:= (`rx.internal.operators.OnSubscribeAmb$AmbSubscriber`) v0 @kind object;
  #L496760.  if v0 == 0 then goto L49676a;
  #L496764.  call `unsubscribeOthers`(v1, v0) @signature `Lrx/internal/operators/OnSubscribeAmb$Selection;.unsubscribeOthers:(Lrx/internal/operators/OnSubscribeAmb$AmbSubscriber;)V` @kind virtual;
  #L49676a.  return @kind void;
}
procedure `void` `unsubscribeOthers`(`rx.internal.operators.OnSubscribeAmb$Selection` v2 @kind this, `rx.internal.operators.OnSubscribeAmb$AmbSubscriber` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeAmb$Selection;.unsubscribeOthers:(Lrx/internal/operators/OnSubscribeAmb$AmbSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49677c.  v0:= v2.`rx.internal.operators.OnSubscribeAmb$Selection.ambSubscribers` @type ^`java.util.Collection` @kind object;
  #L496780.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L496786.  v0:= temp @kind object;
  #L496788.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49678e.  v1:= temp;
  #L496790.  if v1 == 0 then goto L4967ac;
  #L496794.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49679a.  v1:= temp @kind object;
  #L49679c.  v1:= (`rx.internal.operators.OnSubscribeAmb$AmbSubscriber`) v1 @kind object;
  #L4967a0.  if v1 == v3 then goto L496788;
  #L4967a4.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OnSubscribeAmb$AmbSubscriber;.unsubscribe:()V` @kind virtual;
  #L4967aa.  goto L496788;
  #L4967ac.  v3:= v2.`rx.internal.operators.OnSubscribeAmb$Selection.ambSubscribers` @type ^`java.util.Collection` @kind object;
  #L4967b0.  call `clear`(v3) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L4967b6.  return @kind void;
}
