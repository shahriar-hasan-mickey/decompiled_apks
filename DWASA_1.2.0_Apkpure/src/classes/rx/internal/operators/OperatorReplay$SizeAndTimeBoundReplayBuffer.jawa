record `rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer` @kind class @AccessFlag FINAL extends `rx.internal.operators.OperatorReplay$BoundedReplayBuffer` @kind class {
  `int` `rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.limit` @AccessFlag FINAL;
  `long` `rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.maxAgeInMillis` @AccessFlag FINAL;
  `rx.Scheduler` `rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.scheduler` @AccessFlag FINAL;
}
global `long` `@@rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer` v0 @kind this, `int` v1 , `long` v2 , `rx.Scheduler` v4 @kind object) @signature `Lrx/internal/operators/OperatorReplay$SizeAndTimeBoundReplayBuffer;.<init>:(IJLrx/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a6fa4.  call `<init>`(v0) @signature `Lrx/internal/operators/OperatorReplay$BoundedReplayBuffer;.<init>:()V` @kind direct;
  #L4a6faa.  v0.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`rx.Scheduler` := v4 @kind object;
  #L4a6fae.  v0.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.limit` @type ^`int` := v1;
  #L4a6fb2.  v0.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.maxAgeInMillis` @type ^`long` := v2 @kind wide;
  #L4a6fb6.  return @kind void;
}
procedure `java.lang.Object` `enterTransform`(`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lrx/internal/operators/OperatorReplay$SizeAndTimeBoundReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4a6ef0.  v0:= new `rx.schedulers.Timestamped`;
  #L4a6ef4.  v1:= v3.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`rx.Scheduler` @kind object;
  #L4a6ef8.  call temp:= `now`(v1) @signature `Lrx/Scheduler;.now:()J` @kind virtual;
  #L4a6efe.  v1:= temp @kind wide;
  #L4a6f00.  call `<init>`(v0, v1, v4) @signature `Lrx/schedulers/Timestamped;.<init>:(JLjava/lang/Object;)V` @kind direct;
  #L4a6f06.  return v0 @kind object;
}
procedure `rx.internal.operators.OperatorReplay$Node` `getInitialHead`(`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer` v8 @kind this) @signature `Lrx/internal/operators/OperatorReplay$SizeAndTimeBoundReplayBuffer;.getInitialHead:()Lrx/internal/operators/OperatorReplay$Node;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4a6f38.  v0:= v8.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`rx.Scheduler` @kind object;
  #L4a6f3c.  call temp:= `now`(v0) @signature `Lrx/Scheduler;.now:()J` @kind virtual;
  #L4a6f42.  v0:= temp @kind wide;
  #L4a6f44.  v2:= v8.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.maxAgeInMillis` @type ^`long` @kind wide;
  #L4a6f48.  v0:= v0 - v2 @kind long;
  #L4a6f4a.  call temp:= `get`(v8) @signature `Lrx/internal/operators/OperatorReplay$SizeAndTimeBoundReplayBuffer;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a6f50.  v2:= temp @kind object;
  #L4a6f52.  v2:= (`rx.internal.operators.OperatorReplay$Node`) v2 @kind object;
  #L4a6f56.  call temp:= `get`(v2) @signature `Lrx/internal/operators/OperatorReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a6f5c.  v3:= temp @kind object;
  #L4a6f5e.  v3:= (`rx.internal.operators.OperatorReplay$Node`) v3 @kind object;
  #L4a6f62.  v7:= v3 @kind object;
  #L4a6f64.  v3:= v2 @kind object;
  #L4a6f66.  v2:= v7 @kind object;
  #L4a6f68.  if v2 == 0 then goto L4a6f92;
  #L4a6f6c.  v4:= v2.`rx.internal.operators.OperatorReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L4a6f70.  v4:= (`rx.schedulers.Timestamped`) v4 @kind object;
  #L4a6f74.  call temp:= `getTimestampMillis`(v4) @signature `Lrx/schedulers/Timestamped;.getTimestampMillis:()J` @kind virtual;
  #L4a6f7a.  v4:= temp @kind wide;
  #L4a6f7c.  v6:= lcmp(v4, v0);
  #L4a6f80.  if v6 > 0 then goto L4a6f92;
  #L4a6f84.  call temp:= `get`(v2) @signature `Lrx/internal/operators/OperatorReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a6f8a.  v3:= temp @kind object;
  #L4a6f8c.  v3:= (`rx.internal.operators.OperatorReplay$Node`) v3 @kind object;
  #L4a6f90.  goto L4a6f62;
  #L4a6f92.  return v3 @kind object;
}
procedure `java.lang.Object` `leaveTransform`(`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorReplay$SizeAndTimeBoundReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L4a6f18.  v1:= (`rx.schedulers.Timestamped`) v1 @kind object;
  #L4a6f1c.  call temp:= `getValue`(v1) @signature `Lrx/schedulers/Timestamped;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L4a6f22.  v1:= temp @kind object;
  #L4a6f24.  return v1 @kind object;
}
procedure `void` `truncate`(`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer` v9 @kind this) @signature `Lrx/internal/operators/OperatorReplay$SizeAndTimeBoundReplayBuffer;.truncate:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4a6fc8.  v0:= v9.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`rx.Scheduler` @kind object;
  #L4a6fcc.  call temp:= `now`(v0) @signature `Lrx/Scheduler;.now:()J` @kind virtual;
  #L4a6fd2.  v0:= temp @kind wide;
  #L4a6fd4.  v2:= v9.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.maxAgeInMillis` @type ^`long` @kind wide;
  #L4a6fd8.  v0:= v0 - v2 @kind long;
  #L4a6fda.  call temp:= `get`(v9) @signature `Lrx/internal/operators/OperatorReplay$SizeAndTimeBoundReplayBuffer;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a6fe0.  v2:= temp @kind object;
  #L4a6fe2.  v2:= (`rx.internal.operators.OperatorReplay$Node`) v2 @kind object;
  #L4a6fe6.  call temp:= `get`(v2) @signature `Lrx/internal/operators/OperatorReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a6fec.  v3:= temp @kind object;
  #L4a6fee.  v3:= (`rx.internal.operators.OperatorReplay$Node`) v3 @kind object;
  #L4a6ff2.  v4:= 0I;
  #L4a6ff4.  v8:= v3 @kind object;
  #L4a6ff6.  v3:= v2 @kind object;
  #L4a6ff8.  v2:= v8 @kind object;
  #L4a6ffa.  if v2 == 0 then goto L4a705e;
  #L4a6ffe.  v5:= v9.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L4a7002.  v6:= v9.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.limit` @type ^`int`;
  #L4a7006.  if v5 <= v6 then goto L4a7028;
  #L4a700a.  v4:= v4 + 1;
  #L4a700e.  v3:= v9.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L4a7012.  v3:= v3 + -1;
  #L4a7016.  v9.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v3;
  #L4a701a.  call temp:= `get`(v2) @signature `Lrx/internal/operators/OperatorReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a7020.  v3:= temp @kind object;
  #L4a7022.  v3:= (`rx.internal.operators.OperatorReplay$Node`) v3 @kind object;
  #L4a7026.  goto L4a6ff4;
  #L4a7028.  v5:= v2.`rx.internal.operators.OperatorReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L4a702c.  v5:= (`rx.schedulers.Timestamped`) v5 @kind object;
  #L4a7030.  call temp:= `getTimestampMillis`(v5) @signature `Lrx/schedulers/Timestamped;.getTimestampMillis:()J` @kind virtual;
  #L4a7036.  v5:= temp @kind wide;
  #L4a7038.  v7:= lcmp(v5, v0);
  #L4a703c.  if v7 > 0 then goto L4a705e;
  #L4a7040.  v4:= v4 + 1;
  #L4a7044.  v3:= v9.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L4a7048.  v3:= v3 + -1;
  #L4a704c.  v9.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v3;
  #L4a7050.  call temp:= `get`(v2) @signature `Lrx/internal/operators/OperatorReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a7056.  v3:= temp @kind object;
  #L4a7058.  v3:= (`rx.internal.operators.OperatorReplay$Node`) v3 @kind object;
  #L4a705c.  goto L4a6ff4;
  #L4a705e.  if v4 == 0 then goto L4a7068;
  #L4a7062.  call `setFirst`(v9, v3) @signature `Lrx/internal/operators/OperatorReplay$SizeAndTimeBoundReplayBuffer;.setFirst:(Lrx/internal/operators/OperatorReplay$Node;)V` @kind virtual;
  #L4a7068.  return @kind void;
}
procedure `void` `truncateFinal`(`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer` v10 @kind this) @signature `Lrx/internal/operators/OperatorReplay$SizeAndTimeBoundReplayBuffer;.truncateFinal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4a707c.  v0:= v10.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`rx.Scheduler` @kind object;
  #L4a7080.  call temp:= `now`(v0) @signature `Lrx/Scheduler;.now:()J` @kind virtual;
  #L4a7086.  v0:= temp @kind wide;
  #L4a7088.  v2:= v10.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.maxAgeInMillis` @type ^`long` @kind wide;
  #L4a708c.  v0:= v0 - v2 @kind long;
  #L4a708e.  call temp:= `get`(v10) @signature `Lrx/internal/operators/OperatorReplay$SizeAndTimeBoundReplayBuffer;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a7094.  v2:= temp @kind object;
  #L4a7096.  v2:= (`rx.internal.operators.OperatorReplay$Node`) v2 @kind object;
  #L4a709a.  call temp:= `get`(v2) @signature `Lrx/internal/operators/OperatorReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a70a0.  v3:= temp @kind object;
  #L4a70a2.  v3:= (`rx.internal.operators.OperatorReplay$Node`) v3 @kind object;
  #L4a70a6.  v4:= 0I;
  #L4a70a8.  v9:= v3 @kind object;
  #L4a70aa.  v3:= v2 @kind object;
  #L4a70ac.  v2:= v9 @kind object;
  #L4a70ae.  if v2 == 0 then goto L4a70f0;
  #L4a70b2.  v5:= v10.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L4a70b6.  v6:= 1I;
  #L4a70b8.  if v5 <= v6 then goto L4a70f0;
  #L4a70bc.  v5:= v2.`rx.internal.operators.OperatorReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L4a70c0.  v5:= (`rx.schedulers.Timestamped`) v5 @kind object;
  #L4a70c4.  call temp:= `getTimestampMillis`(v5) @signature `Lrx/schedulers/Timestamped;.getTimestampMillis:()J` @kind virtual;
  #L4a70ca.  v7:= temp @kind wide;
  #L4a70cc.  v5:= lcmp(v7, v0);
  #L4a70d0.  if v5 > 0 then goto L4a70f0;
  #L4a70d4.  v4:= v4 + 1;
  #L4a70d8.  v3:= v10.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int`;
  #L4a70dc.  v3:= v3 - v6 @kind int;
  #L4a70de.  v10.`rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer.size` @type ^`int` := v3;
  #L4a70e2.  call temp:= `get`(v2) @signature `Lrx/internal/operators/OperatorReplay$Node;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a70e8.  v3:= temp @kind object;
  #L4a70ea.  v3:= (`rx.internal.operators.OperatorReplay$Node`) v3 @kind object;
  #L4a70ee.  goto L4a70a8;
  #L4a70f0.  if v4 == 0 then goto L4a70fa;
  #L4a70f4.  call `setFirst`(v10, v3) @signature `Lrx/internal/operators/OperatorReplay$SizeAndTimeBoundReplayBuffer;.setFirst:(Lrx/internal/operators/OperatorReplay$Node;)V` @kind virtual;
  #L4a70fa.  return @kind void;
}
