record `rx.internal.operators.OperatorScan$2` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `boolean` `rx.internal.operators.OperatorScan$2.once` @AccessFlag ;
  `rx.internal.operators.OperatorScan` `rx.internal.operators.OperatorScan$2.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OperatorScan$2.val$child` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `rx.internal.operators.OperatorScan$2.value` @AccessFlag ;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorScan$2` v0 @kind this, `rx.internal.operators.OperatorScan` v1 @kind object, `rx.Subscriber` v2 @kind object, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorScan$2;.<init>:(Lrx/internal/operators/OperatorScan;Lrx/Subscriber;Lrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a7cb0.  v0.`rx.internal.operators.OperatorScan$2.this$0` @type ^`rx.internal.operators.OperatorScan` := v1 @kind object;
  #L4a7cb4.  v0.`rx.internal.operators.OperatorScan$2.val$child` @type ^`rx.Subscriber` := v3 @kind object;
  #L4a7cb8.  call `<init>`(v0, v2) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4a7cbe.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorScan$2` v1 @kind this) @signature `Lrx/internal/operators/OperatorScan$2;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a7cd0.  v0:= v1.`rx.internal.operators.OperatorScan$2.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a7cd4.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a7cda.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorScan$2` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorScan$2;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a7cec.  v0:= v1.`rx.internal.operators.OperatorScan$2.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a7cf0.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a7cf6.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorScan$2` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorScan$2;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a7d08.  v0:= v2.`rx.internal.operators.OperatorScan$2.once` @type ^`boolean` @kind boolean;
  #L4a7d0c.  if v0 != 0 then goto L4a7d18;
  #L4a7d10.  v0:= 1I;
  #L4a7d12.  v2.`rx.internal.operators.OperatorScan$2.once` @type ^`boolean` := v0 @kind boolean;
  #L4a7d16.  goto L4a7d2c;
  #L4a7d18.  v0:= v2.`rx.internal.operators.OperatorScan$2.value` @type ^`java.lang.Object` @kind object;
  #L4a7d1c.  v1:= v2.`rx.internal.operators.OperatorScan$2.this$0` @type ^`rx.internal.operators.OperatorScan` @kind object;
  #L4a7d20.  v1:= v1.`rx.internal.operators.OperatorScan.accumulator` @type ^`rx.functions.Func2` @kind object;
  #L4a7d24.  call temp:= `call`(v1, v0, v3) @signature `Lrx/functions/Func2;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a7d2a.  v3:= temp @kind object;
  #L4a7d2c.  v2.`rx.internal.operators.OperatorScan$2.value` @type ^`java.lang.Object` := v3 @kind object;
  #L4a7d30.  v0:= v2.`rx.internal.operators.OperatorScan$2.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a7d34.  call `onNext`(v0, v3) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a7d3a.  return @kind void;
  #L4a7d3c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a7d3e.  v1:= v2.`rx.internal.operators.OperatorScan$2.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a7d42.  call `throwOrReport`(v0, v1, v3) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4a7d48.  return @kind void;
  catch `java.lang.Throwable` @[L4a7d1c..L4a7d2c] goto L4a7d3c;
}
