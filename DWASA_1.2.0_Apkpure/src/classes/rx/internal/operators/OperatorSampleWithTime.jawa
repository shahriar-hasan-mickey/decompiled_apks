record `rx.internal.operators.OperatorSampleWithTime` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `rx.Scheduler` `rx.internal.operators.OperatorSampleWithTime.scheduler` @AccessFlag FINAL;
  `long` `rx.internal.operators.OperatorSampleWithTime.time` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `rx.internal.operators.OperatorSampleWithTime.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSampleWithTime` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `rx.Scheduler` v4 @kind object) @signature `Lrx/internal/operators/OperatorSampleWithTime;.<init>:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a7c58.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a7c5e.  v0.`rx.internal.operators.OperatorSampleWithTime.time` @type ^`long` := v1 @kind wide;
  #L4a7c62.  v0.`rx.internal.operators.OperatorSampleWithTime.unit` @type ^`java.util.concurrent.TimeUnit` := v3 @kind object;
  #L4a7c66.  v0.`rx.internal.operators.OperatorSampleWithTime.scheduler` @type ^`rx.Scheduler` := v4 @kind object;
  #L4a7c6a.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorSampleWithTime` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorSampleWithTime;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a7be8.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a7bec.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorSampleWithTime;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a7bf2.  v1:= temp @kind object;
  #L4a7bf4.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorSampleWithTime` v9 @kind this, `rx.Subscriber` v10 @kind object) @signature `Lrx/internal/operators/OperatorSampleWithTime;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4a7c08.  v0:= new `rx.observers.SerializedSubscriber`;
  #L4a7c0c.  call `<init>`(v0, v10) @signature `Lrx/observers/SerializedSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4a7c12.  v1:= v9.`rx.internal.operators.OperatorSampleWithTime.scheduler` @type ^`rx.Scheduler` @kind object;
  #L4a7c16.  call temp:= `createWorker`(v1) @signature `Lrx/Scheduler;.createWorker:()Lrx/Scheduler$Worker;` @kind virtual;
  #L4a7c1c.  v2:= temp @kind object;
  #L4a7c1e.  call `add`(v10, v2) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a7c24.  v1:= new `rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber`;
  #L4a7c28.  call `<init>`(v1, v0) @signature `Lrx/internal/operators/OperatorSampleWithTime$SamplerSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4a7c2e.  call `add`(v10, v1) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a7c34.  v6:= v9.`rx.internal.operators.OperatorSampleWithTime.time` @type ^`long` @kind wide;
  #L4a7c38.  v8:= v9.`rx.internal.operators.OperatorSampleWithTime.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a7c3c.  v3:= v1 @kind object;
  #L4a7c3e.  v4:= v6 @kind wide;
  #L4a7c40.  call temp:= `schedulePeriodically`(v2, v3, v4, v6, v8) @signature `Lrx/Scheduler$Worker;.schedulePeriodically:(Lrx/functions/Action0;JJLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L4a7c46.  return v1 @kind object;
}
