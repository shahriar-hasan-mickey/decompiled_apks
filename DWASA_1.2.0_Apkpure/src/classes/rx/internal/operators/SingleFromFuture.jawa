record `rx.internal.operators.SingleFromFuture` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Single$OnSubscribe` @kind interface {
  `java.util.concurrent.Future` `rx.internal.operators.SingleFromFuture.future` @AccessFlag FINAL;
  `long` `rx.internal.operators.SingleFromFuture.timeout` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `rx.internal.operators.SingleFromFuture.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleFromFuture` v0 @kind this, `java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lrx/internal/operators/SingleFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4af88c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4af892.  v0.`rx.internal.operators.SingleFromFuture.future` @type ^`java.util.concurrent.Future` := v1 @kind object;
  #L4af896.  v0.`rx.internal.operators.SingleFromFuture.timeout` @type ^`long` := v2 @kind wide;
  #L4af89a.  v0.`rx.internal.operators.SingleFromFuture.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4af89e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleFromFuture` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/SingleFromFuture;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4af8b0.  v1:= (`rx.SingleSubscriber`) v1 @kind object;
  #L4af8b4.  call `call`(v0, v1) @signature `Lrx/internal/operators/SingleFromFuture;.call:(Lrx/SingleSubscriber;)V` @kind virtual;
  #L4af8ba.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleFromFuture` v6 @kind this, `rx.SingleSubscriber` v7 @kind object) @signature `Lrx/internal/operators/SingleFromFuture;.call:(Lrx/SingleSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4af8cc.  v0:= v6.`rx.internal.operators.SingleFromFuture.future` @type ^`java.util.concurrent.Future` @kind object;
  #L4af8d0.  call temp:= `from`(v0) @signature `Lrx/subscriptions/Subscriptions;.from:(Ljava/util/concurrent/Future;)Lrx/Subscription;` @kind static;
  #L4af8d6.  v1:= temp @kind object;
  #L4af8d8.  call `add`(v7, v1) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4af8de.  v1:= v6.`rx.internal.operators.SingleFromFuture.timeout` @type ^`long` @kind wide;
  #L4af8e2.  v3:= 0L;
  #L4af8e6.  v5:= lcmp(v1, v3);
  #L4af8ea.  if v5 != 0 then goto L4af8f8;
  #L4af8ee.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/Future;.get:()Ljava/lang/Object;` @kind interface;
  #L4af8f4.  v0:= temp @kind object;
  #L4af8f6.  goto L4af908;
  #L4af8f8.  v1:= v6.`rx.internal.operators.SingleFromFuture.timeout` @type ^`long` @kind wide;
  #L4af8fc.  v3:= v6.`rx.internal.operators.SingleFromFuture.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4af900.  call temp:= `get`(v0, v1, v3) @signature `Ljava/util/concurrent/Future;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @kind interface;
  #L4af906.  v0:= temp @kind object;
  #L4af908.  call `onSuccess`(v7, v0) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L4af90e.  return @kind void;
  #L4af910.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4af912.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4af918.  call `onError`(v7, v0) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4af91e.  return @kind void;
  catch `java.lang.Throwable` @[L4af8de..L4af908] goto L4af910;
}
