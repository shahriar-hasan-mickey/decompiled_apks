record `rx.internal.operators.OperatorTimeoutWithSelector$2` @kind class @AccessFlag  extends `rx.internal.operators.OperatorTimeoutBase$TimeoutStub` @kind interface {
  `rx.functions.Func1` `rx.internal.operators.OperatorTimeoutWithSelector$2.val$timeoutSelector` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTimeoutWithSelector$2` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/internal/operators/OperatorTimeoutWithSelector$2;.<init>:(Lrx/functions/Func1;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ab430.  v0.`rx.internal.operators.OperatorTimeoutWithSelector$2.val$timeoutSelector` @type ^`rx.functions.Func1` := v1 @kind object;
  #L4ab434.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ab43a.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorTimeoutWithSelector$2` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lrx/internal/operators/OperatorTimeoutWithSelector$2;.call:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4ab3b4.  v1:= (`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber`) v1 @kind object;
  #L4ab3b8.  v2:= (`java.lang.Long`) v2 @kind object;
  #L4ab3bc.  v4:= (`rx.Scheduler$Worker`) v4 @kind object;
  #L4ab3c0.  call temp:= `call`(v0, v1, v2, v3, v4) @signature `Lrx/internal/operators/OperatorTimeoutWithSelector$2;.call:(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;Ljava/lang/Object;Lrx/Scheduler$Worker;)Lrx/Subscription;` @kind virtual;
  #L4ab3c6.  v1:= temp @kind object;
  #L4ab3c8.  return v1 @kind object;
}
procedure `rx.Subscription` `call`(`rx.internal.operators.OperatorTimeoutWithSelector$2` v0 @kind this, `rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber` v1 @kind object, `java.lang.Long` v2 @kind object, `java.lang.Object` v3 @kind object, `rx.Scheduler$Worker` v4 @kind object) @signature `Lrx/internal/operators/OperatorTimeoutWithSelector$2;.call:(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;Ljava/lang/Object;Lrx/Scheduler$Worker;)Lrx/Subscription;` @AccessFlag PUBLIC {
    temp;

  #L4ab3dc.  v4:= v0.`rx.internal.operators.OperatorTimeoutWithSelector$2.val$timeoutSelector` @type ^`rx.functions.Func1` @kind object;
  #L4ab3e0.  call temp:= `call`(v4, v3) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ab3e6.  v3:= temp @kind object;
  #L4ab3e8.  v3:= (`rx.Observable`) v3 @kind object;
  #L4ab3ec.  v4:= new `rx.internal.operators.OperatorTimeoutWithSelector$2$1`;
  #L4ab3f0.  call `<init>`(v4, v0, v1, v2) @signature `Lrx/internal/operators/OperatorTimeoutWithSelector$2$1;.<init>:(Lrx/internal/operators/OperatorTimeoutWithSelector$2;Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;)V` @kind direct;
  #L4ab3f6.  call temp:= `unsafeSubscribe`(v3, v4) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4ab3fc.  v1:= temp @kind object;
  #L4ab3fe.  return v1 @kind object;
  #L4ab400.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ab402.  call `throwOrReport`(v2, v1) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L4ab408.  call temp:= `unsubscribed`() @signature `Lrx/subscriptions/Subscriptions;.unsubscribed:()Lrx/Subscription;` @kind static;
  #L4ab40e.  v1:= temp @kind object;
  #L4ab410.  return v1 @kind object;
  catch `java.lang.Throwable` @[L4ab3dc..L4ab3ec] goto L4ab400;
}
