record `rx.internal.operators.OperatorDebounceWithTime$DebounceState` @kind class @AccessFlag FINAL {
  `boolean` `rx.internal.operators.OperatorDebounceWithTime$DebounceState.emitting` @AccessFlag ;
  `boolean` `rx.internal.operators.OperatorDebounceWithTime$DebounceState.hasValue` @AccessFlag ;
  `int` `rx.internal.operators.OperatorDebounceWithTime$DebounceState.index` @AccessFlag ;
  `boolean` `rx.internal.operators.OperatorDebounceWithTime$DebounceState.terminate` @AccessFlag ;
  `java.lang.Object` `rx.internal.operators.OperatorDebounceWithTime$DebounceState.value` @AccessFlag ;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorDebounceWithTime$DebounceState` v0 @kind this) @signature `Lrx/internal/operators/OperatorDebounceWithTime$DebounceState;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49fc20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49fc26.  return @kind void;
}
procedure `void` `clear`(`rx.internal.operators.OperatorDebounceWithTime$DebounceState` v1 @kind this) @signature `Lrx/internal/operators/OperatorDebounceWithTime$DebounceState;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49fc38.  @monitorenter v1
  #L49fc3a.  v0:= v1.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.index` @type ^`int`;
  #L49fc3e.  v0:= v0 + 1;
  #L49fc42.  v1.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.index` @type ^`int` := v0;
  #L49fc46.  v0:= 0I;
  #L49fc48.  v1.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.value` @type ^`java.lang.Object` := v0 @kind object;
  #L49fc4c.  v0:= 0I;
  #L49fc4e.  v1.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.hasValue` @type ^`boolean` := v0 @kind boolean;
  #L49fc52.  @monitorexit v1
  #L49fc54.  return @kind void;
  #L49fc56.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49fc58.  @monitorexit v1
  #L49fc5a.  throw v0;
  catch `java.lang.Throwable` @[L49fc3a..L49fc52] goto L49fc56;
}
procedure `void` `emit`(`rx.internal.operators.OperatorDebounceWithTime$DebounceState` v2 @kind this, `int` v3 , `rx.Subscriber` v4 @kind object, `rx.Subscriber` v5 @kind object) @signature `Lrx/internal/operators/OperatorDebounceWithTime$DebounceState;.emit:(ILrx/Subscriber;Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49fc78.  @monitorenter v2
  #L49fc7a.  v0:= v2.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.emitting` @type ^`boolean` @kind boolean;
  #L49fc7e.  if v0 != 0 then goto L49fcde;
  #L49fc82.  v0:= v2.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.hasValue` @type ^`boolean` @kind boolean;
  #L49fc86.  if v0 == 0 then goto L49fcde;
  #L49fc8a.  v0:= v2.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.index` @type ^`int`;
  #L49fc8e.  if v3 == v0 then goto L49fc94;
  #L49fc92.  goto L49fcde;
  #L49fc94.  v3:= v2.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.value` @type ^`java.lang.Object` @kind object;
  #L49fc98.  v0:= 0I;
  #L49fc9a.  v2.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.value` @type ^`java.lang.Object` := v0 @kind object;
  #L49fc9e.  v0:= 0I;
  #L49fca0.  v2.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.hasValue` @type ^`boolean` := v0 @kind boolean;
  #L49fca4.  v1:= 1I;
  #L49fca6.  v2.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.emitting` @type ^`boolean` := v1 @kind boolean;
  #L49fcaa.  @monitorexit v2
  #L49fcac.  call `onNext`(v4, v3) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49fcb2.  @monitorenter v2
  #L49fcb4.  v3:= v2.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.terminate` @type ^`boolean` @kind boolean;
  #L49fcb8.  if v3 != 0 then goto L49fcc4;
  #L49fcbc.  v2.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.emitting` @type ^`boolean` := v0 @kind boolean;
  #L49fcc0.  @monitorexit v2
  #L49fcc2.  return @kind void;
  #L49fcc4.  @monitorexit v2
  #L49fcc6.  call `onCompleted`(v4) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49fccc.  return @kind void;
  #L49fcce.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49fcd0.  @monitorexit v2
  #L49fcd2.  throw v3;
  #L49fcd4.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49fcd6.  call `throwOrReport`(v4, v5, v3) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L49fcdc.  return @kind void;
  #L49fcde.  @monitorexit v2
  #L49fce0.  return @kind void;
  #L49fce2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49fce4.  @monitorexit v2
  #L49fce6.  throw v3;
  catch `java.lang.Throwable` @[L49fc7a..L49fcac] goto L49fce2;
  catch `java.lang.Throwable` @[L49fcac..L49fcb2] goto L49fcd4;
  catch `java.lang.Throwable` @[L49fcb4..L49fcc6] goto L49fcce;
  catch `java.lang.Throwable` @[L49fcd0..L49fcd2] goto L49fcce;
  catch `java.lang.Throwable` @[L49fcde..L49fce6] goto L49fce2;
}
procedure `void` `emitAndComplete`(`rx.internal.operators.OperatorDebounceWithTime$DebounceState` v4 @kind this, `rx.Subscriber` v5 @kind object, `rx.Subscriber` v6 @kind object) @signature `Lrx/internal/operators/OperatorDebounceWithTime$DebounceState;.emitAndComplete:(Lrx/Subscriber;Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49fd28.  @monitorenter v4
  #L49fd2a.  v0:= v4.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.emitting` @type ^`boolean` @kind boolean;
  #L49fd2e.  v1:= 1I;
  #L49fd30.  if v0 == 0 then goto L49fd3c;
  #L49fd34.  v4.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.terminate` @type ^`boolean` := v1 @kind boolean;
  #L49fd38.  @monitorexit v4
  #L49fd3a.  return @kind void;
  #L49fd3c.  v0:= v4.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.value` @type ^`java.lang.Object` @kind object;
  #L49fd40.  v2:= v4.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.hasValue` @type ^`boolean` @kind boolean;
  #L49fd44.  v3:= 0I;
  #L49fd46.  v4.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.value` @type ^`java.lang.Object` := v3 @kind object;
  #L49fd4a.  v3:= 0I;
  #L49fd4c.  v4.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.hasValue` @type ^`boolean` := v3 @kind boolean;
  #L49fd50.  v4.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.emitting` @type ^`boolean` := v1 @kind boolean;
  #L49fd54.  @monitorexit v4
  #L49fd56.  if v2 == 0 then goto L49fd6c;
  #L49fd5a.  call `onNext`(v5, v0) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49fd60.  goto L49fd6c;
  #L49fd62.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49fd64.  call `throwOrReport`(v5, v6, v0) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L49fd6a.  return @kind void;
  #L49fd6c.  call `onCompleted`(v5) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49fd72.  return @kind void;
  #L49fd74.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49fd76.  @monitorexit v4
  #L49fd78.  throw v5;
  catch `java.lang.Throwable` @[L49fd2a..L49fd56] goto L49fd74;
  catch `java.lang.Throwable` @[L49fd5a..L49fd60] goto L49fd62;
  catch `java.lang.Throwable` @[L49fd76..L49fd78] goto L49fd74;
}
procedure `int` `next`(`rx.internal.operators.OperatorDebounceWithTime$DebounceState` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorDebounceWithTime$DebounceState;.next:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49fbe4.  @monitorenter v1
  #L49fbe6.  v1.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.value` @type ^`java.lang.Object` := v2 @kind object;
  #L49fbea.  v2:= 1I;
  #L49fbec.  v1.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.hasValue` @type ^`boolean` := v2 @kind boolean;
  #L49fbf0.  v0:= v1.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.index` @type ^`int`;
  #L49fbf4.  v0:= v0 + v2 @kind int;
  #L49fbf6.  v1.`rx.internal.operators.OperatorDebounceWithTime$DebounceState.index` @type ^`int` := v0;
  #L49fbfa.  @monitorexit v1
  #L49fbfc.  return v0;
  #L49fbfe.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49fc00.  @monitorexit v1
  #L49fc02.  throw v2;
  catch `java.lang.Throwable` @[L49fbe6..L49fbfa] goto L49fbfe;
}
