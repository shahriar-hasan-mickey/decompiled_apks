record `rx.internal.operators.OperatorOnErrorResumeNextViaFunction` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `rx.functions.Func1` `rx.internal.operators.OperatorOnErrorResumeNextViaFunction.resumeFunction` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorOnErrorResumeNextViaFunction` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;.<init>:(Lrx/functions/Func1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a52a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a52a6.  v0.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction.resumeFunction` @type ^`rx.functions.Func1` := v1 @kind object;
  #L4a52aa.  return @kind void;
}
procedure `rx.internal.operators.OperatorOnErrorResumeNextViaFunction` `withException`(`rx.Observable` v2 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;.withException:(Lrx/Observable;)Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4a5228.  v0:= new `rx.internal.operators.OperatorOnErrorResumeNextViaFunction`;
  #L4a522c.  v1:= new `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$3`;
  #L4a5230.  call `<init>`(v1, v2) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$3;.<init>:(Lrx/Observable;)V` @kind direct;
  #L4a5236.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L4a523c.  return v0 @kind object;
}
procedure `rx.internal.operators.OperatorOnErrorResumeNextViaFunction` `withOther`(`rx.Observable` v2 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;.withOther:(Lrx/Observable;)Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4a5250.  v0:= new `rx.internal.operators.OperatorOnErrorResumeNextViaFunction`;
  #L4a5254.  v1:= new `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$2`;
  #L4a5258.  call `<init>`(v1, v2) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$2;.<init>:(Lrx/Observable;)V` @kind direct;
  #L4a525e.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L4a5264.  return v0 @kind object;
}
procedure `rx.internal.operators.OperatorOnErrorResumeNextViaFunction` `withSingle`(`rx.functions.Func1` v2 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;.withSingle:(Lrx/functions/Func1;)Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4a5278.  v0:= new `rx.internal.operators.OperatorOnErrorResumeNextViaFunction`;
  #L4a527c.  v1:= new `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$1`;
  #L4a5280.  call `<init>`(v1, v2) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$1;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L4a5286.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;.<init>:(Lrx/functions/Func1;)V` @kind direct;
  #L4a528c.  return v0 @kind object;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorOnErrorResumeNextViaFunction` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a51c4.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a51c8.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a51ce.  v1:= temp @kind object;
  #L4a51d0.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorOnErrorResumeNextViaFunction` v3 @kind this, `rx.Subscriber` v4 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a51e4.  v0:= new `rx.internal.producers.ProducerArbiter`;
  #L4a51e8.  call `<init>`(v0) @signature `Lrx/internal/producers/ProducerArbiter;.<init>:()V` @kind direct;
  #L4a51ee.  v1:= new `rx.subscriptions.SerialSubscription`;
  #L4a51f2.  call `<init>`(v1) @signature `Lrx/subscriptions/SerialSubscription;.<init>:()V` @kind direct;
  #L4a51f8.  v2:= new `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4`;
  #L4a51fc.  call `<init>`(v2, v3, v4, v0, v1) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$4;.<init>:(Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;Lrx/Subscriber;Lrx/internal/producers/ProducerArbiter;Lrx/subscriptions/SerialSubscription;)V` @kind direct;
  #L4a5202.  call `set`(v1, v2) @signature `Lrx/subscriptions/SerialSubscription;.set:(Lrx/Subscription;)V` @kind virtual;
  #L4a5208.  call `add`(v4, v1) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a520e.  call `setProducer`(v4, v0) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a5214.  return v2 @kind object;
}
