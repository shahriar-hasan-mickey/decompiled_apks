record `rx.internal.operators.OperatorWindowWithSize$WindowSkip$WindowSkipProducer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `rx.Producer` @kind interface {
  `rx.internal.operators.OperatorWindowWithSize$WindowSkip` `rx.internal.operators.OperatorWindowWithSize$WindowSkip$WindowSkipProducer.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@rx.internal.operators.OperatorWindowWithSize$WindowSkip$WindowSkipProducer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OperatorWindowWithSize$WindowSkip$WindowSkipProducer` v0 @kind this, `rx.internal.operators.OperatorWindowWithSize$WindowSkip` v1 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip$WindowSkipProducer;.<init>:(Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4acf84.  v0.`rx.internal.operators.OperatorWindowWithSize$WindowSkip$WindowSkipProducer.this$0` @type ^`rx.internal.operators.OperatorWindowWithSize$WindowSkip` := v1 @kind object;
  #L4acf88.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4acf8e.  return @kind void;
}
procedure `void` `request`(`rx.internal.operators.OperatorWindowWithSize$WindowSkip$WindowSkipProducer` v7 @kind this, `long` v8 ) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip$WindowSkipProducer;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4acfa0.  v0:= 0L;
  #L4acfa4.  v2:= lcmp(v8, v0);
  #L4acfa8.  if v2 < 0 then goto L4ad022;
  #L4acfac.  v2:= lcmp(v8, v0);
  #L4acfb0.  if v2 == 0 then goto L4ad020;
  #L4acfb4.  v0:= v7.`rx.internal.operators.OperatorWindowWithSize$WindowSkip$WindowSkipProducer.this$0` @type ^`rx.internal.operators.OperatorWindowWithSize$WindowSkip` @kind object;
  #L4acfb8.  call temp:= `get`(v7) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip$WindowSkipProducer;.get:()Z` @kind virtual;
  #L4acfbe.  v1:= temp;
  #L4acfc0.  if v1 != 0 then goto L4ad00c;
  #L4acfc4.  v1:= 0I;
  #L4acfc6.  v2:= 1I;
  #L4acfc8.  call temp:= `compareAndSet`(v7, v1, v2) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip$WindowSkipProducer;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4acfce.  v1:= temp;
  #L4acfd0.  if v1 == 0 then goto L4ad00c;
  #L4acfd4.  v1:= v0.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.size` @type ^`int`;
  #L4acfd8.  v1:= (`long`) v1 @kind i2l;
  #L4acfda.  call temp:= `multiplyCap`(v8, v1) @signature `Lrx/internal/operators/BackpressureUtils;.multiplyCap:(JJ)J` @kind static;
  #L4acfe0.  v1:= temp @kind wide;
  #L4acfe2.  v3:= v0.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.skip` @type ^`int`;
  #L4acfe6.  v4:= v0.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.size` @type ^`int`;
  #L4acfea.  v3:= v3 - v4 @kind int;
  #L4acfec.  v3:= (`long`) v3 @kind i2l;
  #L4acfee.  v5:= 1L;
  #L4acff2.  v8:= v8 - v5 @kind long;
  #L4acff4.  call temp:= `multiplyCap`(v3, v8) @signature `Lrx/internal/operators/BackpressureUtils;.multiplyCap:(JJ)J` @kind static;
  #L4acffa.  v8:= temp @kind wide;
  #L4acffc.  call temp:= `addCap`(v1, v8) @signature `Lrx/internal/operators/BackpressureUtils;.addCap:(JJ)J` @kind static;
  #L4ad002.  v8:= temp @kind wide;
  #L4ad004.  call `access$100`(v0, v8) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;.access$100:(Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;J)V` @kind static;
  #L4ad00a.  goto L4ad020;
  #L4ad00c.  v1:= v0.`rx.internal.operators.OperatorWindowWithSize$WindowSkip.skip` @type ^`int`;
  #L4ad010.  v1:= (`long`) v1 @kind i2l;
  #L4ad012.  call temp:= `multiplyCap`(v8, v1) @signature `Lrx/internal/operators/BackpressureUtils;.multiplyCap:(JJ)J` @kind static;
  #L4ad018.  v8:= temp @kind wide;
  #L4ad01a.  call `access$200`(v0, v8) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;.access$200:(Lrx/internal/operators/OperatorWindowWithSize$WindowSkip;J)V` @kind static;
  #L4ad020.  return @kind void;
  #L4ad022.  v0:= new `java.lang.IllegalArgumentException`;
  #L4ad026.  v1:= new `java.lang.StringBuilder`;
  #L4ad02a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ad030.  v2:= "n >= 0 required but it was " @kind object;
  #L4ad034.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ad03a.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ad040.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ad046.  v8:= temp @kind object;
  #L4ad048.  call `<init>`(v0, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ad04e.  throw v0;
}
