record `rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber$OtherSubscriber` @kind class @AccessFlag FINAL extends `rx.SingleSubscriber` @kind class {
  `rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber` `rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber$OtherSubscriber.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber$OtherSubscriber` v0 @kind this, `rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber` v1 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilSingle$TakeUntilSourceSubscriber$OtherSubscriber;.<init>:(Lrx/internal/operators/SingleTakeUntilSingle$TakeUntilSourceSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b09cc.  v0.`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber$OtherSubscriber.this$0` @type ^`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber` := v1 @kind object;
  #L4b09d0.  call `<init>`(v0) @signature `Lrx/SingleSubscriber;.<init>:()V` @kind direct;
  #L4b09d6.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber$OtherSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilSingle$TakeUntilSourceSubscriber$OtherSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b09e8.  v0:= v1.`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber$OtherSubscriber.this$0` @type ^`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber` @kind object;
  #L4b09ec.  call `onError`(v0, v2) @signature `Lrx/internal/operators/SingleTakeUntilSingle$TakeUntilSourceSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b09f2.  return @kind void;
}
procedure `void` `onSuccess`(`rx.internal.operators.SingleTakeUntilSingle$TakeUntilSourceSubscriber$OtherSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/SingleTakeUntilSingle$TakeUntilSourceSubscriber$OtherSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b0a04.  v2:= new `java.util.concurrent.CancellationException`;
  #L4b0a08.  v0:= "Stream was canceled before emitting a terminal event." @kind object;
  #L4b0a0c.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b0a12.  call `onError`(v1, v2) @signature `Lrx/internal/operators/SingleTakeUntilSingle$TakeUntilSourceSubscriber$OtherSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b0a18.  return @kind void;
}
