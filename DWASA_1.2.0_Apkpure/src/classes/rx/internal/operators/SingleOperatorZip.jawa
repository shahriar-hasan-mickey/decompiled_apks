record `rx.internal.operators.SingleOperatorZip` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`rx.internal.operators.SingleOperatorZip` v2 @kind this) @signature `Lrx/internal/operators/SingleOperatorZip;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b06a0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b06a6.  v0:= new `java.lang.IllegalStateException`;
  #L4b06aa.  v1:= "No instances!" @kind object;
  #L4b06ae.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b06b4.  throw v0;
}
procedure `rx.Single` `zip`(`rx.Single`[] v1 @kind object, `rx.functions.FuncN` v2 @kind object) @signature `Lrx/internal/operators/SingleOperatorZip;.zip:([Lrx/Single;Lrx/functions/FuncN;)Lrx/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4b067c.  v0:= new `rx.internal.operators.SingleOperatorZip$1`;
  #L4b0680.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/SingleOperatorZip$1;.<init>:([Lrx/Single;Lrx/functions/FuncN;)V` @kind direct;
  #L4b0686.  call temp:= `create`(v0) @signature `Lrx/Single;.create:(Lrx/Single$OnSubscribe;)Lrx/Single;` @kind static;
  #L4b068c.  v1:= temp @kind object;
  #L4b068e.  return v1 @kind object;
}
