record `rx.internal.operators.OperatorWindowWithTime$InexactSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.child` @AccessFlag FINAL;
  `java.util.List` `rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.chunks` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.done` @AccessFlag ;
  `java.lang.Object` `rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.guard` @AccessFlag FINAL;
  `rx.internal.operators.OperatorWindowWithTime` `rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Scheduler$Worker` `rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.worker` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber` v0 @kind this, `rx.internal.operators.OperatorWindowWithTime` v1 @kind object, `rx.Subscriber` v2 @kind object, `rx.Scheduler$Worker` v3 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;.<init>:(Lrx/internal/operators/OperatorWindowWithTime;Lrx/Subscriber;Lrx/Scheduler$Worker;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ae08c.  v0.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.this$0` @type ^`rx.internal.operators.OperatorWindowWithTime` := v1 @kind object;
  #L4ae090.  call `<init>`(v0, v2) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4ae096.  v0.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.child` @type ^`rx.Subscriber` := v2 @kind object;
  #L4ae09a.  v0.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.worker` @type ^`rx.Scheduler$Worker` := v3 @kind object;
  #L4ae09e.  v1:= new `java.lang.Object`;
  #L4ae0a2.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ae0a8.  v0.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.guard` @type ^`java.lang.Object` := v1 @kind object;
  #L4ae0ac.  v1:= new `java.util.LinkedList`;
  #L4ae0b0.  call `<init>`(v1) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L4ae0b6.  v0.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.chunks` @type ^`java.util.List` := v1 @kind object;
  #L4ae0ba.  return @kind void;
}
procedure `rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject` `createCountedSerializedSubject`(`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;.createCountedSerializedSubject:()Lrx/internal/operators/OperatorWindowWithTime$CountedSerializedSubject;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4ae068.  call temp:= `create`() @signature `Lrx/subjects/UnicastSubject;.create:()Lrx/subjects/UnicastSubject;` @kind static;
  #L4ae06e.  v0:= temp @kind object;
  #L4ae070.  v1:= new `rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject`;
  #L4ae074.  call `<init>`(v1, v0, v0) @signature `Lrx/internal/operators/OperatorWindowWithTime$CountedSerializedSubject;.<init>:(Lrx/Observer;Lrx/Observable;)V` @kind direct;
  #L4ae07a.  return v1 @kind object;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber` v3 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ae0cc.  v0:= v3.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ae0d0.  @monitorenter v0
  #L4ae0d2.  v1:= v3.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.done` @type ^`boolean` @kind boolean;
  #L4ae0d6.  if v1 == 0 then goto L4ae0de;
  #L4ae0da.  @monitorexit v0
  #L4ae0dc.  return @kind void;
  #L4ae0de.  v1:= 1I;
  #L4ae0e0.  v3.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.done` @type ^`boolean` := v1 @kind boolean;
  #L4ae0e4.  v1:= new `java.util.ArrayList`;
  #L4ae0e8.  v2:= v3.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L4ae0ec.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4ae0f2.  v2:= v3.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L4ae0f6.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4ae0fc.  @monitorexit v0
  #L4ae0fe.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ae104.  v0:= temp @kind object;
  #L4ae106.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ae10c.  v1:= temp;
  #L4ae10e.  if v1 == 0 then goto L4ae12a;
  #L4ae112.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ae118.  v1:= temp @kind object;
  #L4ae11a.  v1:= (`rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject`) v1 @kind object;
  #L4ae11e.  v1:= v1.`rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject.consumer` @type ^`rx.Observer` @kind object;
  #L4ae122.  call `onCompleted`(v1) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4ae128.  goto L4ae106;
  #L4ae12a.  v0:= v3.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4ae12e.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4ae134.  return @kind void;
  #L4ae136.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ae138.  @monitorexit v0
  #L4ae13a.  goto L4ae13e;
  #L4ae13c.  throw v1;
  #L4ae13e.  goto L4ae13c;
  catch `java.lang.Throwable` @[L4ae0d2..L4ae0fe] goto L4ae136;
  catch `java.lang.Throwable` @[L4ae138..L4ae13a] goto L4ae136;
}
procedure `void` `onError`(`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ae164.  v0:= v3.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ae168.  @monitorenter v0
  #L4ae16a.  v1:= v3.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.done` @type ^`boolean` @kind boolean;
  #L4ae16e.  if v1 == 0 then goto L4ae176;
  #L4ae172.  @monitorexit v0
  #L4ae174.  return @kind void;
  #L4ae176.  v1:= 1I;
  #L4ae178.  v3.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.done` @type ^`boolean` := v1 @kind boolean;
  #L4ae17c.  v1:= new `java.util.ArrayList`;
  #L4ae180.  v2:= v3.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L4ae184.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4ae18a.  v2:= v3.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L4ae18e.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4ae194.  @monitorexit v0
  #L4ae196.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ae19c.  v0:= temp @kind object;
  #L4ae19e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ae1a4.  v1:= temp;
  #L4ae1a6.  if v1 == 0 then goto L4ae1c2;
  #L4ae1aa.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ae1b0.  v1:= temp @kind object;
  #L4ae1b2.  v1:= (`rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject`) v1 @kind object;
  #L4ae1b6.  v1:= v1.`rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject.consumer` @type ^`rx.Observer` @kind object;
  #L4ae1ba.  call `onError`(v1, v4) @signature `Lrx/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ae1c0.  goto L4ae19e;
  #L4ae1c2.  v0:= v3.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4ae1c6.  call `onError`(v0, v4) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ae1cc.  return @kind void;
  #L4ae1ce.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ae1d0.  @monitorexit v0
  #L4ae1d2.  goto L4ae1d6;
  #L4ae1d4.  throw v4;
  #L4ae1d6.  goto L4ae1d4;
  catch `java.lang.Throwable` @[L4ae16a..L4ae196] goto L4ae1ce;
  catch `java.lang.Throwable` @[L4ae1d0..L4ae1d2] goto L4ae1ce;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ae1fc.  v0:= v5.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ae200.  @monitorenter v0
  #L4ae202.  v1:= v5.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.done` @type ^`boolean` @kind boolean;
  #L4ae206.  if v1 == 0 then goto L4ae20e;
  #L4ae20a.  @monitorexit v0
  #L4ae20c.  return @kind void;
  #L4ae20e.  v1:= new `java.util.ArrayList`;
  #L4ae212.  v2:= v5.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L4ae216.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4ae21c.  v2:= v5.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L4ae220.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ae226.  v2:= temp @kind object;
  #L4ae228.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ae22e.  v3:= temp;
  #L4ae230.  if v3 == 0 then goto L4ae260;
  #L4ae234.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ae23a.  v3:= temp @kind object;
  #L4ae23c.  v3:= (`rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject`) v3 @kind object;
  #L4ae240.  v4:= v3.`rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject.count` @type ^`int`;
  #L4ae244.  v4:= v4 + 1;
  #L4ae248.  v3.`rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject.count` @type ^`int` := v4;
  #L4ae24c.  v3:= v5.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.this$0` @type ^`rx.internal.operators.OperatorWindowWithTime` @kind object;
  #L4ae250.  v3:= v3.`rx.internal.operators.OperatorWindowWithTime.size` @type ^`int`;
  #L4ae254.  if v4 != v3 then goto L4ae228;
  #L4ae258.  call `remove`(v2) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L4ae25e.  goto L4ae228;
  #L4ae260.  @monitorexit v0
  #L4ae262.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ae268.  v0:= temp @kind object;
  #L4ae26a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ae270.  v1:= temp;
  #L4ae272.  if v1 == 0 then goto L4ae2a8;
  #L4ae276.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ae27c.  v1:= temp @kind object;
  #L4ae27e.  v1:= (`rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject`) v1 @kind object;
  #L4ae282.  v2:= v1.`rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject.consumer` @type ^`rx.Observer` @kind object;
  #L4ae286.  call `onNext`(v2, v6) @signature `Lrx/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ae28c.  v2:= v1.`rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject.count` @type ^`int`;
  #L4ae290.  v3:= v5.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.this$0` @type ^`rx.internal.operators.OperatorWindowWithTime` @kind object;
  #L4ae294.  v3:= v3.`rx.internal.operators.OperatorWindowWithTime.size` @type ^`int`;
  #L4ae298.  if v2 != v3 then goto L4ae26a;
  #L4ae29c.  v1:= v1.`rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject.consumer` @type ^`rx.Observer` @kind object;
  #L4ae2a0.  call `onCompleted`(v1) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4ae2a6.  goto L4ae26a;
  #L4ae2a8.  return @kind void;
  #L4ae2aa.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ae2ac.  @monitorexit v0
  #L4ae2ae.  goto L4ae2b2;
  #L4ae2b0.  throw v6;
  #L4ae2b2.  goto L4ae2b0;
  catch `java.lang.Throwable` @[L4ae202..L4ae262] goto L4ae2aa;
  catch `java.lang.Throwable` @[L4ae2ac..L4ae2ae] goto L4ae2aa;
}
procedure `void` `onStart`(`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;.onStart:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ae2d8.  v0:= 9223372036854775807L;
  #L4ae2e2.  call `request`(v2, v0) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;.request:(J)V` @kind virtual;
  #L4ae2e8.  return @kind void;
}
procedure `void` `scheduleChunk`(`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber` v7 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;.scheduleChunk:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4ae2fc.  v0:= v7.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.worker` @type ^`rx.Scheduler$Worker` @kind object;
  #L4ae300.  v1:= new `rx.internal.operators.OperatorWindowWithTime$InexactSubscriber$1`;
  #L4ae304.  call `<init>`(v1, v7) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber$1;.<init>:(Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;)V` @kind direct;
  #L4ae30a.  v2:= v7.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.this$0` @type ^`rx.internal.operators.OperatorWindowWithTime` @kind object;
  #L4ae30e.  v2:= v2.`rx.internal.operators.OperatorWindowWithTime.timeshift` @type ^`long` @kind wide;
  #L4ae312.  v4:= v7.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.this$0` @type ^`rx.internal.operators.OperatorWindowWithTime` @kind object;
  #L4ae316.  v4:= v4.`rx.internal.operators.OperatorWindowWithTime.timeshift` @type ^`long` @kind wide;
  #L4ae31a.  v6:= v7.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.this$0` @type ^`rx.internal.operators.OperatorWindowWithTime` @kind object;
  #L4ae31e.  v6:= v6.`rx.internal.operators.OperatorWindowWithTime.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ae322.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lrx/Scheduler$Worker;.schedulePeriodically:(Lrx/functions/Action0;JJLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L4ae328.  return @kind void;
}
procedure `void` `startNewChunk`(`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber` v5 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;.startNewChunk:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ae33c.  call temp:= `createCountedSerializedSubject`(v5) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;.createCountedSerializedSubject:()Lrx/internal/operators/OperatorWindowWithTime$CountedSerializedSubject;` @kind virtual;
  #L4ae342.  v0:= temp @kind object;
  #L4ae344.  v1:= v5.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ae348.  @monitorenter v1
  #L4ae34a.  v2:= v5.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.done` @type ^`boolean` @kind boolean;
  #L4ae34e.  if v2 == 0 then goto L4ae356;
  #L4ae352.  @monitorexit v1
  #L4ae354.  return @kind void;
  #L4ae356.  v2:= v5.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L4ae35a.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ae360.  @monitorexit v1
  #L4ae362.  v1:= v5.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4ae366.  v2:= v0.`rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject.producer` @type ^`rx.Observable` @kind object;
  #L4ae36a.  call `onNext`(v1, v2) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4ae370.  v1:= v5.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.worker` @type ^`rx.Scheduler$Worker` @kind object;
  #L4ae374.  v2:= new `rx.internal.operators.OperatorWindowWithTime$InexactSubscriber$2`;
  #L4ae378.  call `<init>`(v2, v5, v0) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber$2;.<init>:(Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;Lrx/internal/operators/OperatorWindowWithTime$CountedSerializedSubject;)V` @kind direct;
  #L4ae37e.  v0:= v5.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.this$0` @type ^`rx.internal.operators.OperatorWindowWithTime` @kind object;
  #L4ae382.  v3:= v0.`rx.internal.operators.OperatorWindowWithTime.timespan` @type ^`long` @kind wide;
  #L4ae386.  v0:= v5.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.this$0` @type ^`rx.internal.operators.OperatorWindowWithTime` @kind object;
  #L4ae38a.  v0:= v0.`rx.internal.operators.OperatorWindowWithTime.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4ae38e.  call temp:= `schedule`(v1, v2, v3, v0) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;` @kind virtual;
  #L4ae394.  return @kind void;
  #L4ae396.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ae398.  call `onError`(v5, v0) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ae39e.  return @kind void;
  #L4ae3a0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ae3a2.  @monitorexit v1
  #L4ae3a4.  throw v0;
  catch `java.lang.Throwable` @[L4ae34a..L4ae362] goto L4ae3a0;
  catch `java.lang.Throwable` @[L4ae362..L4ae370] goto L4ae396;
  catch `java.lang.Throwable` @[L4ae3a2..L4ae3a4] goto L4ae3a0;
}
procedure `void` `terminateChunk`(`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber` v3 @kind this, `rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject` v4 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithTime$InexactSubscriber;.terminateChunk:(Lrx/internal/operators/OperatorWindowWithTime$CountedSerializedSubject;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4ae3d8.  v0:= v3.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.guard` @type ^`java.lang.Object` @kind object;
  #L4ae3dc.  @monitorenter v0
  #L4ae3de.  v1:= v3.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.done` @type ^`boolean` @kind boolean;
  #L4ae3e2.  if v1 == 0 then goto L4ae3ea;
  #L4ae3e6.  @monitorexit v0
  #L4ae3e8.  return @kind void;
  #L4ae3ea.  v1:= v3.`rx.internal.operators.OperatorWindowWithTime$InexactSubscriber.chunks` @type ^`java.util.List` @kind object;
  #L4ae3ee.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ae3f4.  v1:= temp @kind object;
  #L4ae3f6.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ae3fc.  v2:= temp;
  #L4ae3fe.  if v2 == 0 then goto L4ae41c;
  #L4ae402.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ae408.  v2:= temp @kind object;
  #L4ae40a.  v2:= (`rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject`) v2 @kind object;
  #L4ae40e.  if v2 != v4 then goto L4ae3f6;
  #L4ae412.  v2:= 1I;
  #L4ae414.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L4ae41a.  goto L4ae41e;
  #L4ae41c.  v2:= 0I;
  #L4ae41e.  @monitorexit v0
  #L4ae420.  if v2 == 0 then goto L4ae42e;
  #L4ae424.  v4:= v4.`rx.internal.operators.OperatorWindowWithTime$CountedSerializedSubject.consumer` @type ^`rx.Observer` @kind object;
  #L4ae428.  call `onCompleted`(v4) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4ae42e.  return @kind void;
  #L4ae430.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ae432.  @monitorexit v0
  #L4ae434.  goto L4ae438;
  #L4ae436.  throw v4;
  #L4ae438.  goto L4ae436;
  catch `java.lang.Throwable` @[L4ae3de..L4ae420] goto L4ae430;
  catch `java.lang.Throwable` @[L4ae432..L4ae434] goto L4ae430;
}
