record `rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.internal.producers.ProducerArbiter` `rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber.arbiter` @AccessFlag PRIVATE_FINAL;
  `rx.Subscriber` `rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber.child` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object, `rx.internal.producers.ProducerArbiter` v2 @kind object) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty$AlternateSubscriber;.<init>:(Lrx/Subscriber;Lrx/internal/producers/ProducerArbiter;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a9a00.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a9a06.  v0.`rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber.child` @type ^`rx.Subscriber` := v1 @kind object;
  #L4a9a0a.  v0.`rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber.arbiter` @type ^`rx.internal.producers.ProducerArbiter` := v2 @kind object;
  #L4a9a0e.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty$AlternateSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9a20.  v0:= v1.`rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a9a24.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a9a2a.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty$AlternateSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9a3c.  v0:= v1.`rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a9a40.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a9a46.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty$AlternateSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a9a58.  v0:= v2.`rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a9a5c.  call `onNext`(v0, v3) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a9a62.  v3:= v2.`rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber.arbiter` @type ^`rx.internal.producers.ProducerArbiter` @kind object;
  #L4a9a66.  v0:= 1L;
  #L4a9a6a.  call `produced`(v3, v0) @signature `Lrx/internal/producers/ProducerArbiter;.produced:(J)V` @kind virtual;
  #L4a9a70.  return @kind void;
}
procedure `void` `setProducer`(`rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber` v1 @kind this, `rx.Producer` v2 @kind object) @signature `Lrx/internal/operators/OperatorSwitchIfEmpty$AlternateSubscriber;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9a84.  v0:= v1.`rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber.arbiter` @type ^`rx.internal.producers.ProducerArbiter` @kind object;
  #L4a9a88.  call `setProducer`(v0, v2) @signature `Lrx/internal/producers/ProducerArbiter;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a9a8e.  return @kind void;
}
