record `rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `long` `rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.actual` @AccessFlag ;
  `rx.internal.producers.ProducerArbiter` `rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.arbiter` @AccessFlag FINAL;
  `rx.Scheduler$Worker` `rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.inner` @AccessFlag FINAL;
  `rx.Observable` `rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.other` @AccessFlag FINAL;
  `rx.subscriptions.SerialSubscription` `rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.serial` @AccessFlag FINAL;
  `rx.observers.SerializedSubscriber` `rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.serializedSubscriber` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.terminated` @AccessFlag ;
  `rx.internal.operators.OperatorTimeoutBase$TimeoutStub` `rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.timeoutStub` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber` v0 @kind this, `rx.observers.SerializedSubscriber` v1 @kind object, `rx.internal.operators.OperatorTimeoutBase$TimeoutStub` v2 @kind object, `rx.subscriptions.SerialSubscription` v3 @kind object, `rx.Observable` v4 @kind object, `rx.Scheduler$Worker` v5 @kind object) @signature `Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;.<init>:(Lrx/observers/SerializedSubscriber;Lrx/internal/operators/OperatorTimeoutBase$TimeoutStub;Lrx/subscriptions/SerialSubscription;Lrx/Observable;Lrx/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4aaef8.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4aaefe.  v0.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.serializedSubscriber` @type ^`rx.observers.SerializedSubscriber` := v1 @kind object;
  #L4aaf02.  v0.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.timeoutStub` @type ^`rx.internal.operators.OperatorTimeoutBase$TimeoutStub` := v2 @kind object;
  #L4aaf06.  v0.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.serial` @type ^`rx.subscriptions.SerialSubscription` := v3 @kind object;
  #L4aaf0a.  v0.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.other` @type ^`rx.Observable` := v4 @kind object;
  #L4aaf0e.  v0.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.inner` @type ^`rx.Scheduler$Worker` := v5 @kind object;
  #L4aaf12.  v1:= new `rx.internal.producers.ProducerArbiter`;
  #L4aaf16.  call `<init>`(v1) @signature `Lrx/internal/producers/ProducerArbiter;.<init>:()V` @kind direct;
  #L4aaf1c.  v0.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.arbiter` @type ^`rx.internal.producers.ProducerArbiter` := v1 @kind object;
  #L4aaf20.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aaf34.  @monitorenter v2
  #L4aaf36.  v0:= v2.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.terminated` @type ^`boolean` @kind boolean;
  #L4aaf3a.  v1:= 1I;
  #L4aaf3c.  if v0 != 0 then goto L4aaf46;
  #L4aaf40.  v2.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.terminated` @type ^`boolean` := v1 @kind boolean;
  #L4aaf44.  goto L4aaf48;
  #L4aaf46.  v1:= 0I;
  #L4aaf48.  @monitorexit v2
  #L4aaf4a.  if v1 == 0 then goto L4aaf62;
  #L4aaf4e.  v0:= v2.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.serial` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L4aaf52.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/SerialSubscription;.unsubscribe:()V` @kind virtual;
  #L4aaf58.  v0:= v2.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.serializedSubscriber` @type ^`rx.observers.SerializedSubscriber` @kind object;
  #L4aaf5c.  call `onCompleted`(v0) @signature `Lrx/observers/SerializedSubscriber;.onCompleted:()V` @kind virtual;
  #L4aaf62.  return @kind void;
  #L4aaf64.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aaf66.  @monitorexit v2
  #L4aaf68.  throw v0;
  catch `java.lang.Throwable` @[L4aaf36..L4aaf4a] goto L4aaf64;
  catch `java.lang.Throwable` @[L4aaf66..L4aaf68] goto L4aaf64;
}
procedure `void` `onError`(`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aaf90.  @monitorenter v2
  #L4aaf92.  v0:= v2.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.terminated` @type ^`boolean` @kind boolean;
  #L4aaf96.  v1:= 1I;
  #L4aaf98.  if v0 != 0 then goto L4aafa2;
  #L4aaf9c.  v2.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.terminated` @type ^`boolean` := v1 @kind boolean;
  #L4aafa0.  goto L4aafa4;
  #L4aafa2.  v1:= 0I;
  #L4aafa4.  @monitorexit v2
  #L4aafa6.  if v1 == 0 then goto L4aafbe;
  #L4aafaa.  v0:= v2.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.serial` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L4aafae.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/SerialSubscription;.unsubscribe:()V` @kind virtual;
  #L4aafb4.  v0:= v2.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.serializedSubscriber` @type ^`rx.observers.SerializedSubscriber` @kind object;
  #L4aafb8.  call `onError`(v0, v3) @signature `Lrx/observers/SerializedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4aafbe.  return @kind void;
  #L4aafc0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aafc2.  @monitorexit v2
  #L4aafc4.  throw v3;
  catch `java.lang.Throwable` @[L4aaf92..L4aafa6] goto L4aafc0;
  catch `java.lang.Throwable` @[L4aafc2..L4aafc4] goto L4aafc0;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4aafec.  @monitorenter v4
  #L4aafee.  v0:= v4.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.terminated` @type ^`boolean` @kind boolean;
  #L4aaff2.  if v0 != 0 then goto L4ab008;
  #L4aaff6.  v0:= v4.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.actual` @type ^`long` @kind wide;
  #L4aaffa.  v2:= 1L;
  #L4aaffe.  v0:= v0 + v2 @kind long;
  #L4ab000.  v4.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.actual` @type ^`long` := v0 @kind wide;
  #L4ab004.  v2:= 1I;
  #L4ab006.  goto L4ab00e;
  #L4ab008.  v0:= v4.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.actual` @type ^`long` @kind wide;
  #L4ab00c.  v2:= 0I;
  #L4ab00e.  @monitorexit v4
  #L4ab010.  if v2 == 0 then goto L4ab044;
  #L4ab014.  v2:= v4.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.serializedSubscriber` @type ^`rx.observers.SerializedSubscriber` @kind object;
  #L4ab018.  call `onNext`(v2, v5) @signature `Lrx/observers/SerializedSubscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4ab01e.  v2:= v4.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.serial` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L4ab022.  v3:= v4.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.timeoutStub` @type ^`rx.internal.operators.OperatorTimeoutBase$TimeoutStub` @kind object;
  #L4ab026.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4ab02c.  v0:= temp @kind object;
  #L4ab02e.  v1:= v4.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.inner` @type ^`rx.Scheduler$Worker` @kind object;
  #L4ab032.  call temp:= `call`(v3, v4, v0, v5, v1) @signature `Lrx/internal/operators/OperatorTimeoutBase$TimeoutStub;.call:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ab038.  v5:= temp @kind object;
  #L4ab03a.  v5:= (`rx.Subscription`) v5 @kind object;
  #L4ab03e.  call `set`(v2, v5) @signature `Lrx/subscriptions/SerialSubscription;.set:(Lrx/Subscription;)V` @kind virtual;
  #L4ab044.  return @kind void;
  #L4ab046.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ab048.  @monitorexit v4
  #L4ab04a.  throw v5;
  catch `java.lang.Throwable` @[L4aafee..L4ab010] goto L4ab046;
  catch `java.lang.Throwable` @[L4ab048..L4ab04a] goto L4ab046;
}
procedure `void` `onTimeout`(`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber` v4 @kind this, `long` v5 ) @signature `Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;.onTimeout:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ab070.  @monitorenter v4
  #L4ab072.  v0:= v4.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.actual` @type ^`long` @kind wide;
  #L4ab076.  v2:= 1I;
  #L4ab078.  v3:= lcmp(v5, v0);
  #L4ab07c.  if v3 != 0 then goto L4ab08e;
  #L4ab080.  v5:= v4.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.terminated` @type ^`boolean` @kind boolean;
  #L4ab084.  if v5 != 0 then goto L4ab08e;
  #L4ab088.  v4.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.terminated` @type ^`boolean` := v2 @kind boolean;
  #L4ab08c.  goto L4ab090;
  #L4ab08e.  v2:= 0I;
  #L4ab090.  @monitorexit v4
  #L4ab092.  if v2 == 0 then goto L4ab0d2;
  #L4ab096.  v5:= v4.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.other` @type ^`rx.Observable` @kind object;
  #L4ab09a.  if v5 != 0 then goto L4ab0b4;
  #L4ab09e.  v5:= v4.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.serializedSubscriber` @type ^`rx.observers.SerializedSubscriber` @kind object;
  #L4ab0a2.  v6:= new `java.util.concurrent.TimeoutException`;
  #L4ab0a6.  call `<init>`(v6) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L4ab0ac.  call `onError`(v5, v6) @signature `Lrx/observers/SerializedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ab0b2.  goto L4ab0d2;
  #L4ab0b4.  v5:= new `rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber$1`;
  #L4ab0b8.  call `<init>`(v5, v4) @signature `Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber$1;.<init>:(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;)V` @kind direct;
  #L4ab0be.  v6:= v4.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.other` @type ^`rx.Observable` @kind object;
  #L4ab0c2.  call temp:= `unsafeSubscribe`(v6, v5) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4ab0c8.  v6:= v4.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.serial` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L4ab0cc.  call `set`(v6, v5) @signature `Lrx/subscriptions/SerialSubscription;.set:(Lrx/Subscription;)V` @kind virtual;
  #L4ab0d2.  return @kind void;
  #L4ab0d4.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ab0d6.  @monitorexit v4
  #L4ab0d8.  throw v5;
  catch `java.lang.Throwable` @[L4ab072..L4ab092] goto L4ab0d4;
  catch `java.lang.Throwable` @[L4ab0d6..L4ab0d8] goto L4ab0d4;
}
procedure `void` `setProducer`(`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber` v1 @kind this, `rx.Producer` v2 @kind object) @signature `Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ab100.  v0:= v1.`rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber.arbiter` @type ^`rx.internal.producers.ProducerArbiter` @kind object;
  #L4ab104.  call `setProducer`(v0, v2) @signature `Lrx/internal/producers/ProducerArbiter;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4ab10a.  return @kind void;
}
