record `rx.internal.operators.OperatorPublish$1` @kind class @AccessFlag FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OperatorPublish$1.val$curr` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorPublish$1` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object) @signature `Lrx/internal/operators/OperatorPublish$1;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a52bc.  v0.`rx.internal.operators.OperatorPublish$1.val$curr` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4a52c0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a52c6.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorPublish$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorPublish$1;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a52d8.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a52dc.  call `call`(v0, v1) @signature `Lrx/internal/operators/OperatorPublish$1;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L4a52e2.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorPublish$1` v3 @kind this, `rx.Subscriber` v4 @kind object) @signature `Lrx/internal/operators/OperatorPublish$1;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a52f4.  v0:= v3.`rx.internal.operators.OperatorPublish$1.val$curr` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a52f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a52fe.  v0:= temp @kind object;
  #L4a5300.  v0:= (`rx.internal.operators.OperatorPublish$PublishSubscriber`) v0 @kind object;
  #L4a5304.  if v0 == 0 then goto L4a5314;
  #L4a5308.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4a530e.  v1:= temp;
  #L4a5310.  if v1 == 0 then goto L4a533c;
  #L4a5314.  v1:= new `rx.internal.operators.OperatorPublish$PublishSubscriber`;
  #L4a5318.  v2:= v3.`rx.internal.operators.OperatorPublish$1.val$curr` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a531c.  call `<init>`(v1, v2) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4a5322.  call `init`(v1) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.init:()V` @kind virtual;
  #L4a5328.  v2:= v3.`rx.internal.operators.OperatorPublish$1.val$curr` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a532c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4a5332.  v0:= temp;
  #L4a5334.  if v0 != 0 then goto L4a533a;
  #L4a5338.  goto L4a52f4;
  #L4a533a.  v0:= v1 @kind object;
  #L4a533c.  v1:= new `rx.internal.operators.OperatorPublish$InnerProducer`;
  #L4a5340.  call `<init>`(v1, v0, v4) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.<init>:(Lrx/internal/operators/OperatorPublish$PublishSubscriber;Lrx/Subscriber;)V` @kind direct;
  #L4a5346.  call temp:= `add`(v0, v1) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.add:(Lrx/internal/operators/OperatorPublish$InnerProducer;)Z` @kind virtual;
  #L4a534c.  v0:= temp;
  #L4a534e.  if v0 == 0 then goto L4a52f4;
  #L4a5352.  call `add`(v4, v1) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a5358.  call `setProducer`(v4, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a535e.  return @kind void;
}
