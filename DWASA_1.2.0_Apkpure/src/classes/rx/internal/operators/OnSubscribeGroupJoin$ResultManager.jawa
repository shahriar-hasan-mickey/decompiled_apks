record `rx.internal.operators.OnSubscribeGroupJoin$ResultManager` @kind class @AccessFlag FINAL extends `java.util.HashMap` @kind class, `rx.Subscription` @kind interface {
  `rx.subscriptions.RefCountSubscription` `rx.internal.operators.OnSubscribeGroupJoin$ResultManager.cancel` @AccessFlag FINAL;
  `rx.subscriptions.CompositeSubscription` `rx.internal.operators.OnSubscribeGroupJoin$ResultManager.group` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OnSubscribeGroupJoin$ResultManager.leftDone` @AccessFlag ;
  `int` `rx.internal.operators.OnSubscribeGroupJoin$ResultManager.leftIds` @AccessFlag ;
  `boolean` `rx.internal.operators.OnSubscribeGroupJoin$ResultManager.rightDone` @AccessFlag ;
  `int` `rx.internal.operators.OnSubscribeGroupJoin$ResultManager.rightIds` @AccessFlag ;
  `java.util.Map` `rx.internal.operators.OnSubscribeGroupJoin$ResultManager.rightMap` @AccessFlag FINAL;
  `rx.Subscriber` `rx.internal.operators.OnSubscribeGroupJoin$ResultManager.subscriber` @AccessFlag FINAL;
  `rx.internal.operators.OnSubscribeGroupJoin` `rx.internal.operators.OnSubscribeGroupJoin$ResultManager.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@rx.internal.operators.OnSubscribeGroupJoin$ResultManager.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeGroupJoin$ResultManager` v0 @kind this, `rx.internal.operators.OnSubscribeGroupJoin` v1 @kind object, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeGroupJoin$ResultManager;.<init>:(Lrx/internal/operators/OnSubscribeGroupJoin;Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49a094.  v0.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.this$0` @type ^`rx.internal.operators.OnSubscribeGroupJoin` := v1 @kind object;
  #L49a098.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L49a09e.  v1:= new `java.util.HashMap`;
  #L49a0a2.  call `<init>`(v1) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L49a0a8.  v0.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.rightMap` @type ^`java.util.Map` := v1 @kind object;
  #L49a0ac.  v0.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.subscriber` @type ^`rx.Subscriber` := v2 @kind object;
  #L49a0b0.  v1:= new `rx.subscriptions.CompositeSubscription`;
  #L49a0b4.  call `<init>`(v1) @signature `Lrx/subscriptions/CompositeSubscription;.<init>:()V` @kind direct;
  #L49a0ba.  v0.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.group` @type ^`rx.subscriptions.CompositeSubscription` := v1 @kind object;
  #L49a0be.  v1:= new `rx.subscriptions.RefCountSubscription`;
  #L49a0c2.  v2:= v0.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.group` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49a0c6.  call `<init>`(v1, v2) @signature `Lrx/subscriptions/RefCountSubscription;.<init>:(Lrx/Subscription;)V` @kind direct;
  #L49a0cc.  v0.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.cancel` @type ^`rx.subscriptions.RefCountSubscription` := v1 @kind object;
  #L49a0d0.  return @kind void;
}
procedure `void` `complete`(`rx.internal.operators.OnSubscribeGroupJoin$ResultManager` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeGroupJoin$ResultManager;.complete:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;

  #L49a0e4.  if v2 == 0 then goto L49a124;
  #L49a0e8.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49a0ee.  v2:= temp @kind object;
  #L49a0f0.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49a0f6.  v0:= temp;
  #L49a0f8.  if v0 == 0 then goto L49a110;
  #L49a0fc.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49a102.  v0:= temp @kind object;
  #L49a104.  v0:= (`rx.Observer`) v0 @kind object;
  #L49a108.  call `onCompleted`(v0) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L49a10e.  goto L49a0f0;
  #L49a110.  v2:= v1.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49a114.  call `onCompleted`(v2) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49a11a.  v2:= v1.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.cancel` @type ^`rx.subscriptions.RefCountSubscription` @kind object;
  #L49a11e.  call `unsubscribe`(v2) @signature `Lrx/subscriptions/RefCountSubscription;.unsubscribe:()V` @kind virtual;
  #L49a124.  return @kind void;
}
procedure `void` `errorAll`(`rx.internal.operators.OnSubscribeGroupJoin$ResultManager` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeGroupJoin$ResultManager;.errorAll:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L49a138.  @monitorenter v2
  #L49a13a.  v0:= new `java.util.ArrayList`;
  #L49a13e.  call temp:= `leftMap`(v2) @signature `Lrx/internal/operators/OnSubscribeGroupJoin$ResultManager;.leftMap:()Ljava/util/Map;` @kind virtual;
  #L49a144.  v1:= temp @kind object;
  #L49a146.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L49a14c.  v1:= temp @kind object;
  #L49a14e.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L49a154.  call temp:= `leftMap`(v2) @signature `Lrx/internal/operators/OnSubscribeGroupJoin$ResultManager;.leftMap:()Ljava/util/Map;` @kind virtual;
  #L49a15a.  v1:= temp @kind object;
  #L49a15c.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L49a162.  v1:= v2.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.rightMap` @type ^`java.util.Map` @kind object;
  #L49a166.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L49a16c.  @monitorexit v2
  #L49a16e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L49a174.  v0:= temp @kind object;
  #L49a176.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49a17c.  v1:= temp;
  #L49a17e.  if v1 == 0 then goto L49a196;
  #L49a182.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49a188.  v1:= temp @kind object;
  #L49a18a.  v1:= (`rx.Observer`) v1 @kind object;
  #L49a18e.  call `onError`(v1, v3) @signature `Lrx/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49a194.  goto L49a176;
  #L49a196.  v0:= v2.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49a19a.  call `onError`(v0, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49a1a0.  v3:= v2.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.cancel` @type ^`rx.subscriptions.RefCountSubscription` @kind object;
  #L49a1a4.  call `unsubscribe`(v3) @signature `Lrx/subscriptions/RefCountSubscription;.unsubscribe:()V` @kind virtual;
  #L49a1aa.  return @kind void;
  #L49a1ac.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49a1ae.  @monitorexit v2
  #L49a1b0.  goto L49a1b4;
  #L49a1b2.  throw v3;
  #L49a1b4.  goto L49a1b2;
  catch `java.lang.Throwable` @[L49a13a..L49a16e] goto L49a1ac;
  catch `java.lang.Throwable` @[L49a1ae..L49a1b0] goto L49a1ac;
}
procedure `void` `errorMain`(`rx.internal.operators.OnSubscribeGroupJoin$ResultManager` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeGroupJoin$ResultManager;.errorMain:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L49a1dc.  @monitorenter v1
  #L49a1de.  call temp:= `leftMap`(v1) @signature `Lrx/internal/operators/OnSubscribeGroupJoin$ResultManager;.leftMap:()Ljava/util/Map;` @kind virtual;
  #L49a1e4.  v0:= temp @kind object;
  #L49a1e6.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L49a1ec.  v0:= v1.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.rightMap` @type ^`java.util.Map` @kind object;
  #L49a1f0.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L49a1f6.  @monitorexit v1
  #L49a1f8.  v0:= v1.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.subscriber` @type ^`rx.Subscriber` @kind object;
  #L49a1fc.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49a202.  v2:= v1.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.cancel` @type ^`rx.subscriptions.RefCountSubscription` @kind object;
  #L49a206.  call `unsubscribe`(v2) @signature `Lrx/subscriptions/RefCountSubscription;.unsubscribe:()V` @kind virtual;
  #L49a20c.  return @kind void;
  #L49a20e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49a210.  @monitorexit v1
  #L49a212.  throw v2;
  catch `java.lang.Throwable` @[L49a1de..L49a1f8] goto L49a20e;
  catch `java.lang.Throwable` @[L49a210..L49a212] goto L49a20e;
}
procedure `void` `init`(`rx.internal.operators.OnSubscribeGroupJoin$ResultManager` v3 @kind this) @signature `Lrx/internal/operators/OnSubscribeGroupJoin$ResultManager;.init:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49a238.  v0:= new `rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftObserver`;
  #L49a23c.  call `<init>`(v0, v3) @signature `Lrx/internal/operators/OnSubscribeGroupJoin$ResultManager$LeftObserver;.<init>:(Lrx/internal/operators/OnSubscribeGroupJoin$ResultManager;)V` @kind direct;
  #L49a242.  v1:= new `rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightObserver`;
  #L49a246.  call `<init>`(v1, v3) @signature `Lrx/internal/operators/OnSubscribeGroupJoin$ResultManager$RightObserver;.<init>:(Lrx/internal/operators/OnSubscribeGroupJoin$ResultManager;)V` @kind direct;
  #L49a24c.  v2:= v3.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.group` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49a250.  call `add`(v2, v0) @signature `Lrx/subscriptions/CompositeSubscription;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49a256.  v2:= v3.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.group` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49a25a.  call `add`(v2, v1) @signature `Lrx/subscriptions/CompositeSubscription;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49a260.  v2:= v3.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.this$0` @type ^`rx.internal.operators.OnSubscribeGroupJoin` @kind object;
  #L49a264.  v2:= v2.`rx.internal.operators.OnSubscribeGroupJoin.left` @type ^`rx.Observable` @kind object;
  #L49a268.  call temp:= `unsafeSubscribe`(v2, v0) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L49a26e.  v0:= v3.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.this$0` @type ^`rx.internal.operators.OnSubscribeGroupJoin` @kind object;
  #L49a272.  v0:= v0.`rx.internal.operators.OnSubscribeGroupJoin.right` @type ^`rx.Observable` @kind object;
  #L49a276.  call temp:= `unsafeSubscribe`(v0, v1) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L49a27c.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.operators.OnSubscribeGroupJoin$ResultManager` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeGroupJoin$ResultManager;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49a060.  v0:= v1.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.cancel` @type ^`rx.subscriptions.RefCountSubscription` @kind object;
  #L49a064.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/subscriptions/RefCountSubscription;.isUnsubscribed:()Z` @kind virtual;
  #L49a06a.  v0:= temp;
  #L49a06c.  return v0;
}
procedure `java.util.Map` `leftMap`(`rx.internal.operators.OnSubscribeGroupJoin$ResultManager` v0 @kind this) @signature `Lrx/internal/operators/OnSubscribeGroupJoin$ResultManager;.leftMap:()Ljava/util/Map;` @AccessFlag  {
    temp;

  #L49a080.  return v0 @kind object;
}
procedure `void` `unsubscribe`(`rx.internal.operators.OnSubscribeGroupJoin$ResultManager` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeGroupJoin$ResultManager;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49a290.  v0:= v1.`rx.internal.operators.OnSubscribeGroupJoin$ResultManager.cancel` @type ^`rx.subscriptions.RefCountSubscription` @kind object;
  #L49a294.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/RefCountSubscription;.unsubscribe:()V` @kind virtual;
  #L49a29a.  return @kind void;
}
