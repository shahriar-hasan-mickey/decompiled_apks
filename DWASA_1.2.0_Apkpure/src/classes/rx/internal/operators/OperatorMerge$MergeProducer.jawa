record `rx.internal.operators.OperatorMerge$MergeProducer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `rx.Producer` @kind interface {
  `rx.internal.operators.OperatorMerge$MergeSubscriber` `rx.internal.operators.OperatorMerge$MergeProducer.subscriber` @AccessFlag FINAL;
}
global `long` `@@rx.internal.operators.OperatorMerge$MergeProducer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OperatorMerge$MergeProducer` v0 @kind this, `rx.internal.operators.OperatorMerge$MergeSubscriber` v1 @kind object) @signature `Lrx/internal/operators/OperatorMerge$MergeProducer;.<init>:(Lrx/internal/operators/OperatorMerge$MergeSubscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a2c78.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a2c7e.  v0.`rx.internal.operators.OperatorMerge$MergeProducer.subscriber` @type ^`rx.internal.operators.OperatorMerge$MergeSubscriber` := v1 @kind object;
  #L4a2c82.  return @kind void;
}
procedure `long` `produced`(`rx.internal.operators.OperatorMerge$MergeProducer` v2 @kind this, `int` v3 ) @signature `Lrx/internal/operators/OperatorMerge$MergeProducer;.produced:(I)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a2c58.  v3:= -v3 @kind int;
  #L4a2c5a.  v0:= (`long`) v3 @kind i2l;
  #L4a2c5c.  call temp:= `addAndGet`(v2, v0) @signature `Lrx/internal/operators/OperatorMerge$MergeProducer;.addAndGet:(J)J` @kind virtual;
  #L4a2c62.  v0:= temp @kind wide;
  #L4a2c64.  return v0 @kind wide;
}
procedure `void` `request`(`rx.internal.operators.OperatorMerge$MergeProducer` v5 @kind this, `long` v6 ) @signature `Lrx/internal/operators/OperatorMerge$MergeProducer;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a2c94.  v0:= 0L;
  #L4a2c98.  v2:= lcmp(v6, v0);
  #L4a2c9c.  if v2 <= 0 then goto L4a2cce;
  #L4a2ca0.  call temp:= `get`(v5) @signature `Lrx/internal/operators/OperatorMerge$MergeProducer;.get:()J` @kind virtual;
  #L4a2ca6.  v0:= temp @kind wide;
  #L4a2ca8.  v2:= 9223372036854775807L;
  #L4a2cb2.  v4:= lcmp(v0, v2);
  #L4a2cb6.  if v4 != 0 then goto L4a2cbc;
  #L4a2cba.  return @kind void;
  #L4a2cbc.  call temp:= `getAndAddRequest`(v5, v6) @signature `Lrx/internal/operators/BackpressureUtils;.getAndAddRequest:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a2cc2.  v6:= v5.`rx.internal.operators.OperatorMerge$MergeProducer.subscriber` @type ^`rx.internal.operators.OperatorMerge$MergeSubscriber` @kind object;
  #L4a2cc6.  call `emit`(v6) @signature `Lrx/internal/operators/OperatorMerge$MergeSubscriber;.emit:()V` @kind virtual;
  #L4a2ccc.  goto L4a2cd6;
  #L4a2cce.  v2:= lcmp(v6, v0);
  #L4a2cd2.  if v2 < 0 then goto L4a2cd8;
  #L4a2cd6.  return @kind void;
  #L4a2cd8.  v6:= new `java.lang.IllegalArgumentException`;
  #L4a2cdc.  v7:= "n >= 0 required" @kind object;
  #L4a2ce0.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a2ce6.  throw v6;
}
