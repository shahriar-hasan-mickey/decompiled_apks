record `rx.internal.operators.OperatorScan$InitialProducer` @kind class @AccessFlag FINAL extends `rx.Producer` @kind interface, `rx.Observer` @kind interface {
  `rx.Subscriber` `rx.internal.operators.OperatorScan$InitialProducer.child` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorScan$InitialProducer.done` @AccessFlag VOLATILE;
  `boolean` `rx.internal.operators.OperatorScan$InitialProducer.emitting` @AccessFlag ;
  `java.lang.Throwable` `rx.internal.operators.OperatorScan$InitialProducer.error` @AccessFlag ;
  `boolean` `rx.internal.operators.OperatorScan$InitialProducer.missed` @AccessFlag ;
  `long` `rx.internal.operators.OperatorScan$InitialProducer.missedRequested` @AccessFlag ;
  `rx.Producer` `rx.internal.operators.OperatorScan$InitialProducer.producer` @AccessFlag VOLATILE;
  `java.util.Queue` `rx.internal.operators.OperatorScan$InitialProducer.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OperatorScan$InitialProducer.requested` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorScan$InitialProducer` v0 @kind this, `java.lang.Object` v1 @kind object, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.<init>:(Ljava/lang/Object;Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a7e78.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a7e7e.  v0.`rx.internal.operators.OperatorScan$InitialProducer.child` @type ^`rx.Subscriber` := v2 @kind object;
  #L4a7e82.  call temp:= `isUnsafeAvailable`() @signature `Lrx/internal/util/unsafe/UnsafeAccess;.isUnsafeAvailable:()Z` @kind static;
  #L4a7e88.  v2:= temp;
  #L4a7e8a.  if v2 == 0 then goto L4a7e9a;
  #L4a7e8e.  v2:= new `rx.internal.util.unsafe.SpscLinkedQueue`;
  #L4a7e92.  call `<init>`(v2) @signature `Lrx/internal/util/unsafe/SpscLinkedQueue;.<init>:()V` @kind direct;
  #L4a7e98.  goto L4a7ea4;
  #L4a7e9a.  v2:= new `rx.internal.util.atomic.SpscLinkedAtomicQueue`;
  #L4a7e9e.  call `<init>`(v2) @signature `Lrx/internal/util/atomic/SpscLinkedAtomicQueue;.<init>:()V` @kind direct;
  #L4a7ea4.  v0.`rx.internal.operators.OperatorScan$InitialProducer.queue` @type ^`java.util.Queue` := v2 @kind object;
  #L4a7ea8.  call temp:= `next`(v1) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4a7eae.  v1:= temp @kind object;
  #L4a7eb0.  call temp:= `offer`(v2, v1) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4a7eb6.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a7eba.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a7ec0.  v0.`rx.internal.operators.OperatorScan$InitialProducer.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a7ec4.  return @kind void;
}
procedure `boolean` `checkTerminated`(`rx.internal.operators.OperatorScan$InitialProducer` v2 @kind this, `boolean` v3 , `boolean` v4 , `rx.Subscriber` v5 @kind object) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.checkTerminated:(ZZLrx/Subscriber;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4a7e34.  call temp:= `isUnsubscribed`(v5) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4a7e3a.  v0:= temp;
  #L4a7e3c.  v1:= 1I;
  #L4a7e3e.  if v0 == 0 then goto L4a7e44;
  #L4a7e42.  return v1;
  #L4a7e44.  if v3 == 0 then goto L4a7e64;
  #L4a7e48.  v3:= v2.`rx.internal.operators.OperatorScan$InitialProducer.error` @type ^`java.lang.Throwable` @kind object;
  #L4a7e4c.  if v3 == 0 then goto L4a7e58;
  #L4a7e50.  call `onError`(v5, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a7e56.  return v1;
  #L4a7e58.  if v4 == 0 then goto L4a7e64;
  #L4a7e5c.  call `onCompleted`(v5) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a7e62.  return v1;
  #L4a7e64.  v3:= 0I;
  #L4a7e66.  return v3;
}
procedure `void` `emit`(`rx.internal.operators.OperatorScan$InitialProducer` v2 @kind this) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.emit:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4a7ed8.  @monitorenter v2
  #L4a7eda.  v0:= v2.`rx.internal.operators.OperatorScan$InitialProducer.emitting` @type ^`boolean` @kind boolean;
  #L4a7ede.  v1:= 1I;
  #L4a7ee0.  if v0 == 0 then goto L4a7eec;
  #L4a7ee4.  v2.`rx.internal.operators.OperatorScan$InitialProducer.missed` @type ^`boolean` := v1 @kind boolean;
  #L4a7ee8.  @monitorexit v2
  #L4a7eea.  return @kind void;
  #L4a7eec.  v2.`rx.internal.operators.OperatorScan$InitialProducer.emitting` @type ^`boolean` := v1 @kind boolean;
  #L4a7ef0.  @monitorexit v2
  #L4a7ef2.  call `emitLoop`(v2) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.emitLoop:()V` @kind virtual;
  #L4a7ef8.  return @kind void;
  #L4a7efa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a7efc.  @monitorexit v2
  #L4a7efe.  throw v0;
  catch `java.lang.Throwable` @[L4a7eda..L4a7ef2] goto L4a7efa;
  catch `java.lang.Throwable` @[L4a7efc..L4a7efe] goto L4a7efa;
}
procedure `void` `emitLoop`(`rx.internal.operators.OperatorScan$InitialProducer` v13 @kind this) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.emitLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4a7f24.  v0:= v13.`rx.internal.operators.OperatorScan$InitialProducer.child` @type ^`rx.Subscriber` @kind object;
  #L4a7f28.  v1:= v13.`rx.internal.operators.OperatorScan$InitialProducer.queue` @type ^`java.util.Queue` @kind object;
  #L4a7f2c.  v2:= v13.`rx.internal.operators.OperatorScan$InitialProducer.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a7f30.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a7f36.  v3:= temp @kind wide;
  #L4a7f38.  v5:= v13.`rx.internal.operators.OperatorScan$InitialProducer.done` @type ^`boolean` @kind boolean;
  #L4a7f3c.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L4a7f42.  v6:= temp;
  #L4a7f44.  call temp:= `checkTerminated`(v13, v5, v6, v0) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.checkTerminated:(ZZLrx/Subscriber;)Z` @kind virtual;
  #L4a7f4a.  v5:= temp;
  #L4a7f4c.  if v5 == 0 then goto L4a7f52;
  #L4a7f50.  return @kind void;
  #L4a7f52.  v5:= 0L;
  #L4a7f56.  v7:= v5 @kind wide;
  #L4a7f58.  v9:= 0I;
  #L4a7f5a.  v10:= lcmp(v7, v3);
  #L4a7f5e.  if v10 == 0 then goto L4a7fac;
  #L4a7f62.  v10:= v13.`rx.internal.operators.OperatorScan$InitialProducer.done` @type ^`boolean` @kind boolean;
  #L4a7f66.  call temp:= `poll`(v1) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a7f6c.  v11:= temp @kind object;
  #L4a7f6e.  if v11 != 0 then goto L4a7f76;
  #L4a7f72.  v12:= 1I;
  #L4a7f74.  goto L4a7f78;
  #L4a7f76.  v12:= 0I;
  #L4a7f78.  call temp:= `checkTerminated`(v13, v10, v12, v0) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.checkTerminated:(ZZLrx/Subscriber;)Z` @kind virtual;
  #L4a7f7e.  v10:= temp;
  #L4a7f80.  if v10 == 0 then goto L4a7f86;
  #L4a7f84.  return @kind void;
  #L4a7f86.  if v12 == 0 then goto L4a7f8c;
  #L4a7f8a.  goto L4a7fac;
  #L4a7f8c.  call temp:= `getValue`(v11) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4a7f92.  v9:= temp @kind object;
  #L4a7f94.  call `onNext`(v0, v9) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a7f9a.  v9:= 1L;
  #L4a7f9e.  v7:= v7 + v9 @kind long;
  #L4a7fa0.  goto L4a7f58;
  #L4a7fa2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a7fa4.  call `throwOrReport`(v1, v0, v9) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4a7faa.  return @kind void;
  #L4a7fac.  v10:= lcmp(v7, v5);
  #L4a7fb0.  if v10 == 0 then goto L4a7fce;
  #L4a7fb4.  v5:= 9223372036854775807L;
  #L4a7fbe.  v10:= lcmp(v3, v5);
  #L4a7fc2.  if v10 == 0 then goto L4a7fce;
  #L4a7fc6.  call temp:= `produced`(v2, v7) @signature `Lrx/internal/operators/BackpressureUtils;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a7fcc.  v3:= temp @kind wide;
  #L4a7fce.  @monitorenter v13
  #L4a7fd0.  v5:= v13.`rx.internal.operators.OperatorScan$InitialProducer.missed` @type ^`boolean` @kind boolean;
  #L4a7fd4.  if v5 != 0 then goto L4a7fe0;
  #L4a7fd8.  v13.`rx.internal.operators.OperatorScan$InitialProducer.emitting` @type ^`boolean` := v9 @kind boolean;
  #L4a7fdc.  @monitorexit v13
  #L4a7fde.  return @kind void;
  #L4a7fe0.  v13.`rx.internal.operators.OperatorScan$InitialProducer.missed` @type ^`boolean` := v9 @kind boolean;
  #L4a7fe4.  @monitorexit v13
  #L4a7fe6.  goto L4a7f38;
  #L4a7fe8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a7fea.  @monitorexit v13
  #L4a7fec.  goto L4a7ff0;
  #L4a7fee.  throw v0;
  #L4a7ff0.  goto L4a7fee;
  catch `java.lang.Throwable` @[L4a7f94..L4a7f9a] goto L4a7fa2;
  catch `java.lang.Throwable` @[L4a7fd0..L4a7fec] goto L4a7fe8;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorScan$InitialProducer` v1 @kind this) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a801c.  v0:= 1I;
  #L4a801e.  v1.`rx.internal.operators.OperatorScan$InitialProducer.done` @type ^`boolean` := v0 @kind boolean;
  #L4a8022.  call `emit`(v1) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.emit:()V` @kind virtual;
  #L4a8028.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorScan$InitialProducer` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4a803c.  v0.`rx.internal.operators.OperatorScan$InitialProducer.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4a8040.  v1:= 1I;
  #L4a8042.  v0.`rx.internal.operators.OperatorScan$InitialProducer.done` @type ^`boolean` := v1 @kind boolean;
  #L4a8046.  call `emit`(v0) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.emit:()V` @kind virtual;
  #L4a804c.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorScan$InitialProducer` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8060.  v0:= v1.`rx.internal.operators.OperatorScan$InitialProducer.queue` @type ^`java.util.Queue` @kind object;
  #L4a8064.  call temp:= `next`(v2) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4a806a.  v2:= temp @kind object;
  #L4a806c.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4a8072.  call `emit`(v1) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.emit:()V` @kind virtual;
  #L4a8078.  return @kind void;
}
procedure `void` `request`(`rx.internal.operators.OperatorScan$InitialProducer` v4 @kind this, `long` v5 ) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a808c.  v0:= 0L;
  #L4a8090.  v2:= lcmp(v5, v0);
  #L4a8094.  if v2 < 0 then goto L4a80ec;
  #L4a8098.  v2:= lcmp(v5, v0);
  #L4a809c.  if v2 == 0 then goto L4a80ea;
  #L4a80a0.  v0:= v4.`rx.internal.operators.OperatorScan$InitialProducer.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a80a4.  call temp:= `getAndAddRequest`(v0, v5) @signature `Lrx/internal/operators/BackpressureUtils;.getAndAddRequest:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a80aa.  v0:= v4.`rx.internal.operators.OperatorScan$InitialProducer.producer` @type ^`rx.Producer` @kind object;
  #L4a80ae.  if v0 != 0 then goto L4a80da;
  #L4a80b2.  v1:= v4.`rx.internal.operators.OperatorScan$InitialProducer.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a80b6.  @monitorenter v1
  #L4a80b8.  v0:= v4.`rx.internal.operators.OperatorScan$InitialProducer.producer` @type ^`rx.Producer` @kind object;
  #L4a80bc.  if v0 != 0 then goto L4a80d0;
  #L4a80c0.  v2:= v4.`rx.internal.operators.OperatorScan$InitialProducer.missedRequested` @type ^`long` @kind wide;
  #L4a80c4.  call temp:= `addCap`(v2, v5) @signature `Lrx/internal/operators/BackpressureUtils;.addCap:(JJ)J` @kind static;
  #L4a80ca.  v2:= temp @kind wide;
  #L4a80cc.  v4.`rx.internal.operators.OperatorScan$InitialProducer.missedRequested` @type ^`long` := v2 @kind wide;
  #L4a80d0.  @monitorexit v1
  #L4a80d2.  goto L4a80da;
  #L4a80d4.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a80d6.  @monitorexit v1
  #L4a80d8.  throw v5;
  #L4a80da.  if v0 == 0 then goto L4a80e4;
  #L4a80de.  call `request`(v0, v5) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L4a80e4.  call `emit`(v4) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.emit:()V` @kind virtual;
  #L4a80ea.  return @kind void;
  #L4a80ec.  v0:= new `java.lang.IllegalArgumentException`;
  #L4a80f0.  v1:= new `java.lang.StringBuilder`;
  #L4a80f4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a80fa.  v2:= "n >= required but it was " @kind object;
  #L4a80fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a8104.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a810a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a8110.  v5:= temp @kind object;
  #L4a8112.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a8118.  throw v0;
  catch `java.lang.Throwable` @[L4a80b8..L4a80d8] goto L4a80d4;
}
procedure `void` `setProducer`(`rx.internal.operators.OperatorScan$InitialProducer` v6 @kind this, `rx.Producer` v7 @kind object) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a8138.  if v7 == 0 then goto L4a81a0;
  #L4a813c.  v0:= v6.`rx.internal.operators.OperatorScan$InitialProducer.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a8140.  @monitorenter v0
  #L4a8142.  v1:= v6.`rx.internal.operators.OperatorScan$InitialProducer.producer` @type ^`rx.Producer` @kind object;
  #L4a8146.  if v1 != 0 then goto L4a818a;
  #L4a814a.  v1:= v6.`rx.internal.operators.OperatorScan$InitialProducer.missedRequested` @type ^`long` @kind wide;
  #L4a814e.  v3:= 9223372036854775807L;
  #L4a8158.  v5:= lcmp(v1, v3);
  #L4a815c.  if v5 == 0 then goto L4a8166;
  #L4a8160.  v3:= 1L;
  #L4a8164.  v1:= v1 - v3 @kind long;
  #L4a8166.  v3:= 0L;
  #L4a816a.  v6.`rx.internal.operators.OperatorScan$InitialProducer.missedRequested` @type ^`long` := v3 @kind wide;
  #L4a816e.  v6.`rx.internal.operators.OperatorScan$InitialProducer.producer` @type ^`rx.Producer` := v7 @kind object;
  #L4a8172.  @monitorexit v0
  #L4a8174.  v0:= lcmp(v1, v3);
  #L4a8178.  if v0 <= 0 then goto L4a8182;
  #L4a817c.  call `request`(v7, v1) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L4a8182.  call `emit`(v6) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.emit:()V` @kind virtual;
  #L4a8188.  return @kind void;
  #L4a818a.  v7:= new `java.lang.IllegalStateException`;
  #L4a818e.  v1:= "Can't set more than one Producer!" @kind object;
  #L4a8192.  call `<init>`(v7, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a8198.  throw v7;
  #L4a819a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a819c.  @monitorexit v0
  #L4a819e.  throw v7;
  #L4a81a0.  v7:= new `java.lang.NullPointerException`;
  #L4a81a4.  call `<init>`(v7) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L4a81aa.  throw v7;
  catch `java.lang.Throwable` @[L4a8142..L4a8174] goto L4a819a;
  catch `java.lang.Throwable` @[L4a818a..L4a819e] goto L4a819a;
}
