record `rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture$1` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture` `rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture$1` v0 @kind this, `rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeToObservableFuture$ToObservableFuture$1;.<init>:(Lrx/internal/operators/OnSubscribeToObservableFuture$ToObservableFuture;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49d8d0.  v0.`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture$1.this$0` @type ^`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture` := v1 @kind object;
  #L49d8d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49d8da.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture$1` v2 @kind this) @signature `Lrx/internal/operators/OnSubscribeToObservableFuture$ToObservableFuture$1;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49d8ec.  v0:= v2.`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture$1.this$0` @type ^`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture` @kind object;
  #L49d8f0.  v0:= v0.`rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture.that` @type ^`java.util.concurrent.Future` @kind object;
  #L49d8f4.  v1:= 1I;
  #L49d8f6.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L49d8fc.  return @kind void;
}
