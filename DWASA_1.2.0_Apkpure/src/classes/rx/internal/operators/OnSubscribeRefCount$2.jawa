record `rx.internal.operators.OnSubscribeRefCount$2` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `rx.internal.operators.OnSubscribeRefCount` `rx.internal.operators.OnSubscribeRefCount$2.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.subscriptions.CompositeSubscription` `rx.internal.operators.OnSubscribeRefCount$2.val$currentBase` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OnSubscribeRefCount$2.val$subscriber` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeRefCount$2` v0 @kind this, `rx.internal.operators.OnSubscribeRefCount` v1 @kind object, `rx.Subscriber` v2 @kind object, `rx.Subscriber` v3 @kind object, `rx.subscriptions.CompositeSubscription` v4 @kind object) @signature `Lrx/internal/operators/OnSubscribeRefCount$2;.<init>:(Lrx/internal/operators/OnSubscribeRefCount;Lrx/Subscriber;Lrx/Subscriber;Lrx/subscriptions/CompositeSubscription;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49cb14.  v0.`rx.internal.operators.OnSubscribeRefCount$2.this$0` @type ^`rx.internal.operators.OnSubscribeRefCount` := v1 @kind object;
  #L49cb18.  v0.`rx.internal.operators.OnSubscribeRefCount$2.val$subscriber` @type ^`rx.Subscriber` := v3 @kind object;
  #L49cb1c.  v0.`rx.internal.operators.OnSubscribeRefCount$2.val$currentBase` @type ^`rx.subscriptions.CompositeSubscription` := v4 @kind object;
  #L49cb20.  call `<init>`(v0, v2) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L49cb26.  return @kind void;
}
procedure `void` `cleanup`(`rx.internal.operators.OnSubscribeRefCount$2` v2 @kind this) @signature `Lrx/internal/operators/OnSubscribeRefCount$2;.cleanup:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L49cb38.  v0:= v2.`rx.internal.operators.OnSubscribeRefCount$2.this$0` @type ^`rx.internal.operators.OnSubscribeRefCount` @kind object;
  #L49cb3c.  v0:= v0.`rx.internal.operators.OnSubscribeRefCount.lock` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L49cb40.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.lock:()V` @kind virtual;
  #L49cb46.  v0:= v2.`rx.internal.operators.OnSubscribeRefCount$2.this$0` @type ^`rx.internal.operators.OnSubscribeRefCount` @kind object;
  #L49cb4a.  v0:= v0.`rx.internal.operators.OnSubscribeRefCount.baseSubscription` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49cb4e.  v1:= v2.`rx.internal.operators.OnSubscribeRefCount$2.val$currentBase` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49cb52.  if v0 != v1 then goto L49cb86;
  #L49cb56.  v0:= v2.`rx.internal.operators.OnSubscribeRefCount$2.this$0` @type ^`rx.internal.operators.OnSubscribeRefCount` @kind object;
  #L49cb5a.  v0:= v0.`rx.internal.operators.OnSubscribeRefCount.baseSubscription` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L49cb5e.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.unsubscribe:()V` @kind virtual;
  #L49cb64.  v0:= v2.`rx.internal.operators.OnSubscribeRefCount$2.this$0` @type ^`rx.internal.operators.OnSubscribeRefCount` @kind object;
  #L49cb68.  v1:= new `rx.subscriptions.CompositeSubscription`;
  #L49cb6c.  call `<init>`(v1) @signature `Lrx/subscriptions/CompositeSubscription;.<init>:()V` @kind direct;
  #L49cb72.  v0.`rx.internal.operators.OnSubscribeRefCount.baseSubscription` @type ^`rx.subscriptions.CompositeSubscription` := v1 @kind object;
  #L49cb76.  v0:= v2.`rx.internal.operators.OnSubscribeRefCount$2.this$0` @type ^`rx.internal.operators.OnSubscribeRefCount` @kind object;
  #L49cb7a.  v0:= v0.`rx.internal.operators.OnSubscribeRefCount.subscriptionCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L49cb7e.  v1:= 0I;
  #L49cb80.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L49cb86.  v0:= v2.`rx.internal.operators.OnSubscribeRefCount$2.this$0` @type ^`rx.internal.operators.OnSubscribeRefCount` @kind object;
  #L49cb8a.  v0:= v0.`rx.internal.operators.OnSubscribeRefCount.lock` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L49cb8e.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L49cb94.  return @kind void;
  #L49cb96.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49cb98.  v1:= v2.`rx.internal.operators.OnSubscribeRefCount$2.this$0` @type ^`rx.internal.operators.OnSubscribeRefCount` @kind object;
  #L49cb9c.  v1:= v1.`rx.internal.operators.OnSubscribeRefCount.lock` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L49cba0.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantLock;.unlock:()V` @kind virtual;
  #L49cba6.  throw v0;
  catch `java.lang.Throwable` @[L49cb46..L49cb86] goto L49cb96;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeRefCount$2` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeRefCount$2;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49cbc4.  call `cleanup`(v1) @signature `Lrx/internal/operators/OnSubscribeRefCount$2;.cleanup:()V` @kind virtual;
  #L49cbca.  v0:= v1.`rx.internal.operators.OnSubscribeRefCount$2.val$subscriber` @type ^`rx.Subscriber` @kind object;
  #L49cbce.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49cbd4.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeRefCount$2` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeRefCount$2;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49cbe8.  call `cleanup`(v1) @signature `Lrx/internal/operators/OnSubscribeRefCount$2;.cleanup:()V` @kind virtual;
  #L49cbee.  v0:= v1.`rx.internal.operators.OnSubscribeRefCount$2.val$subscriber` @type ^`rx.Subscriber` @kind object;
  #L49cbf2.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49cbf8.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeRefCount$2` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeRefCount$2;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49cc0c.  v0:= v1.`rx.internal.operators.OnSubscribeRefCount$2.val$subscriber` @type ^`rx.Subscriber` @kind object;
  #L49cc10.  call `onNext`(v0, v2) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49cc16.  return @kind void;
}
