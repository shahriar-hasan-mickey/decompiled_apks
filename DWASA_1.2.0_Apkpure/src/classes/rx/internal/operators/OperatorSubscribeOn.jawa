record `rx.internal.operators.OperatorSubscribeOn` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.Scheduler` `rx.internal.operators.OperatorSubscribeOn.scheduler` @AccessFlag FINAL;
  `rx.Observable` `rx.internal.operators.OperatorSubscribeOn.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSubscribeOn` v0 @kind this, `rx.Observable` v1 @kind object, `rx.Scheduler` v2 @kind object) @signature `Lrx/internal/operators/OperatorSubscribeOn;.<init>:(Lrx/Observable;Lrx/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a910c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a9112.  v0.`rx.internal.operators.OperatorSubscribeOn.scheduler` @type ^`rx.Scheduler` := v2 @kind object;
  #L4a9116.  v0.`rx.internal.operators.OperatorSubscribeOn.source` @type ^`rx.Observable` := v1 @kind object;
  #L4a911a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorSubscribeOn` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorSubscribeOn;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a912c.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a9130.  call `call`(v0, v1) @signature `Lrx/internal/operators/OperatorSubscribeOn;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L4a9136.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorSubscribeOn` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorSubscribeOn;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a9148.  v0:= v2.`rx.internal.operators.OperatorSubscribeOn.scheduler` @type ^`rx.Scheduler` @kind object;
  #L4a914c.  call temp:= `createWorker`(v0) @signature `Lrx/Scheduler;.createWorker:()Lrx/Scheduler$Worker;` @kind virtual;
  #L4a9152.  v0:= temp @kind object;
  #L4a9154.  call `add`(v3, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a915a.  v1:= new `rx.internal.operators.OperatorSubscribeOn$1`;
  #L4a915e.  call `<init>`(v1, v2, v3, v0) @signature `Lrx/internal/operators/OperatorSubscribeOn$1;.<init>:(Lrx/internal/operators/OperatorSubscribeOn;Lrx/Subscriber;Lrx/Scheduler$Worker;)V` @kind direct;
  #L4a9164.  call temp:= `schedule`(v0, v1) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;)Lrx/Subscription;` @kind virtual;
  #L4a916a.  return @kind void;
}
