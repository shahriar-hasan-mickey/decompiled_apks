record `rx.internal.operators.OnSubscribeSkipTimed$SkipTimedSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class, `rx.functions.Action0` @kind interface {
  `rx.Subscriber` `rx.internal.operators.OnSubscribeSkipTimed$SkipTimedSubscriber.child` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OnSubscribeSkipTimed$SkipTimedSubscriber.gate` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeSkipTimed$SkipTimedSubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeSkipTimed$SkipTimedSubscriber;.<init>:(Lrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49cfdc.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L49cfe2.  v0.`rx.internal.operators.OnSubscribeSkipTimed$SkipTimedSubscriber.child` @type ^`rx.Subscriber` := v1 @kind object;
  #L49cfe6.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeSkipTimed$SkipTimedSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeSkipTimed$SkipTimedSubscriber;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49cff8.  v0:= 1I;
  #L49cffa.  v1.`rx.internal.operators.OnSubscribeSkipTimed$SkipTimedSubscriber.gate` @type ^`boolean` := v0 @kind boolean;
  #L49cffe.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeSkipTimed$SkipTimedSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeSkipTimed$SkipTimedSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49d010.  v0:= v1.`rx.internal.operators.OnSubscribeSkipTimed$SkipTimedSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49d014.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49d01a.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OnSubscribeSkipTimed$SkipTimedSubscriber;.unsubscribe:()V` @kind virtual;
  #L49d020.  return @kind void;
  #L49d022.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49d024.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OnSubscribeSkipTimed$SkipTimedSubscriber;.unsubscribe:()V` @kind virtual;
  #L49d02a.  throw v0;
  catch `java.lang.Throwable` @[L49d010..L49d01a] goto L49d022;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeSkipTimed$SkipTimedSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeSkipTimed$SkipTimedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49d048.  v0:= v1.`rx.internal.operators.OnSubscribeSkipTimed$SkipTimedSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49d04c.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49d052.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OnSubscribeSkipTimed$SkipTimedSubscriber;.unsubscribe:()V` @kind virtual;
  #L49d058.  return @kind void;
  #L49d05a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49d05c.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OnSubscribeSkipTimed$SkipTimedSubscriber;.unsubscribe:()V` @kind virtual;
  #L49d062.  throw v2;
  catch `java.lang.Throwable` @[L49d048..L49d052] goto L49d05a;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeSkipTimed$SkipTimedSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeSkipTimed$SkipTimedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49d080.  v0:= v1.`rx.internal.operators.OnSubscribeSkipTimed$SkipTimedSubscriber.gate` @type ^`boolean` @kind boolean;
  #L49d084.  if v0 == 0 then goto L49d092;
  #L49d088.  v0:= v1.`rx.internal.operators.OnSubscribeSkipTimed$SkipTimedSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L49d08c.  call `onNext`(v0, v2) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49d092.  return @kind void;
}
