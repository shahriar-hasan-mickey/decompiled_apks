record `rx.internal.operators.OnSubscribeDefer` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.functions.Func0` `rx.internal.operators.OnSubscribeDefer.observableFactory` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeDefer` v0 @kind this, `rx.functions.Func0` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeDefer;.<init>:(Lrx/functions/Func0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L497b4c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L497b52.  v0.`rx.internal.operators.OnSubscribeDefer.observableFactory` @type ^`rx.functions.Func0` := v1 @kind object;
  #L497b56.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeDefer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeDefer;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L497b68.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L497b6c.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeDefer;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L497b72.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeDefer` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeDefer;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497b84.  v0:= v1.`rx.internal.operators.OnSubscribeDefer.observableFactory` @type ^`rx.functions.Func0` @kind object;
  #L497b88.  call temp:= `call`(v0) @signature `Lrx/functions/Func0;.call:()Ljava/lang/Object;` @kind interface;
  #L497b8e.  v0:= temp @kind object;
  #L497b90.  v0:= (`rx.Observable`) v0 @kind object;
  #L497b94.  call temp:= `wrap`(v2) @signature `Lrx/observers/Subscribers;.wrap:(Lrx/Subscriber;)Lrx/Subscriber;` @kind static;
  #L497b9a.  v2:= temp @kind object;
  #L497b9c.  call temp:= `unsafeSubscribe`(v0, v2) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L497ba2.  return @kind void;
  #L497ba4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L497ba6.  call `throwOrReport`(v0, v2) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L497bac.  return @kind void;
  catch `java.lang.Throwable` @[L497b84..L497b94] goto L497ba4;
}
