record `rx.internal.operators.OnSubscribeFromArray` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `java.lang.Object`[] `rx.internal.operators.OnSubscribeFromArray.array` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeFromArray` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromArray;.<init>:([Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L498d3c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L498d42.  v0.`rx.internal.operators.OnSubscribeFromArray.array` @type ^`java.lang.Object`[] := v1 @kind object;
  #L498d46.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeFromArray` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromArray;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L498d58.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L498d5c.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeFromArray;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L498d62.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeFromArray` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromArray;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L498d74.  v0:= new `rx.internal.operators.OnSubscribeFromArray$FromArrayProducer`;
  #L498d78.  v1:= v2.`rx.internal.operators.OnSubscribeFromArray.array` @type ^`java.lang.Object`[] @kind object;
  #L498d7c.  call `<init>`(v0, v3, v1) @signature `Lrx/internal/operators/OnSubscribeFromArray$FromArrayProducer;.<init>:(Lrx/Subscriber;[Ljava/lang/Object;)V` @kind direct;
  #L498d82.  call `setProducer`(v3, v0) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L498d88.  return @kind void;
}
