record `rx.internal.operators.OnSubscribeUsing` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.functions.Action1` `rx.internal.operators.OnSubscribeUsing.dispose` @AccessFlag PRIVATE_FINAL;
  `boolean` `rx.internal.operators.OnSubscribeUsing.disposeEagerly` @AccessFlag PRIVATE_FINAL;
  `rx.functions.Func1` `rx.internal.operators.OnSubscribeUsing.observableFactory` @AccessFlag PRIVATE_FINAL;
  `rx.functions.Func0` `rx.internal.operators.OnSubscribeUsing.resourceFactory` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeUsing` v0 @kind this, `rx.functions.Func0` v1 @kind object, `rx.functions.Func1` v2 @kind object, `rx.functions.Action1` v3 @kind object, `boolean` v4 ) @signature `Lrx/internal/operators/OnSubscribeUsing;.<init>:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49db50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49db56.  v0.`rx.internal.operators.OnSubscribeUsing.resourceFactory` @type ^`rx.functions.Func0` := v1 @kind object;
  #L49db5a.  v0.`rx.internal.operators.OnSubscribeUsing.observableFactory` @type ^`rx.functions.Func1` := v2 @kind object;
  #L49db5e.  v0.`rx.internal.operators.OnSubscribeUsing.dispose` @type ^`rx.functions.Action1` := v3 @kind object;
  #L49db62.  v0.`rx.internal.operators.OnSubscribeUsing.disposeEagerly` @type ^`boolean` := v4 @kind boolean;
  #L49db66.  return @kind void;
}
procedure `java.lang.Throwable` `dispose`(`rx.internal.operators.OnSubscribeUsing` v0 @kind this, `rx.functions.Action0` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeUsing;.dispose:(Lrx/functions/Action0;)Ljava/lang/Throwable;` @AccessFlag PRIVATE {
    temp;

  #L49db24.  call `call`(v1) @signature `Lrx/functions/Action0;.call:()V` @kind interface;
  #L49db2a.  v1:= 0I;
  #L49db2c.  return v1 @kind object;
  #L49db2e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49db30.  return v1 @kind object;
  catch `java.lang.Throwable` @[L49db24..L49db2a] goto L49db2e;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeUsing` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeUsing;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49db78.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L49db7c.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeUsing;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L49db82.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeUsing` v6 @kind this, `rx.Subscriber` v7 @kind object) @signature `Lrx/internal/operators/OnSubscribeUsing;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49db94.  v0:= v6.`rx.internal.operators.OnSubscribeUsing.resourceFactory` @type ^`rx.functions.Func0` @kind object;
  #L49db98.  call temp:= `call`(v0) @signature `Lrx/functions/Func0;.call:()Ljava/lang/Object;` @kind interface;
  #L49db9e.  v0:= temp @kind object;
  #L49dba0.  v1:= new `rx.internal.operators.OnSubscribeUsing$DisposeAction`;
  #L49dba4.  v2:= v6.`rx.internal.operators.OnSubscribeUsing.dispose` @type ^`rx.functions.Action1` @kind object;
  #L49dba8.  call `<init>`(v1, v2, v0) @signature `Lrx/internal/operators/OnSubscribeUsing$DisposeAction;.<init>:(Lrx/functions/Action1;Ljava/lang/Object;)V` @kind direct;
  #L49dbae.  call `add`(v7, v1) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49dbb4.  v2:= 1I;
  #L49dbb6.  v3:= 0I;
  #L49dbb8.  v4:= 2I;
  #L49dbba.  v5:= v6.`rx.internal.operators.OnSubscribeUsing.observableFactory` @type ^`rx.functions.Func1` @kind object;
  #L49dbbe.  call temp:= `call`(v5, v0) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49dbc4.  v0:= temp @kind object;
  #L49dbc6.  v0:= (`rx.Observable`) v0 @kind object;
  #L49dbca.  v5:= v6.`rx.internal.operators.OnSubscribeUsing.disposeEagerly` @type ^`boolean` @kind boolean;
  #L49dbce.  if v5 == 0 then goto L49dbdc;
  #L49dbd2.  call temp:= `doOnTerminate`(v0, v1) @signature `Lrx/Observable;.doOnTerminate:(Lrx/functions/Action0;)Lrx/Observable;` @kind virtual;
  #L49dbd8.  v0:= temp @kind object;
  #L49dbda.  goto L49dbe4;
  #L49dbdc.  call temp:= `doAfterTerminate`(v0, v1) @signature `Lrx/Observable;.doAfterTerminate:(Lrx/functions/Action0;)Lrx/Observable;` @kind virtual;
  #L49dbe2.  v0:= temp @kind object;
  #L49dbe4.  call temp:= `wrap`(v7) @signature `Lrx/observers/Subscribers;.wrap:(Lrx/Subscriber;)Lrx/Subscriber;` @kind static;
  #L49dbea.  v5:= temp @kind object;
  #L49dbec.  call temp:= `unsafeSubscribe`(v0, v5) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L49dbf2.  goto L49dc7c;
  #L49dbf4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49dbf6.  call temp:= `dispose`(v6, v1) @signature `Lrx/internal/operators/OnSubscribeUsing;.dispose:(Lrx/functions/Action0;)Ljava/lang/Throwable;` @kind direct;
  #L49dbfc.  v1:= temp @kind object;
  #L49dbfe.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49dc04.  call `throwIfFatal`(v1) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49dc0a.  if v1 == 0 then goto L49dc2c;
  #L49dc0e.  v5:= new `rx.exceptions.CompositeException`;
  #L49dc12.  v4:= new `java.lang.Throwable`[v4];
  #L49dc16.  v4[v3]:= v0 @kind object;
  #L49dc1a.  v4[v2]:= v1 @kind object;
  #L49dc1e.  call `<init>`(v5, v4) @signature `Lrx/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L49dc24.  call `onError`(v7, v5) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49dc2a.  goto L49dc7c;
  #L49dc2c.  call `onError`(v7, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49dc32.  goto L49dc7c;
  #L49dc34.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49dc36.  call temp:= `dispose`(v6, v1) @signature `Lrx/internal/operators/OnSubscribeUsing;.dispose:(Lrx/functions/Action0;)Ljava/lang/Throwable;` @kind direct;
  #L49dc3c.  v1:= temp @kind object;
  #L49dc3e.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49dc44.  call `throwIfFatal`(v1) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49dc4a.  if v1 == 0 then goto L49dc6c;
  #L49dc4e.  v5:= new `rx.exceptions.CompositeException`;
  #L49dc52.  v4:= new `java.lang.Throwable`[v4];
  #L49dc56.  v4[v3]:= v0 @kind object;
  #L49dc5a.  v4[v2]:= v1 @kind object;
  #L49dc5e.  call `<init>`(v5, v4) @signature `Lrx/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L49dc64.  call `onError`(v7, v5) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49dc6a.  goto L49dc72;
  #L49dc6c.  call `onError`(v7, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49dc72.  return @kind void;
  #L49dc74.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49dc76.  call `throwOrReport`(v0, v7) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L49dc7c.  return @kind void;
  catch `java.lang.Throwable` @[L49db94..L49dbb4] goto L49dc74;
  catch `java.lang.Throwable` @[L49dbba..L49dbca] goto L49dc34;
  catch `java.lang.Throwable` @[L49dbca..L49dbe4] goto L49dc74;
  catch `java.lang.Throwable` @[L49dbe4..L49dbf2] goto L49dbf4;
  catch `java.lang.Throwable` @[L49dbf6..L49dc72] goto L49dc74;
}
