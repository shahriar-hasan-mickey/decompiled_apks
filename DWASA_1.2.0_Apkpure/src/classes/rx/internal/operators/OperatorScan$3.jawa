record `rx.internal.operators.OperatorScan$3` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `rx.internal.operators.OperatorScan` `rx.internal.operators.OperatorScan$3.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `rx.internal.operators.OperatorScan$3.val$initialValue` @AccessFlag FINAL_SYNTHETIC;
  `rx.internal.operators.OperatorScan$InitialProducer` `rx.internal.operators.OperatorScan$3.val$ip` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `rx.internal.operators.OperatorScan$3.value` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorScan$3` v0 @kind this, `rx.internal.operators.OperatorScan` v1 @kind object, `java.lang.Object` v2 @kind object, `rx.internal.operators.OperatorScan$InitialProducer` v3 @kind object) @signature `Lrx/internal/operators/OperatorScan$3;.<init>:(Lrx/internal/operators/OperatorScan;Ljava/lang/Object;Lrx/internal/operators/OperatorScan$InitialProducer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a7d68.  v0.`rx.internal.operators.OperatorScan$3.this$0` @type ^`rx.internal.operators.OperatorScan` := v1 @kind object;
  #L4a7d6c.  v0.`rx.internal.operators.OperatorScan$3.val$initialValue` @type ^`java.lang.Object` := v2 @kind object;
  #L4a7d70.  v0.`rx.internal.operators.OperatorScan$3.val$ip` @type ^`rx.internal.operators.OperatorScan$InitialProducer` := v3 @kind object;
  #L4a7d74.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a7d7a.  v1:= v0.`rx.internal.operators.OperatorScan$3.val$initialValue` @type ^`java.lang.Object` @kind object;
  #L4a7d7e.  v0.`rx.internal.operators.OperatorScan$3.value` @type ^`java.lang.Object` := v1 @kind object;
  #L4a7d82.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorScan$3` v1 @kind this) @signature `Lrx/internal/operators/OperatorScan$3;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a7d94.  v0:= v1.`rx.internal.operators.OperatorScan$3.val$ip` @type ^`rx.internal.operators.OperatorScan$InitialProducer` @kind object;
  #L4a7d98.  call `onCompleted`(v0) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.onCompleted:()V` @kind virtual;
  #L4a7d9e.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorScan$3` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorScan$3;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a7db0.  v0:= v1.`rx.internal.operators.OperatorScan$3.val$ip` @type ^`rx.internal.operators.OperatorScan$InitialProducer` @kind object;
  #L4a7db4.  call `onError`(v0, v2) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a7dba.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorScan$3` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OperatorScan$3;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a7dcc.  v0:= v2.`rx.internal.operators.OperatorScan$3.value` @type ^`java.lang.Object` @kind object;
  #L4a7dd0.  v1:= v2.`rx.internal.operators.OperatorScan$3.this$0` @type ^`rx.internal.operators.OperatorScan` @kind object;
  #L4a7dd4.  v1:= v1.`rx.internal.operators.OperatorScan.accumulator` @type ^`rx.functions.Func2` @kind object;
  #L4a7dd8.  call temp:= `call`(v1, v0, v3) @signature `Lrx/functions/Func2;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a7dde.  v3:= temp @kind object;
  #L4a7de0.  v2.`rx.internal.operators.OperatorScan$3.value` @type ^`java.lang.Object` := v3 @kind object;
  #L4a7de4.  v0:= v2.`rx.internal.operators.OperatorScan$3.val$ip` @type ^`rx.internal.operators.OperatorScan$InitialProducer` @kind object;
  #L4a7de8.  call `onNext`(v0, v3) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a7dee.  return @kind void;
  #L4a7df0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a7df2.  call `throwOrReport`(v0, v2, v3) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4a7df8.  return @kind void;
  catch `java.lang.Throwable` @[L4a7dd0..L4a7de0] goto L4a7df0;
}
procedure `void` `setProducer`(`rx.internal.operators.OperatorScan$3` v1 @kind this, `rx.Producer` v2 @kind object) @signature `Lrx/internal/operators/OperatorScan$3;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a7e18.  v0:= v1.`rx.internal.operators.OperatorScan$3.val$ip` @type ^`rx.internal.operators.OperatorScan$InitialProducer` @kind object;
  #L4a7e1c.  call `setProducer`(v0, v2) @signature `Lrx/internal/operators/OperatorScan$InitialProducer;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a7e22.  return @kind void;
}
