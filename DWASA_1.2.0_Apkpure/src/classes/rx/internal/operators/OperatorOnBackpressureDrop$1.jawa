record `rx.internal.operators.OperatorOnBackpressureDrop$1` @kind class @AccessFlag  extends `rx.Producer` @kind interface {
  `rx.internal.operators.OperatorOnBackpressureDrop` `rx.internal.operators.OperatorOnBackpressureDrop$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OperatorOnBackpressureDrop$1.val$requested` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorOnBackpressureDrop$1` v0 @kind this, `rx.internal.operators.OperatorOnBackpressureDrop` v1 @kind object, `java.util.concurrent.atomic.AtomicLong` v2 @kind object) @signature `Lrx/internal/operators/OperatorOnBackpressureDrop$1;.<init>:(Lrx/internal/operators/OperatorOnBackpressureDrop;Ljava/util/concurrent/atomic/AtomicLong;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a47ec.  v0.`rx.internal.operators.OperatorOnBackpressureDrop$1.this$0` @type ^`rx.internal.operators.OperatorOnBackpressureDrop` := v1 @kind object;
  #L4a47f0.  v0.`rx.internal.operators.OperatorOnBackpressureDrop$1.val$requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4a47f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a47fa.  return @kind void;
}
procedure `void` `request`(`rx.internal.operators.OperatorOnBackpressureDrop$1` v1 @kind this, `long` v2 ) @signature `Lrx/internal/operators/OperatorOnBackpressureDrop$1;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a480c.  v0:= v1.`rx.internal.operators.OperatorOnBackpressureDrop$1.val$requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a4810.  call temp:= `getAndAddRequest`(v0, v2) @signature `Lrx/internal/operators/BackpressureUtils;.getAndAddRequest:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a4816.  return @kind void;
}
