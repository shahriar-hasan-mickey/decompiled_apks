record `rx.internal.operators.OperatorSkipUntil` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `rx.Observable` `rx.internal.operators.OperatorSkipUntil.other` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSkipUntil` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/internal/operators/OperatorSkipUntil;.<init>:(Lrx/Observable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a8c8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a8c92.  v0.`rx.internal.operators.OperatorSkipUntil.other` @type ^`rx.Observable` := v1 @kind object;
  #L4a8c96.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorSkipUntil` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorSkipUntil;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a8c20.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a8c24.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorSkipUntil;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a8c2a.  v1:= temp @kind object;
  #L4a8c2c.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorSkipUntil` v4 @kind this, `rx.Subscriber` v5 @kind object) @signature `Lrx/internal/operators/OperatorSkipUntil;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a8c40.  v0:= new `rx.observers.SerializedSubscriber`;
  #L4a8c44.  call `<init>`(v0, v5) @signature `Lrx/observers/SerializedSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4a8c4a.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4a8c4e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4a8c54.  v2:= new `rx.internal.operators.OperatorSkipUntil$1`;
  #L4a8c58.  call `<init>`(v2, v4, v1, v0) @signature `Lrx/internal/operators/OperatorSkipUntil$1;.<init>:(Lrx/internal/operators/OperatorSkipUntil;Ljava/util/concurrent/atomic/AtomicBoolean;Lrx/observers/SerializedSubscriber;)V` @kind direct;
  #L4a8c5e.  call `add`(v5, v2) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a8c64.  v3:= v4.`rx.internal.operators.OperatorSkipUntil.other` @type ^`rx.Observable` @kind object;
  #L4a8c68.  call temp:= `unsafeSubscribe`(v3, v2) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4a8c6e.  v2:= new `rx.internal.operators.OperatorSkipUntil$2`;
  #L4a8c72.  call `<init>`(v2, v4, v5, v1, v0) @signature `Lrx/internal/operators/OperatorSkipUntil$2;.<init>:(Lrx/internal/operators/OperatorSkipUntil;Lrx/Subscriber;Ljava/util/concurrent/atomic/AtomicBoolean;Lrx/observers/SerializedSubscriber;)V` @kind direct;
  #L4a8c78.  return v2 @kind object;
}
