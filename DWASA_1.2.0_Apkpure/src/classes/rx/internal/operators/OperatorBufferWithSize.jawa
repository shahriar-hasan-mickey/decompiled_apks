record `rx.internal.operators.OperatorBufferWithSize` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `int` `rx.internal.operators.OperatorBufferWithSize.count` @AccessFlag FINAL;
  `int` `rx.internal.operators.OperatorBufferWithSize.skip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorBufferWithSize` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lrx/internal/operators/OperatorBufferWithSize;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49eb44.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49eb4a.  if v1 <= 0 then goto L49eb6c;
  #L49eb4e.  if v2 <= 0 then goto L49eb5c;
  #L49eb52.  v0.`rx.internal.operators.OperatorBufferWithSize.count` @type ^`int` := v1;
  #L49eb56.  v0.`rx.internal.operators.OperatorBufferWithSize.skip` @type ^`int` := v2;
  #L49eb5a.  return @kind void;
  #L49eb5c.  v1:= new `java.lang.IllegalArgumentException`;
  #L49eb60.  v2:= "skip must be greater than 0" @kind object;
  #L49eb64.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49eb6a.  throw v1;
  #L49eb6c.  v1:= new `java.lang.IllegalArgumentException`;
  #L49eb70.  v2:= "count must be greater than 0" @kind object;
  #L49eb74.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49eb7a.  throw v1;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorBufferWithSize` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithSize;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49eaa4.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L49eaa8.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorBufferWithSize;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L49eaae.  v1:= temp @kind object;
  #L49eab0.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorBufferWithSize` v3 @kind this, `rx.Subscriber` v4 @kind object) @signature `Lrx/internal/operators/OperatorBufferWithSize;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49eac4.  v0:= v3.`rx.internal.operators.OperatorBufferWithSize.skip` @type ^`int`;
  #L49eac8.  v1:= v3.`rx.internal.operators.OperatorBufferWithSize.count` @type ^`int`;
  #L49eacc.  if v0 != v1 then goto L49eaf0;
  #L49ead0.  v0:= new `rx.internal.operators.OperatorBufferWithSize$BufferExact`;
  #L49ead4.  call `<init>`(v0, v4, v1) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferExact;.<init>:(Lrx/Subscriber;I)V` @kind direct;
  #L49eada.  call `add`(v4, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49eae0.  call temp:= `createProducer`(v0) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferExact;.createProducer:()Lrx/Producer;` @kind virtual;
  #L49eae6.  v1:= temp @kind object;
  #L49eae8.  call `setProducer`(v4, v1) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L49eaee.  return v0 @kind object;
  #L49eaf0.  if v0 <= v1 then goto L49eb14;
  #L49eaf4.  v2:= new `rx.internal.operators.OperatorBufferWithSize$BufferSkip`;
  #L49eaf8.  call `<init>`(v2, v4, v1, v0) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;.<init>:(Lrx/Subscriber;II)V` @kind direct;
  #L49eafe.  call `add`(v4, v2) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49eb04.  call temp:= `createProducer`(v2) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferSkip;.createProducer:()Lrx/Producer;` @kind virtual;
  #L49eb0a.  v0:= temp @kind object;
  #L49eb0c.  call `setProducer`(v4, v0) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L49eb12.  return v2 @kind object;
  #L49eb14.  v2:= new `rx.internal.operators.OperatorBufferWithSize$BufferOverlap`;
  #L49eb18.  call `<init>`(v2, v4, v1, v0) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;.<init>:(Lrx/Subscriber;II)V` @kind direct;
  #L49eb1e.  call `add`(v4, v2) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L49eb24.  call temp:= `createProducer`(v2) @signature `Lrx/internal/operators/OperatorBufferWithSize$BufferOverlap;.createProducer:()Lrx/Producer;` @kind virtual;
  #L49eb2a.  v0:= temp @kind object;
  #L49eb2c.  call `setProducer`(v4, v0) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L49eb32.  return v2 @kind object;
}
