record `rx.internal.operators.OperatorSequenceEqual` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.Object` `@@rx.internal.operators.OperatorSequenceEqual.LOCAL_ON_COMPLETED` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OperatorSequenceEqual;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a83d0.  v0:= new `java.lang.Object`;
  #L4a83d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a83da.  `@@rx.internal.operators.OperatorSequenceEqual.LOCAL_ON_COMPLETED` @type ^`java.lang.Object` := v0 @kind object;
  #L4a83de.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSequenceEqual` v2 @kind this) @signature `Lrx/internal/operators/OperatorSequenceEqual;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4a83f0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a83f6.  v0:= new `java.lang.IllegalStateException`;
  #L4a83fa.  v1:= "No instances!" @kind object;
  #L4a83fe.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a8404.  throw v0;
}
procedure `rx.Observable` `materializeLite`(`rx.Observable` v1 @kind object) @signature `Lrx/internal/operators/OperatorSequenceEqual;.materializeLite:(Lrx/Observable;)Lrx/Observable;` @AccessFlag STATIC {
    temp;
    v0;

  #L4a8364.  v0:= `@@rx.internal.operators.OperatorSequenceEqual.LOCAL_ON_COMPLETED` @type ^`java.lang.Object` @kind object;
  #L4a8368.  call temp:= `just`(v0) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L4a836e.  v0:= temp @kind object;
  #L4a8370.  call temp:= `concat`(v1, v0) @signature `Lrx/Observable;.concat:(Lrx/Observable;Lrx/Observable;)Lrx/Observable;` @kind static;
  #L4a8376.  v1:= temp @kind object;
  #L4a8378.  return v1 @kind object;
}
procedure `rx.Observable` `sequenceEqual`(`rx.Observable` v1 @kind object, `rx.Observable` v2 @kind object, `rx.functions.Func2` v3 @kind object) @signature `Lrx/internal/operators/OperatorSequenceEqual;.sequenceEqual:(Lrx/Observable;Lrx/Observable;Lrx/functions/Func2;)Lrx/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4a838c.  call temp:= `materializeLite`(v1) @signature `Lrx/internal/operators/OperatorSequenceEqual;.materializeLite:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L4a8392.  v1:= temp @kind object;
  #L4a8394.  call temp:= `materializeLite`(v2) @signature `Lrx/internal/operators/OperatorSequenceEqual;.materializeLite:(Lrx/Observable;)Lrx/Observable;` @kind static;
  #L4a839a.  v2:= temp @kind object;
  #L4a839c.  v0:= new `rx.internal.operators.OperatorSequenceEqual$1`;
  #L4a83a0.  call `<init>`(v0, v3) @signature `Lrx/internal/operators/OperatorSequenceEqual$1;.<init>:(Lrx/functions/Func2;)V` @kind direct;
  #L4a83a6.  call temp:= `zip`(v1, v2, v0) @signature `Lrx/Observable;.zip:(Lrx/Observable;Lrx/Observable;Lrx/functions/Func2;)Lrx/Observable;` @kind static;
  #L4a83ac.  v1:= temp @kind object;
  #L4a83ae.  call temp:= `identity`() @signature `Lrx/internal/util/UtilityFunctions;.identity:()Lrx/functions/Func1;` @kind static;
  #L4a83b4.  v2:= temp @kind object;
  #L4a83b6.  call temp:= `all`(v1, v2) @signature `Lrx/Observable;.all:(Lrx/functions/Func1;)Lrx/Observable;` @kind virtual;
  #L4a83bc.  v1:= temp @kind object;
  #L4a83be.  return v1 @kind object;
}
