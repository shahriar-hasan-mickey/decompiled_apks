record `rx.internal.operators.SingleOnSubscribeUsing` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Single$OnSubscribe` @kind interface {
  `rx.functions.Action1` `rx.internal.operators.SingleOnSubscribeUsing.disposeAction` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.SingleOnSubscribeUsing.disposeEagerly` @AccessFlag FINAL;
  `rx.functions.Func0` `rx.internal.operators.SingleOnSubscribeUsing.resourceFactory` @AccessFlag FINAL;
  `rx.functions.Func1` `rx.internal.operators.SingleOnSubscribeUsing.singleFactory` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleOnSubscribeUsing` v0 @kind this, `rx.functions.Func0` v1 @kind object, `rx.functions.Func1` v2 @kind object, `rx.functions.Action1` v3 @kind object, `boolean` v4 ) @signature `Lrx/internal/operators/SingleOnSubscribeUsing;.<init>:(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b0164.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b016a.  v0.`rx.internal.operators.SingleOnSubscribeUsing.resourceFactory` @type ^`rx.functions.Func0` := v1 @kind object;
  #L4b016e.  v0.`rx.internal.operators.SingleOnSubscribeUsing.singleFactory` @type ^`rx.functions.Func1` := v2 @kind object;
  #L4b0172.  v0.`rx.internal.operators.SingleOnSubscribeUsing.disposeAction` @type ^`rx.functions.Action1` := v3 @kind object;
  #L4b0176.  v0.`rx.internal.operators.SingleOnSubscribeUsing.disposeEagerly` @type ^`boolean` := v4 @kind boolean;
  #L4b017a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleOnSubscribeUsing` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/SingleOnSubscribeUsing;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4b018c.  v1:= (`rx.SingleSubscriber`) v1 @kind object;
  #L4b0190.  call `call`(v0, v1) @signature `Lrx/internal/operators/SingleOnSubscribeUsing;.call:(Lrx/SingleSubscriber;)V` @kind virtual;
  #L4b0196.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleOnSubscribeUsing` v3 @kind this, `rx.SingleSubscriber` v4 @kind object) @signature `Lrx/internal/operators/SingleOnSubscribeUsing;.call:(Lrx/SingleSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b01a8.  v0:= v3.`rx.internal.operators.SingleOnSubscribeUsing.resourceFactory` @type ^`rx.functions.Func0` @kind object;
  #L4b01ac.  call temp:= `call`(v0) @signature `Lrx/functions/Func0;.call:()Ljava/lang/Object;` @kind interface;
  #L4b01b2.  v0:= temp @kind object;
  #L4b01b4.  v1:= v3.`rx.internal.operators.SingleOnSubscribeUsing.singleFactory` @type ^`rx.functions.Func1` @kind object;
  #L4b01b8.  call temp:= `call`(v1, v0) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b01be.  v1:= temp @kind object;
  #L4b01c0.  v1:= (`rx.Single`) v1 @kind object;
  #L4b01c4.  if v1 != 0 then goto L4b01de;
  #L4b01c8.  v1:= new `java.lang.NullPointerException`;
  #L4b01cc.  v2:= "The single" @kind object;
  #L4b01d0.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b01d6.  call `handleSubscriptionTimeError`(v3, v4, v0, v1) @signature `Lrx/internal/operators/SingleOnSubscribeUsing;.handleSubscriptionTimeError:(Lrx/SingleSubscriber;Ljava/lang/Object;Ljava/lang/Throwable;)V` @kind virtual;
  #L4b01dc.  return @kind void;
  #L4b01de.  v2:= new `rx.internal.operators.SingleOnSubscribeUsing$1`;
  #L4b01e2.  call `<init>`(v2, v3, v0, v4) @signature `Lrx/internal/operators/SingleOnSubscribeUsing$1;.<init>:(Lrx/internal/operators/SingleOnSubscribeUsing;Ljava/lang/Object;Lrx/SingleSubscriber;)V` @kind direct;
  #L4b01e8.  call `add`(v4, v2) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b01ee.  call temp:= `subscribe`(v1, v2) @signature `Lrx/Single;.subscribe:(Lrx/SingleSubscriber;)Lrx/Subscription;` @kind virtual;
  #L4b01f4.  return @kind void;
  #L4b01f6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b01f8.  call `handleSubscriptionTimeError`(v3, v4, v0, v1) @signature `Lrx/internal/operators/SingleOnSubscribeUsing;.handleSubscriptionTimeError:(Lrx/SingleSubscriber;Ljava/lang/Object;Ljava/lang/Throwable;)V` @kind virtual;
  #L4b01fe.  return @kind void;
  #L4b0200.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b0202.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b0208.  call `onError`(v4, v0) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b020e.  return @kind void;
  catch `java.lang.Throwable` @[L4b01a8..L4b01b4] goto L4b0200;
  catch `java.lang.Throwable` @[L4b01b4..L4b01c4] goto L4b01f6;
}
procedure `void` `handleSubscriptionTimeError`(`rx.internal.operators.SingleOnSubscribeUsing` v4 @kind this, `rx.SingleSubscriber` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Throwable` v7 @kind object) @signature `Lrx/internal/operators/SingleOnSubscribeUsing;.handleSubscriptionTimeError:(Lrx/SingleSubscriber;Ljava/lang/Object;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b0238.  call `throwIfFatal`(v7) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b023e.  v0:= v4.`rx.internal.operators.SingleOnSubscribeUsing.disposeEagerly` @type ^`boolean` @kind boolean;
  #L4b0242.  if v0 == 0 then goto L4b0280;
  #L4b0246.  v0:= v4.`rx.internal.operators.SingleOnSubscribeUsing.disposeAction` @type ^`rx.functions.Action1` @kind object;
  #L4b024a.  call `call`(v0, v6) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4b0250.  goto L4b0280;
  #L4b0252.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b0254.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b025a.  v1:= new `rx.exceptions.CompositeException`;
  #L4b025e.  v2:= 2I;
  #L4b0260.  v2:= new `java.lang.Throwable`[v2];
  #L4b0264.  v3:= 0I;
  #L4b0266.  v2[v3]:= v7 @kind object;
  #L4b026a.  v7:= 1I;
  #L4b026c.  v2[v7]:= v0 @kind object;
  #L4b0270.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4b0276.  v7:= temp @kind object;
  #L4b0278.  call `<init>`(v1, v7) @signature `Lrx/exceptions/CompositeException;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4b027e.  v7:= v1 @kind object;
  #L4b0280.  call `onError`(v5, v7) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b0286.  v5:= v4.`rx.internal.operators.SingleOnSubscribeUsing.disposeEagerly` @type ^`boolean` @kind boolean;
  #L4b028a.  if v5 != 0 then goto L4b02a8;
  #L4b028e.  v5:= v4.`rx.internal.operators.SingleOnSubscribeUsing.disposeAction` @type ^`rx.functions.Action1` @kind object;
  #L4b0292.  call `call`(v5, v6) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4b0298.  goto L4b02a8;
  #L4b029a.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b029c.  call `throwIfFatal`(v5) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b02a2.  call `onError`(v5) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b02a8.  return @kind void;
  catch `java.lang.Throwable` @[L4b0246..L4b0250] goto L4b0252;
  catch `java.lang.Throwable` @[L4b028e..L4b0298] goto L4b029a;
}
