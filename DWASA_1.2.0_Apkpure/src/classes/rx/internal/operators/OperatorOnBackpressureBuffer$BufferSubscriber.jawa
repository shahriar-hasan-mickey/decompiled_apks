record `rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class, `rx.internal.util.BackpressureDrainManager$BackpressureQueueCallback` @kind interface {
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.capacity` @AccessFlag PRIVATE_FINAL;
  `rx.Subscriber` `rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.child` @AccessFlag PRIVATE_FINAL;
  `rx.internal.util.BackpressureDrainManager` `rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.manager` @AccessFlag PRIVATE_FINAL;
  `rx.functions.Action0` `rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.onOverflow` @AccessFlag PRIVATE_FINAL;
  `rx.BackpressureOverflow$Strategy` `rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.overflowStrategy` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ConcurrentLinkedQueue` `rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.queue` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.saturated` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber` v2 @kind this, `rx.Subscriber` v3 @kind object, `java.lang.Long` v4 @kind object, `rx.functions.Action0` v5 @kind object, `rx.BackpressureOverflow$Strategy` v6 @kind object) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer$BufferSubscriber;.<init>:(Lrx/Subscriber;Ljava/lang/Long;Lrx/functions/Action0;Lrx/BackpressureOverflow$Strategy;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4a4528.  call `<init>`(v2) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a452e.  v0:= new `java.util.concurrent.ConcurrentLinkedQueue`;
  #L4a4532.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L4a4538.  v2.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.queue` @type ^`java.util.concurrent.ConcurrentLinkedQueue` := v0 @kind object;
  #L4a453c.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4a4540.  v1:= 0I;
  #L4a4542.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L4a4548.  v2.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.saturated` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4a454c.  v2.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.child` @type ^`rx.Subscriber` := v3 @kind object;
  #L4a4550.  if v4 == 0 then goto L4a4568;
  #L4a4554.  v3:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a4558.  call temp:= `longValue`(v4) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L4a455e.  v0:= temp @kind wide;
  #L4a4560.  call `<init>`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:(J)V` @kind direct;
  #L4a4566.  goto L4a456a;
  #L4a4568.  v3:= 0I;
  #L4a456a.  v2.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.capacity` @type ^`java.util.concurrent.atomic.AtomicLong` := v3 @kind object;
  #L4a456e.  v2.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.onOverflow` @type ^`rx.functions.Action0` := v5 @kind object;
  #L4a4572.  v3:= new `rx.internal.util.BackpressureDrainManager`;
  #L4a4576.  call `<init>`(v3, v2) @signature `Lrx/internal/util/BackpressureDrainManager;.<init>:(Lrx/internal/util/BackpressureDrainManager$BackpressureQueueCallback;)V` @kind direct;
  #L4a457c.  v2.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.manager` @type ^`rx.internal.util.BackpressureDrainManager` := v3 @kind object;
  #L4a4580.  v2.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.overflowStrategy` @type ^`rx.BackpressureOverflow$Strategy` := v6 @kind object;
  #L4a4584.  return @kind void;
}
procedure `boolean` `assertCapacity`(`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber` v6 @kind this) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer$BufferSubscriber;.assertCapacity:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a43e8.  v0:= v6.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.capacity` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a43ec.  v1:= 1I;
  #L4a43ee.  if v0 != 0 then goto L4a43f4;
  #L4a43f2.  return v1;
  #L4a43f4.  v0:= v6.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.capacity` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a43f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a43fe.  v2:= temp @kind wide;
  #L4a4400.  v4:= 0L;
  #L4a4404.  v0:= lcmp(v2, v4);
  #L4a4408.  if v0 > 0 then goto L4a447c;
  #L4a440c.  v0:= 0I;
  #L4a440e.  v4:= v6.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.overflowStrategy` @type ^`rx.BackpressureOverflow$Strategy` @kind object;
  #L4a4412.  call temp:= `mayAttemptDrop`(v4) @signature `Lrx/BackpressureOverflow$Strategy;.mayAttemptDrop:()Z` @kind interface;
  #L4a4418.  v4:= temp;
  #L4a441a.  if v4 == 0 then goto L4a4450;
  #L4a441e.  call temp:= `poll`(v6) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer$BufferSubscriber;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4a4424.  v4:= temp @kind object;
  #L4a4426.  if v4 == 0 then goto L4a4450;
  #L4a442a.  v4:= 1I;
  #L4a442c.  goto L4a4452;
  #L4a442e.  v4:= Exception @type ^`rx.exceptions.MissingBackpressureException` @kind object;
  #L4a4430.  v5:= v6.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.saturated` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a4434.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4a443a.  v5:= temp;
  #L4a443c.  if v5 == 0 then goto L4a4450;
  #L4a4440.  call `unsubscribe`(v6) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer$BufferSubscriber;.unsubscribe:()V` @kind virtual;
  #L4a4446.  v5:= v6.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a444a.  call `onError`(v5, v4) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a4450.  v4:= 0I;
  #L4a4452.  v5:= v6.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.onOverflow` @type ^`rx.functions.Action0` @kind object;
  #L4a4456.  if v5 == 0 then goto L4a4476;
  #L4a445a.  call `call`(v5) @signature `Lrx/functions/Action0;.call:()V` @kind interface;
  #L4a4460.  goto L4a4476;
  #L4a4462.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a4464.  call `throwIfFatal`(v1) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a446a.  v2:= v6.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.manager` @type ^`rx.internal.util.BackpressureDrainManager` @kind object;
  #L4a446e.  call `terminateAndDrain`(v2, v1) @signature `Lrx/internal/util/BackpressureDrainManager;.terminateAndDrain:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a4474.  return v0;
  #L4a4476.  if v4 != 0 then goto L4a447c;
  #L4a447a.  return v0;
  #L4a447c.  v0:= v6.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.capacity` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a4480.  v4:= 1L;
  #L4a4484.  v4:= v2 - v4 @kind long;
  #L4a4488.  call temp:= `compareAndSet`(v0, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a448e.  v0:= temp;
  #L4a4490.  if v0 == 0 then goto L4a43f4;
  #L4a4494.  return v1;
  catch `rx.exceptions.MissingBackpressureException` @[L4a440e..L4a4426] goto L4a442e;
  catch `java.lang.Throwable` @[L4a445a..L4a4460] goto L4a4462;
}
procedure `boolean` `accept`(`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer$BufferSubscriber;.accept:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a43c8.  v0:= v1.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a43cc.  call temp:= `accept`(v0, v2) @signature `Lrx/internal/operators/NotificationLite;.accept:(Lrx/Observer;Ljava/lang/Object;)Z` @kind static;
  #L4a43d2.  v2:= temp;
  #L4a43d4.  return v2;
}
procedure `void` `complete`(`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer$BufferSubscriber;.complete:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a4598.  if v2 == 0 then goto L4a45a8;
  #L4a459c.  v0:= v1.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a45a0.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a45a6.  goto L4a45b2;
  #L4a45a8.  v2:= v1.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.child` @type ^`rx.Subscriber` @kind object;
  #L4a45ac.  call `onCompleted`(v2) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a45b2.  return @kind void;
}
procedure `rx.Producer` `manager`(`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer$BufferSubscriber;.manager:()Lrx/Producer;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4a4510.  v0:= v1.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.manager` @type ^`rx.internal.util.BackpressureDrainManager` @kind object;
  #L4a4514.  return v0 @kind object;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer$BufferSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a45c4.  v0:= v1.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.saturated` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a45c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4a45ce.  v0:= temp;
  #L4a45d0.  if v0 != 0 then goto L4a45de;
  #L4a45d4.  v0:= v1.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.manager` @type ^`rx.internal.util.BackpressureDrainManager` @kind object;
  #L4a45d8.  call `terminateAndDrain`(v0) @signature `Lrx/internal/util/BackpressureDrainManager;.terminateAndDrain:()V` @kind virtual;
  #L4a45de.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer$BufferSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a45f0.  v0:= v1.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.saturated` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a45f4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4a45fa.  v0:= temp;
  #L4a45fc.  if v0 != 0 then goto L4a460a;
  #L4a4600.  v0:= v1.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.manager` @type ^`rx.internal.util.BackpressureDrainManager` @kind object;
  #L4a4604.  call `terminateAndDrain`(v0, v2) @signature `Lrx/internal/util/BackpressureDrainManager;.terminateAndDrain:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a460a.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer$BufferSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a461c.  call temp:= `assertCapacity`(v1) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer$BufferSubscriber;.assertCapacity:()Z` @kind direct;
  #L4a4622.  v0:= temp;
  #L4a4624.  if v0 != 0 then goto L4a462a;
  #L4a4628.  return @kind void;
  #L4a462a.  v0:= v1.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.queue` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L4a462e.  call temp:= `next`(v2) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4a4634.  v2:= temp @kind object;
  #L4a4636.  call temp:= `offer`(v0, v2) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4a463c.  v2:= v1.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.manager` @type ^`rx.internal.util.BackpressureDrainManager` @kind object;
  #L4a4640.  call `drain`(v2) @signature `Lrx/internal/util/BackpressureDrainManager;.drain:()V` @kind virtual;
  #L4a4646.  return @kind void;
}
procedure `void` `onStart`(`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer$BufferSubscriber;.onStart:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a4658.  v0:= 9223372036854775807L;
  #L4a4662.  call `request`(v2, v0) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer$BufferSubscriber;.request:(J)V` @kind virtual;
  #L4a4668.  return @kind void;
}
procedure `java.lang.Object` `peek`(`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer$BufferSubscriber;.peek:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a44c0.  v0:= v1.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.queue` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L4a44c4.  call temp:= `peek`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.peek:()Ljava/lang/Object;` @kind virtual;
  #L4a44ca.  v0:= temp @kind object;
  #L4a44cc.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorOnBackpressureBuffer$BufferSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a44e0.  v0:= v2.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.queue` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L4a44e4.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4a44ea.  v0:= temp @kind object;
  #L4a44ec.  v1:= v2.`rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber.capacity` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a44f0.  if v1 == 0 then goto L4a44fe;
  #L4a44f4.  if v0 == 0 then goto L4a44fe;
  #L4a44f8.  call temp:= `incrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.incrementAndGet:()J` @kind virtual;
  #L4a44fe.  return v0 @kind object;
}
