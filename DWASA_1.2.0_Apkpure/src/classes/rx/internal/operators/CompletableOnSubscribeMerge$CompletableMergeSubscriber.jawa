record `rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.CompletableSubscriber` `rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.actual` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.delayErrors` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.done` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.errors` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.once` @AccessFlag FINAL;
  `rx.subscriptions.CompositeSubscription` `rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.set` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.wip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber` v0 @kind this, `rx.CompletableSubscriber` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.<init>:(Lrx/CompletableSubscriber;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L494e90.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L494e96.  v0.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.actual` @type ^`rx.CompletableSubscriber` := v1 @kind object;
  #L494e9a.  v0.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L494e9e.  v1:= new `rx.subscriptions.CompositeSubscription`;
  #L494ea2.  call `<init>`(v1) @signature `Lrx/subscriptions/CompositeSubscription;.<init>:()V` @kind direct;
  #L494ea8.  v0.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.set` @type ^`rx.subscriptions.CompositeSubscription` := v1 @kind object;
  #L494eac.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L494eb0.  v3:= 1I;
  #L494eb2.  call `<init>`(v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L494eb8.  v0.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L494ebc.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L494ec0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L494ec6.  v0.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L494eca.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L494ece.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L494ed4.  v0.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.errors` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L494ed8.  v1:= 2147483647I;
  #L494ede.  if v2 != v1 then goto L494ef4;
  #L494ee2.  v1:= 9223372036854775807L;
  #L494eec.  call `request`(v0, v1) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.request:(J)V` @kind virtual;
  #L494ef2.  goto L494efc;
  #L494ef4.  v1:= (`long`) v2 @kind i2l;
  #L494ef6.  call `request`(v0, v1) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.request:(J)V` @kind virtual;
  #L494efc.  return @kind void;
}
procedure `void` `access$000`(`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber` v0 @kind object, `long` v1 ) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.access$000:(Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;J)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L494f10.  call `request`(v0, v1) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.request:(J)V` @kind virtual;
  #L494f16.  return @kind void;
}
procedure `void` `access$100`(`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber` v0 @kind object, `long` v1 ) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.access$100:(Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;J)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L494f28.  call `request`(v0, v1) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.request:(J)V` @kind virtual;
  #L494f2e.  return @kind void;
}
procedure `java.util.Queue` `getOrCreateErrors`(`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber` v3 @kind this) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.getOrCreateErrors:()Ljava/util/Queue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L494e38.  v0:= v3.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.errors` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L494e3c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L494e42.  v0:= temp @kind object;
  #L494e44.  v0:= (`java.util.Queue`) v0 @kind object;
  #L494e48.  if v0 == 0 then goto L494e4e;
  #L494e4c.  return v0 @kind object;
  #L494e4e.  v0:= new `java.util.concurrent.ConcurrentLinkedQueue`;
  #L494e52.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L494e58.  v1:= v3.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.errors` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L494e5c.  v2:= 0I;
  #L494e5e.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L494e64.  v1:= temp;
  #L494e66.  if v1 == 0 then goto L494e6c;
  #L494e6a.  return v0 @kind object;
  #L494e6c.  v0:= v3.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.errors` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L494e70.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L494e76.  v0:= temp @kind object;
  #L494e78.  v0:= (`java.util.Queue`) v0 @kind object;
  #L494e7c.  return v0 @kind object;
}
procedure `void` `onCompleted`(`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber` v1 @kind this) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L494f40.  v0:= v1.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.done` @type ^`boolean` @kind boolean;
  #L494f44.  if v0 == 0 then goto L494f4a;
  #L494f48.  return @kind void;
  #L494f4a.  v0:= 1I;
  #L494f4c.  v1.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L494f50.  call `terminate`(v1) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.terminate:()V` @kind virtual;
  #L494f56.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L494f68.  v0:= v1.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.done` @type ^`boolean` @kind boolean;
  #L494f6c.  if v0 == 0 then goto L494f78;
  #L494f70.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L494f76.  return @kind void;
  #L494f78.  call temp:= `getOrCreateErrors`(v1) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.getOrCreateErrors:()Ljava/util/Queue;` @kind virtual;
  #L494f7e.  v0:= temp @kind object;
  #L494f80.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L494f86.  v2:= 1I;
  #L494f88.  v1.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L494f8c.  call `terminate`(v1) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.terminate:()V` @kind virtual;
  #L494f92.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L494fa4.  v1:= (`rx.Completable`) v1 @kind object;
  #L494fa8.  call `onNext`(v0, v1) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.onNext:(Lrx/Completable;)V` @kind virtual;
  #L494fae.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber` v1 @kind this, `rx.Completable` v2 @kind object) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.onNext:(Lrx/Completable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L494fc0.  v0:= v1.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.done` @type ^`boolean` @kind boolean;
  #L494fc4.  if v0 == 0 then goto L494fca;
  #L494fc8.  return @kind void;
  #L494fca.  v0:= v1.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L494fce.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L494fd4.  v0:= new `rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1`;
  #L494fd8.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber$1;.<init>:(Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;)V` @kind direct;
  #L494fde.  call `unsafeSubscribe`(v2, v0) @signature `Lrx/Completable;.unsafeSubscribe:(Lrx/CompletableSubscriber;)V` @kind virtual;
  #L494fe4.  return @kind void;
}
procedure `void` `terminate`(`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber` v4 @kind this) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge$CompletableMergeSubscriber;.terminate:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L494ff8.  v0:= v4.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L494ffc.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L495002.  v0:= temp;
  #L495004.  v1:= 1I;
  #L495006.  v2:= 0I;
  #L495008.  if v0 != 0 then goto L495066;
  #L49500c.  v0:= v4.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.errors` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L495010.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L495016.  v0:= temp @kind object;
  #L495018.  v0:= (`java.util.Queue`) v0 @kind object;
  #L49501c.  if v0 == 0 then goto L49505a;
  #L495020.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L495026.  v3:= temp;
  #L495028.  if v3 == 0 then goto L49502e;
  #L49502c.  goto L49505a;
  #L49502e.  call temp:= `collectErrors`(v0) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge;.collectErrors:(Ljava/util/Queue;)Ljava/lang/Throwable;` @kind static;
  #L495034.  v0:= temp @kind object;
  #L495036.  v3:= v4.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L49503a.  call temp:= `compareAndSet`(v3, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L495040.  v1:= temp;
  #L495042.  if v1 == 0 then goto L495052;
  #L495046.  v1:= v4.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.actual` @type ^`rx.CompletableSubscriber` @kind object;
  #L49504a.  call `onError`(v1, v0) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L495050.  goto L4950b8;
  #L495052.  call `onError`(v0) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L495058.  goto L4950b8;
  #L49505a.  v0:= v4.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.actual` @type ^`rx.CompletableSubscriber` @kind object;
  #L49505e.  call `onCompleted`(v0) @signature `Lrx/CompletableSubscriber;.onCompleted:()V` @kind interface;
  #L495064.  goto L4950b8;
  #L495066.  v0:= v4.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L49506a.  if v0 != 0 then goto L4950b8;
  #L49506e.  v0:= v4.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.errors` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L495072.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L495078.  v0:= temp @kind object;
  #L49507a.  v0:= (`java.util.Queue`) v0 @kind object;
  #L49507e.  if v0 == 0 then goto L4950b8;
  #L495082.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L495088.  v3:= temp;
  #L49508a.  if v3 != 0 then goto L4950b8;
  #L49508e.  call temp:= `collectErrors`(v0) @signature `Lrx/internal/operators/CompletableOnSubscribeMerge;.collectErrors:(Ljava/util/Queue;)Ljava/lang/Throwable;` @kind static;
  #L495094.  v0:= temp @kind object;
  #L495096.  v3:= v4.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L49509a.  call temp:= `compareAndSet`(v3, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4950a0.  v1:= temp;
  #L4950a2.  if v1 == 0 then goto L4950b2;
  #L4950a6.  v1:= v4.`rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber.actual` @type ^`rx.CompletableSubscriber` @kind object;
  #L4950aa.  call `onError`(v1, v0) @signature `Lrx/CompletableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4950b0.  goto L4950b8;
  #L4950b2.  call `onError`(v0) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4950b8.  return @kind void;
}
