record `rx.internal.operators.SingleFromCallable` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Single$OnSubscribe` @kind interface {
  `java.util.concurrent.Callable` `rx.internal.operators.SingleFromCallable.callable` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleFromCallable` v0 @kind this, `java.util.concurrent.Callable` v1 @kind object) @signature `Lrx/internal/operators/SingleFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4af814.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4af81a.  v0.`rx.internal.operators.SingleFromCallable.callable` @type ^`java.util.concurrent.Callable` := v1 @kind object;
  #L4af81e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleFromCallable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/SingleFromCallable;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4af830.  v1:= (`rx.SingleSubscriber`) v1 @kind object;
  #L4af834.  call `call`(v0, v1) @signature `Lrx/internal/operators/SingleFromCallable;.call:(Lrx/SingleSubscriber;)V` @kind virtual;
  #L4af83a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleFromCallable` v1 @kind this, `rx.SingleSubscriber` v2 @kind object) @signature `Lrx/internal/operators/SingleFromCallable;.call:(Lrx/SingleSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af84c.  v0:= v1.`rx.internal.operators.SingleFromCallable.callable` @type ^`java.util.concurrent.Callable` @kind object;
  #L4af850.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4af856.  v0:= temp @kind object;
  #L4af858.  call `onSuccess`(v2, v0) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L4af85e.  return @kind void;
  #L4af860.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4af862.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4af868.  call `onError`(v2, v0) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4af86e.  return @kind void;
  catch `java.lang.Throwable` @[L4af84c..L4af858] goto L4af860;
}
