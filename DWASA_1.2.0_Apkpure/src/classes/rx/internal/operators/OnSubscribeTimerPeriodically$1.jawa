record `rx.internal.operators.OnSubscribeTimerPeriodically$1` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `long` `rx.internal.operators.OnSubscribeTimerPeriodically$1.counter` @AccessFlag ;
  `rx.internal.operators.OnSubscribeTimerPeriodically` `rx.internal.operators.OnSubscribeTimerPeriodically$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OnSubscribeTimerPeriodically$1.val$child` @AccessFlag FINAL_SYNTHETIC;
  `rx.Scheduler$Worker` `rx.internal.operators.OnSubscribeTimerPeriodically$1.val$worker` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeTimerPeriodically$1` v0 @kind this, `rx.internal.operators.OnSubscribeTimerPeriodically` v1 @kind object, `rx.Subscriber` v2 @kind object, `rx.Scheduler$Worker` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeTimerPeriodically$1;.<init>:(Lrx/internal/operators/OnSubscribeTimerPeriodically;Lrx/Subscriber;Lrx/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49d354.  v0.`rx.internal.operators.OnSubscribeTimerPeriodically$1.this$0` @type ^`rx.internal.operators.OnSubscribeTimerPeriodically` := v1 @kind object;
  #L49d358.  v0.`rx.internal.operators.OnSubscribeTimerPeriodically$1.val$child` @type ^`rx.Subscriber` := v2 @kind object;
  #L49d35c.  v0.`rx.internal.operators.OnSubscribeTimerPeriodically$1.val$worker` @type ^`rx.Scheduler$Worker` := v3 @kind object;
  #L49d360.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49d366.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeTimerPeriodically$1` v5 @kind this) @signature `Lrx/internal/operators/OnSubscribeTimerPeriodically$1;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49d378.  v0:= v5.`rx.internal.operators.OnSubscribeTimerPeriodically$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L49d37c.  v1:= v5.`rx.internal.operators.OnSubscribeTimerPeriodically$1.counter` @type ^`long` @kind wide;
  #L49d380.  v3:= 1L;
  #L49d384.  v3:= v3 + v1 @kind long;
  #L49d386.  v5.`rx.internal.operators.OnSubscribeTimerPeriodically$1.counter` @type ^`long` := v3 @kind wide;
  #L49d38a.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L49d390.  v1:= temp @kind object;
  #L49d392.  call `onNext`(v0, v1) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49d398.  goto L49d3b0;
  #L49d39a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49d39c.  v1:= v5.`rx.internal.operators.OnSubscribeTimerPeriodically$1.val$worker` @type ^`rx.Scheduler$Worker` @kind object;
  #L49d3a0.  call `unsubscribe`(v1) @signature `Lrx/Scheduler$Worker;.unsubscribe:()V` @kind virtual;
  #L49d3a6.  v1:= v5.`rx.internal.operators.OnSubscribeTimerPeriodically$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L49d3aa.  call `throwOrReport`(v0, v1) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L49d3b0.  return @kind void;
  #L49d3b2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49d3b4.  v2:= v5.`rx.internal.operators.OnSubscribeTimerPeriodically$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L49d3b8.  call `throwOrReport`(v0, v2) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L49d3be.  throw v1;
  catch `java.lang.Throwable` @[L49d378..L49d398] goto L49d39a;
  catch `java.lang.Throwable` @[L49d39c..L49d3a6] goto L49d3b2;
}
