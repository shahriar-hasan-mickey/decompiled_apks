record `rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter` @kind class @AccessFlag FINAL extends `rx.internal.operators.OnSubscribeFromEmitter$BaseEmitter` @kind class {
  `boolean` `rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.wip` @AccessFlag FINAL;
}
global `long` `@@rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter` v0 @kind this, `rx.Subscriber` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$LatestEmitter;.<init>:(Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L499428.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L49942e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L499432.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L499438.  v0.`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.queue` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L49943c.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L499440.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L499446.  v0.`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L49944a.  return @kind void;
}
procedure `void` `drain`(`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter` v15 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$LatestEmitter;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L49945c.  v0:= v15.`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L499460.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L499466.  v0:= temp;
  #L499468.  if v0 == 0 then goto L49946e;
  #L49946c.  return @kind void;
  #L49946e.  v0:= v15.`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.actual` @type ^`rx.Subscriber` @kind object;
  #L499472.  v1:= v15.`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L499476.  v2:= 1I;
  #L499478.  v3:= 1I;
  #L49947a.  call temp:= `get`(v15) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$LatestEmitter;.get:()J` @kind virtual;
  #L499480.  v4:= temp @kind wide;
  #L499482.  v6:= 0L;
  #L499486.  v8:= v6 @kind wide;
  #L499488.  v10:= 0I;
  #L49948a.  v11:= 0I;
  #L49948c.  v12:= lcmp(v8, v4);
  #L499490.  if v12 == 0 then goto L4994fa;
  #L499494.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L49949a.  v12:= temp;
  #L49949c.  if v12 == 0 then goto L4994a8;
  #L4994a0.  call `lazySet`(v1, v11) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4994a6.  return @kind void;
  #L4994a8.  v12:= v15.`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.done` @type ^`boolean` @kind boolean;
  #L4994ac.  call temp:= `getAndSet`(v1, v11) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4994b2.  v13:= temp @kind object;
  #L4994b4.  if v13 != 0 then goto L4994bc;
  #L4994b8.  v14:= 1I;
  #L4994ba.  goto L4994be;
  #L4994bc.  v14:= 0I;
  #L4994be.  if v12 == 0 then goto L4994de;
  #L4994c2.  if v14 == 0 then goto L4994de;
  #L4994c6.  v0:= v15.`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.error` @type ^`java.lang.Throwable` @kind object;
  #L4994ca.  if v0 == 0 then goto L4994d6;
  #L4994ce.  call `onError`(v15, v0) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.onError:(Ljava/lang/Throwable;)V` @kind super;
  #L4994d4.  goto L4994dc;
  #L4994d6.  call `onCompleted`(v15) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.onCompleted:()V` @kind super;
  #L4994dc.  return @kind void;
  #L4994de.  if v14 == 0 then goto L4994e4;
  #L4994e2.  goto L4994fa;
  #L4994e4.  call temp:= `getValue`(v13) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4994ea.  v10:= temp @kind object;
  #L4994ec.  call `onNext`(v0, v10) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4994f2.  v10:= 1L;
  #L4994f6.  v8:= v8 + v10 @kind long;
  #L4994f8.  goto L499488;
  #L4994fa.  v12:= lcmp(v8, v4);
  #L4994fe.  if v12 != 0 then goto L499548;
  #L499502.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L499508.  v4:= temp;
  #L49950a.  if v4 == 0 then goto L499516;
  #L49950e.  call `lazySet`(v1, v11) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L499514.  return @kind void;
  #L499516.  v4:= v15.`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.done` @type ^`boolean` @kind boolean;
  #L49951a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L499520.  v5:= temp @kind object;
  #L499522.  if v5 != 0 then goto L499528;
  #L499526.  v10:= 1I;
  #L499528.  if v4 == 0 then goto L499548;
  #L49952c.  if v10 == 0 then goto L499548;
  #L499530.  v0:= v15.`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.error` @type ^`java.lang.Throwable` @kind object;
  #L499534.  if v0 == 0 then goto L499540;
  #L499538.  call `onError`(v15, v0) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.onError:(Ljava/lang/Throwable;)V` @kind super;
  #L49953e.  goto L499546;
  #L499540.  call `onCompleted`(v15) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BaseEmitter;.onCompleted:()V` @kind super;
  #L499546.  return @kind void;
  #L499548.  v4:= lcmp(v8, v6);
  #L49954c.  if v4 == 0 then goto L499556;
  #L499550.  call temp:= `produced`(v15, v8) @signature `Lrx/internal/operators/BackpressureUtils;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L499556.  v4:= v15.`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L49955a.  v3:= -v3 @kind int;
  #L49955c.  call temp:= `addAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L499562.  v3:= temp;
  #L499564.  if v3 != 0 then goto L49947a;
  #L499568.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$LatestEmitter;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49957c.  v0:= 1I;
  #L49957e.  v1.`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.done` @type ^`boolean` := v0 @kind boolean;
  #L499582.  call `drain`(v1) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$LatestEmitter;.drain:()V` @kind virtual;
  #L499588.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$LatestEmitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L49959c.  v0.`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4995a0.  v1:= 1I;
  #L4995a2.  v0.`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.done` @type ^`boolean` := v1 @kind boolean;
  #L4995a6.  call `drain`(v0) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$LatestEmitter;.drain:()V` @kind virtual;
  #L4995ac.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$LatestEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4995c0.  v0:= v1.`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4995c4.  call temp:= `next`(v2) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4995ca.  v2:= temp @kind object;
  #L4995cc.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4995d2.  call `drain`(v1) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$LatestEmitter;.drain:()V` @kind virtual;
  #L4995d8.  return @kind void;
}
procedure `void` `onRequested`(`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter` v0 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$LatestEmitter;.onRequested:()V` @AccessFlag  {
    temp;

  #L4995ec.  call `drain`(v0) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$LatestEmitter;.drain:()V` @kind virtual;
  #L4995f2.  return @kind void;
}
procedure `void` `onUnsubscribed`(`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter` v2 @kind this) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$LatestEmitter;.onUnsubscribed:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L499604.  v0:= v2.`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L499608.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49960e.  v0:= temp;
  #L499610.  if v0 != 0 then goto L499620;
  #L499614.  v0:= v2.`rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L499618.  v1:= 0I;
  #L49961a.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L499620.  return @kind void;
}
