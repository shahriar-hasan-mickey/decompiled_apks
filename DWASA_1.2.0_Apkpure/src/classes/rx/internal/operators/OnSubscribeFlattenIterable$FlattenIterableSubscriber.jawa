record `rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `java.util.Iterator` `rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.active` @AccessFlag ;
  `rx.Subscriber` `rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.actual` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.done` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.error` @AccessFlag FINAL;
  `long` `rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.limit` @AccessFlag FINAL;
  `rx.functions.Func1` `rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.mapper` @AccessFlag FINAL;
  `long` `rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.produced` @AccessFlag ;
  `java.util.Queue` `rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.requested` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.wip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object, `rx.functions.Func1` v2 @kind object, `int` v3 ) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.<init>:(Lrx/Subscriber;Lrx/functions/Func1;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49867c.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L498682.  v0.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L498686.  v0.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.mapper` @type ^`rx.functions.Func1` := v2 @kind object;
  #L49868a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L49868e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L498694.  v0.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L498698.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L49869c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4986a2.  v0.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4986a6.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4986aa.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4986b0.  v0.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4986b4.  v1:= 2147483647I;
  #L4986ba.  if v3 != v1 then goto L4986e0;
  #L4986be.  v1:= 9223372036854775807L;
  #L4986c8.  v0.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.limit` @type ^`long` := v1 @kind wide;
  #L4986cc.  v1:= new `rx.internal.util.atomic.SpscLinkedArrayQueue`;
  #L4986d0.  v2:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L4986d4.  call `<init>`(v1, v2) @signature `Lrx/internal/util/atomic/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4986da.  v0.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.queue` @type ^`java.util.Queue` := v1 @kind object;
  #L4986de.  goto L498718;
  #L4986e0.  v1:= v3 ^> 2;
  #L4986e4.  v1:= v3 - v1 @kind int;
  #L4986e8.  v1:= (`long`) v1 @kind i2l;
  #L4986ea.  v0.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.limit` @type ^`long` := v1 @kind wide;
  #L4986ee.  call temp:= `isUnsafeAvailable`() @signature `Lrx/internal/util/unsafe/UnsafeAccess;.isUnsafeAvailable:()Z` @kind static;
  #L4986f4.  v1:= temp;
  #L4986f6.  if v1 == 0 then goto L49870a;
  #L4986fa.  v1:= new `rx.internal.util.unsafe.SpscArrayQueue`;
  #L4986fe.  call `<init>`(v1, v3) @signature `Lrx/internal/util/unsafe/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L498704.  v0.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.queue` @type ^`java.util.Queue` := v1 @kind object;
  #L498708.  goto L498718;
  #L49870a.  v1:= new `rx.internal.util.atomic.SpscAtomicArrayQueue`;
  #L49870e.  call `<init>`(v1, v3) @signature `Lrx/internal/util/atomic/SpscAtomicArrayQueue;.<init>:(I)V` @kind direct;
  #L498714.  v0.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.queue` @type ^`java.util.Queue` := v1 @kind object;
  #L498718.  v1:= (`long`) v3 @kind i2l;
  #L49871a.  call `request`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.request:(J)V` @kind virtual;
  #L498720.  return @kind void;
}
procedure `boolean` `checkTerminated`(`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber` v3 @kind this, `boolean` v4 , `boolean` v5 , `rx.Subscriber` v6 @kind object, `java.util.Queue` v7 @kind object) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.checkTerminated:(ZZLrx/Subscriber;Ljava/util/Queue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L498604.  call temp:= `isUnsubscribed`(v6) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L49860a.  v0:= temp;
  #L49860c.  v1:= 0I;
  #L49860e.  v2:= 1I;
  #L498610.  if v0 == 0 then goto L498620;
  #L498614.  call `clear`(v7) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L49861a.  v3.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.active` @type ^`java.util.Iterator` := v1 @kind object;
  #L49861e.  return v2;
  #L498620.  if v4 == 0 then goto L498668;
  #L498624.  v4:= v3.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L498628.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49862e.  v4:= temp @kind object;
  #L498630.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L498634.  if v4 == 0 then goto L49865c;
  #L498638.  v4:= v3.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49863c.  call temp:= `terminate`(v4) @signature `Lrx/internal/util/ExceptionsUtils;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L498642.  v4:= temp @kind object;
  #L498644.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.unsubscribe:()V` @kind virtual;
  #L49864a.  call `clear`(v7) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L498650.  v3.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.active` @type ^`java.util.Iterator` := v1 @kind object;
  #L498654.  call `onError`(v6, v4) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49865a.  return v2;
  #L49865c.  if v5 == 0 then goto L498668;
  #L498660.  call `onCompleted`(v6) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L498666.  return v2;
  #L498668.  v4:= 0I;
  #L49866a.  return v4;
}
procedure `void` `drain`(`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber` v17 @kind this) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L498734.  v1:= v17 @kind object;
  #L498738.  v0:= v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L49873c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L498742.  v0:= temp;
  #L498744.  if v0 == 0 then goto L49874a;
  #L498748.  return @kind void;
  #L49874a.  v2:= v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L49874e.  v3:= v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L498752.  v5:= 1I;
  #L498754.  v0:= v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.active` @type ^`java.util.Iterator` @kind object;
  #L498758.  v6:= 1L;
  #L49875c.  v8:= 0L;
  #L498760.  v10:= 0I;
  #L498762.  if v0 != 0 then goto L4987fa;
  #L498766.  v11:= v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L49876a.  call temp:= `poll`(v3) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L498770.  v12:= temp @kind object;
  #L498772.  if v12 != 0 then goto L49877a;
  #L498776.  v13:= 1I;
  #L498778.  goto L49877c;
  #L49877a.  v13:= 0I;
  #L49877c.  call temp:= `checkTerminated`(v1, v11, v13, v2, v3) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.checkTerminated:(ZZLrx/Subscriber;Ljava/util/Queue;)Z` @kind virtual;
  #L498782.  v11:= temp;
  #L498784.  if v11 == 0 then goto L49878a;
  #L498788.  return @kind void;
  #L49878a.  if v13 != 0 then goto L4987fa;
  #L49878e.  v13:= v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.produced` @type ^`long` @kind wide;
  #L498792.  v13:= v13 + v6 @kind long;
  #L498794.  v15:= v5;
  #L498796.  v4:= v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.limit` @type ^`long` @kind wide;
  #L49879a.  v0:= lcmp(v13, v4);
  #L49879e.  if v0 != 0 then goto L4987ae;
  #L4987a2.  v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.produced` @type ^`long` := v8 @kind wide;
  #L4987a6.  call `request`(v1, v13) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.request:(J)V` @kind virtual;
  #L4987ac.  goto L4987b2;
  #L4987ae.  v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.produced` @type ^`long` := v13 @kind wide;
  #L4987b2.  v0:= v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.mapper` @type ^`rx.functions.Func1` @kind object;
  #L4987b6.  call temp:= `getValue`(v12) @signature `Lrx/internal/operators/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4987bc.  v4:= temp @kind object;
  #L4987be.  call temp:= `call`(v0, v4) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4987c4.  v0:= temp @kind object;
  #L4987c6.  v0:= (`java.lang.Iterable`) v0 @kind object;
  #L4987ca.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4987d0.  v0:= temp @kind object;
  #L4987d2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4987d8.  v4:= temp;
  #L4987da.  if v4 != 0 then goto L4987e2;
  #L4987de.  goto L4988ce;
  #L4987e2.  v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.active` @type ^`java.util.Iterator` := v0 @kind object;
  #L4987e6.  goto L4987fc;
  #L4987e8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4987ea.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4987f0.  call `onError`(v1, v0) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4987f6.  goto L4988ce;
  #L4987fa.  v15:= v5;
  #L4987fc.  if v0 == 0 then goto L4988d4;
  #L498800.  v4:= v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L498804.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49880a.  v4:= temp @kind wide;
  #L49880c.  v12:= v8 @kind wide;
  #L49880e.  v14:= 0I;
  #L498810.  v16:= lcmp(v12, v4);
  #L498814.  if v16 == 0 then goto L49888a;
  #L498818.  v11:= v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L49881c.  call temp:= `checkTerminated`(v1, v11, v10, v2, v3) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.checkTerminated:(ZZLrx/Subscriber;Ljava/util/Queue;)Z` @kind virtual;
  #L498822.  v11:= temp;
  #L498824.  if v11 == 0 then goto L49882a;
  #L498828.  return @kind void;
  #L49882a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L498830.  v11:= temp @kind object;
  #L498832.  call `onNext`(v2, v11) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L498838.  v11:= v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L49883c.  call temp:= `checkTerminated`(v1, v11, v10, v2, v3) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.checkTerminated:(ZZLrx/Subscriber;Ljava/util/Queue;)Z` @kind virtual;
  #L498842.  v11:= temp;
  #L498844.  if v11 == 0 then goto L49884a;
  #L498848.  return @kind void;
  #L49884a.  v12:= v12 + v6 @kind long;
  #L49884c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L498852.  v11:= temp;
  #L498854.  if v11 != 0 then goto L49880e;
  #L498858.  v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.active` @type ^`java.util.Iterator` := v14 @kind object;
  #L49885c.  goto L49888c;
  #L49885e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L498860.  v6:= v0 @kind object;
  #L498862.  call `throwIfFatal`(v6) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L498868.  v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.active` @type ^`java.util.Iterator` := v14 @kind object;
  #L49886c.  call `onError`(v1, v6) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L498872.  goto L49888c;
  #L498874.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L498876.  v6:= v0 @kind object;
  #L498878.  call `throwIfFatal`(v6) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49887e.  v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.active` @type ^`java.util.Iterator` := v14 @kind object;
  #L498882.  call `onError`(v1, v6) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L498888.  goto L49888c;
  #L49888a.  v14:= v0 @kind object;
  #L49888c.  v0:= lcmp(v12, v4);
  #L498890.  if v0 != 0 then goto L4988b8;
  #L498894.  v0:= v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L498898.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L49889e.  v4:= temp;
  #L4988a0.  if v4 == 0 then goto L4988aa;
  #L4988a4.  if v14 != 0 then goto L4988aa;
  #L4988a8.  v10:= 1I;
  #L4988aa.  call temp:= `checkTerminated`(v1, v0, v10, v2, v3) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.checkTerminated:(ZZLrx/Subscriber;Ljava/util/Queue;)Z` @kind virtual;
  #L4988b0.  v0:= temp;
  #L4988b2.  if v0 == 0 then goto L4988b8;
  #L4988b6.  return @kind void;
  #L4988b8.  v0:= lcmp(v12, v8);
  #L4988bc.  if v0 == 0 then goto L4988ca;
  #L4988c0.  v0:= v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4988c4.  call temp:= `produced`(v0, v12) @signature `Lrx/internal/operators/BackpressureUtils;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4988ca.  if v14 != 0 then goto L4988d4;
  #L4988ce.  v5:= v15;
  #L4988d0.  goto L498754;
  #L4988d4.  v0:= v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4988d8.  v4:= -v15 @kind int;
  #L4988da.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4988e0.  v5:= temp;
  #L4988e2.  if v5 != 0 then goto L498754;
  #L4988e6.  return @kind void;
  catch `java.lang.Throwable` @[L4987b2..L4987da] goto L4987e8;
  catch `java.lang.Throwable` @[L49882a..L498832] goto L498874;
  catch `java.lang.Throwable` @[L49884c..L498854] goto L49885e;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49891c.  v0:= 1I;
  #L49891e.  v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L498922.  call `drain`(v1) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.drain:()V` @kind virtual;
  #L498928.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49893c.  v0:= v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L498940.  call temp:= `addThrowable`(v0, v2) @signature `Lrx/internal/util/ExceptionsUtils;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L498946.  v0:= temp;
  #L498948.  if v0 == 0 then goto L49895a;
  #L49894c.  v2:= 1I;
  #L49894e.  v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L498952.  call `drain`(v1) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.drain:()V` @kind virtual;
  #L498958.  goto L498960;
  #L49895a.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L498960.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L498974.  v0:= v1.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L498978.  call temp:= `next`(v2) @signature `Lrx/internal/operators/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49897e.  v2:= temp @kind object;
  #L498980.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L498986.  v2:= temp;
  #L498988.  if v2 != 0 then goto L4989a4;
  #L49898c.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.unsubscribe:()V` @kind virtual;
  #L498992.  v2:= new `rx.exceptions.MissingBackpressureException`;
  #L498996.  call `<init>`(v2) @signature `Lrx/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L49899c.  call `onError`(v1, v2) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4989a2.  return @kind void;
  #L4989a4.  call `drain`(v1) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.drain:()V` @kind virtual;
  #L4989aa.  return @kind void;
}
procedure `void` `requestMore`(`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber` v3 @kind this, `long` v4 ) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.requestMore:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4989bc.  v0:= 0L;
  #L4989c0.  v2:= lcmp(v4, v0);
  #L4989c4.  if v2 <= 0 then goto L4989da;
  #L4989c8.  v0:= v3.`rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4989cc.  call temp:= `getAndAddRequest`(v0, v4) @signature `Lrx/internal/operators/BackpressureUtils;.getAndAddRequest:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4989d2.  call `drain`(v3) @signature `Lrx/internal/operators/OnSubscribeFlattenIterable$FlattenIterableSubscriber;.drain:()V` @kind virtual;
  #L4989d8.  goto L4989e2;
  #L4989da.  v2:= lcmp(v4, v0);
  #L4989de.  if v2 < 0 then goto L4989e4;
  #L4989e2.  return @kind void;
  #L4989e4.  v0:= new `java.lang.IllegalStateException`;
  #L4989e8.  v1:= new `java.lang.StringBuilder`;
  #L4989ec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4989f2.  v2:= "n >= 0 required but it was " @kind object;
  #L4989f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4989fc.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L498a02.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L498a08.  v4:= temp @kind object;
  #L498a0a.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L498a10.  throw v0;
}
