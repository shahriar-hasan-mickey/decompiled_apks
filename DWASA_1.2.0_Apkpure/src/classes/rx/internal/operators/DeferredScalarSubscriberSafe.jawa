record `rx.internal.operators.DeferredScalarSubscriberSafe` @kind class @AccessFlag PUBLIC_ABSTRACT extends `rx.internal.operators.DeferredScalarSubscriber` @kind class {
  `boolean` `rx.internal.operators.DeferredScalarSubscriberSafe.done` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`rx.internal.operators.DeferredScalarSubscriberSafe` v0 @kind this, `rx.Subscriber` v1 @kind object) @signature `Lrx/internal/operators/DeferredScalarSubscriberSafe;.<init>:(Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L495ddc.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/DeferredScalarSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L495de2.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.DeferredScalarSubscriberSafe` v1 @kind this) @signature `Lrx/internal/operators/DeferredScalarSubscriberSafe;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L495df4.  v0:= v1.`rx.internal.operators.DeferredScalarSubscriberSafe.done` @type ^`boolean` @kind boolean;
  #L495df8.  if v0 == 0 then goto L495dfe;
  #L495dfc.  return @kind void;
  #L495dfe.  v0:= 1I;
  #L495e00.  v1.`rx.internal.operators.DeferredScalarSubscriberSafe.done` @type ^`boolean` := v0 @kind boolean;
  #L495e04.  call `onCompleted`(v1) @signature `Lrx/internal/operators/DeferredScalarSubscriber;.onCompleted:()V` @kind super;
  #L495e0a.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.DeferredScalarSubscriberSafe` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/DeferredScalarSubscriberSafe;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L495e1c.  v0:= v1.`rx.internal.operators.DeferredScalarSubscriberSafe.done` @type ^`boolean` @kind boolean;
  #L495e20.  if v0 != 0 then goto L495e32;
  #L495e24.  v0:= 1I;
  #L495e26.  v1.`rx.internal.operators.DeferredScalarSubscriberSafe.done` @type ^`boolean` := v0 @kind boolean;
  #L495e2a.  call `onError`(v1, v2) @signature `Lrx/internal/operators/DeferredScalarSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind super;
  #L495e30.  goto L495e38;
  #L495e32.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L495e38.  return @kind void;
}
