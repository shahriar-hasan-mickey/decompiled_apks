record `rx.internal.operators.OnSubscribeThrow` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `java.lang.Throwable` `rx.internal.operators.OnSubscribeThrow.exception` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeThrow` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeThrow;.<init>:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49d218.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49d21e.  v0.`rx.internal.operators.OnSubscribeThrow.exception` @type ^`java.lang.Throwable` := v1 @kind object;
  #L49d222.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeThrow` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeThrow;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49d234.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L49d238.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeThrow;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L49d23e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeThrow` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeThrow;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49d250.  v0:= v1.`rx.internal.operators.OnSubscribeThrow.exception` @type ^`java.lang.Throwable` @kind object;
  #L49d254.  call `onError`(v2, v0) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49d25a.  return @kind void;
}
