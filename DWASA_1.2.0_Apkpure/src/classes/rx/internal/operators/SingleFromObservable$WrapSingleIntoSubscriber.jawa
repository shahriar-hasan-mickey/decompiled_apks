record `rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.SingleSubscriber` `rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.actual` @AccessFlag FINAL;
  `int` `rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.state` @AccessFlag ;
  `java.lang.Object` `rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.value` @AccessFlag ;
}
global `int` `@@rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.STATE_DONE` @AccessFlag STATIC_FINAL;
global `int` `@@rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.STATE_EMPTY` @AccessFlag STATIC_FINAL;
global `int` `@@rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.STATE_HAS_VALUE` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber` v0 @kind this, `rx.SingleSubscriber` v1 @kind object) @signature `Lrx/internal/operators/SingleFromObservable$WrapSingleIntoSubscriber;.<init>:(Lrx/SingleSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4af93c.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4af942.  v0.`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.actual` @type ^`rx.SingleSubscriber` := v1 @kind object;
  #L4af946.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber` v2 @kind this) @signature `Lrx/internal/operators/SingleFromObservable$WrapSingleIntoSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4af958.  v0:= v2.`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.state` @type ^`int`;
  #L4af95c.  if v0 != 0 then goto L4af976;
  #L4af960.  v0:= v2.`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4af964.  v1:= new `java.util.NoSuchElementException`;
  #L4af968.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L4af96e.  call `onError`(v0, v1) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4af974.  goto L4af996;
  #L4af976.  v1:= 1I;
  #L4af978.  if v0 != v1 then goto L4af996;
  #L4af97c.  v0:= 2I;
  #L4af97e.  v2.`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.state` @type ^`int` := v0;
  #L4af982.  v0:= v2.`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L4af986.  v1:= 0I;
  #L4af988.  v2.`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.value` @type ^`java.lang.Object` := v1 @kind object;
  #L4af98c.  v1:= v2.`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4af990.  call `onSuccess`(v1, v0) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L4af996.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/operators/SingleFromObservable$WrapSingleIntoSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4af9a8.  v0:= v2.`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.state` @type ^`int`;
  #L4af9ac.  v1:= 2I;
  #L4af9ae.  if v0 != v1 then goto L4af9ba;
  #L4af9b2.  call `onError`(v3) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4af9b8.  goto L4af9ca;
  #L4af9ba.  v0:= 0I;
  #L4af9bc.  v2.`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.value` @type ^`java.lang.Object` := v0 @kind object;
  #L4af9c0.  v0:= v2.`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4af9c4.  call `onError`(v0, v3) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4af9ca.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/SingleFromObservable$WrapSingleIntoSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4af9dc.  v0:= v2.`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.state` @type ^`int`;
  #L4af9e0.  v1:= 1I;
  #L4af9e2.  if v0 != 0 then goto L4af9f0;
  #L4af9e6.  v2.`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.state` @type ^`int` := v1;
  #L4af9ea.  v2.`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.value` @type ^`java.lang.Object` := v3 @kind object;
  #L4af9ee.  goto L4afa12;
  #L4af9f0.  if v0 != v1 then goto L4afa12;
  #L4af9f4.  v3:= 2I;
  #L4af9f6.  v2.`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.state` @type ^`int` := v3;
  #L4af9fa.  v3:= v2.`rx.internal.operators.SingleFromObservable$WrapSingleIntoSubscriber.actual` @type ^`rx.SingleSubscriber` @kind object;
  #L4af9fe.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L4afa02.  v1:= "The upstream produced more than one value" @kind object;
  #L4afa06.  call `<init>`(v0, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4afa0c.  call `onError`(v3, v0) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4afa12.  return @kind void;
}
