record `rx.internal.operators.OperatorWithLatestFromMany` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.functions.FuncN` `rx.internal.operators.OperatorWithLatestFromMany.combiner` @AccessFlag FINAL;
  `rx.Observable` `rx.internal.operators.OperatorWithLatestFromMany.main` @AccessFlag FINAL;
  `rx.Observable`[] `rx.internal.operators.OperatorWithLatestFromMany.others` @AccessFlag FINAL;
  `java.lang.Iterable` `rx.internal.operators.OperatorWithLatestFromMany.othersIterable` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorWithLatestFromMany` v0 @kind this, `rx.Observable` v1 @kind object, `rx.Observable`[] v2 @kind object, `java.lang.Iterable` v3 @kind object, `rx.functions.FuncN` v4 @kind object) @signature `Lrx/internal/operators/OperatorWithLatestFromMany;.<init>:(Lrx/Observable;[Lrx/Observable;Ljava/lang/Iterable;Lrx/functions/FuncN;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4aea0c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4aea12.  v0.`rx.internal.operators.OperatorWithLatestFromMany.main` @type ^`rx.Observable` := v1 @kind object;
  #L4aea16.  v0.`rx.internal.operators.OperatorWithLatestFromMany.others` @type ^`rx.Observable`[] := v2 @kind object;
  #L4aea1a.  v0.`rx.internal.operators.OperatorWithLatestFromMany.othersIterable` @type ^`java.lang.Iterable` := v3 @kind object;
  #L4aea1e.  v0.`rx.internal.operators.OperatorWithLatestFromMany.combiner` @type ^`rx.functions.FuncN` := v4 @kind object;
  #L4aea22.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorWithLatestFromMany` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorWithLatestFromMany;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4aea34.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4aea38.  call `call`(v0, v1) @signature `Lrx/internal/operators/OperatorWithLatestFromMany;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L4aea3e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorWithLatestFromMany` v7 @kind this, `rx.Subscriber` v8 @kind object) @signature `Lrx/internal/operators/OperatorWithLatestFromMany;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4aea50.  v0:= new `rx.observers.SerializedSubscriber`;
  #L4aea54.  call `<init>`(v0, v8) @signature `Lrx/observers/SerializedSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4aea5a.  v1:= v7.`rx.internal.operators.OperatorWithLatestFromMany.others` @type ^`rx.Observable`[] @kind object;
  #L4aea5e.  v2:= 0I;
  #L4aea60.  if v1 == 0 then goto L4aea6c;
  #L4aea64.  v3:= length @variable v1;
  #L4aea66.  v4:= v1 @kind object;
  #L4aea68.  v1:= v3;
  #L4aea6a.  goto L4aeac0;
  #L4aea6c.  v1:= 8I;
  #L4aea70.  v1:= new `rx.Observable`[v1];
  #L4aea74.  v3:= v7.`rx.internal.operators.OperatorWithLatestFromMany.othersIterable` @type ^`java.lang.Iterable` @kind object;
  #L4aea78.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4aea7e.  v3:= temp @kind object;
  #L4aea80.  v4:= v1 @kind object;
  #L4aea82.  v1:= 0I;
  #L4aea84.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4aea8a.  v5:= temp;
  #L4aea8c.  if v5 == 0 then goto L4aeac0;
  #L4aea90.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4aea96.  v5:= temp @kind object;
  #L4aea98.  v5:= (`rx.Observable`) v5 @kind object;
  #L4aea9c.  v6:= length @variable v4;
  #L4aea9e.  if v1 != v6 then goto L4aeab4;
  #L4aeaa2.  v6:= v1 ^> 2;
  #L4aeaa6.  v6:= v6 + v1 @kind int;
  #L4aeaa8.  call temp:= `copyOf`(v4, v6) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L4aeaae.  v4:= temp @kind object;
  #L4aeab0.  v4:= (`rx.Observable`[]) v4 @kind object;
  #L4aeab4.  v6:= v1 + 1;
  #L4aeab8.  v4[v1]:= v5 @kind object;
  #L4aeabc.  v1:= v6;
  #L4aeabe.  goto L4aea84;
  #L4aeac0.  v3:= new `rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber`;
  #L4aeac4.  v5:= v7.`rx.internal.operators.OperatorWithLatestFromMany.combiner` @type ^`rx.functions.FuncN` @kind object;
  #L4aeac8.  call `<init>`(v3, v8, v5, v1) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.<init>:(Lrx/Subscriber;Lrx/functions/FuncN;I)V` @kind direct;
  #L4aeace.  call `add`(v0, v3) @signature `Lrx/observers/SerializedSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4aead4.  if v2 >= v1 then goto L4aeb08;
  #L4aead8.  call temp:= `isUnsubscribed`(v0) @signature `Lrx/observers/SerializedSubscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4aeade.  v8:= temp;
  #L4aeae0.  if v8 == 0 then goto L4aeae6;
  #L4aeae4.  return @kind void;
  #L4aeae6.  v8:= new `rx.internal.operators.OperatorWithLatestFromMany$WithLatestOtherSubscriber`;
  #L4aeaea.  v5:= v2 + 1;
  #L4aeaee.  call `<init>`(v8, v3, v5) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestOtherSubscriber;.<init>:(Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;I)V` @kind direct;
  #L4aeaf4.  call `add`(v3, v8) @signature `Lrx/internal/operators/OperatorWithLatestFromMany$WithLatestMainSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4aeafa.  v2:= v4[v2] @kind object;
  #L4aeafe.  call temp:= `unsafeSubscribe`(v2, v8) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4aeb04.  v2:= v5;
  #L4aeb06.  goto L4aead4;
  #L4aeb08.  v8:= v7.`rx.internal.operators.OperatorWithLatestFromMany.main` @type ^`rx.Observable` @kind object;
  #L4aeb0c.  call temp:= `unsafeSubscribe`(v8, v3) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4aeb12.  return @kind void;
}
