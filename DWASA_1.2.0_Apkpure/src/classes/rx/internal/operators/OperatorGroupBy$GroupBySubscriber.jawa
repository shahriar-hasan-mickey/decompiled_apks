record `rx.internal.operators.OperatorGroupBy$GroupBySubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorGroupBy$GroupBySubscriber.actual` @AccessFlag FINAL;
  `int` `rx.internal.operators.OperatorGroupBy$GroupBySubscriber.bufferSize` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.operators.OperatorGroupBy$GroupBySubscriber.cancelled` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorGroupBy$GroupBySubscriber.delayError` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorGroupBy$GroupBySubscriber.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `rx.internal.operators.OperatorGroupBy$GroupBySubscriber.error` @AccessFlag ;
  `java.util.Queue` `rx.internal.operators.OperatorGroupBy$GroupBySubscriber.evictedKeys` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groupCount` @AccessFlag FINAL;
  `java.util.Map` `rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groups` @AccessFlag FINAL;
  `rx.functions.Func1` `rx.internal.operators.OperatorGroupBy$GroupBySubscriber.keySelector` @AccessFlag FINAL;
  `rx.internal.operators.OperatorGroupBy$GroupByProducer` `rx.internal.operators.OperatorGroupBy$GroupBySubscriber.producer` @AccessFlag FINAL;
  `java.util.Queue` `rx.internal.operators.OperatorGroupBy$GroupBySubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OperatorGroupBy$GroupBySubscriber.requested` @AccessFlag FINAL;
  `rx.internal.producers.ProducerArbiter` `rx.internal.operators.OperatorGroupBy$GroupBySubscriber.s` @AccessFlag FINAL;
  `rx.functions.Func1` `rx.internal.operators.OperatorGroupBy$GroupBySubscriber.valueSelector` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.OperatorGroupBy$GroupBySubscriber.wip` @AccessFlag FINAL;
}
global `java.lang.Object` `@@rx.internal.operators.OperatorGroupBy$GroupBySubscriber.NULL_KEY` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a1530.  v0:= new `java.lang.Object`;
  #L4a1534.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a153a.  `@@rx.internal.operators.OperatorGroupBy$GroupBySubscriber.NULL_KEY` @type ^`java.lang.Object` := v0 @kind object;
  #L4a153e.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorGroupBy$GroupBySubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object, `rx.functions.Func1` v2 @kind object, `rx.functions.Func1` v3 @kind object, `int` v4 , `boolean` v5 , `rx.functions.Func1` v6 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.<init>:(Lrx/Subscriber;Lrx/functions/Func1;Lrx/functions/Func1;IZLrx/functions/Func1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a1550.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4a1556.  v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L4a155a.  v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.keySelector` @type ^`rx.functions.Func1` := v2 @kind object;
  #L4a155e.  v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.valueSelector` @type ^`rx.functions.Func1` := v3 @kind object;
  #L4a1562.  v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.bufferSize` @type ^`int` := v4;
  #L4a1566.  v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.delayError` @type ^`boolean` := v5 @kind boolean;
  #L4a156a.  v1:= new `java.util.concurrent.ConcurrentLinkedQueue`;
  #L4a156e.  call `<init>`(v1) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L4a1574.  v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.queue` @type ^`java.util.Queue` := v1 @kind object;
  #L4a1578.  v1:= new `rx.internal.producers.ProducerArbiter`;
  #L4a157c.  call `<init>`(v1) @signature `Lrx/internal/producers/ProducerArbiter;.<init>:()V` @kind direct;
  #L4a1582.  v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.s` @type ^`rx.internal.producers.ProducerArbiter` := v1 @kind object;
  #L4a1586.  v1:= v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.s` @type ^`rx.internal.producers.ProducerArbiter` @kind object;
  #L4a158a.  v2:= (`long`) v4 @kind i2l;
  #L4a158c.  call `request`(v1, v2) @signature `Lrx/internal/producers/ProducerArbiter;.request:(J)V` @kind virtual;
  #L4a1592.  v1:= new `rx.internal.operators.OperatorGroupBy$GroupByProducer`;
  #L4a1596.  call `<init>`(v1, v0) @signature `Lrx/internal/operators/OperatorGroupBy$GroupByProducer;.<init>:(Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;)V` @kind direct;
  #L4a159c.  v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.producer` @type ^`rx.internal.operators.OperatorGroupBy$GroupByProducer` := v1 @kind object;
  #L4a15a0.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4a15a4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4a15aa.  v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4a15ae.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a15b2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a15b8.  v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a15bc.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4a15c0.  v2:= 1I;
  #L4a15c2.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4a15c8.  v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groupCount` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4a15cc.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4a15d0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a15d6.  v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4a15da.  if v6 != 0 then goto L4a15f4;
  #L4a15de.  v1:= new `java.util.concurrent.ConcurrentHashMap`;
  #L4a15e2.  call `<init>`(v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L4a15e8.  v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` := v1 @kind object;
  #L4a15ec.  v1:= 0I;
  #L4a15ee.  v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.evictedKeys` @type ^`java.util.Queue` := v1 @kind object;
  #L4a15f2.  goto L4a161c;
  #L4a15f4.  v1:= new `java.util.concurrent.ConcurrentLinkedQueue`;
  #L4a15f8.  call `<init>`(v1) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L4a15fe.  v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.evictedKeys` @type ^`java.util.Queue` := v1 @kind object;
  #L4a1602.  v1:= new `rx.internal.operators.OperatorGroupBy$GroupBySubscriber$EvictionAction`;
  #L4a1606.  v2:= v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.evictedKeys` @type ^`java.util.Queue` @kind object;
  #L4a160a.  call `<init>`(v1, v2) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber$EvictionAction;.<init>:(Ljava/util/Queue;)V` @kind direct;
  #L4a1610.  call temp:= `createMap`(v0, v6, v1) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.createMap:(Lrx/functions/Func1;Lrx/functions/Action1;)Ljava/util/Map;` @kind direct;
  #L4a1616.  v1:= temp @kind object;
  #L4a1618.  v0.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` := v1 @kind object;
  #L4a161c.  return @kind void;
}
procedure `java.util.Map` `createMap`(`rx.internal.operators.OperatorGroupBy$GroupBySubscriber` v0 @kind this, `rx.functions.Func1` v1 @kind object, `rx.functions.Action1` v2 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.createMap:(Lrx/functions/Func1;Lrx/functions/Action1;)Ljava/util/Map;` @AccessFlag PRIVATE {
    temp;

  #L4a1510.  call temp:= `call`(v1, v2) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a1516.  v1:= temp @kind object;
  #L4a1518.  v1:= (`java.util.Map`) v1 @kind object;
  #L4a151c.  return v1 @kind object;
}
procedure `void` `cancel`(`rx.internal.operators.OperatorGroupBy$GroupBySubscriber` v3 @kind this) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a1630.  v0:= v3.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a1634.  v1:= 0I;
  #L4a1636.  v2:= 1I;
  #L4a1638.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4a163e.  v0:= temp;
  #L4a1640.  if v0 == 0 then goto L4a165a;
  #L4a1644.  v0:= v3.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groupCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a1648.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4a164e.  v0:= temp;
  #L4a1650.  if v0 != 0 then goto L4a165a;
  #L4a1654.  call `unsubscribe`(v3) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.unsubscribe:()V` @kind virtual;
  #L4a165a.  return @kind void;
}
procedure `void` `cancel`(`rx.internal.operators.OperatorGroupBy$GroupBySubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.cancel:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a166c.  if v2 == 0 then goto L4a1672;
  #L4a1670.  goto L4a1676;
  #L4a1672.  v2:= `@@rx.internal.operators.OperatorGroupBy$GroupBySubscriber.NULL_KEY` @type ^`java.lang.Object` @kind object;
  #L4a1676.  v0:= v1.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L4a167a.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a1680.  v2:= temp @kind object;
  #L4a1682.  if v2 == 0 then goto L4a169c;
  #L4a1686.  v2:= v1.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groupCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a168a.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4a1690.  v2:= temp;
  #L4a1692.  if v2 != 0 then goto L4a169c;
  #L4a1696.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.unsubscribe:()V` @kind virtual;
  #L4a169c.  return @kind void;
}
procedure `boolean` `checkTerminated`(`rx.internal.operators.OperatorGroupBy$GroupBySubscriber` v1 @kind this, `boolean` v2 , `boolean` v3 , `rx.Subscriber` v4 @kind object, `java.util.Queue` v5 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.checkTerminated:(ZZLrx/Subscriber;Ljava/util/Queue;)Z` @AccessFlag  {
    temp;
    v0;

  #L4a14d4.  if v2 == 0 then goto L4a14fa;
  #L4a14d8.  v2:= v1.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4a14dc.  v0:= 1I;
  #L4a14de.  if v2 == 0 then goto L4a14ea;
  #L4a14e2.  call `errorAll`(v1, v4, v5, v2) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.errorAll:(Lrx/Subscriber;Ljava/util/Queue;Ljava/lang/Throwable;)V` @kind virtual;
  #L4a14e8.  return v0;
  #L4a14ea.  if v3 == 0 then goto L4a14fa;
  #L4a14ee.  v2:= v1.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a14f2.  call `onCompleted`(v2) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a14f8.  return v0;
  #L4a14fa.  v2:= 0I;
  #L4a14fc.  return v2;
}
procedure `void` `drain`(`rx.internal.operators.OperatorGroupBy$GroupBySubscriber` v13 @kind this) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4a16b0.  v0:= v13.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a16b4.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a16ba.  v0:= temp;
  #L4a16bc.  if v0 == 0 then goto L4a16c2;
  #L4a16c0.  return @kind void;
  #L4a16c2.  v0:= v13.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L4a16c6.  v1:= v13.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a16ca.  v2:= 1I;
  #L4a16cc.  v3:= 1I;
  #L4a16ce.  v4:= v13.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.done` @type ^`boolean` @kind boolean;
  #L4a16d2.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L4a16d8.  v5:= temp;
  #L4a16da.  call temp:= `checkTerminated`(v13, v4, v5, v1, v0) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.checkTerminated:(ZZLrx/Subscriber;Ljava/util/Queue;)Z` @kind virtual;
  #L4a16e0.  v4:= temp;
  #L4a16e2.  if v4 == 0 then goto L4a16e8;
  #L4a16e6.  return @kind void;
  #L4a16e8.  v4:= v13.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a16ec.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a16f2.  v4:= temp @kind wide;
  #L4a16f4.  v6:= 0L;
  #L4a16f8.  v8:= v6 @kind wide;
  #L4a16fa.  v10:= lcmp(v8, v4);
  #L4a16fe.  if v10 == 0 then goto L4a173e;
  #L4a1702.  v10:= v13.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.done` @type ^`boolean` @kind boolean;
  #L4a1706.  call temp:= `poll`(v0) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a170c.  v11:= temp @kind object;
  #L4a170e.  v11:= (`rx.observables.GroupedObservable`) v11 @kind object;
  #L4a1712.  if v11 != 0 then goto L4a171a;
  #L4a1716.  v12:= 1I;
  #L4a1718.  goto L4a171c;
  #L4a171a.  v12:= 0I;
  #L4a171c.  call temp:= `checkTerminated`(v13, v10, v12, v1, v0) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.checkTerminated:(ZZLrx/Subscriber;Ljava/util/Queue;)Z` @kind virtual;
  #L4a1722.  v10:= temp;
  #L4a1724.  if v10 == 0 then goto L4a172a;
  #L4a1728.  return @kind void;
  #L4a172a.  if v12 == 0 then goto L4a1730;
  #L4a172e.  goto L4a173e;
  #L4a1730.  call `onNext`(v1, v11) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a1736.  v10:= 1L;
  #L4a173a.  v8:= v8 + v10 @kind long;
  #L4a173c.  goto L4a16fa;
  #L4a173e.  v10:= lcmp(v8, v6);
  #L4a1742.  if v10 == 0 then goto L4a176c;
  #L4a1746.  v6:= 9223372036854775807L;
  #L4a1750.  v10:= lcmp(v4, v6);
  #L4a1754.  if v10 == 0 then goto L4a1762;
  #L4a1758.  v4:= v13.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a175c.  call temp:= `produced`(v4, v8) @signature `Lrx/internal/operators/BackpressureUtils;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a1762.  v4:= v13.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.s` @type ^`rx.internal.producers.ProducerArbiter` @kind object;
  #L4a1766.  call `request`(v4, v8) @signature `Lrx/internal/producers/ProducerArbiter;.request:(J)V` @kind virtual;
  #L4a176c.  v4:= v13.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a1770.  v3:= -v3 @kind int;
  #L4a1772.  call temp:= `addAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4a1778.  v3:= temp;
  #L4a177a.  if v3 != 0 then goto L4a16ce;
  #L4a177e.  return @kind void;
}
procedure `void` `errorAll`(`rx.internal.operators.OperatorGroupBy$GroupBySubscriber` v1 @kind this, `rx.Subscriber` v2 @kind object, `java.util.Queue` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.errorAll:(Lrx/Subscriber;Ljava/util/Queue;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4a1790.  call `clear`(v3) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L4a1796.  v3:= new `java.util.ArrayList`;
  #L4a179a.  v0:= v1.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L4a179e.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4a17a4.  v0:= temp @kind object;
  #L4a17a6.  call `<init>`(v3, v0) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4a17ac.  v0:= v1.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L4a17b0.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4a17b6.  v0:= v1.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.evictedKeys` @type ^`java.util.Queue` @kind object;
  #L4a17ba.  if v0 == 0 then goto L4a17c4;
  #L4a17be.  call `clear`(v0) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L4a17c4.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4a17ca.  v3:= temp @kind object;
  #L4a17cc.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4a17d2.  v0:= temp;
  #L4a17d4.  if v0 == 0 then goto L4a17ec;
  #L4a17d8.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4a17de.  v0:= temp @kind object;
  #L4a17e0.  v0:= (`rx.internal.operators.OperatorGroupBy$GroupedUnicast`) v0 @kind object;
  #L4a17e4.  call `onError`(v0, v4) @signature `Lrx/internal/operators/OperatorGroupBy$GroupedUnicast;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a17ea.  goto L4a17cc;
  #L4a17ec.  call `onError`(v2, v4) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a17f2.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorGroupBy$GroupBySubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a1804.  v0:= v2.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.done` @type ^`boolean` @kind boolean;
  #L4a1808.  if v0 == 0 then goto L4a180e;
  #L4a180c.  return @kind void;
  #L4a180e.  v0:= v2.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L4a1812.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4a1818.  v0:= temp @kind object;
  #L4a181a.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4a1820.  v0:= temp @kind object;
  #L4a1822.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4a1828.  v1:= temp;
  #L4a182a.  if v1 == 0 then goto L4a1842;
  #L4a182e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4a1834.  v1:= temp @kind object;
  #L4a1836.  v1:= (`rx.internal.operators.OperatorGroupBy$GroupedUnicast`) v1 @kind object;
  #L4a183a.  call `onComplete`(v1) @signature `Lrx/internal/operators/OperatorGroupBy$GroupedUnicast;.onComplete:()V` @kind virtual;
  #L4a1840.  goto L4a1822;
  #L4a1842.  v0:= v2.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L4a1846.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4a184c.  v0:= v2.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.evictedKeys` @type ^`java.util.Queue` @kind object;
  #L4a1850.  if v0 == 0 then goto L4a185a;
  #L4a1854.  call `clear`(v0) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L4a185a.  v0:= 1I;
  #L4a185c.  v2.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4a1860.  v0:= v2.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groupCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a1864.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4a186a.  call `drain`(v2) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L4a1870.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorGroupBy$GroupBySubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1884.  v0:= v1.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.done` @type ^`boolean` @kind boolean;
  #L4a1888.  if v0 == 0 then goto L4a1894;
  #L4a188c.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a1892.  return @kind void;
  #L4a1894.  v1.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4a1898.  v2:= 1I;
  #L4a189a.  v1.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L4a189e.  v2:= v1.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groupCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a18a2.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4a18a8.  call `drain`(v1) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L4a18ae.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorGroupBy$GroupBySubscriber` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a18c0.  v0:= v6.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.done` @type ^`boolean` @kind boolean;
  #L4a18c4.  if v0 == 0 then goto L4a18ca;
  #L4a18c8.  return @kind void;
  #L4a18ca.  v0:= v6.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L4a18ce.  v1:= v6.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L4a18d2.  v2:= v6.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.keySelector` @type ^`rx.functions.Func1` @kind object;
  #L4a18d6.  call temp:= `call`(v2, v7) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a18dc.  v2:= temp @kind object;
  #L4a18de.  v3:= 1I;
  #L4a18e0.  if v2 == 0 then goto L4a18e8;
  #L4a18e4.  v4:= v2 @kind object;
  #L4a18e6.  goto L4a18ec;
  #L4a18e8.  v4:= `@@rx.internal.operators.OperatorGroupBy$GroupBySubscriber.NULL_KEY` @type ^`java.lang.Object` @kind object;
  #L4a18ec.  v5:= v6.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L4a18f0.  call temp:= `get`(v5, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a18f6.  v5:= temp @kind object;
  #L4a18f8.  v5:= (`rx.internal.operators.OperatorGroupBy$GroupedUnicast`) v5 @kind object;
  #L4a18fc.  if v5 != 0 then goto L4a1946;
  #L4a1900.  v3:= v6.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a1904.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4a190a.  v3:= temp;
  #L4a190c.  if v3 != 0 then goto L4a1944;
  #L4a1910.  v3:= v6.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.bufferSize` @type ^`int`;
  #L4a1914.  v5:= v6.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.delayError` @type ^`boolean` @kind boolean;
  #L4a1918.  call temp:= `createWith`(v2, v3, v6, v5) @signature `Lrx/internal/operators/OperatorGroupBy$GroupedUnicast;.createWith:(Ljava/lang/Object;ILrx/internal/operators/OperatorGroupBy$GroupBySubscriber;Z)Lrx/internal/operators/OperatorGroupBy$GroupedUnicast;` @kind static;
  #L4a191e.  v5:= temp @kind object;
  #L4a1920.  v2:= v6.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L4a1924.  call temp:= `put`(v2, v4, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a192a.  v2:= v6.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groupCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a192e.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a1934.  v3:= 0I;
  #L4a1936.  call temp:= `offer`(v0, v5) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4a193c.  call `drain`(v6) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L4a1942.  goto L4a1946;
  #L4a1944.  return @kind void;
  #L4a1946.  v2:= v6.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.valueSelector` @type ^`rx.functions.Func1` @kind object;
  #L4a194a.  call temp:= `call`(v2, v7) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a1950.  v7:= temp @kind object;
  #L4a1952.  call `onNext`(v5, v7) @signature `Lrx/internal/operators/OperatorGroupBy$GroupedUnicast;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a1958.  v7:= v6.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.evictedKeys` @type ^`java.util.Queue` @kind object;
  #L4a195c.  if v7 == 0 then goto L4a198c;
  #L4a1960.  v7:= v6.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.evictedKeys` @type ^`java.util.Queue` @kind object;
  #L4a1964.  call temp:= `poll`(v7) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a196a.  v7:= temp @kind object;
  #L4a196c.  if v7 == 0 then goto L4a198c;
  #L4a1970.  v0:= v6.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L4a1974.  call temp:= `get`(v0, v7) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a197a.  v7:= temp @kind object;
  #L4a197c.  v7:= (`rx.internal.operators.OperatorGroupBy$GroupedUnicast`) v7 @kind object;
  #L4a1980.  if v7 == 0 then goto L4a1960;
  #L4a1984.  call `onComplete`(v7) @signature `Lrx/internal/operators/OperatorGroupBy$GroupedUnicast;.onComplete:()V` @kind virtual;
  #L4a198a.  goto L4a1960;
  #L4a198c.  if v3 == 0 then goto L4a199e;
  #L4a1990.  v7:= v6.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.s` @type ^`rx.internal.producers.ProducerArbiter` @kind object;
  #L4a1994.  v0:= 1L;
  #L4a1998.  call `request`(v7, v0) @signature `Lrx/internal/producers/ProducerArbiter;.request:(J)V` @kind virtual;
  #L4a199e.  return @kind void;
  #L4a19a0.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a19a2.  call `unsubscribe`(v6) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.unsubscribe:()V` @kind virtual;
  #L4a19a8.  call `errorAll`(v6, v1, v0, v7) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.errorAll:(Lrx/Subscriber;Ljava/util/Queue;Ljava/lang/Throwable;)V` @kind virtual;
  #L4a19ae.  return @kind void;
  #L4a19b0.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a19b2.  call `unsubscribe`(v6) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.unsubscribe:()V` @kind virtual;
  #L4a19b8.  call `errorAll`(v6, v1, v0, v7) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.errorAll:(Lrx/Subscriber;Ljava/util/Queue;Ljava/lang/Throwable;)V` @kind virtual;
  #L4a19be.  return @kind void;
  catch `java.lang.Throwable` @[L4a18d2..L4a18de] goto L4a19b0;
  catch `java.lang.Throwable` @[L4a1946..L4a1952] goto L4a19a0;
}
procedure `void` `requestMore`(`rx.internal.operators.OperatorGroupBy$GroupBySubscriber` v3 @kind this, `long` v4 ) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.requestMore:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a19e8.  v0:= 0L;
  #L4a19ec.  v2:= lcmp(v4, v0);
  #L4a19f0.  if v2 < 0 then goto L4a1a06;
  #L4a19f4.  v0:= v3.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a19f8.  call temp:= `getAndAddRequest`(v0, v4) @signature `Lrx/internal/operators/BackpressureUtils;.getAndAddRequest:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a19fe.  call `drain`(v3) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L4a1a04.  return @kind void;
  #L4a1a06.  v0:= new `java.lang.IllegalArgumentException`;
  #L4a1a0a.  v1:= new `java.lang.StringBuilder`;
  #L4a1a0e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a1a14.  v2:= "n >= 0 required but it was " @kind object;
  #L4a1a18.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a1a1e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a1a24.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a1a2a.  v4:= temp @kind object;
  #L4a1a2c.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a1a32.  throw v0;
}
procedure `void` `setProducer`(`rx.internal.operators.OperatorGroupBy$GroupBySubscriber` v1 @kind this, `rx.Producer` v2 @kind object) @signature `Lrx/internal/operators/OperatorGroupBy$GroupBySubscriber;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a1a44.  v0:= v1.`rx.internal.operators.OperatorGroupBy$GroupBySubscriber.s` @type ^`rx.internal.producers.ProducerArbiter` @kind object;
  #L4a1a48.  call `setProducer`(v0, v2) @signature `Lrx/internal/producers/ProducerArbiter;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4a1a4e.  return @kind void;
}
