record `rx.internal.operators.SingleObserveOn` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Single$OnSubscribe` @kind interface {
  `rx.Scheduler` `rx.internal.operators.SingleObserveOn.scheduler` @AccessFlag FINAL;
  `rx.Single$OnSubscribe` `rx.internal.operators.SingleObserveOn.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleObserveOn` v0 @kind this, `rx.Single$OnSubscribe` v1 @kind object, `rx.Scheduler` v2 @kind object) @signature `Lrx/internal/operators/SingleObserveOn;.<init>:(Lrx/Single$OnSubscribe;Lrx/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4afc74.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4afc7a.  v0.`rx.internal.operators.SingleObserveOn.source` @type ^`rx.Single$OnSubscribe` := v1 @kind object;
  #L4afc7e.  v0.`rx.internal.operators.SingleObserveOn.scheduler` @type ^`rx.Scheduler` := v2 @kind object;
  #L4afc82.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleObserveOn` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/SingleObserveOn;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4afc94.  v1:= (`rx.SingleSubscriber`) v1 @kind object;
  #L4afc98.  call `call`(v0, v1) @signature `Lrx/internal/operators/SingleObserveOn;.call:(Lrx/SingleSubscriber;)V` @kind virtual;
  #L4afc9e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleObserveOn` v2 @kind this, `rx.SingleSubscriber` v3 @kind object) @signature `Lrx/internal/operators/SingleObserveOn;.call:(Lrx/SingleSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4afcb0.  v0:= v2.`rx.internal.operators.SingleObserveOn.scheduler` @type ^`rx.Scheduler` @kind object;
  #L4afcb4.  call temp:= `createWorker`(v0) @signature `Lrx/Scheduler;.createWorker:()Lrx/Scheduler$Worker;` @kind virtual;
  #L4afcba.  v0:= temp @kind object;
  #L4afcbc.  v1:= new `rx.internal.operators.SingleObserveOn$ObserveOnSingleSubscriber`;
  #L4afcc0.  call `<init>`(v1, v3, v0) @signature `Lrx/internal/operators/SingleObserveOn$ObserveOnSingleSubscriber;.<init>:(Lrx/SingleSubscriber;Lrx/Scheduler$Worker;)V` @kind direct;
  #L4afcc6.  call `add`(v3, v0) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4afccc.  call `add`(v3, v1) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4afcd2.  v3:= v2.`rx.internal.operators.SingleObserveOn.source` @type ^`rx.Single$OnSubscribe` @kind object;
  #L4afcd6.  call `call`(v3, v1) @signature `Lrx/Single$OnSubscribe;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4afcdc.  return @kind void;
}
