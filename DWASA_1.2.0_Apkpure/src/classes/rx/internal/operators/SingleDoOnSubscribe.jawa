record `rx.internal.operators.SingleDoOnSubscribe` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Single$OnSubscribe` @kind interface {
  `rx.functions.Action0` `rx.internal.operators.SingleDoOnSubscribe.onSubscribe` @AccessFlag FINAL;
  `rx.Single$OnSubscribe` `rx.internal.operators.SingleDoOnSubscribe.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleDoOnSubscribe` v0 @kind this, `rx.Single$OnSubscribe` v1 @kind object, `rx.functions.Action0` v2 @kind object) @signature `Lrx/internal/operators/SingleDoOnSubscribe;.<init>:(Lrx/Single$OnSubscribe;Lrx/functions/Action0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4af728.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4af72e.  v0.`rx.internal.operators.SingleDoOnSubscribe.source` @type ^`rx.Single$OnSubscribe` := v1 @kind object;
  #L4af732.  v0.`rx.internal.operators.SingleDoOnSubscribe.onSubscribe` @type ^`rx.functions.Action0` := v2 @kind object;
  #L4af736.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleDoOnSubscribe` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/SingleDoOnSubscribe;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4af748.  v1:= (`rx.SingleSubscriber`) v1 @kind object;
  #L4af74c.  call `call`(v0, v1) @signature `Lrx/internal/operators/SingleDoOnSubscribe;.call:(Lrx/SingleSubscriber;)V` @kind virtual;
  #L4af752.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleDoOnSubscribe` v1 @kind this, `rx.SingleSubscriber` v2 @kind object) @signature `Lrx/internal/operators/SingleDoOnSubscribe;.call:(Lrx/SingleSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af764.  v0:= v1.`rx.internal.operators.SingleDoOnSubscribe.onSubscribe` @type ^`rx.functions.Action0` @kind object;
  #L4af768.  call `call`(v0) @signature `Lrx/functions/Action0;.call:()V` @kind interface;
  #L4af76e.  v0:= v1.`rx.internal.operators.SingleDoOnSubscribe.source` @type ^`rx.Single$OnSubscribe` @kind object;
  #L4af772.  call `call`(v0, v2) @signature `Lrx/Single$OnSubscribe;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4af778.  return @kind void;
  #L4af77a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4af77c.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4af782.  call `onError`(v2, v0) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4af788.  return @kind void;
  catch `java.lang.Throwable` @[L4af764..L4af76e] goto L4af77a;
}
