record `rx.internal.operators.OnSubscribeRedo$4` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `rx.internal.operators.OnSubscribeRedo` `rx.internal.operators.OnSubscribeRedo$4.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OnSubscribeRedo$4.val$child` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OnSubscribeRedo$4.val$consumerCapacity` @AccessFlag FINAL_SYNTHETIC;
  `rx.Observable` `rx.internal.operators.OnSubscribeRedo$4.val$restarts` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicBoolean` `rx.internal.operators.OnSubscribeRedo$4.val$resumeBoundary` @AccessFlag FINAL_SYNTHETIC;
  `rx.functions.Action0` `rx.internal.operators.OnSubscribeRedo$4.val$subscribeToSource` @AccessFlag FINAL_SYNTHETIC;
  `rx.Scheduler$Worker` `rx.internal.operators.OnSubscribeRedo$4.val$worker` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeRedo$4` v0 @kind this, `rx.internal.operators.OnSubscribeRedo` v1 @kind object, `rx.Observable` v2 @kind object, `rx.Subscriber` v3 @kind object, `java.util.concurrent.atomic.AtomicLong` v4 @kind object, `rx.Scheduler$Worker` v5 @kind object, `rx.functions.Action0` v6 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v7 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$4;.<init>:(Lrx/internal/operators/OnSubscribeRedo;Lrx/Observable;Lrx/Subscriber;Ljava/util/concurrent/atomic/AtomicLong;Lrx/Scheduler$Worker;Lrx/functions/Action0;Ljava/util/concurrent/atomic/AtomicBoolean;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49c0a0.  v0.`rx.internal.operators.OnSubscribeRedo$4.this$0` @type ^`rx.internal.operators.OnSubscribeRedo` := v1 @kind object;
  #L49c0a4.  v0.`rx.internal.operators.OnSubscribeRedo$4.val$restarts` @type ^`rx.Observable` := v2 @kind object;
  #L49c0a8.  v0.`rx.internal.operators.OnSubscribeRedo$4.val$child` @type ^`rx.Subscriber` := v3 @kind object;
  #L49c0ac.  v0.`rx.internal.operators.OnSubscribeRedo$4.val$consumerCapacity` @type ^`java.util.concurrent.atomic.AtomicLong` := v4 @kind object;
  #L49c0b0.  v0.`rx.internal.operators.OnSubscribeRedo$4.val$worker` @type ^`rx.Scheduler$Worker` := v5 @kind object;
  #L49c0b4.  v0.`rx.internal.operators.OnSubscribeRedo$4.val$subscribeToSource` @type ^`rx.functions.Action0` := v6 @kind object;
  #L49c0b8.  v0.`rx.internal.operators.OnSubscribeRedo$4.val$resumeBoundary` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v7 @kind object;
  #L49c0bc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49c0c2.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeRedo$4` v3 @kind this) @signature `Lrx/internal/operators/OnSubscribeRedo$4;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49c0d4.  v0:= v3.`rx.internal.operators.OnSubscribeRedo$4.val$restarts` @type ^`rx.Observable` @kind object;
  #L49c0d8.  v1:= new `rx.internal.operators.OnSubscribeRedo$4$1`;
  #L49c0dc.  v2:= v3.`rx.internal.operators.OnSubscribeRedo$4.val$child` @type ^`rx.Subscriber` @kind object;
  #L49c0e0.  call `<init>`(v1, v3, v2) @signature `Lrx/internal/operators/OnSubscribeRedo$4$1;.<init>:(Lrx/internal/operators/OnSubscribeRedo$4;Lrx/Subscriber;)V` @kind direct;
  #L49c0e6.  call temp:= `unsafeSubscribe`(v0, v1) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L49c0ec.  return @kind void;
}
