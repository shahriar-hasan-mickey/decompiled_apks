record `rx.internal.operators.OperatorWindowWithSize$WindowOverlap` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class, `rx.functions.Action0` @kind interface {
  `rx.Subscriber` `rx.internal.operators.OperatorWindowWithSize$WindowOverlap.actual` @AccessFlag FINAL;
  `rx.Subscription` `rx.internal.operators.OperatorWindowWithSize$WindowOverlap.cancel` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorWindowWithSize$WindowOverlap.done` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.OperatorWindowWithSize$WindowOverlap.drainWip` @AccessFlag FINAL;
  `java.lang.Throwable` `rx.internal.operators.OperatorWindowWithSize$WindowOverlap.error` @AccessFlag ;
  `int` `rx.internal.operators.OperatorWindowWithSize$WindowOverlap.index` @AccessFlag ;
  `int` `rx.internal.operators.OperatorWindowWithSize$WindowOverlap.produced` @AccessFlag ;
  `java.util.Queue` `rx.internal.operators.OperatorWindowWithSize$WindowOverlap.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OperatorWindowWithSize$WindowOverlap.requested` @AccessFlag FINAL;
  `int` `rx.internal.operators.OperatorWindowWithSize$WindowOverlap.size` @AccessFlag FINAL;
  `int` `rx.internal.operators.OperatorWindowWithSize$WindowOverlap.skip` @AccessFlag FINAL;
  `java.util.ArrayDeque` `rx.internal.operators.OperatorWindowWithSize$WindowOverlap.windows` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `rx.internal.operators.OperatorWindowWithSize$WindowOverlap.wip` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorWindowWithSize$WindowOverlap` v2 @kind this, `rx.Subscriber` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.<init>:(Lrx/Subscriber;II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4acc3c.  call `<init>`(v2) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4acc42.  v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.actual` @type ^`rx.Subscriber` := v3 @kind object;
  #L4acc46.  v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.size` @type ^`int` := v4;
  #L4acc4a.  v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.skip` @type ^`int` := v5;
  #L4acc4e.  v3:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4acc52.  v0:= 1I;
  #L4acc54.  call `<init>`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4acc5a.  v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v3 @kind object;
  #L4acc5e.  v3:= new `java.util.ArrayDeque`;
  #L4acc62.  call `<init>`(v3) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4acc68.  v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.windows` @type ^`java.util.ArrayDeque` := v3 @kind object;
  #L4acc6c.  v3:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4acc70.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4acc76.  v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.drainWip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v3 @kind object;
  #L4acc7a.  v3:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4acc7e.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4acc84.  v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v3 @kind object;
  #L4acc88.  call temp:= `create`(v2) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L4acc8e.  v3:= temp @kind object;
  #L4acc90.  v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.cancel` @type ^`rx.Subscription` := v3 @kind object;
  #L4acc94.  v3:= v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.cancel` @type ^`rx.Subscription` @kind object;
  #L4acc98.  call `add`(v2, v3) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4acc9e.  v0:= 0L;
  #L4acca2.  call `request`(v2, v0) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.request:(J)V` @kind virtual;
  #L4acca8.  v3:= v5 + -1;
  #L4accac.  v4:= v4 + v3 @kind int;
  #L4accae.  v4:= v4 / v5 @kind int;
  #L4accb0.  v3:= new `rx.internal.util.atomic.SpscLinkedArrayQueue`;
  #L4accb4.  call `<init>`(v3, v4) @signature `Lrx/internal/util/atomic/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4accba.  v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.queue` @type ^`java.util.Queue` := v3 @kind object;
  #L4accbe.  return @kind void;
}
procedure `void` `access$300`(`rx.internal.operators.OperatorWindowWithSize$WindowOverlap` v0 @kind object, `long` v1 ) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.access$300:(Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;J)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4accd0.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.request:(J)V` @kind virtual;
  #L4accd6.  return @kind void;
}
procedure `void` `access$400`(`rx.internal.operators.OperatorWindowWithSize$WindowOverlap` v0 @kind object, `long` v1 ) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.access$400:(Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;J)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4acce8.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.request:(J)V` @kind virtual;
  #L4accee.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorWindowWithSize$WindowOverlap` v1 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4acd00.  v0:= v1.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4acd04.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4acd0a.  v0:= temp;
  #L4acd0c.  if v0 != 0 then goto L4acd16;
  #L4acd10.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.unsubscribe:()V` @kind virtual;
  #L4acd16.  return @kind void;
}
procedure `boolean` `checkTerminated`(`rx.internal.operators.OperatorWindowWithSize$WindowOverlap` v2 @kind this, `boolean` v3 , `boolean` v4 , `rx.Subscriber` v5 @kind object, `java.util.Queue` v6 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.checkTerminated:(ZZLrx/Subscriber;Ljava/util/Queue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4acbd0.  call temp:= `isUnsubscribed`(v5) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4acbd6.  v0:= temp;
  #L4acbd8.  v1:= 1I;
  #L4acbda.  if v0 == 0 then goto L4acbe6;
  #L4acbde.  call `clear`(v6) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L4acbe4.  return v1;
  #L4acbe6.  if v3 == 0 then goto L4acc0c;
  #L4acbea.  v3:= v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.error` @type ^`java.lang.Throwable` @kind object;
  #L4acbee.  if v3 == 0 then goto L4acc00;
  #L4acbf2.  call `clear`(v6) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L4acbf8.  call `onError`(v5, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4acbfe.  return v1;
  #L4acc00.  if v4 == 0 then goto L4acc0c;
  #L4acc04.  call `onCompleted`(v5) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4acc0a.  return v1;
  #L4acc0c.  v3:= 0I;
  #L4acc0e.  return v3;
}
procedure `rx.Producer` `createProducer`(`rx.internal.operators.OperatorWindowWithSize$WindowOverlap` v1 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.createProducer:()Lrx/Producer;` @AccessFlag  {
    temp;
    v0;

  #L4acc20.  v0:= new `rx.internal.operators.OperatorWindowWithSize$WindowOverlap$WindowOverlapProducer`;
  #L4acc24.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap$WindowOverlapProducer;.<init>:(Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;)V` @kind direct;
  #L4acc2a.  return v0 @kind object;
}
procedure `void` `drain`(`rx.internal.operators.OperatorWindowWithSize$WindowOverlap` v14 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4acd28.  v0:= v14.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.drainWip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4acd2c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4acd32.  v1:= temp;
  #L4acd34.  if v1 == 0 then goto L4acd3a;
  #L4acd38.  return @kind void;
  #L4acd3a.  v1:= v14.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.actual` @type ^`rx.Subscriber` @kind object;
  #L4acd3e.  v2:= v14.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.queue` @type ^`java.util.Queue` @kind object;
  #L4acd42.  v3:= 1I;
  #L4acd44.  v4:= 1I;
  #L4acd46.  v5:= v14.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4acd4a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4acd50.  v5:= temp @kind wide;
  #L4acd52.  v7:= 0L;
  #L4acd56.  v9:= v7 @kind wide;
  #L4acd58.  v11:= lcmp(v9, v5);
  #L4acd5c.  if v11 == 0 then goto L4acd9c;
  #L4acd60.  v11:= v14.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.done` @type ^`boolean` @kind boolean;
  #L4acd64.  call temp:= `poll`(v2) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4acd6a.  v12:= temp @kind object;
  #L4acd6c.  v12:= (`rx.subjects.Subject`) v12 @kind object;
  #L4acd70.  if v12 != 0 then goto L4acd78;
  #L4acd74.  v13:= 1I;
  #L4acd76.  goto L4acd7a;
  #L4acd78.  v13:= 0I;
  #L4acd7a.  call temp:= `checkTerminated`(v14, v11, v13, v1, v2) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.checkTerminated:(ZZLrx/Subscriber;Ljava/util/Queue;)Z` @kind virtual;
  #L4acd80.  v11:= temp;
  #L4acd82.  if v11 == 0 then goto L4acd88;
  #L4acd86.  return @kind void;
  #L4acd88.  if v13 == 0 then goto L4acd8e;
  #L4acd8c.  goto L4acd9c;
  #L4acd8e.  call `onNext`(v1, v12) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4acd94.  v11:= 1L;
  #L4acd98.  v9:= v9 + v11 @kind long;
  #L4acd9a.  goto L4acd58;
  #L4acd9c.  v11:= lcmp(v9, v5);
  #L4acda0.  if v11 != 0 then goto L4acdbe;
  #L4acda4.  v11:= v14.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.done` @type ^`boolean` @kind boolean;
  #L4acda8.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L4acdae.  v12:= temp;
  #L4acdb0.  call temp:= `checkTerminated`(v14, v11, v12, v1, v2) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.checkTerminated:(ZZLrx/Subscriber;Ljava/util/Queue;)Z` @kind virtual;
  #L4acdb6.  v11:= temp;
  #L4acdb8.  if v11 == 0 then goto L4acdbe;
  #L4acdbc.  return @kind void;
  #L4acdbe.  v11:= lcmp(v9, v7);
  #L4acdc2.  if v11 == 0 then goto L4acde4;
  #L4acdc6.  v7:= 9223372036854775807L;
  #L4acdd0.  v11:= lcmp(v5, v7);
  #L4acdd4.  if v11 == 0 then goto L4acde4;
  #L4acdd8.  v5:= v14.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4acddc.  v6:= -v9 @kind long;
  #L4acdde.  call temp:= `addAndGet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4acde4.  v4:= -v4 @kind int;
  #L4acde6.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4acdec.  v4:= temp;
  #L4acdee.  if v4 != 0 then goto L4acd46;
  #L4acdf2.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorWindowWithSize$WindowOverlap` v2 @kind this) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ace04.  v0:= v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L4ace08.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4ace0e.  v0:= temp @kind object;
  #L4ace10.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ace16.  v1:= temp;
  #L4ace18.  if v1 == 0 then goto L4ace30;
  #L4ace1c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ace22.  v1:= temp @kind object;
  #L4ace24.  v1:= (`rx.subjects.Subject`) v1 @kind object;
  #L4ace28.  call `onCompleted`(v1) @signature `Lrx/subjects/Subject;.onCompleted:()V` @kind virtual;
  #L4ace2e.  goto L4ace10;
  #L4ace30.  v0:= v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L4ace34.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L4ace3a.  v0:= 1I;
  #L4ace3c.  v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.done` @type ^`boolean` := v0 @kind boolean;
  #L4ace40.  call `drain`(v2) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.drain:()V` @kind virtual;
  #L4ace46.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorWindowWithSize$WindowOverlap` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ace58.  v0:= v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L4ace5c.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4ace62.  v0:= temp @kind object;
  #L4ace64.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ace6a.  v1:= temp;
  #L4ace6c.  if v1 == 0 then goto L4ace84;
  #L4ace70.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ace76.  v1:= temp @kind object;
  #L4ace78.  v1:= (`rx.subjects.Subject`) v1 @kind object;
  #L4ace7c.  call `onError`(v1, v3) @signature `Lrx/subjects/Subject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ace82.  goto L4ace64;
  #L4ace84.  v0:= v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L4ace88.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L4ace8e.  v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.error` @type ^`java.lang.Throwable` := v3 @kind object;
  #L4ace92.  v3:= 1I;
  #L4ace94.  v2.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.done` @type ^`boolean` := v3 @kind boolean;
  #L4ace98.  call `drain`(v2) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.drain:()V` @kind virtual;
  #L4ace9e.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorWindowWithSize$WindowOverlap` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4aceb0.  v0:= v4.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.index` @type ^`int`;
  #L4aceb4.  v1:= v4.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L4aceb8.  if v0 != 0 then goto L4acef8;
  #L4acebc.  v2:= v4.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.actual` @type ^`rx.Subscriber` @kind object;
  #L4acec0.  call temp:= `isUnsubscribed`(v2) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L4acec6.  v2:= temp;
  #L4acec8.  if v2 != 0 then goto L4acef8;
  #L4acecc.  v2:= v4.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4aced0.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4aced6.  v2:= 16I;
  #L4aceda.  call temp:= `create`(v2, v4) @signature `Lrx/subjects/UnicastSubject;.create:(ILrx/functions/Action0;)Lrx/subjects/UnicastSubject;` @kind static;
  #L4acee0.  v2:= temp @kind object;
  #L4acee2.  call temp:= `offer`(v1, v2) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4acee8.  v3:= v4.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.queue` @type ^`java.util.Queue` @kind object;
  #L4aceec.  call temp:= `offer`(v3, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4acef2.  call `drain`(v4) @signature `Lrx/internal/operators/OperatorWindowWithSize$WindowOverlap;.drain:()V` @kind virtual;
  #L4acef8.  v2:= v4.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.windows` @type ^`java.util.ArrayDeque` @kind object;
  #L4acefc.  call temp:= `iterator`(v2) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4acf02.  v2:= temp @kind object;
  #L4acf04.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4acf0a.  v3:= temp;
  #L4acf0c.  if v3 == 0 then goto L4acf24;
  #L4acf10.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4acf16.  v3:= temp @kind object;
  #L4acf18.  v3:= (`rx.subjects.Subject`) v3 @kind object;
  #L4acf1c.  call `onNext`(v3, v5) @signature `Lrx/subjects/Subject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4acf22.  goto L4acf04;
  #L4acf24.  v5:= v4.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.produced` @type ^`int`;
  #L4acf28.  v5:= v5 + 1;
  #L4acf2c.  v2:= v4.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.size` @type ^`int`;
  #L4acf30.  if v5 != v2 then goto L4acf56;
  #L4acf34.  v2:= v4.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.skip` @type ^`int`;
  #L4acf38.  v5:= v5 - v2 @kind int;
  #L4acf3a.  v4.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.produced` @type ^`int` := v5;
  #L4acf3e.  call temp:= `poll`(v1) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4acf44.  v5:= temp @kind object;
  #L4acf46.  v5:= (`rx.subjects.Subject`) v5 @kind object;
  #L4acf4a.  if v5 == 0 then goto L4acf5a;
  #L4acf4e.  call `onCompleted`(v5) @signature `Lrx/subjects/Subject;.onCompleted:()V` @kind virtual;
  #L4acf54.  goto L4acf5a;
  #L4acf56.  v4.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.produced` @type ^`int` := v5;
  #L4acf5a.  v0:= v0 + 1;
  #L4acf5e.  v5:= v4.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.skip` @type ^`int`;
  #L4acf62.  if v0 != v5 then goto L4acf6e;
  #L4acf66.  v5:= 0I;
  #L4acf68.  v4.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.index` @type ^`int` := v5;
  #L4acf6c.  goto L4acf72;
  #L4acf6e.  v4.`rx.internal.operators.OperatorWindowWithSize$WindowOverlap.index` @type ^`int` := v0;
  #L4acf72.  return @kind void;
}
