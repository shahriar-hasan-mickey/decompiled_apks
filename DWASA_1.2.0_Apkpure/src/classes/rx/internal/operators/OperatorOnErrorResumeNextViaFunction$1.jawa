record `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$1` @kind class @AccessFlag FINAL extends `rx.functions.Func1` @kind interface {
  `rx.functions.Func1` `rx.internal.operators.OperatorOnErrorResumeNextViaFunction$1.val$resumeFunction` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$1` v0 @kind this, `rx.functions.Func1` v1 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$1;.<init>:(Lrx/functions/Func1;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a4f18.  v0.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$1.val$resumeFunction` @type ^`rx.functions.Func1` := v1 @kind object;
  #L4a4f1c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a4f22.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a4ed0.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L4a4ed4.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$1;.call:(Ljava/lang/Throwable;)Lrx/Observable;` @kind virtual;
  #L4a4eda.  v1:= temp @kind object;
  #L4a4edc.  return v1 @kind object;
}
procedure `rx.Observable` `call`(`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction$1;.call:(Ljava/lang/Throwable;)Lrx/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a4ef0.  v0:= v1.`rx.internal.operators.OperatorOnErrorResumeNextViaFunction$1.val$resumeFunction` @type ^`rx.functions.Func1` @kind object;
  #L4a4ef4.  call temp:= `call`(v0, v2) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a4efa.  v2:= temp @kind object;
  #L4a4efc.  call temp:= `just`(v2) @signature `Lrx/Observable;.just:(Ljava/lang/Object;)Lrx/Observable;` @kind static;
  #L4a4f02.  v2:= temp @kind object;
  #L4a4f04.  return v2 @kind object;
}
