record `rx.internal.operators.CachedObservable` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable` @kind class {
  `rx.internal.operators.CachedObservable$CacheState` `rx.internal.operators.CachedObservable.state` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.CachedObservable` v0 @kind this, `rx.Observable$OnSubscribe` v1 @kind object, `rx.internal.operators.CachedObservable$CacheState` v2 @kind object) @signature `Lrx/internal/operators/CachedObservable;.<init>:(Lrx/Observable$OnSubscribe;Lrx/internal/operators/CachedObservable$CacheState;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L494384.  call `<init>`(v0, v1) @signature `Lrx/Observable;.<init>:(Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L49438a.  v0.`rx.internal.operators.CachedObservable.state` @type ^`rx.internal.operators.CachedObservable$CacheState` := v2 @kind object;
  #L49438e.  return @kind void;
}
procedure `rx.internal.operators.CachedObservable` `from`(`rx.Observable` v1 @kind object) @signature `Lrx/internal/operators/CachedObservable;.from:(Lrx/Observable;)Lrx/internal/operators/CachedObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49431c.  v0:= 16I;
  #L494320.  call temp:= `from`(v1, v0) @signature `Lrx/internal/operators/CachedObservable;.from:(Lrx/Observable;I)Lrx/internal/operators/CachedObservable;` @kind static;
  #L494326.  v1:= temp @kind object;
  #L494328.  return v1 @kind object;
}
procedure `rx.internal.operators.CachedObservable` `from`(`rx.Observable` v1 @kind object, `int` v2 ) @signature `Lrx/internal/operators/CachedObservable;.from:(Lrx/Observable;I)Lrx/internal/operators/CachedObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49433c.  v0:= 1I;
  #L49433e.  if v2 < v0 then goto L494362;
  #L494342.  v0:= new `rx.internal.operators.CachedObservable$CacheState`;
  #L494346.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/CachedObservable$CacheState;.<init>:(Lrx/Observable;I)V` @kind direct;
  #L49434c.  v1:= new `rx.internal.operators.CachedObservable$CachedSubscribe`;
  #L494350.  call `<init>`(v1, v0) @signature `Lrx/internal/operators/CachedObservable$CachedSubscribe;.<init>:(Lrx/internal/operators/CachedObservable$CacheState;)V` @kind direct;
  #L494356.  v2:= new `rx.internal.operators.CachedObservable`;
  #L49435a.  call `<init>`(v2, v1, v0) @signature `Lrx/internal/operators/CachedObservable;.<init>:(Lrx/Observable$OnSubscribe;Lrx/internal/operators/CachedObservable$CacheState;)V` @kind direct;
  #L494360.  return v2 @kind object;
  #L494362.  v1:= new `java.lang.IllegalArgumentException`;
  #L494366.  v2:= "capacityHint > 0 required" @kind object;
  #L49436a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L494370.  throw v1;
}
procedure `boolean` `hasObservers`(`rx.internal.operators.CachedObservable` v1 @kind this) @signature `Lrx/internal/operators/CachedObservable;.hasObservers:()Z` @AccessFlag  {
    temp;
    v0;

  #L4942d8.  v0:= v1.`rx.internal.operators.CachedObservable.state` @type ^`rx.internal.operators.CachedObservable$CacheState` @kind object;
  #L4942dc.  v0:= v0.`rx.internal.operators.CachedObservable$CacheState.producers` @type ^`rx.internal.operators.CachedObservable$ReplayProducer`[] @kind object;
  #L4942e0.  v0:= length @variable v0;
  #L4942e2.  if v0 == 0 then goto L4942ea;
  #L4942e6.  v0:= 1I;
  #L4942e8.  goto L4942ec;
  #L4942ea.  v0:= 0I;
  #L4942ec.  return v0;
}
procedure `boolean` `isConnected`(`rx.internal.operators.CachedObservable` v1 @kind this) @signature `Lrx/internal/operators/CachedObservable;.isConnected:()Z` @AccessFlag  {
    temp;
    v0;

  #L494300.  v0:= v1.`rx.internal.operators.CachedObservable.state` @type ^`rx.internal.operators.CachedObservable$CacheState` @kind object;
  #L494304.  v0:= v0.`rx.internal.operators.CachedObservable$CacheState.isConnected` @type ^`boolean` @kind boolean;
  #L494308.  return v0;
}
