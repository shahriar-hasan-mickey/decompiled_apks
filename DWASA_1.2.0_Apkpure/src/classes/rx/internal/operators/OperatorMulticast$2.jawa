record `rx.internal.operators.OperatorMulticast$2` @kind class @AccessFlag  extends `rx.functions.Action0` @kind interface {
  `rx.internal.operators.OperatorMulticast` `rx.internal.operators.OperatorMulticast$2.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OperatorMulticast$2.val$gs` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorMulticast$2` v0 @kind this, `rx.internal.operators.OperatorMulticast` v1 @kind object, `java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lrx/internal/operators/OperatorMulticast$2;.<init>:(Lrx/internal/operators/OperatorMulticast;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a3c0c.  v0.`rx.internal.operators.OperatorMulticast$2.this$0` @type ^`rx.internal.operators.OperatorMulticast` := v1 @kind object;
  #L4a3c10.  v0.`rx.internal.operators.OperatorMulticast$2.val$gs` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4a3c14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a3c1a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorMulticast$2` v4 @kind this) @signature `Lrx/internal/operators/OperatorMulticast$2;.call:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a3c2c.  v0:= v4.`rx.internal.operators.OperatorMulticast$2.this$0` @type ^`rx.internal.operators.OperatorMulticast` @kind object;
  #L4a3c30.  v0:= v0.`rx.internal.operators.OperatorMulticast.guard` @type ^`java.lang.Object` @kind object;
  #L4a3c34.  @monitorenter v0
  #L4a3c36.  v1:= v4.`rx.internal.operators.OperatorMulticast$2.this$0` @type ^`rx.internal.operators.OperatorMulticast` @kind object;
  #L4a3c3a.  v1:= v1.`rx.internal.operators.OperatorMulticast.guardedSubscription` @type ^`rx.Subscription` @kind object;
  #L4a3c3e.  v2:= v4.`rx.internal.operators.OperatorMulticast$2.val$gs` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a3c42.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a3c48.  v2:= temp @kind object;
  #L4a3c4a.  if v1 != v2 then goto L4a3c84;
  #L4a3c4e.  v1:= v4.`rx.internal.operators.OperatorMulticast$2.this$0` @type ^`rx.internal.operators.OperatorMulticast` @kind object;
  #L4a3c52.  v1:= v1.`rx.internal.operators.OperatorMulticast.subscription` @type ^`rx.Subscriber` @kind object;
  #L4a3c56.  v2:= v4.`rx.internal.operators.OperatorMulticast$2.this$0` @type ^`rx.internal.operators.OperatorMulticast` @kind object;
  #L4a3c5a.  v3:= 0I;
  #L4a3c5c.  v2.`rx.internal.operators.OperatorMulticast.subscription` @type ^`rx.Subscriber` := v3 @kind object;
  #L4a3c60.  v2:= v4.`rx.internal.operators.OperatorMulticast$2.this$0` @type ^`rx.internal.operators.OperatorMulticast` @kind object;
  #L4a3c64.  v2.`rx.internal.operators.OperatorMulticast.guardedSubscription` @type ^`rx.Subscription` := v3 @kind object;
  #L4a3c68.  v2:= v4.`rx.internal.operators.OperatorMulticast$2.this$0` @type ^`rx.internal.operators.OperatorMulticast` @kind object;
  #L4a3c6c.  v2:= v2.`rx.internal.operators.OperatorMulticast.connectedSubject` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a3c70.  call `set`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4a3c76.  @monitorexit v0
  #L4a3c78.  if v1 == 0 then goto L4a3c82;
  #L4a3c7c.  call `unsubscribe`(v1) @signature `Lrx/Subscription;.unsubscribe:()V` @kind interface;
  #L4a3c82.  return @kind void;
  #L4a3c84.  @monitorexit v0
  #L4a3c86.  return @kind void;
  #L4a3c88.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a3c8a.  @monitorexit v0
  #L4a3c8c.  throw v1;
  catch `java.lang.Throwable` @[L4a3c36..L4a3c78] goto L4a3c88;
  catch `java.lang.Throwable` @[L4a3c84..L4a3c8c] goto L4a3c88;
}
