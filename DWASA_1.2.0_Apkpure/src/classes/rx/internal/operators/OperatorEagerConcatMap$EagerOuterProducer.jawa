record `rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `rx.Producer` @kind interface {
  `rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber` `rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer.parent` @AccessFlag FINAL;
}
global `long` `@@rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer` v0 @kind this, `rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber` v1 @kind object) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterProducer;.<init>:(Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a0c80.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a0c86.  v0.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer.parent` @type ^`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber` := v1 @kind object;
  #L4a0c8a.  return @kind void;
}
procedure `void` `request`(`rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer` v3 @kind this, `long` v4 ) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterProducer;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a0c9c.  v0:= 0L;
  #L4a0ca0.  v2:= lcmp(v4, v0);
  #L4a0ca4.  if v2 < 0 then goto L4a0cc2;
  #L4a0ca8.  v2:= lcmp(v4, v0);
  #L4a0cac.  if v2 <= 0 then goto L4a0cc0;
  #L4a0cb0.  call temp:= `getAndAddRequest`(v3, v4) @signature `Lrx/internal/operators/BackpressureUtils;.getAndAddRequest:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a0cb6.  v4:= v3.`rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer.parent` @type ^`rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber` @kind object;
  #L4a0cba.  call `drain`(v4) @signature `Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;.drain:()V` @kind virtual;
  #L4a0cc0.  return @kind void;
  #L4a0cc2.  v0:= new `java.lang.IllegalStateException`;
  #L4a0cc6.  v1:= new `java.lang.StringBuilder`;
  #L4a0cca.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a0cd0.  v2:= "n >= 0 required but it was " @kind object;
  #L4a0cd4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a0cda.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a0ce0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a0ce6.  v4:= temp @kind object;
  #L4a0ce8.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a0cee.  throw v0;
}
