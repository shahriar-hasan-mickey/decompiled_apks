record `rx.internal.operators.OperatorZipIterable$1` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `boolean` `rx.internal.operators.OperatorZipIterable$1.done` @AccessFlag ;
  `rx.internal.operators.OperatorZipIterable` `rx.internal.operators.OperatorZipIterable$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.util.Iterator` `rx.internal.operators.OperatorZipIterable$1.val$iterator` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OperatorZipIterable$1.val$subscriber` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorZipIterable$1` v0 @kind this, `rx.internal.operators.OperatorZipIterable` v1 @kind object, `rx.Subscriber` v2 @kind object, `rx.Subscriber` v3 @kind object, `java.util.Iterator` v4 @kind object) @signature `Lrx/internal/operators/OperatorZipIterable$1;.<init>:(Lrx/internal/operators/OperatorZipIterable;Lrx/Subscriber;Lrx/Subscriber;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4af01c.  v0.`rx.internal.operators.OperatorZipIterable$1.this$0` @type ^`rx.internal.operators.OperatorZipIterable` := v1 @kind object;
  #L4af020.  v0.`rx.internal.operators.OperatorZipIterable$1.val$subscriber` @type ^`rx.Subscriber` := v3 @kind object;
  #L4af024.  v0.`rx.internal.operators.OperatorZipIterable$1.val$iterator` @type ^`java.util.Iterator` := v4 @kind object;
  #L4af028.  call `<init>`(v0, v2) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4af02e.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorZipIterable$1` v1 @kind this) @signature `Lrx/internal/operators/OperatorZipIterable$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af040.  v0:= v1.`rx.internal.operators.OperatorZipIterable$1.done` @type ^`boolean` @kind boolean;
  #L4af044.  if v0 == 0 then goto L4af04a;
  #L4af048.  return @kind void;
  #L4af04a.  v0:= 1I;
  #L4af04c.  v1.`rx.internal.operators.OperatorZipIterable$1.done` @type ^`boolean` := v0 @kind boolean;
  #L4af050.  v0:= v1.`rx.internal.operators.OperatorZipIterable$1.val$subscriber` @type ^`rx.Subscriber` @kind object;
  #L4af054.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4af05a.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorZipIterable$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorZipIterable$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af06c.  v0:= v1.`rx.internal.operators.OperatorZipIterable$1.done` @type ^`boolean` @kind boolean;
  #L4af070.  if v0 == 0 then goto L4af07c;
  #L4af074.  call `throwIfFatal`(v2) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4af07a.  return @kind void;
  #L4af07c.  v0:= 1I;
  #L4af07e.  v1.`rx.internal.operators.OperatorZipIterable$1.done` @type ^`boolean` := v0 @kind boolean;
  #L4af082.  v0:= v1.`rx.internal.operators.OperatorZipIterable$1.val$subscriber` @type ^`rx.Subscriber` @kind object;
  #L4af086.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4af08c.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorZipIterable$1` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lrx/internal/operators/OperatorZipIterable$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4af0a0.  v0:= v3.`rx.internal.operators.OperatorZipIterable$1.done` @type ^`boolean` @kind boolean;
  #L4af0a4.  if v0 == 0 then goto L4af0aa;
  #L4af0a8.  return @kind void;
  #L4af0aa.  v0:= v3.`rx.internal.operators.OperatorZipIterable$1.val$subscriber` @type ^`rx.Subscriber` @kind object;
  #L4af0ae.  v1:= v3.`rx.internal.operators.OperatorZipIterable$1.this$0` @type ^`rx.internal.operators.OperatorZipIterable` @kind object;
  #L4af0b2.  v1:= v1.`rx.internal.operators.OperatorZipIterable.zipFunction` @type ^`rx.functions.Func2` @kind object;
  #L4af0b6.  v2:= v3.`rx.internal.operators.OperatorZipIterable$1.val$iterator` @type ^`java.util.Iterator` @kind object;
  #L4af0ba.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4af0c0.  v2:= temp @kind object;
  #L4af0c2.  call temp:= `call`(v1, v4, v2) @signature `Lrx/functions/Func2;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4af0c8.  v4:= temp @kind object;
  #L4af0ca.  call `onNext`(v0, v4) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4af0d0.  v4:= v3.`rx.internal.operators.OperatorZipIterable$1.val$iterator` @type ^`java.util.Iterator` @kind object;
  #L4af0d4.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4af0da.  v4:= temp;
  #L4af0dc.  if v4 != 0 then goto L4af0f0;
  #L4af0e0.  call `onCompleted`(v3) @signature `Lrx/internal/operators/OperatorZipIterable$1;.onCompleted:()V` @kind virtual;
  #L4af0e6.  goto L4af0f0;
  #L4af0e8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4af0ea.  call `throwOrReport`(v4, v3) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L4af0f0.  return @kind void;
  catch `java.lang.Throwable` @[L4af0aa..L4af0e6] goto L4af0e8;
}
