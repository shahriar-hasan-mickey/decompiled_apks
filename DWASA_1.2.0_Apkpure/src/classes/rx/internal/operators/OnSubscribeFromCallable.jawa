record `rx.internal.operators.OnSubscribeFromCallable` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `java.util.concurrent.Callable` `rx.internal.operators.OnSubscribeFromCallable.resultFactory` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeFromCallable` v0 @kind this, `java.util.concurrent.Callable` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L498d9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L498da2.  v0.`rx.internal.operators.OnSubscribeFromCallable.resultFactory` @type ^`java.util.concurrent.Callable` := v1 @kind object;
  #L498da6.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeFromCallable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromCallable;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L498db8.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L498dbc.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeFromCallable;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L498dc2.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeFromCallable` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromCallable;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L498dd4.  v0:= new `rx.internal.producers.SingleDelayedProducer`;
  #L498dd8.  call `<init>`(v0, v3) @signature `Lrx/internal/producers/SingleDelayedProducer;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L498dde.  call `setProducer`(v3, v0) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L498de4.  v1:= v2.`rx.internal.operators.OnSubscribeFromCallable.resultFactory` @type ^`java.util.concurrent.Callable` @kind object;
  #L498de8.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L498dee.  v1:= temp @kind object;
  #L498df0.  call `setValue`(v0, v1) @signature `Lrx/internal/producers/SingleDelayedProducer;.setValue:(Ljava/lang/Object;)V` @kind virtual;
  #L498df6.  goto L498e00;
  #L498df8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L498dfa.  call `throwOrReport`(v0, v3) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;)V` @kind static;
  #L498e00.  return @kind void;
  catch `java.lang.Throwable` @[L498de4..L498df6] goto L498df8;
}
