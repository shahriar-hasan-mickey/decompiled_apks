record `rx.internal.operators.OnSubscribeSingle$1` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `java.lang.Object` `rx.internal.operators.OnSubscribeSingle$1.emission` @AccessFlag PRIVATE;
  `boolean` `rx.internal.operators.OnSubscribeSingle$1.emittedTooMany` @AccessFlag PRIVATE;
  `boolean` `rx.internal.operators.OnSubscribeSingle$1.itemEmitted` @AccessFlag PRIVATE;
  `rx.internal.operators.OnSubscribeSingle` `rx.internal.operators.OnSubscribeSingle$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.SingleSubscriber` `rx.internal.operators.OnSubscribeSingle$1.val$child` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeSingle$1` v0 @kind this, `rx.internal.operators.OnSubscribeSingle` v1 @kind object, `rx.SingleSubscriber` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeSingle$1;.<init>:(Lrx/internal/operators/OnSubscribeSingle;Lrx/SingleSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49ce68.  v0.`rx.internal.operators.OnSubscribeSingle$1.this$0` @type ^`rx.internal.operators.OnSubscribeSingle` := v1 @kind object;
  #L49ce6c.  v0.`rx.internal.operators.OnSubscribeSingle$1.val$child` @type ^`rx.SingleSubscriber` := v2 @kind object;
  #L49ce70.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L49ce76.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeSingle$1` v3 @kind this) @signature `Lrx/internal/operators/OnSubscribeSingle$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49ce88.  v0:= v3.`rx.internal.operators.OnSubscribeSingle$1.emittedTooMany` @type ^`boolean` @kind boolean;
  #L49ce8c.  if v0 == 0 then goto L49ce92;
  #L49ce90.  goto L49cec2;
  #L49ce92.  v0:= v3.`rx.internal.operators.OnSubscribeSingle$1.itemEmitted` @type ^`boolean` @kind boolean;
  #L49ce96.  if v0 == 0 then goto L49ceaa;
  #L49ce9a.  v0:= v3.`rx.internal.operators.OnSubscribeSingle$1.val$child` @type ^`rx.SingleSubscriber` @kind object;
  #L49ce9e.  v1:= v3.`rx.internal.operators.OnSubscribeSingle$1.emission` @type ^`java.lang.Object` @kind object;
  #L49cea2.  call `onSuccess`(v0, v1) @signature `Lrx/SingleSubscriber;.onSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L49cea8.  goto L49cec2;
  #L49ceaa.  v0:= v3.`rx.internal.operators.OnSubscribeSingle$1.val$child` @type ^`rx.SingleSubscriber` @kind object;
  #L49ceae.  v1:= new `java.util.NoSuchElementException`;
  #L49ceb2.  v2:= "Observable emitted no items" @kind object;
  #L49ceb6.  call `<init>`(v1, v2) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49cebc.  call `onError`(v0, v1) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49cec2.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeSingle$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeSingle$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ced4.  v0:= v1.`rx.internal.operators.OnSubscribeSingle$1.val$child` @type ^`rx.SingleSubscriber` @kind object;
  #L49ced8.  call `onError`(v0, v2) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49cede.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OnSubscribeSingle$1;.unsubscribe:()V` @kind virtual;
  #L49cee4.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeSingle$1` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeSingle$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49cef8.  v0:= v2.`rx.internal.operators.OnSubscribeSingle$1.itemEmitted` @type ^`boolean` @kind boolean;
  #L49cefc.  v1:= 1I;
  #L49cefe.  if v0 == 0 then goto L49cf26;
  #L49cf02.  v2.`rx.internal.operators.OnSubscribeSingle$1.emittedTooMany` @type ^`boolean` := v1 @kind boolean;
  #L49cf06.  v3:= v2.`rx.internal.operators.OnSubscribeSingle$1.val$child` @type ^`rx.SingleSubscriber` @kind object;
  #L49cf0a.  v0:= new `java.lang.IllegalArgumentException`;
  #L49cf0e.  v1:= "Observable emitted too many elements" @kind object;
  #L49cf12.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49cf18.  call `onError`(v3, v0) @signature `Lrx/SingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49cf1e.  call `unsubscribe`(v2) @signature `Lrx/internal/operators/OnSubscribeSingle$1;.unsubscribe:()V` @kind virtual;
  #L49cf24.  goto L49cf2e;
  #L49cf26.  v2.`rx.internal.operators.OnSubscribeSingle$1.itemEmitted` @type ^`boolean` := v1 @kind boolean;
  #L49cf2a.  v2.`rx.internal.operators.OnSubscribeSingle$1.emission` @type ^`java.lang.Object` := v3 @kind object;
  #L49cf2e.  return @kind void;
}
procedure `void` `onStart`(`rx.internal.operators.OnSubscribeSingle$1` v2 @kind this) @signature `Lrx/internal/operators/OnSubscribeSingle$1;.onStart:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49cf40.  v0:= 2L;
  #L49cf44.  call `request`(v2, v0) @signature `Lrx/internal/operators/OnSubscribeSingle$1;.request:(J)V` @kind virtual;
  #L49cf4a.  return @kind void;
}
