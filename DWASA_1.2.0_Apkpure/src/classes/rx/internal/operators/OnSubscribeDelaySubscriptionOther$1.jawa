record `rx.internal.operators.OnSubscribeDelaySubscriptionOther$1` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `boolean` `rx.internal.operators.OnSubscribeDelaySubscriptionOther$1.done` @AccessFlag ;
  `rx.internal.operators.OnSubscribeDelaySubscriptionOther` `rx.internal.operators.OnSubscribeDelaySubscriptionOther$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OnSubscribeDelaySubscriptionOther$1.val$child` @AccessFlag FINAL_SYNTHETIC;
  `rx.subscriptions.SerialSubscription` `rx.internal.operators.OnSubscribeDelaySubscriptionOther$1.val$serial` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeDelaySubscriptionOther$1` v0 @kind this, `rx.internal.operators.OnSubscribeDelaySubscriptionOther` v1 @kind object, `rx.Subscriber` v2 @kind object, `rx.subscriptions.SerialSubscription` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeDelaySubscriptionOther$1;.<init>:(Lrx/internal/operators/OnSubscribeDelaySubscriptionOther;Lrx/Subscriber;Lrx/subscriptions/SerialSubscription;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L497c28.  v0.`rx.internal.operators.OnSubscribeDelaySubscriptionOther$1.this$0` @type ^`rx.internal.operators.OnSubscribeDelaySubscriptionOther` := v1 @kind object;
  #L497c2c.  v0.`rx.internal.operators.OnSubscribeDelaySubscriptionOther$1.val$child` @type ^`rx.Subscriber` := v2 @kind object;
  #L497c30.  v0.`rx.internal.operators.OnSubscribeDelaySubscriptionOther$1.val$serial` @type ^`rx.subscriptions.SerialSubscription` := v3 @kind object;
  #L497c34.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L497c3a.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeDelaySubscriptionOther$1` v2 @kind this) @signature `Lrx/internal/operators/OnSubscribeDelaySubscriptionOther$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L497c4c.  v0:= v2.`rx.internal.operators.OnSubscribeDelaySubscriptionOther$1.done` @type ^`boolean` @kind boolean;
  #L497c50.  if v0 == 0 then goto L497c56;
  #L497c54.  return @kind void;
  #L497c56.  v0:= 1I;
  #L497c58.  v2.`rx.internal.operators.OnSubscribeDelaySubscriptionOther$1.done` @type ^`boolean` := v0 @kind boolean;
  #L497c5c.  v0:= v2.`rx.internal.operators.OnSubscribeDelaySubscriptionOther$1.val$serial` @type ^`rx.subscriptions.SerialSubscription` @kind object;
  #L497c60.  call temp:= `unsubscribed`() @signature `Lrx/subscriptions/Subscriptions;.unsubscribed:()Lrx/Subscription;` @kind static;
  #L497c66.  v1:= temp @kind object;
  #L497c68.  call `set`(v0, v1) @signature `Lrx/subscriptions/SerialSubscription;.set:(Lrx/Subscription;)V` @kind virtual;
  #L497c6e.  v0:= v2.`rx.internal.operators.OnSubscribeDelaySubscriptionOther$1.this$0` @type ^`rx.internal.operators.OnSubscribeDelaySubscriptionOther` @kind object;
  #L497c72.  v0:= v0.`rx.internal.operators.OnSubscribeDelaySubscriptionOther.main` @type ^`rx.Observable` @kind object;
  #L497c76.  v1:= v2.`rx.internal.operators.OnSubscribeDelaySubscriptionOther$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L497c7a.  call temp:= `unsafeSubscribe`(v0, v1) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L497c80.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeDelaySubscriptionOther$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeDelaySubscriptionOther$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497c94.  v0:= v1.`rx.internal.operators.OnSubscribeDelaySubscriptionOther$1.done` @type ^`boolean` @kind boolean;
  #L497c98.  if v0 == 0 then goto L497ca4;
  #L497c9c.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L497ca2.  return @kind void;
  #L497ca4.  v0:= 1I;
  #L497ca6.  v1.`rx.internal.operators.OnSubscribeDelaySubscriptionOther$1.done` @type ^`boolean` := v0 @kind boolean;
  #L497caa.  v0:= v1.`rx.internal.operators.OnSubscribeDelaySubscriptionOther$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L497cae.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L497cb4.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeDelaySubscriptionOther$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeDelaySubscriptionOther$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L497cc8.  call `onCompleted`(v0) @signature `Lrx/internal/operators/OnSubscribeDelaySubscriptionOther$1;.onCompleted:()V` @kind virtual;
  #L497cce.  return @kind void;
}
