record `rx.internal.operators.OperatorDelay` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `long` `rx.internal.operators.OperatorDelay.delay` @AccessFlag FINAL;
  `rx.Scheduler` `rx.internal.operators.OperatorDelay.scheduler` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `rx.internal.operators.OperatorDelay.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorDelay` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `rx.Scheduler` v4 @kind object) @signature `Lrx/internal/operators/OperatorDelay;.<init>:(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a01dc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a01e2.  v0.`rx.internal.operators.OperatorDelay.delay` @type ^`long` := v1 @kind wide;
  #L4a01e6.  v0.`rx.internal.operators.OperatorDelay.unit` @type ^`java.util.concurrent.TimeUnit` := v3 @kind object;
  #L4a01ea.  v0.`rx.internal.operators.OperatorDelay.scheduler` @type ^`rx.Scheduler` := v4 @kind object;
  #L4a01ee.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorDelay` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorDelay;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a018c.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a0190.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorDelay;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a0196.  v1:= temp @kind object;
  #L4a0198.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorDelay` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorDelay;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a01ac.  v0:= v2.`rx.internal.operators.OperatorDelay.scheduler` @type ^`rx.Scheduler` @kind object;
  #L4a01b0.  call temp:= `createWorker`(v0) @signature `Lrx/Scheduler;.createWorker:()Lrx/Scheduler$Worker;` @kind virtual;
  #L4a01b6.  v0:= temp @kind object;
  #L4a01b8.  call `add`(v3, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a01be.  v1:= new `rx.internal.operators.OperatorDelay$1`;
  #L4a01c2.  call `<init>`(v1, v2, v3, v0, v3) @signature `Lrx/internal/operators/OperatorDelay$1;.<init>:(Lrx/internal/operators/OperatorDelay;Lrx/Subscriber;Lrx/Scheduler$Worker;Lrx/Subscriber;)V` @kind direct;
  #L4a01c8.  return v1 @kind object;
}
