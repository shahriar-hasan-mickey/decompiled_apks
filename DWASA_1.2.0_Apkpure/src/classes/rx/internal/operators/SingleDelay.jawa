record `rx.internal.operators.SingleDelay` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Single$OnSubscribe` @kind interface {
  `long` `rx.internal.operators.SingleDelay.delay` @AccessFlag FINAL;
  `rx.Scheduler` `rx.internal.operators.SingleDelay.scheduler` @AccessFlag FINAL;
  `rx.Single$OnSubscribe` `rx.internal.operators.SingleDelay.source` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `rx.internal.operators.SingleDelay.unit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleDelay` v0 @kind this, `rx.Single$OnSubscribe` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `rx.Scheduler` v5 @kind object) @signature `Lrx/internal/operators/SingleDelay;.<init>:(Lrx/Single$OnSubscribe;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4af42c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4af432.  v0.`rx.internal.operators.SingleDelay.source` @type ^`rx.Single$OnSubscribe` := v1 @kind object;
  #L4af436.  v0.`rx.internal.operators.SingleDelay.scheduler` @type ^`rx.Scheduler` := v5 @kind object;
  #L4af43a.  v0.`rx.internal.operators.SingleDelay.delay` @type ^`long` := v2 @kind wide;
  #L4af43e.  v0.`rx.internal.operators.SingleDelay.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4af442.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleDelay` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/SingleDelay;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4af454.  v1:= (`rx.SingleSubscriber`) v1 @kind object;
  #L4af458.  call `call`(v0, v1) @signature `Lrx/internal/operators/SingleDelay;.call:(Lrx/SingleSubscriber;)V` @kind virtual;
  #L4af45e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleDelay` v8 @kind this, `rx.SingleSubscriber` v9 @kind object) @signature `Lrx/internal/operators/SingleDelay;.call:(Lrx/SingleSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4af470.  v0:= v8.`rx.internal.operators.SingleDelay.scheduler` @type ^`rx.Scheduler` @kind object;
  #L4af474.  call temp:= `createWorker`(v0) @signature `Lrx/Scheduler;.createWorker:()Lrx/Scheduler$Worker;` @kind virtual;
  #L4af47a.  v0:= temp @kind object;
  #L4af47c.  v7:= new `rx.internal.operators.SingleDelay$ObserveOnSingleSubscriber`;
  #L4af480.  v4:= v8.`rx.internal.operators.SingleDelay.delay` @type ^`long` @kind wide;
  #L4af484.  v6:= v8.`rx.internal.operators.SingleDelay.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4af488.  v1:= v7 @kind object;
  #L4af48a.  v2:= v9 @kind object;
  #L4af48c.  v3:= v0 @kind object;
  #L4af48e.  call `<init>`(v1, v2, v3, v4, v6) @signature `Lrx/internal/operators/SingleDelay$ObserveOnSingleSubscriber;.<init>:(Lrx/SingleSubscriber;Lrx/Scheduler$Worker;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L4af494.  call `add`(v9, v0) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4af49a.  call `add`(v9, v7) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4af4a0.  v9:= v8.`rx.internal.operators.SingleDelay.source` @type ^`rx.Single$OnSubscribe` @kind object;
  #L4af4a4.  call `call`(v9, v7) @signature `Lrx/Single$OnSubscribe;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4af4aa.  return @kind void;
}
