record `rx.internal.operators.OperatorCast$CastSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OperatorCast$CastSubscriber.actual` @AccessFlag FINAL;
  `java.lang.Class` `rx.internal.operators.OperatorCast$CastSubscriber.castClass` @AccessFlag FINAL;
  `boolean` `rx.internal.operators.OperatorCast$CastSubscriber.done` @AccessFlag ;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorCast$CastSubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lrx/internal/operators/OperatorCast$CastSubscriber;.<init>:(Lrx/Subscriber;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49f730.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L49f736.  v0.`rx.internal.operators.OperatorCast$CastSubscriber.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L49f73a.  v0.`rx.internal.operators.OperatorCast$CastSubscriber.castClass` @type ^`java.lang.Class` := v2 @kind object;
  #L49f73e.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorCast$CastSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorCast$CastSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49f750.  v0:= v1.`rx.internal.operators.OperatorCast$CastSubscriber.done` @type ^`boolean` @kind boolean;
  #L49f754.  if v0 == 0 then goto L49f75a;
  #L49f758.  return @kind void;
  #L49f75a.  v0:= v1.`rx.internal.operators.OperatorCast$CastSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L49f75e.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49f764.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorCast$CastSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorCast$CastSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49f778.  v0:= v1.`rx.internal.operators.OperatorCast$CastSubscriber.done` @type ^`boolean` @kind boolean;
  #L49f77c.  if v0 == 0 then goto L49f788;
  #L49f780.  call `onError`(v2) @signature `Lrx/plugins/RxJavaHooks;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49f786.  return @kind void;
  #L49f788.  v0:= 1I;
  #L49f78a.  v1.`rx.internal.operators.OperatorCast$CastSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L49f78e.  v0:= v1.`rx.internal.operators.OperatorCast$CastSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L49f792.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49f798.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorCast$CastSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorCast$CastSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49f7ac.  v0:= v1.`rx.internal.operators.OperatorCast$CastSubscriber.castClass` @type ^`java.lang.Class` @kind object;
  #L49f7b0.  call temp:= `cast`(v0, v2) @signature `Ljava/lang/Class;.cast:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49f7b6.  v2:= temp @kind object;
  #L49f7b8.  v0:= v1.`rx.internal.operators.OperatorCast$CastSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L49f7bc.  call `onNext`(v0, v2) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49f7c2.  return @kind void;
  #L49f7c4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f7c6.  call `throwIfFatal`(v0) @signature `Lrx/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49f7cc.  call `unsubscribe`(v1) @signature `Lrx/internal/operators/OperatorCast$CastSubscriber;.unsubscribe:()V` @kind virtual;
  #L49f7d2.  call temp:= `addValueAsLastCause`(v0, v2) @signature `Lrx/exceptions/OnErrorThrowable;.addValueAsLastCause:(Ljava/lang/Throwable;Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L49f7d8.  v2:= temp @kind object;
  #L49f7da.  call `onError`(v1, v2) @signature `Lrx/internal/operators/OperatorCast$CastSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49f7e0.  return @kind void;
  catch `java.lang.Throwable` @[L49f7ac..L49f7b8] goto L49f7c4;
}
procedure `void` `setProducer`(`rx.internal.operators.OperatorCast$CastSubscriber` v1 @kind this, `rx.Producer` v2 @kind object) @signature `Lrx/internal/operators/OperatorCast$CastSubscriber;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49f800.  v0:= v1.`rx.internal.operators.OperatorCast$CastSubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L49f804.  call `setProducer`(v0, v2) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L49f80a.  return @kind void;
}
