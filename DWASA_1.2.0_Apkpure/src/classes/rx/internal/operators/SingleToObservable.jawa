record `rx.internal.operators.SingleToObservable` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.Single$OnSubscribe` `rx.internal.operators.SingleToObservable.source` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleToObservable` v0 @kind this, `rx.Single$OnSubscribe` v1 @kind object) @signature `Lrx/internal/operators/SingleToObservable;.<init>:(Lrx/Single$OnSubscribe;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b0da0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b0da6.  v0.`rx.internal.operators.SingleToObservable.source` @type ^`rx.Single$OnSubscribe` := v1 @kind object;
  #L4b0daa.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleToObservable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/SingleToObservable;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4b0dbc.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4b0dc0.  call `call`(v0, v1) @signature `Lrx/internal/operators/SingleToObservable;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L4b0dc6.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleToObservable` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/SingleToObservable;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b0dd8.  v0:= new `rx.internal.operators.SingleLiftObservableOperator$WrapSubscriberIntoSingle`;
  #L4b0ddc.  call `<init>`(v0, v2) @signature `Lrx/internal/operators/SingleLiftObservableOperator$WrapSubscriberIntoSingle;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4b0de2.  call `add`(v2, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b0de8.  v2:= v1.`rx.internal.operators.SingleToObservable.source` @type ^`rx.Single$OnSubscribe` @kind object;
  #L4b0dec.  call `call`(v2, v0) @signature `Lrx/Single$OnSubscribe;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4b0df2.  return @kind void;
}
