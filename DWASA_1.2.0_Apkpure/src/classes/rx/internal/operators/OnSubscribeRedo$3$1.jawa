record `rx.internal.operators.OnSubscribeRedo$3$1` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `rx.internal.operators.OnSubscribeRedo$3` `rx.internal.operators.OnSubscribeRedo$3$1.this$1` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OnSubscribeRedo$3$1.val$filteredTerminals` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeRedo$3$1` v0 @kind this, `rx.internal.operators.OnSubscribeRedo$3` v1 @kind object, `rx.Subscriber` v2 @kind object, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$3$1;.<init>:(Lrx/internal/operators/OnSubscribeRedo$3;Lrx/Subscriber;Lrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49be50.  v0.`rx.internal.operators.OnSubscribeRedo$3$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$3` := v1 @kind object;
  #L49be54.  v0.`rx.internal.operators.OnSubscribeRedo$3$1.val$filteredTerminals` @type ^`rx.Subscriber` := v3 @kind object;
  #L49be58.  call `<init>`(v0, v2) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L49be5e.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeRedo$3$1` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeRedo$3$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49be70.  v0:= v1.`rx.internal.operators.OnSubscribeRedo$3$1.val$filteredTerminals` @type ^`rx.Subscriber` @kind object;
  #L49be74.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49be7a.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeRedo$3$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$3$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49be8c.  v0:= v1.`rx.internal.operators.OnSubscribeRedo$3$1.val$filteredTerminals` @type ^`rx.Subscriber` @kind object;
  #L49be90.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49be96.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeRedo$3$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$3$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49bea8.  v1:= (`rx.Notification`) v1 @kind object;
  #L49beac.  call `onNext`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeRedo$3$1;.onNext:(Lrx/Notification;)V` @kind virtual;
  #L49beb2.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeRedo$3$1` v1 @kind this, `rx.Notification` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$3$1;.onNext:(Lrx/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49bec4.  call temp:= `isOnCompleted`(v2) @signature `Lrx/Notification;.isOnCompleted:()Z` @kind virtual;
  #L49beca.  v0:= temp;
  #L49becc.  if v0 == 0 then goto L49beec;
  #L49bed0.  v0:= v1.`rx.internal.operators.OnSubscribeRedo$3$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$3` @kind object;
  #L49bed4.  v0:= v0.`rx.internal.operators.OnSubscribeRedo$3.this$0` @type ^`rx.internal.operators.OnSubscribeRedo` @kind object;
  #L49bed8.  v0:= v0.`rx.internal.operators.OnSubscribeRedo.stopOnComplete` @type ^`boolean` @kind boolean;
  #L49bedc.  if v0 == 0 then goto L49beec;
  #L49bee0.  v2:= v1.`rx.internal.operators.OnSubscribeRedo$3$1.val$filteredTerminals` @type ^`rx.Subscriber` @kind object;
  #L49bee4.  call `onCompleted`(v2) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49beea.  goto L49bf26;
  #L49beec.  call temp:= `isOnError`(v2) @signature `Lrx/Notification;.isOnError:()Z` @kind virtual;
  #L49bef2.  v0:= temp;
  #L49bef4.  if v0 == 0 then goto L49bf1c;
  #L49bef8.  v0:= v1.`rx.internal.operators.OnSubscribeRedo$3$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$3` @kind object;
  #L49befc.  v0:= v0.`rx.internal.operators.OnSubscribeRedo$3.this$0` @type ^`rx.internal.operators.OnSubscribeRedo` @kind object;
  #L49bf00.  v0:= v0.`rx.internal.operators.OnSubscribeRedo.stopOnError` @type ^`boolean` @kind boolean;
  #L49bf04.  if v0 == 0 then goto L49bf1c;
  #L49bf08.  v0:= v1.`rx.internal.operators.OnSubscribeRedo$3$1.val$filteredTerminals` @type ^`rx.Subscriber` @kind object;
  #L49bf0c.  call temp:= `getThrowable`(v2) @signature `Lrx/Notification;.getThrowable:()Ljava/lang/Throwable;` @kind virtual;
  #L49bf12.  v2:= temp @kind object;
  #L49bf14.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49bf1a.  goto L49bf26;
  #L49bf1c.  v0:= v1.`rx.internal.operators.OnSubscribeRedo$3$1.val$filteredTerminals` @type ^`rx.Subscriber` @kind object;
  #L49bf20.  call `onNext`(v0, v2) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49bf26.  return @kind void;
}
procedure `void` `setProducer`(`rx.internal.operators.OnSubscribeRedo$3$1` v2 @kind this, `rx.Producer` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$3$1;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49bf38.  v0:= 9223372036854775807L;
  #L49bf42.  call `request`(v3, v0) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L49bf48.  return @kind void;
}
