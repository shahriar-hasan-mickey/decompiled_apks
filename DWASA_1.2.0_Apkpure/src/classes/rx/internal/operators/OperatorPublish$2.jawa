record `rx.internal.operators.OperatorPublish$2` @kind class @AccessFlag FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `boolean` `rx.internal.operators.OperatorPublish$2.val$delayError` @AccessFlag FINAL_SYNTHETIC;
  `rx.functions.Func1` `rx.internal.operators.OperatorPublish$2.val$selector` @AccessFlag FINAL_SYNTHETIC;
  `rx.Observable` `rx.internal.operators.OperatorPublish$2.val$source` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorPublish$2` v0 @kind this, `boolean` v1 , `rx.functions.Func1` v2 @kind object, `rx.Observable` v3 @kind object) @signature `Lrx/internal/operators/OperatorPublish$2;.<init>:(ZLrx/functions/Func1;Lrx/Observable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a541c.  v0.`rx.internal.operators.OperatorPublish$2.val$delayError` @type ^`boolean` := v1 @kind boolean;
  #L4a5420.  v0.`rx.internal.operators.OperatorPublish$2.val$selector` @type ^`rx.functions.Func1` := v2 @kind object;
  #L4a5424.  v0.`rx.internal.operators.OperatorPublish$2.val$source` @type ^`rx.Observable` := v3 @kind object;
  #L4a5428.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a542e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorPublish$2` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorPublish$2;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a5440.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a5444.  call `call`(v0, v1) @signature `Lrx/internal/operators/OperatorPublish$2;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L4a544a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OperatorPublish$2` v3 @kind this, `rx.Subscriber` v4 @kind object) @signature `Lrx/internal/operators/OperatorPublish$2;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a545c.  v0:= new `rx.internal.operators.OnSubscribePublishMulticast`;
  #L4a5460.  v1:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L4a5464.  v2:= v3.`rx.internal.operators.OperatorPublish$2.val$delayError` @type ^`boolean` @kind boolean;
  #L4a5468.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.<init>:(IZ)V` @kind direct;
  #L4a546e.  v1:= new `rx.internal.operators.OperatorPublish$2$1`;
  #L4a5472.  call `<init>`(v1, v3, v4, v0) @signature `Lrx/internal/operators/OperatorPublish$2$1;.<init>:(Lrx/internal/operators/OperatorPublish$2;Lrx/Subscriber;Lrx/internal/operators/OnSubscribePublishMulticast;)V` @kind direct;
  #L4a5478.  call `add`(v4, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a547e.  call `add`(v4, v1) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a5484.  v4:= v3.`rx.internal.operators.OperatorPublish$2.val$selector` @type ^`rx.functions.Func1` @kind object;
  #L4a5488.  call temp:= `create`(v0) @signature `Lrx/Observable;.create:(Lrx/Observable$OnSubscribe;)Lrx/Observable;` @kind static;
  #L4a548e.  v2:= temp @kind object;
  #L4a5490.  call temp:= `call`(v4, v2) @signature `Lrx/functions/Func1;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a5496.  v4:= temp @kind object;
  #L4a5498.  v4:= (`rx.Observable`) v4 @kind object;
  #L4a549c.  call temp:= `unsafeSubscribe`(v4, v1) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4a54a2.  v4:= v3.`rx.internal.operators.OperatorPublish$2.val$source` @type ^`rx.Observable` @kind object;
  #L4a54a6.  call temp:= `subscriber`(v0) @signature `Lrx/internal/operators/OnSubscribePublishMulticast;.subscriber:()Lrx/Subscriber;` @kind virtual;
  #L4a54ac.  v0:= temp @kind object;
  #L4a54ae.  call temp:= `unsafeSubscribe`(v4, v0) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4a54b4.  return @kind void;
}
