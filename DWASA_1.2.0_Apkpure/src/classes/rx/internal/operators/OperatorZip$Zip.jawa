record `rx.internal.operators.OperatorZip$Zip` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class {
  `rx.Observer` `rx.internal.operators.OperatorZip$Zip.child` @AccessFlag FINAL;
  `rx.subscriptions.CompositeSubscription` `rx.internal.operators.OperatorZip$Zip.childSubscription` @AccessFlag PRIVATE_FINAL;
  `int` `rx.internal.operators.OperatorZip$Zip.emitted` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `rx.internal.operators.OperatorZip$Zip.requested` @AccessFlag PRIVATE;
  `java.lang.Object`[] `rx.internal.operators.OperatorZip$Zip.subscribers` @AccessFlag PRIVATE_VOLATILE;
  `rx.functions.FuncN` `rx.internal.operators.OperatorZip$Zip.zipFunction` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@rx.internal.operators.OperatorZip$Zip.THRESHOLD` @AccessFlag STATIC_FINAL;
global `long` `@@rx.internal.operators.OperatorZip$Zip.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OperatorZip$Zip;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4aedd8.  v0:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L4aeddc.  v0:= (`double`) v0 @kind i2d;
  #L4aedde.  v2:= 0.7D;
  #L4aede8.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L4aedee.  v0:= v0 * v2 @kind double;
  #L4aedf2.  v0:= (`int`) v0 @kind d2i;
  #L4aedf4.  `@@rx.internal.operators.OperatorZip$Zip.THRESHOLD` @type ^`int` := v0;
  #L4aedf8.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorZip$Zip` v1 @kind this, `rx.Subscriber` v2 @kind object, `rx.functions.FuncN` v3 @kind object) @signature `Lrx/internal/operators/OperatorZip$Zip;.<init>:(Lrx/Subscriber;Lrx/functions/FuncN;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4aee0c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4aee12.  v0:= new `rx.subscriptions.CompositeSubscription`;
  #L4aee16.  call `<init>`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.<init>:()V` @kind direct;
  #L4aee1c.  v1.`rx.internal.operators.OperatorZip$Zip.childSubscription` @type ^`rx.subscriptions.CompositeSubscription` := v0 @kind object;
  #L4aee20.  v1.`rx.internal.operators.OperatorZip$Zip.child` @type ^`rx.Observer` := v2 @kind object;
  #L4aee24.  v1.`rx.internal.operators.OperatorZip$Zip.zipFunction` @type ^`rx.functions.FuncN` := v3 @kind object;
  #L4aee28.  v3:= v1.`rx.internal.operators.OperatorZip$Zip.childSubscription` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4aee2c.  call `add`(v2, v3) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4aee32.  return @kind void;
}
procedure `void` `start`(`rx.internal.operators.OperatorZip$Zip` v5 @kind this, `rx.Observable`[] v6 @kind object, `java.util.concurrent.atomic.AtomicLong` v7 @kind object) @signature `Lrx/internal/operators/OperatorZip$Zip;.start:([Lrx/Observable;Ljava/util/concurrent/atomic/AtomicLong;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4aee44.  v0:= length @variable v6;
  #L4aee46.  v0:= new `java.lang.Object`[v0];
  #L4aee4a.  v1:= 0I;
  #L4aee4c.  v2:= 0I;
  #L4aee4e.  v3:= length @variable v6;
  #L4aee50.  if v2 >= v3 then goto L4aee72;
  #L4aee54.  v3:= new `rx.internal.operators.OperatorZip$Zip$InnerSubscriber`;
  #L4aee58.  call `<init>`(v3, v5) @signature `Lrx/internal/operators/OperatorZip$Zip$InnerSubscriber;.<init>:(Lrx/internal/operators/OperatorZip$Zip;)V` @kind direct;
  #L4aee5e.  v0[v2]:= v3 @kind object;
  #L4aee62.  v4:= v5.`rx.internal.operators.OperatorZip$Zip.childSubscription` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4aee66.  call `add`(v4, v3) @signature `Lrx/subscriptions/CompositeSubscription;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4aee6c.  v2:= v2 + 1;
  #L4aee70.  goto L4aee4e;
  #L4aee72.  v5.`rx.internal.operators.OperatorZip$Zip.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v7 @kind object;
  #L4aee76.  v5.`rx.internal.operators.OperatorZip$Zip.subscribers` @type ^`java.lang.Object`[] := v0 @kind object;
  #L4aee7a.  v7:= length @variable v6;
  #L4aee7c.  if v1 >= v7 then goto L4aee98;
  #L4aee80.  v7:= v6[v1] @kind object;
  #L4aee84.  v2:= v0[v1] @kind object;
  #L4aee88.  v2:= (`rx.internal.operators.OperatorZip$Zip$InnerSubscriber`) v2 @kind object;
  #L4aee8c.  call temp:= `unsafeSubscribe`(v7, v2) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4aee92.  v1:= v1 + 1;
  #L4aee96.  goto L4aee7a;
  #L4aee98.  return @kind void;
}
procedure `void` `tick`(`rx.internal.operators.OperatorZip$Zip` v14 @kind this) @signature `Lrx/internal/operators/OperatorZip$Zip;.tick:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4aeeac.  v0:= v14.`rx.internal.operators.OperatorZip$Zip.subscribers` @type ^`java.lang.Object`[] @kind object;
  #L4aeeb0.  if v0 != 0 then goto L4aeeb6;
  #L4aeeb4.  return @kind void;
  #L4aeeb6.  call temp:= `getAndIncrement`(v14) @signature `Lrx/internal/operators/OperatorZip$Zip;.getAndIncrement:()J` @kind virtual;
  #L4aeebc.  v1:= temp @kind wide;
  #L4aeebe.  v3:= 0L;
  #L4aeec2.  v5:= lcmp(v1, v3);
  #L4aeec6.  if v5 != 0 then goto L4aeffc;
  #L4aeeca.  v1:= length @variable v0;
  #L4aeecc.  v2:= v14.`rx.internal.operators.OperatorZip$Zip.child` @type ^`rx.Observer` @kind object;
  #L4aeed0.  v5:= v14.`rx.internal.operators.OperatorZip$Zip.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4aeed4.  v6:= new `java.lang.Object`[v1];
  #L4aeed8.  v7:= 0I;
  #L4aeeda.  v8:= 1I;
  #L4aeedc.  v9:= 0I;
  #L4aeede.  v10:= 1I;
  #L4aeee0.  if v9 >= v1 then goto L4aef30;
  #L4aeee4.  v11:= v0[v9] @kind object;
  #L4aeee8.  v11:= (`rx.internal.operators.OperatorZip$Zip$InnerSubscriber`) v11 @kind object;
  #L4aeeec.  v11:= v11.`rx.internal.operators.OperatorZip$Zip$InnerSubscriber.items` @type ^`rx.internal.util.RxRingBuffer` @kind object;
  #L4aeef0.  call temp:= `peek`(v11) @signature `Lrx/internal/util/RxRingBuffer;.peek:()Ljava/lang/Object;` @kind virtual;
  #L4aeef6.  v12:= temp @kind object;
  #L4aeef8.  if v12 != 0 then goto L4aef00;
  #L4aeefc.  v10:= 0I;
  #L4aeefe.  goto L4aef2a;
  #L4aef00.  call temp:= `isCompleted`(v11, v12) @signature `Lrx/internal/util/RxRingBuffer;.isCompleted:(Ljava/lang/Object;)Z` @kind virtual;
  #L4aef06.  v13:= temp;
  #L4aef08.  if v13 == 0 then goto L4aef1e;
  #L4aef0c.  call `onCompleted`(v2) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4aef12.  v0:= v14.`rx.internal.operators.OperatorZip$Zip.childSubscription` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4aef16.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.unsubscribe:()V` @kind virtual;
  #L4aef1c.  return @kind void;
  #L4aef1e.  call temp:= `getValue`(v11, v12) @signature `Lrx/internal/util/RxRingBuffer;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4aef24.  v11:= temp @kind object;
  #L4aef26.  v6[v9]:= v11 @kind object;
  #L4aef2a.  v9:= v9 + 1;
  #L4aef2e.  goto L4aeee0;
  #L4aef30.  if v10 == 0 then goto L4aefec;
  #L4aef34.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4aef3a.  v9:= temp @kind wide;
  #L4aef3c.  v11:= lcmp(v9, v3);
  #L4aef40.  if v11 <= 0 then goto L4aefec;
  #L4aef44.  v9:= v14.`rx.internal.operators.OperatorZip$Zip.zipFunction` @type ^`rx.functions.FuncN` @kind object;
  #L4aef48.  call temp:= `call`(v9, v6) @signature `Lrx/functions/FuncN;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4aef4e.  v9:= temp @kind object;
  #L4aef50.  call `onNext`(v2, v9) @signature `Lrx/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4aef56.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4aef5c.  v9:= v14.`rx.internal.operators.OperatorZip$Zip.emitted` @type ^`int`;
  #L4aef60.  v9:= v9 + v8 @kind int;
  #L4aef62.  v14.`rx.internal.operators.OperatorZip$Zip.emitted` @type ^`int` := v9;
  #L4aef66.  v6:= length @variable v0;
  #L4aef68.  v8:= 0I;
  #L4aef6a.  if v8 >= v6 then goto L4aefac;
  #L4aef6e.  v9:= v0[v8] @kind object;
  #L4aef72.  v9:= (`rx.internal.operators.OperatorZip$Zip$InnerSubscriber`) v9 @kind object;
  #L4aef76.  v9:= v9.`rx.internal.operators.OperatorZip$Zip$InnerSubscriber.items` @type ^`rx.internal.util.RxRingBuffer` @kind object;
  #L4aef7a.  call temp:= `poll`(v9) @signature `Lrx/internal/util/RxRingBuffer;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4aef80.  call temp:= `peek`(v9) @signature `Lrx/internal/util/RxRingBuffer;.peek:()Ljava/lang/Object;` @kind virtual;
  #L4aef86.  v10:= temp @kind object;
  #L4aef88.  call temp:= `isCompleted`(v9, v10) @signature `Lrx/internal/util/RxRingBuffer;.isCompleted:(Ljava/lang/Object;)Z` @kind virtual;
  #L4aef8e.  v9:= temp;
  #L4aef90.  if v9 == 0 then goto L4aefa6;
  #L4aef94.  call `onCompleted`(v2) @signature `Lrx/Observer;.onCompleted:()V` @kind interface;
  #L4aef9a.  v0:= v14.`rx.internal.operators.OperatorZip$Zip.childSubscription` @type ^`rx.subscriptions.CompositeSubscription` @kind object;
  #L4aef9e.  call `unsubscribe`(v0) @signature `Lrx/subscriptions/CompositeSubscription;.unsubscribe:()V` @kind virtual;
  #L4aefa4.  return @kind void;
  #L4aefa6.  v8:= v8 + 1;
  #L4aefaa.  goto L4aef6a;
  #L4aefac.  v6:= v14.`rx.internal.operators.OperatorZip$Zip.emitted` @type ^`int`;
  #L4aefb0.  v8:= `@@rx.internal.operators.OperatorZip$Zip.THRESHOLD` @type ^`int`;
  #L4aefb4.  if v6 <= v8 then goto L4aeed4;
  #L4aefb8.  v6:= length @variable v0;
  #L4aefba.  v8:= 0I;
  #L4aefbc.  if v8 >= v6 then goto L4aefda;
  #L4aefc0.  v9:= v0[v8] @kind object;
  #L4aefc4.  v9:= (`rx.internal.operators.OperatorZip$Zip$InnerSubscriber`) v9 @kind object;
  #L4aefc8.  v10:= v14.`rx.internal.operators.OperatorZip$Zip.emitted` @type ^`int`;
  #L4aefcc.  v10:= (`long`) v10 @kind i2l;
  #L4aefce.  call `requestMore`(v9, v10) @signature `Lrx/internal/operators/OperatorZip$Zip$InnerSubscriber;.requestMore:(J)V` @kind virtual;
  #L4aefd4.  v8:= v8 + 1;
  #L4aefd8.  goto L4aefbc;
  #L4aefda.  v14.`rx.internal.operators.OperatorZip$Zip.emitted` @type ^`int` := v7;
  #L4aefde.  goto L4aeed4;
  #L4aefe2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4aefe4.  call `throwOrReport`(v0, v2, v6) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4aefea.  return @kind void;
  #L4aefec.  call temp:= `decrementAndGet`(v14) @signature `Lrx/internal/operators/OperatorZip$Zip;.decrementAndGet:()J` @kind virtual;
  #L4aeff2.  v6:= temp @kind wide;
  #L4aeff4.  v8:= lcmp(v6, v3);
  #L4aeff8.  if v8 > 0 then goto L4aeed4;
  #L4aeffc.  return @kind void;
  catch `java.lang.Throwable` @[L4aef44..L4aef66] goto L4aefe2;
}
