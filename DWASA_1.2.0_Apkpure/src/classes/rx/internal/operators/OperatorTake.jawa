record `rx.internal.operators.OperatorTake` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `int` `rx.internal.operators.OperatorTake.limit` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTake` v3 @kind this, `int` v4 ) @signature `Lrx/internal/operators/OperatorTake;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4aaa48.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4aaa4e.  if v4 < 0 then goto L4aaa58;
  #L4aaa52.  v3.`rx.internal.operators.OperatorTake.limit` @type ^`int` := v4;
  #L4aaa56.  return @kind void;
  #L4aaa58.  v0:= new `java.lang.IllegalArgumentException`;
  #L4aaa5c.  v1:= new `java.lang.StringBuilder`;
  #L4aaa60.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4aaa66.  v2:= "limit >= 0 required but it was " @kind object;
  #L4aaa6a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaa70.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4aaa76.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4aaa7c.  v4:= temp @kind object;
  #L4aaa7e.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4aaa84.  throw v0;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorTake` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorTake;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4aa9f0.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4aa9f4.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorTake;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4aa9fa.  v1:= temp @kind object;
  #L4aa9fc.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorTake` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorTake;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aaa10.  v0:= new `rx.internal.operators.OperatorTake$1`;
  #L4aaa14.  call `<init>`(v0, v2, v3) @signature `Lrx/internal/operators/OperatorTake$1;.<init>:(Lrx/internal/operators/OperatorTake;Lrx/Subscriber;)V` @kind direct;
  #L4aaa1a.  v1:= v2.`rx.internal.operators.OperatorTake.limit` @type ^`int`;
  #L4aaa1e.  if v1 != 0 then goto L4aaa2e;
  #L4aaa22.  call `onCompleted`(v3) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4aaa28.  call `unsubscribe`(v0) @signature `Lrx/Subscriber;.unsubscribe:()V` @kind virtual;
  #L4aaa2e.  call `add`(v3, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4aaa34.  return v0 @kind object;
}
