record `rx.internal.operators.OperatorDoOnSubscribe` @kind class @AccessFlag PUBLIC extends `rx.Observable$Operator` @kind interface {
  `rx.functions.Action0` `rx.internal.operators.OperatorDoOnSubscribe.subscribe` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorDoOnSubscribe` v0 @kind this, `rx.functions.Action0` v1 @kind object) @signature `Lrx/internal/operators/OperatorDoOnSubscribe;.<init>:(Lrx/functions/Action0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a0b1c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a0b22.  v0.`rx.internal.operators.OperatorDoOnSubscribe.subscribe` @type ^`rx.functions.Action0` := v1 @kind object;
  #L4a0b26.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorDoOnSubscribe` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorDoOnSubscribe;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a0ad8.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a0adc.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorDoOnSubscribe;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a0ae2.  v1:= temp @kind object;
  #L4a0ae4.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorDoOnSubscribe` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorDoOnSubscribe;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a0af8.  v0:= v1.`rx.internal.operators.OperatorDoOnSubscribe.subscribe` @type ^`rx.functions.Action0` @kind object;
  #L4a0afc.  call `call`(v0) @signature `Lrx/functions/Action0;.call:()V` @kind interface;
  #L4a0b02.  call temp:= `wrap`(v2) @signature `Lrx/observers/Subscribers;.wrap:(Lrx/Subscriber;)Lrx/Subscriber;` @kind static;
  #L4a0b08.  v2:= temp @kind object;
  #L4a0b0a.  return v2 @kind object;
}
