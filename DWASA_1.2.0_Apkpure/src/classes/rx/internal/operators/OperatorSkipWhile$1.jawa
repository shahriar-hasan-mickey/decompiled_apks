record `rx.internal.operators.OperatorSkipWhile$1` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `int` `rx.internal.operators.OperatorSkipWhile$1.index` @AccessFlag ;
  `boolean` `rx.internal.operators.OperatorSkipWhile$1.skipping` @AccessFlag ;
  `rx.internal.operators.OperatorSkipWhile` `rx.internal.operators.OperatorSkipWhile$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `rx.Subscriber` `rx.internal.operators.OperatorSkipWhile$1.val$child` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSkipWhile$1` v0 @kind this, `rx.internal.operators.OperatorSkipWhile` v1 @kind object, `rx.Subscriber` v2 @kind object, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OperatorSkipWhile$1;.<init>:(Lrx/internal/operators/OperatorSkipWhile;Lrx/Subscriber;Lrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a8ca8.  v0.`rx.internal.operators.OperatorSkipWhile$1.this$0` @type ^`rx.internal.operators.OperatorSkipWhile` := v1 @kind object;
  #L4a8cac.  v0.`rx.internal.operators.OperatorSkipWhile$1.val$child` @type ^`rx.Subscriber` := v3 @kind object;
  #L4a8cb0.  call `<init>`(v0, v2) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4a8cb6.  v1:= 1I;
  #L4a8cb8.  v0.`rx.internal.operators.OperatorSkipWhile$1.skipping` @type ^`boolean` := v1 @kind boolean;
  #L4a8cbc.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorSkipWhile$1` v1 @kind this) @signature `Lrx/internal/operators/OperatorSkipWhile$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8cd0.  v0:= v1.`rx.internal.operators.OperatorSkipWhile$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a8cd4.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L4a8cda.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorSkipWhile$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorSkipWhile$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8cec.  v0:= v1.`rx.internal.operators.OperatorSkipWhile$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a8cf0.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a8cf6.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorSkipWhile$1` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lrx/internal/operators/OperatorSkipWhile$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a8d08.  v0:= v3.`rx.internal.operators.OperatorSkipWhile$1.skipping` @type ^`boolean` @kind boolean;
  #L4a8d0c.  if v0 != 0 then goto L4a8d1c;
  #L4a8d10.  v0:= v3.`rx.internal.operators.OperatorSkipWhile$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a8d14.  call `onNext`(v0, v4) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a8d1a.  goto L4a8d6c;
  #L4a8d1c.  v0:= v3.`rx.internal.operators.OperatorSkipWhile$1.this$0` @type ^`rx.internal.operators.OperatorSkipWhile` @kind object;
  #L4a8d20.  v0:= v0.`rx.internal.operators.OperatorSkipWhile.predicate` @type ^`rx.functions.Func2` @kind object;
  #L4a8d24.  v1:= v3.`rx.internal.operators.OperatorSkipWhile$1.index` @type ^`int`;
  #L4a8d28.  v2:= v1 + 1;
  #L4a8d2c.  v3.`rx.internal.operators.OperatorSkipWhile$1.index` @type ^`int` := v2;
  #L4a8d30.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4a8d36.  v1:= temp @kind object;
  #L4a8d38.  call temp:= `call`(v0, v4, v1) @signature `Lrx/functions/Func2;.call:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a8d3e.  v0:= temp @kind object;
  #L4a8d40.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L4a8d44.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L4a8d4a.  v0:= temp;
  #L4a8d4c.  if v0 != 0 then goto L4a8d62;
  #L4a8d50.  v0:= 0I;
  #L4a8d52.  v3.`rx.internal.operators.OperatorSkipWhile$1.skipping` @type ^`boolean` := v0 @kind boolean;
  #L4a8d56.  v0:= v3.`rx.internal.operators.OperatorSkipWhile$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a8d5a.  call `onNext`(v0, v4) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a8d60.  goto L4a8d6c;
  #L4a8d62.  v0:= 1L;
  #L4a8d66.  call `request`(v3, v0) @signature `Lrx/internal/operators/OperatorSkipWhile$1;.request:(J)V` @kind virtual;
  #L4a8d6c.  return @kind void;
  #L4a8d6e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a8d70.  v1:= v3.`rx.internal.operators.OperatorSkipWhile$1.val$child` @type ^`rx.Subscriber` @kind object;
  #L4a8d74.  call `throwOrReport`(v0, v1, v4) @signature `Lrx/exceptions/Exceptions;.throwOrReport:(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V` @kind static;
  #L4a8d7a.  return @kind void;
  catch `java.lang.Throwable` @[L4a8d1c..L4a8d4c] goto L4a8d6e;
}
