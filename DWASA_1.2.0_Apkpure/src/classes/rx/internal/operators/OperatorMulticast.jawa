record `rx.internal.operators.OperatorMulticast` @kind class @AccessFlag PUBLIC_FINAL extends `rx.observables.ConnectableObservable` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `rx.internal.operators.OperatorMulticast.connectedSubject` @AccessFlag FINAL;
  `java.lang.Object` `rx.internal.operators.OperatorMulticast.guard` @AccessFlag FINAL;
  `rx.Subscription` `rx.internal.operators.OperatorMulticast.guardedSubscription` @AccessFlag ;
  `rx.Observable` `rx.internal.operators.OperatorMulticast.source` @AccessFlag FINAL;
  `rx.functions.Func0` `rx.internal.operators.OperatorMulticast.subjectFactory` @AccessFlag FINAL;
  `rx.Subscriber` `rx.internal.operators.OperatorMulticast.subscription` @AccessFlag ;
  `java.util.List` `rx.internal.operators.OperatorMulticast.waitingForConnect` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorMulticast` v1 @kind this, `java.lang.Object` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `java.util.List` v4 @kind object, `rx.Observable` v5 @kind object, `rx.functions.Func0` v6 @kind object) @signature `Lrx/internal/operators/OperatorMulticast;.<init>:(Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/List;Lrx/Observable;Lrx/functions/Func0;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L4a3d28.  v0:= new `rx.internal.operators.OperatorMulticast$1`;
  #L4a3d2c.  call `<init>`(v0, v2, v3, v4) @signature `Lrx/internal/operators/OperatorMulticast$1;.<init>:(Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/List;)V` @kind direct;
  #L4a3d32.  call `<init>`(v1, v0) @signature `Lrx/observables/ConnectableObservable;.<init>:(Lrx/Observable$OnSubscribe;)V` @kind direct;
  #L4a3d38.  v1.`rx.internal.operators.OperatorMulticast.guard` @type ^`java.lang.Object` := v2 @kind object;
  #L4a3d3c.  v1.`rx.internal.operators.OperatorMulticast.connectedSubject` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4a3d40.  v1.`rx.internal.operators.OperatorMulticast.waitingForConnect` @type ^`java.util.List` := v4 @kind object;
  #L4a3d44.  v1.`rx.internal.operators.OperatorMulticast.source` @type ^`rx.Observable` := v5 @kind object;
  #L4a3d48.  v1.`rx.internal.operators.OperatorMulticast.subjectFactory` @type ^`rx.functions.Func0` := v6 @kind object;
  #L4a3d4c.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorMulticast` v6 @kind this, `rx.Observable` v7 @kind object, `rx.functions.Func0` v8 @kind object) @signature `Lrx/internal/operators/OperatorMulticast;.<init>:(Lrx/Observable;Lrx/functions/Func0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a3d60.  v1:= new `java.lang.Object`;
  #L4a3d64.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a3d6a.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a3d6e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a3d74.  v3:= new `java.util.ArrayList`;
  #L4a3d78.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4a3d7e.  v0:= v6 @kind object;
  #L4a3d80.  v4:= v7 @kind object;
  #L4a3d82.  v5:= v8 @kind object;
  #L4a3d84.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lrx/internal/operators/OperatorMulticast;.<init>:(Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/List;Lrx/Observable;Lrx/functions/Func0;)V` @kind direct;
  #L4a3d8a.  return @kind void;
}
procedure `void` `connect`(`rx.internal.operators.OperatorMulticast` v5 @kind this, `rx.functions.Action1` v6 @kind object) @signature `Lrx/internal/operators/OperatorMulticast;.connect:(Lrx/functions/Action1;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a3d9c.  v0:= v5.`rx.internal.operators.OperatorMulticast.guard` @type ^`java.lang.Object` @kind object;
  #L4a3da0.  @monitorenter v0
  #L4a3da2.  v1:= v5.`rx.internal.operators.OperatorMulticast.subscription` @type ^`rx.Subscriber` @kind object;
  #L4a3da6.  if v1 == 0 then goto L4a3db8;
  #L4a3daa.  v1:= v5.`rx.internal.operators.OperatorMulticast.guardedSubscription` @type ^`rx.Subscription` @kind object;
  #L4a3dae.  call `call`(v6, v1) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4a3db4.  @monitorexit v0
  #L4a3db6.  return @kind void;
  #L4a3db8.  v1:= v5.`rx.internal.operators.OperatorMulticast.subjectFactory` @type ^`rx.functions.Func0` @kind object;
  #L4a3dbc.  call temp:= `call`(v1) @signature `Lrx/functions/Func0;.call:()Ljava/lang/Object;` @kind interface;
  #L4a3dc2.  v1:= temp @kind object;
  #L4a3dc4.  v1:= (`rx.subjects.Subject`) v1 @kind object;
  #L4a3dc8.  call temp:= `from`(v1) @signature `Lrx/observers/Subscribers;.from:(Lrx/Observer;)Lrx/Subscriber;` @kind static;
  #L4a3dce.  v2:= temp @kind object;
  #L4a3dd0.  v5.`rx.internal.operators.OperatorMulticast.subscription` @type ^`rx.Subscriber` := v2 @kind object;
  #L4a3dd4.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a3dd8.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a3dde.  v3:= new `rx.internal.operators.OperatorMulticast$2`;
  #L4a3de2.  call `<init>`(v3, v5, v2) @signature `Lrx/internal/operators/OperatorMulticast$2;.<init>:(Lrx/internal/operators/OperatorMulticast;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4a3de8.  call temp:= `create`(v3) @signature `Lrx/subscriptions/Subscriptions;.create:(Lrx/functions/Action0;)Lrx/Subscription;` @kind static;
  #L4a3dee.  v3:= temp @kind object;
  #L4a3df0.  call `set`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4a3df6.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a3dfc.  v2:= temp @kind object;
  #L4a3dfe.  v2:= (`rx.Subscription`) v2 @kind object;
  #L4a3e02.  v5.`rx.internal.operators.OperatorMulticast.guardedSubscription` @type ^`rx.Subscription` := v2 @kind object;
  #L4a3e06.  v2:= v5.`rx.internal.operators.OperatorMulticast.waitingForConnect` @type ^`java.util.List` @kind object;
  #L4a3e0a.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4a3e10.  v2:= temp @kind object;
  #L4a3e12.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4a3e18.  v3:= temp;
  #L4a3e1a.  if v3 == 0 then goto L4a3e3c;
  #L4a3e1e.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4a3e24.  v3:= temp @kind object;
  #L4a3e26.  v3:= (`rx.Subscriber`) v3 @kind object;
  #L4a3e2a.  v4:= new `rx.internal.operators.OperatorMulticast$3`;
  #L4a3e2e.  call `<init>`(v4, v5, v3, v3) @signature `Lrx/internal/operators/OperatorMulticast$3;.<init>:(Lrx/internal/operators/OperatorMulticast;Lrx/Subscriber;Lrx/Subscriber;)V` @kind direct;
  #L4a3e34.  call temp:= `unsafeSubscribe`(v1, v4) @signature `Lrx/subjects/Subject;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4a3e3a.  goto L4a3e12;
  #L4a3e3c.  v2:= v5.`rx.internal.operators.OperatorMulticast.waitingForConnect` @type ^`java.util.List` @kind object;
  #L4a3e40.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4a3e46.  v2:= v5.`rx.internal.operators.OperatorMulticast.connectedSubject` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a3e4a.  call `set`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4a3e50.  @monitorexit v0
  #L4a3e52.  v0:= v5.`rx.internal.operators.OperatorMulticast.guardedSubscription` @type ^`rx.Subscription` @kind object;
  #L4a3e56.  call `call`(v6, v0) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4a3e5c.  v6:= v5.`rx.internal.operators.OperatorMulticast.guard` @type ^`java.lang.Object` @kind object;
  #L4a3e60.  @monitorenter v6
  #L4a3e62.  v0:= v5.`rx.internal.operators.OperatorMulticast.subscription` @type ^`rx.Subscriber` @kind object;
  #L4a3e66.  @monitorexit v6
  #L4a3e68.  if v0 == 0 then goto L4a3e76;
  #L4a3e6c.  v6:= v5.`rx.internal.operators.OperatorMulticast.source` @type ^`rx.Observable` @kind object;
  #L4a3e70.  call temp:= `subscribe`(v6, v0) @signature `Lrx/Observable;.subscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4a3e76.  return @kind void;
  #L4a3e78.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a3e7a.  @monitorexit v6
  #L4a3e7c.  throw v0;
  #L4a3e7e.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a3e80.  @monitorexit v0
  #L4a3e82.  goto L4a3e86;
  #L4a3e84.  throw v6;
  #L4a3e86.  goto L4a3e84;
  catch `java.lang.Throwable` @[L4a3da2..L4a3e52] goto L4a3e7e;
  catch `java.lang.Throwable` @[L4a3e62..L4a3e68] goto L4a3e78;
  catch `java.lang.Throwable` @[L4a3e7a..L4a3e7c] goto L4a3e78;
  catch `java.lang.Throwable` @[L4a3e80..L4a3e82] goto L4a3e7e;
}
