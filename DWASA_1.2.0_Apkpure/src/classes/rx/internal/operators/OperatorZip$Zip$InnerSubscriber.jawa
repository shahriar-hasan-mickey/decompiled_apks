record `rx.internal.operators.OperatorZip$Zip$InnerSubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.internal.util.RxRingBuffer` `rx.internal.operators.OperatorZip$Zip$InnerSubscriber.items` @AccessFlag FINAL;
  `rx.internal.operators.OperatorZip$Zip` `rx.internal.operators.OperatorZip$Zip$InnerSubscriber.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorZip$Zip$InnerSubscriber` v0 @kind this, `rx.internal.operators.OperatorZip$Zip` v1 @kind object) @signature `Lrx/internal/operators/OperatorZip$Zip$InnerSubscriber;.<init>:(Lrx/internal/operators/OperatorZip$Zip;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4aebec.  v0.`rx.internal.operators.OperatorZip$Zip$InnerSubscriber.this$0` @type ^`rx.internal.operators.OperatorZip$Zip` := v1 @kind object;
  #L4aebf0.  call `<init>`(v0) @signature `Lrx/Subscriber;.<init>:()V` @kind direct;
  #L4aebf6.  call temp:= `getSpmcInstance`() @signature `Lrx/internal/util/RxRingBuffer;.getSpmcInstance:()Lrx/internal/util/RxRingBuffer;` @kind static;
  #L4aebfc.  v1:= temp @kind object;
  #L4aebfe.  v0.`rx.internal.operators.OperatorZip$Zip$InnerSubscriber.items` @type ^`rx.internal.util.RxRingBuffer` := v1 @kind object;
  #L4aec02.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OperatorZip$Zip$InnerSubscriber` v1 @kind this) @signature `Lrx/internal/operators/OperatorZip$Zip$InnerSubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aec14.  v0:= v1.`rx.internal.operators.OperatorZip$Zip$InnerSubscriber.items` @type ^`rx.internal.util.RxRingBuffer` @kind object;
  #L4aec18.  call `onCompleted`(v0) @signature `Lrx/internal/util/RxRingBuffer;.onCompleted:()V` @kind virtual;
  #L4aec1e.  v0:= v1.`rx.internal.operators.OperatorZip$Zip$InnerSubscriber.this$0` @type ^`rx.internal.operators.OperatorZip$Zip` @kind object;
  #L4aec22.  call `tick`(v0) @signature `Lrx/internal/operators/OperatorZip$Zip;.tick:()V` @kind virtual;
  #L4aec28.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OperatorZip$Zip$InnerSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OperatorZip$Zip$InnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aec3c.  v0:= v1.`rx.internal.operators.OperatorZip$Zip$InnerSubscriber.this$0` @type ^`rx.internal.operators.OperatorZip$Zip` @kind object;
  #L4aec40.  v0:= v0.`rx.internal.operators.OperatorZip$Zip.child` @type ^`rx.Observer` @kind object;
  #L4aec44.  call `onError`(v0, v2) @signature `Lrx/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4aec4a.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OperatorZip$Zip$InnerSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OperatorZip$Zip$InnerSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4aec5c.  v0:= v1.`rx.internal.operators.OperatorZip$Zip$InnerSubscriber.items` @type ^`rx.internal.util.RxRingBuffer` @kind object;
  #L4aec60.  call `onNext`(v0, v2) @signature `Lrx/internal/util/RxRingBuffer;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4aec66.  goto L4aec70;
  #L4aec68.  v2:= Exception @type ^`rx.exceptions.MissingBackpressureException` @kind object;
  #L4aec6a.  call `onError`(v1, v2) @signature `Lrx/internal/operators/OperatorZip$Zip$InnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4aec70.  v2:= v1.`rx.internal.operators.OperatorZip$Zip$InnerSubscriber.this$0` @type ^`rx.internal.operators.OperatorZip$Zip` @kind object;
  #L4aec74.  call `tick`(v2) @signature `Lrx/internal/operators/OperatorZip$Zip;.tick:()V` @kind virtual;
  #L4aec7a.  return @kind void;
  catch `rx.exceptions.MissingBackpressureException` @[L4aec5c..L4aec66] goto L4aec68;
}
procedure `void` `onStart`(`rx.internal.operators.OperatorZip$Zip$InnerSubscriber` v2 @kind this) @signature `Lrx/internal/operators/OperatorZip$Zip$InnerSubscriber;.onStart:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4aec9c.  v0:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L4aeca0.  v0:= (`long`) v0 @kind i2l;
  #L4aeca2.  call `request`(v2, v0) @signature `Lrx/internal/operators/OperatorZip$Zip$InnerSubscriber;.request:(J)V` @kind virtual;
  #L4aeca8.  return @kind void;
}
procedure `void` `requestMore`(`rx.internal.operators.OperatorZip$Zip$InnerSubscriber` v0 @kind this, `long` v1 ) @signature `Lrx/internal/operators/OperatorZip$Zip$InnerSubscriber;.requestMore:(J)V` @AccessFlag PUBLIC {
    temp;

  #L4aecbc.  call `request`(v0, v1) @signature `Lrx/internal/operators/OperatorZip$Zip$InnerSubscriber;.request:(J)V` @kind virtual;
  #L4aecc2.  return @kind void;
}
