record `rx.internal.operators.OnSubscribeRedo$3` @kind class @AccessFlag  extends `rx.Observable$Operator` @kind interface {
  `rx.internal.operators.OnSubscribeRedo` `rx.internal.operators.OnSubscribeRedo$3.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeRedo$3` v0 @kind this, `rx.internal.operators.OnSubscribeRedo` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$3;.<init>:(Lrx/internal/operators/OnSubscribeRedo;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49bf98.  v0.`rx.internal.operators.OnSubscribeRedo$3.this$0` @type ^`rx.internal.operators.OnSubscribeRedo` := v1 @kind object;
  #L49bf9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49bfa2.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OnSubscribeRedo$3` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$3;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49bf5c.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L49bf60.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeRedo$3;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L49bf66.  v1:= temp @kind object;
  #L49bf68.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OnSubscribeRedo$3` v1 @kind this, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$3;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49bf7c.  v0:= new `rx.internal.operators.OnSubscribeRedo$3$1`;
  #L49bf80.  call `<init>`(v0, v1, v2, v2) @signature `Lrx/internal/operators/OnSubscribeRedo$3$1;.<init>:(Lrx/internal/operators/OnSubscribeRedo$3;Lrx/Subscriber;Lrx/Subscriber;)V` @kind direct;
  #L49bf86.  return v0 @kind object;
}
