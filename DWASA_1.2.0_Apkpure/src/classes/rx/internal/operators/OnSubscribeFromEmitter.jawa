record `rx.internal.operators.OnSubscribeFromEmitter` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$OnSubscribe` @kind interface {
  `rx.functions.Action1` `rx.internal.operators.OnSubscribeFromEmitter.Emitter` @AccessFlag FINAL;
  `rx.Emitter$BackpressureMode` `rx.internal.operators.OnSubscribeFromEmitter.backpressure` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeFromEmitter` v0 @kind this, `rx.functions.Action1` v1 @kind object, `rx.Emitter$BackpressureMode` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter;.<init>:(Lrx/functions/Action1;Lrx/Emitter$BackpressureMode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L499710.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L499716.  v0.`rx.internal.operators.OnSubscribeFromEmitter.Emitter` @type ^`rx.functions.Action1` := v1 @kind object;
  #L49971a.  v0.`rx.internal.operators.OnSubscribeFromEmitter.backpressure` @type ^`rx.Emitter$BackpressureMode` := v2 @kind object;
  #L49971e.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeFromEmitter` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L499730.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L499734.  call `call`(v0, v1) @signature `Lrx/internal/operators/OnSubscribeFromEmitter;.call:(Lrx/Subscriber;)V` @kind virtual;
  #L49973a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.OnSubscribeFromEmitter` v2 @kind this, `rx.Subscriber` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeFromEmitter;.call:(Lrx/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49974c.  v0:= `@@rx.internal.operators.OnSubscribeFromEmitter$1.$SwitchMap$rx$Emitter$BackpressureMode` @type ^`int`[] @kind object;
  #L499750.  v1:= v2.`rx.internal.operators.OnSubscribeFromEmitter.backpressure` @type ^`rx.Emitter$BackpressureMode` @kind object;
  #L499754.  call temp:= `ordinal`(v1) @signature `Lrx/Emitter$BackpressureMode;.ordinal:()I` @kind virtual;
  #L49975a.  v1:= temp;
  #L49975c.  v0:= v0[v1];
  #L499760.  v1:= 1I;
  #L499762.  if v0 == v1 then goto L4997ac;
  #L499766.  v1:= 2I;
  #L499768.  if v0 == v1 then goto L4997a0;
  #L49976c.  v1:= 3I;
  #L49976e.  if v0 == v1 then goto L499794;
  #L499772.  v1:= 4I;
  #L499774.  if v0 == v1 then goto L499788;
  #L499778.  v0:= new `rx.internal.operators.OnSubscribeFromEmitter$BufferEmitter`;
  #L49977c.  v1:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L499780.  call `<init>`(v0, v3, v1) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$BufferEmitter;.<init>:(Lrx/Subscriber;I)V` @kind direct;
  #L499786.  goto L4997b6;
  #L499788.  v0:= new `rx.internal.operators.OnSubscribeFromEmitter$LatestEmitter`;
  #L49978c.  call `<init>`(v0, v3) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$LatestEmitter;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L499792.  goto L4997b6;
  #L499794.  v0:= new `rx.internal.operators.OnSubscribeFromEmitter$DropEmitter`;
  #L499798.  call `<init>`(v0, v3) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$DropEmitter;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L49979e.  goto L4997b6;
  #L4997a0.  v0:= new `rx.internal.operators.OnSubscribeFromEmitter$ErrorEmitter`;
  #L4997a4.  call `<init>`(v0, v3) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$ErrorEmitter;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4997aa.  goto L4997b6;
  #L4997ac.  v0:= new `rx.internal.operators.OnSubscribeFromEmitter$NoneEmitter`;
  #L4997b0.  call `<init>`(v0, v3) @signature `Lrx/internal/operators/OnSubscribeFromEmitter$NoneEmitter;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4997b6.  call `add`(v3, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4997bc.  call `setProducer`(v3, v0) @signature `Lrx/Subscriber;.setProducer:(Lrx/Producer;)V` @kind virtual;
  #L4997c2.  v3:= v2.`rx.internal.operators.OnSubscribeFromEmitter.Emitter` @type ^`rx.functions.Action1` @kind object;
  #L4997c6.  call `call`(v3, v0) @signature `Lrx/functions/Action1;.call:(Ljava/lang/Object;)V` @kind interface;
  #L4997cc.  return @kind void;
}
