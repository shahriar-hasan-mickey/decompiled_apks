record `rx.internal.operators.SingleOperatorOnErrorResumeNext` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Single$OnSubscribe` @kind interface {
  `rx.Single` `rx.internal.operators.SingleOperatorOnErrorResumeNext.originalSingle` @AccessFlag PRIVATE_FINAL;
  `rx.functions.Func1` `rx.internal.operators.SingleOperatorOnErrorResumeNext.resumeFunctionInCaseOfError` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.SingleOperatorOnErrorResumeNext` v0 @kind this, `rx.Single` v1 @kind object, `rx.functions.Func1` v2 @kind object) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext;.<init>:(Lrx/Single;Lrx/functions/Func1;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4b0408.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4b040e.  if v1 == 0 then goto L4b0430;
  #L4b0412.  if v2 == 0 then goto L4b0420;
  #L4b0416.  v0.`rx.internal.operators.SingleOperatorOnErrorResumeNext.originalSingle` @type ^`rx.Single` := v1 @kind object;
  #L4b041a.  v0.`rx.internal.operators.SingleOperatorOnErrorResumeNext.resumeFunctionInCaseOfError` @type ^`rx.functions.Func1` := v2 @kind object;
  #L4b041e.  return @kind void;
  #L4b0420.  v1:= new `java.lang.NullPointerException`;
  #L4b0424.  v2:= "resumeFunctionInCaseOfError must not be null" @kind object;
  #L4b0428.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b042e.  throw v1;
  #L4b0430.  v1:= new `java.lang.NullPointerException`;
  #L4b0434.  v2:= "originalSingle must not be null" @kind object;
  #L4b0438.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b043e.  throw v1;
}
procedure `rx.internal.operators.SingleOperatorOnErrorResumeNext` `withFunction`(`rx.Single` v1 @kind object, `rx.functions.Func1` v2 @kind object) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext;.withFunction:(Lrx/Single;Lrx/functions/Func1;)Lrx/internal/operators/SingleOperatorOnErrorResumeNext;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4b03b0.  v0:= new `rx.internal.operators.SingleOperatorOnErrorResumeNext`;
  #L4b03b4.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext;.<init>:(Lrx/Single;Lrx/functions/Func1;)V` @kind direct;
  #L4b03ba.  return v0 @kind object;
}
procedure `rx.internal.operators.SingleOperatorOnErrorResumeNext` `withOther`(`rx.Single` v2 @kind object, `rx.Single` v3 @kind object) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext;.withOther:(Lrx/Single;Lrx/Single;)Lrx/internal/operators/SingleOperatorOnErrorResumeNext;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4b03cc.  if v3 == 0 then goto L4b03e6;
  #L4b03d0.  v0:= new `rx.internal.operators.SingleOperatorOnErrorResumeNext`;
  #L4b03d4.  v1:= new `rx.internal.operators.SingleOperatorOnErrorResumeNext$1`;
  #L4b03d8.  call `<init>`(v1, v3) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext$1;.<init>:(Lrx/Single;)V` @kind direct;
  #L4b03de.  call `<init>`(v0, v2, v1) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext;.<init>:(Lrx/Single;Lrx/functions/Func1;)V` @kind direct;
  #L4b03e4.  return v0 @kind object;
  #L4b03e6.  v2:= new `java.lang.NullPointerException`;
  #L4b03ea.  v3:= "resumeSingleInCaseOfError must not be null" @kind object;
  #L4b03ee.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b03f4.  throw v2;
}
procedure `void` `call`(`rx.internal.operators.SingleOperatorOnErrorResumeNext` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext;.call:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4b0450.  v1:= (`rx.SingleSubscriber`) v1 @kind object;
  #L4b0454.  call `call`(v0, v1) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext;.call:(Lrx/SingleSubscriber;)V` @kind virtual;
  #L4b045a.  return @kind void;
}
procedure `void` `call`(`rx.internal.operators.SingleOperatorOnErrorResumeNext` v1 @kind this, `rx.SingleSubscriber` v2 @kind object) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext;.call:(Lrx/SingleSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b046c.  v0:= new `rx.internal.operators.SingleOperatorOnErrorResumeNext$2`;
  #L4b0470.  call `<init>`(v0, v1, v2) @signature `Lrx/internal/operators/SingleOperatorOnErrorResumeNext$2;.<init>:(Lrx/internal/operators/SingleOperatorOnErrorResumeNext;Lrx/SingleSubscriber;)V` @kind direct;
  #L4b0476.  call `add`(v2, v0) @signature `Lrx/SingleSubscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4b047c.  v2:= v1.`rx.internal.operators.SingleOperatorOnErrorResumeNext.originalSingle` @type ^`rx.Single` @kind object;
  #L4b0480.  call temp:= `subscribe`(v2, v0) @signature `Lrx/Single;.subscribe:(Lrx/SingleSubscriber;)Lrx/Subscription;` @kind virtual;
  #L4b0486.  return @kind void;
}
