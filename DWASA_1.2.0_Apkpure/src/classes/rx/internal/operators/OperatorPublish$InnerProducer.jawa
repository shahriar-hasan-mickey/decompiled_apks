record `rx.internal.operators.OperatorPublish$InnerProducer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `rx.Producer` @kind interface, `rx.Subscription` @kind interface {
  `rx.Subscriber` `rx.internal.operators.OperatorPublish$InnerProducer.child` @AccessFlag FINAL;
  `rx.internal.operators.OperatorPublish$PublishSubscriber` `rx.internal.operators.OperatorPublish$InnerProducer.parent` @AccessFlag FINAL;
}
global `long` `@@rx.internal.operators.OperatorPublish$InnerProducer.NOT_REQUESTED` @AccessFlag STATIC_FINAL;
global `long` `@@rx.internal.operators.OperatorPublish$InnerProducer.UNSUBSCRIBED` @AccessFlag STATIC_FINAL;
global `long` `@@rx.internal.operators.OperatorPublish$InnerProducer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`rx.internal.operators.OperatorPublish$InnerProducer` v0 @kind this, `rx.internal.operators.OperatorPublish$PublishSubscriber` v1 @kind object, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.<init>:(Lrx/internal/operators/OperatorPublish$PublishSubscriber;Lrx/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a55b8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a55be.  v0.`rx.internal.operators.OperatorPublish$InnerProducer.parent` @type ^`rx.internal.operators.OperatorPublish$PublishSubscriber` := v1 @kind object;
  #L4a55c2.  v0.`rx.internal.operators.OperatorPublish$InnerProducer.child` @type ^`rx.Subscriber` := v2 @kind object;
  #L4a55c6.  v1:= -2.0D;
  #L4a55ca.  call `lazySet`(v0, v1) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.lazySet:(J)V` @kind virtual;
  #L4a55d0.  return @kind void;
}
procedure `boolean` `isUnsubscribed`(`rx.internal.operators.OperatorPublish$InnerProducer` v5 @kind this) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.isUnsubscribed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a54c8.  call temp:= `get`(v5) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.get:()J` @kind virtual;
  #L4a54ce.  v0:= temp @kind wide;
  #L4a54d0.  v2:= -9223372036854775808L;
  #L4a54d4.  v4:= lcmp(v0, v2);
  #L4a54d8.  if v4 != 0 then goto L4a54e0;
  #L4a54dc.  v0:= 1I;
  #L4a54de.  goto L4a54e2;
  #L4a54e0.  v0:= 0I;
  #L4a54e2.  return v0;
}
procedure `long` `produced`(`rx.internal.operators.OperatorPublish$InnerProducer` v7 @kind this, `long` v8 ) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.produced:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4a54f4.  v0:= 0L;
  #L4a54f8.  v2:= lcmp(v8, v0);
  #L4a54fc.  if v2 <= 0 then goto L4a5594;
  #L4a5500.  call temp:= `get`(v7) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.get:()J` @kind virtual;
  #L4a5506.  v2:= temp @kind wide;
  #L4a5508.  v4:= -2.0D;
  #L4a550c.  v6:= lcmp(v2, v4);
  #L4a5510.  if v6 == 0 then goto L4a5584;
  #L4a5514.  v4:= -9223372036854775808L;
  #L4a5518.  v6:= lcmp(v2, v4);
  #L4a551c.  if v6 != 0 then goto L4a5522;
  #L4a5520.  return v4 @kind wide;
  #L4a5522.  v4:= v2 - v8 @kind long;
  #L4a5526.  v6:= lcmp(v4, v0);
  #L4a552a.  if v6 < 0 then goto L4a553c;
  #L4a552e.  call temp:= `compareAndSet`(v7, v2, v4) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a5534.  v2:= temp;
  #L4a5536.  if v2 == 0 then goto L4a5500;
  #L4a553a.  return v4 @kind wide;
  #L4a553c.  v0:= new `java.lang.IllegalStateException`;
  #L4a5540.  v1:= new `java.lang.StringBuilder`;
  #L4a5544.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4a554a.  v4:= "More produced (" @kind object;
  #L4a554e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a5554.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a555a.  v8:= ") than requested (" @kind object;
  #L4a555e.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a5564.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a556a.  v8:= ")" @kind object;
  #L4a556e.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4a5574.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4a557a.  v8:= temp @kind object;
  #L4a557c.  call `<init>`(v0, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a5582.  throw v0;
  #L4a5584.  v8:= new `java.lang.IllegalStateException`;
  #L4a5588.  v9:= "Produced without request" @kind object;
  #L4a558c.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a5592.  throw v8;
  #L4a5594.  v8:= new `java.lang.IllegalArgumentException`;
  #L4a5598.  v9:= "Cant produce zero or less" @kind object;
  #L4a559c.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a55a2.  goto L4a55a6;
  #L4a55a4.  throw v8;
  #L4a55a6.  goto L4a55a4;
}
procedure `void` `request`(`rx.internal.operators.OperatorPublish$InnerProducer` v7 @kind this, `long` v8 ) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4a55e4.  v0:= 0L;
  #L4a55e8.  v2:= lcmp(v8, v0);
  #L4a55ec.  if v2 >= 0 then goto L4a55f2;
  #L4a55f0.  return @kind void;
  #L4a55f2.  call temp:= `get`(v7) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.get:()J` @kind virtual;
  #L4a55f8.  v2:= temp @kind wide;
  #L4a55fa.  v4:= -9223372036854775808L;
  #L4a55fe.  v6:= lcmp(v2, v4);
  #L4a5602.  if v6 != 0 then goto L4a5608;
  #L4a5606.  return @kind void;
  #L4a5608.  v4:= lcmp(v2, v0);
  #L4a560c.  if v4 < 0 then goto L4a561a;
  #L4a5610.  v4:= lcmp(v8, v0);
  #L4a5614.  if v4 != 0 then goto L4a561a;
  #L4a5618.  return @kind void;
  #L4a561a.  v4:= -2.0D;
  #L4a561e.  v6:= lcmp(v2, v4);
  #L4a5622.  if v6 != 0 then goto L4a562a;
  #L4a5626.  v4:= v8 @kind wide;
  #L4a5628.  goto L4a5640;
  #L4a562a.  v4:= v2 + v8 @kind long;
  #L4a562e.  v6:= lcmp(v4, v0);
  #L4a5632.  if v6 >= 0 then goto L4a5640;
  #L4a5636.  v4:= 9223372036854775807L;
  #L4a5640.  call temp:= `compareAndSet`(v7, v2, v4) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a5646.  v2:= temp;
  #L4a5648.  if v2 == 0 then goto L4a55f2;
  #L4a564c.  v8:= v7.`rx.internal.operators.OperatorPublish$InnerProducer.parent` @type ^`rx.internal.operators.OperatorPublish$PublishSubscriber` @kind object;
  #L4a5650.  call `dispatch`(v8) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.dispatch:()V` @kind virtual;
  #L4a5656.  return @kind void;
}
procedure `void` `unsubscribe`(`rx.internal.operators.OperatorPublish$InnerProducer` v5 @kind this) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.unsubscribe:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a5668.  call temp:= `get`(v5) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.get:()J` @kind virtual;
  #L4a566e.  v0:= temp @kind wide;
  #L4a5670.  v2:= -9223372036854775808L;
  #L4a5674.  v4:= lcmp(v0, v2);
  #L4a5678.  if v4 == 0 then goto L4a56a0;
  #L4a567c.  call temp:= `getAndSet`(v5, v2) @signature `Lrx/internal/operators/OperatorPublish$InnerProducer;.getAndSet:(J)J` @kind virtual;
  #L4a5682.  v0:= temp @kind wide;
  #L4a5684.  v4:= lcmp(v0, v2);
  #L4a5688.  if v4 == 0 then goto L4a56a0;
  #L4a568c.  v0:= v5.`rx.internal.operators.OperatorPublish$InnerProducer.parent` @type ^`rx.internal.operators.OperatorPublish$PublishSubscriber` @kind object;
  #L4a5690.  call `remove`(v0, v5) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.remove:(Lrx/internal/operators/OperatorPublish$InnerProducer;)V` @kind virtual;
  #L4a5696.  v0:= v5.`rx.internal.operators.OperatorPublish$InnerProducer.parent` @type ^`rx.internal.operators.OperatorPublish$PublishSubscriber` @kind object;
  #L4a569a.  call `dispatch`(v0) @signature `Lrx/internal/operators/OperatorPublish$PublishSubscriber;.dispatch:()V` @kind virtual;
  #L4a56a0.  return @kind void;
}
