record `rx.internal.operators.OperatorObserveOn` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `int` `rx.internal.operators.OperatorObserveOn.bufferSize` @AccessFlag PRIVATE_FINAL;
  `boolean` `rx.internal.operators.OperatorObserveOn.delayError` @AccessFlag PRIVATE_FINAL;
  `rx.Scheduler` `rx.internal.operators.OperatorObserveOn.scheduler` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorObserveOn` v1 @kind this, `rx.Scheduler` v2 @kind object, `boolean` v3 ) @signature `Lrx/internal/operators/OperatorObserveOn;.<init>:(Lrx/Scheduler;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a437c.  v0:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L4a4380.  call `<init>`(v1, v2, v3, v0) @signature `Lrx/internal/operators/OperatorObserveOn;.<init>:(Lrx/Scheduler;ZI)V` @kind direct;
  #L4a4386.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorObserveOn` v0 @kind this, `rx.Scheduler` v1 @kind object, `boolean` v2 , `int` v3 ) @signature `Lrx/internal/operators/OperatorObserveOn;.<init>:(Lrx/Scheduler;ZI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a4398.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a439e.  v0.`rx.internal.operators.OperatorObserveOn.scheduler` @type ^`rx.Scheduler` := v1 @kind object;
  #L4a43a2.  v0.`rx.internal.operators.OperatorObserveOn.delayError` @type ^`boolean` := v2 @kind boolean;
  #L4a43a6.  if v3 <= 0 then goto L4a43ac;
  #L4a43aa.  goto L4a43b0;
  #L4a43ac.  v3:= `@@rx.internal.util.RxRingBuffer.SIZE` @type ^`int`;
  #L4a43b0.  v0.`rx.internal.operators.OperatorObserveOn.bufferSize` @type ^`int` := v3;
  #L4a43b4.  return @kind void;
}
procedure `rx.Observable$Operator` `rebatch`(`int` v1 ) @signature `Lrx/internal/operators/OperatorObserveOn;.rebatch:(I)Lrx/Observable$Operator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4a431c.  v0:= new `rx.internal.operators.OperatorObserveOn$1`;
  #L4a4320.  call `<init>`(v0, v1) @signature `Lrx/internal/operators/OperatorObserveOn$1;.<init>:(I)V` @kind direct;
  #L4a4326.  return v0 @kind object;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorObserveOn` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorObserveOn;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a42fc.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a4300.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorObserveOn;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a4306.  v1:= temp @kind object;
  #L4a4308.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorObserveOn` v4 @kind this, `rx.Subscriber` v5 @kind object) @signature `Lrx/internal/operators/OperatorObserveOn;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a4338.  v0:= v4.`rx.internal.operators.OperatorObserveOn.scheduler` @type ^`rx.Scheduler` @kind object;
  #L4a433c.  v1:= instanceof @variable v0 @type ^`rx.internal.schedulers.ImmediateScheduler` @kind boolean;
  #L4a4340.  if v1 == 0 then goto L4a4346;
  #L4a4344.  return v5 @kind object;
  #L4a4346.  v1:= instanceof @variable v0 @type ^`rx.internal.schedulers.TrampolineScheduler` @kind boolean;
  #L4a434a.  if v1 == 0 then goto L4a4350;
  #L4a434e.  return v5 @kind object;
  #L4a4350.  v1:= new `rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber`;
  #L4a4354.  v2:= v4.`rx.internal.operators.OperatorObserveOn.delayError` @type ^`boolean` @kind boolean;
  #L4a4358.  v3:= v4.`rx.internal.operators.OperatorObserveOn.bufferSize` @type ^`int`;
  #L4a435c.  call `<init>`(v1, v0, v5, v2, v3) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.<init>:(Lrx/Scheduler;Lrx/Subscriber;ZI)V` @kind direct;
  #L4a4362.  call `init`(v1) @signature `Lrx/internal/operators/OperatorObserveOn$ObserveOnSubscriber;.init:()V` @kind virtual;
  #L4a4368.  return v1 @kind object;
}
