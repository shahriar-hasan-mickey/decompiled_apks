record `rx.internal.operators.OperatorTakeUntil` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `rx.Observable` `rx.internal.operators.OperatorTakeUntil.other` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorTakeUntil` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/internal/operators/OperatorTakeUntil;.<init>:(Lrx/Observable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4aa7fc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4aa802.  v0.`rx.internal.operators.OperatorTakeUntil.other` @type ^`rx.Observable` := v1 @kind object;
  #L4aa806.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorTakeUntil` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorTakeUntil;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4aa78c.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4aa790.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorTakeUntil;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4aa796.  v1:= temp @kind object;
  #L4aa798.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorTakeUntil` v3 @kind this, `rx.Subscriber` v4 @kind object) @signature `Lrx/internal/operators/OperatorTakeUntil;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4aa7ac.  v0:= new `rx.observers.SerializedSubscriber`;
  #L4aa7b0.  v1:= 0I;
  #L4aa7b2.  call `<init>`(v0, v4, v1) @signature `Lrx/observers/SerializedSubscriber;.<init>:(Lrx/Subscriber;Z)V` @kind direct;
  #L4aa7b8.  v2:= new `rx.internal.operators.OperatorTakeUntil$1`;
  #L4aa7bc.  call `<init>`(v2, v3, v0, v1, v0) @signature `Lrx/internal/operators/OperatorTakeUntil$1;.<init>:(Lrx/internal/operators/OperatorTakeUntil;Lrx/Subscriber;ZLrx/Subscriber;)V` @kind direct;
  #L4aa7c2.  v1:= new `rx.internal.operators.OperatorTakeUntil$2`;
  #L4aa7c6.  call `<init>`(v1, v3, v2) @signature `Lrx/internal/operators/OperatorTakeUntil$2;.<init>:(Lrx/internal/operators/OperatorTakeUntil;Lrx/Subscriber;)V` @kind direct;
  #L4aa7cc.  call `add`(v0, v2) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4aa7d2.  call `add`(v0, v1) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4aa7d8.  call `add`(v4, v0) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4aa7de.  v4:= v3.`rx.internal.operators.OperatorTakeUntil.other` @type ^`rx.Observable` @kind object;
  #L4aa7e2.  call temp:= `unsafeSubscribe`(v4, v1) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4aa7e8.  return v2 @kind object;
}
