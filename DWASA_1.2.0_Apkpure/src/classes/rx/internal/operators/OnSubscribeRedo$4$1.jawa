record `rx.internal.operators.OnSubscribeRedo$4$1` @kind class @AccessFlag  extends `rx.Subscriber` @kind class {
  `rx.internal.operators.OnSubscribeRedo$4` `rx.internal.operators.OnSubscribeRedo$4$1.this$1` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeRedo$4$1` v0 @kind this, `rx.internal.operators.OnSubscribeRedo$4` v1 @kind object, `rx.Subscriber` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$4$1;.<init>:(Lrx/internal/operators/OnSubscribeRedo$4;Lrx/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49bfb4.  v0.`rx.internal.operators.OnSubscribeRedo$4$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$4` := v1 @kind object;
  #L49bfb8.  call `<init>`(v0, v2) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L49bfbe.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeRedo$4$1` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeRedo$4$1;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49bfd0.  v0:= v1.`rx.internal.operators.OnSubscribeRedo$4$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$4` @kind object;
  #L49bfd4.  v0:= v0.`rx.internal.operators.OnSubscribeRedo$4.val$child` @type ^`rx.Subscriber` @kind object;
  #L49bfd8.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49bfde.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeRedo$4$1` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$4$1;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49bff0.  v0:= v1.`rx.internal.operators.OnSubscribeRedo$4$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$4` @kind object;
  #L49bff4.  v0:= v0.`rx.internal.operators.OnSubscribeRedo$4.val$child` @type ^`rx.Subscriber` @kind object;
  #L49bff8.  call `onError`(v0, v2) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49bffe.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeRedo$4$1` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$4$1;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49c010.  v5:= v4.`rx.internal.operators.OnSubscribeRedo$4$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$4` @kind object;
  #L49c014.  v5:= v5.`rx.internal.operators.OnSubscribeRedo$4.val$child` @type ^`rx.Subscriber` @kind object;
  #L49c018.  call temp:= `isUnsubscribed`(v5) @signature `Lrx/Subscriber;.isUnsubscribed:()Z` @kind virtual;
  #L49c01e.  v5:= temp;
  #L49c020.  if v5 != 0 then goto L49c06a;
  #L49c024.  v5:= v4.`rx.internal.operators.OnSubscribeRedo$4$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$4` @kind object;
  #L49c028.  v5:= v5.`rx.internal.operators.OnSubscribeRedo$4.val$consumerCapacity` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49c02c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49c032.  v0:= temp @kind wide;
  #L49c034.  v2:= 0L;
  #L49c038.  v5:= lcmp(v0, v2);
  #L49c03c.  if v5 <= 0 then goto L49c058;
  #L49c040.  v5:= v4.`rx.internal.operators.OnSubscribeRedo$4$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$4` @kind object;
  #L49c044.  v5:= v5.`rx.internal.operators.OnSubscribeRedo$4.val$worker` @type ^`rx.Scheduler$Worker` @kind object;
  #L49c048.  v0:= v4.`rx.internal.operators.OnSubscribeRedo$4$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$4` @kind object;
  #L49c04c.  v0:= v0.`rx.internal.operators.OnSubscribeRedo$4.val$subscribeToSource` @type ^`rx.functions.Action0` @kind object;
  #L49c050.  call temp:= `schedule`(v5, v0) @signature `Lrx/Scheduler$Worker;.schedule:(Lrx/functions/Action0;)Lrx/Subscription;` @kind virtual;
  #L49c056.  goto L49c06a;
  #L49c058.  v5:= v4.`rx.internal.operators.OnSubscribeRedo$4$1.this$1` @type ^`rx.internal.operators.OnSubscribeRedo$4` @kind object;
  #L49c05c.  v5:= v5.`rx.internal.operators.OnSubscribeRedo$4.val$resumeBoundary` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L49c060.  v0:= 0I;
  #L49c062.  v1:= 1I;
  #L49c064.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L49c06a.  return @kind void;
}
procedure `void` `setProducer`(`rx.internal.operators.OnSubscribeRedo$4$1` v2 @kind this, `rx.Producer` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeRedo$4$1;.setProducer:(Lrx/Producer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49c07c.  v0:= 9223372036854775807L;
  #L49c086.  call `request`(v3, v0) @signature `Lrx/Producer;.request:(J)V` @kind interface;
  #L49c08c.  return @kind void;
}
