record `rx.internal.operators.OnSubscribeOnAssembly$OnAssemblySubscriber` @kind class @AccessFlag FINAL extends `rx.Subscriber` @kind class {
  `rx.Subscriber` `rx.internal.operators.OnSubscribeOnAssembly$OnAssemblySubscriber.actual` @AccessFlag FINAL;
  `java.lang.String` `rx.internal.operators.OnSubscribeOnAssembly$OnAssemblySubscriber.stacktrace` @AccessFlag FINAL;
}
procedure `void` `<init>`(`rx.internal.operators.OnSubscribeOnAssembly$OnAssemblySubscriber` v0 @kind this, `rx.Subscriber` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeOnAssembly$OnAssemblySubscriber;.<init>:(Lrx/Subscriber;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49aec0.  call `<init>`(v0, v1) @signature `Lrx/Subscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L49aec6.  v0.`rx.internal.operators.OnSubscribeOnAssembly$OnAssemblySubscriber.actual` @type ^`rx.Subscriber` := v1 @kind object;
  #L49aeca.  v0.`rx.internal.operators.OnSubscribeOnAssembly$OnAssemblySubscriber.stacktrace` @type ^`java.lang.String` := v2 @kind object;
  #L49aece.  return @kind void;
}
procedure `void` `onCompleted`(`rx.internal.operators.OnSubscribeOnAssembly$OnAssemblySubscriber` v1 @kind this) @signature `Lrx/internal/operators/OnSubscribeOnAssembly$OnAssemblySubscriber;.onCompleted:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49aee0.  v0:= v1.`rx.internal.operators.OnSubscribeOnAssembly$OnAssemblySubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L49aee4.  call `onCompleted`(v0) @signature `Lrx/Subscriber;.onCompleted:()V` @kind virtual;
  #L49aeea.  return @kind void;
}
procedure `void` `onError`(`rx.internal.operators.OnSubscribeOnAssembly$OnAssemblySubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lrx/internal/operators/OnSubscribeOnAssembly$OnAssemblySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49aefc.  v0:= new `rx.exceptions.AssemblyStackTraceException`;
  #L49af00.  v1:= v2.`rx.internal.operators.OnSubscribeOnAssembly$OnAssemblySubscriber.stacktrace` @type ^`java.lang.String` @kind object;
  #L49af04.  call `<init>`(v0, v1) @signature `Lrx/exceptions/AssemblyStackTraceException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49af0a.  call `attachTo`(v0, v3) @signature `Lrx/exceptions/AssemblyStackTraceException;.attachTo:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49af10.  v0:= v2.`rx.internal.operators.OnSubscribeOnAssembly$OnAssemblySubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L49af14.  call `onError`(v0, v3) @signature `Lrx/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49af1a.  return @kind void;
}
procedure `void` `onNext`(`rx.internal.operators.OnSubscribeOnAssembly$OnAssemblySubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lrx/internal/operators/OnSubscribeOnAssembly$OnAssemblySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49af2c.  v0:= v1.`rx.internal.operators.OnSubscribeOnAssembly$OnAssemblySubscriber.actual` @type ^`rx.Subscriber` @kind object;
  #L49af30.  call `onNext`(v0, v2) @signature `Lrx/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L49af36.  return @kind void;
}
