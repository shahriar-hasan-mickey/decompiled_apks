record `rx.internal.operators.OperatorSampleWithObservable` @kind class @AccessFlag PUBLIC_FINAL extends `rx.Observable$Operator` @kind interface {
  `rx.Observable` `rx.internal.operators.OperatorSampleWithObservable.sampler` @AccessFlag FINAL;
}
global `java.lang.Object` `@@rx.internal.operators.OperatorSampleWithObservable.EMPTY_TOKEN` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lrx/internal/operators/OperatorSampleWithObservable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a7a6c.  v0:= new `java.lang.Object`;
  #L4a7a70.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a7a76.  `@@rx.internal.operators.OperatorSampleWithObservable.EMPTY_TOKEN` @type ^`java.lang.Object` := v0 @kind object;
  #L4a7a7a.  return @kind void;
}
procedure `void` `<init>`(`rx.internal.operators.OperatorSampleWithObservable` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/internal/operators/OperatorSampleWithObservable;.<init>:(Lrx/Observable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a7a8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a7a92.  v0.`rx.internal.operators.OperatorSampleWithObservable.sampler` @type ^`rx.Observable` := v1 @kind object;
  #L4a7a96.  return @kind void;
}
procedure `java.lang.Object` `call`(`rx.internal.operators.OperatorSampleWithObservable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lrx/internal/operators/OperatorSampleWithObservable;.call:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4a79e8.  v1:= (`rx.Subscriber`) v1 @kind object;
  #L4a79ec.  call temp:= `call`(v0, v1) @signature `Lrx/internal/operators/OperatorSampleWithObservable;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @kind virtual;
  #L4a79f2.  v1:= temp @kind object;
  #L4a79f4.  return v1 @kind object;
}
procedure `rx.Subscriber` `call`(`rx.internal.operators.OperatorSampleWithObservable` v5 @kind this, `rx.Subscriber` v6 @kind object) @signature `Lrx/internal/operators/OperatorSampleWithObservable;.call:(Lrx/Subscriber;)Lrx/Subscriber;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a7a08.  v0:= new `rx.observers.SerializedSubscriber`;
  #L4a7a0c.  call `<init>`(v0, v6) @signature `Lrx/observers/SerializedSubscriber;.<init>:(Lrx/Subscriber;)V` @kind direct;
  #L4a7a12.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a7a16.  v2:= `@@rx.internal.operators.OperatorSampleWithObservable.EMPTY_TOKEN` @type ^`java.lang.Object` @kind object;
  #L4a7a1a.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4a7a20.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a7a24.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a7a2a.  v3:= new `rx.internal.operators.OperatorSampleWithObservable$1`;
  #L4a7a2e.  call `<init>`(v3, v5, v1, v0, v2) @signature `Lrx/internal/operators/OperatorSampleWithObservable$1;.<init>:(Lrx/internal/operators/OperatorSampleWithObservable;Ljava/util/concurrent/atomic/AtomicReference;Lrx/observers/SerializedSubscriber;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4a7a34.  v4:= new `rx.internal.operators.OperatorSampleWithObservable$2`;
  #L4a7a38.  call `<init>`(v4, v5, v1, v0, v3) @signature `Lrx/internal/operators/OperatorSampleWithObservable$2;.<init>:(Lrx/internal/operators/OperatorSampleWithObservable;Ljava/util/concurrent/atomic/AtomicReference;Lrx/observers/SerializedSubscriber;Lrx/Subscriber;)V` @kind direct;
  #L4a7a3e.  call `lazySet`(v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a7a44.  call `add`(v6, v4) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a7a4a.  call `add`(v6, v3) @signature `Lrx/Subscriber;.add:(Lrx/Subscription;)V` @kind virtual;
  #L4a7a50.  v6:= v5.`rx.internal.operators.OperatorSampleWithObservable.sampler` @type ^`rx.Observable` @kind object;
  #L4a7a54.  call temp:= `unsafeSubscribe`(v6, v3) @signature `Lrx/Observable;.unsafeSubscribe:(Lrx/Subscriber;)Lrx/Subscription;` @kind virtual;
  #L4a7a5a.  return v4 @kind object;
}
