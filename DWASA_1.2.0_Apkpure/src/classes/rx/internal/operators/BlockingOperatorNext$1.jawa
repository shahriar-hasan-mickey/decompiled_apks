record `rx.internal.operators.BlockingOperatorNext$1` @kind class @AccessFlag FINAL extends `java.lang.Iterable` @kind interface {
  `rx.Observable` `rx.internal.operators.BlockingOperatorNext$1.val$items` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`rx.internal.operators.BlockingOperatorNext$1` v0 @kind this, `rx.Observable` v1 @kind object) @signature `Lrx/internal/operators/BlockingOperatorNext$1;.<init>:(Lrx/Observable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L492f44.  v0.`rx.internal.operators.BlockingOperatorNext$1.val$items` @type ^`rx.Observable` := v1 @kind object;
  #L492f48.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L492f4e.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`rx.internal.operators.BlockingOperatorNext$1` v3 @kind this) @signature `Lrx/internal/operators/BlockingOperatorNext$1;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L492f18.  v0:= new `rx.internal.operators.BlockingOperatorNext$NextObserver`;
  #L492f1c.  call `<init>`(v0) @signature `Lrx/internal/operators/BlockingOperatorNext$NextObserver;.<init>:()V` @kind direct;
  #L492f22.  v1:= new `rx.internal.operators.BlockingOperatorNext$NextIterator`;
  #L492f26.  v2:= v3.`rx.internal.operators.BlockingOperatorNext$1.val$items` @type ^`rx.Observable` @kind object;
  #L492f2a.  call `<init>`(v1, v2, v0) @signature `Lrx/internal/operators/BlockingOperatorNext$NextIterator;.<init>:(Lrx/Observable;Lrx/internal/operators/BlockingOperatorNext$NextObserver;)V` @kind direct;
  #L492f30.  return v1 @kind object;
}
